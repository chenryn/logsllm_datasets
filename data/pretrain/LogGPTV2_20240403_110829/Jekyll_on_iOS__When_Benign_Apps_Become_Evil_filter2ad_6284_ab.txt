loaded into unpredictable memory regions, but the in-
ternal layout of each module remains unchanged. Thus,
the ASLR implementation is vulnerable to information
leakage vulnerabilities [45]. If an attacker can obtain the
absolute address of a function in a module, she is able to
infer the memory layout of that entire module.
Privilege Separation and Sandboxing. iOS employs
traditional UNIX ﬁle permission mechanisms to manage
the ﬁle system and achieve the basic privilege separation.
While all third-party apps run as the non-privileged user
mobile, only a few most import system processes run
as the privileged user root. As a result, third-party apps
are not able to change system conﬁgurations.
To enforce isolation among apps that all run as the
same user mobile, iOS utilizes the sandboxing mech-
anism.
iOS sandbox is implemented as a policy mod-
ule in the TrustedBSD mandatory access control frame-
work [8]. Each app contains a plist ﬁle in XML format,
which declares a set of entitlements for the special capa-
bilities or security permissions in iOS. When an app is
launched, iOS determines its sandbox policy according
to its entitlements.
Although the built-in apps in iOS, such as Mobile Sa-
fari, run as the non-privileged user mobile, they may
be granted with special privileges via reserved entitle-
ments. For instance, Mobile Safari has an entitlement
called dynamic-codesigning, which allows Mo-
bile Safari to allocate a writable and executable mem-
ory buffer and generate executable code on the ﬂy—a se-
curity exception made for Mobile Safari’s Just-in-Time
USENIX Association  
22nd USENIX Security Symposium  561
3
(JIT) JavaScript engine to improve performance.
As for third-party apps, Apple applies a one-size-ﬁts-
all sandbox policy called container. According to the
study in [51], in iOS 4.3, this permissive policy allows
third-party apps to read the user’s media library, interact
with a few IOKit User Clients, communicate with the lo-
cal Mach RPC servers over the bootstrap port, access the
network, etc. On top of the default access granted by the
container policy, third party apps can also request for
two extra entitlements: one for using the iCloud storage
and one for subscribing to the push notiﬁcation service.
Finally, even though the container policy has under-
gone signiﬁcant improvements and is becoming more re-
strictive over time, as we show in this paper, our Jekyll
app, even running in sandbox, still poses a signiﬁcant
threat to the user’s privacy and system security.
Also, in contrast to other mobile platforms, such as
Android, which use the declarative permissions to regu-
late each app individually, iOS applies the default sand-
box conﬁguration on most third-party apps, which con-
sequently share the same broad set of privileges. As of
iOS 6, only a few sensitive operations, such as access-
ing location information and contact book and sending
push notiﬁcations, have to be explicitly acknowledged
by users before they can proceed.
Code signing, App Store, and App Review. Along
with the release of iOS 2.0 in 2008, Apple opened the
App Store, an application distribution platform for iOS
devices. Third-party developers are required to submit
their apps to App Store for distribution. Since then, iOS
has enforced the mandatory code signing mechanism to
ensure only the executables that have been approved and
signed by Apple are allowed to run on iOS devices. The
study in [37] presents the implementation details of iOS
code signing mechanism. In comparison with DEP, code
signing mechanism is more strict. In a DEP-enabled sys-
tem, attackers can compromise a process using ROP at-
tacks and then download a new binary and run it. This
does not apply to iOS because iOS will refuse to run the
new binary if it is not signed by a trusted authority.
To release an app through App Store, a third-party de-
veloper has to participate in Apple’s iOS developer pro-
gram and submit the app to Apple for review. The app
is signed and published by Apple only after it passes
the review process. In addition to business beneﬁts, the
mandatory review process helps Apple prevent malicious
apps from entering App Store.
2.2 Public and Private Frameworks
iOS provides the implementation of its system interfaces
in special packages called frameworks. A framework is
a directory that contains a dynamic shared library and
the related resources such as images, localization strings,
and header ﬁles. Native iOS apps are built on top of these
frameworks and written in the Objective-C programming
language, a superset of C language.
Besides the public frameworks, iOS also contains a
set of private frameworks that are not allowed to be used
in third-party apps. Even in public frameworks, there
are some undocumented APIs (i.e., private APIs) that
cannot be used by third-party apps.
In fact, these pri-
vate frameworks and APIs are reserved for the built-
in apps and public frameworks. Apple ships all public
and private frameworks as part of the iOS Software De-
velopment Kit (SDK). Third-party developers can ﬁnd
all these frameworks in their own development environ-
ment. It is worth noting that, since iOS 3.x, Apple has
combined all frameworks into a single cache ﬁle called
dyld_shared_cache in iOS devices to improve per-
formance [21].
Moreover, the creation of dynamic libraries by third-
party developers is not supported by the iOS SDK, which
makes the public frameworks the only shared libraries to
link in iOS apps. To prevent apps from dynamically load-
ing private frameworks or unofﬁcial libraries, some stan-
dard UNIX APIs are also considered as private by Apple,
such as dlopen and dlsym that support runtime load-
ing of libraries. During the app review process, linking
to private frameworks or importing private APIs can di-
rectly result in app rejections from Apple App Store.
2.3 Code Reuse and ROP Attack
Reusing the code within the original program is an ef-
fective way to bypass DEP and code signing mechanism.
Solar Designer ﬁrst suggested return-to-libc [16], which
reuses existing functions in a vulnerable program to im-
plement attacks. Shacham et al. proposed the Return-
Oriented Programming (ROP) exploitation technique in
2007 [44]. The core idea behind ROP attacks is to uti-
lize a large number of instruction sequences ending with
ret-like instructions (e.g., ret on x86 and pop{pc}
on ARM) in the original program or other libraries to
perform certain computation. Since attackers can con-
trol the data on the stack and ret-like instructions will
change the execution ﬂow according to the data on the
stack, a crafted stack layout can chain these instruc-
tion sequences together. Figure 2 shows a simple ROP
example that performs addition and storage operations
on the ARM platform. Speciﬁcally, constant values
0xdeadbeaf and 0xffffffff are loaded to the reg-
isters r1 and r2 by the ﬁrst two gadgets, respectively.
Next, an addition operation is performed by the third
gadget. At last, the addition result (0xdeadbeae) is
stored on the stack by the fourth gadget.
562  22nd USENIX Security Symposium 
USENIX Association
4
USENIX Association  
22nd USENIX Security Symposium  563
0xdeadbeaf0xdeadbeaf0xffffffff0xffffffff......1.pop{r1,pc}1.pop{r1,pc}4.strr1,[sp,#8]pop{r0}bxr04.strr1,[sp,#8]pop{r0}bxr03.addr1,r2pop{pc}3.addr1,r2pop{pc}2.pop{r2,pc}2.pop{r2,pc}Figure2:AROPexample3AttackDesignBeforeintroducingthedesignofourattackscheme,weﬁrstdiscussanexampleattack,whichdemonstratesthefeasibilityofsuchattacksandhelpsillustratethedesigndetailsintherestofthissection.3.1MotivatingExampleSupposetheattacker’sgoalistostealtheuser’scon-tacts.Tothisend,theattackerﬁrstcreatesanormalapp,agreetingcardappforinstance,whichcandown-loadgreetingcardsfromaremoteserverandthensendthemtotheuser’sfriends.ThepseudocodeinFigure3presentstheworkﬂowoftheapp,whichrequiresaccesstouser’saddressbookandthenetworkforlegitimaterea-sons.However,directabusesoftheseprivilegestosendthewholeaddressbookoverthenetworkcanbeeasilydetected.Infact,multiplesystems(e.g.,[17–19,26])havebeenproposedtodetectmaliciousappsbyidenti-fyingcodepathsorexecutiontraceswheresensitivedataisﬁrstacquiredandthentransportedoutofthedevice,andweassumetheappreviewprocesswillalsobeabletodetectandrejectsuchapps.//contains a stack buffer overﬂow ﬂaw	
1. ConnectToServerAndDownloadGreetingCards();	
2. buf=ReadAddressBook();	
3. status=SendGreetingToContacts(buf);	
4. if(status==Failed){	
5.    buf = StatusToString(status);	
6.    SendFailureReportToServer(buf);	
    }	
return address	
return address	
return address	
Static Work Flow	
Runtime Stack Layout  	
After Stack Overﬂow	
① ② ③ Figure3:RunningExampleHowever,ourexampleapp(asshowninFigure3)doesnotcontainanyfeasiblecodepathtoleaktheaddressbookafterreadingitatline2.Assuch,ourexampleappappearstobecompliantwithApple’sprivacypolicyandcanbeexpectedtopasstheappreview.Toachievethegoalofstealingtheuser’scontactwhileavoidingthedirectapproachthatwillguaranteerejectionbyAppStore,theattackerinsteadhidesvulnerabilitiesintheConnectToServerAndDownloadGreetingCardsfunction(line1inFigure3).Subsequently,whentheapprunsonavictim’siOSdeviceandtriestodownloadgreetingcardsfromtheservercontrolledbytheattacker,theserverexploitstheplantedvulnerabilitiestoremotelymanipulatetheapp’sstackintotheoneshownontherightsideofFigure3.Thecontaminatedstacklayoutwillchangetheoriginalcontrolﬂowsoftheapp.Insteadofsequentiallyexecutingthestatementsfromline2toline6,thecompromisedappﬁrstreadstheaddressbookintoabuffer(line2inFigure3),andthendirectlyin-vokestheSendFailureReportToServerfunctionatline6tosendthecontentofthebuffer(i.e.,addressbook)totheserver.Finally,theappresumesthenormalexecutionbyreturningthecontrolbacktoline3.NotethattheattackerwillavoidrevealingtheabovebehaviortoAppleandonlyexploitthevulnerabilitiesaftertheapphaspassedtheappreview.Maliciousdeveloperscanfreelydesignthevulnerabil-itiestobootstraptheattacks.Forinstance,theappcandeliberatelyleakitsmemorylayoutinformationtotheremoteserversothatASLRiscompletelyineffective.Basedonthememorylayoutinformation,attackerscanlaunchattacksbyreusingtheexitingcodeinsidetheapp.Asaresult,DEPandcodesigningcannotpreventtheex-ploit.Furthermore,byusingiOSprivateAPIs,attackerscanaccomplishmoresophisticatedattacks,eventhoughtheapprunsinthesandbox.Inotherwords,oncetheappgetsinstalled,existingsecuritymechanismsoniOSwillbeofnodefenseagainsttheattack.3.2AttackSchemeOverviewThehighlevelideaofourattackschemeisveryintuitive.Theattackercreatesanormalappinwhichheplantsvul-nerabilitiesandhidescodegadgetsalongsidethenormalfunctionalities.AftertheapppassesApple’sappreviewandgetsinstalledonvictims’devices,theattackerex-ploitsthevulnerabilitiesandassemblesthegadgetsinaparticularordertoperformmaliciousoperations.Forourattacktobesuccessful,theplantedvulnera-bilitiesshouldallowustodefeattheASLR,DEP,andcodesigningmechanismsiniOS,andatthesametimebehardlydetectable.Tothisend,wedesignaninforma-tionleakagevulnerabilitythroughwhichtheappdelib-eratelyleaksitspartialruntimememorylayoutinforma-5tion to the remote attacker. Thus, the attacker can infer
the locations of the pre-deployed gadgets, making ASLR
useless. Next, we plant a buffer overﬂow vulnerability in
the app through which the attacker can smash the stack
layout and hijack the app’s control ﬂow. The carefully
designed stack layout will chain together the gadgets to
accomplish malicious tasks.
To avoid the vulnerabilities from being detected in the
review process, the communication between the app and
the server is encrypted, and all the vulnerabilities have
special trigger conditions. Considering the fact that no
source code but only the executable is provided to the
review process, even if advanced vulnerability detection
technologies like fuzz testing and dynamic symbolic exe-
cution are employed, it is unlikely for app review process
to discover artiﬁcially planted and obscured vulnerabili-
ties.
Finally, the hidden gadgets should be discretely dis-
tributed in the app and mingled with the normal func-
tionalities, without explicit control ﬂow or and data ﬂow
connections. To do this, we create a number of infeasible
branches across the entire code space and hide gadgets
under these infeasible branches.
In addition, we orga-
nize the common operations useful for both legitimate
and malicious functionalities into individual functional
gadgets.
3.3 Bypassing ASLR via Information Leakage
The ASLR mechanism loads the app executable and
other dynamic libraries at different random locations for
each run, and this causes some difﬁculties in the process
of chaining up our gadgets. However, since native apps
are written in Objective-C, it is very easy to plant infor-
mation leakage vulnerabilities to bypass ASLR and re-
cover the addresses of our gadgets. In the following, we
present two examples of how this can be achieved.
First, we can take advantage of an out-of-bounds
memory access vulnerability to read a function pointer,
and then send the value back to the remote server. Specif-
ically, we can use a C code snippet similar to Figure 4. In
this case, the app assigns the address of a public function
to the function pointer in a C structure, and pretends to
transmit the user name to the server. However, the server
can control the size parameter of the function memcpy
and is able to accurately trigger an out-of-bounds read.
As a result, the address of the public function is leaked.
Based on this address, we can infer the memory layout
of corresponding executable ﬁle.
Alternatively, we can take advantage of type con-
fusion vulnerabilities and features of Objective-C ob-
jects to leak address information. Most objects in
Objective-C programs inherit from a common class
called NSObject. The ﬁrst ﬁeld of these objects points
struct userInfo{
char username[16];
void* (*printName)(char*);
} user;
...
user.printName = publicFunction.
...
n = attacker_controllable_value; //20
memcpy(buf, user.username, n); //get function ptr
SendToServer(buf);
Figure 4: Information Disclosure Vulnerability I
to a Class structure that stores information about the
object’s type, inheritance hierarchy, member methods,
etc. These Class structures follow the same naming
convention (i.e., a common preﬁx _objc_class_$_)
and are stored at ﬁxed offsets in the executable ﬁles. Us-
ing this information, we can also infer the address infor-
mation of the entire executable ﬁle. Figure 5 demon-
strates how this method works. First, we create an
Objective-C object with the myObject pointer point-
ing to the object. After that, we convert myObject into
an integer pointer by using explicit type-casting. Finally,
by dereferencing the integer pointer, we copy the address
value of the Class structure into the variable UID, and
send it to the remote server.
//create an object
SomeClass* myObject = [[SomeClass alloc] init];
...
int UID = *(int*)myObject; //type confusion
...
SendToServer(UID);
Figure 5: Information Disclosure Vulnerability II
Since many of the malicious operations in Table 1 rely
on private APIs, some discussion on how we invoke pri-
vate APIs in our attack is in order. To this end, we need
to be able to dynamically load private frameworks and
locate private APIs, and we employ two special APIs,
dlopen() and dlsym(). dlopen() is used to load
and link a dynamic library speciﬁed by ﬁlename and re-
turn an opaque handle for the library. dlsym() is used
to get the address of a symbol from a handle returned
from dlopen(). These two functions are implemented
in a library named libdyld.dylib. Since there is no
evidence to show that the exported APIs in this library
can be used by third-party apps, we should avoid directly
referencing to any APIs in this library.
Fortunately, we ﬁnd that both APIs are commonly
used by public frameworks due to the need for dynam-
ically loading shared libraries and obtaining the absolute
addresses of symbols in the libraries.
In particular, in
order to support PIE (Position Independent Executable),
564  22nd USENIX Security Symposium 
USENIX Association
6
public frameworks invoke imported APIs through tram-
poline functions. The trampoline functions here con-
sist of a short sequence of instructions that ﬁrst load the
absolute address of a speciﬁc function from an indirect
symbol table and then jump to that address. The indi-
rect symbol table is initially set up by the linker at run-
time. Therefore, if we can identify the trampolines for
dlopen and dlsym in a public framework, our app
can use the trampolines to indirectly invoke dlopen and
dlsym.
The task of identifying usable trampolines is simple.
With the help of a debugger, we set function breakpoints
at dlopen and dlsym and run a test app on a physi-
cal device. When the debug session hits a breakpoint,
we examine the call stack to ﬁnd out the trampoline
function and its relative offset to the beginning of the
module. Thanks to the fact that ASLR on iOS work at
the granularity of modules, we can always infer the ad-
dresses of these trampolines from the address of a public