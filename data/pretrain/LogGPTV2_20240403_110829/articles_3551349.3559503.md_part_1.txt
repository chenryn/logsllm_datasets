### A Fault Injection Platform for Learning AIOps Models

**Authors:**
- Frank Bagehorn, IBM Research GmbH, Switzerland
- Jesus Rios, T.J. Watson Research Center, IBM, United States
- Saurabh Jha, T.J. Watson Research Center, IBM, United States
- Robert Filepp, T.J. Watson Research Center, IBM, United States
- Naoki Abe, T.J. Watson Research Center, IBM, United States
- Laura Shwartz, T.J. Watson Research Center, IBM, United States
- Xi Yang, T.J. Watson Research Center, IBM, United States

**Contact Information:**
- Frank Bagehorn: [EMAIL]
- Jesus Rios: [EMAIL]
- Saurabh Jha: [EMAIL]
- Robert Filepp: [EMAIL]
- Naoki Abe: [EMAIL]
- Laura Shwartz: [EMAIL]
- Xi Yang: [EMAIL]

**Abstract:**
In today's IT environment, characterized by an increasing number of costly outages, growing system complexity, and the availability of massive operational data, there is a strong demand to effectively leverage Artificial Intelligence and Machine Learning (AI/ML) to enhance resiliency. This paper presents an automatic fault injection platform designed to generate the data needed for building AI/ML models to support modern IT operations. The key features of our platform include ease of use, the ability to orchestrate complex fault scenarios, and the optimization of data generation for the specific modeling task at hand. Specifically, we have developed a fault injection service that:
1. Combines fault injection with data collection in a unified framework.
2. Supports hybrid and multi-cloud environments.
3. Does not require programming skills for its use.

Our current implementation covers the most common fault types at both the application and infrastructure levels. The platform also includes some AI capabilities, such as interventional causal learning, which can be used to model error propagation in micro-service applications in cloud environments. This capability is particularly useful when the communication graph among micro-services is unknown and only logs are available, enabling subsequent applications like fault localization.

**Keywords:**
Fault injection, Fault diagnosis, AI-supported operations

**ACM Reference Format:**
Frank Bagehorn, Jesus Rios, Saurabh Jha, Robert Filepp, Naoki Abe, Laura Shwartz, and Xi Yang. 2022. A fault injection platform for learning AIOps models. In 37th IEEE/ACM International Conference on Automated Software Engineering (ASE’22), October 10–14, 2022, Rochester, MI, USA. ACM, New York, NY, USA, 5 pages. https://doi.org/10.1145/3551349.3559503

**Introduction:**
The Uptime Institute’s 2022 Outage Analysis Report states that the number of publicly reported outages lasting longer than 24 hours increased from 8% to 28% over the last five years. Cost analysis of outages shows a sharp increase from 2019 to 2021: outages with an estimated cost between $100,000 and $1 million increased from 28% to 47%, and outages costing over $1 million grew from 11% to 15%. With third-party commercial operators, such as cloud hosting and collocation providers, accounting for the majority (71% in 2021) of outages, those with root causes in operations top the list. While significant efforts have been made to improve bug localization techniques, research focusing on reducing operational issues for critical production applications remains limited.

Contemporary micro-service architectures have simplified the scope of software developers, but the roles of Ops/Software Reliability Engineers (SREs) have become even more complex. Today, an IT environment with a large number of inter-dependent components, using virtualization at every level, can generate millions of transactions daily, and its components can change every few seconds. The vast volume of observability data and the dynamism of the IT environment make it difficult to assess the resiliency posture of an application, leading to longer issue resolution times in production. Additionally, software releases have become more frequent due to widely adopted agile development, limiting the applicability of prior knowledge that Ops/SREs have and increasing the complexity of their role.

Infusing Artificial Intelligence and Machine Learning (AI/ML) into Ops tools is one response to the ever-increasing complexity of Ops/SREs, which many enterprises are adopting today. However, this approach heavily relies on historical data, which could have limited applicability as described above. Our automated fault injection-based learning solution, built by an IBM Research team, addresses the issues that AIOps face with stale, incomplete, and potentially misleading historical data.

**Observations and Challenges:**
There is a growing need to support feedback-driven and MAPE (Monitor, Analyze, Plan, and Execute)-based fault injection technologies to develop, train, and test AIOps models. Training and verification of AIOps models, as well as other machine learning tasks, are primarily performed by data scientists who are accustomed to feedback-driven methodologies. MAPE also allows for pruning of the fault space by learning from previous fault injections. To ensure ease of use, a fault injection framework must provide built-in data collection and observability.

Our experience shows that injecting faults (referred to as interventions) in production environments is not widely accepted due to potential adverse effects. Some interventions can be costly or even dangerous, making fault injection in production highly undesirable. While observations of an application in production can provide some information about statistical relations among events, only interventions can generate data that enables us to differentiate among different causal structures. To take advantage of interventional learning, we use the fault injection framework in staging environments.

**Example Use-Case: Learning Failure Propagation and Application Communication Graph**
In this paper, we showcase the power of our solution by developing an AIOps model that allows us to learn the communication graph for a micro-service-based application that may execute in a cloud-native, hybrid, or multi-cloud environment. We address the problem of learning the communication graph because it is not easily available to the platform provider in hybrid or multi-cloud environments. Knowledge of the communication graph among micro-services is beneficial to the platform provider, as it can be used for training a variety of AIOps models, such as optimizing management and downstream tasks like active probing, testing, performance diagnosis and mitigation, taint analysis, and fault localization.

In machine learning terms, learning the communication graph can be modeled as an interventional causal learning problem to infer the possible communication links that exist between various micro-services in the system. Specifically, it can be learned via interventions by fault injection: when programmatically injecting a fault over a certain micro-service, other dependent micro-services calling it will receive an error and, in turn, throw exceptions. By capturing such fault propagation among the micro-services, it is possible to infer the communication graph and use it for proper fault management in production.

**Our Approach:**
To tackle the challenges and observations described, we have developed a fault injection platform that supports AI learning tasks. The architectural principles we followed are:
- Combine fault injection and data collection in a single framework, so the learning of AI models does not need to manually collect operational data about the application from different sources.
- Support hybrid and multi-cloud environments.
- Make fault injection accessible to non-programmers (e.g., Q&A testers, data analysts, or data scientists), thus potentially reducing training and operational costs.

The current implementation covers faults from four categories:
- Kubernetes® resource errors
- HTTP errors in Istio®-enabled applications
- Network errors
- CPU and memory stress tests

**Conclusion:**
Our fault injection platform provides a robust and flexible solution for generating the data needed to build and validate AIOps models. By combining fault injection with data collection in a unified framework, supporting hybrid and multi-cloud environments, and making the process accessible to non-programmers, we aim to enhance the resiliency of modern IT operations. Future work will focus on expanding the platform's capabilities and integrating additional AI/ML models to further improve fault management and operational efficiency.