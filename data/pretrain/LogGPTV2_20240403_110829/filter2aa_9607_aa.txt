def mult(a, b):
    rows_a = len(a)
    cols_a = len(a[0])
    rows_b = len(b)
    cols_b = len(b[0])
    if cols_a != rows_b:
        print "cannot multiply the two matrices. Incorrect dimensions:", cols_a, rows_b
        return
    c = [[0 for row in range(cols_b)] for col in range(rows_a)]
    for i in range(rows_a):
        for j in range(cols_b):
            c[i][j] = sum(a[i][k] * b[k][j] for k in range(cols_a)) & 1
    return c
def transpose(mat):
    return [[mat[y][x] for y in range(len(mat))] for x in range(len(mat[0]))]
assert transpose([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]
def make_matrix(w, h, data):
    return [[data[i*w+j] for j in range(w)] for i in range(h)]
assert make_matrix(2, 3, [1, 2, 3, 4, 5, 6]) == [[1, 2], [3, 4], [5, 6]]
def unmake_matrix(w, h, data):
    return [data[i/w][i%w] for i in range(w*h)]
assert unmake_matrix(2, 3, [[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]
def chunks(data, n, pad_obj=0):
    pad = list(data) + [pad_obj] * (n-1)
    return [pad[i*n:(i+1)*n] for i in range(len(pad)/n)]
assert chunks([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5, 0]]
def helical_interleave_part(w, h, dat):
    mat = make_matrix(w, h, dat)
    conv = [[mat[(y+x) % h][x] for x in range(w)] for y in range(h)]
    return unmake_matrix(w, h, conv)
assert helical_interleave_part(2, 3, [1, 2, 3, 4, 5, 6]) == [1, 4, 3, 6, 5, 2]
def helical_interleave(w, h, dat):
    return sum((helical_interleave_part(w, h, part) for part in chunks(dat, w*h)), [])
assert helical_interleave(2, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 4, 3, 6, 5, 2, 7, 10, 9, 12, 11, 8]
def helical_deinterleave_part(w, h, dat):
    mat = make_matrix(w, h, dat)
    conv = [[mat[(y-x) % h][x] for x in range(w)] for y in range(h)]
    return unmake_matrix(w, h, conv)
assert helical_deinterleave_part(2, 3, [1, 4, 3, 6, 5, 2]) == [1, 2, 3, 4, 5, 6]
def helical_deinterleave(w, h, dat):
    return sum((helical_deinterleave_part(w, h, part) for part in chunks(dat, w*h)), [])
def encode_helix(g, data):
    h, w = len(g), len(g[0])
    return transpose(sum((transpose(mult([chunk], g)) for chunk in chunks(data, h)), []))[0]
def decode_helix(g, data):
    h, w = len(g), len(g[0])
    return sum((chunk[:h] for chunk in chunks(data, w)), [])
def get_wrong_bit(h, dec):
    for i, row in enumerate(transpose(h)):
        if row == dec:
            return i
def decode_helix_ec(g_mat, h_mat, data):
    h, w = len(g_mat), len(g_mat[0])
    result = []
    for chunk in chunks(data, w):
        dec = transpose(mult(h_mat, transpose([chunk])))[0]
        if not all(b == 0 for b in dec):
            bit = get_wrong_bit(h_mat, dec)
            chunk[bit] = 1 - chunk[bit]
        result += chunk[:h]
    return result
def decode_helix_or_die_trying(g_mat, h_mat, data):
    h, w = len(g_mat), len(g_mat[0])
    result = []
    for chunk in chunks(data, w):
        dec = transpose(mult(h_mat, transpose([chunk])))[0]
        if not all(b == 0 for b in dec):
            chunk = [0] * h
        result += chunk[:h]
    return result
def decode_helix_brute(g_mat, h_mat, data):
    h, w = len(g_mat), len(g_mat[0])
    result = []
    for chunk in chunks(data, w):
        dec = transpose(mult(h_mat, transpose([chunk])))[0]
        if not all(b == 0 for b in dec):
            chunk = [0] * h
        result += chunk[-h:]
    return result
#        dec = transpose(mult(h, transpose(cod)))
#        assert all(d == 0 for d in dec[0])
#        for i in range(3):
#            dec[0][i] = 1 - dec[0][i]
#            assert not all(d == 0 for d in dec[0])
#            dec[0][i] = 1 - dec[0][i]
g = [
    [1 ,0 ,0 ,0 ,1 ,1 ,1],
    [0 ,1 ,0 ,0 ,0 ,1 ,1],
    [0 ,0 ,1 ,0 ,1 ,0 ,1],
    [0 ,0 ,0 ,1 ,1 ,1 ,0],
]
h = [
    [1, 0, 1, 1, 1, 0, 0],
    [1, 1, 0, 1, 0, 1, 0],