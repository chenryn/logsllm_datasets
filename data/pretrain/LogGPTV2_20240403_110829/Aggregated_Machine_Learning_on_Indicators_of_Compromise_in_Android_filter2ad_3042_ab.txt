### Security Research and Mobile Malware Detection

Security research in the mobile domain lags behind, as evidenced by several high-profile incidents. These events highlight the inadequacy of current mobile malware detection and prevention techniques. For instance, in 2017, Kaspersky Labs discovered a malicious app called SkyGoFree, which had been available on third-party app stores and side-loading websites since 2014. This app possesses advanced features, such as the ability to selectively record data from the camera and microphone based on GPS location. This allows the app to capture, for example, every conversation its owner has in the company office. Additionally, SkyGoFree can use assistive technologies like screen readers to extract information from well-protected encryption applications like WhatsApp. The app exfiltrates all recorded data, user contacts, and stored personal information when it connects to Wi-Fi networks, even if the device is in airplane mode. Furthermore, the app engages in SMS and click-fraud.

Conventional wisdom, supported by the SkyGoFree case, suggests that the best protection against such malicious apps is to install only from official app stores. However, this strategy does not provide complete protection. For example, the ExpensiveWall malware, which engaged in SMS fraud, pay-per-click fraud, and data exfiltration, infiltrated the Google Play Store disguised as various mobile wallpaper apps. The developers used packing techniques to obfuscate the malicious code, bypassing the Play Store's security measures. When discovered, researchers estimated that it had infected approximately 21 million devices.

In another significant case, the Facebook Messenger app, used on 1.2 billion devices in 2017, was found to be collecting not just user-provided information but also SMS and call data from users' devices. This data collection may have violated Facebook's user consent policies and a 2011 agreement with the Federal Trade Commission. The collected data was stored on Facebook servers and later scraped and parsed by Cambridge Analytica during the 2016 election cycle. This information could have been exploited by adversaries to construct professional and personal networks for social engineering and intelligence gathering.

Even non-malicious apps can inadvertently expose sensitive information. The Strava mobile fitness app, which openly collects and uses data, published a heat map of popular running routes. Researchers quickly identified U.S. forward military bases in the Middle East and other sensitive facilities, revealing mission-critical information and placing users at risk by exposing common patterns of movement and behavior.

The Department of Defense (DoD) and its personnel are also targeted by malicious apps. According to the DoD's Mobile App Gallery, there is an unsanctioned app, "TSP Funds," targeting Thrift Savings Plan (TSP) participants who want to manage their retirement savings from their mobile devices. This app, not developed by any organization associated with the DoD or TSP program, prompts users to provide a username and password, enabling unauthorized access to sensitive financial information of DoD personnel.

Even sanctioned apps present potential vulnerabilities. The DoD has released an app called the Defense Finance and Accounting Service (DFAS), which provides DoD employees with access to information about their salaries, taxes, and benefits. To an adversary, this is a treasure trove of Personally Identifiable Information (PII), including personal finances and Social Security numbers.

These incidents underscore the need for improved mobile security. Each app, whether intentionally or not, exposed sensitive information to malicious actors. The MAVeRiC effort aims to identify apps that improperly expose information and either prevent their installation or remove them if inappropriate behavior is detected.

### The Navy's Approach to Mobile Security

The Navy is developing policies to support the adoption of mobile devices and apps. In some areas, Android and iOS devices are prepared by administrative staff and issued to Navy personnel for email, telecommunications, and other business-related functions. There are also pilot programs exploring cost savings through Bring Your Own Device (BYOD) policies. Both government-issued and BYOD devices are managed using Mobile Device Management (MDM) tools, which allow the organization to remotely manage device security controls, limit app installation, track device activity, and erase data from a device.

### Containerization and Mobile Security

One approach to mobile security is containerization, as demonstrated by Good Technologyâ€™s Secure Enterprise Mobility Management (EMM) Suites. In principle, a containerization solution can partition a phone into two or more isolated environments, ensuring that data in one container is not accessible to apps in another. However, researchers have shown that malicious apps in one container can gain access to underlying kernel modules and, from there, access the processes and data in different containers.

The Defense Information Security Agency (DISA) is responsible for mobile device and app security policies for the U.S. Government. According to DISA, each app undergoes a rigorous vetting process, including static, dynamic, and network analysis. The results are mapped against requirements from the Mobile Application Security Requirements Guide (MAppSRG), National Information Assurance Partnership (NIAP), Protection Profile (PP), and the Open Web Application Security Project (OWASP).

DISA reports that over 200 approved apps are available for download in the DoD. As of December 2017, the Google Play Store had 3.5 million apps. A major goal of the MAVeRiC project is to accelerate the decision-making process while maintaining or improving the accuracy of detecting malicious code. This improvement is crucial if the DoD intends to fully leverage mobile devices and apps.

### MAVeRiC's Approach to Dynamic Analysis for Mobile (Android) Application Security

Dynamic analysis for malware detection in mobile devices is a popular research area, but it has yet to produce a reliable framework. Many researchers focus on a single Indicator of Compromise (IOC), which is a measurable event that may indicate a system compromise. A single IOC is insufficient to reliably detect malware. For example, a malicious app that continuously transmits recordings from the device camera and microphone will significantly impact power consumption, similar to playing a game with high-resolution graphics.

The MAVeRiC framework collects data related to three IOCs: power consumption, network behavior, and sequences of system calls. The complete feature set is analyzed using machine learning techniques to detect anomalies and classify them as benign or malicious. This holistic approach aims to provide greater accuracy than models relying on a single IOC.

### Feature Sets

#### Rationale for Collecting Power Consumption

Power consumption is an indicator of compromise. It varies depending on the state and activities of the apps on a device. By collecting power consumption data, researchers can establish baselines for expected power usage based on running apps. Discrepancies serve as IOCs that should be investigated for possible malice. Machine learning approaches have shown success in detecting malicious activity on covert channels. MAVeRiC leverages these methods to collect and analyze power consumption data.

#### Rationale for Collecting Network Activity

Network activity is a critical IOC for identifying malicious behavior. Mobile devices share vulnerabilities with conventional computers, especially regarding network communications. MAVeRiC collects data on the state of all network communications, including the amount of data sent, frequency of send/receive communications, and whether the app is running in the foreground or background. This data is essential for understanding normal app behavior and identifying malicious or unexpected activity.

#### Rationale for Collecting Sequences of System Calls

The sequence of system calls is an important IOC for detecting malware. System calls are how an application accesses operating system services. MAVeRiC captures execution trace information to analyze how an app uses the over 250 system calls provided by the Android OS. Anomalies in system call sequences serve as IOCs that may identify malware executed at random times and would otherwise be difficult to distinguish during normal operation.

### Data Analysis

MAVeRiC evaluates two distinct approaches for using machine learning to identify malicious behavior:

1. **Combined IOC Data**: All three sets of IOC data are combined into a single superset and assessed by multiple machine learning algorithms. Feature selection algorithms reduce the number of individual features, increasing the speed and efficiency of identifying malicious behavior. Both supervised and unsupervised algorithms are examined.
   
2. **Separate IOC Evaluation**: Each IOC is evaluated separately, and the results are subjected to further analysis. Previous research has looked at each IOC individually and evaluated multiple machine learning algorithms. MAVeRiC attempts to recreate this work and use the results to populate a new dataset for evaluation. One technique involves nesting machine learning algorithms, where the initial results of one algorithm are analyzed through another. Another option involves developing an algorithm where the collective results of the IOCs' machine learning algorithms are used as inputs.

### Execution Plan

MAVeRiC builds upon previously published work to collect data from multiple IOCs. The data is collected through separate applications and sent to an off-device MongoDB server for analysis. Here are the details of our data collection methods:

#### Power Consumption

Power consumption must be monitored while the app is running on a device. We use the on-device tool PowerTutor, which we have modified to run with more current versions of Google's Android API. PowerTutor collects data from a running application and power consumption records for each hardware component, including CPU, OLED/LCD, Wi-Fi, Cellular Network, GPS, and audio.

#### Network Activity

Capturing network activity is crucial for correlating behaviors and patterns within mobile apps. MAVeRiC analyzes deviations in network behavior to identify malicious activity. We use the Wireshark plugin, Android dump, to collect and aggregate both cellular and Wi-Fi network activity, then send the data to the server for analysis.

#### Sequence of System Calls

Sequences of system calls can help identify common app behaviors and distinguish between benign and potentially malicious activities. MAVeRiC uses the Android Debug Bridge (ADB) and the ADB Strace function to collect the system calls an app requests during use. To generate a sufficient volume of data, MAVeRiC employs the Monkey tool to generate pseudo-random user activity. The collected inputs and system call sequences are sent to the server for analysis.

### Application Set

Our application dataset is constructed from various sources. MAVeRiC has obtained known malicious applications from the Drebin and Androzoo repositories and a set of benign apps from the Google Play Store. We have also generated a control group of apps by adding specific malice to certain classes of open-source applications from the F-Droid repository. These apps are re-packaged into malicized versions of the original benign apps. MAVeRiC uses data collected from these apps to measure the effectiveness of each machine learning algorithm.

### Machine Learning Methodology

We are evaluating two approaches to determine how MAVeRiC will detect malicious apps:

1. **Combined IOC Data**: All data from the three IOCs is combined into a single superset. This process includes a training period consisting of feature selection and model selection. MAVeRiC constantly collects data from mobile devices, so power drain is a concern. We aim to identify the most relevant features for making predictions. The data is run through feature selection methods to determine the most relevant features, and then input into both supervised and unsupervised machine learning models.

2. **Separate IOC Evaluation**: Each IOC is evaluated separately, and the results are subjected to further analysis. This approach involves nesting machine learning algorithms or developing an algorithm where the collective results of the IOCs' machine learning algorithms are used as inputs.

By combining these approaches, MAVeRiC aims to provide a robust and accurate framework for detecting and mitigating mobile malware.