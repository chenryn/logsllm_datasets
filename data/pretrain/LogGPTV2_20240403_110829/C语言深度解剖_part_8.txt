为
enum_type_name类型的一个变量，也就是我们平时常说的枚举变量。实际上
enum_type_name类型是对一个变量取值范围的限定，而花括号内是它的取值范围，即
enum_type_name 类型的变量enum_variable_name 只能取值为花括号内的任何一个值，
如果赋给该类型变量的值不在列表中，则会报错或者警告。ENUM_CONST_1、
ENUM_CONST_2、...、ENUM_CONST_n，这些成员都是常量，也就是我们平时所说的枚举常
量（常量一般用大写）。enum 变量类型还可以给其中的常量符号赋值，如果不赋值则会从
被赋初值的那个常量开始依次加1，如果都没有赋值，它们的值从0 开始依次递增1。如分
别用一个常数表示不同颜色：
enum Color
{
GREEN = 1,
RED,
BLUE,
GREEN_RED = 10,
GREEN_BLUE
}ColorVal；
其中各常量名代表的数值分别为：
GREEN = 1
RED = 2
BLUE = 3
GREEN_RED = 10
GREEN_BLUE = 11
1.17.2 枚举不#define 宏的区别
下面再看看枚举与#define 宏的区别：
1） #define 宏常量是在预编译阶段进行简单替换。枚举常量则是在编译的时候确定
其值。
2） 一般在编译器里，可以调试枚举常量，但是不能调试宏常量。
3） 枚举可以一次定义大量相关的常量，而#define 宏一次只能定义一个。
留两个问题：
A） 枚举能做到事，#define 宏能不能都做到？如果能，那为什么还需要枚举？
B) sizeof（ColorVal）的值为多少？为什么？
1.18 伟大的缝纫师----typedef 关键字
1.18.1 关亍马甲的笑话
有这样一个笑话：一个猎人在河边抓捕一条蛇，蛇逃进了水里。过一会，一个乌龟爬到
岸边。猎人一把抓住这个乌龟，大声的说道：小样，别你为你穿了个马甲我就不认识你了！
typedef 关键字是个伟大的缝纫师，擅长做马甲，任何东西穿上这个马甲就立马变样。
- 41 -
它可以把狼变成一头羊，也能把羊变成一头狼。甚至还可以把长着翅膀的鸟人变成天使，同
样也能把美丽的天使变成鸟人。所以，你千万不要得罪它，一定要掌握它的脾气，不然哪天
我把你当鸟人，你可别怪我。^_^。
1.18.2 历史的误会----也许应该是 typerename
很多人认为typedef 是定义新的数据类型，这可能与这个关键字有关。本来嘛，type 是
数据类型的意思；def(ine)是定义的意思，合起来就是定义数据类型啦。不过很遗憾，这
种理解是不正确的。也许这个关键字该被替换为“typerename”或是别的词。
typedef 的真正意思是给一个已经存在的数据类型（注意：是类型不是变量）取一个
别名，而非定义一个新的数据类型。比如：华美绝伦的芍药，就有个别名---“将离”。中
国古代男女交往,往往以芍药相赠,表达惜别之情,送芍药就意味着即将分离。所以文人墨客
就给芍药取了个意味深长的别名-----“将离”。这个新的名字就表达了那种依依不舍的惜
别之情…这样新的名字与原来的名字相比，就更能表达出想要表达的意思。
在实际项目中，为了方便，可能很多数据类型（尤其是结构体之类的自定义数据类型）
需要我们重新取一个适用实际情况的别名。这时候typedef 就可以帮助我们。例如：
typedef struct student
{
//code
}Stu_st,*Stu_pst; //命名规则请参考本章前面部分
A） struct student stu1；和Stu_st stu1；没有区别。
B） struct student *stu2；和Stu_pst stu2；和Stu_st *stu2；没有区别。
这个地方很多初学者迷惑，B）的两个定义为什么相等呢？其实很好理解。我们把
“struct student { /*code*/}”看成一个整体，typedef 就是给“struct student
{/*code*/}‛取了个别名叫“Stu_st”；同时给“struct student { /*code*/} *‛取
了个别名叫“Stu_pst”。只不过这两个名字同时取而已，好比你给你家小狗取了个别名叫
“大黄”，同时你妹妹给小狗带了小帽子，然后给它取了个别名叫“小可爱”。^_^。
好，下面再把typedef 与const 放在一起看看：
C),const Stu_pst stu3;
D),Stu_pst const stu4;
大多数初学者认为C）里const 修饰的是stu3 指向的对象；D）里const 修饰的是stu4
这个指针。很遗憾，C）里const 修饰的并不是stu3 指向的对象。那const 这时候到底修
饰的是什么呢？我们在讲解const int i 的时候说过const 放在类型名“int”前后都行；
而const int*p 与int * const p 则完全不一样。也就是说，我们看const 修饰谁都时
候完全可以将数据类型名视而不见，当它不存在。反过来再看“const Stu_pst stu3”，
Stu_pst 是“struct student{ /*code*/} *‛的别名, “struct student {/*code*/}
*‛是一个整体。对于编译器来说，只认为Stu_pst 是一个类型名，所以在解析的时候很自
然的把“Stu_pst”这个数据类型名忽略掉。
现在知道const 到底修饰的是什么了吧？^_^。
1.18.3 typedef 不#define 的区别
噢，上帝！这真要命！别急，要命的还在后面呢。看如下例子：
- 42 -
E） #define INT32 int
unsigned INT32 i = 10；
F） typedef int int32；
unsigned int32 j = 10；
其中F)编译出错，为什么呢？E）不会出错，这很好理解，因为在预编译的时候INT32
被替换为int，而unsigned int i = 10；语句是正确的。但是，很可惜，用typedef 取
的别名不支持这种类型扩展。另外，想想typedef static int int32 行不行？为什么？
下面再看一个与#define 宏有关的例子：
G) #define PCHAR char*
PCHAR p3,p4;
H）typedef char* pchar;
pchar p1,p2;
两组代码编译都没有问题，但是，这里的p4 却不是指针，仅仅是一个char 类型的字
符。这种错误很容易被忽略，所以用#define 的时候要慎之又慎。关于#define 当然还有
很多话题需要讨论，请看预处理那一章。当然关于typedef 的讨论也还没有结束，在指针
与数组那一章，我们还要继续讨论。
1.18.4 #define a int[10]不 typedef int a[10]
留两个问题：
1) #define a int[10];
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
E) a b[10];
F) a b;
G) a* b[10];
H) a* b;
2) typedef int a[10];
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
E) a b[10];
F) a b;
G) a* b[10];
H) a* b;
3) #define a int*[10]
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
E) a b[10];
- 43 -
F) a b;
G) a* b[10];
H) a* b;
4) typedef int * a[10];
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
E) a b[10];
F) a b;
G) a* b[10];
H) a* b;
5) #define *a int[10]
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
E) a b[10];
F) a b;
G) a* b[10];
H) a* b;
6) typedef int (* a)[10];
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
E) a b[10];
F) a b;
G) a* b[10];
H) a* b;
7) #define *a * int[10]
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
E) a b[10];
F) a b;
G) a* b[10];
H) a* b;
8) typedef int * (* a)[10];
A) a[10] a[10];
B) a[10] a;
C) int a[10];
D) int a;
- 44 -
E) a b[10];
F) a b;
G) a* b[10];
H) a* b;
请判断这里面哪些定义正确，哪些定义不正确。另外，int[10]和a[10]到底该怎么用？
第二章 符号
符号有什么好说的呢？确实，符号可说的内容要少些，但总还是有些可以唠叨地方。有
一次上课，我问学生：‘/’这个符号在C 语言里都用在哪些地方？没有一个人能答完整。
这说明C 语言的基础掌握不牢靠，如果真正掌握了C 语言，你就能很轻易的回答上来。这
个问题就请读者试着回答一下吧。本章不会像关键字一样一个一个深入讨论，只是将容易出
错的地方讨论一下。
C 语言的基本符号就有20 多个，每个符号可能同时具有多重含义，而且这些符号之间
相互组合又使得C 语言中的符号变得更加复杂起来。你也许听说过“国际C 语言乱码大赛
（IOCCC）”，能获奖的人毫无疑问是世界顶级C程序员。这是他们利用C 语言的特点极限
挖掘的结果。下面这个例子就是网上广为流传的一个经典作品：
#i nclude 
main(t,_,a)char *a;{return!0<t?t<3?main(-79,-13,a+main(-87,1-_,
- 45 -
main(-86,0,a+1)+a)):1,t<_?main(t+1,_,a):3,main(-94,-27+t,a)&&t==2?_<13?
main(2,_+1,"%s %d %d\n"):9:16:t<0?t<-72?main(_,t,
"@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+
,/#\
;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \
q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}r
w' i;# \
){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \
iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \
;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n'
')# \