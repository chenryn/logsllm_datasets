server using TCP Failover.
We ﬁrst measured the connection time from a client ap-
plication to a redundant server and compared those numbers
to the standard TCP connection time. We made sure that
the MAC addresses of all nodes were present in the ARP
caches. If the MAC addresses are not cached, the client and
the router must run the ARP protocol, which adds about
300(cid:0)s to the connection setup time. The time for ARP af-
fects standard TCP and TCP Failover in the same way.
The median connection setup time for standard TCP is
294(cid:0)s with a maximum of 603(cid:0)s; the median connection
time for TCP Failover is 505(cid:0)s with a maximum of 1193(cid:0)s.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
)
s
m
(
e
m
i
t
d
n
e
s
103
102
101
100
10−1
10−2
TCP failover 
standard TCP 
102
103
104
105
106
)
s
m
(
e
m
i
t
i
e
v
e
c
e
r
103
102
101
100
10−1
TCP failover 
standard TCP 
102
103
104
105
106
message size (bytes)
message size (bytes)
Figure 3. Client-to-server data transfer.
Figure 4. Server-to-client data transfer.
Next we measured the send and receive times of mes-
sages of different length. Figure 3 shows the median time
it takes an application to send a message to an unreplicated
server using standard TCP, and to a replicated server using
TCP Failover. The message length varied from 64 bytes to
1 MByte.
It can be seen that the send time for messages up to
32 KBytes does not increase at the same rate as the send
times for larger messages. This is due to the 64 KByte TCP
send buffer. The send call returns when the application has
passed the last byte to the stack, not when the last byte has
been put on the wire. The effect of the send buffer decreases
with increasing message size.
We obtained similar results for server-to-client data
transfer. In this case, the client application sends a 4-byte
message to the server, and the server sends a reply message
back to the client. Figure 4 shows the time that elapsed be-
tween the client starting to send the 4-byte message, and the
client receiving the last byte of the servers’ reply. The size
of the reply messages varies from 64 bytes to 1MByte. The
non-linearity in the standard TCP measurement is caused
by collisions on the Ethernet. The probability of acknowl-
edgments colliding with data packets varies with message
size.
Figure 5 compares send and receive rates between stan-
dard TCP and TCP Failover. The rates were measured
by having a client send and receive data streams of 100
MBytes.
We choose the File Transfer Protocol (FTP) to test TCP
Failover with a real-world application. The File Transfer
Protocol (FTP) allows a client to upload and download ﬁles
from a remote size. The remote site runs an FTP server,
which listens on a well-known port (port 21). An FTP client
opens an ephemeral port (a port chosen by the operating
system) and connects to the server’s FTP port. This connec-
tion is used to exchange control data. After the server has
veriﬁed that the client is permitted to access the server’s ﬁle
system, the client opens a server socket with an ephemeral
port and informs the server of the chosen port number.
Every time the client initiates a data transfer (get or
put), it sends a request to the server. The server opens
a client socket on port 20 (FTP data) and connects to the
client. The server and the client exchange the ﬁle content
via the data connection. Once the transfer has completed,
both sides terminate the data connection.
We connected an FTP client to the replicated FTP server
via a wide-area network and transfered ﬁles of different
sizes. Figure 6 lists median send and receive rates as in-
dicated by the FTP client.
As these results illustrate, measurements over a wide-
area network are highly dependent on competing trafﬁc and
on packet loss rates and, thus, vary widely.
standard TCP TCP Failover
connection
connection
5835.80KB/s
7833.70KB/s
8707.88KB/s
3510.03KB/s
send rate
receive rate
Figure 5. Comparison of send and receive
rates for long data streams.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
ﬁle
size
[KB/s]
0.2
1.3
18.2
144.9
1738.1
get ﬁle
put ﬁle
standard
TCP
8.75
59.03
90.41
156.80
176.03
TCP
failover
8.75
59.03
70.74
138.35
171.72
standard
TCP
512.38
2033.76
3846.13
219.52
168.07
TCP
failover
536.05
2036.87
3890.42
200.31
176.63
Figure 6. FTP send and receive rates in
KBytes/s.
10. Related Work
TCP splicing [13] is a technique that is used to improve
performance and scalability of application-level gateways.
Clients establish TCP connections to a dispatcher applica-
tion. The dispatcher chooses an appropriate server to handle
a client connection. Then the dispatcher modiﬁes the TCP
stack of the dispatcher host to forward all TCP packets of
that connection directly to the selected server. No further
involvement of the dispatcher is necessary until the connec-
tion is terminated.
TCP splicing requires that all trafﬁc ﬂows through the
dispatcher. TCP handoff [3] removes the dispatcher by let-
ting the client connect directly to one of the servers.
If
the initial server decides that another server is better suited
to handle the connection, it transfers the TCP connection
state to an alternative server. TCP handoff requires a spe-
cial front-end layer-4 switch that routes the packets to the
appropriate server.
Snoeren and Balakrishnan [12] describe a TCP migra-
tion scheme that is transparent to the client application but
requires modiﬁcation to both the client and server TCP
layer. A change in the network infrastructure (e.g., Inter-
net routers, underlying protocols) is not required. The mi-
gration of the connection can be initiated by the client or
any of the servers. The replicated servers can be geograph-
ically distributed. At any point in time, only one server is
connected to the client. Multicasting or forwarding of the
client’s data is not possible.
Sultan, Srinivasan, Iyer and Iftode [15] propose M-TCP,
a TCP connection migration scheme that moves a server’s
TCP endpoint to a different location. In addition to migrat-
ing the TCP endpoint, M-TCP moves a limited amount of
application state and synchronizes the application and the
TCP layer. M-TCP requires the support of both the client
and server TCP layer. The migration is initiated by the
client. During the migration process, both servers are re-
quired to be operational, which renders this approach un-
suitable for fault tolerance.
Shenoy, Satapati and Bettati [11] propose a fault-tolerant
extension of the HydraNet infrastructure to replace a single
server with a group of replicated servers. Their approach
does not require any modiﬁcation of the client’s TCP layer.
Instead, all IP packets sent by the client to a certain IP ad-
dress and port number are multicast to a set of replicated
servers, which can be geographically distributed. For this
scheme to work, all trafﬁc must go through a special redi-
rector, which resides on an Internet router. To maintain
consistency between all server replicas, the system sup-
ports atomic multicasting. The forwarding service is not
restricted to TCP, but can accommodate any transport pro-
tocol that is based on IP.
Alvisi, Bressoud, El-Khashab, Marzullo and Zagorod-
nov [2] describe a system in which all client-server TCP
communication is intercepted and logged at a backup com-
puter. When the server fails,
the server application is
restarted and all stack activity is replayed. The backup node
performs an IP takeover and takes over the role of the server
node for the remaining lifetime of the connection. No mod-
iﬁcations are required to the client TCP stack, the client ap-
plication or the server application. To operate properly, the
backup node must be operational before the connection be-
tween the client and the server is established. Although the
failover happens transparently to the client, the failover time
can be signiﬁcant due to the replay of the entire history of
the connection.
Orgiyan and Fetzer [8] describe a system that replicates
a server application in a semi-active manner. TCP server
endpoints are replicated. Similar to the TCP Failover ap-
proach, their approach puts the network interface of the
secondary server into promiscuous mode. The system em-
ploys a leader/follower protocol to avoid inconsistent be-
havior caused by non-determinism. The snooping of net-
work trafﬁc reduces the overhead of the leader/follower pro-
tocol communication. Their approach requires the modi-
ﬁcation of the server application and the system libraries
of the server and the client hosts. It is not clear whether
the system is always able to maintain ongoing TCP connec-
tions in case of a node failure. If the secondary server drops
a TCP segment that the primary server has acknowledged
and then the primary server host fails, the segment cannot
be recovered, the connection must be abandoned and the
client must reestablish the connection.
Fetzer and Mishra [5] propose a system that allows the
transparent replication of servers that communicate to un-
replicated clients via TCP. This approach appears to be very
similar to TCP failover. The secondary server taps into con-
nections that are established between the primary server and
the client by using a promiscuous receive mode. The client
remains unmodiﬁed.
SwiFT [6, 7] provides fault tolerance for user applica-
tions, including modules for error detection and recovery,
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
checkpointing, event logging and replay, communication er-
ror recovery and IP packet rerouting. The latter is achieved
by providing a single IP image for a cluster of computers.
Addressing within the cluster is done by MAC addresses.
All trafﬁc from clients is sent to a dispatcher, which for-
wards the packets to one of the servers. The clients must
run the SwiFT client software to reestablish TCP connec-
tions in case the server fails.
Aghdaie and Tamir [1] describe a system to replicate
Web servers. The basic concept of their solution is similar
to the TCP failover approach. To avoid changes to the server
operating system, the authors implemented their scheme in
user space by using IP sockets. The server application is
passively replicated. The backup proxy logs client requests
and server replies. The drawback of this scheme is the poor
performance resulting from the context switches and proto-
col stack traversals that are needed for an implementation
entirely in user space.
11. Conclusion
We have described TCP Failover, a protocol that enables
the failover of a TCP server endpoint in a manner that is
transparent to the clients and to the server application. If
a fault occurs, TCP Failover migrates the TCP server end-
point from a primary server to a backup server. The failover
is achieved by modifying the server’s TCP/IP stack. No
modiﬁcations are required to the client’s TCP/IP stack, the
client application or the server application. The overhead is
reasonable, given that the approach is completely transpar-
ent to both the clients and the server application.
References
[1] N. Aghdaie and Y. Tamir, ”Client-transparent fault-
tolerant Web service,” Proceedings of the IEEE In-
ternational Conference on Performance, Computing,
and Communications , Phoenix, AZ (April 2001), pp.
209–216.
[2] L. Alvisi, T. C. Bressoud, A. El-Khashab, K. Marzullo
and D. Zagorodnov, “Wrapping server-side TCP to
mask connection failures,” Proceedings of INFOCOM
2001, Anchorage, AL (April 2001), pp. 329–337.
content-aware
[3] M. Aron, D. Sanders, P. Druschel and W. Zwaenepoel,
“Scalable
request distribution in
cluster-based network servers,” Proceedings of the
USENIX 2000 Annual Technical Conference, San
Diego, CA (June 2000), pp. 323–336.
[4] A. Bhide, E. N. Elnozahy and S. P. Morgan, “A
highly available network ﬁle server,” Proceedings of
the 1991 USENIX Winter Conference, Dallas, TX
(January 1991), pp. 199–205.
[5] C. Fetzer and S. Mishra, “Transparent TCP/IP based
replication,” Proceedings of the IEEE International
Symposium on Fault-tolerant Computing, Madison,
WI (June 1999).
[6] H. Y. Huang and C. Kintala, “Software implemented
fault tolerance,” Proceedings of the IEEE Fault Tol-
erant Computing Symposium, Toulouse, France (June
1993), pp. 2–10.
[7] Y. Huang, P. E. Chung, C. Kintala, C.-Y. Wang
and D.-R. Liang, “NT-SwiFT: Software implemented
fault tolerance on Windows NT,” Proceedings of the
USENIX Windows NT Symposium, Seattle, WA (Au-
gust 1998).
[8] M. Orgiyan and C. Fetzer, “Tapping TCP streams.”
Proceedings of the IEEE International Symposium
on Network Computing and Applications, Cambridge,
MA (October 2001), pp. 278–289.
[9] J. B. Postel, “Transmission Control Protocol,” RFC
793 (September 1981).
[10] J. B. Postel, “TCP maximum segment size and related
topics,” RFC 879 (November 1983).
[11] G. Shenoy, S. K. Satapati and R. Bettati, “HydraNet-
FT: Network support for dependable services,” Pro-
ceedings of the IEEE International Conference on
Distributed Computing Systems, Taipei, Taiwan (April
2000), pp. 699–706.
[12] A. C. Snoeren, D. G. Andersen and H. Balakrishnan,
“Fine-grained failover using connection migration,”
Proceedings of the USENIX Symposium on Internet
Technologies and Systems, San Francisco, CA (March
2001), pp. 221–232.
[13] O. Spatscheck, J. S. Hansen, J. H. Hartman and L. L.
Peterson, “Optimizing TCP forwarder performance,”
IEEE/ACM Transactions on Networking, vol. 8, no. 2
(April 2000), pp. 146–157.
[14] W. R. Stevens, Unix Network Programming, vol. 1,
2nd edition, Prentice-Hall, Upper Saddle River, NJ
(1998).
[15] F. Sultan, K. Srinivasan, D. Iyer and L. Iftode, “Migra-
tory TCP: Connection migration for service continu-
ity in the Internet,” Proceedings of the IEEE Interna-
tional Conference on Distributed Computing Systems,
Vienna, Austria (July 2002), pp. 469–470.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE