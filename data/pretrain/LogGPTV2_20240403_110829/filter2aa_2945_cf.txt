rule also applies to the  operators and the = operators. The
C# compiler does not write any of these operator partners for you. You must
write them all explicitly yourself, regardless of how obvious they might
seem. Here are the == and != operators for the Hour structure:
Click here to view code image
struct Hour
{
    public Hour(int initialValue) => this.value = initialValue;
    ...
    public static bool operator ==(Hour lhs, Hour rhs) => lhs.value
== rhs.value;
    public static bool operator !=(Hour lhs, Hour rhs) => lhs.value
!= rhs.value;
    ...
    private int value;
}
The return type from these operators does not actually have to be Boolean.
However, you should have a very good reason for using some other type, or
these operators could become very confusing.
Overriding the equality operators
If you define operator == and operator != in a class, you should also
override the Equals and GetHashCode methods inherited from
System.Object (or System.ValueType if you are creating a structure).
The Equals method should exhibit the same behavior as operator ==.
(You should define one in terms of the other.) The GetHashCode
method is used by other classes in the Microsoft .NET Framework.
(When you use an object as a key in a hash table, for example, the
GetHashCode method is called on the object to help calculate a hash
value. For more information, see the .NET Framework reference
documentation supplied with Visual Studio 2017.) All this method
needs to do is return a distinguishing integer value. Don’t return the
same integer from the GetHashCode method of all your objects,
however, because this will nullify the effectiveness of the hashing
Download from finelybook PI:EMAIL
744
algorithms.
Implementing operators
In the following exercise, you will develop a class that simulates complex
numbers.
A complex number has two elements: a real component and an imaginary
component. Typically, a complex number is represented in the form (x + iy),
where x is the real component, and iy is the imaginary component. The values
of x and y are regular integers, and i represents the square root of –1 (which is
the reason why iy is imaginary). Despite their rather obscure and theoretical
feel, complex numbers have a large number of uses in the fields of
electronics, applied mathematics, and physics, and in many aspects of
engineering. If you want more information about how and why complex
numbers are useful, Wikipedia provides a useful and informative article.
Note The Microsoft .NET Framework version 4.0 and later includes a
type called Complex in the System.Numerics namespace that
implements complex numbers, so there is no real need to define your
own version of this type anymore. However, it is still instructive to see
how to implement some of the common operators for this type.
You will implement complex numbers as a pair of integers that represent
the coefficients x and y for the real and imaginary elements. You will also
implement the operators necessary for performing simple arithmetic using
complex numbers. The following table summarizes how to perform the four
primary arithmetic operations on a pair of complex numbers, (a + bi) and (c +
di).
Operation
Calculation
Download from finelybook PI:EMAIL
745
(a + bi) + (c +
di)
((a + c) + (b + d)i)
(a + bi) – (c +
di)
((a – c) + (b – d)i)
(a + bi) * (c +
di)
(( a * c – b * d) + (b * c + a * d)i)
(a + bi) / (c +
di)
((( a * c + b * d) / ( c * c + d * d)) + (( b * c – a * d) / ( c * c
+ d * d))i)
Create the Complex class and implement the arithmetic operators
1. Start Visual Studio 2017 if it is not already running.
2. Open the ComplexNumbers solution, which is located in the \Microsoft
Press\VCSBS\Chapter 22\ComplexNumbers folder in your Documents
folder. This is a console application that you will use to build and test
your code. The Program.cs file contains the familiar doWork method.
3. In Solution Explorer, click the ComplexNumbers project. On the Project
menu, click Add Class. In the Add New Item - ComplexNumbers dialog
box, in the Name box, type Complex.cs, and then click Add.
Visual Studio creates the Complex class and opens the Complex.cs file
in the Code and Text Editor window.
4. Add the automatic integer properties Real and Imaginary to the Complex
class, as shown by the code in bold that follows.
class Complex
{
    public int Real { get; set; }
    public int Imaginary { get; set; }
}
These properties will hold the real and imaginary components of a
complex number.
5. Add the constructor shown below in bold to the Complex class.
Click here to view code image
class Complex
{
Download from finelybook PI:EMAIL
746
   ...
   public Complex (int real, int imaginary)
   {
       this.Real = real;
       this.Imaginary = imaginary;
   }
}
This constructor takes two int parameters and uses them to populate the
Real and Imaginary properties.
6. Override the ToString method as shown next in bold.
Click here to view code image
class Complex
{
    ...
    public override string ToString() => $"({this.Real} +
{this.Imaginary}i) ";
}
This method returns a string representing the complex number in the
form (x + yi).
7. Add the overloaded + operator to the Complex class as shown in bold in
the code that follows:
Click here to view code image
class Complex
{
    ...
    public static Complex operator +(Complex lhs, Complex rhs)
=>
        new Complex(lhs.Real + rhs.Real, lhs.Imaginary +
rhs.Imaginary);
}
This is the binary addition operator. It takes two Complex objects and
adds them together by performing the calculation shown in the table at
the start of the exercise. The operator returns a new Complex object
containing the results of this calculation.
8. Add the overloaded – operator to the Complex class.
Click here to view code image
class Complex
Download from finelybook PI:EMAIL
747
{
    ...
    public static Complex operator -(Complex lhs, Complex rhs)
=>
        new Complex(lhs.Real - rhs.Real, lhs.Imaginary -
rhs.Imaginary);
}
This operator follows the same form as the overloaded + operator.
9. Implement the * operator and / operator by adding the code shown in
bold to the Complex class.
Click here to view code image
class Complex
{
    ...
    public static Complex operator *(Complex lhs, Complex rhs)
=>
        new Complex(lhs.Real * rhs.Real - lhs.Imaginary *
rhs.Imaginary,
            lhs.Imaginary * rhs.Real + lhs.Real *
rhs.Imaginary);
    public static Complex operator /(Complex lhs, Complex rhs)
    {
        int realElement = (lhs.Real * rhs.Real + lhs.Imaginary *
rhs.Imaginary) /
            (rhs.Real * rhs.Real + rhs.Imaginary *
rhs.Imaginary);
        int imaginaryElement = (lhs.Imaginary * rhs.Real -
lhs.Real * rhs.Imaginary) /
            (rhs.Real * rhs.Real + rhs.Imaginary *
rhs.Imaginary);
        return new Complex(realElement, imaginaryElement);
    }
}
These operators follow the same form as the previous two operators,
although the calculations are a little more complicated. (The calculation
for the / operator has been broken down into two steps to avoid lengthy
lines of code.)
10. Display the Program.cs file in the Code and Text Editor window. Add
the following statements shown in bold to the doWork method of the
Download from finelybook PI:EMAIL
748
Program class and delete the // TODO: comment:
Click here to view code image
static void doWork()
{
    Complex first = new Complex(10, 4);
    Complex second = new Complex(5, 2);
    Console.WriteLine($"first is ");
    Console.WriteLine($"second is ");
    Complex temp = first + second;
    Console.WriteLine($"Add: result is ");
    temp = first - second;
    Console.WriteLine($"Subtract: result is ");
    temp = first * second;
    Console.WriteLine($"Multiply: result is ");
    temp = first / second;
    Console.WriteLine($"Divide: result is ");
}
This code creates two Complex objects that represent the complex
values (10 + 4i) and (5 + 2i). The code displays them and then tests each
of the operators you have just defined, displaying the results in each
case.
11. On the Debug menu, click Start Without Debugging.
Verify that the application displays the results shown in the following
image:
12. Close the application, and return to the Visual Studio 2017 programming
environment.
You have now created a type that models complex numbers and supports
Download from finelybook PI:EMAIL
749
basic arithmetic operations. In the next exercise, you will extend the Complex
class and provide the equality operators, == and !=.
Implement the equality operators
1. In Visual Studio 2017, display the Complex.cs file in the Code and Text
Editor window.
2. Add the == and != operators to the Complex class as shown in bold in
the following example.
Click here to view code image
class Complex
{
    ...
    public static bool operator ==(Complex lhs, Complex rhs) =>
lhs.Equals(rhs);
    public static bool operator !=(Complex lhs, Complex rhs) =>
!(lhs.Equals(rhs));
}
Notice that both of these operators make use of the Equals method. The
Equals method compares an instance of a class against another instance
specified as an argument. It returns true if they have equivalent values
and false otherwise. You need to provide your own implementation of
this method for the equality operators to work correctly.
3. Override the Equals method in the Complex class, by adding the
following shown here in bold:
Click here to view code image
class Complex
{
    ...
    public override bool Equals(Object obj)
    {
        if (obj is Complex)
        {
            Complex compare = (Complex)obj;
            return (this.Real == compare.Real) &&
                (this.Imaginary == compare.Imaginary);
        }
        else
        {
Download from finelybook PI:EMAIL
750
            return false;
        }
    }
}
The Equals method takes an Object as a parameter. This code verifies
that the type of the parameter is actually a Complex object. If it is, this
code compares the values in the Real and Imaginary properties in the
current instance and the parameter passed in. If they are the same, the
method returns true; otherwise, it returns false. If the parameter passed
in is not a Complex object, the method returns false.
Important It is tempting to write the Equals method like this:
Click here to view code image
public override bool Equals(Object obj)
{
    Complex compare = obj as Complex;
    if (compare != null)
    {
        return (this.Real == compare.Real) &&
               (this.Imaginary == compare.Imaginary);
    }
    else
    {
        return false;
    }
}
However, the expression compare != null invokes the !=
operator of the Complex class, which calls the Equals method
again, resulting in a recursive loop.
4. On the Build menu, click Rebuild Solution.
The Error List window displays the following warning messages:
Click here to view code image
'ComplexNumbers.Complex' overrides Object.Equals(object o) but
does not override Object.GetHashCode()
Download from finelybook PI:EMAIL
751
'ComplexNumbers.Complex' defines operator == or operator != but
does not override Object.GetHashCode()
If you define the != and == operators, you should also override the
GetHashCode methods inherited from System.Object.
Note If the Error List window is not visible, click Error List on the
View menu.
5. Override the GetHashCode method to the Complex class by adding the
following shown here in bold. This implementation simply calls the
method inherited from the Object class, but you can provide your own
mechanism to generate a hash code for an object if you prefer.
Click here to view code image
Class Complex
{
    ...
    public override int GetHashCode()
    {
        return base.GetHashCode();
    }
}
6. On the Build menu, click Rebuild Solution.
Verify that the solution now builds without reporting any warnings.
7. Display the Program.cs file in the Code and Text Editor window. Add
the following code shown in bold to the end of the doWork method:
Click here to view code image
static void doWork()
{
    ...
    if (temp == first)
    {
        Console.WriteLine("Comparison: temp == first");
    }
    else
Download from finelybook PI:EMAIL
752
    {
        Console.WriteLine("Comparison: temp != first");
    }
    if (temp == temp)
    {
        Console.WriteLine("Comparison: temp == temp");
    }
    else
    {
        Console.WriteLine("Comparison: temp != temp");
    }
}
Note The expression temp == temp generates the warning message
“Comparison made to same variable; did you mean to compare to
something else?” In this case, you can ignore the warning because
this comparison is intentional; it is to verify that the == operator is
working as expected.
8. On the Debug menu, click Start Without Debugging. Verify that the
final two messages displayed are these:
Comparison: temp != first
Comparison: temp == temp
9. Close the application, and return to Visual Studio 2017.
Understanding conversion operators
Sometimes, you need to convert an expression of one type to another. For
example, the following method is declared with a single double parameter:
Click here to view code image
class Example
{
    public static void MyDoubleMethod(double parameter)
    {
        ...
Download from finelybook PI:EMAIL
753
    }
}
You might reasonably expect that only values of type double could be
used as arguments when your code calls MyDoubleMethod, but this is not so.
The C# compiler also allows MyDoubleMethod to be called with an argument
of some other type, but only if the value of the argument can be converted to
a double. For example, if you provide an int argument, the compiler generates
code that converts the value of the argument to a double when the method is
called.
Providing built-in conversions
The built-in types have some built-in conversions. For example, as mentioned
previously, an int can be implicitly converted to a double. An implicit
conversion requires no special syntax and never throws an exception.
Click here to view code image
Example.MyDoubleMethod(42); // implicit int-to-double conversion
An implicit conversion is sometimes called a widening conversion
because the result is wider than the original value—it contains at least as
much information as the original value, and nothing is lost. In the case of int
and double, the range of double is greater than that of int, and all int values
have an equivalent double value. However, the converse is not true, and a
double value cannot be implicitly converted to an int:
Click here to view code image
class Example
{
    public static void MyIntMethod(int parameter)
    {
        ...
    }
}
...
Example.MyIntMethod(42.0); // compile-time error
When you convert a double to an int, you run the risk of losing
information, so the conversion will not be performed automatically.
(Consider what would happen if the argument to MyIntMethod were 42.5.
How should this be converted?) A double can be converted to an int, but the
Download from finelybook PI:EMAIL
754
conversion requires an explicit notation (a cast):
Click here to view code image
Example.MyIntMethod((int)42.0);
An explicit conversion is sometimes called a narrowing conversion
because the result is narrower than the original value (that is, it can contain
less information) and can throw an OverflowException exception if the
resulting value is out of the range of the target type. In C#, you can create
conversion operators for your own user-defined types to control whether it is
sensible to convert values to other types, and you can also specify whether
these conversions are implicit or explicit.
Implementing user-defined conversion operators
The syntax for declaring a user-defined conversion operator has some
similarities to that for declaring an overloaded operator, but it also has some
important differences. Here’s a conversion operator that allows an Hour
object to be implicitly converted to an int:
Click here to view code image
struct Hour
{
    ...
    public static implicit operator int (Hour from)
    {
        return from.value;
    }
    private int value;
}
A conversion operator must be public, and it must also be static. The type
from which you are converting is declared as the parameter (in this case,
Hour), and the type to which you are converting is declared as the type name
after the keyword operator (in this case, int). There is no return type specified
before the keyword operator.
When declaring your own conversion operators, you must specify whether
they are implicit conversion operators or explicit conversion operators. You
do this by using the implicit and explicit keywords. The Hour to int
conversion operator shown in the preceding example is implicit, meaning that
Download from finelybook PI:EMAIL
755
the C# compiler can use it without requiring a cast.
Click here to view code image