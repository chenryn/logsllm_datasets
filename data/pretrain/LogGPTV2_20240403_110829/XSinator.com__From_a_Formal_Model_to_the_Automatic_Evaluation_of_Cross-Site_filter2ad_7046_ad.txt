Desktop vs. Mobile. We evaluated desktop as well as mobile
browsers (cf. Table 2). Most android browsers behave almost iden-
tical regarding XS-Leaks on both platforms when comparing the
same browser engine versions. Given that most Android browsers
are built on outdated Chromium-based browser engines, XS-Leaks
are of prime importance. Our results show that an older browser
engine is usually an indicator for older browser bugs. For example,
the Performance API Error XS-Leak does not appear in Chrome
engines since version 84. Additionally, some new functionalities
like the Payment API or COOP are only available and exploitable
in the newest browser engines.
Our evaluation results in Table 4 show that browsers installed in
iOS behave similarly due to the same underlying browser engine.
Note that the browser versions do not necessarily match cross
operating systems. For example, GC 86 was the latest version on iOS
while GC 89 was the latest version on Desktop and Android. Some
iOS browsers do not support downloads and are thus not vulnerable
to download detection XS-Leaks. The mobile and desktop versions
of SA behave identically are thus vulnerable to the same XS-Leaks.
6.2 Patch History
Table 3 shows the results of popular desktop browsers over time.
This timeline provides interesting insights into patch behavior and
how vulnerabilities propagate between different versions. SA only
patched the fetch redirect XS-Leak, while support for new features
led to more XS-Leaks. FF fixed the media Error XS-Leak in version
80, and cache partitioning in version 85 mitigated the HTTP cache
XS-Leak. Cache portioning was also introduced in Chromium-based
browser in version 88. The Chromium developers are actively trying
to combat XS-Leaks. For example, they addressed the CSP violation
XS-Leak, and two XS-Leaks based on the Performance API. How-
ever, we believe that patching the Performance API Error XS-Leak
in version 84 introduced the Duration Redirect, as it appeared in
the same version. This assumption was later confirmed when the
bug was closed in version 88 [56].
7 XS-LEAK DEFENSES
In our formal model, an XS-Leak is a function with three inputs:
(1) a state-dependent resource ùë†ùëëùëü, (2) an inclusion method ùëñ, and
(3) a leak technique ùë°. In this section, we discuss how to mitigate
the XS-Leak threat based on this definition.
The existence of state-dependent resources cannot be prevented
since most web applications (except simple static sites) use them
by nature. Mitigations based on a single reported state-dependent
resource, for example, the status code fix of HotCRP reported in
[51], may not fix the problem since typically many state-dependent
resources exist in a single web application.
Several new extensions to the HTTP ecosystem have been pro-
posed and implemented recently. For example, Same-Site Cookies
set to the mode lax will prevent protected cookies from being sent,
if the target web application is embedded in an iframe in a cross-
site context. If a pop-up window is used as inclusion method, the
Same-Site mode lax is not enough to protect cookies. Such miti-
gation approaches have the benefit of being standardized and will
most probably work in all modern browsers. However, they may
be limited to a subset of the inclusion methods.
The basic paradigm behind these mitigations is that only a single
state ùë†0 of the web application can be reached when using a specific
inclusion method ùëñ. We describe these mitigations in Section 7.1.
Our evaluation of XS-Leaks in Section 6 showed that for some
XS-Leaks, only some browsers are vulnerable, and others are not (cf.
Table 2). This observation gives rise to a new class of countermea-
sures ‚Äì to investigate the differences in browser implementations
Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1780and to identify the root cause for non-vulnerability. Browser im-
plementations which are not vulnerable to the described XS-Leaks
attacks have somehow managed to block the leak technique ùë° used
in the attack; regardless of the inclusion method used. We describe
these mitigations in Section 7.2.
7.1 Inclusion Method Mitigations
Inclusion methods enable an attacker to trigger cross-origin re-
quests on a specified state-dependent resource. To mitigate XS-
Leaks on the inclusion method level, there are two possibilities.
First, cross-origin requests can be allowed but they do not result in
a detectable difference. Second, cross-origin requests can be denied
under specific circumstances.
HTML elements. In the case of XS-Leaks requesting resources,
a web application can apply different mitigations. It can use the
CORP header to control if pages can embed a resource [66]. CORP
can either be set to same-origin or same-site and blocks any
cross-origin respectively cross-site requests to that resource.
On the client site, Chromium-based browsers use the CORB
algorithm to decide whether cross-origin resource requests should
be allowed or denied. CORB was primarily implemented to protect
against side-channel attacks such as Spectre [35], but it mitigates
XS-Leak inclusion methods in addition. For example, it protects
HTML, XML, and JSON files by blocking requests such as .
Frames. The main defense to prevent iframe elements from load-
ing HTML resources is the usage of X-Frame-Options. This HTTP
response header indicates whether a browser is allowed to embed
a document. For example, X-Frame-Options: DENY mitigates any
XS-Leak which relies on iframe, objects, or embed elements. Alter-
natively, the CSP directive frame-ancestors can achieve a similar
result [61]. If the embedding is denied, the inclusion method cannot
detect a difference in the responses.
Pop-ups. Inclusion methods that use pop-ups are more difficult
to handle because a specific HTML element do not trigger them
and HTTP response headers such as X-Frame-Options do not apply.
For restricting the access to window.opener, the COOP HTTP re-
sponse header defines three different values: unsafe-none (default),
same-origin-allow-popups, and same-origin. These values can
be used to isolate browsing tabs and pop-ups and thus, mitigates
leak techniques based on pop-ups.
JavaScript Requests. Cross-origin JavaScript requests are of-
ten used in XS-Leak attacks, because an attacker has fine-grained
control over the issued request. However, since these request are
not CORS enabled they fall under the same restrictions as requests
send by HTML elements, like scripts or images. Thus the impact of
this leak technique can also be mitigated by CORP and CORB.
Generic Request Policies. In the following discussion, we shed light
on browser features that help on a generic level to mitigate XS-
Leaks on multiple inclusion methods.
Fetch Metadata. These request headers allow server owners to
understand better how the user‚Äôs browser caused a specific request.
In Chrome, Sec-Fetch-* headers are automatically added to each
request and provide metadata about the request‚Äôs provenance [65].
For example, Sec-Fetch-Dest: image was triggered from an im-
age element. Web applications can then choose to block requests
based on that information.
Same-Site Cookies. The Same-Site cookie flag allows websites
to declare whether a cookie should be restricted to same-site or first-
party context. All major browsers support Same-Site cookies. In GC,
cookies without the attribute are now Lax by default. For XS-Leaks,
Same-Site cookies drastically limit the leak attack possibilities. On
the other hand, leak techniques that rely on window.open still
work with SameSite=Lax. Websites that use other authentication
methods, such as client-side certificates and HTTP authentication,
remain vulnerable.
Cross-Origin Identifier Unlinkability (COIU). COIU, also
known as First-Party Isolation (FPI), is an optional security feature
that users can enable in FF‚Äôs expert settings (about:config) and
was initially introduced in Tor Browser. In an abstract view, it is an
extended same-site context. It binds multiple resources (e.g., Cook-
ies, Cache, Client-side storages) to the first-party instead of sharing
them among all visited websites. If enabled, COIU drastically de-
creases the applicability of XS-Leaks, since only methods using
pop-ups are still possible to fit the policy‚Äôs first-party requirement.
Tracking Protections. Apple implemented a privacy mecha-
nism called Intelligent Tracking Prevention (ITP) in SA that aims
to combat cross-site tracking by limiting the capabilities of cookies
and other web APIs [4]. In newer versions of SA, ITP blocks all
third-party cookies by default without any exceptions [74]. This
blocking prevents all leaks that are not based on pop-ups. FF took
a similar approach with Enhanced Tracking Prevention (ETP), but
they only block specific third-party cookies belonging to track-
ing providers. In the context of XS-Leaks, ETP only mitigates leak
techniques that target these tracking domains.
Browser Extensions. Security aware users can use browser
extensions to prevent certain inclusion methods. Since numerous
extensions allow controlling a browser‚Äôs HTTP requests, we discuss
this prevention by the example of uBlock Origin (UBO), one of the
most prominent wide spectrum blockers.
UBO provides three [26] blocking modes, which we evaluated
using XSinator in GC. UBO uses the easy mode in its default in-
stallation and only blocks advertisements based on URL patterns.
When running UBO on XSinator, it does not block a single request
and henceforth does not prevent any XS-Leak. In the medium mode,
UBO blocks third-party frames and third-party scripts globally.
This block prevents all XS-Leaks relying on inclusion methods that
use HTML elements. In UBO‚Äôs hard mode, it blocks all third-party
resources. Every HTTP resource that does not belong to the first-
party must be manually enabled. This blocking prevents XS-Leaks
that rely on inclusion methods using JavaScript requests or other
HTML tags (e.g., link), leaving only pop-up based XS-Leaks as still
working. To prevent them, users can configure UBO to globally
disable pop-ups.
7.2 Leak Technique Mitigations
XS-Leaks use various leak techniques for exploitation. We identified
various XS-Leaks that only work in some browsers, while others
are immune. In the following, we discuss mitigations that are based
on the leak technique level.
Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1781Event Handler. The most prominent leak technique for XS-Leak
is probably the event handler because event messages contained
in the trigger are a rich source of information (cf. Sudhodanan
et al. [51]). The most effective mitigation on this leak technique
would be to deny them all, but this would break the majority of web
applications on the Internet. We therefore propose to reduce the
number of the necessary information that can be gathered within
events. For example, the CSP violation event should not contain the
redirection target URL in the blockedURI field. This behavior is
implemented in FF and in newer versions of GC ‚Äì only SA remains
vulnerable.
Error Messages. To mitigate XS-Leaks based on the leak tech-
nique error messages, there are two major requirements. First, error
messages must not contain detailed information, similarly to event
handler messages. For example, the MediaError and CORS error
XS-Leak abuses details provided in the error message, such as the
HTTP response status code. Second, browsers must minimize error
message occurrences. XS-Leaks such as SRI Error, ContentDocu-
ment XFO, or Fetch Redirect detect whether an error message is
thrown or not. For example, GC could mimic the behavior of FF
and SA, that is, they do not throw an error at all in these particular
cases.
Global Limits. Fixing leak techniques that abuse global limits
are relatively complex because they rely on physical restrictions.
For example, the maximum number of available TCP connections
cannot be changed. The general recommendation thereby is to re-
strict global limits on a small per-site basis. The WebSocket API
XS-Leak leverages the shared limit of concurrent WebSocket con-
nections; FF has a global limit of 200 connections. Upon exhausting
this limit, new connections result in JavaScript exceptions. A partial
mitigation is to change this limit from a global to a per-site limit,
possibly with a small randomized value. The global limit for the
Payment API is one, that is, the attacker can silently attempt to
activate the WebPayment UI at any time, which only succeeds if the
UI is not being used concurrently by any other tab. We recommend
to only access to the Payment API when a trustworthy event [43]
was used. By this means, the global limit is set to zero unless the
user provides consent like a left mouse click on a dialog window,
which sets the global limit to one.
Global State. Any properties of a browser‚Äôs global state should
not be accessible. For example, FF is the only browser that updates
the global state history when a redirect occurs, which results in
reading history.length. Browsers should create a new history
property when a redirection occurs instead of storing it globally.
Other examples are shared resources, such as caches. Cache leaks
abuse the shared cache used for all open websites in a browser.
To completely mitigate cache leak techniques, the HTTP cache
must be partitioned on a per-site base, as implemented by SA, GC
and FF [34]. Note that in SA iframes are not effected by cache
partitioning.
Performance API. We proved the Performance API to be an
excellent leak technique. In many XS-Leaks, we could detect the
difference whether a cross-origin request‚Äôs response has or has not
a performance entry. As a unification, we recommend ensuring that
all request must create such an entry and only the correct subset of
timing information is recorded for cross-origin requests.
8 RELATED WORK
Our work relates to research of four different categories that we
elaborate in the following. An overview of known XS-Leaks is
depicted in Table 1 in Section 4.
XS-Leak Attacks. Recently, Sudhodanan et al. [51] systemati-
cally summarized prior work on XS-Leaks and presented how they
can be used to infer state information from a cross-origin web ap-
plication. The authors implemented a crawler-based attack vector
generation tool for websites called BASTA-COSI. We considered
their XS-Leaks in our work. While the authors showcased success-
ful attacks on various websites, we contribute a comprehensive test
suite for browsers and an extensive evaluation thereof. They did
not consider a formal model of XS-Leaks.
Lee et al. [36] created XS-Leaks which use crafted AppCache
manifest to leak redirections in state-dependent resources. Simi-
larly, Eriksson and Sabelfeld [12] explore XS-Leak to detect redi-
rects with the new navigate-to CSP directive. In 2015 Lekies et al.
[37] showed how the cross-origin inclusion of dynamically gener-
ated JavaScript poses the risk of leaking sensitive information like
usernames and passwords. They focused on websites and did not
evaluate the behavior of different browsers. In 2018 Acar et al. [2]
presented how attacker sites can attack IoT devices on the victim‚Äôs
LAN via a Media Error XS-Leak. Gulyas et al. [20] showed how
XS-Leaks on login pages can be used for browser fingerprint web
browsers. In 2019 Staicu and Pradel [50] showed how accounts
on file sharing platforms can be uniquely identified by granting
sole access rights to an image to a sole user and including it in the
attacker website.
In Bortz and Boneh [6] analyzed cross-site timing attacks, in
which the time a site takes to respond to a cross-site request could
be used as leak technique. In 2009 Chris Evans [9] was the first
described the concept of cross-site search attacks based on timing
attacks. Gelernter and Herzberg [16] improved their work with
attacks based on statistical tests, algorithms, and some application-
specific behaviors in 2015. Van Goethem et al. [57, 58] reiterated the
feasibility of fast and precise timing side-channel attacks utilizing
HTML5 features to leak size, type, and transmission speed of cross-
origin web resources.
Browser Security. In 2017 two white papers by Heiderich et al.
[22] and Vervier et al. [60] summarized the recent threats to browser
users. In 2019 Mirheidari et al. [41] showed how Web Cache Decep-
tion (WCD) can lead to caches exposing sensitive data. In 2020 Janc
and West [31] discuss their plans to remove unsafe features and be-
haviors from the web platform. Calzavara et al. [8] highlighted how
inconsistent framing policies of websites in the wild can impede
browser security. Narayan et al. [42] proposed changes to the Fire-
fox source code to mitigate binary exploitation through web-served
passive media, an orthogonal threat besides XS-Leak. Karami et al.
[33] researched how browser extensions can be fingerprinted by
enumeration of its Web Accessible Resources (WARs) and behavior.
Roth et al. [45] revealed the challenges posed to website maintain-
ers by the complex and ever-developing Content Security Policy
(CSP).
Online Evaluation Test Suites Schwenk et al. [46] provided
a test suite for stress-testing the SOP. The tabular presentation
of historical data collected across different browsers allows to
Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1782quickly identify outliers. We used their concept as a basis for
XSinator. As a collection of test suites for testing browsers based
on W3C/WHATWG specifications, Web Platform Tests [49] can be
used.
Formal Models. In 2005 Gross et al. [17] formally model a web
browser for the purpose of analyzing browser-based protocols. In
2014 Fett et al. [14] formalized an expressive model of the Web
Infrastructure based a model for public key cryptography by Dolev
and Yao [11]. In 2017 Schwenk et al. [46] published a formal model
for the SOP and systematically analyzed and highlighted problem-
atic differences between implementations across browser families.
Our proposed model takes the SOP into consideration as an impor-
tant factor in the context of XS-Leaks, as it is more concise and
applicable than the general formalization of a whole web browser.
9 CONCLUDING REMARKS
In this paper, we proposed a formal model for XS-Leaks. This model
fits all previously published results. By identifying the three ingre-
dients of an XS-Leak, which are the detectable difference ùê∑, inclusion
method ùëñ and leak technique ùë°, we were able gain novel in-depth
insights and to systematically produce new attacks. (1) To detect
a difference ùê∑, different inclusion methods ùëñ and leak techniques
ùë° can be used. This yields a systematic way for detecting 14 new
XS-Leaks. (2) Our evaluation of existing browser/OS combinations
with XSinator showed that non-vulnerable browser implementa-
tions for each class of XS-Leak exist (except in 5 cases). (3) This
finding allowed us to investigate a new class of XS-Leak mitiga-
tions that target the used leak techniques. Our results show that a
small, dedicated formal model may help to develop a more thorough
understanding of web attacks.
Future Work. While the set ùêº of inclusion methods is relatively
static, new web technologies may introduce novel detectable dif-
ferences, and novel leak techniques. Our contributed formal model
provides a clear methodology to check such novel technologies
for possible XS-Leaks. A similar observation holds for the miti-
gations. The inclusion method-based countermeasures should be
re-evaluated once new inclusion methods are defined, and browser
implementations need to be constantly re-evaluated once their
functionality is enhanced. Moreover, we think that the community
could benefit from an evaluation whether fixes against XS-Leaks
can be done without interfering with Web functionality. However,
crawling sites would probably yield only incomplete data, since
many sites hide their functionalities behind logins or on sub-sites.
Therefore, it would be a difficult but commendable future work to
look on web applications, identify their states, and solve session
management problems.
ACKNOWLEDGEMENTS
Funded by the Deutsche Forschungsgemeinschaft (DFG, German
Research Foundation) under Germany‚Äôs Excellence Strategy - EXC
2092 CASA - 390781972. Lukas Knittel was supported by the Ger-
man Federal Ministry of Economics and Technology (BMWi) project
‚ÄúIndustrie 4.0 Recht-Testbed‚Äù (13I40V002C). Dominik Noss was sup-
ported by the research project ‚ÄúMITSicherheit.NRW‚Äù funded by
the European Regional Development Fund North Rhine-Westphalia
(EFRE.NRW).
rfc/rfc6454.txt
REFERENCES
[1] Gunes Acar and Frank Li of UC Berkeley Danny Y. Huang, Princeton University.
2018. MediaError message property leaks cross-origin response status. https:
//bugs.chromium.org/p/chromium/issues/detail?id=828265. (April 2018).
[2] Gunes Acar, Danny Yuxing Huang, Frank Li, Arvind Narayanan, and Nick
Feamster. 2018. Web-Based Attacks to Discover and Control Local IoT De-
vices. In Proceedings of the 2018 Workshop on IoT Security and Privacy (IoT
S&P ‚Äô18). Association for Computing Machinery, New York, NY, USA, 29‚Äì35.
https://doi.org/10.1145/3229565.3229568
[3] Devdatta Akhawe, Frederik Braun, Francois Marier, and Joel Wein-
W3C Recommendation. W3C.
Subresource Integrity.
berger. 2016.
https://www.w3.org/TR/2016/REC-SRI-20160623/.
[4] Apple. 2019. Safari Privacy Overview. https://www.apple.com/safari/docs/
Safari_White_Paper_Nov_2019.pdf. (November 2019).
[5] A. Barth. 2011. The Web Origin Concept. RFC 6454. IETF. http://tools.ietf.org/
[6] Andrew Bortz and Dan Boneh. 2007. Exposing Private Information by Timing
Web Applications. In Proceedings of the 16th International Conference on World
Wide Web (WWW ‚Äô07). Association for Computing Machinery, New York, NY,
USA, 621‚Äì628. https://doi.org/10.1145/1242572.1242656
[7] Frederik Braun and Mario Heiderich. 2013. X-frame-options: All about clickjack-
ing. (2013). https://cure53.de/xfo-clickjacking.pdf
[8] Stefano Calzavara, Sebastian Roth, Alvise Rabitti, Michael Backes, and Ben
Stock. 2020. A Tale of Two Headers: A Formal Analysis of Inconsistent Click-
Jacking Protection on the Web. In 29th USENIX Security Symposium (USENIX
Security 20). USENIX Association, 683‚Äì697. https://www.usenix.org/conference/
usenixsecurity20/presentation/calzavara
[9] Chris Evans. 2009.
Cross-domain search timing.
(2009).
https://
scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html
[10] Chrome Platform Status. 2020.
XSS Auditor (removed).
https://
www.chromestatus.com/feature/5021976655560704. (June 2020).
[11] D. Dolev and A. Yao. 1983. On the security of public key protocols.
IEEE
Transactions on Information Theory 29, 2 (1983), 198‚Äì208. https://doi.org/10.1109/
TIT.1983.1056650
[12] Benjamin Eriksson and Andrei Sabelfeld. 2020. Autonav: Evaluation and automa-
tization of web navigation policies. In Proceedings of The Web Conference 2020.
1320‚Äì1331.
[13] Chris Evans. 2008.
Cross-domain leaks of