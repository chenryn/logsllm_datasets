After some analysis it was determined that
SAPHostControl was the equivalent of the bi-
nary saphostctrl. In other words, by only using
HTTP SOAP requests, it was possible to call all
functions provided by the Host Agent. Again,
even locally, all requests required authentica-
tion.
An extensive research over the saphostctrl
binary was performed to ﬁnally realized that
every action done with this wrapper was pro-
ducing HTTP requests to localhost on port 1128.
This meant that the binary itself was using
the web service running on port 1128. With
the objective of understanding how everything
was working, an analysis of the trafﬁc was
performed through snifﬁng the local network
interface of the SAP system.
The ﬁrst analyzed HTTP request already
gave some interesting outcomes:
POST /SAPHostControl.cgi HTTP/1.1
Content-type : text/xml;charset="utf-8"
Authorization: Basic ezJENEE2RkI4LTM3RjEtNDN
kNy04OEJFLUFEMjc5Qzg5RENEN306MjcwMjI4MjQ0MzE
zNzIzNDYzNDUyMjg4MTI2NDIzMDQ3NDY3MTUwMg==
Soapaction: ""
User-Agent: JAX-WS RI 2.1.6 in JDK 6
Host: target:118
[...]
The authorization header was not empty. Its
decoded value was:
{2D4A6FB8-37F1-43d7-88BE-AD279C89DCD7}:
2702282443137234634522881264230474671502
After some more tests it was found that al-
though the user remains always the same, the
password (that "list" of numbers), changed at
every single HTTP request. It seemed to be im-
portant to further understand what was going
on, and therefore it was decided to look deeper
into the Host Agent kernel to learn from where
these passwords came from.
7.4.
Internal Trusted Connection
Using the hardcoded username as an entry
point for the analysis, it was discovered that
a special feature exists inside the Host Agent.
From now on, this feature would be referred
as "Internal Trusted Connection".
After carefully analyzing this feature, it was
possible to determine how it worked:
1. Only whitelisted users (parameter ser-
vice/users_admin) are able to use it.
2. These users are able to request, only lo-
cally, a logon ﬁle using the method Re-
questLogonFile exposed by the SAPHost-
Control web service.
3. The Host Agent generates a temporary
password into a temporary ﬁle (only read-
able by the caller user) located in /usr/s-
ap/hostctrl/work/sapcontrol_logon and
provides the path and name to the as re-
sponse of the request executed in the pre-
vious step.
4. The initial requester (user), reads the con-
tent of the ﬁle to get the password.
5. The user can perform one request, and
only one, using the hardcoded username
and this temporary password.
Below there is an example of how this fea-
ture can be used:
1. The whitelisted used sends a request to the
SAPHostControl web service with the appro-
priate parameters:
9
saphost:daaadm 54> curl -skL -X POST
http://localhost:1128/SAPHostControl.cgi
-H 'Content-Type: text/xml;charset=utf-8'
--data '
daaadm
[...]'
| xmllint --format -
2. The user gathers the ﬁlename from the
response of the request made in step 1.
[...]
/usr/sap/hostctrl/work/sapcontrol_
logon/logon1
[...]
3. Finally, only the user is able to read that
ﬁle, which has a temporary password just avail-
able to be used by that particular user:
saphost:daaadm 55> ls -lrht sapcontrol_logon
-rw------- 1 daaadm sapsys 40 Jun 30 logon1
saphost:daaadm 56> cat logon1
4061453350048328991129491560313810236108
The conclusion of this ﬁnding is that the
daaadm user can use this feature to call every
function exposed by the Host Agent. There-
fore, knowing the password of daaadm was
not required anymore. Chaining this ﬁnding
with the vulnerability explained in section 6
means that any unauthenticated attacker with
access to the SolMan could ﬁnally execute ev-
ery method of every Host Agent running in
the same host as an SMD Agent.
7.5.
Analyzing HostControl functions
Until this point it was possible to use the ex-
posed functions using the user daaadm. How-
ever, it was important to further investigate
the actual actions that those functions were
able to perform.
Some of the functions ex-
posed seemed to be dangerous (StopInstance,
StopDatabase, etc). Nevertheless, the main ob-
jective was to try to ﬁnd a way of executing
commands as root or system user.
After a careful analysis of each of the func-
tions exposed, it was possible to identify sev-
eral of them that were vulnerable to command
injection. Although these functions required
OS authentication, they were ﬁnally executing
commands as root.
Therefore this injection
could lead to a privilege escalation.
Following sections will illustrate in a more
detailed way just a few examples of vulnerable
functions.
ExecuteOperation
This function, under certain circumstances and
after a few prerequisite checks, tried to ex-
ecute "./saphostexec -upgrade" command as
root. However, the path to saphostexec is con-
trolled by the attacker and it is not sanitized.
Therefore, an attacker with the necessary privi-
leges to use this function could trick this path,
allowing the execution of any arbitrary script
or binary as long as the name remains the
same.
Log output of a successful attack:
[..]CommandManager::StartOSCommand: start
./saphostexec
[..]No user configured. Current user will
be used.
[..]Working directory will be change to
'/usr/sap/../../tmp/attacker'
ExecuteInstallationProcedure
This function executes several OS commands
as root before launching the SAP installer tools,
called "sapinst". Again, the path to the sapinst
binary could be controlled by an attacker, al-
lowing the execution of any arbitrary script or
binary as long as the name remains "sapinst".
Log output of a successful attack:
10
[..] PID 9162: root: Executing command
"mkdir -p -m 0770 /tmp/attacker/sapinst3"
[..] PID 9163: root: Executing command
"chown sapadm:sapinst /tmp/attacker/sapinst3"
[..] PID 9164: root: Executing command
"mv /usr/sap/hostctrl/work/eip_3HeFAw
/tmp/attacker/sapinst3/inifile.xml"
[..] PID 9165: root: Executing command
"chgrp sapinst /tmp/attacker/sapinst3/
inifile.xml"
[..] PID 9166: root: Executing command
"chmod 0660 /tmp/attacker/sapinst3/
inifile.xml"
[..] PID 9168: root: Executing command
"/tmp/attacker/sapinst [..]
ACOSPrepare
This function’s purpose is to perform sev-
eral tasks to prepare for special OS operation.
Among other actions, it tries to mount a ﬁle
system with administrator privileges. An at-
tacker can control the source path of this ﬁle
system and provide, for instance, a malicious
one with a setuid revershell into it.
Log output of a successful attack:
OSP-0121: Mounting network file system
/tmp/attacker/test.fs -> /tmp/mnt
OSP-0301: Calling SAPACOSPrep platform
library function 'AcAttachNetfs'
LNX-0121: File system successfully mounted
OSP-0310: Library function returned
successfully
OSP-0200: Operation succeeded
saphostcontrol: exitcode=0
saphostcontrol: 'sapacosprep'
successfully executed
[...]
Afterwards checking if this ﬁle was created:
target:daaadm 57> ls -larht /tmp/mnt
total 20K
drwxrwxr-x
3 root root 4.0K
.
drwxrwxr-x 17 root root 4.0K
..
-rwsrwxrwx
1 root root 8.8K revershell
target:daaadm 58> /tmp/mnt/revershell
All vulnerabilities and their exploitation
mechanisms, work against Unix-like operating
systems as well as against Windows.
7.6.
Conclusion
The attacks presented in the previous section
required an authenticated user that must also
be part of the service/users_admin whitelist.
Abusing the injections vulnerabilities found,
this user would be able to escalate privileges
and end up running commands with root priv-
ileges.
As was shown in section 7.1, daaadm was
part of this whitelist. Furthermore, recalling
section 6.5, any unauthenticated attacker was
able to execute commands as daaadm.
Chaining both ﬁndings it is possible to con-
clude that any unauthenticated attacker with
network access to SolMan’s web server, will
ﬁnally be able to execute commands as root in
every server where a managed/satellite system
is running.
Figure 3: Unauthenticated attacker compromises every
server connected to SolMan as they are able to
execute commands with root/system privileges.
7.7.
Staying protected
Applying patches
During April 2020, SAP released two patches
involving the SAP Host Agent. These patches
provided protection against the injections
found in several functions of the Host Control
web service.
Both patches provided safe versions of the
affected components. In particular, for the SAP
Host Agent, the provided version is:
Once this version is installed, the escalation
of privileges detailed in the aforementioned
section will not be able to be used anymore.
Besides installing the mentioned patches, due
11
Note
Title
CVSS
2902645
[5]
Privilege Escalation in SAP
Host Agent
7.2
2902456
[6]
Privilege Escalation in SAP
Landscape Management
7.2
Table 4: SAP Security notes related to Host Agent vul-
nerabilities
Component
Support Package
SAP HOST AGENT 721
46
Table 5: Patches related to Host Agent vulnerabilities
to being a critical and powerful agent, it is
recommended also to keep it up to date by
following these SAP notes:
Note
Title
2219592 Upgrade Strategy of SAP Host
Agent
2130510 SAP Host Agent 7.21
Table 6: SAP Security notes related to Host Agent vul-
nerabilities
Finally it is also important to advise that up-
grading the SAP Host Agent is way more easy
than upgrading an SAP System. It is a "little"
technical component, without customizing and
totally independent of the SAP System with its
critical business data.
8.
Impact
A successful attack will mean that the unau-
thenticated attacker will have total control over
every SAP system in the landscape.
From a technical perspective, the unauthen-
ticated attacker will have a root/system access
to every server where an SAP system is run-
ning. This means that it will not only be able
to compromise SAP related data, but also go
beyond that and potentially compromise any
other information or system running in the
same server.
From a business point of view, this means
a total compromise of every business data a
system could hold. On every single SAP Sys-
tem connected to SolMan, the attacker could
perform classical post exploitations techniques
and compromise every business record. To bet-
ter illustrate the impact, these are a few exam-
ples of actions that the attacker could perform:
• Espionage: Obtain customers, vendors or
human resources data, ﬁnancial planning
information, balances, proﬁts, sales infor-
mation, manufacturing recipes, etc.
• Fraud:
Modify
compliance
processes,
modify ﬁnancial information, tamper sales
or purchase orders, create new vendors,
modify vendor bank account numbers, etc.
• Sabotage: Paralyze the operation of the
organization by shutting down the SAP
system or the complete server, disrupting
interfaces with other systems and deleting
critical information, etc.
9.
Conclusions
Speciﬁcally speaking about the presented at-
tack, it was demonstrated how an unauthenti-
cated attacker having access to SolMan’s web
server, was able to fully compromise every
server of a system connected to the SAP land-
scape by being able to execute commands with
system/root privileges on it .
The Solution Manager is a critical part of
every SAP landscape and must be treated as
it. Complementary security measures in or-
der to protect it, such as network segregation,
should be in place since its deployment. Fur-
thermore, processes to quick and successfully
apply patches for critical assets like SolMan,
should be conﬁgured and maintained.
Generally speaking, hyperconnected systems
play a central role in terms of security as they
could act as entry points for more complex
attacks. Once a system of this type is compro-
mised, attackers could leverage their intercon-
12
nections in order to spread themselves through
the network and extend their level of compro-
mise.
As a ﬁnal conclusion, ERP security has been
improving towards a more secure state during
recent years. However, as any other software,
it has and will continue having ﬂaws that may
end up having critical impact. It is important to
continue performing security analysis against
them in order to detect and prevent them from
being exploited in the wild.
References
[1]
https://wiki.scn.sap.com/wiki/display/EEM/UXMonHowTo
[2]
Web security: A Whitehat Perspective (199)
[3]
https://launchpad.support.sap.com/#/notes/2890213
[4]
https://help.sap.com/viewer/8c44f49685f44be4aa420bbf6393aeea/7.5.6/
en-US/47af551efa711503e10000000a42189c.html
[5]
https://launchpad.support.sap.com/#/notes/2902645
[6]
https://launchpad.support.sap.com/#/notes/2902456
13