2016年黑客通过The Dao，利用智能合约中的漏洞，成功盗取360万以太币。THE
DAO持有近15%的以太币总数，因此这次事件对以太坊网络及其加密币都产生了负面影响。
The DAO事件发生后，以太坊创始人Vitalik
Buterin提议修改以太坊代码，对以太坊区块链实施硬分叉，将黑客盗取资金的交易记录回滚，得到了社区大部分矿工的支持，但也遭到了少数人的强烈反对。最终坚持不同意回滚的少数矿工们将他们挖出的区块链命名为Ethereum
Classic（以太坊经典，简称ETC），导致了以太坊社区的分裂。在虚拟货币历史上，这是第一次，也可能唯一一次由于安全问题导致的区块链分叉事件。
无独有偶2017年7月19日, 多重签名钱包Parity1.5及以上版本出现安全漏洞,15万个ETH被盗,共价值3000万美元。
两次被盗事件都是因为智能合约中的漏洞。让我们看到，虚拟货币的安全不仅仅是平台和个人，区块链上的应用，也是我们应该关注的内容。
### 03 XMR
门罗币（Monero，代号XMR）是一个创建于2014年4月开源加密货币，它着重于隐私、分权和可扩展性。与自比特币衍生的许多加密货币不同，Monero基于CryptoNote协议，并在区块链模糊化方面有显著的算法差异。
#### 隐蔽地址
隐蔽地址是为了解决输入输出地址关联性的问题。每当发送者要给接收者发送一笔金额的时候，他会首先通过接收者的地址（每次都重新生成），利用椭圆曲线加密算出一个一次性的公钥。然后发送者将这个公钥连同一个附加信息发送到区块链上，接收方可以根据自己的私钥来检测每个交易块，从而确定发送方是否已经发送了这笔金额。当接收方要使用这笔金额时，可以根据自己的私钥以及交易信息计算出来一个签名私钥，用这个私钥对交易进行签名即可。
#### 环签名
隐蔽地址虽然能保证接收者地址每次都变化，从而让外部攻击者看不出地址关联性，但并不能保证发送者与接收者之间的匿名性。因此门罗币提出了一个环签名的方案——事实上，在古代就已经有类似的思想了：如图5所示，联名上书的时候，上书人的名字可以写成一个环形，由于环中各个名字的地位看上去彼此相等，因此外界很难猜测发起人是谁。这就是环签名。
除了交易地址，交易金额也会暴露部分隐私。门罗币还提供了一种叫做环状保密交易（RingCT）的技术来同时隐藏交易地址以及交易金额。这项技术正在逐步部署来达到真正的匿名。这项技术采用了多层连接自发匿名组签名（Multi-layered Linkable Spontaneous Anonymous Group signature）的协议。
#### 安全问题
比特币交易私密性方面做的不太好，关于货币隐私的两个基本属性：
1\. 不可链接性（Unlinkability）：无法证明两个交易是发送给同一个人的，也就是无法知道交易的接收者是谁。
2\. 不可追踪性（Untraceability）：无法知道交易的发送者是谁。
比特币交易要发送地址信息，很明显不符合之上的要求。门罗币通过隐蔽地址来保证不可链接性，通过环签名来保证不可追踪性，从而给用户的交易信息提供了很好的隐私性。另一方面，比特币挖矿主要依赖于大量专业化的专用集成电路（ASIC）。它的算法在ASIC上的运行速度远超于在标准家庭电脑或者笔记本电脑上运行。相比之下，门罗币的挖矿算法要精良得多。它并不依赖于ASIC，使用任何CPU或GPU都可以完成，这就意味着门罗币具有更低的挖掘门槛。
门罗币的这些特性，使其成为黑产挖矿的不二之选。过去的一段时间，出现了许多以门罗币挖矿为目的的网络攻击事件。
### 04 小结
在以太坊这种平台区块链上，如果运行智能合约，应用程序出现漏洞，同样也会威胁其上的数字资产。
以太坊解决了比特币的单应用的局限，使得区块链像一个操作系统，开发者可以在其上搭建自己的“应用”。门罗币降低了挖矿的门槛，同时又满足了交易私密性需求。这些特性都符合黑产的需要，过去的一段时间，以门罗币挖矿为目的的网络攻击事件时有发生。
## 0x03 交易平台安全性思考
随着区块链技术的迅速发展,使得虚拟货币渐渐走入的大众的视线。随之而来的就是大量的虚拟币交易平台。虚拟货币交易平台就是为用户提供虚拟货币与虚拟货币之间兑换的平台，部分平台还提供人民币与虚拟货币的p2p兑换服务。现在交易平台平均每天的交易额都是数以亿计，然而交易平台背后的经营者能力与平台的自身的安全性并没有很好的保障。从14年至今据不完全统计，单纯由于交易所安全性导致的直接损失就达到了1.8亿美元之多。
随着虚拟币的水涨船高，交易所就成了黑客们的首要目标，据统计入侵一家交易所给黑客带来的直接利益大约1000万美元左右，然而交易所的安全性参差不齐和各个国家对这类平台基本都暂时没有好的管控策略，这给黑客带来了很大的便利，同时也直接威胁着用户的资金安全。
###  01平台被黑事件回顾
  * **比特儿(Bter.com) 比特币交易平台被盗事件**
2014-08-15
事件简介：
比特儿是一家中国的山寨币交易所。NXT等山寨币都在上面交易。
由于POS币的钱包必须上线运行才能获取利息。因此NXT钱包必须在线运行，给了入侵的机会。POS币不能冷钱包保存，暴露出POS的重大安全隐患。黑客盗走NXT后与平台方通过交易留言进行了谈判：
并要求平台方支付BTC作为赎金换回NXT
最终平台支付了110个BTC，却未能完全赎回NXT，只能要求社区回滚NXT的交易区块。
本次比特儿被黑是历史上第一次完全公开展现的网络犯罪，暴露出交易平台和数字货币在当时没有监管野蛮生长的严肃问题。
  * **以太币组织The DAO被黑事件**
2016-06
事件简介：
以太币的去中心化组织The
Dao被黑，价值逾5000万美元的以太币外溢出DAO的钱包。以太币（ETH）市场价格瞬间缩水，从记录高位21.50美元跌至15.28美元，跌幅逾23%。
在此前的智能合约写法中，有三个严重漏洞，黑客也正是利用这几个漏洞攻击The DAO窃取以太币。
  * **fallback** **函数调用**
向合约地址发送币有两种写法：
    address addr = 地址;
    if (!addr.call.value(20 ether)()) {
    throw;
    }
    address addr = 地址;
    if (!addr.send(20 ether)) {   
    throw;
    }
二者都是发送20个ether，都是一个新的message call，不同的是这两个调用的gasli mit不一样。send()给予0的gas（相当于
**call.gas(0).value()()** )，而 **call.value()()**
给予全部（当前剩余）的gas。当我们调用某个智能合约时，如果指定的函数找不到，或者根本就没指定调用哪个函数（如发送ether）时，fallback函数就会被调用。
当通过 **addr.call.value()()**
的方式发送ether，和send()一样，fallback函数会被调用，但是传递给fallback函数可用的气是当前剩余的所有gas，如果精心设计一个fallback就能影响到系统，如写storage，重新调用新的智能合约等等。
  * **递归调用**
一段用户从智能合约中取款的代码如下：
    function withdrawBalance() {   
    amountToWithdraw = userBalances[msg.sender];   
    if（ amountToWithdraw > 0) {   
    if (!(msg.sender.call.value(amountToWithdraw)())) {       
            throw;   
        }   
        userBalances[msg.sender] = 0;
    }
    }
如果付款方的合约账户中有1000个ether，而取款方有10个ether，此处就有严重的递归调用问题，取款方可以将1000个ether全部取走。
  * **调用深度限制**
合约可以通过message call调用其他智能合约， 被调用的合约继续通过message call在调用其他合约，这样的嵌套调用深度限制为1024。
    function sendether() {   
    address addr = 地址;   
    addr.send(20 ether);   
    var thesendok = true;
    }
如果攻击者制造以上的1023个嵌套调用，之后再调用 **sendether()** ，就可以让 **add.send(20 ether)**
失效，而其他执行成功：
    function hack() {   
        var count = 0;   
        while (count < 1023) {       