1
794
devices for web content ﬁltering with support for HTTPS
deep inspection. NetSpark was another web content ﬁl-
tering device manufacturer offering similar capabilities.
According to their product description, the user’s content
is unencrypted for inspection on NetSpark’s servers, and
then re-encrypted under NetSpark’s SSL certiﬁcate for
the end user. We observed a number of device vendors
that provided similar devices, such as EliteCore, Con-
tentWatch, and Netbox Blue. There were also software
solutions that provided selective website blocking, such
as Kurupira.NET. Some appliance vendors aggressively
marketed SSL content inspection as a feature which can-
not be bypassed by users. For example, ContentWatch’s
website provided the following product description for
their ﬁrewall devices:4
“This technology also ensures the users cannot by-
pass the ﬁltering using encrypted web trafﬁc, remote
proxy servers or many of the other common methods
used circumvent content ﬁlters.”
Interestingly, EliteCore’s Cyberoam appliances have pre-
viously been discovered [32] to be using the same CA
private key across all Cyberoam devices. This is partic-
ularly dangerous, since the universal CA private key can
be extracted from any single device by an attacker. This
vulnerabilitiy allows an attacker to seamlessly perform
SSL man-in-the-middle attacks against users of benign
Cyberoam devices, because the attacker can issue forged
server certiﬁcates that will be accepted by other clients
that have installed Cyberoam’s CA certiﬁcate. Reportedly,
Cyberoam issued an over-the-air patch to generate unique
CA certiﬁcates on each device. Nevertheless, we should
be aware that other device manufacturers are likely to
introduce similar security vulnerabilities.
• Adware. We observed 330 instances of forged certiﬁcates
4http://www.contentwatch.com/solutions/industry/government
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:57 UTC from IEEE Xplore.  Restrictions apply. 
issued by a company named Sendori. This company of-
fers a browser add-on that claims to automatically correct
misspelled web pages. However, using Google Search to
query the string “Sendori” revealed alarming discussions
about
the add-on actually hijacking DNS entries for
the purposes of inserting advertisements into unrelated
websites.5 This form of adware actively injects content
into webpages, and could possibly be detected using Web
Tripwires or CSP (as described in Section II-D).
• Malware. As previously mentioned, we noticed that
an unknown issuer named IopFailZeroAccessCreate
appeared relatively frequently in our dataset. We man-
ually searched the name on the Internet and noticed
that multiple users were seeing SSL certiﬁcate errors
of the same issuer, and some were suggesting that the
user could be under SSL man-in-the-middle attacks by
malware.6 Upon deeper investigation, we discovered 5
forged certiﬁcates that shared the same subject public
key as IopFailZeroAccessCreate, yet were generated
with their issuer attribute set as “VeriSign Class 4 Public
Primary CA.” We conﬁrmed with Symantec/VeriSign that
these suspicious certiﬁcates were not issued through their
signing keys. This was obviously a malicious attempt
to create a certiﬁcate with an issuer name of a trusted
CA. These variants provide clear evidence that attackers
in the wild are generating certiﬁcates with forged issuer
attributes, and even increased their sophistication during
the time frame of our study.
In Figure 5, we illustrate the geographic distribution
of the certiﬁcates issued by IopFailZeroAccessCreate
(and the forged “VeriSign Class 4 Public Primary CA”)
on a world map. As shown, the infected clients were
widespread across 45 different countries. The countries
with the highest number of occurrences were Mexico,
Argentina and the United States, with 18, 12, and 11
occurrences, respectively. This shows that the particular
SSL man-in-the-middle attack is occurring globally in the
wild. While it is possible that all of these attacks were am-
ateur attackers individually mounting attacks (e.g. at their
local coffee shop), it is certainly odd that they happened
to use forged certiﬁcates with the same subject public key.
However, this is not so unreasonable if these attacks were
mounted by malware. Malware researchers at Facebook,
in collaboration with the Microsoft Security Essentials
team, were able to conﬁrm these suspicions and identify
the speciﬁc malware family responsible for this attack.
Since our experiments only tested SSL connections to
Facebook’s servers (only for the www.facebook.com
domain), we cannot conﬁrm whether this attack also
targeted other websites. In response to our discovery, the
website notiﬁed the infected users, and provided them
with malware scan and repair instructions.
5http://helpdesk.nwciowa.edu/index.php?/News/NewsItem/View/10
6http://superuser.com/q/421224
Fig. 5. Geographic distribution of forged SSL certiﬁcates generated by the
malicious issuer IopFailZeroAccessCreate
In addition, there were 4 other suspicious certiﬁcates
issued under the organization name of thawte, Inc with
three of them using “Production Security Services” as
the issuer common name, and one using “thawte Ex-
tended Validation SSL CA.” These instances could be
the same malware attack previously spotted by some
Opera users [33], in which forged certiﬁcates pretending
to be issued by Thwate were observed. These 4 forged
certiﬁcates were observed in Italy, Spain, and the United
States.
We note that a sophisticated attacker utilizing malware
could install their self-signed CA certiﬁcates on clients
in order to suppress browser security errors. Such an
attacker is likely capable of stealing conﬁdential infor-
mation, by reading from protected storage or logging
the user’s keystrokes. Nevertheless, mounting an SSL
man-in-the-middle attack further enables a general way
of capturing and recording the victim’s web browsing
activities in real-time.
• Parental Control Software. Some forged SSL certiﬁ-
cates were issued by parental control software, including
21 from Qustodio and 14 from ParentsOnPatrol. These
type of software are designed to enable parents to monitor
and ﬁlter the online activities of their children. Whether
such level of control is appropriate is beyond the scope
of our work.
While the remaining 104 other distinct issuer organizations
in Table VIII and 252 other distinct common names in
Table IX do not appear to be widespread malicious attempts
(based on manual
the possibility remains that
inspection),
some may still be actual attacks.
For example, we found two unexpected instances of forged
certiﬁcates issued by the Oneida Nation of Wisconsin, an
Indian tribe. We have little clue of why encrypted trafﬁc would
be eavesdropped by such entities. It is possible that this is
another case of corporate surveillance. We also found that
93
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:57 UTC from IEEE Xplore.  Restrictions apply. 
(cid:20)(cid:20)(cid:20)(cid:20)(cid:27)(cid:20)(cid:27)(cid:20)(cid:27)some schools and libraries were using forged certiﬁcates for
SSL interception, such as “Central Montcalm Public Schools”
and “Louisville Free Public Library.”
For some certiﬁcates, the certiﬁcate attributes alone provide
insufﬁcient clues to determine their origin. For example, an
issuer named EasyTech could either implicate the PC repair
service at Staples EasyTech, or the EasyTech digital education
system on learning.com. In either case, we were unclear
why SSL connections were being intercepted for those partic-
ular targets.
V. SURVEY OF MITIGATIONS
We provided direct evidences of a variety of forged SSL
certiﬁcates from real-world connections in Section IV. In
this section, we list some possible defenses that websites or
browser vendors may consider to help mitigate these attacks.
A. Strict Transport Security
HTTP Strict Transport Security (HSTS) [34], the successor
of ForceHTTPS [35], is a HTTP response header that allows
websites to instruct browsers to make SSL connections manda-
tory on their site. By setting the HSTS header, websites may
prevent network attackers from performing SSL stripping [36].
A less obvious security beneﬁt of HSTS is that browsers sim-
ply hard-fail when seeing invalid certiﬁcates, and do not give
users the option to ignore SSL errors. This feature prevents
users from accepting untrusted certiﬁcates when under man-in-
the-middle attacks by amateur script kiddies. However, HSTS
is not designed to protect against malware or professional
attackers that use forged certiﬁcates that would be accepted
by the browser.
B. Public Key Pinning
The Public Key Pinning Extension for HTTP (HPKP) [37]
proposal allows websites to specify their own public keys with
a HTTP header, and instruct browsers to reject any certiﬁ-
cates with unknown public keys. HPKP provides protection
against SSL man-in-the-middle attacks that use unauthorized,
but possibly trusted, certiﬁcates. HPKP automatically rejects
fraudulent certiﬁcates even if they would be otherwise trusted
by the client. Both HSTS and HPKP defenses require that
clients must ﬁrst visit the legitimate website securely before
connecting from untrusted networks. This requirement is lifted
if public key pins are pre-loaded in the browser, such as in
Google Chrome [38] and Internet Explorer (with EMET) [39],
although this approach may not scale for the entire web.
Notably, Chrome’s pre-loaded public key pinning mechanism
has successfully revealed several high-proﬁle CA incidents,
in which mis-issued certiﬁcates were used to attack Google’s
domains in the wild. However, in current implementations,
Chrome’s public key pinning does not reject certiﬁcates that
are issued by a locally trusted signer, such as antivirus,
corporate surveillance, and malware.
A related proposal, Trust Assertions for Certiﬁcate Keys
(TACK) [40], allows SSL servers to pin a server-chosen
signing key with a TLS extension. In contrast with HPKP,
TACK pins a signing key that chosen by the server, separate
from the private key corresponding to the server’s certiﬁcate,
and can be short-lived. TACK allows websites with multiple
SSL servers and multiple public keys to pin the same signing
key. Once the browser receives a TACK extension from an SSL
site, it will require future connections to the same site to be
signed with the same TACK signing key, or otherwise, reject
the connection. Another proposal called DVCert [41] delivers
a list of certiﬁcate pins over a modiﬁed PAKE protocol in
an attempt to detect SSL man-in-the-middle attacks, but also
requires modiﬁcations to existing clients and servers.
The concept of public key pinning (or certiﬁcate pinning)
has previously been implemented as a pure client-side defense
as well. Firefox add-ons such as Certiﬁcate Patrol [42] and
Certlock [9] were designed to alarm users when a previously
visited website starts using a different certiﬁcate. However,
without explicit signals from the server, it may be difﬁcult to
accurately distinguish real attacks from legitimate certiﬁcate
changes, or alternative certiﬁcates.
C. Origin-Bound Certiﬁcates
The TLS Origin-Bound Certiﬁcates (TLS-OBC) [43] pro-
posal revisits TLS client authentication, by enabling browsers
to generate self-signed client certiﬁcates on demand without
requiring any user conﬁgurations. TLS-OBC may block most
of the existing man-in-the-middle attack toolkits, since attack-
ers cannot impersonate the client (without stealing the self-
signed private key from the legitimate browser). However, it
does not prevent an impersonated server from supplying a
cacheable malicious JavaScript ﬁle to the client, which later
executes in the context of the victim website, and potentially
exﬁltrates data by reconnecting to the legitimate server. Fur-
ther, TLS-OBC requires code changes to the network stack on
servers (while HSTS and HPKP do not), and induces extra
computational costs for client certiﬁcate generation. Websites
should assess whether this is an acceptable trade-off.
D. Certiﬁcate Validation with Notaries
Perspectives [44] is a Firefox add-on that compares server
certiﬁcates against multiple notaries (with different network
vantage points) to reveal inconsistencies. Since public no-
taries observe certiﬁcates from diverse network perspectives,
a local impersonation attack could be easily detected. Conver-
gence [45] extends Perspectives by anonymizing the certiﬁcate
queries for improved privacy, while allowing users to conﬁgure
alternative veriﬁcation methods (such as DNSSEC). The De-
tecTor [46] project (which extends Doublecheck [47]) makes
use of the distributed Tor network to serve as external notaries.
Crossbear [48] further attempts to localize the attacker’s posi-
tion in the network using notaries. However, notary approaches
might produce false positives when servers switch between
alternative certiﬁcates, and clients may experience slower SSL
connection times due to querying multiple notaries during
certiﬁcate validation. Further, these pure client-side defenses
have not been adopted by mainstream browsers, thus cannot
protect the majority of (less tech-savvy) users.
94
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:57 UTC from IEEE Xplore.  Restrictions apply. 
E. Certiﬁcate Audit Logs
Several proposals have suggested the idea of maintaining
cryptographically irreversible records of all the legitimately-
issued certiﬁcates, such that mis-issued certiﬁcates can be
easily discovered, while off-the-record certiﬁcates are sim-
ply rejected. Sovereign Keys [49] requires clients to query
public timeline servers to validate certiﬁcates. Certiﬁcate
Transparency (CT) [50] removes the certiﬁcate queries from
clients by bundling each certiﬁcate with an audit proof of its
existence in the public log. Accountable Key Infrastructure
(AKI) [51] further supports revocation of server and CA
keys. These defenses are designed to protect against network
attackers (not including malware). However, browsers need
to be modiﬁed to support the mechanism, and changes (or
cooperation) are needed on the CAs or servers to deliver the
audit proof. Encouragingly, Google has announced their plan
to use Certiﬁcate Transparency for all EV certiﬁcates in the
Chrome browser [52].
F. DNS-based Authentication
DNS-based Authentication of Named Entities (DANE) [53]
allows the domain operator to sign SSL certiﬁcates for web-
sites on its domain. Similar to public key pinning defenses,
DANE could allow websites to instruct browsers to only accept
speciﬁc certiﬁcates. This approach prevents any CAs (gone