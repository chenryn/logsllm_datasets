### Properties and Design Challenges

The following properties are essential for a device under its factory settings:
1. **User Choice of DMCs**: The user can select any of the device's supported Device Management Channels (DMCs).
2. **Full Control via DMCs**: Any chosen DMC should allow the user to fully control the device by coordinating security policies across all DMCs.

We discuss a clean-slate design that achieves these goals in Section 6. However, in practice, achieving both objectives simultaneously is challenging in the short term due to the need for different stakeholders—such as third-party DMC providers (e.g., Apple, Amazon, Google, Zigbee Alliance, Z-Wave Alliance) and mainstream device manufacturers—to adopt a standardized cross-DMC management protocol. This would require them to modify their current DMCs to enable full interoperability of security policies, which is a complex task. The challenge is further compounded by their heterogeneous architecture, where security policies and enforcement span clouds, hubs, and devices, and by implicit security assumptions made by different vendors [69].

### Practical Mitigation Goals

Before an ideal long-term solution can be agreed upon, fully developed, and deployed, we propose practical, lightweight, and effective mitigation measures that can be easily adopted by device manufacturers to mitigate Codema attacks without requiring changes to current third-party DMCs. We summarize two key design goals for such a mitigation:

#### Control Goal (C-Goal)
- **Objective**: Provide users with the option and tools to fully control their devices, including managing the accessibility status of all DMCs.
- **Challenges**: Allowing any DMC of the user’s choice to manage other DMCs requires a universal cross-DMC management protocol, which is difficult to achieve. Instead, we propose an access control mechanism that can be easily integrated by device manufacturers, enabling users to control (enable, disable, or monitor) dangling DMCs.
- **Implementation**: By leveraging the in-device technical stack (Figure 1), the manufacturer’s Application Logic Layer (ALL) can oversee all DMCs and be enhanced with a centralized access control framework (Section 5.2).

#### Usability Goal (U-Goal)
- **Objective**: Ensure that unused DMCs pose no risks to the user’s device with minimal impact on usability.
- **Benefits**: A key usability benefit of the current multiple-DMC IoT paradigm is that users can choose any DMC supported by the device under its factory settings. A mitigation design should preserve this usability.
- **Assurance**: The mitigation should have minimum impacts on usability, ensuring that users do not have to manage DMCs if they prefer not to. Our study confirms that this approach is highly acceptable to IoT users (Section 5.4).

### CGuard: Design of Codema Mitigation

This section introduces Channel Guard (CGuard), a new, lightweight access control framework for cross-DMC security management. Device manufacturers can easily integrate CGuard into their firmware to enable the m-DMC to achieve the above mitigation goals without relying on all third-party DMC providers to fix their issues.

#### Architecture
To achieve the C-Goal, CGuard employs a centralized access control framework to oversee all DMCs and govern their accessibility. Unlike m-DMCs that interfere with third-party DMCs' state machines and internal states, CGuard utilizes the device manufacturer’s ALL to control each DMC’s accessibility status (enabled/disabled). This ensures that no DMC is left in an unexpected state, such as being dangling or stealthily enabled by an attacker.

At a lower level, CGuard wraps the underlying DMC libraries, exposing three universal, DMC-agnostic APIs for the ALL program to enable, disable, and monitor individual third-party DMCs. The key components of CGuard include:
- **Policy Store**: Stores the centralized policy specifying each DMC’s accessibility (on/off).
- **Channel Switch**: Provides `enableChannel(name)` and `disableChannel(name)` APIs for the ALL program to enable or disable a third-party DMC by specifying a channel name.
- **Channel Monitor**: Provides the `getChannelStatus(name)` API for the ALL program to monitor the accessibility status (on/off) of each third-party DMC.

#### Implementation
CGuard was implemented in 1381 lines of C code (released online [49]). To implement the Channel Switch APIs, we manually inspected third-party DMC libraries, including HomeKit, Ti Z-stack (Zigbee DMC), and the Amazon Alexa Gadgets Toolkit (smart speaker DMC). The Policy Store is lightweight, recording each DMC’s on/off designation in a few bytes.

An end-to-end deployment was conducted on a proof-of-concept smart LED light built on Raspberry Pi 3b, integrating a PoC m-DMC and multiple third-party DMCs. A prototype manufacturer app was developed on Android, and the communication leverages a typical cloud-based architecture using MQTT protocol over AWS IoT Core.

### Evaluation

#### Usability
To ensure CGuard is easy to use for normal IoT users, we conducted a user study with 72 participants from North America and Asia. The results show that our protection is well-received, with almost all participants agreeing that it is important to address Codema risks and favoring CGuard’s automatic/default closing of unused DMCs.

#### Performance Overhead
Based on our end-to-end deployment, CGuard uses only 0.88% (4KB/452KB) and 0.72% (4KB/556KB) of runtime memory and storage, and introduces a negligible delay in command execution.

#### Level of Effort for Manufacturer Adoption
Integrating CGuard required adding about 182 lines of C code to the ALL program and 448 lines of Java code to the Android app, indicating that it requires little effort to integrate.

#### Effectiveness
CGuard proactively closes unused DMCs after the owner binds any channel, leaving no channels dangling. An attacker attempting to bypass CGuard by factory-resetting the device would cause the owner to immediately lose control, making such attempts easily observable.

### Discussion

The most important lesson learned from our research is the caution needed when integrating multiple DMCs into a single device. Without a standardized, fully coordinated cross-DMC management, there is a risk of introducing new security flaws, exposing the device to unauthorized access. Specifically, without proper mediation, security policies configured through one DMC could be violated by another DMC, leading to potential security breaches.