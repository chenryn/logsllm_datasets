committed to value and two elements of G: (P, α,
R, 0, c) ∈ RB ⇔ R := ασ · P, where σ is equal to
a value committed to in the commitment cm; and
2) that a multiplicative relationship holds between three
elements of G: (P, α,R, 1, c) ∈ RB ⇔ R := ασ·P,
where σ := logG c.
When G is a duplex pairing group, the proof for a
statement of the second kind is empty as anyone can
verify the statement by checking e(αP, c) = e(R,G).
To efﬁciently prove the statements of the ﬁrst kind,
we slightly modify the construction of Lemma IV.3.
We insert an additional round after the ﬁrst round
(in which all parties commit to their inputs). In this
additional round each party, for each of its inputs
x samples a random generator P of G, computes
R := x · P and outputs (P,R). Moreover, the party
outputs a NIZK proof-of-knowledge that the implicitly
deﬁned ˆx := logP R is indeed consistent with the
corresponding commitment cm, i.e. cm for x decommits
to logP R. Call the corresponding relation Raux. Note
that, publishing such encodings (P, x · P) of inputs x
does not break conﬁdentiality: a pair (Q, x·Q) (for some
Q) is necessarily output every time an input x is used
in a multiplication gate. By a hybrid argument, having
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
The NP relation RA. An instance-witness pair (x, w) is in
RA if and only if COMM.Ver(σ, cm, cr) = 1, when parsing
x as a commitment cm and w as a tuple (σ, cr) for which
σ ∈ Fr and cr is commitment randomness.
The NP relation RB. An instance-witness pair (x, w) is in
RB if and only if all the following checks pass.
1) Parse x as tuple (R,P, α, b, c) and w as a tuple (σ, cr).
2) Check that the G-element R equals the G-element ασ · P.
3) If b = 0, check that COMM.Ver(σ, c, cr) = 1; if b = 1,
check that the G-element c equals the G-element σ ·G (and
ignore cr).
Fig. 4: Description of the two NP relations RA and RB.
polynomially many such pairs is as helpful as having
just one. Equipped with such encodings checking RB
can be done just via pairing evaluations.
Finally, a NIZK proof for relation Raux is obtained by
combining the Σ-protocol for knowledge of a Pedersen
commitment, and Schnorr’s Σ-protocol for knowledge
of discrete logarithm in equality composition [70]. As
above, we make the resulting Σ-protocol non-interactive
by applying Fiat–Shamir heuristic.
VI. IMPLEMENTATION
→ Fh
Our system. We built a system that implements our
constructions. Given a prime r, an order-r duplex-
pairing group G = (cid:3)G(cid:4), and an Fr-arithmetic circuit
r in the class CS, our system provides a
C : Fm
multi-party protocol for securely sampling C((cid:4)α) · G for
r
random (cid:4)α in Fm
r . Speciﬁcally, the system implements the
constructions underlying Section IV’s theorems, in the
case when G is a duplex-pairing group. (As discussed
in Section V, if G is duplex-pairing, one can instantiate
commitment schemes and NIZKs very efﬁciently.)
Application to zk-SNARKs via integration with
libsnark.
The parameter generator of many
zk-SNARK constructions works as follows: evaluate
a certain circuit C at a random input (cid:4)α, and then
output pp := C((cid:4)α) · G as the proof system’s public
parameters. (See discussion in Section I-A.) Thus, our
system can be used to securely sample public parameters
of a zk-SNARK, provided that the circuit used in its
generator belongs to the circuit class CS. To facilitate
this application, we have integrated our code with
libsnark [45], a C++ library for zk-SNARKs. (In
particular, pp can be used directly by libsnark.)
Two zk-SNARK constructions. We worked out cir-
cuits for parameter generation for two (preprocessing)
zk-SNARK constructions: the one of [21], [25] and the
one of [31]. The ﬁrst zk-SNARK “natively” supports
proving satisﬁability of arithmetic circuits, while the
second zk-SNARK that of boolean circuits.
Speciﬁcally, we wrote code that lays out a circuit
CPGHR ∈ CS that can be used to generate public
parameters for [21], [25]’s zk-SNARK; likewise for
laying out a circuit CDFGK ∈ CS for [31]’s zk-SNARK.
We have invoked our system on both and demonstrated
the secure sampling of respective public parameters.
A critical issue is that CPGHR and CDFGK have size
quasilinear in the circuit whose satisﬁability is being
proved. A naive implementation of the computation
pattern of the zk-SNARK’s generator results in circuits
that are not in CS; conversely, a naive implementation
in CS results in circuits of quadratic size. Via careful
design, quasilinear-size circuits in CS can be obtained.
VII. EVALUATION
We describe the evaluation of our system, which
provides a multi-party protocol for securely sampling
C((cid:4)α) · G, where (cid:4)α is random, for circuits C that belong
to the circuit class CS (see Section VI).
Setup. We evaluated our system on a desktop PC with
a 3.40 GHz Intel Core i7-4770 CPU and 16 GB of
RAM available. All experiments are in single-thread
mode (though our code also supports multiple-thread
mode). When invoking functionality from libsnark
(with which our code is integrated), we selected the
build option CURVE=BN128, which means that group
arithmetic is conducted over a certain Barreto–Naehrig
curve [71] at 128 bits of security.
Costs for the general case. Our system’s efﬁciency
only depends on the size and S-depth of the circuit C
in CS, and also n (the number of participating parties).
In Figure 6 we report approximate costs for several
complexity measures: the number of rounds, each party’s
time complexity, the number of broadcast messages, the
transcript size, and the transcript veriﬁcation time.
Costs for two zk-SNARK constructions. When ap-
plying our system to generate public parameters for a
zk-SNARK, the circuit C is designed so that C((cid:4)α) · G
(for random (cid:4)α) equals the zk-SNARK’s generator output
distribution. This distribution depends on the particular
NP relation given as input to the generator; thus, the
circuit C also depends on this NP relation. Moreover,
different zk-SNARK constructions “natively” support
different classes of NP relations.
In order to shed light on our system’s efﬁciency when
applied to generate zk-SNARK public parameters, we
report the size and S-depth of the circuit C as a function
of the input NP relation, relative to two zk-SNARK
constructions.
• The zk-SNARK [31]. This zk-SNARK supports
300300
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)log2 Ng(cid:3)
boolean circuit satisﬁability: the generator receives as
input a boolean circuit D, and outputs public parame-
ters for proving D’s satisﬁability. If D has Nw wires
and Ng gates, our code outputs a corresponding circuit
((cid:6)log2 Ng(cid:7) +
C := CDFGK with size 2Nw + 2
1) + 10 and S-depth 2.
• The zk-SNARK of [21], [25]. This zk-SNARK supports
arithmetic circuit satisﬁability: the generator receives
as input an arithmetic circuit D, and outputs public
parameters for proving D’s satisﬁability. If D has Nw
wires and Ng gates, our code outputs a circuit C :=
((cid:6)log2 Ng(cid:7)+1)+38
CPGHR with size 11Nw +2
and S-depth 3.
(cid:2)log2 Ng(cid:3)
These costs are summarized in Figure 5 .
Costs for two concrete examples. We report costs for
the following concrete choices of a circuit C := CPGHR.
• Example #1: the circuit C targets Zerocash [8].
Namely, C((cid:4)α) · G (for random (cid:4)α) equals the output
distribution of the generator of the preprocessing
zk-SNARK on which Zerocash is based.
• Example #2:
the circuit C targets the scalable
zk-SNARK of [39]. Namely, C((cid:4)α) · G (for random
(cid:4)α) equals the output distribution of the generator used
to set up the scalable zk-SNARK.
Figure 5 reports the size and S-depth of C for these two
examples, and Figure 6 reports the corresponding costs.
VIII. CONCLUSION
it
Like time and space, trust is also a costly resource.
To facilitate the deployment of NIZKs and, in particular,
zk-SNARKs in various applications,
is not only
important to minimize the time and space requirements of
proving and veriﬁcation, but also the trust requirements of
parameter generation. The system that we have presented
in this paper can be used to reduce the trust requirements
of parameter generation for a class of zk-SNARKs: the
system provides a multi-party broadcast protocol in
which only one honest party, out of n participating ones,
is required to securely sample the public parameters.
Integration of our system with libsnark greatly
facilitates this application. As a demonstration, we have
used our system for securely sampling public parameters
for the zk-SNARKs of [21], [25], [31].
ACKNOWLEDGMENTS
We thank Bryan Parno and the anonymous referees
for numerous comments on an earlier draft that greatly
improved the clarity of this paper.
This work was supported by: The Air Force Research
Laboratory (AFRL) under contract FA8750-11-2-0211;
the Broadcom Foundation and Tel Aviv University
the Center for Science of
Authentication Initiative;
Information (CSoI), an NSF Science and Technology
Center, under grant agreement CCF-0939370; the Check
Point Institute for Information Security; the U.S. Defense
Advanced Research Projects Agency (DARPA) and the
Air Force Research Laboratory (AFRL) under contract
FA8750-11-2-0211; the European Community’s Seventh
Framework Programme (FP7/2007-2013) under grant
agreement number 240258; the Israeli Centers of Re-
search Excellence I-CORE program (center 4/11); the
Israeli Ministry of Science and Technology; the Leona
M. & Harry B. Helmsley Charitable Trust; MIT Ofﬁce
of the Provost; The National Science Foundation under
award EFRI-1441209; and the Ofﬁce of Naval Research
under contract N00014-11-1-0470.
APPENDIX A
EXAMPLES OF CIRCUITS UNDERLYING GENERATORS
As discussed in Section I-A, the generator G of es-
sentially all known (preprocessing) zk-SNARK construc-
tions follows the same computation pattern. To generate
the public parameters pp for a given NP relation R, G
→ Fh
ﬁrst constructs an Fr-arithmetic circuit C : Fm
r
r
(which is somehow related to R), then samples (cid:4)α in
r at random, and ﬁnally outputs pp := C((cid:4)α) · G
Fm
(where G generates a certain group of order r). Different
zk-SNARK constructions differ in (i) which NP relations
R are “natively” supported, and (ii) how the circuit C
is obtained from R.
Below, we give two examples of how the generator
of a known zk-SNARK construction can be cast in the
above paradigm and, moreover, the resulting circuit C
lies in the class CS. Throughout, we denote by F[z] the
≤d[z]
ring of univariate polynomials over F, and by F
the subring of polynomials of degree ≤ d.
A. Example for a QAP-based zk-SNARK
× Fh
the generator of
We describe how to cast
[21]’s
zk-SNARK as computing the encoding of a random
evaluation of a circuit C that lies in CS. More precisely,
we consider [25]’s zk-SNARK, which modiﬁes [21]’s.
Supported NP relations. This zk-SNARK supports
arithmetic circuit satisﬁability, i.e., relations of the form
r : D((cid:4)x, (cid:4)w) = 0(cid:5)} where
RD = {((cid:4)x, (cid:4)w) ∈ Fn
D : Fn
r
QAPs. The construction is based on quadratic arith-
metic programs (QAP) [20]: a QAP of size m and degree
d over F is a tuple ( (cid:4)A, (cid:4)B, (cid:4)C, Z), where (cid:4)A, (cid:4)B, (cid:4)C are
≤d−1[z],
three vectors, each of m + 1 polynomials in F
and Z ∈ F[z] has degree exactly d. As shown in [20],
each relation RD can be reduced to a certain relation
R
( (cid:6)A, (cid:6)B, (cid:6)C,Z), which captures “QAP satisﬁability”, by
r is an Fr-arithmetic circuit.
→ F(cid:5)
r
× Fh
r
301301
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:37 UTC from IEEE Xplore.  Restrictions apply. 
zk-SNARK
Circuit satisﬁability of D when D is
Danezis et al. [31]
Parno et al. [21], Ben-Sasson et al. [25]
Ben-Sasson et al. [8]
Ben-Sasson et al. [39]
a Nw-wire Ng-gate boolean circuit
a Nw-wire Ng-gate arithmetic circuit
Example #1’s arithmetic circuit
Example #2’s arithmetic circuit
2Nw + 2
11Nw + 2
(cid:3)log2 Ng(cid:4)
(cid:3)log2 Ng(cid:4)
Circuit C in CS
size(C)
((cid:3)log2
((cid:3)log2
Ng(cid:4) + 1) + 10
Ng(cid:4) + 1) + 38
138,467,206
8,027,609
depthS(C)
2
3
3
6
Fig. 5: Size and S-depth of the circuit C in CS obtained from D, for various choices of D.
Complexity measure
number of rounds
each party’s time complexity
number of broadcast messages
transcript size
transcript veriﬁcation time
general case
n · depthS(C) + 3