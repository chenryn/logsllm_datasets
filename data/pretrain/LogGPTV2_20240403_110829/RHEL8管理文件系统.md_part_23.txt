  `noauto`{.literal}    默认行为是禁用使用 `mount -a`{.literal} 命令自动挂载文件系统。
  `noexec`{.literal}    不允许在特定文件系统中执行二进制文件。
  `nouser`{.literal}    不允许普通用户（即 root 用户）挂载和卸载文件系统。
  `remount`{.literal}   如果已经挂载文件系统，则会重新挂载文件系统。
  `ro`{.literal}        仅挂载文件系统以读取。
  `rw`{.literal}        挂载文件系统以进行读和写操作。
  `user`{.literal}      允许普通用户（即 root 用户）挂载和卸载该文件系统。
:::
:::
:::
:::
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html}
::: chapter
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#sharing-a-mount-on-multiple-mount-points_managing-file-systems}第 15 章 在多个挂载点共享挂载 {.title}
:::
作为系统管理员，您可以重复挂载点以便从多个目录中访问文件系统。
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#types-of-shared-mounts_sharing-a-mount-on-multiple-mount-points}共享挂载的类型 {.title}
:::
您可以使用多种共享挂载。当您在共享挂载点挂载另一个文件系统时，这两种文件系统之间的区别就是这种情况。共享挂载使用[*共享子树*]{.emphasis}功能实现。
可用的挂载类型如下：
::: variablelist
[`private`{.literal}]{.term}
:   这个类型不接收或转发任何传播事件。
    当您在重复或者原始挂载点下挂载另一个文件系统时，不会反映在另一个文件系统中。
[`共享`{.literal}]{.term}
:   这个类型会为给定挂载点创建准确的副本。
    当挂载点标记为 `共享`{.literal}
    挂载时，原始挂载点中的任何挂载都会反映在其中，反之亦然。
    这是 root 文件系统的默认挂载类型。
[`slave`{.literal}]{.term}
:   此类型会创建给定挂载点的有限重复。
    当挂载点标记为 `从`{.literal}
    挂载时，原始挂载点中的任何挂载都会反映在该挂载点中，但
    `从属`{.literal} 挂载中没有反映在其原始挂载点中。
[`unbindable`{.literal}]{.term}
:   这个类型可防止给定挂载点重复。
:::
::: itemizedlist
**其它资源**
-   [Linux Weekly News 上的 [*共享子树*]{.emphasis}
    文章](https://lwn.net/Articles/159077/){.link}。
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#creating-a-private-mount-point-duplicate_sharing-a-mount-on-multiple-mount-points}创建私有挂载点重复 {.title}
:::
这个过程将挂载点复制为私有挂载。您稍后挂载到重复或原始挂载点下的文件系统不会反映在另一个文件系统中。
::: orderedlist
**流程**
1.  从原始挂载点创建虚拟文件系统(VFS)节点：
    ``` screen
    # mount --bind original-dir original-dir
    ```
2.  将原始挂载点标记为私有：
    ``` screen
    # mount --make-private original-dir
    ```
    或者，要更改所选挂载点和其下的所有挂载点的挂载点类型，请使用
    `--make-rprivate`{.literal} 选项而不是 `--make-private`{.literal}
    选项。
3.  创建副本：
    ``` screen
    # mount --bind original-dir duplicate-dir
    ```
:::
::: example
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#idm139716097901056}
**例 15.1. 将 /media 复制到 /mnt 作为专用挂载点**
::: example-contents
::: orderedlist
1.  从 `/media`{.literal} 目录中创建 VFS 节点：
    ``` screen
    # mount --bind /media /media
    ```
2.  将 `/media`{.literal} 目录标记为私有：
    ``` screen
    # mount --make-private /media
    ```
3.  在 `/mnt 中创建副本`{.literal} ：
    ``` screen
    # mount --bind /media /mnt
    ```
4.  现在，可以验证 `/media`{.literal} 和 `/mnt`{.literal} 共享内容，/
    `mnt`{.literal} 中的 `/media`{.literal} 中没有挂载内容。例如，如果
    CD-ROM 驱动器包含非空介质和 `/media/cdrom/`{.literal} 目录，请使用：
    ``` screen
    # mount /dev/cdrom /media/cdrom
    # ls /media/cdrom
    EFI  GPL  isolinux  LiveOS
    # ls /mnt/cdrom
    #
    ```
5.  还可以验证 `/mnt`{.literal} 目录中挂载的文件系统没有反映在
    `/media`{.literal} 中。例如，如果插入了使用 `/dev/sdc1`{.literal}
    设备的非空 USB 闪存驱动器，且 `/mnt/flashdisk/`{.literal}
    目录存在，请使用：
    ``` screen
    # mount /dev/sdc1 /mnt/flashdisk
    # ls /media/flashdisk
    # ls /mnt/flashdisk
    en-US  publican.cfg
    ```
:::
:::
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#creating-a-shared-mount-point-duplicate_sharing-a-mount-on-multiple-mount-points}创建共享挂载点重复 {.title}
:::
这个过程将挂载点复制为共享挂载。您稍后挂载到原始目录或重复目录下的文件系统始终反映在另一个目录下。
::: orderedlist
**流程**
1.  从原始挂载点创建虚拟文件系统(VFS)节点：
    ``` screen
    # mount --bind original-dir original-dir
    ```
2.  将原始挂载点标记为共享：
    ``` screen
    # mount --make-shared original-dir
    ```
    或者，要更改所选挂载点和其下的所有挂载点的挂载类型，请使用
    `--make-rshared`{.literal} 选项而不是 `--make-shared`{.literal}。
3.  创建副本：
    ``` screen
    # mount --bind original-dir duplicate-dir
    ```
:::
::: example
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#idm139716109175376}
**例 15.2. 将 /media 重复到 /mnt 作为共享挂载点**
::: example-contents
要使 `/media`{.literal} 和 `/mnt`{.literal} 目录共享相同的内容：
::: orderedlist
1.  从 `/media`{.literal} 目录中创建 VFS 节点：
    ``` screen
    # mount --bind /media /media
    ```
2.  将 `/media`{.literal} 目录标记为共享：
    ``` screen
    # mount --make-shared /media
    ```
3.  在 `/mnt 中创建副本`{.literal} ：
    ``` screen
    # mount --bind /media /mnt
    ```
4.  现在，可以验证 `/media`{.literal} 中的挂载是否也出现在
    `/mnt`{.literal} 中。例如，如果 CD-ROM 驱动器包含非空介质和
    `/media/cdrom/`{.literal} 目录，请使用：
    ``` screen
    # mount /dev/cdrom /media/cdrom
    # ls /media/cdrom
    EFI  GPL  isolinux  LiveOS
    # ls /mnt/cdrom
    EFI  GPL  isolinux  LiveOS
    ```
5.  同样，还可以验证 `/mnt`{.literal} 目录中挂载的任何文件系统是否反映在
    `/media`{.literal} 中。例如，如果插入了使用 `/dev/sdc1`{.literal}
    设备的非空 USB 闪存驱动器，且 `/mnt/flashdisk/`{.literal}
    目录存在，请使用：
    ``` screen
    # mount /dev/sdc1 /mnt/flashdisk
    # ls /media/flashdisk
    en-US  publican.cfg
    # ls /mnt/flashdisk
    en-US  publican.cfg
    ```
:::
:::
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#creating-a-slave-mount-point-duplicate_sharing-a-mount-on-multiple-mount-points}创建从挂载点重复 {.title}
:::
这个过程复制挂载点作为 `从属`{.literal}
挂载类型。您稍后挂载到原始挂载点中的文件系统将以重复方式反映，而不是以相反的方式反映。
::: orderedlist
**流程**
1.  从原始挂载点创建虚拟文件系统(VFS)节点：
    ``` screen
    # mount --bind original-dir original-dir
    ```
2.  将原始挂载点标记为共享：
    ``` screen
    # mount --make-shared original-dir
    ```
    或者，要更改所选挂载点和其下的所有挂载点的挂载类型，请使用
    `--make-rshared`{.literal} 选项而不是 `--make-shared`{.literal}。
3.  创建副本并将其标记为 `slave`{.literal} 类型：
    ``` screen
    # mount --bind original-dir duplicate-dir
    # mount --make-slave duplicate-dir
    ```
:::
::: example
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#idm139716098242944}
**例 15.3. 将 /media 复制到 /mnt 作为从挂载点**
::: example-contents
这个示例演示了如何使 `/media 目录的内容也出现在 /`{.literal}
`mnt`{.literal} 中，但 / `mnt`{.literal} 目录中的任何挂载都不出现在
`/media`{.literal} 中。
::: orderedlist
1.  从 `/media`{.literal} 目录中创建 VFS 节点：
    ``` screen
    # mount --bind /media /media
    ```
2.  将 `/media`{.literal} 目录标记为共享：
    ``` screen
    # mount --make-shared /media
    ```
3.  在 `/mnt 中创建副本`{.literal} 并将其标记为 `从设备`{.literal} ：
    ``` screen
    # mount --bind /media /mnt
    # mount --make-slave /mnt
    ```
4.  验证 / `mnt 中是否也出现 /media`{.literal} 中的``{=html}
    挂载。例如，如果 CD-ROM 驱动器包含非空介质和
    `/media/cdrom/`{.literal} 目录，请使用：
    ``` screen
    # mount /dev/cdrom /media/cdrom
    # ls /media/cdrom
    EFI  GPL  isolinux  LiveOS
    # ls /mnt/cdrom
    EFI  GPL  isolinux  LiveOS
    ```
5.  同时还要验证 `/mnt`{.literal} 目录中挂载的文件系统没有反映在
    `/media`{.literal} 中。例如，如果插入了使用 `/dev/sdc1`{.literal}
    设备的非空 USB 闪存驱动器，且 `/mnt/flashdisk/`{.literal}
    目录存在，请使用：
    ``` screen
    # mount /dev/sdc1 /mnt/flashdisk
    # ls /media/flashdisk
    # ls /mnt/flashdisk
    en-US  publican.cfg
    ```
:::
:::
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#preventing-a-mount-point-from-being-duplicated_sharing-a-mount-on-multiple-mount-points}防止挂载点重复 {.title}
:::
这个过程将挂载点标记为不可绑定，因此无法在另一个挂载点中复制挂载点。
::: itemizedlist
**流程**
-   要将挂载点的类型改为不可绑定的挂载，请使用：
    ``` screen
    # mount --bind mount-point mount-point
    # mount --make-unbindable mount-point
    ```
    或者，要更改所选挂载点和其下的所有挂载点的挂载类型，请使用
    `--make-runbindable`{.literal} 选项而不是
    `--make-unbindable`{.literal} 选项。