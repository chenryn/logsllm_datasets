I-ZK-∃
Γ (cid:96)ZK S{u/x}
Γ (cid:96)ZK ∃x. S
I-ZK-∧
Γ (cid:96)ZK ∃(cid:101)x. S1
Γ (cid:96)ZK ∃(cid:101)y. S2
Γ (cid:96)ZK ∃(cid:101)x,(cid:101)y. S1 ∧ S2
(cid:101)x ∩(cid:101)y = ∅
I-S-∧
Γ (cid:96)S S1
Γ (cid:96)S S2
Γ (cid:96)S S1 ∧ S2
Γ (cid:96)S S1
I-S-∨-1
Γ (cid:96)S S1 ∨ S2
Γ (cid:96)S S2
I-S-∨-2
Γ (cid:96)S S1 ∨ S2
E-ZK-∧-1
Γ (cid:96)ZK ∃(cid:101)x. S1 ∧ S2
Γ (cid:96)ZK ∃(cid:101)x. S1
E-ZK-∧-2
Γ (cid:96)ZK ∃(cid:101)x. S1 ∧ S2
Γ (cid:96)ZK ∃(cid:101)x. S2
and I-S-∨-2) form. Notice that logical conjunctions reveal
more information than each of the two individual conjuncts,
while logical disjunctions reveal less information in that it is
not possible to determine which of the two disjuncts holds
true.
The statements proved by the judgment Γ (cid:96)ZK S build
on the aforementioned statements (I-ZK-S) and on the
statements of the zero-knowledge proofs in Γ (I-ZK-VER).
Such statements can be reﬁned by existential quantiﬁca-
tion (I-ZK-∃) and conjunction elimination (E-ZK-∧-1 and
E-ZK-∧-2) to hide information. It is also possible to com-
bine the statements of two zero-knowledge proofs in con-
junctive form (I-ZK-∧).
Notice that logical disjunctions are introduced by judg-
ment Γ (cid:96)S S and not by judgment Γ (cid:96)ZK S, since we are
not aware of efﬁcient cryptographic constructions that allow
the prover to create a zero-knowledge proof of S ∨ S(cid:48) from
a zero-knowledge proof of S.
Example
the
us
example
=
sig(Stud(vkid , cs, grd ))Uni, M2 = sig(Acc(lab))id,
versig(M1, vkUni , Stud(vkid , cs, grd )),
V1
V2 = versig(M2, vkid , Acc(lab)), and Γ = M1, M2.
The creation of the zero-knowledge proof of statement (3)
is speciﬁed in Table 3.
Example 2. It is worth to mention that I-ZK-∃ may also
be used to hide equality relations among secret values:
for instance, one can derive ∃x, y. A says p(x, y) from
∃x. A says p(x, x).
1.
Let
from §
again
let M1
consider
2.1.
We
=
2.4. Validity of Zero-Knowledge Statements
It is interesting to observe that not all zero-knowledge
statements are meaningful. For instance, suppose that a
principal receives a zero-knowledge proof of the following
statement:
∃ys, yI . versig(ys, yI , Stud(vkid , cs, grd ))
(4)
We would be tempted to let
this principal entail
∃yI . yI says Stud(vkid , cs, grd ). This zero-knowledge
proof, however, does not reveal the identity of the person
issuing the signature, nor is there any evidence that this
person is a principal of the system.
In fact, this zero-
knowledge proof might have been constructed by an at-
tacker, using a fresh key-pair and, therefore, the formula
∃yI . yI says Stud(vkid , cs, grd ) is not necessarily entailed
by the formulas proved by the principals of the system. No-
tice that we assume that the principals of the system are
honest, i.e., they issue signatures to witness the validity of
the corresponding logical predicates. We cannot, of course,
assume the same for the attacker.
We stipulate that principals only sign veriﬁcation keys
that belong to principals of the system (as opposed to at-
tacker’s keys).3 We call these keys trustworthy. Checking
whether a veriﬁcation key that occurs in a zero-knowledge
proof is trustworthy is subtle. The idea is that a key is con-
sidered trustworthy if either it is revealed by the proof and
known to belong to a principal of the system, or, recursively,
it is endorsed by a trustworthy key. For instance, the state-
ment (4) does not guarantee that the existentially quantiﬁed
veriﬁcation key yI is trustworthy. Conversely, the veriﬁ-
cation key xid that is existentially quantiﬁed in the state-
ment (3) is signed by Uni and, therefore, is trustworthy.
Hence, this statement justiﬁes formula (2).
In other words, a statement is well-formed if it ensures
that all veriﬁcation keys are trustworthy. Despite the sim-
plicity of this intuition, the formal deﬁnition has to take into
account a number of complications, including the presence
of logical disjunctions in the statement. For instance, the
statement ∃ys, yI . versig(ys, yI , F ) ∨ versig(ys, vkUni , F )
is not well-formed, since we do not know which of the two
disjuncts holds true. The idea is to transform a statement
3We assume a public-key infrastructure that binds public keys to their
owner in a publicly-veriﬁable manner. Such a PKI may be centralized
(e.g., Verisign) or decentralized (e.g., Webs of Trust). In the example from
§ 2.1, the university serves as a (centralized) PKI.
Table 3 Deduction of the zero-knoweldge proof for Example 1.
V1
M1 ∈ Γ
Γ (cid:96)S V1
Γ (cid:96)ZK V1
TZK :=
M2 ∈ Γ
I-S-VER
I-ZK-S
Γ (cid:96)ZK V1 ∧ V2
Γ (cid:96)S V2
Γ (cid:96)ZK V2
V2
I-S-VER
I-ZK-S
I-ZK-∧
Γ (cid:96)ZK ∃x1, x2, xid , xgrd . versig(x1, vkUni , Stud(xid , cs, xgrd )) ∧ versig(x2, xid , Acc(lab))
I-ZK-∃ (X4)
Table 4 Veriﬁcation rules.
VER-SIG
M ∈ Γ
versig(M, vk A, F )
Γ (cid:96) vk A says F
VER-ZK
M ∈ Γ
verzk(M, S)
Γ (cid:96) [S]zk
S well-formed
in disjunctive form and then to check that all keys in each
sequence of conjunctions are registered. We formalize the
notion of trustworthiness for keys below. Here and through-
out this paper, we write(cid:101)u to denote the sequence u1, . . . , u(cid:96)
thy in a monomial M =(cid:86)m
for some (cid:96).
Deﬁnition 1 (Trustworthiness of keys). A key u is trustwor-
i=1 api iff one of the following
conditions holds:
• u = vk is registered
• there exists apj = versig(us, uk, F ) such that u is a
variable occurring free in F and uk is trustworthy in
M
in disjunctive form iff S = ∃(cid:101)x. (cid:87)m
(cid:86)n
Deﬁnition 2 (Disjunctive form). We say a statement S is
i=1 Mi, where Mi =
j=1 apj.
It is clear that each statement can be rewritten in disjunc-
tive form. In the following, we assume a disjunctive normal
form4 for each statement S, written as dnf (S).
Deﬁnition 3 (Well-formedness of statements). A mono-
i=1 api is well-formed iff for every api =
versig(us, uk, F ), uk is trustworthy in M.
i=1 Mi is well-
formed if each Mi is well-formed.
mial M = (cid:86)m
A statement S such that dnf (S) = ∃(cid:101)x.(cid:87)m
We are now ready to characterize the logical formu-
las that are justiﬁed by the digital signatures and zero-
knowledge proofs in Γ, as formalized in Table 4. The rules
4The disjunctive normal form can be obtained, for instance, by lexico-
graphical order.
are self-explanatory: we just point out that the statements
of zero-knowledge proofs are required to be well-formed.
3. Speciﬁcation Language: Privacy-aware Evi-
dential DKAL
The Distributed Knowledge Authorization Language
(DKAL) [41, 42] is a logic-based language for modeling
and analyzing decentralized polices. A distinctive feature of
DKAL is the possibility to explicitly describe the exchange
of information among principals. Recently, Blass et al. in-
troduced Evidential DKAL [7], an extension of DKAL in
which the formulas exchanged by principals are justiﬁed by
digital signatures, which allows for more expressive logical
derivations.
In this section, we extend Evidential DKAL
with existential quantiﬁcation, in order to express privacy
constraints, and with zero-knowledge proofs, in order to
justify logical formulas in which sensitive values are exis-
tentially quantiﬁed.
3.1. Overview of Evidential DKAL
Authorization languages such as PCA or SecPAL [19]
often rely on fragments of ﬁrst-order or higher-order logic
to describe and enforce authorization policies. The logic
underlying DKAL, called infon logic, is fundamentally dif-
ferent: instead of dealing with the validity of statements,
this logic focuses on the notion of information. A state-
ment represents a piece of information, as opposed to a truth
value, that a speciﬁc principal has obtained, and access con-
trol is decided by deriving certain information, as opposed
to proving a formula valid.
Table 5 reports some fundamental rules of Evidential
DKAL. Here and throughout this paper, we let Γ denote a
set of pieces of information, i.e., logical formulas and cryp-
tographic messages. ENSUE says that if A knows Γ, then
A knows also the information derivable from Γ. The initial
knowledge of principal A is given in terms of knowledge
assertions of the form A : F , which can be seen as axioms
in the system. Rule P-A says that given the knowledge as-
sertion A : F , A knows F . For easing the presentation,
we deviate from the original presentation [7], which does
Table 5 Selection of rules from Evidential DKAL.
Table 6 Core Rules of Privacy-aware Evidential DKAL.
ENSUE
A knows Γ
Γ (cid:96) F
A knows F
COMM-J
P-A
A : F
P-S
A : vkA says F
versig(M, vk A, F )
A knows F
A knows M
P-ZK
A knows Γ
Γ (cid:96)ZK S
A knows M
verzk(M, S)
if FB then B sends F to p
if FA then A receives F
(cid:48) from q
B knows FB η
p η = A
B knows M
q θ = B
[M ] = F
A knows FA θ
θ = F
F
(cid:48)
A knows M
not precisely specify how principals acquire the knowledge
of signatures. We introduce rule P-S to express that given
the knowledge assertion A : A says F , A can produce a
self-generated signature M on F .
Example 3. Let us consider the example from § 2.1. The
generation of student certiﬁcates is modeled by knowledge
assertions of the form
Uni : vkUni says Stud(vkid , cs, grd )
(5)
One can derive Uni knows Stud(vkid , cs, grd ) by P-A and
Uni knows M by P-S, where M is a signature issued by
Uni on Stud(vkid , cs, grd ).
The communication rule COMM-J describes the ex-
change of cryptographic messages that justify (i.e., pro-
vide evidence of) a certain statement. This rule is used
to synchronize a communication assertion of the form
if FB then B sends F to p with a communication asser-
tion of the form if FA then A receives F (cid:48) from q. In or-
der to ﬁre this rule, B must know FAη and A must know
FBθ, for some substitutions η and θ mapping variables5
to messages in the knowledge of A and B, respectively.
Furthermore, conditional guards may be omitted, obtaining
communication assertions of the form A sends F to B and
A receives F from B. In order to ﬁre COMM-J, we addi-
tionally require the sender and the receiver to coincide on
both sides, i.e., p η = A and q θ = B. Finally, B must
know a cryptographic evidence M for the statement F sent
to A and the statement F (cid:48) expected from A has to be uniﬁ-
able with F by substitution θ. Once COMM-J is ﬁred, A
knows the cryptographic evidence M of F .
Example 4. The issue of student certiﬁcates can be speci-
ﬁed via the following assertions:
Uni sends vkUni says Stud(vkid , cs, grd ) to id
id receives vkUni says Stud(vkid , cs, y) from Uni
5The variables occurring in communication assertions are implicitly
(6)
(7)
universally quantiﬁed.
COMM-A
if FB then ? sends F to p
if FA then A receives F
(cid:48) from ?
B knows FB η
p η = A
B knows M
[M ] = F
A knows FA θ
(cid:48)
θ = F
F
A knows M
The intended communication protocols is modeled by the
DKAL derivation below (for the sake of readability, we omit
some trivial hypotheses and use the abbreviations deﬁned in
Example 1):
(5)
V1
TC := (6)
(7)
Uni knows M1
id knows M1
P-S
COMM-J
We ﬁnally derive id knows vkUni says Stud(vkid , cs, grd )
as follows:
TS := TC
V1
M1 (cid:96) vkUni says Stud(vkid , cs, grd )
id knows vkUni says Stud(vkid , cs, grd )
VER-SIG
ENSUE
3.2. Privacy-Aware Evidential DKAL
Evidential DKAL does not feature any mechanism to en-
force the privacy of sensitive information. We solve this
problem by integrating our zero-knowledge deduction sys-
tem and by reﬁning the syntax of statements in order to sup-
port existential quantiﬁcation.
Formally, we extend evidential DKAL with the rules
from Table 2, Table 4, and Table 6. P-ZK bridges between
DKAL and the zero-knowledge deduction system, bringing
the zero-knowledge proofs derived by A into A’s knowl-
edge. COMM-A is a variant of COMM-J that is introduced
for modeling anonymous communication: In this variant,
the identity of the sender is replaced by the special symbol
‘?’ and is not known to the receiver.
Example 5. We describe the anonymous entrance
to the laboratory by means of
the following asser-
tions, where AS denotes the access control system:
id : vkid says Acc(lab)
(8)
? sends (2) to AS (9)
AS receives (2) from ? (10)
Table 7 Derivation tree modeling the communication protocol from Example 5
TC
(8)
V2
id knows M2
id knows M1, M2
P-S
MSG-∪
(9)
(10)
TA :=
id knows MZK
AS knows MZK
verzk(MZK, (3))
TZK
P-ZK
COMM-A
The communication protocol is modeled by the derivation
tree displayed in Table 7.
The student creates the zero-knowledge proof of state-
ment (3) using the signature M1 received from the uni-
versity and the signature M2 from the knowledge asser-
tion (8) as witnesses. Using ENSUE, we can eventu-
ally derive AS knows ∃x, y. Uni says Stud(x, cs, y) ∧
x says Acc(lab).
4. Compiler
We developed a compiler C[·] : Tdkal → CF# that takes as
input the Privacy-aware Evidential DKAL derivation cap-
turing the intended system behavior and produces the F#
executable code for each of the principals in the system. In
this section, we overview the algorithm and state the sound-
ness results.
Intuitively, the compiler builds on a translation function
T : Rdkal → CF# from DKAL rules to F# code. Each
rule of the zero-knowledge deduction system (cf. Table 2)
is translated into a sequence of calls to functions of the
zero-knowledge library. Communication rules (namely,
COMM-J and COMM-A) are translated by extending the
current code of the sender and the receiver with the out-
put and input of the cryptographic message, respectively. In
order to protect the secrecy of exchanged information, the
communication is always encrypted with the public key of
the receiver. The code of the receiver is further extended to
verify the signature or the zero-knowledge proof received
from the network.
The compiler produces the code of each principal by
scanning the DKAL derivation top-down (i.e., from the out-
ermost hypotheses until the thesis) and, for each rule R, by
appending the code T (R) to the current code for the corre-
sponding principal.
Example 6. Let us describe the compiler in more detail by
illustrating the code produced by translating the TA deriva-
tion tree from Example 5 (cf. Table 8). The compiler gener-
ates three functions, one for each role (i.e., university, stu-
dent, and access control system). These functions are meant
to be integrated in the code of the respective application and
are consequently parameterized by a number of values, in-
cluding the cryptographic keys of the running principal, the
ones of the intended communication partners, network ad-
dresses, and so on. On the right-hand side of each line of
code, we indicate the rule application (i.e., the rule name
and the derivation tree) that has been processed by the com-
piler. For the moment, we invite the reader to ignore the
annotations between square brackets, which play a role in
the formalization of the correctness result (cf. § 5) but do
not have any computational signiﬁcance.
The TA tree is scanned top-down. The ﬁrst rule that
is processed is the application of P-S in TC, which intro-
duces the signature issued by the university on the predi-
cate Stud(vkid , cs, grd ) into the derivation tree: this rule is
translated into a call to the signature creation function in