# 十二、Docker 平台——独特的功能和用例
毫无疑问，在任何时间点，信息技术都是最具发生性和高度可见性的领域。随着每一种进取型业务(小型、中型和大型)都通过信息技术领域的可喜进步得以实现，信息技术和业务之间存在着直接和决定性的关系。由于世界经济停滞甚至下滑，信息技术预算年复一年地被商业巨头削减，这对信息技术专业人员来说是一个明确的任务和及时的提醒，以更少的资源做更多的事情。也就是说，通过有条不紊地利用成熟且有前途的技术、工具和技巧，继续坚持各种业务操作的更深更灵巧的自动化。通过混合云实现基础架构优化、通过集成和编排技术实现流程卓越、DevOps 文化的快速传播、通过虚拟化和容器化方法实现划分的基础方面、API 的渗透、普及和说服性质、MSA 的快速出现、认知分析等，正被压倒性地认可和收获为实现业务敏捷性、可负担性、适应性和自主性的主要和突出的途径。
由 Docker 支持的容器化是一种经过严格审查的机制，它具有为软件工程领域带来某些关键中断的内在力量。Docker 范例是关于任何种类的软件应用及其依赖项的最佳打包，以便在任何内部和外部环境中运送、部署和执行。与软件行业目前可用的选项相比，容器化的应用(应用及其执行容器)是极其轻量级、可移植、可扩展、可再现和可重复的包。
Docker 的想法促进了许多有目的的创新。Docker(通过其独特的打包格式和高度集成的平台)简化并加速了可公开发现、网络可访问和远程部署的容器化应用的形成，这些应用易于组装、消费和配置。此外，还有软件解决方案，可以对容器进行可靠的监控、测量和管理。在本章中，我们将讨论 Docker 范式的加速成熟和稳定性如何确保急需的业务转换。文献讨论了 Docker 技术对下一代 IT 的几个改变游戏规则的影响，这一章旨在解开 Docker 之谜。
## 描述容器
包含虚拟化和容器化的划分是信息技术敏捷性的新标准。虚拟化一直是云计算巨大成功的神秘基础。现在，随着容器化思想变得无处不在和可用，人们重新关注使用容器来加快应用的构建、部署和交付。容器与一些改变游戏规则的能力特别匹配，因此有一股拥抱和发展容器化技术和工具的热潮。
容器在业内非常热门。本质上，容器是轻量级的、虚拟化的和可移植的，并且软件可以运行的**软件定义环境** ( **SDE** )与运行在同一物理主机上的其他软件是隔离的。在容器内运行的软件通常是一个单一用途的应用。容器为 IT 环境带来了令人垂涎的模块化、可移植性和简单性。开发人员喜欢容器是因为他们加快了软件工程的速度，而运营团队喜欢容器是因为他们可以专注于运行时任务，如日志记录、监控、管理生命周期和利用资源，而不是管理部署和依赖关系。
### 区分 Docker 容器
确切地说，Docker 容器将一个软件包装在一个完整的文件系统中，该文件系统包含运行所需的一切:源代码、运行时、系统工具和系统库(任何可以安装在服务器上的东西)。这保证了软件将总是运行相同的，不管它的操作环境如何。
Docker 支持的容器化的主要动机如下:
*   在单台机器上运行的容器共享相同的操作系统内核。它们立即启动，使用更少的内存。容器映像由分层的文件系统构建，并共享公共文件，这使得磁盘使用和映像下载更加高效。
*   Docker 容器基于开放标准。这种标准化使容器能够在所有主要的 Linux 发行版和其他操作系统上运行，如微软视窗和苹果麦金塔。
Docker 容器有几个好处，如下所示:
*   **效率** : 如前所述，一台机器上可以有多个容器利用相同的内核，因此它们是轻量级的，可以立即启动，并更有效地利用内存。
*   **原生性能**:容器由于其重量轻、损耗少，保证了更高的性能。
*   **可移植性**:应用、依赖项和配置都捆绑在一个完整的文件系统中，确保应用在任何环境(虚拟机、裸机服务器、本地或远程、通用或专用机器等)中无缝工作。这种可移植性的主要优点是可以改变部署之间的运行时依赖关系(甚至编程语言)。
下图说明了如何在多个主机之间移动和交换容器:
![](img/image_12_001.png)
*   **Real-** **时间可伸缩性**:可以在几秒钟内调配任意数量的新鲜容器，以应对用户和数据负载。另一方面，当需求下降时，额外供应的容器可以被拆除。这确保了更高的吞吐量和按需容量。Docker Swarm、Kubernetes 和 Apache Mesos 等工具进一步简化了弹性缩放。
*   **高可用性**:通过使用多个容器运行，可以在应用中内置冗余。如果一个容器出现故障，幸存的对等体(提供相同的功能)将继续提供服务。通过编排，可以在相同或不同的主机上自动重新创建(重新计划)出现故障的容器，从而恢复全部容量和冗余。
*   **可操作性**:在 Docker 容器中运行的应用可以很容易地修改、更新或扩展，而不会影响主机中的其他容器。
*   **灵活性**:开发者可以自由使用自己喜欢的编程语言和开发工具。
*   **集群性**:容器可以根据需要进行特定目的的集群，并且有集成的管理平台来支持和管理集群。
*   **可组合性**:容器中托管的软件服务可以被发现、匹配和链接，以形成业务关键型、流程感知型和复合服务。
*   **安全性**:容器通过为应用提供额外的一层保护，将应用彼此隔离，并与底层基础架构隔离。
*   **可预测性**:对于不可变的映像，因为代码包含在映像中，所以映像在任何地方总是表现出相同的行为。这在部署和应用生命周期管理方面意义重大。
*   **重复性**:使用 Docker，可以构建一个映像，测试该映像，然后在生产中使用该映像。
*   **可复制性**:有了容器，很容易实例化完整应用栈和配置的相同副本。新员工、合作伙伴、支持团队和其他人可以使用这些工具进行安全的隔离实验。
## 简要介绍 Docker 平台
Linux 容器非常复杂，而且对用户不友好。意识到大量生产和流畅使用容器的过程中存在一些复杂性后，一个开源项目启动了，目标是开发一个复杂的模块化平台，该平台包括一个支持引擎，用于简化和精简各种容器的生命周期阶段。这意味着 Docker 平台被构建为自动化嵌入在轻量级、可扩展和自给自足的容器中的任何软件应用的制作、打包、运输、部署和交付。Docker 被定位为实现高性能和企业级分布式应用的最灵活和最具未来感的容器化技术。这将对信息技术行业产生灵活和决定性的影响，因为公司正在构建更小、自定义和可持续、易于管理和离散的应用，而不是分布在单个物理或虚拟服务器上的大型单片应用。简而言之，为了推动容器化运动，服务正在成为微服务。
Docker 平台支持从不同的分布式组件中艺术地组装应用，并消除了在运送代码时可能出现的任何类型的缺陷和偏差。Docker 通过大量脚本和工具，简化了软件应用的隔离，并通过在临时容器中运行它们来使它们自我维持。Docker 实现了每个应用之间以及与底层主机之间所需的分离。我们已经非常习惯于通过额外的间接层形成虚拟机，以实现必要的隔离。这种额外的层和开销消耗了大量宝贵的资源，因此是系统变慢的不想要的原因。另一方面，Docker 容器将所有资源(计算、存储和网络)共享到最佳水平，因此可以运行得更快。Docker 映像是以标准形式导出的，可以广泛共享和存储，以便生产更大更好的应用容器。简而言之，Docker 平台为各种信息技术基础设施的最佳消费、管理和可操作性奠定了令人振奋的基础。
Docker 平台是一个开源的容器化解决方案，能够智能、快速地自动将任何软件应用和服务捆绑到容器中，并加快容器化应用在任何 IT 环境(本地或远程系统、虚拟化或裸机、通用或嵌入式设备等)中的部署。容器生命周期管理任务完全由 Docker 平台负责。整个过程从为已识别的软件及其依赖项形成标准化和优化的映像开始。现在 Docker 平台采用现成的映像来形成容器化的软件。有公开的和私人的映像存储库。开发人员和运营团队可以利用它们以自动化的方式加快软件部署。
为了使 Docker 成为企业级的容器化平台，Docker 生态系统随着大量第三方产品和工具开发人员的加入而迅速发展。它有助于跳过开发环境和特定语言工具的设置和维护。相反，它专注于创建和添加新功能、修复问题和运送软件。“一次建成，随处运行”是 Docker 支持的容器化的流行口号。简而言之，Docker 平台引入了以下能力:
*   **敏捷性**:开发人员有定义环境的自由和创建应用的能力。IT 运营团队可以更快地部署应用，从而让业务超越竞争对手。
*   **可控性**:开发人员拥有从基础设施到应用的所有代码。
*   **可管理性** : IT 运营团队成员拥有标准化、安全和扩展运营环境的可管理性，同时降低组织的整体成本。
### 不断发展的 Docker 平台组件