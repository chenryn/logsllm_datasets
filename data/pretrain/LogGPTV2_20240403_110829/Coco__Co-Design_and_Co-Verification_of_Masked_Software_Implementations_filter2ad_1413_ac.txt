awareness cannot be applied and, T n+1
a . However,
in cycle n + 2, we can apply the simpliﬁcation because the
value of b is stable and, thus, T n+2
x = T n
x = {1}.
x = T n
a
.
3 Problems and Fixes in the IBEX Core
In this section, we ﬁrst describe the RISC-V IBEX core, our
target processor. We analyze the RISC-V IBEX core using
COCO to identify implementation details that prevent the
leakage-free execution of masked software implementations.
Afterwards, we propose corresponding ﬁxes, either directly in
hardware, or as a constraint for masked software implemen-
tations. The outcome of our analysis is a secured hardware
design of the IBEX core. We discuss secure options for data
memory in Section 4 and then verify the entire design in
Section 5.
When executing a masked software implementation on
IBEX, secret shares are initially stored in the register ﬁle and
the data memory. The instructions of the program work on the
shares by changing them and moving them through the CPU
and the memory system. All these actions cause potential
leakage. In order to analyze and detect these leakage sources,
we work with a comprehensive set of masked software imple-
mentations that includes (higher-order) masked AND-gates, a
second-order masked Keccak S-box, and a ﬁrst-order masked
AES S-box implementation. All test programs are written in
RISC-V assembly and then executed on the IBEX core, pro-
ducing a cycle-accurate execution trace. The execution trace
in combination with the exact storage location of the secret
shares (registers or memory locations) is then processed by
COCO, which automatically runs the veriﬁcation and reports
leakage sources by specifying the exact cycle and gate in
the netlist. We then manually inspect the gate in the netlist,
introduce the corresponding hardware ﬁxes and re-evaluate
the design until no leaks were dectected anymore.
Our analysis has revealed several leakages caused by the
IBEX core. First, COCO has conﬁrmed the typical problems
of masked software implementations that have already been
identiﬁed by previous works, such as overwriting or succes-
sively accessing shares that correspond to the same native
variable [1,3,40,46]. While ﬁxing such problems in hardware
would, in principle, be possible, it would be very costly. We
decided to accept these leakages and instead write all our
masked implementations in a way such that they fulﬁll the
following two constraints:
C1CORE Shares of the same secret must not be accessed within
two successive instructions.
C2CORE A register or memory location which contains one
share must not be overwritten with its counterpart.
However, although these design principles prevent known
leakage sources, COCO has revealed many more leakages.
In particular, it identiﬁed leakages in the register ﬁle, the
computational units (ALU, MD, and CSR) as well as in the
LSU. We now discuss all of these identiﬁed problems for the
different components of the CPU and present corresponding
solutions in hardware to prevent these leakages.
1474    30th USENIX Security Symposium
USENIX Association
ANDxab  Comb. logicRegister3.1 Targeted Processor Platform
The IBEX core3 is a free and publicly available 32-bit CPU
design that features a two stage in-order single-issue pipeline
that is divided into Instruction Fetch (IF) and Instruction De-
code/Execute (ID+EX). Its performance is roughly compara-
ble to the ARM Cortex-M0. The main components of IBEX
are the register ﬁle, the Arithmetic Logic Unit (ALU), the
Load-Store Unit (LSU), a unit for multiplications and divi-
sions (MD), the Control and Status Register (CSR) block, and
several functional units for processor control, including the
decoder and controller.
use
IBEX core
For our analayis we
commit
863fb56eb166d. We conﬁgure IBEX to use the RV32I
instruction set and the C (compressed instructions), M
(multiplication/division) and Zicsr (control and status
register) extensions. Other features like physical memory
protection and the instruction cache are disabled.
We select IBEX as the target core because it has a relatively
simple microarchitecture, which makes it easy to demonstrate
COCO and explain the hardware ﬁxes. Although the core
complexity is rather low, it still contains the most important
components which are part of every modern processor, for
example the register ﬁle. Additionally, the IBEX core has
gained a lot of attention recently as beging part of the PULP
Platform [17] and the OpenTitan project [30].
However, we want to stress that COCO can be used to an-
alyze any other processor, as long as the netlist is available
in either Verilog or System Verilog and the masked software
implementations have a constant control ﬂow. This includes
also larger RISC-V cores, for example the 32-bit CV32E40P
(formerly RI5CY) [38] and the 64-bit CVA6 (formerly Ari-
ane) [39], but also other non-RISC-V processors, for example
the ARM Cortex-M4. Note that the netlist does not necessar-
ily have to be open source. For example, users in industry to
which the netlist of the ARM Cortex-M4 was disclosed, could
use COCO to perform veriﬁcation of ARM-based masked
assembly implementations. Additionally, the problems found
in the IBEX core are conceptually the same in larger cores,
since the basic building blocks are the same. Therefore, the
proposed solutions can also be easily mapped to larger cores.
3.2 Register File
The register ﬁle of the IBEX core consists of 32 32-bit regis-
ters, labeled x0-x31, where x0 is hard-wired to the value 0.
Although there exist multiple options of how concrete register
ﬁles could be constructed, on a conceptional level, the design
will be similar to the sketch shown in Figure 2a. There are
two read ports (A and B), and a write port, that are controlled
by 5-bit address signals. The 32 registers are connected to a
multiplexer tree of depth ﬁve, whose selection signals are the
respective bit of the read address. If an instruction writes a
3https://github.com/lowRISC/ibex
value to a register, the 32-bit write data either originates from
the ALU, the CSR Unit, or the LSU. A multiplexer before
each register controls if the register content is updated, de-
pending on the write-enable signal, which is derived from the
address.
Problem: Switching Wires in the Multiplexer Tree The
transition from one secret share to another may be observable
on a wire connecting two levels of the multiplexer tree. This
happens primarily whenever two secret shares are read in con-
secutive cycles, but also when accessing registers unrelated to
secret shares. For instance, assuming that the secret shares are
in registers x1 and x2, reading register x3 in the ﬁrst cycle and
x4 in the second cycle causes the ﬁfth bit of the read address
to switch from one to zero. An attacker observes leakage on
the output wire of the ﬁrst L0 multiplexer, which switches
from x1 to x2.
Problem: Glitchy Address Signals The read and write ad-
dress signals are not guaranteed to be glitch-free since they
come out of combinatorial logic. We identify the transitions
of the wires in the multiplexer tree as a source of leakage
because it can switch from the value of a secret share in the
register to the data written to any other register. Additionally,
transitions from one secret share to another can be observed
on the output of the multiplexers before a register.
Problem: Unintended Reads The IBEX core reads data
from the register ﬁle in every instruction, even in cases were
the current instruction does not require any operands. For
example, lw x1, 5(x20) will result in a read to registers
x20 and x5 because bits 15-19 and 20-26 of an instruction are
always interpreted as operand addresses.
Solution: Register Gating All three described problems
are difﬁcult to address in software since their effects often
depend on the concrete hardware layout. A pure software
solution could eliminate the problem of unintended reads, but
becomes more complex as the length of a program grows and
is completely unfeasible for larger implementations. Software
mitigations are insufﬁcient to solve the problem of glitchy
address signals and transition leakage in the multiplexer tree.
Therefore, we ﬁx this problem in hardware using a gating
mechanism for each register, as shown in Figure 2b. After
each register, we place an AND gate, that takes the register
value as the ﬁrst input operand. The second operand of this
AND gate is the register read address, encoded into a 32-bit
one-hot signal, where each bit represents the gate value for a
single register. Consequently, the whole multiplexer tree can
be replaced by a simpler tree of OR gates. From a veriﬁcation
aspect, we discuss this solution in Figure 1. In this concrete
example, the one-hot encoded enable signal is stored in the
register while the combinatorial logic represents the CPU
USENIX Association
30th USENIX Security Symposium    1475
(a) Original register ﬁle. A multiplexer tree is used to read registers
based on the 5-bit read address. Writing is done via a multiplexer,
controlled by a 1-bit write-enable signal, which is derived from
the write address.
(b) Secured register ﬁle. The register output is additionally gated and
the multiplexer tree is replaced by a tree of OR gates. The writing
mechanism remains unchanged, except that it is extended by an
additional AND gate for the write data.
Figure 2: Original and secured register ﬁle of the IBEX core.
register. Since at most one bit is set in the one-hot signal,
at most one register gate is opened, and either the correct
register value or zero can be read from the register ﬁle. This
gating mechanism prevents the problem of switching wires in
the multiplexer tree, and unintended reads because we only
enable gating when the instruction requires a read. We prevent
glitches on the one-hot signal by computing it in the IF stage,
and storing it in an intermediate register so that it is guaranteed
to be stable when it reaches the ID+EX stage. We apply the
gating mechanism to both read ports. Likewise, register writes
are also gated with a separate pre-computed value in a one-hot
register by placing an AND gate before the write multiplexer.
3.3 Computation Units
Computation units such as the ALU, MD, and CSR are di-
rectly connected to read ports of the register ﬁle. The results
produced by them go directly into a multiplexer, selecting
the intended computation result for the register write port. In
other words, the IBEX computation units are always active,
even when they are not required by the current instruction.
Problem: Always-Active Computation Units Assume
the b-bit secret s is shared into two shares s0 = (s0,1, ...s0,b)
and s1 = (s1,1, ...s1,b), such that s = s0 ⊕ s1. Traditionally, s0
and s1 are both stored in one register each, but there are other
ways the bits of shares can be stored. For example, in 2017,
Barthe et al. [4] proposed parallel implementations of higher-
order masking schemes, where s0 and s1 are distributed over
b registers r1, ...rb. In their scheme, the ﬁrst bit of r1 stores
s0,1, while the second bit stores s1,1.
The standard IBEX core does not allow leakage-free imple-
mentations of such masking schemes since parts of ALU, MD,
and CSR units are always active and combine the bits of each
read port signal. More concretely, when using a parallelized
masking scheme, the execution of a simple bit-wise and in-
struction leaks since, e.g., the adder unit combines the bits
from the ﬁrst input operand, and thus might leak s0,1 ⊕ s1,1.
Solution: Computation Unit Gating The problem of
always-active computation units is very hard to mitigate in
software. Therefore, we use a gating mechanism in hardware
similar to the one in the register ﬁle. More concretely, we use
additional AND gates at the inputs of each computation that
are connected to respective enable bits, which are precom-
puted in the IF stage and depend on the next instruction. This
also has the other positive side-effect that the reduced circuit
activity results in an overall lower power consumption of the
CPU, reducing the overall switching activity in the circuit.
3.4 Load/Store Operations
The LSU implements a state machine that is responsible for
communicating with the external memory. The state machine
mainly handles the correct interaction with data/instruction
memory including misaligned memory accesses.
Problem: Hidden LSU State Accessing 32-bit words at
addresses that are not 32-bit aligned always results in two
consecutive fetch operations of the corresponding memory
words. An internal register is then used to buffer the ﬁrst
memory word until the second memory word is available.
This internal buffer is only updated once a misaligned memory
access occurs. Programs can, therefore, cause unintended
leaks by loading a share into the LSU buffer. The value in this
1476    30th USENIX Security Symposium
USENIX Association
x1x2x3Read Port AReadAddr[4]ReadAddr[5]ReadAddr[5]Write x1DataMUXMUXL0MUXL0MUXL1x1x2x3Read Port AMUXWrite x1DataRead Addr One-HotAND  OR532RegANDANDAND1Reg1Write Addr One-Hot532buffer will then potentially be combined with all values that
traverse the LSU from this time on.
Solution: Clear Hidden LSU State We can avoid this leak-
age source in software by performing a misaligned memory
access to a non-secret value, which clears the LSU buffer.
However, we solve this problem in hardware since it does not
produce any additional overhead, and no additional software
design constraints are necessary. A memory access executed
by the IBEX core requires at least two clock cycles. In the
last cycle, the read memory word is given back to the LSU.
In fact, clearing the hidden LSU buffer in the ﬁrst cycle, i.e.,
at the beginning of a memory access, eliminates this leakage
source.
3.5 Hardware Overhead
In order to analyze the additional hardware overhead of the se-
curity ﬁxes implemented in our design, we compare the chip
area in kGE as well as the maximum operating frequency of
the IBEX base design with our secured design. We use Ca-
dence Genus Synthesis Solution 19.11-s087_1 for synthesis.
The used technology is f130LL.
We disable the ungroup_ok option for all modules in the
core, which preserves the hierarchy of the design. This allows
us to investigate the area consumption of every submodule
on its own, although it might prevent certain optimizations.
We can also exclude the area consumed by SRAM and the
instruction ROM from the analysis since they do not belong
to the IBEX core.
Table 2 shows the area consumption of the IBEX core in dif-
ferent conﬁgurations. The unmodiﬁed IBEX core (design #1)
requires in total 20.2 kGE. Enabling secure register reads by
gating (design #2) increases the total chip area by 1.5 %. This
is mainly due to the additional two 32-bit registers required
in the IF stage. The size of the register ﬁle even decreases,
because OR gates replace the multiplexer tree. However, regis-
ter writes introduce more area overhead due to the additional
AND gates. In design #5, main overhead comes from the
four 1-bit gating-registers in the IF stage and the AND gates
used for gating in the total core overhead. In summary, all
our security ﬁxes increase the total area of the IBEX core by
9.9 %.
We do not expect a major latency overhead of our modiﬁ-
cations. In the core, we mainly shifted the address decoding
from ID to IF stage, which might slightly increase the latency
of the IF stage. The same holds for the ID stage, where the
multiplexer tree is replaced by a tree of OR gates and a layer
of additional AND gates. The computation unit gating and
clearing the hidden LSU state will also affect latency in the ID
stage. Latency considerations according to the SRAM are dis-
cussed in Section 4. However, we keep a detailed investigation
Design
#1 Base design
#2 BD + secure
register read
#3 BD + secure
register write
#4 BD + secure
register read/write
#5 BD + disabled
MD/ALU/CSR
unit
#6 Secured design
Total
Register File
IF stage
Total Overhead Total Overhead Total Overhead
20.2
-
29 %
20.5
3.0
−4.1 % 3.6
-
-
9.8
1.5 % 9.4
21.9
22.1
20.4
8.4 % 11.0
12.2 % 3.4
13 %
9.4 % 10.7
9.1 % 4.0
33.3 %
0.9 % 9.8
0 % 3.1
3.3 %
22.2
9.9 % 10.7
9.1 % 4.0
33.3 %
Table 2: Area consumption of the IBEX core in kGE. The
area consumption of the whole design (Total) and parts (reg-