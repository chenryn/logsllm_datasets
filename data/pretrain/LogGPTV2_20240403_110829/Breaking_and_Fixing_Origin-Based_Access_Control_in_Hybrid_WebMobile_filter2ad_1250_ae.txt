the token.
Designing the local-to-Web bridge would have been easier
if the local half of NOFRAK could write its responses directly
into the localStorage associated with the origin that made
the request. Unfortunately, existing embedded browsers do
not have an API for doing this securely, and redesigning
the browser would have greatly impaired the portability of
NOFRAK.
In addition to authenticating bridge invocations, NOFRAK
authenticates requests to change the bridge mode made from
the Web side in exactly the same way. Therefore, NOFRAK
supports future additions to the set of available bridges and
prevents chosen-bridge attacks by foreign-origin content.
C. Evaluation
To demonstrate that our implementation of NOFRAK is
transparent to all legitimate hybrid apps, it is sufﬁcient to verify
that the API of NOFRAK-enhanced PhoneGap is indistinguish-
able from the API of stock PhoneGap. Because legitimate
apps interact with PhoneGap only via this API, this criterion
obviates the need to test individual apps.
To this purpose, we considered all public API functions
of PhoneGap. As of this writing, the PhoneGap API has 16
categories: Accelerometer, Camera, Capture, Compass, Con-
nection, Contacts, Device, Events, File, Geolocation, Global-
ization, InAppBrowser, Media, Notiﬁcation, Splashscreen, and
Storage. Table I shows the number of public API methods for
each category. Connection, Events, and Device do not have
any public methods. Connection uses 1 public property to
retrieve the connection type, Device uses 6 public properties
to fetch device information, and Events has 15 event handlers.
We developed a JavaScript test suite and veriﬁed that in 100%
of the tests, PhoneGap returns exactly the same results with
and without NOFRAK.
To measure the performance overhead of NOFRAK,
we benchmarked NOFRAK-enhanced PhoneGap against
stock PhoneGap. Averaged over 10 independent executions,
NOFRAK adds approximately 0.24% overhead to synchronous
calls and 5.86% overhead to asynchronous calls as shown in
in Table II.
IX. RELATED WORK
Luo et al. [17] observed that interfaces added to Android’s
WebView via ‘addJavascriptInterface’ can be accessed by any
script regardless of its origin. PhoneGap contains defenses
against this attack and also implements other bridges without
Device Resource
Accelerometer
Camera
Capture
Compass
Contacts
File
Geolocation
Globalization
InAppBrowser
Media
Notiﬁcation
Splashscreen
Storage
# of public methods
3
3
4
3
5
36
3
12
6
10
5
2
8
TABLE I: Number of public methods for accessing
different device resources in PhoneGap
Sync
Async
PhoneGap NOFRAK Overhead
1.0024x
1.7713 ms
0.1244 ms
1.0586x
TABLE II: Performance overhead of NOFRAK
1.7755 ms
0.1317 ms
this particular vulnerability. Luo et al. studied two applications
but did not ﬁnd any actual vulnerabilities since the applications
in question do not expose any sensitive resources through
‘addJavascriptInterface’.
In this paper, we carry out a comprehensive security
analysis of the hybrid software stack and demonstrate that
fracking vulnerabilities are generic and affect all bridge mech-
anisms, all embedded browsers, all hybrid frameworks, and all
platforms. Many of these vulnerabilities (e.g., those in event-
based bridges, which do preserve the origin of the call) not
caused by frame confusion and thus different in nature from
the ‘addJavascriptInterface’ vulnerability.
Luo et al. brieﬂy dismiss authentication with pseudo-
random tokens by arguing that sensitive data returned by
the framework’s local half may be mistakenly delivered to a
malicious main frame. We are not aware of any hybrid app
whose main frame has a different Web origin than the app
itself. Typically, it is either a local ﬁle, or has the same origin
as the app. In any case, our NOFRAK defense ensures that
only the authorized origins can access the returned data even
if the main frame is malicious.
Some mobile advertising libraries on Android expose de-
vice resources via ‘addJavascriptInterface’ to JavaScript ads
running inside WebView [11, 26]. Stevens et al. [26] also found
that some of these libraries fetch content over HTTP and are
thus vulnerable to network attacks. Their proposed solution is
privilege separation between the browser instance running the
advertising library and the actual mobile app. As explained in
Section VII-F, local privilege separation is much more difﬁcult
to apply to hybrid apps because—like conventional Web apps
on which they are based—they “mash up” content from trusted
and untrusted Web origins within the same browser instance.
Besides exposing device resources, mobile advertising li-
braries can cause over-privileging of mobile apps. Pearce et
al. [21] added advertising API support and corresponding
advertising permissions as part of the Android platform instead
of running the entire advertising library as part of the applica-
tion. AdSplit [24] enforces privilege separation by running the
13
library and applications as two separate processes with overlaid
displays.
With additional system support, privilege separation can
also help prevent click frauds. Quire [8] uses call chains and
digital signatures to establish the provenance of IPC calls made
by Android applications. It can be used to verify that apps
correctly display ads and users indeed click on them.
Wang et al. [27] analyzed cross-origin vulnerabilities in
inter-application communication channels such as intents,
schemes, and Web-access utility classes on mobile platforms.
Their threat model involves users installing malicious apps or
clicking on malicious Web links. Morbs, the defense proposed
in [27], is based on labeling all inter-application messages with
their respective origins and enforcing origin-based security
policies. In contrast, this paper focuses on a different part of
the software stack, namely, device access by untrusted Web
content running in embedded Web browsers, and demonstrates
the need to apply origin-based access control there, too.
Davi et al. [7] analyzed permission re-delegation attacks on
Android applications. Permission re-delegation is an instance
of the confused deputy problem [14] where a privileged
application exposes some operations as a service that non-
privileged applications can invoke, yet does not correctly check
the credentials of the invoking application. Felt et al. [9] found
that many Android applications suffer from permission re-
delegation attacks. Many defenses against re-delegation attacks
have been proposed in the literature [6, 8, 9, 12, 16].
Fracking vulnerabilities described in this paper can be
viewed as an instance of the confused deputy problem, but they
occur at a different level of the software stack than the permis-
sion re-delegation attacks. Fracking vulnerabilities result from
a mismatch between the security models of the app’s Web
code (governed by the same origin policy) and the framework’s
local code (governed by the platform’s access control policy).
Fracking vulnerabilities are not speciﬁc to Android and apply
to all platforms and all mechanisms currently used in hybrid
frameworks to expose local resources to Web code.
Chen et al. [5] proposed using permission event graphs to
prevent malicious applications from misusing their privileges
by enforcing OS-context-speciﬁc policies on them.
Proposals for ﬁner-grained access control than the current
Android system include byte-code rewriting [15], intercepting
calls to Android native libraries [31], and modifying the
Android OS itself [20]. Hao et al. [13] showed that incomplete
implementation of such ﬁne-grained access control using Java
byte-code rewriting can be bypassed by malicious applications.
Fine-grained access control at the OS level does not help
against fracking attacks if the OS cannot distinguish whether a
particular access request came from trusted or untrusted Web
content within the browser.
Security vulnerabilities are often caused by the applica-
tion developer’s misunderstanding of an SDK or framework
API [10, 28]. Fracking vulnerabilities occur in the hybrid
framework itself and are not caused by the developers’ misuse
of the framework’s API.
X. CONCLUSIONS
Hybrid applications—and, in general, various mechanisms
for opening the browser sandbox and adding native access
to Web code—are here to stay. Today, hybrid applications
are typically built using one of the application development
frameworks analyzed in this paper, but similar functionality
is being added to conventional Web browsers, too. Chrome
and the nightly versions of Firefox support
the WebRTC
standard that enables Web content to access local audio and
video resources [29]. Chrome also supports “packaged apps”12
with native access capabilities, Intel’s MobiUS app browser13
supports access to device resources and the user’s social media,
etc.
Hybrid software will continue to present security chal-
lenges. Existing app stores rely on semi-automated static
audit to ﬁlter out malicious apps, but hybrid apps compose
their content dynamically. This was less of a problem in
conventional Web applications because they did not have any
local access, but hybrid apps do. App platforms must develop
dynamic, runtime mechanisms for recognizing and blocking
malicious behavior.
Hybrid apps contain complex interactions between Web
code and local code. Unfortunately, the Web security model
and the local security model are not coherent, and the loss
of origin when Web content accesses local resources can be
devastating. Furthermore, even minor bugs in either the hybrid
code, or the embedded browser open the door to cross-site
scripting attacks.14
Domain whitelisting is now done opaquely by app creators.
Showing the whitelists to the user may help the user make
more educated decisions about (not) installing certain apps.
Security of the hybrid software stack is a complex, poorly
understood topic that will only grow in importance. We view
this paper as a step towards better understanding of the issues
and designing robust defenses.
Acknowledgments. This work was partially supported by the
NSF grants CNS-0746888, CNS-0905602, and CNS-1223396,
a Google research award, the MURI program under AFOSR
Grant No. FA9550-08-1-0352, NIH grant R01 LM011028-
01 from the National Library of Medicine, and Google PhD
Fellowship to Suman Jana.
REFERENCES
[1] Abusing WebView JavaScript bridges. http://50.56.33.56/
[2] A. Barth. The Web origin concept. http://tools.ietf.org/
blog/?p=314.
html/rfc6454.
[3] BlackBerry 101 - Application permissions.
http://
crackberry.com/blackberry-101-application-permissions.
[4] HTML5/WebWorks for BB OS, BB10 and PlayBook.
https://developer.blackberry.com/html5/.
[5] K. Chen, N. Johnson, V. D’Silva, S. Dai, K. MacNamara,
T. Magrino, E. Wu, M. Rinard, and D. Song. Contextual
12http://developer.chrome.com/apps/about apps.html
13http://dev.html5m.com/?q=mobius
14https://github.com/blackberry/BB10-WebWorks-Framework/issues/82
14
2013/09/24/webview-addjavascriptinterface-remote-
code-execution/.
[19] Building Android Java/JavaScript Bridges.
http:
//labs.mwrinfosecurity.com/blog/2012/04/30/building-
android-javajavascript-bridges/.
[20] M. Nauman, S. Khan, and X. Zhang. Apex: Extending
Android permission model and enforcement with user-
deﬁned runtime constraints. In ASIACCS, 2010.
[21] P. Pearce, A. Felt, G. Nunez, and D. Wagner. AdDroid:
Privilege separation for applications and advertisers in
Android. In ASIACCS, 2012.
[22] Domain Whitelist Guide. http://docs.phonegap.com/en/2.
6.0/guide whitelist index.md.html.
[23] E. Shapira.
Analyzing an Android WebView ex-
http://blogs.avg.com/mobile/analyzing-android-
ploit.
webview-exploit/.
[24] S. Shekhar, M. Dietz, and D. Wallach. AdSplit: Separat-
ing smartphone advertising from applications. In USENIX
Security, 2012.
[25] S. Son and V. Shmatikov. The postman always rings
twice: Attacking and defending postMessage in HTML5
websites. In NDSS, 2013.
[26] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and
Investigating user privacy in Android ad
H. Chen.
libraries. In MoST, 2012.
[27] R. Wang, L. Xing, X. Wang, and S. Chen. Unautho-
rized origin crossing on mobile platforms: Threats and
mitigation. In CCS, 2013.
[28] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and
Y. Gurevich. Explicating SDKs: Uncovering assumptions
underlying secure authentication and authorization.
In
USENIX Security, 2013.
[29] WebRTC native APIs. http://www.webrtc.org/reference/
native-apis.
[30] App capabilities and hardware requirements for Win-
http://msdn.microsoft.com/en-us/library/
dows Phone.
windowsphone/develop/jj206936(v=vs.105).aspx.
[31] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium: Practical
policy enforcement for Android applications. In USENIX
Security, 2012.
policy enforcement in Android applications with permis-
sion event graphs. In NDSS, 2013.
[6] E. Chin, A. Felt, K. Greenwood, and D. Wagner. An-
alyzing inter-application communication in Android. In
MobiSys, 2011.
[7] L. Davi, A. Dmitrienko, A. Sadeghi, and M. Winandy.
Privilege escalation attacks on Android. In ISC, 2010.
[8] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. Wal-
lach. Quire: Lightweight provenance for smart phone
operating systems. In USENIX Security, 2011.
[9] A. Felt, H. Wang, A. Moshchuk, S. Hanna, and E. Chin.
In
Permission re-delegation: Attacks and defenses.
USENIX Security, 2011.
[10] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh,
and V. Shmatikov. The most dangerous code in the world:
Validating SSL certiﬁcates in non-browser software. In
CCS, 2012.
[11] M. Grace, W. Zhou, X. Jiang, and A. Sadeghi. Unsafe
In
exposure analysis of mobile in-app advertisements.
WiSec, 2012.
[12] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic
detection of capability leaks in stock Android smart-
phones. In NDSS, 2012.
[13] H. Hao, V. Singh, and W. Du. On the effectiveness
of API-level access control using bytecode rewriting in
Android. In ASIACCS, 2013.
[14] N. Hardy. The Confused Deputy: (or why capabilities
might have been invented). ACM SIGOPS Operating
Systems Review, 1988.
[15] J. Jeon, K. Micinski, J. Vaughan, N. Reddy, Y. Zhu,
J. Foster, and T. Millstein. Dr. Android and Mr. Hide:
Fine-grained security policies on unmodiﬁed Android. In
SPSM, 2011.
[16] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX:
Statically vetting Android apps for component hijacking
vulnerabilities. In CCS, 2012.
[17] T. Luo, H. Hao, W. Du, Y. Wang, and Y. Heng. Attacks
on WebView in the Android system. In ACSAC, 2011.
[18] WebView
execution.
addJavascriptInterface
code
https://labs.mwrinfosecurity.com/blog/
remote
15