padding is similar to the standard TLS CBC-mode
padding [7] considered by Vaudenay [73]. We evaluate
our algorithm on both these functions as a benchmark
because PKCS7 and its variants are reasonably complex,
and because the human-developed attack is well under-
stood. Throughout the rest of this paper, we refer to these
schemes as PKCS7 and TLS-PKCS7.
Setup. We conducted an experimental evaluation of the
PKCS #7 attack against a 128-bit stream cipher, using
parameters t = 5,δ = 0.5. Our experiments begin by sam-
pling a random message M∗ from the space of all possible
PKCS #7 padded messages, and setting G0 ← FPKCS7.12
This evaluation was performed on AWS, E5, and E7.
Results. Our four complete attacks completed in an aver-
age of 1699.25 queries (min. 1475, max. 1994) requiring
1.875 hours each (min. 1.63, max. 2.18). A visualization
of the resulting attack appears in the full version of this
paper [15]. These results compare favorably to the Vaude-
nay attack, which requires ˜2000 queries in expectation,
however it is likely that additional tests would ﬁnd some
examples in excess of this average. As points of compar-
ison, attacks with t = 3 resulted in a similar number of
12In practice, this plaintext distribution tends to produce messages
with short padding.
1832    29th USENIX Security Symposium
USENIX Association
queries (modulo expected variability over different ran-
domly sampled messages) but took roughly 2 to 3 times
as long to complete, and attacks with t = 1 reached over
5000 queries having only discovered half of the target
plaintext message.
Bitwise Padding. To test our attacks, we constructed
a simpliﬁed bit padding scheme Fbitpad. This contrived
scheme encodes the bit length of the padding P into the
rightmost (cid:100)log2(n)(cid:101) bits of the plaintext string, and then
places up to P padding bits directly to the left of this
length ﬁeld, with each padding bit set to 1. We veriﬁed
the effectiveness of our attacks against this format using a
simple stream cipher. Using the parameters t = 5, δ = 0.5
the generated attacks took on average 153 queries (min.
137, max. 178). Figure 1 shows one attack transcript at
t = 5,δ = 0.5. Additional experiments measuring the
effect of t on this format are provided in the full version
of this paper [15]. These experiments were run primarily
on E5.
Negative result: Cyclic Redundancy Checks (CRCs).
Cyclic redundancy checks (CRCs) are used in many net-
work protocols for error detection and correction. CRCs
are well known to be malleable, due to the linearity of the
functions: namely, for a CRC it is always the case that
CRC(a⊕b) = CRC(a)⊕CRC(b). To test Delphinium’s
ability to rule out attacks against format functions, we
implemented a message format consisting of up to three
bytes of message, followed by a CRC-8 and a 5-bit mes-
sage length ﬁeld. The format function Fcrc8 computes
the CRC over the message bytes, and veriﬁes that the
CRC in the message matches the computed CRC.13 A
key feature of this format is that a valid ciphertext C∗
should not be vulnerable to a format oracle attack using
a simple exclusive-OR malleation against this format, for
the simple reason that the attacker can predict the output
of the decryption oracle for every possible malleation of
the ciphertext (due to the linearity of CRC), and thus no
information will be learned from executing a query. This
intuition was conﬁrmed by our attack algorithm, which
immediately reported that no malleation strings could be
found. These experiments were performed on E5.
5.3 Ciphers with Truncation
A more powerful malleation capability grants the attacker
to arbitrarily truncate plaintexts. In some ciphers, this
truncation can be conducted from the low-order bits of
the plaintext, simply by removing them from the right
13In our implementation we used a simple implementation that does
not reﬂect input and output, or add an initial constant value before or
after the remainder is calculated.
side of the ciphertext. In other ciphers, such as CTR-
mode or CBC-mode, a more limited left-side truncation
can be implemented by modifying the IV of a ciphertext.
Delphinium includes malleation functions that incorpo-
rate all three functionalities.
CRC-8 with a truncatable stream cipher. To evaluate
how truncation affects the ability of Delphinium to ﬁnd
attacks, we conducted a second attack using the function
Fcrc8, this time using an implementation of AES-CTR
supporting truncation. Such a scheme may seem con-
trived, since it involves an encrypted CRC value. How-
ever, this very ﬂaw was utilized by Beck and Trew to
break WPA [68]. In our experiment, the attack algorithm
was able to recover two bytes of the three-byte message,
by using the practical strategy of truncating the message
and iterating through all possible values of the remaining
byte. Additional CRC experiments can be found in the
full version of this paper [15]. These experiments were
run primarily on E5.
As this example demonstrates, the level of customiza-
tion and variation in how software developers operate
over encrypted data streams can obfuscate the concrete
security of an existing implementation. This illustrates
the utility of Delphinium since such variation’s effect on
the underlying scheme does not need to be fully under-
stood by a user, outside of encoding the format’s basic
operation.
Thumb Embedded ISA. To exercise Delphinium
against a novel format oracle of notably different struc-
ture than those traditionally analyzed (such as padding),
we implemented a minimal instruction interpreter for the
16-bit Thumb instruction set architecture (ISA), deﬁned
as part of the ARM speciﬁcation [3], capable of emitting
illegal instruction signals. Then, operating over stream-
cipher encrypted Thumb instructions and using illegal
instructions as a boolean signal, Delphinium is able to
exploit the exclusive-OR malleation to uncover the top
seven bits of each 16-bit instruction, in many cases uncov-
ering nine or more (up to 16) bits of each instruction,14 in
an average of ˜13.3 queries, with each full attack taking
only seconds on E5.
Although limited in a few regards, most notably in the
simpliﬁcation of the format oracle into a boolean signal
and the assumption that an attacker could be situated in
a way that this signal could be gathered, this attack is
timely in that it is inspired by the widespread use of unau-
thenticated encryption in device ﬁrmware updates [31].
14Such a partial ﬁrmware decryption generally leaks the instruction
opcode, but not its arguments. This could be very useful to an attacker,
for example in fuzzy comparison with compiled open source libraries to
determine libraries and their versions used in a given ﬁrmware update.
USENIX Association
29th USENIX Security Symposium    1833
If these updates are delivered over-the-air, they may be
susceptible to man-in-the-middle attacks enabling such
a decryption oracle. Extensive industry research and a
current Internet Draft note that unauthenticated ﬁrmware
updates are an ongoing problem [31, 54].
This initial result serves both as validation of
Delphinium and as creation of an avenue for future work,
including the development of a model for a more com-
plex but widespread ISA such as 32-bit ARM [3], perhaps
exploiting additional signals such as segmentation faults
or side channels in order to capture the capabilities of a
sophisticated adversary.
S2N with Exclusive-OR and Truncation. To evaluate
a realistic attack on a practical format function, we devel-
oped a format checking function for the Amazon s2n [2]
TLS session ticket format. s2n uses 60-byte tickets with
a 12-byte header comprising a protocol version, cipher-
suite version, and format version, along with an 8-byte
timestamp that is compared against the current server
clock. Although s2n uses authenticated encryption (AES-
GCM), we consider a hypothetical scenario where nonce
re-use has allowed for message forgery [21, 33].
Our experiments recovered the 8-byte time ﬁeld that a
session ticket was issued at: in one attack run, with fewer
than 50 queries. However, the attack was unable to obtain
the remaining ﬁelds from the ticket. This is in part due
to some portions of the message being untouched by the
format function, and due to the complexity of obtaining
a positive result from the oracle when many bytes are
unknown. We determined that a full attack against the
remaining bytes of the ticket key is possible, but would
leave 16 bytes unknown and would require approximately
250 queries. Unsurprisingly, Delphinium timed out on
this attack. These experiments were run on AWS and E5.
5.4 CBC mode
We also used the malleation function for CBC-mode en-
cryption. This malleation function supports an arbitrary
number of blocks, and admits truncation of plaintexts
from either side of the plaintext.15 The CBC malleation
function accepts a structured malleation string S, which
can be parsed as (S(cid:48),l,r) where l,r are integers indicating
the number of blocks to truncate from the message.
To test this capability, we used the PKCS7 format func-
tion with a blocksize of B = 16 bytes, and a two-block
CBC plaintext. (This corresponds to a ciphertext consist-
ing of three blocks, including the Initialization Vector.)
15In practice, truncation in CBC simply removes blocks from either
end of the ciphertext.
Figure 4: A contiguous set of malleation queries made
by Delphinium during a simulated CBC attack. The
rightmost bits signal truncation (from left or right).
Delphinium generated an attack which took 3441 or-
acle queries for a random message with four bytes of
padding. This compares favorably to the Vaudenay at-
tack, which requires 3588 queries in expectation. Inter-
estingly, Delphinium settled on a more or less random
strategy of truncation. Where a human attacker would
focus on recovering the entire contents of one block be-
fore truncating and attacking the next block of plaintext,
Delphinium instead truncates more or less as it pleases:
in some queries it truncates the message and modiﬁes
the Initialization vector to attack the ﬁrst block. In other
queries it focuses on the second block. Figure 4 gives a
brief snapshot of this pattern of malleations discovered
by Delphinium. Despite this query efﬁciency (which we
seek to optimize, over wall-clock efﬁciency), the compute
time for this attack was almost a week of computation
on E5.
6 Related Work
CCA-2 and format oracle attacks. The literature con-
tains an abundance of works on chosen ciphertext and
format oracle attacks. Many works consider the prob-
lem of constructing and analyzing authenticated encryp-
tion modes [17, 61, 62], or analyzing deployed proto-
cols, e.g., [16]. Among many practical format oracle at-
tacks [10, 13, 36, 42, 45, 47, 57, 59, 60, 76], the Lucky13
attacks [5, 7] are notable since they use a noisy timing-
based side channel.
Automated discovery of cryptographic attacks. Auto-
mated attack discovery on systems has been considered
in the past. One line of work [26], [58] focuses on gener-
ating public input values that lead to maximum leakage
of secret input in Java programs where leakage is deﬁned
in terms of channel capacity and shannon entropy. Un-
like our work, Pasareanu et al. [26] do not consider an
1834    29th USENIX Security Symposium
USENIX Association
Initialization VectorCiphertext Block 1Ciphertext Block 2TruncLenadversary that makes adaptive queries based on results of
previous oracle replies. Both [26] and [58] assume leak-
age results from timing and memory usage side channels.
Using solvers for cryptographic tasks/model count-
ing. A wide variety of cryptographic use cases for the-
ory solvers have been considered in the literature. Soos
et al. [66] developed CryptoMiniSAT to recover state
from weak stream ciphers, an application also consid-
ered in [27]. Solvers have also been used against hash
functions [50], and to obtain cipher key schedules follow-
ing cold boot attacks [8]. There have been many model
counting techniques proposed in the past based on uni-
versal hash functions [37, 77]. However, many other
techniques have been proposed in the literature. Several
works propose sophisticated multi-query approach with
high accuracy [25, 65], resulting in the ApproxMC tool
we use in our experiments. Other works examine the
complexity of parity constraints [77], and optimize the
number of variables that must be constrained over to ﬁnd
a satisfying assignment [41].
7 Conclusion
Our work leaves a number of open problems. In particu-
lar, we proposed several optimizations that we were not
able to implement in our tool, due to time and perfor-
mance constraints. Additionally, while we demonstrated
the viability of our model count optimization techniques
through empirical analysis, these techniques require the-
oretical attention. Our ideas may also be extensible in
many ways: for example, developing automated attacks
on protocols with side-channel leakage; on public-key en-
cryption; and on “leaky” searchable encryption schemes,
e.g., [38]. Most critically, a key contribution of this work
is that it poses new challenges for the solver research
community, which may result in improvements both to
general solver efﬁciency, as well as to the performance
of these attack tools.
References
[1] The Simple Theorem Prover (STP). Available at https://stp.
github.io/.
[2] Introducing s2n, a New Open Source TLS Implementation.
https://aws.amazon.com/blogs/security/introducing-
s2n-a-new-open-source-tls-implementation/,
June
2015.
[3] ARM Architecture Reference Manual, Mar 2018.
[4] David Adrian, Karthikeyan Bhargavan, Zakir Durumeric, Pierrick
Gaudry, Matthew Green, J. Alex Halderman, Nadia Heninger,
Drew Springall, Emmanuel Thomé, Luke Valenta, Benjamin Van-
derSloot, Eric Wustrow, Santiago Zanella-Béguelin, and Paul Zim-
mermann. Imperfect Forward Secrecy: How Difﬁe-Hellman Fails
in Practice. In Proceedings of the 22nd ACM SIGSAC Confer-
ence on Computer and Communications Security, CCS ’15, pages
5–17, New York, NY, USA, 2015. ACM.
[5] Martin R. Albrecht and Kenneth G. Paterson. Lucky Mi-
croseconds: A Timing Attack on Amazon’s s2n Implementation
of TLS. Cryptology ePrint Archive, Report 2015/1129, 2015.
https://eprint.iacr.org/2015/1129.
[6] Martin R. Albrecht, Kenneth G. Paterson, and Gaven J. Wat-
son. Plaintext recovery attacks against SSH. In Proceedings
of the 2009 30th IEEE Symposium on Security and Privacy, SP
’09, pages 16–26, Washington, DC, USA, 2009. IEEE Computer
Society.
[7] Nadhem J. AlFardan and Kenneth G. Paterson. Lucky Thirteen:
Breaking the TLS and DTLS Record Protocols. In IEEE S&P
(Oakland) ’13, pages 526–540, 2013.
[8] Abdel Alim Kamal and Amr M. Youssef. Applications of SAT
Solvers to AES key Recovery from Decayed Key Schedule Im-
ages. IACR Cryptology ePrint Archive, 2010:324, 07 2010.