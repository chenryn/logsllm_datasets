# 基础
---
## 模板
在 testweb 目录底下创建 templates 目录并建立 ffffffff0x.html 文件
```
├── manage.py
├── templates
│   └── ffffffff0x.html
└── testweb
    ├── asgi.py
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    ├── views.py
    └── wsgi.py
```
ffffffff0x.html 内容如下
```html
{{ hello }}
```
修改 testweb/settings.py,修改 TEMPLATES 中的 DIRS 为 [os.path.join(BASE_DIR, 'templates')]
```py
import os
# 中间略
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
```
修改 views.py,增加一个新的对象,用于向模板提交数据
```py
from django.shortcuts import render
def ffffffff0x(request):
    context          = {}
    context['hello'] = 'Hello World!'
    return render(request, 'ffffffff0x.html', context)
```
修改 urls.py
```py
from django.urls import path
from . import views
urlpatterns = [
    path('ffffffff0x/', views.ffffffff0x),
]
```
---
### 模板标签
#### 变量
模板语法
```
view：｛"HTML变量名" : "views变量名"｝
HTML：｛｛变量名｝｝
```
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
  views_name = "ffffffff0x test"
  return  render(request,"ffffffff0x.html", {"name":views_name})
```
修改 templates 中的 ffffffff0x.html
```html
{{ name }}
```
#### 列表
templates 中的 ffffffff0x.html 中,可以用 `.` 索引下标取出对应的元素。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    views_list = ["test1","test2","test3"]
    return render(request, "ffffffff0x.html", {"views_list": views_list})
```
修改 ffffffff0x.html
```html
{{ views_list }}   # 取出整个列表
{{ views_list.0 }} # 取出列表的第一个元素
```
#### 字典
templates 中的 ffffffff0x.html 中,可以用 `.` 键 取出对应的值。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    views_dict = {"name":"ffffffff0x"}
    return render(request, "ffffffff0x.html", {"views_dict": views_dict})
```
修改 ffffffff0x.html
```html
{{ views_dict }}
{{ views_dict.name }}
```
#### 过滤器
模板语法：
```
{{ 变量名 | 过滤器：可选参数 }}
```
模板过滤器可以在变量被显示前修改它,过滤器使用管道字符,如下所示：
```
{{ name|lower }}
```
{{ name }} 变量被过滤器 lower 处理后,文档大写转换文本为小写。
过滤管道可以被套接 ,既是说,一个过滤器管道的输出又可以作为下一个管道的输入：
```
{{ my_list|first|upper }}
```
以上实例将第一个元素并将其转化为大写。
有些过滤器有参数。 过滤器的参数跟随冒号之后并且总是以双引号包含。 例如：
```
{{ bio|truncatewords:"30" }}
```
这个将显示变量 bio 的前30个词。
其他过滤器：
- addslashes : 添加反斜杠到任何反斜杠、单引号或者双引号前面。
- date : 按指定的格式字符串参数格式化 date 或者 datetime 对象,实例：
    ```
    {{ pub_date|date:"F j, Y" }}
    ```
- length : 返回变量的长度。
**default**
default 为变量提供一个默认值。
如果 views 传的变量的布尔值是 false,则使用指定的默认值。
以下值为 false：
```
0  0.0  False  0j  ""  []  ()  set()  {}  None
```
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    name =0
    return render(request, "ffffffff0x.html", {"name": name})
```
修改 ffffffff0x.html
```html
{{ name|default:"ffffffff0x" }}
```
**length**
返回对象的长度,适用于字符串和列表。
字典返回的是键值对的数量,集合返回的是去重后的长度。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    name ="ffffffff0x"
    return render(request, "ffffffff0x.html", {"name": name})
```
修改 ffffffff0x.html
```html
{{ name|length}}
```
**filesizeformat**
以更易读的方式显示文件的大小（即'13 KB', '4.1 MB', '102 bytes'等）。
字典返回的是键值对的数量,集合返回的是去重后的长度。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    num=1024
    return render(request, "ffffffff0x.html", {"num": num})
```
修改 ffffffff0x.html
```html
{{ num|filesizeformat}}
```
**date**
根据给定格式对一个日期变量进行格式化。
格式 `Y-m-d H:i:s` 返回 `年-月-日 小时:分钟:秒` 的格式时间。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    import datetime
    now  =datetime.datetime.now()
    return render(request, "ffffffff0x.html", {"time": now})
```
修改 ffffffff0x.html
```html
{{ time|date:"Y-m-d" }}
```
**truncatechars**
如果字符串包含的字符总个数多于指定的字符数量,那么会被截断掉后面的部分。
截断的字符串将以 `...` 结尾。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    views_str = "菜鸟教程"
    return render(request, "ffffffff0x.html", {"views_str": views_str})
```
修改 ffffffff0x.html
```html
{{ views_str|truncatechars:2}}
```
**safe**
将字符串标记为安全,不需要转义。
要保证 views.py 传过来的数据绝对安全,才能用 safe。
和后端 views.py 的 mark_safe 效果相同。
Django 会自动对 views.py 传到HTML文件中的标签语法进行转义,令其语义失效。加 safe 过滤器是告诉 Django 该数据是安全的,不必对其进行转义,可以让该数据语义生效。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    views_str = "点击跳转"
    return render(request, "ffffffff0x.html", {"views_str": views_str})
```
修改 ffffffff0x.html
```html
{{ views_str|safe }}
```
#### if/else 标签
基本语法格式如下：
```py
{% if condition %}
     ... display
{% endif %}
```
或者：
```py
{% if condition1 %}
   ... display 1
{% elif condition2 %}
   ... display 2
{% else %}
   ... display 3
{% endif %}
```
根据条件判断是否输出。if/else 支持嵌套。
{% if %} 标签接受 and , or 或者 not 关键字来对多个变量做判断 ,或者对变量取反(not),例如：
```py
{% if athlete_list and coach_list %}
     athletes 和 coaches 变量都是可用的。
{% endif %}
```
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    views_num = 88
    return render(request, "ffffffff0x.html", {"num": views_num})
```
修改 ffffffff0x.html
```py
{%if num > 90 and num  60 and num 
{% for athlete in athlete_list %}
    {{ athlete.name }}
{% endfor %}
```
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    views_list = ["ffffffff0x1","ffffffff0x2","ffffffff0x3","ffffffff0x4",]
    return render(request, "ffffffff0x.html", {"views_list": views_list})
```
修改 ffffffff0x.html
```py
{% for i in views_list %}
{{ i }}
{% endfor %}
```
增加 reversed 可以使得该列表被反向迭代
```py
{% for i in views_list  reversed%}
{{ i }}
{% endfor %}
```
**遍历字典**
可以直接用字典 .items 方法,用变量的解包分别获取键和值。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
    views_dict = {"name":"ffffffff0x","age":18}
    return render(request, "ffffffff0x.html", {"views_dict": views_dict})
```
修改 ffffffff0x.html
```py
{% for i,j in views_dict.items %}
{{ i }}---{{ j }}
{% endfor %}
```
**{% empty %}**
可选的 {% empty %} 从句：在循环为空的时候执行（即 in 后面的参数布尔值为 False ）。
修改 views.py
```py
from django.shortcuts import render
def ffffffff0x(request):
  views_list = []
  return render(request, "ffffffff0x.html", {"listvar": views_list})
```
修改 ffffffff0x.html
```py
{% for i in listvar %}
    {{ forloop.counter0 }}
{% empty %}