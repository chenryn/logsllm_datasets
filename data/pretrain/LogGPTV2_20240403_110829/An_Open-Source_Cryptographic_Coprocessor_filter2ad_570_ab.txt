evaluation.  On the other hand trying to source a B2 or
more realistically B3 system to provide an adequate
level of security for the crypto software is almost
impossible (the practicality of employing an OS in this
class, whose members include Trusted Xenix, XTS 300,
and  Multos, speaks for itself).  A simpler solution
would be to implement a crypto coprocessor using a
dedicated machine running at system high, and indeed
FIPS 140 explicitly recognises this by stating that the
OS security requirements only apply in cases where the
system is running programs other than the crypto
module (to compensate for this, FIPS 140 imposes its
own software evaluation requirements which in some
cases are even more arduous than the Orange Book
ones).
An alternative to a pure-hardware approach might be to
try to provide some form of software-only protection
which attempts to compensate for the lack of protection
present in the OS.  Some work has been done in this
area involving the obfuscation of the code to be
protected, either mechanically [ 23] or manually [ 24].
The use of mechanical obfuscation (for example
reodering of code and insertion of dummy instructions)
is also present in a number of  polymorphic viruses, and
can be quite effectively countered [
25][26].  Manual
obfuscation techniques are somewhat more difficult to
counter automatically, however computer game vendors
have trained several generations of crackers in the art of
bypassing the most sophisticated software protection
and security features they could come up with
[27][28][29], indicating that this type of protection
won’t provide any relief either, and this doesn’t even go
into the portability and maintenance nightmare which
this type of code presents (it is for these reasons that the
obfuscation provisions were removed from a later
version of the CDSA specification where they were first
proposed [30]).
1.3. Coprocessor Design Issues
The main consideration when designing a coprocessor
to manage crypto operations is how much functionality
we should move from the host into the coprocessor unit.
The baseline, which we’ll call a tier 1 0 coprocessor, has
all the functionality in the host, which is what we’re
trying to avoid.  The levels above tier 0 provide varying
levels of protection for  cryptovariables and coprocessor
operations, as shown in Figure 1.
Figure 1: Levels of protection offered by crypto
hardware
The minimal level of coprocessor functionality, a tier 1
coprocessor, moves the private key and private-key
operations out of the host.  This type of functionality is
found in smart cards, and is only a small step above
having no protection at all, since although the key itself
is held in the card, all operations performed by the card
are controlled by the host, leaving the card at the mercy
of any malicious software on the host system.  In
addition to these shortcomings, smart cards are very
slow, offer no protection for  cryptovariables other than
the private key, and often can’t even protect the private
key fully (for example a card with an RSA private key
intended for signing can be misused to decrypt a key or
message since RSA signing and decryption are
equivalent).
The next level of functionality, tier 2, moves both
public/private-key operations and conventional
encryption operations along with hybrid mechanisms
such as public-key wrapping of content-encryption keys
into the coprocessor.  This type of functionality is found
in devices such as 
devices sold as crypto accelerators, and provides rather
more protection than that found in smart cards since no
cryptovariables are ever exposed on the host.  Like
smart cards however, all control over the devices
operation resides in the host, so that even if a malicious
application can’t get at the keys directly, it can still
apply them in a manner other than the intended one.
Fortezza cards and a number of
The next level of functionality, tier 3, moves all crypto-
related processing (for example certificate generation
and message signing and encryption) into the
coprocessor.  The only control the host has over
1 The reason for the use of this somewhat unusual term is
because almost every other noun used to denote hierarchies is
already in use; “teir” is unusual enough that noone else has
got around to using it in their security terminology.
processing is at the level of “sign this message” or
“encrypt this message”, all other operations (message
formatting, the addition of additional information such
as the signing time and signers identity, and so on) is
performed by the coprocessor.  In contrast if the
coprocessor has tier 1 functionality the host software
can format the message any way it wants, set the date to
an arbitrary time (in fact it can never really know the
true time since it’s coming from the system clock which
another process could have altered), and generally do
whatever it wants with other message parameters.  Even
with a tier 2 coprocessor such as a  Fortezza card which
has a built-in real-time clock (RTC), the host is free to
ignore the RTC and give a signed message any
timestamp it wants.  Similarly, even though protocols
like CSP which is used with 
Fortezza incorporate
complex mechanisms to handle authorisation and access
control issues [
mechanisms is left to the untrusted host system rather
than the card(!).  Other potential problem areas involve
handling of intermediate results and composite call
sequences which shouldn’t be interrupted, for example
loading a key and then using it in a cryptographic
operation [ 32].  In contrast, with a tier 3 coprocessor
which performs all crypto-related processing
independent of the host the coprocessor controls the
message formatting and the addition of additional
inforation such as a timestamp taken from its own
internal clock, moving them out of reach of any
software running on the host.  The various levels of
protection when the coprocessor is used for message
decryption are shown in Figure 2.
31], the enforcement of these
Going beyond tier 3, a tier 4 coprocessor provides
facilities such as command verification which prevent
the coprocessor from acting on commands sent from the
host system without the approval of the user.  The
features of this level of functionality are explained in
more detail in the section on extended security
functionality.
Can we move the functionality to an even higher level,
tier 5, giving the coprocessor even more control over
message handling?  Although it’s possible to do this, it
isn’t a good idea since at this level the coprocessor will
potentially need to run message viewers (to display
messages), editors (to create/modify messages), mail
software (to send and receive them), and a whole host
of other applications, and of course these programs will
need to be able to handle MIME attachments, HTML,
JavaScript, ActiveX, and so on in order to function as
required.  In addition the coprocessor will now require
its own input mechanism (a keyboard), output
mechanism (a monitor), mass storage, and other extras.
At this point the coprocessor has evolved into a second
computer attached to the original one, and since it’s
running a range of untrusted and potentially dangerous
code we need to think about moving the crypto
functionality into a coprocessor for safety.  Lather,
rinse, repeat.
The coprocessor requires three layers, the processor
hardware, the firmware which manages the hardware
(for example initialisation, communications with the
host, persistent storage, and so on) and the
software which handles the crypto
functionality.  The following
sections describe the coprocessor
hardware and resource management
firmware on which the crypto control software
runs.
2.1. Coprocessor Hardware
Embedded systems have traditionally been based
on the VME bus, a 32-bit data/32-bit address bus
· 16cm)
incorporated onto cards in the 3U (10
and 6U (23 · 16cm)  Eurocard form factor [ 33].
The VME bus is CPU-independent and supports
all popular microprocessors including 
Sparc,
Alpha, 68K, and x86.  An x86-specific bus
called PC/104, based on the 104-pin ISA bus,
has become popular in recent years due to
the ready availability of low-cost
components from the PC industry.
PC/104 cards are much more compact at
9· 9.5cm than VME cards, and unlike a
VME passive 
backplane-based system
can provide a complete system on a single
card [ 34].  PC/104-Plus, an extension to
PC/104, adds a 120-pin PCI connector alongside the
existing ISA one, but is otherwise mostly identical to
PC/104 [35]
In addition to PC/104 there are a number of functionally
identical systems with slightly different form factors, of
which the most common is the biscuit PC, a card the
same size as a 3½” or occasionally 5¼” drive, with a
somewhat less common one being the credit card or
SIMM PC roughly the size of a credit card.  A biscuit
PC provides most of the functionality and I/O
connectors of a standard PC motherboard, as the form
factor shrinks the I/O connectors do as well so that a
SIMM PC typically uses a single enormous edge
connector for all its I/O. In addition to these form
factors there also exist card PC’s (sometimes called slot
PC’s), which are biscuit PC’s built as ISA or (more
rarely) PCI-like cards.  A typical configuration for a
low-end system is a 5x86/133 CPU (roughly equivalent
in performance to a 133 MHz Pentium), 8-16MB of
DRAM, 2-8MB of flash memory emulating a disk
drive, and every imaginable kind of I/O (serial ports,
parallel ports, floppy disk, IDE hard drive, IR and USB
ports, keyboard and mouse, and others).  High-end
embedded systems built from components designed for
laptop use provide about the same level of performance
as a current laptop PC, although their price makes them
rather impractical for use as crypto hardware. To
Figure 2: Protection levels for the decrypt operation
The best level of functionality therefore is to move all
crypto and security-related processing into the
coprocessor, but to leave everything else on the host.
2. The Coprocessor
The traditional way to build a crypto coprocessor has
been to create a complete custom implementation,
originally with  ASIC’s and more recently with a
mixture of  ASIC’s and general-purpose CPU’s, all
controlled by custom software.  This approach leads to
long design cycles, difficulties in making changes at a
later point, high costs (with an accompanying strong
incentive to keep all design details proprietary due to
the investment involved), and reliance on a single
vendor for the product.  In contrast an open-source
coprocessor by definition doesn’t need to be
proprietary, so it can use existing COTS hardware and
software as part of its design, which greatly reduces the
cost (the coprocessor described here is one to two
orders of magnitude cheaper than proprietary designs
while offering generally equivalent performance and
superior functionality), and can be 
sourced from
multiple vendors and easily migrated to newer hardware
as the current hardware base becomes obsolete.
compare this with other well-known types of crypto
hardware, a typical smart card has a 5MHz 8-bit CPU, a
few hundred bytes of RAM, and a few  kB of EEPROM,
and a  Fortezza card has a 10 or 20MHz ARM CPU,
64kB of RAM and 128kB of flash memory/EEPROM.
All of the embedded systems described above represent
COTS components available from a large range of
vendors in many different countries, with a
corresponding range of performance and price figures.
Alongside the x86-based systems there also exist
systems based on other CPU’s, typically ARM,
Dragonball (embedded Motorola 68K), and to a lesser
extent PowerPC, however these are available from a
limited number of vendors and can be quite expensive.
Besides the obvious factor of system performance
affecting the overall price, the smaller form factors and
use of exotic hardware such as non-generic-PC
components can also drive up the price.  In general the
best price/performance balance is obtained with a very
generic PC/104 or biscuit PC system.
2.2. Coprocessor Firmware
Once the hardware has been selected the next step is to
determine what software to run on it to control it.  The
coprocessor is in this case acting as a special-purpose
computer system running only the crypto control
software, so that what would normally be thought of as
the operating system is acting as the system firmware,
and the real operating system for the device is the
crypto control software.  The control software therefore
represents an application-specific operating system,
with crypto objects such as encryption contexts,
certificates, and envelopes replacing the user
applications which are managed by conventional  OS’s.
The differences between a conventional system and the
crypto coprocessor running one typical type of
firmware-equivalent OS are shown in Figure 3.
Figure 3: Conventional system vs. coprocessor
system layers
Since the hardware is in effect a general-purpose PC,
there’s no need to use a specialised, expensive
embedded or real-time kernel or OS since a general-
purpose OS will function just as well.  The OS choice is
then something simple like one of the free or nearly-
free embeddable forms of MSDOS [ 36][37][38] or an
open source operating system like one of the x86  BSD’s
or  Linux which can be adapted for use in embedded
hardware.  Although embedded DOS is the simplest to
get going and has the smallest resource requirements,
it’s really only a bootstrap loader for real-mode
applications and provides very little access to most of
the resources provided by the hardware.  For this reason
it’s not worth considering except on extremely low-end,
resource-starved hardware (it’s still possible to find
PC/104 cards with 386/40’s on them, although having
to drive them with DOS is probably its own
punishment).
A better choice than DOS is a proper operating system
which can fully utilise the capabilities of the hardware.
The only functionality which is absolutely required of
the OS is a memory manager and some form of
communication with the outside world.  Also useful
(although not absolutely essential) is the ability to store
data such as private keys in some form of persistent
storage.  Finally, the ability to handle multiple threads
may be useful where the device is expected to perform
multiple crypto tasks at once.  Apart from the
multithreading, the OS is just acting as a basic resource
manager, which is why DOS could be pressed into use
if necessary.
Both  FreeBSD and  Linux have been stripped down in
various ways for use with embedded hardware [ 39][40].
There’s not really a lot to say about the two, both meet