If-Matches
b
Cache-Control
c
If-None-Matches
d
If-Unmodified-Since
The answers are at the end of the chapter.
Check that the HTTP 
method matches the 
request object.
Check that any
headers in the
request object
have their
expected
values.
If all checks 
pass, then store 
the decrypted 
request body.
512
CHAPTER 13
Securing IoT APIs
apps, service-to-service APIs, and microservices. It should therefore come as little sur-
prise that it is also being applied to securing APIs in the IoT. It’s especially suited to
consumer IoT applications in the home. For example, a smart TV may allow users to log
in to streaming services to watch films or listen to music, or to view updates from
social media streams. These are well-suited to OAuth2, because they involve a human
delegating part of their authority to a device for a well-defined purpose. 
DEFINITION
A smart TV (or connected TV) is a television that is capable of
accessing services over the internet, such as music or video streaming or social
media APIs. Many other home entertainment devices are also now capable of
accessing the internet and APIs are powering this transformation.
But the traditional approaches to obtain authorization can be difficult to use in an
IoT environment for several reasons:
 The device may lack a screen, keyboard, or other capabilities needed to let a
user interact with the authorization server to approve consent. Even on a more
capable device such as a smart TV, typing in long usernames or passwords on a
small remote control can be time-consuming and annoying for users. Section
13.2.1 discusses the device authorization grant that aims to solve this problem.
 Token formats and security mechanisms used by authorization servers are often
heavily focused on web browser clients or mobile apps and are not suitable for
more constrained devices. The ACE-OAuth framework discussed in section
13.2.2 is an attempt to adapt OAuth2 for such constrained environments.
DEFINITION
ACE-OAuth (Authorization for Constrained Environments using
OAuth2) is a framework specification that adapts OAuth2 for constrained
devices.
13.3.1 The device authorization grant
The OAuth2 device authorization grant (RFC 8628, https://tools.ietf.org/html/rfc8628)
allows devices that lack normal input and output capabilities to obtain access tokens
from users. In the normal OAuth2 flows discussed in chapter 7, the OAuth2 client
would redirect the user to a web page on the authorization server (AS), where they
can log in and approve access. This is not possible on many IoT devices because they
have no display to show a web browser, and no keyboard, mouse, or touchscreen to let
the user enter their details. The device authorization grant, or device flow as it is often
called, solves this problem by letting the user complete the authorization on a second
device, such as a laptop or mobile phone. Figure 13.7 shows the overall flow, which is
described in more detail in the rest of this section.
 To initiate the flow, the device first makes a POST request to a new device authoriza-
tion endpoint at the AS, indicating the scope of the access token it requires and authen-
ticating using its client credentials. The AS returns three details in the response:
513
OAuth2 for constrained environments
 A device code, which is a bit like an authorization code from chapter 7 and will
eventually be exchanged for an access token after the user authorizes the
request. This is typically an unguessable random string.
 A user code, which is a shorter code designed to be manually entered by the user
when they approve the authorization request.
 A verification URI where the user should go to type in the user code to approve
the request. This will typically be a short URI if the user will have to manually
type it in on another device.
Listing 13.16 shows how to begin a device grant authorization request from Java. In this
example, the device is a public client and so you only need to supply the client_id and
Loop
Device
Authorization
server
User
Smartphone
Starts device grant
Device code, user
code, veriﬁcation
URI
The client starts the device
grant, including its client ID
and requested scope.
Asks user to visit veriﬁcation URI
and type in user code
Visits veriﬁcation URI
Checks status
Keeps trying
Fetches veriﬁcation URI
Authenticates user
Types in user code
Checks status
Accesses token
The client uses the
device code to poll the
token endpoint until
the ﬂow completes.
The user visits the
veriﬁcation URI on
another device and
types in the user
code to approve the
authorization grant.
Figure 13.7
In the OAuth2 device authorization grant, the device first calls an endpoint on 
the AS to start the flow and receives a device code and short user code. The device asks 
the user to navigate to the AS on a separate device, such as a smartphone. After the user 
authenticates, they type in the user code and approve the request. The device polls the AS 
in the background using the device code until the flow completes. If the user approved the 
request, then the device receives an access token the next time it polls the AS.
514
CHAPTER 13
Securing IoT APIs
scope parameters on the request. If your device is a confidential client, then you
would also need to supply client credentials using HTTP Basic authentication or
another client authentication method supported by your AS. The parameters are
URL-encoded as they are for other OAuth2 requests. The AS returns a 200 OK
response if the request is successful, with the device code, user code, and verification
URI in JSON format. Navigate to src/main/java/com/manning/apisecurityinaction
and create a new file named DeviceGrantClient.java. Create a new public class in the
file with the same name and add the method from listing 13.16 to the file. You’ll need
the following imports at the top of the file:
import org.json.JSONObject;
import java.net.*;
import java.net.http.*;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.concurrent.TimeUnit;
import static java.nio.charset.StandardCharsets.UTF_8;
private static final HttpClient httpClient = HttpClient.newHttpClient();
private static JSONObject beginDeviceAuthorization(
        String clientId, String scope) throws Exception {
    var form = "client_id=" + URLEncoder.encode(clientId, UTF_8) +     
            "&scope=" + URLEncoder.encode(scope, UTF_8);               
    var request = HttpRequest.newBuilder()                             
            .header("Content-Type",                                    
                "application/x-www-form-urlencoded")                   
            .uri(URI.create(                                           
                "https://as.example.com/device_authorization"))        
            .POST(BodyPublishers.ofString(form))                       
            .build();                                                  
    var response = httpClient.send(request, BodyHandlers.ofString());  
    if (response.statusCode() != 200) {                         
        throw new RuntimeException("Bad response from AS: " +   
            response.body());                                   
    }                                                           
    return new JSONObject(response.body());   
}
The device that initiated the flow communicates the verification URI and user code to
the user but keeps the device code secret. For example, the device might be able to dis-
play a QR code (figure 13.8) that the user can scan on their phone to open the verifi-
cation URI, or the device might communicate directly with the user’s phone over a
local Bluetooth connection. To approve the authorization, the user opens the verifica-
tion URI on their other device and logs in. They then type in the user code and can
either approve or deny the request after seeing details of the scopes requested.
Listing 13.16
Starting a device authorization grant flow
Encode the
client ID and
scope as form
parameters
and POST
them to the
device
endpoint.
If the response 
is not 200 OK, 
then an error 
occurred.
Otherwise, parse the 
response as JSON.
515
OAuth2 for constrained environments
TIP
The AS may also return a verification_uri_complete field that com-
bines the verification URI with the user code. This allows the user to just fol-
low the link without needing to manually type in the code.
The original device that requested authorization is not notified that the flow has com-
pleted. Instead, it must periodically poll the access token endpoint at the AS, passing
in the device code it received in the initial request as shown in listing 13.17. This is the
same access token endpoint used in the other OAuth2 grant types discussed in chap-
ter 7, but you set the grant_type parameter to
urn:ietf:params:oauth:grant-type:device_code
to indicate that the device authorization grant is being used. The client also includes
its client ID and the device code itself. If the client is confidential, it must also authen-
ticate using its client credentials, but this example is using a public client. Open the
DeviceGrantClient.java file again and add the method from the following listing.
private static JSONObject pollAccessTokenEndpoint(
        String clientId, String deviceCode) throws Exception {
    var form = "client_id=" + URLEncoder.encode(clientId, UTF_8) +     
        "&grant_type=urn:ietf:params:oauth:grant-type:device_code" +   
        "&device_code=" + URLEncoder.encode(deviceCode, UTF_8);        
    var request = HttpRequest.newBuilder()                            
            .header("Content-Type",                                   
                    "application/x-www-form-urlencoded")              
            .uri(URI.create("https://as.example.com/access_token"))   
            .POST(BodyPublishers.ofString(form))                      
            .build();                                                 
    var response = httpClient.send(request, BodyHandlers.ofString()); 
    return new JSONObject(response.body());     
}
Listing 13.17
Checking status of the authorization request
Figure 13.8
A QR code is a way to encode a URI 
that can be easily scanned by a mobile phone with a 
camera. This can be used to display the verification 
URI used in the OAuth2 device authorization grant. If 
you scan this QR code on your phone, it will take you 
to the home page for this book.
Encode the
client ID and
device code
along with the
device_code
grant type URI.
Post the 
parameters 
to the 
access token 
endpoint at 
the AS.
Parse the response 
as JSON.
516
CHAPTER 13
Securing IoT APIs
If the user has already approved the request, then the AS will return an access token,
optional refresh token, and other details as it does for other access token requests you
learned about in chapter 7. Otherwise, the AS returns one of the following status codes:
authorization_pending indicates that the user hasn’t yet approved or denied
the request and the device should try again later.
slow_down indicates that the device is polling the authorization endpoint too
frequently and should increase the interval between requests by 5 seconds. An
AS may revoke authorization if the device ignores this code and continues to
poll too frequently.
access_denied indicates that the user refused the request.
expired_token indicates that the device code has expired without the request
being approved or denied. The device will have to initiate a new flow to obtain a
new device code and user code.
Listing 13.18 shows how to handle the full authorization flow in the client building on
the previous methods. Open the DeviceGrantClient.java file again and add the main
method from the listing.
TIP
If you want to test the client, the ForgeRock Access Management (AM)
product supports the device authorization grant. Follow the instructions in
appendix A to set up the server and then the instructions in http://mng.bz/
X0W6 to configure the device authorization grant. AM implements an older
draft version of the standard and requires an extra response_type=device
_code parameter on the initial request to begin the flow.
public static void main(String... args) throws Exception {
    var clientId = "deviceGrantTest";
    var scope = "a b c";
    var json = beginDeviceAuthorization(clientId, scope);   
    var deviceCode = json.getString("device_code");         
    var interval = json.optInt("interval", 5);              
    System.out.println("Please open " +           
        json.getString("verification_uri"));      
    System.out.println("And enter code:\n\t" +    
        json.getString("user_code"));             
    while (true) {                                            
        Thread.sleep(TimeUnit.SECONDS.toMillis(interval));    
        json = pollAccessTokenEndpoint(clientId, deviceCode); 
        var error = json.optString("error", null);
        if (error != null) {
            switch (error) {
                case "slow_down":                         
                    System.out.println("Slowing down");   
                    interval += 5;                        
                    break;
Listing 13.18
The full device authorization grant flow
Start the 
authorization 
process and store 
the device code 
and poll interval.
Display the 
verification URI and 
user code to the user.
Poll the
access token
endpoint
with the
device code
according to
the poll
interval.
If the AS tells you 
to slow down, 
then increase the 
poll interval by 
5 seconds.
517
OAuth2 for constrained environments
                case "authorization_pending":               
                    System.out.println("Still waiting!");   
                    break;
                default:
                    System.err.println("Authorization failed: " + error);
                    System.exit(1);
                    break;
            }
        } else {
            System.out.println("Access token: " +   
                json.getString("access_token"));    
            break;
        }
    }
}
13.3.2 ACE-OAuth
The Authorization for Constrained Environments (ACE) working group at the IETF is
working to adapt OAuth2 for IoT applications. The main output of this group is the
definition of the ACE-OAuth framework (http://mng.bz/yr4q), which describes how
to perform OAuth2 authorization requests over CoAP instead of HTTP and using
CBOR instead of JSON for requests and responses. COSE is used as a standard format
for access tokens and can also be used as a proof of possession (PoP) scheme to secure
tokens against theft (see section 11.4.6 for a discussion of PoP tokens). COSE can also
be used to protect API requests and responses themselves, using the OSCORE frame-
work you saw in section 13.1.4.
 At the time of writing, the ACE-OAuth specifications are still under development
but are approaching publication as standards. The main framework describes how to
adapt OAuth2 requests and responses to use CBOR, including support for the autho-
rization code, client credentials, and refresh token grants.3 The token introspection
endpoint is also supported, using CBOR over CoAP, providing a standard way for
resource servers to check the status of an access token.
 Unlike the original OAuth2, which used bearer tokens exclusively and has only
recently started supporting proof-of-possession (PoP) tokens, ACE-OAuth has been
designed around PoP from the start. Issued access tokens are bound to a cryptographic
key and can only be used by a client that can prove possession of this key. This can be
accomplished with either symmetric or public key cryptography, providing support for
a wide range of device capabilities. APIs can discover the key associated with a device
either through token introspection or by examining the access token itself, which is
typically in CWT format. When public key cryptography is used, the token will contain
the public key of the client, while for symmetric key cryptography, the secret key will
be present in COSE-encrypted form, as described in RFC 8747 (https://datatracker
.ietf.org/doc/html/rfc8747).
3 Strangely, the device authorization grant is not yet supported.
Otherwise,
keep waiting
until a response
is received.
The AS will return an 
access token when 
the authorization 
is complete.
518
CHAPTER 13
Securing IoT APIs
13.4
Offline access control
Many IoT applications involve devices operating in environments where they may not
have a permanent or reliable connection to central authorization services. For exam-
ple, a connected car may be driven through long tunnels or to remote locations where
there is no signal. Other devices may have limited battery power and so want to avoid
making frequent network requests. It’s usually not acceptable for a device to com-
pletely stop functioning in this case, so you need a way to perform security checks
while the device is disconnected. This is known as offline authorization. Offline authori-
zation allows devices to continue accepting and producing API requests to other local
devices and users until the connection is restored.
DEFINITION
Offline authorization allows a device to make local security deci-
sions when it is disconnected from a central authorization server.
Allowing offline authorization often comes with increased risks. For example, if a
device can’t check with an OAuth2 authorization server whether an access token is
valid, then it may accept a token that has been revoked. This risk must be balanced
against the costs of downtime if devices are offline and the appropriate level of risk
determined for your application. You may want to apply limits to what operations can
be performed in offline mode or enforce a time limit for how long devices will oper-
ate in a disconnected state.
13.4.1 Offline user authentication
Some devices may never need to interact with a user at all, but for some IoT applica-
tions this is a primary concern. For example, many companies now operate smart
lockers where goods ordered online can be delivered for later collection. The user
arrives at a later time and uses an app on their smartphone to send a request to open
the locker. Devices used in industrial IoT deployments may work autonomously most
of the time, but occasionally need servicing by a human technician. It would be frus-
trating for the user if they couldn’t get their latest purchase because the locker can’t
connect to a cloud service to authenticate them, and a technician is often only