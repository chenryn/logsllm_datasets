[29] Ryo Kato, Mayu Iwata, Takahiro Hara, Akiyoshi Suzuki, Xing Xie, Yuki Arase,
and Shojiro Nishio. 2012. A dummy-based anonymization method based on user
trajectory with pauses. In Proceedings of the 20th International Conference on
Advances in Geographic Information Systems. ACM, 249–258.
[30] Eamonn Keogh and Chotirat Ann Ratanamahatana. 2005. Exact indexing of
dynamic time warping. Knowledge and Information Systems 7, 3 (2005), 358–386.
[31] Daniel Kifer and Ashwin Machanavajjhala. 2011. No free lunch in data privacy.
In Proceedings of the 2011 ACM SIGMOD International Conference on Management
of Data. ACM, 193–204.
[32] Daniel Kifer and Ashwin Machanavajjhala. 2014. Pufferfish: A framework for
mathematical privacy definitions. ACM Transactions on Database Systems (TODS)
39, 1 (2014), 3.
[33] Haoran Li, Li Xiong, and Xiaoqian Jiang. 2014. Differentially private synthesiza-
tion of multi-dimensional data using copula functions. In International Conference
on Extending Database Technology (EDBT), Vol. 2014. NIH Public Access, 475.
[34] Frank McSherry and Kunal Talwar. 2007. Mechanism design via differential
privacy. In 48th Annual IEEE Symposium on Foundations of Computer Science,
(FOCS) 2007. IEEE, 94–103.
[35] Frank D McSherry. 2009. Privacy integrated queries: an extensible platform
for privacy-preserving data analysis. In Proceedings of the 2009 ACM SIGMOD
International Conference on Management of Data. ACM, 19–30.
[36] Darakhshan J Mir, Sibren Isaacman, Ramón Cáceres, Margaret Martonosi, and
Rebecca N Wright. 2013. Dp-where: Differentially private modeling of human
mobility. In 2013 IEEE International Conference on Big Data. IEEE, 580–588.
[37] Zarrin Montazeri, Amir Houmansadr, and Hossein Pishro-Nik. 2017. Achiev-
ing Perfect Location Privacy in Wireless Devices Using Anonymization. IEEE
Transactions on Information Forensics and Security 12, 11 (2017), 2683–2698.
[38] Luis Moreira-Matias, Joao Gama, Michel Ferreira, Joao Mendes-Moreira, and Luis
Damas. 2013. Predicting taxi–passenger demand using streaming data. IEEE
Transactions on Intelligent Transportation Systems 14, 3 (2013), 1393–1402.
[39] Hoa Ngo and Jong Kim. 2015. Location privacy via differential private perturba-
tion of cloaking area. In 2015 IEEE 28th Computer Security Foundations Symposium
(CSF). IEEE, 63–74.
[40] Gustavo H Orair, Carlos HC Teixeira, Wagner Meira Jr, Ye Wang, and Srinivasan
Parthasarathy. 2010. Distance-based outlier detection: consolidation and renewed
bearing. Proceedings of the VLDB Endowment 3, 1-2 (2010), 1469–1480.
[41] Sai Teja Peddinti and Nitesh Saxena. 2010. On the privacy of web search based
on query obfuscation: a case study of TrackMeNot. In International Symposium
on Privacy Enhancing Technologies. Springer, 19–37.
[42] Apostolos Pyrgelis, Carmela Troncoso, and Emiliano De Cristofaro. 2018. Knock
Knock, Who’s There? Membership Inference on Aggregate Location Data. In
Network and Distributed System Security Symposium (NDSS) 2018.
[43] Wahbeh Qardaji, Weining Yang, and Ninghui Li. 2013. Differentially private grids
for geospatial data. In 2013 IEEE 29th International Conference on Data Engineering
(ICDE). IEEE, 757–768.
[44] Sridhar Ramaswamy, Rajeev Rastogi, and Kyuseok Shim. 2000. Efficient algo-
rithms for mining outliers from large data sets. In ACM SIGMOD Record, Vol. 29.
ACM, 427–438.
[45] Reza Shokri, Marco Stronati, Congzheng Song, and Vitaly Shmatikov. 2017. Mem-
bership inference attacks against machine learning models. In IEEE Symposium
on Security and Privacy (SP). IEEE, 3–18.
[46] Reza Shokri, George Theodorakopoulos, Jean-Yves Le Boudec, and Jean-Pierre
Hubaux. 2011. Quantifying location privacy. In 2011 IEEE Symposium on Security
and Privacy (S&P). IEEE, 247–262.
[47] Reza Shokri, George Theodorakopoulos, Carmela Troncoso, Jean-Pierre Hubaux,
and Jean-Yves Le Boudec. 2012. Protecting location privacy: optimal strategy
against localization attacks. In Proceedings of the 2012 ACM Conference on Com-
puter and Communications Security. ACM, 617–627.
[48] Chaoming Song, Zehui Qu, Nicholas Blumm, and Albert-László Barabási. 2010.
Limits of predictability in human mobility. Science 327, 5968 (2010), 1018–1021.
[49] Hien To, Kien Nguyen, and Cyrus Shahabi. 2016. Differentially private publication
of location entropy. In Proceedings of the 24th ACM SIGSPATIAL International
Conference on Advances in Geographic Information Systems. ACM, 35.
[50] Kevin Toohey and Matt Duckham. 2015. Trajectory similarity measures. SIGSPA-
TIAL Special 7, 1 (2015), 43–50.
[51] Yonghui Xiao and Li Xiong. 2015. Protecting locations with differential privacy
under temporal correlations. In Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security. ACM, 1298–1309.
[52] Byoung-Kee Yi, HV Jagadish, and Christos Faloutsos. 1998. Efficient retrieval of
similar time sequences under time warping. In 14th International Conference on
Data Engineering (ICDE 1998). IEEE, 201–208.
[53] Tun-Hao You, Wen-Chih Peng, and Wang-Chien Lee. 2007. Protecting mov-
ing trajectories with dummies. In 2007 International Conference on Mobile Data
Management. IEEE, 278–282.
[54] Lei Yu, Ling Liu, and Calton Pu. 2017. Dynamic differential location privacy with
personalized error bounds. In Network and Distributed System Security Symposium
(NDSS ’17).
[55] Ling Zhang, Shuangling Luo, and Haoxiang Xia. 2016. An Investigation of
Intra-Urban Mobility Pattern of Taxi Passengers. arXiv preprint arXiv:1612.08378
(2016).
[56] Yu Zheng, Lizhu Zhang, Xing Xie, and Wei-Ying Ma. 2009. Mining interesting
locations and travel sequences from GPS trajectories. In Proceedings of the 18th
International Conference on World Wide Web. ACM, 791–800.
A SENSITIVITY OF GRID CONSTRUCTION
Recall that we access the trajectory database D while the density-
adaptive grid is being constructed through normalized visit count
queries denoted д, once per cell Ci where i ∈ [1, N
2]. This results
in the query set W = {д(D, C1), д(D, C2), ..., д(D, CN 2)}.
Also recall the definitions of sensitivity and neighboring databases
from Section 3.2. A neighboring database implies that either D =
D′ ∪ {T} or D′ = D ∪ {T}, where T denotes a single user’s location
trajectory. Without loss of generality we assume D′ = D ∪ {τ}.
We need to show ∆W = maxD,D′ ||W (D′) − W (D)|| = 1. The
derivation follows:
, Ci) − д(D, Ci))
Ci
′
(д(D
·) −
T ∈D
·)
# of occurrences of Ci in T
# of occurrences of Ci in T
||W (D
Ci
Ci
T ∈D
T ∈{τ }
′) − W (D)|| =
=
((
· + 

=
= 

= 
= 
Ci
1
|T |
|T |
|T | = 1

T ∈{τ }
T ∈{τ }
T ∈{τ }
Ci
T ∈{τ }
|T |
|T |
(# of occurrences of Ci in T )
In the definition of д, we had normalized cell visits via dividing
them by |T |. The intuition behind this can be observed from the
above derivation. Without normalization, the last step reduces to
T ∈{τ } |T |. In the general case this quantity cannot be bounded,

leading to unbounded sensitivity ∆W . Previous works facing this
problem resort to: (i) truncation, i.e., keep only the first Tmax points
of trajectories and remove the remaining points (where Tmax is an
input parameter), or (ii) random sampling, i.e., randomly choose
Tmax points from each trajectory and remove the rest [16, 49].
Both approaches yield ∆W = Tmax . However, we argue that
our normalization approach is more appropriate for our density
measurement goal. The problem with truncating is that by removing
all points after Tmax , we lose significant portions of trajectories that
are much longer than Tmax . This can be circumvented by having a
high Tmax , but doing so increases sensitivity, beating the purpose
of bounding ∆W in the first place. The problem with sampling is
that a sample will randomly throw away many locations that could
significantly contribute to spatial densities. Our approach ensures
that all entries are properly considered in density calculation.
B INTUITION AND WORKED EXAMPLE FOR
ORDINARY LEAST SQUARES
h(C1 (cid:123) C2) = 4
k =19
noisy counts we may have: ˆh(C1 (cid:123) C2) (cid:44)4
k =19
In Section 4.3, we use Ordinary Least Squares (OLS) for post-processing
and optimizing noisy trip counts ˆh. We intuitively explain the ben-
efit of OLS using the following example.
Let C1 and C2 be two grid cells in the top-level of AdaTrace’s
adaptive grid. Let M1 = 2 and M2 = 3, i.e., in the bottom-level, C1 is
divided into 4 cells (denoted C1,1, C1,2, C1,3, C1,4) and C2 is divided
into 9 cells (denoted C2,1 . . . C2,9). Without noise, we trivially have:
l =1 h(C1,k (cid:123) C2,l). That is, the total is
consistent, and equals the sum of its parts. For example, observe
the trip counts in Figure 3: h(C1 (cid:123) C1) = 1 at the top-level (LHS),
and h(C1,1 (cid:123) C1,3) = 1 at the bottom-level (RHS). However, with
random Laplace noise, consistency is no longer guaranteed, and for
ˆh(C1,k (cid:123)
C2,l).
Our goal in using OLS is to re-establish consistency by post-
processing ˆh and obtaining ˆh′, which denotes a consistent and
optimized trip count. ˆh′ values are then used in the definition of
the trip distribution R, in place of ˆh. We establish consistency by
defining ˆh′(C1 (cid:123) C2) as a linear combination of ˆh(C1 (cid:123) C2) and
ˆh(C1,k (cid:123) C2,l). A natural first attempt towards linear
combination is averaging:
4
k =19
l =1
l =1
ˆh
′(C1 (cid:123) C2) =
1
2
ˆh(C1 (cid:123) C2) +
1
2
ˆh(C1,k (cid:123) C2,l)
However, observe that the noise variance in this case is V ar( ˆh′) =
1/4V ar( ˆh) + 36(1/4)V ar( ˆh) = 37/4V ar( ˆh), significantly higher than
V ar( ˆh), which means using the original value ˆh is better than com-
puting ˆh′. This is caused by two factors. First, averaging does not
take into account the possibly uneven privacy budget assigned
when retrieving top-level counts versus bottom-level counts. (Recall
from Section 4.3 that top-level counts are retrieved with budget θε3,
whereas bottom-level counts are retrieved using budget (1 − θ)ε3.)
Second, averaging does not take into account the difference in the
number of times noise is added to each of the two parts – according
to the properties of variance, the sum of 36 i.i.d. Laplace random
variables has higher variance than 1.
4
9
k =1
l =1
Figure 8: Comparing private and non-private versions of
uniform grids versus our density-aware adaptive grid. Re-
sults are obtained using the Brinkhoff dataset and ε = 1.0.
Grid granularity (x axis) controls the granularity of the uni-
form grid, e.g., a value of 10 means the uniform grid is 10x10.
The following OLS approach addresses these shortcomings and
calculates ˆh′ as follows:
′(C1 (cid:123) C2) =
(1 − θ)2
ˆh
+
(1 − θ)2 + 36θ
2 ·
(1 − θ)2 + 36θ
36θ
2
4
9
k =1
l =1
2 · ˆh(C1 (cid:123) C2)
ˆh(C1,k (cid:123) C2,l)
It can be verified that V ar( ˆh′(C1 (cid:123) C2)) < V ar( ˆh(C1 (cid:123) C2)),
which improves accuracy. This computation is bottom-up in nature,
since top-level count is optimized using bottom-level counts. As
a final step, consistency requires that the sum of the bottom-level
counts equals the top-level count. To achieve this, we employ a
top-down approach by distributing the acquired difference δOLS =
ˆh(C1,m (cid:123) C2,n) equally among all
bottom-level counts. The resulting post-processed bottom level
counts in our example become:
ˆh′(C1 (cid:123) C2) −4
m=19
n=1
ˆh
′(C1,k (cid:123) C2,l) = ˆh(C1,k (cid:123) C2,l) + δOLS
36
C USEFULNESS OF DENSITY-ADAPTIVE GRID
To illustrate the usefulness of our adaptive grid, we compare it with
a uniform grid with and without privacy constraints. We run an
experiment similar to the spatial query experiment in Section 6
using Dr eal = Brinkhoff. We first find how many times each cell in
Brinkhoff’s grid is visited. Then, we issue random counting queries
of the form: How many times was region R visited?, where R typically
spans portions of multiple cells. Queries are answered assuming
locations are uniformly distributed within each cell, e.g., if query
region R contains 1/2 of C1 and 1/3 of C2, and C1 is visited 10 times
and C2 is visited 12 times, the query answer would be computed
as 5 + 4 = 9. We find the relative error in the query answer by
comparing this computed answer with the actual answer (i.e., if
the query was answered using Dr eal ). While the above procedure
is followed for non-private grids, for private grids, an additional
step is taken before the query answers are computed: Appropriate
Laplace noise is added to the visit count of each cell, and queries
are answered using noisy counts instead of actual counts.
We give the results of the above experiment in Figure 8. We
make three observations. First, by analyzing the private and non-
private versions of the uniform grid, we observe the two sources
of error in Ω(D) discretization. When grid granularity is too low,
the dominating error is the coarse granularity. This is confirmed
by the observation that increasing the grid granularity will almost
always decrease error in the non-private case. However, in the
private case, after the grid granularity exceeds 14x14, query error
starts increasing. This is caused by the Laplace noise, which ex-
plains the inverse bell-shaped readings for the private uniform grid.
Second, we observe that the non-private adaptive grid is as good
as a high-granularity uniform grid (e.g., 16x16). The uniform grid
performs better only after its granularity exceeds 19x19. Thus, the
adaptive grid is useful and efficient even when no noise is present.
Third, upon observing that non-private and private versions of the
adaptive grid perform similarly, we can conclude that our process
of building the grid is not too negatively impacted by Laplace noise,
as opposed to the uniform grid where Laplace noise destroys utility
when grid granularity is high.
D ADDITIONAL EXPERIMENTS
(a)
(b)
Figure 9: (a) The size of sensitive zone Z is positively corre-
lated with error amounts. (b) φ has no observable impact on
aggregate utility, when using the Brinkhoff dataset.