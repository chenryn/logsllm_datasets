        Publisher = "Not"
        };
      mock.Setup(r => r.UpdateAsync(updateBook)).ReturnsAsync(updateBook);
      mock.Setup(r => r.UpdateAsync(notExisting)).ReturnsAsync(notExisting);
      mock.Setup(r => r.AddAsync(origBook)).ReturnsAsync(addedBook);
      var service = new BooksService(mock.Object);
      // fill in first book to test update
      await service.AddOrUpdateBookAsync(origBook);
      // act
      Book actualUpdated = await service.AddOrUpdateBookAsync(updateBook);
      Book actualRetrieved = service.GetBook(1);
      // assert
      Assert.Equal(updateBook, actualUpdated);
      Assert.Equal(updateBook, actualRetrieved);
      await Assert.ThrowsAsync(async () =>
        await service.AddOrUpdateBookAsync(notExisting));
      await Assert.ThrowsAsync(async () =>
        await service.AddOrUpdateBookAsync(null));
    }
当使用MVVM模式与基于XAML的应用程序，以及使用MVC模式和基于Web的应用
程序时，会降低用户界面的复杂性，减少复杂UI测试的需求。然而，仍有一些场景应该
用UI测试，例如，浏览页面、拖曳元素等。此时应使用Visual Studio的UI测试功能。
19.4 UI测试
为了测试用户界面，Visual Studio为Universal Windows应用程序、Windows Phone应
用程序、WPF应用程序和Windows Forms提供了Coded UI Test Project模板。当创建新项目
时，可以在Test组中找到用于WPF和Windows Forms的项目模板。然而，这个模板不用于
Windows应用程序。Universal 
Windows应用程序的项目模板在Universal组。请注意，
Windows应用程序不支持自动记录功能。
本章为MVVM WPF应用程序创建一个UI测试。这个应用程序是本章可下载文件的一
部分，所以可以用它来测试。这个应用程序的详细信息参见第31章。
创建新的Coded UI Test Project时，会显示如图19-7所示的对话框。在这里可以指定创
建新的记录。
图19-7
创建新的记录时，会看到Coded UI Test Builder （参见图19-8）。对于WPF应用程
序，可以单击Recording按钮来记录操作。
图19-8
运行样例应用程序时，可以单击Load按钮来加载书籍列表，单击Add按钮来添加新
书，在文本框元素中输入一些文本，并单击Save按钮。当在Coded UI Test Builder中单击
Show Recorded Steps按钮时，会显示如图19-9所示的记录。
图19-9
当单击Generate 
Code按钮时，屏幕提示输入方法名，用记录生成代码（参见图19-
10）。
图19-10
使用生成的方法AddNewBook可以看到，本地变量用来引用所使用的WPF控件：
    public void AddNewBook()
    {
      WpfButton uILoadButton =
        this.UIBooksDesktopAppWindow.UIBooksViewCustom.UILoadButton;
      WpfButton uIAddButton =
        this.UIBooksDesktopAppWindow.UIBooksViewCustom.UIAddButton;
      WpfEdit uIItemEdit =
        this.UIBooksDesktopAppWindow.UIBookViewCustom.UISaveButton.UIItemEdit;
      WpfEdit uIItemEdit1 =
        this.UIBooksDesktopAppWindow.UIBookViewCustom.UISaveButton.UIItemEdit1;
      WpfButton uISaveButton =
        this.UIBooksDesktopAppWindow.UIBookViewCustom.UISaveButton;
      // etc.
    }
按钮在属性中引用，例如，如下代码片段所示的UILoadButton。在第一次访问时，使
用Name属性搜索WpfButton（代码文件BooksDesktopAppUITest 
/
AddNewBookUIMap.Designer.cs）：
    public WpfButton UILoadButton
    {
      get
      {
        if ((this.mUILoadButton == null))
        {
        this.mUILoadButton = new WpfButton(this);
        this.mUILoadButton.SearchProperties[WpfButton.PropertyNames.Name] =
          "Load";
        this.mUILoadButton.WindowTitles.Add("Books Desktop App");
        }
        return this.mUILoadButton;
      }
    }
AddNewBook继续从记录中创建的方法。首先，使用静态方法Mouse.Click单击鼠标。
Mouse.Click方法定义了几个重载版本：单击屏幕内的坐标（使用鼠标修改工具栏）和单
击控件。第一个单击方法单击Load按钮。第二个参数定义的坐标是控件内部的相对坐
标。所以，如果在更新的版本中重新定位这个控件，就一定要再次运行测试，而没有大的
变化，这就是为什么通过名字访问控件的原因。除了Mouse类，还可以使用Keyboard类发
送键的输入：
    public void AddNewBook()
    {
      // etc.
      // Click 'Load' button
      Mouse.Click(uILoadButton, new Point(20, 11));
      // Click 'Add' button
      Mouse.Click(uIAddButton, new Point(14, 9));
      // Type 'new book' in first text box next to 'Save' button
      uIItemEdit.Text = this.AddANewBookParams.UIItemEditText;
      // Type '{Tab}' in first text box next to 'Save' button
      Keyboard.SendKeys(uIItemEdit, this.AddANewBookParams.UIItemEditSendKeys,
        ModifierKeys.None);
      // Type 'new' in text box numbered 2 next to 'Save' button
      uIItemEdit1.Text = this.AddANewBookParams.UIItemEdit1Text;
      // Click 'Save' button
      Mouse.Click(uISaveButton, new Point(29, 19));
    }
文本控件的输入保存在辅助类AddNewBookParams中，所以很容易在一个地方更改输
入：
    public class AddNewBookParams
    {
      public string UIItemEditText = "new book";
      public string UIItemEditSendKeys = "{Tab}";
      public string UIItemEdit1Text = "new";
    }
创建记录后，需要定义断言，检查结果是否正确。可以用Coded UI Test Builder创建
断言。单击Add Assertions按钮，打开如图19-11所示的对话框。在这个对话框中，可以看
到打开窗口的控件，看到当前的属性值，并添加断言。定义断言之后，需要重新生成代
码。
图19-11
生成的Assert方法验证在选定的控件中是否有正确的值，如果控件中的值不正确，就
输出一个错误信息：
    public void AssertNewBook()
    {
      WpfList uIItemList =
        this.UIBooksDesktopAppWindow1.UIBooksViewCustom.UIAddButton.UIItemList;
      Assert.AreEqual(
        this.AssertNewBookExpectedValues.UIItemListSelectedItemsAsString,
        uIItemList.SelectedItemsAsString, "problem adding book in list");
    }
对于更改代码，不应该改变设计器生成的代码文件。相反，应打开.uitest文件，以打
开如图19-12所示的对话框。在这里可以将动作分解为新方法，在动作之前添加延迟，删
除动作。另外，可以把设计器生成的文件中的源代码移动到自定义文件中，稍后在自定义
文件中可以更改代码。
图19-12
现在可以用运行单元测试的方式运行UI测试，如本章前面所示。
19.5 Web测试
要测试Web应用程序，可以创建单元测试，调用控制器、存储库和实用工具类的方
法。Tag辅助程序是简单的方法，在其中，测试可以由单元测试覆盖。单元测试用于测试
方法中算法的功能，换句话说，就是方法内部的逻辑。在Web应用程序中，创建性能和负
载测试也是一个很好的实践。应用程序会伸缩吗？应用程序用一个服务器可以支持多少用
户？需要多少台服务器支持特定数量的用户？不容易伸缩的瓶颈是什么？为了回答这些问
题，Web测试可以提供帮助。
在Web测试中，HTTP请求从客户机发送到服务器。Visual 
Studio还提供了一个记录
器，它在Internet Explorer中需要一个插件。在撰写本文时，Microsoft Edge不能用作记录
器，因为目前这个浏览器不支持插件。
19.5.1 创建Web测试
对于创建Web测试，可以用ASP.NET Core 1.0创建一个新的ASP.NET Web应用程序，
命名为WebApplicationSample。这个模板内置了足够的功能，允许创建测试。要创建Web
测试，需要给解决方案添加一个Web 
Performance和Load 
Test 
Project，命名为
WebAndLoadTestProject。单击WebTest1.webtest文件，打开Web Test Editor。然后单击Add
Recording按钮，开始一个Web记录。对于这个记录，必须在Internet 
Explorer中安装Web
Test Recorder插件，该插件随Visual Studio一起安装。该记录器记录发送到服务器的所有
HTTP请求。单击Web应用程序WebApplicationSample上的一些链接，例如About和Context
等，并注册一个新用户。然后单击Stop按钮，停止记录。
记录完成后，可以用Web测试编辑器编辑记录。如果没有禁用浏览器链接，就可能会
看到发送给browserLinkSignalR的请求。浏览器链接允许更改HTML代码，而无须重新启
动浏览器。对于测试，这些请求并不相关，可以删除它们。一个记录如图19-13所示。对
于所有的请求，可以看到标题信息以及可以影响和改变的表单POST数据。
图19-13
单击Generate Code按钮，生成源代码，以编程方式发送所有的请求。对于Web测试，
测试类派生自基类WebTest，重写了GetRequestEnumerator方法。该方法一个接一个地返回
请求（代码文件WebApplicationSample/
WebAndLoadTestProject/NavigateAndRegister.cs）：
    public class NavigateAndRegister: WebTest
    {
      public NavigateAndRegister()
      {
        this.PreAuthenticate = true;
        this.Proxy = "default";
      }
      public override IEnumerator GetRequestEnumerator()
      {
        // etc.
      }
    }
方法GetRequestEnumerator定义了对网站的请求，例如对About页面的请求。对于这个
请求，添加一个HTTP标题，把该请求定义为源自于主页：
    public override IEnumerator GetRequestEnumerator()
    {
      // etc.
      WebTestRequest request2 =
        new WebTestRequest("http://localhost:13815/Home/About");
      request2.Headers.Add(new WebTestRequestHeader("Referer",
        "http://localhost:13815/"));
      yield return request2;
      request2 = null;
      // etc.
    }
下面发送一个对Register页面的HTTP POST请求，传递表单数据：
    WebTestRequest request6 =
      new WebTestRequest("http://localhost:13815/Account/Register");
    request6.Method = "POST";
    request6.ExpectedResponseUrl = "http://localhost:13815/";
    request6.Headers.Add(new WebTestRequestHeader("Referer",
      "http://localhost:13815/Account/Register"));
    FormPostHttpBody request6Body = new FormPostHttpBody();
    request6Body.FormPostParameters.Add("Email", "PI:EMAIL");
    request6Body.FormPostParameters.Add("Password", "Pa$$w0rd");
    request6Body.FormPostParameters.Add("ConfirmPassword", "Pa$$w0rd");
    request6Body.FormPostParameters.Add("__RequestVerificationToken",
      this.Context["$HIDDEN1.__RequestVerificationToken"].ToString());
    request6.Body = request6Body;
    ExtractHiddenFields extractionRule2 = new ExtractHiddenFields();
    extractionRule2.Required = true;
    extractionRule2.HtmlDecode = true;
    extractionRule2.ContextParameterName = "1";
    request6.ExtractValues +=
      new EventHandler(extractionRule2.Extract);
    yield return request6;
    request6 = null;
在表单中输入一些数据时，最好从数据源中提取数据，以增加灵活性。使用Web Test
Editor，可以添加数据库、CSV文件或XML文件作为数据源（见图19-14）。使用此对话
框、可以改变表单参数，从数据源中提取数据。
图19-14
添加数据源就改变了测试代码。对于数据源，测试类用DeploymentItem特性（如果使
用CSV或XML文件）、DataSource和DataBinding特性注释：
    [DeploymentItem("webandloadtestproject\\EmailTests.csv",
      "webandloadtestproject")]
    [DataSource("EmailDataSource",
      "Microsoft.VisualStudio.TestTools.DataSource.CSV",
      "|DataDirectory|\\webandloadtestproject\\EmailTests.csv",
      Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequent
ial,
      Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.Select
Only
      BoundColumns, "EmailTests#csv")]
    [DataBinding("EmailDataSource", "EmailTests#csv", "sample1@test#com",
      "EmailDataSource.EmailTests#csv.sample1@test#com")]
    public class NavigateAndRegister1: WebTest
    {
      // etc.
    }
现在，在代码中，可以使用WebTest的Context属性访问数据源，该属性返回一个
WebTestContext，以通过索引访问所需的数据源：
    request6Body.FormPostParameters.Add("Email",
      this.Context["EmailDataSource.EmailTests#csv.sample1@test#com"].ToString())
;
19.5.2 运行Web测试
有了测试后，就可以启动测试了。可以直接在Web Test Editor中运行并调试测试。在
开始测试之前，记得要启动Web应用程序。在Web Test Editor中运行测试时，可以看到生
成的Web页面以及请求和响应的细节信息，如图19-15所示。
图19-15
图19-16显示了如何指定浏览器类型、模拟思考次数、多次运行测试，来影响测试的
运行。
图19-16
19.5.3 Web负载测试
使用Web负载测试，可以模拟Web应用程序的高负载。对于真正的高负载，一个测试
服务器是不够的；可以使用一组测试服务器。在Visual 
Studio 
2015中，可以直接使用
Microsoft Azure基础设施，选择基于云的负载测试，如图19-17所示。
图19-17
在WebAndLoadTestProject项目中添加一个新项Web Load Test，可以创建一个负载测
试。这会启动一个向导，在其中可以执行以下操作：
● 定义一个恒定负载或随时间增加的负载（参见图19-18）。
图19-18
● 基于测试的数量或虚拟用户的数量，建立测试混合模型。
● 把测试添加到负载中，定义相比其他测试，哪些测试应该运行的百分比。
● 指定一个网络混合，模拟快速和慢速网络（如果服务器网速高的客户占领，网速慢
的用户会得到什么结果？）。
● 用Internet Explorer、Chrome、Firefox和其他浏览器，确定要测试的混合浏览器。
● 建立运行设置，在运行测试时使用。
19.6 小结
本章介绍了对测试应用程序最重要的方面：创建单元测试、编码的用户界面测试和
Web测试。
Visual Studio提供了Test Explorer来运行单元测试，而无论它们是用MSTest还是xUnit
创建的。xUnit的优势是支持.NET 
Core。本章还介绍了3A动作：安排（Arrange）、行动
（Act）和断言（Assert）。
在编码的UI测试中，学习了如何创建记录，改编记录，根据需要修改所需的UI测试
代码。
在Web应用程序中，了解了如何创建Web测试，把请求发送到服务器。还讨论了如何
更改请求。
测试有助于在部署应用程序之前解决问题，而第20章帮助解决正在运行的应用程序的
问题。
第20章
诊断和Application Insights
本章要点
● 用EventSource进行简单的跟踪
● 用EventSource进行高级跟踪
● 创建自定义跟踪侦听器
● 使用Application Insights
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/prosharp，单击Download Code选项卡即可下载本章
源代码。本章代码分为以下几个主要的示例文件：
● SimpleEventSourceSample
● EventSourceSampleInheritance