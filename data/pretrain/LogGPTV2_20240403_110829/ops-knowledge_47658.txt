User: I've got a Windows application running some expensive equipment; this application dies in a variety of creative ways. Usually when it goes, the process dies completely. I wrote a little monitoring program which looks for the process' name in the list of things which are currently running, and that works great for those failures. But sometimes it just becomes completely nonresponsive and requires termination via the task manager, but is still "running" in some unhelpful sense.
I'm completely unfamiliar with the Windows API, so this is perhaps quite a stretch, but is there anything I can do to programmatically check the "liveness" of other processes? Or which I might use to make guesses? (Watching for it to stop processing events from the OS, or for all disk access/memory allocation to halt, etc, etc)
Preferably it would be something I could do via the Python win32 module, but I'll branch out to anything that can successfully detect when this thing locks up. And, I realize "liveness" is vague, but I don't want to rule anything out, particularly when I don't have any insight into how this thing is really failing.
Assistant: You'll need to get a HWND handle to the window in question (EnumWindowHandles might be a good start), and then try calling IsHungAppWindow to see if the system thinks it's unresponsive.