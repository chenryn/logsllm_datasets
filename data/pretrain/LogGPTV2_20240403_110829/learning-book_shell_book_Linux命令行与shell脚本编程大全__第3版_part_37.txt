提供了一个简易的文件调览签，让选择要编辑的文件简单些
为选中的行设置缩进或取消缩进
Insert Dute/Time
在光标当前位置插人当前日期和时间（可以选择多种格式）
Modelines
在编辑签窗口底部显示类emms的消息行
Python Console
Quick Open
在编辑器窗口底部提供个用来输人Python语言命令的交互式控制台
直接在gedit编辑窗口中打开文件
Snippets
允许你存储常用的文本段以方便在文本中取回使用
Sort
快速排序整个文件或选定文本
Spell Checker
为文本文件提供词典式拼写检查
Tag List
提供一个可轻松输人到文本中的常用字符申列表
遗憾的是，并非所有插件都安装在gedit菜单栏的同一个地方。一些插件会出现在Tools菜单
栏（比如Spell Checker和Extemal Tools插件），而另一些则出现在Edit菜单栏（比如Change Case和
Insert Date/Time插件)
本章讲述了一些Linux中可用的文本编辑器。如果觉得这些文本编辑器都不合意，也可以选
择别的。Linux中的文本编辑器多得很，如geany、Eclipse、jed、Bhuefish及leafpad，这些只是其
中的一小部分。当踏上bashshell脚本编写旅程之时，这些文本编辑器都能够助你一臂之力。
10.6小结
在创建shell脚本时，你需要某种类型的文本编辑器。在Linux环境下，有一些流行的文本编
辑器。Unix世界中最流行的编辑器vi已作为vim编辑器移植到了Linux中。vim编辑器采用基本的
全屏图形模式，提供了简单的控制台文本编辑功能。vim编辑器还具备很多高级编辑器功能，比
如文本查找和替换。
另一个从Unix世界移植到Linux中的编辑器是nano文本编辑器。vim编辑器非常复杂，而nano
编辑器却十分简单，它能够在控制台模式下快速地编辑文本。
另一个流行的Unix编辑器emacs也已步人了Linux的世界。Linux版本的emacs包括控制台模式
和图形模式，这使其成为连接新旧世界的一座桥梁。cmacs编辑器提供了多个缓冲区，允许你同
时编辑多个文件。
KDE项目创建了两款可用于KDE桌面的编辑器。KWrite编辑器是一个简单的编辑器，除了基
本的文本编辑功能之外，还提供了一些高级功能，比如程序代码的高亮显示、行编号和代码折叠。
Kate编辑器为程序员提供了更多的高级功能。Kate中一个很棒的功能就是内建的终端窗口。你可
---
## Page 222
10.6小结
207
以在Kate编辑器中直接打开一个命令行界面会话，再也不用专门打开单独的终端仿真器窗口了。
Kate编辑器还允许你打开多个文件，为每个打开的文件提供了不同的窗口，
GNOME项目也为程序员提供了一个简单的文本编辑器。gedit编辑器是一个基本的文本编辑
器，同时还提供了一些高级功能，例如代码语法高亮显示和行编号，但它的设计初衷是作为一款
精简的编辑器使用。为了丰富gedit编辑器的功能，开发人员开发了插件，扩展了gedit的已有功能。
目前的插件包括一个拼写检查器、一个终端仿真器和一个文件浏览器。
使用Linux命令行所需的背景知识到此就算介绍完毕了。本书的下一部分将会深人shel编程
的世界。下章将从演示如何创建shell脚本文件和如何在Linux系统上运行脚本开始。另外还会介
绍shell脚本的基础知识，使你可以通过将多条命令放人可执行的脚本中来创建简单的程序。
10
---
## Page 224
Part 2
第二部分
shell脚本编程基础
本部分内容
第11章构建基本脚本
第12章使用结构化命令
第13章更多的结构化命令
第14章处理用户输人
第15章呈现数据
第16章控制脚本
---
## Page 225
第11章
构建基本脚本
本章内容
口使用多个命令
口创建脚本文件
口显示消息
口使用变量
口输入输出重定向
口管道
口数学运算
口退出脚本
shel脚本的基础知识。在开始编写自己的shell脚本大作前，你必须了解这些基本概念。
11.1使用多个命令
到目前为止，你已经了解了如何使用shell的命令行界面提示符来输入命令和查看命令的结
果。shell脚本的关键在于输入多个命令并处理每个命令的结果，甚至需要将一个命令的结果传给
另一个命令。shell可以让你将多个命令串起来，一次执行完成。如果要两个命令一起运行，可以
把它们放在同一行中，彼此间用分号隔开。
Mon Feb 21 15 :36 : 09 EST 2014
$ date 1 who
Chxiatine tty2
9=5 0-102
Samantha tty3
2014-0221 15:26
Lnothy
2 014  02 19 14 : 03_1 : 0)
20140221 15:2.6
user
user
0/2d
2014 0221 15 : 21 ( : 0 . 0)
$
恭喜，你刚刚已经写好了一个脚本。这个简单的脚本只用到了两个bash shell命令。date命
---
## Page 226
11.2创建shell脚本文件
211
令先运行，显示了当前日期和时间，后面紧跟着who命令的输出，显示当前是谁登录到了系统上。
使用这种办法就能将任意多个命令申连在一起使用了，只要不超过最大命令行字符数255就行。
这种技术对于小型脚本尚可，但它有一个很大的缺陷：每次运行之前，你都必须在命令提示
符下输人整个命令。可以将这些命令组合成一个简单的文本文件，这样就不需要在命令行中手动
输人了。在需要运行这些命令时，只用运行这个文本文件就行了。
11.2创建shell脚本文件
要将shell命令放到文本文件中，首先需要用文本编辑器（参见第10章）来创建一个文件，然
后将命令输入到文件中。
在创建shell脚本文件时，必须在文件的第一行指定要使用的shell。其格式为：
 1 /bin/ba.sh
在通常的shell脚本中，井号（#）用作注释行。shell并不会处理shell脚本中的注释行。然而，
shell脚本文件的第一行是个例外，#后面的惊叹号会告诉shell用哪个shell来运行脚本（是的，你
可以便用bash shell，同时还可以使用另一个shell来运行你的脚本 
在指定了shell之后，就可以在文件的每一行中输人命令，然后加一个回车符。之前提到过，
注释可用+添加。例如：
 this script displays the Gate and vho*s logged on
 1 /bin./ba.sh
date
whio
这就是脚本的所有内容了。可以根据需要，使用分号将两个命令放在一行上，但在shell脚本
中，你可以在独立的行中书写命令。shell会按根据命令在文件中出现的顺序进行处理。
还有，要注意另有一行也以开头，并添加了一个注释。shel不会解释以#开头的行（除了以
！开头的第一行）。留下注释来说明脚本做了什么，这种方法非常好。当两年后回过来再看这个
脚本时，你还可以很容易回忆起做过什么。
将这个脚本保存在名为testl的文件中，基本就好了。在运行新脚本前，还要做其他一些事。
现在运行脚本，结果可能会叫你有点失望。
$ test1
bash1 test11 command not found
你要跨过的第一个障碍是让bash shell能找到你的脚本文件。如第6章所述，shell会通过PATH
环境变量来查找命令。快速查看一下PATH环境变量就可以弄清问题所在。
/usr/kerberos/≤bin:/usr/kerberoe/bin:/usr/Local/bin:/usr/bin
$ echo $PATH
1/bin1/uer/local/ebin:/usr/ebin:/ebin:/home/user/bin $
PATH环境变量被设置成只在一组目录中查找命令。要让shell找到testl脚本，只需采取以下两
---
## Page 227
212
第11章构建基本脚本
种作法之一：
口将shell脚本文件所处的目录添加到PATH环境变量中；
口在提示符中用绝对或相对文件路径来引用shell脚本文件。
窍门有些Linux发行版将SHOME/bin目录添加进了PATH环境交量。它在每个用户的HOME目录
下提供了一个存放文件的地方，shell可以在那里查找妥执行的命令。
在这个例子中，我们将用第二种方式将脚本文件的确切位置告诉shell。记住，为了引用当前
目录下的文件，可以在shell中使用单点操作符。
baah: -/testl: Permisslon Genied
$./test1
现在shell找到了脚本文件，但还有一个问题。shell指明了你还没有执行文件的权限。快速查
看一下文件权限就能找到问题所在。
$ 1s -1 test1
r==
1user
user
73 Sep 24 19:56 teat1
在创建testl文件时，umask的值决定了新文件的默认权限设置。由于umask变量在Ubuntu中
被设成了022（参见第7章），所以系统创建的文件只有文件属主和属组才有读/写权限。
下一步是通过chmod命令（参见第7章）赋予文件属主执行文件的权限。
$ chnod u+x test1
$./test1
Mon Feb 21 15 :38 :19 EST 2014
g equeres
ChxiatLne tty2
2014-02-21 15:26
Tinothy tty1
20140221 15:2.6
usel
20140221 15 : 2.6
tty7
20140219 14 : 03 (: 0)
uger
ptα/0
2014-0221 15:21 1: 0 . 0) $
成功了！现在万事俱备，只待执行新的shell脚本文件了。
11.3显示消息
大多数shell命令都会产生自己的输出，这些输出会显示在脚本所运行的控制台显示器上。很
多时候，你可能想要添加自已的文本消息来告诉脚本用户脚本正在做什么。可以通过echo命令
来实现这一点。如果在echo命令后面加上了一个字符串，该命令就能显示出这个文本字符串。
$ echo Thie la a test
Thia ls a teat
注意，默认情况下，不需要使用引号将要显示的文本字符申划定出来。但有时在字符串中出
---
## Page 228
11.3显示消息
213
现引号的话就比较麻烦了。
$ echo Let*s see if this'll work
Lets see if thisll work
echo命令可用单引号或双引号来划定文本字符串。如果在字符串中用到了它们，你需要在
文本中使用其中一种引号，而用另外一种来将字符串划定起来。
$ echo *This is a test to see if you*re paying attention*
This is a test to see if you're paying attention
$ echo *Rich says *seripting is easy*.*
Rich saye *scripting is easy*.
所有的引号都可以正常输出了。
可以将echo语句添加到shell脚本中任何需要显示额外信息的地方。
$ cat test1
# 1/bin./ba.sh
 This script displays the date and who′s logged on
date
echo
The tine and date are1
who
当运行这个脚本时，它会产生如下输出。
$./test1
Mon Feb 21 15:41:13 ESt 2014
The time and date are1
Let's see who′s logged into the Bysten1
Christine tty2
2014-02-21 15 :26
2014-0221 15:26
Sanantha tty3
Tinothy
tty1
20140221 15:26
user
tty7
20140219 14:03 (:0)
user
Pts/0
2014-0221 15:21 (:0.0)
$
很好，但如果想把文本字符串和命令输出显示在同一行中，该怎么办呢？可以用echo语句
的-n参数。只要将第一个echo语句改成这样就行：
1
echo -n *The time and date are1 *
你需要在字符串的两侧使用引号，保证要显示的字符串尾部有一个空格。命令输出将会在紧
接着字符串结束的地方出现。现在的输出会是这样：
The tine and date are1 Mon Feb 21 15:42:23 EST 2014
$./test1
Let′s see who′s logged into the systen1
Christine tty2
2014-0221 15126
20140221 15:26
Tinothy
Sanantha tty3
user
tty1
20140221 15:26
tty7
20140219 14:03 (10)
---
## Page 229
214
第11章构建基本脚本
user
pts/0
2014 0221 15: 21 (: 0 . 0)
完美！echo命令是shell脚本中与用户交互的重要工具。你会发现在很多地方都能用到它，尤
其是需要显示脚本中变量的值的时候。我们下面继续了解这个。
11.4使用变量
运行shell脚本中的单个命令自然有用，但这有其自身的限制。通常你会需要在shell命令使用
其他数据来处理信息。这可以通过变量来实现。变量允许你临时性地将信息存储在shell脚本中，
以便和脚本中的其他命令一起使用。本节将介绍如何在shell脚本中使用变量。
11.4.1环境变量
你已经看到过Linux的一种变量在实际中的应用。第6章介绍了Linux系统的环境变量。也可
以在脚本中访问这些值。
shell维护着一组环境变量，用来记录特定的系统信息。比如系统的名称、登录到系统上的用
户名、用户的系统ID（也称为UID）、用户的默认主目录以及shel查找程序的搜索路径。可以用
set命令来显示一份完整的当前环境变量列表。
$aet
BASH=/bin/bash
[ - . . ]
HOME= /home/Samantha
HOSTNAME=localhost , localdonain
HOSTTYPE=1386
IFS=S′ \tn*
IHSETTINGS_INTEGRATE_DESKTOP=ye8
IMSETTINGS_HODULE=none
LEssopEN=*1/uar/bin/leaaplpe,ah %a
LANG=en_US , utf8
LOCNAME=Sanantha
LINES=24
[ - . -1
在脚本中，你可以在环境变量名称之前加上美元符（S）来使用这些环境变量。下面的脚本
演示了这种用法。
$ cat test2
#1/bin/bash
Giaplay user Lnfornation fron the syaten,
echo *User Lnfo for userid: SUSER*
echo HOME: $HOME
echo UID: SUID 