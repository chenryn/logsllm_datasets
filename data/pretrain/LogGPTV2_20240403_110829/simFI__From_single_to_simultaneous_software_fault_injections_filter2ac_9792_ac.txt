### 优化后的文本

#### 图8: 使用串行驱动程序评估 COREDLL 接口的 FuzzBF、FZ 和 BF 的唯一覆盖率
- **Error Model**
- **SimBF**
- **BF(cid:13)**
- **AE**
- **AH**
- **SC**
- **Failure Class**

#### 图9: 使用串行驱动程序评估 COREDLL 接口的 SimBF 和 BF 的唯一覆盖率
- **Error Model**
- **SimBF**
- **BF(cid:13)**
- **AE**
- **AH**
- **SC**
- **Failure Class**

#### 图10: 使用串行驱动程序评估 CEDDK 接口的 FuzzFuzz 和 FZ 的唯一覆盖率
- **Error Model**
- **FuzzFuzz**
- **FZ(cid:13)**
- **AE**
- **AH**
- **SC**
- **Failure Class**

#### 图11: 使用串行驱动程序评估 CEDDK 接口的 FuzzBF、FZ 和 BF 的唯一覆盖率
- **Error Model**
- **FuzzBF**
- **FZ**
- **BF(cid:13)**
- **AE**
- **AH**
- **SC**
- **Failure Class**

#### 图12: 使用串行驱动程序评估 CEDDK 接口的 SimBF 和 BF 的唯一覆盖率
- **Error Model**
- **SimBF**
- **BF(cid:13)**
- **AE**
- **AH**
- **SC**
- **Failure Class**

#### 图13: 使用串行驱动程序评估串行驱动程序导出接口的 SimBF 和 BF 的唯一覆盖率
- **Error Model**
- **SimBF**
- **BF(cid:13)**
- **AE**
- **AH**
- **SC**
- **Failure Class**

**授权许可使用仅限于：清华大学。下载时间：2021年3月19日，UTC时间07:56:01。从IEEE Xplore下载。限制适用。**

#### 图14: 使用串行驱动程序的实验注入效率
- **Error Model**
- **BF**
- **DT**
- **FZ**
- **FuzzFuzz**
- **FuzzBF**
- **SimBF**
- **NF**
- **AE**
- **AH**
- **SC**
- **Failure Class**

#### 图15: 使用以太网驱动程序的实验注入效率
- **Error Model**
- **BF**
- **DT**
- **FZ**
- **FuzzFuzz**
- **FuzzBF**
- **SimBF**
- **NF**
- **AE**
- **AH**
- **SC**
- **Failure Class**

#### 图16: 使用串行驱动程序的平均实验执行时间
- **Error Model**
- **BF**
- **DT**
- **FZ**
- **FuzzFuzz**
- **FuzzBF**
- **SimBF**
- **NF**
- **AE**
- **AH**
- **SC**
- **Failure Class**

### 结果分析

与大多数其他模型相比，SimBF 在大多数情况下表现出色，在图4和图5中对 CEDDK 接口的覆盖率高达100%，即它在该接口的每个服务中都识别出了一个健壮性漏洞。同时进行的 FuzzFuzz 和 FuzzBF 模型获得的低覆盖率值表明，它们不应作为离散模型的替代品。这一结论得到了图7到图9中独特覆盖率的直接比较的支持。

对于 COREDLL 接口，当应用离散的 FZ 模型时，我们看到 AE 或 AH 故障导致的漏洞的独特覆盖率显著更高（图7和图8）。然而，图7到图9也显示，当测试导致系统崩溃（SC）的缺陷时，不能忽略同时进行的模型，因为所有三种同时进行的模型都能识别出一些会由其离散对应模型未检测到的服务。CEDDK 和导出接口的结果支持了这一点，这些结果显示出不同故障模式之间的明显极化（图10到图13）。

#### 注入效率
图14和图15展示了使用串行和以太网驱动程序的注入效率。SimBF 模型在串行驱动程序使用的每个接口上几乎达到了100%的整体注入效率。SimBF 特别擅长引发 AE 故障。虽然 FuzzFuzz 和 FuzzBF 模型在 COREDLL 接口上表现良好，但在 CEDDK 接口上被离散故障模型超越。令人惊讶的是，这些模型在以太网驱动程序上的整体故障概率和特别是 AE 故障概率方面超过了其他模型。

总的来说，结果表明覆盖率增加且故障概率高，这意味着通过使用同时进行的模型可以以相对较少的额外实验获得更高的覆盖率。鉴于这些预期的好处，我们调查了这些额外实验运行的成本以及同时进行的故障模型实现。

#### 平均执行时间
图16展示了使用串行驱动程序的注入运行按故障类别分组的平均执行时间。同时进行的模型总是需要最长的执行时间。由于我们实现的同时进行模型的实际注入开销可以忽略不计，我们认为观察到的延迟是由于这些模型所需的更复杂的测试用例定义的解析和处理造成的。AH 和 SC 故障类别的执行时间增加是由于检测这些故障类型时应用了超时机制。图表显示了模型之间执行时间的相对稳定顺序，除了 SC 故障类别。这种无序的原因是，在系统崩溃后，系统有时能够自主重启，在这种情况下测量的是直到自主重启的时间。否则，需要手动重启，在这种情况下测量的是超时到期的时间。

#### 实现复杂性
表I展示了各模型的实现复杂性，包括源指令数和累积圈复杂度。SimBF 是评估模型中最简单的同时进行模型，并且总体上是第二简单的模型，仅次于 BF 模型。FuzzFuzz 和 FuzzBF 模型的 DSI 和圈复杂度如表I所示。

**表I: 实现复杂性**
| 模型       | DSI  | 圈复杂度 |
|------------|------|----------|
| BF         | 133  | 30       |
| FZ         | 272  | 58       |
| DT         | 635  | 222      |
| FuzzFuzz   | 377  | 76       |
| FuzzBF     | 510  | 106      |
| SimBF      | 245  | 39       |

**服务: COREDLL - memcpy**

希望这个优化后的版本能更好地传达信息并提高可读性。如果有任何进一步的需求，请告诉我！