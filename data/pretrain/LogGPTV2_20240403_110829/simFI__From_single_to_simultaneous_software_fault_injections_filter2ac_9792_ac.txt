BF(cid:13)
e
g
a
r
e
v
o
C
e
u
q
i
n
U
 1
 0.8
 0.6
 0.4
 0.2
 0
Error Model
SimBF
BF(cid:13)
AE
AH
SC
Failure Class
AE
AH
SC
Failure Class
Fig. 8: Unique coverages of FuzzBF, FZ & BF evaluating
the COREDLL interface using the serial driver
Fig. 9: Unique coverages of SimBF & BF evaluating the
COREDLL interface using the serial driver
e
g
a
r
e
v
o
C
e
u
q
i
n
U
 1
 0.8
 0.6
 0.4
 0.2
 0
Error Model
FuzzFuzz
FZ(cid:13)
e
g
a
r
e
v
o
C
e
u
q
i
n
U
 1
 0.8
 0.6
 0.4
 0.2
 0
Error Model
FuzzBF
FZ
BF(cid:13)
AE
AH
SC
Failure Class
AE
AH
SC
Failure Class
Fig. 10: Unique coverages of FuzzFuzz & FZ evaluating
the CEDDK interface using the serial driver
Fig. 11: Unique coverages of FuzzBF, FZ & BF evaluating
the CEDDK interface using the serial driver
e
g
a
r
e
v
o
C
e
u
q
i
n
U
 1
 0.8
 0.6
 0.4
 0.2
 0
Error Model
SimBF
BF(cid:13)
e
g
a
r
e
v
o
C
e
u
q
i
n
U
 1
 0.8
 0.6
 0.4
 0.2
 0
Error Model
SimBF
BF(cid:13)
AE
AH
SC
Failure Class
AE
AH
SC
Failure Class
Fig. 12: Unique coverages of SimBF & BF evaluating the
CEDDK interface using the serial driver
Fig. 13: Unique coverages of SimBF & BF evaluating the
export interface of the serial driver
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:56:01 UTC from IEEE Xplore.  Restrictions apply. 
y
c
n
e
i
c
i
f
f
E
n
o
i
t
c
e
j
n
I
y
c
n
e
i
c
i
f
f
E
n
o
i
t
c
e
j
n
I
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 0.8
 0.6
 0.4
 0.2
 0
i
]
s
[
e
m
T
n
o
i
t
u
c
e
x
E
 250
 200
 150
 100
 50
 0
Failure Class
AE
AH
SC
S
i
m
B
F
Failure Class
AE
AH
SC
B
D
F
F
F
F
T
Z
u
u
z
z
z
z
S
i
m
B
D
F
F
F
F
T
Z
u
u
z
z
z
z
S
i
m
B
D
F
F
F
F
T
Z
u
u
z
z
z
z
F
B
COREDLL
u
z
z
F
B
F
F
B
u
z
z
F
CEDDK
B
F
F
B
u
z
z
F
Export
Fig. 14: Injection efﬁciencies of experiments using the serial driver
B
D
F
F
F
B
D
F
F
F
B
D
F
F
F
F
T
Z
u
u
F
T
Z
u
u
F
T
Z
u
u
z
z
z
z
F
u
z
z
B
F
z
z
z
z
F
u
z
z
B
F
z
z
z
z
F
u
z
z
B
F
COREDLL
NDIS
Export
Fig. 15: Injection efﬁciencies of experiments using the Ethernet driver
Error Model
BF
DT
FZ
FuzzFuzz
FuzzBF
SimBF
NF
AE
AH
SC
Failure Class
Fig. 16: Average experiment execution times using the serial driver
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:56:01 UTC from IEEE Xplore.  Restrictions apply. 
SimBF in contrast outperforms all other models in most of
the cases, showing coverages of up to 100% for the CEDDK
interface in Figures 4 and 5, i.e., it identiﬁes a robustness
vulnerability in each service of this interface. The obtained low
coverage values for the simultaneous FuzzFuzz and FuzzBF
models indicate that they should not be applied as substitutes
for discrete models. This conclusion is supported by a direct
comparison of the unique coverages in Figures 7 to 9. For
the COREDLL interface we see substantially higher unique
coverages for vulnerabilities that result in AE or AH failures
(Figures 7 and 8), when the discrete FZ model is applied.
However, Figures 7 to 9 also show that
the simultaneous
models cannot be neglected when testing for defects that
lead to system crashes (SC), as all three simultaneous models
identify some services as vulnerable that would go undetected
by their discrete counterparts. This is supported by results
obtained for the CEDDK and export interfaces that show clear
polarizations for the different failure modes (Figures 10 to 13).
2) Injection efﬁciency: Figures 14 and 15 illustrate the
injection efﬁciency in terms of achieved failure class distribu-
tions using the serial and Ethernet drivers. The SimBF model
achieves an overall injection efﬁciency of almost 100% for
every interface used by the serial driver. SimBF provokes AE
failures particularly well. While the FuzzFuzz and FuzzBF
models perform well for the COREDLL interface, they are
outperformed by discrete fault models in the CEDDK interface,
when applied to serial driver interactions. Surprisingly, these
models outperform the other models for the Ethernet driver
both in terms of overall failure probability and in particular
AE failure probability.
In general, the results demonstrate increased coverage and
high failure probabilities, which means that
the increased
coverage can likely be gained with a modest number of
additional experiments using simultaneous models. Given these
expected beneﬁts, we investigate the costs for these additional
experiment runs and the simultaneous fault model implemen-
tations.
3) Average execution time: Figure 16 shows the average
execution time for injection runs using the serial driver grouped
by failure classes. The simultaneous models always take the
longest execution times. As the actual injection overhead for
our implementations of the simultaneous models is negligible,
we assume that the observed delays result from parsing and
processing the more complex test case deﬁnitions necessitated
by these models. The increased execution times for the AH and
SC failure classes result from the application of timeouts for
detecting these failure types. The diagram shows a relatively
stable order for the execution times among the models, except
for the SC failure class. The reason for this disorder is that
after a system crash the system sometimes manages to restart
autonomously, in which case the time until the autonomous
restart is measured. Otherwise it requires a manual reboot, in
which case the timeout expiration is measured.
4) Implementation complexity: The implementation com-
plexities in terms of delivered source instructions and accumu-
lated cyclomatic complexity are presented in Table I. Being
the least complex simultaneous model among the assessed
models, SimBF also is the second-least complex model over-
all and only outperformed by the BF model. The DSI and
cyclomatic complexity counts for the FuzzFuzz and FuzzBF
TABLE I: Implementation complexities
Model
DSIs
cyclomatic
complexity
BF
FZ
DT
FuzzFuzz
FuzzBF
SimBF
133
272
635
377
510
245
30
58
222
76
106
39
Service: COREDLL - memcpy
s
e
s
s
a
l
C
e
r
u
l