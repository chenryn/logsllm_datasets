title:Protecting Web Usage of Credit Cards Using One-Time Pad Cookie Encryption
author:Donghua Xu and
Chenghuai Lu and
Andr&apos;e L. M. dos Santos
Protecting Web Usage of Credit Cards Using One-Time Pad 
Cookie Encryption 
Donghua Xu, Chenghuai Lu and Andre Dos Santos 
College of Computing 
Georgia Institute of Technology 
U.S.A. 
{xu,lulu,andre}@cc.gatech.edu 
Abstract 
The  blooming  e-commerce  is  demanding better 
methods to protect online users' privacy, especially the 
credit card information that is widely used in online 
shopping. Holding all these data in a central database 
of the web sites would attract hackers' attacks, impose 
unnecessary  liability  on  the  merchant  web  sites,  and 
raise the customers' privacy concerns. In this paper we 
introduce and discuss in details the secure distributed 
storage  of  sensitive  information  using  HTTP  cookie 
encryption. We are able to employ One-Time Pads to 
encrypt 
the  cookies,  because  encryption  and 
decryption  are  both  done  by  the  server,  which  is  an 
interesting  characteristic  overlooked  by  the  existing 
systems.  We  implemented  this  protocol  and  showed 
that it is simple, fast and easy to program with.  
Introduction 
1. 
With the rapid expansion of  the  Internet, more and 
more  people  realize  the  convenience  and  efficiency 
brought  by  E-commerce.  A  recent  study  [2]  showed 
that the online retail sales  were  expected  to  reach  65 
billion dollars in North America in 2001. Most of these 
online  transactions  are  carried  out  using  credit  cards. 
When a user purchases an item on the a merchant web 
site,  she  inputs  her  credit  card  number  and  expiration 
date  in  her  browser,  then  the  merchant  site  will  debit 
her credit card account and ship  the item to the user. 
Most  web  sites  store  the  credit  card  information  in  a 
database after a transaction, in order to save the users 
from  inputting  the  same  credit  card  information 
repeatedly  in  the  future.  When  the  user  makes  a 
purchase  next  time,  the  web site can directly use the 
credit card information that she input last time. 
With  billions  of  dollars  moving  online  by  credit 
card  transactions,  the  online  safety  of  credit  card 
numbers becomes a focus of public concern, especially 
as more and more large-scale online credit card thefts 
are  reported.  These  thefts,  as  shown  in  Table  1,  were 
all due to the fact that credit card numbers were stored 
in the merchant web sites’ central databases. 
Date 
Web Site broken 
into 
Credit 
Card 
numbers 
exposed 
1/2000  CDUniverse.com 
12/2000 CreditCards.com 
12/2000 Egghead.com 
3/2001  Bibliofind.com 
350,000 
55,000 
3,700,000 
98,000 
Table 1:Exposed credit card numbers of hacked 
web sites 
Table  1  only  shows  the  most  well  publicized 
examples of the online credit card thefts. On one hand 
people like the convenience of online shopping, on the 
other  hand  they  are  worried  about  the  safety  of  their 
credit  card  numbers.  The  fear  of  online  credit  card 
fraud  has  been  holding  back  many  people's  desire  to 
shop  online,  and  hampering  the  growth  of  the  E-
commerce [6]. 
The  reality  of  E-commerce  is  demanding  a  better 
way  to  protect  users'  privacy  (especially credit cards) 
and reduce the merchant websites' liability. As a matter 
of  fact,  the  merchant  web  sites  do  not  need  the 
customers  credit  card  numbers  after  a  transaction  is 
carried  out.  The  web  sites  store  the  credit  card 
information  only  for  the  convenience  of  the  same 
customer’s  next  transaction.  Unfortunately,  as  shown 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply. 
above,  storing  this  information  in  a  central  database 
always introduces big troubles after an attacker breaks 
into the server. 
In this paper we introduce a scheme for distributed 
storage  of  sensitive  information,  in  specific  a  One-
Time  Pad  HTTP  cookie  encryption  protocol,  to  avoid 
gathering  credit  card  in  a  central  database,  while 
providing  similar  user  convenience  at  the  same  time. 
In  essence,  our  approach  encrypts  the  credit  card 
information  using  One-Time  Pad,  an  unconditionally 
secure encryption method, and stores this information 
as  cookies  on  the  customers'  computers.  The central 
database of the web site only stores the one-time keys 
of  the  cookies,  so  even  if  an  attacker  breaks  into  the 
server,  what  she  would  obtain  are  the  one-time  keys 
which  are  just  random  strings  to  her  without  the 
corresponding cookies.  
Cookie encryption per se is not new. And Park and 
Sandhu [5] also briefly mentioned a similar concept of 
distributed  storage  of  private 
information  using 
encrypted  cookies.  However  they  did  not  analyze  the 
pros and cons of this scheme, neither did they propose 
any real life application of it. In this paper, we provide 
detailed  discussions  of  the  main  related  issues  of  this 
scheme,  and  introduce  One-Time  Pad  to  achieve 
perfect  secrecy  for  the  encryption.  In  addition,  the 
credit card information that this scheme protects has its 
own  characteristics  that  make  this  scheme  even  more 
secure  in  various  respects,  e.g.  replay  attack  or 
malleability issue.  
The  rest  of  the  paper  is  organized  as  follows.  In 
section  2  we  briefly  introduce  HTTP  cookie  and  the 
cookie encryption problem. In section 3 we present our 
One-Time  Pad  encryption  protocol.  In  section  4  we 
discuss and analyze the pros and cons of this protocol. 
Section  5  concludes  this  paper  and  briefly  discusses 
our future work. 
2.  HTTP Cookie and cookie encryption 
The  web  tra ffic  is  mostly  composed  of  HTTP 
traffic.  HTTP  is  a  state-less protocol, so designed to 
make  it  convenient  for  multiple  clients  to  access 
multiple  servers  arbitrarily.  Each  page-request  from 
the client is processed independently on the server. By 
nature  these  HTTP  page-requests  are  not  associated 
with  each  other.  However  sometimes  - 
in  fact, 
nowadays most of the time - it is necessary for a server 
to maintain the state of client accesses. Cookie [3] was 
designed  to  help  the  server  manage  states.  Cookies 
work  as  follows:  the  server  processes  a  page-request 
from  the  client,  then  returns  a  cookie  along  with  the 
page that the client requested; the next time the client 
sends a page-request to this server, the client sends that 
cookie  to  the  server  as  well.  Thus,  the server knows 
what  the  state  of  this  client  on  the  last  page-request 
was.  Cookies  are  now  used  extensively  by  Web 
servers, to keep track of the clients' state and provide 
more convenient service to users. 
The  clear-text  nature  of  cookie  implies  that  a 
malicious  intermediary  between  the  client  and  the 
server  would  be  able  to  intercept/modify  the  cookies. 
Therefore  the  standard  specification  of  cookie  [3] 
emphasizes  that  “...information  of  a  personal  and/or 
financial  nature  should  only  be  sent  over  a  secure 
channel.” 
However,  even  if  the  communication  channel  is 
secure,  cookies  can  still  be  easy  targets  on  the  users' 
computers.  There  are  various  ways  for  a  malicious 
party to steal this kind of information from the users' 
personal  computers,  ranging  from  Trojan  horses  to 
java-script  bug  exploits.  For  example,  the  E*Trade 
web  site  once  encrypted  users'  passwords  in  cookies. 
An  E*Trade  cookie  could  be  hijacked  by  a  malicious 
third  party  using  the  ``cross-site scripting'' technique, 
while the encryption of the password was so weak that 
a  cryptography  expert  could  break  it  in  20  minutes 
[12].  Therefore, 
if  a  cookie  contains  sensitive 
information, it must be strongly encrypted.  
One  might  argue  that  sensitive  information  should 
never appear in cookies in the first place. Instead, the 
server could generate a nonce string (or a Session ID), 
and send this nonce string in the cookie to the client, 
while storing this nonce string along with the sensitive 
information  itself  in  the  local  database.  When  the 
cookie returns from the client, the server could extract 
the  nonce  string  from  the  cookie,  and  retrieve  the 
information corresponding to the nonce string from the 
database.  By  doing  this,  the  client  side  only  stores  a 
nonce string in the cookie, which means nothing for an 
intruder even if she took hold of the cookie. 
However, sending only nonce strings in the cookies 
implies  storing  all  users'  personal  information  in  a 
central database, and there are serious risks in putting 
all  eggs  into  one  basket.  A  shopping  web  site  with  
thousands of customers might have thousands of credit 
card numbers in its local database. Such databases are 
always  luring  hacker  attacks,  and  would  cause  big 
troubles once the database servers were broken into, as 
shown  by  the  credit  card  theft  examples in section 1. 
Furthermore,  because  of  privacy  concerns,  customers 
might  not  like  to  have  their  credit  card  numbers 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply. 
gathered in a remote database. Although web sites can 
make  promises  that  they  will  never  mine  or  abuse 
customers' private information, some  customers would 
feel  more  comfortable  if  the  web  sites  simply  erase 
their private information as soon as the information is 
used.  
A better way for the merchant web site to reduce its 
own  liability  and  protect  the  users'  privacy  is  to 
strongly encrypt the  sensitive  information  and  send  it 
in  a  cookie  back  to  the  users'  computers,  instead  of 
storing  the  sensitive  information  in  the  web  server's 
database.  
One  notable  example  of  the  usage  of  cookie 
encryption  is  Microsoft's  Passport  technology  [4]  that 
allows  a  user  to  sign  into  multiple  web  sites  by 
inputting user id and password only once. The central 
Passport  server  issues  and  authenticates  encrypted 
cookies  with  the  user's  browser,  and  the  participating 
web  site  only  needs  to  redirect  the  browser  to  the 
Passport server when authentication is needed.  
However,  this  technology  still  maintains  all  users’ 
information  in  the  Passport  server's  central  database, 
raising  users'  concern  of  privacy,  luring  hackers' 
attacks, and forming an actual single point of failure on 
the Internet. In comparison, what we are proposing is 
to let the user keep her own sensitive information in a 
manner that is guaranteed to be secure, and not to store 
this information on the server at all. 
Although  Park  and  Sandhu  [5]  already  mentioned 
that  cookie  encryption  could  be  used  for  distributed 
storage of sensitive information, they did not propose 
or  analyze  any  specific  case  that  this  would  bring 
benefits over current use of nonces and session IDs. In 
this  paper  we  introduce  a  better  encryption scheme  – 
One-Time  Pad  –   and  show  where  this  would  bring 
benefit to real world applications/systems.   
3.  One-Time Pad Cookie Encryption 
[10] 
to  encrypt  wire  and 
OTP(One-Time Pad) was first proposed in 1926 by 
G.  Vernam 
radio 
communications.  In  1949  C. Shannon [8] proved the 
perfect  secrecy  of  OTP.  The  essence  of  OTP  is  to 
generate  a  random  string  of  at  least  the  length  of  the 
message to be the key of this message, then XOR the 
key  with  the  message  to  produce  the  ciphertext.  In 
order  to  decrypt  the  ciphertext,  XOR  the  ciphertext 
with  the  key  again.  It  is  impossible  to  crypt-analyze 
OTP, since every message has a different random key, 
and there is no way to distinguish the ciphertext from a 
random string. 
Although  OTP  is  simple,  fast  and  unconditionally 
secure,  it  is  not  widely  used.  There  are  two  obstacles 
that  prevent  OTP  from  being  used 
in  generic 
applications.  The  first  is  the  generation  of  random 
numbers.  Although  we  recognize  that  this  is  a  big 
obstacle for using OTP encryption we do not address 
any  new  solution  for  this  problem  in  this  paper.  We 
assume that if the second obstacle, the key distribution 
problem,  can  be  solved  then  pseudo  random  number 
generator  with  periodic  reseeding  can  be  used. 
Although the resulting algorithm would not be a one-
time  pad  on  its  most  strict  sense,  it  would  provide  a 
reasonable approximation to the one-time pad. 
In  the  usual  scenario  of  secure  communication, 
encryption  of  a  message  is  done  by  one  party,  and 
decryption  of  the  same  message  is  done  by  another 
party, with  both  parties  sharing  the  same  key  for  the 