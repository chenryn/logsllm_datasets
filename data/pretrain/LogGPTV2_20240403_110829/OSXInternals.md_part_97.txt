printf("memory allocated at %p\n", (void *)address);
// Create a named entry corresponding to the given mapped portion of our
// address space. We can then share this named entry with other tasks.
kr = mach_make_memory_entry_64(
(vm_map_t)mach_task_self(), // target address map
&size, // so many bytes
(memory_object_offset_t)address, // at this address
(vm_prot_t)(VM_PROT_READ|VM_PROT_WRITE), // with these permissions
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 51 of 135
(mem_entry_name_port_t *)&object_handle, // outcoming object handle
(mem_entry_name_port_t)NULL); // parent handle
// ideally we should vm_deallocate() before we exit
EXIT_ON_MACH_ERROR("mach_make_memory_entry", kr, KERN_SUCCESS);
// put some data into the shared memory
ptr = (char *)address;
strcpy(ptr, "Hello, Mach!");
// become a Mach server
kr = bootstrap_create_service(bootstrap_port, SERVICE_NAME, &server_port);
EXIT_ON_MACH_ERROR("bootstrap_create_service", kr, BOOTSTRAP_SUCCESS);
kr = bootstrap_check_in(bootstrap_port, SERVICE_NAME, &server_port);
EXIT_ON_MACH_ERROR("bootstrap_check_in", kr, BOOTSTRAP_SUCCESS);
for (;;) { // server loop
// receive a message
recv_hdr = &(recv_msg.header);
recv_hdr->msgh_local_port = server_port;
recv_hdr->msgh_size = sizeof(recv_msg);
kr = mach_msg(recv_hdr, // message buffer
MACH_RCV_MSG, // option indicating service
0, // send size
recv_hdr->msgh_size, // size of header + body
server_port, // receive name
MACH_MSG_TIMEOUT_NONE, // no timeout, wait forever
MACH_PORT_NULL); // no notification port
EXIT_ON_MACH_ERROR("mach_msg(recv)", kr, KERN_SUCCESS);
// send named entry object handle as the reply
send_hdr = &(send_msg.header);
send_hdr->msgh_bits = MACH_MSGH_BITS_LOCAL(recv_hdr->msgh_bits);
send_hdr->msgh_bits |= MACH_MSGH_BITS_COMPLEX;
send_hdr->msgh_size = sizeof(send_msg);
send_hdr->msgh_local_port = MACH_PORT_NULL;
send_hdr->msgh_remote_port = recv_hdr->msgh_remote_port;
send_hdr->msgh_id = recv_hdr->msgh_id;
send_msg.body.msgh_descriptor_count = 1;
send_msg.data.name = object_handle;
send_msg.data.disposition = MACH_MSG_TYPE_COPY_SEND;
send_msg.data.type = MACH_MSG_PORT_DESCRIPTOR;
kr = mach_msg(send_hdr, // message buffer
MACH_SEND_MSG, // option indicating send
send_hdr->msgh_size, // size of header + body
0, // receive limit
MACH_PORT_NULL, // receive name
MACH_MSG_TIMEOUT_NONE, // no timeout, wait forever
MACH_PORT_NULL); // no notification port
EXIT_ON_MACH_ERROR("mach_msg(send)", kr, KERN_SUCCESS);
}
mach_port_deallocate(mach_task_self(), object_handle);
mach_vm_deallocate(mach_task_self(), address, size);
return kr;
}
Let us now test the shared memory client and server programs.
$ gcc -arch ppc64 -Wall -o shm_ipc_client shm_ipc_client.c
$ gcc -arch ppc64 -Wall -o shm_ipc_server shm_ipc_server.c
$ ./shm_ipc_server
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 52 of 135
memory allocated at 0x5000
# another shell
$ ./shm_ipc_client
recv_msg.data.name = 0x001003
Hello, Mach!
$ ./shm_ipc_client abcdefgh
recv_msg.data.name = 0x001003
Hello, Mach!
writing "abcdefgh" to shared memory
$ ./shm_ipc_client
recv_msg.data.name = 0x001003
abcdefgh
$
^C
$
8.8. Kernel and User Address Space Layouts
The Mac OS X kernel has a 32-bit virtual address space whether it runs on a 32-bit or 64-bit machine.
Beginning with Mac OS X 10.4, it is possible to create 64-bit user programs, although very few user-
space APIs are available in 64-bit versions.
On some systems, a portion of every user address space is reserved for use by the kernel. For example, on
32-bit Windows, a user process is given the lower 2GB[14] of its 4GB virtual address space for private
use. The remaining 2GB is used by the operating system. Similarly, the Linux kernel divides a 4GB user
address space into two parts. The operating system uses its portion by mapping the kernel into the address
space of each process, which avoids the overhead of switching address spaces when the kernel needs to
access a user virtual address space. However, there still needs to be a change in the privilege level.
[14] Certain versions of Windows allow the user address space size to be varied between 2GB
and 3GB through a boot-time option.
This reduces the size of the available virtual address space for both the kernel and user. The benefit is that
user virtual addresses can be directly accessed in the kernel. An operation such as a copyout() or copyin
() can be implemented as a simple memory copy (although with a page-faulting caveat).
Mac OS X does not map the kernel into each user address space, and therefore each user/kernel transition
(in either direction) requires an address space switch. Mac OS X does map a variety of library code and
data into each task's address space, which reduces the amount of arbitrarily usable virtual memory
available to the task.
Table 82 shows several VM-related limits known to the PowerPC version of the Mac OS X kernel. Many
but not all of these limits are the same on the x86 version of Mac OS X.
Table 82. VM-Related System Limits
Mnemonic Value Notes
VM_MAX_PAGE_ADDRESS 0x0007_FFFF_FFFF_F000 Highest possible page address.
(PowerPC) Mac OS X 10.4 provides 51 bits of
user virtual memory on 64-bit
hardware.
MACH_VM_MIN_ADDRESS 0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 53 of 135
MACH_VM_MAX_ADDRESS 0x0007_FFFF_FFFF_F000
(PowerPC)
VM_MIN_ADDRESS (32-bit) 0
VM_MAX_ADDRESS (32-bit) 0xFFFF_F000
USRSTACK (32-bit) 0xC000_0000 Default initial user stack pointer
for a 32-bit process.
VM_MIN_ADDRESS (64-bit) 0
VM_MAX_ADDRESS (64-bit) 0x7_FFFF_FFFF_F000
USRSTACK64 (64-bit) 0x7_FFFF_0000_0000 Default initial user stack pointer
for a 64-bit process.
VM_MIN_KERNEL_ADDRESS 0x0000_1000 Minimum kernel virtual
addressdoes not include the first
page, which contains the exception
vectors and is mapped V=R.
VM_MAX_KERNEL_ADDRESS 0xDFFF_FFFF Maximum kernel virtual
addressdoes not include the last
512MB, which is used as the user
memory window (see Table 83).
KERNEL_STACK_SIZE 16KB The fixed size of a kernel thread's
stack.
INTSTACK_SIZE 20KB Interrupt stack size.
The Mac OS X kernel uses an optimization called the user memory window, which maps a portion of a
user address spaceon a per-thread basisinto the last 512MB of the kernel virtual address space. The kernel
uses this mechanism during operations such as copyin(), copyout(), and copypv(). As shown in Table
82, the window starts at kernel virtual address 0xE000_0000. Consequently, a user virtual address addr
will be visible in the kernel at virtual address (0xE000_0000 + addr).
Let us now look at how the kernel and user virtual address spaces are laid out in Mac OS X. Tables 83 and
84 show the layouts of the kernel and user (32-bit) virtual address spaces, respectively, in Mac OS X 10.4.
Table 83. Kernel Virtual Address Space Layout (32-bit PowerPC, Mac OS X 10.4)
Start End Notes
0x0000_0000 0x0000_4FFF Exception vectors and low-memory code in
osfmk/ppc/lowmem_vectors.s
0x0000_5000 0x0000_5FFF Low-memory globals
0x0000_6000 0x0000_6FFF Low-memory shared page used for low-level
debugging
0x0000_7000 0x0000_DFFF Boot processor interrupt and debug stacks
0x0000_E000 0x0FFF_FFFF Kernel code and data
0x1000_0000 Physical memory window
0xDFFF_FFFF Highest kernel virtual address known to the
VM subsystem
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 54 of 135
0xE000_0000 0xFFFF_FFFF User memory window
Table 84. User Virtual Address Space Layout (32-bit, Mac OS X 10.4)
Start End Notes
0x0000_0000 0x0000_1000 So-called zero page (__PAGEZERO)inaccessible
by default so that dereferencing a NULL pointer
(including small offsets from a NULL pointer)
causes a protection fault
0x0000_1000 0x8FDF_FFFF Application address range (about 2.3GB)
0x8FE0_0000 8x8FFF_FFFF Space reserved exclusively for Apple system
libraries; e.g., the dynamic linker's text
segment, mapped starting at 0x8FE0_0000
0x9000_0000 0x9FFF_FFFF Global shared text segment, reserved
exclusively for Apple system libraries; e.g.,
the system library's text segment, mapped
starting at 0x9000_0000
0xA000_0000 0xAFFF_FFFF Global shared data segment, reserved
exclusively for Apple system libraries; e.g.,
the system library's data segment, mapped
starting at 0xA000_0000
0xB000_0000 0xBFFF_FFFF Preferred address range for the application's
main thread
0xC000_0000 0xEBFF_FFFF Additional space available for third-party
applications and framework code
0xF000_0000 0xFDFF_FFFF Range preferred for use by additional thread
stacks, although applications may use this
range as necessary
0xFE00_0000 0xFFBF_FFFF Range reserved for use by the pasteboard and
other system services; not to be used by user
programs
0xFFC0_0000 0xFFFD_FFFF Range preferred for use by other system
services, although applications may use this
range as necessary
0xFFFE_0000 0xFFFF_7FFF Range reserved for use by system services and
not to be used by user programs; e.g., a
portion of the address range starting at
0xFFFE_C000 is used by the Objective-C
library as a commpage for optimizing message
dispatch
0xFFFF_8000 0xFFFF_EFFF System-shared commpage (seven pages)
0xFFFF_F000 0xFFFF_FFFF Last page of a 32-bit address space; cannot be
mapped by the Mach VM subsystem
Although virtual memory allows each task to theoretically use any virtual address in its virtual address
space, in practice, a subset of each task's virtual address space is reserved for conventional or situational
purposes. For example, the system maps code and data into predefined address ranges in every task's
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 55 of 135
address space. Moreover, a task may be disallowed to access certain address ranges entirely. For example,
every task is disallowed access to the first memory page by default. As a result, a 32-bit task, whose
virtual address space is 4GB in size (corresponding to the range defined by 0 and 0xFFFF_FFFF as the
lowest and highest virtual memory addresses, respectively), has only a subset of its address space to use
for arbitrary purposes.
To sum up, the kernel does not take any part of a process's address space. The kernel and every user
process get the full 4GB (32-bit) address space. Each transition from user to kernel (and back) requires an
address space switch.
The kernel supports setting a per-thread bit (ignoreZeroFault) that instructs the kernel to ignore a page
fault because of the thread accessing page 0. This is useful in the case of certain ROM device drivers that
access page 0 when they start. If the bit is set for the faulting thread and the faulting address is within the
zeroth page, the trap handler simply continues. This technique is deprecated in recent versions of Mac OS
X. It was used in earlier versions by the I/O Kit to temporarily allow a "native" driver to access page 0.
When there is a copy-in/copy-out, the code that eventually talks to the MMU handles the mapping
between address spaces. The mapping's job is to translate a given address to a mapped address per the
address space in use. The resultant address is then used in the copy operation.
Because of the address space switch (the kernel uses the entire 4GB address space), copy-in/copy-out
operations, particularly on small amounts of memory, can be expensive. System calls become expensive
as well.
8.9. Universal Page Lists (UPLs)
The kernel provides an abstraction called a universal page list (UPL), which can be thought of as a
wrapper around a bounded set of pages.[15] A UPL describes a set of physical pages associated with some
address range of a VM object. In particular, a UPL provides a snapshot of various properties of its pages,
such as whether the pages are mapped, dirty, encrypted, busy (access-blocked), or correspond to I/O
memory.
[15] A UPL can be considered as a Mach or BSD equivalent of an instance of the
IOMemoryDescriptor class instance in the I/O Kit.
A UPL is internally created by upl_create() [osfmk/vm/vm_pageout.c], which allocates and initializes
a UPL structure (struct upl [osfmk/vm/vm_pageout.h]). If the UPL is being created with the
UPL_SET_INTERNAL control flag, all information about the UPL is contained in a single memory object,
allowing convenient transportation of the UPL within the kernel. In the case of an internal UPL,
upl_create() allocates additional memory to hold a upl_page_info structure
[osfmk/mach/memory_object_types.h] for each page in the UPL. The maximum number of pages a
UPL can handle is MAX_UPL_TRANSFER, which is defined to be 256that is, 1MB of memory.
The primary clients of the UPL API include pagers, the file system layer, and the unified buffer cache
(UBC). Clients of the UPL API do not call upl_create() directly when they need to create a UPL based
on the contents of a VM object; instead, they call other, higher-level functions such as
vm_object_upl_request(), vm_object_iopl_request(), and vm_map_get_upl(). The latter is useful
when you do not have the VM object in question, since it looks up the underlying VM object given an
address range in a VM map. However, this function returns a UPL only for the first VM objectif the
requested range is not covered by the first VM object, the caller must make another call to retrieve another
UPL, and so on.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 56 of 135
Once a UPL has been modified, the changes can be committed or aborted through upl_commit() and
upl_abort(), respectively. These functions operate on the entire UPL. A specific range of the UPL can
be committed or aborted through upl_commit_range() and upl_abort_range(), respectively. The UBC
functions ubc_upl_commit_range() and ubc_upl_abort_range() are wrappers around the UPL
functionsthey additionally deallocate the UPL if its associated VM object has no resident pages after the
commit or abort, respectively.
8.10. Unified Buffer Cache (UBC)
Historically, UNIX allocated a portion of physical memory to be used as the buffer cache. The goal was to
improve performance by caching disk blocks in memory, therefore avoiding having to go to the disk while
reading or writing data. Before the advent of unified buffer caching, a cached buffer was identified by a
device number and a block number. Modern operating systems, including Mac OS X, use a unified
approach wherein in-memory contents of files reside in the same namespace as regular memory.
The UBC conceptually exists in the BSD portion of the kernel. Each vnode corresponding to a regular file
contains a reference to a ubc_info structure, which acts as a bridge between vnodes and the
corresponding VM objects. Note that UBC information is not valid for system vnodes (marked as
VSYSTEM), even if the vnode is otherwise regular. When a vnode is createdsay, because of an open()
system calla ubc_info structure is allocated and initialized.
// bsd/sys/ubc_internal.h
struct ubc_info {
memory_object_t ui_pager; // for example, the vnode pager
memory_object_control_t ui_control; // pager control port
long ui_flags;
struct vnode *ui_vnode; // our vnode
struct ucred *ui_cred; // credentials for NFS paging
off_t ui_size; // file size for vnode
struct cl_readahead *cl_rahead; // cluster read-ahead context
struct cl_writebehind *cl_wbehind; // cluster write-behind context
};
// bsd/sys/vnode_internal.h
struct vnode {
...
union {
struct mount *vu_mountedhere; // pointer to mounted vfs (VDIR)
struct socket *vu_socket; // Unix IPC (VSOCK)
struct specinfo *vu_specinfo; // device (VCHR, VBLK)
struct fifoinfo *vu_fifoinfo; // fifo (VFIFO)
struct ubc_info *vu_ubcinfo; // regular file (VREG)
} v_un;
...
};
The UBC's job is to cache file-backed and anonymous memory in physical memory using a greedy
approach: It will attempt to consume all available physical memory. This is especially relevant for 32-bit
processes on a 64-bit machine with more than 4GB of physical memory. Although no single 32-bit
process can directly address more than 4GB of virtual memory, the larger physical memory benefits all
processes as it amounts to a larger buffer cache. As we saw earlier, resident pages are evicted using an
LRU-like page replacement policy. Recently used pages, say, corresponding to a file that was recently
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 57 of 135
read, or memory that was recently allocated, are likely to be found in the buffer cache.
You can see the buffer cache at work by using the fs_usage utility. As we saw in Chapter 6, fs_usage
uses the kernel's kdebug facility to perform fine-grained tracing of kernel events. The page-fault handler
(vm_fault() [osfmk/vm/vm_fault.c]) creates trace records for various types of page faults.
// bsd/sys/kdebug.h
#define DBG_ZERO_FILL_FAULT 1
#define DBG_PAGEIN_FAULT 2
#define DBG_COW_FAULT 3
#define DBG_CACHE_HIT_FAULT 4
Specifically, a fault of type DBG_CACHE_HIT_FAULT means that the handler found the page in the UBC. A