# Title: Connection-Oriented DNS to Improve Privacy and Security

## Authors
- Liang Zhu
- Zi Hu
- John S. Heidemann
- Duane Wessels
- Allison Mankin
- Nikita Somaiya

## Affiliations
- **USC/Information Sciences Institute**: Liang Zhu, Zi Hu, John S. Heidemann, Nikita Somaiya
- **Verisign Labs**: Duane Wessels, Allison Mankin

## Abstract
The Domain Name System (DNS) is typically implemented using the connectionless User Datagram Protocol (UDP). However, this approach introduces several security and privacy challenges, including eavesdropping, source-address spoofing, injection attacks, and limitations on response size. To address these issues, we propose T-DNS, which uses Transmission Control Protocol (TCP) for improved security and Transport Layer Security (TLS) for enhanced privacy. TCP mitigates denial-of-service (DoS) attacks by preventing amplification and reducing server load, while TLS protects user queries from eavesdroppers. Although TCP and TLS introduce additional overhead, our analysis shows that T-DNS can achieve these benefits with only a modest increase in latency. We demonstrate that with careful implementation, such as query pipelining, out-of-order responses, and connection reuse, T-DNS can be deployed without significant performance degradation.

## 1. Introduction
The Domain Name System (DNS) is a fundamental protocol for resolving domain names into IP addresses. It is designed to be simple and efficient, typically using UDP for its request-response model. However, the reliance on UDP has led to several security and privacy vulnerabilities, including eavesdropping, DoS attacks, and constraints on key sizes and policy choices.

### 1.1 Motivation
This paper makes two primary contributions:
1. **Security and Privacy Improvements**: We demonstrate that the connectionless nature of DNS is a root cause of various security and privacy weaknesses. By adopting a connection-oriented approach with TCP and TLS, T-DNS significantly enhances privacy and security.
2. **Performance Analysis**: We show that the benefits of T-DNS come at a modest cost. Our models and experiments indicate that the end-to-end latency increases by only 9% when using TLS between the client and recursive resolver, and by 22% when using TCP to the authoritative server. With connection reuse, the latency can be nearly equivalent to UDP once the connection is established.

### 1.2 Background
DNS was initially designed to map domain names to IP addresses. Its success led to its use in other applications, such as host integrity identification and content delivery networks. Despite its widespread adoption, DNS faces several challenges, including:
- **Privacy Concerns**: DNS traffic can be intercepted, revealing sensitive information about user activities.
- **DoS Vulnerabilities**: The stateless nature of UDP makes DNS servers susceptible to DoS attacks.
- **Response Size Limits**: UDP's small packet size limits the use of larger keys and more complex protocols.

### 1.3 Proposed Solution: T-DNS
T-DNS leverages TCP and TLS to address these issues:
- **TCP for Security**: TCP prevents DoS amplification and reduces the impact of DoS attacks on the server.
- **TLS for Privacy**: TLS encrypts DNS queries, protecting them from eavesdropping.

## 2. Problem Statement
### 2.1 Current DNS Architecture
DNS is a hierarchical, distributed system with three main components:
- **Stub Resolvers**: Clients that send queries to recursive resolvers.
- **Recursive Resolvers**: Servers that handle name resolution on behalf of stub resolvers.
- **Authoritative Servers**: Servers that provide answers for specific parts of the namespace.

### 2.2 Limitations of Single-Packet Exchange
The current DNS design, optimized for single-packet exchanges, has several limitations:
- **Payload Size Constraints**: Responses are limited to 512 bytes (without EDNS) or 4096 bytes (with EDNS), leading to fragmentation issues.
- **Source Address Spoofing**: UDP does not validate the source address, making it easy to spoof and launch DoS attacks.
- **Eavesdropping**: Unencrypted DNS traffic can be intercepted, compromising user privacy.

## 3. Why Connection-Oriented DNS?
### 3.1 Improved Security
- **Encryption**: TLS provides confidentiality for DNS queries, protecting them from eavesdropping.
- **DoS Mitigation**: TCP's connection establishment process helps prevent spoofing and amplification attacks.

### 3.2 Enhanced Privacy
- **End-to-End Encryption**: TLS ensures that DNS queries are encrypted from the client to the recursive resolver, and optionally to the authoritative server.

### 3.3 Larger Payload Support
- **TCP Robustness**: TCP handles large payloads more effectively than UDP, avoiding the need for IP fragmentation.

## 4. How T-DNS Works
### 4.1 Key Design Decisions
- **Query Pipelining**: Multiple queries can be sent over a single connection, reducing latency.
- **Out-of-Order Responses**: Responses can be processed as they arrive, improving efficiency.
- **Connection Reuse**: Persistent connections reduce the overhead of establishing new connections.
- **TCP Fast Open and TLS Session Resumption**: These techniques minimize the latency of connection setup.

### 4.2 Performance Evaluation
- **Latency Analysis**: End-to-end latency increases by 9% with TLS and 22% with TCP, but connection reuse can bring the latency close to that of UDP.
- **Server Load**: Conservative timeouts and connection reuse help manage server memory requirements, making T-DNS feasible on current hardware.

## 5. Conclusion
T-DNS offers a practical solution to the security and privacy challenges of the current DNS protocol. By using TCP and TLS, T-DNS enhances privacy, mitigates DoS attacks, and supports larger payloads. Our analysis and experiments show that these benefits can be achieved with only a modest increase in latency, making T-DNS a viable and effective improvement to the DNS ecosystem.