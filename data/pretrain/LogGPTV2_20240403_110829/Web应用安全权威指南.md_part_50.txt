### **授权漏洞的探讨**

即使管理菜单的 URL 被设计得难以被推测，也依然存在被恶意使用的风险。

#### **使用 Hidden 参数或 Cookie 保存权限信息**
授权漏洞的第三种类型是通过 hidden 参数或 Cookie 来存储权限信息。例如，某些网站仅需设置一个 `userkind=admin` 的 Cookie 即可使用户访问管理员功能。然而，这样的 Cookie 很容易被猜测出管理员的 Cookie 值，即便采用数字表示用户类型，同样面临被滥用的风险。

#### **授权漏洞总结**
本小节讨论了三种类型的授权漏洞：URL、hidden 参数及 Cookie 的篡改可能导致未经授权的功能使用。为了确保授权的安全性，应将权限信息存放在会话变量中，并在页面显示或执行任何操作前验证用户权限。

> **专栏：在 URL 中嵌入私密信息进行授权**
>
> 另一种授权方式是在 URL 中包含一些敏感信息，使得只有知道该 URL 的人才能访问特定资源。
>
> 将私密信息嵌入到 URL 中的方法有以下几种：
> - 使用长且难以猜测的随机字符串作为文件名
> - 在 URL 中添加一个令牌
> - 在 URL 中加入访问票（Access Ticket）
>
> 然而，这种做法并不推荐，因为它违背了使用 POST 方法发送敏感数据的原则（参见 3.1 节），并带来如下风险：
> - 通过 Referer 头泄露 URL
> - 用户主动分享 URL 至公开论坛
> - 搜索引擎可能索引含有私密信息的 URL
>
> 因此，原则上应避免在 URL 中嵌入私密信息。若不得不使用此方法，则需限制 URL 的有效时间，并警告用户不要公开此 URL。

### **5.3.3 授权管理的需求设计**
正确的授权实现首先需要在需求层面进行详细设计。笔者在多次参与授权审查过程中发现，很少有项目提供书面的授权设计方案。通常情况下，开发者只是默认地认为授权应该如此处理。

在设计权限管理系统时，建议先创建一个权限矩阵表。以应用服务提供商 (ASP) 为例，如图 5-27 所示，该系统由公司 A、B 和 C 共同使用，除了系统管理员外，各公司还有自己的企业管理员来管理内部员工。

![{%}](Image00212.jpg)
**图 5-27 ASP 服务的例子**

**表 5-5 权限矩阵示例**

| 功能                   | 系统管理员 | 企业管理者 | 普通用户 |
|------------------------|------------|------------|----------|
| 添加公司               | ○          | ×          | ×        |
| 添加/删除企业管理者     | ○          | ×          | ×        |
| 添加/删除公司员工       | ○          | ○          | ×        |
| 修改自己密码           | ○          | ○          | ○        |
| 修改他人密码           | ○          | ○（限本公司）| ×        |

创建权限矩阵有助于后续开发和测试阶段的准确性。

> **专栏：角色定义**
>
> 表 5-5 中的“系统管理员”、“企业管理者”、“普通用户”被称为角色（Role）。角色是一组权限的集合，用以描述用户的职责。角色不同于用户 ID；每个用户以某一角色身份在系统中活动。
>
> 不建议直接使用如 admin 或 root 这样的用户名，因为这可能导致：
> - 多个管理员之间的行为难以追溯
> - 共享密码增加安全风险
>
> 应遵循一人一 ID 的原则，根据各自职责分配不同角色。

### **5.3.4 如何正确实现授权管理**
许多授权漏洞源于仅在页面显示上进行权限控制，这是不够的。正确的做法是在任何操作前检查：
- 用户是否有权访问该页面（脚本）
- 用户是否具备对特定资源的操作权限（查看、修改、删除等）

用户信息应存储于会话变量中，防止被篡改。此外，还需注意：
- 根据会话中的用户 ID 检查权限
- 权限信息不应存储在 Cookie 或 hidden 参数中

### **5.3.5 总结**
本节介绍了授权管理中的常见安全问题及其解决方案。关键在于避免假设 URL、hidden 参数或 Cookie 不会被篡改，而是将重要信息存储在会话变量中，并在所有需要权限的操作前进行验证。

## **5.4 日志输出**
日志记录对于应用程序的安全至关重要。下面我们将探讨如何合理设计日志输出。

### **5.4.1 日志输出的目的**
日志记录的重要性体现在以下几个方面：
- 通过分析日志发现攻击迹象，预防潜在威胁
- 攻击发生后用于事后调查
- 支持运维审核

在 5.1 节中我们提到，登录尝试失败次数异常增多可能是遭受攻击的征兆。因此，日志必须记录登录尝试及其结果。此外，日志也是攻击事件深入调查的关键依据。

### **5.4.2 日志种类**
Web 应用程序涉及的日志主要有三类：
- Web 服务器日志（如 Apache、IIS）
- 应用程序日志
- 数据库日志

这里重点介绍应用程序日志，它又细分为：
- 错误日志
- 访问日志
- 调试日志

#### **错误日志**
错误日志记录应用程序运行过程中出现的各种错误。当 Web 应用发生错误时，除了向用户展示简要信息外，还应在日志中详细记录错误原因，以便日后排查。此外，频繁的 SQL 错误或文件打开错误可能暗示着攻击行为，需要特别关注。

#### **访问日志**
访问日志记录用户对资源的访问情况。无论是正常还是异常的访问都应被记录。近年来，随着对个人信息保护的关注度提高，越来越多的应用开始重视访问日志的记录。许多法律法规也要求保存访问日志。

#### **调试日志**
调试日志主要用于输出调试信息。由于其可能影响系统性能并暴露敏感信息，一般仅在开发或测试环境中启用，在生产环境中则应关闭。

### **5.4.3 关于日志输出的需求**
设计阶段需考虑的日志相关需求包括：
- 需要记录的所有事件
- 日志内容及格式
- 日志文件保护
- 日志文件存储位置
- 日志文件保存期限
- 服务器时间同步

#### **需要记录到日志里的所有事件**
日志应记录重要的认证与账号管理事件，如：
- 登录/登出（成功或失败）
- 账号冻结
- 用户注册/注销
- 密码更改
- 查看重要信息
- 执行关键操作（购买、转账、发送邮件等）

#### **日志里应包括的信息和格式**
日志内容应遵循 4W1H 原则，至少包括：
- 访问时间
- 客户端 IP 地址
- 用户 ID
- 访问资源（URL、页面编号、脚本 ID 等）
- 操作类型（查看、修改、删除等）
- 操作对象（资源 ID 等）
- 操作结果（成功/失败、处理记录数等）

为便于查阅，建议统一日志格式。

#### **日志文件保护**
为防止日志被篡改或删除，应将其存储于独立于 Web 和数据库服务器的地方，并指定专人负责管理。同时，限制仅有授权人员才能访问日志。

#### **日志文件保存位置**
日志可以存储于文件或数据库中，但从安全角度出发，最好将其保存在单独的服务器上。

#### **日志文件保存期限**
根据网站性质确定合理的日志保存期限。考虑到长期保存可能带来的信息泄露风险，可定期将日志备份至物理安全介质，如 DVD。

#### **服务器的时间调整**
为了从多个来源的日志中准确追踪事件，需确保各服务器时间一致。可通过 NTP 协议实现这一目标。

### **5.4.4 实现日志输出**
日志可以存储于文件或数据库中，也可选择使用专门的日志库，如 Java 的 log4j、PHP 的 log4php 或 .NET 的 log4net。这些工具提供了灵活的日志配置选项，方便指定日志存储位置及其他参数。