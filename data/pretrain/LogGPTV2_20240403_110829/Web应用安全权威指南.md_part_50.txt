拿最后的例子来说，即使把管理菜单的 URL
做得很难被推测，也还是存在被恶意使用的可能性的。
#### **使用 hidden 参数或者 Cookie 保存权限信息** {line-num="1350 1351"}
授权漏洞的第三种类型就是使用 hidden 参数或者 Cookie
来保存权限信息的情况。比如通过设置一个 userkind=admin 的 Cookie
就能使用户能够使用管理员功能这样的网站。
在这种情况下，该 Cookie 很容易让人推测出管理员的 Cookie
值，即使使用数字作为用户类型，也同样存在被恶意使用的可能性。
#### **授权漏洞总结** {line-num="1356 1357"}
在本小节我们对授权中存在的 3
种类型的漏洞进行了说明。这些漏洞的共同问题在于如果对 URL、hidden
参数、Cookie 进行篡改的话，就可以非法使用网站的正常功能了。
要想正确实现授权功能，需要将权限信息保存到会话变量中去，这样攻击者就不能篡改权限信息了。并且在进行页面显示或者处理之前，还需要对用户权限进行检查。
> **专栏：将私密信息嵌入 URL 进行授权处理**
>
> 也有不通过认证或会话管理技术来实现授权的方法，那就是在 URL
> 中嵌入一些私密信息，使只有知道这个 URL 的人才能访问。
>
> 将私密信息嵌入到 URL 中，有下面 3 种方法。
>
> -   将 URL 中的文件名设为非常长的难以推测的随机字符串
>
> -   在 URL 中嵌入一个令牌
>
> -   在 URL 中嵌入访问票（Access Ticket）
>
> 但不管是哪种实现方式，在 URL
> 中嵌入私密信息的做法我们都是不推荐的。因为这违反了采用 POST
> 方法发送私密信息的原则（请参考 3.1
> 节），而且还存在下面列出的一些非常现实的风险。此外，它还会导致个人信息泄露。
>
> -   通过 Referer 泄露 URL
>
> -   用户自己将 URL 发布到论坛等地方将 URL 公开
>
> -   搜索引擎可能会收录含有私密信息的 URL
>
> 因此原则上应该禁止采用在 URL
> 中嵌入私密信息的方式来进行授权，如果迫不得已不得不使用该方式的话，那么应该将
> URL 的可访问时限限制在最短范围内，并且向用户强调公开此 URL 的危险性。
### **5.3.3 授权管理的需求设计** {#text00000.html#nav_point_80 line-num="1380 1381"}
要想正确实现授权功能，必须先要在需求层次上进行必要的设计。笔者在检查漏洞工作中参加过很多次关于授权的审查，但是还从来没有看到过有谁能拿出书面的授权设计文档，来说明他们认为的"授权应该是怎样的"。更多情况下他们是潜意识里认为授权管理就是应该那么去做的。
在做权限管理的设计时，可以先创建一个权限矩阵表。下面以一个权限管理比较复杂的应用场景
ASP（Application Service
Provider）为例，来看一下如何创建权限矩阵表，如图 5-27
所示。例子中的应用以 ASP 的形式，被公司 A、公司 B、公司 C
所使用。用户中除了整个系统的管理员以外，各个公司还有自己内部的企业管理者用来管理自己公司的员工等。
![{%}](Image00212.jpg)
**图 5-27 ASP 服务的例子**
**表 5-5 权限矩阵的例子**
                           系统管理员   企业管理者            普通用户
  ------------------------ ------------ --------------------- ----------
  添加公司                 ○            ×                     ×
  添加、删除企业管理者     ○            ×                     ×
  添加、删除公司员工用户   ○            ○                     ×
  修改自己密码             ○            ○                     ○
  修改别人密码             ○            ○（只限本公司用户）   ×
如果我们在设计的时候创建了这样的权限矩阵，就能正确地进行后面的开发和测试。
> **专栏：什么是角色**
>
> 表 5-5
> 里的"系统管理员""企业管理者""普通用户"一般我们管他们叫作角色（Role）。角色是指拥有一组权限，并用能表现其职责的词汇来命名的称呼。表
> 5-5 同时很好地解释了角色定义的问题。
>
> 角色和用户是不同的概念，用户以某一角色在系统中进行各种活动。
>
> 笔者不推荐在实践中不使用角色，而只使用类似 admin 或者 root
> 这样一看就是管理员用户的方法，原因有如下两点。
>
> -   如果有多个管理员的话，事后调查会比较困难
>
> -   管理员密码被多人公用，容易发生安全事故
>
> 所以，应该以一人一个 ID 的原则为每个用户创建
> ID，并根据各人的职责不同分配不同的角色。
### **5.3.4 如何正确实现授权管理** {#text00000.html#nav_point_81 line-num="1415 1416"}
用户授权出现漏洞的时候，很多原因都是只想在页面显示中进行权限控制，这是不充分的。正确的方法是在任何操作之前都应该进行如下检查。
-   用户是否可以访问该页面（脚本）
-   是否有操作（查看、修改、删除等）该资源的权限
用户信息应该保存在会话变量里，以防止被人篡改。这不光是安全授权的要求，也是保存用户认证信息的原则。
-   根据保存在会话里的用户 ID 检查权限
-   权限信息不能保存在 Cookie 或者 hidden 参数里
### **5.3.5 总结** {#text00000.html#nav_point_82 line-num="1427 1428"}
在本节中我们介绍了在实现授权管理中容易发生的安全性问题，以及如何正确地去设计授权系统。
我们也介绍了，容易导致授权管理漏洞发生的原因，其一就是由于开发者认为存放在
URL 或者表单的 hidden 参数、Cookie
等内容不会被篡改。正确的实现方法是将这些关键信息都保存在不能被随意篡改的会话里，并在需要指定权限才能进行的操作之前进行权限检查。
## **5.4 日志输出** {#text00000.html#nav_point_83 line-num="1433 1434"}
应用程序输出的日志在安全方面上也有很重要的意义，下面我们就看看应该如何去考虑日志的输出。
### **5.4.1 日志输出的目的** {#text00000.html#nav_point_84 line-num="1437 1438"}
应用程序的日志之所以在安全方面有重要意义，原因有以下 3 点。
-   通过日志发现被攻击或者事故的先兆，可以防患未然
-   用于在遭受攻击或者发生事故后进行事后调查
-   用于进行应用程序的运维审查
在 5.1
节里我们已经对从日志里发现攻击预兆进行了说明。如果日志里记录的尝试登录或者登录失败的次数比平时多的话，则很可能是受到了外部攻击。如果想做类似的调查，那么日志里必须要记录尝试登录及登录结果的信息才行。
另一方面，如果 Web
应用受到攻击后发生损失，也需要对攻击的详细情况进行深入的调查，这时候日志文件也是不可或缺的。如果日志没保存下来，或者保存的信息不足，要想做更深入的调查就比较困难了。
### **5.4.2 日志种类** {#text00000.html#nav_point_85 line-num="1449 1450"}
Web 应用里面涉及的日志大概有以下几种。
-   Web 服务器（Apache、IIS 等）的日志
-   应用程序的日志
-   数据库的日志
这三种日志都是必不可少的，我们这里仅对应用程序的日志做详细说明。应用程序的日志也可以细分为下面几类。
-   错误日志
-   访问（Access）日志
-   调试（DeBug）日志
下面分别说明这 3 种类型的日志。
#### **错误日志** {line-num="1465 1466"}
错误日志，顾名思义，就是记录应用程序里出现的各种错误信息的日志。当 Web
应用程序内部发生错误的时候，除了在页面内显示给用户诸如"服务器忙，请稍候再试"等信息外，还要将错误的详细情况及原因等记录到日志里。之所以这么做，是因为将错误的详细信息显示给用户，除了使用户困惑以外毫无用处，而且还可能会给攻击者提供攻击线索。而记录到日志里，能为调查或者发现问题提供方便。
错误日志也可以用来检测攻击。比如攻击者在尝试 SQL
注入或者目录遍历攻击的时候，日志中应该存在很多 SQL
错误或者文件打开错误。这些错误正常情况下应该是很少发生的，如果持续发生这样的错误的话，就要怀疑系统是否正在遭受攻击。即使这些错误日志不是由于攻击造成的，考虑到提高应用程序的稳定性，也应该对此类错误进行详细调查并进行修改。
#### **访问日志** {line-num="1471 1472"}
访问日志是 Web
应用程序里记录用户访问某资源或者使用某功能的日志。和错误日志不同的是，不管是正常还是异常的访问，都需要记录到访问日志里。
Web 应用程序刚出现的时候（大概在 2004
年之前），多数应用程序中只记录错误日志，也就是说很多异常情况虽然都在应用程序日志里记录下来，但是正常情况的日志还都基本依赖于
Web
服务器记录。不过之后为了应对个人信息泄漏事件等，人们也开始逐渐重视起正常的访问日志来了。
为了达到前面 5.4.1 节里说的日志的 3
个目标的要求，记录正常的访问日志也是很重要的。
另外，很多法律、规范等也要求应用保存访问日志。比如在日本至少就有《个人信息保护法》、《金融商品交易法》以及《Payment
Card
Industry（PCI）数据安全法规（PCI-DSS）》等法律、法规等对个人信息、访问日志等做出了明确的规定。
#### **调试日志** {line-num="1481 1482"}
调式日志，顾名思义，是用来输出调试信息的日志。调试日志输出量太大的话，可能会影对系统的性能造成影响。而且，如果调试日志输出的内容过于详细甚至包括敏感信息的话，还可能带来个人信息泄露问题。调试日志一般只在开发或者测试环境中输出，在生产环境下则不应该输出调试日志。
### **5.4.3 有关日志输出的需求** {#text00000.html#nav_point_86 line-num="1485 1486"}
这一节我们将对在设计时要考虑的日志相关的需求加以说明。
-   需要记录到日志里的所有事件
-   日志里应包括的信息和格式
-   日志文件保护
-   日志文件保存位置
-   日志文件保存期限
-   服务器的时间调整
#### **需要记录到日志里的所有事件** {line-num="1496 1497"}
需要记录到日志里的事件类型，既不能过多也不能太少，要根据日志的使用目的来决定都需要记录哪些事件。一般来说涉及下面列举得用户认证、账号管理等重要信息及操作，需要记录到日志里。
-   登录、退出（包括成功和失败两种情况）
-   账号冻结
-   用户注册、删除
-   修改密码
-   查看重要信息
-   重要操作（购买、转账支付、发送邮件等）
#### **日志里应包括的信息和格式** {line-num="1507 1508"}
日志里面需要记载的信息，根据
4W1H（When、Who、Where、What、How）的原则，应该包括下面列出的一些内容。
-   访问时间
-   远程 IP 地址
-   用户 ID
-   访问资源对象（URL、页面编号、脚本 ID 等）
-   操作类型（查看、修改、删除等）
-   操作对象（资源 ID 等）
-   操作结果（成功或者失败、处理记录数量等）
另外，系统监查可能需要查询很多种类型的日志，所以日志的格式最好统一，以方便日后查看。
#### **日志文件保护** {line-num="1521 1522"}
如果日志文件被篡改或者删除的话，那么其存在的意义也就没有了，所以对日志文件自身的安全也必须给以足够的重视并加以保护。除了文件被破坏以外，由于日志中还可能包含个人信息或者其他敏感信息等，也应该限制只有有相关权限的人才能查看日志。
为了保护日志文件，尽可能将其保存在 Web
服务器或者数据库服务器以外的地方，并且分配日志管理者这一角色，并将此角色和网站管理者分离。
#### **日志文件保存位置** {line-num="1527 1528"}
日志可以选择保存到文件里，也可以保存到数据库中，但是出于上一小节提到的日志保护的目的，最好把日志保存到单独的服务器上。也许这会导致运营成本上升，所以需要在设计阶段即开始讨论此问题。
#### **日志文件保存期限** {line-num="1531 1532"}
在最初的设计阶段，还要根据网站性质，决定各种日志文件的保存期限策略。但是考虑到为了方便对安全事件进行调查，也许很难设置一个合理的日志保存期限，所以也有人采用无期限保存日志的方法。
但是同时日志文件里有可能包含机密信息，如果保存期限变长，那有可能提高信息泄漏的危险，这就和上面所说的矛盾了。我们可以将日志定时地复制到
DVD
光盘，然后将这些媒体保存在物理上安全的地方等，这样即能延长日志保存期限又能保护日志安全。
#### **服务器的时间调整** {line-num="1537 1538"}
单一日志文件有时候意义不是很大，更多时候是同时从 Web
服务器、应用程序、数据库、邮件等各种日志同时展开调查。在从众多的日志中寻找线索的时候，就需要统一各个服务器的时间。
为了达到各个服务器时间统一，可以通过使用 NTP（Network Time
Protocol）协议来进行服务器间时间的同步设置。
### **5.4.4 实现日志输出** {#text00000.html#nav_point_87 line-num="1543 1544"}
日志的保存方法主要有保存到文件或者保存到数据库两种，我们选择哪种实现都可以。我们也可以选择使用专门针对日志而开发的第三方库。比较有代表性的第三方日志库包括为
Java 准备的 log4j。log4j 现在是 apache 基金会的一个项目，现在不仅是
Java，还有专供 PHP 使用的 log4php，以及供微软 .NET 使用的 log4net
等衍生产品 [22]{.注释编号} 。
[22]{.注释编号下} 
使用 log4j 或者 log4php 的好处有如下几点。
-   可以通过简单设置来指定日志保存位置