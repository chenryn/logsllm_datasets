bytes were identiﬁed by the constraint solver. The string
“62637” turned out to be the content that the format
speciﬁer “%19$hn” wrote to a memory location through
vfprintf(). They were recovered from the client be-
cause they were used as part of a pointer to access mem-
ory. Our implementation successfully built a new in-
put on the server that reproduced the error, as illustrated
in Figure 4. This analysis recovered 39 bytes from the
client, all of which were either related to branching con-
ditions or memory access. An additional 18.4 bytes of
information were estimated by the client to be leaked, as
a result of the client’s answers which reduced the ranges
of the values some symbols could take.
Null-HTTPd. Null-HTTPd is a small web server work-
ing on Linux and Windows.
Its version 0.5 contains
a heap-overﬂow bug, which can be triggered when the
HTTP request is a POST with a negative Content
Length ﬁeld and a long request content.
In our ex-
periment, the client parsed the request using Wireshark
and delivered nonsensitive information such as the key-
word POST to the server. The server found that the
application added 1024 to the value derived from the
Content Length and used the sum as pointer in the
function calloc. This resulted in a query for the value
of that ﬁeld, which the client released. At this point, the
server acquired all the information necessary for repro-
ducing the error and generated a new input illustrated in
Figure 5. The information leaks caused by the analysis
include the keyword, the value of Content Length,
HTTP delimiters and the knowledge that some bytes are
not special symbols such as delimiters. This was quan-
300 
17th USENIX Security Symposium 
USENIX Association
Applications
Newspost
OpenVMPS
Null-HTTPd
Sumus
Light HTTPd
ATP-HTTPd
Vul. Type
Stack Overﬂow
Format String
Heap Overﬂow
Stack Overﬂow
Stack Overﬂow
Stack Overﬂow
Yes
Yes
Yes
Yes
Yes
Yes
Table 2: Effectiveness of Panalyst.
New Input Generated?
Size of client’s message
(bytes)
2056
199
416
500
211
819
Info leaks (bytes)
Rate of info leaks
0.9
57.4
29.7
7.7
17.9
16.7
0.04%
28.8%
7.14%
1.54%
8.48%
2.04%
Figure 3: Input Generation for Newspost. Left: the client’s packet; Right: the new packet generated on the server.
tiﬁed as 29.7 bytes, about 7% of the HTTP message the
client received.
Sumus. Sumus is a server for playing Spanish “mus”
game on the Internet. It is known that Sumus 0.2.2 and
the earlier versions have a vulnerable buffer that can be
overﬂowed remotely [14]. In our experiment, Panalyst
server gradually constructed a new input through inter-
actions with the client until the application was found
to jump to a tainted address. At this point, the input
was shown to be able to reproduce the client’s error.
The information leaked during the analysis is presented
in Figure 6, including a string “GET” which affected a
path condition, and 4 “0x90”, which were the address
the application attempted to access. These 7 bytes were
counted as leaked information, along with the fact that
other bytes were not a delimiter.
Light-HTTPd. Light-HTTPd is a free HTTP server. Its
version 0.1 has a vulnerable buffer on the stack. Our ex-
periment captured an exception that happened when the
application returned from the function vsprintf()
and constructed the new input. The input shared 14
bytes with the client’s input which were essential to de-
termining branching conditions and accessing memory.
For example, the keyword “GET” appeared on a condi-
tional jump and the letter “H” were used as a condition in
the GLIBC function strstr. The remaining 3.9 bytes
were caused by the intensive string operations, such as
strtok, which frequently used individual bytes for ta-
ble lookup and comparison operations. Though these op-
erations did not give away the real values of these bytes,
they reduced the range of the bytes, which were quanti-
ﬁed into another 3.9 bytes.
ATP-HTTPd. ATP-HTTPd 0.4 and 0.4b involve a re-
motely exploitable buffer in the socket gets() func-
tion. A new input that triggered this bug was built in our
experiment, which are presented in Figure 8. For exam-
ple, the string “EDCB” was an address the application at-
tempted to jump to; this operation actually caused a seg-
mentation fault. Information leaks during this analysis
are similar to that of Light-HTTPd, which was quanti-
ﬁed as 16.7 bytes.
5.2 Performance
We also evaluated the performance of Panalyst. The
client was deliberately run on a computer with 1 GHz
CPU and 256MB memory to understand the performance
impact of our technique on a low-end system. The server
was on a high-end, with a 2.40GHz Core 2 Duo CPU
and 3GB memory. In our experiments, we measured the
delay caused by an analysis, memory use and bandwidth
consumption on both the client and the server. The re-
sults are presented in Table 3.
The client’s delay describes the accumulated time that
the client spent to receive packets from the server, com-
pute answers, evaluate information leaks and deliver the
responses.
In our experiments, we observed that this
whole process incurred the latency below 3.2 seconds.
Moreover, the memory use on the client side was kept be-
low 5 MB. Given the hardware platform over which this
performance was achieved, we have a reason to believe
that such overhead could be afforded by even a device
with limited computing resources, such as Pocket PC and
PDA. Our analysis introduced a maximal 99,659 bytes
communication overhead. We believe this is still rea-
sonable for the client, because the size of a typical web
page exceeds 100 KB and many mobile devices nowa-
days have the capability of web browsing.
The delay on the server side was measured between
the reception of an initial error report and the generation
of a new input. An additional 15 seconds for launching
our Pin-based analyzer should also be counted. Given
this, the server’s performance was very good: the maxi-
mal latency was found to be under 1 minute. However,
USENIX Association  
17th USENIX Security Symposium 
301
Figure 4: Input Generation for OpenVMPS. Left: the client’s packet; Right: the new packet generated on the server.
Figure 5: Input Generation for Null-HTTPd. Left: the client’s packet; Right: the new packet generated on the server.
this was achieved on a very high-end system. Actually,
we observed that the latency was doubled when moving
the server to a computer with 2.36 GHz CPU and 1 GB
memory. More importantly, the server consumed about
100 MB memory during the analysis. This can be easily
afforded by a high-end system as the one used in our ex-
periment, but could be a signiﬁcant burden to a low-end
system such as a mobile device. As an example, most
PDAs have less than 100 MB memory. Therefore, we be-
lieve that Panalyst server should be kept on a dedicated
high-performance system.
6 Discussion
Our research makes the ﬁrst step towards a fully auto-
mated and privacy-aware remote error analysis. How-
ever, the current design of Panalyst is still preliminary,
leaving much to be desired. For example, the approach
does not work well in the presence of probabilistic er-
rors, and our privacy policies can also be better designed.
We elaborate limitations and possible solutions in the left
part of this section, and discuss the future research for
improving our technique in Section 7.
The current design of Panalyst is for analyzing the er-
ror triggered by network input alone. However, runtime
errors can be caused by other inputs such as those from
a local ﬁle or another process. Some of these errors can
also be handled by Panalyst. For example, we can record
all the data read by a vulnerable program and organize
them into multiple messages, each of which corresponds
to a particular input to the program; an error analysis
can happen on these messages in a similar fashion as de-
scribed in Section 3. A weakness of our technique is that
it can be less effective in dealing with a probabilistic er-
ror such as the one caused by multithread interactions.
However, it can still help the server build sanitized in-
puts that drive the vulnerable program down the same
execution paths as those were followed on the client.
Panalyst may require the client to leak out some infor-
mation that turns out to be unnecessary for reproducing
an error, in particular, the values of some tainted pointer
unrelated to the error. A general solution is describing
memory addresses as symbolic expressions and taking
them into consideration during symbolic execution. This
approach, however, can be very expensive, especially
when an execution involves a large amount of indirect
addressing through the tainted pointers. To maintain a
moderate overhead during an analysis, our current design
only offers a limited support for symbolic pointers: we
introduce such a pointer only when it includes a single
symbol and is used for reading from memory.
The way we treat loops is still preliminary:
it only
works on the loops with constant step sizes and may
falsely classify a branching condition as a loop condi-
tion. As a result, we may miss some real loops, which
increases the communication overhead of an analysis, or
require the client to unnecessarily disclose extra informa-
302 
17th USENIX Security Symposium 
USENIX Association
Figure 6: Input Generation for Sumus. Left: the client’s packet; Right: the new packet generated on the server.
Figure 7: Input Generation for Light HTTPd. Left: the client’s packet; Right: the new packet generated on the server.
tion. However, the client can always refuse to give more
information and set a threshold for the maximal number
of the questions it will answer. Even if this causes the
analysis to fail, the server can still acquire some infor-
mation related to the error and use it to facilitate other
error analysis techniques such as fuzz testing. We plan
to study more general techniques for analyzing loops in
our future research.
Entropy-based policies may not be sufﬁcient for reg-
ulating information leaks. For example, complete dis-
closure of one byte in a ﬁeld may have different privacy
implications from leakage of the same amount of infor-
mation distributed among several bytes in the ﬁeld. In
addition, speciﬁcation of such policies does not seem to
be intuitive, which may affect their usability. More effec-
tive privacy policies can be built upon other deﬁnitions of
privacy such as k-Anonymity [46], l-Diversity [41] and
t-Closeness [38]. These policies will be developed and
evaluated in our future work.
Panalyst client can only approximate the amount of
information disclosed by its answers using statistical
means. It also assumes a uniform distribution over the
values a symbol can take. Design of a better alternative
for quantifying and controlling information is left as our
future research.
Another limitation of our approach is that it cannot
handle encoded or encrypted input. This problem can
be mitigated by interposing on the API functions (such as
those in the OpenSSL library) for decoding or decryption
to get their plaintext outputs. Our error analysis will be
conducted over the plaintext.
7 Related Work
Error reporting techniques have been widely used for
helping the user diagnose application runtime error. Win-
dows error reporting [20], a technique built upon Mi-
crosoft’s Dr. Watson service [18], generates an error
report through summarizing a program state, including
contents of registers and stack. It may also ask the user
for extra information such as input documents to investi-
gate an error. Such an error report is used to search an ex-
pert system for the solution provided by human experts.
If the search fails, the client’s error will be recorded for
a future analysis. Crash Reporter [16] of Mac OS X
and third-party tools such as BugToaster [27] and Bug
Buddy [22] work in a similar way. As an example, Bug
Buddy for GNOME can generate a stack trace using gdb
and let the user post it to the GNOME bugzilla [4].
Privacy protection in existing error reporting tech-
niques mostly relies on the privacy policies of those who
collect reports. This requires the user to trust the collec-
tor, and also forces her to either send the whole report
USENIX Association  
17th USENIX Security Symposium 
303
Figure 8: Input Generation for ATP HTTPd. Left: the client’s packet; Right: the new packet generated on the server.
Table 3: Performance of Panalyst.
server delay (s)
Programs
Newspost
OPenVMPS
Null-HTTPd
Sumus
Light HTTPd
ATP-HTTPd
client delay (s)
0.022
1.638
1.517
0.123
0.88
3.197
client memory use
(MB)
4.7
3.9
5.0
4.8
4.8
5.0
12.14
17
13.09
1.10
6.59
37.11
server memory
use (MB)
99.3
122.3
118.1
85.4
110.1
145.4
total size of questions
(bytes)
527
45,610
99,659
5,968
14,005
50,615
total size of answers
(bytes)
184
6,088
3,416
2,760
2,808
15,960