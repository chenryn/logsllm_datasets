```troff
.el \{
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\" Special macro to handle page bottom: finish off current box/sidebar if in box/sidebar mode, then invoke the standard page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\" Draw three-sided box if this is the first page of the box, draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\" DS - begin display
.de DS
.RS
.nf
.sp
..
'\" DE - end display
.de DE
.fi
.RE
.sp
..
'\" SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\" SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\" OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\" CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\" CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH interp 3tcl 7.6 Tcl "Tcl Built-In Commands"
.BS
'\" Note: do not modify the .SH NAME line immediately below!
.SH NAME
interp \- Create and manipulate Tcl interpreters
.SH SYNOPSIS
\fBinterp \fIoption \fR?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
The \fBinterp\fR command creates one or more new Tcl interpreters that coexist within the same application as the creating interpreter. The creating interpreter is called the master interpreter, and the new interpreters are called slave interpreters. A master interpreter can create any number of slave interpreters, and each slave interpreter can itself create additional slave interpreters, leading to a hierarchy of interpreters.

Each interpreter is independent of the others, with its own namespace for commands, procedures, and global variables. A master interpreter can establish connections between itself and its slave interpreters using a mechanism called an alias. An alias is a command in a slave interpreter that, when invoked, causes a command to be invoked in its master or another slave interpreter. The only other connection between interpreters is through environment variables (\fBenv\fR), which are typically shared by all interpreters in the application. Note that file name spaces (e.g., names returned by the \fBopen\fR command) are not shared between interpreters. Explicit commands are provided to share files and transfer references to open files from one interpreter to another.

The \fBinterp\fR command also supports safe interpreters. A safe interpreter is a slave interpreter with restricted functionality, allowing untrusted scripts to be executed without fear of them damaging other interpreters or the application's environment. For example, safe interpreters cannot access all IO channel creation commands and sub-process creation commands.

For more details, see the sections on SAFE INTERPRETERS and HIDDEN COMMANDS below. Dangerous features are not removed from safe interpreters; they are hidden, so only trusted interpreters can access them. The alias mechanism can be used to facilitate protected communication between a slave interpreter and its master, similar to a kernel call. See the ALIAS INVOCATION section for more details.

A qualified interpreter name is a proper Tcl list containing a subset of its ancestors in the interpreter hierarchy, ending with the name of its immediate master interpreter. Interpreter names are relative to the interpreter in which they are used. For example, if \fBa\fR is a slave of the current interpreter and it has a slave \fBa1\fR, which in turn has a slave \fBa11\fR, the qualified name of \fBa11\fR in \fBa\fR is the list \fBa1 a11\fR.

The \fBinterp\fR command described below accepts qualified interpreter names as arguments. The interpreter in which a command is evaluated can always be referred to as \fB{}\fR (an empty list or string). Note that, except through aliases, it is not possible to refer to a master (ancestor) interpreter by name from a slave interpreter. Additionally, there is no global name by which the first interpreter created in the application can be referenced. These restrictions are for security reasons.

.SH "INTERP COMMANDS"
.PP
The \fBinterp\fR command is used to create, delete, and manipulate slave interpreters, and to share or transfer channels between interpreters. Depending on the \fIoption\fR argument, it can take several forms:

.TP
\fBinterp\fR \fBalias\fR \fIsrcPath\fR \fIsrcCmd\fR
Returns a Tcl list whose elements are the \fItargetCmd\fR and \fIarg\fRs associated with the alias named \fIsrcCmd\fR (all these values were specified when the alias was created; the actual source command in the slave interpreter may have a different name if it has been renamed).

.TP
\fBinterp\fR \fBalias\fR \fIsrcPath\fR \fIsrcCmd\fR \fB{}\fR
Deletes the alias for \fIsrcCmd\fR in the slave interpreter identified by \fIsrcPath\fR. \fIsrcCmd\fR refers to the name under which the alias was created; if the source command has been renamed, the renamed command will be deleted.

.TP
\fBinterp\fR \fBalias\fR \fIsrcPath\fR \fIsrcCmd\fR \fItargetPath\fR \fItargetCmd \fR?\fIarg arg ...\fR?
This command creates an alias between two slave interpreters, which can be located anywhere in the interpreter hierarchy beneath the interpreter invoking the command. \fISrcPath\fR and \fIsrcCmd\fR identify the source of the alias. \fISrcPath\fR is a Tcl list whose elements select a specific interpreter. For example, “\fBa b\fR” identifies an interpreter \fBb\fR, which is a slave of interpreter \fBa\fR, which is a slave of the invoking interpreter. An empty list specifies the invoking interpreter. \fIsrcCmd\fR gives the name of a new command that will be created in the source interpreter. \fITargetPath\fR and \fItargetCmd\fR specify a target interpreter and command, and \fIarg\fR parameters, if any, provide additional arguments to \fItargetCmd\fR, which are placed before any arguments specified in the \fIsrcCmd\fR invocation. \fItargetCmd\fR can be undefined or already exist; it is not created by this command. The alias arranges for the given target command to be invoked in the target interpreter whenever the given source command is invoked in the source interpreter. See the ALIAS INVOCATION section for more details.

.TP
\fBinterp\fR \fBaliases \fR?\fIpath\fR?
This command returns a Tcl list of the names of all source commands defined as aliases in the interpreter denoted by \fIpath\fR.

.TP
\fBinterp\fR \fBcreate \fR?\fB\-safe\fR? ?\fB\-\|\-\fR? ?\fIpath\fR?
Creates a slave interpreter and a new command called the slave command. The name of the slave command is the last element of \fIpath\fR. The interpreter in which the new slave interpreter and slave command are created is identified by the path obtained by removing the last element from \fIpath\fR. For example, if \fIpath\fR is \fIa b c\fR, a new slave interpreter and a slave command named \fBc\fR are created in the interpreter identified by the path \fIa b\fR. The new interpreter can be manipulated using the slave command as described below. If \fIpath\fR is omitted, Tcl generates a unique name of the form \fBinterp\fRx, where \fIx\fR is an integer, and uses it for both the interpreter and the slave command. If the \fB\-safe\fR switch is specified (or if the master interpreter is a safe interpreter), the new slave interpreter will be created as a safe interpreter with limited functionality; otherwise, the slave interpreter will contain the full set of Tcl built-in commands and variables. Use the \fB\-\|\-\fR switch to mark the end of switches; this is needed if the path is a special value like \fB\-safe\fR. The result of this command is the name of the new interpreter. The name of a slave interpreter must be unique among all slave interpreters of its master; if a slave interpreter with the given name already exists in the master, an error occurs.

.TP
\fBinterp\fR \fBdelete \fR?\fIpath ...?\fR
Deletes zero or more interpreters given by the optional \fIpath\fR arguments, and for each interpreter, deletes all of its slave interpreters. This command also deletes the slave command for each deleted interpreter. For each \fIpath\fR argument, if an interpreter with that name does not exist, an error is raised.

.TP
\fBinterp\fR \fBeval\fR \fIpath arg \fR?\fIarg ...\fR?
This command concatenates all the \fIarg\fR arguments in the same way as the \fBconcat\fR command, and then evaluates the resulting string as a Tcl script in the interpreter identified by \fIpath\fR. The result of the evaluation (including error information such as \fBerrorInfo\fR and \fBerrorCode\fR if an error occurs) is returned to the invoking interpreter.

.TP
\fBinterp exists \fIpath\fR
Returns \fB1\fR if a slave interpreter specified by \fIpath\fR exists in the master interpreter, or \fB0\fR otherwise. If \fIpath\fR is omitted, the invoking interpreter is used.

.TP
\fBinterp expose \fIpath\fR \fIhiddenName\fR ?\fIexposedCmdName\fR?
In the interpreter denoted by \fIpath\fR, exposes the hidden command \fIhiddenName\fR, ultimately bringing it back under a new name \fIexposedCmdName\fR (currently only a global namespace name without any :: is accepted). If a command with the target name already exists, this command fails. For more details on hidden commands, see the HIDDEN COMMANDS section below.

.TP
\fBinterp\fR \fBhide\fR \fIpath\fR \fIexposedCmdName\fR ?\fIhiddenCmdName\fR?
In the interpreter denoted by \fIpath\fR, hides the exposed command \fIexposedCmdName\fR and renames it to the hidden command \fIhiddenCmdName\fR. If \fIhiddenCmdName\fR is not given, a default name is generated.
```