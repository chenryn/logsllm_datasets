organizational controls (technical, policy, procedural, etc.). The authors are aware these are
controversial statements and provide the following concepts for thought.
Consider This
A phishing attack leading to organizational compromise is
NOT the fault of an end-user. Instead, it is the insufficient
security controls of a target environment!
As noted above, Social Engineering simply works. Users are often provided many different types of
training on social engineering, phishing, information security, operational security, etc.; however, a
well researched, constructed, and targeted phish will be successful in most scenarios. This idea has
been proven multiple times by multiple professionals with multiple write-ups on techniques and
successes. A well-planned phish avoids common indicators of phishing, does not alert the user to
malicious intent, and can ultimately provide threat access to the end user's system. Combined with a
threat's effective use of good tradecraft, the user has no "indicators of bad". At this point, the user's
responsibility ends. Anything beyond (and arguably including) the initial compromise of the end
user's system is the responsibility of the organization. For all intents and purposes, the threat has
become a logical insider. If the threat has the capability to move laterally throughout the network,
elevate privileges, access sensitive information, exfiltrate data, or cause operational impact; so do
other (perhaps all) users within the organization. It's likely they just don't know how.
Tools and Tool Examples
A Red Team can and should use any tool that supports its end goals. Although many Red Teams use
the same tools used by penetration testers, this does not mean tools are employed the same or chosen
carelessly. A team must understand the capabilities and limits of a tool. The team must have the
ability to control or tune a tool to fit the needs of an engagement; not only in technical capability but
also the ability to tune a tool to model a specific threat. The choice of tools may lead to custom
development, the purchase of commercial tools, or the simple use of built-in operating system
commands. In the end, the toolset is chosen based on a Red Team’s goals.
The way a Red Team uses common security tools can be quite different from the way of other security
testers. A Red Team often needs to customize the code to ensure it performs in a specific way or
change the indicators a tool may leave behind. At a minimum, a good operator must understand how a
tool functions and what impact or risk is introduced to an engagement. Good Red Team operators
maintain control over their actions. This includes how, when, and if a tool is used.
This section refers to many common tools used in the security community. Many of these tools are
older or not appropriate for modern Red Teaming engagements. The purpose of discussion is to
provide context in Red Teaming.
Vulnerability Scanners
Red Teams do not commonly use vulnerability scanners. These tools generally tend to be loud and to
generate a tremendous amount of traffic. Vulnerability identification by a Red Team focuses on
OSINT, low and slow enumeration, intelligent guessing, or other non-intrusive methods. There are
cases where vulnerability scanners are useful. For example, a Red Team has identified a web
application built on Joomla with paths to a Red Team's goals. They would like to know if the version
of Joomla is vulnerable. A standard vulnerability scanner could be employed, but this could be
overkill for a single application. Instead, the team may tune a vulnerability scanner to check for a
small set of Joomla-based flaws. Using a focused scan would minimize exposure. They could also
manually extract version information from the web application. In any case, caution should be taken
before running a vulnerability scanner to reduce exposure. If more intrusive scanning is needed,
performing the scan from a burnable source that is dedicated to louder activities would protect more
sensitive sources from being exposed.
In the end, the choice of when or how to use a vulnerability scanner comes to risk. Think about the
following before running a vulnerability scanner:
● Does the risk of exposure from running a generally loud tool outweigh the potential
knowledge learned?
● Are there other ways to identify a vulnerability without using the automated scanner?
● Will exploitation of a vulnerability provide a path that is beneficial to a Red Team’s goal?
(Remember that vulnerability identification is typically not a Red Team engagement goal.)
Remember This
Just because a target is vulnerable, doesn't mean it must be
exploited!
NMAP and network scanning
Nmap[14] is a core tool for penetration testers and security analysts. It was written and is maintained
by Fyodor[15]. Nmap is often used as a port scanner to determine the status of TCP and UDP ports on a
target system. The tool is not just a simple port scanner but a highly capable network enumeration tool
allowing for a large variety of enumeration techniques. It can be extended through the use of NSE
(Nmap Scripting Engine) scripts. According to the Nmap documentation, the Nmap Scripting Engine
(NSE) is one of Nmap's most powerful features. It allows users to write (and share) simple scripts to
automate a wide variety of networking tasks. NSE scripts are extremely useful. They can be used to
enumerate a system for information or to identify vulnerabilities.
In short, Nmap can be used for simple enumeration or in-depth vulnerability scanning. Its flexibility
and power allow for a great deal of flexibility and capability to enumerate a target; however, this
power can be a double-edged sword. Nmap is not necessarily designed to be stealthy but to be very
capable. A Red Team operator must understand what indicators are being generated when using
Nmap's various capabilities. This text will not go into great depth on the Nmap tool but will cover
some basic usage to highlight an everyday use case for a Red Team. These concepts apply to several
tools. Nmap is discussed because of its popularity and use security testing in general.
Let’s look at an Nmap command with several options
Nmap -sT -T2 -n -Pn -oA  -p 80,443,8080 10.10.10.1-100
Here is the breakdown of the command arguments:
-sT
● This forces Nmap to perform a full connect scan. Nmap’s default is –sS, or a stealth scan. A
full scan completes the full TCP handshake (SYN,SYN/ACK,ACK) and sends a (RST) to
gracefully tear down the connection. A –sS scan sends only SYN and waits for a response
or timeout. A full connection is not established. Although the term stealth is used, this
behavior can indicate a scan is being run against a target. In general, full connect scans
produce less triggers through network security devices. This is especially true when they
are executed very slowly.
-T2
● This is an Nmap timing template. They range from 0–5. The template names are paranoid
(0), sneaky (1), polite (2), normal (3), aggressive (4), and insane (5).
● According to the Nmap documents, “While -T0 and -T1 may be useful for avoiding IDS
alerts, they will take an extraordinarily long time to scan thousands of machines or ports.
For such a long scan, you may prefer to set the exact timing values you need rather than rely
on the canned -T0 and -T1 values.”
● The bottomline: control the speed of a scan to balance the gathering of information with
sending packets too quickly.
● Nmap has many other timing control options. Refer to the help document for details.
-Pn
● Treat all hosts as online—skip host discovery.
● This disables the default tests Nmap uses to discover if a host is online.
● If no host discovery options are given, Nmap sends an ICMP echo request, a TCP SYN
packet to port 443, a TCP ACK packet to port 80, and an ICMP timestamp request. (For
IPv6, the ICMP timestamp request is omitted, because it is not part of ICMPv6.) These
defaults are equivalent to the -PE -PS443 -PA80 -PP options.
● For machines on a local Ethernet network, ARP scanning will still be performed (unless --
disable-arp-ping or --send-ip is specified), because Nmap needs MAC addresses to further
scan target hosts. In previous versions of Nmap, -Pn was -P0 and -PN.
-n
● Never do DNS resolution.
● This is recommended as a default. If the DNS servers are public, this is not as much of an
issue. If you are using a target’s DNS servers, sending DNS queries to perform a port scan
may be considered unnecessary.
-oA
● Output in three formats (normal, greppable, and xml).
● Data collection is extremely important during a Red Team engagement. Using Nmap’s built-
in feature allows results to be captured and potentially parsed by other tools.
-p
● The ports to scan.
● Setting the specific ports is a best practice. Using Nmap’s default may be helpful in finding
unknown services, but a target intellectual guess can help find specific services.
● If you are looking for web servers, choose ports that would most likely be associated with
your target. OSINT and recon prior to a scan will help determine the appropriate ports to
enumerate.
Please note that even with these suggestions, there are situations when stealth or risk tolerance less
important. Perhaps you are using Nmap to trigger a Blue response. A loud scan may be needed to gain
information for access to a target. In any case, a Red Team must control their IOCs and manage their
risk of exposure to meet the goals of an engagement. Understanding and controlling Red Team tools is
the key takeaway for this section. This example is only a small look at Nmap. Nmap offers numerous
methods of controlling its traffic. Refer to the documentation at https://nmap.org/docs.html for details.
Metasploit
The Metasploit Framework[16] is a free, open-source exploitation framework created initially by HD
Moore in 2003. This tool has become a core asset to security testers of all types due to its tremendous
flexibility and capability. Metasploit includes several collections of exploits, payloads, auxiliary
modules, and post-exploitation modules. Metasploit is a great exploitation framework. The exploit,
enumeration, and post-exploitation capabilities can provide a team with a great deal of capabilities.
While Metasploit is a great resource, caution must be taken when using Metasploit's Meterpreter
payload. Meterpreter is not a bad payload choice for Command and Control, but like any tool, it must
be understood and adequately tuned before use. This tool has been examined and analyzed in great
depths. This has led to a highly capable toolset, but it can be profiled and identified by a competent
security team.
Pros and Cons of Meterpreter
PROS
● Tremendous amount of capability and flexibility
● Large contributor base
● Large selection of post-exploitation modules
● Easy to use
● Stable
CONS
● Synchronous communication.
● Well-Known IOCs. (Source code modification is required to minimize these.)
Msfconsole can be tuned using resource files. Resource files are simply a set of msfconsole
commands saved to a script. If scripts are saved to: ~/.msf4/msfconsole.rc
A few recommended base msfconsole settings to consider:
# ~/.msf4/msfconsole.rc
spool /root/.msf4/spool.log
setg ConsoleLogging true
setg verbose true
setg LogLevel 5
setg SessionLogging true
setg TimestampOutput true
setg PromptTimeFormat %Y%m%d.%H%M%S%z
setg PROMPT %T S:%S J:%J
setg ExitOnSession false
setg DisableCourtesyShell true
load sounds #optional
These settings will set up console logging, increase the log verbosity, enable session logging,
standardize the timestamp, add information to the console prompt, set exitonsession to keep listeners
from dying, disable the courtesy shell, and load sounds. Sounds are optional but can be useful
indicators when the console is not being monitored in real time. This is a small set of Metasploit
msfconsole configuration settings. There are times where Metasploit source code will need to be
modified to control the attack flow or manage IOCs.
In terms of where the metasploit framework fits in Red Teaming, it is useful in providing a library of
exploits, but is generally not appropriate for command and control.
Web Shells
A web shell is server-side code that acts as a “shell,” remote administration tool, or control panel
allowing a user to issue remote commands to be executed by a web server. Whoever controls the web
shell has the ability to execute operating system commands on the target web server. The successful
exploitation of a web application is needed to deploy a web shell. Web shells can be written in any
web language, such as PHP, ASP, ASPX, Perl, Ruby, Python, JSP, Java, etc.
Web Shell Examples
● China Chopper – A small web shell packed with features. It has several Command and
Control features, including a password brute force capability
● WSO – Stands for "web shell by orb" and has the ability to masquerade as an error page
containing a hidden login form
● C99 – A version of the WSO shell with additional functionality. It can display the server’s
security measures and contains a self-delete function
● B374K – A PHP-based web shell with common functionalities such as viewing processes
and executing commands
Why would a threat use a web shell? Remote code execution flaws are limited and have forced the
heavy use of client exploitation; however, web applications are still very valuable doors into a
network, and directly compromising a network via remote means provides many options to a threat.
Web applications are commonly overlooked, misconfigured, and riddled with flaws. Executing
operating system commands with an on-demand tool is a perfect Long Haul solution and, therefore, a
perfect target for a Red Team.
A Red Team must be aware of common IOCs generated by the deployment of a web shell:
● The exploitation of a web application flaw must occur
The server attack surface is limited to file upload flaws, RFI flaws, or
application security flaws
This can trigger an alert depending on the type of exploitation or flaw
● Web server files will be added or modified
Source code modification or the direct modification of an application’s source
code will occur
Integrity monitoring may alert defenses to these changes
Although the vulnerabilities required for web shell deployment comprise a small subset of
application security, those paths are worth pursuing as a threat.
Web shells are great tools but do have limits. Operating system commands executed on the target
server are in the context of the web service user. If a target has followed best security practices, the
service will be running as non-privileged. This may seriously limit a web shell’s capability. An
operator may need additional credentials or further exploitation to issue commands with the proper
permissions. Even in the case of limited use, web shells can often still be used as pivot points. Other
limitations depend on the web server’s communication with other target systems. Web shells may
have limited access to internal servers. Web servers in a DMZ or external location may require
pivoting through multiple servers to communicate with internal target systems. In any engagement, the
maintenance of a solid toolset that includes web shells allows a Red Team to be flexible, which
increases its capability.
Command and Control (C2)
Command and Control (C2) is a cornerstone to a Red Team’s ability to control and maintain control
of a target. C2 is the influence an attacker has over a compromised computer system. This influence is
expressed using a C2 infrastructure that can issue various tasks and instructions to the remote system.
Tools such as PowerShell Empire or Cobalt Strike provide agents or beacons that can be deployed to
a target. These tools use an asynchronous means of communication. An agent or beacon polls a C2
server for instructions on a controlled interval. The server is queried for a task. If a task exists, the
agent or beacon performs the action and reports the results. If there are no tasks, the agent or beacon
goes to “sleep” for the predefined period of time.
C2 fall into three categories.
● Synchronous
● Asynchronous
● On-demand
Synchronous C2 operates in real-time. A constant stream of communications is required to maintain
the C2 channel. Asynchronous C2 communications offer many benefits to a Red Team over
synchronous communications by:
● Controlling when and how often communications are sent - A C2 agent can poll as quickly
as near real-time or may check in once a day, week, or month
● Bypassing firewalls through egress communication - Clients are typically not accessible
from outside a network but can reach assets on the internet through outbound
communication
● Not requiring a constant, established connection
On-demand C2 is unique and operates only when needed. Communications occur only when triggered
by an operator. Tools such as email or web shells can provide excellent on-demand C2 channels.
Choosing your Command and Control (C2) mechanisms is a critical step in designing your C2 plan
for an engagement.
C2 Channels
There are numerous methods for establishing C2. Each of these methods use a C2 Channel for primary
communications. While any channel can be used, it is recommended to use a channel that blends in
with organizational traffic. Commonly used C2 channels include:
● HTTP/HTTPS
● DNS
● SMB
● SSH
Establishing a C2 Infrastructure
A well thought out and designed C2 plan can make the difference between a successful or a failed
engagement. The C2 environment is the heart and lifeline for all threat communications.
As part of creating and maintaining an infrastructure for your Red Team operations, you will need the
following at a minimum:
● A variety of domain names—preferably .com, .net, and .org sites related to the
organization(s) being assessed
Ensure domains are properly categorized (BlueCoat, WebPulse, OpenDNS,
PhishTank)
Use Top Level Domains (TLD) common to your target area or usage
● Valid SSL certificates for those domains
● Internet-accessible servers (VPS or physical)
Separated for phishing, redirecting, and C2 servers
● Installed and configured C2 platforms
For more information, detailed C2 design information is maintained regularly by Jeff Dimmock
(@bluescreenofjeff[17]) can be found at the following:
● Designing Effective Covert Red Team Attack Infrastructure –
https://bluescreenofjeff.com/2017-12-05-designing-effective-covert-red-team-attack-
infrastructure/#references
● Red Team Infrastructure Wiki – https://github.com/bluscreenofjeff/Red-Team-Infrastructure-
Wiki
C2 Tools
Although Red Teams use similar offensive security tools as that of penetration testers, there are tools
more emphasized by Red Teams—specifically, when it comes to Command and control. While other
security testers may use Command and Control tools, as well, a Red Team’s goals are typically
heavily dependent on a solid C2 infrastructure and toolset.
Some of the most popular C2 toolsets have been Cobalt Strike, PowerShell Empire, and Metasploit.
All the tools share a heavy emphasis on supporting post-exploitation. Although the tools may have an
exploitation capability, a Red Team’s focus is on their use for post-exploitation and use of C2 for the
duration needed.
2019, Year of the C2
In and around the year 2019, tremendous growth in the
number of C2 frameworks occurred. Dozens of C2
frameworks were released or seriously updated. This
increase provided new options to Red Teams by providing
new protocols, more cross-platform support, and new
operator interfaces.
CobaltStrike[18]
● Commercial software from Strategic Cyber, LLC.
● Command and Control payload is known as a beacon