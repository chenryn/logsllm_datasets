     * enable allocations for slab creation.
     */
    /*
     * 创建 kmalloc 数组。
     * 某些常规 kmalloc 数组可能已经创建，因为需要它们才能启用分配以创建 slab 。
     */
    void __init create_kmalloc_caches(slab_flags_t flags)
    {
        int i;
        // 检查下标合法性
        for (i = KMALLOC_SHIFT_LOW; i list, &slab_caches);
        memcg_link_cache(s);
        s->refcount = 1;
        return s;
    }
## 0x04 slab的创建
###  `__kmem_cache_create()`源码分析
`__kmem_cache_create()`用于创建`kmem_cache`对象：(`create_kmalloc_cache()`在`/source/mm/slub.c#L4257`处实现)
    int __kmem_cache_create(struct kmem_cache *s, slab_flags_t flags)
    {
        int err;
        // 调用 kmem_cache_open() 初始化 slub 结构
        err = kmem_cache_open(s, flags);
        if (err)
            return err;
        /* Mutex is not taken during early boot */
        if (slab_state flags = kmem_cache_flags(s->size, flags, s->name, s->ctor);
        s->reserved = 0;
    // 如果设置了 CONFIG_SLAB_FREELIST_HARDENED 保护，获取一个随机数。
    #ifdef CONFIG_SLAB_FREELIST_HARDENED
        s->random = get_random_long();
    #endif
        if (need_reserve_slab_rcu && (s->flags & SLAB_TYPESAFE_BY_RCU))
            s->reserved = sizeof(struct rcu_head);
        /* 
         * 调用 calculate_sizes() 计算并初始化 kmem_cache 结构的各项数据
         * 这个函数将 kmem_cache -> offset 成员计算出来
         * 这个成员之后会是一个指针，该指针指向何处存放下一个空闲对象
         * 此对象一般紧接着就是这个指针，但在需要对齐的情况下，会往后移一些
         * 该函数同时还计算出 kmem_cache -> size 成员
         * 该成员表明一个对象实际在内存里面需要的长度，这个长度包括了对象本身的长度
         * 其后指向下一个空闲对象的指针长度
         * 开启了SLUB Debug 的情况下，要加入一个空区域用于越界监管的长度，对齐所需长度等
         * 然后，该函数再根据该 kmem_cache 的单个 SLAB 所包含的物理页面的数目
         * (这个数目被放在了 kmem_cache->order 成员里，也是根据 kmem_cache -> size 算出来的)
         * 及单个对象的实际长度 kmem_cache -> size ，计算出来单个 SLAB 所能容纳的对象的个数
         * 并将其放在了 kmem_cache ->objects 成员里。
         */
        if (!calculate_sizes(s, -1))
            goto error;
        if (disable_higher_order_debug) {
            /*
             * 如果最小slub顺序增加，则禁用存储元数据的调试标志。
             */
            if (get_order(s->size) > get_order(s->object_size)) {
                s->flags &= ~DEBUG_METADATA_FLAGS; // 禁用存储元数据的调试标志
                s->offset = 0;
                if (!calculate_sizes(s, -1))
                    goto error;
            }
        }
    #if defined(CONFIG_HAVE_CMPXCHG_DOUBLE) && defined(CONFIG_HAVE_ALIGNED_STRUCT_PAGE)
        if (system_has_cmpxchg_double() && (s->flags & SLAB_NO_CMPXCHG) == 0)
            /* Enable fast mode */
            s->flags |= __CMPXCHG_DOUBLE;
    #endif
        /*
         * The larger the object size is, the more pages we want on the partial
         * list to avoid pounding the page allocator excessively.
         */
        // 调用 set_min_partial() 来设置partial链表的最小值
        // 由于对象的大小越大，则需挂入的partial链表的页面则越多，设置最小值是为了避免过度使用页面分配器造成冲击
        set_min_partial(s, ilog2(s->size) / 2);
        // 调用 set_cpu_partial() 根据对象的大小以及配置的情况，对 cpu_partial 进行设置
        // cpu_partial 表示的是每个 CPU 在 partial 链表中的最多对象个数，该数据决定了：
        // 1）当使用到了极限时，每个 CPU 的 partial slab 释放到每个管理节点链表的个数；
        // 2）当使用完每个 CPU 的对象数时， CPU 的 partial slab 来自每个管理节点的对象数。
        set_cpu_partial(s);
    #ifdef CONFIG_NUMA
        s->remote_node_defrag_ratio = 1000;
    #endif
        /* Initialize the pre-computed randomized freelist if slab is up */
        if (slab_state >= UP) {
            if (init_cache_random_seq(s))
                goto error;
        }
        /* 初始化 kmem_cache->local_node 成员，比如给 nr_partial 赋 0 ，表示没有 Partial SLAB 在其上 */
        if (!init_kmem_cache_nodes(s))
            goto error;
        /* 初始化 kmem_cache->kmem_cache_cpu 成员，比如给其赋 NULL ，表示没有当前 SLAB */
        if (alloc_kmem_cache_cpus(s))
            return 0;
        // 若初始化 kmem_cache->kmem_cache_cpu 成员失败，释放这个节点。
        free_kmem_cache_nodes(s);
    error:
        if (flags & SLAB_PANIC)
            panic("Cannot create slab %s size=%lu realsize=%u order=%u offset=%u flags=%lxn",
                  s->name, (unsigned long)s->size, s->size,
                  oo_order(s->oo), s->offset, (unsigned long)flags);
        return -EINVAL;
    }
###  `calculate_sizes()`源码分析
`calculate_sizes()`用于计算并初始化`kmem_cache`结构的各项数据：(`calculate_sizes()`在`/source/mm/slub.c#L3457`处实现)
    /*
     * calculate_sizes() determines the order and the distribution of data within
     * a slab object.
     */
    static int calculate_sizes(struct kmem_cache *s, int forced_order)
    {
        slab_flags_t flags = s->flags;
        size_t size = s->object_size;
        int order;
        /*
         * Round up object size to the next word boundary. We can only
         * place the free pointer at word boundaries and this determines
         * the possible location of the free pointer.
         */
        // 将 slab 对象的大小舍入对与 sizeof(void *) 指针大小对齐，其为了能够将空闲指针存放至对象的边界中
        size = ALIGN(size, sizeof(void *));
    // 若 CONFIG_SLUB_DEBUG 选项被开启
    #ifdef CONFIG_SLUB_DEBUG
        /*
         * Determine if we can poison the object itself. If the user of
         * the slab may touch the object after free or before allocation
         * then we should never poison the object itself.
         */
        // 判断用户是否会在对象释放后或者申请前访问对象
        // 设定SLUB的调试功能是否被启用，也就是决定了对poison对象是否进行修改操作
        // 其主要是为了通过将对象填充入特定的字符数据以实现对内存写越界进行检测
        if ((flags & SLAB_POISON) && !(flags & SLAB_TYPESAFE_BY_RCU) && !s->ctor)
            s->flags |= __OBJECT_POISON;
        else
            s->flags &= ~__OBJECT_POISON;
        /*
         * If we are Redzoning then check if there is some space between the
         * end of the object and the free pointer. If not then add an
         * additional word to have some bytes to store Redzone information.
         */
        // 在对象前后设置RedZone信息，通过检查该信息以捕捉Buffer溢出的问题
        if ((flags & SLAB_RED_ZONE) && size == s->object_size)
            size += sizeof(void *);
    #endif
        /*
         * With that we have determined the number of bytes in actual use
         * by the object. This is the potential offset to the free pointer.
         */
        // 设置 kmem_cache 的 inuse 成员以表示元数据的偏移量
        // 这也同时表示对象实际使用的大小，也意味着对象与空闲对象指针之间的可能偏移量
        s->inuse = size;