encodings {e1, ...., e‘} is contained in the credential issued to the
prover.
4.5 Prime Encodings For Other Schemes
i ei = Dδhρ0
1 A0εSν0
0 Rβα
We have presented how one can encode attributes efﬁciently
for the RSA-based CL credential system. Our method is intrinsi-
cally based on integer factorization and to be able to proves multi-
plicative relations among committed values over the integers. The
only known efﬁcient commitment scheme that works for the lat-
ter is the one by Damgård, Fujisaki, Okamoto, which relies on
the Strong RSA assumption. Thus, our method works naturally
with anonymity-providing schemes that themselves are based on
the Strong RSA assumption (e.g., [3, 35]) and indeed we made use
of the fact that these scheme basically have the Damgård-Fujisaki-
Okamoto built into them.
Nevertheless, our method can also be applied to other
anonymity-providing schemes but requires one to add the Strong
RSA assumption to the list of assumption the scheme is based
upon, as we rely on the integer commitment scheme for proving
the relations. Let us have sketch how this would be done. First,
the scheme needs to be capable to encode attributes as exponents
(most efﬁcient scheme allow for that, e.g., [4, 7, 16]). However,
such encoding is usually done in the exponent of a group where the
prover knows the order, say q, and therefore all relations that can
be proven about values contained in the credential hold modulo q
only. Therefore, the prover needs to provide an integer commitment
to the attribute values contained in the credential (i.e., the product
of the prime encoded attribute values), so that we can do our proofs
for the prime encodings over the integers. Of course, the prover
needs to prove that the very same value contained in the commit-
ment is also encoded in the credential. Here one must apply some
care to avoid that the prover cannot add a multiple of q to the com-
mitted value, i.e., the prover needs to prove that the commitment
contains a value between 0 and q which we can do using the range
proof by Boudot at the cost of about 5 extra commitments and 5
proof-terms.
5. EFFICIENCY
Our prime-encoding credential system encodes a large set of bi-
nary and ﬁnite set attributes without signiﬁcant performance im-
pacts. The computational complexity of a traditional CL proof of
possession is linear in the total number of attributes, whereas our
system’s complexity only depends on the number of string/integer
attributes. Binary and ﬁnite-set attributes are essentially for free.
Of course, the number of shown binary/ﬁnite-set attributes has a
theoretical inﬂuence on the performance, however, for all practi-
cal purposes we can consider it as constant.2 Both schemes have
identical complexity if credentials only contain string or integer at-
tributes, as soon as binary or ﬁnite-set attributes are involved the
prime encoding scheme achieves superior efﬁciency.
5.1 Measurement Method
Our key goal is to improve the efﬁciency of the CL signature
scheme on small devices, particularly on smartcards. We encoun-
tered the following properties during the evaluation of smartcard
capabilities: most smartcards do not provide a primitive for hard-
ware multi-base exponentiation. One either needs to resort to a
software implementation or the hardware’s modular exponentia-
tion. Partially, the cards do not provide sufﬁcient access to the
square and multiply primitives, which hinders an efﬁcient imple-
mentation of multi-base exponentiations. Partially, the cards have
severe RAM restrictions, which hamper a multi-base exponentia-
tion in one go. A software implementation can therefore experi-
ence a negative performance impact. We cannot restrict ourselves
to multi-base exponentiations, but need to examine modular expo-
nentiations as well.
How to compute the number of exponentiations from a
Camenisch-Stadler [18] term of a CL Signature? First of all, prover
computes a blinded CL signature, which amounts to one exponenti-
ation. Second, the prover facilitates a proof of knowledge following
the proof speciﬁcation:
PK{(ε, ν
0
, µ0, µ1, µ2) :
Z ≡ ±Rµ0
0 Rµ1
1 Rµ2
2 A
0εSν0
(mod n)} .
Camenisch and Stadler [18] deﬁne how to transform such a state-
ment in a Schnorr proof. The prover choses random values rε, rν0,
rµ0, rµ1, rµ2 from Z∗
n for each proven value. The prover computes
a commitment
T = A
0rε R
rµ0
0 R
rµ1
1 R
2 Srν0
rµ2
(mod n).
This involves one multi-base exponentiation or number of attributes
plus two modular exponentiations. For a given challenge c, the
2Our system uses prime exponents with a very short bit-length and
treats them in a single exponentiation. Of course for a very large
number of primes in the exponent product, this exponentiation be-
comes expensive.
prover computes response values sε, sν0, sµ0, sµ1, and sµ2 as fol-
lows:
sε = rε + cε;
sν0 = rν0 + cν
0
;
sµi = rµi + cµi .
Thus, in total we have number of attributes plus three exponentia-
tions. We observe that the number of exponents in the Camenisch-
Stadler notation determines the number of exponentiations in the
corresponding zero-knowledge proofs.
How to treat partially disclosed attributes? In our prime encoding
scheme, we create proofs over known prime exponents, say ei and
ej, proving knowledge of the remainder µ0
1 as follows:
PK{(ε, ν
0
0
1) :
, µ0, µ
Z ≡ ±Rµ0
0 (Reiej
1
)µ0
1 A
)µ0
0εSν0
(mod n) ∧ [. . .]} .
1
n and then compute the product rµ1 = eiejrµ0
1
We will count a term (Reiej
1 as one exponentiation because of
the following rationale: The prover can choose a random value rµ0
from Z∗
1
as random-
ness. The prover includes this randomness with only one exponen-
tiation into the commitment T .
5.2 Qualitative Analysis
Let us ﬁrst consider the differences of traditional encoding in
credential systems and the prime encoding. We do so by com-
paring different proof statements for a credential with only two
ﬁnite-set attributes. We focus on the computational workload of the
prover, as this impacts small devices most. In principle, all proofs
with the Camenisch-Lysyanskaya credential system are structured
as follows: the user provides a proof of possession of the creden-
tial ﬁrst, then commits to required attributes, and facilitates the at-
tribute statement proofs (e.g., equality, range) over the committed
attributes. The proof of possession requires one term and exponen-
tiations linear of the number of attribute bases3:
PK{(ε, ν
0
, µ0, µ1, µ2, ρ, α, β, ρ
Z ≡ ±Rµ0
(mod n) ∧
µ0 ∈ ±{0, 1}‘m ∧ µi ∈ ±{0, 1}‘m−3‘t ∧
0
) :
0εSν0
0 Rµ1
1 Rµ2
2 A
ε ∈ [2‘e−1 + 1, 2‘e − 1]} .
This sets the baseline of complexity for all subsequent proofs with
the credential system. Subsequently, we omit the ranges of the at-
tribute messages and exponents for readability (denoted by [. . .]).
5.2.1 AND-Proof
Let us consider an example where a user wants to prove
her expertise according to the ACM Computing Classiﬁcation
Scheme [2]: E.Data ∧ D.SW. We refer to Appendix Section A for
such an application example. An AND-proof with the traditional
encoding in the CL-signature uses one exponentiation for each at-
tribute base. The prover facilitates the following proof of knowl-
edge with a selective disclosure of the attribute values E.Data and
D.SW:
PK{(ε, ν
0
, µ0) :
Z ≡ ±Rµ0
0 RE.Data
1
RD.SW
2 A
0εSν0
(mod n) ∧ [. . .]} .
Proving knowledge of several prime-encoded attribute does not
produce any overhead. The required attributes are encoded in one
3To be precise: L + 2 exponentiations for the attributes including
the secret key plus one exponentiation for the blinding
Table 1: Computational Complexity. Gray color denotes best result. MExp. are multi-base exponentiations, Exp. modular exponen-
tiations.
Parameter
Number of attribute bases
Proof of possession
Knowledge of 1 binary attr.
AND of i binary attr.
NOT of 1 binary attr.
OR of i binary attr.
Base Encoding
O(L)
asymp.
O(L)
absolute
l + k
l + k + 4 Exp.
1 MExp.
l + k + 4 Exp.
1 Mexp.
l + k + 4 Exp.
4 MExp.
l + k + 11 Exp.
3i + 1 MExp.
l + k + 6i + 4 Exp. O(L + i)
O(1)
O(L)
O(1)
O(L)
O(1)
O(L)
O(i)
attribute base and their conjunctive selective disclosure can be im-
plemented with one modular exponentiation. This realizes a AND-
proof in a constant number of exponentiations.
Bit-Vector Encoding
O(l)
asymp.
O(l)
absolute
l + 1
l + 5 Exp.
1 + 2k + 2 MExp.
l + 4k + 7 Exp.
2k + i + 2 MExp.
l + 4k + i + 7 Exp. O(L + i)
2k + 4 MExp.
l + 4k + 10 Exp.
2k + 3i + 1 MExp. O(k + i)
l + 3k + i + 7 Exp. O(L + i)
O(k)
O(L)
O(k)
O(L)
O(2i)
Prime Encoding
asymp.
O(l)
O(l)
O(1)
O(l)
absolute
l + 1
l + 5 Exp.
1 MExp.
l + 5 Exp.
1 MExp.
l + 5 Exp.
4 MExp.
O(1)
l + 13 Exp. O(l)
9 MExp.
O(1)
l + 23 Exp. O(l)
O(1)
O(l)
computing the commitment as well as proving knowledge of it:
PK{(ε, ν
0
, µ0, µ1, µ2, ρ, α, β, ρ
Z ≡ ±Rµ0
0 Rµ1
1 Rµ2
2 A
D1 ≡ ±gµ1 hρ
0
) :
0εSν0
(mod n) ∧
(mod n) ∧
PK{(ε, ν
0
0
1) :
, µ0, µ
Z ≡ ±Rµ0
0 (Reiej
1
)µ0
1 A
0εSν0
(mod n) ∧ [. . .]} .
D2 ≡ ±gµ2 hρ0
(mod n) ∧ [. . .]} .
5.2.2 NOT-Proofs
The NOT-proof methods of the traditional approach and the
prime-encoding are very similar. Both methods require a commit-
ment to the relevant attribute and a linear relationship proof. For
the traditional approach the proof is constructed as follows:
PK{(ε, ν
0
, µ0, µ1, µ2ρ, α, β) :
Z ≡ ±Rµ0
1 Rµ2
0 Rµ1
2 A
0εSν0
(mod n) ∧
D ≡ ±gµ1 hρ mod n ∧ g ≡ ±(D/gρ)αhβ ∧ [. . .]} .
The NOT-proof of the new system needs to take the structure
of the dedicated prime attribute into account, however, does not
differ conceptually from the traditional approach. Given that we
count (gej )β as one exponentiation, both methods have the same
complexity:
PK{(ε, ν
0
0
) :
0εSν0
, µ0, µ1, ρ, α, β, ρ
Z ≡ ±Rµ0
0 Rµ1
D ≡ ±gµ1 hρ mod n ∧
g ≡ ±Dα(gej )βhρ0
1 A
(mod n) ∧
mod n ∧ [. . .]} .
5.2.3 OR-Proofs
We use an example where a user proves that either the attribute
social_beneﬁt = social_beneﬁt or the attribute profession =
student. We elaborate on such a case in the environment of elec-
tronic identity cards in Section 6.2. The traditional approach needs
to produce an overhead proportional to the number of relevant at-
tributes as well as to the number of comparison alternatives. The
system ﬁrst commits to the relevant attribute values, which means
It then facilitates proofs of knowledge over the committed attribute