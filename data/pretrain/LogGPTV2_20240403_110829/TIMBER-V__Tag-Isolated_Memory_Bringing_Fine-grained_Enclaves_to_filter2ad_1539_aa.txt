title:TIMBER-V: Tag-Isolated Memory Bringing Fine-grained Enclaves to
RISC-V
author:Samuel Weiser and
Mario Werner and
Ferdinand Brasser and
Maja Malenko and
Stefan Mangard and
Ahmad-Reza Sadeghi
TIMBER-V: Tag-Isolated Memory Bringing
Fine-grained Enclaves to RISC-V
Samuel Weiser∗, Mario Werner∗, Ferdinand Brasser†, Maja Malenko∗, Stefan Mangard∗, Ahmad-Reza Sadeghi†
∗ Graz University of Technology: {samuel.weiser, mario.werner, stefan.mangard}@iaik.tugraz.at, PI:EMAIL
† TU Darmstadt: PI:EMAIL, ahmad.sadeghi@trust.cased.de.
Abstract—Embedded computing devices are used on a large
scale in the emerging internet of things (IoT). However, their
wide deployment raises the incentive for attackers to target these
devices, as demonstrated by several recent attacks. As IoT devices
are built for long service life, means are required to protect sen-
sitive code in the presence of potential vulnerabilities, which might
be discovered long after deployment. Tagged memory has been
proposed as a mechanism to enforce various ﬁne-grained security
policies at runtime. However, none of the existing tagged memory
schemes provides efﬁcient and ﬂexible compartmentalization in
terms of isolated execution environments.
We present TIMBER-V, a new tagged memory architecture
featuring ﬂexible and efﬁcient isolation of code and data on small
embedded systems. We overcome several limitations of previous
schemes. We augment tag isolation with a memory protection
unit to isolate individual processes, while maintaining low mem-
ory overhead. TIMBER-V signiﬁcantly reduces the problem of
memory fragmentation, and improves dynamic reuse of untrusted
memory across security boundaries. TIMBER-V enables novel
sharing of execution stacks across different security domains,
in addition to interleaved heaps. TIMBER-V is compatible to
existing code, supports real-time constraints and is open source.
We show the efﬁciency of TIMBER-V by evaluating our proof-
of-concept implementation on the RISC-V simulator.
I.
INTRODUCTION
With ongoing advances in miniaturization and energy ef-
ﬁciency, computing devices are rapidly penetrating everyday
life. Due to long service life, security of such devices becomes
decisive. In in the recent past, we have been witnessing attacks
on millions of cameras and routers [39], cars [38], cardiac
devices [35] and light bulbs [41], to name a few. The high
code complexity of these devices fosters programming bugs,
making their exploitation only a matter of time. This atten-
uates potential IoT use cases since a compromise could have
immediate monetary, legal or privacy consequences [26]. Also,
the protection of intellectual property (IP) in a highly diverse
market
like the IoT, which integrates code from multiple
vendors, requires strong security guarantees.
Isolated execution protects sensitive code and data on
devices with compromised or untrusted software, and has been
proposed for different systems, with and without virtual mem-
ory [2,3,7,9,10,13,21,22,25,28,34,37,40,47]. Especially small
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23068
www.ndss-symposium.org
resource-constrained devices often suffer from poor memory
utilization due to memory fragmentation and inefﬁcient isola-
tion mechanisms. A tighter integration of trusted memory in
the limited physical address space would demand ﬁne-grained
isolation boundaries, which existing schemes either do not pro-
vide at all, or provide only at the expense of high management
overhead. Also, more ﬂexible isolation mechanisms are impor-
tant for dynamically managing trusted memory. A technique
that has the potential to offer ﬁne-grained and ﬂexible isolation
boundaries is tagged memory. Tagged memory transparently
associates blocks of memory with additional metadata. It has
been used for dynamic information ﬂow tracking [48] as
well as access control [53], and is still an active subject of
research [31,45]. While tagged memory has been shown to
support a variety of security policies like protection of control
data [14], pointers [18] or capabilities [52], strong, efﬁcient
and ﬂexible isolated execution is still an open problem for
small embedded systems. In particular, data ﬂow isolation [45]
cannot provide strong isolation since tags can be destructively
written by untrusted software. Other existing solutions are not
appropriate for low-end embedded devices due to their memory
overhead stemming from large tags [54] or fully programmable
but expensive tag engines [11,17,19,49]. Hence, currently no
existing tagged memory schemes supports efﬁcient isolated
execution on small embedded devices.
In this work, we propose TIMBER-V, a tagged memory
architecture which brings efﬁcient isolated execution in form
of enclaves to low-end devices. Since isolated execution is
still not well researched for low-end RISC-V processors, we
prototype TIMBER-V on the open RISC-V architecture via
a hardware-software co-design. On the hardware side, we
achieve ﬁne-grained in-process isolation with only two tag
bits. Moreover, we combine tagged memory with a memory
protection unit (MPU) to support an arbitrary number of
processes while avoiding the overhead of large tags [54].
On the software side, we enforce isolated execution via a
small trust manager, called TagRoot. We isolate privileged
from unprivileged security domains, supporting both, Intel
SGX enclaves [37] and the TrustZone [3] programming model,
however, with much ﬁner isolation granularity and more ef-
ﬁcient memory utilization. This has several advantages. On
the one hand, data locality can be maintained by interleav-
ing trusted and untrusted memory, thus minimizing memory
fragmentation. On the other hand, TIMBER-V uses a tag
update policy which allows highly ﬂexible dynamic memory
management of trusted data. Dynamic memory support has
been announced for the upcoming Intel SGXv2 which involves
costly interaction with the operating system [29]. In contrast,
TIMBER-V enclaves can instantaneously claim memory by
using a single instruction. To demonstrate these advantages,
we show heap interleaving and a novel stack interleaving
scheme. That is, we use a single heap and stack across different
security domains while maintaining strong isolation. Moreover,
we demonstrate highly efﬁcient inter-enclave communication
over secure shared memory. We support real-time constraints
by making all trusted software interruptible. We implement and
benchmark TIMBER-V on the RISC-V Spike simulator, allow-
ing an evaluation under different CPU models which highlights
characteristics of TIMBER-V rather than CPU implementation
speciﬁcs. We show that the runtime overhead of TIMBER-V
is 25.2% for naive implementations while tag caching reduces
the overhead to 2.6%.
In summary, our main contributions are:
• We propose TIMBER-V, the ﬁrst efﬁcient tagged memory
architecture for isolated execution on low-end processors
• We present a novel concept called stack interleaving that
allows for efﬁcient and dynamic memory management
• We propose lightweight shared memory between enclaves
• We propose an efﬁcient shared MPU design
• We extensively evaluated our proof-of-concept implemen-
tation1 on the RISC-V simulator for different CPU models
II. BACKGROUND
This section gives background information about related
security architectures, RISC-V and tagged memory.
Security Architectures. Process isolation is a fundamental
security concept which combines hardware and software tech-
niques to isolate the memory of processes from each other. It
is usually enforced by the operating system taking advantage
of processor’s privilege modes. Large systems isolate pro-
cesses in separate virtual address spaces with the help of a
memory management unit (MMU), while resource-constrained
devices use a memory protection unit (MPU), suitable for
single address space implementations. However, these isolation
mechanisms can be circumvented, as modern operating sys-
tems are becoming large and complex, and their exploitation
becomes easier. Recently, there has been a lot of research
towards isolated execution environments which exclude the
operating system from the trusted computing base (TCB).
Isolated execution protects security-critical code in isolated
compartments, ensuring its conﬁdentiality and integrity even
in the presence of malicious privileged software. An outside
module can call these compartments only at their designated
secure entry points. Two widely deployed architectures for
isolated execution are ARM TrustZone [2] and Intel SGX [37].
ARM TrustZone [2] is a hardware security extension which
partitions computer’s resources into a secure and a non-
secure world. This world split is orthogonal to the processor’s
privilege modes and effectively creates a secure virtual CPU.
The secure world can access all system resources, while the
non-secure world can only access non-secure memory regions.
This way, sensitive code can be hidden from the non-secure
world. The TrustZone concept demands a security kernel for
managing the secure world. This includes process and memory
management as well as scheduling, which enlarges the TCB.
Non-secure code must use a single entry point to a secure
monitor handler to switch worlds. ARM TrustZone-M [3]
integrates the TrustZone concept into smaller Cortex-M pro-
cessors. Non-secure applications can call secure applications
through multiple designated entry points, speciﬁed via non-
secure callable regions.
The central concept of Intel SGX [37] is a hardware-
isolated container, called an enclave, in which sensitive parts
of an application are placed. Unlike TrustZone, an enclave
directly resides in the address space of a user process. SGX
does not rely on any privileged software (trusted kernel,
hypervisor, etc.) to isolate enclaves, thus reducing the TCB
to only the CPU and enclaves themselves. However, SGX’s
management instructions involve pretty complex microcode.
RISC-V. RISC-V [50] is an open and extensible instruction
set architecture and deﬁnes three privilege modes [51], namely
machine-mode (M), supervisor-mode (S), and user-mode (U).
M-mode has the highest privileges and is used for emulating
missing hardware features. S-mode and U-mode are meant to
run an operating system and user applications, respectively.
Tagged Memory. The idea behind tagged memory is to extend
each memory word with additional bits that store metadata.
The general tagged architecture concept is very old and can
already be found in numerous early computer designs [23].
There, tag bits were, for example, used for debugging as well
as for dynamically tracking the numeric type of data words.
Recent commercially available computer architectures hardly
support hardware-based tagged memory. Schemes that asso-
ciate memory with metadata, like for example dynamic analy-
sis tools [43,44,46], rely on software-based solutions instead.
However, recent research on tagged-memory architectures in
the system security context [8,19,45] hints that re-establishing
hardware-support can considerably improve security.
III. ADVERSARY MODEL AND DESIGN GOALS
A stakeholder wants to securely execute pieces of code on
a small IoT device. However, the stakeholder distrusts the IoT
device for various possible reasons. First, the device’s oper-
ating system might not sufﬁciently isolate individual tasks to
guarantee secure code execution, as is the case for the popular
FreeRTOS kernel, for example.2 Second, even if the operating
system provides sufﬁcient task isolation, it might be subject
to exploitation, circumventing all isolation guarantees [27].
Third, the operating system might be controlled by a party
whom the stakeholder distrusts and wants to protect intellectual
property against. We consider the strongest attacker to have
complete control over the operating system. Thus, he can not
only deny service but also use the system’s security features to
spawn malicious enclaves in an attempt to subvert benign ones,
as depicted in Figure 1a. However, we assume that benign
enclaves are properly protected against direct exploitation via
runtime attacks using concepts like memory safety [16], for
example. A proper tag isolation architecture shall guarantee
security of benign enclaves in the presence of such attacks.
We assume that cryptographic primitives are secure. We do not
address physical attacks. The trusted computing base consists
of the hardware, including the hardware emulation mode (M-
mode), as well as a small trust manager (TagRoot).
1The source code is available at https://github.com/IAIK/timber-v
2FreeRTOS allows to elevate privileges via the prvRaisePrivilege syscall.
2
(a) TIMBER-V supports four security domains.
(b) Security domains are interleaved in ﬂat physical memory.
Fig. 1: (a) TIMBER-V extends user apps running in U-mode and the operating system running in supervisor S-mode with trusted
memory, namely TU-mode for enclaves and TS-mode for TagRoot. User processes A and B integrate trusted enclave memory
within untrusted apps. The attacker controls all software in the N-domains and can run malicious enclaves (cf. enclave B). (b)
Tag isolation protects T-domains while MPU isolation encapsulates and protects individual processes across domains. T-domains
can only be entered at trusted callable entry points (TC-tag), which allows fast domain transitions.
TIMBER-V does not prevent software side-channel attacks.
While memory interleaving provides the untrusted software
with additional information about enclave’s memory alloca-
tions, an enclave that follows the constant-time paradigm [5,
12] is secure against any address-based side-channel attack.
We demand that a tagged memory architecture designed
for isolated execution shall meet the following design goals:
G1 Security. It shall guarantee that sensitive code can lever-
age strong isolation to maintain conﬁdentiality and in-
tegrity of its sensitive data. This demands (i) strong
memory isolation, (ii) secure entry points, (iii) secure
communication and (iv) attestation and sealing.
G2 Flexibility. It shall be ﬂexible with respect to ﬁne-grained
and dynamically reconﬁgurable isolation boundaries as
well as the programming model.
G3 Compatibility. Untrusted code shall run without modiﬁ-
cation to support existing operating systems and apps.
G4 Low Overhead. It shall minimize the cost of tagged
memory as well as the performance overhead of switching
security domains.
G5 Real-time. It shall support hard real-time constraints.
IV. TIMBER-V DESIGN
TIMBER-V is a novel tagged memory architecture achiev-
ing lightweight, yet powerful isolated execution on small em-
bedded processors. Speciﬁcally, we achieve ﬁne-grained and
dynamic in-process isolation. TIMBER-V follows a hardware-
software co-design. On the hardware side, TIMBER-V uses
tagged memory for enforcing a strong and ﬁne-grained iso-
lation policy and for providing fast domain switches. Tagged
memory is augmented with a Memory Protection Unit (MPU)
for lightweight
isolation between processes. Dedicated tag
instructions allow ﬂexible dynamic memory management. For
example, we demonstrate memory interleaving across security
domains not only for heap memory but also for stack memory.
On the software side, TIMBER-V delegates policy enforce-
ment to a small privileged trust manager called TagRoot, which
provides various trusted services to the operating system and
to enclaves.
3
A. Isolated Execution
TIMBER-V supports four security domains, as depicted
in Figure 1a. The operating system and apps live in the
“normal” N-domains, which are considered untrusted. The N-
domains support the traditional split between user (U-mode)
and supervisor (S-mode) and allow existing code to run without
modiﬁcation (goal G3). Sensitive memory is protected via
ﬁne-grained memory tagging, which creates islands of trusted
memory inside the N-domains. Trusted user mode (TU-mode)
can be leveraged for isolated execution environments, called
enclaves. Moreover, trusted supervisor mode (TS-mode) allows
to run a trust manager like TagRoot, augmenting the un-
trusted operating system with trusted services. To achieve this,
TIMBER-V combines security domain isolation with MPU-
based process isolation. The trusted domains are protected by
a strict tagged memory policy, which we denote as tag isola-
tion. Individual processes or enclaves are protected via MPU
isolation. Memory accesses are only permitted if both mecha-
nisms “agree”. This allows a variety of different programming
models, as demanded by goal G2. For example, we achieve
TrustZone’s [3] security split via memory tags, however with
much ﬁner and highly dynamic isolation boundaries. Also,
TIMBER-V can embed enclaves directly in user processes,
as done in Intel SGX-like designs [37], however, again with
the beneﬁts of tagged memory.
Tag Isolation. TIMBER-V uses a two-bit
tag per 32-bit
memory word for ﬁne-grained protection of trusted memory
(goal G2). Having only two tag bits keeps the hardware cost
of tagged memory low, achieving goal G4 while at the same
time retaining advantages for ﬁne-grained memory isolation.
With two tag bits we encode four different tags, namely N-
tag, TU-tag, TS-tag and TC-tag. We use them to identify
untrusted memory (N-tag),
trusted user memory (TU-tag),
trusted supervisor memory (TS-tag) as well as secure entry
points via the trusted callable TC-tag. Tag isolation is depicted
with arrows in Figure 1b and will be discussed in detail in
Section VII. At every memory access, a hardware tag engine
ensures that trusted memory cannot be accessed from untrusted
code (i). Moreover, trusted supervisor memory (TS-tag) used
for TagRoot cannot be accessed from enclaves (TU-tag). In
contrast, trusted domains can access lesser trusted memory (ii),
as long as the MPU isolation policy allows it. Finally, tag
isolation could be directly applied to other peripherals, e.g.,
preventing DMA accesses to trusted memory.
MPU Isolation. Tag isolation enforces protection of secu-
rity domains. However, an embedded system typically runs
several independent processes within the same security do-
main. Relying on tag isolation for process isolation would
require large tags, which is unacceptable for our goal G4.
TIMBER-V isolates individual processes via a memory pro-
tection unit (MPU) (see dashed boxes and arrows (iii) in
Figure 1b). This minimizes tagging overhead while supporting
ﬁne-grained in-process isolation.
Fast Domain Transitions. Our system distinguishes horizontal
and vertical domain transitions, as shown in the upper half
of Figure 1b. Both need to be fast and efﬁcient to achieve
goal G4. Horizontal
transitions switch between N and T-
domains while maintaining the current privilege mode. To
avoid code-reuse attacks, trusted domains can only be entered
at secure entry points (iv) (cf. goal G1). Entry points are
marked as trusted callable with the TC-tag and are denoted as
“TUenter” and “TSenter”, depending on the caller’s privilege
mode (iv). Whenever the CPU fetches an instruction tagged
with TC-tag, it switches to the trusted security domains. Like-
wise, when fetching normal N-tag memory, the CPU switches
back to the normal N-domains,
leaving trusted execution,
denoted as “TUleave” and “TSleave” (v), respectively. More
details about how TUenter and TSenter are protected will be
discussed in Section VII. Unlike SGX, which involves costly
checks in microcode for each domain switch [29], our design
imposes zero runtime overhead. Unlike TrustZone-M [3], it
allows even faster and very compact transitions, keeping code
locality and compatibility to the maximum extent possible.3
Vertical
transitions are in fact syscalls (vi). In the N-
domains, apps can issue syscalls to the operating system.
Likewise, in the T-domains, enclaves can request TagRoot
services via trusted TSyscalls. When ﬁnished, a syscall or
TSyscall can return to the calling app or enclave, respectively.
To cleanly separate vertical transitions, TIMBER-V adds a
separate trusted syscall (trap) handler.
MPU Sharing. TIMBER-V shares a single MPU between the
N-domains and the T-domains. That is, the same MPU slots
can be used for processes executing in U-mode and in TU-
mode. Thus, TIMBER-V not only supports traditional apps
and secure enclaves but also mixed processes, as shown in
Figure 1. In contrast to using two separate MPUs, our approach
reduces hardware and energy costs since fewer MPU slots are
required. To maintain compatibility (goal G3), the operating
system can always update shared MPU slots. Any such updates
are detected by the MPU which then prevents enclaves from
using the updated slots until TS-mode validates the changes.
To do so, we augment the MPU with just two additional ﬂags.
3For example, one could split an unmodiﬁed program binary into untrusted
and trusted parts by mere tagging, that is, without the need for changing
code or the memory layout. However, in practice one typically augments the
program with secure argument passing, stack handling and register cleanup.
TABLE I: Tag update policy, permitting () or refusing ()
tag updates from certain security domains.
Can update tag
N-domains
TU-mode
TS-mode
M-mode
N-tag




TC-tag
TU-tag
TS-tag












B. Dynamic Memory Management
TIMBER-V supports highly ﬂexible management of trusted
memory. For this, new tag-aware instructions are added which
act according to a tag update policy. Using these instructions,
we show dynamic memory interleaving as well as a simple but
effective code hardening transformation.
New Tag-aware Instructions. TIMBER-V adds new checked
memory instructions which allow ﬁne-grained and dynamic
management of trusted memory. We call
them “checked”
instructions, since they augment ordinary memory instructions
adhering to tag isolation with one additional programmable tag
check. This additional tag check does not bypass our tag isola-
tion policy but tightens it by constraining memory accesses to a
speciﬁc security domain. For example, when enclaves process
untrusted data, they can use checked instructions to prevent
accidentally accessing a wrong security domain.
Tag Update. In addition to the tag checks, checked store in-
structions allow to (de)privilege memory by changing memory
tags as follows. Tags can only be updated within the same or a
lower security domain but cannot be used to elevate privileges,
as shown in Table I. TS-mode (and M-mode) have full access
to all tags. TU-mode can only change tags between N-tag
and TU-tag to support dynamic interleaving of user memory.
We prevent TU-mode from manipulating TC-tags, which are
reserved for secure entry points. Our tag update policy makes
isolation boundaries ﬂexible during runtime (goal G2).
Dynamic Memory Interleaving. Checked memory instruc-
tions allow to dynamically claim memory across security
domains, thus maintaining data locality and reducing manage-
ment overhead. For example, an enclave can claim untrusted
memory during runtime by setting its tags from N-tag to TU-
tag. We show that this allows heap interleaving as well as a
novel code transformation that we call stack interleaving. That
is, an enclave does not need to maintain a separate secure
heap or stack. In general, dynamic memory interleaving can
help reduce memory requirements to a single heap and a
single stack per execution thread. This has not only oper-
ational advantages like reduced memory fragmentation and
thus reduced memory consumption but also security gains,
since dynamic memory management can be removed from the
trusted computing base (TCB).
Code Hardening Transformation. Checked instructions can
be used for additional code hardening against code-reuse
attacks. In these attacks, one misuses existing code to perform
malicious actions, e.g., leak secrets from trusted to untrusted
domains. In contrast, normal code execution usually operates
in a single security domain and all accessed memory tags are
predetermined by this security domain. Our code hardening
transformation enforces this property by replacing memory
instructions with checked instructions, checking for the correct
4
TABLE II: TagRoot trusted OS and enclave services.
Trusted OS services
create-enclave(ecb)
add-region(ecb, region)