y  i, pick random ~vx = ˜qx ~v1 + ˜q′
x are random ∈ Zr. Note that ~vx · ~v ′
˜qx, ˜q′
x ~v2 where
c = ~vx · ~vc.
This allows all parties (x, y) to decrypt the message, if
x > i.
The row cipher text components for all x > i are,
~Rx = grxsx ~vx
Ax = gsxt( ~vx· ~vc)
Tx = ( Y
k∈Sx
uk)sxt( ~vx· ~vc)
~eRx = gηrxsx ~vx
Bx = M · Gsxt( ~vx· ~vc)
x
And for every column y  i, pick random v′
x · v1.
Note that ~vx · ~v ′
c = ~vx · ~vc. This allows all parties
(x, y), for all values of y to decrypt the message, if
x > i.
x ∈ Zr, let ~vx = v′
The row cipher text components for all x > i are,
~Rx = grxsx ~vx
Ax = gsxt( ~vx· ~vc)
1
2
Tx = ( Y
k∈Sx
uk)sxt( ~vx· ~vc)
1
~eRx = gηrxsx ~vx
Bx = M · Gsxt( ~vx· ~vc)
x
And for every column y < j, the column ciphertext
components are,
And for every column y ≥ j, the column ciphertext
components are,
~Cy = gcy t ~v ′
c
2
· gη ~w y
2
~Cy = gcy t ~vc
2
· gη ~w y
2
~eCy = g ~w y
2
~eCy = g ~w y
2
• M ← DecryptP LBE(C, S, K(x,y), (x, y))
2 Qk∈Sx
2 grxcy
(x,y) = gαx
Let K ′
be the key used
by recipient (x, y). Note that user (x, y) can always
compute the product when y ∈ Sx and cannot compute
this product otherwise.
uσx,y
k
M =
Bx
e(Ax,K ′
e(Tx,g
)
(x,y)
σx,y
)
2
·
e( ~Rx, ~Cy )
e(
~eRx,
~eCy )
The normal encryption procedure is to just encrypt to
EncryptAugBE(P K, 0, M ). This illustrates the public trace-
ability of our system. The correctness of decryption follows
by inspection.
5.3 PLBE
The two AugBE schemes based on symmetric and asym-
metric prime order groups respectively can be converted to
the corresponding PLBE schemes by removing the u terms
from the public key. We will also need to get rid of the u and
σ terms in the secret key. Row ciphertexts will not include
Tx terms and decryption will not require a pairing corre-
sponding to the term Tx. Rest of the parts of the scheme
remain the same. Details can be found in the full version of
the paper.
6. SECURITY PROOF
Here we only give the proof for the AugBE scheme using
symmetric prime order bilinear groups. The proof for the
AugBE scheme based on asymmetric prime order bilinear
groups is also similar. The only diﬀerence is that security
depends on the XDH assumption. The security of the PLBE
schemes is implied by the security of the AugBE schemes.
6.1 Index Hiding
Theorem 6.1. If the Decision 3-party Diﬃe Hellman as-
sumption and the decisional linear assumption hold, then no
probabilistic polynomial time adversary can distinguish be-
tween an encryption to two adjacent recipients in the index
hiding game for any (i, j) where 1 ≤ i, j ≤ m with non-
negligible probability.
Proof. We consider two possible cases. First, when the
adversary tries to distinguish between ciphertexts encrypted
to (i, j) and (i, j +1) when 1 ≤ j < m. Second, when the ad-
versary tries to distinguish between ciphertexts encrypted to
(i, m) and (i+1, 1) when 1 ≤ i < m. The ﬁrst case follows by
Lemma 6.2 and the second case follows by Lemma 6.3.
Lemma 6.2. If the Decision 3-party Diﬃe Hellman as-
sumption holds, then no probabilistic polynomial time ad-
versary can distinguish between an encryption to recipient
(i, j) and (i, j + 1) in the index hiding game for any (i, j)
where j < m with non-negligible probability.
Proof. This proof is similar to proof of Lemma 5.2 of [8],
though the public parameter settings are diﬀerent. Details
can be found in the full version of the paper.
Lemma 6.3. If the Decision 3-party Diﬃe Hellman as-
sumption and the decisional linear assumption hold, then no
probabilistic polynomial time adversary can distinguish be-
tween an encryption to recipient (i, m) and (i + 1, 1) in the
index hiding game for any 1 ≤ i < m with non-negligible
probability.
Proof. The proof of this lemma follows from a series of
claims that establish the indistinguishability of the following
games.
• H1 Encrypt to column4 m, row i is the target row,5
row i + 1 is the greater-than row.6
4Columns greater than or equal to m are well formed, both
in Vp and Vq.
5The row for which the row component of the ciphertext has
well formed components, both in Vp and Vq.
6The ﬁrst row with the row component of ciphertexts only
in Vq.
127• H2 Encrypt to column m + 1, row i is the target row,
row i + 1 is the greater-than row.
• H3 Encrypt to column m + 1, row i is the less-than
row, row i + 1 is the greater-than row (no target row).
• H4 Encrypt to column 1, row i is the less-than row,
row i + 1 is the greater-than row (no target row).
• H5 Encrypt to column 1, row i is the less-than row,
row i + 1 is the target row.
It can be observed that game H1 corresponds to the en-
cryption being done to (i, m) and game H5 corresponds to
encryption to (i+1, 1). We refer the reader to the full version
for details on the indistinguishability of the games.
6.2 Message Hiding
Theorem 6.4. No adversary can distinguish between two
ciphertexts when the encryption is done to the (m + 1, 1).
Proof. This means that all rows will be completely ran-
dom and independent of the message. Hence, information
theoretically the adversary has no way of identifying which
message has been encrypted.
7.
IMPLEMENTATION
We provide the ﬁrst implementation of fully collusion re-
sistant traitor tracing and trace & revoke schemes. We use
only prime order bilinear groups in this implementation. We
implement all of our schemes using the Pairing Based Crypto
(PBC) library [18]. For schemes that use asymmetric bilin-
ear groups, we generate them using MNT curves [20]. The
group size is 170 bits long, the group representations are
512 bits long, and the security is equivalent to 1024 bits
of discrete log.
It is also believed that the XDH assump-
tion holds on these curves (Section 8.1 [6]). For symmetric
bilinear groups, we use super singular curves (with fastest
pairing times but bad group element size). We use 512 bit
group representations and have 1024 bits of discrete log se-
curity. One can choose other alternative symmetric groups
that have smaller group size with faster exponentiation but
slower pairing operations. This kind of tradeoﬀ was not pos-
sible in previous systems [8, 9].
We contrast our schemes’ eﬃciency with an implemen-
tation of [8]. [8] only provides traitor tracing functionality.
We compare our traitor tracing scheme with [8] in Tables 1,2
and Figure 4. We also provide additional data on our trace
& revoke implementation (Table 3)). Currently, the only
known way to generate composite order groups is by using
symmetric bilinear groups. Also, their subgroup decision as-
sumption mandates that the order of the composite group be
at least 1024 bits (to avoid sub-exponential factoring based
attacks). We compare the encryption time, decryption time
and ciphertext sizes as the number of users grow for all these
schemes.
A real implementation of broadcast encryption will use a
symmetric key cipher under some key K [8]. But this key K
still needs to be distributed and one can use our schemes for
key distribution. By converting our encryption system to a
Key Encapsulation Mechanism we can save on computation.
Under this optimization, we do not need to evaluate Bx or
include it in the ciphertext. A user (x, y) can extract the
Figure 2: Encryption Time (in secs) of traitor trac-
ing schemes
Table 1: Encryption Time of traitor tracing schemes
Users Boneh
et al.
1.977s
25
3.971s
100