# Chrome Sandbox Escape Case Study and PlaidCTF2020 Mojo Writeup
## Mojo
### Introduction to Mojo & Services
#### Mojo Terminology
- **Message Pipe**: A message pipe is a pair of endpoints that represent the two ends of a communication channel. Each endpoint maintains an incoming message queue, and writing a message to one end effectively sends it to the other end, making the message pipe bidirectional.
- **Mojom File**: A mojom file describes a set of interfaces, which are strongly typed message collections.
- **Remote and Receiver**: Given a mojom interface and a message pipe, one end can be designated as a `Remote` to send messages described by the interface, while the other end is designated as a `Receiver` to receive those messages. It's important to note that although the message pipe is bidirectional, mojom messages can expect responses, which are sent from the `Receiver` end and received by the `Remote`.
- **Receiver Binding**: The `Receiver` end must be bound to a concrete implementation of the mojom interface, allowing it to dispatch received messages to the appropriate implementation functions.

#### Defining a New Frame Interface
Suppose we want to send a "Ping" message from a render frame to its corresponding `RenderFrameHostImpl` in the browser process. We need to define a mojom interface, create a message pipe to use this interface, and bind both ends of the pipe to send and receive messages.

##### Define an Interface
The first step is to create a `.mojom` file:
```cpp
// src/example/public/mojom/ping_responder.mojom
module example.mojom;

interface PingResponder {
  // Receives a "Ping" and responds with a random integer.
  Ping() => (int32 random);
};
```
Correspondingly, create a build rule to generate C++ bindings:
```gn
# src/example/public/mojom/BUILD.gn
import("//mojo/public/tools/bindings/mojom.gni")
mojom("mojom") {
  sources = [ "ping_responder.mojom" ]
}
```

##### Create a Message Pipe
Next, let's create a message pipe to use this interface. Typically, for convenience, the client (i.e., the `Remote`) creates the new pipe. This is convenient because the `Remote` can immediately send messages without waiting for the `InterfaceRequest` endpoint to be bound.
```cpp
// src/third_party/blink/example/public/ping_responder.h
mojo::Remote<ping_responder::mojom::PingResponder> ping_responder;
mojo::PendingReceiver<ping_responder::mojom::PingResponder> receiver =
    ping_responder.BindNewPipeAndPassReceiver();
```
In this example, `ping_responder` is the `Remote`, and `receiver` is the `PendingReceiver`, which is a precursor to the `Receiver`. `BindNewPipeAndPassReceiver` is the most common method to create a message pipe: it returns a `PendingReceiver`.

**Note**: A `PendingReceiver` does not perform any actions on its own. It is a lazy holder of a single message pipe endpoint. Its existence is to provide stronger type information at compile time, indicating that the endpoint should be bound to a specific interface type.

##### Send a Message
Finally, we can send a message by calling the `Ping()` method through the `Remote`:
```cpp
// src/third_party/blink/example/public/ping_responder.h
ping_responder->Ping(base::BindOnce(&OnPong));
```
**Important Note**: To receive a response, the `ping_responder` object must remain active until `OnPong` is called. After all, the `ping_responder` owns the message pipe endpoint. If it is destroyed, the endpoint will also be destroyed, and there will be nothing to receive the response message.

We are almost done! Of course, if everything were this simple, this document would not be necessary. We have addressed the challenge of sending messages from the render process to the browser process, and now we need to pass the `receiver` object to the browser process to distribute the received messages to the concrete implementation functions.

##### Pass PendingReceiver to the Browser
It is worth noting that `PendingReceivers` (which are typically message pipe endpoints) can also be freely sent as objects via mojom messages. The most common way to place a `PendingReceiver` somewhere is to pass it as a method parameter to another already connected interface.

The interface that connects the `RenderFrameImpl` in the renderer to its corresponding `RenderFrameHostImpl` in the browser is `BrowserInterfaceBroker`. This interface is used to obtain factories for other interfaces, and its `GetInterface` method accepts a `GenericPendingReceiver` (which allows passing any interface receiver).
```cpp
interface BrowserInterfaceBroker {
  GetInterface(mojo_base.mojom.GenericPendingReceiver receiver);
}
```
Since a `GenericPendingReceiver` can be implicitly constructed from any `PendingReceiver`, we can use the `receiver` created earlier to call this method:
```cpp
RenderFrame* my_frame = GetMyFrame();
my_frame->GetBrowserInterfaceBroker().GetInterface(std::move(receiver));
```
This will send the `PendingReceiver` to the browser process, where it will be received and handled by the concrete implementation of the `BrowserInterfaceBroker` interface.

##### Implement the Interface
We need a browser-side implementation of `PingResponder`:
```cpp
#include "example/public/mojom/ping_responder.mojom.h"

class PingResponderImpl : public example::mojom::PingResponder {
 public:
  explicit PingResponderImpl(mojo::PendingReceiver<example::mojom::PingResponder> receiver)
      : receiver_(this, std::move(receiver)) {}

  void Ping(PingCallback callback) override {
    // Respond with a random 4, chosen by fair dice roll.
    std::move(callback).Run(4);
  }

 private:
  mojo::Receiver<example::mojom::PingResponder> receiver_;
  DISALLOW_COPY_AND_ASSIGN(PingResponderImpl);
};
```
`RenderFrameHostImpl` holds an implementation of `BrowserInterfaceBroker`. When this implementation receives a `GetInterface` method call, it invokes the handler previously registered for this specific interface.
```cpp
// render_frame_host_impl.h
class RenderFrameHostImpl {
  ...
  void GetPingResponder(mojo::PendingReceiver<example::mojom::PingResponder> receiver);
  ...
 private:
  ...
  std::unique_ptr<PingResponderImpl> ping_responder_;
  ...
  // BrowserInterfaceBroker implementation through which this
  // RenderFrameHostImpl exposes document-scoped Mojo services to the currently
  // active document in the corresponding RenderFrame.
  BrowserInterfaceBrokerImpl broker_{this};
  mojo::Receiver<BrowserInterfaceBroker> broker_receiver_{&broker_};
};

// render_frame_host_impl.cc
void RenderFrameHostImpl::GetPingResponder(
    mojo::PendingReceiver<example::mojom::PingResponder> receiver) {
  ping_responder_ = std::make_unique<PingResponderImpl>(std::move(receiver));
}

// browser_interface_binders.cc
void PopulateFrameBinders(RenderFrameHostImpl* host,
                          mojo::BinderMap* map) {
  ...
  // Register the handler for PingResponder.
  map->Add(base::BindRepeating(&RenderFrameHostImpl::GetPingResponder, base::Unretained(host)));
}
```
We are done! This setup is sufficient to establish a new interface connection between the renderer frame and its browser-side host. Assuming we keep the `ping_responder` object alive long enough in the renderer, we will eventually see the `OnPong` callback invoked with the argument `4`, as defined in the browser-side implementation.

### Mojo Basics
#### Interfaces
Let's look at another set of interfaces and their implementations. **Mojo uses callbacks to return results. Instead of returning a value directly, Mojo invokes a callback with the result.**

```cpp
module math.mojom;

interface Math {
  // Adds two int32s and returns the result as an int64 (to avoid
  // overflow issues).
  Add(int32 x, int32 y) => (int64 sum);
};

...
mojom("mojom") {
  sources = ["math.mojom"]
}
...

class MathImpl : public math::mojom::Math {
 public:
  explicit MathImpl(mojo::PendingReceiver<math::mojom::Math> receiver)
      : receiver_(this, std::move(receiver)) {}

  void Add(int32_t x, int32_t y, AddCallback reply) override {
    std::move(reply).Run(static_cast<int64_t>(x) + y);
  }

 private:
  mojo::Receiver<math::mojom::Math> receiver_;
};
```

#### Message Pipes
The two ends of a message pipe have been discussed above. Here is a summary:

- **mojo::Remote::BindNewPipeAndPassReceiver**: Used when the sender/caller creates the endpoint. It retains one endpoint to send IPC messages, and the other endpoint is returned as an unbound `mojo::PendingReceiver` for the receiver/callee to bind to a `mojo::Receiver`.

  ```cpp
  mojo::Remote<math::mojom::Math> remote_math;
  LaunchAndBindRemoteMath(remote_math.BindNewPipeAndPassReceiver());
  remote_math->Add(2, 2, base::BindOnce(...));
  ```

- **mojo::Receiver::BindNewPipeAndPassRemote**: Used when the receiver/callee creates the endpoint. It retains one endpoint to receive IPCs, and the other endpoint is returned as an unbound `mojo::PendingRemote` for the sender/caller to bind to a `mojo::Remote`.

  ```cpp
  class MathImpl : public math::mojom::Math {
    ...
    mojo::PendingRemote<math::mojom::Math> GetRemoteMath() {
      return receiver_.BindNewPipeAndPassRemote();
    }
  };
  ```

- **mojo::PendingRemote::InitWithNewPipeAndPassReceiver**: Less common, similar to `mojo::Remote::BindNewPipeAndPassReceiver()`.

- **mojo::Remote/mojo::Receiver and mojo::PendingRemote/mojo::PendingReceiver**: Both `mojo::Remote` and `mojo::Receiver` have unbound versions, allowing endpoints to be passed between sequences within the same process or even across processes via IPC.

  ```cpp
  mojo::Remote<math::mojom::Math> remote = ...;
  mojo::PendingRemote<math::mojom::Math> pending_remote = remote.Unbind();

  mojo::Receiver<math::mojom::Math> receiver = ...;
  mojo::PendingReceiver<math::mojom::Math> pending_receiver = receiver.Unbind();
  ```

### Mojo C++ Bindings API
#### Getting Started
Here is an example of defining a mojom interface and creating a build rule:

```cpp
// services/db/public/mojom/db.mojom
module db.mojom;

interface Table {
  AddRow(int32 key, string data);
};

interface Database {
  CreateTable(Table& table);
};
```

```gn
# services/db/public/mojom/BUILD.gn
import("//mojo/public/tools/bindings/mojom.gni")
mojom("mojom") {
  sources = [
    "db.mojom",
  ]
}
```

This setup provides a clear and concise way to define and use Mojo interfaces in your project.