:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#proc_enabling-modular-libvirt-daemons_assembly_optimizing-libvirt-daemons}启用模块 libvirt 守护进程 {.title}
:::
在 RHEL 9 中，`libvirt`{.literal} 库使用 modular
守护进程来处理您主机上的单个虚拟化驱动程序集。例如，`virtqemud`{.literal}
守护进程处理 QEMU 驱动程序。
如果您执行了 RHEL 9 主机的全新安装，您的虚拟机监控程序默认使用模块化
`libvirt`{.literal} 守护进程。但是，如果您将主机从 RHEL 8 升级到 RHEL
9，您的管理程序将使用单体 `libvirtd`{.literal} 守护进程，这是 RHEL 8
中的默认设置。
如果出现这种情况，红帽建议改为启用模块 `libvirt`{.literal}
守护进程，因为它们为微调 `libvirt`{.literal}
资源管理提供了更好的选项。另外，`libvirtd`{.literal} 在以后的 RHEL
主发行版本中将不被支持。
::: itemizedlist
**先决条件**
-   您的管理程序使用单体的 `libvirtd`{.literal}
    服务。要了解这一点是否如此：
    ``` literallayout
    # systemctl is-active libvirtd.service
    active
    ```
    如果这个命令显示 `活跃的`{.literal}，则会使用 `libvirtd`{.literal}。
-   您的虚拟机已关闭。
:::
::: orderedlist
**步骤**
1.  停止 `libvirtd`{.literal} 及其套接字。
    ``` literallayout
    # systemctl stop libvirtd.service
    # systemctl stop libvirtd{,-ro,-admin,-tcp,-tls}.socket
    ```
2.  禁用 `libvirtd`{.literal} 以防止它在引导时启动。
    ``` literallayout
    $ systemctl disable libvirtd.service
    $ systemctl disable libvirtd{,-ro,-admin,-tcp,-tls}.socket
    ```
3.  启用模块 `libvirt`{.literal} 守护进程。
    ``` literallayout
    # for drv in qemu interface network nodedev nwfilter secret storage do systemctl unmask virt${drv}d.service systemctl unmask virt${drv}d{,-ro,-admin}.socket systemctl enable virt${drv}d.service systemctl enable virt${drv}d{,-ro,-admin}.socket done
    ```
4.  启动模块守护进程的套接字。
    ``` literallayout
    # for drv in qemu network nodedev nwfilter secret storage do systemctl start virt${drv}d{,-ro,-admin}.socket done
    ```
5.  [**可选：**]{.strong}如果您需要从远程主机连接到主机，请启用并启动虚拟化代理守护进程。
    ``` literallayout
    # systemctl unmask virtproxyd.service
    # systemctl unmask virtproxyd{,-ro,-admin,-tls}.socket
    # systemctl enable virtproxyd.service
    # systemctl enable virtproxyd{,-ro,-admin,-tls}.socket
    # systemctl start virtproxyd{,-ro,-admin,tls}.socket
    ```
:::
::: orderedlist
**验证**
1.  激活已启用的虚拟化守护进程。
    ``` literallayout
    # virsh uri
    qemu:///system
    ```
2.  确保您的主机使用 `virtqemud`{.literal} 模块守护进程。
    ``` literallayout
    # systemctl is-active virtqemud.service
    active
    ```
    如果这个命令显示 `活跃的`{.literal}，则代表您成功启用了模块
    `libvirt`{.literal} 守护进程。
:::
:::
:::
::: section
::: titlepage
# []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#configuring-virtual-machine-ram_optimizing-virtual-machine-performance-in-rhel}配置虚拟机内存 {.title}
:::
要提高虚拟机的性能，您可以为虚拟机分配额外的主机
RAM。同样，您可以减少分配给虚拟机的内存量，以便主机内存可以分配给其他虚拟机或任务。
要执行这些操作，您可以[使用 Web
控制台](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#adding-and-removing-virtual-machine-ram-using-the-web-console_configuring-virtual-machine-ram "使用 web 控制台添加和删除虚拟机内存"){.link}或[命令行界面](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#adding-and-removing-virtual-machine-ram-using-the-command-line-interface_configuring-virtual-machine-ram "使用命令行界面添加和删除虚拟机内存"){.link}。
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#adding-and-removing-virtual-machine-ram-using-the-web-console_configuring-virtual-machine-ram}使用 web 控制台添加和删除虚拟机内存 {.title}
:::
要提高虚拟机的性能或释放所使用的主机资源，您可以使用 web
控制台来调整分配给虚拟机的内存量。
::: itemizedlist
**先决条件**
-   客户端操作系统正在运行内存 balloon 驱动程序。请执行以下命令校验：
    ::: orderedlist
    1.  确保虚拟机的配置包含 `memballoon`{.literal} 设备：
        ``` literallayout
        # virsh dumpxml testguest | grep memballoon
        ```
        如果这个命令显示任何输出结果，且模型没有设置为
        `none`{.literal}，则代表存在 `memballoon`{.literal} 设备。
    2.  确保客户机操作系统中正在运行 balloon 驱动程序。
        ::: itemizedlist
        -   在 Windows 客户端中，这些驱动程序作为 `virtio-win`{.literal}
            驱动程序软件包的一部分安装。具体步骤请参阅 为 Windows
            虚拟机安装半虚拟化 KVM 驱动程序。
        -   在 Linux
            客户端中，默认情况下，这些驱动程序通常默认包含，并在
            `memballoon`{.literal} 设备存在时激活。
        :::
    :::
-   Web 控制台 VM 插件
    [已安装在您的系统上](#managing-virtual-machines-in-the-web-console_configuring-and-managing-virtualization.html#setting-up-the-rhel-web-console-to-manage-vms_managing-virtual-machines-in-the-web-console "设置 web 控制台以管理虚拟机"){.link}。
:::
::: orderedlist
**步骤**
1.  [**可选：**]{.strong}获取关于虚拟机的最大内存和当前使用的内存的信息。这将作为您更改的基准，并进行验证。
    ``` literallayout
    # virsh dominfo testguest
    Max memory:     2097152 KiB
    Used memory:    2097152 KiB
    ```
2.  在 [Virtual Machines]{.guimenu} 界面中，点您要查看信息的虚拟机。
    这时将打开一个新页面，其中包含有关所选虚拟机的基本信息，以及访问虚拟机的图形界面的
    Console 部分。
3.  在 Overview 窗格中，单击 `Memory`{.literal} 行旁边的
    [编辑]{.guibutton}。
    此时会出现 `Memory Adjustment`{.literal} 对话框。
    ::: informalfigure
    ::: mediaobject
    ![显示虚拟机内存调整对话框的镜像。](images/virt-cockpit-memory.png){width="540"}
    :::
    :::
4.  为所选虚拟机配置虚拟 CPU。
    ::: itemizedlist
    -   [**最大分配**]{.strong} -
        设置虚拟机可用于其进程的最大主机内存量。您可以在创建虚拟机时指定最大内存，或者在以后增加它。您可以将内存指定为
        MiB 或 GiB 的倍数。
        只有在关闭虚拟机上才能调整最大内存分配。
    -   [**当前分配**]{.strong} -
        设置分配给虚拟机的实际内存量。这个值可以小于最大分配，但不能超过它。您可以调整该值来规定虚拟机可用于其进程的内存。您可以将内存指定为
        MiB 或 GiB 的倍数。
        如果没有指定这个值，则默认分配是 [**Maximum
        allocation**]{.strong} 值。
    :::
5.  点击 [Save]{.guibutton}。
    调整了虚拟机的内存分配。
:::
::: itemizedlist
**其它资源**
-   [使用命令行界面添加和删除虚拟机内存](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#adding-and-removing-virtual-machine-ram-using-the-command-line-interface_configuring-virtual-machine-ram "使用命令行界面添加和删除虚拟机内存"){.link}
-   [优化虚拟机 CPU
    性能](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#optimizing-virtual-machine-cpu-performance_optimizing-virtual-machine-performance-in-rhel "优化虚拟机 CPU 性能"){.link}
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#adding-and-removing-virtual-machine-ram-using-the-command-line-interface_configuring-virtual-machine-ram}使用命令行界面添加和删除虚拟机内存 {.title}
:::
要提高虚拟机的性能或释放所使用的主机资源，您可以使用 CLI
调整分配给虚拟机的内存量。
::: itemizedlist
**先决条件**
-   客户端操作系统正在运行内存 balloon 驱动程序。请执行以下命令校验：
    ::: orderedlist
    1.  确保虚拟机的配置包含 `memballoon`{.literal} 设备：
        ``` literallayout
        # virsh dumpxml testguest | grep memballoon
        ```
        如果这个命令显示任何输出结果，且模型没有设置为
        `none`{.literal}，则代表存在 `memballoon`{.literal} 设备。
    2.  确定 ballon 驱动程序正在客户端操作系统中运行。
        ::: itemizedlist
        -   在 Windows 客户端中，这些驱动程序作为 `virtio-win`{.literal}
            驱动程序软件包的一部分安装。具体步骤请参阅 为 Windows
            虚拟机安装半虚拟化 KVM 驱动程序。
        -   在 Linux
            客户端中，默认情况下，这些驱动程序通常默认包含，并在
            `memballoon`{.literal} 设备存在时激活。
        :::
    :::
:::
::: orderedlist
**步骤**
1.  [**可选：**]{.strong}获取关于虚拟机的最大内存和当前使用的内存的信息。这将作为您更改的基准，并进行验证。
    ``` literallayout
    # virsh dominfo testguest
    Max memory:     2097152 KiB
    Used memory:    2097152 KiB
    ```
2.  调整分配给虚拟机的最大内存。增加这个值可以提高虚拟机的性能风险，降低这个值会降低虚拟机在主机上的性能占用空间。请注意，这个更改只能在关闭的虚拟机上执行，因此调整正在运行的虚拟机需要重启才能生效。
    例如，要将 [*testguest*]{.emphasis} 虚拟机可以使用的最大内存改为
    4096 MiB：
    ``` literallayout
    # virt-xml testguest --edit --memory memory=4096,currentMemory=4096
    Domain 'testguest' defined successfully.
    Changes will take effect after the domain is fully powered off.
    ```
    要增加正在运行的虚拟机的最大内存，您可以将内存设备附加到虚拟机。这也被称为[**内存热插拔**]{.strong}。详情请参阅将内存设备附加到虚拟机。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    不支持从正在运行的虚拟机中删除内存设备（也称为内存热拔），因此红帽不建议这样做。
    :::
3.  [**可选：**]{.strong}您还可以调整虚拟机当前使用的内存，最多不超过最大分配量。这样可保证虚拟机在主机上拥有的内存负载，直到下次重启为止，而不会更改最大虚拟机分配。
    ``` literallayout
    # virsh setmem testguest --current 2048
    ```
:::
::: orderedlist
**验证**
1.  确认虚拟机使用的内存已更新：
    ``` literallayout
    # virsh dominfo testguest
    Max memory:     4194304 KiB
    Used memory:    2097152 KiB
    ```
2.  [**可选：**]{.strong}如果您调整了当前虚拟机内存，您可以获取虚拟机的内存
    balloon 统计，以评估它如何有效地调整其内存使用。
    ``` literallayout
     # virsh domstats --balloon testguest
    Domain: 'testguest'
      balloon.current=365624
      balloon.maximum=4194304
      balloon.swap_in=0
      balloon.swap_out=0
      balloon.major_fault=306
      balloon.minor_fault=156117
      balloon.unused=3834448
      balloon.available=4035008
      balloon.usable=3746340
      balloon.last-update=1587971682
      balloon.disk_caches=75444
      balloon.hugetlb_pgalloc=0
      balloon.hugetlb_pgfail=0