temp.pt1.x = min(r.pt1.x, r.pt2.x);
temp.pt1.y = min(r.pt1.y, r.pt2.y);
temp.pt2.x = max(r.pt1.x, r.pt2.x);
temp.pt2.y = max(r.pt1.y, r.pt2.y); return temp;
}
如果传递给函数的结构很大，使用指针方式的效率通常比复制整个结构的效率要高。结 构指针类似于普通变量指针。声明
struct point *pp;
将 pp 定义为一个指向 struct point 类型对象的指针。如果 pp 指向一个 point 结构，那 么*pp 即为该结构，而(*pp).x 和(*pp).y 则是结构成员。可以按照下例中的方式使用 pp:
struct point origin, *pp;
pp = &origin;
printf("origin is (%d,%d)\n", (*pp).x, (*pp).y);
其中，(*pp).x 中的圆括号是必需的，因为结构成员运算符“   ."的优先级比“   *"的优先级 高。表达式*pp.x 的含义等价于*(pp.x)，因为 x 不是指针，所以该表达式是非法的。
结构指针的使用频度非常高，为了使用方便，C 语言提供了另一种简写方式。假定 p 是 一个指向结构的指针，可以用
p•>结构成员
这种形式引用相应的结构成员。这样，就可以用下面的形式改写上面的一行代码:
printf("origin is (%d,%d)\n", pp•>x, pp•>y); 运算符.和•>都是从左至右结合的，所以，对于下面的声明: struct rect r, *rp = &r;
以下 4 个表达式是等价的:
r.pt1.x rp•>pt1.x (r.pt1).x (rp•>pt1).x
在所有运算符中，下面 4 个运算符的优先级最高:结构运算符“ ."和“ •>"、用于函数 调用的“ ()"以及用于下标的“ []"，因此，它们同操作数之间的结合也最紧密。例如，对于 结构声明
struct {
int len; char *str;
} *p;
表达式
++p•>len
将增加 len 的值，而不是增加 p 的值，这是田为，其中的隐含括号关系是++(p•>len)。可 以使用括号改变结合次序。例如:(++p)•>len 将先执行 p 的加 1 操作，再对 len 执行操作; 而(p++)•>len 则先对 len 执行操作，然后再将 p 加 1(该表达式中的括号可以省略)。
同样的道理，*p•>str 读取的是指针 str 所指向的对象的值;*p•>str++先读取指针 str 指向的对象的值，然后再将 str 加 1(与*s++相同);(*p•>str)++将指针 str 指向 的对象的值加 1;*p++•>str 先读取指针 str 指向的对象的值，然后再将 p 加 1。
6.3 结构数组
考虑编写这样一个程序，它用来统计输入中各个 C 语言关键字出现的次数。我们需要用 一个字符串数组存放关键字名，一个整型数组存放相应关键字的出现次数。一种实现方法是， 使用两个独立的数组 keyword 和 keycount 分别存放它们，如下所示
char *keyword[NKEYS]; int keycount[NKEYS];
我们注意到，这两个数组的大小相同，考虑到该特点，可以采用另一种不同的组织方式， 也就是我们这里所说的结构数组。每个关键字页包括一对变量:
char *word; int cout;
这样的多个变量对共同构成一个数组。我们来看下面的声明:
struct key { char *word; int count;
} keytab[NKEYS];
它声明了一个结构类型 key，并定义了该类型的结构数组 keytab，同时为其分配存储空间。 数组 keytab 的每个元素都是一个结构。上述声明也可以写成下列形式:
struct key { char *word; int count;
};
struct key keytab[NKEYS];
因为结构 keytab 包含一个固定的名字集合，所以，最好将它声明为外部变量，这样， 只需要初始化一次，所有的地方都可以使用。这种结构的初始化方法同前面所述的初始化方 法类似——在定义的后面通过一个用圆括号括起来的初值表进行初始化，如下所示:
struct key { char *word; int count;
} keytab[] = {
"auto", 0,
"break", 0,
"case", 0,
"char", 0,
"const", 0,
"continue", 0,
"default", 0,
/* ... */
"unsigned", 0,
"void", 0,
"volatile", 0,
"while", 0
};
与结构成员相对应，初值也要按照成对的方式列出。更精确的做法是，将每一行(即每个结 构)的初值都括在花括号内，如下所示:
{ "auto", 0 },
{ "break", 0 },
{ "case", 0 },
...
但是，如果初值是简单变量或字符串，并且其中的任何值都不为空，则内层的花括号可以省 略。通常情况下，如果初值存在并且方括号[ ]中没有数值，编译程序将计算数组 keytab 中 的页数。
在统计关键字出现次数的程序中，我们首先定义了 keytab。主程序反复调用函数 getword 读取输入，每次读取一个单词。每个单词将通过折半查找函数(参见第 3 章)在 keytab 中进行查找。注意，关键字列表必须按升序存储在 keytab 中。
#include 
#include 
#include 
#define MAXWORD 100
int getword(char *, int);
int binsearch(char *, struct key *, int);
/* count C keywords */ main()
{
int n;
char word[MAXWORD];
while (getword(word, MAXWORD) != EOF) if (isalpha(word[0]))
if ((n = binsearch(word, keytab, NKEYS)) >= 0) keytab[n].count++;
for (n = 0; n  0)
printf("%4d %s\n",
keytab[n].count, keytab[n].word);
return 0;
}
/* binsearch:              find word in tab[0]...tab[n•1] */ int binsearch(char *word, struct key tab[], int n)
{
int cond;
int low, high, mid;
low = 0;
high = n • 1;
while (low  0) low = mid + 1;
else
return mid;
}
return •1;
}
函数 getword 将在稍后介绍，这里只需要了解它的功能是每调用一次该函数，将读入一 个单词，并将其复制到名字为该函数的第一个参数的数组中。
NKEYS 代表 keytab 中关键字的个数。尽管可以手工计算，但由机器实现会更简单、更 安全，当列表可能变更时尤其如此。一种解决办法是，在初值表的结尾处加上一个空指针， 然后循环遍历 keytab，直到读到尾部的空指针为止。
但实际上并不需要这样做，因为数组的长度在编译时已经完全确定，它等于数组页的长 度乘以页数，因此，可以得出页数为:
Keytab 的长度/struct key 的长度
C   语言提供了一个编译时(compile•time)一元运算符   sizeof，它可用来计算任一对象的长 度。表达式
sizeof 对象
以及
sizeof(类型名)
将返回一个整型值，它等于指定对象或类型占用的存储空间字节数。(严格地说，sizeof 的 返回值是无符号整型值，其类型为  size_t，该类型在头文件中定义。)其中， 对象可以是变量、数组或结构;类型可以是基本类型，如  int、double，也可以是派生类型， 如结构类型或指针类型。
在该例子中，关键字的个数等于数组的长度除以单个元素的长度。下面的#define 语句 使用了这种方法设置 NKEYS 的值:
#define NKEYS (sizeof keytab / sizeof(struct key))
另一种方法是用数组的长度除以一个指定元素的长度，如下所示:
#define NKEYS (sizeof keytab / sizeof(keytab[0]))
使用第二种方法，即使类型改变了，也不需要改动程序。
条件编译语句#if 中不能使用 sizeof，因为预处理器不对类型名进行分析。但预处理器 并不计算#define 语句中的表达式，因此，在#define 中使用 sizeof 是合法的。
下面来讨论函数 getword。我们这里给出一个更通用的 getword 函数。该函数的功能 已超出这个示例程序的要求，不过，函数本身并不复杂。getword 从输入中读取下一个单词， 单词可以是以字母开头的字母和数字串，也可以是一个非空白符字符。函数返回值可能是单 词的第一个字符、文件结束符 EOF 或字符本身(如果该字符不是字母字符的话)。
/* getword:              get next word or character from input */ int getword(char *word, int lim)
{
int c, getch(void); void ungetch(int); char *w = word;
while (isspace(c = getch()))
;
if (c != EOF)
*w++ = c;
if (!isalpha(c)) {
*w = '\0'; return c;
}
for ( ; ••lim > 0; w++)
if (!isalnum(*w = getch())) { ungetch(*w);
break;
}
*w = '\0'; return word[0];
}
getword 函数使用了第 4 章中的函数 getch 和 ungetch。当读入的字符不属于字母数 字的集合时，说明 getword 多读入了一个字符。随后，调用 ungetch 将多读的一个字符放 回到输入中，以便下一次调用使用。Getword 还使用了其它一些函数:isspace 函数跳过空 白符，isalpha 函数识别字母，isalnum 函数识别字母和数字。所有这些函数都定义在标准 头文件中。
练习 6•1             上述 getword 函数不能正确处理下划线、字符串常量、注释及预处理器控 制指令。请编写一个更完善的 getword 函数。
6.4 指向结构的指针
为了进一步说明指向结构的指针和结构数组，我们重新编写关键字统计程序，这次采用 指针，而不使用数组下标。
keytab 的外部声明不需要修改，但 main 和 binsearch 函数必须修改。修改后的程序 如下:
#include 
#include 
#include 
#define MAXWORD 100
int getword(char *, int);
struct key *binsearch(char *, struct key *, int);