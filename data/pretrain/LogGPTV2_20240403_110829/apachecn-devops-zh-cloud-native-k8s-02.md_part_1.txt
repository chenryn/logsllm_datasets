# 二、建立你的 Kubernetes 集群
本章回顾了创建 Kubernetes 集群的一些可能性，我们需要学习本书的其余概念。我们将从 minikube(一种创建简单本地集群的工具)开始，然后接触一些额外的、更高级的(和生产就绪的)工具，并回顾公共云提供商提供的主要托管 Kubernetes 服务，最后介绍从头开始创建集群的策略。
在本章中，我们将涵盖以下主题:
*   创建第一个集群的选项
*   minikube——一种简单的开始方式
*   托管服务–EKS、GKE、阿克苏等
*   kube dam–简单的一致性
*   kops–基础设施自举
*   kube spray–可扩展的集群创建
*   完全从头开始创建集群
# 技术要求
为了运行本章中的命令，您需要安装 kubectl 工具。安装说明见 [*第 1 章*](01.html#_idTextAnchor016)*与 Kubernetes*沟通。
如果您实际上要使用本章中的任何方法创建集群，您将需要查看相关项目文档中每种方法的具体技术要求。特别是对于 minikube，大多数运行 Linux、macOS 或 Windows 的机器都可以工作。对于大型集群，请查看您计划使用的工具的具体文档。
本章中使用的代码可以在本书的 GitHub 存储库中找到，链接如下:
[https://github . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 2](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2)
# 创建集群的选项
创建 Kubernetes 集群的方法有很多，从简单的本地工具一直到从头开始完全创建集群。
如果您刚刚开始学习 Kubernetes，您可能希望使用 minikube 等工具创建一个简单的本地集群。
如果您希望为应用构建生产集群，您有几个选择:
*   您可以使用工具(如 Kops、Kubespray 或 Kubeadm)以编程方式创建集群。
*   您可以使用托管的 Kubernetes 服务。
*   您可以在虚拟机或物理硬件上完全从头开始创建群集。
除非您在集群配置方面有非常具体的要求(甚至在这种情况下)，否则通常不建议不使用引导工具就完全从头开始创建集群。
对于大多数用例，决定是在云提供商上使用托管 Kubernetes 服务还是使用引导工具。
在气隙系统中，使用自举工具是唯一的方法，但是对于特定的用例，有些方法比其他方法更好。特别是，Kops 旨在使在 AWS 等云提供商上创建和管理集群变得更加容易。
重要说明
本节没有讨论替代的第三方托管服务或集群创建和管理工具，如 Rancher 或 OpenShift。选择在生产环境中运行集群时，必须考虑多种因素，包括当前的基础架构、业务需求等等。为了简单起见，在本书中，我们将重点介绍生产集群，假设没有其他基础设施或超特定的业务需求——可以说是“清白的历史”。
# minikube–一种简单的开始方式
minikube 是从一个简单的本地集群开始最简单的方法。该集群不会为高可用性而设置，也不针对生产用途，但它是在几分钟内开始在 Kubernetes 上运行工作负载的好方法。
## 安装 minikube
minikube 可以安装在 Windows、macOS 和 Linux 上。接下来是三个平台的安装说明，也可以通过导航到[https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start)找到。
### 在 Windows 上安装
Windows 上最简单的安装方法就是从[下载运行](https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe)minikube 安装程序。
### 在 macOS 上安装
使用以下命令下载并安装二进制文件。您也可以在代码库中找到它:
Minikube-install-mac.sh
```
     curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 \
&& sudo install minikube-darwin-amd64 /usr/local/bin/minikube
```
### 在 Linux 上安装
使用以下命令下载并安装二进制文件:
Minikube-install-linux.sh
```
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
&& sudo install minikube-linux-amd64 /usr/local/bin/minikube
```
## 在 minikube 上创建集群
要在 minikube 上开始一个集群，只需运行`minikube start`，这将用默认的 VirtualBox 虚拟机驱动程序创建一个简单的本地集群。minikube 还有几个附加的配置选项，可以在文档站点查看。
运行`minikube` `start`命令将自动配置您的`kubeconfig`文件，因此您可以运行`kubectl`命令，而无需在新创建的集群上进行任何进一步的配置。
# 托管 Kubernetes 服务
提供托管 Kubernetes 服务的托管云提供商的数量一直在增长。然而，出于本书的目的，我们将关注主要的公共云及其特定的 Kubernetes 产品。这包括以下内容:
*   **亚马逊网络服务**(**AWS**)–**弹性 Kubernetes 服务** ( **EKS**
*   谷歌云-**谷歌库柏引擎** ( **GKE**
*   Microsoft Azure – **Azure Kubernetes Service** (**AKS**)
    重要说明
    托管 Kubernetes 服务的数量和实现总是在变化。AWS、Google Cloud 和 Azure 被选为本书的这一部分，因为它们很可能会继续以同样的方式工作。无论您使用哪种托管服务，请确保查看该服务提供的官方文档，以确保集群创建过程仍然与本书中介绍的相同。
## 托管 Kubernetes 服务的优势
一般来说，主要的托管 Kubernetes 服务提供了一些好处。首先，我们正在审查的所有三个托管服务都提供了一个完全托管的 Kubernetes 控制平面。
这意味着当您使用这些托管 Kubernetes 服务之一时，您不需要担心您的主节点。它们被抽象化了，也可能不存在。这三个托管集群都允许您在创建集群时选择工作节点的数量。
托管集群的另一个好处是可以从一个版本的 Kubernetes 无缝升级到另一个版本。一般来说，一旦针对托管服务验证了 Kubernetes 的新版本(不一定是最新版本)，您应该能够使用按钮或相当简单的过程进行升级。
## 托管 Kubernetes 服务的缺点
虽然管理的 Kubernetes 集群可以在许多方面使操作变得更容易，但也有一些缺点。
对于许多可用的托管 Kubernetes 服务，托管集群的最低成本远远超过手动或使用 Kops 等工具创建的最小集群的成本。对于生产用例，这通常不是什么大问题，因为生产集群无论如何都应该包含最少数量的节点，但是对于开发环境或测试集群来说，额外的成本可能不值得根据预算轻松操作。
此外，虽然抽象出主节点使操作变得更容易，但它也阻止了微调或高级主节点功能，否则这些功能可能在具有已定义主节点的集群上可用。
# AWS-弹性立方结构服务
AWS 管理的 Kubernetes 服务被称为 EKS，或弹性 Kubernetes 服务。开始学习 EKS 有几种不同的方法，但我们将介绍最简单的方法。
## 开始
为了创建 EKS 集群，您必须配置适当的**虚拟私有云(VPC)** 和**身份和访问管理(IAM)** 角色设置，此时您可以通过控制台创建集群。这些设置可以通过控制台手动创建，也可以通过云信息和地形等基础设施配置工具创建。通过控制台创建集群的完整说明可在[https://docs . AWS . Amazon . com/en _ PV/eks/latest/user guide/入门-console.html](https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html) 中找到。
但是，假设您正在从头开始创建一个集群和 VPC，您可以使用名为`eksctl`的工具来调配您的集群。
要安装`eksctl`，可以在[上找到 macOS、Linux、Windows 的](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html)安装说明。
一旦安装了`eksctl`，创建集群就像使用`eksctl create cluster`命令一样简单:
Eks-create-cluster.sh
```
eksctl create cluster \
--name prod \
--version 1.17 \
--nodegroup-name standard-workers \
--node-type t2.small \
--nodes 3 \
--nodes-min 1 \
--nodes-max 4 \
--node-ami auto
```
这将创建一个由三个`t2.small`实例组成的集群，作为在自动缩放组中设置的工作节点，最少一个节点，最多四个节点。使用的 Kubernetes 版本将是`1.17`。重要的是，`eksctl`从一个默认区域开始，根据选择的节点数量，它们将分布在该区域的多个可用性区域。
`eksctl`也会自动更新你的`kubeconfig`文件，所以你应该可以在集群创建过程完成后立即运行`kubectl`命令。
使用以下代码测试配置:
```
kubectl get nodes
```
您应该会看到节点及其相关 IP 的列表。你的集群准备好了！接下来，让我们看看谷歌的 GKE 设置过程。
# 谷歌云——谷歌 Kubernetes 引擎
GKE 是谷歌云的管理的 Kubernetes 服务。使用 gcloud 命令行工具，很容易快速启动 GKE 集群。
## 开始
要使用 gcloud 在 GKE 创建集群，您可以使用谷歌云的 Cloud Shell 服务，或者在本地运行命令。如果您想在本地运行命令，您必须通过谷歌云软件开发工具包安装 gcloud 命令行界面。安装说明见[https://cloud.google.com/sdk/docs/quickstarts](https://cloud.google.com/sdk/docs/quickstarts)。
一旦你安装了 gcloud，你需要确保你已经激活了谷歌云帐户中的 GKE 应用编程接口。
要轻松完成此操作，请导航至[https://console.cloud.google.com/apis/library](https://console.cloud.google.com/apis/library)，然后在搜索栏中搜索`kubernetes`。点击**Kubernetes 引擎 API** ，然后点击**启用**。
现在应用编程接口已经激活，使用以下命令在谷歌云中设置您的项目和计算区域:
```
gcloud config set project proj_id
gcloud config set compute/zone compute_zone
```
在命令中，`proj_id`对应于您想要在其中创建您的集群的谷歌云中的项目标识，`compute_zone`对应于您在谷歌云中想要的计算区域。
GKE 上实际上有三种类型的集群，每种集群都具有不同的(不断增加的)可靠性和容错级别:
*   单区集群
*   多带簇
*   区域集群
GKE 的**单区**集群是指具有单个控制平面副本和一个或多个工作节点运行在同一个谷歌云区域的集群。如果区域发生了什么，控制平面和工作人员(以及工作负载)都将下降。
GKE 的**多区域**集群是指一个集群，它有一个控制平面副本和两个或更多工作节点，运行在不同的谷歌云区域。这意味着，如果单个区域(甚至包含控制平面的区域)关闭，集群中运行的工作负载仍将持续，但是在控制平面区域恢复之前，Kubernetes API 将不可用。
最后，GKE 中的**区域集群**意味着既有多区域控制平面又有多区域工作节点的集群。如果任何区域发生故障，控制平面和工作节点上的工作负载都将持续存在。这是最昂贵和最可靠的选择。
现在，要实际创建集群，您可以运行以下命令，使用默认设置创建名为`dev`的集群:
```
gcloud container clusters create dev \
    --zone [compute_zone]
```
此命令将在您选择的计算区域中创建一个单区域群集。
为了创建多区域群集，您可以运行以下命令:
```
gcloud container clusters create dev \
    --zone [compute_zone_1]
    --node-locations [compute_zone_1],[compute_zone_2],[etc]
```
这里，`compute_zone_1`和`compute_zone_2`是完全不同的谷歌云区域。此外，还可以通过`node-locations`标志添加更多区域。
最后，要创建区域集群，可以运行以下命令:
```
gcloud container clusters create dev \
    --region [region] \
    --node-locations [compute_zone_1],[compute_zone_2],[etc]
```
在这种情况下，`node-locations`标志实际上是可选的。如果忽略，将在区域内的所有区域中创建带有工作节点的集群。如果您想要更改此默认行为，您可以使用`node-locations`标志覆盖它。
现在您已经运行了一个集群，您需要配置您的`kubeconfig`文件来与集群通信。为此，只需将群集名称传递给以下命令:
```
gcloud container clusters get-credentials [cluster_name]
```
最后，使用以下命令测试配置: