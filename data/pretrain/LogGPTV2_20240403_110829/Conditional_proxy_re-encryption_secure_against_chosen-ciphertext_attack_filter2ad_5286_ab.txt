to bidirectional ones, since (i) any unidirectional scheme can
be easily transformed to a bidirectional one [11], and (ii) in
bidirectional PRE systems, if the proxy and the delegatee
collude, they can recover the delegator’s secret key. The
same argument applies to C-PRE systems. Therefore, in
this paper, we only consider unidirectional C-PRE.
During the above game, adversary A is subject to the fol-
lowing restrictions:
(i). A can not issue corrupted key generation queries on
(cid:104)i∗(cid:105) to obtain the target secret key ski∗ .
(ii). A can issue decryption queries on neither (cid:104)pki∗ , (w∗, CT∗)(cid:105)
nor (cid:104)pkj, ReEncrypt(CT∗, rki∗,j, cki∗,w∗ )(cid:105).
(iii). A can not issue re-encryption queries on (cid:104)pki∗ , pkj, (w∗, CT∗)(cid:105)
if pkj appears in a previous corrupted key generation
query.
(iv). A can not obtain both the condition key cki∗,w∗ and
the partial re-encryption key rki∗,j if pkj appears in a
previous corrupted key generation query.
Remark 3. The above four restrictions rule out cases where
A can trivially win the game. To illustrate this, we use
the restriction (iv) as an example. Suppose A obtains both
the condition key cki∗,w∗ and the partial re-encryption key
rki∗,j with j is a corrupted user, then she can run algorithm
ReEncrypt(CTi∗ , rki∗,j, cki∗,w∗ ) to obtain a re-encrypted ci-
phertext CTj under public key pkj. Using the secret key
skj, A can decrypt the ciphertext to recover mδ, and hence
break the challenge.
GlobalSetup(λ): The setup algorithm takes as input a secu-
rity parameter λ. It ﬁrst generates (q, G, GT , e), where
q is a λ-bit prime, G and GT are two cyclic groups
with prime order q, and e is the bilinear pairing e :
$← G, and ﬁve
G×G → GT . Next, it chooses g, g1, f, f1
hash functions H1, H2, H3, H4 and H5 such that H1 :
{0, 1}∗ → Z∗
q , H2 : GT → {0, 1}l0+l1 , H3 : {0, 1}∗ →
G, H4 : GT → {0, 1}l0+l1 and H5 : {0, 1}∗ → Z∗
q . Here
l0 and l1 are determined by the security parameter,
and the message space is {0, 1}l0 . The global parame-
ters are
param = ((q, G, GT , e), g, g1, f, f1, H1,··· , H5).
We refer to the above adversary A as an IND-CPRE-CCA
adversary. His advantage in attacking scheme Π is deﬁned
as
=˛˛Pr[δ
(cid:48)
= δ] − 1/2˛˛
AdvIND-CPRE-CCA
Π,A
where the probability is taken over the random coins con-
sumed by the challenger and the adversary.
Definition 2. A C-PRE scheme Π is (t, qu, qc, qrk, qck, qre, qd, )
IND-CPRE-CCA secure, if and only if for any t-time IND-
CPRE-CCA adversary A that makes at most qu uncorrupted
key generation queries, at most qc corrupted key genera-
tion queries, at most qrk partial re-encryption key queries,
at most qck condition key queries, at most qre re-encryption
≤
queries and at most qd decryption queries, AdvIND-CPRE-CCA
.
Π,A
For the sake of an easy understanding of the security proofs
for our proposed C-PRE scheme, we diﬀerentiate two sub-
cases of restriction (iv) described in the above IND-CPRE-
CCA game, and distinguish between two types of IND-CPRE-
CCA adversaries:
• Type I IND-CPRE-CCA adversary: During the IND-
CPRE-CCA game, adversary A does not obtain the
partial re-encryption key rki∗,j with pkj is corrupted.
• Type II IND-CPRE-CCA adversary: During the IND-
CPRE-CCA game, adversary A does not obtain the
condition key cki∗,w∗ .
Note that these cases are mutually exclusive (by deﬁnition)
and complete. Therefore, the IND-CPRE-CCA security of a
C-PRE scheme can be proven by showing that neither Type
I nor Type II IND-CPRE-CCA adversary can win with a
non-negligible advantage.
4. A SECURE C-PRE SCHEME
In this section, we ﬁrst present our C-PRE scheme, and
then brieﬂy explain the intuition behind the construction.
Finally, based on the 3-QBDH assumption, we prove the
security for the proposed scheme.
4.1 Construction
The proposed C-PRE scheme consists of the following seven
algorithms:
KeyGen(i): To generate the public/secret key pair for user
q , and sets the public key and secret
) and ski = xi,
Ui, it picks xi
key to be pki = (Pi, Qi) = (gxi , g1/xi
respectively.
$← Z∗
1
RKeyGen(ski, pkj): On input a secret key ski = xi and a
), it outputs
public key pkj = (Pj, Qj) = (gxj , g1/xj
the partial re-encryption key rki,j = P 1/xi
= gxj /xi .
1
j
CKeyGen(ski, w): On input a secret key ski = xi and a
condition w ∈ {0, 1}∗, it outputs the condition key
cki,w = H3(w, pki)1/xi .
Encrypt(pki, m, w): On input a public key pki = (Pi, Qi), a
condition w and a message m ∈ {0, 1}l0 , it works as
following:
1. Pick r(cid:48) $← {0, 1}l1 and compute r = H1(m, r(cid:48), w).
2. Compute and output the ciphertext CT = (A, B, C, D)
as:
A = gr
1, B = P r
i , C = H2 (e(g, g)r)⊕(m(cid:107)r
(cid:48)
)⊕H4 (e(Qi, H3(w, pk))r) , D =`f H5(A,B,C)f1
(1)
ReEncrypt(CTi, rki,j, cki,w): On input the ciphertext CTi
associated with condition w under public key pki, a
condition key cki,w and a partial re-encryption key
rki,j, this algorithm generates the re-encrypted cipher-
text under key pkj as follows:
1. Parse pki as (Pi, Qi) and CTi as (A, B, C, D).
2. Check whether both of the following equalities
hold:
e(A, Pi) = e(g1, B), e(A, f H5(A,B,C)f1) = e(g1, D).
(2)
If not, output ⊥; otherwise, output the re-encrypted
ciphertext CTj = (B(cid:48), C(cid:48)) as
B
= C ⊕ H4(e(A, cki,w)). (3)
= e(B, rki,j), C
(cid:48)
(cid:48)
Indeed, the re-encrypted ciphertext CTj = (B(cid:48), C(cid:48)) is of the
following forms:
(cid:48)
B
= e(g, gskj )r, C
(cid:48)
= H2(e(g, g)r) ⊕ (m(cid:107)r
(cid:48)
),
(4)
where r = H1(m, r(cid:48), w).
Decrypt(CTi, ski): On input a secret key ski = xi and a
ciphertext CTi under public key pki = (Pi, Qi), this
algorithm works according to two cases:
• CT is an original ciphertext associated with a con-
dition w, i.e., CT = (A, B, C, D): If Eq. (2) does
not hold, output ⊥; otherwise, compute (m(cid:107)r(cid:48)) =
C ⊕ H4(e(A, H3(w, pki)1/xi )) ⊕ H2(e(B, g)1/xi ),
and return m if gxi·H1(m,r(cid:48),w) = B holds and ⊥
otherwise.
• CT is a re-encrypted ciphertext, i.e., CT = (B(cid:48), C(cid:48)):
(cid:48) 1
Compute (m(cid:107)r(cid:48)) = C(cid:48) ⊕ H2(B
xi ), and return m
if e(g, g)xi·H1(m,r(cid:48),w) = B(cid:48) holds and ⊥ otherwise.
Correctness: It can be veriﬁed that, all the correctly gener-
ated original/re-encrypted ciphertexts can be correctly de-
crypted. We here explain why a re-encrypted ciphertext,
generated by a proxy who does not have both the right
partial re-encryption key and the right condition key, can
not be decrypted by the delegatee with non-neglibible prob-
ability. For example, given an original ciphertext CTi =
(A, B, C, D) associated with condition w under public key
pki = (Pi, Qi) as in Eq.
(1). Suppose a proxy, who has
a partial re-encryption key rki,j = gxj /xi and a condition
key cki,w(cid:48) = H3(w(cid:48), pki)1/xi with w(cid:48) (cid:54)= w, runs ReEncrypt
to translate ciphertext CTi into a ciphertext intended for
Uj. Obviously, CTi can pass the validity check of Eq. (2),
and hence he generates the re-encrypted ciphertext CT(cid:48)
j =
(B(cid:48), C(cid:48)) as
(cid:48)
(cid:48)
(cid:48)
(cid:48)
C
B
i , gxj /xi ) = e(gxir, gxj /xi ) = e(g, g)xj r,
= e(B, rki,j) = e(P r
= C ⊕ H4(e(A, cki,w(cid:48) )) = H2 (e(g, g)r) ⊕ (m(cid:107)r
= H2 (e(g, g)r) ⊕ (m(cid:107)r
) ⊕ H4 (e(Qi, H3(w, pki))r) ⊕ H4
(cid:54)= w, the term H4 (e(Qi, H3(w, pki))r) in com-
Since w(cid:48)
ponent C(cid:48) can not be canceled by H4 (e(Qi, H3(w(cid:48), pki))r)
with overwhelming probability. So, when user j with se-
cret key skj = xj receives the above re-encrypted ciphertext
j, he computes C(cid:48) ⊕ H2(B(cid:48)1/xj ) and obtains (m(cid:107)r(cid:48)) ⊕
CT(cid:48)
H4 (e(Qi, H3(w, pki))r)⊕ H4 (e(Qi, H3(w(cid:48), pki))r) instead of
(m(cid:107)r(cid:48)). Obviously, this resulting value can not pass the va-
lidity check as shown in algorithm Decrypt. Therefore, re-
encrypted ciphertext CT(cid:48)
j can not be decrypted by Uj with
overwhelming probability.
Security Intuitions: Next, we brieﬂy explain why the pro-
posed scheme can ensure the chosen-ciphertext security. It
follows two important facts. First, the re-encrypted cipher-
text given in Eq. (4) is indeed a ciphertext of the “hashed”
CCA-secure ElGamal encryption [9, 16, 17] using the bilin-
ear pairings, and hence it is impossible for the adversary
to gain any advantage through malicious manipulating the
re-encrypted ciphertext. Second, the validity of the original
ciphertext given in Eq. (1) can be publicly veriﬁed by check-
ing Eq. (2). Thus, it is also impossible for the adversary to
maliciously manipulate the original ciphertext. In the next
subsection, we show detailed security proofs.
4.2 Security
The proposed C-PRE scheme is IND-CPRE-CCA secure in
the random oracle model as stated below.
Theorem 1. Our C-PRE scheme is IND-CPRE-CCA se-
cure in the random oracle model, assuming the 3-QBDH as-
sumption holds in groups (G, GT ).
Theorem 1 follows directly from the following Lemma 1 and
2.
Lemma 1. If there exists a (t, qH1 , qH2 , qH3 , qH4 , qH5 , qu, qc, qrk, qck, qre, qd, )
Type I IND-CPRE-CCA adversary A against our scheme,
then there exists an algorithm B which can solve the (t(cid:48), (cid:48))-
3-QBDH problem in groups (G, GT ) with
(cid:48) ≥ 1

qH2
(cid:48) ≤ t + (qH1 + qH2 + qH3 + qH4 + qH5 + qu + qc + qrk + qck + qre + qd)O(1)
t
− qH1 (1 + qd)
− qre + qd
e(1 + qrk)
2l0+l1
“
”
q

,
+ (2qu + 2qc + qrk + qck + qre + qH1 qre + 2qH1 qd + 3)te + (6qre + 5qd + 1)tp.
where te denotes the running time of an exponentiation in
group G, tp denotes the running time of a pairing in groups
(G, GT ), qHi (i = 1,··· , 5) denotes the number of oracle
queries to Hi, and qu, qc, qrk, qck, qre and qd have the same
meaning as those in Deﬁnition 2.
Proof. Suppose B is given as input a 3-QBDH challenge
q . Algo-
a2 . Algorithm B ﬁrst picks
tuple (g, g1/a, ga, g(a2), gb) with unknown a, b $← Z∗
rithm B’s goal is to output e(g, g)
u, α1, α2
q , deﬁnes g1 = `g(a2)´u, f = `g(a2)´α1 , f1 =
`g(a2)´α2 , and gives (g, g1, f, f1) to A. Next, B acts as a
$← Z∗
b
`e(Qi, H3(w
challenger and plays the IND-CPRE-CCA game with ad-
versary A in the following way:
) ⊕ H4 (e(Qi, H3(w, pki))r) ⊕ H4(e(A, cki,w(cid:48) ))
Hash Oracle Queries. At any time adversary A can issue
the random oracle queries Hi with i ∈ {1,··· , 5}. Algorithm
i with i ∈ {1,··· , 5}, which
B maintains ﬁve hash lists H list
are initially empty, and responds as below:
, pki))r´ .
(cid:48)
1
1
• H1 queries: On receipt of an H1 query (m, r(cid:48), w),
if this query already appears on the H list
in a tuple
(m, r(cid:48), w, r), return the predeﬁned value r. Otherwise,
choose r $← Z∗
q , add the tuple (m, r(cid:48), w, r) to the H list
and respond with H1(m, w, r(cid:48)) = r.
• H2 queries: On receipt of an H2 query U ∈ GT , if this
query already appears on the H list
in a tuple (U, β),
return the predeﬁned value β. Otherwise, choose β $←
{0, 1}l0+l1 , add the tuple (U, β) to the list H list
and
respond with H2(U ) = β.
• H3 queries: On receipt of an H3 query (w, pki), if
this query already appears on the H list
in a tuple
(w, pki, s, S), return the predeﬁned value S. Other-
wise, choose s $← Z∗
q , compute S = (ga)s, add the tuple
(w, pki, s, S) to the H list
and respond with H3(w, pki) =
S.
2
3
3
2
4
• H4 queries: On receipt of an H4 query V ∈ GT ,
if this query already appears on the H list
in a tu-
ple (V, γ), return the predeﬁned value γ. Otherwise,
choose γ $← {0, 1}l0+l1 , add the tuple (V, γ) to the
H list
and respond with H4(V ) = γ.
• H5 queries: On receipt of an H5 query (A, B, C), if
this query already appears on the H list
in a tuple
(A, B, C, η), return the predeﬁned value η. Otherwise,
choose η $← Z∗
q , add the tuple (A, B, C, η) to the H list
and respond with H5(A, B, C) = η.
4