# Attacking Tor at the Application Layer

**Speaker:** Gregory Fleischer (gflPI:EMAIL)  
**Status:** DRAFT SLIDES  
**Note:** Updated slides will be provided after the talk, including links to a permanent location for all online demos.

## Introduction

### What This Talk Is About
- **Identifying Tor Web Traffic:** Techniques for recognizing web traffic from Tor users.
- **Fingerprinting Users:** Methods to uniquely identify and track individual Tor users.
- **Attacking at the Application Layer:** Exploiting vulnerabilities in the application layer, with a focus on client-side attacks, particularly those involving web browsers and JavaScript.

### What This Talk Is Not About
- **Passive Monitoring at Exit Nodes:** Surveillance techniques that do not involve active intervention.
- **Network Attacks Against Path Selection:** Attacks that target the path selection process in the Tor network.
- **Using Application Functionality to Increase the Likelihood of Network Attacks:** Leveraging application features to facilitate network-level attacks.
- **Breaking SSL:** Techniques for compromising SSL/TLS encryption.

### Software Tested
- **Tor Browser Bundle**
- **Vidalia Bundle for Windows**
- **Vidalia Bundle for Mac OS X**
- **Firefox 2, Firefox 3.0, and Firefox 3.5 RC**
- **Torbutton**

## Background

### Brief Overview of Tor
- **Free Software Developed by The Tor Project:** Open-source software designed to provide anonymity.
- **Onion Routing and Encryption:** Uses multiple layers of encryption and routing through volunteer nodes to anonymize user traffic.
- **Circumventing Local ISP Surveillance and Network Blocking:** Helps users avoid local monitoring and censorship.
- **Hiding Originating IP Address:** Conceals the user's IP address from remote servers.

### Adversary Model at the Application Layer
- **Normal Browsing (Without Tor):** Potential adversaries include the local ISP and the remote server.
- **Tor Usage:** Additional adversaries include exit nodes, the exit node’s ISP, and the remote server’s ISP.

### Exit Nodes as Attack Points
- **Content Injection:** Can inject arbitrary content into non-encrypted responses.
- **Request Modification:** Can modify or replace non-encrypted requests.
- **Targeted Attacks:** Tor users are attractive targets due to their self-selecting nature.

### Applications and Tor
- **Proxy Awareness:** Only applications that are proxy-aware can use Tor effectively.
- **IP Address Leakage:** Network clients that are not Tor-aware may leak the user's original IP address.
- **DNS Requests Over Tor:** DNS queries are resolved by remote Tor nodes, with results cached locally for at least 60 seconds, making traditional DNS rebinding attacks difficult.

### Application Stack for Tor Web Surfing
- **Web Browser (Most Likely Firefox)**
- **Local HTTP Proxy (Privoxy or Polipo)**
- **Tor Client as SOCKS Proxy**
- **Remote Web Server**

## Identifying Tor Traffic

### Remote Detection
- **Well-Known Exit Nodes:** Lists of Tor exit nodes are publicly available (e.g., TorBulkExitList).
- **Alternative Methods:**
  - **Cached Descriptors:** Run a Tor client and track IP addresses.
  - **TorDNSEL:** DNS-based lookup of exit node/port combinations.
  - **Requesting Tor-Specific Content:** Use hidden services (.onion) or exit node syntax (.exit).

### Problems with Requesting Tor-Specific Content
- **External Dependencies:** Relies on resources outside of your control.
- **Infrastructure Costs:** Associated with maintaining the infrastructure.
- **Performance Issues:** May be slow and unreliable.

### Alternative Identification Method
- **Use .noconnect Syntax:** Compare timing of resolving "example.example" and "example.noconnect" to detect Tor usage.

## Fingerprinting

### Browser Fingerprinting
- **Active Testing with Firefox and Torbutton:**
  - **Torbutton Recommendations:** Hides user agent and disables plugins by default.
  - **Version and Platform Differences:** Examine functionality variations between versions and platforms.
  - **Add-Ons and Exceptions:** Detect installed add-ons and generate browser errors to reveal system information.

### Anonymity Set Reductions
- **Enumerate Windows COM Objects:** Use GeckoActiveXObject to load ActiveX objects and detect differences based on ProgID.
- **Local Proxies:**
  - **Vidalia Bundle (Privoxy):** Detectable using specific CSS.
  - **Tor Browser Bundle (Polipo):** Filters specific headers, which can be tested via XMLHttpRequest.

### Exploit Application Interactions and Defects
- **Generate Proxy Errors:** Use XMLHttpRequest to trigger errors that may include proxy version, hostname, local time, and timezone.
- **Browser Defects and Edge Cases:** Exploit edge cases like POST requests without length, IPv6 hostnames, and malformed authority.

### Protocol Errors
- **Server-Side Manipulation:** Serve valid content but drop CONNECT requests or return invalid HTTP headers.

## Attacking

### Historical Attacks
- **Notable Attacks:**
  - **Practical Onion Hacking - FortConsult**
  - **HD Moore’s Torment & decloak.net**
  - **ControlPort Exploitation:**
    - **Summer 2007:** Abused cross-protocol requests to Tor ControlPort.
    - **DNS Rebinding:** Java applets could bypass document.domain restrictions to open raw TCP sockets.

### Torbutton Protections
- **Restrict Dangerous Protocols:** Block protocols like "resource://", "chrome://", and "file://".
- **Mask Identifying Properties:** Hide certain properties from scripts.
- **JavaScript Limitations:** Some protections can be circumvented using JavaScript techniques.

### Defeating Torbutton Protections
- **Access Original Objects:** Use the "delete" operator or prototypes to access original objects.
- **XPCNativeWrapper and Components.lookupMethod:** Retrieve internally wrapped native methods.

### Abusing Active Content and Plugins
- **Dangerous Content:** Active content and plugins can be exploited.
- **Forced Plugin Loading:** Directly include plugin content to bypass restrictions.

### Example Exploit
- **Firefox 2 Exploit:** Use nested protocol handlers to load content before Torbutton can block it.

### Multiple Browser Attacks
- **The Tor Project Recommendation:** Use two browsers, one for Tor and one for unsafe browsing.
- **Unsafe Browser Vulnerabilities:** Content from the unsafe browser can target local Tor resources.

### External Protocol Handlers
- **Launch Non-Proxy-Aware Applications:** Use protocol handlers like telnet and ldap, which may be automatically invoked unless the "Always ask" option is set.

### Add-Ons Launching External Programs
- **Microsoft .NET Framework Assistant:** Monitors content and re-requests it from an external program, potentially leaking the user's IP address.

### Attacking Saved Content
- **Unencrypted Content Vulnerability:** Any unencrypted content downloaded over HTTP can be modified to be malicious.
- **Locally Saved HTML Content:** Can read any file if opened from the web browser.

### Vidalia Bundle Vulnerability
- **ControlPort Password Storage:** In Vidalia version 0.0.16, the ControlPort password was saved in clear text.
- **Java Same-Origin Bypass:** Could be used to authenticate to ControlPort using the password.

### Blended Threats
- **Plugin Content Bypass:** If plugin content is allowed, locally saved files may bypass restrictions.
- **Remote Opt-In:** Allow plugin content to connect back using crossdomain.xml.
- **Additional Active Content:** Use the jar: protocol to load additional active content.

### New Toggle Attacks
- **State Transition Attacks:** Attempt to transition state information when the user toggles Torbutton.
- **JavaScript Timers:** Use setInterval as a timer.
- **Detecting Banned Ports:** Use showModalDialog to transfer content between windows.

## Conclusions

### Large Attack Surface
- **Many Attackable Components:** Between the user's web browser, local HTTP proxy, Tor client, and remote web server.
- **Ongoing Research:** New attack techniques are continuously being developed.
- **Repurposed Attacks:** Many common web application attacks can be adapted to target Tor users.

### Mitigation Strategies
- **Isolated Environment:**
  - **Virtual Machine (VM):** Run the web browser and Tor inside a VM.
  - **Minimal Software Installation:** Only install necessary software.
  - **Egress Firewall:** Create a restrictive firewall to ensure only Tor traffic exits.
- **Safe Web Browsing Habits:**
  - **Isolated Identities:** Use separate identities and avoid mixing user accounts.
  - **Trust No Unencrypted Content:** Do not trust content downloaded over unencrypted channels.

## References
- [Tor Project](https://www.torproject.org/)
- [Tor Address Specification](https://git.torproject.org/checkout/tor/master/doc/spec/address-spec.txt)
- [Torbutton Design](https://www.torproject.org/torbutton/design/)
- [Tor Exit List](http://exitlist.torproject.org/)
- [RFC 2616](http://www.ietf.org/rfc/rfc2616.txt)
- [Mozilla Releases](http://releases.mozilla.org/)
- [MDN showModalDialog](https://developer.mozilla.org/En/DOM/Window.showModalDialog)
- [Windows Media in Netscape](https://developer.mozilla.org/En/Windows_Media_in_Netscape)
- [Bugzilla Bug 412945](https://bugzilla.mozilla.org/show_bug.cgi?id=412945)
- [Detecting Privoxy Part II](http://ha.ckers.org/blog/20061220/detecting-privoxy-part-ii/)
- [Practical Onion Hacking](http://www.fortconsult.net/images/pdf/Practical_Onion_Hacking.pdf)
- [Tor Talk Archives](http://archives.seul.org/or/talk/Mar-2007/msg00131.html)
- [decloak.net](http://decloak.net/)