C++ applications.
Precision and Scalability. SAFEDISPATCH uses CHA
to determine, at compile time, which program locations a
runtime method call may legitimately jump to. As a type-
based analysis, CHA is relatively lightweight and scales up
to large, complex applications. However, type-based analyses
scale because they are generally coarse-grained and therefore
less precise. It is possible that an object x stored in a variable of
static type c only ever has runtime type c0 where c0 is a subclass
of c. In such instances, CHA will overestimate the set of valid
implementations x may invoke, including the implementation
for c and all implementations in subclasses of c, while in reality
only the implementation in c0 should be called at runtime.
Such sources of imprecision could be remedied by using a
more powerful static analysis. The additional precision would
5
// source level method call
o->x(args);
// (A) generated code without check inlining
vtable t = *((vtable *)o);
method m = t[vtable position(x)];
check(static typeof (o), "x", m);
m(o, args);
// (B) generated code with check partially inlined
vtable t = *((vtable *)o);
method m = t[vtable position(x)];
if (m != m1 && m != m2 && m != m3)
check(static typeof (o), "x", m);
m(o, args);
void check(type c, string n, method m) {
error("bogus method implementation!");
if (!ValidM[c][n].contains(m)) {
}
}
SAFEDISPATCH Instrumentation. At each method call site,
Fig. 6.
SAFEDISPATCH inserts a check in the generated code to ensure that objects
only invoke methods allowed by the static C++ type system. As shown in
(A), the basic SAFEDISPATCH instrumentation simply adds a call to the
check() function immediately before the jump to a method implementation.
check(c, n, m) consults the ValidM table to ensure that function pointer m
is a valid implementation of the method named n for objects with static type c.
To avoid an extra function call at every method invocation, SAFEDISPATCH
actually uses proﬁling information to partially inline check(). As shown
in (B), SAFEDISPATCH inserts a branch to test
if the function pointer
looked up from the calling object’s vtable is one of the most common valid
implementations of the method used at this call site. If it is, SAFEDISPATCH
safely skips the call to check(), thus avoiding the overhead of an additional
function call in the common case. Note that all expressions in italics in
the code above are evaluated at compile time as they require source-level
information available only to the compiler.
provide stronger security guarantees by further restricting an
attacker’s ability to invoke method implementations that should
never arise during legitimate program execution. However,
accurately tracking which classes ﬂow to a particular variable
x at compile time would require a precise whole program
dataﬂow analysis. While such analyses exist, they often don’t
scale to the kinds of programs we aim to protect, leading to
unacceptable increases in compile time. Those analyses that
can scale in fact do so by giving up on precision, which
would bring us back to square one. As a result, we feel that
our type-based approach in CHA presents the best tradeoff
by being precise enough to prevent real world attacks without
dramatically increasing compile times.
We do note that CHA is fundamentally a whole program
analysis, and thus requires all an application’s code to be
available at compile time. Unfortunately, this currently pre-
cludes the use of separate compilation in our prototype im-
plementation. However, our SAFEDISPATCH implementation
is a research prototype and we feel
that future work can
address this limitation by annotating compiled object ﬁles with
partial analysis results and composing those results to complete
SAFEDISPATCH’s program instrumentation at linktime.
6
B. SAFEDISPATCH Method Checking Instrumentation
After SAFEDISPATCH computes the CHA results, it can
instrument
the program with checks to ensure that when-
ever an object calls a virtual method, control jumps to one
of the method implementations statically determined to be
valid. Figure 6 shows how SAFEDISPATCH instruments each
source level method call. For now, consider the basic strategy
illustrated in part (A) of Figure 6. In the generated code
for o->x(args), after the implementation m for method
name "x" has been looked up in the vtable dereferenced
from o’s vtable pointer, SAFEDISPATCH inserts a call
to
check(static typeof(o), "x", m) before invoking m. This
call to check consults the CHA results in ValidM to ensure
that m is one of the valid implementations for "x" when called
by an object which has o’s static type. Note that expressions
in italics are evaluated at compile time as they require source-
level information available only to the compiler. As shown
in part (B) of Figure 6, SAFEDISPATCH also reduces runtime
overhead by partially inlining calls to the check function,
which we discuss in greater detail below.
Data Structures for Checking. The operation for checking
method validity, ValidM[c][n].contains(m), is critical
for performance since it is inserted at every virtual method
call site. Broadly speaking, SAFEDISPATCH uses an array of
sets of valid method implementations to perform this validity
checking. More speciﬁcally, for each pair (c, n) where c is a
class and n is a method name, SAFEDISPATCH generates at
compile time a unique natural number i(c,n) which is used to
index into a large array of sets. The set at position i(c,n), which
contains the possible implementations for method n of class
c, is represented as an unordered array of pointers to method
addresses. Therefore ValidM[c][n].contains(m) in-
volves an array lookup to retrieve ValidM[c][n], followed
by a linear scan through the resulting set. In our experiments
we found that the average set size was very small (1.44 for
method checking) and as result we do not expect that using a
more elaborate data structure for representing these sets (e.g.
a hash-set) would reduce the overhead signiﬁcantly. Instead,
we focus on other aggressive optimizations, for example the
inlining of common checks, as explained in Section III-C.
Externalizing Linktime Symbols. One subtlety of the
method checking instrumentation is that the compiler does
not statically know the concrete address where method im-
plementations will be placed at linktime. It may seem that
the SAFEDISPATCH compiler can handle this issue by simply
referring to the linktime symbols for each method imple-
mentation. However, many modern C++ compilers restrict the
linktime symbols for method implementations to only internal
symbols, meaning that they cannot be referred to outside of
code for their class. This poses a problem for SAFEDISPATCH
as we need to check method implementation addresses wher-
ever they may be called, not just in the class where they’re
deﬁned. To address this issue, we externalize all
linktime
symbols for method implementations, allowing us to refer to
them outside of their deﬁning class. It would be straightforward
to add an additional pass to check that these externalized
symbols are only used in (1) internally by the deﬁning class
or (2) in SAFEDISPATCH instrumentation, together providing
a guarantee equivalent to that of the unmodiﬁed C++ compiler.
C. SAFEDISPATCH Optimizations
To minimize SAFEDISPATCH’s runtime overhead, we de-
veloped a handful of optimizations to reduce the cost of each
check. Most importantly, we proﬁle applications and partially
inline the checks performed by the check function as shown
in part (B) of Figure 6. This partial inlining compares the
function pointer retrieved from an object’s vtable against the
concrete addresses of the N most common implementations
of the method being called in proﬁling. In Figure 6 we limit
N to just the three most common implementations, but in
practice we can choose a value that balances the performance
improvement of inlining against the increase in code size,
which, in the worst case, could negatively impact instruction
cache performance. In our actual experiments, discussed in
Section VI, we inline all checks observed during proﬁling,
which increases codesize, but did not present signiﬁcant per-
formance overhead for our benchmarks.
SAFEDISPATCH also performs devirtualization: in the case
that CHA is able to statically determine there is a single valid
method implementation at a given method call site, we rewrite
the call to forgo vtable lookup and directly call the unique valid
implementation. This avoids unnecessary memory operations
to load the vtable and other computations to set up a virtual
method call.
Now that we have inlined frequently executed checks, the
high-level code in part (B) of Figure 6 still needs to be
translated into low-level code. A direct na¨ıve translation leaves
room for two important optmizations, which we now describe.
Consider again the code in part (B) of Figure 6, and let’s
look at a direct unoptimized translation to low-level code, as
shown in part (A) of Figure 7. One source of overhead in this
low-level code is that there are two opportunities for branch
mis-prediction: one is to mis-predict which of the if (..)
goto L1 statements will ﬁre; the second is to mis-predict
where the indirect call through m will go (note that m is a
function pointer). Our ﬁrst low-level optimization is that we
can remove the second mis-prediction opportunity by placing
a direct call once we know which of the three conditional has
ﬁred. This is shown in part (B) of Figure 7, where we now
have direct calls for all checks that have been inlined. However,
this code now has a lot of code duplication – namely all the
setup for parameters. While this doesn’t affect the number of
instructions executed at run-time, it creates code bloat, which
can have adverse effects on instruction-cache performance. Our
second low-level optimization is that we hoist the duplicate
code from inside the conditionals and use a single copy right
before the conditionals, as shown in part (C) of Figure 7.
With all of the above optimizations, namely proﬁle-based
inlined checks and low-level optimizations, we were able
to reduce the runtime overhead of SAFEDISPATCH to 2.1%
and the codesize overhead to 7.5%. Section VI will provide
a more detailed empirical evaluation of the overheads of
SAFEDISPATCH.
IV. AN ALTERNATE APPROACH: VTABLE CHECKING
The previous section showed how SAFEDISPATCH checks
the control ﬂow transfer at virtual method call sites. In this
section, we present an alternate technique which establishes
the same control-ﬂow guarantee, but provides additional data
// source level method call
o->x(args);
// (A) direct unoptimized translation
vtable t = *((vtable *)o);
method m = t[vtable position(x)];
if (m == m1) goto L;
if (m == m2) goto L;
if (m == m3) goto L;
check(static typeof (o), "x", m);
setup_call_args(o, args);
indirect_call m;
...
L:
// (B) eliminate indirect calls
vtable t = *((vtable *)o);
method m = t[vtable position(x)];
if (m == m1) goto L1;
if (m == m2) goto L2;
if (m == m3) goto L3;
check(static typeof (o), "x", m);
setup_call_args(o, args);
indirect_call m;
goto LR;
L1: setup_call_args(o, args);
direct_call m1;
goto LR;
L2: setup_call_args(o, args);
direct_call m2;
goto LR;
L3: setup_call_args(o, args);
direct_call m3;
goto LR;
LR: ...
// (C) eliminate duplicate code
vtable t = *((vtable *)o);
method m = t[vtable position(x)];
setup_call_args(o, args);
if (m == m1) goto L1;
if (m == m2) goto L2;
if (m == m3) goto L3;
check(static typeof (o), "x", m);
indirect_call m;
goto LR;
L1: direct_call m1;
L2: direct_call m2;
goto LR;
goto LR;
L3: direct_call m3;
goto LR;
LR: ...
Fig. 7. Low-level SAFEDISPATCH Optimization. The code above illus-
trates low-level optimizations used in SAFEDISPATCH to eliminate branch
misprediction for frequently called methods and to eliminate duplicate code
for setting up method invocations. As in Figure 6, all expressions in italics
above are evaluated at compile time.
integrity guarantees in the face of multiple inheritance, at the
expense of additional runtime overhead. Later, in Section VI,
we evaluate and compare the overhead of both approaches.
A. Pointer Offsets for Multiple Inheritance
To better explain this alternate approach, we ﬁrst review
vtables in more detail. In practice, vtables store more than just
function pointers; they also contain offset values that are used
to adjust the this pointer appropriately in the face of multiple
inheritance.
For example, consider a class C that inherits from both A
and B. The data layout of C objects will ﬁrst include the ﬁelds
from A, followed by the ﬁelds from B. Inherited methods from
7
A will work unmodiﬁed on objects of type C because the offset
of A’s data ﬁelds are the same in A as in C. However, methods
inherited from B will not work, because B’s methods assume
that B’s ﬁelds start at the beginning of the object, whereas in
C these ﬁelds are located after A’s ﬁelds.
To address this problem, the compiler creates wrappers in
C for methods inherited from B. Before calling B’s original
implementation of the method, the wrapper adjusts the calling
object’s this pointer by an appropriate offset so that
it
points to the B part of the C object. The situation is further
complicated if C is subclassed again using additional multiple
inheritance, in which case the layout for the ﬁelds inherited
from A and B could change in the subclass of C. To address
this problem, pointer offsets for this are stored in the vtable,
so that the correct offset can be used at run-time depending
on what class is being used to make the method call.
While our approach from Section III always protects
against malicious control ﬂow at virtual method call sites,
it does not defend against an attacker counterfeiting a vtable
with incorrect this pointer offsets. If an attacker successfully
mounts such an attack, our previously described approach
would still protect the control ﬂow at virtual method calls,
but the attacker could corrupt the this offset on entry to a
method, potentially leading to further data corruption.
B. vtable Checking
To additionally protect this pointer offsets at method
calls, we implemented an alternate vtable hijacking defense
called vtable checking. Instead of checking the validity of the
function pointer looked up from an object’s vtable, we check
the vtable pointer itself to ensure that it is valid given the static
type of the calling object. In this way, we not only guarantee
valid control ﬂow at method calls, but also ensure that the
offset value of this is computed appropriately.
Figure 8 shows how each source level method call
is
instrumented in the vtable checking approach. As in Fig-
ure 6, expressions in italics are evaluated at compile time
as they require source-level information available only to the
compiler. We insert a check similar to the method check-
ing instrumentation shown in Figure 6, but move the in-
strumentation earlier to check the vtable itself instead of
the function pointer retrieved from it. In general, for code
generated for method call o->x(args), we insert a call
to the vt_check(static typeof(o), t) after vtable t has
been loaded from o’s vtable pointer. This call to vt_check
consults the results of a modiﬁed CHA analysis to ensure
that t is one of the valid vtables for an object of o’s
static type. The computation for ValidVT is a modiﬁed,
simpler version of the computation for ValidM described
in the previous section, since the compiler already computes
vtables. In particular, for each class c we collect the vtables
for c and all of its subclasses, and store this entire set
in ValidVT[c]. Similarly to method checking, the oper-
ation ValidVT[c].contains(t) is performed in two
steps: ValidVT[c] is implemented as an array lookup and
contains(t) is implemented using linear search. Here
again, the average size of ValidVT[c] in our experiments
was very small (2.58) and we reduce runtime overhead by
selectively inlining calls to the vt_check function, taking
// source level method call
o->x(args);
// generated code with vtable check partially inlined