---
author: Marcia Ramos
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 56433
date: '2017-05-13 14:09:00'
editorchoice: false
excerpt: "GitLab 是一个基于 git 的仓库管理程序，也是一个方便软件开发的强大完整应用。\r\nGitLab 拥有一个“用户新人友好”的界面，通过图形界面和命令行界面，使你的工作更加具有效率。GitLab
  不仅仅对开发者是一个有用的工具，它甚至可以被集成到你的整个团队中，使得每一个人获得一个独自唯一的平台。"
fromurl: https://about.gitlab.com/2016/10/25/gitlab-workflow-an-overview/
id: 8503
islctt: true
largepic: /data/attachment/album/201705/13/140849bur08pn7r6vwpfu9.jpg
permalink: /article-8503-1.html
pic: /data/attachment/album/201705/13/140849bur08pn7r6vwpfu9.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: "GitLab 是一个基于 git 的仓库管理程序，也是一个方便软件开发的强大完整应用。\r\nGitLab 拥有一个“用户新人友好”的界面，通过图形界面和命令行界面，使你的工作更加具有效率。GitLab
  不仅仅对开发者是一个有用的工具，它甚至可以被集成到你的整个团队中，使得每一个人获得一个独自唯一的平台。"
tags:
- Git
- GitLab
thumb: false
title: GitLab 工作流概览
titlepic: true
translator: svtter
updated: '2017-05-13 14:09:00'
---
GitLab 是一个基于 git 的仓库管理程序，也是一个方便软件开发的强大完整应用。
GitLab 拥有一个“用户新人友好”的界面，通过图形界面和命令行界面，使你的工作更加具有效率。GitLab 不仅仅对开发者是一个有用的工具，它甚至可以被集成到你的整个团队中，使得每一个人获得一个独自唯一的平台。
GitLab 工作流逻辑符合使用者思维，使得整个平台变得更加易用。相信我，使用一次，你就离不开它了！
![](/data/attachment/album/201705/13/140849bur08pn7r6vwpfu9.jpg)
### GitLab 工作流
**GitLab 工作流** 是在软件开发过程中，在使用 GitLab 作为代码托管平台时，可以采取的动作的一个逻辑序列。
GitLab 工作流遵循了 [GitLab Flow](https://about.gitlab.com/2014/09/29/gitlab-flow/) 策略，这是由一系列由**基于 Git** 的方法和策略组成的，这些方法为版本的管理，例如**分支策略**、**Git最佳实践**等等提供了保障。
通过 GitLab 工作流，可以很方便的[提升](https://about.gitlab.com/2016/09/13/gitlab-master-plan/)团队的工作效率以及凝聚力。这种提升，从引入一个新的项目开始，一直到发布这个项目，成为一个产品都有所体现。这就是我们所说的“如何通过最快的速度把一个点子在 10 步之内变成一个产品”。
![FROM IDEA TO PRODUCTION IN 10 STEPS](/data/attachment/album/201705/13/140909nlu4iz914d9u19xz.png)
#### 软件开发阶段
一般情况下，软件开发经过 10 个主要阶段；GitLab 为这 10 个阶段依次提供了解决方案：
1. **IDEA**： 每一个从点子开始的项目，通常来源于一次闲聊。在这个阶段，GitLab 集成了 [Mattermost](https://about.gitlab.com/2015/08/18/gitlab-loves-mattermost/)。
2. **ISSUE**： 最有效的讨论一个点子的方法，就是为这个点子建立一个工单讨论。你的团队和你的合作伙伴可以在  工单追踪器   issue tracker  中帮助你去提升这个点子
3. **PLAN**： 一旦讨论得到一致的同意，就是开始编码的时候了。但是等等！首先，我们需要优先考虑组织我们的工作流。对于此，我们可以使用  工单看板   Issue Board 。
4. **CODE**： 现在，当一切准备就绪，我们可以开始写代码了。
5. **COMMIT**： 当我们为我们的初步成果欢呼的时候，我们就可以在版本控制下，提交代码到功能分支了。
6. **TEST**： 通过 [GitLab CI](https://about.gitlab.com/gitlab-ci/)，我们可以运行脚本来构建和测试我们的应用。
7. **REVIEW**： 一旦脚本成功运行，我们测试和构建成功，我们就可以进行  代码复审   code review  以及批准。
8. **STAGING：**： 现在是时候[将我们的代码部署到演示环境](https://about.gitlab.com/2016/08/05/continuous-integration-delivery-and-deployment-with-gitlab/)来检查一下，看看是否一切就像我们预估的那样顺畅——或者我们可能仍然需要修改。
9. **PRODUCTION**： 当一切都如预期，就是[部署到生产环境](https://about.gitlab.com/2016/08/05/continuous-integration-delivery-and-deployment-with-gitlab/)的时候了！
10. **FEEDBACK**： 现在是时候返回去看我们项目中需要提升的部分了。我们使用[ 周期分析   Cycle Analytics ](https://about.gitlab.com/solutions/cycle-analytics/)来对当前项目中关键的部分进行的反馈。
简单浏览这些步骤，我们可以发现，提供强大的工具来支持这些步骤是十分重要的。在接下来的部分，我们为 GitLab 的可用工具提供一个简单的概览。
### GitLab 工单追踪器
GitLab 有一个强大的工单追溯系统，在使用过程中，允许你和你的团队，以及你的合作者分享和讨论建议。
![issue tracker - view list](/data/attachment/album/201705/13/140910xwoz5ko7v7lc7yoq.png)
工单是 GitLab 工作流的第一个重要重要特性。[以工单的讨论为开始](https://about.gitlab.com/2016/03/03/start-with-an-issue/)； 跟踪新点子的改变是一个最好的方式。
这十分有利于：
* 讨论点子
* 提交功能建议
* 提问题
* 提交错误和故障
* 获取支持
* 精细化新代码的引入
每一个在 GitLab 上部署的项目都有一个工单追踪器。找到你的项目中的 **Issues** > **New issue** 来创建一个新的工单。建立一个标题来总结要被讨论的主题，并且使用 [Markdown](https://docs.gitlab.com/ee/user/markdown.html) 来形容它。看看下面的“专业技巧”来加强你的工单描述。
GitLab 工单追踪器提供了一个额外的实用功能，使得步骤变得更佳易于管理和考虑。下面的部分仔细描述了它。
![new issue - additional settings](/data/attachment/album/201705/13/140911xme7bbv51v2r5hu5.png)
#### 秘密工单
无论何时，如果你仅仅想要在团队中讨论这个工单，你可以使[该工单成为秘密的](https://about.gitlab.com/2016/03/31/feature-highlihght-confidential-issues/)。即使你的项目是公开的，你的工单也会被保密起来。当一个不是本项目成员的人，就算是 [报告人级别][01]，想要访问工单的地址时，浏览器也会返回一个 404 错误。
#### 截止日期
每一个工单允许你填写一个[截止日期](https://about.gitlab.com/2016/08/05/feature-highlight-set-dates-for-issues/#due-dates-for-issues)。有些团队工作时间表安排紧凑，以某种方式去设置一个截止日期来解决问题，是有必要的。这些都可以通过截止日期这一功能实现。
当你对一个多任务项目有截止日期的时候——比如说，一个新的发布活动、项目的启动，或者按阶段追踪任务——你可以使用[里程碑](https://about.gitlab.com/2016/10/25/gitlab-workflow-an-overview/#milestones)。
#### 受托者
要让某人处理某个工单，可以将其分配给他。你可以任意修改被分配者，直到满足你的需求。这个功能的想法是，一个受托者本身对这个工单负责，直到其将这个工单重新赋予其他人。
这也可以用于按受托者筛选工单。
#### 标签
GitLab 标签也是 GitLab 流的一个重要组成部分。你可以使用它们来分类你的工单，在工作流中定位，以及通过[优先级标签](https://docs.gitlab.com/ee/user/project/labels.html#prioritize-labels)来安装优先级组织它们。
标签使得你与[GitLab 工单看板](https://about.gitlab.com/2016/10/25/gitlab-workflow-an-overview/#gitlab-issue-board)协同工作，加快工程进度以及组织你的工作流。
**新功能：** 你可以创建[组标签](https://about.gitlab.com/2016/10/22/gitlab-8-13-released/#group-labels)。它可以使得在每一个项目组中使用相同的标签。
#### 工单权重
你可以添加个[工单权重](https://docs.gitlab.com/ee/workflow/issue_weight.html)使得一个工单重要性表现的更为清晰。01 - 03 表示工单不是特别重要，07 - 09 表示十分重要，04 - 06 表示程度适中。此外，你可以与你的团队自行定义工单重要性的指标。
注：该功能仅可用于 GitLab 企业版和 GitLab.com 上。
#### GitLab 工单看板
在项目中，[GitLab 工单看板](https://about.gitlab.com/solutions/issueboard)是一个用于计划以及组织你的工单，使之符合你的项目工作流的工具。
看板包含了与其相关的相应标签，每一个列表包含了相关的被标记的工单，并且以卡片的形式展示出来。
这些卡片可以在列表之间移动，被移动的卡片，其标签将会依据你移动的位置相应更新到列表上。
![GitLab Issue Board](/data/attachment/album/201705/13/140913m24dkppiji22di1c.gif)
**新功能：** 你也可以通过点击列表上方的“+”按钮在看板右边创建工单。当你这么做的时候，这个工单将会自动添加与列表相关的标签。
**新功能：** 我们[最近推出了](https://about.gitlab.com/2016/10/22/gitlab-8-13-released/#multiple-issue-boards-ee) 每一个 GitLab 项目拥有**多个工单看板**的功能（仅存在于 [GitLab 企业版](https://about.gitlab.com/free-trial/)）；这是为不同的工作流组织你的工单的好方法。
![Multiple Issue Boards](/data/attachment/album/201705/13/140914m8pqqigv78fwiisi.gif)
### 通过 GitLab 进行代码复审