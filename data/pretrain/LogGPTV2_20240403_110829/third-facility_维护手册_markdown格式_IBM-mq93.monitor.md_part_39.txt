integer BLOB request
572 23C 64 bit 8 LMSUTCUW Total elapsed time for all thread update BLOB
integer requests
580 244 64 bit 8 LMSUTMXW Maximum elapsed time for a thread update
integer BLOB request
588 24C 64 bit 8 LMSUSCUW Total elapsed time for all SQL update BLOB
integer requests
596 254 64 bit 8 LMSUSMXW Maximum elapsed time for an SQL update
integer BLOB request
604 25C 64 bit 8 LMSDTCUW Total elapsed time for all thread delete BLOB
integer requests
612 264 64 bit 8 LMSDTMXW Maximum elapsed time for a thread delete
integer BLOB request
338 Monitoring and Performance for IBM MQ
Table 36. Db2 statistics record (Q5ST) (continued)
Offset: Offset:
Dec Hex Type Len Name Description
620 26C 64 bit 8 LMSDSCUW Total elapsed time for all SQL delete BLOB
integer requests
628 274 64 bit 8 LMSDSMXW Maximum elapsed time for an SQL delete
integer BLOB request
636 27C 64 bit 8 LMSLTCUW Total elapsed time for all thread list BLOB
integer requests
644 284 64 bit 8 LMSLTMXW Maximum elapsed time for a thread list BLOB
integer request
652 28C 64 bit 8 LMSLSCUW Total elapsed time for all SQL list BLOB
integer requests
660 294 64 bit 8 LMSLSMXW Maximum elapsed time for an SQL list BLOB
integer request
The data contains counts for each request type that the Db2 resource manager supports. For these
request types, maximum and cumulative elapse times are kept for the following:
• The time spent in the Db2 resource manager as a whole (called the thread time).
• The time that was spent performing the RRSAF and SQL parts of the request (a subset of the thread
time called the SQL time).
Information is also provided for:
• The number of server tasks attached.
• The maximum overall request depth against any of the server tasks.
• The number of times any of the server task requests terminated abnormally.
If the abnormal termination count is not zero, a requeue count is provided indicating the number of
queued requests that were requeued to other server tasks as a result of the abnormal termination.
If the average thread time is significantly greater that the average SQL time, this might indicate that
thread requests are spending an excessive amount of time waiting for a server task to process the SQL
part of the request. If this is the case, examine the DHIGMAX field and, if the value is greater than
one, consider increasing the number of Db2 server tasks specified in the QSGDATA parameter of the
CSQ6SYSP system parameter macro.
Coupling facility manager data records
Use this topic as a reference to the format of the coupling facility manager data records.
The format of the coupling facility manager statistics record is described in the following table and in
assembler macro thlqual. SCSQMACS(CSQDQEST) and C header file thlqual.SCSQC370(CSQDSMFC). The
field names in C are all in lowercase, for example qest, qestid.
If the queue manager was not started as a member of a queue sharing group, no data is recorded in this
record.
Table 37. Coupling facility statistics record (QEST)
Offset: Dec Offset: Hex Type Len Name Description
0 0 Structure 4104 QEST CF manager statistics
0 0 Bitstring 2 QESTID Control block identifier
2 2 Integer 2 QESTLL Control block length
IBM MQ Monitoring and performance 339
Table 37. Coupling facility statistics record (QEST) (continued)
Offset: Dec Offset: Hex Type Len Name Description
4 4 Character 4 QESTEYEC Control block eye catcher
8 8 Character 4096 QESTZERO QEST part cleared on occasion
8 8 Character 64 QESTSTUC Array (one entry per structure)
(0:63)
8 8 Character 12 QESTSTR Structure name
20 14 Integer 4 QESTSTRN Structure number
24 18 Integer 4 QESTCSEC Number of IXLLSTE calls
28 1C Integer 4 QESTCMEC Number of IXLLSTM calls
32 20 Character 8 QESTSSTC Time spent doing IXLLSTE
calls
40 28 Character 8 QESTMSTC Time spent doing IXLLSTM
calls
48 30 Integer 4 QESTRSEC Number of IXLLSTE redrives
52 34 Integer 4 QESTRMEC Number of IXLLSTM redrives
56 38 Integer 4 QESTSFUL Number of structure fulls
60 3C Integer 4 QESTMNUS Maximum number of entries
in use
64 40 Integer 4 QESTMLUS Maximum number of
elements in use
68 44 Character 4 * Reserved
4104 1008 Character 0 * End of control block
The data contains information for each coupling facility list structure, including the CSQ_ADMIN structure,
that the queue manager could connect to during the statistics interval. The information for each structure
includes the following:
• The number of and cumulative elapsed times for IXLLSTE and IXLLSTM requests.
• The number of times a request had to be retried because of a timeout.
• The number of times a 'structure full' condition occurred.
Topic manager data records
Use this topic as a reference to the format of the topic manager data records.
The format of the topic manager statistics record is described in the following table and in assembler
macro thlqual.SCSQMACS(CSQDQTST) and C header file thlqual.SCSQC370(CSQDSMFC). The field names
in C are all in lowercase, for example qtst, qtstid.
Table 38. Topic manager statistics record (QTST)
Offset: Dec Offset: Hex Type Len Name Description
0 0 Structure 96 QTST Topic manager statistics
0 0 Bitstring 2 QTSTID Control block identifier
2 2 Integer 2 QTSTLL Control block length
340 Monitoring and Performance for IBM MQ
Table 38. Topic manager statistics record (QTST) (continued)
Offset: Dec Offset: Hex Type Len Name Description
4 4 Character 4 TESTEYEC Control block eye catcher
8 8 Character 88 QTSTZERO QTST part cleared on occasion
8 8 Integer 4 QTSTSTOT Total subscription requests
12 0C Integer 4 QTSTSDUR Durable subscription requests
16 10 Integer 4 QTSTSHIG (1:3) Subscription high water mark
array (API, ADMIN, PROXY)
28 1C Integer 4 QTSTSLOW (1:3) Subscription low water mark
array (API, ADMIN, PROXY)
40 28 Integer 4 QTSTSEXP Subscriptions expired
44 2C Integer 4 QTSTTMSG Total messages put to Sub
queue
48 30 Integer 4 QTSTSPHW Single publish subscriber high
water mark
52 34 Integer 4 QTSTPTOT (1:3) Total Publication requests
(API, ADMIN, PROXY)
64 40 Integer 4 QTSTPTHI Total publish high water mark
68 44 Integer 4 QTSTPTLO Total publish low water mark
72 48 Integer 4 QTSTPNOS Count of publishes to no
subscriber
76 4C Integer 4 * Reserved
80 50 Bitstring 8 QTSTETHW Elapse time HW on publish
88 58 Bitstring 8 QTSTETTO Elapse time total on publish
Coupling facility manager SMDS data records
Use this topic as a reference to the format of the coupling facility manager shared message data set
(SMDS) data records.
The format of the coupling facility manager shared message data set (SMDS) statistics record is described
in assembler macro thlqual.SCSQMACS(CSQDQESD), C header file thlqual.SCSQC370(CSQDSMFC) and in
IBM MQ SupportPac MP1B.
The statistics provide information about the utilization of the owned shared message data set, I/O activity
for the group of shared message data sets, and SMDS buffer utilization.
If the queue manager was not started as a member of a queue sharing group, no data is recorded in this
record.
Layout of channel initiator SMF type 115 records
The layout of channel initiator statistics data (SMF type 115, subtype 231) records is described in this
topic.
Self-defining section
The self-defining section for the channel initiator statistics data follows the standard SMF header. It
is structured in the standard triplet format. The format of the triplets is described in structure qwsx
IBM MQ Monitoring and performance 341
in the C programming language header file thlqual.SCSQC370(CSQDSMFC), and in assembler macro
thlqual.SCSQMACS(CSQDQWSX).
Table 39 on page 342 shows the format of the self-defining section.
Table 39. Structure of the channel initiator statistics self-defining section
Offset: Offset Type Length Name Description
Dec : Hex
0 0 Integer 4 QWSX0PSO Offset from the start of the SMF record to
the first instrumentation standard header
(QWHS)
4 4 Integer 2 QWSX0PSL Length of the QWHS
6 6 Integer 2 QWSX0PSN Number of instances of QWHS
8 8 Integer 4 QWSX0R1O Offset from the start of the SMF record
to the first channel initiator control
information block (QCCT)
12 C Integer 2 QWSX0R1L Length of the QCCT
14 E Integer 2 QWSX0R1N Number of instances of QCCT
16 10 Integer 4 QWSX0R2O Offset from the start of the SMF record to
the first dispatcher task block (QCT_DSP)
20 14 Integer 2 QWSX0R2L Length of the QCT_DSP
22 16 Integer 2 QWSX0R2N Number of instances of QCT_DSP
24 18 Integer 4 QWSX0R3O Offset from the start of the SMF record to
the first adapter task block (QCT_ADP)
28 1C Integer 2 QWSX0R3L Length of the QCT_ADP
30 1E Integer 2 QWSX0R3N Number of instances of QCT_ADP
32 20 Integer 4 QWSX0R4O Offset from the start of the SMF record to
the first SSL task block (QCT_SSL)
36 24 Integer 2 QWSX0R4L Length of the QCT_SSL
38 26 Integer 2 QWSX0R4N Number of instances of QCT_SSL
40 28 Integer 4 QWSX0R5O Offset from the start of the SMF record to
the first DNS task block (QCT_DNS)
44 2C Integer 2 QWSX0R5L Length of the QCT_DNS
46 2E Integer 2 QWSX0R5N Number of instances of QCT_DNS
Typically one record contains all the data. If there are a large number of dispatchers, adapters, or SSL
tasks, the data is split over more than one record.
If this happens, the count of instances of some type of tasks can be zero, and information about a group
of tasks can be spread across multiple records. The channel initiator control information block (QCCT) is
only present in the first record. For example the data could be split between two SMF records like this:
Table 40. Example data
Count First record Last record
QWHS 1 1
QCCT 1 0
342 Monitoring and Performance for IBM MQ
Table 40. Example data (continued)
Count First record Last record
QCT_DSP 50 5
QCT_ADP 0 10
QCT_SSL 0 3
QCT_DNS 0 1
This example shows that there were 55 dispatcher TCBs running during the SMF interval.
Instrumentation standard header (QWHS)
The format of the QWHS is described in structure qwhs in the C programming language header
file thlqual.SCSQC370(CSQDSMFC), and in assembler macro thlqual.SCSQMACS(CSQDQWHS). It
contains the following key fields that are relevant to channel initiator SMF 115 records:
Table 41. Key fields in the QWHS
Name Length Description
QWHSNDA 1 byte Number of self-defining sections
QWHSSSID 4 bytes Subsystem name
QWHSSMFC 1 bit Indicates whether there are multiple SMF records
containing information for this interval. If this bit
is on, information for this interval is continued in
further SMF records. If this bit is off, this is the last
or only record. The subsystem ID in QWHSSSID,
and the SMF interval start time in QWHSTIME, can
be used to group multiple records for the same
interval.
QWHSTIME 8 bytes Local time of the start of the interval in STCK
format
QWHSDURN 8 bytes Duration from the start of the interval to the end of
the interval in STCK format
QWHSSTCK 8 bytes End of the interval in UTC in STCK format
Channel initiator statistics data records
Use this topic as a reference for channel initiator statistics data records.
The format of the channel initiator statistics data record contains two parts:
• The first part is the channel initiator control information block, described in assembler macro
thlqual.SCSQMACS(CSQDQCCT). For further information, see “Channel initiator control information
block” on page 344.
• The second part is the channel initiator task block, described in assembler macro
thlqual.SCSQMACS(CSQDQCTA).
The channel initiator task block contains information about the four types of task within the CHINIT. For
further information, see:
– “Dispatcher tasks” on page 345
– “Adapter tasks” on page 346
– “Domain Name Server (DNS) task” on page 347
IBM MQ Monitoring and performance 343
– “SSL tasks” on page 348
Each task includes:
– The elapsed time that the task spent processing requests in the interval (qcteltm)
– The CPU time used by the task in the interval, which is made up of CPU used while processing
requests and CPU used between requests (qctcptm)
– The total wait time of this task in the interval (qctwttm)
– The number of requests in the interval (qctreqn)
You can use this information to see how busy the task was, and determine whether you need to add
more tasks based on the analysis.
For TLS and DNS tasks, the duration of the longest request (qctlgdu, qctlsdu) and the time of day when
this occurred (qctlgdm, qctlsdm) are also included.
These can be useful to identify when channel requests took a long time. For example, a DNS lookup
request going to a server outside of your enterprise taking seconds rather than milliseconds.
The CPU time (qctcptm) value includes all CPU consumed by the task, both processing requests and
between processing requests. The elapsed time (qcteltm) value only includes time while processing
requests. This means that the CPU time may be greater than the elapsed time.
The example accounting data in the following tasks has been formatted using IBM MQ SupportPac
MP1B.
Both of the parts are also described in the C programming language header file
thlqual.SCSQC370(CSQDSMFC). Note that the field names in C are all in lowercase, for example, qcct,
qct_adp.
Channel initiator control information block
Use this topic as a reference for the channel initiator control information block.
The channel initiator control information block contains basic information for this CHINIT, including:
• CHINIT job name (qcctjobn)
• QSG name if it is in a queue sharing group (qcctqsgn)
• Peak number used of current channels (qcctnocc)
• Peak number used of active channels (qcctnoac)
• MAXCHL - maximum permitted current channels (qcctmxcc)
• ACTCHL - maximum permitted active channels (qcctmxac)
• TCPCHL - maximum permitted TCP/IP channels (qcctmxtp)
• LU62CHL - maximum permitted LU62 channels (qcctmxlu)
• Storage used by CHINIT in the extended private region (qcctstus). This information is also provided by
the CSQX004I message in the CHINIT job log.
The format of the channel initiator control information block is described in structure qcct in
the C programming language header file thlqual.SCSQC370(CSQDSMFC), and in assembler macro
thlqual.SCSQMACS(CSQDQCCS).
You can use this information to see if the number of active channels is approaching the configured
maximum value. Note that the number of current and active channels are the values when the record was
created. So, between the two intervals there might have been more than this number of channels active.
Channel information from SMF data
Here is an example of channel information from SMF data:
MVCA,MQPV,2014/03/18,13:00:00,VRM:800,
From 2014/03/18,12:45:00.015222 to 2014/03/18,13:00:00.083630 duration 900.068408 seconds
344 Monitoring and Performance for IBM MQ
Peak number used of current channels........... 1
Peak number used of active channels ........... 1
MAXCHL. Max allowed current channels...........9999
ACTCHL. Max allowed active channels............9999
TCPCHL. Max allowed TCP/IP channels............9999
LU62CHL. Max allowed LU62 channels............. 200
Storage used by Chinit......................... 436MB
You can monitor the storage usage and see whether the value is trending upwards. If the total used is
approaching the total storage available, you might be running out of storage, and so might not be able to
support many more channels.
If the numbers of active current channels are tending towards the maximum number of channels, you
might need to increase the maximum number of channels.
Dispatcher tasks
This topic contains example data for the dispatcher tasks statistics, and information about how to
interpret the data.
The format of the dispatcher task block is described in structure qct_dsp in the C
programming language header file thlqual.SCSQC370(CSQDSMFC), and in assembler macro
thlqual.SCSQMACS(CSQDQCTA).
Example data
Task, Type, Requests, Busy %, CPU used, CPU %, "avg CPU", "avg ET"
, , , , Seconds, , uSeconds, uSeconds
0, DISP, 26587, 0.4, 0.592463, 0.1, 22, 127
1, DISP, 26963, 0.3, 0.588092, 0.1, 22, 112
2, DISP, 864329, 2.7, 2.545668, 0.3, 3, 28
3, DISP, 26875, 0.4, 0.590825, 0.1, 22, 120
4, DISP, 26874, 0.4, 0.603285, 0.1, 22, 123
Summ, DISP, 971628, 0.8, 4.920332, 0.1, 5, 38
The example data shows that there were five dispatchers. A channel is associated with a dispatcher
when it starts. The channel initiator tries to distribute work across all the dispatchers when allocating a
channel to a dispatcher. This example shows that one dispatcher is processing more requests than other
dispatchers. This is normal, as some channels might stop, so the dispatcher is processing fewer channels,
and some channels can be busier than others.
• 4.9 seconds of CPU were used by the dispatchers.
• The average request used 5 microseconds of CPU and took 38 microseconds elapsed time.
• A dispatcher is used to send and receive data over a communications network, and this is not usually
dependent on external events. The average elapsed time should, therefore, be close to the average
CPU time used. The CPU time (qctcptm) value includes all CPU consumed by the task, both processing
requests and between processing requests.
The elapsed time (qcteltm) value only includes time while processing requests. This means that the CPU
time may be greater than the elapsed time. If the CHINIT is delayed due to lack of CPU, then the ratio of
average elapsed time to average CPU time is much larger, compared to when the CHINIT is not delayed
for CPU.
• The average CPU used per request depends on the message traffic. For example, bigger messages use
more CPU than smaller messages.
The fields are calculated from:
• Duration: qwhs.qwhsdurn
• Requests : qctreqn
• Busy %: qcteltm and duration
• CPU used: qctcptm
• CPU %: qctcptm and duration
IBM MQ Monitoring and performance 345
• Average CPU: qctcptm and qctreqn
• Average ET: qcteltm and qctreqn
Usually, the number of dispatchers should be less than, or equal to, the number of processors in the LPAR.
If you have more dispatchers than processors in the LPAR they might compete for CPU resources. For
more information about tuning your system, see SupportPac MP16.
Channels have an affinity to a dispatcher, so you might find that some dispatchers process many more
requests than another dispatcher.
You can use the ALTER QMGR CHIDISPS() command to change the number of dispatchers used. Any
change comes into effect the next time the channel initiator is started.
Adapter tasks
This topic contains example data for the adapter tasks statistics, and information about how to interpret
the data.
The format of the adapter task block is described in structure qct_adp in the C
programming language header file thlqual.SCSQC370(CSQDSMFC), and in assembler macro
thlqual.SCSQMACS(CSQDQCTA).
Example data
Task, Type, Requests, Busy %, CPU used, CPU %, "avg CPU", "avg ET"
, , , , Seconds, , uSeconds, uSeconds
0, ADAP, 470297, 10.2, 41.290670, 4.6, 88, 194
1, ADAP, 13907, 0.6, 1.589428, 0.2, 114, 365
2, ADAP, 2517, 0.2, 0.185325, 0.0, 74, 746
3, ADAP, 1095, 0.1, 0.085774, 0.0, 78, 907
4, ADAP, 535, 0.1, 0.040743, 0.0, 76, 947
5, ADAP, 220, 0.0, 0.016228, 0.0, 74, 1175
6, ADAP, 82, 0.0, 0.005521, 0.0, 67, 1786
7, ADAP, 80, 0.0, 0.004248, 0.0, 53, 1160
Summ, ADAP, 488733, 1.4, 43.217938, 0.6, 88, 205
The fields are calculated from:
• Duration: qwhs.qwhsdurn
• Requests: qctreqn
• Busy %: qcteltm and duration
• CPU used: qctcptm
• CPU %: qctcptm and duration
• Average CPU: qctcptm and qctreqn average
• ET: qcteltm and qctreqn
This example shows that there were eight adapter tasks.
Adapter number 0
• Processed the majority of the requests (470297 out of 488733)
• Was busy 10.2% of the interval
• Used 41.3 seconds of CPU