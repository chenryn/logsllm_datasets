gopl
目录
前言 0
Go语言起源 0.1
Go语言项目 0.2
本书的组织 0.3
更多的信息 0.4
致谢 0.5
入门 1
Hello, World 1.1
命令行参数 1.2
查找重复的行 1.3
GIF动画 1.4
获取URL 1.5
并发获取多个URL 1.6
Web服务 1.7
本章要点 1.8
程序结构 2
命名 2.1
声明 2.2
变量 2.3
赋值 2.4
类型 2.5
包和文件 2.6
作用域 2.7
基础数据类型 3
整型 3.1
浮点数 3.2
复数 3.3
布尔型 3.4
字符串 3.5
常量 3.6
2
gopl
复合数据类型 4
数组 4.1
Slice 4.2
Map 4.3
结构体 4.4
JSON 4.5
文本和HTML模板 4.6
函数 5
函数声明 5.1
递归 5.2
多返回值 5.3
错误 5.4
函数值 5.5
匿名函数 5.6
可变参数 5.7
Deferred函数 5.8
Panic异常 5.9
Recover捕获异常 5.10
方法 6
方法声明 6.1
基于指针对象的方法 6.2
通过嵌入结构体来扩展类型 6.3
方法值和方法表达式 6.4
示例: Bit数组 6.5
封装 6.6
接口 7
接口是合约 7.1
接口类型 7.2
实现接口的条件 7.3
flag.Value接口 7.4
接口值 7.5
sort.Interface接口 7.6
http.Handler接口 7.7
error接口 7.8
3
gopl
示例: 表达式求值 7.9
类型断言 7.10
基于类型断言识别错误类型 7.11
通过类型断言查询接口 7.12
类型分支 7.13
示例: 基于标记的XML解码 7.14
补充几点 7.15
Goroutines和Channels 8
Goroutines 8.1
示例: 并发的Clock服务 8.2
示例: 并发的Echo服务 8.3
Channels 8.4
并发的循环 8.5
示例: 并发的Web爬虫 8.6
基于select的多路复用 8.7
示例: 并发的字典遍历 8.8
并发的退出 8.9
示例: 聊天服务 8.10
基于共享变量的并发 9
竞争条件 9.1
sync.Mutex互斥锁 9.2
sync.RWMutex读写锁 9.3
内存同步 9.4
sync.Once初始化 9.5
竞争条件检测 9.6
示例: 并发的非阻塞缓存 9.7
Goroutines和线程 9.8
包和工具 10
包简介 10.1
导入路径 10.2
包声明 10.3
导入声明 10.4
包的匿名导入 10.5
4
gopl
包和命名 10.6
工具 10.7
测试 11
go test 11.1
测试函数 11.2
测试覆盖率 11.3
基准测试 11.4
剖析 11.5
示例函数 11.6
反射 12
为何需要反射? 12.1
reflect.Type和reflect.Value 12.2
Display递归打印 12.3
示例: 编码S表达式 12.4
通过reflect.Value修改值 12.5
示例: 解码S表达式 12.6
获取结构体字段标识 12.7
显示一个类型的方法集 12.8
几点忠告 12.9
底层编程 13
unsafe.Sizeof, Alignof 和 Offsetof 13.1
unsafe.Pointer 13.2
示例: 深度相等判断 13.3
通过cgo调用C代码 13.4
几点忠告 13.5
附录 14
附录A：原文勘误 14.1
附录B：作者译者 14.2
附录C：译文授权 14.3
附录D：其它语言 14.4
5
gopl
Go语言圣经（中文版）
Go语言圣经 《The Go Programming Language》 中文版本，仅供学习交流之用。
项目主页：http://github.com/golang-china/gopl-zh
项目主页：http://bitbucket.org/golang-china/gopl-zh
原版官网：http://gopl.io
在线预览：
http://gopl-zh.b0.upaiyun.com/
http://docs.ruanjiadeng.com/gopl-zh/
http://shifei.me/gopl-zh/
http://2goo.info/media/html/gopl-zh-gh-pages/
http://docs.plhwin.com/gopl-zh/
http://gopl-zh.simple-is-best.tk/
https://docs.hacknode.org/gopl-zh/
译者序
在上个世纪70年代，贝尔实验室的Ken Thompson和Dennis M. Ritchie合作发明了UNIX操作
系统，同时Dennis M. Ritchie为了解决UNIX系统的移植性问题而发明了C语言，贝尔实验室
的UNIX和C语言两大发明奠定了整个现代IT行业最重要的软件基础（目前的三大桌面操作系
统的中Linux和Mac OS X都是源于UNIX系统，两大移动平台的操作系统iOS和Android也都是
源于UNIX系统。C系家族的编程语言占据统治地位达几十年之久）。在UNIX和C语言发明40
年之后，目前已经在Google工作的Ken Thompson和Rob Pike（他们在贝尔实验室时就是同
事）、还有Robert Griesemer（设计了V8引擎和HotSpot虚拟机）一起合作，为了解决在21世
纪多核和网络化环境下越来越复杂的编程问题而发明了Go语言。从Go语言库早期代码库日志
可以看出它的演化历程（Git用 命令查看）：
git log --before={2008-03-03} --reverse
前言 6
gopl
从早期提交日志中也可以看出，Go语言是从Ken Thompson发明的B语言、Dennis M. Ritchie
发明的C语言逐步演化过来的，是C语言家族的成员，因此很多人将Go语言称为21世纪的C语
言。纵观这几年来的发展趋势，Go语言已经成为云计算、云存储时代最重要的基础编程语
言。
在C语言发明之后约5年的时间之后（1978年），Brian W. Kernighan和Dennis M. Ritchie合作
编写出版了C语言方面的经典教材《The C Programming Language》，该书被誉为C语言程
序员的圣经，作者也被大家亲切地称为K&R。同样在Go语言正式发布（2009年）约5年之后
（2014年开始写作，2015年出版），由Go语言核心团队成员Alan A. A. Donovan和K&R中的
Brian W. Kernighan合作编写了Go语言方面的经典教材《The Go Programming
Language》。Go语言被誉为21世纪的C语言，如果说K&R所著的是圣经的旧约，那么D&K所
著的必将成为圣经的新约。该书介绍了Go语言几乎全部特性，并且随着语言的深入层层递
进，对每个细节都解读得非常细致，每一节内容都精彩不容错过，是广大Gopher的必读书
目。大部分Go语言核心团队的成员都参与了该书校对工作，因此该书的质量是可以完全放心
的。
同时，单凭阅读和学习其语法结构并不能真正地掌握一门编程语言，必须进行足够多的编程
实践——亲自编写一些程序并研究学习别人写的程序。要从利用Go语言良好的特性使得程序
模块化，充分利用Go的标准函数库以Go语言自己的风格来编写程序。书中包含了上百个精心
挑选的习题，希望大家能先用自己的方式尝试完成习题，然后再参考官方给出的解决方案。
该书英文版约从2015年10月开始公开发售，其中日文版本最早参与翻译和审校（参考致谢部
分）。在2015年10月，我们并不知道中文版是否会及时引进、将由哪家出版社引进、引进将
由何人来翻译、何时能出版，这些信息都成了一个秘密。中国的Go语言社区是全球最大的Go
语言社区，我们从一开始就始终紧跟着Go语言的发展脚步。我们应该也完全有能力以中国Go
前言 7
gopl
语言社区的力量同步完成Go语言圣经中文版的翻译工作。与此同时，国内有很多Go语言爱好
者也在积极关注该书（本人也在第一时间购买了纸质版本，亚马逊价格314人民币。补充：国
内也即将出版英文版，价格79元）。为了Go语言的学习和交流，大家决定合作免费翻译该
书。
翻译工作从2015年11月20日前后开始，到2016年1月底初步完成，前后历时约2个月时间（在
其它语言版本中，全球第一个完成翻译的，基本做到和原版同步）。其中，chai2010翻译了
前言、第2 ~ 4章、第10 ~ 13章，Xargin翻译了第1章、第6章、第8 ~ 9章，CrazySssst翻译了
第5章，foreversmart翻译了第7章，大家共同参与了基本的校验工作，还有其他一些朋友提供
了积极的反馈建议。如果大家还有任何问题或建议，可以直接到中文版项目页面提交Issue，
如果发现英文版原文在勘误中未提到的任何错误，可以直接去英文版项目提交。
最后，希望这本书能够帮助大家用Go语言快乐地编程。
2016年 1月 于 武汉
前言
“Go是一个开源的编程语言，它很容易用于构建简单、可靠和高效的软件。”（摘自Go语言官
方网站：http://golang.org ）
Go语言由来自Google公司的Robert Griesemer，Rob Pike和Ken Thompson三位大牛于2007
年9月开始设计和实现，然后于2009年的11月对外正式发布（译注：关于Go语言的创世纪过
程请参考 http://talks.golang.org/2015/how-go-was-made.slide ）。语言及其配套工具的设计
目标是具有表达力，高效的编译和执行效率，有效地编写高效和健壮的程序。
Go语言有着和C语言类似的语法外表，和C语言一样是专业程序员的必备工具，可以用最小的
代价获得最大的战果。 但是它不仅仅是一个更新的C语言。它还从其他语言借鉴了很多好的
想法，同时避免引入过度的复杂性。 Go语言中和并发编程相关的特性是全新的也是有效的，
同时对数据抽象和面向对象编程的支持也很灵活。 Go语言同时还集成了自动垃圾收集技术用
于更好地管理内存。
Go语言尤其适合编写网络服务相关基础设施，同时也适合开发一些工具软件和系统软件。 但
是Go语言确实是一个通用的编程语言，它也可以用在图形图像驱动编程、移动应用程序开发
和机器学习等诸多领域。目前Go语言已经成为受欢迎的作为无类型的脚本语言的替代者： 因
为Go编写的程序通常比脚本语言运行的更快也更安全，而且很少会发生意外的类型错误。
Go语言还是一个开源的项目，可以免费获编译器、库、配套工具的源代码。 Go语言的贡献
者来自一个活跃的全球社区。Go语言可以运行在类UNIX系统—— 比如
Linux、FreeBSD、OpenBSD、Mac OSX——和Plan9系统和Microsoft Windows操作系统之
上。 Go语言编写的程序无需修改就可以运行在上面这些环境。
前言 8
gopl
本书是为了帮助你开始以有效的方式使用Go语言，充分利用语言本身的特性和自带的标准库
去编写清晰地道的Go程序。
前言 9
gopl
Go语言起源
编程语言的演化跟生物物种的演化类似，一个成功的编程语言的后代一般都会继承它们祖先
的优点；当然有时多种语言杂合也可能会产生令人惊讶的特性；还有一些激进的新特性可能
并没有先例。通过观察这些影响，我们可以学到为什么一门语言是这样子的，它已经适应了
怎样的环境。
下图展示了有哪些早期的编程语言对Go语言的设计产生了重要影响。
Go语言有时候被描述为“C类似语言”，或者是“21世纪的C语言”。Go从C语言继承了相似的表
达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有C语言一直所
看中的编译后机器码的运行效率以及和现有操作系统的无缝适配。