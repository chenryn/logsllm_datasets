ﬁer uses, this is obviously an artiﬁcial experiment that over-
estimates the success rate of our attack. However, the IMDB
model underestimates the success rate due to the artiﬁcial
transition probabilities described above, so, together, these
two experiments provide rough bounds on the performance
of our attack.
We visited the URLs via Tor to generate packet traces
that the attacker would observe. Unfortunately, Facebook is
success-vs-nPage 150150250350450550650750Number of web pages00.20.40.60.81Success rateDLSVMPanchenkoMNBsuccess-vs-kPage 14812162024283236Number of training instances per web page00.10.20.30.40.50.60.70.80.91Success rateN=50N=100N=200N=300N=400N=500N=600N=700N=800success-vs-variousPage 1Top 100 (cold)Top 100 (warm)Random 10000.20.40.60.81Success rateDLSVMPanchenkoMNB613(a)
(b)
Figure 7: (a) Distribution of log-likelihood scores (from the Facebook model) for Facebook visits and non-
Facebook visits.
(b) Distribution of log-likelihood scores (from the IMDB model) for IMDB visits and
non-IMDB visits.
(a)
(b)
Figure 8: Receiver operating curves for the (a) Facebook and (b) IMDB web site classiﬁers.
log-likelihood is below the threshold almost all the time that
the user is visiting the target web site, and above the thresh-
old otherwise. An attacker can therefore use our algorithms
to pinpoint when a user visits a target web site.
Figure 10 shows anecdotally that our intuition about tem-
plate matching is correct. We created a set of 99 random
web pages and 1 IMDB movie page (Harry Potter). We
then ran 100 trials of 4 other IMDB movie pages through
the classiﬁer and recorded the pages to which the classiﬁer
matched them. The other movie pages matched the Harry
Potter movie page 95% of the time, indicating that an at-
tacker can model template pages by using a single instance
as a representative of all instantiations of that template.
7. DISCUSSION
Our data support several conclusions:
Existing defenses are inadequate. Our attack was
able to identify the page being loaded over an SSH tunnel
with over 90% accuracy. Against Tor, it identiﬁed the web
page over 80% of the time. The recently proposed random-
ized pipelining defense did nothing to stop our attack. Our
attack is also able to identify web pages loaded over SSH,
even if the victim employs traﬃc morphing or HTTPOS.
Traﬃc analysis can infer user actions through sev-
eral diﬀerent side channels. The Panchenko classiﬁer
relies primarily on packet sizes and is able to achieve good
results. On the other hand, our classiﬁer is able to achieve
good results even if all packet size information is removed
from the trace, as in the randomized cover traﬃc experi-
ment. Somewhat surprisingly, traﬃc analysis attacks based
solely on the number of packets transmitted (without direc-
tion information) can do better than random guessing.
The DLSVM classiﬁer generally outperforms other
classiﬁers. It tied or beat the Panchenko classiﬁer in all
cases except packet count experiments. Our attack is also
much more generic – it does not use ad hoc HTTP-related
features. Our page classiﬁer diﬀers from past work primarily
in that it does not reduce the packet traces to a ﬁxed-length
feature vector. Rather,
it passes the trace directly into
the classiﬁer. The Damerau-Levenshtein-based classiﬁer is
then able to consider multiple aspects of the observation –
packet sizes, directions, ordering, etc. – whereas previously-
proposed classiﬁers were only given a ﬁnite set of features
that had been manually identiﬁed by the researchers.
Our experiments suggest that our attack gleans informa-
tion from several sources, but that the most crucial feature
is the pattern of upstream/downstream transmissions. For
example, sample-based morphing destroys packet size in-
formation, but leaves ordering largely undisturbed. Con-
sequently, our attack works well against morphing. Ran-
domized pipelining destroys some, but not all, ordering in-
formation and leaves some packet size information. As a re-
fb_histgram-vs-probPage 168101214161820222426283032Log likelihood (Facebook)01020304050607080CountFacebookOtherimdb_histgram-vs-probPage 11718192021222324252627282930313233Log likelihood (IMDB)051015202530CountIMDBOtherroc-fbPage 100.20.40.60.81FPR0.980.9850.990.9951TPRroc-imdbPage 100.20.40.60.81FPR00.10.20.30.40.50.60.70.80.91TPR614(a)
(b)
Figure 9: Log-likelihood scores from the (a) IMDB model and (b) Facebook model for several real traces.
Note that the log-likelihood scores are usually below the threshold during visits to the target web site in the
trace and above the threshold during visits to other web sites.
sult, our attack is still able to do well. Adding randomized
cover traﬃc and hiding all packet size information obscures
the pattern of upstream and downstream transmissions, and
hence signiﬁcantly degrades the performance of our attack.
Completely hiding the upstream/downstream information,
i.e.
reducing the data set to just the number of packets
transmitted, almost stops our attack. The Panchenko attack
uses packet sizes as its primary feature, but incorporates sev-
eral ad hoc ordering-based features, so that its performance
proﬁle is similar to ours. The MNB classiﬁer has no order-
ing information, and so its performance drops precipitously
when packet size information is obscured.
Defenses based on randomized requests and cover
traﬃc are not likely to be eﬀective. In the experiment
where we added cover traﬃc to the Tor + rand. pipe. data,
our attack achieved between a 50% and 80% success rate.
Furthermore, Figure 3 suggests that additional cover traﬃc
provides diminishing security returns.
This attack is practical in real settings. We assume
in our evaluation that the victim loads one page at a time
and that each page is loaded to completion. This does not al-
ways match real user behavior. For example, users may load
several pages in diﬀerent tabs or navigate away from a page
before it ﬁnishes loading. However, there are two reasons to
believe that multiple tabs and similar cover-traﬃc-based de-
fenses will not protect users. First, our experiments evaluate
two diﬀerent defenses that employ cover traﬃc. HTTPOS
injects extra HTTP requests into the clients request stream
– our attack is still very successful. Similarly, we evaluated
Tor with randomized pipelining and with random cover traf-
ﬁc – again, our attack was successful. These two experiments
do not evaluate all possible ways of generating cover traﬃc,
but we have yet to ﬁnd an eﬀective, eﬃcient cover-traﬃc-
based defense. Secondly, a defense scheme should protect
users no matter how they surf the web. Even if users do not
always load a single page at a time, they do so often enough
that it is a valid attack scenario and any defense that fails
to protect users in this scenario must be considered broken.
8. CONCLUSION
We have demonstrated that Tor is vulnerable to web page
and web site ﬁngerprinting attacks. With these attacks, an
adversary, such as a local or national government, with the
power to monitor a Tor user’s internet connection can infer
which web sites the user is visiting. They could use this
information to censor the user’s internet connection or to
persecute them for visiting banned sites.
Previously proposed defenses, such as traﬃc morphing,
HTTPOS, and randomized pipelining, impose high costs but
do not stop our attack. Consequently, we proposed a new
defense with provable security properties, albeit with even
higher overhead.
Our attack has several novel features. It is successful even
if it ignores packet sizes. Packet sizes have been a crucial fea-
ture of almost all prior ﬁngerprinting attacks against Tor and
fb_imdb-vs-pageloadPage 1163248648096112128144160176192208224240256272288304Page Load05101520253035Log Likelihood (Facebook)Log likelihood (Facebook)Visits to FacebookVisits to other sitesimdb-vs-pageloadPage 1112233445566778899110121132143154165176187198209Page Load05101520253035Log Likelihood (IMDB)Log likelihood (IMDB)Visits to IMDBVisits to other sites615[8] X. Fu, B. Graham, R. Bettati, and W. Zhao. On
countermeasures to traﬃc analysis attacks. In Information
Assurance Workshop, 2003.
[9] Xun Gong, Negar Kiyavash, and Nikita Borisov.
Fingerprinting websites using remote traﬃc analysis. In
ACM CCS, 2010.
[10] Dominik Herrmann, Rolf Wendolsky, and Hannes
Federrath. Website ﬁngerprinting: attacking popular
privacy enhancing technologies with the multinomial
naive-bayes classiﬁer. In Proceedings of the 2009 ACM
workshop on Cloud computing security.
[11] Andrew Hintz. Fingerprinting websites using traﬃc
analysis. In Privacy Enhancing Technologies. 2003.
[12] The Internet Society. Hypertext Transfer Protocol –
HTTP/1.1, 1999.
[13] Marc Liberatore and Brian Neil Levine. Inferring the source
of encrypted http connections. In ACM CCS, 2006.
[14] Liming Lu, Ee-Chien Chang, and Mun Chan. Website
ﬁngerprinting and identiﬁcation using ordered feature
sequences. In ESORICS. 2010.
[15] Xiapu Luo, Peng Zhou, Edmond W. W. Chan, Wenke Lee,
Rocky K. C. Chang, and Roberto Perdisci. HTTPOS:
Sealing information leaks with browser-side obfuscation of
encrypted ﬂows. In NDSS, 2011.
[16] Gonzalo Navarro. A guided tour to approximate string
matching. ACM Comput. Surv., 33:31–88, March 2001.
[17] Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and
Thomas Engel. Website ﬁngerprinting in onion routing
based anonymization networks. In Proceedings of the 10th
Workshop on Privacy in the Electronic Society, 2011.
[18] Mike Perry. Experimental defense for website traﬃc
ﬁngerprinting.
https://blog.torproject.org/blog/experimental-defense-
website-traﬃc-ﬁngerprinting, September
2011.
[19] Yi Shi and Kanta Matsuura. Fingerprinting attack on the
Tor anonymity system. In Information and
Communications Security, volume 5927 of Lecture Notes in
Computer Science, pages 425–438. Springer Berlin /
Heidelberg, 2009.
[20] Qixiang Sun, Daniel R. Simon, Yi-Min Wang, Wilf Russell,
Venkata N. Padmanabhan, and Lili Qiu. Statistical
identiﬁcation of encrypted web browsing traﬃc. In
Proceedings of the IEEE Symposium on Security and
Privacy, 2002.
[21] Tor project: Anonymity online.
https://www.torproject.org/, August 2011.
[22] Vladimir N. Vapnik. The nature of statistical learning
theory. Springer-Verlag New York, Inc., 1995.
[23] Harald Weinreich, Hartmut Obendorf, Eelco Herder, and
Matthias Mayer. Not quite the average: An empirical study
of web use. ACM Transactions on the Web, 1(2):26, 2 2008.
[24] Andrew M. White, Austin R. Matthews, Kevin Z. Snow,
and Fabian Monrose. Phonotactic reconstruction of
encrypted VoIP conversations: Hookt on fon-iks. In
Proceedings of the 32nd IEEE Symposium on Security and
Privacy, 2011.
[25] Charles Wright, Fabian Monrose, and Gerald M. Masson.
Hmm proﬁles for network traﬃc classiﬁcation. In
Proceedings of the ACM workshop on Visualization and
data mining for computer security, 2004.
[26] Charles V. Wright, Scott E. Coull, and Fabian Monrose.
Traﬃc morphing: An eﬃcient defense against statistical
traﬃc analysis. In NDSS, 2009.
[27] Shui Yu, Wanlei Zhou, Weijia Jia, and Jiankun Hu.
Attacking anonymous web browsing at local area networks
through browsing dynamics. The Computer Journal, 2011.
[28] Fan Zhang, Wenbo He, Xue Liu, and Patrick G. Bridges.
Inferring users’ online activities through traﬃc analysis. In
Proceedings of the Fourth ACM conference on Wireless
network security, 2011.
Figure 10: The distribution of matching web pages
for various IMDB movie pages. IMDB movie pages
almost always match our template sample – the
IMDB movie page for Harry Potter. When they
didn’t match the Harry Potter page, they always
matched one of 3 other web pages out of our 100
distractor pages.
encrypting proxies (e.g. SSH). Although packet size reveals
a great deal of information about the data being transferred
over a simple encrypting tunnel, Tor conceals this informa-
tion by padding all data to 512-byte cells. Despite the fact
that it ignores packet sizes and uses a simple packet trace
comparison method based on the Damerau-Levenshtein dis-
tance, its performance on Tor is competitive with a state of
the art SVM-based classiﬁer.
We also developed a web site classiﬁer that can use packet
traces from a sequence of page loads performed by the victim
to infer his online activities. We modeled web sites using
HMMs, where each state corresponds to a page or class of
pages on the site, and observations are categorized using the
classiﬁer developed above.
Acknowledgments
We thank Daniel Xiapu Luo for providing the HTTPOS
source code and invaluable technical support. We thank
Eelco Herder for providing us with the URL traces we used
to evaluate our web site classiﬁer.
9. REFERENCES
[1] Aurelien Bellet, Amaury Habrard, and Marc Sebban. Good
edit similarity learning by loss minimization. Machine
Learning, 2012.
[2] George Bissias, Marc Liberatore, David Jensen, and Brian
Levine. Privacy vulnerabilities in encrypted http streams.
In Privacy Enhancing Technologies. 2006.
[3] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob
Johnson. Touching from a distance: Website ﬁngerprinting
attacks and defenses. Technical Report SPLAT-TR-12-01,
Stony Brook University, 2012.
[4] George Danezis. Traﬃc analysis of the HTTP protocol over
TLS. http://research.microsoft.com/en-
us/um/people/gdane/papers/TLSanon.pdf.
[5] The Internet Movie Database. http://www.imdb.com/.
[6] Kevin P. Dyer, Scott E. Coull, Thomas Ristenpart, and
Thomas Shrimpton. Peek-a-boo, i still see you: Why
eﬃcient traﬃc analysis countermeasures fail. In Proceedings
of the 33rd Annual IEEE Symposium on Security and
Privacy, 2012.
[7] Facebook. http://www.facebook.com/.
counts-vs-varioussitesPage 1Harry Potter (IMDB)dammitalltohellbattleonrobotwisdom0100200300400Counts616