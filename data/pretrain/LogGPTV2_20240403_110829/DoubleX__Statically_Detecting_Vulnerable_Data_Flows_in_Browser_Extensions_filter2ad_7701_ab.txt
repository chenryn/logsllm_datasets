could exploit all the extension’s permissions. Through tabs.execute-
Script, they may gain a universal XSS, i.e., execute arbitrary code
in every web page even without a vulnerability in the page itself;
• Triggering downloads: they can download and save arbitrary
files on users’ machines without prior notice;
• Cross-origin requests: they can bypass the Same-Origin Policy;
• Data exfiltration: they can access sensitive user information
such as cookies, browsing history, or most visited websites, leading
to, e.g., session hijacking, tracking, or fingerprinting.
In this paper, we focus on two attacker scenarios: a Web Attacker
and an attacker abusing a Confused Deputy through an unprivileged
extension. In the first scenario, an attacker can trick a user into
visiting a web page that can communicate with an extension. This
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1791page, which can be either malicious or compromised, can subse-
quently send messages to exploit a vulnerable extension. While a
compromised web page is in itself troublesome, a compromised ex-
tension is much more powerful, as a Web attacker can leverage the
extension’s privileges to attack unrelated sites or exfiltrate sensitive
user data to arbitrary sites. In the second scenario, an attacker can
trick a user into installing a specific extension under their control.
As previously, this extension would send the payload to exploit a
vulnerable extension (i.e., the confused deputy). A malicious exten-
sion using this technique would be harder to detect than a classical
malicious one: as it does not need any permission nor uses any
sensitive API, its maliciousness stays hidden [6]. The only aim of
such a malicious extension would be to exploit the privileges of
vulnerable ones. As a cover, it could implement innocuous func-
tionality that does not require any privilege, making it easy to pass
through the review process [16]. To evaluate the feasibility of an
attack through an unprivileged extension, we uploaded such an
extension to the Chrome Web Store. Under the pretense of cus-
tomizing the default new tab page in Chrome, our extension was
sending malicious payloads to exploit two vulnerable extensions
reported by DoubleX. Our extension was reviewed, and we were
notified of its acceptance one day later. Once accepted, we installed
the extension along with the two vulnerable ones. We confirm that
we could exploit their vulnerabilities against ourselves. Similarly to
CrossFire [6], we stress that our extension was designed as a case
study. Specifically, we did not test it against real users, nor harm
anyone; we set the extension visibility to unlisted (i.e., only people
with the link could see it), we did not advertise it, and we confirm
that it was downloaded only once (by us, to test it), and then we
promptly removed it. Hence, we are confident that neither users
were harmed nor details of the vulnerable extensions made public.
Naturally, for attackers to exploit a vulnerable extension, the
victim should have the extension installed. An attacker can either
detect the extensions installed by a given user (e.g., by leveraging
DOM changes [75, 77], style changes [44], WARs [40, 70], or timing-
channels [69]) to send tailored payloads or simply try to exploit
a victim by firing all their malicious payloads. In this paper, we
consider an extension to be vulnerable when at least another exten-
sion or web page can exploit its privileges to lead to the security or
privacy issues we presented. This is motivated by the fact that any
website could be compromised: even high-profile sites like Google
had an XSS vulnerability (2019) [63].
4 DoubleX
DoubleX performs a fully static data flow analysis of browser
extensions to detect those with suspicious external flows. We chose
to conduct a static analysis due to its speed and code coverage. This
section first provides a high-level overview of our system before
presenting its three main components in more detail.
4.1 Conceptual Overview
As illustrated by Figure 3, DoubleX abstracts the source code of an
extension with semantic information and models the interactions
within and outside of an extension. This way, we can perform a
data flow analysis to identify any path between an attacker and
sensitive APIs. In its core, we implemented DoubleX in Python.
First, we build an Abstract Syntax Tree (AST [2]) for each extension
Figure 3: Architecture of DoubleX
component, which we enhance with control and data flows, and
pointer analysis information. We refer to the resulting graph as a
Program Dependence Graph (PDG) (Figure 3 stage 1). We adopt a
definition of the PDG that slightly differs from Ferrante et al. [31],
as we chose to add control and data flow edges to the AST. This
way, we retain information regarding statement order and have a
fine-grained representation of the data flows directly at variable
level (Section 4.2). Next, we define a new graph structure, namely
the Extension Dependence Graph (EDG), which models messages
exchanged within and outside of an extension. (Figure 3 stage 2).
For this purpose, we traverse each extension component’s PDG and
collect all messaging APIs. Based on the component and the API
used, we can infer with whom it is exchanging messages. For inter-
nal messages, DoubleX links, e.g., the message sent by component
A to the message received by B (for all components) with a message
flow, to represent the interactions between the components. For
external messages, DoubleX flags them as attacker controllable
(Section 4.3). Overall, our EDG is a joint structure that includes
control flows, data flows, and pointer analysis information at ex-
tension level and models interactions within an extension and with
a web page/another extension (i.e., an attacker). Finally, we lever-
age our EDG to perform a data flow analysis targeting security-
and privacy-critical APIs in extensions (Figure 3 stage 3). In par-
ticular, we consider integrity (attacker-controllable data enters a
sink) and confidentiality (user sensitive data is exfiltrated) threats
in tracking relevant data flows. DoubleX summarizes its findings
in a fine-grained data flow report (Section 4.4).
4.2 Per-Component PDG Generation
To analyze a browser extension, we first abstract the code of each
component independently. In particular, we model each component
with a separate PDG, which includes AST edges, control and data
flow edges, and pointer analysis information.
Syntactic Analysis First, DoubleX builds the AST of each
4.2.1
component with Esprima [33]. We chose to rely on Esprima given
its thorough set of test cases [34] and widespread use by prior
work [6, 28, 29, 32, 45, 50, 65, 67, 73, 74, 80]. Esprima takes a valid
JavaScript sample as input and produces an ordered tree (the AST)
representing the program syntactic structure (i.e., the nesting of
programming constructs). Next, to detect whether an extension
executes attacker-controllable data or exfiltrates sensitive user in-
formation, we need a more complex abstraction of the code that
goes beyond its syntactic order. Specifically, DoubleX gives more
Session 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea17921 b = 1;
2 if (b === 1) {
a = 2;
3
4 } else {
a = 3;
5
6 }
7 var c = a*a;
Listing 3: JavaScript code example
semantics to the AST nodes by (1) generating and storing their con-
trol flows, (2) their data flows, and (3) computing variable values.
4.2.2 Control Flow Analysis To reason about the conditions that
should be met for a specific execution path to be taken, DoubleX
extends the AST with control flows. To do so, we use the CFG
(Control Flow Graph) implementation of Fass et al. [28, 29]. Flows
of control are represented on statement nodes, which are connected
with labeled and directed edges. Edges originating from predicates
are labeled with a boolean, representing the value the predicate
should evaluate to for its descendants in the graph to be executed.
Furthermore, non-predicate statement nodes are connected with an
ϵ edge. For example, Figure 4 (considering the blue dotted control
flow edges) presents an execution path difference when the if
condition is true vs. false. Still, the CFG does not enable us to infer
whether the condition is true or not.
4.2.3 Data Flow Analysis To reason about variable dependencies
and compute variable values, DoubleX adds data flow edges to the
CFG, which becomes a PDG. In this paper, we did not use the data
flow implementation from Fass et al., which did not fit our needs
(e.g., no function argument passing nor pointer analysis). In the
following, we describe our approach. Even though data flow and
pointer analyses are interlinked and we perform them in the same
CFG traversal, we present them in two sections, for clarity reasons.
To ease the value computation process, we represent data flows
between Identifier nodes. In particular, we connect Identifier
nodes (referencing, e.g., variables, functions, or objects) with a
directed data flow edge if and only if they are defined or modified
at the source node and used (or called) at the destination node, with
respect to the scoping rules. If a variable is defined with the window
object, directly assigned, or defined outside of any function, it is
in the global scope. Otherwise, the variables can only be accessed
in specific parts of the code (the local scope). To keep track of
the variables currently defined and accessible in a given scope,
DoubleX defines a list of Scope objects. In particular, we leverage
CFG information to build different and independent Scope objects
to handle variables from branches triggered by exclusive predicates
(e.g., a true vs. false if branch) separately, to avoid impossible data
flows. When exiting such a conditional node, we merge all variables
defined or modified in the different branches to their corresponding
scope (i.e., global or specific local scope) so that these variables are
all known if further used. This way, DoubleX traverses the CFG and
links the encountered variables to their definition or modification
sites with a data flow edge. For example, the orange dashed data
flow edges in Figure 4 represent variable dependencies. Specifically,
we link variable b from its definition site (Listing 3 line 1) to its usage
(line 2). The same applies to a (defined line 3 and used two times
line 7). As our analysis is path sensitive for simple constraints (see
Section 4.2.4), there is no data flow coming from a’s definition line 5.
Figure 4: AST of Listing 3 extended with control & data flows
As far as functions are concerned, we hoist FunctionDeclaration
nodes at the top of the current scope (as they may be first used then
defined [25]) and distinguish them from (Arrow)FunctionExpression
nodes (which have to be defined before usage) [56]. In addition,
DoubleX respects function scoping rules, e.g., closures and lexical
scoping. Also, we define a parameter flow to link function param-
eters at the call sites to their definition site, and we keep track of
the returned values. This way, our analysis is inter-procedural, and
we define our PDG at program level.
We chose to build the PDG by traversing the CFG one time (vs.
iterating until we reach a fixed point), for performance reasons.
While this may lead to under-approximations, our analysis stays
accurate (low false-positive and low false-negative rates, cf. Sec-
tions 5.2.1 and 5.4) and is able to scale (cf. Section 5). We discuss
drawbacks of our static approach in Section 6.2.
4.2.4 Pointer Analysis To determine variable values we follow four
main principles: (1) if we already computed a node value, we fetch
it from its value attribute, (2) we know the value of Literal nodes,
which Esprima stores as a node attribute, (3) whenever there is a
data flow between two Identifier nodes (from source to destina-
tion), the destination has the same value as the source, and (4) we
define different rules to compute the values of variables, which
undergo specific operations. Specifically, we handle assignment,
arithmetic, string, comparison, and logical operators. We illustrate
these principles in Algorithm 1, which is a simplified extract of our
pointer analysis module. We call this script for specific nodes while
we traverse the graph to perform the data flow analysis.
For example, in Figure 4, there is an AssignmentExpression (Algo-
rithm 1 lines 11-17). Here, the Identifier b is declared. To compute
its value, we determine the value of its symmetric node (line 15): as
the Literal value is 1 (lines 3-4), so is b (line 16). Next, there is an
IfStatement, whose condition is a BinaryExpression (lines 18-22).
By following the data flow from b backward, we get its value 1 (lines
19 and 5-7). As the condition always evaluates to true (lines 20-22),
DoubleX solely focuses on this branch (meaning that Listing 3 line
5 is never analyzed, hence no data flow from here, which limits
over-approximations due to impossible cases). Finally, DoubleX
ExpressionStatementAssignmentExpressionIdentifierLiteralIdentifierdatabb1IfStatementBinaryExpressionBlockStatementTrueBlockStatementFalseLiteral1ExpressionStatementeAssignmentExpressionIdentifierLiteralIdentifierdataIdentifierdataaaa2ExpressionStatementeAssignmentExpressionIdentifierLiterala3VariableDeclarationVariableDeclaratorIdentifierBinaryExpressioncSession 6B: Web VulnerabilitiesCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1793Data: node object n
Result: n computed value
1 if n.value is not None then
return n.value;
2
3 else if n.name == ’Literal’ then
value ← n.attributes[’value’];
4
5 else if n.name == ’Identifier’ then
if n is the destination of a data flow from source then
6
value ← source.value;
7
8
value ← n.attributes[’name’];
9
10
11 else if n.name in (’VariableDeclaration’, ’AssignmentExpression’) then
12
13
14
15
end
value ← None;
find the defined/assigned Identifier nodes; // variable names
for each Identifier node i do
p ← calculate the symmetric path to i;
// + some refinements for Array, Object nodes etc.
i.value ← call compute_value(p)
else
end
oper and1 ← compute_value(n.children[0]);
oper and2 ← compute_value(n.children[1]);
oper ator ← n.attributes[’operator’];
value ← oper and1 oper ator oper and2;
16
17
18 else if n.name == ’BinaryExpression’ then
19
20
21
22
23 else if ... then
24
25 n.value ← value;
26 return value
...
Algorithm 1: Pointer analysis extract: compute_value
fetches the value 2 from a’s symmetric node and computes the
operation to get the value 4 for c.
For clarity reasons, we chose a simplistic example. In particu-
lar, DoubleX also analyzes asymmetric variable declarations, e.g.,
in cases of arrays, objects, or functions, and destructuring assign-
ments. Regarding objects and arrays, we store a handler to their
definition site. This way, whenever a specific property is used or
modified, we can follow the data flows to access the definition site,
traverse the corresponding sub-AST to find the property/index, and
compute its value. If the object or array is defined on the fly, we
store its components in a dictionary, which becomes the handler to
the object/array. Finally, whenever a function is called, we follow
the data flows to find the function definition site. DoubleX then
passes the function parameters at the call site(s) to the definition
site by leveraging the parameter flows (cf. Section 4.2.3), before
retraversing the function. For reproducibility and reviewing pur-
poses, we make our source code available [27]. Overall, our pointer
analysis enables us to add more semantic information to our data
flow analysis. Specifically, it enables us to handle aliased variables
and detect sensitive or messaging APIs not written in plaintext, as
highlighted and discussed in Sections 4.3.1 and 4.4.2.
4.3 Generating the EDG
In the previous step, DoubleX generated the PDG of each extension
component independently. Still, to detect suspicious data flows in
an extension, we also need to understand the intricate relations be-
tween its components and detect external messages. To this end, we
collect all messages sent and received by each component and order
them per messaging API. This way, DoubleX leverages the APIs to
know (for a given message) which components are communicating
(or if the message is coming from a web page/another extension).
Content script
sent: "Hi BP"
got-response: response
message1
message2
Table 1: Message collection entry for the extension of List-
ing 2 (channel: one-time, deprecated APIs: no)
Background page
received: request
responded: {farewell: "Bye CS"}
In the case of internal messages, we subsequently link the message
sent by component A to the message received by component B with
a message flow. Our EDG summarizes all this information.
4.3.1 Collecting Messages To collect the messages exchanged within
and outside of an extension, we traverse the PDG of each compo-
nent and look for specific messaging APIs. We consider all APIs pre-
sented in Section 2.2 (both for the Chromium-based browsers and
Firefox), as well as deprecated APIs, which Chromium still supports
(at least until Manifest V3 [19]), e.g., chrome.extension.sendMessage
[11, 13]. Since we compute node values with DoubleX pointer
analysis, we can also detect messaging APIs not written in plain text,
e.g., string concatenation or referred to over aliases. Once we found
a message-passing API, we look for the specific message that is sent
(with a distinction between an initial message, sent, and a response,
responded) or received (similarly, getting a message, received, or a
response, got-response). For this purpose, we created an abstract
representation of each API (based on the official documentation
from Chrome and Mozilla) to know, depending on the number of
arguments, which parameter corresponds to the message. For exam-
ple, in Listing 2, the first parameter of chrome.runtime.sendMessage