6We assume for simplicity that the out-degree is bound by some ﬁxed constant (say 4), so that the total number
of paths is bounded by 2O(s) as opposed to ss.
9
determined as follows:
if
if
1
0
⊥
BP(x) =
n(cid:81)
n(cid:81)
i=1
Bi,xinp(i) = Iw×w
Bi,xinp(i) = Preject
i=1
otherwise
We say that a family of MBPs are input-oblivious if all programs in the family share the
same parameters w, n, (cid:96) and the evaluation function inp.
Barrington [6] showed that every circuit with depth d and fan-in 2 can be represented by a MBP
of length at most 4d and width 5. Previous works [28, 15, 4] used MBPs obtained by applying
Barrington’s theorem to obfuscate circuits. Since the MBP obtained has length exponential in
the depth of the circuit, this turns out to be a bottleneck for eﬃciency. In this work, we will
use relaxed MBPs towards obfuscation.
In MBP after evaluation we either get Iw×w or Preject which decides the output. We relax
this requirement as follows. We only require that a single designated entry in the ﬁnal product
is either 0 or non-zero depending on the output and place no restriction on other entries. Note
that this is a further relaxation of the notion considered in [46]. More formally, we deﬁne the
notion of relaxed matrix branching programs as follows.
Deﬁnition 3 (Relaxed MBP (RMBP)). Let R be any ﬁnite ring. A relaxed matrix branching
program (over R) of size w and length n for (cid:96)-bit inputs is given by a sequence:
BP = (inp, Bi,0, Bi,1)i∈[n],
where each Bi,b is a w × w full-rank, i.e. invertible, matrix and inp : [n] → [(cid:96)] is the evaluation
function of BP. The output of BP on input x ∈ {0, 1}(cid:96), denoted by BP(x), is determined as
follows:
BP(x) = 1 if and only if
(cid:16) n(cid:89)
(cid:17)
Bi,xinp(i)
[1, w] (cid:54)= 0
i=1
Dual-input Relaxed Matrix Branching Programs. Similar to [4], for the proof of obfus-
cation we would need to consider dual input matrix branching programs. We deﬁne dual input
RMBP as follows.
Deﬁnition 4 (Dual Input RMBP). Let R be a ﬁnite ring. A dual-input relaxed matrix branching
program (over R) of size w and length n for (cid:96)-bit inputs is given by a sequence:
BP = (inp1, inp2, Bi,b1,b2)i∈[n],b1,b2∈{0,1},
where each Bi,b1,b2 is a w × w full-rank matrix and inp1, inp2 : [n] → [(cid:96)] are the evaluation
functions of BP. The output of BP on input x ∈ {0, 1}(cid:96), denoted by BP(x), is determined as
follows:
(cid:16) n(cid:89)
(cid:17)
[1, w] (cid:54)= 0
BP(x) = 1 if and only if
Bi,xinp1(i),xinp2(i)
i=1
We say that a family of matrix branching programs is input-oblivious if all programs in the
family share the same parameters w, n, (cid:96) and the evaluation functions inp1, inp2.
For the purpose of obfuscation we would consider dual input oblivious relaxed matrix branch-
ing programs.
10
3 From BP to Relaxed Matrix BP
In this section we describe a sequence of transformations which allow us to transform a non-
deterministic branching program of size s to a relaxed matrix branching program of width 2(s+1)
and length s. These transformations are close variants of similar transformations from [25]. The
main steps are to convert a non-deterministic branching program to a special layered branch-
ing program, then to an invertible layered branching program, and ﬁnally to an RMBP. These
intermediate steps can be independently useful, as they allow for more eﬃcient transformations
of special or invertible layered branching programs into RMBPs.
Branching program to special layered branching program.
Lemma 1. Any non-deterministic branching program BP of size s can be eﬃciently converted
to an equivalent special layered branching program SLBP of length s and width s + 1.
Proof Sketch. Recall that since we do not include the sink node in the size of a BP, a BP of
size s has s + 1 nodes. Given a branching program with s + 1 nodes, ﬁrst do a topological sort
of the nodes, say {v1, . . . , vs+1}. Without loss of generality, assume that v1 is the source node
and vs+1 is the sink node. We construct a special layered branching program with s + 1 layers
where each layer has s + 1 nodes as follows. Let the nodes in layer i be {vi,1, . . . , vi,s+1}. That
is, we denote kth node in layer i by vi,k. For each 0 ≤ i  0 is any constant.
4 Randomization of RMBP
In this section, we describe how to randomize the matrices in the (dual-input and oblivious)
relaxed matrix branching program obtained from the construction in Section 3. The result of the
randomization process is another relaxed matrix branching program such that the restriction
of the relaxed matrix branching program8 on input x can be simulated by just knowing the
output of the branching program on input x. Looking ahead, this property will come in handy
when proving the security of the obfuscation scheme in the ideal graded encoding model. The
randomization technique we employ closely follows a similar randomization technique that was
used in [23] in the context of secure multiparty computation.
The non-triviality of the randomization process here compared to [4] is the following: in [4]
the product matrix corresponding to an input x depends only on the output of the function on
input x. More speciﬁcally it is either an identity matrix or a ﬁxed matrix Preject (Deﬁnition 2).
Thus, the product matrix does not reveal any information about the branching program. How-
ever, in our case the entries in the product matrix might contain useful information about the
branching program – speciﬁcally the product matrix in our RMBP captures the number of paths
between every pair of vertices. Hence, we have to randomize the matrices in such a way that the
product of the matrices only reveals information about the output of the function. We do this
in two steps. In the ﬁrst step we design a randomization procedure, denoted by randBP, which
reveals just the (1, w)th entry of the product matrix. Note that this itself will not be enough for
us because the (1, w)th entry essentially contains the number of paths between the source and
the accept vertex and hence has more information than just the output of the function. And