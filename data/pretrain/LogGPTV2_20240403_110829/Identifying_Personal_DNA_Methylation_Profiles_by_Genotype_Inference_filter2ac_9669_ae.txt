We modify this idea to only leak the total number of trees and
the total number of nodes. Moreover, we extend it by giving
the option to only reveal the plurality-vote class to the client.
To this end, we do not evaluate one tree after another, but we
perform the evaluations of all trees in a batch, e.g., running the
comparison protocol for the bi’s of all trees in a row. This way,
the client cannot distinguish between different trees during the
evaluation.
In order to allow the protocol to only reveal the plurality-
vote class, we have to modify the protocol further. Intuitively,
for the server S to determine the plurality-vote class, S
needs to be able to count the votes for each class without
learning the actual outcomes of the trees. We can achieve
this by slightly changing the way the class labels are encoded
into the SIMD slots: Instead of encoding each integer class
label as its binary representation, we encode a class label
yi by only setting the ith bit to 1. While encoding k labels
into a binary representation needs only (cid:11)log2(k)(cid:12) + 1 bits,
our method will
if enough
SIMD slots compared to the number of classes are available,
this should not have a substantial effect on the protocol’s
performance. More speciﬁcally, a class label yi is now encoded
as (yi1, . . . , yik) with yij = 1 if i = j and 0 otherwise.
take exactly k bits. However,
After obtaining the outcomes of all trees, the server and
client interact to change the outcomes’ encryption schemes
from FHE to Paillier, resulting in ciphertexts for each outcome
and class label [[yij]]C for i ∈ {1, . . . , n}, j ∈ {1, . . . , k},
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:45 UTC from IEEE Xplore.  Restrictions apply. 
Protocol 2 Evaluate a Random Forest
Input: Client C : (SKP
S , (cid:2)v), Server S :
Output: Client C : the outcome of evaluating F on (cid:2)v in terms
C , SKF HE
C, SKQR
S ,F = {t1, . . . , tn})
, SKP
C , PKF HE
C, PKQR
, PKP
(PKP
C
C
i=1
1: S: produces the polynomials P1, . . . , Pn for each tree in
of a plurality vote or the individual votes
{ti}n
2: C: sends the encrypted query [[v0]]C, . . . , [[vm]]C to S
3: S and C perform the comparison protocol (1) on a shufﬂed
order of the nodes, so that S obtains [bi]C for every node
in the trees
4: S: changes the encryption obtaining [[[bi]]]C
5: S: computes each class label yi by setting only the ith bit
to 1 and encrypts the class labels using FHE and SIMD
slots to [[[yi1, . . . , yik]]]C with yij = 1 if i = j and 0
otherwise
6: S: evaluates the polynomials using the fully homo-
morphic encryption, obtaining the encrypted outcomes
{[[[yj1, . . . , yjk]]]C}n
j=1 for each tree
7: if C is allowed to get all individual outcomes then
8:
S: rerandomizes the encrypted outcomes, shufﬂes their
order and sends them to C, who can decrypt them
n
i=1 yij]]C =
S: rerandomizes the encrypted outcomes and changes
their encryption scheme to Paillier, resulting in [[yij]]C
for i ∈ {1, . . . , n}, j ∈ {1, . . . , k}
(cid:2)
S: sums the bits for each class separately, obtaining
i=1[[yij]]C for every j ∈ {1, . . . , k},
[[
effectively computing the vote counts of each class
S and C change the ownership of the vote counts, so
that C obtains [[
C and S perform the arg max protocol, so that C learns
only the outcome of the plurality-vote class
i=1 yij]]S using our protocol
(cid:2)
(cid:2)
n
n
9: else
10:
11:
12:
13:
14: end if
(cid:2)
where yij = 1 if the outcome of the ith tree was class j
and yij = 0 otherwise. This encoding allows to sum up all
votes for each class (or vote count), so that the server obtains
[[
n
i=1 yij]]C using Paillier’s homomorphic property.
However, we cannot directly apply the arg max protocol
as this would reveal
to the party
holding the ciphertexts, i.e., the server. Hence, we leverage our
encryption ownership protocol to transfer the vote counts to the
client under the server’s key. The client thus has [[
i=1 yij]]S,
which allows him to determine the plurality-vote class by
applying the arg max protocol.
the classiﬁcation result
(cid:2)
n
The complete protocol is provided in Protocol 2.
Theorem 2. Protocol 2 is secure in the honest-but-curious
model.
We refer to the appendix for the proof.
VIII. EVALUATION OF THE PRIVATE CLASSIFIER
Now that we have introduced our protocol for private clas-
siﬁcation on random forests, we will evaluate its performance
968
on a dataset and classiﬁer used in practice. More speciﬁcally,
we base our performance evaluation on MethPed [34], [42],
a random forest classiﬁer for the identiﬁcation of pediatric
brain tumor subtypes based on DNA methylation data, which
is available as an R package. From this package, we extract
their random forest model and feed it
into our protocol
implementation for the performance evaluation.2
MethPed,
in its standard conﬁguration,
trains a random
forest model of 1000 trees based on its original training data,
consisting of 472 clinically diagnosed brain tumor cases after
data cleaning and k-nearest neighbor imputation of missing
values [42]. The DNA methylation samples have been col-
lected from several datasets, all of which are publicly available
on the GEO database (GEO accession numbers GSE50022,
GSE55712, GSE36278, GSE52556, GSE54880, GSE45353
and GSE44684). The random forest is then trained on a total of
900 methylation sites, which were shown to yield the highest
predictive power in a large number of regression analyses.
Our protocol implementation is based on the original im-
plementation of the work of Bost et al.3. We extended it
by implementing the protocol for changing the encryption
scheme from FHE to Paillier, as well as by adding our
own protocol for changing the ownership of the encryption.
Moreover, we fully implemented the random forest classi-
ﬁcation protocol (Protocol 2) and tested its correctness on
sample inputs. Then, we ported the MethPed classiﬁer into
our implementation and included two methylation samples to
evaluate the classiﬁer on. The implementation of our private
random forest classiﬁer is written in C++ using GMP4, Boost,
Google’s Protocol Buffers5, and HELib [39]. The source code
of our implementation can be found at https://github.com/
paberr/ciphermed-forests.
In order to represent the methylation levels as integers in
our protocol, we multiply them by 108 and store the result as
an integer. Since the data we used is available at a precision
of eight digits after the decimal point and methylation values
are bounded by the range [0, 1], we do not lose any precision.
A. Evaluation Setup
To evaluate the performance of our protocol, we ran the
client and server of the classiﬁcation task on different ma-
chines, both on the same network and on different networks.
One client was run on a local computing server with ap-
proximately 775 GB RAM and four Intel Xeon E5-4650L
processors, providing 64 cores (with hyperthreading enabled)
running at 2.60 GHz. Another client was run on an Amazon
AWS instance of the type r4.2xlarge with 61 GB RAM
and 8 Intel Xeon E5-2686 v4 vCPUs and a network bandwidth
up to 10 gigabit located in Frankfurt, Germany. The server
was run on a local computing server with approximately
1.55 TB RAM and four Intel Xeon E7-8867 processors,
2The R implementation and the used methylation sites are available at
http://bioconductor.org/packages/devel/bioc/html/MethPed.html.
3Available at https://github.com/rbost/ciphermed.
4https://gmplib.org
5https://code.google.com/p/protobuf/
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:45 UTC from IEEE Xplore.  Restrictions apply. 
Ped R package [42]. We restricted the number of trees to a
maximum of 500 in order to keep the computational costs
low. We can still estimate the cost of running our protocol
with 1000 trees by the general trend as seen in the following.
Moreover, we evaluate both versions of our protocol,
the
ﬁrst revealing only the plurality-vote class to the client, and
the second revealing one outcome per tree to the client.
For n ≤ 100, we classify each of the samples ﬁve times,
resulting in a total of 10 executions for each of our protocol
instantiations. For n > 100, we classify each of the samples
only once, due to the increased computational costs. The trees
used for the classiﬁcation consist of between 16 and 37 inner
nodes, with an average of around 25 inner nodes.
In the following ﬁgures, a solid line is used for operations
common to both our protocol instantiations, a dashed line is
used for the instantiation returning the plurality-vote class, and
a dotted line is used for the one outputting the outcome for
each tree. The performance evaluation of common operations
groups together the results of both instantiations, yielding 20
executions if n ≤ 100, and 4 executions if n > 100.
Fig. 9 depicts the performance evaluation on the client side,
both axes scaled logarithmically. Generally, the computational
costs of most of our protocol steps scale approximately linearly
in the number of trees. Only changing the ownership of
the encryption and performing the arg max seem to have a
constant execution time. These two blocks scale linearly with
the number of class labels, which are ﬁxed (to the 9 types of
brain tumors) in our experiments.
Next, we compare the execution time of both protocol in-
stantiations. We see that both, helping to change the encryption
scheme of the trees’ outcomes from FHE to Paillier and
retrieving all the tree’s outcomes in the FHE cryptosystem,
unexpectedly take almost the same amount of time, since
essentially the same operations are required. Performing the
plurality vote protocol then only adds a constant computational
burden on the client’s side, only negligibly increasing the total
computation time.
Fig. 9. Duration of different protocol steps on the client side for varying
number of trees and both protocol variations.
Fig. 10. Duration of different protocol steps on the server side for varying
number of trees and both protocol variations.
providing 128 cores (with hyperthreading enabled) running at
2.50 GHz. Since our implementation does not make use of any
multithreading technique, we used the large number of cores
to run multiple experiments, i.e., classiﬁcation tasks, at once.
Similar to Bost et al., we also used 1024-bit cryptographic
keys and chose the statistical security parameter λ to be 100.
HELib was conﬁgured to use 80 bits of security, roughly
corresponding to a 1024-bit asymmetric key [23].
B. Performance Evaluation
We evaluate our protocol for a varying number of trees
n ∈ {1, 2, . . . , 9, 10, 20, . . . , 90, 100, 200, . . . , 400, 500} and
two independent classiﬁcation queries provided in the Meth-
969
In Fig. 10, we analyze the same scenarios on the server
side. Unsurprisingly, the relationships between the number
of trees in the random forest and the computational costs
are the same as for the client. It is worth noting that the
computationally most expensive operation is by far the FHE
evaluation of the polynomials. Evaluating the polynomials
takes almost an order of magnitude more time than the second
most expensive protocol step. Thus, minimizing the number of
trees and potentially also the number of inner nodes is a main
concern when applying our protocol. Moreover, parallelizing
the evaluation of the polynomials is a possible improvement,
which we did not explore in our implementation.
In terms of the amount of exchanged data and the number
of interactions, both protocol instantiations seem to be more or
less equivalent as shown in Fig. 11. Revealing the individual
outcomes to the client is not noticeably different from perform-
ing the plurality vote protocol. While time is mostly the major
concern when running a classiﬁcation task, the amount of data
exchanged over the network should not be underestimated. For
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:45 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 11. Data exchange and number of interactions for varying number of
trees and both protocol variations.
Fig. 12. Total duration of a classiﬁcation task and accuracy of the random
forest for varying number of trees and both protocol variations.
example, evaluating 50 trees involves exchanging around 0.67
GB of data over the network. Increasing the number of trees
to 100, involves around 1.33 GB of data exchange.
Finally,
in Fig. 12, we study the total
time to run the
protocol on the server side (excluding the time for sending
packets over the network) in comparison with the accuracy of
the random forest built on the given number of trees. The
accuracy was determined based on the out-of-bag samples
during the training phase and averaged over 10 different runs.
Since our private classiﬁcation uses the same precision for
the methylation values as the R implementation and builds on
exactly the same trees, the accuracy provided by our private
classiﬁcation technique is the same. While the computational
costs clearly increase approximately linearly in the number
of trees, the accuracy does not. While 1000 trees provide
an accuracy of 98.3%, 50 trees are already sufﬁcient
to
provide an accuracy of 97.6% at only an estimated 5% of the
computational cost. We also depict the communication time
between our Amazon AWS instance and the local computing
server for a smaller range of number of trees. Evaluating 50
trees takes in total less than a hour, even when including the
time for sending and receiving packets over the internet. We
also evaluated the timing on the client’s side, which exhibits
the same behaviour as on the server’s side.
We emphasise that our current implementation does neither
aim at minimizing the number of interactions, nor does it
make use of pipelining of interactions. Based on the mea-
sured throughput between the Amazon AWS instance and our
computing server, we additionally depict the estimated optimal
communication time over the network in Fig. 12. Improving
the transmission of data in setup can potentially decrease the
communication time for 500 trees down to 50 seconds.
Since,
in the current medical scenario,
it usually takes
at least one day for a laboratory to analyze a sample, we
assume a similar computational limit on the classiﬁcation.
Given such a limit, we conclude that a laboratory offering
the privacy preserving analysis using our protocol would be
able to provide a good trade-off between computational costs
and accuracy. Moreover, the structure of random forests offers
a great potential to parallelize some of the operations (e.g.,
the polynomial evaluation), which we leave for future work.
We note that both protocol instantiations take approximately
the same time to run. While returning the selected classs for a
number of 50 trees is about 2 minutes faster than returning the
majority vote, this difference only accounts to about 6 minutes
for 100 trees and to about 23 minutes for 500 trees. Hence,