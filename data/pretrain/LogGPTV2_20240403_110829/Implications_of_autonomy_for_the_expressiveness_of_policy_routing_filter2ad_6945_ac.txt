of such edge weight-based rankings, with both next-hop rank-
ings and shortest path routing as special cases. Such rankings do
not allow providers to directly specify their ranking; rather, the
rankings of each provider are derived from the strategic choices
1272
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 15, NO. 6, DECEMBER 2007
made by all providers, namely, the choices of outgoing link
weights that each provider sets. This notion of “derived” rank-
ings is a potentially useful method for ensuring autonomy in
interdomain routing protocols; indeed, the metarouting frame-
work can be viewed as a class of protocols based on derived
rankings [15].
In [6], we consider a parameterized model of edge weight-
based rankings. Total path weight is computed as the sum of the
times the
weight of the ﬁrst hop on the path, and a parameter
).
total weight of the remainder of the path (where
,
Nodes prefer paths with lower total path weight. When
we recover next-hop rankings; when
, we recover shortest
path rankings. We show that the only edge weight-based ranking
class that can guarantee safety under ﬁltering, regardless of the
weights chosen by each provider, is the class of shortest-path
rankings.
V. DISPUTE WHEELS AND DISPUTE RINGS
Our goal is to study the classes of rankings for which the
routing system is guaranteed to be safe under ﬁltering. Grifﬁn
et al. have shown that checking whether a particular routing
system is stable is NP-hard [14]. To simplify our study of safety,
we introduce a useful concept developed by Grifﬁn et al. [14],
known as a dispute wheel. Informally, a dispute wheel gives a
listing of nodes, and two path choices per node, such that the
higher ranked path for each node uses the lower ranked path of
its neighboring node on the wheel. The key property of a dispute
wheel is that if a routing system oscillates, then it is possible to
construct a dispute wheel where each node in the wheel selects
its more preferred path (via the node in the clockwise direction)
over its less preferred path. Grifﬁn et al. showed that if a routing
system with no ﬁltering does not have a dispute wheel, then it
is safe [14].
The dispute wheel is a useful concept because it allows us to
analyze dynamic properties such as safety by simply looking at
the rankings of each node in the routing system. In this section,
we formally deﬁne a dispute wheel and show the relationship
between the routing model of Grifﬁn et al. in [14], which sim-
ulates messages being passed between nodes, to the model we
use in this paper, which uses fair activation sequences. This rela-
tionship allows us to study safety in terms of the routing model
in this paper. We then introduce a special type of dispute wheel
called a dispute ring and show that, if any routing system has
a dispute ring, then it is not safe under ﬁltering. Finally, we re-
late dispute wheels to dispute rings and show that, although the
presence of a dispute ring guarantees that a routing system is not
safe under ﬁltering, it does not necessarily imply that a routing
system is not safe without ﬁltering.
A. Dispute Wheels and Safety
We start by formally deﬁning dispute wheels.
Deﬁnition 14 (Dispute Wheel): Given a routing system
, a dispute wheel is a collec-
, called pivots, together with
, such that the
for
tion of distinct nodes
two sets of paths
following conditions all hold (where we deﬁne
notational convenience):
and
1)
for all
;
Fig. 6.
paths to the destination. The nodes i ; . . . ; i
Illustration of a dispute wheel. Dotted lines show preferred (indirect)
are pivots.
is a path from to
2)
3) The path
4)
.
for all
;
is feasible, i.e.,
;
Thus, each node
prefers the path
, as shown in Fig. 6.
to the path
We now show that safety in the Simple Path Vector Protocol
(SPVP) deﬁned by Grifﬁn et al. [14] implies safety in our model,
which allows us to use dispute wheels to analyze safety.
Proposition 2: Given a routing system, a fair activation se-
be
quence, and an initial path assignment
the resulting sequence of path assignments according to the dy-
namics described in Fig. 3. Then there exists a sequence of mes-
sages in the Simple Path Vector Protocol (SPVP) such that the
same sequence of path assignments is observed.
, let
Thus, in particular, if a routing system is safe under SPVP,
then it is safe according to Deﬁnition 10.
Proof Sketch: The key difference between SPVP and the
dynamics we have deﬁned is that SPVP is asynchronous (i.e., at
any time step, messages may be in ﬂight), so different nodes may
have different assumptions about the global path assignment at
any time. SPVP is nondeterministic with respect to the timing
and
of messages; the delay between a routing update at node
at node
the receipt of the new route advertisement from node
can be arbitrary. We use this fact to construct, inductively,
a sequence of messages such that at time , the current set of
.
paths available to node
Furthermore, we time the delivery of routing updates to node
in SPVP so that any updates that occurred since the last time
was activated arrive exactly at the start of time step . In SPVP,
, which corresponds
this will initiate a routing update at node
exactly to the activation of
in SPVP corresponds exactly to
in our model (see Fig. 3).3
Thus, the sequence of path assignments seen in this realiza-
tion of SPVP matches the sequence of path assignments seen in
our dynamics. We conclude that if SPVP is guaranteed to be safe
for the given routing system (i.e., if eventually no further routing
updates occur, regardless of the initial path assignment), then the
routing system is safe according to Deﬁnition 10 as well.
3A subtlety arises here, because in SPVP each of the routing updates that ar-
rive to i at time t would trigger a routing update. However, in our candidate
SPVP dynamics, we can set routing delays so that when nodes are activated
after time t, the additional routing updates from node i are processed instan-
taneously before the last routing update that occurred at node i at time t. This
ensures that any additional routing updates do not affect the observed sequence
of path assignments, since the ﬁnal path assignment at time t will still be PPP ,
as required.
FEAMSTER et al.: IMPLICATIONS OF AUTONOMY FOR THE EXPRESSIVENESS OF POLICY ROUTING
1273
Fig. 7. A routing system that is safe for any choice of ﬁlters.
Corollary 1:
If a routing system
has no dispute wheel, then it is safe under
ﬁltering (and hence safe).
Proof: Choose subsets
. Then, any dispute wheel
is
for the routing system
also a dispute wheel for the original routing system
. Thus, the result follows from Proposi-
tion 2 and the results of [14].
If no dispute wheel exists, the routing system is safe under ﬁl-
tering, but, unfortunately, this condition is not a necessary con-
dition for safety, and thus not much can be said about a system
that does have a dispute wheel. Furthermore, there exist routing
systems that have a dispute wheel but which are safe under ﬁl-
tering.
Observation 3: The existence of a dispute wheel does not
imply that the routing system is unsafe, nor that the routing
system is not safe under ﬁltering.
Example 5: See Fig. 7. The ﬁrst two most preferred paths
in each node’s ranking form a dispute wheel, but the system is
. Furthermore,
safe: the system converges to
no combination of ﬁlters can create an oscillation. The two-hop
paths are not part of the stable path assignment, so ﬁltering
those paths has no effect on the protocol dynamics. Filtering a
three-hop path would simply result in a node selecting the direct
path to the destination, and the node would never deviate from
that path. If one direct path is ﬁltered, then the other two nodes
will take direct paths to the destination and the node whose di-
rect path is ﬁltered will take its two-hop path. If two direct paths
is simply a chain to the destination: the node
are ﬁltered, then
that has the direct path takes it, and the other two nodes will take
two- and three-hop paths.
B. Dispute Rings and Safety
In this section, we extend the dispute wheel notion to un-
derstand the relationship between ranking expressiveness and
safety under ﬁltering. We deﬁne a relationship between rankings
called a dispute ring, a special case of a dispute wheel where
each node appears at most once. The dispute ring is a useful
concept because it allows us to prove a necessary condition for
safety under ﬁltering.
wheel—a collection of nodes
Deﬁnition 15 (Dispute Ring): A dispute ring is a dispute
,
, and no
node in the routing system appears more than once in the wheel.
satisfying Deﬁnition 14—such that
and paths
Fig. 8. Relationships between safety and dispute rings and wheels. Previous
work showed that a routing system with no dispute wheel is safe [14]. Section V
presents all other relationships shown in this ﬁgure. Corollary 1 states that any
routing system without a dispute wheel is safe under ﬁltering (and hence safe).
Observation 3 notes that the reverse implications do not necessarily hold. Propo-
sition 3 shows that any routing system with a dispute ring is unsafe under ﬁl-
tering.
Proposition 3: If a routing system has a dispute ring, then it
is not safe under ﬁltering.
Proof Sketch: We sketch the proof here; full details are
available in [6]. Assume that a routing system has a dispute
.
ring, deﬁned by
contains only the paths in that
Then, construct ﬁlters such that
dispute ring.
, and paths
,
There exists at least one consistent path assignment
, every other pivot node
such that some pivot node
uses its most preferred path,
,
uses its only available path
and every other non-pivot node
consistent with this assignment. Then, the following activation
sequence will result in an oscillation:
uses path
1) Activate node
. Node
ferred path,
2) Activate nodes along
then switches to its more pre-
.
in reverse order, from the node
immediately preceding
switch to the empty path,
, to
.
. All nodes along
3) Activate node
consistent, so
. The path
must switch to the path
is now in-
.
4) Return to Step 1 with replaced by
, and iterate again.
By the fourth step of the iteration above, the new path assign-
ment is “isomorphic” to the initial conﬁguration: now node
is using the path
, and every other pivot node
is using path
will ultimately reach node
assignment.
. Thus, as this iteration repeats, the dynamics
once again with the original path
We emphasize that, for simplicity, we reduced the set of ﬁl-
ters,
, to include only the set of paths that are involved in an
oscillation. We note that there will typically be more permissive
that will also result in oscillation, because the dispute
sets
ring is present in the underlying set of rankings. Our intent is to
highlight the most basic case of ﬁltering that can cause an oscil-
lation, given the existence of a dispute ring.
Despite the fact that systems that are safe under ﬁltering are
guaranteed not to have a dispute ring, testing for a dispute ring
is not sufﬁcient to guarantee that the routing system is safe; see
Figs. 10 and 11 in [6].
Fig. 8 summarizes the results of this section and how they
relate to results from previous work [14].
VI. AUTONOMY AND SAFETY
In this section, we determine necessary and sufﬁcient con-
straints on the allowable classes of rankings, such that if each
AS autonomously sets its ranking while ﬁltering is unrestricted,
1274
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 15, NO. 6, DECEMBER 2007
the protocol is guaranteed to be safe. We do so by character-
izing whether a routing system where rankings are indepen-
dently speciﬁed by each AS can induce either a dispute ring or
a dispute wheel.
Any protocol’s conﬁgurable parameters implicitly constrain
the rankings ASes can express. For example, in BGP, the set of
protocol parameters is rich enough to allow providers to express
essentially any possible ranking over paths. In Section VI-A,
we axiomatically formulate two properties that should be sat-
isﬁed by any protocol that respects autonomy: permutation in-
variance and scale invariance. The ﬁrst requires the rankings al-
lowed by the protocol to be independent of node labeling, while
the second requires the allowed rankings to scale gracefully as
nodes are added to the system. We abstract protocols satisfying
these two conditions using the notion of an autonomous ranking
constraint (ARC) function; such a function takes the ranking of
a single AS as input, and accepts it if that ranking is allowed by
the protocol. Observe that any protocol that respects the ability
of ASes to autonomously choose rankings can be represented by
a corresponding ARC function. Although we present the ARC
function as a proof technique, this function could be imple-
mented in practice to restrict the rankings that operators specify
in operational networks.
In Section VI-B, we give two examples of such functions:
the shortest hop count ARC function (which only accepts rank-
ings where shorter paths are preferred to longer paths), and the
next-hop ARC function (which only accepts next hop rankings).
We then determine the class of ARC functions such that, as long
as each node independently chooses an acceptable ranking, the
resulting global routing system will be safe under ﬁltering. In
Section VI-C, we show that the only ARC functions that are safe
under ﬁltering are nearly equivalent to the shortest hop count
ARC function.
A. ARC Functions
In this section, we deﬁne an autonomous ranking constraint
(ARC) function, which serves as an abstraction of the protocol’s
constraints on allowed rankings over routes. We start by deﬁning
a local ranking constraint (RC) function, which takes as input
the ranking of a single AS ,
, and determines whether that
ranking is allowable.
is
is
“accept”, we will say that
-accepted, we will say the routing system is
Deﬁnition 16 (Local RC Function): Given
nodes, a
takes as input
, and returns
is allowed by , and returns “reject” otherwise.
-accepted. If
local ranking constraint (RC) function
the ranking of a single AS over all paths in
“accept” if
If
we are given a routing system
where each
-accepted.
Because we are restricting attention to protocols that respect
the ability of ASes to choose rankings autonomously, a ﬁrst
condition that must be satisﬁed is that constraints on rankings
should be “local”: that is, an AS should not face constraints on
allowable rankings due to the rankings chosen by other ASes.
For this reason, local RC functions act only on the ranking
of a single AS. More generally, protocols might place system-
wide constraints on the vector of rankings chosen by all ASes;
such protocols should be represented by “global” RC functions.
Another generalization is to derive the preferences of an AS
based on locally chosen parameters, as in the edge weight-based
rankings of Section IV-B; RC functions, however, presume that
providers directly choose their rankings over routes.
We now deﬁne two natural conditions any local RC function
that preserves autonomy should satisfy. First, the local RC func-
tion’s conditions on rankings should provide consistent answers
to different ASes, regardless of the labeling of the ASes. That is,
for the local RC function to preserve uniformity, each AS should
be subject to the same constraints on routing policies, and those
constraints should not depend on the particular assignment of
AS numbers to ASes. For example, suppose the routing system
consists of three ASes, and AS 1 has an accepted ranking where
it prefers 1230 over 120, and 120 over 10. Then we expect the
same ranking should be accepted, even if the labels of nodes are
permuted. For example, suppose we permute the node labels that
1. Then node 2 should also have an ac-
1
cepted ranking where it prefers 2310 over 230, and 230 over 20
(because 2310, 230, and 20 are the new paths that result after
applying the permutation to 1230, 120, and 10, respectively). If
this property were not satisﬁed, then the set of accepted rankings
determined by a local RC function would depend on the global
assignment of AS numbers to nodes, not on the characteristics of
the individual rankings themselves. We call this notion permuta-
tion invariance; to deﬁne it precisely, we must proceed through
a sequence of deﬁnitions, starting with path permutation.
3, and 3
2, 2
Deﬁnition 17 (Path Permutation): Given
. Then
be a permutation of the nodes
permutation on any path
a new path
nodes, let
induces a path
from to , yielding
to
from
. We always deﬁne
.