## 一、服务器的配置
1. Apache 可以配置将PHP解释器作为CGI脚本(mod_cgi)，或者作为Apache本身的一个模块(mod_php)，还有就是FastCGI模式来运行。
CGI是比较原始的方式，需要把php 脚本放在conf 文件中设置的目录内并给与可执行权限(bash,perl 等脚本同理)，比如  
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"  
或者 在设置目录外执行 cgi，比如  
 &#35; To use CGI scripts outside of ScriptAliased directories:  
 &#35; (You will also need to add "ExecCGI" to the "Options" directive.)  
 &#35; AddHandler cgi-script .cgi  
Apache默认是以第二种方式运行PHP的；  
而配置FastCGI模式需要下载安装相关的包mod_fastcgi，且 php 编译时需要支持 –-enable-fpm（5.3之前版本是 --enable-fastcgi ）。  
不要认为没有搭配php/python/perl的Apache就是安全的，也不要认为安全配置PHP后webshell就不能执行系统命令，因为Apache本身支持CGI和SSI，甚至需要注意 .htaccess 文件的上传覆盖。 
2. Nginx 默认不支持CGI模式，它是以FastCGI方式运行的。所以使用Nginx+PHP 就是直接配置为FastCGI模式。php 同样需要支持 php-fpm（也可以使用PHP 自带的 FastCGI 管理器PHP-CGI），且 nginx 支持 ngx_http_fastcgi_module，配置文件一般类似  
```
location ~ \.php$
{
     fastcgi_pass 127.0.0.1:9000;
     fastcgi_index xxxx;
     fastcgi_param xxxx;
     include fastcgi.conf;
}
``` 
对于php-cgi/php-fpm监听端口对外开放（一般情况下，是用于nginx/apache与fastcgi 分离，即 fastcgi_pass ip 不是 127.0.0.1），均需做访问控制，只允许指定的IP访问，否则可能导致远程文件包含。可以使用iptables做访问控制，如新增规则（监听端口为9000，webserver来源IP为192.168.2.138）。
```
 iptables -A INPUT -i eth0 -p tcp -s 192.168.2.138 --dport 9000 -j ACCEPT
 iptables -A OUTPUT -o eth0 -p tcp -d 192.168.2.138 --sport 9000 -j ACCEPT
 iptables -A INPUT -i eth0 -p tcp --dport 9000 -j DROP
```
> For the most part, lack of CGI support in Nginx is not an issue and actually has an important side-benefit: because Nginx cannot directly execute external programs (CGI), a malicious person can't trick your system into uploading and executing an arbitrary script.
如果使用php-cgi 作为PHP解析器，虽然均采用root 权限操作命令启动进程，但Nginx默认会降权到nobody普通用户，但是php-cgi不会，此时的危害就很大了，当攻击者上传webshell，那webshell就是root权限。千万不要认为Nginx降权运行了，php也会降权，毕竟解析php的是php-cgi进程。这里为什么突出说php-cgi 有这种问题，而没有说php-fpm，那是因为php-fpm 的配置文件默认已设置进程运行用户为nobody。
## 二、CGI的概念、PHP 动态语言
CGI 不是一种语言，也不是一种技术，而是一种模式。搜索一下CGI的定义`Common Gateway Interface`，简称CGI。在物理上是一段程序，存放在服务器上。只要是提供数据输出的服务器端程序都可以叫CGI，ASP/PHP/JSP这些都可以认为是，你用C/C++写一个可以提供数据输出的服务器端bin文件也叫CGI，至于python/perl/shell 等脚本当然也能写cgi。  
对一个 CGI 程序，做的工作其实只有：从环境变量(environment variables)和标准输入(standard input)中读取数据、处理数据、向标准输出(standard output)输出数据。环境变量中存储的叫 Request Meta-Variables，也就是诸如 `QUERY_STRING`、`PATH_INFO` 之类的东西，这些是由 Web Server 通过环境变量传递给 CGI 程序的，CGI 程序也是从环境变量中读取的。  
标准输入中存放的往往是用户通过GET 或者 POST 提交的数据，这些数据也是由 Web Server 传过来的（客户端提交）。传统的get 即是以 `url?key1=value1&key2=value2`的 形式传输过去。而post 形式（http请求包体）就比较多了，可以是传统的key=value，也可以是json/xml 等形式，只是这些从标准输入得到后还需要经过一个解析的过程才能得到想要的key=value 形式的呈现。  
注意标准输入的概念，如果在本地执行 `php xx.php args` ， 那么 xx.php 的标准输入就是控制命令窗口，获取输入需要通过 $argv；如果是通过 uri 路径访问 xx.php 如 `http://localhost/xx.php` ， 那么 xx.php 的标准输入来自 webserver 给的数据，可以通过 php://input 获取。  
当然cgi 的body输出也是多种形式了，可以是简单的application/json、text/xml 形式，也可以是php echo 出一个text/plain or text/html，但要明确的是php 等脚本是在服务器端执行的，也就是说当客户端访问test.php 时，server 先执行php脚本（php 会 读取标准输入，处理过程，向标准输出输出数据），形象地来说，就是“戳一次就动一次”，根据用户输入的不同而产生不同的输出结果，即动态网页的概念。注意：php、js、css 都可以和html 标签写在同个文件中。  
如前所述，php 是作为 cgi 脚本还是作为一个模块被解析，取决于服务器的配置。  
## 三、代理服务器
### nginx 正向代理服务器的配置：  
```
worker_processes 1;
       events {
       worker_connections 1024;
       }
       http {
       include mime.types;
       sendfile on;
       resolver 208.67.220.220;
       server {
       listen 81;
       location / {
       # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求
       # 但是正则和最长字符串会优先匹配
	   # 比如  curl "http://www.qq.com/index.html" -x "10.12.198.196:80" 假设还有一个 location /index.html {} 
       # 则进入这里的处理逻辑，否则匹配到根路径 /，进入 location / {} 内的处理逻辑	
	   # 注意： -x "10.12.198.196:80/xxxx"  xxxx 并不会决定匹配到哪个 location，是http 请求包中的 GET/POST 路径来决定
       proxy_pass $scheme://$http_host$request_uri;
                 }
            }
       }
```
回想正常的一般请求，浏览器or 客户端工具如fiddle 会先解析地址栏域名得到ip:port（没带则默认是80），进而向此 ip:port 发起 http 请求。假设现在我们在 客户端工具设置了代理为 10.12.198.196:80，而地址栏请求的是 http://www.qq.com/index.html， http 请求包（包含包头和包体）发送给 10.12.198.196:80，注意：http 请求包还是原始的情况，如  
```