 * and maximum frequencies.  Optionally, there can be a third extra member,  
 * which holds the frequency of null elements (expressed in the same terms:  
 * the fraction of non-null rows that contain at least one null element).  If  
 * this member is omitted, the column is presumed to contain no null elements.  
 *  
 * Note: in current usage for tsvector columns, the stavalues elements are of  
 * type text, even though their representation within tsvector is not  
 * exactly text.  
 */  
#define STATISTIC_KIND_MCELEM  4  
/*  
 * A "distinct elements count histogram" slot describes the distribution of  
 * the number of distinct element values present in each row of an array-type  
 * column.  Only non-null rows are considered, and only non-null elements.  
 * staop contains the equality operator appropriate to the element type.  
 * stavalues is not used and should be NULL.  The last member of stanumbers is  
 * the average count of distinct element values over all non-null rows.  The  
 * preceding M (>=2) members form a histogram that divides the population of  
 * distinct-elements counts into M-1 bins of approximately equal population.  
 * The first of these is the minimum observed count, and the last the maximum.  
 */  
#define STATISTIC_KIND_DECHIST  5  
/*  
 * A "length histogram" slot describes the distribution of range lengths in  
 * rows of a range-type column. stanumbers contains a single entry, the  
 * fraction of empty ranges. stavalues is a histogram of non-empty lengths, in  
 * a format similar to STATISTIC_KIND_HISTOGRAM: it contains M (>=2) range  
 * values that divide the column data values into M-1 bins of approximately  
 * equal population. The lengths are stored as float8s, as measured by the  
 * range type's subdiff function. Only non-null rows are considered.  
 */  
#define STATISTIC_KIND_RANGE_LENGTH_HISTOGRAM  6  
/*  
 * A "bounds histogram" slot is similar to STATISTIC_KIND_HISTOGRAM, but for  
 * a range-type column.  stavalues contains M (>=2) range values that divide  
 * the column data values into M-1 bins of approximately equal population.  
 * Unlike a regular scalar histogram, this is actually two histograms combined  
 * into a single array, with the lower bounds of each value forming a  
 * histogram of lower bounds, and the upper bounds a histogram of upper  
 * bounds.  Only non-NULL, non-empty ranges are included.  
 */  
#define STATISTIC_KIND_BOUNDS_HISTOGRAM  7  
```  
那么这些统计信息如何导入导出呢？    
## 导出导入统计信息    
https://postgrespro.com/docs/postgresproee/9.6/dump-stat.html    
dump_stat这个插件是PostgreSQL pro推出的兼容9.6版本的导出统计信息的插件。    
代码如下：    
https://github.com/postgrespro/postgrespro/tree/PGPRO9_6    
https://github.com/postgrespro/postgrespro/tree/PGPRO9_6/contrib/dump_stat    
### 导出    
通过dump_stat导出（导出的结构已经是SQL形式），然后通过SQL导入。    
```    
$ psql test -A    
test=# \t    
test=# \o dump_stat.sql    
test=# select dump_statistic();    
```    
pg_statistic的每一条记录，产生一条如下SQL：    
```    
WITH upsert as (    
  UPDATE pg_catalog.pg_statistic SET column_name = expression [, ...]    
  WHERE to_schema_qualified_relation(starelid) = t_relname    
    AND to_attname(t_relname, staattnum) = t_attname    
    AND to_atttype(t_relname, staattnum) = t_atttype    
    AND stainherit = t_stainherit    
  RETURNING *)    
ins as (    
  SELECT expression [, ...]    
  WHERE NOT EXISTS (SELECT * FROM upsert)    
    AND to_attnum(t_relname, t_attname) IS NOT NULL    
    AND to_atttype(t_relname, t_attname) = t_atttype)    
INSERT INTO pg_catalog.pg_statistic SELECT * FROM ins;    
where expression can be one of:    
array_in(array_text, type_name::regtype::oid, -1)    
value::type_name    
```    
### stat导入的实际例子  
(表示public.test表的info列的统计信息，如果存在则更新，不存在则插入。)        
```  
WITH   
  upsert as (   
    UPDATE pg_catalog.pg_statistic   
    SET   
      stanullfrac = 0, stawidth = 4, stadistinct = -1, stakind1 = 2, stakind2 = 3, stakind3 = 0, stakind4 = 0, stakind5 = 0, staop1 = 'pg_catalog.<(pg_catalog.text, pg_catalog.text)'::regoperator, staop2 = 'pg_catalog.<(pg_catalog.text, pg_catalog.text)'::regoperator, staop3 = '0'::regoperator, staop4 = '0'::regoperator, staop5 = '0'::regoperator, stanumbers1 = NULL::real[], stanumbers2 = '{-0.5}'::real[], stanumbers3 = NULL::real[], stanumbers4 = NULL::real[], stanumbers5 = NULL::real[], stavalues1 = array_in('{abc,cde,test}', 'pg_catalog.text'::regtype, -1)::anyarray, stavalues2 = NULL::anyarray, stavalues3 = NULL::anyarray, stavalues4 = NULL::anyarray, stavalues5 = NULL::anyarray   
    WHERE to_schema_qualified_relation(starelid) = 'public.test' AND to_attname('public.test', staattnum) = 'info' AND to_atttype('public.test', staattnum) = 'pg_catalog.text' AND stainherit = false   
    RETURNING *  
  ),   
  ins as (   
    SELECT   
      'public.test'::regclass,   
      to_attnum('public.test', 'info'),   
      'false'::boolean,   
      0::real,   
      4::integer,   
      -1::real,   
      2,  -- stakind=2 表示柱状图  
      3,  -- stakind=3 表示相关性  
      0,   
      0,   
      0,   
      'pg_catalog.<(pg_catalog.text, pg_catalog.text)'::regoperator,   
      'pg_catalog.<(pg_catalog.text, pg_catalog.text)'::regoperator,   
      '0'::regoperator,   
      '0'::regoperator,   
      '0'::regoperator,   
      NULL::real[],   
      '{-0.5}'::real[],   
      NULL::real[],   
      NULL::real[],   
      NULL::real[],   
      array_in('{abc,cde,test}', 'pg_catalog.text'::regtype, -1)::anyarray,   
      NULL::anyarray,   
      NULL::anyarray,   
      NULL::anyarray,   
      NULL::anyarray   
    WHERE NOT EXISTS (SELECT * FROM upsert) AND to_attnum('public.test', 'info') IS NOT NULL AND to_atttype('public.test', 'info') = 'pg_catalog.text'  
  )   
INSERT INTO pg_catalog.pg_statistic SELECT * FROM ins;  
```  
### 导入    
1、修改postgresql.conf，允许修改系统表，重启数据库生效配置      
```  
vi postgresql.conf  
allow_system_table_mods=on  
pg_ctl restart -m fast  
```  
2、导入统计信息     
```    
-- 1 pg_class    
update pg_class set reltuples=?, relpages=? where oid=?;    
-- 2 pg_statistic    
WITH upsert as (    
  UPDATE pg_catalog.pg_statistic SET column_name = expression [, ...]    
  WHERE to_schema_qualified_relation(starelid) = t_relname    
    AND to_attname(t_relname, staattnum) = t_attname    
    AND to_atttype(t_relname, staattnum) = t_atttype    
    AND stainherit = t_stainherit    
  RETURNING *)    
ins as (    
  SELECT expression [, ...]    
  WHERE NOT EXISTS (SELECT * FROM upsert)    
    AND to_attnum(t_relname, t_attname) IS NOT NULL    
    AND to_atttype(t_relname, t_attname) = t_atttype)    
INSERT INTO pg_catalog.pg_statistic SELECT * FROM ins;    
where expression can be one of:    
array_in(array_text, type_name::regtype::oid, -1)    
value::type_name    
```    
3、导入完成后，将allow_system_table_mods设置为off，重启数据库。    
## dump_statistic代码  
```  
CREATE FUNCTION dump_statistic(relid oid) RETURNS SETOF TEXT AS $$  
        DECLARE  
                result  text;  
                cmd             text;           -- main query  
                in_args text;           -- args for insert  
                up_args text;           -- args for upsert  
                fstaop  text := '%s::regoperator';  
                arr_in  text := 'array_in(%s, %s::regtype, -1)::anyarray';  
                stacols text[] = ARRAY['stakind', 'staop',  
                                                           'stanumbers', 'stavalues' ];  
                r               record;  
                i               int;  
                j               text;  
                ncols   int := 26;      -- number of columns in pg_statistic  
                stanum  text[];         -- stanumbers{1, 5}  
                staval  text[];         -- stavalues{1, 5}  
                staop   text[];         -- staop{1, 5}  
                relname text;           -- quoted relation name  
                attname text;           -- quoted attribute name  
                atttype text;           -- quoted attribute type  
        BEGIN  
                for r in  
                                select * from pg_catalog.pg_statistic  
                                where starelid = relid  
                                        and get_namespace(starelid) != to_namespace('information_schema')  
                                        and get_namespace(starelid) != to_namespace('pg_catalog') loop  
                        relname := to_schema_qualified_relation(r.starelid);  
                        attname := quote_literal(to_attname(relname, r.staattnum));  
                        atttype := quote_literal(to_atttype(relname, r.staattnum));  
                        relname := quote_literal(relname); -- redefine relname  
                        in_args := '';  
                        up_args = 'stanullfrac = %s, stawidth = %s, stadistinct = %s, ';  
                        cmd := 'WITH upsert as ( ' ||  
                                                'UPDATE pg_catalog.pg_statistic SET %s ' ||  
                                                'WHERE to_schema_qualified_relation(starelid) = ' || relname || ' '  
                                                        'AND to_attname(' || relname || ', staattnum) = ' || attname || ' '  
                                                        'AND to_atttype(' || relname || ', staattnum) = ' || atttype || ' '  
                                                        'AND stainherit = ' || r.stainherit || ' ' ||  
                                                'RETURNING *), ' ||  
                                   'ins as ( ' ||  
                                                'SELECT %s ' ||  