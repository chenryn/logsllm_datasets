我们来解释（1）：当你通过变量的名字来调用它，这个初始值叫作引用（http://ecma-international. org/ecma-262/5.1/#sec-8.7），引用是一个具有两个主字段的数据结构。
base指向当前的环境，即当前变量值所存储的数据结构。
referencedName是指变量的名称。
当我们调用eval()，函数的执行运算符（即括号）将引用传入eval执行，并决定要调用哪个函数。如此便直接调用了eval()。然而你也可以不传递给括号运算符引用来强制地间接调用eval()。它的实现是在调用括号运算符之前先存下引用的值。在（1）这行的逗号运算符就做了这件事。逗号运算符执行了第一个运算值，并将第二个运算值进行返回。而这个执行过程中总是会返回值，这意味着引用已经被解析，而函数名将不再有效。
非直接调用的代码始终是非严格模式的。这就造成了代码与其当前上下文环境的隔离：
23.4.2 通过new Function()执行代码
Function()构造器的形式如下：
构造器会生成一个函数，它的参数依次为param1，param2等，而它的函数体则是funcBody。创建出来的函数会是这样：
我们用new Function()来创建一个函数f，并定义它返回其参数之和：
类似于间接调用eval(),new Function()会创建全局作用域的函数[1]：
默认情况下，这些函数也是处于非严格模式的：
23.4.3 eval()与new Function()比较
通常来说，尽可能地使用new Function()来替代eval执行代码：相比之下前者的参数更为清晰，你不必使用间接的eval()调用来确保所执行的代码除了其自己的作用域只能访问全局的变量。
23.4.4 最佳实践
总的来说，最好避免使用eval()和new Function()。动态执行代码相对会比较慢并且存在安全隐患。另外对于一些工具（例如IDE）也不能很好地进行代码的静态分析。
我们有更好的替代方案，例如，Brendan Eich最近发微（http://bit.ly/1fwpWrB）提到的反模式：开发者通过propName来存储一个属性。
这个问题的意义在于，点运算符只支持固定传入属性。这意味着这种情况下，属性名必须在运行时要确定。这就是为什么上面的例子要使用eval()来配合访问属性。幸好，JavaScript还有一个括号运算符，它可以动态接受属性值。因此，后者用来动态访问属性名更为合适：
另外不要用eval或是new Function()来解析JSON数据。因为这是不安全的。你可以使用ECMAScript 5内置的JSON方法或是借助库来解析JSON数据。
合理的使用场景
也有一些对于eval()和new Function()的合理的使用场景，尽管这些场景偏高级：例如通过函数（JSON数据不允许）、模板库、编译器、命令行以及模块系统配置数据。
23.4.5 结论
动态执行代码在JavaScript是一个相对高级的话题。如果你想深入了解这块，你可以看看kangax的文章“全局eval的使用场景”（http://perfection kills.com/global-eval-what-are-the-options/）。
23.5 Console API
在大多数JavaScript引擎中，有一个全局的对象console，它通常用于记录和debug。这个对象并非JavaScript语言本身中的一部分，但基本已经是一个事实上的标准了。由于其主要作用是debug，console的方法通常被用于开发。
这一节我们来看看console API。本节我们还会看看Chrome32，Firebug 1.12，Firefox 25，Internet Explorer11，Node.js 0.10.22以及Safari 7.0的现状。
23.5.1 Console API在各引擎的标准程度如何
Console API在各个平台上的实现有着很多不同并且API本身也会经常变化。如果你想找到console的权威文档，你可以参考两个地方。首先，你可以参考标准形式的API概览：
Firebug最一开始实现了console API，而其wiki中的文档（http://bit.ly/1fwq1vk）是目前最接近标准的。
另外，Brian Kardell和Paul Irish都致力于这一API的标准（http://bit.ly/1fwq7mX），而这将会产生持续性的影响。
其次，你可以查看不同引擎的文档：
Chrome（https://developers.google.com/chrome-developer-tools/docs/console-api/）
Firebug（https://getfirebug.com/wiki/index.php/console.API）
Firefox（https://developer.mozilla.org/en-US/docs/Web/API/console）
Internet Explorer（http://msdn.microsoft.com/en-us/library/ie/hh772183.aspx）
Node.js（http://nodejs.org/api/stdio.html）
Safari（http://bit.ly/1fwq9er）
警告：
 在Internet Explorer 9中有一个bug。在IE9中，console对象只有当开发者工具栏被打开过至少一次，才会存在。这意味着如果你的代码引用了console对象，同时又没有预先打开开发者工具栏，你可能会得到一个引用错误。因此，你可以检查console是否存在，如果不存在的话，你可以创建一个假的对象。
23.5.2 简单的日志记录
Console API包含了以下日志记录的方法：
console.clear()
清空console。
console.debug(object1, object2?, ...)
建议使用console.log()，它与debug的作用相同。
console.error(object1, object2?, ...)
将参数作为日志内容输出到控制台。在浏览器中，记录的日志内容会被标以一个“错误”的小图标并且/或者包含了一个栈跟踪记录或一个代码链接。
console.exception(errorObject, object1?, ...) [Firebug-only]
记录object1等，并展示一个可交互的栈跟踪信息。
console.info(object1?, object2?, ...)
将信息输出到console。在浏览器中，被记录的内容会被标以一个“信息”的小图标，并且/或者包含了一条栈跟踪信息或是一个代码链接。
console.log(object1?, object2?, ...)
将参数一一输出到控制台。如果第一个参数是一个printf支持的格式，则会用这个格式来打印之后的参数。例如在Node.js的REPL中：
其中%s是在各平台间唯一稳定的通用格式指令。除此之外，Node.js支持%j来输出JSON数据；浏览器则会在控制台中以目录的形式记录可以交互的信息。
console.trace()
记录一条栈跟踪信息（这条信息在大多数浏览器中都可以进行交互）。
console.warn(object1?, object2?, ...)
将参数输出到控制台。在浏览器中，被输出的信息会被标以“警告”标志，并且或者包含一个栈跟踪信息或是一个代码链接。
各平台对以下方法的支持情况如表23.1所示。
表23.1
Chrome
Firebug
Firefox
IE
Node.js
Safari
clear
√
√
√
√
debug
√
√
√
√
√
error
√
√
√
√
√
√
exception
√
info
√
√
√
√
√
√
log
√
√
√
√
√
√
trace
√
√
√
√
√
√
warn
√
√
√
√
√
√
exception以斜体表示，因为它只在一个平台被支持。
23.5.3 检查和计数
控制台API包含了以下检查和计数的方法。
console.assert(expr, obj?)
如果表达式的值是false，会将obj打印到控制台，并抛出一个异常。如果没有错误，则什么都不做。
console.count(label?)
记录当前行被执行的次数。参数label可选，用来指定哪一行。
各平台对检查和计数的支持情况如表23.2所示。
表23.2
Chrome
Firebug
Firefox
IE
Node.js
Safari
assert
√
√
√
√
√
count
√
√
√
√
23.5.4 格式化的日志
控制台API包含了以下用于格式化日志的方法：
console.dir(object)
将一个对象呈现到控制台中，在浏览器中，具体的呈现形式可以通过交互来展开。
console.dirxml(object)
打印一个HTML或者XML的XML源文件树。
console.group(object1?, object2?, ...)
将对象参数打印到控制台，并展开一个区域包含所有将要记录的内容。你可以使用console.groupEnd()来结束输出这个区域。否则区域将会无限延展，但始终是闭合的。
console.groupCollapsed(object1?, object2?, ...)
与console.group()类似，但是区域默认是闭合的。
console.groupEnd()
关闭由console.group()或是console.groupCollapsed()打开的组。
console.table(data, columns?)
以一个表格的形式输出一个数组，每一行一个元素。该方法的可选参数columns指明了在列中要展示哪些属性或是数组。如果不加columns参数，那么所有的键值都会作为列。而缺失的属性或是数组元素则会在列中显示为undefined。
结果如表23.3所示。
表23.3
（index）