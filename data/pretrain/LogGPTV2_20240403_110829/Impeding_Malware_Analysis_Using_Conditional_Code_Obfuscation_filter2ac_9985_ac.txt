Wenke Lee
ImpedingMalwareAnalysisUsingConditionalCodeObfuscationMonirulSharif1AndreaLanzi2JonathonGifﬁn1WenkeLee11SchoolofComputerScience,CollegeofComputing,GeorgiaInstituteofTechnology,USA{msharif,giffin,wenke}@cc.gatech.edu2DipartimentodiInformaticaeComunicazione,Universit`adegliStudidiMilano,Italyandrew@security.dico.unimi.itAbstractMalwareprogramsthatincorporatetrigger-basedbe-haviorinitiatemaliciousactivitiesbasedonconditionssat-isﬁedonlybyspeciﬁcinputs.State-of-the-artmalwarean-alyzersdiscovercodeguardedbytriggersviamultiplepathexploration,symbolicexecution,orforcedconditionalexe-cution,allwithoutknowingthetriggerinputs.Wepresentamalwareobfuscationtechniquethatautomaticallycon-cealsspeciﬁctrigger-basedbehaviorfromthesemalwareanalyzers.Ourtechniqueautomaticallytransformsapro-grambyencryptingcodethatisconditionallydependentonaninputvaluewithakeyderivedfromtheinputandthenremovingthekeyfromtheprogram.Wehaveimplementedacompiler-leveltoolthattakesamalwaresourceprogramandautomaticallygeneratesanobfuscatedbinary.Exper-imentsonvariousexistingmalwaresamplesshowthatourtoolcanhideasigniﬁcantportionoftriggerbasedcode.Weprovideinsightintothestrengths,weaknesses,andpossiblewaystostrengthencurrentanalysisapproachesinordertodefeatthismalwareobfuscationtechnique.1IntroductionWithhundredsofnewmalwaresamplesappearingev-eryday[3],malwareanalysis,whichattemptstounder-standandextractthecapabilitiesorbehaviorfrommalwaresamples,isbecomingincreasinglyimportant.Asmalwareanalysistechniquesevolve,malwarewriterscontinuallyemploysophisticatedanti-reverseengineeringtechniquesinanefforttodefeatandevadethestate-of-the-artanalyzers.Historically,encryption[44],polymorphism[31,39],andotherobfuscationschemes[11,12,25,41,43]havebeenpri-marilyemployedtothwartanti-virustoolsandstaticanaly-sis[9,10,22,23]basedapproaches.Dynamicanalysisbasedapproaches[2,6,13,29,40]inherentlyovercomeallanti-staticanalysisobfuscations,buttheyonlyobserveasingleexecutionpath.Malwarecanexploitthislimitationbyem-ployingtrigger-basedbehaviorssuchastime-bombs,logic-bombs,bot-commandinputs,andtestingthepresenceofan-alyzers,tohideitsintendedbehavior.Recentanalyzersprovideapowerfulwaytodiscovertriggerbasedmaliciousbehaviorinarbitrarymaliciouspro-grams.Moseretal.proposedascheme[28]thatexploresmultiplepathsduringexecutionofamalware.Afterex-ploringabranch,theirtechniqueresumesexecutionfromapreviouslysavedstateandtakesthealternatebranchbyinvertingtheconditionandsolvingconstraintstomodifyrelatedmemoryvariablesinaconsistentmanner.Otherre-centlyproposedapproachescanmakeinformedpathselec-tion[4],discoverinputsthattakeaspeciﬁcpath[5,7,13]orforceexecutionalongdifferentpaths[42].Wecallallsuchapproachesinput-obliviousanalyzersbecausetheydonotutilizeanysourceofinformationaboutinputsotherthantheprogrambeinganalyzed.Ourgoalistoanticipateattacksagainstthestate-of-the-artmalwareanalyzersinordertodevelopmoreeffectiveanalysistechniques.Wepresentasimple,automatedandtransparentobfuscationagainstpowerfulinputobliviousan-alyzers.Weshowthatitispossibletoautomaticallyconcealtrigger-basedmaliciousbehaviorofexistingmalwarefromanystaticordynamicinput-obliviousanalyzerbyanau-tomaticallyapplicableobfuscationschemebasedonstaticanalysis.Ourscheme,whichwecallconditionalcodeobfusca-tion,reliesontheprinciplesofsecuretriggers[18].First,weidentifyandtransformspeciﬁcbranchconditionsthatrelyoninputsbyincorporatingone-wayhashfunctionsinsuchawaythatitishardtoidentifythevaluesofvariablesforwhichtheconditionsaresatisﬁed.Second,thecondi-tionalcode,whichisthecodeexecutedwhenthesecon-ditionsaresatisﬁed,isidentiﬁedandencryptedwithakeythatisderivedfromthevaluethatsatisﬁesthecondition.Asaresult,inputobliviousanalyzerscannolongerfeasi-blydeterminethevaluesthatsatisfytheconditionandcon-sequentlythekeytounveiltheconditionalcode.Ourap-proachutilizesseveralstaticanalysistechniques,includingcontroldependenceanalysis,andincorporatesbothsource-codeandbinaryanalysistoautomatetheentireprocessoftransformingmalwaresourceprogramstotheirobfuscatedbinaryforms.Inordertoshowthatconditionalcodeobfuscationisarealisticthreat,wehavedevelopedacompiler-leveltoolthatappliestheobfuscationtomalwareprogramswritteninC/C++.Ourprototypeimplementationgeneratesobfus-catedcompiledELFbinariesforLinux.Sincethemal-wareauthorswillbetheonesapplyingthistechnique,theassumptionofhavingthesourcecodeavailableisrealis-tic.Wehavetestedoursystembyapplyingitonseveralrealmalwareprogramsandthenevaluateditseffectivenessinconcealingtriggerbasedmaliciouscode.Inourexperi-mentson7differentmalwareprogramscontaining92ma-licioustriggers,ourtoolsuccessfullyobfuscatedandcon-cealedtheentirecodethatimplemented87ofthem.Weanalyzethestrengthsandweaknessesofourobfus-cation.Althoughthekeysareeffectivelyremovedfromtheprogram,theencryptionisstillsusceptibletobruteforceanddictionaryattacks.Weprovideamethodtomeasurethestrengthofparticularapplicationsoftheobfuscationagainstsuchattacks.Tounderstandthepossiblethreatsourpro-posedobfuscationschemeposes,wediscusshowmalwareauthorsmaymanuallymodifytheircodeindifferentwaystotakeadvantageoftheobfuscationtechnique.Finally,weprovideinsightintopossiblewaysofdefeatingtheobfus-cationscheme,includingmoreinformedkeysearchattacksandtheincorporationofinput-domaininformationinexist-inganalyzers.Wesummarizeourcontributionsbelow:•Wepresenttheprinciplesofanautomatedobfusca-tionschemethatcanconcealcondition-dependentma-liciousbehaviorfromexistingandfutureinputoblivi-ousmalwareanalyzers.•Wehavedevelopedaprototypecompiler-levelobfus-catorforLinuxandperformedexperimentalevalua-tiononseveralexistingreal-worldmalwareprograms,showingthatalargefractionoftriggerbasedmaliciousbehaviorcanbesuccessfullyhidden.•Weprovideinsightintothestrengthsandweaknessesofourobfuscation.Wediscusshowanattackerequippedwiththisknowledgecanmodifyprogramstoincreasethestrengthofthescheme.Wealsodis-cussthepossibilityofbrute-forceattacksasaweak-nessofourobfuscationandprovideinsightintohowtodevelopmorecapablemalwareanalyzersthatincor-porateinputdomainknowledge.Unlikepolymorphiccode,ourapproachdoesnotstoreencryptionkeysinsidetheprogram.However,thisdoesnotlimittheusageofpolymorphismonourobfuscatedbinaries.Itcanbeaddedasaseparatelayerontopofourobfuscation.Thegoalofourobfuscationistohidemaliciousbehaviorfrommalwareanalyzersthatextractbehavior.Forthesean-alyzers,theusualassumptionisthattheprogrambeingana-lyzedisalreadysuspicious.Nevertheless,malwareauthorswishtodevelopcodethatisnoteasilydetected.Na¨ıveusageofthisobfuscationmayactuallyimprovemalwaredetectionbecauseoftheparticularwayinwhichhashfunctionsanddecryptionroutinesareused.However,sinceattackerscanaddexistingpolymorphicormetamorphicobfuscationtech-niquesontopofourtechnique,adetectorshouldbeabletodetectsuchmalwareatbestwiththesameefﬁcacyaspoly-morphicmalwaredetection.2ConditionalCodeObfuscationMalwareprogramsroutinelyemployvariouskindsoftriggerbasedevents.Themostcommonexamplesarebots[14],whichwaitforcommandsfromthebotmasterviaacommandandcontrolmechanism.Somekeylog-gers[37]logkeysfromapplicationwindowscontainingcertainkeywords.Timebombs[27]aremaliciouscodeex-ecutedataspeciﬁctime.Variousanti-debugging[8]oranti-analysistricksdetectside-effectsintheexecutingenvi-ronmentcausedbyanalyzersanddivertprogramexecutionwhenpresent.Theproblemforthemalwarewriteristhatthechecksinsidetheprogramthatareperformedonthein-putsgiveawayinformationaboutwhatvaluesareexpected.Forexample,thecommandsabotsupportsareusuallycon-tainedinsidetheprogramasstrings.Moregenerally,foranytriggerbasedbehavior,theconditionsrecognizingthetrig-gerrevealinformationabouttheinputsrequiredtoactivatethebehavior.Thebasisofourobfuscationschemeisintuitive.Byre-placinginput-checkingconditionswithequivalentonesthatrecognizetheinputswithoutrevealinginformationaboutthem,theinputscanbecomesecretsthattheinput-obliviousanalyzercannolongerdiscover.Suchsecretscanthenbeusedaskeystoencryptcode.Sincethemodiﬁedconditionsaresatisﬁedonlywhentheinputsaresenttotheprogram,thecodeblocksthatareconditionallyexecutedcanbeen-crypted.Inotherwords,ourschemeencryptsconditionalcodewithakeythatisremovedfromtheprogram,butisevidentwhenthemodiﬁedconditionissatisﬁed.Automati-callycarryingoutthistransformationasageneralobfusca-tionschemeinvolvesseveralsubtlechallenges.Weprovideahigh-leveloverviewofourobfuscationwithprogramexamplesinSection2.1.Thegeneralmecha-nismisdeﬁnedinSection2.2.Theprogramanalysisalgo-rithmsandtransformationsrequiredaredescribedinSec-Figure1.Twoconditionalcodesnippets.tion2.3.Section2.4describestheconsequencesofourschemeonexistingmalwareanalysisapproaches.Sec-tion2.5discussespossiblebrute-forceattacksonourob-fuscationtechnique.2.1OverviewFigure1showssnippetsoftwoprogramsthathavecon-ditionallyexecutedcode.Theﬁrstprogramsnippetcallsafunctionthatstartsloggingkeystrokesafterreceivingthecommand“startkeylogger”.Thesecondexamplestartsanattackonlyifthedayofmonthisbetweenthe11thandthe19th.Inboththeprograms,theexpectedinputcanbeeasilydiscoveredbyanalyzingthecode.Weusecryptographichashfunctionstohideinforma-tion.Fortheﬁrstexample,wecanmodifytheconditiontocomparethecomputedthehard-codedhashofthestringincmdwiththehashvalueofthestring“startkeylogger”(Figure2).Thecommandstring“startkeylogger”becomesasecretthataninputobliviousanalyzercannotknow.Thissecretcanbeusedasthekeytoencrypttheconditionalcodeblockandtheentirefunctionlogkeys().Noticethatwhentheexpectedcommandisreceived,theexecutionen-terstheifblockandtheencryptedblockiscorrectlyde-cryptedandexecuted.Figure2.Obfuscatedexamplesnippet.InthesecondexampleofFigure1,cryptographichashesoftheoperandsdonotprovideaconditionequivalenttotheoriginal.Moreover,sinceseveralvaluesofthevariablensatisfythecondition,itisproblematictousethemaskeysforencryptionanddecryption.Wedeﬁnecandidateconditionsasthosesuitableforourobfuscation.Acandidateneedsthreeproperties.First,theorderingrelationbetweenthepre-imagesofthehashfunc-tionmustbemaintainedintheimages.Second,thereshouldbeauniquekeyderivedfromtheconditionwhenitissatis-ﬁed.Third,theconditionmustcontainanoperandthathasastaticallydeterminableconstantvalue.Giventheserequirementsabove,operatorsthatcheckequalityoftwodatavaluesaresuitablecandidates.Hence,conditionshaving‘==’,strcmp,strncmp,memcmp,andsimilaroperatorscanbeobfuscatedwithourmechanism.2.2GeneralMechanismWenowformallydeﬁnethegeneralmethodofourcondi-tionalcodeobfuscationscheme.Withoutlossofgenerality,weassumethatanycandidateconditionisequivalenttothesimplecondition“X==c”wheretheoperandchasastati-callydeterminableconstantvalueandXisavariable.Also,supposethatacodeblockBisexecutedwhenthisconditionissatisﬁed.Figure3showstheprogramtransformationre-quiredfortheobfuscation.ThecryptographichashfunctionisdenotedbyHashandthesymmetricencryptionandde-cryptionroutinesareEncrandDecr,respectively.Figure3.Generalobfuscationmechanism.Theobfuscatedconditionis“Hash(X)==Hc”whereHc=Hash(c).Thepre-imageresistancepropertyofthefunctionHashimpliesthatitisinfeasibletoﬁndcgivenHc.Thisensuresthatitishardtoreversethehashfunction.Inaddition,becauseofthesecondpre-imageresistanceproperty,itishardtoﬁndanotherc!forwhichHash(c!)=Hc.Althoughthispropertydoesnotstrengthentheobfusca-tion,itisrequiredtomaketheobfuscatedconditionseman-ticallyequivalenttotheoriginal,ensuringthecorrectnessoftheprogram.TheblockBisencryptedwithcasthekey.LetBEbetheencryptedblockwhereBE=Encr(B,c).CodeisinsertedimmediatelybeforeBEtodecryptitwiththekeycontainedinvariableX.SinceHash(X)=Hcim-pliesX=c,whentheobfuscatedconditionissatisﬁed,theoriginalcodeblockisfound,i.e.B=Decr(BE,c)andtheprogramexecutionisequivalenttotheoriginal.How-ever,amalwareanalyzercanrecovertheconditionalcodeBonlybywatchingfortheattackertotriggerthisbehavior,byguessingthecorrectinput,orbycrackingthecrypto-graphicoperations.2.3AutomationusingStaticAnalysisInordertoapplythegeneralmechanismpresentedintheprevioussectionautomaticallyonaprogram,weutilizedseveralknownalgorithmsinstaticanalysis.Inthissection,wedescribehowtheseprogramanalysistechniqueswereused.2.3.1FindingConditionalCodeInordertoidentifyconditionalcodesuitableforobfusca-tion,weﬁrstidentifycandidateconditionsinaprogram.LetFbethesetofallfunctionsorproceduresandBbethesetofallbasicblocksintheprogramthatweanalyze.ForeachfunctionFi∈Fintheprogram,weconstructacontrolﬂowgraph(CFG)Gi=(Vi,Ei)intheprogramwhereVi⊆BisthesetofbasicblocksinFiandEiisthesetofedgesintheCFGrepresentingcontrol-ﬂowbetweenbasicblocks.Wethenidentifybasicblockshavingcondi-tionalbranches,whichhavetwooutgoingedges.Sincewearenotinterestedinconditionsusedinloops,weemployloopanalysistoidentifysuchconditionsanddiscardthem.Fromtheremainingconditionalbranches,weselectcandi-dateconditionsastheonescontainingequalityoperatorsasdescribedinSection2.1.LetCi⊆VibethesetofblockscontainingcandidateconditionsforeachfunctionFi.Aftercandidateconditionsareidentiﬁedinaprogram,thenextstepistoﬁndcorrespondingconditionalcodeblocks.Asdescribedearlier,conditionalcodeisthecodethatgetsexecutedwhenaconditionissatisﬁed.Itmayin-cludesomebasicblocksfromthesamefunctionthecondi-tionresidesinandsomeotherfunctions.Sinceabasicblockcancontainatmostoneconditionalbranchinstruction,byacondition,werefertothebasicblockthatcontainsit.WeusethemappingCCode:B→(B∪F)∗torepresentcon-ditionalcodeforanycondition.Inordertodetermineconditionalcode,weﬁrstusecontroldependenceanalysis[1,16]attheintra-procedurallevel.AblockQiscontroldependentonanotherblockPiftheoutcomeofPdeterminesthereachabilityofQ.Moreprecisely,ifoneoutcomeofPalwaysexecutesQ,buttheotheroutcomemaynotnecessarilyreachQ,thenQiscontroldependentonP.Usingthestandardalgorithmforidentifyingcontroldependence,webuildacontrolde-pendencegraph(CDG)foreachfunction,whereeachcon-ditionblockandtheiroutcomehasedgestoblocksthatareFigure4.Duplicatingconditionalcode.controldependentonit.Foreachcandidatecondition,weﬁndthesetofblocksthatarecontroldependentonitstrueoutcome.Therefore,ifatrueoutcomeofacandidatecon-ditionC∈CioffunctionFihasanedgetoablockB∈Vi,thenB∈CCode(C).Conditionalcodeblocksmaycallotherfunctions.Totakethemintoaccount,wedeterminereachabilityintheinter-proceduralCFG.IfthereexistsacalltoafunctionFfromaconditionalcodeblockB∈CCode(C)ofsomecandidateconditionC,weconsiderF∈CCode(C)whichmeansthatweconsiderallthecodeinthefunctionFasconditionalcodeofCaswell.Now,foreveryblockinF∈CCode(C),weﬁndcallstootherfunctionsandin-cludetheminCCode(C).Thisstepisperformedrepeat-edlyuntilallreachablefunctionsareincluded.Weusedthisapproachinsteadofinter-proceduralcontrol-dependenceanalysis[35]becauseitallowsustoobfuscatefunctionsthatarenotcontrol-dependentonacandidateconditionbutcanbereachedonlyfromthatcondition.Acandidateconditionmaybecontainedinablockthatisconditionalcodeofanothercandidatecondition.Thenextstepistoeliminatethesecasesbymakingafunctionorblockconditionalcodeofonlytheclosestcandidatecon-ditionthatcanreachit.ForanyblockB∈CCode(C),ifB∈CCode(C!)whereC%=C!andC∈CCode(C!)thenweremoveBfromCCode(C!).Weperformthesameoperationforfunctions.Blocksandfunctionscanbeobfuscatedwhentheyareconditionalcodeofcandidateconditionsonly.Iftheyarereachablebynon-candidateconditions,thenwecannotob-fuscatethem.Whenobfuscationsaretobeapplied,theyareappliedinaniterativemanner,startingwiththecandidateconditionthathavenoothercandidateconditionsdepend-ingonit.Thebasicblocksandfunctionsthatarecondi-tionalcodeoftheseconditionsareobfuscatedﬁrst.Inthenextiteration,candidateconditionswithnounobfuscatedcandidateconditionsdependingonitareobfuscated.Theiterativeprocesscontinuesuntilallcandidateconditionsareobfuscated.WeuseaconservativeapproachtoidentifyconditionalcodewhentheCFGisincomplete.Ifcodepointersareusedwhosetargetsarenotstaticallyresolvable,wedonoten-cryptcodeblocksthatarepotentialtargetsandanyothercodeblocksthatarereachablefromthem.Otherwise,theFigure5.Compoundconditionsimpliﬁcation.encryptioncancrashtheprogram.Fortunately,typeinfor-mationfrequentlyallowsustolimitthesetoffunctionsorblocksthatareprobabletargetsofacodepointer.2.3.2HandlingCommonConditionalCodeAsingleblockorafunctionmaybeconditionalcodeofmorethanonecandidateconditionthatarenotconditionalcodeofeachother.Forexample,abotprogrammaycon-tainacommonfunctionthatiscalledafterreceivingmulti-pledifferentcommands.IfablockBisconditionalcodeoftwocandidateconditionsPandQ,whereP/∈CCode(Q)andQ/∈CCode(P)thenBcanbereachedviatwodiffer-entcandidateconditionsandcannotbeencryptedwiththesamekey.AsshowninFigure4,wesolvethisproblembyduplicatingthecodeandencryptingitseparatelyforeachcandidatecondition.2.3.3SimplifyingCompoundConstructsLogicaloperatorssuchas&&or||combinemorethanonesimplecondition.Toapplyourobfuscation,compoundcon-ditionsmustbeﬁrstbrokenintosemanticallyequivalentbutsimpliﬁedconditions.However,partsofacompoundcondi-tionmayormaynotbecandidatesforobfuscation,makingthecompoundconditionunsuitableforobfuscation.Logicalandoperators(&&)canbewrittenasnestedifstatementscontainingtheoperandconditionsandthecon-ditionalblockintheinnermostblock(Figure5(a)).Sinceboththesimpleconditionsmustbesatisﬁedtoexecutecon-ditionalcode,thecodecanbeobfuscatedifatleastoneofthemisacandidatecondition.Logicaloroperators(||)canbeobfuscatedintwoways.Sinceeitheroftheconditionsmayexecutecondi-tionalcode,theconditionalcodemaybeencryptedwithasinglekeyandplacedintwoblocksthatareindividuallyobfuscatedwiththesimpleconditions.Anothersimplewayistoduplicatetheconditionalcodeanduseif...elseifconstructs(Figure5(b)).Notethatifeitheroneofthetwoconditionsisnotacandidateforobfuscation,thentheconditionalcodewillremainrevealed.Concealingtheothercopydoesnotgainprotection.Althoughitisnotpossibletodeterminethattheconcealedcodeisequivalenttothere-vealedone,therevealedcodegivesawaythebehaviorthatwasintendedtobehiddenfromananalyzer.TointroducemorecandidateconditionsinC/C++pro-grams,weconvertswitch...caseconstructsintosev-eralifblocks,eachcontainingaconditionusinganequal-ityoperator.Everycaseexceptthedefaultbecomesacan-didateforobfuscation.Complicationsarisewhenacodeblockunderaswitchcasefallsthroughtoanother.Insuchcases,codeoftheblockinwhichcontrol-ﬂowfallsthroughcanbeduplicatedandcontainedintheearlierswitchcasecodeblock,andthenthestandardapproachthatwede-scribedcanbeapplied.2.4ConsequencestoExistingAnalyzersOurobfuscationcanthwartdifferentclassesoftech-niquesusedbyexistingmalwareanalyzers.TheanalysisreferstothenotationspresentedinSection2.2.Pathexplorationandinputdiscovery:Variousanaly-sistechniqueshavebeenproposedthatcanexplorepathsinaprogramtoidentifytriggerbasedbehavior.Moseretal.’sdynamicanalysisbasedapproach[28]exploresmultiplepathsduringexecutionbyrepeatedlyrestoringearliersavedprogramstatesandsolvingconstructedpathconstraintsinordertoﬁndaconsistentsetofvaluesofin-memoryvari-ablesthatsatisfyconditionsleadingtodifferentpaths.Theyusedynamictaintanalysisoninputsfromsystemcallstoconstructlinearconstraintsrepresentingdependenciesamongmemoryvariables.Afterourobfuscationisapplied,theconstraintaddedtothesystemis“Hash(X)==Hc”,whichisanon-linearfunction.Therefore,ourobfusca-tionmakesithardforsuchamulti-pathexploringapproachtofeasiblyﬁndvalueassignmentstovariablesinthepro-grams’smemorytoproceedtowardstheobfuscatedpath.Asimilareffectcanbeseenforapproachesthatdiscoverinputsfromaprogramthatexecutesitalongaspeciﬁcpath.EXE[7]usesmixedsymbolicandconcreteexecutiontocreateconstraintsthatrelateinputstovariablesinmemory.ItusesitsownefﬁcientconstraintsolvercalledSTP,whichsupportsallarithmetic,logical,bitwise,andrelationalop-eratorsfoundinC(includingnon-linearoperations).Cryp-tographichashfunctionsaredesignedtobecomputation-allyinfeasibletoreverse.EvenwithapowerfulsolverlikeFigure6.Thearchitectureofourautomatedconditionalcodeobfuscationsystem.STP,itisinfeasibletogenerateandsolvetheconstraintsthatrepresentthecompletesetofoperationsrequiredtoreversesuchafunction.Forcingexecution:Amalwareanalyzermayforceex-ecutionalongaspeciﬁcpathwithoutﬁndingaconsistentsetofvaluesforallvariablesinmemory[42],hopingtoseesomemaliciousbehaviorbeforetheprogramcrashes.Supposethattheanalyzerforcesthemalwareprogramtofollowtheobfuscatedbranchthatwouldoriginallyexe-cuteBwithoutﬁndingthekeyc.AssumingXhasavaluec!wherec!%=c,thedecryptedblockthenbecomesB!=Decr(BE,c!)%=B.Inpracticalsituations,subse-quentexecutionofB!shouldcausetheprogramtoeven-tuallycrashwithoutrevealinganybehavioroftheoriginalblockB.Staticanalysis:Theutilizationofhashfunctionsalonecannotimpedeapproachesutilizingpurestaticanalysisorhybridmethods[4]becausebehaviorcanbeextractedbyanalyzingthecodewithoutrequiringconstraintsolving.However,ourutilizationofencryptionconcealsthebehav-iorintheencryptedblocksBEthatcanonlybedecryptedbythekeyc,whichisnolongerpresentintheprogram.2.5BruteForceandDictionaryAttacksAlthoughexistinginput-oblivoustechniquescanbethwartedbyourobfuscation,analyzersthatareawareoftheobfuscationmayattemptbrute-forceattacksonthekeysusedforencryption.First,thehashfunctionHash()beingusedinthemalwareneedstobeextractedbyanalyzingthecode.Then,amalwareanalystmaytrytoidentifycbycom-putingHash(X)forallsuitablevaluesofXandsearchingforavaluesatisfyingHash(X)=Hc.Thestrengthoftheobfuscationappliedtotheconditioncanthereforebemea-suredbythesizeoftheminimalsetofsuitablevaluesofX.LetDomain(X)denotethesetofallpossiblevaluesthatXmaytakeduringexecution.IfτisthetimetakentotestasinglevalueofXorthehashcomputationtime,thenthebruteforceattemptwilltake|Domain(X)|τtime.FindingthesetDomain(X)isnotstraightforward.Inmostcases,onlythesizeofXmaybeknown.IfXisnbitsinlength,thenthebruteforceattackrequires2nτtime.Thepossibilityofusingapre-computedhashtabletore-ducesearchtimecanbethwartedbyusinganoncewiththedatabeforecomputingthehash.Moreover,differentnoncevaluesfordifferentconditionscanbeusedtomakethecom-putedhashforoneconditionnotusefulforanother.Existingprogramanalysistechniquessuchasdata-ﬂowanalysisorsymbolicexecutionmayprovideasmallerDomain(X)insomecases,enablingadictionaryattack.Section5discussesmoreaboutattacksonourobfuscation,includingautomatedtechniquesthatcanbeincorporatedincurrentanalyzers.3ImplementationApproachInthissection,wepresentthedesignchoicesandimple-mentationofthecompiler-leveltoolthatwedevelopedtodemonstratetheautomatedconditionalcodeobfuscationonmalwareprograms.Ourprimarydesignchallengewastoselecttheappropriatelevelofcodeonwhichtoworkon.Performingencryptionatalevelhigherthanbinarycodewouldcauseun-executablecodetobegeneratedafterde-cryptionatrun-time.Ontheotherhand,essentialhigh-levelinformationsuchasdatatypesrequireanalysisatahigherlevel.Oursystem,therefore,worksatboththeintermediatecodeandthebinarylevel.WeusetheLLVM[24]compilerinfrastructureandtheDynInst[20]binaryanalysisandinstrumentationsystem.TheLLVMframeworkisanextensibleprogramoptimiza-tionplatformprovidinganAPItoanalyzeandmodifyitsownRISC-likeintermediatecoderepresentation.Itthenemitsbinarycodeforvariousprocessorfamilies.Mostoftheheavy-dutyanalysisandcodeinstrumentationisdoneusingthehelpofLLVM.TheDynInsttoolisaC/C++basedbinaryanalysisandinstrumentationframework,whichweuseforbinaryrewriting.Weimplementedourprototypeforthex86architectureandtheLinuxOS.WetargetedtheLinuxplatformprimarilytocreateaworkingsystemtoshowcasethecapabilityoftheproposedobfuscationschemewithoutmakingitawidelyapplicabletoolformalwareauthors.However,thearchitec-tureofourobfuscationtoolisgeneralenoughtobeportabletotheWindowsOS.ThearchitectureofoursystemispresentedinFigure6.OursystemtakesasinputamalwaresourceprogramwritteninC/C++andgeneratesanobfuscatedbinaryintheLinuxELFformat.Thetransformationisdoneinfourphases.Thephasesare(1)theFrontendCodeParsingPhase,(2)theAnalysis/TransformationPhase,(3)theCodeGenera-tionPhase,and(4)theEncryptionPhase.IntheﬁrstphaseLLVM’sGCC-basedparserconvertsC/C++sourceprogramstoLLVM’sintermediaterepresen-tation.Next,intheanalysisandtransformationphase,thebulkoftheobfuscationexceptfortheactualencryp-tionprocessiscarriedoutontheintermediatecode.Inthisphase,candidateconditionsareidentiﬁedandobfus-cated,conditionalcodeblocksareinstrumentedwithdeci-pherandmarkerroutines,andthekeyrequiredforencryp-tionisstoredaspartofthecode.Section3.1describesthesestepsindetails.Inthethirdphase,weusethestaticcompila-tionandlinkingbackendofLLVMtoconverttheLLVMin-termediaterepresentation(IR)tox86assemblyfromwhichwegenerateanx86ELFbinary.Intheﬁnalphase,whichisdescribedinSection3.2,ourDynInstbasedbinarymod-iﬁcationtoolencryptsmarkedcodeblockstocompletetheobfuscationprocess.WedescribeinSection3.3howthedecryptionofcodetakesplaceduringrun-time.3.1AnalysisandTransformationPhaseTheanalysisandtransformationwasimplementedasanLLVMplugin,whichisloadedbytheLLVMoptimizationmodule.ThestepstakenareillustratedinFigure7andde-scribedbelow.3.1.1CandidateConditionReplacementWefollowedthemethoddescribedinsection2.3toidentifycandidateconditionsandtheirconditionalcode.AsshowninFigure7,thetransformedcodecallsthehashfunctionwiththevariableusedintheconditionastheargument.WeuseSHA-256inourimplementationasthehashfunction.Thereplacedconditioncomparestheresultwiththehardcodedhashvalueoftheconstant.Inotherwords,thecon-dition“X==c”isreplacedwith“Hash(X)==Hc”,whereHc=Hash(c).DependingonthedatatypeofX,callsareplacedtodifferentversionsofthehashfunction.Forlengthconstrainedstringfunctions,thepreﬁxesofthestringsaretaken.Aspecialwrapperfunctionisusedforstrstr,whichcomputesthehashofeverysub-stringofXandcompareswithHc.3.1.2DecipherRoutineInourimplementation,weselectedAESwith256-bitkeysastheencryptionalgorithm.Constantsintheconditionsarenotdirectlyusedaskeysbecauseofthevaryingtypeandlength.AkeygenerationfunctionKey(X)isusedtoproduce256-bitkeys.Wedescribethefunctioninmoredetailsinthenextsection.WeusetheLLVMAPItoplaceacallimmediatelybeforetheoriginalconditionalcodetoaseparatedecipherfunctionthatcanbedynamicallyorstaticallylinkedtothemalwareprogram.Figure7illustratesthisforabasicblock.Forafunction,thecalltothedecipherroutineisinsertedastheﬁrststatementinthefunctionbody.TheDecipherroutinetakestwoarguments.TheﬁrstisadynamicallycomputedkeyKey(X),whichisbasedonthevariableXinthecon-dition.Thesecondisthelengthofthecodetobedecryptedbythedecipherroutine.Whencallingafunctionthatistobeobfuscated,thesetwoargumentsareaddedtothelistofargumentsforthatfunction.Thisallowsthemtobepassednotonlytodecipherroutinecalledinthatfunctionbody,butalsotootherobfuscatedfunctionsthatthefunctionmaycall.Atthisstageintheobfuscationscheme,thislengthisnotknownbecausetheﬁnalgeneratedcodesizewillvaryfromtheintermediatecode.Wekeepaplaceholdersothattheactualvaluecanbeplacedduringbinaryanalysis.3.1.3DecryptionKeyandMarkersThekeygenerationfunctionKeyusesaSHA-256crypto-graphichashtogenerateaﬁxedlengthkeyfromvaryinglengthdata.However,thesystemwouldbreakifweusedthesamehashfunctionasusedinthecondition.Therea-sonisthatifthekeyKey(c)=Hash(c)=Hc,thenthestoredhashHcintheconditioncanbeusedtodecryptthecodeblocks.Therefore,weuseKey(X)=Hash(X|N),whereNisanonce.ThisensuresthattheencryptionkeyKc=Key(c)%=Hc,wherecistheconstantinthecon-dition.Atthisstage,thecodeblocktobeencryptedisnotmodiﬁed.Immediatelyfollowingthisblock,weplacetheencryptionkeyKc.Duringintermediatecodeanalysis,itisnotpossibletoforeseetheexactlocationofthecorrespondingcodeintheresultingbinaryﬁle.Therefore,weplacemarkersinthecode,whicharelateridentiﬁedusingabinaryanalyzerinordertoperformencryption.ThefunctioncalltoDecipherworksasabeginningmarkerandweplaceadummyfunc-tioncallEndmarker()aftertheencryptionkey.WeusefunctioncallsasmarkersbecausetheLLVMoptimizationremovesotherunnecessaryinstructionsfromtheinstructionstream.Thistypeofplacementofthekeyandmarkershavenoabnormalconsequencesontheexecutionoftheprogrambecauseitisidentiﬁedduringbinaryanalysisandremovedattheﬁnalstageofobfuscation.Figure7.Analysisphase(performedonIR).Figure8.EncryptionPhase(performedonbi-nary).3.2EncryptionPhaseWiththehelpofDynInst,ourtoolanalyzestheELFbi-naryoutputbyLLC.Inordertoimprovecodeidentiﬁcation,weensurethatsymbolinformationisintactintheanalyzedbinary.Figure8illustratesthestepscarriedoutinthisphase.Atthisstage,ourtoolidentiﬁescodeblocksneedingen-cryptionbysearchingforcallstothemarkerfunctionsDecipher()andEndmarker().Whensuchblocksarefound,itextractstheencryptionkeyKcfromthecodeandthenremovesthekeyandthecalltotheEndmarkerfunc-tionbyreplacingthemwithx86NOPinstructions.Itthencalculatesthesizeoftheencryptedblock.SinceAESisablockcipher,wemakethesizeamultipleof32bytes.ThiscanalwaysbedonebecausetheplaceforthekeyinthecodeleavesenoughNOPsattheendofthecodeblockneedingencryption.WeplacethesizeastheargumenttothecalltoDecipher,andthenencrypttheblockwiththekeyKc.Thenestedconditionalcodeblocksmustbemanagedinadifferentway.Werecursivelysearchfortheinnermostnestedblocktoencrypt,andperformencryptionstartingfromtheinnermostonetotheoutermostone.Sinceourmethodofencryptingthecodeblockdoesnotrequireex-traspacebeyondwhatisalreadyreserved,ourtooldoesnotneedtoperformcodemovementinthebinary.3.3Run-timeDecryptionProcessTheDecipherfunctionperformsrun-timedecryptionoftheencryptedblocks.Noticethatthelocationoftheblockthatneedstobedecryptedisnotsenttothisfunction.WhentheDecipherfunctioniscalledthereturnaddresspushedontothestackisthestartoftheencryptedblockim-mediatelyfollowingthecall-site.Usingthereturnaddresspushedonthestack,thekeyandtheblocksize,thefunctiondecryptstheencryptedblockandoverwritesit.Oncetheblockhasbeendecrypted,thecalltotheDecipherfunc-tionisremovedbyoverwritingitwithNOPinstructions.Thedecryptionfunctionusestheabilitytomodifycode.Therefore,writeprotectiononthecodepagesisswitchedoffbeforethemodiﬁcationandswitchedbackonafter-wards.4ExperimentalEvaluationWeusedourobfuscationtoolonseveralmaliciouspro-gramsinordertoevaluateitsabilitytohidetriggerbasedbe-havior.Althoughwehadtoselectfromaverylimitednum-berofavailablemaliciousprogramswrittenforLinux,wechoseprogramsthatarerepresentativeofdifferentclassesofmalwareforwhichtriggersareuseful.Weevaluatedoursystembydetermininghowmanyman-uallyidentiﬁedtrigger-basedmaliciousbehaviorswereau-tomaticallyandcompletelyobfuscatedasconditionalcodesectionsbyoursystem.Inordertoevaluatetheresistancetobruteforceattacksoneachobfuscatedtrigger,wede-ﬁnedthreelevelsofstrengthdependingonthetypeofthedatausedinthecondition.Anobfuscationwasconsid-eredstrong,medium,orweakifitsconditionincorporatedstrings,integers,orbooleanﬂags,respectively.Table1showstheresultsofourevaluationonvariousprograms.Noticethatalmostalltriggerbasedmaliciouscodewassuc-cessfullyobfuscatedusingourtool.However,forafewspe-ciﬁcinstancesourtoolwaseitherabletoprovideweakob-fuscationornotabletoprovideanyobfuscationatall.Weconsiderbothofthesecasesasafailureforourobfusca-tiontoprovideanyprotection.Weinvestigatedthereasonsbehindsuchcasesanddescribehowthemalwareprogramcouldbemodiﬁedtotakeadvantageofourobfuscation.WeﬁrsttestedourtoolontheSlapperworm[38].Al-thoughitisaworm,itcontainsalargesetoftriggerbasedbehaviorsfoundinbotsandbackdoorprograms.Whenthewormspreads,itcreatesaUDPbasedpeer-to-peernetworkamongtheinfectedmachines.Thisentirenetworkofvic-timscanbecontrolledbysendingcommandstocarryoutDistributedDenialofServiceattacks.Inaddition,itinstallsabackdoorprogramontheinfectedmachinethatprovidesshellaccesstothevictimmachine.TheSlapperwormhastwocomponents.TheﬁrstMalwareMalicioustriggersStrongMediumWeakNoneSlapperworm(P2PEngine)28-28--Slapperworm(Backdoor)11---BotNET(AnIRCBotnetServer)5252---passwdrookit22---loginrootkit32--1toprootkit2---2chshrootkit42-2-Table1.Evaluationofourobfuscationschemeonautomaticallyconcealingmalicioustriggers.(unlock.c)containstheworminfectionvectorandthecodenecessarytomaintainthepeer-to-peernetworkandre-ceivecommands.Wemanuallyidentiﬁed28malicioustrig-gersintheprogramthatperformsvariousmaliciousactionsdependingonthereceivedcontrolcommands.Thesetrig-gerswereimplementedusingalargeswitchconstruct.Ourtoolwasabletocompletelyobfuscateallmaliciousactionsofthesetriggers.However,theobfuscationshadmedium-levelstrengthbecausetheconditionswerebasedonintegersreceivedintheUDPpackets.Thesecondpartofthewormisabackdoorprogram(update.c)thatopensaLinuxshellwhenthecorrectpasswordisprovidedtoit.Theprogramcontainedonlyonemalicioustrigger,whichusesthestrcmpfunctiontocheckwhethertheprovidedpasswordwasequaltothehard-codedstring“aion1981”.Ourtoolwasabletosuccessfullyobfuscatetheentirecodeofthistrigger(whichincludedacalltoexecve)andre-movedthepasswordstringfromtheprogram.Inthiscase,ourtoolprovidedstrongobfuscationbecausetheconditionwasbasedonastring.WenexttestedourobfuscationonagenericopensourcebotprogramBotNETforLinux,whichhadminimalcom-mandandcontrolsupportbuiltintoit.Sincebotstypicallyinitiatedifferentmaliciousactivitiesafterreceivingcom-mands,weidentiﬁedthesectionsinthatprogramthatre-ceivecommandsandconsideredthemasmalicioustriggers.Wemanuallyfound52triggersintheprogram,andafterourobfuscationwasapplied,codeconditionallyexecutedforall52ofthemwerestronglyobfuscated.Thisresultrepresentswhatwecanexpectbyobfuscatinganytypicalbotprogram.Usually,allIRCbasedbotcommandssendandreceivetextbasedcommands,makingthetriggerssuitableforstrongobfuscation.Wefoundseveralrootkitprograms[30]forLinuxthatinstalluserleveltoolssimilartotrojanhorseprogramscon-tainingspeciﬁclogicbombsthatprovidemaliciousadvan-tagestoattackers,includingprivilegedaccesstothesystem.First,wetestedthepasswdrootkitprogram,whichhadtwomanuallyidentiﬁablemalicioustriggersinsertedintotheoriginal.Theﬁrsttriggerenablesausertospawnapriv-ilegedshellwhenapredeﬁnedmagicstring“satori”isin-sertedasthenewpassword.Thesecondtriggerworksinasimilarmannerandactivateswhentheoldpasswordisequaltothemagicstring.Ourobfuscationsuccessfullyconcealedthesetriggerbasedcodewithstrongobfuscation.Wenexttestedonarootkitversionoflogin.Thesourcecodelogin.ccontainedthreemanuallyidentiﬁedmalicioustriggers.Ourobfuscationwasabletoconcealtwowithstrongobfuscation.Bothofthesetriggerswerestrcmpchecksontheusernameorpasswordenteredbytheuser.Ourobfuscatorwasnotabletoprotectthethirdtrigger.Thereasonwasthatbothofthestronglyobfus-catedcodesectionsincreasethevalueofanintegervariableelitethatwasusedbythethirdtriggerplacedelsewhereintheprogram.Thethirdtriggerusedtheoperator!=,mak-ingitunsuitableforourobfuscation.Ournexttestwasonthetoprootkit.Thisprogramcon-tainedtwomalicioustriggers,whichhidespeciﬁcprogramnamesfromthelistthatausercanview.Althoughthesetriggersareimplementedusingstrcmp,theactualnamesoftheprocessesthataretobehiddenarereadfromﬁles.Ourobfuscatorthereforecouldnotconcealanyofthesema-licioustriggers.Amalwareauthorcouldtakeadifferentapproachtoovercomesituationslikethis.Byhavingatrig-gerthatchecksfortheﬁlecontainingtheprocessnamestostartwithahard-codedvalue,alltheothertriggerscanbecontainedinastronglyobfuscatedcodesection.Finally,wetestedonarootkitthatisamodiﬁedver-sionofthechshshell.Twotriggersweremanuallyidenti-ﬁed.Theﬁrst,whichcheckedforaspeciﬁcusername,wasstronglyobfuscatedbyourtool.Thesecondtriggerusedabooleanﬂaginandthereforewasonlyweaklyobfuscated.Itiseasyforonetoovercomethisdifﬁcultybecausebymanu-allymodifyingtheﬂagtobeastringoraninteger,strongerobfuscationcanbeobtainedusingourtool.5DiscussionInthissection,wediscussourobfuscationtechniquetohelpdefendersbetterunderstandthepossiblethreatsitposes.Wediscusshowmalwareauthors(attackers)mayutilizethistechnique,andanalyzeitsweaknessestoprovideinsightintohowsuchathreatcanbedefeated.5.1StrengthsWehavediscussedearlierinSection2.4howourob-fuscationimpedesstate-of-the-artmalwareanalyzers.Ifthethevariableusedintheconditionhasalargersetofpossiblereasonablevalues,theobfuscationisstrongeragainstbruteforceattacks.Sincedatatypeinformationishardtodeter-mineatthebinarylevel,brute-forceattacksmayhavetosearchlargersetsofvaluesthannecessary,providingmoreadvantagetotheattackers.Equippedwiththisknowledge,amalwareauthormaymodifyhisprogramstotakeadvan-tageofthestrengthsratherthannaivelyapplyingittotheexistingprograms.First,amalwareauthorcanmodifydifferentpartsofaprogramtointroducemorecandidateconditions.Ratherthanpassingnamesofresourcestosystemcalls,hecanqueryforresourcesandcomparewiththenames.Inad-dition,certainconditionsthatuseotherrelationaloperatorssuchasor%=thatareunsuitableforobfuscationmaybereplacedby==.Forexample,timebasedtriggersthatuserangesofdaysinamonthcanbereplacedwithseveralequalitychecksonindividualdays.Asanotherexample,aprogramthatexitsifacertainresourceisnotfoundbyusingthe!=operator,canbemodiﬁedtocontinueoperationiftheresourceisfoundusingthe==operator.Second,amalwareauthorcanincreasethesizeoftheconcealedcodeinthemalwareprogramsbyincorporatingmoreportionsofthecodeundercandidateconditionsforobfuscation.Botauthorscanhaveaninitialhandshakingcommandthatencapsulatesthebulkoftherestofitsactiv-ity.Third,themalwareauthorscanincreasethelengthofinputstomakebruteforceattacksharder.Inourimple-mentation,weuseAESencryptionwith256-bitkeys.Ifanyvariableusedtogeneratethekeyislessthan256-bitsinsize,thentheeffectivekey-lengthisreduced.Attack-ersmayalsoavoidlowentropyinputsforagivenlengthbecausethatmayreducethesearchspacefordictionary-basedattacks.Forexample,abotcommandthatuseslowercasecharactersonlyinabufferof10bytesneedsthesearchspaceofsize2610,whereasusingbothupper,lower,andnumericvalueswouldincreasesearchspaceto6210.Unlikestrings,numericvaluesusuallyhaveaﬁxedsizeandmaynotbeincreasedinlength.Checkingthehashesofallpossible32-bitintegervaluesmaynotbeaformidabletask,butitistime-consuming,especiallyifadifferentnonceisusedineachconditiontomakepre-computedhashesnotuseful.AnattackercanutilizesomeproprietaryfunctionF(x)inthecodetomapa32-bitintegerxtoalongerin-tegervalue.However,suchanapproachdoesnotfunda-mentallyincreasethesearchspace.ItmayjustincreasethedifﬁcultyforthedefendersinautomaticallycomputingthehashesbecausetheequivalentcomputationofFhastobeextractedfromthecodeandappliedforeachpossible32-bitvaluebeforeapplyingthehashfunction.5.2WeaknessesInitscurrentform,oneofthemainweaknessesofourobfuscationisthelimitedtypesofconditionsonwhichitcanbeappliedto.Althoughtriggersfoundintheprogramsthatweexperimentedwithweremostlyequalitytests,therecanbemanytriggerconditionsinamalwarethatchecksrangesofvalues.Iftherangeislarge,itmaynotbepossi-bletorepresentthemasseveralequalitychecksaswehavementionedearlier,makingtheobfuscationinapplicable.Theencryptionstrengthdependsonthevariablethatisused.Thefullstrengthofhaving2256possiblekeysforAESisnotutilizedparticularlyinthecaseofnumericdata,whichare32-bitor64-bitintegersincurrentsystems.Obfusca-tionsinvolvingstringinputsarelikelytobemoreresistanttoanalysis.Therefore,asubclassofmalware,especiallybotsorbackdoors,arelikelytobethemostbeneﬁcialfromthisapproachbecausetheinputsrequiredforthemalicioustriggerscanbeselectedbythemalwareauthors.Anotherweaknessisthattrigger-basedbehaviormaynotjustdependondatathatareinputusingsystemcalls,butalsostatusresultsreturnedfromthecalls.Mostsystemcallshaveasmallsetofpossiblereturnvalues,usuallyindicatingasuccessorsomeformoferror.Asaresult,thenumberofvaluestocheckbyabruteforceattackmaybereducedevenfurtherforsuchconditions.Possiblewaystodefeat:Iftheproposedobfuscationissuccessfullyapplied,existingmalwareanalysistechniquesmaynotbeabletoextractthebehaviorthatisconcealedunlesstheconditionsinthetriggersaresatisﬁed.Yet,wesuggestseveraltechniquestodefeatourobfuscation.First,analyzersmaybeequippedwithdecryptorsthatreducethesearchspaceofkeysbytakingtheinputdomainintoaccount.Onceanobfuscatedconditionisdetected,thevariableusedinitmaybetracedbacktoitssourceusingexistingmethods.Ifitistheresultoranargumentreceiv-ingdatafromasystemcall,thecorrespondingspeciﬁca-tionmaybeusedtoﬁndthereasonablesetofvaluesthatitmaytake.Forexample,ifthesourceissetbyacall-ingsystemcallthatreturnsthecurrentsystemdate(suchasgettimeofday),thesetofallpossiblevaluesrepre-sentingvaliddatesmaybeused,signiﬁcantlyreducingthesearchspace.If,however,thesourceisinputdatathatcan-notbecharacterized,bruteforcingmaybecomeinfeasible.Anotherapproachcanbetomovemoretowardsinput-awareanalysis.Ratherthancapturingbinariesonly,col-lectionmechanismsshouldcaptureinteractionofthebinarywithitsenvironmentifpossible.Incaseofbots,havingrelatednetworktracescanprovideinformationabouttheinputsrequiredtobreaktheobfuscation.Existinghoney-potsalreadyhavethecapabilitytocapturenetworkactivity.Recordingsysteminteractioncanprovidemoreinformationabouttheinputsrequiredbythebinary.Malwaredetection:Althoughtheobfuscationmayprovepowerfulagainstmalwareanalyzers,itsusemayhaveanupsideinmalwaredetection.Theexistenceofhashfunc-tionsandencryptionroutinestogetherwithanoticeablenumberofconditionsutilizingthemmayindicatethatanunknownbinaryisamalware.However,ourproposedob-fuscationallowsmorelayersofothergeneralobfuscationschemestobeappliedontopofit.Forexample,thebinaryresultingfromoursystemmaybepackedwithexecutableprotectors[34],whichalargefractionofmalwarealreadydotoday.Theuseofprotectortoolsalonearenotusuallyanindicationthattheprogramisamalwarebecausethesetoolsareusuallycreatedforprotectinglegitimateprograms.Removingsuchobfuscationlayersrequireunpackingtech-niques[21,33]thataremostlyusedpriortoanalysisofsus-piciouscodebecauseoftheirrun-timecost.Theendresultisthatdetectingsuchobfuscatedmalwareisnotanyeasierthandetectingexistingones.6RelatedWorkTheproblemofdiscoveringtrigger-basedmaliciousbe-haviorshasbeenaddressedbyrecentresearch.Sometech-niqueshaveusedsymbolicexecutiontoderivepredicatesleadingtospeciﬁcexecutionpaths.Inordertoidentifytime-bombsincode,[13]variestimeinavirtualmachineandusessymbolicexecutiontoidentifypredicatesorcon-ditionsinaprogramthatdependontime.Anothersym-bolicexecutionbasedmethodofdetectingtriggerbasedbe-haviorispresentedin[5].Brumleyetal.’sBitscope[4]usesstaticanalysisandsymbolicexecutiontounderstandbehaviorofmalwarebinariesandiscapableofidentifyingtrigger-basedbehavioraswell.Ourobfuscationmakesithardforsymbolicconstraintscontainingcryptographicone-wayhashfunctionstobesolved.Approacheshavebeenproposedthatidentifytrigger-basedbehaviorbyexploringpathsduringexecution.Moseretal.’smulti-pathexplorationapproach[28]wastheﬁrstsuchapproach.Thetechniquecancomprehensivelydis-coveralmostallconditionalcodeinamalwarewithsufﬁ-cientexecutiontime.ThesystemusesQEMUanddynamictaintingtoidentifyconditionsandconstructpathconstraintsthatdependoninputscomingfrominterestingsystemcalls.Onceaconditionalbranchisreached,theapproachat-temptsexecutiononbothofthebranchesafterconsistentlychangingmemoryvariablesbysolvingtheconstraints.An-otherapproachispresentedin[42]thatforcesexecutionalongdifferentpathsdisregardingconsistentmemoryup-dates.Theapproachhasbeenshowntobeusefulforrootk-itswrittenasWindowskerneldrivers.Techniquesthatcanimpedeanalyzerscapableofidenti-fyingtrigger-basedbehaviorneedtoconcealconditionsandthecodeblocksthatareusedtoimplementthesebehaviors.Anexampleofobfuscatedconditionalbranchesinmalwarewasseenintheearly90sintheCheeba[19]virus,whichsearchedforaspeciﬁcﬁlebycomparingthehashofthenameofeachﬁlewithahard-codedhashoftheﬁlenamebeingsearched.Intheliterature,theideaofusingenviron-mentgeneratedkeysforencryptionwasintroducedin[32].Theworkonsecuretriggers[18]considersawhitehatsce-narioandpresentstheprinciplesofconstructingprotocolsforsoftwaredeveloperstohaveinputscomingintoapro-gramtodecryptpartsofthecode.Inthemalwarescenario,theresearchideaofusingenvironmentgeneratedkeysforencryptionwaspresentedastheBradleyvirus[17].How-ever,suchtechniqueshavenotbecomeapracticalthreatbe-causeidentiﬁcationofsuchkeysandincorporationoftheencryptiontechniquerequiresamalwaretobemanuallyde-signedandimplementedaroundthisobfuscation.Ourworkshowsthatencryptingpartsofthemalwarecodeusingkeysgeneratedfrominputscanbeautomaticallyappliedonex-istingmalwarewithoutanyhumaneffort,showingitsefﬁ-cacyasawide-spreadthreat.Theuseofpolymorphicenginesinvirusesisoneoftheearliest[36]obfuscationtechniquesusedinmalwaretoevadedetection.Overtheyears,variousmethodsofpoly-morphicandmetamorphictechniqueshaveappearedinthewild[39].Inordertodetectpolymorphicmalware,an-tivirussoftwareuseemulationorcreatesignaturestodetectthepolymorphicdecryptors.In[9],obfuscationtechniquessuchasgarbageinsertion,codetransposition,registerreas-signment,andinstructionsubstitutionwereshowntosuc-cessfullydisruptdetectionofseveralcommercialantivirustools.Besidesmalwaredetectionapproaches[10,22,23],re-centresearchhasfocusedoncreatingtechniquesthatauto-matemalwareanalysis.Thesesystemsautomaticallypro-videcomprehensiveinformationaboutthebehavior,run-timeactions,capabilities,andcontrollingmechanismsofmalwaresampleswithlittlehumaneffort.Avarietyofob-fuscationtechniques[11,12,25,43]havebeenpresentedthatcanimpedesuchanalyzersthatarebasedonstaticanaly-sisapproach.Executableprotectorsandpackers[34]arewidelyusedbymalwareauthorstomakereverseengineer-ingoranalysisoftheircodeveryhard.Aswithpolymorphiccode,packersobfuscatethecodebyencryptingorcom-pressingthebinaryandaddinganunpackingroutine,whichreversestheoperationduringexecution.Tools[21,26,33]havebeenpresentedthatareabletounpackalargefractionofsuchprogramstoaidstaticanalysis.However,byuti-lizingourobfuscationbeforepacking,malwareauthorsarecapableofconcealingcodeimplementingtriggeredbehav-iorfromstaticanalyzersevenafterunpackingisperformed.Dynamicanalysisapproachhasbeenmoreattractiveforautomatedmalwarebehavioranalyzers.Thisisbecauseperforminganalysisofcodethatisexecutingovercomesobfuscationsthatimpedestaticanalysis,includingpackedcode.Sincemostdynamicanalysisofmalwareinvolvesdebuggers[15],safevirtualmachineexecutionenviron-mentsoremulators,malwareprogramsusevariousanti-debugging[8]andanti-analysistechniquestodetectside-effectsintheexecutionenvironmentandevadeanalysis.TherehasbeenresearchonstealthanalysisframeworkssuchasCobra[40],whichplacesstealthhooksinthecodetoaidanalysiswhileremaininghiddenfromtheexecutingmalware.Inordertoautomateanalysis,dynamictoolssuchasCWSandbox[6],TTAnalyze[2]ortheNormanSand-box[29]automaticallyrecordtheactionsperformedbyanexecutingmalware.However,sincesuchtoolscanonlyviewasingleexecutionpath,trigger-basedbehaviormaybemissed.Thesetoolshavebeensupersededbytherecentapproachesthatcanidentifyandextracttrigger-basedbe-havior,whichwehavepresentedearlierinthissection.7ConclusionWehavedesignedanobfuscationschemethatcanbeau-tomaticallyappliedonmalwareprogramsinordertocon-cealtriggerbasedmaliciousbehaviorfromstate-of-the-artmalwareanalyzers.Wehaveshownthatifamalwareau-thorusesourapproach,variousexistingmalwareanalysisapproachescanbedefeated.Furthermore,ifproperlyused,thisobfuscationcanprovidestrongconcealmentofmali-ciousactivityfromanypossibleanalysisapproachthatisobliviousofinputs.WehaveimplementedaLinuxbasedcompilerleveltoolthattakesasourceprogramandauto-maticallyproducesanobfuscatedbinary.Usingthistoolwehaveexperimentallyshownthatourobfuscationschemeiscapableofconcealingalargefractionofmalicioustrig-gersthatarefoundinseveralunmodiﬁedmalwaresourceprogramsrepresentingvariousclassesofmalware.Finally,wehaveprovidedinsightintothestrengthsandweaknessesofourobfuscationtechniqueandpossiblewaystodefeatit.AcknowledgmentsThismaterialisbaseduponworksupportedbytheNationalScienceFoundationunderGrantsCCR-0133629,CNS-0627477,andCNS-0716570,andbytheU.S.ArmyResearchOfﬁceunderGrantW911NF0610042.Anyopin-ions,ﬁndings,andconclusionsorrecommendationsex-pressedinthismaterialarethoseoftheauthor(s)anddonotnecessarilyreﬂecttheviewsoftheNationalScienceFoun-dationandtheU.S.ArmyResearchOfﬁce.References[1]A.Aho,M.Lam,R.Sethi,andJ.Ullman.CompilersPrin-ciples,Techniques,&Tools.AddisonWesley,2006.[2]U.Bayer,C.Kruegel,andE.Kirda.TTAnalyze:Atoolforanalyzingmalware.InProceedingsofthe15thAnnualConferenceoftheEuropeanInstituteforComputerAntivirusResearch(EICAR),2006.[3]R.BenzmllerandT.Urbanski.GDATAmalwarereport2006.GDataSoftwareAG,2006.[4]D.Brumley,C.Hartwig,M.G.Kang,Z.Liang,J.Newsome,P.Poosankam,S.D,andH.Yin.Bitscope:Automaticallydissectingmaliciousbinaries.InCMU-CS-07-133,2007.[5]D.Brumley,C.Hartwig,Z.Liang,J.Newsome,D.Song,andH.Yin.Towardsautomaticallyidentifyingtriggerbasedbehaviorinmalwareusingsymbolicexecutionandbinaryanalysis.TechnicalReportCMU-CS-07-105,CarnegieMel-lonUniversity,2007.[6]C.Willems.CWSandbox:AutomaticBehaviourAnalysisofMalware.http://www.cwsandbox.org/,2006.[7]C.Cadar,V.Ganesh,P.Pawlowski,D.Dill,andD.Engleri.EXE:Automaticallygeneratinginputsofdeath.InProceed-ingsoftheACMConferenceonComputerandCommunica-tionsSecurity,2006.[8]P.Cerven.CrackproofYourSoftware:ProtectYourSoftwareAgainstCrackers.2002.[9]M.ChristodorescuandS.Jha.Staticanalysisofexecutablestodetectmaliciouspatterns.InProceedingsoftheUsenixSecuritySymposium,2003.[10]M.Christodorescu,S.Jha,S.Seshia,D.Song,andR.Bryant.Semantics-awaremalwaredetection.InProceed-ingsoftheIEEESymposiumonSecurityandPrivacy,2005.[11]C.Collberg,C.Thomborson,andD.Low.Ataxonomyofobfuscatingtransformations.InTechnicalReport148,De-partmentofComputerSciences,TheUniversityofAuckland,July1997.[12]C.Collberg,C.Thomborson,andD.Low.Manufacturingcheap,resilient,andstealthyopaqueconstructs.InProceed-ingsoftheACMSymposiumonPrinciplesofProgrammingLanguages(POPL98),January1998.[13]J.Crandall,G.Wassermann,D.Oliveira,Z.Su,F.Wu,andF.Chong.Temporalsearch:Detectinghiddenmalwaretime-bombswithvirtualmachines.InProceedingsoftheConfer-enceonArchitecturalSupportforProgrammingLanguagesandOS,2006.[14]D.Dagon.Botnetdetectionandresponse:Thenetworkistheinfection.InProceedingsoftheOARCWorkshop,2005.[15]DataRescue.IDAProDisassemblerandDebugger.http://www.datarescue.com/idabase/index.htm.[16]J.Ferrante,K.Ottenstein,andJ.D.Warren.Theprogramdependencegraphanditsuseinoptimization.InACMTransactionsonProgrammingLanguagesandSystems,vol-ume9,pages319–349,1987.[17]E.Filiol.Strongcryptographyarmouredcomputervirusesforbiddingcodeanalysis.InProceedingsofthe14thAnnualConferenceoftheEuropeanInstituteforComputerAntivirusResearch(EICAR),2005.[18]A.Futoransky,E.Kargieman,C.Sarraute,andA.Waiss-bein.Foundationsandapplicationsforsecuretriggers.InACMTransactionsofInformationSystemsSecurity,vol-ume9,2006.[19]D.Gryaznov.Ananalysisofcheeba.InProceedingsoftheAnnualConferenceoftheEuropeanInstituteforComputerAntivirusResearch(EICAR),1992.[20]J.K.Hollingsworth,B.P.Miller,andJ.Cargille.Dynamicprograminstrumentationforscalableperformancetools.InProceedingsoftheScalableHighPerformanceComputingConference,1994.[21]M.G.Kang,P.Poosankam,andH.Yin.Renovo:ahiddencodeextractorforpackedexecutables.InProceedingsofthe2007ACMWorkshoponRecurringMalcode(WORM2007),2007.[22]E.Kirda,C.Kruegel,G.Banks,G.Vigna,andR.Kemmerer.Behavior-basedspywaredetection.InProceedingsoftheUsenixSecuritySymposium,2006.[23]C.Kruegel,W.Robertson,andG.Vigna.Detectingkernel-levelrootkitsthroughbinaryanalysis.InProceedingsoftheAnnualComputerSecurityApplicationConference(AC-SAC),2004.[24]C.LattnerandV.Adve.LLVM:Acompilationframeworkforlifelongprogramanalysis&transformation.InProceed-ingsofthe2004InternationalSymposiumonCodeGenera-tionandOptimization(CGO’04),2004.[25]C.LinnandS.Debray.Obfuscationofexecutablecodetoimproveresistancetostaticdisassembly.InProceedingsoftheACMConferenceonComputerandCommunicationsSe-curity(CCS),2003.[26]L.Martignoni,M.Christodorescu,andS.Jha.Omniunpack:Fast,generic,andsafeunpackingofmalware.InProceed-ingsoftheAnnualComputerSecurityApplicationsConfer-ence(ACSAC),2007.[27]D.Moore,C.Shannon,,andJ.Brown.Code-red:Acasestudyonthespreadandvictimsofaninternetworm.InPro-ceecingsofthe2ndACMInternetMeasurementWorkshop,2002.[28]A.Moser,C.Kruegel,andE.Kirda.Exploringmultipleexecutionpathsformalwareanalysis.InProceedingsoftheIEEESymposiumofSecurityandPrivacy,2007.[29]NormanSandboxInformationCenter.http://www.norman.com/microsites/nsic/,2006.[30]PacketStormSecurity.http://www.packetstormsecurity.org/.[31]S.Pearce.Viralpolymorphism.VXHeavens,2003.[32]S.RiordanandB.Schneier.Environmentalkeygenerationtowardscluelessagents.InMobileAgentsandSecurity,1998.[33]P.Royal,M.Halpin,D.Dagon,R.Edmonds,andW.Lee.Polyunpack:Automatingthehidden-codeextractionofunpack-executingmalware.InProceedingsofthe22ndAn-nualComputerSecurityApplicationsConference(ACSAC),2006.[34]SiliconRealms.Armadillo/softwarepassportprofessional.http://www.siliconrealms.com/index.html.[35]S.Sinha,M.J.Harrold,andG.Rothermel.Interproceduralcontroldependence.ACMTransactionsonSoftwareEngi-neeringandMethodology,10(2):209–254,2001.[36]F.Skulason.1260-TheVariableVirus.VirusBulletin,1990.[37]Symantec-VirusDatabase.Keylogger.stawin.http://www.symantec.com/securityresponse/writeup.jsp?docid=2004-012915-2315-99.[38]Symantec-VirusDatabase.Linux.slapper.worm.http://securityresponse.symantec.com/avcenter/security/Content/2002.09.13.html.[39]P.Szor.TheArtofComputerVirusResearchandDefense.SymatecPress,2005.[40]A.VasudevanandR.Yerraballi.Cobra:Fine-grainedmal-wareanalysisusingstealthlocalized-executions.InPro-ceedingsoftheIEEESymposiumonSecurityandPrivacy,2006.[41]I.V.Popov,S.K.Debray,andG.R.Andrews.Binaryobfus-cationusingsignals.InProceedingsoftheUsenixSecuritySymposium,2007.[42]J.WilhelmandT.ckerChiueh.Aforcedsampledexecutionapproachtokernelrootkitidentiﬁcation.InProceedingsoftheRecentAdvancesinIntrusionDetection(RAID),2007.[43]G.Wroblewski.Generalmethodofprogramcodeobfusca-tion.PhDthesis,WroclawUniversityofTechnology,2002.[44]A.YoungandM.Yung.Cryptovirology:Extortionbasedsecuritythreatsandcountermeasures.InProceedingsoftheIEEESymposiumofSecurityandPrivacy,1996.