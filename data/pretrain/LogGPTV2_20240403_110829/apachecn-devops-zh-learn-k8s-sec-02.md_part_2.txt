kind: Service
metadata:
  name: service-1
spec:
  type: NodePort 
  selector:
    app: app-1
  ports:
    - nodePort: 29763
      protocol: TCP
      port: 80
      targetPort: 9376
```
在此 YAML 文件中，以下内容适用:
1.  `type`属性定义了服务如何暴露给网络。
2.  `selector`属性定义了 Pod 的标签。
3.  `port`属性用于定义集群内部暴露的端口。
4.  `targetPort`属性定义了容器监听的端口。
服务通常用一个选择器来定义，选择器是一个标签，附加在需要在同一服务中的单元上。可以在没有选择器的情况下定义服务。这通常是为了访问外部服务或不同命名空间中的服务。没有选择器的服务使用端点对象映射到网络地址和端口，如下所示:
```
apiVersion: v1
kind: Endpoints
subsets:
  - addresses:
      - ip: 192.123.1.22
    ports:
      - port: 3909
```
该端点对象将为`192:123.1.22:3909`路由流量 c 到附加服务。
## 服务发现
为了找到 Kubernetes 服务，开发人员要么使用环境变量，要么使用**域名系统** ( **域名系统**，详细如下:
1.  **环境变量**:创建服务时，会在节点上创建一组形式为`[NAME]_SERVICE_HOST`和`[NAME]_SERVICE_PORT`的环境变量。这些环境变量可以被其他 pods 或应用用来联系服务，如下面的代码片段所示:
    ```
    DB_SERVICE_HOST=192.122.1.23
    DB_SERVICE_PORT=3909
    ```
2.  **域名系统**:域名系统服务作为附加服务被添加到 Kubernetes。Kubernetes 支持两个插件:CoreDNS 和 Kube-DNS。DNS 服务包含服务名称到 IP 地址的映射。Pods 和应用使用这种映射来连接到服务。
客户端可以从环境变量以及通过域名系统查询来定位服务 IP，并且有种不同的种服务来服务不同类型的客户端。
## 服务类型
服务可以有四种不同的类型，如下所示:
*   **集群 IP** :这是默认的值。该服务仅在集群内可访问。Kubernetes 代理可用于从外部访问集群 IP 服务。使用`kubectl`代理更适合调试，但不推荐用于生产服务，因为它需要`kubectl`作为经过身份验证的用户运行。
*   **节点端口**:该服务可通过每个节点上的静态端口访问。节点端口每个端口公开一个服务，需要手动管理 IP 地址更改。这也使得节点端口不适合生产环境。
*   **负载平衡器**:此服务可通过负载平衡器访问。每个服务一个节点平衡器通常是一个昂贵的选择。
*   **外部名称**:此服务有关联的**规范名称记录** ( **CNAME** )用于访问服务。
有几种类型的服务可以使用，它们在 OSI 模型的第 3 层和第 4 层工作。它们都不能在第 7 层路由网络请求。对于将请求路由到应用，如果 Kubernetes 服务支持这样的特性，那将是理想的。让我们来看看入口对象在这方面有什么帮助。
## 用于路由外部请求的入口
入口不是服务的一种类型，但这里值得一提。入口是一个智能路由器，提供对集群中服务的外部**HTTP/HTTPS**(T4】超文本传输协议安全的简称)。除了 HTTP/HTTPS 之外的服务只能为节点端口或负载平衡器服务类型公开。入口资源是使用 YAML 文件定义的，如下所示:
```
apiVersion: extensions/v1beta1
kind: Ingress
spec:
  rules:
  - http:
      paths:
      - path: /testpath
        backend:
          serviceName: service-1
          servicePort: 80
```
这个最小入口规范将所有流量从`testpath`路由转发到`service-1`路由。
入口对象有五种不同的变化，如下所示:
*   **Single-service Ingress**: This exposes a single service by specifying a default backend and no rules, as illustrated in the following code block:
    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    spec:
      backend:
        serviceName: service-1
        servicePort: 80
    ```
    该入口暴露了`service-1`的专用 IP 地址。
*   **Simple fanout**: A fanout configuration routes traffic from a single IP to multiple services based on the **Uniform Resource Locator** (**URL**), as illustrated in the following code block:
    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    spec:
      rules:
      - host: foo.com
        http:
          paths:
          - path: /foo
            backend:
              serviceName: service-1
              servicePort: 8080
          - path: /bar
            backend:
              serviceName: service-2
              servicePort: 8080
    ```
    该配置允许请求`foo.com/foo`联系`service-1`和请求`foo.com/bar`联系`service-2`。
*   **Name-based virtual hosting**: This configuration uses multiple hostnames for a single IP to reach out to different services, as illustrated in the following code block:
    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    spec:
      rules:
      - host: foo.com
        http:
          paths:
          - backend:
              serviceName: service-1
              servicePort: 80
      - host: bar.com
        http:
          paths:
          - backend:
              serviceName: service-2
              servicePort: 80
    ```
    该配置允许请求`foo.com`连接到`service-1`，请求`bar.com`连接到`service-2`。在这种情况下，分配给两个服务的 IP 地址是相同的。
*   **Transport Layer Security (TLS)**: A secret can be added to the ingress spec to secure the endpoints, as illustrated in the following code block:
    ```
    apiVersion: extensions/v1beta1
    kind: Ingress
    spec:
      tls:
      - hosts: