    visitAnnotation(注解类型 , 注解是否可以在 JVM 中可见)
->
    void visit*()
->
    void visitEnd()
->
    FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value)
    visitField(修饰符 , 字段名 , 字段类型 , 泛型描述 , 默认值)
->
    MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions)
    visitMethod(修饰符 , 方法名 , 方法签名 , 泛型信息 , 抛出的异常)
那么，跟进这个调用顺序，我们跟进其实现代码：
    private class MethodDiscoveryClassVisitor extends ClassVisitor {
        private String name;
        private String superName;
        private String[] interfaces;
        boolean isInterface;
        private List members;//类的所有字段
        private ClassReference.Handle classHandle;
        private MethodDiscoveryClassVisitor() throws SQLException {
            super(Opcodes.ASM6);
        }
        @Override
        public void visit ( int version, int access, String name, String signature, String superName, String[]interfaces)
        {
            this.name = name;
            this.superName = superName;
            this.interfaces = interfaces;
            this.isInterface = (access & Opcodes.ACC_INTERFACE) != 0;
            this.members = new ArrayList<>();
            this.classHandle = new ClassReference.Handle(name);//类名
            super.visit(version, access, name, signature, superName, interfaces);
        }
        ...
    }
visit()这个方法，会在类被观察的第一时间执行。可以看到在visit()这个方法执行时，保存了当前观察类的一些信息：
  1. this.name：类名
  2. this.superName：继承的父类名
  3. this.interfaces：实现的接口名
  4. this.isInterface：当前类是否接口
  5. this.members：类的字段集合
  6. this.classHandle：gadgetinspector中对于类名的封装
    public FieldVisitor visitField(int access, String name, String desc,
                                   String signature, Object value) {
        if ((access & Opcodes.ACC_STATIC) == 0) {
            Type type = Type.getType(desc);
            String typeName;
            if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {
                typeName = type.getInternalName();
            } else {
                typeName = type.getDescriptor();
            }
            members.add(new ClassReference.Member(name, access, new ClassReference.Handle(typeName)));
        }
        return super.visitField(access, name, desc, signature, value);
    }
第二步，被观察类若存在多少个field字段，那么visitField()这个方法，就会被调用多少次，每调用一次，就代表一个字段。看实现代码，visitField()方法在被调用时，会通过判断字段的类型去生成typeName类型名称，最后添加到visit()方法中初始化的this.members集合
    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
        boolean isStatic = (access & Opcodes.ACC_STATIC) != 0;
        //找到一个方法，添加到缓存
        discoveredMethods.add(new MethodReference(
                classHandle,//类名
                name,
                desc,
                isStatic));
        return super.visitMethod(access, name, desc, signature, exceptions);
    }
而被观察类若存在多少个方法，那么visitMethod()这个方法，就会被调用多少次，每调用一次，就代表一个方法，看上述代码，可以清楚的看到，其对方法进行了收集，并缓存在this.discoveredMethods中
    @Override
    public void visitEnd() {
        ClassReference classReference = new ClassReference(
                name,
                superName,
                interfaces,
                isInterface,
                members.toArray(new ClassReference.Member[members.size()]));//把所有找到的字段封装
        //找到一个方法遍历完成后，添加类到缓存
        discoveredClasses.add(classReference);
        super.visitEnd();
    }
而在每一个visit*方法被执行后，最后一个执行的方法就是visitEnd()，在这段代码中，把当前的被观察的类信息缓存到了this.discoveredClasses，其中包括前面visitField阶段收集到的所有字段members
至此，MethodDiscovery.discover方法就执行完毕了，而下一步就是MethodDiscovery.save方法的执行
    public void save() throws IOException {
        //保存和读取使用Factory实现
        //classes.dat数据格式：
        //类名(例：java/lang/String) 父类 接口A,接口B,接口C 是否接口 字段1!字段1access!字段1类型!字段2!字段2access!字段1类型
        DataLoader.saveData(Paths.get("classes.dat"), new ClassReference.Factory(), discoveredClasses);
        //methods.dat数据格式：
        //类名 方法名 方法描述 是否静态方法
        DataLoader.saveData(Paths.get("methods.dat"), new MethodReference.Factory(), discoveredMethods);
        //形成 类名(ClassReference.Handle)->类(ClassReference) 的映射关系
        Map classMap = new HashMap<>();
        for (ClassReference clazz : discoveredClasses) {
            classMap.put(clazz.getHandle(), clazz);
        }
        //保存classes.dat和methods.dat的同时，对所有的class进行递归整合，得到集合{class:[subclass]}，
        // class为subclass父类、超类或实现的接口类，保存至inheritanceMap.dat
        InheritanceDeriver.derive(classMap).save();
    }
通过DataLoader.saveData保存了收集到的discoveredClasses类信息以及discoveredMethods方法信息，对于这些信息的存储格式，通过了ClassReference.Factory()、MethodReference.Factory()进行实现
    public static  void saveData(Path filePath, DataFactory factory, Collection values) throws IOException {
        try (BufferedWriter writer = Files.newWriter(filePath.toFile(), StandardCharsets.UTF_8)) {
            for (T value : values) {
                final String[] fields = factory.serialize(value);
                if (fields == null) {
                    continue;
                }
                StringBuilder sb = new StringBuilder();
                for (String field : fields) {
                    if (field == null) {
                        sb.append("\t");
                    } else {
                        sb.append("\t").append(field);
                    }
                }
                writer.write(sb.substring(1));
                writer.write("\n");
            }
        }
    }
saveData方法中会通过调用factory的serialize对数据进行序列化，然后一行一行的输出
    public static class Factory implements DataFactory {
        ...
        @Override
        public String[] serialize(ClassReference obj) {
            String interfaces;
            if (obj.interfaces.length > 0) {
                StringBuilder interfacesSb = new StringBuilder();
                for (String iface : obj.interfaces) {
                    interfacesSb.append(",").append(iface);
                }
                interfaces = interfacesSb.substring(1);
            } else {
                interfaces = "";
            }
            StringBuilder members = new StringBuilder();
            for (Member member : obj.members) {
                members.append("!").append(member.getName())
                        .append("!").append(Integer.toString(member.getModifiers()))
                        .append("!").append(member.getType().getName());
            }
            return new String[]{
                    obj.name,
                    obj.superClass,
                    interfaces,
                    Boolean.toString(obj.isInterface),
                    members.length() == 0 ? null : members.substring(1)
            };
        }
    }
    public static class Factory implements DataFactory {
        ...
        @Override
        public String[] serialize(MethodReference obj) {
            return new String[] {
                    obj.classReference.getName(),
                    obj.name,
                    obj.desc,
                    Boolean.toString(obj.isStatic),
            };
        }
    }
对于类信息的存储，最终形成classes.dat文件的数据格式是：
    类名(例：java/lang/String) 父类 接口A,接口B,接口C 是否接口 字段1!字段1access!字段1类型!字段2!字段2access!字段1类型
对于方法信息的存储，最终形成methods.dat文件的数据格式是：
    类名 方法名 方法描述 是否静态方法
在对类、方法信息存储后，会再进一步利用已得到的类信息，进行类继承、实现关系的整合分析：
    //形成 类名(ClassReference.Handle)->类(ClassReference) 的映射关系
    Map classMap = new HashMap<>();
    for (ClassReference clazz : discoveredClasses) {
        classMap.put(clazz.getHandle(), clazz);
    }
    //保存classes.dat和methods.dat的同时，对所有的class进行递归整合，得到集合{class:[subclass]}，
    // class为subclass父类、超类或实现的接口类，保存至inheritanceMap.dat
    InheritanceDeriver.derive(classMap).save();
核心实现位于InheritanceDeriver.derive方法
    public static InheritanceMap derive(Map classMap) {
        LOGGER.debug("Calculating inheritance for " + (classMap.size()) + " classes...");
        Map> implicitInheritance = new HashMap<>();
        //遍历所有类
        for (ClassReference classReference : classMap.values()) {
            if (implicitInheritance.containsKey(classReference.getHandle())) {
                throw new IllegalStateException("Already derived implicit classes for " + classReference.getName());
            }
            Set allParents = new HashSet<>();
            //获取classReference的所有父类、超类、接口类
            getAllParents(classReference, classMap, allParents);
            //添加缓存：类名 -> 所有的父类、超类、接口类
            implicitInheritance.put(classReference.getHandle(), allParents);
        }
        //InheritanceMap翻转集合，转换为{class:[subclass]}
        return new InheritanceMap(implicitInheritance);
    }
    /**
     * 获取classReference的所有父类、超类、接口类
     *
     * @param classReference
     * @param classMap
     * @param allParents
     */
    private static void getAllParents(ClassReference classReference, Map classMap, Set allParents) {
        Set parents = new HashSet<>();
        //把当前classReference类的父类添加到parents
        if (classReference.getSuperClass() != null) {
            parents.add(new ClassReference.Handle(classReference.getSuperClass()));
        }
        //把当前classReference类实现的所有接口添加到parents
        for (String iface : classReference.getInterfaces()) {
            parents.add(new ClassReference.Handle(iface));
        }
        for (ClassReference.Handle immediateParent : parents) {
            //从所有类数据集合中，遍历找出classReference的父类、接口
            ClassReference parentClassReference = classMap.get(immediateParent);
            if (parentClassReference == null) {
                LOGGER.debug("No class id for " + immediateParent.getName());
                continue;
            }
            //继续添加到集合中
            allParents.add(parentClassReference.getHandle());
            //继续递归查找，直到把classReference类的所有父类、超类、接口类都添加到allParents
            getAllParents(parentClassReference, classMap, allParents);
        }
    }
前面类信息的收集保存，其得到的数据：
    类名(例：java/lang/String) 父类 接口A,接口B,接口C 是否接口 字段1!字段1access!字段1类型!字段2!字段2access!字段1类型
通过这些信息，可以清楚的知道每个类继承的父类、实现的接口类，因此，通过遍历每一个类，并且通过递归的方式，从而一路向上查找收集，最终形成了父子、超类间的关系集合：
    类名 -> 所有的父类、超类、接口类
并在实例化InheritanceMap返回时，在其构造方法中，对关系集合进行了逆向的整合，最终形成了：
    类名 -> 所有的子孙类、实现类
构造方法细节：
    public class InheritanceMap {
        //子-父关系集合
        private final Map> inheritanceMap;
        //父-子关系集合
        private final Map> subClassMap;
        public InheritanceMap(Map> inheritanceMap) {
            this.inheritanceMap = inheritanceMap;
            subClassMap = new HashMap<>();
            for (Map.Entry> entry : inheritanceMap.entrySet()) {
                ClassReference.Handle child = entry.getKey();
                for (ClassReference.Handle parent : entry.getValue()) {
                    subClassMap.computeIfAbsent(parent, k -> new HashSet<>()).add(child);
                }
            }
        }
        ...
    }
最后，对于收集到的继承、实现关系数据，通过调用InheritanceDeriver.save方法，在其内部调用DataLoader.saveData并通过InheritanceMapFactory的序列化方法，对数据进行保存
    public void save() throws IOException {
        //inheritanceMap.dat数据格式：
        //类名 父类或超类或接口类1 父类或超类或接口类2 父类或超类或接口类3 ...
        DataLoader.saveData(Paths.get("inheritanceMap.dat"), new InheritanceMapFactory(), inheritanceMap.entrySet());
    }
    private static class InheritanceMapFactory implements DataFactory>> {
        ...
        @Override
        public String[] serialize(Map.Entry> obj) {
            final String[] fields = new String[obj.getValue().size()+1];
            fields[0] = obj.getKey().getName();
            int i = 1;
            for (ClassReference.Handle handle : obj.getValue()) {
                fields[i++] = handle.getName();
            }
            return fields;
        }
    }
最终保存到inheritanceMap.dat文件中的数据格式：
    类名 父类或超类或接口类1 父类或超类或接口类2 父类或超类或接口类3 ...
### 0x04 方法入参和返回值污点分析-PassthroughDiscovery
在这一小节中，我主要讲解的是PassthroughDiscovery中的代码，该部分也是整个gadgetinspector中比较核心的部分，我在阅读相关代码的时候，通过查看网络上的一些资料、博文，他们对于大体原理的讲解，都分析得比较详细，其中有一篇
在讲这部分代码之前，我想要展示一个代码例子：
    public void main(String args) throws IOException {
        String cmd = new A().method(args);
        Runtime.getRuntime().exec(cmd);
    }
    class A {