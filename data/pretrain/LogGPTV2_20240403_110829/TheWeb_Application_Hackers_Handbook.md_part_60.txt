working systematically through all the entry points for user input that were
identifi ed during application mapping (see Chapter 4) and following these steps:
n Submit a benign alphabetical string in each entry point.
n Identify all locations where this string is refl ected in the application’s
response.
cc1122..iinndddd 445522 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 453
Chapter 12 n Attacking Users: Cross-Site Scripting 453
n For each refl ection, identify the syntactic context in which the refl ected
data appears.
n Submit modifi ed data tailored to the refl ection’s syntactic context, attempt-
ing to introduce arbitrary script into the response.
n If the refl ected data is blocked or sanitized, preventing your script from
executing, try to understand and circumvent the application’s defensive
fi lters.
Identifying Refl ections of User Input
The fi rst stage in the testing process is to submit a benign string to each entry
point and to identify every location in the response where the string is refl ected.
HACK STEPS
1. Choose a unique arbitrary string that does not appear anywhere within
the application and that contains only alphabetical characters and there-
fore is unlikely to be affected by any XSS-specific filters. For example:
myxsstestdmqlwp
Submit this string as every parameter to every page, targeting only one
parameter at a time.
2. Monitor the application’s responses for any appearance of this same
string. Make a note of every parameter whose value is being copied into
the application’s response. These are not necessarily vulnerable, but each
instance identified is a candidate for further investigation, as described in
the next section.
3. Note that both GET and POST requests need to be tested. You should
include every parameter within both the URL query string and the mes-
sage body. Although a smaller range of delivery mechanisms exists for
XSS vulnerabilities that can be triggered only by a POST request, exploita-
tion is still possible, as previously described.
4. In any cases where XSS was found in a POST request, use the “change
request method” option in Burp to determine whether the same attack
could be performed as a GET request.
5. In addition to the standard request parameters, you should test every
instance in which the application processes the contents of an HTTP
request header. A common XSS vulnerability arises in error messages,
where items such as the Referer and User-Agent headers are copied
into the message’s contents. These headers are valid vehicles for deliver-
ing a reflected XSS attack, because an attacker can use a Flash object to
induce a victim to issue a request containing arbitrary HTTP headers.
cc1122..iinndddd 445533 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 454
454 Chapter 12 n Attacking Users: Cross-Site Scripting
Testing Refl ections to Introduce Script
You must manually investigate each instance of refl ected input that you have
identifi ed to verify whether it is actually exploitable. In each location where
data is refl ected in the response, you need to identify the syntactic context of
that data. You must fi nd a way to modify your input such that, when it is copied
into the same location in the application’s response, it results in execution of
arbitrary script. Let’s look at some examples.
Example 1: A Tag Attribute Value
Suppose that the returned page contains the following:
One obvious way to craft an XSS exploit is to terminate the double quota-
tion marks that enclose the attribute value, close the  tag, and then
employ some means of introducing JavaScript, such as a  tag. For
example:
“>
An alternative method in this situation, which may bypass certain input fi lters,
is to remain within the  tag itself but inject an event handler containing
JavaScript. For example:
“ onfocus=”alert(1)
Example 2: A JavaScript String
Suppose that the returned page contains the following:
Here, the input you control is being inserted directly into a quoted string
within an existing script. To craft an exploit, you could terminate the single
quotation marks around your string, terminate the statement with a semicolon,
and then proceed directly to your desired JavaScript:
‘; alert(1); var foo=’
Note that because you have terminated a quoted string, to prevent errors
from occurring within the JavaScript interpreter you must ensure that the
script continues gracefully with valid syntax after your injected code. In this
example, the variable foo is declared, and a second quoted string is opened. It
will be terminated by the code that immediately follows your string. Another
method that is often effective is to end your input with // to comment out the
remainder of the line.
cc1122..iinndddd 445544 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 455
Chapter 12 n Attacking Users: Cross-Site Scripting 455
Example 3: An Attribute Containing a URL
Suppose that the returned page contains the following:
Click here ...
Here, the string you control is being inserted into the href attribute of an 
tag. In this context, and in many others in which attributes may contain URLs,
you can use the javascript: protocol to introduce script directly within the
URL attribute:
javascript:alert(1);
Because your input is being refl ected within a tag attribute, you can also inject
an event handler, as already described.
For an attack that works against all current browsers, you can use an invalid
image name together with an onclick event handler:
#”onclick=”javascript:alert(1)
TIP As with other attacks, be sure to URL-encode any special characters that
have signifi cance within the request, including & = + ; and space.
HACK STEPS
Do the following for each refl ected input identifi ed in the previous steps:
1. Review the HTML source to identify the location(s) where your unique
string is being reflected.
2. If the string appears more than once, each occurrence needs to be treated
as a separate potential vulnerability and investigated individually.
3. Determine, from the location within the HTML of the user-controllable
string, how you need to modify it to cause execution of arbitrary script.
Typically, numerous different methods will be potential vehicles for an
attack, as described later in this chapter.
4. Test your exploit by submitting it to the application. If your crafted string
is still returned unmodified, the application is vulnerable. Double-check
that your syntax is correct by using a proof-of-concept script to display an
alert dialog, and confirm that this actually appears in your browser when
the response is rendered.
Probing Defensive Filters
Very often, you will discover that the server modifi es your initial attempted
exploits in some way, so they do not succeed in executing your injected script.
cc1122..iinndddd 445555 88//1199//22001111 1122::1122::2288 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 456
456 Chapter 12 n Attacking Users: Cross-Site Scripting
If this happens, do not give up! Your next task is to determine what server-
side processing is occurring that is affecting your input. There are three broad
possibilities:
n The application (or a web application fi rewall protecting the application)
has identifi ed an attack signature and has blocked your input.
n The application has accepted your input but has performed some kind of
sanitization or encoding on the attack string.
n The application has truncated your attack string to a fi xed maximum length.
We will look at each scenario in turn and discuss various ways in which the
obstacles presented by the application’s processing can be bypassed.
Beating Signature-Based Filters
In the fi rst type of fi lter, the application typically responds to your attack string
with an entirely different response than it did for the harmless string. For
example, it might respond with an error message, possibly even stating that a
possible XSS attack was detected, as shown in Figure 12-8.
Figure 12-8: An error message generated by ASP.NET’s anti-XSS filters
If this occurs, the next step is to determine what characters or expressions
within your input are triggering the fi lter. An effective approach is to remove
different parts of your string in turn and see whether the input is still being
blocked. Typically, this process establishes fairly quickly that a specifi c expres-
sion such as  is causing the request to be blocked. You then need to
test the fi lter to establish whether any bypasses exist.
There are so many different ways to introduce script code into HTML pages
that signature-based fi lters normally can be bypassed. You can fi nd an alternative
cc1122..iinndddd 445566 88//1199//22001111 1122::1122::2299 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 457
Chapter 12 n Attacking Users: Cross-Site Scripting 457
means of introducing script, or you can use slightly malformed syntax that
browsers tolerate. This section examines the numerous different methods of
executing scripts. Then it describes a wide range of techniques that can be used
to bypass common fi lters.
Ways of Introducing Script Code
You can introduce script code into an HTML page in four broad ways. We will
examine these in turn, and give some unusual examples of each that may suc-
ceed in bypassing signature-based input fi lters.
NOTE Browser support for different HTML and scripting syntax varies
widely. The behavior of individual browsers often changes with each new
version. Any “defi nitive” guide to individual browsers’ behavior is therefore
liable to quickly become out of date. However, from a security perspective,
applications need to behave in a robust way for all current and recent versions
of popular browsers. If an XSS attack can be delivered using only one specifi c
browser that is used by only a small percentage of users, this still constitutes
a vulnerability that should be fi xed. All the examples given in this chapter
work on at least one major browser at the time of writing.
For reference purposes, this chapter was written in March 2011, and the
attacks described all work on at least one of the following:
n Internet Explorer version 8.0.7600.16385
n Firefox version 3.6.15
Script Tags
Beyond directly using a  tag, there are various ways in which you can
use somewhat convoluted syntax to wrap the use of the tag, defeating some fi lters:
Click here
The Base64-encoded string in the preceding examples is:
Event Handlers
Numerous event handlers can be used with various tags to cause a script to
execute. The following are some little-known examples that execute script
without requiring any user interaction:
cc1122..iinndddd 445577 88//1199//22001111 1122::1122::2299 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 458
458 Chapter 12 n Attacking Users: Cross-Site Scripting
HTML5 provides a wealth of new vectors using event handlers. These include
the use of the autofocus attribute to automatically trigger events that previously
required user interaction:
...
It allows event handlers in closing tags:
Finally, HTML5 introduces new tags with event handlers:
Script Pseudo-Protocols
Script pseudo-protocols can be used in various locations to execute inline script
within an attribute that expects a URL. Here are some examples:
Although the javascript pseudo-protocol is most commonly given as an
example of this technique, you can also use the vbs protocol on Internet Explorer
browsers, as described later in this chapter.
As with event handlers, HTML5 provides some new ways of using script
pseudo-protocols in XSS attacks:
The new event-source tag is of particular interest when targeting input fi lters.
Unlike any pre-HTML5 tags, its name includes a hyphen, so using this tag may
bypass legacy regex-based fi lters that assume tag names can contain only letters.
cc1122..iinndddd 445588 88//1199//22001111 1122::1122::2299 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 459
Chapter 12 n Attacking Users: Cross-Site Scripting 459
Dynamically Evaluated Styles
Some browsers support the use of JavaScript within dynamically evaluated
CSS styles. The following example works on IE7 and earlier, and also on later
versions when running in compatibility mode:
Later versions of IE removed support for the preceding syntax, on the basis
that its only usage in practice was in XSS attacks. However, on later versions of
IE, the following can be used to the same effect:
The Firefox browser used to allow CSS-based attacks via the moz-binding
property, but restrictions made to this feature mean that it is now less useful
in most XSS scenarios.
Bypassing Filters: HTML
The preceding sections described numerous ways in which script code can be
executed from within an HTML page. In many cases, you may fi nd that signature-
based fi lters can be defeated simply by switching to a different, lesser-known
method of executing script. If this fails, you need to look at ways of obfuscating
your attack. Typically you can do this by introducing unexpected variations
in your syntax that the fi lter accepts and that the browser tolerates when the
input is returned. This section examines the ways in which HTML syntax can
be obfuscated to defeat common fi lters. The following section applies the same
principles to JavaScript and VBScript syntax.
Signature-based fi lters designed to block XSS attacks normally employ regular
expressions or other techniques to identify key HTML components, such as tag
brackets, tag names, attribute names, and attribute values. For example, a fi lter
may seek to block input containing HTML that uses specifi c tag or attribute
names known to allow the introduction of script, or it may try to block attri-
bute values starting with a script pseudo-protocol. Many of these fi lters can be
bypassed by placing unusual characters at key points within the HTML in a
way that one or more browsers tolerate.
To see this technique in action, consider the following simple exploit:
You can modify this syntax in numerous ways and still have your code execute
on at least one browser. We will examine each of these in turn. In practice, you
may need to combine several of these techniques in a single exploit to bypass
more sophisticated input fi lters.
cc1122..iinndddd 445599 88//1199//22001111 1122::1122::2299 PPMM
Stuttard c12.indd V2 - 08/10/2011 Page 460
460 Chapter 12 n Attacking Users: Cross-Site Scripting
The Tag Name
Starting with the opening tag name, the most simple and naïve fi lters can be
bypassed simply by varying the case of the characters used:
Going further, you can insert NULL bytes at any position:
(In these examples, [%XX] indicates the literal character with the hexadecimal
ASCII code of XX. When submitting your attack to the application, generally you
would use the URL-encoded form of the character. When reviewing the applica-
tion’s response, you need to look for the literal decoded character being refl ected.)
TIP The NULL byte trick works on Internet Explorer anywhere within the
HTML page. Liberal use of NULL bytes in XSS attacks often provides a quick
way to bypass signature-based fi lters that are unaware of IE’s behavior.
Using NULL bytes has historically proven effective against web applica-
tion fi rewalls (WAFs) confi gured to block requests containing known attack
strings. Because WAFs typically are written in native code for performance
reasons, a NULL byte terminates the string in which it appears. This prevents
the WAF from seeing the malicious payload that comes after the NULL (see
Chapter 16 for more details).
Going further within tag names, if you modify the example slightly, you can
use arbitrary tag names to introduce event handlers, thereby bypassing fi lters
that merely block specifi c named tags:
Click here
In some situations, you may be able to introduce new tags with various names
but not fi nd any means of using these to directly execute code. In these situa-
tions, you may be able to deliver an attack using a technique known as “base tag
hijacking.” The  tag is used to specify a URL that the browser should use
to resolve any relative URLs that appear subsequently within the page. If you can
introduce a new  tag, and the page performs any  includes after