在本节中，您将安装让我们加密临时证书颁发者。一个证书可以由多个发行人发行。 **letsencrypt-staging** 例如，用于测试目的。在构建测试时，您将使用登台服务器。证书颁发者的代码已在**证书颁发者. yaml** 文件的本章源代码中提供。像往常一样，使用**kube CTL create-f certificate-issuer . YAML**；YAML 文件包含以下内容:
1 版本:cert-manager.io/v1
2 类:发行人
3 元数据:
4 名称:letsencrypt-staging
5 规格:
6 极致:
7 服务器:https://acme-staging-v02.api.letsencrypt.org/directory
8 邮件:
9 privateKeySecretRef:
10 名称:letsencrypt-staging
11 个解决方案:
12 - http01:
13 入口:
14 类:azure/应用网关
让我们看看我们在这里定义了什么:
*   **第 1-2 行**:这里，你指向**证书管理器**创建的其中一个 CRD。在这种情况下，具体来说，你指向**发行人**对象。颁发者是您的 Kubernetes 集群和创建证书的实际证书颁发机构之间的链接，在这种情况下是“让我们加密”。
*   **第 6-10 行**:这里提供了我们加密的配置，指向暂存服务器。
*   **第 11-14 行**:这是 ACME 客户端认证域所有权的附加配置。您将“让我们加密”指向 Azure 应用网关入口，以验证您拥有稍后将请求证书的域。
安装证书颁发者后，您现在可以继续下一步:在入口上创建 TLS 证书。
### 创建 TLS 证书并保护入口
在本节中，您将创建一个顶级域名证书。有两种方法可以配置**证书管理器**来创建证书。您可以手动创建证书并将其链接到入口，也可以配置入口控制器，因此**证书管理器**会自动创建证书。
在本例中，您将使用后一种方法配置您的入口。
1.  To start, edit the ingress to look like the following YAML code. This file is present in the source code on GitHub as **ingress-with-tls.yaml**:
    1 版本:networking.k8s.io/v1
    2 种:入口
    3 元数据:
    4 名称:简单前端入口
    5 个注释:
    6 kubernetes.io/ingress.class: azure/应用网关
    7 cert-manager.io/issuer:莱森地穴-分期
    8 cert-manager.io/acme-challenge-type: http 01
    9 规格:
    10 条规则:
    11 - http:
    12 条路径:
    13 -路径:/
    14 路径类型:前缀
    15 后端:
    16 服务:
    17 名称:前端
    18 端口:
    19 号:80
    20 主机:。 .cloudapp.azure.com
    21 个顶级域名:
    22 台主机:
    23 - 。 .cloudapp.azure.com
    24 secretName:前端 tls
    您应该对原始入口进行以下更改:
    *   **第 7-8 行**:您向入口添加了两个附加注释，指向证书颁发者和**极致挑战**以证明域所有权。
    *   **第 20 行**:此处添加入口的域名。这是必需的，因为“让我们加密”只为域颁发证书。
    *   **21-24 线**:这是入口的 TLS 配置。它包含主机名以及将被创建来存储证书的机密的名称。
2.  You can update the ingress you created earlier with the following command:
    立方结构 apply-f entry-with-TLS . YAML
    请求证书并配置入口使用该证书需要**证书管理器**大约一分钟的时间。在您等待的同时，让我们来看看**证书管理器**代表您创建的中间资源。
3.  First off, **cert-manager** created a **certificate** object for you. You can look at the status of that object using the following:
    kubectl 获取证书
    该命令将产生如图 6.9 所示的输出:
    ![Output displaying the status of the certificate object  with ready as false](img/B17338_06_09.jpg)
    图 6.9:证书对象的状态
4.  As you can see, the certificate isn't ready yet. There is another object that **cert-manager** created to actually get the certificate. This object is **certificaterequest**. You can get its status by using the following command:
    忽必烈获得证书 quest
    这将产生如图 6.10 所示的输出:
    ![Output displaying the status of the certificaterequest object as False](img/B17338_06_10.jpg)
    图 6.10:certificate request 对象的状态
    您也可以通过针对**证书请求**对象发出**描述**命令来获取请求的更多详细信息:
    kubectl 描述证书请求
    当您等待证书颁发时，状态将类似于*图 6.11* :
    ![Output displaying additional details about the certificaterequest object  showing that cert-manager is waiting on certificate issuance](img/B17338_06_11.jpg)
    图 6.11:使用 kube CTL description 命令获取 certificaterequest 对象的详细信息
    如您所见， **certificaterequest** 对象向您显示订单已经创建并且正在等待处理。
5.  After a couple of additional seconds, the **describe** command should return a successful certificate creation message. Run the following command to get the updated status:
    kubectl 描述证书请求
    该命令的输出如*图 6.12* 所示:
    ![Output displaying the successful certificate creation message](img/B17338_06_12.jpg)
    图 6.12:颁发的证书
    现在，这将使前端入口能够通过 HTTPS 提供服务。
6.  让我们在浏览器中通过浏览到您在*创建新的应用网关*部分中创建的域名来尝试一下。根据浏览器的缓存，您可能需要在网址前面添加 **https://** 。
7.  一旦到达入口，它将在浏览器中指示一个错误，显示证书无效，类似于*图 6.13* 。这是意料之中的，因为您正在使用“让我们加密”分段服务器:
![Using the Let's Encrypt staging server, the certificate isn't trusted by default](img/B17338_06_13.jpg)
图 6.13:使用我们加密临时服务器，默认情况下证书是不可信的
您可以通过点击**高级**并选择**继续**来浏览您的应用。
在本节中，您成功地向入口添加了一个 TLS 证书，以保护其流量。由于您能够使用临时证书完成测试，现在您可以进入生产系统了。
### 从准备阶段切换到生产阶段
在本节中，您将从临时证书切换到生产级证书。为此，您可以通过在集群中创建新的颁发者来重复前面的练习，如下所示(作为本书代码示例的一部分，在**证书颁发者-prod.yaml** 中提供)。不要忘记在文件中更改您的电子邮件地址。该文件中包含以下代码:
1 版本:cert-manager.io/v1alpha2
2 类:发行人
3 元数据:
4 名称:letsencrypt-prod
5 规格:
6 极致:
7 服务器:https://acme-v02.api.letsencrypt.org/directory
8 邮件:
9 privateKeySecretRef:
10 名称:letsencrypt-prod
11 个解决方案:
12 - http01:
13 入口:
14 类:azure/应用网关
然后，用 **letsencrypt-prod** 替换**with-TLS . YAML**文件中对发行人的引用，如图所示(在**with-TLS-prod . YAML**文件中提供):
1 版本:networking.k8s.io/v1
2 种:入口
3 元数据:
4 名称:简单前端入口
5 个注释:
6 kubernetes.io/ingress.class: azure/应用网关
7 cert-manager.io/issuer:·莱特森墓穴产品
8 cert-manager.io/acme-challenge-type: http 01
9 规格:
10 条规则:
11 - http:
12 条路径:
13 -路径:/
14 路径类型:前缀
15 后端:
16 服务:
17 名称:前端
18 端口:
19 号:80
20 主机:。 .cloudapp.azure.com
21 个顶级域名:
22 台主机:
23 - 。 .cloudapp.azure.com
24 secretName:前端制造 tls
要应用这些更改，请执行以下命令:
kubectl create -f 证书-颁发者-prod.yaml
立方结构 apply-f entry-with-TLS-prod . YAML
证书再次激活大约需要一分钟。新证书颁发后，您可以再次浏览到您的域名，并且不会再看到任何关于无效证书的警告。如果单击浏览器中的挂锁图标，您应该会看到您的连接是安全的，并且使用了有效的证书:
![The web page displaying a valid certificate](img/B17338_06_14.jpg)
图 6.14:显示有效证书的网页
在本节中，您已经学习了如何向入口添加 TLS 支持。您可以通过安装**证书管理器** Kubernetes 插件来做到这一点。**证书管理器**从我们加密获得了一个免费证书，并将其添加到应用网关上部署的现有入口中。这里描述的过程并不特定于 Azure 和 Azure 应用网关。将顶级域名添加到入口的过程也适用于其他入口控制器。
让我们删除您在本章中创建的资源:
kube CTL delete-f[https://github . com/jet stack/cert-manager/releases/download/v 1 . 1 . 0/cert-manager . YAML](https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager.yaml)
az aks 禁用-addons -n 握手\
-g rg-hand onaks-a 入口-appgw
## 总结
在本章中，您将 HTTPS 安全性添加到留言簿应用中，而没有实际更改源代码。您首先设置了一个新的应用网关，并在 AKS 上配置了 AGIC。这使您能够创建可以在应用网关上配置的 Kubernetes 入口。
然后，您安装了一个证书管理器，它与我们加密应用编程接口接口，为我们随后指定的域名请求证书。您利用证书颁发者从“让我们加密”中获取证书。然后，您重新配置入口，向群集中的这个颁发者请求证书。使用证书管理器和入口的这些功能，您现在可以使用 TLS 保护您的网站。
在下一章中，您将学习如何监控部署和设置警报。您还将学习如何在错误发生时快速识别根本原因，以及如何调试在 AKS 上运行的应用。同时，一旦您确定了根本原因，您将学会如何执行正确的修复。