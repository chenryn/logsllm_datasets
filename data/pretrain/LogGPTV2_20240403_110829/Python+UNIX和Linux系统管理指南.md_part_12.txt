def
return None
return None
def
def
"my baz function"""
pass
init_(self):
init_(self):
Bar class"""
www.TopSage.com
IPython | 65
PDG
---
## Page 80
我们可以查找所有以a、b、c开头的对象，例如：
让我们从声明下面的对象开始：
能够快速替换psearch函数的方法就是使用问号（?）操作符，下面是一个示例：
注意，这里能够查到所有的对象，而不仅是a、aa、b、bb、c、cc，并且都是内建对象。
66丨·第2章
In [6]: cc = "three"
In [4]: bb = "two"
In [3]: b = 2
In [2]: aa = "one"
In [7]: psearch a*
In[5]:c= 3
In [1]:a=1
In [9]: psearch c*
buffer
bool
basestring
In [8]: psearch b*
apply
In [3]: psearch os.li*
In[2]:importos
copyright
coerce
classmethod
callable
b
os.listdir
credits
complex
compile
os.linesep
cmp
.link
www.TopSage.com
---
## Page 81
解释器运行而不是从另外一个模块引人的。
是一个指定的变量，表示模块的名称。如果_name_是“_
这里出现的_和_objects是IPython的缩略表示，表示之前的返回结果。
接下来是对字符串的搜索：
psearch函数允许搜索指定类型的对象。这里搜索user命名空间中的整数类型对象。
这些结果不包括内建的命名空间：
builtin和user仍会得到我们想要的结果。在这个示例中，搜索又执行了一次。注意，
有意义。psearch的默认搜索路径是builtin和user，所以如果我们指定-s user，搜索
-e builtin选项给psearch能够排除对内建空间的搜索。这似乎有点违反常规，但非常
默认情况下，psearch搜索builtin和user空间。如果只是明确地对用户进行搜索，传递
是内建的命名空间。命名空间包括builtin、user、user_global、internal和alias。
psearch在执行搜索操作时可以使用-s选项，排除搜索时可以使用-e选项，搜索的范围
除了psearch，还可以使用*？。
In [14]: psearch -e builtin * string
In [13]: psearch -e builtin * int
In [12]: psearch -e builtin c*
In [11]: psearch -e builtin b*
In [1o]: psearch -e builtin a*
os.listdir
os.link
os.linesep
In [4]: os.li*?
www.TopSage.com
"_main_"
，这表示模块是从
_name_object
IPython | 67
PDG
---
## Page 82
接下来是一个基于对象类型进行过滤的示例：
who_1s函数与who函数十分相似，但who_ls函数返回的是一个列表而不是所匹配变量的
的对象。可以使用who函数对类型进行过滤，例如：
who函数的使用非常直接明了，我们得到了一个返回的简单列表，包括了所有交互定义
前的一个示例，其中通过who函数显示变量a、aa、b、bb、C、cc：
IPython还提供了一些能够列出所有交互式对象的方法。第一个就是who函数。下面是之
名称。下面是一个示例，演示了没有参数的who_ls函数：
who_ls
who
8
次的输出”
由于who_ls返回名称列表，可以使用_variable访问名称列表，但这仅是针对“最后一
[,∞），‘,）.‘,qq.‘,q.‘,ee，‘,e,]:[8t]ano
In [18]: who_ls
In [16]: who int
In [15]:who
In [21]: for n in _:
Out[20]: ['aa',‘bb', ‘cc']
In [20]: who_ls str
Out[19]:['a'，'b'，'c']
In [19]:who_ls int
7啊吧
.....
.....
第2章
bb
aa
下面是循环显示上次返回的匹配变量名称列表的示例：
print n
CC
b
bb
www.TopSage.com
n
CC
PDG
---
## Page 83
在IPython中，有两种方式可以访问输人的命令历史（History）。第一种是基于行
接下来，正如在who示例中所做的那样，使用whos根据类型进行过滤：
whos函数的一个示例，其中使用了非命令行参数：
whos函数与who函数非常相似，只是whos打印输出详细信息，而who不打印输出。下面是
不会有任何麻烦。下面，我们定义了一些变量，然后向后搜索整个历史。
到目前为止，你已经了解了IPython许多非常酷的特性，这些特性是在面向行的应用中常
行支持（readine support)
历史
whos
常会用得上的。如果习惯于使用Ctrl-s搜索Bash历史，在IPythoh中使用相同的功能时就
(readine-based）的方式，第二种是基于hist函数的方式。
In [4]: d = dict(foo=foo, bar=bar, bam=bam)
In[3]:bam=3
In [2]: bar = 2
In [1]:foo = 1
Variable
In [24]: whos str.
Variabie
In [23]: whos int
n
b
e
In [22]:whos
b
str
int
Type
int
Data/Info
Data/Info
Data/Info
three
one
CC
three
two
two
one
1
www.TopSage.com
IPython
691
---
## Page 84
以使用hist代替history。如果不带参数，hist会连续打印用户输入命令的列表。默认
除了具有访问行操作历史的各项功能外，IPython也提供了称为history的历史函数。可
行，Ctrl-nt则是向前移动一行。如果想了解更多的行操作，可以在*nix系统中输人man
Ctrl-h能够向后删除一个字符（相当于backspace）。Ctrl-p将历史记录中的行向后移动一
Ctrl-a让你回到行的开始位置，Ctrl-e让光标跳到行的结尾处。Ctrl-f用于删除字符，
可以通过行（readline）操作来完成更多的内容，但这里我们只能简单地做一个介绍
In[5]所示。使用行搜索功能，按Ctrl-r，它返回匹配输入的行，如IPython中In[4]所示。
情况下，该列表会被编号。例如设置一些变量，切换目录，然后运行hist命令：
readline进行查看。
首先输入Ctrl-r来启动搜索，然后输入fo作为搜索标准。它返回输入的行，如IPython中
如果希望去掉行号，可以使用-n选项。下面是hist命令使用-n选项的示例：
如何通过Ipython调用magic()函数的过程。
在历史列表的第4和第5项是magic函数。注意，它们已经被IPython修改过。你可以看到
hist命令（histcommand）
70
In [1]: fo0o = 1
(reverse-i-search)fo':d= dict(foo=foo,bar=bar,bam=bam)
In [6]: 
In [5]:dict2= dict(d=d,foo=foo)
In[4]:cd/tmp
In [3]: bam = 3
In [2]: bar = 2
5：
In [5]:hist
(reverse-i-search)fo':dict2=dict(d=d,foo=foo)
kIn [6]: hist -n
/tmp
第2章
_ip.magic("hist ")
bam =3
bar = 2
2
www.TopSage.com
PDG
---
## Page 85
配合-g标志对命令历史进行搜索：
IPython的-g标志也提供了一种搜索历史中指定模式的方式。下面的示例使用前面的示例
中添加了“rawhistory”标志后的输出结果：
令。这是默认设置。在下面的示例中使用-t选项输出了到目前为止建立起来的命令历
“raw history”或是选项-r能够准确显示输人了什么。
-t选项返回一个被翻译的命令历史视图，历史命令记录了IPython看到的用户输入的命
如果在IPython中工作时想往文本编辑器中粘贴一段IPython的代码，这将非常有帮助。
9
S
^shadow history ends, fetch by %rep  (must start with o)
0213:hist
0193:hist
0189:hist -g
0187:hist
In [9]: hist -g hist
0192:
0188:hist -n
8:hist -r
== start of normal history ===
5：
3:
In [8]:hist -r
_ip.magic("hist -n")
_ip.magic("cd /tmp")
_ip.magic("hist -t")
hist -t
hist -n
hist
cd /tmp
_ip.magic("hist -t")
bam=3
bar = 2
-ip.magic("hist -n")
_ip.magic("hist
bam = 3
hist
-t
-h
hist
foo
import
www.TopSage.com
下面的示例显示了在之前的示例
t
| uoundl 
ODG
---
## Page 86
中输出了foo，便可以使用“_”在In[4]中获得结果。在In[5]中，能够将结果保存到变
示了_函数在IPython中是如何工作的：
史。第一种实现此用途的方法是使用“_”标志，这表示“上次输出”
在Python和IPython中，不仅可以访问曾经输入的命令历史列表，而且可以访问结果的历
历史结果（Historyresults）
史结果被保存在结果集的最后，但不以0开始。
一个命令的历史。“shadowhistory”从o开始显示在结果集的起始部分。来自会话的历
注意，之前的示例中返回了“shadow history”
72|第2章
下面是使用标准Pythonshell运行相同示例的情形：
量a中。
当我们在In[1]中定义了foo，在In[2]中的“_”返回了一个空字符串。当我们在In[3]
Out[6]: ‘foo_string'
In [1]: foo = "foo_string"
>>> foo = "foo_string"
In [6]: a
Out[4]:‘foo_string'
In[4]:
Out[3]: 'foo_string'
In [3]:foo
Out[2]:'!
'foo_string'
In [2]:
>>
'foo_string'
NameError:name
Traceback (most recent call last):
>>>
: _ip.magic("hist -r")
is not defined
www.TopSage.com
一词。shadow history是包括你输入的每
。下面的示例展
展
---
## Page 87
的Out[1]，Out [2]和Out [3]。
现在，apache_list，element_tree_list和tests包括了相同的元素，分别对应输出中
首先使用_1，_2和_3访问了Out[1-3]。接下来，为每一项添加一个更为明确的名字:
为了说明这一点，我们首先列出文件，但不对输出做任何处理：
法方式输出的结果。数字必须与想看到的Out[0-9]*结果相对应。
随后使用！!的结果。简言之，可以访问任何使用下划线之后跟随任一数字_[0-9]*的语
们描述了如何使用！和！!操作符，并且说明了不能将！！的结果保存到变量中，但是可以
IPython在使用“上一次输出”的概念时更进一步：在本书“Shell的执行”部分中，我
结果与标准Python shell的结果是非常相似的。
可以看到，除了在试图访问“_”时输出了名字错误（NameError）异常，在IPython中的
1:elementtree_tomcat_users.py