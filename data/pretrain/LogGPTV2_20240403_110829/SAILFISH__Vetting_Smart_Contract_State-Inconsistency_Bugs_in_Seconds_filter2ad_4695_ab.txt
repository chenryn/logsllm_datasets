Ethereum protocol allows B to call back to any public/external
method m of A in the same transaction before even finishing
the original invocation. An attack happens when B reenters A
in an inconsistent state before A gets the chance to update its
internal state in the original call. Launching an attack executes
operations that consume gas. Though, SOLIDITY tries to prevent
such attacks by limiting the gas stipend to 2,300 when the call
is made through send and transfer APIs, the call opcode
puts no such restriction—thereby making the attack possible.
In Figure 1a, the withdraw method transfers Ethers to
a user if their account balance permits, and then updates the
account accordingly. From the external call at Line 4, a malicious
user (attacker) can reenter the withdraw method of the Bank
contract. It makes Line 3 read a stale value of the account
balance, which was supposed to be updated at Line 5 in the
original call. Repeated calls to the Bank contract can drain it
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
162
1
2
3
4
5
6
7
c o n t r a c t Queue {
f u n c t i o n r e s e r v e ( u i n t 2 5 6 s l o t ) {
i f
( s l o t s [ s l o t ] == 0 ) {
s l o t s [ s l o t ] = msg . s e n d e r ;
}
}
}
(b)
;
(a)
c o n t r a c t Bank {
f u n c t i o n withdraw ( u i n t amount ) {
i f ( a c c o u n t s [ msg . s e n d e r ] >= amount ) {
msg . s e n d e r . c a l l . v a l u e ( amount ) ;
a c c o u n t s [ msg . s e n d e r ] −= amount
1
2
3
4
5
6
7
8
}
}
}
Fig. 1: In Figure 1a, the accounts mapping is updated after the
external call at Line 4 . This allows the malicious caller to reenter the
withdraw() function in an inconsistent state. Figure 1b presents
a contract that implements a queuing system that reserves slots on a
ﬁrst-come-ﬁrst-serve basis leading to a potential TOD attack.
out of Ethers, because the sanity check on the account balance at
Line 3 never fails. One such infamous attack, dubbed “TheDAO”
[11], siphoned out over USD $50 million worth of Ether from
a crowd-sourced contract in 2016.
Though the example presented above depicts a typical
reentrancy attack scenario, such attacks can occur in a more
convoluted setting, e.g., cross-function, create-based, and
delegate-based, as studied in prior work [50]. A cross-function
attack spans across multiple functions. For example, a function
f1 in the victim contract A issues an untrusted external call,
which transfers the control over to the attacker B. In turn, B
reenters A, but through a different function f2. A delegate-based
attack happens when the victim contract A delegates the control
to another contract C, where contract C issues an untrusted
external call. In case of a create-based attack, the victim contract
A creates a new child contract C, which issues an untrusted
external call inside its constructor.
Transaction Order Dependence (TOD). Every Ethereum
transaction specifies the upper limit of the gas amount one is
willing to spend on that transaction. Miners choose the ones
offering the most incentive for their mining work, thereby
inevitably making the transactions offering lower gas starve
for an indefinite amount of time. By the time a transaction T1
(scheduled at time t1) is picked up by a miner, the network
and the contract states might change due to another transaction
T2 (scheduled at time t2) getting executed beforehand, though
t1  amount) {
//[Step 1]: Enter when mutex is false
//[Step 4]: Early return, since mutex is true
if (mutex == false) {
1 function withdrawBalance(uint amount) public {
2
3
4
5
6
7
8
9
10
11
12
13
14 }
15
16 function transfer(address to, uint amt) public {
17
18
19
20
21
22
23
24
25 }
Fig. 3: Line 6 sets mutex to true, which prohibits an attacker from
reentering by invalidating the path condition (Line 4).
(Figure 2), because it would not set any lock due to the absence
of any control-flow deciding state variable 1.
mutex = true;
if (userBalance[msg.sender] > amt) {
userBalance[to] += amt;
userBalance[msg.sender] -= amt;
}
mutex = false;
if (mutex == false) {
Our solution: To mitigate the state-explosion issue inherent
in static techniques, SAILFISH performs a taint analysis from
the arguments of a public method to the CALL instructions to
consider only those external calls where the destination can be
controlled by an attacker. Also, we keep our analysis tractable
by analyzing public functions in pairs, instead of modeling an
arbitrarily long call-chain required to synthesize exploits.
Hazardous access. Most tools apply a conservative policy,
and report a read/write from/to a state variable following an
external call as a possible reentrancy attack. Since this pattern
alone is not sufficient to lead the contract to an inconsistent
state, they generate a large number of false positives. Example 1
(Figure 2) without the updateSplit method is not vulnerable,
since splits[id] cannot be modified any more. However,
MYTHRIL, OYENTE, and VANDAL flag the modified example
as vulnerable, due to the conservative detection strategies they
adopt, as discussed before.
Our solution: We distinguish between benign and vulnerable
reentrancies, i.e., reentrancy as a feature vs. a bug. We only
consider reentrancy to be vulnerable if it can be leveraged to
induce a state-inconsistency (SI). Precisely, if two operations
(a) operate on the same state variable, (b) are reachable from
public methods, and (c) at-least one is a write—we call these
two operations a hazardous access pair. The notion of hazardous
access unifies both Stale Read (SR), and Destructive Write
(DW). SAILFISH performs a lightweight static analysis to detect
such hazardous accesses. Since the modified Example 1 (without
the updateSplit) presented above does not contain any
hazardous access pair, we do not flag it as vulnerable.
Scalability. Any SOLIDITY method marked as either public
or external can be called by an external entity any number of
1A recent extension [18] of SEREUM adds support for unconditional
reentrancy attacks by tracking data-ﬂow dependencies. However, they only
track data-ﬂows from storage variables to the parameters of calls. As a result,
even with this extension, SEREUM would fail to detect the attack in Example 1.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:40 UTC from IEEE Xplore.  Restrictions apply. 
164
TABLE I: Comparison of smart-contract bug-finding tools.
Tool