244
33
34
5478
69
509
208
120
1694
117
1342
>7526
3322
2473
>2718
48
202
65
529
Ordinal (50%CEs)
Prio
Baseline
24
105
19
16
4424
58
493
58
>7526
1487
1181
278
60.54
1000.83
1241.26
740.69
NA
1742.08
1434.64
NA
Prio
16.38
581.83
23.21
15.21
3248.11
51.42
481.04
98.27
Fig. 5: Reduced Version of Forward Tracking Graph for Motivating Example.
C. Time Effectiveness
We evaluate the time effectiveness of our proposed method.
To this end, we examine both baseline tracker and PRIO-
TRACKER on 1) attack scenarios and 2) randomly selected
POIs.
a) Attack Cases: First, we would like to see if PRIO-
TRACKER can reach attack-related events in a faster manner.
Also, we expect
to understand in which order these two
trackers explore the causality space and whether anomalies can
be prioritized by PRIOTRACKER. To this end, we ﬁrst acquire
the total elapsed time to reveal 100%, 90% and 50% critical
events for both trackers, and calculate the average elapsed time
for reaching every attack-related event. Then, we retrieve the
ordinals of all discovered events, compute the average ordinal
of all critical events and obtain the ordinal of events, and
analyze which 50%, 90% and 100% of attack traces have been
uncovered.
As illustrated in Table IV and Table V, our results show
that PRIOTRACKER can almost always ﬁnd all critical events
in shorter time within fewer edges. The lower average runtime
and ordinals indicate that our tracker can prioritize and stay
focused on the exploration and analysis of attack traces. In
contrast, baseline tracker may concentrate on attack inves-
tigation in the beginning but
then quickly lose focus and
easily get distracted by environmental noise (i.e., normal
system operations). For instance, in the “passwd-gzip-scp”
case, the baseline system manages to ﬁnd 50% of critical
events within 3.5 minutes and 278 edges, which are still
10
34/34 wget x.x.x.x:80 tar intellectual-property.tar scp ssh sshd intellectual-property.tar sshd sshd bash ftp y.y.y.y:21 sshd dash dash env run-parts run-parts run-parts run-parts run-parts run-parts run-parts run-parts dash dash dash dash uname uname uname dash dash dash uname grep dash dash dash dash grep date dash python2.7 bc cut ldconfig who scp dash dash dash dash find dash dpkg dpkg dash cat dpkg dash dash dash python3.4 cut date stat expr dash dash dash dash dash cat date dash stat gawk date scp cp dash dash known_hosts info_strealer.sh 0/0 1/1 3/2 6/4 10/6 2/3 15/9 23/24 24/22 27/23 36/25 49/26 62/27 121/28 147/29 175/30 206/31 26/32 45/35 motd 35/33 59/85 240/302 243/301 237/300 230/271 163/181 191/81 124/293 Attack Traces Fig. 6: Reduced Version of Forward Tracking Graph for Email Phishing Attack.
Fig. 7: Reduced Version of Forward Tracking Graph for Shellshock Attack.
comparable to 42s and 58 edges for PRIOTRACKER. However,
while PRIOTRACKER eventually ﬁnds all attack traces at the
210th edge in 1 minute 24 seconds, baseline tracker cannot
reach even 90% of traces within one day or 2718 edges. In
the “Phishing Email” attack, however, it takes both trackers
the same number of edges to reach full coverage of attack
traces, and PRIOTRACKER even spends two more seconds to
complete the analysis. This is because this attack ends with
a few seemingly common activities, which are not prioritized
by our tracker. Nevertheless, PRIOTRACKER can discover the
major portion (90%) of this phishing attack twice as fast as
the baseline system. Besides, it merely needs 122 edges to
cover attack traces in the causality graph, whereas the baseline
tracker takes 1400 edges to achieve the same goal.
To gain further insights, we study the visiting order of
causalities in PRIOTRACKER and the baseline tracker in three
cases, i.e., “Data Theft”, “Phishing Email” and “Shellshock”.
Their attack graphs are presented in Figure 5, Figure 6
and Figure 7, respectively. In these graphs, attack traces are
enclosed by dotted lines. Areas with different backgrounds
(e.g., grey or white) correspond to different hosts. Interesting
edges are labeled with two numbers indicating how many
edges are needed to visit them in the baseline tracker and
PRIOTRACKER, respectively. We color-code these labels in the
presentation: red if the corresponding edge is visited earlier
in PRIOTRACKER; blue if it
is visited earlier in baseline
system; green if it bears the same ordinal using both searching
methods.
Data Theft. In the case of motivating example (Figure 5),
PRIOTRACKER immediately pursues the direction that leads to
the sink of data leakage and can cover all the attack causalities
in 31 edges. Our system can focus on attack traces because it
prioritizes the transfer of a single new ﬁle over the spawn of
Linux utilities that are commonly observed. On the contrary,
baseline tracker spends analysis time equally on all causalities
and therefore jumps back and forth between the attack branch
11
…… … … Outlook.exe Excel.exe java.exe java.exe Explorer.exe 7ZG.exe 0.jpg 666.jpg 667.jpg Sqlservr.exe Mal.xls cmd.exe cmd.exe cmd.exe cmd.exe cmd.exe cmd.exe cqwqk.vbs csript.exe gucio.exe gucio.exe cmd.exe osql.exe osql.exe 0/0 3/1 Excel.exe 7/2 2/5 8/7 6/18 13/13 89/209 166/268 7ZG.exe 7ZG.exe 90/1844 91/445 1.jpg 333.jpg 334.jpg 1000.jpg 11/11 634/2316 1318/723 1.dump 88/19 164/20 26/23 55/122 1688/44 1693/34 3278/39 1692/37 1694/38 3280/3280 3281/3281 100/24 SearchProtocolHost.exe 2225/3000 Attack Traces x.x.x.x apache2 bash apache2 bash bash 0/0 0/0 1/1 5/41 nc.traditional 9/42 bash 12/43 bash bash bash bash bash bash bash ls 35/66 ls 39/75 dir 32/55 ls 33/68 cat 34/73 ls 36/70 cat 38/69 39/65 .bash_history cat bash cat cat bash bash bash 52/59 54/93 55/58 56/60 57/81 51/101 53/61 bash 74/94 bash bash wc bash find wc ls ls rm mkdir tar rm ls ls who 102/122 251/9832 3/3 bash 7/8 nc.traditional 11/9 bash 13/10 bash bash bash bash bash bash bash bash bash bash ls 40/78 tar 41/26 data.tar 58/27 bzip2 87/29 44/15 60/16 86/28 cp 91/17 cp 92/18 43/40 /var/www/...bz2 59/19 apache2 88/33 112/34 61/21 data.tar.bz2 ls 42/80 ls 48/71 ls 49/76 ls 50/67 46/79 274/9836 wget data.tar.bz2 11251/35 Attack Traces and normal activities. As a result, for all the attack-related
events, PRIOTRACKER outperforms baseline tracker.
Phishing Email. This attack also involved two hosts. As
illustrated in Figure 6, once the victim Windows host was com-
promised by an email attachment containing malicious Macro,
a malware program (fake java.exe) started and connected to a
SQL Server. It then used the SQL Server to create 71 cmd.exe
processes in order to incrementally craft the malicious script
cqwqk.vbs. Then, this script ﬁle was launched by cscript.exe,
which thus created another malware instance gucio.exe. This
malware process issued two SQL commands on SQL Server
via osql.exe and then received the database dump generated by
these commands.
The noise was introduced by accident. Once the fake
java.exe was written into a directory, a legitimate user opened
the same directory using Explorer and unzipped about 1000
ﬁles into this folder. The shared GUI programs thus became
a bridge for connecting the attack activities to benign events,
which hence became relevant. Unfortunately, again, baseline
tracker lacks the capability of distinguishing anomalies from
common behaviors, and thus cannot purely target attack causal-
ities. Due to the frequent switches between attack and noise,
the baseline tracker cannot reach speciﬁc critical dependencies
until 1600 edges later (e.g., cqwqk.vbs (cid:32) cscript.exe or
cscript.exe (cid:32) gucio.exe).
PRIOTRACKER prefers the dependency java.exe (cid:32)
SqlServr.exe to Explorer.exe (cid:32) 7ZG.exe in terms of
rareness. Fake java.exe is considered special and to be different
from authentic Java program because of its unique path.
Similarly, our system can quickly scan the majority of attack
traces because they are relatively abnormal compared to the
7ZIP program. However, cmd.exe (cid:32) osql.exe is a seemingly
common causality, though it is started by the attacker. As
a result, PRIOTRACKER decides to traverse the benign ﬁle
decompression ﬁrst before it eventually comes back to assess
these two events as the 3280th and 3281th edges.
It is worth noting that although the exact events that issue
SQL query are not discovered at an early stage, their impacts
of dumping and transferring database records have already
been captured as the 19th and 20th edges. This indicates that
attack footprints are pervasively connected, and partial analysis
results are still useful in that they are context clues to infer the
existence of other hidden malice, as long as the majority of
attack traces are covered. This well motivates PRIOTRACKER
which seeks the maximum amount of abnormal activities
before analysis deadline.
Shellshock. In this incident, the attacker launched the Bash
exploits twice. In the ﬁrst round, she simply checked envi-
ronment using Linux utilities without doing serious damage
but at the end of this round, she still erased her footprints by
clearing Bash history. In the second round, she stole sensitive
data. To do this, she archived (tar) and compressed (bzip2)
the ﬁles, transferred (cp) it to Apache directory so that she
can download (wget) it from another host. Again, she cleared
the history of commands. Later, noises were introduced when a
normal user, whose home directory is also /var/www/, opened
new Bash terminals. These terminals would read the modiﬁed
.bash history and forwardly propagated such a causality.
Prior work [4] prunes off all the .bash historys based upon
Fig. 8: Number of Rare Edges Discovered Within 1 Hour for
75 Large Graph Testing Samples.
heuristics and does not track any dependencies beyond this
shared log ﬁle. As a comparison, we address this problem
by quantifying the priority of causalities to be analyzed,
and therefore can automatically deprioritize the normal Bash
activities due to the high fanout of .bash history. In addition,
since .bash history is preserved, further dependencies can still
be examined at a later stage. In this way, we strike a balance
between security and efﬁciency.
As depicted in Figure 7, PRIOTRACKER prioritizes the
investigation of data exﬁltration that happened in one of
attacker-controlled terminals. It prefers the data leakage path
to other launched commands due to two reasons: 1) creation
and transfer of new ﬁles are more unusual than running Linux
utilities; 2) the data exﬁltration path can bring signiﬁcant
further consequences while ls or dir has little future impact.
As a result, PRIOTRACKER can ﬁnd the last hop of attack (i.e.,
wget) after 34 edges. Also, when time permits, PRIOTRACKER
eventually studies all
the normal causalities, such as data
decompression (tar) after around 9800 edges.
In general, since the baseline tracker spends time evenly on
all branches, as the tracking progresses and an exponentially
growing number of dependencies get involved, the baseline
tracker cannot reach the deepest stage of attack before going
through all normal activities. PRIOTRACKER prioritizes the
investigation of anomalies and automatically ﬁnd the major
attack traces in a much more effective and timely manner.
1) Random POI: Next, we hope to understand if PRIO-
TRACKER can identify the maximum amount of uncommon
events within a certain time limit (conﬁgured to be one hour
in our training phase). To this end, we run PRIOTRACKER
and baseline tracker on 75 randomly selected POI which on
average can generate a forward tracking graph of 5,732 edges.
Figure 8 illustrates the number of rare edges for 75 cases,
captured by both trackers within one hour. Here, a“rare” edge
bears a rareness score that is greater than the threshold θ we
set. As depicted in the chart, the red curve representing our
result is always above the blue one for baseline tracker, while
in certain cases, PRIOTRACKER can show up to three orders
of magnitude improvement. This also justiﬁes the effectiveness
of our priority computation and weight selection.
D. Insight into Reference Model
1) Runtime Overhead: PRIOTRACKER performs two addi-
tional queries to compute the priority scores: 1) look-ahead
12
020406080Index100101102103104105# Rare EdgesbaselinePrioTrackerquery and 2) reference model query. Look-ahead query does
not introduce additional runtime overhead in the long run
because query results are cached for future dependency con-
struction. Reference database query, in contrast, may cause
additional I/O overhead, and therefore needs evaluation. To
this end, we record the elapsed time of each query to reference
database. Our result shows that every access merely causes
negligible slowdown, on average 0.95 microseconds.
2) Case Study: We then look into the content of our
reference model and attempt to understand its validity based
upon case studies.
Process Creation. Many models are generated because
of common “forking” relation between parent and child
processes. Particularly, the top ones are caused by mutual
invocation of system processes. For instance, in Windows,
services.exe is the parent of multiple service programs, such
as taskhost.exe and conhost.exe; in Linux, it is common to
see bash forking other terminals, bash and dash, or utili-
ties such as cat, grep, date, etc. Common user programs,
such as python2.7, acrobat.exe, iexplorer.exe, outlook.exe and
chrome.exe, may also bear regular invocation behaviors. Pro-
gram updaters, including dpkg, apt-get, googleupdate.exe and
especially antivirus updater, sesclu.exe (Symantec Endpoint
Security Client LiveUpdate), frequently start subroutines to
acquire new packages manually or automatically.
File Access. A even greater amount of models have been
generated from ﬁle accesses. However,
they become part
of our model not because the ﬁles are popular ones that
commonly read/written by different processes. On the contrary,
they become prevalent mainly due to the popularity of the
processes. For example, on Windows, system processes, such
as svchost.exe, services.exe, taskhost.exe, system.exe frequently
access their libraries, logs, metadata, conﬁgurations, font etc;
antivirus scanners coh64.exe also accesses a list of speciﬁc
ﬁles for detection and management purposes. On the Linux
side, man-db utility may repeatedly access its own database,
indexes and caches, while updatedb.mlocate keeps updating
these cache ﬁles; apt-get reads its conﬁguration very often;
ﬁnd frequently accesses its cached records; python2.7 loads
functions from a list its internal libraries.
File Execution. File execution is a special class of read
operation and bears completely different semantics. Especially,
due to the fundamental difference in design and implementa-
tion, ﬁle execution on Windows is very different from that
on Linux: most of the executed Windows ﬁles are .DLL ﬁles,
which are dynamically loaded by various of system processes,
while Linux usually directly forks a process from an individual
executable ﬁle.
VI. DISCUSSION
1) Context Sensitivity of Reference Model: In this paper, we
only consider the rareness of one event edge. However, given
an event edge, the nature of tracking provides the knowledge
of subsequent events in backtracking and preceding events
in forwardtracking, which can form the context of this event
and be leveraged to differentiate attack-related activities from
normal ones more accurately. Given an event, priority scores
can take its context, i.e., rareness of event edges within its
k-hop neighborhood, into consideration. We will leave it to
future work.
2) Adversarial Setting: Reference scores are naturally re-
silient
to poisoning attacks, since repeated occurrences of
an event on the same host in a week are only considered
once. APT adversaries has limited power in compromising a
sufﬁcient number of hosts and performing the same malicious
behaviors across weeks, which can lead to higher risk of being
detected.
2a) Evasion Using High-fanout Events: We admit that,
as a potential evasion technique, an attacker may attempt to
leverage system causality with high fanout to hide their attack
footprints. However, an attack cannot be launched solely using
dependencies with big fanout. For instance, apache (cid:32) bash