题目
Given an integer n, return the number of trailling zeroes in n!.
Example 1:
Input: 3
output: 0
Explanation: 3! = 6, no trailing zero.
Example 2:
Input: 5
output: 1
Explanation: 5! = 120, one trailing zero.
Note: Your solution should be in logarithmic time complexity.
题目大意
给定一个整数n，返回n！结果尾数中零的数量。说明：你算法的时间复杂度应为O（logn）。
解题思路
·给出一个数n，要求n！末尾0的个数。
·这是一道数学题。计算N的阶乘有多少个后缀0，即计算N！里有多少个10，也是计算N！里有多
少个2和5（分解质因数），最后结果即2的个数和5的个数取较小值。每两个数字就会多一个
质因数2，而每五个数字才多一个质因数5。每5个数字就会多一个质因数5。0-4的阶乘里没有
质因数5，5-9的阶乘里有1个质因数5，10-14的阶乘里有2个质因数5，依此类推。所以0的
个数即为min（阶乘中5的个数和2的个数）。
---
## Page 311
·N!有多少个后缀0，即N!有多少个质因数5。N!有多少个质因数5，即N可以划分成多少组5个
数字一组，加上划分成多少组25个数字一组，加上划分多少组成125个数字一组，等等。即res
=N/5+N/（5^2）+N/（5A3）+...=（（N/5）/5）/5/...。最终算法复杂度为
O(logN)。
代码
package leetcode
func trailingZeroes(n int) int{
if n/5 == 0 {
return 0
return n/5 + trailingzeroes(n/5)
173.BinarySearchTreeIterator
题目
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the
root node of a BST.
Calling next C) will return the next smallest number in the BST.
Example:
15
---
## Page 312
BSTIterator iterator = new BSTIterator(root);
iterator.next();
// return 3
iterator.next();
//return 7
iterator.hasNextO;// return true
iterator.next();
// return 9
iterator.hasNextO;// return true
iterator.next();
// return 15
iterator.hasNextO; // return true
iterator.next(）;
// return 20
iterator.hasNextO ; // return false
Note:
●next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is
the height of the tree.
● You may assume that next O) call will always be valid, that is, there will be at least a next
smallest number in the BST when nextO is called.
题目大意
实现一个二叉搜索树选代器。你将使用二叉搜索树的根节点初始化选代器。调用next）将返回二叉搜索
树中的下一个最小的数。
解题思路
·用优先队列解决即可
代码
package leetcode
import "container/heap"
/★
* Definition for a binary tree node.
* type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*
// BSTIterator define
type BSTIterator struct {
pq
PriorityQueueofInt
count int
---
## Page 313
// Constructorl73 define
func Constructor173(root *TreeNode) BSTIterator {
result, pq := []int{}, PriorityQueueofInt{}
postorder(root, &result)
for _,v := range result {
heap.Push(&pq, v)
bs := BSTIterator(pq: pq, count: len(result)}
return bs
/t@return the next smallest number */
func （this *BSTIterator) Next() int {
this.count--
return heap.Pop(&this.pq) - (int)
/*# @return whether we have a next smallest number */
func (this *BSTIterator) HasNext() bool {
return this.count != 0
/★
* Your BSTIterator object will be instantiated and called as such:
*obj := Constructor(root);
* param_l := obj.Next();
*param_2:= obj.HasNext();
*/
type PriorityQueueofInt []int
func (pq PriorityQueueofInt) Len() int {
return 1en (pq)
func (pq PriorityQueueofInt) Less(i, j int) bool{
return pq[i]  RIGHT -> DOwN -> DOwN.
-2 (K)
-3
-5
-10
1
10
30
-5 (P)
Note:
●The knight's health has no upper bound.
●Any room can contain threats or power-ups, even the first room the knight enters and the
bottom-right room where the princess is imprisoned.
---
## Page 315
题目大意
些恶魔抓住了公主（P）并将姬关在了地下城的右下角。地下城是由M×N个房间组成的二维网格
我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至0或以下，他会立即死亡。
有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑
土将损失健康点数）；其他房间要么是空的（房间里的值为0），要么包含增加骑士健康点数的魔法球
（若房间里的值为正整数，则表示骑土将增加健康点数）。
为了尽快到达公主，骑土决定每次只向右或向下移动一步。编写一个函数来计算确保骑士能够拯救到公
主所需的最低初始健康点数。
说明：
●骑土的健康点数没有上限。
·任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角
房间以及公主被监禁的右下角房间。
解题思路
·在二维地图上给出每个格子扣血数，负数代表扣血，正数代表补血。左上角第一个格子是起点，右
下角最后一个格子是终点。问骑士初始最少多少血才能走完迷宫，顺利营救位于终点的公主。需要
注意的是，起点和终点都会对血量进行影响。每到一个格子，骑士的血都不能少于1，一旦少于1
点血，骑士就会死去。
·这一题首先想到的解题思路是动态规划。从终点逆推回起点。dp[i[j]代表骑土进入坐标为
（i,j）的格子之前最少的血量值。那么dp[m-1][n-1]应该同时满足两个条件，dp[m-1][n-
1]+dungeon[m-1][n-1]≥1并且dp[m-1][n-1]≥1，由于这两个不等式的方向是相同
的，取交集以后，起决定作用的是数轴最右边的数，即max（1-dungeon[m-1][n-1]，1）。算
出dp[m-1][n-1]以后，接着可以推出dp[m-1][i]这一行和dp[i][n-1]这一列的值。因为
骑士只能往右走和往下走。往回推，即只能往上走和往左走。到这里，DP的初始条件都准备好
了。那么状态转移方程是什么呢？分析一般的情况，dp[i][j]这个值应该是和dp[i+1][j]和
dp[i][j+1]这两者有关系。即dp[i][j]经过自己本格子的扣血以后，要能至少满足下一行和
右一列格子血量的最少要求。并且自己的血量也应该≥1。即需要满足下面这两组不等式。
dp[][]+dungeon[②][]≥dp[i+1][]
[]≥1
dp[][]+dungeon[②][1]≥dp[②][+1]
[≥1
上面不等式中第一组不等式是满足下一行格子的最低血量要求，第二组不等式是满足右一列格子
的最低血量要求。第一个式子化简即 dp[i][j]=max(1，dp[i+1][j]-dungeon[i][j]]，第
二个式子化简即dp[i][j]=max（1，dp[i][j+1]-dungeon[i][j]）。求得了这两种走法的最
低血量值，从这两个值里面取最小，即是当前格子所需的最低血量，所以状态转移方程为dp[i]
[j] = min(max(1, dp[i] [j+1]-dungeon[i] [j]), max(1, dp[i+1] [j]-dungeon[i]
[j])）。DP完成以后，dp[o][o]中记录的就是骑士初始最低血量值。时间复杂度O（m*n)，空
间复杂度O（m*n)。
·这一题还可以用二分搜索来求解。骑士的血量取值范围一定是在[1，+∞）这个区间内。那么二分
这个区间，每次二分的中间值，再用dp在地图中去判断是否能到达终点，如果能，就缩小搜索空
---
## Page 316
间至[1.mid]，否则搜索空间为[mid+1,+∞）。时间复杂度O（m*n*log
math.Maxlnt64)，空间复杂度O(m*n)。
代码
package leetcode
import "math"
//解法一
动态规划
func calculateMinimumHP(dungeon [][]int) int {
if 1en(dungeon) == 0{
return 0
m, n :=1en(dungeon),1en(dungeon[o])
dp := make([][]int, m)
for i := 0; i = 0; i--{
dp[m1][i] = max(1, dp[m-1][i+1] -dungeon[m1][1]]
for i:=m -2;i >=0;i--{
dp[i][n-1] = max(1, dp[i+1][n-1]-dungeon[i][n-1])
for i = m - 2; i >= 0; i-- {
for j = n - 2; j >= 0; j--{
dp[i][j] = min(max(1, dp[i][j+1]-dungeon[i][j]), max(1, dp[i+1][j]-
dungeon[i][j])]
3
return dp[o][o]
//解法二
二分搜索
func calculateMinimumHPl(dungeon [][]int) int {
1ow, high := 1, math.MaxInt64
for low >1
if canCross(dungeon, mid) {
high = mid
}else{
1ow = mid + 1
1
return 1ow
---
## Page 317
func canCross(dungeon [][]int,start int) bool{
m, n := len(dungeon), 1en(dungeon[o])
dp := make([][]int， m)
for i := 0; i  0 && dp[1-1][j] > 0 {
a = dp[i-1][j] + dungeon[i][j]
if j > 0 && dp[i][j-1] > 0 {
b = dp[i][j-1] + dungeon[i][j]
dp[i][j] = max(a, b)
3
return dp[m-1][n-1] > 0
179. Largest Number
题目
Given a list of non negative integers, arrange them such that they form the largest number.
Example 1:
Input: [10,2]
output:"210"
Example 2:
Input: [3,30,34,5,9]
,00356, :4nd4no
---
## Page 318
Note:
aau ue jo peasu guuas e uunga, on paau nof os ael Aan aq Aew ljnsa, au
题目大意
给出一个数组，要求排列这些数组里的元素，使得最终排列出来的数字是最大的。
解题思路
这一题很容易想到把数字都转化为字符串，利用字符串比较，来排序，这样9开头的一定排在最前面。
不过这样做有一个地方是错误的，比如：“3"和“30”比较，“30”比“3"的字符序要大，这样排序以后就
出错了。实际上就这道题而言，“3"应该排在“30”前面。
在比较2个字符串大小的时候，不单纯的只用字符串顺序进行比较，还加入一个顺序。
aStr := a + b
bstr := b + a
通过比较aStr和bStr的大小来得出是a大还是b大。
举个例子，还是“3"和“30”的例子，比较这2个字符串的大小。
aStr :="3"+"30"="330"
0=+0=:JSq
通过互相补齐位数之后再进行比较，就没有问题了。很显然这里“3”比“30”要大。
代码
package leetcode
import（
"strconv"
func largestNumber(nums []int) string {
if 1en(nums)== 0{
return ""
numStrs := toStringArray(nums)
quickSortString(numStrs, 0, 1en(numStrs)-1)
res := "*
---
## Page 319
for _, str := range numStrs {
if res == "o" && str == "o"{
continue
res = res + str
return res
}
func toStringArray(nums[]int) []string{
strs := make([]string, 0)
for
-, num := range nums {
strs = append(strs, strconv.Itoa(num))
return strs
func partitionString(a []string, lo, hi int) int {
pivot := a[hi]
i:=1o - 1
for j := lo; j pivotStr{//这里的判断条件是关键
i++
a[j], a[i] = a[i], a[j]
}
a[i+l], a[hi] = a[hi], a[i+l]
return i + 1
func quickSortString(a []string,lo, hi int) {
if 1o >= hi {
return
3
p := partitionstring(a, lo, hi)
quickSortString(a, lo, p-1)
quickSortString(a, p+1, hi)
187.RepeatedDNASequences
题目
All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for Example:
"ACGAATTCCG". When studlying DNA, it is sometimes useful to idlentify repeated sequences
within the DNA.
---
## Page 320
Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in
a DNA molecule.
Example:
Input: S = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output:["AAAAACCCCC","CCCCCAAAAA"]
题目大意
所有DNA由一系列缩写为A，C，G和T的核苷酸组成，例如：“ACGAATTCCG”。在研究DNA时，识
别DNA中的重复序列有时会对研究非常有帮助。编写一个函数来查找DNA分子中所有出现超多一次的
10个字母长的序列（子串）。
解题思路
·这一题不用位运算比较好做，维护一个长度为10的字符串，在map中出现次数>1就输出
·用位运算想做这一题，需要动态的维护长度为10的hashkey，先计算开头长度为9的hash，在
往后面扫描的过程中，如果长度超过了10，就移除hash开头的一个字符，加入后面一个字符。
具体做法是先将ATCG变成00，01，10，11的编码，那么长度为10，hashkey就需要维护在
20位。mask=OxFFFFF就是20位的。维护了hashkey 以后，根据这个hashkey进行去重和统
计频次。
代码
package leetcode
//解法一
func findRepeatedDnaSequences(s string) []string {
if len(s) 2, 重复
mp[cur]  = 2
result = append(result, s[i-9:i+1])