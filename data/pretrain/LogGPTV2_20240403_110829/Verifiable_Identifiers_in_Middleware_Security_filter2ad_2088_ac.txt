opaque mechanism-specific  data.  We will  illustrate  how
the  identity  semantics  change when  the  underlying  se-
curity  technology  gets changed  from  Kerberos  to  SSL:
Figure  6 shows the  position  of authentication  mech-
anisms  like  Kerberos 
from
a  granularity  perspective.  The  Kerberos  authentica-
tion 
the  security-enhanced
CORBA  protocol  (SECIOP),  which  can  support  mul-
tiple  security  associations  over the  same transport  con-
nection. 
It  could  therefore  be  used by  the  ORB  Secu-
rity  Service to  transfer  security  attributes  at  a very  fine
In  particular  on  the  target  side  it  would
granularity. 
be  possible  to  assign  a  separate  Kerberos  identity 
to
each individual 
target  object  (provided  the  ORB  im-
plementation  supports  this).4
library  can  be  used  with 
in  the  layered  structure 
Caller
Application
Layer
Target
' i  Application
i 
Layer
tication
Attributes
! 
i  Attributes i 
e.g. certificate
:::::~1
i=-r;;;l:~~=1-- 
ORB
ORB
Layer
-:::::::::::::::::: 
: 
l  ~:-:---::::::::::-:::-::::::---
Figure  5. CORBASec  Authentication
authenticates  TCP  connections  between  the  network
sockets  of  the  participating  hosts.  This  means  that
SSL  cannot  authenticate  on  an  application  object  or
operation  granularity  because SSL is tied  to  a connec-
tion  on the  network  layer  below  the  ORB  layer  -there
could  be  a  number  of  different  application  objects  on
the  ORB  that  listen  to  the  authenticated  socket,  and
the  caller  has no  way  of  authenticating 
the  identity  of
the  object  it  is  invoking.  Figure  7 illustrates  how  the
situation  changes:  the  security  mechanism  now  only
authenticates  on  a per  [host,  port]  granularity, 
i.e.  the
security  contexts  end  when  they  reach  the  socket  on
the  destination  hosts.  This  can  cause problems  if  sev-
eral  application  objects  are running  on top  of one ORB
which  listens  to  a single port  -the  security  mechanism
is not  able to  identify  the  application  layer  objects  and
operations  with  the  same granularity  as in  the  previous
example.  For most  real-world  applications,  this  is more
a  problem  on  the  target  side  than  on  the  client  side,
as there  is normally  only  one application  object  on the
client-side,  whereas there  are often  a number  of objects
with  different  security  requirements  on the  target  side.
These examples show that  the meaning  of  "authenti-
cated identity"  changes when differing  underlying  secu-
rity  mechanisms  are used which  terminate  the  security
context  at  different  points  on  the  path  between  caller
and target.  This  clashes with  the  basic principle  of ab-
straction, 
tech-
nology  is  supposed  to  be  hidden  by  the  middleware
layer5: 
the  granularity  and  meaning  of  the  security
i.e.  that  the  nature  of  the  underlying 
sPlease note  again  that  this  is  a  theoretical  point  -COR-
BASec does currently  not  support  mechanism-unspecific content
Figure  7. CORBA  Security  Context  with  Trans-
port  Layer  Security
attribute 
"identity"  can  only  be  interpreted  correctly
with  in-depth  knowledge  of the  underlying  authentica-
tion  mechanism.
Conclusion 
-Caller 
Identifiers
In  practice,  using  the  identities  provided  by  the  secu-
rity  mechanisms  is  currently 
the  only  practical  way  to
describe the caller  in  a trustworthy  manner  on the ORB
therefore  specifies  the  content  of
layer  -CORBASec 
identities  (e.g. AccessID  or AuditID) 
to  be mechanism-
specific.  This  means that  CORBASec  callers can be de-
scribed  (with  the  granularity  provided  by  the  security
mechanism),  but  not  in  an  interoperable,  mechanism-
independent,  and  portable  way.  Our  MICOSec  imple-
mentation  currently  uses X.509  identities 
to  describe
for  security  attributes
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
callers  in  the  security  policy.
3.2. Target Identifiers
There  are a number  of concepts  which  could  be used
to  describe  the  target:
1.  the  interface  type  of  the  target  object
2.  the  object  reference, which  is generated by the  tar-
get's  object  adapter  once the  target  object  is reg-
istered.  It  includes  the  server  socket  of  the  TCP
connection  and  the  target's  object  key.  The  ob-
ject  key contains  the  object  adapter  identifier  and
the  ObjectID,  which  identifies  the  particular 
tar-
get  object  uniquely  within 
the  scope of  each ob-
ject  adapter,  but  which  are not  necessarily  unique
across object  adapter  boundaries
3.  the  request header, which  contains  the target's  ob-
ject  key  and  the  invoked  operation
4.  the  underlying 
identifier  used  by  the  security
mechanism
In  this  section,  we  will  analyze  the  problems  asso-
ciated  with  target  descriptors,  and  present  a  possible
way of expressing the  target  object  in  the  security  pol-
icy,  and  a  way  of  locating  security  policies  for  their
corresponding  target  objects.
Interface  Type
As  mentioned  above, CORBA  does not  provide  unique
names for  object  instances.  Instead  the  interface  type
could  be used to  describe  objects  based on  their  type.
However, there  are various  drawbacks  of this  approach:
1.  The  interface  type  resides  on  the  layer  above  the
ORB  and  is therefore  theoretically  unavailable  on
the  ORB  layer.  Despite  that,  making  the  interface
type  available  on  the  ORB  layer  is  only  a  minor
violation  of the  layering  of abstractions,  in  partic-
ular  because a type  name  is  a rather  well-defined
string.
for 
2.  However,  due  to  CORBA's  support 
inter-
face inheritance  it  is sometimes  impossible  to  get
the  exact  type, 
i.e.  the  Most  Derived  Interface
(MDI) 
[4], of a target  object.  The  object  reference
contains  an attribute  RepositoryID  which  contains
a target  object  type,  but  it  is not  guaranteed  that
the  object  which  carries  out  the  operation  is really
of  the  type  specified  in  RepositoryID, 
it  could  be
possible  that  the  parent  base  class of  the  object
described  by  RepositoryID  actually  contains  the
called  operation.
3.  The  target  could  have an interface  which  provides
its  type.  However,  for  the  same  reasons  as  de-
scribed  above, this  operation  does not  always  give
back  the  correct  most  derived  type  for  the  partic-
ular  operation  in  question.  In  addition, 
the  object
would  need to  be  activated  before  the  policy  can
be  applied  to  the  invocation,  which  results  in  a
"chicken-and-egg"  situation.
4.  The  CORBA  method  "getjnterface" 
can  be  used
to  get  the  type  of  an object.  However  this  opera-
tion  uses an  Interface  Repository  (IR)  to  acquire
information,  which  is  normally  not  suitable
that 
for  the  use  within  CORBASec 
for  the  following
reasons:  the  IR  is  often  not  local  and  therefore
slDw; it  uses CORBA  invocations  itself,  which  re-
sults  in  a chicken-and-egg  situation; 
it  would  need
to  be  trusted  and  therefore  requires  special  pro-
tection;  IRs  are not  available  in  all  application  en-
vironments.
5.  Security  enforcement  based  on  the  object  type  is
not  rich  enough for  most application  scenarios.  Se-
curity  policies  instead  normally  express principals
(i.e.  users)  or  the  data  inside  application  objects
(e.g. a particular  user's  bank  account).
Object  Reference, 
Name
Request  Header,  Domain
The  target's  object  reference  contains  all  the  informa-
tion  necessary to  locate  the  target  object  instance:  the
server  socket  to  connect  to,  the  object  adapter  iden-
tifier  relative  to  the  host,  an  object  identifier  relative
to  the  object  adapter.  The  server  socket  is,  however,
not  always  the  socket  of the  CORBA  server  object. 
It
also could  be the  server socket of  a CORBA  activation
daemon which,  when it  receives a request,  activates  the
real  CORBA  servers at  run  time  and then  forwards  the
requests  to  these  servers.  It  also  could  be  the  server
socket  of  a  firewall.  The  object  adapter  name  is  gen-
erated  when  the  object  adapter  is  instantiated  by  the
target  application,  and  the  object  id  is  generated  by
the  object  adapter  when  the  object  reference  is  pro-
duced.  The  request  header  is  available  on  the  ORB
layer  and  contains  the  information 
to  locate  the  target
object  within 
the  context  of the  TCP  connection,  plus
the  name  of  the  invoked  operation.  Request  headers
will  be described  in  more  detail  in  section  3.3 below.
While  it  is  in  theory  possible  to  describe  the  target
with  the  information  given  here,  it  is  hard  in  practice
to  locate  the  policy  associated  with  the  target  object
instance  based  on  descriptors  that  can  change  when-
ever  the  object  gets  newly  instantiated.  To  solve  this
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:51 UTC from IEEE Xplore.  Restrictions apply. 
~
~\
Figure  8. Target-side  granularity
problem,  our  MICOSec  implementation  uses an object-
to-domain  mapper  (as  outlined 
in  [10D,  which  maps
several granularities  of  descriptors  onto  static  domain
names.  Each  object  adapter  has  its  own  object-to-
domain  mapping  service  (it  is  therefore  in  the  same
trust  domain).  The  actual  policies  can  then  be  asso-
ciated  with 
its  unchanging  domain  name,  which  ac-
curately  describes which  target  object  a policy  should
apply  to.
Mechanism-Specific Identifier
In  principle,  the  problems  of a security  mechanism  spe-
cific  identifier  are  the  same as on  the  caller  side:  loss
of  interoperability,  mechanism  flexibility,  and  porta-
bility.  However,  the  granularity  problem  has  a  much
higher  impact  on the  target  side than  on the  caller  side,
because each  ORB  can  have  several  object  adapters,
which  in  turn  have  several  target  servants6  (see fig-
ure  8).
If  the  authentication  works  on  a  per-socket  basis,
like  in  the  SSL example  above, then  it  might  be impos-
sible to  draw  any  conclusions  about  the  identity  of the
actual  servant  object.  Therefore  the  identifier  used by
the  security  mechanism  is often  unsuitable  to  describe
the  target  object  in  the  target-side  policy.
Conclusion 
-Target 
Identifiers
identities  do  often
Authenticated  mechanism-specific 
(i.e.  at  the  right
not  describe  the  target  accurately 
to  the  caller  or  inside  the  target-side  pol-
granularity) 
icy.  Thus  the  information 
from  the  object  reference  in
conjunction  with  a  domain  mapping  service  (as  out-
lined  in  [10]) seems to  be the  best  option  to  accurately
describe  which  policy  belongs  to  each target  applica-
tion  object.
6CORBA  servants  contain  the  target  object  interface  im-
plementations,  whereas servers bootstrap  the  ORB,  the  object
adapter,  and the  target  application.
3.3.  Messages
The  ORB  layer  CORBA  protocol  is called  General-
Inter-ORB-Protocol 
(GlOP)  and  contains  eight  mes-
sage formats,  most  notably  the  request  message and the
reply  message. The  interaction  model  seen by  CORBA
is  connectionless:  a  caller  sends
objects  and  GlOP 
a  request  at  any  time,  which  causes a  virtual 
func-
tion  to  be  called  on  the  target.  Although  connection-
less, GlOP  requests  are  dispatched  over  a connection-
oriented  transport,  which  means  that 
the  underlying
operating  system  needs to  take  care of  managing  con-
nections  on  behalf  of  callers  and  targets.  Every  GlOP
request  header  contains  a  requestJd,  a  unique  num-
ber,  which  will  also  be  included  in  the  reply  header
to  allow  the  caller  to  associate  the  response  with  the
the  header  con-
corresponding  request. 
In  addition, 
tains  environment-specific  endpoint 
information 