• 90% of Get RPC calls will complete in less than 1 ms.
• 99% of Get RPC calls will complete in less than 10 ms.• 99.9% of Get RPC calls will complete in less than 100 ms.
If you have users with heterogeneous workloads such as a bulk processing pipeline that cares about throughput and an interactive client that cares about latency, it may be appropriate to define separate objectives for each class of workload:
• 95% of throughput clients’ Set RPC calls will complete in < 1 s.• 99% of latency clients’ Set RPC calls with payloads < 1 kB will complete in < 10 	ms.
It’s both unrealistic and undesirable to insist that SLOs will be met 100% of the time: doing so can reduce the rate of innovation and deployment, require expensive, overly conservative solutions, or both. Instead, it is better to allow an error budget—a rate at which the SLOs can be missed—and track that on a daily or weekly basis. Upper management will probably want a monthly or quarterly assessment, too. (An error budget is just an SLO for meeting other SLOs!)The rate at which SLOs are missed is a useful indicator for the user-perceived health of the service. It is helpful to track SLOs (and SLO violations) on a daily or weekly basis to see trends and get early warning of potential problems before they happen.
Upper management will probably want a monthly or quarterly assessment, too.
44  |  Chapter 4: Service Level ObjectivesThe SLO violation rate can be compared against the error budget (see “Motivation for Error Budgets” on page 33), with the gap used as an input to the process that decides when to roll out new releases.
Choosing TargetsChoosing targets (SLOs) is not a purely technical activity because of the product and business implications, which should be reflected in both the SLIs and SLOs (and maybe SLAs) that are selected. Similarly, it may be necessary to trade off certain prod‐uct attributes against others within the constraints posed by staffing, time to market, hardware availability, and funding. While SRE should be part of this conversation, and advise on the risks and viability of different options, we’ve learned a few lessons that can help make this a more productive discussion:Don’t pick a target based on current performance 
While understanding the merits and limits of a system is essential, adopting val‐ues without reflection may lock you into supporting a system that requires heroic efforts to meet its targets, and that cannot be improved without significant redesign.
Keep it simple 
Complicated aggregations in SLIs can obscure changes to system performance, and are also harder to reason about.Avoid absolutes 
While it’s tempting to ask for a system that can scale its load “infinitely” without any latency increase and that is “always” available, this requirement is unrealistic. Even a system that approaches such ideals will probably take a long time to design and build, and will be expensive to operate—and probably turn out to be unnecessarily better than what users would be happy (or even delighted) to have.Have as few SLOs as possible 
Choose just enough SLOs to provide good coverage of your system’s attributes. Defend the SLOs you pick: if you can’t ever win a conversation about priorities by quoting a particular SLO, it’s probably not worth having that SLO.2 However, not all product attributes are amenable to SLOs: it’s hard to specify “user delight”with an SLO.
Perfection can waitPerfection can wait 
You can always refine SLO definitions and targets over time as you learn about a system’s behavior. It’s better to start with a loose target that you tighten than to
2 If you can’t ever win a conversation about SLOs, it’s probably not worth having an SRE team for the product.
Objectives in Practice  |  45
choose an overly strict target that has to be relaxed when you discover it’s unat‐tainable.SLOs can—and should—be a major driver in prioritizing work for SREs and product developers, because they reflect what users care about. A good SLO is a helpful, legiti‐mate forcing function for a development team. But a poorly thought-out SLO can result in wasted work if a team uses heroic efforts to meet an overly aggressive SLO, or a bad product if the SLO is too lax. SLOs are a massive lever: use them wisely.Control Measures
SLIs and SLOs are crucial elements in the control loops used to manage systems:
1. Monitor and measure the system’s SLIs.
2. Compare the SLIs to the SLOs, and decide whether or not action is needed.
3. If action is needed, figure out what needs to happen in order to meet the target.
4. Take that action.4. Take that action.
For example, if step 2 shows that request latency is increasing, and will miss the SLO in a few hours unless something is done, step 3 might include testing the hypothesis that the servers are CPU-bound, and deciding to add more of them to spread the load. Without the SLO, you wouldn’t know whether (or when) to take action.
SLOs Set ExpectationsPublishing SLOs sets expectations for system behavior. Users (and potential users) often want to know what they can expect from a service in order to understand whether it’s appropriate for their use case. For instance, a team wanting to build a photo-sharing website might want to avoid using a service that promises very strong durability and low cost in exchange for slightly lower availability, though the same service might be a perfect fit for an archival records management system.In order to set realistic expectations for your users, you might consider using one or both of the following tactics:
Keep a safety margin 
Using a tighter internal SLO than the SLO advertised to users gives you room to respond to chronic problems before they become visible externally. An SLO buffer also makes it possible to accommodate reimplementations that trade per‐formance for other attributes, such as cost or ease of maintenance, without hav‐ing to disappoint users.46  |  Chapter 4: Service Level Objectives
Don’t overachieve 
Users build on the reality of what you offer, rather than what you say you’ll sup‐ply, particularly for infrastructure services. If your service’s actual performance is much better than its stated SLO, users will come to rely on its current perfor‐mance. You can avoid over-dependence by deliberately taking the system offline occasionally (Google’s Chubby service introduced planned outages in response to being overly available),3 throttling some requests, or designing the system so that it isn’t faster under light loads.Understanding how well a system is meeting its expectations helps decide whether to invest in making the system faster, more available, and more resilient. Alternatively, if the service is doing fine, perhaps staff time should be spent on other priorities, such as paying off technical debt, adding new features, or introducing other products.
Agreements in PracticeCrafting an SLA requires business and legal teams to pick appropriate consequences and penalties for a breach. SRE’s role is to help them understand the likelihood and difficulty of meeting the SLOs contained in the SLA. Much of the advice on SLO con‐struction is also applicable for SLAs. It is wise to be conservative in what you adver‐tise to users, as the broader the constituency, the harder it is to change or delete SLAs that prove to be unwise or difficult to work with.3 Failure injection [Ben12] serves a different purpose, but can also help set expectations.
Agreements in Practice  |  47
CHAPTER 5
Eliminating Toil
Written by Vivek Rau 
Edited by Betsy Beyer
If a human operator needs to touch your system during normal operations, you have a bug. The definition of normal changes as your systems grow.
—Carla Geisser, Google SRE—Carla Geisser, Google SRE
In SRE, we want to spend time on long-term engineering project work instead of operational work. Because the term operational work may be misinterpreted, we use a specific word: toil.
Toil DefinedToil is not just “work I don’t like to do.” It’s also not simply equivalent to administra‐tive chores or grungy work. Preferences as to what types of work are satisfying and enjoyable vary from person to person, and some people even enjoy manual, repetitive work. There are also administrative chores that have to get done, but should not be categorized as toil: this is overhead. Overhead is often work not directly tied to run‐ning a production service, and includes tasks like team meetings, setting and grading goals,1 snippets,2 and HR paperwork. Grungy work can sometimes have long-term value, and in that case, it’s not toil, either. Cleaning up the entire alerting configura‐tion for your service and removing clutter may be grungy, but it’s not toil.So what is toil? Toil is the kind of work tied to running a production service that tends to be manual, repetitive, automatable, tactical, devoid of enduring value, and
1 We use the Objectives and Key Results system, pioneered by Andy Grove at Intel; see [Kla12].
2 Googlers record short free-form summaries, or “snippets,” of what we’ve worked on each week.
4949
that scales linearly as a service grows. Not every task deemed toil has all these attributes, but the more closely work matches one or more of the following descrip‐tions, the more likely it is to be toil:
Manual 
This includes work such as manually running a script that automates some task. Running a script may be quicker than manually executing each step in the script, but the hands-on time a human spends running that script (not the elapsed time) is still toil time.Repetitive 
If you’re performing a task for the first time ever, or even the second time, this work is not toil. Toil is work you do over and over. If you’re solving a novel prob‐lem or inventing a new solution, this work is not toil.
Automatable 
If a machine could accomplish the task just as well as a human, or the need for the task could be designed away, that task is toil. If human judgment is essential for the task, there’s a good chance it’s not toil.3Tactical 
Toil is interrupt-driven and reactive, rather than strategy-driven and proactive. Handling pager alerts is toil. We may never be able to eliminate this type of work completely, but we have to continually work toward minimizing it.
No enduring valueNo enduring value 
If your service remains in the same state after you have finished a task, the task was probably toil. If the task produced a permanent improvement in your ser‐vice, it probably wasn’t toil, even if some amount of grunt work—such as digging into legacy code and configurations and straightening them out—was involved.
O(n) with service growthO(n) with service growth 
If the work involved in a task scales up linearly with service size, traffic volume, or user count, that task is probably toil. An ideally managed and designed service can grow by at least one order of magnitude with zero additional work, other than some one-time efforts to add resources.3 We have to be careful about saying a task is “not toil because it needs human judgment.” We need to think carefully about whether the nature of the task intrinsically requires human judgment and cannot be addressed by better design. For example, one could build (and some have built) a service that alerts its SREs several times a day, where each alert requires a complex response involving plenty of human judgment. Such a service is poorly designed, with unnecessary complexity. The system needs to be simplified and rebuilt to either elim‐inate the underlying failure conditions or deal with these conditions automatically. Until the redesign and reimplementation are finished, and the improved service is rolled out, the work of applying human judgment to respond to each alert is definitely toil.50  |  Chapter 5: Eliminating Toil
Why Less Toil Is Better
Our SRE organization has an advertised goal of keeping operational work (i.e., toil) below 50% of each SRE’s time. At least 50% of each SRE’s time should be spent on engineering project work that will either reduce future toil or add service features. Feature development typically focuses on improving reliability, performance, or uti‐lization, which often reduces toil as a second-order effect.We share this 50% goal because toil tends to expand if left unchecked and can quickly fill 100% of everyone’s time. The work of reducing toil and scaling up services is the“Engineering” in Site Reliability Engineering. Engineering work is what enables the SRE organization to scale up sublinearly with service size and to manage services more efficiently than either a pure Dev team or a pure Ops team.Furthermore, when we hire new SREs, we promise them that SRE is not a typical Ops organization, quoting the 50% rule just mentioned. We need to keep that promise by not allowing the SRE organization or any subteam within it to devolve into an Ops team.
Calculating Toil
If we seek to cap the time an SRE spends on toil to 50%, how is that time spent?There’s a floor on the amount of toil any SRE has to handle if they are on-call. A typi‐cal SRE has one week of primary on-call and one week of secondary on-call in each cycle (for discussion of primary versus secondary on-call shifts, see Chapter 11). It follows that in a 6-person rotation, at least 2 of every 6 weeks are dedicated to on-call shifts and interrupt handling, which means the lower bound on potential toil is 2/6 = 33% of an SRE’s time. In an 8-person rotation, the lower bound is 2/8 = 25%.Consistent with this data, SREs report that their top source of toil is interrupts (that is, non-urgent service-related messages and emails). The next leading source is on-call (urgent) response, followed by releases and pushes. Even though our release and push processes are usually handled with a fair amount of automation, there’s still plenty of room for improvement in this area.Quarterly surveys of Google’s SREs show that the average time spent toiling is about 33%, so we do much better than our overall target of 50%. However, the average doesn’t capture outliers: some SREs claim 0% toil (pure development projects with no on-call work) and others claim 80% toil. When individual SREs report excessive toil, it often indicates a need for managers to spread the toil load more evenly across the team and to encourage those SREs to find satisfying engineering projects.Why Less Toil Is Better  |  51
What Qualifies as Engineering?
Engineering work is novel and intrinsically requires human judgment. It produces a permanent improvement in your service, and is guided by a strategy. It is frequently creative and innovative, taking a design-driven approach to solving a problem—the more generalized, the better. Engineering work helps your team or the SRE organiza‐tion handle a larger service, or more services, with the same level of staffing.Typical SRE activities fall into the following approximate categories:
Software engineering 
Involves writing or modifying code, in addition to any associated design and documentation work. Examples include writing automation scripts, creating tools or frameworks, adding service features for scalability and reliability, or modifying infrastructure code to make it more robust.
Systems engineeringInvolves configuring production systems, modifying configurations, or docu‐menting systems in a way that produces lasting improvements from a one-time effort. Examples include monitoring setup and updates, load balancing configu‐ration, server configuration, tuning of OS parameters, and load balancer setup. Systems engineering also includes consulting on architecture, design, and pro‐ductionization for developer teams.Toil Work directly tied to running a service that is repetitive, manual, etc.
Overhead 
Administrative work not tied directly to running a service. Examples include hir‐ing, HR paperwork, team/company meetings, bug queue hygiene, snippets, peer reviews and self-assessments, and training courses.Every SRE needs to spend at least 50% of their time on engineering work, when aver‐aged over a few quarters or a year. Toil tends to be spiky, so a steady 50% of time spent on engineering may not be realistic for some SRE teams, and they may dip below that target in some quarters. But if the fraction of time spent on projects aver‐ages significantly below 50% over the long haul, the affected team needs to step back and figure out what’s wrong.Is Toil Always Bad?
Toil doesn’t make everyone unhappy all the time, especially in small amounts. Pre‐dictable and repetitive tasks can be quite calming. They produce a sense of accom‐plishment and quick wins. They can be low-risk and low-stress activities. Some people gravitate toward tasks involving toil and may even enjoy that type of work.
52  |  Chapter 5: Eliminating ToilToil isn’t always and invariably bad, and everyone needs to be absolutely clear that some amount of toil is unavoidable in the SRE role, and indeed in almost any engi‐neering role. It’s fine in small doses, and if you’re happy with those small doses, toil is not a problem. Toil becomes toxic when experienced in large quantities. If you’re bur‐dened with too much toil, you should be very concerned and complain loudly.Among the many reasons why too much toil is bad, consider the following:
Career stagnation 
Your career progress will slow down or grind to a halt if you spend too little time on projects. Google rewards grungy work when it’s inevitable and has a big posi‐tive impact, but you can’t make a career out of grunge.
Low morale 
People have different limits for how much toil they can tolerate, but everyone has a limit. Too much toil leads to burnout, boredom, and discontent.Additionally, spending too much time on toil at the expense of time spent engineer‐ing hurts an SRE organization in the following ways:
Creates confusion 
We work hard to ensure that everyone who works in or with the SRE organiza‐tion understands that we are an engineering organization. Individuals or teams within SRE that engage in too much toil undermine the clarity of that communi‐cation and confuse people about our role.Slows progress 
Excessive toil makes a team less productive. A product’s feature velocity will slow if the SRE team is too busy with manual work and firefighting to roll out new features promptly.
Sets precedent 
If you’re too willing to take on toil, your Dev counterparts will have incentives to load you down with even more toil, sometimes shifting operational tasks that should rightfully be performed by Devs to SRE. Other teams may also start expecting SREs to take on such work, which is bad for obvious reasons.Promotes attrition 
Even if you’re not personally unhappy with toil, your current or future team‐mates might like it much less. If you build too much toil into your team’s proce‐dures, you motivate the team’s best engineers to start looking elsewhere for a more rewarding job.
Causes breach of faith 
New hires or transfers who joined SRE with the promise of project work will feel cheated, which is bad for morale.Is Toil Always Bad?  |  53
Conclusion
If we all commit to eliminate a bit of toil each week with some good engineering, we’ll steadily clean up our services, and we can shift our collective efforts to engineering for scale, architecting the next generation of services, and building cross-SRE tool‐chains. Let’s invent more, and toil less.
54  |  Chapter 5: Eliminating Toil