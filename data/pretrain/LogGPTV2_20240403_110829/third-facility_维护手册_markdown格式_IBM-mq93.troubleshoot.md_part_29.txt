controlMQXRChannel command
Using the controlMQXRChannel command to provide additional diagnostic information about the MQXR
service.
Procedure
Run the following command to provide useful diagnostic information from the MQXR service:
\mqxr\bin\controlMQXRChannel -qmgr= -mode=diagnostics
-diagnosticstype=
The diagnostic information generated depends on the value of the -diagnosticstype=
parameter:
-diagnosticstype= 0
Thread dump written to the console
-diagnosticstype= 1
FDC with some internal service statistics
-diagnosticstype= 2
FDC with internal statistics, plus information about the clients that are currently connected
-diagnosticstype= 3
Heap dump
-diagnosticstype= 4
Javacore
-diagnosticstype= 5
Full system dump
182 Troubleshooting and Support for IBM MQ
-diagnosticstype= 6
Detailed information about a specific client. Note that you must also supply the -clientid
parameter for that client as well.
Resolving problem: MQTT client does not
connect
Resolve the problem of an MQTT client program failing to connect to the telemetry (MQXR) service.
Before you begin
Is the problem at the server, at the client, or with the connection? Have you have written your own MQTT
v3 protocol handling client, or an MQTT client application using the C or Java MQTT clients?
See Verifying the installation of MQ Telemetry for further information, and check that the telemetry
channel and telemetry (MQXR) service are running correctly.
About this task
There are a number of reasons why an MQTT client might not connect, or you might conclude it has not
connected, to the telemetry server.
Procedure
1.Consider what inferences can be drawn from the reason code that the telemetry (MQXR) service
returned to MqttClient.Connect. What type of connection failure is it?
Option Description
REASON_CODE_INVALID_PROTOCOL_VERSION Make sure that the socket address corresponds to
a telemetry channel, and you have not used the
same socket address for another broker.
REASON_CODE_INVALID_CLIENT_ID Check that the client identifier is no longer than 23
bytes, and contains only characters from the range:
A-Z, a-z, 0-9, './_%
REASON_CODE_SERVER_CONNECT_ERROR Check that the telemetry (MQXR) service and
the queue manager are running normally. Use
netstat to check that the socket address is not
allocated to another application.
If you have written an MQTT client library rather than use one of the libraries provided by MQ
Telemetry, look at the CONNACK return code.
From these three errors you can infer that the client has connected to the telemetry (MQXR) service,
but the service has found an error.
2.Consider what inferences can be drawn from the reason codes that the client produces when the
telemetry (MQXR) service does not respond:
Option Description
REASON_CODE_CLIENT_EXCEPTION Look for an FDC file at the server; see “Server-side logs”
REASON_CODE_CLIENT_TIMEOUT on page 178. When the telemetry (MQXR) service detects
the client has timed out, it writes a first-failure data capture
(FDC) file. It writes an FDC file whenever the connection is
unexpectedly broken.
IBM MQ troubleshooting and support 183
The telemetry (MQXR) service might not have responded to the client, and the timeout at the client
expires. The MQ Telemetry Java client only hangs if the application has set an indefinite timeout. The
client throws one of these exceptions after the timeout set for MqttClient.Connect expires with an
undiagnosed connection problem.
Unless you find an FDC file that correlates with the connection failure you cannot infer that the client
tried to connect to the server:
a)Confirm that the client sent a connection request.
Check the TCPIP request with a tool such as tcpmon, available from (for example) https://
code.google.com/archive/p/tcpmon/
b)Does the remote socket address used by the client match the socket address defined for the
telemetry channel?
The default file persistence class in the Java SE MQTT client supplied with IBM MQ
Telemetry creates a folder with the name: clientIdentifier-tcphostNameport or clientIdentifier-
sslhostNameport in the client working directory. The folder name tells you the hostName and port
used in the connection attempt; see “Client-side log files and client-side configuration files” on
page 180.
c)Can you ping the remote server address?
d)Does netstat on the server show the telemetry channel is running on the port the client is
connecting too?
3.Check whether the telemetry (MQXR) service found a problem in the client request.
The telemetry (MQXR) service writes errors it detects into mqxr_n.log, and the queue manager
writes errors into AMQERR01.LOG .
4.Attempt to isolate the problem by running another client.
See Verifying the installation of MQ Telemetry for further information.
Run the sample programs on the server platform to eliminate uncertainties about the network
connection, then run the samples on the client platform.
5.Other things to check:
a)Are tens of thousands of MQTT clients trying to connect at the same time?
Telemetry channels have a queue to buffer a backlog of incoming connections. Connections are
processed in excess of 10,000 a second. The size of the backlog buffer is configurable using the
telemetry channel wizard in IBM MQ Explorer. Its default size is 4096. Check that the backlog has
not been configured to a low value.
b)Are the telemetry (MQXR) service and queue manager still running?
c)Has the client connected to a high availability queue manager that has switched its TCPIP address?
d)Is a firewall selectively filtering outbound or return data packets?
Resolving problem: MQTT client connection
dropped
Find out what is causing a client to throw unexpected ConnectionLost exceptions after successfully
connecting and running for either a short or long while.
Before you begin
The MQTT client has connected successfully. The client might be up for a long while. If clients are starting
with only a short interval between them, the time between connecting successfully and the connection
being dropped might be short.
It is not hard to distinguish a dropped connection from a connection that was successfully
made, and then later dropped. A dropped connection is defined by the MQTT client calling the
MqttCallback.ConnectionLost method. The method is only called after the connection has been
184 Troubleshooting and Support for IBM MQ
successfully established. The symptom is different to MqttClient.Connect throwing an exception after
receiving a negative acknowledgment or timing out.
If the MQTT client application is not using the MQTT client libraries supplied by IBM MQ, the symptom
depends on the client. In the MQTT v3 protocol, the symptom is a lack of timely response to a request to
the server, or the failure of the TCP/IP connection.
About this task
The MQTT client calls MqttCallback.ConnectionLost with a throwable exception in response to any
server-side problems encountered after receiving a positive connection acknowledgment. When an MQTT
client returns from MqttTopic.publish and MqttClient.subscribe the request is transferred to
an MQTT client thread that is responsible for sending and receiving messages. Server-side errors are
reported asynchronously by passing a throwable exception to the ConnectionLost callback method.
Procedure
1.Has another client started that used the same ClientIdentifier ?
If a second client is started, or the same client is restarted, using the same ClientIdentifier, the
first connection to the first client is dropped.
2.Has the client accessed a topic that it is not authorized to publish or subscribe to?
Any actions the telemetry service takes on behalf of a client that return MQCC_FAIL result in the
service dropping the client connection.
The reason code is not returned to the client.
• Look for log messages in the mqxr.log and AMQERR01.LOG files for the queue manager the client is
connected to; see “Server-side logs” on page 178.
3.Has the TCP/IP connection dropped?
A firewall might have a low timeout setting for marking a TCPIP connection as inactive, and dropped
the connection.
• Shorten the inactive TCPIP connection time using
MqttConnectOptions.setKeepAliveInterval.
Resolving problem: Lost messages in an MQTT
application
Resolve the problem of losing a message. Is the message non-persistent, sent to the wrong place, or
never sent? A wrongly coded client program might lose messages.
Before you begin
How certain are you that the message you sent, was lost? Can you infer that a message is lost because the
message was not received? If message is a publication, which message is lost: the message sent by the
publisher, or the message sent to the subscriber? Or did the subscription get lost, and the broker is not
sending publications for that subscription to the subscriber?
If the solution involves distributed publish/subscribe, using clusters or publish/subscribe hierarchies,
there are numerous configuration issues that might result in the appearance of a lost message.
If you sent a message with At least once or At most once quality of service, it is likely that the
message you think is lost was not delivered in the way you expected. It is unlikely that the message has
been wrongly deleted from the system. It might have failed to create the publication or the subscription
you expected.
The most important step you take in doing problem determination of lost messages is to confirm the
message is lost. Re-create the scenario and lose more messages. Use the At least once or At most
once quality of service to eliminate all cases of the system discarding messages.
IBM MQ troubleshooting and support 185
About this task
There are four legs to diagnosing a lost message.
1.Fire and forget messages working as-designed. Fire and forget messages are sometimes
discarded by the system.
2.Configuration: setting up publish/subscribe with the correct authorities in a distributed environment is
not straightforward.
3.Client programming errors: the responsibility for message delivery is not solely the responsibility of
code written by IBM.
4.If you have exhausted all these possibilities, you might decide to involve IBM Support.
Procedure
1.If the lost message had the Fire and forget quality of service, set the At least once or At
most once quality of service. Attempt to lose the message again.
• Messages sent with Fire and forget quality of service are thrown away by IBM MQ in a number
of circumstances:
– Communications loss and channel stopped.
– Queue manager shut down.
– Excessive number of messages.
• The delivery of Fire and forget messages depends upon the reliability of TCP/IP. TCP/IP
continues to send data packets again until their delivery is acknowledged. If the TCP/IP session
is broken, messages with the Fire and forget quality of service are lost. The session might be
broken by the client or server closing down, a communications problem, or a firewall disconnecting
the session.
2.Check that client is restarting the previous session, in order to send undelivered messages with At
least once or At most once quality of service again.
a)If the client application is using the Java SE MQTT client, check that it sets
MqttClient.CleanSession to false
b)If you are using different client libraries, check that a session is being restarted correctly.
3.Check that the client application is restarting the same session, and not starting a different session by
mistake.
To start the same session again, cleanSession = false, and the
Mqttclient.clientIdentifier and the MqttClient.serverURI must be the same as the
previous session.
4.If a session closes prematurely, check that the message is available in the persistence store at the
client to send again.
a)If the client application is using the Java SE MQTT client, check that the message is being saved in
the persistence folder; see “Client-side log files and client-side configuration files” on page 180
b)If you are using different client libraries, or you have implemented your own persistence
mechanism, check that it is working correctly.
5.Check that no one has deleted the message before it was delivered.
Undelivered messages awaiting delivery to MQTT clients are stored in
SYSTEM.MQTT.TRANSMIT.QUEUE. Messages awaiting delivery to the telemetry server are stored by
the client persistence mechanism; see Message persistence in MQTT clients.
6.Check that the client has a subscription for the publication it expects to receive.
List subscriptions using IBM MQ Explorer, or by using runmqsc or PCF commands. All MQTT client
subscriptions are named. They are given a name of the form: ClientIdentifier:Topic name
7.Check that the publisher has authority to publish, and the subscriber to subscribe to the publication
topic.
186 Troubleshooting and Support for IBM MQ
dspmqaut -m qMgr -n topicName -t topic -p user ID
In a clustered publish/subscribe system, the subscriber must be authorized to the topic on the queue
manager to which the subscriber is connected. It is not necessary for the subscriber to be authorized
to subscribe to the topic on the queue manager where the publication is published. The channels
between the queue managers must be correctly authorized to pass on the proxy subscription and
forward the publication.
Create the same subscription and publish to it using IBM MQ Explorer. Simulate your application client
publishing and subscribing by using the client utility. Start the utility from IBM MQ Explorer and change
its user ID to match the one adopted by your client application.
8.Check that the subscriber has permission to put the publication on the
SYSTEM.MQTT.TRANSMIT.QUEUE.
dspmqaut -m qMgr -n queueName -t queue -p user ID
9.Check that the IBM MQ point-to-point application has authority to put its message on the
SYSTEM.MQTT.TRANSMIT.QUEUE.
dspmqaut -m qMgr -n queueName -t queue -p user ID
See Sending a message to a client directly.
Resolving problem: Telemetry (MQXR) service
does not start
Resolve the problem of the telemetry (MQXR) service failing to start. Check the MQ Telemetry installation
and no files are missing, moved, or have the wrong permissions. Check the paths that are used by the
telemetry (MQXR) service locate the telemetry (MQXR) service programs.
Before you begin
The MQ Telemetry feature is installed. The IBM MQ Explorer has a Telemetry folder in IBM MQ > Queue
Managers > qMgrName > Telemetry. If the folder does not exist, the installation has failed.
The Telemetry (MQXR) service must have been created for it to start. If the telemetry (MQXR) service has
not been created, then run the Define sample configuration... wizard in the Telemetry folder.
If the telemetry (MQXR) service has been started before, then additional Channels and Channel Status
folders are created under the Telemetry folder. The Telemetry service, SYSTEM.MQXR.SERVICE, is in
the Services folder. It is visible if the IBM MQ Explorer radio button to show System Objects is clicked.
Right-click SYSTEM.MQXR.SERVICE to start and stop the service, show its status, and display whether
your user ID has authority to start the service.
About this task
The SYSTEM.MQXR.SERVICE telemetry (MQXR) service fails to start. A failure to start manifests itself in
two different ways:
1.The start command fails immediately.
2.The start command succeeds, and is immediately followed by the service stopping.
Procedure
1.Start the service.
Result
The service stops immediately. A window displays an error message; for example:
IBM MQ troubleshooting and support 187
IBM MQ cannot process the request because the
executable specified cannot be started. (AMQ4160)
Reason
Files are missing from the installation, or the permissions on installed files are set wrongly.
The MQ Telemetry feature is installed only on one of a pair of highly available queue
managers. If the queue manager instance switches over to a standby, it tries to start
SYSTEM.MQXR.SERVICE. The command to start the service fails because the telemetry
(MQXR) service is not installed on the standby.
Investigation
Look in error logs; see “Server-side logs” on page 178.
Actions
Install, or uninstall and reinstall the MQ Telemetry feature.
2.Start the service; wait for 30 seconds; refresh the IBM MQ Explorer and check the service status.
Result
The service starts and then stops.
Reason
SYSTEM.MQXR.SERVICE started the runMQXRService command, but the command failed.
Investigation
Look in error logs; see “Server-side logs” on page 178.
See if the problem occurs with only the sample channel defined. Back up and the clear the
contents of the WMQ data directory\Qmgrs\qMgrName\mqxr\ directory. Run the sample
configuration wizard and try to start the service.
Actions
Look for permission and path problems.
Resolving problem: JAAS login module not
called by the telemetry service
Find out if your JAAS login module is not being called by the telemetry (MQXR) service, and configure
JAAS to correct the problem.
Before you begin
You have modified WMQ installation
directory\mqxr\samples\jaas\LoginModule.java to create your own authentication class WMQ
installation directory\mqxr\samples\jaas\LoginModule.class.
Alternatively, you have written your own JAAS authentication classes and placed them in a directory
of your choosing. After some initial testing with the telemetry (MQXR) service, you suspect that your
authentication class is not being called by the telemetry (MQXR) service.
Note: Guard against the possibility that your authentication classes might be overwritten by maintenance
being applied to IBM MQ. Use your own path for authentication classes, rather than a path within the IBM
MQ directory tree.
About this task
The task uses a scenario to illustrate how to resolve the problem. In the scenario, a package called
security.jaas contains a JAAS authentication class called JAASLogin.class. It is stored in the
path C:\WMQTelemetryApps\security\jaas. Refer to Telemetry channel JAAS configuration and
AuthCallback MQXR class for help in configuring JAAS for MQ Telemetry. The example, “Example JAAS
configuration” on page 189 is a sample configuration.
188 Troubleshooting and Support for IBM MQ
From IBM MQ 9.3.0, the JAAS.Login module files have been moved