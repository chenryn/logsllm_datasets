### ControlMQXRChannel Command

The `controlMQXRChannel` command provides additional diagnostic information about the MQXR service.

#### Procedure
To generate useful diagnostic information from the MQXR service, run the following command:

```
\mqxr\bin\controlMQXRChannel -qmgr=<queue_manager> -mode=diagnostics -diagnosticstype=<type>
```

The type of diagnostic information generated depends on the value of the `-diagnosticstype` parameter:

- **-diagnosticstype=0**: Thread dump written to the console.
- **-diagnosticstype=1**: FDC with some internal service statistics.
- **-diagnosticstype=2**: FDC with internal statistics, plus information about the clients that are currently connected.
- **-diagnosticstype=3**: Heap dump.
- **-diagnosticstype=4**: Javacore.
- **-diagnosticstype=5**: Full system dump.
- **-diagnosticstype=6**: Detailed information about a specific client. Note that you must also supply the `-clientid` parameter for that client.

### Resolving Problem: MQTT Client Does Not Connect

Resolve the issue of an MQTT client program failing to connect to the telemetry (MQXR) service.

#### Before You Begin
- Determine if the problem is at the server, client, or with the connection.
- Verify whether you have written your own MQTT v3 protocol handling client or are using the C or Java MQTT clients.
- See "Verifying the Installation of MQ Telemetry" for further information and ensure that the telemetry channel and MQXR service are running correctly.

#### About This Task
There are several reasons why an MQTT client might not connect to the telemetry server.

#### Procedure
1. **Analyze the Reason Code**:
   - **REASON_CODE_INVALID_PROTOCOL_VERSION**: Ensure the socket address corresponds to a telemetry channel and is not used by another broker.
   - **REASON_CODE_INVALID_CLIENT_ID**: Check that the client identifier is no longer than 23 bytes and contains only valid characters (A-Z, a-z, 0-9, './_%').
   - **REASON_CODE_SERVER_CONNECT_ERROR**: Verify that the MQXR service and queue manager are running normally. Use `netstat` to check if the socket address is allocated to another application.
   - If using a custom MQTT client library, examine the CONNACK return code.

2. **Analyze Client-Side Reason Codes**:
   - **REASON_CODE_CLIENT_EXCEPTION**: Look for an FDC file at the server; see "Server-side logs".
   - **REASON_CODE_CLIENT_TIMEOUT**: The client times out if the MQXR service does not respond. Check for FDC files and confirm the client sent a connection request using tools like `tcpmon`.
     - Verify the remote socket address matches the defined telemetry channel.
     - Check if the remote server address is reachable and if the telemetry channel is running on the correct port.

3. **Check Server Logs**:
   - The MQXR service writes errors into `mqxr_n.log`, and the queue manager writes errors into `AMQERR01.LOG`.

4. **Isolate the Problem**:
   - Run sample programs on both the server and client platforms to eliminate network issues.

5. **Additional Checks**:
   - Ensure the backlog buffer size is configured correctly.
   - Verify that the MQXR service and queue manager are running.
   - Check for high availability queue manager TCPIP address changes.
   - Ensure firewalls are not filtering packets.

### Resolving Problem: MQTT Client Connection Dropped

Determine the cause of unexpected `ConnectionLost` exceptions after a successful MQTT client connection.

#### Before You Begin
- Confirm that the MQTT client has successfully connected.
- Distinguish between a dropped connection and a connection that was initially successful but later dropped.

#### About This Task
- The MQTT client calls `MqttCallback.ConnectionLost` with a throwable exception in response to server-side issues after a positive connection acknowledgment.
- Server-side errors are reported asynchronously by passing a throwable exception to the `ConnectionLost` callback method.

#### Procedure
1. **Check for Duplicate Client Identifiers**:
   - If another client starts with the same `ClientIdentifier`, the first connection is dropped.

2. **Verify Authorization**:
   - Ensure the client is authorized to access the topics it is publishing or subscribing to. Unauthorized actions result in the client connection being dropped. Check `mqxr.log` and `AMQERR01.LOG` for log messages.

3. **Check TCP/IP Connection**:
   - A firewall might drop the connection due to low timeout settings. Adjust the inactive TCP/IP connection time using `MqttConnectOptions.setKeepAliveInterval`.

### Resolving Problem: Lost Messages in an MQTT Application

Address the issue of lost messages in an MQTT application.

#### Before You Begin
- Confirm that the message was indeed lost and not simply undelivered.
- Consider the quality of service (QoS) and the nature of the message (publication or subscription).

#### About This Task
- There are four main areas to diagnose a lost message: fire and forget messages, configuration, client programming errors, and involving IBM Support.

#### Procedure
1. **Change QoS**:
   - If the message had the "Fire and forget" QoS, change to "At least once" or "At most once" and attempt to lose the message again.

2. **Restart Session**:
   - Ensure the client restarts the previous session to resend undelivered messages.
   - For Java SE MQTT clients, set `MqttClient.CleanSession` to `false`.

3. **Check Persistence**:
   - Ensure the message is available in the persistence store if the session closes prematurely.

4. **Verify Message Deletion**:
   - Ensure no one has deleted the message before it was delivered.

5. **Check Subscriptions**:
   - List subscriptions using IBM MQ Explorer or `runmqsc`/PCF commands.
   - Ensure the publisher and subscriber have the necessary permissions.

### Resolving Problem: Telemetry (MQXR) Service Does Not Start

Resolve the issue of the MQXR service failing to start.

#### Before You Begin
- Verify that the MQ Telemetry feature is installed and the Telemetry folder exists in IBM MQ Explorer.
- Ensure the MQXR service has been created and can be started from the Telemetry folder.

#### About This Task
- The `SYSTEM.MQXR.SERVICE` fails to start, which can manifest as an immediate failure or a start followed by an immediate stop.

#### Procedure
1. **Start the Service**:
   - If the service stops immediately, check for missing files or incorrect permissions.
   - Verify the MQ Telemetry feature is installed on the active queue manager instance.

2. **Check Service Status**:
   - If the service starts and then stops, check error logs and verify the sample channel configuration.
   - Backup and clear the contents of the `WMQ data directory\Qmgrs\qMgrName\mqxr\` directory, then run the sample configuration wizard and try to start the service again.

### Resolving Problem: JAAS Login Module Not Called by the Telemetry Service

Determine if your JAAS login module is not being called by the MQXR service and configure JAAS to correct the problem.

#### Before You Begin
- Modify or create your own JAAS authentication classes and place them in a secure directory outside the IBM MQ directory tree.

#### About This Task
- Use a scenario where a package called `security.jaas` contains a JAAS authentication class `JAASLogin.class` stored in `C:\WMQTelemetryApps\security\jaas`.

#### Procedure
1. **Verify Configuration**:
   - Refer to "Telemetry Channel JAAS Configuration and AuthCallback MQXR Class" for help in configuring JAAS for MQ Telemetry.
   - Example configuration: "Example JAAS Configuration" on page 189.

From IBM MQ 9.3.0, the JAAS.Login module files have been moved.