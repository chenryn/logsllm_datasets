### XXE漏洞
#### 1.概念
XXE(XML External Entity Injection) 全称为 XML 外部实体注入
#### 2.语法
    XML 指可扩展标记语言（EXtensible Markup Language）
    XML 是一种标记语言，很类似 HTML
    XML 被设计为传输和存储数据，其焦点是数据的内容
    XML 被设计用来结构化、存储以及传输信息
    XML 允许创作者定义自己的标签和自己的文档结构
#### 3.结构
    1.XML 文档声明，在文档的第一行
    2.XML 文档类型定义，即DTD，XXE 漏洞所在的地方
    3.XML 文档元素
#### 4.介绍一下XML文档
    结束-->
                    Hello World
                    001                
                    zhangsan
                    Beijing
                    50
                    002                
                    lisi
                    北京
注：
文档注释用包围，不允许嵌套，允许多行注释。
XML里面的元素 **严格区分大小写** 。
XML文档 **必须有且只有一个根元素** 。（根元素是一个完全包括文档中其他所有元素的元素。）
##### 0x01:XML文档说明
每一个XML文档都以一个XML声明开始，用以指明所用的XML的版本。
XML声明有version 、encoding和standalone特性。
version特性表明这个文档符合XML 1.0规范。
encoding 属性指定了编码格式，默认情况下是 **utf-8** ，这个属性要放在属性前面。
像standalone是XML文档的属性，位于等号左边的是特姓名，而其值位于等号的右边，并用 **双引号或单引号** 括起来。
自定义的元素也可以有一个或多个属性，其属性值使用单引号或者双引号括起来。
如果属性值中有双引号则使用单引号，反之亦然。
属性的形式为：
**属性名= "属性值"，** 比如gender="male"。
多个属性值之间用空格隔开（一个或多个空格都可以）。
在一个元素上，相同的属性只能出现一次。
**属性值不能包含 , &。**
##### 0x02：实体
实体叫ENTITY，实体的作用是避免重复输入。
在XML中，有5个预定义的实体引用
**自定义实体语法：**
     ]>
    引用已定义的实体：
        &实体名;
##### 0x03:处理指令PI
**处理指令** 用于XML解析器传递信息到应用程序。
语法：
PI必须以一个叫做目标的标识符开头，这个标识符遵从如同元素和属性一样的规则， **目标** 是指令所指向的应用的名称， **指令**
是传递给应用程序的信息。
###### 0x04:CDATA节
用于把整段文本解释为纯字符数据而不是标记的情况。
包含大量的、&、或者"字符。CDATA节中的所有字符都会被当做元素字符数据的常量部分，而不是XML标记。
语法：
可以输入任意字符（除]]外），不能嵌套。
                这里放任何内容都是合法的
            ]]> 
##### 0x05:PCDATA节
`PCDATA`表示已解析的字符数据。
`PCDATA` 的意思是被解析的字符数据`（parsed character data）`。可以把字符数据想象为 XML
元素的开始标签与结束标签之间的文本。`PCDATA`
是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。但是，被解析的字符数据不应当包含任何 `& ` 字符；需要使用 `& ` 实体来分别替换它们。
#### 5.什么是DTD
DTD是XML文档的一个格式规范
exp：
    //这一行是 XML 文档定义
    #这里就是为根元素message定义了4个子元素,receiver,sender,header,msg，然后这4个元素必须要出现而且要按照顺序
#### 6.DTD的三种应用形式：
##### **1.内部DTD文档**
    exp:
    ]>
##### **2.外部DTD文档**
    exp:外部的DTD文档
        1
        2
        3
##### **3.内外部DTD文档结合**
    exp:
    ]>
#### 7.DTD元素
#### 8.DTD实体
##### 内部实体
一个实体由三部分构成: `&`符号, 一个实体名称, 以及一个分号 `(;)`
    exp:
    ]>
    &xxe;
    这里定义的实体是xxe,实体的值是hello
##### **外部实体**
`XML`中对数据的引用称为实体，实体中有一类叫外部实体，用来引入外部资源，有`SYSTEM`和`PUBLIC`两个关键字，表示实体来自本地计算机还是公共计算机，外部实体的引用可以利用如下协议
    file:///path/to/file.ext
    http://url/file.ext
    php://filter/read=convert.base64-encode/resource=conf.php
    exp：
    %xxe;]>
    &evil;
    外部evil.dtd的内容
##### 公共实体
#### 9.利用XXE攻击
#### 读取任意文件
##### **有回显**
我们结合具体题目来分析
例题：
**1.picoctf2023 SOAP**
题目提示我们要看系统配置文件/etc/passwd
有三个按钮，都点了一下没有东西
看一下源码，源码有一个xml的js文件看一下
    window.contentType = 'application/xml';
    function payload(data) {
        var xml = '';
        xml += '';
        for(var pair of data.entries()) {
            var key = pair[0];
            var value = pair[1];
            xml += '' + value + '';
        }
        xml += '';
        return xml;
    }
这里有一个XML文档说明
以及说明了XML的根元素为data
抓一下包看一下
这里POST了一个ID的变量，我这里猜测ID就是key（题目的DTD感觉缺失了一些东西）
构造我们的payload
            2&xxe;
发现无回显，继续检查一下，发现我们这里的Content-Type为application/x-www-form-urlencoded，这就是问题所在
改为application/xml,发现成功得到flag
**2.[NCTF 2019]Fake XML cookbook**
随便测试一下，发现通过报错信息回显