simultaneously sends further resource requests, possibly
to new servers. The pattern of exactly when the client has
received, for example, an img tag within an HTML re-
source, causing it to immediately fetch the corresponding
image resource, is a strong feature for the WF attacker.
Under our defense, the client only sends requests after
the web servers have satisﬁed all previous requests. As
a result, the client and proxy both send data in interleav-
ing bursts of incoming and outgoing cells. Walkie-Talkie
does not affect web servers.
The goal of half-duplex communication is
to
reduce the information available to the WF at-
the cell sequence s to the form s =
tacker about
(cid:104)(b1+,b1−), (b2+,b2−), . . .(cid:105), a burst sequence: each bi+
is the number of continuous outgoing cells sent in a burst
and each bi− is that for the succeeding incoming cells.
We can think of half-duplex communication as a way to
group same-direction cells together.
The beneﬁt of using burst sequences instead of cell se-
quences is that they can be molded at little overhead, and
molding them is computationally cheap.
(We describe
molding in detail in Section 4.3). Indeed, previous de-
fenses (Supersequence [31], Glove [20]) have attempted
to mold cell sequences directly, at a much greater cost in
overhead. Another issue with these previous defenses is
that they require the client to know the cell sequences of
many pages, but cell sequences carry a lot of information
and are therefore difﬁcult to deliver and store. Burst se-
quences are much lighter in information content, and we
will show that it is practical to deliver and store hundreds
of thousands of burst sequences.
4.1.1 How browsers work
In this section we describe how browsers use persistent
connections to load data from a web server. We use the
terminology deﬁned in RFC 7230 on “HTTP/1.1 Mes-
sage Syntax and Routing”, especially its discussion on
connection management in Section 6 [10]. While our
implementation is based on Tor Browser, any browser
with persistent connections (i.e., any browser supporting
HTTP/1.1) can be modiﬁed to support half-duplex com-
munication.
During web browsing, clients make requests to ob-
tain data from the server (or post data to the server). To
send requests, the browser creates or re-uses persistent
TCP/IP connections (up to a preset maximum number of
connections). When requests are complete, the browser
may close the attached connections, or keep them alive
as open connections in order to send further requests to
the same server.
As the total number of simultaneously open connec-
tions is (tightly) limited, a browser will often be un-
able to make further requests until current requests are
completed. Until then, the browser stores the request
in a pending request queue. When a request completes
or when a connection dies, the browser enumerates the
pending request queue in an attempt to send requests
(sometimes by creating new connections). During the
enumeration process, the browser may re-use open con-
nections or close them to make room for new connections
to other servers.
4.1.2
Implementation of half-duplex mode
We add two states to the browser to enforce half-duplex
communication: walkie and talkie. Conceptually, the
walkie state corresponds to an idle browser; the talkie
state corresponds to a browser that is actively loading a
page (which may be any number of resources). We ex-
plain each below. Our modiﬁcation only adds 26 lines of
code and removes 12 lines of code from the connection
manager in Tor Browser (which is itself a modiﬁcation
of Firefox), and it is available for download with a link
in Section 7.
The browser starts in the walkie state. When the client
starts any request while in the walkie state, the browser
sends the request immediately, and the browser switches
to the talkie state. After the page has ﬁnished loading,
when there are no pending requests left, the browser will
return to the walkie state.
In the talkie state, the browser is currently loading
a page. The browser always queues new requests in
this state; it never sends requests immediately. Further-
more, the browser does not enumerate the pending re-
quest queue whenever any connection dies or become
idle. Rather, the browser only enumerates the request
1378    26th USENIX Security Symposium
USENIX Association
queue and sends out requests when there are no active
connections left (i.e., all connections have died or be-
come idle).
If instead the request queue is empty, the
browser returns to the walkie state; page loading has
stopped.
We justify why the above states implement half-
duplex communication by making the following obser-
vation: the client never attempts to initiate new HTTP
requests when there are any active connections left. This
is true in both the walkie and the talkie state. Since
an HTTP server does not actively initiate contact with
the client, the lack of active connections means that the
server is never sending data when the client initiates new
HTTP requests.
However, the above alone is not sufﬁcient to ensure
half-duplex communication. This is because making a
new HTTP request is not instantaneous. Unless a pre-
existing open connection to the server exists, the client
must spend an extra round-trip time to open a new con-
nection. The round-trip time creates a time gap that
causes the client to talk when the servers are already re-
sponding to other HTTP requests. One way to solve this
problem is to ensure that the client must establish a con-
nection and send the HTTP request in two bursts rather
than one burst. We implement a more efﬁcient solution
to this problem, as described below.
4.2 Optimistic data
Normally, when a client wishes to load a resource from
a web server, the client makes a TCP connection re-
quest, waits for the server’s request acknowledged mes-
sage, and only then will the client send a GET request to
load the resource. This creates an extra round-trip time
that can be removed by having the client send both the
TCP connection request2 and the HTTP GET request at
the same time. The ﬁnal hop holds the GET request until
the TCP connection is established, and then sends out the
GET request. This is known as optimistic data in Tor, and
Tor Browser has used optimistic data since 2013 [25]. As
optimistic data works on Firefox in general if the client
is using a SOCKS proxy, users of other privacy options
and anonymity networks can use optimistic data as well.
Optimistic data works at the socket level. Normally,
after sending a connection establishment request, the
socket waits for an acknowledgement by the server be-
fore informing the browser that it is ready to send re-
quests. With optimistic data, the socket does not wait,
but rather it immediately pretends to the browser that the
server has established the TCP connection, which causes
the browser to send the GET request immediately. Op-
2The TCP connection request is here an application-layer message
instructing the last hop in the anonymity network to make a TCP con-
nection to the desired destination.
timistic data is useful for our defense, as it allows the
client to establish a new connection and send the rele-
vant request at the same time. Optimistic data reduces
the number of bursts and thus the amount of padding we
need to confuse the attacker.
4.3 Burst molding
Burst molding draws from the concept of Decoy, the WF
defense described by Panchenko et al. [23], which loads
two pages in parallel to confuse the adversary, at an ap-
proximately 100% bandwidth overhead. The adversary
cannot determine which of the two pages is really visited
by the client. We can further leverage the open-world
scenario to improve the defense mechanism: if the real
page is a non-sensitive page, we will choose a sensitive
page as the decoy page, and vice versa. If the client’s sen-
sitive pages are always loaded with popular non-sensitive
pages, the attacker can never determine that she has vis-
ited a sensitive page. This is especially effective if the
non-sensitive page is sufﬁciently popular, in which case
the attacker suffers from the base rate fallacy. It is plain
to see that Decoy is effective no matter what classiﬁer the
WF attacker uses. Burst molding is able to achieve the
same property.
However, instead of actually loading two pages, burst
molding simulates loading two pages by loading the su-
persequence of two burst sequences, which allows a
much lower overhead than loading two pages. A se-
quence s(cid:48) is a supersequence of s if s(cid:48) contains s; this
applies to both cell sequences and burst sequences. The
idea of simulating supersequences is inspired by Super-
sequence [31] and Glove [20]. Allegorically, adding
padding cells is like injection molding: burst molding
adds cells to the original burst sequence so that it is
molded into the supersequence.
i = (b(cid:48)
i+},max{bi−,b(cid:48)
Burst molding adds fake cells to burst sequences
If the number of cells in a burst of the
as follows.
real page is bi = (bi+,bi−), and for a burst of the
decoy page it is b(cid:48)
i+,b(cid:48)
i−), we will send ˆbi =
(max{bi+,b(cid:48)
i−}) cells. We do so for ev-
ery burst in each burst sequence. If the number of bursts
in the two burst sequences is different, we add fake bursts
consisting of entirely fake cells to the shorter sequence.
We do so for each burst, resulting in a signiﬁcantly lower
overhead compared to simply loading two pages at once:
burst molding uses the max, while Decoy would use the
sum of burst sequences. The attacker knows that any
subsequence of the above is possibly the real page—
including the real and decoy pages themselves—but can-
not tell which is the real page.
Fake cells in a burst add to the bandwidth overhead,
but do not add to the time overhead (according to our
deﬁnition in Section 3.2). Fake bursts consisting of en-
USENIX Association
26th USENIX Security Symposium    1379
Minimizing computation.
Wang et al. pointed out that Supersequence requires the
solution of an NP-hard problem [31] to minimize band-
width overhead for cell sequences. Both Supersequence
and Glove use an approximation algorithm to this prob-
lem. This approximation algorithm is nevertheless slow,
and the client would have trouble computing the super-
sequence of a large number of cell sequences. For WT,
computation of burst supersequences is cheap: we sim-
ply take the maximums of several pairs of numbers.
Minimizing client information.
WT, Supersequence, and Glove all require the client to
know some decoy pages. The difference is that WT re-
quires burst sequences, whereas the latter two require cell
sequences. Burst sequences are much easier to store than
cell sequences, because we do not need to store the or-
dering of cells. On our data, we found that we only need
about 20 bytes of information to describe the burst se-
quence of a web page, whereas cell sequences require 36
kB of information on average; burst sequences are about
1800 times more efﬁcient to store and deliver. For exam-
ple, the client can know the burst sequences of 100,000
potential decoy web pages by loading and storing 2 MB
of data. Currently, a Tor client needs to load about 8 MB
of data when starting up Tor for relay discovery, so this
amount is feasible on Tor. Tor directory authorities can
collaborate with each other to collect cell sequence data,
and send the data to clients along with relay data.
4.3.2 Choosing decoy pages
We can optimize the overhead of burst molding by choos-
ing decoy pages cleverly, instead of simply choosing a
random burst sequence. For each sensitive page s in
our set of known burst sequences, we pre-compute its
overhead when sent with each of the set of non-sensitive
pages in our set; suppose non-sensitive page s(cid:48) caused
the minimum overhead when sent with s (conceptually,
s and s(cid:48) are similar cell sequences). Then we pair s and
s(cid:48) together, such that when the client needs to visit s, she
uses s(cid:48) as a decoy page; similarly when the client needs
to visit s(cid:48), she uses s as a decoy page. Each decoy page
is only paired with one other page. The choice of de-
coy pages is then symmetric between sensitive and non-
sensitive pages, and reveals no information as to which
one triggered the cell sequence. This optimization is only
possible if the client knows the burst sequence of her real
page. In case she does not, she defaults to simply choos-
ing a decoy page randomly. Burst molding is therefore
most efﬁcient when the set of decoy pages is large, and
we have seen that a large set of decoy pages is practical.
Some clients may not want to use sensitive pages as
decoys, as they would rather not attract the attention of
eavesdroppers monitoring sensitive page access.
It is
Figure 1: Diagram showing the effect of Walkie-Talkie
on cell sequences. Black circles indicate outgoing cells
and white circles indicate incoming cells. Walkie-Talkie
consists of two steps: half-duplex mode and burst mold-
ing. Half-duplex mode groups cells of the same direction
together, while burst molding adds fake cells to make
sensitive and non-sensitive cell sequences the same.
tirely fake cells add to both the bandwidth and time over-
head. We show the effect of half-duplex communication
and burst molding in Figure 1 as an illustration.
4.3.1 Advantages
We will show that burst molding is more effective and
has lower overhead compared to other defenses in Sec-
tion 5. Burst molding has several other qualitative ad-
vantages, which we describe below:
Cover story.
With burst molding, the client knows and could control
what non-sensitive web pages have been used to disguise
her page accesses. This gives the client an explicit cover
story for her actions. This is not the case in BuFLO [8],
Tamaraw [5], and CS-BuFLO [4], where the client can-
not know or control which other page her cell sequence
appears to come from (rather, the client is only given the
assurance that such a page is likely to exist).
Base rate.
Web pages are accessed with vastly different base rates in
the real world, but most work in the ﬁeld (including all
defenses) has ignored this fact. Our design speciﬁcally
takes this into account, as we use more popular (and less
sensitive) Alexa’s top pages as decoy pages. In the above
scenario, an attacker trying to claim the client visited the
sensitive page is highly likely to be wrong. We further
develop on how varying base rates affect our defense ef-
fectiveness in Section 6.2.
1380    26th USENIX Security Symposium
USENIX Association
Non-Sensitive Cell SequenceSensitive Cell SequenceHalf-Duplex ModeBurst Moldinghowever necessary that sensitive pages should be used
as decoys; otherwise, whenever the attacker detects that
the client is visiting either a sensitive page or a non-
sensitive page, the attacker would know that the non-
sensitive page is a decoy. Further, we argue that the use
of a sensitive decoy page is no more compromising than
the use of proxies or encryption: for instance, the pres-
ence of ciphertext does not suggest that the plaintext is
noteworthy. In particular, the client is never made to visit
sensitive pages under WT, which is an advantage over the
defense of Panchenko et al. [23] She only adds fake cells
in a way that matches the burst sequences of sensitive
pages.
We evaluate a ﬁxed set of decoy pages in this work,
though it is possible for the client to choose her own de-
coy pages. For example, a German-speaking client may
choose popular German pages to be more convincing.
4.4 Practical implementation
In WT, the client and proxy construct the supersequence
together by respectively adding fake cells and bursts to
their outgoing packets. The client chooses the decoy
page and sends the decoy burst sequence to the proxy
before starting a page visit. The proxy counts the num-
ber of sent packets in each burst and adds packets if it is
lower than the number of required packets in the decoy
burst sequence. Therefore, there is almost no computa-
tion overhead to the proxy. WT is deployable: any proxy
that is willing to carry and encrypt trafﬁc for the client
would also be willing to mold it slightly for her privacy.
As a proof of concept, we implemented burst molding
by modifying the Tor client. Our implementation adds
143 lines of code to Tor. We added two new cell types,
a fake cell and a fake burst end cell. During a real burst,