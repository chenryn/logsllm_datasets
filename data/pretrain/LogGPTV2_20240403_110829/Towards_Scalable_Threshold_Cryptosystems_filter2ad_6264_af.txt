the
time for one player to verify its share. The measurement
conﬁguration is (cid:104)20 × 1000(cid:105) for both schemes. In eVSS,
veriﬁcation requires two pairings and one exponentiation in
G1, taking on average 2.15 ms. In AMT VSS, veriﬁcation
requires (cid:98)log (t − 1)(cid:99) + 1 pairings and one exponentiation in
G1, ranging from 2.07 ms (n = 3) to 19.85 ms (n ≈ 221).
3) VSS reconstruction: In Figure 2e, we plot the time to re-
construct the secret. We consider the best-case and worst-case
times, as detailed in §III-C3. For eVSS, “best case” means the
ﬁrst t share veriﬁcations are successful and “worst case” means
the ﬁrst n − t are unsuccessful (see §III-C3). The measure-
ment conﬁguration is (cid:104)5 × 1000, 500, 250, 120, 60, 30, 15, 5 ×
10, 8, 4, 2, 1(cid:105) for eVSS and (cid:104)9×100, 4×10, 4, 2, 5×1(cid:105) for AMT
VSS. In both protocols, the (fast) Lagrange interpolation time
is insigniﬁcant compared to the time to verify shares during
reconstruction (e.g., for n ≈ 221 in eVSS, interpolation is only
25 secs out of the total 34 mins worst-case time).
AMT VSS’s best-case is very close to eVSS’s worst-case.
This is because, with the help of memoization, AMT VSS’s
best case only computes ≤ 2n − 1 pairings (i.e., the number
of nodes in a full binary tree with n leaves). This closely
matches the 2n pairings in eVSS’s worst case. (In practice, we
replace n of these pairings and G1 exponentiations by n GT
exponentiations, which are slightly faster.) AMT VSS’s worst
case is 1.12× to 6× slower than eVSS’s. But we show next
that our faster dealing more than makes up for this. Finally,
eVSS’s best-case time is half its worst-case time, as expected.
4) VSS end-to-end time: Finally, we consider the end-to-
end time, which is the sum of the sharing and reconstruction
phase times. (Again, a limitation of our work is ignoring the
overhead of the complaint round in the worst case.) Figure 2f
gives the best- and worst-case end-to-end times. The key
takeaway is that AMT VSS’s smaller dealing time makes up
for the increase in its veriﬁcation round and reconstruction
phase times. AMT VSS outperforms eVSS’s worst-case time
at n ≥ 255 and its best-case time at n ≥ 63. For example,
for large n = 16, 383, we reduce the worst-case time from 1.1
hrs to 2.9 mins and the best-case time from 1.1 hrs to 51.48
secs. The best case improvement ranges from 1.26× (n = 63)
to 4484× (n ≈ 221). The worst case improvement ranges from
1.26× (n = 255) to 1055× (n ≈ 221). Thus, we conclude AMT
VSS scales better than eVSS.
C. Distributed Key Generation Experiments
Our DKG experiments mostly tell the same story as our
VSS experiments: AMTs drastically reduce the dealing time
of DKG players, which more than makes up for the slight
increase in veriﬁcation and reconstruction time. However,
AMT DKG has a 1.2× to 5.2× communication overhead during
dealing. Still, we believe this is worth the drastic reduction in
end-to-end times (see §IV-C4).
1) DKG dealing: DKG dealing time is equal
to VSS
dealing time (see §IV-B1) plus the time to compute a KZG
proof and a NIZKPoK for gfi(0). However, as n increases, the
time to compute these two proofs pales in comparison to the
time to compute the n evaluation proofs. Thus, in Figure 2b,
we treat DKG dealing times as equal to VSS dealing times.
As a result, the same observations apply here as in §IV-B1:
AMTs drastically reduce dealing times.
shares as sj = (cid:80)
2) DKG veriﬁcation round: We consider both the best case
and the worst case veriﬁcation time, as discussed in §III-D2.
In our best-case experiment, each player j aggregates all its
i∈[n] si,j and their evaluation proofs as
πj. Then, j veriﬁes sj against πj. Similarly, j aggregates
and efﬁciently veriﬁes all its gfi(0)’s and their KZG proofs.
In the worst-case experiment, j individually veriﬁes the si,j
shares and the gfi(0)’s. Importantly, in both experiments, j
individually veriﬁes all n NIZKPoKs for gfi(0) in Θ(n) time.
The two experiments are meant to bound the time of a realistic
implementation that carefully uses batch veriﬁcation [10], [70]
to not exceed the worst-case time too much.
The best-case eJF-DKG measurement conﬁguration is
(cid:104)8 × 100, 50, 25, 12, 9 × 10(cid:105) and the worst-case is (cid:104)5 ×
100, 50, 25, 12, 12×10(cid:105). For AMT DKG, the best-case conﬁg-
uration is (cid:104)12×100, 80, 40, 20, 16, 8, 4, 3, 2(cid:105) and the worst-case
is (cid:104)5×100, 4×80, 40, 20, 8, 4, 2, 6×1(cid:105). The average per-player
veriﬁcation times are plotted in Figure 2g. In the best case,
both schemes perform roughly the same, since the veriﬁcation
of the n NIZKPoKs quickly starts dominating the aggregated
proof veriﬁcation. In the worst case, AMT DKG time ranges
from 8.96 ms (n = 3) to 12.92 hrs (n ≈ 221). In contrast, eJF-
DKG time ranges from 8.92 ms to 2.59 hrs (1.5× to 5× faster).
Nonetheless, eJF-DKG remains slower overall due to its much
slower dealing (see §IV-C4). Both best- and worst-case times
can be reduced by batch-verifying NIZKPoKs, which resemble
Schnorr signatures [60] and are amenable to batching [74].
3) DKG reconstruction: Here the measurement conﬁgura-
tion is (cid:104)4 × 1000, 200, 50, 25, 13 × 10(cid:105) and times are plotted
in Figure 2h. The best case is very fast in both eJF-DKG and
AMT DKG, taking only 24.71 secs for t = 220, since both
schemes interpolate the secret s without verifying shares and
check it against gs (see §III-D3). For the worst case, the time
is the sum of (1) the (failed) best-case reconstruction time and
(2) the worst-case time to identify t valid shares from n shares.
Since the best case is very fast, the DKG worst-case time (see
Figure 2h) looks almost identical to its VSS counterpart (see
Figure 2e). Note that the same AMT VSS speed-up techniques
for ﬁnding t valid shares apply in AMT DKG (see §III-C3).
AMT DKG’s worst case is anywhere from 1.1× to 6× slower
than eJF-DKG’s, much like AMT VSS. However, as we show
next, AMT DKG’s faster dealing more than makes up for this.
4) DKG end-to-end time: Similar to the VSS experiments
in §IV-B4, we consider the end-to-end time. Figure 2i plots
the best- and worst-case end-to-end times and shows that
AMT DKG outperforms eJF-DKG starting at n ≥ 63 (in the
best case) and at n ≥ 1023 (in the worst case). This is a
direct consequence of AMT VSS outperforming eVSS, since
the DKG protocols use these VSS protocols internally. For
example, for large n = 16, 383, we reduce the worst-case
end-to-end time from 1.19 hrs to 7.12 mins and the best-case
time from 1.16 hrs to 25.45 secs. The improvement in best-
case end-to-end time ranges from 1.6× (n = 63) to 8607×
(n ≈ 221) and, in the worst case, from 1.3× to 427×. Thus,
we conclude AMT DKG scales better than eJF-DKG.
5) DKG communication: We estimate each player’s upload
and download during the dealing round. For upload, each
eJF-DKG and AMT DKG player i has to broadcast a KZG
commitment gfi(τ ) (32 bytes) and a commitment gfi(0) with
a NIZKPoK and a KZG proof (32 + 64 + 32 bytes). Then, i
has to send each j ∈ [n] its share (32 bytes) with an evaluation
proof (32 bytes for KZG or ((cid:98)log (t − 1)(cid:99) + 1) · 32 bytes for
AMT). For download, each player i, has to download n − 1
shares, each with their KZG commitment and evaluation proof,
plus n− 1 gfj (0)’s, each with their NIZKPoK and KZG proof.
Note that AMT DKG uses KZG proofs for gfi(0) to minimize
its communication overhead.
We plot the upload and download numbers for both schemes
in Figure 2c. eJF-DKG’s per-player upload ranges from 288
bytes to 128 MiB while download ranges from 448 bytes to
448 MiB. AMT VSS’s upload overhead ranges from 1.0×
to 10.5× and its download overhead ranges from 1.0× to
3.7×. Overall, AMT VSS’s upload-and-download overhead
ranges from 1.0× to 5.2×. Thus, we believe the 8607× and
427× reductions in best- and worst-case end-to-end times are
sufﬁciently large to make up for this overhead.
V. DISCUSSION AND FUTURE WORK
1) Generating public parameters: Similar to eVSS and
eJF-DKG, our protocols require a trusted setup to generate
(cid:96)-SDH public parameters. Fortunately, this setup needs to be
done only once and can be securely implemented via MPC
protocols [75], [76]. In fact, currently deployed systems have
already demonstrated the practicality of this approach. In 2018,
approximately 200 participants used an MPC [76] to generate
new public parameters for the Sapling version of Zcash [77].
The MPC protocol allowed anyone to participate and only
required one honest party, making it a very good candidate.
2) Sortitioned DKG: To further reduce communication and
computation, we propose a sortitioned DKG where only a
small, random committee of c < n players deal. The key
question is where does the randomness to pick the committee
come from? When a DKG runs many times, this randomness
could come from previous DKG runs (e.g., DKGs for Schnorr
TSS nonces). To bootstrap securely, the ﬁrst DKG run would
be with a full committee of size c = n. When a DKG runs
only once, such as when distributing the secret key of a (t, n)
TSS, the c players could be a decentralized cothority [41]
different than the TSS signers. The cothority would run the
DKG dealing round while the n signers would run the DKG
veriﬁcation round (see Algorithm 2). The complaint round
would be split: accused cothority members would compute
the KZG batch proofs (see §III-C2) while the n signers
would receive and verify those proofs. Importantly, our AMT
technique would help cothority members deal much faster to
the n signers. We leave deﬁning and proving the security of
sortitioned DKGs to future work.
3) Arbitrary points: AMTs can be generalized to any set
of points {xi}i∈[n] (not just xi = ωi−1
N ) for which veriﬁers do
not have the necessary accumulator commitments. The accu-
mulators gaw(τ ) can be included as part of the proof but along
with (1) a subset proof w.r.t. the parent accumulator and (2) an
“extractable” counterpart gαaw(τ ), where α is another trapdoor.
The asymptotic proof size remains the same but will increase
in practice by 4x (with Type III pairings). Furthermore, this
construction will need extra public parameters of the form
(gατ i
)i∈[0,(cid:96)]. On the other hand, proof veriﬁers now need
Θ(1) rather than Θ(log n) public parameters (see §§III-B4
and III-C4). We leave proving this construction secure under
(cid:96)-PKE [78] to future work.
4) Information-theoretic hiding AMTs: We can devise an
information-theoretic hiding version of our AMT proofs that
is compatible with information-theoretic hiding KZG com-
mitments [14]. This version of AMTs can be used to speed
up the unbiasable New-DKG protocol [16]. Let h = gκ be
another generator of G such that nobody knows the discrete
log κ = logg(h). Assume that, in addition to PPq(g; τ ),
we also have public parameters PP(cid:96)(h; τ ). An information-
theoretic hiding KZG commitment to φ of degree d is c =
gφ(τ )hr(τ ) = gφ(τ )+κr(τ ) where r is a random, degree d
polynomial [14]. Note that c is just a commitment to the
polynomial ψ(x) = φ(x) + κr(x). As a consequence, all we
have to do is build an AMT for ψ. For this, we compute an
AMT for φ with public parameters PP(cid:96)(g; τ ) and one for r but
with parameters PP(cid:96)(h; τ ). By homomorphically combining
these two AMTs we get exactly the AMT for ψ (see §III-D1).
We leave proving this construction is information-theoretic
hiding to future work.
5) Vector commitments (VCs): AMTs naturally give rise to
a VC scheme with logarithmic-sized proofs [79]. Similar to
the multivariate polynomial-based VC from [80], this scheme
would also support efﬁciently updating proofs and updating
VC digests after vector updates. Thus, our VC could also be
used for building stateless cryptocurrencies [80], [81]. Our VC
can be extended with zero-knowledge-like properties using the
information-theoretic variant of AMTs (see §V-4).
6) Batch AMT veriﬁcation: The efﬁcient reconstruction
techniques from §III-C3 reduced the number of pairings when
verifying an AMT, but still required Θ(t+(n−t) log t) pairings
in the worst case. At the cost of doubling the prover time
and proof size, this can be reduced to ≈ 2n − 1 pairings,
independent of how many proofs are valid. The key idea is to
also include commitments to the remainder polynomials from
the multipoint evaluation tree in the AMT (see Figure 1). This
way, an entire AMT tree can be veriﬁed node-by-node, top-to-
bottom by checking that the division at each node is correct.
We leave proving this approach secure to future work.
VI. CONCLUSION
We introduced new techniques that both speed up and
scale threshold cryptosystems. First, we showed how com-
puting Lagrange coefﬁcients efﬁciently can drastically reduce
threshold signature aggregation time. We believe our fast BLS
threshold signature scheme can be used to design simple,
large-scale, decentralized random beacons. Second, we intro-
duced a quasilinear time technique for precomputing proofs
in KZG polynomial commitments. When applied to VSS and
DKG protocols, this technique drastically reduces computation
without increasing communication too much. We left scaling
the broadcast channel and the complaint round to future work.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System,” https:
//bitcoin.org/bitcoin.pdf, 2008, Accessed: 2017-03-08.
[2] G. Wood, “Ethereum: A Secure Decentralised Generalised Transaction
Ledger,” http://gavwood.com/paper.pdf, Accessed: 2016-05-15.
[3] G. Golan Gueta, I. Abraham, S. Grossman, D. Malkhi, B. Pinkas,
M. Reiter, D. Seredinschi, O. Tamir, and A. Tomescu, “SBFT: A
Scalable and Decentralized Trust Infrastructure,” in DSN’19.
[4] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand:
Scaling Byzantine Agreements for Cryptocurrencies,” in ACM SOSP’17.
[5] T. Hanke, M. Movahedi, and D. Williams, “DFINITY Technology
Overview Series, Consensus System,” CoRR, vol. abs/1805.04548,
2018. [Online]. Available: http://arxiv.org/abs/1805.04548
[6] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
Provably Secure Proof-of-Stake Blockchain Protocol,” in CRYPTO’17.
[7] B. David, P. Gaˇzi, A. Kiayias, and A. Russell, “Ouroboros Praos: An
Adaptively-Secure, Semi-synchronous Proof-of-Stake Blockchain,” in
EUROCRYPT’18.
[8] C. Badertscher, P. Gaˇzi, A. Kiayias, A. Russell, and V. Zikas, “Ouroboros
Genesis: Composable Proof-of-Stake Blockchains with Dynamic Avail-
ability,” in ACM CCS’18.
[9] E. Syta, P. Jovanovic, E. K. Kogias, N. Gailly, L. Gasser, I. Khofﬁ, M. J.
Fischer, and B. Ford, “Scalable Bias-Resistant Distributed Randomness,”
in IEEE S&P’17.
[10] A. Boldyreva, “Threshold Signatures, Multisignatures and Blind Signa-
tures Based on the Gap-Difﬁe-Hellman-Group Signature Scheme,” in
PKC’03.
[11] V. Shoup, “Practical Threshold Signatures,” in EUROCRYPT’00.
[12] T. P. Pedersen, “Non-Interactive and Information-Theoretic Secure Ver-
iﬁable Secret Sharing,” in CRYPTO’91.
[13] B. Chor, S. Goldwasser, S. Micali, and B. Awerbuch, “Veriﬁable Secret
Sharing and Achieving Simultaneity in the Presence of Faults,” in IEEE