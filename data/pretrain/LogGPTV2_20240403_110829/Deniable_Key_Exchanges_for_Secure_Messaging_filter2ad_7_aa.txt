title:Deniable Key Exchanges for Secure Messaging
author:Nik Unger and
Ian Goldberg
Deniable Key Exchanges for Secure Messaging
Cheriton School of Computer Science
Cheriton School of Computer Science
Ian Goldberg
University of Waterloo,
Waterloo, ON, Canada
PI:EMAIL
Nik Unger
University of Waterloo,
Waterloo, ON, Canada
PI:EMAIL
ABSTRACT
In the wake of recent revelations of mass government surveillance,
secure messaging protocols have come under renewed scrutiny. A
widespread weakness of existing solutions is the lack of strong
deniability properties that allow users to plausibly deny sending
messages or participating in conversations if the security of their
communications is later compromised. Deniable authenticated key
exchanges (DAKEs), the cryptographic protocols responsible for
providing deniability in secure messaging applications, cannot cur-
rently provide all desirable properties simultaneously.
We introduce two new DAKEs with provable security and denia-
bility properties in the Generalized Universal Composability frame-
work. Our primary contribution is the introduction of Spawn, the
ﬁrst non-interactive DAKE that offers forward secrecy and achieves
deniability against both ofﬂine and online judges; Spawn can be
used to improve the deniability properties of the popular TextSe-
cure secure messaging application. We also introduce an interactive
dual-receiver cryptosystem that can improve the performance of the
only existing interactive DAKE with competitive security proper-
ties. To encourage adoption, we implement and evaluate the per-
formance of our schemes while relying solely on standard-model
assumptions.
Categories and Subject Descriptors
K.4.1 [Computers and Society]: Public Policy Issues—Privacy;
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and protection
Keywords
Deniability, authenticated key exchanges, secure messaging, uni-
versal composability, online repudiation
1.
INTRODUCTION
Our society today makes use of large-scale communications plat-
forms such as the Internet, mobile networks, and leased lines to re-
liably deliver our most critical discourse. However, recent revela-
tions of mass surveillance by intelligence services have highlighted
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813616 .
the lack of security and privacy in our messaging tools and spurred
demand for better solutions [20]. A widespread weakness in cur-
rent secure messaging tools is the lack of strong deniability proper-
ties [28]. Deniable secure messaging schemes allow conversation
participants to later plausibly deny sending messages, or even par-
ticipating in a conversation, while still providing authentication to
the participants at the time of the conversation. This notion was
popularized in the secure messaging context with the release of
Off-the-Record Messaging (OTR) a decade ago [3]. Unfortunately,
the OTR protocol is not well suited to modern settings such as mo-
bile device communication due to its requirement for synchronous
connections. Protocol designers seeking to achieve OTR-like de-
niability properties in these environments have been forced to turn
to the cryptographic literature, and have found that existing primi-
tives are not well suited to the task. Different schemes deﬁne deni-
ability in slightly different ways, and no existing secure messaging
schemes can be said to be deniable under all deﬁnitions [28]. Some
practitioners have also prematurely dismissed deniability as an im-
practical property for modern secure messaging applications [15].
Most secure messaging solutions incorporate an authenticated
key exchange (AKE) protocol as part of their construction. The
goal of an AKE is to establish a fresh shared session key and to
authenticate the conversation participants to each other. If the ses-
sion key cannot be derived from a protocol transcript even when
any long-term secret keys are compromised in the future, then the
AKE is said to have forward secrecy. A deniable authenticated key
exchange (DAKE) is an AKE that additionally allows participants
to plausibly deny some aspect of their participation in the protocol.
to improve the practicality of
strong deniability for secure messaging over synchronous connec-
tions, and to introduce strong deniability to asynchronous messag-
ing applications such as text messaging. To achieve these goals,
we present two new DAKEs that allow deniable message trans-
mission and participation in conversations, even when malicious
insiders secretly communicate with judges during protocol execu-
tion. Among them, we introduce the ﬁrst non-interactive DAKE
achieving both message and participation deniability against these
powerful judges while also offering forward secrecy. This DAKE
is the ﬁrst of its kind that can be used in secure messaging ap-
plications such as TextSecure [19]. Our DAKEs permit sessions
between any parties to be simulated ofﬂine with nothing more than
the public keys of the alleged participants. We also present a tech-
nique that improves the performance of the only existing (3-ﬂow)
scheme achieving these levels of deniability. We provide open im-
plementations of our schemes to encourage adoption.
This work has two main goals:
The remainder of this paper is structured as follows: Section 2
discusses the meaning of deniability for secure messaging applica-
tions; Section 3 describes the cryptographic primitives that we em-
ploy; Section 4 describes an existing scheme with comparable deni-
ability properties, as well as our performance enhancements; Sec-
tion 5 presents our new DAKE based on ring signatures; Section 6
introduces our one-round DAKE and discusses non-interactive use;
Section 7 outlines our implementations, which are evaluated in Sec-
tion 8; and Section 9 provides our concluding thoughts.
2. DENIABILITY
When we discuss deniability, we must do so with respect to an
action and a type of judge. We say that an action is deniable with
respect to a given judge if the judge cannot be convinced that an
individual performed the action. To make such a statement, we
need to deﬁne the environment in which the judge resides, and the
type of evidence that is required to convince the judge that the ac-
tion was performed. If an action is deniable with respect to a judge,
we say that individuals can “plausibly deny” performing the action.
Note that this deniability does not constitute a proof that the parties
did not perform the action; plausible deniability simply denotes a
lack of convincing proof.
There are two primary aspects of conversations that can be called
deniable. We can say that messages transmitted during a conversa-
tion are deniable (message repudiation), but we can also say that
participation in the conversation itself is deniable (participation re-
pudiation). These properties are orthogonal; a protocol may offer
one or the other, both, or neither. For example, messages sent us-
ing the well-known OpenPGP protocol are signed with the sender’s
long-term key, but the signed message does not include the recipi-
ent’s identity. An OpenPGP-signed email can be used as proof that
the message was signed, and presumably authored, by the sender,
but not that the sender was in a conversation with the ostensible
recipient. Consequently, OpenPGP offers participation repudiation
but not message repudiation.
2.1
Judges
When deﬁning a judge, we must deﬁne the conditions under
which the judge will believe that a user performed a given action,
such as sending a message or participating in a conversation. Un-
fortunately, we must make some assumptions about the behavior
of judges if we wish to make meaningful statements about the de-
niability of secure messaging protocols. If we allow judges to use
arbitrary criteria to deliver judgments, then we can never conclude
that an action is deniable.
In the secure messaging literature, it
is common to consider only judges that are completely rational,
and decide on the plausibility of an event based solely on the ev-
idence presented to them. The only acceptable evidence for these
judges is a valid cryptographic proof, veriﬁable by the judge, show-
ing that the event must have occurred. In reality, of course, judges
are more lenient, and routinely accept plaintext transcripts as evi-
dence. The goal of deniable protocols is to not supply additional
evidence against a participant, in the form of a hard-to-deny cryp-
tographic proof. Concretely, a messaging protocol that digitally
signs every message with the sender’s long-term key would not
satisfy our notion of deniability, while an unencrypted and unau-
thenticated protocol would.
Our model of the judge should accurately reﬂect the quantity
and type of evidence required to accept a claim. For example, a
digital signature demonstrating that a message was sent either by
an accused party or by a speciﬁc third party under the condition that
this third party had access to unrealistically powerful computational
resources may not convincingly provide plausible deniability. If the
model of the judge is inaccurate, then we may inadvertently reject
deniable schemes or admit non-deniable schemes.
In this paper, we consider only protocols that offer strong deni-
ability. These protocols allow conversation transcripts to be forged
by any user with the ability to perform basic computations, while
still providing authentication to conversation participants. Conse-
quently, no unforgeable cryptographic proofs can be produced to
convince a judge that sessions of these protocols took place.
In addition to the requirements for evidence, we must also deﬁne
the judge’s relationship to the protocol participants and the judge’s
capabilities. Two primary types of judges have been discussed in
the secure messaging literature: ofﬂine judges, and online judges.
An ofﬂine judge examines the transcript of a protocol execution
that occurred in the past, and decides whether or not the event in
question occurred. A judge of this type is given a protocol tran-
script, showing all of the (usually encrypted) transmitted data, and
a chat transcript, showing the high-level chat messages that were
exchanged. The judge must then decide whether the protocol and
chat transcript constitute proof that the action in question occurred.
When proving the deniability of protocols, it is also normally as-
sumed that an ofﬂine judge is given access to the long-term secrets
of all parties named in the transcript. Our goal is to prevent judges
from distinguishing between real and fake transcripts.
An online judge interacts with a protocol participant, referred
to as the informant, while the secure messaging protocol is being
executed. The judge has a secure and private connection to the in-
formant, and may instruct the informant to perform actions in the
protocol. The goal of the judge is to evaluate whether the actions
of other participants in the protocol are actually occurring, or if
the informant is fabricating the conversation (i.e., they are a mis-
informant). The judge does not have any direct visibility into the
network, but it may instruct the informant to corrupt participants,
compromising their secret keys. The judge is notiﬁed when a par-
ticipant is corrupted.
2.2 Practicality of Deniability
The secure messaging community has previously debated wheth-
er or not deniability should be implemented in end-user tools [15].
There are two main arguments against designing deniable messag-
ing protocols: deniability properties are too expensive to imple-
ment, and these properties are not useful in practice. However, the
relevant deniability properties for secure messaging protocols can
now be implemented relatively inexpensively and without any us-
ability consequences [28].
While the secure messaging literature mostly focuses on judges
that understand cryptography and rely on cryptographic proofs to
make decisions, real-world judges often do not behave in this man-
ner, and routinely accept plaintext transcripts. We cannot design
protocols that provide more deniability than plaintext; however, we
can easily design protocols that provide less deniability—while a
real-world judge of this type may not accept arguments that a plain-
text transcript could theoretically be forged, they may be likely to
accept testimony from experts that a protocol containing a digital
signature could not be forged. For these reasons, we should strive
to design deniable protocols to avoid unintentionally incriminating
users.
3. CRYPTOGRAPHIC PRIMITIVES
We make use of several specialized cryptosystems when con-
structing our schemes. This section provides high-level deﬁnitions
of these underlying cryptosystems and outlines our notation.
We write r $←− S to denote that r is assigned an element from
set S selected uniformly at random. For all schemes, we implic-
itly assume that a security parameter λ is provided to control the
security level of the system. We abuse notation by assuming that
r $←− {0, 1}λ produces a random binary value with an appropriate
length for the task at hand, with a security level controlled by λ.
Several functions we deﬁne accept a parameter r that denotes the
randomness associated with operations; if omitted, r $←− {0, 1}λ is
used. We denote concatenation of values with the (cid:107) operator. We
implicitly assume that all concatenated values are of a ﬁxed width.
We denote a traditional digital signature scheme as three func-
tions: SigGen(r), a key generation function producing key pair
(pk, sk); Sig(pk, sk, m, r), a signing function producing a signa-
ture σ of message m; and Vrf(pk, σ, m), a veriﬁcation function.
Our only security requirements for digital signature schemes are
correctness, soundness, and consistency [5]. Similarly, we denote
a public-key cryptosystem as: PKGen(r), PKEnc(pk, m, r), and
PKDec(pk, sk, γ), where γ is the ciphertext. Our constructions
that make use of public-key cryptosystems require that they are
IND-CCA2 secure [22].
Dual-Receiver Encryption (DRE). It is sometimes desir-
able to encrypt a message such that it can only be read by either of
two named recipients, and that anyone can verify this fact. Dual-
receiver encryption (DRE) is a type of specialized cryptosystem
that enables publicly veriﬁable encryptions of messages for two re-
ceivers. A DRE scheme consists of three functions: DRGen(r),
a key generation function; DREnc(pk1, pk2, m, r), an encryption
function; and DRDec(pk1, pk2, ski, γ), a decryption function for
i ∈ {1, 2}. DREnc encrypts a message m under two public keys:
pk1 and pk2. To achieve correctness, DRE schemes must sat-
isfy DRDec(pk1, pk2, ski, DREnc(pk1, pk2, m, r)) = m for any
(pk1, sk1) and (pk2, sk2) produced by DRGen, i ∈ {1, 2}, and
any m and r. We require DRE schemes to exhibit symmetry, pub-
lic veriﬁability, completeness, soundness, and dual-receiver IND-
CCA1 security, as deﬁned by Chow et al. [9].
Non-Committing Encryption (NCE). A public-key cryp-
tosystem is called non-committing if, in addition to offering the
standard functions of a PKE scheme, it can also produce “rigged”
ciphertexts [6]. A non-committing cryptosystem consists of ﬁve
functions: NCGen, NCEnc, and NCDec, which behave identi-