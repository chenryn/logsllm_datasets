396 
CHAPTER 10 Management, diagnostics, and tracing
HKEY_USERS
HKU contains a subkey for each loaded user profile and user class registration database on the system. It 
also contains a subkey named HKU\.DEFAULT that is linked to the profile for the system (which is used by 
processes running under the local system account and is described in more detail in the section “Services” 
later in this chapter). This is the profile used by Winlogon, for example, so that changes to the desktop 
background settings in that profile will be implemented on the logon screen. When a user logs on to a 
system for the first time and her account does not depend on a roaming domain profile (that is, the user’s 
profile is obtained from a central network location at the direction of a domain controller), the system 
creates a profile for her account based on the profile stored in %SystemDrive%\Users\Default.
The location under which the system stores profiles is defined by the registry value HKLM\
Software\Microsoft\Windows NT\CurrentVersion\ProfileList\ProfilesDirectory, which is by default 
set to %SystemDrive%\Users. The ProfileList key also stores the list of profiles present on a system. 
Information for each profile resides under a subkey that has a name reflecting the security identifier 
(SID) of the account to which the profile corresponds. (See Chapter 7, “Security,” of Part 1 for more 
information on SIDs.) Data stored in a profile’s key includes the time of the last load of the profile in the 
LocalProfileLoadTimeLow value, the binary representation of the account SID in the Sid value, and the 
path to the profile’s on-disk hive (Ntuser.dat  file, described later in this chapter in the “Hives” section) 
in the directory given by the ProfileImagePath value. Windows shows profiles stored on a system in the 
User Profiles management dialog box, shown in Figure 10-1, which you access by clicking Configure 
Advanced User Profile Properties in the User Accounts Control Panel applet.
FIGURE 10-1 The User Profiles management dialog box.
CHAPTER 10 Management, diagnostics, and tracing
397
EXPERIMENT: Watching profile loading and unloading
You can see a profile load into the registry and then unload by using the Runas command to 
launch a process in an account that’s not currently logged on to the machine. While the new 
process is running, run Regedit and note the loaded profile key under HKEY_USERS. After termi-
nating the process, perform a refresh in Regedit by pressing the F5 key, and the profile should no 
longer be present.
HKEY_CLASSES_ROOT
HKCR consists of three types of information: file extension associations, COM class registrations, and 
the virtualized registry root for User Account Control (UAC). (See Chapter 7 of Part 1 for more informa-
tion on UAC.) A key exists for every registered file name extension. Most keys contain a REG_SZ value 
that points to another key in HKCR containing the association information for the class of files that 
extension represents.
For example, HKCR\.xls would point to information on Microsoft Office Excel files. For example, 
the default value contains “Excel.Sheet.8” that is used to instantiate the Excel COM object. Other keys 
contain configuration details for all COM objects registered on the system. The UAC virtualized registry 
is located in the VirtualStore key, which is not related to the other kinds of data stored in HKCR.
The data under HKEY_CLASSES_ROOT comes from two sources:
I 
The per-user class registration data in HKCU\SOFTWARE\Classes (mapped to the file on hard
disk \Users\\AppData\Local\Microsoft\Windows\Usrclass.dat)
I 
Systemwide class registration data in HKLM\SOFTWARE\Classes
EXPERIMENT: Watching profile loading and unloading
You can see a profile load into the registry and then unload by using the Runas command to 
launch a process in an account that’s not currently logged on to the machine. While the new 
process is running, run Regedit and note the loaded profile key under HKEY_USERS. After termi-
nating the process, perform a refresh in Regedit by pressing the F5 key, and the profile should no 
longer be present.
398 
CHAPTER 10 Management, diagnostics, and tracing
There is a separation of per-user registration data from systemwide registration data so that roam-
ing profiles can contain customizations. Nonprivileged users and applications can read systemwide 
data and can add new keys and values to systemwide data (which are mirrored in their per-user data), 
but they can only modify existing keys and values in their private data. It also closes a security hole: 
a nonprivileged user cannot change or delete keys in the systemwide version HKEY_CLASSES_ROOT; 
thus, it cannot affect the operation of applications on the system.
HKEY_LOCAL_MACHINE
HKLM is the root key that contains all the systemwide configuration subkeys: BCD00000000, COMPONENTS 
(loaded dynamically as needed), HARDWARE, SAM, SECURITY, SOFTWARE, and SYSTEM.
The HKLM\BCD00000000 subkey contains the Boot Configuration Database (BCD) information 
loaded as a registry hive. This database replaces the Boot.ini file that was used before Windows Vista 
and adds greater flexibility and isolation of per-installation boot configuration data. The BCD00000000 
subkey is backed by the hidden BCD file, which, on UEFI systems, is located in \EFI\Microsoft\Boot. (For 
more information on the BCD, see Chapter 12, "Startup and shutdown”).
Each entry in the BCD, such as a Windows installation or the command-line settings for the instal-
lation, is stored in the Objects subkey, either as an object referenced by a GUID (in the case of a boot 
entry) or as a numeric subkey called an element. Most of these raw elements are documented in the 
BCD reference in Microsoft Docs and define various command-line settings or boot parameters. The 
value associated with each element subkey corresponds to the value for its respective command-line 
flag or boot parameter.
The BCDEdit command-line utility allows you to modify the BCD using symbolic names for the ele-
ments and objects. It also provides extensive help for all the boot options available. A registry hive can 
be opened remotely as well as imported from a hive file: you can modify or read the BCD of a remote 
computer by using the Registry Editor. The following experiment shows you how to enable kernel de-
bugging by using the Registry Editor.
EXPERIMENT: Remote BCD editing
Although you can modify offline BCD stores by using the bcdedit /store command, in this 
experiment you will enable debugging through editing the BCD store inside the registry. For the 
purposes of this example, you edit the local copy of the BCD, but the point of this technique is 
that it can be used on any machine’s BCD hive. Follow these steps to add the /DEBUG command-
line flag:
1.
Open the Registry Editor and then navigate to the HKLM\BCD00000000 key. Expand
every subkey so that the numerical identifiers of each Elements key are fully visible.
EXPERIMENT: Remote BCD editing
Although you can modify offline BCD stores by using the bcdedit /store command, in this 
experiment you will enable debugging through editing the BCD store inside the registry. For the 
purposes of this example, you edit the local copy of the BCD, but the point of this technique is 
that it can be used on any machine’s BCD hive. Follow these steps to add the /DEBUG command-
line flag:
1.
Open the Registry Editor and then navigate to the HKLM\BCD00000000 key. Expand 
every subkey so that the numerical identifiers of each Elements key are fully visible.
CHAPTER 10 Management, diagnostics, and tracing
399
2.
Identify the boot entry for your Windows installation by locating the Description with
a Type value of 0x10200003, and then select the 12000004 key in the Elements tree. In
the Element value of that subkey, you should find the name of your version of Windows, 
such as Windows 10. In recent systems, you may have more than one Windows installa-
tion or various boot applications, like the Windows Recovery Environment or Windows 
Resume Application. In those cases, you may need to check the 22000002 Elements 
subkey, which contains the path, such as \Windows.
3.
Now that you’ve found the correct GUID for your Windows installation, create a new
subkey under the Elements subkey for that GUID and name it 0x260000a0. If this subkey
already exists, simply navigate to it. The found GUID should correspond to the identifi-
er value under the Windows Boot Loader section shown by the bcdedit /v command
(you can use the /store command-line option to inspect an offline store file).
4.
If you had to create the subkey, now create a binary value called Element inside it.
5.
Edit the value and set it to 1. This will enable kernel-mode debugging. Here’s what these
changes should look like:
Note The 0x12000004 ID corresponds to BcdLibraryString_ApplicationPath, whereas the 
0x22000002 ID corresponds to BcdOSLoaderString_SystemRoot. Finally, the ID you added, 
0x260000a0, corresponds to BcdOSLoaderBoolean_KernelDebuggerEnabled. These values 
are documented in the BCD reference in Microsoft Docs.
2.
Identify the boot entry for your Windows installation by locating the Description with 
a Type value of 0x10200003, and then select the 12000004 key in the Elements tree. In 
the Element value of that subkey, you should find the name of your version of Windows, 
Element value of that subkey, you should find the name of your version of Windows, 
Element
such as Windows 10. In recent systems, you may have more than one Windows installa-
tion or various boot applications, like the Windows Recovery Environment or Windows 
Resume Application. In those cases, you may need to check the 22000002 Elements 
subkey, which contains the path, such as \Windows.
3.
Now that you’ve found the correct GUID for your Windows installation, create a new 
subkey under the Elements subkey for that GUID and name it 0x260000a0. If this subkey 
already exists, simply navigate to it. The found GUID should correspond to the identifi-
er value under the Windows Boot Loader section shown by the bcdedit /v command 
(you can use the /store command-line option to inspect an offline store file).
4.
If you had to create the subkey, now create a binary value called Element inside it.
5.
Edit the value and set it to 1. This will enable kernel-mode debugging. Here’s what these 
changes should look like:
400 
CHAPTER 10 Management, diagnostics, and tracing
The HKLM\COMPONENTS subkey contains information pertinent to the Component Based 
Servicing (CBS) stack. This stack contains various files and resources that are part of a Windows installa-
tion image (used by the Automated Installation Kit or the OEM Preinstallation Kit) or an active instal-
lation. The CBS APIs that exist for servicing purposes use the information located in this key to identify 
installed components and their configuration information. This information is used whenever compo-
nents are installed, updated, or removed either individually (called units) or in groups (called packages). 
To optimize system resources, because this key can get quite large, it is only dynamically loaded and 
unloaded as needed if the CBS stack is servicing a request. This key is backed by the COMPONENTS 
hive file located in \Windows\system32\config.
The HKLM\HARDWARE subkey maintains descriptions of the system’s legacy hardware and some 
hardware device-to-driver mappings. On a modern system, only a few peripherals—such as keyboard, 
mouse, and ACPI BIOS data—are likely to be found here. The Device Manager tool lets you view regis-
try hardware information that it obtains by simply reading values out of the HARDWARE key (although 
it primarily uses the HKLM\SYSTEM\CurrentControlSet\Enum tree). 
HKLM\SAM holds local account and group information, such as user passwords, group definitions, 
and domain associations. Windows Server systems operating as domain controllers store domain ac-
counts and groups in Active Directory, a database that stores domainwide settings and information. 
(Active Directory isn’t described in this book.) By default, the security descriptor on the SAM key is 
configured so that even the administrator account doesn’t have access.
HKLM\SECURITY stores systemwide security policies and user-rights assignments. HKLM\SAM is 
linked into the SECURITY subkey under HKLM\SECURITY\SAM. By default, you can’t view the contents 
of HKLM\SECURITY or HKLM\SAM because the security settings of those keys allow access only by the 
System account. (System accounts are discussed in greater detail later in this chapter.) You can change 
the security descriptor to allow read access to administrators, or you can use PsExec to run Regedit in the 
local system account if you want to peer inside. However, that glimpse won’t be very revealing because 
the data is undocumented and the passwords are encrypted with one-way mapping—that is, you can’t 
determine a password from its encrypted form. The SAM and SECURITY subkeys are backed by the SAM 
and SECURITY hive files located in the \Windows\system32\config path of the boot partition.
HKLM\SOFTWARE is where Windows stores systemwide configuration information not needed to 
boot the system. Also, third-party applications store their systemwide settings here, such as paths to 
application files and directories and licensing and expiration date information.
HKLM\SYSTEM contains the systemwide configuration information needed to boot the system, 
such as which device drivers to load and which services to start. The key is backed by the SYSTEM hive 
file located in \Windows\system32\config. The Windows Loader uses registry services provided by the 
Boot Library for being able to read and navigate through the SYSTEM hive.
HKEY_CURRENT_CONFIG
HKEY_CURRENT_CONFIG is just a link to the current hardware profile, stored under HKLM\SYSTEM\
CurrentControlSet\Hardware Profiles\Current. Hardware profiles are no longer supported in Windows, 
but the key still exists to support legacy applications that might depend on its presence.
CHAPTER 10 Management, diagnostics, and tracing
401
HKEY_PERFORMANCE_DATA and HKEY_PERFORMANCE_TEXT
The registry is the mechanism used to access performance counter values on Windows, whether those 
are from operating system components or server applications. One of the side benefits of providing 
access to the performance counters via the registry is that remote performance monitoring works “for 
free” because the registry is easily accessible remotely through the normal registry APIs.
You can access the registry performance counter information directly by opening a special key 
named HKEY_PERFORMANCE_DATA and querying values beneath it. You won’t find this key by look-
ing in the Registry Editor; this key is available only programmatically through the Windows registry 
functions, such as RegQueryValueEx. Performance information isn’t actually stored in the registry; the 
registry functions redirect access under this key to live performance information obtained from perfor-
mance data providers.
The HKEY_PERFORMANCE_TEXT is another special key used to obtain performance counter 
information (usually name and description). You can obtain the name of any performance counter by 
querying data from the special Counter registry value. The Help special registry value yields all the 
counters description instead. The information returned by the special key are in US English. The HKEY_
PERFORMANCE_NLSTEXT retrieves performance counters names and descriptions in the language in 
which the OS runs.
You can also access performance counter information by using the Performance Data Helper (PDH) 
functions available through the Performance Data Helper API (Pdh.dll). Figure 10-2 shows the compo-
nents involved in accessing performance counter information.
Custom
application A
Performance
tool
Custom
application B
RegQueryValueEx
Performance
monitoring
applications
Programming
interfaces
Advapi32.dll
PerfLib
Registry DLL provider
High-performance provider interface
Windows Management Instrumentation
System
performance
DLL
System
performance
DLL
System
performance
DLL
Performance
extension
DLL
Performance
extension
DLL
Performance
extension
DLL
High-
performance
data provider
object
High-
performance
data provider
object
High-
performance
data provider
object
Pdh.dll
FIGURE 10-2 Registry performance counter architecture.
As shown in Figure 10-2, this registry key is abstracted by the Performance Library (Perflib), 
which is statically linked in Advapi32.dll. The Windows kernel has no knowledge about the 
HKEY_PERFORMANCE_DATA registry key, which explains why it is not shown in the Registry Editor.
402 
CHAPTER 10 Management, diagnostics, and tracing
Application hives
Applications are normally able to read and write data from the global registry. When an application 
opens a registry key, the Windows kernel performs an access check verification against the access token 
of its process (or thread in case the thread is impersonating; see Chapter 7 in Part 1 for more details) 
and the ACL that a particular key contains. An application is also able to load and save registry hives by 
using the RegSaveKeyEx and RegLoadKeyEx APIs. In those scenarios, the application operates on data 
that other processes running at a higher or same privilege level can interfere with. Furthermore, for 
loading and saving hives, the application needs to enable the Backup and Restore privileges. The two 
privileges are granted only to processes that run with an administrative account. 
Clearly this was a limitation for most applications that want to access a private repository for storing 
their own settings. Windows 7 has introduced the concept of application hives. An application hive is a 
standard hive file (which is linked to the proper log files) that can be mounted visible only to the appli-
cation that requested it. A developer can create a base hive file by using the RegSaveKeyEx API (which 
exports the content of a regular registry key in an hive file). The application can then mount the hive 
privately using the RegLoadAppKey function (specifying the REG_PROCESS_APPKEY flag prevents other 
applications from accessing the same hive). Internally, the function performs the following operations:
1.
Creates a random GUID and assigns it to a private namespace, in the form of \Registry\
A\. (\Registry forms the NT kernel registry namespace, described in the
“The registry namespace and operation” section later in this chapter.)
2.
Converts the DOS path of the specified hive file name in NT format and calls the NtLoadKeyEx
native API with the proper set of parameters.
The NtLoadKeyEx function calls the regular registry callbacks. However, when it detects that the 
hive is an application hive, it uses CmLoadAppKey to load it (and its associated log files) in the private 
namespace, which is not enumerable by any other application and is tied to the lifetime of the calling 
process. (The hive and log files are still mapped in the “registry process,” though. The registry process 
will be described in the “Startup and registry process” section later in this chapter.) The application can 
use standard registry APIs to read and write its own private settings, which will be stored in the applica-
tion hive. The hive will be automatically unloaded when the application exits or when the last handle to 
the key is closed. 
Application hives are used by different Windows components, like the Application Compatibility 
telemetry agent (CompatTelRunner.exe) and the Modern Application Model. Universal Windows 
Platform (UWP) applications use application hives for storing information of WinRT classes that can be 
instantiated and are private for the application. The hive is stored in a file called ActivationStore.dat 
and is consumed primarily by the Activation Manager when an application is launched (or more pre-