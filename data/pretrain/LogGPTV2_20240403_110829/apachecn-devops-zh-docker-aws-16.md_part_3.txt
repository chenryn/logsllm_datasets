    environment:
      DJANGO_SETTINGS_MODULE: todobackend.settings_release
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
      - --die-on-term
      - --processes=4
      - --threads=2
      - --check-static=/public
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
```
我们指定的第一个属性是强制的`version`属性，我们将其定义为 3.6 版本，这是撰写本书时支持的最新版本。接下来，我们配置顶层网络属性，该属性指定栈将使用的 Docker 网络。您将创建一个名为`net`的网络，该网络实现`overlay`驱动程序，该驱动程序跨 Swarm 集群中的所有节点创建一个虚拟网段，栈中定义的各种服务可以通过该网段相互通信。一般来说，您部署的每个栈都应该指定自己的覆盖网络，这在每个栈之间提供了分段，意味着您不需要担心 IP 寻址或集群的物理网络拓扑。
接下来，您必须定义一个名为`app`的服务，它代表主 todobackend web 应用，并通过`image`属性为您在前面几章中发布的 todo back and 应用指定 ECR 映像的完全限定名。请注意，Docker 栈不支持`build`属性，并且必须引用已发布的 Docker 映像，这是为什么您应该始终为您的开发、测试和构建工作流拥有单独的 Docker Compose 规范的一个很好的理由。
`ports`属性使用长样式配置语法(在前面的章节中，您已经使用了短样式语法)，这提供了对更多配置选项的访问，允许您指定容器端口 8000(由`target`属性指定)将在端口 80 上对外发布(由`published`属性指定)，而`networks`属性将`app`服务配置为连接到您之前定义的`net`网络。请注意,`environment`属性没有指定任何数据库配置设置——现在的重点是让应用启动并运行，尽管处于某种中断状态，但我们将在本章稍后配置数据库访问。
最后，`deploy`属性允许您控制应该如何部署服务，其中`replica`属性指定部署我们服务的两个实例，`update_config`属性配置滚动更新，一次更新一个实例(由`parallelism`属性指定)，在部署每个更新的实例之间有 30 秒的延迟。
有了这个配置，您现在可以使用`docker stack deploy`命令部署您的栈:
```
> $(aws ecr get-login --no-include-email)
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
Login Succeeded
> docker stack deploy --with-registry-auth -c stack.yml todobackend Creating network todobackend_net
Creating service todobackend_app
> docker service ps todobackend_app --format "{{ .Name }} -> {{ .Node }} ({{ .CurrentState }})"
todobackend_app.1 -> ip-172-31-27-91.ec2.internal (Running 6 seconds ago)
todobackend_app.2 -> ip-172-31-40-246.ec2.internal (Running 6 seconds ago)
```
请注意，我第一次登录到 ECR—这一步不是绝对必需的，但是如果您没有登录到 ECR，Docker 客户端将无法确定与最新标签相关联的当前映像哈希，并且您将收到以下警告:
```
> docker stack deploy --with-registry-auth -c stack.yml todobackend image 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest could not be accessed on a registry to record
its digest. Each node will access 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend:latest independently,
possibly leading to different nodes running different
versions of the image.
...
...
```
如果您现在浏览外部负载平衡器 URL，todobackend 应用应该会加载，但是您会注意到应用缺少静态内容，如果您尝试访问`/todos`，将出现数据库配置错误，这是意料之中的，因为我们没有配置任何数据库设置或考虑如何在 Docker swarm 中运行 **collectstatic** 进程。
# 创建用于托管静态内容的共享存储
AWS 解决方案的 Docker 包括 Cloudstor 卷插件，这是 Docker 构建的存储插件，旨在支持流行的持久存储云存储机制。
就 AWS 而言，该插件提供了与以下类型的持久存储的现成集成:
*   **弹性块存储** ( **EBS** ):提供专用(非共享)访问的块级存储。这提供了高水平的性能，能够将卷分离和连接到不同的实例，并支持快照和恢复操作。EBS 存储适用于数据库存储或任何需要高吞吐量和最小延迟来读写本地数据的应用。
*   **弹性文件系统** ( **EFS** ):使用**网络文件系统** ( **NFS** )版本 4 协议提供共享文件系统访问。NFS 允许在多台主机上同时共享存储，但是这比 EBS 存储的性能低得多。NFS 存储适用于共享公共文件且不要求高性能的应用。之前，当您为 AWS 部署 Docker 解决方案时，您选择为 EFS 创建先决条件，该先决条件为云存储卷插件与之集成的 Swarm 集群设置 EFS 文件系统。
正如您在前面几章中所知道的那样，todobackend 应用对存储静态内容有一个特定的要求，尽管我通常不会推荐 EFS 用于这样的用例，但静态内容要求代表了一个很好的机会来演示如何在 Docker Swarm 环境中配置和使用 EFS 作为共享卷:
```
version: '3.6'
networks:
  net:
    driver: overlay
volumes:
 public:
 driver: cloudstor:aws
 driver_opts:
 backing: shared
services:
  app:
    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
    ports:
      - target: 8000
        published: 80
    networks:
      - net
 volumes:
 - public:/public
    ...
    ...
```
您必须首先创建一个名为`public`的卷，并指定`cloudstor:aws`的驱动程序，这将确保 Cloudstor 驱动程序加载了 AWS 支持。要创建 EFS 卷，您只需配置一个名为`backing`的驱动程序选项，其值为`shared`，然后在`app`服务中的`/public`安装该卷。
如果您现在使用`docker stack deploy`命令部署您的更改，将创建`volume`并更新`app`服务实例:
```
> docker stack deploy --with-registry-auth -c stack.yml todobackend
Updating service todobackend_app (id: 59gpr2x9n7buikeorpf0llfmc)
> docker volume ls
DRIVER          VOLUME NAME
local           bd3d2804c796064d6e7c4040040fd474d9adbe7aaf68b6e30b1d195b50cdefde
local           sshkey
cloudstor:aws   todobackend_public
>  docker service ps todobackend_app \
 --format "{{ .Name }} -> {{ .DesiredState }} ({{ .CurrentState }})"
todobackend_app.1 -> Running (Running 44 seconds ago)
todobackend_app.1 -> Shutdown (Shutdown 45 seconds ago)
todobackend_app.2 -> Running (Running 9 seconds ago)
todobackend_app.2 -> Shutdown (Shutdown 9 seconds ago)
```
您可以使用`docker volume ls`命令查看当前卷，您会看到根据惯例`_`(例如`todobackend_public`)命名的新卷是用`cloudstor:aws`的驱动程序创建的。请注意，`docker service ps`命令输出显示`todobackend.app.1`先更新，然后`todobackend.app.2`30 秒后更新，这是基于您在`deploy`设置中为`app`服务应用的较早滚动更新配置。
要验证卷是否已成功装载，您可以使用`docker ps`命令向 Swarm manager 查询任何在本地运行的应用服务容器，然后使用`docker exec`验证`/public`装载是否存在，以及是否可由`app`用户读取/写入，todobackend 容器运行方式如下:
```
> docker ps -f name=todobackend -q
60b33d8b0bb1
> docker exec -it 60b33d8b0bb1 touch /public/test
> docker exec -it 60b33d8b0bb1 ls -l /public
total 4
-rw-r--r-- 1 app app 0 Jul 19 13:45 test
```
需要注意的一点是，前面示例中显示的`docker volume`和其他`docker`命令仅在您连接到的当前 Swarm 节点的上下文中执行，不会显示卷或允许您访问集群中其他节点上运行的容器。要验证该卷是否确实被运行在我们群集中另一个 Swarm 节点上的应用服务容器共享和访问，您需要首先 SSH 到 Swarm 管理器，然后 SSH 到群集中的单个工作节点:
```
> ssh -A PI:EMAIL
Welcome to Docker!
~ $ docker node ls
ID                          HOSTNAME                        STATUS  MANAGER  STATUS
qna4v46afttl007jq0ec712dk   ip-172-31-27-91.ec2.internal    Ready   Active 
ym3jdy1ol17pfw7emwfen0b4e * ip-172-31-40-246.ec2.internal   Ready   Active   Leader
> ssh docker@ip-172-31-27-91.ec2.internal
Welcome to Docker!
> docker ps -f name=todobackend -q
71df5495080f
~ $ docker exec -it 71df5495080f ls -l /public
total 4
-rw-r--r-- 1 app app 0 Jul 19 13:58 test
~ $ docker exec -it 71df5495080f rm /public/test
```
如您所见，该卷在工作节点上可用，工作节点可以看到我们在另一个实例上创建的`/public/test`文件，这证明该卷确实是共享的，所有`app`服务实例都可以访问，而不管底层节点如何。
# 创建集合静态服务
现在您已经有了一个共享卷，我们需要考虑如何定义和执行 collectstatic 过程来生成静态内容。到目前为止，在本书中，您已经将 collectstatic 流程作为一项必要的任务来执行，该任务需要在定义的部署序列中的特定时间点发生，但是 Docker Swarm 提倡最终一致性的概念，因此您应该能够部署您的栈并运行一个 collectstatic 流程，该流程可能会失败，但最终会成功，此时您的应用将达到所需的状态。这种方法与我们之前采用的命令式方法大不相同，但被公认为架构良好的现代云原生应用的最佳实践。
为了演示这是如何工作的，我们首先需要拆除 todobackend 栈，以便您可以观察 Docker 存储引擎创建和装载 EFS 支持的卷时收集静态过程中会出现的故障:
```
> docker stack rm todobackend
Removing service todobackend_app
Removing network todobackend_net
> docker volume ls
DRIVER         VOLUME NAME
local          sshkey
cloudstor:aws  todobackend_public
> docker volume rm todobackend_public
```
需要注意的一点是，Docker Swarm 不会在您销毁栈时删除卷，因此您需要手动删除卷来完全清理环境。
我们现在可以向栈中添加 collectstatic 服务:
```
version: '3.6'
networks:
  net:
    driver: overlay
volumes:
  public:
    driver: cloudstor:aws
    driver_opts:
      backing: shared
services:
  app:
    image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
    ports:
      - target: 8000
        published: 80
    networks:
      - net
    volumes:
      - public:/public
    ...
    ...
  collectstatic:
 image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend volumes:
 - public:/public    networks:
 - net
 environment:
 DJANGO_SETTINGS_MODULE: todobackend.settings_release
 command:
 - python3
 - manage.py
 - collectstatic
 - --no-input
 deploy:
 replicas: 1
 restart_policy:
 condition: on-failure
 delay: 30s
 max_attempts: 6
```