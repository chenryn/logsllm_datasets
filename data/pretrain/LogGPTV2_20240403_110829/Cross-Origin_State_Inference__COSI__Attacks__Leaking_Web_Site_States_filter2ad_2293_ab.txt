page URL and text to convince the victim to click on it.
Such targeted attack requires the victim’s email, but allows
identifying the state of a speciﬁc person, e.g., deanonymizing
the owner of an account. Another possibility is a watering-hole
approach where the attacker injects the attack page URL into
a vulnerable page that victims are likely to visit. Such attack
allows identifying the state of a visitor, but does not identify
who the visitor is. The method used to convince the victim to
visit the attack page is outside the scope of this paper. When
the attack page is loaded at the victim’s browser, it checks the
browser used by the victim, delivers suitable attack vectors,
and reports back the leaked victim’s state.
C. Beyond Two States
Current COSI attacks targeting login or access detection
consider only two states. However, most web sites have more
than two states, e.g., logged in users with different permissions.
Considering only two states introduces some issues. First, it
limits the type of attacks, preventing attacks that target ﬁner-
grained states such as account type or content ownership.
Furthermore, it can introduce false positives, which is best
illustrated with an example.
In 2015, Lee et al. [47] presented a novel AppCache XS-
Leak (described in Section III) that enabled login detection.
One of their login detection attacks targeted the NDSS 2015
HotCRP installation. The SD-URL https://ndss2015.ccs.n
eu.edu/paper/(cid:104)paper-no(cid:105) returned a success HTTP status
code when the victim was logged into HotCRP and an error
status code otherwise. That difference could be identiﬁed
using the AppCache XS-Leak. In reality, the HotCRP access
control is more ﬁne-grained and the information of a paper
can only be accessed by its authors or by reviewers, but
not by other authors who would also receive an error. Thus,
their attack could incorrectly identify an authenticated victim,
who happened to be an author of another paper, as not being
authenticated. Such false positives could be avoided if they
could guarantee that victims would not be authors (e.g., not
sending authors an email with the attack page URL), but
authors are only known to the conference administrators.
Running example. As running example we use a reviewer
deanonymization attack Basta-COSI found on HotCRP, which
was acknowledged and ﬁxed. Listing 1 shows a simpliﬁed
version of the attack page produced by Basta-COSI that we
sent to HotCRP developers to report the attack. It identiﬁes
if the visiting victim is the reviewer of paper #123 submitted
to https://conf.hotcrp.com. Since HotCRP has multiple states
(e.g., logged in, author, reviewer, reviewer of a speciﬁc paper)
and we want to support the major browsers (Chrome, Firefox,
Edge), the attack page requires three attack vectors executed
when the attack page is loaded (Line 3). It ﬁrst runs an
Listing 1: Running example attack page for deanonymizing the
reviewer of a paper in HotCRP.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
//Launch attack when page loads
attack vector for determining the victim’s login status, which
works regardless if the victim’s browser is Chrome, Firefox, or
Edge (Lines 12, 20-28). This attack vector includes SD-URL
https://conf.hotcrp.com/ofﬂine.php?downloadForm=123 with
the object HTML tag and uses the EventsFired XS-Leak:
if the victim is logged into the site, no events are triggered,
otherwise the onload event
it executes
the attack vectors for reviewer deanonymination, which differ
for Chrome (Line 15) and Firefox/Edge (Line 17). These
attack vectors are not detailed for brevity, but both use the
EventsFired XS-Leak with different inclusion methods for the
same SD-URL https://conf.hotcrp.com/api.php/review?p=123,
which returns a success HTTP status code if the victim has
submitted a review for paper #123, and an error HTTP status
code otherwise.
is triggered. Then,
D. Threat Model
This section describes the COSI attack threat model, de-
tailing the assumptions we make about each actor.
Attacker. We assume that the attacker can trick victims into
loading the attack page on their web browsers. During prepara-
tion, the attacker has the ability to create and manage different
accounts at the target web site, or in a local installation of the
target’s web application. The attacker controls an attack web
site where he can add arbitrary pages. Finally, we assume the
attacker can identify the victim’s browser version (e.g., from
the User-Agent header) to select the right attack vector.
Victim. The victim uses a fully up-to-date web browser and
can be lured by the attacker into visiting the attack webpage.
4
We assume that the victim logs into the target web site with
the same web browser used to visit the attack page.
Target site. The target site contains at least one SD-URL
for which the attacker knows an attack class. The target site
does not suffer from any known vulnerabilities. In particular,
resources containing sensitive information are protected from
direct cross-origin reads, i.e., the target site does not contain
CORS misconﬁgurations [48], cross-site scripting [49], or
cross-site script inclusion vulnerabilities [50].
III. COSI ATTACK CLASSES
A key concept in our approach are COSI attack classes.
A COSI attack class is a 6-tuple that comprises of a class
name, signatures for two groups of responses that can be
distinguished using the attack class, an XS-Leak, a list of
inclusion methods that can be used to embed the SD-URL
in an attack page, and the list of affected browsers. It captures
which SD-URLs can be used for building an attack vector
against
the affected browsers using the XS-Leak and one
of the inclusion methods deﬁned. A reader could think that
an attack class should simply correspond to an XS-Leak.
However, the behavior of some XS-Leaks depends on the
target browser and the inclusion method used. Depending on
those two parameters, the set of affected SD-URLs differs.
Thus, identifying attack classes is fundamental for determining
whether and how a given SD-URL can be attacked. This
section ﬁrst presents our approach to discover COSI attack
classes in Section III-A and then details the 40 attack classes
identiﬁed in Section III-B.
A. Discovering Attack Classes
Our process to discover COSI attack classes comprises of
three main steps: (1) identify and validate previously proposed
COSI attack instances; (2) generalize known COSI attack
instances into COSI attack classes; and (3) discover previously
unknown attack classes.
Identifying attack instances. We have performed a systematic
survey of COSI attack instances presented in prior work under
different names. This process identiﬁed 23 prior works, listed
in Table VIII and described in Section IX. Out of those, 11
are blog posts, 10 are academic papers, one is a bug report,
and the last one is a project simultaneous to our work that
tries to enumerate all known XS-Leaks [65]. Those 23 prior
works presented 31 attack instances. All attack instances could
be validated in at least one recent browser version. To validate
an attack instance we manually create a test attack page based
on the available information. The test attack page includes
a URL from a test application we have designed to return
custom responses to an incoming request. Requests to the test
application deﬁne how the response should look (i.e., which
headers and body to return). In this step, we conﬁgured our
test application to return the responses described in the work
presenting the attack. This enables validating attack instances
even when the SD-URL used in the attack was no longer active.
Generalizing instances into classes. Generalizing a COSI
attack instance into a COSI attack class comprises of two steps.
First, identifying the set of responses to the inclusion method
used in the attack instance, that still trigger the same observable
Tag
Attribute
Included Resource’s Type
applet
audio
embed
frame
iframe
img
input
link
object
script
source
track
video
video
code
src
src
src
src
src
src
href
data
src
src
src
poster
src
Applet
Audio
Deﬁned in type attribute
Typically web pages
Typically web pages
Image
Image (when attr. type = “picture”)
Deﬁned in rel and type attributes
Deﬁned in type attribute
JS
Audio/Video
WebVTT [8]
Image
Video
TABLE II: HTML tags supporting resource inclusion.
difference in the browser (e.g., onload/onerror or different
object property values). Then, checking if the observable
difference still manifests with other inclusion methods and
browsers. The generalization uses the test application to control
the response received from a potential target site. We illustrate
it using an attack instance of the EF-StatusErrorObject attack
class. The generalization starts with the response that triggers
the onload callback and tries to modify each response element
(header or body) to a different value. If the modiﬁcation still
triggers the onload callback, then the element can be ignored.
In our example, all ﬁelds can be ignored, except the status
code that it should be 200 and the content-type that should
not correspond to an audio or video. The generalization then
repeats for the response that triggers the onerror callback,
returning that the status code should not be success (200) or
redirection (3xx), but other values for the status code, headers,
and body do not matter. Once the responses are generalized,
it tests whether other inclusions methods still trigger the same
tests the window.open()
observable difference. For this,
method and the 13 HTML tags that enable resource inclusion
without user intervention, shown in Table II. Finally, it checks
if the leak manifests in other browsers. Table VIII shows that
the 31 attack instances examined belonged to 15 attack classes,
i.e., many were duplicates.
it
Discovering new attack classes. The test application allows
systematically exploring combinations of header and body
values in responses. For each response, browser events and
DOM values are logged. Pairs of responses that produce
observable differences (e.g., trigger different callbacks), and
do not match existing attack classes, correspond to new attack
instances, and are generalized as above. Overall, we discovered
21 new attack classes, of which 12 use the EventsFired (i.e.,
onload/onerror) XS-Leak, 8 use the Object Property XS-Leak,
and 1 uses a completely novel XS-Leak based on postMessage.
B. Attack Classes Description
Table III details the 40 attack classes identiﬁed by the
above process. For each attack class,
the table shows the
name we assigned to the class; a description of the two
different responses by a SD-URL that can be targeted using
this attack class; the attack page logic with the methods that
can be used to include the SD-URL and the XS-Leak to
distinguish the responses; and the affected browsers. In each
response description we abbreviate HTTP ﬁelds as follows:
5
Class
Response A
SD-URL Responses
Response B
Inclusion Methods
Leak Method
Attack Page’s Logic
EF-StatusErrorScript
EF-StatusErrorObject
EF-StatusErrorEmbed
EF-StatusErrorLink
EF-StatusErrorLinkCss
EF-RedirStatLink
EF-StatusErrorIFrame
EF-NonStdStatusErrorIFrame
EF-CDispIFrame
EF-CDispStatErrIFrame
EF-CDispAthmntIFrame
EF-XctoScript
EF-XctoObject
EF-CtMismatchObject
sc = 200, ct = text/javascript
sc = 200, ct (cid:54)= (audio OR video)
sc = 401, ct = (text/html)
sc = (200 OR 3xx), ct (cid:54)= text/html
sc = (200 OR 3xx), ct = text/css
sc = 3xx
sc = (200 OR 3xx OR 4xx or 5xx), ct=
(text/javascript OR text/css)
sc = (200 OR 3xx OR 4xx or 5xx), ct =
(text/javascript OR text/css)
sc = 200, cd = attachment
sc = (4xx OR 5xx), cd = attachment
sc = 200, cd = attachment
sc = 200, xcto disabled, ct = (text/html OR
text/css OR application/pdf)
sc = 200, xcto disabled, ct = (text/html OR
text/css OR application/json)
sc = 200, ct = X
EF-CtMismatchScript
sc = 200, ct = (text/javascript)
EF-CtMismatchImg
EF-CtMismatchAudio
sc = (200 OR 3xx OR 4xx OR 5xx), ct =
image
sc = (200 OR 3xx OR 4xx OR 5xx), ct =
audio
sc = (4xx OR 5xx)
sc (cid:54)= (200 OR 3xx)
sc (cid:54)= 401, ct = (text/html)
sc (cid:54)= (200 OR 3xx)
sc (cid:54)= (200 OR 3xx), ct (cid:54)= text/css
sc (cid:54)= 3xx, cto = nosniff, ct (cid:54)= (text/css
OR text/html)
sc = (200 OR 3xx OR 4xx or 5xx), ct (cid:54)=
(text/javascript OR text/css)
sc = 999
cd (cid:54)= attachment
sc = (4xx OR 5xx), cd (cid:54)= attachment
¬(sc = 200, cd = attachment)
sc = 200, xcto = nosniff, ct = (text/html
OR text/css OR application/pdf)
sc = 200, xcto = nosniff, ct = (text/html
OR text/css OR application/json)
sc = 200, ct = Y
sc = 200, xcto = nosniff, ct (cid:54)= (text/-
javascript)
sc = (200 OR 3xx OR 4xx OR 5xx), ct
(cid:54)= image
sc = (200 OR 3xx OR 4xx OR 5xx), ct
(cid:54)= audio
script src=URL
object data=URL
embed src=URL
link href=URL rel=prefetch