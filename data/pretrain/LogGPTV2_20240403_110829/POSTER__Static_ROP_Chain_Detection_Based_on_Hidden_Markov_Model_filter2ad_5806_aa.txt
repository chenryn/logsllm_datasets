title:POSTER: Static ROP Chain Detection Based on Hidden Markov Model
Considering ROP Chain Integrity
author:Toshinori Usui and
Tomonori Ikuse and
Makoto Iwamura and
Takeshi Yada
POSTER: Static ROP Chain Detection Based on
Hidden Markov Model Considering ROP Chain Integrity
Toshinori Usui1, Tomonori Ikuse2, Makoto Iwamura1, Takeshi Yada1
1NTT Secure Platform Laboratories
3-9-11 Midori-cho, Musashino-shi
Tokyo, Japan
2NTT Security (Japan) KK
1-5-2 Higashi-shinbashi, Minato-ku
Tokyo, Japan
{usui.toshinori, iwamura.makoto, yada.takeshi}@lab.ntt.co.jp
PI:EMAIL
ABSTRACT
Return-oriented programming (ROP) has been crucial for
attackers to evade the security mechanisms of operating sys-
tems. It is currently used in malicious documents that ex-
ploit viewer applications and cause malware infection. For
inspecting a large number of commonly handled documents,
high-performance and (cid:13)exible-detection methods are required.
However, current solutions are either time-consuming or less
precise. In this paper, we propose a novel method for stat-
ically detecting ROP chains in malicious documents. Our
method generates a hidden Markov model (HMM) of ROP
chains as well as one of benign documents by learning known
malicious and benign documents and libraries used for ROP
gadgets. Detection is performed by calculating the likeli-
hood ratio between malicious and benign HMMs. In addi-
tion, we reduce the number of false positives by ROP chain
integrity checking, which con(cid:12)rms whether ROP gadgets
link properly if they are executed. Experimental results
showed that our method can detect ROP-based malicious
documents with no false negatives and few false positives at
high throughput.
CCS Concepts
(cid:15)Security and privacy ! Malware and its mitigation;
Keywords
Return-Oriented Programming; Attack Code Detection; Hid-
den Markov Model
1.
INTRODUCTION
Malicious documents that exploit vulnerabilities are used
for targeted attacks. To detect malicious documents, as
Stancill et al.[7] proposed, it is eﬀective to focus on return-
oriented programming (ROP)[6]. ROP detection is mainly
achieved based on dynamic analysis. However, dynamic de-
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’16 October 24-28, 2016, Vienna, Austria
c⃝ 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4139-4/16/10.
DOI: http://dx.doi.org/10.1145/2976749.2989040
tection methods are generally time-consuming due to the
execution duration of viewer applications for analysis and
are not suitable for inspecting a large number of documents.
Several fast static methods have recently been proposed.
Check My Pro(cid:12)le[7] takes memory snapshots and analyzes
them by pro(cid:12)ling ROP gadgets and chains. n-ROPdetector[8]
collects gadgets from the Metasploit framework and detects
based on their pattern matching in networks. STROP[9]
uses several rules for detecting ROP chains in network pack-
ets. eavesROP[3] applies the fast Fourier transform (FFT)
for eﬀective pattern matching of ROP chains. These meth-
ods achieve fast detection and are suitable for inpecting a
large number of documents. However, they are less (cid:13)exi-
ble regarding changes in attack trends or attackers’ evasion
when rules or thresholds are publicly known. This is because
these methods mainly depend on a pattern matching-based
or rule-based method. Therefore, to keep tracking changes
in attack trends, more (cid:13)exible methods are required.
In this paper, we propose a novel learning-based method
of statically detecting ROP chains in malicious documents.
The method adopts statistical learning with HMMs[4] for
modeling and a quick probability calculation-based algo-
rithm for detection. Due to this, our method is (cid:13)exible and
inspects rapidity. We also introduce ROP chain integrity
(RCI) checking, which checks whether the chain of ROP
gadget addresses links properly. By considering the RCI, we
can improve the accuracy of the detecting ROP chains. Ex-
perimental results suggest that our method can detect the
ROP chains in malicious documents with high precision in
a short time.
2. METHOD
Figure 1 gives an overview of our method. The method
adopts statistical learning using HMMs to detect ROP chains.
We (cid:12)rst explain the design of HMMs and the way our method
detects with them. Then, to reduce the number of false pos-
itives, we use RCI checking for improving detection.
2.1 HMM Design
For modelling ROP-based malicious documents, an HMM
is designed to use the byte sequence of documents as an ob-
served sequence, while the label sequence as a hidden state
sequence. Therefore, emission symbols of the HMM are the
set of 0x00-0xFF. The ROP chains generally consist of three
components, ROP gadget addresses (addr), constant argu-
ments (const) and junk codes (junk). Therefore, the state
spaces are the set of addr[1-4], const[1-4], junk and doc la-
1808the documents are regarded as sequence data, in which struc-
tured learning methods such as an HMM are suitable. Sec-
ond, the relation between observed bytes and ROP compo-
nent labels is similar to latent variable models such as an
HMM. Third, the transitions between two of the ROP com-
ponents and emissions of bytes have convergence properties.
2.2 ROP Chain Integrity
Static ROP chain detection sometimes causes false pos-
itives due to the appearance of gadgets address-like byte
sequences in the data stream. For evading the occurance
of these false positives, we introduce the concept of RCI
checking to static ROP chain detection. The RCI is used to
evaluate the integrity of a ROP gadget properly linking to
another ROP gadget. If gadgets do not link properly, the
chain is considered an invalid ROP chain. We call this situ-
ation chain violation (CV). By RCI checking, we can reduce
the number of false positives derived due to accidentally hap-
pened gadget-address-like byte sequences appearing. This is
because the false positives mostly cause CV.
For RCI checking between two consecutive gadget-address
candidates, the change oﬀset of the stack pointer when the
gadget is executed is required. To obtain this, we previously
executed all the gadget candidates in the library used for
ROP chains. During the execution, we had to handle the
branches that appeared in the gadget candidates. Hence, we
leveraged symbolic execution. Through this, we produced a
dictionary in which the gadget-candidate addresses and the
corresponding stack pointer oﬀsets are stored. Although this
task takes a certain amount of time, the inspection does not
get longer because it is done before inspection.
To adopt RCI checking in our probabilistic method, we
computed the probability that the HMM emits the observed
byte sequence with no CV. This is used as the likelihood of
ROP-based malicious documents. The likelihood L((cid:18)jX) is
computed as follows;
L((cid:18)jX) = P (X;
Fi;jj(cid:18)) = P (Xj(cid:18))P (
Fi;jjX; (cid:18))
∩
∩
(i;j)2JX
(i;j)2Jx
(2)
where X is the observed byte sequence, i; j are the steps
that the corresponding byte xi; xj 2 X are interpreted as
chain source and destination, JX is the set of (i; j) in X and
Fi;j is a stochastic variable with which set (i; j) does not
cause CV.
Since computing the probability above is quite diﬃcult,
we made two assumptions below for making computations
easier. (i) The probability that a ROP gadget address does
not cause CV is independent of the probability that the other
ROP gadget addresses do not cause CV. (ii) The state prob-
ability of the chain source is independent of that of the chain
destination. By assuming these, the probability of Equation
(2) is approximately calculated as follows;
∏
(i;j)2Jx
L((cid:18)jX) (cid:25) P (Xj(cid:18))
1 (cid:0) P (i = A1jX; (cid:18))P (j ̸= A1jX; (cid:18))
where A1 is the label of addr1.
(3)
Here, P (Xj(cid:18)) and P (i = (cid:1)jX; (cid:18)) are quickly calculated us-
ing the forward and forward-backward algorithms[4], respec-
tively. Therefore, we can also compute the entire likelihood
L((cid:18)jX) in a short time.
Figure 1: Overview of method
Figure 2: Transition diagram for byte-wise HMM of
32-bit ROP chain
bels, where the index number indicates the byte-wise posi-