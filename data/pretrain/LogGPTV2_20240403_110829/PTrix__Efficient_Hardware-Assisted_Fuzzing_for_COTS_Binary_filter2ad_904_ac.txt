return index & r anдe
bit_size = bit_map .size > (64 - log2(bit_size))
rnd = 64 / bit_size
index = bit_hash & r anдe
for k ← 0 to rnd do
bit_hash = bit_hash >> bit_size
index ⊕ = bit_hash & r anдe
▷ Number of bits in bit_map
discussed in Section 2 – and then compute the bitmaps by follow-
ing the bitmap update algorithm introduced by AFL. However, as
we demonstrated in Section 5, using such an approach, dubbed
Edge-PT, as part of our fuzzing system does not actually introduce
any efficiency improvement. This is simply because recovering in-
structions from data packets incurs a significant amount of latency
even when we cache the disassembling results.
To address this issue, we introduce a new scheme to compute
and update bitmaps needed for fuzz testing. At the high level, we
concatenate the TIP and TNT packets into “strings” and then hash
those strings into indices for bitmap updating. We describe the
details of our algorithm as follows.
The overall algorithm is presented in Algorithm 1. As fuzzing
continues, the UPDATETRACEBITS procedure consumes the TIP and
TNT packets produced by our decoder. Note that for better effi-
ciency, single-bit TNTs are concatenated into byte-aligned packets.
In UPDATETRACEBITS, each packet is taken by the UpdateHash rou-
tine to update a hash value. UpdateHash implements the SDBM
hash function which supports streaming data [30]. We selected
SDBM because it has been demonstrating great over-all distribution
for various data sets [19] and it has low computation complexity.
When UPDATETRACEBITS sees MAX_TIP TIP packets, it encodes
the accumulated hash value as an index to update the bitmap. This
essentially cuts the packets stream into slices and record each slice
with a bit. Shortly we will explain the rationale behind this design
and how we determine MAX_TIP. Encoding of the hash value is
achieved using Algorithm 2. It transforms a 64-bit hash to a value in
[0, max_bit_index), where max_bit_index represents the number
of bits in the bitmap. To be more specific, this encoding splits the
hash value into multiple pieces with each piece converged into
[0, max_bit_index). Then it exclusively-ors these pieces to form
the index. Given a set of equally distributed hash values, Algo-
rithm 2 will ensure that they are mapped into [0, max_bit_index)
with uniform distribution.
In this design, we only spare one bit to record the appearance
of a slice. This differs from the design of AFL — AFL uses one byte
to log not only the appearance of an edge but also its hit count.
Our design is motivated by the observation that most of the slices
(under the MAX_TIP we select) only arise once, which only require
single bits for recording. As a result, our scheme uses 7x less space
than the hit-count-recording scheme in AFL. This, in turn, enables
bit_map to better reside in L1 cache. As we will show in Section 5,
this choice brings around an additional 8% speed up.
(a) A code fragment in libpng-1.6.31. PTrix can generate
inputs to reach handlerX while AFL could not.
(b) Control flow graph of the code shown above. On an edge,
“T/F” means true/false and “[EX]” is the number of the edge.
Figure 5: An example for new code coverage by PTrix
The above algorithm avoids the expensive re-construction of
instruction trace. As we will shortly show in Section 5, it brings us
over 10x acceleration on execution speed. Essentially, this algorithm
alters AFL’s code-coverage based feedback in AFL to “control-flow”
based feedback. In the following, we discuss how our design main-
tains the functionality and gains the efficiency.
Functionality wise, our new feedback provides guidance that is
inclusive of code coverage (the feedback natively used by AFL). The
guidance requires that the feedback to diverge when inputs incur
different execution behaviors. The feedback to guide AFL captures
new code edges and their new hitting counts. Going beyond AFL,
our feedback acutally approaches a higher level of guidance — path
guidance. More specifically, our feedback encodes the control flow
packets, which uniquely represents an execution path. Following
inputs that lead to different execution paths, our feedback produces
different outputs. Therefore, it captures not only new code edges
and new hitting counts of code edges, but also new orders and new
combinations among code edges, since all the four events result in
new execution paths.
Efficiency wide, our new feedback may encounter two caveats
when mounted for fuzzing. In the following, we introduce their
details and explain our solutions.
First, we need a giant bitmap to record the tremendous volume of
distinct execution paths. This greatly impacts the frequent bitmap
1charsrc[SIZE];2chardst[SIZE]={0};3chartarget[]="aaaabbbb";4inti;5for(i=0;i122||(c>90&&c>=8;11}1213/*executionafterfinishingloop*/14if(condition1(chunk_name))15handler1();16...17if(conditionX(chunk_name))18handlerX();19...20if(conditionN(chunk_name))21handlerN();1i  122F : [E4]T : [E5]c > 90F : [E6]c 122||(c>90&&c>=8;11}1213/*executionafterfinishingloop*/14if(condition1(chunk_name))15handler1();16...17if(conditionX(chunk_name))18handlerX();19...20if(conditionN(chunk_name))21handlerN();1ASIACCS ’19, July 07–12, 2019, Auckland, NZ
Chen, et al.
Name
libpng
libjpeg
libxml
c++filt
nm
objdump
exif+libexif
perl
mupdf
Program
Version
1.6.31
jpeg-9b
2.29
2.29
2.29
2.29
0.6.21
5.26.1
1.11
Driver
readpng
djpeg
xmllint
cxxfilt
nm-new
objdump
exif
perl
mutool
Settings
Seeds
supplied by AFL
supplied by AFL
supplied by AFL
empty byte
supplied by AFL
supplied by AFL
[2]
[21]
Options
empty
“-gif”
empty
empty
empty
“-D”
empty
empty
“show”
supplied by AFL
Table 1: Evaluation settings
PT and communicates with the proxy component. Technically, we
implement the module to enable PT to run in the Table of Physical
Addresses (ToPA) mode. In this mode, Intel PT can store the tracing
packets in multiple discontinuous physical memory areas. For flex-
ibility, the size of the overall trace buffer can be configured via a
parameter when installing the PT module. Considering the tracing
buffer could get fully occupied, we implement the PT module to
handle that situation by clearing the END bit and setting the INT
bit in the last ToPA entry. By doing this, Intel PT could trigger a
performance-monitoring interrupt when the tracing buffer is fully
occupied. Since this interrupt may have a skid and result in a loss of
PT packets, we further append an entry to the end of ToPA which
also points to a 4 MB physical memory area.
Fork Server. We compiled the fork server into the GNU ld linker
and used it through a series of configurations. During the target
program initialization, our linker gets started and completes its
works on linking and loading. It then enters the forking loop as we
described in Section 2.
5 EVALUATION
In this section, we present the evaluation of PTrix in terms of
fuzzing efficiency and vulnerability discovery.
For efficiency, we performed two sets of experiments. First, we
compare PTrix with QEMU-AFL, Edge-PT, and PTFuzzer [38] on
execution speed. QEMU-AFL refers to AFL running in the QEMU mode
and Edge-PT is a ported version of kAFL [29] that supports user
space application. This set of experiments aims to illustrate the
efficiency improvement of PTrix on executing the same amount
of inputs. Second, following the best practise [20], we evaluated
PTrix on efficiency of code coverage, which is a widely accepted
utility metric of fuzzers [23, 24]. Recall that PTrix uses feedback
that has higher path-sensitivity than QEMU-AFL. To show that our
new feedback indeed allows PTrix to discover new code space,
we also conducted a study to compare the code space explored by
PTrix and QEMU-AFL.
To evaluate its vulnerability discovery ability, we applied PTrix
on a set of commonly used and exhaustively fuzzed programs. As
we will present shortly, PTrix discovers 35 new vulnerabilities.
Among them, at least 10 were discovered due to our new feedback.
5.1 Experiment Settings
To support our evaluation, we selected a set of 9 programs. Details
about these programs and the corresponding fuzzing settings are
presented in Table 1. All these programs are either commonly used
for fuzzing evaluation [11, 27] or treated as core software by the
Fuzzing Project [12]. In addition, they represent a high level of
diversity in functionality and complexity. Considering that different
seed inputs and execution options could lead to varying fuzzing
results [18], we used the seeds suggested by AFL and configured