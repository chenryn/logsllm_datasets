##### System information (version)
  * OpenCV => 3.4.0
  * Operating System / Platform => Linux Ubuntu 16.04 X86 64 Bit
  * Compiler => gcc 5.4
##### Detailed description
Running BFmatcher with crossCheck enabled doesn't really cross check.
According to the documentation
(https://docs.opencv.org/trunk/d3/da1/classcv_1_1BFMatcher.html#ac6418c6f87e0e12a88979ea57980c020)
> If crossCheck==true, then the knnMatch() method with k=1 will only return
> pairs (i,j) such that for i-th query descriptor the j-th descriptor in the
> matcher's collection is the nearest and vice versa, i.e. the BFMatcher will
> only return consistent pairs.
I read this as, if _i_ is closest to _j_ , then _j_ is also closest to _i_.
I.e. this is symmetrical. However, this does not seem to be the case with the
implemented algorithm. Also, if we switch the collections, i.e.
queryDescriptors and trainDescriptors, we get different results, which is
unexpected.
##### Steps to reproduce
To illustrate the first part of the issue, try the following
    import numpy
    import cv2
    sources = numpy.array([[1, 1, 0], [1, 1, 1]], dtype=numpy.uint8)
    targets = numpy.array([[1, 1, 1], [0, 0, 0]], dtype=numpy.uint8)
    for si, source in enumerate(sources):
        for ti, target in enumerate(targets):
            print('%d -> %d: %d' % (si, ti, cv2.norm(source, target, cv2.NORM_HAMMING)))
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    matches = bf.knnMatch(sources, targets, k=1)
    print('-- crosscheck=True')
    for match in matches:
        if match:
            print('%d -> %d: %f' % (match[0].queryIdx, match[0].trainIdx, match[0].distance))
    bf_nocc = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=False)
    matches_nocc = bf.knnMatch(sources, targets, k=1)
    print('-- crosscheck=False')
    for match in matches_nocc:
        if match:
            print('%d -> %d: %f' % (match[0].queryIdx, match[0].trainIdx, match[0].distance))
This outputs
    0 -> 0: 1
    0 -> 1: 2
    1 -> 0: 0
    1 -> 1: 3
    -- crossCheck=True
    0 -> 1: 2.000000  0: 0.000000
    -- crossCheck=False
    0 -> 0: 1.000000
    1 -> 0: 0.000000
Here, the 0 -> 1 match when crossCheck=True is unexpected since source 0 is
closer to target 0.
Also, if we switch the sources and targets arrays, we get
    0 -> 0: 1
    0 -> 1: 0
    1 -> 0: 2
    1 -> 1: 3
    -- crossCheck=True
    0 -> 1: 0.000000
    -- crossCheck=False
    0 -> 1: 0.000000
    1 -> 0: 2.000000
Which is correct for crossCheck=True (as well as for crossCheck=False which I
don't expect to be symmetrical).
Unless I have misunderstood how cross check is supposed to work, this appears
to me to be an issue with the current implementation (there has been no
updates on this algorithm since 3.4.0 as far as I can see)
For C++ sample code, see http://answers.opencv.org/question/194661/bfmatcher-
with-crosscheck-doesnt-crosscheck/