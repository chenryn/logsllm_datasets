overhead.
A. Comparison
Table III summarizes the comparison of related proposals
with DeviceVeil. Individual USB authentication is achieved
by GoodUSB and DeviceVeil. However, GoodUSB depends
on serial numbers, which can be easily modiﬁed. DeviceVeil
uses PUF for individual USB authentication, which ties the
authentication process with physical IC characteristics of the
USB device. Kells and ProvUSB do not offer individual USB
authentication, but they offer individual host authentication
and can be combined with individual USB authentication
(i.e., DeviceVeil) to achieve mutual authentication. Additional
hardware requirement is imposed by USB 3.0 Type-C, and
Kells, ProvUSB, and DeviceVeil. Although the cost is cheap
on Type-C and DeviceVeil; Kells and ProvUSB require a
processor for TPM authentication. Granularity is divided into
device level (authenticates a USB device at insert time, causing
one-time, low overhead), and packet level (veriﬁes all com-
munication trafﬁc, causing signiﬁcant runtime overhead). De-
viceVeil imposes overhead only at insert-time similar to other
implementations except for Cinch and USBFILTER; however,
310
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:47 UTC from IEEE Xplore.  Restrictions apply. 
only DeviceVeil offers individual device authentication. Cinch
and USBFILTER incur overhead for each packet transferred
between a USB device and the host (38% for Cinch and 17.6%
for USBFILTER). Cinch and DeviceVeil both use hypervisor
for stronger isolation. Type-C, Cinch, and DeviceVeil are OS-
independent: Type-C is a standard, and Cinch and DeviceVeil
use a hypervisor to run an independent OS. Tamper-prooﬁng
is achieved by USBFILTER and DeviceVeil: USBFILTER
protects the host with trusted boot and SELinux; DeviceVeil
protects the hypervisor and the host with trusted boot, and the
USB device with PUF. Overall, DeviceVeil offers comprehen-
sive security at low cost.
B. Attack resistance
We have tested DeviceVeil against two real-world attacks:
BadUSB and MTP attack. For BadUSB, we used the code
from Caudill [8]. The target USB controller is Phison Electron-
ics Phison 2251-03 (2303), included in Toshiba TransMemory-
MX USB 3.0 16GB. BadUSB customizes the ﬁrmware on the
USB controller and disguises it as a keyboard (HID). How-
ever, this malicious BadUSB keyboard is not recognized by
DeviceVeil, and the attack fails. For the MTP attack, we used
ASUS XenPad 3. Without DeviceVeil, XenPad 3 is detected as
an MTP device, and the ﬁle system for MTP jmtpfs is opened.
However, with DeviceVeil, the device is not recognized.
C. Performance
We measured the performance of USB-PUF authentication
100 times on ThinkPad T400. The average time for USB-PUF
authentication was 1.705sec (min 1.683sec, max 1.729sec,
and std. deviation 0.110sec). For regular use, this delay for
authentication appears to be acceptable, considering USB
insertion is a manual process.
The target machine is old (Intel Core2 Duo P8400 2.26
GHz) and low performance (Average CPU Mark 1455 [12]).
If we can use current relevant machine (ThinkPad T580
with Intel Core i5-8350U 1.70GHz, Average CPU Mark
8189 [11]), we can get better performance because CPU
performance is improved by more than 5 times. We know that
the CPU improvement does not affect the latency directly,
but the latency can be estimated less than 1 seconds from 1.7
seconds (2 times). After authentication, the USB device is
accessed as para-pass-through, and thus, incurs no overhead.
VIII. SECURITY ANALYSIS
A. Attacks on BIOS/UEFI
DeviceVeil relies on virtualization, TPM, and secure boot,
all of which are set up through BIOS/UEFI. Thus the se-
curity of BIOS/UEFI is critical, but some old BIOSes come
with default/well-known passwords, which also can be reset
by jumper settings when physical access is possible. With
improved BIOS/UEFI security in recent times, attacks also
became more sophisticated. For example, the System Manage-
ment Mode (SMM) and sleep mode S3 have been exploited
in several attacks (e.g., [17], [26], [82]). Fortunately, these
vulnerabilities are also often promptly patched by vendors.
Note that
the OS kernel and hypervisor can be made
independent of BIOS/UEFI using DRTM (Dynamic Root of
Trust Measurement, such as Intel TXT; cf. [85]). The DRTM
of GraceWipe utilizes tboot [65] which depends on Intel TXT
(Trusted eXecution Technology) and resets the trust chain.
GraceWipe uses the secret key stored in the TPM, which is
sealed/unsealed by the PCR[17] that is measured by tboot only.
The method allows being independent of the measurement
from the BIOS/UEFI. However, DeviceVeil cannot depend on
DRTM alone, because secure boot and I/O virtualization can
be reset if the BIOS/UEFI is compromised. If secure boot is
turned off in BIOS, re-installation attacks become possible. If
the I/O virtualization is on, a virtual machine may access it
through IOMMU.
B. Attacks on Hypervisor
Hypervisors also suffer from vulnerabilities [45], [64]. Since
DeviceVeil
is a type-I hypervisor and runs only one OS,
the attack surface for DeviceVeil is signiﬁcantly smaller than
normal hypervisors with multiple OSes (e.g., Xen). Similarly,
cross-VM side-channel attacks [84] are also not a concern.
DeviceVeil is based on the para-pass-through architecture and
thus, does not suffer from attacks through virtual devices, e.g.,
VENOM [76] (a vulnerability of ﬂoppy emulator in QEMU).
However, DeviceVeil also depends on CPU virtualization
technologies (i.e., Intel VT-x) as other hypervisors, and may
be vulnerable if there are vulnerabilities in such technologies.
C. Attacks on TPM
In contrast to BIOS attacks, DeviceVeil does not care for
TPM attacks because they disable booting causing a disadvan-
tage for the attacker, especially for the insider. Even if a side-
channel attack is possible, the creation of certain PCR values is
difﬁcult. In a TPM reset attack [29], [58], a TPM’s LRRESET
pin is grounded and initializes PCR values. However, it is still
difﬁcult to guess the PCR values to extract the key.
D. Attacks on Secure Boot
As mentioned in Section II, kexec can bypass the se-
cure boot as kexec can load unauthorized kernels bypassing
BIOS/UEFI and bootloader [47]. DeviceVeil prevents this
attack by using a non-kexec kernel, certiﬁed by secure boot.
Note that, secure boot could be bypassed by exploiting vul-
nerabilities in UEFI implementation [17]. The administrator
must use an up-to-date, secure UEFI BIOS.
E. Attacks on Memory
The encryption key from the main memory may be extracted
by DMA Attacks [54], [60] or cold-boot attacks [22]. These at-
tacks take the memory dump image and search for secret keys
(e.g., loaded from a TPM). However, they can be addressed by
relocation of secret keys from RAM to other (relatively) safer
places, such as SSE registers (AESSE [40]), debug registers
(TRESOR [39]), MSR registers (Amnesia [57]), and AVX
registers (PRIME [18]), GPU registers (PixelVault [75]). Keys
and secrets in RAM can also be protected by other hardware
311
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:47 UTC from IEEE Xplore.  Restrictions apply. 
security features in CPUs, such as Intel TSX (Mimosa [21]),
and and Intel TXT/AMD SVM (Hypnoguard [86] during ACPI
S3 suspension). Note that Intel SGX (Software Guard Exten-
sions) is inapplicable to DeviceVeil although SGX offers en-
crypted memory and isolated execution, as we require device-
level access (ring-0) from the trusted environment (i.e., our
hypervisor), but SGX allows only ring-3 (user level) privilege.
Memory attacks can also be launched via software side-
channels (e.g., cross-VM side-channel attacks). A disk encryp-
tion key is managed by DeviceVeil and stored in the memory
allocated to DeviceVeil. DeviceVeil
is a type-I hypervisor
and runs one OS only, and therefore cross-VM side-channel
attacks (e.g., [84]) from the host OS and memory leaks are
not applicable to DeviceVeil. However, DeviceVeil’s threat
model also includes a malicious insider. Such an attacker
can use hypervisor forensics tools (e.g., Actaeon [20]) to
detect hypervisor from the use of VMCS (Virtual Machine
Control Structure) of Intel VT-x. Actaeon requires a memory
dump image, but a pure software approach cannot capture
the memory properly, according to Graziano et al. [20], who
suggested using SMM based memory scanners (e.g., [48]).
However, SMM is protected by the security of BIOS/UEFI,
which is assumed to be secure by DeviceVeil.
F. Attacks on PUF
General PUF circuits are passive devices and do not keep a
state. They are vulnerable to replay attacks. If the DB in the
hypervisor of DeviceVeil is disclosed, the data can be exploited
to allow unauthorized devices. The current implementation of
the DB is protected by encryption (with a TPM-stored key)
and we assume that the TPM and DeviceVeil’s hypervisor are
free of vulnerabilities. To enable replay protections (against
any disclosed ciphertext-plaintext pairs), we need to use the
one-time challenge-response [36], a common random seed in
the PUF authentication circuits and veriﬁer [49], or circuits
hosting a key that is decrypted by a PUF created key [30].
A more sophisticated impersonation is modeling at-
tacks [50], [51] that emulate PUF software. Modeling attacks
use machine learning to create an algorithm to impersonate the
original PUF. However, this type of attack has two drawbacks.
The ﬁrst drawback is that the modeling attacks assume that the
challenge and response pairs of target PUF grow only linearly.
PL-PUF is based on LFSR that works as a pseudo-random
number generator, and thus makes it difﬁcult to model the PUF
authentication circuits. The second drawback is that modeling
attacks assume that challenge and response pairs are exposed
directly to attackers. The PL-PUF authentication circuits do
not offer challenge and response pairs directly. A ciphertext is
sent with the challenge, and the key in PL-PUF authentication
circuits decrypts it to generate the response. The modeling
attacks are improved with side-channel attacks [35], but PL-
PUF still has the advantage as it uses complex LFSR circuits
and only decrypts the AES ciphertext, which difﬁculty is the
same level of AES attacks.
G. Attacks on USB BUS
USB bus has no encryption and is easily sniffed by a USB
protocol analyzer. The lost information (e.g., a key) can be
used for replay attack or forged authentication [42]. These
attacks are not prevented by hardware tamper-proof on a USB
device for secret-hiding protection. One solution is encryption
of communication, but managing keys for such encryption
will be non-trivial and possibly subject to compromise. Even
if an encryption key is shared to authenticate a device by
some PCs, all PCs must renew the key when a PC loses it.
However, PUF allows creating different keys from a device for
each authentication [41]. The administrators can set a different
key on each PC. Current DeviceVeil uses the database for
challenge-response, but it can replace the key created by PUF.
DeviceVeil (hypervisor) issues a “Reset” command to a
USB device after the PUF authentication phase and the USB
device is visible to the Guest OS via para-pass-through. After
PUF authentication, an attacker may attempt to replace the
authenticated USB with an illegitimate USB device (i.e., a kind
of time-of-check to time-of-use, TOCTOU race condition).
However, the USB host controller on the PC detects the physi-
cal disconnection of a USB device. DeviceVeil is also aware of
the physical disconnection and the PUF authentication starts
from the beginning for the newly inserted device.
H. Legacy Devices
For backward compatibility, some users may want to use
legacy devices. DeviceVeil offers authentication for legacy
devices, but it depends on vulnerable serial numbers. Adminis-
trators must evaluate risks from such devices before allowing
them, although we strongly recommend using PUF-enabled
devices only.
I. Other concerns
DeviceVeil offers strong, one-way device authentication, but
mutual authentication is desirable when the host is untrusted.
We make the host tamper-proof against unauthorized USB
devices and malicious insiders; but it can also integrate host
authentication technology (e.g., Kells [7]), depending on the
cost and usage scenario.
IX. CONCLUSIONS
DeviceVeil is the ﬁrst solution that authenticates individual
USB devices with hardware-based identiﬁcation circuit,
PL-PUF, and hypervisor with a pre-OS authentication
mechanism, hardened by TPM and secure boot. It allows
connecting only authenticated USB devices and protects the
trust-by-default OS and user data against camouﬂage attacks
(e.g., BadUSB), protocol abuses, and unknown USB device
attacks. DeviceVeil requires hardware modiﬁcation, but the
estimated cost appears to be reasonable (less than 1 US
dollar), and it does not require any on-board processor on the
USB device. We believe, DeviceVeil offers a low-cost device
authentication technique, mitigating an important security gap
in existing USB defense solutions.
312
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:47 UTC from IEEE Xplore.  Restrictions apply. 
[27] M. Kang and H. Saiedian, “USBWall: A novel security mechanism to
protect against maliciously reprogrammed USB devices,” Information
Security Journal: A Global Perspective, vol. 26, no. 4, pp. 166–185,
2017.
[28] Kanguru’s
FlashTrust,
“https://www.kanguru.com/storage-
accessories/kanguru-ﬂashtrust-secure-ﬁrmware.shtml,” 2014.
[29] B. Kauer, “OSLO: Improving the Security of Trusted Computing,” in
USENIX Security Symposium, 2007.
[30] T. Kubota, M. Shiozaki, and T. Fujino, “Robust authentication using
physically unclonable functions,” in Embedded Security in Cars, ser.
ESCAR’16, 2016.
[31] K. Kursawe, “Trusted Computing and its Applications: An Overview,”
in Information Security Solutions Europe, ser. ISSE’06, 2004.
[32] D. Kushner, “The real story of stuxnet,” ieee Spectrum, vol. 50, no. 3,
pp. 48–53, 2013.
[33] J. W. Lee, D. Lim, B. Gassend, G. E. S. andMarten van Dijk, and
S. Devadas, “A technique to build a secret key in integrated circuits for
identiﬁcation and authentication applications,” in 2004 Symposium on