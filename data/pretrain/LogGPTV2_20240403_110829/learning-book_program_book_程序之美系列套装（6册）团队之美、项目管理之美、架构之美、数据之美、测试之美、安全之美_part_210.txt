的嵌入式开发人员、有经验的Mac开发人员也是如此。其目标是使
所有程序员都能够舒适、高效地工作，使他们能够快速地解决问
题，同时（从某种角度看也是最重要的）受益于他们的贡献，包括
建议、改进和扩展。
这是一个很灵活、形式多样和相互竞争的生态系统，绝大多数贡献
者都十分乐意通过协作来改进其软件，通过不断地相互评审来提升
他们的技巧。大家可以自由地发表意见，争论可能十分激烈。做某
件事总有更好的方法，代码总是会被很多聪明的人不断审查。在大
学的课堂上，会有很多计算机专业的学生对其实现进行分析。许多
公司会从中发现缺陷、发布安全建议。新的贡献者会通过对现有代
码的改进来展示自己的技能。硬件厂商会将该桌面移植到手机上。
人们对他们的工作以及他们完成工作的方法很感兴趣，并给它取了
一个现在大家众所周知的称呼：集市。21而且当遇到那些开发、维
护大量程序库和应用程序的传统组织所面临的挑战时，它将显得更
加自由和狂热。
有些挑战是来自技术方面的。软件将面对不断增长的数据量，而且
数据将变得越来越复杂，个体和组织所需的工作流也是如此。当公
司或政府管理者想实现产业转型时，还需要和他们使用的其他软件
（开源的或私有的）实现整合，例如迁移到SOA（面向服务架构）
时就需要做一些适应性修改。对于政府和公司的关键任务将会提出
1186
---
## Page 1188
更高的安全要求，需要良好地自动部署大量的软件。新手、小孩、
中老年人会有完全不同的需求，然而这些关注点都是有效的，并且
是同等重要的。I和其他产业相似，一般的开源软件和KDE的应用
越来越普及，分布式处理的需求也不断提高。用户显然会要求更易
于使用、更清晰、更优美的界面；和软件的交互响应更快、更好，
而不是显得过于复杂：同时还希望系统高可靠、稳定，数据更加安
全。开发人员希望扩展点对语言中立，API更好维护，提供兼容性
更好的二进制程序和源代码，移植路径更清晰，和他们每天习惯使
用的商业软件提供的功能更相近。
但对于开源软件项目而言，更容易让人畏惧的是社会性和协调方面
的工作更加巨大。充分交流是非常关键的，它可能会受到地区、文
化的阻碍，或多或少地反映了某些人的爱好和偏见，也可能只是受
到了时空距离的影响。通过站立会议只要15分钟就能结束的讨论，
在跨越半球的成员之间通过邮件列表的讨论可能需要花费好几天的
时间。达成意见统一的过程可能和做出决策一样重要，它需要将整
个团队的意见进行融合。显然，要让大家达成共识，需要更多的耐
心、理解和说服技巧。它将征得更多精通数学、物理知识的勇气十
足的人的意见，而不是简单的意见修改，因为他们不喜欢和诸如附
庸者之类的非程序员交流。基于这样的想法，气氛友好的Akademy
年会总是拥有一个良好的体验（参见下一小节）。我们从来没有看
到过这么庞大的、由来自世界各地的老年人和年轻人组成的团队。
他们来自相互竞争的国家、多样的民族，甚至是来自于不同的世
界，不同肤色的人们激烈地但文不失友好地在争论着与C++细节相
关的问题。
除了技术、人文方面的话题之外，第三个主流的有影响的话题是开
源软件的组织结构。在某些方面，组织结构对于开源软件团队来说
是必需的。特别是大型的、知名的软件项目需要拥有商标，接受来
自各方的贡献，组织年会等。当这段时间可以从与配偶相处和周末
旅行中挤出来时，通常也是该项目被公众认识的时候。从某种角度
来看，组织结构（或缺乏组织结构）将决定了社区的命运。到底是
团结但略显迟钝，还是疯狂但略显混乱的模式，这是一个很重要的
扶择。答案并不重要，因此它涉及了多种竞争项需要选择：采用基
金模式还是自由影响模式：稳定的开发过程还是吸引才华横溢的穴
居者；①可视性、想法共享还是聚焦于给人留下深刻印象的技术产
物。组织结构是必需的，不过在管理层级上将有很多不同的选择。
1187
---
## Page 1189
有些项目甚至没有董事会，而有些则拥有宣称自己是乐善好施的独
裁者。在成功和不成功的社区中都有最终形成该结果的例子。
在我们详细说明两个具体示例项目的技术、社会和组织问题以了解
KDE组织之前，先介绍一些KDE相关的背景和历史是十分有价值
的。因此在接下来的小节中，我们将介绍KDE社区当前的情况。
[1].它通常也称为开源软件。
[2]http://en.wikipedia.org/wiki/The_cathedral_and_the_Bazaar.
[3]它和完全由市场生成的软件是根本不同的。开源软件能够迎合
价值不大的需求，例如，它无须保证所有努力是满足市场销售意图
的，也不用证明能够收回投资。这也是KDE为什么比商业公司开发
的竞争产品应用更广泛的一个重要原因。
[4]使用这个术语带有很多感情因素。无法否定，我很多亲爱的朋
友总的来说将贡献一些阳光的、健康的养料。
1188
---
## Page 1190
12.2KDE项目的历史和组织结构
KDE或称为K桌面环境，最初是从失望中孕育的。那时FVWM是最
常见的桌面环境，Xeyes是屏幕上总会出现的东西，Motif是与
XForms竞争的工具集，它们大量吞噬了并发人员的脑细胞，而且没
有什么吸引力，KDE的创立是由一个革命性的目标引领的：将UNIX
的原生动力和漂亮、养眼的用户体验结合起来。之所以该目标能够
达成，是由于挪威的Trolltech公司发布了第一个版本的QT，它是针
对C++的面向对象GUI工具集的基础。QT为GUI程序员提供了一种系
统的、面向对象的、优雅的、易于学习的、文档齐备的、有效的工
具。1996年，当MatthiasEttrich还是Tuebingen大学的一名学生时，第
一次提出了其于QT开发完整的桌面环境的想法。该想法很快就得到
了药30名开发人员的响应，从那之后，该团队就不断稳定地发展。
KDE1.0版本是在1998年发布的。尽管其功能从现在看显得不够强
大，不过应该以当时的竞争对手作评价标准：那时的Windows3.1还
没有提供内存保护机制，Apple还在努力寻找新内核，Sun还在努力
弥补CDE中的缺憾。这时Linux还未被大肆宣传，开源软件的力量还
没有被软件产业深刻理解。
甚至在完成KDE1.0的同时，开发人员已经开始重新设计2.0版本的
工作。还缺少很多主要的元素：组件模型、网络抽象层、桌面通信
协议、UI样式API等。KDE2.0是第一个经过理性的架构、设计、实
现过程的版本。它曾经考虑过选择CORBA作为组件模型，不过最终
还是放弃了。同时也是第一次出现团队动荡。有趣的是，虽然一些
早期的核心开发人员离开了，但活跃的KDE开发团队的规模仍然在
缓慢且稳定地发展。KDEe.V，作为KDE贡献者组织，成立于1996
年，并在1998年成为KDE的主要提交者。从一开始，该组织就致力
于为KDE贡献者提供支持，但不主导KDE的技术方向。他们希望开
发过程是活跃的开发人员的工作结果，而不是充分管理的团队。该
理念已经被证实是最重要的因素之一，如果不是这样，KDE很难成
为开源软件项目中少数几个不受发起人深刻影响的一个。外部支持
在KDE中不被视为问题，但很多项目过度依赖于项目主要发起人，
当他们离并或失去兴趣时将导致项目停止。正因为如此，KDE没有
重蹈覆辙，成为了开源软件世界大力宣扬的项目，拥有着不断持续
的开发动力。
1189
---
## Page 1191
在2002年4月，KDE3.0发布。由于KDE2.0被认为是设计良好的，
因此3.0版本的开发历时6年，经过了5次主要的发布，最终朝着尽善
尽美的方向不断演化和完善。基于KDE3.0技术开发的重要应用程
序成为开源桌面环境的标准：磁盘管理程序K3B；通用的、漂亮的
音乐播放器Amarok；完善的个人通信套件Kontact。最有意思的是，
这些应用程序最初并不是将KDE作为唯一的目标桌面环境的，但都
将其作为构建最终用户界面的平台。从3.0版本开始，KDE开始分成
两个部分：桌面和环境（通常也称为平台）。但由于KDE仍然受到
X11的限制，因此这种分解并不容易被用户认可。这是下一步要做
的事情。
在2004年，KDE团队进入了其发展历史上的一段艰苦期。Trolltech
打算发布Qt4.0版本，它和之前的版本以及市场上的其他同类工具
集相比，有很大的增强，也有很大的变化。由于该工具集发生了很
大的变化，因此从Qt3.0迁移到Qt4.0所需的不是修改，而是移植。
关键的问题是KDE4.0是简单地在KDE3.0的基础上从Qt3.0移植到
Qt4.0还是重新设计以完成移植。两种方案都有很多支持者，不管
采用什么方法都明显引入大量棘手的问题，有大量的工作需要完
成。最终的决定是重新设计KDE。虽然现在大家都认为这是一个正
确的选择，但它仍然是一种危险的选择，因为这意味着在完成巨大
的移植工作之前，KDE3.0将成为扩展周期的主线。
Qt4.0中主要的新功能需要做些特别的强调。最初Trolltech是对X11
版本的Qt采用了GPL和商业双版权模式，现在延伸到了Qt所支持的
所有平台，特别是加入了Windows、MacOSX和嵌入式平台。因此
KDE4.O从某种意义上已经超越了UNIX世界。尽管UNIX桌面仍然是
其根基，但为KDE开发的应用程序现在将可以运行在Windows和
MacOSX平台上。这可能会引起一些争议。其中一个主要的观点
是，为这些专有的桌面环境并发提供漂亮的应用程序，势必会降低
用户从这些桌面环境中迁移到并源软件上的动力。另一个主要的观
点是“什么才是我们应该关心的？”更客气一些的说法是“我们为什么
要将有限的开发时间投入到非开源的目标系统上呢？"而支持这样
做的人则认为，使这些应用程序在各种平台都能使用可以使这些专
有平台的用户更容易迁移到开源操作系统上，并逐渐替代其关键的
应用程序。这些争论最后的发展完全符合KDE长期以来的魔咒“最
终的决定是由大家的工作做出的”。大量贡献者对在新目标平台上
的并发产生了浓厚的兴趣，因此最终的结果是，没有任何理由可以
剥夺那些期待以久的用户的需求。
1190
---
## Page 1192
为了实现平台无关，KDE4.0进行了重架构，将其分成了应用开发
平台、基于它构建的桌面以及相关的应用程序三部分。当然此时的
划分还是很模糊。
这样的历史让我们了解了诸如KDE之样的项目解决问题的方法。这
决不是单个开发人员能够解决的，无论他是多么才华横溢。如何能
够使知识和经验积累起来，并使其发挥最大的作用？从战略角度思
考，如何使一个大型的、来源不同的团队做出困难的决定，如何朝
着全部的目标前进，而不会破坏其中的乐趣？如何融合各种观点，
使最终的决定符合每个参与者的意愿，以及使KDE像其他并源软件
那样成功？换句话说，当大家各自拥有自己想法的时候，如何一起
构建大教堂，架构师如何承担起架构的角色，而不至于带上滑稽的
帽子。我们之所以从贡献者说起，是因为我们认为开源软件社区首
要的是社会组织结构，而不是技术结构。人是最稀有的也是最有价
值的资源。
每个项目都有不同的角色，在招募新成员时都没有权威。每个开源
软件项目都需要大量的对其宣传的男孩、女孩，以及一批有动力、
有技能、务实的黑客、艺术家、管理员、作家和翻译者。使他们像
是一个共同的集体的主要原因是他们都需要自发的动力、技能和自
我的约束与管理。项目能够吸引不同年龄段的贡献者，从高校学生
到退休人士。他们加入项目的动力是成为创建未来技术团队的一员
极具吸引力，大家对这些技术感兴趣，并希望推动这些技术，能做
更多有意义的事情，而不是写一些最终被抛弃掉的学术论文。功能
齐备的并源软件社区是一个极具竞争力的环境。我所遇见过的绝大
多数商业性的工程师团队都有很多管制，并对雇员所作贡献的投资
做了些政策上的保护。对于开源软件开发人员则不是这样。要将你
贡献的代码集成到软件中，唯一的标准是质量，以及有人继续维护
它。虽然源代码中可能会暂时存在一些平庸的片段，但在发展过程
中都将会被替换掉。代码是公开的，经常被人仔细检查。即使有些
代码实现已经拥有很高的质量，但在某些人眼里还不够尽善尽美，
那么就会有程序员对它进行改进。由于创新十分频繁，并源软件的
开发人员知道自已的作品经常会被别人改掉。这也能够说明为什么
开源软件项目的代码质量通常都比商业性项目的代码高，你无法寄
希望于代码中的缺陷不被人发现。
令人惊讶的是，很少编码人员会以被用户或媒体认可作为动机。经
常，在最终交付之前他们仍会对某些工作感到厌恶。和马拉松选手
一样，其满足感来自于内部动机，也就是凭借自己的知识到达了终