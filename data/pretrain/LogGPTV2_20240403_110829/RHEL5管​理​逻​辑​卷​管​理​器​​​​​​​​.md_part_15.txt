is `inherit`{.literal}, which applies the same policy as for the volume
group. These policies can be changed using the `lvchange`{.command}
command. For information on allocation policies, see [第 4.3.1 节
"创​​​​​​​建​​​​​​​卷​​​​​​​组​​​​​​​"](#LVM_CLI.html#VG_create){.xref}.
:::
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#LV_stripecreate}4.4.1.2. 创​​​​​​​建​​​​​​​条​​​​​​​状​​​​​​​卷​​​​​​​ {.title}
:::
[]{#LVM_CLI.html#idm139761066455232
.indexterm}[]{#LVM_CLI.html#idm139761066453792 .indexterm}
::: para
For large sequential reads and writes, creating a striped logical volume
can improve the efficiency of the data I/O. For general information
about striped volumes, see [第 2.3.2 节
"条​​​​​​​状​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​"](#LVM_components.html#striped_volumes){.xref}.
:::
::: para
当​​​​​​​您​​​​​​​创​​​​​​​建​​​​​​​条​​​​​​​状​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​时​​​​​​​，请​​​​​​​使​​​​​​​用​​​​​​​ `lvcreate`{.command} 命​​​​​​​令​​​​​​​的​​​​​​​ `-i`{.option}
参​​​​​​​数​​​​​​​指​​​​​​​定​​​​​​​条​​​​​​​带​​​​​​​的​​​​​​​数​​​​​​​目​​​​​​​。​​​​​​​这​​​​​​​取​​​​​​​决​​​​​​​于​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​要​​​​​​​进​​​​​​​行​​​​​​​条​​​​​​​带​​​​​​​化​​​​​​​的​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​数​​​​​​​目​​​​​​​。​​​​​​​条​​​​​​​带​​​​​​​的​​​​​​​数​​​​​​​目​​​​​​​不​​​​​​​能​​​​​​​超​​​​​​​过​​​​​​​卷​​​​​​​组​​​​​​​中​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​的​​​​​​​数​​​​​​​目​​​​​​​（除​​​​​​​非​​​​​​​使​​​​​​​用​​​​​​​
`--alloc anywhere`{.option} 参​​​​​​​数​​​​​​​）。​​​​​​​
:::
::: para
如​​​​​​​果​​​​​​​构​​​​​​​成​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​的​​​​​​​基​​​​​​​本​​​​​​​物​​​​​​​理​​​​​​​设​​​​​​​备​​​​​​​的​​​​​​​大​​​​​​​小​​​​​​​不​​​​​​​同​​​​​​​，条​​​​​​​状​​​​​​​卷​​​​​​​的​​​​​​​最​​​​​​​大​​​​​​​容​​​​​​​量​​​​​​​由​​​​​​​最​​​​​​​小​​​​​​​的​​​​​​​基​​​​​​​本​​​​​​​设​​​​​​​备​​​​​​​决​​​​​​​定​​​​​​​。​​​​​​​例​​​​​​​如​​​​​​​，在​​​​​​​有​​​​​​​两​​​​​​​个​​​​​​​分​​​​​​​支​​​​​​​条​​​​​​​状​​​​​​​卷​​​​​​​中​​​​​​​，其​​​​​​​容​​​​​​​量​​​​​​​最​​​​​​​大​​​​​​​为​​​​​​​较​​​​​​​小​​​​​​​设​​​​​​​备​​​​​​​的​​​​​​​两​​​​​​​倍​​​​​​​。​​​​​​​在​​​​​​​有​​​​​​​三​​​​​​​个​​​​​​​分​​​​​​​支​​​​​​​的​​​​​​​条​​​​​​​状​​​​​​​卷​​​​​​​中​​​​​​​，其​​​​​​​容​​​​​​​量​​​​​​​是​​​​​​​最​​​​​​​小​​​​​​​设​​​​​​​备​​​​​​​的​​​​​​​三​​​​​​​倍​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​创​​​​​​​建​​​​​​​了​​​​​​​跨​​​​​​​两​​​​​​​个​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​，幅​​​​​​​度​​​​​​​为​​​​​​​ 64KB 的​​​​​​​条​​​​​​​状​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​。​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​
50GB，名​​​​​​​称​​​​​​​为​​​​​​​ `gfslv`{.literal}，它​​​​​​​是​​​​​​​从​​​​​​​卷​​​​​​​组​​​​​​​ `vg0`{.literal}
中​​​​​​​分​​​​​​​割​​​​​​​出​​​​​​​来​​​​​​​的​​​​​​​。​​​​​​​
:::
``` screen
lvcreate -L 50G -i2 -I64 -n gfslv vg0
```
::: para
在​​​​​​​线​​​​​​​性​​​​​​​卷​​​​​​​中​​​​​​​，您​​​​​​​可​​​​​​​以​​​​​​​指​​​​​​​定​​​​​​​用​​​​​​​于​​​​​​​条​​​​​​​状​​​​​​​卷​​​​​​​的​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​扩​​​​​​​展​​​​​​​。​​​​​​​下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​创​​​​​​​建​​​​​​​了​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​ 100
扩​​​​​​​展​​​​​​​的​​​​​​​条​​​​​​​状​​​​​​​卷​​​​​​​，跨​​​​​​​两​​​​​​​个​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​，名​​​​​​​为​​​​​​​ `stripelv`{.literal}，属​​​​​​​于​​​​​​​卷​​​​​​​组​​​​​​​
`testvg`{.literal}。​​​​​​​该​​​​​​​条​​​​​​​状​​​​​​​卷​​​​​​​将​​​​​​​使​​​​​​​用​​​​​​​ `/dev/sda1`{.literal} 的​​​​​​​ 0-50
区​​​​​​​段​​​​​​​以​​​​​​​及​​​​​​​ `/dev/sdb1`{.literal} 50-100 区​​​​​​​段​​​​​​​的​​​​​​​。​​​​​​​
:::
``` screen
# lvcreate -l 100 -i2 -nstripelv testvg /dev/sda1:0-50 /dev/sdb1:50-100
  Using default stripesize 64.00 KB
  Logical volume "stripelv" created
```
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#mirror_create}4.4.1.3. 创​​​​​​​建​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​ {.title}
:::
[]{#LVM_CLI.html#idm139761067808304
.indexterm}[]{#LVM_CLI.html#idm139761067806864 .indexterm}
::: para
当​​​​​​​您​​​​​​​创​​​​​​​建​​​​​​​一​​​​​​​个​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​时​​​​​​​，您​​​​​​​可​​​​​​​使​​​​​​​用​​​​​​​ `lvcreate`{.command} 命​​​​​​​令​​​​​​​的​​​​​​​ `-m`{.option}
参​​​​​​​数​​​​​​​来​​​​​​​指​​​​​​​定​​​​​​​数​​​​​​​据​​​​​​​的​​​​​​​备​​​​​​​份​​​​​​​数​​​​​​​目​​​​​​​。​​​​​​​指​​​​​​​定​​​​​​​ `-m1`{.literal}
生​​​​​​​成​​​​​​​一​​​​​​​个​​​​​​​镜​​​​​​​像​​​​​​​，也​​​​​​​就​​​​​​​是​​​​​​​生​​​​​​​成​​​​​​​两​​​​​​​个​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​副​​​​​​​本​​​​​​​：一​​​​​​​个​​​​​​​线​​​​​​​性​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​加​​​​​​​上​​​​​​​一​​​​​​​个​​​​​​​副​​​​​​​本​​​​​​​。​​​​​​​同​​​​​​​样​​​​​​​的​​​​​​​，指​​​​​​​定​​​​​​​
`-m2`{.literal} 会​​​​​​​生​​​​​​​成​​​​​​​两​​​​​​​个​​​​​​​镜​​​​​​​像​​​​​​​，也​​​​​​​就​​​​​​​是​​​​​​​生​​​​​​​成​​​​​​​三​​​​​​​个​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​副​​​​​​​本​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​使​​​​​​​用​​​​​​​单​​​​​​​一​​​​​​​镜​​​​​​​像​​​​​​​创​​​​​​​建​​​​​​​一​​​​​​​个​​​​​​​镜​​​​​​​像​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​。​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​ 50GB，名​​​​​​​为​​​​​​​
`mirrorlv`{.literal}，且​​​​​​​是​​​​​​​从​​​​​​​卷​​​​​​​组​​​​​​​ `vg0`{.literal} 中​​​​​​​分​​​​​​​离​​​​​​​出​​​​​​​来​​​​​​​的​​​​​​​：
:::
``` screen
lvcreate -L 50G -m1 -n gfslv vg0
```
::: para
LVM 镜​​​​​​​像​​​​​​​将​​​​​​​分​​​​​​​割​​​​​​​复​​​​​​​制​​​​​​​到​​​​​​​区​​​​​​​域​​​​​​​（默​​​​​​​认​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​ 512K）的​​​​​​​设​​​​​​​备​​​​​​​。​​​​​​​您​​​​​​​可​​​​​​​以​​​​​​​使​​​​​​​用​​​​​​​
`-R`{.option} 参​​​​​​​数​​​​​​​以​​​​​​​ MB 为​​​​​​​单​​​​​​​位​​​​​​​指​​​​​​​定​​​​​​​区​​​​​​​域​​​​​​​大​​​​​​​小​​​​​​​。​​​​​​​LVM
维​​​​​​​护​​​​​​​一​​​​​​​个​​​​​​​小​​​​​​​的​​​​​​​日​​​​​​​志​​​​​​​，可​​​​​​​用​​​​​​​来​​​​​​​追​​​​​​​踪​​​​​​​哪​​​​​​​些​​​​​​​区​​​​​​​域​​​​​​​是​​​​​​​和​​​​​​​镜​​​​​​​像​​​​​​​同​​​​​​​步​​​​​​​的​​​​​​​。​​​​​​​默​​​​​​​认​​​​​​​情​​​​​​​况​​​​​​​下​​​​​​​，该​​​​​​​日​​​​​​​志​​​​​​​是​​​​​​​保​​​​​​​存​​​​​​​在​​​​​​​磁​​​​​​​盘​​​​​​​中​​​​​​​的​​​​​​​，这​​​​​​​样​​​​​​​可​​​​​​​以​​​​​​​使​​​​​​​它​​​​​​​在​​​​​​​机​​​​​​​器​​​​​​​重​​​​​​​启​​​​​​​后​​​​​​​得​​​​​​​以​​​​​​​保​​​​​​​存​​​​​​​。​​​​​​​您​​​​​​​可​​​​​​​以​​​​​​​使​​​​​​​用​​​​​​​
`--corelog`{.option}
参​​​​​​​数​​​​​​​令​​​​​​​该​​​​​​​日​​​​​​​志​​​​​​​在​​​​​​​内​​​​​​​存​​​​​​​中​​​​​​​保​​​​​​​存​​​​​​​，这​​​​​​​样​​​​​​​就​​​​​​​需​​​​​​​要​​​​​​​额​​​​​​​外​​​​​​​的​​​​​​​日​​​​​​​志​​​​​​​设​​​​​​​备​​​​​​​，但​​​​​​​它​​​​​​​将​​​​​​​需​​​​​​​要​​​​​​​在​​​​​​​每​​​​​​​次​​​​​​​重​​​​​​​启​​​​​​​时​​​​​​​重​​​​​​​新​​​​​​​同​​​​​​​步​​​​​​​化​​​​​​​来​​​​​​​获​​​​​​​得​​​​​​​完​​​​​​​整​​​​​​​镜​​​​​​​像​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​在​​​​​​​卷​​​​​​​组​​​​​​​ `bigvg`{.literal} 中​​​​​​​创​​​​​​​建​​​​​​​镜​​​​​​​像​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​。​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​名​​​​​​​称​​​​​​​为​​​​​​​
`ondiskmirvol`{.literal}，它​​​​​​​有​​​​​​​单​​​​​​​一​​​​​​​镜​​​​​​​像​​​​​​​。​​​​​​​卷​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​
12MB，并​​​​​​​在​​​​​​​内​​​​​​​存​​​​​​​中​​​​​​​保​​​​​​​存​​​​​​​镜​​​​​​​像​​​​​​​日​​​​​​​志​​​​​​​。​​​​​​​
:::
``` screen
# lvcreate -L 12MB -m1 --corelog -n ondiskmirvol bigvg
  Logical volume "ondiskmirvol" created
```
::: para
镜​​​​​​​像​​​​​​​日​​​​​​​志​​​​​​​是​​​​​​​在​​​​​​​与​​​​​​​生​​​​​​​成​​​​​​​镜​​​​​​​像​​​​​​​分​​​​​​​支​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​不​​​​​​​同​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​中​​​​​​​生​​​​​​​成​​​​​​​的​​​​​​​。​​​​​​​但​​​​​​​有​​​​​​​可​​​​​​​能​​​​​​​使​​​​​​​用​​​​​​​
`vgcreate`{.command} 命​​​​​​​令​​​​​​​的​​​​​​​ `--alloc anywhere`{.option}
参​​​​​​​数​​​​​​​在​​​​​​​镜​​​​​​​像​​​​​​​分​​​​​​​支​​​​​​​之​​​​​​​一​​​​​​​的​​​​​​​同​​​​​​​一​​​​​​​设​​​​​​​备​​​​​​​中​​​​​​​创​​​​​​​建​​​​​​​镜​​​​​​​像​​​​​​​分​​​​​​​支​​​​​​​。​​​​​​​这​​​​​​​可​​​​​​​能​​​​​​​会​​​​​​​降​​​​​​​低​​​​​​​性​​​​​​​能​​​​​​​，但​​​​​​​可​​​​​​​让​​​​​​​您​​​​​​​在​​​​​​​只​​​​​​​有​​​​​​​两​​​​​​​个​​​​​​​基​​​​​​​础​​​​​​​设​​​​​​​备​​​​​​​的​​​​​​​情​​​​​​​况​​​​​​​下​​​​​​​创​​​​​​​建​​​​​​​镜​​​​​​​像​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​使​​​​​​​用​​​​​​​单​​​​​​​一​​​​​​​镜​​​​​​​像​​​​​​​创​​​​​​​建​​​​​​​一​​​​​​​个​​​​​​​镜​​​​​​​像​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​，其​​​​​​​镜​​​​​​​像​​​​​​​日​​​​​​​志​​​​​​​位​​​​​​​于​​​​​​​作​​​​​​​为​​​​​​​镜​​​​​​​像​​​​​​​分​​​​​​​支​​​​​​​之​​​​​​​一​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​中​​​​​​​。​​​​​​​在​​​​​​​这​​​​​​​个​​​​​​​示​​​​​​​例​​​​​​​中​​​​​​​，卷​​​​​​​组​​​​​​​
`vg0`{.literal} 只​​​​​​​包​​​​​​​括​​​​​​​两​​​​​​​个​​​​​​​设​​​​​​​备​​​​​​​。​​​​​​​这​​​​​​​个​​​​​​​命​​​​​​​令​​​​​​​创​​​​​​​建​​​​​​​的​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​ 50GB，名​​​​​​​为​​​​​​​
`mirrorlv`{.literal}，且​​​​​​​是​​​​​​​从​​​​​​​卷​​​​​​​组​​​​​​​ `vg0`{.literal} 中​​​​​​​分​​​​​​​离​​​​​​​出​​​​​​​来​​​​​​​的​​​​​​​。​​​​​​​
:::
``` screen
lvcreate -L 500M -m1 -n mirrorlv -alloc anywhere vg0
```
::: para
创​​​​​​​建​​​​​​​了​​​​​​​镜​​​​​​​像​​​​​​​时​​​​​​​，就​​​​​​​会​​​​​​​同​​​​​​​步​​​​​​​镜​​​​​​​像​​​​​​​区​​​​​​​域​​​​​​​。​​​​​​​对​​​​​​​于​​​​​​​大​​​​​​​量​​​​​​​的​​​​​​​镜​​​​​​​像​​​​​​​组​​​​​​​件​​​​​​​来​​​​​​​说​​​​​​​，同​​​​​​​步​​​​​​​进​​​​​​​程​​​​​​​可​​​​​​​能​​​​​​​需​​​​​​​要​​​​​​​一​​​​​​​些​​​​​​​时​​​​​​​间​​​​​​​。​​​​​​​当​​​​​​​您​​​​​​​创​​​​​​​建​​​​​​​一​​​​​​​个​​​​​​​不​​​​​​​需​​​​​​​要​​​​​​​恢​​​​​​​复​​​​​​​的​​​​​​​新​​​​​​​镜​​​​​​​像​​​​​​​时​​​​​​​，您​​​​​​​可​​​​​​​以​​​​​​​指​​​​​​​定​​​​​​​
`nosync`{.option} 参​​​​​​​数​​​​​​​说​​​​​​​明​​​​​​​不​​​​​​​需​​​​​​​要​​​​​​​从​​​​​​​第​​​​​​​一​​​​​​​个​​​​​​​设​​​​​​​备​​​​​​​进​​​​​​​行​​​​​​​初​​​​​​​始​​​​​​​同​​​​​​​步​​​​​​​化​​​​​​​。​​​​​​​
:::
::: para
您​​​​​​​可​​​​​​​以​​​​​​​指​​​​​​​定​​​​​​​镜​​​​​​​像​​​​​​​日​​​​​​​志​​​​​​​使​​​​​​​用​​​​​​​哪​​​​​​​些​​​​​​​设​​​​​​​备​​​​​​​并​​​​​​​进​​​​​​​行​​​​​​​记​​​​​​​录​​​​​​​。​​​​​​​您​​​​​​​还​​​​​​​可​​​​​​​以​​​​​​​指​​​​​​​定​​​​​​​要​​​​​​​使​​​​​​​用​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​扩​​​​​​​展​​​​​​​。​​​​​​​要​​​​​​​强​​​​​​​制​​​​​​​登​​​​​​​录​​​​​​​到​​​​​​​特​​​​​​​定​​​​​​​磁​​​​​​​盘​​​​​​​，请​​​​​​​在​​​​​​​存​​​​​​​放​​​​​​​扩​​​​​​​展​​​​​​​的​​​​​​​磁​​​​​​​盘​​​​​​​中​​​​​​​明​​​​​​​确​​​​​​​指​​​​​​​定​​​​​​​一​​​​​​​个​​​​​​​扩​​​​​​​展​​​​​​​。​​​​​​​LVM
不​​​​​​​一​​​​​​​定​​​​​​​要​​​​​​​考​​​​​​​虑​​​​​​​命​​​​​​​令​​​​​​​行​​​​​​​中​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​顺​​​​​​​序​​​​​​​。​​​​​​​如​​​​​​​果​​​​​​​列​​​​​​​出​​​​​​​任​​​​​​​意​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​，那​​​​​​​么​​​​​​​那​​​​​​​里​​​​​​​就​​​​​​​是​​​​​​​唯​​​​​​​一​​​​​​​进​​​​​​​行​​​​​​​磁​​​​​​​盘​​​​​​​分​​​​​​​配​​​​​​​的​​​​​​​地​​​​​​​方​​​​​​​。​​​​​​​列​​​​​​​表​​​​​​​中​​​​​​​包​​​​​​​含​​​​​​​的​​​​​​​任​​​​​​​何​​​​​​​已​​​​​​​经​​​​​​​被​​​​​​​分​​​​​​​配​​​​​​​的​​​​​​​物​​​​​​​理​​​​​​​扩​​​​​​​展​​​​​​​将​​​​​​​会​​​​​​​被​​​​​​​忽​​​​​​​略​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​创​​​​​​​建​​​​​​​了​​​​​​​带​​​​​​​单​​​​​​​一​​​​​​​镜​​​​​​​像​​​​​​​的​​​​​​​镜​​​​​​​像​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​，卷​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​ 500GB，名​​​​​​​为​​​​​​​
`mirrorlv`{.literal}，是​​​​​​​从​​​​​​​卷​​​​​​​组​​​​​​​ `vg0`{.literal}
中​​​​​​​分​​​​​​​割​​​​​​​出​​​​​​​来​​​​​​​的​​​​​​​。​​​​​​​镜​​​​​​​像​​​​​​​的​​​​​​​一​​​​​​​支​​​​​​​位​​​​​​​于​​​​​​​设​​​​​​​备​​​​​​​ `/dev/sda1`{.literal}，第​​​​​​​二​​​​​​​支​​​​​​​位​​​​​​​于​​​​​​​设​​​​​​​备​​​​​​​
`/dev/sdb1`{.literal}，镜​​​​​​​像​​​​​​​日​​​​​​​志​​​​​​​位​​​​​​​于​​​​​​​ `/dev/sdc1`{.literal}。​​​​​​​
:::
``` screen
lvcreate -L 500M -m1 -n mirrorlv vg0 /dev/sda1 /dev/sdb1 /dev/sdc1
```
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​创​​​​​​​建​​​​​​​了​​​​​​​带​​​​​​​单​​​​​​​一​​​​​​​镜​​​​​​​像​​​​​​​的​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​。​​​​​​​卷​​​​​​​的​​​​​​​大​​​​​​​小​​​​​​​为​​​​​​​ 500MB，名​​​​​​​为​​​​​​​
`mirrorlv`{.literal}，是​​​​​​​从​​​​​​​卷​​​​​​​组​​​​​​​ `vg0`{.literal}
中​​​​​​​分​​​​​​​割​​​​​​​出​​​​​​​来​​​​​​​的​​​​​​​。​​​​​​​镜​​​​​​​像​​​​​​​的​​​​​​​第​​​​​​​一​​​​​​​个​​​​​​​分​​​​​​​支​​​​​​​在​​​​​​​设​​​​​​​备​​​​​​​ `/dev/sda1`{.literal} 的​​​​​​​第​​​​​​​ 0 到​​​​​​​ 499
扩​​​​​​​展​​​​​​​，镜​​​​​​​像​​​​​​​的​​​​​​​第​​​​​​​二​​​​​​​个​​​​​​​分​​​​​​​支​​​​​​​位​​​​​​​于​​​​​​​设​​​​​​​备​​​​​​​ `/dev/sdb1`{.literal} 的​​​​​​​第​​​​​​​ 0 到​​​​​​​ 499
扩​​​​​​​展​​​​​​​，且​​​​​​​镜​​​​​​​像​​​​​​​日​​​​​​​志​​​​​​​从​​​​​​​ `/dev/sdc1`{.literal} 的​​​​​​​扩​​​​​​​展​​​​​​​ 0 开​​​​​​​始​​​​​​​。​​​​​​​这​​​​​​​些​​​​​​​是​​​​​​​ 1MB
的​​​​​​​扩​​​​​​​展​​​​​​​。​​​​​​​如​​​​​​​果​​​​​​​任​​​​​​​何​​​​​​​指​​​​​​​定​​​​​​​的​​​​​​​扩​​​​​​​展​​​​​​​已​​​​​​​经​​​​​​​被​​​​​​​分​​​​​​​配​​​​​​​了​​​​​​​，那​​​​​​​么​​​​​​​它​​​​​​​们​​​​​​​就​​​​​​​会​​​​​​​被​​​​​​​忽​​​​​​​略​​​​​​​。​​​​​​​
:::
``` screen
lvcreate -L 500M -m1 -n mirrorlv vg0 /dev/sda1:0-499 /dev/sdb1:0-499 /dev/sdc1:0
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在​​​​​​​ RHEL 5.3 发​​​​​​​行​​​​​​​本​​​​​​​中​​​​​​​，在​​​​​​​群​​​​​​​集​​​​​​​中​​​​​​​支​​​​​​​持​​​​​​​镜​​​​​​​像​​​​​​​的​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​。​​​​​​​
:::
:::
:::
:::
::: section
::: titlepage
### [⁠]{#LVM_CLI.html#mirror_reconfigure}4.4.1.4. 修​​​​​​​改​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​配​​​​​​​置​​​​​​​ {.title}
:::
[]{#LVM_CLI.html#idm139761029859008
.indexterm}[]{#LVM_CLI.html#idm139761029857568
.indexterm}[]{#LVM_CLI.html#idm139761029856128
.indexterm}[]{#LVM_CLI.html#idm139761029854688 .indexterm}
::: para
您​​​​​​​可​​​​​​​以​​​​​​​使​​​​​​​用​​​​​​​ `lvconvert`{.command}
命​​​​​​​令​​​​​​​将​​​​​​​一​​​​​​​个​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​从​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​转​​​​​​​换​​​​​​​成​​​​​​​线​​​​​​​性​​​​​​​卷​​​​​​​，或​​​​​​​者​​​​​​​从​​​​​​​线​​​​​​​性​​​​​​​卷​​​​​​​转​​​​​​​换​​​​​​​成​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​。​​​​​​​您​​​​​​​还​​​​​​​可​​​​​​​以​​​​​​​使​​​​​​​用​​​​​​​这​​​​​​​个​​​​​​​命​​​​​​​令​​​​​​​来​​​​​​​重​​​​​​​新​​​​​​​配​​​​​​​置​​​​​​​现​​​​​​​有​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​的​​​​​​​其​​​​​​​它​​​​​​​镜​​​​​​​像​​​​​​​参​​​​​​​数​​​​​​​，比​​​​​​​如​​​​​​​
`corelog`{.literal}。​​​​​​​
:::
::: para
当​​​​​​​您​​​​​​​将​​​​​​​一​​​​​​​个​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​转​​​​​​​换​​​​​​​成​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​时​​​​​​​，通​​​​​​​常​​​​​​​您​​​​​​​需​​​​​​​要​​​​​​​为​​​​​​​现​​​​​​​有​​​​​​​卷​​​​​​​创​​​​​​​建​​​​​​​镜​​​​​​​像​​​​​​​分​​​​​​​支​​​​​​​。​​​​​​​就​​​​​​​是​​​​​​​说​​​​​​​您​​​​​​​的​​​​​​​卷​​​​​​​组​​​​​​​必​​​​​​​须​​​​​​​包​​​​​​​含​​​​​​​用​​​​​​​作​​​​​​​镜​​​​​​​像​​​​​​​分​​​​​​​支​​​​​​​和​​​​​​​镜​​​​​​​像​​​​​​​日​​​​​​​志​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​和​​​​​​​空​​​​​​​间​​​​​​​。​​​​​​​
:::
::: para
If you lose a leg of a mirror, LVM converts the volume to a linear
volume so that you still have access to the volume, without the mirror
redundancy. After you replace the leg, you can use the
`lvconvert`{.command} command to restore the mirror. This procedure is
provided in [第 6.3 节 "修​​​​​​​复​​​​​​​ LVM
镜​​​​​​​像​​​​​​​错​​​​​​​误​​​​​​​"](#troubleshooting.html#mirrorrecover){.xref}.
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​可​​​​​​​将​​​​​​​线​​​​​​​性​​​​​​​卷​​​​​​​ `vg00/lvol1`{.literal} 转​​​​​​​换​​​​​​​成​​​​​​​镜​​​​​​​像​​​​​​​卷​​​​​​​。​​​​​​​
:::
``` screen
lvconvert -m1 vg00/lvol1