rithm that extracts such B by applying the Forking lemma.
Thus, if the extraction works well, then Theorem 4.2 holds.
We prove that the following lemma for these extractions.
Lemma 4.4. The SPK V proves the knowledge α, β, ζ, ξ, ζ ′,
ξ+γA ,
ξ′, u, xi, δ, δ′ such that ψ1 = f α, ψ2 = (ghζ
ψ3 = (ghζ ′
t , and ψ5 = ψxi+β
2 gγAα+δ
2gγB α+δ′
1 hxi
0hu
0 hu
1 ht
)
)
.
1
2
6
1
1
ξ′+γB , ψ4 =ehβ
Proof. By the knowledge extractor for V , we can obtain
α, β, ζ, ξ, ζ ′, ξ′, u, xi, δ, δ′ such that
e(ψ2,vkA)
e(g,bg) = e(h0,bg)ζ e(h1,bg)ue(h2,bg)xi e(g1,vkA)αe(g1,bg)δ
e(h1,bg)ue(g2,vkB )αe(g2,bg)δ′
e(g,bg)e(h2,bg)t = e(h0,bg)ζ′
e(ψ3,vkB )
e(ψ2,bg)ξ
e(ψ3,bg)ξ′
ψ1 = f α
ψξ
1f −δ = 1
ψξ′
1 f −δ′
= 1
ψ4 =ehβ
ψ5 = ψxi+β
6
t
From (1), the equation
(1)
(2)
(3)
(4)
(5)
(6)
(7)
1 , and
e(ψ2, vkAbgξ) = e(hζ
holds. Set ψ2 = gθ, h0 = gθ0
0hu
1 hxi
2 ,bg)e(g1, vkα
1 , h1 = gθ1
Abgδ)e(g,bg)
1 , h2 = gθ2
g1 = gµ for some θ, θ1, θ2, µ ∈ Zp. Since vkA = bgγA ,
e(g,bg)θ(ξ+γA) = e(g,bg)µ(θ0ζ+θ1u+θ2xi+γAα+δ)+1, and thus
θ(ξ + γA) = µ(θ0ζ + θ1u + θ2xi + γAα + δ) + 1 mod p holds.
This means ψ2 = gθ = (gµ(θ0ζ+θ1u+θ2xi+γAα+δ)+1)
(ghζ
(ghζ ′
ξ′+γB holds. From (3), the extracted α
satisﬁes ψ1 = f α. Then, from (4) and (5), δ = αξ and
δ′ = αξ′ holds. Finally, from (6) and (7), the extracted xi
ξ+γA holds. Similarly, from (2), ψ3 =
2 gγAα+δ
)
2gγB α+δ′
1 hxi
1 ht
0hu
0 hu
ξ+γA =
)
1
2
1
1
1
and β satisfy ψ4 =ehβ
t and ψ5 = ψxi+β
6
.
Theorem 4.3. The proposed GS-TBK scheme satisﬁes
non-frameability in the random oracle model under the DL
assumption.
Proof. Let (G1, G2, GT , e,eg,bg,egx) be a DL instance. We
construct an algorithm B that breaks the DL problem as
follows. Let qA be the number of SndToU queries. B guesses
the user i∗ ∈ [1, qA] that A outputs in the ﬁnal phase. We
assume the guess is correct with the probability 1/qA. B
chooses θ2
values as in the scheme. When i∗ is added to the group
$← Zp, sets cx :=
via the SndToU query, B chooses sx, cx
i∗ ), and sends (sx, cx) to A. For
a signing query (·, i∗), B programs the random oracle H and
$← Zp and sets h2 = egθ2 , uski∗ := x, and
2 , and eXi∗ := egx. B chooses other all
i∗ ,egsx /eX cx
Xi∗ := (egx)θ2 = hx
H ′(Xi, eXi∗ , hsx
2 /X cx
785computes a signature. Finally, A outputs a signature. B
rewinds A and extracts x∗ from the signatures output by A
by applying the Forking lemma [50]. Since the signatures
are traced to i∗, the extracted x∗ satisﬁes Xi∗ = hx∗
2 . So, B
outputs x∗ if the extraction works well.
5.
IMPLEMENTATION
In this section, we give our implementation results. Our
implementation environment is as follows: CPU: Xeon E5-
2660 v3 @ 2.60GHz, and gcc 4.9.2. We set the maximum
size of time T is 2,048, and each day is assigned to a leaf
node (thus log2 T = 11). This setting is the same as that of
Liu et al. [37]. Our implementations use the RELIC library
(ver.0.4.1) [2] for elliptic curve operations and the pairing
operation. We note that we employ asymmetric pairing set-
tings ((type 3) Barreto-Naehrig (BN) curves [7]) with 254-
bit order. In this setting, the sizes of a scalar value in Zp,
an element in G1, an element in G2, and an element in GT
are 32 bytes, 33 bytes, 65 bytes, and 256 bytes, respectively.
Then, the signature size is 615 bytes, and the size of expira-
tion information is 98 + 105 log2 T bytes (1,253 bytes when
log2 T = 11).
Next we show benchmarks of algorithms, except Verify,
in Table 2. Here, we assume that the pre-computable val-
ues, e.g., e(h0,bg), are computed in the GKeyGen algorithm.
Moreover, we prepare tables for ﬁxed point scalar multipli-
cations in the GKeyGen algorithm. Note that the Revoke
algorithm consists of two sub procedures, generating expira-
tion information eit and generating revocation list RLt. The
former cost depends on log2 T , and the latter cost linearly
depends on the number of prematurely revoked signers Rpre.
In the worst case (only the most left leaf is revoked), eit
consists of log2 T BBS+ signatures.
Table 2: Benchmarks (milliseconds)
Algorithms
Benchmarks
GKeyGen
Join
Issue
Sign
Revoke
11.395 (incl. 7.704 as pre-computations)
0.287
3.863
3.695
3.590 (eit)†/0.150 (RLt)‡
†: The worst case when we set T = 2, 048.
‡: For prematurely revoking one signer.
It is particularly worth noting that the computational cost
of our Sign algorithm is constant in terms of both the time
representation and the number of revoked signers. Moreover,
the running time of our Sign algorithm is less than 4 msec.
Next, we show the Verify algorithm. Remark that in the
usual VLR group signature schemes, the cost of the veriﬁca-
tion algorithm (more precisely the revocation check) linearly
depends on the number of total revoked signers whereas in
GS-TBK it just linearly depends on the number of prema-
turely revoked signers due to time-bound keys. Thus, we
show the running time of the Verify algorithm for several
numbers of prematurely revoked signers Rpre. Recall that
the Verify algorithm consists of two sub procedures, the ver-
iﬁcation check and the revocation check. The former is in-
dependent of Rpre whereas the latter depends on Rpre. Let
Rall := Rpre + Rnatural
be the total number of revoked signers, where Rnatural be the
number of naturally revoked signers, and we set
Rate := Rpre/Rall
For example, when Rall = 1, 000, 000 and Rate = 0.2, then
Rpre = 200, 000 and Rnatural = 800, 000.
First, we show the running time of the veriﬁcation check
i.e., the running time of the Verify algorithm with Rate =
0 in Fig 3. The running time is approximately 11.5 msec
regardless of Rall.
)
c
e
s
m
(
k
c
e
h
C
n
o
i
t
a
c
i
f
i
r
e
V
12.000
11.900
11.800
11.700
11.600
11.500
11.400
11.300
11.200
11.100
11.000
11.468 
11.500 
11.422 
11.441 
11.417 
1,000,000 2,000,000 3,000,000 4,000,000 5,000,000
The Number of Total Revoked Signers (Rall)
Figure 3: The Running Time of the Veriﬁcation Check
Next, we show the Verify algorithm for each Rate. We set
Rall = 5, 000, 000 and show the running time of the Verify
algorithm in Fig 4.
)
c
e
s
(
y
i
f
i
r
e
V
3,500
3,000
2,500
2,000
1,500
1,000
500
0
4,000,000 
4,000,000
Verify
Rpre
3,000,000 
2,757 
2,000,000 
2,085 
1,000,000 
1,377 
688 
S
i
g
n
e
r
s
(
R
p
r
e
)
3,500,000
3,000,000
2,500,000
2,000,000
1,500,000
1,000,000
500,000
0
P
r
e
m
a
t
u
r
e
l
y
R
e
v
o
k
e
d
T
h
e
N
u
m