      if (forksrv_pid  fork server -> target子进程
            */
        execv(target_path, argv);
        /* Use a distinctive bitmap signature to tell the parent about execv()
           falling through. */
        // 告诉父进程执行失败，结束子进程
        *(u32*)trace_bits = EXEC_FAIL_SIG;
        exit(0);
      }
      /* Close the unneeded endpoints. */
      close(ctl_pipe[0]);
      close(st_pipe[1]);
      fsrv_ctl_fd = ctl_pipe[1]; // 父进程只能发送命令
      fsrv_st_fd  = st_pipe[0];  // 父进程只能读取状态
      /* Wait for the fork server to come up, but don't wait too long. */
        // 在一定时间内等待fork server启动
      it.it_value.tv_sec = ((exec_tmout * FORK_WAIT_MULT) / 1000);
      it.it_value.tv_usec = ((exec_tmout * FORK_WAIT_MULT) % 1000) * 1000;
      setitimer(ITIMER_REAL, &it, NULL);
      rlen = read(fsrv_st_fd, &status, 4); // 从管道里读取4字节数据到status
      it.it_value.tv_sec = 0;
      it.it_value.tv_usec = 0;
      setitimer(ITIMER_REAL, &it, NULL);
      /* If we have a four-byte "hello" message from the server, we're all set.
         Otherwise, try to figure out what went wrong. */
      if (rlen == 4) { // 以读取的结果判断fork server是否成功启动
        OKF("All right - fork server is up.");
        return;
      }
      // 子进程启动失败的异常处理相关
      if (child_timed_out)
        FATAL("Timeout while initializing fork server (adjusting -t may help)");
      if (waitpid(forksrv_pid, &status, 0) <= 0)
        PFATAL("waitpid() failed");
       ... ...
    }
我们结合fuzzer对该函数的调用来梳理完整的流程如下：
启动目标程序进程后，目标程序会运行一个fork server，fuzzer自身并不负责fork子进程，而是通过管道与fork server通信，由fork
server来完成fork以及继续执行目标程序的操作。
对于fuzzer和目标程序之间的通信状态我们可以通过下图来梳理：
结合前面的插桩部分一起来看：
首先，`afl-fuzz` 会创建两个管道：状态管道和控制管道，然后执行目标程序。此时的目标程序的 `main()` 函数已经被插桩，程序控制流进入
`__afl_maybe_log` 中。如果fuzz是第一次执行，则此时的程序就成了fork server们之后的目标程序都由该fork
server通过fork生成子进程来运行。fuzz进行过程中，fork server会一直执行fork操作，并将子进程的结束状态通过状态管道传递给
`afl-fuzz`。
（对于fork server的具体操作，在前面插桩部分时已经根据源码进行了说明，可以回顾一下。）
##### 2.5 run_target 函数
该函数主要执行目标应用程序，并进行超时监控，返回状态信息，被调用的程序会更新 `trace_bits[]` 。
结合源码进行解释：
    static u8 run_target(char** argv, u32 timeout) {
      static struct itimerval it;
      static u32 prev_timed_out = 0;
      static u64 exec_ms = 0;
      int status = 0;
      u32 tb4;
      child_timed_out = 0;
      /* After this memset, trace_bits[] are effectively volatile, so we
         must prevent any earlier operations from venturing into that
         territory. */
      memset(trace_bits, 0, MAP_SIZE); // 将trace_bits全部置0，清空共享内存
      MEM_BARRIER();
      /* If we're running in "dumb" mode, we can't rely on the fork server
         logic compiled into the target program, so we will just keep calling
         execve(). There is a bit of code duplication between here and 
         init_fork server(), but c'est la vie. */
      if (dumb_mode == 1 || no_fork server) { // 如果是dumb_mode模式且没有fork server
        child_pid = fork(); // 直接fork出一个子进程
        if (child_pid < 0) PFATAL("fork() failed");
        if (!child_pid) {
         ... ...
          /* Isolate the process and configure standard descriptors. If out_file is
             specified, stdin is /dev/null; otherwise, out_fd is cloned instead. */
          setsid();
          dup2(dev_null_fd, 1);
          dup2(dev_null_fd, 2);
          if (out_file) {
            dup2(dev_null_fd, 0);
          } else {
            dup2(out_fd, 0);
            close(out_fd);
          }
          /* On Linux, would be faster to use O_CLOEXEC. Maybe TODO. */
          close(dev_null_fd);
          close(out_dir_fd);
          close(dev_urandom_fd);
          close(fileno(plot_file));
          /* Set sane defaults for ASAN if nothing else specified. */
          setenv("ASAN_OPTIONS", "abort_on_error=1:"
                                 "detect_leaks=0:"
                                 "symbolize=0:"
                                 "allocator_may_return_null=1", 0);
          setenv("MSAN_OPTIONS", "exit_code=" STRINGIFY(MSAN_ERROR) ":"
                                 "symbolize=0:"
                                 "msan_track_origins=0", 0);
          execv(target_path, argv); // 让子进程execv执行目标程序
          /* Use a distinctive bitmap value to tell the parent about execv()
             falling through. */
          *(u32*)trace_bits = EXEC_FAIL_SIG; // execv执行失败，写入 EXEC_FAIL_SIG
          exit(0);
        }
      } else {
        s32 res;
        /* In non-dumb mode, we have the fork server up and running, so simply
           tell it to have at it, and then read back PID. */
        // 如果并不是处在dumb_mode模式，说明fork server已经启动了，我们只需要进行
        // 控制管道的写和状态管道的读即可
        if ((res = write(fsrv_ctl_fd, &prev_timed_out, 4)) != 4) { 
          if (stop_soon) return 0;
          RPFATAL(res, "Unable to request new process from fork server (OOM?)");
        }
        if ((res = read(fsrv_st_fd, &child_pid, 4)) != 4) {
          if (stop_soon) return 0;
          RPFATAL(res, "Unable to request new process from fork server (OOM?)");
        }
        if (child_pid <= 0) FATAL("Fork server is misbehaving (OOM?)");
      }
      /* Configure timeout, as requested by user, then wait for child to terminate. */
    // 配置超时，等待子进程结束
      it.it_value.tv_sec = (timeout / 1000);
      it.it_value.tv_usec = (timeout % 1000) * 1000;
      setitimer(ITIMER_REAL, &it, NULL);
      /* The SIGALRM handler simply kills the child_pid and sets child_timed_out. */
      if (dumb_mode == 1 || no_fork server) {
        if (waitpid(child_pid, &status, 0) <= 0) PFATAL("waitpid() failed");
      } else {
        s32 res;
        if ((res = read(fsrv_st_fd, &status, 4)) != 4) {
          if (stop_soon) return 0;
          RPFATAL(res, "Unable to communicate with fork server (OOM?)");
        }
      }
      if (!WIFSTOPPED(status)) child_pid = 0;
      getitimer(ITIMER_REAL, &it);
      exec_ms = (u64) timeout - (it.it_value.tv_sec * 1000 +
                                 it.it_value.tv_usec / 1000); // 计算执行时间
      it.it_value.tv_sec = 0;
      it.it_value.tv_usec = 0;
      setitimer(ITIMER_REAL, &it, NULL);
      total_execs++;
      /* Any subsequent operations on trace_bits must not be moved by the
         compiler below this point. Past this location, trace_bits[] behave
         very normally and do not have to be treated as volatile. */
      MEM_BARRIER();
      tb4 = *(u32*)trace_bits;
      // 分别执行64和32位下的classify_counts，设置trace_bits所在的mem
    #ifdef WORD_SIZE_64
      classify_counts((u64*)trace_bits);
    #else
      classify_counts((u32*)trace_bits);
    #endif /* ^WORD_SIZE_64 */