title:NXNSAttack: Recursive DNS Inefficiencies and Vulnerabilities
author:Yehuda Afek and
Anat Bremler-Barr and
Lior Shafir
NXNSAttack: Recursive DNS Inefficiencies 
and Vulnerabilities
Yehuda Afek, Tel-Aviv University; Anat Bremler-Barr, IDC; 
Lior Shafir, Tel Aviv University
https://www.usenix.org/conference/usenixsecurity20/presentation/afek
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.NXNSAttack: Recursive DNS Ineﬃciencies and Vulnerabilities
Yehuda Afek∗†
Tel Aviv University
PI:EMAIL
Anat Bremler-Barr
The Interdisciplinary Center
PI:EMAIL
Lior Shaﬁr†
Tel Aviv University
lior.shaﬁPI:EMAIL
Abstract
This paper exposes a new vulnerability and introduces
a corresponding attack, the NoneXistent Name Server At-
tack (NXNSAttack), that disrupts and may paralyze the
DNS system, making it diﬃcult or impossible for Internet
users to access websites, web e-mail, online video chats,
or any other online resource. The NXNSAttack gener-
ates a storm of packets between DNS resolvers and DNS
authoritative name servers. The storm is produced by
the response of resolvers to unrestricted referral response
messages of authoritative name servers. The attack is
signiﬁcantly more destructive than NXDomain attacks
(e.g., the Mirai attack): i) It reaches an ampliﬁcation
factor of more than 1620x on the number of packets
exchanged by the recursive resolver. ii) In addition to
the negative cache, the attack also saturates the ‘NS’
section of the resolver caches. To mitigate the attack
impact, we propose an enhancement to the recursive
resolver algorithm, MaxFetch(k), that prevents unneces-
sary proactive fetches. We implemented the MaxFetch(1)
mitigation enhancement on a BIND resolver and tested
it on real-world DNS query datasets. Our results show
that MaxFetch(1) degrades neither the recursive resolver
throughput nor its latency. Following the discovery of the
attack, a responsible disclosure procedure was carried
out, and several DNS vendors and public providers have
issued a CVE and patched their systems.
1 Introduction
The Domain Name System (DNS) infrastructure, a most
critical highly dynamic system on which almost any ac-
cess to a resource on the Internet depends, has recently
been an attractive target for a variety of DDoS attacks
[4, 31]. As seen in the Mirai attack [4], a degradation or
∗Member of the Checkpoint Institute of Information Security.
Partial support provided by the Blavatnik Interdisciplinary Cyber
Research Center, (ICRC).
†Supported by the Blavatnik Family Grant.
outage of part of the DNS service disrupts many popu-
lar websites such as Twitter, Reddit, Netﬂix, and many
others, impacting millions of Internet users. Moreover,
recent large scale attacks, known as NXDomain attacks
[33] (or water-torture attacks [20, 31]), directly tried to
take down parts of the DNS system by ﬂooding the DNS
servers with well-structured requests of pseudo-randomly
generated nonexistent sub-domains (PRSD).
This paper explores the ineﬃciencies and vulnerabili-
ties of recursive resolvers. We analyze the DNS recursive
resolver behavior and the interaction between its algo-
rithms and components using the popular BIND [15]
server implementation. We expose a new vulnerability
in recursive resolver algorithms and demonstrate a new
attack, called NXNSAttack, which exploits this vulnera-
bility. Finally, we suggest and analyze modiﬁcations to
the recursive resolver algorithms, called MaxFetch(1) and
Max-Breadth, which drastically reduce the eﬀectiveness
of this attack.
At an abstract level, the DNS system has two parts,
each of which is a large, highly distributed system: a
hierarchical and dynamic database of authoritative name
servers storing the DNS data, and a large number of
client-facing resolvers, located either locally at the service
providers and local organizations, or as cloud public
services (e.g., CloudFlare 1.1.1.1, and Google 8.8.8.8)
that walk through the hierarchical structure to retrieve
the domain name resolutions to IP addresses. The focus
of the current paper is on the interaction between the
recursive resolvers and the authoritative hierarchical
structure.
In walking through the authoritative hierarchy, the
resolver is delegated from one authoritative server to
another. The delegation messages are called name server
(NS) referral responses. In such a referral message, an
authoritative server tells the recursive resolver that it
does not know the answer to its query and refers it to
another name server. One of our main observations is
that the information in the NS referral responses, at
USENIX Association
29th USENIX Security Symposium    631
the diﬀerent recursive steps, and the actions taken by
the recursive resolvers as a result, may introduce huge
communication and other resource overheads.
These overheads occur mainly because the name
servers in the NS referral response are not always pro-
vided with their corresponding IP addresses (known as
glue records). Top-level authoritative domains (TLDs),
second-level domains (SLDs), and other authoritative
servers are not allowed to provide IP addresses for do-
mains that do not reside in the same zone origin (known
as Out-of-Bailiwick name servers [14]). This is mostly to
protect from DNS poisoning attacks.
We study the implications and prevalence of this phe-
nomenon. We ﬁrst discuss (§2) our observation that the
number of packets involved in a typical resolution pro-
cess is much larger in practice than expected in theory,
mainly due to proactive extra resolutions of name server
IP Addresses.
We then show how the proactive resolution of all the
name servers in the referral response becomes a major
bottleneck in recursive servers such as BIND, considered
as the de facto standard for DNS software. We present a
new attack, called NXNSAttack (§3), that exploits this
vulnerability and is more eﬀective against authoritative
and recursive servers than the NXDomain attack (§4.5).
We show three variants of this attack (a, b, and c in Table
1), analyzing their impact on a BIND based recursive
resolver and authoritative servers. (§4). The NXNSAt-
tack simulations saturate the recursive resolver’s cache
(with NX & NS records) and reach a packet ampliﬁcation
factor (PAF) of more than 1600x (variant a). The key
enabler for the attack is the ease with which an attacker
can acquire and control an authoritative server.
NXDomain At-
tack (Mirai [4])
NXNSAttack
Attack target
(victim)
Authoritative
name server
a Recursive
resolver
b Authoritative
SLD
Root / TLD
c
Max Ampliﬁcation
factor
Bytes
2.6x
163x
21x
99x
Packets
2x
1621x
75x
1071x
Table 1: Three variants of the NXNSAttack, and the
NXDomain attack [33] empirical evaluation under BIND
9.12.3
We then show how the BIND DNS resolver algorithm
can be enhanced to remove unnecessary proactive fetches
(§5), thus alleviating the vulnerability, and measure the
performance improvements. In particular, we show that
our MaxFetch(1) enhancement has no negative impact
on either the latency or throughput of the enhanced
recursive resolver.
Finally (§6), we quantify the pervasiveness of domains
with out-of-bailiwick name servers in: (i) the top million
domain resolutions, and (ii) in a campus DNS traﬃc trace.
Since the ineﬃciencies and vulnerabilities we uncover are
associated mostly with referral responses that contain
many name servers without an associated IP address,
we study the prevalence of the phenomenon. We ﬁnd
that in 60% of the domains, all the name servers are
out-of-bailiwick .
Related work is discussed in §7, responsible disclosure
is reported in §8, and our conclusions are given in §9.
2 Background: DNS Resolution Process
Overhead
Continuing the description given in the introduction, the
main concern in this paper is the interaction between
a resolver (of which there are millions in the Internet)
and the authoritative name servers (of which there are
more than 10 million) in the process of retrieving the
required resolution from the authoritative servers. These
authoritative servers are authorized to provide the DNS
data (translating domain names to IP addresses) for a
speciﬁc zone without performing requests to other DNS
servers.
Cache memory at the resolver side plays a critical
role in signiﬁcantly reducing the amount of interaction
between the resolvers and the authoritative hierarchy.
By recording previous resolutions for a period of time
rather than querying an authoritative server again, the
information is retrieved from the cache. However, the
vulnerability and attacks we discover in this paper bypass
the cache by making sure to query about domain names
that are not present in the cache. Therefore we analyze
the system behavior with an empty cache. Cache records
and DNS response records are tagged by either one of the
following labels: A, AAAA, NS, or NX indicating the type
of information they carry: IPv4 address of a particular
domain, IPv6 address, authoritative name-servers for a
domain or zone, a domain name that does not exist in
the appropriate authoritative server, respectively.
2.1 The Resolution Process: In Theory
In a clean and fault-free system, when an answer is not
found in the resolver cache, it walks through the au-
thoritative hierarchy to obtain it, as shown in Figure
1, where a recursive resolver resolves the domain name
www.microsoft.com. It starts by issuing a query to one of
the root servers (e.g., A.ROOT-SERVERS.NET, whose
IP address is hard coded into the recursive resolver),
asking for the address of www.microsoft.com (step 1 in
Figure 1). The root server returns an NS referral re-
sponse delegating the query to one of a few TLD (Top
Level Domain) name servers responsible for the ‘.com’
632    29th USENIX Security Symposium
USENIX Association
Figure 1: The resolution process, in theory, for the
domain www.microsoft.com. The red steps represent NS
referral responses.
zone (step 2). The recursive resolver selects one of these
name servers and issues another query (step 3) asking
the chosen TLD name server (assuming it has its IP ad-
dress) for the address of www.microsoft.com. The .com
TLD server responds with another NS referral response
(step 4) delegating the query to one of a few SLD (Sec-
ondary Level Domain) name servers responsible for the
‘microsoft.com’ zone. The recursive resolver again selects
one of these name servers and issues another query ask-
ing for the address of www.microsoft.com (step 5). The
SLD authoritative server owns the DNS records for all
the domains under ‘microsoft.com’; and returns an ‘A’
response with the requested IP address (step 6). Thus,
after 3 rounds of query-response between the resolver
and the authoritative servers, the ﬁnal answer is obtained
and is forwarded to the querying client.
2.2 The Resolution Process: In Practice
Here we show that in practice the resolution process
requires many more messages to be exchanged between
the resolver and the authoritative servers due to fault-
tolerance and low latency requirements. We analyze hun-
dreds of thousands of resolutions taken from top websites
and campus DNS data, inspecting the type and number
of packets involved in each resolution. We tested a BIND
9.12.3 recursive resolver installed on an AWS EC2 ma-
chine, as well as on a local machine, to inspect the code
and to analyze its internal components and algorithms.
We discovered that while the procedure described in
Figure 1 results in a total of three requests and replies,
in practice it results in many more messages (see the
procedure described in Figure 2), sometimes hundreds,
even if the cache has been ﬁlled by many previous but
diﬀerent requests.
Figure 2: The resolution process in practice, for the do-
main www.microsoft.com by the BIND 9.12.3 recursive
resolver (parallels the diagram in Fig. 1). The .net and
.com TLD name servers are already cached at the be-
ginning of the process. The red steps are the mandatory
messages required to answer the client query.
For example, microsoft.com resolution requires 54
IPv4 packets (actually 126, but we exclude TCP hand-
shake and control packets that are used when the re-
sponses are too large due to additional records and
EDNS), twitter.com resolution requires 388 packets and
www.gov.uk requires 102. A detailed analysis of two data
sets carried out in §5.3 shows for example that 61.56%
of the ‘A’ queries for the top million domains result in
considerably more messages than expected in theory.
Name server referral response: In resolving a do-
main name, when the cache is empty, the resolver tra-
verses the authoritative hierarchy starting from the root
server. It is delegated from one authoritative server to
another, until reaching the authoritative server that has
the required mapping of the domain name in question to
an IP address. The delegation messages are called name
server (NS) referral responses. In such a referral message,
USENIX Association
29th USENIX Security Symposium    633
Authoritative HierarchyRecursive ResolversPC/Device,Stub ResolverscacheStubResolvercacheBrowsercacheDNSRecursiveDNSroot serversDNS TLD servers(com.,net.,…)DNS domain nameserversModemcachewww.microsoft.comNS RR for .com www.microsoft.comNS RR for microsoft.com www.microsoft.com‘A’ RR for www.microsoft.com1234561611'A'request www.microsoft.comRecursivecom. nameserverReferral ResponseSectionRecordAuthoritymicrosoft.com.   NS   ns1.msft.net microsoft.com.   NS   ns2.msft.netmicrosoft.com.   NS   ns3.msft.netmicrosoft.com.   NS   ns4.msft.netAdditionalNo Glue Records'A'request ns1.msft.net'A'request ns2.msft.net'A'request ns3.msft.net'A'request ns4.msft.netnet. nameserverReferral Response to (3)SectionRecordAuthorityns1.msft.net.   NS   ns1.msft.net ns1.msft.net.   NS   ns2.msft.netns1.msft.net.   NS   ns3.msft.netns1.msft.net.   NS   ns4.msft.netAdditionalns1.msft.net.   A   208.84.0.53 ns2.msft.net.   A   208.84.2.53ns3.msft.net.   A   193.221.113.53ns4.msft.net.   A   208.76.45.53gluerecordsns1.msft.netmicrosoft.com.nameserver'A'request ns1.msft.net'A'request ns2.msft.net'A'request ns3.msft.net'A'request ns4.msft.net'A'request www.microsoft.com'A'response ns1.msft.net 208.84.5.53'A'response ns2.msft.net 208.84.2.53'A'response ns3.msft.net 193.221.113.53'A'response ns4.msft.net 208.76.45.53'A'response www.microsoft.com 13.77.161.17912345671213141517181920Referral Response to (4)SectionRecordAuthorityns1.msft.net.   NS   ns1.msft.net ns1.msft.net.   NS   ns2.msft.netns1.msft.net.   NS   ns3.msft.netns1.msft.net.   NS   ns4.msft.netAdditionalns1.msft.net.   A   208.84.0.53 ns2.msft.net.   A   208.84.2.53ns3.msft.net.   A   193.221.113.53ns4.msft.net.   A   208.76.45.53Referral Response to (5)SectionRecordAuthorityns1.msft.net.   NS   ns1.msft.net ns1.msft.net.   NS   ns2.msft.netns1.msft.net.   NS   ns3.msft.netns1.msft.net.   NS   ns4.msft.netAdditionalns1.msft.net.   A   208.84.0.53 ns2.msft.net.   A   208.84.2.53ns3.msft.net.   A   193.221.113.53ns4.msft.net.   A   208.76.45.53Referral Response to (6)SectionRecordAuthoritymsft.net.   NS   ns1.msft.net msft.net.   NS   ns2.msft.netmsft.net.   NS   ns3.msft.netmsft.net.   NS   ns4.msft.netAdditionalns1.msft.net.   A   208.84.5.53 ns2.msft.net.   A   208.84.2.53ns3.msft.net.   A   193.221.113.53ns4.msft.net.   A   208.76.45.538910an authoritative server tells the recursive resolver: “I
do not have the answer, go and ask one of these name
servers, e.g., ns1, ns2, etc., that should get you closer to
the answer”.
To provide fault tolerance, the information at each
level of the hierarchy must be duplicated on several
authoritative name servers. The root has 13 copies (each
duplicated using anycast, to a total of more than one
thousand actual servers). All authoritative servers must
have at least 2 copies, and 99% have less than 7 copies;
see Figure 14.
The referral response message provides the copies of
the authoritative server that the resolver is delegated to
by their domain names (see examples in Figures 2 and 4).
In addition, sometimes the referral response also provides
the IP address of each copy, called the glue record of
the corresponding authoritative name server. These glue
records are provided in ’A’ records within an NS record,
in the referral response, and may be present for none,
some or all the name servers in an NS record. The DNS
speciﬁcations do not provide clear guidelines on when
glue records should be present nor how to process them
on the recursive side. By RFC 1034 [24] glue records are
required only if the NS is lying within or below the zone
or domain for which it acts as a name server. Consider for
example, ’ns5.google.com’ in zone ’google.com’. This con-
dition is known as the Bailiwick rule, or more speciﬁcally
in-bailiwick’. This requirement was introduced to avoid a
query deadlock for NS referrals that contain name servers
within the domain being queried. For example, if the re-
cursive resolves www.example.com and the TLD returns a
referral containing ns5.example.com as a delegated name
server which resides within the example.com domain, but
without its IP address, the recursive will then initiate
another A query asking to resolve ns5.example.com. It
will be again referred to ns5.example.com, which leads
to a live-lock (inﬁnite loop).
Another important motivation for the Bailiwick rule
is to avoid and reduce the risk posed by cache poison-
ing attacks [32, 34]. In such attacks, the owner of any
DNS authoritative server could hijack ownership on any
domain name. When responding to a query from a re-
cursive resolver, such a malicious authoritative server
can send an NS referral record that includes any domain
name as a NS with a glue record mapping this domain
name to any IP address, thus injecting or overriding a
bogus A record for any domain into the recursive resolver
cache. To prevent such cache poisoning attacks using
malicious glue records, many recursive implementations
store glue records as ‘A’ records in their cache only if they
comply with the Bailiwick rule. Otherwise, in an out-
of-bailiwick case, for example, ns.example.net as a name
server for the example.com zone, the resolver discards
the glue record. Generally, without getting into diﬀerent
variations and implementation details, the BIND [15] re-
cursive implementation, which we analyze in this paper,
as well as Unbound [19], PowerDNS [2] and Microsoft
DNS, all discard out-of-bailiwick glue records. Other so-
lutions to eliminate cache poisoning attacks as a result
of out-of-bailiwick glue records include DNSSEC, which
authenticates the authoritative responses by verifying
their signature through a chain of authority. However,
these have a very low adoption rate.
Another important consideration that inﬂuences the
cost of a resolution with an empty cache is the require-
ment to minimize the response time. The resolver at-
tempts to resolve the domain name of each name server
in the referral response for which it does not have an
IP address, immediately upon receiving the referral mes-
sage. Thus, if for example the referral response delegates
the recursive to one of 30 name servers for which it
does not have an IP address, the recursive immediately
starts (BIND implementation) 30 new resolutions. This
ensures that the resolver has the IP address of each
authoritative it may need, as soon as possible, without
incurring additional delays. In addition, most of the
recursive resolver implementations use algorithms to dis-
tribute the load among the diﬀerent name servers and
achieve lower latency over time when sending queries to
authoritative name servers. For example, BIND uses an
sRTT (smoothed Round Trip Time) algorithm with a
decaying factor, in which it tracks the response time of
each name server. Other algorithms perform an initial
round-robin over the name servers followed by measured
latency-aware selections.
Figure 2 illustrates the additional out-of-bailiwick re-
quests that the recursive issues for www.microsoft.com.
In this case, the TLD (.com and .net) name servers are
already in the cache as a result of previous requests.
The .com authoritative responds with an NS referral
(step 2) containing four out-of-bailiwick name servers
(ns*.msft.net for the queried zone microsoft.com). The
recursive then initiates four additional resolution fetches
for all these out-of-bailiwick name servers. Note that
even after it receives their IP addresses in the referral
responses (steps 7-10) as glue records, it still performs ad-
ditional resolution requests for them (steps 11-14). This
is because their corresponding requests’ recursion state
was already initiated independently with an indication
that they are not cached.
Note that we observe additional causes for the high
number of messages in DNS resolutions: (i) too long NS
responses that include multiple name servers and other
options such as RRSIG and NSEC3 data in the additional
records, leaving no place for all the glue records in a 512-
byte UDP packet, forcing the recursive to resend the
request using TCP, or by using the UDP EDNS0 4096-
byte option. (ii) Canonical NAME records (CNAME)
634    29th USENIX Security Symposium
USENIX Association
that reside in diﬀerent domains than the queried one, and
which sometimes have to be resolved with an additional
fetch starting from the root-servers.
In conclusion, the referral procedure results in pro-
active additional resolutions for all the non-cached name
servers that appear in the NS referral response that are
either out-of-bailiwick or do not have an associated glue
record. This rule is not part of the conﬁguration nor can
it be disabled. In this paper, we focus on these extra
resolutions and propose a change in the way they are
handled. We claim that the resolution of the referred
name servers should be distributed and amortized over
several client requests (see §5), in contrast to the current
practice where all the resolutions are performed in the
ﬁrst client request. Moreover, many domains outsource
their authoritative name servers to cloud operators such
as Cloudﬂare, Google.com, or domaincontrol.com, and
these operators often choose short TTL values (30 or 60
seconds). This in turn causes many server resolutions to
be outdated by the time the resolver wants to use them.