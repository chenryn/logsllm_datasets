# 十一、调试和检测应用容器
Docker 可以消除典型开发人员工作流程中的许多摩擦，并显著减少开销任务上花费的时间，例如依赖关系管理和环境配置。当开发人员使用最终产品将运行的完全相同的应用平台运行他们正在进行的更改时，出现部署错误的机会要少得多，升级路径简单易懂。
在开发过程中在容器中运行应用会给开发环境增加另一层。您将使用不同类型的资产，如 Dockerfiles 和 Docker Compose 文件，如果您的 IDE 支持这些类型，这种体验会得到改善。此外，集成开发环境和您的应用之间有一个新的运行时，因此调试体验会有所不同。您可能需要更改工作流程，以充分利用平台优势。
在这一章中，我将研究 Docker 的开发过程，包括 IDE 集成和调试，以及如何向您的 dockered 应用添加插装。您将了解到:
*   在集成开发环境中使用 Docker
*   Docker 化应用中的仪器仪表
*   Docker 中的错误修复工作流
# 技术要求
您将需要在 Windows 10 更新 18.09 或 Windows Server 2019 上运行 Docker 来完成示例。本章代码可在[https://github . com/six eyes/docker-on-window/tree/第二版/ch11](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch11) 获得。
# 在集成开发环境中使用 Docker
在前一章中，我演示了一个容器化的*外部循环*，即当开发人员推送变更时，从中央源代码管理触发的编译和打包 CI 过程。**集成开发环境** ( **IDEs** )开始支持*内部循环*的容器化工作流，这是在将更改推送到中央源代码管理之前在容器中编写、运行和调试应用的开发过程。
Visual Studio 2017 对 Docker 工件有本机支持，包括智能感知和 Docker 文件的代码完成。还有对在容器中运行的 ASP.NET 项目的运行时支持，两者都有.NET 框架和.NET 核心。在 Visual Studio 2017 中，您可以按下 *F5* 键，您的网络应用将在一个容器中启动，在 Windows 上的 Docker Desktop 中运行。该应用使用与所有其他环境中相同的基本映像和 Docker 运行时。
Visual Studio 2015 有一个为 Docker 工件提供支持的插件，Visual Studio Code 有一个非常有用的 Docker 扩展。Visual Studio 2015 和 Visual Studio Code 没有为提供集成的 *F5* 调试体验.NET 应用在 Windows 容器中运行，但是您可以手动配置它，我将在本章中演示这一点。
在容器内部调试时会有一个折衷——这意味着在内部循环和外部循环之间创建一个断开。您的开发过程使用一组不同于您的**持续集成** ( **CI** )过程的 Docker 工件，以使调试器对容器可用，并将应用程序集映射到源代码。这样做的好处是，您可以在开发中的容器中运行，拥有与您习惯的相同的开发人员构建和调试体验。缺点是您的开发 Docker 映像与您要推广测试的映像不完全相同。
减轻这种情况的一个好方法是在快速迭代一个特性时，使用本地 Docker 工件进行开发。然后，在推进变更之前，您使用仍在本地运行的 CI Docker 工件进行最终构建和端到端测试。
# Visual Studio 2017 中的 Docker
Visual Studio 2017 拥有最完整的 Docker 支持.NET IDEs。您可以在 Visual Studio 2017 中打开一个 ASP.NET 框架 Web API 项目，右键单击该项目，然后选择添加|容器编排器支持:
![](img/b3921071-0b2f-487b-9b25-193543b06c6b.png)
只有一个编排器选项可供选择，那就是 Docker 作曲。然后，Visual Studio 生成一组 Docker 工件。在`Web`项目中，它创建了一个如下所示的 Dockerfile:
```
FROM microsoft/aspnet:4.7.2-windowsservercore-1803
ARG source
WORKDIR /inetpub/wwwroot
COPY ${source:-obj/Docker/publish} .
```
Dockerfile 语法有完整的 IntelliSense 支持，因此您可以将鼠标悬停在指令上并查看有关它们的信息，然后使用 *Ctrl* +空格键为所有 Dockerfile 指令打开提示。
生成的 Dockerfile 使用了 ASP.NET 4 . 7 . 2 附带的`microsoft/aspnet`基本映像，该映像已完全安装和配置。在编写本文时，Dockerfile 使用的是旧版本的 Windows 基本映像，因此您需要手动将其更新为使用最新的 Windows Server 2019 基本映像，即`mcr.microsoft.com/dotnet/framework/aspnet:4.7.2-windowsservercore-ltsc2019`。
Dockerfile 看起来很奇怪，因为它使用一个 build 参数来指定源文件夹的位置，然后将该文件夹的内容复制到容器映像内部的 web 根目录`C:\inetpub\wwwroot`。
在解决方案根中，Visual Studio 创建一组 Docker 编写文件。有多个文件，Visual Studio 将它们与 Docker Compose `build`和`up`命令一起用于打包和运行应用。当你用 *F5* 键运行应用时，这在幕后工作，但值得看看 Visual Studio 如何使用它们；它向您展示了如何向不同的 IDEs 添加这种级别的支持。
# 在 Visual Studio 2017 中使用 Docker 编写进行调试
生成的 Docker 编写文件显示在顶级解决方案对象下:
![](img/0b2f32c1-dfa2-431e-8f3b-4ae277474b2a.png)
有一个基本的`docker-compose.yml`文件，将网络应用定义为服务，并包含 Dockerfile 的构建细节:
```
version: '3.4'
services:
  webapi.netfx:
    image: ${DOCKER_REGISTRY-}webapinetfx
    build:
      context: .\WebApi.NetFx
      dockerfile: Dockerfile
```
还有一个`docker-compose.override.yml`文件，添加了端口和网络配置，这样就可以在本地运行了:
```
version: '3.4'
services:
  webapi.netfx:
    ports:
      - "80"
networks:
  default:
    external:
      name: nat
```
这里没有关于构建应用的内容，因为编译是在 Visual Studio 中完成的，而不是在 Docker 中。构建的应用二进制文件存在于您的开发机器上，并被复制到容器中。当你点击 *F5* 时，容器启动，Visual Studio 在容器的 IP 地址启动浏览器。您可以在 Visual Studio 中向代码添加断点，当您从浏览器导航到该代码时，您将进入 Visual Studio 中的调试器:
![](img/8a0d0f97-90fe-43fb-b674-05d152804d08.png)
这是一种无缝的体验，但不清楚发生了什么——您机器上的 Visual Studio 调试器如何连接到容器内部的二进制文件？幸运的是，Visual Studio 会将它发出的所有 Docker 命令记录到输出窗口中，因此您可以跟踪这是如何工作的。
在构建输出窗口中，您将看到如下内容:
```
1>------ Build started: Project: WebApi.NetFx, Configuration: Debug Any CPU ------
1>  WebApi.NetFx -> C:\Users\Administrator\source\repos\WebApi.NetFx\WebApi.NetFx\bin\WebApi.NetFx.dll
2>------ Build started: Project: docker-compose, Configuration: Debug Any CPU ------
2>docker-compose  -f "C:\Users\Administrator\source\repos\WebApi.NetFx\docker-compose.yml" -f "C:\Users\Administrator\source\repos\WebApi.NetFx\docker-compose.override.yml" -f "C:\Users\Administrator\source\repos\WebApi.NetFx\obj\Docker\docker-compose.vs.debug.g.yml" -p dockercompose1902887664513455984 --no-ansi up -d
2>dockercompose1902887664513455984_webapi.netfx_1 is up-to-date
========== Build: 2 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
```
您可以看到构建首先发生，然后容器用`docker-compose up`启动。我们已经看到的`docker-compose.yml`和`docker-compose.override.yml`文件以及一个名为`docker-compose.vs.debug.g.yml`的文件被使用。Visual Studio 会在生成时生成该文件，您需要显示解决方案中的所有文件才能看到它。它包含附加的 Docker 编写设置:
```
services:
  webapi.netfx:
    image: webapinetfx:dev
    build:
      args:
        source: obj/Docker/empty/
    volumes:
      - C:\Users\Administrator\source\repos\WebApi.NetFx\WebApi.NetFx:C:\inetpub\wwwroot
      - C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\Common7\IDE\Remote Debugger:C:\remote_debugger:ro
    entrypoint: cmd /c "start /B C:\\ServiceMonitor.exe w3svc & C:\\remote_debugger\\x64\\msvsmon.exe /noauth /anyuser /silent /nostatus /noclrwarn /nosecuritywarn /nofirewallwarn /nowowwarn /timeout:2147483646"
```
这里发生了很多事情:
*   Docker 映像使用`dev`标签将其与发布版本区分开来
*   源位置的生成参数指定了一个空目录
*   卷用于从主机上的项目文件夹装载容器中的 web 根目录
*   第二个卷用于从主机在容器中装载 Visual Studio 远程调试器
*   入口点启动`ServiceMonitor`运行 IIS，然后启动`msvsmon`，这是远程调试器
在调试模式下，源代码环境变量的参数是一个空目录。Visual Studio 用一个空的`wwwroot`目录构建一个 Docker 映像，然后将源代码文件夹从宿主装载到容器的 web 根目录中，以便在运行时填充该文件夹。
当容器运行时，Visual Studio 在容器内运行一些命令来设置权限，这允许远程调试器工具工作。在 Docker 的输出窗口中，您将看到如下内容:
```