116
6.1.3节中进行介绍。
似，这里不再赘述），如图6-8所示。
要一个base环境即可。注意，base环境是必须存在的。
（publish_port）：Salt的消息发布系统，4506（ret_port）：Salt客户端与服务端通信的端口。
一个基础环境依赖于主的入口文件，如图6-7所示。不过一般情况下不需要那么多，只需
个文件服务器是构造在master的守护进程中，并且不需要依赖于专用的端口，如4505
以在/etc/Salt/master文件里进行修改。
企业互联网自动化之SaltStack
第6章
图6-9所示的意思是如果匹配到test1组，
master每一个环境可以有多个根目录，但是相同环境下多个文件的子目录不能相同。
Salt运行一个轻量级的文件服务器通过ZeroMQ对minions进行文件传输，所以这
安装好Salt后默认的本地目录根路径为/srv/salt（类似Puppet的模块路径），当然也可
base环境必须包含一个名为top.sls 的 Salt入口文件（这个和 Puppet 的 site.pp文件类
Grains、组和列表稍后进行介绍。
·Salt-N Salt_group1 test.ping：-N表示可以指定组。
Salt -C'G@os:Ubuntu and webser*or E@databases* test.ping：-C表示在一个命令
Salt-L'foo，bar，baz'test.ping：-L表示可以指定列表。
Salt-E'mach[0-9]'test.ping：-E表示可以使用正则表达式。
Salt-G'os:Ubuntu'test.ping：-G表示可以使用Grains系统通过minion的系统信
中混合使用多target类型。
息进行过滤。
base:
dev:
/srv/salt/prod/se
/srv/salt/dev/states
/srv/salt/dev/servi
/srv/salt
图6-7
，则安装 httpd 相关的组件。组的概念将在
vi
---
## Page 127
master.d/nodegroup.conf（文件夹及文件需要创建，默认情况下Salt会加载/etc/salt目录下
烦。一种方法是可以用正则表达式来操作；如果正则表达式不方便匹配的话，就可以把这
好是少量的服务器。如果十几台或者更多的服务器还采用列表方式的话，那样操作会很麻
6.1.3
执行epel的相关脚本。Grains将在6.1.4节中进行介绍。
些经常用的服务器设置成一个组来操作。
使用组之前需要先设置一下，编辑配置文件/etc/salt/master或者编辑/etc/salt/
远程执行命令中，L是用列表方式来表示，可以允许对多台服务器同时操作，当然最
图6-10 所示的意思是如果匹配到 grains 的 os_family是 RedHat（注意大小写），则去
Nodegroup
base:
os_family:RedHat':
tab
epel
users
ma
us
图6-10
图6-9
ers
图6-8
more
6.1
新秀SaltStack
117
---
## Page 128
118
是部分信息。如果你不清楚每个节点都有什么样的项目，可以使用grains.ls查看，如图6-14
从服务器端定义然后推下去，则在采集完后再汇报上来。
些基本信息也可以自定义。如果在客户端自定义，则基本信息可以自动汇报上来；如果是
6.1.4
用复杂的正则表达式呢？Salt实现了组的嵌套，如图6-12所示。
对这两个组的服务器进行操作的话，应该怎么办呢？一台一台地加到同一组里还是使
master.d/*.conf文件），如图6-11所示。图6-11中的测试是基于两个组的。如果想同时
企业互联网自动化之SaltStack
第6章
对于每个节点都可以查看items 相应的值，因为信息量比较多，所以图6-13所示的只
Grains和Puppet的Facter功能一样，它主要负责采集客户端的一些基本信息，当然这
Grains
0
True
True
26:
jzw-24p23 master.d]# salt -N test5 test.ping
26:
5
27:
26:
27:
w-24p23master.d]#salt -N test4 test.ping
'G@os:Centos
NG
23
s:Cen
master.dj# cat nodegroup.conf
salt]# salt -N test2 test.ping
salt]# salt-N testl test.ping
图6-12
26,
图6-11
26
27
27
---
## Page 129
所示。图6-15所示的是显示单条项目的值。
图6-14
图6-13
E5620
6.1
新秀SaltStack
119
---
## Page 130
120
计中，Pillar会使用独立的加密session，这也是为了保证敏感数据的安全性）。
minion都只能看到自己的数据。所以Pillar可以用来传递一些敏感数据（因为在Salt的设
些数据可以被Salt的其他组件使用。Pillar数据是与特定minion关联的，也就是说每一个
器比较多，所以信息也会比较多，这里只显示部分截图，如图6-17～图6-19所示。
行 salt*sys.reload_modules），然后就可以通过grains.items看到相关的信息了。因为服务
所示。这里强调一下，这个脚本如果需要的话，可根据自己的情况进行改写。
因为通过Salt-call grains.items查看也没有合适的形式，所以我决定自己编写一个。
式，在Zabbix的配置文件里显示的也是这种FQDN的形式，所以看上去非常长，不美观。
的话，咱们可以一起再研究。这里先介绍一个简单的自定义的Grains。
企业互联网自动化之SaltStack
第6章
Pillar是 Salt非常重要的一个组件，用于给特定的minion定义任何你需要的数据。这
接下来需要同步到各minion端（执行 salt* satutilsync_all）及刷新各minion端（执
在Salt服务器的/etc/Salt/下创建目录_grains，编写文件shostname.py，内容如图6-16
建议你把上面所介绍的方法用熟，然后有机会再一起研究Pilar。
因为现在服务器上定义的主机名是bjXXX-mXpXXX-XXXX.XXXXliuxin.com这种形
一般情况下，Salt自带的项目足够满足我们的需要。如果你公司需要自定义一些项目
root@
TPTE
shostname():
_grains]# cat shostname.py
~]#salt
图6-16
图6-15
_ex(socket.gethostname())[1][1]
grains.item ipv4
---
## Page 131
该可以理解了。
也就是Leader，而minion就是普通员工。按照从上到下这样的顺序进行管理，相信你应
syndic，你可以认为它是一个代理。简单举个例子，master是大BOSS，管理着下面的syndic，
6.1.5
SaltStack是传统的C/S架构，
Syndic
root@bj
grains]#
一台master管理着多台minion。但在Salt中还有一个
图6-19
图6-18
图6-17
salt
p2
sys.reload_
modul
6.1
新秀SaltStack
121
---
## Page 132
122
到想要的版本，如图6-22所示。
是在master端使用命令salt*fle.restore_backup+文件路径+文件备份的序列号，以此恢复
会返回文件备份序号、时间、位置和大小等信息，如图6-21所示。
有变动的时候，就会在minion端备份文件了。
6.1.6
tutorials/multimaster.html看看效果。
你可以上网参考一下官方的文档来配置一下：http://docs.SaltStack.com/en/latest/topics/
在某些网络状况较差的情况下，就会让结果变得不可控。所以一般不建议你使用Syndic，
能指定minion_id，但是可以直接管理minion，让它去根据它的master的指示做事。
指定minion_id的，但是可以直接管理minion，去让它做事。也就是说master的top.sls 不
为准呢？其实在master上做资源管理state时（其他的我也没试），是不能直接在top.sls下
服务和Syndic服务。这样就配置完成了。
True，然后重启master服务；在 syndic上配置 syndic_master:masterIP，然后重启Master
上无法看到它的Key）。
BOSS可以下达一个指示给Leader，当然也可以直接给员工下达指示让他去做事（在master
企业互联网自动化之SaltStack
上，
第6章
如果你想回退的话，有两种方法。一种是可以在minion端将文件进行替换；另一种
为本地进行备份。
不过，在实际使用中发现，由于Syndic采用这种分治机制，从而弱化了masterOfmaster
在master 端配置文件里，增加 backup 参数，如图6-20所示。这样在文件 sysctl.conf
在对文件进行更新、修改等操作时，备份文件是很有必要的。这里的设置是在minion
这里要和你说一下的是，在Master 和 Syndic上都会有top.sls 配置文件，但是以哪个
Syndic的配置还是比较简单的，在master上配置文件/etc/salt/master为order_masters：
因为我这边的规模不需要使用syndic，所以我只是和你说一下 Syndic的工作原理吧。
minion端Backup
图6-20
---
## Page 133
0、1、3这样的序列号，所以这点你要注意下，如图6-23和图6-24所示。
的是2这个序列号的文件，再一次list显示时，显示的结果是0、1、2这3份，而且不是
间，如图6-23所示。不过如果你的备份文件比较多，比如有0、1、2、3这4份，你删除
如果最终文件已经确认或者有其他备份，
Locati
Backup
24p23 sysctl]# salt
-24p23
cache/galt/minlon/filehaekuo
10201410:11:24,25400
11201414:59:08.399780
11201415:01:10.712603
file
图6-23
图6-22
图6-21
可以删除在minion端的备份以节约一些空
/etc/sysctl.conf2
conf
15:01:10_712603_2014
6.1新秀SaltStack
:24265490
10712603
2102
123
---
## Page 134
124第6章
端添加minion的配置文件模块同步，这样操作也不麻烦。
以下是修改minion的配置文件，这种方式可修改所有minion的配置文件。你可以在master
你可以认为是Linux上的crontab。
6.1.7
企业互联网自动化之SaltStack
开启schedule，只需要在master或者minion的配置文件中开启schedule参数即可。
其他的如master、Pillar就不介绍了。
另外要和你说的是计划任务，也就是说在minion端定时地去同步master端的各模块。
hours:1
minutes:5
seconds:30
highstate:
schedule:
Lae
function:state.highstate
minion计划任务
24p23sysctl]#salt 'BJzW-24-27' file.delete backup/etc/sysctl.conf
1862
1863
图6-24
---
## Page 135
6-26和图6-27所示。
job很多的话，可能你就查不过来了。所以可以去查找指定的ID来查看相关的信息，如图
运作任务的详细信息，可以使用jobs方法进行操作。
如图6-25所示。这个目录中存放了已经执行过的以jobid命名的文件。这些文件包含当前
6.1.8
使用salt*saltutil.running可以得到所有运行job的相关信息，不过如果主机过多或者
minion在缓存目录中维护着一个proc目录，默认配置为/var/cache/salt/minion/proc，
JobManager
root@bj
coot@bj
arg:
fun:
D1
23035
140802152427647289
40802162427389685
2
procJ#
update
23
20140802162427389586 20140802192739863707
saltl#salt
图6-26
图6-25
saltutil
6.1新秀SaltStack
125
---
## Page 136
126
6.2.1
6.2
前时间本地所缓存的所有job数据。
时），具体缓存的时间可以通过keep_jobs 参数控制；salt-runjobs.list_jobs表示返回截止当
number>表示执行后的结果数据发送回master，这些数据会被缓存在本地一段时间（24小
Salt-runjobs.active表示返回当前系统上正在运行的jobs；Salt-runjobs.lookup_jid<jobid
信号；term_job向指定的jobid发送一个termaination信号（SIGTERM，15）来控制进程：
个时候你可以去kill掉这个job，如图6-28所示，也可以重启这台minion的Salt服务。
一些job还没有运行结束，所以再一次推送的时候会显示某台服务器的job正在运行，这
企业互联网自动化之SaltStack
第6章
首先这是一个很简单的实例，其作用就是同步所有minion 的/etc/hosts 文件。如果在
下面通过实例来介绍SaltStack的几个配置文件。
关于 job管理还有一些其他的用法，如 signal_job可以向指定的job id任务发送一个
一般情况下，在推送的时候加个-v会显示job id。另外在某些环境的影响下，可能有
SaltStack实例详解
SaltStack实例详解（一）:hosts文件
[root@bj
:pra
id
tung
6
23035
20140802162427389586
BJ2W-24-26
mine.update
26:
3salt]#salt
saltl4salt
图6-28
saltutil.
图6-27
---
## Page 137
整的结构了，如图6-30所示。这时在top.sls文件里加入-hosts即可，如图6-31所示。
正规一些，我们可以再编辑一个init.sls 文件，把install.sls文件 include进来，这样就是一个完
相对应的功能。管理功能只是其中之一。
状态模块中的管理功能。当然file状态模块的功能有很多，几乎对文件所有的操作它都有
定义的。如果是安装软件包的话，也可以直接以包名来定义。
所示。如果你配置过第5章中Puppet的一些模块，想必对这一行一行的代码已有所理解。
入口文件top.sls。
述了系统的目标状态，由格式简单的数据构成。SLS经常被称作配置管理，如上面提到的
个很好的选择。
多地点、多服务器的时候只是同步hosts文件可能有点不太合适，直接使用内部DNS是一
fle.managed：对 state的声名，在这里因为要管理的类型是文件，所以使用的是file
/etc/hosts：对全局ID的声明，可以是任意标识符。我一般是使用文件的所在路径来
在目录/srv/salt/hosts下先放置一份完整的hosts文件，然后编写文件install.sls，如图6-29
现在来介绍一下 SLS文件，它代表Salt State文件，是Salt State系统的核心。SLS描
一般情况下这样也就算完成了一个模块，在top.sls文件中加入-hosts.install即可。但为了
backup：minion：表示在minion端要备份旧文件。
第四、五、六行是对这个文件的权限进行设置，与Puppet类似，这里就不多说了。
source：salt：/hosts/hosts：表示源文件的位置，这里是hosts文件夹下的hosts文件。
include:
backup:minion
base:
hosts.install
图6-31
图6-30
图6-29
-hosts
6.2SaltStack实例详解127
---