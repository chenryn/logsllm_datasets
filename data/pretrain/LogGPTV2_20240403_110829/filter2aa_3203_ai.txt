addresses. If a name is used as an alias for an IP address, mechanisms must exist for assigning 
names to IP addresses, ensuring their uniqueness, and for resolving the name to its IP address. 
TCP/IP components of Windows use separate mechanisms for assigning and resolving host names 
(used by Windows Sockets applications) and NetBIOS names (used by NetBIOS applications). 
Host Names 
A host name is an alias assigned to an IP node to identify it as a TCP/IP host. The host name can be 
up to 255 characters long and can contain alphabetic and numeric characters and the “-” and “.” 
characters. Multiple host names can be assigned to the same host. 
Windows Sockets applications, such as Internet Explorer and the Ping tool, can use one of two values 
to refer to the destination: the IP address or a host name. When the user specifies an IP address, name 
resolution is not needed. When the user specifies a host name, the host name must be resolved to an 
IP address before IP-based communication with the target resource can begin. 
Host names can take various forms. The two most common forms are a nickname and a fully qualified 
domain name (FQDN). A nickname is an alias to an IP address that individual people can assign and 
use. An FQDN is a structured name, such as www.microsoft.com, that follows the Internet conventions 
used in DNS. 
For information about how TCP/IP components in Windows resolve host names, see Chapter 7, “Host 
Name Resolution.” For more information about DNS, see Chapter 8, “Domain Name System Overview.” 
NetBIOS Names 
A NetBIOS name is a 16-byte name that identifies a NetBIOS application on the network. A NetBIOS 
name is either a unique (exclusive) or group (nonexclusive) name. When a NetBIOS application 
communicates with a specific NetBIOS application on a specific computer, a unique name is used. 
When a NetBIOS process communicates with multiple NetBIOS applications on multiple computers, a 
group name is used. 
The NetBIOS name identifies applications at the Session layer of the OSI model. For example, the 
NetBIOS Session service operates over TCP port 139. Because all NetBT session requests are 
addressed to TCP destination port 139, a NetBIOS application must use the destination NetBIOS name 
when it establishes a NetBIOS session. 
An example of a process using a NetBIOS name is the file and print sharing server service on a 
Windows–based computer. When your computer starts up, the server service registers a unique 
NetBIOS name based on your computer’s name. The exact name used by the server service is the 15-
character computer name plus a 16th character of 0x20. If the computer name is not 15 characters 
long, it is padded with spaces up to 15 characters long. Other network services also use the computer 
name to build their NetBIOS names, and the 16th character is typically used to identify each service. 
When you attempt to make a file-sharing connection to a computer running Windows by specifying the 
computer’s name, the Server service on the file server that you specify corresponds to a specific 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 49 
NetBIOS name. For example, when you attempt to connect to the computer called CORPSERVER, the 
NetBIOS name corresponding to the Server service is CORPSERVER     . (Note the padding using 
the space character.) Before a file and print sharing connection can be established, a TCP connection 
must be created. For a TCP connection to be created, the NetBIOS name CORPSERVER      must 
be resolved to an IPv4 address. NetBIOS name resolution is the process of mapping a NetBIOS name 
to an IPv4 address.  
For more information about NetBT and NetBIOS name resolution methods, see Chapter 11, “NetBIOS 
over TCP/IP.” 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 50 
Chapter Summary 
The key information in this chapter is the following: 
The TCP/IP protocol suite maps to the four layers of the DARPA model: Application, Transport, 
Internet, and Network Interface. 
The protocols of the IPv4 Internet layer consist of ARP, IP (IPv4), ICMP, and IGMP. 
The protocols of the IPv6 Internet layer consist of IPv6, ICMPv6, ND, and MLD. 
The protocols of the Transport layer include TCP and UDP. TCP is a reliable, connection-oriented 
delivery service. UDP provides a connectionless datagram service that offers unreliable, best-effort 
delivery of data transmitted in messages.  
IP packets are multiplexed and demultiplexed between applications based on fields in the IPv4, IPv6, 
TCP, and UDP headers. 
TCP/IP components in Windows support two main APIs for networking applications: Windows Sockets 
and NetBIOS. Windows Sockets is a modern API that allows applications to manage stream sockets, 
datagram sockets, and raw sockets. NetBIOS is an older API that allows applications to manage 
NetBIOS names, datagrams, and sessions. 
TCP/IP components in Windows support two naming schemes for networking applications: host names 
(used by Windows Sockets applications) and NetBIOS names (used by NetBIOS applications). 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 51 
Chapter Glossary 
address autoconfiguration – The IPv6 ND process of automatically configuring IPv6 addresses on an 
interface. 
address resolution – The IPv4 (using ARP) or IPv6 (using ND) process that resolves the MAC address 
for a next-hop IP address. 
Address Resolution Protocol (ARP) – A protocol that uses broadcast traffic on the local network to 
resolve an IPv4 address to its MAC address.  
ARP – See Address Resolution Protocol. 
ARP cache – A table for each interface of static or dynamically resolved IPv4 addresses and their 
corresponding MAC addresses. 
ICMP – See Internet Control Message Protocol. 
ICMPv6 – Internet Control Message Protocol for IPv6. 
IGMP – See Internet Group Management Protocol. 
Internet Control Message Protocol (ICMP) – A protocol in the IPv4 Internet layer that reports errors and 
provides troubleshooting facilities. 
Internet Control Message Protocol for IPv6 (ICMPv6)  – A protocol in the IPv6 Internet layer that reports 
errors, provides troubleshooting facilities, and hosts ND and MLD messages. 
Internet Group Management Protocol (IGMP) – A protocol in the IPv4 Internet layer that manages 
multicast group membership on a subnet. 
Internet Protocol (IP) – For IPv4, a routable protocol in the IPv4 Internet layer that addresses, routes, 
fragments, and reassembles IPv4 packets. Also used to denote both IPv4 and IPv6 sets of protocols. 
IP – See Internet Protocol.  
IPv4 – The Internet layer in widespread use on the Internet and on private intranets. Another term for 
IP. 
IPv6 – The new Internet layer that will eventually replace the IPv4 Internet layer. 
MLD – See Multicast Listener Discovery. 
Multicast Listener Discovery (MLD) – A set of three ICMPv6 messages that hosts and routers use to 
manage multicast group membership on a subnet. 
name resolution – The process of resolving a name to an address. 
ND – See Neighbor Discovery. 
neighbor cache – A cache maintained by every IPv6 node that stores the IPv6 address of a neighbor 
and its corresponding MAC address. The neighbor cache is equivalent to the ARP cache in IPv4. 
Neighbor Discovery (ND) – A set of ICMPv6 messages and processes that determine relationships 
between neighboring nodes. Neighbor Discovery replaces ARP, ICMP router discovery, and the ICMP 
Redirect message used in IPv4. 
Chapter 2 – Architectural Overview of the TCP/IP Protocol Suite 
TCP/IP Fundamentals for Microsoft Windows  
Page: 52 
Network Basic Input/Output System (NetBIOS) – A standard API for user applications to manage 
NetBIOS names and access NetBIOS datagram and session services. 
NetBIOS – See Network Basic Input/Output System. 
router discovery – A Neighbor Discovery process in which a host discovers the local routers on an 
attached subnet. 
TCP – See Transmission Control Protocol. 
Transmission Control Protocol (TCP) – A  reliable, connection-oriented Transport layer protocol that 
runs on top of IP. 
UDP – See User Datagram Protocol 
User Datagram Protocol (UDP) – An unreliable, connectionless Transport layer protocol that runs on 
top of IP. 
Windows Sockets – A commonly used application programming interface (API) that Windows 
applications use to transfer data using TCP/IP. 
Chapter 3 – IP Addressing 
TCP/IP Fundamentals for Microsoft Windows  
Page: 53 
Chapter 3 – IP Addressing 
Abstract 
This chapter describes the details of addressing for both IPv4 and IPv6. Network administrators need a thorough 
understanding of both types of addressing to administer Transmission Control Protocol/Internet Protocol (TCP/IP) 
networks and troubleshoot TCP/IP-based communication. This chapter discusses in detail the types of Internet Protocol 
version 4 (IPv4) and Internet Protocol version 6 (IPv6) addresses, how they are expressed, and the types of unicast 
addresses assigned to network node interfaces. 
Chapter 3 – IP Addressing 
TCP/IP Fundamentals for Microsoft Windows  
Page: 54 
Chapter Objectives 
After completing this chapter, you will be able to: 
Describe the syntax for IPv4 addresses and address prefixes, and convert between binary and decimal 
numbers. 
List the three types of IPv4 addresses, and give examples of each type. 
Describe the differences between public, private, and illegal IPv4 addresses. 
Describe the syntax for IPv6 addresses and address prefixes, and convert between binary and 
hexadecimal numbers. 
List the three types of IPv6 addresses, and give examples of each type. 
Describe the differences between global, unique local, and link-local unicast IPv6 addresses. 
Convert an Institute of Electrical and Electronics Engineers (IEEE) 802 address to an IPv6 interface 
identifier. 
Compare addresses and addressing concepts between IPv4 and IPv6. 
Chapter 3 – IP Addressing 
TCP/IP Fundamentals for Microsoft Windows  
Page: 55 
IPv4 Addressing 
An IP address is an identifier that is assigned at the Internet layer to an interface or a set of interfaces. 
Each IP address can identify the source or destination of IP packets. For IPv4, every node on a network 
has one or more interfaces, and you can enable TCP/IP on each of those interfaces. When you enable 
TCP/IP on an interface, you assign it one or more logical IPv4 addresses, either automatically or 
manually. The IPv4 address is a logical address because it is assigned at the Internet layer and has no 
relation to the addresses that are used at the Network Interface layer. IPv4 addresses are 32 bits long. 
IPv4 Address Syntax 
If network administrators expressed IPv4 addresses using binary notation, each address would appear 
as a 32-digit string of 1s and 0s. Because such strings are cumbersome to express and remember, 
administrators use dotted decimal notation, in which periods (or dots) separate four decimal numbers 
(from 0 to 255). Each decimal number, known as an octet, represents 8 bits (1 byte) of the 32-bit 
address. 
For example, the IPv4 address 11000000101010000000001100011000 is expressed as 192.168.3.24 
in dotted decimal notation. To convert an IPv4 address from binary notation to dotted decimal notation, 
you: 
Segment it into 8-bit blocks: 11000000 10101000 00000011 00011000 
Convert each block to decimal: 192 168 3 24 
Separate the blocks with periods: 192.168.3.24 
When referring to an IPv4 address, use the notation w.x.y.z. Figure 3-1 shows the IPv4 address 
structure. 
Figure 3-1  The IPv4 address in dotted decimal notation 
To become adept at moving between binary and decimal formats, you can review the binary (Base2) 
and decimal (Base10) numbering systems and how to convert between them. Although you can use the 
Chapter 3 – IP Addressing 
TCP/IP Fundamentals for Microsoft Windows  
Page: 56 
calculator in Windows to convert between decimal and binary, you will better understand the 
conversions if you can do them manually. 
Converting from Binary to Decimal 
The decimal numbering system uses the digits 0 through 9 and the exponential powers of 10 to express 
a number. For example, the decimal number 207 is the sum of 2102 + 0101 + 7100. The binary 
numbering system uses the digits 1 and 0 and the exponential powers of 2 to express a number. The 
binary number 11001 is the sum of 124 + 123 + 022 + 021 + 120. Dotted decimal notation never 
includes numbers that are larger than 255 because each decimal number represents 8 bits of a 32-bit 
address. The largest number that 8 bits can express is 11111111 in binary, which is 255 in decimal. 
Figure 3-2 shows an 8-bit binary number, the bit positions, and their decimal values. 
Figure 3-2  An 8-bit binary number 
To manually convert an 8-bit number from binary to decimal (starting at the top of Figure 3-2), do the 
following: 
1. If the eighth bit position equals 1, add 128 to the total. 
2. If the seventh bit position equals 1, add 64 to the total. 
3. If the sixth bit position equals 1, add 32 to the total. 
4. If the fifth bit position equals 1, add 16 to the total. 
5. If the fourth bit position equals 1, add 8 to the total. 
Chapter 3 – IP Addressing 
TCP/IP Fundamentals for Microsoft Windows  
Page: 57 
6. If the third bit position equals to 1, add 4 to the total. 
7. If the second bit position equals 1, add 2 to the total. 
8. If the first bit position equals to 1, add 1 to the total. 
For example, for the 8-bit binary number 10111001: 
1. The eighth bit position equals 1. Add 128 to the total. The total is now 128. 
2. The seventh bit position equals 0. 
3. The sixth bit position equals 1. Add 32 to the total. The total is now 160. 
4. The fifth bit position equals 1. Add 16 to the total. The total is now 176. 
5. The fourth bit position equals 1. Add 8 to the total. The total is now 184. 
6. The third bit position equals 0. 
7. The second bit position equals 0. 
8. The first bit position equals 1. Add 1 to the total. The total is now 185. 
Therefore, 10111001 in binary is 185 in decimal. 
In summary, to convert a binary number to its decimal equivalent, total the decimal equivalents for the 
bit positions that are set to 1. If all 8 bits are set to 1, add 128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 to get 255.  
Converting from Decimal to Binary 
To manually convert a number up to 255 from decimal notation to binary format (starting at the decimal 
column of Figure 3-2), do the following: 
1. If the number is larger than 127, place a 1 in the eighth bit position, and subtract 128 from the 
number. Otherwise, place a 0 in the eighth bit position.  
2. If the remaining number is larger than 63, place a 1 in the seventh bit position, and subtract 64 from 
the number. Otherwise, place a 0 in the seventh bit position. 
3. If the remaining number is larger than 31, place a 1 in the sixth bit position, and subtract 32 from the 
number. Otherwise, place a 0 in the sixth bit position. 
4. If the remaining number is larger than 15, place a 1 in the fifth bit position, and subtract 16 from the 
number. Otherwise, place a 0 in the fifth bit position. 
5. If the remaining number is larger than 7, place a 1 in the fourth bit position, and subtract 8 from the 
number. Otherwise, place a 0 in the fourth bit position. 
6. If the remaining number is larger than 3, place a 1 in the third bit position, and subtract 4 from the 
number. Otherwise, place a 0 in the third bit position. 
7. If the remaining number is larger than 1, place a 1 in the second bit position, and subtract 2 from the 
number. Otherwise, place a 0 in the second bit position. 
8. If the remaining number equals 1, place a 1 in the first bit position. Otherwise, place a 0 in the first bit 
position. 
Here is an example of converting the number 197 from decimal to binary: 
Chapter 3 – IP Addressing 
TCP/IP Fundamentals for Microsoft Windows  
Page: 58 
1. Because 197 is larger than 127, place a 1 in the eighth bit position, and subtract 128 from 197, 
leaving 69. The binary number so far is 1xxxxxxx. 
2. Because 69 is larger than 63, place a 1 in the seventh bit position, and subtract 64 from 69, leaving 
5. The binary number so far is 11xxxxxx. 
3. Because 5 is not larger than 31, place a 0 in the sixth bit position. The binary number so far is 
110xxxxx. 
4. Because 5 is not larger than 15, place a 0 in the fifth bit position. The binary number so far is 
1100xxxx. 
5. Because 5 is not larger than 7, place a 0 in the fourth bit position. The binary number so far is 
11000xxx. 
6. Because 5 is larger than 3, place a 1 in the third bit position, and subtract 4 from 5, leaving 1. The 
binary number so far is 110001xx. 
7. Because 1 is not larger than 1, place a 0 in the second bit position. The binary number so far is 
1100010x. 
8. Because 1 equals 1, place a 1 in the first bit position. The final binary number is 11000101. The 
decimal number 197 is equal to the binary number 11000101. 
In summary, to convert from decimal to binary, verify whether the decimal number contains the 
quantities represented by the bit positions from the eighth bit to the first bit. Starting from the eighth bit 
quantity (128), if each quantity is present, set the bit in that bit position to 1. For example, the decimal 
number 211 contains 128, 64, 16, 2, and 1. Therefore, 211 is 11010011 in binary notation. 
IPv4 Address Prefixes 
Each bit of a unique IPv4 address has a defined value. However, IPv4 address prefixes express ranges 
of IPv4 addresses in which zero or more of the high-order bits are fixed at specific values and the rest 
of the low-order variable bits are set to zero. Address prefixes are routinely used to express a range of 
allowable addresses, subnet prefixes assigned to subnets, and routes. 
To express an IPv4 address prefix, you must identify the number of high-order bits that are fixed and 
their value. Then you can use prefix length notation or dotted decimal notation. 
Prefix Length Notation 
If you use prefix length notation, you express address prefixes as StartingAddress/PrefixLength, in 
which: 
StartingAddress is the dotted decimal expression of the first mathematically possible address in the 
range. To form the starting address, set the fixed bits at their defined values, and set the remaining bits 
to 0. 
PrefixLength is the number of high-order bits in the address that are fixed.  
For example, the IPv4 address prefix 131.107.0.0/16 specifies a range of 65,536 addresses. The prefix 
length, 16, specifies that all addresses in the range begin with the same 16 bits as the starting address. 