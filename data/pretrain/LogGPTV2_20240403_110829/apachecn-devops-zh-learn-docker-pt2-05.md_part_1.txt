# 五、运行您的私人 Docker 基础设施
在[第 4 章](04.html)、*发布映像、*中，我们讨论了 Docker 映像，并清楚地解释了 Docker 容器是 Docker 映像的运行时实现。随着容器化范式在信息技术领域掀起风暴，Docker 的形象和容器越来越多。因此，出于安全考虑，全球企业需要将其 Docker 映像保存在自己的私有基础架构中。因此，将 Docker Hub 部署到我们自己的基础架构的概念已经出现并发展。Docker 集线器对于注册和存放不断增长的 Docker 映像至关重要。主要是，Docker Hub 专门用于集中管理以下方面的信息:
*   用户帐户
*   映像的校验和
*   公共命名空间
本章的重点是提供所有相关信息，使您和 Docker 容器工匠能够在自己的后院设计、填充和运行自己的私有 Docker 集线器。本章涵盖以下重要主题:
*   Docker 注册表
*   Docker 注册表用例
*   运行您自己的 Docker 注册表并将映像推送到新创建的注册表中
*   webhook 通知
*   docker registry http api 支持
## Docker 注册表
Docker 注册表实现与本书早期版本中提到的早期版本完全不同。Docker 注册表 2.0 是存储和分发 Docker 映像的新实现。它取代了之前的 Docker 注册表实现([https://github.com/docker/docker-registry](https://github.com/docker/docker-registry))。新的实现可在[https://github.com/docker/distribution](https://github.com/docker/distribution)获得。这是 Apache 许可下的开源。注册表是一个无状态的、高度可伸缩的服务器端应用，它存储并允许您分发 Docker 映像。新版本中不推荐使用 Docker 注册表索引。以前，Docker 注册表在内部使用索引来验证用户。
Docker Registry 2.0 在 Go 中完成、新增并实现，支持 Docker Registry HTTP API v2。当前的 Docker Hub([https://hub.docker.com](https://hub.docker.com))基于带有 Docker Engine 1.6 或更高版本的新 Docker 注册表 2.0。这使得它对用户来说更加可靠和透明。所有云提供商都采用了这个新的 Docker 注册表，包括 AWS 和 IBM。
新的注册表实现提供了以下好处:
*   更快的推拉
*   安全高效的实施
*   简化部署
*   可插拔存储后端
*   webhook 通知
如下图所示，Docker Registry 的一般体系结构显示了它如何与前端的 Nginx 和后端的存储集成在一起:
![](img/image_05_001.png)
书记官处的突出特点如下:
*   注册表与 Docker Engine 1 . 6 . 0 版或更高版本兼容。
*   默认的存储驱动程序是本地 POSIX 文件系统，它适用于开发或小型部署。它还支持不同的存储后端(S3、微软 Azure、OpenStack Swift 和阿里云 OSS)。
*   它本身支持 TLS 和基本身份验证。
*   在新版本中，注册表还支持强大的通知系统。注册表支持发送 Webhook 通知，以响应注册表中发生的事件。通知是响应清单推拉和层推拉而发送的。这些操作被序列化为事件。事件被排队到注册中心内部的广播系统中，该系统将事件排队并分派到端点([https://docs.docker.com/registry/notifications/#endpoints](https://docs.docker.com/registry/notifications/#endpoints))。
最新的 Docker 注册表发布了两个选项:
*   可信注册表 Docker
*   Docker 注册表
让我们详细谈谈这两个选项:
*   **Docker 可信注册** ( **DTR** ):这是来自 Docker 的企业级解决方案。DTR 支持高可用性，安装在 Docker **通用控制平面** ( **UCP** )集群上。详情可登陆以下网站:
    [https://docs.docker.com/docker-trusted-registry/](https://docs.docker.com/docker-trusted-registry/)。
DTR 支持映像管理，并且内置了安全性和访问控制。还可以与 LDAP、**活动目录** ( **AD** )集成，支持**基于角色的访问控制** ( **RBAC** )。
DTR 的总体架构如下图所示:
![](img/image_05_002.png)
DTR 有一个内置的认证机制。在节点上运行的 DTR 由以下容器组成:
*   `dtr-api-`:执行 DTR 业务逻辑。它服务于 DTR 网络应用和应用编程接口。
*   `dtr-garant-`:管理 DTR 认证。
*   `dtr-jobrunner-`:在后台运行清理作业。
*   `dtr-nautilusstore-`:存储安全扫描数据。
*   `dtr-nginx-`:接收 HTTP 和 HTTPS 请求，并将它们代理到其他 DTR 组件。默认情况下，它监听主机的端口`80`和`443`。
*   `dtr-notary-server-`:接收、验证和服务内容信任元数据，并在启用内容信任的情况下推送或拉入 DTR 时进行咨询。
*   `dtr-notary-signer-`:对内容信任元数据进行服务器端时间戳和快照签名。
*   `dtr-registry-`:实现拉推 Docker 图片的功能。它还处理映像的存储方式。
*   `dtr-rethinkdb-`:用于保存存储库元数据的数据库。
DTR 使用以下内部命名卷来保存数据:
*   `dtr-ca`:私钥和证书都存储在这里
*   `dtr-etcd`:etcd 用来存储 DTR 内部配置
*   `dtr-registry`:这是存储映像的体积
*   `dtr-rethink`:这被 RethinkDB 用来保存 DTR 数据，比如用户和存储库
默认情况下，DTR 将映像存储在主机的本地文件系统上。对于高度可用的 DTR 安装，它还支持云存储或网络文件系统。DTR 可以配置为支持亚马逊 S3、OpenStack Swift 和微软 Azure。
*   **Docker 注册表**:注册表是一个无状态的、高度可扩展的服务器端应用，用于存储和分发 Docker 映像。注册是开源的，在许可的阿帕奇许可下([http://en.wikipedia.org/wiki/Apache_License](http://en.wikipedia.org/wiki/Apache_License))。
在本书中，我们将关注开源 Docker 注册表的第二个选项。
## Docker 注册表用例
Docker 注册表存储 Docker 映像，并提供拉、推和删除映像的基本功能。在典型的工作流中，对源代码修订控制系统的提交会触发配置项系统上的构建，如果构建成功，配置项系统会将新映像推送到您的注册表中。然后，来自注册表的通知将触发转移环境上的部署，或者通知其他系统有新映像可用。
当用户需要执行以下操作时，会使用 Docker 注册表:
*   加强对映像保存位置的控制
*   拥有映像分发管道
*   将映像存储和分发与后端开发工作流相集成
注册表的重要用例如下:
*   **拉取或下载镜像**:用户使用 Docker 客户端向 Docker Registry 请求镜像，Registry 反过来用注册表的详细信息回复用户。然后，Docker 客户端将直接请求注册表获取所需的映像。注册表通过内部索引对用户进行身份验证。
*   **推送或上传图片**:用户请求推送图片，获取注册表信息，然后将图片直接推送至注册表。注册表对用户进行身份验证，最后对用户做出响应。
*   **删除映像**:用户也可以请求从库中删除映像。
用户可以选择使用带有或不带有索引的注册表。使用没有索引的注册表最适合存储私有映像。
除了前面的用例，Docker Registry 还支持映像的版本控制。可与**持续集成** ( **CI** )和**持续开发** ( **CD** )系统集成。当新映像成功推送到注册表时，来自注册表的通知将触发转移环境上的部署或通知其他系统有新映像可用。
在 V2 Docker 注册中心，还支持以下新用例:
*   **映像验证** : Docker Engine 希望运行已验证的映像，因此它希望确保映像是从可信来源下载的，并且没有发生篡改。Docker Registry V2 返回一个清单，Docker 引擎在下载映像之前验证清单的签名。下载每一层后，引擎会验证该层的摘要，确保内容符合清单的规定。
*   **可恢复推送**:上传图片到 Docker 注册表时可能会失去网络连接。现在，Docker 注册表能够通知 Docker 引擎文件上传已经开始。因此，Docker Engine 将通过仅发送剩余数据来完成映像上传来做出响应。
*   **可恢复拉取**:下载映像时，连接在完成前中断。Docker 引擎保留部分数据和请求，以避免下载重复的数据。这被实现为 HTTP 范围请求。
*   **图层上传重复数据删除**:Y 公司的构建系统从构建流程 A 和 B 创建两个相同的 Docker 图层，构建流程 A 在 B 之前完成图层上传，当流程 B 尝试上传图层时，注册表表示没有必要，因为图层已经知道了。如果进程 A 和 B 同时上传同一个层，两个操作都将继续，第一个完成的操作将存储在注册表中(注意，我们可能会修改这一点，以通过一些锁定机制来防止狗桩)。
This is the reason why Docker Registry V2 needs Docker Engine version 1.6 or above to support these features.
## 运行 Docker 注册表并推送映像
安装和运行 Docker Registry 相当容易，但是在生产环境中操作还需要其他非功能性需求，例如安全性、可用性和可扩展性。此外，日志记录和日志处理、系统监控和安全 101 是生产级系统所需的功能。正如前面在生产系统中解释的那样，大多数供应商使用 DTR。但是，Docker Registry 足够好，可以在您的非生产环境中使用，最好是在内部网环境中。
在本节中，我们将使用 Ubuntu 14.04 机器来安装、运行和测试 Docker 注册表。Docker Engine 将按照[第 1 章](01.html)、*Docker*入门中所述进行安装。我们将执行以下步骤来运行我们自己的注册表，最后，推送映像:
1.  **在本地主机**上运行 Docker 注册表:与大多数服务器一样，Docker 注册表不需要安装在运行 Docker 客户端的客户端系统上。Docker 注册表可以安装到任何支持 Docker 并且可以通过网络访问的服务器上。因此，多个 Docker 客户端可以访问正在运行的 Docker 注册表。
Docker 注册表接受 TCP 端口`5000`上的连接，因此这不会被您系统中的防火墙阻止。
如果您将大量映像推送到 Docker 注册表，它们会很快填满空间，因此建议您配置足够的空间来保存映像。在本地文件系统上，存储路径通常为`/var/lib/registry`。
2.  **启动注册表**:以下命令从 Docker Hub 下载注册表镜像，在后台启动一个容器:
```
 $ sudo docker run -d -p 5000:5000 \ 
 --restart=always --name registry registry:2 
 Unable to find image 'registry:2' locally 
 2: Pulling from library/registry 
 df53ce740974: Pull complete 
 9ce080a7bfae: Pull complete 
 Digest: 
 sha256:1cfcd718fd8a49fec9ef16496940b962e30e39
 27012e851f99905db55f1f4199 
 Status: Downloaded newer image for registry:2 
 8e5c4b02a43a033ec9f6a38072f58e6b06b87570ba951b3cce5
 d9a031601656e  
```
3.  **检查 Docker 注册表是否在本地主机**上运行:以下命令验证 Docker 注册表是否在本地主机的端口`5000`上启动并运行:
```
 $ sudo docker ps -a 
 CONTAINER ID IMAGE COMMAND 
 CREATED STATUS PORTS 
 NAMES 
 8e5c4b02a43a registry:2 "/entrypoint.sh /etc/" 
 3 minutes ago Up 3 minutes 0.0.0.0:5000->5000/tcp 
 registry 
```
4.  **获取并标记映像**:测试 Docker 最常见的映像是 Docker Hub 提供的`hello-world`映像。从本地注册表中提取映像:
```
 $ sudo docker pull hello-world 
 Using default tag: latest 
 latest: Pulling from library/hello-world 
 c04b14da8d14: Pull complete 
 Digest: 
 sha256:0256e8a36e2070f7bf2d0b0763dbabdd677985124
 11de4cdcf9431a1feb60fd9 
 Status: Downloaded newer image for 
 hello-world:latest 
```
以下命令用`localhost:5000`标记映像:
```
 $ sudo docker tag hello-world 
 localhost:5000/hello-world 
```
最后，本地主机上可用的映像列表如下:
```
 $ sudo docker images 
 REPOSITORY TAG IMAGE ID 
 CREATED SIZE 
 registry 2 541a6732eadb 
 2 days ago 33.3 MB 
 localhost:5000/hello-world latest c54a2cc56cbb 
 12 weeks ago 1.848 kB 
 hello-world latest c54a2cc56cbb 
 12 weeks ago 1.848 kB 
```
5.  **推送映像**:该`hello-world`映像现在可以推送至新创建的 Docker 注册表:
```
 $ sudo docker push localhost:5000/hello-world 
 The push refers to a repository [localhost:5000/
 hello-world] 
 a02596fdd012: Pushed 
 latest: digest: 
 sha256:a18ed77532f6d6781500db650194e0f9396ba5f
 05f8b50d4046b294ae5f83aa4 size: 524 