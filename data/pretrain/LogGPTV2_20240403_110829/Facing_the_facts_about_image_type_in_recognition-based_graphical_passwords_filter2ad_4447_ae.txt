Text passwords may also be used as a fall-back if for example
some users must, from time to time, log in from legacy systems
having text-only interfaces.
System conﬁguration and design of the password reset
and password change mechanism can impact memorability,
interference, and security of the system. For example, if users
are presented with the same, or similar, images as in previous
graphical passwords, they may be more likely to confuse the
memories of passwords or to reuse passwords. This suggests
that reuse of graphical password images should be avoided,
and also argues against images being uploaded by users.
Similar to reset, most authentication systems must ac-
commodate password change (some systems require this at
speciﬁed intervals). The usability and security concerns are
similar, except users can complete the task themselves without
TR-09-09: GRAPHICAL PASSWORDS
12
requiring a temporary password, entering their current graph-
ical password as authentication.
4) Portable login: Unless restricted to a very speciﬁc
environment (e.g., while physically present
in a corporate
ofﬁce, or at a bank ATM), it can be expected that users of
graphical password systems may need to log in from different
physical devices or locations. Usability issues to consider
include whether the system is suitable for access from devices
having different screen sizes or resolutions, and whether local
bandwidth constraints impact performance. Moreover, portable
login may require a modiﬁed login process or completion of
additional tasks; these should also be considered and tested.
C. Domains
Performance constraints and goals for an authentication
system differ depending on the intended environment of use.
While the highest level of security may be unnecessary for
a newspaper subscription, due to the low risks and minor
consequences of a security breach, an online banking site re-
quires much stronger security. When presenting a new scheme,
the target environment should be clearly declared, to allow
comparison of systems intended for similar conditions, and to
avoid deploying systems in inappropriate domains.
Ideally, an authentication system would be both highly
secure and highly usable. Indeed, the ultimate goal of usable
security is to increase both usability and security. However,
in practice to date, the designs of many systems offer only
the usual trade-off: the cost of increased security is decreased
usability. To illustrate, many recognition-based graphical pass-
word schemes, when conﬁgured as proposed and tested in
the literature, have theoretical password spaces approximately
the same size as 4-digit PINs. Increasing the number of
images per round or the number of rounds results in a larger
password space but decreases usability and memorability. For
PassFaces to achieve a theoretical password space comparable
in size to 8-character passwords of alphanumeric characters
(no symbols), it would require 62 images per panel and 8
rounds (versus the commonly reported 9 images per panel,
and 4 rounds). This would result in longer login times and
signiﬁcantly complicate the recognition process. However, for
environments where PIN-equivalent security sufﬁces, schemes
like PassFaces remain suitable.
For high-risk domains such as online banking, security is of
utmost importance and it may be acceptable to have a system
that is slightly more difﬁcult to use in order to achieve the
desired level of security, as long as usability problems do not
lead to behaviour triggering other security issues. Conversely,
it may be acceptable to have very usable, but lower security
schemes for lower risk domains. In fact, this could result
in improved security for high-risk domains if it eliminates
the opportunity for password reuse between high- and low-
risk systems; it may also help with memorability by reducing
opportunities for password interference. Similarly, infrequently
used accounts may be better served by a more memorable
scheme that has a relatively long login time if this makes it
more likely that the user can log in when needed.
It seems quite unlikely that any single scheme will be
ideal for all domains, tasks, and target users, from a com-
bined usability and security viewpoint. As such, specifying
the particular environments and target applications for newly
proposed schemes is important.
VIII. SECURITY ASPECTS AND ATTACKS
The main purpose of authentication mechanisms is to allow
system access to only legitimate users. To thoroughly evaluate
the security of a proposed graphical password system, and
to facilitate comparison with alternatives, all standard threats
and known attacks should be addressed. For example, a system
is of limited interest if it prevents shoulder-surﬁng but has a
password space so small that it falls to a simple brute-force
attack that is a legitimate threat. If a system is intended for
use in particular environments, where some standard threats
are not a concern, then the relevant details should be clearly
speciﬁed. Essential security measures to be made and reported
include: the size of the theoretical password space; the es-
timated size of the effective password space; details about
known or anticipated exploitable patterns in user choice; and
an analysis of how the scheme withstands known attacks.
This section discusses standard threats to password-based
authentication systems and how they relate to graphical pass-
words. Attacks are classiﬁed as guessing or capture attacks
(including malware which captures passwords). We do not
discuss attacks which exploit software vulnerabilities in order
to bypass the authentication system entirely, limiting our scope
to attacks which directly obtain password credentials.
A. Guessing Attacks
Guessing attacks remain a serious threat [93]–[95], although
statistics are scarce (few organizations publicize breaches).
An online guessing attack requires interaction with the live
system; usually each password guess is entered in turn to
see if login is successful. Defenses against such attacks can
be ameliorated by clever use of CAPTCHA’s [96], [97];
increasingly delaying (e.g., doubling) the system response
time on each successive incorrect guess; or limiting, per
user account, the number of incorrect login attempts allowed
before locking the account from further login attempts. The
latter has usability costs: legitimate users who forget their
password may be locked out. Moreover, locking out means that
effective denial-of-service (DoS) attacks can be launched by
intentionally entering incorrect passwords to prevent legitimate
users from accessing their accounts [96]. Also, locking out is
less effective against multi-account attacks [96], where instead
of targeting a speciﬁc account, attackers try some number of
guesses on each of many arbitrary accounts, seeking success
on at least some accounts. This attack strategy works for both
text and graphical password systems.
In an ofﬂine guessing attack, attackers gain access to veriﬁ-
able text [24] and need not interact with the live system to test
guesses for correctness. Schemes vulnerable to ofﬂine attacks
are at a higher risk than those requiring online veriﬁcation as
ofﬂine work is not visible, and trial guesses can be processed
much more quickly. Attacks may exploit pre-computed data
structures and special hardware.
TR-09-09: GRAPHICAL PASSWORDS
13
Defensive techniques against guessing attacks are numerous,
and vary in utility depending on the environment. System-side
passwords are typically stored after processing by a one-way
hash function, for added security in case an attacker gains
access to this storage. To check if a login attempt is correct,
the system hashes the login input and tests for a match to the
stored value. One technique to slow down guessing attacks
is iterated hashing [4], requiring, say, 1000 or many more
password hashing operations (rather than one); this increases
the time to test individual password candidates online, and
to pre-compute dictionaries. Another is salting [4], which
concatenates to a password (before hashing) a user-speciﬁc
string stored along with the hashed password;
this forces
hashing for each password guess on a per-user (per-salt) basis,
adding to the cost of pre-computed data structures. Designing
authentication protocols to resist ofﬂine guessing attacks by
avoiding veriﬁable text — such as encrypted key exchange
(EKE), SRP and the like [24], [98], [99] — can be important
for both text and graphical passwords, but is notoriously tricky.
Other long-standing defensive techniques include password
rules or policies [4] to disallow weak passwords at their cre-
ation time, and both reactive and proactive password checkers
(e.g., [5], [100]). System-assigned passwords — generated
randomly, to preclude attacks exploiting password distributions
— force use of the entire theoretical password space, but
with high usability costs: longer training times and increased
likelihood that users forget passwords. Mnemonic strategies
like passphrases [7], [101] and Story [51] may potentially
improve both usability and security, but may also suffer from
predictability problems if user choice is allowed.
1) Exhaustive-search (brute-force) attacks: The deﬁning
characteristic of an exhaustive-search attack is that
it ex-
haustively guesses all passwords within a password space.
Such attacks are most often discussed in the context of
cryptographic key search [4], where typical keys are system-
assigned and equi-probable. For user-chosen passwords (which
are far from equi-probable), except for small password spaces,
dictionary attacks are preferred, as we discuss further below.
Exhaustive-search optimizations such as Oechslin’s rainbow
tables [102], which trade pre-computation time for storage,
have been used for both cryptographic key search and al-
phanumeric password cracking. Coarse sequencing optimiza-
tions include ﬁrst guessing shorter passwords and (for text
passwords) lower-case only. Fine sequencing optimizations,
which prioritize in decreasing order of expected probability,
and favor speciﬁc subsets expected to hold higher probability
passwords, are considered dictionary attacks.
The advantage to exhaustive attacks is that with enough time
and computing power, all passwords will be found (unless
an online attack is detected and stopped before completed).
However, full search of large password spaces is infeasible.
“Guaranteed” success may thus require more time or process-
ing power than is available; searching only subsets is faster,
but doesn’t guarantee success.
To minimize the threat of exhaustive attacks, the set of all
passwords allowed within a system (the theoretical password
space) should too large to search. However, this is not the
case for many recognition-based systems — e.g., the stan-
dard conﬁguration of PassFaces has 9-image panels and 4
rounds, yielding only 94 = 6561 passwords. In practice,
such systems require complementary mechanisms such as
limiting the number of online guesses per account, or multi-
factor authentication. Helping the defense, attacks may require
obtaining the image set used, which involves additional effort;
the added barrier depends on the size of the image set and the
methods required to access it.
2) Dictionary Attacks and Optimizations: Dictionary at-
tacks on graphical passwords [51], [103] follow a long line
of attacks on text passwords (e.g., [4], [5], [104]–[106]).
The original
idea involved guessing passwords from a
relatively short pre-compiled list (dictionary) of character
sequences considered high-probability candidates, based on
empirical data or assumptions about user behaviour. For online
attacks, candidates of higher expected probability were ordered
earlier. For systems involving (iterated) hashing or salting,
these operations often allowed pre-computation, yielding “en-
crypted” dictionaries. Then for ofﬂine attacks, upon obtaining
a list of hashed passwords (e.g., the Unix /etc/passwd
password ﬁle), dictionary matches are found by table lookup.
These ideas have been extended as technology has provided
low-latency web access to login servers, greater computing
power and storage, and improved search techniques. Massive
dictionaries and powerful data structures have created a contin-
uum from small dictionaries to prioritized brute-force attacks,
with smart dictionary attacks combining time-memory trade-
offs of exhaustive attacks with higher success probabilities of
prioritized dictionaries [107]. The original deﬁning aspect of
a dictionary attack [4], a database, can also be replaced by
algorithmic enumeration [107].
In systems allowing user-choice, dictionary attacks exploit
skewed password distributions resulting from certain subsets
of passwords being more attractive to non-negligible sets
of users. Attacks succeed as users select passwords from
predictable, relatively small subsets of the theoretical pass-
word space — weak password subspaces [31] which can
be enumerated, are small enough to search, and contain a
signiﬁcant fraction of passwords chosen in practice. These are
collectively modeled as an effective password space includ-
ing passwords with predicted probabilities higher than some
threshold. A theoretical space too large to be exhaustively
attacked does not guarantee security; to prevent successful
attacks, the effective password space must also be too large
to search. The knowledge gap here is to understand what
composes the effective password space, a problem still at best
only vaguely understood for text passwords. Many graphical
password proposals are susceptible to dictionary attacks due
to predictable patterns in user choice, as we discuss next.
3) Speciﬁc Attacks on Graphical Password Schemes: We
highlight that signiﬁcant security issues are now known in
the exemplars of each of the three major classes of graphical
passwords. Moreover, few other schemes have received serious
independent (if any) security scrutiny. Thus,
it should be
recognized that security claims made by proponents of various
graphical password schemes are often optimistic.
RECALL-BASED SYSTEMS. DAS and Pass-Go have been
studied with respect to dictionary and predictive attacks [31],
TR-09-09: GRAPHICAL PASSWORDS
14
[38], [103], [108]. DAS passwords have been categorized
into classes based on characteristics such as symmetry and
a small number of strokes. Using this classiﬁcation it was
shown [31] that a large number of passwords from a paper-
based study [30] and a subsequent Pass-Go ﬁeld study [109],
fall within such predictable categories. The ﬁeld study also
found [109] that a high percentage of Pass-Go users chose
passwords from a third category, namely, drawings of alpha-
betic characters or symbols. It appears prudent to conclude
that such predictable categories of relatively small cardinality
will allow attackers to identify candidate passwords of higher
probability, leading to efﬁcient dictionary attacks. The security
of Pass-Go thus warrants further study, as does that of DAS.
RECOGNITION-BASED SYSTEMS. For PassFaces, the analy-
sis of user choice by Davis et al. [51] showed that users tend to
select attractive faces of their own race; and that users selected
predictable sets of faces such that an attacker knowing one
face could determine the face most likely to be selected as the
next password part. Because users tend to select predictable
images, successful dictionary attacks may be expected, as well
as personalized attacks, e.g., if attackers know a user’s race or
gender. Davis et al. [51] guessed 10% of passwords created
by male participants in 2 guesses. A major conclusion was
that many graphical password schemes, including Faces, may
require “a different posture towards password selection” than
text passwords, where selection by the user is the norm. As
noted in Section V (which also mentions user choice issues
in the Story scheme [51]), a phishing attack on PassFaces
requires a MITM attack.
CUED-RECALL SYSTEMS. PassPoints’ users tend to select
passwords containing popular points (hotspots) or following
simple patterns [39], [74]–[78]. Hotspots are areas of the
image with higher probability of being chosen by users as