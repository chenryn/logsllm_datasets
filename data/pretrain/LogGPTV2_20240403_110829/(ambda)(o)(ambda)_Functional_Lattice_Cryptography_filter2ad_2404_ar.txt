Table 4.3, Table 4.4, and Table 4.5 show runtimes for the main cyclotomic ring operations.
We compare Λ∘ 𝜆’s C++ (CT) and Repa (RT) Tensor backends, and HElib whenever it
supports analogous functionality. For CT and RT, operations scale approximately linearly in
the number of moduli in the RNS representation, so all the runtimes are shown for a single
modulus. For a cyclotomic ring 𝒪𝑚, we consider only “good” prime moduli 𝑞 = 1 mod 𝑚,
so that the CRT exists over Z𝑞. Benchmarks are reported for the UCyc interface; times for
analogous operations in the Cyc interface are essentially identical, except where noted. All
times are reported in microseconds (𝜇s).
120
Table 4.3: Runtimes (in microseconds) for conversion between the powerful (P) and CRT (C)
bases, and between the decoding (D) and powerful bases (P). For comparison with our P↔C
conversions, we include HElib’s conversions between its “polynomial” and “Double CRT”
(with one modulus) representations. Note that HElib is primarily used with many (small)
moduli, where the conversion from Double CRT to polynomial representation is closer in
speed to the other direction.
Index 𝑚 𝜙(𝑚)
UCyc P→C
UCyc C→P
UCyc D→P
UCyc P→D
HElib
CT
RT
HElib
CT
RT
CT
RT
CT RT
210 = 1,024
512
15.9
139 2,344
38.3
142 2,623
211 = 2,048
1,024
32.4
307 5,211
74.4
314 5,618
0.7
1.3
4.0
0.02
0.02
0.7
1.2
0.02
0.02
80.3
4.0 64.2
2633 = 1,728
576
2634 = 5,184
1,728
153
638
99 3,088
361
122 3,284
364 10,400
1,136
426 11,030
11.8
226
11.7 186
263252 = 14,400
3,840
2,756
1,011 24,330
5,659
1,258 25,170
65.8 1,199
61.5 938
Table 4.4: Runtimes (in microseconds) for multiplication by 𝑔 in the powerful (P) and
CRT (C) bases, division by 𝑔 in the powerful and decoding (D) bases, lifting from 𝑅𝑞 to 𝑅 in
the powerful basis, and multiplication of ring elements in the CRT basis. (Multiplication by 𝑔
in the decoding and powerful bases takes about the same amount of time, and multiplication
and division by 𝑔 in the CRT basis take about the same amount of time.)
Index 𝑚 (*) for UCyc C
(*g) for UCyc P
(*g) for UCyc C
(/g) for UCyc P
(/g) for UCyc D
lift UCyc P
HElib CT
RT
CT
RT
CT
RT
CT
RT
CT
RT
CT
RT
1,024
1.8
7.8
73.0
2,048
4.4
15.6 142
0.7
1.2
0.02
11.4
140
0.02
5.4
72.0
5.9
56.8
5.9
56.7
11.6
52.6
155
663
110
390
1,148
4,679
11.6
33.4
102
400
108
385
1,115
5,283
1.0
2.0
1.2
39.8
77.0
45.8
3.4 128
13.3 297
1,728
2.6
9.3
82.1
10.5
107
6.1
84.0
5,184
6.2
26.3 248
30.4
333
18.1
245
14,400
11.6
58.9 589
134
1,515
39.6
575
121
Table 4.5: Runtimes (in microseconds) of twace and embed for UCyc. (For both CT and
RT, twace UCyc D has essentially the same performance as twace UCyc P.) Due to an
unresolved compiler issue, embed (in any basis) with the Cyc interface is considerably slower
than the analagous UCyc operation benchmarked here.
𝑚
𝑚′
twace UCyc P
twace UCyc C
embed UCyc P
embed UCyc D
embed UCyc C
CT
RT
CT
RT
CT
RT
CT
RT
CT
RT
728
728
2,912
0.7
25.9
3,640
0.7
27.1
128
11,648
0.2
7.0
22.7
22.9
92.5
305
258
967
3.8
3.8
57.2
56.8
4.9
8.5
58.3
83.6
38.7
92.9
39.6
95.5
10.8
164
19.7
189
166
393
SHE Scheme
Table 4.6 and Table 4.7 show runtimes for certain main operations of the SHE scheme
described in section 4.3. All times are reported in milliseconds (ms). We stress that unlike
for our cyclotomic operations above, we have not yet designed appropriate “hints” to assist
the compiler’s optimizations, and we expect that performance can be signiﬁcantly improved
by such an effort.
Table 4.6: Runtimes (in milliseconds) for basic SHE functionality, including encrypt,
decrypt, ciphertext multiplication, addPublic, and mulPublic. All ciphertext operations
were performed on freshly encrypted values. The plaintext index for both parameter sets is
𝑚 = 16. For encrypt, the bottleneck is in Gaussian sampling and randomness generation,
which was done using the HashDRBG pseudorandom generator with SHA512.
𝑚′
𝜙(𝑚′)
encrypt
decrypt
ciphertext (*)
addPublic
mulPublic
CT RT
CT RT
CT
RT