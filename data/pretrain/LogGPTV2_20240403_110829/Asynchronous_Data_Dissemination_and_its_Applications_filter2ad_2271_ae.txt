commitment and the share received by node 𝑖 is a valid share
corresponding to the committed polynomial.
During the sharing phase, the dealer 𝐿 with the secret 𝑠 first
samples a random degree-𝑡 polynomial 𝑝(·) such that 𝑝(0) = 𝑠. The
dealer then invokes PedPolyCommit(·) to obtain a commitment
vector 𝒗 as well as share vectors 𝒔, 𝒓. Each vector contains 𝑛 elements
each of size 𝑂(𝑛𝜅). Then, 𝐿 sends node 𝑗 its shares (i.e., 𝒔[𝑗] and 𝒓[𝑗])
using private messages and reliably broadcasts the commitment 𝒗.
The predicate 𝑃(·) (line 106 − 108) in the RBC requires each node
to check whether the message received from the dealer is a valid
share or not.
During the reconstruction phase, each node that received a valid
share from 𝐿 during the sharing phase sends ⟨RECONSTRUCT, 𝑖, 𝑠𝑖, 𝑟𝑖⟩
to all other nodes. Each node upon receiving ⟨RECONSTRUCT, 𝑗, 𝑠 𝑗 , 𝑟 𝑗⟩
from node 𝑗, checks whether (𝑗, 𝑠 𝑗 , 𝑟 𝑗) is valid using PedEvalVerify(·).
Upon receiving 𝑡 + 1 valid shares, a node reconstructs the secret
using Lagrange interpolation.
We prove our AVSS protocol guarantees termination, correctness,
and secrecy against all computationally bounded adversaries.
Lemma 5.4 (Termination). Assuming a collision resistant hash
function, the AVSS scheme in Algorithm 5 guarantees Termination.
Proof. From Lemma 4.6 and 3.3, whenever an honest node ter-
minates the sharing phase, each honest node will eventually ter-
minate the sharing phase. Furthermore, from Lemma 4.4 and the
fact that nodes only send ECHO messages if their PedEvalVerify(·) is
successful (line 108), we get that if the sharing phase terminates at
one honest node, then PedEvalVerify(·) was successful for at least
𝑡 +1 honest node. Let 𝑆 be this set of honest nodes. Then, Lemma D.1
implies that the shares of nodes in 𝑆 are sufficient to reconstruct
the secret 𝑠. During the reconstruction phase, each honest node
will eventually receive RECONSTRUCT messages from all nodes in
𝑆, so each honest node will eventually output a secret. Hence, the
AVSS scheme ensures termination.
□
Lemma 5.5 (Correctness). Assuming a collision resistant hash
function, the AVSS scheme in Algorithm 5 guarantees Correctness.
Proof. When the dealer is honest, the secret reconstructed using
the shares of only honest nodes is clearly equal to 𝑠. Additionally,
note that during the reconstruction phase, an honest node only
accepts shares for which PedEvalVerify(·) is successful. Hence, the
uniqueness property (Theorem D.3) of the Pedersen’s VSS protocol
implies that whenever an honest node outputs a secret 𝑠′, 𝑠′ = 𝑠.
Similar to the proof of termination, when the sharing phase
terminates at an honest node (possibly under a malicious dealer),
PedEvalVerify(·) associated with 𝒗 was successful for at least 𝑡 + 1
honest node. By Lemma D.1, these honest nodes can recover an
appropriate secret. Thus, using the same argument as above, every
honest node reconstructs the same secret.
□
Observe that the view of an adversary in our AVSS scheme is
identical to the view of the adversary in Pedersen’s VSS [44]. Hence,
the Secrecy of our AVSS protocol follows from Theorem D.4.
5.3 Asynchronous Complete Secret Sharing
We can also extend our AVSS scheme to ensure the complete-
ness guarantees described in definition 5.2 using the encrypt-then-
disperse technique from [36, 52]. We describe this technique briefly
below and refer readers to [52].
During the sharing phase, the dealer additionally computes a
ciphertext vector 𝒄 that consists of encryptions of shares (𝑠𝑖, 𝑟𝑖) of
each node 𝑖.
𝒄 = {𝑐1, . . . , 𝑐𝑛} = {Enc𝑝𝑘1(𝑠1, 𝑟1), . . . , Enc𝑝𝑘𝑛
(𝑠𝑛, 𝑟𝑛)}
(2)
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2712Here, 𝑝𝑘𝑖 is the public key of node 𝑖, Enc𝑝𝑘𝑖
public key encryption of 𝑥 using public key 𝑝𝑘𝑖.
(𝑥) denotes a CPA secure
The dealer then sends 𝒗∥𝒄 using our RBC protocol. Note that
since the dealer is now sending 𝒄 through RBC, it no longer needs
to send the plaintext shares using private channels. Upon receiving
𝒄 as a part of a PROPOSE message, each node decrypts its plaintext
share using its secret key and validates it using PedEvalVerify(·). As
in [52], if a node 𝑖 receives an invalid, the node reveals its secret key
by sending ⟨IMPLICATE, 𝑖, 𝑠𝑘𝑖⟩ to all other nodes. Upon receiving
an IMPLICATE message, an honest node repeats the decryption and
verification procedure to confirm that the dealer indeed dispersed
an invalid share.
If any honest node detects that some node received an invalid
share and other nodes have already output, it starts the recovery
protocol. During the recovery protocol, nodes with valid shares
are presented with evidence that the dealer is faulty. If convinced,
these nodes divulge their keys required to decrypt their shares.
In particular, each node 𝑖 who received a valid share during the
sharing phase sends a ⟨RECOVER, 𝑠𝑘𝑖⟩ to all other nodes. Recall from
Lemma 4.2 that if any honest node outputs during the ACSS proto-
col, then at least 𝑡 + 1 honest node received valid shares. Therefore,
at least 𝑡 + 1 honest nodes will send valid RECOVER messages to
all nodes. Upon receiving a ⟨RECOVER, 𝑠𝑘′
𝑖⟩ message from node 𝑖,
each node validates that 𝑠𝑘′
𝑖 corresponds to the public key 𝑝𝑘𝑖 and
the decrypted share is valid. Note that this validation check will
be successful for all honest nodes. Thus, each honest node would
receive at least 𝑡 + 1 valid RECOVER messages and can use Lagrange
interpolation to reconstruct the polynomial 𝑝′(·) and recover their
individual share 𝑝′(𝑖).
The communication costs of both dealer implication and share
recovery protocol are 𝑂(𝜅𝑛2) because the secret key has size 𝑂(𝜅).
Yurek et al. [52] also discusses an alternative approach that obviates
the need for revealing secret keys. This is important if the secret
keys are for long-term usage. In the case of long-term keys, instead
of revealing the secret keys, each node sends a 𝑂(𝜅)-sized non-
interactive zero-knowledge (NIZK) proofs to all other nodes. Hence,
this approach also has communication cost 𝑂(𝜅𝑛2).
Now we give a proof sketch to this ACSS protocol. Termination
and Correctness are not affected. For Secrecy, the key facts to note
are that ACSS does not seek to ensure Secrecy when the dealer is
malicious, and that when the dealer is honest, the share recovery
phase is not invoked. Thus, when the dealer is honest, before any
honest node starts reconstruction, the encryption hides the shares,
and the view of the adversary in the ACSS scheme is computation-
ally indistinguishable to the view of the adversary in AVSS. Hence,
secrecy holds.
Lastly, Completeness is clear when the dealer is honest. When
the dealer is malicious, Completeness follows from the fact that a
single genuine blame is sufficient to initiate the recovery protocol.
The recovery protocol ensures that every honest node recovers
the committed polynomial and outputs its share by evaluating the
polynomial at the appropriate index.
5.4 Dual-threshold ACSS
We will first describe a dual-threshold ACSS that allows a dealer to
share uniformly random secrets. For any given 𝑛 ≥ 3𝑡 + 1, our dual-
threshold ACSS scheme can tolerate any reconstruction threshold
ℓ in the range 𝑡 ≤ ℓ  𝑡? The issue
is that, in our ACSS protocol, it is possible that the sharing phase
terminates, but due to a malicious dealer, only 𝑡 + 1 honest nodes
received their shares. As a result, during the recovery protocol
honest nodes are only guaranteed to receive 𝑡 + 1 evaluation points
through RECOVER messages. If the polynomial 𝑝(·) has degree ℓ > 𝑡,
then 𝑡 + 1 points are insufficient to reconstruct the polynomial 𝑝(·)
or the shares.
To address the above issue, we design a dual-threshold ACSS
using a Publicly Verifiable Secret Sharing (PVSS) scheme. Intuitively,
a PVSS scheme enables the dealer to generate a NIZK proof that
a given ciphertext is an encryption of a valid share. Each node
can then check these proofs in the predicate of the RBC protocol.
Now, if the RBC successfully terminates, enough honest nodes have
checked the validity of each share (using the NIZK proofs), which
ensures that all honest nodes receive their shares. Moreover, if the
RBC terminates, due to its Totality guarantee, every honest node
will receive the encrypted shares of every node and can use its
secret key to decrypt its share.
Another consequence of using PVSS is that our dual-threshold
ACSS scheme is also publicly verifiable, i.e., any external verifier,
who need not be a participant, can check that the dealer 𝐿 acted
honestly without learning any information about the shares or the
secret.
For concreteness, we will use the PVSS scheme from Scrape [19],
which is secure assuming the existence of a Random Oracle and
the hardness of the Decisional Diffie-Hellman problem. Next, we
describe the interface of Scrape’s PVSS below and present our
dual-threshold ACSS protocol in Algorithm 6. Let 𝑝𝑝 be the public
parameters.
• PVSS.Share(𝑝𝑝, 𝑠, ℓ, 𝑛) → 𝒗, 𝒄, 𝝅 : For a uniformly random 𝑠 ∈ F,
the vector 𝒗 is a commitment to a degree-ℓ random polyno-
mial with 𝑝(0) = 𝑠. The vector 𝒄 consists of encrypted shares
for each node. The vector 𝝅 consists of non-interactive zero-
knowledge (NIZK) proofs that each component of 𝒄 is a correct
encryption of a share of 𝑠. Each of these proofs is 𝑂(𝜅) bits long.
• PVSS.Verify(𝑝𝑝, ℓ, 𝒗, 𝒄, 𝝅) → 0/1 : The PVSS.Verify function
takes in the tuple (𝒗, 𝒄, 𝝅) and outputs 1 if and only if 𝒗 is a
commitment to a degree-ℓ polynomial 𝑝(·) and each component
of 𝒄 is a valid encryption of a share of 𝑝(0).
Our dual-threshold ACSS makes use of a non-interactive protocol
for checking the equality of discrete logarithm. In particular, given
a group G of prime order 𝑞, two uniformly random generators
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2713Algorithm 6 Dual-threshold ACSS for uniform secrets
PUBLIC PARAMETERS: 𝑝𝑝 := (𝑛, 𝑡, ℓ, 𝑔0, 𝑔1, {𝑝𝑘𝑖 }) for 𝑖 = 1, 2, . . . , 𝑛
PRIVATE PARAMETERS: Node 𝑖 has secret key 𝑠𝑘𝑖 i.e., 𝑝𝑘𝑖 = 𝑔𝑠𝑘𝑖1
SHARING PHASE:
// As dealer 𝐿 with input 𝑠:
101: 𝒄, 𝒗, 𝝅 ← PVSS.Share(𝑝𝑝, 𝑠, ℓ, 𝑛)
102: RBC(𝒗∥𝒄 ∥𝝅) with predicate 𝑃(·) as given below.
// predicate 𝑃(·) for node 𝑖
103: procedure 𝑃(𝒗∥𝒄 ∥𝝅)
104:
return PVSS.Verify(𝑝𝑝, ℓ, 𝒗, 𝒄, 𝝅)
RECONSTRUCTION PHASE:
// every node 𝑖 with key 𝑝𝑘𝑖, 𝑠𝑘𝑖
˜𝑠𝑖 := 𝒄[𝑖]𝑠𝑘𝑖 ; ˜𝜋 := dleq.Prove(𝑠𝑘𝑖, 𝑔1, 𝑝𝑘𝑖, 𝒄[𝑖], ˜𝑠𝑖);
if dleq.Verify( ˜𝜋, 𝑔1, 𝑝𝑘 𝑗 , 𝒄[𝑗], ˜𝑠 𝑗 ) then
201:
202: send ⟨RECONSTRUCT, ˜𝑠𝑖, ˜𝜋𝑖 ⟩ to all
203: upon receiving ⟨RECONSTRUCT, ˜𝑠 𝑗 , ˜𝜋 𝑗 ⟩ from node 𝑗 do
204:
205:
206:
207:
208:
𝑇 = 𝑇 ∪ { ˜𝑠 𝑗 }
if |𝑇 |≥ ℓ then
1 := PVSS.Recon(𝑇 )
𝑔𝑠
1 and return
output 𝑔𝑠
0 and 𝑦 = 𝑔𝛼
𝑔0, 𝑔1 ∈ G and a tuple (𝑔0, 𝑥, 𝑔1, 𝑦), a prover P wants to prove to a
PPT verifier V, in zero-knowledge, that there exists an witness 𝛼
such that 𝑥 = 𝑔𝛼
1 . We describe the interfaces of such a
protocol and provide the detailed protocol in Appendix E.
• dleq.Prove(𝛼, 𝑔0, 𝑥, 𝑔1, 𝑦) → 𝜋 : Given tuple (𝑔0, 𝑥, 𝑔1, 𝑦) and 𝛼
where 𝛼 = log𝑔0 𝑥 = log𝑔1 𝑦, dleq.Prove outputs an non-interactive
zero-knowledge proof 𝜋 that such an 𝛼 exists.
• dleq.Verify(𝜋, 𝑔0, 𝑥, 𝑔1, 𝑦) → 0/1 : Given a proof 𝜋 and a tuple
(𝑔0, 𝑥, 𝑔1, 𝑦), dleq.Verify outputs 1 if log𝑔0 𝑥 = log𝑔1 𝑦, and 0 oth-
erwise.
The dealer 𝐿 with a uniformly random secret 𝑠 ∈ F, first com-
putes the PVSS shares for 𝑠 using PVSS.Share. Let (𝒗, 𝒄, 𝝅) be the
three vectors output of PVSS.Share. Next, 𝐿 reliably broadcast
𝒗∥𝒄∥𝝅 using our RBC protocol. During the RBC protocol, the pred-
icate 𝑃(·) checks whether PVSS.Verify(𝒗, 𝒄, 𝝅) returns true.
During the reconstruction phase, each node decrypts its share
using its secret key and generates a non-interactive zero-knowledge
proof of correct decryption using the dleq.Prove algorithm. Let ˜𝑠𝑖
and ˜𝜋𝑖 be the decrypted share and its correctness proof of node 𝑖,