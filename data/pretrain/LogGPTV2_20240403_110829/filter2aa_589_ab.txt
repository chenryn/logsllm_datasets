connection string. If the connection string has two parameters which key is "Data 
Source", the value used will be the one of the last of the two pairs, which allows the 
following CSPP attack vectors: 
2.3.1   CSPP Attack 1: Hash stealing 
An attacker can place a Rogue Microsoft SQL Server connected to the Internet with a 
Microsoft SQL Server credential sniffer listening (In this exsmple CAIN [6] has been 
used). An attacker would perform a CSPP attack as follows: 
User_Value:   ; Data Source = Rogue_Server 
Password_Value:  ; Integrated Security = true 
Resulting in the following connecting string: 
Data source = SQL2005; initial catalog = db1; 
integrated security=no; user id=;Data Source=Rogue 
Server; Password=; Integrated Security=true; 
The "Data Source" and "Integrated Security" parameters are being overridden so 
that the Microsoft SQL Server native drivers will use the last set of values ignoring 
the previous ones, and the application will try to connect to Rogue_Server with the 
Windows credentials it's running on, which can be either a system user or an 
application pool user. 
2.3.1.1   Example 1: ASP.NET Enterprise Manager 
This tool is an abandoned and unsupported Open Source tool, but still being used by 
some hosting companies and some organizations to manage Microsoft SQL Server 
databases via a web interface. The official web site, which used to be 
aspnetenterprisemanager.com, is today abandoned, but the tool can be obtained from 
several other web sites like SourceForge [7] or MyOpenSource [8]. This tool is being 
recommended in a lot of forums as a good ASP.NET alternative to PHPMyAdmin [9], 
even though the last version was published on the 3rd of January of 2003. 
Fig. 3. CSPP in ASP.NET Enterprise Manager to steal the account information 
The results are collected on the rogue server where the database connection sniffer 
has been installed giving access to the LM Hash of the account. 
Fig. 4. Hash collected in the rogue server with Cain 
2.3.2   CSPP Attack 2: Port scanning 
One of the valid parameters on a connection string is the port to connect to. An 
attacker can abuse an application vulnerable to this technique to network scan servers 
by trying to connect to different ports and see the error messages obtained: 
User_Value:    ; Data Source =Target_Server, 
Target_Port 
Password_Value:   ; Integrated Security = true 
This injection attack will result in the following connection string: 
Data source = SQL2005; initial catalog = db1; 
integrated security=no; user id=;Data Source=Target 
Server, Target Port; Password=; Integrated 
Security=true; 
This connection string will ignore the first instance of the first "Data Source" 
parameter and will use the last one, meaning that the web application is going to try to 
connect to "Target Port" port on the "Target Server" machine. Observing the 
differences in the returned error messages, a port scan can be performed. 
2.3.2.1   Example 2: myLittleAdmin and myLittleBackup 
The tools myLittleAdmin [10] and myLittleBackup [11] are commercial tools 
developed by myLittleTools [12]. Both tools are vulnerable to CSPP attacks up to 
versions myLittleAdmin 3.5 and myLittleBackup 1.6. 
Fig. 5. A connection can be established through port 80 to www.gooogle.com 
As shown in Fig. 5, when the port is listening (open) the error message obtained says 
that no Microsoft SQL Server is listening on it, but a TCP connection was established. 
Fig. 6. A connection cannot be established through the XX port to www.google.com 
When the port is closed, a TCP connection could not be completed and the error 
message is different. Using these error messages a complete TCP port scan can be run 
against a server. Of course, this technique can also be used to discover internal servers 
within the DMZ where the web application is hosted. 
2.3.3   CSPP Attack 3: Hijacking Web credentials 
This time the attacker tries to connect to the database by using the web application 
system account instead of a user provided set of credentials: 
User_Value:   ; Data Source =Target_Server 
Password_Value:  ; Integrated Security = true 
These injected values will result in the following connection string: 
Data source = SQL2005; initial catalog = db1; 
integrated security=no; user id=;Data Source=Target 
Server, Target Port; Password=; Integrated 
Security=true; 
This time is the "integrated security" parameter what is being overwritten with a 
"True" value. This means that the system will try to connect to the database with the 
system account which the tool is running with. In this case this is the system account 
used by the web application in the web server. 
2.3.3.1   Example 3: SQL Server Web Data Administrator 
This tool is a project, originally developed by Microsoft, which was made free as an 
Open Project. Today, it is still possible to download the last version that Microsoft 
released on 2004 from Microsoft Servers [13] but the latest one, released on 2007, is 
hosted in the Codeplex web site [14]. The version hosted in Codeplex is secure to this 
type of attacks because it is using the ConnectionStringBuilder classes to dynamically 
construct the connection string. 
The version published on the Microsoft web site is vulnerable to CSPP attacks. The 
following screenshots show how it is possible to get access to the system using this 
type of attack. 
Fig. 7. Exploiting the credentials at the WEB Data Administrator 
In Fig. 7, the password value is: “; integrated Security=true”, as described 
previously. 
Fig. 8. Console access with the server account 
The attacker can log into the web application to manage the whole system. As 
shown in Fig. 9, this is because all users and network services have access to the 
server. 
Fig. 9. System account access grant. 
2.3.3.2   Example 4: myLittleAdmin and myLittleBackup 
In mylittleAdmin and myLittlebackup tools, it is possible to check out the connection 
string used to get the access. Looking at it, the parameter pollution injected in order to 
obtain access to the system can be clearly seen. 
Fig. 10. CSPP in myLittleAdmin. 
Fig. 10 shows how the "Data Source" parameter, after the "User ID" parameter, has 
been injected with the localhost value. This parameter, "Data Source", is also the first 
one of the connection string. Their values are different but the one that is being used 
is the last one, i.e. the injected one. 
Same happens with the "Integrated Security" parameter that appears initially with 
the no value but then is overriden by the one injected in the password value with 
value yes, resulting in a total access to the server with the system account the web 
application is running as. 
Fig. 11. Querying the master..sysusers table. 
2.3.3.3   Example 5: ASP.NET Enterprise Manager 
The same attack also works on the latest public version of the ASP.NET Enterprise 
manager, so, as can be seen in the following login form, an attacker can perform the 
CSPP injection to get access to the web application. 
Fig. 12. CSPP in ASP.NET Enterprise Manager login form. 
And as a result of it, full access can be obtained, just as can be seen in the 
following screenshot. 
Fig. 13. Administration console in ASP.NET Enterprise Manager. 
3   Conclusions 
All these examples show the importance of filtering any user input in web 
applications. Moreover, these examples are a clear proof of the importance of 
maintaining the software updated. Microsoft released ConnectionStringbuilder in 
order to avoid these kinds of attacks, but not all projects were updated to use these 
new and secure components. 
These techniques also apply to other database engines such as Oracle databases, 
which allow administrators to set up Integrated security into the database. Besides, in 
Oracle connection strings it is possible to change the way a user gets connected by 
forcing the use of a sysdba session.  
MySQL databases do not allow administrators to configure an Integrated Security 
authentication process. However, it is still possible to inject code and manipulate 
connection strings to try to connect against internal servers not exposed to the 
Internet. 
In order to avoid these attacks the semicolon character must be filtered out, all the 
parameters sanitized, and the firewall be hardened in order to filter not only inbound 
connections but also prevent outbound connections from internal servers that are 
sending NTLM credentials to the internet. Databases administrator should also apply 
a hardening process in the database engine to restrict access by a minimum privilege 
policy. 
References 
1. The Open Web Application Security Project, http://www.owasp.org 
2. Connection Strings.com: http://www.connectionstrings.com 
3. Ryan, W.: Using the SqlConnectionStringBuilder to guard against Connection String 
Injection Attacks, http://msmvps.com/blogs/williamryan/archive/2006/01/15/81115.aspx 
4. Connection String Builder (ADO.NET),  
http://msdn.microsoft.com/en-us/library/ms254947.aspx 
5. Carettoni L., di Paola S.: HTTP Parameter Pollution,  
http://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf  
6. Cain: http://www.oxid.it/cain.html 
7. ASP.NET Enterprise Manager in SourceForge, http://sourceforge.net/projects/asp-ent-man/ 
8. ASP.NET Enterprise Manager in MyOpenSource:  
http://www.myopensource.org/internet/asp.net+enterprise+manager/download-review 
9. PHPMyAdmin: http://www.phpmyadmin.net/ 
10.  myLittleAdmin: http://www.mylittleadmin.com 
11.  myLittleBackup: http://www.mylittlebackup.com 
12.  myLittleTools: http://www.mylittletools.net 
13.  Microsoft SQL Server Web Data Administrator:  
http://www.microsoft.com/downloads/details.aspx?FamilyID=c039a798-c57a-419e-acbc-
2a332cb7f959&displaylang=en 
14.  Microsoft SQL Server Web Data Administrator in Codeplex project:  
http://www.codeplex.com/SqlWebAdmin