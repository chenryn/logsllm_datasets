title:SAQL: A Stream-based Query System for Real-Time Abnormal System
Behavior Detection
author:Peng Gao and
Xusheng Xiao and
Ding Li and
Zhichun Li and
Kangkook Jee and
Zhenyu Wu and
Chung Hwan Kim and
Sanjeev R. Kulkarni and
Prateek Mittal
Saql: A Stream-based Query System for Real-Time 
Abnormal System Behavior Detection
Peng Gao, Princeton University; Xusheng Xiao, Case Western Reserve University;  
Ding Li, Zhichun Li, Kangkook Jee, Zhenyu Wu, and Chung Hwan Kim, NEC Laboratories 
America, Inc.; Sanjeev R. Kulkarni and Prateek Mittal, Princeton University
https://www.usenix.org/conference/usenixsecurity18/presentation/gao-peng
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.SAQL: A Stream-based Query System for Real-Time Abnormal System
Behavior Detection
Peng Gao1
Zhenyu Wu3
Xusheng Xiao2
Chung Hwan Kim3
Ding Li3
Zhichun Li3
Sanjeev R. Kulkarni1
Kangkook Jee3
Prateek Mittal1
1Princeton University 2Case Western Reserve University 3NEC Laboratories America, Inc.
1{pgao,kulkarni,pmittal}@princeton.edu PI:EMAIL 3{dingli,zhichun,kjee,adamwu,chungkim}@nec-labs.com
Abstract
Recently, advanced cyber attacks, which consist of a se-
quence of steps that involve many vulnerabilities and
hosts, compromise the security of many well-protected
businesses. This has led to the solutions that ubiquitously
monitor system activities in each host (big data) as a se-
ries of events, and search for anomalies (abnormal be-
haviors) for triaging risky events. Since ﬁghting against
these attacks is a time-critical mission to prevent further
damage, these solutions face challenges in incorporating
expert knowledge to perform timely anomaly detection
over the large-scale provenance data.
To address these challenges, we propose a novel
stream-based query system that takes as input, a real-
time event feed aggregated from multiple hosts in an
enterprise, and provides an anomaly query engine that
queries the event feed to identify abnormal behaviors
based on the speciﬁed anomalies. To facilitate the
task of expressing anomalies based on expert knowl-
edge, our system provides a domain-speciﬁc query lan-
guage, SAQL, which allows analysts to express mod-
els for (1) rule-based anomalies, (2) time-series anoma-
lies, (3) invariant-based anomalies, and (4) outlier-based
anomalies. We deployed our system in NEC Labs Amer-
ica comprising 150 hosts and evaluated it using 1.1TB
of real system monitoring data (containing 3.3 billion
events). Our evaluations on a broad set of attack behav-
iors and micro-benchmarks show that our system has a
low detection latency (<2s) and a high system through-
put (110,000 events/s; supporting ∼4000 hosts), and is
more efﬁcient in memory utilization than the existing
stream-based complex event processing systems.
1
Introduction
Advanced cyber attacks and data breaches plague even
the most protected companies [9, 16, 14, 23, 11]. The re-
cent massive Equifax data breach [11] has exposed the
sensitive personal information of 143 million US cus-
tomers. Similar attacks, especially in the form of ad-
vanced persistent threats (APT), are being commonly
observed. These attacks consist of a sequence of steps
across many hosts that exploit different types of vulnera-
bilities to compromise security [25, 2, 1].
To counter these attacks, approaches based on ubiq-
uitous system monitoring have emerged as an impor-
tant solution for actively searching for possible anoma-
lies, then to quickly triage the possible signiﬁcant risky
events [63, 64, 52, 40, 62, 74, 73, 68]. System monitoring
observes system calls at the kernel level to collect infor-
mation about system activities. The collected data from
system monitoring facilitates the detection of abnormal
system behaviors [39, 66].
However, these approaches face challenges in detect-
ing multiple types of anomalies using system monitor-
ing data. First, ﬁghting against attacks such as APTs
is a time-critical mission. As such, we need a real-
time anomaly detection tool to search for a “needle in a
haystack” for preventing additional damage and for sys-
tem recovery. Second, models derived from data have
been increasingly used in detecting various types of risky
events [66]. For example, system administrators, secu-
rity analysts and data scientists have extensive domain
knowledge about the enterprise, including expected sys-
tem behaviors. A key problem is how we can provide
a real-time tool to detect anomalies while incorporating
the knowledge from system administrators, security ana-
lysts and data scientists? Third, system monitoring pro-
duces huge amount of daily logs (∼50GB for 100 hosts
per day) [69, 88]. This requires efﬁcient real-time data
analytics on the large-scale provenance data.
Unfortunately, none of the existing stream-based
query systems and anomaly detection systems [91, 51,
59, 68] provide a comprehensive solution that addresses
all these three challenges. These systems focus on spe-
ciﬁc anomalies and are optimized for general purpose
data streams, providing limited support for users to spec-
USENIX Association
27th USENIX Security Symposium    639
Figure 1: Major types of abnormal system behaviors (e1, . . . ,en are shown in ascending temporal order.)
ify anomaly models by incorporating domain knowledge
from experts.
Contributions: We design and build a novel stream-
based real-time query system. Our system takes as in-
put a real-time event feed aggregated from multiple hosts
in an enterprise, and provides an anomaly query engine.
The query engine provides a novel interface for users to
submit anomaly queries using our domain-speciﬁc lan-
guage, and checks the events against the queries to detect
anomalies in real-time.
Language: To facilitate the task of expressing anoma-
lies based on domain knowledge of experts, our sys-
tem provides a domain-speciﬁc query language, Stream-
based Anomaly Query Language (SAQL). SAQL pro-
vides (1) the syntax of event patterns to ease the task of
specifying relevant system activities and their relation-
ships, which facilitates the speciﬁcation of rule-based
anomalies; (2) the constructs for sliding windows and
stateful computation that allow stateful anomaly mod-
els to be computed in each sliding window over the data
stream, which facilitates the speciﬁcation of time-series
anomalies, invariant-based anomalies, and outlier-based
anomalies (more details in Section 2.2). The speciﬁed
models in SAQL are checked using continuous queries
over unbounded streams of system monitoring data [51],
which report the detected anomalies continuously.
Rule-based anomalies allow system experts to spec-
ify rules to detect known attack behaviors or enforce
enterprise-wide security policies. Figure 1 shows an
example rule-based anomaly, where a process (cat) ac-
cesses multiple command log ﬁles in a relatively short
time period, indicating an external user trying to probe
the useful commands issued by the legitimate users. To
express such behavior, SAQL uses event patterns to ex-
press each activity in the format of {subject-operation-
object} (e.g., proc p1 write file f1), where system en-
tities are represented as subjects (proc p1) and objects
(file f1), and interactions are represented as operations
initiated by subjects and targeted on objects.
Stateful computation in sliding windows over a data
stream enables the speciﬁcation of stateful behavior
models for detecting abnormal system behaviors such
as time-series anomalies, which lack support from ex-
isting stream query systems that focus on general data
streams [91, 59, 30, 42]. Figure 1 shows a time-series
anomaly, where a process (sqlservr.exe) transfers ab-
normally large amount of data starting from e2. To fa-
cilitate the detection of such anomalies, SAQL provides
constructs for sliding windows that break the continu-
ous data stream into fragments with common aggrega-
tion functions (e.g., count, sum, avg). Additionally, SAQL
provides constructs to deﬁne states in sliding windows
and allow accesses to the states of past windows. These
constructs facilitate the comparison with historical states
and the computation of moving averages such as three-
period simple moving average (SMA) [55].
Built upon the states of sliding windows, SAQL
provides high-level constructs to facilitate the speciﬁ-
cation of invariant-based and outlier-based anomalies.
Invariant-based anomalies capture the invariants during
training periods as models, and use the models later to
detect anomalies. Figure 1 shows an invariant-based
anomaly, where a process (apache.exe) starts an abnor-
mal process (java.exe) that is unseen during the train-
ing period. SAQL provides constructs to deﬁne and learn
the invariants of system behaviors in each state computed
from a window, which allow users to combine both states
of windows and invariants learned under normal opera-
tions to detect more types of abnormal system behaviors.
Outlier-based anomalies allow users to identify abnor-
mal system behavior through peer comparison, e.g., ﬁnd-
ing outlier processes by comparing the abnormal pro-
cesses with other peer processes. Figure 1 shows an
outlier-based anomaly, where a process (sqlservr.exe)
transfers abnormally larger amount of data to an IP ad-
dress than other IP addresses. SAQL provides constructs
to deﬁne which information of a state in a sliding window
forms a point and compute clusters to identify outliers.
The ﬂexibility and extensibility introduced by SAQL al-
lows users to use various clustering algorithms for differ-
ent deployed environments.
Execution Engine: We build the query engine on top
of Siddhi [20] to leverage its mature stream management
engine. Based on the input SAQL queries, our system
synthesizes Siddhi queries to match data from the stream,
640    27th USENIX Security Symposium
USENIX Association
catRule-based Anomaly.bash_historyOutlier-based Anomalysqlservr.exexxx.129… …xxx.122xxx.128e1: Reade2:Reade3: Writeen: Writee1: Writee2: WriteInvariant-based Anomalyapache.exee1: Starte2: Startcmd.exehttpd.exeapache.exee3: Starte4: Startcmd.exejava.exesqlservr.exeTime-Series Anomalye1:Write (amt: 100)external IPe2:Write (amt: 1000)e3:Write (amt: 1200)e4:Write (amt: 1400)InvariantDetectione3: Read.vim_info.mysql_historyand performs stateful computation and anomaly model
construction to detect anomalies over the stream. One
major challenge faced by this design is the scalability in
handling multiple concurrent anomaly queries over the
large-scale system monitoring data. Typically, different
queries may access different attributes of the data using
different sliding windows. To accommodate these needs,
the scheme employed by the existing systems, such as
Siddhi, Esper, and Flink [20, 12, 4], is to make copies
of the stream data and feed the copies to each query, al-
lowing each query to operate separately. However, such
scheme is not efﬁcient in handling the big data collected
from system monitoring.
To address this challenge, we devise a master-
dependent-query scheme that
identiﬁes compatible
queries and groups them to use a single copy of the
stream data to minimize the data copies. Our system ﬁrst
analyzes the submitted queries with respect to the tempo-
ral dimension in terms of their sliding windows and the
spatial dimension in terms of host machines and event
attributes. Based on the analysis results, our system puts
the compatible queries into groups, where in each group,
a master query will directly access the stream data and
the other dependent queries will leverage the interme-
diate execution results of the master query. Note that
such optimization leverages both the characteristics of
the spatio-temporal properties of system monitoring data
and the semantics of SAQL queries, which would not be
possible for the queries in general stream-based query
systems [20, 12, 51, 4].
Deployment and Evaluation: We built the whole SAQL
system (around 50,000 lines of Java code) based on the
existing system-level monitoring tools (i.e., auditd [15]
and ETW [13]) and the existing stream management sys-
tem (i.e., Siddhi [20]). We deployed the system in NEC
Labs America comprising 150 hosts. We performed a
broad set of attack behaviors in the deployed environ-
ment, and evaluated the system using 1.1TB of real sys-
tem monitoring data (containing 3.3 billion events): (1)
our case study on four major types of attack behaviors
(17 SAQL queries) shows that our SAQL system has a
low alert detection latency (<2s); (2) our pressure test
shows that our SAQL system has a high system through-
put (110000 events/s) for a single representative rule-
based query that monitors ﬁle accesses, and can scale to
∼4000 hosts on the deployed server; (3) our performance
evaluation using 64 micro-benchmark queries shows that
our SAQL system is able to efﬁciently handle concur-
rent query execution and achieves more efﬁcient mem-
ory utilization compared to Siddhi, achieving 30% aver-
age saving. All the evaluation queries are available on
our project website [19].
Table 1: Representative attributes of system entities
Entity
File
Process
Network Connection
2 Background and Examples
Attributes
Name, Owner/Group, VolumeID, DataID, etc.
PID, Name, User, Cmd, Binary Signature, etc.
IP, Port, Protocol
In this section, we ﬁrst present the background on sys-
tem monitoring and then show SAQL queries to demon-
strate the major types of anomaly models supported by
our system. The point is not to assess the quality of these
models, but to provide examples of language constructs
that are essential in specifying anomaly models, which
lack good support from existing query tools.
2.1 System Monitoring
System monitoring data represents various system activi-
ties in the form of events along with time [63, 64, 52, 60].
Each event can naturally be described as a system entity
(subject) performing some operation on another system
entity (object). For example, a process reads a ﬁle or a
process accesses a network connection. An APT attack
needs multiple steps to succeed, such as target discov-
ery and data exﬁltration, as illustrated in the cyber kill
chain [28]. Therefore, multiple attack footprints might
be left as “dots”, which can be captured precisely by sys-
tem monitoring.
System monitoring data records system audit events
about the system calls that are crucial in security anal-
ysis [63, 64, 52, 60]. The monitored system calls are
mapped to three major types of system events: (1) pro-
cess creation and destruction, (2) ﬁle access, and (3) net-
work access. Existing work has shown that on main-
stream operating systems (Windows, Linux and OS X),
system entities in most cases are ﬁles, network connec-
tions and processes [63, 64, 52, 60]. In this work, we
consider system entities as ﬁles, processes, and network
connections in our data model. We deﬁne an interaction
among entities as an event, which is represented using the
triple (cid:104)subject, operation, object(cid:105). We categorize events
into three types according to the type of their object enti-
ties, namely ﬁle events, process events, and network con-