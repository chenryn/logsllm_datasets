# []{#configuring-kernel-parameters-at-runtime_managing-monitoring-and-updating-the-kernel.html#using-configuration-files-in-etc-sysctl-d-to-adjust-kernel-parameters_configuring-kernel-parameters-at-runtime}使用 /etc/sysctl.d/ 中的配置文件调整内核参数 {.title}
:::
下面的步骤描述了如何手动修改 `/etc/sysctl.d/`{.literal}
目录中的配置文件来永久设置内核参数。
::: itemizedlist
**先决条件**
-   根权限
:::
::: orderedlist
**步骤**
1.  在 `/etc/sysctl.d/`{.literal} 中创建新配置文件：
    ``` literallayout
    # vim /etc/sysctl.d/
    ```
2.  包括内核参数，一行一个，如下所示：
    ``` literallayout
    .=
    .=
    ```
3.  保存配置文件。
4.  重启机器以使更改生效。
    ::: itemizedlist
    -   或者，要在不重启的情况下应用更改，请执行：
        ``` literallayout
        # sysctl -p /etc/sysctl.d/
        ```
        该命令允许您从之前创建的配置文件中读取值。
    :::
:::
::: itemizedlist
**其他资源**
-   `sysctl(8)`{.literal}, `sysctl.d(5)`{.literal} manual pages
:::
:::
::: section
::: titlepage
# []{#configuring-kernel-parameters-at-runtime_managing-monitoring-and-updating-the-kernel.html#configuring-kernel-parameters-temporarily-through-proc-sys_configuring-kernel-parameters-at-runtime}通过 /proc/sys/ 临时配置内核参数 {.title}
:::
下面的步骤描述了如何通过虚拟文件系统 `/proc/sys/`{.literal}
目录中的文件临时设置内核参数。
::: itemizedlist
**先决条件**
-   根权限
:::
::: orderedlist
**步骤**
1.  识别您要配置的内核参数：
    ``` literallayout
    # ls -l /proc/sys//
    ```
    命令返回的可写入文件可以用来配置内核。具有只读权限的文件提供了对当前设置的反馈。
2.  为 kernel 参数分配目标值：
    ``` literallayout
    # echo  > /proc/sys//
    ```
    命令进行配置更改，这些更改将在系统重启后消失。
3.  另外，还可验证新设置内核参数的值：
    ``` literallayout
    # cat /proc/sys//
    ```
:::
::: itemizedlist
**其他资源**
-   [使用 sysctl
    永久配置内核参数](#configuring-kernel-parameters-at-runtime_managing-monitoring-and-updating-the-kernel.html#configuring-kernel-parameters-permanently-with-sysctl_configuring-kernel-parameters-at-runtime "使用 sysctl 永久配置内核参数"){.link}
-   [使用 /etc/sysctl.d/
    中的配置文件调整内核参数](#configuring-kernel-parameters-at-runtime_managing-monitoring-and-updating-the-kernel.html#using-configuration-files-in-etc-sysctl-d-to-adjust-kernel-parameters_configuring-kernel-parameters-at-runtime "使用 /etc/sysctl.d/ 中的配置文件调整内核参数"){.link}
:::
:::
:::
[]{#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel}第 7 章 在虚拟环境中保留内核 panic 参数 {.title}
:::
当在 RHEL 9 中配置虚拟化环境时，不应启用 `softlockup_panic`{.literal} 和
`nmi_watchdog`{.literal}
内核参数，因为虚拟化环境可能会触发一个假的软锁定，它并不需要系统 panic。
以下小节通过总结来解释这个建议后的原因：
::: itemizedlist
-   什么会导致软锁定。
-   描述控制软锁定中系统行为的内核参数。
-   解释如何在虚拟环境中触发软锁定。
:::
::: section
::: titlepage
# []{#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html#what-is-a-soft-lockup_keeping-kernel-panic-parameters-disabled-in-virtualized-environments}什么是软锁定 {.title}
:::
当任务在不重新调度的情况下在 CPU
上的内核空间中执行时，软锁定通常是由程序错误造成的。该任务也不允许任何其他任务在特定
CPU
上执行。因此，用户通过系统控制台会显示警告信息。这个问题也被称为软锁定触发。
::: itemizedlist
**其他资源**
-   [*[[什么是 CPU
    软锁定？](https://access.redhat.com/articles/371803){.link}
    ]{.citetitle}*]{.emphasis}
:::
:::
::: section
::: titlepage
# []{#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html#parameters-controlling-kernel-panic_keeping-kernel-panic-parameters-disabled-in-virtualized-environments}控制内核 panic 的参数 {.title}
:::
可设置以下内核参数来控制当检测到软锁定时的系统行为。
::: variablelist
[softlockup_panic]{.term}
:   控制当检测到软锁定时内核是否 panic。
    ::: informaltable
      类型   Value   效果
      ------ ------- ------------------------
      整数   0       内核在软锁定时不 panic
      整数   1       软锁定中的内核 panics
    :::
    默认情况下，在 RHEL8 上，这个值为 0。
    为了 panic，系统需要首先检测一个硬锁定。检测由
    `nmi_watchdog`{.literal} 参数控制。
[nmi_watchdog]{.term}
:   控制锁定检测机制 (`watchdogs`{.literal})
    是否处于活动状态。这个参数是整数类型。
    ::: informaltable
      Value   效果
      ------- ----------------
      0       禁用锁定检测器
      1       启用锁定检测器
    :::
    硬锁定检测器会监控每个 CPU 是否有响应中断的能力。
[watchdog_thresh]{.term}
:   控制 watchdog `hrtimer`{.literal}、NMI 事件和软/硬锁定阈值的频率。
    ::: informaltable
      默认阈值   软锁定阈值
      ---------- ----------------------------------
      10 秒      2 \* `watchdog_thresh`{.literal}
    :::
    将此参数设置为 0 可禁用锁定检测。
:::
::: itemizedlist
**其他资源**
-   [*[[软锁定检测器和硬锁定检测器](https://www.kernel.org/doc/Documentation/lockup-watchdogs.txt){.link}]{.citetitle}*]{.emphasis}
-   [*[[内核
    sysctl](https://www.kernel.org/doc/Documentation/sysctl/kernel.txt){.link}]{.citetitle}*]{.emphasis}
:::
:::
::: section
::: titlepage
# []{#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html#spurious-soft-lockups-in-virtualized-environments_keeping-kernel-panic-parameters-disabled-in-virtualized-environments}在虚拟环境中有伪装的软锁定 {.title}
:::
软锁定在物理主机上触发，如[什么是软锁定](#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html#what-is-a-soft-lockup_keeping-kernel-panic-parameters-disabled-in-virtualized-environments "什么是软锁定"){.link}中所述，这通常代表内核或硬件漏洞。在虚拟环境中的客户端操作系统中会出现同样的问题。
主机的高工作负载或者某些特定资源（如内存）的高竞争，通常会导致错误的软锁定触发。这是因为主机可能会调度出客户端
CPU 的时间超过 20 秒。然后，当客户机 CPU
再次被调度到在主机上运行时，它会遇到一个[*时间跳转（time
jump）*]{.emphasis}，这会触发到时计时器。计时器还包括 watchdog
`hrtimer`{.literal}，因此可以在客户机 CPU 上报告软锁定。
因为虚拟化环境中的软锁定可能是假的，所以您不应该启用在客户端 CPU
上报告软锁定时导致系统 panic 的内核参数。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
若要了解客户机中的软锁定，必须了解，主机会作为一个任务调度客户机，客户机然后会调度自己的任务。
:::
::: itemizedlist
**其他资源**
-   [什么是软锁定](#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html#what-is-a-soft-lockup_keeping-kernel-panic-parameters-disabled-in-virtualized-environments "什么是软锁定"){.link}
-   [*[[虚拟机组件及与它们进行的交互](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_and_managing_virtualization/index#rhel-virtual-machine-components-and-their-interaction_introducing-virtualization-in-rhel){.link}]{.citetitle}*]{.emphasis}
-   [*[[虚拟机报告了\"BUG：软锁定\"](https://access.redhat.com/solutions/1503333){.link}]{.citetitle}*]{.emphasis}
:::
:::
:::
[]{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel}第 8 章 为数据库服务器调整内核参数 {.title}
:::
有一组不同的内核参数可能会影响特定数据库应用程序的性能。以下小节解释了要配置什么内核参数来确保数据库服务器和数据库的高效操作。
::: section
::: titlepage
# []{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html#introduction-to-databases_adjusting-kernel-parameters-for-database-servers}介绍 {.title}
:::
数据库服务器是一种提供数据库管理系统(DBMS)功能的服务。DBMS
为数据库管理提供工具，并与最终用户、应用程序和数据库进行交互。
Red Hat Enterprise Linux 9 提供以下数据库管理系统：
::: itemizedlist
-   [**MariaDB 10.5**]{.strong}
-   [**MySQL 8.0**]{.strong}
-   [**PostgreSQL 13**]{.strong}
-   [**Redis 6**]{.strong}
:::
:::
::: section
::: titlepage
# []{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html#parameters-affecting-performance-of-database-applications_adjusting-kernel-parameters-for-database-servers}影响数据库应用程序性能的参数 {.title}
:::
以下内核参数会影响数据库应用程序的性能。
::: variablelist
[fs.aio-max-nr]{.term}
:   定义系统可在服务器中处理的异步 I/O 操作的最大数目。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    增加 `fs.aio-max-nr`{.literal} 参数不会在增加 aio
    限制外产生任何变化。
    :::
[fs.file-max]{.term}
:   定义系统在任何实例上支持的最大文件句柄数（临时文件名或者分配给打开文件的
    ID）。
    内核会在应用程序请求文件句柄时动态分配文件。但是，当应用程序发布这些文件时，内核不会释放这些文件句柄。相反,内核会回收这些文件的句柄。这意味着，分配的文件句柄总数将随着时间增加，即使当前使用的文件句柄的数量可能较低。