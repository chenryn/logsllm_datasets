# Title: APEX: Extending Android Permission Model and Enforcement with User-Defined Runtime Constraints

## Authors
- Mohammad Nauman, Institute of Management Sciences, Pakistan (Email: [PI:EMAIL])
- Sohail Khan, School of Electrical Engineering and Computer Science, NUST, Pakistan (Email: [PI:EMAIL])
- Xinwen Zhang, Samsung Information Systems America, USA (Email: [PI:EMAIL])

## Abstract
Android is the first mass-produced, consumer-market open-source mobile platform that enables developers to create applications and users to install them easily. However, this flexibility introduces significant security concerns. The current Android security mechanism allows users to see which resources an application requires but forces them to grant all requested permissions if they wish to use the application. There is no option to selectively grant or deny specific permissions, nor to impose runtime constraints on resource usage, such as based on the device's location or the number of times a resource has been used.

In this paper, we introduce APEX, a policy enforcement framework for Android that allows users to selectively grant permissions and impose runtime constraints on resource usage. We also present an extended package installer that provides an easy-to-use interface for setting these constraints. Our framework is implemented with minimal changes to the existing Android codebase and is backward compatible with the current security mechanism.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access Controls

## General Terms
Security

## Keywords
Mobile platforms, Android, Policy Framework, Constraints

## 1. Introduction
Android is one of the most popular open-source and fully customizable software stacks for mobile devices, introduced by Google. It includes an operating system, system utilities, middleware in the form of a virtual machine, and a set of core applications such as a web browser, dialer, and calculator. Third-party developers can submit their applications to the Android Market, where users can download and install them. While this provides a high level of availability of unique and specialized applications, it also raises serious security concerns.

When a user installs an application, they must trust that the application will not misuse their phone's resources. At installation time, Android presents a list of permissions requested by the application, which must be granted for the installation to proceed. This is an all-or-nothing decision, where the user either grants all permissions or cannot install the application. Furthermore, once permissions are granted, there is no way to revoke them or impose constraints on how, when, and under what conditions these permissions can be used.

Consider a weather update application that reads the user's location to provide timely updates. In Android, the application must request permission to read location information at installation time. If the user grants this permission, the application has access to the exact location, even though such precision is not necessary for weather updates. If the user denies the permission, the application cannot be installed, leaving the user without a choice to protect their privacy while using the application.

To address these issues, we have developed the Android Permission Extension (APEX) framework, a comprehensive policy enforcement mechanism for the Android platform. APEX allows users to restrict the usage of phone resources by different applications, granting some permissions and denying others. Users can also impose runtime constraints on resource usage, such as limiting the number of SMS messages sent each day. We define the semantics of APEX and the policy model used to describe these constraints. Additionally, we describe an extended package installer that enables end-users to specify their constraints without needing to learn a policy language. Both APEX and the extended installer are implemented with minimal, backward-compatible changes to the existing Android architecture and codebase for better community acceptance.

## 2. Background

### 2.1 Android Architecture
The Android architecture is composed of several layers: the application layer, the application framework layer, the Android runtime, and system libraries. Applications consist of one or more components, including activities, services, broadcast receivers, and content providers. Activities provide a visible interface, services handle background processing, broadcast receivers respond to broadcast messages, and content providers enable data storage and retrieval in various types of data stores.

Components within and across applications communicate using Intents, which are abstract representations of actions to be performed. Intents can be explicit (sent to a specific component) or implicit (broadcast to the Android framework). Both types share the same permission mechanism, and for clarity, we focus on implicit intents in this paper.

### 2.2 Motivating Example
To demonstrate the limitations of the existing Android security framework, we created a set of four example applications, representative of many available in the Android Market. One such application, Ringlet, performs various tasks using low-level components like GPRS, MMS, and GPS. It accesses three other applications, each gathering data from a different social network (Facebook, Twitter, and Flickr). On receiving username/password pairs, Ringlet passes them to the respective back-end services, which connect the user to the networks and extract updates to content provider datastores on the phone. The front-end GUI displays these updates and allows the user to reply or forward messages via SMS or MMS.

Several applications similar to Ringlet are available on the Android Market, requiring multiple permissions such as sending SMS and accessing the user's location. If a user downloads multiple applications and grants all requested permissions, there is no way to ensure that none of the applications will misuse these permissions.

In summary, there are four main issues:
1. The user must grant all permissions to install an application.
2. There is no way to restrict the extent to which an application may use the granted permissions.
3. Permissions are based on singular, install-time checks, making it impossible to restrict resource access based on dynamic constraints like location or time.
4. The only way to revoke permissions is to uninstall the application.

We address these issues by enhancing the existing Android security architecture to enable users to restrict the usage of both newly installed and previously installed applications. In the following section, we formally describe a policy model for this purpose and detail its integration into the existing Android security mechanism.

## 3. Android Usage Policies

### 3.1 Logical Model of Existing Android Security Mechanism
The existing Android security mechanism focuses on the semantics of Inter-Component Communication (ICC). The model covers the semantics of intents, intent filters, and the permission logic for granting or denying access to resources.

### 3.2 Policy Model for Dynamic Constraints
In traditional access control models, policies revolve around subjects, objects, and rights. In system-level permission models, policies are based on processes, users, resources, and rights. Android’s security framework differs slightly in that it differentiates between the different modules of a single application and typically involves only one user per device.

Each application consists of modular portions called components. An application \(a_1\) might be allowed access to one component of application \(a_2\) but not another. This allows an application to make parts of its functionality publicly available while keeping the rest protected. Therefore, the smallest unit in the Android security framework is the component.

**Definition 1: Applications and Components**
- The set of applications and components in Android are denoted by \(A\) and \(C\), respectively.
- A component association function \(\varsigma : C \rightarrow A\) associates each component with a unique application.

**Definition 2: Intent**
- An intent is a 4-tuple \((\alpha, \sigma, \gamma, \epsilon)\), where \(\alpha\) is an action string, \(\sigma\) is a data string, \(\gamma\) is a category string, and \(\epsilon : \text{name} \rightarrow \text{val}\) is a function mapping names of extra information to their values.
- The set of intents is denoted as \(I\).

**Definition 3: Intent Filter**
- An intent filter describes an application's willingness to serve an intent.
- Intent filters are associated with individual components of applications.
- An intent-filter association function \(A_f : C \rightarrow 2^F\) maps each component to a set of intent filters, where \(F\) is the set of intent filters and \(I \subseteq F\).

**Example 1:**
- The Flickr service exposes the action string `edu.apex.android.intents.fks_intent` in its intent filter, catching all intents matching this action string to start the Flickr service.

**Definition 4: Uses-Permissions**
- A `uses-permission` construct declares the permissions granted to the application by the user at install-time.
- Permissions are associated with applications rather than their individual components.
- The basic permission function \(\mu : A \rightarrow 2^P\) maps an application to the permissions it is granted, where \(A\) is the set of applications and \(P\) is the set of permissions.

By formalizing these definitions, we provide a clear and comprehensive model for extending the Android permission mechanism to incorporate user-defined dynamic constraints.