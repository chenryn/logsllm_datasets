the cryptographic scheme itself. However, by deﬁnition, the
probability of this occurring is guaranteed to be no more
than ǫ, and the third criterion would hold. The second pos-
sibility would be for the ECU to produce the key K erro-
neously. However, this violates our assumption that ade-
quate error correction is employed. Hence, this case cannot
occur.
The third case is for a later execution of the PUF to pro-
duce x0 as a result. That is, there must exist some j such
that the contents of Reg would be the sequence
x0, R1, R2, R3, . . . , Rj = x0
Recall that we assumed (m ≥ 1)
|Cj| = |Rj| = |R′
j| = |x0| = m ≥ ⌈− log2 ǫ⌉
Then the probability that any Rj = x0 would be 1/2m,
which gives us
P (Rj = x0) =
1
2m ≤
1
2⌈− log2 ǫ⌉ ≤
1
2log2 ǫ−1 =
1
ǫ−1 = ǫ
That is, the probability that any polling of the PUF will
produce an output that matches the seed x0 is less than the
security parameter ǫ. Hence, the third required property of
ROKs also holds. Thus, the PUF ROK architecture suc-
cessfully implements the ROK requirements under the ideal
PUF assumption.
4.4 Symmetric Key PUF ROKs
The functionality of the CC depends on the cryptographic
application. In the preceding discussion, we were focusing
on a symmetric key application, in essence. However, there
are a few more details regarding the operation of the CC
that we must address here.
As noted above, in symmetric key cryptographic applica-
tions, the PC issues the command Enc(m), where m indi-
cates the message to be encrypted. The CC then issues the
command Init(x0), which writes the value x0 into the Reg.
The PUF then uses x0 as C1 and generates R1, which is
passed to the ECU. The ECU then generates the necessary
error-correcting codes EC1 to ensure the key is later recov-
erable, even if the noisy output of the PUF produces a small
number of bit errors.
Next, to guarantee a strong key from R1, the CC applies
a cryptographic hash. That is, to generate a 256-bit AES
key, the CC computes K1 =H(R1), where H is the SHA-256
hash function. While an ideal PUF is assumed to produce
random mappings, we employ the hash function in this way
to add to the entropy of the system. That is, if Ri and
Rj (the responses produced by two diﬀerent PUF pollings)
diﬀer by only a single bit, H(Ri) and H(Rj) will have a
Hamming distance of 128 bits on average. As a result, even
if an attacker is able to recover the key just by observing
the plaintext and ciphertext, the hash prevents modeling
the PUF, as doing so would require the attack to create a
pre-image of the hash.
Once the CC has polled the PUF and generated the key,
the encrypted message e(m) is provided to the PC. Later,
when the recipient wishes to decrypt the message (which can
only be done once), the PC issues the command Dec(e(m))
to the CC. The CC then resets the Reg with Init(x0), and
polls the PUF to recreate the key. The decrypted message,
then, is returned to the PC.
For the sake of completeness, observe that we have never
detailed how x0 is determined. One approach, which de-
pends only on the device itself, would be to take the times-
tamp ts when the PC invokes the Init primitive, and uses
x0 = H(ts). In another approach, the PC could use a user’s
password, and hash it similarly. Thus, the seed value can be
determined in multiple ways.
4.5 Public Key PUF ROKs
Now consider the case of public key cryptography. In this
setting, we start with the assumption that the CC contains
the necessary parameters for the public key computations.
For instance, if the RSA cryptosystem is used, the CC knows
(or can create) the two large prime numbers p and q such
that n = pq.5 The goal, then, is to generate a pair (pk, sk),
where pk denotes a public key and sk denotes the corre-
sponding private key.
In contrast to the symmetric key approach, the CC does
not need to generate the ROK twice. As such, the Init(x0)
function is optional. However, the CC still polls the PUF to
generate the pair of keys. The challenge with using a PUF
to create a public key pair, though, is how to generate a bit
string that is long enough. A strong RSA key, for example, is
at least 2048 bits long. But creating a 2048-bit PUF output
would require a prohibitively large circuit design.
Instead, our approach is for the CC to buﬀer a series of
PUF results. For instance, if the PUF produces a 256-bit
output, the CC could use Ri as bits 0-255, Ri + 1 as bits
5Readers familiar with the properties of RSA will observe
that it is necessary for the CC to create and store the primes
p and q securely. Such functionality is common in existing
cryptographic processors, such as a TPM. Consequently, we
assume that the CC is designed to ensure the secrecy of p and
q is preserved, and omit further discussion of this matter.
255-511, and so forth. Once the CC has polled the PUF to
get a suﬃcient number of random bits, the next challenge is
to convert this bit string into a strong key. For simplicity,
we assume the use of RSA.
Let e denote the candidate key that the CC has received
from the PUF. In order to use e as an RSA key, e must be
coprime to φ(n) = (p1)(q1). By applying the Euclidean al-
gorithm, the CC can compute the greatest common divisor
g = gcd(e, φ(n)). If g = 1, e and φ(n) are coprime, and e can
be used as is. Otherwise, e′ = e/g can be used. The secret
key sk, then becomes e or e′ as appropriate. To compute the
public key pk, the CC computes the modular multiplicative
inverse of sk by using the extended Euclidean algorithm.
That is, the CC computes d such that sk · d ≡ 1 (mod φ(n)).
This value d then becomes the public key pk. Given this key
pair (pk, sk), the PUF ROK can be used by the PC in mul-
tiple ways. First, the PC could issue the command Sign(m)
to the CC, requesting a cryptographic signature. After gen-
erating (pk, sk), the CC uses sk to sign m, returning the
signature and the public key pk to PC. pk can then be used
by a third party to verify the signature.
Alternatively, the PC could issue the command Gen, which
tells the CC to generate the key pair. Instead of using the
keys immediately, the CC stores sk and returns pk to the
PC. A third party wishing to send an encrypted message to
the PC could use pk as needed. Then, the PC would issue
Dec(m) to have the CC decrypt the message. While this
violates the spirit of the ROK principle (as sk would need
stored somewhere), sk could simply be thrown away during
the Gen procedure. Later, when the decryption occurs, the
sk would be recreated, making the public key PUF ROK
work similarly to the symmetric key version.
Finally, consider the case where the third party needs as-
surance that the public key pk did, in fact, origin from the
PUF ROK. This can be accomplished if the CC contains a
persistent public key pair, similar to the Endorsement Key
(EK) stored in a Trusted Platform Module (TPM). In ad-
dition to providing the pk to the PC, the CC could also
return SignEK(pk), denoting the signature of the pk under
this persistent key. This technique provides the necessary
assurance, as the persistent key is bound to the CC. How-
ever, this requires a key management infrastructure similar
to existing TPM-based attestation schemes.
4.6 Practicality and Applications
One obvious objection to PUF ROKs is that they assume
shared access to the resource. In many instances, this as-
sumption does not hold. However, as we will describe in Sec-
tion 5, we have implemented a proof-of-concept PUF ROK
on a small portable device that measures 44×60 mm. Based
on this experience, we ﬁnd that it would be quite reasonable
to integrate PUF ROK functionality into devices similar to
USB thumb drives. Clearly, such a device could be passed
between users who are generally in close proximity.
For remote users, a more complicated structure would be
needed. Speciﬁcally, a PUF ROK for remote use would func-
tion in a manner similar to a TPM. That is, Bob’s TPM-like
PUF ROK would generate a public key that Alice would use
for encryption. Later, Bob’s device would generate the cor-
responding private key to decrypt the message. Clearly, Al-
ice would need assurance that the public key actually came
from a PUF ROK. Unfortunately, there is no easy solution to
this. Instead, we ﬁnd the most straightforward approach to
be exactly that used by TPMs. That is, the PUF ROK de-
vice would require a certiﬁcate created by the manufacturer,
storing a persistent private key generated by the manufac-
turer. This key would then be used to sign all PUF ROKs
from that device, and Alice could conﬁrm the signature with
the manufacturer’s public key.
In short, our PUF ROK device infrastructure for remote
users would mirror TPM behavior. However, there is one
major exception: The device is trusted to enforce the be-
havior that the PUF ROK can only be used once. This
behavior does not exist in TPMs. However, PUF ROKs
could clearly be integrated into any custom SoC design that
is functionally similar to a TPM.
Now consider the applications of PUF ROKs. Goldwasser
et al. [18] proposed a technique for one-time programs, based
on the assumption that the application is encrypted under a
one-time use key. Closely related to one-time programs are
delegated signatures. If Alice has a persistent key skA, she
could encrypt this key with the PUF ROK as e(skA). Bob
would then provide this encrypted key to the PUF ROK,
which decrypts it and uses the decrypted key to sign a single
document on Alice’s behalf.
PUF ROKs could also be used to generate self-destructing
messages.
If Alice has a portable PUF ROK device, she
could use it to generate Enc(m). After receiving the message,
Bob could use the device to decrypt the message. Once this
is done, repeated attempts to decrypt the message would
fail, as the Reg would no longer store the necessary challenge
input.
Finally, consider the scenario of usage control.
In this
case, Bob has a public key PUF ROK device that contains
the TPM-like endorsement key EK. Bob could use the device
to retrieve the signed pk, which he sends to Alice. Alice,
after conﬁrming the signature, uses the key to encrypt the
protected resource, sending the result to Bob. Bob can then
use the sk stored on the PUF ROK to access the resource.
Once the CC uses sk, this key is no longer accessible, and
access to the resource is revoked.
5.
IMPLEMENTATION
To demonstrate a proof-of-concept for our PUF ROK de-
sign, we developed a prototype implementation. As the de-
sign requires a combination of hardware and software, we de-
sired a platform that would be advantageous for both pieces
of development. Our solution was to use the KNJN Saxo-L
development board [4]. This board features an Altera Cy-
clone EP1C3T100 ﬁeld-programmable gate array (FPGA)
alongside an NXP LPC2132 ARM processor. The FPGA
and ARM are directly connected via a Serial Peripheral In-
terface (SPI). The board also oﬀers a USB-2 adaptor, in
addition to the JTAG adaptor that is commonly used for
FPGA development.
In addition, the form factor of the
board measures 44 × 60 mm, making it highly portable.
In our prototype development, we chose to use the FPGA
only for components that require a hardware implementa-
tion. Speciﬁcally, we implemented a small PUF and register
on the FPGA to capture the essence of the feedback loop.
All other portions, including the error-correcting unit (ECU)
and the crypto core (CC) were implemented in software on
the ARM processor. Figure 4 shows the high-level layout of
our implementation on the KNJN board.
Our PUF design consisted of 32 1-bit ring oscillator PUFs,
as shown in Figure 1. Each of these circuits consisted of a
Regardless of the size of the PUF used, one challenge that
is unavoidable is random inconsistencies in the PUF output.
Speciﬁcally, a small number of bit errors will inevitably oc-
cur as a result of the randomness inherent to PUFs. To coun-
teract this behavior, we employed Reed-Solomon (RS) error-
correcting codes [25]. Speciﬁcally, we adapted the Rockliﬀ’s
implementation [32] in our prototype.
RS(n, k) codes operate as follows. A string of k symbols,
each m bits in length, is concatenated with an n − k syn-
drome, where n = 2m −1. Based on this syndrome, when the
input is used again, the codes can correct up to (n−k)/2 cor-
rupted symbols. In our implementation, we used RS(15, 9)
codes, as the PUF output each time was 32 bits. Observe
that m = 4 in this code, so this k = 9 is a suﬃcient size,
as there would be nine 4-bit symbols (a total of 32 bits).
Furthermore, when the PUF is polled later, this code can
account for three corrupted symbols (potentially up to 12
bits in the PUF). However, in our experiments, the average
Hamming distance between the original PUF response and
later responses was 0.1, with a maximum of two bit errors
that occurred in one execution. Clearly, this code is suﬃ-
cient for our implementation.
In our implementation, we adapted the PolarSSL crypto-
graphic library [1] for execution on the ARM processor. This
open source library is designed to be small enough for use in
embedded devices. The LPC2132 model oﬀers only 16 kB of
RAM and 64 kB of Flash memory. As this is quite a small
amount of storage space, the library actually would not ﬁt in
the device’s available memory. Speciﬁcally, the library con-
tains a number of I/O functions that are not suited for our
implementation. Consequently, we customized the code by
removing this unused functionality and were able to make
the code ﬁt within the conﬁnes of the device.
Based on the experience of building this prototype, we
oﬀer the following insights for creating production-quality
PUF ROKs. First, employing both an FPGA and an ARM
processor adds to the complexity of the system design. As
an alternative approach, one could leverage ARM softcore
designs and place them within the FPGA itself. This would
simplify the circuitry on the board itself.
Additionally, our current design is not optimal for produc-
tion-quality PUFs. Speciﬁcally, it creates a one-to-one cor-
relation between a single bit in the input challenge Ci and
the corresponding response bit in Ri. As such, if Ci and Cj
diﬀer by only a single ﬂipped bit, then Ri and Rj will also
diﬀer by only the same ﬂipped bit. To prevent this corre-
lation and produce behavior that more closely resembles an
ideal PUF, the circuit design should randomly select pairs
from a pool of ring oscillators, rather than having persistent
pairs. As this issue was addressed in [36], interested readers
should consult that work for more information.
Finally, our work used a resource-limited development
board. Speciﬁcally, 2910 logic cells is considerably smaller
than most FPGAs (e.g., the Xilinx Spartan-3E has 10,476).
Also, recall that the amount of memory available was too
small to hold a cryptographic library that is intended for
embedded devices. Consequently, we feel conﬁdent that our
architecture could be easily adapted to larger devices, even
as if the size of the PUF is increased to produce larger keys.
Figure 4: Basic hardware layout of a PUF ROK im-
plemented on the KNJN Saxo-L development board
ring oscillator constructed from 37 inverting gates. In our
experiments, we found that using fewer than 37 gates yielded
less consistency in the PUF behavior. That is, smaller PUFs
increase the number of bit errors that must be corrected.
The output from the ring oscillators was linked to 20-bit
counters that were controlled by a 16-bit timer. The timer
was synchronized with a 24 MHz clock, indicating that the
timer would expire (as a result of an overﬂow) after 2.73
ms. When the timer expires, the values in the counters are
compared, producing a 1 or 0 depending on which counter
had the higher value. This design used 2060 of the 2910
(71%) logic cells available on the FPGA. Each execution