    getFlag(uint256 private_key) returns (uint256) {
      require(msg.sender == owner);
      player = account address from private_key
      storage = address(storage[2]).call.value(???)(player);
      if(storage + player = 1ether);
      var2 = user_contract;
      var3 = msg.value * block.number;
      result = address(user_contract).call.value(xxx).gas(xxx)("0x95808366");
      var2 += result;
      address(user_contract).call.value(msg.value).gas(xxx)("0x");
      require(balanceOf(user_contract) == 0);  // 1
      var4 = modexp(user_contract, E, N) ^ modexp(fix, E, N); // 2
      stroage[var4] = var3;
      return;
    }
The first point is that you need to prevent the contract from receiving funds.
I solved this by placing `selfdestruct` operation inside the fallback
function.
The second point is the `modexp` function. When reversing, I encountered the
following statement: `address(0x5).staticcall.gas(xxx)(data)`. By googling
`contract at 0x5` I found
[this](https://ethereum.stackexchange.com/questions/15479/list-of-pre-compiled-contracts) and [this](https://github.com/zcoinofficial/solidity-BigNumber/blob/master/contracts/BigNumber.sol).
After reversing, solving the challenge is a cakewalk.
Solver (unstripped):
    // loadScript(xxx);
    var account = eth.accounts[0];
    var contract = "0xc3dac37d5d3000a7fa70b574167fed36a8330a35";
    personal.unlockAccount(account);
    var f1_hash = "0x031c62e3";
    var query_hash = "0xad5e5a94";
    var f2_hash = "0x77df37f0";
    //var deployed = "0x6db2520cf6a8a9403b1b1313b6e2811b35f16ac2";
    //var deployed = "0xdbc59c25a00b207dc029b9370a5e5167761bad8b";
    //var deployed = "0x926fadd79df9f2f820c62477f50c1fd895fa7d7c";
    //var deployed = "0x838851629f16b674a6261ca8636c1bb598a55c3e";
    //var deployed = "0x3af5135eb80dd58cb35a503c68d3f1a08f09a4fb";
    var deployed = "0xb1fc178e43883677ce73bf67e5cbc84fcd16afc6";
    var R = "0x95808366";
    //var patched = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102cc806100606000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326882dea146100645780638da5cb5b1461007b57806395808366146100d2578063a6f9dae1146100fd575b005b34801561007057600080fd5b50610079610140565b005b34801561008757600080fd5b506100906101d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100de57600080fd5b506100e76101fa565b6040518082815260200191505060405180910390f35b34801561010957600080fd5b5061013e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610202565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561019b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561025d57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820de3cfb222d167622bfe19ea89e607e9b6907886908732e4edf8aa9d2ed0807350029";
    //var patched = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610304806100606000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326882dea1461009c5780638da5cb5b146100b3578063958083661461010a578063a6f9dae114610135575b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b3480156100a857600080fd5b506100b1610178565b005b3480156100bf57600080fd5b506100c861020d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561011657600080fd5b5061011f610232565b6040518082815260200191505060405180910390f35b34801561014157600080fd5b50610176600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061023a565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101d357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561029557600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820f5905b954001c3308581f6fff0d14551e4ddc701560e614bcb77cc76727417e60029";
    var patched = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610324806100606000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806326882dea1461009c5780638da5cb5b146100b3578063958083661461010a578063a6f9dae114610135575b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b3480156100a857600080fd5b506100b1610178565b005b3480156100bf57600080fd5b506100c861020d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561011657600080fd5b5061011f610232565b6040518082815260200191505060405180910390f35b34801561014157600080fd5b50610176600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061025a565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101d357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007fffffffffffffffffffffffffffffffffffffffffff799ba3a6dd4859643fffff905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102b557600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820a3acbab5723d0e982e0c6dd2434b425c25b969948e1baf30a46341e421954c630029";
    var GAS = 300000;
    var GAS_PRICE = 1000000000;
    var VALUE_REQ = 1000000000000000000;  // 1 ether
    String.prototype.leftJustify = function( length, char ) {
        var fill = [];
        while ( fill.length + this.length  1000):
                print i, yf[i]
                ans.append(i)
        print ans
        p.sendline("%d %d %d %d" % (ans[0], ans[1], ans[2], ans[3]))
    p.interactive()
### eazy dump
看上去是个vmware的内存镜像
和这个有点像
基本信息获取：  
volatility -f mem.data imageinfo  
Volatility Foundation Volatility Framework 2.4  
Determining profile based on KDBG search...
    Suggested Profile(s) : Win2008R2SP0x64, Win7SP1x64, Win7SP0x64, Win2008R2SP1x64
                     AS Layer1 : AMD64PagedMemory (Kernel AS)
                     AS Layer2 : FileAddressSpace (/root/Desktop/mem.data)
                      PAE type : No PAE
                           DTB : 0x187000L
                          KDBG : 0xf80004035070
          Number of Processors : 4
     Image Type (Service Pack) : 0
                KPCR for CPU 0 : 0xfffff80004036d00L
                KPCR for CPU 1 : 0xfffff880009ee000L
                KPCR for CPU 2 : 0xfffff88004568000L
                KPCR for CPU 3 : 0xfffff880045dd000L
             KUSER_SHARED_DATA : 0xfffff78000000000L
           Image date and time : 2018-11-07 08:26:52 UTC+0000
     Image local date and time : 2018-11-07 16:26:52 +0800
枚举用户：  
volatility -f mem.data --profile=Win2008R2SP0x64 printkey -K
"SAM\Domains\Account\Users\Names"  
Volatility Foundation Volatility Framework 2.4  
Legend: (S) = Stable (V) = Volatile
* * *
Registry: \SystemRoot\System32\Config\SAM  
Key name: Names (S)  
Last updated: 2018-11-05 14:22:03 UTC+0000
Subkeys:  
(S) Administrator  
(S) Guest  
(S) veritas501
Values:  
REG_DWORD : (S) 0
查看进程：  
volatility -f mem.data --profile=Win2008R2SP0x64
根据题目名称dump,应该是把某个进程的内存数据用memdump提取出来：  
volatility -f mem.data memdump -p 'pid' -D '/path'
dump画图的内存
用GIMP翻内存
### Difficult programming language
是个键盘流量包
    D'`;M?!\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa'e^]\a`_X|V[Tx;"VONSRQJn1MFKJCBfFE>&1:
                t = 1
            if t  c2:
                print(c2)
                guess_flag[i%96] = abs(1-ff)
            else:
                print(c1)
                guess_flag[i%96] = ff
            #guess_flag = bp(s,guess_out,flag_n,guess_flag)
            #guess_flag = toint(guess_flag)
            print(guess_flag)