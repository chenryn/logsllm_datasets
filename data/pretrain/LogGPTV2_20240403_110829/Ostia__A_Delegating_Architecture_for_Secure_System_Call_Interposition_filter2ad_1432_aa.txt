title:Ostia: A Delegating Architecture for Secure System Call Interposition
author:Tal Garfinkel and
Ben Pfaff and
Mendel Rosenblum
Ostia: A Delegating Architecture for Secure System Call Interposition
Tal Garﬁnkel
Mendel Rosenblum
{talg,blp,mendel}@cs.stanford.edu
Computer Science Department, Stanford University
Ben Pfaff
Abstract
Application sandboxes provide restricted execution en-
vironments that limit an application’s access to sensitive
OS resources. These systems are an increasingly popular
method for limiting the impact of a compromise. While a
variety of mechanisms for building these systems have been
proposed, the most thoroughly implemented and studied are
based on system call interposition. Current interposition-
based architectures offer a wide variety of properties that
make them an attractive approach for building sandbox-
ing systems. Unfortunately, these architectures also possess
several critical properties that make their implementation
error prone and limit their functionality.
We present a study of Ostia, a sandboxing system we
have developed that relies on a “delegating” architecture
which overcomes many of the limitations of today’s sand-
boxing systems. We compare this delegating architecture to
the “ﬁltering” architecture commonly used for sandboxes
today. We present the salient features of each architecture
and examine the design choices that signiﬁcantly impact se-
curity, compatibility, ﬂexibility, deployability, and perfor-
mance in this class of system.
1
Introduction
Today’s applications, from email clients to web servers,
are often vulnerable to attack. Buffer overﬂows, back
doors,
logic errors, or simple misconﬁgurations permit
attackers to compromise these applications with disturb-
ing frequency. A heavily studied approach to remedy-
ing this problem is running programs in application sand-
boxes [18, 2, 3, 31, 30, 12, 10, 15, 28], i.e. execution en-
vironments that impose application-speciﬁc restrictions on
access to system resources.
Hybrid interposition architectures, so called because
they rely on both a kernel-level enforcement mechanism
and a user-level policy engine, have been a prominent ap-
proach to building these tools. These systems leverage the
hardware memory protection that operating systems offer to
provide a high assurance and efﬁcient mechanism for isolat-
ing the address spaces of sandboxed applications from the
rest of the system. A relatively simple mechanism can al-
low a user-level sandbox program to interpose on the system
call interface of a sandboxed application, allowing regula-
tion of access to all sensitive system resources including the
ﬁle system and network.
Filtering sandboxing architectures have been the dom-
inant approach to building hybrid sandboxes.
In these
systems a user-level sandboxing program conﬁnes other
applications by interposing on their access to the system
call interface via a kernel-level process tracing mecha-
nism [2, 3, 18, 29, 31, 21, 30, 1]. The sandboxing pro-
gram can then ﬁlter the ﬂow of system calls between the
application and the OS. Unfortunately, these tools have suf-
fered from a variety of security problems which has limited
their functionality and made their design and implementa-
tion particularly error prone [16]. In this work we demon-
strate that these shortcomings are not a fundamental prop-
erty of hybrid sandboxes, but rather an artifact of several
properties of ﬁltering-based architectures.
We present an alternative architecture that we call a del-
egating architecture that retains the beneﬁts of a ﬁltering
approach, while overcoming many of its limitations. With a
delegating architecture, instead of a sandboxed application
requesting sensitive resources directly from the kernel, it
delegates responsibility for obtaining sensitive resources to
the program (“agent”) controlling the sandbox. This agent
accesses resources on behalf of the sandboxed program ac-
cording to a user-speciﬁed security policy.
To motivate the need for a delegating architecture, as
well as to highlight the salient features of this class of sys-
tem, we compare Ostia, our implementation of a sandbox
with a delegating architecture, to J2 (Janus version 2), a
sandbox we previously developed based on a ﬁltering ar-
chitecture. Through this comparison we show how delegat-
ing architectures can greatly simplify the task of system call
interposition and provide greater ﬂexibility and assurance
than current approaches.
The next section provides a deeper discussion of hybrid
sandboxes, delving further into the properties that motivate
our interest in these systems. Section 3 presents the sig-
niﬁcant features of this class of system and describes both
ﬁltering and delegating sandboxes, highlighting the salient
features of each. In section 4 we provide a detailed descrip-
tion of J2 and Ostia and explore their implementations. Sec-
tion 5 evaluates and compares each architecture’s impact on
security, policy ﬂexibility, compatibility with existing soft-
ware, ease of deployment, and performance. We discuss
related work in section 6 and give our conclusions in sec-
tion 7.
2 Motivation
A system call interposition-based sandbox can be con-
structed using a spectrum of mechanisms for isolation, in-
terposition, and policy.
Purely user-level sandboxes can be realized through
software-based isolation techniques, such as software-based
fault isolation (SFI) [14], program shepherding [23], soft-
ware dynamic translation (SDT) [32], and safe languages.
Because these systems do policy enforcement at user level,
excellent extensibility can be realized without any need to
modify the OS kernel. However, these approaches mani-
fest a number of limitations. Safe languages (e.g. Java) and
low-level software-based techniques (e.g. SFI) are often ex-
tremely speciﬁc to a particular API or ABI, greatly limiting
the range of languages and architectures they can support.
Further, the greater complexity of software-based isolation
mechanisms provides less assurance than simpler hardware-
based mechanisms. Finally, these mechanisms often impose
a non-trivial overhead on program execution.
Strictly OS-based mechanisms that reside entirely in the
kernel [24, 28, 12, 5] and rely on hardware memory pro-
tection for isolation can also be used. OS-based isolation
is fast, offers excellent assurance, and is already provided
by standard operating systems. Further, OS-based isolation
does not depend on the internal APIs or ABIs of the soft-
ware, and can be used in conjunction with software-based
techniques (e.g. safe languages). However, placing an entire
sandboxing system in the kernel also has undesirable conse-
quences. A sandboxing system can still be a nontrivial addi-
tion to the kernel and past errors in such systems have intro-
duced new security vulnerabilities [34]. The size and com-
plexity of internal interfaces in modern monolithic kernels
and their rate of change make it more difﬁcult to gain con-
ﬁdence in the correctness of purely kernel-based solutions.
The irregular and dynamic nature of kernel internals also
greatly exacerbate problems of portability, auditing, and
code maintenance. Finally, user-level code offers a much
richer development environment (e.g. languages, libraries,
debuggers) which greatly simpliﬁes development [17]. All
these factors contribute to making a purely kernel-level so-
lution undesirable from assurance, extensibility, and main-
tenance standpoints.
In a hybrid sandbox [31, 18, 2], kernel-level code pro-
vides support for leveraging OS isolation and provides basic
enforcement mechanisms, while the remaining portion of
the system resides at user level. A hybrid approach enjoys
many of the attractive properties of both kernel- and user-
level approaches. Leveraging hardware memory protection
provided by the OS kernel yields greater assurance, better
compatibility, etc. compared to purely user-level solutions,
while keeping most of the sandbox at user level provides
safe extensibility, eases development and maintenance, etc.
Unfortunately, current hybrid systems have a number of
critical shortcomings that make their design and implemen-
tation complex and error prone, and limit their ﬂexibility.
We demonstrate that these shortcomings are not an essen-
tial property of hybrid sandboxes but rather an artifact of
today’s ﬁltering architectures. We demonstrate that in del-
egating architectures these shortcomings can be mitigated,
and the desirable properties of a hybrid approach enhanced.
The most signiﬁcant problem that ﬁltering-based sand-
boxes exhibit is that they are prone to race conditions [16];
this is a fundamental property of their architecture. In these
systems, permission checking performed by the sandbox is
separate from access granting by the OS. As a result, state
(e.g. call arguments, ﬁle system metadata, etc.) used by a
system call can be changed between the time of the check
by the sandbox and its use by the OS. Modifying this state
can allow an attacker to change the object that a call refers
to, leading to a “time of check/time of use” (TOCTOU) race
condition that attackers can exploit [33, 7].
Filtering sandboxes have attempted to alleviate the prob-
lem of races by pushing more sandbox functionality into
the kernel and by not supporting particularly problematic
classes of programs (e.g. multi-threaded applications). This
can allow ﬁltering-based systems to alleviate some of these
races on a piecemeal basis, but this increasingly mitigates
the beneﬁts a hybrid approach. Further, as a ﬁltering sand-
box desires more control over the semantics of system calls
in order to express richer policies (e.g. rewriting system call
arguments), further support must be pushed into the kernel,
again on a feature-by-feature basis. Clearly, there is some
fundamental conﬂict arising between the requirements of
the sandboxing system, and the functionality provided at
user level by a ﬁltering approach.
A delegating sandboxing architecture resolves this con-
ﬂict by providing more power to the user level sandboxing
system.
Instead of simply providing an interface to ﬁlter
system calls (i.e. to allow or deny calls like a packet ﬁlter),
a delegating architecture completely virtualizes those por-
tions of the system call interface that the sandbox interposes
on. This provides the user level sandbox complete con-
trol over how resources are accessed, as the sandbox actu-
ally performs access to the resources on the sandboxed pro-
grams behalf. This approach alleviates the signiﬁcant secu-
rity problems of ﬁltering sandboxes. For example, because
the sandboxing system has complete control over access-
ing resources it can ensure that this takes place in a manner
that excludes the possibility of race conditions. Section 5.1
provides a complete discussion of how delegation helps al-
leviate races and facilitates a more conservative and secure
design in a variety of other ways. Delegation also greatly
enhances extensibility as it allows system calls to be ar-
bitrarily redeﬁned/transformed, without ever requiring ker-
nel changes e.g. rewriting system call arguments could triv-
ially be facilitated at user level (for further details see sec-
tion 5.2). Finally, because a delegating architecture moves
virtually all of its functionality to user level, it requires only
trivial kernel support. For example, our implementation re-
quired only 200 lines of code. The requirement for minimal
kernel support enhances the security, portability, and main-
tainability properties of a hybrid sandbox.
3 Hybrid interposition architectures
At a high level, hybrid interposition-based sandboxes
have two components:
the interposition architecture and
the policy engine. The policy engine is responsible for
interpreting a user-speciﬁed policy and deciding which re-
sources the sandboxed application should be allowed to ac-
cess. The interposition architecture is responsible for pro-
viding the functionality required by the policy engine to
make decisions (e.g. provide access to system call argu-
ments) and enforce those decisions. Policy engines can be
made largely independent of the interposition architecture.
Policy decisions are made by interpreting the meaning of
a system call (i.e. what resource it will grant access to) then
making a decision based on a user-speciﬁed sandbox policy.
System calls are regulated based on the policy model, which
speciﬁes which calls to allow or deny, given the sandbox
policy. The sandbox policy is typically a ﬁle consisting of a
set of rules specifying which resources an application may
access. Appendix A describes the the format for these rules
(or policy interface) used by Ostia, which is the same as that
used by J2 for ease of comparison.
More complicated examples of policy interfaces can be
found in other systems [31, 2]. We have intentionally kept
the policy interface of J2 and Ostia simple as we believe
that a more baroque policy format would merely serve as a
distraction from our focus on system architecture.
interposition-based
Policy model: Hybrid
sandboxes
leverage the isolation provided by the OS’s process ab-
straction. All security-sensitive interactions between the
sandboxed application and the system outside its address
space are conducted via the system call interface. (Minor
exceptions such as core dumps are easily accounted for.)
While the UNIX API is quite large, we only need to reg-
ulate the modest number of calls that have an impact outside
of the process. The majority of this attention goes to regu-
lating access to the network and ﬁle system. The remaining
sensitive calls are easy to handle as they have few parame-
ters and are generally allowed or denied outright, regardless
of their arguments.
The UNIX model for providing access to the network
and ﬁle system is largely based on a simple capability model
where obtaining a capability, called a “descriptor,” for a
resource (e.g. ﬁle descriptor with the open call) is per-
formed via an operation separate from resource use. Thus
we are primarily concerned with controlling calls that ac-
quire these descriptors (e.g. open, socket) or modify
them (e.g. bind, setsockopt). We do not interpose
on calls that simply use descriptors (e.g. read, write)
or copy existing descriptors (e.g. dup). This separation is
important for achieving good performance.
The initial process in a sandbox is started with an essen-
tially empty descriptor space. Subsequent processes started
in the sandbox must either obtain descriptors for resources
by explicitly requesting them over a checked interface or
by inheriting them from a parent, whose accesses were also
checked. Thus we can explicitly control a sandboxed pro-
cess’s descriptor set. (Descriptors can also be obtained from
other processes via the sendmsg and recvmsg calls.
These calls are also regulated through policy.)
Some prominent examples of other calls which are
checked include: calls that manipulate ﬁle system metadata
(e.g. rename, remove), calls that modify sandboxed pro-
cesses’ user and group identities (e.g. setuid), and calls
to send signals (e.g. kill).
Execution model: The lifetime of a program in an appli-
cation sandbox progresses in similar steps, regardless of the
architecture. To start a program in the sandbox, the user
invokes the sandbox specifying the program to run and the
policy to apply. The user-level portion of the system reads
the policy and starts a child. The child releases its resources
(ﬁle descriptors, etc.), performs some action to “enter” the
sandbox, then execs the sandboxed application. The par-
ent (called the “monitor” or “agent” depending on sandbox
type) then enters an event-handling loop that receives re-
quests to access resources in the form of system calls. It
allows or denies these requests according to decisions made
by the policy engine. The policy engine in turn makes deci-
sions by interpreting the requests in the context of the cur-
rent system state; how it obtains this state is architecture
dependent. The sandboxed application consists of one or
more processes (called “clients”) which make requests for
resources. These may be made to a single parent which
multiplexes all requests or multiple parents. The lifetime of
the sandbox ends when no client processes remain.
Concurrency strategy: The monitor(s) in a ﬁltering sand-
box or agent(s) in a delegating sandbox must be able to
receive and answer requests sent concurrently by multiple
processes, so the sandbox developer must make a decision