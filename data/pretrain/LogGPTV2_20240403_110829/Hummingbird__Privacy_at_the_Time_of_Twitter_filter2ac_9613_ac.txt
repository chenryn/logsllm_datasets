RSA keypair, e.g., [(Nb, eb), (db)] for Bob. The public key
becomes part of the user’s proﬁle.
Follow. This is a three-step protocol that authorizes a user
(Alice) to follow another user (Bob). For simplicity’s sake,
we assume that Alice is interested only in one hashtag ht
and later describe how to support multiple hashtags. The
protocol is shown in Figure 2. As mentioned above, it builds
on Blind-RSA based OPRFs and includes the following three
steps:
1) Issue Request: Alice sends Bob a request to follow his
tweets on an arbitrary hashtag ht. This corresponds to
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:17 UTC from IEEE Xplore.  Restrictions apply. 
the ﬁrst round of Blind-Sign protocol in Section II-B.
The request is routed through HS; thus, Bob does not
need to be on-line.
2) Approve Request: Whenever Bob logs in to Hum-
mingbird, HS prompts him with Alice’s request. If
Bob approves the request, he blindly signs it and the
resulting signature is stored by HS for later delivery to
Alice. (Note that Alice might not be on-line at this
time.) This corresponds to the second round of the
Blind-Sign protocol in Section II-B.
3) Finalize Request: Upon next
login, Alice receives
Bob’s approved request. She then ﬁnalizes it as the last
round of Blind-Sign protocol (i.e., by unblinding Bob’s
signature) and computing the outer hash to obtain the
ﬁnal OPRF value, i.e., a token, corresponding to Bob’s
hashtag ht. Finally, Alice deposits the resulting token
with HS.
After successful completion of the above protocol, Alice is
authorized to obtain all Bob’s tweets (labeled with hashtag
ht). Our present architecture does not handle revocation of
follow requests: although it is not difﬁcult to incorporate it,
there does not seem to be an elegant way to do it without
relying on HS. To withdraw Alice’s authorization, Bob could
either generate a new set of RSA parameters, or replace hash
function H(·). Unfortunately, either way, all outstanding
subscriptions would have to be renewed, i.e., Bob needs to
re-run the Follow protocol with all non-revoked followers.
This is possible since Bob knows their identities.
Tweet/Read. We now discuss how to privately send/read
tweets in Hummingbird. For now, we assume that Bob
attaches only a single hashtag to his tweet, and later show
how to support multiple hashtags. The protocol is illustrated
in Figure 3.
1) Tweet: Assume that Bob tweets a message M, asso-
ciated with hashtag ht∗. He derives an encryption key
from a PRF evaluation of ht∗, encrypts M, and uploads
it to HS. PRF evaluation of ht∗ is also used by Bob to
compute a cryptographic token that is attached to the
encrypted message. This token is later used by HS to
match tweets with followers. Once again, we use the
OPRF construction based on Blind-RSA signatures.
2) Oblivious Matching: Suppose Alice follows Bob on
ht and ht = ht∗. This means that she has deposited at
HS, a cryptographic token matching the one uploaded
by Bob upon tweeting (derived by the OPRF execution
as per protocol in Figure 2). As a result, HS adds Bob’s
encrypted tweet to Alice’s proﬁle.
3) Read: Upon login, Alice receives Bob’s encrypted
tweet; she reconstructs the decryption key (again, de-
rived by the OPRF execution) and reads the tweet upon
decryption.
(1) Issue Request
HS
Alice (ht)
Follow Bob
(Nb, eb)
(Alice, Bob, μ)
r ←R ZNb
μ = H(ht) · reb
Store (Alice, Bob, μ)
Store (Bob, ht, r)
(2) Approve Request
Bob (db)
HS
(Alice, μ)
μ(cid:3) = μdb
(Alice, Bob, μ(cid:3))
HS
Store (Alice, Bob, μ(cid:3))
(3) Finalize Request
Alice (ht)
δ = μ(cid:3)/r
t = H2(δ)
(Bob, μ(cid:3))
(Alice, Bob, t)
Store (Alice, Bob, t)
Store (Bob, ht, δ, t)
Figure 2: The three-step protocol corresponding to follow a user
in Hummingbird. It executes on common input H, H2. All
computation is assumed mod Nb.
V. SECURITY
In this section, we discuss security properties of Hum-
mingbird.
Tweeters/Followers Privacy. We start by noting that
the OPRF-based protocol implementing following-by-topic
hides the content of hashtags requested by Alice from
Bob, HS, or any eavesdropper. Similarly, Bob’s tweets (and
hashtags) reveal no information about tweet content to any
party but authorized followers. Indeed, this follows directly
from the security of our OPRF instantiation, based on Blind-
RSA signatures, under the One-More-RSA assumption [10].
Matching Privacy. Next, we consider security of oblivious
matching, as performed by HS. To do so, we need to
show that HS matches tweets to followers while learning
nothing about cleartext tweets and hashtags. However, as
discussed in Section III, we do not attempt
to prevent
HS from learning tweeter/follower relations, distributions of
(encrypted) tweets and hashtags, as well learning whether
multiple follow requests are based on the same hashtag.
(Though we sketch out a way to avoid the latter in Section
291
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:17 UTC from IEEE Xplore.  Restrictions apply. 
o
o
/
/
o
o
o
o
/
/
/
/
o
o
Bob (db, M, ht∗)
δ∗ = H(ht∗)db
t∗ = H2(δ∗)
k∗ = H1(δ∗)
ct∗ = Enck∗ (M )
(1) Tweet
HS
(t∗, ct∗)
/ Store (Bob, t∗, ct∗)
(2) Oblivious Matching
HS: ∀(U, V, t) in storage s.t. V = ‘Bob’ ∧ t = t∗:
Store and mark (Bob, t∗, ct∗) for delivering to U
(3) Read
Alice
HS
If (Bob, t∗, ct∗)
marked for Alice
i , υ∗
• Assume there are no requests, ¯R = ∅. The i-th
tweet/token pair γ∗
(cid:2)
i ←R ZNb
γ∗
υ∗
i = υ∗
υ∗
i ←R {0, 1}τ3 otherwise
i :
υ∗
j if∃ j : O.matchtw(j, i) = 1 ∧ j < i
i of ¯T is set as follows:
• Assume there are no tweets, thus, ¯T = ∅. The i-th
token υi of ¯R is set as:
(cid:2)
υi = υj if ∃ j : O.matchreq(j, i) = 1 ∧ j < i
υi ←R {0, 1}τ3 otherwise
υi :
• Assume there are both tweets and follow requests, i.e.,
i of ¯T is
¯T (cid:8)= ∅, ¯T (cid:8)= ∅. The i-th tweet/token pair γ∗
set as in the ﬁrst bullet. The i-th token υi of ¯R is set as:
⎧⎪⎨
⎪⎩υi = υj if ∃ j : O.match(j, i) = 1 ∧ j < i
υi = υj if ∃ j : O.matchreq(j, i) = 1 ∧ j < i
υi ←R {0, 1}τ3 otherwise
i , υ∗
In all above cases, ( ¯T , ¯R) is indistinguishable from
then we could use A, A∗ to distinguish
( ˆT , ˆR). If not,
random strings from pseudo-random ones.
VI. SYSTEM PROTOTYPE
We
implemented Hummingbird as
a working re-
search prototype. It is available at http://sprout.ics.uci.edu/
hummingbird.
In this section, we demonstrate that: (1) by using efﬁcient
cryptographic mechanisms, Hummingbird offers a privacy-
preserving Twitter-like messaging service, (2) the resulting
implementation introduces no overhead on the central ser-
vice (HS) (thus raising no scalability concerns), and (3)
performance of Hummingbird are suitable to real-world
deployment.
A. Server-side
In the description of the implementation, we distin-
guish between server- and client-side components, as shown
in Figure 4. Hummingbird’s server-side component corre-
sponds to HS, introduced in Section IV. It consists of three
parts: (1) database, (2) JSP classes, and (3) Java back-end.
We describe them below.
Database. Hummingbird employs a central database to
store and access user accounts, encrypted tweets, follow
requests, and proﬁles.
JSP Front-end. The visual component of Hummingbird is
realized through JSP pages. They allow users to seamlessly
interact with a back-end engine, via the web browser.
Main web functionalities include: registration, login, issu-
ing/accepting/ﬁnalizing a request to follow, tweeting, read-
ing streaming tweets, and accessing user proﬁles.
(Bob, t∗, ct∗)
υi :
Recover (Bob, ht, δ, t)
s.t. t = t∗
k = H1(δ)
Output M =Deck(ct∗)
Figure 3: Tweeting and reading in Hummingbird. It executes on
common input H, H1, H2. All computation is mod Nb.
1, t∗
1 . . . , ct∗
1, . . . , mn, ht∗
Let T = {m1, ht∗
VII-C.)
n} be a set of tweets
and R = {ht1, . . . , htl} a set of follow requests.1 Then,
we deﬁne the corresponding sets that HS receives as
n} and ˆR = {t1, . . . , tl}. We want
ˆT = {ct∗
to demonstrate that, with overwhelming probability, any
function ζ(T ,R) computable by an adversary A on input
( ˆT , ˆR), can be also computed by a PPT algorithm A∗ that
has only access to an oracle matching tweets and requests.
Speciﬁcally, we need to show that:
n, t∗
|P r[ζ(T ,R) ← A( ˆT , ˆR)] − P r[ζ(T ,R) ← AO(T ,R)]|
is negligible in the security parameter, with O implementing
the following functions:
i = htj
i = ht∗
i ∈ T , htj ∈ R : ht∗
j ∈ T : ht∗
i ∈ T , ht∗
match(i, j) = 1⇔∃ ht∗
matchtw(i, j) = 1⇔∃ ht∗
j ∧ i (cid:8)= j
matchreq(i, j) = 1⇔∃ hti ∈ R, htj ∈ R : hti = htj ∧ i (cid:8)= j
If this occurs, then there exists a PPT algorithm A∗ that
n}, ¯R = {υ1, . . . , υl},
can construct ¯T = {γ∗
indistinguishable from ˆT , ˆR. Thus, A∗ can simulate A with
input ¯T , ¯R to obtain the same function output. A∗ builds
¯T , ¯R as follows:
1We assume, w.l.o.g.,
identities from the sets of tweets and follow requests.
there is only one tweeter,
1, . . . , γ∗
thus, removing
n, υ∗
1 , υ∗
that
292
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:17 UTC from IEEE Xplore.  Restrictions apply. 
/
/
/
Hummingbird Architecture
Client Side 
(Firefox 3.x Browser)
Server Side
Hummingbird 
Firefox Ext
(HFE)
Hummingbird 
Website
(JSP Front-end)
Client-Side 
Java Back-end 
(CJB)
Server-Side
Java Back-end
DB
Figure 4: Server-side and Client-side components of the Hum-
mingbird prototype.
Java Back-end. Hummingbird functionality is realized by
a Java back-end running on HS. The back-end is deployed
in Apache Tomcat. The software includes many modules
and we omit their detailed description. The back-end mainly
handles access to the database, populates web pages, and
performs efﬁcient matching of tweets to followers using off-
the-shelf database querying mechanisms.
B. Client-side
Users interface with the system via the Hummingbird web
site. We implement each of the operations in Hummingbird
as a web transaction, and users perform them from their
web browser. However, several client-side cryptographic
operations need to be performed outside the browser: to the
best of our knowledge, there is no straightforward browser
support for complex public-key operations such as those
needed in OPRF computation.
To this end, we introduce, on the client-side, a small Java
back-end, used to perform cryptographic operations. Then,
we design a Firefox extension (HFE) to store users’ keys
and to automatically invoke appropriate Java code for each
corresponding action. Its latest version is compatible with
Firefox 3.x.x and is available from http://sprout.ics.uci.edu/
hummingbird.
Client-side Java Back-end (CJB). Hummingbird users
are responsible for generating their RSA keys, en-
crypt/decrypt tweets according to the technique presented
in Section IV, and perform OPRF computations during
follow request/approval. In our system, these cryptographic
operations are implemented by a small Java back-end, CJB,
included in the HFE presented below. CJB relies on the Java
Bouncy Castle Crypto library.
Hummingbird Firefox Extension (HFE). As mentioned
above, HFE interfaces the web browser to the client-side
Java back-end, that is included as part of the extension
package. The extension code connects to it using Java Live-
Connect [43]. Once installed, HFE is completely transparent
to the user. HFE is used for:
Key management. During user registration, HFE automati-
cally invokes RSA key generation code from CJB, stores
(and optionally password-protects) public/private key in the
extension folder, and lets browser report public key to HS.
Following. For each of the three steps involved in requesting
to follow a tweeter, the user is guided by Hummingbird
web site, however, CJB code needs to be executed to
realize corresponding cryptographic operations. This is done,
automatically, by HFE.
Tweet. When a user
tweets on Hummingbird, HFE—
transparently to her—intercepts message and hashtag and
invokes the CJB code to encrypt the message and generate
the appropriate cryptographic token.
Read. Followers receive, from HS, tweets matching their
interest, however, these are encrypted (recall that matching
is performed obliviously at HS). Nevertheless, HFE auto-
matically decrypts them (using CJB code) and replace web
page content with corresponding cleartext.
C. Performance
Following its architecture, the Hummingbird prototype