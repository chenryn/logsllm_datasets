# 自增锁的优化

自增 ID 锁并非事务锁，而是每次申请后立即释放，以便其他事务可以再次申请。然而，在 MySQL 5.1 版本之前，情况并非如此。接下来，我将介绍自增锁设计的历史，这有助于理解后续的问题。

在 MySQL 5.0 版本中，自增锁的作用范围是语句级别。这意味着如果一个语句申请了表的自增锁，该锁会在语句执行完毕后才被释放。显然，这种设计会影响并发性能。

MySQL 5.1.22 版本引入了一个新参数 `innodb_autoinc_lock_mode`，其默认值为 1。这个参数有三种设置：

1. 当 `innodb_autoinc_lock_mode` 设置为 0 时，采用 MySQL 5.0 版本的策略，即自增锁在语句执行结束后才释放。
2. 当 `innodb_autoinc_lock_mode` 设置为 1 时：
   - 对于普通 `INSERT` 语句，自增锁在申请后立即释放；
   - 对于批量插入数据的语句（如 `INSERT ... SELECT`），自增锁需要等到语句执行结束才释放。
3. 当 `innodb_autoinc_lock_mode` 设置为 2 时，所有申请自增主键的操作都会在申请后立即释放锁。

你可能有两个疑问：**为什么在默认设置下，`INSERT ... SELECT` 要使用语句级的锁？为什么这个参数的默认值不是 2？**

答案是为了保证数据的一致性。考虑以下场景：

![](https://static001.geekbang.org/resource/image/e0/df/e0a69e151277de54a8262657e4ec89df.png)

在这个例子中，向表 t1 插入了 4 行数据，然后创建了一个相同结构的表 t2。两个会话同时向表 t2 中插入数据。如果会话 B 在申请自增值后立即释放自增锁，可能会出现以下情况：

- 会话 B 先插入两条记录 (1,1,1) 和 (2,2,2)；
- 然后，会话 A 申请自增 ID 得到 id=3，插入 (3,5,5)；
- 之后，会话 B 继续执行，插入两条记录 (4,3,3) 和 (5,4,4)。

从数据逻辑上看，这种情况似乎没有问题。但是，如果 `binlog_format=statement`，那么 binlog 将如何记录这些操作呢？

由于两个会话同时执行插入命令，binlog 中对表 t2 的更新日志只有两种情况：要么先记录会话 A 的操作，要么先记录会话 B 的操作。无论哪种情况，当这些 binlog 在从库或临时实例上执行时，会话 B 的插入语句生成的结果中的 ID 都将是连续的。这会导致数据不一致。

出现这个问题的原因是原库中会话 B 的 `INSERT` 语句生成的 ID 不连续。而要解决这个问题，有两种思路：

1. 让原库的批量插入数据语句生成连续的 ID 值。因此，自增锁直到语句执行结束才释放。
2. 在 binlog 中如实记录插入数据的操作，并在从库执行时不再依赖自增主键生成。这可以通过将 `innodb_autoinc_lock_mode` 设置为 2 并将 `binlog_format` 设置为 `row` 来实现。

因此，在生产环境中，特别是在有 `INSERT ... SELECT` 这种批量插入数据的场景时，为了提高并发插入性能并避免数据一致性问题，建议将 `innodb_autoinc_lock_mode` 设置为 2，并将 `binlog_format` 设置为 `row`。需要注意的是，批量插入数据包括 `INSERT ... SELECT`、`REPLACE ... SELECT` 和 `LOAD DATA` 语句。

对于普通的 `INSERT` 语句，即使 `innodb_autoinc_lock_mode` 设置为 1，也不会等到语句执行完成才释放锁。因为这类语句在申请自增 ID 时可以精确计算出需要多少个 ID，然后一次性申请并释放锁。

对于批量插入数据的语句，MySQL 有一个批量申请自增 ID 的策略：

1. 第一次申请自增 ID 时分配 1 个；
2. 用完后第二次申请分配 2 个；
3. 依此类推，每次申请到的自增 ID 数量都是上一次的两倍。

例如，考虑以下语句序列：

```sql
insert into t values(null, 1,1);
insert into t values(null, 2,2);
insert into t values(null, 3,3);
insert into t values(null, 4,4);
create table t2 like t;
insert into t2(c,d) select c,d from t;
insert into t2 values(null, 5,5);
```

实际上，`INSERT ... SELECT` 向表 t2 中插入了 4 行数据，但这些数据是分三次申请的自增 ID。第一次申请到 id=1，第二次分配了 id=2 和 id=3，第三次分配了 id=4 到 id=7。由于这条语句实际只用了 4 个 ID，所以 id=5 到 id=7 被浪费掉了。之后，再执行 `insert into t2 values(null,5,5)`，实际上插入的数据是 (8,5,5)。这是主键 ID 出现不连续的第三种原因。

# 小结

今天，我们讨论了自增主键为什么会出现不连续的值。首先，我们探讨了自增值的存储方式：在 MyISAM 引擎中，自增值写在数据文件上；而在 InnoDB 中，自增值记录在内存中。直到 MySQL 8.0 版本，InnoDB 表的自增值才具备持久化能力，确保重启前后自增值不变。

接着，我们分析了在一个语句执行过程中自增值改变的时机，并解释了为什么 MySQL 在事务回滚时不能回收自增 ID。从并发性能的角度出发，建议将 `innodb_autoinc_lock_mode` 设置为 2，并将 `binlog_format` 设置为 `row`。

最后，留一个思考题：在可重复读隔离级别下，`binlog_format=statement` 时执行 `insert into t2(c,d) select c,d from t;` 语句时，为什么需要对表 t 的所有记录和间隙加锁？请在评论区分享你的想法。

感谢你的阅读，也欢迎你把这篇文章分享给更多朋友。

# 上期问题时间

上期的问题是如何避免内存表突然丢数据导致主备同步停止的情况。假设主库暂时不能修改引擎，可以在备库上将内存表引擎改为 InnoDB。具体步骤如下：

```sql
set sql_log_bin=off;
alter table tbl_name engine=innodb;
```

这样可以避免备库重启时数据丢失的问题。如果主库异常重启，会往 binlog 写入 "delete from tbl_name"，传到备库后，备库的同名表数据也会被清空，从而不会出现主备同步停止的问题。

如果主库异常重启触发 HA，原来的备库变为新主库，新的备库上的内存表（此时无数据）也需要改成 InnoDB 表。如果不能直接修改主库上的表引擎，可以配置自动巡检工具，在备库上发现内存表就将其引擎改掉。同时，与业务开发人员约定好建表规则，避免创建新的内存表。

# 40 | insert 语句的锁为什么这么多？

在上一篇文章中，我们提到 MySQL 对自增主键锁做了优化，尽量在申请到自增 ID 后立即释放自增锁。因此，普通的 `INSERT` 语句是一个很轻量的操作。然而，某些 `INSERT` 语句属于特殊情况，在执行过程中需要给其他资源加锁，或者无法在申请到自增 ID 后立即释放自增锁。今天，我们将深入探讨这个话题。

# insert ... select 语句

我们从昨天的问题说起。表 t 和 t2 的表结构及初始化数据如下：

```sql
CREATE TABLE `t` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `c` int(11) DEFAULT NULL,
  `d` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `c` (`c`)
) ENGINE=InnoDB;

insert into t values(null, 1,1);
insert into t values(null, 2,2);
insert into t values(null, 3,3);
insert into t values(null, 4,4);

create table t2 like t;
```

现在，我们来讨论为什么在可重复读隔离级别下，`binlog_format=statement` 时执行 `insert into t2(c,d) select c,d from t;` 语句时，需要对表 t 的所有行和间隙加锁。

这个问题的核心在于日志和数据的一致性。考虑以下执行序列：

![](https://static001.geekbang.org/resource/image/33/86/33e513ee55d5700dc67f32bcdafb9386.png)

实际效果是，如果会话 B 先执行，由于该语句对表 t 主键索引加了 (-∞,1] 的 next-key lock，会在语句执行完成后才允许会话 A 的 `INSERT` 语句执行。如果没有锁，则可能出现会话 B 的 `INSERT` 语句先执行但后写入 binlog 的情况。在 `binlog_format=statement` 的情况下，binlog 中将记录如下语句序列：

```sql
insert into t values(-1,-1,-1);
insert into t2(c,d) select c,d from t;
```

这些语句在从库执行时，会将 id=-1 的行也写入表 t2，导致主备不一致。