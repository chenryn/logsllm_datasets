:::
Verdict 映射（也称为字典）使 `nft`{.literal}
能够通过将匹配标准映射到操作来根据数据包信息执行操作。
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#using-anonymous-maps-in-nftables_using-verdict-maps-in-nftables-commands}在 nftables 中使用匿名映射 {.title}
:::
匿名映射是您直接在规则中使用的 `{ match_criteria : action }`{.literal}
语句。这个语句可以包含多个用逗号分开的映射。
匿名映射的缺点是，如果要修改映射，则必须替换规则。对于动态解决方案，请使用命名映射，如
[在 nftables
中使用命名映射](#getting-started-with-nftables_securing-networks.html#using-named-maps-in-nftables_using-verdict-maps-in-nftables-commands "在 nftables 中使用命名映射"){.link}
中所述。
这个示例描述了如何使用匿名映射将 IPv4 和 IPv6 协议的 TCP 和 UDP
数据包路由到不同的链，以分别计算传入的 TCP 和 UDP 数据包。
::: orderedlist
**流程**
1.  创建 `example_table`{.literal}:
    ``` literallayout
    # nft add table inet example_table
    ```
2.  在 `example_table`{.literal} 中创建 `tcp_packets`{.literal} 链：
    ``` literallayout
    # nft add chain inet example_table tcp_packets
    ```
3.  在 `tcp_packets`{.literal} 中添加一条计算此链中流量的规则：
    ``` literallayout
    # nft add rule inet example_table tcp_packets counter
    ```
4.  在 `example_table`{.literal} 中创建 `udp_packets`{.literal} 链
    ``` literallayout
    # nft add chain inet example_table udp_packets
    ```
5.  在`udp_packets`{.literal} 中添加一条计算此链中流量的规则：
    ``` literallayout
    # nft add rule inet example_table udp_packets counter
    ```
6.  为传入的流量创建一个链。例如，在 `example_table`{.literal}
    中创建一个名为 `incoming_traffic`{.literal}
    的链，用于过滤传入的流量：
    ``` literallayout
    # nft add chain inet example_table incoming_traffic { type filter hook input priority 0 \; }
    ```
7.  在`incoming_traffic`{.literal} 中添加一条带有匿名映射的规则：
    ``` literallayout
    # nft add rule inet example_table incoming_traffic ip protocol vmap { tcp : jump tcp_packets, udp : jump udp_packets }
    ```
    匿名映射区分数据包，并根据它们的协议将它们发送到不同的计数链。
8.  要列出流量计数器，请显示 `example_table`{.literal}:
    ``` literallayout
    # nft list table inet example_table
    table inet example_table {
      chain tcp_packets {
        counter packets 36379 bytes 2103816
      }
      chain udp_packets {
        counter packets 10 bytes 1559
      }
      chain incoming_traffic {
        type filter hook input priority filter; policy accept;
        ip protocol vmap { tcp : jump tcp_packets, udp : jump udp_packets }
      }
    }
    ```
    `tcp_packets`{.literal} 和 `udp_packets`{.literal}
    链中的计数器会显示收到的数据包数和字节数。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#using-named-maps-in-nftables_using-verdict-maps-in-nftables-commands}在 nftables 中使用命名映射 {.title}
:::
`nftables`{.literal}
框架支持命名映射。您可以在表中的多个规则中使用这些映射。匿名映射的另一个好处在于，您可以更新命名映射而不比替换使用它的规则。
在创建命名映射时，您必须指定元素的类型：
::: itemizedlist
-   匹配部分包含 IPv4 地址的映射的 `ipv4_addr`{.literal} ，如
    `192.0.2.1`{.literal}。
-   匹配部分包含 IPv6 地址的映射的 `ipv6_addr`{.literal} ，如
    `2001:db8:1::1`{.literal}。
-   匹配部分包含介质访问控制(MAC)地址的映射的 `ether_addr`{.literal}，如
    `52:54:00:6b:66:42`{.literal}。
-   匹配部分包含 Internet 协议类型的映射的 `inet_proto`{.literal} ，如
    `tcp`{.literal} 。
-   匹配部分包含互联网服务名称端口号的映射的 `inet_service`{.literal}
    ，如 `ssh`{.literal} 或 `22`{.literal} 。
-   匹配部分包含数据包标记的映射的 `mark`{.literal}
    。数据包标记可以是任何 32 位的正整数值（`0`{.literal} 到
    `2147483647`{.literal}）。
-   匹配部分包含计数器值的映射的
    `counter`{.literal}。计数器值可以是任意正 64 位整数值。
-   匹配部分包含配额值的映射的 `quota`{.literal} 。配额值可以是任意正 64
    位整数值。
:::
这个示例论述了如何根据源 IP
地址允许或丢弃传入的数据包。使用命名映射时，您只需要一条规则来配置这种场景，而
IP
地址和操作被动态存储在映射中。此流程还描述了如何从映射中添加和删除条目。
::: orderedlist
**流程**
1.  创建表。例如，要创建一个名为 `example_table`{.literal} 的表来处理
    IPv4 数据包：
    ``` literallayout
    # nft add table ip example_table
    ```
2.  创建链。例如，要在 `example_table`{.literal} 中创建一个名为
    `example_chain`{.literal} 的链：
    ``` literallayout
    # nft add chain ip example_table example_chain { type filter hook input priority 0 \; }
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    要避免 shell 认为分号作为命令结尾，您必须用反斜杠转义分号。
    :::
3.  创建一个空的映射。例如，要为 IPv4 地址创建映射：
    ``` literallayout
    # nft add map ip example_table example_map { type ipv4_addr : verdict \; }
    ```
4.  创建使用该映射的规则。例如，以下命令向 `example_table`{.literal}
    中的 `example_chain`{.literal} 添加了一条规则，它把操作应用到
    `example_map`{.literal} 中定义的 IPv4 地址上：
    ``` literallayout
    # nft add rule example_table example_chain ip saddr vmap @example_map
    ```
5.  在 `example_map`{.literal} 中添加 IPv4 地址和相应的操作：
    ``` literallayout
    # nft add element ip example_table example_map { 192.0.2.1 : accept, 192.0.2.2 : drop }
    ```
    这个示例定义了 IPv4
    地址到操作的映射。结合上面创建的规则，防火墙会接受来自
    `192.0.2.1`{.literal} 的数据包，而丢弃来自 `192.0.2.2`{.literal}
    的数据包。
6.  另外，还可添加另一个 IP 地址和 action 语句来增强映射：
    ``` literallayout
    # nft add element ip example_table example_map { 192.0.2.3 : accept }
    ```
7.  （可选）从映射中删除条目：
    ``` literallayout
    # nft delete element ip example_table example_map { 192.0.2.1 }
    ```
8.  另外，还可显示规则集：
    ``` literallayout
    # nft list ruleset
    table ip example_table {
      map example_map {
        type ipv4_addr : verdict
        elements = { 192.0.2.2 : drop, 192.0.2.3 : accept }
      }
      chain example_chain {
        type filter hook input priority filter; policy accept;
        ip saddr vmap @example_map
      }
    }
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#_additional_resources_5}其它资源 {.title}
:::
::: itemizedlist
-   `nft(8)`{.literal} 手册页中的 `Maps`{.literal} 部分
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#configuring-port-forwarding-using-nftables_getting-started-with-nftables}使用 nftables 配置端口转发 {.title}
:::
端口转发可让管理员将发送到特定目的端口的数据包转发到不同的本地或者远程端口。
例如，如果您的 Web 服务器没有公共 IP
地址，您可以在防火墙上设置端口转发规则，该规则将防火墙端口
`80`{.literal} 和 `443`{.literal} 上传入的数据包转发到 Web
服务器。使用这个防火墙规则，互联网中的用户可以使用防火墙的 IP
或主机名访问网页服务器。
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#forwarding-incoming-packets-to-a-different-local-port_configuring-port-forwarding-using-nftables}将传入的数据包转发到不同的本地端口 {.title}
:::
这部分描述了如何将端口 `8022`{.literal} 上传入的 IPv4
数据包转发到本地系统端口 `22`{.literal} 上的示例。
::: orderedlist
**流程**
1.  使用 `ip`{.literal} 地址系列创建一个名为 `nat`{.literal} 的表：
    ``` literallayout
    # nft add table ip nat
    ```
2.  将 `prerouting`{.literal} 和 `postrouting`{.literal} 链添加到表中：
    ``` literallayout
    # nft -- add chain ip nat prerouting { type nat hook prerouting priority -100 \; }
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    将 `--`{.literal} 选项传给 `nft`{.literal} 命令，以避免 shell
    将负优先级的值解析为 `nft`{.literal} 命令的一个选项。
    :::
3.  在 `prerouting`{.literal} 链中添加一条规则，将端口 `8022`{.literal}
    上传入的数据包重定向到本地端口 `22`{.literal} ：
    ``` literallayout
    # nft add rule ip nat prerouting tcp dport 8022 redirect to :22
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#forwarding-incoming-packets-on-a-specific-local-port-to-a-different-host_configuring-port-forwarding-using-nftables}将特定本地端口上传入的数据包转发到不同主机 {.title}
:::
您可以使用目标网络地址转换（DNAT）规则将本地端口上传入的数据包转发到远程主机。这可让互联网中的用户访问使用专用
IP 地址在主机上运行的服务。
这个步骤描述了如何将本地端口 `443`{.literal} 上传入的 IPv4 数据包转发到
IP 地址为 `192.0.2.1`{.literal} 的远程系统上的同一端口号。
::: itemizedlist
**先决条件**
-   您以 `root`{.literal} 用户身份登录到应该可以转发数据包的系统。
:::
::: orderedlist
**流程**
1.  使用 `ip`{.literal} 地址系列创建一个名为 `nat`{.literal} 的表：
    ``` literallayout
    # nft add table ip nat
    ```
2.  将 `prerouting`{.literal} 和 `postrouting`{.literal} 链添加到表中：
    ``` literallayout
    # nft -- add chain ip nat prerouting { type nat hook prerouting priority -100 \; }
    # nft add chain ip nat postrouting { type nat hook postrouting priority 100 \; }
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    将 `--`{.literal} 选项传给 `nft`{.literal} 命令，以避免 shell
    将负优先级的值解析为 `nft`{.literal} 命令的一个选项。
    :::
3.  在 `prerouting`{.literal} 链中添加一条规则，将端口 `443`{.literal}
    上传入的数据包重定向到 `192.0.2.1`{.literal} 上的同一端口：
    ``` literallayout
    # nft add rule ip nat prerouting tcp dport 443 dnat to 192.0.2.1
    ```
4.  在 `postrouting`{.literal} 链中添加一条规则来伪装传出的流量：
    ``` literallayout
    # nft add rule ip daddr 192.0.2.1 masquerade
    ```
5.  启用数据包转发：
    ``` literallayout
    # echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/95-IPv4-forwarding.conf
    # sysctl -p /etc/sysctl.d/95-IPv4-forwarding.conf
    ```
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#assembly_using-nftables-to-limit-the-amount-of-connections_getting-started-with-nftables}使用 nftables 来限制连接数量 {.title}
:::
您可以使用 `nftables`{.literal}
来限制连接数量或阻止尝试建立给定数量连接的 IP
地址，以防止它们使用过多的系统资源。
::: section
::: titlepage