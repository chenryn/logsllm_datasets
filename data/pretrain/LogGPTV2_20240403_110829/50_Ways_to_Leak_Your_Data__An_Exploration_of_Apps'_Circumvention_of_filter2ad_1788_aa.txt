title:50 Ways to Leak Your Data: An Exploration of Apps' Circumvention of
the Android Permissions System
author:Joel Reardon and
&apos;Alvaro Feal and
Primal Wijesekera and
Amit Elazari Bar On and
Narseo Vallina-Rodriguez and
Serge Egelman
50 Ways to Leak Your Data: An Exploration of Apps’ 
Circumvention of the Android Permissions System
Joel Reardon, University of Calgary / AppCensus Inc.; Álvaro Feal, IMDEA Networks Institute 
/ Universidad Carlos III Madrid; Primal Wijesekera, U.C. Berkeley / ICSI; Amit Elazari Bar On, 
U.C. Berkeley; Narseo Vallina-Rodriguez, IMDEA Networks Institute / ICSI / AppCensus Inc.; 
Serge Egelman, U.C. Berkeley / ICSI / AppCensus Inc.
https://www.usenix.org/conference/usenixsecurity19/presentation/reardon
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.An Exploration of Apps’ Circumvention of the Android Permissions System
50 Ways to Leak Your Data:
Joel Reardon
University of Calgary
AppCensus, Inc.
Amit Elazari Bar On
U.C. Berkeley
Abstract
Álvaro Feal
IMDEA Networks Institute
Universidad Carlos III de Madrid
Narseo Vallina-Rodriguez
IMDEA Networks Institute / ICSI
AppCensus, Inc.
Primal Wijesekera
U.C. Berkeley / ICSI
Serge Egelman
U.C. Berkeley / ICSI
AppCensus, Inc.
Modern smartphone platforms implement permission-based
models to protect access to sensitive data and system re-
sources. However, apps can circumvent the permission model
and gain access to protected data without user consent by us-
ing both covert and side channels. Side channels present in
the implementation of the permission system allow apps to
access protected data and system resources without permis-
sion; whereas covert channels enable communication between
two colluding apps so that one app can share its permission-
protected data with another app lacking those permissions.
Both pose threats to user privacy.
In this work, we make use of our infrastructure that runs
hundreds of thousands of apps in an instrumented environ-
ment. This testing environment includes mechanisms to mon-
itor apps’ runtime behaviour and network trafﬁc. We look for
evidence of side and covert channels being used in practice
by searching for sensitive data being sent over the network
for which the sending app did not have permissions to access
it. We then reverse engineer the apps and third-party libraries
responsible for this behaviour to determine how the unautho-
rized access occurred. We also use software ﬁngerprinting
methods to measure the static prevalence of the technique that
we discover among other apps in our corpus.
Using this testing environment and method, we uncovered a
number of side and covert channels in active use by hundreds
of popular apps and third-party SDKs to obtain unauthorized
access to both unique identiﬁers as well as geolocation data.
We have responsibly disclosed our ﬁndings to Google and
have received a bug bounty for our work.
1 Introduction
Smartphones are used as general-purpose computers and
therefore have access to a great deal of sensitive system re-
sources (e.g., sensors such as the camera, microphone, or
GPS), private data from the end user (e.g., user email or con-
tacts list), and various persistent identiﬁers (e.g., IMEI). It
is crucial to protect this information from unauthorized ac-
cess. Android, the most-popular mobile phone operating sys-
tem [75], implements a permission-based system to regulate
access to these sensitive resources by third-party applications.
In this model, app developers must explicitly request permis-
sion to access sensitive resources in their Android Manifest
ﬁle [5]. This model is supposed to give users control in decid-
ing which apps can access which resources and information;
in practice it does not address the issue completely [30, 86].
The Android operating system sandboxes user-space apps
to prevent them from interacting arbitrarily with other run-
ning apps. Android implements isolation by assigning each
app a separate user ID and further mandatory access controls
are implemented using SELinux. Each running process of an
app can be either code from the app itself or from SDK li-
braries embedded within the app; these SDKs can come from
Android (e.g., ofﬁcial Android support libraries) or from third-
party providers. App developers integrate third-party libraries
in their software for things like crash reporting, development
support, analytics services, social-network integration, and ad-
vertising [16, 62]. By design, any third-party service bundled
in an Android app inherits access to all permission-protected
resources that the user grants to the app. In other words, if an
app can access the user’s location, then all third-party services
embedded in that app can as well.
In practice, security mechanisms can often be circum-
vented; side channels and covert channels are two common
techniques to circumvent a security mechanism. These chan-
nels occur when there is an alternate means to access the pro-
tected resource that is not audited by the security mechanism,
thus leaving the resource unprotected. A side channel exposes
a path to a resource that is outside the security mechanism;
this can be because of a ﬂaw in the design of the security
mechanism or a ﬂaw in the implementation of the design. A
classic example of a side channel is that power usage of hard-
ware when performing cryptographic operations can leak the
particulars of a secret key [42]. As an example in the phys-
ical world, the frequency of pizza deliveries to government
buildings may leak information about political crises [69].
USENIX Association
28th USENIX Security Symposium    603
A covert channel is a more deliberate and intentional effort
between two cooperating entities so that one with access to
some data provides it to the other entity without access to
the data in violation of the security mechanism [43]. As an
example, someone could execute an algorithm that alternates
between high and low CPU load to pass a binary message to
another party observing the CPU load.
The research community has previously explored the po-
tential for covert channels in Android using local sockets and
shared storage [49], as well as other unorthodox means, such
as vibrations and accelerometer data to send and receive data
between two coordinated apps [3]. Examples of side chan-
nels include using device sensors to infer the gender of the
user [51] or uniquely identify the user [72]. More recently,
researchers demonstrated a new permission-less device ﬁn-
gerprinting technique that allows tracking Android and iOS
devices across the Internet by using factory-set sensor cali-
bration details [90]. However, there has been little research in
detecting and measuring at scale the prevalence of covert and
side channels in apps that are available in the Google Play
Store. Only isolated instances of malicious apps or libraries
inferring users’ locations from WiFi access points were re-
ported, a side channel that was abused in practice and resulted
in about a million dollar ﬁne by regulators [82].
In fact, most of the existing literature is focused on under-
standing personal data collection using the system-supported
access control mechanisms (i.e., Android permissions). With
increased regulatory attention to data privacy and issues sur-
rounding user consent, we believe it is imperative to under-
stand the effectiveness (and limitations) of the permission
system and whether it is being circumvented as a preliminary
step towards implementing effective defenses.
To this end, we extend the state of the art by developing
methods to detect actual circumvention of the Android per-
mission system, at scale in real apps by using a combination
of dynamic and static analysis. We automatically executed
over 88,000 Android apps in a heavily instrumented environ-
ment with capabilities to monitor apps’ behaviours at the sys-
tem and network level, including a TLS man-in-the-middle
proxy. In short, we ran apps to see when permission-protected
data was transmitted by the device, and scanned the apps to
see which ones should not have been able to access the trans-
mitted data due to a lack of granted permissions. We grouped
our ﬁndings by where on the Internet what data type was sent,
as this allows us to attribute the observations to the actual app
developer or embedded third-party libraries. We then reverse
engineered the responsible component to determine exactly
how the data was accessed. Finally, we statically analyzed
our entire dataset to measure the prevalence of the channel.
We focus on a subset of the dangerous permissions that pre-
vent apps from accessing location data and identiﬁers. Instead
of imagining new channels, our work focuses on tracing ev-
idence that suggests that side- and covert-channel abuse is
occurring in practice.
We studied more than 88,000 apps across each category
from the U.S. Google Play Store. We found a number of side
and covert channels in active use, responsibly disclosed our
ﬁndings to Google and the U.S. Federal Trade Commission
(FTC), and received a bug bounty for our efforts.
In summary, the contributions of this work include:
• We designed a pipeline for automatically discovering vul-
nerabilities in the Android permissions system through
a combination of dynamic and static analysis, in effect
creating a scalable honeypot environment.
• We tested our pipeline on more than 88,000 apps and
discovered a number of vulnerabilities, which we respon-
sibly disclosed. These apps were downloaded from the
U.S. Google Play Store and include popular apps from
all categories. We further describe the vulnerabilities in
detail, and measure the degree to which they are in ac-
tive use, and thus pose a threat to users. We discovered
covert and side channels used in the wild that compro-
mise both users’ location data and persistent identiﬁers.
• We discovered companies getting the MAC addresses of
the connected WiFi base stations from the ARP cache.
This can be used as a surrogate for location data. We
found 5 apps exploiting this vulnerability and 5 with the
pertinent code to do so.
• We discovered Unity obtaining the device MAC address
using ioctl system calls. The MAC address can be
used to uniquely identify the device. We found 42 apps
exploiting this vulnerability and 12,408 apps with the
pertinent code to do so.
• We also discovered that third-party libraries provided
by two Chinese companies—Baidu and Salmonads—
independently make use of the SD card as a covert chan-
nel, so that when an app can read the phone’s IMEI, it
stores it for other apps that cannot. We found 159 apps
with the potential to exploit this covert channel and em-
pirically found 13 apps doing so.
• We found one app that used picture metadata as a side
channel to access precise location information despite
not holding location permissions.
These deceptive practices allow developers to access users’
private data without consent, undermining user privacy and
giving rise to both legal and ethical concerns. Data protec-
tion legislation around the world—including the General Data
Protection Regulation (GDPR) in Europe, the California Con-
sumer Privacy Act (CCPA) and consumer protection laws,
such as the Federal Trade Commission Act—enforce trans-
parency on the data collection, processing, and sharing prac-
tices of mobile applications.
This paper is organized as follows: Section 2 gives more
background information on the concepts discussed in the in-
troduction. Section 3 describes our system to discover vul-
nerabilities in detail. Section 4 provides the results from our
604    28th USENIX Security Symposium
USENIX Association
study, including the side and covert channels we discovered
and their prevalence in practice. Section 5 describes related
work. Section 6 discusses their potential legal implications.
Section 7 discusses limitations to our approach and concludes
with future work.
2 Background
The Android permissions system has evolved over the years
from an ask-on-install approach to an ask-on-ﬁrst-use ap-
proach. While this change impacts when permissions are
granted and how users can use contextual information to rea-
son about the appropriateness of a permission request, the
backend enforcement mechanisms have remained largely un-
changed. We look at how the design and implementation of
the permission model has been exploited by apps to bypass
these protections.
2.1 Android Permissions
Android’s permissions system is based on the security prin-
ciple of least privilege. That is, an entity should only have
the minimum capabilities it needs to perform its task. This
standard design principle for security implies that if an app
acts maliciously, the damage will be limited. Developers must
declare the permissions that their apps need beforehand, and
the user is given an opportunity to review them and decide
whether to install the app. The Android platform, however,
does not judge whether the set of requested permissions are
all strictly necessary for the app to function. Developers are
free to request more permissions than they actually need and
users are expected to judge if they are reasonable.
The Android permission model has two important aspects:
obtaining user consent before an app is able to access any of
its requested permission-protected resources, and then ensur-
ing that the app cannot access resources for which the user
has not granted consent. There is a long line of work uncov-
ering issues on how the permission model interacts with the
user: users are inadequately informed about why apps need
permissions at installation time, users misunderstand exactly
what the purpose of different permissions are, and users lack
context and transparency into how apps will ultimately use
their granted permissions [24, 30, 78, 86]. While all of these
are critical issues that need attention, the focus of our work is
to understand how apps are circumventing system checks to
verify that apps have been granted various permissions.
When an app requests a permission-protected resource, the
resource manager (e.g., LocationManager, WiFiManager,
etc.) contacts the ActivityServiceManager, which is the
reference monitor in Android. The resource request originates
from the sandboxed app, and the ﬁnal veriﬁcation happens
inside the Android platform code. The platform is a Java oper-
ating system that runs in system space and acts as an interface
for a customized Linux kernel, though apps can interact with
the kernel directly as well. For some permission-protected
resources, such as network sockets, the reference monitor is
the kernel, and the request for such resources bypasses the
platform framework and directly contacts the kernel. Our
work discusses how real-world apps circumvent these system
checks placed in the kernel and the platform layers.
The Android permissions system serves an important pur-
pose: to protect users’ privacy and sensitive system resources
from deceptive, malicious, and abusive actors. At the very
least, if a user denies an app a permission, then that app should
not be able to access data protected by that permission [24,81].
In practice, this is not always the case.
2.2 Circumvention
Apps can circumvent the Android permission model in differ-
ent ways [3,17,49,51,52,54,70,72,74]. The use of covert and
side channels, however, is particularly troublesome as their
usage indicates deceptive practices that might mislead even
diligent users, while underscoring a security vulnerability in
the operating system. In fact, the United State’s Federal Trade
Commission (FTC) has ﬁned mobile developers and third-
party libraries for exploiting side channels: using the MAC ad-
dress of the WiFi access point to infer the user’s location [82].
Figure 1 illustrates the difference between covert and side
channels and shows how an app that is denied permission by
a security mechanism is able to still access that information.
Covert Channel A covert channel is a communication path
between two parties (e.g., two mobile apps) that allows them
to transfer information that the relevant security enforcement
mechanism deems the recipient unauthorized to receive [18].
For example, imagine that AliceApp has been granted permis-
sion through the Android API to access the phone’s IMEI (a
persistent identiﬁer), but BobApp has been denied access to
that same data. A covert channel is created when AliceApp
legitimately reads the IMEI and then gives it to BobApp,
even though BobApp has already been denied access to this
same data when requesting it through the proper permission-
protected Android APIs.
In the case of Android, different covert channels have been
proposed to enable communication between apps. This in-
cludes exotic mediums such as ultrasonic audio beacons and
vibrations [17, 26]. Apps can also communicate using an ex-
ternal network server to exchange information when no other
opportunity exists. Our work, however, exposes that rudimen-
tary covert channels, such as shared storage, are being used
in practice at scale.
Side Channel A side channel is a communication path that
allows a party to obtain privileged information without rel-
evant permission checks occurring. This can be due to non-
conventional unprivileged functions or features, as well as er-
satz versions of the same information being available without
USENIX Association