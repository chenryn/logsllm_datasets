pPrev=pNode;
pNode->m_pNext=pPrev;
if（pNext== NULL)
ListNode*
pNode
pReversedHead =pNode;
pNext=pNode->m_pNext;
pHead;
第3章
高质量的代码113
---
## Page 128
114剑指Offer
后的升序链表如链表3所示。链表结点定义如下：
点仍然是按照递增排序的。例如输入图3.7中的链表1和链表2，则合并之
面试题17：合并两个排序的链表
的把握能够通过这轮面试了。
患、万无一失了。
想到这些测试用例，并用它们来检查测试自己的代码，那就能保证有备无
聘者代码的方法也是用他事先准备好的测试用例来测试。如果应聘者能够
题目：输入两个递增排序的链表，合并这两个链表并使新链表中的结
用递归实现同样的反转链表的功能。
本题扩展：
本题考点：
测试用例：
本题完整的源代码详见16_ReverseList项目。
如果我们确信代码能够通过这3类测试用例的测试，那我们就有很大
源代码：
以这道题为例，我们至少应该想到几类测试用例对代码做功能测试：
特别注重考查应聘者思维的全面性及写出来的代码的鲁棒性。
特殊输入测试（链表头结点为NULL指针)。
功能测试(输入的链表含有多个结点，链表中只有一个结点)。
输入的链表只有一个结点。
输入的链表头指针是NULL。
考查应聘者对链表、指针的编程能力。
输入的链表有多个结点。
一名企面试官精讲典型编程题（纪念版）
---
## Page 129
图3.8合并两个递增链表的过程
点将是合并后链表的头结点（如图3.8（a）所示)。
开始。链表1的头结点的值小于链表2的头结点的值，因此链表1的头结
来分析如何解决这两个问题。
棒性方面存在问题，程序一旦有特殊的输入（如空链表）就会崩溃。接下
合并出来的链表要么中间断开了要么并没有做到递增排序；二是代码在鲁
者最容易犯两种错误：一是在写代码之前没有对合并的过程想清楚，最终
序链表为链表3。
图3.7合并两个排序链表的过程
链表2：
银：
链表3：
struct ListNode
首先分析合并两个链表的过程。我们的分析从合并两个链表的头结点
这是一个经常被各公司采用的面试题。在面试过程中，我们发现应聘
注：链表1和链表2是两个递增排序的链表，合并这两个链表得到升
ListNode* m_pNext;
int
日TTTTT日T窗
日TI
p2_
m_nValue;
口
第3章高质量的代码115
---
## Page 130
116
剑指Offer一
ListNode*Merge(ListNode* pHeadl,ListNode* pHead2)
之后，就可以动手写代码了。下面是一段参考代码：
个链表都是空链表，合并的结果是得到一个空链表。
的时候，我们把它和第一个链表合并得到的结果就是第一个链表。如果两
并的结果就是第二个链表。同样，当输入的第二个链表的头结点是空指针
也就是它的头结点是一个空指针时，那么把它和第二个链表合并，显然合
会引入空的指针，因此我们要对空链表单独处理。当第一个链表是空链表，
存时程序就会崩溃，从而导致鲁棒性问题。在本题中一旦输入空的链表就
并过程。
之后，两个链表剩余的结点依然是排序的，因此合并的步骤和之前的步骤
结点（值为1的结点）链接起来，如图3.8（b）所示。
得到的链表的头结点。我们把这个结点和前面合并链表时得到的链表的尾
值小于链表1的头结点的值，因此链表2的头结点的值将是合并剩余结点
的步骤是一样的。我们还是比较两个头结点的值。此时链表2的头结点的
两个链表中剩下的结点依然是排序的，因此合并这两个链表的步骤和前面
把这个结点和之前已经合并好的链表的尾结点链接起来。
的值小于链表1的头结点的值，因此链表2的头结点是剩余结点的头结点
的头结点是合并后链表的头结点。（b）在剩余的结点中，链表2的头结点
是一样的。这就是典型的递归的过程，我们可以定义递归函数完成这一合
else
if(pHead1->m_nValuem_nValue)
ListNode* pMergedHead = NULL;
else if(pHead2 ==
if(pHead1 == NULL)
在我们想清楚合并的过程，并且知道哪些输入可能会引起鲁棒性问题
接下来我们来解决鲁棒性的问题。每当代码试图访问空指针指向的内
当我们得到两个链表中值较小的头结点并把它链接到已经合并的链表
我们继续合并两个链表中剩余的结点（图3.8中虚线框中的链表）。在
注：（a）链表1的头结点的值小于链表2的头结点的值，因此链表1
pMergedHead=pHead1;
return pHeadl;
returnpHead2;
一名企面试官精讲典型编程题（纪念版）
NULL)
---
## Page 131
点的定义如下：
面试题18：树的子结构
truct
BinaryTreeNode*
BinaryTreeNode*
int
题目：输入两棵二叉树A和B，判断B是不是A的子结构。二叉树结
本题完整的源代码详见17_MergeSortedLists 项目。
return pMergedHead;
本题考点：
测试用例
源代码
BinaryTreeNode
pMergedHead->m_pNext = Merge (pHeadl, pHead2->m_pNext) ;
pMergedHead =pHead2;
聘者在写代码之前全面分析哪些情况会引入空指针，并考虑清楚怎
考查应聘者能不能写出鲁棒的代码。由于有大量指针操作，
考查应聘者分析问题的能力。解决这个问题需要大量的指针操作，
特殊输入测试（两个链表的一个或者两个头结点为 NULL 指针、
功能测试（输入的两个链表有多个结点，结点的值互不相同或者
么处理这些空指针。
如果稍有不慎就会在代码中遗留很多与鲁棒性相关的隐患。建议应
正确的代码。
应聘者如果没有透彻地分析问题形成清晰的思路，那么他很难写出
两个链表中只有一个结点)。
存在值相等的多个结点）。
m_pRight;
m_nValue;
高质量的代码
应聘者
117
---
## Page 132
118
剑指Offer-
结构和树B的结构不一致
图3.10树A的根结点和B的根结点的值相同，但树A的根结点下面（实线部分）的
子结点的值是8，而树B的根结点的左子结点是9，对应的两个结点不同。
是不是含有和树B一样的结构（如图3.10所示)。在树A中，根结点的左
发现它的根结点的值就是8。接着我们就去判断树A的根结点下面的子树
到值为8（树B的根结点的值）的结点。从树A的根结点开始遍历，我们
结构。
点R，第二步再判断树A中以R为根结点的子树是不是包含和树B一样的
树，我们可以分成两步：第一步在树A中找到和B的根结点的值一样的结
中留下隐患。
择。面对着大量的指针操作，我们要更加小心，否则一不留神就会在代码
常会比链表的要难。如果想加大面试的难度，树的题目是很多面试官的选
图3.9两棵二叉树A和B，右边的树B是左边的树A的子结构
样的，因此B是A的子结构。
口
以上面的两棵树为例来详细分析这个过程。首先我们试着在树A中找
现在回到这个题目本身。要查找树A 中是否存在和树B 结构一样的子
和链表相比，树中的指针操作更多也更复杂，
例如图3.9中的两棵二叉树，由于A中有一部分子树的结构和B是一
1 白
一名企面试官精讲典型编程题（纪念版）
口
L
因此与树相关的问题通
---
## Page 133
程序非常容易崩溃，这是面试时非常忌讳的事情。
树A或树B为空的时候，定义相应的输出。如果没有检查并做相应的处理，
bool HasSubtree(BinaryTreeNode*pRootl,BinaryTreeNode*pRoot2)
没有特别要求，我们通常都会采用递归的方式。下面是参考代码：
也可以用循环的方法去遍历。由于递归的代码实现比较简洁，面试时如果
历。对二叉树这种数据结构熟悉的读者自然知道可以用递归的方法去遍历，
结构一致
图3.11在树A中找到第二个值为8的结点，该结点下面（实线部分）的结构和B的
B 是树A的子结构。
全相同。此时我们在树A中找到了一个和树B 的结构一样的子树，因此树
历这个结点下面的子树，先后得到两个子结点9和2，这和树B的结构完
下面的子树是否含有和树B一样结构的子树（如图3.11所示)。于是我们遍
二层中找到了一个值为8的结点，然后进行第二步判断，即判断这个结点
在上述代码中，我们递归调用 HasSubtree 遍历二叉树 A。如果发现某
在面试的时候，我们一定要注意边界条件的检查，即检查空指针。当
return result;
boolresult=false;
if(pRoot1 != NULL && pRoot2!=NULL)
第一步在树A中查找与根结点的值一样的结点，这实际上就是树的遍
因此我们仍然需要遍历树A，
if(!result)
if(!result)
result = HasSubtree(pRootl->m_pRight, pRoot2);
result=DoesTree1HaveTree2(pRoot1,pRoot2);
result =HasSubtree(pRoot1->m_pLeft,pRoot2);
接着查找值为8的结点。我们在树的第
第3章高质量的代码119
---
## Page 134
120
?
剑指Offer-
B的结点中含有分叉。只有这样才能写出让面试官满意的鲁棒代码。
指针，在树A和树B中所有结点都只有左子结点或者右子结点，树A和树
测试用例来检验自已的程序：树A和树B的头结点有一个或者两个都是空
都要问自己这个指针有没有可能是NULL，如果是NULL该怎么处理。
时候都要问自己这个地址有没有可能是NULL，如果是NULL该怎么处理。
件。在写遍历树的代码的时候一定要高度警惕，在每一处需要访问地址的
了避免试图访问空指针而造成程序崩溃，同时也设置了递归调用的退出条
pRoot2)
bool DoesTreelHaveTree2(BinaryTreeNode* pRoot1, BinaryTreeNode*
的终止条件是我们到达了树A或者树B的叶结点。参考代码如下：
它们的值相同，则递归地判断它们各自的左右结点的值是不是相同。递归
结点不相同，则以R为根结点的子树和树B肯定不具有相同的结点；如果
构。同样，我们也可以用递归的思路来考虑：如果结点R的值和树B的根
二步判断。
一结点的值和树B的头结点的值相同，则调用DoesTreelHaveTree2，做第
为了确保自己的代码完整正确，在写出代码之后应聘者至少要用几个
if(pRootl
if(pRoot2 == NULL)
本题完整的源代码详见18_SubstructureInTree项目。
源代码：
二叉树相关的代码有大量的指针操作，每一次使用指针的时候，我们
我们注意到上述代码有多处判断一个指针是不是NULL，这样做是为
return DoesTree1HaveTree2(pRoot1->m pLeft,pRoot2->m pLeft)&&
if(pRoot1->m_nValue != pRoot2->m_nValue)
第二步是判断树A中以R为根结点的子树是不是和树B具有相同的结
DoesTree1HaveTree2(pRoot1->m_pRight,pRoot2->m_pRight);
return false;
returnfalse;
return
一名企面试官精讲典型编程题（纪念版）
== NULL)
true;
---
## Page 135