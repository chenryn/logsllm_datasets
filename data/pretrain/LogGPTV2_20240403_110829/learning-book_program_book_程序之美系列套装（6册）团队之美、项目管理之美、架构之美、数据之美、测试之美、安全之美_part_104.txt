性，并将其分成有用的组。这样就有可能了解不同的可行的设计方
向，并开始了解其差异（作为规则，把事情分成4或5组，比分成
30、50或150个独立的事物要更容易处理。该规律适用于想法、规
格说明书、多动儿董、小动物、一些糖果、毫无根据地做出愚鑫列
576
---
## Page 578
表的讨厌的作者等。）有些想法以原型展示，而其他想法以涂鸦、
笔记或未研究过的想法的形式存在，也是不错的。目标不是消除或
改良每个想法，而是让它们成形并结构化。
完成这项工作有很多种技巧L，但我所知道的最简单的方法是使用
亲和图（affinitydiagram，也称为KJ图，以人类学家川喜田二郎
（KawakitaJiro）的名字命名）。这种方法需要4种东西：想法、墙
壁、即时贴以及团队（不过，有好喝的啤酒和美味的食物会有帮
助）。在亲和图中，通过注释表示每个想法，只用少数几个词来描
述它，并将其贴在墙上。这些想法可能是头脑风暴会议的产物，或
者是由团队中的一个或多个人提炼出来的列表。想法的数量会从20
到100或更多，根据你试图解决的问题范围大小以及参加者的创意
能力的高低，会极大地影响每个项目的想法数量。
通过亲和图，你将看到一个表示各种想法的更宽阔的视野。看起来
就像图6-4所示。有些想法是类似的，你需要把它们放在一起以便于
识别。以可视化的方式工作，可以使大家把焦点放在关系上，而非
把焦点放在他们可以通过大脑记录多少信息上。亲和图也将自然地
有助于大家相互讨论想法，一小组人员可以一起站在墙边，对看见
的关系进行评论，当他们得出新所结论时，可用改变即时贴的位
置。亲和图使用即时贴是因为能够在墙上移动他们，从而易于将其
组织成不同的排列方式。
图6-4：有很多想法，但难以管理它们
577
---
## Page 579
亲和图的目标是做到像图6-5展示的那样。最初的想法列表现在已被
分成5组，这些代表了大多数可用的想法。做法很简单。有个人走
到墙边，开始移动想法。首席设计师、项目经理或一个小组应该最
先尝试组织这些想法。当有人迈出第一步后，其他人就能很容易走
出下一步：在各组之间移动想法、改变组的名称、或者识别并去除
相互重复的想法。当团队的人停在墙边并进行改变时，这张图就会
以很多有趣的方式来改变形状（技巧：如果你想保留不同人做出的
不同分组方式，可以考虑定期拍下数字照片。）最后，亲和图会平
静下来，而呈现出来的分组就将用于下一步。
图6-5：将想法分组是个好想法
为了避免在描述亲和图如何运作时过于抽象，下面的例子通过另一
种方式来说明图6-5。假设项目目标之一，是使公司intranet站点的搜
索结果更加易于使用。我们开会、进行头脑风暴、喝些啤酒，然后
得出一份长长的想法列表。第二天早晨，大家又有几条想法，于
是，我们也把它们包含进来。我们检查这个列表，去掉重复的想
法，一边笑着一边删掉那些无人能做出解释的想法，最后，得出了
这个基本想法列表：
·去掉没人使用的高级选项。
改善搜索结果页面的布局。
使用优秀的HyperX搜索引擎。
578
---
## Page 580
减少显示结果的数量。
允许用户设定参数，以决定网页如何显示。
通过打开新窗口来显示结果。
修正我们搜索引擎中的性能问题。
让查询引擎正确运作（支持布尔搜索）。
在检查列表，并使用即时贴或其他方法对想法进行分组后，我们花
了半小时来组织它们。将它们来回移动，尝试不同的排列方式，最
后获得了一份我们认为最有用的列表：
·简化
去掉没人使用的高级选项。
改善搜索结果页面的布局。
减少显示结果的数量。
定制化
允许用户设定参数，以决定网页如何显示。
通过打开新窗口来显示结果。
改变架构
让查询引擎正确运作（支持布尔搜索）。
修正我们搜索引擎中的性能问题。
使用优秀的HyperX搜索引擎。
这里的分组非常简单，因为一共只有8个想法，就工作得很好了。
但是，如果我们有40或50个想法，列表就无法顺畅地运作了。列表
促使人采用线性化和层次化的思考方式，当列表过大时，就会变得
滩以控制。在后面的开发中，列表是推动过程前进的非常好的方
法，但是，在项目的早期阶段，亲和图更为有效。它可帮助大家看
579
---
## Page 581
到想法的流动性，了解想法是可以感知的、可以任意移动并容易重
组的。这种流动性有助于大家对其假设提问，看到新的观点，以及
关注其他人的想法。对于刚开始进行创意思考的多个小组（尤其是
一个团队），亲和图是个非常好的方法。考虑作为项目经理的你自
已的个人目的来使用列表，但是，对于团队应该使用亲和图。我相
信这有助于找到更多的好想法，并把大家带进这个流程。
改良及制定优先级
不用担心如何找出“最好的”分组一一不错的分组就够了。即使面对
很少的想法，也存在很多种分组方法，这些方法多数都不错。我们
的目标是建立4或5个分组，来表示不同的立场或方向。有些想法或
许不适合于任何一个分组，但是，尽你的力量去做就好了。
记住，如果需要你可以将这些想法恢复原状，然后对其重新分组。
当你发现很好的东西时，就继续下去。你不需要把亲和图或想法列
表提交给客户，所以，不要顾虑太多。
最后一项要考虑的练习，是采取非正式的过程，来设定想法的优先
级（我将在第12章介绍正规的设定优先级的方法）。哪些想法最有
希望？回去看看项目远景和要解决的问题，以确保每个人都了解真
正的准则。由于某些原因，喜欢上与项目目标无关的想法是很容易
发生的事。应该有人推动这个过程，无论他是项目经理还是首席设
计师。讨论时越非正式，所花时间就越少。没有必要制定复杂的规
则检查列表和评估过程。你所需要的全部，就是在并始制作原型
前，粗略了解一下哪些概念更加重要。当进度表所安排的时间变短
时，通过这种粗略的指导，使你更易于判断应该把剩余时间安排在
何处。
原型是你的朋友
在第5章中，我解释了设计为何需要进行探索。你必须探索问题空
间，以了解有哪些可选方案。好的设计取决于对可选方案的了解，
因为你对问题和解决方案了解的信息越多，就越容易作出好的决
策。原型是设计流程中自然的下一步。原型将已经了解的一切应用
到问题上，使我们无需承担全面实现的风险。原型在团队对规划作
出承诺前，通过改善设计思考，实现了未匠的格言：“量两次，切
一次。"如同我接下来解释的那样，原型不需要精细、昂贵、或著
580
---
## Page 582
花费很多时间。如果你怀疑原型的价值，可以跳到本书的“原型支
持程序员"这一节。
原型从哪里开始？
当手中有4或5个分组时，你就为建立好原型铺好了路。虽然创意技
能更好的人，也许在几天之前就了解可选方案的方向，但对想法进
行分组将使团队更容易了解存在多少种可选方案。如果有20或30个
想法，就会存在数百种结合想法的方式，更不用说有多少种不同方
式来解释每个独立的想法了。
有经验的设计师对于如何并始原型会有很好的直觉。他会自如地整
理可用的想法，决定要先做什么原型（不提如何做原型）。但是，
如果你在设计时还没有任何原型，以下是关于选择做什么原型的一
些简单方法：
从每个分组中找出最有希望的想法，尽量将这些想法整合成一个设
计。
为每个分组做小型原型，以观察它们走向何处。所有需要解决的问
题，只通过改变架构或者增加定制化功能是否能够解决？了解每种
原型产生的设计结果。
设计师的判断：允许设计师利用其经验和直觉来决定第一步使用什
么。
将最难或最重要的设计问题列成列表，通过做出原型来帮助找到这
些问题的答案。
通常，原型越复杂，他就能回答越复杂的问题。对于非常早的、非
常粗略的问题，画在餐币纸背面上的草图也是可以的，但是，如果
你想知道特定的事物，并且想要对答案有信心，你就需要了解更多
的相关知识。
在建立第一个原型时，应该很清楚：增加哪些附加想法不会产生问
题，以及哪些想法不再适用。就像拼图玩具那样，有些东西凑在一
起，会比其他东西凑在一起更有意义，但这需要通过试验、发现错
误的过程来找出这种组合。因为原型涉及很多观点（客户、业务、
技术），要预测哪些路径可行以及哪些路径不可行是不可能的。这
就是建立原型的目的：犯错、学习、修正和前进。
581
---
## Page 583
为具有用户界面的项目建立原型
应该从上至下来建立原型。从用户将看到的东西以及用户看到的次
序开始。尽早让可用性专家和设计专家参与这个过程，以得到一些
合理的设计和假设。除非先做儿个屏幕原型，否则，花费数大时间
来规划数据库和XML结构，并没有多大意义：这就好像在你看到建
筑平面图之前，先建造房屋的框架。如果你这样做，一定会影响产
品的质量，这就是制作原型想要避并的问题。
替而代之，我们要等待，直到有希望会实现的（最好通过可用性研
究，或者逐个检查用户在每个屏幕中所作的决策来决定）用户界面
的草图或图样出现。然后，工程师应该研究如何实际实现他们。如
果类似的讨论在项目早期并始，这些工作就应该自然容易地继续下
去。
对于如何建立原型，没什么神秘的。这需要一些经验，来学习哪些
功能可以通过假设或掩饰，哪些功能需要更多的思索和投资IL。通
常规则是尽量少做工作，只要能获得所需信息即可。任何工具一
Flash、HTML、VB甚至是纸张，都可用于原型的设计。工具的选择
取决于设计师或原型制作者的技能，于技术或工具无关。
为没有用户界面的项目建立原型
对于即使没有用户界面或网站前台界面的项目，建立原型依然有意
义。不过，此时不再是关注用户界面设计的问题，而是要挑选出
最困难或最复杂的技术挑战，并为其建立原型。确认核心算法的健
壮性能够满足基本测试用例，或者符合性能标准的子集。无论是哪
种类型项目，建立原型的目标都是相同的：了解你正在考虑的大致
方法在分配的时间内是否可以实现，并且真正解决提出的问题。这
是在实现并始之前处理风险的一个机会，也是在承诺这些实现之前
了解需要做哪些事情的一个机会。
原型支持程序员
在设计师或项目经理可以领导建立原型工作的条件下，程序员和工
程师通常会抱怨无事可做12。他们也许会说这个过程是浪费时间
（这种说法通常发生在与编写程序代码无关的事情上）。我的想法
刚好相反，我认为，建立原型为程序员带来的好处比团队中的任何
其他人都要多。正确地建立原型可以大大改善他们所负责构建的设
582
---