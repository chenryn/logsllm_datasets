register DCP
TLS handshake
Client
IKP Contract
• Global fund balance
• CA Registry
• DCP Registry
• RP Registry
• Misbehavior checker
• Payout enforcer
report rogue cert
Detector
can act as
Client
Client
Client
Miner
Client
Client
CACA
CA
Domain
Domain
Domain
Fig. 5.
IKP architecture in our Ethereum instantiation.
Code in Ethereum is stored in smart contracts, autonomous
accounts that run their code upon receiving a transaction. A
contract maintains its own data storage and balance, access
to both of which is governed completely by its code (though
all contract data and balances can be publicly read on the
blockchain). Contracts allow for the creation of autonomous
agents whose behavior is entirely dependent on their code
and the transactions sent to them, thus providing functionality
comparable to that of a centralized party in a transparent,
decentralized manner. This beneﬁt has been utilized in such
ambitious efforts such as Decentralized Autonomous Organi-
zations (DAOs), which aim to automate governance of a central
entity using decentralized smart contracts [43]. Ethereum thus
offers the possibility of decentralized trusted entities, a feature
not possible in Bitcoin.
VIII. IKP IN ETHEREUM
We now describe our instantiation of IKP in Ethereum,
whose architecture is shown in Figure 5. We instantiated the
IKP authority as a smart contract called the IKP contract, thus
providing a decentralized authority that does not need to be
trusted. Ethereum also provides a natural computation platform
for checker and reaction programs, and its cryptocurrency
Ether can be used as the currency for ﬁnancial payments made
in IKP.
However, Ethereum had two limitations that made instanti-
ating IKP difﬁcult:
1) Necessary solvency: CAs need to pay enough into the
global fund to cover reaction payouts resulting from their
own misbehavior.
2) Report
frontrunning: detector reports (and the corre-
sponding detection payouts) can be stolen if an entity
such as a miner submits a detector’s report as its own.
Both of these required slight modiﬁcations to the centralized
version of IKP.
420
Because all payments in our instantiation of IKP will be
in Ether, the ﬁnancial account information of CAs, domains,
and detectors are simply Ethereum addresses used to send
and receive Ether transactions. Since Ethereum addresses also
represent public keys, we also use addresses as update keys
for CAs registrations and DCPs. Using Ethereum addresses in
this way allows us to take advantage of the built-in signature
veriﬁcation support for messages from addresses (i.e., transac-
tions). We note that CA public keys (described in Table I are
not Ethereum addresses, as they represent public keys used to
verify certiﬁcate signatures.
All messages to the IKP contract are sent as transactions
with the appropriate funds and parameters. This includes reg-
istration messages for CA information and for DCPs, messages
sent for RP issuance, detector reports, and messages sent to
terminate an RP. Because Ethereum requires each entity to
pay the gas costs of the computation that results from the
transaction, the incentives discussed in Section VI may not
exactly hold. However, we note that the current maximum that
an entity would pay for a transaction is around 4 million gas,
which is currently worth $3.14 USD at the standard price, and
thus with current certiﬁcate prices, the gas costs are unlikely
to make a signiﬁcant difference in the incentives.
Checker programs and reaction programs are also imple-
mented and stored as smart contracts, which we call check
contracts and reaction contracts, respectively. Because each
contract is its own account, referencing a checker program or
reaction program in a DCP or RP respectively can be done
by simply storing the address to the relevant check contract
or reaction contract. Similarly, combining checker programs
or reaction programs can be done by calling check contracts
or reaction contracts by address.
B. Ensuring Solvency
To ensure solvency, we need to ﬁrst show that CAs pay
enough into the global fund to cover any reaction payouts that
may occur if they misbehave. We can achieve this by having
the IKP contract maintain a balance for each CA, keeping track
of the payments that come in from the CA (most often from RP
issuance). Each CA must maintain a certain minimum balance
(called the solvency threshold) in order to issue new RPs.
We deﬁne the solvency threshold for a CA C as the sum of
the maximum affected-domain payout, the maximum detection
payout, and the sum of all termination payouts, computed over
all of C’s currently active RPs. This threshold ensures that for
any single instance of C misbehaving, all of C’s RP customers
and the detector will receive their appropriate payouts.
When C initially registers, it must pay a registration fee rC,
which prevents frivolous CA registration. When C wants to
issue a new RP, it must provide sufﬁcient funds to maintain
its solvency threshold. However, C can also add money to its
balance without issuing an RP or add more than is necessary
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 IKP contract handling a misbehavior report.
1: procedure PROCESS REPORT
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end procedure
end if
Input: detector address d, certiﬁcate C
D ← get subject name from C
DCP D ← lookup D in DCP map
CC ← get check contract address from DCP D
if !CC.check(C) then
RPLD ← lookup RP list for D
RP ← get reaction contract address from RPLD[0]
RP.trigger(d)
delete RP from RPLD
when issuing an RP. Exceeding the solvency threshold may
attract potential customer domains by giving them greater con-
ﬁdence that C will be held accountable in case of misbehavior.
If C issues multiple unauthorized certiﬁcates and drops below
its solvency threshold, it may not have enough funds for all
of its payouts. In this case, C’s registration fee rC is used
towards the payout amount until its balance is depleted. For the
remaining payout amount, the IKP contract records the debts
and the entities owed, and this record can be used as a basis
for legal action against C. Thus while IKP cannot provide full
protection in all cases, it improves upon the existing ecosystem
by providing some automatic reactions, and only requiring
manual intervention in extreme cases.
The IKP contract stores metrics for each registered CA,
namely, the total payout value of the CA’s current RPs, the
time of the CA’s last misbehavior, the total number of RPs
the CA has issued, and the total number of instances of
misbehavior for the CA. These metrics can help domains
evaluate whether or not a CA is trustworthy.
When choosing a CA from whom to purchase an RP or
certiﬁcate, we note that a domain can query the CA’s balance
and its outstanding liabilities (the sum of all payouts in all of
its payout reaction contracts). This provides the domain with
a measure of conﬁdence of how solvent the CA is in case of
misbehavior. Moreover, the outstanding liability amount also
serves to provide the domain with a measure of the CA’s own
conﬁdence in its security of issuing certiﬁcates.
C. Preventing Frontrunning
To report misbehavior, a detector needs to send an unautho-
rized certiﬁcate to the IKP contract. However, we must ensure
that misbehavior reports (each containing an unauthorized
certiﬁcate) cannot be stolen via frontrunning by blockchain
miners. We achieve this by using a protocol similar to the
domain registration protocol of Namecoin [69] to report mis-
behavior: a detector d ﬁrst sends a “pre-report” containing
the reporting fee and a commitment hash H(C(cid:5)s) to the IKP
contract, where C is the certiﬁcate to report and s is a secret
known only to d. After waiting for a certain number of blocks,
d opens the commitment by sending C and s to the IKP
contract. A miner or other entity that sees a pre-report does not
know s and hence cannot determine what C is until d opens the
commitment. Because reporting misbehavior requires waiting
for a set number of blocks, frontrunning is not possible.
TABLE VI
COST OF VARIOUS IKP OPERATIONS.
Operation
Approximate Cost
USD
Gas
Verif. cert.
Register CA
Update CA
Order RP
Create RP
Terminate RP
Expire RP
IKP Contract Creation
31 012
91 400
34 656
49 024
226 892
99 461
39 823
$0.0238
$0.0701
$0.0266
$0.0376
$0.1741
$0.0763
$0.0306
Operation
Bootstrap proof
Register DCP
Update DCP
Pre-report cert
Report cert
Send payouts
CA Balance
Approximate Cost
USD
Gas
681 731
152 579
181 226
63 951
149 284
107 962
39 716
$0.5232
$0.1171
$0.1391
$0.0491
$0.1146
$0.0829
$0.0305
1 660 319
$1.2742
Upon receiving the detector’s report,
the IKP contract
checks that the certiﬁcate and secret sent by d matches the
committed value sent earlier. The contract then carries out the
check shown in Algorithm 1. If the check contract returns
deems C unauthorized, the IKP contract triggers the reaction
contract for the oldest of the domain’s RPs. We note that in
addition to the reporting fee, a detector d must also pay the
gas costs for the work performed by the IKP contract.
IX. EVALUATION
In this section, we investigate the technical feasibility and
real-world challenges of IKP in today’s blockchains. In par-
ticular, we detail our prototype implementation in Ethereum,
and describe why the current limitations of Ethereum make a
full-ﬂedged deployment of IKP challenging. We also analyze
real-world CA data to determine reasonable quantities for
systemwide parameters based on existing prices.
A. Prototype Implementation
We implemented IKP in 290 lines of Solidity, a high-level
Ethereum language that resembles JavaScript. Our code is
available at https://github.com/syclops/ikp. We
faced numerous challenges during our implementation. In the
current version of Ethereum, full X.509 certiﬁcate parsing is
prohibitively expensive, exceeding the current maximum limit
on gas allowed by a single transaction. Accordingly, for the
purpose of check contracts, we had to resort to leveraging
the DER-encoded format [2] of the certiﬁcates, recursively
extracting type-length-value encoded byte strings and ﬁnding
the desired object
identiﬁer (OID) such as the domain’s
common name (usually deﬁned as its DNS name).
Additionally,
the current version of Ethereum does not
support RSA signature veriﬁcation, which hindered our effort
to determine the approximate cost of operations in IKP. We
overcame this obstacle by using a modiﬁed version of the
JavaScript-based Ethereum virtual machine [18]. The modiﬁ-
cation adds RSA veriﬁcation and sets its cost to be 200 gas; for
comparison, the cost of verifying an ECDSA signature using
the secp256k1 curve costs 3000 gas. We obtained a roughly
similar ratio of running times in comparing signature veriﬁ-
cation between these two algorithms on our own machines.
While RSA veriﬁcation is not ofﬁcially part of Ethereum,
support for signature algorithms other than ECDSA has been
421
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:11 UTC from IEEE Xplore.  Restrictions apply. 
considered [19] and is currently planned for future versions of
Ethereum [23].
To measure the approximate costs of running various IKP
operations, we ran the functions of our prototype implementa-
tion in a test Ethereum network. We measured the approximate
computational steps (in Ethereum’s gas) and approximate
cost (in US dollars) for creating the IKP contract and for
each operation supported by the IKP contract. To convert the
cost in gas to USD, we used the current standard price of
1.8 × 10−8 Ether ≈ 7.67 × 10−7 USD per unit of gas. For
the purposes of testing, we assumed that all strings (used for
domain and CA names) were a maximum of 32 bytes, and
that the public keys for certiﬁcate veriﬁcation were 2048-bit
RSA keys.
Table VI shows the costs of various operations in gas and
USD. We observe that by far the highest cost in the system
is for checking a bootstrap proof. Much of this cost comes
from simply handling data that is the size of a standard 2048-
bit certiﬁcate, since we can also see that the cost of verifying
an RSA-signed certiﬁcate is relatively low. However, since we
are dealing with amounts (under $1 USD) that are drastically
smaller than the cost of most certiﬁcates, we can conclude that
barring large ﬂuctuations in the gas price, gas limit, or price of
Ether, it is both technically and ﬁnancially feasible to deploy
IKP in the Ethereum blockchain.
B. CA Certiﬁcate Offerings
To get an estimate of sample RP payout values, we collected
data from the most popular CAs. In particular, we examined
each of the standard TLS certiﬁcate offerings of the 20 CAs
with a market share of at least 0.1%, representing 99.9% of
all TLS certiﬁcates on the Web [10]. For each certiﬁcate,
we noted the cost of a 1-year certiﬁcate (ignoring discounts
for purchasing multi-year certiﬁcates) and the relying party
warranty provided with the certiﬁcate. In total, we examined
70 certiﬁcate offerings across 18 CAs (Deutsche Telekom did
not specify a warranty amount, and Let’s Encrypt does not
offer a warranty because its certiﬁcates are free). For each
certiﬁcate available for purchase, we also calculated the risk