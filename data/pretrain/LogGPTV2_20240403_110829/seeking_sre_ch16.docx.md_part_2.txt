有效的数据库恢复策略不仅使用最有效的策略处理多个方案，还包括检测数据丢失/损坏、恢复测试和恢复验证。
## 构建基块 1：检测
  及早发现潜在的数据丢失或损坏至关重要。这意味着，当发现需要备份时，备份甚至可能老化。因此，检测必须成为所有工程的重中之重。除了围绕数据丢失或损坏建立早期检测之外，确保尽可能长的窗口期，尽早检测失败并进行恢复也至关重要。让我们来看看讨论的不同故障场景，并确定一些实际的检测方法和延长恢复窗口的方法。
### 用户错误
  减少识别数据丢失时间的最大影响之一是不允许在生产中执行手动或临时更改，为脚本创建包装器，甚至
API
级抽象；工程师可以通过有效的步骤进行指导，以确保所有更改都尽可能安全，进行测试、记录，并将其推送到相应的团队。
有效的包装器或 API 将能够执行以下操作：
-   通过参数化在多个环境中执行
-   空运行阶段，可以估计和验证执行结果
-   用于代码执行的测试套件
-   执行后验证以验证更改符合预期
-   通过同一 API 软删除或轻松回滚
-   按 ID 记录所有修改的数据，以便进行识别和恢复
通过删除这些流程的 ad hoc
和手动组件，你可以提高故障排除工程师可跟踪所有更改的可能性。所有更改都将被记录，以便有可追溯性，并且更改不会简单地消失在日常噪音中。
同样，你可以指导软件开发人员更改他们考虑从其环境中删除或删除数据的方式。开发人员可以记录连续的操作时间线（插入、新版本、删除），而不是真的删除数据或不可撤销地更改数据（也称为删除或更新操作）。这允许应用程序具有对象的完整历史记录，这允许软件级的恢复和审核，而不是昂贵且容易出错的人工恢复。这不是保证，但毕竟手动过程可以很好地记录，人们于是可以不必在自动进程中设置日志记录，或者可以干脆绕过它们。
### 应用程序错误
  当工程师引入新对象和属性时，DBRE
应与他们合作，以识别可在应用程序本身之外下游进行的数据验证。初始工作应侧重于快速测试，这些测试可在关键数据组件上提供快速反馈循环，例如指向文件的外部引用、用于强制引用完整性的关系映射以及个人标识信息（PII）。随着数据和应用程序的增长，此验证变得越来越昂贵和更有价值。建立一种文化，让工程师对数据质量和完整性负责，而不是存储引擎，这不仅在灵活使用不同数据库方面，而且在帮助人们对实验和快速移动应用程序功能。验证功能作为护栏，帮助每个人感到更勇敢和更自信。
### 基础设施服务
  任何需要恢复的灾难性基础结构影响都应通过监视操作可见性堆栈来快速捕获。但是，有些更改可能会导致无提示数据丢失、数据损坏或可用性。使用黄金安装镜像并定期将其与基础结构组件进行比较，可帮助快速识别测试映像中的偏离。同样，版本化基础结构可以帮助识别偏离的基础结构，并提醒相应的工程师或自动化。
### 操作系统和硬件错误
   与基础结构服务一样，大多数这些问题都应该通过监视日志和指标来快速发现。非标准的边缘案例需要一些思想和经验来识别和添加到监视中，以便及早发现。磁盘块上的校验和就是这方面的一个例子。并非所有文件系统都能够做到这一点，处理关键数据的团队需要花时间考虑适当的文件系统，这些文件系统可以通过检查求和来识别静默损坏。  
## 构建基块 2：多样化的存储
  有效的恢复策略侧重于将数据放置在具有不同操作特征的不同存储区域。不同的存储区域可以满足不同的恢复需求，这不仅确保正确的性能，而且保证适合任何数量的方案的成本和适当的耐用性。
### 在线高性能存储
 也就是大多数生产数据存储都将运行的存储池。它的特点是吞吐量高、延迟低，因此价非常有价值。当恢复时间至关重要时，将数据存储和相关增量备份的最近副本放在此层上至关重要。这允许快速恢复常见和关键恢复方案，包括在主机发生故障后的完整数据集副本，或快速添加节点以获取额外容量。这些池通常也有可用的快照。
### 在线低性能存储
 此存储池通常用于对延迟不敏感的数据。较大的磁盘具有低吞吐量和延迟配置文件，以及较低的价格点。这些存储池通常要大得多，会保留更多数据副本。相对不频繁、影响小或长时间运行的恢复方案使用这些较旧的备份。典型的用例包括查找和修复早期检测时滑出的应用程序或用户错误。
### 离线存储
  快照、 磁带存储，甚至类似 Amazon Glacier
之类的存储都是此类存储的示例。 快照仅存储已更改的输入/输出（I/O）块，从而允许在某些级别的资源开销下保留更多副本。快照（如果可通过卷管理器或文件系统提供）可以进行快速时间点恢复。
磁带或 Glacier
通常是外部的，需要通过车辆或缓慢的管道移动，才能将其带到可供恢复的区域。这种类型的存储可以支持业务连续性和审核要求，但在日常恢复方案中没有一席之地。不过，由于规模和成本，仍需要大量存储的存在，因此有可能在业务生命周期内存储所有数据，或者至少在完全的法律合规期限内存储所有数据。
### 对象存储
 对象存储是一种存储体系结构，它将数据作为对象而不是文件或块进行管理。对象存储提供了传统存储体系结构（如
API、对象版本控制）和通过复制和分发提供高度可用性的功能。这便于恢复特定对象。Amazon
简单存储服务 （Amazon S3）
是廉价、可扩展且可靠的对象级存储层的典型示例。
这些层中的每一层在跨多个潜在方案的可恢复性综合战略中起着一定的作用。无法预测每个可能的情况，需要如此广度。接下来，我们将讨论利用这些存储层提供可恢复性的工具。
## 构建基块 3：各种工具箱
 你会注意到，我无处讨论复制作为有效备份数据以进行恢复的一种方式。复制是盲目的，并且可能会级联用户错误、应用程序错误和损坏。必须将复制视为数据移动和同步的必要工具，但不能视为创建有用的恢复项目。同样，独立磁盘的冗余阵列
（RAID） 不是备份，它不是备份。相反，它是一种冗余。
### 完整物理备份
   我们知道，总会需要在每个作用域级别（节点级别、群集级别和数据中心级别）执行完全还原。快速、可移植的完全恢复在动态环境中非常强大且必备的。完全备份可以通过通过网络或卷完成，因此可以轻松地从特定主机或实例连接和分离。为此，你需要完整备份。
使用在线高性能存储的完整备份可立即替换到联机群集中。这些备份通常是未压缩的，因为解压缩它们需要大量的时间。使用在线低性能存储的完整备份用于构建不同的环境（如测试）或分析和数据取证。压缩是一种有效的工具，允许在有限的存储池里延长完整备份的时间。
### 增量物理备份
 增量备份弥补了上次完整备份与之后的时间间隔之间的差距。物理增量备份通常通过数据块完成，数据块中具有已更改的数据段。由于完整备份可能非常昂贵，无论是在备份期间对性能的影响还是在存储期间，增量备份都允许你快速更新可能较旧的完整备份，以便在群集中使用。
### 完整和增量逻辑备份
   完整的逻辑备份提供了可移植性和更简单的数据子集提取。它们不会用于节点的快速恢复，而是用于取证、在数据存储之间移动数据以及从大型数据集恢复特定数据子集的完美工具。
### 对象存储
  对象存储（如逻辑备份）可以方便地恢复特定对象。事实上，对象存储是针对此特定用例优化的，API
可以轻松地使用它根据需要以编程方式恢复对象。
## 构建基块 4：测试
 对于恢复这样一个基本的基础设施过程，测试往往总是一边倒，这令人吃惊。测试是确保备份可用于恢复的一个基本过程。测试通常设置为一个偶然的过程，间歇性地运行，如每月或每季度。尽管这比没有测试好，但因为允许如此大的测试间隔，在此期间的备份可能并不能工作。
有两种有效的方法来将测试添加到正在进行的流程中。第一个是将恢复融入日常流程。这样，恢复就会不断得到测试，从而能够快速识别错误和故障。此外，持续恢复会创建有关恢复时间的数据，这对于校准恢复过程以满足服务级别协议
（SLA 协议）至关重要。不断将恢复集成到日常流程的示例包括：
-   构建集成环境
-   构建测试环境
-   定期替换生产群集中的节点
如果环境不允许有足够的机会重建数据存储，还可以创建一个连续的测试过程，根据该过程，恢复最新的备份是一个持续的过程，然后验证该还原是否成功。无论是否存在自动化，即使是异地备份层也需要偶尔测试。
通过这些构建基块，可以为不同的恢复方案创建深度防御。通过绘制用于恢复这些方案和工具，可以开始从开发和资源的角度评估你的需求。
## 倡导恢复可靠性
 本节的大部分主题是创建基础结构，并侧重于使开发团队能够更好地选择如何存储、更改和恢复数据。这是可靠性的核心：利用整个组织做正确的事情，并为他们提供最好的工具范围来做到这一点。接下来，让我们讨论连续交付的功能。   
# 持续交付：从开发到生产
  SRE
可以执行的最有意义的活动之一是与软件工程师合作构建、测试和部署应用程序功能。传统的
DBA
则类似一个看门人，检查每个数据库迁移、数据库对象和访问数据库的查询。一切正常后，DBA
将计划适当的手工更改，并将其引导到生产中。但是，看门人可能会迅速成为瓶颈，从而导致
DBA 的倦怠和软件工程中的挫折。
在本节中，我的目标是了解如何有效地利用你的时间、技能和经验，有效地支持软件工程的流程，该流程利用持续集成（CI）甚至持续部署，而不会成为瓶颈。
## 教育和协作
 第一步是教育开发人员群体。如果软件工程师能够对其数据结构、SQL
和整体交互策略做出更好的选择，那么直接干预的需求就会减少。通过扮演教育者的角色，你可以对组织产生更大的影响，同时促进更好的关系、信任和沟通。
我建议，通过定期互动和战略上的协调使团队能够就数据库周围的大多数决策获得资源和自主权。记住，要保持你所做的一切具体、可衡量和可操作。定义团队在这方面取得成功的关键指标，在实施战略和更改时，了解它们如何帮助团队。
这需要不同背景、技能水平和专业背景的人员之间的跨职能互动，以便密切合作。教育和协作是这一进程的重要组成部分；这是摆脱传统
DBA 模式并成为技术团队的组成部分的绝佳机会。
### 架构
  我不是静态文档的爱好者，因为它往往独立于构建和部署体系结构的进程之外。借助配置管理和编排系统，你可以免费获得大量文档。将工具放在这些资源之上，以便轻松发现、借用资源，当然对文档的注释也能为团队创建一个活的文档。
你的工作是让工程师在不受监督的情况下每天做决定，从而获得知识、背景和历史。构建设计文档的知识库可创建围绕体系结构构建上下文和历史记录所需的结构。这些文档可能适用于需要新体系结构组件的完整项目，或者它们可能与较小的增量更改或子项目相关。