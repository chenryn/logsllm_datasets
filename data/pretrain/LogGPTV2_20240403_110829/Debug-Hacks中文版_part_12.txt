返回值设置
总结
http://download.intel.com/jp/developer/jpdoc/IA32_Arh_Dev_Man_Vol2B_i.pdf
IA3中
卷B：命令NZ
http://download.intel.com/jp/developer/jpdoc/IA32_Arh_Dev_Man_Vol2A_i.pdf
卷A：命令AM
Architectures SoftwareDeveloper'sManual Volume 2B:Instruction SetReference,
Manual Volume 2A:Instruction SetReference,A-M》和《Intel?64andIA-32
参考文献的英文版：《Intel@64andIA-32Architectures SoftwareDeveloper's
crash命令的反汇编器可以找出在源代码中的相应位置。
从汇编代码查找相应的源代码
www.TopSage.com
——译者注
大岩尚宏
80
---
## Page 96
要能确定◎对应于这3处中的哪一处，应该就能明确了。
journal_submit_data_buffers()中调用 journal_do_submit_data()的地方有 3 处。只
图 2-16
函数也被展开了。源代码中 journal_do_submit_data()的调用路径如图2-16 所示。
调用 journal_do_submit_data().这是由于优化使得没有显式声明为__inline__的 static
journal_do_submit_data(）,但是源代码中 journal_commit_transaction()并没有直接
开始按顺序阅读就太麻烦了，先来看看前后的信息吧。从可以看出，它调用了
根据前后的信息确定源代码范围
经常会查找moV命令在源代码中的相应位置。
我们来试着找找这一行对应的源代码。在分析空指针访问、内存非法访问等时，
首先反汇编 journal_commit_transaction()。
用 crash 反汇编
78
0xf88585d5 :
0xf88585d0 :
0xf88580e0 :
# crash /boot/vmlinux-2.6.19
Oxf88585c8 :
Oxf88585c3 :
0xf88585c1
0xf88585bc
oxf88580e1 :
crash> dis journal_commit_transaction
第 2 章调试前的必知必会
journal_do_submit_data()的调用路径 
:
 :
> journal_submit_data_buffers()
journal_commit_transaction()
www.TopSage.com
mov
movl $0x0,0x24 (%esp)
call 0xc120e1b9 -
mov %ebx,&eax
call oxf8858ao t_sync_datalist) {
spin_lock(&journal->j_list_lock);
cond_resched();
journal_do_submit_data(wbuf, bufs); /* 确认一下这行之后(离开journal_submit_
spin_unlock(&journal->j_ list_lock);
if (locked & test_clear_buffer_dirty(bh)) {
if (buffer_dirty(bh)) {
locked = 1;
if (test_set_buffer_locked(bh) {
journal_do_submit_data(wbuf,bufs); /*第2个*/
spin_lock(&journal->j_list_lock);
journal_do_submit_data(wbuf, bufs); /*第1个 */
 goto write_out _data;
oufs=0;
lock_buffer(bh);
oufs=0：
 transaction_t *commit_transaction)
www.TopSage.com
HACK#14 从汇编代码查找相应的源代码|  79 
/*有这一行，因为不一样*/
/*因此不一样*/
/* goto之后调用了 cond_resched()*/
data_buffers()之后)会怎样 */ —
②
82
---
## Page 98
commit_transaction->t_locked_list.
不再细看了。接下来看看·-2。如果它是while()语句，那么θx18(%edx)应该是
①无条件跳转到了·-1。此处把某个变量赋给了edp。这一点与源代码不一致，就
是一样的。接下来看看下面的源代码。黑圈数字和带圈数字一一对应。
与源代码对比就很明白了。这与“HACK#13怎样学习汇编语言”中的 while语句
接下来看看，它无条件跳转到了-1。
因此可以认为，②与?是一致的。
请看下面的源代码。journal_submit_ data_buffers()返回之后立即调用 spin_lock()。
80l
void journal_commit_transaction(journal_t *journal)
Oxf88586ab :
0xf88586a5 :
0xf88586a3 :
0xf88586a0 :
oxf885869c :
0xf8858697 : call oxc1023496 
while (commit_transaction->t_locked_list) {
spin_lock(&journal->j_list_lock); --
journal_submit_data_buffers(journal, commit_transaction);
err = 0;
 transaction_t *commit_transaction;
* Wait for all previously submitted I0 to complete.
第 2章调试前的必知必会
jh = commit_transaction->t_locked_list->b_tprev; 
struct buffer_head *bh;
bh = jh2bh(jh);
www.TopSage.com
/*立即调用了 spin_Lock(） */
mov
jne
test
mov
mov
$0x1,&al
0xf88585d5
seax,&eax
0x18(%edx), seax-
0x14(%esp), %edx-
5-1
④. ④-1、 ④-2
-④-2
4-1
5
---
## Page 99
符号已可以解析，可以看到结构的内容了。但这跟看源代码没什么两样，而且还出
加载模块之后再次确认结构。
可见符号无法解析（notloaded）。这种情况下要用 mod命令加载模块。
下的mod命令。
看不到该结构的详细情况。这是由于 jbd模块的符号无法解析的缘故。那么执行以
可使用 crash 的 struct 命令。
下面确认 Ox18(%edx)是不是 commit_transaction->t_locked_list，不用看源代码,
确认寄存器偏移量和结构的成员
struct transaction_s {
No struct type named transaction_t.
crash> struct transaction_t
crash>
f8863100 jbd
MODULE NAME
crash> mod -s jbd
crash>
f8863100 jbd
MODULE NAME
crash> mod
crash>
struct: invalid data structure reference: transaction_t
Crash> struct -o transaction_t
struct journal_head *t_locked_list;
struct journal_head *t_reserved_ list;
int t_nr_buffers;
long unsigned int t_ log_start; 
enum IT_RUNNING, T_LOCKED, T_RUNDOWN, TFLUSH, T_COMMIT, T_FINISHED) t_state;
tid_t t_tid;
journal_t *t_journal; 
SIZE OBJECT FILE
58152 (not loaded) [CONFIG_KALLSYMS]
SIZE OBJECT FILE
 58152 /lib/modules/2.6.19/kernel/fs/jbd/jbd.ko
www.TopSage.com
HACK#14
从汇编代码查找相应的源代码’ 81
84
---
## Page 100
85
以跟源代码对应起来。
这样就非常容易理解了。像这样将结构的偏移量与汇编代码中的偏移量比较，就可
外，上面已知道要确认的成员是t_locked_List，可以直接在struct命令中指定成员
eval命令进行变换，其实crash有个hex命令可以把显示内容变成十六进制数。另
就是commit_transaction->t_locked_List。上例中由于偏移量为十进制数而使用了
t_locked_list的偏移量为24,写成十六进制数就是18,可以确认?-2的0x18(%edx)
我们要与汇编代码对照，因此加上-0参数，显示结构成员的偏移量。
transaction_s。
现了No structtype...这是因为该结构是使用typedef 定义的，真正的结构名为
821
crash>
struct transaction_s{
crash> struct -o transaction_s.t_locked_list
output radix:16(hex)
crash>hex
crash>
hexadecimal:
crash>eval24
struct transaction_s{
crash> struct -o transaction_s
[0x18]struct journal_head *t_locked_list;
[include/inux/journal-head.h]
[24] struct journal_head *t_locked_list;
(16)
typedef struct transaction_s
第2章调试前的必知必会
decimal:
binary:
octal:
tid_tt_tid;
struct journal_head *t_reserved_list;
intt_nr_buffers;
long unsigned int t_log_start;
enUm {T_RUNNING,T_LOCKED, T_RUNDOWN,T_FLUSH,T_COMMIT,TFINISHED} t_State;
00000000000000000000000000011000
忆
18
/*十六进制值*/
www.TopSage.com
transaction_t;/*Compound transaction type*/
---
## Page 101
crash 的 dis 命令有个选项-l，可以输出相应源代码的文件名和行号。
确认源代码文件名和行号
t_locked_ list-> b_tprev;.
这样就能看出，汇编代码的◎就是源代码中的 jh=commit_transaction->
些，应该就是 commit_transaction->t_locked_list->b_tprev。 确认一下。
t_locked_list，这个变量已经放进了 eax 寄存器中。θx24(%eax)的偏移量又多了一
list->b_tpreV，但刚才while 语句的条件中用到了commit_transaction->
那么来看看源代码的③-1。这里用的是commit_transaction->t_locked
-1为 while语句的第一条指令。
locked_list!= NULL 的情况下跳转到-1，进入 while语句。
为 1。下一步使用 jne 命令在 ZF 标志为 0 时跳转，即 commit_transaction->t
标志为 1。eax寄存器（commit_transaction->t_locked_list）为 NULL 时，ZF 标志
-2之后为test命令，对两个%eax寄存器进行 AND 运算，其结果为0，则设置 ZF
θxf88580ef :
θxf88580e9 :
/root/linux-2.6.19/fs/jbd/commit.c: 284
θxf88580e6 :
θxf88580e5;
0xf88580e4
0xf88580e3 ;
0xf88580e1 :
exf88580e0 :
/root/linux-2.6.19/fs/jbd/commit.c: 281
crash> dis -l journal_commit_transaction
crash>
struct journal_head {
crash> struct -o journal_head 
 [0x28] transaction_t *b_cp_transaction;
 [0x24] struct journal_head *b_tprev;
[0x0] struct buffer_head *b_bh;
:
www.TopSage.com
HACK#14 从汇编代码查找相应的源代码| 83 
seax, 0xlc(%esp)
0x114(%eax), seax
$0x64,esp
sebx
kebp
8
---
## Page 102
87
注3：
参考文献注3
本 hack 介绍了根据汇编代码确定内核源代码位置的技巧，以及所用的 crash 这个极
先理解汇编代码，再以此作为参考比较方便。
要使用该选项，必须打开内核的 CONFIG_DEBUG_INFO。但是并不一定完全一致，因此
在 Linux 内核版本 2.6.19 的源代码中有如下代码。左侧数字为行号。
84】第2章调试前的必知必会
·、
其方便的命令。
总结
9
θxf884f5d8 : mov
include/linux/jbd.h: 324
oxf884f5d5:
/root/linux-2.6.19/fs/jbd/commit.c: 437
0xf884f5d0 :
transaction+37>
0xf88580f7 :
oxf88580f3 :
/root/linux-2.6.19/fs/jbd/commit.c: 309
N-Z》, 下载地址为 http://www.intel.com/products/processor/manuals/。
Architectures Software Developer's Manual Volume 2B: Instruction Set Reference,
Manual Volume 2A: Instruction Set Reference, A-M》 和 《Intel@ 64 and IA-32
参考文献的英文版：《Intel@ 64 and IA-32 Architectures Software Developer's
while (commit_transaction->t_locked_list) {
if (buffer_locked(bh)){
get_bh(bh);
bh = jh2bh(jh);
jh = commit_transaction->t_ locked_ list->b_tprev;
struct buffer_head *bh;
www.TopSage.com
mov
je
testb
(%esi), &ebx
0x24(%eax), %esi
oxf884f69c
0xf8858105 <journal_commit_
$0x8, 0x0(%ebp)
—译者注
---
## Page 103
htp:/download.intel.com/jp/developer/jpdoc/IA32_Arh_Dev_Man_Vol2B_i.pdf
卷B：命令N-Z
A-3、
htp://download.intel.com/jp/developer/jpdoc/IA32_Arh_Dev_Man_Vol2A_i.pdf
卷A：命令A-M
www.TopSage.com
HACK#14 从汇编代码查找相应的源代码|85
一大岩尚宏