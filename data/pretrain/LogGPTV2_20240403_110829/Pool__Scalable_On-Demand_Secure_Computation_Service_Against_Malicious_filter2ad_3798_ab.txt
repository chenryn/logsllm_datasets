v3 (cid:66) f
M1
1
M2
2
M3
3
. . .
Mn
n
Mi
i
where addressesi is the set of (random) indices revealed by the
ORAM mechanism to access the memory. Should the cut-and-
choose mechanism be naïvely applied over individual f
, the
encrypted memory Mi will also need to be replicated. For cut-and-
choose purposes, we could treat the memory as a part of the whole
circuit f M and duplicate this giant circuit with memory M. This
strategy, however, is only of theoretical interest due to prominent
scalability issues. Alternatively, we can decouple the memory from
the circuit and treat each f
as a small circuit but replicating Mn
40 times (e.g. for 40-bit statistical security) would require M1 to be
replicated 40n times because Mn is a state that depends on Mi for
every i  n, exit with output ⊥.
go to Step 1.
Figure 2: Parameter Search for Pool-Jimu
Automated parameter selection. In existing BatchedCut proto-
cols [19, 25], picking good cut-and-choose parameters for a partic-
ular circuit size and security parameter often requires considerable
human intervention in making heuristic guesses. Such ad hoc pro-
cedures are obviously incompatible with the expectation of running
dynamically-supplied functions on-the-fly! Next, we show how in-
troducing a pool simplifies the process and enables full automation.
Here we want to pick (rc , B) such that Form (1) ≤ ε holds while
B/(1− rc) is minimized, because B/(1− rc) gates are expected to be
garbled per bucket. Approached naïvely, this would require solving
a complex non-linear optimization. However, we propose an effi-
cient search algorithm to identify the best (rc , B) for any fixed (ε, n)
below (see Figure 2). The basic idea is to consider every possible
integral B in an increasing order. When examining each potential
B value, we first find the smallest rc that allows the security con-
straint Form (1)≤ ε to hold. Recall that the security constraint was
derived assuming rc > r0, hence if a smaller rc is obtained at Step 2,
we will discard this rc and decrease r0 by 1/2 and recalculate rc
until rc > r0 is satisfied. Then in Step 4, we record the resulting
B/(1−rc) value if it is smaller than the by-far smallest cost indicator
t. We stop examining bigger Bs and exit at Step 5 if (t < B) because
there is no hope to find any smaller achievable target t values (see
remark point (4) below). If the input (ε, n) is not securely achievable
at all, our search algorithm will exit at Step 6.
We further make several remarks about our search algorithm:
(1) It suffices to start the search from B = 2 as B = 1 degenerates
to semi-honest garbled circuit protocol thus will not offer an
interesting result.
(2) Any (r , B) satisfying the inequality of Step 2 is a security-wise
viable parameter, but we would like to find the smallest rc (for
that B) satisfying this constraint to minimize B/(1−rc). This can
be accomplished efficiently through a binary search between
r0 and 1, because the left-hand-side of the inequality strictly
decreases when rc grows.
(3) In Step 3, if r0 is found to be greater than rc, then we cannot
be sure that the rc obtained is the smallest possible (for that B)
satisfying the constraint in Step 2; otherwise, we are sure that
rc is optimal for the current B.
(4) If the search exits at Step 5 with t < B, then we know t must also
be smaller than B/(1 − rc) for any non-negative rc. Therefore,
searching further can’t yield any smaller target value t, hence
the output (r∗
c , B∗) must be optimal.