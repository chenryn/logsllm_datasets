pc; Θ; Γ ‘ c
TC-SUBS
Figure 5. Command Typing
program counter greater than the label of x. Treating the pc
in this manner is necessary to protect against implicit ﬂows.
We also type case commands in this manner.
The following program, which is rejected by the type
system, has a dynamic information leak.
if h then
inl _ = > output := 1
inr _ = > output := 0
x := pack 0 at {⊥}
x := pack 0 at {>};
else
case ( unpack x as int {⊥}) of
1
2
3
4
5
6
7
We assume h has label {>} and output has label {⊥}. If h
is true then unpacking succeeds, and output is assigned 1.
In contrast, if h is false then output is assigned 0. Thus an
attacker, who is authorized to read {⊥} but not {>}, could
determine h by observing output.
/∗ h t r u e ∗ /
/∗ h f a l s e ∗ /
Fortunately the above program cannot be typed. As-
sume ‘x classiﬁes x. Rule TC-CASE forces the pc to
be {>} at line 2, and TC-ASSIGN requires pc ≤ ‘.
Thus {>} ≤ ‘x and ‘x = {>}. On line 5 expression
unpack x as int{⊥} can be assigned—by TE-UNPACK—
label ‘0 where C(‘0) = C(‘x) = C({>}). Rule TC-
CASE requires that, on line 6, ‘0 ≤ pc. By TC-ASSIGN,
pc ≤ {⊥}; so ‘0 = {⊥}. As is no way to satisfy both
7
This section establishes the noninterference information-
ﬂow property for well-typed SImp programs. Consider the
terminating execution of program c in memory M1 with re-
sult M0
1. Now change some high security components of
M1 to obtain M2 and, starting in M2, rerun c to get M0
2.
1 are different from those M0
If the low security parts of M0
2
then c has leaked information. Instead, we would like to
prove that the semantics of SImp ensure M0
2 are
equivalent; that is, they differ only in their high security
components. This property, noninterference, will be deﬁned
and formalized in the remainder of this section.
1 and M0
To make noninterference precise, we deﬁne when two
values are equivalent at a label. This is done inductively
with the rules in Figure 6. The most interesting rule is VE-
PACK-LAB. It states that an observer at label ‘ cannot dis-
tinguish packages sealed at ‘1 when C(‘1) (cid:2) C(‘). We
must also deﬁne when two commands or expressions are
equivalent. We elide the inductive deﬁnitions of these re-
lations. Intuitively e ∼=‘ e0 holds when e and e0 are equiv-
alent values, or identical productions applied to equivalent
expressions. The deﬁnition of c ∼=‘ c0 is similar.
Conventionally, noninterference treats memories as
equivalent when the contents of corresponding low security
locations are identical. We generalize this and allow equiv-
alent memories to map low locations to equivalent, but not
identical, values.
∼=‘ M2). In context Θ, memories
Deﬁnition 1 (Θ ‘ M1
M1 and M2 are equivalent to an observer at level ‘, written
∼=‘ M2, when dom(M1) = dom(M2) and ∀x ∈
Θ ‘ M1
dom(M1). ∃τ, ‘0. Θ(x) = τ{‘0} ∧ (M1(x) ∼=‘ M2(x) ∨
‘0 (cid:2) ‘).
To avoid reasoning about stuck execution states, we
assume commands are always run in well typed memo-
ries. Eliminating stuck states (i.e. proving type soundness)
both simpliﬁes SImp’s metatheory and eliminates attacks
through the runtime-error covert channel.
Deﬁnition 2 (Θ ‘ M OK ). A memory, M, is well typed in
location context Θ, when ∀x ∈ dom(Θ). Θ(x) = τ{‘} ∧
‘ M(x) : τ. This property is written Θ ‘ M OK .
A trace is a set of principals and a sequence of conﬁg-
urations, (p,hM1, c1i,hM2, c2i, . . . ,hMn, cni), where for
each i ∈ {1, n − 1}, p ‘ hMi, cii → hMi+1, ci+1i.
Lemma 2 (Trace determinancy). There is at most one
shortest trace of form (p,hM1, c1i, . . . ,hMn, cni).
If such a trace exists, we will write it as p ‘ hM1, c1i →∗
hM2, c2i.
The two following non-interference theorems are the pri-
mary language-theoretic results for SImp. The ﬁrst states
that if ‘-equivalent expressions, e1 and e2, can be typed with
label ‘, then evaluating them in ‘-equivalent memories, M1
and M2, yields ‘-equivalent results, v1 and v2. That is, eval-
uation of low-security expressions occurs independently of
high security inputs.
Theorem 1 (Expression Non-interference). If
• Θ ‘ M1 OK , Θ ‘ M2 OK and Θ ‘ M1
• Θ;· ‘ e1 : τ{‘e} and e1
• p; M1 ‘ e1 →∗ v1 and p; M2 ‘ e2 →∗ v2
∼=‘ e2 where ‘e ≤ ‘
∼=‘ M2
then v1
∼=‘ v2.
The second theorem extends this to conﬁgurations, and
states that ‘-equivalence is preserved by terminating com-
putations. These theorems are more general than those of
Smith and Volpano [33] who do not account for equivalent
but unequal values. Additionally, they are substantially sim-
pler than the the robust declassiﬁcation and qualiﬁed robust-
ness theorems needed in the case of general endorsement or
declassiﬁcation [10, 23].
Theorem 2 (Command Noninterference). If
• Θ ‘ M1 OK , Θ ‘ M2 OK and Θ ‘ M1
• pc; Θ;· ‘ c1 and c1
• p ‘ hM1, c1i →∗ hM0
∼=‘ c2
1, skipi and p ‘ hM2, c2i →∗
∼=‘ M2
hM0
2, skipi
then Θ ‘ M0
1
∼=‘ M0
2.
The language level deﬁnitions and theorems treat con-
ﬁdentiality and integrity uniformly. This is a reﬂection of
a well known duality between “tainted” and “secret” val-
ues and “untainted” and “public” values. This duality also
arises in the cryptographic semantics described next, where
conﬁdentiality is enforced via encryption and integrity is
enforced via digital signatures.
3 Cryptographic Semantics
The above noninterference property ensures security for
programs run in a trusted environment. We wish to also con-
sider hostile environments: Can we interpret labels using
cryptography to ensure information ﬂow guarantees hold in
open systems?
To examine this issue, we ﬁrst deﬁne a formal syntax of
messages and a Dolev-Yao deduction system for reasoning
about them. Next, we show how to compile SImp values
into messages and establish that compiled packages imple-
ment appropriate conﬁdentiality policies. Last, we relate
memories and commands to messages in order to deﬁne
and prove a cryptographic noninterference theorem. Note
that we rely on the soundness of Dolev-Yao reasoning with
respect to computational bounded attackers in the style of
Abadi and Rogaway [3] and of Backes and Pﬁtzmann [6].
We make several general assumptions. Each principal
has a corresponding public/private key pair. All public keys
are known to all principals, and private keys are known only
to the corresponding principal. Key distribution and name
binding are orthogonal (but important) problems that are not
considered here.
3.1 Messages and Message Analysis
This section deﬁnes messages, cryptographic states, and
an inference system for reasoning about them. Messages
are the basic objects in the cryptographic semantics. Cryp-
tographic states are collections of messages that represent
knowledge, ability, and belief. Lastly the inference system
describes when new messages can be synthesized from an
cryptographic state.
Messages are deﬁned by the following grammar:
::= Alice | Bob | . . .
Principals
Key Id
Private Keys
Public Keys
Strings
Messages
(*abstract*)
p, q, r
κ, W, R
K− ::= K−
κ
K + ::= K +
κ
str
m, n ::= str | K | p | (m, m0)
::= "a"|"b" | . . .
|
|
enc(K , m)
sign(K , m)
The metavariable K ranges over both public and private
keys. Message enc(K , m) means m encrypted by K ,
8
and sign(K , m) means m signed by K . Messages are
paired with (m, m0). Public and private keys that share
a κ are inverses. Lists, [m1, m2, . . . , mn], are deﬁned by
nested pairs, (m1, (m2, . . . (mn, "") . . .)). We will write
[m1 . . . mk] ++ [mk+1 . . . mj] for [m1 . . . mj]. Lastly, we
will use "i" and "o : r ! w" to denote the strings encoding
integer value i and policy o : r ! w respectively.
We introduce a modal natural deduction style system for
reasoning about a principal’s knowledge. Cryptographic
states, written σ, serve as contexts for the deduction sys-
tem and track a principal’s knowledge, abilities, and beliefs.
It might be that a principal knows, actswith, or believes a
message. The judgment σ ‘d m has the intended interpre-
tation that message m can be derived from the contents of
σ. The judgment σ ‘u m has the intended interpretation
that σ can use message m. And the judgment σ ‘b m has
the intended interpretation that m is considered trusted by
σ. Generally, σ ‘u m or σ ‘b m are only interesting when
m is a key. If σ uses a principal’s private key, it has the Prin-
cipal’s authority; if σ believes the principal’s public key, it
trusts the principal. Figure 7 gives the inference rules.
We distinguish knows from actswith because σ ‘d m
implies σ ‘u m, but the converse is not true. Thus actswith
provides a convenient way to model private keys which
are used, but never disclosed. Earlier, we said the relation
p ‘ h , i → h , i represents evaluation with authority p;
cryptographically speaking, execution requires a σ where
σ ‘u K−
p for all p ∈ p. Additionally, the belief modality
allows us to model low integrity data. Cryptographically
speaking, all messages signed with “untrusted” keys—with
any K where σ 6‘b K —will be considered uninformative,
and therefore equivalent. We make these ideas precise in
Section 3.3.
3.2 Compiling Policies
Generally we will encode policies by generating a series
of fresh public key pairs. Plain text is encrypted and signed
using the fresh keys, and a message is created by append-
ing label information to the ciphertext. We aim to do this in
such a way that principal set p can read the cryptographic
interpretation of hvi‘ text iff p reads ‘. And, writing v re-
quires the keys of q where q writes ‘.
DLM labels are intended for situations of mutual dis-
trust. When encoding a policy cryptographically, we have a
high level choice to make: Given principals Alice and Bob,
should it possible for Bob to specify Alice’s policy? Con-
cretely, whose authority should be required to create a value
labeled by {Alice : Bob !∅}?
Two apparently reasonable answers to this question are,
1. Policies may be created with no authority.
2. Policy creation requires the owner’s authority.
The ﬁrst approach is ﬂawed. If no particular authority is re-
quired to labeled values, any user can attach arbitrary asser-
tions to a package. Thus Eve can spoof labels and cause vi-
olations of conﬁdentiality and integrity policies. This both
enables easy attacks and muddies the theory. Therefore we
follow the second approach.
Translating hvi‘ into a message takes three steps. First
we compile each policy in ‘ to a seal which can be used to
ensure the conﬁdentiality and integrity of a sealed message.
Second, we compose the seals to create an envelope which
can be read and written only in accordance with ‘’s mean-
ing. Third, we translate v and write its translation into the
envelope.
As we will see, envelopes serve as one way secure chan-
nels. Public key cryptography is essential to this. Each of an
envelope’s seals is associated with two private keys: one for
reading and one writing. If a principal possesses all of the
read keys, that principal can read from the envelope. Like-
wise, a principal possessing all the write keys can write to
the envelope. Thus a principal is able to read (write) when
she has—or can collude to acquire—a read (write) key for
each seal. In the sequent, a DLM label will be translated
into a message which discloses read and write keys accord-
ing to the label’s meaning. This will follow the deﬁnitions
of reads and writes from Section 2.2.
R , K +
W ) and (K−
W , K +
W . Hence the key K−
The seal corresponding to π = o : r ! w is written P[[π]]
and is intended to ensure two properties. A envelope sealed
with P[[π]] should only be written to with a private key be-
longing to o or a member of w and read from by principals
with a private key from o, r. To compile π we ﬁrst generate
a two fresh key pairs (K−
R ). Mes-
sages packed in envelopes with this seal will be encrypted
R and signed by K−
by K +
W will serve
as a (necessary but not sufﬁcient) capability for writing, and
K−
R will serve as a capability for reading. Seal creation en-
crypts K−
R such that only principals from o, w and
o, r respectively can read them. The public keys are dis-
played in the clear. Restricting access to K−
W enforces the
policy’s write component; dually, restricting access to K−
R
enforces the read component. Lastly, a string describing the
policy’s structure is prepended, and the entire seal is signed
by o. This signature ensures that the seal authentically de-
scribes o’s policy. The policy translation is described by the
following pair of equations, where the subscripted R and W
parameters make key generation explicit:
W and K−
P[[o : r ! w]]R,W = sign(o, ["o : r ! w", (K +
W )]
R , K +
++ encFor (o, r) K−
++ encFor (o, w) K−
W )
R
encFor (p1 . . . pn) m = [enc(K +
p2, m)].
A label comprises one or more ordered policies. We com-
pile a label to an envelope by mapping the constituent poli-
p1, m) . . . enc(K +
9
σ ‘d m
(knows m) ∈ σ
σ ‘d m
D-TAUT
σ ‘u K
σ ‘d m
σ ‘d sign(K , m)
D-SIGN
σ ‘u K
σ ‘d m
σ ‘d enc(K , m)
σ ‘d sign(K , m)
σ ‘d m
D-ENCRYPT
D-SIGN-ID
σ ‘d (m1, m2)
σ ‘d m1
D-PAIRL
σ ‘u m
σ ‘d (m1, m2)
σ ‘d m2
σ ‘b m
D-PAIRR
σ ‘d enc(K +
κ , m)
σ ‘d m
σ ‘u K−
κ
D-DECRYPT
σ ‘b m
σ ‘d m
D-LIFT
σ ‘d enc(K , m)
D-ENC-ID
σ ‘d K
σ ‘d m2
σ ‘d m1
σ ‘d (m1, m2)
D-PAIR