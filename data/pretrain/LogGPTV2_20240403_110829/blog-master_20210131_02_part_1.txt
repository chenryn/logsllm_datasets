## Github 项目太久远,commit太多,项目太大 clone不下来, 经常failed (fatal: early EOF fatal: index-pack failed)怎么办? - 可以使用depth指定层数        
### 作者                  
digoal                  
### 日期                  
2021-01-31                  
### 标签                  
PostgreSQL , github , depth                    
----                  
## 背景           
先使用以下文档提供的方法,     
[《github clone 的一般错误(timeout 超时, RPC failed 等)处理方法, 以及加速方法》](../202101/20210130_07.md)      
1、改git config配置    
```    
git config --global http.postBuffer 10485760000      
git config --global http.lowSpeedLimit 0      
git config --global http.lowSpeedTime 999999      
```    
2、使用fast github 中转    
最常见GitHub镜像地址：      
https://hub.fastgit.org/      
https://github.com.cnpmjs.org/      
例如  
```  
git clone https://hub.fastgit.org/digoal/blog   
```  
3、dns被篡改, 使用ipaddress.com得到正常的hosts, 并写入本地hosts文件    
```    
http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo    
http://github.com.ipaddress.com/#ipinfo    
......    
http://??????.ipaddress.com/#ipinfo    
```    
```    
sudo vi /etc/hosts    
```    
```    
# GitHub Start    20210119有效（包括MAC系统）20210123     
140.82.114.4      github.com    
199.232.69.194    github.global.ssl.fastly.net      
140.82.113.3      github.com      
140.82.114.20     gist.github.com      
151.101.184.133    assets-cdn.github.com      
151.101.184.133    raw.githubusercontent.com      
199.232.28.133     raw.githubusercontent.com       
151.101.184.133    gist.githubusercontent.com      
151.101.184.133    cloud.githubusercontent.com      
151.101.184.133    camo.githubusercontent.com      
199.232.96.133     avatars.githubusercontent.com      
151.101.184.133    avatars0.githubusercontent.com      
199.232.68.133     avatars0.githubusercontent.com      
199.232.28.133     avatars0.githubusercontent.com       
199.232.28.133     avatars1.githubusercontent.com      
151.101.184.133    avatars1.githubusercontent.com      
151.101.108.133    avatars1.githubusercontent.com      
151.101.184.133    avatars2.githubusercontent.com      
199.232.28.133     avatars2.githubusercontent.com      
151.101.184.133    avatars3.githubusercontent.com      
199.232.68.133     avatars3.githubusercontent.com      
151.101.184.133    avatars4.githubusercontent.com      
199.232.68.133     avatars4.githubusercontent.com      
151.101.184.133    avatars5.githubusercontent.com      
199.232.68.133     avatars5.githubusercontent.com      
151.101.184.133    avatars6.githubusercontent.com      
199.232.68.133     avatars6.githubusercontent.com      
151.101.184.133    avatars7.githubusercontent.com      
199.232.68.133     avatars7.githubusercontent.com      
151.101.184.133    avatars8.githubusercontent.com      
199.232.68.133     avatars8.githubusercontent.com      
199.232.96.133     avatars9.githubusercontent.com      
# GitHub End     
```    
4、关闭压缩  
```  
git config --global core.compression 0  
```  
5、然后使用depth这个指令来下载最近一次提交  
```    
git clone https://github.com/digoal/blog --depth 1     
```    
然后获取完整库    
```  
git fetch --unshallow   
或  
git fetch --depth=2147483647  
最后pull一下查看状态，问题解决  
git pull --all  
```  
更多可以查看man git-clone    
```    
       --depth     
           Create a shallow clone with a history truncated to the specified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near    
           the tips of all branches. If you want to clone submodules shallowly, also pass --shallow-submodules.    
       --shallow-since=    
           Create a shallow clone with a history after the specified time.    
       --shallow-exclude=    
           Create a shallow clone with a history, excluding commits reachable from a specified remote branch or tag. This option can be specified multiple times.    
       --[no-]single-branch    
           Clone only the history leading to the tip of a single branch, either specified by the --branch option or the primary branch remote's HEAD points at. Further fetches into    
           the resulting repository will only update the remote-tracking branch for the branch this option was used for the initial cloning. If the HEAD at the remote did not point    
           at any branch when --single-branch clone was made, no remote-tracking branch is created.    
```    
6、还是配置  
```  
vi ~/.gitconfig  
或者用git config --global命令修改配置  
```  
```  
[core]   
packedGitLimit = 512m   
packedGitWindowSize = 512m   
[pack]   
deltaCacheSize = 2047m   