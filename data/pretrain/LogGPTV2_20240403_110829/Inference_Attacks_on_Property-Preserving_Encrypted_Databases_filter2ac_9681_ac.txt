the encrypted database, possibly obtained from access-
ing the application (e.g., if it is a web service) or from
documentation;
• public statistics: publicly available statistics, for ex-
ample, census data or hospital statistics;
• prior versions: prior versions of the database, possibly
obtained through a prior data breach.
We stress that our experiments will make use of a diﬀerent
subset of auxiliary sources and that none of the attacks need
access to all of these sources.
4.3 Attack Accuracy
When an adversary executes an inference attack, it re-
ceives as output an assignment from the encrypted cells to
the elements of the message space. Though our experiments
in Section 9 show that there are many attributes for which
the attacks are perfectly accurate, this is not always the case
and for low-accuracy attributes it could be diﬃcult for the
attacker to distinguish correct assignments from incorrect
ones. We note, however, that the attacks can still be damag-
ing even for these attributes for the following reasons. First,
the adversary can still learn statistics about the attribute
which in some cases, like patient died during hospitalization
or major diagnostic category, can be very sensitive for hospi-
tals because it reveals information about the quality of their
care. Second, the results can still be used for phishing-style
attacks where the adversary only needs a small number of
successes.
5. ATTACKING DTE COLUMNS
We describe two attacks against DTE-encrypted columns.
The ﬁrst is the well-known frequency analysis and the second
is a family of attacks we refer to as (cid:96)p-optimization attacks.
The family is parameterized by the (cid:96)p norms.
Here, Ck and Mk are the ciphertext and message spaces
of the deterministic encryption scheme. We assume |Ck| =
|Mk| but if this is not the case we simply pad Mk. For
encryption schemes |Ck| is always at least |Mk|.
6485.1 Frequency Analysis
Frequency analysis is the most basic and well-known in-
ference attack. It was developed in the 9th century and is
used to break classical ciphers. As is well-known, frequency
analysis can break deterministic encryption and, in partic-
ular, deterministically-encrypted columns. Given a DTE-
encrypted column c over Ck and an auxiliary dataset z over
Mk, the attack works by assigning the ith most frequent el-
ement of c to ith most element of z. For ease of exposition,
we assume that c and z have histograms that can be strictly
ordered; that is, for all i (cid:54)= j, ψi (cid:54)= ψj and πi (cid:54)= πj, where
ψ = Hist(c) and π = Hist(z). More precisely, the attack is
deﬁned as:
• Frequency-An(c, z):
1. compute ψ ← vSort(Hist(c));
2. compute π ← vSort(Hist(z));
3. output α : Ck → Mk such that
(cid:40)
π(cid:2)Rankψ(c)(cid:3)
α(c) =
⊥
if c ∈ c;
if c (cid:54)∈ c.
If the histograms are not strictly ordered (i.e., there are
i (cid:54)= j such that ψi = ψj or πi = πj) one can still run the
attack by breaking ties in the sorting steps arbitrarily. In the
worst-case, each tie will be broken erroneously and induce
an error in the assignment so this will cause the attack to
err on a + b ciphertexts, where a and b are the number of
ties in Hist(c) and Hist(z), respectively. The attack runs in
O(cid:0)|Ck| · log |Ck|}(cid:1) time.
5.2
(cid:96)p-Optimization
We now describe a family of attacks against DTE-encrypted
columns we refer to as (cid:96)p-optimization. The family is pa-
rameterized by the (cid:96)p norms. The basic idea is ﬁnd an as-
signment from ciphertexts to plaintexts that minimizes a
given cost function, chosen here to be the (cid:96)p distance be-
tween the histograms of the datasets. This has the eﬀect
of minimizing the total mismatch in frequencies across all
plaintext/ciphertext pairs. The attack works as follows.
Given a DTE-encrypted column c over Ck and auxiliary
information z over Mk, the adversary ﬁrst computes the his-
tograms ψ and π of c and z, respectively. It then ﬁnds the
permutation matrix X that minimizes the (cid:96)p distance be-
tween the ciphertext histogram ψ and the permuted auxil-
iary histogram X · π. Intuitively, the attack ﬁnds the map-
ping of plaintexts to ciphertexts that achieves the closest
overall match of their sample frequencies. Note that this is
very diﬀerent than frequency analysis which ignores the am-
plitude of the frequencies and only takes into account their
rank. More precisely, the attack is deﬁned as follows:
• (cid:96)p-Optimization(c, z):
1. compute ψ ← Hist(c);
2. compute π ← Hist(z);
3. output arg minX∈Pn (cid:107)ψ − X · π(cid:107)p;
where Pn is the set of n×n permutation matrices. Note that
in the (cid:96)1-optimization attack, Step 3 can be formulated as
a linear sum assignment problem (LSAP) [17]. The LSAP
can be solved eﬃciently using the well-known Hungarian
algorithm [30, 33] or any linear programming (LP) solver.
In our experiments we use the former which runs in time
O(n3). The precise LSAP formulation is:
n(cid:88)
CijXij
i=1
n(cid:88)
n(cid:88)
n(cid:88)
i=1
minimize
subject to
j=1
Xij = 1,
1 ≤ j ≤ |Ck|
j=1
Xij = 1,
Xij ∈ {0, 1},
1 ≤ i ≤ |Ck|
1 ≤ i, j ≤ |Ck|.
where the cost matrix C = Cij gives the cost of matching
plaintext j to ciphertext i.
For p = 1, the costs are simply the absolute diﬀerences
in frequency, so we set Cij = |ψi − πj|. For 2 ≤ p ≤ ∞,
however, Step 3 of the (cid:96)p-optimization attack cannot be for-
mulated directly as a LSAP because the (cid:96)p norm is not
a simple linear sum. Nevertheless, we show that it can
√
still be eﬃciently solved using fast LSAP solvers. To see
why, let f1 : R+ → R be the function x (cid:55)→ p
x and let
i=1 vp
i . Then we
f2 : Nn≥0 → N≥0 be the function v (cid:55)→ (cid:80)n
note that the (cid:96)p norm of a vector can be written as
(cid:0)f2(v)(cid:1).
(cid:107)v(cid:107)p = f1
Since f1 is monotone increasing, the vector that minimizes
f1 ◦ f2 is the vector that minimizes f2. It follows then that
for any vector v, the vector w with the minimum (cid:96)p distance
from v is the solution to
n(cid:88)
i=1
arg min
w
|vi − wi|p.
As long as p < ∞, this optimization problem can be for-
mulated as a LSAP with cost matrix C such that Cij =
|vi − wi|p. The attack takes O(|Ck|3) time.
Remark on (cid:96)p-optimization vs. frequency analysis. In
our experiments, we found that frequency analysis and (cid:96)p-
optimization for p = 2, 3 performed equally well.
In fact,
for a ﬁxed encrypted column and auxiliary dataset, they
decrypted same exact ciphertexts. On the other hand, fre-
quency analysis did consistently better than (cid:96)1-optimization.
This raises interesting theoretical and practical questions.
From a theoretical perspective it would be interesting to
understand the exact relationship between frequency anal-
ysis and (cid:96)p-optimization. Our experiments tell us that (cid:96)1-
optimization is diﬀerent from frequency analysis (since they
generated diﬀerent results) but they did not distinguish be-
tween frequency analysis and (cid:96)2- and (cid:96)3-optimization. As
such, it would be interesting to either separate the attacks
or prove that they are equivalent for some p ≥ 2.
From a practical perspective, the main question is what is
the motivation for ever using (cid:96)p-optimization over frequency
analysis? The main reason is that (cid:96)p-optimization not only
decrypts an encrypted column but, while doing so, also pro-
duces cost information about the diﬀerent solutions it ﬁnds.
Like the cumulative attack we describe in Section 6.2, this
is due to its use of combinatorial optimization. As it turns
out, this extra information can be leveraged to attack “hid-
den” columns (i.e., for which we do not know the attribute);
649something we cannot always do with frequency analysis. We
discuss this in more detail in Section 8.
6. ATTACKING OPE COLUMNS
In addition to the frequency information leaked by DTE,
order-preserving encryption also reveals the relative order-
ing of the ciphertexts. Here we describe two attacks on
OPE-encrypted columns that exploit this additional leakage
to recover even more of the plaintext data. Note that the
attacks only make use of order information so they work
even against columns encrypted with ORE [14] and interac-
tive order-preserving protocols [29, 34]. In particular, since
all OPE instantiations necessarily leak more than just the
order [12], stronger attacks are likely possible against OPE-
encrypted columns.
Here, Ck and Mk are the ciphertext and message spaces
of the OPE scheme. We assume, without loss of generality,
that |Ck| = |Mk|. If this is not the case we pad Mk with
additional symbols until it holds.
6.1 Sorting Attack for Dense Columns
The ﬁrst attack on OPE-encrypted columns is trivial and
applicable to all columns that satisfy a condition we call
density. We call an OPE-encrypted column δ-dense, if it
contains the encryptions of at least a δ fraction of its message
space. If δ = 1, we simply say that the column is dense.
The attack is described in detail below and works as fol-
lows. Note that it does not require any auxiliary informa-
tion. Given an OPE-encrypted dense column c over Ck the
adversary simply sorts c and Mk and outputs a function
that maps each ciphertext c ∈ c to the element of the mes-
sage space with the same rank. More precisely, the attack
is deﬁned as:
(cid:1);
• Sorting-Atk(c):
1. compute ψ ← vSort(cid:0)Unique(cid:0)c(cid:1)(cid:1);
2. compute π ← vSort(cid:0)Mk
π(cid:2)Rankψ(c)(cid:3)
The attack runs in O(cid:0)|Ck| · log |Ck|(cid:1) time.
3. output α : Ck → Mk such that:
(cid:40)
α(c) =
⊥
if c ∈ c;
if c (cid:54)∈ c.
6.2 Cumulative Attack for Low-Density Columns
The main limitation of the sorting attack is that it is only
applicable to dense columns. To address this, we describe
a second attack for low-density OPE-encrypted columns we
refer to as the cumulative attack. The attack requires access
to auxiliary information and can recover a large fraction of
column cells (see Section 9.2 for details).
Intuition. Given a DTE-encrypted column, the adver-
sary learns the sample frequency of each ciphertext in the
column. These sample frequencies make up the histogram
for the encrypted column, and we showed in the previous
section how the adversary can use them to match the DTE
ciphertexts to their plaintexts by ﬁnding (c, m) pairs where
c and m have similar frequencies.
Given an OPE-encrypted column, the adversary learns
not only the frequencies but also the relative ordering of
the encrypted values. Combining ordering with frequencies,
the adversary can tell for each ciphertext c what fraction
of the encrypted values are less than c. More formally, this
is known as the empirical cumulative distribution function
(ECDF, or simply CDF) of the data set.
In the cumulative attack, we leverage the CDF to improve
our ability to match plaintexts to ciphertexts. Intuitively, if
a given OPE ciphertext is greater than 90% of the cipher-
texts in the encrypted column c, then we should match it
to a plaintext that also is greater than about 90% of the
auxiliary data z. Although our early experiments showed
that CDFs alone enable very powerful attacks on OPE, we
can achieve even better results using both the CDFs and the
frequencies together. Here we use an LSAP solver to ﬁnd
the mapping of plaintexts to ciphertexts that minimizes the
total sum of the mismatch in frequencies plus the mismatch
in CDFs across all plaintext/ciphertext pairs.
Overview of attack. The attack is detailed below and
works as follows. Given an OPE-encrypted column c over
Ck and an auxiliary dataset z over Mk, the adversary com-
putes the histograms ψ and π and the CDFs ϕ and µ of c
and z, respectively. It then ﬁnds the permutation that si-
multaneously matches both the sample frequencies and the
CDFs as closely as possible. More precisely, the attack is
deﬁned as:
• Cumulative-Atk(c, z):
1. compute ψ ← Hist(cid:0)c(cid:1) and ϕ ← CDF(cid:0)c(cid:1);
2. compute π ← Hist(cid:0)z(cid:1) and µ ← CDF(cid:0)z(cid:1);
3. output
arg min
X∈P
(cid:0)(cid:12)(cid:12)ψi − Xi · π(cid:12)(cid:12) +(cid:12)(cid:12)ϕi − Xi · µ(cid:12)(cid:12)(cid:1)
|Mk|(cid:88)
i=1
where P is the set of all |Ck| × |Ck| permutation matrices.
Note that, as in Section 5.2 above, Step 3 of this attack can
be formulated as an LSAP which can be eﬃciently solved
using the Hungarian algorithm. The precise LSAP formula-
tion is:
minimize
subject to
j=1
Xij = 1,
1 ≤ j ≤ |Ck|
n(cid:88)
CijXij
i=1
n(cid:88)
n(cid:88)
n(cid:88)
i=1
j=1
Xij = 1,
Xij ∈ {0, 1},
1 ≤ i ≤ |Ck|
1 ≤ i, j ≤ |Ck|.