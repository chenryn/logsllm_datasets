## 为什么geometry+GIST 比 geohash+BTREE更适合空间搜索 - 多出的不仅仅是20倍性能提升  
### 作者                                                               
digoal                                                               
### 日期                                                               
2018-04-17                                                            
### 标签                                                               
PostgreSQL , gist , btree , 空间索引 , 范围扫描    
----                                                               
## 背景         
在PostgreSQL中，支持geohash, geometry, geograph三种空间存储结构。  
1、geohash，很多库都支持它，因为简单，将地球作为标准化的球体，展开抽象为一个平面，划分为若干个小方格，进行编码，相邻的小方格的编码前缀一样。  
![pic](20180417_01_pic_004.jpg)  
![pic](20180417_01_pic_005.jpg)  
geohash 每一个小方块的精度与编码长度有关（这个说法也不完全准确，因为是基于地球是标准球体的前提），如下:   
![pic](20180417_01_pic_006.jpg)  
2、由于地球并非标准球体，也非标准的椭球体，所以geohash精度有硬性的缺陷，geometry与geograph类型，可以解决这个问题。  
![pic](20180417_01_pic_008.jpg)  
对于GIS来说，首先是坐标系，有两种：一种是球坐标（地理坐标），另一种是平面坐标（投影坐标）。      
球坐标通常用于计算，平面坐标通常用于展示（也可以计算）。    
投影坐标是从球坐标投影后展开得来(用一个圆柱将地球包起来，把地球当成会发光的光源，投影后，将圆柱展开得到)，投影的范围越大，精度就越低。范围越小，  
计算距离，应该考虑到被计算的两点所在处的地球特性（spheroid）。这样计算得到的距离才是最精确的。      
geometry和geography类型的选择，建议使用geometry，既能支持球坐标系，又能支持平面坐标系。主要考虑到用户是否了解位置所在处的地理特性，选择合适的坐标系。      
目前用得最多的有SRID=4326球坐标，SRID为EPSG:3857的墨卡托投影坐标。    
再来说geometry和geography两种类型，geometry支持平面对象也支持空间对象，而geography则仅支持空间对象。      
geometry支持更多的函数，一些几何计算的代价更低。      
geography支持的函数略少，计算代价更高。但是对于跨度较大地域性的业务，就需要使用geography，因为它的精度不受制于区域。  
If your data is contained in a small area, you might find that choosing an appropriate       
projection and using GEOMETRY is the best solution, in terms of performance and functionality available.      
If your data is global or covers a continental region, you may find that GEOGRAPHY       
allows you to build a system without having to worry about projection details.       
You store your data in longitude/latitude, and use the functions that have been defined on GEOGRAPHY.      
If you don't understand projections, and you don't want to learn about them,       
and you're prepared to accept the limitations in functionality available in GEOGRAPHY,       
then it might be easier for you to use GEOGRAPHY than GEOMETRY.       
Simply load your data up as longitude/latitude and go from there.     
除了空间模型上的差异，geohash与geometry, geograph还有功能、性能上的差异。  
性能方面主要体现在GEOHASH的编码精度会带来一些问题：  
1、由于GEOHASH编码的问题，我们在搜索某一个点附近N米内的对象时，会引入空间放大，理论上我们要的是以目标点为中心，距离为半径的一个圆内的数据。  
![pic](20180417_01_pic_002.jpg)  
如果只看前缀的话，这个放大会随着编码长度缩短而级数增加。  
![pic](20180417_01_pic_003.jpg)  
然而，使用geometry的距离搜索，不会引入放大问题，使用GIST索引按距离排序输出加上st_dwithin约束，返回的一定是在圆圈内的数据，并且不造成额外的RECHECK FILTER。  
![pic](20180417_01_pic_001.jpg)  
又比如在GIS北京峰会上探探的一个案例，搜索附近的10家餐馆，在POI密集的地方，一个小的BOX可就圈出几千家餐馆了，而在偏远地区，你就需要一个较大的BOX，还不一定能圈到10家餐馆。  
![pic](20180417_01_pic_007.jpg)  
2、当我们需要搜索的是任意多边形时，GEOHASH也无法满足需求，需要进行大范围的匹配，然后再逐条进行空间计算过滤。  
## 几种地理数据的扫描方法  
### 1、geohash 前缀扫描，匹配在这个正方形块内的数据  
```  
postgres=# create table t_test(  
  id int,   
  pos text,   -- geohash  
  geo geometry  -- geometry  
);  
CREATE TABLE  
postgres=# insert into t_test   
select id,   
st_geohash(st_setsrid(st_point(x,y),4326), 13),   
st_setsrid(st_point(x,y),4326)   
from (  
  select id, 120+30*random() x, 68+5*random() y   
  from generate_series(1,100000) t(id)   
) t;  
INSERT 0 100000  
```  
```  
postgres=# select * from t_test limit 10;  
 id |      pos      |                        geo                           
----+---------------+----------------------------------------------------  
  1 | yu0j8y2pxsezp | 0101000020E61000000000625C21F25E400000510228205140  
  2 | zhsfe7t2cbtzz | 0101000020E6100000008049BE8DBA61400080CB2C5DB15140  
  3 | zhcydqptr7bkd | 0101000020E6100000000061ED403261400000A01B4B395240  
  4 | yuhdce4q6u7t6 | 0101000020E610000000808C51B6446040008055F70F005140  
  5 | yus98nqjtdf4r | 0101000020E610000000803D75C54260400080923722A75140  
  6 | zk9grxnsqxv98 | 0101000020E61000000000787897A16240008086A312BB5140  
  7 | yurhhfh33u5xm | 0101000020E61000000080C877DEB96040008031E3B7675140  
  8 | zhk5qv4vhe10k | 0101000020E610000000002A889E9D61400080CA5360605140  
  9 | zhm49th6m0h5y | 0101000020E61000000000C79D4DC361400000B456E8575140  
 10 | zh95n0wvxkpv5 | 0101000020E610000000808F92BE1561400000A9D5FCB55140  
(10 rows)  
```  
```  
postgres=# create index idx_t_test_1 on t_test (pos text_pattern_ops);  
CREATE INDEX  
```  
```  
postgres=# explain select * from t_test where pos ~ '^yuhdce4';  
                                 QUERY PLAN                                    
-----------------------------------------------------------------------------  
 Index Scan using idx_t_test_1 on t_test  (cost=0.42..2.64 rows=10 width=50)  
   Index Cond: ((pos ~>=~ 'yuhdce4'::text) AND (pos ~=~ 'yuhdce4'::text) AND (pos ~=~ 'yuhdce4' and pos ~=~ 'yuhdce4'::text) AND (pos ~= 120 and x = 68 and y <=71;  