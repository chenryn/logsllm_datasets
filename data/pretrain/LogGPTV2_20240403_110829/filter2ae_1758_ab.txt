## 3.5 ANE固件
    Load Program:
        CSneTMDrv::ParseTD(void const*,ulong,ANERegs_t *,ane_TD_HEADER_t *,bool)
    Execute:
        CSneTMDrv::AddTDList(void const*,ulong,ulong,ulong,uint,uint *,uint,ulong volatile*,_rtk_timer_call *,bool)
左右滑动查看完整代码
ane固件运行于独立的协处理器中，二进制代码可以在刷机包中找到，且没有被加密。这里主要介绍两个函数，一个是对model.hwx中可执行数据段的内部数据进行解析的函数，另一个是涉及实际操作寄存器进行神经网络运算的函数。在这里不分析固件的所有实现，因为这不是主要内容。
# 4 ANE工具集
为了方便各位研究，我把我写的工具集全部开源。工具开源地址：https://github.com/antgroup-arclab/ANETools
工具集包含了我编写的通过命令行直接调用苹果内部组件的工具、我开发的反汇编ANE寄存器操作的工具和一些实用脚本。
## 4.1 所有算法与mlmodel文件
为了把其他机器学习框架转化为统一的mlmodel文件，苹果开发了一种模型中间语言。此中间语言支持一百几十种元算法，所有其他机器学习框架中的算法必须都由元算法组合而成。你可直接使用这些元算法构造出自定义的机器学习算法。
## 4.2 编译mlmodel文件的coremlcompiler
    开发机上的工具路径:
        /Applications/Xcode.app/Contents/Developer/usr/bin/coremlc
        /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/coremlcompiler
    设备上的相关类名:
        CoreML
    输入: *.mlmodel 文件
    输出: *.mlmodelc/ 文件夹
左右滑动查看完整代码
coreml编译器不仅存在于主机上也存在于苹果设备中。开发App时如果包含静态mlmodel文件，Xcode会使用自带的coreml编译器，直接将编译出的文件夹包含到App文件中。
App也可以远程下载即时编译mlmodel文件。幻灯片中也展示了一般mlmodelc文件夹包含的文件，mlmodel文件也可以包含多个机器学习模型。
## 4.3 Espresso预编译coremlcompiler产出的文件
    0x1b0009cb0 Foundation!-[NSDictionary(NSDictionary) writeToFile:atomically:]
    0x1dd6316d0 Espresso!Espresso::ANECompilerEngine::compiler::dump_ir(std::__1::basic_string, std::__1::allocator > const&)
    0x1dd5a78dc Espresso!espresso_dump_ir
    0x1047f1c0c ANECompilerService!0x9c0c +[_ANEEspressoIRTranslator translateModelAt:key:outputPath:error:]
    0x1047f2ac0 ANECompilerService!0xaac0 +[_ANECoreMLModelCompiler compileModelAt:csIdentity:key:optionsFilename:tempDirectory:outputURL:ok:error:]
左右滑动查看完整代码
如果此mlmodel文件需要通过ANE执行，App会跟aned守护进程通信，提供mlmodelc文件夹下面的文件信息。
如果文件没有被ANE编译器编译过，aned会唤起ANECompilerService进程开始编译。ANE实际编译之前主要会把mlmodelc文件夹下的神经网络描述文件预编译成plist格式。
## 4.4 ANE编译器
预编译完成后就会进行实际编译。实际编译过程也在ANECompilerService进程中。代码存在于ANECompiler模块，并以一个函数ANECCompile()做为入口。此函数会将神经网络描述文件、网络权重等文件编译成包含寄存器写入在内的model.hwx文件。
我编写的工具可以从命令行直接调用ANECCompile()函数，不经过ANECompilerService Daemon进程，方便测试研究。
ANE编译器拥有很多编译选项。可以参考ANETools的代码。需要注意的是，除了输入输出路径参数，至少还需要目标架构参数，才能正常编译。其中还有叫DebugMask的flag可以设置成整型最大值，编译后会产生很多中间文件。
## 4.5 ANE反汇编器
我通过逆向数据结构后独立编写了反汇编工具ANEDisassembler，用于反汇编model.hwx文件。我目前没有发现苹果有解析model.hwx文件的代码。
——ANE反汇编器的部分代码。
——ANE反汇编器的部分代码。
通过分析model.hwx文件，并在ANECompiler模块找到每个比特的含义，我编写的反汇编器ANEDisassembler工具会详细打印出寄存器的数值和对应的比特位，这样能更方便的猜比特位的具体作用。
目前ANETools只实现了对ANE v5指令集的支持，还没有兼容更高版本的ANE指令集。可能兼容的设备有：iPhone Xs, iPhone Xs Max
, iPhone XR ,iPad Air3 ,iPad mini5 ,iPad8。希望ANETools这个工具能对各位有所帮助。
# 5 攻击面分析与漏洞
本章包含了我总结的可能存在的6个攻击面，并且通过漏洞挖掘验证了部分攻击面是真实存在的。
## 5.1 可能的攻击面
我把ANE可能的攻击面分为6种，每一种攻击面都是一个特权空间到另一个特权空间的提升。
第一个可能的攻击面是从远程到本地电脑或远程到App。如之前所述，mlmodel文件不仅可以在开发者电脑上被xcode的coremlcompiler处理，也可以在iOS设备上被App处理。mlmodel文件可以来自网络或其他不可信的地方。
第二个可能的攻击面是从App到aned守护进程。App会将几乎所有跟ane相关的工作交给aned守护进程去做，他们交互过程中很可能有一些漏洞存在。
第三个可能的攻击面是App到ANE编译器。虽然App不直接与ANE编译器交互，但文件会直接由aned守护进程转交给ANE编译器。ANE编译器一定程度上对App是透明的。实现编译器代码安全是很困难的，比如针对浏览器javascript编译器的攻击总能被实现。一旦拿下ANE编译器的权限，就意味着可以篡改任意ANE计算结果了。
第四个可能的攻击面是App到内核驱动，这个攻击面现在看起来有些难，因为内核驱动现在只开放了3个接口给App。但在较低版本的系统上存在App可以访问所有ANE内核驱动接口的漏洞。
第五个可能的攻击面是从aned守护进程到内核驱动。这个攻击面需要攻击者已获取到aned守护进程的权限。aned守护进程有访问ane内核驱动的所有接口权限。这些接口并不暴露给App，所以很可能存在各种检查不严的情况。
第六个可能的攻击面有关ANE内核驱动和ANE固件。他们之间也存在复杂的交互。使用这个攻击面需要攻击者已取得内核权限或已取得ANE固件权限。
## 5.2 已获苹果承认的ANE相关漏洞
苹果已经在iOS14.5中修复了一个内核ANE内核驱动相关漏洞：https://support.apple.com/zh-cn/HT212317
另有3个ANE相关漏洞已被苹果接受还在修复中。
# 6 总结
苹果神经网络引擎已是相当复杂且庞大，本文的介绍集中在框架、流程和ANE指令分析，虽然还没有深入进入硬件，但把一些关键环节值得关注的要点做了总结，也获得了不错的产出。非常期待同行们能够进一步深入研究与分享，如果有什么问题也欢迎交流。
* * *