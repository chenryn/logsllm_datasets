不过，添加更多的容器并不能自动为您的服务带来规模和弹性；这取决于运行服务的应用。仅仅通过向 SQL 数据库服务添加另一个容器是无法获得 SQL Server 故障转移群集的，因为需要为故障转移显式配置 SQL Server。如果添加另一个容器，您将只有两个不同的数据库实例，它们有不同的数据存储。
如果 Web 应用旨在支持横向扩展，那么它们通常可以很好地扩展。无状态应用可以在任何数量的容器中运行，因为任何容器都可以处理任何请求。但是，如果您的应用在本地维护会话状态，来自同一个用户的请求需要由同一个服务来处理，这将阻止您跨许多容器进行负载平衡，除非您使用粘性会话。
向主机发布端口的服务如果在单个 Docker 引擎上运行，则无法扩展。端口只能有一个操作系统进程监听它们，Docker 也是如此——不能将同一个主机端口映射到多个容器端口。在多主机的 Docker Swarm 上，您可以使用已发布的端口扩展服务，Docker 将在不同的主机上运行每个容器。
在 NerdDinner 中，消息处理程序是真正的无状态组件。他们从队列中接收到一条包含他们需要的所有信息的消息，并对其进行处理。NATS 支持将订阅者分组在同一个消息队列中，这意味着我可以让几个容器运行 save-feature 处理程序，而 NATS 将确保只有一个处理程序获得每个消息的副本，因此我没有重复的消息处理。消息处理程序中的代码已经利用了这一点。
我可以在高峰时间扩大消息处理程序，以提高消息处理的吞吐量。我可以通过`up`命令和`--scale`选项来实现，指定服务名称和所需的实例数量:
```
> docker-compose up -d --scale nerd-dinner-save-handler=3
ch06-docker-compose_elasticsearch_1 is up-to-date
ch06-docker-compose_nerd-dinner-homepage_1 is up-to-date
ch06-docker-compose_message-queue_1 is up-to-date
ch06-docker-compose_nerd-dinner-db_1 is up-to-date
ch06-docker-compose_reverse-proxy_1 is up-to-date
ch06-docker-compose_nerd-dinner-api_1 is up-to-date
Starting ch06-docker-compose_nerd-dinner-save-handler_1 ...
ch06-docker-compose_kibana_1 is up-to-date
ch06-docker-compose_nerd-dinner-web_1 is up-to-date
Creating ch06-docker-compose_nerd-dinner-save-handler_2 ... done
Creating ch06-docker-compose_nerd-dinner-save-handler_3 ... done
```
Docker Compose 将正在运行的应用的状态与 Compose 文件中的配置以及命令中指定的覆盖进行比较。在这种情况下，除了保存晚餐处理程序之外，所有服务都没有变化，因此它们被列为`up-to-date`。保存处理程序有了新的服务级别，因此 Docker Compose 创建了另外两个容器。
随着保存消息处理程序的三个实例的运行，它们以循环方式共享传入的消息负载。这是扩大规模的好方法。处理程序同时处理消息并写入 SQL 数据库，这增加了保存的吞吐量，并减少了处理消息所需的时间。但是写入 SQL Server 的进程数量仍然有严格的限制，所以数据库不会成为这个特性的瓶颈。
我可以通过 web 应用创建多个晚餐，当发布事件消息时，消息处理程序将分担负载。我可以在日志中看到不同的处理程序处理不同的消息，并且没有重复的事件处理:
```
> docker container logs ch06-docker-compose_nerd-dinner-save-handler_1
Connecting to message queue url: nats://message-queue:4222
Listening on subject: events.dinner.created, queue: save-dinner-handler
Received message, subject: events.dinner.created
Saving new dinner, created at: 2/12/2019 11:22:47 AM; event ID: 60f8b653-f456-4bb1-9ccd-1253e9a222b6
Dinner saved. Dinner ID: 1; event ID: 60f8b653-f456-4bb1-9ccd-1253e9a222b6
...
> docker container logs ch06-docker-compose_nerd-dinner-save-handler_2
Connecting to message queue url: nats://message-queue:4222
Listening on subject: events.dinner.created, queue: save-dinner-handler
Received message, subject: events.dinner.created
Saving new dinner, created at: 2/12/2019 11:25:00 AM; event ID: 5f6d017e-a66b-4887-8fd5-ac053a639a6d
Dinner saved. Dinner ID: 5; event ID: 5f6d017e-a66b-4887-8fd5-ac053a639a6d
> docker container logs ch06-docker-compose_nerd-dinner-save-handler_3
Connecting to message queue url: nats://message-queue:4222
Listening on subject: events.dinner.created, queue: save-dinner-handler
Received message, subject: events.dinner.created
Saving new dinner, created at: 2/12/2019 11:24:55 AM; event ID: 8789179b-c947-41ad-a0e4-6bde7a1f2614
Dinner saved. Dinner ID: 4; event ID: 8789179b-c947-41ad-a0e4-6bde7a1f2614
```
我运行的是单个 Docker 引擎，所以无法扩展 Traefik 服务，因为只能将一个容器发布到端口`80`。但是我可以扩展 Traefik 代理的前端容器，这是测试我的应用在扩展到多个实例时是否正常工作的好方法。我将添加原始 NerdDinner web 应用的另外两个实例:
```
> docker-compose up -d --scale nerd-dinner-web=3
ch06-docker-compose_message-queue_1 is up-to-date
...
Stopping and removing ch06-docker-compose_nerd-dinner-save-handler_2 ... done
Stopping and removing ch06-docker-compose_nerd-dinner-save-handler_3 ... done
Creating ch06-docker-compose_nerd-dinner-web_2                       ... done
Creating ch06-docker-compose_nerd-dinner-web_3                       ... done
Starting ch06-docker-compose_nerd-dinner-save-handler_1              ... done
```
仔细看看这个输出——这里发生的事情是正确的，但不是我想要的。Compose 创建了两个新的 NerdDinner web 容器，以满足我指定的 3 的比例，但是它也停止并删除了两个保存处理程序容器。
这是因为 Compose 隐式使用我的`docker-compose.yml`文件作为应用定义，它使用每个服务的单个实例。然后，它为 web 服务添加来自命令的 scale 值，并构建一个期望的状态，表示每个服务都应该有一个容器在运行，除了 web 服务，它应该有三个。它看到 web 服务只有一个容器，所以它又创建了两个。它看到保存处理程序有三个容器，所以它删除了两个。
正是由于这种情况，不建议将合成文件定义与命令中的更改混合使用。仅编写文件应该是应用的理想状态。但是在这种情况下，您不能在 Compose 文件中指定比例选项(您可以在旧版本中指定，但不能从 v3 规范中指定)，因此您需要为所有服务显式添加比例级别:
```
docker-compose up -d --scale nerd-dinner-web=3 --scale nerd-dinner-save-handler=3
```
现在我有三个保存处理程序容器，它们共享消息队列中的工作，还有三个 web 容器。Traefik 将在这三个 web 容器之间对请求进行负载平衡。我可以从我在端口`8080`上发布的 Traefik 仪表板中查看该配置:
![](img/dc786f47-93ea-4ef3-a5dc-2bb67d24bacd.png)
Traefik 在左边的蓝色框中显示了前端路由规则，在右边的绿色框中显示了它们映射到的后端服务。`nerddinner.local`有一个前端路由规则，路径前缀为`/`，将所有流量发送到`nerd-dinner-web`后端(主页除外，主页有不同的规则)。后端显示列出了三个服务器，这是我用 Docker Compose 缩放的三个容器。`172.20.*.*`服务器地址是 Docker 网络上容器可以用来通信的内部 IP 地址。
我可以浏览 NerdDinner 应用，它工作正常，可以跨后端容器对 Traefik 请求进行负载平衡。但是，当我尝试登录时，我会发现 NerdDinner 不是为扩展到多个实例而设计的:
![](img/3819e3df-ac67-4493-9326-587e96033019.png)
这条错误消息告诉我，NerdDinner 希望来自一个用户的所有请求都由 web 应用的同一个实例来处理。Traefik 正好支持这种情况下的粘性会话，所以要解决这个问题，我只需要在我的 Compose 文件中给 web 服务定义添加一个新标签。这将为 NerdDinner 后端启用粘性会话:
```
nerd-dinner-web:
  image: dockeronwindows/ch05-nerd-dinner-web:2e
  labels:
    - "traefik.frontend.rule=Host:nerddinner.local;PathPrefix:/"
    - "traefik.frontend.priority=1"
    - "traefik.backend.loadbalancer.stickiness=true"
```
现在，我可以再次部署，确保包含我的扩展参数:
```
> docker-compose up -d --scale nerd-dinner-web=3 --scale nerd-dinner-save-handler=3
ch06-docker-compose_message-queue_1 is up-to-date
...
Recreating ch06-docker-compose_nerd-dinner-web_1 ... done
Recreating ch06-docker-compose_nerd-dinner-web_2 ... done
Recreating ch06-docker-compose_nerd-dinner-web_3 ... done
```
Compose 重新创建 web 服务容器，删除旧的容器，并用新的配置启动新的容器。现在，Traefik 正在使用粘性会话，所以来自我的浏览器会话的每个请求都将进入同一个容器。Traefik 使用一个自定义 cookie 来实现这一点，该 cookie 指定请求应该路由到的容器 IP 地址:
![](img/d8aba133-97bc-4aa2-bdea-94bf34bd68d6.png)
在这种情况下，cookie 被称为`_d18b8`，它将我的所有请求路由到具有 IP 地址`172.20.26.74`的容器。
大规模运行时发现问题过去只发生在测试环境中，甚至发生在生产环境中。在 Docker 中运行一切意味着我可以在我的 dev 笔记本电脑上大规模测试我的应用的功能，并在发布前发现这些问题。使用现代技术，如 Traefik，也意味着有很好的方法来解决这些问题，而不必改变我的遗留应用。
# 停止和启动应用服务
Docker Compose 中有几个用于管理容器生命周期的命令。理解选项之间的差异很重要，这样您就不会意外地移除资源。
`up`和`down`命令是启动和停止整个应用的钝器。`up`命令创建在合成文件中指定的任何不存在的资源，并为所有服务创建和启动容器。`down`命令则相反——它停止任何正在运行的容器并移除应用资源。如果容器和网络是由 Docker Compose 创建的，则它们会被删除，但卷不会被删除，因此您拥有的任何应用数据都会被保留。
`stop`命令只是停止所有正在运行的容器，而不移除它们或其他资源。停止容器会以正常关闭结束正在运行的进程。`kill`命令通过强制结束运行过程来停止所有容器。停止的应用容器可以通过`start`再次启动，它在现有容器中运行入口点程序。
停止的容器保留了所有配置和数据，但不使用任何计算资源。如果您处理多个项目，启动和停止容器是切换上下文的一种非常有效的方法。如果我正在 nerddiner 上开发，当另一项工作作为优先事项进入时，我可以停止整个 nerddiner 应用来释放我的开发环境:
```
> docker-compose stop
Stopping ch06-docker-compose_nerd-dinner-web_2           ... done
Stopping ch06-docker-compose_nerd-dinner-web_1           ... done
Stopping ch06-docker-compose_nerd-dinner-web_3           ... done
Stopping ch06-docker-compose_nerd-dinner-save-handler_3  ... done
Stopping ch06-docker-compose_nerd-dinner-save-handler_2  ... done
Stopping ch06-docker-compose_nerd-dinner-save-handler_1  ... done
Stopping ch06-docker-compose_nerd-dinner-index-handler_1 ... done
Stopping ch06-docker-compose_kibana_1                    ... done
Stopping ch06-docker-compose_reverse-proxy_1             ... done
Stopping ch06-docker-compose_nerd-dinner-homepage_1      ... done
Stopping ch06-docker-compose_nerd-dinner-db_1            ... done
Stopping ch06-docker-compose_nerd-dinner-api_1           ... done
Stopping ch06-docker-compose_elasticsearch_1             ... done
Stopping ch06-docker-compose_message-queue_1             ... done
```
现在我没有运行容器，我可以切换到另一个项目。当这项工作完成后，我可以通过运行`docker-compose start`再次启动 NerdDinner。
您还可以通过指定名称来停止单个服务，如果您想测试应用如何管理故障，这非常有用。如果索引晚餐处理程序无法访问弹性搜索，我可以通过停止弹性搜索服务来检查它们的行为:
```
> docker-compose stop elasticsearch
Stopping ch06-docker-compose_elasticsearch_1 ... done
```
所有这些命令都是通过将编写文件与 Docker 中运行的服务进行比较来处理的。您需要访问 Docker 编写文件才能运行任何 Docker 编写命令。这是在单个主机上使用 Docker Compose 运行应用的最大缺点之一。另一种方法是使用相同的合成文件，但将其作为栈部署到 Docker Swarm，我将在下一章中介绍这一点。
The `stop` and `start` commands use the Compose file, but they work on the containers that currently exist, not just the definition in the Compose file. So, if you scale a service, then stop the whole application and then start it again—you'll still have all the containers you scaled to. Only the `up` command uses the Compose file to reset the application to the desired state.
# 升级应用服务
如果从同一个合成文件中重复运行`docker compose up`，则第一次运行后不会进行任何更改。Docker Compose 会在运行时将 Compose 文件中的配置与活动容器进行比较，并且不会更改资源，除非定义已经更改。这意味着您可以使用 Docker Compose 来管理应用升级。
我的合成文件目前正在使用我在[第三章](03.html)*中构建的映像的数据库服务.NET 框架和.NET 核心应用*，标记为`dockeronwindows/ch03-nerd-dinner-db:2e`。在本章中，我将审计字段添加到数据库模式的表中，并构建了数据库映像的新版本，标记为`dockeronwindows/ch06-nerd-dinner-db:2e`。
我在同一个`ch06-docker-compose`目录下有第二个撰写文件，叫做`docker-compose-db-upgrade.yml`。升级文件不是完整的应用定义；它只包含数据库服务定义的一个部分，使用新的 image 标记:
```
version: '3.7'
services:
  nerd-dinner-db:
    image: dockeronwindows/ch06-nerd-dinner-db:2e
```
Docker Compose 支持覆盖文件。您可以运行`docker-compose`命令并传递多个撰写文件作为参数。Compose 将按照命令中指定的顺序，从左到右将所有文件连接在一起。覆盖文件可用于向应用定义中添加新的部分，也可以替换现有的值。