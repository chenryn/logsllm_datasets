title:Analysis and design of an adaptive virtual queue (AVQ) algorithm
for active queue management
author:Srisankar S. Kunniyur and
Rayadurgam Srikant
Analysis and Design of an Adaptive Virtual Queue (AVQ)
Algorithm for Active Queue Management∗
†
Srisankar Kunniyur
‡
R. Srikant
ABSTRACT
Virtual Queue-based marking schemes have been recently
proposed for AQM (Active Queue Management) in Inter-
net routers. We consider a particular scheme, which we call
the Adaptive Virtual Queue (AVQ), and study its following
properties: stability in the presence of feedback delays, its
ability to maintain small queue lengths and its robustness
in the presence of extremely short ﬂows (the so-called web
mice). Using a mathematical tool motivated by the ear-
lier work of Hollot et al, we present a simple rule to design
the parameters of the AVQ algorithm. We then compare
its performance through simulation with several well-known
AQM schemes such as RED, REM, PI controller and a non-
adaptive virtual queue algorithm. With a view towards im-
plementation, we show that AVQ can be implemented as a
simple token bucket using only a few lines of code.
1.
INTRODUCTION
In the modern day Internet, there has been a strong de-
mand for QoS and fairness among ﬂows. As a result, in
addition to the sources, the links are also forced to play an
active role in congestion control and avoidance. Random
Early Discard (RED) [4] was originally proposed to achieve
fairness among sources with diﬀerent burstiness and to con-
trol queue lengths. RED allows for dropping packets before
buﬀer overﬂow. Another form of congestion notiﬁcation that
has been discussed since the advent of RED is Explicit Con-
gestion Notiﬁcation (ECN)[3]. ECN has been proposed to
allow links to help in congestion control by notifying users
∗
Research supported by NSF grants NCR-9701525, ANI-
9813710 and DARPA grant F30602-00-2-0542.
†
S. Kunniyur is with the Department of Electrical and
Computer Engineering and Co-ordinated Science Lab, Uni-
versity of Illinois at Urbana-Champaign. Email: kun-
PI:EMAIL
‡
R. Srikant is with the Department of General Engineer-
ing and Co-ordinated Science Lab, University of Illinois at
Urbana-Champaign. Email: PI:EMAIL
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’01, August 27-31, 2001, San Diego, California, USA..
Copyright 2001 ACM 1-58113-411-8/01/0008 ...$5.00.
when it detects an onset of congestion. The links on de-
tecting incipient congestion set a bit in the packet header
that notiﬁes the user that a link on its route is experiencing
congestion. The user then reacts to the mark as if a packet
has been lost. Thus, the link avoids dropping the packet
(thereby enhancing goodput) and still manages to convey
congestion information to the user.
To provide ECN marks or drop packets to provide fairness
and control queue lengths, the routers have to select packets
intelligently in a manner that conveys information about the
current state of the network to the users. Algorithms which
the routers employ to convey such information are called Ac-
tive Queue Management (AQM) schemes. An AQM scheme
might mark or drop packets depending on the policy at the
router. In this paper, we use the term “marking” more gen-
erally to refer to any action taken by the router to notify
the user of incipient congestion. The action can, in reality,
be ECN-type marking or dropping (as in RED) depending
upon the policy set for the router. As in earlier work on
studying AQM schemes [14, 7, 6], this distinction is blurred
in the mathematical analysis to allow for the development
of simple design rules for the choice of AQM parameters.
However, our simulations consider marking and dropping
schemes separately.
Designing robust AQM schemes have been a very active
research area in the Internet community. Some AQM schemes
that have been proposed include RED [4], a virtual queue-
based scheme where the virtual capacity is adapted [11, 12],
SRED [15], Blue [2], Proportional Integral (PI) controller [7],
REM [1], a virtual queue based AQM scheme [5] (which we
refer to as the Gibbens-Kelly Virtual Queue, or the GKVQ
scheme) among others. While most of the AQM schemes
proposed detect congestion based on the queue lengths at
the link (e.g., RED), some AQM schemes detect congestion
based on the arrival rate of the packets at the link (e.g.,
virtual queue-based schemes) and some use a combination
of both (e.g., PI). Also, most of the AQM schemes involve
adapting the marking probability (as noted before we use
the term marking to refer to both marking and dropping)
in some way or the other. An important question is how
fast should one adapt while maintaining the stability of the
system? Here the system refers jointly to the TCP con-
gestion controllers operating at the edges of the network
and the AQM schemes operating in the interior of the net-
work. Adapting too fast might make the system respond
well to changing network conditions, but it might lead to
large oscillatory behavior or in the worst case even instabil-
ity. Adapting it too slowly might lead to sluggish behavior
and more losses or marks than desired which might lead to
a lower throughput.
In this paper, we start by presenting an implementation of
a virtual-queue AQM scheme, namely the Adaptive Virtual
Queue (AVQ). We then discuss a methodology for ﬁnding
the fastest rate at which the marking probability adapta-
tion can take place given certain system parameters like the
maximum delay and the number of users so that the sys-
tem remains stable. We note that, the marking probability
in the AVQ is implicit, no marking probability is explic-
itly calculated and thus, no random number generation is
required. On the other hand, we replace the marking prob-
ability calculation with the computation of the capacity of a
virtual queue. Motivated by the success of the analysis and
design of other AQM schemes in [14, 7, 6], we consider a
single router accessed by many TCP sources with the same
round-trip time (RTT) and use a control-theoretic analysis
to study the stability of this system. However, unlike [14,
7, 6], we make no assumptions regarding the dynamic be-
havior of the linearized system. For instance, the authors in
[7] neglect the delay in the ﬂow control dynamics by assum-
ing that the ﬂow rates are large enough which forces their
system to have a small number of users. We make no such
assumptions in this paper.
The AVQ algorithm maintains a virtual queue whose ca-
pacity (called virtual capacity) is less than the actual capac-
ity of the link. When a packet arrives in the real queue,
the virtual queue is also updated to reﬂect a new arrival.
(This was originally proposed in [11] as a rate-based mark-
ing scheme.) Packets in the real queue are marked/dropped
when the virtual buﬀer overﬂows. The virtual capacity at
each link is then modiﬁed such that total ﬂow entering each
link achieves a desired utilization of the link. It was shown
in [12] that a ﬂuid-model representation of the above scheme
along with the congestion-controllers at the end-hosts was
semi-globally asymptotically stable when the update at the
links were done suﬃciently slow. A feature of the AVQ
scheme that is appealing is in the absence of feedback de-
lays, it is shown in [12], that the system is fair in the sense
that it maximizes the sum of utilities of all the users in the
network. Combining this with a result in [11] which shows
that a TCP user with an RTT of dr can be approximated
, where xr is the rate
by a user with a utility function
of the TCP user, shows that the network as a whole con-
. This
verges to an operating point that minimizes
utility function called the potential delay was introduced as
a possible fairness criterion in [13]. The throughput under
pr, where pr is the
this utility function is given by 1/dr
loss probability seen by User r which is consistent with the
models in [14, 7, 6]. While we use this simpliﬁed model
for analysis in the paper, our simulations in ns-2 use TCP-
Reno, including slow-start, time-out, fast retransmit, etc. A
slightly more reﬁned utility function is used in [9] and the
results in this paper can be easily modiﬁed to incorporate
that utility function.
−1
d2
r xr
−1
d2
r xr
(cid:1)
r
√
The starting point of this paper is the ﬂuid-model of the
TCP ﬂow-control problem along with the AVQ scheme that
was proposed in [11]. However, here we explicitly consider
the feedback delay due to the RTT of each user and thus,
we obtain a delay-diﬀerential equation. We linearize this
system and obtain conditions on d, the number of users N,
the utilization γ of the link and a smoothing parameter α in
the update equation of the AVQ scheme to ensure stability.
The rest of the paper is organized as follows: in Section 2,
we present an implementation of the AVQ algorithm and
provide design rules for the stability of the AVQ and TCP
together. In Section 3, we provide detailed ns-2 to validate
our design rules and also compare the AVQ algorithm with
RED, REM, GKVQ and the PI controllers. The PI con-
troller is somewhat similar to AVQ in that it adapts the
marking probability in a manner similar to the virtual ca-
pacity adaptation in the AVQ scheme, but it depends on
the queue size at the link. As a result, for small buﬀers the
system tends to perform poorly. Also, since the marking
probability is directly modiﬁed and this update has to be
slow enough for system stability, the scheme exhibits slug-
gishness when short ﬂows are introduced. This would be
the subject of simulations in Section 3.
In Section 4, we
provide theoretical justiﬁcation for the design rules in Sec-
tion 2. Conclusions are provided in Section 5.
2. THE AVQ ALGORITHM
Let C be the capacity of a link and γ be the desired uti-
lization at the link. The AVQ scheme, as presented in [11,
12], at a router works as follows:
• The router maintains a virtual queue whose capacity
˜C ≤ C and whose buﬀer size is equal to the buﬀer size
of the real queue. Upon each packet arrival, a ﬁctitious
packet is enqueued in the virtual queue if there is suf-
ﬁcient space in the buﬀer. If the new packet overﬂows
the virtual buﬀer, then the packet is discarded in the
virtual buﬀer and the real packet is marked by setting
its ECN bit or the real packet is dropped, depending
upon the congestion notiﬁcation mechanism used by
the router.
• At each packet arrival, the virtual queue capacity is
updated according to the following diﬀerential equa-
tion:
˙˜C = α(γC − λ),
(1)
where λ is the arrival rate at the link. The rationale
behind this is that marking has to be more aggressive
when the link utilization exceeds the desired utilization
and should be less aggressive when the link utilization
is below the desired utilization.
We now make the following observations. No actual en-
queueing or dequeuing of packets is necessary in the virtual
queue, we just have to keep track of the virtual queue length.
Equation (1) can be thought of as a token bucket where to-
kens are generated at rate αγC up to a maximum of C and
depleted by each arrival by an amount equal to α times the
size of the packet. Deﬁne
B = buﬀer size
s = arrival time of previous packet
t = Current time
b = number of bytes in current packet
V Q = Number of bytes currently in the virtual queue
Then, the following pseudo-code describes an implemen-
tation of AVQ scheme:
The AVQ Algorithm
At each packet arrival epoch do
V Q ← max(V Q − ˜C(t − s), 0)
Queue Size ∗/
If V Q + b > B
/∗ Update Virtual
else
Mark or drop packet in the real queue
V Q ← V Q + b
/∗ Update Virtual Queue Size ∗/
/∗
Update Virtual Capacity ∗/
endif
˜C = max(min( ˜C + α ∗ γ ∗ C(t − s), C) − α ∗ b, 0)
/∗ Update last packet arrival time ∗/
s ← t
We note the following features of the AVQ scheme:
1. The implementation complexity of the AVQ scheme is
comparable to RED. RED performs averaging of the
queue length, dropping probability computation and
the random number generation to make drop decisions.
We replace these with the virtual capacity calculation
in AVQ.
2. AVQ is a primarily a rate-based marking, as opposed
to queue length or average queue length based mark-
ing. This provides early feedback, the advantages of
which have been explored by Hollot et al [7, 6], which
was also mentioned in Kelly et al [10].
3. Instead of attempting to regulate queue length as in
RED, PI controller or recent versions of REM, we reg-
ulate utilization. As we will see in simulations, this is
more robust to the presence of extremely short ﬂows or
variability in the number of long ﬂows in the network.
The reason is that, when utilization is equal to one,
variance introduced by the short ﬂows seems to lead
to an undesirable transient behavior where excessively
large queue lengths persist over long periods of time.
4. Unlike the GKVQ algorithm [5], we adapt the capacity
of the virtual queue. A ﬁxed value of ˜C leads to a uti-
lization that is always smaller than ˜C/C and it could
be much smaller than this depending on the number
of users in the system. Our marking mechanism is also
diﬀerent in that we do not mark until the end of a busy
period after a congestion episode.
5. There are two parameters that have to be chosen to im-
plement AVQ: the desired utilization γ and the damp-
ing factor α. The desired utilization γ determines
the robustness to the presence of uncontrollable short
ﬂows. It allows an ISP to trade-oﬀ between high levels
of utilization and small queue lengths. Both the pa-
rameters α and γ determine the stability of the AVQ
algorithm and we provide a simple design rule to choose
these parameters.
The starting point for the analysis of such a scheme is
the ﬂuid-model of the TCP congestion-avoidance algorithm
as proposed in [11]. A theoretical justiﬁcation of how a
stochastic discrete-time equation can be approximated by a
ﬂuid-model is shown in [8]. We will then incorporate the
virtual capacity update equation with this model and study
the stability of system under linearization.
Consider a single link of capacity of C and let the desired
utilization of the link be γ ≤ 1. Let N TCP users be access-
ing that link and let d be the common round-trip propaga-
tion delay of each user. We will model the TCP users using
−1
d2x utility function as proposed in [11]. For the sake of
the
simplicity and tractability, we will neglect the slow-start and
the time-out behavior when modeling the TCP users. We
will later show through simulations that even with slow-start
and timeouts, the result holds. The congestion-avoidance
algorithm of the TCP users can be written as:
N(cid:2)
− βxi(t)xi(t − d)p(
j=1
˙xi =
1
d2
xj(t − d), ˜C(t − d)),
(2)
(cid:3)
∗
3
2p∗ , where p
where β  0
where λ =
is the smoothing parameter. Note that α determines how
fast one adapts the marking probability at the link to the
changing network conditions. We will present a design rule
that speciﬁes how to choose α for a given feedback delay
(d), utilization (γ) and a lower bound on the number of
users (N ).
In fact, as we will show in Section 4, one can
arrive at bounds on any of the four parameters α, γ, N or d
given the other three using the same design rule. However,
in practice, it would seem most natural to choose α given
the other three parameters.
The equilibrium point of the non-linear TCP/AQM model
is given by:
(cid:2)
∗
∗
i = λ
x
= γC
i
∗
x
i =
γC
N
p(γC, ˜C
∗
) =
N 2
β(dγC)2
Let us assume that
∗
λ(t) = λ
∗
˜C(t) = ˜C
+ δλ(t)
+ δ ˜C(t).
The linearized model of the non-linear TCP/AQM model
can now be written as:
˙δλ = −K11δλ(t) − K12δλ(t − d) + K2δ ˜C(t − d) (4)
˙δ ˜C = −αδλ(t),
(5)
where
K11 :=
N
γCd2
K12 :=
K2 := β
γC 2
N
N
γCd2 + β
(cid:4)(cid:4)(cid:4)(cid:4) ∂p(γC, ˜C
∂ ˜C
γC 2
N
∂p(γC, ˜C
∗
)
∂λ
(cid:4)(cid:4)(cid:4)(cid:4) .
∗
)
We will now state the main result of this paper which serves
as the design for the AVQ algorithm. The proof of this result
is given in Section 4.
Theorem 1. Suppose that the feedback delay ˆd, number
satis-
∗
of users ˆN , and the utilization ˆγ, are given. Find α
fying:
(cid:5)
(cid:6)
ω ˆd + arctan
ω
K11
π
2
,
(6)
=
(cid:3)
(cid:7)
∗
where ω is deﬁned as:
ω(α, d, N, γ) =
1√
2
Then, for all α  ˆN ,
We note that (6) can be easily solved using a simple nu-
merical solver such as those found in Mathematica or Mat-
lab.
3.
SIMULATIONS
In this section, we will use the packet-simulator ns-2 to
simulate the adaptive virtual queue scheme. We will show
that simulation results agree with the convergence results
shown in the previous section.
In particular, we will se-
lect an α, using Theorem 1 that will ensure stability for a
given round-trip delay d, and a lower bound on the number
of users, Nmin. We then present a single set out of many
experiments that we did to show that α indeed stabilizes
the system even in the presence of arrivals and departure of
short connections. We will then compare this scheme with
many other AQM schemes.
3.1 Simulation Setup
Throughout this section, we consider a single link of ca-
pacity 10 Mbps that marks or drops packets according to
some AQM scheme. For AVQ, we always let γ, the desired
utilization, be 0.98. We use TCP-Reno as the default trans-
port protocol and assume that packets have an average size
of 1000 bytes. Each TCP connection has a propagation de-
lay between 40 ms and 130 ms. The buﬀer size at the link
is assumed to be 100 packets.
In the ﬁrst four experiments, we assume that the link
marks packets and thus, any packet loss is due to buﬀer
overﬂow.
In these experiments, we demonstrate that the
AVQ scheme achieves high utilization and low packet loss.
Further, the algorithm responds quickly to changing net-
work conditions such as varying number of TCP ﬂows. In
the last experiment, we compare the AVQ scheme with other
schemes when the link drops packets (as opposed to mark-
ing) to indicate congestion. Again, the AVQ scheme is
shown to have smaller queue lengths compared to other
schemes.
The maximum delay that a packet can incur is Tp + qmax
C ,
where Tp is the round-trip propagation delay. Therefore,
we design the AVQ controller for a delay of d = 210 ms.
Using the design rule in Theorem 1, any α < 0.17, will
ensure stability. In the experiments, we let α be 0.15. In all
experiments, we consider two types of ﬂows: FTP ﬂows that
are long lived and short ﬂows of 20 packets each.
Experiment 1:
In this experiment, we study the convergence properties and
buﬀer sizes at the queue for the AVQ scheme alone. The
number of FTP ﬂows is 180 while the short ﬂows arrive at
the link at the rate of 30 ﬂows per second. To simulate a
sudden change in network conditions, we start the experi-
ment with only FTP ﬂows in the system. Short ﬂows are
introduced after 100 seconds. Again, the propagation delays
of the short ﬂows are distributed in the interval [40, 130] ms.
The evolution of the virtual capacity is given in Figure 2.
At 100 seconds, there is a drop in the virtual capacity since
the AVQ algorithm adapts to the changing number of ﬂows.
Beyond 100 seconds, the virtual capacity is lower than it was
before 100 seconds since the links marks packets aggressively
due to the increased load. The queue length evolution for
the system is given in Figure 1. Except during transients in-
troduced by load changes, the queue lengths are small, less
than 20 packets. At 100 seconds, the queue length jumps
up due to the short ﬂows. However, the system stabilizes
and the queue lengths are small once again. Table 1 gives
the average and the standard deviation of the queue length
before and after the introduction of short ﬂows. We can see
Table 1: Experiment 1. Mean and the standard
deviation of the queue size before and after the in-
troduction of short ﬂows.
Before Short Flows After Short ﬂows
Avg. Queue Size
Std. Deviation
13.11
20.44
10.39
15.17