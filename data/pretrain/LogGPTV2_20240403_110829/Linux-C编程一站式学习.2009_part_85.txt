只要取得某种sockaddr结构体
1
因此这些函数的参数都
例
，包括16位端
各
地
---
## Page 700
口是void *addrptr。
其中inet_pton和inet_ntop不仅可以转换IPv4的in_addr，还可以转换IPv6的in6_addr，因此函数接
第37章socket编程
size_t
const char
len);
*inet_ntop(int family, const void *addrptr, char *strptr,
全国嵌入式人才培训基地
起始页
上一级
2.基于TCP协议的网络程序
700
---
## Page 701
数据传输的过程:
服务器调用socket()、bind()、listen()完成初始化后，
2.基于TCP协议的网络程序 请点评
从accept()返回。
一个SYN-ACK段,
态
下图是基于TCP协议的客户端/服务器程序的一般流程：
上一页
：客户端调用socket()初始化后，
图 37.2.TCP协议通讯流程
connect(fd，服务器地址端口）
read(fd, buf, size)
阳塞等待服务器应答
close(fd)关闭连接
：客户端收到后从connect()返回，同时应答一个ACK段，服务器收到后
connec返回
客户端应用层
read返回
ESTABLISHED
FIN_WAIT_1
TIME_WAIT
FIN_WAIT_2
SYN_SENT
CLOSEDI
CLOSED
，调用connect()发出SYN段并阻塞等待服务器应答，服务器应答
客户端TCP层
2.基于TCP协议的网络程序
全国嵌入式人才培训基地
第37章socket编程
A
SYN+ACK
ACK
ACK
FIN
ACK
DATA
DATA
ACK
SYN
服务器端TCP层
，调用accept()阻塞等待，
CLOSED
LAST_ACK
CLOSE_WAIT
ESTABLISHED
SYN_RCVD
LISTEN
CLOSED
close(connfd)
处理客户端清求
分配新的指过符connfd和客户端通信
connfd=accept（listenfd，客户端地址端口）
read返回0
阻塞等待客户端数据洁求
read(connfd,buf, size)
read返回
阳塞等待客户端数据请求
read(connfd,buf, size)
accept返回
阻塞等待客户端连接
bind(listenfd，服务器地址端口）
服务器端应用层
定istenfd的源地址
！
处于监听端口的状
10
---
## Page 702
server.c的作用是从客户端读字符，然后将每个字符转换为大写并回送给客户端。
2.1.最简单的TCP网络程序 请点评
下面通过最简单的客户端/服务器程序的实例来学习socket APl。
明收到了FIN段
态变化，
时TCP协议层完成什么动作，
在学习socket API时要注意应用程序和TCP协议层是如何交互的：
于半关闭状态，仍可接收对方发来的数据。
用close()后,
的read()返回o，这样服务器就知道客户端关闭了连接，
如果客户端没有更多的请求了，
用read()阻塞等待服务器的应答，
请求给服务器，
用read(),
动发起请求,
建立连接后,
待下一
sizeof(servaddr));
比如从某个阻塞的socket函数返回就表明TCP协议收到了某些段，再比如read()返回o就表
一条请求，客户端收到后从read()返回，发送下一条请求，如此循环下去。
int main(void)
#include
#include
#include
#include
读socket就像读管道一样，
 服务器被动处理请求，
 TCP协议提供全双工的通信服务，
，服务器收到后从read()返回，
 listen(listenfd, 20);
bind(listenfd,
 listenfd = Socket(AF_INET, SOCK_STREAM, O);
int i, n;
int listenfd,
socklen_
 struct sockaddr_in servaddr, cliaddr;
servaddr
t
，比如调用connect()会发出SYN段*应用程序如何知道TCP协议层的状
h>
 就调用close()关闭连接，
，服务器调用write()将处理结果发回给客户端，再次调用read()阻塞
 connfd;
(struct sockaddr *)&servaddr,
，如果没有数据到达就阻塞等待，
一问一答的方式。
len;
AF
对客户端的请求进行处理，
但是-
htonl(INADDR_ANY);
一般的客户端/服务器程序的流程是由客户端主
，也调用close()关闭连接。注意，任何一方调
因此，
 就像写端关闭的管道一样，服务器
服务器从accept()返回后立刻调
*应用程序调用某个socket函数
在此期间客户端调
---
## Page 703
于连接等待状态，listen()声明sockfd处于监听状态，并且最多允许有backlog个客户端处于连接待
回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未accept的客户端就处
典型的服务器程序可以同时服务于多个客户端，
为SERV_PORT，我们定义为8000。
在所有的IP地址上监听,
本地的任意IP地址，
首先将整个结构体清零,
数addrlen指定结构体的长度。我们的程序中对myaddr参数是这样初始化的：
实际上可以接受多种协议的sockaddr结构体，
bind()的作用是将参数sockfd和myaddr绑定在一起，
口号后就可以向服务器发起连接，
服务器程序所监听的网络地址和端口号通常是固定不变的，
议。protocol参数的介绍从略，指定为o即可。
流的传输协议。
于IPv4，family参数指定为AF_INET。对于TCP协议,
可以像读写文件一样用read/write在网络上收发数据，
socket()打开一个网络通讯端口，
下面介绍程序中用到的socket APl，这些函数都在sys/socket.h中。
bzero(&servaddr,
addrlen);
int bind(int sockfd, const struct sockaddr *myaddr, socklen_t
int socket(int family, int type, int protocol);
sizeof(str)),
&cliaddr_len);
int
listen(int sockfd, int backlog);
，如果是UDP协议,
因为服务器可能有多个网卡，
直到与某个客户端建立了连接时才确定下来到底用哪个IP地址，端口号
 然后设置地址类型为AF_INET,
for （i = 0; i 
printf(
 sizeof(servaddr));
，如果成功的话,
因此服务器需要调用bind绑定一个固定的网络地址和端口
则type参数指定为SOCK_DGRAM，表示面向数据报的传输协
 buf[i] =
ntohs(cliaddr.sin_port));
 htonl(INADDR_ANY);
buf, n);
而不关闭listenfd，
while (l)
int accept(int sockfd, struct sockaddr *cliaddr, socklen_t
*
client.c */
Sockfd = SOcket(AF_INET, SOCK_STREAM, O);
str = argv[l];
if (argc_ != 2)
struct sockaddr_in servaddr;
n = read(connfd, buf, MAXLINE);
 cliaddr_len = sizeof(cliaddr);
 服务器调用accept()接受连接，如果服务器调用accept()时还没有客户端的连接请
nar *str;
<uni
std
，再次回到循环开头listenfd仍然用作accept的参数。accept()成功返回-
("usage:
(struct 
./client message\n", stderr);
sockaddr *)&cliaddr, &cliaddr_len);
，传出的是客户端地址结构体的实际长度（有可能没有
 传入的是调用者提供的
而accept()的返
---
## Page 705
再做一个小实验，
主机的通讯。
可见客户端的端口号是自动分配的。现在把客户端所连接的服务器IP改为其它主机的IP，试试两台
回到server所在的终端，看看server的输出：
可以看到server程序监听8000端口，IP地址还没确定下来。现在编译运行客户端:
然后在另一个终端里用netstat命令查看:
先编译运行服务器：
己的地址，而connect的参数是对方的地址。connect()成功返回0,
客户端需要调用connect()连接服务器，
号都不一样，客户端要连接服务器就会遇到麻烦。
用bind()，
客户端不是不允许调用bind(),
由于客户端不需要固定的端口号，
Response 
S
int connect(int sockfd, const struct sockaddr *servaddr, socklen_t
sizeof(servaddr));
ABCD
LISTEN
tcp
S
received
 Accepting connections ...
但如果服务器不调用bind()，
./client
./server
./server
 在客户端的connect()代码之后插一个while(1);死循环，使客户端和服务器都处于
close(sockfd);
write(sockfd, str, strlen(str));
return 0;
 connect(sockfd, (struct sockaddr *)&servaddr,
 netstat 
 from server:
 abcd
8148/server
lesponse
只是没有必要调用bind()固定一个端口号，
0.0.0.0:8000
，因此不必调用bind()，
，connect和bind的参数形式-
，内核会自动给服务器分配监听端口，每次启动服务器时端口
，客户端的端口号由内核自动分配。注意,
&servaddr.sin_addr);
0.0.0.0:*
出错返回-1。
一致，
，区别在于bind的参数是自
 服务器也不是必须调
705
---
## Page 706
码包装成新的函数，做成一个模块wrap.c：
为使错误处理的代码不影响主程序的可读性,
都成功，
2.2.错误处理与读写控制 请点评
的端口号，也对应一个TCP连接。
应用程序中的一个socket文件描述符对应一个socket pair，
连接中的状态，
上面的例子不仅功能简单，
client.c中的sockfd
server.c中 的connfd|127.0.0.1:8000 
server.c中的listenfd0.0.0.0:8000
socket文件描述符源地址:源端口号目的地址:目的端口号
表 37.1. client和server的socket状态
again:
void perr_exit(const char *s)
，必须进行出错处理，这样一方面可以保证程序逻辑正常，另一方面可以迅速得到故障信
int Accept(int fd, struct sockaddr *sa,
ESTABLISHED8343/server
tcp
tcp
21
/client abcd &
[1]
:/server &
8344
8343
用
int n;
err(s);
8343/server
命令查看：
else
而且简单到几乎没有什么错误处理，
127.0.0.1:44406127.0.0.1:8000
127.0.0.1:8000
127.0.0.1:44406
0.0.0.0:8000
( ,)x 
 goto again;
，我们把与socket相关的一些系统函数加上错误处理代
127.0.0.1:44406
0.0.0.0:*
，socklen_t *salenptr)
，也就是源地址:源端口号和目的地址:目
127.0.0.1:44406
127.0.0.1:8000
0.0.0.0:*
(errno == EINTR))
，我们知道，系统调用不能保证每次
ESTABLISHED
ESTABLISHED
LISTEN 
状态
---
## Page 707
时不能立刻重试。对于accept，如果errno是ECONNABORTED，也应该重试。详细解释见参考资
void Close(int fd)
again:
ssize_t Write(int fd, const void *ptr, size_t nbytes)
again:
ssize_t Read(int fd, 
int Socket(int family, int type, 
void Listen(int fd, int backlog)
void Connect(int fd, const struct sockaddr *sa, socklen_t salen)
void Bind(int fd, const struct sockaddr *sa, socklen_t salen)
if （ (n = write(fd,
ssize_t n;
return n;
ssize_t n;
return n;
return 
int 
if (listen(fd, backlog)
if
return n;
（(n
n;
 n;
else
else
=
perr_exit("listen error");
 void *ptr,
return -1;
return -1;
 goto again;
EtrN/TR)
 salen）< 0)
error");
 nbytes)） == -l） {
nbytes)） == -l） {
 size_t nbytes)
int protocol)
error");
707
---
## Page 708