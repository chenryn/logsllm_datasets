### Needed Stranger Policy with the Prop Share Resource Allocation Policy

The Needed Stranger policy, when combined with the Prop Share resource allocation policy, presents a practical and lightweight alternative for designing robust protocols. 

### Trade-off Between Performance and Robustness

When examining highly robust protocols, it becomes evident that most of them do not rank among the highest-performing protocols. This observation suggests a trade-off between performance and robustness.

However, upon closer inspection of the top right corner of Figure 2, we find that there are at least some protocols that exhibit both high robustness and high performance (with robustness and performance values above 0.8). Further analysis reveals that there are nine such protocols, all of which follow the Sort Loyal ranking function. No other dimension, such as resource allocation or stranger policy, is uniform across these nine protocols. The Sort Loyal ranking function cooperates with peers who have cooperated with it for the longest durations.

It might be assumed that a ranking policy like Sort Loyal would not fare well in terms of robustness due to the risk that a fast peer using this ranking function could get stuck with very slow peers (who follow another protocol) that keep cooperating with it. However, it is noteworthy that the highest robustness achieved by a protocol that sorts others based on loyalty is an impressive 0.97.

### Robustness Analysis

Comparing Figures 3 and 4, we observe that while a low number of partners is beneficial for high performance, the situation is reversed for robustness. In Figure 4, most highly robust protocols have a high number of partners. This is intuitive because protocols with a low number of partners are more likely to perform poorly in the face of an invading protocol that maintains a high number of partners. When an invasion occurs, peers with a high number of partners are less likely to find themselves short of partners compared to those with fewer partners. Consequently, if some partners defect, peers with a high number of partners can continue to download at high speeds, whereas peers with a low number of partners will likely suffer from poor speeds.

From Figure 2, we see that some protocols achieve robustness values above 0.99. Analyzing these highly robust protocols, we discovered interesting properties, including the number of partners and their robustness. For example, a peer that maintains nine partners will suffer less when one partner defects compared to a peer that only maintains one partner.

### Aggressiveness

In Figure 8, we observe that robustness and aggressiveness are linearly correlated, with a Pearsonâ€™s correlation coefficient of 0.96. This suggests that robust protocols are also highly aggressive, and there does not appear to be a significant trade-off between robustness and aggressiveness. We can conclude that the results for robustness also hold for aggressiveness.

### Regression Analysis

We applied multiple linear regression analysis to the entire protocol design space, as reported in Table 3. The values of \( h \) and \( k \) (i.e., the number of strangers and partners) were treated as numerical values, while other variables were categorical and substituted with dummy variables. The key findings from the regression analysis include:

1. **Freeride as a Resource Allocation Policy (R3)**: This has the most negative impact on performance and aggressiveness and also significantly reduces robustness.
2. **Defect Stranger Policy (B3)**: This policy has the largest negative effect on robustness. Conversely, the "When needed" policy (B2) increases robustness and aggressiveness but does not significantly affect performance.
3. **Increasing the Number of Strangers**: This positively impacts performance, robustness, and aggressiveness, with the greatest positive effect on all three measures.
4. **Higher Number of Partners**: This increases robustness and aggressiveness but not performance.
5. **TF2T Strategy (C2)**: This consistently has a negative effect on all three measures.
6. **Choice of Ranking Function**: This has a significant impact on robustness and aggressiveness, as shown in Figure 7. The Sort Loyal ranking function (I5) is the only one that significantly improves performance.

### Birds Protocol Analysis

We developed a robust variant of BitTorrent, termed "Birds," using game-theoretic analysis. Subsequently, we augmented this with Design Space Analysis (DSA) to evaluate how Birds performs in a larger, more realistic design space.

- **Performance**: The best Birds variant, which ranks others by proximity and employs Equal Split reciprocation, achieves a performance value of 0.83, ranking 30th among 3,270 protocols.
- **Robustness**: Birds achieves a robustness value of 0.76, ranking 714th.
- **Aggressiveness**: Birds achieves an aggressiveness value of 0.74, ranking 630th.

### Discussion

Using DSA, we discovered protocol variants that excel through unique and counter-intuitive combinations of dimensions. Some combinations lead to extremely high performance, while others achieve very high robustness. Highly robust protocols are ideal for open distributed systems, where protocol variants may enter, while high-performance protocols are better suited for closed systems where incentives are not required. The regression analysis provided insights into practical protocol designs, indicating which dimensions should be preferred and which should be avoided.

Finally, Birds ranked well in performance and within the top quarter in robustness. Given that Birds was devised using a highly abstracted game-theoretic analysis, we conclude that:
1. Game-theoretic analysis is a useful tool for devising protocols through simple abstractions that perform reasonably well.
2. DSA is valuable for discovering protocols that outperform Birds in terms of robustness and performance.

### Validation of DSA Results

To validate the DSA results, we modified an instrumented BitTorrent client provided by [14] to test two protocols: "Loyal-When-needed," which uses the Sort Loyal ranking function and the "When needed" stranger policy, and "Birds," which uses the Proximity ranking function. The third protocol type is the standard BitTorrent, serving as the baseline.

**Experimental Setup**: We pitted one protocol against another with varying proportions, adopting an experimental setup similar to [16] and [24].