needed stranger policy with the Prop Share resource allocation pol-
icy is a practical and lightweight alternative for designing robust
protocols.
Trade-off between Performance and Robustness. Looking at the
very robust protocols, we note that most of them are not among
the high performing protocols. This suggests a trade-off between
performance and robustness.
However, looking at the top right hand corner of Figure 2, we can
see that there are at least some protocols that are robust and also
have high performance (with robustness and performance values
above 0.8). On inspection we ﬁnd that there are 9 such protocols
and all of these protocols follow the Sort Loyal ranking function.
No other dimension (such as resource allocation, stranger policy,
etc.) is uniform across all 9 protocols. Sort Loyal cooperates with
those other peers who cooperate with it for the longest durations.
It could have been assumed that a ranking policy like Sort Loyal
would not fare very high in terms of robustness. This is because
of the danger that a fast peer that employs the Sort Loyal ranking
Figure 5: Complementary CDF plots of Robustness of different
stranger policies.
a low number of partners that performed the best. Thus, it can be
claimed that having low number of partners is a desirable feature
of high performing protocols, given that everyone in the population
runs the same protocol.
Robustness. It is interesting to compare Figure 3 with Figure 4.
While a low number of partners seems to be a good choice for high
performance, the situation is reversed when it comes to robustness.
In Figure 4, we observe that most of the highly robust protocols
have a high number of partners. This can be seen in the top right
hand corner of the ﬁgure. This is intuitive, because protocols that
employ a low number of partners would very likely perform worse
in face of an invading protocol that employs high number of part-
ners. This is because, in case of an invasion, peers employing a
protocol that maintains a high number of partners are less likely to
ﬁnd themselves short of partners as compared to peers who follow
a protocol that maintains a low number of partners. Hence, in the
case that some partners defect, peers with a high number of part-
ners can continue to download at high speeds while peers with a
low number of partners are likely to suffer with poor speeds. To
put it straightforwardly, a peer that maintains 9 partners will suffer
less when one of its partners defects on it, as compared to a peer
that only maintains one partner.
As we are considering the robustness of protocols, it can be seen
from Figure 2 that there are some protocols that are highly robust
with robustness values above 0.99. By analyzing these highly ro-
bust protocols, we discovered their interesting properties. Including
Number of partnersRobustness012345678900.10.20.30.40.50.60.70.80.9100.20.40.60.8100.20.40.60.81x = RobustnessP(X > x)  PeriodicWhen neededDefectEqual SplitProp ShareFreeride00.20.40.60.81Robustness189Table 3: Multiple linear regression analysis applied for the PRA measures of the whole search space. The adjusted R2 values are reported in
the second row. The standard errors for all the variables are less than 0.012. Signiﬁcance level is indicated as ‘OK’ if it was less than 0.001.
Performance
(adj.R2 = 0.68)
t value
estimate
0.661
64.372
−0.008
−2.487
0.109
33.121
0.008
1.046
−0.206 −26.257
−0.066 −10.567
2.151
0.023
0.020
1.831
1.975
0.022
0.031
2.843
−0.009
−0.796
−0.194 −25.260
−0.544 −70.848
sign.
OK
–
OK
–
OK
OK
–
–
–
OK
–
OK
OK
Robustness
(adj.R2 = 0.52)
t value
estimate
0.813
73.286
0.035
10.334
0.115
32.287
3.010
0.026
−0.241 −28.399
−0.045
−6.576
−0.214 −18.186
−0.199 −16.911
−0.230 −19.517
−0.074
−6.262
−0.082
−7.080
−0.093 −11.188
−0.220 −26.562
sign.
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
Aggressiveness
(adj.R2 = 0.61)
t value
estimate
0.801
96.300
0.037
14.591
0.092
34.340
4.012
0.026
−0.190 −29.778
−0.039
−7.716
−0.212 −24.000
−0.155 −17.503
−0.193 −21.796
−0.097 −11.004
−0.090 −10.259
−0.053
−8.511
−0.253 −40.697
sign.
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
variable
(intercept)
log(˜k)
log(˜h)
B2
B3
C2
I2
I3
I4
I5
I6
R2
R3
Figure 7: Robustness values using different ranking functions.
Each circle is a unique protocol. Bigger circles represent better
performance.
Figure 8: Scatter plot of robustness and aggressiveness values of
the protocols. The Pearson’s correlation coefﬁcient is 0.96.
function, could get stuck with very slow peers (who follow another
protocol) that keep cooperating with it. However, it is interesting
to note that the highest robustness achieved by a protocol that sorts
others based on loyalty, is actually a very high 0.97.
Aggressiveness. In Figure 8 we see that Robustness and Aggres-
siveness are linearly correlated with a Pearson’s correlation coef-
ﬁcient of 0.96. This suggests that robust protocols are also very
aggressive and there does not seem to be a major payoff between
robustness and aggressiveness. We can conclude that the results for
Robustness also hold for Aggressiveness.
4.4.1 Regression Analysis
We applied multiple linear regression analysis for the whole pro-
tocol design space, which is reported in Table 3. Values of h and
k (i.e. number of strangers and partners) were treated as numerical
values (in the table ˜h and ˜k are the standardized values of h and k,
respectively), whereas the other variables are categorical, thus were
substituted by dummy variables.
These results serve as a summary of our previous results and also
examine some dimensions which were not covered in the previous
section. From Table 3 we can conclude the following: i) Choos-
ing Freeride as a resource allocation policy (R3) has the biggest
negative impact on Performance and Aggressiveness and it is also
has a big negative impact on Robustness.
ii) Another bad choice
is the Defect stranger policy (B3). This policy has the biggest neg-
ative effect on Robustness. On the other hand, the When needed
policy (B2) increases Robustness and Aggressiveness, but is not
statistically signiﬁcant for Performance.
iii) Increasing the num-
ber of strangers to cooperate with increases all three, Performance,
Robustness, and Aggressiveness values and this variable has the
biggest positive effect on all three measures.
iv) Higher number
of partners results in an increase in Robustness and Aggressive-
ness, but not for Performance. v) We can see that TF2T strategy
(C2) plays a consistent negative role for all three measures. vi) The
choice of the ranking function has a big effect on Robustness and
Aggressiveness. This is in line with Figure 7. However, choice of
ranking function does not have signiﬁcant impact on Performance,
except for the Sort Loyal ranking function (I5), which increases
Performance.
4.4.2 Birds according to Design Space Analysis
We devised a robust variant of BitTorrent in Section 2.3 using
a game-theoretic analysis. Subsequently, we augmented game-
theoretic analysis for protocol design with Design Space Analysis.
We would now like to inspect if the results that we obtained from
our game-theoretic analysis have held. How does Birds fare in the
larger design space, under a more comprehensive and more realistic
analysis?
For the Performance measure, the best Birds variant, i.e., a pro-
tocol that at the very least ranks other by Proximity and employs
FastestSlowestProximityAdaptiveLoyalRandom00.20.40.60.81Robustness00.20.40.60.8100.20.40.60.81RobustnessAggressiveness190(a)
(b)
(c)
Figure 9: Encounters between three selected protocols.
Equal Split reciprocation, does well with a Performance value of
0.83 to rank at 30 among all 3270 protocols. In Robustness, Birds
achieves a highest value of 0.76 and ranks at 714. For Aggressive-
ness, Birds achieves a highest value of 0.74 to rank at 630 among
all protocols.
4.4.3 Discussion
Using DSA we were able to discover protocol variants that do
well by employing interesting and counter-intuitive combinations
of actualized dimensions. Some combinations lead to extremely
high performance, while some lead to very high robustness. We
also discovered a few protocols that are both highly robust and also
have high performance.
The highly robust protocols are the best candidates for usage
in open distributed systems, in which protocol variants may en-
ter; whereas the protocols that achieve very high performance are
perhaps more suited to closed systems, where incentives are not re-
quired. With the regression analysis on the whole design space we
were able to measure the relative impacts of the different dimen-
sions. This also gives new insights into practical protocol designs,
and indicates the actualized dimensions that should be preferred
and those that should be avoided.
Finally, we observed that Birds ranked very well in Performance
and it is within the top quarter in Robustness. Given the fact that
Birds was devised using a highly abstracted game-theoretic analy-
sis, we claim to have: a) shown that a game-theoretic analysis is
a useful tool which can be used to devise protocols through sim-
ple abstractions, that do reasonably well; and b) demonstrated the
utility of DSA, by discovering several protocols that do better than
Birds, in terms of Robustness and Performance.
5. VALIDATION OF DSA RESULTS
We discovered several interesting protocols using Design Space
Analysis. In this section we want to explore how well DSA can be
used to design deployable protocols. In order to prove the feasi-
bility of using DSA to produce robust and high performing proto-
cols that can be deployed, we modiﬁed an instrumented BitTorrent
client provided by [14]. From the discovered protocols we choose
one that uses the Sort Loyal ranking function and the When needed
stranger policy because this variant resulted in both high Perfor-
mance and Robustness according to DSA. We term this protocol as
‘Loyal-When-needed’. Another variant was suggested by our Nash
equilibrium analysis, which is the Birds protocol. Birds uses the
Proximity ranking function. The third protocol type is the standard
BitTorrent, which represents the baseline.
Figure 10: Performance of various protocols.
Experimental setup. In our experiments we pitted one protocol
against another, with varying proportions of the two protocols. We
adopted an experimental setup similar to [16] and [24]. The to-