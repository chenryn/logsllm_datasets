```
user@docker1:~$ docker run --name web2 --net=none -d \
jonlangemak/web_server_2
985384d0b0cd1a48cb04de1a31b84f402197b2faade87d073e6acdc62cf29151
user@docker1:~$
```
现在，要将这个容器连接到我们现有的 OVS 桥，我们所要做的就是运行以下命令，该命令指定 OVS 桥的名称、容器名称以及我们希望分配给容器的 IP 地址:
```
user@docker1:~/pipework$ sudo ./pipework ovs_bridge \
web2 10.11.12.100/24
Warning: arping not found; interface may not be immediately reachable
user@docker1:~/pipework$
```
管道为我们处理所有的分支工作，包括将容器名称解析为网络名称空间，创建唯一的 VETH 对，将 VETH 对的末端正确地放置在容器中和指定的桥上，以及为容器分配一个 IP 地址。
管道还可以帮助我们在运行中为容器添加额外的接口。考虑到我们以网络模式`none`启动了该容器，基于第一管道配置，该容器目前仅连接到 OVS。但是，我们也可以使用管道工程将连接添加到`docker0`桥上:
```
user@docker1:~/pipework$ sudo ./pipework docker0 -i eth0 web2 \
172.17.0.100/16@172.17.0.1
```
语法类似，但是在这种情况下，我们指定了我们想要使用的接口名称(`eth0`)，并且还为`172.17.0.1`的接口添加了一个网关。这将允许容器使用`docker0`桥作为默认网关，进而允许它使用默认的 Docker 伪装规则进行出站访问。我们可以通过几个`docker exec`命令来验证容器中的配置:
```
user@docker1:~/pipework$ docker exec web2 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
9: eth1@if10:  mtu 1500 qdisc noqueue state UP qlen 1000
    link/ether da:40:35:ec:c2:45 brd ff:ff:ff:ff:ff:ff
    inet 10.11.12.100/24 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::d840:35ff:feec:c245/64 scope link
       valid_lft forever preferred_lft forever
11: eth0@if12:  mtu 1500 qdisc noqueue state UP qlen 1000
    link/ether 2a:d0:32:ef:e1:07 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.100/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::28d0:32ff:feef:e107/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~/pipework$ docker exec web2 ip route
default via 172.17.0.1 dev eth0
10.11.12.0/24 dev eth1  proto kernel  scope link  src 10.11.12.100
172.17.0.0/16 dev eth0  proto kernel  scope link  src 172.17.0.100
user@docker1:~/pipework$ 
```
因此，虽然管道工程可以使许多手动工作变得更容易，但您应该始终查看 Docker 是否有本地方法来提供您正在寻找的网络连接。让 Docker 管理您的容器网络连接有很多好处，包括自动 IPAM 分配和对容器的入站和出站连接的网络过滤器配置。这些非本地配置中的许多已经有第三方 Docker 网络插件在工作，这将允许您从 Docker 无缝利用它们。
# 使用 OVS 桥连接 Docker 主机
之前的配方显示了我们如何使用 OVS 来代替标准的 Linux 桥。这本身并不是很有趣，因为它并不比标准的 Linux 桥做得更多。有趣的是，将 OVS 的一些更高级的特性与您的 Docker 容器结合使用。例如，一旦创建了 OVS 桥，在两个不同的 Docker 主机之间配置 GRE 隧道就变得相当简单了。这将允许连接到任一 Docker 主机的任何容器直接相互对话。在本食谱中，我们将讨论使用 OVS 提供的 GRE 隧道连接两台 Docker 主机所需的配置。
### 注
同样，这个食谱只是为了举例。Docker 的用户定义覆盖网络类型已经支持这种行为。如果出于某种原因你需要使用 GRE 而不是 VXLAN，这可能是一个合适的选择。一如既往，在开始定制自己的网络结构之前，请确保使用任何 Docker 本机网络结构。它会为你省下一段时间的头痛！
## 做好准备
在这个配方中，我们将在两台 Docker 主机上演示配置。主机需要能够通过网络相互通信。假设主机安装了 Docker，并且 Docker 处于默认配置。为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2 
```
为了对主机进行网络更改，您还需要根级访问。
## 怎么做…
出于本食谱的目的，我们将从假设本示例中使用的两台主机上的基本配置开始。也就是说，每台主机只安装了 Docker，其配置与默认配置没有变化。
我们将使用的拓扑如下图所示。位于两个不同子网的两台 Docker 主机:
![How to do it…](img/B05453_04_05.jpg)
该配置的目标是在每台主机上配置 OVS，将容器连接到 OVS，然后将两台 OVS 交换机连接在一起，以允许 OVS 到 OVS 通过 GRE 直接通信。我们将在每台主机上按照以下步骤来完成:
1.  安装的
2.  增加一座名为`ovs_bridge`的 OVS 大桥。
3.  为网桥分配一个 IP 地址。
4.  运行网络模式设置为`none`的容器。
5.  使用管道将容器连接到 OVS 桥(假设您在每个主机上都安装了管道。如果没有，请参考之前的安装步骤)。
6.  使用 OVS 构建到另一台主机的 GRE 隧道。
让我们开始在第一台主机`docker1`上的配置:
```
user@docker1:~$ sudo apt-get install openvswitch-switch
…… 
Setting up openvswitch-switch (2.0.2-0ubuntu0.14.04.3) ...
openvswitch-switch start/running
user@docker1:~$
user@docker1:~$ sudo ovs-vsctl add-br ovs_bridge
user@docker1:~$ sudo ip addr add dev ovs_bridge 10.11.12.1/24
user@docker1:~$ sudo ip link set dev ovs_bridge up
user@docker1:~$
user@docker1:~$ docker run --name web1 --net=none -dP \
jonlangemak/web_server_1
5e6b335b12638a7efecae650bc8e001233842bb97ab07b32a9e45d99bdffe468
user@docker1:~$
user@docker1:~$ cd pipework
user@docker1:~/pipework$ sudo ./pipework ovs_bridge \
web1 10.11.12.100/24
Warning: arping not found; interface may not be immediately reachable
user@docker1:~/pipework$
```
此时，您应该有一个已经启动并运行的容器。您应该能够从本地 Docker 主机到达容器:
```
user@docker1:~$ curl http://10.11.12.100
    Web Server #1 - Running on port 80
user@docker1:~$
```
现在，让我们在第二台主机`docker3`上执行类似的配置:
```
user@docker3:~$ sudo apt-get install openvswitch-switch
…… 
Setting up openvswitch-switch (2.0.2-0ubuntu0.14.04.3) ...
openvswitch-switch start/running
user@docker3:~$
user@docker3:~$ sudo ovs-vsctl add-br ovs_bridge
user@docker3:~$ sudo ip addr add dev ovs_bridge 10.11.12.2/24
user@docker3:~$ sudo ip link set dev ovs_bridge up
user@docker3:~$
user@docker3:~$ docker run --name web2 --net=none -dP \
jonlangemak/web_server_2
155aff2847e27c534203b1ae01894b0b159d09573baf9844cc6f5c5820803278
user@docker3:~$
user@docker3:~$ cd pipework
user@docker3:~/pipework$ sudo ./pipework ovs_bridge web2 10.11.12.200/24
Warning: arping not found; interface may not be immediately reachable
user@docker3:~/pipework$
```
这就完成了第二台主机的配置。确保您能够连接到本地主机上运行的`web2`容器:
```
user@docker3:~$ curl http://10.11.12.200
    Web Server #2 - Running on port 80
user@docker3:~$
```
此时，我们的拓扑如下所示:
![How to do it…](img/B05453_04_06.jpg)
如果我们的目标是允许容器`web1`直接与容器`web2`对话，我们将有两个选择。首先，由于 Docker 不知道 OVS 交换机，因此它不会尝试基于与其连接的容器应用网络过滤规则。也就是说，通过正确的路由配置，这两个容器可以本地相互路由。然而，即使在这个微不足道的例子中，这也是一个很大的配置。由于我们在两台主机之间共享一个公共子网(Docker 在默认模式下也是如此)，因此配置变得不那么简单。要做到这一点，您需要做以下事情:
*   在每个容器中添加路由，告诉他们另一个容器的特定`/32`路由位于子网外。这是因为每个容器都认为整个`10.11.12.0/24`网络是本地的，因为它们在该网络上都有一个接口。你需要一个比`/24`更具体(更小)的前缀来强制容器到达目的地。
*   在每个 Docker 主机上添加路由，告诉他们其他容器的特定`/32`路由位于子网外。同样，这是因为每台主机都认为整个`10.11.12.0/24`网络是本地的，因为它们在该网络上都有一个接口。您需要一个比`/24`更具体(更小)的前缀来强制主机路由到达目的地。
*   在多层交换机上添加路由，这样就知道`10.11.12.100`可以通过`10.10.10.101` ( `docker1`)到达，`10.11.12.200`可以通过`192.168.50.101` ( `docker3`)到达。
现在想象一下，如果您使用的是真实的网络，并且必须在路径中的每台设备上添加这些路由。第二个也是更好的选择是在两座 OVS 大桥之间修建一条隧道。这将阻止网络看到`10.11.12.0/24`流量，这意味着它不需要知道如何路由它:
![How to do it…](img/B05453_04_07.jpg)
幸运的是对于我们来说，这个配置在 OVS 很容易做到。我们只需添加另一个 GRE 类型的 OVS 端口，指定另一个 Docker 主机作为远程隧道目的地。
在主机`docker1`上，按照以下步骤构建 GRE 隧道:
```
user@docker1:~$ sudo ovs-vsctl add-port ovs_bridge ovs_gre \
-- set interface ovs_gre type=gre options:remote_ip=192.168.50.101
```
在主机`docker3`上，按照以下步骤构建 GRE 隧道:
```
user@docker3:~$ sudo ovs-vsctl add-port ovs_bridge ovs_gre \
-- set interface ovs_gre type=gre options:remote_ip=10.10.10.101
```
此时，两个容器应该能够直接相互通信:
```
user@docker1:~$ docker exec -it web1 curl http://10.11.12.200
    Web Server #2 - Running on port 80
user@docker1:~$
user@docker3:~$ docker exec -it web2 curl http://10.11.12.100
    Web Server #1 - Running on port 80
user@docker3:~$
```
作为穿越 GRE 隧道的最后证明，我们可以在主机的一个物理接口上运行`tcpdump`，同时在容器之间执行 ping 测试:
![How to do it…](img/B05453_04_08.jpg)