user@net1:~$ sudo ip link set edge_veth2 up
```
最后，我们阅读到达`net3`虚拟界面的路线:
```
user@net1:~$ sudo ip route add 172.16.10.192/26 via 172.16.10.66
```
配置完成后，我们应该再次完全进入环境和所有接口。如果您的配置有任何问题，您应该能够通过使用`ip link show`和`ip addr show`命令进行诊断。
如果您曾经质疑 VETH 对的另一端是什么，您可以使用`ethtool`命令行工具返回该对的另一端。例如，假设我们创建了一个未命名的 VETH 对，如下所示:
```
user@docker1:/$ sudo ip link add type veth
user@docker1:/$ ip link show
…,,,
16: veth1@veth2:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 12:3f:7b:8d:33:90 brd ff:ff:ff:ff:ff:ff
17: veth2@veth1:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 9e:9f:34:bc:49:73 brd ff:ff:ff:ff:ff:ff
```
虽然在这个例子中很明显，但是我们可以使用`ethtool`来确定这个 VETH 对的一侧或另一侧的接口索引或 ID:
```
user@docker1:/$ ethtool -S veth1
NIC statistics:
     peer_ifindex: 17
user@docker1:/$ ethtool -S veth2
NIC statistics:
     peer_ifindex: 16
user@docker1:/$
```
当确定 VETH 对的末端不像这些例子中那么明显时，这可能是一个方便的故障排除工具。
# 探索网络命名空间
网络名称空间允许您创建网络的独立视图。命名空间有一个唯一的路由表，该路由表可能与主机上的默认路由表完全不同。此外，您可以将接口从物理主机映射到命名空间中，以便在命名空间中使用。网络名称空间的行为非常类似于**虚拟路由和转发** ( **VRF** )实例的行为，后者在大多数现代网络硬件中都可用。在这个食谱中，我们将学习网络名称空间的基础知识。我们将介绍创建命名空间的过程，并讨论如何在网络命名空间中使用不同类型的接口。最后，我们将展示如何将多个名称空间连接在一起。
## 做好准备
为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2
```
为了对主机进行网络更改，您还需要根级访问。该配方将延续前一配方的实验室拓扑。前面提到的所有先决条件仍然适用。
## 怎么做…
网络名称空间的概念通过一个例子得到了最好的演示，因此让我们直接回到前面的实验拓扑:
![How to do it…](img/B05453_01_08.jpg)
该图与我们在上一个配方中使用的拓扑相同，但有一个显著的区别。我们增加了两个名称空间， **NS_1** 和 **NS_2** 。每个命名空间包含主机上的某些接口:
*   NS_1:
    *   `edge_bridge1`
    *   `eth1`
    *   `edge_veth1`
*   NS_2:
    *   `edge_bridge2`
    *   `eth2`
    *   `edge_veth2`
注意命名空间的边界在哪里。在任一种情况下，边界都落在物理接口上(主机的`net1`和`eth2`)或直接位于 VETH 对的中间。正如我们将很快看到的，VETH 对可以在名称空间之间桥接，使它们成为将网络名称空间连接在一起的理想工具。
为了开始重新配置，让我们从定义名称空间开始，然后向名称空间添加接口。定义名称空间相当简单。我们使用`ip netns add`子命令:
```
user@net1:~$ sudo ip netns add ns_1
user@net1:~$ sudo ip netns add ns_2
```
然后可以使用`ip netns list`命令查看名称空间:
```
user@net1:~$ ip netns list
ns_2
ns_1
user@net1:~$
```
一旦创建了名称空间，我们就可以分配我们确定为每个名称空间的一部分的特定接口。在大多数情况下，这意味着告诉现有接口它属于哪个命名空间。但是，并非所有接口都可以移动到网络命名空间中。实例的桥可以存在于网络名称空间中，但需要从名称空间中实例化。为此，我们可以使用`ip netns exec`子命令从命名空间中运行命令。例如，为了在每个名称空间中创建边缘桥，我们将运行以下两个命令:
```
user@net1:~$ sudo ip netns exec ns_1 ip link add \
edge_bridge1 type bridge
user@net1:~$ sudo ip netns exec ns_2 ip link add \
edge_bridge2 type bridge
```
让我们将该命令分成两部分:
*   `sudo ip nent exec ns_1`:这告诉主机您想要在特定的名称空间内运行命令，在本例中为`ns_1`
*   `ip link add edge_bridge1 type bridge`:正如我们在前面的菜谱中看到的，我们执行命令来构建一个桥并给它命名，在本例中为`edge_bridge1`。
使用同样的语法，我们现在可以检查特定命名空间的网络配置。例如，我们可以查看带有`sudo ip netns exec ns_1 ip link show`的界面:
```
user@net1:~$ sudo ip netns exec ns_1 ip link show
1: lo:  mtu 65536 qdisc noop state DOWN mode DEFAULT group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: edge_bridge1:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default
    link/ether 26:43:4e:a6:30:91 brd ff:ff:ff:ff:ff:ff
user@net1:~$
```
正如我们所料，我们看到了在命名空间中实例化的桥。图表在命名空间中显示的另外两种接口类型是可以动态分配到命名空间中的类型。为此，我们使用`ip link set`命令:
```
user@net1:~$ sudo ip link set dev eth1 netns ns_1
user@net1:~$ sudo ip link set dev edge_veth1 netns ns_1
user@net1:~$ sudo ip link set dev eth2 netns ns_2
user@net1:~$ sudo ip link set dev edge_veth2 netns ns_2
```
现在，如果我们查看可用的主机接口，我们应该注意到我们移动的接口不再存在于默认名称空间中:
```
user@net1:~$ ip link show
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0:  mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:0c:29:2d:dd:79 brd ff:ff:ff:ff:ff:ff
5: host_bridge1:  mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default
    link/ether 56:cc:26:4c:76:f6 brd ff:ff:ff:ff:ff:ff
7: edge_bridge1:  mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default
    link/ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff
8: edge_bridge2:  mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default
    link/ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff
10: host_veth1@if9:  mtu 1500 qdisc pfifo_fast master host_bridge1 state LOWERLAYERDOWN mode DEFAULT group default qlen 1000
    link/ether 56:cc:26:4c:76:f6 brd ff:ff:ff:ff:ff:ff
12: host_veth2@if11:  mtu 1500 qdisc pfifo_fast state LOWERLAYERDOWN mode DEFAULT group default qlen 1000
    link/ether 2a:8b:54:81:36:31 brd ff:ff:ff:ff:ff:ff
user@net1:~$
```
### 注
您可能注意到`edge_bridge1`和`edge_bridge2`仍然存在于该输出中，因为我们从未删除它们。这很有趣，因为它们现在也存在于名称空间`ns_1`和`ns_2`中。重要的是要指出，由于名称空间是完全隔离的，甚至接口名称也可能重叠。
现在所有的接口都在正确的名称空间中，剩下要做的就是应用标准的桥映射并打开接口。因为我们必须在每个名称空间中重新创建桥接口，所以我们需要将接口重新连接到每个桥。这就像你平常做的一样；我们只需在命名空间中运行命令:
```
user@net1:~$ sudo ip netns exec ns_1 ip link set \
dev edge_veth1 master edge_bridge1
user@net1:~$ sudo ip netns exec ns_1 ip link set \
dev eth1 master edge_bridge1
user@net1:~$ sudo ip netns exec ns_2 ip link set \
dev edge_veth2 master edge_bridge2
user@net1:~$ sudo ip netns exec ns_2 ip link set \
dev eth2 master edge_bridge2
```
一旦我们将所有接口都放在正确的名称空间中并连接到正确的桥上，剩下的就是将它们全部调出:
```
user@net1:~$ sudo ip netns exec ns_1 ip link set edge_bridge1 up
user@net1:~$ sudo ip netns exec ns_1 ip link set edge_veth1 up
user@net1:~$ sudo ip netns exec ns_1 ip link set eth1 up
user@net1:~$ sudo ip netns exec ns_2 ip link set edge_bridge2 up
user@net1:~$ sudo ip netns exec ns_2 ip link set edge_veth2 up
user@net1:~$ sudo ip netns exec ns_2 ip link set eth2 up
```
接口出现后，我们应该可以再次连接到连接到所有三台主机的所有网络。
虽然这个名称空间的例子只是将第 2 层类型构造移动到一个名称空间中，但是它们也支持第 3 层路由，每个名称空间都有唯一的路由表实例。例如，如果我们查看其中一个名称空间的路由表，我们会发现它完全是空的:
```
user@net1:~$ sudo ip netns exec ns_1 ip route
user@net1:~$
```
这是因为我们没有任何在名称空间中定义了 IP 地址的接口。这表明第 2 层和第 3 层结构都被隔离在一个名称空间中。这是网络名称空间和 VRF 实例不同的一个主要方面。VRF 实例只考虑第 3 层配置，而网络名称空间隔离第 2 层和第 3 层结构。当我们讨论 Docker 用于网络容器的过程时，我们将在[第 3 章](03.html "Chapter 3. User-Defined Networks")、*用户定义网络*中看到一个带有网络名称空间的第 3 层隔离的例子。