for the largest event only for the hosts with GNP coordinates.
5.3.3 Sensitivity to the Number of Clusters
The rendezvous point needs to maintain a minimum number
of clusters. To understand what is a good number, we look at the
intra-cluster distance as a function of the number of clusters when
using naive delay-based clustering. Figure 13 plots the cumulative
distribution of the intra-cluster distances for all clusters created in
the simulation, where the minimum number of clusters is varied be-
tween 50 and 500, and the maximum cluster size is maintained at
200. Using more clusters results in smaller intra-cluster distance for
each cluster. The average (the lines towards the left) improves only
slightly, however the maximum improves signiﬁcantly from close
to 600 ms for 50 clusters to about 250 ms for 500 clusters. All re-
maining simulations use a minimum of 100 clusters and a maximum
cluster size of 200 hosts.
5.3.4 Sensitivity to Cluster Size and Resource Main-
tenance
Figure 14 depicts the cumulative distribution of intra-cluster
distances for naive delay-based clustering (which we also refer to
as GNP clustering), and the two techniques used to bound cluster
sizes: GNP with redirection, and GNP with new cluster creation.
s
r
e
t
s
u
C
l
f
o
n
o
i
t
i
u
b
i
r
t
s
D
e
v
i
t
l
a
u
m
u
C
100
90
80
70
60
50
40
30
20
10
0
n
o
i
t
i
u
b
i
r
t
s
D
e
v
i
t
GNP  Average
GNP  Maximum
GNP Resource Average
GNP Resource Maximum
0
50
100
150
200
250
300
350
400
450
500
Intra-Cluster Distance (ms)
l
a
u
m
u
C
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
100
80
60
40
20
0
0
GNP Clustering
Geo Clustering
No Clustering
1
2
3
4
5
6
7
Average Relative Delay Penalty (RDP)
Figure 16: Overlay efﬁciency.
Random Random
Minimum Depth Random
Longest-First Random
Random Geographic
Minimum Depth Geographic
Longest-First Geographic
5
10
15
20
25
30
35
40
45
50
Stream
Figure 17: Stability performance with clustering.
For the evaluation, we place the source at a location that coincides
with a randomly chosen host participating in the broadcast. Again,
we use the same conﬁguration as in the last section with a minimum
of 100 clusters and a maximum cluster size of 200 hosts.
5.4.1 Efﬁciency of Large-Scale Overlays
First, we present efﬁciency results for the largest event in our
trace, using only the hosts for which we had GNP coordinates. Fig-
ure 16 depicts the cumulative distribution of the average RDP for
each incarnation for GNP and random clustering (while maintaining
the Resource Index). We use minimum depth as the parent selection
algorithm for tree construction. GNP clustering produces more ef-
ﬁcient trees, as the RDP is less than 2 for 65% of the hosts–the
penalty for using the overlay is only twice that of the direct unicast
path from the source. Our RDP values for large-scale groups are
similar to previously reported values for much smaller-scale Inter-
net testbed studies (13 hosts) using synthetic workloads [8].
In comparison to GNP clustering, only 35% and 25% of the
incarnations have an RDP of less than 2 for geographic and ran-
dom clustering. Geographic clustering does not perform as well as
delay-based clustering because geographic distance may not always
correlate with network distance.
5.4.2 Impact of Clustering on Stability
Next, we ask whether or not efﬁcient overlay structures are sta-
ble. Clustering may affect tree stability if hosts within different
clusters have drastically different stability properties. We evaluate
the stability of the same set of streams from Section 4, using random
and geographic clustering with redirection to maintain the cluster
size and resource availability. We did not evaluate delay-based clus-
tering because we did not have GNP coordinates for these streams.
y
t
i
l
i
b
a
S
t
r
o
o
P
h
t
i
w
s
n
o
i
t
a
n
r
a
c
n
I
f
o
e
g
a
t
n
e
c
r
e
P
Figure 15: Clustering quality when bounding Resource Index.
For 90% of the clusters the average cluster distance is within 100 ms
and the maximum reaches 300 ms. This ﬁgure shows that bounding
the cluster size does not signiﬁcantly affect the intra-cluster dis-
tances. Redirecting hosts from large clusters does not affect clus-
tering quality because if the cluster is large, that indicates that there
are other clusters nearby (created from previous redirections). Sim-
ilarly, using a new contributor to create a new cluster also works
well because more hosts that are nearby will subsequently join the
new cluster.
Figure 15 depicts the cumulative distribution of intra-cluster
distances for naive GNP and GNP with Resource Index mainte-
nance. Again, average and maximum intra-cluster distances are not
signiﬁcantly affected.
5.3.5 Sensitivity to Cluster Head Choice
We compared the intra-cluster distances from our results above
to distances resulting from clustering using the k-means algorithm [3].
The key difference is that k-means will choose an optimal cluster
center based on neighboring coordinates while our proposed mech-
anism chooses cluster heads randomly. Note that the results for
k-means clustering assume that all hosts are present in the system
at the same time. Although a direct comparison between the two is
not possible, it it is still useful to know whether or not the quality
of the clusterings are similar. Using k-means, 90% of the clusters
had an average intra-cluster distance less than 150 ms, indicating
that the clustering algorithms that we use have similar quality to the
more theoretically motivated clustering using k-means. Choosing
optimal cluster heads is not a critical problem.
To summarize, clustering quality is not sensitive to the opti-
mizations to maintain cluster sizes and available resources inside a
cluster. In addition, choosing the optimal cluster head is not critical
to the clustering quality.
5.4 Overlay Efﬁciency and Performance
In this section, we evaluate the efﬁciency of the overlay struc-
ture when using the join protocol, enhanced with clustering as de-
scribed in the previous sections. To measure efﬁciency, we use the
relative delay penalty (RDP) [8]. RDP is deﬁned as the ratio of the
delay between the source to the host along the overlay to the direct
unicast distance between the source and the host. If the RDP is close
to 1, then the overlay is very efﬁcient and closely reﬂects the under-
lying unicast paths. The larger the RDP is, the more inefﬁcient the
overlay structure. Note that the location of the source is not pro-
vided in the logs. Typically, a content provider is generating live
streams on one of their own servers and forwarding the streams into
the Akamai network. However, the logs collected at Akamai’s edge
nodes do not reﬂect where the content provider’s server is located.
Figure 17 plots the percentage of incarnations with poor stabil-
ity performance for each stream using three of the parent selection
algorithms previously presented in Section 4. Compared to the per-
formance without any clustering, as presented in Figure 11, the sta-
bility performance remains roughly the same. To verify this result,
we analyzed the session duration distribution for all clusters of a
stream and found that the session duration distributions were simi-
lar across all clusters. Thus, clustering does not impact the stability
properties of the overlay.
Our results strongly suggest that it is feasible to construct ef-
ﬁcient and scalable overlays by leveraging delay-based clustering.
In addition, the overlays constructed using various clustering poli-
cies have similar stability performance to the overlays constructed
without clustering in Section 4.
6. SUMMARY
In this paper, we study one of the most prominent architectural
issues in overlay multicast–the feasibility of supporting large-scale
groups using an application end-point architecture. Using a large set
of live streaming media traces from a commercial content delivery
network, we demonstrate that in most of the common scenarios,
application end-point architectures (i) have enough resources, (ii)
have inherent stability, and (iii) can efﬁciently support large-scale
groups. Our ﬁndings show promise for using such architectures for
real-world applications.
In addition, we explore and evaluate a range of designs that can
help increase the feasibility in practice. We ﬁnd that minimizing
depth in single-tree protocols provides good stability performance.
In addition, the use of multiple-tree protocols can signiﬁcantly im-
prove the perceived quality of streams at the expense of an increase
in protocol activity, overhead, and complexity. We also ﬁnd that
simple clustering techniques improve the efﬁciency of the overlay
structure. The strength of our work is perhaps the insight and anal-
ysis methodology, more than the designs as such – most of the de-
signs we study are simple.
While our results are encouraging, there are several open issues
that are candidates for future work. First, designing policies and
mechanisms to encourage application end-points to contribute their
resources is an important direction. Second, our results are depen-
dent on application workloads. While we believe that the workloads
used in this study represents common behavior for live streaming
applications, studying how the ﬁndings would change under differ-
ent or arbitrary application workloads may expose new insight to
help us better understand the feasibility of the architecture. Third,
there are several unexplored design issues that could also improve
performance of application end-point architectures, such as the use
of application-level buffers to reduce the impact of ancestor changes
in the tree, the (minimum) use of infrastructure to complement the
resources and stability in application end-point architectures, and
the design of new parent selection algorithms to bridge the gap
between minimum depth and oracle. Finally, real large-scale de-
ployment of application end-point architectures will validate and
strengthen our ﬁndings.
Acknowledgements
We wish to thank Roberto De Prisco of Akamai Technologies, for
assistance with collecting log data from the Akamai streaming servers.
We also thank the anonymous reviewers for their valuable feedback.
7. REFERENCES
[1] Akamai. http://www.akamai.com/.
[2] S. Banerjee, B. Bhattacharjee, and C. Kommareddy. Scalable
Application Layer Multicast. In Proceedings of ACM SIGCOMM,
August 2002.
[3] C. M. Bishop. Neural Networks for Pattern Recognition. Clarendon
Press, Oxford, 1995.
[4] M. Castro, P. Druschel, A. Kermarrec, A. Nandi, A. Rowstron, and
A. Singh. SplitStream: High-bandwidth Content Distribution in
Cooperative Environments. In Proceedings of SOSP, 2003.
[5] M. Castro, P. Druschel, A. Kermarrec, and A. Rowstron. Scribe: A
Large-Scale and Decentralized Application-Level Multicast
Infrastructure. In IEEE Journal on Selected Areas in Communications
Vol. 20 No. 8, Oct 2002.
[6] Y. Chu, J. Chuang, and H. Zhang. A Case for Taxation in Peer-to-Peer
Streaming Broadcast. In ACM SIGCOMM Workshop on Practice and
Theory of Incentives and Game Theory in Networked Systems (PINS),
2004.
[7] Y. Chu, A. Ganjam, T. S. E. Ng, S. G. Rao, K. Sripanidkulchai,
J. Zhan, and H. Zhang. Early Experience with an Internet Broadcast
System Based on Overlay Multicast. In Proceedings of USENIX,
2004.
[8] Y. Chu, S. G. Rao, and H. Zhang. A Case for End System Multicast.
In Proceedings of ACM Sigmetrics, June 2000.
[9] P. Francis. Yoid: Your Own Internet Distribution,
http://www.aciri.org/yoid/. April 2000.
[10] A. Ganjam and H. Zhang. Connectivity Restrictions in Overlay
Multicast. In Proceedings of NOSSDAV, 2004.
[11] V. K. Goyal. Multiple Description Coding: Compression Meets the
Network. IEEE Signal Processing Magazine, Vol. 18, pages 74–93,
2001.
[12] J. Jannotti, D. Gifford, K. L. Johnson, M. F. Kaashoek, and
J. W. O’Toole Jr. Overcast: Reliable Multicasting with an Overlay
Network. In Proceedings of the Fourth Symposium on Operating
System Design and Implementation (OSDI), October 2000.
[13] D. Kostic, A. Rodriguez, J. Albrecht, and A. Vahdat. Bullet: High
Bandwidth Data Dissemination Using an Overlay Mesh. In
Proceedings of SOSP, 2003.
[14] J. Liebeherr and M. Nahas. Application-layer Multicast with
Delaunay Triangulations. In Proceedings of IEEE Globecom,
November 2001.
[15] S. McCanne, V. Jacobson, and M. Vetterli. Receiver-driven layered
multicast. In Proceedings of ACM SIGCOMM, August 1996.
[16] T. S. E. Ng and H. Zhang. Predicting Internet Network Distance with
Coordinates-Based Approaches. In Proceedings of INFOCOM, June
2002.
[17] T.S.E. Ng, Y. Chu, S.G. Rao, K. Sripanidkulchai, and H. Zhang.
Measurement-Based Optimization Techniques for
Bandwidth-Demanding Peer-to-Peer Systems. In Proceedings of
IEEE Infocom, 2003.
[18] V. N. Padmanabhan, H. J. Wang, P. A. Chou, and K. Sripanidkulchai.
Distributing Streaming Media Content Using Cooperative
Networking. In Proceedings of NOSSDAV, May 2002.
[19] Planetlab. http://www.planet-lab.org/.
[20] S. Ratnasamy, M. Handley, R. Karp, and S. Shenker.
Application-level Multicast using Content-Addressable Networks. In
Proceedings of NGC, 2001.
[21] Real broadcast network. http://www.real.com/.
[22] R. Renesse, Y. Minsky, and M. Hayden. A Gossip-Style Failure
Detection Service. Technical Report TR98-1687, Cornell University
Computer Science, 1998.
[23] J. Rosenberg, J. Weinberger, C. Huitema, and R. Mahy. STUN -
Simple Traversal of UDP Through Network Address Translators.
IETF-Draft, December 2002.
[24] W. Wang, D. Helder, S. Jamin, and L. Zhang. Overlay Optimizations
for End-host Multicast. In Proceedings of Fourth International
Workshop on Networked Group Communication (NGC), October
2002.
[25] S. Q. Zhuang, B. Y. Zhao, J. D. Kubiatowicz, and A. D. Joseph.
Bayeux: An Architecture for Scalable and Fault-Tolerant Wide-Area
Data Dissemination. In Proceedings of NOSSDAV, April 2001.