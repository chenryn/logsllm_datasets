的镜像。
使用方法
默认会启动一个最小化的 CentOS 环境。
$ docker run --name some-centos -i -t centos bash
bash-4.2#
Dockerfile
CentOS 5 版本
FROM scratch
MAINTAINER The CentOS Project 
ADD c5-docker.tar.xz /
LABEL name="CentOS Base Image" \
vendor="CentOS" \
license="GPLv2" \
build-date="2016-03-31"
# Default command
CMD ["/bin/bash"]
CentOS 6 版本
350
CentOS
FROM scratch
MAINTAINER https://github.com/CentOS/sig-cloud-instance-images
ADD centos-6-docker.tar.xz /
LABEL name="CentOS Base Image" \
vendor="CentOS" \
license="GPLv2" \
build-date="20160729"
CMD ["/bin/bash"]
CentOS 7 版本
FROM scratch
MAINTAINER https://github.com/CentOS/sig-cloud-instance-images
ADD centos-7-docker.tar.xz /
LABEL name="CentOS Base Image" \
vendor="CentOS" \
license="GPLv2" \
build-date="20160729"
CMD ["/bin/bash"]
351
MySQL
MySQL
基本信息
MySQL 是开源的关系数据库实现。
该仓库位于 https://hub.docker.com/_/mysql/ ，提供了 MySQL 各个版本的镜像，
包括 5.6 系列、5.7 系列等。
使用方法
默认会在 3306 端口启动数据库。
$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpa
ssword -d mysql
之后就可以使用其它应用来连接到该容器。
$ docker run --name some-app --link some-mysql:mysql -d applicat
ion-that-uses-mysql
或者通过 mysql 。
$ docker run -it --link some-mysql:mysql --rm mysql sh -c 'exec
mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT
" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'
Dockerfile
5.6 版本
FROM debian:wheezy
# add our user and group first to make sure their IDs get assign
352
MySQL
ed consistently, regardless of whatever dependencies get added
RUN groupadd -r mysql && useradd -r -g mysql mysql
# FATAL ERROR: please install the following Perl modules before
executing /usr/local/mysql/scripts/mysql_install_db:
# File::Basename
# File::Copy
# Sys::Hostname
# Data::Dumper
RUN apt-get update && apt-get install -y perl --no-install-recom
mends && rm -rf /var/lib/apt/lists/*
# mysqld: error while loading shared libraries: libaio.so.1: can
not open shared object file: No such file or directory
RUN apt-get update && apt-get install -y libaio1 && rm -rf /var/
lib/apt/lists/*
# gpg: key 5072E1F5: public key "MySQL Release Engineering " imported
RUN gpg --keyserver pgp.mit.edu --recv-keys A4A9406876FCBD3C4567
70C88C718D3B5072E1F5
ENV MYSQL_MAJOR 5.6
ENV MYSQL_VERSION 5.6.20
# note: we're pulling the *.asc file from mysql.he.net instead o
f dev.mysql.com because the official mirror 404s that file for w
hatever reason - maybe it's at a different path?
RUN apt-get update && apt-get install -y curl --no-install-recom
mends && rm -rf /var/lib/apt/lists/* \
&& curl -SL "http://dev.mysql.com/get/Downloads/MySQL-$MYSQL
_MAJOR/mysql-$MYSQL_VERSION-linux-glibc2.5-x86_64.tar.gz" -o mys
ql.tar.gz \
&& curl -SL "http://mysql.he.net/Downloads/MySQL-$MYSQL_MAJO
R/mysql-$MYSQL_VERSION-linux-glibc2.5-x86_64.tar.gz.asc" -o mysq
l.tar.gz.asc \
&& apt-get purge -y --auto-remove curl \
&& gpg --verify mysql.tar.gz.asc \
&& mkdir /usr/local/mysql \
&& tar -xzf mysql.tar.gz -C /usr/local/mysql --strip-compone
353
MySQL
nts=1 \
&& rm mysql.tar.gz* \
&& rm -rf /usr/local/mysql/mysql-test /usr/local/mysql/sql-b
ench \
&& rm -rf /usr/local/mysql/bin/*-debug /usr/local/mysql/bin/
*_embedded \
&& find /usr/local/mysql -type f -name "*.a" -delete \
&& apt-get update && apt-get install -y binutils && rm -rf /
var/lib/apt/lists/* \
&& { find /usr/local/mysql -type f -executable -exec strip -
-strip-all '{}' + || true; } \
&& apt-get purge -y --auto-remove binutils
ENV PATH $PATH:/usr/local/mysql/bin:/usr/local/mysql/scripts
WORKDIR /usr/local/mysql
VOLUME /var/lib/mysql
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
EXPOSE 3306
CMD ["mysqld", "--datadir=/var/lib/mysql", "--user=mysql"]
5.7 版本
FROM debian:wheezy
# add our user and group first to make sure their IDs get assign
ed consistently, regardless of whatever dependencies get added
RUN groupadd -r mysql && useradd -r -g mysql mysql
# FATAL ERROR: please install the following Perl modules before
executing /usr/local/mysql/scripts/mysql_install_db:
# File::Basename
# File::Copy
# Sys::Hostname
# Data::Dumper
RUN apt-get update && apt-get install -y perl --no-install-recom
mends && rm -rf /var/lib/apt/lists/*
354
MySQL
# mysqld: error while loading shared libraries: libaio.so.1: can
not open shared object file: No such file or directory
RUN apt-get update && apt-get install -y libaio1 && rm -rf /var/
lib/apt/lists/*
# gpg: key 5072E1F5: public key "MySQL Release Engineering " imported
RUN gpg --keyserver pgp.mit.edu --recv-keys A4A9406876FCBD3C4567
70C88C718D3B5072E1F5
ENV MYSQL_MAJOR 5.7
ENV MYSQL_VERSION 5.7.4-m14
# note: we're pulling the *.asc file from mysql.he.net instead o
f dev.mysql.com because the official mirror 404s that file for w
hatever reason - maybe it's at a different path?
RUN apt-get update && apt-get install -y curl --no-install-recom
mends && rm -rf /var/lib/apt/lists/* \
&& curl -SL "http://dev.mysql.com/get/Downloads/MySQL-$MYSQL
_MAJOR/mysql-$MYSQL_VERSION-linux-glibc2.5-x86_64.tar.gz" -o mys
ql.tar.gz \
&& curl -SL "http://mysql.he.net/Downloads/MySQL-$MYSQL_MAJO
R/mysql-$MYSQL_VERSION-linux-glibc2.5-x86_64.tar.gz.asc" -o mysq
l.tar.gz.asc \
&& apt-get purge -y --auto-remove curl \
&& gpg --verify mysql.tar.gz.asc \
&& mkdir /usr/local/mysql \
&& tar -xzf mysql.tar.gz -C /usr/local/mysql --strip-compone
nts=1 \
&& rm mysql.tar.gz* \
&& rm -rf /usr/local/mysql/mysql-test /usr/local/mysql/sql-b
ench \
&& rm -rf /usr/local/mysql/bin/*-debug /usr/local/mysql/bin/
*_embedded \
&& find /usr/local/mysql -type f -name "*.a" -delete \
&& apt-get update && apt-get install -y binutils && rm -rf /
var/lib/apt/lists/* \
&& { find /usr/local/mysql -type f -executable -exec strip -
-strip-all '{}' + || true; } \
355
MySQL
&& apt-get purge -y --auto-remove binutils
ENV PATH $PATH:/usr/local/mysql/bin:/usr/local/mysql/scripts
WORKDIR /usr/local/mysql
VOLUME /var/lib/mysql
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
EXPOSE 3306
CMD ["mysqld", "--datadir=/var/lib/mysql", "--user=mysql"]
356
MongoDB
MongoDB
基本信息
MongoDB 是开源的 NoSQL 数据库实现。
该仓库位于 https://hub.docker.com/_/mongo/ ，提供了 MongoDB 2.x ~ 3.x 各个版
本的镜像。
使用方法
默认会在 27017 端口启动数据库。
$ docker run --name some-mongo -d mongo
使用其他应用连接到容器，可以用
$ docker run --name some-app --link some-mongo:mongo -d applicat
ion-that-uses-mongo
或者通过 mongo
$ docker run -it --link some-mongo:mongo --rm mongo sh -c 'exec
mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/tes
t"'
Dockerfile
2.6 版本
FROM debian:wheezy
# add our user and group first to make sure their IDs get assign
ed consistently, regardless of whatever dependencies get added
357
MongoDB
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb
RUN apt-get update \
&& apt-get install -y --no-install-recommends \
ca-certificates wget \
numactl \
&& rm -rf /var/lib/apt/lists/*
# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
&& wget -O /usr/local/bin/gosu "https://github.com/tianon/go
su/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architect
ure)" \
&& wget -O /usr/local/bin/gosu.asc "https://github.com/tiano
n/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-archi
tecture).asc" \
&& export GNUPGHOME="$(mktemp -d)" \
&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B4
2F6819007F00F88E364FD4036A9C25BF357DD4 \
&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/b
in/gosu \
&& rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc \
&& chmod +x /usr/local/bin/gosu \
&& gosu nobody true
ENV MONGO_VERSION 2.6.12
RUN set -x \
&& wget -O mongo.tgz "https://fastdl.mongodb.org/linux/mongo
db-linux-x86_64-$MONGO_VERSION.tgz" \
&& wget -O mongo.tgz.sig "https://fastdl.mongodb.org/linux/m
ongodb-linux-x86_64-$MONGO_VERSION.tgz.sig" \
&& export GNUPGHOME="$(mktemp -d)" \
&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys DF
FA3DCF326E302C4787673A01C4E7FAAAB2461C \
&& gpg --batch --verify mongo.tgz.sig mongo.tgz \
&& rm -r "$GNUPGHOME" mongo.tgz.sig \
&& tar -xvf mongo.tgz -C /usr/local --strip-components=1 \
&& rm mongo.tgz
358
MongoDB
RUN mkdir -p /data/db /data/configdb \
&& chown -R mongodb:mongodb /data/db /data/configdb
VOLUME /data/db /data/configdb
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
EXPOSE 27017
CMD ["mongod"]
3.0 版本
FROM debian:wheezy
# add our user and group first to make sure their IDs get assign
ed consistently, regardless of whatever dependencies get added
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb
RUN apt-get update \
&& apt-get install -y --no-install-recommends \
numactl \
&& rm -rf /var/lib/apt/lists/*
# grab gosu for easy step-down from root
ENV GOSU_VERSION 1.7
RUN set -x \
&& apt-get update && apt-get install -y --no-install-recomme
nds ca-certificates wget && rm -rf /var/lib/apt/lists/* \
&& wget -O /usr/local/bin/gosu "https://github.com/tianon/go
su/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architect
ure)" \
&& wget -O /usr/local/bin/gosu.asc "https://github.com/tiano
n/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-archi
tecture).asc" \
&& export GNUPGHOME="$(mktemp -d)" \
&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B4
2F6819007F00F88E364FD4036A9C25BF357DD4 \
&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/b
359