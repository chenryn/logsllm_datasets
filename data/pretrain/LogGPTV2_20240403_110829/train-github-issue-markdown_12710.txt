It is unclear whether the described behavior is a bug or an intended feature, as the error message is not explicit. Below, I will provide a detailed explanation of the issue observed in version 0.13.1 and the current master branch.

### In Version 0.13.1
Consider the following DataFrame:

```python
import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(9).reshape(3, 3), index=[0.1, 0.2, 0.2], columns=['a', 'b', 'c'])
print(df)
```

Output:
```
                a         b         c
0.1  1.711117  1.218853 -1.322363
0.2  0.956266  0.230374 -1.005935
0.2 -0.137729 -0.993931 -0.902793
```

When attempting to access the value at index `0.2` for column `a` using `df.ix[0.2, 'a']`, the output is an array containing both values associated with the index `0.2`:

```python
print(df.ix[0.2, 'a'])
```

Output:
```
array([ 0.95626607, -0.13772877])
```

However, when trying to access the entire row at index `0.2` using `df.ix[0.2]`, a `ValueError` is raised:

```python
print(df.ix[0.2])
```

Error:
```
ValueError: Length mismatch: Expected axis has 0 elements, new values have 2 elements
```

### In the Current Master Branch
In the current master branch, both `df.loc[0.2]` and `df.loc[0.2, 'a']` raise the same `ValueError`:

```python
print(df.loc[0.2, 'a'])
print(df.loc[0.2])
```

Both commands result in:
```
ValueError: Length mismatch: Expected axis has 0 elements, new values have 2 elements
```

### Comparison with Integer Index
For DataFrames with integer indices, the same operations work as expected without raising any errors.

### Conclusion
The inconsistency in behavior between accessing rows with duplicate floating-point indices and integer indices suggests that this might be a bug. The error message should be more informative to help users understand the issue. If this is intended behavior, the documentation should clearly explain the limitations and expected outcomes when working with non-unique indices.