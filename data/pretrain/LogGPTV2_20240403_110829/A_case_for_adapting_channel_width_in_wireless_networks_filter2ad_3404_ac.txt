1/3
1
1/2
1/2
1/2
1
1/2
X
X
T
4
4
3
4
FI
0.58
0.97
0.82
0.97
Figure 10: A network with four mutually interfering APs. With ﬁxed
channel widths are ﬁxed, each AP is allocated a 20 MHz channel. In the
adaptive scheme, AP1 is allocated 40 MHz, AP2 gets 20 MHz, , AP3
and AP4 get 10 MHz each. The tables shows the throughput received
by each client after normalization by 20 MHz
across the network, such a scheme increases capacity and reduces
interference. However, in dynamic conditions, using ﬁxed-width
channels can be problematic and suboptimal. Recent measure-
ments have shown that there exists spatial and temporal disparity
in client distributions [3, 16, 21] in large-scale WLANs. For exam-
ple, a study of IBM’s WLAN with 177 APs [3] showed that 40%
of the APs never had more than 10 active clients, while a few APs
in auditoriums and cafeterias had 30 simultaneous users; the set of
heavily loaded APs also changes over time.
Adapting channel width of the APs offers a natural way to both
improve ﬂow fairness and balance load across APs. Consider Fig-
ure 4, which has four APs within interference range of one another.
In Case 1 (left), AP1 has 6 clients, AP3 has 3 clients, while the
remaining two APs have one client each. In Case 2 (right), client A
moves away from AP2 and associates to AP4. We compare the per-
formance of using ﬁxed-width channels with adaptive-width chan-
nels. In the ﬁxed-width channel case, the spectrum is divided into
4 channels of 20 MHz each. In the adaptive-width channel case,
channels may be 10, 20, or 40 MHz. The table lists the through-
put per client at each AP. Also included is the total throughput
(T), and Jain’s fairness index (FI). The index is calculated using
c2
i , where ci is the bandwidth obtained by client i,
(
and n is the total number of clients.
ci)2/n
P
P
In Case 1, the ﬁxed-width channelization leads to severe un-
fairness among different clients. A client associated to AP1 re-
ceives 1/6 of bandwidth compared to a client associated to AP2 or
AP4. In contrast, with an allocation of 40 MHz to AP1, 20 MHz
to AP2 and 10 MHz to the remaining APs, per-client fairness im-
proves signiﬁcantly to 0.97 because APs with many clients (AP1)
receive a wider part of the spectrum to serve its clients. Adaptive
channel width can also help to improve system capacity. In Case 2,
for instance, if client A moves from AP2 to AP4, an adaptive ap-
proach can reallocate the 10 MHz spectrum formerly used by AP2
to AP4, thus giving AP4 a total of 20 MHz.
D. Improving network capacity
Many hardware and software improvements to wireless tech-
nologies are driven by the search for additional capacity. We present
evidence that adapting channel width can provide another opportu-
nity towards that goal. This beneﬁt arises by partitioning conver-
sations that share a wide channel into multiple narrower channels,
which has the potential to increase capacity.
In this experiment, we use two sender-receiver pairs, i.e. four
laptops. All four laptops were in communication range of each
other, and we placed the two receivers close-by – two ofﬁces next
(b) Indoor
Figure 9: Effective throughout offered by different channel
widths at different attenuations and ofﬁces.
the “distance” between the nodes. We demonstrate this effect using
emulator and indoor experiments.
Figure 9 (a) shows the effective throughput achieved between a
sender and a receiver at different attenuations using autorate. Up to
an attenuation of 72 dB, the highest throughput is achieved using
the wide 40 MHz channel. In the ranges between 73–75 dB and
76–78 dB, it is best to use the 20 MHz and 10 MHz channels, re-
spectively. Notice that the 3 dB optimality region for each of the
intermediate channel widths (10 MHz and 20 MHz) exactly corre-
sponds to the 3 dB range beneﬁt predicted in Section 3.2.3 Beyond
79 dB, the 5 MHz channel is the best choice. This throughput ad-
vantage of narrower channels stems from both their longer range
and their ability to use modulations that are proportionally higher
than narrower channels, after taking into account the inherent slow-
down on narrow widths.
Figure 9 (b) shows the results from our indoor measurements.
This experiment is limited by the fact that we do not have more
than 9 ofﬁces in a straight line. But even within the extent to which
we could measure, we can clearly see different ofﬁces (distances)
have a different optimal channel width. While 40 MHz performs
best up to the sixth ofﬁce, 20 MHz outperforms all other channel
widths in ofﬁces seven and eight. At ofﬁce nine, 10 MHz is the best
choice.
The crucial point is that there is no single channel width that
serves all needs and hence, there is a strong case for adapting chan-
nel widths based on the current situation. In Section 5, we exploit
these ﬁndings by designing a practical channel width adaptation
algorithm that dynamically ﬁnds the best possible channel width.
C. Improving fairness and balancing load in WLANs
In today’s 802.11g based WLANs, each AP is assigned a ﬁxed
width 20 MHz channel, and if possible, neighboring APs are placed
on orthogonal frequencies. When the trafﬁc is uniformly distributed
3As we mentioned before, because dB is a logarithmic unit, a 3 dB
interval in which each channel width performs best maps to signif-
icant distance in real terms.
the two nodes have already decided which center frequency to use,
for instance, based on their conﬁguration or using some channel
selection algorithm (e.g. [25]).
We consider two possible objectives in this paper, maximizing
throughput from Ns to Nr, and minimizing the energy consump-
tion of Ns. Simple extensions can optimize other measures includ-
ing sum of the throughput or power across the two. We ﬁrst de-
scribe our algorithm with the objective of maximizing throughput,
or equivalently minimizing transmission time for a ﬁxed-size trans-
fer. In Section 5.5, we explain how the algorithm can be adjusted
to minimize energy consumption.
5.2 Approach
One major challenge is the size of the search space. For a ﬁxed
transmission power, the main knob for optimizing transmission has
been rate adaptation, i.e., ﬁnding the modulation that yields the best
possible throughput. With the addition of variable channel width,
the search space becomes two-dimensional. Even today, this repre-
sents 32 different options (8 modulations × 4 widths), and it may
signiﬁcantly grow in the future as more widths become available.
Clearly, probing this entire search space is inefﬁcient and we need
methods that quickly converge to the optimal point.
However, we observe that the two dimensions can be decoupled.
At any given width, to maximize throughput, the nodes must use
the best possible rate. This problem of ﬁnding the best rate has
been addressed by much previous work (e.g. [12, 15, 17]), which
we leverage. SampleWidth uses a state-of-the-art autorate algo-
rithm to ﬁnd an efﬁcient data rate on a speciﬁc width and then
searches across widths. In addition to reducing the dimensional-
ity of the search, this process enables us to search across widths
less frequently and across rates more frequently. This is signiﬁcant
because in current hardware probing different channel widths in-
curs a coordination overhead, while searching across rates can be
done on a per-packet level. To probe, both nodes are required to be
using the same width.
Another source of overhead is the opportunity cost when prob-
ing suboptimal channel-widths. In the extreme case, if two nodes
switch to a wider channel on which they are no longer within each
other’s range, they will disconnect and the subsequent reconnec-
tion may require signiﬁcant time. Thus, sampling all widths is not
practical, especially if more widths are available in the future.
To keep the cost of sampling low, SampleWidth is based on sam-
pling only adjacent (i.e., the next narrower or wider) widths.
It
samples adjacent widths and switches if the sampled throughput is
higher than the current throughput. Further, it probes the adjacent
wider channel only if the probability of disconnection is low, i.e.,
if the average data rate on the current width is high. In Section 5.4,
we show that this simple search strategy approach converges to the
optimal channel width.
5.3 Algorithm
We now describe our algorithm in detail. In SampleWidth, nodes
use the narrowest channel width when there is no data to send. This
minimizes power consumption and increases the range, which is
useful for mobile devices. Adaptation is triggered when there is
data to send. Algorithm 1 provides a detailed description of the
adaptation process.
It proceeds in probing intervals of duration
tS = 1 s. The sender maintains a probing table with one entry for
each available channel width, Bi, containing the average through-
put Ti and average data rate Ri that autorate settled on when us-
ing this width. At the outset, all these entries are blank. During
a probing interval, the sender measures the average throughput bT
and data rate bR on the current channel width Bcur. At the end of
Figure 11: Average combined throughout of two ﬂows when
sharing a 40 MHz channel and when using adjacent 20 MHz
channels.
to each other. We moved the senders to 24 different locations, and
for simplicity present results for corresponding conﬁgurations in
three categories. “Near-Near” is when both senders are within 3
ofﬁces of their receivers. “Medium-near” is when one sender is 4
or 5 ofﬁces away from its receiver, and the other sender is within
3 ofﬁces. “Far-near” is one sender is more than 5 ofﬁces from its
receiver, while the other is within 3 ofﬁces.
Figure 11 shows the average combined throughput of the two
ﬂows when sharing one 40 MHz channel and when they are split
on adjacent 20 MHz channels. We see that the gain is substantial
– from 10% to 50% – in spite of any cross-channel leakage. The
gain is maximum in the Far-near case because sharing the same
channel introduces the rate anomaly problem by which the slower
ﬂow reduces total capacity. Separating the two ﬂows on different
channels lets the faster ﬂow go faster. The other reasons for gain
from splitting stems from reduced contention overhead and from
the fact that narrower channels have a smaller per-packet relative
overhead. We obtained similar results (not shown) when splitting
two 20 MHz ﬂows into adjacent 10 MHz channels.
We note that even though we do not increase total spectrum us-
age by splitting ﬂows, we do increase total transmit power because
narrower channels have higher power (although the same energy).
It is thus an open question if the gain from such division persists in
large-scale systems.
5. THE SampleWidth ALGORITHM
The previous section shows that substantial beneﬁts can be had
by dynamically adapting channel width. But realizing those ben-
eﬁts relies on practical adaptation algorithm. In this section, we
present such an algorithm.
Our algorithm is called SampleWidth and it enables two nodes
to dynamically select a channel width according to their workload
and optimization criterion (e.g., throughput or energy consump-
tion). This scenario forms the base case for channel width adap-
tation. It is of interest by itself in several settings: (i) two personal
mobile devices (e.g., an iPod) sharing media content; (ii) a link in
a multi-hop mesh network where the two nodes have a dedicated
radio to talk to one another; and (iii) in 802.11 infrastructure net-
works where the AP has multiple radios on different widths and
the client dynamically selects the best width. Besides, as we will
show in this section, even this simple case has several intricacies
that must be resolved before addressing the adaptation problem in
more general settings.
5.1 Problem Deﬁnition
Consider two nodes, Ns and Nr. They have at their disposal k
different channel widths B1, . . . , Bk. The goal of the algorithm
is to select a channel width for a given objective. We assume that
Algorithm 1 Channel-Width Adaptation Algorithm
1: Parameters: α = 9 Mbps; β = 18 Mbps; X = 5;
2: Bcur := B1;
3: [] —— During each probing interval I do:
4: Transmit using channel width Bcur;
5: Measure avg. throughput bT and avg. data rate bR;
6: [] —— At the end of interval I do:
7: Update probing table: Tcur = bT ; Rcur = bR;
8: if bR ≤ α and Bcur−1 has not been probed for X intervals
9: then
10:
11: else if bR ≥ β and Bcur+1 has not been probed for X intervals
12: then
13:
14: else
15:
16:
17: end if
Find channel width B(cid:3) for which T(cid:3) = maxi=1,...,|B| Ti;
Switch to (or stay on) band B(cid:3): Bcur = B(cid:3);
Switch to next narrower width: Bcur = Bcur−1;
Switch to next wider width: Bcur = Bcur+1;
the interval, it updates the corresponding entry in the probing table,
and then, based on the most recent measurements and the state of
the probing table, it decides whether to probe and switch to another
channel width for the next probing interval.
is executed if Rule 1 does not apply.
This decision can be described using the two rules below. Rule 2
Rule 1a: If the current data rate bR is below a threshold α, the
Rule 1b: If the current data rate bR is above a threshold β, the
nodes switch to the adjacent narrower channel width. We argue in
Section 5.4 that α = 9 Mbps is optimal for current hardware.
nodes switch to adjacent wider channel. The optimal choice is β =
18 Mbps for current hardware. If the data rate at the current width
is high, the probability of a disconnection when probing the next
wider channel is low.
Rule 2: At the end of a probing interval, the nodes switch to the
channel width B(cid:3) for which the average throughput entry T(cid:3) in the
probing table is the highest.
To avoid oscillation, we slightly adjust Rules 1a and 1b such that
the nodes do not probe a channel width if it was recently probed—
within the last X = 5 probing intervals—and the throughput was
lower than the current throughput.
Note that in SampleWidth, the decision to sample another width
is based on the data rate, while throughput decides which channel
width to use. This distinction is important because we cannot con-
clude from low throughput that moving to a wider channel is not
beneﬁcial. Low throughput can be caused by either poor link qual-