2l+1). At this moment, layer l is empty because: (i) it was empty
immediately after data shufﬂing for some layer l
> l, has
completed; (ii) since then, only 2l queries have been processed, and
during this course no data block has been added to this layer. Dur-
ing data shufﬂing at layer l, all data blocks in layers {1,··· , l− 1}
are re-distributed randomly to layer l, and dummy blocks may be
introduced to make layer l full. Data shufﬂing at layer L2, i.e., the
bottom layer, however, is triggered when the total number of pro-
cessed queries is any multiple of 2L2; it re-distributes all real data
blocks and selected dummy blocks in the entire hierarchy to fully
occupy the bottom layer.
, where l
′
′
4.4.1 Preliminary: A Segment-Shufﬂing Algorithm
Compared to existing ORAM schemes, S-ORAM utilizes the user
cache space more efﬁciently to speed up data shufﬂing. Speciﬁ-
cally, the user cache is divided into four parts:
• π, which is a buffer to store a permutation of up to 2m2 in-
puts and thus needs 2m2 log(2m2) bits, where m is a system
parameter.
• B0, B1, and B2, which are three buffers and each may tem-
porarily store up to 2m2 data pieces.
Recall that the size of a data piece is z bits and the size of user
cache is αZ. Therefore, the following relation shall hold between
m, z, α, and Z:
2m2 · [log(2m2) + 3z] ≤ αZ.
(3)
√
Data shufﬂing in S-ORAM is based on a segment-shufﬂing algo-
rithm (as shown in Algorithm 2). It is able to shufﬂe n (≤ 3 log2 N)
data blocks with a communication cost of O(n) data blocks, by
setting the system parameter m to
1.5 log N, under the follow-
ing practical assumptions: (1) N ≤ 236 which is considered large
enough to accommodate most practical applications [18]; (2) the
size of Z is between 32 KB and 256 KB which is typically as-
sumed in practical ORAM schemes [18]; and (3) α = 2 meaning
that a small local cache of two data blocks is assumed. It is easy to
verify that, under these assumptions, Equation (3) holds. Moreover,
as n ≤ 3 log2 N = 2m2, π is large enough to store a permutation
of the IDs of n data blocks, and B0, B1, and B2 are large enough
to store n data pieces, which are required in the algorithm.
The segment-shufﬂing algorithm has two phases. Phase I processes
the ﬁrst two data pieces of all n blocks as follows. After the ﬁrst
two pieces of all n blocks are retrieved, IDs of the blocks are ob-
tained and permuted according to a newly picked permutation func-
tion, and then re-encrypted using the key and newly-picked random
numbers. After that, the new random numbers are uploaded after
being encrypted, which is followed by the uploading of the shufﬂed
and re-encrypted block IDs.
In Phase II, the remaining pieces of all n blocks are retrieved, shuf-
ﬂed according to the new permutation function (picked in Phase I),
re-encrypted, and then uploaded back to the server. This phase runs
iteratively and the (v + 1)-st pieces are retrieved and processed
at the v-th (v = 1,··· , P − 2) iteration. Particularly, when the
(v + 1)-st pieces are retrieved, two encrypted versions of the v-th
/* Phase I: shufﬂing ﬁrst two pieces of all blocks */
Algorithm 2 Segment-Shufﬂing of Blocks (Di1 ,··· , Din ).
1: Retrieve (ci1;0,··· , cin;0) to B0
2: Decrypt B0 to (ri1;0,··· , rin;0) using k
3: Retrieve (ci1;1,··· , cin;1) to B1
4: Decrypt B1 to (i1,··· , in) using k and B0
5: Store (i1,··· , in) in B2
6: Pick & store a random permutation in π
1,··· , i
′
7: Permute B2 to (i
8: Generate, re-encrypt & upload entries of a new index block
′
n) according to π
′
i
′
j ;0
′
i
′
j
/* Phase II: shufﬂing remaining pieces of all blocks */
based on B2 and π
′
9: for each i
j in B2 do
Randomly picks r
10:
′
′
j ;0 using k, and upload it
to c
11:
Encrypt r
′
′
i
i
′
′
j
12:
Encrypt i
j ;1 using k and c
j to c
′
i
13: end for
14: Upload B2 to designated locations
15: for each v ∈ {2,··· , P − 1} do
Retrieve (ci1;v,··· , cin;v) to B0
16:
for each j ∈ {1,··· , n} do
17:
18:
19:
20:
21:
22:
23:
24:
25:
26: end for
end for
′
Permute B0 to (di
′
Encrypt (di
Replace B2 by B0
Upload B2 to designated locations
Decrypt cij ;v to dij ;v using k and cij ;v−1 in B1
Replace cij ;v−1 in B1 by cij ;v from B0
Replace cij ;v by dij ;v in B0
1;v,··· , di′
n;v) according to π
n;v) in B0 using k and B2
1;v,··· , di′
pieces are present in the user cache. Using the key and the older
version of the v-th pieces, the plain-text embedded in the (v + 1)-st
pieces are obtained; then, the pieces are permuted, and re-encrypted
using the same key and the newer version of the v-th pieces, before
being uploaded back to the server. At the end of the iteration, two
encrypted versions of the (v +1)-st pieces are left in the user cache,
which will be used in the processing of the (v + 2)-nd pieces in the
next iteration.
Shufﬂing a T1-layer l (2 ≤ l ≤ L1)
4.4.2
When a T1-layer l is to be shufﬂed, all the blocks belonging to
the layers above shall be shufﬂed and distributed to layer l, which
has 4 + 22+1 + ··· + 2l = 2l+1 − 4 blocks in total. The user ﬁrst
generates 4 extra dummy blocks to make the total number of blocks
to be shufﬂed be 2l+1. Then, the segment-shufﬂing algorithm is
invoked to shufﬂe these blocks to layer l.
Shufﬂing a T2-layer l (L1  24 · n log n over-
head), which signiﬁcantly impede their practical efﬁciency. Hence,
a more practically efﬁcient sorting method is needed.
In S-ORAM, we develop an m-way oblivious sorting scheme based
on the m-way sorting algorithm in [14]. It sorts data in pieces rather
than blocks, which exploits the user cache space more efﬁciently
and thus achieves a better performance than the afore-mentioned al-
gorithms, particularly when the block size is relatively large (which
is common in practice [18]). Modiﬁcations have also been made to
the original m-way sorting algorithm to ensure the obliviousness
of data sorting. Details of the proposed m-way oblivious sorting
scheme are omitted due to space limitation. Please refer to the Ap-
pendix for a complete description.
5. ANALYSIS
5.1 Security Analysis
To prove the security of S-ORAM, we describe three lemmas be-
fore presenting the main theorem.
LEMMA 1. When shufﬂing a T2-layer l, the probability that
more than 1.5 log2 N real data blocks are distributed to any given
segment is O(N
− log N ).
PROOF. When shufﬂing a T2-layer l as in Section 4.4.3, up to 2l
⌉ seg-
real data blocks are mapped (by a hash function) to ⌈
ments uniformly at random. In the following proof, we ﬁrst assume
the number of real data blocks is 2l and compute the probability
that there exists a segment with at least 1.5 log2 N real blocks.
Let us consider a particular segment, and deﬁne X1,··· , X2l as
random variables such that
log2 N
2l
Xi =
1 the ithreal block mapped to the segment,
0 otherwise.
(4)
Note that, X1,··· , X2l are independent of each other, and hence
∑
for each Xi, Pr[Xi = 1] =
. Let X =
2l=log2 N = log2 N
2l
1
2l
i=1 Xi. The expectation of X is
{
E[Xi] = 2l · log2 N
Xi
E[X] = E
2l = log2 N.
(5)
According to the multiplicative form of Chernoff bound, for any
j ≥ E[X] = log2 N, it holds that
i=1
i=1
Pr[at least j real data blocks in this particular segment]
 2l∑
 =