DevOps 有很多定义。作者已经采用了这个定义，但是作为读者，我们鼓励您在围绕 DevOps 的文献中探索不同的定义。
DevOps 文化始于规划。在 DevOps 项目的规划阶段，概述了项目的目标。这些目标在高层次(称为史诗)和低层次(作为特性和任务)都有概述。DevOps 项目中的不同工作项被捕获在特性积压中。通常，DevOps 团队在编程冲刺阶段使用敏捷规划方法。看板通常用于表示项目状态和跟踪工作。当一个任务从*状态变为*状态变为*状态变为*状态变为*状态变为*状态时，它会在看板上从左向右移动。
当工作被计划时，实际的开发可以完成。DevOps 文化中的开发不仅仅是编写代码，还包括测试、评审和与团队成员集成代码。像 Git 这样的版本控制系统用于不同的团队成员之间共享代码。自动化的**持续集成** ( **CI** )工具用于自动化大多数手动任务，如测试和构建代码。
当一个特性代码完成、测试和构建后，就可以交付了。DevOps 项目的下一阶段可以开始交付。一个**连续交付** ( **光盘**)工具用于软件部署的自动化。通常，软件被部署到不同的环境中，例如测试、质量保证和生产。在进入下一个环境之前，使用自动和手动闸门的组合来确保质量。
最后，当一个软件在生产中运行时，操作阶段就可以开始了。这个阶段包括维护、监控和支持生产中的应用。最终目标是以尽可能少的停机时间可靠地运行应用。任何问题都应尽可能提前发现。软件中的错误将在积压中被跟踪。
DevOps 过程是一个迭代过程。单个团队永远不会处于流程的单个阶段。整个团队都在持续规划、开发、交付和运行软件。
存在多种工具来实现 DevOps 实践。有针对单个阶段的单点解决方案，例如用于规划的吉拉或用于 CI 和 CD 的 Jenkins，以及完整的 DevOps 平台，例如 GitLab。微软运营两个解决方案，使客户能够采用 DevOps 实践:Azure DevOps 和 GitHub。Azure DevOps 是一套支持 DevOps 流程所有阶段的服务。GitHub 是一个独立的平台，支持 DevOps 软件开发。GitHub 被称为领先的开源软件开发平台，托管了超过 4000 万个开源项目。
微服务和 DevOps 通常与容器和 Kubernetes 结合使用。既然我们已经介绍了微服务和 DevOps，我们将继续第一章的内容，首先介绍容器的基础，然后介绍 Kubernetes 的基础。
### 容器基础
自 20 世纪 70 年代以来，Linux 内核中就存在一种容器技术。为今天的容器提供动力的技术被称为**控制组**(缩写自**控制组**)，是由谷歌在 2006 年引入 Linux 内核的。Docker 公司在 2013 年通过引入一个简单的开发人员工作流程推广了这项技术。虽然 Docker 这个名字既可以指公司，也可以指技术，但最常见的是，我们用 Docker 来指技术。
#### 注意
尽管 Docker 技术是构建和运行容器的流行方式，但它不是构建和运行容器的唯一方式。对于构建或运行容器，存在许多替代方案。其中一个选择是 containerd，这是一个容器运行时，Kubernetes 也使用它。
Docker 作为一种技术既是打包格式，也是容器运行时。打包是一个允许应用与其依赖项(如二进制文件和运行时)打包在一起的过程。运行时指向运行容器映像的实际过程。
Docker 的体系结构中有三个重要部分:客户端、守护程序和注册表:
*   Docker 客户端是一个客户端工具，您可以使用它与本地或远程运行的 Docker 守护程序进行交互。
*   Docker 守护进程是一个长时间运行的进程，负责构建容器映像和运行容器。Docker 守护程序可以在本地计算机或远程计算机上运行。
*   Docker 注册表是存储 Docker 映像的地方。有像 Docker Hub 这样包含公共映像的公共注册表，也有像**Azure Container Registry**(**ACR**)这样的私有注册表，可以用来存储自己的私有映像。如果映像在本地不可用，Docker 守护程序可以从注册表中提取映像:
![Three important componentsin Docker architecture: the client, the daemon, and the registry](img/B17338_01_02.jpg)
图 1.2:Docker 架构的基础
您可以通过在 Docker Hub([https://hub.docker.com/](https://hub.docker.com/))创建一个免费的 Docker 帐户并使用该登录打开 Docker Labs([https://labs.play-with-docker.com/](https://labs.play-with-docker.com/))来尝试 Docker。这将使您能够访问预安装了 Docker 的环境，该环境的有效期为 4 小时。在构建我们自己的容器和映像时，我们将在本节中使用 Docker Labs。
#### 注意
虽然我们在本章中使用基于浏览器的 Docker 实验室来介绍 Docker，但是您也可以在本地桌面或服务器上安装 Docker。对于工作站，Docker 有一个名为 Docker Desktop([https://www.docker.com/products/docker-desktop](https://azure.microsoft.com/resources/designing-distributed-systems/))的产品，可用于 Windows 和 Mac 在本地创建 Docker 容器。在服务器上，无论是 Windows 还是 Linux，Docker 也可以作为容器的运行时。
### 容器映像
要启动一个新的容器，您需要一个映像。一个映像包含所有需要在容器中运行的软件。容器映像可以本地存储在您的计算机上，也可以存储在容器注册表中。有公共注册管理机构，如公共 Docker Hub([https://hub.docker.com/](https://hub.docker.com/))或私有注册管理机构，如 ACR。作为用户，当您的电脑本地没有映像时，您可以使用 **docker pull** 命令从注册表中提取映像。
在下面的示例中，我们将从公共 Docker Hub 存储库中提取一个映像，并运行实际的容器。您可以按照以下说明在 Docker Labs 中运行此示例，我们在上一节中介绍了该示例:
#首先，我们会拉一张图片
Docker 拉 Docker/whalesay
#然后我们可以查看哪些映像存储在本地
docker 映像
#然后我们将运行我们的容器
Docker 员跑 Docker/whalesay cowsay boo
这些命令的输出类似于*图 1.3* :
![Pulling an image from the public Docker Hub repository and running the actual container](img/B17338_01_03.jpg)
图 1.3:在 Docker 实验室中运行容器的示例
这里发生的事情是，Docker 首先将您的映像分成多个部分，并将其本地存储在运行它的机器上。当您运行实际应用时，它使用该本地映像来启动一个容器。如果我们详细查看这些命令，您会看到 **docker pull** 接受了一个参数， **docker/whalesay** 。如果您不提供私有容器注册表，Docker 将在公共 Docker Hub 中查找映像，这是 Docker 获取该映像的地方。**Docker 运行**命令接受了几个论点。第一个论点是 **docker/whalesay** ，这是对映像的引用。接下来的两个参数 **cowsay boo** 是传递给运行容器执行的命令。
在前面的示例中，您了解到可以在不首先构建映像的情况下运行容器。然而，这是非常常见的，你会想要建立自己的形象。为此，您可以使用 Dockerfile。Docker 文件包含 Docker 从基础映像开始并构建您的映像时将遵循的步骤。这些说明的范围可以从添加文件到安装软件或设置网络。
在下一个示例中，您将构建一个自定义 Docker 映像。这个自定义映像将在鲸鱼输出中显示鼓舞人心的报价。以下 Dockerfile 将用于生成此自定义映像。您将在您的 Docker 游乐场创建它:
来自 Docker/捕鲸者:最新
运行易于获取的 qq 更新
运行 apt-get install -qq -y 财富
CMD /usr/games/fortune -a | cowsay
这个文件有四行。第一个将指示 Docker 使用哪个映像作为这个新映像的源映像。接下来的两个步骤是运行命令为我们的映像添加新的功能，在这种情况下，更新您的 **apt** 存储库并安装一个名为**财富**的应用。**财富**应用是一个小命令行工具，可以生成鼓舞人心的报价。我们将使用它在输出中包含引号，而不是用户输入。最后， **CMD** 命令告诉 Docker，当基于此映像的容器运行时，要执行哪个命令。
您通常将 Dockerfile 保存在名为 **Dockerfile** 的文件中，没有扩展名。要构建映像，您需要执行 **docker build** 命令，并将其指向您创建的 Dockerfile。在构建 Docker 映像时，Docker 守护程序将读取 Docker 文件并执行 Docker 文件中的不同步骤。该命令还将输出运行容器和构建映像所需的步骤。让我们来看一下构建映像的演示。
为了创建这个 Dockerfile，通过 **vi Dockerfile** 命令打开一个文本编辑器。 **vi** 是 Linux 命令行上的高级文本编辑器。如果您不熟悉它，让我们来看看如何在其中输入文本:
1.  打开 vi 后，点击 *I* 键进入插入模式。