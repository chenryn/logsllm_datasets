PlanetLab) further con(cid:2)rms that the number of cuts witnessed by
the individual networks consistently stays below 10.
3.4 Simulation Validation
Methodology. We simulate 2450 hijacking instances on a realistic
AS-level Internet topology. The AS-level Internet topology is ob-
tained by combining six-month routing table snapshots and updates
collected from more than 100 vantage points in RouteViews [2],
RIPE RIS [1] and Abilene, and running Gaoâ€™s algorithm [10] on
them to obtain the AS relationship. The obtained topology con-
sists of 23,195 ASes. The ASes are classi(cid:2)ed into 5 categories by
tier and transit/stub, namely, tier-1, tier-2 transit, tier-2 stub, tier-
3+ (i.e., tier>=3) transit and tier 3+ stub. We de(cid:2)ne tier-1 ASes
as those ASes that do not have providers and peering with all other
tier-1 ASes [14], and the tier of an AS as the minimum number
of providers that connect this AS to a tier-1 AS. 11 tier-1 ASes
are inferred from the topology. Stub ASes are recognized as those
ASes that always appear in the last AS hop in routing tables. Non-
stub ASes are transit ASes. We select 10 ASes from each of the 5
categories. Each hijacking instance selects a single attacker and a
single victim from the total of 50 ASes.
Each instance is simulated via the following steps. (1) We com-
pute the forward path P (d) from the victim to each transit AS d
before the hijack. To do that, we simulate that each AS d originates
its own pre(cid:2)x, and all ASes eventually converge on the routes re-
garding all pre(cid:2)xes. Our simulator emulates BGP routing update
propagation and the BGP decision process including relationship-
based route export and route preference. (2) We then simulate false
origin pre(cid:2)x hijacking by the attacker. After the attacker originates
the victimâ€™s pre(cid:2)x and routing has converged, the ASes that select
routes destined to the attacker are polluted. (3) We next compute
the forward (partial) path P 0(d) from the victim to each transit AS
d, by emulating traceroute probing to AS d. As discussed in Sec-
tion 3.1, due to route asymmetry, a path P 0(d) may contain un-
certain non-trailing subpaths (cid:147)#(cid:148). Whether such non-trailing sub-
paths are collected in vPath depends on the traceroute con(cid:2)gura-
tion, i.e., how many consecutive unreachable IP hops traceroute
tolerates before aborting. We approximate this con(cid:2)guration by as-
suming traceroute aborts after seeing a (cid:2)xed number of consecutive
unreachable AS hops. We denote this number as abort-after, and
simulate three scenarios: abort-after = 1, 2 and 3.4 (4) Finally, we
calculate the set of distinct cuts (cid:10) using P (d) and P 0(d) for all d.
A limitation with the simulation study is that we cannot easily
characterize the timing aspects of hijacking and detection. For ex-
ample, if the detection is triggered when a threshold number of cuts
are observed, the detection delay depends on the snapshot durations
as well as the start time of a hijack relative to the start time of the
probing rounds. We will study the detection delay of ISPY using
Internet hijacking experiments in Section 6.
Results. We (cid:2)rst present the results assuming abort-after=1. Ta-
ble 3 shows the percentage of hijack instances that result in a small
number of cuts for each victim category and for all victims over-
all. Using a detection threshold cut number of 5, 10, and 20, the
percentages of missed instances are 0.45%, 0.45%, and 0.57%, re-
spectively.
To gain insight into these hijacking instances, we show the per-
centage distribution of the polluted ASes and the distribution of the
topological signature j(cid:10)j of these instances in Figure 3(a) and Fig-
ure 3(b). We see that 99:5%, 99:5% and 99:4% of the instances
have j(cid:10)j more than 5, 10 and 20 respectively, which con(cid:2)rms our
conjecture that j(cid:10)j due to hijacking is typically large. Figure 3(c)
further shows the correlation between the pollution caused by a hi-
jack and its resulting cut number j(cid:10)j. It con(cid:2)rms the intuition that
the number of cuts, which largely corresponds to the boundary be-
tween the region of polluted ASes and that of unpolluted ASes, is
Since pre(cid:2)x hijacking is a rare event in the Internet, we resort to
simulations to validate our hypothesis that pre(cid:2)x hijacking creates
a large set (cid:10).
4Con(cid:2)guring traceroute to tolerate more than 3 unreachable AS
hops which translates into many more unreachable IP hops can in-
cur high probing overhead.
(a) Distribution of pollution
(b) Distribution of cut number |W
|
(c) Pollution vs. |W
|, abort-after = 1
100%
80%
60%
40%
20%
)
s
e
c
n
a
t
s
n
i
i
g
n
k
c
a
j
i
h
f
o
%
(
F
D
C
0%
0%
100%
80%
60%
40%
20%
)
s
e
c
n
a
t
s
n
i
i
g
n
k
c
a
j
i
h
f
o
%
(
F
D
C
0%
 0
20%
40%
60%
80%
100%
Pollution (% of ASes)
abort-after = 1
abort-after = 2
abort-after = 3
|
|W
t
e
r
u
a
n
g
s
l
i
2%
1%
0%
 0
 500
 1000
Topological signature |W
i
a
c
g
o
o
p
o
T
l
 5
 1500
|
 10
 2000
 1000
Average
 800
 600
 400
 200
 0
0%
20%
40%
60%
80%
100%
Pollution (% of ASes)
Figure 3: (a) Distribution of pollution among the hijacking instances. (b) Distribution of the number of cuts j(cid:10)j among the hijacking
instances. (c) Correlation between pollution and j(cid:10)j.
Table 3: The percentage of small j(cid:10)j instances.
Victim
category
Total
instances
Tier-1
Tier-2 transit
Tier-2 stub
Tier-3+ transit
Tier-3+ stub
Any
490
490
490
490
490
2450
j(cid:10)j (cid:20) 5
3 (0.61%)
1 (0.20%)
4 (0.82%)
3 (0.61%)
0 (0.00%)
11 (0.45%)
Small j(cid:10)j instances
j(cid:10)j (cid:20) 10
3 (0.61%)
1 (0.20%)
4 (0.82%)
3 (0.61%)
0 (0.00%)
11 (0.45%)
j(cid:10)j (cid:20) 20
4 (0.82%)
1 (0.20%)
5 (1.02%)
4 (0.82%)
0 (0.00%)
14 (0.57%)
high when close to half of the ASes are polluted, and low when the
pollution is either very high or very low.
We found that the results in Table 3 stay the same when chang-
ing abort-after to 2 or 3. This suggests that when a hijack results
in a small number of cuts in vPath, the cut number varies little
under different traceroute con(cid:2)gurations. When a hijack results
in a large number of cuts, we found that assuming abort-after=1
actually estimates fewer cuts, compared to assuming larger abort-
after, as shown in Figure 3(b). The intuition is as follows. When
traceroute is con(cid:2)gured to tolerate more consecutive unreachable
AS hops, the cuts discovered based on our cut de(cid:2)nition tend to
be further away from the pre(cid:2)x owner, and hence the cuts discov-
ered by probing different destinations are more likely to be distinct.
Hence, the total number of distinct cuts is larger.
Analyzing Hijacking Instances with Small j(cid:10)j. To gain insight
into hijacking instances with small cut numbers, we (cid:2)rst analyzed
a hijacking instance simulated above that has a small cut number
j(cid:10)j of 3. Figure 4 sketches the part of the AS topology relevant
to the hijack. This hijack pollutes 144 ASes. The victim is AS
34033, a tier-3 transit AS multi-homed to AS 6461 and AS 1273.
The attacker is AS 13249, a single-homed tier-3 transit AS that is
a customer of AS 1273, one of the victimâ€™s providers. AS 1273 is
not polluted, and hence the pollution is restricted to the attackerâ€™s
customer cone. The cone consists of 252 ASes, 144 of which are
polluted. Note that not all ASes in the attackerâ€™s customer cone are
polluted, as some of them prefer victimâ€™s valid routes announced
by their multi-homed providers or peers that are outside the cone.
Out of the 51 transit ASes in the cone, the forward paths from the
victim AS 34033 to 40 of them traverse the link 1273 - 13249; these
forward paths will witness only one cut. The remaining 11 transit
ASes contribute to two other cuts in vPath; a peering link and a link
to a provider outside the cone both cut across the cone boundary.
We also analyzed the remaining hijacking instances that exhibit
small cuts and found that two key conditions together often con-
tribute to a small number of cuts.
(1) None of the attackerâ€™s
provider(s) is polluted. This makes the pollution restricted to the
attackerâ€™s customer cone. If this condition is not met, the pollution
would spread out and likely cause a larger number of cuts. (2) The
attackerâ€™s customer cone heavily relies on the attackerâ€™s transit ser-
vice in order to be reached from outside the cone, i.e., the ASes
$#
%&(
(cid:1)
%"+
(
%;
,-(
 !
/"(
,

	
 
   
01
23$1
(cid:1)



$#
%&'(
 "!
%)
2'6798
Figure 4: An example hijacking instance with small j(cid:10)j.
outside the cone are likely to use the attacker as transit to reach into
the cone. This condition makes the victimâ€™s path to most ASes in
the cone share a few cuts, which are the links from the attackerâ€™s
providers to the attacker.
However, hijacking scenarios like above are rare because the two
conditions are rarely satis(cid:2)ed for randomly picked victim and at-
tacker pairs. For the (cid:2)rst condition, since the attackerâ€™s provider P
is only one AS hop away and learns a customer route from the at-
tacker, in order for P not to be polluted, the victim must also be P â€™s
customer in order to make its valid route more preferred by P . The
second condition is not easily met unless the cone is small, because
a large cone often consists of ASes with large degrees and are of-
ten multi-homed and/or have peers outside the attackerâ€™s customer
cone. We note that our simulation is based on AS-level Internet
topology inferred from public BGP data which are known to miss
many non-Tier-1â€™s peering links (e.g., [8, 11, 23]). Hence the sec-
ond condition is even less likely to hold in the real Internet.
The inverse case of the above hijacking instance, i.e., AS 34033
hijacks AS 13249, also has a small number of cuts. In this case,
ASes outside AS 13249â€™s customer cone are all polluted. For the
same argument above (that the two conditions with the roles of vic-
tim and attacker switched are rarely satis(cid:2)ed), this case of hijack-
ing is also rare.5 Each of the remaining 9 hijacking instances in
our simulation study that have a small number of cuts is similar to
either of above two cases.
Finally, an adversary can deliberately exploit the above analy-
sis to launch hijack attacks that potentially evade the detection by
ISPY. However, either of the above two instances creates little in-
centive for the attacker to attempt. The instance where AS 13249
hijacks AS 34033 does not provide enough incentive, because with-
out using hijacking, the attacker can also easily blackhole the vic-
tim for its customers. The instance of AS 34033 hijacking AS
13249, on the other hand, can be detected by just observing the
bogus route at the victim, because the victimâ€™s provider is polluted
and announces bogus route to the victim.
5We note that the set of cuts in an instance and its inverses in-
stance are not necessarily identical, because the vPaths for the two
instances contain paths from different source ASes.
*
(
.
*
.
4
5
3
3
5
:
!
#
*
;
!
#
Table 4: Cuts in historical hijacking events.
Victim pre(cid:2)x
Victim pre(cid:2)x owner
Attacker
LavaTrading
Folksamerica
OverseasMedia
64.233.161.0/24 Google
15169
63.165.71.0/24
26913
64.132.55.0/24
33477
65.115.240.0/24 ViewTrade
23004
65.209.93.0/24
35967
66.194.137.0/24 MacKayShields 31860
ADI
66.207.32.0/20
23011
TheStreet.Com 14732
69.64.209.0/24
33313
RhodesASN
160.79.45.0/24