that required by SELS (but does not aﬀect the security of
the scheme). This modiﬁcation also aﬀects the list subscrip-
tion component of the SELS protocol. Second, we feel that
an integrated protocol provides for an easier explanation of
certiﬁed mailing lists.
In the following description of the
CMLP protocol the list creation and subscription compo-
nents are similar to those described in SELS while the com-
ponent for sending certiﬁed email is very diﬀerent from the
one that involves sending of emails in SELS as it provides
fair exchange of certiﬁed email between the sender and the
other list subscribers.
3.1 CMLP Proxy Encryption Scheme
The CMLP public-key encryption scheme E is based on
the discrete log problem like El Gamal. E speciﬁes an en-
cryption function that enables L/T to transform an e-mail
message encrypted with the sender’s public-key into mes-
sages encrypted with the receivers’ public keys. We ﬁrst
present a notation for El Gamal and then describe E.
Let E eg = (Gen, Enc, Dec) be the notation for standard
El Gamal encryption. Gen is the key generating function.
Hence Gen(1k) outputs parameters (g, p, q, a, ga) where g,
p and q2 are group parameters, (p being k bits), a is the
private key, and y = ga mod p is the public key. The Enc
algorithm is the standard El Gamal encryption algorithm
and is deﬁned as e = (mgar mod p, gr mod p), where r is
chosen at random from Zq. To denote the action of encrypt-
ing message m with public key y, we write EncP Ky (m). Dec
is the standard El Gamal decryption algorithm and requires
dividing mgar (obtained from e) by (gr)a mod p. We assume
all arithmetic to be modulo p unless stated otherwise.
The CMLP asymmetric encryption scheme is denoted by
E = (IGen, U Gen, AEnc, ADec, Γ). With further details
in Section 3.2, IGen is a distributed protocol executed by
LM and L/T to generate group parameters g, p and q, pri-
vate keys KLM and KL/T and public keys P KLM = gKLM ,
P KL/T = gKL/T , and P KLK = gKLM gKL/T . KLM is simply
a random number in Zq chosen by LM , and KL/T is a ran-
dom number chosen by L/T. U Gen is a distributed protocol
executed by user Ui, LM , and L/T to generate private keys
for Ui and proxy keys for L/T . U Gen(KLM , KL/T ) outputs
private key KUi , proxy key KUi and the public keys P KUi =
gKUi , P KUi = gKUi . KUi is called user Ui’s proxy key and
is held by L/T . Furthermore, it is guaranteed that KUi +
KUi = KLM + KL/T mod q. This protocol requires Ui, LM ,
and L/T to generate random numbers and add/subtract
them from KLM and KL/T . AEnc and ADec are identical
to Enc and Dec deﬁned above. ΓKUi
is a transformation
function that uses user Ui’s proxy key to transform mes-
sages encrypted with P KLK into messages encrypted with
2Using subgroups ensures that El Gamal is semantically se-
cure [12].

(−1)
user Ui’s public key.
It takes as input an encrypted mes-
sage of the form (grKLK M, gr) and outputs (grKUi M, gr) =
((grKUi )
grKLK M, gr). Once U Gen has been executed
for users Ui and Uj, then sending a message between the
users requires user Ui calling AEncP KLK , L/T calling ΓKUj
,
. The encryption scheme E is
and user Uj calling ADecKUj
correct because ADecKUj
(AEncP KLK (m))) = m.
(ΓKUj
The encryption scheme E is secure if it retains the same
level of security as the standard El Gamal scheme against
all adversaries A, and if L/T cannot distinguish between
encryptions of two messages even with access to multiple
proxy keys.
Theorem 1 Let E = (IGen, U Gen, AEnc, ADec, Γ) be
the CMLP encryption scheme. E is CPA (chosen-plaintext
attack) secure against L/T and any adversary A. The modi-
ﬁcation to the proxy encryption scheme over SELS does not
aﬀect the security of the scheme. The proof of Theorem
1, therefore, remains the same as that provided in SELS.
However, it is provided in Appendix B for the sake of com-
pleteness.
In practice asymmetric encryption of bulk messages is
costly and, therefore, we employ a hybrid encryption ap-
proach where the bulk message is encrypted with a sym-
metric encryption algorithm (e.g. AES) and then AEnc is
used to encrypt the symmetric key. We use Ek(m) to denote
the symmetric encryption of message m with key k.
3.2 The CMLP
We assume that all entities, namely, the users, LM and
L/T have (or can obtain and trust) each other’s public-key
certiﬁcates for encryption of user subscription e-mails and
for signature veriﬁcation of all e-mails (e.g., PGP certiﬁ-
cates or those from an external PKI). We distinguish CMLP
keys from external PKI keys by placing a bar on top of the
PGP/external PKI keys. EncP Ki
(m) denotes the encryp-
tion of message m with public-key P Ki, and SigKi
(m) de-
notes a signed message (i.e., the message m along with its
signature) using private key Ki. We use El Gamal for en-
cryption and RSA for signatures.
3.2.1 List Creation
To create a new list L, LM and L/T execute the following
steps:
1. LM begins the execution of IGen and generates pa-
rameters (g, p, q, KLM , gKLM ), and associates the key
pair (KLM , P KLM ) with the list. LM then makes the
key P KLM public.
2. LM then sends L/T a message with the values g, p,
and q, and the new list ID L. Formally, LM −→ L/T :
SigKLM
(“Create” List L, g, p, q).
3. L/T then continues the execution of IGen by choos-
ing a new private key KL/T , computing public keys
P KL/T = gKL/T and associating the key pair with
the list. L/T then makes the key P KL/T public.
4. Both LM and L/T implicitly agree that the sum KLK
= KLM + KL/T (mod q) is the list key but neither
knows its value since neither knows the other’s private
key. They complete the execution of IGen by comput-
ing P KLK = P KL/T .P KLM = gKL/T .gKLM = gKLK
and making it public.
Creating a List:
SigKLM(“Create” List L, g, p, q)
L/T
(chooses KL/T)
LM
(chooses g, 
p, q, KLM)
Subscribing Users: 
SigKUi (“Join” List L)
EncPKUi (SigKLM(TKUi, Ticket, g, p, q))
LM
LM
where TKUi = KLM + r mod q and Ticket = EncPKL/T(SigKLM(L, Ui, r))
EncPKL/T (SigKUi(“Join” L, r’)), Ticket
L/T
Ui
Ui
Ui
(computes KUi = TKUi + r’)
(computes K’Ui = KL/T - r - r’)
Legend (cid:111) LM: List Moderator; L/T: List Server/TTP; 
Ui: Useri
Figure 1: List Creation and User Subscription
The list is now ready for subscription.
3.2.2
Subscribing Users
To subscribe user Ui to list L, Ui, LM and L/T execute
the following steps:
1. Ui sends a signed “join” request to LM . Formally,
Ui −→ LM : SigKUi
(“Join” List L).
2. LM authenticates Ui and begins the execution of U Gen
by generating a random value r, a temporary key T KUi
= KLM + r mod q for Ui, and a ticket encrypted with
L/T ’s public-key containing the value r.
3. LM then sends the values g, p, and q, the tempo-
rary key, and the ticket to Ui. Formally, LM −→
(T KUi , Ticket, g, p, q)) where
Ui: EncP KUi
T KUi = KLM + r mod q and Ticket = EncP KL/T
(SigKLM
(SigKLM
(L, Ui, r)).
4. On receiving this message from LM , Ui generates a
random value r and computes his private key KUi =
T KUi + r mod q.
5. Ui then sends the value r to L/T encrypted with
P KL/T along with the ticket received from LM . For-
(“Join” L, r)),
mally, Ui −→ L/T : EncP KL/T
Ticket.
(SigKUi

6. L/T authenticates the ticket via LM ’s signature, ob-
tains r and r from this message, and computes the
proxy key KUi = KL/T - r - r mod q.
This completes the execution of U Gen. Note that the sum
of keys KUi and KUi is also KLK (the list key) and that
neither LM nor L/T knows the user’s private key KUi .
3.2.3
Sending Certiﬁed Email
The CMLP protocol for sending certiﬁed email on a mail-
ing list is a ﬁve-step protocol. In the ﬁrst step the sender
sends a signed and encrypted email message along with a
cleartext description to L/T . In the second step L/T for-
wards the message to all, say t, list subscribers. In the third
step each receiver sends a signed key request to L/T to ob-
tain a transformation for the email message. Depending on
the choice of strong or weak fairness, L/T waits for requests
from either all receivers or from any one receiver.
In the
fourth step L/T transforms the message key for each re-
ceiver and sends it to that receiver. In the ﬁfth step L/T
sends a delivery receipt to the sender.
The protocol binds the sender and all receivers to one
email message as follows. In the ﬁrst step, sender computes
the hash of the encrypted message and its description. This
hash is signed and included in every message and enables
the sender and receivers to verify that they are dealing with
the same message.
In more detail, the protocol is speciﬁed in Figure 2 and
runs as follows.
S
1. Ek(SigKS(m)), AEncPKLK(k), ds, SigKS(hm)
where hm = H(Ek(SigKS(m)), ds)
L/T
2. ds, Ek(SigKS(m)), SigKS(hm), SigKLT(“New Email”)
∀i=1 Ri
t
L/T
t
∀i=1 Ri
3. SigKRi(hm, “Key Request”)
L/T
L/T waits for key requests
from all receivers
L/T
L/T
4. SigKL/T(AEncPKRi(k), hm, “Key Delivery”)
t
∀i=1 Ri
5. rcpt, SigKL/T(“Delivery rcpt”),
∀i=1 SigKL/T(SigKRi(hm))
t
where rcpt = ∏ SigKL/T(SigKRi(hm))
t
i=1
S
Legend → S: Sender; L/T: List Server/TTP; Ri: Receiveri
Figure 2: Sending Certiﬁed Email
Step 1: Sender S performs the following operations:
1. S signs the message m with private key KS. That is, S
(m). S also generates a description ds,
computes SigKS
which is a header asking receivers to read the certiﬁed
email, perhaps explaining the email contents.
2. S ﬁrst generates a random key k suitable for E and
then encrypts the above signed message. That is, S
computes menc = Ek(SigKS
(m)).
3. S then computes a hash of the encrypted message
and the description. Speciﬁcally, S computes hm =
H(menc, ds) where H() is a collision resistant hash
function such as SHA. S then signs hm with private
key KS.
4. S then computes the asymmetric encryption of key k
using its public key P KLK ; i.e., it computes
AEncP KLK (k).
5. (Message 1) S sends to L/T :
Ek(SigKS
(m)), AEncP KLK (k), ds, SigKS
(hm).
Step 2: L/T performs the following operations:
1. L/T veriﬁes S’s signature on hm and compares it to
the re-computed hash from the received message.
If
the match does not succeed L/T aborts the protocol.
2. (Message 2) ∀t
Ri: Ek(SigKS
mail”)
i=1 L/T sends to every list subscriber
(m)), ds, SigKS
(hm),SigKL/T
(“N ewE−
Step 3: Every receiver Ri performs the following opera-
tions:
1. Ri veriﬁes L/T ’s signature on “New Email” and S’s
signature on hm and compares it to the re-computed
hash from the received message. If the match does not
succeed Ri aborts the protocol.
2. If Ri decides that it wants to read the message (e.g.
based on the description ds), it signs hm with its pri-
vate key KRi .
3. (Message 3) ∀t
i=1 Ri sends a key request to L/T :
(hm, “KeyRequest”).
SigKRi
Steps 4 and 5 for strong fairness: L/T performs the
following operations:
1. L/T waits for Message 3 from all receivers (in practice,
this wait would be time bound).
2. L/T veriﬁes the receivers’ signatures on Message 3 and
compares hm from the message to that computed in
Step 2. If any of the signatures or matches fail, L/T
aborts the protocol.
3. For every receiver Ri, L/T transforms the encrypted
(k)
symmetric key. That is, L/T computes AEncP KRi
= ΓKRi
(AEncP KLK (k)).
4. (Message 4) ∀t
Ri: SigKL/T
i=1 L/T sends the key to every receiver
(AEncP KRi
(k), hm, “KeyDelivery”)
On receiving this message Ri decrypts k with private
key KRi , uses k to decrypt the email message, and
0
veriﬁes the sender’s signature on the email. Ri also re-
computes hm by ﬁrst re-encrypting the decrypted mes-
sage with k and verifying that that the hash matches
the key request that it had sent to L/T .
5. L/T co-signs every received Message 3 and then com-
putes a condensed signature from these co-signatures