front pages of Alexa Top 1,000 sites.
quota values down to the nearest multiple of 200 KiB, the inference
accuracy of our attack on Linux, Windows, and Android decreases
to 0.75%, 1.65%, and 0.25%, respectively.
Browser status inference attack. Figure 22 shows that the infer-
ence accuracy of our history stealing attack also decreases as the
round-down size increases, but the size of round down is larger than
that for our cross-tab activity inference attack (Figure 21). Unlike
the cross-tab activity inference attack, the history stealing attack only
uses the peak size of storage footprints, so minor changes in quota
values cannot effectively decrease its inference accuracy. When we
round quota values down to the nearest multiple of 256 KiB, the
inference accuracy of our attack on Linux, Windows, and Android
decreases to 31.8%, 90.0%, and 3.0%, respectively. Here, Windows
still maintains good accuracy, since the average peak size of storage
footprints on Windows is larger than 2.5 MiB unlike Linux and An-
droid (Figure 23). However, when we round quota values down to
the nearest multiple of 1 MiB, the inference accuracy of our attack
on Linux, Windows, and Android decreases to 1.2%, 0.4%, and
0.0%, respectively.
Consequently, we suggest that the Quota Management API needs
to round quota values down to the nearest multiple of 1 MiB to
completely spoil our attack (the round-down size for login status
identiﬁcation is below 1 MiB, so we skip to explain it.) On average,
our countermeasure will waste approximately 0.5 MiB of storage
space for each web application that uses temporary storage.
5.2 Realistic Evaluation
In this paper we assume a less realistic evaluation environment
which is too friendly to attackers: a victim visits one of Alexa Top
100 web sites (closed world), does not use multiple tabs to visits
several web sites simultaneously, and does not generate signiﬁcant
background trafﬁc (e.g., downloading a huge ﬁle). Deﬁnitely, this is
an unrealistic assumption as criticized by other researchers [22, 34]
and the inference accuracy would decrease when we assume open
world.
However, what we want to emphasize is that even if we do not as-
sume a strong adversary who can monitor a victim’s network trafﬁc,
our attack shows high inference accuracy comparable with previous
attacks under the similar attacker-friendly evaluation settings [6].
Making this kind of attacks work well with a realistic environment
is out of scope of this paper and several researchers have already
considered it [16, 24, 33, 44].
Furthermore, our countermeasure (§5.1) successfully prevents
all the attacks we explained even under such an attacker-friendly
environment. This countermeasure certainly works well in the real
world without any problem. Therefore, we believe whether we
evaluate our attacks with realistic or unrealistic assumptions is not a
critical problem.
6. RELATED WORK
In this section we introduce previous side channel attacks to
identify browser activity and status.
CSS visited style. A CSS-based attack [2] uses style difference be-
tween visited and unvisited links to infer the history of a victim web
browser. This attack can directly access the history information of a
victim web browser, so it can accurately identify the browser history
unlike other relatively inaccurate attacks (e.g., attacks using network
trafﬁc or timing). Wondracek et al. [46] further extend this attack
to infer the real identity of a victim by using the information about
visited groups in OSNs. Baron [3] proposes an effective counter-
measure that pretends all links are unvisited when a script attempts
to inspect link styles. All major browsers adopt the countermeasure
so that CSS-based attacks are no longer effective. To circumvent the
solution, Weinberg et al. [45] use a webcam and user interaction,
but it is difﬁcult to be realized.
Timing information. A timing attack measures how long it takes
to load web pages to infer a victim’s browsing history and other
private information. Felten and Schneider [10] ﬁrstly propose tim-
ing attacks using the web cache and DNS cache to infer the web
pages that a victim web browser has recently visited. Bortz et
al. [4] further reveal that an attacker can infer the login status of
a victim and the number of items in a victim’s shopping cart by
measuring the loading time of web pages. Jia et al. [21] propose an
advanced timing attack that measures the loading time of web pages
containing location-sensitive contents to infer a victim’s location in-
formation. In addition, researchers propose scriptless timing attacks
using meta-refresh tag [1] and CSS [28]. Timing attacks, however,
are error prone especially when network condition is bad. To cir-
cumvent the problem, Goethem et al. [12] propose new web-based
timing attacks that can estimate the size of cross-origin resources
regardless of network conditions.
Vulnerable API. Researchers consider side-channel attacks using
vulnerable APIs of HTML5 and CSS as we exploited the Quota
Management API. Kotcher et al. [23] propose two timing attacks us-
ing CSS ﬁlters. They infer the login status of a victim by measuring
the frame rate of a web page through requestAnimationFrame. Fur-
ther, they infer rendered pixels of a web page on the victim’s screen
by measuring the frame rate of each pixel. However, their attacks
are slow and inaccurate. Tian et al. [41] identify that by using the
Screen Sharing API, attackers can peek at a victim’s screen and per-
form cross-site request forgery (CSRF) and history stealing attacks.
This attack assumes a strong adversary who can obtain permission
to use the Screen Sharing API from a victim and extract sensitive
information from a video stream. Lee et al. [26] discover that by
using the Application Cache API, attackers can check the status of
cross-origin resources even without using client-side scripts. But,
this attack does not work when target web sites make all of their
content dynamic, as Facebook and Twitter do.
Concurrently and independently to our work, Goethem et al. [13]
proposed attacks to infer the size of cross-origin resources using
the ServiceWorker and Quota Management API. Although the side
channel found by them and us are similar, we consider not only
active attacks but also passive attacks to monitor victim user’s real-
time behavior without generating any additional resource requests
to target web sites. In contrast, Goethem et al. mainly focus on
active attacks to probe cross-origin resource size, which are similar
with §4.6 and §4.7.
Network trafﬁc. Numerous researchers [5–7, 16, 17, 22, 24, 29,
33, 39, 43, 44] identify that network trafﬁc analysis allows attackers
to infer which web site a victim is visiting even when the victim
protects web trafﬁc by using HTTPS or Tor. Various information
of protected web trafﬁc, such as packet timing, ordering, and size,
can be used for inference. But, these attacks have limitations: they
assume a strong adversary who can monitor network trafﬁc and can
attack victims in such a monitored network.
Local resource. Researchers consider side-channel attacks using
a victim’s local resources, such as memory, power-consumption,
and GPU. Jana and Shmatikov [20] demonstrate that a malicious
application can know which web site a victim web browser has
visited by monitoring memory footprints of the browser through a
proc ﬁle system. Clark et al. [8] measure the power consumption
of a victim’s machine to identify a visited web site. Michalevsky et
al. [32] also analyze a smartphone’s power usage to infer location
of a mobile device. Lee et al. [27] analyze a GPU memory dump
containing web page textures to recognize which web site a victim
web browser has visited. The explained attacks, however, assume
a strong adversary who can access the local resources of a victim
web browser. An adversary needs to have a right to execute a
process on the operating system on which a victim web browser is
running [20, 27] or have access to the physical machine on which a
victim web browser is running [8].
7. CONCLUSION
In this paper, we introduced a novel side-channel attack using the
Quota Management API. Analyzing storage footprints obtained by
using the Quota Management API allows a web attacker to identify
which web site a victim web browser is currently visiting and the
status of a victim web browser. We conﬁrmed that the inference
accuracy of our attacks is high: above 90% in many cases. To
mitigate our attack, we suggested a round-down method that can
substantially decrease the accuracy of our attacks while demanding
minor modiﬁcations of the Quota Management API.
8. ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their in-
valuable comments and suggestions. This work was supported by
Samsung Research Funding Center of Samsung Electronics under
Project Number SRFC-TB1403-04.
References
[1] T. G. Abbott, K. J. Lai, M. R. Lieberman, and E. C. Price.
Browser-based attacks on Tor. In Privacy Enhancing
Technologies Symposium (PETS), 2010.
[2] L. D. Baron. :visited support allow queries into global history.
https://bugzilla.mozilla.org/show_bug.cgi?id=147777, 2002.
419
[3] L. D. Baron. Preventing attacks on a user’s history through
CSS :visited selectors.
http://dbaron.org/mozilla/visited-privacy, 2010.
[18] I. Hickson. 7.7 ofﬂine web applications – HTML standard.
http://www.whatwg.org/specs/web-apps/current-work/
multipage/ofﬂine.html, 2014.
[4] A. Bortz, D. Boneh, and P. Nandy. Exposing private
information by timing web applications. In Proceedings of the
16th International World Wide Web Conference (WWW),
Alberta, Canada, May 2007.
[5] X. Cai, R. Nithyanand, T. Wang, R. Johnson, and I. Goldberg.
A systematic approach to developing and evaluating website
ﬁngerprinting defenses. In Proceedings of the 21st ACM
Conference on Computer and Communications Security
(CCS), Scottsdale, Arizona, Nov. 2014.
[6] X. Cai, X. C. Zhang, B. Joshi, and R. Johnson. Touching from
a distance: Website ﬁngerprinting attacks and defenses. In
Proceedings of the 19th ACM Conference on Computer and
Communications Security (CCS), Raleigh, NC, Oct. 2012.
[7] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel
leaks in web applications: A reality today, a challenge
tomorrow. In Proceedings of the 31th IEEE Symposium on
Security and Privacy (Oakland), Oakland, CA, May 2010.
[8] S. S. Clark, H. Mustafa, B. Ransford, J. Sorber, K. Fu, and
W. Xu. Current events: Identifying webpages by tapping the
electrical outlet. In European Symposium on Research in
Computer Security (ESORICS), 2013.
[9] Facebook Help Center. What are the privacy options for
groups? https://www.facebook.com/help/220336891328465.
[10] E. W. Felten and M. A. Schneider. Timing attacks on web
privacy. In Proceedings of the 7th ACM Conference on
Computer and Communications Security (CCS), Athens,
Greece, Oct. 2000.
[11] T. Gentilcore. Chrome’s 10 caches.
http://gent.ilcore.com/2011/02/chromes-10-caches.html,
2011.
[12] T. V. Goethem, W. Joosen, and N. Nikiforakis. The clock is
still ticking: Timing attacks in the modern web. In
Proceedings of the 22nd ACM Conference on Computer and
Communications Security (CCS), Denver, Colorado, Oct.
2015.
[13] T. V. Goethem, M. Vanhoef, F. Piessens, and W. Joosen.
Request and conquer: Exposing cross-origin resource size. In
Proceedings of the 25th USENIX Security Symposium
(Security), Austin, TX, Aug. 2016.
[14] Google Developers. Managing HTML5 ofﬂine storage.
https://developers.google.com/chrome/whitepapers/storage.
[15] Google Developers. Web developer’s guide to prerendering in
Chrome. https:
//developers.google.com/chrome/whitepapers/prerender.
[16] X. Gu, M. Yang, and J. Luo. A novel website ﬁngerprinting
attack against multi-tab browsing behavior. In Proceedings of
19th IEEE International Conference on Computer Supported
Cooperative Work in Design (CSCWD), 2015.
[17] J. Hayes and G. Danezis. k-ﬁngerprinting: a robust scalable
website ﬁngerprinting technique. In Proceedings of the 25th
USENIX Security Symposium (Security), Austin, TX, Aug.
2016.
420
[19] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Protecting
browser state from web privacy attacks. In Proceedings of the
15th International World Wide Web Conference (WWW),
Edinburgh, Scotland, May 2006.
[20] S. Jana and V. Shmatikov. Memento: Learning secrets from
process footprints. In Proceedings of the 33rd IEEE
Symposium on Security and Privacy (Oakland), San
Francisco, CA, May 2012.
[21] Y. Jia, X. Dong, Z. Liang, and P. Saxena. I know where
you’ve been: Geo-inference attacks via the browser cache. In
Web 2.0 Security & Privacy (W2SP), 2014.
[22] M. Juarez, S. Afroz, G. Acar, C. Diaz, and R. Greenstadt. A
critical evaluation of website ﬁngerprinting attacks. In
Proceedings of the 21st ACM Conference on Computer and
Communications Security (CCS), Scottsdale, Arizona, Nov.
2014.
[23] R. Kotcher, Y. Pei, P. Jumde, and C. Jackson. Cross-origin
pixel stealing: Timing attacks using CSS ﬁlters. In
Proceedings of the 20th ACM Conference on Computer and
Communications Security (CCS), Berlin, Germany, Oct. 2013.
[24] A. Kwon, M. AlSabah, D. Lazar, M. Dacier, and S. Devadas.
Circuit ﬁngerprinting attacks: Passive deanonymization of Tor
hidden services. In Proceedings of the 24th USENIX Security
Symposium (Security), Washington, DC, Aug. 2015.
[25] L. Latecki, Q. Wang, S. Koknar-Tezel, and
V. Megalooikonomou. Optimal subsequence bijection. In
Proceedings of 7th IEEE International Conference on Data
Mining (ICDM), 2007.
[26] S. Lee, H. Kim, and J. Kim. Identifying cross-origin resource
status using application cache. In Proceedings of the 2015
Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, Feb. 2015.
[27] S. Lee, Y. Kim, J. Kim, and J. Kim. Stealing webpages
rendered on your browser by exploiting GPU vulnerabilities.
In Proceedings of the 35th IEEE Symposium on Security and
Privacy (Oakland), San Jose, CA, May 2014.
[28] B. Liang, W. You, L. Liu, W. Shi, and M. Heiderich.
Scriptless timing attacks on web browser privacy. In
IEEE/IFIP International Conference on Dependable Systems
and Networks (DSN), 2014.
[29] M. Liberatore and B. N. Levine. Inferring the source of
encrypted HTTP connections. In Proceedings of the 13th
ACM Conference on Computer and Communications Security
(CCS), Alexandria, VA, Oct.–Nov. 2006.
[30] J. Mann and A. Jain. Page visibility (second edition).
http://www.w3.org/TR/page-visibility/, 2013.
[31] N. Mehta, J. Sicking, E. Graff, A. Popescu, J. Orlow, and
J. Bell. Indexed database API.
http://www.w3.org/TR/IndexedDB/, 2013.
APPENDIX
A URLs of identifying login status
Web site
google.com
facebook.com
youtube.com
yahoo.com
amazon.com
linkdin.com
ebay.com
twitter.com
pinterest.com
live.com
URL
https://mail.google.com/mail/u/0/#inbox
https://www.facebook.com
http://www.youtube.com/feed/history
https://us-mg5.mail.yahoo.com/neo/launch?reason=
ignore&rs=1
https://www.amazon.com/gp/yourstore?ie=UTF8&
ref_=gno_recs
https://www.linkedin.com/proﬁle/view?id=
[ANONYMIZED]&trk=nav_responsive_tab_proﬁle_pic
http://cart.payments.ebay.com/sc/view
https://twitter.com/following
http://www.pinterest.com
https://blu184.mail.live.com/default.aspx?id=64855#
ﬁd=ﬂin
instagram.com https://instagram.com/accounts/edit
cnn.com
paypal.com
http://edition.cnn.com/proﬁle/#mynewstop
https://www.paypal.com/webapps/customerproﬁle/
summary.view
https://www.tumblr.com/settings/blog
http://www.reddit.com/user/[ANONYMIZED]/hidden
http://imgur.com/account/settings/password
tumblr.com
reddit.com
imgur.com
wordpress.com https://[ANONYMIZED].wordpress.com/wp-admin/
imdb.com
weather.com
aol.com
post.php?post=6&action=edit&message=6&postpost=v2
http://www.imdb.com/proﬁle/recently-viewed?ref_=
nv_usr_rvi_5
https://proﬁle.weather.com/#/proﬁle/manage
https://account.aol.com/account/settings/start
Table 2: URLs of identifying login status (20 popular web sites in Alexa).
[32] Y. Michalevsky, A. Schulman, G. A. Veerapandian, D. Boneh,
and G. Nakibly. PowerSpy: Location tracking using mobile
device power analysis. In Proceedings of the 24th USENIX
Security Symposium (Security), Washington, DC, Aug. 2015.
[33] A. Panchenko, F. Lanze, A. Zinnen, M. Henze, J. Pennekamp,
K. Wehrle, and T. Engel. Website ﬁngerprinting at Internet
scale. In Proceedings of the 2016 Annual Network and
Distributed System Security Symposium (NDSS), San Diego,
CA, Feb. 2016.
[34] M. Perry. A critique of website trafﬁc ﬁngerprinting attacks.
https://blog.torproject.org/blog/
critique-website-trafﬁc-ﬁngerprinting-attacks, 2013.
[35] D. Ross and T. Gondrom. HTTP header ﬁeld
X-Frame-Options. RFC 7034, 2013.
[36] A. Russell, J. Song, and J. Archibald. Service Workers.
http://www.whatwg.org/specs/web-apps/current-work/
multipage/ofﬂine.html.
[37] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson. Busting
frame busting: A study of clickjacking vulnerabilities on
popular sites. In Web 2.0 Security & Privacy (W2SP), 2010.
[38] S. Salvador and P. Chan. Toward accurate dynamic time
warping in linear time and space. Intelligent Data Analysis,
11(5):561–580, 2007.
[39] Q. Sun, D. R. Simon, Y.-M. Wang, W. Russell, V. N.
Padmanabhan, and L. Qiu. Statistical identiﬁcation of
encrypted web browsing trafﬁc. In Proceedings of the 23rd
IEEE Symposium on Security and Privacy (Oakland),
Oakland, CA, May 2002.
[40] The Chromium Projects. GPU program caching.
https://docs.google.com/a/chromium.org/document/d/
1Vceem-nF4TCICoeGSh7OMXxfGuJEJYblGXRgN9V9hcE/
edit.
[41] Y. Tian, Y.-C. Liu, A. Bhosale, L.-S. Huang, P. Tague, and
C. Jackson. All your screens are belong to us: Attacks
exploiting the HTML5 screen sharing API. In Proceedings of
the 35th IEEE Symposium on Security and Privacy (Oakland),
San Jose, CA, May 2014.
[42] Tor. Tor project. https://www.torproject.org.
[43] T. Wang, X. Cai, R. Nithyanand, R. Johnson, and I. Goldberg.
Effective attacks and provable defenses for website
ﬁngerprinting. In Proceedings of the 23rd USENIX Security
Symposium (Security), San Diego, CA, Aug. 2014.
[44] T. Wang and I. Goldberg. On realistically attacking Tor with
website ﬁngerprinting. Technical report, 2015.
[45] Z. Weinberg, E. Y. Chen, P. R. Jayaraman, and C. Jackson. I
still know what you visited last summer: Leaking browsing
history via user interaction and side channel attacks. In
Proceedings of the 32nd IEEE Symposium on Security and
Privacy (Oakland), Oakland, CA, May 2011.
[46] G. Wondracek, T. Holz, E. Kirda, and C. Kruegel. A practical
attack to de-anonymize social network users. In Proceedings
of the 31th IEEE Symposium on Security and Privacy
(Oakland), Oakland, CA, May 2010.
[47] K. Yasuda. Quota management API.
http://www.w3.org/TR/quota-api/, 2013.
421