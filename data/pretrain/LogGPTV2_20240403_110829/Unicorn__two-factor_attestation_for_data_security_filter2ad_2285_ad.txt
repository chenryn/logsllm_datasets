uApps may be run without a swap partition or ﬁle; this may
however aﬀect some applications’ functionality.
(c) Communication channel attacks. We assume the
communication channel between a trusted application and
the remote server is encrypted and integrity-checked. In ad-
dition, since the uApps have a speciﬁc use, we constrain
their network access capabilities to the bare minimum nec-
essary – thus they may only communicate with (trusted)
servers which are needed for the uApp’s operation. This
severely limits an adversary’s ability to ﬁnd and exercise a
vulnerability in a uApp.
Because the PSD has a direct communication channel with
the user’s computer, we assume that an attacker cannot tam-
per or snoop on this channel. If part of this channel uses a
wireless technology, like 802.11 or bluetooth, this must be
protected via cryptographic means, depending on how this
channel is used (see Section 3.2).
(d) Attestor attacks. The attacker may attempt to fool
the attestors in two ways. First, she may try to mount a
spooﬁng attack by tricking the user into believing that the
uApp has started, when in fact the computer is still running
a malicious user OS. Second, she may try to use a relaying
attack [32], where she relays attestation requests to a valid
uApp running on another machine.
A spooﬁng attack is detected by the user’s PSD since
the spoofed uApp cannot generate a proper response to
the quote request from the PSD. A correct quote response
is signed by the AIK private key, which is only stored on
the TPM. The user may not notice the spoofed uApp and
continue to interact with it, but since she does not input
any authentication credentials, no passwords or such may
be leaked. In addition, no sensitive information the server
can be compromised.
In a relaying attack, the adversary loads a tampered uApp.
To generate a proper quote response, she can have a sec-
ond machine running a valid uApp to which she relays the
quote request, records the response and relays that back to
the attestor. However, this attack is defeated by our Uni-
corn design. If the attestor is a remote server, the authentic
uApp client will not respond to an attestation request from
the attacker because its network interface is constrained to
communicate only with authentic servers. In the case where
the attestor is the user’s PSD, then the AIK of the user’s
machines has been registered with the PSD and it will not
accept a quote request by an AIK other than the one stored
on the PSD. The quote response format for user and server
attestation requests are diﬀerent so that an attacker cannot
convert one to the other without forging the AIK signature.
6.2 Performance Evaluation
Because uApps run natively on the hardware, there is no
run time overhead for applications running inside a uApp.
Therefore we focus our evaluation on the time to switch from
the user OS to a uApp and back. All measurements are per-
formed on a machine with an Intel Core 2 Quad processor
Q9550 (2.83 GHz, 12M cache), Intel DQ45CB motherboard
(Intel Q45 chipset and TPM 1.2), 4GB DDR2 memory,
and a 500GB SATA2 disk (Western Digital WD5000AAKS,
7200RPM, 16MB cache). Ubuntu 10.04 (x86 64) with ker-
nel 2.6.34 is used as user OS and uApp OS. The user OS has
been used a kernel/application development platform.
Switching from user OS to uApp. As mentioned in
Section 4, the uApp OS image is stored in a 275MB parti-
tion using the squashfs ﬁle system. The user OS is initially
24uApp
loader
3.40
2.87
3.02
3.76
3.40
3.29
kernel,
X
7.19
7.49
6.98
7.30
7.04
7.20
OS hash Total
14.54
14.21
13.85
14.89
14.20
14.34
3.95
3.85
3.85
3.83
3.76
3.85
Suspend Total with
suspend
11.34
11.09
11.06
11.32
11.00
11.16
25.88
25.30
24.91
26.21
25.20
25.50
Run 1
Run 2
Run 3
Run 4
Run 5
Average
Resume
Switch
with reboot
Resume
with reboot
24.8
24.7
23.6
22.5
23.1
23.7
48.57
47.75
45.72
47.83
48.61
47.70
45.6
45.3
44.1
44.8
46.4
45.2
Table 1: Time distribution (in seconds) for switching user OS to uApp OS and back
conﬁgured to use 1GB of memory. To simulate an activity
on the user OS when a uApp is invoked, we run the Firefox
browser with ﬁve open tabs and play a movie using the VLC
media player. In addition, default Ubuntu services, such as
SSH and the Gnome desktop are also running. Under this
load, the user OS had about 300MB of active memory usage.
We measure the time from when the user gives a user-level
command to switch to the uApp to the time the X server
in the uApp comes online (note that the uApp is conﬁgured
to automatically log in). We break this process into several
components and also record the intermediate times for each
component. The components are: (1) the time for the user
OS to suspend its state to disk; (2) the time from the end of
suspend to when the uApp loader (tboot) transfers control
to the uApp kernel; (3) the time from when the uApp kernel
starts booting, to when X becomes available, excluding the
uApp image’s hash measurement time; and (4) the time to
measure the hash of the uApp image. We measure the above
times using do_gettimeofday inside the kernel, and the date
and time shell commands. We do not include the time to
load the uApp loader into memory as this usually took below
one second to complete.
We switched between user OS and uApp OS for ﬁve rounds
and give the results in Table 1.4 We also performed a full
reboot between each round to initiate switching from a sim-
ilar state. Without suspending the user OS, the switch time
is 14.34 seconds on average (std. deviation 0.39);
in this
case, after using a uApp, the user initiates a new user OS
instance via kexec or regular reboot (as opposed to resume).
The switching time including the time to save a suspended
user OS takes an average of 25.5 seconds (std. deviation
0.53). While fairly fast, there are several parameters that
could vary depending on the implementation and usage en-
vironment of the uApp. Because our uApp loader is based
on tboot, there is a signiﬁcant amount of functionality that
is performed but not needed by the uApp. We believe that
with more tuning, the uApp loader time could be reduced.
The suspend time is dependent on the amount of user OS
state that must be saved to disk, which in turn depends on
the amount of memory used by applications and the user
OS kernel, and the total amount of memory that the user
OS kernel has. To illustrate, we varied the amount of mem-
ory allocated to the user OS and found that average suspend
durations for 2GB and 4GB memory are 11.86 and 16.64 sec-
onds respectively (std. deviation 0.4 and 0.85 respectively).
However, we note that if the uApp has lower memory re-
quirements than the user OS, the suspend-to-disk code in
the user OS could be modiﬁed to only write the amount of
memory needed by the uApp to disk. Thus, with enough
4Ideally, we would have preferred more rounds for deriving
our results. However, each round requires manual opera-
tions. Also, note that standard deviations were small for
each measured item.
engineering, the suspend time of the user OS will be ulti-
mately dependent on the lesser of the memory requirements
of the uApp and the amount of active state in the user OS.
Another highly variable factor is the size of the uApp
disk image. Our measurements on the test machine show
that it takes about 1.4 seconds to hash every 100MB of
the uApp OS partition, and that this time is dominated
by the disk bandwidth, so it is unlikely to change even with
a faster CPU. By using a smaller Linux distribution instead
of Ubuntu (as used in our prototype), the uApp image size
may be further reduced.
Switching from uApp to user OS. To measure the time
to switch back to the user OS, we measure the time from
when the user initiates shutdown of the uApp to the time
the video running in the VLC player resumes in the user OS
(assuming the user chooses suspend-to-disk before switching
to uApp). Because there is no easy way to programmatically
measure when the video resumes, and the switch time takes
on the order of seconds, we measure the time to perform this
switch operation using a stop watch. We also believe this
better represents the user experience. This was measured
to be an average of 23.7 seconds over 5 runs (std. deviation
1.0); see the “Resume” column in Table 1.
Switching with regular reboot. We also measure switch
time with regular reboot, i.e., going through the BIOS and
GRUB boot loader. We run applications in the user OS,
and then suspend to disk with the reboot option. We do not
load the uApp image via kexec into memory, which causes
the suspend code in user OS kernel to initiate a regular re-
boot after suspend. We use GRUB to load the uApp loader
(from a separate disk partition as GRUB cannot read from a
squashfs partition), and continue to boot into the uApp OS.
For switch back, we use the regular reboot command, and
then initiate the resume of the user OS via GRUB. Results
are in the last two columns of Table 1. Both switching to
uApp and resume took much longer (nearly twice as long)
than the uApp switch. Thus, bypassing the BIOS and boot-
loader indeed saved us signiﬁcant amount of time.
7. RELATED WORK AND COMPARISON
There have been numerous publications on establishing
trust in computers via hardware support; for a summary,
see e.g., Parno et al. [24]. We discuss only few here which
are most relevant to our work.
Secure kiosk computing. To enable users to use their
own computing environment (e.g., a VM) on a public kiosk
computer, Garriss et al. [8] designed a protocol for estab-
lishing trust on the kiosk. Unicorn is not intended for kiosk
computing; technical diﬀerences with secure kiosk comput-
ing include the following. First, kiosk computing requires
the user to notice whether the trusted PSD successfully ver-
25iﬁes the kiosk before the user proceeds to use the kiosk.
In contrast, Unicorn relies on the PSD to make such deci-
sions on the user’s behalf. Second, kiosk computing uses
IMA [25] to measure the VMM/OS software and veriﬁes
only what is loaded up to the point of the attestation re-
quest. In addition, variances in loading order and software
execution can result in diﬀerent PCR values and the at-
testor must be aware of all valid PCR values that could be
returned in a quote response. Unicorn performs veriﬁcation
on the entire uApp image, which includes all software that
could be executed while using the uApp. Finally, to switch
from the untrusted to the trusted OS, the kiosk computer
is then rebooted (i.e., shutdown, run BIOS and bootloader,
late launch, run the OSLO secure loader [14], and boot into
OS/VMM). Since uApps short circuit the process by avoid-
ing the BIOS and bootloader, switching is nearly 10 times
faster with uApps.
Lockdown. Lockdown [35] is a small hypervisor that pro-
vides one environment for regular tasks and another for all
sensitive web transactions. Lockdown uses Advanced Con-
ﬁguration and Power Interface (ACPI) and AMD’s Nested
Page Table (NPT) features to partition system resources.
A trusted BIOS is required for installation and booting of
Lockdown. Lockdown runs at AMD SVM’s hypervisor mode
and OSs run in the guest mode. The trusted OS and appli-
cations are installed in separate disks after Lockdown is in
control. Lockdown restricts the list of Internet servers the
trusted environment can connect to, but since the trusted
environment can be changed, the list must be updated by
users as new applications are added. In contrast, uApps do
not change and adding a new uApp does not aﬀect the re-
strictions on any existing uApps. Also, remote servers in
Lockdown receive no guarantee about user environments.
Another diﬀerence is the way the systems switch between
trusted and untrusted environments. Lockdown maintains
both environments in memory at the same time and in-
terposes on hardware requests from both environments to
enforce partitioning. Switching between environments re-
quires ACPI operations and takes slightly longer than uApp
switching (42–46 seconds vs. 25.5 seconds). However, system
resources are ineﬃciently used by Lockdown, e.g., memory is
exclusively partitioned between trusted and untrusted envi-
ronments. The trusted environment also suﬀers signiﬁcant
performance degradation, with 15–55% CPU and memory
overhead, 3-6 seconds additional network latency, and four
times slower download speed. uApps have direct access to
all hardware and thus do not suﬀer any performance penalty.
Flicker & Bumpy. Bumpy [21] is designed to secure sensi-
tive user inputs (e.g., online passwords), by processing them
in a separate Flicker [20] module, which can be loaded on-
demand bypassing the untrusted user OS. Users must start
sensitive input with @@, and also verify that a Flicker ses-
sion has actually been initiated from the feedback received
(e.g., beeps) on a trusted PSD, and that the receiving URL
on the device is correct. For safe operation, users must also