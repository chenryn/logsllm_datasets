can effectively increase the complexity and variance of a
limited-size dataset. Moreover, we further study the dataset
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:12 UTC from IEEE Xplore.  Restrictions apply. 
150
1 commit b84c2cab55948a5ee70860779b2640913e3ee1ed
2 diff --git a/src/bits.c b/src/bits.c
3 index 014b04fe4..a3692bdc6 100644
4 --- a/src/bits.c
5 +++ b/src/bits.c
6 @@ -953,7 +953,7 @@ bit_write_UMC (Bit_Chain *dat,
BITCODE_UMC val)
if (byte[i] & 0x7f)
7
8
9
10 -
11 +
12
13
14
15 }
break;
if (byte[i] & 0x40)
if (byte[i] & 0x40 && i > 0)
i--;
byte[i] &= 0x7f;
for (j = 4; j >= i; j--)
Listing 1: An example of security patch for a stack
underﬂow vulnerability (CVE-2019-20912).
1 commit c3b3c274cf7911121f84746cd80a152455f7ec97
2 diff --git a/main.c b/main.c
3 index 6a3eee2eb..b8ad59018 100644
4 --- a/main.c
5 +++ b/main.c
6 @@ -575,5 +575,8 @@ finish:
7
8
9
10 +
11 +
12 +
13
14
15
16 }
if (getpid() == 1)
dbus_shutdown();
freeze();
return retval;
}
Listing 2: An example of non-security patch in systemd.
vulnerability CVE-2019-2091 that prevents stack underﬂow in
the function bit_write_UMC (as identiﬁed in Line 6) by
replacing the previous incomplete check (Line 10) with one
more sanity check for the local variable i (Line 11), which
is used as an index to access the array byte (Line 13). By
adding a check of pid, the non-security patch in Listing 2
only freezes the init process (Line 10-12) but exits all other
processes, avoiding a potential crash.
B. NVD
The National Vulnerability Database (NVD) [5] is the
largest publicly available source of vulnerability intelligence
maintained by the U.S. National Institute of Standards and
Technology (NIST). Besides synchronizing with the Common
Vulnerabilities and Exposures (CVE) system [2] where a CVE-
ID is assigned to each vulnerability, the NVD provides en-
hanced information such as patch availability, severity scores,
and impact ratings. For each CVE entry, the NVD provides
external reference URLs of advisories, solutions, tools, etc.
Among them, security patches for the current vulnerability
could be extracted from a hyperlink tagged with “patch” (if
any). By crawling such hyperlinks, it is possible to extract
security patches and even access the corresponding source
code repositories. However, due to the limited human power
supporting the NVD, the patch information may not be avail-
able or accurate, and some CVE entries in the NVD are not
provided with any links for the patch.
Since not all known vulnerabilities are reported to the CVE
or accepted by the CVE Numbering Authorities (CNAs) [22],
[32], [37], the security patches of those vulnerabilities cannot
be retrieved from the NVD. On the other side, it also means
that there exist a number of security patches in the wild that
can be used to enlarge the security patch dataset.
III. METHODOLOGY
Figure 1 shows the methodology of constructing the
PatchDB, which consists of three components, namely, NVD-
based patch dataset, wild-based patch dataset, and synthetic
patch dataset. First, we build an initial security patch dataset
by crawling the NVD entries that have corresponding patch
hyperlinks. Since the number of NVD security patches (around
4K) is not
large enough to train a robust classiﬁer (e.g.,
deep learning models), we develop a novel augmentation
approach named nearest
link search to help increase the
efﬁciency of discovering security patches from the wild (i.e.,
GitHub). Moreover, we propose a new oversampling method
to synthesize security patches at the source code level.
GitHub
commits
l
w
a
r
c
)
1
(
NVD-based
patches
n
o
i
t
a
t
n
e
m
g
u
a
)
2
(
Wild-based
patches
g
n
i
l
p
m
a
s
r
e
v
o
)
3
(
Synthetic
patches 
Fig. 1: PatchDB construction methodology.
A. Extracting Security Patches from the NVD
The ﬁrst step of constructing PatchDB is to collect and
screen the security patches that have already been indexed by
the NVD. As the largest publicly available source of vulner-
ability intelligence, the NVD provides pertinent hyperlinks of
corresponding patches for a portion of the CVE entries. We
focus on the software repositories hosted on GitHub, where
each patch (commit) is identiﬁed with a unique hash value.
We observe that the URLs of these patches are usually in
this form: https://github.com/{owner}/{repo}/commit/{hash}.
By downloading all these links with a sufﬁx .patch, we can
obtain thousands of security patches associated with CVE IDs.
We focus on patches of projects written in C/C++ that are the
languages with the highest number of vulnerabilities [34].
.sh,
.kconﬁg,
However, the patches of C/C++ projects may contain mod-
iﬁcations on ﬁles such as .changelog,
.phpt,
etc. After manually checking a random subset of them, we
ﬁnd most of these non-C/C++ ﬁles are documentations or
changes corresponding to modiﬁcations of C/C++ ﬁles (.c,
.cpp, .h, and .hpp) and they do not play an important role in
ﬁxing vulnerabilities. Therefore, we need to remove these non-
C/C++ parts from patches. In this way, we obtain a dataset of
4076 security patches from 313 GitHub repositories between
1999 and 2019, which is by far the largest security patches in
C/C++ collected from the NVD2.
2The 4K security patches collected by other work [20] contain multiple
types of programming languages and the dataset is not publicly available.
151
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:12 UTC from IEEE Xplore.  Restrictions apply. 
We also need to collect a dataset of non-security patches,
which is useful to develop and evaluate a machine learning
model to identify security patches. We ﬁrst download these
313 GitHub repositories whose patch information is available
in the NVD. Then we acquire all the commits with the com-
mand git log. However, we cannot assume all these commits
except the above 4076 security patches would be cleaned
non-security patches. Actually, after reviewing some random
subsets of those commits, we observe that around 6-10%
of them are security patches, which is consistent with some
previous studies [20], [22], [32]. Inspired by the existence of
those silent security patches (i.e., patches not reported to CVE)
in the wild, we consider commits on GitHub as a good source
to enlarge the security patches in the NVD-based dataset.
B. Augmenting Patch Dataset via Nearest Link Search
Though we ﬁnd 6-10% of patches in the wild are security
patches, it is still labor-intensive and lacks the efﬁciency to
manually screen out these security patches. To reduce the
search range of potential candidates, we develop a dataset
augmentation method to help ﬁnd the most likely security
patch candidates from the wild patches. The beneﬁt of our
method is twofold. First, we can enlarge the security patch
dataset. Second, we can clean the hidden security patches from
the non-security patch dataset.
Wild Patches
Security Patches
h
c
r
a
e
s
k
n
i
l
t
s
e
r
a
e
N
Wild Patches
Candidates
Security Patches
y
f
i
r
e
v
y
l
l
a
u
n
a
M
Wild Patches
SecP.
NonSecP.
Security Patches
Exit
Fig. 2: The overview of security patch dataset augmentation
(the candidates are selected from wild patches and would be
veriﬁed manually by the professional security researchers).
no
if (R > TH)
yes
Overview of Dataset Augmentation. Figure 2 shows our
dataset augmentation scheme, which consists of three steps:
candidate selection, manual veriﬁcation, and loop judgment.
First, we propose a nearest link search algorithm to better
select security patch candidates from the wild using the
features derived from already labeled security patches in our
NVD-based dataset. The algorithm selects the candidate set
that has the global minimal distance with the set of veriﬁed
security patches in the feature space. It
is based on one
observation that the closer a sample is to a veriﬁed security
patch sample, the more likely it is a security patch.
Second,
these candidates will be manually veriﬁed by
professional security researchers. Since the nearest link search
algorithm can narrow down the promising candidates to be
veriﬁed, the labor costs would be reduced dramatically.
Finally, we evaluate the proportion R of security patches
in the candidates and repeat the above procedures with the
enlarged security patch dataset if R is larger than a thresh-
old, where the proportion R implies ample security patches
TABLE I: List of features for nearest link search.
No.
1
2
3-6
7-10
11-14
15-18
19-22
23-26
27-30
31-34
35-38
39-42
43-46
47-48
49-51
52-54
55
56
57-58
59-60
Feature Descriptions
# changed lines
# hunks
# added/removed/total/net lines
# added/removed/total/net characters
# added/removed/total/net if statements
# added/removed/total/net loops
# added/removed/total/net function calls
# added/removed/total/net arithmetic operators
# added/removed/total/net relation operators
# added/removed/total/net logical operators
# added/removed/total/net bitwise operators
# added/removed/total/net memory operators
# added/removed/total/net variables
# total/net modiﬁed functions
mean/min/max Levenshtein distance within hunks†
mean/min/max Levenshtein distance within hunks(cid:2)
# same hunks†
# same hunks(cid:2)
# and % of affected ﬁles
# and % of affected functions
† Before token abstraction. (cid:2) After token abstraction.
remaining in the wild set. When R drops below a threshold,
we exit the dataset augmentation process.
Algorithm of Nearest Link Search. Now we detail the nearest
link search algorithm, which is the core of our method. Given a
set of security patches, the algorithm can ﬁnd an equal number
of candidates from the wild dataset in three steps: feature
space construction, weighted distance matrix calculation, and
nearest link optimization.
1) Feature Space Construction: The feature space is con-
structed based on the syntactic features extracted from the
source code of patches. These features, e.g., the conditional
statement amount and loop statement amount, can reveal the
differences between security patches and non-security patches.
Our hypothesis is that
the patches with similar syntactic
features tend to have similar properties and semantics.
Table I lists 60 types of features used in our feature
space construction. These features can be divided into three
types. Features 1-10 are basic patch features that indicate
the text-level changes. Features 11-56 indicate the changes in
the programming language level that are language-dependent.
Features 57-60 reveal the affected range by the patch. Since
the patch is not a complete program unit and contains both
pre-patched and post-patched code, we implement a parser
to extract these features using Python. For both the security
patches and wild patches,
the 60-dimensional features are
extracted to construct the feature space for further processing.
2) Weighted Distance Matrix: The similarity of the two
patches is represented as the distance of corresponding features
in the feature space. However, since the extracted features
have different scales in different dimensions, it is necessary
to normalize each dimension in features with an appropriate
weight. For the j-th feature in the i-th patch, we normalize
the feature aij as
ij = aij · wj = aij ·
(cid:2)
a
1
max|aj| ,
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:12 UTC from IEEE Xplore.  Restrictions apply. 
152
?
?
?
?
?
?
(2) Nearest link search
security patch
candidate
?
(3) Manual verification
non-security patch
(1) Initial state
wild patch (unlabeled)
Fig. 3: The nearest link search and candidate veriﬁcation.
where wj is the weight for the j-th feature, aj is the vector
that refers to the j-th features of all patches. The normalized
features would be in the range of −1 to 1 after the weighting
so that the distances in different dimensions can be comparable