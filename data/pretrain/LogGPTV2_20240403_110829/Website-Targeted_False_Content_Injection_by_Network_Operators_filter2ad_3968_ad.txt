4812
Suspected
injecting AS
number
17816
4134
4837
38182
38182
4134
6943
4812
Table 3: The autonomous system numbers in which the
injected web servers reside and in which the suspected
injecting entities reside
4. Identify the autonomous system the injecting hop
belongs to: given the IP address of the hop, we can
now identify the autonomous system to which it be-
longs in order to reveal the entity responsible for
injecting the packet. To this end we leveraged pub-
lic databases that hold current BGP advertisements:
this allows us to identify the autonomous system
that advertises the given IP address. BGP advertise-
ments for mapping of IP addresses to autonomous
systems are known to be more precise and up-to-
date than Internet route registries [23].
It should be noted that this procedure has the following
caveats:
1. The initial TTL value of the injected packet may not
be one of the common default values. In such cases,
this analysis can not be carried out. In particular,
based on the TTL values of the injected packet, we
conclude that this is indeed the case for the injec-
tions in the groups ’jiathis’, ’uyan’, ’mi-img’, and
’icourses’.
2. Not all routes on the Internet are symmetric. If the
path from the client to the server is not symmetric,
the analysis will produce an incorrect result. We
address this issue in the next subsection.
3. The implicit assumption of this procedure is that the
injecting machine resides on-path. Strictly speak-
ing, this need not be the case. An on-path machine
monitoring the trafﬁc can trigger the injection from
a remote machine. In such a case the forged packet
will travel on an entirely different path than the le-
gitimate packets.
In Table 3 we list the results of the above analysis.
For each injection group, we list the autonomous systems
AS number
17816, 4837
4134, 4812
38182
6943
Operator
China Unicom
China Telecom
Extreme Broadband (Malaysia)
Information Technology Systems (US)
Table 4: The operators for each suspected injecting au-
tonomous system
in which the destination sites reside and the autonomous
systems suspected of the injections. The table lists only
injection groups for which the analysis can be performed;
namely, the estimated number of hops the injected packet
traversed is not larger than 30 and not smaller than 3, and
it is also not larger than the path between the client and
server.
In all cases where the above analysis succeeded, it
indicated that the forged content was injected 2-5 hops
away from destination site. Since the injection groups
are largely independent we believe that this is a signal
that the assumptions we made throughput the above anal-
ysis are not far off. In all cases the injector is located in
the very same autonomous system where the destination
site resides. Indeed, this is the most reasonable location
for an injector to be in order to alter content for all web
users accessing the targeted site.
Table 4 lists for each suspected injecting autonomous
system the organization that operates it. It is worth not-
ing that two of the largest network operators in China
– China Unicom and China Telecom – are suspected of
practicing content injections. Moreover, the autonomous
systems of these operators originate injections of differ-
ent groups. This might imply that more than one injector
mechanism is deployed in these autonomous systems.
The operator of the suspected autonomous system for
the ’gpwa’ group is Information Technology Systems. In
this particular case, this is the organization that is respon-
sible for the content of the destination site for these injec-
tions – gpwa.org. Since there are strong indications that
the injections of this group are malicious (see discussion
in Section 5.1), we assume that the attacker compromised
a router in the suspected autonomous system.
Using a traceroute from the server-side
As noted above, a caveat of the above analysis is that we
used traceroutes from the client to the server while as-
suming this route is symmetric. This is a necessity since
we cannot execute a traceroute to the client from the ac-
tual server. To address this caveat we leveraged RIPE At-
las [26]. This is a global network comprised of thousands
of probes hosted throughout the Internet. Each probe can
USENIX Association  
25th USENIX Security Symposium  237
11
AS number
Injection groups
4812
4134
4808
tupian
szzhengan, server erased
uyan, icourses, jiathis
Table 5: Autonomous systems which host RIPE At-
las probes and the corresponding injection groups that
forged trafﬁc of web servers residing in those au-
tonomous systems
be instructed to execute a measurement out of a prede-
termined set that includes ping, DNS query, HTTP re-
quest and traceroute. RIPE Atlas hosts 6 probes in 3
autonomous systems that host destination sites the con-
tent of which was forged. The autonomous systems and
the corresponding injection groups that forged content
for destination sites residing in each autonomous system
are listed in Table 5.
For each of the 6 probes we executed a traceroute from
it to the edge network where the corresponding injection
events were identiﬁed. We then employed the procedure
we described above on these new traceroutes. We note
that using these traceroutes may still not be without er-
ror. The probes indeed reside in the autonomous systems
that host the destination site; however, we cannot guar-
antee that their route to the client is the same as the route
from the destination site. Speciﬁcally, the trafﬁc from the
probe may exit the autonomous system through a differ-
ent point than the trafﬁc originated from the site.
The traceroute from each of the 3 autonomous sys-
tems to the corresponding edge network were different
than the opposite routes from the edge networks to those
autonomous systems. Nonetheless, in all cases, a pair
of routes in opposite directions traversed the same au-
tonomous systems with the exception of one Tier-1 au-
tonomous system; namely, each route traversed a dif-
ferent Tier 1 operator (for example, the route between
the client and the server traversed Level 3’s AS while
the route in the opposite direction traversed Cogentco’s
AS). The other autonomous systems on the routes were
the same; this is why the outcome of the analysis with
these routes was the same as for the routes in the op-
posite direction. The analysis for the ’szzhengan’ and
’server erased’ injections yielded the same suspected au-
tonomous system – 4134, while the analysis for the ’tu-
pian’ injections yielded a different autonomous system
– 4134 instead of 4812 found by the previous analysis.
Nonetheless, these autonomous systems are siblings op-
erated by the same company – China Telecom.
The injecting groups that correspond to destination
sites residing in autonomous system 4808 – ’uyan’,
’icourses’, and ’jiathis’ – were set with an unknown ini-
tial TTL value (namely the estimated number of hops
was larger than 30 or smaller than 3); hence the analy-
sis cannot be performed on them.
6 Proposed Mitigation
The best mitigation against TCP injection attacks is sim-
ply to use HTTPS. Unfortunately, this is not always sub-
ject to the discretion of the user. Many web sites still
do not support HTTPS [5]. A user wishing to access a
website that does not support HTTPS must resort to the
unprotected HTTP. Moreover, about 17% of the Alexa
Top 500 websites still serve a login page over HTTP but
submit the users password over HTTPS [30]. This setup
allows an on-path entity to steal a user’s login creden-
tials by injecting a false login page. In this section we
present a client-side mitigation measure that monitors the
incoming HTTP trafﬁc and blocks injected forged TCP
segments, thereby defending the user even if he must use
HTTP.
A naive mitigation measure is to simply apply the pro-
cedure described in Algorithm 1 on the monitored trafﬁc
in order to identify packet races. Nonetheless, such an
approach means that every incoming packet must be de-
layed for 200msec. Such a delay is necessary in order to
make sure a given packet is not an injected packet forg-
ing a legitimate one. Only after 200msec have passed
with no race detected can we accept the packet. Such an
approach incurs noticeable delay on the incoming trafﬁc
and degrades the user’s browsing experience. This ap-
proach, however, by deﬁnition, ensures that all injected
packets will be identiﬁed and blocked. In Section 6.1 we
detail our experimental results with such an approach.
We use these results as a benchmark for the next mitiga-
tion approach.
An improved approach is to take advantage of the in-
sights we presented in Section 5.2, where we showed that
for the vast majority of the injected packets, the values
of the TTL and Identiﬁcation ﬁelds in the IP header do
not correspond to the respective values of the legitimate
packets of the session. This insight can be leveraged
to improve the naive mitigation measure such that only
packets with abnormal TTL or Identiﬁcation values will
be delayed for 200msec, and only for those packets will
we try to detect a race. This way only suspicious packets
are delayed.
Algorithm 2 in Appendix E details the improved miti-
gation algorithm. Note that this algorithm will be effec-
tive only if the forged packets exhibit anomalous TTL or
Identiﬁcation values as compared to the legitimate pack-
ets in the injected session. We note that it is possible
for an injector to inject a packet with values that will not
appear anomalous, as in most likelihood it can also in-
spect the trafﬁc sent by the web server. Anomalous TTL
238  25th USENIX Security Symposium 
USENIX Association
12
and identiﬁcation values have also been observed in the
censorship-related state-sponsored injections [8]. This
indicates that aligning the TTL and identiﬁcation values
to the legitimate values might not be trivial to implement.
Indeed, aligning the identiﬁcation value requires that in-
jector keep track of the identiﬁcation values of packets
sent by the web server for every potential session that
may be injected, well before the actual injection deci-
sion is made. This may require a substantial addition of
memory space and computational overhead.
If the in-
jector does align the TTL and identiﬁcation values, the
improved mitigation algorithm we propose will not be
effective and the naive approach must be used.
Algorithm
naive
improved
Load time
increase
120%
12%
False
Negative
0%
0.3%
Table 6: The performance of the two mitigation algo-
rithms.
In
a considerable increase in page load time – 120%.
contrast, the improved algorithm incurs a mere 12% in-
crease, while having a negligible false negative rate of
0.3%.
6.1 Experiments
7 Related Work
We now detail our experiments to evaluate the two mit-
igation algorithms – the naive and improved algorithms.
We evaluate the algorithms using two measures:
1. Web page load time increase – this measure shows
the increase of time it takes to load a web page as
compared to the case where no mitigation measure
is employed. This measures the extent to which the
algorithm degrades the user’s experience.
2. False negatives – this measure counts how many in-
jections are not identiﬁed. This measures the effec-
tiveness of the algorithm.
We evaluated the algorithms against two data sets:
1. Benign data set – this data set includes trafﬁc of
benign web browsing having no content injection.
We used the 200 most popular sites from Alexa’s
list [1]. From these sites we used the ones for which
majority of their objects are fetched using HTTP
(rather than HTTPS). There are 136 of these sites
that met this criterion.
2. Injected data set – This data set includes the injected
sessions we captured throughout our observations.
The two algorithms were evaluated on the benign data-
set to measure the web page load time increase. We
browsed each website using PhantomJS. We inspected
the incoming trafﬁc while leveraging the NFQUEUE tar-
get of Linux iptables [6]. We measured the load time
of each website 5 times and recorded the smallest load
time value to disregard intermittent network delays. We
compared these load times to the load times where no
mitigation algorithm is deployed.
The two algorithms were evaluated on the injected
data set to measure the false negative events, i.e., the
injections that were missed. Table 6 summarizes the
ﬁndings. It is evident that the naive algorithm imposes
The practice of Internet trafﬁc alteration has been studied
in several works [20, 34, 28, 39], all of which have em-
ployed the server-centric approach described in the In-
troduction.
In [20, 34] the authors deployed a website that directs
users to about 20 back-end servers that deliver a Java ap-
plet. The applet runs a series of tests which try to fetch
predetermined content. The analysis found many web
proxies of several categories, the most popular of which
are anti-virus software installed on the end clients, HTTP
caches and transcoders deployed by ISPs, and security
and censor proxies deployed by enterprises and coun-
tries. Ref. [34] identiﬁes two ISPs that employ HTTP
error monetization, and one that injects advertisements
into all HTTP connections.
In [28] the authors set up a web server that delivers
the same content from a handful of different domains.
The content includes a JavaScript code that runs when
the page is loaded in the client’s browser and reports any
detected changes to the web page.
It found that most
changes to the content were made indiscriminately re-
gardless of the originating domains. Most of the con-
tent modiﬁcations were due to software installed locally
on the end clients or due to security gateways deployed
at enterprises. Other modiﬁcations were due to ISPs
that compressed content delivered to their users. Addi-
tionally, 4 ISPs and a company that provides free wire-
less service were identiﬁed as injecting advertisements to
web pages their customers visit.
In [39] the authors leveraged the online advertising in-
frastructure of several ad networks to spread a specially
crafted Flash-based advertisement that runs a JavaScript
code and retrieves a preconﬁgured measurement page
while reporting back any change made to it. Almost 1000
page alteration events were detected; however, the por-
tion of events for which ISPs are responsible is unknown.
The authors of [38] investigate inﬂight modiﬁcations
of trafﬁc from an unnamed popular Internet search ser-
USENIX Association  
25th USENIX Security Symposium  239
13
vice. In contrast to the abovementioned works, here the
changes were detected by the IP address the client con-
tacted, which was different than the addresses owned by
the search service. This work found 9 ISPs that proxy
their customers’ trafﬁc destined to the search service.
The redirection to the proxy is done by resolving the
DNS name of the service to the IP address of the proxy.
A considerable body of work deals with censoring
countries and the mechanisms they use to censor Internet
trafﬁc. The authors of [33] have categorized the mecha-
nisms of the censorship employed by different countries.
It is noted that China and Thailand use out-of-band de-
vices to send forged packets, which are usually HTTP
302 redirection, or a TCP reset.
In [35] it was shown that several ISPs enforce usage
restrictions of their networks by actively terminating un-
desirable TCP connections. The authors note that this is
done by sending forged TCP resets out-of-band. They
then leverage this insight – much as we do in the cur-
rent work – to identify these forged resets. Nonetheless,
the detection conditions are different than the ones we
used since the forged TCP reset has no payload to spoof;
hence, the detection conditions mainly revolve around
the arrival time and sequence number of the reset seg-
ment as compared to those of other segments in the con-
nection.
The authors of [13] discuss attacks that employ out-
of-band injection of forged DNS responses. To mitigate
the effects of such attacks it is suggested that the resolver
wait after receiving an initial reply to allow a subsequent
legitimate reply to also arrive. In particular, the resolver
should wait for another reply if the ﬁrst reply arrived
sooner than half of the expected RTT since the query was
issued or if the TTL ﬁeld in the IP header does not have
the expected value. If indeed two replies eventually ar-
rive, this indicates an attack.
8 Conclusions
In this work we reveal a new side to the practice of false
content injection on the Internet. Previously, discussion
on this practice focused on edge ISPs that limit their mis-
deeds to the trafﬁc of their customers. However, we dis-
covered that some network operators inject false content
to the trafﬁc of predetermined websites, regardless of the
users that visit them. Our work leverages the observa-
tion that rogue content injection is done out-of-band. It
can hence be identiﬁed while monitoring an edge net-
work in which the victim clients reside. Our analysis is
based on extensive monitoring of a large amount of In-
ternet trafﬁc. We reveal 14 groups of content injections
that primarily aim to impose advertisements or even ma-
liciously compromise the client. Most of the ﬁnancially-
motivated false content injection we observed originated
form China. Our analysis found indications that nu-
merous injections originated from networks operated by
China Telecom and China Unicom – two of the largest
network operators in Asia.
Acknowledgments
We would like to thank Hank Nussbacher and Eli Beker,
whose cooperation made this research possible. We also
thank Erik Hjelmvik for his efforts to independently re-
produce the injections.
References
[1] Alexa. http://www.alexa.com/.
[2] BotScout. http://botscout.com/.
[3] netsniff-ng toolkit. http://netsniff-ng.org.
[4] Representative captures of
http:
//www.cs.technion.ac.il/~gnakibly/TCPInjections/
samples.zip.
the injected sessions.
[5] SSL/TLS analysis of
sites.
post/TLS_Survey.
top 1,000,000 web-
https://jve.linuxwall.info/blog/index.php?
the Internet’s
[6] Using NFQUEUE and
libnetﬁlter queue.
https:
//home.regit.org/netfilter-en/using-nfqueue-
and-libnetfilter_queue/.
[7] ANDERSON, N. How a banner ad for H&R Block appeared on
apple.com. http://arstechnica.com/tech-policy/2013/
04/how-a-banner-ad-for-hs-ok/.
[8] ANONYMOUS. Towards a comprehensive picture of the great
ﬁrewalls dns censorship anonymous. In 4th USENIX Workshop
on Free and Open Communications on the Internet (FOCI 14)
(2014).
[9] ARYAN, S., ARYAN, H., AND HALDERMAN, J. A. Internet cen-