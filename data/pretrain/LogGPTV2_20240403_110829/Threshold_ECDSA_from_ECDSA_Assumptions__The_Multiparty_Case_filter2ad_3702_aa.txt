title:Threshold ECDSA from ECDSA Assumptions: The Multiparty Case
author:Jack Doerner and
Yashvanth Kondi and
Eysa Lee and
Abhi Shelat
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Threshold ECDSA from ECDSA Assumptions:
The Multiparty Case
Jack Doerner
PI:EMAIL
Northeastern University
Yashvanth Kondi
PI:EMAIL
Northeastern University
Eysa Lee
abhi shelat
PI:EMAIL
Northeastern University
PI:EMAIL
Northeastern University
Abstract—Cryptocurrency applications have spurred a resur-
gence of interest in the computation of ECDSA signatures using
threshold protocols—that is, protocols in which the signing key
is secret-shared among n parties, of which any subset of size
t must interact in order to compute a signature. Among the
resulting works to date, that of Doerner et al. [1] requires the
most natural assumptions while also achieving the best practical
signing speed. It is, however, limited to the setting in which
the threshold is two. We propose an extension of their scheme
to arbitrary thresholds, and prove it secure against a malicious
adversary corrupting up to one party less than the threshold
under only the Computational Difﬁe-Hellman assumption in the
Random Oracle model, an assumption strictly weaker than those
under which ECDSA is proven.
Whereas the best current schemes for threshold-two ECDSA
signing use a Difﬁe-Hellman Key Exchange to calculate each
signature’s nonce, a direct adaptation of this technique to a
larger threshold t would incur a round count linear in t; thus we
abandon it in favor of a new mechanism that yields a protocol
requiring log (t)+6 rounds in total. We design a new consistency
check, similar in spirit to that of Doerner et al., but suitable for an
arbitrary number of participants, and we optimize the underlying
two-party multiplication protocol on which our scheme is based,
reducing its concrete communication and computation costs.
We implement our scheme and evaluate it among groups of up
to 256 of co-located and 128 geographically-distributed parties,
and among small groups of embedded devices. We ﬁnd that in
the LAN setting, our scheme outperforms all prior works by
orders of magnitude, and that it is efﬁcient enough for use even
on smartphones or hardware tokens. In the WAN setting we
ﬁnd that, despite its logarithmic round count, our protocol out-
performs the best constant-round protocols in realistic scenarios.
I. INTRODUCTION
Threshold Digital Signature Schemes [2] allow a group of
individuals to delegate their joint authority to sign a message
to any subcommittee among themselves that is larger than a
certain, predetermined size. Speciﬁcally, a t-of-n threshold
signature scheme is a set of protocols that allow n parties to
jointly generate a single public key, along with n private shares
of a joint secret key sk, and then securely sign messages if and
only if t of those parties participate in the signing operation.
In addition to the standard unforgeability properties required
of all signature schemes, threshold schemes must satisfy the
properties of privacy against t − 1 malicious participants
with respect to the secret key shares of honest parties, and
correctness against t − 1 malicious participants with respect to
signature output. That is, no group of t − 1 colluding parties
should be able to recover the secret key, even by interacting
with additional honest parties, nor should they be able to trick
an honest party into signing a message unwillingly. Threshold
signature schemes are thus best modeled as a special case of
secure multiparty computation (MPC).
The Elliptic Curve Digital Signature Algorithm (ECDSA)
is a standardized [3]–[5] derivative of the DSA scheme of
David Kravitz [6], which improves upon the efﬁciency of
its forebear by replacing arithmetic modulo a prime with
operations over an elliptic curve. It is widely deployed in
various web-security technologies such as DNSSec and TLS,
in various authentication protocols, in binary signing, and
in crypocurrencies, including Bitcoin [7] and Ethereum [8].
Although ECDSA is in widespread use, designing threshold
signing protocols for ECDSA has been challenging due to the
unusual structure of the signing algorithm: in each signature,
a nonce k, its multiplicative inverse 1/k, and the product
sk/k (where sk is the secret key) all appear simultaneously.
Computing these values efﬁciently in the multiparty context is
the primary difﬁculty that threshold schemes must address.
MacKenzie and Reiter [9] constructed a 2-of-2 ECDSA
protocol using multiplicative sharings of k and sk, which
allowed shares of sk/k and 1/k to be computed via local
operations, but their protocol required a mechanism to verify
that the shares have been computed correctly. For this, they em-
ployed additively homomorphic encryption. Gennaro et al. [10]
extended this technique, introducing a six-round protocol for
general t-of-n signing, and Boneh et al. [11] subsequently
optimized their extension in terms of computational efﬁciency,
and reduced the round count to four. Meanwhile Lindell [12]
introduced optimizations in the 2-of-2 setting, such that key-
generation and signing required only 2.4 seconds and 37
milliseconds in practice, respectively. Unfortunately, these
schemes require expensive zero-knowledge proofs, as well
as the use of Paillier Encryption [13], which leads both to
poor performance and to reliance upon assumptions such as
the Decisional Composite Residuosity Assumption (and a new
assumption about the Paillier cryptosystem, in the case of
Lindell’s protocol) that are foreign to the mathematics on
which ECDSA is based.
Doerner et al. [1] propose an alternative solution for 2-of-
n threshold key generation and signing: while their protocol
retains the multiplicative sharings of prior approaches, they
forgo operating on Paillier ciphertexts. Instead, they construct a
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:43)(cid:66)(cid:68)(cid:76)(cid:1)(cid:37)(cid:80)(cid:70)(cid:83)(cid:79)(cid:70)(cid:83)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:19)(cid:21)
(cid:18)(cid:17)(cid:22)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
new, hardened variant of Gilboa’s multiplication-by-oblivious-
transfer technique [14], by which their protocol converts
multiplicative shares into additive shares, and thereby produces
additive shares of the ﬁnal ECDSA signature. Security against
malicious adversaries is achieved via a novel consistency
check that leverages relationships among various elements
of an ECDSA signature to ensure that the multipliers receive
consistent inputs. Their scheme requires only two rounds and
outperforms prior schemes by one to two orders of magnitude
in terms of computational efﬁciency, such that signatures can be
produced in under four milliseconds, and key generation for two
parties can be completed in under 45 milliseconds. Moreover,
their scheme was proven secure using only the Computational
Difﬁe-Hellman Assumption [15], an assumption “native” to
elliptic curves and implied by the Generic Group Model [16]
(in which ECDSA is proven secure [17]), and the Random
Oracle Model.
While the 2-of-n key-generation protocol of Doerner et
al. can be generalized to arbitrary thresholds, their signing
scheme is in a few respects inherently limited to two parties.
As with prior two-party schemes, it uses a Difﬁe-Hellman
Key Exchange [15] to calculate the signature’s instance key
R = k·G (where G is the elliptic curve group generator), given
a multiplicative sharing of k. With a threshold larger than two,
the long-standing open problem of multiparty key exchange is
implicated. A direct extension of the Difﬁe-Hellman method
to t parties would require t − 1 rounds, and, though key
exchange can be achieved in a sublinear number of rounds
via indistinguishability obfuscation [18] in the general case, or
bilinear pairings [19] when t = 3, neither of these methods
results in a practically-efﬁcient protocol with ECDSA-native
assumptions. Additionally, the consistency check that ensures
security against malicious adversaries is a decidedly two-party
construction: it relies upon the asymmetrical roles of the parties,
and integrates proof-wise with the aforementioned Difﬁe-
Hellman Exchange. Furthermore, we note that the scheme
of Doerner et al. realizes a nonstandard, two-party speciﬁc
functionality. Though they prove in the Generic Group Model
that
this functionality confers no additional power to an
adversary, it does allow one party to bias the distribution
of the instance key to a negligible degree, which gives that
party an undesirable subliminal channel [20].
In this work, we describe an extension of the protocols of
Doerner et al. to arbitrary thresholds. We formally deﬁne a new
multiparty functionality, replace the key exchange component
with an alternative based on multiparty multiplication, develop a
new consistency check, and optimize the underlying primitives
for the new setting and protocol structure. We implement our
protocol and test it with a large number of parties, showing
in particular that 256 parties can jointly sign in about half a
second over LAN, and 128 parties require about four seconds
to sign when spread around the world.
A. Our Techniques
Recall that an elliptic curve is deﬁned by the tuple (G, G, q),
where G is the group of order q of points on the curve, and
G is the generator for that group. An ECDSA Signature on a
message m under the secret key sk comprises a pair (sig, rx)
of integers in Zq such that
H(m) + sk · rx
sig =
k
where k is a uniform element from Zq and rx is the x-
coordinate of the elliptic curve point R = k · G. We frame our
task as the construction of a multiparty computation at the end
of which participating parties obtain additive shares of such
a signature, having supplied secret shares of sk as input. We
additionally require a protocol for generating shares of sk. As
this protocol will also perform one-time initialization for many
subsequent signatures, we refer to it as the setup protocol.
Our setup protocol is a natural extension of Doerner et
al. [1], requiring only minor changes to ensure security
against a dishonest majority of participants. When it completes
successfully, each of the n participating parties receives a
point on a (t − 1)-degree polynomial. The y-intercept of
this polynomial is the secret key sk, as per Shamir’s secret
sharing scheme [21]. This allows any group of t parties to
obtain an additive sharing of sk using the appropriate Lagrange
coefﬁcients. This additive sharing is the input to our signing
protocol. Our signing protocol, however, diverges from that
work and can be understood in terms of four logical phases.
1) Instance Key Multiplication. Once a group of parties P
(where |P| = t) have agreed to sign a message, each
party Pi ∈ P samples a multiplicative share ki; these
shares jointly deﬁne the common instance key k. Using
a t-party multiplication protocol, the parties obtain both
an additive sharing of k and a multiplicatively-padded
additive sharing of 1/k.
2) Secret Key Multiplication. As the parties now have additive
sharings of sk and 1/k, a GMW-style [22] multiplication
protocol can be used to obtain an additive sharing of sk/k.
3) Consistency Check. The parties compute R = k · G and
verify that consistent and correct inputs were used in the
previous phases. Each party broadcasts a set of values
that sum to predictable targets if and only if all parties
have used inputs in the Secret Key Multiplication phase
that are consistent with those used in the Instance Key
Multiplication phase. This consistency check is similar
in form and purpose to the consistency check employed
by Doerner et al., but it operates in a broadcast fashion
and enforces additional relationships required due to
differences between the previous phases of our protocol
and their analogues in Doerner et al.’s scheme.
4) Signing. Once the consistency of all inputs has been
checked, each party i in the set of participants P is
convinced that it holds vi, wi, and R such that for some
value k,(cid:2)
i∈P
(cid:2)
i∈P
vi =
1
k
and
wi =
sk
k
and R = k · G
The parties locally compute their shares of the signature
..= vi · H(m) + wi · rx
sigi
(cid:18)(cid:17)(cid:22)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:34 UTC from IEEE Xplore.  Restrictions apply. 
and broadcast them. The signature is then reconstructed
(cid:2)
sig ..=
sigi
i∈P
and veriﬁed using the standard veriﬁcation algorithm.
Our signing protocol is therefore essentially composed of
three maliciously secure t-party multipliers, augmented by a
check message to enforce consistency of inputs. These multi-
pliers come in two ﬂavors: one that converts a multiplicative
sharing into an additive sharing, and a GMW-style multiplier,
which produces an additive sharing of the product of two
additive sharings. We realize both varieties of multiplier by
evaluating a two-party multiplication protocol between each
pair of parties. The asymptotic round count of the overall
protocol is determined by the fact that data dependencies in
the conversion process between multiplicative and additive
shares require these two-party multiplication protocols to be
evaluated log(t) sequential groups.
Our two-party multiplier is based upon Oblivious Transfer
(OT) and derived from the two-party multiplication protocol of
Doerner et al. [1], who were inspired in turn by the semi-honest
multiplication protocol of Gilboa [14], but we improve upon the
performance of their protocol in terms of both communication
and computation. The protocol of Doerner et al. speciﬁes
that one of the two parties encodes its input using a high-
entropy encoding scheme, and the length of this encoded input
determines the number of OT instances required, which in
turn strongly determines the performance of the multiplication
protocol as a whole. On the other hand, our new protocol
speciﬁes that both parties choose random inputs, and later send
correction messages to adjust their output values as necessary.
Allowing for encodings only of random values rather than
requiring the ability to encode speciﬁc inputs simpliﬁes the
encoding scheme considerably and reduces the number of OT
instances by an amount proportional to the ECDSA security
parameter, or about 40% in practice. This improvement comes
at the cost of one additional round in the general case, but
if the parties’ inputs are guaranteed to be unknown to the
adversary during the evaluation of the protocol (as they are
in our case), then the round count need not increase, and in
the context of our ECDSA signing scheme, our new multiplier
actually reduces the overall round count relative to a naïve
composition of the multiplication protocol of Doerner et al.
B. Contributions
1) We present a t-of-n threshold ECDSA signing protocol
that requires log(t) + 6 rounds and prove it secure
against a malicious adversary who statically corrupts t− 1
participants using only the Computational Difﬁe-Hellman
Assumption. In addition we modify the setup protocol of
Doerner et al. [1] and prove it secure in the same setting.
2) We improve upon the two-party multiplication protocol
of Doerner et al., achieving a concrete performance gain
of roughly 40%. In our protocol, a randomized Gilboa-
style multiplier generates an unauthenticated multiplication
triple, and the output shares are later adjusted at the cost
of communicating a single ﬁeld element for each party.
Our protocol also supports batched multiplications, with a
reduction in communication relative to simple repetition.
3) We describe a folkloric technique for the composition of
two-party multipliers to form a t-party multiplier requiring
log(t) + 2 rounds, or log(t) + 1 in some circumstances.
4) We provide an implementation of our protocol in the Rust
language, and benchmark it on commodity server-class
hardware in both the WAN and LAN settings, as well as
on embedded devices. In the LAN setting, we evaluate
our protocol with up to 256 parties. In the WAN setting,
we evaluate with 128 parties spread across 16 datacenters.
With respect to signing, our scheme outperforms all prior
work in the LAN setting by a factor of 40 or more, and
it is competitive in the WAN setting in spite of its round
count. Though no prior works report the concrete setup
performance of an arbitrary-threshold ECDSA scheme,
we conjecture that ours improves dramatically upon them.
C. Organization
We establish the notation and building blocks for our
protocols in Section II. We describe our improved protocol
for two-party multiplication in Section III, which we use to
construct t-party multiplication in Section IV. We specify our
t-of-n threshold ECDSA protocol in Section V. We analyze
the cost of this protocol in Section VI and provide details of
our implementation and its performance in Section VII. Finally,
in the full version of this paper, we prove our protocols secure.
II. PRELIMINARIES AND DEFINITIONS
A. Notation
Throughout this paper, we use (G, G, q) to represent the
elliptic curve over which signatures are calculated, where G
is the group of curve points, G the curve generator, and q the
order of the curve. Curve points are represented in |q| = κ
bits, which is also the curve’s security parameter, and we
use s to represent the statistical security parameter. Curve
points are denoted with capitalized variables and scalars with
lowercase. Vectors are given in bold and indexed by subscripts;
thus xi is the ith element of the vector x, which is distinct
from the scalar variable x. We use = for equality, ..= for
assignment, ← for sampling from a distribution, and
c≡ for
computational indistinguishability. We make use of a Random
Oracle H x(y) : {0, 1}∗ (cid:5)→ Zx
q with its output length varying