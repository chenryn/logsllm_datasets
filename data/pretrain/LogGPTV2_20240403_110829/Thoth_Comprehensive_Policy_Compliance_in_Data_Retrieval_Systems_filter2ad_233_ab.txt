cation policies, as we illustrate next.
Example (Index policy)
In the last example, we dis-
cussed conﬁdentiality policies that reﬂect data owners’
privacy choices. For the retrieval system to do its job,
however, the input data policies must allow some de-
classiﬁcation. Without it, the search engine, which con-
sults an index computed over the entire corpus, including
the private data of several individuals, would not be al-
lowed to produce any readable output. We rely on the
policy language’s novel ability to refer to a conduit’s
(meta-)data to allow the selective, typed declassiﬁcation
of search results. The policy can be implemented by
adding the following declassify rule to all searchable in-
put data:
declassify :- isAsRestrictive(read,
this
.read) until
ONLY_CND_IDS
This policy stipulates that data derived from Alice’s data
can be written into conduits whose read rule is at least
.read),
as restrictive as Alice’s (which is bound to this
until it is written into a conduit which satisﬁes the condi-
tion ONLY_CND_IDS. This macro stipulates that only
a list of valid conduit ids has been written. The macro
expands to
cCurrLenIs(CurrLen) ∧ cNewLenIs(NewLen) ∧
each in(this,
NewLen) says(CndId)
,
CurrLen
{cIdExists(CndId)}
and permits the declassiﬁcation of a list of proper conduit
ids. A conduit id is a unique identiﬁer for a conduit (con-
duit ids are deﬁned in Section 3). The predicate “each
in () says () {}” iterates over the sequence of tuples in
the newly written data and checks that each is a valid
conduit id. By including this declassiﬁcation rule in her
data item’s policy, Alice allows the search engine to in-
dex her item and include it in search results. To view
the contents, of course, a querier still has to satisfy each
conduit’s conﬁdentiality policy.2
So far, we have assumed that the conduit ids (i.e., the
names of indexed ﬁles) are not themselves conﬁdential.
If the conduit ids are themselves conﬁdential, then the
2Our declassiﬁcation policies can be intuitively viewed as state ma-
chines whose states are access policies and whose transitions are events
in the data ﬂow. For instance, the declassiﬁcation policy just described
is a two state machine, whose initial state has a read policy as restrictive
as Alice’s, and whose second state allows read access to everyone. The
transition from the ﬁrst to the second state is allowed when data passes
through a conduit that satisﬁes ONLY_CND_IDS. This state-machine
view of our policies is universal because it is well known that all LTL
formulas can be represented as Büchi automata.
above declassify rule is insufﬁcient since it stipulates
no restriction on policies after ONLY_CND_IDS holds.
Thus, a more restrictive declassify rule is needed. Ide-
ally, we want that the read and declassify rules of the
conduit that contains the list of conduit ids be at least as
restrictive as the read and declassify rules of all conduits
in the list. This can be accomplished by the following
replacement for ONLY_CND_IDS.
CurrLen
cCurrLenIs(CurrLen) ∧ cNewLenIs(NewLen) ∧
each in(this,
NewLen) willsay(CndId)
{cIdExists(CndId) ∧ hasPol(CndId
isAsRestrictive(read,
isAsRestrictive(declassify,
.declassify)}
.read) ∧
P) ∧
P
P
,
,
,
P
binds
policy
P)
CndId,
predicate
of
isAsRestrictive(read,
hasPol(CndId
the
conduit
to
The
the
the
and
predicates
isAsRestrictive(declassify,
that
the read and declassify rules of the search results are
at least as restrictive as those of CndId. We call this
modiﬁed macro ONLY_CND_IDS+.
P
.declassify)
enforce
.read)
and
P
Other data retrieval policies
We brieﬂy describe several other policies relevant to data
retrieval systems that we have represented in our policy
language and implemented in our prototype. For the for-
mal encodings of these policies, see Appendix A.
Data analytics Many retrieval systems transform logs
of user activity into a user preferences vector, which is
used for targeting ads, computing user proﬁles, and pro-
viding recommendations. Raw logs of user clicks and
queries are typically private, so a proﬁle vector derived
from them cannot be used for any of these purposes with-
out a declassiﬁcation. A policy that allows typed declas-
siﬁcation into a vector of a ﬁxed size can be attached to
raw user logs to ensure that the raw logs cannot be leaked
from the system, but that the proﬁle vector can be used
for the above-mentioned purposes.
Provider policies The provider may need to censor
certain documents when a query arrives from a partic-
ular country. For this purpose, the system uses a map of
IP address preﬁxes to countries. Separately, the provider
maintains a per-country blacklist, containing a list of
censored conduit ids. The censorship policy takes the
form of a common declassiﬁcation rule on source ﬁles.
The rule requires that, at a conduit connecting to a client,
the client’s IP preﬁx is looked up in the preﬁx map, and
the corresponding blacklist is checked to see if any of
the search results are censored. Both the preﬁx map and
the blacklist are maintained in sorted order for efﬁcient
lookup. The sort order is enforced by an integrity policy
on the conduits.
A second common provider policy allows employees
to access client’s private data for troubleshooting pur-
640  25th USENIX Security Symposium 
USENIX Association
Figure 1: Thoth architecture
poses, as long as such accesses are logged for auditing. A
mandatory access logging (MAL) policy can be added for
this purpose. The policy allows accesses by authorized
employees, if and only if an entry exists in a separate log
ﬁle, which states a signature by the employee, the con-
duit being accessed, and a timestamp. The log ﬁle itself
has an integrity policy that allows appends only, thus en-
suring that an entry cannot be removed or overwritten.
Finally, data sources must consent to provider access by
allowing declassiﬁcation into a conduit readable by au-
thorized employees subject to MAL.
3 Thoth architecture and design
3.1 Overview
Figure 1 depicts the Thoth architecture. At each par-
ticipating node, Thoth comprises a kernel module that
intercepts I/O, a trusted reference monitor process that
maintains per-task taint sets3 and evaluates policies, a
persistent store for metadata and transaction log, and a
persistent policy store. Each node tracks taint and en-
forces policies independently of other nodes. The policy
store is accessible exclusively by the reference monitors
and provides a consistent view of all policies. This can
be attained by using either central storage for policies or
a consensus protocol like Paxos [29].
Figure 2 shows the data ﬂow model of a Thoth-
protected system. An application consists of a set of
tasks (i.e., processes) that execute on one or more nodes.
Data ﬂows among the tasks via conduits. A ﬁle, named
pipe or a tuple in a key-value store is a conduit. A net-
work connection or a named pipe is a pair of conduits,
one for each direction of data trafﬁc. Thoth identiﬁes
each conduit with a unique numeric identiﬁer, called the
conduit id. The conduit id is the hash of the path name in
case of a ﬁle or named pipe, the hash of the 5-tuple (cid:31)srcIP,
srcPort, protocol, destIP, destPort(cid:30) in case of a network
connection, or the key in case of a key-value tuple. Any
conduit may have an associated policy.4
The core of the application system is a set of CONFINED
tasks within Thoth’s conﬁnement boundary. The sys-
tem interacts with the outside world via conduits (typ-
3A task’s taint set is the set of policies of conduits it has read.
4If a ﬁle has multiple hard links, each of its path names can be
associated with a different policy. When a path name is used to access
the ﬁle, that path name’s policies are checked.
ically network connections) to external, UNCONFINED
tasks. UNCONFINED tasks represent external users or com-
ponents. Neither type of task is trusted by Thoth, al-
though an UNCONFINED task may represent a user and may
possess the user’s authentication credentials.
Policies on inbound and outbound conduits that cross
the conﬁnement boundary represent the ingress and
egress policies, respectively. The read and declassiﬁca-
tion rules of an ingress policy control how data can be
used and disseminated by the system whereas the update
rule of an ingress policy determines who may feed data
into the system. The read rule of an egress policy deﬁnes
who outside the system may read the output data.
3.2 Threat model
The Thoth kernel module and reference monitor, as well
as the Linux system and policy store they depend on, are
trusted. Active attacks on these components are out of
scope. We assume that correct policies are installed on
ingress and egress conduits.
In our current prototype,
storage systems that hold application data are assumed to
be trusted. This assumption can be relaxed by encrypting
and checksumming application data in the Thoth kernel
module.
Thoth makes no assumptions about the nature of bugs
and misconﬁgurations in application components, the
type of errors committed by unprivileged operators, or
errors in policies on internal conduits. Subject to this
threat model, Thoth provably enforces all ingress poli-
cies. In information ﬂow control terms, Thoth can con-
trol both explicit and implicit ﬂows, but leaks due to
covert and side-channels are out of scope.
Justiﬁcation Trusting the Thoth kernel module, ref-
erence monitor, and the Linux system they depend on
is reasonable in practice because (i) reputable providers
will install security patches on the OS and Thoth compo-
nents, and correct policies; (ii) OS and Thoth are main-
tained by a small team of experts and are more stable than
applications; thus, an attacker will likely ﬁnd it more dif-
ﬁcult to ﬁnd a vulnerability in the OS or Thoth than in a
rapidly evolving application with a large attack surface.
Typed declassiﬁcation policies admit limited informa-
tion ﬂows, which can be exploited by malicious appli-
cations covertly. For instance, malware injected into a
search engine can encode private information in the set
of conduit ids it produces, if the conduits in the set them-
selves are public. This channel is out of scope. In prac-
tice, such attacks require signiﬁcant sophistication. A
successful attack must inject code strategically into the
data ﬂow before a declassiﬁcation point and encode pri-
vate data on a policy-compliant ﬂow.
On the other hand, Thoth prevents the large class of
practical attacks that involve direct ﬂows to unauthorized
parties, and accidental policy violations due to applica-
USENIX Association  
25th USENIX Security Symposium  641
Question: Should a conduit read or write be allowed?
Inputs:
t, the task reading or writing the conduit
f, the conduit being read or written
op, the operation being performed (read or write)
Output: Allow or deny the access
Side-effects: May update the taint set of t
1 if t is UNCONFINED:
2
3
4
5
if op is read:
Check f’s read rule.
if op is write:
Check f’s update rule.
6 if t is CONFINED:
7
8
9
10
11
12
if op is read:
Add f’s policy to t’s taint set.
if op is write:
// Enforce declassiﬁcation policies of t’s taint set
for each declassiﬁcation rule (c until c’) in t’s taint set:
Check that EITHER c’ holds OR (c holds AND
f’s declassiﬁcation policy implies (c until c’)).
Figure 3: Thoth policy enforcement algorithm
The CIs for ﬁles and named pipes associate a policy
with the unique pathname of a ﬁle or pipe. The socket CI
associates a policy with the network connection’s 5-tuple
(cid:31)srcIP, srcPort, protocol, destIP, destPort(cid:30). The 5-tuple
may be underspeciﬁed. For instance, the policy associ-
ated with (cid:31)?, ?, ?, destIP, destPort(cid:30) applies to any network
connection with the speciﬁed destination IP address and
port. Both ends of a network connection have the same
policy. The KV CI associates a policy with a tuple’s key.
The KV CI can automatically derive policies from pol-
icy templates that cover a subspace of keys (e.g., all keys
with preﬁx #user_pro f ile). It can also replace template
variables with metadata, e.g., the time at which the key
was created.
Policy enforcement algorithm Figure 3 summarizes
the abstract checks that Thoth makes when it intercepts
a conduit access. If the calling task is UNCONFINED, then
Thoth evaluates the read or update policy of the conduit
(lines 1–5). If the calling task is CONFINED and the oper-
ation is a read, then Thoth adds the policy of the conduit
being read to the taint set of the calling task. No policy
check is performed in this case (lines 6–8). To reduce
the size of a CONFINED task’s taint set, our prototype per-
forms taint compression when possible: A policy is not
added if the taint set already includes an equally or more
restrictive policy.
When a CONFINED task t writes a conduit f, there is a
potential data ﬂow from every conduit that t has read in
the past to f. Hence, all declassiﬁcation rules in t’s taint
set are enforced (lines 11–12). Suppose (c until c’) is a
declassiﬁcation rule in t’s taint set. Since this rule means
Figure 2: Thoth data ﬂow
tion bugs, misconﬁgurations, and errors by unprivileged
operators. We demonstrate this in Section 6.3 where a
Thoth compliant search engine is able to enforce data
policies, preventing (real and synthetic) bugs and mis-
conﬁgurations from leaking information.
3.3 Data ﬂow tracking and enforcement
Tracking data ﬂow Thoth tracks data ﬂows coarsely
at the task-level. CONFINED and UNCONFINED tasks are
subject to different policy checks. A CONFINED task may
read any conduit, irrespective of the conduit’s read rule,
but Thoth enforces each such conduit’s declassify rule
when the task writes to other conduits. To do this, Thoth
maintains the declassify rules of conduits read by each
CONFINED task in the task’s metadata (these rules consti-
tute the taint set of the task).
UNCONFINED tasks form the ingress and egress points
for Thoth’s ﬂow tracking; they are subject to access con-
trol checks, not tainting. An UNCONFINED task may read
from (write to) a conduit only if the conduit’s read (up-
date) rule is satisﬁed. For example, to read Alice’s pri-
vate data, an UNCONFINED task must authenticate with Al-
ice’s credentials. Conduits without policies can be read
and written by all tasks freely.
In summary, Thoth tracks data ﬂows across CONFINED
tasks coarsely, and enforces declassiﬁcation policies on
these ﬂows. At the ingress and egress tasks (UNCONFINED
tasks), Thoth imposes access control through the read
and update rules. Every new task starts UNCONFINED.
The task may transition to the CONFINED state through
a designated Thoth API call. The reverse transition is
disallowed to prevent a task from reading private data
in the CONFINED state and leaking the data to a conduit
without any policy protection after transitioning to the
UNCONFINED state.
Conduit interceptors The Thoth kernel component
includes a conduit interceptor (CI) for each type of con-
duit. A CI for a given conduit type intercepts system
calls that access or manipulate conduits of that type, and
associates a conduit with its policy. Thoth has built-in
CIs for kernel-deﬁned conduit types, namely ﬁles, named
pipes, and network connections. CIs for additional con-
duit types can be plugged in. For instance, our prototype
uses a CI for the memcached key-value store (KV).
642  25th USENIX Security Symposium 
USENIX Association