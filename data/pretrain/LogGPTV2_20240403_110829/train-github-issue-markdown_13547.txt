It seems you are encountering multiple issues while trying to build TensorFlow 1.9 for Android using Bazel. Let's break down the problems and provide a more structured and professional approach to resolving them.

### Issues Identified:
1. **`std::to_string` not found** (with `android-ndk-r14b` and default STL):
   - This error suggests that the C++ standard library being used does not support `std::to_string`.

2. **Undefined math functions** (with `android-ndk-r14b` and LLVM's STL):
   - The error indicates that certain long double math functions (e.g., `acosl`, `asinl`, etc.) are not defined in the version of the STL you are using.

3. **`nanf` not found** (with `android-ndk-r12b` and GNU STL):
   - The `nanf` function is not recognized, which is likely due to the version of the STL or the include paths.

4. **Invalid memory model for `__atomic_compare_exchange`** (with `android-ndk-r12b` and LLVM's STL):
   - This error suggests an issue with the atomic operations in the LLVM STL.

### Suggested Solutions:

#### 1. Use a Compatible NDK Version
Ensure you are using a compatible version of the Android NDK. TensorFlow 1.9 might have specific requirements or known issues with certain NDK versions. Consider using `android-ndk-r16b` or later, as they have better support for C++11 and above.

#### 2. Update Bazel and TensorFlow
Make sure you are using the latest versions of Bazel and TensorFlow that are compatible with each other. You can check the TensorFlow documentation for the recommended Bazel version.

#### 3. Configure Bazel Correctly
Use the following Bazel command with the appropriate NDK and STL settings. Here is an example configuration for `android-ndk-r16b` and the GNU STL:

```sh
bazel build --output_user_root=/mnt/d/ai/.madman/bazel \
    -c opt //tensorflow:libtensorflow_cc.so \
    --crosstool_top=//external:android/crosstool \
    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \
    --cpu=armeabi-v7a \
    --cxxopt="-std=c++11" \
    --cxxopt="-DTENSORFLOW_DISABLE_META" \
    --jobs 1
```

If you need to use LLVM's STL, configure it as follows:

```sh
bazel build --output_user_root=/mnt/d/ai/.madman/bazel \
    -c opt //tensorflow:libtensorflow_cc.so \
    --crosstool_top=@androidndk//:toolchain-libcpp \
    --android_crosstool_top=@androidndk//:toolchain-libcpp \
    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \
    --cpu=armeabi-v7a \
    --cxxopt="-std=c++11" \
    --cxxopt="-DTENSORFLOW_DISABLE_META" \
    --jobs 1
```

#### 4. Fix `std::to_string` Issue
If you encounter the `std::to_string` issue, you can add the following flag to your Bazel command to use the GNU STL, which supports `std::to_string`:

```sh
--cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"
```

#### 5. Fix `nanf` Issue
For the `nanf` issue, ensure that the correct math header is included. You can add the following flag to your Bazel command to include the necessary headers:

```sh
--cxxopt="-include <math.h>"
```

#### 6. Fix Atomic Operation Issue
For the atomic operation issue, you might need to update the LLVM STL or use a different STL. If the issue persists, consider using the GNU STL as a fallback.

### Example Bazel Command with All Fixes

Here is an example Bazel command that incorporates all the suggested fixes:

```sh
bazel build --output_user_root=/mnt/d/ai/.madman/bazel \
    -c opt //tensorflow:libtensorflow_cc.so \
    --crosstool_top=//external:android/crosstool \
    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain \
    --cpu=armeabi-v7a \
    --cxxopt="-std=c++11" \
    --cxxopt="-DTENSORFLOW_DISABLE_META" \
    --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
    --cxxopt="-include <math.h>" \
    --jobs 1
```

### Additional Tips:
- **Check TensorFlow Documentation**: Always refer to the official TensorFlow documentation for the specific version you are using.
- **Environment Setup**: Ensure your environment is set up correctly, including the PATH and environment variables for Bazel and the NDK.
- **Verbose Output**: Use the `--verbose_failures` flag to get more detailed information about the build failures.

By following these steps, you should be able to resolve the build issues and successfully compile TensorFlow 1.9 for Android.