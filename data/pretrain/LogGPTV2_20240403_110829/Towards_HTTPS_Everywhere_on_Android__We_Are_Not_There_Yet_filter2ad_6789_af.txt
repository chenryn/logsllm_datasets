[31] John Kozyrakis. CVE-2016-2402.
https://koz.io/
pinning-cve-2016-2402/. 2016, Accessed: June, 2020.
[32] MWR F-Secure Lab. Paypal Remote Code Execution, CVE-
https://labs.f-secure.
2013-7201, CVE-2013-7202.
com/advisories/paypal-remote-code-execution/.
2013, Accessed: June, 2020.
[33] John Leyden. Inside ’Operation Black Tulip’: DigiNotar hack
analysed. https://www.theregister.co.uk/2011/09/
06/diginotar_audit_damning_fail/. 2011, Accessed:
June, 2020.
[34] Marten Oltrogge, Yasemin Gülsüm Acar, Sergej Dechand,
Matthew Smith, and Sascha Fahl. To Pin or Not to Pin-Helping
App Developers Bullet Proof Their TLS Connections.
In
USENIX Security Symposium, 2015.
[35] Lucky Onwuzurike and Emiliano De Cristofaro. Danger is
my middle name: experimenting with SSL vulnerabilities in
Android apps. In WISEC, 2015.
[36] Paul Pearce, Adrienne Porter Felt, Gabriel Nunez, and David A.
Wagner. AdDroid: Privilege Separation for Applications and
Advertisers in Android. 2012.
[37] Sebastian Poeplau, Yanick Fratantonio, Antonio Bianchi,
Christopher Krügel, and Giovanni Vigna. Execute This!
Analyzing Unsafe and Malicious Dynamic Code Loading in
Android Applications. In NDSS, 2014.
[38] Ole André Vadla Ravnås. Dynamic instrumentation toolkit for
developers,reverse-engineers,and security researchers. https:
//frida.re/docs/android/. 2020, Accessed: June, 2020.
[39] Abbas Razaghpanah, Arian Akhavan Niaki, Narseo Vallina-
Rodriguez, Srikanth Sundaresan, Johanna Amann, and Philippa
Gill. Studying TLS Usage in Android Apps. In Proceedings
of the Applied Networking Research Workshop, 2018.
[40] Jaebaek Seo, Daehyeok Kim, Donghyun Cho, Insik Shin,
and Taesoo Kim. FLEXDROID: Enforcing In-App Privilege
Separation in Android. In NDSS, 2016.
[41] Shashi Shekhar, Michael Dietz, and Dan S. Wallach. AdSplit:
Separating Smartphone Advertising from Applications. In
USENIX Security Symposium, 2012.
[42] Sooel Son, Daehyeok Kim, and Vitaly Shmatikov. What Mobile
Ads Know About Mobile Users. In NDSS, 2016.
[43] Ryan Stevens, Clint Gibler, Jon Crussell, Jeremy Lee Erickson,
Investigating User Privacy in Android Ad
and Hao Chen.
Libraries. 2012.
[44] Ruby Game Studio.
Hunter Assassin.
https:
//play.google.com/store/apps/details?id=com.
rubygames.assassin. 2020, Accessed: June, 2020.
[45] Android Security Team. Google Report: Android Security
2014 Year in Review.
https://source.android.com/
security/reports/Google_Android_Security_2014_
Report_Final.pdf. 2014, Accessed: June, 2020.
[46] Eline Vanrykel, Gunes Acar, Michael Herrmann, and Claudia
Díaz. Exploiting Unencrypted Mobile Application Traﬃc for
Surveillance Technical Report. 2017.
[47] Mario Linares Vásquez, Gabriele Bavota, Massimiliano Di
Penta, Rocco Oliveto, and Denys Poshyvanyk. How do API
changes trigger stack overﬂow discussions? a study on the
Android SDK. In ICPC 2014, 2014.
[48] Morteza Verdi, Ashkan Sami, Jafar Akhondali, Foutse Khomh,
Gias Uddin, and Alireza Motlagh. An Empirical Study of C++
Vulnerabilities in Crowd-Sourced Code Examples, 2019.
[49] Ryan Welton. Remote Code Execution as System User on Sam-
sung Phones. https://www.nowsecure.com/blog/2015/
06/16/remote-code-execution-as-system-user\
-on-samsung-phones. 2015, Accessed: June, 2020.
[50] Xiao Zhang, Amit Ahlawat, and Wenliang Du. AFrame:
isolating advertisements from mobile applications in Android.
In ACSAC ’13, 2013.
[51] Yan Zhao, Youxun Lei, Tan Yang, and Yidong Cui. A new strat-
egy to defense against SSLStrip for Android. In 2013 15th IEEE
International Conference on Communication Technology, 2013.
358    29th USENIX Security Symposium
USENIX Association
Appendix
Network Libraries Compliance
Table3:Thetablesummarizestheresultsoftheanalysisonnetworklibraries.Foreachlibrary,itﬁrstpresentsstatisticsaboutthenumber
ofapplicationsusingthegivenlibraryandhowmanydownloadshasthetopdownloadedapplication. Then,foreachofthetestedfeature,
we mark with a  when the library passes all the testcases,  otherwise. The last column represents whetheran application is honoring
the entire policy ((cid:32)), only a subset of features ((cid:71)(cid:35)) or none of them ((cid:35)). For URLConnection, statistics are not available on AppBrain.
Networking Library
Retroﬁt
Volley
OkHttp
AndroidAsyncHTTP
AndroidAsync
FastAndroidNetworking
HttpClientAndroid
BasicHttpClient
Robospice
URLConnection
# of Apps
> 104k
> 66k
> 39k
> 22k
> 7k
> 3k
∼ 1,000
∼ 1,000
∼ 1,000
N/A
Top App
Downloads
1 B
5 B
5 B
100 M
100 M
100 M
100 M
100 M
10 M
N/A
Cleartext










Certiﬁcate
Pinning
Trust
Anchors




















Compliant
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
A Complete Network Security Policy
android .com 
YZPgTZ + woNCCCIW3LH2CxQeLzB /1 m42QcCTBSdgayjs =
Figure 3: The policy lacks a base-config. Thus, its conﬁguration changes according to the API level. For example, if the app
targets the API level 28, the policy will deny all cleartext protocols and use only the system CAs. The policy also deﬁnes a diﬀerent
security mechanism for the android.com domain (but not for its subdomains). In particular, the policy speciﬁes that the application
should reach the domain only via HTTPS and only with a speciﬁc certiﬁcate (i.e., it implements certiﬁcate pinning). The policy
also deﬁnes an expiration date for this certiﬁcate. Moreover, when the application is compiled in debug mode, network connections
can be trusted if they are signed with CAs deﬁned within the system KeyStore or with a custom, hardcoded CA “custom_cert”.
Also, no certiﬁcate pinning is enforced.
USENIX Association
29th USENIX Security Symposium    359
Example of Real Network Security Policy
example .com 
valid_domain 
HASH 
BBBBB .. BBBBBB 
(a)
(b)
Figure 4: These policies represent two real cases found on our dataset. On the policy (a), it is possible to see how the developer
enforced the certiﬁcate pinning on the example.com domain, while in the policy (b) the developer enforced certiﬁcate pinning
with a wrong certiﬁcate formed of only “B.”
Advertisement Libraries
Table 4: The table summarizes the results of the analysis on advertisement libraries. For each library, it presents statistics about
the number of applications using the given library, how many downloads has the top downloaded application, and if it requires
a modiﬁcation of the NSP. For AppMediation, the statistics are not available anymore: however, the required policy can be found
at https://github.com/appmediation/Documentation/wiki/Android-Project-Setup
Ad Library
AdMob
Facebook Audience Network
Unity
AppLovin
Chartboost
Startapp
AppsFlyer
AdColony
Vungle
MoPub
Ironsource
Amazon Mobile Ads
Tapjoy
InMobi
Pollﬁsh
AppNext
Adjust
HeyZap
Smaato
Fyber
Millennial Media
MyTarget
Appodeal
Kochava
AerServ
Tenjin
HyprMX
DU Ad
AppMediation
# of Apps
> 464k
> 96k
> 67k
> 34k
> 30k
> 29k
> 29k
> 24k
> 20k
> 19k
> 19k
> 13k
> 11k
> 11k
> 9k
> 8k
> 8k
> 7k
> 4k
> 4k
> 3k
> 3k
> 3k
> 2k
> 2k
∼ 1,000
∼ 1,000
∼ 500
N/A
Top Apps Downloads
1B
500M
50M
100M
1B
100M
500M
100M
100M
1B
50M
500M
100M
100M
10M
100M
1B
100M
100M
100M
500M
100M
50M
100M
100M
100M
100M
100M
N/A
Requires NSP Modiﬁcation












360    29th USENIX Security Symposium
USENIX Association