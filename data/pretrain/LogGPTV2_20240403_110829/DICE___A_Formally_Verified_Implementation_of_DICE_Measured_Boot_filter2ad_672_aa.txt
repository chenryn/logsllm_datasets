title:DICE*: A Formally Verified Implementation of DICE Measured Boot
author:Zhe Tao and
Aseem Rastogi and
Naman Gupta and
Kapil Vaswani and
Aditya V. Thakur
DICE*: A Formally Verified Implementation of 
DICE Measured Boot
Zhe Tao, University of California, Davis; Aseem Rastogi, Naman Gupta, and 
Kapil Vaswani, Microsoft Research; Aditya V. Thakur, University of California, Davis
https://www.usenix.org/conference/usenixsecurity21/presentation/tao
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.DICE(cid:63): A Formally Veriﬁed Implementation of DICE Measured Boot
Zhe Tao∗
Aseem Rastogi†
Naman Gupta†
∗University of California, Davis
Kapil Vaswani†
†Microsoft Research
Aditya V. Thakur∗
Abstract
Measured boot is an important class of boot protocols that
ensure that each layer of ﬁrmware and software in a device’s
chain of trust is measured, and the measurements are reli-
ably recorded for subsequent veriﬁcation. This paper presents
DICE(cid:63), a formal speciﬁcation as well as a formally veriﬁed
implementation of DICE, an industry standard measured boot
protocol. DICE(cid:63) is proved to be functionally correct, memory-
safe, and resistant to timing- and cache-based side-channels.
A key component of DICE(cid:63) is a veriﬁed certiﬁcate creation
library for a fragment of X.509. We have integrated DICE(cid:63)
into the boot ﬁrmware of an STM32H753ZI micro-controller.
Our evaluation shows that using a fully veriﬁed implementa-
tion has minimal to no effect on the code size and boot time
when compared to an existing unveriﬁed implementation.
1 Introduction
Security attacks during boot are arguably the most difﬁcult
to defend against because at this stage in a device’s lifecycle,
traditional defences such as ﬁrewalls and anti-viruses are not
in place, and attacks are hard to detect. It is, therefore, not
surprising that securing devices during boot continues to be
an active area of investigation [23, 27, 44, 50, 64].
A common defence against boot attacks is authenticated
or secure boot [13]. In this form of boot, the device ROM is
provisioned with a public key, which is used to authenticate
the next layer of ﬁrmware. This ensures that the device can
only boot with ﬁrmware signed by an authorized entity (e.g.
the device manufacturer).
While authenticated boot forms the ﬁrst line of defence in
many systems, it remains susceptible to many attacks [33,41].
For example, authenticated boot does not prevent an attacker
from booting the device with an older version of ﬁrmware
with known vulnerabilities. To prevent such attacks, many
systems deploy a stronger, more secure boot protocol known
as measured boot [41, 61]. Measured boot ensures that ev-
ery layer of ﬁrmware/software is measured before booting,
Figure 1: DICE Architecture
and that the measurements are reliably recorded for future
veriﬁcation. For example, the measurements can be used to
attest the device to a remote party (e.g. an attestation service),
which can inspect the measurements and decide if the device
is running an expected version of ﬁrmware before establish-
ing trust in the device and provisioning secrets such as keys
or certiﬁcates.
In many systems, measured boot is supported using a
Trusted Platform Module (TPM) [28], a dedicated hardware
chip attached to the host CPU. In a system with a TPM, each
layer of ﬁrmware is conﬁgured to measure and record the hash
of the next layer of ﬁrmware in the TPM. After boot, the TPM
can generate a signed log of the ﬁrmware measurements using
a unique signing key provisioned by the TPM manufacturer.
This log can be veriﬁed externally to ascertain whether the
device booted with expected ﬁrmware.
While suitable for some systems, there are many devices
(e.g. low-cost IoT devices) where a dedicated TPM is too
expensive in terms of cost, power, or real estate. To address
the need for stronger security in such scenarios, researchers
have recently proposed a new, measured boot architecture
known as Device Identiﬁer Composition Engine (DICE) [38],
which is integrated on chip and requires signiﬁcantly less
hardware support.
In the DICE architecture (Figure 1), trust is anchored in a
hardware component known as the DICE engine. Typically
USENIX Association
30th USENIX Security Symposium    1091
implemented in the ROM ﬁrmware, DICE engine is the ﬁrst
component to receive control when the device is powered-on.
It has access to a Unique Device Secret (UDS) provisioned
to each device during manufacturing. The engine transfers
control to one or more layers of ﬁrmware/software, with the
ﬁrst layer known as L0. Before transferring control, it com-
putes a Compound Device Identiﬁer (CDIL0) by measuring
L0 and combining the measurement with the UDS using a
One-Way hash Function (OWF). Every subsequent layer of
the ﬁrmware measures its next layer and performs an anal-
ogous computation to obtain its CDI. Firmware layers may
also derive additional secrets from their CDI. For example, L0
typically derives an asymmetric public/private key pair called
the DeviceID from CDIL0. A manufacturer-issued certiﬁcate
for DeviceID can serve as the device’s long term identity and
can be used to validate the attestations originating from the
device after deployment.
By incorporating the measurement of the next layers of
ﬁrmware into CDI, DICE architecture ensures that the full
Trusted Computing Base (TCB) of the device is implicitly
captured in the secrets/keys derived during boot. An impor-
tant consequence is that a change in the TCB (e.g. due to a
ﬁrmware upgrade) automatically changes the keys derived
during boot. Therefore, devices running with stale or compro-
mised ﬁrmware cannot impersonate known good ﬁrmware.
Due to these security properties, minimal hardware require-
ments, simplicity, and low cost, DICE-based measured boot
is being incorporated into an increasingly larger number of
devices [8–11], and is being developed into a standard by
Trusted Computing Group (TCG) [55, 56]. However, along
side a standard, it is critical to develop a methodology that
allows chip manufacturers to build and analyze robust, bug-
free implementations of the standard because defects in these
implementations can have serious implications, including at-
tackers taking control of these devices. What is worse, ﬁxing a
defect in DICE engine or L0 layers is either impossible (if the
layer is implemented in boot ROM), or extremely expensive
because an update changes the device identity and invalidates
the manufacturer issued certiﬁcates. Issuing new certiﬁcates
for devices already deployed in the ﬁeld may require decom-
missioning or recalling the affected devices, both of which
can be expensive and/or laborious.
Building robust implementations of DICE is a challeng-
ing task for several reasons. Firstly, even though the DICE
architecture is simple, its implementation contains complex
cryptographic primitives such as public key derivation, signa-
tures, and hashes, and generation of X.509 Certiﬁcate Sign-
ing Requests (CSR) and certiﬁcates in multiple layers of the
ﬁrmware stack. Cryptographic and X.509 libraries are of-
ten written in a low-level unsafe language like C and are
well-known for their security vulnerabilities and functional
correctness bugs [1–6, 20]. Secondly, if the implementations
are not careful operating on the secrets, the attackers may be
able to infer them using side-channel leaks, e.g. timing, as
in the TPM-Fail attack [42]. Finally, DICE implementations
rely on hardware-speciﬁc security features to protect secrets
and prevent tampering of code. These must be individually
certiﬁed as part of any security analysis.
1.1 Our Contributions
In this paper, we present DICE(cid:63), the ﬁrst formally-veriﬁed
implementation of the standardized DICE engine layer [57]
and L0 [58]. DICE(cid:63) is proven to be memory-safe, functionally
correct, secure, and resistant to the timing- and cache-based
side-channel attacks. We implement DICE(cid:63) in Low(cid:63) [48],
a shallow-embedding of a well-behaved subset of C inside
the F(cid:63) programming language and proof assistant [54]. Low(cid:63)
programs enjoy the full higher-order expressiveness of F(cid:63) for
speciﬁcations and proofs, while their ﬁrst-order computational
fragment can be extracted to efﬁcient, readable, and portable
C code using the KreMLin tool. For cryptographic primitives,
DICE(cid:63) uses HACL(cid:63) [65], a formally veriﬁed cryptographic
library written in Low(cid:63). For X.509 certiﬁcates, we extend the
LowParse framework [49] and build a custom, veriﬁed X.509
certiﬁcate creation library for DICE. Concretely, we make the
following contributions.
We show how DICE implementations can be refactored
into platform-agnostic and platform-speciﬁc components that
interact through a well-deﬁned interface. This refactoring
enables reuse of the platform-agnostic components across de-
vices, thereby simplifying the security analysis (Section 4.1).
We formalize the DICE engine and L0 standards [57, 58]
by designing their top-level (platform-agnostic) APIs with
formal speciﬁcations (dice_main in Section 4.2 and l0_core in
Section 5.3 resp.).
We provide a formally veriﬁed implementation of the
platform-agnostic components in the DICE engine (Sec-
tion 4.2) and L0 (Section 5.3) that is memory-safe, function-
ally correct, secure, and side-channel resistant. This veriﬁed
implementation is applicable to all DICE devices, leaving the
device manufacturers with a simpler task of analyzing just the
platform-speciﬁc components.
We precisely specify (and verify) the outputs from each
layer (CDI, keys, CSRs, and certiﬁcates), guaranteeing that
there are no direct ﬂows of secrets (e.g. UDS) to the outputs.
Further, using the model of secrets as abstract types from
Low(cid:63), DICE(cid:63) also ensures that there are no secret-dependent
branches or memory accesses, providing a constant-time im-
plementation [17] that is resistant to the timing- and cache-
based side channel attacks.
A key component of DICE(cid:63) is a custom, veriﬁed X.509 cer-
tiﬁcate creation library (Section 5.2), implemented using the
LowParse framework [49]. We extend LowParse with back-
ward serializer support for serializing variable-length data.
This extension is general and can be applied to any system
that uses variable-length messages. The veriﬁed library that
we have developed for (a subset of) ASN.1 and X.509 can be
1092    30th USENIX Security Symposium
USENIX Association
extended and applied to other applications, e.g. Public Key In-
frastructure (PKI). We have laid the necessary groundwork by
providing parser and serializer speciﬁcations, and low-level
serializers for many of the basic types.
We evaluate DICE(cid:63) by integrating it into the boot ﬁrmware
of an STM32H753ZI micro-controller [11] and measuring
the impact of the veriﬁed code on the ﬁrmware binary size
(a critical metric for applicability to the low-cost devices)
and boot time (Section 7). Our evaluation shows that using a
fully veriﬁed implementation has minimal to no impact when
compared to an unveriﬁed hand-written C implementation.
DICE(cid:63) is publicly available at https://github.com/
verified-HRoT/dice-star. DICE is a security-critical
infrastructure component. By formally verifying it and pro-
ducing a deployment-ready artifact, we hope that DICE(cid:63) will
serve as a robust baseline for the next generation of DICE
implementations, thereby avoiding the expensive bug-ﬁnding
and ﬁxing cycles in the future.
The rest of this paper is structured as follows. Section 2
provides a background on DICE. Section 3 provides a high-
level overview of our veriﬁcation toolchain. Sections 4 and
5 focuses on the veriﬁcation of DICE engine and L0 layers,
respectively. Section 6 provides details of the DICE(cid:63) imple-
mentation. Section 7 describes a DICE(cid:63)-based implementa-
tion for the STM32H753ZI micro-controller, and compares
this implementation with an unveriﬁed implementation. We
review related work in Section 8 and conclude in Section 9.
2 Overview of DICE
This section describes the DICE architecture in more detail,
discusses our threat model, veriﬁcation goals, and TCB.
2.1 DICE Architecture
The DICE architecture is motivated by the need for a low cost
measured boot protocol that can generate veriﬁable attesta-
tions capturing the entire hardware and software TCB of each
device, and can be deployed on a large class of devices.
Figure 2 shows the dataﬂow in the simplest instance of
the DICE architecture with three layers. The ﬁrst layer is a
hardware layer called the DICE engine [57], which receives
control after device reset. This layer has access to the unique
device secret (UDS) provisioned to the device during manu-
facturing. The DICE speciﬁcation requires UDS to provide at
least 256-bit cryptographic strength. The UDS must also be
stored in read-only and latchable memory so that access to the
UDS can be disabled and is restored only by a hardware reset.
DICE engine performs the following sequence of operations:
1. Authenticate L0 ﬁrmware. First, the DICE engine
loads the L0 ﬁrmware image into the RAM and authen-
ticates it. One way of authenticating the image is to
append the hash of the ﬁrmware image and a signature
Figure 2: DICE architecture with three layers of ﬁrmware.
over this hash using a ﬁrmware signing key to the image,
and provision the public ﬁrmware signing key to the
device during manufacturing e.g. in e-fuses. The DICE
engine can use this key to verify the signature, and check
that the hash matches the hash of the image.
2. Derive CDI. The DICE engine then derives a compound
device identiﬁer (CDI) from the UDS and the hash digest
of the ﬁrmware image:
CDIL0 = HMAC(UDS,Hash(L0))
(1)
The DICE speciﬁcation prescribes the use of the UDS
as the HMAC key for the HMAC function, instead of
a hash combining the UDS with the hash of L0. This
derivation ensures that the derived CDI value has the
same cryptographic strength as UDS (see NIST SP800-
57, Part 1 [16]).
3. Latch UDS. The DICE engine disables access to the
UDS using a hardware-speciﬁc latch mechanism, which
USENIX Association
30th USENIX Security Symposium    1093
remains in place until the next reset. DICE engine also
erases any copies of the UDS on the stack or in memory.
4. Transfer to L0. Finally, DICE engine passes the CDI
value and control to the L0 ﬁrmware. To prevent Time-
Of-Check-To-Time-Of-Use (TOCTTOU) attacks, it is
crucial that the DICE engine jumps to the L0 ﬁrmware
copy in the RAM from Step 1.
Together, these steps limit exposure of the UDS: access to
the raw UDS value is restricted to only the DICE engine, and
other ﬁrmware layers get access to the CDI derived from the
UDS using a cryptographically secure one-way hash function.
2.2 Layer 0
Layer 0 (L0) is the layer of ﬁrmware that receives control from
the DICE engine. Its main purpose is to derive an asymmetric
device identity key (also known as DeviceID) from CDI using
a cryptographically secure key derivation function (KDF):
DeviceIDpub,DeviceIDpriv = KDF(CDI)
(2)