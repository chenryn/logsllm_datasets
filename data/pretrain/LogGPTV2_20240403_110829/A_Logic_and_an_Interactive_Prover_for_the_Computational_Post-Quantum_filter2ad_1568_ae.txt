of the two QTMs. The satisfaction relation is extended to full
ﬁrst-order logic as usual.
In the long version [1]we give the proof of the logic’s
computational soundness. At a high level, the proof follows
naturally from our previous design of a faithful interpretation
Fig. 7. Quantum compatible interpretation in PQ-BC
is well-deﬁned if (cid:126)t is consistent.
Lemma 1. [[(cid:126)t]]ηMA,ρs
Proof sketch. In the loops of step 2, all occurrences atti will
occur with the same sequence of arguments (t1, . . . , ti). Thus,
at the end of step 2, σ will indeed be a total mapping over all
terms that have as head an attacker function symbol, and the
interpretation will terminate.
4) Restoring locality: In the evaluation of the sequence
att0(), att1(u), att2(v, v(cid:48)), the value of att2(v, v(cid:48)) de-
pends on u in the new interpretation. Yet, this is not reﬂected
inside the term and introduces an implicit dependency that
breaks some BC rules as it breaks locality. In particular, it
breaks the =IND rule presented in Section II. To repair it, we
introduce the second term restriction.
Deﬁnition 6 (Monotonicity). A sequence of terms (cid:126)t satis-
ﬁes the monotonicity restriction if for all occurrences of
1, . . . , t(cid:48)
atti(t1, . . . , ti) and attj(t(cid:48)
j) with i < j, we have
for all 1 ≤ k ≤ i that ti = t(cid:48)
i.
Essentially, to restore locality, we require that attacker
function symbols must always be called on at least the same
set of argument as the previous attacker calls.
Equipped with this new restriction, we can prove a lemma
that expresses the locality property of the interpretation. It can
be found in the long version [1].
From now on, we only allow in the logic terms that satisfy
the consistency and the monotonicity properties.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
10134
=-REFL
T(u .= u)
=-IND
T(u (cid:54) .= n)
when n is not
a subterm of u
=-SYMT(u .= v)
T(v .= u)
Fig. 8. Truth rules of PQ-BC (identical to those of BC)
of terms that is sound for black-box interactive attackers. We
directly obtain that by quantifying over all possible MA,
the value of [[(cid:126)t]]ηMA,ρs
describes all possible behaviours of
the protocol modelled by t interacting with any black-box
interactive attacker. Thus, if there exists an attack on the
protocol in the real world, it will correspond to an attack on
the (computational) interpretation of the terms. Furthermore,
because Deﬁnition 8 exactly quantiﬁes universally over all
MA, if there is an attack on the protocol, the predicate is
not valid, and if there is none, it is valid. Finally, because
an interactive black-box attacker soundly models a quantum
attacker, the logic is shown to be post-quantum sound.
6) Overwhelming probabilistic truth: The classical BC logic
as well as SQUIRREL has a subset of its rule dedicated to
proving the validity of statements of the form u ∼ true.
In our case the attacker A from the computational model and
the ﬁnal distinguisher B share their (quantum) tape, while in the
classical BC deﬁnition [7], A and B do not share their working
tape, but only their source of randomness Thus, compared to
the classical BC deﬁnition, as soon as u executes an attacker
machine, (u .= u) ∼ true will not hold, as B simply checks if
an attacker machine was executed.
Note that in the classical BC logic, a proof that u ∼ true is
in fact a statement independent of the ﬁnal distinguisher: we
just prove that u is equal to true with overwhelming probability.
This is what we call a probabilistic statement.
For PQ-BC, we thus deﬁne a predicate dedicated to proving
overwhelming probabilistic truth, for which we inherit all the
truth rules of BC and SQUIRREL.
Deﬁnition 9. Given a computational model MA and a ground
term t, T(t) is satisﬁed by MA if,
Prρs{[[(cid:126)t]]ηMA,ρs
= 1}
is overwhelming in η. The satisfaction relation is extended to
full ﬁrst-order logic as usual.
B. Logical rules
1) Probabilistic statements: We introduce some of the
logical rules to reason about the T() predicate, which are
all direct transpositions of the rules of the BC logic that
are statements about formulas of the form u ∼ true. Their
soundness proofs are completely similar, as the corresponding
BC rules are in fact sound for any Turing Machine, even
with unbounded computational power. This means that if the
premices are valid, so are the conclusions. We present in Fig. 8
a subset of such rules that allows to reason about the equality
between terms, with the other rules being transposed similarly.
Lemma 2. The truth rules, shown in Fig. 8, are sound in the
PQ-BC interpretation.
Omitted proofs can be found in [1].
2) Indistinguishability rules: As mentioned earlier, some
statements of classical BC are false under the single-attacker
interpretation. For example, u ∼ true is false as soon as u
contains an attacker symbol, because the ﬁnal distinguisher also
executes the corresponding attacker call, and could therefore
differentiate the sides. Yet, such statements are provable inside
BC, because it does not assume the ﬁnal distinguisher sees all
attacker calls. Thus, the existing BC rules are not correct in
our new interpretation, and we must add a side condition to
make PQ-BC sound.
Similar to the rules for the truth predicate T(), the indis-
tinguishability rules in Fig. 9 are also sound for any attacker,
without any assumption on their computational power. Thus, the
soundness issues only come from the fact that the distinguisher
B now inherits the state of the attacker A. In the end, the main
case where an existing BC rule becomes unsound is when it
yields in the conclusion a ∼ statement where the attacker A
is not called the same number of times on both sides, which
corresponds to the balance condition.
Deﬁnition 10 (Balance). Given a sequence of terms (cid:126)u, we
denote by Maxatt((cid:126)u) the biggest index i such that the function
symbol atti appears in (cid:126)u.
We say that (cid:126)u ∼ (cid:126)v satisﬁes the balance conditions, or is
balanced, if Maxatt(u) = Maxatt(v).
Most BC rules can then be transformed to PQ-BC rules
by additionally requiring the balance condition over their
indistinguishability. In practice, we will thus require that the
balance condition holds over all indistinguishabilities appearing
inside the proof tree. In the following, however, we only add
the side condition where it is needed, in order to pinpoint which
rules may break the balance condition. We present in Fig. 9 a
subset of the new rules, using the color blue to indicate the new
side-conditions. Note that the consistency and monotonicity
conditions are enforced globally, and hence also hold for all
terms appearing in rules. The CS rule requires a stronger
condition than the balance condition. Though we provide it
for completeness, this rule is not used in SQUIRREL nor in
PQ-SQUIRREL, and the balance condition is thus sufﬁcient for
their rules to get post-quantum soundness.
Lemma 3. The indistinguishability rules, shown in Fig. 9, are
sound in the PQ-BC interpretation.
Intuitively, this means that whenever we construct a proof
in the logic, then if there is an attack on the proven formula,
there is an attack on the axioms. If we combine this with
the soundness of the logic, we get that a proof in the logic
implies the existence of a post-quantum sound reduction from
an attack on the protocol to an attack on post-quantum sound
cryptographic assumptions.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
11135
REFL
(cid:126)u ∼ (cid:126)u
TRANS
(cid:126)u ∼ (cid:126)v (cid:126)v ∼ (cid:126)w
(cid:126)u ∼ (cid:126)w
SYM
(cid:126)v ∼ (cid:126)u
(cid:126)u ∼ (cid:126)v
(cid:126)u ∼g (cid:126)v
FRESH
((cid:126)u, n) ∼g ((cid:126)v, n(cid:48))
when the new names
do not occur in (cid:126)u, (cid:126)v
(cid:126)u ∼ (cid:126)v
FA
h((cid:126)u) ∼ h((cid:126)v)
RESTR
((cid:126)u, s) ∼ ((cid:126)v, t)
(cid:126)u ∼ (cid:126)v
when Maxatt((cid:126)u) = Maxatt((cid:126)v)
EQU
T(s .= t)
((cid:126)u, s) ∼g ((cid:126)u, t)
when Maxatt((cid:126)u, s) = Maxatt((cid:126)u, t)
( (cid:126)w, b, u) ∼ ( (cid:126)w(cid:48), b(cid:48), u(cid:48))
CS
( (cid:126)w, if b then u else v) ∼ ( (cid:126)w(cid:48), if b(cid:48) then u(cid:48) else v(cid:48))
( (cid:126)w, b, v) ∼ ( (cid:126)w(cid:48), b(cid:48), v(cid:48))
DUP
((cid:126)u, t) ∼ ((cid:126)v, t)
((cid:126)u, t, t) ∼ ((cid:126)v, t, t)
IFT(cid:0)(cid:126)u, C[if s .= t then C0[s] else w](cid:1) ∼ (cid:126)v
(cid:0)(cid:126)u, C[if s .= t then C0[t] else w](cid:1) ∼ (cid:126)v
when Maxatt( (cid:126)w, b, u) = Maxatt( (cid:126)w, b, v)
= Maxatt( (cid:126)w(cid:48), b(cid:48), u(cid:48)) = Maxatt( (cid:126)w(cid:48), b(cid:48), v(cid:48))
Fig. 9.
Indistinguishability rules of PQ-BC. We mark new side conditions in blue.
C. Cryptographic assumptions in PQ-BC
In Section II-D we discussed how BC encodes cryptographic
assumptions, such as PRF, IND-CCA, EUF-CMA, ENC-KP,
INT-CTXT, OTP, and DDH. The original proofs of sound-
ness of these encodings in [7], [46] were aimed at a classical
attacker. We revisited all these proofs, and due to their direct
black-box nature, it turns out these proofs also directly apply
against a post-quantum attacker: if there exist an instantiating
that satisﬁes the assumption against a quantum attacker, then
the corresponding BC axiom is post-quantum sound.
However, knowing that a BC rule is post-quantum sound w.r.t.
the cryptographic assumption does not mean that we know an
instantiation (i.e., a concrete scheme) that is secure with respect
to a quantum attacker. While we know instantiations for most of
the above assumptions with respect to a classical attacker, at this
moment we do not know of a post-quantum secure instantiation
of the DDH assumption. In the future, a candidate for post-
quantum DDH could be the CSI-DDH [42] assumption, based
on the CSIDH assumption [21]. Their concrete security is
however the subject of discussions [12], [14], [17], [51]. We
therefore omit this for now from list of allowed cryptographic
assumptions for PQ-BC.
This yields the following list of currently usable PQ-BC ax-
ioms for post-quantum proofs: PRF, IND-CCA, EUF-CMA,
ENC-KP, INT-CTXT, and OTP. Concretely, this means that
a proof in PQ-BC yields guarantees for post-quantum attackers
under the assumption that the previous axioms are instantiated
in a post-quantum secure way, e.g., by a protocol that uses
CRYSTALS-Dilithium [32] to instantiate EUF-CMA, and see
e.g. [62] for a post-quantum sound instantiation of a PRF. Out
of these assumptions, the most debatable w.r.t. instantiability
is likely ENC-KP, as discussed recently in [37].
V. MECHANIZATION IN PQ-SQUIRREL AND CASE STUDIES
In this section, we describe PQ-SQUIRREL, our extension
of SQUIRREL that produces post-quantum sound proofs in
the PQ-BC logic. We give an overview of the post-quantum
protocol analysis results that we obtained using PQ-SQUIRREL
in Table I. As we will show later, it turns out that despite the
new term interpretation and corresponding new side conditions,
several existing SQUIRREL proofs could be re-interpreted by
PQ-SQUIRREL as post-quantum sound proofs in PQ-BC.
A. PQ-SQUIRREL
1) Ensuring post-quantum soundness: To make SQUIRREL
post-quantum sound, we must specify which cryptographic
axioms are post-quantum sound, and enforce the three syntactic
side conditions from Deﬁnitions 5, 6 and 10. Furthermore,
if there are cryptographic assumptions for which we know
instantiations that are secure against classical attackers, but do
not know any post-quantum secure instantiations, we no longer
rely on them.
Recall that a substantial amount of work in adapting the BC
logic to PQ-BC was due to the ﬂexibility in specifying multiple
attackers. In contrast, SQUIRREL speciﬁcations do not include
attacker terms: SQUIRREL automatically produces the attacker
terms from the input and output commands in the process spec-
iﬁcation, under the assumption that there is only one attacker.
Concretely, the attacker terms are produced by the interpretation
of inputP@τ, which is equal to attτ (frameP@pre(τ )). While
this means that SQUIRREL only supports a subset of the BC
logic, it strongly simpliﬁes protocol speciﬁcation for the user,
and prevents users from accidentally modeling a weaker threat
model with multiple disjoint attackers. For our post-quantum
purposes, this historical choice is very convenient: all terms
produced by the meta-logic of SQUIRREL already satisfy the
consistency and monotonicity properties.
We still need to ensure that PQ-SQUIRREL veriﬁes the
new side conditions w.r.t. the Maxatt() on both sides of
the indistinguishability formulas from Fig. 9. Given a meta-
logic formula (cid:126)u ∼ (cid:126)v, we need to check that for the maximal
timestamp element τ of the trace, input@τ appears on both
sides. If this is the case, we say that a formula satisﬁes the
synchronization property.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
12136
We cannot check the synchronization property directly since
SQUIRREL internally omits the inputs from the frames when
they are redundant, and would lead to falsely discarding proof
steps. We instead check a generalized property, which is true
if either input@τ or frame@τ or frame@pre(τ ) occurs in the
frame. In the long version [1]we prove a lemma that shows
that a proof in which all steps satisfy this generalized property
can be mapped to a post-quantum proof.
2) Implementation: PQ-SQUIRREL can operate in classic
SQUIRREL mode. Additionally,
it offers a post-quantum-
mode switch that can be enabled inside proof ﬁles. When
enabled, PQ-SQUIRREL operates in post-quantum mode: it only
allows tactics and axioms that have been proven post-quantum
sound, and checks synchronization for every indistinguishability
appearing at any step of a proof.
The source-code of PQ-SQUIRREL is available at [2]. Thanks
to our identiﬁcation of a minimal set of simple syntactic
conditions, the PQ-SQUIRREL extension could be concisely
implemented, and only comprises a few hundred line of codes
in addition to SQUIRREL’s code base.
B. Case studies
We summarize the case studies we performed using
PQ-SQUIRREL in Table I. They fall into two categories: new
case studies for the Internet Key Exchange (IKE) standards
and of key exchange protocols based on Key-Encapsulation
Mechanisms (KEMs); and previous SQUIRREL case studies
that we could prove post-quantum sound in PQ-SQUIRREL.
All model ﬁles and the prover are at [2].