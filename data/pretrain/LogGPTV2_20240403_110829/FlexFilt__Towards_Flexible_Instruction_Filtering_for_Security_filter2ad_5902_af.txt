Kistler, Alexander Klaiber, and Jim Mattson. 2003. The Transmeta code morphing
software: using speculation, recovery, and adaptive retranslation to address real-
life challenges. In Proceedings of International Symposium on Code Generation and
Optimization (CGO). 15–24.
[14] Leila Delshadtehrani, Sadullah Canakci, Manuel Egele, and Ajay Joshi. 2020.
Sealable Protection Keys for RISC-V. arXiv preprint arXiv:2012.02715 (2020).
[15] Leila Delshadtehrani, Sadullah Canakci, Manuel Egele, and Ajay Joshi. 2021.
SealPK: Sealable Protection Keys for RISC-V. In Proceedings of Design, Automation
and Test in Europe (DATE). 1–4.
[16] Leila Delshadtehrani, Sadullah Canakci, Boyou Zhou, Schuyler Eldridge, Ajay
Joshi, and Manuel Egele. 2020. PHMon: A programmable hardware monitor and
its security use cases. In Proceedings of USENIX Security Symposium (Security).
807–824.
[17] Leila Delshadtehrani, Schuyler Eldridge, Sadullah Canakci, Manuel Egele, and
Ajay Joshi. 2017. Nile: A programmable monitoring coprocessor. IEEE Computer
Architecture Letters 17, 1 (2017), 92–95.
[18] Daniel Y Deng, Daniel Lo, Greg Malysa, Skyler Schneider, and G Edward Suh.
2010. Flexible and efficient instruction-grained run-time monitoring using on-
chip reconfigurable fabric. In Proceedings of the International Symposium on
Microarchitecture (MICRO). 137–148.
[19] Daniel Y Deng and G Edward Suh. 2012. High-performance parallel accelerator
for flexible and efficient run-time monitoring. In Proceedings of the International
Conference on Dependable Systems and Networks (DSN). 1–12.
[20] Udit Dhawan, Catalin Hritcu, Raphael Rubin, Nikos Vasilakis, Silviu Chiricescu,
Jonathan M Smith, Thomas F Knight Jr, Benjamin C Pierce, and Andre DeHon.
2015. Architectural support for software-defined metadata processing. In Pro-
ceedings of the International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS). 487–502.
[21] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim, and Wenke
Lee. 2017. Efficient protection of path-sensitive control security. In Proceedings
of USENIX Security Symposium (Security). 131–148.
[22] Kemal Ebcioglu, Erik Altman, Michael Gschwind, and Sumedh Sathaye. 2001.
Dynamic binary translation and optimization. IEEE Trans. Comput. 50, 6 (2001),
529–548.
[23] Tommaso Frassetto, David Gens, Christopher Liebchen, and Ahmad-Reza Sadeghi.
2017. Jitguard: hardening just-in-time compilers with SGX. In Proceedings of
the ACM SIGSAC Conference on Computer and Communications Security (CCS).
657FlexFilt: Towards Flexible Instruction Filtering for Security
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
2405–2419.
[24] Tommaso Frassetto, Patrick Jauernig, Christopher Liebchen, and Ahmad-Reza
Sadeghi. 2018. IMIX: In-Process Memory Isolation EXtension. In Proceedings of
USENIX Security Symposium (Security). 83–97.
[25] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. Griffin: Guarding control
flows using intel processor trace. In Proceedings of the International Conference
on Architectural Support for Programming Languages and Operating Systems
(ASPLOS). 585–598.
[26] Google. 2020. The Chromium Projects. [online] https://www.chromium.org/
Home.
[27] Google. 2020. What is V8? [online] https://v8.dev/.
[28] Cosmin Gorgovan, Amanieu d’Antras, and Mikel Luján. 2016. MAMBO: A low-
overhead dynamic binary modification tool for ARM. ACM Transactions on
Architecture and Code Optimization (TACO) 13, 1 (2016), 1–26.
[29] Joseph L Greathouse, Hongyi Xin, Yixin Luo, and Todd Austin. 2012. A case for
unlimited watchpoints. In Proceedings of the International Conference on Archi-
tectural Support for Programming Languages and Operating Systems (ASPLOS).
159–172.
[30] Jinyu Gu, Xinyue Wu, Wentai Li, Nian Liu, Zeyu Mi, Yubin Xia, and Haibo Chen.
2020. Harmonizing performance and isolation in Microkernels with efficient
intra-kernel isolation and communication. In Proceedings of USENIX Annual
Technical Conference (ATC). 401–417.
[31] Yufei Gu, Qingchuan Zhao, Yinqian Zhang, and Zhiqiang Lin. 2017. PT-CFI:
Transparent backward-edge control flow violation detection using Intel processor
trace. In Proceedings of the ACM Conference on Data and Application Security and
Privacy (CODASPY). 173–184.
[32] Mohammad Hedayati, Spyridoula Gravani, Ethan Johnson, John Criswell,
Michael L Scott, Kai Shen, and Mike Marty. 2019. Hodor: Intra-process iso-
lation for high-throughput data plane libraries. In Proceedings of USENIX Annual
Technical Conference (ATC). 489–504.
[33] John L Henning. 2000. SPEC CPU2000: measuring CPU performance in the new
millennium. Computer 33, 7 (2000).
[34] John L Henning. 2006. SPEC CPU2006 benchmark descriptions. ACM SIGARCH
Computer Architecture News 34, 4 (2006), 1–17.
[35] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R
Harris, Taesoo Kim, and Wenke Lee. 2018. Enforcing unique code target prop-
erty for control-flow integrity. In Proceedings of the ACM SIGSAC Conference on
Computer and Communications Security (CCS). 1470–1486.
[36] Yannis Juglaret, Catalin Hritcu, Arthur Azevedo de Amorim, Benjamin C Pierce,
Antal Spector-Zabusky, and Andrew Tolmach. 2015. Towards a fully abstract
compiler using Micro-Policies: Secure compilation for mutually distrustful com-
ponents. arXiv preprint arXiv:1510.00697 (2015).
[37] Henrik Karlsson. 2020. OpenMZ: a C implementation of the MultiZone API. Mas-
ter’s thesis. School of Electrical Engineering and Computer Science (EECS), KTH
Royal Institute of Technology.
[38] Haeyoung Kim, Jinjae Lee, Derry Pratama, Asep Muhamad Awaludin, Howon
Kim, and Donghyun Kwon. 2020. RIMI: instruction-level memory isolation for
embedded systems on RISC-V. In Proceedings of the International Conference on
Computer-Aided Design (ICCAD). 1–9.
[39] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner
Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, et al.
2019. Spectre attacks: Exploiting speculative execution. In Proceedings of IEEE
Symposium on Security and Privacy (S&P). 1–19.
[40] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuffrida, and Elias Athanasopou-
los. 2017. No need to hide: Protecting safe regions on commodity hardware. In
Proceedings of the European Conference on Computer Systems (EuroSys). 437–452.
[41] Volodymyr Kuznetsov, Laszlo Szekeres, Mathias Payer, George Candea, R. Sekar,
and Dawn Song. 2014. Code-Pointer Integrity. In Proceedings of USENIX Sympo-
sium on Operating Systems Design and Implementation (OSDI). 147–163.
[42] Dayeol Lee, David Kohlbrenner, Shweta Shinde, Krste Asanović, and Dawn
Song. 2020. Keystone: An open framework for architecting trusted execution
environments. In Proceedings of the European Conference on Computer Systems
(EuroSys). 1–16.
[43] Samuel Lindemer, Gustav Midéus, and Shahid Raza. 2020. Real-time Thread
Isolation and Trusted Execution on Embedded RISC-V. In Proceedings of the
International Workshop on Secure RISC-V Architecture Design Exploration (SECRISC-
V).
[44] James Litton, Anjo Vahldiek-Oberwagner, Eslam Elnikety, Deepak Garg, Bobby
Bhattacharjee, and Peter Druschel. 2016. Light-weight contexts: An OS ab-
straction for safety and performance. In Proceedings of USENIX Symposium on
Operating Systems Design and Implementation (OSDI). 49–64.
[45] Yutao Liu, Peitao Shi, Xinran Wang, Haibo Chen, Binyu Zang, and Haibing Guan.
2017. Transparent and efficient CFI enforcement with intel processor trace. In
Proceedings of the IEEE International Symposium on High performance computer
architecture (HPCA). 529–540.
[46] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and Yubin Xia. 2015. Thwarting
memory disclosure with efficient hypervisor-enforced intra-domain isolation. In
Proceedings of the ACM SIGSAC Conference on Computer and Communications
Security (CCS). 1607–1619.
[47] Microsoft. 2020. ChakraCore. [online] https://github.com/Microsoft/ChakraCore.
[48] Mozilla. 2020. SpiderMonkey: The Mozilla JavaScript runtime. [online] https:
//developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey.
[49] Soyeon Park, Sangho Lee, Wen Xu, HyunGon Moon, and Taesoo Kim. 2019.
libmpk: Software abstraction for Intel Memory Protection Keys (Intel MPK). In
Proceedings of USENIX Annual Technical Conference (ATC). 241–254.
[50] ARM. 2009. ARM security technology, building a secure system using TrustZone
technology. [online] http://infocenter.arm.com/help/topic/com.arm.doc.prd29-
genc-009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf.
[51] ARM. 2018. ARM Architecture Reference Manual ARMv7-A and ARMv7-R
edition. (2018).
[52] Digilent’s ZedBoard Zynq FPGA. 2020. Development board documentation.
[online] http://www.digilentinc.com/Products/Detail.cfm?Prod=ZEDBOARD/.
[53] Hex-Five. 2020. MultiZone Hex Five Security. [online] https://hex-five.com/.
[54] IBM Corporation. 2017. Power ISA version 3.0b. (2017).
[55] Intel Corporation. 2019. Intel 64 and IA-32 Architectures Software Developers
[56] RISC-V. 2021. RISC-V Proxy Kernel and Boot Loader. [online] https://github.com/
Manual. (2019).
riscv/riscv-pk.
[57] Nick Roessler and André DeHon. 2018. Protecting the stack with metadata
policies and tagged hardware. In Proceedings of the IEEE Symposium on Security
and Privacy (S&P). 478–495.
[58] David Schrammel, Samuel Weiser, Stefan Steinegger, Martin Schwarzl, Michael
Schwarz, Stefan Mangard, and Daniel Gruss. 2020. Donky: Domain Keys–Efficient
In-Process Isolation for RISC-V and x86. In Proceedings of USENIX Security Sym-
posium (Security). 1677–1694.
[59] Mohammadkazem Taram, Ashish Venkat, and Dean Tullsen. 2018. Mobilizing
the micro-ops: Exploiting context sensitive decoding for security and energy
efficiency. In Proceedings of the ACM/IEEE Annual International Symposium on
Computer Architecture (ISCA). 624–637.
[60] Mohammadkazem Taram, Ashish Venkat, and Dean Tullsen. 2019. Context-
sensitive fencing: Securing speculative execution via microcode customization.
In Proceedings of the International Conference on Architectural Support for Pro-
gramming Languages and Operating Systems (ASPLOS). 395–410.
[61] Anjo Vahldiek-Oberwagner, Eslam Elnikety, Nuno O. Duarte, Michael Sammler,
Peter Druschel, and Deepak Garg. 2019. ERIM: Secure, Efficient In-process Isola-
tion with Protection Keys (MPK). In Proceedings of USENIX Security Symposium
(Security). 1221–1238.
[62] Andrew Waterman, Krste Asanovic, and SiFive Inc. 2019. The RISC-V instruction
set manual, volume i: unprivileged ISA, Document Version 20191213. Technical
Report.
[63] Andrew Waterman, Krste Asanovic, and SiFive Inc. 2019. The RISC-V Instruction
Set Manual Volume II: Privileged Architecture, Document Version 20190608-Priv-
MSU-Ratified. Technical Report.
[64] Andrew Waterman, Yunsup Lee, David A Patterson, and Krste Asanovic. 2011.
The RISC-V instruction set manual, volume i: Base user-level ISA. UCB, Tech.
Rep. UCB/EECS-2011-62 (2011).
[65] Yuming Wu, Yutao Liu, Ruifeng Liu, Haibo Chen, Binyu Zang, and Haibing Guan.
2018. Comprehensive VM protection against untrusted hypervisor through retro-
fitted AMD memory encryption. In Proceedings of the International Symposium
on High Performance Computer Architecture (HPCA). 441–453.
[66] Yuanchao Xu, ChenCheng Ye, Yan Solihin, and Xipeng Shen. 2020. Hardware-
Based Domain Virtualization for Intra-Process Isolation of Persistent Memory
Objects. In Proceedings of the International Symposium on Computer Architecture
(ISCA). 680–692.
[67] Jie Zhou, Yufei Du, Zhuojia Shen, Lele Ma, John Criswell, and Robert J Walls.
2020. Silhouette: Efficient protected shadow stacks for embedded systems. In
Proceedings of USENIX Security Symposium (Security). 1219–1236.
[68] Pin Zhou, Feng Qin, Wei Liu, Yuanyuan Zhou, and Josep Torrellas. 2004. iWatcher:
efficient architectural support for software debugging. In Proceedings of the
International Symposium on Computer Architecture (ISCA). 224–235.
A FLEXIBLE FILTERING CAPABILITY
Our Flexible Filters enable a software developer to filter in-
structions at bit granularity. In addition to filtering a specific in-
struction or a subset of an instruction,5
Flexible Filters can
be used to filter a group of instructions. To clarify this capability,
we examined the RV64I base instruction set, which consists of 55
instructions [62]. As shown in Table 6, these instructions can be
5For example, filtering a ret instruction, which is defined as a JALR instruction with
rd = x0, rs1 = x1, and imm = 0.
658ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Leila Delshadtehrani, Sadullah Canakci, William Blair, Manuel Egele, and Ajay Joshi
Table 6: Opcode-based grouping of RV64I instructions [62].
Instruction group Opcode Number of instructions
LUI
AUIPC
JAL
JALR
BRANCH
LOAD
STORE
ALUI
ALU
FENCE
ECALL/EBREAK
0110111
0010111
1101111
1100111
1100011
0000011
0100011
0010011
0110011
0001111
1110011
1
1
1
1
6
7
4
16
15
1
2
Table 7: Cycle counts for FlexFilt configuration.
Mechanism
Function or Instruction
#Cycles
API
config_filter
config_instr_domain
Custom Instruction
as Inline Assembly
SETMATCH
SETMASK
SETPRIV
WRIPR
46
69
4
5
4
4
divided into 11 groups, based on their opcodes. A software devel-
oper can configure a single Flexible Filter to filter any of the
above-mentioned group of instructions. Two or more groups of
instructions can be merged together and form a larger instruction
filtering group. As an example, consider the scenario where a secu-
rity developer defines secure versions of load and store instructions.
Then, she specifies a trusted portion of the code, where she replaces
all the load and store instructions with their secure counterparts.
To ensure that the trusted code does not execute an ordinary store
or load instruction at runtime, we can leverage FlexFilt. We group
all the LOAD and STORE instructions together (11 instructions with
the opcode = 0-00011) and configure one Flexible Filter to
prevent the execution of all the instructions in this group.
B FLEXFILT’S CONFIGURATION OVERHEAD
As discussed in Section 7.3, we devised a microbenchmark to mea-
sure FlexFilt’s configuration overhead. Table 7 shows the average
number of cycles to configure a Flexible Filter and an instruc-
tion domain. As discussed in Section 5.3, we provide a software API
to configure FlexFilt. The software API creates a wrapper function
around the custom instructions to facilitate their use. As expected,
using the software API is more costly compared to leveraging the
custom instructions as inline assembly. For example, leveraging
config_filter function to configure the Flexible Filters takes
46 cycles, on average, while using its corresponding custom instruc-
tions (SETMATCH, SETMASK, and SETPRIV) as inline assembly takes
less than 15 cycles.
659