[1] “Trend Micro: Android much
[2] “Why
than
iPhone,”
http:
//www.electronista.com/articles/11/01/11/trend.micro.warns.
android.inherently.vulnerable/.
electronista News,
less
January
secure
2011.
Android
App
Security
Better
PCWorld News. August
Is
the
iPhone,”
for
http://www.pcworld.com/businesscenter/article/202758/why
android app security is better than for the iphone.html.
security different but matched,”
c-
NET News, July 2010. http://news.cnet.com/8301-27080
3-20009362-245.html.
iPhone
Than
2010.
[3] “Android,
[4] “Smartphone Security Smackdown: iPhone vs. Android,” In-
formationWeek, July 2011. http://www.informationweek.com/
news/security/mobile/231000953.
[5] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner,
the
“Android permissions demystiﬁed,” in Proceedings of
18th ACM conference on Computer and communications
security, 2011, pp. 627–638.
[6] C. Sorrel,
“Apple Approves, Pulls Flashlight App
2010.
with Hidden Tethering Mode,” Wired.
http://www.wired.com/gadgetlab/2010/07/apple-approves-
pulls-ﬂashlight-app-with-hidden-tethering-mode.
July,
[7] H. Lockheimer, “Android and Security,” Google Mobile
Blog, Feb 02, 2012. http://googlemobile.blogspot.com/2012/
02/android-and-security.html.
[8] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wag-
ner, “Android permissions: User attention, comprehension,
and behavior,” in Proceedings of the Symposium on Usable
Privacy and Security (SOUPS), 2012.
[9] Android API level 14, Manifest.permission, http://developer.
android.com/reference/android/Manifest.permission.html.
[10] “Apple, Entitlement Key Reference,” http://developer.apple.
com/library/mac/#documentation/Miscellaneous/Reference/
EntitlementKeyReference/Chapters/AboutEntitlements.html.
[11] G. Paller, Dedexer, http://dedexer.sourceforge.net/.
[12] M. Weiser, “Program slicing,” in Proceedings of
the 5th
international conference on Software engineering, 1981.
[13] J. Sawin and A. Rountev, “Improving static resolution of
dynamic class loading in java using dynamically gathered
environment information,” Automated Software Engineering,
vol. 16, pp. 357–381, June 2009.
[14] “IDApro, a multi-processor disassembler and debugger,” Hex-
Rays, http://www.hex-rays.com/products/ida/index.shtml.
[15] Nemo, “The Objective-C Runtime: Understanding and Abus-
ing,” phrack, Volume 4, Issue 66, http://www.phrack.org/
issues.html?issue=66&id=4.
[16] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS:
Detecting Privacy Leaks in iOS Applications,” in Proceedings
of the Network and Distributed System Security Symposium
(NDSS), San Diego, CA, February 2011.
[17] XE
[18] Words With
Currency
http://itunes.apple.com/app/
xe-currency/id315241195, XE Currency on Android: https:
//play.google.com/store/apps/details?id=com.xe.currency.
iOS:
on
Friends
http:
//itunes.apple.com/app/words-with-friends-free/id321916506,
Android version: https://play.google.com/store/apps/details?
id=com.zynga.words.
version:
Free,
iOS
[19] AdWhirl Developer’s Resources, https://www.adwhirl.com/
home/dev.
[20] Flurry Product Updates, http://blog.ﬂurry.com/updates/bid/
33715/New-Flurry-SDK-Available-for-iPhone-OS-4-0-iOS.
[21] A. Lineberry, D. L. Richardson, and T. Wyatt, These Are Not
the Permissions You Are Looking For, Def Con 18 Hacking
Conference, 2010.
[22] H. Shacham, “The geometry of innocent ﬂesh on the bone:
return-into-libc without function calls (on the x86),” in Pro-
ceedings of
the 14th ACM conference on Computer and
communications security, 2007, pp. 552–561.
[23] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy,
“Privilege escalation attacks on android,” in Proceedings of
the 13th international conference on Information security,
2011, pp. 346–360.
[24] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin,
“Permission re-delegation: attacks and defenses,” in Proceed-
ings of the 20th USENIX conference on Security, 2011.
[25] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry, “Towards taming privilege-escalation attacks
on android,” in 19th Annual Network & Distributed System
Security Symposium, Feb 2012.
[26] W. Enck, M. Ongtang, and P. McDaniel, “Understanding
android security,” IEEE Security and Privacy, 2009.
[27] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A study
of android application security,” in Proceedings of the 20th
USENIX Security Symposium, 2011.
[28] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, you,
get off of my market: Detecting malicious apps in ofﬁcial
and alternative android markets,” in 19th Annual Network &
Distributed System Security Symposium (NDSS), Feb 2012.
[29] L.-K. Yan and H. Yin, “Droidscope: Seamlessly reconstruct-
ing the os and dalvik semantic views for dynamic android
malware analysis,” in Proceedings of the 21st USENIX Secu-
rity Symposium, 2012.
[30] D. Barrera, H. G. u. c. Kayacik, P. C. van Oorschot,
and A. Somayaji, “A methodology for empirical analysis
of permission-based security models and its application to
android,” in Proceedings of the 17th ACM conference on
Computer and communications security, 2010, pp. 73–84.
[31] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel,
“Semantically rich application-centric security in android,” in
Proceedings of the Annual Computer Security Applications
Conference, 2009, pp. 340–349.
[32] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wether-
all, “These aren’t the droids you’re looking for: retroﬁtting
android to protect data from imperious applications,” in
Proceedings of the 18th ACM conference on computer and
communications security, 2011, pp. 639–652.
[33] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic detec-
tion of capability leaks in stock android smartphones,” in 19th
Annual Network & Distributed System Security Symposium,
Feb 2012.
[34] R. Xu, H. Saidi, and R. Anderson, “Aurasium: Practical policy
enforcement for android applications,” in Proceedings of the
21st USENIX Security Symposium, 2012.
[35] S. Shekhar, M. Dietz, and D. S. Wallach, “Adsplit: Separating
smartphone advertising from applications,” in Proceedings of
the 21st USENIX Security Symposium, 2012.
[36] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner, “Addroid:
Privilege separation for applications and advertisers in an-
droid,” in Proceedings of 7th ACM Symposium on Informa-
tion, Computer and Communications Security, 2012.
[37] T. Vidas, N. Christin, and L. Cranor., “Curbing Android
permission creep,” in Proceedings of the Web 2.0 Security
and Privacy 2011 workshop, May 2011.
[38] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. M-
cDaniel, and A. N. Sheth, “Taintdroid: an information-ﬂow
tracking system for realtime privacy monitoring on smart-
phones,” in Proceedings of the 9th USENIX conference on
operating systems design and implementation, 2010.
[39] A. P. Fuchs, A. Chaudhuri, and J. S. Foster, “Scandroid:
Automated security certiﬁcation of android applications.”
University of Maryland, Tech. Rep., 2009.
[40] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyz-
ing inter-application communication in android,” in Proceed-
ings of the 9th international conference on Mobile systems,
applications, and services, 2011, pp. 239–252.
[41] N. Seriot, “iPhone Privacy,” BlackHat Technical Security
Conference DC, 2010, http://seriot.ch/resources/talks papers/
iPhonePrivacy.pdf.
[42] G. Salton, A. Wong, and C. S. Yang, “A vector space
model for automatic indexing,” Communications of the ACM,
vol. 18, pp. 613–620, November 1975.
[43] V. Levenshtein, “Binary Codes Capable of Correcting Dele-
tions, Insertions and Reversals,” Soviet Physics Doklady,
vol. 10, p. 707, 1966.
APPENDIX A.
t
(cid:2)
∑
t
i=1 w2
i;1
√∑
CROSS-PLATFORM APPLICATIONS IN CANDIDATE SETS
As shown in Table X, the conditions of selecting appli-
cations in each candidate set depend on the similarity of
three attributes: application name, developing company and
application description. We use Vector Space Model [42],
one of the classical models in information retrieval, to com-
pare the descriptions. The similarity between two application
descriptions is calculated using:
√∑
i=1 wi;1 (cid:2) wi;2
d2
d2j =
(cid:0)!
d1 and
(cid:0)!
d1 (cid:1) (cid:0)!
j(cid:0)!
d1j (cid:2) j(cid:0)!
sim(d1; d2) =
(cid:0)!
where
d2 denote the descriptions of two applications
(one on Android, and the other one on iOS), after removing
stop words, pure numbers and HTML tags (such as ,
) from the descriptions. wi;j is the weighting for the ith
term in description dj which is assigned with the frequency
of the term. The threshold for the high/low similarity score
is set to 0:45 by manual tuning to obtain a good trade-off
between the number of false positives and false negatives.
The similarity of the application names (as used in the
rule of candidate set CS4) is measured with Levenshtein
Distance [43], as names are usually short string which
contains only a few characters. One example for the cross-
platform applications with similar names is ActDroid on
Android and ActPhone on iOS – their name distance is 4
and their description similarity is 0.56.
t
i=1 w2
i;2
We apply the corresponding rules to the entire application
data set collected, and the number of application pairs in
each candidate set is shown in Table X. The percentage
shown in the table is calculated based on the total number
of Android applications collected, which is 312,171. After
obtaining those candidate sets, we then randomly choose 60
application pairs in each set to perform a manual validation –
App Candidate Set
CANDIDATE SETS FOR CROSS-PLATFORM APPLICATIONS: CONDITIONS AND STATISTICAL RESULTS
Percentage
Unique App Pairs
Table X
Conditions*
same appName, same Company, high similarity Description
same appName, same Company, low similarity Description
same appName, diff Company, high similarity Description
similar appName, same Company, high similarity Description
same appName, diff Company, low similarity Description
20,171
2,230
8,870
10,837
14,046
6:46%
0:71%
2:84%
3:47%
4:50%
True Positive Rate
t 100%
> 98:3%
83:3%
68:3%
6:67%
* The high/low similarity threshold for Description is set to 0.45, and the edit distance threshold for similar appName is set to (cid:20) 5.
CS1
CS2
CS3
CS4
CS5
we manually read the descriptions of these two applications,
examine their companies, icons and screenshots to judge
whether they are actually cross-platform applications. Dur-
ing our manual veriﬁcation, no false positives are found in
the CS1 set, but one false positive is found in the CS2 set
which is caused by parsing error of non-unicode characters.
∑
The results presented in Table X enable us to estimate the
total amount of cross-platform applications exist on both An-
i PercentCSi(cid:2)TPRCSi,
droid and iOS. Applying formula
where i 2 f1; 2; :::5g, and TPRCSi
is the true positive
rate of the corresponding candidate set, we get the result
12:2%. This indicates that, among those existing third-party
applications on Android, approximately 1/8 of them have a
replica application provided for iOS.
APPENDIX B.
API RESOLVING RATE OF ANALYSIS TOOLS
On the Android platform, Java reﬂection is found to
be commonly used [5], which is also conﬁrmed by our
observation. Among the 1,300 Android applications being
tested, we found that 951 (73%) use Java reﬂections to
make API calls. However, the absolute number of reﬂections
invoked is only 9,943, which means each application only
make 7.6 reﬂection calls on average. This is a small amount
(0.07%) compared to 10,778 API calls made by each ap-
plication on average. Among all the reﬂections observed,
our Android static analysis tool is able to resolve 7,859
(79%) reﬂections. This indicates that out of thousands of
API calls issued per application, only 1.6 API calls are
not resolved on average. Our tool failed to resolve the
reﬂection call if the method name or class name is not
generated statically. For example, some reﬂections invoke
java.lang.Class.getDeclaredMethods with no parameters which
simply return an array of methods, and then according to
some dynamic rules, the code will pick one of the methods
to invoke. Cases like this are very difﬁcult to be resolved in
a static manner [13], which is one of the limitations in our
current implementation.
When applying our static analysis tool
to the 1,300
iOS applications, we ﬁnd that on average, 16.63% of the
instructions in each application belong to C/C++ code and
83.12% instructions belong to Objective-C code; while the
rest 0.25% are dummy instructions or the instructions that
our tool is unable to interpret. Our tool is able to capture all
the invocations for the API calls that are invoked through
C/C++ functions; while for the API calls in the disassembled
Objective-C code, our tool is able to resolve 89.7% of the
objc msgSend encountered. There are at least two cases
where a given objc msgSend cannot be resolved. 1) The
corresponding class instance is passed from the runtime as
an argument of a callback function. 2) The class instance is
retrieved from a collection object such as an array that can
hold any types of objects. Such a limitation also exists in
other static analysis tools on iOS platform [16]. Although
not all objc msgSend methods are able to be resolved, it only
has quite limited inﬂuence in our experiments. The reason
is that a number of API invocations for the same SS-API
type are usually observed in an application, so that missing
a small portion of API calls will not make our tool overlook
the corresponding SS-API type in most cases.
APPENDIX C.
ANALYSIS RESULTS OF PAID APPLICATIONS
We performed the analysis on the most popular 100 pairs
of paid cross-platform applications. For the 20 different SS-
API types that are both supported on iOS and Android, the
results show that the 100 paid applications on Android use a
total amount of 297 SS-API types; while the corresponding
100 paid applications on iOS use 508 SS-API types. 79 of
the iOS applications use additional SS-API types compared
to its Android version. These results are consistent with our
main ﬁndings on popular free applications. Although paid
applications contain less advertising libraries, our results
show that the applications’ own code contributes more to
the difference in the SS-API usage, as shown in Table XI.
TOP 5 SS-API TYPES THAT ARE ACCESSED DIFFERENTLY BY PAID
Table XI
apps
APPLICATIONS.
iOS
Android
apps
51
79
68
35
79
9
41
38
12
56
Only
iOS
41
40
38
32
26
Exclusive
Lib/App Ratio
14% / 64%
12% / 53%
0% / 100%
63% / 32%
2% / 97%
SS-API type
CAMERA
READ DEVICE ID
WAKE LOCK
ACCESS LOCATION
ACCESS NETWORK INFO