CT RT
CT RT
2,048
1,024
371
392
2.3 20.5
1.4
2.9
1.3 10.1
1.4
3.1
14,400
3,840
1,395 1,454
12.8 81.6
13.8
18.1
6.5 35.0
4.6
7.0
122
Table 4.7: Runtimes (in milliseconds) for SHE noise and ciphertext management operations
like rescaleCT and keySwitch (relinearization) from a quadratic ciphertext, with a circular
hint. The rescaleCT benchmark scales from (the product of) two moduli to one. The
keySwitch benchmark uses a single ciphertext modulus and a hint with two moduli, and a
two-element gadget for decomposition (subsection 3.2.4).
𝑚′
𝜙(𝑚′)
rescaleCT
keySwitch
CT RT
CT
RT
2,048
1,024
2.3 17.9
7.4
53.4
14,400
3,840
15.2 65.2
37.0 308
Ring Tunneling
In the ring-tunneling algorithm ( subsection 4.3.6), we convert a ciphertext in a cyclotomic
ring 𝑅′ to one in a different cyclotomic ring 𝑆′ which has the side effect of evaluating
a desired 𝐸-linear function, where 𝐸 = 𝑅 ∩ 𝑆 is the intersection of the corresponding
plaintext rings. The performance of this algorithm depends on the dimension dim(𝑅′/𝐸′)
because the procedure performs dim(𝑅′/𝐸′) key switches. Since ring switching can only
apply an 𝐸-linear function on the plaintexts, there is a tradeoff between performance and
the class of functions that can be evaluated during ring switching. In particular, when
dim(𝑅′/𝐸′) = dim(𝑅/𝐸) is small, ring switching is fast but the plaintext function is highly
restricted because 𝐸 is large. When dim(𝑅′/𝐸′) is large, we can apply a wider class of
functions to the plaintexts, at the cost of many more (expensive) key switches. Indeed, in
many applications it is convenient to switch between rings with a small common subring,
e.g. 𝐸 = 𝒪1.
As shown in [AP13], we can get both performance and a wide class of linear functions
by performing a sequence of switches through adjacent hybrid rings, where the intersection
between adjacent hybrid rings is large. Figure 4.4 gives a sequence of hybrid rings from
𝑅 = 𝐻0 = 𝒪128 to 𝑆 = 𝐻5 = 𝒪4,095. It also gives the corresponding ciphertext superring,
123
which needs to be larger than small plaintext rings for security. Such a sequence of hybrid
rings could be used for bootstrapping ([AP13]) or for the homomorphic evaluation of the
PRF in [BP14].
𝑅′ = 𝐻′
𝒪128·7·13
0
𝐻′
1𝒪64·7·13
𝒪128
𝑅 = 𝐻0
𝒪64·7
𝐻1
𝐻′
2𝒪32·7·13
𝒪32·7·13
𝐻2
𝐻′
3𝒪8·5·7·13
𝒪8·5·7·13
𝐻3
𝐻′
4𝒪4·3·5·7·13
𝒪4·3·5·7·13
𝐻4
5 = 𝑆′
𝐻′
𝒪9·5·7·13
𝒪9·5·7·13
𝐻5 = 𝑆
Figure 4.4: A real-world example of hybrid plaintext/ciphertext rings that could be used to
efﬁciently tunnel from 𝑅 = 𝒪128 to 𝑆 = 𝒪4,095.
Table 4.8 includes timing data for each ring tunnel in Figure 4.4, using only good moduli
as above. As with other operations, ring tunneling scales linearly in the number of moduli,
so the numbers below are reported for a single modulus.
Table 4.8: Runtimes (in milliseconds) for ring tunneling, using one ciphertext modulus and
TrivGad for constructing key-switch hints.
Tunnel
𝐻0 → 𝐻1
𝐻1 → 𝐻2
𝐻2 → 𝐻3
𝐻3 → 𝐻4
𝐻4 → 𝐻5
CT
RT
46.4
32.3
50.0
32.9
33.2
185
127
128
84.2
96.4
124
CHAPTER 5
ALCHEMY: A LANGUAGE AND COMPILER FOR HOMOMORPHIC
ENCRYPTION MADE EASY
5.1
Introduction
The concept of homomorphic encryption was ﬁrst envisioned almost 40 years ago as a
powerful way to enable new privacy-aware applications. In the eight years since Gentry
gave the ﬁrst plausible construction [Gen09b; Gen09a], there have been a number of imple-
mentations targeting particular applications of interest (see, e.g., [GH11; NLV11; GHS12c;
HS15; DM15; CLP17] and chapter 4). Unfortunately, the impact of this cryptographic “holy
grail” has been tempered by the difﬁculty of using it. The primary usability challenge in
all existing implementations is the level of expertise needed to satisfactorily implement a
desired homomorphic computation:
1. First, one must express the “in the clear” computation (on plaintexts) in terms of the
FHE scheme’s native homomorphic operations, or “instruction set.” This is non-trivial
because the native instructions, which can vary based on the scheme, are typically
algebraic operations like addition and multiplication on ﬁnite ﬁelds, and sometimes
other functions like permutations on ﬁxed-sized arrays of ﬁeld elements. So one needs
to “arithmetize” the desired computation in terms of these operations, as efﬁciently
as possible for the instruction set at hand. (Moreover, the native instruction set can
sometimes depend on the choice of plaintext and ciphertext rings, which also affects
the third step below.)
2. Second, HE ciphertexts accumulate “errors” or “noise” under homomorphic opera-
tions, and too much noise causes the result to decrypt incorrectly—so proper noise
management is essential. In addition, the ciphertext size (or degree) increases under
125
certain homomorphic operations, but can be brought back down via additional steps.
So along with the homomorphic operations that perform “real work,” one must also
carefully schedule appropriate “maintenance” operations, such as linearization and
other forms of key switching, and rescaling (also called modulus switching) to keep
the noise as small as possible.
3. Third, one must choose appropriate parameters for the desired level of security, i.e.,
appropriate ciphertext dimensions and moduli relative to the noise rates at the various
stages of the computation (and subject to any restrictions inherited from the ﬁrst step).
Importantly, the choice of parameters feeds back to affect the noise growth incurred
by the homomorphic operations, so one may need many cycles of trial and error until
the parameters stabilize.
4. Lastly, one also needs to generate all the needed keys and auxiliary key-switching
“hints” that are needed for the maintenance operations, and to encrypt the input
plaintexts under the appropriate keys.
In summary, the above process requires a great deal of expertise in both the theory of HE
and the quirks of its particular implementation, in addition to a lot of manual programming
and trial-and-error. Perhaps for this reason, most applications of HE to date have been ad-
hoc, one-off implementations, with complex code that is hard to debug and which obscures
the nature of the underlying computation.
A new approach. This work introduces ALCHEMY, a system that greatly accelerates
and simpliﬁes the implementation of homomorphic computations. 1 With ALCHEMY, one
expresses a desired “in the clear” computation on plaintexts in a domain-speciﬁc language
of simple operations, and higher-level functions built out of them. A key point is that this
1ALCHEMY is now publicly available under a free/open-source license at https://github.com/
cpeikert/lol/tree/alchemy-args-debruijn-monad.
126
requires no detailed knowledge of the HE scheme; one simply writes (and runs, and debugs)
a program that describes what should be computed on the plaintexts.
One then uses an ALCHEMY compiler to automatically transform the plaintext program
into a corresponding homomorphic program on ciphertexts. The compiler deals with the
cumbersome but rote tasks of tracking the noise and scheduling appropriate “maintenance”
operations to control it, choosing (most of) the parameters, generating keys and hints, etc.
In addition, compilers can be composed together to provide other useful functionality.
In short, ALCHEMY lets programmers write clear and concise code describing what
they really care about—the plaintext computation—and get a corresponding homomorphic
computation without needing any particular expertise in HE. ALCHEMY ﬁts seamlessly into
typical HE usage scenarios to reduce the overhead of producing homomorphic computations.
In the rest of this introduction we describe the approach in more detail, and give some simple
examples that show ALCHEMY’s convenience and ﬂexibility. (A richer example application
and is detailed in chapter 6.)
5.1.1 Principles of ALCHEMY
ALCHEMY is a collection of domain-speciﬁc languages (DSLs) for expressing plaintext and
(homomorphic) ciphertext computations, and interpreters that act on programs written in
these languages. The word “interpreters” is meant broadly, and encompasses (among others)
evaluators, optimizers, and, most signiﬁcantly, “compilers” that transform programs from
one language to another.
ALCHEMY is highly modular and extensible: the DSLs are made up of small components
that each yield particular language features, are easy to deﬁne, and can be combined
arbitrarily. Interpreters can be deﬁned to support any subset of the language components,
and can easily be extended to support new ones. In addition, ALCHEMY’s interpreters
can easily be composed with each other to perform a variety of different tasks on the
same program, e.g., evaluating a plaintext computation “in the clear,” compiling it to a
127
corresponding homomorphic computation, printing a representation thereof, and tracking
the noise growth as it is evaluated.
Another primary goal of ALCHEMY is safety: only well-formed programs should be
accepted, and the possibility of runtime errors or internal bugs should be minimized, or even
eliminated. For these purposes, the ALCHEMY DSLs are functional (pure), statically typed
with a rich type system, and have strong type inference.
• Purity means that a function always yields the same output when given the same
inputs (no side-effects or global variables), which is a good match for the arithmetic
functions and “circuits” that are common targets for homomorphic computation.
• Static typing means that every expression has a type that is known at compile time, and
only well-formed expressions typecheck. This allows many common programming
errors—in DSL code, and in ALCHEMY’s own interpreters—to be caught early on.
The type system is very rich, allowing many safety properties to be encoded into types
and automatically veriﬁed by the type checker.
• Type inference ensures that the types of almost all DSL expressions are automatically
determined by the type checker, and need not be speciﬁed by the programmer. This
makes code more concise and readable, and easier to check for correctness.
We obtain all the above-described properties by deﬁning the DSLs and interpreters in
the metalanguage Haskell, from which ALCHEMY directly inherits its basic syntax, data
types and structures, and safety features—with no special implementation effort or extra
complexity. As its underlying HE implementation, ALCHEMY uses a BGV-style [BGV14]
SHE cryptosystem as reﬁned and implemented in Λ∘𝜆 [CP16b]. We emphasize that much
of the framework could be reused without modiﬁcation for any target SHE or FHE scheme.
Languages. Domain-speciﬁc languages (DSLs) have long been appreciated as useful
tools for working in a speciﬁc problem domain; e.g., LATEX is a (Turing-complete) DSL for
128
typesetting documents, and MATLAB is a DSL targeted toward numerical computing and
linear algebra.
ALCHEMY’s ﬁrst major component is a collection of modular and extensible DSLs for
expressing both “in the clear” computations on plaintexts, and homomorphic computations
on ciphertexts. Following the powerful “typed tagless ﬁnal” approach to embedded language
design [Kis10], each DSL is the union of several independent and composable language
components. ALCHEMY provides language components that introduce the following features
into the DSLs:
• data types for plaintexts rings and HE ciphertexts;
• simple data structures like tuples and lists;
• arithmetic operations like addition and multiplication, and also arbitrary linear func-
tions between plaintext rings;
• ciphertext operations corresponding to the interface of the underlying SHE implemen-
tation;
• programmer-deﬁned functions, including higher-order functions (i.e., those that take
other functions as input);
• and even speciﬁcally limited side-effects, via monads.
It is easy to introduce additional data types and language features as needed, simply by
deﬁning more language components.
Both the plaintext and ciphertext DSLs include the generic language components for
data structures, arithmetic operations, and functions. In addition, each one includes cer-
tain components that relate speciﬁcally to plaintext or ciphertext operations. Because the