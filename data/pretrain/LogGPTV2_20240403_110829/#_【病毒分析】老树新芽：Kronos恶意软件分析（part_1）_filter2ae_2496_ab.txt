3\. 添加自己的代码并修改入口点，以便重定向执行自己的代码
4\. 恢复挂起的进程，让注入的代码执行
通过下面的图，我们可以看到被感染的svchost进程的内存分布情况（在早期版本中，恶意代码被注入到浏览器中），恶意软件被添加到一个新的、虚拟的PE节中-在给定的示例中，映射地址为0x70000：
上图就是修改svchost进程入口点后的结果，我们可以看到，执行被重定向到PE文件节内的地址中去了：
注入的PE文件现在以不同的函数开始执行：
恶意软件的原始入口点地址为RVA 0x12F22：
如果恶意软件在检测到在VM或调试器的情况下运行，样本则会在注入后不久崩溃。
**从新的入口点运行样本**
****
恶意软件的主要操作在注入模块内部启动，下图所示为样本的新入口点：
主要功能是负责加载导入恶意软件所需的模块，然后执行导入的各个功能。
从上图可以看出，函数的第一块代码主要是负责填写注入模块的导入表。如果我们想要从新的入口点运行样本，而不是在样本注入后，我们需要关注下面一些事情：首先，装载器应该在注入的可执行文件中填充一些变量，例如
**module_base** 变量。由于其他函数需要使用这些变量，如果不包含有效值，恶意软件样本在运行时会崩溃。此外，导入表中（除了 **.rdata**
节）填充的函数需要设置为可写，这是因为完整的PE文件以RWX访问权限映射到内存中，因此恶意软件样本在注入之后也需要被设置为可写入。
其实，从主函数的下一个代码块也可以成功运行Kronos样本，在这种情况下Windows加载程序会自动填充导入表，而不需要我们手动的去执行填充操作。
下面我们来看一看恶意软件是如何绕过安全检测的。
**防御技巧**
****
恶意软件通过多次检测运行环境来部署防御。这些检查是非常标准的，例如搜索黑名单的进程，模块等。特定的一系列检查从下图中的一个函数调用开始，并将结果存储在一个变量中：
如果检测到调试器或者是VM，则该变量被赋予非零值，并且恶意软件会崩溃以及中断分析。
虽然恶意软件是一个32位的PE文件，但在32位或64位系统上会有不同的执行路径，因此恶意软件首先回去探测目标系统的指纹信息并设置一个标志位用来标识目标系统的体系架构：
    DWORD is_system64_bit()
    {
        DWORD flag = 0;
        __asm {
        xor eax, eax
        mov ax, cs
        shr eax, 5
        mov flag, eax
    };
        return flag;
    }
如果检测到 **调试器** 或者是 **VM** ，则表示架构的标志位会被重置：
**这就是为什么一旦执行路径参数被设置，样本就会在下一步崩溃的原因** 。例如，如果样本部署在64位机器上，可以使用 **FS:[0xC0]**
指定的地址来执行系统调用。但如果恶意软件在32位计算机上运行， **FS:[0xC0]** 指示的值将为NULL，因此如果调用它将会导致样本崩溃。
在检测到VM或者调试器之后， **样本不会立即退出，这在一定程度上加大了分析人员找出崩溃的原因的难度，这也正是这种中断分析方法的高明之处** 。
**使用原始系统调用**
****
如前一段所述，Kronos使用原生系统调用。Syscall基本上意味着允许从用户模式调用内核实现的一些功能接口。应用程序通常通过系统DLL导出的API（可以在[EvilSocket的博客](https://www.evilsocket.net/2014/02/11/on-windows-syscall-mechanism-and-syscall-numbers-extraction-methods/)上找到的详细说明）来使用它们。由于监视工具可以轻松的检测到这些系统DLL导出这些API调用，因此一些恶意软件在实现上只是偷偷读取DLL中的系统调用号，并且通过它自己的代码来调用它们，这个技巧已经被[Floki
bot](https://blog.malwarebytes.com/threat-analysis/2016/11/floki-bot-and-the-stealthy-dropper/)使用了。
我们来看看它是如何在Kronos中实现的。首先，它从系统DLL中获取系统调用号。如前所述，函数通过其名称的哈希值来标识（[Lexsi报告](https://www.lexsi.com/securityhub/overview-kronos-banking-malware-rootkit/?lang=en)中有详细的阐述）。
例如：
    B6F6X4A8R5D3A7C6  - > NtQuerySystemInformation
系统调用号存储在变量中，并使用一个常数做了XOR混淆。下图中的代码片段负责从DLL中提取原始系统调用：
为了进一步使用它们，对于每一个使用过的系统调用程序，Kronos使用适当数量的参数来实现自己的包装函数，如下图所示：
EAX寄存器包含系统调用号，在给定的例子中，它代表以下函数：
    00000105  - > NtQuerySystemInformation
一般情况下，由于与进程注入相关的函数通常会触发警报，因此Kronos使用原始系统调用来调用它们，通过这种方式调用的函数如下所示：
    NtAllocateVirtualMemory
    NtCreateFile
    NtCreateSection
    NtGetContextThread
    NtOpenProcess
    NtProtectVirtualMemory
    NtQueryInformationProcess
    NtQuerySystemInformation
    NtResumeThread
    NtSetContextThread
    NtSetValueKey
它与黑市中的那篇帖子中提到的“ 木马使用未被检测到的注入方法 ”（[来源](http://securityintelligence.com/the-father-of-zeus-kronos-malware-discovered/)）内容相匹配。
**Rootkit和hooking引擎**
****
Kronos 恶意软件提供的另一个功能是用户级rootkit，它通过
hook进程的API使得安全检测工具无法注意到它的存在。它的hook是通过一个特制的shellcode块来实现的，这些块被植入每个可访问的运行过程中，具体操作流程如下所示：首先，Kronos准备要植入的shellcode块，并填写所有必要的数据，其中包括要使用的函数地址以及恶意软件安装过程中产生的需要隐藏的特殊数据；然后，它会搜索正在运行的进程，并尽可能地至此那个注入操作。有趣的是，
**explorer.exe** 和 **chrome.exe** 被跳过了：
shellcode被部署在受感染进程的新线程中：
下面可以看到被感染进程内存中的shellocode：
运行时，它将会对受感染进程的地址空间中的以下函数执行hook操作：
    ZwCreateFile
    NtOpenFile
    ZwQueryDirectoryFile
    NtEnumerateValueKey
    RtlGetNativeSystemInformation
    NtSetValueKey
    ZwDeleteValueKey
    ZwQueryValueKey
    NtOpenProcess
Kronos上面的实现与[MalwareTech在2015年1月的博客](https://www.malwaretech.com/2015/01/inline-hooking-for-programmers-part-2.html)上描述的一个hook引擎相似。通过对Kronos
hook引擎的分析，我们发现Kronos的这一部分确实来源于MalwareTech的想法。然而，事实证明，这种技术早就出现了（即在[这里](http://www.rohitab.com/discuss/topic/33771-patch-hook/?p=10062694)，//感谢 [@xorsthings](https://twitter.com/xorsthings)的链接）。
在执行hooking操作期间很有可能会遇到并发的问题，因为如果对一个函数正在执行修改操作的同时另一个线程也需要调用这个函数，那么就会导致应用程序将崩溃。因此为了避免这种情况，最好通过单个汇编指令来执行hook操作。MalwareTech引擎中使用
**lock cmpxch8b** 指令来完成这个目的，类似的实现可以在Kronos中找到。
通过分析我们发现Kronos恶意软件使用的hooking函数需要两个参数：要hook的函数地址以及用作代理的函数地址，下图所示的是植入的shellcode中的一个代码片段，在该代码片段中hooking函数被调用：
首先，hooking函数在被攻击函数的代码中搜索合适的位置以用来执行hook操作：
以上代码功能的实现可以在github上找到：
然后，恶意软件执行hook操作：
我们发现，MalwareTech github上的代码实现和上述执行的hook操作几乎相同：
下图所示的是Kronos恶意软件对ZwResumeThread函数执行hook操作的一个例子，从图中我们可以看到， **lock cmpxch8b**
指令确实被用来修改函数开始的代码：
Hook操作完成后，每当受感染的进程调用被hook的函数时，执行将重定向到恶意模块中的代理代码：
Kronos使用的hook机制整体看起来更加复杂，因为Kronos恶意软件使用的是一个shellcode而不是一个PE文件，在实现上难度就已经很高了，恶意软件作者必须自己填写所有的函数地址。而且，Kronos的作者在预测现实场景可能碰到的问题上也表现出更多的经验。例如，他特别注意检查代码是否没有被其他木马或监控工具hook：
**攻击浏览器**
****
Kronos恶意软件将一个额外的模块（ **injlib-client.dll**
）注入到浏览器，下面我们可以看到一个注入到Firefox地址空间的一个DLL的例子：
恶意软件在前期注入的shellcode的帮助下启动注入模块：
通过分析我们可以发现，恶意软件对被攻击浏览器导入的一些函数执行了hook操作，以便通过它们的所有数据都能够被Kronos模块截获到，然后将被挂钩
API抓取的数据发送到主模块，主模块在分析和处理之后将数据报告给C&C服务器。
**结论**
****
总体来说，Kronos的使用技巧表明，该作者在制作恶意软件方面具有丰富的经验。恶意软件的实现上代码是完全混淆的，并且还需要熟悉操作系统的一些底层操作技巧。作者不仅使用了有趣的技巧，而且还以合适的逻辑和方式将它们连接起来，因此我们觉得，Kronos恶意软件是由一个经验丰富的开发人员开发的。