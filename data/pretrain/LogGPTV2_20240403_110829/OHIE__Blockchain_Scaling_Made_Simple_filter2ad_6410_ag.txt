Scaling Blockchain via Full Sharding. In CCS (2018).
RapidChain:
APPENDIX
A. Proof for Lemma 4
Lemma 4 directly follows from Lemma 6 and Lemma 7,
which we will state and prove next. To prove Lemma 6 and
Lemma 7, we will need Lemma 5. Lemma 5 shows that
except some exponentially small probability, given a block B
and regardless of whether B is an honest block or malicious
block, the value of (cid:98)B (and in particular, the value of (cid:98)B.rank
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
102
/ (cid:98)B.next rank) must be the same on all honest nodes.
(cid:98)B.rank ((cid:98)B.next rank) values on different honest nodes. In
This avoids the need of reasoning about potentially different
the following, we will state and prove Lemma 5 through 7,
one by one.
Lemma 5. Consider the execution of (k, p, λ, T )-OHIE
against any given adversary A. With probability at
least
1 − exp(−Ω(λ)), there will never be two honest nodes u1
and u2 adding (B1,(cid:99)B1) and (B2,(cid:99)B2) to their local set of
blocks, respectively, such that B1 = B2 and (cid:99)B1 (cid:54)= (cid:99)B2.
that
Proof. Deﬁne bad1 to be the event
the execution
(of (k, p, λ, T )-OHIE against A) contains some invocations
hash(x1) and hash(x2) such that x1 (cid:54)= x2 and hash(x1) =
hash(x2). Given that we model the hash function as a random
oracle, and given that the length of the execution is poly(λ),
we have Pr[bad1] = exp(−Ω(λ)).
Next deﬁne bad2 to be the event that the execution (of
(k, p, λ, T )-OHIE against A) contains some invocation of
hash() that belongs to one of the following two categories:
• For some B, some honest node invokes hash(B) at
Line 42 of Figure 3 and the veriﬁcation at that line
succeeds (i.e., hash(B) indeed equals (cid:98)B.hash), despite
that hash(B) has never been previous invoked (by either
some honest node or the adversary) in the execution.
• Some honest node invokes hash() at Line 43 of Fig-
ure 3 and the Merkle veriﬁcation at that line succeeds,
despite the following: Let hash(x1), hash(x2),
. . . ,
hash(xlog2 k) be the log2 k hash invocations done by
the honest node during the successful Merkle veriﬁcation.
There exists some xi (1 ≤ i ≤ log2 k) such that hash(xi)
has never been previously invoked (by either some honest
node or the adversary) in the execution.
Again given that we model the hash function as a random
oracle, and given that the length of the execution is poly(λ),
one can easily verify that Pr[bad2] = exp(−Ω(λ)).
A simple union bound then shows that with probability at
least 1 − exp(−Ω(λ)), neither bad1 nor bad2 happens. It
now sufﬁces to prove that conditioned upon neither of the bad
An attachment consists of ﬁve ﬁelds, namely, hash, leaf,
leaf proof, rank, and next rank. We will reason about
these one by one.
events happening, if B1 = B2, then we must have (cid:99)B1 = (cid:99)B2.
Since B1 = B2, and since (B1,(cid:99)B1) and (B2,(cid:99)B2) have
(cid:99)B1.hash = (cid:99)B2.hash. We next prove(cid:99)B1.leaf = (cid:99)B2.leaf and
(cid:99)B1.leaf proof = (cid:99)B2.leaf proof. Since u1 has veriﬁed the
Merkle proof before accepting (B1,(cid:99)B1), u1 must have invoked
been accepted by u1 and u2 respectively, we trivially have
hash(x) for some x of length 2λ, with the return value of
such invocation being B1.root. Since bad1 and bad2 do not
happen, such an x must be unique. Let x0|x1 ← x, where x0
and x1 are both of length λ. Following this process for log2 k
steps (we are effectively tracing down the Merkle tree), we
will ﬁnd a unique x⊥ value, which corresponds to leave i of
the Merkle tree, with i being the last log2 k bits of (cid:99)B1.hash.
the same argument and since B1.root = B2.root, we must
Since bad1 and bad2 do not happen, in order for (B1,(cid:99)B1) to
pass the veriﬁcation by u1, we must have (cid:99)B1.leaf = x⊥. By
also have (cid:99)B2.leaf = x⊥. Hence we conclude (cid:99)B1.leaf =
(cid:99)B2.leaf. A similar argument shows that (cid:99)B1.leaf proof =
(cid:99)B2.leaf proof as well.
A1 be any block on u1 such that (cid:99)A1.hash = x⊥, where x⊥ is
block on u1 such that (cid:99)C1.hash = B1.trailing, and let C2
be any block on u2 such that (cid:99)C2.hash = B2.trailing =
obtained as above. Similarly deﬁne A2. Since bad1 and bad2
do not happen, we must have A1 = A2. Next, let C1 be any
Next we move on to the rank and next rank ﬁelds. Let
B1.trailing. Similarly, we must also have C1 = C2.
Consider the DAG G1 consisting of all the blocks on u1 as
vertices, where for each block B1, there is an edge to B1
from the corresponding A1, and another edge to B1 from
the corresponding C1. We do a topological sort of all the
vertices in G1, and assume that B1 is the jth block in the
topological sort. (Note that j is based on B1 and G1, and
has nothing to do with B2.) We will do an induction on j to
show that for all B1 = B2, we have (cid:99)B1.rank = (cid:99)B2.rank and
(cid:99)B1.next rank = (cid:99)B2.next rank.
The induction basis for j from 1 to k trivially holds (these
are the k genesis blocks). Now assume that
the previous
claim holds for all j < j1, and we prove the claim for
j = j1. Since B1 is the j1-th block in the topological sort, the
position of A1 and C1 in the topological sort must be before
j1. Furthermore, we have shown earlier that A1 = A2 and
C1 = C2. We can thus invoke the inductive hypothesis on A1
and C1, which shows that (cid:99)A1.next rank = (cid:99)A2.next rank
and(cid:99)C1.next rank =(cid:99)C2.next rank. By Line 49 in Figure 3,
(cid:99)B1.rank is set
to be the same as (cid:99)A1.next rank, while
(cid:99)B2.rank is set
to be the same as (cid:99)A2.next rank. Hence
we have (cid:99)B1.rank = (cid:99)B2.rank. A similar argument shows
(cid:99)B1.next rank = (cid:99)B2.next rank.
Lemma 6. If the three properties in Theorem 2 hold for each
of the k chains in (k, p, λ, T )-OHIE, then with probability at
least 1 − exp(−Ω(λ)), (k, p, λ, T )-OHIE satisﬁes the consis-
tency property in Theorem 1.
Proof. Lemma 5 shows that with probability at least 1 −
exp(−Ω(λ)), there will never be two honest nodes adding
(B1,(cid:99)B1) and (B2,(cid:99)B2) to their respective local set of blocks,
such that B1 = B2 and (cid:99)B1 (cid:54)= (cid:99)B2. This means that for each
block B accepted by an honest node, its rank and next rank
on this honest node will be the same as the corresponding
values on all other honest nodes. Hence we can directly refer
to the rank and next rank of a block B, and no longer
need to consider the values of (cid:98)B.rank and (cid:98)B.next rank
on individual nodes. All our following discussion will be
conditioned on this.
The following restates the consistency property in Theo-
rem 1, which we need to prove:
• (consistency) Consider the SCB S1 on any node u1 at
any time t1, and the SCB S2 on any node u2 at any time
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
103
t2.19 Then either S1 is a preﬁx of S2 or S2 is a preﬁx of
S1. Furthermore, if (u1 = u2 and t1 < t2) or (u1 (cid:54)= u2
and t1 + ∆ < t2), then S1 is a preﬁx of S2.
Let the view of node u1 at time t1 be Ψ1, and the view of
node u2 at time t2 be Ψ2. Let x1 and x2 be the confirm bar
in Ψ1 and Ψ2, respectively. Without loss of generality, assume
x1 ≤ x2. Let S1 and S2 be the SCB in Ψ1 and Ψ2,
respectively. The next will prove that S1 is a preﬁx of S2.
In the proof, we will sometimes use set operations over S1
and S2. For example, S1 ∩ S2 refers to the set of common
blocks in S1 and S2.
Let F1(i) be the sequence of partially-conﬁrmed blocks on
chain i in Ψ1. Let G1(i) be the preﬁx of F1(i) such that G1(i)
contains all blocks in F1(i) whose rank is smaller than x1.
Similarly deﬁne F2(i) and G2(i), where G2(i) contains those
blocks in F2(i) whose rank is smaller than x2. We ﬁrst prove
the following two claims:
• For all i where 0 ≤ i ≤ k − 1, G1(i) is a preﬁx of
G2(i). To prove this claim, note that by the consistency
property in Theorem 2, either F1(i) is a preﬁx of F2(i)
or F2(i) is a preﬁx of F1(i). If F1(i) is a preﬁx of F2(i),
then together with the fact that x1 ≤ x2, it is obvious
that G1(i) is a preﬁx of G2(i). If F2(i) is a preﬁx of
F1(i), let x3 be the rank of the last block in F2(i). This
also means that the next rank of that block is at least
x3 + 1. By our design of confirm bar, we know that
x2 ≤ x3 + 1. In turn, we have x1 ≤ x2 ≤ x3 + 1. Hence
G1(i) must also be a preﬁx of G2(i).
• For all i where 0 ≤ i ≤ k − 1 and all block B ∈ G2(i) \
G1(i), B’s rank must be no smaller than x1. We prove
this claim via a contradiction and assume that B’s rank
is smaller than x1. Together with the fact that B is in
G2(i) \ G1(i), we know that B is in F2(i) but not in
F1(i). Hence F2(i) cannot be a preﬁx of F1(i). Then by
the consistency property in Theorem 2, F1(i) must be a
preﬁx of F2(i). Let x4 be the rank of the last block D
in F1(i). Since F1(i) is a preﬁx of F2(i), both D and B
must be in F2(i), and D must be before B in F2(i). Since
the blocks in F2(i) must have increasing rank values, we
know that D’s rank must be smaller than B’s. Hence
we have x4 = D’s rank < B’s rank ≤ x1 − 1, or more
concisely, x4 < x1 − 1. On the other hand, since D’s
rank is x4, its next rank must be at least x4 +1. By our
design of confirm bar in Ψ1, we know that x1 ≤ x4 +1
and hence x4 ≥ x1 − 1. This yields a contradiction.
Now we can use the above two claims to prove that S1 is
a preﬁx of S2. S1 consists of all the blocks in G1(0) through
G1(k−1), while S2 consists of all the blocks in G2(0) through
G2(k− 1). Since G1(i) is a preﬁx of G2(i) for all i, we know
that S1 ⊆ S2. For all blocks in S1 (which is the same as
S2∩S1), the sequence S1 orders them in exactly the same way
as the sequence S2. For all block B ∈ S2 \ S1, by the second
claim above, we know that B’s rank must be no smaller than
x1. Hence in the sequence S2, all blocks in S2 \ S1 must be
19Here u1 (t1) may or may not equal u2 (t2).
ordered after all the blocks in S2 ∩ S1 (whose rank must be
smaller than x1). This completes our proof that S1 is a preﬁx
of S2.
Finally, if u1 = u2 and t1 < t2, then since confirm bar
on a node never decreases over time, we must have x1 ≤ x2.
Similarly, if u1 (cid:54)= u2 and t1 + ∆ < t2, then by time t2,
node u2 must have seen all blocks seen by u1 at time t1. By
the consistency property in Theorem 2, all partially-conﬁrmed
blocks on u1 at time t1 must also be partially-conﬁrmed on
u2 at time t2. Thus we must also have x1 ≤ x2. Putting
everything together, if (u1 = u2 and t1 < t2) or (u1 (cid:54)= u2 and
t1 + ∆ < t2), then S1 must be a preﬁx of S2.
Lemma 7. If the three properties in Theorem 2 hold for each
of the k chains in (k, p, λ, T )-OHIE, then with probability at
least 1− exp(−Ω(λ)), (k, p, λ, T )-OHIE satisﬁes the quality-
growth property in Theorem 1.
Proof. Same as the reasoning in the beginning of the proof
for Lemma 6, we ﬁrst invoke Lemma 5 to show that with
probability at least 1 − exp(−Ω(λ)), there will never be two
honest nodes adding (B1,(cid:99)B1) and (B2,(cid:99)B2) to their respective
local set of blocks, such that B1 = B2 and (cid:99)B1 (cid:54)= (cid:99)B2. All our
following discussion will be conditioned on this, and we will
be able to directly refer to the rank and next rank of a block
B.
orem 1, which we need to prove:
The following restates the quality-growth property in The-
• (quality-growth) For all integer γ ≥ 1, the following
pn ticks of the exe-
pn + 2∆
1−f T honest blocks are newly added
property holds after the very ﬁrst 2T
cution: On any honest node, in every (γ + 2) · 2T
ticks, at least γ· k· 1−2f
to SCB.
Consider any given honest node u, and any given time t0
(in terms of ticks from the beginning of the execution), where
t0 is after the very ﬁrst 2T
pn ticks of the execution. By the
growth property in Theorem 2, at time t0, the length of every
chain in (k, p, λ, T )-OHIE must be at least T . By the growth
property and the quality property in Theorem 2, we know
that from time t0 to time t1 = t0 + γ · 2T
pn on node u, every
chain in (k, p, λ, T )-OHIE has at least γ· 1−2f
1−f T honest blocks
becoming newly partially-conﬁrmed. Let αi denote the set of
such newly partially-conﬁrmed honest blocks on chain i (for
0 ≤ i ≤ k − 1). We have |αi| ≥ γ · 1−2f
1−f T for all i, and
| ∪k−1
1−f T . To prove the lemma, it sufﬁces
to show that by time t4 = t0 + (γ + 2) · 2T
pn + 2∆ on node
u, all blocks in αi will have become fully-conﬁrmed for all
0 ≤ i ≤ k − 1. Without loss of generality, we only need to
prove for α0.
i=0 αi| ≥ γ · k · 1−2f
Let x be the largest next rank among all the blocks in α0.
By deﬁnition of such x, the rank value of every block in α0
must be smaller than x. Let y be the length of chain 0 on node
u at time t1. By time t2 = t1 + ∆, all honest nodes will have
received all blocks in α0. Furthermore, the length of chain 0
on all honest nodes at time t2 must be at least y. Together with
the consistency property in Theorem 2, we know that all the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
104
blocks in α0 must be partially-conﬁrmed on all honest nodes
by time t2. Thus starting from t2, whenever an honest node
(including node u) mines a block, by the design of OHIE, the
next rank of the new honest block will be at least x. We
will invoke this important property later.
Next let us come back to the honest node u, and consider
any one of the chains. From time t3 = t2 + ∆ to time
pn on node u, by the growth property in Theorem 2,
t4 = t3 + 4T
the length of this chain must have increased by at least 2T
blocks. The ﬁrst T blocks among all these blocks must have
been partially-conﬁrmed on node u at time t4. By the quality
property in Theorem 2, these ﬁrst T blocks must contain at
least 1−2f
1−2f , these ﬁrst T blocks
must contain at least one honest block B that is partially-
conﬁrmed. Since B is ﬁrst seen by u no earlier than t3, we
know that this honest block B must have been generated
(either by u or by some other honest node) no earlier than
t2. By our earlier argument, the next rank of B must be at
least x.
1−f T honest blocks. For T ≥ 1−f
Finally, note that we actually have one such B on every
chain on node u at time t4. This means that on node u at time
t4, the confirm bar is at least x. We earlier showed that for
all blocks in α0, their rank values must all be smaller than
x. Hence such a confirm bar enables all blocks in α0 to
become fully-conﬁrmed on node u at time t4. Observe that
t4 = t0 + (γ + 2) · 2T
pn + 2∆, and we are done.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
105