```php
function quoted_printable_encode($string) {
    return preg_replace('/[^\r\n]{73}[^=\r\n]{2}/', "$0=\r\n", str_replace("%","=",
rawurlencode($string)));
}
```
一个函数就可以, 将所有字符串 urlencode 转换后,% 号替换为 "=" 号, 然后对非 \ r\n 超过 73 连续字符, 后面加一个 =\r\n. 这个是简单实现方法. 按照该编码详细说明里面, 有些空格、换行, 还有一些特殊字符可以不用转换. 不过一起转换了, 也不会有影响
**在线工具**
- http://web.chacuo.net/charsetquotedprintable
- http://www.mxcz.net/tools/QuotedPrintable.aspx
- https://www.wishingstarmoye.com/ctf/quoted-printable
---
### shellcode
源文本:
`The quick brown fox jumps over the lazy dog`
编码后:
```
\x54\x68\x65\x7f\x71\x75\x69\x63\x6b\x7f\x62\x72\x6f\x77\x6e\x7f\x66\x6f\x78\x7f\x6a\x75\x6d\x70\x73\x7f\x6f\x76\x65\x72\x7f\x74\x68\x65\x7f\x6c\x61\x7a\x79\x7f\x64\x6f\x67
```
---
### Unicode
Unicode 编码有以下四种编码方式:
> 源文本: The
>
>> &#x [Hex]: &#x0054;&#x0068;&#x0065;
>
>> &# [Decimal]: &#00084;&#00104;&#00101;
>
>> \U [Hex]: \U0054\U0068\U0065
>
>> \U+ [Hex]: \U+0054\U+0068\U+0065
**在线工具**
- http://tool.chinaz.com/tools/unicode.aspx
- http://www.mxcz.net/tools/Unicode.aspx
---
### URL
url 编码又叫百分号编码, 是统一资源定位 (URL) 编码方式. URL 地址 (常说网址) 规定了常用地数字, 字母可以直接使用, 另外一批作为特殊用户字符也可以直接用(/,:@等), 剩下的其它所有字符必须通过 %xx 编码处理. 现在已经成为一种规范了, 基本所有程序语言都有这种编码, 如 js: 有 encodeURI、encodeURIComponent,PHP 有 urlencode、urldecode 等. 编码方法很简单, 在该字节 ascii 码的的 16 进制字符前面加 %. 如 空格字符, ascii 码是 32, 对应 16 进制是'20', 那么 urlencode 编码结果是:%20.
> 源文本:
> The quick brown fox jumps over the lazy dog
> 编码后:
> %54%68%65%20%71%75%69%63%6b%20%62%72%6f%77%6e%20%66%6f%78%20%6a%75%6d%70%73%20%6f%76%65%72%20%74%68%65%20%6c%61%7a%79%20%64%6f%67
**在线工具**
- http://web.chacuo.net/charseturlencode
- https://meyerweb.com/eric/tools/dencoder/
- http://tool.oschina.net/encode?type=4
- http://www.mxcz.net/tools/Url.aspx
---
### UTF
#### UTF-8
**在线工具**
- http://tool.chinaz.com/Tools/UTF-8.aspx
- http://tool.oschina.net/encode?type=2
#### UTF-7
**在线工具**
- http://toolswebtop.com/text/process/decode/utf-7
#### UTF-16
**在线工具**
- https://www.qqxiuzi.cn/bianma/utf-16.htm
---
### UUencode
UUencode 是一种二进制到文字的编码, 最早在 unix 邮件系统中使用, 全称: Unix-to-Unix encoding,UUencode 将输入文本以每三个字节为单位进行编码, 如果最后剩下的资料少于三个字节, 不够的部份用零补齐. 三个字节共有 24 个 Bit, 以 6-bit 为单位分为 4 个组, 每个组以十进制来表示所出现的字节的数值. 这个数值只会落在 0 到 63 之间. 然后将每个数加上 32, 所产生的结果刚好落在 ASCII 字符集中可打印字符 (32 - 空白… 95 - 底线) 的范围之中.
> 源文本: The quick brown fox jumps over the lazy dog
> 编码后: `M5&AE('%U:6-K(&)R;W=N(&9O>"!J=6UP 源文本:
> The quick brown fox jumps over the lazy dog\
> 编码后:
> hJ4VZ653pOKBf647mPrRi64NjS0-eRKpkQm-jRaJm65FcNG-gMLdt64FjNkc+
**在线工具**
- http://web.chacuo.net/charsetxxencode
---
### 进制
进制是一种逢几进一的运算。
N 进制就是逢 N 进 1，最小值为 0，最大值为 N-1
例如，十六进制和二进制和十进制的关系
| 十六进制 | 二进制 | 十进制 | 八进制
| -------- | ------ | ----- | ----- |
| 0        | 0000   | 0     | 0
| 1        | 0001   | 1     | 1
| 2        | 0010   | 2     | 2
| 3        | 0011   | 3     | 3
| 4        | 0100   | 4     | 4
| 5        | 0101   | 5     | 5
| 6        | 0110   | 6     | 6
| 7        | 0111   | 7     | 7
| 8        | 1000   | 8     | 10
| 9        | 1001   | 9     | 11
| A        | 1010   | 10    | 12
| B        | 1011   | 11    | 13
| C        | 1100   | 12    | 14
| D        | 1101   | 13    | 15
| E        | 1110   | 14    | 16
| F        | 1111   | 15    | 17
**缩写**
- 二进制 - B、BIN
- 八进制 - O、OCT
- 十进制 - D、DEC
- 十六进制 - H、HEX、0x
**转换**
- 十进制转二进制
    十进制数除 2 取余法，即十进制数除 2，余数为权位上的数，得到的商值继续除。
    ![](../../../assets/img/Security/Crypto/Crypto/1.png)
- 二进制转十进制
    把二进制数按权展开、相加即得十进制数，其实就是讲每位的二进制数 1 或者 0 乘以 2 的 n 次方
    ![](../../../assets/img/Security/Crypto/Crypto/2.png)
- 二进制转十六进制
    4 位二进制数按权展开相加得到 1 位十六进制数。(4 位二进制数转成十六进制是从右到左开始转化，不足时补 0)
    ![](../../../assets/img/Security/Crypto/Crypto/3.png)
**移位**
以 39 位例，将十进制的 39 转为二进制的 0010 0111，然后向左移位 << 一个字节，变成 0100 1110 ，再转为十进制为 78，此时如果再让 0010 0111 左移两位，变为 1001 1100 ，得出来就是 156，相当于扩大 4 倍。
![](../../../assets/img/Security/Crypto/Crypto/4.png)
**补数**
如果将数右移，那么空出来的高数值如何处理？
计算机中没有负数，那么做减法就是在做加法，用加法实现减法的运算，例如 100-50 计算机看来是 100+(-50)，为此，表示负数就要用到二进制补数 (补码)，补数用正数表示负数。
补码就是将原数反码再加 1.
![](../../../assets/img/Security/Crypto/Crypto/5.png)
补数的获取，逻辑上非常严谨，以 1-1 为例，举个错误例子
![](../../../assets/img/Security/Crypto/Crypto/6.png)
1-1 的结果为 130，而不是 0，可以得出结论 1000 0001 表示 -1 是错误的。
以正确结果看,1-1其实就是 1+(-1) ,对 -1 进行上面的取反+1后变为 1111 1111，然后与1进行加法运算，得到九位的 1 0000 0000，结果发送了溢出，计算机会直接忽略掉溢出位，变为 0000 0000，所以 1111 1111 表示 -1
![](../../../assets/img/Security/Crypto/Crypto/7.png)
所以负数的二进制表示就是先求其补数，补数的求解过程就是对原始数值的二进制取反 + 1.
结果不为 0 的运算同样可以通过补数得到正确的结果，当结果为负时，计算结果的值也是以补数的形式存在的。例如 3-5，如下
![](../../../assets/img/Security/Crypto/Crypto/8.png)
编程语言的数据类型中，有的可以处理负数，有的不可以，比如 C 语言中不能处理负数的 unsigned short 类型，也有能处理负数的 short 类型，都是 2 个字节的变量，它们都有 2 的十六次幂种值，但取值范围不同，short 类型的取值范围为 -32768~32767，unsigned short 的取值范围是 0~65535.
思考一下补数的机制就知道为什么 - 32768 比 32767 多一个数的原因，最高位是 0 的正数有 0~32767 共 32768 个，包括 0，最高位是 1 的负数有 - 1~-32768 共 32768 个，不含 0，0 不是正数也不是负数，但考虑到符号位，归类为正数。
**在线工具**
- https://js.tuisec.win/convert/ox2str/
- http://www.convertstring.com/zh_CN/EncodeDecode/HexDecode
- http://tool.oschina.net/hexconvert/
- http://www.mxcz.net/tools/Hex.aspx
- https://www.bejson.com/convert/ox2str/
- https://www.sojson.com/hexadecimal.html
---
### 敲击码
敲击码 (Tap code) 是一种以非常简单的方式对文本信息进行编码的方法. 因该编码对信息通过使用一系列的点击声音来编码而命名, 敲击码是基于 5×5 方格波利比奥斯方阵来实现的, 不同点是是用 K 字母被整合到 C 中.
敲击码表:
![](../../../assets/img/Security/Crypto/Crypto/TIM截图20190814151752.png)
![](../../../assets/img/Security/Crypto/Crypto/TIM截图20190814151904.png)
**在线工具**
- https://www.wishingstarmoye.com/ctf/tapcode
---
### 曼彻斯特编码
在电信与数据存储中, 曼彻斯特编码 (Manchester coding), 又称自同步码、相位编码 (phase encoding,PE), 能够用信号的变化来保持发送设备和接收设备之间的同步.
它用电压的变化来分辨 0 和 1, 从高电平到低电平的跳变代表 1, 而从低电平到高电平的跳变代表 0(as per G.E.Tomas 编码方式). 从高电平到低电平的跳变代表 0, 而从低电平到高电平的跳变代表 1(as per IEEE 802.3 编码方式)
信号的保持不会超过一个比特位的时间间隔. 即使是 0 或 1 的序列, 信号也将在每个时间间隔的中间发生跳变. 这种跳变将允许接收设备的时钟与发送设备的时钟保持一致.
曼彻斯特编码被物理层用来编码一个同步位流的时钟和数据. 因此, 曼彻斯特编码被用在以太网媒介系统中.
曼彻斯特编码提供一个简单的方式给编码简单的二进制序列而没有长的周期及转换级别, 因而防止时钟同步的丢失, 或来自低频率位移在贫乏补偿的模拟链接位错误.