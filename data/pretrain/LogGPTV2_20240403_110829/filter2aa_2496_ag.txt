运行 Sublist3r：
译者注：原书这里存在笔误，作者写成了 To run Sublister，但实际上应该是 To run Sublist3r.
cd /opt/Sublist3r
python sublist3r.py -d cyberspacekittens.com -o cyberspacekittens.com
看看 Sublist3r 跑出来的结果，跟用子域名暴力破解出的结果对比一下，是不是有一些之前没发现的？同样的，再次
针对一个 bug 赏金项目尝试 Sublist3r 方法来收集子域名，对比感受暴力破解和使用搜索引擎之间的显著区别。
Sublist3r 有一个分支版本，这个分支版本包含额外的特性（特别是子域名劫持的检查）: https://github.com/Plazma
z/Sublist3r
SubBrute
最后一个要介绍的子域名收集工具是 SubBrute。SubBrute 是一个社区项目，目标是创建最快、最准确的子域枚举
工具。SubBrute 背后的神奇之处在于，它使用开放的解析器作为代理来绕过 DNS 速率限制( https://www.us-cert.g
ov/ncas/alerts/TA13-088A )。这种设计还提供了一层匿名性，因为 SubBrute 不直接向目标的域名服务器发送流
量。
SubBrute 不仅速度非常快，它还执行 DNS 爬虫功能，爬取枚举的 DNS 记录。
运行 SubBrute:
我们还可以将 SubBrute 的性能提升一下，将其与 MassDNS 结合，以执行非常高性能的 DNS 解析。
Github
Github 是一个有惊人数据的宝库。在一些渗透测试和红队评估中，我们能够获得密码，API 密钥，旧的源代码，内
部主机名/ IPs 以及更多。这些要么导致直接攻击沦陷，要么帮助发动另一场攻击。我们看到的是，许多开发人员要
么将代码保存到错误的仓库(将其发送到他们的公开仓库而不是公司的私有仓库)，要么意外地保存敏感数据(如密
码)，然后试图删除它。Github 的一个优点是，它可以在每次修改或删除代码时进行记录。这意味着如果有一次将敏
感数据保存到仓库中，那么即使删除了该敏感数据，那么它仍然会在数据更改中被记录。只要仓库是公开的，你就能
够查看所有这些更改。
我们可以使用 Github 搜索来识别某些主机名/组织名，或者甚至仅仅使用简单的 Google Dork 搜索，例如:
site:github.com + “cyberspacekittens”
尝试使用不同的方法搜索 bug 赏金程序，而不是仅仅搜索 cyberspacekittens。
通过你所有的搜索，你会遇到: https://github.com/cyberspacekittens/dnscat2 (为 GitHub 实验准备的修改过的示
例)。你可以手动检索这个仓库，但通常它非常大，你很难遍历所有的项目来找到一些有趣的东西。
如前所述，当你在 Github 中编辑或删除文件时，一切都会被跟踪记录。对于红队队员来说，幸运的是，许多人忘记
了这个特性。因此，我们经常看到人们把敏感信息放到 Github 中，然后删除，却没有意识到它还在那里!让我们看看
能不能找到这些珍宝。
Truﬄe Hog
Truﬄe Hog工具会扫描不同的提交历史记录和分支来获取高机密的密钥，并输出它们。这对于查找机密数据、密
码、密钥等非常有用。让我们看看能否在 cyberspacekittens 的 Github 仓库中找到一些敏感的数据。
实验:
cd /opt/truﬄehog/truﬄeHog
python truﬄeHog.py https://github.com/cyberspacekittens/dnscat2
cd /opt/subbrute 
./subbrute.py cyberspacekittens.com
正如我们在 commit 历史记录中看到的，AWS 密钥和 SSH 密钥被从 server/controller/csk.conﬁg 文件中删除了。但
是如果查看当前仓库，你找不到这个文件。
更好的设置(但是设置起来有点复杂)是 git-all-secrets。在查看大型项目时，Git-all-secrets 非常有用。你只需指定某
个项目并在本地克隆该项目代码，然后使用 Truﬄe-hog 和 repo-supervisor 扫描它。在此之前你需要创建一个
Github 访问令牌，令牌是免费的，通过创建一个 Github 并在设置中选择 Generate New Token 选项来生成。
运行 git-all-secrets:
cd /opt/git-all-secrets
docker run -it abhartiya/tools_gitallsecrets:v3 -repoURL=https://github.com/cyberspacekittens/dnscat2 -
token=[API Key] - output=results.txt
这将克隆仓库并开始扫描。你甚至可以使用 -org 参数跑完该组织在 Github 上的所有内容。
容器(container)运行完成后，输入以下命令检索容器 ID:
docker ps -a 
有了容器 ID 后，就可以输入以下命令将结果文件从容器(container)发送到主机:
docker cp :/data/results.txt  
Cloud
正如我们前面所说的，cloud 是我们看到的许多公司有不安全环境配置的一个领域。最常见的一些问题是:
Amazon S3 Missing Buckets: https://hackerone.com/reports/121461
Amazon S3 Bucket Permissions: https://hackerone.com/reports/128088
Being able to list and write ﬁles to public AWS buckets:
aws s3 ls s3://[bucketname]
aws s3 mv test.txt s3://[bucketname]
Lack of Logging
在开始测试不同的 AWS 存储桶上的错误配置之前，我们需要首先发现它们。我们将尝试一些不同的工具，看看我们
能在受害者的 AWS 基础设施上发现什么。
S3 Bucket Enumeration（S3 存储桶 枚举）
有许多工具可以为 AWS 执行 S3 bucket 枚举 。这些工具通常利用关键字或列表，应用多种排列，然后尝试去发现不
同的 bucket。例如，我们可以使用一个名为 Slurp 的工具来查找关于目标 CyberSpaceKittens 的信息:
cd /opt/slurp
./slurp domain -t cyberspacekittens.com
./slurp keyword -t cyberspacekittens
Bucket Finder
另一个工具 Bucket Finder 不仅会尝试查找不同的 bucket，还会从这些 bucket 中下载所有的内容进行分析:
wget https://digi.ninja/ﬁles/bucket_ﬁnder_1.1.tar.bz2 -O bucket_ﬁnder_1.1.tar.bz2
cd /opt/bucket_ﬁnder
./bucket_ﬁnder.rb —region us my_words —download
你一直在基于 Cyber Space Kittens 的基础设施进行搜寻，并发现了他们的一个 S3 bucket(
cyberspacekittens.s3.amazonaws.com )。在 S3 bucket 中检索可见的和不可见的内容时，你的第一步要做什么
呢？你可以首先把它弹到浏览器中来看一些信息:
在开始之前，我们需要创建一个 AWS 帐户来获得一个访问密钥 ID。你可以在 Amazon 免费创建你的帐户。创建帐
户后，登录 AWS，转到你的安全凭据，然后转到访问密钥。一旦你有了 AWS Access ID 和密钥，我们就可以查询 S3
bucket 了。
查询 S3 并下载一切内容：
下载 awscli：
sudo apt install awscli
配置凭证：
aws conﬁgure
查看 CyberSpaceKittens 的 S3 bucket 的权限:
aws s3api get-bucket-acl --bucket cyberspacekittens
从 S3 Bucket 中读取文件：
aws s3 ls s3://cyberspacekittens
下载存在 S3 Bucket 中的所有内容：
aws s3 sync s3://cyberspacekittens
除了查询 S3 之外，接下来要测试的是写入该 bucket。如果我们有写的权限，可能就可以对它们的应用程序完成
RCE（远程命令执行）。我们经常看到，当 S3 bucket 上存储的文件被用于它们的所有页面时(并且如果我们可以修改
这些文件)，那么我们就可以将恶意代码放到它们的 Web 应用服务器上。
写入 S3:
echo “test” > test.txt 
aws s3 mv test.txt s3://cyberspacekittens 
aws s3 ls s3://cyberspacekittens 
注意，write 已被从 Everyone 组中删除。这只是为了示范。
修改 AWS Buckets 中的访问控制
在分析 AWS 的安全性时，我们需要检查关于对象和 bucket 的权限控制。对象是单独的文件，bucket 是存储的逻辑
单元。如果配置不正确，任何用户都可能修改这些权限。
首先，我们可以查看每个对象来判断这些权限是否配置正确:
aws s3api get-object-acl —bucket cyberspacekittens —key ignore.txt
我们可以看到只有一个名叫 “secure” 的用户对该文件有写的权限。文件不是对所有人开放的。如果我们有写的权
限，就可以使用 s3api 中的 put对象 来修改该文件。
接下来，我们看看是否可以修改这些 bucket 本身。这可以通过以下命令来完成:
aws s3api get-bucket-acl —bucket cyberspacekittens 
同样，在这两种情况下，读权限都是全局允许的，但是完全控制或任何写入的权限只有名为 “secure” 的帐户才有。
如果我们可以进入 bucket，那么我们可以使用 —grant-full-control 来赋予我们自己对 bucket 和对象的完全控制
权限。
资源:
https://labs.detectify.com/2017/07/13/a-deep-dive-into-aws-s3-access-controls-taking-full-control-over-yo
ur-assets/
子域名劫持
子域名劫持是一个常见的漏洞，如今我们几乎可以从每一个公司看到这个漏洞。如果一个公司使用用一些第三方
CMS/内容/云提供商，并将它们的子域名指向这些平台，那么就有可能发生子域名劫持漏洞。如果公司忘记配置第三
方服务或从该服务器注销，攻击者就可以使用第三方来劫持该主机名。
举个例子，你使用 testlab.s3.amazonaws.com 这个域名注册了一个 S3 Amazon Bucket。然后，你让你公司的子域
名 testlab.company.com 指向了 testlab.s3.amazonaws.com。一年后，你不再需要 testlab.s3.amazonaws.com
这个 S3 bucket 并注销了它，但是忘记了 testlab.company.com 的 CNAME 重定向。现在，一些人可以去 AWS 搭建
testlab.s3.amazon.com，并在受害者的域中有一个有效的 S3 bucket。
一个检查子域名漏洞的工具叫做 tko-subs 。我们可以用这个工具来检查是否有任何我们找到的子域名指向了一个
CMS 提供商(Heroku, Github, Shopify, Amazon S3, Amazon CloudFront 等)，这样该子域名可能可以被劫持。
运行 tko-subs:
如果我们找到了一个 悬挂记录 ，我们可以使用 tko-subs 来劫持 Github 页面和 Heroku 应用程序。否则，我们将不
得不手工操作。
译者注: dagling CNAME, 即为 dangling DNS record，简称 Dare, 一般翻译为 悬挂记录 。这类 DNS 记录指向
的资源无效，但记录本身尚未从 DNS 清除，攻击者可以借此实现 DNS 劫持。 拓展阅读：Understanding the
Security Threats of Dangling DNS Records
另外两个可以帮助域名劫持的工具是:
cd /opt/tko-subs/
./tkosubs -domains=list.txt -data=providers-data.csv -output=output.csv
HostileSubBruteforcer
autoSubTakeover
想了解更多关于AWS漏洞的信息吗?一个很棒的的 CTF AWS 演练 -> http://ﬂaws.cloud/
电子邮件
所有的社会工程学攻击的一个重要部分都是查找 email 地址和员工姓名。我们在前几节中使用了 Discover Script 工
具，它非常适合用来收集这些数据。我个人通常从 Discover Script 开始，并用其他工具进行深入挖掘。每种工具的