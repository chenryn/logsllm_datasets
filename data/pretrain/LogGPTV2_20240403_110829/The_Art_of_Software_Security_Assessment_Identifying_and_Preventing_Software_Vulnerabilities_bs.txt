  *expand = 0; 
  /* First, determine how many bare LFs are present. */ 
  if (tmpbuf[0] == '\n') 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
372 
    lfcount++; 
  for (i = 1; i outstrm, wb, wsize) == -1) 
          return -1; 
The data_xfer() function has a loop for transferring a certain amount of data for each 
iteration. Each loop iteration, however, resets the input buffer to the original 
session.xfer.buf, which might have been reallocated in _xlate_ascii_write(). 
Furthermore, session.xfer.bufsize is passed as the length of the buffer, which 
_xlate_ascii_write() also might have updated. As a result, if _xlate_ascii_write() 
ever reallocates the buffer, any subsequent loop iterations use an outdated pointer 
with an invalid size! 
The previous examples centered on reallocating memory blocks. Similar errors have 
been uncovered in a number of applications over the past few years. Sometimes 
unique situations that are less obvious crop up. The code in Listing 7-32 is taken from 
the prescan() function in Sendmail. The vulnerability involves updating an argument 
to prescan() (the delimptr argument) to point to invalid data when certain error 
conditions cause the function to terminate unexpectedly during a nested loop. This 
vulnerability revolves around the p variable being incremented as the prescan() 
function reads in a character. 
Listing 7-32. Sendmail Return Value Update Vulnerability 
/* read a new input character */ 
   c = (*p++) & 0x00ff; 
   if (c == '\0') 
   { 
       /* diagnose and patch up bad syntax */ 
       if (state == QST) 
       { 
           usrerr("553 Unbalanced '\"'"); 
           c = '"'; 
       } 
       else if (cmntcnt > 0) 
       { 
           usrerr("553 Unbalanced '('"); 
           c = ')'; 
       } 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
374 
       else if (anglecnt > 0) 
       { 
           c = '>'; 
           usrerr("553 Unbalanced '= &pvpbuf[pvpbsize - 5]) 
               goto addrtoolong; 
               *q++ = '\0'; 
               if (tTd(22, 36)) 
               { 
                   sm_dprintf("tok="); 
                   xputs(tok); 
                   sm_dprintf("\n"); 
           } 
           if (avp >= &av[MAXATOM]) 
           { 
               usrerr("553 5.1.0 prescan: too many tokens"); 
               goto returnnull; 
           } 
           if (q - tok > MAXNAME) 
           { 
               usrerr("553 5.1.0 prescan: token too long"); 
               goto returnnull; 
           } 
           *avp++ = tok; 
        } 
    } while (c != '\0' && (c != delim || anglecnt > 0)); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
375 
If an error condition is encountered (the token is too long or there's more than 
MAXATOM tokens), an error is indicated and the function returns. However, the delimptr 
argument is updated to point outside the bounds of the supplied string, as shown in 
this code: 
returnnull: 
    if (delimptr != NULL) 
        *delimptr = p; 
    CurEnv->e_to = saveto; 
    return NULL; 
} 
When the error conditions shown earlier are triggered, the p variable points one byte 
past where the NUL byte was encountered, and delimptr is consequently updated to 
point to uninitialized stack data. The p variable is then manipulated, which creates the 
possibility of exploitation. 
When reviewing an application, code auditors should make note of security-relevant 
functions that manipulate pass-by-reference arguments, as well as the specific 
manner in which they perform this manipulation. These kinds of argument 
manipulations often use opaque pointers with an associated set of manipulation 
functions. This type of manipulation is also an inherent part of C++ classes, as they 
implicitly pass a reference to the this pointer. However, C++ member functions can 
be harder to review due to the number of implicit functions that may be called and the 
fact that the code paths do not follow a more direct procedural structure. Regardless 
of the language though, the best way to determine the risk of a pass-by-reference 
manipulation is to follow this simple process: 
1. Find all locations in a function where pass-by-reference arguments are 
modified, particularly structure arguments, such as the buffer structure in 
Listing 7-25. 
2. Differentiate between mandatory modification and optional modification. 
Mandatory modification occurs every time the function is called; optional 
modification occurs when an abnormal situation arises. Programmers are 
more likely to overlook exceptional conditions related to optional modification. 
3. Examine how calling functions use the modified arguments after the function 
has returned. 
In addition, note when arguments aren't updated when they should be. Recall the 
read_line() function that was used to illustrate return value testing (see Listing 7-30). 
When the data allocation or read function failed, arguments that were intended to be 
updated every time weren't updated. Also, pay close attention to what happens when 
functions return early because of some error: Are arguments that should be updated 
not updated for some reason? You might think that if the caller function tests return 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
376 
values correctly, not updating arguments wouldn't be an issue; however, there are 
definitely cases in applications when arguments are supposed to be updated even 
when errors do occur (such as the Sendmail example shown in Listing 7-32). 
Therefore, even though the error might be detected correctly, the program is still 
vulnerable to misuse because arguments aren't updated correctly. 
To help identify these issues with argument manipulation, use your function audit 
logs to identify where pass-by-reference arguments are modified in the function and 
any cases in which pass-by-reference arguments aren't modified. Then examine 
calling functions to determine the implications (if any) of these updates or lack of 
updates. To incorporate this check, you could add some rows to the audit log, as 
shown in Table 7-3. 
Table 7-3. Rows to Add to the Function Audit Log 
Mandatory 
modifications 
char **buffer (second argument): Updated with a data buffer 
that's allocated within the function. 
int *length (third argument): Updated with how many bytes 
are read into **buffer for processing. 
Optional 
modifications 
None 
Exceptions 
Both arguments aren't updated if the buffer allocation fails or 
the call to read() fails. 
Auditing functions that modify global variables requires essentially the same thought 
processes as auditing functions that manipulate pass-by-reference arguments. The 
process involves auditing each function and enumerating the situations in which it 
modifies global variables. However, vulnerabilities introduced by modifying global 
variables might be more subtle because any number of different functions can make 
use of a global variable and, therefore, expect it to be in a particular state. This is 
especially true for code that can run at any point in the program, such as an exception 
handler or signal handler. 
In practice, you can conduct this analysis along with argument manipulation analysis 
when you're creating function audit logs. You can place the notes about global 
variable modification in the rows for modifications. There may be a little more work in 
determining the implications of modifying global variables, however. To evaluate the 
risk of these variables being modified (or not modified when they should be), simply 
look at every instance in which the global variable is used. If you find a case in which 
a global variable is assumed to be initialized or updated in a certain way, attackers 
might be able to leverage the application when functions that are supposed to operate 
on the global variable don't or when functions modify it unexpectedly. In Listing 7-4(? 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
377 
[????.]), you saw an example of this kind of vulnerability in OpenSSH with the global 
buffer structure variables. In that code, the destruction functions called by fatal() 
make an assumption about their state being consistent. 
In object-oriented programs, it can be much harder to determine whether global 
variables are susceptible to misuse because of unexpected modification. The difficulty 
arises because the order of execution of constituent member functions often isn't 
clear. In these cases, it is best to examine each function that makes use of the global 
variable and then attempt to come up with a situation in which a vulnerability could 
happen. For example, say you have two classes, C and D. C has member functions cX, 
cY, and cZ, and D has member functions dX, dY, and dZ. If you spot a potentially 
unexpected modification of a global variable in cX, and then see that global variable 
manipulated in dY and dZ, the challenge is to determine whether the cX function can 
be called in such a way that the global variable is updated in an unexpected fashion, 
and dY and dZ can operate on the global variable when it's in this inconsistent state. 
Argument Meaning 
Chapter 2(? [????.]) presented clarity as a design principle that affects the security of 
a system. Misleading or confusing function arguments provide a very immediate 
example of just this issue. Any confusion over the intended meaning of arguments 
can have serious security implications because the function doesn't perform as the 
developer expected. An argument's "intended meaning" generally means the data 
type the function expects for that argument and what the data stored in that 
argument is supposed to represent. 
When auditing a function for vulnerabilities related to incorrect arguments being 
supplied, the process is as follows: 
1. List the type and intended meaning of each argument to a function. 
2. Examine all the calling functions to determine whether type conversions or 
incorrect arguments could be supplied. 
The first thing to check for is type conversions. Type conversions actually occur often 
in arguments passed to a function, but most of the time they don't cause 
security-relevant problems. For example, integers are often passed to read() as the 
third argument, where they're converted to a size_t, but usually this conversion 
doesn't matter because the integer is a constant value. For each function call they 
analyze, code auditors should note any type conversions that do occur and how that 
argument is used in the function being audited. The conversion might become an 
issue if the interpretation of the argument can change based on a sign change. The 
issue might be significant if the argument's bit pattern changes during the type 
conversion (as in a sign extension) because the application developer probably didn't 
expect this type conversion. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
378 
Next, examine the argument's intended meaning, which can usually be determined 
by observing the context in which it's used. If a function's interface is unclear or 
misleading, an application developer can easily misunderstand how to use the 
function correctly, which can introduce subtle vulnerabilities. Chapter 8(? [????.]), 
"Strings and Metacharacters," presents examples involving MultiByteToWideChar() 
and other similar functions that illustrate a common mistake made in code dealing 
with wide characters. Often, in these functions, length arguments indicate a 
destination buffer's size in wide characters, not in bytes. Confusing these two data 
sizes is an easy mistake to make, and the result of mixing them up is usually a buffer 
overflow. 
So how do you find vulnerabilities of this nature? You need to understand exactly how 
the function works and what arguments are used for in the function. The general rule 
is this: The more difficult the function is to figure out, the more likely it is that it will 
be used incorrectly. As with the other elements of function auditing, making a log 
recording the meaning of different arguments is recommended. This log can be used 
with the argument modification log because similar information is being recorded; 
basically, you want to know what arguments are required, how they are used, and 
what happens to these arguments throughout the course of the function. Table 7-4 
shows an example of a function arguments log. 
Table 7-4. Function Argument Audit Log 
Argument 1 
prototype 
wchar_t *dest 
Argument 1 
meaning 
Destination buffer where data is copied into from the source buffer 
Argument 2 
prototype 
wchar_t *src 
Argument 2 
meaning 
Source buffer where wide characters are copied from 
Argument 3 
prototype 
size_t len 
Argument 3 
meaning 
Maximum size in wide characters of the destination buffer (doesn't 
include a NUL terminator) 
Implications 
NUL termination is guaranteed. 
The len parameter doesn't include the null terminator character, so 
the null character can be written out of bounds if the supplied len is 
the exact size of the buffer divided by 2. 
The length parameter is in wide characters; callers might 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
379 
Table 7-4. Function Argument Audit Log 
Argument 1 
prototype 
wchar_t *dest 
accidentally use sizeof(buf), resulting in an overflow. 
If 0 is supplied as a len, it's decremented to -1, and an infinite copy 
occurs. 
If -1 length is supplied, it's set artificially to 256. 
Table 7-4 lists a prototype and the intended meaning for each argument. Probably the 
most important part of the log is the implications list, which summarizes how 
application programmers could use the function incorrectly and notes any 
idiosyncrasies in the function that might cause exploitable conditions. After compiling 
this list, you can reference it at each location where the function is called and attempt 
to determine whether any conditions in the list can be true in the calling functions. In 
the sample function in Table 7-4, quite a few conditions result in the function doing 
something it shouldn't. It's an example of a function with an awkward interface, as it 
can be called incorrectly in so many ways that it would be quite easy for an application 
developer to misuse it. 
Ultimately, the trick to finding vulnerabilities related to misunderstanding functions 
arguments is to be able to conceptualize a chunk of code in isolation. When you're 
attempting to understand how a function operates, carefully examine each condition 
that's directly influenced by the arguments and keep thinking about what boundary 
conditions might cause the function to be called incorrectly. This task takes a lot of 
practice, but the more time you spend doing it, the faster you can recognize 
potentially dangerous code constructs. Many functions perform similar operations 
(such as string copying and character expansion) and are, therefore, prone to similar 
misuses. As you gain experience auditing these functions, you can observe patterns 
common to exceptional conditions and, over time, become more efficient at 
recognizing problems. Spend some time ensuring that you account for all quirks of 
the function so that you're familiar with how the function could be misused. You 
should be able to answer any questions about a functions quirks and log the answers 
so that the information is easily accessible later. The small details of what happens to 
an argument during the function execution could present a whole range of 
opportunities for the function to be called incorrectly. Finally, be especially mindful of 
type conversions that happen with arguments, such as truncation when dealing with 
short integers, because they are susceptible to boundary issues (as discussed in 
Chapter 6(? [????.])). 
7.3.5 Auditing Memory Management 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
380 