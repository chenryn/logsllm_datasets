# 前言
由于一些需要，和抱着学习的目的，研读了下巡风这款相当优秀的扫描器代码。
主要分析了下两个扫描的模块，对web端没有跟进看，当然重点也在扫描的部分。
分析的语句都以注释的形式标注在代码中了，由于能力有限，分析中的不足和错误欢迎指出。
# 整体架构逻辑
## 文件结构
    │  Config.py  # 配置文件
    │  README.md  # 说明文档
    │  Run.bat  # Windows启动服务
    │  Run.py  # webserver
    │  Run.sh    # Linux启动服务，重新启动前需把进程先结束掉
    │
    ├─aider
    │      Aider.py  # 辅助验证脚本
    │
    ├─db  # 初始数据库结构
    │
    ├─masscan  # 内置编译好的Masscan程序（CentOS win64适用），需要chmod+x给执行权限（root），若无法使用请自行编译安装。
    ├─nascan
    │  │  NAScan.py # 网络资产信息抓取引擎
    │  │
    │  ├─lib
    │  │      common.py 其他方法
    │  │      icmp.py  # ICMP发送类
    │  │      log.py  # 日志输出
    │  │      mongo.py  # 数据库连接
    │  │      scan.py  # 扫描与识别
    │  │      start.py  # 线程控制
    │  │
    │  └─plugin
    │          masscan.py  # 调用Masscan脚本
    │
    ├─views
    │  │  View.py  # web请求处理
    │  │
    │  ├─lib
    │  │      Conn.py  # 数据库公共类
    │  │      CreateExcel.py  # 表格处理
    │  │      Login.py  # 权限验证
    │  │      QueryLogic.py  # 查询语句解析
    │  │
    │  ├─static #静态资源目录
    │  │
    │  └─templates #模板文件目录
    │
    └─vulscan
        │  VulScan.py  # 漏洞检测引擎
        │
        └─vuldb # 漏洞库目录
## Run.sh
整个程序的开始就是从`Run.sh`开始的，可以先来看下起了哪些服务
    #!/bin/bash
    CURRENT_PATH=`dirname $0`
    cd $CURRENT_PATH
    XUNFENG_LOG=/var/log/xunfeng
    XUNFENG_DB=/var/lib/mongodb
    [ ! -d $XUNFENG_LOG ] && mkdir -p ${XUNFENG_LOG}
    [ ! -d $XUNFENG_DB ] && mkdir -p ${XUNFENG_DB}
    nohup mongod --port 65521 --dbpath=${XUNFENG_DB} --auth  > ${XUNFENG_LOG}/db.log &
    nohup python ./Run.py > ${XUNFENG_LOG}/web.log & 
    nohup python ./aider/Aider.py > ${XUNFENG_LOG}/aider.log & 
    nohup python ./nascan/NAScan.py > ${XUNFENG_LOG}/scan.log & 
    nohup python ./vulscan/VulScan.py > ${XUNFENG_LOG}/vul.log &
可以看到主要起了如下四个服务
### Run.py
    from views.View import app
    if __name__ == '__main__':
        #app.debug = True
        app.run(threaded=True, port=80,host='0.0.0.0')
**webserver**
可以看出这个是flask起的web端，里面主要是做一些数据的展示和修改的。由于不是扫描器的重点，这里就不具体分析了，可以自己看下代码。
### Aider.py
**辅助验证脚本** ，一个50行左右的单文件，使用socket完成了一个简单的DNS log平台。
### NAScan.py
**网络资产信息抓取引擎** 主要是调用`nascan`这个模块来进行网络资产（存活主机、开发端口、服务）的扫描。
### VulScan.py
**漏洞检测引擎** 主要是调用`vulscan/vuldb`中的poc进行漏洞检测。
# nascan
模块结构
    ─nascan
      │  NAScan.py # 网络资产信息抓取引擎
      │
      ├─lib
      │      common.py 其他方法
      │      icmp.py  # ICMP发送类
      │      log.py  # 日志输出
      │      mongo.py  # 数据库连接
      │      scan.py  # 扫描与识别
      │      start.py  # 线程控制
      └─plugin
              masscan.py  # 调用Masscan脚本
从`NAScan.py`文件入口
    # coding:utf-8
    # author:wolf@YSRC
    import thread
    from lib.common import *
    from lib.start import *
    if __name__ == "__main__":
        try:
            CONFIG_INI = get_config()  # 读取配置
            log.write('info', None, 0, u'获取配置成功') # 日志记录
            STATISTICS = get_statistics()  # 读取统计信息
            MASSCAN_AC = [0] # 标识符 masscan是否在使用
            NACHANGE = [0] # 标识符 扫描列表是否被改变
            thread.start_new_thread(monitor, (CONFIG_INI,STATISTICS,NACHANGE))  # 心跳线程
            thread.start_new_thread(cruise, (STATISTICS,MASSCAN_AC))  # 失效记录删除线程
            socket.setdefaulttimeout(int(CONFIG_INI['Timeout']) / 2)  # 设置连接超时
            ac_data = []
            while True:
                now_time = time.localtime()
                now_hour = now_time.tm_hour
                now_day = now_time.tm_mday
                now_date = str(now_time.tm_year) + str(now_time.tm_mon) + str(now_day)
                cy_day, ac_hour = CONFIG_INI['Cycle'].split('|')
                log.write('info', None, 0, u'扫描规则: ' + str(CONFIG_INI['Cycle']))
                if (now_hour == int(ac_hour) and now_day % int(cy_day) == 0 and now_date not in ac_data) or NACHANGE[0]:  # 判断是否进入扫描时段
                    ac_data.append(now_date)
                    NACHANGE[0] = 0
                    log.write('info', None, 0, u'开始扫描')
                    s = start(CONFIG_INI)
                    s.masscan_ac = MASSCAN_AC
                    s.statistics = STATISTICS
                    s.run() # 开始扫描
                time.sleep(60)
        except Exception, e:
            print e
## 准备工作
一开始是获取配置信息
    def get_config():
        config = {}
        # 从mongodb中读取`nascan`的配置，可以从navicat中看到Config集合中有`vulscan`和`nascan`的扫描配置
        config_info = mongo.na_db.Config.find_one({"type": "nascan"})
        for name in config_info['config']:
            # 对于cms识别、组件容器、动态语言、服务 的配置存储是使用`|`进行分割存储的
            # 所以在取出之前要进行简单的格式化然后放到配置中
            if name in ['Discern_cms', 'Discern_con', 'Discern_lang', 'Discern_server']:
                config[name] = format_config(name, config_info['config'][name]['value'])
            else:
                config[name] = config_info['config'][name]['value']
        return config
然后是进行日志记录
    # coding:utf-8
    import threading
    import time
    import sys
    reload(sys)
    sys.setdefaultencoding('utf8')
    mutex = threading.Lock() # 线程互斥锁
    def write(scan_type, host, port, info):
        mutex.acquire() # 上锁，避免多个进程输出，导致格式混乱
        port = int(port)
        try:  # 由于Run.sh中使用了nohup，所以`print`的输出会被输出到log文件中
            time_str = time.strftime('%X', time.localtime(time.time()))
            if scan_type == 'portscan':
                print "[%s] %s:%d open" % (time_str, host, port)
            elif scan_type == 'server':
                print "[%s] %s:%d is %s" % (time_str, host, port, str(info))
            elif scan_type == 'web':
                print "[%s] %s:%d is web" % (time_str, host, port)
                print "[%s] %s:%d web info %s" % (time_str, host, port, info)
            elif scan_type == 'active':
                print "[%s] %s active" % (time_str, host)
            elif scan_type == 'info':
                print "[%s] %s" % (time_str, info)
        except Exception, e:
            print 'logerror',e
            pass
        mutex.release()
之后进行读取统计信息
    def get_statistics():
        date_ = datetime.datetime.now().strftime('%Y-%m-%d')
        # 获取当日的统计信息
        now_stati = mongo.na_db.Statistics.find_one({"date": date_}) 
        if not now_stati:
            # 没有当日的信息则返回一个初始统计信息
            now_stati = {date_: {"add": 0, "update": 0, "delete": 0}}
            return now_stati
        else:
            # 有则返回
            return {date_: now_stati['info']}
## 两个监测线程
之后启动了两个现场，分别对应不同的功能
    thread.start_new_thread(monitor, (CONFIG_INI,STATISTICS,NACHANGE))  # 心跳线程
    thread.start_new_thread(cruise, (STATISTICS,MASSCAN_AC))  # 失效记录删除线程
### monitor
`monitor`心跳线程，主要用于判断扫描配置是否发生了变化
    def monitor(CONFIG_INI, STATISTICS, NACHANGE):
        while True:
            try:
                time_ = datetime.datetime.now()
                date_ = time_.strftime('%Y-%m-%d')
                # 记录心跳
                mongo.na_db.Heartbeat.update({"name": "heartbeat"}, {"$set": {"up_time": time_}})
                if date_ not in STATISTICS: STATISTICS[date_] = {"add": 0, "update": 0, "delete": 0}
                # 更新统计信息
                mongo.na_db.Statistics.update({"date": date_}, {"$set": {"info": STATISTICS[date_]}}, upsert=True)
                new_config = get_config() # 获取最新配置
                # 比较配置扫描列表的base64是否相同，不同则置NACHANGE[0]为1
                if base64.b64encode(CONFIG_INI["Scan_list"]) != base64.b64encode(new_config["Scan_list"]):NACHANGE[0] = 1
                CONFIG_INI.clear() 
                CONFIG_INI.update(new_config) # 更新新配置
            except Exception, e:
                print e
            time.sleep(30) # 每30秒检测一次
回到`NAScan.py`中可以看到
    # 判断是否达到了一个扫描的周期，或者心跳线程是否检测到扫描列表更新
    # 因为上面可以看到base64不同时会将NACHANGE[0]置于1
    # 至于为什么要传入NACHANGE[0]这样一个列表，而不是一个flag的int值（因为列表是引用啊！
    if (now_hour == int(ac_hour) and now_day % int(cy_day) == 0 and now_date not in ac_data) or NACHANGE[0]:
### cruise
然后是`cruise` 失效记录删除线程
    def cruise(STATISTICS,MASSCAN_AC):
        while True:
            now_str = datetime.datetime.now()
            week = int(now_str.weekday())
            hour = int(now_str.hour)
            if week >= 1 and week = 9 and hour <= 18:  # 非工作时间不删除
                try:
                    # 获取扫描信息记录
                    data = mongo.NA_INFO.find().sort("time", 1)
                    for history_info in data:
                        while True:
                            # 如果masscan正在扫描即不进行清理
                            # 在后期可以看到在用masscan进行扫描的时候会置1
                            if MASSCAN_AC[0]:  
                                time.sleep(10)
                            else:
                                break
                        ip = history_info['ip']
                        port = history_info['port']
                        try:
                            # 检测端口是否存活
                            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                            sock.connect((ip, int(port)))
                            sock.close()
                        except Exception, e:
                            time_ = datetime.datetime.now()
                            date_ = time_.strftime('%Y-%m-%d')
                            # 不存活则删除改记录
                            mongo.NA_INFO.remove({"ip": ip, "port": port})
                            log.write('info', None, 0, '%s:%s delete' % (ip, port)) # 日志记录
                            STATISTICS[date_]['delete'] += 1
                            del history_info["_id"]
                            history_info['del_time'] = time_
                            history_info['type'] = 'delete'
                            # 添加一条操作历史
                            mongo.NA_HISTORY.insert(history_info)
                except:
                    pass
            time.sleep(3600) # 60分钟检测一次
## start.py
回到`NAScan.py`， 前期的一些工作已经做完了，后面就可以进入`while True`的扫描循环了
    now_time = time.localtime()
    now_hour = now_time.tm_hour
    now_day = now_time.tm_mday
    now_date = str(now_time.tm_year) + str(now_time.tm_mon) + str(now_day)
    # 获取资产探测周期
    cy_day, ac_hour = CONFIG_INI['Cycle'].split('|')
    log.write('info', None, 0, u'扫描规则: ' + str(CONFIG_INI['Cycle']))
    if (now_hour == int(ac_hour) and now_day % int(cy_day) == 0 and now_date not in ac_data) or NACHANGE[0]:  # 判断是否进入扫描时段
        ac_data.append(now_date) # 判断是否扫描过的列表
        NACHANGE[0] = 0 # 置0，
        log.write('info', None, 0, u'开始扫描')
        s = start(CONFIG_INI)
        s.masscan_ac = MASSCAN_AC
        s.statistics = STATISTICS
        s.run() # 开始扫描
        time.sleep(60)
`s = start(CONFIG_INI)`初始化了一个`start`类
    class start:
        def __init__(self, config):  
            # 传入CONFIG_INI 配置，然后设置类的属性
            self.config_ini = config
            self.queue = Queue.Queue()
            self.thread = int(self.config_ini['Thread'])
            self.scan_list = self.config_ini['Scan_list'].split('\n')