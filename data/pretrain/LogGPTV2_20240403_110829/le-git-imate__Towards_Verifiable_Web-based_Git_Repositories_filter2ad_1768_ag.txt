### Cross-Site Scripting and Threat Vectors

While the automatic detection of threat vectors, such as Cross-Site Scripting (XSS), is crucial for the overall security of our scheme, we assume that a repository may be malicious or impersonated, for example, through a Man-in-the-Middle (MiTM) attack. Additional research in this area, which directly motivated Section 4.3, explores methods by which a user interface (UI) can influence user behavior [70]. Although phishing attacks are not explicitly considered part of our threat model (beyond their potential role in MiTM attacks), research into phishing detection could help identify and mitigate compromised web UIs that trick users into performing unintended actions [71]. Specifically, the work by Kulkarni et al. [72] and Zhang et al. [73] focuses on identifying legitimate versions of web UIs and warning users of possible impersonations.

### Conclusion

Web-based Git repository hosting services, such as GitHub and GitLab, allow users to manage their Git repositories via a web UI using a browser. While the web UI provides usability benefits, it requires users to sacrifice the ability to sign their Git commits. In this paper, we have revealed novel attacks that can be performed stealthily in conjunction with common web UI actions on GitHub. A common characteristic of these attacks is that the commits created by the server do not reflect the user's intended actions. The impact of these attacks can be significant, including the removal of security patches, the introduction of backdoors, or the merging of experimental code into production branches.

To counter these attacks, we developed le-git-imate, a defense scheme that provides security guarantees comparable and compatible with Git’s standard commit signing mechanism. With le-git-imate in place, users can take advantage of GitHub’s web-based features without compromising security. Our solution does not require any changes on the server side and can be used with existing web UI deployments. Experimental evaluations and user studies show that le-git-imate incurs a reasonable performance overhead and imposes a minimal usability burden on Git web UI users.

The current design of le-git-imate provides limited protection against web UI attacks. As future work, we plan to develop a more comprehensive defense mechanism, particularly through tighter integration with the providers of web-based Git repository hosting services. Adapting le-git-imate to other web-based repository hosting services will require some manual work, depending on the specifics of each service's UI. However, we found that the general principles used for GitHub and GitLab are applicable to a wide variety of similar services.

### Acknowledgment

A preliminary version of this article appeared in the proceedings of the 13th ACM Asia Conference on Computer & Communications Security (ASIACCS ’18) [48]. We thank the anonymous reviewers for their helpful comments. This research was supported by the NSF under Grants No. CNS 1801430 and DGE 1565478.

### Appendix A: User Study Demographics

Table 4 provides demographics about the user study participants.

**Table 4: Demographics for User Study Participants**

| **Category**                             | **Subcategory**                      | **Count** |
|------------------------------------------|--------------------------------------|-----------|
| **Gender**                               | Male                                 | 43        |
|                                          | Female                               | 33        |
| **Age**                                  | 20 to 25 years                       | 34        |
|                                          | 25 to 35 years                       | 8         |
|                                          | 35 years or older                    | 1         |
| **GitHub/GitLab Membership Duration**    | More than 2 years                    | 13        |
|                                          | Between 1–2 years                    | 18        |
|                                          | Less than 1 year                     | 6         |
|                                          | Less than 6 months                   | 3         |
|                                          | Not using a web-based Git repository | 3         |
| **GitHub/GitLab Use Frequency**          | A few times per day                  | 5         |
|                                          | Once per day                         | 4         |
|                                          | A few times per week                 | 17        |
|                                          | A few times per month                | 15        |
|                                          | Not using GitHub/GitLab              | 2         |
| **Familiarity with Git Commit Signing**  | Very familiar (use it daily)         | 6         |
|                                          | Somewhat familiar (use it sometimes) | 23        |
|                                          | Not familiar (never use it)          | 14        |
| **Familiarity with Public Key Cryptography** | Very familiar | 27 |
|                                          | Somewhat familiar | 2 |
|                                          | Not familiar | 1 |

### References

[1] GitHub, https://github.com.
[2] GitLab, https://gitlab.com.
[3] Bitbucket, https://bitbucket.org.
[4] SourceForge, https://sourceforge.net.
[5] Assembla, https://www.assembla.com.
[6] RhodeCode, https://rhodecode.com.
[7] GitHub Octoverse 2019, 2019, https://octoverse.github.com/.
[8] 10 million repositories, 2013, https://github.com/blog/1724-10-million-repositories.
[9] LWN, Linux kernel backdoor attempt, https://lwn.net/Articles/57135/.
[10] E. Homakov, How I hacked GitHub again, http://homakov.blogspot.com/2014/02/how-i-hacked-github-again.html.
[11] Gamasutra, Cloud source host Code Spaces hacked, developers lose code, http://www.gamasutra.com/view/news/219462/Cloud_source_host_Code_Spaces_hacked_developers_lose_code.php.
[12] Kernel.org Linux repository rooted in hack attack, http://www.theregister.co.uk/2011/08/31/linux_kernel_security_breach/.
[13] ZDNet, Red Hat’s Ceph and Inktank code repositories were cracked, http://www.zdnet.com/article/red-hats-ceph-and-inktank-code-repositories-were-cracked.
[14] Gigaom, Adobe source code breach; it’s bad, real bad, https://gigaom.com/2013/10/04/adobe-source-code-breech-its-bad-real-bad.
[15] ZDNet, Open-source ProFTPD hacked, backdoor planted in source code, http://www.zdnet.com/article/open-source-proftpd-hacked-backdoor-planted-in-source-code.
[16] ExtremeTech, GitHub hacked, millions of projects at risk of being modified or deleted, http://www.extremetech.com/computing/120981-github-hacked-millions-of-projects-at-risk-of-being-modified-or-deleted.
[17] It’s 2017 and 200,000 services still have unpatched Heartbleeds, 2017, https://www.theregister.co.uk/2017/01/23/heartbleed_2017/.
[18] Gerrit, https://www.gerritcodereview.com/.
[19] Jira, https://www.atlassian.com/software/jira.
[20] Phabricator, https://www.phacility.com.
[21] le-git-imate, https://le-git-imate.github.io/.
[22] isomorphic-git, https://isomorphic-git.org/.
[23] China, GitHub and the man-in-the-middle, https://en.greatfire.org/blog/2013/jan/china-github-and-man-middle.
[24] B. Marczak, N. Weaver, J. Dalek, R. Ensafi, D. Fifield, S. McKune, A. Rey, J. Scott-Railton, R. Deibert, and V. Paxson, An analysis of China’s “Great Cannon”, in: Fifth USENIX Workshop on Free and Open Comms. on the Internet (FOCI 15), 2015.
[25] C. Soghoian and S. Stamm, Certified lies: Detecting and defeating government interception attacks against SSL (short paper), in: Proc. of the 16th International Conference on Financial Cryptography and Data Security (FC ’12), 2012.
[26] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger, M. Dankel, J. Steube, L. Valenta, D. Adrian, J.A. Halderman, V. Dukhovni, E. Käsper, S. Cohney, S. Engels, C. Paar, and Y. Shavitt, DROWN: Breaking TLS using SSLv2, in: 25th USENIX Security Symposium (USENIX Security 16), 2016, pp. 689–706.
[27] Z. Durumeric, Z. Ma, D. Springall, R. Barnes, N. Sullivan, E. Bursztein, M. Bailey, J.A. Halderman, and V. Paxson, The security impact of HTTPS interception, in: Proc. of Network and Distributed System Security Symposium (NDSS), 2016, pp. 689–706.
[28] S. Torres-Arias, A.K. Ammula, R. Curtmola, and J. Cappos, On omitting commits and committing omissions: Preventing Git metadata tampering that (re)introduces software vulnerabilities, in: 25th USENIX Security Symposium (USENIX Security 16), 2016, pp. 379–395.
[29] GitHub Platform Roadmap, https://developer.github.com/early-access/platform-roadmap/.
[30] The GitHub Blog, https://github.com/blog.
[31] Chrome browser extension, https://developer.chrome.com/extensions.
[32] Content Scripts, https://developer.chrome.com/extensions/content_scripts.
[33] Manage events with background scripts, https://developer.chrome.com/extensions/background_pages.
[34] GitHub API, https://developer.github.com/v3/.
[35] Git’s pack protocol, https://github.com/git/git/blob/master/Documentation/technical/pack-protocol.txt.
[36] gitkit-js, https://github.com/SamyPesse/gitkit-js.
[37] js-git, https://github.com/creationix/js-git.
[38] git.js, https://github.com/danlucraft/git.js.
[39] es-git, https://github.com/es-git/es-git.
[40] isomorphic-git v0.65.0, https://github.com/isomorphic-git/isomorphic-git/releases/tag/v0.65.0.
[41] Git internals – Transfer protocols, https://git-scm.com/book/ms/v2/Git-Internals-Transfer-Protocols.
[42] Keybase, https://keybase.io.
[43] S. Fahl, M. Harbach, T. Muders, M. Smith, and U. Sander, Helping Johnny 2.0 to encrypt his Facebook conversations, in: Proceedings of the Eighth Symposium on Usable Privacy and Security (SOUPS ’12), ACM, 2012.
[44] M.M. Lucas and N. Borisov, FlyByNight: Mitigating the privacy risks of social networking, in: Proc. of the 7th ACM WPES ’08, 2008.
[45] GPG signature verification, https://github.com/blog/2144-gpg-signature-verification.
[46] Mailvelope, https://www.mailvelope.com/en.
[47] FlowCrypt, https://flowcrypt.com/.
[48] H. Afzali, S. Torres-Arias, R. Curtmola, and J. Cappos, le-git-imate: Towards verifiable web-based Git repositories, in: Proc. of the 2018 ACM Asia Conference on Computer and Communications Security (ASIACCS ’18), ACM, 2018, pp. 469–482.
[49] OpenPGP.js, https://openpgpjs.org/.
[50] Global trends in online shopping – A Nielsen report, http://www.nielsen.com/us/en/insights/reports/2010/Global-Trends-in-Online-Shopping-Nielsen-Consumer-Report.html.
[51] R.B. Miller, Response time in man–computer conversational transactions, in: Proc. of the December 9–11, 1968, Fall Joint Computer Conference, Part I, ACM, 1968.
[52] J. Nielsen, Usability engineering at a discount, in: Proc. of the 3rd Int. Conf. on Human–Computer Interaction on Designing and Using Human–Computer Interfaces and Knowledge Based Systems, 2nd edn, Elsevier, 1989, pp. 394–401.
[53] D.F. Galletta, R. Henry, S. McCoy, and P. Polak, Web site delays: How tolerant are users?, J. of the Assoc. for Info. Systems 5(1) (2004), 1–28.
[54] P.J. Sevcik et al., Understanding how users view application performance, Business Communications Review 32(7) (2002), 8–9.
[55] F.F.-H. Nah, A study on tolerable waiting time: How long are web users willing to wait?, Behaviour & Information Technology 23(3) (2004), 153–163.
[56] I. Arapakis, X. Bai, and B.B. Cambazoglu, Impact of response latency on user behavior in web search, in: Proc. of the 37th Annual ACM SIGIR Conference, 2014.
[57] N. Poggi, D. Carrera, R. Gavaldà, E. Ayguadé, and J. Torres, A methodology for the evaluation of high response time on E-commerce users and sales, Information Systems Frontiers 16(5) (2014), 867–885. doi:10.1007/s10796-012-9387-4.
[58] Flask, http://flask.pocoo.org/.
[59] D.A. Wheeler, Software configuration management (SCM) security, http://www.dwheeler.com/essays/scm-security.html.
[60] M. Gerwitz, A Git horror story: Repository integrity with signed commits, http://mikegerwitz.com/papers/git-horror-story.
[61] S. Vaidya, S. Torres-Arias, R. Curtmola, and J. Cappos, Commit signatures for centralized version control systems, in: Proc. of the 34th International Conference on ICT Systems Security and Privacy Protection (IFIP SEC ’19), Springer, 2019, pp. 359–373. doi:10.1007/978-3-030-22312-0_25.
[62] Apso: Secrecy for version control systems, https://savannah.nongnu.org/projects/apso.
[63] J. Pellegrini, Secrecy in concurrent version control systems, in: Presented at the Brazilian Symposium on Information and Computer Security (SBSeg 2006), 2006.
[64] R.G. Shirey, K.M. Hopkinson, K.E. Stewart, D.D. Hodson, and B.J. Borghetti, Analysis of implementations to secure Git for use as an encrypted distributed version control system, in: 48th Hawaii Int. Conf. on Sys. Sci. (HICSS ’15), 2015.
[65] SaaS, https://en.wikipedia.org/wiki/Software_as_a_service.
[66] S. Subashini and V. Kavitha, A survey on security issues in service delivery models of cloud computing, J. of Network and Computer Applications 34(1) (2011), 1–11.
[67] R. Chandramouli and M. Iorga, Cryptographic key management issues & challenges in cloud services, 2013, http://nvlpubs.nist.gov/nistpubs/ir/2013/NIST.IR.7956.pdf. doi:10.6028/NIST.IR.7956.
[68] Introducing Keybase chat, https://keybase.io/blog/keybase-chat.
[69] M.S. Melara, A. Blankstein, J. Bonneau, E.W. Felten, and M.J. Freedman, CONIKS: Bringing key transparency to end users, in: Usenix Security, 2015, pp. 383–398.
[70] S. Chiasson, A. Forget, R. Biddle, and P.C. van Oorschot, User interface design affects security: Patterns in click-based graphical passwords, International Journal of Information Security 8(6) (2009), 387.
[71] Dark patterns, https://darkpatterns.org/.
[72] S.S. Kulkarni, A. Mittal, and A. Nayakawadi, Detecting phishing web pages, International Journal of Computer Applications 118(16) (2015), 27–30.
[73] Y. Zhang, J.I. Hong, and L.F. Cranor, Cantina: A content-based approach to detecting phishing web sites, in: Proc. of the 16th International Conference on World Wide Web, WWW ’07, ACM, 2007, pp. 639–648. doi:10.1145/1242572.1242659.