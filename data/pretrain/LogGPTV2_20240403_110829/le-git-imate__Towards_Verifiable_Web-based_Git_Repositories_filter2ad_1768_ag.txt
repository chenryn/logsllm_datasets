Cross Site-Scripting). While automatic detection of these vectors is relevant to the overall security of
our scheme, we assume that a repository may be malicious or impersonated (e.g., via a MiTM attack).
Additional work in this area, a direct motivation for Section 4.3, explores ways that a UI can use
to force user behaviors [70]. While we do not consider phishing attacks to be part of the threat model
(besides a possible pathway for a MiTM attack), research into the detection of phishing schemes could
be used to identify and leverage compromised web UI’s that trick users into performing unintended
actions [71]. Speciﬁcally, we highlight the work by Kulkarni et al. [72] and Zhang et al. [73], which
attempt to identify known-good versions of a web UI and warn users of possible impersonations.
10. Conclusion
Web-based Git repository hosting services such as GitHub and GitLab allow users to manage their Git
repositories via a web UI using the browser. Even though the web UI provides usability beneﬁts, users
have to sacriﬁce the ability to sign their Git commits.
In this paper, we revealed novel attacks that can be performed stealthily in conjunction with several
common web UI actions on GitHub. Common to all these attacks is the fact that commits created by the
server do not reﬂect the user’s actions. The impact can be signiﬁcant, such as removing a security patch,
introducing a backdoor, or merging experimental code into a production branch.
To counter these attacks, we devised le-git-imate, a defense scheme that provides security guarantees
comparable and compatible with Git’s standard commit signing mechanism. With our solution in place,
users can take advantage of GitHub’s web-based features without sacriﬁcing security. le-git-imate does
not require any changes on the server side and can be used today with existing web UI deployments. Our
experimental evaluation and user study show that le-git-imate incurs a reasonable performance overhead
and presents a minimal usability burden to Git web UI users.
le-git-imate’s current design provides limited protection against web UI attacks. As future work, we
plan to develop a more comprehensive defense mechanism against UI attacks, especially through a more
tight integration with the provider of the web-based Git repository hosting service. Adapting le-git-imate
434
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
to other web-based repository hosting services will require a degree of manual work that depends on the
speciﬁcs of the service’s UI; however, we found that the same general principles used for GitHub/GitLab
are applicable to a wide variety of similar services.
Acknowledgment
A preliminary version of this article appeared in the proceedings of the 13th ACM Asia Conference
on Computer & Communications Security (ASIACCS ’18) [48]. We thank the anonymous reviewers for
helpful comments. This research was supported by the NSF under Grants No. CNS 1801430 and DGE
1565478.
Appendix A. User study demographics
Table 4 provides demographics about the user study participants.
Table 4
Demographics for user study participants
Subjects
GENDER
Male
Female
AGE
20 to 25 years
25 to 35 years
35 years or older
GITHUB/GITLAB MEMBERSHIP
More than 2 years
Between 1–2 years
Less than 1 year
Less than 6 months
Not using a web-based Git repository
GITHUB/GITLAB USE
A few times per day
Once per day
A few times per week
A few times per month
Not using GitHub/GitLab
FAMILIARITY WITH GIT COMMIT SIGNING
Very familiar (use it on a daily basis)
Somewhat familiar (use it sometimes)
Not familiar (never use it)
FAMILIARITY WITH PUBLIC KEY CRYPTOGRAPHY
Very familiar
Somewhat familiar
Not familiar
43
33
10
34
8
1
13
18
6
3
3
5
4
17
15
2
6
23
14
14
27
2
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
435
References
[1] GitHub, https://github.com.
[2] GitLab, https://gitlab.com.
[3] Bitbucket, https://bitbucket.org.
[4] SourceForge, https://sourceforge.net.
[5] Assembla, https://www.assembla.com.
[6] RhodeCode, https://rhodecode.com.
[7] GitHub Octoverse 2019, 2019, https://octoverse.github.com/.
[8] 10 million repositories, 2013, https://github.com/blog/1724-10-million-repositories.
[9] LWN, Linux kernel backdoor attempt, https://lwn.net/Articles/57135/.
[10] E. Homakov, How I hacked GitHub again, http://homakov.blogspot.com/2014/02/how-i-hacked-github-again.html.
[11] gamasutra, Cloud source host Code Spaces hacked, developers lose code, http://www.gamasutra.com/view/news/219462/
Cloud_source_host_Code_Spaces_hacked_developers_lose_code.php.
[12] Kernel.org Linux repository rooted in hack attack, http://www.theregister.co.uk/2011/08/31/linux_kernel_security_
breach/.
[13] ZDNet, Red Hat’s Ceph and Inktank code repositories were cracked, http://www.zdnet.com/article/red-hats-ceph-and-
inktank-code-repositories-were-cracked.
[14] Gigaom, Adobe source code breach; it’s bad, real bad, https://gigaom.com/2013/10/04/adobe-source-code-breech-its-
bad-real-bad.
[15] ZDNet, Open-source ProFTPD hacked, backdoor planted in source code, http://www.zdnet.com/article/open-source-
proftpd-hacked-backdoor-planted-in-source-code.
[16] ExtremeTech, GitHub hacked, millions of projects at risk of being modiﬁed or deleted, http://www.extremetech.com/
computing/120981-github-hacked-millions-of-projects-at-risk-of-being-modiﬁed-or-deleted.
[17] It’s 2017 and 200,000 services still have unpatched Heartbleeds, 2017, https://www.theregister.co.uk/2017/01/23/
heartbleed_2017/.
[18] Gerrit, https://www.gerritcodereview.com/.
[19] Jira, https://www.atlassian.com/software/jira.
[20] Phabricator, https://www.phacility.com.
[21] le-git-imate, https://le-git-imate.github.io/.
[22] isomorphic-git, https://isomorphic-git.org/.
[23] China, GitHub and the man-in-the-middle, https://en.greatﬁre.org/blog/2013/jan/china-github-and-man-middle.
[24] B. Marczak, N. Weaver, J. Dalek, R. Ensaﬁ, D. Fiﬁeld, S. McKune, A. Rey, J. Scott-Railton, R. Deibert and V. Paxson,
An analysis of China’s “Great Cannon”, in: Fifth USENIX Workshop on Free and Open Comms. on the Internet (FOCI
15), 2015.
[25] C. Soghoian and S. Stamm, Certiﬁed lies: Detecting and defeating government interception attacks against SSL (short
paper), in: Proc. of the 16th International Conference on Financial Cryptography and Data Security (FC ’12), 2012.
[26] N. Aviram, S. Schinzel, J. Somorovsky, N. Heninger, M. Dankel, J. Steube, L. Valenta, D. Adrian, J.A. Halderman,
V. Dukhovni, E. Käsper, S. Cohney, S. Engels, C. Paar and Y. Shavitt, DROWN: Breaking TLS using SSLv2, in: 25th
USENIX Security Symposium (USENIX Security 16), 2016, pp. 689–706.
[27] Z. Durumeric, Z. Ma, D. Springall, R. Barnes, N. Sullivan, E. Bursztein, M. Bailey, J.A. Halderman and V. Paxson, The
security impact of HTTPS interception, in: Proc. of Network and Distributed System Security Symposium (NDSS), 2016,
pp. 689–706.
[28] S. Torres-Arias, A.K. Ammula, R. Curtmola and J. Cappos, On omitting commits and committing omissions: Prevent-
ing Git metadata tampering that (re)introduces software vulnerabilities, in: 25th USENIX Security Symposium (USENIX
Security 16), 2016, pp. 379–395.
[29] GitHub Platform Roadmap, https://developer.github.com/early-access/platform-roadmap/.
[30] The GitHub Blog, https://github.com/blog.
[31] Chrome browser extension, https://developer.chrome.com/extensions.
[32] Content Scripts, https://developer.chrome.com/extensions/content_scripts.
[33] Manage events with background scripts, https://developer.chrome.com/extensions/background_pages.
[34] GitHub API, https://developer.github.com/v3/.
[35] Git’s pack protocol, https://github.com/git/git/blob/master/Documentation/technical/pack-protocol.txt.
[36] gitkit-js, https://github.com/SamyPesse/gitkit-js.
[37] js-git, https://github.com/creationix/js-git.
[38] git.js, https://github.com/danlucraft/git.js.
[39] es-git, https://github.com/es-git/es-git.
[40] isomorphic-git v0.65.0, https://github.com/isomorphic-git/isomorphic-git/releases/tag/v0.65.0.
436
H. Afzali et al. / Towards adding veriﬁability to web-based Git repositories
[41] Git internals – Transfer protocols, https://git-scm.com/book/ms/v2/Git-Internals-Transfer-Protocols.
[42] Keybase, https://keybase.io.
[43] S. Fahl, M. Harbach, T. Muders, M. Smith and U. Sander, Helping Johnny 2.0 to encrypt his Facebook conversations, in:
Proceedings of the Eighth Symposium on Usable Privacy and Security (SOUPS ’12), ACM, 2012.
[44] M.M. Lucas and N. Borisov, FlyByNight: Mitigating the privacy risks of social networking, in: Proc. of the 7th ACM
WPES ’08, 2008.
[45] GPG signature veriﬁcation, https://github.com/blog/2144-gpg-signature-veriﬁcation.
[46] Mailvelope, https://www.mailvelope.com/en.
[47] FlowCrypt, https://ﬂowcrypt.com/.
[48] H. Afzali, S. Torres-Arias, R. Curtmola and J. Cappos, le-git-imate: Towards veriﬁable web-based Git repositories, in:
Proc. of the 2018 ACM Asia Conference on Computer and Communications Security (ASIACCS ’18), ACM, 2018,
pp. 469–482.
[49] OpenPGP.js, https://openpgpjs.org/.
[50] Global trends in online shopping – A Nielsen report, http://www.nielsen.com/us/en/insights/reports/2010/Global-Trends-
[51] R.B. Miller, Response time in man–computer conversational transactions, in: Proc. of the December 9–11, 1968, Fall
in-Online-Shopping-Nielsen-Consumer-Report.html.
Joint Computer Conference, Part I, ACM, 1968.
[52] J. Nielsen, Usability engineering at a discount, in: Proc. of the 3rd Int. Conf. on Human–Computer Interaction on Design-
ing and Using Human–Computer Interfaces and Knowledge Based Systems, 2nd edn, Elsevier, 1989, pp. 394–401.
[53] D.F. Galletta, R. Henry, S. McCoy and P. Polak, Web site delays: How tolerant are users?, J. of the Assoc. for Info. Systems
[54] P.J. Sevcik et al., Understanding how users view application performance, Business Communications Review 32(7) (2002),
5(1) (2004), 1–28.
8–9.
Technology 23(3) (2004), 153–163.
37th Annual ACM SIGIR Conference, 2014.
[55] F.F.-H. Nah, A study on tolerable waiting time: How long are web users willing to wait?, Behaviour & Information
[56] I. Arapakis, X. Bai and B.B. Cambazoglu, Impact of response latency on user behavior in web search, in: Proc. of the
[57] N. Poggi, D. Carrera, R. Gavaldà, E. Ayguadé and J. Torres, A methodology for the evaluation of high response time on
E-commerce users and sales, Information Systems Frontiers 16(5) (2014), 867–885. doi:10.1007/s10796-012-9387-4.
[58] Flask, http://ﬂask.pocoo.org/.
[59] D.A. Wheeler, Software conﬁguration management (SCM) security, http://www.dwheeler.com/essays/scm-security.html.
[60] M. Gerwitz, A Git horror story: Repository integrity with signed commits, http://mikegerwitz.com/papers/git-horror-
story.
[61] S. Vaidya, S. Torres-Arias, R. Curtmola and J. Cappos, Commit signatures for centralized version control systems, in:
Proc. of the 34th International Conference on ICT Systems Security and Privacy Protection (IFIP SEC ’19), Springer,
2019, pp. 359–373. doi:10.1007/978-3-030-22312-0_25.
[62] Apso: Secrecy for version control systems, https://savannah.nongnu.org/projects/apso.
[63] J. Pellegrini, Secrecy in concurrent version control systems, in: Presented at the Brazilian Symposium on Information and
Computer Security (SBSeg 2006), 2006.
[64] R.G. Shirey, K.M. Hopkinson, K.E. Stewart, D.D. Hodson and B.J. Borghetti, Analysis of implementations to secure Git
for use as an encrypted distributed version control system, in: 48th Hawaii Int. Conf. on Sys. Sci. (HICSS ’15), 2015.
[65] SaaS, https://en.wikipedia.org/wiki/Software_as_a_service.
[66] S. Subashini and V. Kavitha, A survey on security issues in service delivery models of cloud computing, J. of Network
and Computer Applications 34(1) (2011), 1–11.
[67] R. Chandramouli and M. Iorga, Cryptographic key management issues & challenges in cloud services, 2013, http://
nvlpubs.nist.gov/nistpubs/ir/2013/NIST.IR.7956.pdf. doi:10.6028/NIST.IR.7956.
[68] Introducing Keybase chat, https://keybase.io/blog/keybase-chat.
[69] M.S. Melara, A. Blankstein, J. Bonneau, E.W. Felten and M.J. Freedman, CONIKS: Bringing key transparency to end
users, in: Usenix Security, 2015, pp. 383–398.
[70] S. Chiasson, A. Forget, R. Biddle and P.C. van Oorschot, User interface design affects security: Patterns in click-based
graphical passwords, International Journal of Information Security 8(6) (2009), 387.
[71] Dark patterns, https://darkpatterns.org/.
[72] S.S. Kulkarni, A. Mittal and A. Nayakawadi, Detecting phishing web pages, International Journal of Computer Applica-
tions 118(16) (2015), 27–30.
[73] Y. Zhang, J.I. Hong and L.F. Cranor, Cantina: A content-based approach to detecting phishing web sites, in: Proc. of the
16th International Conference on World Wide Web, WWW ’07, ACM, 2007, pp. 639–648. doi:10.1145/1242572.1242659.