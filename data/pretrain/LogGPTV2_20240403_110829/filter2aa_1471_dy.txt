committed records didn’t make it to disk.
NTFS uses the log file to recover a volume after the system fails, but it
also takes advantage of an important freebie it gets from logging transactions.
File systems necessarily contain a lot of code devoted to recovering from file
system errors that occur during the course of normal file I/O. Because NTFS
logs each transaction that modifies the volume structure, it can use the log
file to recover when a file system error occurs and thus can greatly simplify
its error handling code. The log file full error described earlier is one
example of using the log file for error recovery.
Most I/O errors that a program receives aren’t file system errors and
therefore can’t be resolved entirely by NTFS. When called to create a file, for
example, NTFS might begin by creating a file record in the MFT and then
enter the new file’s name in a directory index. When it tries to allocate space
for the file in its bitmap, however, it could discover that the disk is full and
the create request can’t be completed. In such a case, NTFS uses the
information in the log file to undo the part of the operation it has already
completed and to deallocate the data structures it reserved for the file. Then it
returns a disk full error to the caller, which in turn must respond
appropriately to the error.
NTFS bad-cluster recovery
The volume manager included with Windows (VolMgr) can recover data
from a bad sector on a fault-tolerant volume, but if the hard disk doesn’t
perform bad-sector remapping or runs out of spare sectors, the volume
manager can’t perform bad-sector replacement to replace the bad sector.
When the file system reads from the sector, the volume manager instead
recovers the data and returns the warning to the file system that there is only
one copy of the data.
The FAT file system doesn’t respond to this volume manager warning.
Moreover, neither FAT nor the volume manager keeps track of the bad
sectors, so a user must run the Chkdsk or Format utility to prevent the
volume manager from repeatedly recovering data for the file system. Both
Chkdsk and Format are less than ideal for removing bad sectors from use.
Chkdsk can take a long time to find and remove bad sectors, and Format
wipes all the data off the partition it’s formatting.
In the file system equivalent of a volume manager’s bad-sector
replacement, NTFS dynamically replaces the cluster containing a bad sector
and keeps track of the bad cluster so that it won’t be reused. (Recall that
NTFS maintains portability by addressing logical clusters rather than
physical sectors.) NTFS performs these functions when the volume manager
can’t perform bad-sector replacement. When a volume manager returns a
bad-sector warning or when the hard disk driver returns a bad-sector error,
NTFS allocates a new cluster to replace the one containing the bad sector.
NTFS copies the data that the volume manager has recovered into the new
cluster to reestablish data redundancy.
Figure 11-64 shows an MFT record for a user file with a bad cluster in one
of its data runs as it existed before the cluster went bad. When it receives a
bad-sector error, NTFS reassigns the cluster containing the sector to its bad-
cluster file, $BadClus. This prevents the bad cluster from being allocated to
another file. NTFS then allocates a new cluster for the file and changes the
file’s VCN-to-LCN mappings to point to the new cluster. This bad-cluster
remapping (introduced earlier in this chapter) is illustrated in Figure 11-64.
Cluster number 1357, which contains the bad sector, must be replaced by a
good cluster.
Figure 11-64 MFT record for a user file with a bad cluster.
Bad-sector errors are undesirable, but when they do occur, the combination
of NTFS and the volume manager provides the best possible solution. If the
bad sector is on a redundant volume, the volume manager recovers the data
and replaces the sector if it can. If it can’t replace the sector, it returns a
warning to NTFS, and NTFS replaces the cluster containing the bad sector.
If the volume isn’t configured as a redundant volume, the data in the bad
sector can’t be recovered. When the volume is formatted as a FAT volume
and the volume manager can’t recover the data, reading from the bad sector
yields indeterminate results. If some of the file system’s control structures
reside in the bad sector, an entire file or group of files (or potentially, the
whole disk) can be lost. At best, some data in the affected file (often, all the
data in the file beyond the bad sector) is lost. Moreover, the FAT file system
is likely to reallocate the bad sector to the same or another file on the volume,
causing the problem to resurface.
Like the other file systems, NTFS can’t recover data from a bad sector
without help from a volume manager. However, NTFS greatly contains the
damage a bad sector can cause. If NTFS discovers the bad sector during a
read operation, it remaps the cluster the sector is in, as shown in Figure 11-
65. If the volume isn’t configured as a redundant volume, NTFS returns a
data read error to the calling program. Although the data that was in that
cluster is lost, the rest of the file—and the file system—remains intact; the
calling program can respond appropriately to the data loss, and the bad
cluster won’t be reused in future allocations. If NTFS discovers the bad
cluster on a write operation rather than a read, NTFS remaps the cluster
before writing and thus loses no data and generates no error.
Figure 11-65 Bad-cluster remapping.
The same recovery procedures are followed if file system data is stored in
a sector that goes bad. If the bad sector is on a redundant volume, NTFS
replaces the cluster dynamically, using the data recovered by the volume
manager. If the volume isn’t redundant, the data can’t be recovered, so NTFS
sets a bit in the $Volume metadata file that indicates corruption on the
volume. The NTFS Chkdsk utility checks this bit when the system is next
rebooted, and if the bit is set, Chkdsk executes, repairing the file system
corruption by reconstructing the NTFS metadata.
In rare instances, file system corruption can occur even on a fault-tolerant
disk configuration. A double error can destroy both file system data and the
means to reconstruct it. If the system crashes while NTFS is writing the
mirror copy of an MFT file record—of a file name index or of the log file,
for example—the mirror copy of such file system data might not be fully
updated. If the system were rebooted and a bad-sector error occurred on the
primary disk at exactly the same location as the incomplete write on the disk
mirror, NTFS would be unable to recover the correct data from the disk
mirror. NTFS implements a special scheme for detecting such corruptions in
file system data. If it ever finds an inconsistency, it sets the corruption bit in
the volume file, which causes Chkdsk to reconstruct the NTFS metadata
when the system is next rebooted. Because file system corruption is rare on a
fault-tolerant disk configuration, Chkdsk is seldom needed. It is supplied as a
safety precaution rather than as a first-line data recovery strategy.
The use of Chkdsk on NTFS is vastly different from its use on the FAT
file system. Before writing anything to disk, FAT sets the volume’s dirty bit
and then resets the bit after the modification is complete. If any I/O operation
is in progress when the system crashes, the dirty bit is left set and Chkdsk
runs when the system is rebooted. On NTFS, Chkdsk runs only when
unexpected or unreadable file system data is found, and NTFS can’t recover
the data from a redundant volume or from redundant file system structures on
a single volume. (The system boot sector is duplicated—in the last sector of a
volume—as are the parts of the MFT ($MftMirr) required for booting the
system and running the NTFS recovery procedure. This redundancy ensures
that NTFS will always be able to boot and recover itself.)
Table 11-11 summarizes what happens when a sector goes bad on a disk
volume formatted for one of the Windows-supported file systems according
to various conditions we’ve described in this section.
Table 11-11 Summary of NTFS data recovery scenarios
Scenar
With a Disk That 
With a Disk That Does Not 
io
Supports Bad-Sector 
Remapping and Has 
Spare Sectors
Perform Bad-Sector 
Remapping or Has No Spare 
Sectors
Fault-
tolerant 
volume
1
1. 
Volume manager 
recovers the data.
2. 
Volume manager 
performs bad-
sector replacement.
3. 
File system remains 
unaware of the 
error.
1. 
Volume manager 
recovers the data.
2. 
Volume manager sends 
the data and a bad-
sector error to the file 
system.
3. 
NTFS performs cluster 
remapping.
Non-
fault-
tolerant 
volume
1. 
Volume manager 
can’t recover the 
data.
2. 
Volume manager 
sends a bad-sector 
error to the file 
system.
3. 
NTFS performs 
cluster remapping. 
1. 
Volume manager can’t 
recover the data.
2. 
Volume manager sends 
a bad-sector error to the 
file system.
3. 
NTFS performs cluster 
remapping. Data is lost.
Data is lost.2
1 A fault-tolerant volume is one of the following: a mirror set (RAID-1) or a RAID-5 set.
2 In a write operation, no data is lost: NTFS remaps the cluster before the write.
If the volume on which the bad sector appears is a fault-tolerant volume—
a mirrored (RAID-1) or RAID-5 / RAID-6 volume—and if the hard disk is
one that supports bad-sector replacement (and that hasn’t run out of spare
sectors), it doesn’t matter which file system you’re using (FAT or NTFS).
The volume manager replaces the bad sector without the need for user or file
system intervention.
If a bad sector is located on a hard disk that doesn’t support bad sector
replacement, the file system is responsible for replacing (remapping) the bad
sector or—in the case of NTFS—the cluster in which the bad sector resides.
The FAT file system doesn’t provide sector or cluster remapping. The
benefits of NTFS cluster remapping are that bad spots in a file can be fixed
without harm to the file (or harm to the file system, as the case may be) and
that the bad cluster will never be used again.
Self-healing
With today’s multiterabyte storage devices, taking a volume offline for a
consistency check can result in a service outage of many hours. Recognizing
that many disk corruptions are localized to a single file or portion of
metadata, NTFS implements a self-healing feature to repair damage while a
volume remains online. When NTFS detects corruption, it prevents access to
the damaged file or files and creates a system worker thread that performs
Chkdsk-like corrections to the corrupted data structures, allowing access to
the repaired files when it has finished. Access to other files continues
normally during this operation, minimizing service disruption.
You can use the fsutil repair set command to view and set a volume’s
repair options, which are summarized in Table 11-12. The Fsutil utility uses
the FSCTL_SET_REPAIR file system control code to set these settings,
which are saved in the VCB for the volume.
Table 11-12 NTFS self-healing behaviors
Flag
Behavior
SET_REPA
IR_ENABL
ED
Enable self-healing for the volume.
SET_REPA
IR_WARN
_ABOUT_
DATA_LO
SS
If the self-healing process is unable to fully recover a file, 
specifies whether the user should be visually warned.
SET_REPA
IR_DISAB
LED_AND
_BUGCHE
CK_ON_C
ORRUPTI
ON
If the NtfsBugCheckOnCorrupt NTFS registry value was 
set by using fsutil behavior set NtfsBugCheckOnCorrupt 
1 and this flag is set, the system will crash with a STOP 
error 0x24, indicating file system corruption. This setting 
is automatically cleared during boot time to avoid 
repeated reboot cycles.
In all cases, including when the visual warning is disabled (the default),
NTFS will log any self-healing operation it undertook in the System event
log.
Apart from periodic automatic self-healing, NTFS also supports manually
initiated self-healing cycles (this type of self-healing is called proactive)
through the FSCTL_INITIATE_REPAIR and FSCTL_WAIT_FOR_REPAIR
control codes, which can be initiated with the fsutil repair initiate and fsutil
repair wait commands. This allows the user to force the repair of a specific
file and to wait until repair of that file is complete.
To check the status of the self-healing mechanism, the
FSCTL_QUERY_REPAIR control code or the fsutil repair query command
can be used, as shown here:
Click here to view code image
C:\>fsutil repair query c:
Self healing state on c: is: 0x9
 Values: 0x1 - Enable general repair.
         0x9 - Enable repair and warn about potential data loss.
        0x10 - Disable repair and bugcheck once on first corruption.
Online check-disk and fast repair
Rare cases in which disk-corruptions are not managed by the NTFS file
system driver (through self-healing, Log file service, and so on) require the
system to run the Windows Check Disk tool and to put the volume offline.
There are a variety of unique causes for disk corruption: whether they are
caused by media errors from the hard disk or transient memory errors,
corruptions can happen in file system metadata. In large file servers, which
have multiple terabytes of disk space, running a complete Check Disk can
require days. Having a volume offline for so long in these kinds of scenarios
is typically not acceptable.
Before Windows 8, NTFS implemented a simpler health model, where the
file system volume was either healthy or not (through the dirty bit stored in
the $VOLUME_INFORMATION attribute). In that model, the volume was
taken offline for as long as necessary to fix the file system corruptions and
bring the volume back to a healthy state. Downtime was directly proportional
to the number of files in the volume. Windows 8, with the goal of reducing or
avoiding the downtime caused by file system corruption, has redesigned the
NTFS health model and disk check.
The new model introduces new components that cooperate to provide an
online check-disk tool and to drastically reduce the downtime in case severe
file-system corruption is detected. The NTFS file system driver is able to
identify multiple types of corruption during normal system I/O. If a
corruption is detected, NTFS tries to self-heal it (see the previous paragraph).
If it doesn’t succeed, the NTFS file system driver writes a new corruption
record to the $Verify stream of the \$Extend\$RmMetadata\$Repair file.
A corruption record is a common data structure that NTFS uses for
describing metadata corruptions and is used both in-memory and on-disk. A
corruption record is represented by a fixed-size header, which contains
version information, flags, and uniquely represents the record type through a
GUID, a variable-sized description for the type of corruption that occurred,
and an optional context.
After the entry has been correctly added, NTFS emits an ETW event
through its own event provider (named Microsoft-Windows-Ntfs-UBPM).
This ETW event is consumed by the service control manager, which will
start the Spot Verifier service (more details about triggered-start services are
available in Chapter 10).
The Spot Verifier service (implemented in the Svsvc.dll library) verifies
that the signaled corruption is not a false positive (some corruptions are
intermittent due to memory issues and may not be a result of an actual
corruption on disk). Entries in the $Verify stream are removed while being
verified by the Spot Verifier. If the corruption (described by the entry) is not
a false positive, the Spot Verifier triggers the Proactive Scan Bit (P-bit) in the
$VOLUME_INFORMATION attribute of the volume, which will trigger an
online scan of the file system. The online scan is executed by the Proactive
Scanner, which is run as a maintenance task by the Windows task scheduler
(the task is located in Microsoft\Windows\Chkdsk, as shown in Figure 11-
66) when the time is appropriate.
Figure 11-66 The Proactive Scan maintenance task.
The Proactive scanner is implemented in the Untfs.dll library, which is
imported by the Windows Check Disk tool (Chkdsk.exe). When the
Proactive Scanner runs, it takes a snapshot of the target volume through the
Volume Shadow Copy service and runs a complete Check Disk on the
shadow volume. The shadow volume is read-only; the check disk code
detects this and, instead of directly fixing the errors, uses the self-healing
feature of NTFS to try to automatically fix the corruption. If it fails, it sends a
FSCTL_CORRUPTION_HANDLING code to the file system driver, which in
turn creates an entry in the $Corrupt stream of the
\$Extend\$RmMetadata\$Repair metadata file and sets the volume’s dirty bit.
The dirty bit has a slightly different meaning compared to previous
editions of Windows. The $VOLUME_INFORMATION attribute of the
NTFS root namespace still contains the dirty bit, but also contains the P-bit,
which is used to require a Proactive Scan, and the F-bit, which is used to
require a full check disk due to the severity of a particular corruption. The
dirty bit is set to 1 by the file system driver if the P-bit or the F-bit are
enabled, or if the $Corrupt stream contains one or more corruption records.
If the corruption is still not resolved, at this stage there are no other
possibilities to fix it when the volume is offline (this does not necessarily
require an immediate volume unmounting). The Spot Fixer is a new
component that is shared between the Check Disk and the Autocheck tool.
The Spot Fixer consumes the records inserted in the $Corrupt stream by the
Proactive scanner. At boot time, the Autocheck native application detects that
the volume is dirty, but, instead of running a full check disk, it fixes only the
corrupted entries located in the $Corrupt stream, an operation that requires
only a few seconds. Figure 11-67 shows a summary of the different repair
methodology implemented in the previously described components of the
NTFS file system.
Figure 11-67 A scheme that describes the components that cooperate to
provide online check disk and fast corruption repair for NTFS volumes.
A Proactive scan can be manually started for a volume through the chkdsk
/scan command. In the same way, the Spot Fixer can be executed by the
Check Disk tool using the /spotfix command-line argument.
EXPERIMENT: Testing the online disk check
You can test the online checkdisk by performing a simple
experiment. Assuming that you would like to execute an online
checkdisk on the D: volume, start by playing a large video stream
from the D drive. In the meantime, open an administrative
command prompt window and start an online checkdisk through
the following command:
Click here to view code image
C:\>chkdsk d: /scan
The type of the file system is NTFS.
Volume label is DATA.
Stage 1: Examining basic file system structure ...
  4041984 file records processed.
File verification completed.
  3778 large file records processed.
  0 bad file records processed.
Stage 2: Examining file name linkage ...
Progress: 3454102 of 4056090 done; Stage: 85%; Total: 51%; 
ETA:   0:00:43 ..
You will find that the video stream won’t be stopped and
continues to play smoothly. In case the online checkdisk finds an
error that it isn’t able to correct while the volume is mounted, it
will be inserted in the $Corrupt stream of the $Repair system file.
To fix the errors, a volume dismount is needed, but the correction
will be very fast. In that case, you could simply reboot the machine
or manually execute the Spot Fixer through the command line:
C:\>chkdsk d: /spotfix