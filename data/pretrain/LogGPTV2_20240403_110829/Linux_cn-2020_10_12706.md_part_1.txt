---
author: Two-bit History
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6839
date: '2020-10-10 22:29:01'
editorchoice: true
excerpt: 很多软件都依赖 GNU Readline 库来实现用户所期望的功能，不过这些功能是如此的辅助与不显眼，以至于在我看来很少有人会停下来去想它是从哪里来的。
fromurl: https://twobithistory.org/2019/08/22/readline.html
id: 12706
islctt: true
largepic: /data/attachment/album/202010/10/222755etdndudtu97wddz7.jpg
permalink: /article-12706-1.html
pic: /data/attachment/album/202010/10/222755etdndudtu97wddz7.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 很多软件都依赖 GNU Readline 库来实现用户所期望的功能，不过这些功能是如此的辅助与不显眼，以至于在我看来很少有人会停下来去想它是从哪里来的。
tags:
- Readline
thumb: false
title: 你所不知的 GNU Readline
titlepic: true
translator: rakino
updated: '2020-10-10 22:29:01'
---
![](/data/attachment/album/202010/10/222755etdndudtu97wddz7.jpg)
有时我会觉得自己的计算机是一栋非常大的房子，我每天都会访问这栋房子，也对一楼的大部分房间都了如指掌，但仍然还是有我没有去过的卧室，有我没有打开过的衣柜，有我没有探索过的犄角旮旯。我感到有必要更多地了解我的计算机了，就像任何人都会觉得有必要看看自己家里从未去过的房间一样。
GNU Readline 是个不起眼的小软件库，我依赖了它多年却没有意识到它的存在，也许有成千上万的人每天都在不经意间使用它。如果你用 Bash shell 的话，每当你自动补全一个文件名，或者在输入的一行文本中移动光标，以及搜索之前命令的历史记录时，你都在使用 GNU Readline；当你在 Postgres（`psql`）或是 Ruby REPL（`irb`）的命令行界面中进行同样的操作时，你依然在使用 GNU Readline。很多软件都依赖 GNU Readline 库来实现用户所期望的功能，不过这些功能是如此的辅助与不显眼，以至于在我看来很少有人会停下来去想它是从哪里来的。
GNU Readline 最初是自由软件基金会在 20 世纪 80 年代创建的，如今作为每个人的基础计算设施的重要的、甚至看不见的组成部分的它，由一位志愿者维护。
### 充满特色
GNU Readline 库的存在，主要是为了增强各种命令行界面，它提供了一组通用的按键，使你可以在一个单行输入中移动和编辑。例如，在 Bash 提示符中按下 `Ctrl-A`，你的光标会跳到行首，而按下 `Ctrl-E` 则会跳到行末；另一个有用的命令是 `Ctrl-U`，它会删除该行中光标之前的所有内容。
有很长一段时间，我通过反复敲击方向键来在命令行上移动，如今看来这十分尴尬，也不知道为什么，当时的我从来没有想过可以有一种更快的方法。当然了，没有哪一个熟悉 Vim 或 Emacs 这种文本编辑器的程序员愿意长时间地击打方向键，所以像 Readline 这样的东西必然会被创造出来。在 Readline 上可以做的绝非仅仅跳来跳去，你可以像使用文本编辑器那样编辑单行文本——这里有删除单词、单词换位、大写单词、复制和粘贴字符等命令。Readline 的大部分按键/快捷键都是基于 Emacs 的，它基本上就是一个单行文本版的 Emacs 了，甚至还有录制和重放宏的功能。
我从来没有用过 Emacs，所以很难记住所有不同的 Readline 命令。不过 Readline 有着很巧妙的一点，那就是能够切换到基于 Vim 的模式，在 Bash 中可以使用内置的 `set` 命令来这样做。下面会让 Readline 在当前的 shell 中使用 Vim 风格的命令：
```
$ set -o vi
```
该选项启用后，就可以使用 `dw` 等命令来删除单词了，此时相当于 Emacs 模式下的 `Ctrl-U` 的命令是 `d0`。
我第一次知道有这个功能的时候很兴奋地想尝试一下，但它对我来说并不是那么好用。我很高兴知道有这种对 Vim 用户的让步，在使用这个功能上你可能会比我更幸运，尤其是你还没有使用 Readline 的默认按键的话；我的问题在于，我听说有基于 Vim 的界面时已经学会了几种默认按键，因此即使启用了 Vim 的选项，也一直在错误地用着默认的按键；另外因为没有某种指示器，所以 Vim 的模态设计在这里会很尴尬——你很容易就忘记了自己处于哪个模式，就因为这样，我卡在了一种虽然使用 Vim 作为文本编辑器，但却在 Readline 上用着 Emacs 风格的命令的情况里，我猜其他很多人也是这样的。
如果你觉得 Vim 和 Emacs 的键盘命令系统诡异而神秘（这并不是没有道理的），你可以按照喜欢的方式自定义 Readline 的键绑定。Readline 在启动时会读取文件 `~/.inputrc`，它可以用来配置各种选项与键绑定，我做的一件事是重新配置了 `Ctrl-K`：通常情况下该命令会从光标处删除到行末，但我很少这样做，所以我在 `~/.inputrc` 中添加了以下内容，把它绑定为直接删除整行：
```
Control-k: kill-whole-line
```
每个 Readline 命令（文档中称它们为 “函数” ）都有一个名称，你可以用这种方式将其与一个键序列联系起来。如果你在 Vim 中编辑 `~/.inputrc`，就会发现 Vim 知道这种文件类型，还会帮你高亮显示有效的函数名，而不高亮无效的函数名。
`~/.inputrc` 可以做的另一件事是通过将键序列映射到输入字符串上来创建预制宏。[Readline 手册](https://tiswww.case.edu/php/chet/readline/readline.html)给出了一个我认为特别有用的例子：我经常想把一个程序的输出保存到文件中，这意味着我得经常在 Bash 命令中追加类似 `> output.txt` 这样的东西，为了节省时间，可以把它做成一个 Readline 宏：
```
Control-o: "> output.txt"
```
这样每当你按下 `Ctrl-O` 时，你都会看到 `> output.txt` 被添加到了命令行光标的后面，这样很不错！
不过你可以用宏做的可不仅仅是为文本串创建快捷方式；在 `~/.inputrc` 中使用以下条目意味着每次按下 `Ctrl-J` 时，行内已有的文本都会被 `$(` 和 `)` 包裹住。该宏先用 `Ctrl-A` 移动到行首，添加 `$(` ，然后再用 `Ctrl-E` 移动到行尾，添加 `)`：