来源：[turingh.github.io](http://turingh.github.io/2017/01/10/CVE-2016-7637-%E5%86%8D%E8%B0%88Mach-IPC/)
作者：[turingH](https://github.com/turingH)
> 为学大病在好名。
## 0x00 摘要
去年在分析[CVE-2016-1757](http://turingh.github.io/2016/07/05/%E5%86%8D%E7%9C%8BCVE-2016-1757%E6%B5%85%E6%9E%90mach%20message%E7%9A%84%E4%BD%BF%E7%94%A8/)时，初步的接触了`Mach`在`IPC`系统中使用的`Message`，在分析最近的一系列与`IPC`模块相关的漏洞时，又加强对`IPC`模块的理解，所以通过一到两篇文章梳理一下最近的学习总结与心得体会。
关于[CVE-2016-7637](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-7637)这个漏洞的描述有很多资料了，是一个攻击`Mach`的内核`IPC`模块的漏洞，本文最后会对漏洞做出比较详细的解释，这里给出几个链接，不熟悉这个漏洞的读者可以先了解一下。
[黑云压城城欲摧 -2016年iOS公开可利用漏洞总结](https://jaq.alibaba.com/community/art/show?articleid=687)
[mach portal漏洞利用的一些细节](http://blog.pangu.io/mach-portal-details/)
[Broken kernel mach port name uref](https://bugs.chromium.org/p/project-zero/issues/detail?id=959&can=1&q=apple&sort=-id)
## 0x01 什么是Port
对于一般的开发者，在用到`Port`的时候可以简单的将`Port`理解为进程间通信所使用的类似于`Socket`的东西，可以用他来发送消息，也可以用来接收消息。
下面我们来一步一步的构建对整个模块的理解。
已经知道`Port`是什么的读者可以跳过这一个部分。
### 1.1 利用Port传递数据
`Port`最简单的可以理解为一个内核中的消息队列。不同的`Task`通过这个消息队列相互传递数据。而`Port`就是用于找到这个队列的索引。
### 1.2 Port、Port Name 与 Right
通过函数`mach_port_allocate`就可以在内核中建立一个消息队列，并获取一个与之对应的的`Port`。代码如下。
    mach_port_t p;
    mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &p);
通过查看内核源码，
    /*
     *  Purpose:
     *      Allocates a right in a space.  Like mach_port_allocate_name,
     *      except that the implementation picks a name for the right.
     *      The name may be any legal name in the space that doesn't
     *      currently denote a right.
     */
    kern_return_t
    mach_port_allocate(
        ipc_space_t     space,
        mach_port_right_t   right,
        mach_port_name_t    *namep)
    {
        kern_return_t       kr;
        mach_port_qos_t     qos = qos_template;
        kr = mach_port_allocate_full (space, right, MACH_PORT_NULL,
                        &qos, namep);
        return (kr);
    }
仔细看的话会发现，对我们刚刚申请的`p`出现了好几个解释，一下就晕了。
  * 在应用层代码中，p被定义为`mach_port_t`。
  * 在内核中代码中，`namep`是`mach_port_name_t`。
  * 在注释中又说，Allocates a RIGHT in a space。
#### 1.2.1 Port与Port Name
通过调试器观察一下，可以发现，
    (lldb) p p
    (mach_port_t) $0 = 3331
     * frame #0: 0xffffff801d4ee11d kernel`mach_port_allocate_full(space=0xffffff8024ceac00, right=1, proto=0x0000000000000000, qosp=0xffffff887d7b3ef0, namep=0xffffff887d7b3eec
在应用层的`mach_port_t`是一个已经经过代码处理的类似于`Socket`的一个整数，来表示这个`Port`。
而`namep`在内核之中是一个地址，指向了一块用来索引`Port`的内存，具体的实现在本文的后面会有更详细的解释。
#### 1.2.2 Right
这里注释所说的`Right`简单的理解，其实是一个`Port`和对这个`Port`进行访问的权限。每一个`Port`代表的消息队列并不是可以任意访问的，需要有对这个队列的访问权限。各种权限在头文件中的定义如下。
    #define MACH_PORT_RIGHT_SEND      ((mach_port_right_t) 0)
    #define MACH_PORT_RIGHT_RECEIVE   ((mach_port_right_t) 1)
    #define MACH_PORT_RIGHT_SEND_ONCE ((mach_port_right_t) 2)
    #define MACH_PORT_RIGHT_PORT_SET  ((mach_port_right_t) 3)
    #define MACH_PORT_RIGHT_DEAD_NAME ((mach_port_right_t) 4)
    #define MACH_PORT_RIGHT_NUMBER    ((mach_port_right_t) 5)
每种`Right`都有不同的含义，可以自行查阅文档。
这里需要简单的提一下的就是每一个`Port`都有且只有`Task`对其拥有`RECEIVE`的权限，`SEND`的权限不限。拥有`MACH_PORT_RIGHT_RECEIVE`时也可以对`Port`进行消息的Send。
### 1.3 Port的具体实现
阅读`mach_port_allocate_full`函数的源码，最终在一个`port`的创建流程中，最主要的函数是`ipc_port_alloc`以及在其实现中调用的`ipc_object_alloc`。
    kern_return_t
    ipc_port_alloc(
        ipc_space_t     space,
        mach_port_name_t    *namep,
        ipc_port_t      *portp)
    {
        ipc_port_t port;
        mach_port_name_t name;
        kern_return_t kr;
        kr = ipc_object_alloc(space, IOT_PORT,
                      MACH_PORT_TYPE_RECEIVE, 0,
                      &name, (ipc_object_t *) &port);
        if (kr != KERN_SUCCESS)
            return kr;
        /* port and space are locked */
        ipc_port_init(port, space, name);
        [...]
        *namep = name; ie_bits |= type | urefs;
        entry->ie_object = object;
        ipc_entry_modified(space, *namep, entry);
        io_lock(object);
        object->io_references = 1; /* for entry, not caller */
        object->io_bits = io_makebits(TRUE, otype, 0);
        *objectp = object;
        return KERN_SUCCESS;
    }
#### 1.3.1 IPC Space 和 IPC Entry
细心的读者会发现前面有个叫做`space`的参数没有解释。这里又出现了一个新的结构叫做`entry`。他们是有关系的，这里我们来一起解释一下。
> Each task has a private IPC _space_ a namespace for portsthat is represented
> by the ipc_space structure in the kernel.
>
> Mac OS X Internals
每一个`Task`都有一个自己独立的`IPC`的数据空间，就是这里的`space`。他的数据结构是定义如下。
    // osfmk/ipc/ipc_space.h
    typedef natural_t ipc_space_refs_t;
    struct ipc_space {
        decl_mutex_data(,is_ref_lock_data)
        ipc_space_refs_t is_references;
        decl_mutex_data(,is_lock_data)
        // is the space active?
        boolean_t is_active;
        // is the space growing?
        boolean_t is_growing;
        // table (array) of IPC entries
        // 这个是最重要的，存放了所有的entry
        ipc_entry_t is_table; 
        // current table size
        ipc_entry_num_t is_table_size;
        // information for larger table
        struct ipc_table_size *is_table_next;
        // splay tree of IPC entries (can be NULL)
        struct ipc_splay_tree is_tree;
        // number of entries in the tree
        ipc_entry_num_t is_tree_total;
        // number of "small" entries in the tree
        ipc_entry_num_t is_tree_small;
        // number of hashed entries in the tree
        ipc_entry_num_t is_tree_hash;
        // for is_fast_space()
        boolean_t is_fast;
    };
而我们研究的对象 `Mach Ports`全都存储在`is_table`这个数组中，这个数组就是由`ipc_entry`组成的。
        struct ipc_entry {
            struct ipc_object *ie_object;   //ipc_port_t
            ipc_entry_bits_t ie_bits;       //gen|0|0|0|capability|user reference
            mach_port_index_t ie_index;
            union {
                mach_port_index_t next;     /* next in freelist, or...  */