title:Fear the EAR: discovering and mitigating execution after redirect
vulnerabilities
author:Adam Doup&apos;e and
Bryce Boe and
Christopher Kruegel and
Giovanni Vigna
Fear the EAR: Discovering and Mitigating
Execution After Redirect Vulnerabilities
Adam Doupé, Bryce Boe, Christopher Kruegel, and Giovanni Vigna
University of California, Santa Barbara
{adoupe, bboe, chris, vigna}@cs.ucsb.edu
ABSTRACT
The complexity of modern web applications makes it diﬃ-
cult for developers to fully understand the security implica-
tions of their code. Attackers exploit the resulting security
vulnerabilities to gain unauthorized access to the web appli-
cation environment. Previous research into web application
vulnerabilities has mostly focused on input validation ﬂaws,
such as cross site scripting and SQL injection, while logic
ﬂaws have received comparably less attention.
In this paper, we present a comprehensive study of a rela-
tively unknown logic ﬂaw in web applications, which we call
Execution After Redirect, or EAR. A web application de-
veloper can introduce an EAR by calling a redirect method
under the assumption that execution will halt. A vulnera-
bility occurs when server-side execution continues after the
developer’s intended halting point, which can lead to bro-
ken/insuﬃcient access controls and information leakage. We
start with an analysis of how susceptible applications written
in nine web frameworks are to EAR vulnerabilities. We then
discuss the results from the EAR challenge contained within
the 2010 International Capture the Flag Competition. Fi-
nally, we present an open-source, white-box, static analysis
tool to detect EARs in Ruby on Rails web applications. This
tool found 3,944 EAR instances in 18,127 open-source appli-
cations. Finally, we describe an approach to prevent EARs
in web frameworks.
Categories and Subject Descriptors
D.2.5 [Testing and Debugging]
General Terms
Security
Keywords
static analysis, web applications, execution after redirect
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
1.
INTRODUCTION
An increasing number of services are being oﬀered on-
line. For example, banking, shopping, socializing, reading
the news, and enjoying entertainment are all available on the
web. The increasing amount of sensitive data stored by web
applications has attracted the attention of cyber-criminals,
who break into systems to steal valuable information such
as passwords, credit card numbers, social security numbers,
and bank account credentials.
Attackers use a variety of vulnerabilities to exploit web
applications.
In 2008, Albert Gonzalez was accused and
later convicted of stealing 40 million credit and debit cards
from major corporate retailers, by writing SQL injection
attacks [20, 30]. Another common vulnerability, cross-site
scripting (XSS), is the second highest-ranked entry on the
OWASP top ten security risks for web applications, behind
injection attacks like SQL injection [29]. Thus, SQL in-
jection and XSS have received a large amount of attention
by the security community. Other popular web application
vulnerabilities include cross site request forgery (XSRF) [5],
HTTP parameter pollution (HPP) [3, 12], HTTP response
splitting [27], and clickjacking [2, 21].
In this paper, we present an in-depth study of a little-known
real-world web application logic ﬂaw; one we are calling Ex-
ecution After Redirect (EAR). An EAR occurs because of
a developer’s misunderstanding of how the web application
framework operates. In the normal workﬂow of a web appli-
cation, a user sends a request to the web application. The
web application receives this request, performs some server-
side processing, and returns an HTTP response. Part of
the HTTP response can be a notiﬁcation that the client (a
web browser) should look elsewhere for the requested re-
source.
In this case, the web application sets the HTTP
response code to 301, 302, 303, or 307, and adds a Loca-
tion header [31]. These response codes instruct the browser
to look for the resource originally requested at a new URL
speciﬁed by the web application in the HTTP Location
header [32]. This process is known as redirection1; the web
application redirects the user to another resource.
Intuitively, one assumes that a redirect should end execu-
tion of the server side code; the reason is that the browser
immediately sends a request for the new location as soon as
the redirection response is received, and it does not process
the rest of the web application’s output. Some web frame-
1In this paper, we consider only HTTP server-side redirec-
tion. Other forms of redirection, executed on the client, exist
such as JavaScript redirect or HTML meta refresh.
works, however, do not halt execution on a redirect. This
can lead to EAR vulnerabilities.
Speciﬁcally, an EAR can be introduced when a web appli-
cation developer writes code that issues an HTTP redirect
under the assumption that the redirect will automatically
halt execution of the web application. Depending on the
framework, execution can continue after the call to the redi-
rect function, potentially violating the security properties of
the web application.
We deﬁne halt-on-redirect as a web framework behav-
ior where server-side code execution halts on a redirect,
thus preventing EARs. Unfortunately, some languages make
halt-on-redirect diﬃcult to implement, for instance, by not
supporting a goto-type statement. Therefore, web frame-
works diﬀer in supporting halt-on-redirect behavior. This
diﬀerence in redirect method semantics can increase the de-
veloper’s confusion when developing applications in diﬀerent
frameworks.
In this paper, we present a comprehensive study of Execu-
tion After Redirect vulnerabilities: we provide an overview
of EARs and classify EARs into diﬀerent types. We also
analyze nine web application frameworks’ susceptibility to
EARs, specifying their redirect semantics, as well as detail-
ing what exactly makes them vulnerable to EARs. More-
over, we develop a novel static analysis algorithm to detect
EARs, which we implemented in an open-source tool to ana-
lyze Ruby on Rails web applications. Finally, we discovered
hundreds of vulnerabilities in open-source Ruby on Rails
web applications, with a very low false positive rate.
In summary, this paper provides the following contribu-
tions:
• We categorize EARs and provide an analysis of nine
frameworks’ susceptibility to various types of EARs.
• We discuss the results from the EAR challenge con-
tained within our 2010 International Capture the Flag
Competition.
• We present an algorithm to statically detect EARs in
Ruby on Rails applications.
• We run our white-box tool on 18,127 open-source Ruby
on Rails applications, which found 3,944 EARs.
2. OVERVIEW OF EARS
An Execution After Redirect vulnerability is a logic ﬂaw
in web applications that results from a developer’s misun-
derstanding of the semantics of redirection. Very often this
misunderstanding is caused by the web framework used by
the developer2. In particular, developers typically assume
that the web application will halt after calling a function
of the web framework that performs a redirect. Certain
web frameworks, however, do not halt execution on a redi-
rect, and instead, execute all the code that follows the redi-
rect operation. The web browser perpetuates this misunder-
standing, as it obediently performs the redirect, thus falsely
indicating that the code is correct. As a result, when the
2 This misunderstanding was conﬁrmed by a developer who
responded to us when we notiﬁed him of an EAR in his code,
who said, “I wasn’t aware at all of this problem because I
thought ruby on rails will always end any execution after a
redirect.” This example shows that developers do not always
understand how their web framework handles redirects.
1 class TopicsControl l er  is_admin () )
3 {
4
5 }
6 echo " Sensitive Information " ;
header ( " Location : / " ) ;
Listing 3: Example of an information leakage Execution
After Redirect vulnerability in PHP. If the current_user
is not an administrator, the PHP header function will be
called, redirecting the user to “/”. However, the sensitive
information will still be returned in the output, thus leaking
information. The ﬁx is to call the exit function after the
header call.
additional, unintended, code is executed after a redirect. For
example, the code executed after the redirect could set a lo-
cal variable to a static string, and the local variable is not
used or stored. Although no security properties are violated,
a benign EAR may indicate that a developer misunderstood
the redirect semantics of the web framework, posing the risk
that code will, in the future, be added after the redirect, el-
evating the EAR from benign to vulnerable.
A vulnerable EAR occurs when the code executed after
the redirect violates the security properties of the web ap-
plication. More speciﬁcally, in a vulnerable EAR the code
executed after the redirect allows unauthorized modiﬁcation
to the state of the web application (typically the database),
and/or causes leakage (reads and returns to the browser)
of data to an unauthorized user. In the former case (e.g.,
see Listing 1), the integrity of the web application is com-
promised, while in the latter case, the conﬁdentiality of the
web application is violated (e.g., see Listing 3). Thus, every
vulnerable EAR is an instance of broken/insuﬃcient access
controls, because the redirect call is an indication that the