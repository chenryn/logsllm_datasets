HomeKit
SmartThings
SmartThings
SmartThings
HomeKit
HomeKit
HomeKit
Alexa
TABLE IV: A summary of the details for attacking the victim rules in the testbeds, including delayed devices and events/commands, the
channels which are utilized to realize the delay, and the delay range that have been tested. COA: Condition Overlapping Attack.
Testbed Victim Rules1
1 & 2
3 & 4
6 & 7
8 & 9
10 & 11
12 & 13
14 & 15
1 & 2
3 & 4
5 & 6
8 & 9
T1
T2
Attack Type
COA (Action Conflict)
Condition Enabling Attack
Condition Diverging Attack
COA (Chained Execution)
Action Disordering Attack
Condition Disabling Attack
Trigger-Condition Overlapping Attack
Action Delaying Attack
COA (Infinite Loop)
Action Disordering Attack
Action Delaying Attack
Event/Command to Delay?2
motion active event from 7
door closed event from SmartThings
away mode event from HomeKit
motion active event from 9
door open event from 10
motion active event from 8
smoke event from 2
turn on command to 3
motion active event from 8
door open event from 21
switch on event from 17
Homebridge → SmartThings hub
Which Channel to Delay?
SmartThings hub → router
Homebridge → HomePod
Homebridge → HomePod
SmartThings hub → router
Homebridge → HomePod
router → Arlo camera
Philips Hue bridge → HomePod
Philips Hue bridge → HomePod
SmartThings hub → router
SmartThings hub → router
Delay Range (seconds)
16-47
10-Unbounded3
10
10–Unbounded
16-47
10–Unbounded
10–Unbounded
120-600
10–Unbounded
16-47
16-47
1 See Table III for the rules referred by the given RIDs.
it depends on the HomePod’s dynamic behavior in runtime.
2 See Table II for the devices referred by the given device IDs.
3 The upper bound is non-deterministic because
Delay Range. Although larger event/command delays usually
create larger time windows for performing DAI attacks, the al-
lowable delay length (without causing timeouts) is determined
by the implementation of the IoT devices and/or platforms.
Delaying the communication for too long will usually trigger
timeout behaviors from either the device or platform side.
We obtain the allowable delay range of device events and
commands by reviewing the specification [52] and analyzing
the traffic patterns on the target channels shown in Table IV.
We find that the allowable delay range is typically deter-
mined by three factors: (1) the interval of periodical messages
between an IoT device/hub and a platform, e.g., keep-alive
requests (a.k.a., heartbeat) or platform-initiated requests; (2)
the maximum allowable delay of keep-alive reply; (3) the
maximum allowable delay of event/command reply.
The SmartThings hub sends a keep-alive request to the
SmartThings cloud if it has not sent any keep-alive request
or device events to the cloud (i.e., the session is idle) for
31 seconds. Then, it sets a timer for 16 seconds and waits
for the keep-alive reply. If the hub does not receive a keep-
alive reply when the timer fires, it will trigger a timeout and
disconnect the TCP connection with the cloud. On the other
hand, the cloud also listens to the session. If the session is
idle for 31 seconds, it will also set a 16-second timer. The
cloud disconnects the TCP connection with the hub if it does
not receive any message from the hub when the timer fires.
The actual maximum delay of an event in runtime is dynamic
because it also depends on the timing of the event, i.e., the
temporal distance between the event and the last message on
the session. An attacker needs to release the event (as well as
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
10294
other messages in the message queue) if he finds that the hub
or cloud is about to trigger a timeout. Therefore, the delay
range is predictable (between 16-47 seconds) but the attacker
needs to dynamically adjust the actual delay length to avoid
causing timeout behaviors which may trigger alarms. Philips
Hue bridge/Homebridge and HomePod (hosting HomeKit) do
not exchange periodic keep-alive messages. Homepod only
occasionally initiates a request to query the states of devices
that are connected to the bridge and allows for 10-second delay
for the reply. According to the HomeKit Accessory Protocol
(HAP [52], used by HomeKit), devices, after sending an event
message, do not get a reply from HomeKit (on HomePod).
Thus, we can delay the events from a Philips Hue bridge or
Homebridge until HomeKit requests the device’s state (which
requires a reply within 10 seconds). Thus, the delay range
has a lower bound of 10 seconds and an unbounded upper
bound since the HomeKit-initiated request is unpredictable.
According to our tests, events can be delayed by more than
10 minutes. In similar ways, we obtain the delay range for
other channels. The results are presented in the last column of
Table IV.
2) Verifying Results: All attacks listed in Table IV are
successfully verified, as shown in Table V. The automation
results also show that successful attacks lead to annoyance,
inconvenience, and even severe safety threats to the smart
home owners. Aside from the verification of the testbeds, we
also verify the attack results in a controlled environment, by
observing the physical states of devices instead of the IoT
events/commands. All the cases in Table IV are physically
verified, except for Rules 10 and 11 in testbed T1 and Rules
5 and 6 in testbed T2. During the attack, the humidifiers and
lights are offline and cannot receive the turn-on command from
Rule 11 in T1 (or Rule 6 in T2) because their outlets are still in
OFF status. When the outlets are turned on, the humidifiers and
lights will not receive another turn-on command. As a result,
Rule 11 in T1 (or Rule 6 in T2) fails to work. The humidifiers
were indeed not turned on. Interestingly, we observe that the
lights (bulbs) are forced to turn on when the connecting outlets
turn on. Thus, the attack does not disable the bulbs from being
turned on, but only delays them for several seconds.
C. Attack Opportunities
As discussed in Section IV, some of the DAI attacks are
opportunistic and can only be successful when a homeowner
behaves in certain manners. To evaluate the possibility of DAI
attacks on smart homes, we run the two testbeds on a natural
daily basis for one week, without providing any guidelines
or restrictions on the daily activities to the testbed members.
Infrequent automation rules, i.e., Rules 14 & 15 in T1 and
Rules 8 & 9 in T2, are excluded in this experiment since
they are hardly ever triggered (the triggers are either smoke
or water leaks). With the experiment, we aim to answer this
question: “What are the opportunities an attacker has to attack
the victim rules and what is the success rate of the attack, when
the testbed members behave in a natural way?”
1) Methodology: We run both testbeds for one week and
collect
the device events, without performing any attacks.
The collected event logs are transformed to a uniform format
⟨TestbedID, DeviceID, Attribute, Value, Timestamp⟩
in Section V-B). By traversing the
(same format as
event
logs, we are able to track the executions of each
automation rule. We record each execution instance as a
tuple ⟨TestbedID, RuleID, Timestamp⟩. By doing this,
we obtain the collection of execution tuples of every rule.
Generally speaking, DAI attacks can only be performed
when victim rules are triggered by users. To find out attack
opportunities in the week, we perform a case-by-case analysis
on the combination of the event log and the execution tuples
of every pair of victim rules (listed in Table IV). Consider
the victim rules 6 and 7 in testbed T1. For each execution
tuple of Rule 6 in testbed T1 (i.e., ⟨1, 6, t1⟩), we examine if
there is an execution tuple of Rule 7 (i.e., ⟨1, 7, t2⟩), such that
0 ≤ t2 − t1 ≤ 2 (in seconds), and if there is a door-closed
event of the garage door 21 (i.e., ⟨1, 21 , door, closed, t3⟩)
in the event log, such that t1 ≤ t3 ≤ t2. If true, it means
that Rule 6 closed the garage door, which in turn triggered
the execution of Rule 7, which is an interaction that can be
attacked by the DAI attacks; we mark the executions of both
rules as an attack opportunity.
As discussed in Section IV, to successfully launch an attack,
the attacker need to delay specific events by a sufficient period.
For Rules 6 and 7, we trace back the event logs to find the most
recent away mode event (denoted as ⟨1, N/A, mode, away, t4⟩).
If the time difference between t2 and t4 is smaller than a
threshold ∆T ′ (i.e., the maximum allowable delay of the away
mode event), i.e., t2 − t4  ∆Tallowed,
the attack fails, because it cannot delay the door-open event
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
11295
TABLE V: Results of attack validation. See Table II for the definition of device IDs.
Testbed
T1
T2
Victim
Rules
1 & 2
3 & 4
6 & 7
8 & 9
10 & 11
12 & 13
14 & 15
1 & 2
3 & 4
5 & 6
8 & 9
Automation Result on Day 1
(without attack)
Light 16 turns on once.
Garage door 16 is closed.
Locks 12 and 13 are locked.
Automation Result on Day 2
(with attack)
Attack
Validated?
Light 16 turns and off alternately about every 15 minutes.
Garage door 16 is closed and then opened.
Locks 12 and 13 are NOT locked.
Outlet 20 remains on when heater 3 turns on.
Outlet 20 turns off 2 seconds after heater 3 turns on.
Outlets 4 5 6 and then (humidifier 14 , lights 15 16 ) turn on.
Both lights 17 18 turn on.
Sprinkler 24 turns on and water valve 23 remains opened.
Camera 3 turns on immediately after lock 2 is unlocked.
Light 9 turns on.
Only outlets 4 5 6 turn on.
Only 17 turns on.
Water valve 23 is closed after Sprinkler 24 turns on.
Camera 3 turns on 538 seconds after lock 2 is unlocked.
Light 9 turns on and off alternately for 141 seconds.
Outlets 13 14 turn on and then humidifier 16 turns on.
Only outlets 13 14 turn on.
Water valve 17 and Sprinkler 19 are turned on within 1 second. Water valve 17 turns on 58 seconds after sprinkler 19 turns on.
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
TABLE VI: Results of attack opportunities and success rates during a week. No: the total number of attack opportunities over the week.
Ns: the total number of successful attacks over the week. COA: Condition Overlapping Attack.
Testbed
Victim Rules
Attack Type
T1
T2
1 & 2
3 & 4
6 & 7
8 & 9
10 & 11
12 & 13
1 & 2
3 & 4
5 & 6
COA (Action Conflict)
Condition Enabling Attack
Condition Diverging Attack
COA (Chained Execution)
Action Disordering Attack
Condition Disabling Attack
Action Delaying Attack
COA (Infinite Loop)
Action Disordering Attack
No
3
6
6
7
2
11
9
12
7
Ns
3
6
3
4
2
11
9
12
5
Mon.
0
1
0