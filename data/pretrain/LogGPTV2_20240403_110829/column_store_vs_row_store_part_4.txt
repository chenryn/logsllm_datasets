queryoptimizertodetectwhenthisoptimizationcanbeused. The
andonlyoneresultineachdimensiontableforeachpositioninthe
codethatevaluatespredicatesagainstthedimensiontableiscapa-
intersectedpositionlistfromthefacttable. Thismeansthatthere
bleofdetectingwhethertheresultsetiscontiguous. Ifso,thefact
arethesamenumberofresultsforeachdimensiontablejoinfrom
tablepredicateisrewrittenatrun-time.
thisthirdphase,soeachjoincanbedoneseparatelyandtheresults
combined(stitchedtogether)atalaterpointinthequeryplan.
6. EXPERIMENTS
5.4.2 Between-PredicateRewriting
Inthissection,wecomparetherow-orientedapproachestothe
Asdescribedthusfar,thisalgorithmisnotmuchmorethanan-
performanceofC-StoreontheSSBM,withthegoalofanswering
other wayof thinking abouta column-oriented semijoinor a late
fourkeyquestions:
materializedhashjoin.Eventhoughthehashpartofthejoinisex-
pressed as a predicate on a fact table column, practically there is
little difference between the way the predicate is applied and the 1. Howdothedifferentattemptstoemulateacolumnstoreina
waya(latematerialization)hashjoinisexecuted. Theadvantage row-storecomparetothebaselineperformanceofC-Store?
7
2. Isitpossibleforanunmodifiedrow-storetoobtainthebene- Incontrastwiththisexpectation,theSystemXnumbersaresig-
fitsofcolumn-orienteddesign? nificantlyfaster(morethanafactoroftwo)thantheC-Storenum-
bers. Inretrospect,thisisnotallthatsurprising—SystemXhas
3. Ofthespecificoptimizationsproposedforcolumn-stores(com-
teams of people dedicated to seeking and removing performance
pression,latematerialization,andblockprocessing),which
bottlenecksinthecode,whileC-Storehasmultipleknownperfor-
arethemostsignificant?
mancebottlenecksthathaveyettoberesolved[3]. Moreover,C-
4. Howdoesthecostofperformingstarschemajoinsincolumn- Store,asasimpleprototype,hasnotimplementedadvancedperfor-
stores using the invisible join technique compare with exe- mancefeaturesthatareavailableinSystemX.Twoofthesefeatures
cuting queries on a denormalized fact table where the join arepartitioningandmulti-threading. SystemXisabletopartition
hasbeenpre-executed? eachmaterializedviewoptimallyforthequeryflightthatitisde-
signedfor. Partitioningimprovesperformancewhenrunningona
Byansweringthesequestions,weprovidedatabaseimplementers
singlemachinebyreducingthedatathatneedstobescannedinor-
who are interested in adopting a column-oriented approach with
dertoansweraquery.Forexample,thematerializedviewusedfor
guidelinesforwhichperformanceoptimizationswillbemostfruit-
queryflight1ispartitionedonorderdateyear,whichisusefulsince
ful.Further,theanswerswillhelpusunderstandwhatchangesneed
eachqueryinthisflighthasapredicateonorderdate.Todetermine
tobemadeatthestorage-managerandqueryexecutorlevelstorow-
the performance advantage System X receives from partitioning,
storesifrow-storesaretosuccessfullysimulatecolumn-stores.
weranthesamebenchmarkonthesamematerializedviewswith-
Allofourexperimentswererunona2.8GHzsingleprocessor,
outpartitioningthem.Wefoundthattheaveragequerytimeinthis
dualcorePentium(R)Dworkstationwith3GBofRAMrunning
casewas20.25seconds. Thus,partitioninggivesSystemXafac-
RedHatEnterpriseLinux5. Themachinehasa4-diskarray,man-
tor of two advantage (though this varied by query, which will be
agedasasinglelogicalvolumewithfilesstripedacrossit. Typical
discussed further in Section 6.2). C-Store is also at a disadvan-
I/Othroughputis40-50MB/sec/disk,or160-200MB/secinag-
tagesinceitnotmulti-threaded,andconsequentlyisunabletotake
gregateforstripedfiles. Thenumberswereportaretheaverageof
advantageoftheextracore.
severalruns,andarebasedona“warm”bufferpool(inpractice,we
Thus,therearemanydifferencesbetweenthetwosystemsweex-
foundthatthisyieldedabouta30%performanceincreaseforboth
perimentwithinthispaper. Somearefundamentaldifferencesbe-
systems; thegainisnotparticularlydramaticbecausetheamount
tweencolumn-storesandrow-stores,andsomeareimplementation
ofdatareadbyeachqueryexceedsthesizeofthebufferpool).
artifacts. Sinceitisdifficulttocometousefulconclusionswhen
6.1 MotivationforExperimentalSetup comparingnumbersacrossdifferentsystems,wechooseadifferent
tacticinourexperimentalsetup,exploringbenchmarkperformance
Figure5comparestheperformanceofC-StoreandSystemXon
fromtwoangles. InSection6.2weattempttosimulateacolumn-
the Star Schema Benchmark. We caution the reader to not read
storeinsideofarow-store.Theexperimentsinthissectionareonly
too much into absolute performance differences between the two
onSystemX,andthuswedonotrunintocross-systemcomparison
systems—aswediscussinthissection,therearesubstantialdif-
problems. In Section 6.3, we remove performance optimizations
ferencesintheimplementationsofthesesystemsbeyondthebasic
fromC-Storeuntilrow-storeperformanceisachieved. Again, all
differenceofrowsvs.columnsthataffecttheseperformancenum-
experimentsareononlyasinglesystem(C-Store).
bers.
Byperformingourexperimentsinthisway,weareabletocome
Inthisfigure,“RS”referstonumbersforthebaseSystemXcase,
tosomeconclusionsabouttheperformanceadvantageofcolumn-
“CS”referstonumbersforthebaseC-Storecase,and“RS(MV)”
storeswithoutrelyingoncross-systemcomparisons. Forexample,
referstonumbersonSystemXusinganoptimalcollectionofma-
itisinterestingtonoteinFigure5thatthereismorethanafactor
terializedviewscontainingminimalprojectionsoftablesneededto
of six difference between “CS” and “CS (Row MV)” despite the
answereachquery(seeSection4).Asshown,C-Storeoutperforms
factthattheyarerunonthesamesystemandbothreadtheminimal
SystemXbyafactorofsixinthebasecase,andafactorofthree
setofcolumnsoffdiskneededtoanswereachquery. Clearlythe
whenSystemXisusingmaterializedviews.Thisisconsistentwith
performanceadvantageofacolumn-storeismorethanjusttheI/O
previousworkthatshowsthatcolumn-storescansignificantlyout-
advantage of reading in less data from disk. We will explain the
performrow-storesondatawarehouseworkloads[2,9,22].
reasonforthisperformancedifferenceinSection6.3.
However,thefourthsetofnumberspresentedinFigure5,“CS
(Row-MV)”illustratethecautionthatneedstobetakenwhencom-
6.2 Column-StoreSimulationinaRow-Store
paringnumbersacrosssystems. Forthesenumbers,westoredthe
identical (row-oriented!) materialized view data inside C-Store. Inthissection,wedescribetheperformanceofthedifferentcon-
OnemightexpecttheC-Storestoragemanagertobeunabletostore figurationsofSystemXontheStarSchemaBenchmark. Wecon-
datainrowssince,afterall,itisacolumn-store.However,thiscan figuredSystemXtopartitionthelineordertableonorder-
be done easily by using tables that have a single column of type datebyyear(thismeansthatadifferentphysicalpartitioniscre-
“string”. The valuesin this column areentire tuples. One might ated for tuples from each year in the database). As described in
alsoexpectthattheC-Storequeryexecuterwouldbeunabletoop- Section6.1,thispartitioningsubstantiallyspeedsupSSBMqueries
erateonrows,sinceitexpectsindividualcolumnsasinput. How- thatinvolveapredicateonorderdate(queries1.1,1.2,1.3,3.4,
ever,rowsarealegalintermediaterepresentationinC-Store—as 4.2, and4.3queryjust1year; queries3.1, 3.2, and3.3includea
explainedinSection5.2,atsomepointinaqueryplan,C-Storere- substantiallylessselectivequeryoverhalfofyears).Unfortunately,
constructsrowsfromcomponentcolumns(sincetheuserinterface forthecolumn-orientedrepresentations,SystemXdoesn’tallowus
to a RDBMS is row-by-row). After it performs this tuple recon- topartitiontwo-columnverticalpartitionsonorderdate(since
struction, it proceeds to execute the rest of the query plan using they do not contain the orderdate column, except, of course,
standardrow-storeoperators[5]. Thus,boththe“CS(Row-MV)” fortheorderdateverticalpartition),whichmeansthatforthose
andthe“RS(MV)”areexecutingthesamequeriesonthesamein- queryflightsthatrestrictontheorderdatecolumn,thecolumn-
putdatastoredinthesameway. Consequently,onemightexpect orientedapproachesareatadisadvantagerelativetothebasecase.
thesenumberstobeidentical. Nevertheless, we decided to use partitioning for the base case
8
60
)sdnoces(
40
20 emiT
0
1.1 1.2 1.3 2.1 2.2 2.3 3.1 3.2 3.3 3.4 4.1 4.2 4.3 AVG
RS 2.7 2.0 1.5 43.8 44.1 46.0 43.0 42.8 31.2 6.5 44.4 14.1 12.2 25.7
RS (MV) 1.0 1.0 0.2 15.5 13.5 11.8 16.1 6.9 6.4 3.0 29.2 22.4 6.4 10.2
CS 0.4 0.1 0.1 5.7 4.2 3.9 11.0 4.4 7.6 0.6 8.2 3.7 2.6 4.0
CS (Row-MV) 16.0 9.1 8.4 33.5 23.5 22.3 48.5 21.5 17.6 17.4 48.6 38.4 32.1 25.9
Figure5:BaselineperformanceofC-Store“CS”andSystemX“RS”,comparedwithmaterializedviewcasesonthesamesystems.
becauseitisinfactthestrategythatadatabaseadministratorwould ure6(b).Materializedviewsperformbestinallcases,becausethey
usewhentryingtoimprovetheperformanceofthesequeriesona readtheminimalamountofdatarequiredtoprocessaquery. Af-
row-store. When we ran the base case without partitioning, per- ter materialized views, the traditional approach or the traditional
formancewasreducedbyafactoroftwoonaverage(thoughthis approach with bitmap indexing, is usually the best choice. On
varied per query depending on the selectivity of the predicate on average, the traditional approach is about three times better than
the orderdate column). Thus, we would expect the vertical the best of our attempts to emulate a column-oriented approach.
partitioning case to improve by a factor of two, on average, if it Thisisparticularlytrueofqueriesthatcanexploitpartitioningon
were possible to partition tables based on two levels of indirec- orderdate,asdiscussedabove. Forqueryflight2(whichdoes
tion(fromprimarykey,orrecord-id,wegetorderdate,and notbenefitfrompartitioning),theverticalpartitioningapproachis
fromorderdatewegetyear). competitivewiththetraditionalapproach;theindex-onlyapproach
Other relevant configuration parameters for System X include: performspoorlyforreasonswediscussbelow. Beforelookingat
32 KB disk pages, a 1.5 GB maximum memory for sorts, joins, theperformanceofindividualqueriesinmoredetail,wesummarize
intermediateresults,anda500MBbufferpool. Weexperimented thetwohighlevelissuesthatlimittheapproachofthecolumnarap-
with different buffer pool sizes and found that different sizes did proaches:tupleoverheads,andinefficienttuplereconstruction:
notyieldlargedifferencesinquerytimes(duetodominantuseof Tupleoverheads: Asothershaveobserved[16],oneoftheprob-
largetablescansinthisbenchmark),unlessaverysmallbufferpool lemswithafullyverticallypartitionedapproachinarow-storeis
wasused. Weenabledcompressionandsequentialscanprefetch- thattupleoverheadscanbequitelarge. Thisisfurtheraggravated
ing, and we noticed that both of these techniques improved per- bytherequirementthatrecord-idsorprimarykeysbestoredwith
formance,againduetothelargeamountofI/Oneededtoprocess each column to allow tuples to be reconstructed. We compared
thesequeries. SystemXalsoimplementsastarjoinandtheopti- thesizesofcolumn-tablesinourverticalpartitioningapproachto
mizerwillusebloomfilterswhenitexpectsthiswillimprovequery thesizesofthetraditionalrowstoretables,andfoundthatasingle
performance. column-tablefromourSSBMscale10lineordertable(with60
RecallfromSection4thatweexperimentedwithsixconfigura- milliontuples)requiresbetween0.7and1.1GBytesofdataafter
tionsofSystemXonSSBM: compression to store – this represents about 8 bytes of overhead
perrow,plusabout4byteseachfortherecord-idandthecolumn
1. A“traditional”row-orientedrepresentation; here, weallow
attribute, dependingonthecolumnandtheextenttowhichcom-
SystemXtousebitmapsandbloomfiltersiftheyarebenefi- pressioniseffective(16bytes×6×107tuples=960MB). In
cial.
contrast,theentire17columnlineordertableinthetraditional
2. A“traditional(bitmap)”approach,similartotraditional,but approach occupies about 6 GBytes decompressed, or 4 GBytes
withplansbiasedtousebitmaps,sometimescausingthemto compressed,meaningthatscanningjustfourofthecolumnsinthe
produceinferiorplanstothepuretraditionalapproach. verticalpartitioningapproachwilltakeaslongasscanningtheen-
tire fact table in the traditional approach. As a point of compar-
3. A“verticalpartitioning”approach, witheachcolumninits ison, in C-Store, a single column of integers takes just 240 MB
ownrelationwiththerecord-idfromtheoriginalrelation. (4bytes×6×107tuples=240MB),andtheentiretablecom-
pressedtakes2.3Gbytes.
4. An“index-only”representation,usinganunclusteredB+tree
Column Joins: As we mentioned above, merging two columns
oneachcolumnintherow-orientedapproach,andthenan-
from the same table together requires a join operation. System
sweringqueriesbyreadingvaluesdirectlyfromtheindexes.
Xfavorsusinghash-joinsfortheseoperations. Weexperimented
5. A“materializedviews”approachwiththeoptimalcollection withforcingSystemXtouseindexnestedloopsandmergejoins,
of materialized views for every query (no joins were per- butfoundthatthisdidnotimproveperformancebecauseindexac-
formedinadvanceintheseviews). cesseshadhighoverheadandSystemXwasunabletoskipthesort
precedingthemergejoin.
The detailed results broken down by query flight are shown in
Figure6(a), withaverageresultsacrossallqueriesshowninFig-
9