### Password Permutations and Character Manipulation

Passwords consisting only of lowercase alphabetical characters can produce over three million permutations. This number is too large to be practically tested with remote access to the application alone.

Tools such as "Character frobber" and "bit flipper" functions can systematically manipulate parts of a parameter's existing value to probe the application's handling of subtle modifications (see Chapter 7).

In addition to payload generation functions, you can configure rules to perform arbitrary processing on each payload's value before it is used. This includes string and case manipulation, encoding and decoding in various schemes, and hashing. This capability enables you to build effective payloads in many kinds of unusual situations.

---

### Configuring Response Analysis

For many types of attacks, it is essential to identify the attributes of the server's responses that you are interested in analyzing. For example, when enumerating identifiers, you may need to search each response for a specific string. When fuzzing, you may want to scan for a large number of common error messages and similar indicators.

By default, Burp Intruder records the HTTP status code, the response length, any cookies set by the server, and the time taken to receive the response in its table of results. Similar to JAttack, you can also configure Burp Intruder to perform custom analysis of the application’s responses to help identify interesting cases that may indicate the presence of a vulnerability or merit further investigation. You can specify strings or regular expressions (regex) that responses will be searched for, set customized strings to control the extraction of data from the server’s responses, and make Intruder check whether each response contains the attack payload itself. These settings can be configured before each attack is launched and can also be applied to the attack results after the attack has started.

---

### Launching an Attack

After configuring payload positions, payload sources, and any required analysis of server responses, you are ready to launch your attack. Let’s take a quick look at how Intruder can be used to deliver some common customized automated attacks.

#### Attack 1: Enumerating Identifiers

Suppose you are targeting an application that supports self-registration for anonymous users. After creating an account, logging in, and gaining minimal functionality, one area of interest is the application’s session tokens. Logging in several times in close succession generates the following sequence:

```
000000-fb2200-16cb12-172ba72551
000000-bc7192-16cb12-172ba7279e
000000-73091f-16cb12-172ba729e8
000000-918cb1-16cb12-172ba72a2a
000000-aa820f-16cb12-172ba72b58
000000-bc8710-16cb12-172ba72e2b
```

Following the steps described in Chapter 7 to analyze these tokens, it is evident that approximately half of the token remains constant. Additionally, the second portion of the token is not processed by the application, and modifying this portion does not invalidate the tokens. The final portion appears to increment in some fashion, suggesting a potential opportunity for a session hijacking attack.

To leverage automation for this attack, find a single request/response pair that can detect valid tokens. Typically, any request for an authenticated page will suffice. You decide to target the page presented to each user following login:

```
GET /auth/502/Home.ashx HTTP/1.1
Host: mdsec.net
Cookie: SessionID=000000-fb2200-16cb12-172ba72551
```

Given the structure and handling of session tokens, your attack needs to modify only the final portion of the token. In fact, because of the identified sequence, the most productive initial attack modifies only the last few digits of the token. Configure Intruder with a single payload position, as shown in Figure 14-2.

Your payloads should sequence through all possible values for the final three digits. The token uses the same character set as hexadecimal numbers: 0 to 9 and a to f. Therefore, configure a payload source to generate all hexadecimal numbers in the range 0x000 to 0xfff, as shown in Figure 14-3.

In attacks to enumerate valid session tokens, identifying hits is typically straightforward. In this case, the application returns an HTTP 200 response for a valid token and an HTTP 302 redirect to the login page for an invalid token. Hence, no custom response analysis is needed for this attack.

Launching the attack causes Intruder to quickly iterate through the requests. The attack results are displayed in a table, which can be sorted by clicking each column heading. Sorting by status code helps you easily identify the valid tokens discovered, as shown in Figure 14-4. You can also use filtering and search functions within the results window to locate interesting items.

The attack is successful. You can replace the last three digits of your session token with any of the payloads that caused HTTP 200 responses, thereby hijacking the sessions of other application users. However, closer inspection of the results reveals that two responses are much longer, indicating a different home page was returned. Double-clicking a result item in Intruder displays the server’s response, revealing that the longer home pages contain more menu options and different details, suggesting these hijacked sessions belong to more-privileged users.

**TRY IT!**
http://mdsec.net/auth/502/

**TIP:** The response length is often a strong indicator of anomalous responses that merit further investigation. Even if another attribute, such as the HTTP status code, provides a reliable indicator of hits, always inspect the response length column to identify other interesting responses.

---

### Harvesting Information

Browsing further into the authenticated area of the application, you notice that it uses an index number in a URL parameter to identify functions requested by the user. For example, the following URL is used to display the My Details page for the current user:

```
https://mdsec.net/auth/502/ShowPage.ashx?pageid=32010039
```

This behavior offers an opportunity to discover functionality you have not yet found and for which you may not be properly authorized. Use Burp Intruder to cycle through a range of possible `pageid` values and extract the title of each page found.

Begin trawling for content within a numeric range known to contain valid values. Set your payload position markers to target the final two digits of the `pageid`, as shown in Figure 14-5, and generate payloads in the range 00 to 99.

Configure Intruder to capture the page title from each response using the Extract Grep function, similar to JAttack. Specify the expression that precedes the item you want to extract, as shown in Figure 14-6.

Launching this attack iterates through all possible values for the last two digits of the `pageid` parameter and shows the page title from each response, as shown in Figure 14-7. Several responses appear to contain interesting administrative functionality, and some are redirections to different URLs, warranting further investigation. You can reconfigure your Intruder attack to extract the target of these redirects or even to automatically follow them and show the page title from the eventual response.

**TRY IT!**
http://mdsec.net/auth/502/

---

### Application Fuzzing

In addition to exploiting identified bugs, test the target application for common vulnerabilities. To ensure decent coverage, test every parameter and request, starting from the login request onward.

To perform a quick fuzz test of a given request, set payload positions at all the request parameters. Click the auto button on the positions tab, as shown in Figure 14-8.

Configure a set of attack strings to use as payloads and some common error messages to search responses for. Intruder contains built-in sets of strings for both purposes.

Manually review the table of results to identify any anomalies that merit further investigation, as shown in Figure 14-9. Sort the responses in various ways to help identify interesting cases.

From an initial look at the results, it appears the application is vulnerable to SQL injection. When a single quotation mark is submitted, the application returns a different response with a message containing the strings "quotation" and "syntax." This behavior warrants manual investigation to confirm and exploit the bug.

**TRY IT!**
http://mdsec.net/auth/502/

**TIP:** Right-click any interesting-looking result and send the response to the Burp Repeater tool. This allows you to modify the request manually and reissue it multiple times to test the application’s handling of different payloads, probe for filter bypasses, or deliver actual exploits.

---

### Barriers to Automation

In many applications, the techniques described can be applied without problems. However, you may encounter obstacles that prevent straightforward customized automated attacks. These barriers typically fall into two categories:

- **Session-handling mechanisms:** These may defensively terminate sessions in response to unexpected requests, employ ephemeral parameter values such as anti-CSRF tokens that change per request, or involve multistage processes.
- **CAPTCHA controls:** Designed to prevent automated tools from accessing particular application functions, such as registering new user accounts.

We will examine each situation and describe ways to circumvent these barriers, either by refining your automated tools or finding defects in the application’s defenses.

#### Session-Handling Mechanisms

Many applications use session-handling mechanisms and other stateful functionality that can present problems for automated testing. Obstacles can arise in the following situations:

- The application terminates the session being used for testing, either defensively or for other reasons, rendering the remainder of the testing exercise ineffective.
- An application function employs a changing token that must be supplied with each request (e.g., to prevent request forgery attacks).
- The request being tested appears within a multistage process and is handled properly only if a series of other requests have first been made to get the application into a suitable state.

These obstacles can be circumvented by refining your automation techniques to work with the application’s mechanisms. If you are writing your own testing code, you can directly implement support for specific token-handling or multistage mechanisms. However, this approach can be complex and does not scale well to large applications.

#### Session-Handling Support in Burp Suite

Fortunately, Burp Suite provides features to handle these situations as painlessly as possible, allowing you to continue testing while Burp deals with the obstacles seamlessly in the background. These features include:

- **Cookie jar:** Tracks application cookies used by your browser and Burp’s tools. You can configure how Burp automatically updates the cookie jar and view and edit its contents directly, as shown in Figure 14-10.
- **Request macros:** Predefined sequences of one or more requests that can perform various session-related tasks, such as fetching a page to check the current session’s validity, performing a login to obtain a new valid session, obtaining a token or nonce, or preparing the application for a multistep process.
- **Session-handling rules:** The key component of Burp Suite’s session-handling support, allowing you to define how Burp manages session-related tasks.

**TRY IT!**
http://mdsec.net/auth/502/

**TIP:** Use the Burp Repeater tool to modify and reissue requests for further testing and exploitation.