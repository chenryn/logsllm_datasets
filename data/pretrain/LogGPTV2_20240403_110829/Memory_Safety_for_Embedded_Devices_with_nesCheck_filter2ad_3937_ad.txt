### TelosB Platform and Experimental Analysis

The TelosB platform was chosen for this experiment. Our experimental analysis included collecting statistics on the number of runtime checks added to the programs during instrumentation, as well as the checks removed as part of nesCheck’s check reduction. This metric encompasses the reduction due to pointer kind classification and additional analysis of pointer usage, which allows for the removal of checks when memory accesses can be statically verified as safe.

**Figure 9: Checks Added and Skipped in Instrumented TinyOS Sample Apps Benchmark**

As shown in Figure 9, the complete analysis and instrumentation of nesCheck for all TinyOS applications reduces, on average, the required checks by 20% of the total potentially vulnerable locations, significantly reducing the performance overhead in enforcing memory safety. For the entire benchmark suite, an average of 452 checks are added, and 110 are skipped.

### Energy Overhead

The power consumption for various operations, such as computation, radio communication, standby, or sleep, varies across different sensor mote hardware platforms. However, wireless transmission and reception, as well as transitions between on and off states of the radio, are the primary sources of power consumption on all platforms. Shnayder et al. [30] quantitatively measured that, in many cases, active CPU cycles in WSN applications are minimal and have a negligible effect on total power consumption.

The instrumentation of nesCheck in TinyOS programs does not introduce any additional radio communication but adds some runtime computation for dynamic checks. Therefore, the energy overhead is proportional to the performance overhead, scaled by the CPU's energy consumption.

Since measuring energy consumption directly on the motes' hardware is challenging [33], we used the energy model proposed by Polastre et al. [28]. Referencing the MicaZ motes hardware platform datasheet [22] (simulated by TOSSIM), we calculated the energy overhead by multiplying the battery voltage by current draw and time. The energy overhead for nesCheck averages 0.84%, a negligible quantity that aligns with our analytical expectations.

### Fault Injection

To evaluate nesCheck's effectiveness in preventing memory errors, we randomly injected memory vulnerabilities and bugs into TinyOS applications. We injected 500 random faults into each application in the TinyOS benchmark, totaling 4,500 faults. Each time, we selected a random memory access, altered its indices to produce a memory error, and included an extra printing instruction to mark the moment of the memory fault. We then instrumented the application and executed it.

We expected nesCheck to correctly find the fault, either statically or at runtime, and prevent out-of-bounds access. As shown in Figure 10, 22% of the injected faults were statically caught at compile time. 37% of the faults were injected into code areas that were not executed at runtime. For the faults executed at runtime (41% on average), 100% were correctly caught by the dynamic checks placed by nesCheck's instrumentation, meaning no fault occurred and went uncaught.

**Figure 10: Fault Injection Results on TinyOS Benchmark**

### Naive vs. Optimized Approach

While a direct comparison of nesCheck with traditional techniques like SoftBound or CCured is infeasible due to embedded system constraints and the lack of implementation for these techniques on embedded systems, we measured the performance benefits of nesCheck's check reduction to estimate the improvement over traditional techniques.

We ran nesCheck with ("optimized") and without ("naive") check reduction optimizations on all applications in the benchmark (excluding those that did not yield events in our performance overhead evaluation). Figure 11 shows a comparison of the overhead of the naive and optimized executions of the instrumented programs. On average, we observed an overhead reduction of 41.13%, demonstrating that nesCheck's check reduction effectively leads to significant performance improvements.

**Figure 11: Naive vs. Optimized Instrumentation on TinyOS Benchmark**

### Limitations

Currently, a sensor node instrumented with nesCheck reboots when a dynamic check fails. In the future, we plan to work on more advanced, programmer-guided recovery mechanisms to maintain network functionality even in the presence of memory errors.

An attacker could attempt to repeatedly trigger a memory error, causing a DoS attack. However, nesCheck's memory safety guarantees ensure that a memory safety error cannot be used for malicious intents, except for DoS.

More powerful computing platforms, such as Raspberry PI, are becoming increasingly available. However, they are impractical for common WSN applications due to higher cost, energy requirements, and size compared to low-power WSN nodes. Low-power WSN nodes are cheap, easily replaceable, deployable in bulk, and require little energy. Even if more advanced devices become cost-effective for large deployments, efficiency will remain a critical concern for memory safety techniques. We plan to investigate how nesCheck can be ported to more powerful platforms and leverage their capabilities to further improve performance.

### Related Work

Memory safety is an ongoing research topic [34]. Attacks on WSN software through memory vulnerabilities have been widely investigated. Francillon et al. [11] showed a detailed exploit for code injection without size limitation through carefully crafted network packets, while Giannetsos et al. [15] conducted a similar study targeting Von Neumann-architecture devices. These works cover most common architectures for WSNs, including MicaZ and TelosB motes.

From a defense perspective, research typically takes three directions: runtime protection, formal analysis, and symbolic execution. nesCheck enhances runtime protection with static analysis techniques.

**Runtime Protection:**
- **CCured [26]:** Introduces an extended type system and uses pointer classification to infer safe pointers. It instruments all non-safe pointers with runtime checks, potentially generating unnecessary checks.
- **SoftBound [24]:** A compile-time approach that instruments C code to enforce spatial memory safety by tracking properties of each pointed memory area and wrapping each memory access with a bounds check. It is designed for platforms with large amounts of memory and virtual memory mechanisms, which are not available on constrained embedded devices.

nesCheck leverages static analysis to minimize the number of pointers whose metadata is managed in-memory at runtime, replacing global metadata with local stack variables or conservatively removing metadata completely for specific pointers. While nesCheck also uses dynamic runtime checking, it tailors and optimizes this approach for the specific characteristics of nesC applications to improve performance.

**Formal Analysis:**
- **Bucur et al. [4]:** Propose a source-to-source transformation tool to make TinyOS code processable by the CBMC [6] bounded model checking proving tool. This approach inherits the limitations of formal verification, such as search space explosion, and may suffer from long analysis times and potential undecidability for large-scale applications.

**Symbolic Execution:**
- **Sasnauskas et al. [29]:** Build an approach on top of the Klee symbolic execution framework to debug TinyOS applications before deployment. The bottlenecks include the need for a good model definition and the rapid explosion of the search state. If coverage is incomplete, not all bugs can be identified. Conversely, nesCheck leverages runtime checks for all memory accesses that cannot be statically proven as safe, ensuring all potential vulnerabilities are caught and preventing memory corruption.

**Hardware:**
- **Francillon et al. [12]:** Propose a hardware modification to split the stack into a control flow stack and a data stack. This requires changes to the hardware platform, which is economically burdensome and unlikely to be pursued. nesCheck's software-only approach does not require hardware or source code modifications.

### Conclusions

We presented nesCheck, an approach that combines whole-program static analysis and dynamic checking techniques to efficiently enforce memory safety on nesC programs without requiring any source modification. nesCheck implements techniques to determine the presence of static memory bugs and instrument the code with the necessary set of runtime checks. It focuses on minimizing the overhead for dynamic checks, considering the strict constraints of embedded systems. Through extensive evaluation benchmarks, we demonstrated nesCheck's effectiveness in enforcing memory protection while minimizing runtime performance overhead (0.84% on energy, 5.3% on code size, up to 8.4% on performance, and 16.7% on RAM).

### Acknowledgments

We thank our shepherd Lucas Davi and the anonymous reviewers for their insightful comments, as well as Scott A. Carr, Nathan Burow, and Gregory Essertel for helpful discussions about different aspects of the work. The work reported in this paper has been supported, in part, by the National Science Foundation under grants CNS-1547358, CNS-1513783, and CNS-1657711, and by Purdue PLM Center.

### References

[1] T. M. Austin, S. E. Breach, and G. S. Sohi. Efficient detection of all pointer and array access errors. In ACM PLDI, 1994.
[2] A. Biere, A. Cimatti, E. Clarke, and Y. Zhu. Symbolic model checking without BDDs. Springer, 1999.
[3] D. Bucur. Intelligible tinyos sensor systems: Explanations for embedded software. In Modeling and Using Context, pages 54–66. Springer, 2011.
[4] D. Bucur and M. Kwiatkowska. On software verification for sensor nodes. Journal of Systems and Software, 84(10):1693–1707, 2011.
[5] Clang. clang: a C language family frontend for LLVM. http://clang.llvm.org/.
[6] E. Clarke, D. Kroening, and F. Lerda. A tool for checking ANSI-C programs. In TACAS. Springer, 2004.
[7] J. Condit, M. Harren, Z. Anderson, D. Gay, and G. C. Necula. Dependent types for low-level programming. In Progr. Languages and Systems. Springer, 2007.
[8] N. Cooprider, W. Archer, E. Eide, D. Gay, and J. Regehr. Efficient memory safety for tinyos. In SenSys. ACM, 2007.
[9] R. Cytron, J. Ferrante, B. K. Rosen, M. N. Wegman, and F. K. Zadeck. Efficiently computing static single assignment form and the control dependence graph. ACM TOPLAS, 1991.