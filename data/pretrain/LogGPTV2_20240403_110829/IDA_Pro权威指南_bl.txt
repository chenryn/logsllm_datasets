 模块。另一方面，如果你需要 idaapi
 模块，你必须自己导入该模块。
在使用IDAPython 时，请记住该插件将一个 Python 解释器实例嵌入到 IDA 中。在关闭 IDA之前，该解释器将正常运行。因此，你可以查看所有脚本和语句，就好像它们在 Python shell会话中运行一样。例如，在 IDA 会话中首次导入 idaapi
 模块后，在重新启动 IDA 之前，你根本不需要再次导入该模块。同样，已初始化的变量和函数定义将保留它们的值，直到被重新定义，或直到你退出 IDA 。
有大量方法可帮助你学习 IDA 的Python API 。如果你在使用 IDC 或使用IDA SDK 编程方面已经具有一些经验，那么你应该相当熟悉 idaapi
 与idc
 模块。在这种情况下，在开始充分利用IDAPython 之前，你只需要简单回顾 idautils
 模块的其他功能。如果之前有过使用 IDC 或SDK的经验，那么你可以研究 Hex-Ray 有关Python API 的文档，深入了解它的功能。请记住，idc
 模块基本上是 IDC API 的写照，因此，你会发现，IDA 内置帮助文档中的 IDC 函数列表将非常有用。同样，本章前面的 IDC 函数说明也适用于 idc
 模块中的对应函数。
15.7 IDAPython 脚本示例
为将IDC 与IDAPython 进行比较，在下面几节中，我们将提供与前面讨论 IDC 时相同的示例。我们尽可能充分利用特定于 Python 的功能，以在一定程度上说明以 Python 编写脚本所带来的效率。
15.7.1 枚举函数
IDAPython 的一个主要优点在于，它使用 Python 的强大数据类型来简化对数据库对象集合的访问。在代码清单 15-8 中，我们以 Python 重新实现了代码清单 15-1 列出的函数枚举脚本。回想一下，这段脚本的目的在于遍历数据库中的每一个函数，并打印出与每个函数有关的基本信息，包括函数的起始和结束地址、函数参数的大小、函数的局部变量空间的大小。所有输出全部在消息窗口中显示。
代码清单 15-8 使用Python 枚举函数
funcs = Functions()➊  
for f in funcs: ➋  
   name = Name(f)  
   end = GetFunctionAttr(f, FUNCATTR_END)  
   locals = GetFunctionAttr(f, FUNCATTR_FRSIZE)  
   frame = GetFrame(f)     # retrieve a handle to the function’s stack frame  
   if frame is None: continue  
   ret = GetMemberOffset(frame, " r")  # " r" is the name of the return address  
   if ret == -1: continue  
   firstArg = ret + 4  
   args = GetStrucSize(frame) – firstArg  
   Message("Function: %s, starts at %x, ends at %x\n" % (name, f, end))  
   Message("   Local variable area is %d bytes\n" % locals)  
   Message("   Arguments occupy %d bytes (%d args)\n" % (args, args / 4))  
在这段特殊的脚本中，使用 Python 除了用到有助于执行➋处for
 循环的Functions
 （➊）列表生成器外，并没有为我们提高多大效率。
15.7.2 枚举指令
代码清单15-9 说明如何利用 idautils
 模块中的列表生成器以 Python 编写代码清单 15-2 列出的指令计数脚本。
代码清单 15-9 使用Python 枚举指令
from idaapi import *  
func = get_func(here())➊   # here() is synonymous with ScreenEA()  
if not func is None:  
   fname = Name(func.startEA)  
   count = 0  
   for i in FuncItems(func.startEA) ➋ : count = count + 1  
   Warning("%s contains %d instructions\n" % (fname,count))  
else:  
   Warning("No function found at location %x" % here())
与IDC 版本的不同包括使用 SDK 函数（➊，通过 idaapi
 访问）来检索对函数对象（具体为func_t
 ）的引用，并使用 FuncItems
 生成器（➋，取自 idautils
 ）以便于遍历函数内的所有指令。由于我们无法在生成器上使用 Python 的len
 函数，因此我们仍然需要检索生成器列表，以逐个计算每一条指令。
15.7.3 枚举交叉引用
idautils
 模块包含几个生成器函数，使用它们可以生成比我们在IDC 中看到的列表更直观的交叉引用列表。代码清单 15-10 重写了我们之前在代码清单 15-3 中看到的函数调用枚举脚本。
代码清单 15-10 使用 Python 枚举函数调用
from idaapi import *  
func = get_func(here())  
if not func is None:  
   fname = Name(func.startEA)  
   items = FuncItems(func.startEA)  
   for i in items:  
      for xref in XrefsFrom(i, 0): ➊  
         if xref.type == fl_CN or xref.type == fl_CF:  
            Message("%s calls %s from 0x%x\n" % (fname, Name(xref.to), i))  
else:  
   Warning("No function found at location %x" % here())
这段脚本的新内容是使用XrefsFrom
 生成器（➊ ，取自 idautils
 ）从当前指令中检索所有交叉引用。XrefsFrom
 将返回对xrefblk_t
 对象（其中包含有关当前交叉引用的详细信息）的引用。
15.7.4 枚举导出的函数
代码清单 15-11是代码清单15-5 中.idt 生成器脚本的 Python 版本。
代码清单 15-11 生成 IDT 文件的Python 脚本
file = AskFile(1, "*.idt", "Select IDT save file")  
with open(file, 'w') as fd:  
   fd.write("ALIGNMENT 4\n")  
   fd.write("0 Name=%s\n" % GetInputFile())  
   for i in range(GetEntryPointQty()):  
      ord = GetEntryOrdinal(i)  
      if ord == 0: continue  
      addr = GetEntryPoint(ord)  
if ord == addr: continue   #entry point has no ordinal  
fd.write("%d Name=%s" % (ord, Name(addr)))  
purged = GetFunctionAttr(addr, FUNCATTR_ARGSIZE)  
if purged > 0:  
   fd.write(" Pascal=%d" % purged)  
fd.write("\n")
这两段脚本看起来非常类似，因为 IDAPython 没有用于生成入口点列表的生成器函数，所以我们必须使用在代码清单15-5 中使用的同一组函数。不过，有一个值得我们注意的区别：IDAPython 没有采用IDC 的文件处理函数，而是使用了 Python 内置的文件处理函数。
15.8 小结
脚本为扩展 IDA 的功能提供了一个强大的工具。这些年来，它一直通过各种创新来满足IDA用户的需要。用户可以从 Hex-Rays 网站及前IDA Palace①的镜像站点下载许多有用的脚本。IDC脚本非常适用于小型任务和快速开发工作，但它们并不能解决一切问题。
IDC 语言的一个主要限制在于它不支持复杂的数据类型，并且无法访问功能更加全面的API，如C 标准库或 Windows API。如果以更高的复杂性为代价，我们可以用编译扩展代替脚本扩展，以消除这些限制。如下一章所述，编译扩展需要使用 IDA SDK，与IDC 相比，这个工具更加难以掌握。但是，SDK 在开发扩展方面的实力完全值得你付出努力，学习如何使用这个工具。
第16章 IDA 软件开发工具包
在本书中，我们经常使用“IDA 这样做”和“IDA 那样做”之类的短语。虽然IDA确实能够帮助我们做大量工作，但是，确切地说，它的智能要归功于它依赖的各种模块。例如处理器模块，它负责做出分析阶段的各种决策。因此，你可以说，IDA 不过和它所依赖的处理器模块一样聪明。当然，Hex-Rays 付出了巨大的努力，以确保它的处理器模块始终具有强大的功能。对于一般用户而言，IDA 的模块体系结构完全隐藏在它的用户界面之下。
有时候，你可能需要比 IDC 脚本语言更加强大的功能，不管是为了提高性能，还是为了完成IDC 无法完成的任务。这时，你需要使用 IDA 的SDK （软件开发工具包）构建你自己的编译模块，以供 IDA 使用。
说明
  IDC脚本引擎以 IDA 的SDK 为基础。所有 IDC 函数最终都需要调用一个或几个 SDK 函数；由后者完成具体的工作。有时你可以用 IDC 完成一项任务，也可以使用 SDK 完成相同的任务，但这句话倒过来说却不一定正确。与 IDC 相比，SDK 的功能更加强大；而且许多SDK 操作都没有对应的 IDC 操作。
SDK以C++ 库和连接这些库所需的头文件的形式呈现 IDA 的内部编程接口。使用 SDK ，你可以创建加载器模块以处理新的文件格式，创建处理器模块以反汇编新的 CPU 指令集，或者创建用于替代脚本的已编译的、更加强大的插件模块。
附加说明
在使用C++ 时，你当然会访问大量 C++ 库，包括操作系统的本地 API。利用这些库，你可以将大量复杂的功能合并到你构建的模块中。但是，在选择以这种方式合并的功能时，你需要特别小心，因为这样做可能会使 IDA 变得不够稳定。最典型的例子是，IDA 是一款单线程应用程序，它没有做出任何努力来同步对低级数据库结构的访问，SDK 也不提供完成这类任务的工具。对于 IDA 5.5 之前的版本，你绝不能创建其他同时访问数据库的线程。对于版本 5.5及更高版本，你可以创建其他线程，但对SDK 函数的任何调用都应使用在 kernwin.hpp中介绍的exec_request_t
 和execute_sync
 函数进行排队。你应该认识到，你执行的任何阻塞操作1
 都会使IDA 停止响应，直到该操作完成。
1. 阻塞操作是使程序在等待一项操作完成时停止运行的操作。
在本章中，我们将介绍 SDK 的一些核心功能。你会发现，在创建插件、加载器模块或处理器模块时，这些功能很有用。因为我们将在后面 3 章中分别介绍这些模块，因此，在本章的例子中，我们将不介绍它们的应用。
16.1 SDK简介
SDK的发布方式与我们之前讨论的 IDA 几乎完全相同。你可以在最初的 IDA 光盘中找到包含SDK 的Zip 文件，被授权用户也可以从 Hex-Rays 网站下载 SDK 。SDK 的每一个版本都以与其兼容的 IDA 版本命名（例如，idasdk61.zip适用于IDA 6.1 版）。与 IDA 的其他工具一样，IDA最大限度地简化了与 SDK 有关的文档资料。与 SDK 有关的文档资料包括一个顶级 readme.txt 文件，以及其他针对插件、处理器模块和加载器的 README文件。
SDK 定义模块用于与 IDA 交互的各种已发布编程接口。在 SDK 4.9 版之前，由于这些接口发生变化，一个能够在 SDK 4.8 中成功编译的模块，如果不加以修改，将无法在新版 SDK （如4.9版）中编译，这种情况并不少见。随着 SDK 4.9 版的引入，Hex-Rays 决定对现有的API 进行标准化，这表示，要使用新版 SDK 成功编译，模块不仅不需要经过修改，而且，模块还能与新版IDA 二进制兼容。这意味着，每次 IDA 发布新版本时，模块用户不再需要等待模块开发者更新他们的源代码，或为他们的模块提供更新的二进制版本。但是，这并不表示现有的API 接口被完全“冻结”。Hex-Rays 会继续通过新版的 SDK 推出新功能。（也就是说，每个新版的SDK 都是其之前所有版本的集合）通常，这些最新功能的模块无法与旧版的 IDA 或SDK 兼容。（也就是说，有时候一些函数可能因为各种原因被重命名或被标记为废弃。SDK 提供各种宏以允许或禁止使用废弃的函数，因此如果某个函数被废弃，你很容易就会注意到这种情况。）
16.1.1 安装SDK
在5.4版本之前，包含 SDK 的Zip文件并不提供顶级目录。因为 SDK 的几个子目录的名称与IDA 的子目录的名称相同，因此，强烈建议你创建一个专用的 SDK 目录（比如 idasdk53 ），并将SDK 文件提取到这个目录中。这使得你更容易将 SDK 组件与IDA 组件区分开来。在 5.4版本之前，IDASDK 在顶级SDK 目录（比如 idasdk61 ）中打包，因此不再需要这一步。你没有必要将SDK 安装到 中的指定位置。无论在哪安装 SDK ，在本书的剩余部分，我们将统一把 作为SDK 的安装目录。
16.1.2 SDK的布局
基本了解 SDK 目录的结构，不仅有助于你找到 SDK 文档，而且可帮助你找到构建的模块的位置。下面逐个介绍 SDK 目录。
bin目录
 。这个目录是示例构建脚本在成功构建后保存其编译模块的位置。要安装一个模块，你需要将该模块由bin下的相应子目录复制到 下的相应子目录中。模块安装将在第17 章～第19 章详细讨论。这个目录还包含一个创建处理器模块所需的后续处理工具（post-processing tool）。
etc目录
 。这个目录包含构建一些SDK 模块所需的两个实用工具的源代码。SDK 还提供这些实用工具的编译版本。
include目录
 。这个目录包含定义IDA API 接口的头文件。简而言之，可以使用的每一种API数据结构和可以调用的每一个API函数都在这个目录中的头文件中声明。SDK 的顶级readme.txt文件简要介绍了这个目录中的一些较为常用的头文件。这个目录中的文件大部分属于SDK 的文档。
ldr目录
 。这个目录包含几个加载器模块的源代码和构建脚本。加载器的README文件不过是这个目录的内容纲要。
lib 目录
 。这个目录中包含许多子目录，其中分别包含构建各种IDA 模块所需的链接库。这些子目录根据它们所针对的编译器进行命名。例如，x86_win_vc_32（6.1及更高版本）或vc.w32 （6.0及较低版本）子目录包含用于Visual Studio和Windows上的32 位IDA 的库，而x64_mac_gcc_64（6.1及更高版本）或gcc64.mac64（6.0及较低版本）子目录包含用于OS X上的64 位IDA 的库。
module目录
 。这个目录包含几个示例处理器模块的源代码和构建脚本。处理器模块的README文件不过是这个目录的内容纲要。
plug-ins目录
 。这个目录包含几个示例插件模块的源代码和构建脚本。插件的README文件提供了插件体系结构的总体概述。
顶级目录
 。SDK 的顶级目录包含几个用于构建模块的生成文件，以及SDK 的主要readme.txt文件。其他几个install_xxx.txt 文件包含与安装和配置各种编译器有关的信息（例如，install_visual.txt 讨论了Visual Studio配置）。
记住，有关如何使用 SDK 的文档非常稀少。多数开发者主要通过反复试验、发现错误和深入探索SDK 的内容来获得有关SDK 的知识。你也可以将问题张贴到Hex-Rays 支持论坛的Research & Resources （研究与资源）论坛中，如果幸运的话，其他熟悉 SDK 的IDA 用户可能会回答你的问题。Steve Micallef 所著的IDA Plug-in Writing in C/C++1
 是介绍SDK 和插件编写的优秀第三方资源。
1. 参见http://www.binarypool.com/idapluginwriting/
 。
16.1.3 配置构建环境
使用SDK 的一个令人沮丧的经历与编程根本无关。但你会发现，编写一个问题的解决方案代码相对较为容易，但要成功构建你的模块，却几乎不可能做到。事实确实如此，因为仅仅使用一个代码库，你很难为大量编译器提供支持。使情况更加复杂的是，Windows 编译器认可的库文件格式往往彼此并不兼容。
创建SDK 中的所有示例的目的是为了使用 Borland工具构建它们。在 install_make.txt 中，我们发现以下引自 Ilfak 的话：
WIN32 只能由Borland C++ CBuilder v4.0创建。可能使用旧版的 BCC v5.2也行，但我没有验证。
也就是说，其他 install_xxx 文件提供了如何使用其他编译器成功构建模块的信息。一些示例模块包含使用 Visual Studio构建的文件（例如，/plugins/vcsample），而 install_visual.txt提供了一系列步骤，可以使用 Visual C++ Express 2005正确配置 SDK 项目。
为了使用Unix 风格的工具、在一种 Unix 风格的系统（如 Linux）上或使用MinGW之类的环境构建模块，SDK 提供了一个名为 idamake.pl 的脚本，它可在开始构建过程之前，将 Borland风格的生成文件转换成 Unix 风格的生成文件。这个过程由 install_linux.txt 文件描述。
说明