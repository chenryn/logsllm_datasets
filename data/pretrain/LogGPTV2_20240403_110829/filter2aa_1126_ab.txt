in prolog
Analysing the error message it was possible
to realise that the content of the scripts should
be XML.
With the help of documentation found on
the Internet[1], along with resources provided
by the application itself, a more in-depth un-
derstanding of the application was achieved.
Recalling what was mentioned in section 6.3,
several protocols were able to be scripted: RFC,
DIAG, HTTP, SOAP, etc. In order to build and
create your own scripts in a more friendly way,
SAP provides a tool called EEM Editor. Un-
luckily, the power of this tool was leveraged
after the analysis was ﬁnished.
Among all ﬁles provided by the application
itself, there was an example of an HTTP script.
This example script was really valuable for the
research as it was helpful to understand more
about the protocol and how scripts were actu-
ally written.
Whenever an invalid script (incorrect tag,
syntax error, etc) was uploaded, a really de-
tailed error message was returned. For exam-
ple:
Error validating XML document: Invalid
content was found starting with element
'blahblah'. One of '{Annotation, Headers,
Param, Check, Search, Part}' is expected
Modifying the aforementioned example
script plus leveraging the error messages re-
turned, it was possible to create a custom script
that was able to perform arbitrary HTTP re-
quests. As EEM scripts are executed by EEM
Robots, this meant that a Server Side Request
Forgery could be achieved.
The possibility of executing arbitrary HTTP
requests was enough to illustrate the impact of
this unauthenticated application. This vulnera-
bility was identiﬁed with CVE-2020-6207.
However, we wanted to understand how far
an attacker could go in terms of exploitabil-
ity. Until this point, it was possible to execute
any type of script, but ... what actions can
be scripted? Is it possible to execute OS com-
mands?. In order to ﬁnd the answer to these
questions it was necessary to better understand
the scripting language and its capabilities.
Understanding and exploiting the scripting
language
Besides having all the available documenta-
tion online for the aforementioned scripting
language, it was needed to go deeper in tech-
nical terms. Until this point, every part of the
research was done in a Black-box style. Lever-
aging access to Solution Manager’s OS ﬁles,
the analysis shifted to a White-box approach.
Among all ﬁles related to the EEM applica-
tion, there was one called Conﬁg1.1.xsd. This
schema ﬁle, deﬁned the structure the scripting
language had to follow: Fields, Type of Fields,
Tags, etc. This discovery allowed to deeply un-
5
derstand how this language was designed and
how to get the most of it.
It was a message-type language based on
XML. Each script could have one or several
transaction steps. Each step could be made of
one or multiple messages. According to the
schema ﬁle, each message must had one of the
following types:
• Think
• Reset
• ServerRequest
• Command
The third one was the type used by the SSRF
script explained in the previous section. The
last one, command, seemed to be interesting to
analyze. Based on online documentation and
some local analysis of ﬁles, it was possible to
list all available commands:
• Assign
• AssignJS
• AssignFromList
• AssignFromFile
• WriteVariableToFile
• ReadVariableFromFile
The reason why this scripting language had
commands available to be executed, was basi-
cally to provide support for some actions that
may be out of scope of the language itself. It
was possible to execute any HTTP script, but
unless having extra features (provided by com-
mands in this case) it would be impossible to
store data persistently or share data between
several scripts.
An in-depth analysis started in each of these
commands looking for any ﬂaw that may end
up in a potential vulnerability. After several
tests creating new scripts that made use of each
of them, it was discovered that AssignJS was
vulnerable to code injection.
Seemed that AssignJS, was evaluating any
arbitrary piece of JS code that was sent inside
a parameter of the script, without executing
any prior sanitization. Given that the applica-
tion in charge of executing the script (part of
the SMDAgent) was written in java and that
this command was evaluating Javascript code,
it is possible that the ﬂaw was related to the
ScriptEngine API[2]. Below is an example of a
vulnerable function to illustrate this ﬂaw:
private
String ExecuteCommand( final
String
expression ) {
final
ScriptEngineManager manager =
new ScriptEngineManager ( ) ;
final
ScriptEngine
js_engine =
manager . getEngineByName ( " j s " ) ;
final
String
res =
engine . eval ( expression ) ;
return
res
}
With the appropriate payload this could lead
an attacker to have a Remote Code Execu-
tion. Due to this payload is directly obtained
from the script itself it meant that any unau-
thenticated attacker could be able to exploit
it. Additionally, as the scripts were executed
by the Java application running in the SMD
Agent, the commands run with the privileges
of the daaadm user. As explained in section 4.2,
daaadm was the OS layer user of the SMDA-
gent component, which means the attacker
would be able to full compromise it.
6.5.
Conclusions
As a summary, two vulnerabilities were found:
1. Authentication bypass of EEM application.
2. Remote Code Execution abusing speciﬁc
commands.
Figure 2: Unauthenticated attacker compromises every
SMDAgent connected to the Solution Man-
ager.
6
Chaining both vulnerabilities, as shown in
2, would allow an unauthenticated attacker to
gain full control over all SMD agents connected
to the Solution Manager.
6.6.
Staying protected
The following section will illustrate some rec-
ommendations and actions that should be fol-
lowed in order to detect attacks and protect
systems from unauthorized attackers.
Applying patches
Due to the fact that both attacks presented
in section 6 are based on vulnerabilities, the
best way to be protected against them is by
patching. In March 2020, SAP released a patch
that will protect the Solution Manager against
both ﬂaws (authentication and injection):
Note
Title
CVSS
2890213
[3]
Missing
Authentication
Check in SAP Solution
Manager (User-Experience
Monitoring)
10
Table 1: SAP Security notes related to SolMan vulnera-
bilties
SAP security note 2890213[3], provides new
versions of the affected component which will
guarantee protection against the discussed
ﬂaws:
Component
Sup package
Patch Level
SOLMAN
DIAG 720
SP004
000012
SP005
000013
SP006
000014
SP007
000020
SP008
000016
SP009
000008
SP0010
000002
Table 2: Solution Manager patched versions
It is strongly recommended to install the ap-
propriate patched version as soon as possible.
Nevertheless, if for some reason it is not pos-
sible to install it, SAP provided a step by step
guide to manually add authentication to the
application. To ﬁnd this guide please refer to
the SAP security note 2890213[3]. This "partial"
ﬁx should be treated as a temporary solution
until it is possible to install the full patch. The
reason to believe this is because it will only
force authentication but will not provide any
protection against the injection ﬂaw. In other
words, any authenticated attacker will still be
able to launch the attack.
Networking protection measures
Installing the patches should be the ﬁrst step
towards being protected against the presented
attack. However, there are other types of mea-
sures at different levels that can help to miti-
gate and reduce the attack surface.
The SAP Solution Manager it is a technical
component that should only be accessible by
SAP Administrators. There is no need for ﬁnal
users to have access to it. Therefore, limit who
can reach the SolMan from a networking point
of view will cause:
• An extremely reduced attack surface, as
only Administrators will have access.
• A protection to potential future vulnerabil-
ities. For instance, If in the near future a
new ﬂaw in another application is found,
attackers will not be able to exploit as they
will not have access to it.
The Solution Manager, despite not having
business data, it is a critical system due to
its highly connected architecture with other
SAP systems.
Therefore, it is strongly rec-
ommended to keep it as secure as possible,
not only through installing patches but also
through any other method that could help to
keep it protected.
Detection of incidents
In case there is a need to investigate if some-
thing already happened or to monitor actions
7
in order to detect an attempt of attack, SAP
provides a way to help with it. It is possible
to activate a particular log which will start log-
ging all actions performed by the EEM applica-
tion. To manage the server’s log conﬁguration,
SAP provides a particular application called
log-conﬁg[4], part of the SAP Netweaver Ad-
ministrator (NWA).
In
order
to
activate
the
log
for
the
EEM
application,
the
tracing
location
com.sap.smd.eem.admin.EemAdminService
should be searched. Once located, the severity
level should be selected (info level is rec-
ommended). The target ﬁle where the logs
will be written, is deﬁned under the System
Conﬁguration view.
After executing the aforementioned steps
and saving changes, a new entry will be writ-
ten to the target deﬁned ﬁle (defaultTrace" by
default) each time an action is performed by
the EEM.
7.
Host Agent Analysis
7.1.
Motivation
There were several reasons why this compo-
nent was interesting from a security point of
view. Some of them were:
1. There were two services associated with
this component, running with very high priv-
ileges: Root for unix-like systems / NT AU-
THORITY/System for Windows systems:
$> ps -ef | grep hostctrl
root 92067 hostctrl/exe/saphostexec[...]
sapadm 92072 hostctrl/exe/sapstartsrv[...]
root
92338
hostctrl/exe/saposcol[...]
2. It seemed possible to communicate with
this agent through port 1128 (exposed to all
interfaces):
$>
ss -larntp | grep 92072
LISTEN 0 20 *:1128 *:*
users:(("sapstartsrv",pid=92072,fd=18))
3. The user "daaadm" was mentioned in the
SAP Host Agent conﬁguration ﬁle, as value
of a very promising parameter "service/ad-
min_users".
$> grep daaadm hostctrl/exe/host_profile
service/admin_users = daaadm
At this point, a vulnerability that may al-
low an unauthenticated attacker to get daaadm
privileges on every SAP host was already
found. The idea behind analyzing this com-
ponent was to try to ﬁnd a way to escalate
privileges from daaadm user to root/system
user.
7.2.
Powerful agent.. with restricted
access !
During a legit use of SAP Host Agent, local
administrators or root users would communi-
cate with the agent using the binary saphostc-
trl. This binary, part of Host Agent binaries,
works as a wrapper allowing to execute all
Host Agent functions. Below are some names
of those functions:
StartInstance
StopInstance
StartDatabase
StopDatabase
ExecuteOperation
ACOSPrepare
ExecuteInstallationProcedure
Table 3: Some functions exposed by SAP Host Agent
Inside the Host Agent OS directory, there
was a ﬁle called host_proﬁle.
This proﬁle
stores several conﬁgurations (in a key-value
fashion) of the Agent.
Among all these
conﬁgurations, there was a parameter called
service/admin_users, whose objective is to
whitelist all additional local OS users autho-
rized to communicate with the Host Agent.
As explained in 7.1 daaadm user was part
of this list, which meant that this user would
be able to communicate with the sapstartsrv
process. However, after trying to execute some
of its functions, it was discovered that being
logged as a whitelisted user was not enough.
8
Even for this list of users, like daaadm, they
must provide their password when calling the
saphostctrl binary. Therefore even in the sce-
nario where an attacker uses the SolMan to
execute commands as daaadm, it will not be
possible to communicate with the Host Agent
as they would not know the password.
7.3.
SOAP Friendly Agent
Another conﬁguration parameter present in-
side host_proﬁle was service/porttypes. This
conﬁguration basically states all web services
that are exposed by the sapstartsrv (port
1128). By default, three are remotely accessible:
SAPHostControl, SAPOscol and SAPCCMS.