和之前一题一样fuzz得到未过滤的标签以及事件
可用标签三个
可用事件一个
这里说一下为什么要用animateTransform标签
上面可以看到可以用的事件只有onbegin,而svg标签是没有这个事件的
animateTransform是有onbegin事件的
svg和animateTransform的关系
可以把svg当成一个图,animateTransform就可以让图旋转
payload
    search=">
## [Reflected XSS in canonical link tag](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-canonical-link-tag)
payload
    'accesskey='x'onclick='alert(1)
闭合单引号增加link的属性
知识点
link三个属性缺一不可,rel属性不可改变
触发
    Windows: ALT+SHIFT+X
    MacOS: CTRL+ALT+X
    Linux: Alt+X
## [Reflected XSS into a JavaScript string with single quote and backslash
escaped](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-string-single-quote-backslash-escaped)
输入1234测试
是不是很像之前做过的某题`'-alert(1)-'`
可以看到它在我们闭合单引号前加了斜杠,导致无法闭合
那我们是不是可以不用单引号闭合点其他的呢
猜对了,直接闭合script标签
payload
## [Reflected XSS into a JavaScript string with angle brackets and double
quotes HTML-encoded and single quotes escaped](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-string-angle-brackets-double-quotes-encoded-single-quotes-escaped)
1234测试,熟悉的味道
单引号闭合被加  
script标签闭合被实体化
不要慌,第三种姿势来了
    '-alert(1)//
原理也很简单
我们输入的内容是`'-alert(1)//`
waf又给我们加了一个斜杠就变成了`'-alert(1)//`
和前面代码拼接起来就是`var searchTerms = ''-alert(1)//';`
两个\经过转义就是一个\了
alert后面两个//是注释掉后面的内容了
## [Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-onclick-event-angle-brackets-double-quotes-html-encoded-single-quotes-backslash-escaped)
payload
多一种思路闭合代码
    http://foo?'-alert(1)-'
对比一下就会发现`&apos;-alert(1)-&apos;`被转义成了`'-alert(1)-'`
转义后变成了字符串-alert(1)-字符串
漏洞成因:没有源码-.-
## [Reflected XSS into a template literal with angle brackets, single, double
quotes, backslash and backticks Unicode-escaped](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-template-literal-angle-brackets-single-double-quotes-backslash-backticks-escaped)
新知识:模板字符串
就是可以在字符串里面执行一些代码
用python来解释就是下图
1234测试,可以看到是被模板字符串包裹着
payload(轻轻松松)
    ${alert(1)}
# 高级篇
## [Reflected XSS with event handlers and href attributes
blocked](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-event-handlers-and-href-attributes-blocked)
常规跑标签
常规跑事件
所有事件凉凉,href也不能用
那么有什么能代替href的吗
这时候就看js的功底了
attributename可以把href="xxx"分解成attributename=href values=xxx
payload
    Click me
## [Reflected XSS in a JavaScript URL with some characters
blocked](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-url-some-characters-blocked)
漏洞成因
     window.location = '/')">Back to Blog
先试试单引号能不能闭合
fuzz
fuzz的结果就是只要是&开头就合法,那么就试试&'+'1能不能闭合(注意编码,url里的+是空格的意思)
点击Black同时burp抓包,发现请求的url确实是3&1
闭合了单引号说明我们目前能控制post请求body里面的内容但不能弹窗
原来的代码
    href="javascript:fetch('/analytics', {method:'post',body:'/post?postId=3&'+'1'}).finally(_ => window.location = '/')"
试试能不能闭合{
测试的话就这样慢慢测
本地测试点击test2是可以弹窗的
    href="javascript:fetch('/test', {method:'post',body:'/post?postId=3&'+'1'},alert('test2')).finally(_ => window.location = '/')"
说干就干,测试`&'+'1'},alert(1)`得到
先不管后面闭合没闭合,重要的是()被过滤了
想不到怎么绕过就看一眼payload吧
payload
    &'},x=x=>{throw/**/onerror=alert,1337}, toString=x,window+'',{x:'
下面把payload拆分成五个部分来解释
`&'},` `x=x=>{throw/**/onerror=alert,1337},` `toString=x,` `window+'',` `{x:'`
`&'},`闭合前面的{
`x=x=>{throw/**/onerror=alert,1337},`
定义一个箭头函数,/**/是注释,绕过空格过滤,throw是抛出异常,alert函数重载onerror函数,抛出异常的时候会自动调用onerror函数,其实是调用的alert
`toString=x,`用箭头函数重载toString函数
`window+'',`用window+字符串,而js认为字符串才能加字符串,所以window被强制转换成字符串,自动会调用window的toString函数,第8行第9行是等价的
`{x:'`闭合后面的'},
## [Reflected XSS with AngularJS sandbox escape without
strings](https://portswigger.net/web-security/cross-site-scripting/contexts/angularjs-sandbox/lab-angular-sandbox-escape-without-strings)
回忆一下之前也有个题是angular,payload是`{{$on.constructor('alert(1)')()}}`
通过fuzz可以猜测出是按照键值对生成的代码
这就意味着下面xxxxxxxxx的地方是可控的,测试的代码贴出来感兴趣的可以自己测
        test
    0 search results for {{value}}
那么查看关键代码是干什么的
    $scope.value = $parse(key)($scope.query);
这个是$parse的用法,相关资料很少
大概意思是说给一个表达式进去会返回一个函数
payload
    1&toString().constructor.prototype.charAt=[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1
这个漏洞原理还需要研究很多代码
专业的事情交给专业的人吧,这个链接有大部分沙箱逃逸的poc,浪费一天看源码-.-
()
## [Reflected XSS with AngularJS sandbox escape and
CSP](https://portswigger.net/web-security/cross-site-scripting/contexts/angularjs-sandbox/lab-angular-sandbox-escape-and-csp)
下面就开始接触到CSP了,简单理解就是CSP只会加载自己信任的资源,不信任的统统拦截
payload
    search=#x'
`Click%20me`此标签会把target的值传递给跳转页面后的window.name,绕过了CSP策略
拿到csrf后就开始思考如何利用了
官方的payload是需要受害者点击两次,第一次是获取csrf,第二次是我们构造的post修改邮箱
在实际利用的时候要受害者点击两次难度会大大增加
那么有没有办法实现一次点击完成整个利用呢
burp有自动生成的csrf脚本
在此基础上修改脚本
大概流程就是接受window.name提取csrf的值,通过js修改html中的csrf,自动提交post请求
    test
一次点击就可以完成利用了,中间会跳转到你自己的服务器页面,可以把页面模仿做成加载中什么之类的
另外说一下绕过CSP的方法还有很多种,可以自己深度学习一下
如果真的实在绕不过CSP可以看看CSP的策略是否信任自己的子域
在子域找xss然后加载子域的js脚本
## [Reflected XSS protected by CSP, with CSP
bypass](https://portswigger.net/web-security/cross-site-scripting/content-security-policy/lab-csp-bypass)
xss触发点
CSP拦截
利用点,虽然设置了CSP,但是我们却可以修改CSP的策略
payload
    ?search=&token=;script-src-elem 'unsafe-inline'
# 完结撒花
前前后后写了半个月,自己也是一边学习一边记录,如果有不对的地方还请大佬们指正