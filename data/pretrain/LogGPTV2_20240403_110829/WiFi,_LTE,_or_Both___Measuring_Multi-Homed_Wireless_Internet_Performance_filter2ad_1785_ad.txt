(c) 1 MB
Figure 14: CDF of relative difference for using different networks for primary subﬂow (labeled as “Network”) vs using different congestion
control algorithms (labeled as “CC”), across 3 ﬂow sizes. Median values for CC curves: 16% for “10 KB”, 16% for “100 KB”, and 34% for “1
MB”. Thus, using different congestion control algorithms has more impact on larger ﬂows. Median values for Network curves: 60% for “ 10
KB”, 43% for “100 KB” , and 25% for “1 MB”. Thus, using a different network for the primary subﬂow has the greatest impact on smaller
ﬂows.
3.6.2 Energy Efﬁciency in Backup Mode
As shown in Figure 15c and 15d, if MPTCP is set to Backup Mode,
the backup interface still transfers SYN and FIN packets when a
connection starts and ends. In Figure 16, we show that in certain con-
ﬁgurations, these SYN/FIN packets can consume excessive amounts
of energy on a mobile device. Here, we measure the power level of
the tethered phones using a power monitor [12], when each phone
serves as the backup or non-backup interface. In all sub-ﬁgures of
Figure 16, the base power consumed is 1 Watt. This is the power
consumed when the network interfaces are not active. It is the total
power consumed by the other parts of the phone, such as the screen
and the CPU.
Figure 16a shows the power level of LTE when it is actively
transmitting data, i.e., WiFi is set as a backup interface. Similarly,
Figure 16b shows the power level of WiFi when it is active. We
can see that the WiFi power level is much lower than that of LTE.
Also, in Figure 16a, after the FIN packet is sent, there is a 15-second
period in which the LTE power level stays at 2 Watts, instead of the
1-Watt base power level. The energy consumed in this 15-second
period is called the “Tail Energy” [3, 7].
Figures 16c and 16d show the power level when WiFi or LTE is
set to be the backup interface. In Figure 16d, the energy consumed
by WiFi is negligible. However, in Figure 16c, when a SYN or a FIN
packet is transmitted through LTE, the power level stays high for
about 15 seconds due to the “Tail Energy” effect. Thus, even if only
SYN and FIN packets are transferred through LTE, the LTE interface
still consumes an excessive amount of energy. For ﬂows shorter than
15 seconds, little energy can be saved if the LTE interface is set to
be the backup interface. To actually reduce energy consumption in
this case, fast dormancy [9] should be used to quickly put the LTE
interface in the low-power mode after a SYN and FIN. Alternatively,
the Backup Mode should be implemented in a break-before-make
manner. Prior work [16] has proposed Single-Path Mode, which
establish a new MPTCP subﬂow only after the current subﬂow is
inactive, at the expense of two more round-trip times compared with
the current Backup Mode.
4. MOBILE APP TRAFFIC PATTERNS
So far, our measurements have looked at the ﬂow-level perfor-
mance of TCP over WiFi or LTE, and of MPTCP over both WiFi and
LTE. We next turn to how the choice of networks for a multi-homed
mobile device affects application-level performance as perceived by
Figure 13: CDF of relative difference between MPTCPcoupled and
MPTCPdecoupled, for different ﬂow sizes. The median relative dif-
ference for each ﬂow size: 16% for 10 KBytes, 16% for 100 KBytes
and 34% for 1MByte. Thus, throughput for larger ﬂow sizes is most
affected by the choice of congestion control.
transfers data through LTE. At t = 7, we disable LTE, so no data
can be transferred over that interface. We see that the subﬂow over
WiFi is brought up and transfers data until the ﬂow ends. A similar
behavior is seen in Figure 15f.
In Figures 15g and 15h, we disable one network by unplugging the
USB cable connecting the phone to the laptop instead of disabling
it using iproute. Interestingly, we observe different behaviors in
this experiment. Figure 15h shows that when LTE is set to backup
and we unplug WiFi in the middle of the transfer (at t = 6), the
LTE path is brought up immediately to ﬁnish transferring the rest
of the data. This behavior is similar to when WiFi was disabled
by changing iproute. However, in Figure 15g, when WiFi is
set to backup and we unplug the LTE network in the middle of
the transfer (at t = 3), the client only transfers one TCP Window
Update packet to the server through the WiFi subﬂow and then
halts. At t = 68, we re-connect the phone with the laptop. Then the
connection resumes, transfers the rest of the data through the LTE
subﬂow, and ends the session by sending FIN packets on both path.
The reason why disabling paths by physically disconnecting them
can cause different behaviors from disabling them in software is still
under investigation.
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)CCNetwork 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)CCNetwork 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)CCNetwork 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 50 100 150 200CDFRelative Difference(%)10 KB100 KB1 MB189(a) Full-MPTCP, using LTE for
primary subﬂow.
(b) Full-MPTCP, using WiFi for
primary subﬂow.
(a) LTE power level when used for
non-backup subﬂow.
(b) WiFi power level when used
for non-backup subﬂow.
(c) Backup Mode, using LTE for
primary subﬂow, WiFi for backup.
(d) Backup Mode, using WiFi for
primary subﬂow, LTE for backup.
(e) Backup Mode, using LTE for
primary subﬂow, WiFi for backup.
Then set LTE to “multipath off” at
t = 9 sec.
(f) Backup Mode, using WiFi for
primary subﬂow, LTE for backup.
Then set WiFi to “multipath off” at
t = 11 sec.
(g) Backup Mode, using LTE for
primary subﬂow, WiFi for backup.
Unplug LTE at t = 3 sec. But WiFi
does not continue transferring the
rest of the data. Plug LTE back at
t = 68 sec.
(h) Backup Mode, using WiFi for
primary subﬂow, LTE for backup.
Unplug WiFi at t = 6 sec.
Figure 15: Full-MPTCP and Backup Mode.
a mobile app that uses one or more of these networks. To measure
performance at the level of a mobile app, we ﬁrst record (Section 4.1)
and analyze trafﬁc (Section 4.2) originating from a mobile app, and
then replay it under emulated link conditions (Section 5).
4.1 Record-Replay Tool
Mahimahi [11] is a record-and-replay tool that can record and
replay client-server interactions over HTTP. Mahimahi’s Record-
Shell is a UNIX shell that records HTTP trafﬁc and stores it as
a set of request-response pairs. Later, during replay, Mahimahi’s
ReplayShell—another modiﬁed UNIX shell—matches incoming
requests to stored requests, ignoring time-sensitive ﬁelds in the re-
quest header (eg. If-Modiﬁed-Since) that have likely changed since
recording.
Mahimahi also includes shells to emulate network delays and
ﬁxed-rate and variable-rate network links using packet-delivery
(c) LTE power level when used for
backup subﬂow.
(d) WiFi power level when used
for backup subﬂow.
Figure 16: Power level for LTE and WiFi when used as non-backup
subﬂow. LTE has a much higher power level than WiFi in non-
backup mode. LTE also consumes excessive amount of energy even
in backup mode.
traces. We extend these capabilities and develop a new shell, Mp-
Shell, to emulate multiple links along with their associated link
delays. This allows us to mimic a multi-homed mobile phone that
can use both cellular and WiFi links. We use a trace-driven approach,
as Mahimahi does, to emulate both the cellular and WiFi links.
Because Mahimahi is agnostic to the speciﬁc client or server that
generates the HTTP trafﬁc, we use it to record all HTTP trafﬁc to and
from a mobile app running inside an Android emulator. Later, using
ReplayShell and MpShell, we run the same mobile app within the
Android emulator under appropriately emulated network conditions.
This enables us to evaluate how MPTCP—or any other multipath-
capable transport—affects application performance of a real mobile
app.
4.2 Trafﬁc Patterns of Mobile Apps
Figure 17 shows typical trafﬁc patterns we observed across differ-
ent mobile apps run inside RecordShell. We observe that apps tend
to initiate multiple TCP connections when launched or in response
to a user interaction. Most of these connections only transfer a small
amount of data (eg. connection ID 2 in Figure 17c). Some connec-
tions, such as connection ID 2 in Figure 17a, persist after small data
transfers.
A few connections, such as connection ID 30 in Figure 17d and
connection ID 8 in Figure 17f, transfer signiﬁcant amounts of data,
lasting several seconds. The ﬁrst example (ID 30) occurred when
the user clicked a link to play a movie trailer. The app downloaded
the entire trailer in one HTTP request. The second example (ID 8)
occurred when the user clicked a PDF ﬁle in their Dropbox folder
and the app downloaded the whole ﬁle.
In summary, we can categorize app trafﬁc patterns as short-ﬂow
dominated and long-ﬂow dominated. short-ﬂow dominated apps
have only short connections or long-lived connections with little
data transferred. long-ﬂow dominated apps have one or multiple
long-lasting ﬂows transferring large amounts of data.
5. MOBILE APP REPLAY
We feed the app trafﬁc patterns described in Section 4 into Mahi-
mahi’s ReplayShell for subsequent replay. To accurately emulate
different network conditions, we use the recorded single-path TCP
packet traces on both WiFi and LTE as a proxy for the true packet-
LTE 0 5 10 15 20Time (sec)WiFiLTE 0 5 10 15 20Time (sec)WiFiLTE 0 5 10 15 20Time (sec)WiFiLTE 0 10 20 30 40 50Time (sec)WiFiLTE 0 5 10 15 20 25 30 35 40 45Time (sec)WiFiLTE 0 5 10 15 20 25 30 35Time (sec)WiFiLTE 0 10 20 30 40 50 60 70 80 90Time (sec)WiFiLTE 0 5 10 15 20Time (sec)WiFiTime (Sec)0               10              20              30              40              50Power (w)43210FINSYNTime (Sec)0               10              20              30              40              50Power (w)43210FINSYNTime (Sec)0               10              20              30              40              50Power (w)43210FINSYNTime (Sec)0               10              20              30              40              50Power (w)43210FINSYN190(a) CNN launch.
(b) CNN click.
(c) IMDB launch.
(d) IMDB click.
(e) Dropbox launch.
(f) Dropbox click.
Figure 17: Trafﬁc patterns for app launching and user interacting. Figures 17d and 17f show the “long-ﬂow dominated’ trafﬁc pattern, the other
ﬁgures show the “short-ﬂow dominated” pattern.
 0 5 10 15 20 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 5 10 15 20 25 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 2 4 6 8 10 12 14 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 5 10 15 20 25 30 35 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 1 2 3 4 5 6 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps 0 2 4 6 8 10 12 0 5 10 15 20 25 30 35 40 45Flow IDTime (sec)0-10 kbps10-100 kbps100-500 kbps500-1000 kbps> 1000 kbps191Figure 18: CNN app-response time under different network condi-
tions.
Figure 19: CNN normalized app-response reduction by different
oracle schemes.
delivery trace for WiFi and LTE6. We use these TCP traces to emu-
late the WiFi and LTE links within MpShell. We emulate 20 distinct
network conditions using the WiFi and LTE TCP data previously
collected at 20 locations (Section 3.2).
We present results from replaying two trafﬁc patterns. We refer
to the ﬁrst as the short-ﬂow dominated app where, as shown in
Figure 17a (CNN launch), an app initiates several connections but
only transfers a small amount of data on each connection. We refer
to the second as the long-ﬂow dominated app, where, as shown in
Figure 17f (Dropbox user click), an app initiates several connec-
tions and transfers a large amount of data for a few seconds over a
small subset of the connections. We run each app pattern over the
20 different network conditions (we only show the results from 4
representative conditions due to space limitations). For each network
condition, we emulate 6 conﬁgurations:
1. WiFi-TCP: Single-path TCP running on WiFi.
2. LTE-TCP: Single-path TCP running on LTE.
3. MPTCP-Coupled-WiFi: MPTCP with coupled congestion
control using WiFi for the primary subﬂow.
4. MPTCP-Coupled-LTE: MPTCP with coupled congestion con-
trol using LTE for the primary subﬂow.
5. MPTCP-Decoupled-WiFi: MPTCP with decoupled conges-
tion control using WiFi for the primary subﬂow.
6. MPTCP-Decoupled-LTE: MPTCP with decoupled congestion
control using LTE for the primary subﬂow.
Using tcpdump during the emulation, we collect the timestamp
at the start and end of each HTTP connection. Then we calculate
the app response time: the time between the start of the ﬁrst HTTP
connection and the end of the last HTTP connection7.
5.1 Short-Flow Dominated App Replay
Figure 18 shows the app-response time for the CNN app launching
in different conﬁgurations under different network conditions. For
clarity, we only show the emulation results for 4 representative
6This approach does underestimate the true packet-delivery trace of
the underlying network because TCP takes a ﬁnite duration to reach
the link capacity due to Slow Start.
7This metric doesn’t account for computation time that might be
spent in the app itself after the last HTTP connection ends, but this
is impossible to measure without instrumenting or rewriting existing
applications to report these numbers.
network conditions out of the 20 we emulated; results for other
conditions are similar.
Network Condition IDs 1 and 2 emulate locations where WiFi
has a much higher bulk TCP throughput than LTE, and in Network
Condition IDs 3 and 4, LTE outperforms WiFi. In Figure 18, we
observe that:
1. Selecting the proper network to transmit for single-path TCP
signiﬁcantly affects app-response time. For example, in Net-
work Condition 1, the app response time for WiFi-TCP is 2.7
seconds while LTE-TCP has an app response time of 5.5 sec-
onds, implying that using the proper network for single-path
TCP can reduce the app response time by about 2.0x. For a
network condition in which LTE has better performance, such