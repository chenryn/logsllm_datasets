title:Sanctum: Minimal Hardware Extensions for Strong Software Isolation
author:Victor Costan and
Ilia A. Lebedev and
Srinivas Devadas
Sanctum: Minimal Hardware Extensions  
for Strong Software Isolation
Victor Costan, Ilia Lebedev, and Srinivas Devadas, MIT CSAIL
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/costan
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Sanctum: Minimal Hardware Extensions for Strong Software Isolation
Victor Costan, Ilia Lebedev, and Srinivas Devadas
PI:EMAIL, PI:EMAIL, PI:EMAIL
MIT CSAIL
Abstract
Sanctum offers the same promise as Intel’s Software
Guard Extensions (SGX), namely strong provable isola-
tion of software modules running concurrently and shar-
ing resources, but protects against an important class of
additional software attacks that infer private information
from a program’s memory access patterns. Sanctum shuns
unnecessary complexity, leading to a simpler security
analysis. We follow a principled approach to eliminat-
ing entire attack surfaces through isolation, rather than
plugging attack-speciﬁc privacy leaks. Most of Sanctum’s
logic is implemented in trusted software, which does not
perform cryptographic operations using keys, and is easier
to analyze than SGX’s opaque microcode, which does.
Our prototype targets a Rocket RISC-V core, an open
implementation that allows any researcher to reason about
its security properties. Sanctum’s extensions can be
adapted to other processor cores, because we do not
change any major CPU building block.
Instead, we
add hardware at the interfaces between generic building
blocks, without impacting cycle time.
Sanctum demonstrates that strong software isolation
is achievable with a surprisingly small set of minimally
invasive hardware changes, and a very reasonable over-
head.
1
Introduction
Today’s systems rely on an operating system kernel, or
a hypervisor (such as Linux or Xen, respectively) for
software isolation. However each of the last three years
(2012-2014) witnessed over 100 new security vulnerabili-
ties in Linux [1, 11], and over 40 in Xen [2].
One may hope that formal veriﬁcation methods can
produce a secure kernel or hypervisor. Unfortunately,
these codebases are far outside our veriﬁcation capabili-
ties: Linux and Xen have over 17 million [6] and 150,000
[4] lines of code, respectively. In stark contrast, the seL4
formal veriﬁcation effort [26] spent 20 man-years to cover
9,000 lines of code.
Given Linux and Xen’s history of vulnerabilities and
uncertain prospects for formal veriﬁcation, a prudent sys-
tem designer cannot include either in a TCB (trusted com-
puting base), and must look elsewhere for a software
isolation mechanism.
Fortunately, Intel’s Software Guard Extensions (SGX)
[5, 36] has brought attention to the alternative of provid-
ing software isolation primitives in the CPU’s hardware.
This avenue is appealing because the CPU is an unavoid-
able TCB component, and processor manufacturers have
strong economic incentives to build correct hardware.
Unfortunately, although the SGX design includes a vast
array of defenses against a variety of software and physi-
cal attacks, it fails to offer meaningful software isolation
guarantees. The SGX threat model protects against all
direct attacks, but excludes “side-channel attacks”, even
if they can be performed via software alone.
Furthermore, our analysis [13] of SGX reveals that it
is impossible for anyone but Intel to reason about SGX’s
security properties, because signiﬁcant implementation
details are not covered by the publicly available docu-
mentation. This is a concern, as the myriad of security
vulnerabilities [16, 18, 39, 50–54] in TXT [22], Intel’s
previous attempt at securing remote computation, show
that securing the machinery underlying Intel’s processors
is incredibly challenging, even in the presence of strong
economic incentives.
Our main contribution is a software isolation scheme
that addresses the issues raised above: Sanctum’s isolation
provably defends against known software side-channel at-
tacks, including cache timing attacks and passive address
translation attacks. Sanctum is a co-design that com-
bines minimal and minimally invasive hardware modi-
ﬁcations with a trusted software security monitor that
is amenable to rigorous analysis and does not perform
cryptographic operations using keys.
We achieve minimality by reusing and lightly modi-
USENIX Association  
25th USENIX Security Symposium  857
1
fying existing, well-understood mechanisms. For exam-
ple, our per-enclave page tables implementation uses the
core’s existing page walking circuit, and requires very
little extra logic. Sanctum is minimally invasive because
it does not require modifying any major CPU building
block. We only add hardware to the interfaces between
blocks, and do not modify any block’s input or output.
Our use of conventional building blocks limits the effort
needed to validate a Sanctum implementation.
We demonstrate that memory access pattern attacks
by malicious software can be foiled without incurring
unreasonable overheads. Sanctum cores have the same
clock speed as their insecure counterparts, as we do not
modify the CPU core critical execution path. Using a
straightforward page-coloring-based cache partitioning
scheme with Sanctum adds a few percent of overhead in
execution time, which is orders of magnitude lower than
the overheads of the ORAM schemes [21, 43] that are
usually employed to conceal memory access patterns.
All
layers of Sanctum’s TCB are open-sourced
at https://github.com/pwnall/sanctum and unen-
cumbered by patents, trade secrets, or other similar intel-
lectual property concerns that would disincentivize secu-
rity researchers from analyzing it. Our prototype targets
the Rocket Chip [29], an open-sourced implementation of
the RISC-V [47, 49] instruction set architecture, which
is an open standard. Sanctum’s software stack bears the
MIT license.
To further encourage analysis, most of our security
monitor is written in portable C++ which, once rigorously
analyzed, can be used across different CPU implemen-
tations. Furthermore, even the non-portable assembly
code can be reused across different implementations of
the same architecture.
2 Related Work
Sanctum’s main improvement over SGX is preventing
software attacks that analyze an isolated container’s mem-
ory access patterns to infer private information. We are
particularly concerned with cache timing attacks [7], be-
cause they can be mounted by unprivileged software shar-
ing a computer with the victim software.
Cache timing attacks are known to retrieve crypto-
graphic keys used by AES [8], RSA [10], Difﬁe-Hellman
[27], and elliptic-curve cryptography [9]. While early
attacks required access to the victim’s CPU core, recent
sophisticated attacks [35, 56] target the last-level cache
(LLC), which is shared by all cores in a socket. Re-
cently, [37] demonstrated a cache timing attack that uses
JavaScript code in a page visited by a web browser.
Cache timing attacks observe a victim’s memory ac-
cess patterns at cache line granularity. However, recent
work shows that private information can be gleaned even
from the page-level memory access pattern obtained by a
malicious OS that simply logs the addresses seen by its
page fault handler [55].
XOM [30] introduced the idea of having sensitive code
and data execute in isolated containers, and placed the
OS in charge of resource allocation without trusting it.
Aegis [44] relies on a trusted security kernel, handles
untrusted memory, and identiﬁes the software in a con-
tainer by computing a cryptographic hash over the initial
contents of the container. Aegis also computes a hash of
the security kernel at boot time and uses it, together with
the container’s hash, to attest a container’s identity to a
third party, and to derive container keys. Unlike XOM
and Aegis, Sanctum protects the memory access patterns
of the software executing inside the isolation containers
from software threats.
Sanctum only considers software attacks in its threat
model (§ 3). Resilience against physical attacks can be
added by augmenting a Sanctum processor with the coun-
termeasures described in other secure architectures, with
associated increased performance overheads. Aegis pro-
tects a container’s data when the DRAM is untrusted
through memory encryption and integrity veriﬁcation;
these techniques were adopted and adapted by SGX. As-
cend [20] and GhostRider [32] use Oblivious RAM [21]
to protect a container’s memory access patterns against
adversaries that can observe the addresses on the memory
bus. An insight in Sanctum is that these overheads are
unnecessary in a software-only threat model.
Intel’s Trusted Execution Technology (TXT) [22] is
widely deployed in today’s mainstream computers, due
to its approach of trying to add security to a successful
CPU product. After falling victim to attacks [51, 54]
where a malicious OS directed a network card to access
data in the protected VM, a TXT revision introduced
DRAM controller modiﬁcations that selectively block
DMA transfers, which Sanctum also does.
Intel’s SGX [5, 36] adapted the ideas in Aegis and
XOM to multi-core processors with a shared, coherent
last-level cache. Sanctum draws heavy inspiration from
SGX’s approach to memory access control, which does
not modify the core’s critical execution path. We reverse-
engineered and adapted SGX’s method for verifying an
OS-conducted TLB shoot-down. At the same time, SGX
has many security issues that are solved by Sanctum,
which are stated in this paper’s introduction.
Iso-X [19] attempts to offer the SGX security guaran-
tees, without the limitation that enclaves may only be
allocated in a DRAM area that is carved off exclusively
for SGX use, at boot time. Iso-X uses per-enclave page
tables, like Sanctum, but its enclave page tables require
a dedicated page walker. Iso-X’s hardware changes add
overhead to the core’s cycle time, and do not protect
against cache timing attacks.
858  25th USENIX Security Symposium 
USENIX Association
2
SecureME [12] also proposes a co-design of hardware
modiﬁcations and a trusted hypervisor for ensuring soft-
ware isolation, but adapts the on-chip mechanisms gener-
ally used to prevent physical attacks, in order to protect
applications from an untrusted OS. Just like SGX, Se-
cureME is vulnerable to memory access pattern attacks.
The research community has brought forward various
defenses against cache timing attacks. PLcache [28, 46]
and the Random Fill Cache Architecture (RFill, [34])
were designed and analyzed in the context of a small
region of sensitive data, and scaling them to protect a
potentially large enclave without compromising perfor-
mance is not straightforward. When used to isolate entire
enclaves in the LLC, RFill performs at least 37%-66%
worse than Sanctum.
RPcache [28, 46] trusts the OS to assign different hard-
ware process IDs to mutually mistrusting entities, and its
mechanism does not directly scale to large LLCs. The
non-monopolizable cache [15] uses a well-principled par-
titioning scheme, but does not completely stop leakage,
and relies on the OS to assign hardware process IDs.
CATalyst [33] trusts the Xen hypervisor to correctly tame
Intel’s Cache Allocation Technology into providing cache
pinning, which can only secure software whose code and
data ﬁts into a fraction of the LLC.
Sanctum uses very simple cache partitioning [31] based
on page coloring [24, 45], which has proven to have rea-
sonable overheads. It is likely that sophisticated schemes
like ZCache [40] and Vantage [41] can be combined with
Sanctum’s framework to yield better performance.
3 Threat Model
Sanctum isolates the software inside an enclave from
other software on the same computer. All outside soft-
ware, including privileged system software, can only inter-
act with an enclave via a small set of primitives provided
by the security monitor. Programmers are expected to
move the sensitive code in their applications into enclaves.
In general, an enclave receives encrypted sensitive infor-
mation from outside, decrypts the information and per-
forms some computation on it, and then returns encrypted
results to the outside world.
We assume that an attacker can compromise any op-
erating system and hypervisor present on the computer
executing the enclave, and can launch rogue enclaves.
The attacker knows the target computer’s architecture and
micro-architecture. The attacker can analyze passively
collected data, such as page fault addresses, as well as
mount active attacks, such as direct or DMA memory
probing, and cache timing attacks.
Sanctum’s isolation protects the integrity and privacy
of the code and data inside an enclave against any practi-
cal software attack that relies on observing or interacting
with the enclave software via means outside the inter-
face provided by the security monitor. In other words,
we do not protect enclaves that leak their own secrets
directly (e.g., by writing to untrusted memory) or by tim-
ing their operations (e.g., by modulating their completion
times). In effect, Sanctum solves the security problems
that emerge from sharing a computer among mutually
distrusting applications.
This distinction is particularly subtle in the context of
cache timing attacks. We do not protect against attacks
like [10], where the victim application leaks information
via its public API, and the leak occurs even if the vic-
tim runs on a dedicated machine. We do protect against
attacks like Flush+Reload [56], which exploit shared hard-
ware resources to interact with the victim via methods
outside its public API.
Sanctum also defeats attackers who aim to compromise
an OS or hypervisor by running malicious applications
and enclaves. This addresses concerns that enclaves pro-
vide new attack vectors for malware [14, 38]. We assume
that the beneﬁts of meaningful software isolation out-
weigh enabling a new avenue for frustrating malware
detection and reverse engineering [17].
Lastly, Sanctum protects against a malicious computer
owner who attempts to lie about the security monitor run-
ning on the computer. Speciﬁcally, the attacker aims to
obtain an attestation stating that the computer is running
an uncompromised security monitor, whereas a different
monitor had been loaded in the boot process. The un-
compromised security monitor must not have any known
vulnerability that causes it to disclose its cryptographic
keys. The attacker is assumed to know the target com-
puter’s architecture and micro-architecture, and is allowed
to run any combination of malicious security monitor, hy-
pervisor, OS, applications and enclaves.
We do not prevent timing attacks that exploit bottle-
necks in the cache coherence directory bandwidth or in
the DRAM bandwidth, deferring these to future work.
Sanctum does not protect against denial-of-service
(DoS) attacks by compromised system software: a ma-
licious OS may deny service by refusing to allocate any
resources to an enclave. We do protect against malicious
enclaves attempting to DoS an uncompromised OS.
We assume correct underlying hardware, so we do not
protect against software attacks that exploit hardware bugs
(fault-injection attacks), such as rowhammer [25, 42].
Sanctum’s isolation mechanisms exclusively target soft-
ware attacks. § 2 mentions related work that can harden a
Sanctum system against some physical attacks. Further-
more, we consider software attacks that rely on sensor
data to be physical attacks. For example, we do not ad-
dress information leakage due to power variations, be-
cause software would require a temperature or current
sensor to carry out such an attack.
USENIX Association  
25th USENIX Security Symposium  859
3
Machine
Hypervisor
Supervisor
User
Measurement Root
Security Monitor
Hypervisor
Enclave multiplexing
Operating System
Enclave management
Host Application
Enclave setup
Enclave syscall shims
Non-sensitive code and data
Enclave
Sanctum-aware runtime
Sensitive code and data
Figure 1: Software stack on a Sanctum machine; The
blue text represents additions required by Sanctum. The
bolded elements are in the software TCB.
4 Programming Model Overview
By design, Sanctum’s programming model deviates from
SGX as little as possible, while providing stronger secu-
rity guarantees. We expect that application authors will
link against a Sanctum-aware runtime that abstracts away
most aspects of Sanctum’s programming model. For ex-
ample, C programs would use a modiﬁed implementation
of the libc standard library. Due to space constraints,
we describe the programming model assuming that the
reader is familiar with SGX as described in [13].
The software stack on a Sanctum machine, shown in
Figure 1, resembles the SGX stack with one notable ex-
ception: SGX’s microcode is replaced by a trusted soft-
ware component, the security monitor, which is pro-
tected from compromised system software, as it runs at
the highest privilege level (machine level in RISC-V).
We relegate the management of computation resources,
such as DRAM and execution cores, to untrusted system
software (as does SGX). In Sanctum, the security moni-
tor checks the system software’s allocation decisions for
correctness and commits them into the hardware’s conﬁg-
uration registers. For simplicity, we refer to the software
that manages resources as an OS (operating system), even
though it may be a combination of a hypervisor and a
guest OS kernel.
An enclave stores its code and private data in parts of
DRAM that have been allocated by the OS exclusively for
the enclave’s use (as does SGX), which are collectively
called the enclave’s memory. Consequently, we refer
to the regions of DRAM that are not allocated to any
enclave as OS memory. The security monitor tracks
DRAM ownership, and ensures that no piece of DRAM
is assigned to more than one enclave.
Each Sanctum enclave uses a range of virtual mem-
ory addresses (EVRANGE) to access its memory. The
enclave’s memory is mapped by the enclave’s own page ta-
Enclave A Virtual
Address Space
Host application
space
EVRANGE A
Host application
space
Physical Memory
OS region
OS page tables
Enclave A region
Enclave A page tables
Enclave B region
Enclave B page tables
OS region
Enclave A region
Enclave B Virtual
Address Space
Host application