### Comprehensive TCP Diagnostic System

We aim to develop a more comprehensive TCP diagnostic system that integrates our techniques and others as building blocks. Our techniques have been tested on a simple token bucket queue, but they are also applicable to other queuing mechanisms, such as Random Early Detection (RED), as long as there is an increase in Round-Trip Time (RTT) due to buffering. TCP variants like BBR [39], which base their congestion control on latency, may confound our technique. BBR controls the amount of latency and hence the buffering induced by the flow. While testing our techniques across all TCP variants is beyond the scope of this paper, we have tested them with buffer sizes ranging from 1 to 5 times the Bandwidth-Delay Product (BDP). As long as the flow induces some consistent and measurable buffering in the path, our technique will accurately identify the type of congestion.

### Reliance on Slow-Start Period

Our technique relies on TCP behavior during the slow-start phase. Therefore, it could be confounded by a flow that performs poorly during slow-start but improves later, and vice versa. However, the classification obtained during the slow-start period remains valid. If our model indicates that a flow was externally limited during slow-start, but the overall throughput was higher than what the flow achieved during slow-start, we cannot determine whether the later segments were also limited. Thus, our technique provides some understanding of the path capacity, and we can use our insights from slow-start performance to extrapolate the expected behavior of the flow. This extrapolation is left for future work. Conversely, if the model indicates that the flow was self-limited during slow-start, but the overall throughput is significantly lower than what the flow achieved during slow-start, we can confidently say that the throughput was affected by other factors.

### Need for Good Training Data

The model fundamentally relies on a reliable corpus of training data to build the training model. We used training data from a diverse set of controlled experiments to build and validate our model against real-world data. Additionally, we show that comparable results can be achieved by building the model using real-world data. However, we do not claim that our model will perform well in any setting. A solid set of ground-truth data, in the form of TCP connections correctly labeled with the type of bottleneck they experienced, is essential for this problem.

### Coarse Labeling for M-Lab Data

Due to the lack of ground truth regarding access link capacities, we label the M-Lab data coarsely (§ 4.1). However, not all flows in January-February need to have been externally limited, and not all flows in March-April need to have been self-limited. Variability in access link capacities could result in low-capacity links that self-induce congestion even when there is external congestion. Home network effects, such as wireless and cross-traffic interference, might also impede throughput, introducing noise into the labeling. Given the severity of the congestion experienced during that period, as evident from our analysis in § 4.1, published reports [36], and the general adherence of U.S. ISPs to offered service plans as per FCC reports [5], we have reasonable confidence that our labeling is largely accurate.

### Use of Packet Captures for Computing Metrics

Our technique computes two RTT-based metrics by analyzing packet captures, which are storage and computationally expensive. However, these metrics are simple, and Web100 makes current RTT values available in a lightweight manner. Future work will explore how we can sample RTT values from Web100 to compute our metrics and compare them to our current technique that uses packet captures.

### Related Work

Several diagnosis techniques have been proposed for TCP. T-RAT, proposed by Zhang et al. [52], estimates TCP parameters such as maximum segment size, round-trip time, and loss to analyze TCP performance and flow behavior. Dapper [30] is a technique for real-time diagnosis of TCP performance near the end-hosts to determine whether a connection is limited by the sender, the network, or the receiver. Pathdiag [37] uses TCP performance modeling to detect local host and network problems and estimate their impact on application performance. However, these techniques do not differentiate among types of congestion in the network.

Multiple techniques use packet inter-arrival times for localization, such as Katabi et al. [34] to locate shared bottlenecks across flows, Sundaresan et al. [48] to distinguish between a WAN bottleneck and a wireless bottleneck, and Biaz et al. [11] to understand loss behavior. Several packet probe techniques in the literature use external probes to identify buffering in paths [35] or to measure available bandwidth or path capacity [23, 32, 33, 43, 51]. Sting [45] and Sprobe [44] are tools to measure packet loss and available bandwidth, respectively, using the TCP protocol. Antoniades et al. proposed abget [9], a tool for measuring available bandwidth using the statistics of TCP flows.

While external probing techniques can be useful in locating the bottleneck link, such techniques are out-of-band and can be confounded by load balancing or Active Queue Management (AQM). In the best case, they can only indirectly deduce the type of congestion (a congested link between two transit ISPs likely causes external congestion for all flows that traverse the link). Network tomography has also been proposed for localizing congestion [36, 41] or for discovering internal network characteristics such as latencies and loss rates using end-to-end probes [16, 24, 25]. Such techniques, however, are typically coarse, can be confounded by factors such as load-balancing and multiple links comprising a single peering point, and require a large corpus of end-to-end measurement data to apply the tomography algorithm. Tomography cannot be applied to a single flow to infer the type of congestion experienced or the location of the bottleneck.

### Discussion and Conclusion

Until recently, last-mile access links were most likely to be the bottleneck on an end-to-end path. The rise of high-bandwidth streaming video, combined with perpetually fractious relationships between major players in the ecosystem, has expanded the set of potential throughput bottlenecks to include core peering interconnections. Understanding whether TCP flows are bottlenecked by congested peering links or by access links is of interest to all stakeholders—users, service providers, and regulators. We took steps toward this goal by developing a technique to differentiate TCP flows that fill an initially unconstrained path from those bottlenecked by an already congested link.

The intuition behind our technique is that TCP behavior, particularly in terms of flow RTTs during the slow-start phase, is qualitatively different when the flow starts on an already congested path versus a path with sufficient available capacity. These path states correspond to peering-congested and access-link-limited flows, respectively. We show that the RTT variance metrics (both the normalized difference between the maximum and minimum RTTs, and the coefficient of variation in the RTT samples) are higher when a TCP flow is limited by a non-congested link, and therefore, the TCP flow itself drives queuing (and hence RTT) behavior. We use this intuition to build a simple decision tree classifier that can distinguish between the two scenarios and test the model both on data from controlled experiments and real-world TCP traces from M-Lab. We tested our model against data from our controlled testbed and a labeled real-world dataset from M-Lab, showing that our technique accurately distinguishes the two congestion states and is robust to various classifier and network settings.

We emphasize two strengths of our technique. First, it operates on single flows and uses statistics of ongoing TCP flows rather than requiring out-of-band probing. Second, it requires only TCP connection logs or packet captures at the server-side and does not require control or instrumentation of the client-side. This approach differs from techniques for available bandwidth estimation or other bottleneck detection tools that generally require out-of-band probing and/or control over both endpoints of the connection. Our work also opens avenues for future research, particularly in developing more accurate TCP signatures to further understand network performance.

### Acknowledgments

We thank the anonymous reviewers and our shepherd, Costin Raiciu, for their comments and feedback, which improved the paper. We also thank Measurement Lab for their timely help with the NDT data. This work was supported by NSF awards CNS-1539902, CNS-1535796, and CNS-1414177.

### References

[References listed here]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the text.