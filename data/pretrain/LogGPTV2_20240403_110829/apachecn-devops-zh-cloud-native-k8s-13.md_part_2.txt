  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
		...
  scope: Namespaced
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        url: "https://webhook-conversion.com/delayedjob"
  names:
    plural: delayedjobs
    singular: delayedjob
    kind: DelayedJob
    shortNames:
    - dj
```
正如您所看到的，策略`Webhook`让我们定义了一个请求的网址，该网址包含关于传入资源对象的信息、它的当前版本以及它需要转换到的版本。
这个想法是我们的`Webhook`服务器将处理转换，并传回修正后的 Kubernetes 资源对象。`Webhook`策略比较复杂，可以有很多可能的配置，本书就不深入探讨了。
重要说明
要了解如何配置转换 Webhooks，请查看官方 Kubernetes 文档，网址为[https://Kubernetes . io/docs/tasks/extend-Kubernetes/custom-resources/custom-resource-definition-version/](https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definition-versioning/)。
现在，回到我们在 YAML 的入口！在`served`和`storage`键下，我们看到了`schema`对象，它包含了我们资源的实际规格。如前所述，这遵循 OpenAPI Spec v3 模式。
由于空间原因从前面的代码块中删除的`schema`对象如下:
自定义资源定义 3.yaml(续)
```
     schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                delaySeconds:
                  type: integer
                image:
                  type: string
```
如您所见，我们支持一个字段`delaySeconds`，它将是一个整数，`image`，它是一个字符串，对应于我们的容器映像。如果我们真的想让`DelayedJob`做好生产准备，我们会想加入各种其他选项，让它更接近最初的 Kubernetes 工作资源——但这不是我们的意图。
在原始代码块中，在版本列表之外，我们看到了一些其他属性。首先是`scope`属性，可以是`Cluster`也可以是`Namespaced`。这告诉 Kubernetes 是将 CRD 对象的实例视为特定于命名空间的资源(如 Pods、Deployments 等)，还是将其视为集群范围的资源(如命名空间本身)，因为在命名空间中获取命名空间对象没有任何意义！
最后，我们有`names`块，它允许您定义资源名称的复数和单数形式，用于各种情况(例如，`kubectl get pods`和`kubectl get pod`都有效)。
`names`块还允许您定义骆驼大小写的`kind`值，该值将用于资源 YAML，以及一个或多个`shortNames`，该值可用于引用 API 或`kubectl`中的资源–例如`kubectl get po`。
YAML 解释了我们的 CRD 规格，让我们看一下我们的 CRD 的一个实例，正如我们刚刚回顾的规格所定义的，YAML 将是这样的:
延迟作业
```
apiVersion: delayedresources.mydomain.com/v1
kind: DelayedJob
metadata:
  name: my-instance-of-delayed-job
spec:
  delaySeconds: 6000
  image: "busybox"
```
如你所见，这就像我们的 CRD 定义了这个物体。现在，我们所有的零件都就位了，让我们测试一下我们的 CRD！
### 测试自定义资源定义
让我们继续在 Kubernetes 上测试我们的 CRD 概念:
1.  First, let's create the CRD spec in Kubernetes – the same way we would create any other object:
    ```
    kubectl apply -f delayedjob-crd-spec.yaml
    ```
    这将导致以下输出:
    ```
    customresourcedefinition "delayedjob.delayedresources.mydomain.com" has been created
    ```
2.  现在，Kubernetes 将接受对我们`DelayedJob`资源的请求。我们可以通过使用前面的资源 YAML 最终创建一个来测试这个问题:
    ```
    kubectl apply -f my-delayed-job.yaml
    ```
如果我们正确定义了我们的 CRD，我们将看到以下输出:
```
delayedjob "my-instance-of-delayed-job" has been created
```
可以看到，Kubernetes API 服务器已经成功创建了我们的`DelayedJob`实例！
现在，你可能会问一个非常相关的问题——现在怎么办？这是一个很好的问题，因为事实是，到目前为止，我们只完成了向 Kubernetes 应用编程接口数据库添加一个新的`table`的工作。
仅仅因为我们给了我们的`DelayedJob`资源一个应用映像和一个`delaySeconds`字段，并不意味着像我们想要的任何功能将会实际发生。通过创建我们的`DelayedJob`实例，我们刚刚在`table`中添加了一个条目。我们可以使用 Kubernetes API 或`kubectl`命令获取、编辑或删除它，但是还没有实现任何应用功能。
为了让我们的`DelayedJob`资源实际上做一些事情，我们需要一个定制的控制器，它将采用我们的`DelayedJob`实例，并用它做一些事情。最后，我们仍然需要使用官方的 Kubernetes 资源——Pods 等来实现实际的容器功能。
这就是我们现在要讨论的。有很多方法可以为 Kubernetes 构建定制控制器，但是一种流行的方法是**操作模式**。让我们进入下一部分，看看我们如何给我们的`DelayedJob`资源一个自己的生命。
# 【Kubernetes 操作员的自我管理功能
如果不首先讨论**操作员框架**，就不可能讨论 Kubernetes 操作员。一个常见的误解是，运算符是通过运算符框架专门构建的。Operator Framework 是一个开源框架，最初由 Red Hat 创建，以便于编写 Kubernetes 运算符。
实际上，操作员只是一个自定义控制器，与 Kubernetes 接口并对资源进行操作。Operator Framework 是制作 Kubernetes 操作符的一种固执己见的方法，但是还有许多其他开源框架可以使用——或者，您可以从头开始制作一个！
使用框架构建操作员时，两个最受欢迎的选项是前面提到的**操作员框架**和**kuebuilder**。
这两个项目有很多共同点。它们都使用`controller-tools`和`controller-runtime`，这两个库用于构建 Kubernetes 项目官方支持的 Kubernetes 控制器。如果你是从零开始构建一个操作员，使用这些官方支持的控制器库将使事情变得容易得多。
与 Operator Framework 不同，Kubebuilder 是 Kubernetes 项目的一个官方部分，很像`controller-tools`和`controller-runtime`库——但这两个项目各有利弊。重要的是，无论是这些选项，还是操作员模式，都让控制器在集群上运行。看起来很明显，这是最好的选择，但是您可以在集群之外运行您的控制器，并让它同样工作。要开始使用运营商框架，请查看位于[https://github.com/operator-framework](https://github.com/operator-framework)的官方 GitHub。对于 Kubebuilder，可以查看[https://github.com/kubernetes-sigs/kubebuilder](https://github.com/kubernetes-sigs/kubebuilder)。
大多数操作者，不管框架如何，都遵循控制环范例——让我们看看这个想法是如何工作的。
## 绘制操作员控制回路
控制回路是系统设计和编程中的一种控制方案，由一个永无止境的逻辑流程回路组成。典型地，控制回路实施测量-分析-调整方法，其中它测量系统的当前状态，分析使其符合预期状态所需的改变，然后调整系统组件以使其符合(或至少更接近)预期状态。
特别是在 Kubernetes 操作员或控制器中，该操作通常是这样工作的:
1.  首先，一个`watch`步骤——即，观察存储在`etcd`中的预期状态的变化。
2.  然后是`analyze`步骤，控制器决定如何使集群状态符合预期状态。
3.  最后，一个`update`步骤——更新集群状态以实现集群变化的意图。
为了帮助理解控制回路，这里有一个图表，显示了各个部分是如何配合在一起的:
![Figure 13.1 – Measure Analyze Update Loop](img/B14790_13_01.jpg)
图 13.1–测量分析更新循环
让我们使用 Kubernetes 调度程序——它本身就是一个控制循环过程——来说明这一点:
1.  让我们从一个处于稳定状态的假设集群开始:所有 Pods 都已安排好，节点运行正常，一切都在正常运行。
2.  然后，用户创建一个新的 Pod。
我们之前讨论过 kubelet 是在`pull`的基础上工作的。这意味着，当 kubelet 在其节点上创建一个 Pod 时，该 Pod 已经通过调度程序分配给该节点。然而，当第一次通过`kubectl create`或`kubectl apply`命令创建 Pod 时，Pod 没有被安排或分配到任何地方。这就是我们的调度程序控制循环开始的地方:
1.  第一步是**测量**，调度器读取 Kubernetes API 的状态。当从应用编程接口中列出 Pod 时，它发现其中一个 Pod 没有被分配给节点。现在进入下一步。
2.  接下来，调度器对集群状态和 Pod 要求进行分析，以决定 Pod 应该分配到哪个节点。正如我们在前面几章中所讨论的，这考虑了 Pod 资源限制和请求、节点状态、放置控制等，这使得它成为一个相当复杂的过程。一旦这个处理完成，更新步骤就可以开始了。
3.  最后，**更新**–调度程序通过将 Pod 分配给从*步骤 2* 分析中获得的节点来更新集群状态。此时，kubelet 接管自己的控制循环，并在其节点上为 Pod 创建相关的容器。
接下来，让我们把从调度器控制循环中学到的知识应用到我们自己的`DelayedJob`资源中。
## 为自定义资源定义设计运算符
实际上，为我们的“T0”CRD 编码一个操作符不在我们的书的范围之内，因为它需要编程语言的知识。如果您要选择一种编程语言来构建一个操作器，Go 提供了与 Kubernetes SDK、**控制器-工具**和**控制器-运行时**的最大互操作性，但是任何可以编写 HTTP 请求的编程语言都可以，因为这是所有 SDK 的基础。
然而，我们仍将使用一些伪代码来完成为我们的`DelayedJob` CRD 实现一个运算符的步骤。让我们一步一步来。
### 第一步:测量
首先是**测量**步骤，我们将在伪代码中将其实现为永远运行的`while`循环。在生产实现中，会有去抖、错误处理和一系列其他问题，但是对于这个示例，我们将保持简单。
看看这个循环的伪代码，它本质上是我们应用的主要功能:
主函数