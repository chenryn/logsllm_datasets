encryption of the initial value for each option, and a zero-
13
10203040Number of nodes per shard30405060708090100Average transactions / secondIX. COMPARISONS WITH RELATED WORK
Bitcoin’s underlying blockchain technology suffers from
scalability issues: with a current block size of 1MB and 10
minute inter-block interval, throughput is capped at about 7
transactions per second, and a client that creates a transaction
has to wait for about 10 minutes to conﬁrm. In contrast,
mainstream payment processing companies like Visa conﬁrm
transactions within a few seconds, and have high throughput
of 2000 transactions per second on average, peaking up to
56,000 transactions per second [vis]. Reparametrization of
Bitcoin—such as Bitcoin-NG—can improve this to a limited
extent up to 27 transactions per second and 12 second latency,
respectively [CDE+16]. More signiﬁcant improvement requires
a fundamental redesign of the blockchain paradigm.
The most comparable system to Chainspace is Om-
niLedger [KJG+17]—that was developed concurrently—and
provides a scalable distributed ledger for a cryptocurrency, and
cannot support generic smart contracts. OmniLedger assigns
nodes (selected using a Sybil-attack resistant mechanism) into
shards among which state, representing coins, is split. The node-
to-shard assignment is done every epoch using a bias-resistant
decentralized randomness protocol [SJK+16] to prevent an
adversary from compromising individual shards. A block-DAG
(Directed Acyclic Graph) structure is maintained in each shard
rather than a single blockchain, effectively creating multiple
blockchains in which consensus of transactions can take place
in parallel. Nodes within shards reach consensus through the
Practical Byzantine Fault Tolerant (PBFT) protocol [CL+99]
with ByzCoin [KJG+16]’s modiﬁcations that enable O(n)
messaging complexity. In contrast, Chainspace uses BFT-
SMART ’s PBFT implementation [SB12] as a black box,
and inherits its O(n2) messaging complexity—however, BFT-
SMART can be replaced with any improved PBFT variant
without breaking any security assumptions.
Similar to Chainspace, OmniLedger uses an atomic commit
protocol to process transactions across shards. However, it uses
a different, client-driven approach to achieve it. To commit
a transaction, the client ﬁrst sends the transaction to the
network. The leader of each shard that is responsible for the
transaction inputs (input shard) validates the transaction and
returns a proof-of-acceptance (or proof-of-rejection) to the
client, and inputs are locked. To unlock those inputs, the client
sends proof-of-accepts to the output shards, whose leaders
add the transaction to the next block to be appended to the
blockchain. In case the transaction fails the validation test, the
client can send proof-of-rejection to the input shards to roll
back the transaction and unlock the inputs. To avoid denial-
of-service, the protocol assumes that clients are incentivized
to proceed to the Unlock phase. Such incentives may exist
in a cryptocurrency application, where coin owners only can
spend them, but do not hold for a generalized platform like
Chainspace where objects may have shared ownership. Hence,
Chainspace’s atomic commit protocol has the entire shard—
rather than a single untrusted client—act as a coordinator. Other
related works include improvements to Byzantine consensus for
reduced latency and decentralization [Buc16, Maz15, SYB14],
but these do not support sharding.
Elastico [LNZ+16] scales by partitioning nodes in the
network into a hierarchy of committees, where each committee
is responsible for managing a subset (shard) of transactions
consistently through PBFT. A ﬁnal committee collates sets
of transactions received from committees into a ﬁnal block
and then broadcasts it. At the end of each epoch, nodes are
reassigned to committees through proof-of-work. The block
throughput scales up almost linear to the size of the network.
However, Elastico cannot process multi-shard transactions.
RSCoin [DM16] is a permissioned blockchain. The central
bank controls all monetary supply, while mintettes (nodes
authorized by the bank) manage subsets of transactions and
coins. Like OmniLedger, communication between mintettes
takes place indirectly, through the client—and also relies on
the client to ensure completion of transactions. RSCoin has
low communication overhead, and the transaction throughput
scales linearly with the number of mintettes, but cannot support
generic smart contracts.
Some systems improve transaction latency by replacing
its probabilistic guarantees with strong consistency. Byz-
Coin [KJG+16] extends Bitcoin-NG for high transaction
throughput. A consensus group is organized into a commu-
nication tree where the most recent miner (the leader) is at
the root. The leader runs an O(n) variant of PBFT (using
CoSI) to get all members to agree on the next microblock.
The outcome is a collective signature that proves that at least
two-thirds of the consensus group members witnessed and
attested the microblock. A node in the network can verify in
O(1) that a microblock has been validated by the consensus
group. PeerConsensus [DSW16] achieves strong consistency by
allowing previous miners to vote on blocks. A Chain Agreement
tracks the membership of identities in the system that can vote
on new blocks. Algorand [Mic16] replaces proof-of-work with
strong consistency by proposing a faster graded Byzantine fault
tolerance protocol, that allows for a set of nodes to decide on
the next block. A key aspect of Algorand is that these nodes
are selected randomly using algorithimic randomness based
on input from previously generated blocks. However, none of
those systems are designed to support generic smart contracts.
Some recent systems provide a transparent platform based
on blockchains for smart contracts. Hyperledger Fabric [Cac16]
is a permissioned blockchain to setup private infrastructures for
smart contracts. It is designed around the idea of a ‘consortium’
blockchain, where a speciﬁc set of nodes are designated to
validate transactions, rather than random nodes in a decentral-
ized network. Each smart contract (called chaincode) has its
own set of endorsers that re-execute submitted transactions to
validate them. A consensus service then orders transactions
and ﬁlters out those endorsed by too few. It uses modular
consensus, which is replaceable depending on the requirements
(e.g., Apache Kafka or SBFT).
Ethereum [Woo14] provides a decentralized Turing-
complete virtual machine, called EVM, able to execute smart-
contracts. Its main scalability limitation results from every
node having to process every transaction, as Bitcoin. On the
other hand, Chainspace’s sharded architecture allows for a
ledger linearly scalable since only the nodes concerned by
the transaction—that is, managing the transaction’s inputs or
references—have to process it. Ethereum plans to improve
scalability through sharding techniques [BCWD15], but their
work is still theoretical and does not provide any implementation
or measurements. One major difference with Chainspace is
that Ethereum’s smart contract are executed by the node,
14
contrarily to the user providing the outputs of each transaction.
Chainspace also supports smart contracts written in any kind
of language as long as checkers are pure functions, and
there are no limitations for the code creating transactions.
Some industrial systems [tez17, roo17, cor17] implement
similar functionalities as Chainspace, but without any empirical
performance evaluation.
In terms of security policy, Chainspace system implements
a platform that enforces high-integrity by embodying a variant
of the Clark-Wilson [CW87], proposed before smart contracts
were heard of.
X. CONCLUSIONS
We presented the design of Chainspace—an open, dis-
tributed ledger platform for high-integrity and transparent
processing of transactions. Chainspace offers extensibility
though privacy-friendly smart contracts. We presented an in-
stantiation of Chainspace by parameterizing it with a number of
‘system’ and ‘application’ contracts, along with their evaluation.
However, unlike existing smart-contract based systems such as
Ethereum [Woo14], it offers high scalability through sharding
across nodes using a novel distributed atomic commit protocol
called S-BAC, while offering high auditability. We presented
implementation and evaluation of S-BAC on a real cloud-
based testbed under varying transaction loads and showed that
Chainspace’s transaction throughput scales linearly with the
number of shards by up to 22 transactions per second for
each shard added, handling up to 350 transactions per second
with 15 shards. As such it offers a competitive alternative to
both centralized and permissioned systems, as well as fully
peer-to-peer, but unscalable systems like Ethereum.
Acknowledgements. George Danezis, Shehar Bano and Al-
berto Sonnino are supported in part by EPSRC Grant
EP/M013286/1 and the EU H2020 DECODE project un-
der grant agreement number 732546. Mustafa Al-Bassam is
supported by a scholarship from The Alan Turing Institute.
Many thanks to Daren McGuinness and Ramsey Khoury for
discussions about the Chainspace design.
REFERENCES
[BCCG16] Jonathan Bootle, Andrea Cerulli, Pyrros Chaidos, and Jens Groth.
In Foundations of
Efﬁcient zero-knowledge proof systems.
Security Analysis and Design VIII, pages 1–31. Springer, 2016.
[BCWD15] Vitalik Buterin, Jeff Coleman, and Matthew Wampler-Doty. Notes
on scalable blockchain protocols (verson 0.3.2), 2015.
[BHG87] Philip A Bernstein, Vassos Hadzilacos, and Nathan Goodman.
CONCURRENCY CONTROL AND RECOVERY IN DATABASE
SYSTEMS. Addison- Wesley, 1987.
[BSA14] Alysson Bessani, Jo˜ao Sousa, and Eduardo E. P. Alchieri. State
machine replication for the masses with bft-smart. In Proceedings
of the 2014 44th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks, DSN ’14, pages 355–362,
Washington, DC, USA, 2014. IEEE Computer Society.
[Buc16] Ethan Buchman. Tendermint: Byzantine fault tolerance in the
age of blockchains. http://atrium.lib.uoguelph.ca/xmlui/bitstream/
handle/10214/9769/Buchman Ethan 201606 MAsc.pdf,
Jun
2016. Accessed: 2017-02-06.
[Cac16] Christian Cachin. Architecture of the hyperledger blockchain
In Workshop on Distributed Cryptocurrencies and
fabric.
Consensus Ledgers, 2016.
[CDE+16] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer,
Ari Juels, Ahmed Kosba, Andrew Miller, Prateek Saxena, Elaine
Shi, and Emin G¨un. On scaling decentralized blockchains. In
15
3rd Workshop on Bitcoin and Blockchain Research, Financial
Cryptography 16, 2016.
[CL+99] Miguel Castro, Barbara Liskov, et al. Practical byzantine fault
tolerance. In OSDI, volume 99, pages 173–186, 1999.
[cor17] Corda: A distributed ledger. https://docs.corda.net/ static/corda-
technical-whitepaper.pdf, 2017 (visited August 9, 2017).
[CW87] David D Clark and David R Wilson. A comparison of commercial
and military computer security policies. In Security and Privacy,
1987 IEEE Symposium on, pages 184–184. IEEE, 1987.
[DGFK14] George Danezis, Jens Groth, C Fournet, and Markulf Kohlweiss.
Square span programs with applications to succinct nizk argu-
ments. Springer Berlin Heidelberg, 2014.
[DM16] George Danezis and Sarah Meiklejohn. Centrally banked
cryptocurrencies. In Network and Distributed System Security.
The Internet Society, 2016.
[DSW16] Christian Decker, Jochen Seidel, and Roger Wattenhofer. Bitcoin
meets strong consistency. In Proceedings of the 17th International
Conference on Distributed Computing and Networking, ICDCN
’16, pages 13:1–13:10, New York, NY, USA, 2016. ACM.
[GL06] Jim Gray and Leslie Lamport. Consensus on transaction commit.
ACM Transactions on Database Systems (TODS), 31(1):133–160,
2006.
[JJK11] Marek Jawurek, Martin Johns, and Florian Kerschbaum. Plug-
In Privacy Enhancing
in privacy for smart metering billing.
Technologies - 11th International Symposium, PETS 2011,
Waterloo, ON, Canada, July 27-29, 2011. Proceedings, pages
192–210, 2011.
[KJG+16] Eleftherios Kokoris Kogias, Philipp Jovanovic, Nicolas Gailly,
Ismail Khofﬁ, Linus Gasser, and Bryan Ford. Enhancing bitcoin
security and performance with strong consistency via collective
signing. In 25th USENIX Security Symposium (USENIX Security
16), pages 279–296, Austin, TX, 2016. USENIX Association.
[KJG+17] Eleftherios Kokoris-Kogias, Philipp Jovanovic, Linus Gasser,
Nicolas Gailly, and Bryan Ford. Omniledger: A secure, scale-out,
decentralized ledger. IACR Cryptology ePrint Archive, 2017:406,
2017.
[L+01] Leslie Lamport et al. Paxos made simple. ACM Sigact News,
32(4):18–25, 2001.
[LCQV15] Shengyun Liu, Christian Cachin, Vivien Qu´ema, and Marko
Vukolic. Xft: practical fault tolerance beyond crashes. CoRR,
abs/1502.05831, 2015.
[LL94] Butler Lampson and David B Lomet. Distributed transaction
processing using two-phase commit protocol with presumed-
commit without log force, August 2 1994. US Patent 5,335,343.
[LLK13] Ben Laurie, Adam Langley, and Emilia Kasper. Certiﬁcate
transparency. Technical report, 2013.
[LNZ+16] Loi Luu, Viswesh Narayanan, Chaodong Zheng, Kunal Baweja,
Seth Gilbert, and Prateek Saxena. A secure sharding protocol
for open blockchains. In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, CCS
’16, pages 17–30, New York, NY, USA, 2016. ACM.
[LW94] Luc Lauwers and Marleen Willekens. Five hundred years of
bookkeeping: a portrait of luca pacioli. Tijdschrift voor Economie
en Management, 39(3):289–304, 1994.
[Maz15] David Mazieres. The stellar consensus protocol: A federated
model for internet-level consensus. https://www.stellar.org/papers/
stellar-consensus-protocol.pdf, 2015. Accessed: 2016-08-01.
[MGGR13] Ian Miers, Christina Garman, Matthew Green, and Aviel D Rubin.
Zerocoin: Anonymous distributed e-cash from bitcoin. In Security
and Privacy (SP), 2013 IEEE Symposium on, pages 397–411.
IEEE, 2013.
[Mic16] Silvio Micali. Algorand: The efﬁcient and democratic ledger.
http://arxiv.org/abs/1607.01341, 2016. Accessed: 2017-02-09.
[MMM+16] Trent McConaghy, Rodolphe Marques, Andreas M¨uller, Dimitri
De Jonghe, Troy McConaghy, Greg McMullen, Ryan Henderson,
Sylvain Bellemare, and Alberto Granzotto. Bigchaindb: a scalable
blockchain database. white paper, BigChainDB, 2016.
[Nak08] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system.
2008.
2017).
[P+91] Torben P Pedersen et al. Non-interactive and information-
theoretic secure veriﬁable secret sharing. In Crypto, volume 91,
pages 129–140. Springer, 1991.
[pet17] petlib. https://github.com/gdanezis/petlib, 2017 (version July 20,
[RD12] Alfredo Rial and George Danezis. Privacy-preserving smart
metering. In ISSE 2012 - Securing Electronic Business Processes,
Highlights of the Information Security Solutions Europe 2012
Conference, Brussels, Belgium, October 23-24, 2012, pages 105–
115, 2012.
[roo17] Rsk. http://www.rsk.co, 2017 (visited August 9, 2017).
[SB12] Jo˜ao Sousa and Alysson Bessani. From byzantine consensus to
bft state machine replication: A latency-optimal transformation.
In Proceedings of the 2012 Ninth European Dependable Com-
puting Conference, EDCC ’12, pages 37–48, Washington, DC,
USA, 2012. IEEE Computer Society.
[SJK+16] Ewa Syta, Philipp Jovanovic, Eleftherios Kokoris-Kogias, Nicolas
Gailly, Linus Gasser, Ismail Khofﬁ, Michael J. Fischer, and Bryan
IACR
Ford. Scalable bias-resistant distributed randomness.
Cryptology ePrint Archive, 2016:1067, 2016.
[SRC84] Jerome H Saltzer, David P Reed, and David D Clark. End-to-end
arguments in system design. ACM Transactions on Computer
Systems (TOCS), 2(4):277–288, 1984.
[SYB14] David Schwartz, Noah Youngs, and Arthur Britto. The ripple
protocol consensus algorithm. https://ripple.com/ﬁles/ripple
consensus whitepaper.pdf, 2014. Accessed: 2016-08-08.
[tez17] Tezos – a self-amending crypto-ledger. https://www.tezos.com/
static/papers/position paper.pdf, 2017 (visited August 9, 2017).
http://web.archive.org/web/
20160121231718/http://apps.usa.visa.com/merchants/become-a-
merchant/how-a-visa-transaction-works.jsp.
[vis] How a Visa transaction works.
[Woo14] Gavin Wood. Ethereum: A secure decentralised generalised
transaction ledger. Ethereum Project Yellow Paper, 151, 2014.
16