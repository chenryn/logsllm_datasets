M = 3**66
k = 4
N = 
32846178930381020200488205307866106934814063650420574397058108582359767867168248
45280440466061761728177216391694470399411178484981023387050492576208615524981008
9376194662501332106637997915467797720063431587510189901
ml = []
for i in range(2*k + 1):
    tmp = [0] * (2*k + 1)
    tmp[i] = 1
    tmp[-1] = C * M**(2*k - i)
    if i == 2*k:
        tmp[-1] = -1 * C * N
    ml.append(tmp)
mm = Matrix(ml)
ws = mm.LLL()
w8, w7, w6, w5, w4, w3, w2, w1, cw0 = ws[0]
w0 = cw0 / C * -1
R. = PolynomialRing(ZZ)
poly = w8*x^8 + w7*x^7 + w6*x^6 + w5*x^5 + w4*x^4 + w3*x^3 + w2*x^2 + w1*x + w0
print(poly)
print(poly.factor())
x = 3**66
ap = 3053645990*x^4 + 3025986779*x^3 + 2956649421*x^2 + 3181401791*x + 
4085160459
p = gcd(ap, N)
q = N / p 
print(p, q)
e = 127
phi = (p - 1) * (q - 1)
d = inverse_mod(e, phi)
result = [......]
linear = []
for r in result:
    linear.append(pow(r, d, N))
print(linear)
from sage.modules.free_module_integer import IntegerLattice
import numpy as np
def CVP(lattice, target):
    gram = lattice.gram_schmidt()[0]
    t = target
    for i in reversed(range(lattice.nrows())):
        c = ((t * gram[i]) / (gram[i] * gram[i])).round()
        t -= lattice[i] * c
    return target - t
row = 127
column = 43
prime = 152989197224467
matrix_values = list(np.load("A.npy"))
results = [31087157982749, 104407786039376, 137686226773280, 122706247879910, 
3655653435789, 75939712496409, 23231038469244, 62275128959617, 106568566535000, 
139979210268497, 79578952325022, 39814231664627, 
136423111991438, 127591081894599, 137994322544582, 78604075943621, 
114622235852532, 88755932103972, 106116650561098, 110708979497388, 
13385264758465, 74235730861245, 100669691706940, 14891138382735, 
125542116499588, 133221001164679, 128410414732026, 8591859221687, 
100429843011859, 149288233436676, 118497336519202, 151300808743994, 
94906614092865, 39866689255835, 102387722052459, 39836963925499, 87282800140954, 
7022222126771, 129977203277257, 48759983962723, 63128134859648, 88570138802848, 
6826269841995, 151504656089272, 93761934099344, 90593498845277, 73033798174713, 
43387506205957, 47906851298720, 98248454178913, 60699627108221, 102052261408526, 
26283939450850, 108411937946189, 137962137325519, 48964082685250, 
109663630507527, 150859035456173, 114574205419268, 58781294385613, 
116079144233661, 41851533914525, 115615624663637, 117345086133197, 
13035149717492, 152219947031771, 54143063217021, 28063583119486, 12418419242545, 
84997801980245, 76140535711332, 22782669917859, 99440612067126, 107228647755926, 
144139270604673, 85556086412890, 128905302611897, 92851087699865, 
142117521891621, 119557654940768, 31943733104226, 78303883202337, 
64649956954315, 3549522683146, 40014171078827, 13252757299300, 116045625664262, 
14664948290017, 65694839686733, 29518525156130, 150705658696732, 
143791484820097, 131475164047537, 62428301185400, 4829603681024, 
110933884725041, 2018130983244, 7272655468964, 124815479662237, 56240879680810, 
95377339254418, 122049458606086, 147635008188323, 31827700267549, 
39321382259757, 20624189318571, 12666661347663, 39748156613375, 73341116342101, 
120046631622860, 79299889815491, 55335907796241, 104004761239437, 
22242893504650, 35814193716083, 69815844744333, 98813297486210, 52344903586963, 
78832812920313, 2440395446163, 151978021667326, 16994146588682, 61036562530947, 
75402800673525, 32270398644225, 69141116344110, 58412825281201]
A = matrix(ZZ, row + column, row) 
# row = 127 will be a bit slow, it takes a little more than two minutes to run 
on my PC (Ryzen 3700X)
for i in range(row):
    A[i, i] = prime
for x in range(row):
    for y in range(column):
        A[row + y, x] = matrix_values[x][y]
lattice = IntegerLattice(A, lll_reduce=True)
target = vector(ZZ, results)
res = CVP(lattice.reduced_basis, target)
print("Closest Vector: {}".format(res))
R = IntegerModRing(prime)
M = Matrix(R, matrix_values)
flag = M.solve_right(res)
FlagBot
In this challenge, the sender exchange key using ECDHE with 7 receivers.
There are two vulnerabilities in this challenge:
The sender reused the same private key
The generate_safecurve  function only checks the existence of a large prime factor in the 
order of curve, but there can be small prime factors
By using Pohlig Hellman algorithm, we can use recover private key modulo small prime factor 
using Pohlig Hellman attack. And since the private key is the same in the 7 curves, we can use the 
small factors in all 7 curves to obtain partial information of the private key and then combine 
them using CRT.
print("".join([chr(i) for i in list(flag)]))
from Crypto.Util.Padding import pad, unpad
from Crypto.Util.number import long_to_bytes, bytes_to_long
from Crypto.Cipher import AES
from hashlib import sha256
import base64
import re
with open('output.txt', 'r') as f:
    lines = f.readlines()
N = 7
curves = [None for _ in range(N)]
g = [None for _ in range(N)]
S_pub = [None for _ in range(N)]
R_pub = [None for _ in range(N)]
encrypted_msg = [None for _ in range(N)]
for i in range(N):
    a, b, p = re.findall(r'\d{2,}', lines[i*4+0])
    a = int(a)
    b = int(b)
    p = int(p)
    E = EllipticCurve(GF(p), [a, b])
    curves[i] = E
    exec(lines[i*4+1])
    exec(lines[i*4+2])
    exec(lines[i*4+3])
    g[i] = E(g[i])
    S_pub[i] = E(S_pub[i])
    R_pub[i] = E(R_pub[i])
moduli = []
residues = []
for idx, curve in enumerate(curves):
    n = curve.order()
    fac = list(factor(n))
    for i, j in fac:
        modules = i**j
        if i > 1 >5)
 l[1] = (l[1]>6)
 l[4] = l[4] ⊻ l[3] ⊻ l[1]
 l[2] = l[2] ⊻ l[5] ⊻ (l[1]<<3)