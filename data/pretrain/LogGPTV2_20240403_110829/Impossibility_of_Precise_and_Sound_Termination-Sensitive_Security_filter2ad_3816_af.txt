(cid:2)(cid:23)l= I
(cid:2)|l(cid:2) = I
(cid:2)|l.
.P = lecx(cid:2)
(cid:2)
VII. A TYPE SYSTEM FOR ITSNI
The goal of this section is to show that ITSNI can be
statically enforced. We deﬁne an enforcement mechanism
based on a type and effect system [16] which is ITSNI
sound. In this section, we overload security environments
to denote mappings from channels and variables to security
levels, that is Γ : Channel ∪ Var (cid:13)→ L. We assume that
security environments are total functions. We overload (cid:16) as
a binary operation between security environments such that
(Γ1 (cid:16) Γ2)(x) is equal to Γ1(x) (cid:16) Γ2(x) for all x ∈ Var and
(Γ1(cid:16)Γ2)(ch) is equal to Γ1(ch)(cid:16)Γ2(ch) for all ch ∈ Channel.
Let Γ1 (cid:15) Γ2 hold if Γ1(ch) = Γ2(ch) for all ch ∈ Channel
and Γ1(x) (cid:15) Γ2(x) for all x ∈ Var.
The intuition behind the type system is based on ideas from
works on typing concurrent languages [17]: visible outputs are
not allowed after loops with guards depending on non visible
inputs. For a given security environment Γ, typing judgements
Γ (cid:27) e : τ mean that expression e reads variables of level
at most τ. Typing judgements for commands, written Γ, τ (cid:27)
c : τ, η mean that for “termination” level τ, that is the security
level on which termination currently depends [17], c is secure,
writes variables of level at least τ, and has effect η. An effect
a pair (Γ(cid:2)
(cid:2) is a
security level called termination effect. The intuition is that Γ(cid:2)
is a security environment to sequence, and termination effect
(cid:2) records the new level on which termination depends.
τ
The rules for our type and effect system, listed in Fig. 6,
are mostly standard [2], [18], [19] except for: the propagation
of effects and rules In, Out, and While:
(cid:2)) where Γ(cid:2) is a security environment and τ
, τ
Input commands are typable by Rule In: their security level
is bound to the security level of the channel ch (τx) and the
security level of the channel ch is assigned as the new security
level of variable x in the effect of the command. The security
level of the channel is bound by the termination level.
Rule While binds τe as the security level of the guard of
the while command, and τP as the level of the body of the
while command. Since body P needs to be typed with a single
security environment, we require its security environment to
506
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
ASSIGN
Γ(x) = τx
Γ (cid:8) e : τe
SKIP Γ, τ (cid:8) skip : (cid:9), (Γ, τ )
τe (cid:7) τx
Γ, τ (cid:8) x := e : τx, (Γ, τ )
τe (cid:7) τ1 (cid:10) τ2
Γ (cid:8) e : τe
Γ, τ (cid:8) P1 : τ1, (Γ1, τ(cid:2)
Γ, τ (cid:8) P2 : τ2, (Γ2, τ(cid:2)
2)
1)
1 (cid:11) τ(cid:2)
Γ, τ (cid:8) if e then P1 else P2 : τ1 (cid:10) τ2, (Γ1 (cid:11) Γ2, τ(cid:2)
2)
τ (cid:7) τx
IF
ΓP , τP (cid:8) P : τ(cid:2)
ΓP (cid:8) e : τe
Γ (cid:7) ΓP
Γ, τ (cid:8) while e do P : τ(cid:2)
P , (ΓP , τP )
WHILE
τe (cid:7) τ(cid:2)
P
τ (cid:7) τP
P , (ΓP , τe (cid:11) τP )
τ (cid:7) τx
IN
OUT
Γ(ch) = τx
Γ, τ (cid:8) input x from ch : τx, (Γ[x (cid:4)→ τx], τ )
τ (cid:7) Γ(ch)
τe (cid:7) Γ(ch)
Γ, τ (cid:8) output e to ch : Γ(ch), (Γ, τ )
Γ (cid:8) e : τe
Γ, τ (cid:8) c1 : τ1, (Γ(cid:2), τ(cid:2))
Γ(cid:2), τ(cid:2) (cid:8) c2 : τ2, η(cid:2)(cid:2)
Γ, τ (cid:8) c1; c2 : τ1 (cid:10) τ2, η(cid:2)(cid:2)
SEQ
Fig. 6: Type system for ITSNI in programs with I/O operations
be the same as the security environment in its effect (ΓP ).
Moreover, the contraint Γ (cid:15) ΓP enforces that channels in Γ
and ΓP have the same security level and enforces variables
in ΓP which are affected by P are not downgraded. The
constraint τe (cid:15) τ
(cid:2)
P records the implicit ﬂow from the guard
to the body of the command, as in Rule If. Finally, the new
termination effect τe(cid:16)τ
(cid:2)
P records that termination may depend
on this while command: if the guard of the loop is higher than
the current termination effect τP then the termination effect
also raises.
Notice that this makes the type system not precise since
examples of ITSNI programs as the following will not be
typable because the termination effect of the while loop will
be higher than the channel to output:
1: input x from chH
2: while x do x := 0
3: output x to chL
Notice that the type system could be made more precise
by adding a typing rule that does not change the termination
effect of a while command if one can prove as a hypothesis
that the while commands terminate for all memories and inputs
(this idea is developed in [20], [21] in the context of different
security policies).
Rule Out for typing outputs is the key to obtain ITSNI. In
particular, the constraint τ (cid:15) Γ(ch) constrains the security
level of outputs on a channel to be lower bounded by the
current termination level (τ). Finally, type τe binds the security
level of the expression and τe (cid:15) Γ(ch) records the explicit
ﬂow from the expression to the output channel, similar to the
constraint in Rule Assign.
Deﬁnition VII.1 (Typability of P ). Program P is typable with
(cid:2)
, η.
environment Γ, denoted Γ (cid:27) P , if there exists τ, τ
Γ, τ (cid:27) c : τ
Theorem VII.1 (Soundness). If Γ (cid:27) P then P is ITSNI.
Proof. The proof is in Appendix.
(cid:2)
, η such that
VIII. RELATED WORK
TS security deﬁnitions: TSNI was ﬁrst formally deﬁned
by Volpano and Smith [22]. Other formulations of termination
sensitive information ﬂow have followed. Abadi et al. and
Sabelfeld and Sands [23], [24] formalize TS security by
partial equivalence relations, representing degrees of security,
in the deterministic and nondeterministic setting respectively.
Askarov et al. [11] propose a deﬁnition of TSNI (later called
progress-sensitive noninterference [25]) on a simple language
where programs do not consume input and can only generate
output. The idea behind their TSNI is similar to the idea
behind ITSNI: their TSNI is deﬁned based on events visible
to attacker and it is independent from actual terminations of
executions. Bohannon et al. [10] present several notions of
security in the context of general reactive programs: programs
that alternate between computing and interacting with one
or more external agents. They propose CPCT-Security as an
adaptation of TSNI in the context of reactive languages. They
also propose a weaker version called CP, which is analogous
to ITSNI in the context of general reactive programs. They
do not discuss differences in their enforcement: while CPCT-
security can be enforced soundly and precisely, CP cannot.
Barthe et al. [3] characterize termination-sensitive generalised
noninterference using the weakest conservative precondition
(wp) transformer with total correctness. Stronger deﬁnitions
such as timing sensitive noninterference [26] have been pro-
posed. In timing sensitive security, the assumption is that an
attacker can observe the time of computation. This is known
as timing channels. Timing channels are particularly important
when enforcing security for concurrent program [27], [28].
Observational determinism is an information ﬂow policy pro-
posed with the goal of generalizing noninterference to capture
timing channels in concurrent programs. The observational
determinism policy resembles to our ITSNI policy. Observa-
tional determinism differs from ITSNI because ITSNI does
not consider equivalences between traces up to stuttering.
TS (non precise) static mechanisms: Several sound, but
not precise, TS enforcement mechanisms exist. Volpano and
Smith [22], propose a static TSNI enforcement mechanism
which is sound but not precise. Their enforcement is based
on a type system that accepts programs without while loops
whose guard depends on conﬁdential information. Agat and
Sands [29] study how algorithms for searching and sorting
can (efﬁciently) be made timing sensitive noninterferent when
working on collections of conﬁdential data. Terauchi
[30]
proposes a type system to enforce observational determinism
in the context of a concurrent language. The type system
proposed by Boudol and Castellani [28] in the context of a
concurrent language is the closest to our proposal of Sec-
tion VII. In their type system, they close timing channels
507
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
by avoiding low assignments after high loops. We reuse
this idea to enforce ITSNI in our setting. The soundness
property that they enforce is a form of termination-sensitive
noninterference deﬁned as a bisimulation. Barthe et al. [3]
propose to model check termination-sensitive information ﬂow
policies (generalisations of noninterference that can capture
declassiﬁcation) characterised as CTL and LTL formulas using
the self composition technique. Recently, Antonopoulos [31]
present a technique (to replace self composition) called decom-
position to enforce general information ﬂow properties and in
particular avoid timing sensitive non interference (in a non
precise way).
Sound and precise (non computable) TSNI methods:
Bielova and Rezk [5], [6] model and compare different
dynamic mechanisms for noninterference including a non-
computable version of SME, relying on an oracle that can
decide the halting problem, which is sound and complete for
TSNI.
TS dynamic enforcements: The ﬁrst proposal of SME [1]
(that we present in Section VI) was claimed sound for TSNI
and Timing Sensitive noninterference using a low priority
scheduler. Several variants of secure multi execution based
mechanisms have been proposed since then (e.g. [32], [33])
but most of them are proved sound for termination-insensitive
security [11]. We discuss only TS cases. Barthe et al. [4]
propose a dynamic enforcement mechanism based on static
transformation of programs. They claim the mechanism to
be TSNI sound and precise using the TSNI claim of SME
soundness and precision [1]. Unfortunately, since this claim
does not hold (as we explain in Section VI), the mistake
propagates to their result. Kashyap et al.
[34] point out
that SME [1] does not enforce soundly a version of TSNI
when the security lattice is not totally ordered (their argument
is similar to our explanation in Example VI.2). Notice that
the version of TSNI in their argument resembles ITSNI but
it is speciﬁc to SME as it relies on observations of local
executions of SME. They also propose different schedulers
for different TS policies. In contrast to our work, they do not
consider precision. Rafnsson and Sabelfeld [35] prove that
SME can enforce soundly timing-sensitive and progressive-
sensitive non-interference when the scheduler is fair and
deterministic. They prove that SME can enforce precisely
progressive-sensitive non-interference when the scheduler is
high lead. Notice that different from the scheduler used in
our SMEF, their schedulers are required to be independent
from input events consumed and behaviour of local executions.
Their technique for full-transparency can be used to further im-
prove the precision of SMEF. Our results on ITSNI sound and
precise enforcement mechanisms can be extended to existent
variants of SME that can handle declassiﬁcation policies [32],
[33], [35]. Ngo et al. [9] propose general sound and precise
enforcement mechanisms for hyper properties [36] (hyper
properties are generalisation of properties and are deﬁned in
terms of several executions. For example, noninterference is a
hyperproperty deﬁned in term of 2 executions.). Their sound
and precise enforcements do no contradict our result because
they work only in the setting of terminating programs.
General results on enforceable properties: The Rice
theorem [7], [37] says that non-trivial program properties
(properties which are either empty or always true) are not
decidable. Notice that an enforcement mechanism does not
need to decide the property in order to enforce it soundly
and precisely. An example is SME for ITSNI, as shown
in this work. Hamlen et al.
[8] characterize classes of
security policies which are enforceable (by Rice Theorem, not
decidable). In particular, they present the secret ﬁle policy.
According to our understanding, this policy is termination-
sensitive noninterference: programs behaviour should be the
same with or without conﬁdential information, here a secret
ﬁle. They informally explain that the secret ﬁle policy can
be enforced soundly and precisely. However, this is not a
contradiction to our main result because the notion of precision
that they use is weaker than ours: the precision deﬁnition used
for the secret ﬁle policy says that normal user can only observe
termination but not any (other) output. Indeed, their precision
only requires that if the program satisﬁes TSNI and on an
input, the original program terminates with an output O1, then
the enforcement mechanism on the same input terminates with
O2, and O1 and O2 may be different. In Section V we discuss
that a good notion of precision should reﬂect what a normal
user can observe: we can argue that if termination is the only
output that a normal user can observe, computation might not
be very useful.
IX. CONCLUSION
The main conclusion of our work is that
termination-
sensitivity of information ﬂow policies is a subtle property,
and it makes sense to distinguish two notions of termination-
sensitivity:
• a notion that talks about actual termination of programs
(TS),
• and a notion that formalizes termination as it can be
observed indirectly (ITS).
Depending on attacker models and/or the security objective
that one wishes to achieve, both styles of policies are useful.
However, another important conclusion from this paper is that
ITS policies are easier to enforce than TS policies: we have
shown that ITS policies can be enforced soundly and precisely
and TS polices cannot.
As future work, we plan to study if our results also hold in
the case of nondeterministic (and more generally probabilistic)
programs.
ACKNOWLEDGMENT
This research has been partially supported by the ANR
project CISC ANR-17-CE25-0014-01.
508
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] D. Devriese and F. Piessens, “Noninterference through secure multi-
execution,” in Proc. of IEEE SP 2010, ser. SP ’10, 2010, pp. 109–124.
[2] A. Sabelfeld and A. C. Myers, “Language-based information-ﬂow secu-
rity,” IEEE Journal on Selected Areas in Communications, 2003.
[3] G. Barthe, P. R. D’Argenio, and T. Rezk, “Secure information ﬂow
by self-composition,” Mathematical Structures in Computer Science,
vol. 21, no. 6, pp. 1207–1252, 2011.
[4] G. Barthe, J. M. Crespo, D. Devriese, F. Piessens, and E. Rivas, “Secure
multi-execution through static program transformation,” in Proc. of
FMOODS 2012 and FORTE 2012, 2012, pp. 186–202.
[5] N. Bielova and T. Rezk, “A taxonomy of information ﬂow monitors,”
in Proc. of POST 2016, 2016, pp. 46–67.
[6] ——, “Spot the difference: Secure multi-execution and multiple facets,”
in Proc. of ESORICS 2016, 2016, pp. 501–519.
[7] H. Rogers, Jr., Theory of Recursive Functions and Effective Computabil-
ity. McGraw-Hill, 1967.
[8] K. W. Hamlen, G. Morrisett, and F. B. Schneider, “Computability
classes for enforcement mechanisms,” ACM Trans. Program. Lang. Syst.,
vol. 28, no. 1, pp. 175–205, Jan. 2006.
[9] M. Ngo, F. Massacci, D. Milushev, and F. Piessens, “Runtime enforce-
ment of security policies on black box reactive programs,” in Proc. of
POPL 2015, ser. POPL ’15, 2015, pp. 43–54.
[10] A. Bohannon, B. C. Pierce, V. Sj¨oberg, S. Weirich, and S. Zdancewic,
“Reactive noninterference,” in Proc. of CCS 2009, ser. CCS ’09, 2009,
pp. 79–90.
[11] A. Askarov, S. Hunt, A. Sabelfeld, and D. Sands, “Termination-
insensitive noninterference leaks more than just a bit,” in Proc. of
ESORICS 2008, ser. ESORICS ’08, 2008, pp. 333–348.
[12] J. Ligatti, L. Bauer, and D. Walker, “Enforcing non-safety security
policies with program monitors,” in Proc. of ESORICS 2005, ser.
ESORICS’05, 2005, pp. 355–373.
[13] A. Sabelfeld and D. Sands, “Declassiﬁcation: Dimensions and princi-
ples,” Journal of Computer Security, vol. 17, no. 5, pp. 517–548, 2009.
[14] N. Broberg, B. van Delft, and D. Sands, “The anatomy and facets of
dynamic policies,” in Proc. of CSF 2015, 2015.
[15] A. Silberschatz, G. Gagne, and P. B. Galvin, Operating System Concepts,
8th ed. Wiley Publishing, 2011.
[16] J. M. Lucassen and D. K. Gifford, “Polymorphic effect systems,” in
Proc. of POPL 1988, ser. POPL ’88, 1988.
[17] G. Boudol and I. Castellani, “Noninterference for concurrent programs
and thread systems,” Theoretical Computer Science, 2002.
[18] D. Volpano, C. Irvine, and G. Smith, “A sound type system for secure
ﬂow analysis,” J. Comp. Sec., vol. 4, no. 2-3, pp. 167–187, Jan. 1996.
[19] G. Barthe, T. Rezk, and D. A. Naumann, “Deriving an information ﬂow
checker and certifying compiler for java,” in Proc. of IEEE SP 2006,
ser. SP ’06, 2006, pp. 230–242.
[20] G. Boudol, “On typing information ﬂow,” in Proc. of ICTAC 2005, 2005.
[21] G. Barthe, S. Cavadini, and T. Rezk, “Tractable enforcement of declas-
siﬁcation policies,” in Proc. of CSF 2008, 2008.