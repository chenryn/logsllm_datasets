        | s_stmt
        | string
    s_letter: "LETTER"
    s_word: "WORD"
    s_number: "NUMBER"
    s_digit: "DIGIT"
    s_expr: "expression"
    s_stmt: "statement"
    string: ESCAPED_STRING
    name: s_expr
        | s_stmt
这就是个coding题。。
    from enum import Enum
    from typing import List
    import lark
    import zlib
    import random
    import string
    from pwn import *
    from hashlib import sha256
    MIN_COV = 30
    class PartType(Enum):
        LETTER = 0
        WORD = 1
        NUMBER = 2
        DIGIT = 3
        EXPRESSION = 4
        STATEMENT = 5
        STRING = 6
    class Part:
        def __init__(self, typ, data = None):
            if typ == PartType.STRING and not isinstance(data, str):
                raise ValueError
            self.typ = typ
            self.data = data
        def __repr__(self) -> str:
            s = str(self.typ)
            if self.data is not None:
                s += " \"%s\"" % self.data
            return s
        def complexity(self):
            if self.typ == PartType.EXPRESSION:
                c = 13.5
            elif self.typ == PartType.STATEMENT:
                c = 42.73
            elif self.typ == PartType.STRING:
                c = len(self.data)
            else:
                c = 1
            return float(c)
        def expandable(self):
            return self.typ == PartType.STATEMENT or self.typ == PartType.EXPRESSION
    class Rule:
        def __init__(self, parts: List[Part], cov: int):
            self.parts = parts
            self.cov = cov
        def __repr__(self) -> str:
            return " ".join(str(x) for x in self.parts) + " -> cov_%d" % self.cov
        def complexity(self):
            return sum([p.complexity() for p in self.parts])
        def expandable(self):
            return any(p.expandable() for p in self.parts)
    def parse_gram(in_gram):
        with open("grammar") as f:
            gram = f.read()
        parser = lark.Lark(gram)
        return parser.parse(in_gram)
    def parse_rules(gram):
        assert gram.data == "start"
        expr_rules = []
        stmt_rules = []
        for child in gram.children:
            if child.data != "rule":
                continue
            rname = child.children[0]
            if rname.data == "start_rule":
                continue
            rname = rname.children[0].data
            if rname == "s_expr":
                expr_rules = parse_rule(child.children)
            else:
                stmt_rules = parse_rule(child.children)
        return expr_rules, stmt_rules
    def parse_rule(ast):
        ans = []
        for x in ast:
            if x.data != "subrule":
                continue
            r = parse_subrule(x)
            ans.append(r)
        return ans
    def parse_subrule(ast):
        parts = []
        for x in ast.children:
            if isinstance(x, lark.tree.Tree):
                assert len(x.children) == 1
                y = x.children[0]
                if y.data == "s_expr":
                    part = Part(PartType.EXPRESSION)
                elif y.data == "s_stmt":
                    part = Part(PartType.STATEMENT)
                elif y.data == "s_word":
                    part = Part(PartType.WORD)
                elif y.data == "s_number":
                    part = Part(PartType.NUMBER)
                elif y.data == "s_digit":
                    part = Part(PartType.DIGIT)
                elif y.data == "s_letter":
                    part = Part(PartType.LETTER)
                elif y.data == "string":
                    data = y.children[0].strip('"')
                    part = Part(PartType.STRING, data)
                else:
                    raise ValueError(y)
                parts.append(part)
        cov = int(ast.children[-1])
        return Rule(parts, cov)
    class Solver:
        def __init__(self, expr_rules: List[Rule], stmt_rules: List[Rule]):
            self.expr_rules = expr_rules
            self.stmt_rules = stmt_rules
            self.expr_cov = [False] * len(self.expr_rules)
            self.stmt_cov = [False] * len(self.stmt_rules)
            self.count = 0
        def all_cover(self):
            return all(self.expr_cov) and all(self.stmt_cov)
        def run(self):
            stmt_id = self.get_stmt_id(True)
            sol, anum = self.generate(self.stmt_rules[stmt_id], MIN_COV)
            #print(sol)
            return sol
        def get_rule_id(rules, cov, expand):
            rid = None
            n = len(rules)
            for i in range(n):
                if expand and not rules[i].expandable():
                    continue
                if not cov[i]:
                    rid = i
                    break
            if rid is None:
                if expand:
                    rid = random.choice([i for i in range(n) if rules[i].expandable()])
                else:
                    rid = random.choice(range(n))
            cov[rid] = True
            return rid
        def get_stmt_id(self, expand):
            return Solver.get_rule_id(self.stmt_rules, self.stmt_cov, expand)
        def get_expr_id(self, expand):
            return Solver.get_rule_id(self.expr_rules, self.expr_cov, expand)
        def generate(self, rule: Rule, cnum: int):
            code = ""
            anum = 1
            #print("gen", cnum, rule)
            for part in rule.parts:
                if part.typ == PartType.DIGIT or part.typ == PartType.NUMBER:
                    s = random.choice(string.digits)
                elif part.typ == PartType.LETTER or part.typ == PartType.WORD:
                    s = random.choice(string.ascii_letters)
                elif part.typ == PartType.STRING:
                    s = part.data
                elif part.typ == PartType.EXPRESSION:
                    expr_id = self.get_expr_id(anum + 1 = cnum
            return code, anum
    def proof(r):
        line = r.recvline().decode().strip()
        part = line[line.find("+")+1:line.find(")")]
        h = line[line.find("==")+2:].strip()
        print(line)
        while True:
            s = ''.join(random.choice(string.digits+string.ascii_letters) for _ in range(4))
            h1 = sha256((s+part).encode()).hexdigest()
            if h1 == h:
                r.recvuntil("Give")
                r.sendline(s)
                break
    def collect_cov(ast):
        cov = 0
        if isinstance(ast, lark.tree.Tree):
            for ch in ast.children:
                cov |= collect_cov(ch)
            if ast.data.startswith('cov_'):
                num = int(ast.data[4:])
                cov |= (1= 20:
                codes.add(sol)
            print("len", len(codes))
        assert solver.all_cover()
        MAXSIZE = 0x200000
        code = "|".join(list(codes))
        code = zlib.compress(code.encode())
        size = len(code)
        assert size < MAXSIZE
        code = code.hex()
        #context.log_level = "debug"
        r.recvuntil("size")
        r.sendline(str(size))
        r.recvuntil("code(hex): ")
        r.sendline(code)
        flag = r.recvall().decode()
        r.close()
        return flag
    if __name__ == "__main__":
        while True:
            flag = solve(local=True)
            if "fail" not in flag:
                print(flag)
                break