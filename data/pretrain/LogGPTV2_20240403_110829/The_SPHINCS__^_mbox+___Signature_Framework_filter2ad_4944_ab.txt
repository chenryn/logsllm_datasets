fails. Consequently, the reduction has to guess where it may plant
a preimage challenge and where it must not.
If we could instead ensure that (at least with high probability)
the preimage returned by preimage finder A is different from the
one we used to compute the image, we could turn A into a second-
preimage finder that we might be able to use to break sm-tcr.
The advantage of this approach is that the reduction now knows
preimages for all targets and hence can answer all signing queries.
One way that was used before in [33] to ensure that the preimage
finder A returns a second-preimage (and not the one already known
to the reduction) is to assume that for every domain element of
the function there exists at least one colliding domain element.
As it is unknown to A which of the two or more preimages was
used to compute the image its output must be independent of the
used preimage. Hence, the returned preimage differs from the one
already known to the reduction with probability at least 1/2. The
problem with this approach is that in the case of SPHINCS+ and
XMSS-T, the preimage finder works on a length-preserving hash
function and a random length-preserving function does not have
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2131this property. Indeed, approximately 1/e of all domain elements
do not have a colliding value in this case. Hence, we would expect
cryptographic hash functions to also not have this property. It is
possible to turn any length-preserving hash function into a hash
function with this property [10], but this comes at the cost of a
slight loss in security and a factor-two slowdown.
An alternative approach was recently proposed in [10] under the
name decisional second-preimage resistance (dspr). The intuition
here is that while there might exist domain elements that do not
have a colliding value, it is computationally hard to detect those. It
was shown in [10] that for functions which are dspr, a preimage
finder can be used to find second-preimages with approximately
the same success probability. In the following, we formally define a
version of dspr adopted to the setting of tweakable hash functions
which we call post-quantum single function, multi-target decisional
second preimage resistance for distinct tweaks (pq-sm-dspr).
The definition of DSPR requires a definition of a second-preim-
age-exists predicate. We derive a workable definition for tweakable
hash functions from the definition for keyed hash functions from
[10] and use this definition to further define what it means for a
tweakable hash function to be pq-sm-dspr.
Definition 3 (SPexists for tweakable hash functions). The second-
preimage-exists predicate SPexists(Th) for a tweakable hash func-
tion Th is the function SP : P × T × {0, 1}α → {0, 1} defined as
follows:
SPP ,T (M) =
P ,T (ThP ,T (M))| ≥ 2
if |Th−1
otherwise,
(cid:40)1
0
where Th−1
the first two inputs to Th to the given values.
P ,T refers to the inverse of the function obtained by fixing
Definition 4 (pq-sm-dspr). In the following let Th be a tweakable
hash function as defined above. We define the advantage of any
adversary A = (A1, A2) against the sm-dspr-security of Th. The
definition is parameterized by the number of targets p for which it
must hold that p ≤ |T |. In the definition, A1 is allowed to make
p queries to an oracle Th(P, ·, ·). The query set Q and predicate
DIST({Ti}p
i =1), are defined as in Definition 2.
with
(A) = max{0, succ − triv}
Advsm-dspr
Th,p
succ = Pr(cid:2)P ←R P; S ← ATh(P ,·,·)
triv = Pr(cid:2)P ←R P; S ← ATh(P ,·,·)
SPP ,Tj(Mj) = b ∧ DIST({Ti}p
1
1
SPP ,Tj(Mj) = 1 ∧ DIST({Ti}p
i =1)(cid:3);
i =1)(cid:3) .
( );(j, b) ← A2(Q, S, P) :
( );(j, b) ← A2(Q, S, P) :
We define the pq-sm-dspr insecurity of a tweakable hash func-
tion against p target, time ξ adversaries as the maximum advantage
of any (possibly quantum) adversary A with p targets and running
time ≤ ξ:
InSecpq-sm-dspr (Th; ξ , p) = maxA
Advsm-dspr
Th,p
As a special case, we refer to pq-sm-dspr with tweak advice if A1
informs the oracle about all p tweaks it will use ahead of its queries.
(A)(cid:111)
(cid:110)
The above definition of the dspr advantage might look unfamiliar
to the reader. The idea is the common concept that the advantage
should be defined as the advantage of an adversary over the trivial
algorithm that just guesses the right answer. Usually, the right
answer is a uniformly random bit and hence we simply subtract
1/2 as the guessing probability. For the case of dspr, the guessing
probability depends on the actual function used. E.g., for a random
length-preserving function1 Th, the probability that SPP ,T (M) = 1
is about 1 − 1/e. This turns out to significantly complicate the
definition of an advantage. To obtain a usable definition, the authors
of [10] made some choices. Most importantly, the trivial attack to
compare to was decided to be the algorithm that always outputs 1.
This was justified by showing that for the overwhelming majority
of functions Pr[SPP ,T (M) = 1] > 1/2 and for the cases where
Pr[SPP ,T (M) = 1] < 1/2 dspr turns out to not be useful. For a
much more detailed discussion of the choices, see [10].
2.3 Generic constructions
In this section we give three generic constructions of tweakable
hash functions. Our constructions make use of keyed hash functions
H : K×{0, 1}α → {0, 1}n. For key K and message M we sometimes
write HK(M) in place of H(K, M). The first construction is in the
standard model but requires public parameters with size linear
in the size of the tweak space. For SPHINCS+ this would lead
to exponential-size public parameters. This construction is thus
mainly meant as an example to motivate the second construction,
which is essentially the same as the first with the difference that it
replaces the public parameters by a short public seed from which
everyone can generate the required parameters using a keyed hash
function H2. While this massively reduces the public parameter size
it comes at the cost of requiring the quantum accessible random
oracle model (QROM) for the proof. If we assumed that H2 was a
PRF and if we just initialized the public parameters using H2 and
never output the used seed, we would still achieve security in the
standard model. However, as we are handing out the seed, nothing
can be derived from the PRF security of H2 which requires the
seed to be kept secret. Hence, we could either formulate a new,
interactive security assumption or we use the QROM to show that
this public-parameter compression is secure. We did the latter. The
third construction goes even one step further and assumes that
all hash functions used behave like quantum accessible random
oracles (QROs).
Construction 5. Given a keyed hash function H with n-bit keys,
we construct Th as
Th(P,T , M) = H(P[(α + n)T , n], M
⊕) ,
⊕
M
= M ⊕ (P[(α + n)T + n, α]) ,
where P is a length-(α + n)|T | bit string and P[i, j] denotes the j-bit
substring of P that starts with the ith bit.
Construction 6. Given two hash functions H1 : {0, 1}2n×{0, 1}α
→ {0, 1}n with 2n-bit keys, and H2 : {0, 1}2n → {0, 1}α we con-
struct Th with P = T = {0, 1}n, as
Th(P,T , M) = H1(P||T , M
⊕) , with M
⊕
= M ⊕ H2(P||T) .
1We consider a tweakable hash function length-preserving if the message length equals
the output length.
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2132Construction 7. Given a hash function H : {0, 1}2n+α →
{0, 1}n, we construct Th with P = T = {0, 1}n as
Th(P,T , M) = H(P∥T ∥M) .
Construction 6 is essentially the construction used in [33] which
was proven secure in the QROM using the post-quantum multi-
function, multi-target second-preimage resistance (pq-mm-spr) of
H. Construction 6 differs from [33] in that it does not key H with
a (pseudo-)random bit string but just with (P||T) which ensures
distinct keys for distinct tweaks. Construction 7 is in spirit similar
to the construction used for LMS signatures [36].
SM-TCR security. We first show under what conditions these con-
structions are pq-sm-tcr. Afterwards, we look at pq-sm-dspr. We
show that Construction 5 is pq-sm-tcr if H is post-quantum multi-
function, multi-target second-preimage resistant (pq-mm-spr), that
Construction 6 is pq-sm-tcr with tweak advice if H1 is post-quan-
tum distinct-function, multi-target second-preimage resistant (pq-
dm-spr) and H2 is modeled as QRO, and that Construction 7 is
pq-sm-tcr if H is modeled as QRO. We only achieve pq-sm-tcr
with tweak advice for Construction 6 for technical reasons. How-
ever, for the use in SPHINCS+ and XMSS-T pq-sm-tcr with tweak
advice is sufficient. pq-dm-spr differs from pq-mm-spr in that it
does not require the use of random but just distinct function keys:
Definition 8 (pq-dm-spr). Let H : K × {0, 1}α → {0, 1}n be a
keyed hash function. We define the advantage of any adversary A =
(A1, A2) against distinct-function, multi-target second-preimage
resistance (dm-spr). This definition is parameterized by the number
of targets p.
(cid:104){Ki}p
Succdm-spr
H,p
(A) =Pr
i =1 ← A1( ), {Mi}p
′) ←R A2({(Ki , Mi)}p
(j, M
∧H(Kj , Mj) = H(Kj , M
1 ←R ({0, 1}α)p;
′ (cid:44) Mj
i =1) : M
′) ∧ DIST({Ki}p
i =1)(cid:105)
.
where we assume that A1 and A2 share state and DIST({Ki}p
as in Definition 2.
1) is
We define the insecurity of a keyed hash function H against
p target, time-ξ, pq-dm-spr adversaries as the maximum success
probability of any possibly quantum adversary A with p targets
and running time ≤ ξ:
InSecpq-dm-spr (H; ξ , p) = maxA
Succdm-spr
H,p
(cid:110)
(A)(cid:111)
.
The definition of mm-spr as given in [33] is obtained from the
1 ←R Kp and ignoring
above by replacing {Ki}p
the DIST condition (and of course renaming A2 as A).
1 ← A1( ) by {Ki}p
Theorem 9. Let H be a hash function as in Construction 5 and
Th the tweakable hash function constructed by Construction 5. Then
the success probability of any time-ξ (quantum) adversary A against
sm-tcr of Th is bounded by
Succsm-tcr
Th,p
(A) ≤ InSecpq-mm-spr (H; ξ , p) .
Proof. Assume we are given access to an adversary A against
sm-tcr of Th. We show how to construct an oracle machine MA
that breaks mm-spr of H. Essentially, MA uses the mm-spr chal-
i =1 to generate the public parameters P. For
lenge set(cid:8)(K∗
i )(cid:9)p
i , M∗
the ith query (Mi ,Ti) made by A1, MA sets P[(α + n)Ti , n] = K∗
and P[(α + n)Ti + n, α] = Mi ⊕ M∗
i
i and answers the query. After all
p queries, MA fills the remaining spots in P with random bits and
starts A2. When A2 outputs a target collision (j, M), MA outputs
(j, M ⊕ P[(α +n)Tj +n, α]) which by construction is a second preim-
age for M∗
j . Hence, the success probability of MA is
exactly that of A and it runs in essentially the same time.
j under HK∗
□
Theorem 10. Let H1 and H2 be hash functions as in Construction 6
and Th the tweakable hash function constructed by Construction 6.
Then the success probability of any time-ξ (quantum) adversary A
against sm-tcr of Th with tweak advice is bounded by
(A) ≤ InSecpq-dm-spr (H1; ξ , p) ,
Succsm-tcr
Th,p
when modeling H2 as quantum-accessible random oracle and not
giving A1 access to this oracle.
Note that the restriction that A1 does not get access to the
random oracle is sufficient in later proofs, because when A1 is
implemented by a reduction, it will only use the function oracle to
generate the challenges.
i
generate(cid:8)K∗
Proof. Assume we are given access to an adversary A against
sm-tcr (with tweak advice) of Th. We show how to construct an
oracle machine MA that breaks dm-spr of H1. The idea is essen-
tially the same as above. The main difference is that now instead
(cid:9)p
of setting elements in P, we program the random oracle H2. The
reduction MA first receives the tweak advice which allows it to
1 by first sampling a random P ←R P and setting
i = P∥Ti. With this, MA can request the dm-spr challenge mes-
K∗
1, . . . , M∗
sages M∗
p.
For the ith query (Mi ,Ti) by A1, MA programs H2(P||Ti) =
Mi ⊕ M∗
i and records the query. Then it applies the construction
to answer the query. After all p queries were made, MA runs A2.
When A2 outputs a target collision (j, M), MA outputs (j, M ⊕
H2(P||Tj)) which by construction is a second preimage for M∗
j under
H1(K∗
j , ·). Hence, the success probability of MA is exactly that of
A and it runs in essentially the same time. As all random oracle
programming is done before A gets access to H2, the reduction is
□
history-free and thereby also works in the QROM.
Theorem 11. Let H be a hash function as in Construction 7, mod-
eled as quantum-accessible random oracle, and Th the tweakable hash
function constructed by Construction 7. Then the success probability of
any (quantum) adversary A making at most q-queries to H, against
sm-tcr of Th is bounded by
Succsm-tcr
Th,p
(A) ≤ 8(2q + 1)2/2n,
when A1 is not given access to the random oracle.
The reason for not giving A1 access to the random oracle is
the same as in Theorem 10. We delay the proof of Theorem 11 to
Appendix C. The reason is that it is a direct proof of a quantum
query complexity lower bound, which uses a framework from [33]
that we only introduce in Appendix B.
SM-DSPR security. Now we take a look at sm-dspr. We will re-
duce distinct function, multi-target decisional second-preimage
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2133resistance (dm-dspr) of the used hash function to sm-dspr of the
tweakable hash. dm-dspr needs the following definition from [10].
Definition 12 (SPexists for keyed hash functions). The second-
preimage-exists predicate SPexists(H) for a keyed hash function H
is the function SP : K × {0, 1}α → {0, 1} defined as follows:
(cid:40)1
0
SPK(M) =
(HK(M))| ≥ 2
if |H−1