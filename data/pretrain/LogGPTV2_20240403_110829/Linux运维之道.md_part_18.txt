[root@centos6 ~]#[-h /etc/grub.conf ] && echo "y"1l echo "N"
[root@centos6
[root@centos6
mN oa ll ou  [ // p- 1 #[ 9soao]
[root@centos6 ~]# test -d /etc/passwd && echo "y" Il echo "N"
反斜线
使其还原字面意义。
~]#[-e/etc/passwd ] && echo "y"ll echo "N"
#tt变量没有定义，所以为空字串
#PATH 变量有定义，
"N..
，所以为非空
---
## Page 133
个双引号之间的单引号不必成对出现。
这些字符含义，必须前置一个\符号，其他字符的功能将被屏蔽（包括单引号)。也就是说，两
不可以在两个单引号中间单独插入一个单引号，单引号必须成对出现。
是换行继续输入命令，实现命令的多行输入功能。
3.5.4
3.5.3
3.5.2
Shell中使用反引号进行命令替换，命令替换使 Shell可以将命令字符替换为命令执行结果
双引号类似于单引号，
单引号可以将它中间的所有任意字符还原为字面意义，实现屏蔽Shell元字符的功能。注意，
$HOME
[root@centos6~]# echo$HOME
anaconda-ks.cfg install.log install.log.syslog
[root@centos6~]#echo*
另外，如果在命令的末尾使用\回车后，\可以将回车的命令提交功能屏蔽，从而将回车认为
[root@centos6~]#echo"\$HoME
/root
[root@centos6~]#echo"$HoME'
This's book.
[root@centos6~]#echo"This'sbook.
testl
[root@centos6~]#echo'test\
$HOME
V
[root@centos6~]#find/\
[root@centos6~]#echo\>
[root@centos6 ~]#echo\*
-size +5M
-type f\
-name "test.txt"\
反引号
双引号
单引号
，但其不会屏蔽、\和s这三个Shell元字符的含义，如果需要屏蔽
#单引号将屏蔽$的特殊功能
#默认\为转义换行，这里也被屏蔽
#换行输入多行命令
#显示>符号
#显示*字符
#显示当前目录的所有文件列表
第3章自动化运维
117
---
## Page 134
awk
egrep
表3-5
与正则表达式的对应关系。
表达式的具体规则。由于不同的工具对正则的支持有所不同，表3-5列出了系统常用编辑工具
成修改，其效率极低。此时，使用正则表达式是非常明智的选择。接下来，我们分别看看每种
常需要对大量的服务器进行配置的修改，如果以手动方式在海量数据中进行查找匹配并最终完
达式也不例外，正则表达式的发展经历了基本正则表达式与扩展正则表达式，扩展正则表达式
文本编辑工具、编程语言都支持正则表达式，但任何语言都需要遵循一定的语法规则，正则表
匹配定位，也可以告诉计算机你需要的是26个字母中的任意一个匹配，等等。现在很多程序、
所需人才。
写完后，通过招聘会、网络招聘等方式广纳人才，通常，描述写得越细，越能快速精准地定位
接精准地定位到人；第二，写招聘简章（对需要的人才进行描述：学历、经验、技能、语言等)，
位，这时我们可以有很多方法找到公司需要的人。常用的方式有两种，第一，通过朋友介绍直
3.6正则表达式
的输出内容。同样的功能也可以使用$O来实现。
sed
grep
Linux运维之道
118
注意，正则表达式中有些匹配字符与 Shell中的通配符符号一样，但含义却不同。
而正则表达式就是一种计算机描述语言，你可以直接告诉计算机你需要的是字母A来精确
实际工作中，公司需要对外招聘人才，但大千世界人才众多，并不一定每个人都适合该岗
Today is 02/09/13
[root@centos6~]#echo "Today is $(date +%D)"
Todayis02/09/13
+、  #[9o]
编辑工具
2
基本正则表达式
扩展正则表达式
---
## Page 135
提示
内容)：
\n
n}
V{n,m\}
[门]
的
>
[x-y]
口
表3-6
3.6.1
查找：与0:之间包含任意两个字符的字串，并显示该行（--color代表以颜色加亮显示匹配的
查找包含root的行：
由于模板文件的内容在每个系统中略有差异，以下案例的输出结果可能有所不同。
[root@centos6~]# cp /etc/passwd /tmp/
2.基本正则表达式案例
表3-6列出了基本正则表达式及其对应的含义。
operator:x:11:0:operator:/root:/sbin/nologin
root:x:0:0:root:/root:/bin/bash
[root@centos6~]# grep root /tmp/passwd
1.基本正则表达式及其含主
基本正则表达式（RegularExpression）
字符
通过\1至\9调用保留空间中的内容
将（与\）之间的内容存储在“保留空间”，最大存储9个
匹配前一个字符重复n次
匹配前一个字符重复至少n次
匹配前一个字符重复n到m次
匹配转义后的字串
匹配否定，对括号中的集合取反
匹配字串的结尾
匹配字串的开头
匹配连续的字串范围
匹配集合中的任意单个字符，括号中为一个集合
匹配任意多个任意字符
匹配前一个字符出现零次或多次
匹配任意单个字符
匹配字母c
含义
#复制模板文件
第3章自动化运维
119
---
## Page 136
Linux运维之道
120
lp:x:4:7:1p:/var/spoo1/lpd:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
root:x:0:0:root:/root:/bin/bash
查找包含字母f-q 的行（因输出内容较多，这里仅列出部分输出)：
sync:x:5:Q:sync:/sbin:/bin/sync
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
root:x:0:0:root:/root:/bin/bash
查找包含数字0~9的行（因输出内容较多，这里仅列出部分输出）：
postfix:x:89:89::/var/spool/postfix:/sbin/nologin
root:x:0:0:root:/root:/bin/bash
[root@centos6~]# grep --color o[os]t /tmp/passwd
查找包含oot或ost的行：
avahi:x:70:70:Avahi mDNS/DNS-SD Stack:/var/run/avahi-daemon:/sbin/nologin
avahi-autoipd:x:170:170:AvahiIPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin
ftp:x:14:50:FTPUser:/var/ftp:/sbin/nologin
gopher:x:13:30:gopher:/var/gopher:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
operator:x:1l:0:operator:/root:/sbin/nologin
halt:x:7:0:halt:/sbin:/sbin/halt
root:x:0:0:root:/root:/bin/bash
[root@centos6~]# grep --color 0o* /tmp/passwd
查找包含至少一个0的行（第一个0必须出现，第二个0可以出现0次或多次）：
games:x:12:100:games:/usr/games:/sbin/nologin
halt:x:7:0:halt:/sbin:/sbin/halt
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
sync:x:5:0:sync:/sbin:/bin/sync
root:x:0:0:root:/root:/bin/bash
[root@centos6~]#grep--color:..0:/tmp/passwd
#匹配0出现2次
#该行有两处匹配
---
## Page 137
[root@centos6 test]# grep -v ^$ /tmp/passwd
过滤文件的非空白行：
过滤文件的空白行：
root:x:0:0:root:/root:/bin/bash
pmssed/du/ T\z\**(\:)\(40ox)\ xotoo-- daxb #[4s 9s04ua20100x]
查找包含以root:开头并以:root结尾的字串行：
root:x:0:0:root:/root:/bin/bash
查找包含两个root的行（注意，grep在使用\()过滤时，匹配条件必须使用引号）：
avahi-autoipd:x:170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin
ftp:x:14:50:FTPUser:/var/ftp:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
halt:x:7:0:halt:/sbin:/sbin/halt
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
root:x:0:0:root:/root:/bin/bash
[root@centos6~]#grep --color'0\{1,2\1'/tmp/passwd
查找数字0出现1次、2次的行：
halt:x:7:0:halt:/sbin:/sbin/halt
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
pmssed/du/ [u1/utqs xotoo-- daxb #[ gsoooox]
查找sbin/后面不跟n的行：
root:x:0:0:root:/root:/bin/bash
查找以bash结尾的行：
root:x:0:0:root:/root:/bin/bash
pmssed/du/ 40ox xoto-- daxo #[ gsou0o0x]
查找以root开头的行：
第3章自动化运维
---
## Page 138
列出了POSIX字符集规范。
的正则规范帮助我们解决了语系问题，另外，POSIX的表达方式也比较接近于自然语言。表3-8
系列规范组成的，有些类似于ISO国家标准规范，这里仅介绍POSIX正则表达式规范，POSIX
是中文或其他语言怎么办？所以，a~z仅针对的是英语语系中的所有字母，POSIX其实是由一
则。例如，在基本正则表达式中可以使用a~z来匹配所有的字母，但如果我们需要匹配的对象
表3-7
{n,m}
Linux运维之道
3.6.3POSIX规范
3.6.2
122
由于基本正则表达式会有语系的问题，所以这里我们需要了解POSIX规范的正则表达式规
查找包含root或者admin的行：
查找包含至少一个0的行：
由于输出信息与基本正则表达式类似，这里仅写出命令，不再打印输出信息。
2．扩展正则表达式案例
表3-7列出了扩展正则表达式及其对应的含义。
1.扩展正则表达式及其含义
[root@centos6 ~]# egrep --color 0+'/tmp/passwd
查找数字0出现1次和2次的行：
扩展正则表达式（ExtendedRegularExpression）
字符
匹配正则集合
匹配逻辑或者，即匹配前或后的字串
匹配前一个字符出现零次或一次
匹配前一个字符出现一次或多次
等同于基本正则表达式的\{n，m\}
含义
---
## Page 139
看几个简单的例子。
匹配the在中间的单词，如 atheist)。其中，\b 等同于[alnum:]，\B 等同于[^[:alnum:]]。接下来
用\bthe\b来匹配单词，但不会匹配then）、\B（与\b为反义词，\Bthe\B不会匹配单词the，仅会
匹配单词的开始或结尾，例如，then，hello theworld.字串每个单词的前后都有一个b，可以使
下面通过几个简单的例子来说明用法（由于过滤输出的内容较多，以下仅列出部分输出)。
[alnum:]
表3-8
3.6.4GNU规范
[:punct:]
[xdigit:]
[digit:]
[:cntrl:]
[:alpha:]
在Linux中的GNU软件一般还会支持转义元字符，这些转义元字符包括：\b（边界字符，
Linux允许通过方括号使用POSIX标准规则，如[:alnu:]]将匹配任意单个字母和数字字符。
avahi:x:70:70:AvahmDNS/DNS-SD Stack:/var/run/avahi-daemon:/sbin/nologin
vcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologin
ftp:x:14:50:FTPUser:/var/ftp:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
bin x 1 1:bin:/bin:/sbin/nologin
daemon::2:2:daemon
root:x:0:0:root:/root:/bin/bash
daemon:x:2:2:daemon:/sbin:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
root:x:0:0:root:/root:/bin/bash
[root@centos6~]# grep
[root@centos6~]#grep
字符集
标点符号
十六进制数字字符
数字字符
控制字符
字母与数字字符
字母字符
n:/sbin:/sbin
--color
--color
义
[[:punct:]]/tmp/passwd
[[:alpha:]] /tmp/passwd
nologin
[:lower:]
[blank:]
[:space:]
[:upper:]
[print:]
[:graph:]
字符集
大写字符
小写字符
空格与Tab键字符
#匹配i结尾的单词
任何产生空白的字符
任何可以显示的字符
非空格字符
第3章自动化运维
含义
123
---
## Page 140
指令是第一个非“_”开头的参数，具体语法格式如下。
容进行处理并输出结果，默认输出至标准输出（即屏幕上）。Sed工作流程如图3-1所示。
space），所有的指令操作都是在模式空间中进行的，然后Sed根据相应的指令对模式空间中的内
默认并不直接修改源文件，而是将读入的内容复制到缓冲区中，我们称之为模式空间（patterm
后输出，所以 Sed更适合于处理大数据文件。首先，Sed 通过文件或管道读取文件内容，但 Sed
件做统一修改时，你会感受到Sed的魅力！Sed通过一次仅读取一行内容来对某些指令进行处理
3
Linux运维之道
3.7.1
3.7.2Sed基本语法格式
124
用法：sed [选项]..{脚本指令}[输入文件]..
Sed 从文件中读取数据，如果没有输入文件，则默认对标准输入进程数据进行处理，脚本
Sed是一款流编辑工具，用来对文本进行过滤与替换操作，特别是当你想要对几十个配置文
选项：--version
daemon x:2 2 daemon:/sbin:/sbin/nologin
root:x:0 0 root:/root:/bin/bash
 Sed
Sed简介
-n,--quiet,--silent
--help
后，将自动打印模式空间中的内容，该选项可以屏蔽自动打印。
静默输出，默认情况下，sed程序在所有的脚本指令执行完毕
显示帮助文档。
显示 sed版本。
Sed操作指令
Sed工作流程图
模式空间
图3-1
---
## Page 141
警告
空格会产生错误。
以对多行操作），命令也可以用花括号进行组合，使命令序列可以作用于同一个地址。
表示替换指令。sed脚本指令的基本格式是：[地址]命令（有些命令仅可以对一行操作，有些可
3.7.3Sed入门范例
下面的test.txt为操作样本源文件（注意有若干空白行），介绍Sed的用法。
第一个命令可以和左花括号在同一行，但右花括号必须单独处于一行。此外，命令后添加
Sed通过特定的脚本指令对文件进行处理，这里就简单介绍几个脚本指令操作作为Sed程
NETMASK=255.255.255.0
IPADDR=192.168.0.1
BOOTPROTO=static
DEVICE=etho
command3
commandl
address{
1．基本格式范例
[root@centos6 ~]# cat test.txt
command2
-u,--unbuffered
-s,--separate
--posix
-i,--in-place
-f script-file
-IN