9,022
2,374
1,460
4,399
5,064
5,533
9,890
1,946
752
7.95%
3.62%
11,319
7,247
1,343
8,767
2,140
1,430
4,381
5,047
5,335
10,065
1,933
746
8,925
5,841
1,117
7,629
1,739
1,428
4,252
5,047
5,484
9,722
1,761
745
10,532
5,476
1,327
8,773
2,073
1,456
4,336
5,012
5,252
9,627
1,914
752
8.39% 20.01%
5.27% 11.77%
13.03%
6.07%
TABLE V: Arithmetic mean edge coverage of AFL-based seed
schedulers on 12 FuzzBench programs for 24 hours over 10 runs.
TABLE VI: Tested Programs in Bug Finding Experiments.
Subjects
xmllint
miniunz
readpng
djpeg
size
readelf -a
nm -C
objdump -D
strip
tiff2pdf
bsdtar -xf
infotocap
Version
libxml2-2.9.7
zlib-1.2.11
libpng-1.6.37
libjpeg-9d
binutils-2.36.1
binutils-2.36.1
binutils-2.36.1
binutils-2.36.1
binutils-2.36.1
tiff-4.3.0
libarchive-3.5.1
ncurses-6.2
Format
XML
ZIP
PNG
JPEG
ELF
ELF
ELF
ELF
ELF
TIFF
TAR
TEXT
# lines
72,630
1,895
3,205
9,204
51,203
29,954
52,763
78,610
59,680
20,387
45,031
23,145
TABLE VII: Overview of bugs discovered in our AFL-based
seed scheduling experiments categorized by type.
Fuzzer
out-of-memory
memory leak
integer overﬂow
AFL
K-Sched Default RarePath RareEdge NewPath SecCov
AFL AﬂFast FairFuzz EcoFuzz Tortoise†
21
22
2
21
24
3
14
20
2
19
21
3
17
19
3
18
20
2
K-Sched Default RarePath RareEdge NewPath
SecCov
AFL
AFL AﬂFast FairFuzz EcoFuzz TortoiseFuzz
Total
† Tortoise denotes TortoiseFuzz.
48
36
43
39
40
45
Fuzzer
freetype
libxml2
lcms
harfbuzz
libjpeg
libpng
openssl
openthread
re2
sqlite
vorbis
zlib
14,188 13,508
10,936
9,295
2,325
2,247
10,061
9,980
2,678
2,513
1,536
1,536
4,863
4,805
5,766
5,704
5,887
5,875
12,081 12,360
2,215
2,195
780
780
Arithmetic mean gain 2.89%
1.00%
Median gain
13,646
8,546
2,160
10,019
2,601
1,535
4,761
5,646
5,790
12,019
2,202
775
4.21%
1.91%
13,486
10,241
2,190
9,804
2,497
1,524
4,788
5,666
5,536
10,648
2,100
778
11,965
8,964
1,892
9,946
2,309
1,528
4,732
5,527
5,774
12,199
2,171
777
4.81% 7.63%
5.34% 2.38%
13,206
9,147
2,162
9,882
2,413
1,528
4,685
5,636
5,758
11,810
2,184
769
5.11%
2.30%
lifetime of
the fuzzing campaign. The consistency of
K-Scheduler’s gain across many different seed schedulers
show the promise of scheduling seeds based on CFG infor-
mation. Moreover, it suggests K-Scheduler can be helpful
independent of a fuzzer as we later explore.
Result 1: K-Scheduler increases feature coverage by
25.89% compared to Entropic and edge coverage by
4.21% compared to the next-best AFL-based seed scheduler
(RarePath), in arithmetic mean on 12 Google FuzzBench
programs.
C. RQ2: Bug Finding
In order to detect memory corruption bugs that do not
necessarily lead to a crash, we compile program binaries
with Address and Undeﬁned Behavior Sanitizers. We then ran
K-Scheduler, Default (i.e., AFL’s default seed scheduler),
RarePath, RareEdge, and NewPath on 12 real-world parsing
programs for 24 hours, a total of 10 times. We could not
run the Libfuzzer-based seed schedulers because the 12 pars-
ing programs are not equipped with a Libfuzzer-compatible
fuzzing harness (i.e., LLVMFuzzerTestOneInput is undeﬁned).
In our 24 hour runs, we found real-world bugs in binutils.
Table VII shows the bug count for each seed scheduling
strategy in terms of integer overﬂow, out of memory and
memory leak bugs,
in arithmetic mean over the 10 runs.
We count bugs with the following procedure based on prior
work [6, 15, 48]. We ﬁrst use AFL-CMin to reduce the number
of crashing inputs. We then further deduplicate the crashing
inputs by ﬁltering them by unique stack traces. We lastly triage
the remaining crashing inputs by manually reviewing their
stack traces and corresponding source code. Our results show
that K-Scheduler ﬁnds 3 more bugs than the next best
seed scheduling strategy SecCov (i.e., TortoiseFuzz), which
optimizes for bug-ﬁnding.
Result 2: K-Scheduler discovers 3 more bugs than the
next best seed-scheduling strategy (SecCov).
D. RQ3: Runtime Overhead
In this
experiment, we measure
the overhead that
K-Scheduler adds to a fuzzer. The runtime overhead can
be classiﬁed into two components: a fuzzer maintenance
(i.e., record hit count of edges and compute seeds’ energy)
and a fuzzer invoking K-Scheduler (i.e., construct edge
horizon graph and perform Katz centrality analysis) for seed
scheduling. To measure these overheads, we run our modiﬁed
versions (see Section V) of AFL and Libfuzzer against all 12
FuzzBench programs for 24 hours, recording the total time
they spend in maintenance and separately the total time spent
in computing Katz centrality over the edge horizon graph in
the standalone process. We repeat this experiment 10 times
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
92202
freetype
harfbuzz
openthread
libjpeg
lcms
libpng
re2
sqlite
openssl
vorbis
zlib
libxml2
Fig. 5: The arithemic mean feature coverage of Libfuzzer-based seed schedulers running for 24 hours and one standard deviation
error bars over 10 runs. Default refers to the default seed scheduler in Libfuzzer.
to minimize variance. Table VIII summarizes the runtime
overhead added to AFL’s and LibFuzzer fuzzing processes in
terms of fuzzer maintenance and graph centrality analysis.
The overhead of fuzzer maintenance is 0.28% for AFL
and 1.74% for Libfuzzer, in arithmetic mean over the 12
FuzzBench programs. The graph analysis overhead is minimal,
adding 0.15% in arithmetic mean over the 12 FuzzBench
programs. We believe these small graph analysis overheads
exist because Katz centrality can be efﬁciently computed with
the power method (Section II) and the edge horizon graph
is cached and updated instead of being constructed from
scratch each time. For clarity, we did not report graph analysis
overheads for AFL and Libfuzzer separately because they use
the same standalone process, so the overheads were nearly
indistinguishable. Moreover, the difference in overheads per-
program is explained by the variance in the target program’s
CFG size (i.e., number of nodes).
TABLE VIII: Runtime overhead from K-Scheduler in Lib-
fuzzer and AFL-based seed scheduling.
Programs
freetype
libxml2
lcms
harfbuzz
libjpeg
libpng
openssl
openthread
re2
sqlite
vorbis
zlib
Arithmetic mean
Median
Nodes # Graph Analysis Fuzzer Maintenance
AFL
LibFuzzer
38,352
96,732
13,081
21,066
16,508
7,215
57,729
27,263
12,020
70,703
9,494
1,882
31,004
18,787
0.20%
0.22%
0.06%
0.11%
0.04%
0.02%
0.25%
0.09%
0.03%
0.75%
0.04%
0.02%
0.15%
0.08%
1.71%
2.53%
0.92%
2.25%
0.79%
0.53%
2.43%
1.48%
1.39%
3.12%
0.80%
2.96%
1.74%
1.60%
0.23%
0.39%
0.08%
0.17%
0.06%
0.03%
0.67%
0.24%
0.26%
0.41%
0.55%
0.29%
0.28%
0.25%
E. RQ4: Impact of Design Choices
Result 3: K-Scheduler adds at most 1% overhead from
graph analysis and at most 2% overhead for fuzzer mainte-
nance.
We conduct experiments to measure the performance effect