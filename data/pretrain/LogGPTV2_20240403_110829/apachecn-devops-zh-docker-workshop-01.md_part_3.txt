    ```
    user@developmentMachine:~/
    ```
14.  现在创建第二个名为`ubuntu2`的容器，它也将在你的 Docker 环境中使用`Ubuntu 19.04`映像:
    ```
    $ docker run -i -t -d --name ubuntu2 ubuntu:19.04
    ```
15.  Run `docker exec` to access a shell of this second container. Remember to use the name or container ID of the new container you created. Likewise, access a Bash shell inside this container, so the final argument will be `/bin/bash`:
    ```
    $ docker exec -it ubuntu2 /bin/bash
    ```
    您应该观察到您对 Bash 根外壳的提示更改，类似于它对`Ubuntu 18.04`容器映像的操作:
    ```
    root@875cad5c4dd8:/#
    ```
16.  在`ubuntu2`容器实例中运行`echo`命令，编写一个类似`hello-world`类型的问候语:
    ```
    root@875cad5c4dd8:/# echo "Hello-world from ubuntu2!" > hello-world.txt
    ```
17.  Currently, you have two Ubuntu container instances running in your Docker environment with two separate `hello-world` greeting messages in the home directory of the root account. Use `docker ps` to see the two running container images:
    ```
    $ docker ps
    ```
    运行容器的列表应该反映两个 Ubuntu 容器，以及它们被创建以来经过的时间:
    ```
    CONTAINER ID    IMAGE            COMMAND        CREATED
      STATUS              PORTS               NAMES
    875cad5c4dd8    ubuntu:19.04     "/bin/bash"    3 minutes ago
      Up 3 minutes                            ubuntu2
    cfaa37795a7b    ubuntu:18.04     "/bin/bash"    15 minutes ago
      Up 15 minutes                           ubuntu1
    ```
18.  Instead of using `docker exec` to access a shell inside our containers, use it to display the output of the `hello-world.txt` files you wrote by executing the `cat` command inside the containers:
    ```
    $ docker exec -it ubuntu1 cat hello-world.txt
    ```
    输出将显示您在前面步骤中传递到容器中的`hello-world`消息。请注意，一旦完成`cat`命令并显示输出，用户就被移回您的主终端的上下文。这是因为`docker exec`会话只存在于用户正在执行的命令运行的时间内。
    在前面的 Bash shell 示例中，只有当用户使用`exit`命令终止 Bash 时，Bash 才会退出。在本例中，仅显示`Hello world`输出，因为`cat`命令显示输出并退出，结束`docker exec`会话:
    ```
    Hello world from ubuntu1
    ```
    您将看到显示的`hello-world`文件的内容，然后返回到您的主终端会话。
19.  Run the same `cat` command in the `ubuntu2` container instance:
    ```
    $ docker exec -it ubuntu2 cat hello-world.txt
    ```
    与第一个示例类似，`ubuntu2`容器实例将显示先前提供的`hello-world.txt`文件的内容:
    ```
    Hello-world from ubuntu2!
    ```
    如您所见，Docker 能够在两个容器上分配一个交互会话，执行命令，并在我们运行的容器实例中直接返回输出。
20.  In a similar manner to that you used to execute commands inside our running containers, you can also stop, start, and restart them. Stop one of your container instances using the `docker stop` command. In your terminal session, execute the `docker stop` command, followed by the name or container ID of the `ubuntu2` container:
    ```
    $ docker stop ubuntu2
    ```
    该命令不应返回任何输出。
21.  Use the `docker ps` command to view all running container instances:
    ```
    $ docker ps
    ```
    输出将显示`ubuntu1`容器启动并运行:
    ```
    CONTAINER ID    IMAGE           COMMAND        CREATED
      STATUS              PORTS               NAMES
    cfaa37795a7b    ubuntu:18.04    "/bin/bash"    26 minutes ago
      Up 26 minutes                           ubuntu1
    ```
22.  Execute the `docker ps -a` command to view all container instances, regardless of whether they are running, to see your container in a stopped state:
    ```
    $ docker ps -a
    ```
    该命令将返回以下输出:
    ```
    CONTAINER ID     IMAGE            COMMAND         CREATED
      STATUS                      PORTS             NAMES
    875cad5c4dd8     ubuntu:19.04     "/bin/bash"     14 minutes ago
      Exited (0) 6 seconds ago                      ubuntu2
    ```
23.  Use the `docker start` or `docker restart` command to restart the container instance:
    ```
    $ docker start ubuntu2
    ```
    该命令将不会返回任何输出，尽管 Docker 的某些版本可能会显示容器标识。
24.  Verify that the container is running again by using the `docker ps` command:
    ```
    $ docker ps
    ```
    请注意，`STATUS`显示此容器仅启动了一小段时间(`1 second`)，尽管容器实例是在 29 分钟前创建的:
    ```
    CONTAINER ID    IMAGE           COMMAND         CREATED
      STATUS              PORTS               NAMES
    875cad5c4dd8    ubuntu:19.04    "/bin/bash"     17 minutes ago
      Up 1 second                             ubuntu2
    cfaa37795a7b    ubuntu:18.04    "/bin/bash"     29 minutes ago
      Up 29 minutes                           ubuntu1
    ```
    在这种状态下，您可以尝试在这些容器中启动、停止或执行命令。
25.  The final stage of the container management life cycle is cleaning up the container instances you created. Use the `docker stop` command to stop the `ubuntu1` container instance:
    ```
    $ docker stop ubuntu1
    ```
    尽管 Docker 的某些版本可能会返回容器标识，但该命令不会返回任何输出。
26.  执行相同的`docker stop`命令停止`ubuntu2`容器实例:
    ```
    $ docker stop ubuntu2
    ```
27.  When container instances are in a stopped state, use the `docker rm` command to delete the container instances altogether. Use `docker rm` followed by the name or container ID to delete the `ubuntu1` container instance:
    ```
    $ docker rm ubuntu1
    ```
    尽管 Docker 的某些版本可能会返回容器标识，但该命令不会返回任何输出。
    在`ubuntu2`容器实例上执行相同的步骤:
    ```
    $ docker rm ubuntu2
    ```
28.  执行`docker ps -a`查看所有容器，即使是处于停止状态的容器。您会发现停止的容器不再存在，因为它们已经被我们之前的命令删除了。您也可以删除`hello-world`容器实例。使用从`docker ps -a`输出中获取的容器标识删除`hello-world`容器:
    ```
    $ docker rm b291785f066c
    ```
29.  To completely reset the state of our Docker environment, delete the base images you downloaded during this exercise as well. Use the `docker images` command to view the cached base images:
    ```
    $ docker images
    ```
    本地缓存中的 Docker 映像和所有相关元数据的列表将显示:
    ```
    REPOSITORY     TAG        IMAGE ID        CREATED         SIZE
    ubuntu         18.04      4e5021d210f6    4 weeks ago     64.2MB
    ubuntu         19.04      c88ac1f841b7    3 months ago    70MB
    hello-world    latest     bf756fb1ae65    3 months ago    13.3kB
    ```
30.  Execute the `docker rmi` command followed by the image ID to delete the first image ID:
    ```
    $ docker rmi 4e5021d210f6
    ```
    与`docker pull`类似，`rmi`命令将删除每个映像和所有关联的图层:
    ```
    Untagged: ubuntu:18.04
    Untagged: ubuntu@sha256:bec5a2727be7fff3d308193cfde3491f8fba1a2b
    a392b7546b43a051853a341d
    Deleted: sha256:4e5021d210f65ebe915670c7089120120bc0a303b9020859
    2851708c1b8c04bd
    Deleted: sha256:1d9112746e9d86157c23e426ce87cc2d7bced0ba2ec8ddbd
    fbcc3093e0769472
    Deleted: sha256:efcf4a93c18b5d01aa8e10a2e3b7e2b2eef0378336456d86
    53e2d123d6232c1e
    Deleted: sha256:1e1aa31289fdca521c403edd6b37317bf0a349a941c7f19b
    6d9d311f59347502
    Deleted: sha256:c8be1b8f4d60d99c281fc2db75e0f56df42a83ad2f0b0916
    21ce19357e19d853
    ```
    对每个要删除的映像执行此步骤，替换为不同的映像标识。对于您删除的每个基础映像，您将看到所有映像图层都被取消标记并随之删除。
定期清理 Docker 环境非常重要，因为频繁构建和运行容器会随着时间的推移导致大量硬盘使用。现在，您已经知道如何在本地开发环境中运行和管理 Docker 容器，您可以使用更高级的 Docker 命令来了解容器的主要流程是如何工作的，以及如何解决问题。在下一节中，我们将看到`docker attach`命令直接访问容器的主进程。
注意
为了简化清理环境的过程，Docker 提供了一个`prune`命令，该命令将自动删除旧的容器和基础映像:
`$ docker system prune -fa`
执行此命令将删除任何未绑定到现有运行容器的容器映像，以及 Docker 环境中的任何其他资源。