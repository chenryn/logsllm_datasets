# Optimized Text

## Code Snippets and Bug Analysis in Libraries

### libtiff
```c
TIFFXYZToRGB(img->cielab, X, Y, Z, &r, &g, &b);
*cp++ = PACK(r, g, b);
pp += 3;
```
**Figure 6. Code snippets of libtiff**

### libpng
We identified two previously unknown bugs in libpng. The developers promptly patched these bugs within 24 hours and issued a security advisory on their website [12]. The CVE identifiers for these vulnerabilities are CVE-2015-7981 and CVE-2015-8540.

The execution process of `pngtest` reading the file `pngtest.png` is divided into nine phases. The bugs were found in phases 3 and 5. We will use CVE-2015-8540 as an example. This vulnerability is a buffer overflow, which can potentially leak sensitive information in memory if exploited by an attacker. The bug was discovered in libpng version 1.2.54 but affects other versions such as 1.2.55, 1.4.18, and 1.5.25. The vulnerability is located in the `png_check_keyword` function in `pngwutil.c`.

**Figure 7. Code snippet from libpng affected by CVE-2015-8540**
```c
png_size_t key_len;
png_charp kp, dp;
for (kp = key, dp = *new_key; *kp != '\0'; kp++, dp++) {
    *dp = *kp;
}
kp = *new_key + key_len - 1;
if (*kp == ' ') {
    while (*kp == ' ') {
        *(kp--) = '\0';
        key_len--;
    }
}
```

In phase 5, pbSE detected the bug. There are several loops before the vulnerable code, such as at line 1259. The loop's end condition checks if the byte in `key` is zero, where `key` is derived from the file. During symbolic execution, these are symbolic values, leading to path explosion. KLEE struggles to exit the loop in a limited time, thus failing to cover the subsequent code.

Another bug found by pbSE is a memory out-of-bounds read, located in the `png_convert_to_rfc1123` function in `png.c`. An attacker can exploit this by forging `tIME` chunk data in a PNG image to access sensitive memory. This bug affects several versions of libpng, including 1.0.X before 1.0.64, 1.2.X before 1.2.54, and 1.4.X before 1.4.17.

**Figure 8. Code snippet from libpng affected by CVE-2015-7981**
```c
static PNG_CONST char short_months[12][4] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
...
png_snprintf6(png_ptr->time_buffer, 29, "%d %s %d %02d:%02d:%02d +0000", ptime->day % 32, short_months[(ptime->month-1) % 12], ptime->year, ptime->hour % 24, ptime->minute % 60, ptime->second % 61);
```

When the month value in the `tIME` chunk is set to zero, the index value of the `short_months` array becomes -1, causing a memory out-of-bounds read.

### libdwarf
libdwarf is an open-source library used to inspect DWARF debug information in object files. In our tests, we used version libdwarf-20151114, which contains 53,857 lines of C code. We used `dwarfdump`, provided by the project, as the test driver. We found ten previously unknown bugs, including seven memory out-of-bounds reads, two memory out-of-bounds writes, and one null pointer reference. Five of these bugs have been assigned CVE identifiers.

### tcpdump
In testing `tcpdump`, we did not find any new bugs. This is likely because `tcpdump` primarily captures network packets without performing complex analysis, and the data is simply printed. Additionally, pbSE's handling of network-related operations is limited.

## Related Work

### Dynamic Symbolic Execution
Dynamic Symbolic Execution (DSE) improves upon traditional symbolic execution by combining concrete and symbolic execution. Examples include concolic testing and Execution Generate Testing (EGT) [5]. Early applications of concolic testing, such as DART [13] and CUTE [28], explore all possible paths and check for errors by combining dynamic test case generation with random testing. EXE [4] and KLEE [3] use EGT, mixing concrete and symbolic execution and providing a bit-level accurate memory model and strong support for external environment interactions.

Path explosion remains a significant challenge in DSE. As programs become more complex, it is impractical to explore all paths. Various heuristic strategies have been developed to address this, such as Hybrid Concolic Testing [20], SAGE [14], and ZESTI [8].

Loops, especially unbounded ones, can cause an enormous number of paths to be explored. Bounded iteration and search-guiding heuristics are commonly used but may not cover all branches or handle different loops well. For example, [1] uses a weighted control flow graph to guide symbolic execution, and [35] employs a fitness-guided search strategy to choose the best path.

Hybrid fuzzers like Driller [32] and MoWF [23] combine fuzzing and concolic execution. Our approach, pbSE, focuses on using program phase information to guide symbolic execution, making it orthogonal to these hybrid fuzzers.

### Program Phases
Program execution can be characterized by different phases. Sherwood [29] defines a phase as a grouping of execution codes with similar behavior. Each phase can be considered a specific function. Phase information is often used in hardware simulation research, such as ADORE [9], which optimizes BLAST performance at runtime.

Information gathered during execution intervals, such as IPC, branch miss rate, and cache miss rate, can be used to group phases. eDoctor [19] divides phases based on resource usage to capture app behavior and power consumption. BBV techniques [10] provide higher sensitivity and more stable phases. Our research combines BBV and code coverage to detect trap phases more accurately.

Both phase information and symbolic execution have been extensively used in research, but their combination is novel. The pbSE approach works well for programs that progress in pipelined stages, each consuming independent input chunks. Symbolic execution often gets stuck in one stage due to path explosion. pbSE helps by detecting pipeline stages and guiding symbolic execution to deeper stages.

However, identifying program phases in non-deterministic execution, such as in device drivers, can be challenging. DDT [17] mitigates polling loops in device drivers through static analysis, and SymDrive [26] prioritizes paths that reach the return instruction of a function.

## Conclusion
Based on extensive experiments, we found that trap phases often prevent DSE from reaching deeper code. To address this, we proposed the phase-based symbolic execution (pbSE) approach. We implemented pbSE using KLEE and tested it on several Linux tools and libraries. The results are encouraging: pbSE covers more code and detects more bugs, finding 21 previously unknown bugs, seven of which have been assigned CVE identifiers.

## Acknowledgements
We thank Zhe Wang, Jianjun Li, and the anonymous referees for their valuable suggestions and comments. This research is supported by the National Natural Science Foundation of China (NSFC) under grant 61332009, the Beijing Municipal Science & Technology Commission Program under grant D161100001216002, and H863-015. Dr. Kang Li’s effort is partially supported by the National Science Foundation (NSF) under award No. 1319115 and a gift award from Intel Corp.

## References
[1] J. Burnim and K. Sen. Heuristics for scalable dynamic test generation. ASE 2008, 23rd IEEE/ACM International Conference on Automated Software Engineering, Proceedings, 2008.
[2] C. Cadar. Klee llvm execution engine. https://klee.github.io/, 2016.
[3] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. OSDI, 2008.
[4] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler. EXE: Automatically Generating Inputs of Death. CCS, 2006.
[5] C. Cadar and K. Sen. Symbolic execution for software testing: three decades later. Communications of the ACM, pages 1–8, 2013.
[6] V. Chipounov, V. Kuznetsov, and G. Candea. The S2E Platform. ACM Transactions on Computer Systems (TOCS), pages 1–49, Feb. 2012.
[7] H. Cui, G. Hu, J. Wu, and J. Yang. Verifying systems rules using rule-directed symbolic execution. Proceedings of the eighteenth international conference on Architectural support for programming languages and operating systems (ASPLOS), page 329, 2013.
[8] P. Dan Marinescu and C. Cadar. make test-zesti: A symbolic execution solution for improving regression testing. ICSE, pages 716–726, June 2012.
[9] A. Das, J. Lu, H. Chen, J. Kim, P. C. Yew, W. C. Hsu, and D. Y. Chen. Performance of runtime optimization on BLAST. Proceedings of the 2005 International Symposium on Code Generation and Optimization, CGO 2005, 2005:86–95, 2005.
[10] A. S. Dhodapkar and J. E. Smith. Comparing Program Phase Detection Techniques. Proceedings of the 36th Annual International Symposium on Microarchitecture, San Diego, CA, USA, December 3-5, 2003, pages 217–227, 2003.
[11] E. Duesterwald, C. Cas¸caval, and S. Dwarkadas. Characterizing and predicting program behavior and its variability. In Parallel Architectures and Compilation Techniques, 2003. PACT 2003. Proceedings. 12th International Conference on, pages 220–231. IEEE, 2003.
[12] glennrp Rander-Perhron. Png Libpng: reference library. http://www.libpng.org/pub/png/libpng.html, 2015.
[13] P. Godefroid. DART: Directed Automated Random Testing. SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 213–223, 2005.
[14] P. Godefroid, M. Y. Levin, and U. C. Berkeley. Automated Whitebox Fuzz Testing. NDSS, 2008.
[15] W. Jin and A. Orso. BugRedux: Reproducing field failures for in-house debugging. 34th International Conference on Software Engineering (ICSE), pages 474–484, June 2012.
[16] J. C. King. Symbolic execution and program testing. Communications of the ACM, pages 385–394, 1976.
[17] V. Kuznetsov, V. Chipounov, and G. Candea. Testing Closed-Source Binary Device Drivers with DDT. USENIX Annual Technical Conference, (June), 2010.
[18] Y. Li, Z. Su, L. Wang, and X. Li. Steering symbolic execution to less traveled paths. Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA), pages 19–32, 2013.
[19] X. Ma, P. Huang, X. Jin, P. Wang, S. Park, D. Shen, Y. Zhou, L. K. Saul, and G. M. Voelker. eDoctor: Automatically diagnosing abnormal battery drain issues on smartphones. In Proceedings of the 10th USENIX Symposium on Networked Systems Design and Implementation, NSDI 2013, Lombard, IL, USA, April 2-5, 2013, pages 57–70, 2013.
[20] R. Majumdar. Hybrid Concolic Testing. ICSE, 2007.
[21] P. Marinescu and C. Cadar. KATCH: High-coverage testing of software patches. Proceedings of the 9th Joint Meeting on Foundations of Software Engineering (FSE), 2013.
[22] A. One. Smashing the stack for fun and profit. In Phrack magazine volume 49, 1996.
[23] V.-T. Pham, M. Böhm, and A. Roychoudhury. Model-based whitebox fuzzing for program binaries. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, ASE, pages 552–562, 2016.
[24] D. a. Ramos and D. Engler. Under-Constrained Symbolic Execution: Correctness Checking for Real Code. USENIX Security Symposium, pages 49–64, 2015.
[25] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, S. Engineering, G. Grieco, C. I. Franco, I. Científicas, and D. Brumley. Optimizing Seed Selection for Fuzzing. In 23rd USENIX Security Symposium, 2014.
[26] M. J. Renzelmann, A. Kadav, and M. M. Swift. SymDrive: Testing Drivers without Devices. Osdi’12, pages 279–292, 2012.
[27] P. Saxena, P. Poosankam, S. McCamant, and D. Song. Loop-extended symbolic execution on binary programs. pages 225–236. ACM, 2009.
[28] K. Sen, D. Marinov, and G. Agha. Cute: A concolic unit testing engine for C. In Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, ESEC/FSE-13, pages 263–272, New York, NY, USA, 2005. ACM.
[29] T. Sherwood, B. Calder, and S. Diego. Time Varying Behavior of Programs. Technical Report UCSD-CS99-630, pages 1–16, 1999.
[30] T. Sherwood, E. Perelman, and B. Calder. Basic block distribution analysis to find periodic behavior and simulation points in applications. Parallel Architectures and Compilation Techniques, 2001. Proceedings. 2001 International Conference on, (September):3–14, 2001.
[31] T. Sherwood, S. Sair, and B. Calder. Phase tracking and prediction. In 30th International Symposium on Computer Architecture (ISCA) 2003, 9-11 June 2003, San Diego, California, USA, pages 336–347, 2003.
[32] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. NDSS, pages 21–24, 2016.
[33] N. Tillmann and J. de Halleux. Pex: White Box Test Generation for .NET. Proc. TAP, pages 134–153, 2008.
[34] X. Xiao, S. Li, T. Xie, and N. Tillmann. Characteristic studies of loop problems for structural test generation via symbolic execution.