1651
1652
1653
1654
1655
1656
1657
1658
1659
1660 }
(unsigned char)pp[0],
(signed char)pp[1],
(signed char)pp[2],
&X, &Y, &Z);
}
cp += toskew;
pp += fromskew;
}
TIFFXYZToRGB(img->cielab, X, Y, Z, &r, &g, &b);
*cp++ = PACK(r, g, b);
pp += 3;
Fig. 6. Code snippets of libtiff
We ﬁnd 2 unknown bugs in libpng. Its developer patches
the bug within 24 hours, and issued a warning of important
threat on their website[12]. The CVEIDs are CVE-2015-7981
and CVE-2015-8540.
The execution process in which pngtest reads the ﬁle
pngtest.png is divided into 9 phases, and the bugs we ﬁnd are
in phase 3 and 5. Here CVE-2015-8540 is taken as example.
This is a buffer overﬂow, which may leak sensitive information
in memory if exploited successfully by an attacker. This bug
is found in libpng version 1.2.54, but it can also affect other
versions, such as libpng1.2.55, 1.4.18, 1.5.25, etc. The bug is
located in function png check keyword in pngwutil.c, and the
code is shown as Fig 7.
The code mainly includes a loop which reads a byte from
kp (at line 1284) and checks if it is a space; if yes, the code
writes a zero into kp, and kp is decreased by one. This process
is repeated until the byte is not a space. When the ﬁrst byte
of parameter key is a space, a under buffer overﬂow occurs(at
line 1290).
It is in phase 5 that pbSE detects the bug. There are several
141
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
1231 png_size_t /* PRIVATE */
1232 png_check_keyword(png_structp png_ptr,
png_charp key, png_charpp new_key)
1233 {
1234
1235
......
1259
1260
......
1279
1283
1284
1285
1288
1289
1290
1291
1292
1293
png_size_t key_len;
png_charp kp, dp;
for (kp = key, dp = *new_key; *kp != ’\0’; kp++, dp++)
{
}
kp = *new_key + key_len - 1;
if (*kp == ’ ’)
{
while (*kp == ’ ’)
{
*(kp--) = ’\0’;
key_len--;
}
}
Fig. 7. Code snippets of libpng affected by CVE-2015-8540
loops before the vulnerable code, such as line 1259. The end
condition of the loop is to check if the byte in key is zero,
while the value of key is obtained from the ﬁle. Therefore
when symbolic execution is performed, these are symbolic
values, which result in path explosion. It is difﬁcult for KLEE
to jump out of the loop in limited time to cover the code
behind.
Another bug found by pbSE is a memory-out-of-bound-
read, which is located in function png convert to rfc1123
in png.c, The attacker can obtain sensitive information in
memory by counterfeiting tIME chunk data in a png image.
The bug affects several versions of libpng, including 1.0.X
before 1.0.64, 1.2. 1.2.x before 1.2.54, and 1.4.x before 1.4.17,
etc. When the month value of tIME chunk is set to be zero, the
index value of the array “short month” will be -1, therefore
trigger a memory-out-of-bound-read. The vulnerable code is
shown as Fig 8.
Others: libdwarf is an open source library inspecting the
DWARF debug information in object ﬁle. The version we use
in test is libdwarf-20151114, with 53857 lines of C code. We
use dwarfdump provided by the project as test driver, and use
the same seeds as the one in testing readelf. 10 unknown bugs
are found in libdwarf, including 7 memory-out-of-bound-read
errors, 2 memory-out-of-bound-write errors, and 1 null pointer
reference. Of these, 5 have been assigned CVE IDs.
In the test of tcpdump we do not ﬁnd new bugs. This is
because tcpdump is mainly used to capture network packets,
and no complex analysis is performed to network packets. The
data read out are simpled printed. What is more, the other
reason may be that pbSE’s interaction and handling abilities
of network related operations are quite limited.
V. RELATED WORKS
This section introduces research works related to our study
from two aspects: dynamic symbolic execution and program
phase.
514 png_charp PNGAPI
515 png_convert_to_rfc1123(png_structp png_ptr,
png_timep ptime)
516 {
517 static PNG_CONST char short_months[12][4] =
518 {"Jan", "Feb", "Mar", "Apr", "May", "Jun",
519 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
...
540 png_snprintf6(png_ptr->time_buffer, 29,
"%d %s %d %02d:%02d:%02d +0000"
541
542
543
...
ptime->day % 32,
short_months[(ptime->month-1)% 12],
ptime->year, ptime->hour % 24,
ptime->minute % 60,
ptime->second % 61);
Fig. 8. Code snippets of libpng affected by CVE-2015-7981
A. Dynamic Symbolic Execution
Dynamic symbolic execution (DSE) is an improvement
on traditional symbolic execution, which is characterized
mainly by mixing concrete execution and symbolic execution.
Representative examples are concolic testing and Execution
Generate Testing(EGT)[5]. Two early applications of concolic
testing are DART[13] and CUTE[28], which explore all pos-
sible paths and check various errors by combing dynamic test
case generation and random testing. EXE[4] and KLEE[3]
are examples using EGT. They mix concrete execution and
symbolic execution in a way other than concolic testing, and
implement a memory model based on bit-level accuracy while
at the same time providing strong support in interaction with
external environment.
Path explosion remains a major challenge faced by dynamic
symbolic execution. As programs become more powerful and
complex, it is impossible to explore all paths in a program.
To cover as many codes as possible or to cover a speciﬁed
part of code in limited time has become research focus,
which has given birth to many heuristic path search strategies.
Hybrid Concolic Testing[20] is an execution approach which
interleavingly uses random testing and concolic execution
to achieve deep and wide program state space. SAGE[14]
provides a generational search strategy exploring new paths
by generating test cases based on symbolic execution. In
this process the test case is constantly changed to guide the
exploration of different paths. ZESTI[8] explores new paths
that slightly diverge from paths with sensitive instructions
already explored using symbolic execution. In this way more
paths leading to the sensitive instructions will checked, thus
accomplishing thorough testing of them.
Loops (especially unbounded loops) can cause an enormous
or even inﬁnite number of paths to be explored in DSE[34].
Bounded iteration and search-guiding heuristics are the most
widely used loop techniques across various tasks for their
relatively low analysis cost, and yet are incomplete or unsound.
However, bounded iteration may cause certain subsequent
branches not
to be covered, and search-guiding heuristics
may not handle different loops well. For examples, [1] uses
weighted control ﬂow graph to guide symbolic execution to
142
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
cover unexplored code. The ﬁtness guided search strategy[35]
chooses the best path using a ﬁtness function to calculate
the distance to a speciﬁed test target. Subpath Guided Path
search strategy[18] makes decisions guided by information
from explored paths, which proved better guidance.
Driller[32] and MoWF[23] are two effective hybrid fuzzers
which detecting bugs combining fuzzing and concolic execu-
tion. Approaches such as Driller use symbolic execution to
guide fuzzing efforts (which are concrete execution), whereas
our approach focuses on using information obtained through
concrete execution, such as program phase information, to
guide symbolic execution. Therefore, our pbSE approach is
orthogonal to Driller and those previous hybrid fuzzers.
B. Program Phase
The execution of a program is characterized by different
phases. As early as 1999 Sherwood started a research about
program phase[29]. In his opinion, program phase can be
regarded as time varying behavior of the program; a phase
can be obtained by grouping execution codes with identical or
similar behavior[30], [10], [11]. The execution of program can
be divided into a series of phases, with each phase different
from others. On account of the different behavior of various
phases, each phase can be regarded as a speciﬁc function[31].
Phase is often used in hardware simulation researches, in
which simulation of representative phases can be used instead
of the entire execution. ADORE[9] uses phase information to
test the performance bottleneck of BLAST, and optimizes it
at runtime.
It is a common practice to gather information during ex-
ecution intervals, which are then grouped into phases. The
gathered information can be IPC, branch miss rate, cache
miss rate, value misprediction, conditional branch counts and
basic block vectors, etc.[29], [30], [10], [11]. It can even be
resource type vector, eDoctor[19] divides phases according
to resource usage and captures an app’s behavior on this
basis to obtain information on power consumption of Apps.
In [10], the authors compare phase division techniques using
instruction working sets, basic block vectors and conditional
branch counts. They ﬁnd that BBV techniques perform better
than other techniques providing higher sensitivity and more
stable phases. In our research, a technique combining BBV and
code coverage is used to more accurately detect trap phases.
Both phase information and symbolic execution have been
extensively employed in many researches. But to our knowl-
edge, the combination of them is the ﬁrst proposal in literature.
The pbSE approach works well for programs that inherently
progress in pipelined stages. Each stage consume a chunk of
input that is independent from inputs from those consumed
by other stages. The program leaves a stage and enters the
next only when a certain condition is met, such as requiring a
speciﬁc header ﬁeld. Symbolic execution often get stuck with
in one of the stage due to the path explosion problem. The
pbSE approach helps by detecting the pipeline stages (with
maps to the phases detected by our algorithm), and explicitly
guide the symbolic execution to deeper pipeline stages.
However, program phases could not be easy to identify on
nondeterministic execution, like for example in device drivers.
DDT[17] mitigates the problem of polling loops (which really
stress symbolic execution of device drivers) in device drivers
through static analysis (loop-analysis) on disassembled driver
code. The approach analyzes the disassembly of the target
drivers and reports a list of paths which the symbolic execution
engine should kill to enable the progress in the execution.
SymDrive[26] uses favor-success path-selection algorithm that
prioritizes paths which arrive before at the return instruction
of the function.
VI. CONCLUSION
On the basis of extensive experiments, we ﬁnd that trap
phases of programs often prevent dynamic symbolic execution
from going deeper. To solve this problem, we propose the
phase-based symbolic execution approach to guide symbolic
execution to reach individual phases. We have implemented
pbSE based on the state-of-the-art symbolic execution engine
KLEE. In our experiments, pbSE is used to test several
commonly used Linux tools and libraries. The reuslts are quite
encouraging: pbSE can cover more new code and detect more
bugs. Moreover, 21 unknown bugs, 7 out of which have been
assigned CVE IDs.
VII. ACKNOWLEDGEMENTS
We would like to thank Zhe Wang, Jianjun Li, and the
anonymous referees, for their valuable suggestions and helpful
comments. This research is supported by the National Natural
Science Foundation of China (NSFC) under grant 61332009,
the Beijing Municipal Science & Technology Commission
Program under grant D161100001216002, and H863-015. Dr.
Kang Li’s effort is partially supported by National Science
Foundation (NSF) under award No. 1319115 and a gift award
from Intel Corp.
REFERENCES
[1] J. Burnim and K. Sen. Heuristics for scalable dynamic test generation
ASE 2008, 23rd IEEE/ACM International Conference on
(Crest).
Automated Software Engineering, Proceedings, 2008.
[2] C. Cadar. Klee llvm execution engine. https://klee.github.io/, 2016.
[3] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and Automatic
Generation of High-Coverage Tests for Complex Systems Programs.
OSDI, 2008.
[4] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler.
EXE : Automatically Generating Inputs of Death. CCS, 2006.
[5] C. Cadar and K. Sen. Symbolic execution for software testing: three
decades later. Communications of the ACM, pages 1–8, 2013.
[6] V. Chipounov, V. Kuznetsov, and G. Candea. The S2E Platform. ACM
Transactions on Computer Systems (TOCS), pages 1–49, Feb. 2012.
[7] H. Cui, G. Hu, J. Wu, and J. Yang. Verifying systems rules using rule-
directed symbolic execution. Proceedings of the eighteenth international
conference on Architectural support for programming languages and
operating systems (ASPLOS), page 329, 2013.
[8] P. Dan Marinescu and C. Cadar. make test-zesti: A symbolic execution
solution for improving regression testing. ICSE, pages 716–726, June
2012.
[9] A. Das, J. Lu, H. Chen, J. Kim, P. C. Yew, W. C. Hsu, and D. Y. Chen.
Performance of runtime optimization on BLAST. Proceedings of the
2005 International Symposium on Code Generation and Optimization,
CGO 2005, 2005:86–95, 2005.
143
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
2013 28th IEEE/ACM International Conference on Automated Software
Engineering, ASE 2013 - Proceedings, pages 246–256, 2013.
[35] T. Xie, N. Tillmann, J. de Halleux, and W. Schulte. Fitness-guided
path exploration in dynamic symbolic execution.
2009 IEEE/IFIP
International Conference on Dependable Systems & Networks, pages
359–368, jun 2009.
[36] C. Zhang, A. Groce, and M. A. Alipour. Using test case reduction and
prioritization to improve symbolic execution. Proceedings of the 2014
International Symposium on Software Testing and Analysis - ISSTA 2014,
pages 160–170, 2014.
[10] A. S. Dhodapkar and J. E. Smith. Comparing Program Phase Detection
Techniques. Proceedings of the 36th Annual International Symposium
on Microarchitecture, San Diego, CA, USA, December 3-5, 2003, pages
217–227, 2003.
[11] E. Duesterwald, C. Cas¸caval, and S. Dwarkadas. Characterizing and
predicting program behavior and its variability. In Parallel Architectures
and Compilation Techniques, 2003. PACT 2003. Proceedings. 12th
International Conference on, pages 220–231. IEEE, 2003.
[12] glennrp Rander-Perhron.
Png
http://www.libpng.org/pub/png/libpng.html, 2015.
Libpng:
reference
library.
[13] P. Godefroid. DART : Directed Automated Random Testing. SIG-
PLAN Conference on Programming Language Design and Implemen-
tation(PLDI), pages 213–223, 2005.
[14] P. Godefroid, M. Y. Levin, and U. C. Berkeley. Automated Whitebox
Fuzz Testing. NDSS, 2008.
[15] W. Jin and A. Orso. BugRedux: Reproducing ﬁeld failures for in-house
34th International Conference on Software Engineering
debugging.
(ICSE), pages 474–484, June 2012.
[16] J. C. King. Symbolic execution and program testing. Communications
of the ACM, pages 385–394, 1976.
[17] V. Kuznetsov, V. Chipounov, and G. Candea. Testing Closed-Source Bi-
nary Device Drivers with DDT. USENIX Annual Technical Conference,
(June), 2010.
[18] Y. Li, Z. Su, L. Wang, and X. Li. Steering symbolic execution to less
traveled paths. Proceedings of the 2013 ACM SIGPLAN International
Conference on Object Oriented Programming Systems Languages &
Applications(OOPSLA), pages 19–32, 2013.
[19] X. Ma, P. Huang, X. Jin, P. Wang, S. Park, D. Shen, Y. Zhou, L. K.
Saul, and G. M. Voelker. edoctor: Automatically diagnosing abnormal
battery drain issues on smartphones. In Proceedings of the 10th USENIX
Symposium on Networked Systems Design and Implementation, NSDI
2013, Lombard, IL, USA, April 2-5, 2013, pages 57–70, 2013.
[20] R. Majumdar. Hybrid Concolic Testing . ICSE, 2007.
[21] P. Marinescu and C. Cadar. KATCH: High-coverage testing of software
the 9th Joint Meeting on Foundations of
patches. Proceedings of
Software Engineering(FSE), 2013.
[22] A. One. Smashing the stack for fun and proﬁt.
In Phrack magazine
volume 49, 1996.
[23] V.-T. Pham, M. B¨ohme, and A. Roychoudhury. Model-based whitebox
fuzzing for program binaries.
In Proceedings of the 31st IEEE/ACM
International Conference on Automated Software Engineering, ASE,
pages 552–562, 2016.
[24] D. a. Ramos and D. Engler. Under-Constrained Symbolic Execution
: Correctness Checking for Real Code. USENIX Security Symposium,
pages 49–64, 2015.
[25] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, S. Engineering,
G. Grieco, C. I. Franco, I. Cient´ıﬁcas, and D. Brumley. Optimizing Seed
Selection for Fuzzing. In 23rd USENIX Security Symposium, 2014.
[26] M. J. Renzelmann, A. Kadav, and M. M. Swift. SymDrive : Testing
Drivers without Devices. Osdi’12, pages 279–292, 2012.
[27] P. Saxena, P. Poosankam, S. McCamant, and D. Song. Loop-extended
symbolic execution on binary programs. pages 225–236. ACM, 2009.
[28] K. Sen, D. Marinov, and G. Agha. Cute: A concolic unit testing engine
for c. In Proceedings of the 10th European Software Engineering Con-
ference Held Jointly with 13th ACM SIGSOFT International Symposium
on Foundations of Software Engineering, ESEC/FSE-13, pages 263–272,
New York, NY, USA, 2005. ACM.
[29] T. Sherwood, B. Calder, and S. Diego. Time Varying Behavior of
Programs. Technical Report UCSD-CS99-630, pages 1–16, 1999.
[30] T. Sherwood, E. Perelman, and B. Calder. Basic block distribution
analysis to ﬁnd periodic behavior and simulation points in applications.
Parallel Architectures and Compilation Techniques, 2001. Proceedings.
2001 International Conference on, (September):3–14, 2001.
[31] T. Sherwood, S. Sair, and B. Calder. Phase tracking and prediction. In
30th International Symposium on Computer Architecture (ISCA) 2003),
9-11 June 2003, San Diego, California, USA, pages 336–347, 2003.
[32] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Driller: Augmenting
Fuzzing Through Selective Symbolic Execution. NDSS, pages 21–24,
2016.
[33] N. Tillmann and J. de Halleux. Pex: White Box Test Generation for
.NET. Proc. TAP, pages 134–153, 2008.
[34] X. Xiao, S. Li, T. Xie, and N. Tillmann. Characteristic studies of
loop problems for structural test generation via symbolic execution.
144
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply.