where the LKMs are not highly needed, we may disable the
loading of the LKMs to prevent the arbitrary code execution
in the kernel privilege. In this case, the attacker would not
be able to map the debug registers into the memory even
she has gained root privilege by tools like SuperSU [37].
Moreover, to prevent the attacker from replacing the stock
kernel with a customized kernel that enables the LKM, the
OEM may add some additional hash/checksums to verify the
kernel image. Note that forbidding the customized kernel does
not necessarily affect ﬂashing a customized ROM, and the
third-party ROM developers can still develop their ROMs
based on the stock kernel.
VII. CONCLUSIONS
In this paper, we perform a comprehensive security analysis
of the ARM debugging features, and summarize the security
implications. For a better understanding of the problem, we
also investigate a series of ARM-based platforms powered by
different SoCs and deployed in various product domains. Our
analysis and investigation expose an attack surface of the ARM
devices via the debugging architecture. To further verify the
implications, we craft a novel attack named NAILGUN which
obtains sensitive information and achieves arbitrary payload
execution in a high-privilege mode from a low-privilege mode
via misusing the debugging features. Our experiments on real
devices with different ARM architectures show that all the
platforms we investigated are vulnerable to the attack. We also
discuss potential countermeasures to our attack from different
layers of the ARM ecosystem to improve the security of the
commercial devices.
VIII. ACKNOWLEDGEMENT
We would like to thank the anonymous reviewers and
Manuel Egele for their valuable comments and feedback.
Special thanks to TieLei Wang for the help on experiments of
iOS devices. We also appreciate ARM, MediaTek, Vasileios
Kemerlis, and David Evans for the insightful discussion about
the project. This work is supported by the National Science
Foundation Grant No. OAC-1738929 and IIS-1724227. Opin-
ions, ﬁndings, conclusions and recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of the US Government.
REFERENCES
[1] A. Abbasi, T. Holz, E. Zambon, and S. Etalle, “ECFI: Asynchronous
control ﬂow integrity for programmable logic controllers,” in Proceed-
ings of the 33rd Annual Computer Security Applications Conference
(ACSAC’17), 2017.
[2] AmishTech, “Motorola e4 plus - More than just a ﬁngerprint reader,”
https://community.sprint.com/t5/Android-Inﬂuence/Motorola-E4-Plus-
More-Than-Just-a-Fingerprint-Reader/ba-p/979521.
[3] Apple, “HomeKit,” https://developer.apple.com/homekit/.
[4] ARM, “Architecture reference manual ARMv7-A and ARMv7-R edi-
tion,” http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi
0406c/index.html.
[5] ——, “ARMv8-A reference manual,” http://infocenter.arm.com/help/in
dex.jsp?topic=/com.arm.doc.ddi0487a.k/index.html.
[6] ——, “CoreSight components technical reference manual,” http://infoce
nter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0314h/index.html.
[7] ——, “DS-5 development studio,” https://developer.arm.com/products
/software-development-tools/ds-5-development-studio.
[8] ——, “Embedded cross trigger,” http://infocenter.arm.com/help/index.
jsp?topic=/com.arm.doc.ddi0314h/Babhjchd.html.
(cid:23)(cid:18)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
[9] ——,
“Embedded trace macrocell
speciﬁcation,”
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0014q/
index.html.
architecture
[10] ——, “Juno ARM development platform SoC technical reference man-
ual,” http://infocenter.arm.com/help/topic/com.arm.doc.ddi0515b/.
[11] ——, “Trusted ﬁrmware,” https://github.com/ARM-software/arm-truste
d-ﬁrmware.
[12] ——, “TrustZone security,” http://infocenter.arm.com/help/index.jsp?to
pic=/com.arm.doc.prd29-genc-009492c/index.html.
[13] Z. B. Aweke, S. F. Yitbarek, R. Qiao, R. Das, M. Hicks, Y. Oren, and
T. Austin, “ANVIL: Software-based protection against next-generation
rowhammer attacks,” in Proceedings of the 21st ACM International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS’16), 2016.
[14] D. Balzarotti, G. Banks, M. Cova, V. Felmetsger, R. Kemmerer,
W. Robertson, F. Valeur, and G. Vigna, “An experience in testing the
security of real-world electronic voting systems,” IEEE Transactions on
Software Engineering, 2010.
[15] F. Brasser, D. Kim, C. Liebchen, V. Ganapathy, L. Iftode, and A.-R.
Sadeghi, “Regulating ARM TrustZone devices in restricted spaces,” in
Proceedings of the 14th Annual International Conference on Mobile
Systems, Applications, and Services (MobiSys’16), 2016.
[16] S. Clark, T. Goodspeed, P. Metzger, Z. Wasserman, K. Xu, and M. Blaze,
“Why (special agent) johnny (still) can’t encrypt: A security analysis of
the APCO project 25 two-way radio system,” in Proceedings of the 20th
USENIX Security Symposium (USENIX Security’11), 2011.
[17] L. Cojocar, K. Razavi, and H. Bos, “Off-the-shelf embedded devices as
platforms for security research,” in Proceedings of the 10th European
Workshop on Systems Security (EuroSec’17), 2017.
[18] N. Corteggiani, G. Camurati, and A. Francillon, “Inception: System-
wide security testing of real-world embedded systems software,” in
Proceedings of the 27th USENIX Security Symposium (USENIX Secu-
rity’18), 2018.
[19] J. Demme, M. Maycock, J. Schmitz, A. Tang, A. Waksman, S. Sethu-
madhavan, and S. Stolfo, “On the feasibility of online malware detection
with performance counters,” in Proceedings of the 40th ACM/IEEE
International Symposium on Computer Architecture (ISCA’13), 2013.
[20] Fingerprints, “FPC1020 touch sensor,” https://www.ﬁngerprints.com/te
chnology/hardware/sensors/fpc1020/.
[21] ——, “Product speciﬁcation FPC1020,” http://www.shenzhen2u.com/d
oc/Module/Fingerprint/710-FPC1020_PB3_Product-Speciﬁcation.pdf.
[22] L. Garcia, F. Brasser, M. H. Cintuglu, A.-R. Sadeghi, O. A. Mohammed,
and S. A. Zonouz, “Hey, my malware knows physics! Attacking PLCs
with physical model aware rootkit,” in Proceedings of 24th Network and
Distributed System Security Symposium (NDSS’17), 2017.
[23] M. Green, L. Rodrigues-Lima, A. Zankl, G. Irazoqui, J. Heyszl, and
T. Eisenbarth, “AutoLock: Why cache attacks on ARM are harder than
You think,” in Proceedings of the 26th USENIX Security Symposium
(USENIX Security’17), 2017.
[24] A. Grush, “Huawei unveils big ambitions with the 6-inch Huawei ascend
mate 7,” https://consumer.huawei.com/nl/press/news/2014/hw-413119/.
[25] L. Guan, P. Liu, X. Xing, X. Ge, S. Zhang, M. Yu, and T. Jaeger,
“TrustShadow: Secure execution of unmodiﬁed applications with ARM
trustzone,” in Proceedings of the 15th Annual International Conference
on Mobile Systems, Applications, and Services (MobiSys’17), 2017.
[26] Hackster, “Raspberry PI IoT projects,” https://www.hackster.io/raspbe
rry-pi/projects.
[27] Hisilicon, “Kirin processors,” http://www.hisilicon.com/en/Products.
[28] Z. Hua, J. Gu, Y. Xia, and H. Chen, “vTZ: Virtualizing ARM
TrustZone,” in Proceedings of the 26th USENIX Security Symposium
(USENIX Security’17), 2017.
[29] Huawei, “Ascend mate 7,” https://consumer.huawei.com/en/support/p
anaged/c5/15/architecture-instruction-set-extensions-programming-ref
erence.pdf.
[34] ——, “System debugger,” https://software.intel.com/en-us/system-stud
io/system-debugger.
[35] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A shared cache attack
that works across cores and deﬁes VM sandboxing–and its application to
AES,” in Proceedings of 36th IEEE Symposium on Security and Privacy
(S&P’15), 2015.
[36] ——, “Cross processor cache attacks,” in Proceedings of the 11th ACM
SIGSAC Symposium on Information, Computer and Communications
Security (AsiaCCS’16), 2016.
[37] J. Jongma, “SuperSU,” https://android.googlesource.com/kernel/msm/
+/9f4561e8173cbc2d5a5cc0fcda3c0becf5ca9c74.
[38] K. Koscher, T. Kohno, and D. Molnar, “SURROGATES: Enabling near-
real-time dynamic analyses of embedded systems,” in Proceedings of the
9th USENIX Workshop on Offensive Technologies (WOOT’15), 2015.
[39] Y. Lee, I. Heo, D. Hwang, K. Kim, and Y. Paek, “Towards a practical
solution to detect code reuse attacks on ARM mobile devices,” in Pro-
ceedings of the 4th Workshop on Hardware and Architectural Support
for Security and Privacy (HASP’15), 2015.
[40] Linaro, “ARM development platform software,” https://releases.linaro.
org/members/arm/platforms/15.09/.
[41] M. Lipp, D. Gruss, R. Spreitzer, C. Maurice, and S. Mangard, “Cache
template attacks: Automating attacks on inclusive last-level caches,”
in Proceedings of
the 24th USENIX Security Symposium (USENIX
Security’15), 2015.
[42] ——, “ARMageddon: Cache attacks on mobile devices,” in Proceedings
of the 25th USENIX Security Symposium (USENIX Security’16), 2016.
[43] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache side-
channel attacks are practical,” in Proceedings of 36th IEEE Symposium
on Security and Privacy (S&P’15), 2015.
[44] S. Mazloom, M. Rezaeirad, A. Hunter, and D. McCoy, “A security
analysis of an in-vehicle infotainment and app platform,” in Proceedings
of the 10th USENIX Workshop on Offensive Technologies (WOOT’16),
2016.
[45] MediaTek, “This chip powers mobile,” https://www.mediatek.com/pro
[46] Microsoft, “Azure sphere,” https://www.microsoft.com/en-us/azure-sp
[47] miniNodes, “ARM servers,” https://www.mininodes.com/.
[48] Motorola, “E4 plus,” https://www.motorola.com/us/products/moto-e-pl
[49] ——, “Nexus 6,” https://support.motorola.com/products/cell-phones/an
droid-series/nexus-6.
[50] Z. Ning and F. Zhang, “Ninja: Towards transparent tracing and debug-
ging on ARM,” in Proceedings of the 26th USENIX Security Symposium
(USENIX Security’17), 2017.
[51] NXP, “i.MX53 multimedia applications processor reference manual,”
https://cache.freescale.com/ﬁles/32bit/doc/ref_manual/iMX53RM.pdf.
[52] ——, “i.MX53 quick start board,” https://www.nxp.com/docs/en/user-g
uide/IMX53QKSRTRQSG.pdf.
[53] OpenOCD, “Open on-chip debugger,” http://openocd.org/.
[54] OpenSSL Software Foundation, “OpenSSL cryptography and SSL/TLS
toolkit,” https://www.openssl.org/.
[55] Packet, “Cloud service,” https://www.packet.net/.
[56] Qualcomm, “Snapdragon processors,” https://www.qualcomm.com/pro
ducts/mobile-processors.
[57] Raspberry PI, “Model B+ on sale now at $35,” https://www.raspberryp
i.org/blog/raspberry-pi-3-model-bplus-sale-now-35/.
[58] Raspberry PI Foundation, “Model B+,” https://www.raspberrypi.org/pr
oducts/raspberry-pi-3-model-b-plus/.
[59] Samsung, “Artik,” https://www.artik.io/.
[60] ——, “Exynos processors,” https://www.samsung.com/semiconductor/
ducts/smartphones.
here/.
us-gen-4.
hones/mate7/.
pensource/.
[30] ——, “Open source release center,” https://consumer.huawei.com/en/o
minisite/exynos/.
[31] IEEE, “Standard for test access port and boundary-scan architecture,”
https://standards.ieee.org/findstds/standard/1149.1-2013.html.
[32] Intel, “64 and IA-32 architectures software developer’s manual,”
https://www.intel.com/content/dam/www/public/us/en/documents/man
uals/64-ia-32-architectures-software-developer-instruction-set-referen
ce-manual-325383.pdf.
[33] ——, “Architecture instruction set extensions and future features
programming reference,” https://software.intel.com/sites/default/files/m
[61] M. A. M. P. Sanjeev Das, Jan Werner and F. Monrose, “SoK: The
challenges, pitfalls, and perils of using hardware performance counters
for security,” in Proceedings of 40th IEEE Symposium on Security and
Privacy (S&P’19), 2019.
[62] R. Sasmal, “Fingerprint scanner: The ultimate security system,” https:
//in.c.mi.com/thread-239612-1-0.html.
[63] Scaleway, “Cloud service,” https://www.scaleway.com/.
[64] W. J. Schultz and H. A. Saladin, “Electronic fuse for semiconductor
devices,” 1985, uS Patent 4,562,454.
(cid:23)(cid:18)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
[65] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz,
“kAFL: Hardware-assisted feedback fuzzing for OS kernels,” in Pro-
ceedings of
the 26th USENIX Security Symposium (USENIX Secu-
rity’17), 2017.
[66] S. Skorobogatov, “Fault attacks on secure chips: From glitch to ﬂash,”
https://www.cl.cam.ac.uk/~sps32/ECRYPT2011_1.pdf, 2011.
[67] Statcounter, “Mobile vendor market share worldwide,” http://gs.statcou
nter.com/vendor-market-share/mobile/worldwide.
[68] H. Sun, K. Sun, Y. Wang, and J. Jing, “TrustOTP: Transforming
smartphones into secure one-time password tokens,” in Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications
Security (CCS’15), 2015.
[69] A. Tang, S. Sethumadhavan, and S. Stolfo, “CLKSCREW: Exposing the
perils of security-oblivious energy management,” in Proceedings of the
26th USENIX Security Symposium (USENIX Security’17), 2017.
[70] C. Williams, “Can’t wait for ARM to power MOST of our cloud
data centers,” https://www.theregister.co.uk/2017/03/09/microsoft_arm
_server_followup/.
[71] Z. Wu, “FPC1020 driver,” https://android.googlesource.com/kernel/ms
m/+/9f4561e8173cbc2d5a5cc0fcda3c0becf5ca9c74.
[72] Xiaomi, “Redmi 6,” https://www.mi.com/global/redmi-6/.
[73] J. Xu, D. Mu, X. Xing, P. Liu, P. Chen, and B. Mao, “Postmortem pro-
gram analysis with hardware-enhanced post-crash artifacts,” in Proceed-
ings of the 26th USENIX Security Symposium (USENIX Security’17),
2017.
[74] J. Zaddach, L. Bruno, A. Francillon, D. Balzarotti et al., “AVATAR: A
framework to support dynamic security analysis of embedded systems’
ﬁrmwares,” in Proceedings of 21st Network and Distributed System
Security Symposium (NDSS’14), 2014.
[75] D. Zhang, “A set of code running on i.MX53 quick start board,” https:
//github.com/finallyjustice/imx53qsb-code.
[76] F. Zhang, K. Leach, A. Stavrou, and H. Wang, “Using hardware features
for increased debugging transparency,” in Proceedings of The 36th IEEE
Symposium on Security and Privacy (S&P’15), 2015, pp. 55–69.
[77] N. Zhang, K. Sun, W. Lou, and Y. T. Hou, “Case: Cache-assisted secure
execution on arm processors,” in Proceedings of 37th IEEE Symposium
on Security and Privacy (S&P’16), 2016.
A. Enabling ETM Trace and Extracting the Trace Stream
APPENDIX
reg_write(ETB_RWD, 0x0);
// Set data write pointer to 0x0
reg_write(ETB_RWP, 0x0);
// Clear up the ETB
for (int i = 0; i < ETB_SIZE; ++i) {
}
// Reset the data read/write pointer to 0x0
reg_write(ETB_RRP, 0x0);
reg_write(ETB_RWP, 0x0);
// Conﬁgure the ETB ﬂush trigger
reg_write(ETB_FFCR, 0x320);
// Enable ETB
reg_write(ETB_CTL, 0x1);
1 void enable_etb() {
2
3
4
5
6
7
8
9
10
11
12
13
14
15 }
16
17 void set_etm_programming_bit(char set) {
18
19
20
21
22
23
24
25
26
27
28
29 }
30
31 void enable_etm() {
32
(set == 0 && (reg & 0x2) == 0x2)) {
reg = reg_read(ETM_SR);
// Set the programming bit according to the parameter
int reg = reg_read(ETM_CR);
reg &= ~0x400;
reg |= set << 10;
reg_write(ETM_CR, reg);
// Wait for the ETM status change
reg = reg_read(ETM_SR);
while ((set == 1 && (reg & 0x2) != 0x2) ||
}
// Set the ETM programming bit to start the conﬁguration
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
(cid:23)(cid:18)(cid:23)
33
34
35
36
37
38
39
40
set_etm_programming_bit(1);
// Clear the ETM power down bit
int reg = reg_read(ETM_CR);
reg &= ~0x1;
reg_write(ETM_CR, reg);
// Set the trigger event to be always triggered
reg_write(ETM_TRIGGER, 0x406f);
// Setup a pair of single address comparator as an address range
comparator
reg_write(ETM_ACVR1, ADDRESS_BEGIN);
reg_write(ETM_ACTR1, 0x1);
reg_write(ETM_ACVR2, ADDRESS_END);
reg_write(ETM_ACTR2, 0x1);
// Conﬁgure instruction trace
// Use address range comparator 1 as ﬁlter
reg_write(ETM_TECR1, 0x1);
// No start and stop control
reg_write(ETM_TSSCR, 0x0);
// No single address comparator for include/exclude
reg_write(ETM_TECR2, 0x0);
// Set the TraceEnable enabling event to be always triggered
reg_write(ETM_TEEVR, 0x6f);
// Conﬁgure data address trace
// Use address range comparator 1 as ﬁlter
reg_write(ETM_VDCR3, 0x1);
// No single address comparator for include/exclude
reg_write(ETM_VDCR1, 0x0);
// ETMVDCR2 no include and exclude for mmd
reg_write(ETM_VDCR2, 0x0);
// Set the ViewData enabling event to be always triggered
reg_write(ETM_VDEVR, 0x6f);
41