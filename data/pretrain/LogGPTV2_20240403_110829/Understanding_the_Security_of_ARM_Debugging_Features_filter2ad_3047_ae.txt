### Optimized Text

#### Preventing Arbitrary Code Execution via LKM Disabling
In scenarios where Loadable Kernel Modules (LKMs) are not essential, we can disable their loading to prevent arbitrary code execution with kernel privileges. Even if an attacker gains root access using tools like SuperSU [37], they would be unable to map the debug registers into memory. Additionally, to prevent the attacker from replacing the stock kernel with a customized one that enables LKMs, the Original Equipment Manufacturer (OEM) can add hash or checksums to verify the integrity of the kernel image. It is important to note that this measure does not necessarily affect the ability to flash a customized ROM, as third-party ROM developers can still develop their ROMs based on the stock kernel.

### Conclusions
In this paper, we conducted a comprehensive security analysis of ARM debugging features and summarized the associated security implications. To better understand the problem, we investigated a series of ARM-based platforms powered by different System-on-Chips (SoCs) and deployed across various product domains. Our analysis and investigation revealed an attack surface in ARM devices through the debugging architecture. To further validate these implications, we developed a novel attack called NAILGUN, which exploits the debugging features to obtain sensitive information and execute arbitrary payloads in a high-privilege mode from a low-privilege mode. Experiments on real devices with different ARM architectures demonstrated that all the platforms we investigated are vulnerable to this attack. We also discussed potential countermeasures at various layers of the ARM ecosystem to enhance the security of commercial devices.

### Acknowledgements
We would like to thank the anonymous reviewers and Manuel Egele for their valuable comments and feedback. Special thanks to TieLei Wang for his assistance with experiments on iOS devices. We also appreciate the insightful discussions with ARM, MediaTek, Vasileios Kemerlis, and David Evans. This work was supported by the National Science Foundation Grant No. OAC-1738929 and IIS-1724227. The opinions, findings, conclusions, and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the US Government.

### References
[1] A. Abbasi, T. Holz, E. Zambon, and S. Etalle, “ECFI: Asynchronous control flow integrity for programmable logic controllers,” in Proceedings of the 33rd Annual Computer Security Applications Conference (ACSAC’17), 2017.
...
[77] N. Zhang, K. Sun, W. Lou, and Y. T. Hou, “Case: Cache-assisted secure execution on ARM processors,” in Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P’16), 2016.

### Appendix: Enabling ETM Trace and Extracting the Trace Stream
```c
void enable_etb() {
    reg_write(ETB_RWD, 0x0); // Set data write pointer to 0x0
    reg_write(ETB_RWP, 0x0); // Clear up the ETB
    for (int i = 0; i < ETB_SIZE; ++i) {
        // Clear ETB buffer
    }
    reg_write(ETB_RRP, 0x0); // Reset the data read/write pointer to 0x0
    reg_write(ETB_RWP, 0x0);
    reg_write(ETB_FFCR, 0x320); // Configure the ETB flush trigger
    reg_write(ETB_CTL, 0x1); // Enable ETB
}

void set_etm_programming_bit(char set) {
    int reg = reg_read(ETM_SR);
    while ((set == 1 && (reg & 0x2) != 0x2) || (set == 0 && (reg & 0x2) == 0x2)) {
        reg = reg_read(ETM_CR);
        reg &= ~0x400;
        reg |= set << 10;
        reg_write(ETM_CR, reg);
        reg = reg_read(ETM_SR);
    }
}

void enable_etm() {
    set_etm_programming_bit(1); // Set the ETM programming bit to start the configuration
    int reg = reg_read(ETM_CR);
    reg &= ~0x1; // Clear the ETM power down bit
    reg_write(ETM_CR, reg);
    reg_write(ETM_TRIGGER, 0x406f); // Set the trigger event to be always triggered
    reg_write(ETM_ACVR1, ADDRESS_BEGIN); // Setup a pair of single address comparator as an address range comparator
    reg_write(ETM_ACTR1, 0x1);
    reg_write(ETM_ACVR2, ADDRESS_END);
    reg_write(ETM_ACTR2, 0x1);
    reg_write(ETM_TECR1, 0x1); // Use address range comparator 1 as filter
    reg_write(ETM_TSSCR, 0x0); // No start and stop control
    reg_write(ETM_TECR2, 0x0); // No single address comparator for include/exclude
    reg_write(ETM_TEEVR, 0x6f); // Set the TraceEnable enabling event to be always triggered
    reg_write(ETM_VDCR3, 0x1); // Use address range comparator 1 as filter
    reg_write(ETM_VDCR1, 0x0); // No single address comparator for include/exclude
    reg_write(ETM_VDCR2, 0x0); // No include and exclude for mmd
    reg_write(ETM_VDEVR, 0x6f); // Set the ViewData enabling event to be always triggered
}
```

This optimized text provides a clearer and more professional presentation of the content, ensuring it is well-structured and easy to follow.