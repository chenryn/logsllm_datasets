multiple dates are obtained from multiple URLs) and consider it as the public
disclosure date. It should be noted that we ignore the links linking to patches, as
the date of patching may or may not be same as the disclosure date, and market
could only respond to public disclosure date.
In our dataset, we also found redundant vendor names, e.g., schneider-electric
vs. schneider electric, trendmicro vs. trend-micro, and palo alto networks vs.
paloaltonetworks. We consolidate the various vendors under a consistent name,
through manual inspection. For all the vendors in the above dataset we further
Understanding the Hidden Cost of Software Vulnerabilities
383
augment them by incorporating stock price over time from Yahoo Finance, as
highlighted in the following.
Yahoo Finance. For all the vulnerabilities in our dataset we gathered his-
torical stock price information from Yahoo Finance. The historical data can
be downloaded from Yahoo Finance as a Comma Separated Values (CSV) ﬁle.
The ﬁle contains seven information attributes, namely, the date, open, low, high,
close, adjusted Close, and volume. The date attribute corresponds to the date on
which the stock’s listed performance is captured. The open and close attributes
are the stock value of the vendor on the given day at the opening and closing
of the market, respectively. The low and high are the lowest and highest value
of the vendor’s stock achieved on the given day. The adjusted close attribute
reﬂects the dividends and splits since that day. During an event of stock split,
the adjusted closing price changes for every day in the history of the stock. For
example, if stock for vendor X closed at $100 USD per share on December 5th, a
2:1 stock split is announced on December 6th, and the stock opened at $50 USD
and closed at $60 USD, that represents a decline of $40 in the actual closing
price. However, the adjusted close for December 5th would change to $50 USD,
making the gain $10 at the end of December 6th. The volume attribute is the
number of shares traded on the given day.
Price Prediction. We use the open, low, high, close, adjusted close, and volume
of all preceding days as input to predict the close for a day, as explained in more
details in Sect. 4. We use the predicted price as a baseline to estimate the cost of
vulnerabilities upon their disclosure. Upon examining the vendors in our dataset,
we found 60 of them available through Yahoo Finance. Out of the 60 vendors,
only 41 of vendors had vulnerabilities in our selected dataset. Out of those 41
vendors, 5 vendors had missing data attributes (e.g., blackberry had several
“null”-valued attributes).
Press. As a baseline for comparison with our results based on the approach used
in the literature, we sample vulnerabilities reported in the media. We search
for “software vulnerabilities in 2017” in Forbes, and ZDNet, and capture four
vulnerabilities for comparison.
3.2 Assessing Vulnerability’s Impact
To assess the impact of vulnerabilities, we separate our dataset by vendor. To
ﬁnd the eﬀect of a vulnerability for the date on which the vulnerability was
published, we look for the stock value on that particular date. It is worth noting
that the stock markets do not open on weekends and holidays, making stocks
unavailable on those days. For all dates with disclosed vulnerabilities whereby
the stock data is unavailable, we approximate the open, low, high, close, adjusted
close, and volume attributes in a linear relation with the last operating day and
384
A. Anwar et al.
the next operating day. For example, suppose the value on the last operating
day, d0, is x, the market was closed on days d1, d2, and d3, and the value on
next operating day, d4, is y. We ﬁrst calculate the number of days between d0
and d4, denoted by d (here, 3). We then approximate the values on days di for
i ∈ {1, 2, 3} as di = x + i×(y−x)
.
d
Finding the eﬀect of a vulnerability is done by comparing the predicted stock
price assuming the vulnerabilities did not exist with the actual price which takes
the existence of the vulnerability into account. Therefore, we ﬁrst predict a stock
price for the no-vulnerability case and calculate the impact of the vulnerability’s
Abnormal Return on day i (ARi for i ∈ {1, 2, 3}), where ARi = Ri − ¯R, such
that Ri is the actual stock price on day i, and ¯R is the expected stock without
vulnerability (predicted). We then calculate the % of Abnormal Return on day
i (PARi), where i ∈ 1, 2, 3, as PARi = ARi×100
Finally, we calculate the Overall (%) Abnormal Return on day i (OARi),
where i ∈ {1, 2, 3}. For vendor {V1, . . . , Vm} with vulnerability {v1, . . . , vn}, the
i for i ∈ {1, 2, 3}. We
PAR values for a vulnerability vj are denoted by PARj
calculate OARk
i on day i for a vendor Vk.
j=1 PARj
i =
(cid:2)n
.
Ri
4 Prediction
The data of all vendors consists of the aforementioned features: date, open, close,
high, low, volume and fractional change in the price from previous time step. All
of these features, except date, are considered to predict the close value in the
future. In order to increase the performance of the machine learning algorithm,
data preprocessing is required. The general method for feature standardization
is to consider the mean and standard deviation of each feature. In other words,
feature standardization projects the raw data into a new space where each feature
in the data has a mean and a standard deviation of zero and unit, respectively.
This is, the mapping transforms the feature vector x into z = x−¯x
σ , where ¯x
and σ, are the mean and standard deviation of the original feature vector x,
respectively. These features are then fed into the nonlinear autoregressive neural
network with exogenous factors (NARX) to predict the stock value of vendors.
4.1 NARX Neural Network
The NARX neural network, generally applied for prediction of the behavior
of discrete-time nonlinear dynamical systems, is one of the most eﬃcient tools
of forecasting [31]. Unique characteristics of NARX provide accurate forecasts of
the stock values by exploiting an architecture of recurrent neural network with
limited feedback from the output neuron. In comparison with other architectures,
which consider feedback from both hidden and output neurons, NARX is more
eﬃcient and yields better results [32]. Based on the NARX neural network model,
the next value of the output at time t, y(t), can be regressed on previous values
of the output and exogenous input, represented using the following model:
y(t) = f[u(t − 1), ..., u(t − du); y(t − 1), ..., y(t − Dy)],
Understanding the Hidden Cost of Software Vulnerabilities
385
u(t) (open, high, low, adj. close, volume)
Z−1
Z−1
Z−1
Z−1
Z−1
Z−1
u(t − 1)
u(t − 2)
u(t − Du)
y(t − 1)
y(t − 2)
y(t − Dy)
w
w
close
y(t)
b
b
Fig. 2. General structure of the NARX neural network
Table 1. NARX parameter settings.
Parameter
Value
Number of input neurons
Five
Number of output neurons One
Transfer functions
Tansig (hidden layer)
Purelin (output layer)
Training, validation, testing 70%, 15%, and 15%
Evaluation function
Mean squared error
Learning Algorithm
Levenberg-Marquardt
where u(t) and y(t) are the input and output of the network at time t. du and
dy, are the lags of exogenous inputs and output of the system, and the function
f is multi-layer feed forward network. The general architecture of the NARX
neural network is shown in Fig. 2.
For each vendor, we divide the dataset into training, validation and test
subsets (with 70%, 15%, and 15%, respectively). We use the training data to
train a predictive model. The Mean Squared Error (MSE) is used to evaluate
the performance of the corresponding models. The MSE is deﬁned as:
MSE =
1
n
n(cid:3)
i=1
(yti − ypi)2,
where n is the number of samples. yt and yp are representing the actual value of
the stock price and corresponding predicted value, respectively. A feed forward
neural network with one hidden layer has been used as predictor function of the
NARX. Levenberg-Marquardt (LM) back-propagation learning algorithm [33]
has been employed to train the weights of the neural network. The speciﬁcations
of the proposed NARX neural network are presented in Table 1.
386
A. Anwar et al.
 200
 180
 160
 140
 120
 100
 80
 60
 40
 20
 0
Actual
Predicted
 0
 1000  2000  3000  4000  5000  6000  7000  8000
Time
 200
 180
 160
 140
 120
 100
 80
 60
 40
 20
 0
Actual
Predicted
 0
 1000  2000  3000  4000  5000  6000  7000  8000
Time
Fig. 3. Actual vs. Predicted: NARX.
Fig. 4. Actual vs. Predicted: ARIMA.
t
n
u
o
C
 7000
 6000
 5000
 4000
 3000
 2000
 1000
 0
Train
Validation
Test
-0.1--0.06
< -0.1
-0.06--0.02
-0.02-0.02
0.02-0.06
0.06-0.1
0.1<
Error
Fig. 5. Error histogram of Adobe stock.
Baseline for Comparison. In addition to the NARX neural network model,
we also predicted the stock price of vendors using the Autoregressive Integrated
Moving Average (ARIMA) model [34], one of the most popular time series pre-
diction models, for comparison. To establish such a comparison with prior work
using linear regression, we conducted the prediction for the stock price of one
vendor, namely, Adobe. The AR portion of ARIMA signiﬁes the variable to be
predicted is regressed on its past values. Also, the MA portion in the ARIMA
model indicates that the error in the regression model is a linear combination of
error values in the past. The ARIMA model with external regressors, x, and for
one-step ahead prediction can be represented by
yp(t) − φ1yt(t − 1) = μ − θ1e(t − 1) + β(x(t) − φ1x(t − 1)),
where yp and yt are the predicted and actual prices of the stock, respectively. μ,
θ, and φ are a constant, the MA coeﬃcient, and the AR coeﬃcient values.
The results are shown only for Adobe and for the rest of the vendors only
the MSE is shown in Table 2. Figure 3 depicts the actual and predicted stock
price. The low value of the error strongly suggests that the NARX model can
forecast the stock values with high accuracy. In addition, The error histogram is
Understanding the Hidden Cost of Software Vulnerabilities
387
Table 2. Results for each vendor. Vul. stands for vulnerability count and OAR1,
OAR2, and OAR3 stand for the average eﬀect at day 1, 2, and 3 (%), respectively.
(2) Vendor names are abbreviated as
follows: PAN=Palo Alto Networks,
RWA=Rockwell Automation, TM=Trend Micro. (cid:2) indicates that the vulnerabilities
had no overall impact on vendor’s stock value while (cid:3) indicates that the stock of the
vendor were impacted, overall.
Cisco
Apple
Citrix
4.5E-3
Adobe
Vendor
Apache
Fortinet
Advantech 9.5E-4
Facebook 1.1E-3
Atlassian 9.7E-3
MSE Vul OAR1
5.9E-4 494 (cid:2)0.65
9 (cid:3)0.61
9.9E-4 37 (cid:3)0.60
2.8E-4 154 (cid:3)0.41
4 (cid:2)3.85
2.3E-3 111 (cid:3)0.10
9 (cid:3)0.14
2.4E-3
6 (cid:3)0.13
7 (cid:3)0.37
3 (cid:3)0.12
5.8E-4
7.6E-4 410 (cid:2)0.08
1 (cid:2)0.09
7.6E-3 36 (cid:3)0.21
4.4E-4 51 (cid:3)0.22
6.3E-3 13 (cid:2)0.19
9 (cid:2)0.75
Lenovo
7.4E-3
Microsoft 8.6E-4 279 (cid:3)0.45
4 (cid:3)1.08
6.5E-3
Netapp
4.3E-3 14 (cid:3)1.18
1.0E-3 38 (cid:3)0.56
Honeywell 4.3E-4
Netgear
Juniper
Google
Nvidia
GE
HP
IBM
(1)
(1)
OAR2
(cid:2)0.37
(cid:3) 0.89
(cid:3)0.98
(cid:3)0.75
(cid:2)3.86
(cid:3)0.33
(cid:3)0.01
(cid:2)0.33
(cid:3)0.19
(cid:2)0.58
(cid:2)0.21
(cid:3)0.87
(cid:3)0.37
(cid:3)0.32
(cid:2)0.80
(cid:2)1.12
(cid:3)0.39
(cid:3)0.76
(cid:3)1.61
(cid:3)1.46
OAR3
(cid:2)0.50
(cid:3)0.96
(cid:3)1.17
(cid:3)1.03
(cid:2)3.12
(cid:3)0.42
(cid:3)0.57
(cid:3)0.45
(cid:3)0.92
(cid:2)0.39
(cid:2)0.08
(cid:3)2.35
(cid:3)0.64
(cid:3)0.26
(cid:2)1.10
(cid:2)0.55