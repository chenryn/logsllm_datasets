level) goal G associated to a relation generation algorithm R, i.e.,
we aim to construct a Σ-protocol for proving (in zero-knowledge)
knowledge of a witness w for a public input x such that R(x, w)
holds, for R sampled from R. The resolution procedure ﬁrst deﬁnes
a generator for a (lower-level) family of relations Rres associated
with a resolved goal Gres and then deﬁnes a translation algorithm
Translate(R, x, w) which, on input a relation R and a pair (x, w),
produces the description of a relation Rres and a pair (x′, w′). The
following properties must be satisﬁed by the Translate algorithm:
1. Completeness. On a valid input (R, x, w), i.e., where R
is in the range of R and R(x, w) holds, Translate outputs
triples (Rres, x′, w′) such that Rres is in the range of Rres,
and Rres(x′, w′) holds.
2. Soundness. There is an efﬁcient algorithm Recover such
that for all PPT adversaries A the following holds for
R $← R, (x, w) ∈ R and (Rres, x′, w′) $← A(R, x, w):
if (Rres, x′) are in the range of Translate(R, x, w) and
Rres(x′, w′) holds, Recover(Rres, x′, w′) outputs ˜w such that
R(x, ˜w) holds with overwhelming probability.
3. Public veriﬁability. The public outputs of Translate, i.e.,
Rres and x′, can efﬁciently be checked to be in the correct
range for all valid public inputs (R, x).
4. Simulatability. There exists an efﬁcient simulator S which,
on input R sampled from R and x in the language that it de-
ﬁnes, outputs (Rres, x′) with a distribution identical (or sta-
tistically close) to that produced by Translate(R, x, w) for a
valid witness w.
Intuitively, public veriﬁability allows the veriﬁer to check that
the prover provides a valid output of Translate, and hence rely on
the soundness of this algorithm. Simulatability is necessary for
the HVZK property, as simulating traces for the complete protocol
implies simulating the public outputs of Translate.
Now, to construct a protocol for goal G, one ﬁrst generates de-
scriptions of algorithms P′
2 and V′ of a Σ-protocol for Gres, and
then deﬁnes the procedures for the high-level protocol as follows:
1, P′
492• P1(x, w) runs Translate(R, x, w) to get (Rres, x′, w′), and
P′
1(x′, w′) to get (r′, st′), and returns
(r, st) = ((Rres, x′, r′), (Rres, x′, w′, st′)).
• P2(x, w, c, st) recovers (Rres, x′, w′, st′) from st.
2(x′, w′, st′, c) to get s′ and returns s = s′.
runs P′
It then
• V(x, r, c, s) recovers (Rres, x′, r′) from r and checks that
Rres and x are in the correct range w.r.t. R and x. Then it
runs V′(x′, r′, c, s) and returns the result.
The correctness and security of the resulting protocol is established
in the following theorem.
THEOREM 1. Assume that algorithms P′
2 and V′ yield a
Σ-protocol for Rres, which is complete, HVZK and satisﬁes gen-
eralized special soundness for relation R′
res. Then, if Translate
satisﬁes the four properties listed above, algorithms P1, P2 and V
yield a Σ-protocol for R, which is complete, HVZK and satisﬁes
generalized special soundness for relation
1, P′
R′((Rres, x′, r′), c, s), (Rres, x′, r′), ˆc, ˆs)) = R′
res((r′, c, s), (r, ˆc, ˆs))
This result permits identifying the proof obligations that sufﬁce to
formally verify that the resulting protocol is correct and secure.
First of all, one needs to show that the low-level protocol is itself
correct and secure for the relation generator Rres (in ZKCrypt this
maps to the formal veriﬁcation of subsequent compilation steps,
which we discuss later). Secondly, one needs to show that the
Translate procedure has all properties described in the theorem.
Idemix goal resolution. To make things more concrete, let us go
back to the goal resolution performed by ZKCrypt and recast the
rewriting performed for a term of the form w ≥ b in the theoret-
ical framework above (an upper bound on w can be treated anal-
ogously). This matches the resolution of the proof goal in our
Idemix running example. From §2, and using x = Z/Rm1
, we
can rewrite the relation corresponding to goal G as
1
R(x, w)
.
= x = AeSvRm2
2 ∧ m2 ≥ b
(3)
Here, we have w = (e, m2, v). Similarly, using Y1 = T∆Z b, the
relation associated with resolved goal Gres is:
Rres(x′, w′)
.
= x = AeSvRm2
2 ∧ Y1 = Zm2 Sr∆ ∧
Ti = Z ui Sri ∧ T∆ = gu1
1 gu2
2 gu3
3 gu4
4 Sα
(4)
4
^i=1
Here w′ = (e, m2, v, r∆, u1, u2, u3, u4, r1, r2, r3, r4, α) and
x′ = (x, Y1, T1, T2, T3, T4, T∆). We observe that implicit in the
deﬁnition of these goals are the relation generators R and Rres that
produce descriptions of the (hidden order) groups and generators
that are used in the protocol. Furthermore, note that the resolved
goal Gres can be handled by the ΣGSP protocol, for which ZKCrypt
can generate an implementation of a ZK-PoK protocol which is
proven to display the relevant security properties.
Figures 3 and 4 provide the pseudo-code of the Translate and
Recover algorithms for the Idemix example. Observe the dual
role of the Ti values in Gres: these values appear both as generators
in Rres, and as images in x′. As we will see, this is essential to
guarantee that witnesses for the original goal G can be recovered.
We will now discuss how we prove that these algorithms satisfy
the hypotheses of Theorem 1, from which we can conclude that
resolution is correct.
Translate(R, x, w):
Parse (A, S, R2, Z) ← R
Parse (e, m2, v) ← w
Find (u1, u2, u3, u4) s.t. m2 − b = u2
$←[0..2|n|2ℓ], for i = ∆, 1, 2, 3, 4
ri
1 + u2
2 + u2
3 + u2
4
α ← r∆ −P4
i=1 uiri
4 Sα
3 T u4
2 T u3
1 T u2
Ti ← Z ui Sri , for i = 1, 2, 3, 4
T∆ ← T u1
Y1 ← T∆Z b
(g1, g2, g3, g4) ← (T1, T2, T3, T4)
x′ ← (x, Y1, T1, T2, T3, T4, T∆)
w′ ← (e, m2, v, r∆, u1, u2, u3, u4, r1, r2, r3, r4, α)
return (Rres, x′, w′)
Figure 3: Translate algorithm for Idemix example. Relations
R and Rres are as in (3) and (4).
Recover(Rres, x′, w′):
(e, m2, v, r∆, u1, u2, u3, u4, r1, r2, r3, r4, α) ← w′
w ← (e, m2, v)
return w
Figure 4: Recover algorithm for Idemix example
4.2 A Formal Veriﬁcation Perspective
We will continue to rely on the Idemix example to illustrate our
approach to verifying the goal translation step. We ﬁrst show how
we use EasyCrypt [10] to prove that the Translate algorithm from
Figure 3 satisﬁes the completeness and soundness properties. We
then discuss how the simulatability and public veriﬁability proper-
ties are handled with a once-and-for-all proof for supported goals.
Completeness of Translate. The idea underlying the complete-
ness property is the following. Assume a prover knows w ≥ b.
Then, by Lagrange’s Four Square Theorem [38], she can ﬁnd in-
i . By choosing
i=1 uiri she
can now clearly perform the above proof. Formally verifying this
property using EasyCrypt is achieved by proving that the follow-
ing experiment always returns true for all R in the range of R and
all pairs (x, w) such that R(x, w) holds:
tegers u1, . . . , u4 such that m − b = P4
r∆, r1, . . . , r4 at random, and deﬁning α = r∆ −P4
i=1 u2
(Rres, x′, w′) $← Translate(R, x, w); return Rres(x′, w′)
The Translate algorithm is represented in EasyCrypt in a form
very close to its description in Figure 3, with the sole difference that
the decomposition of m2 − b as a sum of four squares is computed
by applying a function assumed to correctly implement Lagrange’s
decomposition. The proof itself is written as a series of game tran-
sitions, where the initial experiment is gradually transformed until
it is reduced to the trivial program that simply returns true. All
transitions are proved automatically by the tool.
Soundness of Translate. A detailed speciﬁcation of the Recover
.
algorithm for the Idemix example is given in Figure 4. Let m′
=
2 ≥ b and, by the deﬁnition of Rres associ-
ated with Gres, we have that Z = AeSvRm1
2 . The correctness
of Recover thus hinges on the fact that R computationally guaran-
tees m2 = m′
2, down to the following assumption:
i + b. Clearly m′
P4
1 Rm2
i=1 u2
2
DEFINITION 4
(UNIQUE REPRESENTATION ASSUMPTION).
Let H be as before, and let Z and S be generators of H.
If a
PPT algorithm outputs (a, b), (a′, b′) ∈ Z × Z such that
Z aSb = Z a′
then, with overwhelming probability, we have
that a = a′ ∧ b = b′.
Sb′
Any witness w′ given to Recover, satisfying Rres(x′, w′), for pub-
licly validated Rres and x′, can be expressed in the following form:
Zm2 −bSr∆ = Zm′
2−bSα+P4
i=1 riui
493If m2 6= m′
2, the input witness would provide two alternative repre-
sentations for the same value under generators Z and S, contradict-
ing the unique representation assumption. Thus, necessarily with
overwhelming probability m2 = m′
2.
Formally, if the group parameters are generated in a particular
way, the unique representation assumption can be shown to hold in
n, down to the hardness of factoring the modulus n [19],
H = Z∗
e.g. when n is sampled as a strong RSA modulus. The Idemix
speciﬁcation incorporates this method into its parameter generation
procedure. We note that this computational assumption is used im-
plicitly throughout relevant literature when dealing with such trans-
formations. We believe that forcing such assumptions to be stated
explicitly is one of the advantages of using mechanized support to
validate security proofs for cryptographic protocols.
The correctness of this algorithm is again formally veriﬁed in
EasyCrypt. The proof is more intricate than in the case of Trans-
late, since we now must take into account the unique representation
assumption. The proof is quantiﬁed for all relations R in the range
of R, and all x and w such that R(x, w) holds. Consistently with
the deﬁnition of the soundness property, we begin by deﬁning the
following experiment in EasyCrypt:
(Rres, x′, w′) $← A(R, x, w);
w∗ ← Recover(Rres, x′, w′);
if ¬Rres(x′, w′) ∨ ¬pubVerify(R, x, Rres, x′) then return ⊥
else return R(x, w∗)
Here, an adversary (i.e., a malicious prover) A is given such an
input (R, x, w), and outputs a tuple (Rres, x′, w′). The Recover
algorithm is then called to produce a high-level witness. The ex-
periment output expresses that the event in which the adversary
produces a valid tuple (Rres, x′, w′) must imply that Recover suc-
ceeds in obtaining a valid high-level witness w∗. This is expressed
as a disjunction where either the adversary fails to produce publicly
veriﬁable Rres, x′ and a witness w′ such that Rres(x′, w′) holds,
or Recover must succeed. Public veriﬁability is captured by a
predicate pubVerify imposing that Y1 = T∆Z b, and gi = Ti for
i = 1, 2, 3, 4.
The proof establishes that this experiment is identical to the triv-
ial program that always returns true, conditioning on a failure
event that occurs when both Rres(x′, w′) and pubVerif(Rres, x′)
hold, but the witness w′ satisﬁes the following Boolean test:
i=1 u2
i + b ∨ r∆ 6=P4
i=1 riui + α
m2 6=P4
Intuitively, this failure condition can be triggered only if the ad-
versary was able to recover a low level witness which contradicts
the unique representation assumption: in the proof we show that
the probability of failure is bounded by the probability that an ad-
versary B ﬁnds two different representations for the same group
element under generators Z and S. On the other hand, condition-
ing on the event that failure does not occur, and through a series of
transformations involving algebraic manipulations, we show that
Recover always succeeds. Again, the validity of all transforma-
tions is handled automatically by EasyCrypt.
Integration and automation The above approach to formally ver-
ifying the goal resolution procedure was not integrated in earlier
versions of ZKCrypt. This meant that user intervention was re-
quired to deal with this compilation step, and hence the natural
back-end to use was EasyCrypt. This was not a major limitation
because in many practical scenarios, including Idemix, the output
of goal resolution is the speciﬁcation of the proof goal. Neverthe-
less, the latest release of ZKCrypt has been extended with an extra
component that deals with this compilation step without user inter-
vention. Formal veriﬁcation of this phase is handled in two steps:
1. Given a high-level goal G, a certiﬁed goal resolution module
implemented in Coq generates a description of a reference
low-level goal Gref
res and a description of the translation and re-
covery procedures. A once-and-for-all proof in Coq guaran-
tees that translation is complete and sound for the reference
low-level goal. This is done using essentially the same for-
malization approach as described above, extended to handle
the general case of ΣGSP-type goals where each pre-image
can be bounded with an arbitrary interval.
2. The resolved goal produced by the CACE compiler Gres is
then proven to be equivalent to Gref
res. This establishes that
the goal resolution step carried out by the CACE compiler is
indeed correct. The optimized implementation produced by
the CACE compiler is generated from Gres, as described in
the following Sections. This equivalence therefore provides
guarantees of correctness and security of the generated opti-
mized protocol with respect to the original high-level goal.
Public veriﬁability and simulatability. We now brieﬂy discuss why
the resolution procedure used in Idemix can be easily shown to sat-
isfy public veriﬁability and simulatability. This argument extends
to all instances of the resolution step implemented in ZKCrypt.
Looking at (4), one can immediately see that the public outputs
of Translate can be validated to be in the correct range assuming
that group membership can be efﬁciently checked, and given the
ﬁxed structure of the low-level relation. For simulatability we see
that the description (Rres, x′) output by Translate comprises the
values of the images x′ = (x, Y1, T1, T2, T3, T4, T∆) and genera-
tors (g1, g2, g3, g4) = (T1, T2, T3, T4). Since x and Y1 are fully
determined by public inputs and (T1, T2, T3, T4, T∆), all that re-
mains to show is that the latter values can be efﬁciently simulated.
Observing that the domain of ri is sufﬁciently large for the distribu-
tion of Sri (i ∈ {1, 2, 3, 4, ∆}) to be statistically close to uniform
in hSi, we conclude that the variables Ti are also statistically close
to uniform (note that Z and S are both generators of the same group
of hidden order). It follows that these values can be trivially simu-
lated by sampling uniformly random elements in the target group.
5. VERIFIED COMPILATION
At the core of the formal veriﬁcation tool of ZKCrypt sits a ver-
iﬁed compiler that generates correct and secure reference imple-
mentations of ZK-PoK for the following class of resolved proof