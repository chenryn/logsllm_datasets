Another feature of the player applications allows users
to rip the tracks from the CD to their hard disks, but only
in DRM-protected audio formats. Both schemes support
the Windows Media Audio format by using a Microsoft
product, the Windows Media Data Session Toolkit [17],
to deliver DRM licenses that are bound to the PC where
the ﬁles were ripped. The licenses allow the music to
be transferred to portable devices that support Windows
Media DRM or burned onto CDs, but the Windows Me-
dia ﬁles will not be usable if they are copied to another
PC. Because XCP and MediaMax create Windows Me-
dia ﬁles, they are vulnerable to any attack that can de-
feat Windows Media DRM. Often, DRM interoperation
allows attacks on one system to defeat other systems as
well, because the attacker can transfer protected content
into the system of her choice in order to extract it.
The XCP and MediaMax version 5 players both ex-
hibit similar spyware-like behavior: phoning home to
the vendor or record label with information about users’
listening habits despite statements to the contrary from
the vendors. Whenever a protected disc is inserted, the
players contact web servers to retrieve images or ban-
ner ads to display. Part of the request is a code that
identiﬁes the album. XCP discs contact a Sony web
site, connected.sonymusic.com [20]; MediaMax
albums contact license.sunncomm2.com, a site op-
erated by MediaMax’s creator, SunnComm. These con-
nections allow the servers to log the user’s IP address,
the date and time, and the identity of the album. This
undisclosed data collection, in combination with other
practices—installation without informed consent and the
lack of an uninstaller—make XCP and MediaMax ﬁt the
consensus deﬁnition of spyware.
6.1 Attacks on Players
The XCP and MediaMax version 5 players were de-
signed to enforce usage restrictions speciﬁed by content
providers. In practice, they provide minimal security be-
cause there are many ways that users can bypass the lim-
itations. Perhaps the most interesting class of attacks tar-
gets the limited number of burned copies permitted by
the players. Both players are designed to enforce this
limit without communicating with any networked server;
thus, the player must keep track of how many allowed
copies remain by storing state on the local machine.
It is well known that DRM systems like this are vul-
nerable to rollback attacks. A rollback attack backs up
the state of the machine before performing the limited
operation (in this case, burning the copy). When the op-
eration is complete, the old system state is restored, and
the DRM software is not able to determine that the oper-
ation has occurred. This kind of attack is easy to perform
with virtual machine software like VMWare, which al-
lows the entire state of the system to be saved or restored
in a few clicks. XCP and MediaMax both fail under this
attack, which allows unlimited copies to be burned with
their players.
A reﬁned variation of this attack targets only the
speciﬁc pieces of state that the DRM system uses to
remember the number of copies remaining. The XCP
player uses a single ﬁle, %windir%\system32\
$sys$filesystem\$sys$parking,
record
how many copies remain for every XCP album that has
been used on the system.9 Rolling back this ﬁle after a
disc copy operation would restore the original number
of copies remaining.
to
A more advanced attacker can go further and modify
the $sys$parking ﬁle to set the counter to an arbi-
trary value. The ﬁle consists of a 16 byte header followed
by a series of 177 byte structures. For each XCP disc
used on the machine, the ﬁle contains a whole-disc struc-
ture and an individual structure for each track. Each disc
structure stores the number of permitted copies remain-
ing for the disc as a 32-bit integer beginning 100 bytes
from the start of the structure.
The ﬁle is protected by primitive encryption. Each
structure is XORed with a repeating 256-bit pad. The
pad—a single pad is used for all structures—is ran-
domly chosen when XCP is ﬁrst installed and stored
in the system registry in the key HKLM\SOFTWARE\
$sys$reference\ClassID. Note that this key,
which is hidden by the rootkit, is intentionally misnamed
“ClassID” to confuse investigators. Instead of a ClassID,
it contains the 32 bytes of pad data.
Hiding the pad actually doesn’t increase the security
of the design. An attacker who knows only the format
of the $sys$parking ﬁle and the current number of
copies remaining can change the counter to an arbitrary
value without needing to know the pad. Say the counter
indicates that there are x copies remaining and the at-
tacker wants to set it to y copies remaining. Without
decrypting the structure, she can XOR the padded bytes
where the counter is stored with the value x ⊕ y. If the
original value was padded with p, the new value will be
(x ⊕ p) ⊕ (x ⊕ y) = (y ⊕ p), y padded with p.
Ironically, Sony itself furnishes directions for carrying
out another attack on the player DRM. Conspicuously ab-
sent from the XCP and MediaMax players is support for
the Apple iPod—by far the most popular portable music
player. A Sony FAQ blames Apple for this shortcoming
and urges users to direct complaints to them: “Unfortu-
nately, in order to directly and smoothly rip content into
iTunes it [sic.] requires the assistance of Apple. To date,
Apple has not been willing to cooperate with our protec-
tion vendors to make ripping to iTunes and to the iPod a
USENIX Association
Security ’06: 15th USENIX Security Symposium
85
simple experience.” [23]. Strictly speaking, it is untrue
that Sony requires Apple’s cooperation to work with the
iPod, as the iPod can import MP3s and other open for-
mats. What Sony has difﬁculty doing is moving music
to the iPod while keeping it wrapped in copy protection.
This is because Apple has so far refused to support inter-
operation with its FairPlay DRM.
Yet so great is consumer demand for iPod compati-
bility that Sony gives out—to any customer who ﬁlls
out a form on its web site [22]—instructions for work-
ing around its own copy protection and transforming the
music into a DRM-free format that will work with the
iPod. The procedure is simple but cumbersome: users
are directed to use the player software to rip the songs
into Windows Media DRM ﬁles; use Windows Media
Player to burn the ﬁles to a blank CD, which will be free
of copy protection; and then use iTunes to rip the songs
once more and transfer them to the iPod.
6.2 MediaMax Player Security Risks
Besides suffering from several kinds of attacks that ex-
pose the music content to copying, the MediaMax ver-
sion 5 player makes the user’s system more vulnerable
to attack. When a MediaMax CD is inserted into a com-
puter, Windows autorun launches an installer from the
disc. Even before displaying a license agreement, Media-
Max copies almost twelve megabytes of ﬁles and data
related to the MediaMax player to the hard disk. Jesse
Burns and Alex Stamos of iSEC Partners discovered that
the MediaMax installer sets ﬁle permissions that allow
any user to modify its code directory and the ﬁles and
programs in it [5].
As Burns and Stamos realized, the lax permissions al-
low a non-privileged user to replace the executable code
in the MediaMax player ﬁles with malicious code. The
next time a user plays a MediaMax-protected CD, the at-
tack code will be executed with that user’s security priv-
ileges. The MediaMax player requires Power User or
Administrator privileges to run, so it’s likely that the at-
tacker’s code will run with almost complete control of
the system.
Normally, this problem could be ﬁxed by manually
correcting the errant permissions. However, MediaMax
aggressively updates the installed player code each time
the software on a protected disc autoruns or is launched
manually. As part of this update, the permissions on the
installation directory are reset to the insecure state.
We discovered a variation of the attack suggested by
Burns and Stamos that allows the attack code to be in-
stalled even if the user has never consented to the in-
stallation of MediaMax, and to be triggered immediately
whenever the user inserts a MediaMax CD. In our at-
tack, the attacker places hostile code in the DllMain
procedure of a code ﬁle called MediaMax.dll, which
MediaMax installs even before displaying the EULA.
The next time a MediaMax CD is inserted, the installer
autoruns and immediately attempts to check the version
of the installed MediaMax.dll ﬁle. To do this, the
installer calls the Windows LoadLibrary function on
the DLL ﬁle, which causes the ﬁle’s DllMain proce-
dure to execute, along with any attack code placed there.
This problem is exacerbated because parts of the
MediaMax software are installed automatically and with-
out consent. Users who have declined the EULA likely
assume that MediaMax has not been installed, and so
most will be unaware that they are vulnerable. The same
installer code performs the dangerous version check as
soon as the CD is inserted. A CD that prompted the user
to accept a license before installing code would give the
user a chance to head off the attack.
Fixing this problem permanently without losing the
use of protected discs requires installing a patch from
SunnComm. Unfortunately, as we discovered, the initial
patch released by Sony-BMG in response to the iSEC
report was capable of triggering precisely the kind of
attack it was supposed to prevent.
In the process of
updating MediaMax, the patch checked the version of
MediaMax.dll just like the MediaMax installer does.
If this ﬁle was already modiﬁed by an attacker, the pro-
cess of applying the security patch would execute the at-
tack code. Prior versions of the MediaMax uninstaller
had the same vulnerability, though both the uninstaller
and the patch have since been replaced with versions that
do not suffer from this problem.
7 Deactivation
Active protection methods install and run software com-
ponents that interfere with accesses to a CD. Users can
remove or deactivate the active protection software by
using standard system administration tools that are de-
signed to ﬁnd, characterize, and control the programs in-
stalled on a machine. Deactivating the protection will
enable arbitrary use or ripping of the music, and it is dif-
ﬁcult to stop if the user has system administrator privi-
leges. In this section, we discuss how active protection
may be deactivated.
7.1 Deactivating MediaMax
The MediaMax active protection software is easy to deac-
tivate, being comprised of a single device driver named
sbcphid. The driver can be removed by using the
Windows command sc delete sbcphid to stop the
driver, and then removing the sbcphid.sys ﬁle con-
taining the driver code. MediaMax-protected albums can
then be accessed freely.
86
Security ’06: 15th USENIX Security Symposium
USENIX Association
7.2 Defenses Against Deactivation
The
rootkit
To counter deactivation attempts, a vendor might try
technical tricks to evade detection and frustrate removal
of the active protection software. An example is the
rootkit-like behavior of XCP, discovered by Mark Russi-
novich [21]. When XCP installs its active protection
software, it also installs a second program—the rootkit—
that conceals any ﬁle, process, or registry key whose
name begins with the preﬁx $sys$. The result is that
XCP’s main installation directory, and most of its reg-
istry keys, ﬁles, and processes, become invisible to nor-
mal programs and administration tools.
kernel-level
set
named
is
$sys$aries that
to automatically load
early in the boot process. When the rootkit starts,
it hooks several Windows system calls by modify-
ing the system service dispatch table (the kernel’s
KeServiceDescriptorTable structure) which is
an array of pointers to the kernel functions that imple-
ment basic system calls. The rootkit modiﬁes the behav-
ior of four system calls: NtQueryDirectoryFile,
NtCreateFile, NtQuerySystemInformation,
and NtEnumerateKey.10 These calls are used to
enumerate ﬁles, processes, and registry entries. The
rootkit ﬁlters the data returned by these calls to hide
items whose names begin with $sys$.
driver
a
is
On intercepting a function call, the rootkit checks the
name of the calling process. If the name of the calling
process begins with $sys$, the rootkit returns the re-
sults of the real kernel function without alteration so that
XCP’s own processes have an accurate view of the sys-
tem.
The XCP rootkit increases users’ vulnerability to at-
tack by allowing any software to hide—not just XCP.
Malware authors can exploit the fact that any ﬁles, reg-
istry keys, or processes with names beginning in $sys$
will be hidden, thereby saving the trouble of installing
their own rootkits. Malware that lacks the privileges to
install its own rootkit can still rely on XCP’s rootkit.
Only kernel-level processes can patch the Windows
system service dispatch table, and only privileged users—
normally, members of the Administrators or Power Users
groups—can install such processes. (XCP itself requires
these privileges to install.) Malicious code running as an
unprivileged user can’t normally install a rootkit that in-
tercepts system calls. But if the XCP rootkit is installed,
it will hide all programs that adopt the $sys$ preﬁx
so that even privileged users will be unable to see them.
This vulnerability has already been exploited by at least
two Trojan horses seen in the wild [15, 14].
The rootkit opens at least one more security vulnera-
bility. The modiﬁed functions do not check for errors
as carefully as the original Windows functions do, so
the rootkit makes it possible for an ordinary program
to crash the system by calling one of the hooked func-
tions, for example by calling NtCreateFile with an
invalid ObjectAttributes argument. We do not be-
lieve this vulnerability can be exploited to run arbitrary
code.
7.3 Deactivating XCP
Deactivating XCP’s active protection is more compli-
cated because it comprises several processes that are
more deeply entangled in the system conﬁguration, and
are hidden by the XCP rootkit. Deactivation requires a
three-step procedure.
The ﬁrst step is to deactivate and remove the rootkit,
by the same procedure used to deactivate MediaMax (ex-
cept that the driver’s name is aries.sys). Disabling
the rootkit and then rebooting exposes the previously hid-
den ﬁles, registry entries, and processes.
The second step is to edit the registry to remove ref-
erences to XCP’s ﬁlter drivers and CoDeviceInstallers.
XCP uses the Windows ﬁlter driver facility to intercept
commands to the CD drives and IDE bus. If the code