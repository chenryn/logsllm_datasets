### Another Feature of the Player Applications

Another feature of the player applications allows users to rip tracks from CDs to their hard disks, but only in DRM-protected audio formats. Both XCP and MediaMax support the Windows Media Audio format by using Microsoft's Windows Media Data Session Toolkit [17] to deliver DRM licenses that are bound to the PC where the files were ripped. These licenses permit the music to be transferred to portable devices that support Windows Media DRM or burned onto CDs, but the files will not be usable if copied to another PC. Since XCP and MediaMax create Windows Media files, they are vulnerable to any attack that can defeat Windows Media DRM. Often, DRM interoperability allows attacks on one system to compromise others as well, because the attacker can transfer protected content into the system of their choice to extract it.

### Spyware-Like Behavior

Both XCP and MediaMax version 5 players exhibit spyware-like behavior, contacting vendor or record label servers with information about users' listening habits, despite contrary statements from the vendors. When a protected disc is inserted, the players contact web servers to retrieve images or banner ads, including a code that identifies the album. XCP discs contact Sony’s connected.sonymusic.com [20], while MediaMax albums contact license.sunncomm2.com, operated by SunnComm. These connections allow the servers to log the user’s IP address, date, time, and the identity of the album. This undisclosed data collection, combined with installation without informed consent and the lack of an uninstaller, qualifies XCP and MediaMax as spyware according to the consensus definition.

### Attacks on Players

XCP and MediaMax version 5 players are designed to enforce usage restrictions specified by content providers. In practice, they provide minimal security due to various ways users can bypass the limitations. One class of attacks targets the limited number of burned copies permitted by the players. Both players enforce this limit without communicating with networked servers, storing state locally on the machine.

#### Rollback Attacks

It is well known that such DRM systems are vulnerable to rollback attacks. A rollback attack involves backing up the system state before performing the limited operation (e.g., burning a copy). After the operation, the old system state is restored, and the DRM software cannot detect that the operation has occurred. This attack is easily performed using virtual machine software like VMWare, which allows saving and restoring the entire system state. Both XCP and MediaMax fail under this attack, allowing unlimited copies to be burned.

#### Refined Rollback Attack

A more refined variation targets the specific pieces of state used by the DRM system to remember the number of copies remaining. The XCP player uses a single file, `%windir%\system32\$sys$filesystem\$sys$parking`, to record the remaining copies for each XCP album. Rolling back this file after a disc copy operation restores the original number of copies remaining.

#### Advanced Attacks

Advanced attackers can modify the `$sys$parking` file to set the counter to an arbitrary value. The file consists of a 16-byte header followed by 177-byte structures. Each structure stores the number of permitted copies remaining as a 32-bit integer. The file is protected by primitive encryption, with each structure XORed with a repeating 256-bit pad. The pad is randomly chosen during XCP installation and stored in the registry key `HKLM\SOFTWARE\$sys$reference\ClassID`.

Hiding the pad does not increase security. An attacker who knows the file format and the current number of copies remaining can change the counter without needing the pad. For example, if the counter indicates `x` copies remaining and the attacker wants `y` copies, they can XOR the padded bytes with `x ⊕ y`. If the original value was padded with `p`, the new value will be `(y ⊕ p)`.

Ironically, Sony provides instructions for another attack on its own DRM. The XCP and MediaMax players lack support for the Apple iPod. A Sony FAQ blames Apple for this, but strictly speaking, Sony does not require Apple's cooperation to work with the iPod, as it can import MP3s and other open formats. However, Sony has difficulty moving music to the iPod while keeping it wrapped in copy protection, as Apple refuses to support interoperability with its FairPlay DRM.

To meet consumer demand, Sony gives out instructions for working around its own copy protection, transforming the music into a DRM-free format. The procedure involves ripping the songs into Windows Media DRM files, burning them to a blank CD (which removes copy protection), and then using iTunes to rip the songs again and transfer them to the iPod.

### MediaMax Player Security Risks

The MediaMax version 5 player also makes the user’s system more vulnerable to attack. When a MediaMax CD is inserted, Windows autorun launches an installer that copies almost twelve megabytes of files and data related to the MediaMax player to the hard disk. Jesse Burns and Alex Stamos of iSEC Partners discovered that the MediaMax installer sets file permissions that allow any user to modify its code directory and the files and programs in it.

These lax permissions allow a non-privileged user to replace the executable code in the MediaMax player files with malicious code. The next time a user plays a MediaMax-protected CD, the attack code will execute with that user’s security privileges. The MediaMax player requires Power User or Administrator privileges to run, so the attacker's code will likely have almost complete control of the system.

Normally, this problem could be fixed by manually correcting the errant permissions. However, MediaMax aggressively updates the installed player code each time the software on a protected disc autoruns or is launched manually, resetting the permissions to an insecure state.

We discovered a variation of the attack suggested by Burns and Stamos that allows the attack code to be installed even if the user has never consented to the installation of MediaMax, and to be triggered immediately whenever the user inserts a MediaMax CD. In our attack, the attacker places hostile code in the `DllMain` procedure of a code file called `MediaMax.dll`, which MediaMax installs even before displaying the EULA. The next time a MediaMax CD is inserted, the installer autoruns and attempts to check the version of the installed `MediaMax.dll` file, causing the `DllMain` procedure to execute, along with any attack code placed there.

This problem is exacerbated because parts of the MediaMax software are installed automatically and without consent. Users who have declined the EULA likely assume that MediaMax has not been installed, making them unaware of their vulnerability. The same installer code performs the dangerous version check as soon as the CD is inserted.

Fixing this problem permanently without losing the use of protected discs requires installing a patch from SunnComm. Unfortunately, the initial patch released by Sony-BMG in response to the iSEC report could trigger the attack it was supposed to prevent. The patch checked the version of `MediaMax.dll` just like the MediaMax installer, executing any attack code if the file was already modified by an attacker. Prior versions of the MediaMax uninstaller had the same vulnerability, though both the uninstaller and the patch have since been replaced with versions that do not suffer from this problem.

### Deactivation

Active protection methods install and run software components that interfere with accesses to a CD. Users can remove or deactivate the active protection software using standard system administration tools. Deactivating the protection will enable arbitrary use or ripping of the music, and it is difficult to stop if the user has system administrator privileges. In this section, we discuss how active protection may be deactivated.

#### Deactivating MediaMax

Deactivating the MediaMax active protection software is straightforward, as it comprises a single device driver named `sbcphid`. The driver can be removed using the Windows command `sc delete sbcphid` to stop the driver and then removing the `sbcphid.sys` file containing the driver code. MediaMax-protected albums can then be accessed freely.

#### Defenses Against Deactivation

To counter deactivation attempts, vendors might use technical tricks to evade detection and frustrate removal of the active protection software. An example is the rootkit-like behavior of XCP, discovered by Mark Russinovich [21]. When XCP installs its active protection software, it also installs a second program—a rootkit—that conceals any file, process, or registry key whose name begins with the prefix `$sys$`. The result is that XCP’s main installation directory and most of its registry keys, files, and processes become invisible to normal programs and administration tools.

The rootkit is a kernel-level driver named `aries` that automatically loads early in the boot process. It hooks several Windows system calls by modifying the system service dispatch table (`KeServiceDescriptorTable`). The rootkit modifies the behavior of four system calls: `NtQueryDirectoryFile`, `NtCreateFile`, `NtQuerySystemInformation`, and `NtEnumerateKey`. These calls are used to enumerate files, processes, and registry entries. The rootkit filters the data returned by these calls to hide items whose names begin with `$sys$`.

On intercepting a function call, the rootkit checks the name of the calling process. If the name of the calling process begins with `$sys$`, the rootkit returns the results of the real kernel function without alteration so that XCP’s own processes have an accurate view of the system.

The XCP rootkit increases users’ vulnerability to attack by allowing any software to hide, not just XCP. Malware authors can exploit the fact that any files, registry keys, or processes with names beginning in `$sys$` will be hidden, thereby saving the trouble of installing their own rootkits. Malware that lacks the privileges to install its own rootkit can still rely on XCP’s rootkit.

Only kernel-level processes can patch the Windows system service dispatch table, and only privileged users—members of the Administrators or Power Users groups—can install such processes. Malicious code running as an unprivileged user cannot normally install a rootkit that intercepts system calls. But if the XCP rootkit is installed, it will hide all programs that adopt the `$sys$` prefix, so even privileged users will be unable to see them. This vulnerability has already been exploited by at least two Trojan horses seen in the wild [15, 14].

The rootkit opens at least one more security vulnerability. The modified functions do not check for errors as carefully as the original Windows functions, making it possible for an ordinary program to crash the system by calling one of the hooked functions, for example, by calling `NtCreateFile` with an invalid `ObjectAttributes` argument. We do not believe this vulnerability can be exploited to run arbitrary code.

#### Deactivating XCP

Deactivating XCP’s active protection is more complicated because it comprises several processes deeply entangled in the system configuration and hidden by the XCP rootkit. Deactivation requires a three-step procedure:

1. **Deactivate and Remove the Rootkit**: Use the same procedure as for deactivating MediaMax (except that the driver’s name is `aries.sys`). Disabling the rootkit and rebooting exposes the previously hidden files, registry entries, and processes.
2. **Edit the Registry**: Remove references to XCP’s filter drivers and CoDeviceInstallers. XCP uses the Windows filter driver facility to intercept commands to the CD drives and IDE bus. If the code is not removed, the filter drivers will continue to interfere with CD access.
3. **Remove Remaining Components**: Ensure all XCP-related files and registry entries are removed to fully deactivate the protection.