# B1ll_Gat35
Reverse Engineering, 400 points
## Description:
> Can you reverse this Windows Binary?
## Solution:
This is a Windows reversing challenge. Let's start by running the executable:
```console
E:\CTFs\pico\B1ll_Gat35>win-exec-1.exe
Input a number between 1 and 5 digits: 1
Initializing...
Enter the correct key to get the access codes: test
Incorrect key. Try again.
```
We need to provide the correct key in order to get the flag.
Let's take a look at the main function's decompilation using Ghidra:
```c
void main(void)
{
  int iVar1;
  FILE *pFVar2;
  uint uVar3;
  int user_input;
  int num_digits;
  char is_valid;
  char local_6c [100];
  uint local_8;
  local_8 = DAT_0047b174 ^ (uint)&stack0xfffffffc;
  _print(s_Input_a_number_between_1_and_5_d_0047b06c);
  _scanf(&DAT_0047b094,&user_input);
  num_digits = 1;
  while (9  Optional Headers -> DllCharacteristics -> Click Here -> DLL can move` and remove the checkbox. We can then save the executable and debug it without having to worry about ASLR.
Stepping through the code, we can see an interesting string in `eax` after calling `initialize_key` (a.k.a. `win-exec-1-noaslr.402117`):
```
00408040 | 55                       | push ebp                                           |
00408041 | 8BEC                     | mov ebp,esp                                        |
00408043 | 83EC 74                  | sub esp,74                                         |
00408046 | A1 74B14700              | mov eax,dword ptr ds:[47B174]                      | eax:"The key is: 425"
0040804B | 33C5                     | xor eax,ebp                                        |
0040804D | 8945 FC                  | mov dword ptr ss:[ebp-4],eax                       |
00408050 | 68 6CB04700              | push win-exec-1-noaslr.47B06C                      | 47B06C:"Input a number between 1 and 5 digits: "
00408055 | E8 0B94FFFF              | call win-exec-1-noaslr.401465                      |
0040805A | 83C4 04                  | add esp,4                                          |
0040805D | 8D45 8C                  | lea eax,dword ptr ss:[ebp-74]                      |
00408060 | 50                       | push eax                                           | eax:"The key is: 425"
00408061 | 68 94B04700              | push win-exec-1-noaslr.47B094                      | 47B094:"%d"
00408066 | E8 4698FFFF              | call win-exec-1-noaslr.4018B1                      |
0040806B | 83C4 08                  | add esp,8                                          |
0040806E | C745 90 01000000         | mov dword ptr ss:[ebp-70],1                        |
00408075 | 837D 8C 09               | cmp dword ptr ss:[ebp-74],9                        | 9:'\t'
00408079 | 7E 19                    | jle win-exec-1-noaslr.408094                       |
0040807B | 8B4D 90                  | mov ecx,dword ptr ss:[ebp-70]                      |
0040807E | 83C1 01                  | add ecx,1                                          |
00408081 | 894D 90                  | mov dword ptr ss:[ebp-70],ecx                      |
00408084 | 8B45 8C                  | mov eax,dword ptr ss:[ebp-74]                      |
00408087 | 99                       | cdq                                                |
00408088 | B9 0A000000              | mov ecx,A                                          | A:'\n'
0040808D | F7F9                     | idiv ecx                                           |
0040808F | 8945 8C                  | mov dword ptr ss:[ebp-74],eax                      |
00408092 | EB E1                    | jmp win-exec-1-noaslr.408075                       |
00408094 | 837D 90 05               | cmp dword ptr ss:[ebp-70],5                        |
00408098 | 7E 16                    | jle win-exec-1-noaslr.4080B0                       |
0040809A | 68 98B04700              | push win-exec-1-noaslr.47B098                      | 47B098:"Number too big. Try again.\n"
0040809F | E8 C193FFFF              | call win-exec-1-noaslr.401465                      |
004080A4 | 83C4 04                  | add esp,4                                          |
004080A7 | 33C0                     | xor eax,eax                                        | eax:"The key is: 425"
004080A9 | E9 8B000000              | jmp win-exec-1-noaslr.408139                       |
004080AE | EB 1D                    | jmp win-exec-1-noaslr.4080CD                       |
004080B0 | 68 B4B04700              | push win-exec-1-noaslr.47B0B4                      | 47B0B4:"Initializing...\n"
004080B5 | E8 AB93FFFF              | call win-exec-1-noaslr.401465                      |
004080BA | 83C4 04                  | add esp,4                                          |
004080BD | 8B55 90                  | mov edx,dword ptr ss:[ebp-70]                      |
004080C0 | 52                       | push edx                                           |
004080C1 | 8B45 8C                  | mov eax,dword ptr ss:[ebp-74]                      |
004080C4 | 50                       | push eax                                           | eax:"The key is: 425"
004080C5 | E8 4DA0FFFF              | call win-exec-1-noaslr.402117                      |
004080CA | 83C4 08                  | add esp,8                                          | win-exec-1.exe
Input a number between 1 and 5 digits: 1
Initializing...
Enter the correct key to get the access codes: 425
Incorrect key. Try again.
```
No-go. Let's continue stepping. We are requested to enter our key at `win-exec-1-noaslr.4036ED` (a.k.a. `___acrt_iob_func`). We enter a random string (e.g. `1234`) and continue.
A few steps later, we see another interesting string in `ecx`:
```
004080F0 | 50                       | push eax                                           |
004080F1 | 6A 64                    | push 64                                            |
004080F3 | 8D4D 98                  | lea ecx,dword ptr ss:[ebp-68]                      |
004080F6 | 51                       | push ecx                                           | ecx:"The key is: 4253360"
004080F7 | E8 61AAFFFF              | call win-exec-1-noaslr.402B5D                      |
004080FC | 83C4 0C                  | add esp,C                                          |
004080FF | 8D55 98                  | lea edx,dword ptr ss:[ebp-68]                      |
00408102 | 52                       | push edx                                           |
00408103 | E8 ADACFFFF              | call win-exec-1-noaslr.402DB5                      |
00408108 | 83C4 04                  | add esp,4                                          |win-exec-1.exe
Input a number between 1 and 5 digits: 1
Initializing...
Enter the correct key to get the access codes: 4253360
Incorrect key. Try again.
```
Didn't work. But what if we try the complete string?
```console
E:\CTFs\pico\B1ll_Gat35>win-exec-1.exe
Input a number between 1 and 5 digits: 1
Initializing...
Enter the correct key to get the access codes: The key is: 4253360
Correct input. Printing flag: PICOCTF{These are the access codes to the vault: 1063340}
```
That actually gives us the flag, without any need to reverse the deeper levels.