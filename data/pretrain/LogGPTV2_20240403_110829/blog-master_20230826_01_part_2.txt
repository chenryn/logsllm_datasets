  3 |                                7839 | 3ce8ab6d54f2a7c38a075cdcc853c2ae  
  4 |                                 881 | 4cc6d2e410f9b34f06a45b65ddbc055c  
  5 |                                2643 | beeceabdba66d6d5f8f278f8af0dde5a  
  6 |                                3516 | aef3ab5795eeb9b621926c0c04091d44  
  7 |                                 703 | b26a2038ae2b0d0f1355c212742445c7  
  8 |                                9284 | 39271f49ad09da33add4f77adac37403  
  9 |                                4260 | 8f19c05ef83c33fd2a7dc133ee2e0e93  
(10 rows)  
postgres=# select * from local_t1_new limit 10;  
 id | CAST((random() * 10000) AS INTEGER) |               info                 
----+-------------------------------------+----------------------------------  
  0 |                                9379 | 65ca3162135590a9c49eaed527bb0717  
  1 |                                2050 | 83ff8d7aa48ee3fb06439905f07171f8  
  2 |                                 600 | 2e5df489239dc8c715ea5240cb1a5b1b  
  3 |                                7839 | 3ce8ab6d54f2a7c38a075cdcc853c2ae  
  4 |                                 881 | 4cc6d2e410f9b34f06a45b65ddbc055c  
  5 |                                2643 | beeceabdba66d6d5f8f278f8af0dde5a  
  6 |                                3516 | aef3ab5795eeb9b621926c0c04091d44  
  7 |                                 703 | b26a2038ae2b0d0f1355c212742445c7  
  8 |                                9284 | 39271f49ad09da33add4f77adac37403  
  9 |                                4260 | 8f19c05ef83c33fd2a7dc133ee2e0e93  
(10 rows)  
```  
3、使用duckdb生成csv格式的测试数据, 并写入OSS, 模拟连锁店、工厂的边缘端数据采集和上传行为.  
随机生成100万条记录, 并导出到oss的csv文件中. 包含id,c1,info,ts 四个字段.   
```  
COPY (select id, (random()*10000)::int c1, md5(random()::text) as info, now() as ts from range(0,1000000) as t(id)) TO 's3://tekwvr20230826180728/t2.csv'  
WITH (HEADER, DELIMITER ',');     
```  
3\.1、使用duckdb_fdw读取oss的数据(模拟读取连锁店、工厂的边缘端上传到云端oss的数据), 并写入到本地数据库中. 完成数据汇总.  
创建插件  
```  
create extension duckdb_fdw ;  
```  
创建sesrver  
```  
CREATE SERVER DuckDB_server FOREIGN DATA WRAPPER duckdb_fdw OPTIONS (database ':memory:');    
alter server duckdb_server options ( keep_connections 'true');      
```  
加载读取oss文件的httpfs插件  
```  
SELECT duckdb_execute('duckdb_server',       
$$      
load httpfs;    
$$);     
```  
设置当前duckdb fdw对应的连接oss的配置  
```  
SELECT duckdb_execute('duckdb_server',       
$$      
set s3_access_key_id='LTAI5tHhtw5amwf7EjHUHrTd';       
$$);      
SELECT duckdb_execute('duckdb_server',       
$$      
set s3_secret_access_key='PRpYMgVs195EpANJLPrTBv9F1aajLQ';       
$$);      
SELECT duckdb_execute('duckdb_server',       
$$      
set s3_endpoint='s3.oss-cn-shanghai.aliyuncs.com';       
$$);     
```  
创建读取oss内容的视图  
```  
SELECT duckdb_execute('duckdb_server',       
$$      
create or replace view v_t2 as       
SELECT * FROM 's3://tekwvr20230826180728/t2.csv';      
$$);     
```  
将duckdb的视图导入postgresql|polardb  
```  
IMPORT FOREIGN SCHEMA public limit to (v_t2)  FROM SERVER   
duckdb_server INTO public;  
```  
在postgresql|polardb可以读取存储在oss的csv文件了  
```  
postgres=# select count(*) from v_t2 ;  
  count    
---------  
 1000000  
(1 row)  
```  
将oss的csv文件导入到postgresql|polardb  
```  
create table local_t2 as select * from v_t2 ;  
SELECT 1000000  
postgres=# select count(*) from local_t2;  
  count    
---------  
 1000000  
(1 row)  
```  
查看oss的csv文件和导入到postgresql|polardb中的数据是否一致:  
```  
postgres=# select * from v_t2 limit 10;  
 id | CAST((random() * 10000) AS INTEGER) |               info               |           ts              
----+-------------------------------------+----------------------------------+-------------------------  
  0 |                                9504 | b37a70d10249ec1c19e3ff36d3ae5d9c | 2023-08-26 10:12:52.712  
  1 |                                3650 | 93ce8d8c9047d5d53c3f4c33bd76ec50 | 2023-08-26 10:12:52.712  
  2 |                                3998 | 00ea04f7bfa038a1092d0fd10e814f76 | 2023-08-26 10:12:52.712  
  3 |                                9354 | 70f54f82dab5c6eb6c921e683d02eca1 | 2023-08-26 10:12:52.712  
  4 |                                7991 | 1d9422dc7633f63ec4dfbe7b4f10e2c3 | 2023-08-26 10:12:52.712  
  5 |                                9652 | 872fc6c314f9f548dfedc3edea79ef70 | 2023-08-26 10:12:52.712  
  6 |                                1791 | 2cdeae2af5e21c5dead86e5d79754d57 | 2023-08-26 10:12:52.712  
  7 |                                8911 | 0cc5fb6556183173768a21f7ba31cec0 | 2023-08-26 10:12:52.712  
  8 |                                9281 | 97f7b99b3e80dca4bdf932e231ceb9dc | 2023-08-26 10:12:52.712  
  9 |                                 218 | f8a61afc533da2791d6b11d597c31389 | 2023-08-26 10:12:52.712  
(10 rows)  
postgres=# select * from local_t2 limit 10;  
 id | CAST((random() * 10000) AS INTEGER) |               info               |           ts              
----+-------------------------------------+----------------------------------+-------------------------  
  0 |                                9504 | b37a70d10249ec1c19e3ff36d3ae5d9c | 2023-08-26 10:12:52.712  
  1 |                                3650 | 93ce8d8c9047d5d53c3f4c33bd76ec50 | 2023-08-26 10:12:52.712  
  2 |                                3998 | 00ea04f7bfa038a1092d0fd10e814f76 | 2023-08-26 10:12:52.712  
  3 |                                9354 | 70f54f82dab5c6eb6c921e683d02eca1 | 2023-08-26 10:12:52.712  
  4 |                                7991 | 1d9422dc7633f63ec4dfbe7b4f10e2c3 | 2023-08-26 10:12:52.712  
  5 |                                9652 | 872fc6c314f9f548dfedc3edea79ef70 | 2023-08-26 10:12:52.712  
  6 |                                1791 | 2cdeae2af5e21c5dead86e5d79754d57 | 2023-08-26 10:12:52.712  
  7 |                                8911 | 0cc5fb6556183173768a21f7ba31cec0 | 2023-08-26 10:12:52.712  
  8 |                                9281 | 97f7b99b3e80dca4bdf932e231ceb9dc | 2023-08-26 10:12:52.712  
  9 |                                 218 | f8a61afc533da2791d6b11d597c31389 | 2023-08-26 10:12:52.712  
(10 rows)  
```  
4、分析汇总数据.   
窗口函数、聚合函数、分析函数通常用于数据分析.  
#### 对照  
使用Polardb|PG提供的方法成本很低, 性能好, 同时几乎不破坏各个网点的用户使用习惯.    
## 知识点      
oss  
fdw  
duckdb_fdw  
gdal: https://duckdb.org/docs/archive/0.8.1/extensions/spatial  
plpython3u  
parquet 格式  
窗口函数  
分析函数  
## 思考    
这种架构还适合什么应用场景?  
有什么产品已经具备这种serverless的数据湖思路?    https://motherduck.com/   
使用oss低廉的存储、随时随地可访问, 打破各个应用之间的数据孤岛?   
教学场景, 通过oss共享数据, 例如企业脱敏后的数据, 提供给学生进行数据分析和实验.   
如果数据文件非常多, 如何提升读取效率? 是否可以通过通配符一次性读取多个文件?    
为什么要将数据导入集中存储分析?  
parquet为什么更适合作为书记分析的文件格式?   
在PostgreSQL|polardb中除了使用duckdb_fdw导入oss的数据, 还有什么方法? 例如plpython3u?    
## 参考      
##### 202303/20230308_01.md   [《PolarDB-PG | PostgreSQL + duckdb_fdw + 阿里云OSS 实现高效低价的海量数据冷热存储分离》](../202303/20230308_01.md)    
##### 202212/20221209_02.md   [《PolarDB 开源版通过 duckdb_fdw 支持 parquet 列存数据文件以及高效OLAP》](../202212/20221209_02.md)    
##### 202209/20220924_01.md   [《用duckdb_fdw加速PostgreSQL分析计算, 提速40倍, 真香.》](../202209/20220924_01.md)    
##### 202010/20201022_01.md   [《PostgreSQL 牛逼的分析型功能 - 列存储、向量计算 FDW - DuckDB_fdw - 无数据库服务式本地lib库+本地存储》](../202010/20201022_01.md)    
##### 202306/20230624_01.md   [《使用DuckDB分析高中生联考成绩excel(xlst)数据, 文理选课分析》](../202306/20230624_01.md)    
##### 202211/20221124_02.md   [《DuckDB 0.6.0 支持 csv 并行读取功能, 提升查询性能》](../202211/20221124_02.md)    
##### 202210/20221026_03.md   [《DuckDB COPY 数据导入导出 - 支持csv, parquet格式, 支持CODEC设置压缩》](../202210/20221026_03.md)    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")