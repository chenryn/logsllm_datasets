title:Robust synchronization of software clocks across the internet
author:Darryl Veitch and
Satish Babu Korada and
Attila P&apos;asztor
Robust Synchronization of Software Clocks
Across the Internet
ARC Special Research Center
Indian Institute of Technology
Satish Babu
New Delhi, India
k PI:EMAIL
Attila P`asztor
Ericsson Hungary R&D
Budapest, Hungary
PI:EMAIL
Darryl Veitch
for Ultra Broadband
Information Networks
Dept. of Electrical and
Electronic Engineering
The University of Melbourne,
Australia
PI:EMAIL
ABSTRACT
Accurate, reliable timestamping which is also convenient and in-
expensive is needed in many important areas including real-time
network applications and network measurement. Recently the TSC
register, which counts CPU cycles in popular PC architectures, was
proposed as the basis of a new software clock which in terms of
rate performance performs as well as more expensive GPS alterna-
tives. Smooth and precise clock rate is essential to measure time
differences accurately. We show how to deﬁne a TSC based clock
which is also accurate with respect to absolute time. The clock is
calibrated by processing, in a novel way, timestamps contained in
the usual ﬂow of Network Time Protocol (NTP) packets between a
NTP server and the existing software clock, and TSC timestamps
made independently on the host side. Using real measurements
over 4 months, validated with a GPS synchronized hardware tim-
ing solution, the algorithm measured absolute time with a median
error of only 30 microseconds when using a nearby stratum-1 NTP
server. Results for two other servers are given. We also provide new
algorithms for the robust determination of clock rate. We exploit
the reliability of the available hardware to design synchronization
algorithms which are inherently robust to many factors including
packet loss, server outages, route changes, temperature environ-
ment, and network congestion.
Categories and Subject Descriptors
C.2.m [Computer-Communication Networks]: Miscellaneous;
D.4.m [Operating Systems]: Miscellaneous
General Terms
Algorithms, Reliability
Keywords
timing, synchronization, software clock, NTP, GPS, network mea-
surement, round-trip time
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’04, October 25–27, 2004, Taormina, Sicily, Italy.
Copyright 2004 ACM 1-58113-821-0/04/0010 ...$5.00.
1. MOTIVATION
The availability of an accurate, reliable, and high resolution clock
is fundamental to most complex devices, and computers running
multi-tasking operating systems such as Unix are far from the ex-
ception. Ongoing synchronization to a time standard is necessary
to keep the offset of such a clock, that is its departure from the true
∗
time
at a given time, to within acceptable bounds. A common way
to achieve this for networked computers is to discipline the system
software clock (SW) through the algorithms associated with the
Network Time Protocol (NTP) [1, 2], which allows NTP packets
containing timestamp information to be exchanged between NTP
time server(s) and the host across a network. The algorithms ﬁlter
and process these timestamps, determine the offset, and deliver rate
and offset adjustment recommendations to the SW clock.
For many purposes this SW-NTP clock and synchronization so-
lution works well. NTP is designed to provide offset accuracy
bounded by the round-trip time (RTT) between the server and the
client, and under ideal circumstances offset can be controlled to as
low as 1ms. For more demanding applications however, the per-
formance of the SW-NTP clock is insufﬁcient. Offset errors can
be well in excess of RTT’s in practice, and more importantly, are
susceptible to occasional larger reset adjustments which can in ex-
treme cases be of the order of seconds. In other words, the SW-NTP
clock is not reliable enough and lacks robustness. In addition, in the
SW-NTP solution the rate or frequency of the clock is deliberately
varied as a means to adjust offset. Whilst this conveniently pre-
serves ‘causality’ (assuming no resets), it results in erratic rate per-
formance. A smooth and accurate clock rate is a highly desirable
feature as it determines the relative accuracy of time differences.
Taking differences of timestamps is basic to most applications, and
in the case where they are made by the same clock, any constant
error in offset is cancelled, leaving rate as the key clock character-
istic.
One application where these issues are important is inexpensive
measurement of packet switched networks, where off the shelf PC’s
are used to monitor data packets as they pass by the network inter-
face. The drawbacks of the SW-NTP clock, as for example reported
in [3, 4, 5], are widely recognised in the network measurement
community. They have led many networking researchers to return
to local rather than remote clock synchronization. The Test Trafﬁc
Measurement network of RIPE NCC for example [6], consisting
of over 100 customised PC’s across Europe and elsewhere, uses
∗
Newtonian space-time will be assumed in this paper.
locally attached Global Positioning System (GPS) based disciplin-
ing of the standard SW clock, which improves synchronization to
around 10µs. The simple active probing based measurements of
this network do not require high accuracy, and nominally the SW-
NTP clock would have been sufﬁcient (for example to give one-way
delays to a few milliseconds). Instead, the effort was made to install
GPS synchronization in every node. Although GPS is no longer an
expensive technology as such, the need for roof access to avoid
intermittent reception results in long installation delays (and may
not be possible), and potentially high installation costs, making a
multi-node measurement effort such as RIPE NCC’s extremely am-
bitious, and even modest measurement efforts problematic. The ex-
ploitation of radio based alternatives for synchronization relies on
the presence of the appropriate network and also implies additional
hardware. To avoid these problems, it is desirable to provide im-
proved network based synchronization with ‘GPS-like’ reliability,
and increased accuracy, using inexpensive PC’s with no additional
hardware.
In [5] a new clock was proposed which made signiﬁcant progress
towards this aim. It is based on the TimeStamp Counter (TSC) reg-
ister, found in Pentium class PCs and other architectures, which
†
counts CPU cycles
. The essence of this clock is very simple. The
TSC register is used to keep track of time at very high resolution,
for example 1 nanosecond for a 1 gigahertz processor. Updating
of this register is a hardware operation, and reading it and storing
its value involves only very fast memory accesses. Provided that
we have an accurate estimate of the true duration, p, of a clock
cycle, time differences measured in TSC units can readily be con-
verted to time intervals in seconds: ∆(t) = ∆(TSC) ∗ p. This
simple idea is feasible because of the fact that CPU oscillators have
high stability, so that the cycle period is, to high precision, constant
over quite long time periods, and residual offset errors accumulate
only slowly. Note that the TSC is already routinely employed in
software clock solutions, although typically its role is to interpo-
late between the timer interrupts generated by another hardware
timing source on the motherboard, rather than being the primary
source. By ‘TSC clock’ we are really referring to the overall so-
lution described here, its principles and methods, and in particular
to the synchronization algorithms used and the techniques insuring
robustness, and not simply to the fact that the TSC is employed.
There are two areas in which our clock differs markedly from the
SW-NTP alternative, even though, as we describe in detail later, we
propose a synchronization technique which also makes use of the
NTP protocol and server network. The ﬁrst is that in SW-NTP the
emphasis is ﬁrmly on offset, rate performance is not independently
considered, whereas in our TSC clock, rate is seen not only as the
more important of the two, but also the logical foundation stone
on which to construct a robust clock. Another way of expressing
this key difference is that we keep frequency and offset calibration
as decoupled as possible, instead of closely integrating them into
a single dynamical system. The second is that SW-NTP implicitly
follows the philosophy that the host clock is inherently inaccurate,
so that it must be constantly disciplined by a reference source. In
our approach the view is that, on the contrary, the host clock is in-
herently ‘good’, it simply must be calibrated. This dramatic change
of viewpoint strongly inﬂuences the ﬁltering and estimation pro-
cedures used to extract the reference timing information from the
timestamps received across the network, and both motivates and
justiﬁes a revisiting of this question.
The ﬁrst aim of this paper is to address in detail the question of
robust absolute or offset synchronization in the context of the TSC
†
A more speciﬁc term which is sometimes used is CPU Clock
Counter (CCC)
clock. Offset synchronization is a very different, and more difﬁ-
cult problem than that of rate synchronization/calibration, which
was not addressed at all in our previous work [5]. Here we describe
principles, a methodology, and ﬁltering procedures which make ac-
curate offset measurement and thereby reliable absolute synchro-
nization possible. We work within the context of the TSC based
clock, however the algorithms could be applied more generally to
other timing sources. We make use of the timestamps contained in
the normal ﬂow of NTP packets to and from the SW-NTP clock and
a nearby NTP server. This allows the system and applications to run
as normal, and no change to the NTP protocol itself is required. In
parallel, TSC timestamps of the NTP packets are also made, and
processed in a new way to produce the TSC-NTP clock. In fact we
explain the need for, and propose, two clocks: a difference clock
used for measuring time differences (up to a certain scale), and an
absolute clock when absolute timestamps are required, for exam-
ple when measuring one-way delay in networks. We believe that
pointing out the need for this differentiation, which arises directly
from a rate centric view, is in itself of some importance. The SW-
NTP clock is an absolute clock only, and is therefore fundamentally
unsuitable for many applications.
Two methods of remote calibration over a network were given
in our earlier work [5] for determining the period p of the TSC
cycle. One of these was based on NTP servers, and shares some
features with the method we propose here (software is available
at [7]), however neither were robust enough for unsupervised use
under real-world conditions, and neither dealt with offset measure-
ment/calibration. The second aim of this paper is to provide al-
gorithms both for rate synchronization (p measurement), and offset
synchronization, which are not just accurate, but also highly robust.
By this we understand an ability to provide accurate results even
under less than ideal conditions, as well as reasonable performance
even under ‘catastrophic’ conditions. In this regard the ‘local clock
is good’ viewpoint is invaluable. If something goes wrong with the
remote timestamp data, our reaction can legitimately be ‘change
nothing’, rather than continuing to adjust the clock according to
faulty or extremely variable timestamps. The algorithms we de-
scribe here take into account a variety of factors which our earlier
work did not, and are substantially different, although based on the
same core ideas.
The end result is a set of algorithms which, provided basic but
reasonable conditions are satisﬁed, give reliable rate performance
to better than 1 part in 107, or 0.1 Parts Per Million (PPM), and
offset accuracy which under achievable conditions can be of the
order of 0.1 ms. Using a nearby NTP server, over a period of 3
months a median offset error of around 0.03 ms was obtained, with
an inter-quartile range of only 15µs. Although not sufﬁcient to
address all needs, particularly for high performance and high rate
network monitoring where a specialist solution such as of use of lo-
cally synchronised DAG cards [8] is required, it considerably raises
the bar for the accuracy, and more importantly, the reliability, of
synchronization achievable inexpensively across a network. It is
more than sufﬁcient, for example, to enable the removal of the GPS
receivers from the measurement machines in the RIPE NCC test-
box network. Other potential applications abound. In networking
they include network tomography, enhancing the performance of
services and protocols based on one-way or round-trip delay, and
improving the performance of adhoc and sensor networks.
This paper reexamines the synchronization problem in consid-
erable depth and detail. Although at a high level the topic is not
new by any means, and solutions exist, we believe that a thorough
treatment, with careful attention to detail at each stage, was essen-
tial to arrive at a solution which delivers a signiﬁcant step up in
robustness and accuracy. The rate centric treatment is new and is
the cornerstone of this ability.
2. PRELIMINARIES
In this section we provide background on the infrastructure un-
derlying our clock, its synchronization and characterization.
2.1 Terminology
The natural or true clock, denoted simply by t, runs at a rate of
1 second per second, and has an origin t = 0 at some arbitrary
instant.
In practice one must use an imperfect clock, which we
refer to as ‘the clock’, which reads C(t) at the true instant t. The
resolution of C(t) is the smallest unit by which it is updated. The
offset θ(t) of the clock is its error at true time t:
θ(t) ≡ C(t) − t.
(1)
The skew γ is roughly the difference between the clock’s rate and
the reference rate of 1. The model which captures this idea in its
simplest form we call the Simple Skew Model (SKM). It assumes
that
SKM:
θ(t) = θ0 + γ t.
(2)
To reﬁne the concept of skew consider the following general model
θ(t) = θ0 + γ t + ω(t),
(3)
where the ‘simple skew’ γ is just the coefﬁcient of the deterministic
linear part, ω(t) being a remainder with no linear component obey-
ing ω(0) = 0 which encapsulates the deviations from the SKM. It
can contain both deterministic and random components.
The oscillator stability [9] partially characterizes ω(t) via the
family, indexed by time-scale τ , of relative offset errors:
ω(t + τ ) − ω(t)
θ(t + τ ) − θ(t)
yτ (t) =
τ
= γ +
τ
.
(4)
In other words, yτ (t) is the total rate error at time t when measured
over time scale τ . The series yτ (t) can be thought of as the mean
skew γ arising from the SKM plus those random variations which
impact at time scale τ .
Signiﬁcant Time Interval
Target RTT to NTP server
Typical Internet RTT
Standard unit
Local SKM validity
1 Daily cycle
1 Weekly cycle
Interval
Duration
1ms
100ms
1s
τ ∗=1000s
86400s
604800s
Error rate, PPM
0.02
0.1
0.02ns
0.1ns
10ns
0.1µs
0.1ms
8.6ms
60.5ms
2ns
20ns
20µs
1.7ms
12.1ms
Table 1: Absolute errors at key error rates and intervals. The
most important examples are in bold.
To discuss the size of relative offset errors (rate errors), we use
the dimensionless unit of Parts Per Million (PPM). Table 1 trans-
lates this into absolute error over key time intervals: ∆(offset) =
∆(t) ∗ (rate-error). The signiﬁcance of the error rates in the ta-
ble, discussed in detail below, are i) target accuracy of ‘local’ rate
estimates: 0.02PPM, ii) bound on clock stability: 0.1 PPM, For
comparison, the typical skew of CPU oscillators from nominal rate
is around 50PPM [9].
2.2 The TSC Clock
As described in the introduction, we propose a clock based on the
TSC register which counts CPU cycles. The value of this register
at time t is denoted by TSC(t), and we set TSC0 = TSC(0). The
construction of the clock C(t) from the counter is based on the
intuition of the simple skew model, for which the oscillator has
a constant period p, implying that t = (TSC(t) − TSC0)p.
practice we must obtain estimates, ˆp of p, and dTSC0 of TSC0. The
In
deﬁnition of the clock C(t) is therefore
SKM: C(t) ≡ (TSC(t) − dTSC0)ˆp = TSC(t)ˆp + C,
where the constant C ≡ −dTSC0 ˆp tries to align the origins of C(t)
and t, but with some error. It is easy to show that the error p ≡
ˆp − p in the period estimate and TSC ≡ dTSC0 − TSC0 in the
origin estimate leads to an offset of θ(t) = p/p · t − ˆp TSC,
which, comparing to equation (2), identiﬁes γ = p/p = ˆp/p − 1
and θ0 = C(0) = TSC0 ˆp + C.
(5)
As we explore below in detail, the SKM idea does not hold over
all timescales, so the above estimates must be taken as time vary-
ing. A key consequence is that the variation of offset over time
is no longer a simple function of γ, and so must be measured in-
dependently, that is the clock drift must be tracked. In practice we
therefore use two forms of a corrected clock, depending on whether
time differences are needed (valid up to SKM timescales, but also
useful well beyond it, as described below), or absolute time:
difference:Cd(t) ≡ TSC(t)ˆp(t),
(6)
absolute: Ca(t) ≡ TSC(t)ˆp(t) + C − ˆθ(t) = C(t) − ˆθ(t), (7)
where ˆp(t) is the current period estimate, and ˆθ(t) is the current
estimate of the offset of C(t), which we then correct for. Only
by deﬁning two clocks in this way can we provide an absolute or
‘offset calibrated’ clock without disturbing the smooth rate of the
underlying TSC clock, which is the basis of its excellent rate perfor-
mance as described in [5]. The less accurate absolute clock should
only be used for applications which truly require it. The difference
clock, used to measure time differences, is much more accurate
when used to measure intervals ∆(t) which are small compared
, deﬁned below. As τ ∗ ≈ 1000
to the critical ‘SKM scale’ τ ∗
[sec], this includes most cases of importance to trafﬁc measure-
ment. Above this scale however, clock drift is signiﬁcant and the
time difference will be more accurately measured using the abso-