message itself as an input to PRF φ. This PRF-based mod-
iﬁcation does not have any eﬀect on the OT security proof
as all parallel OT instances are verbatim copies.
Other Possibilities.
A natural question to ask is whether OT is really required,
or whether another protocol could achieve the desired goal
more eﬃciently. Although PIR protocols appear to be an
alternative, they are not an acceptable alternative because
they leak routing information. Further, computational PIR
protocols have similar cost as the selected OT protocol [32].
For that matter, most non-trivial PIR is essentially OT as
well.
Theoretically better OT protocols also exist, e.g. Lip-
1This is sometimes denoted “receiver” in the OT literature;
we use the term “chooser” to avoid confusion with the overall
receiver of message m in the surrounding DHT protocol.
2This is typically denoted “sender” in the OT literature; we
use the term “server” to avoid confusion with the overall
sender of message m in the surrounding DHT protocol.
in theory,
maa’s OT protocol[27], which provides 1-out-of-ν OT with
O(log2 ν) multiplicative overhead on communication (of a
single entry). For the proposed protocol by Naor and Pinkas,
the overhead is linear which,
is clearly worse.
However, our approach is better in the present setting when
we consider numbers from real-world DHTs. With more
than million peers in a practical DHT, we will have ν ≈ 20.
For ν ≈ 20, log2 ν ≈ 20 and linear communication without
any hidden constant is quite acceptable. A generic 1-out-of-2
OT protocol of Peikert et al. [36] requires only two messages,
and roughly ﬁve exponentiations per party. However, this
is still more than the amortized cost of the 1-out-of-ν OT
of Naor and Pinkas and we do not use it. While we cannot
rule out the possibility of a more eﬃcient protocol, it seems
highly unlikely.
Finally, hiding the range values in routing table entries
seems possible, but it is most likely infeasible in practice.
Blake and Kolesnikov [8] provides a 1-out-of-2 conditional
OT (COT) based on the greater-than relation. Their pro-
tocol has a blowup of a factor linear in the bitlength of
the key. This blowup is needed in order to compute the
greater-than relation. In addition to this, there are two crit-
ical issues that must be solved before COT can be used for
hiding the range values: 1) the present work [8] requires a
1-out-of-ν conditional oblivious transfer 2) the protocols of
[8] are only secure against semi-honest adversaries. Neither
seems impossible to solve, but both appear to incur a sig-
niﬁcant blowup. Nevertheless, as no routing information is
lost through range boundaries, we need not consider these.
5. ADDING QUERY PRIVACY
Young et al. [52] present two robust communication proto-
cols using quorums and threshold cryptography: RCP-I and
RCP-II. As described in Section 3.2, both these protocols
work in the general communication architecture shown in
Figure 2. They use threshold BLS signatures over the DKG
architecture explained in sections 4.1 and 4.2. In this sec-
tion, we provide query privacy to the above protocols using
the OT primitive explained in Section 4.3 to deﬁne protocols
RCPqp-I and RCPqp-II.
5.1 System Setup
We start our discussion by describing the setup required
for our protocols. For clarity of description, we also brieﬂy
review routing tables (RT ) in quorum-based DHTs.
Initiation. Before the system becomes functional, the ini-
tiator has to choose appropriate groups and other setup
parameters for the BLS signature and OT protocols.
Note that there are no trust assumptions required dur-
ing this step, as these parameters can be selected from
the well-known standards.
Distributed Key Generation. A DKG instance is exe-
cuted, when a quorum gets formed in DHTs. At the
end of an execution, each quorum Qi is associated with
a (distributed) public/private key pair (P KQi , skQi ).
Note that only those quorums linked to Qi, and not
everyone in the network, need to know P KQi . Fur-
ther, every peer p ∈ Qi possesses a private key share
(skQi )p of skQi . Unlike the quorum public/private key
pair of Qi which must be known to all quorums to
which Qi is linked in the quorum topology, only the
members of Qi need to know the corresponding public
key shares (cid:100)P K Qi . The private key r of PRF φ(r,·) re-
quired in RCPqp-I can easily be generated during this
DKG execution.
Routing Table Setup. Without loss of generality, we as-
sume a Chord-like DHT [47]. When a quorum gets
formed in DHTs, it determines its neighbors and forms
its routing table RT . For a quorum Qi, each entry of
its routing table has the form RT Qj = [Qj, p, p(cid:48), P KQj ,
In this entry, peer p ∈ Qj and peer p(cid:48) ∈ Qj−1
ts].
where quorum Qi links to quorum Qj and Qj−1 in the
quorum topology and p and p(cid:48) are respectively located
clockwise of all other peers in Qj and Qj−1. P KQj
is the quorum public key of Qj generated using DKG,
and ts is a time stamp for when this entry was created.
Quorum Qj is responsible for the identiﬁer space be-
tween identities p and p(cid:48). RT entries of Qi are set such
that the complete identiﬁer space is covered by them.
5.2 Adding Query Privacy to RCP-I: RCPqp-I
Protocol RCP-I works deterministically. Here, we include
a privacy preserving mechanism for queries in RCP-I using
the OT protocol described in Section 4.3. The enhanced
protocol (RCPqp-I) appears in Figure 3, which we outline as
follows.
Assume that p ∈ Q1 is searching for a key and the target
is a set of peers D ⊆ Q(cid:96). Let the search path go through
quorums Q1, . . . , Q(cid:96). Peer p begins by sending a request
[p, paddr, ts1] to all peers in its quorum Q1., where ts1 is a
time stamp. Unlike the original RCP-I, the key correspond-
ing to the intended destination of the message is not included
here. Each honest peer q ∈ Q1 checks if p’s request follows
the rule-set as described in Section 3.2.
If there is no vi-
olation, q sends its signature share to p, who interpolates
those shares to generate a signature S1 = [p|paddr|ts1]skQ1
.
In each intermediate step (i = 2 to (cid:96) − 1), p sends its most
recent signature Si−1 and a new time stamp tsi to each peer
q ∈ Qi. Since Qi is linked to Qi−1 in the quorum topology,
each peer q knows public key P KQi−1 to verify Si−1. If Si−1
is veriﬁed and tsi is valid, peer q sends back its signature
share on [p|paddr|tsi]. Peer p collects the shares to form Si
and majority ﬁlters on the routing information for Qi+1. If
veriﬁcation of Si fails, peer p sends all shares back to every
party in Qi, who help p by ﬁltering the invalid shares out.
Finally, for Q(cid:96), p sends m along with S(cid:96)−1 to peers in the
target set D in Q(cid:96).
It still remains to see how Qi tells p the correct Qi+1 as
the next quorum without knowing the key being searched for.
We accomplish this using the OT protocol. Along with Si−1
and tsi, p also sends an OT-initiation request to every peer
in q ∈ Qi. Peer q responds back with the entry-wise sym-
metrically encrypted (AES) routing table RT Qi , the OT-
setup message, and the upper and lower bounds of ranges in
RT Qi . Note that since all quorum members use the same
randomness (due to the use of a PRF where everyone holds
the private key), the messages from all honest parties will
be the same. Peer p determines an index in RT Qi for the
next quorum by searching for key in the received ranges and
sends an OT-request for that index. Peer q then computes
and sends the OT-response. Using this response, peer p ob-
tains the symmetric key corresponding to the queried index
and decrypts the appropriate entry in RT Qi to determine
Initial Step: p ∈ Q1 with Quorum Q1
every peer q ∈ Q1
=⇒
⇐=
if the request is legitimate, reply with a signature
share
Intermediate Steps: p ∈ Q1 with Quorum Qi for i = 2 to (cid:96) − 1
every peer q ∈ Qi
peer p
sends a request [p|paddr|ts1]
peer p
interpolate Si−1 = [p|paddr|tsi−1]skQi−1
using the
received shares and send Si−1 and a new tsi. Re-
quest an OT initiation
interpolate Si = [p|paddr|tsi]skQi
using the re-
ceived shares and verify it using P KQi .
If in-
valid, sends all signature shares back. Send an
OT-request for the index corresponding to the
searched key
=⇒
⇐=
=⇒
⇐=
verify Si−1 using P KQi−1 and validates tsi.
If
successful, send a signature share, an OT-setup
message, the ranges in RT of Qi and the entry-
wise encrypted RT of Qi
verify all shares using (cid:100)P K Qi and inform p of valid
shares. Send an OT-response
Use the received OT-responses, if any, to deter-
mine the next quorum Qi+1
Final Step: p ∈ Q1 with Quorum Q(cid:96)
peer p
send S(cid:96)−1 along with its request m
=⇒
D ⊆ Q(cid:96)
Figure 3: RCPqp-I: RCP-I with Query Privacy
the next quorum Qi+1. Any wrongdoing by Byzantine peers
in RT Qi range tables, encrypted RT Qi blocks and OT exe-
cutions are taken care of by the majority action. As p knows
Q2 using its own routing table, there is no OT involved in
the initial step.
Notice that it is also possible for peer p to use OT in
the ﬁnal step while communicating with the target set D in
Q(cid:96), if the privacy application demands it. In that case, the
target set D only knows that the queried key is one of its
keys, but cannot determine the exact key.
The correctness of protocol RCPqp-I follows directly from
that of protocol RCP-I and we refer the readers to [53] for
a detailed proof. Although the encrypted routing tables (a
few kilobytes in size) are sent in our privacy-preserving ap-
proach as compared to the individual routing table entires
in RCPqp-I, it does not aﬀect the message complexity of the
protocol. The message complexity of protocol RCPqp-I re-
mains exactly the same as protocol RCP-I, which is equal
to O(log2 n). We discuss the increase in computational cost
and other systems matters in Section 6.
5.3 Adding Query Privacy to RCP-II: RCPqp-II
Protocol RCP-II utilizes signed routing table (RT ) in-
formation and reduces the message complexity in protocol
RCP-I by a linear factor (in expectation) using a uniformly
random selection of peers in the quorums. Here, all RT
entries are signed separately by the quorum whenever RT s
are modiﬁed. In particular, every peer in the quorum, using
their DKG private key shares, generates and sends signature
shares, which are then interpolated to obtain signed RT en-
tries. The OT setup and the OT protocol remain exactly
the same as in RCPqp-I. The enhanced protocol (RCPqp-II)
appears in Figure 4, which we outline as follows.
and [RT Q3 ]skQ2
. Here, [P KQj]skQi
Initially, for simplicity, assume that peers act correctly.
The initial step, where p communicates within its quorum,
Q1, remains exactly the same. Each peer in Q1 receives
[p|paddr|ts] from p. If the request does not violate the rule set,
then peer p receives signature shares and computes M1 =
. Next, p knows the membership of Q2 which
[p, paddr, ts]skQ1
belongs to its RT , and selects a peer q2 ∈ Q2 uniformly
at random without replacement. Peer p sends M1 to q2.
The correct q2 veriﬁes M1 using P KQ1, and replies with
[P KQ1]skQ2
denotes the
quorum public key of Qj signed by quorum Qi as neighbor-
ing quorums know each others’ public keys, and [RT Qj ]skQi
denotes the routing entry for Qj signed by Qi. Peer p veriﬁes
[P KQ1]skQ2
, and checks if the time stamp
is valid.
]. The
idea is to allow some peer in Q3 to verify P KQ1 and M1
using a signature chain. Further, p can check the response
from some peer in Q3 in the next step using P KQ3 included
in RT Q3 . This process repeats with minor changes for the
remaining steps until p reaches the destination quorum Q(cid:96).
If any peer does not respond in the amount of time prede-
ﬁned by the weak synchrony assumption [12] (as described
in Section 3.1) or responds incorrectly, the protocol proceeds
by choosing uniformly at random another peer in the quo-
rum. Note that any attempt by a malicious peer to return
incorrect information is detectable.
If so, p constructs M2 = [M1|[P KQ1]skQ2
and [RT Q3 ]skQ2
It still remains to see how the OT executions for key are