### 5.7.3 重定向标准错误

为了重定向标准错误，可以指定文件描述符 2。以下是一个示例，以帮助更好地理解这一概念。在这个例子中，`grep` 命令在 `missiles` 文件中搜索 `trident` 字符串：

```sh
$ grep "trident" missiles
```

如果 `grep` 命令没有找到该文件，默认情况下会向终端输出一个错误信息。现在，我们将错误重定向到 `/dev/null`（实际上是系统的垃圾箱）：

```sh
$ grep "trident" missiles 2>/dev/null
```

这样，所有的错误输出都会被发送到 `/dev/null`，而不会出现在屏幕上。

如果你希望保存重要的错误信息，可以将错误重定向到一个文件中。例如，将错误保存到 `grep.err` 文件中：

```sh
$ grep "trident" missiles 2>grep.err
```

此外，还可以将错误追加到一个文件中。这对于使用一组命令完成同一任务时非常有用。在下面的例子中，两个 `grep` 命令的错误都被追加到同一个文件中：

```sh
$ grep "trident" missiles 1>output.txt 2>>error.log
$ grep "submarine" missiles 1>>output.txt 2>>error.log
```

### 5.8 结合使用标准输出和标准错误

一种快速发现错误的方法是先将输出重定向到一个文件中，然后再将标准错误重定向到另一个文件中。以下是一个示例：

假设我有两个审计文件，其中一个确实存在且包含一些信息，而另一个由于某种原因已经不存在（但我不清楚）。我想将这两个文件合并到 `accounts.out` 文件中：

```sh
$ cat account_qtr.doc account_end.doc 1>accounts.out 2>accounts.err
```

如果出现错误，相应的错误将会保存在 `accounts.err` 文件中。这种方法可以帮助我快速发现 `account_end.doc` 是否存在问题。

### 5.9 合并标准输出和标准错误

在合并标准输出和标准错误时，需要注意 shell 是从左至右解析命令的。以下是一个示例：

```sh
$ cleanup >cleanup.out 2>&1
```

在这个例子中，`cleanup` 脚本的输出和错误都被重定向到 `cleanup.out` 文件中。

另一个示例：

```sh
$ grep "standard" * >grep.out 2>&1
```

在这个例子中，`grep` 命令的标准输出和标准错误都被重定向到 `grep.out` 文件中。通过使用 `2>&1`，可以将所有输出捕获到一个文件中，以便记录任何可能的错误。

### 5.10 exec

`exec` 命令用于替换当前 shell；换句话说，它不会启动子 shell。使用此命令时，现有环境会被清除，并重新启动一个新的 shell。其一般形式为：

```sh
exec command
```

其中的 `command` 通常是一个 shell 脚本。

`exec` 命令的一个常见用法是在用户的 `.profile` 文件末尾执行一些增强安全性的脚本。如果用户输入无效，shell 将被关闭并返回到登录提示符。`exec` 还常用于通过文件描述符打开文件。

### 5.11 使用文件描述符

可以使用 `exec` 命令通过文件描述符打开和关闭文件。以下是一个示例脚本，它使用文件描述符 4 从 `stock.txt` 文件中读取两行内容并回显：

```sh
exec 4<stock.txt
read -u 4 line1
read -u 4 line2
exec 4<&-
echo "$line1"
echo "$line2"
```

`stock.txt` 文件的内容如下：

```
Apple
Google
```

运行结果：

```
Apple
Google
```

这是一个简单的文件描述符应用示例。在后续章节中，我们将在讲解循环时给出一个更复杂的示例，展示如何使用文件描述符代替 `cp` 命令来拷贝文本文件。

### 5.12 小结

重定向是 shell 中的一个重要部分，通过它可以指定命令的输入并将错误记录到单独的文件中，从而方便地查找问题。本书通篇可见重定向的应用。文件描述符（3-9）的应用将在后续章节中结合循环方法进一步讨论。

---

### 第6章 命令执行顺序

在执行某个命令时，有时需要依赖于前一个命令是否成功执行。例如，你可能希望将一个目录中的文件全部拷贝到另一个目录后删除源目录中的文件，但在删除之前需要确保拷贝成功，否则可能会丢失所有文件。

本章将讨论：

- 命令执行控制
- 命令组合

#### 6.1 使用 &&

`&&` 用于在第一个命令成功执行后执行第二个命令。其一般形式为：

```sh
命令1 && 命令2
```

示例：

```sh
$ cp file1 file2 && echo "Copy successful"
```

如果 `cp` 命令成功执行，`echo` 命令才会被执行。

更实用的示例：

```sh
$ mv /apps/bin /apps/dev/bin && rm -r /apps/bin
```

在这个例子中，`/apps/bin` 目录将被移动到 `/apps/dev/bin`，只有在移动成功后才会删除 `/apps/bin` 目录。

```sh
$ sort quarter_end.txt > quarter.sorted && lp quarter.sorted
```

在这个例子中，`quarter_end.txt` 文件将被排序并输出到 `quarter.sorted`，只有在排序成功后才会打印 `quarter.sorted` 文件。

#### 6.2 使用 ||

`||` 用于在第一个命令失败后执行第二个命令。其一般形式为：

```sh
命令1 || 命令2
```

示例：

```sh
$ cp file1 file2 || echo "Copy failed"
```

如果 `cp` 命令失败，`echo` 命令将会被执行。

更实用的示例：

```sh
$ comet month_end.txt || mail -s "Comet script failed" user@example.com
```

在这个例子中，`comet` 脚本将对 `month_end.txt` 文件进行处理，如果脚本失败，将发送一封邮件通知用户。

#### 6.3 用 ( ) 和 { } 将命令结合在一起

如果希望将多个命令组合在一起执行，shell 提供了两种方法：可以在当前 shell 或子 shell 中执行一组命令。

- 在当前 shell 中执行一组命令：

  ```sh
  (命令1; 命令2; ...)
  ```

- 在子 shell 中执行一组命令：

  ```sh
  {命令1; 命令2; ...}
  ```

示例：

```sh
$ comet month_end.txt || (mail -s "Comet script failed" user@example.com; exit)
```

在这个例子中，如果 `comet` 脚本失败，将发送一封邮件并退出 shell。

```sh
$ sort quarter_end.txt > quarter.sorted && {cp quarter.sorted /logs/; lp quarter.sorted;}
```

在这个例子中，如果 `sort` 命令成功执行，将把 `quarter.sorted` 文件复制到日志目录并打印。

#### 6.4 小结

在编写 shell 脚本时，使用 `&&` 和 `||` 对构造条件语句非常有用。这些方法可以根据前一个命令的返回值来控制后续命令的执行，从而实现更复杂的逻辑控制。

---

### 第二部分 文本过滤

### 第7章 正则表达式介绍

随着对 UNIX 和 Linux 的熟悉程度加深，正则表达式的使用变得越来越重要。正则表达式是一些特殊或不特殊的字符串模式的集合，用于从文件或命令输出中抽取或过滤文本。

#### 7.1 基本元字符集及其含义

| 元字符 | 含义 |
|--------|------|
| `^`    | 匹配行首 |
| `$`    | 匹配行尾 |
| `*`    | 匹配前面的单字符零次或多次 |
| `[ ]`  | 匹配方括号内的任意一个字符，可以使用 `-` 表示范围，如 `[a-z]` |
| `\`    | 屏蔽元字符的特殊含义 |
| `.`    | 匹配任意单字符 |
| `pattern\{n\}` | 匹配前面的 `pattern` 出现 `n` 次 |
| `pattern\{n,\}` | 匹配前面的 `pattern` 至少出现 `n` 次 |
| `pattern\{n,m\}` | 匹配前面的 `pattern` 出现 `n` 到 `m` 次 |

这些基本元字符集在 `grep`、`sed` 和 `awk` 等文本处理工具中广泛使用。通过掌握这些元字符，可以更灵活地处理和过滤文本数据。