### How to Log SSH Client Connections and Commands

I am seeking a method to log the SSH commands that users execute on a server. For example, if a user named Alex performs the following commands on my server:

```sh
$ cd /tmp
$ touch myfile
$ ssh staff@10.0.0.1
$ ssh staff@10.0.0.2
$ vim anotherfile
$ ssh alex@192.168.0.12
```

I would like to log the SSH commands in a file, with the output looking like this:

```
[2014-07-25 10:10:10] Alex : ssh staff@10.0.0.1
[2014-07-25 10:18:20] Alex : ssh staff@10.0.0.2
[2014-07-25 11:15:10] Alex : ssh alex@192.168.0.12
```

I am only interested in logging when and to which server the user connected via SSH, not what they did during the session.

The user is not using `bash`, and I prefer not to manipulate `.bash_history` as it can be modified by the user.

### Possible Solutions

There are several ways to achieve this. Here are three potential methods:

1. **Kernel-Level Auditing (Recommended)**
   - Use a kernel-level auditing tool such as `auditd` or `acct`. These tools can log system calls, including `execve`, which is used to execute commands. This method is more secure and untraceable by the user.
   - **Resources:**
     - [Linux Audit Subsystem](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-using_the_audit_system)
     - [Using `auditd` for Command Logging](https://www.linuxjournal.com/content/using-audit-framework-linux)

2. **Shell Environment Modification**
   - Modify the shell environment to log the commands. This can be done by adding a script to the shell's initialization files (e.g., `.profile`, `.zshrc`).
   - **Bashrc Solution:**
     - [How to log commands executed by all the users in Linux?](https://serverfault.com/questions/35681/how-to-log-commands-executed-by-all-the-users-in-linux)
   - **Bash Trap Solution:**
     - [Bash: History to Syslog](https://unix.stackexchange.com/questions/11851/bash-history-to-syslog)

3. **Custom Scripting**
   - Write a custom script that intercepts and logs SSH commands. This can be done by wrapping the `ssh` command with a script that logs the necessary information before executing the actual `ssh` command.
   - **Example:**
     ```sh
     #!/bin/sh
     LOGFILE="/var/log/ssh_commands.log"
     TIMESTAMP=$(date +"%Y-%m-%d %T")
     USERNAME=$(whoami)
     echo "[$TIMESTAMP] $USERNAME : $@" >> $LOGFILE
     /usr/bin/ssh "$@"
     ```

### Implementation Steps

1. **Kernel-Level Auditing:**
   - Install and configure `auditd`.
   - Create an audit rule to log `execve` calls for the `ssh` command.
   - Example:
     ```sh
     sudo auditctl -a always,exit -F arch=b64 -S execve -F a0=0x0 -F a1="*ssh*" -k ssh_command
     ```

2. **Shell Environment Modification:**
   - Add the logging script to the appropriate shell initialization file.
   - Example for `zsh`:
     ```sh
     echo 'source /path/to/logging_script.sh' >> ~/.zshrc
     ```

3. **Custom Scripting:**
   - Replace the `ssh` command with a wrapper script.
   - Example:
     ```sh
     sudo mv /usr/bin/ssh /usr/bin/ssh.real
     sudo ln -s /path/to/wrapper_script.sh /usr/bin/ssh
     ```

### Conclusion

The kernel-level auditing method is the most secure and robust solution, but the other methods can also be effective depending on your specific needs and constraints. Choose the method that best fits your environment and security requirements.

If you have any further questions or need more detailed steps, feel free to ask!

Thank you!