lems in our audits.  For example, if one had been unable to find a decent online
resource on cross-site scripting, I counted 64 plug-ins that test for cross-site
scripting issues in various web applications.  Looking at the source code to those
would give invaluable insight into the process of actually exploiting some of those
vulnerabilities, which we could then attempt to adapt to the web application we
are auditing.  In addition, if the scope of an audit encompassed more than this
one does—for example, if the auditor was assessing the security of the operating
12 http://www.sitepoint.com/article/794
13 http://www.securiteam.com/securityreviews/5DP0N1P76E.html
14 http://www.technicalinfo.net/papers/AssessmentQuestions.html
15 http://nessus.org
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
14
system being used as well—Nessus has a large number of tests that would as-
sist in that task.
Another tool that I find extremely useful is a bookmarklet that will show all hidden
form elements on a web page16, and allow you to modify any of them directly
within that page.  If you drag that bookmarklet to your personal toolbar in
Mozilla—or other similar location in other browsers—you can then click on it
while viewing any page, and instantly have editable access to all hidden form
elements.  As insecure usage of hidden form elements is very common on web
sites, there are many instances when this tool will help with auditing efforts.
An additional useful tool that OWASP recently made available is WebScarab17.
This tool combines a number of different functions that are useful to a web appli-
cation auditor:
• A local interception proxy server that allows one to capture all requests sent
through it, and modify them before passing them along.  These modifications
are scriptable.
• A spider function to traverse all links on the site.
• A visual graph of session IDs, to determine if the session IDs sent by the ap-
plication are sufficiently unique and random.
• A quick display of which pages on the site contain Javascript, which contain
HTML comments, and which pages set cookies.
Brutus18 is another valuable tool for web application testing.  As the name im-
plies, it performs brute-force username/password guessing against web sites.
To use Brutus to maximum effect, one needs sufficiently large word lists.
“Kevin’s Word List Page”19 is an excellent collection of dictionary files plus links
to other word lists.
Lilith20 is a Perl script that will attempt to automatically spider a site and check for
insecurities in form elements, by passing special characters to the application. 
16 http://www.squarefree.com/bookmarklets/forms.html#show_hiddens
17 http://www.owasp.org/development/webscarab
18 http://www.hoobie.net/brutus/
19 http://wordlist.sourceforge.net/
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
15
However, in testing it for potential use in this audit, I found that the current ver-
sion gave far too many false positives for it to be helpful.  In a test run, it essen-
tially listed every form element in the test page as vulnerable to SQL injection,
when a code inspection showed that this was not the case.
20 http://users.pandora.be/0xffffffce/scanit/tools/lilith/
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
16
2 Audit Checklist
The following is the checklist for this audit:
2.1 Check For Hidden Comments in HTML
Checklist Item Number: 001
Checklist Item Name: Check For Hidden Comments in HTML
Reference: OWASP Guide to Building Secure Web Applications and Web Serv-
ices, pages 50-51.
Risk: This test addresses vulnerability number nine in section 1.2.3 of this
document.  HTML comments are not shown to a visitor to the web site, but are
available in the actual HTML code.  Any visitor can therefore view HTML com-
ments simply by using the “view source” function in their web browser, which
means that sensitive information should never be placed in HTML comments.
The degree of exposure is considered to be fairly low, since with a single devel-
oper, it is easier to keep track of what comments are placed in the HTML.  The
severity of loss is medium: the comments could contain anything.  In the worst
case, they could mention incomplete files on the system which do not properly
restrict access, or files that contain back doors to the application.  This has the
potential to give an outside user full access to the site’s database and all of their
content.
The net risk is therefore medium-low (2.5).
Testing Procedure/Compliance Criteria: Use the WebScarab tool (see section
1.3.2).  Click on the “Spider” tab, and select “Fetch Recursively.”  Next, click on
the “Manual Request” tab, and enter application’s URL into the URL field at the
top of the “Request” section.  Click on “Fetch Response” at the bottom of that
screen.  Then, go back to the “Spider” tab, click on the top level of the web site,
and click the “Fetch Tree” button.  One can then go to the “Summary” tab and
view the details for every file on the web server.  If there is a check mark in the
“comments” column next to a file, then there are HTML comments in that file.
Right-click on each file with comments and select “show comments.”
If the comments that WebScarab shows are innocuous, such as comments sepa-
rating sections of the web page in the code (e.g., “Ad banner code:” or “Menu
bar”), or other comments that do not leak any potentially sensitive information,
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
17
then the site passes this test.  Items which would cause a failure on this test in-
clude the following: filenames on the web site which are not normally accessible
(i.e., do not show up in the WebScarab spider results); usernames or passwords;
comments that reveal holes in the site’s code (e.g., “Fix this: it allows anyone to
delete the site by clicking on this link”).  Any other comments which seem to di-
vulge too much information would also cause the site to fail this test.
Test nature: Objective
Evidence: To be determined
Findings: To be determined
2.2 Session Hijacking Via Cookie Manipulation
Checklist Item Number: 002
Checklist Item Name: Session Hijacking Via Cookie Manipulation
Reference: OWASP Guide to Building Secure Web Applications and Web Serv-
ices, chapter 7.
Risk: This test is against vulnerability number ten in section 1.2.3 of this docu-
ment.  The exposure is considered to be medium; since this application was de-
veloped by a novice web developer, some basic mistakes such as weak session
management code may have been made.  The severity of impact is fairly high, as
session hijacking could allow an attacker to impersonate a legitimate adminis-
trator of the site, giving them full access to read, change, or delete all content in
the database.
The net risk is therefore medium-high (3.5).
Testing Procedure/Compliance Criteria: Log into the web site.  After logging
in, view the stored cookies in your web browser for the site.  In Mozilla, this can
be done by going to Edit > Preferences > Privacy & Security > Cookies, and then
clicking on “Manage Stored Cookies.”  Alternatively, an intercepting proxy tool
such as Achilles or WebScarab will also show cookies that have passed through
it.
If the cookie name is “PHPSESSID” and the cookie value is a 32-byte hex string,
then the site is using PHP’s build-in session management functions, which use
MD5 hashes and are not vulnerable to simple client-side manipulation. The site
would therefore pass this test.  If the site is not using PHP’s session functions,
check for any fields in the cookie which appear to be changeable.  These vulner-
abilities include setting the user’s ID number in the cookie, as that could be
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
18
changed to be any user ID.  Another possibility is storing the user’s access level
in the cookie.  Any weak use of cookies for session management such as these
examples are a strong indication that session hijacking is a possibility, and the
site would fail this test.  If there are no such fields, the site passes this test.
Test nature: Objective
Evidence: To be determined
Findings: To be determined
2.3 SQL Injection
Checklist Item Number: 003
Checklist Item Name: SQL Injection
Reference: OWASP Guide to Building Secure Web Applications and Web Serv-
ices, pages 36-39.  
“SQL Injection Attacks — Are You Safe?” by Mitchell Harper.
Risk: This test addresses vulnerability number five in section 1.2.3 of this docu-
ment.  The degree of exposure is considered to be medium, since there are a
large number of SQL queries in the application, many of which use data provided
by the user, and the application developer was a novice at web application de-
velopment.  The severity of loss is fairly high, as a successful SQL injection at-
tack would allow the attacker to run any SQL queries he/she wished against the
site’s database.  This would let them read, change, or delete any or all of the
site’s data, including user e-mail addresses.
The net risk is therefore medium-high (3.5).
Testing Procedure/Compliance Criteria: To fully test this item, we will need to
examine the source code to the site.  First, search the code for all database que-
ries.  In a PHP and MySQL application, these usually performed using the
mysql_query function, and so the auditor should search for that.  However, the
site may have written its own query function that performs other work before
calling the built-in query function.  Because of this, the code must be examined
first in order to find out what function or functions are used for database requests.
Once this has been determined, the auditor can then search the code for all in-
stances of these requests.
Next, for each SQL query found, look at all the variables that are used within the
query.  For each of those variables, check back through the code to see where
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
19
they are assigned.  If any of them are taken from any item sent by the browser—
appended to the URL in a GET request, in a POST request, or from a cookie—
then there should be code in the application to sanitize the data.  The PHP
“stripslashes” function is one possible way to sanitize the data and make it safe
to use in a SQL query.  If all user data is sanitized, then the application passes
this test.
If not all user input is being validated and/or sanitized, then one needs to check
the setting of “magic_quotes_gpc” on the server.  This setting forces PHP to
automatically escape quotes and null characters in all user input, leaving it safe
to use in a SQL query.  The “gpc” section of the function name refers to the three
types of browser-supplied input that are sanitized: GET requests, POST re-
quests, and cookies.  To check if this is enabled, create a new file on the web
site called phpinfo.php.  The contents of the file should be the following:
View this file in a web browser by going to http://web.site.address/phpinfo.php.
In the “PHP Core” subsection of the “Configuration” section of the page, there will
be a line labeled “magic_quotes_gpc.”  Ensure that it is listed as “on”.  If
magic_quotes_gpc is enabled, then the application passes this test.
If magic_quotes_gpc is not enabled, and not all user input is sanitized by the ap-
plication code, then this test is failed.
Additional testing can be performed to confirm that unsafe variables are exploit-
able, or that the code successfully sanitizes the user’s input.  It would be impos-
sible to detail how to exploit potential SQL injection vulnerabilities in this docu-
ment, as the exact method needs to be based on the specific details of the page
in question.  For full details on exploiting a potential SQL injection vulnerability,
refer to one of the detailed guides to it listed in the references section (section
1.3.1 of this document).
Test nature: Objective
Evidence: To be determined
Findings: To be determined
2.4 Test for Adequate Safeguards Against Bandwidth Theft
Checklist Item Number: 004
Checklist Item Name: Test for Adequate Safeguards Against Bandwidth Theft
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
20
Reference: http://wordworx.com and
http://www.thesitewizard.com/archive/bandwidththeft.shtml
Risk: This test addresses vulnerability number 17 in section 1.2.3 of this docu-
ment.  The degree of exposure is considered to be medium, since on the one
hand this web site is very small at the moment, and therefore the likelihood of
anyone using images hosted on it is low.  In addition, the vast majority of the im-
ages hosted on the site are available on many other web sites.  On the other
hand, some images stored on the site are unique to the site.  In addition, band-
width theft is trivial to perform, and is often done accidentally by someone who
did not fully understand the consequences.  As a result, the likelihood is rated as
medium.  The severity of this vulnerability is fairly low.  The worst case scenario
is that sufficient bandwidth is consumed through linking directly to the site’s im-
ages that the web hosting company disables the site until they are paid for the
bandwidth used.  Given the size of images on the site, which average 5 kilobytes
each, it is unlikely for this to be prohibitively expensive.  Therefore, the main con-
sequence is a denial of service against the web site, as the web hosting com-
pany’s current procedures would take the site offline until they have received
payment for the additional bandwidth.
The net risk is therefore medium-low (2.5).
Testing Procedure/Compliance Criteria: The easiest way to test this element
is to create a web page which links to an image hosted on the web site that is
being tested.  However, this file must be hosted on a web server for the test to be
accurate.  My initial testing plan was to create an HTML file on the auditor’s com-
puter that referenced an image on the web site.  However, preliminary testing
showed that the web browser did not pass a referrer field to the web site, mean-
ing that safeguards against bandwidth theft would not be effective.
Therefore, as an alternative to creating this test file, I recommend performing the
request manually.  To do so, telnet to the web site on port 80.  Send the following
lines:
GET /image.gif HTTP/1.1
Host: web.site.name
Referer: www.someothersite.com
“image.gif” should be replaced with the location of an actual image on AuditApp.
Also, note that the HTTP specification calls for “referer” to be misspelled, as
shown in the example.  If there are images stored in more than one directory, this
test should be performed several times, testing at least one image in each direc-
tory.  The reason for this is that some of the methods used to protect against di-
rect image linking can be applied on a per-directory basis.  As a result, some di-
rectories on the site could be protected while others are not.
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
21
If the web server returns an image from any tested directory—it will appear as
lots of garbage in the telnet window, being a binary file—the site fails this test.  If
an error page or no response is received, the site passes.
Test nature: Objective
Evidence: To be determined
Findings: To be determined
2.5 Scan for Sample Files or Scripts
Checklist Item Number: 005
Checklist Item Name: Scan for Sample Files or Scripts
Reference: OWASP Guide to Building Secure Web Applications and Web Serv-
ices, page 50, “System Configuration” section.
http://www.uniras.gov.uk/l1/l2/l3/tech_reports/niscctechnicalnote0603.htm — Na-
tional Infrastructure Security Co-ordination Centre (NISCC) Technical Note
06/03: Guidance on Securing Web Sites
Risk: This test addresses vulnerability number 12 in section 1.2.3 of this docu-
ment.  The exposure for this vulnerability is rated as medium.  While most ad-
ministrators and webmasters these days know that leaving samples files and
scripts on the server is a security risk, there are still some who do.  In addition,