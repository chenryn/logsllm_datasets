### 1. Introduction to Tools and Resources for Web Application Audits

In the course of conducting web application audits, various tools and resources can significantly enhance the auditor's ability to identify and mitigate vulnerabilities. For example, if one were unable to find a reliable online resource on cross-site scripting (XSS), there are 64 plugins available that test for XSS issues in different web applications. By examining the source code of these plugins, auditors can gain valuable insights into the process of exploiting such vulnerabilities, which can then be adapted to the specific web application under audit.

#### Expanding the Audit Scope

If the audit scope extends beyond the web application to include the operating system, tools like Nessus become invaluable. Nessus offers a wide range of tests that can assist in assessing the security of the underlying operating system.

#### Useful Bookmarklet for Hidden Form Elements

Another useful tool is a bookmarklet that reveals all hidden form elements on a web page. This bookmarklet, when added to the browser’s toolbar, allows auditors to modify hidden form elements directly on the page. Given the common insecure usage of hidden form elements, this tool can be particularly helpful in identifying and testing potential vulnerabilities.

#### OWASP WebScarab

OWASP recently released WebScarab, a comprehensive tool for web application auditors. WebScarab includes several functions:

- **Local Interception Proxy Server:** Captures and modifies requests sent through it. These modifications can be scripted.
- **Spider Function:** Traverses all links on the site.
- **Visual Graph of Session IDs:** Helps determine if session IDs are sufficiently unique and random.
- **Quick Display:** Shows which pages contain JavaScript, HTML comments, and cookies.

#### Brutus for Brute-Force Attacks

Brutus is another valuable tool for web application testing, specifically for performing brute-force username and password guessing. To use Brutus effectively, a large word list is necessary. "Kevin’s Word List Page" provides an extensive collection of dictionary files and links to other word lists.

#### Lilith for Automated Spidering and Testing

Lilith is a Perl script that automatically spiders a site and checks for insecurities in form elements by passing special characters to the application. However, in recent testing, the current version of Lilith produced too many false positives, making it less useful for this audit.

### 2. Audit Checklist

The following checklist outlines the steps and criteria for conducting a thorough web application audit.

#### 2.1 Check for Hidden Comments in HTML

**Checklist Item Number:** 001  
**Checklist Item Name:** Check for Hidden Comments in HTML  
**Reference:** OWASP Guide to Building Secure Web Applications and Web Services, pages 50-51.  
**Risk:** Medium-Low (2.5)  
**Testing Procedure/Compliance Criteria:**
- Use WebScarab to spider the site and check for HTML comments.
- If comments are innocuous, the site passes. If they reveal sensitive information, the site fails.

#### 2.2 Session Hijacking via Cookie Manipulation

**Checklist Item Number:** 002  
**Checklist Item Name:** Session Hijacking via Cookie Manipulation  
**Reference:** OWASP Guide to Building Secure Web Applications and Web Services, Chapter 7.  
**Risk:** Medium-High (3.5)  
**Testing Procedure/Compliance Criteria:**
- Log into the site and view stored cookies.
- Check for changeable fields in the cookie. If found, the site fails. Otherwise, it passes.

#### 2.3 SQL Injection

**Checklist Item Number:** 003  
**Checklist Item Name:** SQL Injection  
**Reference:** OWASP Guide to Building Secure Web Applications and Web Services, pages 36-39.  
**Risk:** Medium-High (3.5)  
**Testing Procedure/Compliance Criteria:**
- Examine the source code for database queries.
- Ensure all user input is sanitized. If not, check if `magic_quotes_gpc` is enabled.
- If neither is true, the site fails.

#### 2.4 Test for Adequate Safeguards Against Bandwidth Theft

**Checklist Item Number:** 004  
**Checklist Item Name:** Test for Adequate Safeguards Against Bandwidth Theft  
**Reference:** http://wordworx.com and http://www.thesitewizard.com/archive/bandwidththeft.shtml  
**Risk:** Medium-Low (2.5)  
**Testing Procedure/Compliance Criteria:**
- Create a web page linking to an image on the site.
- Use telnet to send a request with a referrer field.
- If the server returns the image, the site fails. If it returns an error or no response, the site passes.

#### 2.5 Scan for Sample Files or Scripts

**Checklist Item Number:** 005  
**Checklist Item Name:** Scan for Sample Files or Scripts  
**Reference:** OWASP Guide to Building Secure Web Applications and Web Services, page 50, “System Configuration” section.  
**Risk:** Medium  
**Testing Procedure/Compliance Criteria:**
- Use a tool like WebScarab to scan for sample files and scripts.
- If any are found, the site fails. Otherwise, it passes.

### 3. Conclusion

By leveraging the right tools and following a structured audit checklist, auditors can effectively identify and address vulnerabilities in web applications. The combination of automated tools and manual inspection ensures a thorough and comprehensive assessment, leading to more secure web applications.