(AE) is a special feedforward neural network, consisting of
an input layer, a hidden layer, and an output layer. The in-
put layer and the hidden layer act together as an encoder that
compresses data from the input layer into a low-dimensional
representation. The hidden layer and the output layer act
together as a decoder that reconstructs the data back, i.e., de-
compressing the representation into something that closely
matches the original data. Stacked Denoising Autoencoder
(SDAE) [59] stacks multiple AEs together to form a deep
network architecture and adds noise to the input data, which
makes the network robust. SDAE learns meaningful data
representations. Particularly, we may get low-dimensional
and highly compressed representations of control trafﬁc to
ﬁngerprint SDN applications with SDAE.
3 Fingerprinting SDN Applications
In this section, we ﬁrst present the threat model and the key
insight for ﬁngerprinting SDN applications. We then intro-
duce practical challenges and design methods to solve them.
3.1 Threat Model
In our threat model, we consider control trafﬁc between an
SDN controller and a switch is protected with TLS/SSL. We
assume an adversary can eavesdrop control trafﬁc between
the controller and a switch. Attackers may eavesdrop SDN
control trafﬁc in different ways [13, 15–17, 33, 49, 68], such
as conducting ARP poisoning for switches and controllers to
make control trafﬁc ﬁrst pass a listening host [17], placing
a device between controllers and switches to intercept con-
trol trafﬁc [16] 1, intercepting a forwarding link to eavesdrop
control trafﬁc [13], and dumping control trafﬁc through lis-
tening mode of switches [15]. Particularly, Yoon et al. [68]
demonstrate the feasibility of eavesdropping control traf-
ﬁc with real experiments. We do not require an adversary
know payloads of control packets that are usually encrypted.
1SDN control trafﬁc may be carried by an inherently adversarial Internet
Service Provider (ISP) [16].
(a) Learning Switch.
(b) Anonymous Comm.
Figure 2: Patterns of control packets for Learning Switch
and Anonymous Communication.
(a) Changed patterns for Learning
Switch.
(b) Similar patterns like Learning
Switch for ARP Proxy.
Figure 3: Examples to illustrate that accurately characteriz-
ing patterns of control packets for an application is difﬁcult.
Moreover, an adversary may not insert, modify, delay or drop
control packets. We do not assume SDN controllers, appli-
cations, or switches are compromised by an adversary.
3.2 Key Insight and Challenges
We ﬁrst give intuitive examples to illustrate our key in-
sight on ﬁngerprinting SDN applications, i.e., different ap-
plications generate different patterns of control trafﬁc due
to their inherent control logic. Figure 2a and Figure 2b
show the patterns of control packets for Learning Switch
and Anonymous Communication. The patterns for the two
applications are signiﬁcantly different. Learning Switch
receives a PACKET IN message (orange packets) to ana-
lyze a packet for a ﬂow and sends back a FLOW MOD mes-
sage (blue packets) to install ﬂow rules on how to for-
ward the packets for the ﬂow. Consequently, the control
trafﬁc of Learning Switch consists of multiple pairs of
PACKET IN and FLOW MOD messages. However, Anonymous
Communication periodically inspects all ﬂow rules in a
switch with a FLOW STAT message (red packets). After that,
it sends multiple FLOW MOD messages to rewrite actions of
ﬂow rules to modify packet headers for anonymous commu-
nication. Different control logic of the two applications re-
sults in different patterns of control trafﬁc in many aspects,
i.e., packet lengths, directions of packets, relative orders be-
tween packets, etc. The patterns still exist even if controllers
encrypt control trafﬁc with TLS/SSL. Therefore, an adver-
sary can ﬁngerprint SDN applications by analyzing patterns
of control trafﬁc.
However, there are two key challenges in real SDN en-
vironments. The ﬁrst challenge is how to accurately char-
acterize the pattern of the control trafﬁc for an application.
The control trafﬁc is low-level and encrypted, which leads
to a hard description of patterns of control trafﬁc for differ-
Control PlaneData PlaneControl PlaneData PlaneControl PlaneData PlaneControl PlaneData Plane504          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationent applications. Particularly, patterns of control trafﬁc for
some applications are mutable due to different network ﬂows
in switches. As shown in Figure 3a, the pattern of control
trafﬁc for Learning Switch changes if massive new ﬂows
come quickly. The reason is that the application is busy pro-
cessing the burst PACKET IN messages. It takes some time
to respond to the messages. Besides, different applications
may have similar patterns of control trafﬁc. For example,
Figure 3b shows that control trafﬁc for ARP Proxy consists
of multiple pairs of PACKET IN and PACKET OUT messages
(green packets). It looks similar to control trafﬁc in Figure 2a
since we cannot know the content of the encrypted pack-
ets. We just see there are many pairs of uplink and down-
link packets both in Figure 2a and 3b. The only difference
here is that ARP Proxy has larger uplink and downlink con-
trol messages. We need a method that can generalize well
to accurately characterize the patterns of control trafﬁc for
different applications.
neural networks. The reason is two-fold. First, each bit in
control packets is encrypted, which does not maintain the
original information. Feeding full packets into neural net-
works may signiﬁcantly reduce the accuracy of ﬁngerprint-
ing applications. Second, the size of control packets can
be large, e.g., up to 12144 bits in Ethernet-based networks.
Training deep neural networks with massive large packets is
time-consuming.
In order to efﬁciently train an accurate classiﬁer, we try
to maintain useful information and remove unnecessary in-
formation in control packets. We transform control pack-
ets into a time series that can be the raw input for deep
neural networks to automatically extract features and build
classiﬁers. Formally, consider ai is the i-th control packet
in a packet series S = [a1,a2, ...,am]. We transform S into
S = [ f (a1), f (a2), .., f (am)]. Here, f (ai) is a transformation
function that maps a control packet into a real number. It is
deﬁned as follows:
(cid:40) |ai|, i f ai is sent to controllers
f (ai) =
−|ai|, i f ai is sent to switches
(1)
Figure 4: Mixed control packets with Learning Switch,
Anonymous Communication, and ARP Proxy.
The second key challenge is that control trafﬁc for multi-
ple SDN applications is mixed in a single TCP connection
between a controller and a switch. We cannot easily divide
mixed control trafﬁc into multiple types of pure control traf-
ﬁc for identifying each application in turn. Figure 4 shows
the mixed control packets with three applications. Actually,
the types of packets (colors in packets) are not known from
the adversary’s view due to encryption. It is difﬁcult to infer
which packets belong to an application especially when there
are some identical packets, i.e., blue packets in Figure 4.
Furthermore, control trafﬁc becomes more complicated with
more applications running on controllers. Although we may
infer the compositions of applications for one time without
dividing mixed control trafﬁc, the number of the composi-
tions exponentially grows with the number of applications.
We need a method that can efﬁciently identify multiple ap-
plications with mixed control trafﬁc.
3.3 Methodology
3.3.1 Packet Transformation
To accurately characterize the pattern of control trafﬁc for
an application, we apply deep learning since it can auto-
matically extract features and conduct classiﬁcations from
enough datasets. Moreover, classiﬁcation models trained
by deep learning can achieve a good generalization ability.
However, we cannot directly feed SDN control packets into
Here, 1 ≤ i ≤ m and |ai| denotes the length of the packet
ai. Although the transformation process is simple and fast,
useful information for SDN application classiﬁcation is nat-
urally encoded into the time series. The lengths of control
packets are denoted by the absolute values of the numbers
in the time series, the directions of packets are denoted by
the signs of the numbers, and the relative orders of packets
are denoted by the positions of the numbers. Thus, we can
directly feed each time series into deep neural networks to
conduct pattern extraction. Although the encrypted payloads
of packets and inter-packet delays are lost in the time series,
we consider they are little helpful for identifying an SDN
application.
3.3.2 Task Decomposition
Our task is to identify multiple applications that concurrently
run on SDN controllers with mixed control trafﬁc. As the
mixed control trafﬁc cannot be split, a naive method is to
train deep neural networks with all possible combinations of
control trafﬁc to build a multi-class classiﬁer that gives the
compositions of applications running on SDN controllers.
Formally, assume that there are n possible applications run-
ning on a controller and control trafﬁc trace is denoted by
t, we aim to give a classiﬁer C that assigns a label c to t,
where c ∈ [0,1, ..,2n − 1], i.e., possible combinations of n
SDN applications. As shown in Figure 5a, if we directly in-
fer the compositions of possible n applications running on
a controller, a classiﬁer should output 2n types. We need
to build a deep neural network with a large amount of pa-
rameters to classify the types of exponential scales. There-
fore, the neural network quickly becomes exceedingly com-
Control PlaneData PlaneUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 505Table 2: SDN Applications in Our Testbed and Corresponding Control Messages.
SDN Applications
Main Control Messages
FLOW MOD
GROUP MOD
FLOW STAT
GROUP STAT
PORT STAT
PACKET IN
PACKET OUT
ECHO
Basic Network
Functionalities
Topology Discovery* [11]
Learning Switch
† [1]
ARP Proxy
† [3]
Network
Monitor
Traffic Monitor
† [6]
Link Delay Monitor* [31]
Network Opt.
†
Load Balancer
[4]
Security
and Privacy
Enhancement
TopoGuard* [27]
DoS Detection* [71]
Anonymous Comm* [42]
Scan Detection* ‡ [41]
×
(cid:88)
×
×
×
(cid:88)
×
(cid:88)
(cid:88)
(cid:88)
×
×
×
×
×
(cid:88)
×
(cid:88)
×
×
×
×
×
(cid:88)
×
(cid:88)
×
(cid:88)
(cid:88)
×
×
×
×
×
×
×
×
(cid:88)
×
×
×
×
×
(cid:88)
×
(cid:88)
×
×
×
×
(cid:88)
(cid:88)
(cid:88)
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
×
(cid:88)
(cid:88)
×
(cid:88)
×
(cid:88)
×
(cid:88)
(cid:88)
×
(cid:88)
×
×
×
×
(cid:88)
×
×
×
×
×
* For applications without source code, we implement and run them on Floodlight according to papers.
† For applications with source code, we directly run them on ﬂoodlight.
‡ We implement Scan Detection with the TRW-CB algorithm in the paper [41].
Moreover, each classiﬁer is independent and can be trained
in parallel to reduce total training time. By testing mixed
control trafﬁc in each well-trained classiﬁer, we can know
what applications run on controllers.
4 Data Collection
To successfully build an accurate classiﬁer, enough training
data is required for deep learning to learn underlying patterns
and enable good generalization to unseen samples. As far as
we know, there are no public traces of SDN control trafﬁc. In
this section, we provide the method of collecting the traces
and introduce the dataset.
4.1 Data Collection Methodology
We build a real SDN testbed with ﬁve commercial hardware
SDN switches, Edgecore AS4610-54T, and a popular open
source controller, Floodlight. We deploy the controller on a
server with a quad-core Intel Xeon CPU E5504 and 32GB
RAM. We attach one host on each switch. Each host has
a dual-core Intel i3 CPU and 4GB RAM. All hosts in our
experiments run Ubuntu 16.04 LTS. In order to generate real
data trafﬁc in our testbed, we inject real trafﬁc traces from
CAIDA [2] with TCPReplay.
We deploy 10 SDN applications on the controller, ranging
from basic network functionalities, advanced network per-
formance optimization, network monitor to security and pri-
vacy enhancements. We list these applications and their main
control messages in Table 2, which implement representa-
tive network functionalities. Topology Discovery dynam-
ically discovers switches and links between the switches and
the controller. Learning Switch learns the mappings be-
(a) A model of deep learning for the original task.
(b) A model of deep learning for a subtask.
Figure 5: Task Decomposition.
plicated with many applications. Training such a classiﬁer is
time-consuming and not scalable.
Thus, in order to efﬁciently identify multiple applications,
we divide the original task into several subtasks. We train
n binary classiﬁers [C1,C2, ...,Cn] for n applications. Each
classiﬁer Ci (1≤i≤n) only answers if the mixed control trafﬁc