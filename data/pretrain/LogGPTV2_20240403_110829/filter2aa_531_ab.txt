### 编码和路径操作

#### 路径编码
- **原始路径**: `/test.asp`
- **编码后路径**: `/%74%65%73%74%2E%61%73%70`

#### 参数编码
- **原始参数**: `/etc/passwd`
- **编码后参数**: `%2F%65%74%63%2F%70%61%73%73%77%64`

#### 空白字符的替代方案
- **空格** (` `): `%20`
- **制表符** (`\t`): `%09`
- **换行符** (`\n`): `%0A`
- **回车符** (`\r`): `%0D`

#### SQL 注释
- **MSSQL**: `/**/`

#### XSS 注释
- **某些情况下**: `/**/`

### 模糊路径技术

#### 自我引用目录
- `/test.asp` 等同于 `/./test.asp`

#### 双目录分隔线
- `/test.asp` 等同于 `//test.asp`

#### 目录跳脱
- `/etc/passwd` 等同于 `/etc/./passwd`
- `/etc/passwd` 等同于 `/etc/xx/../passwd`

#### 目录分隔符号
- `../../cmd.exe` 等同于 `..\..\cmd.exe`

### 复杂编码

#### 双重解码
- `/` 编码为 `%2F`，进一步编码为 `%252F`

#### 过长字符
- `0xc0 0x8a` 可以表示为:
  - `0xe0 0x80 0x8a`
  - `0xf0 0x80 0x80 0x8a`
  - `0xf8 0x80 0x80 0x80 0x8a`

#### Unicode 编码
- `/test.cgi?foo=../../bin/ls` 可以编码为:
  - `/test.cgi?foo=..%2F../bin/ls`
  - `/test.cgi?foo=..%c0%af../bin/ls`

### Null-Byte 攻击
- **Null Byte (0x00)**: 在许多编程语言中，用于表示字符串终止。
  - 常见函数: `strcmp()`, `strcpy()`, `sprintf()` 等
  - 例如: `/aa.php?cmd=ls%00cat%20/etc/passwd`

### 字符编码

#### 正常范围
- **A**: `%41`
- **&**: `%26`
- **'**: `%27`
- **正常范围**: `%00` ~ `%FF`

#### Magic %
- 当 `%` 后面的两个字符不在正常范围内时，可以绕过黑名单检查机制。
  - 例如: `select` 可以编码为 `sele%ct` 或 `s%elect`
  - **仅 ASP 语言具有此特性**

### 绕过方法

#### 为什么需要绕过？
- 例如: `;drop table xxx` 可以编码为 `;dr%op%table xxx`
- **ASP 解读**: `select * from ...` 可以编码为 `sele%ct * fr%om ...`

### HTTP 参数污染 (HPP)

#### 使用方式
- 将攻击字符串拆散到同名参数中，经过 WAF 时不会触发特征码检测，但在程序内部组合后恢复成攻击代码。

#### 绕过 SQL 注入
- **多数 WAF** 对含有 SQL 特征的参数会深入检查。
  - **避免使用**: `'`, `;`, SQL 注释 (`--`, `/*`, `#`)
  - **方法**:
    - 攻击数字型参数（不需要 `'`）
    - 自行补足后方 SQL 语法，不使用注释符号
    - 使用 Magic %

#### 绕过 XSS
- **HTML/CSS/JavaScript 语法非常灵活**，稍微变形即可绕过 WAF。
- **参考**: [XSS Cheat Sheet](http://ha.ckers.org/xss.html)

### 正向检查 (Positive Checks)

#### 什么是正向检查？
- **多数 WAF** 具有自动学习功能，可以分析网站正常使用情况下的:
  - **HTTP 方法**
  - **URL**
  - **参数**
  - **表单**
  - **Cookies**

#### 规则示例
- **规则一**:
  - URL: `http://www.test.com/news.asp`
  - 参数: `id`
  - 限制: 整数 (`^\d+$`)，长度 1~20
- **规则二**:
  - URL: `http://www.test.com/login.asp`
  - 参数: `Username`
  - 限制: 英文+数字+下划线 (`^[_a-zA-Z0-9]+$`)，长度 1~12

#### 绕过方法
- **不要触犯检查条件**:
  - **策略条件**
  - **URL**
  - **参数**

### 实际案例

#### 示例
- **目标**: `www.test.com` (IP: x.x.x.x)
- **设定**: 当网址为 `www.test.com` 或 `x.x.x.x` 时，应用特定配置文件进行检查。
- **绕过方法**:
  - 不带 Host Header
  - 连接 `www.test.com:80`
  - 修改 hosts 文件，使用任意 Host Header

### 网页应用安全防护

#### 定义
- **设计**
- **开发/测试**
- **部署**
- **维护**

#### 安全要求
- **风险分析**
- **静态分析工具**
- **动态测试**
- **设计审查**

#### 风险分析
- **代码静态检查**
- **渗透测试 & 网站弱点扫描**
- **持续监控**

#### 网页应用防火墙
- **安全编程教育**

#### 演示
- **Q & A**

### 参考资料
- **WAF Reviews**: [WAF Reviews](http://sites.google.com/a/wafreviews.com/home/Home)
- **OWASP AppSecEU09 Poland**:
  - **HTTP Parameter Pollution**
  - **Web Application Firewalls: What the vendors do NOT want you to know**
  - **WAFEC, or how to choose WAF technology**
- **Split and Join**: [Milw0rm](http://www.milw0rm.com/papers/340)
- **SQL Injection Hijinks**: [Technet Blog](http://blogs.technet.com/neilcar/archive/2008/10/31/sql-injection-hijinks.aspx)