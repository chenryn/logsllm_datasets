@app.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "johndoe"}]
```
They will be added to the OpenAPI schema and used by the automatic documentation
interfaces.
#### [Add metadata to the tags](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-tags)
```python
tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic is also here.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_ they have their own docs.",
        "externalDocs": {
            "description": "Items external docs",
            "url": "https://fastapi.tiangolo.com/",
        },
    },
]
```
app = FastAPI(openapi_tags=tags_metadata)
### [Add a summary and description](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#summary-and-description)
```python
@app.post("/items/", response_model=Item, summary="Create an item")
async def create_item(item: Item):
    """
    Create an item with all the information:
    - **name**: each item must have a name
    - **description**: a long description
    - **price**: required
    - **tax**: if the item doesn't have tax, you can omit this
    - **tags**: a set of unique tag strings for this item
    """
    return item
```
### [Response description](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#response-description)
```python
@app.post(
    "/items/",
    response_description="The created item",
)
async def create_item(item: Item):
    return item
```
### [Deprecate a path operation](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#deprecate-a-path-operation)
When you need to mark a path operation as deprecated, but without removing it
```python
@app.get("/elements/", tags=["items"], deprecated=True)
async def read_elements():
    return [{"item_id": "Foo"}]
```
# [Deploy with Docker](https://fastapi.tiangolo.com/deployment/docker/).
FastAPI has it's own optimized
[docker](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker), which
makes the deployment of your applications really easy.
- In your project directory create the `Dockerfile` file:
  ```dockerfile
  FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7
  COPY ./app /app
  ```
- Go to the project directory (in where your Dockerfile is, containing your app
  directory).
- Build your FastAPI image:
  ```bash
  docker build -t myimage .
  ```
- Run a container based on your image:
  ```bash
  docker run -d --name mycontainer -p 80:80 myimage
  ```
Now you have an optimized FastAPI server in a Docker container. Auto-tuned for
your current server (and number of CPU cores).
## [Installing dependencies](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker#dependencies-and-packages)
If your program needs other dependencies, use the next dockerfile:
```dockerfile
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7
COPY ./requirements.txt /app
RUN pip install -r requirements.txt
COPY ./app /app
```
## Other project structures
The previous examples assume that you have followed the FastAPI project
structure. If instead you've used
[mine](https://github.com/lyz-code/cookiecutter-python-project) your application
will be defined in the `app` variable in the
`src/program_name/entrypoints/api.py` file.
To make things simpler make the `app` variable available on the root of your
package, so you can do `from program_name import app` instead of
`from program_name.entrypoints.api import app`. To do that we need to add `app`
to the `__all__` internal python variable of the `__init__.py` file of our
package.
File: `src/program_name/__init__.py`:
```python
from .entrypoints.ap
import app
__all__: List[str] = ['app']
```
The image is configured through
[environmental variables](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker#environment-variables)
So we will need to use:
```dockerfile
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7
ENV MODULE_NAME="program_name"
COPY ./src/program_name /app/program_name
```
# [Testing](https://fastapi.tiangolo.com/tutorial/testing/)
FastAPI gives a [`TestClient` object](https://www.starlette.io/testclient/)
borrowed from [Starlette](https://www.starlette.io) to do the integration tests
on your application.
```python
from fastapi import FastAPI
from fastapi.testclient import TestClient
app = FastAPI()
@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
@pytest.fixture(name="client")
def client_() -> TestClient:
    """Configure FastAPI TestClient."""
    return TestClient(app)
def test_read_main(client: TestClient):
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```
## Test a POST request
```python
result = client.post(
    "/items/",
    headers={"X-Token": "coneofsilence"},
    json={"id": "foobar", "title": "Foo Bar", "description": "The Foo Barters"},
)
```
## Inject testing configuration
If your application follows the
[application configuration section](#application-configuration), injecting
testing configuration is easy with
[dependency injection](https://fastapi.tiangolo.com/advanced/testing-dependencies/).
Imagine you have a `db_tinydb` [fixture](pytest.md#fixtures) that sets up the
testing database:
```python
@pytest.fixture(name="db_tinydb")
def db_tinydb_(tmp_path: Path) -> str:
    """Create an TinyDB database engine.
    Returns:
        database_url: Url used to connect to the database.
    """
    tinydb_file_path = str(tmp_path / "tinydb.db")
    return f"tinydb:///{tinydb_file_path}"
```
You can override the default `database_url` with:
```python
@pytest.fixture(name="client")
def client_(db_tinydb: str) -> TestClient:
    """Configure FastAPI TestClient."""
    def override_settings() -> Settings:
        """Inject the testing database in the application settings."""
        return Settings(database_url=db_tinydb)
    app.dependency_overrides[get_settings] = override_settings
    return TestClient(app)
```
## [Add endpoints only on testing environment](https://github.com/tiangolo/fastapi/issues/552)
Sometimes you want to have some API endpoints to populate the database for end
to end testing the frontend. If your `app` config has the `environment`
attribute, you could try to do:
```python
app = FastAPI()
@lru_cache()
def get_config() -> Config:
    """Configure the program settings."""
    # no cover: the dependency are injected in the tests
    log.info("Loading the config")
    return Config()  # pragma: no cover
if get_config().environment == "testing":
    @app.get("/seed", status_code=201)
    def seed_data(
        repo: Repository = Depends(get_repo),
        empty: bool = True,
        num_articles: int = 3,
        num_sources: int = 2,
    ) -> None:
        """Add seed data for the end to end tests.
        Args:
            repo: Repository to store the data.
        """
        services.seed(
            repo=repo, empty=empty, num_articles=num_articles, num_sources=num_sources
        )
        repo.close()
```
But the injection of the dependencies is only done inside the functions, so
`get_config().environment` will always be the default value. I ended up doing
that check inside the endpoint, which is not ideal.
```python
@app.get("/seed", status_code=201)
def seed_data(
    config: Config = Depends(get_config),
    repo: Repository = Depends(get_repo),
    empty: bool = True,
    num_articles: int = 3,
    num_sources: int = 2,
) -> None:
    """Add seed data for the end to end tests.
    Args:
        repo: Repository to store the data.
    """
    if config.environment != "testing":
        repo.close()
        raise HTTPException(status_code=404)
    ...
```
# Tips and tricks
## [Create redirections](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse)
Returns an HTTP redirect. Uses a 307 status code (Temporary Redirect) by
default.
```python
from fastapi import FastAPI
from fastapi.responses import RedirectResponse
app = FastAPI()
@app.get("/typer")
async def read_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```
## Test that your application works locally
Once you have your application [built](#deploy-with-docker) and
[tested](#testing), everything should work right? well, sometimes it don't. If
you need to use `pdb` to debug what's going on, you can't use the docker as you
won't be able to interact with the debugger.
Instead, launch an uvicorn application directly with:
```bash
uvicorn program_name:app --reload
```
Note: The command is assuming that your `app` is available at the root of your
package, look at the [deploy section](#other-project-structures) if you feel
lost.
## Resolve the 307 error
Probably you've introduced an ending `/` to the endpoint, so instead of asking
for `/my/endpoint` you tried to do `/my/endpoint/`.
## Resolve the 409 error
Probably an exception was raised in the backend, use `pdb` to follow the trace
and catch where it happened.
## Resolve the 422 error
You're probably passing the wrong arguments to the POST request, to solve it see
the `text` attribute of the result. For example:
```python
# client: TestClient
result = client.post(
    "/source/add",
    json={"body": body},
)
result.text
# '{"detail":[{"loc":["query","url"],"msg":"field required","type":"value_error.missing"}]}'
```
The error is telling us that the required `url` parameter is missing.
# Logging
By default the
[application log messages are not shown in the uvicorn log](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/issues/19),
you need to add the next lines to the file where your app is defined:
File: `src/program_name/entrypoints/api.py`:
```python
from fastapi import FastAPI
from fastapi.logger import logger
import logging
log = logging.getLogger("gunicorn.error")
logger.handlers = log.handlers
if __name__ != "main":
    logger.setLevel(log.level)
else:
    logger.setLevel(logging.DEBUG)
app = FastAPI()
# rest of the application...
```
## Logging to Sentry
FastAPI can
[integrate with Sentry](https://philstories.medium.com/integrate-sentry-to-fastapi-7250603c070f)
or similar [application loggers](python_logging.md) through the
[ASGI middleware](https://fastapi.tiangolo.com/advanced/middleware/#other-middlewares).
# [Run a FastAPI server in the background for testing purposes](https://stackoverflow.com/questions/57412825/how-to-start-a-uvicorn-fastapi-in-background-when-testing-with-pytest)
Sometimes you want to launch a web server with a simple API to test a program
that can't use the [testing client](#testing). First define the API to launch
with:
File: `tests/api_server.py`:
```python
from fastapi import FastAPI, HTTPException
app = FastAPI()
@app.get("/existent")
async def existent():
    return {"msg": "exists!"}
@app.get("/inexistent")
async def inexistent():
    raise HTTPException(status_code=404, detail="It doesn't exist")
```
Then create the fixture:
File: `tests/conftest.py`:
```python
from multiprocessing import Process
from typing import Generator
import pytest
import uvicorn
from .api_server import app
def run_server() -> None:
    """Command to run the fake api server."""
    uvicorn.run(app)
@pytest.fixture()
def _server() -> Generator[None, None, None]:
    """Start the fake api server."""
    proc = Process(target=run_server, args=(), daemon=True)
    proc.start()
    yield
    proc.kill()  # Cleanup after test
```
Now you can use the `server: None` fixture in your tests and run your queries
against `http://localhost:8000`.
# Interesting features to explore
- [Structure big applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).
- [Dependency injection](https://fastapi.tiangolo.com/tutorial/dependencies/).
- [Running background tasks after the request is finished](https://fastapi.tiangolo.com/tutorial/background-tasks/).
- [Return a different response model](https://fastapi.tiangolo.com/tutorial/response-model/).
- [Upload files](https://fastapi.tiangolo.com/tutorial/request-files/).
- [Set authentication](https://fastapi.tiangolo.com/tutorial/security/first-steps/).
- [Host behind a proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/).
- [Static files](https://fastapi.tiangolo.com/tutorial/static-files/).
# Issues
- [FastAPI does not log messages](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/issues/19):
  update `pyscrobbler` and any other maintained applications and remove the
  snippet defined in the [logging section](#logging).
# References
- [Docs](https://fastapi.tiangolo.com/)
- [Git](https://github.com/tiangolo/fastapi)
- [Awesome FastAPI](https://github.com/mjhea0/awesome-fastapi)
- [Testdriven.io course](https://testdriven.io/courses/tdd-fastapi/): suggested
  by the developer.