Listing 8-12. Data Truncation Vulnerability 2 
int read_profile(char *username, char *data) 
{ 
    char buf[64]; 
    int fd; 
    snprintf(buf, sizeof(buf), "/data/%s_profile.txt", 
             username); 
    fd = open(buf, O_WRONLY); 
    ... 
} 
For Listing 8-12, assume you want to read sensitive files in the /data/ directory, but 
they don't end in _profile.txt. Even though you can truncate the ending off the 
filename, you can't view the sensitive file unless the filename is exactly the right 
number of characters to fill up this buffer, right? The truth is it doesn't matter because 
you can fill up the buffer with slashes. In filename components, any number of 
contiguous slashes are seen as just a single path separator; for example, /////// and 
/ are treated the same. Additionally, you can use the current directory entry (.) 
repetitively to fill up the buffer in a pattern such as this: ././././././. 
Auditing Tip 
Code that uses snprintf() and equivalents often does so because the developer 
wants to combine user-controlled data with static string elements. This use may 
indicate that delimiters can be embedded or some level of truncation can be 
performed. To spot the possibility of truncation, concentrate on static data following 
attacker-controllable elements that can be of excessive length. 
Another point to consider is the idiosyncrasies of API functions when dealing with data 
they need to truncate. You have already seen examples of low-level memory-related 
problems with functions in the strncpy() family, but you need to consider how every 
function behaves when it receives data that isn't going to fit in a destination buffer. 
Does it just overflow the destination buffer? If it truncates the data, does it correctly 
NUL-terminate the destination buffer? Does it have a way for the caller to know 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
433 
whether it truncated data? If so, does the caller check for this truncation? You need to 
address these questions when examining functions that manipulate string data. Some 
functions don't behave as you'd expect, leading to potentially interesting results. For 
example, the GetFullPathName() function in Windows has the following prototype: 
DWORD GetFullPathName(LPCTSTR lpFileName, DWORD nBufferLength, 
                        LPTSTR lpBuffer, LPTSTR *lpFilePart) 
This function gets the full pathname of lpFileName and stores it in lpBuffer, which is 
nBufferLength TCHARs long. Then it returns the length of the path it outputs, or 0 on 
error. What happens if the full pathname is longer than nBufferLength TCHARs? The 
function leaves lpBuffer untouched (uninitialized) and returns the number of TCHARs 
required to hold the full pathname. So this failure case is handled in a very unintuitive 
manner. Listing 8-13 shows a correct calling of this function. 
Listing 8-13. Correct Use of GetFullPathName() 
DWORD rc; 
TCHAR buffer[MAX_PATH], *filepart; 
DWORD length = sizeof(buffer)/sizeof(TCHAR); 
rc = GetFullPathName(filename, length, buffer, &filepart); 
if(rc == 0 || rc > length) 
{ 
    ... handle error ... 
} 
As you have probably guessed, it's not uncommon for callers to mistakenly just check 
whether the return value is 0 and neglect to check whether the return code is larger 
than the specified length. As a result, if the lpFileName parameter is long enough, the 
call to GetFullPathName() doesn't touch the output buffer at all, and the program uses 
an uninitialized variable as a pathname. Listing 8-14 from the Apache 2.x codebase 
shows a vulnerable call of GetFullPathName(). 
Listing 8-14. GetFullPathName() Call in Apache 2.2.0 
apr_status_t filepath_root_case(char **rootpath, char *root, 
apr_pool_t 
*p) 
{ 
#if APR_HAS_UNICODE_FS 
    IF_WIN_OS_IS_UNICODE 
    { 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
434 
        apr_wchar_t *ignored; 
        apr_wchar_t wpath[APR_PATH_MAX]; 
        apr_status_t rv; 
        apr_wchar_t wroot[APR_PATH_MAX]; 
        /* ???: This needs review. Apparently "\\?\d:." 
         * returns "\\?\d:" as if that is useful for 
         * anything. 
         */ 
        if (rv = utf8_to_unicode_path(wroot, sizeof(wroot) 
            / sizeof(apr_wchar_t), root)) 
            return rv; 
        if (!GetFullPathNameW(wroot, sizeof(wpath) / 
            sizeof(apr_wchar_t), wpath, &ignored)) 
            return apr_get_os_error(); 
        /* Borrow wroot as a char buffer (twice as big as 
         * necessary) 
         */ 
        if ((rv = unicode_to_utf8_path((char*)wroot, 
             sizeof(wroot), wpath))) 
            return rv; 
        *rootpath = apr_pstrdup(p, (char*)wroot); 
} 
#endif 
    return APR_SUCCESS; 
} 
You can see that the truncation case hasn't been checked for in Listing 8-14. As a 
result, the wroot variable can be used even though GetFullPathName() might not have 
initialized it. You might encounter other functions exhibiting similar behavior, so keep 
your eyes peeled! 
Note 
ExpandEnvironmentStrings() is one function that behaves similarly to 
GetFullPathName(). 
7.4.4 Common Metacharacter Formats 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
435 
In the previous section, you learned some basic issues with constructing 
metacharacter strings from user-malleable data. The following sections present 
specific issues with a number of common metacharacter formats. This is by no means 
an exhaustive list, but it addresses several of the most common formats. Exploring 
these formats should reinforce the discussion so far and provide the context needed 
to identify vulnerability cases in metacharacter formats not covered here. 
Path Metacharacters 
One of the most common cases of metacharacter vulnerabilities occurs when 
handling textual representations of path hierarchies. This vulnerability happens most 
often when programs access files on a file system, but it occurs in other situations too, 
such as accessing Windows registry keys. 
Many systems organize objects into some sort of hierarchy that can be represented 
textually by constructing a string with each hierarchical path component separated by 
a delimiter sequence. For file systems, this delimiter is typically a forward slash (/) 
character in UNIX or a backslash (\) character in Windows. The existence of these 
delimiter characters in untrusted input might cause vulnerabilities if a program 
doesn't handle them properly. Exploiting these vulnerabilities could allow an attacker 
access to objects the developer didn't intend. As a code auditor, you must identify 
when programs are accessing resources in an unsafe mannerthat is, when untrusted 
user input is used to build path components for a resource and when that input can be 
used to specify objects that shouldn't be accessible. As a quick test, it's a good idea to 
list resources the application should be able to access, and compare that list with 
what the application actually allows. 
When looking at code dealing with path canonicalization, keep in mind that the 
truncation issues introduced earlier are particularly relevant, as there's often the 
opportunity to cut off path elements, such as file extensions for files and subkeys for 
registry objects. 
File Canonicalization 
Applications often receive filenames or paths that are subsequently created or 
opened for processing. CGI scripts and server-side Web applications, HTTP servers, 
LPD servers, FTP servers, and privileged local processes are just a few examples of 
where you see filenames supplied from untrusted sources. Applications that neglect 
to adequately check untrusted filenames can end up revealing sensitive data to 
clients, or worse, allowing them to write data to files they shouldn't have access to, 
which could result in total system compromise. 
Each file in a file system has a basic string representation that uniquely identifies its 
location. This representation typically consists of a device name (optionally), followed 
by an absolute path, like so: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
436 
C:\WINDOWS\system32\calc.exe 
The device is indicated by C:, followed by the absolute path where the file resides, 
\WINDOWS\system32, and the filename, calc.exe. Although this method is the simplest 
way to refer to that file, it certainly isn't the only way. In fact, there are many ways to 
refer to this same file, as shown in these examples: 
C:\WINDOWS\system32\drivers\..\calc.exe 
calc.exe 
.\calc.exe 
..\calc.exe 
\\?\WINDOWS\system32\calc.exe 
The process of converting all these different representations into the simplest form is 
referred to as file canonicalization. When an application requests a file open 
operation, the kernel resolves the path and verifies permission at each hierarchical 
level until the destination file is found. However, an application might be at risk when 
building filenames of data from untrusted sourcesfor example, failing to correctly 
anticipate how the kernel resolves the requested file path. The subject of file 
canonicalization is a broad one and differs significantly in Windows and UNIX. For that 
reason, common issues are addressed in this section, and specifics of UNIX and 
Windows are covered in Chapters 9(? [????.]), "UNIX I: Privileges and Files," and 11(? 
[????.]) "Windows I: Objects and the File System." 
The most common exploitation of filenames happens if the application neglects to 
check for directory traversal. In this case, an attacker accesses the parent directory 
by using the path "..". When an application builds a pathname that incorporates 
user-controlled input, it can sometimes be manipulated into unintentionally creating 
or accessing files outside the subdirectory that file operations should have been 
restricted to. Applications are vulnerable to these problems when they fail to 
specifically check for directory traversal or neglect to fully canonicalize the pathname 
before validating that it's within the expected file system boundaries. Listing 8-15 
shows a simple example in Perl. 
Listing 8-15. Directory Traversal Vulnerability 
use CGI; 
... 
$username = $query->param('user'); 
open(FH, "User Details For: $username"; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
437 
while(){ 
    print; 
    print "" 
} 
close(FH); 
The script in Listing 8-15 attempts to open a user's profile, which is presumably 
located in the /users/profiles directory, but fails to do any sanitization on the 
username variable, which is pulled directly from the query string in the current Web 
request being serviced. This means attackers could simply specify the user 
name ../../../../../etc/passwd and use this script to print the password file (or any 
other file of their choosing). 
As mentioned, you can diagnose path handling issues by cross-referencing the 
resources a program requires with the resources it's actually capable of accessing. In 
Listing 8-15, the resources the program intends to access are user profiles (any files 
in the /users/profiles directory). However, given what you know about file system 
traversal, you can see that the resources accessible to this program potentially 
include any files on the system, depending on the user context of the process. 
The Windows Registry 
Windows operating systems use the Registry as a central repository of system-wide 
settings that software is free to query and manipulate for its own purposes. Following 
are the basic Windows registry manipulation functions: 
RegOpenKey() and RegOpenKeyEx() These functions are used for opening a 
registry key that can subsequently be used in value queries. 
RegQueryValue() and RegQueryValueEx() These functions are used to read data 
from a specified registry key. 
RegCreateKey() and RegCreateKeyEx() These functions are used to create a 
new subkey. 
RegDeleteKey(), RegDeleteKeyEx(), and RegDeleteValue() The first two 
functions are used to delete a subkey from the registry. RegDeleteValue() 
leaves the key intact but deletes the value associated with it. 
There are a few important considerations in handling registry paths. The first major 
concern is that truncation can occur when handling fixed buffers. Attackers might be 
able to cut off part of the key and trick the program into querying the wrong key. The 
following registry query is vulnerable to truncation: 
int get_subkey(char *version) 
{ 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
438 
    HKEY hKey; 
    long rc; 
    char buffer[MAX_PATH]; 
    snprintf(buffer, sizeof(buffer), 
             "\\SOFTWARE\\MyProduct\\%s\\subkey2", version); 
    rc = RegOpenKeyEx(HKEY_LOCAL_MACHINE, buffer, 0, KEY_READ, 
                        &hKey); 
    if(rc != ERROR_SUCCESS) 
        return 1; 
    ... 
    RegCloseKey(hKey); 
} 
This program reads a configuration parameter by using a version string supplied in 
data from a remote host. If the version string is long enough, it can fill the buffer and 
truncate the "subkey2" at the end. Like files, registry keys can have multiple slashes 
to separate subkey elements, so "\\SOFTWARE\\MyProduct" is equivalent to 
"\\SOFTWARE\\\\\\\\MyProduct" when accessing the key. Furthermore, trailing 
slashes are truncated as well, so "\\SOFTWARE\\MyProduct" is also equivalent to 
"\\SOFTWARE\\MyProduct\\\\\\\\". Therefore, any time untrusted data is used as part 
of a registry key, the danger of truncation exists. 
Note 
The subkey string supplied to RegOpenKey() and RegOpenKeyEx() can be at most 
MAX_PATH characters long. If the string is any longer, the function returns an error. 
As you might have guessed, if attackers can submit additional subkey separators (\), 
they can use them to query arbitrary subkeys or even the base key in the string. The 
one saving grace is that registry keys are opened in a two-step process: The key must 
be opened first, and then a particular value is manipulated with another set of 
functions. However, this two-step process doesn't discount the truncation 
vulnerability because the attack could still be viable in these situations: 
The attacker can manipulate the key name directly. 
The attacker wants to manipulate keys, not values. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
439 
The application uses a higher-level API that abstracts the key value 
separation. 
The attacker wants to manipulate the default (unnamed) value. 
The value name corresponds to the value the attacker wants to manipulate in 
another key. 
C Format Strings 
Format strings are a class of bugs in the printf(), err(), and syslog() families of 
functions. All these functions convert and print data values of different types to a 
destination (a string or a filestream). The output data is formatted according to the 
format string, which contains literal data, and format specifiers that indicate 
where a data element should be inserted in the stream and what data type it should 
be converted and displayed as. These functions, therefore, take a variable number of 
arguments according to how many format specifiers are in the format string. The 
following code shows an example of calling the fprintf() function: 
if(open(filename, O_RDONLY) < 0){ 
  fprintf(stderr, "[error]: unable to open filename: %s (%m)\n", 
          filename); 
  return(-1); 
} 
This code prints a string (the %s format specifier) and a system error (the %m format 
specifier). 
Note 
The %m format specifier is an exception to each format specifier having a 
corresponding argument. It prints a system error string based on the value of the 
global error indicator errno. 
Problems happen when untrusted input is used as part or all of the format string 
argument in any of the functions mentioned previously. Obviously, if users can supply 
format specifiers that weren't expected, the corresponding arguments don't exist and 
the values displayed are based on whatever random data happens to be on the 
program stack. This could allow users to see the program stack or even crash the 
program by using a format specifier that expects a corresponding pointer argument 
(such as %s, which expects a character pointer to exist on the stack). In addition, one 
format specifier causes even more problems: %n. The %n specifier is quite unique in 
that it doesn't cause any data to be written to the output stream; instead, it takes a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
440 
corresponding integer pointer argument that gets set to the number of characters 
output thus far. A legitimate use of %n looks like this: 
int num; 
printf("test%n", &num);    // sets num to 4 
The string test is printed and the number of output characters is written to num (in this 
case, four). However, this format specifier is quite useful for attackers. The %n 
specifier can be exploited to write an arbitrary value to an arbitrary location in 
memory, which usually results in execution of attacker-controlled code in the current 
process. 
When auditing code, you must ensure that any call to these functions doesn't have a 
format string derived from untrusted input. You might think a program allowing users 
to supply the format string isn't likely; after all, why would developers want users to 
be able to specify format conversions? However, it's happened in a number of 
applications. One of the most notable examples is in the SITE EXEC command of the 
popular WU-FTP daemon. The basic problem is that user-controlled data is passed to 
the lreply() function, as shown: 
lreply(200, cmd); 
In this code, the user directly controls the cmd variable. Listing 8-16 shows what 
happens in lreply(). 
Listing 8-16. Format String Vulnerability in WU-FTPD 
void lreply(int n, char *fmt,...) 
{ 
    VA_LOCAL_DECL 
    if (!dolreplies)  /* prohibited from doing long replies? */ 
    return; 
    VA_START(fmt); 
    /* send the reply */ 
    vreply(USE_REPLY_LONG, n, fmt, ap); 
    VA_END; 
} 