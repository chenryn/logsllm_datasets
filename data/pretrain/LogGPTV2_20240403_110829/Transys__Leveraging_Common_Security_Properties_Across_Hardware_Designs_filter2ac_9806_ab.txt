Tables II and III show the security properties of the AES
designs and RSA designs, respectively. These we developed
manually by studying the respective speciﬁcations.
Table IV shows information ﬂow properties for AES and
RSA implementations. These properties are collected from
work on gate level information ﬂow tracking [20] and were,
to the best of our knowledge, developed manually.
We used only a subset of the AES properties during the
development of Transys. The rest of the properties we reserved
for use in the evaluation of Transys.
Module
Key
Expansion
Substitution
Box
Add Round
Key
Shift Rows
Description
P27: The round constant for each round of the key
expansion should be correct.
P28: Round keys should be derived from the cipher
key correctly.
P29: The S-box should avoid any ﬁxed points and
any opposite ﬁxed points.
P30: The subkey is added by combining each byte of
the state with the corresponding byte of the subkey
using bitwise XOR.
P31: The ShiftRows step operates on the rows of the
state; it cyclically shifts the bytes in each row by a
certain offset.
Table II: Security critical properties of AES cryptographic hardware mined
from the speciﬁcation.
Module
RSA Top
Description
P32: The output cipher should be different from the
input key.
Table III: Security critical properties of RSA cryptographic hardware mined
from the speciﬁcation.
Type
Conﬁdentiality
Integrity
Isolation
Timing
Channel
Description
P33: The key or intermediate results should not
directly ﬂow to a point observable by an attacker.
P34: The key should never be altered.
P35: The intermediate encryption results are allowed
to ﬂow to output when the core is working in debug
mode, but are prohibited under normal operation.
P36: The key is safe to ﬂow to the ciphertext while
it should not ﬂow to another location.
P37: The secret key should not ﬂow to the ciphertext
ready signal otherwise there would be a timing side
channel.
Table IV: Information ﬂow security properties of cryptographic hardware.
III. PROBLEM STATEMENT
Given an RTL design D1, a property PD1 that is written in
a formal logic stated over the registers, signals, and ports of
design D1, and a second design D2, how can we produce a
second property PD2 that
1) is a valid property for the speciﬁcation of design D2, and
2) captures the same security policy as property PD1.
IV. THREAT MODEL
Transys is a tool to ease the development of security critical
properties, and in doing so promote and encourage the security
validation of hardware designs and expand the set of security
critical properties validated.
The end goal is to strengthen the security of our hardware
designs by eliminating bugs in the implementation or ﬂaws in
the design that are exploitable in software, post deployment,
by the attacker. The attacker has knowledge of or can learn
the details of the hardware design and is capable of ﬁnding
and designing exploits for any bugs or ﬂaws in the design.
Security validation is not addressing the threat of malicious
trojans that get added during fabrication, nor does it prevent
attacks post-deployment that involve tampering with or mod-
ifying the hardware.
Once the set of properties have been developed for a design
they can be used to detect subsequent malicious modiﬁcations
to the design. If the modiﬁcation violates one of the security
No. Original
1
2
3
4
A → B
Simpliﬁed
New Format
(A ∧ C) → B
A ∧ C → B
(A → B) ∧ (C → B)
A ∨ C → B
A → B ∧ D (A → B) ∧ (A → D)
A → B ∨ D (A ∧ ¬D) → B
Table V: Possible formats of translated assertions in the new design. The
simpliﬁcations are standard propositional rewrite rules.
properties, the violation can be found during veriﬁcation. (The
method of veriﬁcation matters here—model checking, execu-
tion monitors in use post-deployment, and symbolic execution
can provide guarantees about coverage, whereas simulation
based testing does not.) We caution, however, that Transys uses
the code of the second design to build the translated property;
a well crafted trojan already extant in the code can affect the
ﬁnal property. Manual review of the set of properties created
is a required step of the Transys workﬂow.
V. DESIGN
Transys takes as input two hardware designs and a set of
security-critical properties for the ﬁrst design, and outputs a
set of translated properties for the second design. For each
property P of the ﬁrst design, the goal is to produce a new
property P (cid:48) that is written over the registers, signals, and ports
of the second design and that preserves the semantics of P for
the second design. To achieve this goal, Transys must solve
four challenges:
1) The registers, signals, and ports in the original property
may not have counterparts in the second design; if they
do, the counterparts will likely not have the same name.
2) The arithmetic expressions in the original property may
not be appropriate for the second design.
3) The conditions required to enforce a given policy might
differ between designs. For example,
in the property
described in the introduction, PD has the form A → B,
but PD(cid:48) requires the form A → B ∨ C to capture the
same policy.
4) Policies often have to be stated across multiple clock
cycles. For example, a wr_enable signal set in one clock
cycle may be seen by the register ﬁle in the following
clock cycle. Timing details depend on the speciﬁcs of
an implementation and can vary across designs. The
translated property will need to take that into account.
A. Overview
Transys works in three passes to address the four challenges
above: variable mapping pass, structural transformation pass,
and constraint reﬁnement pass. We start with an overview of
the three passes and then describe each one in detail in the
following sections. Figure 3 shows the workﬂow of Transys.
Variable Mapping Pass. To begin, Transys maps the registers,
signals, and ports named in the properties of the ﬁrst design
to the registers, signals, and ports (hereafter, variables) of the
second design (Section V-B).
We ﬁrst ﬁnd the matching code windows of the two designs
to narrow the scope of variables to map. We then extract
statistical, semantic, and structural features of each variable,
Type
Statistical
Fig. 3: The workﬂow of Transys.
Feature
Variable Type (Input, Output, Wire, Reg)
No. of Blocking Assignments
No. of NonBlocking Assignments
No. of Assignments
No. of Branch Conditions
No. of Always Block Conditions
Variable Names
Dependence Graph Depth
No. of Operators
Centroid
Structural
Semantic
Table VI: Features from AST and PDG for variable mapping.
and calculate the distances between each pair of variables from
the two designs. The variable pairs with shortest distance are
used as mapped variables.
Structural Transformation Pass. In the next pass, Transys
uses the Program Dependence Graphs (PDGs) [21] of the two
designs to adjust the arithmetic expressions in the translated
property. We use the PDG of the ﬁrst design to learn the
relationship between multiple variables in the property, and
we traverse the PDG of the second design to build the arith-
metic expressions of, and capture the analogous relationship
between, the variables in the translated property. In practice
we apply this step to only the consequent part of the property;
we found the structural transformation was not needed for the
antecedent. However, there is no limitation that would prevent
applying this pass to the antecedent as well, should future
properties require it.
Constraint Reﬁnement Pass. In the third pass Transys reﬁnes
the constraints of the property by adding terms to the boolean
formula. Starting with the form A → B, there are four possible
modiﬁcations Transys might make. These, along with their
simpliﬁed forms, are laid out in Table V. The ﬁrst and fourth
formats represent a reﬁnement of the original property—
an added constraint under which the property holds—and
Transys will produce properties that require this reﬁnement.
The second and third formats are not reﬁnements of the
original property, but rather introduce new properties of the
second design. This can be seen in the “Simpliﬁed” column
of Table V. Transys does not produce these new properties.
B. Variable Mapping Pass
In this pass we are concerned only with mapping variables
named in one design to their appropriate counterpart in the
second design.
Variable Mapping PassStructural Transformation PassConstraint Reﬁnement PassPo = Ao -> BoP = A -> BP' = A -> B'P'' = A' -> B'TransysInput PropertyDesignD1DesignD2Output Property1) Matching Windows: Similar
to feature-based image
alignment approaches [22], we search for matching variables
within a reasonable range instead of within the entire code
base. Modules in the Hardware Description Language by
nature are good windows for matching: it keeps the semantic
meaning of some functionalities and the size of each module
is often reasonable to search. As the two hardware designs
for assertion translation often share the same speciﬁcation, we
simply match modules with their names using Equation 4. We
thus narrow down the scope of variables to map and search
the mapped variables within corresponding modules.
2) Extracting Features: For each variable from the two de-
signs within the corresponding matching windows, we extract
three types of features from the Abstract Syntax Tree (AST)
and the Program Dependence Graph (PDG): statistical fea-
tures, semantic features, and structural features (see Table VI).
The statistical features include: the variable type; the num-
ber of times this variable appears in the left-hand-side of
blocking assignments, nonblocking assignments, and assign-
ment statements; and the number of times it appears in the
branch conditions and always block conditions. The statistical
features describe local statistics of a variable within a module.
These features are extracted from the AST of the design.
The semantic features point to the semantic meaning of a
variable. We use the variable name as a feature because it
usually explains what this variable is about. For example, the
variable ex_insn in the OR1200 processor holds the instruction
in the EX pipeline stage. Different design implementations
often share similar variable names for the same variable.
The structural features capture the position of a variable in
a PDG. We choose three features: dependence graph depth,
numbers of operators, and centroid. The dependence graph
depth is the maximum length of paths of the PDG from any
statement that contains the variable to the input ports of the
module. The numbers of operators calculates the number of
times each operation (e.g. &&, ||, (cid:29), ==, >, etc.) appears
in the paths from the statements to the input ports in the
PDG. The centroid measures the centrality of the dependence
graph [23]. We assign each operator a weight (we use the same
weight for every operator) and calculate the centrality of all
the paths from the variable to the input ports of the PDG.
3) Matching Variables: To match variables of two hardware
designs, we calculate distances between the features of pairs
of variables, one from each design. The variable pairs with
shortest distance are used for drafting the assertions.
For statistical features, we use the Euclidean distance for
distance calculation:
(cid:112)
dstat(p, q) =
(q1 − p1)2 + ··· + (qn − pn)2
(3)
For semantic features, we use the Sørensen-Dice index [24]
for distance between two strings calculation:
dseman(s1, s2) = 1 − 2 × |pairs(s1) ∩ pairs(s2)|
|pairs(s1)| + |pairs(s2)|
(4)
where pairs(s) is a set of character pairs in string s. The
Sørensen-Dice index satisﬁes two requirements: (1) a signiﬁ-
Design 1
always @(round_i)
begin
case (round_i)
1: rcon_o = 1;
2: rcon_o = 2;
3: rcon_o = 4;
......
end
Design 2
initial
begin
rcon[0] = 8'h01;
rcon[1] = 8'h02;
rcon[2] = 8'h04;
rcon[3] = 8'h08;
......
end
Fig. 4: Code snippets from AES designs.
Design 1
Design 2
assign w0 = key[127:96];
assign keyout[127:96] =
w0^tem^rcon(rc);
always @*
begin
w0 = key[127:096];
w4 = w0^subword1^{rcon1,24'b0};
w8 = w4^subword2^{rcon2,24'b0};
w12 = w8^subword3^{rcon3,24'b0};
.....
end
Fig. 5: Code snippets from AES designs.