𝐶𝑝 =
𝑤, 𝐷𝑝
𝑠 )(cid:12)(cid:12)(cid:12) =
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)𝐷𝑝
𝑤 ∪ 𝑚
𝑠=1

𝑘∈𝐷𝑝
𝑠
Here, to compute the concentration, we take a union of direct
dependencies of provider 𝑝 with the direct dependencies of other
providers which use 𝑝.
• Impact of a service provider: This counts the number of websites
critically dependent on a service provider. For example, if 100
websites use Dyn, and 80 of them are critically dependent on
it, then Dyn has an impact on 80 websites. Formally, let 𝐸𝑝
𝑤 be
636
the set of websites that are critically dependent on provider
𝑝 ∈ 𝑃𝑠1 and let 𝐸𝑝
𝑠 be the set of all providers of service type
𝑠 ∈ 𝑆 critically dependent on 𝑝. Consider the function 𝑓𝑖 of 𝐸𝑝
𝑤
and 𝐸𝑝
𝑠 , that gives the set of websites critically dependent on 𝑝,
then the impact of the service provider 𝐼𝑝 is defined as:
𝑠 \ {𝑝})

𝑓𝑖(𝐸𝑘
𝑤, 𝐸𝑝
𝑤, 𝐸𝑘
(cid:12)(cid:12)(cid:12)𝑓𝑖(𝐸𝑝
𝑠 )(cid:12)(cid:12)(cid:12) =
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)𝐸𝑝
𝑤 ∪ 𝑚
𝑠=1
𝑘∈𝐸𝑝
𝑠
𝐼𝑝 =
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
Here, we consider the union of direct critical dependencies
of provider 𝑝 with the critical dependencies of other providers
which critically use 𝑝, to calculate its impact.
party providers for DNS, CDN, and CA services?
2.3 Research Questions
Given these actionable metrics, we can now concretely define our
research questions :
• What fraction of websites have critical dependencies on third-
• How concentrated is the web ecosystem with respect to provider
impact? Are there single points of failure in the internet in terms
of provider impact?
• What is the effect of indirect dependencies on the prevalence of
• How has the world changed since the Dyn incident in terms of
critical dependency of websites, concentration of service providers,
and inter-service dependencies?
third party dependencies, and provider impact?
3 Methodology
In our study, we primarily focus on the Alexa top-100K websites.
The Alexa list gives a good selection of functional websites fre-
quently visited by users as observed in [53]. To analyze the current
state of web dependencies, we use Alexa’s January 2020 list. Ta-
ble 1 summarizes our data. To study the change in dependencies
after the Dyn incident, we use a snapshot of the rankings from
December 2016 and collect data for these websites in 2016 and 2020
from the same vantage point to draw comparisons. Notably, 3.8% of
the websites in the Alexa’16 list do not exist in 2020 and hence are
excluded from our comparison analysis. Table 2 summarizes our
data for the comparison analysis. We conduct our measurements
from a single vantage point on the US East Coast.
Recall we are interested in measuring the third-party dependen-
cies of websites on authoritative Domain Name Services, Content
Delivery Networks, and Certificate Authorities for revocation infor-
mation (OCSP servers and CRL distribution points). However, there
is no ground truth on what constitutes a third-party; to this end, we
consider two natural strawmen and describe our methodology to
extend these to be more robust. We use the same techniques for the
dataset based on Alexa’s 2020 list, and for the comparison dataset
based on Alexa’s 2016 list.
3.1 DNS Measurements
Identifying Third Party Nameservers: Two approaches used in
prior work are: (1) Matching TLDs with the nameservers [35] and
(2) Matching the Start of Authority Records (SOA) of the name-
servers and the website [7]. The SOA matching heuristic does not
perform well because in many cases where a website uses a third
party nameserver, the SOA for those websites also points to the
IMC ’20, October 27–29, 2020, Virtual Event, USA
Aqsa Kashaf, Vyas Sekar, and Yuvraj Agarwal
Characterized websites for DNS analysis
Websites using CDNs
Characterized websites for CDN analysis
Websites supporting HTTPs
Characterized websites for CA analysis
81,899
33,137
33,137
78,387
78,387
Table 1: Summary of the websites we considered in our analysis for
dependencies in 2020. Characterized websites are those for which
we were able to establish if they use a third-party provider or a pri-
vate one. We used the Alexa 2020 list for this analysis.
Characterized websites for DNS analysis
Websites using CDN either in 2016 or 2020
Characterized websites for CDN analysis
Websites supporting HTTPs either in 2016 or 2020
Characterized websites for CA analysis
87,348
47,502
46,943
69,725
69,725
Table 2: Summary of the total websites we considered in our com-
parison analysis for dependencies in 2016 vs. 2020. Characterized
websites are those for which we were able to establish if they use
a third party provider or a private one. We used the Alexa 2016 list
for this analysis. 3.8% of the websites in the Alexa’16 list were not
accessible in 2020.
third-party DNS provider e.g., twitter.com SOA also points to Dyn
since Twitter uses Dyn for DNS and thus we may incorrectly infer
that Twitter is not using a third-party service leading to underesti-
mation of third-party dependencies. On the other hand, the TLD
heuristic works well in most cases but it misses some cases where
providers use aliases. For instance, the nameserver for youtube.com
is *.google.com, which is the same logical entity and not a third-
party, overestimating third-party dependencies. To avoid the pitfalls
of both approaches, we develop a simple heuristic that combines
TLD matching, SOA information, and other metadata to detect
third-party providers more reliably.
We summarize our heuristic below:
𝑁 𝑆 ← 𝐷𝐼𝐺_𝑁 𝑆(𝑤)
for 𝑛𝑠 ∈ 𝑁 𝑆 do
𝑛𝑠.𝑡 𝑦𝑝𝑒 ← 𝑢𝑛𝑘𝑛𝑜𝑤𝑛
if 𝑡𝑙𝑑(𝑛𝑠) = 𝑡𝑙𝑑(𝑤) then
𝑛𝑠.𝑡 𝑦𝑝𝑒 ← 𝑝𝑟𝑖𝑣𝑎𝑡𝑒
else if 𝑖𝑠𝐻𝑇𝑇 𝑃𝑆(𝑤) & 𝑡𝑙𝑑(𝑛𝑠) ∈ 𝑆𝐴𝑁 (𝑤) then
𝑛𝑠.𝑡 𝑦𝑝𝑒 ← 𝑝𝑟𝑖𝑣𝑎𝑡𝑒
else if 𝑆𝑂𝐴(𝑛𝑠) ≠ 𝑆𝑂𝐴(𝑤) then
𝑛𝑠.𝑡 𝑦𝑝𝑒 ← 𝑡ℎ𝑖𝑟𝑑
else if 𝑐𝑜𝑛𝑐𝑒𝑛𝑡𝑟𝑎𝑡𝑖𝑜𝑛(𝑛𝑠) ≥ 50 then
𝑛𝑠.𝑡 𝑦𝑝𝑒 ← 𝑡ℎ𝑖𝑟𝑑
end if
end for
For all nameservers given a website, we first apply TLD match-
ing. Then for the remaining (website, nameserver) pairs, we look
at subject alternate names (SANs) present in the SSL certificate
of websites, if they support HTTPS. All TLDs present in the SAN
list of a website will also belong to the same logical entity. For
example, *.google.com will exist in the SAN list of youtube.com and
hence, it will classify *.google.com as private for youtube.com. For
the remaining pairs, we fetch the SOA records (e.g., using dig)
of the nameservers and the websites to look for mismatches, im-
plying different DNS authorities. For instance, the SOA record for
amazon.com is *.amazon.com and its nameservers are *.dynect.net
(Dynect) and *.ultradns.net (UltraDNS). The SOA records for Dynect
and UltraDNS do not match to that of amazon.com, implying that
amazon uses two third party DNS providers. Finally, we look at the
concentration of a nameserver, which if large (e.g. > 50), implies a
likely third-party provider.
We validate our heuristic using a random sample of 100 web-
sites and manually verifying them. Our approach classifies (website,
nameserver) pairs with 100% accuracy, while TLD and SOA match-
ing classify with 97% and 56% accuracy respectively. We get 155,151
distinct (website, nameserver) pairs for the top-100K websites. 13.5%
of these pairs remain uncharacterized. 18% of the top 100k websites
appear in these pairs and we conservatively exclude them from our
analysis. Rev C.7 is already mentioned here.
Measuring Redundancy: We need to identify not only if a website
uses a third-party DNS provider, but also if it is redundantly provi-
sioned. This means we need to identify that if 𝑛𝑠 ∈ 𝑁 𝑆 belong to
different providers. For instance, *.alicdn.com and *.alibabadns.com
belong to Alibaba, however, their TLDs are different. If a website
has these nameservers, then it is not redundantly provisioned since
they belong to the same entity. If two nameservers used by a website
have the same TLD or the same SOA RNAME (administrator email
address) or SOA MNAME (master nameserver address) records [31],
we say that the nameservers belong to the same entity. For exam-
ple, *.alibabadns.com is the SOA MNAME for both *.alicdn.com and
*.alibabadns.com.
3.2 Certificate Revocation Information
We extract the CRL distribution points (CDP), and OCSP server
information from the SSL certificate of the website. Of the 100K web-
sites, 78,387 support HTTPS. We observed 59 distinct CAs which
provided CDPs and OCSP servers to our set of websites.
Identifying Third Party CAs: Certain private CAs issue certifi-
cates and provide revocation checking for their own domains only
e.g., Google, Microsoft, etc. Since we focus on third party depen-
dencies, we need to classify third party CAs. As is the case for DNS,
simple TLD matching performs well but for some cases, it overesti-
mates third party CAs, e.g., private CA Google Trust Services TLD
pki.goog will not match many google domains such as youtube.com.
To address this, we additionally use the SAN list and SOA infor-
mation. We compare the SOA records of the CA address and the
website where a mismatch implies two separate DNS authorities
and we classify the CA as a third-party as shown below:
𝑐𝑎 ← 𝑔𝑒𝑡𝐶𝐴(𝑤)
𝑐𝑎_𝑢𝑟𝑙 ← 𝑔𝑒𝑡𝐶𝐴_𝑈 𝑅𝐿(𝑐𝑎, 𝑤)
𝑐𝑎.𝑡 𝑦𝑝𝑒 ← 𝑢𝑛𝑘𝑛𝑜𝑤𝑛
if 𝑡𝑙𝑑(𝑐𝑎_𝑢𝑟𝑙) = 𝑡𝑙𝑑(𝑤) then
𝑐𝑎.𝑡 𝑦𝑝𝑒 ← 𝑝𝑟𝑖𝑣𝑎𝑡𝑒
else if 𝑖𝑠𝐻𝑇𝑇 𝑃𝑆(𝑤) & 𝑡𝑙𝑑(𝑐𝑎_𝑢𝑟𝑙) ∈ 𝑆𝐴𝑁 (𝑤) then
𝑐𝑎.𝑡 𝑦𝑝𝑒 ← 𝑝𝑟𝑖𝑣𝑎𝑡𝑒
else if 𝑆𝑂𝐴(𝑐𝑎_𝑢𝑟𝑙) ≠ 𝑆𝑂𝐴(𝑤) then
𝑐𝑎.𝑡 𝑦𝑝𝑒 ← 𝑡ℎ𝑖𝑟𝑑
end if
We validate our heuristic by taking a random sample of 100
websites and manually establishing their ground truth. We observed
that our approach classifies (website, CA) pairs with 100% accuracy,
while TLD and SOA matching classifies with 96% and 94% accuracy
respectively.
637
Analyzing Third Party Service Dependencies in Modern Web Services: Have We Learned from the Mirai-Dyn Incident?
IMC ’20, October 27–29, 2020, Virtual Event, USA
Measuring OCSP Stapling: To see if a website has a critical de-
pendency on OCSP responders and CDPs, we see if it has enabled
OCSP Stapling because then the revocation status of the certifi-
cate comes stapled from the webserver. The user does not have
to contact the OCSP server or CDP to get that information, thus
eliminating its critical dependency on the CA. To measure OCSP sta-
pling, we fetch the certificate for each website using OpenSSL [66].
An OCSP response stapled with the certificate implies support for
OCSP stapling. Of the websites that support HTTPS, 28.5% support
OCSP stapling.
3.3 CDN Measurements
We need to detect whether a website uses a Content Delivery Net-
works (CDNs). Most CDNs use CNAME (canonical name) redirects
to point resources to the CDN e.g., www.example.com might point
to customer-1234.example-CDN-company.net. Hence, one way to de-
tect a CDN is to look at CNAME redirects for the internal (website-
owned) resources of a website and match it against a CNAME-to-
CDN map [10, 12]. Another way is to look at the autonomous
system (AS) number of each internal resource and map the AS to
popular CDNs [12, 42, 56]. The efficacy of both methods depends
on the CNAME to the CDN mapping list in the first case, and AS to
the CDN mapping list in the second case. We use the first method
of CNAME redirects, which requires the identification of internal
resources.
Finding Internal Resources: We fetch and render the landing
page of the website using phantomJS, a headless browser [22],
and record all hostnames that serve at least one object on the
page. To identify internal resources, the baseline would be again to
use TLD matching [35], which can reliably identify some internal
resources, but also misses others, e.g., if yahoo.com loads an image
from *.yimg.com, which is an internal resource. Hence, we employ
additional heuristics to identify internal resources, such as the
subject alternate names (SAN) list in the SSL certificate of the
website, public suffix lists [38, 65] and SOA records (if different
SOA, then external). Next, we perform dig CNAME queries on
all the internal resources of the webpage and extract the CDNs
using our own self-populated CNAME-to-CDN map. We treat a
provider as a CDN if it advertises itself as a CDN.Note that we do
not determine which resources are essential to load the webpage of
a website to determine critical dependency on CDNs. We only see if
a website uses one or more CDNs to determine critical dependency.
After this, we need to identify third party CDNs.
Identifying Third Party CDNs: A baseline to classify third-party
CDNs would be to match the TLDs of the website and the CNAMES
used by CDNs. This technique performs well but in some corner