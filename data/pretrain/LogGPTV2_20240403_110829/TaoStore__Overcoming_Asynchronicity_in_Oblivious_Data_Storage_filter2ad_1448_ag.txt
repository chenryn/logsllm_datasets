which considers completely asynchronous network commu-
nication and concurrent processing of requests. It is proven
that TaoStore is secure and correct under this security model.
Our experiments demonstrate the practicality and efﬁciency of
TaoStore.
We are currently exploring extending TaoStore for fault-
tolerance, since the system is vulnerable to multiple types of
failures, including critically the failure of the proxy and the
failure or inaccessibility of the untrusted public cloud. We are
currently developing methods to use persistent local storage,
i.e., disk, in the private cloud to overcome the failure of the
proxy server. On the other hand, for the public cloud data, we
are developing replication methods that span multiple clouds
(possibility owned by different providers).
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for their
constructive and helpful comments.
Cetin Sahin, Victor Zakhary, and Amr El Abbadi were
partly funded by NSF grants CNS-1528178 and CCF-1442966.
Huijia Lin was partially supported by NSF grants CNS-
1528178 and CNS-1514526. Stefano Tessaro was partially
supported by NSF grants CNS-1423566, CNS-1528178, and
the Glen and Susanne Culler Chair.
REFERENCES
[1] Amazon Web Services. https://aws.amazon.com/.
[2] iPerf - the TCP, UDP and SCTP network bandwidth measurement tool.
https://iperf.fr/.
[3] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway. A concrete security
In 38th FOCS, pages 394–403,
treatment of symmetric encryption.
Miami Beach, Florida, Oct. 19–22, 1997. IEEE Computer Society Press.
[4] V. Bindschaedler, M. Naveed, X. Pan, X. Wang, and Y. Huang. Practic-
ing oblivious access on cloud storage: the gap, the fallacy, and the new
way forward. In I. Ray, N. Li, and C. Kruegel:, editors, ACM CCS 15,
pages 837–849, Denver, CO, USA, Oct. 12–16, 2015. ACM Press.
[5] D. Boneh, D. Mazieres, and R. Popa. Remote oblivious storage: Making
oblivious ram practical. MIT Tech-report: MIT-CSAIL-TR-2011-018,
2011.
212212
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:10 UTC from IEEE Xplore.  Restrictions apply. 
[6] E. Boyle, K.-M. Chung, and R. Pass. Oblivious parallel RAM and
applications. In E. Kushilevitz and T. Malkin, editors, TCC 2016-A, Part
II, volume 9563 of LNCS, pages 175–204, Tel Aviv, Israel, Jan. 10–13,
2016. Springer, Heidelberg, Germany.
[7] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks
against searchable encryption. In I. Ray, N. Li, and C. Kruegel:, editors,
ACM CCS 15, pages 668–679, Denver, CO, USA, Oct. 12–16, 2015.
ACM Press.
[8] B. Chen, H. Lin, and S. Tessaro. Oblivious parallel RAM: Improved
efﬁciency and generic constructions. In E. Kushilevitz and T. Malkin,
editors, TCC 2016-A, Part II, volume 9563 of LNCS, pages 205–234,
Tel Aviv, Israel, Jan. 10–13, 2016. Springer, Heidelberg, Germany.
[9] R. Chow, P. Golle, M. Jakobsson, E. Shi, J. Staddon, R. Masuoka,
and J. Molina. Controlling data in the cloud: Outsourcing computation
without outsourcing control. In Proceedings of the 2009 ACM Workshop
on Cloud Computing Security, CCSW ’09, pages 85–90, New York, NY,
USA, 2009. ACM.
[10] K.-M. Chung, Z. Liu, and R. Pass.
Statistically-secure ORAM
with ˜O(log
In P. Sarkar and T. Iwata, editors, ASI-
ACRYPT 2014, Part II, volume 8874 of LNCS, pages 62–81, Kaoshiung,
Taiwan, R.O.C., Dec. 7–11, 2014. Springer, Heidelberg, Germany.
2 n) overhead.
[11] K.-M. Chung and R. Pass. A simple oram. Cryptology ePrint Archive,
Report 2013/243, 2013. http://eprint.iacr.org/.
[12] P. J. Courtois, F. Heymans, and D. L. Parnas. Concurrent control with
readers and writers. Commun. ACM, 14(10):667–668, Oct. 1971.
[13] J. Dautrich, E. Stefanov, and E. Shi. Burst oram: Minimizing oram
response times for bursty access patterns.
In 23rd USENIX Security
Symposium (USENIX Security 14), pages 749–764, San Diego, CA, Aug.
2014. USENIX Association.
[14] S. Devadas, M. Dijk, C. W. Fletcher, L. Ren, E. Shi, and D. Wichs.
Onion ORAM: A constant bandwidth blowup oblivious RAM.
In
E. Kushilevitz and T. Malkin, editors, TCC 2016-A, Part II, volume 9563
of LNCS, pages 145–174, Tel Aviv, Israel, Jan. 10–13, 2016. Springer,
Heidelberg, Germany.
[15] C. W. Fletcher, M. van Dijk, and S. Devadas. Towards an interpreter
for efﬁcient encrypted computation. In Proceedings of the 2012 ACM
Workshop on Cloud computing security, CCSW 2012, Raleigh, NC, USA,
October 19, 2012., pages 83–94, 2012.
[16] C. Gentry, K. A. Goldman, S. Halevi, C. S. Jutla, M. Raykova, and
D. Wichs. Optimizing ORAM and using it efﬁciently for secure
computation. In Privacy Enhancing Technologies - 13th International
Symposium, PETS 2013, Bloomington, IN, USA, July 10-12, 2013.
Proceedings, pages 1–18, 2013.
[17] O. Goldreich and R. Ostrovsky. Software protection and simulation on
oblivious rams. J. ACM, 43(3):431–473, May 1996.
[18] S. Goldwasser and S. Micali. Probabilistic encryption.
Journal of
Computer and System Sciences, 28(2):270–299, 1984.
[19] M. T. Goodrich. Randomized shellsort: A simple oblivious sorting
algorithm. In M. Charika, editor, 21st SODA, pages 1262–1277, Austin,
Texas, USA, Jan. 17–19, 2010. ACM-SIAM.
[20] M. T. Goodrich and M. Mitzenmacher. Privacy-preserving access of out-
sourced data via oblivious RAM simulation. In L. Aceto, M. Henzinger,
and J. Sgall, editors, ICALP 2011, Part II, volume 6756 of LNCS, pages
576–587, Zurich, Switzerland, July 4–8, 2011. Springer, Heidelberg,
Germany.
[21] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia.
Oblivious RAM simulation with efﬁcient worst-case access overhead.
In Proceedings of the 3rd ACM Cloud Computing Security Workshop,
CCSW 2011, Chicago, IL, USA, October 21, 2011, pages 95–100, 2011.
[22] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia.
Oblivious storage with low I/O overhead. CoRR, abs/1110.1851, 2011.
[23] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia.
Privacy-preserving group data access via stateless oblivious RAM sim-
ulation. In Y. Rabani, editor, 23rd SODA, pages 157–167, Kyoto, Japan,
Jan. 17–19, 2012. ACM-SIAM.
[24] M. S. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure
on searchable encryption: Ramiﬁcation, attack and mitigation.
In
NDSS 2012, San Diego, California, USA, Feb. 5–8, 2012. The Internet
Society.
[25] E. Kushilevitz, S. Lu, and R. Ostrovsky. On the (in)security of hash-
based oblivious RAM and a new balancing scheme. In Y. Rabani, editor,
23rd SODA, pages 143–156, Kyoto, Japan, Jan. 17–19, 2012. ACM-
SIAM.
[26] J. R. Lorch, B. Parno, J. Mickens, M. Raykova, and J. Schiffman.
Shroud: Ensuring private access to large-scale data in the data center. In
Presented as part of the 11th USENIX Conference on File and Storage
Technologies (FAST 13), pages 199–213, San Jose, CA, 2013. USENIX.
[27] M. Maas, E. Love, E. Stefanov, M. Tiwari, E. Shi, K. Asanovic, J. Kubi-
atowicz, and D. Song. PHANTOM: practical oblivious computation in a
secure processor. In A.-R. Sadeghi, V. D. Gligor, and M. Yung, editors,
ACM CCS 13, pages 311–324, Berlin, Germany, Nov. 4–8, 2013. ACM
Press.
[28] M. Maffei, G. Malavolta, M. Reinert, and D. Schr¨oder. Privacy and
access control for outsourced personal records. In 2015 IEEE Symposium
on Security and Privacy, pages 341–358, San Jose, California, USA,
May 17–21, 2015. IEEE Computer Society Press.
[29] T. Moataz, T. Mayberry, and E. Blass. Constant communication ORAM
with small blocksize.
In I. Ray, N. Li, and C. Kruegel, editors,
Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security, Denver, CO, USA, October 12-6, 2015, pages
862–873. ACM, 2015.
[30] N. I. of Standards and Technology. Advanced encryption standard (aes).
Federal Information Processing Standards Publications - 197, November
2001.
[31] R. Ostrovsky and V. Shoup. Private information storage (extended
abstract). In 29th ACM STOC, pages 294–303, El Paso, Texas, USA,
May 4–6, 1997. ACM Press.
[32] B. Pinkas and T. Reinman. Oblivious RAM revisited. In T. Rabin, editor,
CRYPTO 2010, volume 6223 of LNCS, pages 502–519, Santa Barbara,
CA, USA, Aug. 15–19, 2010. Springer, Heidelberg, Germany.
[33] L. Ren, C. Fletcher, A. Kwon, E. Stefanov, E. Shi, M. van Dijk, and
S. Devadas. Constants count: Practical improvements to oblivious ram.
In 24th USENIX Security Symposium (USENIX Security 15), pages 415–
430, Washington, D.C., Aug. 2015. USENIX Association.
[34] L. Ren, X. Yu, C. W. Fletcher, M. van Dijk, and S. Devadas. Design
space exploration and optimization of path oblivious RAM in secure
processors. In The 40th Annual International Symposium on Computer
Architecture, ISCA’13, Tel-Aviv, Israel, June 23-27, 2013, pages 571–
582, 2013.
[35] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li. Oblivious RAM with
o((log n)3) worst-case cost.
In D. H. Lee and X. Wang, editors,
ASIACRYPT 2011, volume 7073 of LNCS, pages 197–214, Seoul, South
Korea, Dec. 4–8, 2011. Springer, Heidelberg, Germany.
[36] E. Stefanov and E. Shi. ObliviStore: High performance oblivious cloud
storage.
In 2013 IEEE Symposium on Security and Privacy, pages
253–267, Berkeley, California, USA, May 19–22, 2013. IEEE Computer
Society Press.
[37] E. Stefanov, E. Shi, and D. X. Song. Towards practical oblivious RAM.
In NDSS 2012, San Diego, California, USA, Feb. 5–8, 2012. The Internet
Society.
[38] E. Stefanov, M. van Dijk, E. Shi, C. W. Fletcher, L. Ren, X. Yu, and
S. Devadas. Path ORAM: an extremely simple oblivious RAM protocol.
In A.-R. Sadeghi, V. D. Gligor, and M. Yung, editors, ACM CCS 13,
pages 299–310, Berlin, Germany, Nov. 4–8, 2013. ACM Press.
[39] S. Wang, X. Ding, R. H. Deng, and F. Bao. Private information retrieval
using trusted hardware.
In D. Gollmann, J. Meier, and A. Sabelfeld,
editors, ESORICS 2006, volume 4189 of LNCS, pages 49–64, Hamburg,
Germany, Sept. 18–20, 2006. Springer, Heidelberg, Germany.
[40] X. Wang, T.-H. H. Chan, and E. Shi. Circuit ORAM: On tightness of
the Goldreich-Ostrovsky lower bound. In I. Ray, N. Li, and C. Kruegel:,
editors, ACM CCS 15, pages 850–861, Denver, CO, USA, Oct. 12–16,
2015. ACM Press.
[41] P. Williams and R. Sion. Single round access privacy on outsourced
storage. In T. Yu, G. Danezis, and V. D. Gligor, editors, ACM CCS 12,
pages 293–304, Raleigh, NC, USA, Oct. 16–18, 2012. ACM Press.
[42] P. Williams, R. Sion, and B. Carbunar. Building castles out of mud:
practical access pattern privacy and correctness on untrusted storage.
In P. Ning, P. F. Syverson, and S. Jha, editors, ACM CCS 08, pages
139–148, Alexandria, Virginia, USA, Oct. 27–31, 2008. ACM Press.
[43] P. Williams, R. Sion, and M. Sot´akov´a. Practical oblivious outsourced
storage. ACM Trans. Inf. Syst. Secur., 14(2):20, 2011.
[44] P. Williams, R. Sion, and A. Tomescu. PrivateFS: a parallel oblivious
ﬁle system. In T. Yu, G. Danezis, and V. D. Gligor, editors, ACM CCS
12, pages 977–988, Raleigh, NC, USA, Oct. 16–18, 2012. ACM Press.
213213
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:10 UTC from IEEE Xplore.  Restrictions apply. 
The storage server SS is initialized with an array D of
M items from T (which is kept as the state), exposes
a network and an adversarial interface. It associates
with every bid ∈ [M ] a corresponding timestamp τbid –
initially set to 0 – and operates as follows:
• At initialization, it outputs D at the adversarial
interface.
• On input op = (bid, u, τ ) at the network interface,
the request is associated with a unique identiﬁer
id and op = opid is added to the input buffer.
The message (input, id, bid, u, τ ) is output at the
adversarial interface.
• On input (process, id) at the adversarial inter-
face, then opid = (bid, u, τ ) is removed from the
input buffer. We then set vid = D[bid] and if
u (cid:8)= ⊥, also sets D[bid] = u if τbid < τ (and update
τbid to τ). The value vid is added to the output buffer
and returned at the adversarial interface.
• On input (output, id) at the adversarial interface,
the value vid is removed from the output buffer, and
output at the network interface.
Fig. 9: The storage server functionality SS.
A. Security of Asynchronous ORAM Schemes
APPENDIX
This section develops a framework to analyze the security
asynchronous ORAM schemes. We exercise this model to
prove TaORAM secure.
Reactive systems. We consider a model of randomized
interactive stateful reactive machines (sometimes simply called
“algorithms”), which we only specify informally here, and
which mimic the architecture running TaoStore. These ma-
chines have multiple interfaces, each with a given name.
The machines can activate at any time a thread by a certain
input condition being met a certain interface (for example, a
set of messages satisfying a certain condition have been input)
and the corresponding messages are removed and input to the
thread. During its execution, the thread can output messages at
an interface, can set local variable and global variables (and
can lock and unlock global variables), and can halt waiting
for input messages to satisfy some condition to be re-started.
Such threads can be run concurrently, and we do not make
any assumptions about how thread executions are interleaved.
Such machines can then be combined with each other by
connecting interfaces with the same name. (We can think of
a combination of such machines as a network of machines,
but also as a bigger machines.) Consistent with literature on
cryptography and asynchronous systems, we do not assume a
global clock: When a thread halts waiting for a message, it
does not learn how long it has been waiting.
Asynchronous ORAM. An asynchronous ORAM scheme is
a pair ORAM = (Encode, OClient) consisting of the two
following algorithms:
1) The encoding algorithm Encode on input a data set
D (i.e., an array of N items from a set S), outputs a
processed data set ˆD and a secret key K. Here, ˆD is an
array of M = M (N ) elements from a set T .
2) The ORAM client OClient is initiated with the secret
key K, as well as M and N. It maintain two inter-
faces: The user interface receives read/write requests
(bidi, ui), where bidi ∈ [N ] is a logical address for the
data set and ui ∈ S∪{⊥} a data item. These requests are
eventually answered by a value vi ∈ S. The network
interface, OClient issues server read/write requests of
form (bidj, uj, τ ), where bidj ∈ [M ], ui ∈ T ∪ {⊥},
and τ ∈ N, and which are eventually answered with a
value vi ∈ T .
The (ﬁnite) sets S and T denote the data types of the items
held by the ORAM data structure and the storage server,
respectively. Formally, all algorithms take as input a security
parameter λ in unary form, and the sets S and T may depend
on this security parameter. We omit mentioning λ explicitly
for ease of notation. We also stress that in contrast to our
algorithm descriptions in the body of the paper, for notational
compactness here we think of OClient as answering a single
type of read-write operation – i.e., (bid, u) simply retrieves
the value of block bid if u = ⊥, and additionally overwrites
it with u if u (cid:8)= ⊥.
Our scheme TaORAM can naturally be expressed in this
framework. Here, the set S would correspond to individual
data items addressed by bid, whereas T would correspond to
bit-strings representing encrypted blocks.
Adaptive security. Our security deﬁnition, which we refer to as
adaptive asynchronous obliviousness, or aaob-security, is in-
distinguishability based. In contrast to existing security notions
– which are typically non-adaptive – our deﬁnition allows for
adaptive scheduling of operations and messages. In particular,
we model the non-deterministic nature of scheduling messages
in the communication between the server and the client by
leaving the scheduling task to the adversary A. To achieve
this, the security game involves a storage server SS, which
is initially given an array of M elements from some set T ,
and exposes a network interface and an adversarial interface.
It operates as described in Figure 9. In particular, beyond its
natural functionality at the network interface, the adversarial
interface leaks the contents of read/write accesses and allows
control of their scheduling.
asynchronous ORAM scheme ORAM =
(Encode, OClient) and an adversary A, we deﬁne the
ORAM(A) as in Figure 10. We can then deﬁne
experiment Expaaob
the aaob-advantage of the adversary A against ORAM as
− 1 .
ORAM(A) ⇒ true
ORAM(A) = 2 · Pr
Advaaob
Expaaob
For
(cid:2)
an
(cid:3)
We stress that the adversary schedules concurrent operation
pairs – previous operations do not need to have returned (and
thus A has been notiﬁed) before other operations are scheduled
by A.
214214
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:10 UTC from IEEE Xplore.  Restrictions apply. 
Experiment Expaaob
ORAM(A):
• After that,