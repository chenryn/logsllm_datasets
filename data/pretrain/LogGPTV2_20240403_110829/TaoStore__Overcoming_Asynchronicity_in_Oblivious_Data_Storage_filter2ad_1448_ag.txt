Certainly! Here is the optimized and improved version of your text:

---

**TaoStore: Security and Asynchronous Network Communication**

TaoStore is designed to handle completely asynchronous network communication and concurrent processing of requests. It has been rigorously proven that TaoStore is both secure and correct under this security model. Our experimental results demonstrate the practicality and efficiency of TaoStore.

**Fault-Tolerance and Resilience Enhancements**

We are currently exploring ways to enhance TaoStore's fault-tolerance, as the system is susceptible to various types of failures, including the critical failure of the proxy and the unavailability or inaccessibility of the untrusted public cloud. To address the failure of the proxy server, we are developing methods that utilize persistent local storage (e.g., disk) in the private cloud. For data stored in the public cloud, we are working on replication techniques that span multiple clouds, potentially owned by different providers.

**Acknowledgements**

We would like to express our gratitude to the anonymous reviewers for their constructive and helpful comments.

Cetin Sahin, Victor Zakhary, and Amr El Abbadi were partially funded by NSF grants CNS-1528178 and CCF-1442966. Huijia Lin was partially supported by NSF grants CNS-1528178 and CNS-1514526. Stefano Tessaro was partially supported by NSF grants CNS-1423566, CNS-1528178, and the Glen and Susanne Culler Chair.

**References**

[1] Amazon Web Services. https://aws.amazon.com/.

[2] iPerf - the TCP, UDP, and SCTP network bandwidth measurement tool. https://iperf.fr/.

[3] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway. A concrete security treatment of symmetric encryption. In 38th FOCS, pages 394–403, Miami Beach, Florida, Oct. 19–22, 1997. IEEE Computer Society Press.

[4] V. Bindschaedler, M. Naveed, X. Pan, X. Wang, and Y. Huang. Practicing oblivious access on cloud storage: the gap, the fallacy, and the new way forward. In I. Ray, N. Li, and C. Kruegel, editors, ACM CCS 15, pages 837–849, Denver, CO, USA, Oct. 12–16, 2015. ACM Press.

[5] D. Boneh, D. Mazieres, and R. Popa. Remote oblivious storage: Making oblivious RAM practical. MIT Tech-report: MIT-CSAIL-TR-2011-018, 2011.

[Additional references follow the same format...]

**Storage Server Functionality**

The storage server SS is initialized with an array D of M items from T, which is maintained as the state. It exposes a network interface and an adversarial interface. For each bid ∈ [M], it associates a corresponding timestamp τbid, initially set to 0, and operates as follows:

- **Initialization:** At startup, it outputs D at the adversarial interface.
- **Network Input:** On receiving op = (bid, u, τ) at the network interface, the request is assigned a unique identifier id, and op = opid is added to the input buffer. The message (input, id, bid, u, τ) is then output at the adversarial interface.
- **Adversarial Process:** On receiving (process, id) at the adversarial interface, opid = (bid, u, τ) is removed from the input buffer. The value vid = D[bid] is set, and if u ≠ ⊥, D[bid] is updated to u if τbid < τ (and τbid is updated to τ). The value vid is added to the output buffer and returned at the adversarial interface.
- **Output:** On receiving (output, id) at the adversarial interface, the value vid is removed from the output buffer and output at the network interface.

**Security of Asynchronous ORAM Schemes**

This section develops a framework to analyze the security of asynchronous ORAM schemes. We use this model to prove the security of TaORAM.

**Reactive Systems**

We consider a model of randomized, interactive, stateful, reactive machines, which mimic the architecture running TaoStore. These machines have multiple interfaces, each with a given name. They can activate a thread when certain input conditions are met at a specific interface, and the corresponding messages are removed and input to the thread. During execution, the thread can output messages at an interface, set local and global variables, and halt waiting for input messages to satisfy some condition to be restarted. Such threads can run concurrently, and we do not make any assumptions about how thread executions are interleaved. These machines can be combined by connecting interfaces with the same name.

**Asynchronous ORAM**

An asynchronous ORAM scheme is a pair ORAM = (Encode, OClient) consisting of the following algorithms:

1. **Encoding Algorithm (Encode):** On input a data set D (an array of N items from a set S), it outputs a processed data set ˆD and a secret key K. Here, ˆD is an array of M = M(N) elements from a set T.
2. **ORAM Client (OClient):** Initialized with the secret key K, M, and N, it maintains two interfaces:
   - **User Interface:** Receives read/write requests (bidi, ui), where bidi ∈ [N] is a logical address for the data set and ui ∈ S ∪ {⊥} is a data item. These requests are eventually answered by a value vi ∈ S.
   - **Network Interface:** Issues server read/write requests of the form (bidj, uj, τ), where bidj ∈ [M], uj ∈ T ∪ {⊥}, and τ ∈ N, and which are eventually answered with a value vi ∈ T.

The sets S and T denote the data types of the items held by the ORAM data structure and the storage server, respectively. Formally, all algorithms take as input a security parameter λ in unary form, and the sets S and T may depend on this security parameter. For notational compactness, we think of OClient as answering a single type of read-write operation – i.e., (bid, u) retrieves the value of block bid if u = ⊥, and additionally overwrites it with u if u ≠ ⊥.

Our scheme TaORAM can naturally be expressed in this framework. Here, the set S corresponds to individual data items addressed by bid, whereas T corresponds to bit-strings representing encrypted blocks.

**Adaptive Security**

Our security definition, referred to as adaptive asynchronous obliviousness (aaob-security), is based on indistinguishability. Unlike existing security notions, which are typically non-adaptive, our definition allows for adaptive scheduling of operations and messages. Specifically, we model the non-deterministic nature of scheduling messages in the communication between the server and the client by leaving the scheduling task to the adversary A. The security game involves a storage server SS, which is initially given an array of M elements from some set T, and exposes a network interface and an adversarial interface. It operates as described in Figure 9.

For an asynchronous ORAM scheme ORAM = (Encode, OClient) and an adversary A, we define the experiment Expaaob_ORAM(A) as in Figure 10. The aaob-advantage of the adversary A against ORAM is defined as:

\[ \text{Adv}_{\text{ORAM}}^{\text{aaob}}(A) = 2 \cdot \left| \Pr[\text{Exp}_{\text{ORAM}}^{\text{aaob}}(A) \Rightarrow \text{true}] - \frac{1}{2} \right| \]

We stress that the adversary schedules concurrent operation pairs, and previous operations do not need to have returned (and thus A has been notified) before other operations are scheduled by A.

---

This version should be more clear, coherent, and professional.