We say that (G,P,V) is a succinct argument system if the
running time of V and the total communication between P
and V (proof size) are poly(λ,|x|, log |w|).
In the deﬁnition of zero knowledge, SV∗
denotes that the
simulator S is given the randomness of V∗ sampled from
polynomial-size space. This deﬁnition is commonly used in
existing transparent zero knowledge proof schemes [5], [14],
[28], [69].
B. Zero-Knowledge Veriﬁable Polynomial Delegation
zkVPD.KeyGen(1λ),
Let F be a ﬁnite ﬁeld, F be a family of (cid:2)-variate poly-
nomial over F, and d be a variable-degree parameter. We
use W(cid:3),d to denote the collection of all monomials in F
and N = |W(cid:3),d| = (d + 1)(cid:3). A zero-knowledge veriﬁable
polynomial delegation scheme (zkVPD) for f ∈ F and t ∈ F(cid:3)
consists of the following algorithms:
• pp
• com zkVPD.Commit(f, rf , pp),
• ((y, π);{0, 1})
(cid:3)zkVPD.Open(f, rf ), zkVPD.Verify(com)(cid:4)(t, pp)
Note that unlike the zkVPD in [59], [72], [73], our deﬁnition is
transparent and does not have a trapdoor in zkVPD.KeyGen. π
denotes the transcript seen by the veriﬁer during the interaction
with zkVPD.Open, which is similar to the proof in non-
interactive schemes in [59], [72], [73].
Deﬁnition 3. A zkVPD scheme satisﬁes the following proper-
ties:
• Completeness. For any polynomial f ∈ F and value
t
zkVPD.Commit(f, rf pp), it holds that
Pr [(cid:3)zkVPD.Open(f, rf ), zkVPD.Verify(com)(cid:4)(t, pp) = 1] = 1
• Soundness. For
F(cid:3), pp ← zkVPD.KeyGen(1λ),
any PPT adversary A,
com
∈
pp
zkVPD.KeyGen(1λ), the following probability is negligible
of λ:
⎡
⎤
, t) A(1λ, pp)
∗
); 1) ← (cid:3)A(), zkVPD.Verify(com
= zkVPD.Commit(f
, pp)
∗
∗
)(cid:4)(t, pp)
⎥⎥⎥⎦
(f
∗
, com
∗
∗
, π
∗
(t) (cid:5)= y
((y
com
∗
∗
Pr
⎢⎢⎢⎣
f
• Zero Knowledge. For security parameter λ, polynomial
f ∈ F, pp ← zkVPD.KeyGen(1λ), PPT algorithm A,
and simulator S = (S1,S2), consider the following two
experiments:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
861
RealA,f (pp):
1) com ← zkVPD.Commit(f, rf , pp)
2) t A(com, pp)
3) (y, π) ← (cid:3)zkVPD.Open(f, rf ),A(cid:4)(t, pp)
4) b A(com, y, π, pp)
5) Output b
(cid:3)S2,A(cid:4)(ti, pp), given oracle access to y = f (t).
IdealA,SA (pp):
1) com S1(1λ, pp)
2) t A(com, pp)
3) (y, π)
4) b A(com, y, π, pp)
5) Output b
For any PPT algorithm A and all polynomial f ∈ F, there
exists simulator S such that
| Pr[RealA,f (pp) = 1]− Pr[IdealA,SA (pp) = 1]| ≤ negl(λ).
C. Zero Knowledge Argument Based on GKR
(cid:8)
In [70], Xie et al. proposed an efﬁcient zero knowledge
argument scheme named Libra. The scheme extends the inter-
active proof protocol for layered arithmetic circuits proposed
by Goldwasser et al. [42] (referred as the GKR protocol) to a
zero knowledge argument using multiple instances of zkVPD
schemes. Our scheme follows this framework and we review
the detailed protocols here.
Sumcheck protocol. The sumcheck protocol is a fundamental
protocol in the literature of interactive proof that has various
applications. The problem is to sum a polynomial f : F(cid:3) →
F on the binary hypercube
b1,b2,...,b(cid:2)∈{0,1} f (b1, b2, ..., b(cid:3)).
Directly computing the sum requires exponential time in (cid:2),
as there are 2(cid:3) combinations of b1, . . . , b(cid:3). Lund et al. [54]
that allows a veriﬁer V to
proposed a sumcheck protocol
delegate the computation to a computationally unbounded
prover P, who can convince V the correctness of the sum. At
the end of the sumcheck protocol, V needs an oracle access to
the evaluation of f at a random point r ∈ F(cid:3) chosen by V. The
proof size of the sumcheck protocol is O(d(cid:2)), where d is the
variable-degree of f, and the veriﬁcation time of the protocol
is O(d(cid:2)). The sumcheck protocol is complete and sound with
 = d(cid:3)|F|.
GKR protocol. Let C be a layered arithmetic circuit with
depth D over a ﬁnite ﬁeld F. Each gate in the i-th layer takes
inputs from two gates in the (i + 1)-th layer; layer 0 is the
output layer and layer D is the input layer. The GKR protocol
proceeds layer by layer. Upon receiving the claimed output
from P, in the ﬁrst round, V and P run a sumcheck protocol to
reduce the claim about the output to a claim about the values in
the layer above. In the i-th round, both parties reduce a claim
about layer i − 1 to a claim about layer i through sumcheck.
Finally, the protocol terminates with a claim about the input
layer D, which can be checked directly by V. If the check
passes, V accepts the claimed output.
Formally speaking, we denote the number of gates in the
i-th layer as Si and let si = (cid:12)log Si(cid:13). We then deﬁne
a function Vi
takes a binary string
b ∈ {0, 1}si and returns the output of gate b in layer i,
where b is called the gate label. With this deﬁnition, V0
: {0, 1}si → F that
corresponds to the output of the circuit, and VD corresponds
to the input. As the sumcheck protocol works on F, we then
extend Vi to its multilinear extension, the unique polynomial
˜Vi : Fsi → F such that ˜Vi(x1, x2, ..., xsi ) = Vi(x1, x2, ..., xsi )
∈ {0, 1}si. As shown in prior work [34],
for all x1, x2, . . . , xsi
the closed form of ˜Vi can be computed as:
˜Vi(x1, x2, ..., xsi )
(cid:9)
si(cid:10)
=
b∈{0,1}si
i=1
[((1 − xi)(1 − bi) + xibi) · Vi(b)],
(1)
where bi is i-th bit of b.
With these deﬁnitions, we can express the evaluations of ˜Vi
as a summation of evaluations of ˜Vi+1:
αi ˜Vi(u(i)) + βi ˜Vi(v(i))
(cid:9)
=
x,y∈{0,1}si+1
fi( ˜Vi+1(x), ˜Vi+1(y)),
(2)
where u(i), v(i) ∈ Fsi are random vectors and αi, βi ∈ F are
random values. Note here that fi depends on αi, βi, u(i), v(i)
and we omit the subscripts for easy interpretation.
With Equation 2, the GKR protocol proceeds as follows.
The prover P ﬁrst sends the claimed output of the circuit to
V. From the claimed output, V deﬁnes polynomial ˜V0 and
computes ˜V0(u(0)) and ˜V0(v(0)) for random u(0), v(0) ∈ Fs0.
V then picks two random values α0, β0 and invokes a sum-
check protocol on Equation 2 with P for i = 0. As described
before, at the end of the sumcheck, V needs an oracle access
to the evaluation of f0 at u(1), v(1) randomly selected in
Fs1. To compute this value, V asks P to send ˜V1(u(1)) and
˜V1(v(1)). Other than these two values, f0 only depends on
α0, β0, u(0), v(0) and the gates and wiring in layer 0, which
are all known to V and can be computed by V directly. In this
way, V and P reduces two evaluations of ˜V0 to two evaluations
of ˜V1 in layer 1. V and P then repeat the protocol recursively
layer by layer. Eventually, V receives two claimed evaluations
˜VD(u(D)) and ˜VD(v(D)). V then checks the correctness of
these two claims directly by evaluating ˜VD, which is deﬁned
by the input of the circuit. Let GKR.P and GKR.V be the
algorithms for the GKR prover and veriﬁer, we have the
following theorem:
[34], [42], [64], [70]. Let C : Fn → F be a
Lemma 1.
depth-D layered arithmetic circuit. (cid:3)GKR.P, GKR.V(cid:4)(C, x) is
an interactive proof per Deﬁnition 1 for the function computed
by C on input x with soundness O(D log |C|/|F|). The total
communication is O(D log |C|) and the running time of the
prover P is O(|C|). When C has regular wiring pattern2, the
running time of the veriﬁer V is O(n + D log |C|).
Extending GKR to Zero Knowledge Argument. There are
two limitations of the GKR protocol: (1) It is not an argument
system supporting witness from P, as V needs to evaluate
˜VD locally in the last round; (2) It is not zero knowledge,
2“Regular” circuits is deﬁned in [34, Theorem A.1]. Roughly speaking, it
means the mutilinear extension of its wiring predicates can be evaluated at a
random point in time O(log |C|).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
862
a
random bivariate
zkVPD.KeyGen(1λ).
2) P randomly selects polynomials Ri
Protocol 1 (Zero Knowledge Argument in [70]). Let λ be the
security parameter, F be a prime ﬁeld. Let C : Fn → F be a layered
arithmetic circuit over F with D layers, input in and witness w such
that |in| + |w| ≤ n and 1 = C(in; w).
• G(1λ): set pp as pp
• (cid:3)P(pp, w),V(pp)(cid:4)(in):
1) P selects
3) V evaluates
4) For i = 0, . . . , D − 1:
(cid:2)
: F2 → F and δi
to the witness of C by sending comD
polynomial RD. P
commits
zkVPD.Commit( ˙VD, rVD , pp) to V, where ˙VD is deﬁned by
Equation 3.
:
F2si+1+1 → F for i = 0, . . . , D − 1. P commits to these poly-
nomials by sending comi,1 ← zkVPD.Commit(Ri, rRi , pp)
and comi,2 ← zkVPD.Commit(δi, rδi , pp) to V. P also
reveals R0 to V, as V0 is known to V.
˙V0(u(0)) and ˙V0(v(0)) for randomly chosen
u(0), v(0) ∈ Fs0.
a) P sends Hi =
b) V picks αi, βi, γi randomly in F.
c) V and P execute a sumcheck protocol on Equation 4. At
(cid:3)
i at point
x,y∈{0,1}si+1 ,z∈{0,1} δi(x, y, z) to V.
the end of the sumcheck, V receives a claim of f
u(i+1), v(i+1) ∈ Fsi+1 , gi ∈ F selected randomly by V.
Ri(v(i), gi)
Ri(u(i), gi),
δi(u(i+1), v(i+1), gi)
˙V0(u(i+1)) and ˙V0(v(i+1)) to V.
Ri(u(i), gi),
and
zkVPD.Open. P sends
Ri(v(i), gi)
validates
d) P
e) V
opens
using
5) P runs
δi(u(i+1), v(i+1), gi) using zkVPD.Verify.
them outputs 0, abort and output 0.
f) V checks the claim of f
δi(u(i+1), v(i+1), gi),
fails, output 0.
(cid:3)
i using Ri(u(i), gi), Ri(v(i), gi),
˙V0(u(i+1)) and ˙V0(v(i+1)).
it
(y1, π1) ← zkVPD.Open( ˙VD, rVD , u(D), pp),
(y2, π2) ← zkVPD.Open( ˙VD, rVD , v(D), pp) and sends
y1, π1, y2, π2 to V.
and
Verify(π2, y2, comD, v(D), pp)
either
and
check fails. Otherwise, V checks
˙VD(u(D)) = y1 and
˙VD(v(D)) = y2, and rejects if either fails. If all checks above
pass, V output 1.
Verify(π1, y1, comD, u(D), pp)
0
output
runs
If
if
6) V
and
If any of
as in each round, both the sumcheck protocol and the two
evaluations of ˜Vi leak information about the values in layer i.
To extend the GKR protocol to a zero knowledge argument,
Xie et al. [70] address both of the problems using zero knowl-
edge polynomial delegation. Following the approach of [69],
[72], [73], to support witness w as the input to the circuit,
P commits to ˜VD using zkVPD before running the GKR
protocol. In the last round of GKR, instead of evaluating ˜VD
locally, V asks P to open ˜VD at two random points u(D), v(D)
selected by V and validates them using zkVPD.Verify. In this
way, V does not need to access w directly and the soundness
still holds because of the soundness guarantee of zkVPD.
To ensure zero knowledge, using the techniques proposed
by Chiesa et al. in [32], the prover P masks the polynomial ˜Vi
and the sumcheck protocol by random polynomials so that the
proof does not leak information. For correctness and soundness
purposes, these random polynomials are committed using the
zkVPD protocol and opened at random points chosen by V.
In particular, for layer i, the prover selects a random bivariate
polynomial Ri(x1, z) and deﬁnes