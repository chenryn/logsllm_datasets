**作者：2freeman（姚俊）  
原文链接：**
## 综述
回顾Android内核漏洞史可以发现，大部分Android内核漏洞属于内存漏洞，而逻辑漏洞相对少见。由于内存漏洞具有典型的漏洞模式、明显的副作用以及较完善的检测方法，因此这类漏洞较容易发现。对应地，逻辑漏洞没有典型的漏洞模式（往往与功能紧密相关）、不确定的副作用以及缺乏普适的检测方法，因此，挖掘这类漏洞相对困难。正因为如此，逻辑漏洞有它独特的魅力。
这篇文章将深入分析CVE-2021-28663，它是ARM Mali GPU驱动里的一个逻辑漏洞。这个漏洞堪称后门：
1 抗碎片化：影响使用联发科、海思以及猎户座SoC的手机，近几年面世的手机几乎都受影响；  
2 攻击具有隐蔽性：该漏洞的攻击方式与常见的利用方式有很大不同，据我所知，目前没有公开资料介绍该漏洞的利用方法；  
3 普通APP可以轻易窃取其他APP或者内核运行时数据，甚至修改其他APP的代码，整个过程不需要获得任何额外的权限；  
4 ROOT提权具有100%的成功率；
下面我将揭开它神秘的面纱。
## 漏洞影响
由于联发科、海思以及猎户座SoC均使用ARM Mali GPU，所以使用这些芯片的手机都可能受影响。我搜集了部分主流芯片或者手机相关源代码，发现均受影响：
时间 | 厂商 | 手机型号 | 芯片型号 | 驱动版本  
---|---|---|---|---  
2021 | SAMSUNG | S21 | Exynos 2100 | v_r20p0  
2020 | HUAWEI | Mate40 | Kirin 9000 | r23p0-01rel0  
2020 | Redmi | K30U | 天玑1000+ | v_r21p0  
2020 | Redmi | 10X | 天玑820 | v_r21p0  
2020 | SAMSUNG | S20 | Exynos 990 | v_r25p1  
2019 | HUAWEI | Mate30 | Kirin 990 | b-r18p0-01rel0  
2019 | Redmi | Note8 Pro | Helio G90T | b_r20p0  
2019 | SAMSUNG | S10 | Exynos 9820 | b_r16p0  
2018 | HUAWEI | Mate20 | Kirin 980 | b-r18p0-01rel0  
2018 | Redmi | 红米 6 | Helio P22 | m-r20p0  
2018 | SAMSUNG | S9 | Exynos 9810 | b_r19p0  
2017 | HUAWEI | Mate10 | Kirin 970 | b-r14p0-00cet0  
2017 | LENOVO | K8 Plus | Heli0 P25 | r18p0  
2017 | SAMSUNG | S8 | Exynos 8895 | b_r16p0  
2016 | HUAWEI | Mate9 | Kirin 960 | b-r14p0-00cet0  
2016 | Meizu | M3x | Helio P20 | r12p1  
2016 | SAMSUNG | S7 | Exynos 8890 | r22p0  
2015 | HUAWEI | Mate8 | Kirin 950 | r20p0-01rel0  
2015 | SAMSUNG | S6 | Exynos 7420 | r15p0  
正如综述里提到，普通APP可以借助漏洞完成以下攻击：
1 窃取其他APP运行时内存数据  
2 修改其他APP代码  
3 窃取内核运行时内存数据  
4 稳定地获得ROOT权限
相对常见的内核漏洞，这个漏洞不但可以稳定地获取ROOT权限，而且可以以非常隐蔽的方式获取其他APP和内核的运行时数据，甚至修改其他APP的代码，整个过程不需要获得任何额外的权限。从攻击过程和结果来看，堪称后门级漏洞。
## 漏洞分析
除了CPU，一个SoC上还有很多针对具体业务场景特制的处理器，比如GPU。GPU的主要功能是对图形进行渲染。在IOMMU的帮助下，GPU可以有自己的虚拟地址空间。通过映射物理页，GPU和CPU之间可以高效地传输数据。而上述功能的实现，依赖于内核驱动。
### GPU映射物理页过程 – 返回假的虚拟地址
具体到ARM设计实现的GPU，它使用的是Mali驱动。Mali驱动的一个重要功能是为GPU维护IOMMU页表。当应用（运行在CPU上）想要让GPU为其处理数据或者渲染图形时，驱动需要帮忙将数据所在的物理页映射到GPU的地址空间中，这样，GPU可以立即“看到”这些数据。整个过程没有额外的数据拷贝操作，从而大大提高处理效率。Mali驱动实现了以下相关操作：
序号 | 命令 | 功能  
---|---|---  
1 | KBASE_IOCTL_MEM_ALLOC | 分配内存区域，内存区域中的页会映射到GPU中，可选择同时映射到CPU  
2 | KBASE_IOCTL_MEM_QUERY | 查询内存区域属性  
3 | KBASE_IOCTL_MEM_FREE | 释放内存区域  
4 | KBASE_IOCTL_MEM_SYNC | 同步数据，使得CPU和GPU可以及时看到对方操作结果  
5 | KBASE_IOCTL_MEM_COMMIT | 改变内存区域中页的数量  
6 | KBASE_IOCTL_MEM_ALIAS | 为某个内存区域创建别名，即多个GPU虚拟地址指向同一个区域  
7 | KBASE_IOCTL_MEM_IMPORT | 将CPU使用的内存页映射到GPU地址空间中  
8 | KBASE_IOCTL_MEM_FLAGS_CHANGE | 改变内存区域属性  
表格中提到的内存区域（memory
region）实际上是Mali驱动里的一个概念，它包含了实际使用的物理页。以下分析基于[三星A71源代码](https://opensource.samsung.com/uploadSearch?searchValue=A7160)
我先介绍下`KBASE_IOCTL_MEM_ALLOC`命令处理过程。通过这个命令，你可以了解驱动是如何将物理页映射到进程地址空间（CPU）和GPU地址空间。
这个命令接收的参数如下：
    drivers/gpu/arm/b_r19p0/mali_kbase_core_linux.c
    183 union kbase_ioctl_mem_alloc {
    184     struct {
    185         __u64 va_pages;
    186         __u64 commit_pages;
    187         __u64 extent;
    188         __u64 flags;
    189     } in;
    190     struct {
    191         __u64 flags;
    192         __u64 gpu_va;
    193     } out;
    194 };
主要的输入参数有：
`va_pages`表示待分配的内存区域最多可以容纳多少物理页，驱动会在GPU空间中留出相应大小的虚拟地址范围；
`commit_pages`表示当下驱动需要为这个内存区域分配多少个物理页，应用可根据自身需要调用`KBASE_IOCTL_MEM_COMMIT`命令调整页的数量；
`flags`表示内存区域属性，比如是否映射到CPU、是否可读可写；
输出参数有：
`gpu_va`表示分配的内存区域在GPU空间中的虚拟地址，GPU可以使用该地址访问相应的物理页；
具体的分配过程如下：
    drivers/gpu/arm/b_r19p0/mali_kbase_core_linux.c
    kbase_api_mem_alloc()
    |
    | BASE_MEM_SAME_VA
    |
    |-> kbase_mem_alloc()
        |
        |-> kbase_check_alloc_flags()
        |
        |-> kbase_alloc_free_region()
        |
        |-> kbase_reg_prepare_native()
        |
        |-> kbase_alloc_phy_pages()
        |
        |-> kctx->pending_regions[cookie_nr] = reg
如果进程是64位，默认使用`BASE_MEM_SAME_VA`方式创建映射，它的含义是CPU和GPU使用相同的虚拟地址。具体的分配过程由`kbase_mem_alloc()`实现。
它首先调用`kbase_check_alloc_flags()`来检查应用传入的flags（属性）是否合法：
    drivers/gpu/arm/b_r19p0/mali_kbase_mem.c
    2582 bool kbase_check_alloc_flags(unsigned long flags)
    2583 {
    2592     /* Either the GPU or CPU must be reading from the allocated memory */
    2593     if ((flags & (BASE_MEM_PROT_CPU_RD | BASE_MEM_PROT_GPU_RD)) == 0)
    2594         return false;
    2595 
    2596     /* Either the GPU or CPU must be writing to the allocated memory */
    2597     if ((flags & (BASE_MEM_PROT_CPU_WR | BASE_MEM_PROT_GPU_WR)) == 0)
    2598         return false;
    2617     /* GPU should have at least read or write access otherwise there is no
    2618        reason for allocating. */
    2619     if ((flags & (BASE_MEM_PROT_GPU_RD | BASE_MEM_PROT_GPU_WR)) == 0)
    2633 }
上述摘录的代码片段主要与映射属性有关，通过代码可以了解到：
1 内存区域必须映射到GPU中，映射属性可以是只读、仅可写、可读写（line 2619）；  
2 CPU和GPU至少有一方是可以读内存区域的，否则分配物理页没有意义（line 2593）；  
3 同样，至少有一方是可以写内存区域的，否则分配物理页没有意义（line 2597）；
之后，驱动调用`kbase_alloc_free_region()`来分配新的内存区域`kbase_va_region`：
    drivers/gpu/arm/b_r19p0/mali_kbase_mem.h
    241 struct kbase_va_region {
    248     size_t nr_pages;
    372     struct kbase_mem_phy_alloc *cpu_alloc; /* the one alloc object we mmap to the CPU when mapping this region */
    373     struct kbase_mem_phy_alloc *gpu_alloc; /* the one alloc object we mmap to the GPU when mapping this region */
    383 };
我摘录了相关字段：
`nr_pages`表示这个区域最多可以包含多少物理页； `cpu_alloc`用于CPU地址空间映射； `gpu_alloc`用户GPU地址空间映射；
`kbase_reg_prepare_native()`负责初始化`reg->cpu_alloc`和`reg->gpu_alloc`：
    drivers/gpu/arm/b_r19p0/mali_kbase_mem.h
    541 static inline int kbase_reg_prepare_native(struct kbase_va_region *reg,
    542         struct kbase_context *kctx, int group_id)
    543 {
    549     reg->cpu_alloc = kbase_alloc_create(kctx, reg->nr_pages,
    550             KBASE_MEM_TYPE_NATIVE, group_id);
    551     if (IS_ERR(reg->cpu_alloc))
    552         return PTR_ERR(reg->cpu_alloc);
    553     else if (!reg->cpu_alloc)
    554         return -ENOMEM;
    555 
    556     reg->cpu_alloc->imported.native.kctx = kctx;
    557     if (kbase_ctx_flag(kctx, KCTX_INFINITE_CACHE)
    558         && (reg->flags & KBASE_REG_CPU_CACHED)) {
    566     } else {
    567         reg->gpu_alloc = kbase_mem_phy_alloc_get(reg->cpu_alloc);
    568     }
    578 }
这里我们需要使`reg->cpu_alloc`和`reg->gpu_alloc`指向同一个对象(line
567)，它们均是`kbase_mem_phy_alloc`:
    drivers/gpu/arm/b_r19p0/mali_kbase_mem.h
    128 struct kbase_mem_phy_alloc {
    129     struct kref           kref;
    130     atomic_t              gpu_mappings;
    131     size_t                nents;
    132     struct tagged_addr    *pages;
    133     struct list_head      mappings;
    134     struct list_head      evict_node;
    135     size_t                evicted;
    136     struct kbase_va_region *reg;
    137     enum kbase_memory_type type;
    177 };
我仅摘录了相关字段：
`kref`表示对象的引用次数；
`gpu_mappings`表示多少虚拟地址映射到该区域（想想前面提到`KBASE_IOCTL_MEM_ALIAS`命令）；
`nents`表示当前有多少物理页； `pages`表示物理页数组； `reg`指向包含该对象的reg；
`type`表示内存类型，这里是`KBASE_MEM_TYPE_NATIVE`；
基本的数据结构已经建立起来，驱动调用`kbase_alloc_phy_pages()`为`reg->cpu_alloc`分配物理页，之后将reg挂载到`kctx->pending_regions`数组中：
    drivers/gpu/arm/b_r19p0/mali_kbase_mem_linux.c
    254 struct kbase_va_region *kbase_mem_alloc(struct kbase_context *kctx,
    255         u64 va_pages, u64 commit_pages, u64 extent, u64 *flags,
    256         u64 *gpu_va)
    257 {
    376     if (*flags & BASE_MEM_SAME_VA) {
    389         /* return a cookie */
    390         cookie_nr = __ffs(kctx->cookies);
    391         kctx->cookies &= ~(1UL pending_regions[cookie_nr]);