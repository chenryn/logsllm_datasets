1.25
>>> round(2.675, 2) # 和下⾯面的都是奇数 7，但有舍有⼊入。
2.67
>>> round(2.375, 2)
2.38
对此，官⽅⽂档 《Floating Point Arithmetic: Issues and Limitations》宣称并⾮错误，⽽属
事出有因。对此，我们可改⽤ Decimal，按需求选取可控制的进位⽅案。
>>> from decimal import Decimal, ROUND_HALF_UP
>>> def roundx(x, n):
return Decimal(x).quantize(Decimal(n), ROUND_HALF_UP) # 严格按照四舍五⼊入进⾏行行。
>>> roundx("1.24", ".1")
Decimal('1.2')
>>> roundx("1.25", ".1")
Decimal('1.3')
>>> roundx("1.26", ".1")
Decimal('1.3')
>>> roundx("1.245", ".01")
Decimal('1.25')
>>> roundx("2.675", ".01")
Decimal('2.68')
>>> roundx("2.375", ".01")
Decimal('2.38')
!51
学习笔记 . 第三版
2.3 字符串
字符串（str）存储 Unicode ⽂本，是不可变序列类型。相⽐ Python 2 ⾥的混乱，Python 3
总算顺应时代发展，将⽂本和⼆进制彻底分离。
Unicode 设计意图是为了解决跨语⾔和跨平台转换和处理需求，⽤统⼀编码⽅案容纳不同国家地
区的⽂字，以解决传统编码⽅案的不兼容问题，故又称作统⼀码、万国码等等。
Unicode 为每个字符分配⼀个称作码点（code point）的整数序号，此对应编码⽅案叫做通⽤字符
集（Universal Character Set, UCS）。依据编码整数长度，可分做 UCS-2 和 UCS-4 两种，后者可
容纳更多字符。UCS 只规定了字符和码点的对应关系，并不涉及如何显⽰和存储。
UTF（Unicode Transformation Format）的作⽤是将码点整数转换为计算机可存储的字节格式。
发展⾄今，有 UTF-8、UTF-16、UTF-32 等多种⽅案。其中 UTF-8 采⽤变长格式，因与 ASCII 兼
容，是当下使⽤最⼴泛的⼀种。对于英⽂为主的内容，UTF-8 可获得最好的存储效率。⽽使⽤两
字节等长⽅案的 UTF-16，有更快的处理效率，常被⽤作执⾏编码。
UTF 还可在⽂本头部插⼊称作 BOM（byte order mark）的标志来标明字节序信息，以区分⼤⼩
端（BE、LE）。如此，又可细分为 UTF-16LE、UTF-32BE 等。
>>> s = "汉字"
>>> len(s)
2
>>> hex(ord("汉")) # code point
0x6c49
>>> chr(0x6c49)
汉
>>> ascii("汉字") # 对 non-ASCII 进⾏行行转义。
\u6c49\u5b57
字符串字⾯量（literal）以成对单引号、双引号，或跨⾏三引号语法构成，⾃动合并相邻
字⾯量。⽀持转义、⼋进制、⼗六进制，或 Unicode 格式字符。
!52
学习笔记 . 第三版
⽤单引号还是双引号，并没有什么特殊限制。如果⽂本内引⽤⽂字使⽤双引号，那么外⾯
⽤单引号可避免转义，更易阅读。通常情况下，建议遵循多数编程语⾔惯例，使⽤双引号
标⽰。除去单引号在英⽂句法⾥的特殊⽤途外，它还常⽤来表⽰单个字符。
>>> "h\x69, \u6C49\U00005B57"
hi, 汉字
注意：Unicode 格式⼤⼩写分别表⽰ 16 位和 32 位整数，不能混⽤。
>>> "It's my life" # 英⽂文缩写。
>>> 'The report contained the "facts" of the case.' # 包含引⽂文，避免使⽤用 \" 转义。
>>> "hello" ", " "world" # 合并多个相邻字⾯面量量。
hello, world
>>> """ # 换⾏行行符、前导空格、空⾏行行都是组成内容。
The Zen of Python, by Tim Peters
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
"""
可在字⾯量前添加标志，指⽰构建特定格式字符串。
最常⽤的原始字符串（r, raw string），它将反斜线视作字符内容，⽽⾮转义标志。这在构
建类似 Windows 路径、正则表达式匹配模式（pattern）之类的⽂法字符串时很有⽤。
>>> open(r"c:\windows\readme.txt") # Windows 路路径。
>>> re.findall(r"\b\d+\b", "a10 100") # 正则表达式。
['100']
>>> type(u"abc") # 默认 str 就是 unicode，⽆无需添加 u 前缀。
str
!53
学习笔记 . 第三版
>>> type(b"abc") # 构建字节数组。
bytes
操作
⽀持⽤加法和乘法运算符拼接字符串。
>>> s = "hello"
>>> s += ", world"
>>> "-" * 10
----------
编译器会尝试在编译期直接计算出字⾯量拼接结果，避免运⾏时开销。不过此类优化程度
有限，并不总是有效。
>>> def test():
a = "x" + "y" + "z"
b = "a" * 10
return a, b
>>> dis.dis(test)
2 0 LOAD_CONST 7 ('xyz') # 直接给出结果，省略略加法运算。
3 4 LOAD_CONST 8 ('aaaaaaaaaa') # 省略略乘法运算。
⾄于多个动态字符串拼接，应优先选择 join 或 format ⽅式。
相⽐多次加法运算和多次内存分配（字符串是不可变对象），join 这类函数（⽅法）可预
先计算出总长度，⼀次性分配内存，随后直接拷贝内存数据填充。另⼀⽅⾯，将固定内容
与变量分离的模版化 format，更易阅读和维护。
>>> username = "qyuhen"
>>> datetime = "2017010"
>>> "/data/" + username + "/message/" + datetime + ".txt"
/data/qyuhen/message/20170101.txt
!54
学习笔记 . 第三版
>>> "/data/{user}/message/{time}.txt".format(user = username, time = datetime)
/data/qyuhen/message/20170101.txt
我们⽤ line_profiler 对⽐⽤加法和 join 拼接 26 个⼤写字母的性能差异。虽然该测试不具备
代表性，但可以提供⼀个粗略的验证⽅法。
#!/usr/bin/env python3
import string
x = list(string.ascii_uppercase)
@profile
def test_add():
s = ""
for c in x:
s += c
return s
@profile
def test_join():
return "".join(x)
test_add()
test_join()
输出：
$ kernprof -l ./test.py && python -m line_profiler test.py.lprof
⾏行行号 # 执⾏行行次数 耗时 每次耗时 耗时百分⽐比 源码
============================================================================
7 @profile
8 def test_add():
9 1 8 8.0 20.0 s = ""
10 27 13 0.5 32.5 for c in x:
11 26 18 0.7 45.0 s += c
12 1 1 1.0 2.5 return s
⾏行行号 # 执⾏行行次数 耗时 每次耗时 耗时百分⽐比 源码
============================================================================
15 @profile
16 def test_join():
17 1 3 3.0 100.0 return "".join(x)
!55
学习笔记 . 第三版
有关 line_profiler 使⽤⽅法请参阅第⼗⼆章。
编写代码除保持简单外，还应具备良好的可读性。⽐如判断是否包含⼦串，in、not in 操
作符就⽐ find ⽅法⾃然，更贴近⽇常阅读习惯。
>>> "py" in "python"
True
>>> "Py" not in "python"
True
作为序列类型，可以使⽤索引序号访问字符串内容，单个字符或者某⼀个⽚段。⽀持负索
引，也就是从尾部以 -1 开始（索引 0 表⽰正向第⼀个字符）。
>>> s = "0123456789"
>>> s[2]
2
>>> s[-1]
9
>>> s[2:6]
2345
>>> s[2:-2]
234567
使⽤两个索引号表⽰⼀个序列⽚段的语法称作切⽚（slice），可以此返回字符串⼦串。但
⽆论以哪种⽅式返回与原字符串内容不同的⼦串时，都会重新分配内存，并复制数据。不
像某些语⾔那样，仍旧以指针引⽤原字符串内容缓冲区。
先看相同或不同内容时，字符串对象构建情形。
>>> s = "-" * 1024
>>> s1 = s[10:100] # ⽚片段，内容不不同。
>>> s2 = s[:] # 内容相同。
>>> s3 = s.split(",")[0] # 内容相同。
>>> s1 is s # 内容不不同，构建新对象。
False
!56
学习笔记 . 第三版
>>> s2 is s # 内容相同时，直接引⽤用原字符串串对象。
True
>>> s3 is s
True
再进⼀步⽤ memory_profiler 观察内存分配情况。
@profile
def test():
a = x[10:-10]
b = x.split(",")
return a, b
x = "0," * (1 >> s = "汉字"
>>> b = s.encode("utf-16") # to bytes
>>> b.decode("utf-16") # to unicode string
汉字
如要处理 BOM 信息，可导⼊ codecs 模块。
>>> s = "汉字"
>>> s.encode("utf-16").hex()
fffe496c575b
>>> codecs.BOM_UTF16_LE.hex() # BOM 标志。
fffe
>>> codecs.encode(s, "utf-16be").hex() # 按指定 BOM 转换。
6c495b57
>>> codecs.encode(s, "utf-16le").hex()
496c575b
还有，Python 3 默认编码不再是 ASCII，所以⽆需额外设置。
Python 3.6
>>> sys.getdefaultencoding()
utf-8
Python 2.7
>>> import sys
>>> reload(sys)
>>> sys.setdefaultencoding("utf-8")
>>> b = s.encode("utf-16")
>>> b.decode("utf-16")
u'\u6c49\u5b57'
>>> type(b)
!58
学习笔记 . 第三版
格式化
长期发展下来，Python 累积了多种字符串格式化⽅式。相⽐古⽼的⾯孔，⼈们更喜欢或倾
向于使⽤新的特征。
Python 3.6 新增了 f-strings ⽀持，这在很多脚本语⾔⾥属于标配。
使⽤ f 前缀标志，解释器解析⼤括号内的字段或表达式，从上下⽂名字空间查找同名对象
进⾏值替换。格式化控制依旧遵循 format 规范，但阅读体验上更加完整和简洁。
>>> x = 10
>>> y = 20
>>> f"{x} + {y} = {x + y}" # f-strings
10 + 20 = 30
>>> "{} + {} = {}".format(x, y , x + y)
10 + 20 = 30
表达式除运算符外，还可以是函数调⽤。
>>> f"{type(x)}"
完整 format 格式化以位置序号、字段名匹配替换值参数，允许对其施加包括对齐、填充、
精度等控制。从某种⾓度看，f-strings 有点像是 format 的增强语法糖。
{ fieldname ! conversion : formatspec } str.format
[fill] align sign # 0 width , .prec type
[填充字符] 对齐 数字符号 格式前缀 填充 宽度 千分位 小数长度 类型
!59
学习笔记 . 第三版
将两者进⾏对⽐，f-strings 类模版⽅式更加灵活，⼀定程度上将输出样式与数据来源分离。
但其缺点是与上下⽂名字耦合，导致模版内容与代码必须保持同步修改。⽽ format 的序
号与主键匹配⽅式可避开这点，只可惜它不⽀持表达式。
另外，对于简短的格式化处理，format 拥有更好的性能。
⼿手⼯工序号和⾃自动序号
>>> "{0} {1} {0}".format("a", 10)
a 10 a
>>> "{} {}".format(1, 2) # ⾃自动序号，不不能与⼿手⼯工序号混⽤用。
1 2
主键
>>> "{x} {y}".format(x = 100, y = [1,2,3])
100 [1, 2, 3]
属性和索引