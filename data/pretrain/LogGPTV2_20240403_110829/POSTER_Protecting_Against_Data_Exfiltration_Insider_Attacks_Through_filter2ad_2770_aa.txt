title:POSTER: Protecting Against Data Exfiltration Insider Attacks Through
Application Programs
author:Asmaa Sallam and
Elisa Bertino
CORE
Provided by Purdue E-Pubs
Metadata, citation and similar papers at core.ac.uk
Purdue University
Purdue e-Pubs
Cyber Center Publications
11-2014
Cyber Center
POSTER: Protecting Against Data Exfiltration
Insider Attacks Through Application Programs
Asmaa Mohamed Sallama
Purdue University
Elisa Bertino
Purdue University, PI:EMAIL
Follow this and additional works at: http://docs.lib.purdue.edu/ccpubs
Part of the Engineering Commons, Life Sciences Commons, Medicine and Health Sciences
Commons, and the Physical Sciences and Mathematics Commons
Sallama, Asmaa Mohamed and Bertino, Elisa, "POSTER: Protecting Against Data Exfiltration Insider Attacks Through Application
Programs" (2014). Cyber Center Publications. Paper 623.
http://dx.doi.org/10.1145/2660267.2662384
This document has been made available through Purdue e-Pubs, a service of the Purdue University Libraries. Please contact PI:EMAIL for
additional information.
POSTER: Protecting Against Data Exﬁltration Insider
Attacks Through Application Programs
Asmaa Sallam, Elisa Bertino
Computer Science Department
Purdue University
West Lafayette, IN 47906
asallam, PI:EMAIL
ABSTRACT
In this paper, we describe a system that distinguishes be-
tween legitimate and malicious database transactions per-
formed by application programs. Our system is particu-
larly useful for protecting against code-modiﬁcation attacks
performed by insiders who have access to and can change
the programs’ source code to make them execute diﬀerent
queries than those they are expected to execute. Our sys-
tem works with any type of DBMS and requires minimum
modiﬁcation to application programs.
Categories and Subject Descriptors
H.2.m [Information Systems]: DATABASE MANAGE-
MENT—Miscellaneous
1.
INTRODUCTION
Organizations ranging from government agencies (e.g., mil-
itary, judiciary, etc.) and contractors, to commercial enter-
prises and research labs are witnessing an increasing amount
of sophisticated insider attacks that are diﬃcult to miti-
gate with existing security mechanisms and controls.
In-
sider threats are staged either by disgruntled employees, or
by employees engaged in malicious activities such as espi-
onage. One of the most important objectives of insiders is
to exﬁltrate sensitive data.
Protection against data exﬁltration from insiders requires
combining diﬀerent techniques [1]. One important tech-
nique is represented by anomaly detection tools which create
data-access proﬁles of normal transactions; accesses to the
database are monitored and checked upon these proﬁles to
detect anomalous accesses [4]. Some access patterns may
be indicative of insider attackers on a mission to steal data.
For example, consider a clerk who, for his/her daily activ-
ity, only needs to access 10% of the records in a table in the
database. An access by this clerk that retrieves all records
from this table is certainly anomalous. We refer the reader
to [2] for a discussion on anomalous access patterns.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
ACM 978-1-4503-2957-6/14/11.
http://dx.doi.org/10.1145/2660267.2662384 .
A major limitation of previous work on anomaly detection
for databases is to assume that queries are issued directly
by users. However, database queries are not necessarily only
issued by individuals but can also be issued by application
programs. A malicious insider, such as a software engineer
within the organization with the authorization to modify the
application programs, can exﬁltrate data from a database by
modifying the source code of the program so that the pro-
gram issues queries diﬀerent from those it normally sends.
One possible approach to address this problem would be
to create proﬁles of queries issued by application programs
and compare the actual accesses by the programs against
these proﬁles. Current commercial Security Information and
Event Management (SIEM) tools, that are able to capture
and log queries issued by application programs together with
relevant metadata, can be used for this purpose. However,
creating complete and accurate proﬁles is a challenge in the
case of application programs since programs issue diﬀerent
queries depending on input parameters and context infor-
mation. Recording and saving all legitimate sequences of
queries is expensive in the case of large programs, large in-
put space, and high number of input parameters.
In this paper, we propose a diﬀerent approach for sup-
porting proﬁling and anomaly detection for application pro-
grams. During the proﬁle-creation phase, our approach uses
software testing techniques to build a proﬁle for the program
in which the control structure of the program and locations
in the code where SQL queries are issued are recorded. Dur-
ing the detection phase, the system uses this proﬁle and the
input values to compose the query strings that are expected
to be issued by the program. These expected queries are
then compared to the actual ones sent by the application
program to the DataBase Management System (DBMS) and
diﬀerences are considered anomalous.
The rest of this paper is organized as follows. Section 2
deﬁnes relevant notions from the software testing area. Sec-
tion 3 describes the architecture, algorithms and implemen-
tation of the proposed system. Section 4 concludes the pa-
per.
2. PRELIMINARIES
The Symbolic Execution technique [3] is a program
analysis technique that uses symbolic values as program in-
puts and symbolic expressions to represent the values of pro-
gram variables. The symbolic execution tree is the tree
representation of all the possible paths of the program; a
node in the tree stores the program variables as a function of
the symbolic inputs and the path constraint (PC) which
1493Figure 1: System Architecture
is a conjunction of conditions on the input to follow a path in
the program. Symbolic execution is being used for software
testing [3] [5].
Software Instrumentation refers to adding additional
code to a program for monitoring some program behaviour.
Instrumentation can be done either statically (i.e., at com-
pile time) or dynamically (i.e., at runtime).
The Backward Data Slice of a variable in a program
at a speciﬁc statement is the sub-program that aﬀects the
value of the variable at that point.
3. PROPOSED SYSTEM
3.1 Architecture
Our system consists of four components: a Target DBMS
(T-DBMS), the Anomaly Detection Engine (ADE), the Query
Interceptor, and the Response Router. These components
interact in order to check the proper sequence of queries sent
by an application program. T-DBMS is the DBMS that