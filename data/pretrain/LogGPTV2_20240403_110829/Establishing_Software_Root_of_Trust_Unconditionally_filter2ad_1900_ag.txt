of Information and Communication Technologies SSTIC (2011).
[45] LONE-SANG, F., NICOMETTE, V., AND DESWARTE, Y. A tool to
analyze potential I/O attacks against PCs. In IEEE Security and Privacy
(2014), pp. 60–66.
[46] MANSOUR, Y., NISAN, N., AND TIWARI, P.
The computational
complexity of universal hashing. In Proc. of ACM STOC (1990).
[47] MANSOUR, Y., SCHIEBER, B., AND TIWARI, P. A lower bound for
integer greatest common divisor computations. J. ACM 38, 2 (1991).
[48] MEARIAN, L. There’s no way of knowing if the NSA’s spyware is on
your hard drive. Computerworld 2 (2015).
[49] MILTERSEN, P. B. Lower bounds for static dictionaries on RAMs
In Proc. of the Int. Coll.
with bit operations but no multiplication.
on Automata, Languages and Programming (ICALP) (1996), Springer,
pp. 442–453.
[50] NATIONAL COMPUTER SECURITY CENTER. Trusted computer system
evaluation criteria (The Orange Book), 1985. DoD 5200.28-STD.
[51] NATIONAL COMPUTER SECURITY CENTER. A guideline for under-
standing trusted recovery in trusted systems (Yellow Book), 1991.
NCSC-TG-022, Library No. 5-236,061 Version 1.
[52] NEWMAN, L. H.
WIRED, 2017.
Intel chip ﬂaws leave millions of devices exposed.
[53] NOORMAN, J., AGTEN, P., DANIELS, W., STRACKX, R., VAN HER-
REWEGE, A., HUYGENS, C., PRENEEL, B., VERBAUWHEDE, I., AND
PIESSENS, F.
trustworthy extensible networked
devices with a zero-software trusted computing base. In Proc. of 22nd
USENIX Security Symposium (USENIX Security 13) (2013).
Sancus: Low-cost
13
[54] PAGH, A., AND PAGH, R. Uniform hashing in constant time and
optimal space. SIAM J. Comput. 38, 1 (Jan 2008), 85–96.
[55] PARNO, B. Bootstrapping trust in a trusted platform. In Proceedings
topics in security (2008), USENIX
the 3rd conference on Hot
of
Association, pp. 1–6.
[56] PARNO, B., MCCUNE, J. M., AND PERRIG, A. Bootstrapping Trust in
Modern Computers, vol. 10 of Springer Briefs in Computer Science.
Springer, 2011.
[57] P ˇATRAS¸ CU, M. WebDiarios de Motocicleta, December 2008.
[58] PERRIG, A., AND VAN DOORN, L. Refutation of “On the Difﬁculty of
Software-Based Attestation of Embedded Devices”, 2010.
[59] PIRONIO, S. et al.. Random numbers certiﬁed by Bell’s theorem. Nature
(Apr 2010).
[60] RAIU, C. Commentary in Equation: The Death Star of the Malware
Galaxy. In Kaspersky Lab (Feb 2015).
[61] REINGOLD, E. M., AND STOCKS, A. I.
Simple proofs of lower
bounds for polynomial evaluation. In Proceedings of the IBM Research
Symposium on the Complexity of Computer Computations (1972),
Springer, pp. 21–30.
[62] SCHMUGAR, C. GPU malware: separating fact from ﬁction. In McAfee
Labs Threats Report (2015), no. August, pp. 25–28.
[63] SESHADRI, A., LUK, M., SHI, E., PERRIG, A., VAN DOORN, L.,
AND KHOSLA, P. Pioneer: Verifying code integrity and enforcing
In Proc. of the 20th
untampered code execution on legacy systems.
ACM SOSP (2005), pp. 1–16.
[64] SESHADRI, A., PERRIG, A., VAN DOORN, L., AND KHOSLA, P.
SWATT: Software-based attestation for embedded devices. In Proceed-
ings of the IEEE Symposium on Security and Privacy (2004), IEEE,
pp. 272–282.
[65] SHALLUE, C. J. Permutation polynomials of ﬁnite ﬁelds. ArXiv e-prints
(Nov 2012).
[66] SPINELLIS, D. Reﬂection as a mechanism for software integrity
veriﬁcation. ACM Transactions on Information System Security 3, 1
(Feb. 2000), 51–62.
[67] STEWIN, P. Detecting peripheral-based attacks on the host memory.
T-Lab Series in Telecommunication Services, Springer-Verlag, 2014.
[68] TAM, S. Modern clock distribution systems. In Clocking in Modern
VLSI Systems, Integrated Circuits and Systems. Springer, 2009, ch. 2,
pp. 6–95.
[69] TARUI, J. Randomized polynomials, threshold circuits, and the polyno-
mial hierarchy. In STACS 91: 8th Ann. Symp. on Theoretical Aspects of
Computer Science, Hamburg, Germany (1991), Springer, pp. 238–250.
[70] TEXAS INSTRUMENTS. AM/DM37X multimedia device technical
reference manual. Version R, Sept. 2012.
[71] THE TRUSTED COMPUTING GROUP. TPM Main speciﬁcation version
1.2 (revision 116), 2011.
[72] THORUP, M. High speed hashing for integers and strings. CoRR
abs/1504.06804 (Sept 2015).
[73] VASUDEVAN, A., CHAKI, S., JIA, L., MCCUNE, J., NEWSOME, J.,
AND DATTA, A. Design, implementation and veriﬁcation of an eXten-
sible and Modular Hypervisor Framework. In Proceedings of the 2013
IEEE Symposium on Security and Privacy (2013), IEEE, pp. 430–444.
[74] WEGMAN, M., AND CARTER, L. New hash functions and their use in
authentication and set equality. J. of Computer and Systems Sciences,
22 (1981), 265–279.
[75] YAO, A. C.-C. Should tables be sorted? J. ACM 28, 3 (1981), 615–628.
[76] YOUNG, W., BOEBERT, E., AND KAIN, D. Proving a computer system
secure. Scientiﬁc Honeyweller 6, 2 (1985), 18–27.
[77] ZADDACH, J., KURMUS, A., BALZAROTTI, D., BLASS, E., FRANCIL-
LON, A., GOODSPPED, T., GUPTA, M., AND KOLTSIDAS, I.
Imple-
mentation and implications of a stealth hard-drive backdoor. In Proc.
of the 29th ACSAC (2013), ACM.
[78] ZHAO, J., GLIGOR, V. D., PERRIG, A., AND NEWSOME, J. ReD-
ABLS: Revisiting Device Attestation with Bounded Leakage of Secrets,
vol. 8263 of Lecture Notes in Computer Science. Springer, 2013.
X. Appendix A – The Concrete Word RAM Model
Storage. cWRAM storage includes a ﬁxed sequence M of
w-bit memory words indexed by an integer, such that constant
w > log|M|. The allocation of each instruction in a memory
word follows typical convention: the op code in the low-order
bytes and the operands in the higher-order bytes. Furthermore,
cWRAM storage also includes k w-bit general-purpose proces-
sor registers, R0, R1, . . . , Rk−1. A memory area is reserved for
the memory mapped I/O registers of different devices and the
interrupt vector table, which speciﬁes the memory location of
the interrupt handlers. The I/O registers include data registers,
device-status registers, and device-control registers.
Special Registers. In addition to the program counter (PC),
the processor state includes internal registers that contain the
asynchronous-event status bits speciﬁes whether these events
can be posted or are disabled; e.g., by the events clear or enable
instructions. It also includes a set of ﬂags and processor con-
ﬁguration settings (e.g., clock frequency) and speciﬁes whether
virtual memory/TLBs and caches are enabled. Instructions to
enable and disable cashes/virtual memory are also included.
In systems that do not automatically disable cache use when
virtual memory is disabled, an internal register containing
cache conﬁguration status is provided.
Addressing. Each instruction operand is located either in
a separate memory word or in the immediate-addressing ﬁelds
of instructions. Immediate addressing is applicable only when
operands ﬁt into some fraction of a word, which depends on the
size of the instruction set and addressing mode ﬁelds. Indirect,
PC-relative, and bit addressing are also supported.
Instruction Set. The cWRAM instruction set includes all
the types of practical RAM instructions [49] with up to two
operands.
- Register initialization. Load immediate: Ri
:= α, or
relative: Ri := M [P C + α], where α is a constant, and direct
Read: Ri := M [Rj];
- Register transfer. Move: Ri := Rj; Write: M [Ri] := Rj;
All known register initialization and transfer instructions can
be represented in cWRAM. They can access memory-mapped
I/O registers in I/O transfers.
- Unconditional branches: go to g. Branch target g desig-
nates either a positive/negative offset from the current program
counter, P C, and the branch-target address is P C + g, or a
register Rk, which contains the branch-target address.
- Conditional branches: for each predicate pred: F2w ×
F2w → {0, 1}, where pred ∈ {≤,≥,=,(cid:54)=}, there is an instruc-
tion pred(Ri, Rj)g, which means if pred(Ri, Rj) = 1(true),
go to P C + g.
If one of the input registers, say Rj, contains a bit mask,
there is an instruction pred(Ri, mask)g, which means if (Ri∧
mask) = 0, go to P C + g. If Rj = 0, there is an instruction
pred(Ri)g, which means if pred(Ri, 0) = 1, go to PC+g.
Note that the predicate set, pred, can be extended with
other two-operand predicates so that all known conditional-
branch instructions can be represented in cWRAM.
- Halt: there is an instruction that stops program execution
and outputs either the result, when program accepts the input,
or an error when the program does not.
14
- Computation Instructions. We adapt Miltersen’s notion of
the function locality [49] for computation functions and use it
to classify the set of cWRAM computation instructions based
on their locality.
Function Locality. Let I = {ij > ij−1 > ... > i1} ⊆
{0, 1, ..., w − 1} be a bit-index set, x ∈ {0, 1}w a bit string of
length w, and write x[I] = x[ij]x[ij−1]...x[i1] for the bits of
x selected by I. Let I = {i, i + 1, , j − 1, j} be an interval of
consecutive bit indices. Then, for constants α, β ≥ 1, function
f : F2w × F2w → F2w is (α, β)-local if for any interval I of
cardinality #I there are intervals I1 and I2, such that:
- #I1, #I2 ≤ α · #I; and
- if the values represented by the bits of x selected by I1
and those of y selected by I2 are ﬁxed, then the bits of f (x, y)
selected by I take on at most β different values; i.e., for any
constants c1, c2,
#{f (x, y)[I] | (x)[I1] = c1 ∧ (y)[I2] = c2} ≤ β.
Basic set: For any f : F2w ×F2w → F2w, where f ∈ {∨,∧;⊕,
logic shif tr/l(Ri, α), rotater/l(Ri, α), +,−}, and f : F2w →
F2w, where f ∈ {bitwise ¬}, there is an instruction Rh =
f (Ri, Rj), Rh = f (Ri, α), and Rh = f (Rk), respectively.
Integers are represented in two’s complement binary notation
and hence are in the range [−2w−1 . . .− 1, 0, 1 . . . 2w−1 − 1].
The instructions of the basic set implement (1, β)-local
functions where β ≤ 2; e.g., all logic instructions are (1, 1)-
local, and the addition/subtraction are (1, 2)-local [49].
Extended set: This set includes all instructions implement-
ing (1, β)-local functions with β ≤ w − 1. For exam-
ple, variable shif tr/l(Ri, Rj) and rotater/l(Ri, Rj), where
content(Rj) ∈ [0, w − 1), are (1, w − 1)-local.
Multiplication set: This set includes all instructions imple-
menting (1, β)-local functions with β ≤ 2w−1. For example,
13, where content(Rj) = p, 2 < p < 2w−1, is
Ri mod Rj
(1, p)-local. Integer multiplication is (1, 2w−1)-local.
All integer, logic, and shift/rotate computation instructions
of real ISAs with up to two operands fall into the three sets
deﬁned above. In fact, any computation function implemented
by a ﬁnite-state transducer is (1, β)-local for a constant β.
Note that in all other WRAM models w is a variable, and
hence the instructions of the extended and multiplication sets
become non-local since β is no longer constant.
However, as in all WRAM models [29], ﬂoating-point
instructions are not included in cWRAM. These instructions
are irrelevant to the concrete space-time bounds of optimal
integer computations where instruction sequences are latency-
bound; i.e., where an instruction depends on the results of
another. Here integer operations are always faster for the same
data size; e.g., typically twice as fast in most commodity ISAs.
Similarly, non-computation instructions left out of cWRAM
are irrelevant to these types of optimal integer computations.
Relationship with other WRAM computation instructions. The
basic set is in all WRAM models; viz., the practical/restricted
model [29], [49]. The extended set augments the basic set
since its instructions do not violate the unit-cost execution
requirement of WRAM; e.g., the (non-local) variable shift is in
the practical RAM [49]. The multiplication set was excluded
13When a Ri mod Rj instruction is unavailable, an optimal implementation
by other cWRAM instructions exists.
from all early WRAM models since its (non-local) instructions
cannot meet the unit-cost requirement. A notable exception is
the Circuit RAM, which allows variable instruction-execution
cost [1]. In a concession to the small constant execution-
time difference between multiplications and additions in real
instruction sets, all recent unit-cost WRAM models include the
multiplication set [12], [40], [54].
Function Simulation. Let functions f, g : F2w × F2w →
F2w be (1, βf )- and (1, βg)-local, respectively. Function f
simulates function g if for all x, y ∈ [0, 2w), f (x, y) = g(x, y),
which implies that βf = βg. If βf (cid:54)= βg, the simulation of g
by f causes a simulation error. This implies, for instance, that
neither the addition nor the multiplication instructions can be
simulated by any single other instruction without error.
is set
Execution Model. Once a program’s instructions are stored
the
in memory and the processor registers are initialized,
program counter register, P C,
to the index of the
memory word denoting the next
instruction (i.e., program
line number) to be executed. The P C is incremented at the
completion of each instruction, except when (1) a conditional-
branch predicate evaluates to 1, (2) an unconditional branch
instruction is executed, (3) an interrupt triggers, and (4) the
Halt instruction is executed. In cases (1) and (2), the P C is
either offset by g or set to Rk, whereas in case (3) the P C is
set to the ﬁrst instruction of an interrupt handler.
A program in which the execution of all branching in-
structions precede their targets is called a loop-free program.
A program with no branch instructions is straight-line. Let
I1, . . . , In be a straight-line program. A program
repeat I1, . . . , In until pred(Ri, Rj)g = 0
is called the loop program14. Alternatively, the conditional-
branch instruction can be pred(Ri)g.
A loop program can implement synchronous I/O by busy
waiting; e.g., if register Ri selects the busy/done status bit
of a device-status register and g = −1, then one-operand
instruction pred(Ri)g represents a busy waiting loop program.
Running Time. Unit-time instruction execution implies the
running time of a computation is the number of instructions
executed until Halt or error output.
14Ibarra et al. [28] show that for any non-loop-free program an equivalent
while pred = 1 do I1, . . . , In end exists and its length is proportional with
the original program. This obviously holds for repeat-until programs.
15