● Windows Search服务用于在磁盘上创建数据的索引。
● 
Superfetch服务可以把常用的应用程序和库预先加载到内存中，因此缩短了这些应
用程序的启动时间。
可以使用Services管理工具查看系统上的所有服务，如图39-1所示。这个程序可以通
过控制面板上的管理工具找到。
图39-1
  注意： 使用.NET Core不能创建Windows服务，这需要.NET Framework。要
控制服务，可以使用.NET Core。
39.2 Windows服务的体系结构
操作Windows服务需要3种程序：
● 服务程序
● 服务控制程序
● 服务配置程序
服务程序本身用于提供需要的实际功能。服务控制程序可以把控制请求发送给服务，
如开始、停止、暂停和继续。使用服务配置程序可以安装服务，这意味着不但要把服务复
制到文件系统中，还要把服务的信息写到注册表中，这个注册信息由服务控制管理器
（Service Control Manager, SCM）用于启动和停止服务。尽管.NET组件可通过xcopy安装
——因为.NET组件不需要把信息写入注册表中，所以可以使用xcopy命令安装它们；但
是，服务的安装需要注册表配置。此外，服务配置程序也可以在以后改变服务的配置。下
面介绍Windows服务的3个组成部分。
39.2.1 服务程序
在讨论服务的.NET实现方式之前，本节首先讨论服务的Windows体系结构和服务的
内部功能。
服务程序实现服务的功能。服务程序需要3个部分：
● 主函数
● service-main函数
● 处理程序
在讨论这些部分前，首先需要介绍服务控制管理器（SCM）。对于服务，SCM的作
用非常重要，它可以把启动服务或停止服务的请求发送给服务。
1．服务控制管理器
SCM是操作系统的一个组成部分，它的作用是与服务进行通信。图39-2给出了这种通
信工作方式的序列图。
图39-2
如果将服务设置为自动启动，则在系统启动时，将启动该服务的每个进程，进而调用
该进程的主函数。该服务负责为它的每项服务都注册一个service-main函数。主函数是服
务程序的入口点，在这里，service-main函数的入口点必须用SCM注册。
2．主函数、service-main和处理程序
服务的主函数是程序的一般入口点，即Main（）方法，它可以注册多个service-main
函数，service-main函数包含服务的实际功能。服务必须为所提供的每项服务注册一个
service-main函数。服务程序可以在一个程序中提供许多服务，例如，
\system32\services.exe服务程序就包括Alerter、Application 
Management、
Computer Browser和DHCP Client等服务项。
SCM为每一个应该启动的服务调用service-main函数。service-main函数的一个重要任
务是用SCM注册一个处理程序。
处理程序函数是服务程序的第3部分。处理程序必须响应来自SCM的事件。服务可以
停止、暂停或重新开始，处理程序必须响应这些事件。
使用SCM注册处理程序后，服务控制程序可以把停止、暂停和继续服务的请求发送
给SCM。服务控制程序独立于SCM和服务本身。在操作系统中有许多服务控制程序，例
如以前介绍的MMC Services管理单元（见图39-1）。也可以编写自己的服务控制程序，一
个比较好的服务控制程序是SQL Server Configuration Manager，它运行在MMC中，如图
39-3所示。
图39-3
39.2.2 服务控制程序
顾名思义，使用服务控制程序可以控制服务。为了停止、暂停和继续服务，可以把控
制代码发送给服务，处理程序应该响应这些事件。此外，还可以询问服务的实际状态（假
定服务在运行或挂起，或者在某种错误的状态下），并实现一个响应自定义控制代码的自
定义处理程序。
39.2.3 服务配置程序
不能使用xcopy安装服务，服务必须在注册表中配置。注册表包含了服务的启动类
型，该启动类型可以设置为自动、手动或禁用。必须配置服务程序的用户、服务的依赖关
系（例如，一个服务必须在当前服务开始之前启动）。所有这些配置工作都在服务配置程
序中进行。虽然安装程序可以使用服务配置程序配置服务，但是服务配置程序也可以用于
在以后改变服务配置参数。
39.2.4 Windows服务的类
在.NET Framework中，可以在System.ServiceProcess名称空间中找到实现服务的三部
分的服务类：
● 必须从ServiceBase类继承才能实现服务。ServiceBase类用于注册服务、响应开始和
停止请求。
● ServiceController类用于实现服务控制程序。使用这个类，可以把请求发送给服务。
● 顾名思义，ServiceProcessInstaller类和ServiceInstaller类用于安装和配置服务程序。
下面介绍怎样新建服务。
39.3 创建Windows服务程序
本章创建的服务将驻留在引用服务器内。对于客户发出的每一个请求，引用服务器都
返回引用文件的一个随机引用。解决方案的第一部分由3个程序集完成，一个用于客户
端，两个用于服务器，图39-4显示了这个解决方案。程序集QuoteServer包含实际的功能。
服务可以在内存缓存中读取引用，然后在套接字服务器的帮助下响应引用的请求。
QuoteClient是WPF胖客户端应用程序。这个应用程序创建客户端套接字，以便与Quote
Server通信。第3个程序集是实际的服务。Quote Service开始和停止QuoteServer，服务将控
制服务器。
图39-4
在创建程序的服务部分之前，在额外的C#类库（在服务进程中使用这个类库）中建
立一个简单的套接字服务器。具体步骤参见下一节。
39.3.1 创建服务的核心功能
可以在Windows服务中建立任何功能，如扫描文件以进行备份或病毒检查，或者启动
WCF服务器。但所有服务程序都有一些类似的地方。这种程序必须能启动（并返回给调
用者）、停止和暂停。下面讨论用套接字服务器实现的程序。
对于Windows 10, Simple TCP/IP Services可以作为Windows组件的一个组成部分安
装。Simple TCP/IP Services的一部分是“quote of the day”或TCP/IP服务器，这个简单的服
务在端口17处侦听，并使用文件\system32\drivers\etc\quotes中的随机消息响应
每一个请求。使用这个示例服务，我们将在这里构建一个相似的服务器，它返回一个
Unicode字符串，而不是像qotd服务器那样返回ASCII代码。
首先创建一个QuoteServer类库，并实现服务器的代码。下面详细解释QuoteServer.cs
文件中QuoteServer类的源代码（代码文件QuoteServer/QuoteServer.cs）：
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Net.Sockets;
    using System.Text;
    using System.Threading.Tasks;
    namespace Wrox.ProCSharp.WinServices
    {
      public class QuoteServer
      {
        private TcpListener _listener;
        private int _port;
        private string _filename;
        private List _quotes;
        private Random _random;
        private Task _listenerTask;
重载QuoteServer（）构造函数，以便把文件名和端口传递给主调程序。只传递文件
名的构造函数使用服务器的默认端口7890。默认的构造函数把引用的默认文件名定义为
quotes.txt：
      public QuoteServer()
        : this ("quotes.txt")
      {
      }
      public QuoteServer(string filename)
        : this (filename, 7890)
      {
      }
      public QuoteServer(string filename, int port)
      {
        if (filename == null) throw new ArgumentNullException(nameof(filename));
        if (port  IPEndPoint.MaxPort)
          throw new ArgumentException("port not valid", nameof(port));
        _filename = filename;
        _port = port;
      }
ReadQuotes（）是一个辅助方法，它从构造函数指定的文件中读取所有引用，把所有
引用添加到List quotes中。此外，创建Random类的一个实例，Random类用于返回
随机引用：
      protected void ReadQuotes()
      {
        try
        {
          _quotes = File.ReadAllLines(filename).ToList();
          if (_quotes.Count == 0)
          {
            throw new QuoteException("quotes file is empty");
          }
          _random = new Random();
        }
        catch (IOException ex)
        {
          throw new QuoteException("I/O Error", ex);
        }
      }
另一个辅助方法是GetRandomQuoteOfTheDay（），它返回引用集合中的一个随机引
用：
      protected string GetRandomQuoteOfTheDay()
      {
        int index = random.Next(0, _quotes.Count);
        return _quotes[index];
      }
在Start（）方法中，使用辅助函数ReadQuotes（）在List引用中读取包含引用
的完整文件。在启动新的线程之后，它立即调用Listener（）方法。这类似于第25章的
TcpReceive示例。
这里使用了任务，因为Start（）方法不能停下来等待客户，它必须立即返回给调用者
（即SCM）。如果方法没有及时返回给调用者（30秒）, SCM就假定启动失败。侦听任务
是一个长时间运行的后台线程，应用程序就可以在不停止该线程的情况下退出。
      public void Start()
      {
        ReadQuotes();
        _listenerTask = Task.Factory.StartNew(Listener, TaskCreationOptions.LongR
unning);
      }
任务函数Listener（）创建一个TcpListener实例。AcceptSocketAsync方法等待客户端
进行连接。客户端一连接，AcceptSocketAsync方法就返回一个与客户端相关联的套接
字。之后使用ClientSocket.Send（）方法，调用GetRandomQuoteOfTheDay（）方法把返回
的随机引用发送给客户端：
        protected async Task ListenerAsync()
        {
          try
          {
          IPAddress ipAddress = IPAddress.Any;
          _listener = new TcpListener(ipAddress, port);
          _listener.Start();
          while (true)
          {
            using (Socket clientSocket = await _listener.AcceptSocketAsync())
            {
              string message = GetRandomQuoteOfTheDay();
              var encoder = new UnicodeEncoding();
              byte[] buffer = encoder.GetBytes(message);
              clientSocket.Send(buffer, buffer.Length, 0);
            }
          }
          }
          catch (SocketException ex)
          {
          Trace.TraceError($"QuoteServer {ex.Message}");
          throw new QuoteException("socket error", ex);
          }
        }
除了Start（）方法之外，还需要如下方法来控制服务：Stop（）、Suspend（）和
Resume（）。
      public void Stop() => _listener.Stop();
      public void Suspend() => _listener.Stop();
      public void Resume() => Start();
另一个公共方法是RefreshQuotes（）。如果包含引用的文件发生了变化，就要使用这
个方法重新读取文件：
      public void RefreshQuotes() => ReadQuotes();
      }
    }
在服务器上建立服务之前，首先应该建立一个测试程序，这个测试程序仅创建
QuoteServer类的一个实例，并调用Start（）方法。这样，不需要处理与具体服务相关的问
题，就能够测试服务的功能。测试服务器必须手动启动，使用调试器可以很容易调试代
码。
测试程序是一个C#控制台应用程序TestQuoteServer，我们必须引用QuoteServer类的程
序集。在创建QuoteServer的实例之后，就调用QuoteServer实例的Start（）方法。Start（）
方法在创建线程之后立即返回，因此在按回车键之前，控制台应用程序一直处于运行状态
（代码文件TestQuoteServer/Program.cs）。
      static void Main()
      {
        var qs = new QuoteServer("quotes.txt", 4567);
        qs.Start();
        WriteLine("Hit return to exit");
        ReadLine();
        qs.Stop();
      }
注意，QuoteServer示例将运行在使用这个程序的本地主机的4567端口上——后面的
内容需要在客户端中使用这些设置。
39.3.2 QuoteClient示例
客户端是一个简单的WPF 
Windows应用程序，可以在此请求来自服务器的引用。客
户端应用程序使用TcpClient类连接到正在运行的服务器，然后接收返回的消息，并把它显
示在文本框中。用户界面仅包含一个按钮和一个文本框。单击按钮，就向服务器请求引
用，并显示该引用。
给按钮的Click事件指定OnGetQuote（）方法，以向服务器请求引用，并将IsEnable属
性绑定到EnableRequest方法上，在请求激活时禁用按钮。在TextBlack控件中，把Text属性
绑定到Quote属性上，以显示所设置的引用（代码文件
QuoteClientWPF/MainWindow.xaml）：
      Get Quote
类QuoteInformation定义了EnableRequest属性和引用。使用这些属性与数据绑定，在
用户界面中显示这些属性的值。这个类实现了接口INotifyPropertyChanged，以允许WPF接
收属性值的改变（代码文件QuoteClientWPF/QuoteInformation.cs）：
      using System.Collections.Generic;
      using System.ComponentModel;
      using System.Runtime.CompilerServices;
      namespace Wrox.ProCSharp.WinServices
      {
        public class QuoteInformation: INotifyPropertyChanged
        {
          public QuoteInformation()
          {
          EnableRequest = true;
          }
          private string _quote;
          public string Quote
          {
          get { return _quote; }
          internal set { SetProperty(ref _quote, value); }
          }
          private bool _enableRequest;
          public bool EnableRequest
          {
          get { return _enableRequest; }
          internal set { SetProperty(ref _enableRequest, value); }
          }
          private void SetProperty(ref T field, T value,
                                [CallerMemberName] string propertyName = null)
          {
          if (! EqualityComparer.Default.Equals(field, value))
          {
            field = value;
            PropertyChanged? .Invoke(this, new PropertyChangedEventArgs(propertyN
ame));
          }
          }
          public event PropertyChangedEventHandler PropertyChanged;
        }
      }
 注意： 
接口INotifyPropertyChanged的实现代码使用了特性CallerMember-
NameAttribute，这个特性的解释参见第14章。
把类QuoteInformation的一个实例赋予Windows类MainWindow的DataContext，以便直
接进行数据绑定（代码文件QuoteClientWPF/MainWindow.xaml.cs）：
    using System;