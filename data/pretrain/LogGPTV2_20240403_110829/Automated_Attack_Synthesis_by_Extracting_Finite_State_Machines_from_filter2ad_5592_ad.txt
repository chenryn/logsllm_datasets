we ﬁnd that applying rules on top of our models to correct
predictions does not improve their general performance.
In Table II, we show the individual performance for the six
protocols and show that we obtain better performance using
the NEURALCRF model for all protocols.
TABLE II: Results by Protocol for our Best Models
Protocol
BGPv4
DCCP
LTP
PPTP
SCTP
TCP
LINEARCRF
Exact
Strict
52.99
82.56
92.73
69.74
94.44
67.25
96.05
84.21
65.49
52.21
82.64
57.46
NEURALCRF
Exact
Strict
57.34
86.86
93.25
75.60
74.22
94.41
98.73
87.34
65.85
58.54
59.82
81.90
# Control
Statements
6
150
65
25
19
31
4) FSM extraction: We compare both the NLP and the Gold
extracted FSMs with the Canonical FSM in Table III, based
on how many states and transitions are successfully extracted.
Both the NLP and the Gold FSMs are extracted from the
predicted/annotated intermediary representation introduced in
Section III, by using the procedure outlined in Section VI.
The results presented in Tables I and II correspond to how
accurately we can recover this intermediary representation from
the text, before we attempt to construct the FSM.
Note that even with Gold annotations, we are not able
to extract all expected transitions because in some cases,
the transitions are not explicit in the text or in other cases,
our general grammar and extraction procedure are not able
to capture the intended behavior. In all cases, we are able
to recover all relevant states. Graphic visualizations for all
resulting state machines can be found in the Appendix.
We manually analyzed all the partially correct, incorrect
and missed transitions in Table III and found that, for the
Gold FSM, they are caused by ambiguities in the RFC, or the
information about some transition missing completely (67%
for TCP and 96% for DCCP). The remaining errors are due to
difﬁculties capturing complex logical ﬂows using our method.
The difference between the Gold FSMs and the predicted FSMs
can always be attributed to errors in the text predictions.
For example, we notice that one incorrect behavior in
the TCP Gold FSM is caused by ambiguity in the TCP
RFC text. The only outgoing communication transition in
the TCP Gold FSM from SYN_SENT sends ACK and goes to
SYN_RECEIVED. The correct logic is to receive SYN ﬁrst,
before sending the ACK and transitioning. The TCP RFC does
not textually mention the expected SYN. We only know to
expect it because it is illustrated in Figure 6 of the RFC. We
show more examples of FSM extraction errors in the Appendix.
5) Summary: In Tables I and II we evaluated how much of
our intermediary representation we could extract from natural
language, while in Table III we evaluated how much of the
TABLE III: Transitions Extracted (Partially Correct means
source and target state are correct, and at least one of the
events on the edge is also correct).
TCP FSM
Gold
LINEARCRF
LINEARCRF+R
NEURALCRF
NEURALCRF+R
DCCP FSM
Gold
LINEARCRF
LINEARCRF+R
NEURALCRF
NEURALCRF+R
Canonical
Extracted
Correct
20
18
28
30
11
30
8
2
7
2
7
Canonical
Extracted
Correct
34
24
8
17
20
19
15
1
6
9
8
Partially
Correct
Partially
Correct
8
3
10
3
10
1
5
3
1
3
Incorrect
Not Found
2
23
13
6
13
4
15
3
15
3
Incorrect
Not Found
8
2
8
10
8
18
28
25
24
23
canonical FSM we recovered after running the extraction
procedure in Section VI. There is not a one-to-one mapping
between the intermediary representation extracted from the
text and the resulting state machines for four reasons: 1) Not
all Canonical FSM behaviors are clearly and unambiguously
described in the text. 2) Some behaviors are mentioned more
than once, giving us several opportunities to extract an expected
transition. 3) We have annotated for a larger set of behaviors
than needed to extract the communication transitions, we do
this to be able to capture the language used to express FSM
behaviors. 4) The metrics shown in Tables I and II are based
on text span matching, however, we do not need to have a strict
match in a text segment to successfully recover a behavior.
Our results show that learning technical word representations
is useful for the task of extracting FSM information from
protocol speciﬁcations. We demonstrate that we can recover
a signiﬁcant portion of the intermediary representation for
the six evaluated protocols. Moreover, we show that we
can recover partially correct FSMs by using the procedure
outlined in Section VI. This analysis indicates that the grammar
proposed in Section III can capture enough information to
reconstruct a signiﬁcant portion of the FSM, while being
general enough to be applied to various protocols. Ambiguity
and missed information in the RFCs result in transitions being
partially/incorrectly recovered or missed. We show examples
in the Appendix and discuss limitations in Section X.
B. Attacker Synthesis Evaluation
In this section we use KORG [18] to automatically synthesize
attackers against the TCP and DCCP connection establishment
and tear-down routines. Note we cannot extract Canonical
FSMs like the ones manually derived and used by [18]. Our
FSMs are partial, and we had to modify KORG to make it work
with partial FSMs. We also had to modify KORG to support
DCCP. We use our modiﬁed-KORG on all the models including
the Canonical FSM and report these results below.
1) Methodology: We apply the same methodology to TCP
and DCCP. We use the intermediary representations obtained
with the models with best results for transition extraction
(LINEARCRF+R and NEURALCRF+R), and Gold. We then
extract FSMs and transpile them to PROMELA programs. All
FSMs are presented in Appendix D.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:43 UTC from IEEE Xplore.  Restrictions apply. 
1060
We synthesize attackers that invalidate the properties from
Eqn. 3 for TCP and Eqn. 4 for DCCP. Given a property and
a PROMELA program, we can only use KORG if the program
supports the property. We check what properties are supported
by each program and present the results in Table IV.
We ask KORG to synthesize at most 100 attackers which we
refer to as candidate attackers because they might not work
against the protocol’s Canonical PROMELA program. We check
the candidate attackers against the corresponding Canonical
PROMELA program; those that succeed are conﬁrmed attackers.
Unconﬁrmed attackers can be thought of as false positives.
TABLE IV: Properties Supported by Each PROMELA Program
(checkmark/x-mark means property is supported/not supported).
|= φ1




TCP PROMELA program
Canonical
Gold
LINEARCRF+R
NEURALCRF+R
DCCP PROMELA program |= θ1
Canonical
Gold
LINEARCRF+R
NEURALCRF+R




|= φ2




|= θ2




|= φ3




|= θ3




|= φ4




|= θ4




2) Supported Properties: Why do noisier models for TCP
support a property the Gold model does not support? As shown
in Table IV, the TCP Gold PROMELA program does not support
property φ4, while the TCP LINEARCRF+R and NEURAL-
CRF+R PROMELA programs do. This might seem counterintu-
itive, as the Gold PROMELA program is derived from the Gold
intermediary representation, which is theoretically less noisy
than the LINEARCRF+R and NEURALCRF+R intermediary
representations. Recall that φ4 relates to connection tear-down
from the TCP state SYN_RECEIVED. Upon investigation, we
found that the TCP Gold PROMELA program violates φ4
because of a single erroneous transition from SYN_RECEIVED
to CLOSE_WAIT, and a missing SYN? event in the transi-
tion from SYN_SENT to SYN_RECEIVED. While the TCP
LINEARCRF+R and NEURALCRF+R PROMELA programs
contain similar erroneous transitions from SYN_RECEIVED,
they nonetheless satisfy φ4 because their erroneous transitions
are never enabled. Basically, the same erroneous transition
manifests in all three TCP PROMELA programs, but in the
TCP Gold PROMELA program the code is reachable, while
in the TCP LINEARCRF+R and NEURALCRF+R PROMELA
programs it is unreachable.
Why do TCP and DCCP have such different support
for properties intended to capture comparable behavior? In
Table IV, we notice that the TCP Gold, LINEARCRF+R, and
NEURALCRF+R PROMELA programs all violate φ3, meaning
they all have stuck states. For DCCP, all PROMELA programs
support θ1 and θ3, meaning they never self-loop into a stuck
state, or self-loop forever. Notably, either case would constitute
a stuck state. It seems strange that the TCP PROMELA programs
would be so susceptible to stuck states, while the DCCP
PROMELA programs are apparently invulnerable to a closely
related problem. Further investigation revealed that in contrast
to TCP, DCCP does not support active/active establishment.
Hence in order for a DCCP PROMELA program to support
connection establishment, it requires both an active and a
(matching) passive establishment routine. The DCCP Gold,
LINEARCRF+R, and NEURALCRF+R PROMELA programs
all capture the active establishment routine but not the passive
one. Therefore, in all three PROMELA programs, none of the
states containing self-loops are reachable, and so θ1 and θ3
are vacuously supported.
3) Examples of Attacks: Table V presents the candidate
attackers generated for all programs and properties and false
positives. We present some examples of conﬁrmed attack-
ers. Each example A is named following the convention
protocol.M.α.N, where protocol is TCP or DCCP, and A
was the N th PROMELA program output by KORG when given
the protocol PROMELA program M and property α.
• TCP.NEURALCRF+R.φ1.32 injects a single ACK to Peer
2, causing a desynchronization between the peers which
can eventually cause a half-open connection, violating φ1.
• DCCP.LINEARCRF+R.θ4.32 injects and drops messages
to and from each peer to ﬁrst (unnecessarily) start and
abort numerous connection routines, then guide both peers
at once into CLOSE_REQ, violating θ4.
• DCCP.NEURALCRF+R.θ2.96 is programmatically differ-
ent from DCCP.LINEARCRF+R.θ4.32, but violates θ4
using basically the same approach.
TABLE V: Candidate and Unconﬁrmed Attacks Synthesized
using each PROMELA Program P and Correctness Property ϕ.
If P does not support ϕ, KORG cannot generate any attackers.
Candidates
Guided by ϕ.
Unconﬁrmed
Candidates
Guided by ϕ.
9
0
0
0
0
0
0
TCP PROMELA program φ1 φ2 φ3 φ4 φ1 φ2 φ3 φ4
0
Canonical
0
Gold
LINEARCRF+R
0
NEURALCRF+R
0
DCCP PROMELA program θ1 θ2 θ3 θ4 θ1 θ2 θ3 θ4
0
Canonical
0
0
Gold
0
13 0
LINEARCRF+R
NEURALCRF+R
9
0
36 17 0
0
0
0
0
0
0
1
12 0
0
1
1
13 1
2
2
9
1
0