# 【知识库】DDCTF 2018 Writeup (三) 安卓篇

##### 译文声明
本文为翻译文章，具体表达和含义以原文为准。

## 一、奈沙夜影与DDCTF
本篇文章由DDCTF 2018比赛第一名的队伍“奈沙夜影”提供。对于此次比赛的安卓部分，夜影评价道：只要仔细调试并找到关键部分，大多数安卓题目都能轻松解决。不过，ECC那题除外，加密算法取值不同确实增加了难度。

想查看其他方向的Writeup，请点击以下链接：
- [【知识库】DDCTF 2018 writeup(一) WEB篇](http://mp.weixin.qq.com/s?__biz=MzA3Mzk1MDk1NA==&mid=2651904642&idx=1&sn=4944d9d400c7c3e3d69c2301c8cb9a62&chksm=84e34907b394c01123e08ad8f1dc9e9e85414e82714fffe516774be56359522fe19763f81b99&scene=21#wechat_redirect)
- [【知识库】DDCTF 2018 writeup(二) 逆向篇](http://mp.weixin.qq.com/s?__biz=MzA3Mzk1MDk1NA==&mid=2651904716&idx=1&sn=1f40a692dabd069f3200f719c89cec1c&chksm=84e34949b394c05f3834899872004e9f7daebdbf78719c8348ce517080409b084ede64bf1550&scene=21#wechat_redirect)

## 二、安卓 Writeup

### 0x01 RSA
Java层没有太多内容，直接将输入传递给Native层的`stringFromJNI`函数。该函数包含大量无用代码，建议通过动态调试来观察计算过程。

在主函数中，首先使用`gpower`生成了32字节的`i²Table`，并两次调用了`GetTicks`获取时间戳，但这些都没有实际作用。

`sub_3133C`调用了`input`函数，从其中使用的字符串“basic_string::_S_construct null not valid”来看，这应该是静态编译的`basic_string`类的构造函数。结构体中存储了字符串长度和其他信息，并将其指针作为第一个参数传递。

`sub_309E0`未修改字符串，只是将字符串指针返回。接下来分析名为`prj`的核心函数：

```cpp
if (*(_DWORD *)(v2 - 12) == 31)
```

虽然通常可以猜测出31是输入长度，但可以通过动态调试更直观地看到这个数据。接着，逐字节异或`byte_4DECB`数组，这是常见的操作。

关键的检查条件是`v10[10] != *v10`。要满足此条件，`v10`必须从0到30满足`a[i] == a[i+10]`的关系，即一个10字节的字符串循环3.1次。然后将`d[10]`置为0，保留一遍该字符串，并通过`atoll`将其转换为整数。

接下来的操作涉及两个字符串的处理。通过STL的`map`对象构建一个字典，遍历字符串`a`，将每个值作为键，下标整除2作为值。然后遍历字符串`b`，将每个值的对应值连接起来，最后通过`atoll`转换为大整数。目标是使两个整数相除的结果为1，因此需要`big_n`整除`input_n`。

继续向下分析，最终得到`v27 = 1`，`v25 = 0 / HIDWORD(input_n)`。取较小的1499419583，重复3.1次后异或数组即可得到flag：

```python
a = [73, 90, 75, 10, 67, 92, 65, 80, 65, 75, 85, 93, 67, 13, 70, 64, 65, 1, 92, 6, 1, 89, 91, 14, 90, 82, 65, 93, 8, 94, 6]
r = "1499419583" * 4
for i in range(31):
    print(chr(ord(r[i]) ^ a[i]), end='')
```

### 0x02 Hello Baby Dex
使用JEB反编译发现许多第三方库，其中包括美团开发的开源热更新框架`com.meituan.robust`。参照使用教程，补丁的位置在`PatchExecutor`类调用的`PatchManipulateImp`类中的`fetchPatchList`方法中的`setLocalPath`方法处设置。

`cn.chaitin.geektan.crackme.PatchManipulateImp.fetchPatchList`方法读取了`GeekTan.BMP`的数据。`setLocalPath`同样将`GeekTan`设置为文件路径。从`assets`文件夹中提取该文件，解压得到DEX文件。

处理DEX文件可以使用JEB或dex2jar + jd-gui。补丁中的`PatchInfoImp`表明补丁的类分别是`MainActivity`和`MainAcitivity$1`：

```java
localArrayList.add(new PatchedClassInfo("cn.chaitin.geektan.crackme.MainActivity", "cn.chaitin.geektan.crackme.MainActivityPatchControl"));
localArrayList.add(new PatchedClassInfo("cn.chaitin.geektan.crackme.MainActivity$1", "cn.chaitin.geektan.crackme.MainActivity$1PatchControl"));
```

`PatchControl`类用于控制补丁，可以忽略。两个补丁类中包含关键的更新方法。`MainActivity$1`中的`onClick`方法使用了大量反射方法，逻辑是构造一个字符串，将“DDCTF{”、Joseph(3, 4)、Joseph(5, 6)、“}”四个字符串连接起来，最后通过`equals`与输入比较。

由于flag明文出现在内存中，可以采用多种方法获取，如Hook、Patchsmali代码打log、动态调试等。动态调试是最简单的方法，启动虚拟机并设置断点即可看到结果。

### 0x03 Differ-Hellman
与第一题类似，Java层没有任何内容，直接调用`StringFromJNI`。这次没有太多无用代码，开头是一个与第一题相同的`basic_string`构造，通过`str2ll`转换为整数。

IDA反编译对这种有两个返回值的情况不太友好，直接查看汇编代码会更清晰。低32位R0放在R4中，高32位R1放在R5中。`>>31`实际上是取高1-33位的意思。循环在`i == n`时退出。

`v11`的实际寄存器是r2，即`divmod`的余数。`v14 = v11 << 1`，不断对`v14`乘以2，每次模p，余数再赋给`v14`。循环`input`次后将余数与`mod_residual`比较，相等则通过。

根据同余定理，可以直接导出：

```cpp
2^input % 0xB49487B06AA40 == 0x1d026744b3680
```

爆破`input`，得到208603。