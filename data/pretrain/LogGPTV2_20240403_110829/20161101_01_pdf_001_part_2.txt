keyword
 http://www.postgresql.org/docs/9.1/static/sql-keywords-appendix.html
 http://www.postgresql.org/docs/9.1/static/sql-commands.html
identifier
 define NAMEDATALEN 64 (长度限制, 截断到63)
 truncate_identifier(char *ident, int len, bool warn)
 {
 if (len >= NAMEDATALEN)
 {
 len = pg_mbcliplen(ident, len, NAMEDATALEN - 1);
 if (warn)
 {
超过长度将截断
 char buf[NAMEDATALEN];
到限制量-1, 同时
 memcpy(buf, ident, len); 报错.
 buf[len] = '\0';
 ereport(NOTICE,
 (errcode(ERRCODE_NAME_TOO_LONG),
 errmsg("identifier \"%s\" will be truncated to \"%s\"",
 ident, buf)));
 }
 ident[len] = '\0';
 }
 }
identifier
 改变最大长度限制,需重新initdb
 src/include/pg_config_manual.h
 /*
 * Maximum length for identifiers (e.g. table names, column names,
 * function names). Names actually are limited to one less byte than this,
 * because the length must include a trailing zero byte.
 *
 * Changing this requires an initdb.
 */
 #define NAMEDATALEN 64
literal or constant
 implicitly-typed literal or constant  explicit-typed literal or constant
 string  type 'string'
E'digoal\\' time '12:00:00'
 $$digoal\$$  'string'::type
$tag$digoal\$tag$ '1 hour'::interval
 bit string  CAST ( 'string' AS type )
B'1010101' CAST('127.0.0.1' AS inet);
 number
10 or +10
-23.4
+100.1 or 100.1
10e-1
98e+10 or 98e10
operator
 + - * /  = ~ ! @ # % ^ & | ` ? ||
 postgres=# select count(*) from pg_operator;
 count
 -------
 706
 SELECT 3 OPERATOR(pg_catalog.+) 4;
special character
 $  :
 string quoted  slice from array
 positional parameter in function  *
or prepared statement
 all the fields of a table or
 () composite value
 enforce precedence  .
 []  numeric , separate schema, table,
column names.
 array selected elements
 ,
 separate the elements of a list
 ;
 terminate a SQL
SQL Syntax-Value
Expressions
 constant  postgres=# PREPARE pre_1(text)
AS SELECT id FROM digoal_t1
 前面已经讲到
WHERE lower(info) ~ lower($1);
 column reference
 postgres=# EXECUTE pre_1('post');
 [schema_name.]table.column_name
 id
 alias.column_name
 ----
 positional parameter
 2
 $number, 比如用在function中或者
prepared sql中  postgres=# DEALLOCATE pre_1;
 例如:
 postgres=# CREATE TABLE
digoal_t1(id int,info text);
 postgres=# INSERT INTO digoal_t1
VALUES
(1,'DIGOAL'),(2,'PostgreSQL'),(3,'Pg
foundry'),(4,'pgxn');
SQL Syntax-Value
Expressions
 subscript  );
 例如:  CREATE TABLE on_hand (
 SELECT a[2:3][1:2] FROM (SELECT  item inventory_item,
ARRAY[[1,2,3],[4,5,6],[7,8,9],[10,11,
 count integer
12]] AS a) t;
 );
 a
 INSERT INTO on_hand VALUES
 --------------- (ROW('fuzzy dice', 42, 1.99), 1000);
 {{4,5},{7,8}}  postgres=# SELECT (item).name
 field selection FROM on_hand WHERE
(item).price > .99;
 从行类型或composite类型中指定
field  name
 例如:  ------------
 CREATE TYPE inventory_item AS (  fuzzy dice
 name text,
 supplier_id integer,
 price numeric
SQL Syntax-Value
Expressions
 operator invocation  aggregate_name (DISTINCT
expression [ , ... ]
 OPERATOR(schema.operatorname)
[ order_by_clause ] )
 例如:
 aggregate_name ( * )
 postgres=# SELECT 3
OPERATOR(pg_catalog.+) 4;  例如, 把多行聚集成一个数组的聚集
函数
 ?column?
 postgres=# SELECT array_agg(id
 ----------
ORDER BY id desc) FROM (SELECT
 7
generate_series(1,10) AS id) AS t;
 function call
 ------------------------
 postgres=# SELECT now();
 {10,9,8,7,6,5,4,3,2,1}
 2012-04-24 08:52:53.787523+08
 postgres=# SELECT array_agg(id
 aggregate expression
ORDER BY id) FROM (SELECT
 aggregate_name (expression [ , ... ] generate_series(1,10) AS id) AS t;
[ order_by_clause ] )
 ------------------------
 aggregate_name (ALL expression
 {1,2,3,4,5,6,7,8,9,10}
[ , ... ] [ order_by_clause ] )
SQL Syntax-Value
Expressions
 window function call  (11,'张学友','数学',89.5),
 例如  (12,'张学友','语文',91.5),
 CREATE TABLE window_test(id int,  (13,'张学友','英语',92.5),
name text, subject text, score
 (14,'张学友','物理',93.5),
numeric);
 (15,'张学友','化学',94.5);
 INSERT INTO window_test
VALUES(1,'digoal','数学',99.5),
 -- 取出每门课程的第一名.
 (2,'digoal','语文',89.5),
 SELECT id,name,subject,score
 (3,'digoal','英语',79.5),
FROM
 (4,'digoal','物理',99.5),
 (SELECT row_number() OVER
 (5,'digoal','化学',98.5), (PARTITION BY subject ORDER BY
 (6,'刘德华','数学',89.5), score DESC) AS rn,* FROM
window_test) AS t
 (7,'刘德华','语文',99.5),
 (8,'刘德华','英语',79.5),  WHERE rn=1 ORDER BY SUBJECT;
 (9,'刘德华','物理',89.5),
 (10,'刘德华','化学',69.5),
SQL Syntax-Value
Expressions
 id | name | subject | score  SELECT * FROM tbl WHERE a
COLLATE "C" > 'foo';
 ----+--------+---------+-------
 5 | digoal | 化学 | 98.5  scalar subquery
 1 | digoal | 数学 | 99.5  SELECT name, (SELECT max(pop)
FROM cities WHERE cities.state =
 4 | digoal | 物理 | 99.5
states.name)
 13 | 张学友 | 英语 | 92.5
 FROM states;
 7 | 刘德华 | 语文 | 99.5
 array constructor
 type cast
 ARRAY[]
 前面有例子
 row constructor
 collation expression
 ROW()
 SELECT a, b, c FROM tbl WHERE ...
ORDER BY a COLLATE "C";
 SELECT * FROM tbl WHERE a >
'foo' COLLATE "C";
SQL Syntax-Function Call
 创建
 CREATE OR REPLACE FUNCTION f_test(i_left numeric, i_right numeric) RETURNS
numeric AS $$
 DECLARE
 BEGIN
 RETURN i_left * i_right;
 END;
 $$ LANGUAGE plpgsql;
 调用函数的几种方法
 Positional Notation
 SELECT f_test(10, 2.5);
 Named Notation
 SELECT f_test(i_left := 10, i_right := 2.5);
 Mixed Notation
 SELECT f_test(10, i_right := 2.5);
Data Definition
Table and Default Value
 CREATE TABLE test (id serial PRIMARY KEY,name text,info text,crt_time timestamp(0)
default now());
 INSERT INTO test (name,info) VALUES ('digoal','DBA');
 SELECT * FROM test;
 id | name | info | crt_time
 ----+--------+------+---------------------
 1 | digoal | DBA | 2012-04-24 09:52:19
 Table "public.test"
 Column | Type | Modifiers
 ----------+--------------------------------+---------------------------------------------------
 id | integer | not null default nextval('test_id_seq'::regclass)
 name | text |
 info | text |
 crt_time | timestamp(0) without time zone | default now()
 Indexes:
 "test_pkey" PRIMARY KEY, btree (id)
Constraint
 check
 CREATE TABLE products (  foreign key
 product_no integer,  CREATE TABLE a(c1 text,c2
text,UNIQUE (c1,c2));
 name text,
 price numeric,  CREATE TABLE b(c1 text,c2
text,FOREIGN KEY(c1,c2)
 CHECK (price > 0),
REFERENCES a(c1,c2));
 discounted_price numeric,
 CHECK (discounted_price > 0),
 CREATE TABLE a(c1 text
 CHECK (price > discounted_price)
UNIQUE,c2 text UNIQUE);
 );
 CREATE TABLE b(c1 text,c2
 not null / unique / primary key / foreign key
text,FOREIGN KEY(c1,c2)
 CREATE TABLE a(c1 text,c2 REFERENCES a(c1,c2));
text,PRIMARY KEY (c1,c2));
 ERROR: there is no unique
 CREATE TABLE a(c1 text NOT constraint matching given keys for
NULL,c2 text NOT NULL,UNIQUE
referenced table "a"
(c1,c2)); foreign key (columns) reference table(columns), 唯一约束或pk必须与
foreign key的表一致.复合对复合, 单个对单个. 不能混用.
Constraint
 foreign key
 FOREIGN KEY ( column_name [, ... ] ) REFERENCES reftable [ ( refcolumn
[, ... ] ) ]
 [ MATCH FULL | MATCH PARTIAL | MATCH SIMPLE ] [ ON DELETE action ]
[ ON UPDATE action ] }
 [ DEFERRABLE | NOT DEFERRABLE ] [ INITIALLY DEFERRED | INITIALLY
IMMEDIATE ]
 MATCH FULL will not allow one column of a multicolumn foreign key to be null
unless all foreign key columns are null. MATCH SIMPLE allows some foreign key
columns to be null while other parts of the foreign key are not null.
 NO ACTION (default, deferrable enabled)
 RESTRICT (like NO ACTION , deferrable disabled)
 CASCADE
 SET NULL
 SET DEFAULT