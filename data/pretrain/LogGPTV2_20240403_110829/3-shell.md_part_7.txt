# 2. 案例2：字符串初值的处理
通过 `${var:-word}` 判断变量是否存在，并决定其初始值。
- **只取值**：`${var:-word}`
  - 若变量 `var` 已存在且非空，则返回 `$var` 的值；否则返回字串 "word"，原变量 `var` 的值不受影响。

示例：
```bash
[root@server0 4day]# a=123456
[root@server0 4day]# echo ${a:-123456}  # 输出123456
123456

[root@server0 4day]# a=123  # 定义了a=123
[root@server0 4day]# echo ${a:-123456}  # 输出a为123
123

[root@server0 4day]# a=  # 定义a为空值
[root@server0 4day]# echo ${a:-123456}  # 输出a为初值123456
123456
```

应用示例：
```bash
#!/bin/bash
read -p "请输入用户名: " n
useradd $n
read -p "请输入$n 的密码: " p
echo ${p:-123456} | passwd --stdin $n
# 如未输入密码, 将把123456设置为用户密码
```

## 字符串操作
- **截取**：`${a:}`
- **替换**：
  - 只替换第一个子串：`${a/old/new}`
  - 替换全部子串：`${a//old/new}`
- **掐头**：`${a#}`
- **去尾**：`${a%}`
- **定义初值**：`${a:-}`

例如，从键盘读入一个正整数 `x`，求从1到 `x` 的和；当用户未输入值（直接回车）时，为了避免执行出错，应为 `x` 赋初值1。

# 3. 案例3：expect预期交互
`expect` 可以为交互式过程（如 FTP、SSH 等登录过程）自动输送预先准备的文本或指令，而无需人工干预。触发的依据是预期会出现的特征提示文本。

### 步骤一：准备 expect 及 SSH 测试环境
1. 安装 `expect` 工具

示例脚本：
```bash
[root@svr5 ~]# vim expect_ssh.sh
#!/bin/bash
expect << EOF
spawn ssh user@remote_host
expect "password:" { send "redhat\r" }
expect "#" { send "touch /tmp111.txt\r" }
expect "#" { send "exit\r" }
EOF
```
注意事项：
- `expect` 脚本的最后一行默认不执行。
- 不希望 SSH 时出现 yes/no 提示，可使用选项 `ssh -o StrictHostKeyChecking=no server0`。

## 数组
```bash
[root@server0 4day]# w=(11 22)
[root@server0 4day]# echo ${w[0]}  # 显示第一个元素
11
[root@server0 4day]# echo ${w[1]}
22
[root@server0 4day]# echo ${w[@]}  # 显示所有元素
11 22
[root@server0 4day]# w[2]=33  # 增加第三个元素
[root@server0 4day]# w[3]=33  # 增加第四个元素
[root@server0 4day]# echo ${w[@]}
11 22 33 33
[root@server0 4day]# echo ${w[@]:1:2}  # 截取数组元素，1为起始下标，2为元素个数
22 33
```

# 4. 案例4：使用正则表达式
**正则表达式** 使用“一串符号”来描述有共同属性的数据。

### 基本正则列表
- `^$` 组合表示空行

### 扩展正则列表
- `grep` 只能使用基本正则，如要使用扩展正则需要加 `-E` 选项。
- `egrep` 可以使用基本正则和扩展正则。

示例：
```bash
[root@server0 4day]# grep -E "^root|^daemon" /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:2:2:daemon:/sbin:/sbin/nologin

[root@server0 4day]# egrep "^root|^daemon" /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:2:2:daemon:/sbin:/sbin/nologin
```

### 静默模式
- `grep -q` 表示静默模式，效果与 `&> /dev/null` 类似。
- 示例：
  ```bash
  [root@ver0 4day]# grep -q "^127.0.0.1" /etc/hosts && echo "YES" || echo "NO"
  YES
  ```

### 其他选项
- `-m10` 仅在文件的前10行中过滤。
- `-c` 输出匹配行数。

### 基本元字符
- `^` 和 `$` 匹配行首和行尾。
- `.` 匹配任意单个字符。
- `*` 匹配前一个字符的任意次数，不允许单独使用。
- `+`、`?`、`*` 表示目标出现的次数。
- `{}` 限定出现的次数范围。
- `[]` 匹配范围内的单个字符。
- `\b` 单词边界匹配。

### 多个条件的组合
- 示例：
  ```bash
  [root@server0 4day]# egrep -i "d|h" xya  # 查找含有d与h的行，且不区分大小写
  dedef abab ghighi
  cdcd ababab
  Hello abababab World >xya
  aaabbbcccdddeee
  ```

# sed 文本处理工具
`sed` 是流式编辑器，用于非交互式地基于模式匹配过滤及修改文本。

### 用法
1. **前置命令**：`command | sed [选项] '条件指令'`
2. **直接处理文件**：`sed [选项] '条件指令' 文件...`

### 条件指令
- 条件指令包含 `[地址符]处理动作`。
- 地址符可以是行号或 `/正则/`。
- 没有条件时，默认为所有条件。
- 指令可以是增、删、改、查等。

### 常用选项
- `-n` 屏蔽默认输出。
- `-r` 支持扩展正则。
- `-i` 直接修改源文件。

### 指令
- **p** 打印
  - 示例：
    ```bash
    [root@client50 ~]# sed -n '1p' 1.txt
    bb
    ```
- **d** 删除
  - 示例：
    ```bash
    [root@client50 ~]# sed '1d' 1.txt  # 删除第一行
    ```
- **s** 替换
  - 示例：
    ```bash
    [root@client50 ~]# sed 's/the/xyz/' /opt/4day/xyz  # 替换每行第一个the为xyz
    ```
- **i** 在指定行之前插入文本
- **a** 在指定行之后追加文本
- **c** 替换指定行

以上是对文本内容的优化，使其更加清晰、连贯和专业。