- 不需要完全精确的值，可以参考使用近似值来代替，比如可以使用explain来获取近似的值
- 增加汇总表，或者增加外部[缓存](/软件工程/架构/系统设计/缓存.md)系统来缓存计数
- 使用二级索引扫描的数据量比使用聚簇索引扫描的数据量少，因为二级索引的叶子结点存储的是主键
count(主键 id)：遍历整张表，把每一行的 id 值都取出来拿到 id 后，判断是不可能为空的，就按行累加
count(1)：遍历整张表，但不取值，对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加
count(字段)：对于有可能是 null的，还要把值取出来再判断一下，不是 null 才累加
count(*)：是例外，专门做了优化，不取值。这个count返回的每一行肯定不是 null，按行累加
按照效率排序的话，`count(字段) 1000 LIMIT 5
```
- 对于大量分页，使用下一页来替代掉具体页码的分页，通过每次查询出比数量多一条的数据，来判断有没有下一页
#### 优化union查询
除非确实需要服务器消除重复的行，否则一定要使用union all
#### 使用用户自定义变量
```sql
SET @last_week := CURRENT_DATE-INTERVAL 1 WEEK;
SELECT @last_week;
```
使用限制：无法使用查询缓存、变量的生存域在连接中
## [使用索引](/中间件/数据库/索引.md)
索引的原理：
![屏幕截图 2020-08-27 093235](/assets/屏幕截图%202020-08-27%20093235.png)
MySQL 使用索引的方式：
- WHERE ORDER BY GROUP PY子句
- 对于使用MIN MAX函数的查询直接使用索引就可完成
- 对于某些查询 只使用索引的数据就可返回 无需回表查询
索引的代价：
- 降低了大部分写操作的速度
- 占用磁盘空间
挑选索引：
- 用于搜索 排序 分组的列
- 列的基数(列的值不重复的个数)越高 索引效果越好
- 索引尽量选择较小的数据类型
  - IO 操作更快
  - 降低存储空间需求 可以在缓存中缓存更多数据 加快速度
- 字符串索引指定前缀长度
  - 大多数字符串前n个字符就足以是唯一的 当成索引
- 最左索引
  - 对于(a,b,c)这种类型的复合索引 利用其排列顺序进行操作 能有效利用索引
- 不要过多的索引
- 保持参与比较的索引类型匹配
  - 散列 B+树
## 查询优化程序
```sql
EXPLAIN SELECT * FROM person WHERE FALSE
```
有助于优化程序对索引充分利用：
- 分析表 `ANALYZE TABLE`
  - 生成键值分析
  - 当 MySQL 由于统计信息错误选择了错误的执行计划，也可以用这个命令
- 使用 EXPLAIN 验证哪些索引会被使用到
- 必要时给予 EXPLAIN提示
  - 表名后面加上`FORE INDEX, USE INDEX, IGNORE INDEX`
  - `STRAIGHT_JOIN`要求按特定顺序使用表
- 比较的列数据类型相同
- 索引列不要参与运算
- LIKE 语句开始位置不要使用通配符
- 将子查询转换为连接
- 尝试查收的各种替代形式
- 避免过多类型的自动转换
## 数据类型高效查询
- 多用数字运算 少用字符串运算
  - ENUM SET
- 优先使用较小数据类型
  - 加快操作速度
  - 节省存储空间
- 数据列声明NOT NULL
  - 避免 MySQL 运行时检查 NULL
- 考虑使用ENUM
- 输出MySQL对数据类型的建议
  - `SELECT * FROM tb PROCEDURE ANALYSE()`
- 整理表碎片
  - `OPTIMIZE TABLE tb`
  - 某些存储引擎不支持 使用mysqldump导出再导入来整理
- 使用BLOB TEXT存储非结构化数据
  - 注意删除更新时留下的碎片
  - 避免过大
  - 抽离到一张独立的表
- 合成索引
  - 计算一个散列值存放到一个列
## 表存储格式高效查询
MyISAM:
- 默认使用固定长度的行
  - 当某个列长度可变时 则行也会变成可变
  - 固定长度的行比变长行处理速度比较快
MEMORY:
- 使用都是固定长度的行
InnoDB：
- 默认情况是COMPACT行格式
- 对于包含重复数据表 使用 COMPRESSED航格式 占用空间较少
- 带有TEXT 或 BLOB 使用 DYNAMIC
```sql
CREATE TABLE tb (...) ROW_FORMAT = xxx;
```
## 高效加载数据
- LOAD DATA 比 INSERT 效率更高
- 数据加载时磁盘IO操作越少 效率越高
## 调度 锁定 并发
调度策略：
- 写入优先级比读取优先级高
- 写入操作一次只能执行一个 写入操作时公平的
- 可以同时处理多个对同一个表的读取
InnoDB: 行级锁 更精细 并发度更高 
MyISAM: 表级锁 不会出现死锁问题