a device ID consisting of bits of the key in the device’s kernel
data that is used to calculate the IP ID.
Additional scenarios (KASLR bypass and internal IP dis-
closure) for Linux/Android attacks are described in the ex-
tended paper.
3 Related Work
Many tracking techniques were suggested in prior research.
At large, proposals can be categorized by their passive/active
nature. We use the terminology deﬁned in [31]:
• A ﬁngerprinting technique measures properties already
existing in the browser or operating system, collecting a
combination of data that ideally uniquely identiﬁes the
browser/device without altering its state.
• A tagging technique, in contrast, stores data in the
browser/device, which uniquely identiﬁes it. Further
access to the browser can “read” the data and identify
the device.
355b98553789b646ed97ad801a619ff898471b92)
5“inet:
update
the
standards”
higher
linux/kernel/git/stable/linux.git/commit/?id=
55f0fc7a02de8f12757f4937143d8d5091b2e40b)
ID
IP
algorithm to
(https://git.kernel.org/pub/scm/
generation
6“inet: switch IP ID generator to siphash” (https://git.kernel.
org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/
?id=df453700e8d81b1bdafdf684365ee2b9431fb702)
USENIX Association
28th USENIX Security Symposium    1065
As described in Section 1, ﬁngerprinting techniques typically
cannot guarantee the uniqueness of the device ID, in partic-
ular with respect to corporate machines cloned from “golden
images”. Tagging techniques store data on the device, and
as such they are more easily monitored and evaded. A com-
prehensive discussion of tracking methods can be found in
Google Chromium’s web page “Technical analysis of client
identiﬁcation mechanisms” [12].
IP ID Research
3.1
Device tracking via IP ID: Using IP ID is proposed in [5]
(2002) to detect multiple devices behind a NAT, assuming an
IP ID implementation using a global counter. But nowadays
none of the modern operating systems implements IP ID as
a global counter. A similar concept is presented by [25] for
a single destination IP (the DNS resolver) which theoreti-
cally works for devices that have per-IP counter (Windows,
to some extent). However, this technique does not scale be-
yond a few dozen devices, due to IP ID collisions (the IP ID
ﬁeld provides at most 216 values), and requires ongoing ac-
cess to the trafﬁc arriving at the DNS resolver.
Predictable IP ID: The predictability of IP ID may theo-
retically be used in some conditions to track devices.
[6]
describes a technique to predict the IP ID of a target, but re-
quires the adversary to have a fully controlled device along-
side it behind the same NAT. Also this technique only han-
dles sequential increments (e.g. not time-based). As such,
it is inapplicable to the more general scenarios handled in
this paper. This technique is then used in [9] to poison DNS
records.
OS Fingerprinting: [32] suggests using IPID = 0 as a ﬁn-
gerprint for some operating systems.
Measuring trafﬁc: [29] samples IP ID values from servers
whose IP ID is a global counter, to estimate their outbound
trafﬁc.
IP ID Algorithm Categorization: [28] provides practical
classiﬁcation of IP ID generation algorithms and measure-
ments in the wild.
Fragmentation attacks: While not directly related to the
properties of the IP ID ﬁeld, it should be noted that attack
techniques abusing fragmentation are known. RFC 1858
[26] lists several such attacks, e.g.
the “tiny frgament” at-
tack and the “overlapping fragement” attack.
Windows IP ID research: In parallel to our research, Ran
Menscher published on Twitter his research on Windows IP
ID [23]. That research reverse-engineered part of the Win-
dows IP ID generation algorithm (without revealing how the
index to the counter array is calculated). The analysis of this
algorithm is based on two assumptions: (1) that the tech-
nique is applied shortly after restart, when the relevant mem-
ory buffer contains zeroes in a large part of its cells; and
(2) that the attacker controls or monitors trafﬁc to pairs of IP
addresses which differ in single, speciﬁc bit position (includ-
ing positions in the left half of the address). Based on these
extreme assumptions, the attacker can extract the key eas-
ily, and use it to expose kernel 31-bit data quantities (though
without learning where in the array this data resides).
The uninitialized memory issue exploited by this attack
was ﬁxed in Microsoft’s October 2018 Security Update [24],
which invalidated assumption (1), rendering Menscher’s at-
tack completely ineffective. Our attack and our demo, on the
other hand, still work against systems that were patched with
this update. Our work has multiple contributions over Men-
scher’s attack: (1) We provide the full details of the IP ID al-
gorithm. (2) Our analysis does not rely on the array data, and
is thus still in effect after applying the October 2018 Security
Update which initializes the array with random data. (3) Our
analysis does not require the extreme requirements on the re-
lations between the addresses of the controlled/monitored IP
addresses. (4) Our kernel data exposure provides positions
of the data, not just data quantities (though our kernel expo-
sure technique, too, was eliminated with the October 2018
Security Update). (5) It should also be noted that unlike our
attack, Menscher’s technique could not be used for tracking,
since as the cell arrays become non-zero when they are in-
cremented, the attack becomes ineffective.
3.2 PRNG seed/key extraction
Our approach involves breaking the random number gen-
erator algorithm used by operating systems to generate the
IP ID value and obtain the seed/key used by the algorithm.
Similar strategies were used to different ends. For example,
[17] broke the PRNG of the Witty worm to obtain the seed,
from which they learned the infection time of the Internet
nodes. [14] broke the Javascript Math.Random() PRNG of
several browsers, obtained the seed and used it as a browser
instance tracking ID. [15] broke the Math.Random() PRNG
of Adobe Flash, obtained the seed and used it to extract the
machine clock speed.
4 Tracking Windows 8 (and Later) Devices
In this section we ﬁrst present the algorithm that is used for
generating the IP ID in Windows 8 (and later) devices. The
input to this algorithm includes a key which is generated at
system restart. We then describe how a remote server can
identify 45 bits of this key. This data enables to remotely
and uniquely identify machines.
4.1
IP ID Generation
IP ID prior to Windows 8
In versions of Microsoft Win-
dows up to and including Windows 7, the IP ID was gener-
ated sequentially and globally. That is, for each outgoing IP
packet, a global counter would be incremented by 1 and the
1066    28th USENIX Security Symposium
USENIX Association
result (truncated to 16 bits) would be used [25]. These older
Windows versions are out of scope for this paper.
The source code of the algorithm that is used for gener-
ating IP ID values in Windows is not public. However, we
recovered the exact algorithm using reverse engineering, and
veriﬁed its correctness by comparing its output to IP ID val-
ues generated by live Windows systems.
Technical details The algorithm was obtained by reverse-
engineering parts of the tcpip.sys driver of 64-bit Win-
dows 10 RedStone 4 (April 2018 Update, Build 1803). Ap-
parently this algorithm is in use starting with Windows 8 and
Windows Server 2012. Notice that the code is not speciﬁc
to IPv4, and can be used with IPv6, which is why the key K
is deﬁned as 320 bits - more than required to support IPv4.7
For IPv4 pre RedStone 5, only 106 key bits are used.
Toeplitz hash The IP ID generation is based on the
Toeplitz hash function deﬁned in [10]. Let us ﬁrst deﬁne
the Toeplitz hash, T (K,I), which is a bilinear transformation
from a binary vector K in GF(2)320, and an input which is a
binary string I (where |I|≤ 289) to the output space GF(2)32.
For a binary vector V , denote by Vi the i-th bit in the vector,
with bit numbering starting from 0. The i-th bit of T (K,I)
(0 ≤ i ≤ 31) is deﬁned as the inner product between I and a
substring of K starting in location i. Namely
|I|−1(cid:77)
T (K,I)i =
Ij · Ki+ j
(1)
j=0
IP ID generation The IP ID generation algorithm itself
uses keys K (tcpip!TcpToeplitzHashKey) which is a 320
bit vector, and K1 and K2 which are 32 bits each. All these
keys are generated once during Windows kernel initialization
(using SystemPrng and BCryptGenRandom).
In addition to these constant keys, the algorithm uses a
dynamic array of M counters, denoted β [0], . . . ,β [M − 1],
where M is a power of 2, and is speciﬁcally set to M = 8192.
Algorithm 1 describes how Windows 8 (and later) gener-
ates an IP ID for a packet delivered from IPSRC to IPDST ,
while updating a counter in β .
The algorithm uses the keys, and the source and destina-
tion IP addresses, to pick a random index i for a counter in β ,
and an offset. The algorithm outputs the sum of the counter
β [i] and the offset, and increments the counter.
Notation We use the notation Num(a0,a1, . . . ,a31) for the
number represented in binary by the bits ai, namely the num-
i=0 ai · 231−i. (Network byte order is used throughout
ber ∑31
the paper for representing IP addresses as bit vectors, e.g.
127.0.0.1 is 01111111.00000000.00000000.00000001.)
Properties of the Toeplitz hash Our attack uses the fol-
lowing properties of T , which follow from the linearity of
this transformation:
T (K,I||(0,0, . . . ,0)) = T (K,I)
(2)
7 Our tracking technique can be probably adapted to IPv6, but since IPv6
is out of scope for this paper, we did not test this.
Therefore the trailing zeros in the input of T in the compu-
tation of v on line 3 of Algorithm 1, have no effect on the
output. Also,
T (K,I1||I2) = T (K,I1)⊕ T (K,0|I1|||I2)
(3)
Therefore it is possible to decompose the second input of T
to two parts, and rephrase the computation as the XOR of
two separate expressions.
4.2 Reconstructing the Key K
To reconstruct the key, the device needs to be measured. The
measurements only take a few seconds, and are thus assumed
to take place from the same network. I.e., the device’s source
IP address, IPSRC, is ﬁxed (though possibly unknown). A
ﬁrst set of measurements directs the client device to J IP ad-
dresses from the same class B network. A second set of mea-
surements directs the client device to G pairs of IP addresses,
each pair in the same class B network, with G different class
B network pairs in the set.
Once the device is measured, the attack proceeds in two
phases. The ﬁrst phase of the attack recovers 30 bits of the
key using the ﬁrst set of measurements. The second phase
of the attack reveals additional 15 bits of the key using the
second set of measurements. Overall, the measurements re-
veal 45 bits of the key, which sufﬁces to uniquely identify
machines from a large population, with high probability.
Section 4.5 describes how to optimally choose the param-
eters J and G given limits on the number of IP addresses that
are available (L) and the processing time that is allowed (T ).
For L = 30 IP addresses (typical low budget limit), and attack
run time limit of T = 1 seconds on a single Azure B1s ma-
chine (α = 0.001 from Section 5.2), the optimal parameter
values are J = 6,G = 12.
4.3 Extracting Bits of K - Phase 1
Denote by IPg, j, IPIDg, j and β [ig]g, j the values of the des-
tination IP address, the IP ID and β [i] (prior to increment)
respectively, with respect to the j-th packet in the g-th class
B network that is used in the attack ( j and g are counted
0-based). The ﬁrst phase of the attack uses only a single
class B network, and therefore g is set to 0 in this phase.
We thus use the following shorthand notation: IP j = IP0, j,
IPID j = IPID0, j and βg = β [ig]g,0.
A major observation is that only the ﬁrst half of IPDST is
used to calculate i in Algorithm 1. Therefore packets that are
sent to different IP addresses in the same class B network,
have an identical index i into the counter table, and use the
same counter β [i]. Denote the value of i for the g-th class B
network as ig.
If these packets are sent in rapid succession (i.e. when no
other packet is sent in-between with i = ig), then β [ig]g, j =
βg + j mod 232, and therefore the output in line 5 of the
USENIX Association
28th USENIX Security Symposium    1067
Algorithm 1 Windows 8 (and later) IP ID Generation
1: procedure GENERATE-IPID
2:
i ← Num(K2⊕ T (K, (IPDST )
v ← β [i] + Num(K1⊕ T (K,IPDST||IPSRC||032)) mod 232
β [i] ← (β [i] + 1) mod 232
return v mod 215
2 −1
|IPDST |
3:
4:
5:
0,...,
)⊕ T (K,IPSRC)) mod M
(cid:46) v mod 216 for Windows 10 RedStone 5
16. Due to obvious linear dependencies, only J − 1 sets of
such equations are useful (e.g. all pairs with j(cid:48) = 0), with a
total of 15(J − 1) linear equations for bits K33, . . . ,K62. That
is, for j = 1, . . . ,J − 1 and i = 17, . . . ,31, the equations are:
31(cid:77)
(IP j ⊕ IP0)m · Ki+m =
m=16
(Vec(IPID j − (β0 + j) mod 215) ⊕
Vec(IPID0 − (β0) mod 215))i
(4)
Speeding up the computation using preprocessing The
coefﬁcients of K in eq. (4) are controlled by the server and
are known at setup time. Therefore it is possible to prepro-
cess the computation of Gaussian elimination. Namely, com-
pute a matrix Z that, when multiplied by the observed values,
reveals bits of the key. This preprocessing is only important
for efﬁciency, therefore we defer the details to the extended
paper.
Attack summary
1. The tracker needs to control J IP addresses in the same
class B network.
2. During setup time, the tracker calculates, using Gaus-
sian elimination, a matrix Z ∈ GF(2)15(J−1)×15(J−1),
based on the values of these IP addresses.
3. In real time, the tracker gets IP ID values from the de-
vice, from packets sent to the J destination IP addresses
under the tracker’s control.