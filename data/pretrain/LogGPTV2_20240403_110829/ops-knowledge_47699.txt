User: I wanna do some task scheduling using python multiprocessing module. I have two pools p1 and p2. One with high priority and one with low priority. A task is first put into the high priority pool. If after a certain amount of time, say 10s, the task still not finishes, i will migrate it to the lower priority pool. The question is can i migrate the task from one pool to another without wasting the work that is already done in the first pool? Basically, i wanna pause a running subprocess in one pool and add it to another pool and then resume it. If the second pool is busy, the task will wait until a free slot is available.
Assistant: Once a task is begun by a process in one pool, you can't pause it and add it to another pool.  What you could do, however, is have the handler in the first process return a tuple instead of just the value it's computing. The first thing in the tuple could be a boolean representing whether or not the task has finished, and the second thing could be the answer, or partial answer if it's not complete.  Then, you could write some additional logic to take any returned values that are marked unfinished, and pass them to the second process, along with the data that's already been computed and returned from the first process.
Unfortunately, this will require you to come up with a way to store partial work, which could be very easy or very hard depending on what you're doing.