# Loophole: Timing Attacks on Shared Event Loops in Chrome

**Authors:**  
Pepe Vila, IMDEA Software Institute & Technical University of Madrid (UPM)  
Boris Köpf, IMDEA Software Institute  

**Publication:**  
Proceedings of the 26th USENIX Security Symposium, August 16–18, 2017, Vancouver, BC, Canada  
ISBN 978-1-931971-40-9  
Open access sponsored by USENIX  
[Link to the paper](https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/vila)

## Abstract

Event-driven programming (EDP) is a widely adopted paradigm for graphical user interfaces, web clients, and increasingly for server-side and network programming. Central to EDP are event loops, which function as FIFO queues for storing and dispatching messages from other processes.

This paper demonstrates that shared event loops are vulnerable to side-channel attacks. Specifically, a malicious process can monitor the loop usage pattern of other processes by enqueueing events and measuring the time it takes for them to be dispatched. We present attacks against the two main event loops in Google's Chrome web browser: the I/O thread of the host process, which handles all network events and user actions, and the main thread of the renderer processes, which manages rendering and JavaScript tasks.

For each event loop, we show how the usage pattern can be monitored with high resolution and low overhead, and how this can be exploited for malicious purposes, such as web page identification, user behavior detection, and covert communication.

## 1. Introduction

Event-driven programming (EDP) involves defining responses to events such as user actions, I/O signals, or messages from other programs. EDP is prevalent in graphical user interfaces, web clients, and is gaining importance in server-side and network programming. The HTML5 standard mandates that user agents be implemented using EDP, and frameworks like Node.js, memcached, and Nginx also rely on EDP.

In EDP, each program has an event loop consisting of a FIFO queue and a control process (or thread) that listens to events. Events are pushed into the queue and sequentially dispatched according to a FIFO policy. High-latency operations, such as database or network requests, can be handled asynchronously, appearing in the queue only as start and completion events.

Figure 1 illustrates a scenario where an attacker (A) enqueues multiple short tasks and records the time at which each is processed. The time difference between consecutive tasks reveals whether a victim (V) has posted tasks and how long they took to execute.

In this paper, we show that EDP-based systems are susceptible to side-channel attacks. The key observation is that event loops can be shared between mutually distrusting programs. Contention for this resource by one program can be observed by others through variations in the time the control process takes to dispatch their events.

Attacks based on observable contention of shared resources have a long history, but attacks against shared event loops have only been considered theoretically. Here, we perform the first attacks against real EDP-based systems, specifically targeting shared event loops in the two central processes of Google's Chrome web browser: the host process, whose event loop is shared between all requests for common resources, and the renderer processes, whose loops can be shared between JavaScript tasks of different tabs or iframes.

We build infrastructure to spy on both loops from a malicious HTML page, facilitated by the asynchronous programming model used in both Chrome and JavaScript. Asynchronous function calls trigger new tasks that are appended to the same queue, unlike synchronous calls which block the loop.

- **Renderer Event Loop:** We use the `postMessage` API, a JavaScript feature for cross-window communication, to monitor the event loop with a resolution of 25 µs.
- **Host Process Event Loop:** We use network requests to non-routable IP addresses and `SharedWorkers` to monitor the event loop with resolutions of 500 µs and 100 µs, respectively.

We use these techniques in three different attacks:

1. **Web Page Identification:** Event delays during the loading phase can be used to uniquely identify a web page. We achieve recognition rates of up to 75% and 23% for the event loops of the renderer and host processes, respectively, using only one sample of each page for training.
2. **User Action Detection:** User actions in cross-origin pages can be detected based on the delays they introduce in the event loop. We mount an attack against Google OAuth login forms, measuring the time between keystrokes while the user types a password.
3. **Covert Communication:** Shared event loops can be used to transmit information between cross-origin pages. We implement a covert channel with a bandwidth of 200 bit/s through the renderer’s main thread event loop and another one working cross-processes of 5 bit/s.

Our attacks show that event loops can be successfully spied on even with simple means. They work under the assumption that event loops behave as FIFO queues, but Chrome’s event loop has a more sophisticated structure, relying on multiple queues and a policy-based scheduler. This structure could be leveraged for more powerful attacks in the future.

## 2. Isolation Policies and Sharing of Event Loops in Chrome

### 2.1 Same-Origin Policy

The Same-Origin Policy (SOP) restricts scripts on a web page from accessing data from another page if their origins differ. Two pages have the same origin if protocol, port, and host are equal.

The demand for flexible cross-origin communication has led to features such as domain relaxation, `postMessage` API, Cross-origin Resource Sharing (CORS), Channel Messaging, Suborigins, and the Fetch API. This feature creep increases browser complexity and attack surface, motivating browser vendors to move towards more robust multi-process architectures.

### 2.2 Overview of the Chrome Architecture

Chrome is segmented into different operating system processes to isolate web content from the host and enforce origin policies. Chrome relies on two main processes:

- **Host Process:** Runs the top-level browser window and manages system resources such as network, file system, and UI events. It runs several threads, including:
  - `CrBrowserMain` thread: Handles user interaction events.
  - `IOThread`: Handles IPC, network stack, and file system.

- **Renderer Processes:** Sandboxed processes responsible for parsing, rendering, and JavaScript execution. Communication with the host process is done via message passing. Each renderer runs several threads, including:
  - `MainThread`: Handles resource parsing, style calculation, layout, painting, and non-worker JavaScript.
  - `IOChildThread`: Handles IPC communication with the host process.
  - `CompositorThread`: Improves responsiveness during rendering by allowing scrolling and animations while the main thread is busy.

Each thread maintains at least one event loop, largely a FIFO queue. Inter-thread and inter-process communication are carried out via message passing through these queues.

### 2.3 Sharing in the Renderer Processes

Chrome supports different policies that govern how web applications are mapped to renderer processes, influencing whether event loops are shared. The default policy, `process-per-site-instance`, requires a dedicated renderer process for each instance of a site. However, there are situations where documents from different sites are hosted in the same renderer process, causing them to share the event loop:

- **Iframes:** Hosted in the same process as their parent.
- **Renderer-Initiated Navigations:** Reuse the same renderer as the origin page.
- **Renderer Threshold:** When the number of renderer processes exceeds a certain threshold, Chrome reuses existing renderers instead of creating new ones.

On (64-bit) OSX and Linux, the threshold for reusing renderers is calculated by splitting half of the physical RAM among the renderers, assuming each consumes 60MB. In our experiments, on a machine with 4 GB of RAM, we could spawn 31 new tabs before any renderer was shared, whereas on a machine with 8 GB of RAM, the threshold was approximately 70 renderers.

## 3. Eavesdropping on Event Loops

In this section, we describe how to violate the SOP by eavesdropping on event loops.