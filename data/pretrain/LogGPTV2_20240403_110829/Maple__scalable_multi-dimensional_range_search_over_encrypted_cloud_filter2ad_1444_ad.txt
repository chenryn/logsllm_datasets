Our original system model shown in Figure 1 includes
only 3 single entities. In this section we consider a simple
extension to our work, where a data owner has a document
collection and there is a group of data users that wants
to query encrypted data at the cloud provider. We pro-
pose a new multi-user substring position search symmetric
encryption (MSSP-SSE) scheme that solves the problem of
managing access privileges and searching a substring over
encrypted cloud data. First, we present the deﬁnitions of a
multi-user substring position search symmetric encryption
scheme. Later we give an efﬁcient construction that com-
bines ideas of a single-user SSP-SSE scheme with a broadcast
encryption scheme (see Deﬁnition 4).
A. Algorithm Deﬁnitions
Deﬁnition 15: (Multi-User Substring Position Search-
able Symmetric Encryption (MSSP-SSE). A tree-based
MSSP-SSE scheme over a set of documents D is tuple
of eight polynomial-time algorithms (KeyGen, BuildT ree,
Encrypt, AddUser, RemoveUser, ConstructQuery,
Search, Decrypt), as follows:
1) (K1, K2, K3, mk) ← KeyGen(1k): a probabilistic key
generation algorithm to setup the SSP-SSE scheme. The
algorithm takes a secret parameter k and outputs a set
of secret keys K1, K2, K3 and mk.
2) (Λ) ← BuildT ree(D): a deterministic algorithm to
build a position heap tree Λ. The algorithm takes a
document collection D = {D1, . . . , Dn} and constructs
a position heap tree Λ.
3) ( ¯Λ, C, stS, stO) ← Encrypt(K1, K2, K3, Λ, D, G): a
probabilistic algorithm to encrypt a position heap tree
and document corpus. The algorithm inputs a set of
secret keys K1, K2, K3, a position heap tree Λ, a
documents corpus D and a set of authorized users G
⊆ (cid:2). The output of algorithm is an encrypted position
heap tree ¯Λ, an encrypted collection C = {C1, . . . , Cn},
a set of states stS, stO.
172
4) (ukU) ← AddUser(mk, U): is a probabilistic algo-
rithm run by the data owner to add a data user. It takes
an input of a key mk and a user identiﬁer U, and it
outputs a secret key ukU used by a data user.
5) (stS, stO) ← RemoveUser(mk, U): is a probabilistic
algorithm run by the owner to remove a data user U
from group G. The algorithm takes as input a key mk
and a data user identiﬁer U. It outputs a set of updated
states stS and stO.
6) (Q) ← ConstructQuery(K3, χ, ukU, stS): a proba-
bilistic algorithm to generate a search query. The al-
gorithm inputs a set of secret keys ukU, K3, a state stS
and a substring χ, and it outputs a search query Q.
7) (L) ← Search( ¯Λ, Q, stS, ukU): a deterministic algo-
rithm to search over an encrypted position heap tree
¯Λ to ﬁnd matching documents. The algorithm takes as
input a state stS, a secret ukU, a search query Q and an
encrypted position heap tree ¯Λ. It outputs a sequence
of identiﬁers L ∈ C.
) ← Decrypt(K1, K2, Ci): a deterministic
algorithm that takes a set of secret keys K1, K2 and
a ciphertext Ci as input, and it outputs an original
document Di, ∀i ∈ [1; n], and a set of χ’s positions
posDi in Di.
8) (Di, posDi
The security model of multi-user substring position
search symmetric encryption scheme can be deﬁned sim-
ilarly to a single-user substring position search symmetric
encryption scheme (SSP-SSE): given an encrypted position
heap tree ¯Λ, a set of encrypted documents C = {C1, . . . ,
Cn} and a set of incoming search queries Q = {Q1, . . . , Qt}
to the adversary, no valuable information is leaked from a
tuple of eight polynomial-time algorithms to the adversary
beyond what can be inferred from the access, search and
path patterns.
KeyGen(1k) :
1) generate (K1, K2, K3) ← SSP-SSE.KeyGen(1k).
2) generate mk ← BE.Gen(1k).
Output the key set K = (K1, K2, K3) and mk.
BuildT ree(D) :
Given a document collection D = {D1, . . . , Dn}, output
Λ ← SSP-SSE.BuildT ree(D).
Encrypt(K1, K2, K3, Λ, D, G) :
1) set ( ¯Λ, C) ← SSP-SSE.Encrypt(K1, K2, K3, Λ, D).
2) set stS ← BE.Enc(mk, G, r), where r
R←− {0, 1}k
and group G include the cloud provider.
3) set stO = r.
Output ( ¯Λ, C), stS and stO.
AddUser(mk, U) :
1) calculate ukU ← BE.Add(mk, U).
Output ukU.
RemoveUser(k, mk, U) :
R←− {0, 1}k.
1) sample r
2) calculate new stS ← BE.Enc(mk, G\U, r) and stO
= r.
Output stS and stO.
ConstructQuery(K3, χ, ukU, stS) :
1) get stS from the cloud provider.
2) if BE.Dec(ukU, stS) = ⊥, output ⊥, else calculate
(cid:4) ← SSP-SSE.ConstructQuery(K3, χ))
r ← BE.Dec(ukU, stS).
and Q ← ρr(Q
3) calculate Q
(cid:4)).
Output Q.
Search( ¯Λ, Q, stS, ukU) :
1) compute r ← BE.Dec(ukU, stS).
2) calculate Q
3) get L ← SSP-SSE.Search( ¯Λ, Q
Output L.
Decrypt(K1, K2, Ci) :
Output (Di, posDi
(cid:4) ← ρ
−1
r (Q).
) ← SSP-SSE.Decrypt(K1, K2, Ci).
(cid:4)), where L ∈ C.
B. MSSP-SSE Construction
Fig. 7. MSSP-SSE Construction.
Figure 7 shows the details of our multi-user scheme
MSSP −SSE = (KeyGen, BuildT ree, Encrypt, AddUser,
RemoveUser, ConstructQuery, Search, Decrypt).
Let SSP − SSE = (KeyGen, BuildT ree, Encrypt,
ConstructQuery, Search, Decrypt) be a single-user
substring
encryption
(SSP-SSE) scheme. Let BE = (Ge, Enc, Add, Dec) be a
PCPA-secure broadcast encryption scheme. Let U denote
the set of all users and let G ∈ U denote the set of users
authorized to search. Let ρ be a pseudorandom permutation
such that ρ : {0, 1}k × {0, 1}t → {0, 1}t 2, where t is the
size of search query Q in SSP-SSE scheme.
searchable
symmetric
position
The MSSP-SSE construction works as follows. First, the
data owner samples the secret parameter k and generates
the set of encryption keys K1, K2, K3. Also, the data owner
samples the secret key r for the pseudorandom permutation
ρ and the master key mk for the broadcast encryption BE.
Next, the data owner encrypts the document corpus with
PCPA-secure symmetric encryption scheme SKE and outputs
2ρ can be constructed as pseudorandom permutation over domains of
arbitrary size [27].
the encrypted position heap tree ¯Λ. It then generates a
cloud provider state stS, which is the output of a broadcast
encryption BE that takes an input of secret key r, master key
mk and the set of identities G. The data owner stores the
encrypted position heap tree Λ, the encrypted document
corpus C and the cloud provider state stS on the cloud
provider. In order to allow the user U to search the remote
collection, the data owner generates a user key ukU using
broadcast encryption scheme with master key mk and user’s
identity U.
In order to search for a substring χ, the authorized user
ﬁrst contacts the cloud provider to receive the latest state stS
and uses its user key ukU to output the secret key r. It then
and encrypts it with
constructs a single-user search query Q
(cid:4))
pseudorandom permutation ρ with r, and outsources ρr(Q
to the cloud provider. The cloud provider recovers the search
(cid:4))). Here, the key r is only
query Q
known by the data owner and the set of authorized users
that includes the cloud provider.
by computing ρ
−1
r (ρr(Q
(cid:4)
(cid:4)
If user U is no longer the authorized user in the system,
173
(cid:4)
, generates new cloud
the data owner samples a new key r
(cid:4)
(cid:4)
S is sent to the cloud
S. The new state st
provider state st
provider to replace the old stS. Newly generated search
(cid:4)
−1,
queries utilize r
thus no unauthorized users are able to output a valid search
queries to the cloud provider.
in pseudorandom permutation ρ and ρ
MSSP-SSE utilizes the security and performance of a
single-user SSP-SSE scheme. Our construction is very efﬁ-
cient since the cloud provider needs only to execute a pseu-
dorandom permutation to evaluate the access privileges,
thus eliminating the need of more expensive authentication
protocols.
VII. CONCLUSION
In this work, we present a new substring position
searchable symmetric encryption scheme (SSP-SSE) that
allows efﬁcient substring search on encrypted documents
outsourced to the cloud. Speciﬁcally, our solution efﬁciently
ﬁnds occurrences and positions of a substring over encrypted
cloud data. We formally deﬁne the leakage functions and
security notions of SSP-SSE. We show that our scheme is
secure against chosen-keyword attacks executed by adaptive
adversary. We also present a multi-user SSP-SSE scheme,
which extends the original solution to support multiple
parties. As future work, we plan to focus on enhancing query
privacy in SSP-SSE, while keeping all the good properties in
the current design. Also, we plan to expand SSP-SSE scheme
to support dynamic updates on the document collection that
will allow query execution when the document corpus is
modiﬁed.
REFERENCES
[1] D. X. Song, D. Wagner, and A. Perrig, “Practical techniques for
searches on encrypted data,” in Proceedings of the 2000 IEEE Sym-
posium on Security and Privacy, Berkeley, CA, USA, May 2000.
[2] E.-J. Goh, “Secure indexes,” Cryptology ePrint Archive, Report
2003/216, 2003, http://eprint.iacr.org/2003/216/.
[3] T. Moataz and A. Shikfa, “Boolean symmetric searchable encryption,”
in Proceedings of the 8th ACM SIGSAC Symposium on Information,
Computer and Communications Security, Hangzhou, China, May
2013.
[4] C. Orencik, M. Kantarcioglu, and E. Savas, “A practical and secure
multi-keyword search method over encrypted cloud data,” in Pro-
ceedings of the 6th IEE International Conference on Cloud Computing,
Santa Clara, CA, USA, June 2013.
[5] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky, “Searchable
symmetric encryption: Improved deﬁnitions and efﬁcient construc-
tions,” in Proceedings of the 13th ACM Conference on Computer and
Communications Security, Alexandria, VA, October 2006.
[6] D. Boneh and B. Waters, “Conjunctive, subset, and range queries on
encrypted data,” in Proceedings of the 4th IACR Theory of Cryptogra-
phy Conference, Amsterdam, The Netherlands, February 2007.
[7] D. Boneh, G. D. Crescenzo, R. Ostrovsky, and G. Persiano, “Public key
encryption with keyword search,” in Proceedings of the EUROCRYPT
2004, 2004.
J. Lai, X. Zhou, R. H. Deng, Y. Li, and K. Chen, “Expressive search on
encrypted data,” in Proceedings of the 8th ACM SIGSAC Symposium
on Information, Computer and Communications Security, New York,
NY, USA, 2013.
[8]
174
[9] N. Cao, C. Wang, M. Li, K. Ren, and W. Lou, “Privacy-preserving
multi-keyword ranked search over encrypted cloud data,” in Pro-
ceedings of the 30th IEEE International Conference on Computer
Communications, Shanghai, China, April 2011.
[10] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M.-C. Rosu, and
M. Steiner, “Highly-scalable searchable symmetric encryption with
support for boolean queries,” in Proceedings of the CRYPTO 2013,
2013.
[11] S. Kamara, C. Papamanthou, and T. Roeder, “Dynamic searchable
symmetric encryption,” in Proceedings of the 2012 ACM Conference on
Computer and Communications Security, New York, NY, USA, 2012.
[12] Y.-C. Chang and M. Mitzenmacher, “Privacy preserving keyword
searches on remote encrypted data,” in Proceedings of the 3rd Inter-
national Conference on Applied Cryptography and Network Security,
New York, NY, USA, June 2005.
[13] E. Shi, J. Bethencourt, T.-H. H. Chan, D. Song, and A. Perrig, “Multi-
dimensional range query over encrypted data,” in Proceedings of the
2007 IEEE Symposium on Security and Privacy, Washington, DC, USA,
2007.
[14] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu, “Order-preserving
encryption for numeric data,” in Proceedings of the ACM SIGMOD
International Conference on Management of Data, Paris, France, June
2004.
[15] M. Blanton, “Achieving full security in privacy-preserving data min-
ing,” in Proceedings of the 3rd IEEE International Conference on
Privacy, Security, Risk and Trust, Boston, MA, USA, October 2011.
J. Li, Q. Wang, C. Wang, N. Cao, K. Ren, and W. Lou, “Fuzzy keyword
search over encrypted data in cloud computing,” in Proceedings of
the 29th Conference on Information Communications, Piscataway, NJ,
USA, 2010.
[16]
[17] C. Wang, K. Ren, S. Yu, and K. Urs, “Achieving usable and privacy-
assured similarity search over outsourced cloud data,” in Proceedings
of the 31th Conference on Information Communications, March 2012.
[18] A. Boldyreva and N. Chenette, “Efﬁcient fuzzy search on encrypted
data,” IACR Cryptology ePrint Archive, vol. 2014, p. 235, 2014.
[19] M. Strizhov and I. Ray, “Multi-keyword similarity search over en-
crypted cloud data,” in Proceedings of the ICT Systems Security and
Privacy Protection, 2014.
[20] A. Ehrenfeucht, R. M. McConnell, N. Osheim, and S.-W. Woo,
“Position heaps: A simple and dynamic text indexing data structure,”
J. Discrete Algorithms, vol. 9, no. 1, pp. 100–121, 2011.
[21] B. H. Bloom, “Space/time trade-offs in hash coding with allowable
errors,” Commun. ACM, vol. 13, no. 7, pp. 422–426, Jul. 1970.
[22] C. Wang, N. Cao, J. Li, K. Ren, and W. Lou, “Secure ranked keyword
search over encrypted cloud data,” in Proceedings of the 2010 IEEE
30th International Conference on Distributed Computing Systems,
Washington, DC, USA, 2010.
[23] T. Moataz, B. Justus, I. Ray, N. Cuppens-Boulahia, F. Cuppens, and
I. Ray, “Privacy-preserving multiple keyword search on outsourced
data in the clouds,” in Proceedings of the Data and Applications
Security and Privacy XXVIII, 2014.
[24] G. D. Crescenzo and V. Saraswat, “Public key encryption with
searchable keywords based on jacobi symbols,” in Proceedings of the
8th International Conference on Cryptology in India, December 2007.
[25] P. Golle, J. Staddon, and B. Waters, “Secure conjunctive keyword
search over encrypted data,” in Proceedings of the Applied Cryptogra-
phy and Network Security 2004, 2004.
[26] Y. H. Hwang and P. J. Lee, “Public key encryption with conjunc-
tive keyword search and its extension to a multi-user system,” in
Proceedings of the First International Conference on Pairing-Based
Cryptography, 2007.
[27] B. Morris, P. Rogaway, and T. Stegers, “How to encipher messages
on a small domain,” in Proceedings of the CRYPTO 2009, 2009.
[28] C. Wang, K. Ren, S. Yu, and K. M. R. Urs, “Achieving usable and
privacy-assured similarity search over outsourced cloud data,” in
Proceedings of the 31st Annual IEEE International Conference on
Computer Communications, Orlando, FL, USA, March 2012.