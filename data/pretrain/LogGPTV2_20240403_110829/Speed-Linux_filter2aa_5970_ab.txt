	ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory 		# 将所有图像复制到外部硬盘驱动器
	```
- tee
	```bash
	# tee 命令用于存储和查看（同时）任何其他命令的输出,默认下输出将覆盖原文件
	# e.g.
	ls | tee file 				# 将输出既写入屏幕（stdout），又写入文件
	ls | tee file1 file2 file3	# 输出写入多个文件
	ls | tee -a file			# 追加而不是覆盖
	crontab -l | tee crontab-backup.txt | sed 's/old/new/' | crontab -	# 对 crontab 条目进行备份，并将 crontab 条目作为 sed 命令的输入，由 sed 命令进行替换。替换后，它将被添加为一个新的cron作业。
	```
- paste
	```bash
	# paste 可以将两个不同的文件合并到一个多列文件中。
	paste aaa.txt bbb.txt
	```
- fold
	```bash
	# 限制输出的长度
	cat /etc/passwd | fold -w 16
	```
---
### 会话
**清屏**
```bash
clear		# 刷新屏幕，本质上只是让终端显示页向后翻了一页，如果向上滚动屏幕还可以看到之前的操作信息
reset		# 完全刷新终端屏幕
printf "\033c"
```
**查看用户信息**
```bash
id
who			# 显示目前登录系统的用户信息.
w			# 显示已经登录系统的用户列表,并显示用户正在执行的指令.
last		# 显示用户最近登录信息
```
**快捷键**
```bash
Ctrl+S		# 终止显示的信号/指令
Ctrl+Q		# 恢复显示的信号/指令
Ctrl+R		# 搜索历史命令
Ctrl+P		# 切换上一个命令
alt+F1-F6	# 切换虚拟控制台
Alt+F7		# 图形界面
Ctrl+L		# 清除命令
```
**screen**
screen 是一个会话管理软件，用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。
```bash
# RedHat 系安装
	yum -y install screen
# Debian 系安装
	apt-get -y install screen
screen -S 
screen -ls
screen -r 	# 重新连接
ctrl+d				# 终止会话
```
#### 历史记录
**history 记录的行数**
```bash
echo $HISTSIZE
```
**修改默认记录的行数**
```
vim /etc/profile
HISTSIZE=1000
```
**查看历史记录**
```bash
history
cat ~/.bash_history
cat ~/.nano_history
cat ~/.atftp_history
cat ~/.mysql_history
cat ~/.php_history
```
**清除历史记录**
```bash
history -c
```
**centos 下更改历史记录文件名**
```bash
vim ~/.bash_profile
HISTFILE=/root/.his
```
**Ubuntu 下配置不记录 history 方法**
```bash
vim ~/.bashrc
# 可选配置如下：
HISTCONTROL=ignoredups		# 忽略连续重复的命令。
HISTCONTROL=ignorespace		# 忽略以空白字符开头的命令。
HISTCONTROL=ignoreboth		# 同时忽略以上两种。
HISTCONTROL=erasedups		# 忽略所有历史命令中的重复命令。
```
**查看是否配置历史命令信息**
```bash
cat /etc/profile
cat ~/.bash_profile
cat ~/.bashrc
```
---
### 文件和目录
**目录**
```bash
cd	# 切换工作目录
~	# 表示 home 目录
.	# 表示当前目录
..	# 表示上级目录
-	# 表示上一次目录
/	# 表示根目录
	root	# 超级用户目录,存放 root 用户相关文件
	home	# 存放普通用户相关文件
	bin		# (binaries)存放二进制可执行文件
	sbin	# (super user binaries)存放二进制可执行文件,只有 root 才能访问
	mnt		# (mount)系统管理员安装临时文件系统的安装点
	etc		# (etcetera)存放系统配置文件
	var		# (variable)用于存放运行时需要改变数据的文件
	boot	# 存放用于系统引导时使用的各种文件
	usr		# (unix shared resources)用于存放共享的系统资源
	dev		# (devices)用于存放设备文件
	lib		# (library)存放跟文件系统中的程序运行所需要的共享库及内核模块
	tmp		# (temporary)用于存放各种临时文件
```
更多内容参考笔记 [文件](./笔记/文件.md#目录结构)
#### 查看
**目录、文件信息**
```bash
ls			# 查看目录下文件
	ls -a						# 查看目录隐藏文件
	ls -lah						# 查看的内容更新详细
	ls -l | grep "^-" | wc -l	# 查看文件目录下的文件数
	ls -lR| grep "^-" | wc -l	# 统计当前目录下文件的个数
	ls -lR | grep "^d" | wc -l	# 统计当前目录下文件夹的个数
	ls -lR | wc -l	# 查看 / 文件+文件夹个数
pwd			# 以绝对路径的方式显示用户当前工作目录
	pwd -P						# 目录链接时,显示实际路径而非 link 路径
wc			# wc 将计算指定文件的行数、字数，以及字节数
du			# 查看文件大小
stat		# 查看文件属性
file		# 探测给定文件的类型
	file xxx.log
```
**文件内容**
```bash
cat			# 连接文件并打印到标准输出设备上
	cat -n						# 带行号读
	cat -b						# 带行号,越过空白行
more		# 一个基于 vi 编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容
	more +10 a.txt				# 从第10行读起
	more -10 f1.txt				# 每次显示10行读取文件
head		# 用于显示文件的开头的内容,默认情况下显示文件的头10行内容
	head -n 1 a.txt				# 读文件第一行
	head -5 /etc/passwd			# 读取文件前5行
tail		# 用于显示文件的尾部的内容,默认情况下显示文件的尾部10行内容
	tail -10 /etc/passwd		# 读取文件后10行
sed			# 一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用
	sed -n '5,10p' /etc/passwd	# 读取文件第5-10行
	sed '/^$/d' test.txt		# 删除文件空行
tac			# 是 cat 的反向操作，从最后一行开始打印
less		# 允许用户向前或向后浏览文件
nl			# 用来在 linux 系统中打印文件中行号
	nl /etc/passwd
	nl -b a /etc/passwd		# 空行也加上行号
```
**二进制相关**
```bash
objdump		# 显示目标文件的信息,可以通过参数控制要显示的内容
	objdump -p 					# 显示文件头内容
	objdump -T					# 查看动态符号表的内容
od			# 以字符或者十六进制的形式显示二进制文件
	od -c test.txt
	od -b test.txt
strings		# 在对象文件或二进制文件中查找可打印的字符串
	strings start.bin | grep -a "pass"
	strings .* | grep -a "root"
	strings -o start.bin 		# 获取所有 ASCII 字符偏移
ldd			# 可以显示程序或者共享库所需的共享库
	ldd /bin/cat
nm			# 显示目标文件的符号
	# -A：每个符号前显示文件名；
	# -D：显示动态符号；
	# -g：仅显示外部符号；
	# -r：反序显示符号表。
```
#### 创建
- touch
	```bash
	# 创建文件
	touch -r test1.txt test2.txt 		# 更新 test2.txt 时间戳与 test1.txt 时间戳相同
	touch -c -t 202510191820 a.txt 		# 更改时间
	```
- truncate
	```bash
	# 创建指定大小文件
	truncate -s 100k aaa.txt
- mkdir
	```bash
	# 创建文件夹
	mkdir -p /test						# 若 test 目录原本不存在，则建立一个
	mkdir -p /mnt/aaa/aaa/aaa 			# 创建指定路径一系列文件夹
	mkdir -m 777 /test					# 创建时指定权限
	```
#### 删除
- rm
	```bash
	# 删除文件和目录的命令
	rm [options] 
	# 选项释义
	-r		# 递归，对目录及其下的内容进行递归操作
	-f		# 强制删除,无需确认操作
	-i		# 确认
	-v		# 详细显示进行的步骤
	```
	rm 命令有一对专门针对根目录的选项 `--preserve-root` 和 `--no-preserve-root`
	- `--preserve-root`：保护根目录，这是默认行为。
	- `--no-preserve-root`：不保护根目录。
	这对选项是后来添加到 rm 命令的。可能几乎每个系统管理员都犯过操作错误，而这其中删除过根目录的比比皆是
	那为什么还会专门出现 --no-preserve-root 选项呢？这可能主要是出于 UNIX 哲学的考虑，给予你想要的一切权力，犯傻是你的事情，而不是操作系统的事情。万一，你真的想删除根目录下的所有文件呢？
- rmdir
	```bash
	# 删除空目录
	rmdir
	```
**删除巨大文件的技巧**
```bash
echo "" >  bigfile
rm bigfile
> access.log			# 通过重定向到 Null 来清空文件内容
: > access.log
true > access.log
cat /dev/null > access.log
```
#### 搜索
**搜索命令**
```bash
which 		# 指令搜索,查找并显示给定命令的绝对路径
where 		# 指令搜索,查找并显示给定命令的绝对路径
whereis 	# 指令搜索,查找并显示给定命令的绝对路径
```
**搜索文件**
- find
	```bash
	# 用于基于多种条件在UNIX文件系统中查找文件的常用命令
	# e.g.
	find / -name conf*	# 查找根目录及子目录下所有 conf 文件
	find / -name site-packages -d	# 查找 site-packages 目录
	find . -mtime -2				# 查找最近两天在当前目录下修改过的所有文件
	find / -type f -size + 100M		# 列出系统中大于100MB的所有文件
	```
- locate
	```bash
	# 查找文件或目录
	locate 
	```
- fd
	```bash
	# 文件查找工具
	wget https://github.com/sharkdp/fd/releases/download/v7.3.0/fd-musl_7.3.0_amd64.deb
	dpkg -i fd-musl_7.3.0_amd64.deb
	fd 
	```
- fzf
	```bash
	git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
	~/.fzf/install
	fzf
	```
**找出重复文件**
- jdupes
	- https://github.com/jbruchon/jdupes
	```bash
	git clone https://github.com/jbruchon/jdupes
	cd jdupes
	make
	./jdupes -r /home	# 递归扫描目录,包括子目录
	./jdupes -dr /home	# 挨个确认删除
	```
- rdfind
	```bash
	yum install -y epel-release && yum install -y rdfind
	# 或
	apt-get install -y rdfind
	rdfind -dryrun true /home			# 结果会保存在 results.txt 文件中
	rdfind -deleteduplicates true /home	# 删除
	```
- fdupes
	```bash
	yum install -y epel-release && yum install -y fdupes
	# 或
	apt install -y fdupes
	fdupes /home
	fdupes -r /			# 递归扫描目录,包括子目录
	fdupes -rd /		# 删除重复内容
	```
- fslint
	```bash
	# fslint 命令可以被特地用来寻找重复文件
	fslint .
	```
**lsof**
> 可以使用 lsof 命令来了解某人是否正在使用文件
```bash
lsof /dev/null			# Linux 中所有已打开文件的列表
lsof -u root			# root 打开的文件列表
lsof -i TCP:22			# 找出进程监听端口
```