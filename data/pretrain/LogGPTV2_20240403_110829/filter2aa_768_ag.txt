2 
00401001 8bec            mov     ebp,esp  
;建立本函数的栈帧基地址 
3 
00401003 6aff           push    0FFFFFFFFh 
;分配并初始化 trylevel 
4 
00401005 68e0704000  push offset SehFinally!KERNEL32…+0x30 (004070e0) 
5 
0040100a 682c124000  push    offset SehFinally!_except_handler3 (0040122c) 
6 
0040100f 64a100000000    mov     eax,dword ptr fs:[00000000h] 
7 
00401015 50              push    eax     
;将以前的登记结构地址压入栈 
8 
00401016 64892500000000  mov     dword ptr fs:[0],esp ;登记动态建立的登记结构 
9 
0040101d 83ec08          sub     esp,8     
10 
00401020 53              push    ebx     
;保存需要保持原值的寄存器 
11 
00401021 56              push    esi     
;保存需要保持原值的寄存器 
12 
00401022 57              push    edi     
;保存需要保持原值的寄存器 
13 
00401023 c745fc00000000  mov     dword ptr [ebp-4],0 ;修改 trylevel 
14 
0040102a b801000000      mov     eax,1     
;准备被除数 
15 
0040102f 99              cdq    ; 
16 
00401030 f77d08          idiv    eax,dword ptr [ebp+8] ;整除 
17 
00401033 894508          mov     dword ptr [ebp+8],eax ;商赋给参数 1 
18 
00401036 c745fcffffffff  mov     dword ptr [ebp-4],0FFFFFFFFh ;离开保护块 
19 
0040103d e814000000 call SehFinally!SehFinally+0x56(00401056);调用终结块函数 
20 
00401042 8b4508         mov     eax,dword ptr [ebp+8]  ;准备返回值 
21 
00401045 8b4df0     mov  ecx,dword ptr [ebp-10h];取保存的前一个登记结构地址 
22 
00401048 64890d00000000  mov     dword ptr fs:[0],ecx ;恢复 
23 
0040104f 5f              pop     edi     
;恢复需要保持原值的寄存器 
24 
00401050 5e              pop     esi     
;恢复需要保持原值的寄存器 
25 
00401051 5b              pop     ebx     
;恢复需要保持原值的寄存器 
26 
00401052 8be5            mov     esp,ebp     
;恢复栈指针 
27 
00401054 5d              pop     ebp     
;恢复父函数的栈帧基地址 
28 
00401055 c3              ret     
;返回，以下是终结块函数 
29 
00401056 6830804000    push    offset SehFinally!`string' (00408030) 
30 
0040105b e8a0000000    call    SehFinally!printf (00401100) 
31 
00401060 83c404         add     esp,4     
;释放调用 printf 函数压入的参数 
32 
00401063 c3              ret     
;返回 
因为无论保护块内是否发生异常，终结块都应该被执行，所以在函数正常执行路线上
也会有对终结块函数的调用，例如第 19 行就是这样的调用。 
那么，当有异常发生时，终结块函数是如何被调用的呢？在终结块函数的入口处（第
29 行）设置一个断点： 
bp 00401056 
然后执行程序，会有异常通知发给调试器，按 F5 继续，于是断点命中，观察栈序列会发
现与正常执行 SehFinally 函数没什么两样。这种效果正是栈展开过程所追求的目标，也就
《软件调试》补编 
- 29 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
是当执行终结处理块或其他局部展开代码时，都将栈设置成这些代码所在函数的情况。观
察程序的屏幕输出，可以看到屏幕上已经输出了一行信息： 
Filter expression in main is evaluated. 
可见，此时 main 函数中的过滤表达式已经被执行过了，它同意处理异常，系统才执
行栈展开，于是被展开函数中的终结块被调用。单步跟踪第 29～32 行的指令，并回到上
一级函数，此时看到的是_NLG_Return2 标号，它其实是局部展开函数_local_unwind2
的后半部分。在_local_unwind2 中调用 lpfnHandler 函数的下面便是_NLG_Return2 标
号，继续执行会跳转到_local_unwind2 函数中的遍历范围表的起始处。至此，我们印证
了是_local_unwind2 函数调用终结块函数。 
从_local_unwind2 退出后是_except_handler3 函数，它是第 6 行指令注册的异常
处理函数。继续跟踪_except_handler3 函数，直到它返回到 ExecuteHandler2 函数，
此时再观察栈调用序列，便可以看到与清单 24-17 中的栈帧#01～#0b 几乎一样的栈回溯
了。 
清单 24-20 显示了_local_unwind2 函数的伪代码，其中包含了执行当前函数范围内
的各个终结块的过程。 
清单 24-20  _local_unwind2 函数的伪代码 
1 
void _local_unwind2(_EXCEPTION_REGISTRATION * pRegFrame, 
2 
                     DWORD dwEndTrylevel) 
3 
{ 
4 
   DWORD dwPrevTrylevel=0x0FFFFFFFE; 
5 
6 
   push     pRegFrame     
//本代码块是要注册一个内嵌的异常处理器 
7 
   push     0FFFFFFFEh     
//一个特殊的 trylevel 值 
8 
   push    offset SehFinally!_global_unwind2+0x20 (00401154)//压入范围表地址 
9 
   push    dword ptr fs:[0]      
//旧的异常处理登记结构 
10 
   mov     dword ptr fs:[0],esp    
//登记到 FS:[0]中 
11 
12 
   while (pRegFrame->trylevel!= TRYLEVEL_NONE && 
13 
         pRegFrame->trylevel!= dwEndTrylevel) 
14 
   { 
15 
     pCurScopeEntry = pRegFrame->scopetable[pRegFrame->trylevel]; 
16 
     dwPrevTrylevel = pCurScopeEntry->previousTryLevel; 
17 
     pRegFrame-> trylevel= dwPrevTrylevel; 
18 
     if (!pCurScopeEntry ->lpfnFilter) 
//判断是__try{}__finally 结构 
19 
     { 
20 
        pCurScopeEntry ->lpfnHandler(); //执行终结块 
21 
_NLG_Return2: 
22 
     } 
23 
   } 
24 
   pop     dword ptr fs:[0]      
//注销内嵌的异常处理器 
25 
} 
参数中的 dwEndTrylevel 用来作为循环结束标志，即当循环到这个编号的__try 结构
时停止遍历。对于本节的例子，__except_handler3 函数是以−1（TRYLEVEL_ NONE）
为参数来调用的，含义是遍历指定栈帧中的所有__try 结构。 
24.8  C++的 try{}catch 结构 
在理解了操作系统的 SEH 工作机制和 VC 的__try{}__except()结构后，接下来要
讨论的是 C++语言的异常处理，即 C++的 try{}catch 结构。为了与 SEH 相区别，C++
的异常处理通常被简称为 CppEH（C plus plus Exception Handling）。 
《软件调试》补编 
- 30 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
24.8.1  C++的异常处理 
C++标准定义了 3 个与异常有关的关键字：try、catch 和 throw。其典型结构为： 
try { 
   // 被保护块  
   throw [expression] 
} 
catch (exception-declaration) { 
   // 处理符合声明类型的异常处理块 
} 
[[catch (exception-declaration) { 
   //处理符合声明类型的异常处理块 
} ] . . . ] 
也就是使用 try 关键字和一对大括号将要保护的代码包围起来，其后可以有一个或多
个由 catch 关键字开始的 catch 块。每个 catch 块由异常声明（exception-declaration）和
异常处理两部分组成。异常声明的作用类似于过滤表达式，只不过这里是使用类型来进行
匹配。异常声明的一个特例是省略号（…），意思是与所有异常都匹配。例如，在清单 24-21
所示的 CppEH 程序中，CppEH 函数的 try 块后共有 3 个 catch 块，前两个分别捕捉字符
串类型和整数类型的异常，最后一个用于捕捉所有其他类型的异常。 
清单 24-21  CppEH 程序的源代码 
1 
#include "stdafx.h" 
2 
class C{ 
3 
public: 
4 
    C(int n,int a){no=n;age=a;} 
5 
    ~C(){printf("Object %d is destroyed [%d]\n",no,age);}; 
6 
    int no,age; 
7 
}; 
8 
int CppEH(int n) 
9 
{                 
//EHRec = -1 
10 
    C o(-1,100);      
//定义-1 号类实例 
11 
    try         
//Try0     
// EHRec = 0 
12 
    {             
// EHRec = 1 
13 
        C o0(0,o.age*n);      
//定义 0 号类实例 
14 
        try     
//Try1     
// EHRec = 2 
15 
        {         
// EHRec = 3 
16 
            C o1(1,o0.age/n);      
//定义 1 号类实例 
17 
            throw o1;    
//此语句前 EHRec 被设置为 4 
18 
        }         
19 