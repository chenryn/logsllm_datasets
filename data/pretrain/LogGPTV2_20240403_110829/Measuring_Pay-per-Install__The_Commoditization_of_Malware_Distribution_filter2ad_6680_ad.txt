lies, the most often repacked are Securitysuite (more than
twice a day) and Hiloti (at least once per day). CLUS-
TER:D has the slowest repacking rate, only 1 executable
was seen during the month, followed by Nuseek (2 exe-
cutables).
In Figure 5, we contrast the repacking of the Rustock
and Securitysuite families (with two variants of the lat-
ter) over the course of August. We plot distinct vari-
Figure 4: Malware family availability via inﬁltrated PPI services in August 2010. We only show families with a known
activity class.
Figure 5: Repacking activity according to binary changes over time for the Securitysuite and Rustock families. Some
Securitysuite binaries detected virtualized execution; we separate these by color.
DateFamilyRustockPushdoGrumOpachkiZlobTdssLoaderadv−ackLoaderadvHilotiGoldinstall−listGoldinstall−dlDailyppiBredolabZloaderZbotSpyeyeSecuritysuite−avmSecuritysuiteSecurityessentialsAvcheckerAntimalware−doctorVotwupRusskillCanahom−MachBotBlackenergy1NuseekGleishugCLUSTER ASasfisPalevo2PalevoAsproxSmartAdsSolutionsllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll08/0108/0308/0508/0708/0908/1108/1308/1508/1708/1908/2108/2308/2508/2708/2908/3109/02ClassadwarellbotnetclickfraudddosfakeavinfostealppisearchfraudspamDateMD5246810121420406080100120140||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||08/0108/0308/0508/0708/0908/1108/1308/1508/1708/1908/2108/2308/2508/2708/2908/3109/02rustocksecuritysuiteVM Detection||no||yesants on the y-axis, with entries ordered by ﬁrst appear-
ance. Rustock changes executables less frequently, and
with little version overlap. Furthermore, the program
dropped Rustock during the whole month, while Secu-
ritysuite has more complex availability: Securitysuite-
avm, a Securitysuite subfamily with anti-VM capabil-
ities (for VMware, speciﬁcally), ﬁlled the availability
gaps when Securitysuite was not pushed out.1 In aggre-
gate, Securitysuite was thus likewise available through-
out, though with differing anti-VM capabilities. One
possible explanation is that the Securitysuite gang uses
two off-the-shelf packers, but only one provides anti-VM
capabilities.
Zlob afﬁliate downloader repacking. Unlike for the
malware that their clients provide, PPI providers typi-
cally repack afﬁliate downloader binaries on a periodic
basis and notify their afﬁliates to switch to the fresh
downloader [29]. We found that the Zlob service has in-
corporated a twist on this approach. They provide a web
service for afﬁliates to request a fresh binary, which, in-
terestingly, apparently repacks the afﬁliate binaries on-
the-ﬂy. We requested the downloader for a single afﬁli-
ate 27 consecutive times, resulting in 27 distinct, work-
ing Zlob binaries with identical sizes but differing MD5
hashes. Attackers could likewise apply such on-the-ﬂy
packing to other areas, such as drive-by-downloads, to
create unique malware for each compromised host.
4.3 PPI Behavior
In this section we look at the behavior and distinct struc-
ture manifested by each PPI provider for managing their
downloads.
LoaderAdv. The LoaderAdv downloader has hard-
coded two domains and a set of ﬁle paths that it com-
bines with the two domains to create the URLs to locate
the malware executables. If we ignore the domain part
of the URL (the second domain is only used for redun-
dancy) we observe two classes of URLs: single-client
and multi-client. Single-client URLs always return the
same family of malware, while multi-client URLs cycle
through a set of clients that changed over the course of
our inﬁltration. These latter also yielded different down-
loads based on the geo-location of the milker’s IP ad-
dress, an aspect we examine further in Section 4.4.
Figure 6 shows the behavior of a single multi-client
URL as seen by our milkers. We show the different fami-
1Detecting the presence of Securitysuite-avm versus Securitysuite
was the only signiﬁcant identiﬁcation we obtained by using our “bare
metal” setup in addition to our VM-based execution environment.
lies in separate boxes, and the y-axis represents the coun-
tries involved. (The gaps on August 5 and 11 arise due
to failures of the milkers to connect through Tor.) As
we milk binaries from this URL, we typically see Se-
curitysuite or SmartAdsSolutions binaries. We also ob-
tain Zbot for a brief 11-hour period and GoldInstall-list
for about three days. During August 2010 our Loader-
Adv milker downloads malware from a total of 19 unique
URLs (ignoring the domains). Three of these are single-
client URLs only serving Rustock, while the remaining
16 drop malware matching 31 of our signatures.
GoldInstall. GoldInstall has two downloaders. The
GoldInstall-list downloader contacts the PPI C&C server
to obtain a list of URLs hosting the client executables.
The received list varies based on the geographic loca-
tion. Goldinstall-dl has a hard-coded list of URLs in the
binary that serve executables independent of geographic
location. Both the GoldInstall-list and GoldInstall-dl
downloaders fetch the executables using HTTP, with
each distinct URL representing a single family of mal-
ware. Often, the service hosts the same client executable
in multiple locations, with the path components of the
URL (such as 1.exe) remaining constant. When the
path is the same, typically so is the family of malware,
though we also observed common URL paths used for
multiple families (e.g., bot.exe). The download lo-
cations show no evidence of checking the geo-location
of the downloader before serving malware. Thus, the
GoldInstall-dl downloader does not download executa-
bles based on geographic location. Throughout the
month, the program periodically distributed new URLs
to the PPI executable, 41 total. These on average con-
tinued to return valid executables for 36 days after ﬁrst
provided by the C&C (maximum 162 days, minimum 14
hours).
Virut. The Virut downloader uses a custom IRC-based
C&C protocol to receive a list of URLs hosting the client
executables. We observe a total of six distinct URLs
throughout August 2010, distributing 15 distinct executa-
bles matching signatures for three families. Four of the
URLs use a domain with the same whois entries as the
Virut C&C, and each URL can return a different exe-
cutable for each request.
Zlob. The Zlob downloader uses a custom encrypted
C&C protocol to request a list of URLs to locate client
programs. The received list varies based on the geo-
graphic location. The service replicates the list of URLs
so that every two received URLs correspond to one exe-
cutable, at two locations apparently for redundancy.
Figure 6: Availability of malware families over time, from a single LoaderAdv URL. The empty family shows when
the URL provided a non-executable response.
4.4 Geographic Breakdown
To investigate the geographical preferences of the dif-
ferent malware families, we analyze the milk from the
LoaderAdv, GoldInstall, and Virut services, since as ex-
plained in Section 3.2 for these three services the milker
used 15 Tor circuits in parallel, each terminating in a
different country. We selected 15 countries using price
points advertised by PPI providers: AT, BR, DE, ES, FR,
GB, GR, IT, JP, KR, NL, PL, PT, RU, and US.
For most malware families we observe clear geograph-
ical preferences. Figure 7 shows the frequencies with
which we obtained a sample of the Ertfor, Gleishug,
Rustock, Securitysuite, and SmartAdsSolutions families,
each of which our milkers downloaded at least 100 times
during August. We selected these groups to highlight
characteristics we observe in geographical distribution;
other families exhibit similar patterns.
Three trends in geographical distribution emerge.
First, we commonly see families of malware preferen-
tially targeting Europe and the US (e.g., Ertfor, Secu-
ritysuite, and SmartAdsSolutions). Second, some fami-
lies exclusively target the US or another single country
(e.g., Gleishug). Finally, we observe families with no
geographical preferences (e.g., Rustock).
Several factors can inﬂuence a PPI client’s choice of
country. First, the class of activity in which the client’s
executable engages. A spam bot such as Rustock requires
little more than a unique IP address to send spam, while
fake AV such as Securitysuite often targets speakers of a
speciﬁc language, and may need to support user payment
methods speciﬁc to some areas. In addition, the install
rate a client pays also varies depending on the targets’
countries. We ﬁnd the US and Great Britain generally at
the high end ($100–180 per thousand), other European
countries in the middle ($20–160), and the rest of the
world at the bottom (< $10) [12, 13, 19].
4.5 Afﬁliate–PPI Interactions
Surprisingly, among the binaries that we milk we ﬁnd a
number of afﬁliate PPI downloaders. That is, download-
DateCountryATDEESFRGBGRITKRPTUSATDEESFRGBGRITKRPTUSATDEESFRGBGRITKRPTUSATDEESFRGBGRITKRPTUSATDEESFRGBGRITKRPTUS||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||08/0108/0308/0508/0708/0908/1108/1308/1508/1708/1908/2108/2308/2508/2708/2908/3109/02emptyGoldinstall−listSecuritysuiteSmartAdsSolutionsZbotFigure 7: Prevalence of six malware families seen by our milkers from different country vantage points.
ers not infrequently download other downloaders. This
indicates that some PPI afﬁliates have also signed up as
clients of PPI services. To understand these afﬁliate–PPI
interactions, we extracted the unique afﬁliate identiﬁer
embedded in each of the PPI downloaders found in our
milk, which we can observe from its transmission (pre-
sumably for accounting purposes) during the C&C ex-
change.
Using these identiﬁers, we observe that afﬁliates from
one PPI service themselves sometimes act as clients
of other PPI services. This behavior manifests by our
milker, impersonating afﬁliate X for PPI service A, fetch-
ing an executable for installation that corresponds to a
downloader for afﬁliate Y of PPI service B.
We speculate that some of these multi-PPI-service af-
ﬁliates represent arbitrageurs who try to take advantage
of pricing differentials between the (higher) install rates
paid to the afﬁliates of one service for some geographical
regions versus the (lower) install rates charged to clients
of another PPI service. For example, we observe that
LoaderAdv’s afﬁliate 701 signed as a client of GoldIn-
stall, using the latter to distribute 701’s personalized
LoaderAdv downloader for four days. Here, the price
differential includes the US, Canada, and Europe, from
which our GoldInstall milkers collected this executable.
Perhaps even more surprising, we ﬁnd afﬁliates from
one PPI service who are also clients of the same PPI ser-
vice. For example, LoaderAdv’s afﬁliate 515 distributed
their personalized LoaderAdv downloader over Europe
and Brazil using the LoaderAdv service for a total of
20 hours. We see a similar behavior from afﬁliates 0625
and gol of the GoldInstall service, both clients and af-
ﬁliates of GoldInstall. We conjecture that this happens
when afﬁliates try to take advantage of the price differ-
ential between the (higher) install rates paid to the af-
ﬁliates for some geographical regions over the (lower)
install rates paid by the clients for installing on the same
regions. Note that such price differential is possible be-
cause the PPI service oversells installs: multiple clients
can pay the service for installs that cost the service only
a single afﬁliate payout. We suspect the PPI service can
detect this behavior would not credit both afﬁliates for
the install.
In a yet more convoluted case, we observed a GoldIn-
stall afﬁliate, e4u, signing up as a client for both GoldIn-
stall and LoaderAdv. We speculate that e4u most likely
stands for “earning4u”, the brand for the LoaderAdv PPI
service at that time.
(Presumably this afﬁliate simply
took advantage of price differentials within the GoldIn-
stall service and with the LoaderAdv service, but possi-
bly e4u in fact represents the LoaderAdv gang itself.)
4.6 The Download Tree
One important observation of our work regards how
the nesting of downloaders-downloading-additional-
downloaders can quickly grow strikingly complex. To
capture such nesting we use a download tree. Nodes in
the tree represent programs identiﬁed by hashes of their
binary. At each branch in the tree, children represent
programs installed by the parent. Figure 8 shows an ex-
ample download tree. We term any node with children
a downloader. Nodes with a single child may be spe-
cialized downloaders for the child family, while nodes
with multiple children may reﬂect PPI downloaders that
charge the children for the installs. Leaf programs may
implement any of a number of recognizable malware be-
haviors, including sending spam, performing click-fraud,
and stealing personal information.
Generating the download tree requires carefully iden-
tifying the dependencies between installed programs,
e.g., which program downloads and executes other pro-
grams. To build the tree in Figure 8, the client mal-
ware programs need the freedom to download other exe-
cutables from the Internet. For this experiment we used
a different containment policy that sinks everything but
HTTP and C&C. In addition, we rate-limited the outgo-
ing HTTP and C&C trafﬁc, and a human operator mon-
Country Code%020406080100ErtforDEESFRGBGRITJPKRPTRUUSGleishugDEESFRGBGRITJPKRPTRUUSRustockDEESFRGBGRITJPKRPTRUUSSecuritysuiteDEESFRGBGRITJPKRPTRUUSSmartAdsSolutionsDEESFRGBGRITJPKRPTRUUSFigure 8: A download tree starting with a single Loaderadv downloader. Stripes indicate PPI service-related binaries.
itored the execution in real-time to stop the process if
anything unexpected happened.
The download tree in Figure 8 comes from the live
execution of (originally) a single LoaderAdv PPI down-
loader that we ran in our controlled environment. Strik-
ingly, the entire execution required under 10 minutes—
with several additional leaf nodes omitted for clarity!
Thus, the example illustrates how quickly an exploited
system can transform from unmolested operation to host-
ing a veritable ecosystem of malware.
5 Discussion
Our ﬁndings have a number of implications, as follows.
Malware classiﬁcation. Our work shows that we should
conceptually separate the exploitation mechanism com-
promising a system from the malware that the system
subsequently hosts. For example, it may not make sense
to characterize malware by its infection method beyond
malware that self-propagates and malware that does not.
Botmasters might simply purchase installation of their
malware from PPI services which can use a variety of
distribution methods.
The installation of malware from multiple clients
on a single target host has important implications for
behavior-based malware classiﬁcation. For example,
when writing a malware analysis report it is easy to con-
fuse a downloader with malware that it happens to install
during one particular execution. Such confusion can then
result in misleading statistics characterizing the preva-
lence of malware families. Furthermore, malware anal-
ysis platforms that execute malware with Internet con-
nectivity [1, 2, 30] should carefully track program down-
loads and their execution, to allow separation of each
program’s runtime behavior. Without a download tree,
behavioral reports may reﬂect the aggregate behavior of
multiple types of malware. These aggregate reports may
result in incorrect classiﬁcations, and in the worst case
the produced signature may fail to detect individually ex-
ecuting malware.
Regarding classiﬁcation techniques, we note that our
work does not aim to pursue advances in the ﬁeld of be-
havioral malware signature generation, and instead em-
ploys straightforward techniques. We could fruitfully in-
corporate much of the published research in this space
into our classiﬁcation approach.
Defenses. As defenders, we need to understand and ap-
preciate the threat posed by the “silent installs” industry.
PPI services have direct implications for takedown ef-
forts: even if defenders can completely clean up a botnet
(as opposed to merely severing its C&C master servers),
the botmaster could return to business-as-usual through
modest payments to one or more PPI services. Given that
multiple malware authors share use of the same PPI ser-
vices, and that the number of PPI services seems to be
signiﬁcantly smaller than the number of malware fam-
ilies, PPI services are good targets for future takedown
efforts. However, the commoditization of the malware
industry could make it easy to recreate PPI services else-
where after takedown, so the focus should be on identify-
ing and apprehending the people that run such services.
Regarding detection techniques, we observe that the
content-based features of our signatures perform better
than the endpoint-based features. The former wins over
the latter in our handling of the periodic replacement
of stale URLs PPI services employ for hosting the mal-
ware executables, likely to bypass URL blacklists. We