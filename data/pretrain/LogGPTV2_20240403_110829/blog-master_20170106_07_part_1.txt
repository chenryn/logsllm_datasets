## PostgreSQL Ruby tutorial  
### 作者                                                                                     
digoal                                                                                      
### 日期                                                                                     
2017-01-06                                                                                           
### 标签                                                                                    
PostgreSQL , Java , php , ruby , python , C                                                                                                                                                
----                                                                                    
## 背景                
转自 http://zetcode.com/db/postgresqlruby/  
## 正文      
This is a Ruby programming tutorial for the PostgreSQL database. It covers the basics of PostgreSQL programming with the Ruby language.  
### PostgreSQL  
PostgreSQL is a powerful, open source, object-relational database system. It is a multi-user database management system. It runs on multiple platforms, including Linux, FreeBSD, Solaris, Microsoft Windows, and Mac OS X. PostgreSQL is developed by the PostgreSQL Global Development Group.  
PostgreSQL has sophisticated features such as Multi-Version Concurrency Control (MVCC), point in time recovery, tablespaces, asynchronous replication, nested transactions (savepoints), online/hot backups, a sophisticated query planner/optimizer, and write ahead logging for fault tolerance. It supports international character sets, multibyte character encodings, Unicode, and it is locale-aware for sorting, case-sensitivity, and formatting.  
### Ruby  
Ruby is a dynamic, reflective, general-purpose object-oriented programming language. The original author is a Japanese programmer Yukihiro Matsumoto. Ruby first appeared in 1995. Ruby supports various programming paradigms. This includes object orientation, reflection, imperative, and reflective programming.  
### Ruby pg  
Ruby pg is a module that allows Ruby programs to interact with the PostgreSQL database engine. It supports the functions defined in the libpq C library.  
### Installation  
We are going to install PostgreSQL database and additional necessary libraries.  
```  
$ sudo apt-get install postgresql  
```  
On a Debian-based system, we can install the PostgreSQL database from the packages using the above command.  
```  
$ sudo update-rc.d -f postgresql remove  
 Removing any system startup links for /etc/init.d/postgresql ...  
   /etc/rc0.d/K21postgresql  
   /etc/rc1.d/K21postgresql  
   /etc/rc2.d/S19postgresql  
   /etc/rc3.d/S19postgresql  
   /etc/rc4.d/S19postgresql  
   /etc/rc5.d/S19postgresql  
   /etc/rc6.d/K21postgresql  
```  
If we install the PostgreSQL database from packages, it is automatically added to the startup scripts of the operating system. If we are only learning to work with the database, it is unnecessary to start the database each time we boot the system. The above command removes any system startup links for the PostgreSQL database.  
```  
$ sudo apt-get install libpq-dev  
```  
To compile the Ruby pg module, we also need the development files of the C libpg library.  
```  
$ sudo -u postgres psql postgres  
psql (9.3.9)  
Type "help" for help.  
postgres=# \password postgres  
```  
We set a password for the postgres user.  
```  
$ sudo apt-get install ruby-dev  
```  
We install the Ruby development libraries, which are needed for compiling Ruby extention modules.  
```  
$ sudo gem install pg   
```  
We install the Ruby pg module, which is the Ruby interface to the PostgreSQL database.  
### Starting and stopping PostgreSQL  
In the next section, we are going to show how to start the PostgreSQL database, stop it, and query its status.  
```  
$ sudo service postgresql start  
 * Starting PostgreSQL 9.3 database server     [ OK ]  
```  
On Debian-based Linux, we can start the server with the service postgresql start command.  
```  
$ sudo service postgresql status  
9.3/main (port 5432): online  
```  
We use the service postgresql status command to check if PostgreSQL is running.  
```  
$ sudo service postgresql stop  
 * Stopping PostgreSQL 9.3 database server     [ OK ]  
```  
We use the service postgresql stop command to stop PostgreSQL.  
```  
$ service postgresql status  
9.3/main (port 5432): down  
```  
At this moment, the service postgresql status command reports that the PostgreSQL database is down.  
### Creating a user and a database  
In the following steps, we create a new database user and database.  
```  
$ sudo -u postgres createuser janbodnar  
```  
We create a new role in the PostgreSQL system. We allow it to have ability to create new databases. A role is a user in a database world. Roles are separate from operating system users.  
```  
$ sudo -u postgres psql postgres  
psql (9.3.9)  
Type "help" for help.  
postgres=# ALTER USER janbodnar WITH password 'pswd37';  
ALTER ROLE  
postgres=# \q  
```  
With the psql command, we add a password for the new user.  
PostgreSQL often uses trust or peer authentication policies on local connections. In case of the trust authentication policy, PostgreSQL assumes that anyone who can connect to the server is authorized to access the database with whatever database user name they specify (even superuser names). When making connections to the database, no password is required. (The restrictions made in the database and user columns still apply.) The trust authentication is appropriate and very convenient for local connections on a single-user workstation. It is usually not appropriate on a multiuser machine. In case of the peer authentication policy, the database username must match the operating system username.  
```  
$ sudo -u postgres createdb testdb --owner janbodnar  
```  
With the createdb command, we create a new database called testdb. Its owner is the new database user.  
### The libpq library  
The libpq library is the C interface to PostgreSQL. It is a set of library functions that allow client programs to interact with PostgreSQL. It is also the underlying engine for several other PostgreSQL application interfaces, including those written for C++, Perl, PHP, Ruby, Python, and Tcl.  
Ruby pg module is a wrapper around the libpg library.  
lib_version.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
puts 'Version of libpg: ' + PG.library_version.to_s  
```  
The program prints the version of the libpq library.  
```  
require 'pg'  
```  
We include the pg module.  
```  
puts 'Version of libpg: ' + PG.library_version.to_s  
```  
The library_version method returns the version of the libpq being used.  
```  
$ ./lib_version.rb   
Version of libpg: 90309  
```  
The version of the library is 9.3.9.  
### Server version  
In the following example, we find out the version of the PostgreSQL database.  
server_version.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    puts con.server_version  
rescue PG::Error => e  
    puts e.message   
ensure  
    con.close if con  
end  
```  
The example connects to the PostgreSQL database, executes a server_version method, prints the version, closes the connection, and cleans up.  
```  
...  
# TYPE  DATABASE        USER            ADDRESS                 METHOD  
# "local" is for Unix domain socket connections only  
local   all             all                                     peer  
...  
```  
In the pg_hba.conf, we have the peer default authentication method. In this method, the database user name must match the operating system user name. No password is required to make a connection.  
```  
con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
```  
With the connect method, we make a connection to the database. In the connection string, we provide the user name and the database name.  
```  
rescue PG::Error => e  
    puts e.message   
```  
We check for errors. This is important, since working with databases is error prone.  
```  
ensure  
    con.close if con  
end  
```  
In the end, we release the resources.  
```  
$ ./server_version.rb   
90309  
```  
Running the program, we get the database server version.  
### Authentication with a password  
Next, we are going to authenticate to the database server with a password. In all other examples in this tutorial, we assume the peer or trust authentication mode. We change the authentication type for the local connection inside the pg_hba.conf file to md5.  
```  
$ sudo service postgresql restart  
```  
To apply the changes, the database server must be restarted.  
password_authentication.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar',   
        :password => 'pswd37'  
    user = con.user  
    db_name = con.db  
    pswd = con.pass  
    puts "User: #{user}"  
    puts "Database name: #{db_name}"  
    puts "Password: #{pswd}"   
rescue PG::Error => e  
    puts e.message   
ensure  
    con.close if con  
end  
```  
In the example, we connect to the database with a password. We print the username, database name, and the password of the current database connection.  
```  
con = PG.connect :dbname => 'testdb', :user => 'janbodnar',   
    :password => 'pswd37'  
```  
In the connection string, we add the password option.  
```  
user = con.user  
```  
The user method returns the user name of the connection.  
```  
db_name = con.db  
```  
The db method returns the database name of the connection.  
```  
pswd = con.pass  
```  
The pass method returns the password of the connection.  
```  
$ ./password_authentication.rb   
User: janbodnar  
Database name: testdb  
Password: pswd37  
```  
The program prints the database user, the database name, and the password used.  
### Creating a database table  
In this section, we create a database table and fill it with data.  
create_table.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    con.exec "DROP TABLE IF EXISTS Cars"  
    con.exec "CREATE TABLE Cars(Id INTEGER PRIMARY KEY,   
        Name VARCHAR(20), Price INT)"  
    con.exec "INSERT INTO Cars VALUES(1,'Audi',52642)"  
    con.exec "INSERT INTO Cars VALUES(2,'Mercedes',57127)"  
    con.exec "INSERT INTO Cars VALUES(3,'Skoda',9000)"  
    con.exec "INSERT INTO Cars VALUES(4,'Volvo',29000)"  
    con.exec "INSERT INTO Cars VALUES(5,'Bentley',350000)"  
    con.exec "INSERT INTO Cars VALUES(6,'Citroen',21000)"  
    con.exec "INSERT INTO Cars VALUES(7,'Hummer',41400)"  
    con.exec "INSERT INTO Cars VALUES(8,'Volkswagen',21600)"  
rescue PG::Error => e  
    puts e.message   
ensure  
    con.close if con  
end  
```  
The created table is called Cars and it has three columns: the Id, the name of the car, and its price.  
```  
con.exec "DROP TABLE IF EXISTS Cars"  
```  
The exec method submits an SQL command to the server and waits for the result. Our SQL command drops a table if it already exists.  
```  
$ ./create_table.rb  
$ psql testdb  
psql (9.3.9)  
Type "help" for help.  
testdb=> SELECT * FROM Cars;  
 id |    name    | price    
----+------------+--------  
  1 | Audi       |  52642  
  2 | Mercedes   |  57127  
  3 | Skoda      |   9000  
  4 | Volvo      |  29000  
  5 | Bentley    | 350000  
  6 | Citroen    |  21000  
  7 | Hummer     |  41400  
  8 | Volkswagen |  21600  
(8 rows)  
```  
We execute the program and verify the created table with the psql tool.  
### Simple query  
In this section, we execute a simple query command.  
query_version.rb  
```  
#!/usr/bin/ruby  
require 'pg'  
begin  
    con = PG.connect :dbname => 'testdb', :user => 'janbodnar'  
    rs = con.exec 'SELECT VERSION()'  
    puts rs.getvalue 0, 0  
rescue PG::Error => e  
    puts e.message   
ensure  
    con.close if con  
end  
```  
The example gets the version of the database server.  
```  
rs = con.exec 'SELECT VERSION()'  
```  
The SELECT VERSION() SQL statement retrieves the version of the database.  
```  
puts rs.getvalue 0, 0  
```  
The getvalue method returns a single field value of one row of the returned result set.  
```  
$ ./query_version.rb   
PostgreSQL 9.3.9 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu 4.8.4-2ubuntu1~14.04) 4.8.4, 64-bit  
```  
The program prints this output.  
### Retrieving multiple rows of data  
The following example executes a query that returns multiple rows of data.  
multiple_rows.rb  
```  