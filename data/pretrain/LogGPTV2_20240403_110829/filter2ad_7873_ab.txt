](https://images.seebug.org/content/images/2019/02/82b2b17d-6b02-478e-a317-0e0fb186219c.png-w331s)
`update_post_meta`会把所有字段遍历更新
就会更新数据库中的相应字段 ![
](https://images.seebug.org/content/images/2019/02/aa1b35f5-0912-44f4-a541-73e538380e52.png-w331s)
#### 配合变量覆盖来目录穿越写文件
根据原文的描述，我们首先需要找到相应的裁剪函数
    /wp-admin/includes/image.php line 25 
![
](https://images.seebug.org/content/images/2019/02/ce209b1a-31a6-486b-acd1-1968e6e310a2.png-w331s)
这里传入的变量src就是从修改过的`_wp_attached_file`而来。
在代码中，我们可以很轻易的验证一个问题。
**在WordPress的设定中，图片路径可能会受到某个插件的影响而不存在，如果目标图片不在想要的路径下时，WordPress就会把文件路径拼接为形似
http://127.0.0.1/wp-content/uploads/2019/02/2.jpg 的url链接，然后从url访问下载原图**
这里的`_load_image_to_edit_path`就是用来完成这个操作的。
也正是因为这个原因，假设我们上传的图片名为`2.jpg`，则原本的`_wp_attached_file`为`2019/02/2.jpg`
然后我们通过Post Meta变量覆盖来修改`_wp_attached_file`为`2019/02/1.jpg?/../../../evil.jpg`
这里的原图片路径就会拼接为`{wordpress_path}/wp-content/uploads/2019/02/1.jpg?/../../../evil.jpg`，很显然这个文件并不存在，所以就会拼接链接为`http://127.0.0.1/wp-content/uploads/2019/02/2.jpg?/../../../evil.jpg`，后面的部分被当作GET请求，原图片就会成功的获取到。
紧接着进入save函数的新图片路径会拼接为`{wordpress_path}/wp-content/uploads/2019/02/1.jpg?/../../../cropped-evil.jpg`，我们就能成功写入新文件了。
后面的save函数会调用你当前图片库的裁剪功能，生成图片结果。（默认为imagick）
    /wp-includes/class-wp-image-editor.php line 394
![
](https://images.seebug.org/content/images/2019/02/5b0141da-32df-4b58-b856-c448c9c7feb9.png-w331s)
但这里看上去没有任何限制，实际上不是的。在写入的目标目录下，存在一个假目录，为`1.jpg?`
  * **而linux、mac支持这种假目录，可以使用?号**
  * **但windows在路径中不能有?号，所以这里改用了#号**
    &meta_input[_wp_attached_file]=2019/02/2-1.jpg#/../../../evil.jpg
成功写入文件
    cropped-evil.jpg
#### 控制模板参数来导致任意文件包含
进度进展到这就有点儿陷入僵局，因为原文中关于这部分只用了一句话带过，在实际利用的过程中遇到了很多问题，甚至不同版本的WordPress会有不同的表现，其中诞生了多种利用方式，这里我主要讲1种稳定利用的方式。
##### 设置`_wp_page_template`
首先我们先正向分析，看看在什么情况下我们可以设置`_wp_page_template`
首先可以肯定的是，这个变量和`_wp_attached_file`一样都属于Post Meta的一部分，可以通过前面的操作来对这个变量赋值
![
](https://images.seebug.org/content/images/2019/02/158f6bb3-077a-467c-9c6c-a216d02ea294.png-w331s)
但实际测试过程中，我们发现，我们并不能在任何方式下修改并设置这个值。
    /wp-includes/post.php line 3828
  * 如果你设置了这个值，但这个文件不存在，则会被定义为`default`。
  * 如果该值被设置，则没办法通过这种方式修改。
所以这里我们可能需要新传一个媒体文件，然后通过变量覆盖来设置这个值。
##### 加载模板
当我们成功设置了该变量之后，我们发现，并不是所有的页面都会加载模板，我们重新回到代码中。
最终加载模板的地方在
    wp-includes/template.php line 634
![
](https://images.seebug.org/content/images/2019/02/95e922c3-839e-4b00-9db7-0a26a8c37216.png-w331s)
只要是在`$template_names`中需要被加载的文件名，会在当前主题的目录下遍历加载。
回溯跟入
    wp-includes/template.php line 23
![
](https://images.seebug.org/content/images/2019/02/29697c7a-84d4-4cfd-a573-d93a0498754b.png-w331s)
继续回溯我们就能发现一些端倪，当你访问页面的时候，页面会通过你访问的页面属性，调用不同的模板加载函数。
    wp-includes/template-loader.php line 48
![
](https://images.seebug.org/content/images/2019/02/82c029a1-d222-442e-8191-c70cb4c5511b.png-w331s)
在这么多的模板调用函数中只有两个函数`get_page_template`和`get_single_template`这两个在函数中调用了`get_page_template_slug`函数。
    wp-includes/template.php line 486
![
](https://images.seebug.org/content/images/2019/02/c40734d0-e4e7-47b1-a2d1-d73e486c0793.png-w331s)
而`get_page_template_slug`函数从数据库中获取了`_wp_page_template`值
    /wp-includes/post-template.php line 1755
![
](https://images.seebug.org/content/images/2019/02/c0cc746f-85fc-4878-be3e-ecf32a9049a6.png-w331s)
只要我们能让模板加载时进入`get_page_template`或`get_single_template`，我们的模板就可以成功被包含。
由于代码和前端的差异，我们也没有完全找到触发的条件是什么，这里选了一个最简单的，即上传一个txt文件在资源库，然后编辑信息并预览。
![
](https://images.seebug.org/content/images/2019/02/57cc6235-3c7a-4dd1-8662-d2f05ec180ae.png-w331s)
#### 生成图片马
这部分就涉及到了后端图片库的问题，WordPress用到的后端图片处理库有两个，gd和imagick，其中默认优先使用imagick做处理。
  * imagick 
利用稍微比较简单，imagick不会处理图片中的exif部分。将敏感代码加入到exif部分就可以不会改动。
  * gd 
gd的利用就比较麻烦了，gd不但会处理图片的exif部分，还会删除图片中出现的php代码。除非攻击者通过fuzz获得一张精心构造的图片，可以在被裁剪处理之后刚好出现需要的php代码（难度较高）。
由于这不是漏洞最核心的部分，这里就不赘述了。
### 修复
1、由于该漏洞主要通过图片马来完成RCE，而后端图片库为gd时，gd会去除图片信息中exif部分，并去除敏感的php代码。但如果攻击者精心设计一张被裁剪后刚好生成含有敏感代码的图片时，就可以造成RCE漏洞。如果后端图片库为imagick时，则将敏感代码加入到图片信息的exif部分，就可以造成RCE漏洞。
官网上可供下载的所有release版本中都修复了这个漏洞，更新至最新版或者手动将当前版本覆盖安装即可。
2、 通用防御方案  
使用第三方防火墙进行防护(如创宇盾[])。
3、技术业务咨询  
知道创宇技术业务咨询热线 :  
400-060-9587(政府，国有企业)、028-68360638(互联网企业)
### 总结
整个RCE的利用链由4部分组成，深入WordPress的底层Core逻辑，原本来说这4个部分无论哪个都很难造成什么危害，但却巧妙地连接在一起，并且整个部分意外的都是默认配置，大大增加了影响面。在安全程度极高的WordPress中能完成这种的攻击利用链相当难得，从任何角度都是一个非常nice的漏洞:>
最后再次感谢我的小伙伴们以及整个过程中给我提供了很大帮助的朋友们:>
* * *