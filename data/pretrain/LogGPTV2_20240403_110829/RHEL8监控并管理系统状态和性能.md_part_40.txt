    在这里，
    ::: itemizedlist
    -   如果您的系统使用非 `平面`{.literal} 模式，您可以看到一行类似于将
        `APIC 路由设置为物理扁平`{.literal}。
    -   如果没有看到这样的消息，您的系统将使用 `扁平`{.literal} 模式。
        如果您的系统使用 `x2apic`{.literal} 模式，您可以通过在
        `bootloader`{.literal} 配置的内核命令行中添加
        `nox2apic`{.literal} 选项来禁用它。
        只有非物理扁平模式（`扁平`{.literal}）支持将中断分发到多个
        CPU。这个模式只适用于最多 `8 个 CPU 的系统`{.literal}。
    :::
4.  计算 `smp_affinity 掩码`{.literal}。有关如何计算
    `smp_affinity 掩码`{.literal} 的更多信息，请参阅 [设置 smp_affinity
    掩码](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance#setting-the-smp_affinity-mask_configuring-an-operating-system-to-optimize-cpu-utilization){.link}。
:::
::: itemizedlist
**其它资源**
-   `journalctl(1)和`{.literal} `taskset(1)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#setting-the-smp_affinity-mask_configuring-an-operating-system-to-optimize-cpu-utilization}设置 smp_affinity 掩码 {.title}
:::
`smp_affinity`{.literal}
值存储为代表系统中所有处理器的十六进制位掩码。每个位配置一个不同的
CPU。最不重要的位是 CPU 0。
掩码的默认值为
`f`{.literal}，这意味着中断请求可以在系统中的任何处理器上处理。将此值设置为
1 表示只有处理器 0 可以处理中断。
::: orderedlist
**流程**
1.  在二进制中，将值 1 用于处理中断的 CPU。例如，要设置 CPU 0 和 CPU 7
    来处理中断，请使用 `0000000010000001`{.literal} 作为二进制代码：
    ::: table
    []{#configuring-an-operating-system-to-optimize-cpu-utilization_monitoring-and-managing-system-status-and-performance.html#idm139675498960560}
    **表 31.1. CPU 的二进制 Bit**
    ::: table-contents
      -------- ---- ---- ---- ---- ---- ---- --- --- --- --- --- --- --- --- --- ---
      CPU      15   14   13   12   11   10   9   8   7   6   5   4   3   2   1   0
      二进制   0    0    0    0    0    0    0   0   1   0   0   0   0   0   0   1
      -------- ---- ---- ---- ---- ---- ---- --- --- --- --- --- --- --- --- --- ---
    :::
    :::
2.  将二进制代码转换为十六进制：
    例如，使用 Python 转换二进制代码：
    ``` screen
    >>> hex(int('0000000010000001', 2))
    '0x81'
    ```
    在有超过 32 个处理器的系统上，您必须分隔离散 32 位组的
    `smp_affinity`{.literal} 值。例如，如果您只希望 64 处理器系统的前 32
    个处理器为中断请求提供服务，请使用 `0xffffffff,00000000。`{.literal}
3.  特定中断请求的中断关联性值存储在相关的
    `/proc/irq/irq_number/smp_affinity`{.literal} 文件中。在此文件中设置
    `smp_affinity`{.literal} 掩码：
    ``` screen
    # echo mask > /proc/irq/irq_number/smp_affinity
    ```
:::
::: itemizedlist
**其它资源**
-   `journalctl(1)、`{.literal} `irqbalance(1)和`{.literal}
    `taskset(1)`{.literal} man page
:::
:::
:::
:::
[]{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance}第 32 章 调整调度策略 {.title}
:::
在 Red Hat Enterprise Linux
中，最小的进程执行单元称为线程。系统调度程序决定哪个处理器运行线程，以及线程运行的时间。但是，由于调度程序的主要顾虑是保持系统处于忙碌状态，因此可能无法最佳地为应用程序性能调度线程。
例如，当 Node B 上的处理器可用时，NUMA 系统上的应用程序在节点 A
上运行。为了让节点 B 处于忙碌状态，调度程序将一个应用程序的线程移到 Node
B。但是，应用程序线程仍然需要访问节点 A
上的内存。但是，此内存需要更长的时间来访问，因为线程现在在 Node B
上运行，并且 Node A 内存不再对线程而言是本地的。因此，线程在节点 B
上运行可能需要更长的时间，需要等待节点 A
上的处理器变得可用，然后在具有本地内存访问权限的原始节点上执行线程。
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#con_categories-of-scheduling-policies_tuning-scheduling-policy}调度策略的类别 {.title}
:::
对性能敏感的应用通常得益于设计人员或管理员确定线程的运行位置。Linux
调度程序实施许多调度策略，这些策略决定线程运行的位置和运行时间。
以下是两个主要类别的调度策略：
::: variablelist
[`常规策略`{.literal}]{.term}
:   普通线程用于普通优先级的任务。
[`实时策略`{.literal}]{.term}
:   实时策略用于必须在不中断的情况下完成的时间敏感任务。实时线程不受时间分片的影响。这意味着线程会一直运行，直到它们阻断、退出、自愿生成，或者被更高优先级的线程抢占。
    最低优先级实时线程排在采用正常策略的任何线程之前调度。如需更多信息，请参阅使用
    [SCHED_FIFO
    的静态优先级调度](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#static-priority-scheduling-with-SCHED_FIFO_tuning-scheduling-policy){.link}，并使用
    [SCHED_RR
    进行循环优先级调度](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#round-robin-priority-scheduling-with-sched_rr_tuning-scheduling-policy){.link}。
:::
::: itemizedlist
**其它资源**
-   `sched(7)`{.literal}、`sched_setaffinity(2)`{.literal}、`sched_getaffinity(2)`{.literal}、`sched_setscheduler(2)`{.literal}
    和 `sched_getscheduler(2)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#static-priority-scheduling-with-SCHED_FIFO_tuning-scheduling-policy}使用 SCHED_FIFO 进行静态优先级调度 {.title}
:::
`SCHED_FIFO`{.literal}
（也称为静态优先级调度）是一个为各个线程定义固定优先级的实时策略。此策略允许管理员缩短事件响应时间并缩短延迟。对于时间敏感任务，建议不要在较长时间内执行此策略。
使用 `SCHED_FIFO`{.literal} 时，调度程序会按照优先级顺序扫描所有
`SCHED_FIFO`{.literal}
线程的列表，并调度可随时运行的优先级最高的线程。`SCHED_FIFO`{.literal}
线程的优先级级别可以是从 `1`{.literal} 到 `99`{.literal}
的一个整数，其中 `99`{.literal}
被视为最高优先级。红帽建议从较低数量开始，只有在您发现延迟问题时才会增加优先级。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
因为实时线程不受时间片的限制，因此红帽不推荐将优先级设置为
99。这会使您的进程处于与迁移和 watchdog
线程相同的优先级级别；如果您的线程进入计算循环，并且这些线程已被阻止，它们将无法运行。具有单一处理器的系统最终会挂起。
:::
管理员可以限制 `SCHED_FIFO`{.literal}
带宽，以防止实时应用程序编程人员启动独占处理器的实时任务。
以下是此策略中使用的一些参数：
::: variablelist
[`/proc/sys/kernel/sched_rt_period_us`{.literal}]{.term}
:   此参数定义时间周期，以微秒为单位，被视为处理器带宽的 10%。默认值为
    `1000000 ›s`{.literal}，或 `1 秒`{.literal}。
[`/proc/sys/kernel/sched_rt_runtime_us`{.literal}]{.term}
:   此参数定义专用于运行实时线程的时间周期，以微秒为单位。默认值为
    `950000 □s`{.literal}，或 `0.95 秒`{.literal}。
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#round-robin-priority-scheduling-with-sched_rr_tuning-scheduling-policy}使用 SCHED_RR 进行循环优先级调度 {.title}
:::
`SCHED_RR`{.literal} 是 `SCHED_FIFO`{.literal}
的循环变体。当多个线程需要以同一优先级级别运行时，此策略很有用。
与 `SCHED_FIFO`{.literal} 一样，SCHE`D_RR`{.literal}
是一种为各个线程定义固定优先级的实时策略。调度程序按照优先级顺序扫描所有
SCHED_RR 线程的列表，并调度就绪运行的最高优先级线程。但是，与
`SCHED_FIFO`{.literal}
不同，具有相同优先级的线程在特定时间段内以轮循方式调度。
您可以使用
`/proc/sys/kernel/ sched_rr_timeslice_ms 文件中的sched_`{.literal}
rr_timeslice_ms 内核参数，以毫秒为单位设置此时间片段``{=html}
的值。最小值为 `1 毫秒`{.literal}。
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#normal-scheduling-with-sched_other_tuning-scheduling-policy}使用 SCHED_OTHER 进行常规调度 {.title}
:::
`SCHED_OTHER`{.literal} 是 Red Hat Enterprise Linux 8
中的默认调度策略。此策略使用完全公平调度程序(CFS)来允许对使用此策略调度的所有线程进行公平处理器访问。当有大量线程或者数据吞吐量具有优先权时，此策略最有用，因为它允许更有效地调度线程。
使用此策略时，调度程序会根据每个进程线程的 niceness
值部分创建动态优先级列表。管理员可以更改进程的 nice
值，但不能直接更改调度程序的动态优先级列表。
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#setting-scheduler-policies_tuning-scheduling-policy}设置调度程序策略 {.title}
:::
使用 `chrt`{.literal}
命令行工具检查和调整调度程序策略和优先级。它可以启动具有所需属性的新进程，或者更改正在运行的进程的属性。它还可用于在运行时设置策略。
::: orderedlist
**流程**
1.  查看活跃进程的进程 ID(PID)：
    ``` screen
    # ps
    ```
    将 `--pid`{.literal} 或 `-p`{.literal} 选项与 `ps`{.literal}
    命令搭配使用，以查看特定 PID 的详细信息。
2.  检查特定进程的调度策略、PID 和优先级：
    ``` screen
    # chrt -p 468
    pid 468's current scheduling policy: SCHED_FIFO
    pid 468's current scheduling priority: 85
    # chrt -p 476
    pid 476's current scheduling policy: SCHED_OTHER
    pid 476's current scheduling priority: 0
    ```
    在这里，[*468*]{.emphasis} 和 [*476*]{.emphasis} 是进程的 PID。
3.  设置进程的调度策略：
    ::: orderedlist
    1.  例如，将 PID 为 [*1000*]{.emphasis} 的进程设置为
        [*SCHED_FIFO*]{.emphasis}，优先级为 [*50*]{.emphasis} ：
        ``` screen
        # chrt -f -p 50 1000
        ```
    2.  例如，将 PID 为 [*1000*]{.emphasis} 的进程设置为
        [*SCHED_OTHER*]{.emphasis}，优先级为 [*0*]{.emphasis} ：
        ``` screen
        # chrt -o -p 0 1000
        ```
    3.  例如，将 PID 为 [*1000*]{.emphasis} 的进程设置为
        [*SCHED_RR*]{.emphasis}，其优先级为 [*10*]{.emphasis} ：
        ``` screen
        # chrt -r -p 10 1000
        ```
    4.  要使用特定的策略和优先级启动新应用程序，请指定应用程序的名称：
        ``` screen
        # chrt -f 36 /bin/my-app
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   `CHRT(1)`{.literal} 手册页
-   [chrt
    命令的策略选项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#policy-options-for-the-chrt-command_tuning-scheduling-policy){.link}
-   [在引导过程中更改服务的优先级](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance#changing-the-priority-of-service-during-the-boot-process_tuning-scheduling-policy){.link}
:::
:::
::: section
::: titlepage
# []{#tuning-scheduling-policy_monitoring-and-managing-system-status-and-performance.html#policy-options-for-the-chrt-command_tuning-scheduling-policy}chrt 命令的策略选项 {.title}
:::
使用 `chrt`{.literal} 命令，您可以查看和设置进程的调度策略。
下表描述了适当的策略选项，可用于设置进程的调度策略。