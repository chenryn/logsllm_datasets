1.1 Prior work
Electronic payments research is vast. Our work follows
a series of paper [19, 18, 12, 15] on the idea of probabilis-
tic payments. Our work improves those papers by remov-
ing or simplifying the trust assumptions and bootstrap re-
quirements for their systems by using a crypto-currency, by
simplifying the cryptographic assumptions needed, and by
demonstrating a practical system in a web-server that im-
plements the protocol. Some of those prior works focus on
reducing the number of digital signatures required by the
protocol: this concern is no longer a bottleneck. Moreover,
none of those scheme focus on how to implement the transfer
(they all require a bank to handle it).
An older form of digital currency is studied in [6, 5, 13].
These schemes rely on digital signatures from a trusted-third
party (such as a bank) to record transfer of ownership of a
coin. Various (online and oﬀ-line) methods are considered
to prevent double-spending attacks. The schemes are not
optimized for handling micropayments, and the economics
of the scheme do not depart from the economics of current
credit-card or ACH network based transactions.
In some
cases, the schemes oﬀer a level of anonymity not provided
by credit-cards etc.
Coupon-based schemes [10, 1, 17] are similar and require
a trusted-party to issue coupons to users, then users spend
these coupons with merchants, who then return the coupon
to the trusted-party. The main focus for this line of research
was to optimize the cryptographic operations that were nec-
essary; today, these concerns are not relevant as we show in
our evaluation section (see §4). Furthermore, these schemes
have double-spending problems and require a trusted-party
to broker all transactions and issue and collect coupons.
A few recent works discuss lotteries and Bitcoin, but none
focus on reducing transaction costs or allowing a single setup
to issue micropayments to an unlimited number of mer-
chants. Andrychowicz et al. [2] implement Bitcoin lotteries
using O(n) or O(n2) ledger transactions per lottery where n
is the number of players. Bentov and Kumaresan [3] discuss
UC modeling and achieving fairness in secure computation
by providing an abstract description of how to enforce penal-
ties with Bitcoin through a novel “ladder mechanism” that
uses O(n) transactions per penalty. In contrast, the main
idea in our work is to amortize 2-3 transaction fees over
thousands of lottery protocol instances.
The goal of Mixcoin [4] is anonymity, and with this dif-
ferent motivation (see its footnote 12), the paper describes
how to charge for mixing in a probabilistic way. Their mech-
anism diﬀers in that it uses a random beacon, i.e. a public
trusted source of randomness for the lottery, which does not
work for micropayments.
As mentioned, the Bitcoinj project (see https://bitcoinj.
github.io/working-with-micropayments) enables setting
up a micropayment channel to a single predetermined mer-
chant (e.g., a single webpage), by establishing a new address
for the merchant, so this scheme falls short of our goal of one
decentralized payment system where users can make micro-
payments to anyone.
1.2 Outline of the paper
In Section 2 we provide a detailed description of our pro-
tocol in an abstract crypto-currency scheme. This model
leaves out many of the implementation details behind the
currency protocol but enables describing our solution in a
convenient way; in essence, this abstract model captures the
principles underlying all modern ledger-based transactional
systems (such as bitcoin and all alt-coins). In Section 3 we
next describe how to implement the abstract solution us-
ing the actual Bitcoin scripting language and formalism. In
Section 4 we describe our implementation and present ex-
periments to demonstrate the practical feasibility of our MI-
CROPAY2 solution. In particular, we report on the above
mentioned “ad-free internet” application.
2092. PROTOCOLS
2. c = Com(r1; s),
Abstract Model for Crypto-currencies.
A cryptocurrency system provides for a way to implement
a distributed ledger specifying how coins are transferred; we
here ignore how miners are incentivized to ensure that the
ledger is available and not manipulated. We will, however,
be concerned about how coins are transferred. Very roughly
speaking, transactions are associated with a public-key pk
and a “release condition” Π. A transaction from an address
a1 = (pk, Π) to an address a2 = (pk(cid:48), Π(cid:48)) is valid if it speci-
ﬁes some input x that satisﬁes the release condition Π, when
applied to both applied to a1 and a2; that is Π(x, a1, a2) = 1.
The most “standard” release condition Πstd is one where a
transaction is approved when x is a signature with respect to
the public key pk on a2; that is, pk is a public-key for a sig-
nature scheme, the “owner” of the address has the secret key
for this signature scheme (w.r.t. pk), and anyone with the se-
cret key for this signature scheme can transfer bitcoins from
the address by signing the destination address. The bitcoin
protocol speciﬁes a restrictive script language for describing
the release condition Π; see Section 3 for more details on
this script language. In this section, we ignore the concrete
formalism of the scripting language and instead describe our
solutions in prose.
2.1 MICROPAY 1
We ﬁrst provide a solution that uses a release condition
Π that does not require any third party at all, but cur-
rently cannot be implemented in the bitcoin scripting lan-
guage. However, it can be directly implemented in crypto-
currencies using more expressive script languages, such as
Ethereum [7].
The only cryptographic primitive that we rely on (apart
from digital signatures) is that of a commitment scheme (see
[11] for details) which can be implemented with any hash
operation such as sha or ripemd; both are supported in
most crypto-currency scripting languages.
Escrow Set-up: To initialize a “lottery-ticket”, a user U
with a = (pk, Πstd) containing 100X coins generates a
new key-pair (pkesc, skesc) and transfers the 100X coins
to an escrow address aesc = (pkesc, Πesc) (by signing
(a, aesc) using its key corresponding to pk). For easy
of exposition, we postpone specifying the release con-
dition Πesc.
Payment Request: Whenever a merchant M wants to
request a payment of X from U , it picks a random
number r1 ← {0, 1}128, generates a commitment c ←
Com(r1; s) (where s represents the string that can be
used to open/reveal the commitment), generates a new
bitcoin address a2 (to which the payment should be
sent) and sends the pair (c, a2) to the payer U .
Payment Issuance: To send a probabilistic payment of
X, user U picks a random string r2, creates a signa-
ture σ on c, r2, a2 (w.r.t. to pkesc) and sends σ to the
merchant. The merchant veriﬁes that the signature is
valid.
We now return to specifying the release condition Πesc.
Deﬁne Πesc(x, aesc, a2) = 1 if and only if
1. x can be parsed as x = (c, r1, s, r2, σ)
3. σ is a valid signature on (c, r2, a2) with respect to the
public key pkesc and
4. if the ﬁrst 2 digits of r1 ⊕ r2 are 00.
In other words, the merchant can ensure a transfer from the
escrow address to a2 happens if it correctly generated the
commitment c (and knows the decommitment information
r1, s), and then sent c, a2 to U ; U agreed to the transaction
(by providing a valid signature on c, r2, a2), AND it “won”
the lottery using r1 ⊕ r2 as randomness.
Security Analysis.
It can be shown using standard arguments that the “coin-
tossing” r1⊕r2 cannot be biased (by more than an negligible
amount) by either the merchant or the user (if the merchant
can bias it, it can either break the binding property of the
commitment, or forge a signature; if the user can bias it,
it can break the hiding property of the commitment.) As
a consequence, whenever the user agrees to a transaction,
the merchant has a 1/100 (plus/minus a negligible amount)
chance of getting a witness which enables it to release the
money in the escrow address. More precisely, the following
properties hold:
• [P1] Consider some potentially malicious user that
correctly signs a transaction with non-negligible prob-
ability. Then, conditioned on the event that the user
produces an accepting signature on a transaction, the
merchant receives a witness for the escrow address with
probability at least 1/100 (minus a negligible amount)
as long as the merchant honestly follows the protocol.
• [P2] Even if the merchant is arbitrarily malicious, it
cannot receive a witness for the escrow address with
probability higher than 1/100 (plus a negligible amount),
as long as the user honestly follows the protocol.
2.2 MICROPAY2: Using a VTS
MICROPAY1 requires using a release condition Πesc that
uses two operations that currently are not supported in the
bitcoin scripting language. First, while digital signatures are
supported in the script language, the language only permits
checking the validity of signatures on messages derived from
the current transaction in a very speciﬁc way; the checksig
operation does not directly allow signature veriﬁcation on
messages of the form that we use in the protocol. A second
problem is that arithmetic operations can only be applied
to 32-bit values. In Section 3.2, we describe some minimal
changes to the bitcoin scripting language that can allow the
MICROPAY1 scheme to be implemented.
To overcome both issues without modifying the Bitcoin
scripting language, we present a scheme that uses a (partially-
trusted) third party T , which we refer to as a Veriﬁable
Transaction Service (VTS. T ’s only task will be to verify
certain simple computations and, if the computations are
correct, will release a signature on a transaction. If T ever
signs a transaction that corresponds to an incorrect compu-
tation, there is irrefutable evidence that (unless the signa-
ture scheme is broken) T “cheated” (or has been corrupted),
and so T can be legally punished and/or replaced.
(To
achieve greater robustness against corruption of T , we can
generalize the solution to use multiple parties T1, T2, . . . Tn,
210and only require that a majority of them correctly check the
computations.)
MICROPAY2 follows the structure of MICROPAY1 with
the key diﬀerence being that we use a diﬀerent release script
˜Πesc. This new release condition will require two signatures
on a transaction (i.e. a multi-signature), one from the user,
and one from the trusted party T . Roughly speaking, U
will always provide M a signature, and in case of a winning
ticket, T will verify that the lottery ticket was winning and
then provide a second signature to release the transaction
to M . That is, ˜Πesc((σ1, σ2), aesc, a2) = 1 if and only if σ1
is a signature of the transaction (aesc, a2) with respect to
pkesc and σ2 is a signature of the transaction (aesc, a2) with
respect to pkT , where pkT is T ’s permanent public key.
In more details, the system involves the following steps:
• Escrow Set-up: To initialize a “lottery-ticket”, a user
U with an address a = (pk, Πstd) containing X bitcoins
generates a new key-pair (pkesc, skesc) and transfers the
X bitcoins to an “escrow” address aesc = (pkesc, ˜Πesc)
(by signing (a, aesc) using its key corresponding to pk).
• Payment Request: This step is identical to the one
in MICROPAY1: Whenever a merchant M wants to
request a payment of X/100 from U , it picks a random
number r1 ← {0, 1}128, generates a commitment c =
Com(r1; s) (where s represents the string that can be
used to open/reveal the commitment), generates a new
bitcoin address a2 (to which the payment should be
sent) and sends the pair (c, a2) to the payer U .
• Payment Issuance: If the user U agrees to send a
probabilistic payment pay X/100, it picks a random
string r2, creates 1) a signature σ1 on the transaction
(aesc, a2), and 2) a signature σ on (c, r2, a2) (w.r.t. to
pkesc), and sends σ1, σ to the merchant M . The mer-
chant veriﬁes that the signatures are valid.
• Claim Prize: If merchant M has received a winning
lottery ticket, then M sends T the triple (x, aesc, a2). T
computes a signature σT on the transaction (aesc, a2)
using public key pkT and sends it to M if and only
if x = (c, r1, s, r2, σ), c = Com(r1; s), σ is a valid
signature on (c, r2, a2) w.r.t. pkesc, and the last 2 digits
of r1 ⊕ r2 are 00.
Furthermore, T publishes the tuple x (either on its
own bulletin board, on the blockchain, or some other
“alt-chain”). If T ever signs (aesc, a2) without having
made public a “witness” x, it is deemed faulty. T ’s only
job is to verify whether a lottery ticket is “winning”
and if so agree to transfer the money to the merchant;
additionally, whenever it agrees to such a transfer, it
needs to publish a witness that enables anyone to check
that its action was correctly performed.
Finally, once M has received the signature σT from T ,
then M can spend aesc to address a2 (which it controls)
using σ1, σT to satisfy the release condition ˜Πesc.
Security Analysis.
The following claims can be easily veriﬁed using standard
cryptographic techniques:
• If T acts honestly, then properties P1 and P2 from
Section 2.1 hold.
• If T deviates from its prescribed instructions, then (a)
except with negligible probability, this can be publicly
veriﬁed, and (b) the only damage it can create is to
bias the probability that the escrow is released in an
otherwise approved transaction.
By the second claim, T can never “steal” the escrow money.
By cheating, it can only transfer the money to a merchant
(even for a losing lottery ticket), but only to a merchant to
whom the user agreed to issue a (micropayment) transac-
tion. Additionally, by cheating, it can withhold a payment
for a merchant. By the ﬁrst claim, if T performs either of
these (cheating) actions, this can be noticed.
Fast Validation Times.
We ﬁnally remark that if T only agrees to sign the escrow
release once, MICROPAY2 implements fast transaction vali-
dation times. That is, merchants can be assured that as long
as the T is acting honestly, as soon as they receive back a
signature from T , they will receive their payment (without
having to wait 10 minutes for the transaction to appear on
the block-chain). Furthermore, if the VTS is acting dishon-
estly (i.e., if it signs multiple times), this will be observed.
(Additionally, using a standard approach, our protocol can
be slightly modiﬁed to ensure that the user can always re-
cover its money from the escrow within some pre-determined