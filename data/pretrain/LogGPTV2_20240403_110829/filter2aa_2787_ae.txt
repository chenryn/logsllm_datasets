  2157977620,
  1084236480,
  2156143475,
  2322342963,
  2157978900,
  1255418048,
  2333354355,
  2335451699,
  2157980436,
  1084239600,
  2339778467,
  2157981828,
  1290416352,
  1084240304,
  1084240704,
  2346464931,
  117455492,
  1272986272,
  2353806435,
  130039668,
  1280327568,
  1084245232,
  1084246640,
  1084247120,
  1084247600,
  1084248080,
  1084248848,
  1084250192,
  1084250448,
  1084250976,
  1084251792,
  1084252688,
  1084253952,
  0
]
base_addr = 0x7FF638907970
patch_table = {
    0: {
        0: [0xeb],
subkeysIDEAXTEAkey
        1: [0xe9]
    },
    1: {
        0: [0x7e],
        2: [0x0f, 0x8e]
    },
    2: {
        0: [0x7f],
        2: [0x0f, 0x8f]
    },
    3: {
        0: [0x74],
        2: [0x0f, 0x84]
    },
    4: {
        0: [0x75],
        2: [0x0f, 0x85]
    },
}
for i in range(63):
    a = tql[i]
    jmp_type = a & 0xF
    src_addr = (a >> 4) & 0x1FFF
    inst_len =  a >> 30
    dst_addr = (a >> 17) & 0x1FFF
    offset = dst_addr - src_addr
    if (inst_len == 0):
        offset = (offset - 2) & 0xFF
    elif (inst_len == 1):
        offset = (offset - 5) & 0xFFFFFFFF
    else:
        offset = (offset - 6) & 0xFFFFFFFF
    cur = 0
    for byte in patch_table[jmp_type][inst_len]:
        idaapi.patch_byte(base_addr + src_addr + cur, byte)
        cur += 1
    if (inst_len == 0):
        idaapi.patch_byte(base_addr + src_addr + cur, offset)
    else:
        for j in range(4):
            idaapi.patch_byte(base_addr + src_addr + cur, offset & 0xFF)
            cur += 1
            offset >>= 8
#define _CRT_SECURE_NO_WARNINGS
#include 
#include 
#include 
#include "ida.h"
typedef unsigned int uint32_t;
typedef int int32_t;
typedef unsigned short uint16_t;
typedef void (*idea_gen_key)(uint16_t[52], uint16_t[8]);
inline uint32 __ROL4__(uint32 value, int count) { return 
__ROL__((uint32)value, count); }
unsigned char data[32] = { 0x0F, 0xDA, 0x04, 0xD8, 0xD0, 0xAB, 0xF4, 0xE5, 
0x3F, 0xBD,
  0x61, 0x7C, 0x6B, 0x13, 0x7C, 0xC4, 0xF9, 0xA0, 0x54, 0x33,
  0xA7, 0x60, 0x50, 0xDA, 0x20, 0xE2, 0x7E, 0xE1, 0x13, 0x0B,
  0xB2, 0x25 };
unsigned char g_keys[] = {
  0x43, 0x54, 0x46, 0x54, 0x51, 0x5F, 0x41, 0x55, 0x53, 0x4C,
  0x32, 0x5F, 0x32, 0x30, 0x5F, 0x30, 0xBE, 0x8C, 0xAA, 0xA2,
  0x98, 0x82, 0xBE, 0xA6, 0x60, 0x64, 0x60, 0x64, 0xA8, 0xBE,
  0xA8, 0x86, 0x05, 0x55, 0x4D, 0x31, 0xC8, 0x7C, 0xC8, 0xC0,
  0x7D, 0xC1, 0x0D, 0x51, 0x19, 0x51, 0x45, 0x7D, 0xF9, 0x9A,
  0x81, 0x91, 0x82, 0x91, 0xA2, 0xFA, 0xA2, 0x1A, 0xFA, 0x32,
  0xAA, 0x8A, 0x62, 0x0A, 0x23, 0x03, 0xF5, 0x05, 0x35, 0x44,
  0x65, 0x44, 0x15, 0xF5, 0x14, 0x54, 0x35, 0xC5, 0x23, 0xF3,
  0x88, 0xEA, 0x88, 0x6A, 0xEA, 0xCB, 0xA8, 0x2A, 0x8A, 0x29,
  0xE6, 0x6B, 0x06, 0x46, 0x0B, 0x46, 0x97, 0x11, 0x55, 0xD4,
  0x53, 0x50, 0xD7, 0x14, 0x8B, 0x48, 0xAB, 0x2B, 0xAD, 0xAF,
  /*
  0x2A, 0x28, 0x06, 0x46, 0x0B, 0x46, 0x3B, 0xF7, 0x76, 0xD6,
  0x58, 0xD5, 0x2F, 0xDD, 0x88, 0xEA, 0x88, 0x6A, 0xAC, 0xF7,
  0xCB, 0x3A, 0xEC, 0xAB, 0x4A, 0x2B, 0x35, 0x44, 0x65, 0x44,
  0x61, 0xB9, 0xDD, 0xFC, 0x9E, 0xF5, 0x0F, 0x65, 0xA2, 0x1A,
  0xFA, 0x32, 0x4F, 0xC4, 0x7E, 0x6E, 0x7F, 0x6E, 0x3F, 0x12,
  0x19, 0x51, 0x45, 0x7D, 0x6A, 0x47, 0x83, 0x3E, 0x38, 0x3F,
  0xC5, 0x9A, 0x05, 0x55, 0x4D, 0x31, 0x11, 0x6C, 0x58, 0x41,
  0xA0, 0x9B, 0xBD, 0x8C, 0x98, 0x82, 0xBE, 0xA6, 0xE7, 0x5A,
  0x42, 0x73, 0xA1, 0xCF, 0x95, 0x43,
  */
  //0x53, 0x4C, 0x32, 0x5F, 
  //0xD4, 0xBD, 0xBA, 0xAB, 0xAF, 0xA0, 0x21, 0x04
};
uint16_t mulMod65537(uint16_t a, uint16_t b)
{
    uint32_t c;
    uint16_t hi, lo;
    if (a == 0)
        return -b + 1;
    if (b == 0)
        return -a + 1;
    c = (uint32_t)a * (uint32_t)b;
    hi = c >> 16;
    lo = c;
    if (lo > hi)
        return lo - hi;
    return lo - hi + 1;
}
int modInverse(int a, int m)
{
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;
    if (m == 1)
        return 0;
    while (a > 1)
    {
        // q is quotient
        q = a / m;
        t = m;
        // m is remainder now, process same as
        // Euclid's algo
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    // Make x1 positive
    if (x1 > 7);
        else if (i % 8 == 7)
            subKey[i] = (subKey[i - 15] > 7);
        else
            subKey[i] = (subKey[i - 7] > 7);
    }
}
void decrypt(uint16_t subKey[52], uint16_t key[8])
{
    int i;
    uint16_t K[52];
    // Compute encryption keys
    encrypt(K, key);
    // Generate dencryption keys
    subKey[0] = modInverse(K[48], 65537);
    subKey[1] = -K[49];
    subKey[2] = -K[50];
    subKey[3] = modInverse(K[51], 65537);
    // printf("Keys: %04X %04X %04X %04X\n", subKey[0], subKey[1], subKey[2], 
subKey[3]);
    for (i = 4; i < 52; i += 6)
    {
        subKey[i + 0] = K[52 - i - 2];
        subKey[i + 1] = K[52 - i - 1];
        subKey[i + 2] = modInverse(K[52 - i - 6], 65537);
        if (i == 46) {
            subKey[i + 3] = -K[52 - i - 5];
            subKey[i + 4] = -K[52 - i - 4];
        }
        else {
            subKey[i + 3] = -K[52 - i - 4];
            subKey[i + 4] = -K[52 - i - 5];
        }
        subKey[i + 5] = modInverse(K[52 - i - 3], 65537);
        // printf("Keys: %04X %04X %04X %04X %04X %04X\n", subKey[i], subKey[i 
+ 1], subKey[i + 2], subKey[i + 3], subKey[i + 4], subKey[i + 5]);
    }
}
void IDEA(uint16_t data[4], uint16_t key[8], idea_gen_key func)
{
    int i;
    uint16_t subKey[52];
    // Generate keys
    func(subKey, key);
    uint16_t X0;
    uint16_t X1;
    uint16_t X2;
    uint16_t X3;
    if (func == decrypt) {
        X0 = _byteswap_ushort(data[0]);
        X1 = _byteswap_ushort(data[1]);
        X2 = _byteswap_ushort(data[2]);
        X3 = _byteswap_ushort(data[3]);
    }
    else {
        X0 = data[0];
        X1 = data[1];
        X2 = data[2];
        X3 = data[3];
    }
    uint16_t tmp1, tmp2;
    // Apply 8 rounds
    for (i = 0; i < 8; i++)
    {
        // printf("%d:   %04X %04X %04X %04X\n", i, X0, X1, X2, X3);
        X0 = mulMod65537(X0, subKey[6 * i + 0]);    // Step 1
        X1 += subKey[6 * i + 1];            // Step 2
        X2 += subKey[6 * i + 2];            // Step 3
        X3 = mulMod65537(X3, subKey[6 * i + 3]);    // Step 4
        tmp1 = X0 ^ X2;                 // Step 5
        tmp2 = X1 ^ X3;                 // Step 6
        tmp1 = mulMod65537(tmp1, subKey[6 * i + 4]);  // Step 7
        tmp2 += tmp1;                   // Step 8
        tmp2 = mulMod65537(tmp2, subKey[6 * i + 5]);  // Step 9
        tmp1 += tmp2;                 // Step 10
        X0 ^= tmp2;
        X1 ^= tmp1;
        X2 ^= tmp2;
        X3 ^= tmp1;
        // Swap X1 and X2
        tmp1 = X1;
        X1 = X2;
        X2 = tmp1;
    }
    tmp1 = X1;
    tmp2 = X2;
    // Apply the half round
    data[0] = mulMod65537(X0, subKey[6 * i + 0]);
    data[1] = tmp2 + subKey[6 * i + 1];
    data[2] = tmp1 + subKey[6 * i + 2];
    data[3] = mulMod65537(X3, subKey[6 * i + 3]);
    if (func == decrypt) {
        data[0] = _byteswap_ushort(data[0]);
        data[1] = _byteswap_ushort(data[1]);
        data[2] = _byteswap_ushort(data[2]);
        data[3] = _byteswap_ushort(data[3]);
    }
}
__int64 __fastcall sub_140001000(unsigned __int16* a1, __int64 a2, unsigned 
int* a3, unsigned int* dec)
{
    unsigned __int16* v5; // rsi
    int v6; // eax
    int v7; // ebx
    int v8; // eax
    int v9; // ebp
    int v10; // eax
    int v11; // er14
    unsigned __int16 v12; // ax
    unsigned int v0; // er12
    unsigned int v1; // er9
    unsigned int v15; // er10
    __int64 v16; // r8
    int v17; // er15
    __int64 v18; // r11
    int v19; // er8
    int v20; // er15
    int v21; // ecx
    __int64 v22; // rdx
    __int64 v23; // rcx
    unsigned int v24; // ebx
    int v25; // esi
    int v26; // esi
    int v27; // edx
    unsigned int v28; // eax
    unsigned int v29; // er9
    __int64 v30; // rbp
    __int64 v31; // rdx
    unsigned int v32; // ecx
    int v33; // er13
    int v34; // edx
    int v35; // er15
    unsigned int v36; // er10
    int v37; // edi
    int v38; // edx
    __int64 v39; // r9
    __int64 v40; // r8
    unsigned int v41; // ebp
    int v42; // esi
    int v43; // edx
    unsigned int v44; // er15
    unsigned int v45; // edi
    unsigned __int32 v46; // ebx
    int v47; // esi
    unsigned int v48; // ebx