# MACE: Detecting Privilege Escalation Vulnerabilities in Web Applications

## Authors
- Maliheh Monshizadeh, Department of Computer Science, University of Illinois at Chicago, Chicago, IL, USA. Email: [PI:EMAIL]
- Prasad Naldurg, IBM Research India, Bangalore, India. Email: [PI:EMAIL]
- V. N. Venkatakrishnan, Department of Computer Science, University of Illinois at Chicago, Chicago, IL, USA. Email: [PI:EMAIL]

## Abstract
We address the challenge of identifying unauthorized privilege escalation vulnerabilities in web applications. These vulnerabilities often arise from missing or incorrect authorization checks in the server-side code. The problem is exacerbated by the lack of a formal access control policy specification, with the only documentation being the source code itself. This makes it difficult to infer the necessary authorization checks to protect sensitive resources.

To tackle this issue, we introduce the concept of **authorization context consistency**, which is satisfied when a web application consistently enforces its authorization checks across different code paths. We then present a program analysis-based approach to check for authorization context consistency. Our approach is implemented in a tool called MACE, which uncovers vulnerabilities that can be exploited through privilege escalation attacks. MACE is the first tool to identify a new class of web application vulnerabilities known as **Horizontal Privilege Escalation (HPE)** vulnerabilities. 

MACE has been tested on large codebases and has discovered serious, previously unknown vulnerabilities in 5 out of 7 web applications. Without MACE, a comparable human-driven security audit would require weeks of effort in code inspection and testing.

## Categories and Subject Descriptors
- D.2.4 [Software Engineering]: Software/Program Verification
- D.2.8 [Access Control]: Metricsâ€”Software Engineering

## General Terms
- Security, Languages

## Keywords
- Access Control, Web Security, Authorization

## 1. Introduction
Web applications are critical components of modern societies, driving e-commerce, social networking, and financial services. Their open nature and widespread deployment make them attractive targets for attackers seeking to gain unauthorized access to user data and resources. Therefore, ensuring the security of web applications is paramount.

Web applications typically implement access control (or authorization) policies to protect against such threats. An authorization check verifies whether an authenticated user with a specific role has the required privileges to access a given resource, such as a database table. However, several high-profile data breaches have been caused by authorization errors in web applications. For example, the Citibank data breach resulted in the theft of over 360,000 credit card numbers. A recent Cenzic technical report found that authorization vulnerabilities occurred in 56% of the applications tested in 2013.

There are several reasons why authorization errors are common:
1. **Lack of Built-in Support**: Unlike conventional operating systems, web applications (e.g., those written in PHP) do not come with built-in support for access control. Developers must manually code the access control policy, often leading to errors.
2. **Complexity and Inconsistency**: Web applications often connect directly to the database as a superuser, and any flaws in the authorization logic can lead to catastrophic data breaches. Additionally, developers may implement roles inconsistently due to the lack of a standard framework and limited knowledge of access control design.

Despite existing solutions like virtual private databases and web application frameworks, many web applications are still developed in languages like ASP, Java, and PHP, where the responsibility for access control falls on the developers.

In this paper, we focus on the problem of identifying authorization errors in existing web applications. This is particularly challenging for open-source web applications with minimal documentation. Manual inspection of the source code to uncover the access control policy is time-consuming and error-prone. Therefore, automated solutions are desirable.

Our approach focuses on detecting inconsistencies in how authorization checks are enforced across different code paths, rather than trying to uncover the intended access control policy. We define a notion of **authorization context** and develop algorithms to compute and check for authorization context consistency. These algorithms are implemented in MACE, which can detect both vertical and horizontal privilege escalation vulnerabilities.

## 2. Running Example
To illustrate the key aspects of the authorization problem, we use an extended example of a blog application. The application allows registered users to insert, edit, delete, or comment on blog articles. There are two roles: admin and user. Admins have control over all posts, while users can only manage their own posts and comment on others.

### Secure Implementation
- **Listing 1: verifyUser.php**
  ```php
  function verifyUser(){
     if(!isset($_SESSION['userID']))
         header('Location: /login.php');
     else $userID = $_SESSION['userID'];
     return;
  }
  ```

- **Listing 2: insert.php**
  ```php
  verifyUser();
  if($permission['canWrite'] && $action == 'insert')
      query("INSERT INTO tbl_articles VALUES (sanit($_GET['article_code']), $_SESSION['userID'], sanit($_GET['article_msg']))");
  ```

- **Listing 3: delete.php**
  ```php
  verifyUser();
  if($permission['canWrite'] && $action == 'delete')
      query("DELETE FROM tbl_articles WHERE article_ID = '" + sanit($_GET['article_ID']) + "' and author_ID = '" + $userID + "'");
  else if($_SESSION['userLevel'] == 'Admin' && $action == 'deleteAll')
      query("DELETE FROM tbl_articles");
  ```

### Vulnerable Implementations
- **Listing 4: delete1.php (No Authorization Check)**
  ```php
  if($action == 'delete')
      query("DELETE FROM tbl_articles WHERE article_ID = '" + sanit($_GET['article_ID']) + "'");
  ```

- **Listing 5: delete2.php (Improper Permissions)**
  ```php
  verifyUser();
  if($action == 'delete')
      query("DELETE FROM tbl_articles WHERE article_ID = '" + sanit($_GET['article_ID']) + "'");
  ```

- **Listing 6: delete3.php (Improper Delete-All)**
  ```php
  verifyUser();
  if($permission['canWrite'] && $action == 'deleteAll')
      query("DELETE FROM tbl_articles");
  ```

- **Listing 7: delete4.php (Improper Delete)**
  ```php
  verifyUser();
  if($permission['canWrite'] && $action == 'delete')
      query("DELETE FROM tbl_articles WHERE article_ID = '" + sanit($_GET['article_ID']) + "'");
  ```

The last two examples highlight the types of privilege escalation vulnerabilities:
- **Listing 6 (Vertical Privilege Escalation - VPE)**: An ordinary user can assume admin privileges.
- **Listing 7 (Horizontal Privilege Escalation - HPE)**: An ordinary user can assume the privileges of any other ordinary user.

## 3. Approach
To ensure the correctness of a web application's authorization, one must examine each sensitive operation (e.g., SQL queries) and the associated authorization information. The running example demonstrates potential issues, including the absence of authorization checks, improper ownership or privileges, and untrusted session variables.

### Authorization State
Ideally, applications should have a well-defined policy manifest specifying the authorizations granted to users, considering the session context. However, this is often not explicit. The best understanding of the access policy is derived from the operating context of each access request in the implementation. For each access request, we define the **authorization context** as a four-tuple \( \langle U, R, S, P \rangle \), where:
- \( U \) is the user,
- \( R \) is the role,
- \( S \) is the session context,
- \( P \) is the permission.

Our approach involves defining and checking for **authorization context consistency**. When there is a mismatch in authorization contexts along different code paths, we flag it as a potential access control violation.

### Algorithms
We develop algorithms for computing authorization contexts and checking for consistency. These algorithms use various program analysis techniques, including control flow analysis, data flow analysis, and symbolic evaluation. MACE is bootstrapped by a small set of annotations provided by the vulnerability analyst, and we show that the effort for providing these annotations is minimal.

## 4. Implementation and Challenges
We discuss the implementation details and challenges of MACE, including the integration of different program analysis techniques and the handling of complex web applications.

## 5. Results
We demonstrate the effectiveness of MACE by testing it on a large number of open-source codebases. MACE detected both horizontal and vertical privilege escalations in 5 out of 7 web applications tested. Without MACE, a security audit would require manual inspection of hundreds of thousands of lines of code.

## 6. Related Work
We review related work in the field of web application security and access control, highlighting the unique contributions of MACE.

## 7. Conclusion
We summarize our contributions and discuss future directions for research in the area of web application security and access control.

---

This optimized version of your text is more structured, clear, and professional, making it easier to read and understand.