[2] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa, and Miguel Castro.
2008. Preventing Memory Error Exploits with WIT. In Proceedings of the 2008
IEEE Symposium on Security and Privacy. 263‚Äì277.
[3] Emery D. Berger and Benjamin G. Zorn. 2006. DieHard: Probabilistic Memory
Safety for Unsafe Languages. In Proceedings of the 2006 ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI). Ottawa, Canada.
[4] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazi√®res, and Dan Boneh.
2014. Hacking blind. In Proceedings of the 35th IEEE Symposium on Security and
Privacy (Oakland). San Jose, CA.
[5] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-
Oriented Programming: A New Class of Code-Reuse Attack. In Proceedings of
the 6th ACM Symposium on Information, Computer and Communications Security
(ASIACCS). Hong Kong, China, 30‚Äì40.
[6] Nathan Burow, Scott A Carr, Joseph Nash, Per Larsen, Michael Franz, Stefan
Brunthaler, and Mathias Payer. 2017. Control-flow integrity: Precision, security,
and performance. ACM Computing Surveys (CSUR) 50, 1 (2017), 16.
[7] Nathan Burow, Derrick McKee, Scott A. Carr, and Mathias Payer. 2018. CFIXX:
Object Type Integrity for C++ Virtual Dispatch. In Proceedings of the 2018 Annual
Network and Distributed System Security Symposium (NDSS). San Diego, CA.
[8] Nathan Burow, Xinping Zhang, and Mathias Payer. 2019. SoK: Shining Light
on Shadow Stacks. In Proceedings of the 40th IEEE Symposium on Security and
Privacy (Oakland). San Francisco, CA.
[9] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R
Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow In-
tegrity. In Proceedings of the 24th USENIX Security Symposium (Security). Wash-
ington, DC.
[10] Scott A. Carr and Mathias Payer. 2017. DataShield: Configurable Data Confi-
dentiality and Integrity. In Proceedings of the 2017 ACM on Asia Conference on
Computer and Communications Security. 193‚Äì204.
[11] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing Software by
Enforcing Data-flow Integrity. In Proceedings of the 7th USENIX Symposium on
Operating Systems Design and Implementation (OSDI). Seattle, WA, 147‚Äì160.
[12] Yueqiang Cheng, Zongwei Zhou, Yu Miao, Xuhua Ding, and Robert H Deng.
2014. ROPecker: A generic and practical approach for defending against ROP
attack. In Proceedings of the 2014 Annual Network and Distributed System Security
Symposium (NDSS). San Diego, CA.
[13] Catalin Cimpanu. 2019. Microsoft: 70 percent of all security bugs are mem-
ory safety issues. https://www.zdnet.com/article/microsoft-70-percent-of-all-
security-bugs-are-memory-safety-issues/.
[14] R. Joseph Connor, Tyler McDaniel, Jared M. Smith, and Max Schuchard. 2020.
PKU Pitfalls: Attacks on PKU-based Memory Isolation Systems. In 29th USENIX
Security Symposium (USENIX Security 20). USENIX Association, 1409‚Äì1426. https:
//www.usenix.org/conference/usenixsecurity20/presentation/connor
[15] Thurston H.Y. Dang, Petros Maniatis, and David Wagner. 2017. Oscar: A Practical
Page-Permissions-Based Scheme for Thwarting Dangling Pointers. In Proceedings
of the 26th USENIX Security Symposium (Security). Vancouver, BC, Canada.
[16] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014.
Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow
Integrity Protection.. In Proceedings of the 23rd USENIX Security Symposium
(Security). San Diego, CA.
[17] Dhaval Kapil. 2019. Unlink Exploit. https://heap-exploitation.dhavalkapil.com/
attacks/unlink_exploit.html.
[18] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim, and Wenke
Lee. 2017. Efficient protection of path-sensitive control security. In Proceedings of
the 26th USENIX Security Symposium (Security). Vancouver, BC, Canada, 131‚Äì148.
[19] Dongliang Mu. 2018. CVE-2015-8668. cve-2015-8668-exploit.
[20] Doug Lea. 2000. A Memory Allocator. http://gee.cs.oswego.edu/dl/html/malloc.
html.
[21] Moritz Eckert, Antonio Bianchi, Ruoyu Wang, Yan Shoshitaishvili, Christopher
Kruegel, and Giovanni Vigna. 2018. HeapHopper: Bringing Bounded Model
Checking to Heap Implementation Security. In Proceedings of the 27th USENIX
Security Symposium (Security). Baltimore, MD.
[22] Chris Evans. 2014.
The poisoned NUL byte, 2014 edition.
//googleprojectzero.blogspot.com/2014/08/the-poisoned-nul-byte-2014-
edition.html.
https:
[23] Isaac Evans, Sam Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany Tang,
Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed Okhravi.
2015. Missing the point (er): On the effectiveness of code pointer integrity. In
Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland). San
Jose, CA.
[24] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howard Shrobe, Martin Rinard,
Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control Jujutsu: On
the Weaknesses of Fine-Grained Control Flow Integrity. In Proceedings of the
22nd ACM Conference on Computer and Communications Security (CCS). Denver,
Colorado, 901‚Äì913.
[25] Forum of Incident Response and Security Teams, Inc. 2020. Common Vulnerability
Scoring System version 3.1 Examples Revision 1. https://www.first.org/cvss/v3-
1/cvss-v31-examples_r1.pdf.
[26] Forum of Incident Response and Security Teams, Inc. 2020. Common Vulnerability
Scoring System version 3.1 Specification Document Revision 1. https://www.
first.org/cvss/v3-1/cvss-v31-specification_r1.pdf.
[27] Tommaso Frassetto, Patrick Jauernig, Christopher Liebchen, and Ahmad-Reza
Sadeghi. 2018. IMIX: in-process memory isolation extension. In Proceedings of
the 27th USENIX Conference on Security Symposium. USENIX Association, 83‚Äì97.
[28] Free Software Foundation. 2019. MallocInternals - glibc wiki. https://sourceware.
org/glibc/wiki/MallocInternals.
[29] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. Griffin: Guarding control
flows using intel processor trace. In Proceedings of the 22nd ACM International
Conference on Architectural Support for Programming Languages and Operating
Systems (ASPLOS). Xi‚Äôan, China.
[30] Will Glozer. 2019. a HTTP benchmarking tool. https://github.com/wg/wrk.
[31] Enes G√∂ktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014.
Out of control: Overcoming control-flow integrity. In Proceedings of the 35th IEEE
Symposium on Security and Privacy (Oakland). San Jose, CA.
[32] Enes G√∂kta≈ü, Robert Gawlik, Benjamin Kollenda, Elias Athanasopoulos, Georgios
Portokalidis, Cristiano Giuffrida, and Herbert Bos. 2016. Undermining Informa-
tion Hiding (and What to Do about It). In Proceedings of the 25th USENIX Security
Symposium (Security). Austin, TX.
[33] Google. [n.d.]. TCMalloc. https://google.github.io/tcmalloc/.
[34] Jens Grossklags and Claudia Eckert. 2018. ùúèCFI: Type-Assisted Control Flow
Integrity for x86-64 Binaries. In Proceedings of the 21th International Symposium
on Research in Attacks, Intrusions and Defenses (RAID). Heraklion, Crete, Greece.
[35] Yufei Gu, Qingchuan Zhao, Yinqian Zhang, and Zhiqiang Lin. 2017. PT-CFI:
Transparent backward-edge control flow violation detection using intel processor
trace. In Proceedings of the 7th ACM Conference on Data and Application Security
and Privacy (CODASPY). Scottsdale, AZ.
[36] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R.
Harris, Taesoo Kim, and Wenke Lee. 2018. Enforcing Unique Code Target Property
for Control-Flow Integrity. In Proceedings of the 25th ACM Conference on Computer
and Communications Security (CCS). Toronto, ON, Canada.
[37] Intel. 2020.
Intel CET Answers Call to Protect Against Common Malware
Threats. https://newsroom.intel.com/editorials/intel-cet-answers-call-protect-
common-malware-threats.
[38] Intel Corporation. 2019. Control-flow Enforcement Technology Specification Re-
vision 3.0. https://software.intel.com/sites/default/files/managed/4d/2a/control-
flow-enforcement-technology-preview.pdf.
[39] Intel Corporation. 2019. Intel 64 and IA-32 Architectures Software Developer‚Äôs
Manual. https://software.intel.com/en-us/articles/intel-sdm.
[40] Jonathan Corbet. 2004. x86 NX support. https://lwn.net/Articles/87814/.
[41] Mustakimur Khandaker, Abu Naser, Wenqing Liu, Zhi Wang, Yajin Zhou, and
Yueqiang Cheng. 2019. Adaptive Call-site Sensitive Control Flow Integrity. In
2019 IEEE European Symposium on Security and Privacy (EuroS&P). IEEE, 95‚Äì110.
[42] Mustakimur Rahman Khandaker, Wenqing Liu, Abu Naser, Zhi Wang, and Jie
Yang. 2019. Origin-sensitive Control Flow Integrity. In Proceedings of the 28th
USENIX Security Symposium (Security). Santa Clara, CA.
[43] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuffrida, and Elias Athanasopou-
los. 2017. No Need to Hide: Protecting Safe Regions on Commodity Hardware.
In Proceedings of the 12th European Conference on Computer Systems (EuroSys).
Belgrade, Serbia, 437‚Äì452.
[44] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuffrida, and Elias Athanasopou-
los. 2017. No Need to Hide: Protecting Safe Regions on Commodity Hardware.
In Proceedings of the 2017 European Conference on Computer Systems. 437‚Äì452.
[45] Volodymyr Kuznetsov, L√°szl√≥ Szekeres, Mathias Payer, George Candea, R Sekar,
and Dawn Song. 2014. Code-Pointer Integrity. In Proceedings of the 11th USENIX
Session 5D: Misc: Android and Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1625Symposium on Operating Systems Design and Implementation (OSDI). Broomfield,
Colorado.
[46] Yuan Li, Mingzhe Wang, Chao Zhang, Xingman Chen, Songtao Yang, and Ying
Liu. 2020. Finding Cracks in Shields: On the Security of Control Flow Integrity
Mechanisms. In Proceedings of the 2020 ACM SIGSAC Conference on Computer
and Communications Security. 1821‚Äì1835.
[47] Yutao Liu, Peitao Shi, Xinran Wang, Haibo Chen, Binyu Zang, and Haibing
Guan. 2017. Transparent and efficient CFI enforcement with intel processor
trace. In Proceedings of the 23rd IEEE Symposium on High Performance Computer
Architecture (HPCA). Austin, TX.
[48] Microsoft Support. 2017. A detailed description of the Data Execution Prevention
(DEP) feature in Windows XP Service Pack 2, Windows XP Tablet PC Edition 2005,
and Windows Server 2003. https://support.microsoft.com/en-us/help/875352/a-
detailed-description-of-the-data-execution-prevention-dep-feature-in.
[49] Santosh Nagarakatte, Milo MK Martin, and Steve Zdancewic. 2015. Everything
you want to know about pointer-based checking. In 1st Summit on Advances in
Programming Languages (SNAPL 2015). Schloss Dagstuhl-Leibniz-Zentrum fuer
Informatik.
[50] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic.
2009. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C.
In Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI). Dublin, Ireland.
[51] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic.
2010. CETS: Compiler Enforced Temporal Safety for C. In Proceedings of the 2010
International Symposium on Memory Management (ISMM). Toronto, Canada.
[52] Nandy Narwhals CTF Team. 2017. CVE-2016-10190 Detailed Writeup. https:
//nandynarwhals.org/cve-2016-10190/.
[53] Nathan Burow. 2018. CFIXX C++ test suite. https://github.com/HexHive/CFIXX/
tree/master/CFIXX-Suite.
[54] Ben Niu and Gang Tan. 2014. Modular control-flow integrity. In Proceedings
of the 2014 ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI). Edinburgh, UK.
[55] Ben Niu and Gang Tan. 2015. Per-input control-flow integrity. In Proceedings
of the 22nd ACM Conference on Computer and Communications Security (CCS).
Denver, Colorado.
[56] Gene Novark and Emery D. Berger. 2010. DieHarder: Securing the Heap. In
Proceedings of the 17th ACM Conference on Computer and Communications Security
(CCS). Chicago, IL, 573‚Äì584.
[57] Angelos Oikonomopoulos, Elias Athanasopoulos, Herbert Bos, and Cristiano
Giuffrida. 2016. Poking Holes in Information Hiding.. In Proceedings of the 25th
USENIX Security Symposium (Security). Austin, TX.
[58] Oleksii Oleksenko, Dmitrii Kuvaiskii, Pramod Bhatotia, Pascal Felber, and Christof
Fetzer. 2018.
Intel MPX Explained: A Cross-layer Analysis of the Intel MPX
System Stack. Proceedings of the ACM on Measurement and Analysis of Computing
Systems (2018).
[59] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2013. Trans-
parent ROP Exploit Mitigation Using Indirect Branch Tracing. In Proceedings of
the 22th USENIX Security Symposium (Security). Washington, DC.
[60] Soyeon Park, Sangho Lee, Wen Xu, Hyungon Moon, and Taesoo Kim. 2019.
Libmpk: Software Abstraction for Intel Memory Protection Keys (Intel MPK). In
Proceedings of the 2019 USENIX Annual Technical Conference (ATC). Renton, WA,
241‚Äì254.
[61] Aravind Prakash, Xunchao Hu, and Heng Yin. 2015. vfGuard: Strict Protection for
Virtual Function Calls in COTS C++ Binaries.. In Proceedings of the 2015 Annual
Network and Distributed System Security Symposium (NDSS). San Diego, CA.
[62] Sergej Proskurin, Marius Momeu, Seyedhamed Ghavamnia, Vasileios P. Kemerlis,
and Michalis Polychronakis. 2020. xMP: Selective Memory Protection for Kernel
and User Space. In Proceedings of the 2020 IEEE Symposium on Security and Privacy.
563‚Äì577.
[63] Qualcomm. 2017.
Pointer Authentication on ARMv8.3.
//www.qualcomm.com/media/documents/files/whitepaper-pointer-
authentication-on-armv8-3.pdf.
https:
[64] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming:
On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In
Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland). San
Jose, CA.
[65] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy
Vyukov. 2012. AddressSanitizer: A fast address sanity checker. In Proceedings of
the 2012 USENIX Annual Technical Conference (ATC). Boston, MA, 309‚Äì318.
[66] @sha0coder. 2014. Python - ‚Äôsocket.recvfrom_into()‚Äô Remote Buffer Overflow.
https://www.exploit-db.com/exploits/31875
[67] Hovav Shacham. 2007. The geometry of innocent flesh on the bone: Return-into-
libc without function calls (on the x86). In Proceedings of the 14th ACM Conference
on Computer and Communications Security (CCS). Alexandria, VA.
[68] SHELLPHISH. 2020. Educational Heap Exploitation.
shellphish/how2heap.
https://github.com/
[69] Sam Silvestro, Hongyu Liu, Corey Crosser, Zhiqiang Lin, and Tongping Liu.
2017. FreeGuard: A Faster Secure Heap Allocator. In Proceedings of the 24th ACM
Conference on Computer and Communications Security (CCS). Dallas, TX.
[70] Sam Silvestro, Hongyu Liu, Tianyi Liu, Zhiqiang Lin, and Tongping Liu. 2018.
Guarder: A Tunable Secure Allocator. In Proceedings of the 27th USENIX Security
Symposium (Security). Baltimore, MD.
[71] Kevin Z Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2013. Just-in-time Code Reuse: On the Effec-
tiveness of Fine-grained Address Space Layout Randomization. In Proceedings of
the 34th IEEE Symposium on Security and Privacy (Oakland). San Francisco, CA.
[72] Chengyu Song, Byoungyoung Lee, Kangjie Lu, William Harris, Taesoo Kim,
and Wenke Lee. 2016. Enforcing Kernel Security Invariants with Data Flow
Integrity.. In Proceedings of the 2016 Annual Network and Distributed System
Security Symposium (NDSS). San Diego, CA.
[73] Chengyu Song, Hyungon Moon, Monjur Alam, Insu Yun, Byoungyoung Lee,
Taesoo Kim, Wenke Lee, and Yunheung Pack. 2016. HDFI: Hardware-Assisted
Data-flow Isolation. In Proceedings of the 37th IEEE Symposium on Security and
Privacy (Oakland). San Jose, CA.
[74] The Clang Team. 2019. Clang 10 documentation: CONTROL FLOW INTEGRITY.
https://clang.llvm.org/docs/ControlFlowIntegrity.html.
[75] The Clang Team. 2019. Clang 10 documentation: SAFESTACK. https://clang.
llvm.org/docs/SafeStack.html.
[76] The PostgreSQL Global Development Group. 2020. pgbench: PostgreSQL Client
Applications . https://www.postgresql.org/docs/current/pgbench.html.
[77] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, √ölfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity in GCC & LLVM. In Proceedings of the 23rd USENIX Security
Symposium (Security). San Diego, CA.
[78] Anjo Vahldiek-Oberwagner, Eslam Elnikety, Nuno O Duarte, Michael Sammler,
Peter Druschel, and Deepak Garg. 2019. ERIM: Secure, Efficient In-process
Isolation with Protection Keys (MPK). In Proceedings of the 28th USENIX Security
Symposium (Security). Santa Clara, CA, 1221‚Äì1238.
[79] Victor van der Veen, Dennis Andriesse, Enes G√∂kta≈ü, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical context-
sensitive CFI. In Proceedings of the 22nd ACM Conference on Computer and Com-
munications Security (CCS). Denver, Colorado.
[80] Victor van der Veen, Enes G√∂ktas, Moritz Contag, Andre Pawoloski, Xi Chen,
Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano
Giuffrida. 2016. A tough call: Mitigating advanced code-reuse attacks at the
binary level. In Proceedings of the 37th IEEE Symposium on Security and Privacy
(Oakland). San Jose, CA.
[81] Insu Yun, Dhaval Kapil, and Taesoo Kim. 2020. Automatic Techniques to System-
atically Discover New Heap Exploitation Primitives. In Proceedings of the 29th
USENIX Security Symposium (Security). Boston, MA.
[82] Chao Zhang, Chengyu Song, Kevin Zhijie Chen, Zhaofeng Chen, and Dawn Song.
2015. VTint: Protecting Virtual Function Tables‚Äô Integrity. In Proceedings of the
2015 Annual Network and Distributed System Security Symposium (NDSS). San
Diego, CA.
[83] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dawn Song, and Wei Zou. 2013. Practical control flow integrity and
randomization for binary executables. In Proceedings of the 34th IEEE Symposium
on Security and Privacy (Oakland). San Francisco, CA.
[84] Mingwei Zhang and R Sekar. 2013. Control Flow Integrity for COTS Binaries. In
Proceedings of the 22th USENIX Security Symposium (Security). Washington, DC.
[85] Tong Zhang, Dongyoon Lee, and Changhee Jung. 2019. BOGO: Buy Spatial
Memory Safety, Get Temporal Memory Safety (Almost) Free. In Proceedings of
the 24th ACM International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS). Providence, RI, 631‚Äì644.
[86] Philipp Zieris and Julian Horsch. 2018. A leak-resilient dual stack scheme for
backward-edge control-flow integrity. In Proceedings of the 2018 on Asia Confer-
ence on Computer and Communications Security. 369‚Äì380.
Session 5D: Misc: Android and Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1626