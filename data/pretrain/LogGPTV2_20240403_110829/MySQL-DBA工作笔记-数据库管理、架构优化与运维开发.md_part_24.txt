（2）可以结合使用 hash、range、lookup table 进行拆分。
（1）不建议使用分区表来实现分表需求。
安全规范
存储过程规范
分表规范
：JS 中首先规范用户输入，规避用户输入不符合规范的变量，比如设置输
ipaddr
from
tl_ip
where
ipaddr=
？
第4章SQL开发规范和基础|127
union
select
---
## Page 150
128丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
失效0）和2个时间字段，
数据，主要针对状态型数据。
准确性，比如充值时必须要拿到原来的余额，才能支付成功。
据不依赖前面的数据，
的单据，比如交易流水、支付流水，只要能插入新单据就能完成业务，特点是后面的数
4.1.9
请，不可申请过大的权限，
端做成 API或者接口，
可以改造为下图4-3的样子。
例如：删除状态数据，如图 4-2所示。
（3）对于状态型数据表，需要考虑安全规范，必须有一个状态标记位（比如有效1，
（1）对于流水型数据，只有插入和查询权限，不应该存在数据删除的权限。
数据不删除原则主要是通过时间和状态标记避免误删数据，参考准则有：
1．数据不删除原则
基于数据的业务类型，表设计中需要考虑数据周期管理，避免直接删除线上的关键
（2）对于配置数据，属于核心数据字典信息，只有查询的权限。
此类型数据数据量较小，而且结构简单，一般为静态数据，变化频率很低。
（3）配置型数据
状态型数据是有状态的，
（2）状态型数据
流水型数据是无状态的，多笔业务之间没有关联，每次业务过来的时候都会产生新
（1）流水型数据
行业内，
为了避免不必要的数据操作问题，
（3）权限回收
程序抛异常尤其是与MySQL元信息相关的禁止直接抛到前台页面,不给攻击者试错的机会。
（2）异常捕获
数据库层面：采用 SQL 预处理模式，定义变量类型来提高变量的合法性，也可以后
数据安全规范
一般根据业务类型把数据分为三种：
Account_id
100
所有的数据按时间流水进入数据库。
并增加容错次数限制。
，通过标记位状态和时间字段结合来得到有效数据。
导致安全隐患。
100
多笔业务之间依赖于有状态的数据，而且要保证该数据的
20171004010100
effective_date
需要对权限进行回收，申请权限时也需要应需申
图4-2
20181104010200
expire_date
status
---
## Page 151
历史数据补入历史表，
辑中，不可直接删除，
可以适度调整数据更新的范围（比如从原来的每分钟调整为10分钟）来减少更新的频率。
结合来记录数据的变化过程。
个时间字段，可以通过事务内拆分 update 或者结合历史表，通过标记位状态和时间字段
Account 表如下图 4-6 所示。
例如：更新状态数据，余额为200。
对于状态数据的管理，如果需要保留一定周期，建议创建相应的历史表，在应用逻
（2）通过历史表追溯数据生命周期
可以改造为下图4-5所示的样子。
例如：更新状态数据，余额为200，下图4-4所示。
可以把 update 语句在一个事务内拆分为一个 update 语句和 insert 语句。如果更新过于频繁，
（1）在事务内拆分 update 语句
在表设计中，对于状态型数据表必须有一个状态标记位（比如有效1，失效0）和2
数据更新原则
scount_id
100
100
100
Account_id
定期归档删除。
更新数据，而是通过 update 来更新数据状态，在同一个事务内把
200
100
balance
100
100
100
20171004010200
20171004010100
effective_date
20171004010100
20171004010100
effective_date
20171004010100
effective date
图4-6
图4-5
图4-4
图4-3
20181104010200
20171104010200
expire_date
20181104010200
20181104010200
expire_date
20181104010200
expire_date
expire_date
status
第4章SQL开发规范和基础|129
status
insert语句
update 语句
status
status
0
1
---
## Page 152
130丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
则可以根据时间频率批量提交。
减少更新的频率。
更新过于频繁，可以适度调整数据更新的范围（比如从原来的每分钟调整为10分钟）来
例如：更新状态数据，积分为100，如下图4-11所示。
如果业务数据在短时间内更新过于频繁，比如1分钟更新100次,积分从100到10000,
可以改造为，如下图4-10所示。
例如：更新状态数据，积分为200，如下图4-9所示。
对于业务数据，比如积分类，相比于金额来说业务优先级略低的场景，如果数据的
3．数据更新频率原则
Account 表，
Account_Hist表，如下图4-7所示。
可以改造为：
100
100
100
100
100
如下图4-8所示。
balance
score
200
100
200
100
100
score
effective_date
2017100401010020181104010200
20171004010100
20171104010200
20171104010200
effective.date
20171104010200
20171004010100
effective_
图4-10
图4-9
图4-8
图4-7
20171104010200
expire date
date
expire_date
20181104010200
20181104010200
20181104010200
expire date
20181104010200
expire _date
status
status
0
1
0
update 语句
update 语句
status
insert语句
insert 语句
insert语句
1
---
## Page 153
题，听起来很尴尬啊。
下所示：
奇心凑了过去，看到了这个错误：
脑，反向推理、
但是当时因为时间原因还是没想到如何复现这个问题，晚上回到家，收拾收拾，打开电
这个create table 的语句其实没什么特别的，没有用到什么新版本的特性和语法。如
ERROR1005(HY000):Can't create table
对于这个问题的直觉就是 bug 或者是参数的设置超出了限制，但是这仅仅是直觉，
现在的问题是创建了10多个表，只有2个表创建失败了，单独创建就抛出了这个问
PRIMARYKEY
SCHED NAME
CREATE TABLE
DROPTABLEIFEXISTS
问题的描述听起来很简单，就是在部署一个数据变更的时候抛出了错误，我带着好
问题背景：
帮同事处理了一个看起来很有意思的问题，虽然知道了问题的方向和大体的原因，
案例4-1：MySQL无法创建表的问题分析
业务指标，
无需生成100个事务（200条SQL语句）可以改造为2条SQL语句，如下图4-12所示。
ENGINE=InnoDB DEFAULT
REQUESTS_RECOVERY
S
ISNONCONCURRENT
DESCRIPTION`
JOB
UPDATE_DATA
GROUP`
100
100
count_id
、求证、测试、重现，于是才有了这个问题的完整解读。
100
比如更新频率细节信息，可以根据具体业务场景来讨论决定。
blob
varchar(200)
（^SCHED_NAME，
varchar(200)
varchar(1)
varchar(120）NOT NULL
Varchar(250)DEFAULT NULL
QRTZ
varchar(1)
1000
score
varchar(l)
100
score
har（250)
QRTZ_JOB_DETAILS;
CHARSET=utf8
NOT NULL,
20171104010200
20171004010100
JOBNAME，
20171004010100
NOT NULL,
NOT NULL,
图4-12
图4-11
20181104010200
20171104010200
JOB_GROUP
'xxx.QRTZ_JOB_DETAILS' (errno: 150)
expire_date
20181104010200
expire_date
status
第4章SQL开发规范和基础丨131
insert语句
update 语句
status
---
## Page 154
132丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
了的，测试环境是5.1版本，而线上环境是5.5版本，第三方提供的脚本涉及的表有很多，
目Quarz，里面的脚本是使用 navicat 生成的，而这个变更在他们的测试环境是部署通过
对比测试，竟然没有发现问题，只是故障依旧存在。
面的信息只有一行报出的错误，其他更具体的信息就没有了。
的影子都找不到，部署的脚本里压根就没有外键的字眼。
是按照大写的格式来的。
同学那边是没法推进了，因为他们的应用程序端是第三方的Quarz 调度项目，他们识别
的原因。那是不是涉及了什么相关的语法灰色地带了，我在表名后面加了一个S，如下所示：
了一个字段而已，但是还是不行。
语法限制等。
字段太多、表属性格式设置、lob 字段影响、
处理问题一定要严谨，细细地查清楚，要么这就是一个无底洞，知其所以然不知其然。
有的同学可能会想到看看日志怎么说，mysql这一点上提供的信息极少，error log 里
有的同学可能说，那可能是外键导致的，我查了一圈部署的脚本，里面连一个REFERENCE
带着疑问，我和开发同学做了进一步沟通，他们引用的脚本是一个第三方的开源项
同时我也有些犹豫，我排查了数据库版本带来的影响，在 5.1、5.5 版本中都进行了
我开始做下面的测试，这个测试让上面的猜测都没有了立足之地，
和开发同学进一步沟通：
而一个临时的解决方法就是创建一个小写的表，创建过程是没有问题的，但是开发
这说明这个表的限制和语法陷阱也没有关系，但是创建这个表就这么纠结。
> create table QRTZ_JOB_DETAILSS(id int);
可以看出，这个环境中是开启了大小写敏感的设置，但是这个不足以成为问题无法解决
show variables like '%case%';
有的同学可能在想是不是大小写敏感导致的？
ERROR 1005 (HY000): Can't create table 'test.QRTZ_JOB_DETAILS' (errno: 150)
看着这个create 语句，
问题初步分析：
lower_case_file_system | OFF
Variable_name
Can'tcreatetable
，脑子里像过筛子似的在进行各种的排除，表字段太多、主键
Value
（SCHEDNAME
、数据库的字段个数溢出等等，还有可能存在
seal.QRTZ_JOB_DETAILS'(errno:150)
varchar(120) NOT NULL);
因为我只是创建
---
## Page 155
了，如下所示：
DETAILS，而表名类似的只有QRTZ_JOB_LISTENERS，这个表结构定义信息说得很清楚
个问题的隐蔽性。
况，如下所示。
问题的原因所在。
做过什么变更都会一目了然。
的便利，这样我就能看到每一步执行过程的一个基本情况了。当时做了什么尝试，之前
本的错误有关，这一关把好了，很多问题都会扼杀在摇篮之中。
题都归类给 bug，而从我处理的很多问题来看，最后问题的根本原因很多还是和一些很基
学最后无奈的说，是不是和人品有关系啊，如果同事听到，那不得吐血。
建刚刚失败的表，这次竟然成功了。而这个过程中我也没有做什么特别的操作，开发同
份)，因为这是一个批次的变更，要么可用，要么回退，删除了这些表之后，再次尝试创
我拿到了一份脚本，部署在我自己的测试环境中，竟然也没有错误。