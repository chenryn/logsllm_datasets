String and regex matching
Securing Applications in AWS
[ 155 ]
The following figure shows an example of an IP address condition where multiple
suspicious IP addresses are listed. You can list one IP address as well as range of IP
addresses in your conditions:
Figure 2 - AWS WAF condition
Rules: You combine conditions to create rules for requests that you want to either allow,
block, or count. There are two types of rules:
Regular rules: These rules are created by combining conditions only. For
example, a regular rule will contain requests originating from a specific IP
address.
Rate-based rules: These rules are similar to regular rules with the addition of a
rate limit. Essentially, these rules count the requests every 5 minutes originating
from a source and, this enables you to take an action based on the pre-defined
rate limit for a rule.
The following diagram shows a couple of rules in the AWS WAF dashboard:
Figure 3 - AWS WAF rules
Securing Applications in AWS
[ 156 ]
Web ACL: A set of rules combined together forms a web ACL. You define an action such as
allow, block, or count for each rule. Along with these actions, you also define a default
action for each rule of your web ACL in scenarios when a request does not meet any of the
three conditions for a rule.
The following figure (available in AWS documentation) shows a web ACL containing a rate
based rule and regular rules. It also shows how it evaluates the condition for these rules and
how it performs actions based on these checks:
Figure 4 - AWS WAF Web ACL
Securing Applications in AWS
[ 157 ]
Signing AWS API requests
API requests sent to AWS should include a digital signature that contains information about
the requestor's identity. This identity is verified by AWS for all API requests. This process is
known as signing API requests. For all API requests generated through AWS tools, such as
AWS SDKs and AWS Command Line Interface, the digital signature is included for you,
however, for all API requests that you create manually, you have to include this digital
signature yourself.
In other words, you need to sign your HTTP requests when you create them. You need to
do this if you are writing a code in a programming language that does not have an AWS
SDK. Furthermore, if you need to control what is sent along with an API request, you can
choose to sign requests yourself.
A digital signature includes your AWS access keys, that is, your secret access key and access
key ID, along with API information. An API request should reach the AWS within 15
minutes of the timestamp stored in this request, otherwise it is rejected by AWS.
There are certain anonymous API requests that do not include digital signatures with
identity information, such as anonymous requests to S3 or to API operations requests in
the Security Token Service (STS).
Requests are signed to secure your communication with AWS in the following ways:
Verifying the requestor's identity
Protecting the data in transit
Protection against potential replay attacks
AWS recommends using signature version 4 that uses the HMAC-SHA256 protocol for
signing all your requests. It supports signature version 4 and signature version 2.
You sign a request by calculating a hash (digest) for the request. Then you calculate another
hash, also known as a signature, by using the previous hash value, information from
the request, and your access key. This signature is then added to the request by using either
the HTTP Header (authorization) or by adding a query string value to this request.
Securing Applications in AWS
[ 158 ]
Amazon Cognito
Amazon Cognito is a managed service that allows you to quickly add users for your mobile
and web applications by providing in-built sign-in screens and authentication functionality.
It handles security, authorization, and synchronization for your user management process
across devices for all your users. You can use Cognito for authenticating your users through
external identity providers including social identity providers, such as Facebook, Google,
Twitter, LinkedIn, and so on. Cognito can also be used to authenticate identities for any
solution that is compatible with SAML 2.0 standard. You can provide temporary security
credentials with limited privileges to these authenticated users to securely access your AWS
resources. The following figure illustrates three basic functionalities of Amazon Cognito:
user management, authentication, and synchronization:
Figure 5 - AWS Cognito overview
This service is primarily designed for developers to use in their web and mobile apps. It
enables developers to allow users to securely access the app's resources. You begin by
creating and configuring a user pool, a user directory for your apps, in Amazon Cognito
either through AWS Management Console, AWS CLI, or through AWS SDK. Once you
have created user pool, you can download, install, and integrate AWS Mobile SDK with
your app, whether on iOS or Android. You also have an option to call APIs directly for
Cognito if you do not wish to use SDK, as it exposes all control and data APIs as web
services for you to consume them through your own client library.
Amazon Cognito integrates with CloudTrail and CloudWatch so you can monitor Cognito
metrics and log API activities in real time and take the required action for any suspicious
activity or security threat.
Securing Applications in AWS
[ 159 ]
Amazon API Gateway
As a developer, you have to work with APIs on a regular basis. Amazon API Gateway is a
fully managed web service that helps to manage, publish, maintain, monitor, and secure
APIs for any workload running on EC2 instances, AWS Lambda, or any web application.
You can use API Gateway to manage, authenticate, and secure hundreds of thousands of
concurrent API calls. Management of APIs includes access control, traffic management,
monitoring, and API version management. All the APIs that are built using API Gateway
support data over HTTP protocols. You can also run multiple versions of the same REST
API by cloning the existing API. Let us look at the following benefits of using Amazon API
Gateway:
Low cost and efficient: You pay for the requests that are made to your API, for
example, $3.5 per million API calls, along with the cost of data transfer out, in
gigabytes. You also have the option to choose cache for your API, and that will
incur charges on an hourly basis. Apart from these, there are no upfront
commitments or minimum fees. It integrates with Amazon CloudFront, allowing
you access to a global network of Edge locations to run your APIs, resulting in a
lower latency of API requests and responses for your end users.
Flexible security controls: With API Gateway, you can use AWS Security and
administration services, such as IAM and Cognito, for authorizing access to your
APIs. Alternatively, you can also use a custom authorizer, such as Lambda
functions, for authentication if you already have OAuth tokens or if you are using
other authorization processes. It can also verify signed APIs using the same
technology that is used by AWS to verify its own calls.
Run your APIs without servers: API Gateway allows you to run your APIs
completely without using any servers through its integration with AWS Lambda.
You can run your code entirely in AWS Lambda and use API Gateway to create
REST APIs for your web and mobile applications. This allows you to focus on
writing code instead of managing to compute resources for your application.
Monitor APIs: You can monitor all your APIs after they have been published and
are in use through the API Gateway dashboard. It integrates with Amazon
CloudWatch to give you near real-time visibility on the performance of your APIs
through metrics, such as data latency, error rates, API calls, and so on. Once you
enable detailed monitoring for API Gateway, you can use CloudWatch Logs to
receive logs for every API method as well. You can also monitor API utilization
by third-party developers through the API Gateway dashboard.
Securing Applications in AWS
[ 160 ]
Summary
In this chapter, we learnt about securing applications that are built on top of AWS
resources. We went through WAF in detail to protect web applications in AWS and learnt
about the benefits and lifecycle of Web Application Firewall. We also walked through the
process of automating security with WAF.
Furthermore, we went through the process of signing AWS API requests for securing data
in transit along with securing information stored in API itself.
Lastly, we learned about two AWS services that are used by developers to secure their web
and mobile applications--Amazon Cognito for user management and Amazon API Gateway
for managing and securing APIs.
In next chapter, Monitoring in AWS, we will learn about monitoring all AWS resources.
Monitoring enables us to gauge operational health, performance, security, and the status of
all resources. AWS provides comprehensive monitoring solutions for all web services,
resources, and your custom applications to take proactive, preventive and reactive
measures in the event of an incident.
7
Monitoring in AWS
Monitoring is an integral part of the information technology environment in all
organizations. Monitoring refers to collecting, tracking, and analyzing metrics related to the
health and performance of resources, such as infrastructure components and applications,
to ensure all resources in an environment are providing services at an acceptable level, that
is, that a threshold is set up by resource owners or system administrators. Monitoring these
resources allows you to take proactive action in the event of the failure or degradation of a
service due to any reason such as a security breach or a DDoS attack. Monitoring is a
preventive security measure.
A monitoring service needs to have metrics to monitor, graphs to visualize these metrics
and trends, alarms for metrics when thresholds are breached, features to notify and take
actions when the state is alarm and most importantly, this service should be able to
automate all of the above mentioned features.
AWS has dedicated managed services, features, and solutions in place to meet all your
automated and manual monitoring requirements for your simple, standard, distributed,
decoupled, and most complex workloads in AWS cloud. Unlike traditional monitoring
solutions, AWS offers monitoring solutions while keeping the dynamic nature of cloud
implementations in mind. Moreover, most of this monitoring is provided in your basic plan;
that means you do not have to pay additional charges to avail these monitoring services.
AWS allows you to monitor all your resources in the cloud such as your servers and your
AWS services, along with applications running on these services through its fully managed
monitoring service AWS CloudWatch. This service enables you to monitor AWS
infrastructure services: container services, platform services, and even abstraction services
such as AWS Lambda.
Monitoring in AWS
[ 162 ]
In this chapter, we will learn about the automated and manual monitoring of resources,
services, and applications running, and consuming these services in AWS. While these AWS
services and AWS resources use similar concepts to traditional resources and services, they
work entirely differently. These are elastic in nature; they have the ability to self heal, they
are very easy to provision and are mostly configurable, so, monitoring them is a paradigm
change for all of us! To monitor the cloud, we need to know how the cloud works! And we
are going to learn about monitoring the cloud in this chapter.
We will begin with AWS CloudWatch, a fully managed monitoring service that helps you
to monitor all your resources, services, and applications in AWS.
We will learn about features and benefits along with the following components of AWS
CloudWatch. While going through these components, we will learn about ways to create
these components in detail as well:
Metrics
Dashboards
Events
Alarms
Log monitoring
Furthermore, we will walk-through AWS CloudWatch log monitoring and log management
capabilities.
Next we will learn about monitoring your servers in AWS, provisioned through AWS EC2
services. Alongside this, we will take a look at monitoring metrics unique to the AWS cloud,
such as billing, the Simple Storage Service (S3), auto scaling, and so on. While going
through this section, we are going to see an example of automating your security response
by integrating a few AWS services including AWS CloudWatch.
While going through this topic, we will learn about various tools that are available in AWS
cloud for automatic and manual monitoring of your EC2 instances. We will deep dive in to
the AWS Management Pack for monitoring your applications running on EC2 instances.
Lastly, we will look at the best practices for monitoring your EC2 instances.
Monitoring in AWS
[ 163 ]
AWS CloudWatch
AWS CloudWatch is a monitoring service that collects metrics and tracks them for your
resources in AWS, including your applications, in real time. Alongside, you can also collect
and monitor log files with AWS CloudWatch. You can set alarms for metrics in AWS
CloudWatch to continuously monitor performance, utilization, health, and other
parameters of all your AWS resources and take proactive action in the event of metrics
crossing thresholds set by resource owners and system administrators. This is accessible
through the AWS Management Console, command-line interface, API, and SDKs.
AWS CloudWatch is a global AWS service meaning it can monitor AWS resources and
services across all AWS regions. For example, you can monitor EC2 instances available in
multiple AWS regions through a single dashboard.
AWS CloudWatch monitors your resources and your applications without installing any
additional software. It provides basic monitoring for free that provides data at 5 minute
intervals. For an additional charge, you can opt for detailed monitoring that provides data
at 1 minute intervals.
AWS CloudWatch has a feature that allows you to publish and retain custom metrics for a 1
second duration for your application, services, and AWS resources. This feature is known as
high-resolution custom metrics. You can have your custom metrics publish data either at 1
minute intervals or at 1 second intervals.
The AWS CloudWatch service stores metrics data for a period of 15 months, so even when
you have terminated an EC2 instance or deleted an ELB, and you want to look at historical
metrics for these resources, you can retrieve them through AWS CloudWatch. You cannot
delete stored metrics, they are deleted when they expire after their retention period.
You can watch metrics and statistics through various graphs and dashboards available on
the AWS CloudWatch service in the AWS Management Console. These dashboards can be
shared to anyone with appropriate permissions. You can view data from multiple regions in
one or more dashboards.
The next diagram shows the architecture for AWS CloudWatch. Moving from left to right,
we can see that we can work with AWS resources that are integrated with AWS
CloudWatch along with custom resources. Metrics for these resources are monitored
continuously and stored for a period of 15 months.
Monitoring in AWS
[ 164 ]
These matrices are available to be consumed by AWS services and custom statistics
solutions for further analysis. When a metric crosses a threshold, it enters into a state of
alarm. This alarm can trigger a notification through the AWS Simple Notification Service to
take the required action in response to that alarm. Alternatively, these alarms can also
trigger auto scaling actions for your EC2 instances:
Figure 1 - AWS CloudWatch architecture
Features and benefits
Let us look at most popular features and benefits of AWS CloudWatch:
Monitor EC2: You can monitor the performance and health of all your EC2 instances
through native AWS CloudWatch metrics without installing any additional software. These
metrics include CPU utilization, network, storage, and so on. You can also create custom
metrics such as memory utilization and monitor them with the AWS CloudWatch
dashboards.
Monitoring in AWS
[ 165 ]
Monitor other AWS resources: You can monitor other AWS services such as S3,
the Relational Database Service (RDS), and DynamoDB, along with AWS billing for billing
as per the AWS service and AWS estimated bill for a month without any additional charge.
You can also monitor ELB and auto scaling for groups along with EBS volumes for your
servers.
Monitor and store logs: You can use AWS CloudWatch to store and process log files for
your AWS resources, services, or your applications in near real time. You can also send
custom log files to AWS CloudWatch for analysis and troubleshooting. You can search for
specific phrases, patterns for behavioral analysis, or values for performance in your log
files.
Set alarms: You can set alarms for all your metrics being monitored whenever they cross a
threshold. For example, you might want to set an alarm when the CPU utilization for your
EC2 instance is above 90% for more than 15 minutes. Moreover, you can also set an alarm
for your estimated billing charges as shown in the next screenshot. We have set an alarm for
a billing metric called estimated charges. The threshold for this metric is set to be greater
than US$ 100.
Figure 2 - AWS CloudWatch Create Alarm
Monitoring in AWS
[ 166 ]
Dashboards: You can create dashboards with graphs and statistics for all your resources
across multiple AWS regions in one location. These dashboards allow you to set multiple
graphs such as line graph, stacked graphs, numbers, or even free flowing text. The
following figure shows a dashboard with five sample widgets:
CPU utilization for an EC2 instance.
1.
Read and write operations per second for EBS volume.
2.
Latency and request count metrics for ELB.
3.
Object count metrics in an S3 bucket.
4.
Estimated charges for the AWS account.
5.
Note that a metric can be viewed beginning from 1 minute, a few hours, a
few days, and a few weeks, and all the way to 15 months. This dashboard
can contain information related to resources from all AWS regions. It can
be shared with other users as well.
Figure 3 - AWS CloudWatch dashboard
Automate reaction to resource changes: You could use the Events option available in AWS
CloudWatch to detect events for your AWS resources and respond to these events. These
events consist of near real-time information about changes occurring to your AWS
resources. You could automate reactions to these events that can self-trigger using cron or
rate expressions. These events can be scheduled. You can also integrate AWS events with
AWS Lambda functions or AWS Simple Notification Service (SNS) topics for creating a
fully automatic solution.
Monitoring in AWS
[ 167 ]
You can write rules for an event for your application or your AWS services and decide what
actions to perform when an event matches your rule.
AWS CloudWatch components
Let us look at the most important components for AWS CloudWatch in detail, including
how they work together and how they integrate with other AWS services to create a
solution that can automatically respond in the event of a security breach.
Metrics
Metrics is data that you periodically collect for evaluating the health of your resource. A
fundamental concept in AWS CloudWatch, a metric is a variable that is monitored, and data
points for this metric are its values over a period of time. AWS services send metrics data to
AWS CloudWatch and you can send custom metrics for your resources and applications.
Metrics are regional, so they are available only in the region in which they are created. They
cannot be deleted; instead they expire after 15 months on a rolling basis if there is no new
data published for these metrics. Each metric has a data point, a timestamp, and a unit of
measure.
A metric with data point with period of less than 60 seconds is available for 3 hours. Data
points with period of 60 seconds are available for 15 days. Data points with period of 300
seconds are available for 63 days and data points with period of 3600 seconds (1 hour) are
available for 455 days (15 months).
The collection of metrics data over a period of time is known as statistics. AWS CloudWatch
gives statistics based on metrics data provided either by AWS services or custom data
provided by you. Following statistics are available in AWS CloudWatch:
Minimum
Maximum
Sum
Average
SampleCount
pNN.NN (value of percentile specified)
Monitoring in AWS
[ 168 ]
There is a unit of measure for every statistic such as bytes, seconds, percent, and so on.
While creating a custom metric, you need to define a unit, as if it is undefined, AWS
CloudWatch uses none for that metric. Each statistic is available for a specified period of
time that is cumulative metrics data collected for that period. Periods are defined in
numbers of seconds such as 1, 5 or any multiple of 60. It can range from 1 second to one
day, that is, 86,400 seconds, the default value is 60 seconds for a period. When you are
specifying a statistic for a metric, you can define a start time, end time, and duration, for
monitoring. The following figure shows the count of various metrics available for services
that are used in my AWS account:
Figure 4 - AWS CloudWatch Metrics
Alarms allow us to automatically initiate an action on the user's behalf. These are performed
on a single metric when the value of that metric crosses a threshold over a period of time.
Alarms can be added to the dashboard.
The following figure shows details available for all metrics, such as the metric name, label,
period, statistic, and so on. We can configure these metric details as per our requirements.
On the right-hand side in the figure, you see the Actions tab; we can use this tab to
configure actions such as alarms and notifications for our metrics:
Monitoring in AWS