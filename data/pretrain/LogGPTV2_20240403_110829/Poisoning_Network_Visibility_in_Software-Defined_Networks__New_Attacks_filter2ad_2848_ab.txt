### Service Architecture and Components

- **Service**
- **Host**
- **Profile Packet-In**
- **LLDP (Link Layer Discovery Protocol)**
- **Applications (Routing, Load Balancing, etc.)**
- **Routing Update**
- **Status Update**
- **Link Discovery**
- **Service Link Info**
- **Core Services (e.g., Policy Management, etc.)**
- **Topology-Aware Service (e.g., Spanning Tree Protocol)**
  - **Update Status**
  - **Actions**
- **Host-Aware Service (e.g., Web Services)**
  - **Update Status**
  - **Actions**
- **Core Application**

### Link Discovery in OpenFlow Networks

When a switch, driven by its firmware or under explicit instructions from an attached OpenFlow controller, receives an incoming LLDP packet, it reports this packet to the controller via a Packet-In message. This message includes the ingress Port ID and DPID of the switch (e.g., Switch Y). Upon receiving the Packet-In message, the OpenFlow controller can detect a unidirectional link from one switch (Switch X) to another (Switch Y).

Table III outlines the link discovery components in various existing OpenFlow controller platforms. We find that all these controllers follow the internal link discovery procedure as described above.

In addition to internal link discovery, some OpenFlow controller implementations, such as Floodlight and OpenIRIS, propose schemes to detect multi-hop links, which traverse across Non-OpenFlow islands. To achieve this, Floodlight uses BDDP packets (a broadcast version of LLDP packets with a broadcast destination MAC address) to overcome unpredictable forwarding behaviors of Non-OpenFlow switches.

These topology management services are critical for providing important information to other topology-dependent services (e.g., shortest-path routing and spanning tree) and applications (e.g., network routing management/optimization). For interested readers, we provide more details on two representative topology-dependent services—shortest-path routing and spanning tree—in Appendix A.

### Topology Poisoning Attacks

#### Threat Model and Experimental Environment

We assume an adversary has compromised one or more hosts or virtual machines (e.g., through malware infection) within the SDN/OpenFlow network and has read and write privileges on packets at the operating system level. In this paper, we assume that the transmission of OpenFlow messages via the control channel is protected by SSL/TLS.

We demonstrate SDN-specific Network Topology Poisoning Attacks in both Mininet 2.0 [24] and a physical environment (with hardware OpenFlow switches). Mininet 2.0 is widely used for emulating OpenFlow network environments. Our hardware testbed includes several OpenFlow-enabled devices, such as TP-LINK (TL-WR1043ND) and LINKSYS (WRT54G) running OpenWRT firmware with an OpenFlow extension, and PCs with Intel Core2 Quad processors and 2GB memory.

#### Host Location Hijacking Attack

This attack exploits the Host Tracking Service (HTS) in the OpenFlow network. HTS maintains a profile for each host to track network mobility. When a host migrates, HTS updates the host's location information based on Packet-In messages. However, this update mechanism is vulnerable due to the lack of authentication.

Our analysis of the source code of HTS in mainstream OpenFlow controllers reveals that there are few security restrictions on host location updates. For example, Floodlight and the old version of OpenDayLight provide an empty-shell API called `isEntityAllowed` that accepts every host location update without blocking potential spoofing attacks. POX throws a warning if the observed time for device migration is less than 60 seconds, but this simple verification is easy to bypass.

An adversary can exploit this vulnerability by crafting packets with the same identifier as the target host. Once the OpenFlow controller receives the spoofed packet, it will believe the target host has moved to a new location, which is actually the attacker's location. This allows the adversary to hijack future traffic directed to the target host.

**Example: Web Clients Harvesting**

To conduct a Web Clients Harvesting Attack, the adversary first retrieves the identifier of the target host. The host identifier varies among MAC address, VLAN ID, and IP address, depending on the OpenFlow controller platform and version. The IP address is typically known, and the VLAN ID is often unused during the update procedure. The MAC address can be probed using ARP request packets, as the OpenFlow network does not change the source MAC address during packet transmission.

One challenge in exploiting HTS is racing with the target host, as any traffic initiated from the target can correct the host location information in the controller. To overcome this, the target can be set as a server, which typically runs in passive mode, waiting for remote connections from clients.

In our experimental environment, we launched a Host Location Hijacking Attack using Floodlight (master) as the OpenFlow controller, with the Host Tracking Service and Shortest Path Routing Service enabled by default. We deployed an Apache2 web server with the IP address "10.0.0.100" and several hosts in a customized OpenFlow topology. Before the attack, clients could visit the genuine web server. After injecting fake packets, new clients attempting to visit the web server were directed to the malicious server.

#### Link Fabrication Attack

This attack involves fabricating a link into the network topology to disrupt normal network activities. OpenFlow controllers use LLDP packets to discover links among switches, but there are security flaws in this process.

The Link Discovery Service (LDS) in OpenFlow controllers relies on two invariants: 1) the integrity/origin of LLDP packets must be ensured, and 2) the propagation path of LLDP packets can only contain OpenFlow-enabled switches. Unfortunately, these invariants are poorly enforced in current OpenFlow controllers. The syntax of LLDP packets varies among different platforms, and some controllers add extra TLVs to enrich the semantics of LLDP packets. For example, Floodlight adds an origin authenticator as an extra TLV, but this authenticator remains unchanged after setup, allowing adversaries to violate the origin property. Additionally, there are no mechanisms to ensure the integrity of LLDP packets.

Some OpenFlow controllers, such as Floodlight and OpenDaylight, provide an API `suppressLinkDiscovery` to block LLDP propagation to specific ports connected to hosts. This method is similar to the BPDU Guard feature in legacy Ethernet switches, which prevents BPDU frames from being sent to ports enabled with the PortFast feature. However, relying solely on static port settings is insufficient for diverse OpenFlow network environments, ranging from home networks to enterprise or cloud/data-center networks and from stationary to dynamic networks.