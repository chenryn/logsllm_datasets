  Service	
  Host	
  Proﬁle Packet-­‐In	
  LLDP	
  Applica?ons	
  (Rou?ng,	
  LB,	
  etc.)	
  Update	
  Rou?ng	
  Update	
  Status	
  Link	
  Discovery	
  Service	
  Link	
  Info Core	
  Services	
  (e.g.,	
  policy,	
  etc.)	
  Topology-­‐Aware	
  Service	
  (E.g.	
  STP)	
  Update	
  status	
  Ac?ons	
  Host-­‐Aware	
  Service	
  (E.g.	
  Web)	
  Update	
  status	
  Ac?ons	
  Core	
  App	
  by its ﬁrmware or under explicit instructions of the attached
OpenFlow controller, reports the incoming LLDP packet to
the controller with the ingress Port ID and DPID of Switch
Y via a Packet-In message. When receiving the Packet-In
message from Switch Y, the OpenFlow controller can detect a
unidirectional link from Switch X to Switch Y. Table III shows
link discovery components in existing OpenFlow controller
platforms. We ﬁnd that all of these controllers embrace the
internal link discovery procedure as we describe above.
In addition to the internal link discovery, some OpenFlow
controller implementations, e.g., Floodlight and OpenIRIS,
also propose a scheme to detect multi-hop links, which refers to
links traverse across a Non-OpenFlow island. In order to detect
such links, Floodlight leverages BDDP packets(i.e., a broadcast
version of LLDP packets with a broadcast destination MAC
address) to overcome unpredictable forwarding behaviors of
Non-OpenFlow switches.
Finally, we note that these topology management services
are critical building blocks to provide important
informa-
tion to other topology-dependent services (e.g., shortest-path
routing and spanning tree) and apps (e.g., network routing
management/optimization). For interested readers, we provide
more details of two representative topology-dependent services
(among many others), i.e. shortest-path routing and spanning
tree in SDN, in the Appendex A.
III. TOPOLOGY POISONING ATTACK
In this section, we describe the vulnerabilities in Topology
Management Services of existing OpenFlow controllers that
we have found. Based on such vulnerabilities, we propose and
measure two OpenFlow Network Topology Poisoning Attacks,
i.e., Host Location Hijacking Attack and Link Fabrication
Attack.
A. Threat Model and Experimental Environment
We assume an adversary possesses one or more com-
promised hosts or virtual machines (e.g., through malware
infection) in the SDN/OpenFlow network and has the read
and write privilege on packets in the operating system.3 Note
that, in this paper, we assume the transmission of OpenFlow
messages via the control channel can be properly protected by
SSL/TLS.
Furthermore, we demonstrate the SDN-speciﬁc Network
Topology Poisoning Attacks both in Mininet 2.0 [24] and
a physical environment (with hardware OpenFlow switches).
Mininet 2.0 is widely used for emulating an OpenFlow
network environment. Our hardware testbed includes several
OpenFlow-enabled hardware: TP-LINK(TL-WR1043ND) and
LINKSYS(WRT54G) which run OpenWRT ﬁrmware with an
OpenFlow extension and PCs with Intel Core2 Quad processor
and 2GB memory.
3In the extreme case, the adversary can be an insider.
Fig. 2: Link Discovery Procedure in OpenFlow Networks
OpenFlow controller fails to locate an existing Host Proﬁle
according to the information from incoming Packet-In mes-
sages, it creates a new Host Proﬁle. In such case, the controller
assumes a new host joins the network. The second scenario
occurs when the OpenFlow controller successfully locates
a Host Proﬁle but ﬁnds mismatched location information
between the Host Proﬁle and Packet-In messages. In the case, it
assumes the host has moved to a new location and then updates
the location information inside the corresponding Host Proﬁle.
Table III shows the Host Tracking Services in current
OpenFlow controller platforms. In order to handle host mo-
bility, the existing OpenFLow controllers maintain a proﬁle
for each host. In detail, the Host Proﬁle includes: (1) MAC
address, (2) IP address, and (3) Location information (i.e., the
DPID and the port number of the attached switch as well as the
last seen timestamp). Normally, a Host Proﬁle is indexed by
the MAC address. Floodlight, for example, indexes the Host
Proﬁle with MAC address and VLAN ID. Beacon and the old
version of Host Tracking Service in OpenDayLight support
both MAC address and IP address as the index.
Link Discovery Service. To dynamically discover topol-
ogy,
the Link Discovery Service (LDS) inside OpenFlow
controllers uses Open Flow Discovery Protocol (OFDP), which
refers to LLDP (Link Layer Discovery Protocol) packets with
format shown in Table
II, to detect internal links between
switches.
Figure 2 depicts the link discovery procedure in an Open-
Flow network. Note that here we illustrate only a unidirectional
link discovery for simplicity (the discovery of opposite link
is performed in a similar fashion). Initially, the OpenFlow
controller sends out Packet-Out messages to Switch X with the
payload of a controller-speciﬁc LLDP packet. The payload of
the LLDP packet contains DPID and the output port of Switch
X. Upon receiving the LLDP packet, Switch X advertises
it to all other ports in a broadcast manner. Typically, in an
OpenFlow network,
is achieved by
iterative transmissions of one LLDP packet to each broadcast-
enabled port of a switch. Then, the next-hop Switch Y, driven
this kind of broadcast
4
Switch XSwitch YControllerStep 1: Packet-Out with LLDPStep 3: Packet-In with LLDPStep 2: LLDP AdvertisementDl dst
Dl src
01:80:C2:00:00:0E
Outgoing Port MAC
Eth type
0X88CC
Chassis ID TLV
DPID of Switch
Port ID TLV
Port Number of Switch
TTL TLV
Time to Live
Optional TLVs
End TLV
E.g., System Description
End Signal of LLDP
TABLE II: The Format of LLDP Packets
Controller Platform
Link Discovery Service
Ryu
Maestro
NOX
POX
Floodlight
OpenDayLight
OpenIRIS
Beacon
switches.py
DiscoveryApp.java
discovery.py
discovery.py
LinkDiscoveryManager.java
DiscoveryService.java
OFMLinkDiscovery.java
TopologyImpl.java
TLVs
DPID, Port ID, TTL
DPID, Port ID, TTL
DPID, Port ID, TTL
DPID, Port ID, TTL, System Description
DPID, Port ID, TTL, System Description
DPID, Port ID, TTL, System Description
DPID, Port ID, TTL, System Description
DPID, Port ID, TTL, Full Version of DPID
Host Tracking Service
host tracker.py
LocationManagementApp.java
hosttracker.cc
host tracker.py
DeviceManagerImpl.java
DeviceManagerImpl.java
OFMDeviceManager.java
DeviceManagerImpl.java
Host Proﬁle
MAC, IP, Location
MAC, Location
MAC, Location
MAC, IP, Location
MAC, VLAN ID, IP, Location
MAC, VLAN ID, IP, Location
MAC, VLAN ID, IP, Location
MAC, VLAN ID, IP, Location
TABLE III: Topology Management Services (the bold attributes in Host Proﬁle column denotes the identiﬁer of a host)
B. Host Location Hijacking Attack
In this part, we detail the Host Location Hijacking Attack
which is a kind of spooﬁng attack by exploiting the Host
Tracking Service in the OpenFlow network.
Exploitation in Host Tracking Service. As described in
Section II, HTS in the OpenFlow controllers maintains Host
Proﬁle for each end host to track network mobility. As long
as hosts (or virtual machines) migrate, HTS can quickly react
to such event. In particular, HTS recognizes the motion of
hosts by monitoring Packet-In messages. Once being aware
that a particular host migrates to a new location, i.e., DPID or
ingress Port ID is different from the corresponding entry of the
Host Proﬁle, HTS updates Host Proﬁle and optionally raises
a HOST MOVE event to its subscriber services. However,
such update mechanism is vulnerable due to the ignorance of
authentication.
In order to investigate security issues when HTS updates
Host Proﬁle, we manually analyze the source code of HTS
in current mainstream OpenFlow controllers. Our study shows
that existing OpenFlow controllers have few security restric-
tions on host location update. For instance, Floodlight and the
old version of OpenDayLight controller provides an empty-
shell API, called isEntityAllowed, which accepts every host
location update rather than blocking possible spooﬁng attacks.
The POX controller throws a warning if the observed time for
device migration is less than a minimum expected time (60
seconds by default). However, we assume that such simple
veriﬁcation is easy to bypass if the adversary recognizes this
feature in advance. The lack of consideration on security
provides an opportunity for an adversary to tamper host
location information by simply impersonating the target host.
What is worse, all OpenFlow controllers have a routing module
that utilizes the host location information to make the packet
forwarding decision. That is, if an adversary can tamper the
location information, he/she has a potential to hijack the trafﬁc
towards the host.
Fig. 3: Attacker impersonates a speciﬁc web server to phish
users
Here, we propose an attacking strategy where the adversary
crafts packets with the same identiﬁer of the target host. Once
receiving the spoofed packet, the OpenFlow controller will be
tricked to believe that the target host moves to a new location,
which actually is the attacker’s location. As a result, future
trafﬁc to the target is hijacked by the adversary. Next, we
introduce a practical example of harvesting web clients by
exploiting the vulnerability in HTS, as shown in Figure 3.
Web Clients Harvesting. In order to conduct a Web
Clients Harvesting Attack, we ﬁrstly need to retrieve the
identiﬁer of the target. From Table III, we ﬁnd that the host
identiﬁer varies among MAC address, VLAN ID, and IP
address depending on the platform and version of OpenFlow
controllers. It is trivial to know the IP address if we have
already chosen an attacking target. Besides, the VLAN ID is
normally unused during the update procedure of Host Proﬁle.
On the other hand, as MAC address is regarded as the (or part
of) identiﬁer for hosts in most OpenFlow controllers (except
for Ryu), we can use ARP request packets to probe the MAC
address of our target. Note that such simple probe method is
feasible because the OpenFlow network does not change the
source MAC address during packet transmission.
5
10.0.0.100TenantAttackerOpenFlow Network(a) Connected to Genuine Server
(b) Hijacked by Malicious Server
Fig. 4: Web Impersonation Attack
In addition, one difﬁculty to successfully exploit HTS
lies in that the adversary needs to race with the target host,
because any trafﬁc initiated from the target host can correct
host location information in the controller. To overcome the
non-determinism of such situation, we could set our target
as a server. This is because a server normally runs in a
passive mode, i.e., it opens speciﬁc port(s) and waits for remote
connections from clients.
In this paper, we launched a Host Location Hijacking
Attack in our experimental environment. We chose Flood-
light (master) as the OpenFlow controller, atop which the
Host Tracking Service and Shortest Path Routing Service
are enabled by default. We deployed an Apache2 [1] web
server with IP address “10.0.0.100” and several hosts in our
customized OpenFlow topology. The reachability test is shown
in Figure 4(a), that is, before we launch the Host Location
Hijacking Attack, clients can visit the genuine web server
with our assigned IP address. Upon a compromised host, we
also run a Web service and send ARP request to probe the
corresponding MAC address of “10.0.0.100”. We then use
Scapy [8] to periodically inject fake packets in the name of
our target (the genuine web server “10.0.0.100”). After that, we
ﬁnd the new coming client attempting to visit the web server
“10.0.0.100” is directed to the malicious server, as shown in
Figure 4(b).
C. Link Fabrication Attack
In this part, we show how an adversary can fabricate a
link into the network topology to threaten normal network
activities.
Exploitation in Link Discovery Service. To build the
entire network topology and handle dynamics of a network,
OpenFlow adopts OFDP for topology management. Typically,
OpenFlow controllers utilize LLDP packets to discover links
among OpenFlow switches. However, there exist security ﬂaws
during the link discovery procedure.
As implicated in Section II, the LDS in OpenFlow con-
trollers is subject to two invariants: 1) The integrity/origin
of LLDP packets must be ensured during the Link Discovery
procedure; 2) The propagation path of LLDP packets can only
contain OpenFlow-enabled switches. Unfortunately, those two
security invariants are poorly enforced in current instantiations
of OpenFlow controllers. In our study, we ﬁnd that the syntax
of LLDP packets varies among different OpenFlow controller
platforms. For example, POX and Floodlight use an integer
6
variable to represent
the port number of a remote switch
whereas the form of the port number in OpenDayLight is
the ASCII value of characters. In addition, some OpenFlow
controllers add extra TLVs (Type-Length-Values), e.g., system
description, to enrich the semantics of LLDP packets. The
controller-uniqueness of LLDP packets to some extent protects
the LLDP “origin invariant.” However, we argue that it is not
enough when taking into account the open source nature of
OpenFlow controllers and simple semantics of LLDP. Also,
the Floodlight controller adds an origin authenticator as an
extra TLV of LLDP packets to verify the origin of LLDP
packets. However, the authenticator keeps unchanged after the
setup of Floodlight controllers, which allows an adversary to
violate the origin property. More seriously, we ﬁnd that there
is no mechanisms in current OpenFlow controllers to ensure
the integrity of LLDP packets.
In our study, we also ﬁnd some OpenFlow controllers,
e.g., Floodlight and OpenDaylight, provide an API sup-
pressLinkDiscovery to block LLDP propagation to particular
ports connected to hosts. This kind of method is similar to
the BPDU Guard security feature in legacy Ethernet switches,
which prevents BPDU frames from sending to those ports
enabled with the PortFast feature (i.e., manual conﬁguration of
switch ports connected to hosts). However, depending only on
static port settings is not enough for diverse OpenFlow network
environments, varying from a home network to an enterprise
or cloud/data-center network and from stationary networks to