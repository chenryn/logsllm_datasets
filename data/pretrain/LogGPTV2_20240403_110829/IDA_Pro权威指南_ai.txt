工具栏区域
 （➊）包含与 IDA 的常用操作对应的工具。你可以使用 View▶Toolbars 命令显示或隐藏工具栏。你可以使用鼠标拖放工具栏，根据需要重新设定它们的位置。带有单独一排工具按钮的 IDA 的基本模式工具栏如图 4-9 所示。用户可以使用View▶Toolbars▶Advanced mode打开高级模式工具栏。高级模式工具栏包含整整三排工具按钮。
图4-9 IDA 桌面
彩色的水平带是 IDA 的概况导航栏
 （➋），也叫做导航带
 。导航带是被加载文件地址空间的线性视图。默认情况下，它会呈现二进制文件的整个地址范围。你可以右击导航带内任何位置，并选择一个可用的缩放选项，放大或缩小显示的地址范围。不同的颜色表示不同类型的文件内容，如数据或代码。同时，在导航带上，会有一个细小的当前位置指示符
 （默认为黄色）指向与当前反汇编窗口中显示的地址范围对应的导航带地址。将光标悬停在导航带的任何位置，IDA 会显示一个工具提示，指出其在二进制文件中的对应位置。单击导航带，反汇编视图将跳转到二进制文件中你选定的位置。用户可以通过 Options▶Colors 命令自定义导航带所使用的颜色。拖动导航带，使其离开 IDA 桌面，你将得到一个分离的概况导航栏，如图 4-10 所示。在图 4-10 中，你可以看到当前位置指示符（➊左边的半长向下箭头）和按功能组标识文件内容的颜色键
 。
图4-10 概况导航栏
回到图 4-9，IDA 为当前打开的每一个数据显示窗口都提供了标签（➌）。数据显示窗口中包含从二进制文件中提取的信息，它们代表数据库的各种视图。绝大多数分析工作需要通过数据显示窗口完成。图 4-9 显示了 3 个数据显示窗口：IDA-View、Functions 和Graph Overview。通过View▶Open Subviews菜单可打开其他数据显示窗口，还可恢复任何意外关闭或有意关闭的窗口。
反汇编视图
 （➍）是主要数据显示视图，它有两种不同的形式：图形视图（默认）和列表视图。在图形视图中，IDA 显示的是某个函数在某一时间的流程图。结合使用图形概况，你就可以通过该函数结构的视觉分解图来了解函数的运行情况。打开 IDA-View 窗口后，可以使用空格键在图形视图样式和列表视图样式之间切换。如果希望将列表视图作为默认视图
 ，则必须通过Options▶General菜单打开IDA Options 复选框，取消选择 Graph选项卡下的Use graph view by default （默认使用图形视图）复选框，如图 4-11 所示。
图4-11 IDA 图形选项
使用图形视图时，显示区很少能够一次显示某个函数的完整图形。这时，图形概况视图（➎，仅在使用图形视图时显示）可提供基本图形结构的缩小快照，其中的虚线矩形表示其在图形视图中的当前显示位置。在图形概况窗口内单击鼠标，可重新定位图形视图的显示位置。
输出窗口
 （➏）显示的是 IDA 输出的信息。在这里，用户可以找到与文件分析进度有关的状态消息，以及由用户操作导致的错误消息。输出窗口基本上等同于一个控制台输出设备。
函数窗口
 （➐）是默认 IDA 显示窗口的最后一部分，我们将在第 5 章详细讨论这些窗口。
4.4 初始分析时的桌面行为
在对一个新打开的文件进行初始自动分析的过程中，桌面上会发生大量活动。通过观察分析过程中的各种桌面显示，用户可初步了解分析情况。你所观察到的桌面活动包括以下内容。
消息输出窗口显示的进度消息。
反汇编窗口显示的初始位置和反汇编输出。
Functions 窗口中显示的初始值，以及在分析过程中的定期更新。
当二进制文件中的新区域被识别为代码和数据，代码块被进一步识别为函数，以及最后使用IDA 的模式匹配技术将函数识别为代码块时，导航带的变化情况。
当前位置指示符在导航带上移动，指明当前正在分析的区域。
下面的输出是在对一个新打开的二进制文件进行初始分析时 IDA 生成的典型消息。值得注意的是，这些消息记述了分析过程，并为我们了解 IDA 在分析过程中所执行的操作序列提供了帮助。
  Loading file 'C:\IdaBook\ch4_example.exe' into database...  
  Detected file format: Portable executable for 80386 (PE)  
    0. Creating a new segment  (00401000-0040C000) ... ... OK  
    1. Creating a new segment  (0040C000-0040E000) ... ... OK  
    2. Creating a new segment  (0040E000-00411000) ... ... OK 
  Reading imports directory...  
    3. Creating a new segment  (0040C120-0040E000) ... ... OK  
  Plan  FLIRT signature: Microsoft VisualC 2-10/net runtime  
  autoload.cfg: vc32rtf.sig autoloads mssdk.til  
  Assuming __cdecl calling convention by default  
  main() function at 401070, named "_main"  
  Marking typical code sequences...
  Flushing buffers, please wait...ok  
  File 'C:\IdaBook\ch4_example.exe' is successfully loaded into the database.  
  Compiling file 'C:\Program Files\IdaPro\idc\ida.idc'...  
  Executing function 'main'...  
  Compiling file 'C:\Program Files\IdaPro\idc\onload.idc'...  
  Executing function 'OnLoad'...  
  IDA is analysing the input file...  
➊ You may start to explore the input file right now.  
  ------------------------------------------------------------------------------  
  Python 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)]  
  IDAPython v1.4.2 final (serial 0) (c) The IDAPython Team  
  PI:EMAIL 
  ------------------------------------------------------------------------------  
  Using FLIRT signature: Microsoft VisualC 2-10/net runtime  
  Propagating type information...  
  Function argument information has been propagated  
➋ The initial autoanalysis has been finished.  
其中，You may start to explore the input file right now
 （➊，现在可以开始研究输入文件了）和 The initial autoanalysis has been finished
 （➋，初始分析已完成）是两条特别有用的进程消息。第一条消息通知用户，IDA 的分析已取得巨大进展，可以开始浏览各种数据显示窗口。但是，浏览并不意味着更改，你应该等到分析彻底完成，再对数据库进行修改。如果你尝试在分析完成之前更改数据库，分析引擎随后可能会修改你所做的更改，或者你的做法会导致分析引擎无法正常工作。第二条消息的意思相当明显，它表示自此以后，桌面数据显示窗口的内容将不再自动更改。这时，你可以对数据库进行任意修改。
4.5 IDA 桌面提示和技巧
IDA 包含大量信息，桌面可能会变得异常混乱。下面的提示帮助你充分利用桌面的功能。
对IDA 而言，你的屏幕越大越好。为此，购买一台（或两个）特大号的显示器吧！
使用View▶Open Subviews命令恢复你无意中关闭的数据显示窗口。
使用Windows▶Reset Desktop 命令可迅速将桌面恢复到原始布局。
利用Windows▶Save Desktop 命令保存你认为特别有用的当前桌面布局。使用 Windows▶Load Desktop 命令迅速打开你之前保存的一个桌面布局。
isassembly窗口（无论是图形视图或列表视图）是唯一一个你可以修改其显示字体的窗口。使用 Options▶Font 命令可以设置字体。
4.6 报告bug
与其他软件一样，IDA 有时也包含bug。那么，如果你认为你在 IDA 中发现一个 bug，你期待Hex-Rays 如何反应呢？首先，Hex-Rays 拥有一个反应极其迅速的支持系统；其次，如果在提交支持请求的一天之内，你得到 Ilfak 的亲自回复，请不要感到惊奇。
可以通过两种方法提交报告：通过电子邮件地址 PI:EMAIL 联系Hex-Rays 支持部门；如果不想使用电子邮件，还可以在 Hex-Rays 公告牌上的 Bug Reports 讨论中发布信息。无论采用哪一种方式，你都应该确认能够再现该bug，并准备好向 Hex-Rays 提供包含该 bug 的数据库文件。前面提到，Hex-Rays 提供的SDK 支持需要额外收费。对于与你安装的插件有关的 bug，可能需要联系插件的创建者。至于你正在开发的插件中存在的 bug，需要充分利用 IDA 用户支持论坛，并等待同行的积极响应。
4.7 小结
熟悉IDA 工作区可显著提高你使用 IDA 的熟练程度。如果不能充分利用手中的工具，对二进制代码进行逆向工程将会困难重重。你在初始加载阶段和 IDA 随后执行的自动分析过程中选择的选项，将为你接下来的分析工作做好准备。初步分析完成后，你可能已经满足于 IDA 替你完成的任务。对于简单的二进制文件而言，自动分析就已经足够了。另外，如果你想知道如何与IDA 交互，可以更深入地研究 IDA 各种数据显示窗口的功能。接下来的几章将介绍 IDA 的主要数据显示窗口中的每一个及其适用场合，以及如何利用这些窗口来扩充和更新数据库。
第5章 IDA 数据显示窗口
现在，你已经能够自信地将二进制文件加载到IDA 中，一边喝着自己喜欢的饮料，一边让IDA 发挥它的“魔力”。IDA 完成初始分析后，该是你接管控制权的时候了。熟悉IDA显示的最佳方法是，浏览IDA 用于显示二进制数据的各种带标签的子窗口。对IDA 越熟悉，执行逆向工程任务的效率也越高。
在详细介绍IDA 的主要子窗口之前，首先了解IDA 用户界面的如下基本规则会有所帮助。
IDA 不提供撤销功能
 。如果由于你不小心按下某个键，导致数据库文件发生意外，这时，你必须自己将显示窗口恢复到以前的状态。
几乎所有的操作都有其对应的菜单项、热键和工具栏按钮
 。记住，IDA 的工具栏高度可配置，就像热键对菜单操作的映射一样。
IDA 提供方便的、基于上下文的鼠标右键操作菜单
 。虽然这些菜单无法提供在某个位置允许执行的操作的详尽列表，但你可以用它们执行一些最常见的操作。
了解这些规则之后，下面开始介绍IDA 主要的数据显示窗口。
5.1 IDA 主要的数据显示窗口
在默认配置下，IDA （从6.1版开始）会在对新二进制文件的初始加载和分析阶段创建7 个显示窗口。这些窗口全部可以通过导航带下方显示的一组标题标签访问（如图4-9所示）。3 个立即可见的窗口分别为IDA-View窗口、函数窗口和消息输出窗口。无论这些窗口是否默认打开，我们在本章讨论的所有窗口都可通过View▶Open Subviews菜单打开。请记住这一点，因为你可能会经常无意中关闭IDA 的显示窗口。
在IDA 中，ESC 键是一个非常有用的热键。在反汇编窗口中，ESC 键的作用与Web浏览器的“后退”按钮类似，因此，它在导航反汇编窗口时非常有用（导航将在第6章详细介绍）。遗憾的是，在打开的其他窗口中，ESC 键用于关闭窗口。有时候，你可能恰恰想要关闭窗口，但其他情况下，你可能希望立即重新打开刚刚关闭的窗口。
5.1.1 反汇编窗口
反汇编窗口也叫IDA-View窗口，它是操作和分析二进制文件的主要工具。因此，熟悉反汇编窗口中信息的显示方式，对于我们非常重要。
反汇编窗口有两种显示格式：默认的基于图形的视图和面向文本的列表视图。多数IDA 用户会有所偏好，具体使用哪一种视图，取决于用户如何使程序的流程可视化。如果你想将文本列表视图作为默认汇编视图，可以用Options▶General菜单命令打开IDA Options 复选框，取消选择Graph选项卡下的Use graph view by default（默认使用图形视图）选项。在打开的反汇编窗口中，你可以使用空格键在图形视图与列表视图之间切换。
1. IDA 图形视图
图5-1显示了图形视图中一个非常简单的函数。图形视图会让人联想到程序流程图，因为它将一个函数分解成许多基本块1
 ，以生动显示该函数由一个块到另一个块的控制流程。
1. 基本块
 是一个不包含分支，从头执行到尾的最大指令序列。因此，每个基本块都有唯一的入口点（块中的第一条指令）和退出点（块中的最后一条指令）。基本块中的第一条指令通常是分支指令的目标，而最后一条指令则往往是一条分支指令。
图5-1 IDA 图形视图
在屏幕上你会发现，IDA 使用不同的彩色箭头区分函数块之间各种类型的流2
 。根据测试条件，在条件跳转位置终止的基本块可能会生成两种流：Ye s边的箭头（是的，执行分支）默认为绿色，No边的箭头（不，不执行分支）默认为红色。只有一个后继块的基本块会利用一个正常边（默认为蓝色）指向下一个即将执行的块。
2. IDA使用术语流
 来表示某个指令如何继续执行。正常流
 （也叫做普通流
 ）表示指令默认连续执行。跳转流
 表示当前的指令跳转到（或可能跳转到）某个非连续性位置。调用流
 表示当前指令会调用一个子例程。
在图形模式下，IDA 一次显示一个函数。使用滑轮鼠标的用户，可以使用“CTRL+鼠标滑轮”来调整图形的大小。键盘缩放控制需要使用“CTRL+加号键”来放大，或使用“CTRL+减号键”来缩小。大型或复杂的函数可能会导致图形视图变得极其杂乱，使得用户难于导航。在这种情况下，使用“图形概况”窗口（见图5-2）会有所帮助。概况窗口会始终显示图形完整的块状结构，并用一个虚线框指出你当前在反汇编窗口中查看的图形区域。用户可以用鼠标在概况窗口中拖动该虚线框，以迅速将图形视图调整到任何想到的位置。
图5-2 “图形概况”窗口
用户可以通过几种方式控制图形视图的显示方式，使其满足你的要求。
平移
 。首先，除了使用“图形概况”窗口迅速定位图形外，你还可以通过单击和拖动图形视图的背景来定位图形。
重新调整块位置
 。通过单击指定块的标题栏并将其拖动到一个新位置，用户可以移动图形中的每一个块的位置。需要注意的是，IDA 会尽可能少地重新设定一个被移动的块的连接线3
 的位置。你可以拖动连接线的顶点，手动更改连接线的路径。在按下SHIFT 键的同时，在连接线的任何位置双击鼠标，即可在该位置添加一个新顶点。如果希望还原默认的图形布局，可以右击图形，并在出现的菜单中选择Layout Graph。
3. 即连接两个块的带箭头的折线。——译者注
分组和折叠块
 。最后，你可以对块分组，每个块单独分组，或者与其他块一起分组；并可将分组后的块折叠起来，以减少显示的混乱程度。折叠块特别有用，可以帮助你追踪已经分析过的块。要折叠块，可以右击块的标题栏，然后在出现的菜单上选择“Group Nodes”。
创建其他反汇编窗口
 。如果你想要同时查看两个不同函数的图形，可以通过Views▶Open Subviews▶Disassembly命令打开另一个反汇编窗口。这样打开的第一个反汇编窗口叫做IDA View-A。随后的反汇编窗口叫做IDA View-B、IDA View-C，依次类推。每个反汇编窗口都独立于其他窗口。你完全可以在一个窗口中查看一个图形，在另一个窗口中查看文本列表，或者在3个不同的窗口中查看3个不同的图形。
需要指出的是，对于视图的控制并不仅限于这些示例。我们将在第9 章介绍其他IDA 图形功能，有关操作IDA 图形视图的更多信息，请参见IDA 的帮助文档。
2. IDA 文本视图
面向文本的反汇编窗口是查看和操作IDA 生成的反汇编代码的传统显示窗口。文本显示窗口会呈现一个程序的完整反汇编代码清单（而在图形模式下一次只能显示一个函数），用户只有通过这个窗口才能查看一个二进制文件的数据部分。图形显示窗口中的所有信息均以某种形式存在于文本显示窗口中。  
这里是否有遗漏信息
在使用图形视图时，你获得的有关每一个反汇编代码行的信息似乎要更少一些。这是因为IDA 隐藏了许多与每个反汇编行有关的更加传统的信息（如虚拟地址信息），以最大限度地减少显示每个基本块所需的空间。要想显示与每个反汇编行有关的其他信息，可以通过Options▶General命令打开IDA 常规选项，然后在Disassembly选项卡的可用的反汇编行部分选择相应的选项。例如，要给每一个反汇编行添加虚拟地址，可以启用“行前缀”，将图5-1中的图形转变为如图5-3所示的图形。
图5-3 启用“行前缀”的图形视图
图5-1和图5-3所显示的函数的文本视图列表如图5-4所示。窗口中的反汇编代码分行显示，虚拟地址则默认显示。通常，虚拟地址以[区域名称]:[虚拟地址]
 这种格式显示，如.text:004011C1
 。
显示窗口的左边部分叫做箭头窗口
 （➊），用于描述函数中的非线性流程。实线箭头表示非条件跳转，虚线箭头则表示条件跳转。如果一个跳转（条件或非条件）将控制权转交给程序中的某个地址（以前的），这时会使用粗线（实线或虚线）。出现这类逆向流程，通常表示程序中存在循环。在图5-4中，地址004011CF
 至004011C5
 之间就有一个循环箭头。
位置➋的声明（也出现在图形视图中）是IDA 对于函数栈帧4
 布局的最准确估算。IDA 会对函数栈指针及函数使用的任何栈帧指针的行为进行仔细分析，从而计算出该函数的栈帧的结构。栈显示将在第6章详细讨论。
4. 栈帧
 （或激活记录
 ）是在程序的运行时栈中分配的一个内存块，其中包含传递给一个函数的参数和该函数声明的局部变量。栈帧在函数的入口点位置分配，并在函数退出时释放。栈帧将在第6章详细介绍。
位置➌的注释（以分号开头）属于交叉引用
 。在这个例子中，我们看到的是代码交叉引用（而不是数据交叉引用），它表示另一个程序指令将控制权转交给交叉引用注释所在位置的指令。交叉引用将在第9章讨论。
图5-4 IDA 文本视图
在本书的剩余部分，我们将主要以文本显示为例。只有在图形显示比文本显示更加清楚的情况下，我们才会用到图形显示。在第7 章，我们将详细介绍文本显示，以整理和注释反汇编过程。
5.1.2 函数窗口
Functions 窗口用于列举IDA 在数据库中识别的每一个函数。Functions 窗口中的条目如下所示：
malloc              .text                00BDC260 00000180 R . . . B . .