现为一个单独的程序，所有的开发工作都在其中完成。有时，也包括了版本控制以帮助计算机
程序员管理图形用户界面(GUI)的开发。
7.运行时 Runtime
每种编程语言都有某种形式的运行时系统，就是运行环境；不管是编译语言，解释语言，
或嵌入的特定领域的语言，或是通过一个 API 调用。除了支持语言构建的行为，一个运行时系
统可能也执行支持服务例如类型检查，调试，或代码生成与优化。例如，Java 运行时环境(JRE)
就是当你使用 Java 软件时要用的。JRE 由 Java 虚拟机(JVM)，Java 平台核心类，和 Java 平台
支持库组成。JRE 是 Java 软件的运行时部分，你的 web 浏览器中需要运行的只有它。运行时
系统也是网关，通过它一个运行的程序可以与运行时环境交互，它包含状态值，其在程序执行
时可以访问，还有活动的实体，在程序运行时可以和其交互。环境变量是很多操作系统的功能
并且是运行时环境的一部分；一个运行的程序可以通过运行时系统访问它们。
从 SQL Server 2005 开始，SQL Server 提供了 Microsoft Windows 的.NET 框架公共语言
运行时(CLR)组件的集成。这意味着，现在你可以使用任何.NET 框架语言，包括 Microsoft
Visual Basic .NET 和 Microsoft Visual C#，编写存储过程，触发器，用户定义类型，用户
定义函数，用户定义聚合，和流表值函数。
B.2 源代码层面的安全弱点与脆弱性 （例如：缓存溢出、权限升级、输入\输出验证）
一、恶意代码 Malicious Code
病毒、木马等任务威胁计算机安全的代码。还有什么间谍软件、广告软件，不说了。
有害代码的分类：
—246—
①文件感染型病毒 File-infecting Virus；②引导区病毒 Boot Sector Virus
③邮件病毒 Email Virus；④宏病毒 Micro Virus
⑤脚本病毒 Script Virus；⑥木马 Trojan Horses
⑦远程访问木马 Remote Access Trojan,RAT；⑧炸弹 Bomb；⑨蠕虫 Worm
1.病毒 Viruses
把一个程序定义为病毒的唯一要求是它可以自我复制。
病毒的 3 个特征：隐蔽性、破坏性、可传播性。
①病毒传播 Virus Propagation
借助于大意的计算机用户可通过交换磁盘、共享网络资源、发送电子邮件或其他共享数据
的手段来传播。有 4 种常见的传播技术：主引导记录感染、文件感染、宏感染和文件注入。
引导区病毒，引导扇区和主引导记录 master boot record infection
主引导记录 MBR 是一个单独的磁盘扇区，通常是在启动过程的初始阶段读取的介质的第一
个扇区。MBR 决定介质的哪个部分包含操作系统，并且随后指导系统读取对应部分的引导扇区，
以便加载操作系统。MBR 病毒将系统重定向到被感染的引导扇区，在从合法引导扇区加载操作
系统之前将病毒加载到内存中。引导扇区病毒实际上感染合法的引导扇区，并且在操作系统加
载过程中被加载到内存中。主引导记录感染主引导记录病毒(MBR)是己知的最早的病毒感染形
式。由于 MBR 非常小(通常只有 512 字节)，因此它不能包含实现病毒传播和破坏功能所需的所
有代码。为了避开空间的限制 MBR 病毒引导系统读取并且执行在另一个地方存储的代码，从而
将全部的病毒加载到内存中。
文件程序感染病毒 file infection
感染病毒的可执行文件。
宏病毒 macro infection
用宏语言编写的病毒，独立于平台，利用应用软件允许运行脚本的功能，像 Visual Basic
for Applications (VBA)什么的。由于许多应用程序都允许宏程序嵌入到文档中，当打开文档
时，程序会自动运行。这提供了病毒传播的不同机制。
服务注入病毒 service injection
注入到操作系统中的可信运行进程中，如 svchost.exe 、winlogoin.exe 和 explorer.exe
等。通过成功地使这些可信的进程，恶意代码能够绕过主机上安装的任意反病毒软件的检测。
2.其它病毒类型
压缩病毒
另外一种类型的病毒，把自身附着在系统的可执行程序上，利用用户的权限压缩。
隐蔽性病毒(stealth virus)
隐藏它对文件和引导记录所做的修改，这可以通过监视系统读取文件和扇区的功能并伪造
结果来完成。
多态性病毒
产生自己不同的可操作副本。多态性病毒没有任何部分相同，很难直接根据病毒特征来检
测它们。
分体病毒(multipart virus)
—247—
也叫多方病毒，它有几个组件，可以分布在系统上不同部分。它以多个方式感染和传播，
即便被识别也很难完全清除。
自乱码病毒(sel-garbling virus)
通过打乱自身代码使之不与预定义的病毒特征相匹配，从而可以逃避防病毒软件的检测。
大脑模仿病毒(meme virus)
实际上并不是计算机病毒，而是一种在网络上不断转发的电子邮件。
蠕虫(Worm)
它们无须主机应用程序便可自我繁殖，是自我约束程序。
其它还有：混合型病毒 multipartite、邮件病毒、脚本病毒(script virus)、隧道病毒
(tunneling virus)什么的。
3.病毒技术 Virus Technologies
搞清四种类型的病毒：复合病毒、隐形病毒、多态病毒和加密病毒。
①复合病毒 Multipartite Viruses
复合病毒使用多种传播技术来渗透只有单一防御手段的系统。例如，在 1993 年发现的
Marzia 病毒既是一种文件感染程序病毒，也是一种引导扇区病毒。（有多种手段传播）
②隐形病毒 Stealth Viruses
隐形病毒对操作系统进行篡改，从而欺骗反病毒软件，将自己隐藏起来。
③多态病毒 Polymorphic Viruses
在系统间传输时，多态病毒会修改自己的代码，自动产生各种变种，使得特征型反病毒软
件包失效。
④加密病毒 Encrypted Viruses
类似多态病毒，每个被感染的系统呈现不同的特征。不过，加密病毒不是通过改变其代码
生成这些修改过的特征，而是修改了在磁盘上的存储方式。即对存储在磁盘上其他地方的主病
毒代码进行加载和解密。因为每个感染过程都使用不同的密钥，所以感染的系统会呈现出完全
不同的样子。不过，病毒解密程序往往包含指定特征，因此加密病毒很容易被更新的反病毒软
件包识破。
3.逻辑炸弹 Logic Bombs
逻辑炸弹是感染了系统但一直保持休眠状态的恶意代码（病毒），当达到或满足一个或多
个逻辑条件(例如时间、程序启动、Web 站点登录等)时，它被触发。
4.特洛伊木马 Trojan Horses
各种木马，不解释。是恶意代码，不是病毒。
5.僵尸网络 Botnets
僵尸网络(botnet)由 Internet 上被僵尸主控者/僵尸牧人(botmaster)控制的众多计算机
(肉机 bot)组成。
6.蠕虫 Worms
蠕虫是不需要任何人为的干预就可以自我传播的病毒。互联网上发生的首例安全事件就是
蠕虫病毒。可以关注一下震网病毒（STUXNET），它是蠕虫，但它带来的更多研究都是关于 APT
攻击的。
—248—
7.反病毒机制 Antivirus Mechanisms
基本上就是特征检测了，需要一个极大的病毒特征库，如果查到病毒，有 3 各处理方法：
①如果可以杀毒，那么杀。
②如果不知道怎么杀，那么隔离，等管理员分析处理。
③如果文件无法隔离又很危险，直接删除。
另一种方法就是启发式的机制 heuristic-based mechanisms。这些方法通过分析软件的
行为，来寻找病毒活动的迹象，如：试图提升权限级别，掩盖他们的电子痕迹什么的。几乎所
有防病毒软件产品都使用“启发式检测(heuristic detection)”，这种方法会分析恶意代码
的总体结构，评估编码指令和逻辑功能，并研究病毒或蠕虫内的数据类型。因此，它收集与这
段代码有关的大量信息，并评估其作为恶意代码的可能性。这种方法采用一个“可疑性计数器”，
该计数器的计数将随着程序发现潜在的恶意属性的增多而递增。如果计数器超过某个预先设定
的限值，那么就确认该代码为危险代码，防病毒软件会立即采取行动以对系统进行保护。这使
得防病毒软件能够检测出未知的恶意软件，而不是仅仅依靠病毒特征。
还有一种方法是 Tripwire 数据完整性保证软件包，用于检测发生了未授权的文件修改，
它要维护一个系统所有存储文件的散列值的数据库来实现完整性检测。
二、应对措施
培训和明确的安全策略可以大大减少用户的危险。一些指南也给出了应对恶意软件的最佳
实践：*不要双击附件；*当发送附件的时候，提供一个明确和具体的对附件内容的描述；*把
不要盲目地使用应用最广泛的产品作为公司标准；*禁用 Windows 脚本宿主，如 ActiveX、
VBScript、和 JavaScript；*不要发送 HTML 格式的电子邮件；*使用一个以上的扫描器，并扫
描一切。
针对恶意代码的主要防护手段是使用反病毒过滤软件。这些软件都是基于特征库的，要重
点关注 3 个方面的问题：一是客户端都要安装使用并更新反病毒软件；二是保护服务器更重要；
三是有必要能网络通信流量进行过滤。对于没有更新库的新型病毒，也要采取相应的措施：
一是使用完整性检查软件(例如 Tripwire)扫描文件系统中异常的更改并定期报告。
二是应当严格地维护和实施访问控制，限制恶意代码传播和破坏能力。
此外，还有 3 种方法可以防范嵌入到活动进程的恶意代码：
①Java 的沙箱技术为 applet 提供了一个隔离的环境。
②ActiveX 控件签名技术利用数字签名确保代码来自可信源。
③通过白名单机制，在操作系统只允许己知的良好的应用程序运行，阻止未知程序。
1.防病毒软件的检测机制：
①特征型检测(Signature-based detection (also called fingerprint detection))：
分析恶意代码特征并提取为分析恶意软件的指纹，时新病毒没有用。
②启发式检测(heuristic detection)：分析恶意代码的整体结构，评估编码指令和逻样
功能，并研究病毒的数据类型。其中，审查与代码有关的信息称为静态分析(static analysis)，
而允许一部分代码在受控的环境中运行，称为动态分析(dynamic analysis)。
③沙箱或虚拟机(virtual machine or sandbox)：允许可疑代码中的某种逻辑在这个受保
护的环境中运行。使得防病毒软件可以动态的检查可疑代码，获得与该代码有关的信息。
—249—
④行为阻止器(behavior Mockers)
防病毒软件发展的下一个阶段称为行为阻止器(behavior blocker)，自动阻止以下行为：
*写入启动文件或注册表中的 RUM 健；*打开、侧除或修改文件；*在电子邮件中插入脚本，并
发送可执行代码；*连接到网络共享文件或资源；*修改一个可执行文件的逻辑等。
另一种分类将恶意软件或杀毒软件的机制分为 3 种：
迄今为止，有三种主要类型，首次由 Fred Cohen 在他的研究中讨论：
①已知特征码扫描。——类似基于签名的 IDS。
②活动监控。——类似基于规则的 IDS。
③变化检测。——类似基于统计的 IDS。
三、密码攻击 Password Attacks
1.密码猜测攻击 Password Guessing
凭经验，用一个好的密码字典就可以轻松猜解弱口令。
2.字典攻击 Dictionary Attacks
字典攻击很常见了，对于散值存储的密码可以用彩虹表来破。
至于社会工程学攻击，就不多说了，反正会忽悠比什么都来得快。
四、应用程序攻击
1.缓冲区溢出 Buffer Overflows
输入内存的数据太大，就会“溢出”其存储空间（编程函数先定义一个变量 var 什么的，
执行时操作系统会给程序一个内存空间的），溢到隔壁的存储空间里，可能被正常执行了或影
响别的进程了。利用缓冲区溢出漏洞可以在服务器上执行任意代码。
许多编程语言对变量的长度不强制实施限制，这就要求编程人员对代码进行边界检查。只
要允许用户输入程序变量，编程人员就应当采取有效措施，确保满足下列各项条件：
①用户输入的值的长度不能超过任何存放它的缓冲区的大小。
②用户不能向保存输入值的变量类型输入无效的值。
③用户输入的数值不能超出程序规定的参数操作范围。
如果没有执行对上述条件的简单检查，那么就可能造成缓冲区溢出漏洞。
2.检验时间/使用时间攻击 Time of Check to Time of Use（必考）
也称为异步攻击(asychronous attack)，有的人把竞争条件（race condition）也看作是
这种攻击，其实是不一样的，竞争条件是改变进程的顺序（排序）；TOC/TOU 是进入 2 个进程
之间进行更改（插队）。
检验时间到使用时间(time-of-check-to-time-of-use，TOCTTOU 或 TOC/TOU)是一个时间
型漏洞，当程序检查访问许可权限的时间早于资源请求的时间时，就会出现这种问题。例如，
如果操作系统针对用户登录建立了一个综合的访问许可权限列表并且在整个登录会话期间查
询这个列表，那么就存在 TOC/TOU 漏洞。如果系统管理员取消了某个特殊的权限，那么这个限
制只有在用户下次登录时才会起作用。如果在用户登录的时候正好发生取消访问许可权限的操
作，那么用户是否能够访问资源就是不确定的。用户只需保留会话打开数天之久，新的限制就
永远不会被应用。
—250—
对策：系统应当使用原子操作；操作系统可以使用软件锁。