by pychar simply due to diﬀerent network interface cards in the end nodes.
172
S. Alcock, A. McGregor, and R. Nelson
5 Possible Solutions
The diﬃculty in trying to eliminate the variation in capacity estimates for topo-
logically equivalent links is that the variation in minimum round trip times for
any given packet size is very small. For example, the diﬀerence between minimum
RTTs for a 288 byte packet on the two switch links described in Fig. 4 is only
20 microseconds. This is the diﬀerence in processing time for the packet on two
diﬀerent Ethernet adaptors. The diﬀerence in RTTs is consistent across multiple
tests so the problem cannot be resolved by increasing the number of probes.
Instead, solutions that eliminate the processing time of the network cards from
the serialization estimates must be considered.
5.1 Hardware Measurement
The ﬁrst possible solution investigated involves using DAG passive measurement
cards to capture timestamps immediately after the packets have been transmit-
ted. Designed to capture and record details of every packet passing through
them, DAG cards are GPS synchronized network monitoring cards capable of
timestamping at a better than 100 nanosecond resolution [9]. By placing DAG
cards at each end of a link, the network card serializations can be bypassed,
eliminating the variability that causes topologically equivalent links to produce
diﬀerent capacity estimates under pychar. DAG cards also oﬀer more precise
timing than the operating system based timing used by pychar.
If two hosts, X and Y, are both connected to DAG cards, as seen in Fig.
5, and a packet is sent between them, the outgoing timestamp is generated at
DAG 1 rather than at Host X. When the packet reaches DAG 2, an incoming
timestamp is generated. Host Y sends a response packet back to Host X which is
timestamped again as it passes through each of the DAG cards on the way back.
If the diﬀerence between the DAG 2 timestamps (the turnaround time at Host
Y) is subtracted from the diﬀerence between the DAG 1 timestamps, which is
eﬀectively the round trip time minus the initial serialization delay, the result is
the round trip time for the packet travelling from DAG 1 to DAG 2. The hosts
are removed from the round trip time calculation without altering the link in
any signiﬁcant way.
The results of probing some two switch links using dual DAG cards are pre-
sented in the rightmost column in Table 2. Instead of the 1 Mbps diﬀerence
between estimates for links that had diﬀerent network interface card conﬁgura-
tions, the diﬀerence is reduced to less than 100 Kbps. Hence, using DAG cards
reduces the problems caused by diﬀerent network cards to a negligible level. Ap-
plying this solution requires that there be a DAG card connected to both ends
of every probed link. It is neither practical nor economic to deploy DAG cards
on every host in a network of non-trivial size. However, deploying a single DAG
card on the host that would be initiating all the pychar probes remains practi-
cal. This will allow for much more accurate and consistent capacity estimation
due to the increased timing precision. It will also eliminate any variation at the
sending end of the link, meaning that only the receiving network card will aﬀect
the pychar estimates. This means that there will only be two groups of links in
Using Simple Per-Hop Capacity Metrics
173
Fig. 5. This diagram demonstrates how DAG cards can be used to eliminate the eﬀects
of the network interface cards. Connecting both ends of a link to DAG cards means
that timestamps can be captured after the initial serialization delays, removing any
hardware variability from the round trip time measurement
pychar Results using DAG Cards - Topologically Equivalent Links
i
)
s
(
e
m
T
p
i
r
T
d
n
u
o
R
 0.0005
 0.00045
 0.0004
 0.00035
 0.0003
 0.00025
 0.0002
 0.00015
 0.0001
 200
 400
 600
 800
 1000
 1200
 1400
 1600
Packet Size (bytes)
"DAG_18to21"
"DAG_5to1"
"DAG_1to18"
Fig. 6. A graphical illustration of how placing DAG cards at each end of a link can
eliminate the variability in pychar estimates. The links depicted above are the same
links seen in Fig. 4. On this occasion, each link produces exactly the same slope and,
as a result, exactly the same capacity estimate
the test network instead of three: links that have a Mikrotik card at the receiving
end and links that have a Realtek card at the receiving end.
Two Packet Probing
5.2
Another approach to factoring out the eﬀects of diﬀerent network interface cards
involves the use of a diﬀerent type of probe prior to running pychar to calibrate
the system and provide a reference point that includes the adverse eﬀect of the
Ethernet card present at the receiving end of the link. To do this, an estimation
technique that does not underestimate capacity due to the presence of switches
174
S. Alcock, A. McGregor, and R. Nelson
but is aﬀected by the network interface card is needed to provide a base estimate.
This base estimate will act as a replacement for the nominal capacity required
for the serialization calculation described above. As a result, this would also
remove the need for the nominal capacity of the link to be known in advance.
Capacity estimation techniques that use back to back packets to estimate
link capacity are typically unaﬀected by the presence of switches in the link [10].
Rather than using round trip times as the metric upon which the capacity esti-
mates are based, these techniques involve sending two response-seeking packets
back to back to the target machine and using the distance between the two re-
sponse packets to calculate a estimate of link capacity. Similar to VPS capacity
estimation techniques, back to back packet methods generate their estimate by
inverting the slope of the packet size versus the distance between response pack-
ets line. Diﬀerent back to back packet techniques apply the varying packet size
diﬀerently.
The three back to back packet methods that will be investigated are packet
pairing, packet tailgating and a leading packets method. Packet pairing involves
sending two packets of the same size back to back across a link. The idea is that
the trailing packet will queue behind the ﬁrst packet at the link bottleneck but
will not be able to catch up any further, so that upon arrival the gap between the
two packets is equal to the serialization delay at the bottleneck. Under packet
tailgating, the packet doublet consists of a packet that will vary in size and a
trailing packet that is always very small in size. This technique has is similar
conceptually to packet pairing. By contrast, a leading packet doublet is made
up of a small ﬁxed size leading packet and a variable size trailing packet. Un-
like packet pairing and packet tailgating, the leading packets method is not a
recognised capacity estimation technique and is a variation on packet tailgating
created for the purposes of this project. The gap between the two packets is due
to the longer serialization time of the second (larger) packet, but it includes the
cumulative serializations of all devices on the link. The numbers produced by
this method should be not be seen as capacity estimates. However, the leading
packets method may produce results that describe characteristics of the link that
the other two methods do not.
A prototype Linux kernel module has been written to enable experimentation
with back to back packet theories. A kernel module was used because initial
testing with a Python script has shown that a user space application requires
too much overhead when sending packets, making it virtually impossible to send
packets in an optimal back to back manner. Speciﬁcally, the aim is to investigate
if there is any useful relationship between estimates produced by back to back
packet methods and estimates produced by VPS methods that allows the variable
eﬀects of network cards to be factored out. Packet size selection is performed in
the same manner as in pychar: random selection without replacement from a list
of possible sizes. In the case of packet pairing, both packets are created to be
the selected size. Under packet tailgating and the leading packets method, the
ﬁrst and trailing packets are set to be the selected size, respectively. To prevent
inaccuracies due to queuing, each packet size is used multiple times, as in pychar,
Using Simple Per-Hop Capacity Metrics
175
and the minimum distance between packets is used as the metric for each packet
size.
None of these back to back methods have proven eﬀective in eliminating the
turnaround time at the receiving end of the link. Although there is not enough
space for a detailed discussion of the results produced by those techniques here,
they were either too inconsistent or failed to exhibit the eﬀects of the receiving
network card. As a result, the major problem with this technique remains un-
resolved. Until it is, it is not possible to produce a generic link layer topology
discovery tool that uses variable packet size capacity estimation techniques to
gather information about each link.
6 Future Work and Conclusion
The results produced when using dual DAG cards show that a tool such as pychar
can be used for link layer topology discovery in more heterogenous environments,
provided the variation in Ethernet adaptor serialization delay can be factored
out.
While placing DAG cards at the end of every link in a network is impractical,
it may still be possible to create a viable hardware-based solution. A device
that can be inserted at each end of link could run pychar and discover the link
layer topology between two such devices. Because the devices will all have the
same hardware (and possibly DAG cards doing the timing) variation in network
interface card is non-existent. The device can simply account for the known
eﬀects of the particular brand of card it uses, if necessary. The only drawback
to such an approach is that only a single link can be dealt with at any given
time, rather than an entire network. Probing multiple links will require manual
movement of the devices to the appropriate endpoints.
However, even without hardware assistance, the progress that has been made
up to this point still has some more speciﬁc uses. If a network is known to contain
switches that are all the same capacity (our test network being a prime example,
see Fig. 3), then simply rounding the serialization estimates will produce the
correct results. Such a network is usually small enough that link layer topology
discovery is not necessary but there may be some occasions where pychar could
prove useful, especially for troubleshooting.
A number of further practical issues with the pychar-based technique not
addressed in this paper will require future work. This includes ﬁnding a method
for detecting cut-through devices such as hubs. Also, this paper has not de-
tailed how the link layer information will be combined to create a topology map.
Some rudimentary thought has been given to this problem without settling on
a comprehensive solution. Finally, the emulated network that pychar has been
tested on is very homogeneous with regard to operating systems, host hardware,
and both the capacity and manufacturer of the switches. Further testing on
more varied networks will be required to reveal problems similar to the network
interface card problem. However, all these outstanding issues are irrelevant if the
176
S. Alcock, A. McGregor, and R. Nelson
problem with diﬀering serialization delays on the network interface cards cannot
be resolved.
The next step for the VPS-based link layer topology discovery project is to
investigate other measurement techniques that might be able to provide infor-
mation that will allow the eﬀects of the network interface cards to be factored
out. At this stage, given the failure of back to back packet capacity estimation
methods to provide such information, we do not know of any techniques that
might be of use for this purpose. However, that seems the only way forward for
a software-based solution that utilizes VPS capacity estimation.
Although variable packet size capacity estimation appears to be a viable
tool for inferring link layer topology information, it is susceptible to the eﬀects
of diﬀerent varieties of network interface cards. Back to back packet capacity
estimation techniques have proven ineﬀective in factoring out these eﬀects. As a
result, although pychar can provide link layer topology information under speciﬁc
conditions, it is currently not a viable link layer topology discovery technique in
a generic environment.
References
1. D. T. Stott, “Layer-2 Path Discovery Using Spanning Tree MIBs,” Avaya Labs
Research, Avaya Inc, March 7 2002.
2. Y. Bejerano, Y. Breitbart, M. Garofalakis, and R. Rastogi, “Physical Topology
Discovery in Large Multi-Subnet Networks,” IEEE Infocom 2003.
3. B. Lowekamp, D. R. O’Hallaron, and T. R. Gross, “Topology Discovery for Large
Ethernet Networks,” in Proceedings of ACM SIGCOMM, San Diego, California,
Aug. 2001.
4. R. S. Prasad, C. Dovrolis, and B. A. Mah, “The Eﬀect of Layer-2 Store-and-
Forward Devices on Per-Hop Capacity Estimation,”
http://citeseer.ist.psu.edu/prasad03eﬀect.html/, 2003.
5. V. Jacobson, “Pathchar: A Tool to Infer Characteristics of Internet Paths,”
ftp://ftp.ee.lbl.gov/pathchar/, April 1997.
6. B. A. Mah, “pchar: a Tool for Measuring Internet Path Characteristics,”
http://www.employees.org/˜bmah/Software/pchar/, February 1999.
7. A. Downey, “clink: a Tool for Estimating Internet Link Characteristics,”
http://allendowney.com/research/clink/, 1999.
8. http://www.wand.net.nz/˜bcj3/emulation/
9. Endace Measurement Systems, http://www.endace.com/networkMCards.htm
10. K. Lai and M. Baker, “Measuring Link Bandwidths Using a Deterministic Model
of Packet Delay,” SIGCOMM 2000, pp. 283-294.