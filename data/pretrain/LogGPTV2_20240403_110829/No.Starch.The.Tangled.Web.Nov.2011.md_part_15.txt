functions created by the loaded scripts. All scripts executing in the context
ofa particular document share this common sandbox and can also interact
with other contexts through browser-supplied APIs. Such cross-document
interactions must be done in a very explicit way; accidental interference is
unlikely. Superficially, script-isolation rules are reminiscent of the process-
compartmentalization model in modern multitasking operating systems but
a lot less inclusive.
Within a particular execution context, all encountered JavaScript blocks
are processed individually and almost always in a well-defined order. Each
code block must consist of any number of self-contained, well-formed syntax
units and will be processed in three distinct, consequent steps: parsing, func-
tion resolution, and code execution.
Parsing
The parsing stage validates the syntax of the script block and, usually, con-
verts it to an intermediate binary representation, which can be subsequently
executed at a more reasonable speed. The code has no global effects until
this step completes successfully. In case of syntax errors, the entire problem-
atic block is abandoned, and the parser proceeds to the next available chunk
of code.
Browser-Side Scripts 97
To illustrate the behavior of a compliant JavaScript parser, consider the
following HTML snippet:
block #1: 
block #2: 
Contrary to what developers schooled in C may be accustomed to, the
above sequence is not equivalent to the following snippet:
This is because  blocks are not concatenated before parsing.
Instead, the first script segment will simply cause a syntax error (an assign-
ment with a missing right-hand value), resulting in the entire block being
ignored and not reaching execution stage. The fact that the whole segment
is abandoned before it can have any global side effects also means that the
original example is not equivalent to this:
This sets JavaScript apart from many other scripting languages such as
Bash, where the parsing stage is not separated from execution in such a
strong way.
What will happen in the original example provided earlier in this section
is that the first block will be ignored but the second one ()
will be parsed properly. That second block will amount to a no-op when exe-
cuted, however, because it uses a pure, numerical expression as a code
statement.
Function Resolution
Once the parsing stage is completed successfully, the next step involves regis-
tering every named, global function that the parser found within the cur-
rently processed block. Past this point, each function found will be reachable
98 Chapter 6
from the subsequently executed code. Because of this extra pre-execution
step, the following syntax will work flawlessly (contrary to what programmers
may be accustomed to in C or C++, hello_world() will be registered before the
first code statement—a call to said function—is executed):
On the other hand, the modified example below will not have the
desired effect:
This modified case will fail with a runtime error because individual
blocks of code are not processed simultaneously but, rather, are looked at
based on the order in which they are made available to the JavaScript engine.
The block that defines hello_world() will not yet be parsed when the first block
is already executing.
To further complicate the picture, the mildly awkward global name reso-
lution model outlined here applies only to functions, not to variable declara-
tions. Variables are registered sequentially at execution time, in a way similar
to other interpreted scripting languages. Consequently, the following code
sample, which merely replaces our global hello_world() with an unnamed
function assigned to a global variable, will not work as planned:
In this case, the assignment to the hello_world variable will not be done by
the time the hello_world() call is attempted.
Browser-Side Scripts 99
Code Execution
Once function resolution is completed, the JavaScript engine normally
proceeds with the ordered execution of all statements outside of function
blocks. The execution of a script may fail at this point due to an unhandled
exception or for a couple of other, more esoteric reasons. If such an error is
encountered, however, any resolved functions within the offending code
block will remain callable, and any effects of the already executed code will
persist in the current scripting context.
Exception recovery and several other JavaScript execution characteristics
are illustrated by the following lengthy but interesting code snippet:
 exception triggered inside hello_world().
The previous exception will not
prevent this independent block
from executing next.
Try to follow this example on your own and see if you agree with the
annotations provided on the right.
As should be evident from this exercise, any unexpected and unhandled
exceptions have an unusual consequence: They may leave the application in
an inconsistent but still potentially executable state. Because exceptions are
meant to prevent error propagation caused by unanticipated errors, this
design is odd—especially given that on many other fronts (such as the ban
on goto statements), JavaScript exhibits a more fundamentalist stance.
Execution Ordering Control
In order to properly analyze the security properties of certain common web
application design patterns, it is important to understand the JavaScript
engine’s execution ordering and timing model. Thankfully, this model is
remarkably sane.
100 Chapter 6
Virtually all JavaScript living within a particular execution context is exe-
cuted synchronously. The code can’t be reentered due to an external event
while it is still executing, and there is no support for threads that would be able
to simultaneously modify any shared memory. While the execution engine is
busy, the processing of events, timers, page navigation requests, and so on, is
postponed; in most cases, the entire browser, or at least the HTML renderer,
will also remain largely unresponsive. Only once the execution stops and the
scripting engine enters an idle state will the processing of queued events
resume. At this point, the JavaScript code may be entered again.
Further, JavaScript offers no sleep(...) or pause(...) function to temporarily
release the CPU and later resume execution from the same location. Instead,
if a programmer desires to postpone the execution of a script, it is necessary to
register a timer to initiate a new execution flow later on. This flow will need
to start at the beginning of a specified handler function (or at the beginning
of an ad hoc, self-contained snippet of code provided when setting up a timer).
Although these design decisions can be annoying, they substantially reduce
the risk of race conditions in the resulting code.
NOTE There are several probably unintentional loopholes in this synchronous execution model.
One of them is the possibility of code execution while the execution of another piece of
JavaScript is temporarily suspended after calling alert(...) or showModalDialog(...).
Such corner cases do not come into play very often, though.
The disruptive, browser-blocking behavior of busy JavaScript loops requires
the implementation of some mitigation on the browser level. We will explore
these mitigations in detail in Chapter 14. For now, suffice it to say that they
have another highly unusual consequence: Any endless loop may, in fact, ter-
minate, in a fashion similar to throwing an unhandled exception. The engine
will then return to the idle state but will remain operational, the offending
code will remain callable, and all timers and event handlers will stay in place.
When triggered on purpose by the attacker, the ability to unexpectedly
terminate the execution of CPU-intensive code may put the application in an
inconsistent state by aborting an operation that the author expects to always
complete successfully. And that’s not all: Another, closely related conse-
quence of these semantics should become evident in “JavaScript Object
Notation and Other Data Serializations” on page104.
Code and Object Inspection Capabilities
The JavaScript language has a rudimentary provision for inspecting the
decompiled source code of any nonnative functions, simply by invoking the
toString() or toSource() method on any function that the developer wishes to
examine. Beyond that capability, opportunities to inspect the flow of programs
are limited. Applications may leverage access to the in-memory representa-
tion of their host document and look up all inlined  blocks, but there
is no direct visibility into any remotely loaded or dynamically generated code.
Some insight into the call stack may also be gained through a nonstandard
caller property, but there is also no way to tell which line of code is being cur-
rently executed or which one is coming up next.
Browser-Side Scripts 101
The ability to dynamically create new JavaScript code is a more promi-
nent part of the language. It is possible to instruct the engine to synchro-
nously interpret strings passed to the built-in eval(...) function. For example,
this will display an alert dialog:
eval("alert(\"Hi mom!\")")
Syntax errors in any input text provided to eval(...) will cause this func-
tion to throw an exception. Similarly, if parsing succeeds, any unhandled
exceptions thrown by the interpreted code will be passed down to the caller.
Finally, in the absence of syntax errors or runtime problems, the value of the
last statement evaluated by the engine while executing the supplied code will
be used as the return value of eval(...) itself.
In addition to this function, other browser-level mechanisms can be
leveraged to schedule deferred parsing and execution of new JavaScript
blocks once the execution engine returns to the idle state. Examples of such
mechanisms include timers (setTimeout, setInterval), event handlers (onclick,
onload, and so on), and interfaces to the HTML parser itself (innerHTML,
document.write(...), and such).
Whereas the ability to inspect the code is somewhat underhanded, run-
time object introspection capabilities are well developed in JavaScript. Appli-
cations are permitted to enumerate almost any object method or property
using simple for ... in or for each ... in iterators and can leverage operators
such as typeof, instanceof, or “strictly equals” (===) and properties such as
length to gain additional insight into the identity of every discovered item.
All of the foregoing features make it largely impossible for scripts run-
ning in the same context to keep secrets from each other. The functionality
also makes it more difficult to keep secrets across document contexts, a prob-
lem that browser vendors had to combat for a very long time—and that, as
you’ll learn in Chapter 11, is still not completely a thing of the past.
Modifying the Runtime Environment
Despite the relative simplicity of the JavaScript language, executed scripts
have many unusual ways of profoundly manipulating the behavior of their
own JavaScript sandbox. In some rare cases, these behaviors can impact
other documents, as well.
Overriding Built-Ins
One of the more unusual tools at the disposal of a rogue script is the ability
to delete, overwrite, or shadow most of the built-in JavaScript functions and
virtually all browser-supplied I/O methods. For example, consider the behav-
ior of the following code:
// This assignment will not trigger an error.
eval = alert;
// This call will unexpectedly open a dialog prompt.
eval("Hi mom!");
102 Chapter 6
And this is just where the fun begins. In Chrome, Safari, and Opera, it is
possible to subsequently remove the eval(...) function altogether, using the
delete operator. Confusingly, attempting the same in Firefox will restore the
original built-in function, undoing the effect of the original override. Finally,
in Internet Explorer, the deletion attempt will generate a belated exception
that seems to serve no meaningful purpose at that point.
Further along these lines, almost every object, including built-ins such as
String or Array, has a freely modifiable prototype. This prototype is a master
object from which all existing and future object instances derive their meth-
ods and properties (forming a crude equivalent of class inheritance present
in more fully featured programming languages). The ability to tamper with
object prototypes can cause rather counterintuitive behavior of newly cre-
ated objects, as illustrated here:
Number.prototype.toString = function() {
return "Gotcha!";
};
// This will display "Gotcha!" instead of "42":
alert(new Number(42));
Setters and Getters
More interesting features of the object model available in contemporary dia-
lects of JavaScript are setters and getters: ways to supply custom code that han-
dles reading or setting properties of the host object. Although not as powerful
as operator overloading in C++, these can be used to make existing objects or
object prototypes behave in even more confusing ways. In the following snip-
pet, the acts of setting the object property and reading it back later on are
both subverted easily:
var evil_object = {
set foo() { alert("Gotcha!"); },
get foo() { return 2; }
};
// This will display "Gotcha!" and have no other effect.
evil_object.foo = 1;
// This comparison will fail.
if (evil_object.foo != 1) alert("What's going on?!");
NOTE Setters and getters were initially developed as a vendor extension but are now standard-
ized under ECMAScript edition 5. The feature is available in all modern browsers but
not in Internet Explorer 6 or 7.
Impact on Potential Uses of the Language
As a result of the techniques discussed in the previous two sections, a script
executing inside a context once tainted by any other untrusted content has
no reliable way to examine its operating environment or take corrective
Browser-Side Scripts 103
action; even the behavior of simple conditional expressions or loops can’t
necessarily be relied upon. The proposed enhancements to the language are
likely to make the picture even more complicated. For example, the failed
proposal for ECMAScript edition 4 featured full-fledged operator overload-
ing, and this idea may return.
Even more interestingly, these design decisions also make it difficult to
inspect any execution context from outside the per-page sandbox. For example,
blind reliance on the reliability of the location object of a potentially hostile doc-
ument has led to a fair number of security vulnerabilities in browser plug-ins,
JavaScript-based extensions, and several classes of client-side web application
security features. These vulnerabilities eventually resulted in the development
of browser-level workarounds designed to partially protect this specific object
against sabotage, but most of the remaining object hierarchy is up for grabs.
NOTE The ability to tamper with one’s own execution context is limited in the “strict” mode of
ECMAScript edition 5. This mode is not fully supported in any browser as of this writ-
ing, however, and is meant to be an opt-in, discretionary mechanism.
JavaScript Object Notation and Other Data Serializations
A very important syntax structure in JavaScript is its very compact and conve-
nient in-place object serialization, known as JavaScript Object Notation, or
JSON (RFC 46274). This data format relies on overloading the meaning of
the curly bracket symbol ({). When such a brace is used to open a fully quali-
fied statement, it is treated in a familiar way, as the start of a nested code block.
In an expression, however, it is assumed to be the beginning of a serialized