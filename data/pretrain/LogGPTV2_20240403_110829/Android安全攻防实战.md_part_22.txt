return insertStatement,executeInsert ():
注意，我们调用了cxccutelnsert，这么一个辅助方法，它会返回新创建的这
个行的 ID。使用 SQLiteStatement 语句就这么简单。
3.下面显示了如何使用SQLiteDatabase.query去获取与指定搜索条件相匹配的
RssItems.
public List fetchRssItemsByTitle (String searchTerm)(
Cursor cursor = db.query (TABL&_NAME, nu11, COL_TITL& + "LIKE ?",
nev String[] ( "s" + searchTerm + "§" ), null, null, nul1):
// process cursor into list
List rssItems = new ArrayList() :
cursor,moveToFirst () :
while (1cursor,lsAfterLast ())(
// maps cursor columns of RssItem properties
RssItem item = cursorToRssItem (cursor) ;
rssItems add (item) =
cursor,moveToNext () :
return rssItems;
我们使用了LIKE和 SQL通配符语法来匹配title列文本中的任意部分。
拓展阅读
▪ The SQLiteDatabase class in the Android Developers Reference guide at https:/
developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html.
156
---
## Page 175
第5章保护app
● The SQLiteStatment class in the Android Developers Reference guide at https://
developer.android.com/reference/android/database/sqlite/SQLiteStatement.html.
° The Query Parameterization Cheat Sheet OWASP community page at
https:/www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet.
•SQLite expression at http://www.sqlite.org/lang_expr.html.
5.6验证app的签名（防篡改）
Android 安全的基石之一是所有的 app 都必须经过数字签名。app 的开发者使用
私钥，以证书的形式对app进行签名。在这过程中并不需要使用授权证书，事实上，
更常见的是使用自签名的证书。
证书中通常都会定义一个到期日期，而谷歌应用商店要求证书的过期时间在
2033年10月22日之后。这里强调了一个事实：我们的app的签名密钥将在app的
整个生命周期内保持不变。这样做的一个主要理由是：为了保护app一只有在原先
的和升级的.apk文件的签名是相同的情况下，才能让app 升级。
那么，如果既然已经进行了验证，为什么还要加入签名一致性的检查呢？
当攻击者修改你的app的.apk文件时，他也就破坏掉了原有的数字签名。这也就
意味着，如果他们想把这个.apk文件安装到一个Android设备上去的话，必须要用另
一个不同的密钥重新对它签名。这样做的动机有很多，从软件盗版到嵌入恶意代码
等不一而足。当攻击者修改了你的app之后，他们希望通过各个应用商店或者其他更
多的感染途径，比如电子邮件、Web站点或者论坛等去传播它。所以安排这个实验
的目的就是保护我们的app、商标或者用户，避免这类潜在的风险。幸运的是：在运
行时，Android app 可以查询 PackageManager 来得到app 的签名。这个实验演示了该
准备工作
这个实验中要使用Keytool这个命令行程序，请确认你已经创建了一个其中含有
你的签名私钥的.keystore文件。如果还没有，你可以使用 Eclipse 中的 Android 工具
导出向导，或者使用Keytool程序，在终端窗口中输入以下命令来创建一个你自己的
app签名私钥。
-alias alias_name -keyalg RSA -keysize 2048 -validity 10000
157
---
## Page 176
Android安全攻防实战
怎么做
一开始，你需要找出你的证书的 SHAI签名/指纹，我们将把它写死在app中，
并把它与运行时得到的结果相比较。
1.在终端窗口中使用Keytool，你可以输入以下命令：
0xoqsox ddexmoA 0xogsex-A- 4e-toogex
你会被提示输入你的keystore的口令。
（输入正确的口令之后）Keytool将输出存储在keystore中的所有密钥的详细
信息，找到你签名app 的密钥，在“certificate fingerprints”下面，你会看到
十六进制格式的 SHA1hash。在下面这个例子中，样本keystore 中某张证书
的SHA1 值是 71:92:0A:C9:48:6E:08:7D:CB:CF:5C:7F:6F:EC:95:21:35:85:BC:C5:,
如图5.1所示。
CertLficete[1]:
eovg,
 5.1
2.把 SHA1 hash 从终端窗口复制到你的 app 中去，在你的 Java .class 文件中，
把它定义为一个静态字符串。
3.删掉所有的冒号，你最终得到的是类似下面这一串东西。
private Static String CERTIFICATE_SHA1 -
"71920AC94868087DCBCF5C7F6FEC95213585BCC5*;
删掉所有冒号的一个简单又快速的方法是把hash复制-黏贴到下面这个Web
158
---
## Page 177
第5章保护app
站点上去，然后按下validate 按钮。
http://www.string-functions.com/hex-string.aspx
4.现在，我们要编写在运行时获取.apk文件的当前签名的代码了。
public static boolean validateAppSignature (Context context)[
try {
// get the signature form the package manager
PackageInfo packageInfo = context getPackageManagex ()
- getPackageInfo (context get:PackageName () ,
PackageNanager GET_SIGNATURES) /
Signature[] appSignatures = packageInfo,signatures,
//this sample only checks the first certificate
for (Signature signature 1 appSignatures) (
byte[] signatureBytes = signature.toByteArray();
String currentSignature = calcSHA1 (signatureBytes) /
//calc sha1 Ln hex
//compare signatures
return CERTIFICATE_SHA1 ,equalsIgr
}catch (Exception e)(
// if error assume failed to validate
return false:
5.我们把签名的SHA1hash存下来。现在，我们有了证书，我们应该算出它的
SHA1hash，并把它转换成与之前那个一样的（十六进制）格式。
private static String calcSHA1 (byte[] signature)
throws NoSuchAlgorithmException (
MessageDigest digest - MessageDigest - getInstance (*SHA1*) 
digest update (signature) 
byte[] signatureHash = digest.digest () =
return bytesTollex(signaturelash) ;
public static Stxing bytesTolex (byte [] bytes){
final char[] hexArray -(*0′, *1′, '2, *3′, *4′, '5′, *6′,
7", *8′,9, *A′, *B, *C', 'D′,*S, F′ ）
char[] hexChars = nev char [bytes.length • 2]
int v;
159
---
## Page 178
Android安全攻防实战
for (int j - 0;j >> 4]
hexChars[) * 2 + 1] = hexArray[v & 0×0F] )
return new String (hexChars) 
6.我们现在可以比较我们用来签名app 的证书的 hash与我们写死在其中的hash
是否一致了。如果一致，我们就能确信app没有被重新签名过。
CERTIFICATE_SHA1 ,equalsIgnoreCase (currentSignature) :
如果一切正常，现在运行的就是我们签名的.apk文件，那么validateAppSignatureO
方法就会返回true，否则，如果有人改动过.apk文件，重新对它微了签名，
currentSignature 就会与 CERTIFICATE_SHA1 不一致，validateAppSignatureO就会返
回 false 。
记住：要么以全部大写的方式存储hash，要么用
String.cqualsIgnoreCase(方法进行比较。
更多信息
这一技术被认为是足以应付当前自动对app进行重新打包攻击的。但是我们也必
须要了解其缺陷。由于签名证书的 hash 是被写死在.apk 文件里的，所以一个逆向工
程老手是能够仔细分析这个.apk文件，把这个 SHA1 hash 替换成新证书的hash 的。
此外，对verifyAppSignature方法的调用也可以被完全删除掉。但实现这两种攻击都
需要时间和逆向工程技巧。
说到签名，就不能不提一下 8219321这个bug。也就是Blackhat USA 2013 大会
上由 Blucbox security 公布的著名的 Master Key exploit 问题。这个 bug 已经被谷歌和
其他OEM厂商修补了。关于这个漏洞的详细故障原因和分析报告可以在
http:/www.saurik.com/id/17 .上找到。
检测到募改后的反击措施
当然，这个问题的答案是主观的，完全视你的app而定。明显且简单的解决方案
是：在启动时检查是否遭到纂改，如果发现纂改，就让app退出，或许可以弹出一个
消息向用户解释一下原因。此外，或许你想要知道自己的app是否已经被修改了，向
你自己的服务器发送一个通知是个不错的选择。另外，如果你没有服务器，也可以
使用 GoogleAnalytics 之类的分析包（analytics package），创建一个定制的“tamper”
160
---
## Page 179
第5章保护app
（遭慕改）事件，并且报告它。
如果是检测软件盗版，你可以禁用付费的app特性，对于游戏来说就是禁用多人
联机对战或者删除游戏存档/高分记录都是有效的威摄方式。
拓展阅读
。 The Advance code obfuscation with DexGuard rccipe later in this chapter, which
provides a useful complement to tamper protcction, making it more difficult for a
reverse engincer to find, understand, and importantly remove the tamper check.
●The Signing Your Applications page at the Android Developers site
(https://developer.android.com/tools/publishing/app-signing.html).
• The gist of the signature-check code at  https://gist.github.com/scottyab/
b849701972d57cf9562e.
·The Signature class in the Android Developers Reference guide at
https://developer.android.com/reference/android/content/pm/Signature.html.
 The PackageManager class in the Android Developers Rcference guide at https:/
developer.android.com/reference/android/content/pm/PackageManager.html.
• The Exploit (&: Fix) Android "Master Key" blog article describing the Master Key
cxploit at http://www.saurik.com/id/17.
● The Keytool Oracle  documentation at http://docs.oracle.com/javase/6/docs/
technotes/tools/windows/keytool.html.
5.7通过检测安装程序、模拟器、调试标志位反逆向工程
在这个实验中，我们将再看到三种，能够检查程序是否运行在被修改过的、已
经被黑掉的，或者恶意的环境中的检测方式。根据设计要求，一旦你打算发布app，
就应该激活这些检测。
怎么做··
这些反逆向工程检测代码可以在你的app的任意位置上运行，不过最明智的做法
是：让它们可以在一个单独的类或父类中多个地方被调用。
1.检查安装程序是不是谷歌应用商店
public static boolean checkGooglePlayStore (Context context)(
String LnstallerPackageName = context getPackageManager ()
 get InstallerPackageName (context , getPackageName () ) ;
161
---
## Page 180
Android安全攻防实战
return installerPackageName I= nu11
&& insta1lerPackageName,startsNlth (*com, google.android*) ;
2.检查自已是不是运行在一台模拟器中。
public static boolean isEmulator()[
try {
- forName (*android.os.SystemProperties*) ;
zzetq.adoxwease) Axadox.ao6 = nwetouzex ueotooq
"zo.kexnel qemu”) .length() > 0;
boolean hardwareGoldfish = getProperty (systemPropertyClazz,
(UeTpto_) sTembo* (_oxexpxeq*ox。
boolean modelSdk = getProperty(systemPropertyClazz,
"ro -product ,model") equals ("sdik*) 
1f (kernelQenu 11 hardwareGoldfish 1l modelSdk){
fen.z? uznqe.1
}catch (Bxception e){
// error assumes emulator
return false;
private static String getProperty (Class clazz, String
propertyName)
return (String) clazz.gotMethod (*get*, new Class[] ( String,
throws Exoeption [
c1ass })
.invoke (clazz, new Object[1 ( propertyName });
1
3.检查app 的可调试标志位是否被打开了—这是只有在开发阶段才应该被打
开的东西。
public static boolean isDebuggable (Context context)(
return (context,getApplicationInfo () .flags & ApplicationInfo.
FLAG_DEBUGGABLE) 1 0}
162
---
## Page 181
第5章保护app
工作原理
要检查安装程序是不是谷歌应用商店，只要检查作为安装程序的app的名称是否
与谷歌应用商店的相一致就可以了。尤其是，它会检查安装程序的包名是不是以
“com.google.android”开头的。如果你的程序只通过谷歌应用商店发布的话，这是个
很有用的检查。
Java的反射（reflection）API使得我们能在运行时检查类，方法及成员变量。这
就使我们能绕过访问控制修饰符（access modifier）的限制，调用正常情况下无法使
用的东西。模拟器检测代码中使用反射API去访问一个隐藏的系统类
（android.os.SystemProperties）。提醒一句：使用隐藏的API是有一定的风险的，因为
在不同的Android版本之间，隐藏的API可能会有改变。
当可调试标志位被打开时，app 可能会连上了Android调试桥进行复杂的动态分
析。可调试变量就是AndroidManifest.xml文件中元素的一个属性，要进
行动态分析，它可能是最简单也是最容易被盯上要会被修改的属性之一了。在第三
步中，我们看到了该如何通过ApplicationInfo对象检查可调试标志位的值。
更多信息
），
在发布到应用商店之后，如果检测到app是运行在一台模拟器或者正被调试之后，假
设app正在被分析和/或攻击是很合理的。因此，在这种情况下，采取一些更积极的
行动来挫败攻击，比如擦除应用中的数据或shared preference°，也是无可厚非的。不
过话虽如此，在你真要擦除用户的数据之前，请确认在你的用户协议中有此警告，
以规避任何潜在的法律问题。
拓展阅读
• The Advance code obfuscation with DexGuard recipe, which provides a useful
complement to tamper protection, making it more difficult for a reverse engincer to
find, understand, and importantly remove these tamper checks.
● The SystemProperties.java class from the Android source code at https://github.
com/android/platform_frameworks_base/blob/master/core/java/android/os/System
① SharedPreference 是Android 提供的一种轻量级的数据存健方式，主要用来存储一些简单的配置
信息，例如，默认欢迎语、登录用户名和密码等。其以键值对的方式存储，使得我们能很方便
进行读取和存入。—译者注
163
---