by user activity. Thus BINDER may not be able to cap-
ture these initial extrusions. However, BINDER can detect
the break-in later by observing the (cid:2)rst non-user triggered
connection. Also, BINDER clears user input history after
a compromised personal computer is restarted. So even
for the malware that received user input for its break-in,
BINDER is guaranteed to capture its (cid:2)rst connection as an
extrusion after the victim system is restarted.
4 System Implementation
4.1 BINDER Architecture
To capture extrusions, BINDER correlates information
across three sources: user-driven input, processes, and net-
work traf(cid:2)c. There are four components in BINDER: User
Monitor, Process Monitor, Network Monitor, and Extrusion
Detector. The (cid:2)rst three components independently collect
information from the operating system (OS) passively in
real time and report user, process, and network events to
the Extrusion Detector. APIs for real-time monitoring are
speci(cid:2)c to each operating system. We describe the imple-
mentation on Windows operating system in the second part
of this section. In the following, we explain the functional-
ity and interface of these components that are general to all
operating systems.
The User Monitor is responsible for monitoring user in-
put and reporting user events to Extrusion Detector. It re-
ports a user input event when a user clicks the mouse or hits
a key. A user input event has two components: the time
when it happens and the ID of the process that receives this
user input. This mapping between a user input and a process
is provided by the operating system. So the User Monitor
does not rely on the Process Monitor for process informa-
tion. Since a user input event has only the time information
and the Extrusion Detector only stores the last user input
event, BINDER avoids leaking user privacy information.
When a process is created or stopped, the Process Moni-
tor correspondingly reports to Extrusion Detector two types
of process events: process start and process (cid:2)nish. A pro-
cess start event includes the time, the ID of the process it-
self, its image (cid:2)le name, and the ID of the parent process.
A process (cid:2)nish event has only the time and the process ID.
The Network Monitor audits network traf(cid:2)c and reports
network events. For the interest of detecting extrusions, it
reports three types of network events: connection request,
data arrival and domain name lookup. For connection re-
quest events, the Network Monitor checks TCP SYN pack-
ets and UDP packets. A data arrival event is reported when
an inbound TCP or UDP packet with non-empty payload
is received from a normal outbound connections. Note that
the direction of a connection is determined by the direction
of the (cid:2)rst TCP SYN or UDP packet of this connection. The
Network Monitor also parses DNS lookup packets. It asso-
ciates a successful DNS lookup with a following connection
request to the same remote IP address as returned in the
lookup. This is important because DNS lookup may take
signi(cid:2)cant time between a user input and the corresponding
connection request. By analyzing 2644 DNS lookup times
on one of the computers in our real world experiments (see
Section 5), we observed that about 8% DNS lookups take
more than 2 seconds. A connection request event has (cid:2)ve
components: the time, the process ID, the local transport
port number, the remote IP address and the remote trans-
port port number. Note that the time is the starting time of
its DNS lookup if it has any or the connection itself. The
mapping between network traf(cid:2)c and processes is provided
by the operating system. A data arrival event has the same
components as a connection request event except that its
time is the time when the data packet is received. A do-
main name lookup event has the time, the domain name for
lookup, and a list of IP addresses mapping to it.
Except for domain name lookup results that are shared
the Extrusion Detector organizes
among all processes,
events based on processes and maintains a data record for
each process. A process data record has the following mem-
bers: the process ID, the image (cid:2)le name, the parent process
ID, the time of the last user input event, the time of the last
data arrival event, and all the previous normal connections.
When a process start event is received, a process data record
is created with the process ID, the image (cid:2)le name and the
parent process ID. The time of the last user input event is
updated when a user input event of the process is reported.
Similarly, the time of the last data arrival is updated when
a data arrival event is received. A process data record is
closed when its corresponding process (cid:2)nish event is re-
ceived. All process records are cleared when the system is
shutdown. The size of the event database is small because
the number of simultaneous processes on a personal com-
puter is usually less than 100. Based on all the information
of user, process and network events, the Extrusion Detector
implements the extrusion detection algorithm.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
4.2 Windows Implementation
We implement a prototype of BINDER for Windows
2000/XP. This is because computers running Windows op-
erating systems are the largest group attacked by most
malware [28]. Given current Windows systems’ limita-
tions [17], our Windows prototype does not provide a bul-
letproof solution for break-in detection although it does
demonstrate effectiveness of this technique on detecting
a large class of existing malware. Though this proto-
type is implemented in the application space, we assume
a BINDER system runs in the kernel space if it is adopted
in practice.
The User Monitor is implemented with Windows Hooks
API [13]. It uses three hook procedures, KeyboardProc,
MouseProc and CBTProc. KeyboardProc is used to cap-
ture keyboard events while MouseProc is used to capture
mouse events. MouseProc can provide the information
of which window will receive a mouse event. Since Key-
boardProc cannot provide the same information for a key-
board event, we use CBTProc to capture events when a
window is about to receive the keyboard focus. After deter-
mining which window will receive a user input event, the
User Monitor uses procedure GetWindowThreadProces-
sId to get the process ID of the window.
The Process Monitor is implemented based on the
built-in Security Auditing on Windows 2000/XP [14].
By turning on the local security policy of auditing
tracking (Computer Con(cid:2)guration/Windows
process
Settings/Security Settings/Local Policies/Audit Pol-
icy/Audit process tracking), the Windows operating sys-
tem can audit detailed tracking information for process start
and (cid:2)nish events. The Process Monitor uses psloglist [18]
to parse the security event log and generates process start
and process (cid:2)nish events.
The Network Monitor is implemented based on TDIMon
[19] and WinDump [34] which requires WinPcap [35].
TDIMon monitors activity at the Transport Driver Interface
(TDI) level of networking operations in the operating sys-
tem kernel.
It can capture all network events associated
with process information. Since TDIMon does not capture
complete DNS packets, The Network Monitor uses Win-
Dump for this purpose. Based on the information collected
by TDIMon and DNS packets captured by WinDump, the
Network Monitor reports network events to the Extrusion
Detector.
It is straightforward to implement the extrusion detec-
tion algorithm based on the information stored in the pro-
cess data record in the Extrusion Detector. Here we fo-
cus on the whitelisting mechanism in our Windows imple-
mentation. The whitelist in our current implementation has
15 rules. These rules cover three kinds of programs: sys-
tem daemons, software updates and network applications
automatically started by Windows. A rule for system dae-
mons has only a program name. Processes of the program
are allowed to make connections at any time. In our cur-
rent implementation, we have (cid:2)ve system daemons includ-
ing System, spoolsv.exe, svchost.exe, services.exe and
lsass.exe. A rule for software updates has both a pro-
gram name and an update web site. Processes of the pro-
gram are allowed to connect to the update web site at any
time. In this category, we now have six rules that covers
Symantec, Sygate, ZoneAlarm, Real Player, Microsoft Of-
(cid:2)ce, and Mozilla. For network applications automatically
started by Windows when it starts, we currently have four
rules for messenger programs of MSN, Yahoo!, AOL, and
ICQ. These programs are allowed to make connections at
any time. In the future, we need to include a special rule
regarding wireless network status change. For example, an
email client on a laptop computer may start sending pre-
written emails right after the laptop is connected to the wire-
less network in a hot spot.
Managing the whitelist for an average user is very im-
portant. Rules for system daemons usually do not change
until the operating systems are upgraded. Since the num-
ber of softwares that require regular updates is small and do
not change very often, the rules for software updates can be
updated by some central entity adopting BINDER. Though
rules in the last category have to be con(cid:2)gured individually
for each system, we believe some central entity can provide
help by maintaining a list of applications that fall into this
category. A mechanism similar to PeerPressure [31] may be
used to help an average user con(cid:2)gure her own whitelist.
5 System Evaluation
We evaluated BINDER on false positives and false nega-
tives in two environments. First, we installed it on six Win-
dows computers used by different volunteers for their daily
work, and collected traces over (cid:2)ve weeks since Septem-
ber 7th, 2004. Second, in a controlled testbed based on the
Click modular router [8] and VMWare Workstation [29],
we tested BINDER with the worm Blaster and 22 different
email worms collected on a departmental email server over
one week since October 7th, 2004.
5.1 Methodology
The most important design objective of BINDER is
to minimize false alarms while maximizing detected ex-
trusions.
In our experiments, we used the number of
false alarms rather than the false positive rate to evaluate
BINDER. This is because users who respond to alarms are
more sensitive to the absolute number than a relative rate.
When BINDER detects extrusions, it is based on connec-
tions. However, when we count the number of false alarms,
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Table 1. Summary of Collected Traces
Process Events Network Apps
OS
User Machine
A
B
C
D
E
F
Desktop WinXP
Desktop WinXP
Desktop WinXP
Laptop Win2K
Laptop WinXP
Laptop WinXP
Days User Events
27
26
23
23
13
12
35270
80497
24781
99928
8630
20490
5048
12502
7487
8345
2448
5402
33
35
55
28
21
20
TCP Conns
33480
15450
36077
9784
10210
7592
we do not use the number of misclassi(cid:2)ed normal connec-
tions directly. This is because a false alarm covers a series
of consecutive connection requests. Therefore, for misclas-
si(cid:2)ed normal connections, we split them into groups and
count each group as one false alarm. When we evaluate
BINDER on false negatives, we check if and how fast it
can detect a break-in. The real world experiments are used
to evaluate BINDER for both false positives and false neg-
atives, while the experiments in the controlled testbed are
only for false negatives.
To evaluate BINDER with different values for the three
prev , we used of(cid:3)ine,
parameters Dupper
new and Dupper
trace-based analysis in all experiments.
, Dupper
old
5.2 Real World Experiments
To evaluate the performance of BINDER in a real world
environment, we installed it on six Windows computers
used by different volunteers for their daily work, and col-
lected traces over (cid:2)ve weeks. We collected traces of user
input, process information, and network traf(cid:2)c from the six
computers. A summary of the collected traces is shown in
Table 1. On one hand, these computers were used for daily
work, so the traces are real-world. On the other hand, our
experimental population is small because it is dif(cid:2)cult to
convince users to submit their working environment to ex-
perimental software. However, from the summary of the
collected traces in Table 1, we see that they have good di-
versity with respect to hardware, operating system, and user
behavior. For real world experiments, we discuss parameter
selection and then analyze the performance of our approach
on false positives and false negatives.
old
, Dupper
new and Dupper
5.2.1 Parameter Selection
In this section, we discuss how to choose values for the
three parameters Dupper
prev . The goal
of parameter selection is to make the tightest possible up-
per bounds under the condition that the number of false
alarms is acceptable. We assume the rules of whitelisting
described in Section 4.2 are (cid:2)xed. The performance met-
ric is the number of false alarms. Based on the real-world
traces, we calculate Dold, Dnew and Dprev for all connec-
tion request events for every user. Then we take the 90th,
old
new
95th and 99th percentile for all three parameters and cal-
culate the number of false alarms for each percentile. The
results are shown in Table 2.
, Dupper
From Table 2 we can see that Dupper
and
prev must be different for different users because they