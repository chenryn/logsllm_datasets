   3） 展示对象：xxxVO，xxx 一般为网页名称。 
   4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。 
Java 开发手册 
  4/44 
(二) 常量定义 
1. 【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。 
 反例：String key = "Id#taobao_" + tradeId;  
       cache.put(key, value); 
      // 缓存 get 时，由于在代码复制时，漏掉下划线，导致缓存击穿而出现问题 
2. 【强制】在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数
字 1 混淆，造成误解。 
说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2。 
3. 【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。 
说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。 
正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。 
4. 【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、
包内共享常量、类内共享常量。 
 1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。 
 2） 应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。 
 反例：易懂变量也要统一定义成应用内共享常量，两位工程师在两个类中分别定义了“YES”的变量： 
    类 A 中：public static final String YES = "yes"; 
    类 B 中：public static final String YES = "y"; 
    A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。 
 3） 子工程内部共享常量：即在当前子工程的 constant 目录下。 
 4） 包内共享常量：即在当前包下单独的 constant 目录下。 
 5） 类内共享常量：直接在类内部 private static final 定义。 
5. 【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。 
说明：如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的
第几个季节。 
正例： 
public enum SeasonEnum { 
    SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4); 
    private int seq; 
    SeasonEnum(int seq) { 
        this.seq = seq; 
    } 
    public int getSeq() { 
        return seq; 
    } 
} 
Java 开发手册 
  5/44 
(三) 代码格式 
1. 【强制】如果是大括号内为空，则简洁地写成{}即可，大括号中间无需换行和空格；如果是非
空代码块则： 
 1） 左大括号前不换行。 
 2） 左大括号后换行。 
 3） 右大括号前换行。 
 4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。 
2. 【强制】左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左
大括号前需要空格。详见第 5 条下方正例提示。  
反例：if (空格 a == b 空格)  
3. 【强制】if/for/while/switch/do 等保留字与括号之间都必须加空格。 
4. 【强制】任何二目、三目运算符的左右两边都需要加一个空格。 
说明：运算符包括赋值运算符=、逻辑运算符&&、加减乘除符号等。 
5. 【强制】采用 4 个空格缩进，禁止使用 tab 字符。 
说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use 
tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。 
正例： （涉及 1-5 点） 
public static void main(String[] args) {      
// 缩进 4 个空格      
String say = "hello";      
// 运算符的左右必须有一个空格      
int flag = 0;     
// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格      
if (flag == 0) {          
System.out.println(say);      
}      
// 左大括号前加空格且不换行；左大括号后换行      
if (flag == 1) {          
System.out.println("world");      
// 右大括号前换行，右大括号后有 else，不用换行      
} else {            
System.out.println("ok");      
// 在右大括号后直接结束，则必须换行      
}  
}  
6. 【强制】注释的双斜线与注释内容之间有且仅有一个空格。 
正例：  
// 这是示例注释，请注意在双斜线之后有一个空格 
String param = new String(); 
Java 开发手册 
  6/44 
7. 【强制】在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。 
正例： 
long first = 1000000000000L; 
int second = (int)first + 2;    
8. 【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则： 
 1）第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。 
 2）运算符与下文一起换行。 
 3）方法调用的点符号与下文一起换行。 
 4）方法调用中的多个参数需要换行时，在逗号后进行。 
 5）在括号前不要换行，见反例。 
正例： 
StringBuilder sb = new StringBuilder();  
// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行  
sb.append("Jack").append("Ma")...    
.append("alibaba")...  
.append("alibaba")...  
.append("alibaba");  
反例： 
StringBuilder sb = new StringBuilder();  
// 超过 120 个字符的情况下，不要在括号前换行  
sb.append("Jack").append("Ma")...append      
("alibaba");   
// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行 
 method(args1, args2, args3, ...      
, argsX);  
9. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。 
正例：下例中实参的 args1，后边必须要有一个空格。 
method(args1, args2, args3);  
10. 【强制】IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不
要使用 Windows 格式。 
11. 【推荐】单个方法的总行数不超过 80 行。 
说明：除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过
80 行。 
正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；
共性逻辑抽取成为共性方法，便于复用和维护。 
12. 【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。 
正例： 
int one = 1;  
long two = 2L;  
float three = 3F;  
StringBuilder sb = new StringBuilder();  
Java 开发手册 
  7/44 
说明：增加 sb 这个变量，如果需要对齐，则给 one、two、three 都要增加几个空格，在变量比较多的情
况下，是非常累赘的事情。 
13. 【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。 
说明：任何情形，没有必要插入多个空行进行隔开。 
(四) OOP 规约 
1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析
成本，直接用类名来访问即可。 
2. 【强制】所有的覆写方法，必须加@Override 注解。 
说明：getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override 可以准确判
断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。 
3. 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。 
说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程） 
正例：public List listUsers(String type, Long... ids) {...} 
4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产
生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什
么。 
5. 【强制】不能使用过时的类或方法。 
说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数
decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接
口；作为调用方来说，有义务去考证过时方法的新实现是什么。 
6. 【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用
equals。 
正例："test".equals(object); 
反例：object.equals("test"); 
说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）。 
7. 【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。 
说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在 IntegerCache.cache 产
生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数
据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。   
8. 【强制】浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用
equals 来判断。 
说明：浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进
Java 开发手册 
  8/44 
制无法精确表示大部分的十进制小数，具体原理参考《码出高效》。 
反例： 
    float a = 1.0f - 0.9f; 
    float b = 0.9f - 0.8f; 
    if (a == b) { 
        // 预期进入此代码快，执行其它业务逻辑 
        // 但事实上 a==b 的结果为 false 
    } 
    Float x = Float.valueOf(a); 
    Float y = Float.valueOf(b); 
    if (x.equals(y)) { 
        // 预期进入此代码快，执行其它业务逻辑 
        // 但事实上 equals 的结果为 false 
    }   
正例： 
(1) 指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。 
    float a = 1.0f - 0.9f; 
    float b = 0.9f - 0.8f; 
    float diff = 1e-6f; 
    if (Math.abs(a - b) < diff) { 
        System.out.println("true"); 
    } 
(2) 使用 BigDecimal 来定义值，再进行浮点数的运算操作。 
    BigDecimal a = new BigDecimal("1.0"); 