we examined.
4.1 Corrupting Callee-Saved Registers
To maximize the eﬃciency of a program, the compiler
tries to maximize the use of CPU registers, instead of using
the (slower) main memory. The compiler performs register
allocation to keep track which registers are currently in use
and to which it can assign new values. If all registers are
in use, but a register is required to perform a computation,
the compiler temporarily saves the content of the register
to the stack. When a function (the caller) calls another
function (the callee), the callee cannot determine which of
the caller’s registers are used at the moment of the call.
Therefore, the callee saves all registers it needs to use during
its execution temporarily on the stack. These saved registers
are called callee-saved registers. Before the callee returns to
the caller it restores all callee-saved registers. While the
registers are saved, the adversary can change the values on
the stack and therefore corrupt the callee-saved registers.
This becomes a severe problem if the caller uses the restored
(and potentially corrupted) registers for CFI checks and can
aﬀect all architectures where the application binary interface
(ABI) speciﬁes the concept of callee-saved registers.
We found that two CFI implementations, IFCC and
VTV [50], are vulnerable to this kind of attack. As we will
argue in the following, this threat becomes even more crucial
for applications that are compiled with position-independent
code (PIC) for architectures that do not support program-
counter relative (PC-relative) addressing, such as x86 32-bit.
Position-Independent Code
On Unix-like systems,
including Mac OS X and Linux,
ASLR compatible binaries contain position-independent
code (PIC). Position independence means that all code refer-
ences are relative to the program counter (PC). This allows
the dynamic loader to load the binary at an arbitrary base
address without relocating it.
However, Intel x86 processors running 32-bit code do not
directly support PC-relative addressing. As a workaround,
PIC on x86 requires the program to obtain the current value
(i.e., the absolute address) of the program counter dynami-
cally at run time. Once this address is known, the program
can perform PC-relative references. At assembly level this is
implemented by executing a call to the subsequent instruc-
tion. The call automatically loads the return address onto
the stack, where the return address is simply the absolute
954are enforced through label checking. A shadow stack is used
to verify the backward edges of the CFG. We noticed that
user-mode CFI only instruments user-mode applications and
not the kernel. In general, this makes sense because the ker-
nel isolates itself from user-mode applications, and hence,
is considered trusted. However, we discovered a way to by-
pass CFI without compromising the kernel. In particular,
we exploit the fact that the kernel reads the return address
used to return from a system call to the user mode from the
user-mode stack.
On x86 32-bit a special instruction—sysenter—was in-
troduced to speed up the transition between user and kernel
mode [30]. The sysenter instruction does not save any state
information. Therefore Windows saves the return address to
the user-mode stack before executing sysenter. After ex-
ecuting the system call, the kernel uses the saved return
address to switch back to user mode. This opens a small
window of time between the return address being pushed on
the stack and the kernel reading it to switch back to user
mode. We use a second, concurrent thread that exploits this
window to overwrite the saved return address. Hence, when
returning from a system call the kernel uses the overwrit-
ten address. This allows the adversary to set the instruc-
tion pointer to an arbitrary address and bypass CFI policy
checks.
Note that this attack works within the adversary model
of CFI because we never modify existing code, nor corrupt
the kernel, or tamper with the shadow stack, but we exploit
a missing check of a code pointer that can be controlled by
the adversary.
The 64-bit x86 architecture uses a diﬀerent instruction,
called syscall, to switch from user to kernel mode. This
instruction saves the user-mode return address into a regis-
ter, thus preventing the adversary from changing it. How-
ever, even 64-bit operating systems provide an interface for
sysenter to be compatible with 32-bit applications. Hence,
32-bit applications that are executed in 64-bit operating sys-
tems remain vulnerable. Another pitfall of 64-bit x86 is
that it partially deprecates memory segmentation, hence,
the shadow stack can no longer be completely protected via
hardware.
Hence, the shadow stack can no longer be completely pro-
tected via hardware. As a consequence the protection of the
shadow stack relies on information hiding or less eﬃcient
software-fault isolation techniques.
4.3 Disclosing the Shadow Stack Address
Dang et al. [16] survey the diﬀerent implementations of
shadow stacks and their performance costs. One observation
is that a parallel shadow stack, i.e., a shadow stack located
at a constant oﬀset to the normal stack, provides the best
performance. However, as we demonstrate in Section 5.2
the adversary can leak the address of the normal stack and
therefore compute the address of the shadow stack.
Another shadow stack technique utilizes the thread-local
storage (TLS), a per-thread memory buﬀer usually used to
store thread-speciﬁc variables. In the following we discuss
potential implementation pitfalls of this approach. However,
we have not implemented this attack due to the unavailabil-
ity of implementations in public domain. TLS is addressed
through a segment register. Although segmentation is no
longer available under x86 64-bit, segment registers are still
present and can be used to address memory.
In general,
Figure 1: Application compiled with position-
independent code. To get the absolute address of
str the compiler emits instructions that ﬁrst receive
the absolute address of Function at run time. The
absolute address of str is then calculated by adding
the relative oﬀset between Function and str, calcu-
lated by the compiler, to the absolute address of
Function.
address of the subsequent instruction. Hence, the program
can obtain its current program counter by simply popping
the return address oﬀ the stack in the subsequent instruc-
tion. Once the program counter is loaded into a register, an
oﬀset is added to form the position-independent reference.
Figure 1 illustrates how position-independent code ref-
erences the global string variable str in the data section
(Line 12). At function entry, the function calls get_eip()
(Line 2). This function (Line 9) only reads the return ad-
dress from the stack (Line 10), which is the address of the
instruction following the call of get_eip() (Line 3). Next,
the result is moved into the ebx register (Line 3). We noticed
that both LLVM and GCC primarily use the ebx register to
compute position-independent references (Line 5).
Subsequently, the program can perform PC-relative ad-
dressing to access the global string variable: the add instruc-
tion adds the relative oﬀset between the data section and the
current function to ebx which now holds a pointer to the
data section (Line 4). Finally, the oﬀset of the string within
the data section is added to ebx and the result (address of
the string variable) is saved in the eax register (Line 5).
On x86 32-bit platforms PIC becomes a vulnerability for
CFI, because the global CFI policies are addressed through
the ebx register. Since ebx is a callee-saved register it is
spilled on the stack by all functions that perform CFI checks.
4.2 Corrupting System Call Return Address
Fine-grained CFI as proposed by Abadi et al. [1] validates
the target address of every indirect branch. Valid forward
edges of the CFG are determined using static analysis and
Application1   Function:2     call get_eip3     mov  ebx, eax4     add  ebx, rel_offset_to_data5     lea  eax, [ebx+str_offset]6     [..]7     ret89   get_eip:10    mov eax, [esp] ; read return                      address from                      stack11    retPosition Independent Code12  str:      "this is a String"Datarelativeoﬀsetto data955a TLS-based shadow stack implementation ﬁrst loads the
shadow-stack pointer into a general purpose register. Next,
this register is used to save the return address on the shadow
stack [1, 16]. However, we did not ﬁnd any evidence that the
registers used during this operation are cleared afterwards.
Hence, the address of the shadow stack may be leaked when
a function pushes the used register on the stack. Further,
an application might hold a reference in one of its memory
objects that can be leaked to disclose the memory address
of TLS and the shadow stack.
5. STACKDEFILER IMPLEMENTATION
We now turn our attention to the practical implemen-
tation of the previously described attacks. To prove the
eﬀectiveness of these attacks we start from real-world vul-
nerabilities. For our proof-of-concept implementation of the
attacks we chose the Chromium web browser because it is
available for all common operating systems, and implements
state-of-the-art heap and stack software defenses. We stress
that our attacks also apply to other applications that pro-
vide the adversarial capabilities we outlined in Section 3.
This includes document viewers, Flash, Silverlight, server-
side applications and kernels. We re-introduced an older
software vulnerability (CVE-2014-3176) in the most recent
version of Chromium (v44.0.2396.0)—we did not make any
further changes to the source code.
To prove that stack spilled registers pose a severe threat to
modern, ﬁne-grained forward-edge CFI implementation we
compiled Chromium with IFCC for 32 and 64-bit on Ubuntu
14.04 LTS. We disassembled IFCC and VTV protected ap-
plications to verify that they are vulnerable to stack-spilling
attacks on other operating systems (Unix and Mac OS X)
as well. We implemented our attack against the initial pro-
posed CFI [1] on a fully patched Windows 7 32-bit system.
Since the implementation of the originally proposed CFI [1]
is not available, we assume that ﬁne-grained CFI with a se-
cure shadow stack and construct our attack under the con-
strains given by the paper.
After giving a short introduction to browser exploitation,
we give a detailed description of our proof-of-concept ex-
ploits that bypass existing CFI implementations.
5.1 Attacking a Web Browser
While adversary-controlled JavaScript in browsers is gen-
erally sandboxed by enforcing type and memory safety, the
runtime used to interface the browser and web contents is
not. Performance critical parts of the JavaScript runtime li-
brary are written in lower level, unsafe languages, e.g., C++.
The usage of C++ opens the door for memory-related secu-
rity vulnerabilities. Memory corruption is then used to ma-
nipulate the native representation of website objects, which
cannot be done directly from JavaScript code. Next, we ex-
plain how this can be exploited to read arbitrary memory
and hijack the program control ﬂow.
5.1.1 Information Disclosure
Websites create a variety of objects using the browser’s
scripting engine. These objects are stored consecutively in
memory. For instance, the native representation of an ar-
ray object is usually a C++ object with two ﬁelds:
the
length of the array followed by its starting address, as shown
in Figure 2. A JavaScript program can read the contents of
the array by using the runtime interface provided by the
native C++ object. To ensure memory safety, the native
read function uses the saved array length to ensure that the
JavaScript program does not access memory outside the ar-
rays bounds. By using a memory corruption vulnerability,
the adversary can overwrite the array length in the native
representation of the array object with a larger value, as
shown in Step . This allows the adversary to read the
memory beyond the original array boundaries using normal
JavaScript code (Step ) and disclose the contents of a sub-
sequent C++ object.
Figure 2: The adversary can overwrite the length
ﬁeld of an array object. He uses the native read
function to disclose memory content beyond the ar-
ray buﬀer, e.g., the vTable pointer of a consecutive
object.
vTable Hijacking
5.1.2
To hijack the program’s control ﬂow, the adversary must
overwrite a code pointer holding the destination of an indi-
rect branch instruction. C++ virtual function tables (vTa-
bles) are commonly used for this purpose. The vTable is
used to resolve virtual functions call targets at run time
and contains an array of pointers to virtual functions, along
with other meta-data. The entries of a vTable cannot be
overwritten because they reside in read-only memory. How-
ever, each C++ object that uses virtual functions maintains
a pointer to its corresponding vTable. Since this pointer is
a ﬁeld of the object, it is stored in writable memory. The
adversary can exploit a memory corruption vulnerability to
overwrite the vTable pointer of a C++ object with a pointer
to a fake vTable which he created and injected beforehand.
Instead of the original table of function pointers, all function
pointers in the fake vTable will point to the code the adver-
sary aims to leverage for a code-reuse attack. Lastly, after
overwriting the vTable pointer of an object, the adversary
uses JavaScript interfaces to the native object to invoke a
virtual function from the fake vTable.
Heap   AdversaryArray Object DataLength = 13Buﬀer PointerData Buﬀer of Arrayoverwritewith 37Array Object Coderead(int position)write(int position)callsread(20)if 0 ≤ position < Length:   return buﬀer[position]else:   return errorC++ ObjectvTable Pointerread129565.2 Proof-of-Concept Exploit
Our exploit performs the following steps: (i) Gain arbi-
trary read and write capabilities, (ii) locate the stack and
disclosing its contents, and (iii) bypass the CFI check and
hijack the control ﬂow.
The re-introduced vulnerability (CVE-2014-3176) allows
us to manipulate the data ﬁelds of JavaScript objects on
the heap, such as  in Figure 2. Once an array-like object
has been corrupted, we can access adjacent memory location
without failing a bounds check (see  in Figure 2). In our
exploit, we use the corrupted object to manipulate the buﬀer
pointer ﬁeld of a JavaScript ArrayBuffer instance. By set-
ting the buﬀer pointer to the address we want to access, we
can then read and write arbitrary memory by accessing the
ﬁrst element of the ArrayBuffer via the JavaScript inter-
face. There are many ways to corrupt array-like objects,
hence, our exploit does not depend on a speciﬁc type of vul-
nerability.
Disclosing Data Structures.
Chromium places diﬀerent memory objects in diﬀerent
heaps. For instance, the array instance in Figure 2 is stored
in the object heap while the data buﬀer it contains is in the
buﬀer heap. The use of separate heaps prevents exploit tech-
niques such as heap feng shui [46] which the adversary has
used to co-locate vulnerable buﬀers and C++ objects [51].
However, during the analysis of Chromium’s heap alloca-
tor, we found a way to force the allocator to place the vul-
nerable buﬀer at a constant oﬀset to metadata that is used
by the allocator to manage the diﬀerent heaps. Chromium’s
heap allocator, PartitionAlloc, pre-allocates memory for a
range of diﬀerent buﬀer sizes. However, when memory for a
buﬀer is requested that was not pre-allocated, PartitionAlloc
will request memory from the operating system. Since Parti-
tionAlloc needs to manage the dynamically allocated mem-
ory buﬀers, it requests two additional, consecutive mem-
ory pages from the operating system. The newly requested
memory is organized as follows:
(i) Meta information of allocated memory. This includes a
pointer to the main structures of PartitionAlloc, which
contains all information to manage existing and future
allocations.
(ii) Guard page. This page is mapped as inaccessible,
hence, continuous memory reads/writes will be pre-
vented. However, it does not prevent non-continuous
reads/writes.
(iii) Memory to fulﬁll allocation request. This is the mem-
ory that is used by PartitionAlloc to allocate buﬀers.
By allocating a large buﬀer (e.g., 1MB) which is very un-
likely to happen during normal execution, we ensure that
PartitionAlloc will allocate a new structure as previously
described. We further know that the requested buﬀer will
be placed at the start of (3), because it is the ﬁrst buﬀer of
this size. Since the oﬀset between (i) and (iii) is constant,
we can disclose the pointer to the main meta-data structure
of PartitionAlloc. This allows us to identify all memory ad-
dresses used by the heap allocator, as well as predict which
memory addresses will be used for future allocations.
This is a very powerful technique as we can predict the
memory address of every C++ object that is created. Fur-
ther we can control which objects are created at run time
via the JavaScript interface. Hence, it becomes very hard to