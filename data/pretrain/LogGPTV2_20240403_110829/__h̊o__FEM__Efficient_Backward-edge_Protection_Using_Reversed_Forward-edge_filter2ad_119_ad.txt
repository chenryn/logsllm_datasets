inserted check can differentiate between internal and external calls.
5.5 Implementation Details
We implemented ρFEM as five Clang/LLVM analysis passes, as fol-
lows. One front-end pass for collecting metadata from the Clang
compiler for later usage during LTO analysis, three LTO passes and
a machine instruction-level pass. For this purpose, we extended the
Clang/LLVM [14] compiler framework infrastructure. As three of
the four ρFEM passes are performed during link time, our system re-
quires LLVM’s LTO. As previously mentioned, the implementation
of ρFEM is split between the Clang compiler front-end (metadata
collection), three new link-time passes and one machine-level pass
used for analysis and generating backward-edge constraints, to-
taling around 3,235 LOC. ρFEM supports separate compilation by
relying on the LTO mechanism built in LLVM [14]. ρFEM generates
unique IDs by keeping track of already assigned ones and contin-
uously incrementing a counter variable for generating new IDs.
Lastly, by carefully traversing each class hierarchy in pre-order,
unique ID assignment is guaranteed.
6 EVALUATION
In this section, we address the following research questions (RQs).
• RQ1: How effective is ρFEM in protecting backward edges
(§6.1)?
• RQ2: What backward-edge attacks can ρFEM thwart (§6.2)?
• RQ3: What security benefit does ρFEM offer (§6.3)?
• RQ4: What is the runtime overhead of ρFEM (§6.4)?
Benchmark Programs. In our evaluation, we used the fol-
lowing real-world C/C++ programs: (1) Memcached [31] (general-
purpose distributed memory caching system, v.1.5.3, C/C++ code),
(2) Nginx [37] (Web server, usable also as: reverse proxy, load bal-
ancer, mail proxy and HTTP cache, v.1.13.7, C code), (3) Lighttpd
[30] (Web server optimized for speed-critical environments, v.1.4.48,
C code), (4) Redis [44] (in-memory database with in-memory key-
value store, v.4.0.2, C code), (5) Apache Httpd Server (Httpd) [3]
(cross-platform Web server, v.2.4.29, C code) and the following C++
programs: (6) NodeJS [41] (cross-platform JS run-time environ-
ment, v.8.9.1, C/C++ code), (7) Apache Traffic Server [4] (modular,
high-performance reverse proxy and forward proxy server, v.2.4.29,
C/C++ code), and (8) Google Chrome [23] (Web browser, v.33, C/C++
code). These programs were selected due to their real-world security
relevance.
Experimental Setup. The benchmarks were performed on an
Intel i5-3470 CPU with 8GB RAM running on the Linux Mint 18.3
OS. We carefully compiled each program and executed it ten times
in order to provide reliable mean values. Note that we re-applied
for all hardened programs, in case these existed, their functional-
ity/correctness tests and we can confirm that all work as expected
after hardening with ρFEM. Lastly, all programs were compiled with
Clang/LLVM -O2 compiler optimization flag.
6.1 Protection Effectiveness
In this section, we assess the precision of ρFEM by counting the
number of allowed return targets per function (callee). Further, we
consider the size of the return target set an indicator for the pre-
cision of ρFEM’s backward-edge protection. Note that for all tables
in this section, we use the following measures: #Callees (all callees),
minimum, 90th percentile, maximum, geomean, median, average,
and standard deviation.
# C alle e
M e d
M in
Program
Httpd
Lighttpd
Memcached
Nginx
Redis
NodeJS
Tr. Server
geomean
1,086
451
106
1,132
2,644
30,330
6,115
1,616.32
9 0 p
20
6
8.5
29
7
231
14
18.23
M a x
187
317
136
1,630
3,796
6,837
2,673
986.87
0
0
0
0
0
0
0
0
G e o
3.34
1.97
2.81
3.29
1.97
3.34
3.13
2.77
St.d e v
18.18
19.46
15.15
58.23
81.74
114.11
64.04
40.74
3
1
2
2
1
1
2
1.57
Table 1: Return addresses for virtual and non-virtual func-
tions.
Table 1 depicts the number of functions hardened by ρFEM and
the size of their legitimate return address sets enforced by ρFEM.
The geometric mean value for all assessed programs is 2.77 return
addresses per callee. This considerably decreases the chances of
a successful attack. The average value obtained for NodeJS (most
complex program analyzed in Table 1) represents an outlier. This
value originates from the high number of small helper functions
which are not in-lined and a large number of function pointer based
indirect callsites. We further investigated the results for NodeJS and
observed many indirect callsites calling template functions, which
were generated for multiple JavaScript types. These functions have
the same signature and can therefore be targeted by many indirect
callsites. Further, we note that for callees which allow more than 10
return targets, depending on the gadget types, there is potentially
a considerable decrease in the provided protection level.
Program # C alle e
9 0 p
239
25
1,150
190.11
M a x
2,792
992
15,014
3,464.50
G e o
23.12
7.54
144.21
29.29
M e d
19
11
155
31.87
St.d e v.
143.31
59.8
3,677.36
315.86
NodeJS
Tr. Server
Chrome
geomean
4,177
948
66,032
6,394.53
Table 2: Allowed return addresses for only virtual callees.
Table 2 depicts the sizes of the legitimate return target sets for
only virtual functions. By comparing the geomean results depicted
in Table 2 with the results shown in Table 1 (2.77 vs. 29.29) we
note that in general ρFEM performs better for non-virtual functions
than for virtual functions. This is due to the fact that ρFEM: (1)
uses ranges for virtual functions instead of single IDs (i.e., ranges
contain more than one element, since the class sub-hierarchy is
enforced backwards), and (2) cannot precisely determine when a
virtual function is called through a function pointer based call (due
to the currently used address taken analysis). Further, note that in
general it is difficult to rule out pointers to virtual functions because
pointers to these functions are already stored in the corresponding
virtual tables. Therefore, we opted for the most conservative im-
plementation in ρFEM in which we assume that most of the virtual
functions can be called using function pointers which are indirect
callsites as well. For this reason, we have in general more legitimate
calltargets for these callees.
474ACSAC 2020, December 7–11, 2020, Austin, USA
Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags, and Claudia Eckert
Program
Lighttpd
Memcached
Nginx
Redis
NodeJS
geomean
B ase
52,060
24,672
173,273
333,835
2,479,736
179,091.65
‰
M in
‰
9 0 p
‰
M a x
0
0
0
0
0
0
0.38
0.34
0.17
0.02
0.09
0.13
3.59
5.51
9.41
11.37
2.76
5.67
‰
G e o
0.06
0.11
0.02
0.01
0.00
0.02
‰
M e d
‰
S D
0.06
0.08
0.01
0.00
0.00
0.01
0.35
0.61