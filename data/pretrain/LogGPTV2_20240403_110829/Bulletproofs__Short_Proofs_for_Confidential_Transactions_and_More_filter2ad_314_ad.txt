P Zp
P Zp
ti ¨ X
i“0
ny
, y
, 2
n
i
n
n
Note that if
aR “ aL ´ 1
n ^ aL ˝ aR “ 0
n ^ xaL, 2
ny “ v
(46)
then
t0 “ z ¨ x1
“ z ¨ x1
n
n
ny ` z2 ¨ xaL, 2
ny ` z2 ¨ v ` kpy, zq
ny ` kpy, zq
, y
, y
i.e. t0 is a function of y, z and v. Furthermore, a commit-
ment to t0 can be constructed from y, z, and a homomorphic
commitment to v. The proof of Theorem 1 shows if t0
has this form, then (46) must hold. The prover therefore
commits to t1, t2 using Pedersen commitments, and P and
322
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
n
τi
n
p
i “ t1, 2u
n ` sL ¨ x
n ` sR ¨ xq
P Zp
P Zp
P Zp
P Z
n ˝ paR ` z ¨ 1
V engage in a polynomial identity testing protocol to show
that tpXq “ xlpXq, rpXqy.
τ1, τ2
$ÐÝ Zp
Ti “ g
ti h
P Ñ V : T1, T2
V : x $ÐÝ Z
‹
p
V Ñ P : x
τx “ τ1 ¨ x ` τ2 ¨ x2 ` z2 ¨ γ
μ “ α ` ρ ¨ x
t “ xl, ry
l “ lpxq “ aL ´ z ¨ 1
r “ rpxq “ y
` z2 ¨ 2
P Ñ V : τx, μ, t, l, r
(47)
P G (48)
(49)
(50)
(51)
(52)
(53)
(54)
(55)
(56)
(57)
(58)
The veriﬁer checks that l and r are in fact lpxq and rpxq
and checks that tpxq “ xl, ry:
P G (59)
@i P r1, ns
P Zp
(60)
(61)
P G (62)
(63)
Corollary 1 (Range Proof). The range proof presented in
Section 4.1 has perfect completeness, perfect honest veriﬁer
zero-knowledge and computational special soundness.
Proof. The range proof is a special case of the aggregated
range proof from section 4.3 with m “ 1. This is therefore
a direct corollary of Theorem 2.
i “ h
1
y´i`1
i
t ?“ xl, ry
τx ?“ g
P “ AS
P ?“ h
kpy,zq`z¨x1n,yny ¨ V
´z ¨ h
x ¨ g
1r
z2 ¨ T
1z¨yn`z2¨2n
P Z
¨ T
x2
2
x
1
l
g
h
n
p
t
g
h
h
μ
proofs at the same time.
For example, a conﬁdential transaction often contains mul-
tiple outputs, and in fact, most transactions require a so-
called change output to send any unspent funds back to the
sender. In Provisions [17] the proof of solvency requires the
exchange to conduct a range proof for every single account.
Given the logarithmic size of the range proof presented
in Section 4.2, there is some hope that we can perform a
proof for m values which is more efﬁcient than conducting
m individual range proofs. In this section, we show that
this can be achieved with a slight modiﬁcation to the proof
system from Section 4.1.
Concretely, we present a proof system for the following
relation:
(cid:5)pg, h P G, g, h P G
Vj “ h
γ
j g
m¨n
, V P G
vj ^ vj P r0, 2
m
n ´ 1s@j P r1, ms(
; v, γ P Z
p q :
m
(64)
The prover is very similar to the prover for a simple range
proof with n¨m bits, with the following slight modiﬁcations.
In line (36), the prover should compute aL P Zn¨m
such that
xaL,rpj´1q¨m:j¨ms, 2ny “ vj for all j in r1, ms, i.e. aL is the
concatenation of all of the bits for each vj.
We adjust rpXq accordingly so that
p
`řm
rpXq “ yn¨m ˝ paR ` z ¨ 1n¨m ` sR ¨ Xq
j“1 z1`j ¨ 0
pj´1q¨n||2n||0
pm´jq¨n
(65)
řm
In the computation of τx, we need to adjust for the random-
ness of each commitment Vj, so that τx “ τ1 ¨ x` τ2 ¨ x2 `
j“1 z1`j ¨ γj. Further, kpy, zq is updated to incorporate
more cross terms.
kpy, zq “ ´z2 ¨ x1
n¨m
, y
j`2 ¨ x1
z
n
, 2
ny
n¨my ´ mÿ
j“1
4.2. Logarithmic Range Proof
Finally, we can describe the efﬁcient range proof that
uses the improved inner product argument. In the range
proof protocol from Section 4.1, P transmits l and r, which
are already linear in n. We can omit this transfer by using the
inner-product argument from Section 3. Note that verifying
both (63) and (60) is exactly equivalent to verifying that
the witness l, r satisﬁes the inner product relation (1) on
public input pg, h
´μ, tq. We can therefore replace
(58) with a transfer of τx, μ, t and an execution of an inner
product argument. Instead of transmitting l and r, which has
a communication cost of 2 ¨ n elements, the inner-product
argument requires transmission of just 2 ¨ rlog2
pnqs ` 2
pnqs ` 4 group
elements. In total the prover sends 2 ¨ rlog2
elements and 5 elements in Zp.
, g, P ¨ h
1
4.3. Aggregating Logarithmic Proofs
In many of the range proof applications described in
Section 1.2, a single prover needs to perform multiple range
323
The veriﬁcation check (61) needs to be updated to include
all the Vj commitments.
τx ?“ g
kpy,zq`z¨x1n¨m,yn¨my ¨ V
z2¨zm ¨ T
t
g
h
¨ T
x2
2
x
1
Finally, we change the deﬁnition of P (62) such that it is a
commitment to the new r.
´z ¨ h
1zj`1¨2n
rpj´1q¨m:j¨ms
P “ AS
1z¨yn¨m
x ¨ g
h
mź
j“1
The aggregated range proof which makes use of the inner
product argument uses 2 ¨ rlog2
pn ¨ mqs ` 4 group elements
and 5 elements in Zp. Note that the proof size only grows
pmq when conducting multiple
by an additive term of 2¨log2
range proofs as opposed to a multiplicative factor of m when
creating m independent range proofs.
Theorem 2. The aggregate range proof presented in Sec-
tion 4.3 has perfect completeness, perfect honest veriﬁer
zero-knowledge and computational special soundness.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
4.4. Non-Interactive Proof through Fiat-Shamir
For the purpose of a simpler analysis, the proof was pre-
sented as an interactive protocol with a logarithmic number
of rounds. The veriﬁer is a public coin veriﬁer, as all the
honest veriﬁer’s messages are simply random elements from
‹
p. It is therefore possible to turn the protocol into a non-
Z
interactive protocol that is secure and full zero-knowledge
in the random oracle model using the Fiat-Shamir heuristic
[62]. All random challenges are replaced by hashes of the
transcript up to that point. For instance y “ HpA, Sq and
z “ HpA, S, yq
To avoid a trusted setup we can use such a hash function to
generate the public parameters g, h, g, h from a small seed.
The hash functions needs to map from t0, 1u˚ to Gz12. This
also makes it possible to provide a random access into the
public parameters. Alternatively, a common random string
can be used.
4.5. A Simple MPC Protocol for Bulletproofs
In several of the applications described in Section 1.2,
the prover could potentially consist of multiple parties who
each want to do a single range proof. For instance, multiple
parties may want
to create a single joined conﬁdential
transaction, where each party knows some of the inputs and
outputs and needs to create range proofs for their known
outputs. The joint transaction would not only be smaller
than the sum of multiple transactions. It would also hide
which inputs correspond to which outputs and provide some
level of anonymity. These kinds of transactions are called
CoinJoin transactions [14]. In Provisions, an exchange may
distribute the private keys to multiple servers and split the
customer database into separate chunks, but it still needs to
produce a single short proof of solvency. Can these parties
generate one Bulletproof without sharing the entire witness
with each other? The parties could certainly use generic
multi-party computation techniques to generate a single
proof, but this might be too expensive and incur signiﬁcant
communication costs. This motivates the search for a simple
MPC protocol speciﬁcally designed for Bulletproofs which
requires little modiﬁcation to the prover and is still efﬁcient.
Note that for aggregate range proofs, the inputs of one
range proof do not affect the output of another range proof.
Given the composable structure of Bulletproofs, it turns out
that m parties each having a Pedersen commitment pVkqm
k“1
can generate a single Bulletproof that each Vk commits to
a number in some range ﬁxed range. The protocol either
uses a constant number of rounds but communication that
is linear in both m and the binary encoding of the range, or
it uses a logarithmic number of rounds and communication
that is only linear in m. We assume for simplicity that m
is a power of 2, but the protocol could be easily adapted
for other m. We use the same notation as in the aggregate
range proof protocol, but use k as an index to denote the
2. See [63] for a concrete construction of hash function into an elliptic
curve
pkq
, h
pkq
, r
pkq
pkq
, S
; T
, T
pkq
pkq
pkq
, l
, t
, r
pkq
1
k“1 τ
k“1 A
pkq
2
pkq
x , μ
pkq
; τ
pkqqm
pkq such that gi “ g
pkq and τx “ řl
component, e.g. A “ śl
pkq is generated just like A
kth party’s message. That is A
but using only the inputs of party k. The MPC protocol
works as follows, we assign a set of distinct generators
pg
k“1 to each party and deﬁne g as the interleaved
ppi´1q mod m`1q
concatenation of all g
.
r i
m s
pkq in an analogous way. We ﬁrst describe the
Deﬁne h and h
protocol with linear communication. In each of the 3 rounds
of the protocol, which correspond to the rounds of the range
proof protocol, each party simply generates its part of the
pkq
proof, i.e. the A
using its inputs and generators. These shares are then sent
to a dealer (which could be one of the parties), who simply
adds them homomorphically to generate the respective proof
pkq
x .
In each round, the dealer generates the challenges using
the Fiat-Shamir heuristic and the combined proof compo-
nents and sends them to each party. Finally, each party
sends l
to the dealer who computes l, r as the
interleaved concatenation of the shares. The dealer runs the
inner product argument and generates the ﬁnal proof. The
protocol is complete as each proof component is simply
the (homomorphic) sum of each parties’ proof components,
and the challenges are generated as in the original protocol.
It is also secure against honest but curious adversaries as
each share constitutes part of a separate zero-knowledge
proof. The communication can be reduced by running a
second MPC protocol for the inner product argument. The
generators were selected in such a way that up to the last
plq rounds each parties’ witnesses are independent and
log2
the overall witness is simply the interleaved concatenation
of the parties’ witnesses. Therefore, parties simply compute
pkq in each round and a dealer computes L, R as
L