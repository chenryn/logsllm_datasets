### 优化后的文本

当进程准备继续执行时，系统会提高其优先级，从而确保高优先级的进程能够优先运行。可以通过`nice`命令设置进程的优先级基数，并通过`renice`命令进行调整。例如，启动一个默认优先级基数的`oclock`程序后，可以使用`nice oclock &`命令将其优先级基数值设置为+10。随后，通过`renice 10 146`进一步确认此更改，此时该时钟程序将以较低频率运行。使用`ps`命令查看修改后的优先级基数值时，可以看到状态栏“STAT”中多出了一个“N”，表示此进程的优先级已从默认值进行了调整。“PPID”字段则显示了父进程的PID。

UNIX进程调度器依据优先级来决定哪个进程可以获得CPU时间。尽管不同版本的具体实现有所差异，但总体上高优先级进程总是比低优先级进程更频繁地获得运行机会。在某些情况下，只要有高优先级进程待处理，低优先级进程就可能完全得不到执行。

### 启动新的进程
要在一个程序内部启动另一个程序，即创建一个新的进程，可使用库函数`system`。这个函数接收一个字符串参数作为命令行指令，并等待该命令完成。如果无法启动shell或遇到其他错误，`system`将返回特定的错误代码；否则，它将返回所执行命令的退出码。

#### 示例：使用`system`函数
以下是一个简单的示例程序，演示如何使用`system`函数来调用`ps`命令：
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    printf("Running ps with system\n");
    system("ps -ax");
    printf("Done.\n");
    return 0;
}
```
编译并运行上述代码后，终端将显示当前系统中所有进程的信息。需要注意的是，由于`system`函数依赖于shell来启动指定程序，因此效率相对较低，且对环境依赖性较强。对于更高效的进程管理需求，推荐使用`exec`系列函数。

### 替换一个进程映像
`exec`系列函数允许将当前进程替换为由给定路径或文件名指定的新进程。这些函数包括但不限于`execl`, `execle`, `execv`, 和 `execvp`等，它们的主要区别在于参数传递方式的不同。以`execlp`为例，该函数会在`PATH`环境变量中搜索可执行文件，并直接替换当前进程：

```c
#include <unistd.h>
#include <stdio.h>

int main() {
    printf("Running ps with execlp\n");
    execlp("ps", "ps", "-ax", (char *)0);
    // 如果execlp成功，则不会到达这里
    printf("Done.\n"); 
    return 0;
}
```

与`system`相比，`exec`系列函数提供了更高的性能和更细粒度的控制能力，是进行进程管理和替换的理想选择。

### 复制一个进程映像
创建新进程的一种常见方法是使用`fork`系统调用，它可以复制当前进程的所有内容（除了子目录流），生成一个新的独立进程。新进程与原进程几乎相同，但拥有独立的数据空间、环境以及文件描述符。结合`fork`与`exec`，可以轻松实现复杂的应用场景，如并发处理等。

```c
#include <unistd.h>
#include <stdio.h>
#include <sys/types.h>

int main() {
    pid_t pid = fork();
    
    if (pid == -1) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // 子进程代码
        execlp("ps", "ps", "-ax", (char *)0);
    } else {
        // 父进程代码
        wait(NULL); // 等待子进程结束
        printf("Child process finished\n");
    }

    return 0;
}
```

以上是对原文本的优化整理，旨在使其更加清晰、连贯和专业。