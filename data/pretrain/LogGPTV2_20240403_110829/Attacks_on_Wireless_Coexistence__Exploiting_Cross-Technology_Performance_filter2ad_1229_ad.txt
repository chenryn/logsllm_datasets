registers at a maximum granularity of ﬁxed clock cycles. We
measure that the SECI message timing has 200 ns standard
deviation on the Wi-Fi D11 core. This jitter is way below
the D11 core SECI sampling rate, meaning that the attacker
cannot observe side-channels based on jitter.
3) Physical Layer Working Principle: Even though the
high-level documentation states the basic features of SECI
and that it is probably transmitting 48 bit or 64 bit blocks,
we do not know its exact working. Thus, we run an initial
test series. The Bluetooth input is supplied by a Linux host
that is decoupled from the Wi-Fi chip, such that Wi-Fi and
Bluetooth can be measured independently. On the Linux host,
we attach the CYW20719 evaluation board to BlueZ and then
use it for audio streaming and keyboard input. Both use
ACL packets for data transmission but at different rates. The
Wi-Fi evaluation board Real-Time Operating System (RTOS)
provides a command-line interface to join an access point as a
station, acting as an access point itself or sending pings across
the network. Figure 5 shows two captures with this setup.
In the ﬁrst capture (Figure 5a), Bluetooth streams music
while Wi-Fi scans for access points. The pattern indicating a
scan has two peaks in the beginning and one in the end. The
intermediate peaks differ slightly depending on the number
of scan results. Each peak carries serial data (see Figure 5b).
The logic analyzer decodes a serial protocol. Most protocol
values start with db. Each value indicates a certain action. For
example, when Wi-Fi starts scanning, the ﬁrst peak decodes as
fe db e1 db 3c. Each packet has a variable length, with
a maximum of up to 64 bit.
4) Bluetooth Grant and Reject DoS (CVE-2020-10370):
Once SECI is set up, Bluetooth waits for grants to send
packets. In case 2.4 GHz Wi-Fi is enabled, Wi-Fi might reject
Bluetooth packets, as they operate on the same frequency
band. Note that Wi-Fi does not reject Bluetooth packets if
it is connected to a 5 GHz access point or if it is disabled.
Wi-Fi can abuse this grant and reject pattern. If Wi-Fi does
not signal that it is inactive but also stops sending grants,
Bluetooth pauses sending packets containing data because its
requests are rejected. We build this as D11 core PoC for the
Nexus 5 as well as the CYW439037+CYW20719 evaluation
board. For the latter, the PoC can temporarily be enabled and
disabled by sending a Wi-Fi packet with a particular payload.
As shown in Figure 6, Wi-Fi pauses sending SECI messages
during this attack period. In the depicted example, Bluetooth
is streaming audio, but pauses in case where Wi-Fi does not
send any further SECI messages. If the period only lasts a
few seconds, Bluetooth is able to maintain active connections
with keep-alive null packets but stops sending data. Otherwise,
connections time out.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
81236
BT
Wi-Fi
Pause D11 core counters
Audio pauses
Continue
2.2
2.3
2.4
2.5
2.6
2.7
2.8
3.1
3.2
3.3
3.4
3.5
3.6
3.7
Fig. 6: Temporary Wi-Fi DoS attack on Bluetooth grant requests that pauses audio playback.
2.9
3
Time (s)
5) Inferring Keypress Timings (CVE-2020-10369): In what
follows, we show that an attacker with control over the Wi-Fi
core can infer exact Bluetooth packet timings and their content
type. This can be used to determine if a packet contained data
and, thus, observe if a packet sent by a Bluetooth keyboard
contains a keypress. Even though we only demonstrate this
for a keyboard, further information disclosure attacks based
on metadata might be possible.
a) Keypress Attacker Model: Keypress timings, as ob-
servable by an attacker, can be analyzed statistically. This
becomes interesting for inferring passwords and password
lengths. For example, after a long idle time, the user likely ﬁrst
enters login credentials. Previous work has shown that timing
attacks on keyboard-based input is possible and developed
working statistical methods [43], [54]. Thus, keypress timings
should not leak via coexistence protocols.
b) Setup: We pair a Linux host with a CYW20719
Bluetooth chip with a keyboard. On the Linux host, we can
record a ground truth about what is happening on the Bluetooth
interface using Wireshark. Each keypress is represented as
Asynchronous Connection-Less (ACL) data. Then, we com-
pare these recordings to SECI.
c) Observing Bluetooth via Wi-Fi: We record traces
of multiple HID keyboards. Typical HID devices operate
at 15 ms. The minimum interval
in classic Bluetooth is
1.25 ms [11, p. 2318]. In practice, we ﬁnd keyboards with
timings of up to 30 ms, as shown in Table III. The Wi-Fi D11
core polls every 1.25 ms and is able to observe each packet’s
metadata at the same rate as Bluetooth packets are sent.
HID devices like keyboards transfer their keystrokes using
the ACL protocol. Thus, on the Bluetooth end,
the ACL
coexistence handler _ecsi_gci_HandlerACL is respon-
sible. This handler writes values to the output register gci_
output. Once a value is written to this register, the Bluetooth
TABLE III: Timings of Bluetooth HID keyboards.
Product
Apple Wireless Keyboard
Apple Magic Keyboard
Adafruit Mini Keyboard
Timing
12.5 ms
15 ms
30 ms
chip sends it over the SECI interface. Then, this value appears
in the Wi-Fi D11 core register.
We analyze which Bluetooth HID events the Wi-Fi D11
core can capture. To this end, we hook the _ecsi_gci_
HandlerACL. This enables us to observe the SECI values
as written by the Bluetooth chip and align these with the
actual keystrokes as decoded by the Bluetooth chip. In parallel,
we attach a logic analyzer to SECI, which is exposed on the
CYW20719 evaluation board. Even though we already know
the values that will be sent to the Wi-Fi D11 core, this enables
us to observe potential jitter. The different outputs produced
by this experiment are depicted in Figure 7.
Using this setup, we ﬁnd that keystroke events are indicated
by the value 85 sent over the serial interface, while empty
packets during inactivity are indicated by the value 05. Thus,
the Wi-Fi D11 core is able to distinguish between packets
with and without keystrokes. The granularity of frames sent
over the SECI physical layer is equal to the HID device
events, which is 30 ms in our example. Moreover, we observe
a jitter of 200 ns, which is way below the Wi-Fi D11 core poll
interval, and, thus, cannot be captured by the Wi-Fi core.
E. Packet Trafﬁc Arbitration (Silicon Labs)
In the following, attacks on a PTA-based interface are
shown. We analyze the Silicon Labs Wi-Fi↔Bluetooth imple-
mentation. Section V-E1 introduces the basic concept behind
PTA. The analysis setup for the Silicon Labs coexistence
development kit is described in Section V-E2. The plain PTA
implementation is susceptible to DoS (see Section V-E3 and
↑
h
↑
a
↑ ↑
l
l
↑
o
↑
↑
d
↑
↑
↑
s
e
i
↑
↑ ↑
s
i
↑
t
↑
↑
e
↑
↑
n
↑
i
↑
e
↑
↑
s
↑
t
t
Wireshark Keypress
Wireshark HID Data
SECI Keyboard
SECI Frame Start (30 ms)
······································································································································································································································································································
30
31
32
33
34
Time (s)
35
36
37
38
Fig. 7: Keypress timings as observed on logic analyzer (•). SECI time resolution is indicated by (·). which is each 30 ms for
the analyzed keyboard. The aligned Wireshark trace is observed on the host and contains the decoded keypresses in addition
to the slightly inaccurate timings (•).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
91237
V-E4), as expected according to the PTA speciﬁcation. The
Silicon Labs implementation introduces a signiﬁcant
jitter
that is sufﬁcient to let Wi-Fi infer basic Bluetooth protocol
activities and vice versa (see Section V-E5 and V-E6).
1) PTA Working Principle: As brieﬂy outlined in Sec-
tion V-A1, PTA allows for prioritizing transmissions like
Bluetooth voice and Wi-Fi acknowledgments. The Bluetooth
voice mode in headsets is also known as SCO, which is
optimized for low-latency voice, in contrast to music and data
transmission. Since it is low-latency, it should be prioritized.
In Wi-Fi, each data frame is immediately acknowledged by
the receiver within a ﬁxed time slot. If the acknowledgment is
not received, the data frame must be retransmitted—causing
signiﬁcantly more congestion.
PTA allows two wireless chips to coordinate their transmis-
sions. Both ends get the ultimate power to request a priority
transmission. In an over-the-air scenario, if both ends send
their data at once, it would collide, and both transmissions are
lost. Thus, PTA decides which transmitter wins the competi-
tion and tells the other end to wait. PTA is a simple scheme
that only allows to request a transmission slot and optionally
mark its priority. No metadata about packet types is included.
Each transmitter decides on its own what should be prioritized.
2) Experimental Setup: As shown in Figure 8, PTA coex-
istence is based on three signals: REQUEST and PRIORITY
sent by Bluetooth and GRANT sent by Wi-Fi. Silicon Labs
integrates the PTA coexistence controller into the Wi-Fi chip.
Thus, Wi-Fi knows whether it has a priority transmission and
schedules it without asking permission. However, Bluetooth
can request priority for urgent transmissions.
Silicon Labs offers a separate coexistence development kit
to be plugged into a Wi-Fi and a Bluetooth development
board. The coexistence kit provides PTA and additional debug
outputs. Parts of the documentation are non-public, but a
public application note explains the basic conﬁguration and
logic analyzer outputs [52].
Bluetooth
BRD4181B
Wi-Fi
REQUEST
PRIORITY
GRANT
BRD4321A
Integrated PTA Controller
Fig. 8: PTA implementation by Silicon Labs.
3) Wi-Fi→Bluetooth DoS: In the ﬁrst experiment, the Blue-
tooth development board is conﬁgured as BLE beacon, which
regularly advertises its identity. The beacon sends coexistence
REQUEST signals during this time. Once Wi-Fi changes the
GRANT signal from 0 to 1 (inverted logic), the requests sent by
Bluetooth become shorter. Moreover, the beacon disappears in
a Bluetooth scanner app, meaning that it stops sending packets.
While this is the expected coexistence behavior, Bluetooth
does not continue sending BLE advertisements, even if GRANT
is set to 1 for multiple minutes—causing a permanent DoS.
Note that the PTA conﬁguration does not make any differ-
ence for the Bluetooth side, since it only observes the resulting
GRANT signal generated by the PTA controller.
4) Bluetooth→Wi-Fi DoS: Before turning on the Wi-Fi
radio, ﬁve different scheduling priorities can be conﬁgured in
the integrated PTA controller by setting them in the software
development platform [53]. The lowest priority for Wi-Fi and
highest for the coexistence device, which is Bluetooth in this
setup, is COEX_MAXIMIZED. In this mode, Wi-Fi connec-
tions might be dropped. The opposite, WLAN_MAXIMIZED,
maximizes Wi-Fi priority at the cost of Bluetooth. The default
conﬁguration is BALANCED.
As summarized in Table IV, we test if any of these con-
ﬁgurations are susceptible to DoS attacks. The PTA priority
changes how often Bluetooth coexistence requests are granted.
If Bluetooth makes excessive prioritized requests and is given
a priority by the PTA conﬁguration, this inﬂuences the Wi-Fi
throughput. When conﬁguring the Wi-Fi device as an access
point and pinging it as a client, prioritized Bluetooth requests
lead to 100 % packet loss for almost all settings. Even with
the Wi-Fi priority set to WLAN_HIGH, packets are signiﬁcantly
delayed. Only with WLAN_MAXIMIZED priority, a Bluetooth
PRIORITY request cannot override the Wi-Fi priority.
TABLE IV: Silicon Labs Wi-Fi DoS via Bluetooth requests.
PTA Priority
COEX_MAXIMIZED
COEX_HIGH
BALANCED
WLAN_HIGH
WLAN_MAXIMIZED Wi-Fi gets priority
REQUEST, no PRIO set
DoS
DoS
DoS
Grant periodically denied
REQUEST, PRIO set
DoS
DoS
DoS
DoS
Wi-Fi gets priority
5) Wi-Fi→Bluetooth Trafﬁc Type Disclosure: The three
PTA wires are set to high or low, and do not contain in-
formation about Wi-Fi or Bluetooth packets. However, the
Silicon Labs implementation introduces a signiﬁcant
jitter
in Bluetooth REQUEST signals, which Wi-Fi can observe.
According to the Silicon Labs documentation, coexistence
signals are sampled at a rate of 10 µs. The measurement with
a logic analyzer is more precise. However, an attacker with
Wi-Fi code execution is limited to this rate. Interestingly, the
jitter exceeds 10 µs by up to +302 µs. The jitter stays within
±312.5 µs, which is the maximum acceptable jitter for BLE
coexistence to work at all, since BLE uses 625 µs time slots.
BLE trafﬁc can be sent unacknowledged as notiﬁcation
or acknowledged as indication [11, p. 1584ff]. As shown in
Figure 9, there are major differences in slot offsets depending
s
µ
n
i
e
m
T
i
300
200
100
0
−100
−200
−300
Connected (Idle)
Indication
Notiﬁcation
Fig. 9: REQUEST offset compared to 625 µs Bluetooth slots.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
101238
on the trafﬁc type. The interquantile range of the observed
offsets stays within approximately 30 µs for all types, but the
median shifts drastically.
The jitter only leaves a very short reaction time for Wi-Fi
to stay within one Bluetooth time slot from a coexistence
performance perspective. Jitter is not only a performance
issue but also Wi-Fi can observe additional information
about Bluetooth trafﬁc types by approximating the jitter.
This is surprising because the raw PTA protocol does not
contain any metadata. However,
the information extracted
using the jitter is less ﬁne-grained than metadata from vendor-
speciﬁc extensions. Even though this measurement focuses on
extracting information about packets sent by the Bluetooth
chip, further attacks like side-channels on the Bluetooth chip’s
calculation might be possible. Yet, such attacks are likely
prevented when restricting observations to the PTA sampling
window of 10 µs on the Wi-Fi chip.
6) Bluetooth→Wi-Fi Activity Disclosure: In the opposite
direction, the Wi-Fi GRANT signals also have signiﬁcant time
variances if Wi-Fi is under high load. However, we assume
the same hardware-based sampling constraints for an attacker
with on-chip code execution. These prevent ﬁne-grained mea-
surements for effective side channels.
In our experiment, the Wi-Fi development board runs a min-
imal network stack, including a few testing tools. It includes
an iperf implementation that can measure TCP throughput.