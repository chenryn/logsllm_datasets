## 沉浸式学习PostgreSQL|PolarDB 19: 体验最流行的开源企业ERP软件 odoo   
### 作者    
digoal    
### 日期    
2023-10-11    
### 标签    
PostgreSQL , PolarDB , 数据库 , 教学    
----    
## 背景    
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 体验最流行的开源企业ERP软件 odoo   
odoo是非常流行的开源企业 ERP软件, 支持二次开发, 根据企业需求定制功能. 国内基于odoo的ERP软件公司也非常多, 有兴趣的同学可以关注ODOO中文社区.   
另外我们知道企业ERP的场景对数据库的要求非常高, 因为流程复杂, 同时关联关系复杂, 业务请求转换成数据库的SQL可能达上百个表的JOIN, 嵌套子查询等. 事务通常也会非常大, 为了保证数据的一致性, 业务流程长, 事务大.  
odoo选择了功能高级的PG数据库作为默认的数据库, 但是随着企业数据量的增长, PolarDB PG这种分布式共享存储读写分离的架构可能更加能满足大型企业的需求.   
### 实现和对照      
使用上海开源信息技术协会的odoo benchmark来部署odoo, 同时对比pg和PolarDB pg.  
- https://github.com/shanghaiopen/PolarDB-PG-Benchmark  
下面的步骤在我的测试环境macbook(M2 chip)中完成. 如果你本地没有资源运行这个测试, 可以使用[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
1、安装docker、docker compose: https://docs.docker.com/engine/install/  
2、启动PG和PolarDB-PG, 这里用到了2个镜像.  
2\.1、PolarDB-PG  
```  
# 拉取 PolarDB-PG 镜像  
docker pull polardb/polardb_pg_local_instance  
# 创建并运行容器  
docker run -it -d -P --cap-add=SYS_PTRACE --cap-add SYS_ADMIN --privileged=true --name polardb --shm-size=512m --network bridge polardb/polardb_pg_local_instance   
```  
获得polardb-pg容器IP  
```  
docker inspect polardb|grep IPAddress  
172.17.0.2  
```  
进入容器, 并创建数据库用户.  
```  
docker exec -ti polardb bash  
-- 创建用户, 但是不要创建odoo使用的目标数据库.   
psql  
create role pd login createdb encrypted password 'postgres';  
```  
数据库监听端口:  
```  
postgres=# show port;  
 port   
------  
 5432  
(1 row)  
```  
2\.2、PG-14  
```  
# 拉取 PG 14 镜像    
docker pull registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts    
# 创建并运行容器   
docker run --platform linux/amd64 -d -it -P --cap-add=SYS_PTRACE --cap-add SYS_ADMIN --privileged=true --name pg --shm-size=512m --network bridge registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts    
```  
获得pg-14容器IP  
```  
docker inspect pg|grep IPAddress  
172.17.0.3  
```  
进入容器, 并创建数据库用户.  
```  
docker exec -ti pg bash  
-- 创建用户, 但是不要创建odoo使用的目标数据库.   
psql  
create role pg login createdb encrypted password 'postgres';  
```  
数据库监听端口:  
```  
postgres=# show port;  
 port   
------  
 1921  
(1 row)  
```  
3、拉取odoo 16镜像  
```  
docker pull --platform linux/amd64 odoo:16   
```  
https://github.com/odoo/docker-official-images      
4、克隆PolarDB-PG-Benchmark项目  
```  
git clone --depth 1 https://github.com/shanghaiopen/PolarDB-PG-Benchmark
改了一点配置文件还没有MR, 所以你可能要使用下面这条git clone
git clone --depth 1 https://github.com/digoal/PolarDB-PG-Benchmark
```
5、根据上面得到的实际情况, 配置变量  
```  
cd PolarDB-PG-Benchmark  
cp .env.example .env, 配置 .env 变量   
vi .env  
PG_HOST=172.17.0.3  
PG_PORT=1921  
PG_DB=postgres  
PG_USER=pg  
PG_PASS=postgres  
PG_ODOO_HOST=pg  
PD_HOST=172.17.0.2  
PD_PORT=5432  
PD_DB=postgres  
PD_USER=pd  
PD_PASS=postgres  
PD_ODOO_HOST=pd  
```  
6、配置nginx和odoo  
```  
cp nginx/nginx.conf.example nginx/nginx.conf  
cp odoopd/config/odoo.conf.example odoopd/config/odoo.conf  
cp odoopg/config/odoo.conf.example odoopg/config/odoo.conf  
-- 将目录和子目录及文件权限配置为777  
chmod -R 777 odoop*  
```  
7、启动nginx和2个odoo服务(一个连的是PolarDB-PG, 另一个连的是PG-14),   
```  
docker compose up
或(如下后台运行, 不便于观察日志.)
docker compose up -d
如果你使用后天运行如何观察日志?