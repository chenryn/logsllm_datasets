---
title: Python Snippets
date: 20200717
author: Lyz
---
# [Get unique items between two lists](https://stackoverflow.com/questions/28444561/get-only-unique-elements-from-two-lists)
If you want all items from the second list that do not appear in the first list you can write:
```
x = [1,2,3,4]
f = [1,11,22,33,44,3,4]
result = set(f) - set(x)
```
# [Pad number with zeros](https://stackoverflow.com/questions/134934/display-number-with-leading-zeros)
```python
number = 1
print(f"{number:02d}")
```
# Get the modified time of a file with Pathlib
```python
file_ = Path('/to/some/file')
file_.stat().st_mtime
```
You can also access:
- Created time: with `st_ctime`
- Accessed time: with `st_atime`
They are timestamps, so if you want to compare it with a datetime object use the `timestamp` method:
```python
assert datetime.now().timestamp - file_.stat().st_mtime >> from urllib.parse import unquote
>>> print(unquote("%CE%B1%CE%BB%20"))
αλ
```
# Read file with Pathlib
```python
file_ = Path('/to/some/file')
file_.read_text()
```
# [Get changed time of a file](https://stackoverflow.com/questions/237079/how-do-i-get-file-creation-and-modification-date-times)
```python
import os
os.path.getmtime(path)
```
# [Sort the returned paths of glob](https://stackoverflow.com/questions/6773584/how-are-glob-globs-return-values-ordered)
`glob` order is arbitrary, but you can sort them yourself.
If you want sorted by name:
```python
sorted(glob.glob('*.png'))
```
sorted by modification time:
```python
import os
sorted(glob.glob('*.png'), key=os.path.getmtime)
```
sorted by size:
```python
import os
sorted(glob.glob('*.png'), key=os.path.getsize)
```
# [Copy files from a python package](https://stackoverflow.com/questions/33499866/how-can-i-copy-files-from-a-python-package-site-packages-to-a-directory)
```python
pkgdir = sys.modules[''].__path__[0]
fullpath = os.path.join(pkgdir, )
shutil.copy(fullpath, os.getcwd())
```
# [Substract two paths](https://stackoverflow.com/questions/10149263/extract-a-part-of-the-filepath-a-directory-in-python)
It can also framed to how to get the relative path between two absolute paths:
```python
>>> from pathlib import Path
>>> p = Path('/home/lyz/')
>>> h = Path('/home/')
>>> p.relative_to(h)
PosixPath('lyz')
```
# [Move a file](https://stackoverflow.com/questions/8858008/how-to-move-a-file-in-python)
Use one of the following
```python
import os
import shutil
os.rename("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
os.replace("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
shutil.move("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
```
# [Print an exception](https://stackoverflow.com/questions/1483429/how-do-i-print-an-exception-in-python)
## Using the logging module
Logging an exception can be done with the module-level function
`logging.exception()` like so:
```python
import logging
try:
    1 / 0
except BaseException:
    logging.exception("An exception was thrown!")
```
```
ERROR:root:An exception was thrown!
Traceback (most recent call last):
File ".../Desktop/test.py", line 4, in 
    1/0
ZeroDivisionError: division by zero
```
Notes
- The function `logging.exception()` should only be called from an exception
  handler.
- The logging module should not be used inside a logging handler to avoid a
  `RecursionError`.
It's also possible to log the exception with another log level but still show
the exception details by using the keyword argument `exc_info=True`, like so:
```python
logging.critical("An exception was thrown!", exc_info=True)
logging.error("An exception was thrown!", exc_info=True)
logging.warning("An exception was thrown!", exc_info=True)
logging.info("An exception was thrown!", exc_info=True)
logging.debug("An exception was thrown!", exc_info=True)
# or the general form
logging.log(level, "An exception was thrown!", exc_info=True)
```
## With the traceback module
The `traceback` module provides methods for formatting and printing exceptions
and their tracebacks, e.g. this would print exception like the default handler
does:
```python
import traceback
try:
    1 / 0
except Exception:
    traceback.print_exc()
```
```python
Traceback (most recent call last):
  File "C:\scripts\divide_by_zero.py", line 4, in 
    1/0
ZeroDivisionError: division by zero
```
# [Get common elements of two lists](https://stackoverflow.com/questions/13962781/common-elements-in-two-lists-python)
```python
>>> a = ['a', 'b']
>>> b = ['c', 'd', 'b']
>>> set(a) & set(b)
{'b'}
```
# [Get the difference of two lists](https://stackoverflow.com/questions/2070643/subtracting-two-lists-in-python)
If we want to substract the elements of one list from the other you can use:
```python
for x in b:
  if x in a:
    a.remove(x)
```
# [Recursively find files](https://stackoverflow.com/questions/2186525/how-to-use-glob-to-find-files-recursively)
## Using `pathlib.Path.rglob`
```python
from pathlib import Path
for path in Path("src").rglob("*.c"):
    print(path.name)
```
If you don't want to use `pathlib`, use can use `glob.glob('**/*.c')`, but don't
forget to pass in the recursive keyword parameter and it will use inordinate
amount of time on large directories.
## os.walk
For older Python versions, use `os.walk` to recursively walk a directory and
`fnmatch.filter` to match against a simple expression:
```python
import fnmatch
import os
matches = []
for root, dirnames, filenames in os.walk("src"):
    for filename in fnmatch.filter(filenames, "*.c"):
        matches.append(os.path.join(root, filename))
```
# [Pad a string with spaces](https://stackoverflow.com/questions/20309255/how-to-pad-a-string-to-a-fixed-length-with-spaces-in-python)
```python
>>> name = 'John'
>>> name.ljust(15)
'John           '
```
# [Get hostname of the machine](https://stackoverflow.com/questions/4271740/how-can-i-use-python-to-get-the-system-hostname)
Any of the next three options:
```python
import os
os.uname()[1]
import platform
platform.node()
import socket
socket.gethostname()
```
# [Pathlib make parent directories if they don't exist](https://stackoverflow.com/questions/50110800/python-pathlib-make-directories-if-they-don-t-exist)
```python
pathlib.Path("/tmp/sub1/sub2").mkdir(parents=True, exist_ok=True)
```
From the
[docs](https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir):
- If `parents` is `true`, any missing parents of this path are created as
  needed; they are created with the default permissions without taking mode into
  account (mimicking the POSIX `mkdir -p` command).
- If `parents` is `false` (the default), a missing parent raises
  `FileNotFoundError`.
- If `exist_ok` is `false` (the default), `FileExistsError` is raised if the
  target directory already exists.
- If `exist_ok` is `true`, `FileExistsError` exceptions will be ignored (same
  behavior as the POSIX `mkdir -p` command), but only if the last path component
  is not an existing non-directory file.
# [Pathlib touch a file](https://docs.python.org/3/library/pathlib.html#pathlib.Path.touch)
Create a file at this given path.
```python
pathlib.Path("/tmp/file.txt").touch(exist_ok=True)
```
If the file already exists, the function succeeds if `exist_ok` is `true` (and
its modification time is updated to the current time), otherwise
`FileExistsError` is raised.
If the parent directory doesn't exist you need to create it first.
```python
global_conf_path = xdg_home / "autoimport" / "config.toml"
global_conf_path.parent.mkdir(parents=True)
global_conf_path.touch(exist_ok=True)
```
# [Pad integer with zeros](https://stackoverflow.com/questions/39402795/how-to-pad-a-string-with-leading-zeros-in-python-3)
```python
>>> length = 1
>>> print(f'length = {length:03}')
length = 001
```
# [Print datetime with a defined format](https://stackoverflow.com/questions/311627/how-to-print-a-date-in-a-regular-format)
```python
now = datetime.now()
today.strftime("We are the %d, %b %Y")
```
Where the datetime format is a string built from
[these directives](#parse-a-datetime-from-a-string).
# [Print string with asciiart](https://www.askpython.com/python-modules/ascii-art)
```bash
pip install pyfiglet
```
```python
from pyfiglet import figlet_format
print(figlet_format("09 : 30"))
```
If you want to change the default width of 80 caracteres use:
```python
from pyfiglet import Figlet
f = Figlet(font="standard", width=100)
print(f.renderText("aaaaaaaaaaaaaaaaa"))
```
# Print specific time format
```python
datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
```
| Code | Meaning Example                                                                                                                                                                      |
| ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| %a   | Weekday as locale’s abbreviated name. Mon                                                                                                                                            |
| %A   | Weekday as locale’s full name.  Monday                                                                                                                                               |
| %w   | Weekday as a decimal number, where 0 is Sunday and 6 is Saturday. 1                                                                                                                  |
| %d   | Day of the month as a zero-padded decimal number. 30                                                                                                                                 |
| %-d  | Day of the month as a decimal number. (Platform specific) 30                                                                                                                         |
| %b   | Month as locale’s abbreviated name. Sep                                                                                                                                              |
| %B   | Month as locale’s full name.  September                                                                                                                                              |
| %m   | Month as a zero-padded decimal number.  09                                                                                                                                           |
| %-m  | Month as a decimal number. (Platform specific)  9                                                                                                                                    |
| %y   | Year without century as a zero-padded decimal number. 13                                                                                                                             |
| %Y   | Year with century as a decimal number.  2013                                                                                                                                         |
| %H   | Hour (24-hour clock) as a zero-padded decimal number. 07                                                                                                                             |
| %-H  | Hour (24-hour clock) as a decimal number. (Platform specific) 7                                                                                                                      |
| %I   | Hour (12-hour clock) as a zero-padded decimal number. 07                                                                                                                             |
| %-I  | Hour (12-hour clock) as a decimal number. (Platform specific) 7                                                                                                                      |
| %p   | Locale’s equivalent of either AM or PM. AM                                                                                                                                           |
| %M   | Minute as a zero-padded decimal number. 06                                                                                                                                           |
| %-M  | Minute as a decimal number. (Platform specific) 6                                                                                                                                    |
| %S   | Second as a zero-padded decimal number. 05                                                                                                                                           |
| %-S  | Second as a decimal number. (Platform specific) 5                                                                                                                                    |
| %f   | Microsecond as a decimal number, zero-padded on the left. 000000                                                                                                                     |
| %z   | UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive).                                                                                                     |
| %Z   | Time zone name (empty string if the object is naive).                                                                                                                                |
| %j   | Day of the year as a zero-padded decimal number.  273                                                                                                                                |
| %-j  | Day of the year as a decimal number. (Platform specific)  273                                                                                                                        |
| %U   | Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.  39 |
| %W   | Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.                 |
| %c   | Locale’s appropriate date and time representation.  Mon Sep 30 07:06:05 2013                                                                                                         |
| %x   | Locale’s appropriate date representation. 09/30/13                                                                                                                                   |
| %X   | Locale’s appropriate time representation. 07:06:05                                                                                                                                   |
| %%   | A literal '%' character.  %                                                                                                                                                          |
# [Get an instance of an Enum by value](https://stackoverflow.com/questions/29503339/how-to-get-all-values-from-python-enum-class)
If you want to initialize a pydantic model with an `Enum` but all you have is
the value of the `Enum` then you need to create a method to get the correct
Enum. Otherwise `mypy` will complain that the type of the assignation is `str`
and not `Enum`.
So if the model is the next one:
```python
class ServiceStatus(BaseModel):
    """Model the docker status of a service."""
    name: str
    environment: Environment
```
You can't do `ServiceStatus(name='test', environment='production')`. you need to
add the `get_by_value` method to the `Enum` class:
```python
class Environment(str, Enum):
    """Set the possible environments."""
    STAGING = "staging"
    PRODUCTION = "production"
    @classmethod
    def get_by_value(cls, value: str) -> Enum:
        """Return the Enum element that meets a value"""
        return [member for member in cls if member.value == value][0]
```
Now you can do:
```python
ServiceStatus(name="test", environment=Environment.get_by_value("production"))
```
# [Fix R1728: Consider using a generator](https://pylint.pycqa.org/en/latest/user_guide/messages/refactor/consider-using-generator.html)
Removing `[]` inside calls that can use containers or generators should be