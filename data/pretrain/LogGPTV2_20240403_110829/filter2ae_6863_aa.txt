## 前言
0ctf这道题目其实不需要对抗算法就能做出来了，主要是出题人抬了一手误差范围给大了。  
虽然给了很多文件，不过其实大多数都没有用。  
核心部分就是python flask框架搭建的web，keras搭建的神经网络，内置了训练好的h5模型。  
所以tensorflow，keras，flask， numpy这些基本环境都需要安装，安装过程直接百度即可。
* * *
## 分析
查看app.py  
核心函数index：
    def index():
        if request.method == 'POST' and request.form["submit"]==u"upload":
            try:
                f = request.files['file']
                with zipfile.ZipFile(f) as myzip, tempfile.TemporaryDirectory() as t_dir, graph.as_default():
                    lenet = LeNet()   # 导入训练好的LeNet模型
                    for i in range(8):   # 依次static的八张图片以及上传的八张图片
                        pathori = os.path.join(DIR, "static", "%d.jpg" % i)
                        path = os.path.join(t_dir, "%d.jpg" % i)
                        with myzip.open("%d.jpg" % i, "r") as ii:
                            with open(path, "wb") as oo:
                                oo.write(ii.read())
                        imageori = plt.imread(pathori)   # 图片转化成矩阵形式 shape为(32, 32, 3)
                        imagenew = plt.imread(path)
                        # 计算图片被修改的误差，每个像素点的差值的平方的和的平均值
                        err = mse(imageori,imagenew)  
                        print(err)
                        # 误差在0-200内才用模型对其预测
                        if err<200 and err!=0:
                            predictid, predictclass, _ = predictimg(path,lenet)
                            predictidori, predictclassori, _ = predictimg(pathori,lenet)
                            print(predictclass, predictclassori)
                            if predictid == predictidori:
                                name = "id:%d your result is " % i + predictclass
                                break
                            # 两张图片预测结果不相同则进入下一轮循环
                            else:
                                continue
                        elif err!=0:
                            name ="id:%d error too much modification, %s" % (i, err)
                            break
                        else:
                            name ="id:%d please do something" % i
                            break
                    # 八张图片全部与原有图片预测结果不同，则返回flag
                    else:
                        name = "flag{FLAG}"
            except Exception as e:
                name = "error %s" % e
        else:
            name = ""
        return render_template('index.html', name=name,time_val=time.time())
* * *
通过分析可以得知：  
程序需要你上传八张图片的压缩包  
你的每一张图片都必须是基于static文件夹中的基础图片0-7生成的，误差有一定的约束（mse()函数计算）  
你的上传图片不能被识别成它基础图片的同一种类
* * *
预测图片分类调用了predicting函数，发现confidence其实是softmax后的结果，可以理解成模型对传入图片被识别成各个种类的置信度。置信度最大的对应位置其实就是模型最后对图片识别的结果：
    def predictimg(path,lenet):
        image = plt.imread(path) 
        confidence = lenet.predict(image)[0]
        predicted_class = np.argmax(confidence)
        return  predicted_class, class_names[predicted_class],confidence[predicted_class]
* * *
可以在同目录下建一个test.py测试一下
    def predictimg(path, lenet):
        image = plt.imread(path) 
        confidence = lenet.predict(image)[0]  # 得到lenet模型预测对每种类别的置信度
        predicted_class = np.argmax(confidence)
        for i in range(10):
            print(class_names[i], confidence[i] * 100)
        return predicted_class, class_names[predicted_class], confidence[predicted_class]
    DIR = os.path.abspath(os.path.dirname(__file__))
    path = DIR + "\\static\\0.jpg"
    lenet = LeNet()
    image_a = plt.imread(path)
    pre_class, pre_name, _ = predictimg(path, lenet)
    print("predict name: ", pre_name)
* * *
输出了分类以及置信度
    Successfully loaded lenet
    airplane 59.14044976234436
    automobile 0.0004856942268816056
    bird 37.361788749694824
    cat 1.458375621587038
    deer 1.07676163315773
    dog 0.8214056491851807
    frog 0.0049890899390447885
    horse 0.11071392800658941
    ship 0.0228012926527299
    truck 0.002230720747320447
    predict name:  airplane
* * *
再看一下lenet.predict函数，在networks文件夹里的lenet.py：
    def predict(self, img):
            processed = self.color_process(img)
            return self._model.predict(processed, batch_size=self.batch_size)
    def color_process(self, imgs):
            if imgs.ndim < 4:
                imgs = np.array([imgs])
            imgs = imgs.astype('float32')
            mean = [125.307, 122.95, 113.865]
            std  = [62.9932, 62.0887, 66.7048]
            for img in imgs:
                for i in range(3):
                    img[:, :, i] = (img[:, :, i] - mean[i]) / std[i]
            return imgs
* * *
用color_process对每一个像素点都操作了一下，训练时也是这么操作的，所以不用在意。  
然后调用_model_predict进行预测  
查看上面的代码可知，_model 是加载的训练好的模型， 在models文件夹下的lenet.h5  
model的predict是keras训练好后的模型自带的函数，用来输出预测概率的。
* * *
## 简单解法
这种解法简单好理解，但是不怎么具有通用性。  
因为要求我们的上传的图片像素的平均误差平方不超过200，所以每个像素的变化范围很大，变化意味着置信度发生变化。  
同时常识告诉我们，扰动施加的越大，那么识别误差也一定会越大。  
修改一下predicting，然后测试一下：
    class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
    def predictimg(path, lenet, judge=False, data=None):
        if judge:
            image = data
        else:
            image = plt.imread(path)
        confidence = lenet.predict(image)[0]  # 得到lenet模型预测对每种类别的置信度
        predicted_class = np.argmax(confidence)
        for i in range(10):
            print(class_names[i], confidence[i] * 100)
        return predicted_class, class_names[predicted_class], confidence[predicted_class]
    def mse(imageA, imageB):
        err = np.sum((imageA.astype("float") - imageB.astype("float")) ** 2)
        err /= float(imageA.shape[0] * imageA.shape[1])
        return err
    lenet = LeNet()
    image_b = np.zeros(shape=(32, 32, 3), dtype=np.float32)
    rd = np.random.rand(32, 32, 3) * 14
    DIR = os.path.abspath(os.path.dirname(__file__))
    path = DIR + "\\static\\0.jpg"
    image_a = plt.imread(path)
    image_b = image_a.astype(np.float32) + rd
    print("error: ", mse(image_a, image_b))
    pre_class1, pre_name, _ = predictimg(path, lenet)
    print("predict name: ", pre_name)
    print("-" * 20)
    pre_class2, pre_name, _ = predictimg(path, lenet, judge=True, data=image_b)
    print("predict name: ", pre_name)
* * *
输出：
    Successfully loaded lenet
    error:  195.31106524999055
    airplane 59.14044976234436
    automobile 0.0004856942268816056
    bird 37.361788749694824
    cat 1.458375621587038
    deer 1.07676163315773
    dog 0.8214056491851807
    frog 0.0049890899390447885
    horse 0.11071392800658941
    ship 0.0228012926527299
    truck 0.002230720747320447
    predict name:  airplane
    --------------------    airplane 45.86603343486786
    automobile 0.0005276419415167766
    bird 50.21917223930359
    cat 0.9045490995049477
    deer 2.296214923262596