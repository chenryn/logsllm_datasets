308
第14章处理用户输入
$./test25.sh
Please enter your nane:
Sorry, too slow!
如果计时器过期，read命令会以非零退出状态码退出，可以使用如if-then语句或while
循环这种标准的结构化语句来理清所发生的具体情况。在本例中，计时器过期时，i语句不成立，
shell会执行else部分的命令。
也可以不对输入过程计时，而是让read命令来统计输人的字符数。当输人的字符达到预设
的字符数时，就自动退出，将输人的数据赋给变量。
S cat test26.sh
#1/bin/bash
getting juat one character of input
xansue 。 c[t/A] snuTauo> o quen noA o。 d- [u- peox
case $anewex in
Y 1 yl  echo
N1 nlecho
echo OK, goodbye
exit:1
echo *rhia la the end of the scxipt
esac
$./test26.sh
$
Do you want to continue [Y/N]? 
Thia la the end of the scxipt
flne, contInue on..
S./test26.sh
OK, goodbye
Do you want to continue [Y/N]? 
本例中将-n选项和值1一起使用，告诉read命令在接受单个字符后退出。只要按下单个字符
回答后，read命令就会接受输人并将它传给变量，无需按回车键。
14.6.3隐藏方式读取
有时你需要从脚本用户处得到输人，但又在屏幕上显示输人信息。其中典型的例子就是输人
的密码，但除此之外还有很多其他需要隐藏的数据类型。
-s选项可以避免在read命令中输人的数据出现在显示器上（实际上，数据会被显示，只是
read命令会将文本颜色设成跟背景色一样）。这里有个在脚本中使用-s选项的例子。
S cat test27.sh
#1/bin/bash
 hiding input Gata from the monitox
gsed 。 =pzomssed xno. xoqug. d- s- peox
---
## Page 324
14.7小结
309
Bcho
sseds Atteex pzomssed xnoA sI。 oqoe
Enter your paasword:
S./test27.sb
Iα your password really T3atlng?
输人提示符输人的数据不会出现在屏幕上，但会赋给变量，以便在脚本中使用。
14.6.4从文件中读取
最后，也可以用read命令来读取Linux系统上文件里保存的数据。每次调用read命令，它都
会从文件中读取一行文本。当文件中再没有内容时，read命令会退出并返回非零退出状态码。
其中最难的部分是将文件中的数据传给read命令。最常见的方法是对文件使用cat命令，将
结果通过管道直接传给含有read命令的while命令。下面的例子说明怎么处理。
S cat test28.sh
 reading data from a fi1e
#1/bin/bash
cat test 1 while read line
count=1
echo *Line $count : $1ine*
[t + qumoos 1s=qumoo
echo *Flnished procesalng the fi1e*
done
S cat test
The quick brown dog jumpa over the lazy fox,
Thla is a test,
O Romeo, Roneo! Wherefore art thou Roneo?
thia is only a teat.
S./test28.ah
Line 1: The quick broum dog jumpa over the lazy fox.
Line 2: Thia la a teat, this ia only a teat.
Line 3: O Roneo, Romeo! Wherefore art thou Romeo?
Finlshed procesaing the fi1e
while循环会持续通过reac命令处理文件中的行，直到read命令以非零退出状态码退出。
14.7小结
本章描述了3种不同的方法来从脚本用户处获得数据。命令行参数允许用户运行脚本时直接
从命令行输人数据。脚本通过位置参数来取回命令行参数并将它们赋给变量
shift命令通过对位置参数进行轮转的方式来操作命令行参数。就算不知道有多少个参数，
这个命令也可以让你轻松遍历参数。
---
## Page 325
第14章处理用户输入
有三个特殊变量可以用来处理命令行参数。shell会将s#变量设为命令行输人的参数总数。$*
变量会将所有参数保存为一个字符甲。So变量将所有变量都保存为单独的词。这些变量在处理长
参数列表时非常有用。
除了参数外，脚本用户还可以用命令行选项来给脚本传递信息。命令行选项是前面带有单破
折线的单个字母。可以给不同的选项赋值，从而改变脚本的行为。
bash shell提供广三种方式来处理命令行选项。
第一种方式是将它们像命令行参数一样处理。可以利用位置参数变量来遍历选项，在每个选
项出现在命令行上时处理它。
另一种处理命令行选项的方式是用getopt命令。该命令会将命令行选项和参数转换成可以
在脚本中处理的标准格式。getopt命令允许你指定将哪些字母识别成选项以及哪些选项需要额
外的参数值。getopt命令会处理标准的命令行参数并按正确顺序输出选项和参数。
处理命令行选项的最后一种方法是通过getopts命令（注意是复数）。getopts命令提供了
处理命令行参数的高级功能。它支持多值的参数，能够识别脚本未定义的选项。
从脚本用户处获得数据的一种交互方法是read命令。reac命令支持脚本向用户提问并等待。
read命令有一些选项支持定制脚本的输人数据，比如隐藏输人数据选项、超时选项以及要
求输人特定数目字符的选项。
下一章，我们会进一步看到bashshell脚本如何输出数据。到目前为止，你已经学习了如何在
屏幕上显示数据，以及如何将数据重定向给文件。接下来，我们会探索一些其他方法，不但可以
将数据导向特定位置，还可以将特定类型的数据导向特定位置。这可以让你的脚本看起来更专业！
---
## Page 326
15
15
第15章
呈现数据
本章内容
口再探重定向
口标准输人和输出
口报告错误
丢弃数据
创建日志文件
来显示信息。第11章中演示了如何将命令的输出重定向到文件中。本章将会展开这个
主题，演示如何将脚本的输出重定向到Linux系统的不同位置。
15.1理解输入和输出
至此你已经知道了两种显示脚本输出的方法：
口在显示器屏幕上显示输出
将输出重定向到文件中
这两种方法要么将数据输出全部显示，要么什么都不显示。但有时将一部分数据在显示器上
显示，另一部分数据保存到文件中也是不错的。对此，了解Linux如何处理输人输出能够帮助你
就能将脚本输出放到正确位置。
下面几节会介绍如何用标准的Linux输人和输出系统来将脚本输出导向特定位置。
15.1.1标准文件描述符
Linux系统将每个对象当作文件处理。这包括输入和输出进程。Linux用文件描述符（file
descriptor）来标识每个文件对象。文件描述符是一个非负整数，可以唯一标识会话中打开
的文件。每个进程一次最多可以有九个文件描述符。出于特殊目的，bash shell保留了前三个文
件描述符（0、1和2），见表15-1。
---
## Page 327
312
第15章呈现数据
表15-1Linux的标准文件描述符
文件描述符
缩
写
措述
0
STDIN
标准输入
1
STDOUT
标准输出
2
STDERR
标准错误
这三个特殊文件描述符会处理脚本的输人和输出。shell用它们将shell默认的输入和输出导向
到相应的位置。下面几节将会进一步介绍这些标准文件描述符。
1. STDIN
STDIN文件描述符代表shell的标准输入。对终端界面来说，标准输入是键盘。shell从STDIN
文件描述符对应的键盘获得输人，在用户输人时处理每个字符。
在使用输人重定向符号（ test2
$ cat test2
tota] 20
-rwrvz=- 1 rich rich 53 20141016 11:30 test
rwrv-2-- 1 rich rich 0 20141016 11:32 test2
---
## Page 328
15.1理解输入和输出
313
rv-rwr-- 1 zich zich 73 2014-1016 11:23 testf11e
15
通过输出重定向符号，通常会显示到显示器的所有输出会被shell重定向到指定的重定向文件。
你也可以将数据追加到某个文件。这可以用>>符号来完成。
2488] teat3
1s: cannot access badrlle: No such file or Girectory
$ cat test3
当命令生成错误消息时，shell并未将错误消息重定向到输出重定向文件。shell创建了输出重
定向文件，但错误消息却显示在了显示器屏幕上。注意，在显示test3文件的内容时并没有任何错
误。test3文件创建成功了，只是里面是空的。
shell对于错误消息的处理是跟普通输出分开的。如果你创建了在后台模式下运行的shell脚
本，通常你必须依赖发送到日志文件的输出消息。用这种方法的话，如果出现了错误信息，这些
信息是不会出现在日志文件中的。你需要换种方法来处理。
3. STDERR
sell通过特殊的STDERR文件描述符来处理错误消息。STDERR文件描述符代表shell的标准错
误输出。shell或shell中运行的程序和脚本出错时生成的错误消息都会发送到这个位置。
默认情况下，STDERR文件描述符会和STDOUT文件描述符指向同样的地方（尽管分配给它们
的文件描述符值不同）。也就是说，默认情况下，错误消息也会输出到显示器输出中。
但从上面的例子可以看出，STDERR并不会随着STDOUT的重定向面发生改变。使用脚本时，
你常常会想改变这种行为，尤其是当你希望将错误消息保存到日志文件中的时候。
15.1.2重定向错误
你已经知道如何用重定向符号来重定向STDOUT数据。重定向STDERR数据也没太大差别，只
要在使用重定向符号时定义STDERR文件描述符就可以了。有几种办法实现方法。
1.只重定向错误
你在表15-1中已经看到，STDERR文件描述符被设成2。可以选择只重定向错误消息，将该文
件描述符值放在重定问符号前。该值必须紧紧地放在重定问符号前，否则不会工作。
---
## Page 329
314
第15章呈现数据
$ 1a -al baGfile 2> test4
ls: cannot access badfile: No such file or directory
$ cat test4
现在运行该命令，错误消息不会出现在屏幕上了。该命令生成的任何错误消息都会保存在输
出文件中。用这种方法，shell会只重定向错误消息，而非普通数据。这里是另一个将sTDOUT和
STDERR消息混杂在同一输出中的例子。
$ ls -al test badtest test2 2> test5
-rwrv-r=- 1 rich rich 158 20141016 11:32 test2
Is: cannot access test: No guch file or Glrectory
$ cat teat5
ls: cannot accesa badtest: 3o such flle or directory
1s命令的正常STDOUT输出仍然会发送到默认的STDOUT文件描述符，也就是显示器。由于该
命令将文件描述符2的输出（STDERR）重定向到了一个输出文件，shell会将生成的所有错误消息
直接发送到指定的重定向文件中。
2.重定向错误和数据
如果想重定向错误和正常输出，必须用两个重定向符号。需要在符号前面放上待重定向数据
所对应的文件描述符，然后指向用于保存数据的输出文件。
$ 1a -al test test2 teat3 badtest 2> test6 1> test7
$ cat test6
1s: cannot access test: No such file or Glrectory
1s: cannot accesa badteat: No guch file ox directory
$ cat test7
-rwrv-z-- 1 rich rich  0 2014-10-16 11:33 test3
wr==
1 rich rich 158 2014-1016 11:32 test2
shel利用1>符号将1s命令的正常输出重定向到了test7文件，而这些输出本该是进入STDOUT
的。所有本该输出到sTDERR的错误消息通过2>符号被重定向到了test6文件。
可以用这种方法将脚本的正常输出和脚本生成的错误消息分离开来。这样就可以轻松地识别
出错误信息，再不用在成千上万行正常输出数据中翻腾了。
另外，如果愿意，也可以将sTDERR和sTDOUT的输出重定向到同一个输出文件。为此bash shell
提供了特殊的重定向符号&>。
$ 1a -al test test2 test3 badtest &> tesat7
$ cat test7
ls: cannot access test: No such file or Glrectozy
18 : 0
-rwrvz-- 1 rich rich 158 201410-16 11:32 test2
cannot
-rwrv-r-- 1 rich rich  0 2014-1016 11:33 test3
当使用&>符时，命令生成的所有输出都会发送到同一位置，包括数据和错误。你会注意到其
中一条错误消息出现的位置和预想中的不一样。badtest文件（列出的最后一个文件）的这条错误
消息出现在输出文件中的第二行。为了避免错误信息散落在输出文件中，相较于标准输出，bash
---
## Page 330
15.2在脚本中重定向输出
315
shell自动赋予了错误消息更高的优先级。这样你能够集中浏览错误信息了。
15
15.2在脚本中重定向输出
可以在脚本中用STDOUT和STDERR文件描述符以在多个位置生成输出，只要简单地重定向相
应的文件描述符就行了。有两种方法来在脚本中重定向输出：
口临时重定问行输出
口永久重定向脚本中的所有命令
15.2.1临时重定向
如果有意在脚本中生成错误消息，可以将单独的一行输出重定向到STDERR。你所需要做的
是使用输出重定向符来将输出信息重定向到STDERR文件描述符。在重定向到文件描述符时，你
必须在文件描述符数字之前加一个s：