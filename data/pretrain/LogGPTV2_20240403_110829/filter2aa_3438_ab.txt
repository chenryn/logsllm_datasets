‘s.’
jnb short $30
‘t.’
je short $30
‘u.’
jnz short $30
‘v.’
jbe short $30
‘w.’
ja short $30
‘x.’
js short $30
‘y.’
jns short $30
‘z.’
jpe short $30
‘ ca’
and 61(%ebx), %ah
‘ An’
and 6E(%ecx), %al
‘ jo’
and 6F(%edx), %ch
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
13 / 42
English shellcode
Mason et al., English Shellcode, ACM CCS, 2009
⌅ Generate English compatible subset of IA32...
⌅ ...We have more than alphanumeric:
(punctuation, spaces, ...)!
⌅ Write a decoder with those instructions
ASCII
IA32
‘p.’
jo short $30
‘q.’
jno short $30
‘r.’
jb short $30
‘s.’
jnb short $30
‘t.’
je short $30
‘u.’
jnz short $30
‘v.’
jbe short $30
‘w.’
ja short $30
‘x.’
js short $30
‘y.’
jns short $30
‘z.’
jpe short $30
‘ ca’
and 61(%ebx), %ah
‘ An’
and 6E(%ecx), %al
‘ jo’
and 6F(%edx), %ch
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
13 / 42
English shellcode
Mason et al., English Shellcode, ACM CCS, 2009
⌅ Generate English compatible subset of IA32...
⌅ ...We have more than alphanumeric:
(punctuation, spaces, ...)!
⌅ Write a decoder with those instructions
⌅ Fill the gaps with English-looking words
ASCII
IA32
‘p.’
jo short $30
‘q.’
jno short $30
‘r.’
jb short $30
‘s.’
jnb short $30
‘t.’
je short $30
‘u.’
jnz short $30
‘v.’
jbe short $30
‘w.’
ja short $30
‘x.’
js short $30
‘y.’
jns short $30
‘z.’
jpe short $30
‘ ca’
and 61(%ebx), %ah
‘ An’
and 6E(%ecx), %al
‘ jo’
and 6F(%edx), %ch
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
13 / 42
English shellcode
Mason et al., English Shellcode, ACM CCS, 2009
⌅ Generate English compatible subset of IA32...
⌅ ...We have more than alphanumeric:
(punctuation, spaces, ...)!
⌅ Write a decoder with those instructions
⌅ Fill the gaps with English-looking words
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
13 / 42
English shellcode
Mason et al., English Shellcode, ACM CCS, 2009
⌅ Generate English compatible subset of IA32...
⌅ ...We have more than alphanumeric:
(punctuation, spaces, ...)!
⌅ Write a decoder with those instructions
⌅ Fill the gaps with English-looking words
⌅ Enjoy!
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
13 / 42
English shellcode: demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
demo demo demo demo demo demo demo demo demo demo demo demo demo demo demo
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
14 / 42
Alphanumeric on x86 is “fully solved”
⌅ msfvenom -a x86 -e x86/alpha mixed
⌅ In principle we could write a fully functional shellcode from
Shakespeare’s works
⌅ However, none of my phones are in x86...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
15 / 42
2. Taking RISCs: from
laptops to earsides
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
16 / 42
Transitioning from x86 to ARM
RISC – reduced instruction set computer...
Blockers
⌅ No single character instructions anymore
⌅ Few addressing modes – in particular no memory to memory
⌅ Heavy constraints on operands
The above techniques do not work on ARM architectures anymore!
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
17 / 42
Transitioning from x86 to ARM
RISC – reduced instruction set computer...
Blockers
⌅ No single character instructions anymore
⌅ Few addressing modes – in particular no memory to memory
⌅ Heavy constraints on operands
The above techniques do not work on ARM architectures anymore!
Compilation / Emulation / Unpacking
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
17 / 42
The “compilation” way
Idea:
⌅ Compile assembly code to a constrained instruction set
Pros:
⌅ Easy to compile to one-instruction set computers (e.g Movfuscator)
Cons:
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
18 / 42
The “compilation” way
Idea:
⌅ Compile assembly code to a constrained instruction set
Pros:
⌅ Easy to compile to one-instruction set computers (e.g Movfuscator)
Cons:
⌅ Does not work when the constraints are mainly on the operands and
not on the opcodes
⌅ ...nobody wants to devote their life to writing such a compiler
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
18 / 42
The “compilation” way
Idea:
⌅ Compile assembly code to a constrained instruction set
Pros:
⌅ Easy to compile to one-instruction set computers (e.g Movfuscator)
Cons:
⌅ Does not work when the constraints are mainly on the operands and
not on the opcodes
⌅ ...nobody wants to devote their life to writing such a compiler
(or do they?)
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
18 / 42
The “emulation” way
Younan et al., Phrack 66, 2009
Idea:
⌅ Write an interpreter for some language
Pros:
⌅ Reusable for diﬀerent payloads
⌅ It’s feasible
⌅ e.g. Younan’s ARMv7 alphanumeric Brainfuck interpreter
Cons:
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
19 / 42
The “emulation” way
Younan et al., Phrack 66, 2009
Idea:
⌅ Write an interpreter for some language
Pros:
⌅ Reusable for diﬀerent payloads
⌅ It’s feasible
⌅ e.g. Younan’s ARMv7 alphanumeric Brainfuck interpreter
Cons:
⌅ Interpreted code is toothless...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
19 / 42
The “unpacking” way
Barral et al., ISPEC 2016
Idea:
⌅ Encode payload in a constraint-compliant
way (e.g. alphanumerically)
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
20 / 42
The “unpacking” way
Barral et al., ISPEC 2016
Idea:
⌅ Encode payload in a constraint-compliant
way (e.g. alphanumerically)
⌅ Identify high-level constraint-compliant
constructs (zeroing/increasing registers, ...)
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
20 / 42
The “unpacking” way
Barral et al., ISPEC 2016
Idea:
⌅ Encode payload in a constraint-compliant
way (e.g. alphanumerically)
⌅ Identify high-level constraint-compliant
constructs (zeroing/increasing registers, ...)
⌅ Use this to write a minimal unpacker that
decodes and execute payload
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
20 / 42
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
21 / 42
Taking it to the next level: RISC-V
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
22 / 42
Taking it to the next level: RISC-V
Pros
⌅ Simple, clean RISC MIPS-like ISA
⌅ Open Source ISA &
Open Hardware*
⌅ Still very WIP
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
22 / 42
Taking it to the next level: RISC-V
Pros
⌅ Simple, clean RISC MIPS-like ISA
⌅ Open Source ISA &
Open Hardware*
⌅ Still very WIP
Cons
⌅ Makes our job much harder...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
22 / 42
What is alphanumeric 64-bit RISC-V like?
⌅ Some constants
li, lui
⌅ Small increments
addi
⌅ Forward conditional branches b*
⌅ Forward unconditional branches
j, jal
⌅ Arithmetic right shift
sra
⌅ System registers writes
csr*
⌅ Misc. ﬂoating point operations
fld, fmadd, fcvt, ...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
23 / 42
What is alphanumeric 64-bit RISC-V like?
⌅ Some constants
li, lui
⌅ Small increments
addi
⌅ Forward conditional branches b*
⌅ Forward unconditional branches
j, jal
⌅ Arithmetic right shift
sra
⌅ System registers writes
csr*
⌅ Misc. ﬂoating point operations
fld, fmadd, fcvt, ...
No loop!
No store / syscall!
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
23 / 42
Purely alphanumeric RISC-V shellcodes are impossible*
No loop!
No store / syscall!
Not Turing complete; cannot do much...
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
24 / 42
Purely alphanumeric RISC-V shellcodes are impossible*
No loop!
No store / syscall!
Not Turing complete; cannot do much...
31
7
6
0
other stuﬀ
opcode
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
24 / 42
Purely alphanumeric RISC-V shellcodes are impossible*
No loop!
No store / syscall!
Allow ourselves a single other printable character
31
7
6
0
other stuﬀ
opcode
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
24 / 42
Purely alphanumeric RISC-V shellcodes are impossible*
No loop!
No store / syscall!
Allow ourselves a single other printable character
31
7
6
0
other stuﬀ
0
0100011
Spoiler Alert: 3 candidates: # (hash), / (slash) and ´ (tick).
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
24 / 42
# = 0x23
#SudoMakeMeASandwich
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
25 / 42
Stage 1
init
forward jump
encoded payload
Penc
Unpacker U
Stage 2
(unpacked by U)
#SudoMakeMeASandwich
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
25 / 42
Stage 1
init
forward jump
encoded payload
Penc
Unpacker U
Stage 2
(unpacked by U)
Stage 2
init
main
decoding
loop
backward jump
jump
Stage 3
Payload
#SudoMakeMeASandwich: #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
#Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo #Demo
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
26 / 42
3. Think you have seen it all?
Getting dirty
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
27 / 42
http://givemerootaccess/
Pwning you with a single URL
⌅ Changing the available subset to Alphanumeric + /.
⌅ No more stores using sd for the stage 1.
⌅ Need to ﬁnd a new memory writing primitive.
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
28 / 42
http://givemerootaccess/
Pwning you with a single URL
⌅ Changing the available subset to Alphanumeric + /.
⌅ No more stores using sd for the stage 1.
⌅ Need to ﬁnd a new memory writing primitive.
Atomic operations
AQ3/
amoor.d t1,s5,(sp)
atomic{
t1 := @64[sp]
@64[sp] := @64[sp]|s5
}
aA8/
amoand.d a6,s4,(sp)
atomic{
a6 := @64[sp]
@64[sp] := @64[sp]&s4
}
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
28 / 42
Alignment is a pain
The address held in rs1 must be naturally aligned
to the size of the operand [...].
If the address
is not naturally aligned, a misaligned address
exception will be generated.
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
29 / 42
Alignment is a pain
The address held in rs1 must be naturally aligned
to the size of the operand [...].
If the address
is not naturally aligned, a misaligned address
exception will be generated.
Good, let’s use addi.
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
29 / 42
Alignment is a pain
The address held in rs1 must be naturally aligned
to the size of the operand [...].
If the address
is not naturally aligned, a misaligned address
exception will be generated.
Good, let’s use addi.
cat avail | grep addi | sort
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
29 / 42
Alignment is a pain
The address held in rs1 must be naturally aligned
to the size of the operand [...].
If the address
is not naturally aligned, a misaligned address
exception will be generated.
Good, let’s use addi.
cat avail | grep addi | sort
addi sp, sp, 16
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
29 / 42
animation by animate[2019/04/09]
Solution: use 16-byte chunks
instruction
nop-like
jump to
next block
(unused)
0
2
4
6
· · ·
16
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
instruction
nop-like
jump to
next block
(unused)
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
?? ??
?? ??
?? ??
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
?? ??
?? ??
?? ??
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4
addiw
t1 ,t1 ,-10
amoor.w.aq
t5 ,t1 ,(sp)
tp
0000 0000 A031 0004
s4
0000 0000 0000 0000
The ABC of Next-Gen Shellcoding @ DEF CON 27
11 Aug 2019
30 / 42
Solution: use 16-byte chunks
00 00
00 00
00 00
...
0
2
4
6
· · ·
16
sra
s4 ,zero ,s3
amoand.d.rl zero ,s4 ,(sp)
amoor.d.aq
a6 ,tp ,(sp)
lui
a0 ,0 x59714
li
s4 ,12
sra
t1 ,a0 ,s4