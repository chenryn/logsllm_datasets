### The ABC of Next-Gen Shellcoding @ DEF CON 27
**Date:** 11 Aug 2019  
**Slide Number:** 13 / 42

#### English Shellcode
- **Mason et al., "English Shellcode," ACM CCS, 2009**
  - Generate an English-compatible subset of IA32 instructions.
  - Utilize more than just alphanumeric characters (e.g., punctuation, spaces).
  - Write a decoder using these instructions.
  - Fill the gaps with English-looking words.

**ASCII and IA32 Instructions:**
- `p.` `jo short $30`
- `q.` `jno short $30`
- `r.` `jb short $30`
- `s.` `jnb short $30`
- `t.` `je short $30`
- `u.` `jnz short $30`
- `v.` `jbe short $30`
- `w.` `ja short $30`
- `x.` `js short $30`
- `y.` `jns short $30`
- `z.` `jpe short $30`
- `ca` `and 61(%ebx), %ah`
- `An` `and 6E(%ecx), %al`
- `jo` `and 6F(%edx), %ch`

**The ABC of Next-Gen Shellcoding @ DEF CON 27**
**Date:** 11 Aug 2019  
**Slide Number:** 13 / 42

#### Alphanumeric on x86
- **Fully Solved:**
  - `msfvenom -a x86 -e x86/alpha mixed`
  - In principle, we could write fully functional shellcode from Shakespeare’s works.
  - However, modern devices are not typically x86-based.

**The ABC of Next-Gen Shellcoding @ DEF CON 27**
**Date:** 11 Aug 2019  
**Slide Number:** 15 / 42

#### Transitioning from x86 to ARM
- **RISC (Reduced Instruction Set Computer) Challenges:**
  - No single-character instructions.
  - Few addressing modes, particularly no memory-to-memory operations.
  - Heavy constraints on operands.
  - Techniques used for x86 do not work on ARM architectures.

**Compilation / Emulation / Unpacking:**
- **Compilation Way:**
  - Idea: Compile assembly code to a constrained instruction set.
  - Pros:
    - Easy to compile to one-instruction set computers (e.g., Movfuscator).
  - Cons:
    - Does not work when constraints are mainly on operands, not opcodes.
    - Writing such a compiler is not a desirable task.

- **Emulation Way:**
  - **Younan et al., Phrack 66, 2009**
  - Idea: Write an interpreter for some language.
  - Pros:
    - Reusable for different payloads.
    - Feasible (e.g., Younan’s ARMv7 alphanumeric Brainfuck interpreter).
  - Cons:
    - Interpreted code is less efficient.

- **Unpacking Way:**
  - **Barral et al., ISPEC 2016**
  - Idea: Encode payload in a constraint-compliant way (e.g., alphanumerically).
  - Identify high-level constraint-compliant constructs (e.g., zeroing/increasing registers).
  - Use this to write a minimal unpacker that decodes and executes the payload.

**The ABC of Next-Gen Shellcoding @ DEF CON 27**
**Date:** 11 Aug 2019  
**Slide Number:** 22 / 42

#### Taking it to the Next Level: RISC-V
- **Pros:**
  - Simple, clean RISC MIPS-like ISA.
  - Open Source ISA & Open Hardware.
  - Still very much a work in progress.

- **Cons:**
  - Makes our job much harder.

**Alphanumeric 64-bit RISC-V:**
- **Available Instructions:**
  - Some constants: `li`, `lui`
  - Small increments: `addi`
  - Forward conditional branches: `b*`
  - Forward unconditional branches: `j`, `jal`
  - Arithmetic right shift: `sra`
  - System registers writes: `csr*`
  - Miscellaneous floating-point operations: `fld`, `fmadd`, `fcvt`, ...

- **Limitations:**
  - No loop!
  - No store or syscall!
  - Not Turing complete; cannot perform complex tasks.

**Purely Alphanumeric RISC-V Shellcodes:**
- **Impossible:**
  - No loop!
  - No store or syscall!
  - Allow a single other printable character (e.g., `#`, `/`, or `´`).

- **Example:**
  - `# = 0x23`
  - `#SudoMakeMeASandwich`

**Stage 1:**
- Initialization
- Forward jump
- Encoded payload
- Unpacker `U`

**Stage 2:**
- Unpacked by `U`
- Initialization
- Main decoding loop
- Backward jump
- Payload execution

**Demo:**
- `#Demo #Demo #Demo ...`

**The ABC of Next-Gen Shellcoding @ DEF CON 27**
**Date:** 11 Aug 2019  
**Slide Number:** 27 / 42

#### Getting Dirty: Pwning with a Single URL
- **http://givemerootaccess/**
  - Change the available subset to Alphanumeric + `/`.
  - No more stores using `sd` for stage 1.
  - Find a new memory writing primitive.

- **Atomic Operations:**
  - `AQ3/ amoor.d t1,s5,(sp)`
  - `aA8/ amoand.d a6,s4,(sp)`

- **Alignment Issues:**
  - Addresses must be naturally aligned.
  - Use `addi` to handle alignment.

- **Solution: Use 16-byte Chunks**
  - Instruction layout:
    - Instruction
    - NOP-like
    - Jump to next block
    - Unused space

- **Example:**
  - `sra s4,zero,s3`
  - `amoand.d.rl zero,s4,(sp)`
  - `amoor.d.aq a6,tp,(sp)`
  - `lui a0,0x59714`
  - `li s4,12`
  - `sra t1,a0,s4`
  - `addiw t1,t1,-10`
  - `amoor.w.aq t5,t1,(sp)`

- **Registers:**
  - `tp: 0000 0000 A031 0004`
  - `s4: 0000 0000 0000 0000`

- **Instruction Layout:**
  - `00 00`
  - `00 00`
  - `00 00`
  - ...
  - `0 2 4 6 ... 16`

- **Animation by animate[2019/04/09]**

This optimized version maintains the original content but improves clarity, coherence, and professional presentation.