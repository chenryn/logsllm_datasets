Diesel [39] implements module-based access control,
whereby an application is broken into a series of code
USENIX Association
26th USENIX Security Symposium    1447
Solution
Diesel [39]
CLAMP [43]
Nemesis [36]
Oracle [13]
Postgres [23]
SafeD
Independent
x
Generality Correctness Database
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
x
x
x
x
x
(cid:8)
(cid:8)
(cid:8)
Connection
Sharing
(cid:8)
(cid:8)
(cid:8)
(cid:8)
x
x
Table 1: Comparison of SafeD to existing solutions. (See
Section 1 for criteria deﬁnitions.)
modules, each restricted to only a portion of the database
needed to complete its task. While the authors remark
that Diesel can be extended to user-based access control
(e.g., by duplicating all the modules for each connected
user), they also acknowledge that their solution would
not scale [39] and suggest using database access control
in conjunction. SafeD does not require database access
control and is thus compatible with today’s web architec-
ture.
Table 1 summarizes SafeD’s differences with prior
work.
2.2 Database Access Control
Stonebraker and Wong presented the ﬁrst database ac-
cess control through query rewriting in INGRES [46],
which supported read queries, but not write queries. IN-
GRES’ treatment of read access restrictions as predicates
has been adopted by modern databases. For instance,
Oracle’s VPD allows administrators to deﬁne a series of
functions for each relation based on the mode of access.
These functions append a predicate to the query to en-
force access rules based on the user context [29]. Deﬁn-
ing these functions via procedural code offers ﬂexibility,
but is also more error-prone compared to simply writing
declarative policy statements as in SafeD.
More recently, Postgres 9.5 has added support for
ﬁne-grained access control, whereby administrators de-
ﬁne two policy conditions for each table and each role.
The ﬁrst condition is evaluated against SELECT and
DELETE queries, while the second condition is evaluated
for INSERT queries.
(UPDATE queries are treated as a
DELETE followed by an INSERT.) Postgres’s design as-
sumes that if users can view information, they should
also be able to delete it. SafeD does not make this as-
sumption, decoupling a user’s read and write permis-
sions.
As mentioned in Section 1,
the key advantage of
SafeD over access control features of database systems
is that the former is compatible with today’s web appli-
cation architecture. Both Oracle and Postgres rely on
the database connection to obtain user context. Web
applications have avoided this approach due to perfor-
mance implications of creating new database connec-
tions [33]. In contrast, SafeD allows applications to share
connections across users. SafeD also provides database-
independence, and offers a simple syntax for deﬁning a
security policy compared to database solutions. SafeD
only requires an understanding of SELECT queries. Or-
acle and Postgres each use a different syntax, and re-
quire developers to understand more complicated con-
cepts, such as creating system contexts, system context
triggers, and policy functions. (See Table 1.)
3 Survey of Modern Web Applications
Modern web applications currently deﬁne and enforces
access control policies within the code. MediaWiki, for
example, stores user groups and the associated access
control rules within a PHP conﬁg ﬁle [4], and the ac-
cess control rules are enforced within the PHP functions.
As evidenced by numerous attacks on web applications,
the current apporach is ﬂawed [8, 25, 28, 34, 35, 38, 42].
Thus, prior work has proposed alternatives that decouple
access control logic from the application, but all exist-
ing work cannot handle write queries when a declarative
policy deﬁnition requires a join. These types of policies,
which we call join policies, occur when a database table
does not contain a ﬁeld corresponding to a user, such as
user id, which enables a mapping of rows in the table to
a user. To determine the prevalence of join policies in
modern web applications, we surveyed 10 open-source
Java web applications of varying size and complexity.
Before determining which tables require a join policy,
we ﬁrst must identify the user information table. Typi-
cally, the user information table contains a unique user
ID that is used in other tables to map a row to a user.
Given two tables, A and B, we say that table A is the par-
ent of table B if B has a column that refers to the primary
key of A. Similarly, given two tables, A and B, we say
table A is the grandparent of table B if B has a column
which refers to the primary key of a child of A. Often,
these relationships are represented as a foreign key ref-
erence, but some of the applications we surveyed did not
contain any such declarations. The lack of explicit for-
eign key declarations required us to infer the implied par-
ent and grandparent relationships based on the database
schema and structure.
In general, any table that has the user information ta-
ble as its grandparent requires a join policy to deﬁne a
per-user access control policy. Additional tables are in-
cluded in our evaluation if accompanying documentation
indicates a relationship between a user and a table de-
spite no parent or grandparent relationship with the user
information table. For example, in MediaWiki, pages can
be semi-protected so only conﬁrmed and autoconﬁrmed
users2 can modify them. In MediaWiki 1.10 and later,
this information is stored in the page restriction table. In
2Users whose account is at least four days old and has at least ten
edits to Wikipedia
1448    26th USENIX Security Symposium
USENIX Association
Web App
Wordpress [10]
hotCRP [40]
LimeSurvey [3]
osCommerce [7]
MediaWiki [4]
WeBid [9]
Drupal [2]
myBB [5]
ZenCart [11]
Cyclos [1]
Average Percent
Total Tables Tables Requiring Join Policy
12
24
36
40
48
55
60
75
96
185
4 (33%)
6 (25%)
18 (50%)
4 (10%)
10 (21%)
5 (9%)
12 (20%)
8 (11%)
18 (19%)
24 (13%)
21%
Table 2: Summary of the number of tables in 9 web ap-
plications that require a join query to deﬁne a per-user
policy declaratively.
Figure 1: Two web application architectures. A trusted
authentication component within the app or on the server
provides SafeD with the correct user context.
order to deﬁne a policy for the page table, a join with
page restriction is necessary to determine which pages a
user can edit.
For each web application, we recorded the total num-
ber of tables in the database and the fraction of those
tables that require a join query in a declarative policy
deﬁnition to enforce a per-user policy.
Our survey results, shown in table 2, indicate that an
average of 21% of an application’s database tables re-
quire a join query to deﬁne a per-user policy declara-
tively. Web applications with a large amount of normal-
ization tend to have a higher number of tables requiring
a join query in their policy. LimeSurvey, which has the
highest percentage of such tables, contains a user table
with only a few children, but the children are heavily nor-
malized resulting in numerous grandchildren. Zen Cart
and Cyclos, which contain user tables with only a few
children but multiple grandchildren, show similar trends.
4 Overview
Figure 1 shows the deployment architecture of SafeD.
SafeD extends an existing database driver (e.g., JDBC or
ODBC) to add a security layer that ensures all queries
issued by the application are compliant with the deﬁned
declarative security policy (see Figure 2).
The application developer (or the system administra-
Figure 2: Given a query and a user context, SafeD ob-
tains the user’s security policy and creates a safe version
of the query, which is executed on the database.
tor) speciﬁes the desired security policy via a set of
declarative rules. These rules deﬁne the read and write
permissions of each application user in the database
(Section 5). At run-time, SafeD automatically trans-
forms each query into a read-safe or write-safe query
(i.e., one that is compliant with the read and write poli-
cies). SafeD provides Truman model semantics, i.e.,
the transformed query provides the same results as if
the original query executed on a restricted view of the
database that is accessible to the user. SafeD supports ar-
bitrary read and write queries. SafeD’s query transforma-
tion module (Section 6) ensures necessary and sufﬁcient
conditions for query safety. A developer can also use
SafeD in an experimental debugging mode of operation,
in which a query is tested for policy-compliance ﬁrst. In
this mode (a.k.a. non-Truman model [45]), a query is
executed only if it is compliant, and is rejected other-
wise (see Section 6). We implement our prototype by
extending a JDBC driver (Section 7), and evaluate it us-
ing the TPC-C benchmark. Our results show that SafeD
can protect practical database-backed applications at a
negligible cost (Section 8).
4.1 Threat Model
We assume that a database app (e.g., web app) is benign,
but buggy. We assume a remote attacker who attempts to
exploit the web app, but cannot authenticate as another
user. This is a reasonable assumption since most existing
web frameworks, such as Django or Tomcat, have stan-
dardized support for authenticating users. In other words,
the web application is assumed to reliably verify the end-
user’s identity and make it available to SafeD along with
the issued query, but the query itself can be arbitrarily
over-privileged, due to bugs or remote exploits.
Note that there are two causes of data leakage in a
web application: incorrect policy deﬁnitions and incor-
rect policy enforcement. SafeD focuses on the latter, en-
suring that all queries obey the developer-deﬁned policy.
However, if the policy is incorrectly deﬁned, SafeD can-
not prevent the undesirable actions of authorized users.
One beneﬁt of this decoupling is that developers are
USENIX Association
26th USENIX Security Symposium    1449
forced to explicitly deﬁne their security policies. These
explicit deﬁnitions are often easier to debug than their
implementation code.
5 Formal Results
In this section, we ﬁrst describe the notion of per-user,
row-level security policies. We then formally deﬁne the
notion of safety for read and write queries. Finally,
we derive necessary and sufﬁcient conditions to achieve
safety. These conditions are subsequently used to show
correctness of our algorithms that render queries safe
with respect to a given policy. Appendix B provides sev-
eral examples of how safety can be enforced based on the
results and deﬁnitions presented in this section.
5.1 Security Policy Deﬁnition
In SafeD, a security policy is composed of two sets of
access rules: the read policy and the write policy. Given
a user, the read policy identiﬁes the tuples in the database
that the user can read. Likewise, the write policy iden-
tiﬁes the tuples in the database that the user can modify,
remove, or add. These policies are speciﬁed as a read set
and a write set for each table of the database. For each
user and each table, a read (write) set identiﬁes the set of
tuples the user can read from (modify, remove from, or
add to) that table. On a given table, the write set of a user
must be a subset of his/her read set (i.e., users can read
tuples that they can modify).
SafeD assumes that the authentication component of
the web application provides the user’s identity and, op-
tionally, a ‘role’ assigned to the user. This role is only
relevant to SafeD for selecting a policy and is not re-
lated to database roles. The user identity would usually
be based on his/her authentication cookie and, possibly,
the web request being made. SafeD takes as input a pol-
icy ﬁle comprised of a set of policy statements deﬁning
the read sets and write sets for each user and each role.
The following are examples of policy statements for the
customer and manager roles 3 :
DEFINE WRITESET FOR
ROLE c u s t o m e r USER $i
ON TABLE c u s t _ i n f o
AS SELECT * FROM c u s t _ i n f o
WHERE cid = $i
Listing 1: Customer’s write set for the cust info table.
DEFINE WRITESET FOR ROLE manager USER $i
ON TABLE o r d e r t a b l e
AS SELECT * FROM o r d e r t a b l e
Listing 2: Manager’s write set for the ordertable table.
3For simplicity, we deﬁne policies at the granularity of entire rows,
but SafeD can be extended to ﬁner granularities, e.g., at the attribute
level.
Here, $i is a wildcard that is replaced at runtime with
the attribute(s) identifying the current user.4 Read sets
are deﬁned similarly, except that the READSET keyword
is used instead of WRITESET.