2With SGX2 extensions, the hardware can directly notify the enclave when
the enclave code incurs a page fault along with the faulting virtual address,
page permissions, fault type and the register context [16], [39].
8
these microns using secure inter-micron protocol. The microns
then use a public page as their shared memory resource.
Every microns seals the content and writes to the public page.
Rest of the microns unseal the page content within their own
address space. The sealing is standard authenticated encryption
with version control for preventing replay attacks [46]. This
mechanism creates a notion of shared memory, such that each
micron internally maintains a private copy of the memory and
all changes are synchronized and broadcasted by writing sealed
data to the public page.
Event Management. PANOPLY applies the delegate strategy
to support event based-programming inside the enclaves. SGX
hardware natively supports synchronous and asynchronous
exits from the enclave. For synchronous and asynchronous
exits, the hardware saves the execution state before exiting
the enclave, and restores it back when the enclave resumes.
For example, if the enclave receives an interrupt, the hardware
performs an Asynchronous Enclave Exit (AEX), saves the cur-
rent processor state into enclave memory, enters the Interrupt
Service Routine (ISR) and then ﬁnally restores the processor
state for resuming the enclave execution. In this case, the OS
is responsible for executing the ISR and scheduling back the
enclave execution. The hardware ensures that the OS cannot
tamper any context registers during the exits. Thus, it is safe
to delegate the event listening and notiﬁcation tasks to the OS.
PANOPLY uses the OS primitives of signals and interrupts
to register event listeners, callbacks and add dispatch handlers.
Internally, PANOPLY hooks the underlying OS APIs and inter-
faces via OCALLs. Thus, PANOPLY enables event wait/notify
mechanism, polling, event buffering, signal handling for en-
claves which are necessary for event management. Our API
is expressive to support event libraries such as libevent,
libev, in addition to hand-coded event loops.
C. The PANOPLY Infrastructure
To use PANOPLY, akin to several partitioning tools [22],
[24], [35], the developer marks all functions to denote which
micron executes these functions. In case of our example in
Section II, the functions called on Line 5, 13, and 25 are
marked to be executed in a priviledged micron by annotations.
Rest of the functions in the program are explicitly marked to
be executed in a non-priviledged mircon.
After establishing the set of all such micron-bound func-
tions, PANOPLY analysis identiﬁes the inter-micron interaction
boundaries. Speciﬁcally, it constructs the program dependence
graph consisting of control ﬂow and data ﬂow. The control
ﬂow graph comprises of micron function nodes connected by
call edges. Data ﬂow graph comprises of all the parameters
passed between microns and any shared memory such as global
variables. For cases where PANOPLY cannot precisely identify
the control and data-ﬂow graph, it prompts the user to specify
the intended ﬂows by adding annotations.
PANOPLY instruments all the boundaries of the micron i.e.,
the entry and exit points of the micron wherein the control
starts or ends the micron-bound execution. Each ECALL to be
executed inside the micron is mapped to an entry point and a
return point. For all such entry points in the micron, PANOPLY
adds code to check the caller’s identity as well as the caller’s
state. At all the exit point from the micron, PANOPLY adds the
correct target function to be executed in another micron, along
with the its current state. Hence, the adversary cannot tamper
the caller (checked at the entry) or forge the callee (created
at the exit). PANOPLY replaces all calls to non-micron code
(such as system library APIs) with OCALLs. Further, each
OCALL interface is instrumented with a set of checks on input
and output call parameters as discussed in Section IV. These
checks are best-effort, and the developer can add call-speciﬁc
sanitization logic at any of these interfaces.
For supporting multi-threading, PANOPLY needs to know
the set of memory that is concurrently accessed by multiple
threads. The developer can annotate all the such variables
which are subject
to operations from multiple threads. In
our current implementation, we manually identiﬁed concurrent
memory accesses for our case studies. In the future, PANOPLY
can perform precise pointer analysis to aid the developer
in identifying the complete set of corresponding operations
on shared memory addresses. Once the shared variables and
operations are identiﬁed, PANOPLY redirects the access to all
the shared variables, via the shim. The shim code is responsible
for deciding if the operations on shared variables are to be
performed locally to the micron or are to be carried out as
global operations in tandem with threads in other microns. We
follow similar strategy to mark and mediate access to shared
memory and fork-exec process memory semantics.
D. Implementation
We implement PANOPLY on top of the Intel SDK [8] 1.5
Open Source Beta shipped for Linux Kernel v3.13. PANOPLY
comprises of a set of API libraries and build extensions. For
our case-studies, we annotate the application code to mark
which functions should execute in which micron. Then we
modify the application Makefile to use PANOPLY extensions
and library. We add the interface ﬁle (.edl) for specifying all
the enclave entry-exit points. The Intel SDK edger8r tool
uses these ﬁles to generate boiler-plate code stubs for enclave.
PANOPLY then adds speciﬁc checks to each of these stubs.
We implement the support for multi-processing (speciﬁ-
cally, fork and exec) by patching the SGX SDK [6] and
the corresponding SGX linux driver [7]. By default, when a
new process is created by fork, the SGX kernel driver data
structures which map the enclave virtual addresses to the EPC
physical addresses for the parent process are copied over to
the child process. Hence, when the child process spawns its
enclave, the driver reads the data structures and assumes that
the VA space and the EPC PA addresses are already taken
up. However, in reality these are stale mappings from the
parent enclave. If left unmodiﬁed, the SDK driver spawns the
child enclave in a new VA space, which does not overlap
with the existing mapping. This leads to a mismatch in the
child and parent’s VA layout. To work around this, our driver
code ensures that the start virtual addresses of all the children
enclaves is same as that of the parent enclave. Speciﬁcally,
when spawning a child enclave, PANOPLY ignores the VA-PA
mapping inherited from the parents enclave. Further, we ensure
that the child’s enclave starts at the same virtual address as
the parent’s enclave. Once the address layouts are identical,
PANOPLY shim code in the child enclave reads the sealed
contents (BSS, data, heap and stack sections) saved by parent
enclave and updates its own corresponding sections.
9
V. EVALUATION
In this section, we show the effectiveness of PANOPLY
by porting popular real-world applications to microns and
testing them against a suite of application-speciﬁc benchmarks.
Speciﬁcally, we aim to evaluate PANOPLY for the following:
Expressiveness. Is PANOPLY successful in supporting
expressive programming constructs inside microns?
Stronger Security. Does PANOPLY enable stronger
security guarantees for applications?
TCB. How much TCB reduction does PANOPLY
achieve over Library OSes?
Performance. How does PANOPLY perform compared
to Library OSes?
•
•
•
•
All our experiments are measured on Inspiron-13-7359
machine with 6th Generation Intel(R) Core(TM) i7-6500U
processor and 8GB RAM. We conﬁgure the BIOS to use
128 MB memory for SGX EPC. We use Linux 1.5 Open
Source Beta version of Intel Software Guard Extensions SDK,
Intel SGX Platform Software (PSW), and driver on Ubuntu
Desktop-14.04-LTS 64-bits with Linux kernel version 3.13.
All our applications are compiled with GCC v4.8 and built
for SGX hardware pre-release mode (HW_PRERELEASE) with
default optimization ﬂags and debug symbols. To measure
various statistics at run-time, we use Intel VTune Ampliﬁer
with SGX Hotspots analysis which is conﬁgured with the
standard parameters for SGX. All performance measurements
are reported over an average of 5 runs.
A. Case Studies
We select 4 application case-studies which highlight the
advantages of multi-micron architecture in applications. We
successfully demonstrate that PANOPLY can enable end-to-end
guarantees rooted on SGX primitives as building blocks and
support expressive programming constructs. The case studies
include:
Tor v0.2.5.11, where multiple directory servers form
a distributed network
H2O v2.0.0 webserver, with privilege separated sup-
port for Neverbleed [5]
OpenSSL v1.0.1m library-as-a-service which can be
imported by any application
FreeTDS v0.95.81 database client application
•
•
•
•
1) Stronger Security Property — Tor: Tor is an anony-
mous communication system that routes the client request
through a circuit of (three or more) nodes. Tor is an open
distributed network which uses a directory protocol to maintain
a global view of “good” (or non-blacklisted) nodes in its
network. All the routers in the network periodically send their
status to a directory authority server (DA). Each DA collects
these status reports to generate its local view of the network.
DA servers then run a form of consensus protocol to agree
upon the set of global network nodes, wherein each DA sends
a signed network status vote object to peer DA servers. Various
real-world attacks have targeted DAs by compromising either
their private keys or forging status votes to create a dishonest
view of the network, thereby causing malicious or blacklisted
Tor nodes to be accepted in the network [10].
Goal: Our goal is to secure the Tor DA protocol against
a malicious OS on the DA servers. Speciﬁcally, we want to
10
ensure that even if 8 out of 9 DA servers are compromised, a
blacklisted node is not accepted in the network’s “good” view.
The attacker can only shut down the network. This high level
property is hard to achieve without the use of byzantine fault
tolerance protocol [25], [27], which are bandwidth hogging and
thus are not used in this application. Previous work by Jain et
al. has only looked at a low-level property of protecting the
DA server’s private keys using SGX [32]. They port only the
key related operations to enclaves, and execute the rest of the
code outside the enclave. While this ensures that the attacker
does not get direct access to the key, it does not guarantee that
Tor will always maintain the true state of the network.
The Tor DA servers act as nodes and the messages they
exchange act as control and data ﬂow edges of the blacklisting
consensus protocol. Even though each DA server’s secrets
are secured by enclaves,
it does not ensure the integrity
of interactions between the DA servers. Speciﬁcally, in our
extended technical report [45], we demonstrate 4 concrete
attacks, similar to our running example in Section II. The
attacks use the following strategies to disrupt the consensus
protocol between DA servers:
Call tampering to change the network status votes
Force silent failures, leading to vote withholding
Replace messages to allow compromised certiﬁcates
Replay compromised public keys
•
•
•
•
On the other hand,
if we view the protocol amongst
these distributed nodes as a single process executing in a
single contiguous isolated memory, then the correctness of the
consensus follows directly. In this case, all the messages (such
as votes, and status objects) are generated and passed without
any tampering from the byzantine adversary. There are only
two things that the adversary can do — abort the process or
proceed. This property holds true because the adversary cannot
tamper the execution ﬂow inside the isolated memory.
If we move the entire logic of each DA server to a separate
micron (i.e., 9 microns for 9 DA servers), then all the messages
generated inside the micron are ensured to be untampered,
they are executed in an isolated memory. Further, by the
virtue of inter-micron ﬂow integrity, PANOPLY ensures that
the control and data ﬂow of inter-micron interactions (inter-DA
interaction in this case) is preserved. Thus, PANOPLY allows us
to achieve the same security guarantee as executing the entire
Tor blacklisting consensus protocol
in a single contiguous
isolated memory. As discussed above, this ensures that the
byzantine adversary can only abort the consensus, it cannot
bias it. We implement this architecture for Tor with the help
of PANOPLY, as discussed in Section V-B.
2) Supporting Privilege-separation — H2O: In 2014, the
Heartbleed bug in OpenSSL’s implementation of TLS protocol
lead to leaking server’s private key due to a buffer over-read.
Webserver implementations such as H2O HTTP2 server have
taken precautionary measures by separating the RSA private
key operations in a privilege separated process since version
1.5.0-beta4 [5]. This minimizes the risk of private key leakage
in case of vulnerability such as Heartbleed. In PANOPLY
design, the RSA key operations are moved to a separate micron
(RSA micron) whereas the rest of the webserver code executes
in another micron (H2O micron). The RSA micron comprises
of functions to load the private key and to use it for encrypting
/ decrypting a given buffer and to sign the contents of a
buffer. The H2O micron invokes the RSA micron functions
to perform functions such as rsa_sign, rsa_priv_enc
and rsa_priv_dec. PANOPLY ensures that the RSA keys
are safe in one micron different from the rest of the application.
The application micron invokes the key-storage micron via
PANOPLY’s interface.
3) Supporting Enclaved-libraries — FreeTDS &
OpenSSL: FreeTDS is an open source implementation of the
TDS (Tabular Data Stream) protocol which allows programs to
natively talk to Microsoft SQL Server and Sybase databases.
It links to OpenSSL library to support SSL/TLS for its trafﬁc.
The running example in Section II demonstrates how PANOPLY
enables to split the FreeTDS logic inside two microns.
OpenSSL is a widely used open-source library for SS-
L/TLS protocols. It provides client and server-side imple-
mentations for SSLv3, TLS along with the X.509 support
needed by SSL/TLS (libssl). Further, the core library also
implements basic cryptographic functions (libcrypto). Sev-
eral large-scale real life applications require SSL/TLS support
for networking with clients, servers or peers. Hence, we use
PANOPLY to execute OpenSSL inside a single micron. This
allows large scale applications to use OpenSSL library by
executing it inside the micron. It is up to the application’s
security architect to decide if the application code executes
in the same micron as OpenSSL or as in a separate micron.
For our case study we take a sample certiﬁcate veriﬁcation
application shipped with Intel SGX SDK [8]. The application
comprises of two parts: (a) IO operations to read a list of
certiﬁcates from an input ﬁle and display the results (b) X.509
certiﬁcate veriﬁcation by using the root-certiﬁcate. We separate
the application into two microns — one for IO and one for
OpenSSL library. The OpenSSL micron uses programming
constructs such as threading and network APIs. The IO micron
uses ﬁle system and standard IO APIs. Further, the attacker can
attack the micron-micron interactions by replaying or dropping
the messages as outlined in our running example in Section II.
These attacks trick the application to accept invalid certiﬁcates,
thus violating the higher level guarantee of accepting only valid
certiﬁcates. PANOPLY enforces inter-micron ﬂow integrity and
ensures that all such attacks are thwarted.
B. Porting Effort
We make an average change of 905 lines of code per
application to port it to PANOPLY [54]. We test our applications
with their regression test suite to ensure that our porting does
not break the application.
Tor. Tor code uses 4 libraries — OpenSSL’s libcrypto
and libssl for SSL/TLS protocol, libevent for event
handling, and libz for compression. We port all 4 libraries
along with Tor code to microns. In doing so, we make use of
PANOPLY’s threading, multi-process and networking APIs. We
create two microns as per the design discussed in Section V-A.
We make a total of 2685 LOC changes to the complete code-
base with the help of PANOPLY. To test for correctness, we
ensure that micron-code passes all the 32 tests in the regression
suite shipped with Tor code. We evaluate Tor with a private
network comprising of 3 DA servers and 3 routers using
Chutney [1]. All the nodes execute on a single machine and use
local attestation. We chose the same conﬁguration as evaluated
by previous works [32], [36]. We observe a maximum of 2
threads executing in parallel for our conﬁguration.
H2O. We conﬁgure H2O web server with Neverbleed plug-
in, YAML parser and the in-built event-loop implemented by
H2O. We further statically link H2O with OpenSSL library
which executes inside the webserver micron and includes
the networking and multi-threading module of PANOPLY. We
make 154 LOC changes to the code to achieve this. The
application exposes 3 functions for inter-micron invocation.
Further, we evaluate H2O performance with h2load which
is a benchmarking tool for HTTP/2 [4]. We observe a total
of 2 inter-micron messages and 128 PANOPLY API calls at
run-time for H2O.
FreeTDS. Our FreeTDS application uses OpenSSL library,
along with threading and network support from PANOPLY.
We make 473 LOC changes to the application to compile
it with PANOPLY. We conﬁgure FreeTDS client application
with a remote Microsoft SQL database server. Our benchmark
makes 48 queries (1 create, 46 insert and 1 select) to the
remote database server and collects the response time. For this
workload, FreeTDS makes 3 inter-micron calls.
OpenSSL. We port the OpenSSL library including the crypto-
graphic utilities (libcrypto) and the TLS/SSL implementa-
tion (libssl). We re-use the partially ported OpenSSL code