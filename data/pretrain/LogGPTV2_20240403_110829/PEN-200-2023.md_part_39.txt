### 10.2 Manual SQL Exploitation

This Learning Unit covers the following objectives:
- Manually identify SQL injection vulnerabilities
- Understand UNION SQLi payloads
- Learn about Error-based SQLi payloads
- Understand Blind SQLi payloads

After covering the basic SQL syntax of two major database distributions, we will now explore how to identify and exploit SQL injection vulnerabilities. While automated tools like sqlmap are commonly used for discovering and exploiting SQL injection, understanding how to manually trigger these vulnerabilities is essential for grasping their mechanics.

#### 10.2.1 Identifying SQLi via Error-based Payloads

We can begin our vulnerability analysis using the PHP code provided in Listing 189, which is vulnerable to SQL injection.

**Listing 189 - PHP Code Vulnerable to SQL Injection**

```php
// PHP code that is vulnerable to SQL injection
```

Since both the `uname` and `password` parameters are derived from user-supplied input, we can control the `$sql_query` variable and craft a different SQL query. In some cases, SQL injection can lead to authentication bypass, which is the first exploitation avenue we will explore.

By forcing the closing quote on the `uname` value and adding an `OR 1=1` statement followed by a `--` comment separator, we can prematurely terminate the SQL statement. The syntax for this type of comment requires two consecutive dashes followed by at least one whitespace character. In our examples, we append two forward slashes (`//`) to provide visibility on our payload and add some protection against any kind of whitespace truncation the web application might employ.

**Example Payload:**
```sql
' OR 1=1 -- //
```

**Listing 190 - Testing for SQLi Authentication Bypass**

The SQL query assigned to the `$sql_query` variable results in the following SQL query being forwarded from the PHP application to the MySQL server:

```sql
SELECT * FROM users WHERE user_name = 'offsec' OR 1=1 --
```

**Listing 191 - Injected SQL Statement**

Since we have appended an `OR` statement that will always be true, the `WHERE` clause will return the first user ID present in the database, regardless of whether the user record exists. Because no other checks are implemented in the application, we can gain administrator privileges by circumventing the authentication logic.

To test this attack against a real application, we can browse to `http://192.168.50.16` from our local Kali machine, enter “offsec” and “jam” in the respective username and password fields, and click Submit.

**Figure 147: Testing for SQLi Authentication Bypass 1**

Because the `offsec` user’s credentials are invalid, we receive an "Invalid Password" error message. As a next step, let’s try to insert a single quote inside the Username field to test for any interaction with the underlying SQL server. We’ll append a single quote to the username and click Submit again.

**Figure 148: Testing for SQLi Authentication Bypass 2**

We receive an SQL syntax error, indicating that we can interact with the database. SQL injection is considered in-band when the vulnerable application provides the result of the query along with the application-returned value. In this scenario, we’ve enabled SQL debugging inside the web application; however, most production-level web applications won’t show these error messages because revealing SQL debugging information is considered a security flaw.

Given the above conditions, let’s test the authentication payload we discussed earlier by pasting it inside the Username field.

**Figure 149: SQLi Payload Inside the ‘Username’ Field**

Now, we’ll click the Submit button again.

**Figure 150: Testing for SQLi Authentication Bypass 2**

We receive an "Authentication Successful" message, indicating that our attack succeeded.

To further expand on our attack, we can take advantage of the error-based payload to enumerate the database directly.

**Listing 192 - Error-based Payload**

```sql
' OR 1=1 IN (SELECT @@version) -- //
```

In this case, we want to retrieve the MySQL version via the `@@version` directive. MySQL accepts both `version()` and `@@version` statements. We can now paste the injection payload in the Username field and verify the returned output.

**Figure 151: Testing for Error-based Payload**

The running MySQL version (8.0.28) is included along with the rest of the web application payload. This means we can query the database interactively, similar to how we would use an administrative terminal.

Since we have unbounded control over database queries, let’s try to dump all the data inside the `users` table.

**Listing 193 - Attempting to Retrieve the Users Table**

```sql
' OR 1=1 IN (SELECT * FROM users) -- //
```

After inserting the value into the Username field and submitting the query, we receive the following error:

**Figure 152: Testing for Error-based Payload**

This indicates that we should only query one column at a time. Let’s try to grab only the `password` column from the `users` table.

**Listing 194 - Improving Our SQLi Error-based Payload**

```sql
' OR 1=1 IN (SELECT password FROM users WHERE username = 'admin') -- //
```

Once we submit the payload, we receive several errors along with values resembling MD5 password hashes.

**Figure 153: Retrieving Users Hashes**

This is somewhat helpful, as we managed to retrieve all user password hashes. However, we don’t know which user each password hash corresponds to. We can solve this issue by adding a `WHERE` clause specifying which user’s password we want to retrieve, in this case, `admin`.

**Figure 154: Retrieving Users Hashes**

Nice! We managed to predictably fetch hashed user credentials via the error-based SQL injection vulnerability we discovered.

#### 10.2.2 UNION-based Payloads

Whenever we’re dealing with in-band SQL injections and the result of the query is displayed along with the application-returned value, we should also test for UNION-based SQL injections. The `UNION` keyword aids exploitation by enabling the execution of an extra `SELECT` statement and providing the results in the same query, thus concatenating two queries into one statement.

For UNION SQLi attacks to work, we need to satisfy two conditions:
1. The injected `UNION` query must include the same number of columns as the original query.
2. The data types need to be compatible between each column.

To demonstrate this concept, let’s test a web application with the following preconfigured SQL query:

**Listing 195 - Vulnerable SQL Query**

```sql
$query = "SELECT * FROM customers WHERE name LIKE '".$_POST["search_input"]."%' ";
```

The query fetches all records from the `customers` table and includes the `LIKE` keyword to search for any `name` values containing our input, followed by zero or any number of characters, as specified by the percentage (`%`) operator.

We can interact with the vulnerable application by browsing to `http://192.168.50.16/search.php` from our Kali machine. Once the page is loaded, we can click SEARCH to retrieve all data from the `customers` table.

**Figure 155: Loading the Customer Search Portal**

Before crafting any attack strategy, we need to know the exact number of columns present in the target table. Although the above output shows that four columns are present, we should not assume based on the application layout, as there may be extra columns.

To discover the correct number of columns, we can submit the following injected query into the search bar:

**Listing 196 - Verifying the Exact Number of Columns**

```sql
' ORDER BY 1-- //
```

The above statement orders the results by a specific column, meaning it will fail whenever the selected column does not exist. By increasing the column value by one each time, we’ll discover that the table has five columns, as ordering by column six returns an error.

**Figure 156: Finding the Exact Number of Columns**

With this information, we can attempt our first attack by enumerating the current database name, user, and MySQL version.

**Listing 197 - Enumerating the Database via SQL UNION Injection**

```sql
' UNION SELECT database(), user(), @@version, null, null -- //
```

Since we want to retrieve all the data from the `customers` table, we’ll use the percentage sign followed by a single quote to close the search parameters. Then, we begin our injected query with a `UNION SELECT` statement that dumps the current database name, the user, and the MySQL version in the first, second, and third columns, respectively, leaving the remaining two `null`.

**Figure 157: Enumerating the Database**

After launching our attack, we notice that the username and the DB version are present on the last line, but the current database name is not. This happens because column 1 is typically reserved for the ID field consisting of an integer data type, meaning it cannot return the string value we are requesting through the `SELECT database()` statement.

The web application is explicitly omitting the output from the first column because IDs are not usually useful information for end users. With this in mind, let’s update our query by shifting all the enumerating functions to the right-most place, avoiding any type mismatches.

**Listing 198 - Fixing the Injected UNION Query**

```sql
' UNION SELECT null, null, database(), user(), @@version -- //
```

Since we already verified the expected output, we can omit the percentage sign and rerun our modified query.

**Figure 158: Fixing the SQL Query**

This time, all three values returned correctly, including `offsec` as the current database name.

Let’s extend our tradecraft and verify whether other tables are present in the current database. We can start by enumerating the information schema of the current database from the `information_schema.columns` table.

**Listing 199 - Retrieving Current Database Tables and Columns**

```sql
' UNION SELECT null, table_name, column_name, table_schema, null FROM information_schema.columns WHERE table_schema = database() -- //
```

Running our new enumeration attempt results in the following output:

**Figure 159: Retrieving Current Database Tables and Columns**

By following these steps, we can effectively identify and exploit SQL injection vulnerabilities, both through error-based and UNION-based payloads.