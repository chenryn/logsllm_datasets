:::
:::
::: section
::: titlepage
# []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#removing-lost-lvm-physical-volumes-from-a-volume-group_troubleshooting-lvm}从卷组中删除丢失的 LVM 物理卷 {.title}
:::
如果物理卷失败，您可以激活卷组中剩余的物理卷，并从卷组中删除所有使用该物理卷的逻辑卷。
::: orderedlist
**步骤**
1.  激活卷组中剩余的物理卷：
    ``` screen
    # vgchange --activate y --partial myvg
    ```
2.  检查要删除哪些逻辑卷：
    ``` screen
    # vgreduce --removemissing --test myvg
    ```
3.  从卷组中删除所有使用丢失的物理卷的逻辑卷：
    ``` screen
    # vgreduce --removemissing --force myvg
    ```
4.  可选：如果您意外删除要保留的逻辑卷，您可以撤销 `vgreduce`{.literal}
    操作：
    ``` screen
    # vgcfgrestore myvg
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    如果您删除了精简池，LVM 无法撤销操作。
    :::
:::
:::
::: section
::: titlepage
# []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#finding-the-metadata-of-a-missing-lvm-physical-volume_troubleshooting-lvm}查找丢失的 LVM 物理卷的元数据 {.title}
:::
如果意外覆盖或者破坏了卷组物理卷元数据区域，您会得到出错信息表示元数据区域不正确，或者系统无法使用特定的
UUID 找到物理卷。
这个过程找到丢失或者损坏的物理卷的最新归档元数据。
::: orderedlist
**步骤**
1.  查找包含物理卷的卷组元数据文件。归档的元数据文件位于
    `/etc/lvm/archive/volume-group-name_backup-number.vg`{.literal}
    路径中：
    ``` screen
    # cat /etc/lvm/archive/myvg_00000-1248998876.vg
    ```
    使用备份号替换
    [*00000-1248998876*]{.emphasis}。选择该卷组最高数字最后已知的有效元数据文件。
2.  找到物理卷的 UUID。使用以下任一方法。
    ::: itemizedlist
    -   列出逻辑卷：
        ``` screen
        # lvs --all --options +devices
          Couldn't find device with uuid 'FmGRh3-zhok-iVI8-7qTD-S5BI-MAEN-NYM5Sk'.
        ```
    -   检查归档的元数据文件。在卷组配置的 `physical_volumes`{.literal}
        部分中，查找标记为 `id =`{.literal} 的 UUID。
    -   使用 `--partial`{.literal} 选项取消激活卷组：
        ``` screen
        # vgchange --activate n --partial myvg
          PARTIAL MODE. Incomplete logical volumes will be processed.
          WARNING: Couldn't find device with uuid 42B7bu-YCMp-CEVD-CmKH-2rk6-fiO9-z1lf4s.
          WARNING: VG myvg is missing PV 42B7bu-YCMp-CEVD-CmKH-2rk6-fiO9-z1lf4s (last written to /dev/vdb1).
          0 logical volume(s) in volume group "myvg" now active
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#restoring-metadata-on-an-lvm-physical-volume_troubleshooting-lvm}在 LVM 物理卷中恢复元数据 {.title}
:::
这个过程恢复被损坏或者替换为新设备的物理卷的元数据。您可以通过重写物理卷的元数据区域从物理卷中恢复数据。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
不要在正常的 LVM 逻辑卷中尝试这个步骤。如果您指定了不正确的
UUID，将会丢失您的数据。
:::
::: itemizedlist
**先决条件**
-   您已找出丢失的物理卷的元数据。详情请查看[查找缺少的 LVM
    物理卷的元数据](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_logical_volumes/troubleshooting-lvm_configuring-and-managing-logical-volumes#finding-the-metadata-of-a-missing-lvm-physical-volume_troubleshooting-lvm){.link}。
:::
::: orderedlist
**步骤**
1.  恢复物理卷中的元数据：
    ``` screen
    # pvcreate --uuid physical-volume-uuid \
               --restorefile /etc/lvm/archive/volume-group-name_backup-number.vg \
               block-device
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    该命令只覆盖 LVM 元数据区域，不会影响现有的数据区域。
    :::
    ::: example
    []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#idm140111047891600}
    **例 8.3. 在 [*/dev/vdb1*]{.emphasis}上恢复物理卷**
    ::: example-contents
    以下示例使用以下属性将 `/dev/vdb1`{.literal} 设备标记为物理卷：
    ::: itemizedlist
    -   `FmGRh3-zhok-iVI8-7qTD-S5BI-MAEN-NYM5Sk`{.literal} 的 UUID
    -   `VG_00050.vg`{.literal}
        中包含的元数据信息，它是卷组最新的好归档元数据。
    :::
    ``` screen
    # pvcreate --uuid "FmGRh3-zhok-iVI8-7qTD-S5BI-MAEN-NYM5Sk" \
               --restorefile /etc/lvm/archive/VG_00050.vg \
               /dev/vdb1
      ...
      Physical volume "/dev/vdb1" successfully created
    ```
    :::
    :::
2.  恢复卷组的元数据：
    ``` screen
    # vgcfgrestore myvg
      Restored volume group myvg
    ```
3.  显示卷组中的逻辑卷：
    ``` screen
    # lvs --all --options +devices myvg
    ```
    逻辑卷目前不活跃。例如：
    ``` screen
      LV     VG   Attr   LSize   Origin Snap%  Move Log Copy%  Devices
      mylv myvg   -wi--- 300.00G                               /dev/vdb1 (0),/dev/vdb1(0)
      mylv myvg   -wi--- 300.00G                               /dev/vdb1 (34728),/dev/vdb1(0)
    ```
4.  如果逻辑卷的片段类型是 RAID，则重新同步逻辑卷：
    ``` screen
    # lvchange --resync myvg/mylv
    ```
5.  激活逻辑卷：
    ``` screen
    # lvchange --activate y myvg/mylv
    ```
6.  如果磁盘中的 LVM
    元数据至少使用了覆盖其数据的空间，这个过程可以恢复物理卷。如果覆盖元数据的数据超过了元数据区域，则该卷中的数据可能会受到影响。您可能能够使用
    `fsck`{.literal} 命令恢复这些数据。
:::
::: itemizedlist
**验证步骤**
-   显示活跃逻辑卷：
    ``` screen
    # lvs --all --options +devices
      LV     VG   Attr   LSize   Origin Snap%  Move Log Copy%  Devices
     mylv myvg   -wi--- 300.00G                               /dev/vdb1 (0),/dev/vdb1(0)
     mylv myvg   -wi--- 300.00G                               /dev/vdb1 (34728),/dev/vdb1(0)
    ```
:::
:::
::: section
::: titlepage
# []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#rounding-errors-in-lvm-output_troubleshooting-lvm}LVM 输出中的轮询错误 {.title}
:::
LVM 命令报告卷组中的空间使用情况，将报告的编号舍入到 `2`{.literal}
个十进制位置，以提供人类可读的输出。这包括 `vgdisplay`{.literal} 和
`vgs`{.literal} 实用程序。
因此，报告的剩余空间值可能大于卷组中物理扩展提供的内容。如果您试图根据报告可用空间的大小创建逻辑卷，则可能会遇到以下错误：
``` screen
Insufficient free extents
```
要临时解决这个问题，您必须检查卷组中可用物理扩展的数量，即可用空间的具体值。然后您可以使用扩展数目成功创建逻辑卷。
:::
::: section
::: titlepage
# []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#preventing-the-rounding-error-when-creating-an-lvm-volume_troubleshooting-lvm}防止创建 LVM 卷时出现循环错误 {.title}
:::
在创建 LVM 逻辑卷时，您可以指定逻辑卷的逻辑扩展数目以避免循环错误。
::: orderedlist
**步骤**
1.  在卷组中找到可用物理扩展数目：
    ``` screen
    # vgdisplay myvg
    ```
    ::: example
    []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#idm140111125533648}
    **例 8.4. 卷组中可用扩展**
    ::: example-contents
    例如：以下卷组有 8780 可用物理扩展：
    ``` screen
    --- Volume group ---
     VG Name               myvg
     System ID
     Format                lvm2
     Metadata Areas        4
     Metadata Sequence No  6
     VG Access             read/write
    [...]
    Free  PE / Size       8780 / 34.30 GB
    ```
    :::
    :::
2.  创建逻辑卷。以扩展而不是字节为单位输入卷大小。
    ::: example
    []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#idm140111125343968}
    **例 8.5. 通过指定扩展数目来创建逻辑卷**
    ::: example-contents
    ``` screen
    # lvcreate --extents 8780 --name mylv myvg
    ```
    :::
    :::
    ::: example
    []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#idm140111125342160}
    **例 8.6. 创建逻辑卷以占据所有剩余空间**
    ::: example-contents
    另外，您可以扩展逻辑卷使其使用卷组中剩余的可用空间的比例。例如：
    ``` screen
    # lvcreate --extents 100%FREE --name mylv myvg
    ```
    :::
    :::
:::
::: itemizedlist
**验证步骤**
-   检查卷组现在使用的扩展数目：
    ``` screen
    # vgs --options +vg_free_count,vg_extent_count
      VG     #PV #LV #SN  Attr   VSize   VFree  Free  #Ext
      myvg   2   1   0   wz--n- 34.30G    0    0     8780
    ```
:::
:::
:::