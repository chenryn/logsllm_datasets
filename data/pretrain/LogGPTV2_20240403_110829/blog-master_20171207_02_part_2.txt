小心去重（加上PK，或行号，避免去重）  
例子，我们使用tsvector存储了大量的文本向量信息，每个字段1MB，有几百万记录，然后有一个NOT IN的查询，这个查询筛选得到的结果过多。  
由于tsvector的索引GIN扫描用到了bitmapscan，当记录数很多时，需要RECHECK的记录就越多，并且这部分是空间占用的大坨。  
最终会导致搜索很慢。  
优化方法：  
既然按所需条件复合条件的记录过多，导致RECHECK部分的时间变慢，那么我们可以使用反条件，减少复合条件的记录减少RECHECK的耗时。  
同时使用全表扫得到CTID或PK（因为全表扫不需要扫TOAST），然后再EXCEPT它。最后根据PK或CTID得到索要的记录。  
```  
explain (analyze,verbose,timing,costs,buffers)  
select id from t_big where ctid = any (                 -- 通过行号来定位使用except得到的符合条件的记录  
array  
(  
    select ctid from t_big   -- 这个是全表的ctid(行号)  
  except   
    select ctid from t_big where info @@ to_tsquery('-1')    -- 这里就是反条件得到的ctid(行号)   
)  
);  
```  
用t_big那个例子，性能飙升    
```  
                                                                         QUERY PLAN                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Tid Scan on public.t_big  (cost=12023.32..12035.42 rows=10 width=4) (actual time=105.696..129.313 rows=100000 loops=1)  
   Output: t_big.id  
   TID Cond: (t_big.ctid = ANY ($0))  
   Buffers: shared hit=100640  
   InitPlan 1 (returns $0)  
     ->  SetOp Except  (cost=11520.81..12023.31 rows=100000 width=10) (actual time=62.363..93.300 rows=100000 loops=1)  
           Output: "*SELECT* 1".ctid, (0)  
           Buffers: shared hit=640  
           ->  Sort  (cost=11520.81..11772.06 rows=100500 width=10) (actual time=62.359..70.542 rows=100000 loops=1)  
                 Output: "*SELECT* 1".ctid, (0)  
                 Sort Key: "*SELECT* 1".ctid  
                 Sort Method: quicksort  Memory: 7760kB  
                 Buffers: shared hit=640  
                 ->  Append  (cost=0.00..3170.85 rows=100500 width=10) (actual time=0.012..46.268 rows=100000 loops=1)  
                       Buffers: shared hit=640  
                       ->  Subquery Scan on "*SELECT* 1"  (cost=0.00..2637.00 rows=100000 width=10) (actual time=0.012..30.602 rows=100000 loops=1)  
                             Output: "*SELECT* 1".ctid, 0  
                             Buffers: shared hit=637  
                             ->  Seq Scan on public.t_big t_big_1  (cost=0.00..1637.00 rows=100000 width=6) (actual time=0.011..13.605 rows=100000 loops=1)  
                                   Output: t_big_1.ctid  
                                   Buffers: shared hit=637  
                       ->  Subquery Scan on "*SELECT* 2"  (cost=19.73..533.85 rows=500 width=10) (actual time=0.047..0.047 rows=0 loops=1)  
                             Output: "*SELECT* 2".ctid, 1  
                             Buffers: shared hit=3  
                             ->  Bitmap Heap Scan on public.t_big t_big_2  (cost=19.73..528.85 rows=500 width=6) (actual time=0.045..0.045 rows=0 loops=1)  
                                   Output: t_big_2.ctid  
                                   Recheck Cond: (t_big_2.info @@ to_tsquery('-1'::text))  
                                   Buffers: shared hit=3  
                                   ->  Bitmap Index Scan on idx_t_big  (cost=0.00..19.60 rows=500 width=0) (actual time=0.042..0.042 rows=0 loops=1)  
                                         Index Cond: (t_big_2.info @@ to_tsquery('-1'::text))  
                                         Buffers: shared hit=3  
 Planning time: 0.239 ms  
 Execution time: 137.356 ms  
(33 rows)  
```  
## 小结  
本文讲述了recheck的原理，以及在什么情况下RECHECK可能引发较大性能问题。如何避免等方法。  
## 参考  
[《全文检索 不包含 优化 - 阿里云RDS PostgreSQL最佳实践》](../201707/20170727_01.md)      
[《HTAP数据库 PostgreSQL 场景与性能测试之 26 - (OLTP) NOT IN、NOT EXISTS 查询》](../201711/20171107_27.md)      
[《PostgreSQL 空间切割(st_split)功能扩展 - 空间对象网格化 (多边形GiST优化)》](../201710/20171005_01.md)    
[《PostgreSQL 空间st_contains，st_within空间包含搜索优化 - 降IO和降CPU(bound box) (多边形GiST优化)》](../201710/20171004_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")