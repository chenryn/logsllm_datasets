EDI:
0x8049f0c
EIP:
0x80484c7
mprotect（0xf67fd000,4096,PROT_READ)=0
0
munmap（0xf67bf000,103358)-0
88
fstat64（1,0xf6ffoaa0)=0
88
mmap2(NULL,4096,PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANON
104
113
write（1,0xf660e000,11)=11
13
exit_group（11)
113
0xf6ffeff0:0xf6ffefac030000000300000002000000..
0xf6fffooo:
0xf6fff060 81b17ef6
0xf67daa10
0x80484bd
0xf6fffo10:
0xf6fff030 0300 0000
0xf67fe00072c37e f60...
0xf6fff020:
：0xf67fe504 0xf67fe000
0xf6fff0440xf67bb030....
0xf6fff030:
0xf67fe938
0xf67da858
0xf67fe55c2cc27ef68...X.}.\..
0xf6fff040:0xf67fe5040xf67dd40c0000 00 000xf67dab48......)....
图9-10
）Qira的浏览器Web页面
---
## Page 241
CTF特训营：技术详解、解题方法与
9.3.3Trace类工具
241/1144
1）最左边两列为fork，每次用nc连一次4000端口，就会多一个
fork。图9-10中的两列表示链接过两次4000端口。
2）右边的最上面有4个框，分别对应如下信息。
·113表示程序运行的第113条指令。
0表示第0个fork。
0x80484c7表示指令的地址。
Oxf6ff01c表示数据的地址。
3）右边的下面是程序运行的指令、寄存器、内存、调用的系统
调用等。
---
## Page 242
CTF特训营：技术详解、解题方法与
第10章Reverse分析
242/1144
第10章Reverse分析
本章将从常规逆向分析流程、自动化逆向、脚本语言的逆向和干
扰分析技术及破解方法来具体介绍如何进行Reverse分析。
---
## Page 243
CTF特训营：技术详解、解题方法与
10.1常规逆向分析流程
243/1144
10.1常规逆向分析流程
因为在一个可执行程序（尤其是图形化的程序）中，汇编代码量
比较庞大，因此需要能够定位出真正需要分析的关键代码。在找到关
键代码之后，需要对关键代码采用的算法进行分析，理清程序功能
最后针对程序功能，写出对应脚本，解出flag。
---
## Page 244
CTF特训营：技术详解、解题方法与
10.1.1关键代码定位
244/1144
10.1.1关键代码定位
1.API断点法
在获取文本输入时，对于窗口类程序获取文本的方式主要是通过
GetWindowText和GetDlgltemText两个API来获取。在输出结果时，程
序通常会弹出对话框，调用的APl通常为MessageBox。在这些APl函
数中下断点，在调试器中断下来之后，通过栈回溯即可定位到关键代
码。
2.字符串检索法
（1）在IDA中查找字符串
打开Strings子窗口，通过Ctrl+F快捷键输入你想要查找的字符串
如图10-1所示。
（2）在OD中查找字符串
通过AIt+E快捷键，可以查看可执行模块，找到主模块，如图
10-2所示。
点击右键，选择中文搜索引擎选项，根据需要选择搜索ASCI或
---
## Page 245
CTF特训营：技术详解、解题方法与
10.1.1关键代码定位
245/1144
者搜索UNICODE，如图10-3所示。
View
Debugger
Options
Windows
Help
Opensubviews
Quickview
Graphs
?
Toolbars
Disassembly
Calculator...
Fullscreen
8F
Hexdump
GraphOverview
Pseudocode
Recent scripts
F5
18
Database snapshotmanager...
T
Exports
Imports
Print segmentregisters
空格键
Names
F4
Print internal flags
F
Functions
F3
Strings
F12
Hide
Unhide
Segments
F7
Hide all
Segmentregisters
F8
Unhide all
Selectors
XDelete hidden area
Setuphiddenitems...
Signatures
F5
图10-1
在IDA中查找字符串
x1emwbcPkbs三？
口民
工具
暂停
大小
入口
名称
文件版本
COAETTCS
h-1E10.0.13
ZFIS4A
411
11
411
DVAFI32.411
---
## Page 246
CTF特训营：技术详解、解题方法与
10.1.1关键代码定位
246/1144
图10-2
在OD中找到主模块
ec
备份
ea
st
复制
e
Xh
二进制
P
Xh
汇编（A)
Space
sae
标签
XSn
注释
bes
断点(P）
udu
icea
RUN跟踪
ea
此处为新EIP
Ctrl+Gray*
Xha
转到
ea
P
数据窗口中跟随
D
tn
查找（S）
t3
查找参考（B）
t3
it3
查看
it3
复制到可执行文件
t3
分析
t3
Start FKVMP
t3
IDAFicator
t3
运行脚本（S）
Seript Functions..
用01lyDump脱壳调试进程
1搜索ASCII
脚本运行窗口（W）.
A77
B77
运行脚本（）
2搜索UNICODE
A77
脚本功能
3智能搜索
75D
Heap Vis
F77
4强制模式
StrongOD
F77
中文搜索引擎
5关于
Comman
103
一
界面选项
0x000E05FE->0x000F
---
## Page 247
CTF特训营：技术详解、解题方法与
10.1.1关键代码定位
247/1144
图10-3在OD中搜索字符串
3.辅助工具定位法
针对特定语言或者编译器生成的程序，有一些辅助工具可帮助用
户快速定位按键处理程序的地址，如针对MFC程序的xSpy，针对
Delphi程序的Dede，等等。
---
## Page 248
CTF特训营：技术详解、解题方法与
10.1.2常见加密算法识别
248/1144
10.1.2常见加密算法识别
在对数据进行变换的过程中，通常会使用一些常用的加密算法
因此如果能够快速识别出对应的加密算法，就能更快地分析出整个完
整的算法。CTF逆向中通常出现的加密算法包括base64、TEA、AES
RC4、MD5等
1.base64
base64主要是将输入中的每3字节（共24比特）按每6比特分成
一组，变成4个小于64的索引值，然后通过一个索引表得到4个可见
字符。
索引表为一个64字节的字符串，如果在代码中发现引用了这个
索
引1
表
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzO
123456789+/"，那么基本上就可以确定使用了base64，如图10-4所
示。此外，还有一些变种的base64，主要是改变了这个索引表。
---
## Page 249
CTF特训营：技术详解、解题方法与
10.1.2常见加密算法识别
249/1144
BYTE *_fastcal1 sub_481380(_BYTE *output,_BYTE *hput, Int 1en)
2R
char v3;//al
intv5;//edx
BYTE*v4;//esi
_BYTE*v6;//ebp
_BYTE*v7;//ecx
char v8;//al
unsigned
int8*v9;//es1
10
xe/
BYTE
v18;//ecx
11
1.2
_BYTE*v12;//eCx
13
14
v3=len;
15
16
17
v5=0;
v6-output;
18
1f（1en-2>0）
19
21
20
do
22
output[1]=aAbcdefgh1jklnn[(（uns1gned Int)（unsigned _Int8]v4[v5+1]>> 4）|16*（v4[v5]&3）];
23
24
v7++-aAbcdefgh1jk1mn[4•（v4[v5+1]&exF）|（（uns1gned Int）（unsigned_int8）v4[v5+2]>>6）];
v7-output+2;
25
*v7-aAbcdefghijklmn[v4[v5+2]&0x3F];
27
v5+=3;
output=v7+1;
wh11e（v5>5)+k1);
(+（>0））=+
v[0]=vO;
v[1]=v1;
void decrypt（uint32t*v,uint32t*k）
uint32_tv0=v{0],v1=v[1], sum=0xC6EF3720,i;
uint32_t delta=0x9e3779b9;
uint32_t k0=k[0],k1=k[1],k2=k[2],k3=k[3];
for(i=0;i>0）)=-
（L>+（>））=-0
sum-= delta;
v[0]=vO;
v[1]=v1;
对TEA的识别也比较容易，在TEA算法中有一个固定的常数
0x9e3779b9或者0x61c88647
3.AES
AES也是常见的分组加密算法，多次出现在CTF中。AES的加解
密流程如图10-5所示。
---
## Page 251