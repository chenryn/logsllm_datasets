Algorithm 3 shows the SCU/SCU+ MTS scheme. Due to
SCU’s design, nonuniform chain traversal seems like a nat-
ural ﬁt for SCU+, but as discussed in Section 5.1, uniform
chain traversal is more robust and is used in SCU+ instead.
Fig. 2 shows the epoch-j private key as (s1,rj, . . . , st,rj). All
keys between si,r(j−1) and si,rj, where i = 1, . . . , t and j ≥ 1,
are called intermediate keys. Our strategy is to determine
Lσ, Cσ, Cv and S in turn.
Algorithm 3: The SCU/SCU+ MTS scheme
(cid:2)
= state tuple
(S1, S2, . . . , St)
Key generation(s1, s2, . . . , st):
Signing(M , s1, s2, . . . , st):
Si ← r, vi ← H r(si), ∀i ∈ {1, . . . , t}
cz ← number of 0’s in H (M )
I ← set of bit positions in H (M )(cid:5)cz where bit value is 1
Si ← Si − 1, ∀i ∈ I
return (H Si (si) : i ∈ I)
Veriﬁcation(M , σ1, σ2, . . . , σk):
cz ← number of 0’s in H (M )
I ← set of bit positions in H (M )(cid:5)cz where bit value is 1
if k = |I| and
∃i ∈ I, xij ∈ N+, s.t. H xij (σj ) = vi, ∀j ∈ {1, . . . , k} then
vi ← σj, ∀ H xij (σj ) = vi
return “accept”
else
return “reject”
end if
Lσ is proportional to the expected number of 1-bits in
H (M )(cid:9)cz. In H (M ), the expected number of 1-bits is lH /2
(we distinguish lH from the normal hash length lH because
typically lH ≥ lH by design). In cz, the expected number of
1-bits varies with lH, because cz may be longer than neces-
sary to represent the number of 0’s in H (M ). In fact, cz is
of length
(cid:2)
=|cz| = (cid:16)log2 (lH +1)(cid:17) ,
lc
(9)
and by t’s deﬁnition, t = lH + lc. Fig. 3 shows the probabil-
ity of having 1 at the ith bit of cz for lH = 128, . . . ,248. For
the case lH = 160 (the length of a SHA-1 or RIPEMD-160
hash value), bits 4-8 are 1 at a probability of 1/2, bit 2 is
almost always 1, bit 3 is almost always 0, and bit 1 is always
0; in other words,
(cid:26)
(cid:25)
Lσ =
lH 1
2
+ (lc −3)
1
2
+ 1
lH =
lH .
t − 1
2
For the general case, it is simpler to use the approximation
Lσ = t lH /2.
(10)
Cv = 1 +
t
2
d Pr[Ad] = 1 + t.
(12)
d=1
Signing cost varies with the state variables correspond-
ing to the 1-bits of H (M )(cid:9)cz. Without loss of general-
ity, let us consider the ﬁrst bit of H (M )(cid:9)cz. Within an
To determine S , we estimate the success probability of
signature forgery during epoch j. To forge a signature for
M att, an attacker needs to supply si1,j, . . . , sik,j , where i1,
Public key 
for epoch 1
s1,0
s1,1
s2,0
s2,1
Private key 
for epoch 1
s1,2
s2,2
s1,3
s2,3
Private key 
for epoch 2
s1,4
...
Private key 
for epoch j
s1,rj
s2,4
...
s2,rj
...
...
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
st,0
st,1
st,2
st,3
st,4
...
st,rj
...
Figure 2: SCU+ with uniform chain traversal and
r = 2. Suppose in epoch 1, two signatures are re-
ceived: (s1,1, s2,1) and (s2,2) (note “thick boxes”). In
epoch 2, to verify signature (s1,3, s2,3, st,3) (note “or-
?
ange dashed boxes”), a receiver checks H 2(s1,3)
= s1,1,
H (s2,3)
?
= s2,2, and H 3(st,3)
?
= st,0.
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
Bit 1
Bit 2
Bit 3
Bit 4
Bit 5
Bit 6
Bit 7
Bit 8
0
.
1
8
.
0
6
.
0
4
.
0
2
.
0
0
0
.
140
160
180
200
220
240
Figure 3: Y -axis: probability of having bit value 1
at the ith bit of cz. X-asix: lH.
(cid:3)
(cid:2)
(cid:3)
r
1
(cid:2)
( 1
2 )( 1
epoch, if the ﬁrst bit is 1 once, which occurs at a proba-
2 )r−1, then the accumulative signing cost is
bility of
r − 1. If the ﬁrst bit is 1 twice, which occurs at a probabil-
2 )r−2, then the accumulative signing cost is
ity of
(r − 1) + (r− 2). By extension, the expected signing cost for
(cid:5)(cid:6)
r(cid:4)
the ﬁrst bit is given by
i(cid:4)
2 )2( 1
( 1
(cid:7)
(cid:9)
r
2
1
2r
r
i
i=1
j=1
(r − j)
=
3r(r − 1)
.
8
The expected signing cost for all bits is then
Cσ = 3tr(r − 1)/16.
(11)
When a signature is received, each of the t/2 (on average)
signature elements needs to be veriﬁed. Without loss of gen-
erality, let us consider a signature element corresponding to
the ﬁrst bit of H (M )(cid:9)cz. Let Ad be the event that this sig-
nature element requires d hash operations to verify, which
occurs when the past d−1 signatures do not contain a signa-
ture element corresponding to the ﬁrst bit of H (M )(cid:9)cz, but
2 )d−1,
the dth signature in the past does, i.e., Pr[Ad] = 1
and
2 (1− 1
∞(cid:4)
292. . . , ik correspond to the positions of 1-bits in H (M att)(cid:9)cz.
Suppose the attacker has already captured r signatures for
epoch j. The success probability of signature forgery,
Pr[forgery|k], is the probability that bit positions i1, . . . , ik
are covered by a subset of the r captured signatures. For the
case of lH = 160, there is almost always a bit position among
i1, . . . , ik that corresponds to bit 2 in cz (see Fig. 3), so the
attacker only has to match k−1 bits to the bit positions that
are already compromised, i.e., Pr[forgery] = (1 − 1/2r)k−1.
For the general case, it is simpler to use the approxima-
tion Pr[forgery] = (1 − 1/2r)k. Next, let us consider the
probability of having k 1-bits in H (M att)(cid:9)cz, denoted by
Pr[k].
If we denote by Ai the event that H (M att) has
i 1-bits, and by Bi the event that cz has i 1-bits, then
Pr[k] =
t(cid:4)
t(cid:4)
k(cid:2)=1
k(cid:2)=1
=
=
and
(cid:2)
(cid:7)
(cid:7)
]
i=0
k(cid:2)=1
(cid:2) min(k
] Pr[k = k
,lH)(cid:4)
,lH)(cid:4)
(cid:22)min(k,lH)
Pr[Ai] Pr[Bk−i|Ai]. Therefore,
t(cid:4)
Pr[forgery|k = k
⎡
⎣(1 − 1/2r)k
⎡
⎣(1 − 1/2r)k
(cid:31) t(cid:4)
(cid:25)
(cid:6)
,lH)(cid:4)
⎤
⎦
Pr[Ai] Pr[Bk(cid:2)−i|Ai]
(cid:2)
(cid:3)
2lH I(lc, lH −i, k
(1 − 1/2r)k
(cid:7)
(cid:26) 
(cid:2) min(k
i=0
(cid:2)
k(cid:2)=1
min(k
lH
i
i=0
(cid:2)
(cid:2)
I(lc, lH −i, k
(cid:7) − i)
lH
i
i=0
S = lH − log2
⎤
⎦ ,
(cid:7) − i)
(13)
,
Pr[forgery] =
where I(lc, lH −i, k
(cid:7) − i) is deﬁned by Deﬁnition 3.
Definition 3. I(lc, b1, b2) is 1 if the following has a so-
lution, and 0 if otherwise:
(cid:25)
2lc −1
1
2lc −2
1
··· 20
···
1
x0, . . . , xlc −1 ∈ {0, 1}.
⎤
⎥⎦ =
(cid:26)⎡
⎢⎣xlc −1
...
x0
(cid:25)
(cid:26)
b1
b2
,
Note the system of equations above does not always have
a solution, e.g., when lc ≥ b1 = b2 = 2. A closed-form
expression for I(lc, b1, b2) is unknown.
5.4 TSV+
TSV+ inherits TSV’s most notable features:
• For the same k, TSV becomes more secure than HORS
by imposing an order/sequence on the signature ele-
ments.
• For eﬃciency, the order is imposed on individual groups,
and not across all signature elements.
• So that signature elements are not interchangeable be-
tween groups, TSV releases keys at diﬀerent levels of
the one-way chains depending on the group.
However, TSV+ introduces two main enhancements: ﬁrstly,
so that it is comparable to other MA schemes, we enable
TSV+ to support multiple signatures within an epoch; sec-
ondly, TSV+ uses uniform chain traversal because it is more
robust than nonuniform chain traversal (which is used in
TSV), as we explained in Section 4. As shown in Algo-
rithm 4, TSV+ uses a state tuple (like SCU/SCU+ does) to
keep track of intermediate keys (between a public/private
key pair or a pair of adjacent private keys). The number
of intermediate keys is (wg − 1), as shown in Fig. 4, where
w is by design the smallest integer such that the probabil-
(cid:3)
(cid:2)
(cid:3)
ity of a one-way chain being used for more than w out of r
−4. The probability of
signatures in an epoch is less than 10
t−1
k−1
t , so w is the
/
a one-way chain being used is
(cid:17)
smallest integer such that
(cid:7)(cid:16)
(cid:6)
(cid:17)
(cid:16)
= k
(cid:2)
t
k
r
i
i
k
t
1 − k
t
r−i
−4
< 10
.
(14)
r(cid:4)
i=w+1
Fig. 4 shows the epoch-j private key as (s1,wgj , . . . , st,wgj),
and in that example, w = 2. For analysis, our strategy is to
ﬁrst determine Lσ and Cσ, which are closely related; then
Cv and S .
Algorithm 4: The TSV+ MTS scheme
k
g
ni
(cid:2)
= number of elements of a signature tuple
(cid:2)
= number of groups
(cid:2)
= number of log2 t-bit strings in group i, ∀i = 1, . . . , g,
under the constraint
(cid:2)
= smallest integer that satisﬁes (14)
(cid:2)
g
i=1 ni = k
w
if each of h1, . . . , hg consists of decreasing elements and
i1, . . . , ik are distinct and
∃i ∈ {i1, . . . , ik}, xij ∈ N+, s.t. H xij (σj ) = vi,
∀j ∈ {1, . . . , k} then
vi ← σj , ∀ H xij (σj ) = vi
return “accept”
else
return “reject”
end if
if each of h1, . . . , hg consists of decreasing elements and
(cid:2)
= state
Key generation(s1, s2, . . . , st):