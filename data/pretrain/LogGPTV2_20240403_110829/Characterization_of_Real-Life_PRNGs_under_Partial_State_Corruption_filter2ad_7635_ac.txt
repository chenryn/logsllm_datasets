I = I \ [I]19
end while
S3 = S3 ⊕ U
return S(cid:48) = (S1, S2, S3, S4, S5)
2 ⊕ U
0
that are selected using ﬁeld S1, which behaves as an index
for this operation. A second mixing operation involves S3,
S4 and S5 to update S3. Hence S2 is modiﬁed sequentially
by blocks of 10 bytes with successive next calls, while S3 is
completely modiﬁed, S1 and S4 are incremented and S5 is
not changed. As for the refresh algorithm, the two mixing
operations involve the hash function family HK.
Note that directive ssleay_rand_bytes takes as input an
array named buf which is ﬁlled with the generated output,
but whose content is also used as input (referenced as I
in the description below). In addition, the next algorithm
uses as input the current system PID and the system time.
The system PID is obtained with a call to directive getpid,
system time is obtained from a call to directive time, and
from a call to directive gettimeofday (for simplicity, we re-
fer to these two calls as “Time” in the description of the
PRNG). These inputs during the next algorithm are not ex-
plicitly compliant with the security model that requests a
strict separation between the input collection and the gener-
ation, but we mention it for completeness of the description.
These calls have been explicitly set by OpenSSL commu-
nity to prevent a vulnerability related to a call to the fork
function that uses a common PID for two next calls. This
vulnerability is described in [6].
Attack. We mount an attack against OpenSSL PRNG,
that is based on the internal state decomposition and the
fact that this state is only partially updated by the refresh
and next algorithms. Our attack uses the ﬁeld S3, which is
implemented with md and the ﬁeld S2, which is implemented
with state. As described in Algorithms 1 and 2, when the
PRNG is refreshed, the ﬁeld S3 is updated with the last cal-
culated hash, whereas it is used as the entropy source for the
output of the PRNG with 10 bytes of S2. Suppose now that
one uses an input of size 1023 bytes (which is the size of S2
1008Algorithm 2 OpenSSL PRNG next
Require: S = (S1, S2, S3, S4, S5)
Ensure: S(cid:48), R
2 ⊕ V [0,··· , 9]
2 = S2[S1 mod 1023,··· S1 + 10 mod 1023]
S∗
V = HK([PID||Time||S3||S4||S5||I||S∗
2 ])
S∗
2 = S∗
R = V [10,··· , 19]
S3 = HK([S4||S5||V ||S3])
S1 = S1 + 10 mod 1023
S4 = S4 + 1
return S(cid:48) = (S1, S2, S3, S4, S5), R
– or state) where the ﬁrst 20 bytes and the last 3 bytes are
0, to refresh the PRNG. Clearly this input is independent
of the parameter seed and it is therefore legitimate to use it
to refresh the PRNG in our security model. Suppose now
that one asks for an output. This output, which only relies
on the ﬁrst 10 bytes of S2 and on S3, is predictable. Theo-
rem 1 gives the technical details of the attack. This attack
is related to the refresh function that mixes new entropy se-
quentially by blocks of 20 bytes in the internal state, and
to the next function that also reads sequentially the internal
state by blocks to produce new outputs. If a block is com-
promised and if the attacker controls the exact block of the
input that will be mixed with the compromised block of the
internal state, the output is predictable. Hence the attack
points a design error of the PRNG, because this behavior
should not be possible.
Theorem 1. Openssl PRNG is not backward secure. To
mount an attack against the PRNG, A needs to corrupt 40
bytes of the internal state.
0,··· , I i
0 = ··· = I 0
1022]) ← D(i); where I 0
Proof. Deﬁne the 1023-byte distribution D. On input a state
i, D updates its state to i + 1 and outputs a 1023-byte input
I i: (i + 1; [I i
19 = 0,
1019 = ··· = I 0
I 0
1022 = 0 and all other bytes are random
(i.e. D is legitimate with γi = 8000). Deﬁne the mask
M = [M1, M2, M3, M4, M5], where M1 = 0, [M2]19
0 = 0,
M3 = 0, M4 = 0, M5 = 0 and J = {2, 3} (i.e. this mask will
be used to set the ﬁrst 20 bytes of S2 and S3 to 0). Con-
sider an adversary A against the security of the PRNG that
chooses the distribution D, and that makes the following
oracle queries in the security game BWD: one M-set-state
with S, J and M , one D-refresh with I 0, one next-ror. Then
(following refresh and next algorithm notations):
• After M-set-state, S1 = 0, [S2]19
0 = 019, [S2]1023
20
is
random, S3 = 0, S4 = 0, S5 = 0.
• After D-refresh, S1 = 0, [S2]19
0 = HK([0||0||0||0||0]),
is random, S3 = HK([0||0||0||0||51]), S4 = 0,
• After next-ror, V = HK(PID||Time||S3||0||51||[S2]19
0 ),
10 , S3 = HK(0||51||V ||HK(0||0||0||0||51)), S1 =
[S2]1023
S5 = 51.
20
R = V 19
10, S4 = 1.
In this last next-ror-oracle query, A obtains a 10-bytes string
that is predictable as it only relies on PID and Time, whereas
this event should occur with probability 2−80. Therefore A
can distinguish an output of OpenSSL PRNG from random
in the game BWD(γ∗, 320), for all γ∗ ≤ 8000 and this PRNG
is not backward secure.
4.2 Analysis of Android SHA1PRNG
In the Android system, a full Java implementation is pro-
vided, as part of the package security.provider.crypto,
named SHA1PRNG. It has been analyzed by Michaelis et al.
in [26], where the authors identiﬁed an implementation weak-
ness that causes the internal state to be overwritten by
predictable values, decreasing its entropy to 64 bits. This
PRNG was also debated intensively recently, due to a weak-
ness in its initial seeding that caused a ﬂaw in Bitcoin wal-
lets. This weakness caused the Android community to pro-
pose a ﬁx to the PRNG, that simply consists in replacing it
by the OpenSSL PRNG, analyzed in Section 4.1. Full details
about the vulnerability and the proposed ﬁx are given in [7].
The PRNG is implemented with the class SHA1PRNG_Secure
RandomImpl and is an inheritance from the one included in
the library Apache Harmony from the package org.apache.
harmony. It follows the method named ”expansion of source
bits” of IEEE standard P.1363 [14].
Internal State Decomposition. The internal state of
the PRNG is implemented with the ﬁelds seed, of size 384
bytes, and counter, of size 8 bytes (many other ﬁelds are
used, but they are not useful to understand the PRNG op-
erations). Hence the decomposition of the internal state is
S = (S1, S2), where S1, S2 stand for seed and counter and
the total size of the internal state is 3136 bits. The PRNG
uses this decomposition as follows: S1 contains the collected
entropy and a hash of the collected entropy; S2 contains a
counter which is incremented at each output.
The refresh Algorithm. This algorithm is described in
Algorithm 3.
It takes as input the current internal state
(S1, S2), an input I of any size and updates the internal state
with I. It is implemented with method engineSetSeed as
follows: the ﬁrst 64 bytes of S1 collect the consecutive inputs
and the last 20 bytes of S1 contains a hash value. Two sub-
functions are used, implemented with SHA1Impl.updateHash
and SHA1Impl.computeHash. Note that these two functions
correspond respectively to the update of the internal state
of HK and a function hK that compresses the input of HK
to a ﬁxed length output, as deﬁned in the speciﬁcation [28].
The PRNG uses (wrongly, as we will see) the compression
function hK instead of HK for hash calculation. When the
collected input ﬁlls a block of hK (of size 64 bytes), the last
20 bytes of S1 are ﬁlled with hK, and then the block is set
to 0 and ﬁlled again. For clarity, we denote s the current
collected input and h the current calculated hash in S1 and
I∗ = [I]64−|S||I|
in Algorithm 3.
0
Algorithm 3 Android SHA1PRNG refresh
Require: S = (S1, S2) = ([s,··· , h], S2), I
Ensure: S(cid:48)
if |s||I|  64 then
S1[0,··· , 63] = I \ I∗, S1[328,··· , 347] = hK(s||I∗, h)
end if
return S(cid:48) = (S1, S2)
The next Algorithm. This algorithm is described in Algo-
rithm 4. It is implemented with engineNextBytes. It takes
1009as input an integer n and outputs R, of size n bytes and
the updated internal state S(cid:48). Twenty successive bytes out-
puts are generated as follows: the algorithm appends S1 and
S2, calculates the output with function hK (the compression
function) and increments the counter contained in S2. For
clarity, we suppose that n is a multiple of 20 (the imple-
mentation allows any value with intermediate arrays whose
description would complicate the understanding of the al-
gorithm) and we denote c the counter contained in S2. We
also use the same notation (s and h) used for the refresh
algorithm.
Algorithm 4 Android SHA1PRNG next
Require: S = (S1, S2) = ([s,··· , h], [c]), n(n mod 20 = 0)
Ensure: S(cid:48), R
for i = 0 to n − 1 do
S1[0,··· , 63] = [s||c], S1[328,··· , 347] = hK(s||c, h)
c = c + 1, S2 = [c]
Ri = S1[328,··· , 347]
i = i + 20
end for
return S(cid:48) = (S1, S2), R = ∪
i
Ri
Attack. We mount an attack against the Android SHA1PRNG
taking in consideration the internal state decomposition.
Our attack is possible because of the use of the compres-
sion function hK instead of the hash function HK, both in
the refresh and next algorithms. When using the compres-
sion function hK, the current hash value is used whereas the
hash should be calculated with the initialization vector de-
ﬁned in the speciﬁcation [28]. Again, this attack identiﬁes a
design ﬂaw of the PRNG. This attack shows that the PRNG
is not resilient because the attacker only needs to refresh the
PRNG with an input that forces S1 to be equal to [0]. In
addition, if at initialization the internal state is ﬁlled with
64 random bytes, the PRNG is not pseudo-random, because
no refresh is needed to mount the attack. The attack is
demonstrated in Theorem 2.
Theorem 2. Android SHA1PRNG is not resilient.
Proof. Consider an adversary A against the security of the
PRNG that chooses the following (one state) distribution D,
D(0) = I, where I is of size (cid:96), where (cid:96) ≤ 512 and random
(i.e. D is legitimate with γ0 = (cid:96)). Next A makes the follow-
ing oracle queries in the security game RES: one D-refresh,
one ﬁrst next-ror with an output R1 of size 20 bytes, and one
second next-ror, with an output R2 of size 20 bytes. Then:
0 = 0 with probability
• After D-refresh with I:
1/64, [S1]347
[S1]63
328 is random, S2 = 0.
• After next-ror with R0, [S1]63
328 and S2 = 1.
• After next-ror with R1, [S1]63
1/64, R0 = [S1]347
0 = 0 with probability
0 = [0||1], R0 = [S1]347
328,
but [S1]347
328 = hK(0, R0) with probability 1/64.
In this last next-ror-oracle query, A obtains a 20-byte string
that is known to A with probability 1/64 as it only relies
on the previous output, whereas ideally, this event should
occur only with probability 2−80. Therefore this PRNG is
not resilient.
4.3 Analysis of OpenJDK SHA1PRNG
The OpenJDK provider contains an implementation named
SHA1PRNG, directly given in the class SecureRandom. This
implementation follows the speciﬁcation given in the Digi-
tal Signature Standard [19]. This last speciﬁcation has been
analyzed in [24] and in [15], where the authors show that it
does not correspond to a resilient PRNG. Here we present
new attacks that are based on partial corruption of the in-
ternal state.
Internal State Decomposition. The internal state of the
PRNG is implemented with three private ﬁelds, the ﬁeld
state, of size 20 bytes, the ﬁeld remainder, of size 20 bytes
and an integer remCount. Hence the decomposition of the
internal state is S = (S1, S2, S3), where S1, S2, S3 stand for
state, remainder, remCount, respectively and the total size
of the internal state is 352 bits. The PRNG uses this de-
composition as follows: S1 contains the collected entropy, S2
contains random bytes before their output and S3 is used to
check if S2 contains enough random bytes that can serve as
output.
The refresh Algorithm. This algorithm is described in Al-
gorithm 5 and implemented with the method engineSetSeed.
It takes as input the current internal state S = (S1, S2, S3),
a new input I and outputs the new internal state by mixing
S1 with I using HK.
Algorithm 5 OpenJDK SHA1PRNG refresh
Require: S = (S1, S2, S3), I
Ensure: S(cid:48)
S1 = HK(S1||I)
return S(cid:48) = (S1, S2, S3)
The next Algorithm. This algorithm is described in Al-
gorithms 6 and 7. It is implemented with two methods; the
ﬁrst one, engineNextBytes, generates the output and the
second one, updateState, updates the internal state.
The method engineNextBytes takes as input the current
internal state S = (S1, S2, S3) and n, the number of bytes
requested. It outputs an n-byte output R and updates the
internal state. The internal counter S3 controls the update
of the internal state when output is generated: if S3 > 0, S2
contains some bytes that have not been used for a previous
output; these bytes can be used for the current output and
are then set to 0. Next, S2 and S1 are updated only if all
bytes from S2 have been used: at ﬁrst S2 is updated with S1
(S2 = HK(S1)) and ﬁnally S1 is updated using updateState
instruction, which is the implementation of the update algo-
rithm speciﬁed in [19]. The instruction updateState takes
as input two binary strings S1 and S2 of size 20 bytes and
mixes them together byte by byte.
Attack. We mount an attack against the OpenJDK SHA1-
PRNG taking in consideration the internal state decomposi-
tion. Our attack uses the fact that S2 and S3 are not up-
dated during refresh. After a refresh, if S3 is set by the
attacker to 1, the next output will be derived from a pre-
dictable value.
Theorem 3. OpenJDK SHA1PRNG is not backward secure.
To mount an attack against the PRNG, A needs to corrupt