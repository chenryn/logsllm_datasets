# Full-Text Search in PostgreSQL: Achieving Millisecond Performance

### Presenters
- **Oleg Bartunov** (with thanks to 1C for support)
- **Alexander Korotkov**

### Event
- PGConf.EU-2012, Prague

## Full-Text Search (FTS) in PostgreSQL

### Key Features
- **Full Integration with PostgreSQL**
  - 27 built-in configurations for 10 languages
  - Support for user-defined FTS configurations
  - Pluggable dictionaries (e.g., ispell, snowball, thesaurus) and parsers
- **Relevance Ranking**
  - GiST and GIN indexes with concurrency and recovery support
- **Rich Query Language**
  - Supports query rewriting

### Historical Development
- **OpenFTS (2000)**: PostgreSQL as a storage backend
- **GiST Index (2000)**: Thanks to Rambler
- **Tsearch (2001)**: Contributed, no ranking support
- **Tsearch2 (2003)**: Contributed, with configuration support
- **GIN (2006)**: Thanks to JFG Networks
- **FTS (2006)**: In-core, thanks to EnterpriseDB
- **E-FTS (Enterprise FTS)**: Thanks to an unspecified contributor

### Challenges and Alternatives
- **ACID Overhead**: The overhead of maintaining ACID properties can be significant.
- **Foreign Solutions**: Sphinx, Solr, Lucene
  - **Pros**: Very fast
  - **Cons**: 
    - Time lag due to database crawling and indexing
    - No direct access to attributes
    - Additional complexity

### Improving Native FTS

#### Performance Test
- **Dataset**: 156,676 Wikipedia articles
- **Query**:
  ```sql
  EXPLAIN ANALYZE
  SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
  FROM ti2
  WHERE text_vector @@ to_tsquery('english', 'title')
  ORDER BY rank DESC
  LIMIT 3;
  ```
- **Results**:
  - **Execution Time**: 400 ms
  - **Plan**:
    - Limit (cost=8087.40..8087.41 rows=3 width=282) (actual time=433.750..433.752 rows=3 loops=1)
    - Sort (cost=8087.40..8206.63 rows=47692 width=282) (actual time=433.749..433.749 rows=3 loops=1)
    - Bitmap Heap Scan on ti2 (cost=529.61..7470.99 rows=47692 width=282) (actual time=15.094..423.452 rows=47855 loops=1)
    - Bitmap Index Scan on ti2_index (cost=0.00..517.69 rows=47692 width=0) (actual time=13.736..13.736 rows=47855 loops=1)

#### Optimized Query
- **Query**:
  ```sql
  EXPLAIN ANALYZE
  SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
  FROM ti2
  WHERE text_vector @@ to_tsquery('english', 'title')
  ORDER BY text_vector > to_tsquery('english', 'title') DESC
  LIMIT 3;
  ```
- **Results**:
  - **Execution Time**: 18.425 ms
  - **Plan**:
    - Index Scan using ti2_index on ti2 (cost=20.00..26256.30 rows=47692 width=282) (actual time=18.375..18.425 rows=3 loops=1)
    - Index Cond: (text_vector @@ '''titl'''::tsquery)
    - Order By: (text_vector > 1034, 2, 2 (4 bytes))

### Fast Scan
- **Optimization**: `entry1 && entry2`
- **Benefit**: Visits 3 pages instead of 7

### Using Index for ORDER BY
- **Before**:
  ```sql
  SELECT itemid, title
  FROM items
  WHERE fts @@ to_tsquery('english', 'query')
  ORDER BY ts_rank(fts, to_tsquery('english', 'query')) DESC
  ```
- **After**:
  ```sql
  SELECT itemid, title
  FROM items
  WHERE fts @@ to_tsquery('english', 'query')
  ORDER BY fts > to_tsquery('english', 'query') DESC
  ```

- **Performance Improvement**:
  - **Before**:
    - Total runtime: 103.524 ms
  - **After**:
    - Total runtime: 0.164 ms

By leveraging these optimizations, we can significantly improve the performance of full-text search in PostgreSQL, achieving millisecond response times.