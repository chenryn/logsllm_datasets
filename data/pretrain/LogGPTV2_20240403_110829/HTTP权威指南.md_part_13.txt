资源/product-list.
HTTP/1.1 201 Created
Location: http://www.joes-hardware.com/product-list.txt txt，并将其写入
Content-Type: text/plain 自己的磁盘
Context-Length: 47
http://www.joes-hardware.com/product-list.txt
图3-9 PUT示例
PUT方法的语义就是让服务器用请求的主体部分来创建一个由所请求的URL命名
的新文档，或者，如果那个URL已经存在的话，就用这个主体来替代它。
因为PUT允许用户对内容进行修改，所以很多Web服务器都要求在执行PUT之
前，用密码登录。在第12章中可以读到更多有关密码认证的内容。
3.3.5 POST
POST方法起初是用来向服务器输入数据的3。实际上，通常会用它来支持HTML
的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到它要去
的地方（比如，送到一个服务器网关程序中，然后由这个程序对其进行处理）。图
3-10显示了一个用POST方法发起HTTP请求——向服务器发送表单数据——的客
户端。
3.3.6 TRACE
客户端发起一个请求时，这个请求可能要穿过防火墙、代理、网关或其他一些应用
程序。每个中间节点都可能会修改原始的HTTP请求。TRACE方法允许客户端在
最终将请求发送给服务器时，看看它变成了什么样子。
TRACE请求会在目的服务器端发起一个“环回”诊断。行程最后一站的服务器会
弹回一条TRACE响应，并在响应主体中携带它收到的原始请求报文。这样客户端
55 就可以查看在所有中间HTTP应用程序组成的请求/响应链上，原始报文是否，以
及如何被毁坏或修改过（参见图3-11）。
注3： POST用于向服务器发送数据。PUT用于向服务器上的资源（例如文件）中存储数据。
58 ｜ 第3章
浏览器将数据插入
报文实体的主体中
请求报文
POST /inventory-check.cgi HTTP/1.1
Host: www.joes-hardware.com
Content-type: text/plain
Content-length: 18
item=bandsaw 2647
响应报文 YES!
客户端 www.joes-hardware.com
HTTP/1.1 200 OK
Content-type: text/plain
Context-length: 37
“item= bandsaw 2647”
The bandsaw model 2647 is in stock!
CGI程序
库存检查
库存
清单
图3-10 POST示例
请求报文
TRACE /product-list.txt HTTP/1.1
TRACE /product-list.txt HTTP/1.1 Host: www.joes-hardware.com
Accept: * Accept: *
Host: www.joes-hardware.com Via: 1.1 proxy3.company.com
客户端 代理 www.joes-hardware.com
响应报文
HTTP/1.1 200 OK HTTP/1.1 200 OK
Content-type: text/plain Content-type: text/plain
Content-length: 96 Content-length: 96
Via: 1.1 proxy3.company.com
TRACE /product-list.txt HTTP/1.1
TRACE /product-list.txt HTTP/1.1 Host: www.joes-hardware.com
Host: www.joes-hardware.com Accept: *
Accept: * Via: 1.1 proxy3.company.com
Via: 1.1 proxy3.company.com
通过对实体部分检查，客户端可以看出这条请求被升级成了协议版本1.1。
升级的同时还添加了几个额外的请求首部。
图3-11 TRACE示例
HTTP报文 ｜ 59
TRACE方法主要用于诊断；也就是说，用于验证请求是否如愿穿过了请求/响应
链。它也是一种很好的工具，可以用来查看代理和其他应用程序对用户请求所产生
效果。
尽管TRACE可以很方便地用于诊断，但它确实也有缺点，它假定中间应用程序对
各种不同类型请求（不同的方法——GET、HEAD、POST等）的处理是相同的。
很多HTTP应用程序会根据方法的不同做出不同的事情——比如，代理可能会将
POST请求直接发送给服务器，而将GET请求发送给另一个HTTP应用程序（比如
Web缓存）。TRACE并不提供区分这些方法的机制。通常，中间应用程序会自行决
56 定对TRACE请求的处理方式。
TRACE请求中不能带有实体的主体部分。TRACE响应的实体主体部分包含了响应
服务器收到的请求的精确副本。
3.3.7 OPTIONS
OPTIONS方法请求Web服务器告知其支持的各种功能。可以询问服务器通常支持
哪些方法，或者对某些特殊资源支持哪些方法。（有些服务器可能只支持对一些特殊
类型的对象使用特定的操作）。
这为客户端应用程序提供了一种手段，使其不用实际访问那些资源就能判定访问各
种资源的最优方式。图3-12显示了一个使用OPTIONS方法的请求。
请求报文
OPTIONS * HTTP/1.1
Host: www.joes-hardware.com
Accept: *
由于请求的是可为所有资
源使用的选项，所以服务
器仅返回了它所支持的可
通用于各种资源的方法。
响应报文
客户端 HTTP/1.1 200 OK www.joes-hardware.com
Allow: GET, POST, PUT, OPTIONS
Context-length: 0
57 图3-12 OPTIONS示例
3.3.8 DELETE
顾名思义，DELETE方法所做的事情就是请服务器删除请求URL所指定的资源。
但是，客户端应用程序无法保证删除操作一定会被执行。因为HTTP规范允许服务
器在不通知客户端的情况下撤销请求。图3-13显示了一个DELETE方法实例。
60 ｜ 第3章
请求报文
DELETE /product-list.txt HTTP/1.1
Host: www.joes-hardware.com
响应报文
客户端 HTTP/1.1 200 OK www.joes-hardware.com 从服务器磁
Content-Type: text/plain 盘中删除文件
Content-Length: 54
product-list.txt
I have your delete request,
客户端认为资 will take time to process.
源已经被删除了
图3-13 DELETE示例
3.3.9 扩展方法
HTTP被设计成字段可扩展的，这样新的特性就不会使老的软件失效了。扩展方法
指的就是没有在HTTP/1.1规范中定义的方法。服务器会为它所管理的资源实现一
些HTTP服务，这些方法为开发者提供了一种扩展这些HTTP服务能力的手段。表
3-5列出了一些常见的扩展方法实例。这些方法就是WebDAV HTTP扩展（参见第
19章）包含的所有方法，这些方法有助于通过HTTP将Web内容发布到Web服务
器上去。
表3-5 Web发布扩展方法示例
方 法 描 述
LOCK 允许用户“锁定”资源——比如，可以在编辑某个资源的时候将其锁定，
以防别人同时对其进行修改
MKCOL 允许用户创建资源
COPY 便于在服务器上复制资源
MOVE 在服务器上移动资源
并不是所有的扩展方法都是在正式规范中定义的，认识到这一点很重要。如果你定
义了一个扩展方法，很可能大部分HTTP应用程序都无法理解。同样，你的HTTP
应用程序也可能会遇到一些其他应用程序在用的，而它并不理解的扩展方法。 58
在这些情况下，最好对扩展方法宽容一些。如果能够在不破坏端到端行为的情况下
将带有未知方法的报文传递给下游服务器，代理应尝试传递这些报文。如果可能破
坏端到端行为则应以501 Not Implemented（无法实现）状态码进行响应。最好按惯
例“对所发送的内容要求严一点，对所接收的内容宽容一些”来处理扩展方法（以
及一般的HTTP扩展）。
HTTP报文 ｜ 61
3.4 状态码
如前面的表3-2所示，HTTP状态码被分成了五大类。本节对这五类HTTP状态码
中的每一类都进行了总结。
状态码为客户端提供了一种理解事务处理结果的便捷方式。尽管并没有实际的规范
对原因短语的确切文本进行说明，本节还是列出了一些原因短语示例。我们所列的
是HTTP/1.1规范推荐使用的原因短语。
3.4.1 100～199——信息性状态码
HTTP/1.1向协议中引入了信息性状态码。这些状态码相对较新，关于其复杂性和感
知价值存在一些争论，而受到限制。表3-6列出了已定义的信息性状态码。
表3-6 信息性状态码及原因短语
状 态 码 原因短语 含 义
100 Continue 说明收到了请求的初始部分，请客户端继续。发送了这个状态码
之后，服务器在收到请求之后必须进行响应。更多信息请参见附
录C中的Expect首部介绍
101 Switching Protocols 说明服务器正在根据客户端的指定，将协议切换成Update首部
所列的协议
100 Continue状态码尤其让人糊涂。它的目的是对这样的情况进行优化：HTTP客
户端应用程序有一个实体的主体部分要发送给服务器，但希望在发送之前查看一下
服务器是否会接受这个实体。这可能会给HTTP程序员带来一些困扰，因此在这里
进行了比较详细（它如何与客户端、服务器和代理进行通信）的讨论。
1. 客户端与100 Continue
如果客户端在向服务器发送一个实体，并且愿意在发送实体之前等待100 Continue
响应，那么，客户端就要发送一个携带了值为100 Continue的Expect请求首部
（参见附录C）。如果客户端没有发送实体，就不应该发送100 Continue Expect首
59 部，因为这样会使服务器误以为客户端要发送一个实体。
从很多方面来看，100 Continue都是一种优化。客户端应用程序只有在避免向服务
器发送一个服务器无法处理或使用的大实体时，才应该使用100 Continue。
由于起初对100 Continue状态存在一些困惑（而且以前有些实现在这里出过问题），
因此发送了值为100 Continue的Expect首部的客户端不应该永远在那儿等待服务
器发送100 Continue响应。超时一定时间之后，客户端应该直接将实体发送出去。
62 ｜ 第3章
实际上，客户端程序的实现者也应该做好应对非预期100 Continue响应的准备（这
很烦人，但确实如此）。有些出错的HTTP应用程序会不合时宜地发送这个状态码。
2. 服务器与100 Continue
如果服务器收到了一条带有值为100 Continue的Expect首部的请求，它会用100
Continue响应或一条错误码来进行响应（参见表3-9）。服务器永远也不应该向没有
发送100 Continue期望的客户端发送100 Continue状态码。但如前所述，有些出错
的服务器可能会这么做。
如果出于某种原因，服务器在有机会发送100 Continue响应之前就收到了部分（或
全部）的实体，就说明客户端已经决定继续发送数据了，这样，服务器就不需要
发送这个状态码了。但服务器读完请求之后，还是应该为请求发送一个最终状态码
（它可以跳过100 Continue状态）。
最后，如果服务器收到了带有100 Continue期望的请求，而且它决定在读取实体的
主体部分之前（比如，因为出错而）结束请求，就不应该仅仅是发送一条响应并关
闭连接，因为这样会妨碍客户端接收响应（参见4.7.4节）。
3. 代理与100 Continue
如果代理从客户端收到了一条带有100 Continue期望的请求，它需要做几件事
情。如果代理知道下一跳服务器（在第6章中讨论）是HTTP/1.1兼容的，或者并
不知道下一跳服务器与哪个版本兼容，它都应该将Expect首部放在请求中向下
转发。如果它知道下一跳服务器只能与HTTP/1.1之前的版本兼容，就应该以417
Expectation Failed错误进行响应。4
如果代理决定代表与HTTP/1.0或之前版本兼容的客户端，在其请求中放入Expect
首部和100 Continue值，那么，（如果它从服务器收到了100 Continue响应）它就
不应该将100 Continue响应转发给客户端，因为客户端可能不知道该拿它怎么办。
代理维护一些有关下一跳服务器及其所支持的HTTP版本的状态信息（至少要维护
那些最近收到过请求的服务器的相关状态）是有好处的，这样它们就可以更好地处
理收到的那些带有100 Continue期望的请求了。 60
3.4.2 200～299——成功状态码
客户端发起请求时，这些请求通常都是成功的。服务器有一组用来表示成功的状态
码，分别对应于不同类型的请求。表3-7列出了已定义的成功状态码。
注4： 还有一种合理的方法，是向客户端先返回100 Continue，在向服务器转发请求时，删掉Expect首部。
（译者注）
HTTP报文 ｜ 63
表3-7 成功状态码和原因短语
状态码 原因短语 含 义
200 OK 请求没问题，实体的主体部分包含了所请求的资源
201 Created 用于创建服务器对象的请求（比如，PUT）。响应的实体主体部分中
应该包含各种引用了已创建的资源的URL，Location首部包含的