takes as input the public parameters PK, a ciphertext
CT, which contains an access policy A, and a private
key SK, which is a private key for a set S of attributes.
If the set S of attributes satis(cid:12)es the access structure
A then the algorithm will decrypt the ciphertext and
return a message M .
Delegate(SK; ~S). The delegate algorithm takes as
input a secret key SK for some set of attributes S and
a set ~S (cid:18) S. It output a secret key ~SK for the set of
attributes ~S.
We now describe a security model for ciphertext-
policy ABE schemes. Like identity-based encryption
schemes [27, 7, 12] the security model allows the ad-
versary to query for any private keys that cannot be
used to decrypt the challenge ciphertext. In CP-ABE
the ciphertexts are identi(cid:12)ed with access structures and
the private keys with attributes. It follows that in our
security de(cid:12)nition the adversary will choose to be chal-
lenged on an encryption to an access structure A(cid:3) and
can ask for any private key S such that S does not
satisfy S(cid:3). We now give the formal security game.
Security Model for CP-ABE
Setup. The challenger runs the Setup algorithm and
gives the public parameters, PK to the adversary.
Phase 2. Phase 1 is repeated with the restriction that
none of sets of attributes Sq1+1; : : : ; Sq satisfy the
access structure corresponding to the challenge.
Guess. The adversary outputs a guess b0 of b.
The advantage of an adversary A in this game is
de(cid:12)ned as Pr[b0 = b] (cid:0) 1
2 . We note that the model
can easily be extended to handle chosen-ciphertext at-
tacks by allowing for decryption queries in Phase 1 and
Phase 2.
De(cid:12)nition 2 An ciphertext-policy attribute-based en-
cryption scheme is secure if all polynomial time adver-
saries have at most a negligible advantage in the above
game.
3.2 Bilinear Maps
We present a few facts related to groups with e(cid:14)-
ciently computable bilinear maps.
Let G0 and G1 be two multiplicative cyclic groups
of prime order p. Let g be a generator of G0 and e be
a bilinear map, e : G0 (cid:2) G0 ! G1. The bilinear map e
has the following properties:
1. Bilinearity:
for all u; v 2 G0 and a; b 2 Zp, we
have e(ua; vb) = e(u; v)ab.
2. Non-degeneracy: e(g; g) 6= 1.
We say that G0 is a bilinear group if the group op-
eration in G0 and the bilinear map e : G0 (cid:2) G0 ! G1
are both e(cid:14)ciently computable. Notice that the map
e is symmetric since e(ga; gb) = e(g; g)ab = e(gb; ga).
4 Our Construction
In this section we provide the construction of our
system. We begin by describing the model of access
trees and attributes for respectively describing cipher-
texts and private keys. Next, we give the description
of our scheme. Finally, we follow with a discussion of
security, e(cid:14)ciency, and key revocation. We provide our
proof of security in Appendix A.
Phase 1. The adversary makes repeated private keys
corresponding to sets of attributes S1; : : : ; Sq1 .
4.1 Our Model
Challenge. The adversary submits two equal length
messages M0 and M1. In addition the adversary
gives a challenge access structure A(cid:3) such that
none of the sets S1; : : : ; Sq1 from Phase 1 satisfy
the access structure. The challenger (cid:13)ips a random
coin b, and encrypts Mb under A(cid:3). The ciphertext
CT(cid:3) is given to the adversary.
In our construction private keys will be identi(cid:12)ed
with a set S of descriptive attributes. A party that
wishes to encrypt a message will specify through an
access tree structure a policy that private keys must
satisfy in order to decrypt.
Each interior node of the tree is a threshold gate and
(We note
the leaves are associated with attributes.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:20 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007that this setting is very expressive. For example, we
can represent a tree with \AND" and \OR" gates by
using respectively 2 of 2 and 1 of 2 threshold gates.) A
user will be able to decrypt a ciphertext with a given
key if and only if there is an assignment of attributes
from the private key to nodes of the tree such that the
tree is satis(cid:12)ed. We use the same notation as [15] to
describe the access trees, even though in our case the
attributes are used to identify the keys (as opposed to
the data).
Access tree T . Let T be a tree representing an ac-
cess structure. Each non-leaf node of the tree repre-
sents a threshold gate, described by its children and
If numx is the number of chil-
a threshold value.
dren of a node x and kx is its threshold value, then
0 < kx (cid:20) numx. When kx = 1, the threshold gate is
an OR gate and when kx = numx, it is an AND gate.
Each leaf node x of the tree is described by an attribute
and a threshold value kx = 1.
To facilitate working with the access trees, we de(cid:12)ne
a few functions. We denote the parent of the node x
in the tree by parent(x). The function att(x) is de(cid:12)ned
only if x is a leaf node and denotes the attribute asso-
ciated with the leaf node x in the tree. The access tree
T also de(cid:12)nes an ordering between the children of ev-
ery node, that is, the children of a node are numbered
from 1 to num. The function index(x) returns such
a number associated with the node x. Where the in-
dex values are uniquely assigned to nodes in the access
structure for a given key in an arbitrary manner.
Satisfying an access tree. Let T be an access tree
with root r. Denote by Tx the subtree of T rooted at
the node x. Hence T is the same as Tr.
If a set of
attributes (cid:13) satis(cid:12)es the access tree Tx, we denote it as
Tx((cid:13)) = 1. We compute Tx((cid:13)) recursively as follows.
If x is a non-leaf node, evaluate Tx0 ((cid:13)) for all children
x0 of node x. Tx((cid:13)) returns 1 if and only if at least
If x is a leaf node, then Tx((cid:13))
kx children return 1.
returns 1 if and only if att(x) 2 (cid:13).
4.2 Our Construction
Let G0 be a bilinear group of prime order p, and let
g be a generator of G0. In addition, let e : G0 (cid:2) G0 !
G1 denote the bilinear map. A security parameter, (cid:20),
will determine the size of the groups. We also de(cid:12)ne
the Lagrange coe(cid:14)cient (cid:1)i;S for i 2 Zp and a set, S,
x(cid:0)j
of elements in Zp: (cid:1)i;S(x) = Qj2S;j6=i
i(cid:0)j . We will
additionally employ a hash function H : f0; 1g(cid:3) ! G0
that we will model as a random oracle. The function
will map any attribute described as a binary string to
a random group element. Our construction follows.
Setup. The setup algorithm will choose a bilinear
group G0 of prime order p with generator g. Next
it will choose two random exponents (cid:11); (cid:12) 2 Zp. The
public key is published as:
PK = G0; g; h = g(cid:12); f = g1=(cid:12); e(g; g)(cid:11)
and the master key MK is ((cid:12); g(cid:11)). (Note that f is used
only for delegation.)
Encrypt(PK; M; T ). The encryption algorithm en-
crypts a message M under the tree access structure T .
The algorithm (cid:12)rst chooses a polynomial qx for each
node x (including the leaves) in the tree T . These
polynomials are chosen in the following way in a top-
down manner, starting from the root node R. For each
node x in the tree, set the degree dx of the polynomial
qx to be one less than the threshold value kx of that
node, that is, dx = kx (cid:0) 1.
Starting with the root node R the algorithm chooses
a random s 2 Zp and sets qR(0) = s. Then, it chooses
dR other points of the polynomial qR randomly to
de(cid:12)ne it completely. For any other node x, it sets
qx(0) = qparent(x)(index(x)) and chooses dx other points
randomly to completely de(cid:12)ne qx.
Let, Y be the set of leaf nodes in T . The ciphertext
is then constructed by giving the tree access structure
T and computing
CT = (cid:0)T ; ~C = M e(g; g)(cid:11)s; C = hs;
8y 2 Y : Cy = gqy(0); C 0
y = H(att(y))qy(0)(cid:1):
KeyGen(MK; S). The key generation algorithm
will take as input a set of attributes S and output a
key that identi(cid:12)es with that set. The algorithm (cid:12)rst
chooses a random r 2 Zp, and then random rj 2 Zp
for each attribute j 2 S. Then it computes the key as
SK = (cid:0)D = g((cid:11)+r)=(cid:12);
8j 2 S : Dj = gr (cid:1) H(j)rj ; D0
j = grj(cid:1):
Delegate(SK; ~S). The delegation algorithm takes in
a secret key SK, which is for a set S of attributes, and
another set ~S such that ~S (cid:18) S. The secret key is of
the form SK = (D; 8j 2 S : Dj; D0
j). The algorithm
chooses random ~r and ~rk8k 2 ~S. Then it creates a new
secret key as
~SK = ( ~D = Df ~r;
8k 2 ~S :
~Dk = Dkg ~rH(k)~rk ; ~D0
k = D0
kg ~rk ):
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:20 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007The resulting secret key ~SK is a secret key for the
set ~S. Since the algorithm re-randomizes the key, a
delegated key is equivalent to one received directly from
the authority.
Decrypt(CT; SK). We specify our decryption pro-
cedure as a recursive algorithm. For ease of exposition
we present the simplest form of the decryption algo-
rithm and discuss potential performance improvements
in the next subsection.
de(cid:12)ne
algorithm
DecryptNode(CT; SK; x) that takes as input a ci-
phertext CT = (T ; ~C; C; 8y 2 Y : Cy; C 0
y), a private
key SK, which is associated with a set S of attributes,
and a node x from T .
recursive
(cid:12)rst
We
a
If the node x is a leaf node then we let i = att(x)
and de(cid:12)ne as follows: If i 2 S, then
DecryptNode(CT; SK; x) =
e(Di; Cx)
e(D0
i; C 0
x)
=
e(cid:0)gr (cid:1) H(i)ri ; hqx(0)(cid:1)
e(gri ; H(i)qx(0))
= e(g; g)rqx(0):
If i =2 S, then we de(cid:12)ne DecryptNode(CT; SK; x) = ?.
We now consider the recursive case when x is a
non-leaf node. The algorithm DecryptNode(CT; SK; x)
then proceeds as follows: For all nodes z that are chil-
dren of x, it calls DecryptNode(CT; SK; z) and stores
the output as Fz. Let Sx be an arbitrary kx-sized set
of child nodes z such that Fz 6= ?. If no such set ex-
ists then the node was not satis(cid:12)ed and the function
returns ?.
Otherwise, we compute
(0)
i;S
0
x
(cid:1)
z
F
;
where
i=index(z)
S
0
x=findex(z):z2Sxg
(e(g; g)r(cid:1)qz (0))
(cid:1)
i;S
0
x
(0)
(e(g; g)r(cid:1)qparent(z)(index(z)))
(cid:1)
i;S
0
x
(0)
(by construction)
e(g; g)
r(cid:1)qx(i)(cid:1)(cid:1)
(0)
i;S
0
x
Fx = Yz2Sx
= Yz2Sx
= Yz2Sx
= Yz2Sx
= e(g; g)r(cid:1)qx(0)
(using polynomial interpolation)
and return the result.
have
de(cid:12)ned
Now that we
function
DecryptNode, we can de(cid:12)ne the decryption algo-
rithm. The algorithm begins by simply calling the
function on the root node R of the tree T . If the tree is
satis(cid:12)ed by S we set A = DecryptNode(CT; SK; r) =
our
e(g; g)rqR(0) = e(g; g)rs. The algorithm now decrypts
by computing
~C=(e(C; D)=A) = ~C=(cid:16)e(cid:16)hs; g((cid:11)+r)=(cid:12)(cid:17) =e(g; g)rs(cid:17) = M:
4.3 Discussion
We now provide a brief discussion about the security
intuition for our scheme (a full proof is given in Ap-
pendix A), our scheme’s e(cid:14)ciency, and how we might
handle key revocation.
Security intuition. As in previous attribute-based
encryption schemes the main challenge in designing our
scheme was to prevent against attacks from colluding
users. Like the scheme of Sahai and Waters [24] our
solution randomizes users private keys such that they
cannot be combined; however, in our solution the secret
sharing must be embedded into the ciphertext instead
to the private keys.
In order to decrypt an attacker
clearly must recover e(g; g)(cid:11)s. In order to do this the
attacker must pair C from the ciphertext with the D
component from some user’s private key. This will re-
sult in the desired value e(g; g)(cid:11)s, but blinded by some
value e(g; g)rs. This value can be blinded out if and
only if enough the user has the correct key compo-
nents to satisfy the secret sharing scheme embedded in
the ciphertext. Collusion attacks won’t help since the
blinding value is randomized to the randomness from
a particular user’s private key.
While we described our scheme to be secure against
chosen plaintext attacks, the security of our scheme
can e(cid:14)ciently be extended to chosen ciphertext at-
tacks by applying a random oracle technique such as
that of the the Fujisaki-Okamoto transformation [13].
Alternatively, we can leverage the delegation mecha-
nism of our scheme and apply the Cannetti, Halevi,
and Katz [10] method for achieving CCA-security.
E(cid:14)ciency. The e(cid:14)ciencies of the key generation and
encryption algorithms are both fairly straightforward.
The encryption algorithm will require two exponentia-
tions for each leaf in the ciphertext’s access tree. The
ciphertext size will include two group elements for each
tree leaf. The key generation algorithm requires two
exponentiations for every attribute given to the user,
and the private key consists of two group elements for
every attribute. In its simplest form, the decryption al-
gorithm could require two pairings for every leaf of the
access tree that is matched by a private key attribute