### Leveraging Defragmentation Cache Poisoning for DNS Subversion

#### 2.1 Overview of the Attack
Defragmentation cache poisoning is a technique that exploits the reassembly of fragmented IP packets to inject malicious payloads into DNS responses. In this method, a spoofed second fragment containing a malicious payload is combined with an authentic first fragment, bypassing the challenge-response authentication mechanisms used by DNS resolvers.

**Figure 1: Defragmentation Cache Poisoning for Subverting DV**
- **Victim Domain**: `vict.im`

The malicious second fragment, when reassembled with the authentic first fragment, is passed to the DNS software. The software then determines whether to cache the records or ignore them based on its caching logic. This attack was successfully launched against a real Certificate Authority (CA) using a patched Bind9 resolver (New BIND 9.x with DNSSEC).

#### 2.2 Defragmentation Cache Poisoning
The core idea of the attack is to convince the victim nameserver to fragment its responses to a specific destination. To achieve this, the attacker reduces the Maximum Transmission Unit (MTU) from the server to the CA. The off-path attacker sends an ICMP "fragmentation needed" packet to the nameserver, indicating that it should reduce the MTU when sending packets to the victim resolver (of the CA).

After reducing the MTU, the attacker tricks the receiving resolver into reassembling the first fragment of the real response from the nameserver with the second fragment generated by the attacker. This allows the attacker to bypass the challenge-response authentication fields used by the DNS resolvers, as these fields are echoed in the first fragment.

**Steps Involved:**
1. **Measurement and Calculation**: The attacker measures the sizes of the responses from the nameserver of `vict.im` and calculates the offset where fragmentation should occur. The MTU in the ICMP fragmentation needed error message is set accordingly to ensure that the records to be replaced with spoofed records are in the second fragment.
2. **Spoofed Second Fragment**: The attacker sends a spoofed second fragment to the victim DNS resolver. This fragment is cached by the receiving resolver, waiting for the remaining fragments to arrive.
3. **CSR Form Upload**: The attacker uploads a Certificate Signing Request (CSR) form requesting certification for the victim domain. The attacker selects an email-based Domain Validation (DV).
4. **ICMP Fragmentation Needed Packet**: The attacker issues an ICMP fragmentation needed packet to ensure that the response is fragmented. This can also be issued before step (1).
5. **Fragmented DNS Response**: The nameserver of the victim sends a fragmented DNS response. The first fragment contains entropy (resolver’s source port and TXID) and some of the DNS payload. The question, answer, authoritative, and additional sections are split between the first and second fragments. The first fragment is reassembled with the spoofed second fragment, which leaves the cache and is passed to the UDP layer. The legitimate second fragment will not have any first fragment to reassemble with, as the legitimate first fragment has already been reassembled with the spoofed second fragment and left the buffer.
6. **Completion of DV Process**: The remaining steps (6)-(8) complete the DV process.

**Note**: When sending the spoofed fragment, the attacker must ensure the correctness of the UDP checksum and IP ID.

#### 2.3 Overwriting Cached Records
The next task is to ensure that the records sent in the spoofed DNS response are cached and served in responses to applications and clients. Often, the records will already be present in the cache. Techniques from [12] are used to overwrite the cached record with new values. The attack in our demo is launched against a patched new BIND 9.x with DNSSEC, focusing on the caching logic of BIND.

**Example Scenarios:**
- **Not Cached**:
  - Query: MX? `victim-org.info`
  - Answer: `victim-org.info` MX `exchanger0.victim-org.info`
  - Query: A? `exchanger0.victim-org.info`
  - Answer: `exchanger0.victim-org.info` A `198.22.162.189`
  - **Attacker Changes This IP to**: `199.244.49.220`

- **Cached**:
  - Query: MX? `victim-org.info`
  - Answer: `victim-org.info` MX `exchanger0.victim-org.info`
  - Query: A? `exchanger0.victim-org.info`
  - Answer: `exchanger0.victim-org.info` A `198.22.162.189`
  - Authority: `victim-org.info` NS `ns0.victim-org.info`
  - Additional: `ns0.victim-org.info` A `198.22.162.189`
  - **Attacker Changes Last Two Records**:
    - `victim-org.info` NS `ns000.attacker.info`
    - `ns000.attacker.info` A `199.244.49.220`

#### 2.4 Validating Success
To determine if the attack succeeded, an off-path attacker cannot directly measure a state change in a remote cache. Instead, success is measured indirectly by inspecting the records arriving at the attacker’s host. Once the record with malicious mappings is injected into the cache of the CA’s DNS resolver, the remainder of the DV process will be performed against the attacker’s IP addresses rather than the victim domain. By inspecting the queries at the attacker’s host (IP `199.244.49.220`), the attacker can identify when the attack is successful. After successfully passing the DV, the attacker will receive the fraudulent certificate to their own email address.

### 3. Conclusions
We provide a real-life proof-of-concept attack against the Public Key Infrastructure (PKI). Our attack utilizes DNS cache poisoning with a weak off-path attacker to issue fraudulent certificates for domains the attacker does not own. Since the deployment of [RFC5452] recommendations in 2008, DNS cache poisoning was believed to be only a theoretical threat, reducing the motivation to adopt more systematic cryptographic protection with DNSSEC.

Our work is the first since 2008 to weaponize DNS cache poisoning with an off-path attacker and leverage it against the web PKI. Our demonstration runs an attack against a large and popular CA. Although more popular CAs are vulnerable, as seen in [1], we argue that even a single vulnerable CA (trusted by browsers and operating systems) is sufficient to subvert web security, leading to devastating consequences for Internet clients and services.

### Acknowledgements
This research was supported in part by the German Federal Ministry of Education and Research (BMBF), the Hessian Ministry of Science and the Arts within CRISP (www.crisp-da.de/), and co-funded by the DFG as part of project S3 within the CRC 1119 CROSSING.

### References
[1] Markus Brandt, Tianxiang Dai, Amit Klein, Haya Shulman, and Michael Waidner. 2018. Domain Validation++ For MitM-Resilient PKI. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security.
...
[14] Haya Shulman and Michael Waidner. 2017. One Key to Sign Them All Considered Vulnerable: Evaluation of DNSSEC in the Internet.. In NSDI. 131–144.

**Poster Presentation: CCS’18, October 15-19, 2018, Toronto, ON, Canada**