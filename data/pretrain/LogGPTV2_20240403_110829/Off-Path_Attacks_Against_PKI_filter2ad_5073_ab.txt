leverages defragmentation cache poisoning, with a spoofed second
Figure 1: Defragmentation cache poisoning for subverting
DV; in the illustration we use vict.im as victim domain.
fragment that contains malicious payload. Once the malicious sec-
ond fragment is reassembled with the authentic first fragment, the
payload is passed on to the DNS software. The software examines
the records, and based on its caching logic determines whether to
cache the records or to ignore them. We show how we launched the
attack with the steps above against a real CA, which uses a patched
Bind9 resolver: New BIND 9.x with DNSSEC.
2.2 Defragmentation Cache Poisoning
The idea of the attack is that the attacker “convinces” the (vic-
tim) nameserver to fragment responses to a specific destination.
To cause fragmentation the attacker has to reduce the Maximum
Transmission Unit (MTU) from the server to the CA. To do this our
off-path attacker issues an ICMP fragmentation needed packet to
the nameserver, indicating that it should reduce the MTU when
sending packets to the victim resolver (of the CA).
After reducing the MTU we trick the receiving resolver into
reassembling the first fragment of the real response from the name-
server with the second fragment generated by the attacker. This
allows us to bypass the challenge-response authentication fields
used by the DNS resolvers, since they are echoed by the nameserver
in the first fragment.
We first perform a measurement and a calculation, needed for
setting the values in the ICMP fragmentation needed error message
in step (4) (Figure 1) and based on which the attacker constructs
the spoofed second fragment in step (1) (Figure 1). The attacker
measures the responses’ sizes from the nameserver of vict.im
and calculates the offset where the fragmentation should occur.
The MTU in the ICMP fragmentation needed error message is set
accordingly. The goal is to ensure that the records, which it will
replace with spoofed records, are in the second fragment.
The attack proceeds as illustrated in Figure 1. In step (1) the at-
tacker sends to the victim DNS resolver a spoofed second fragment.
The fragment is cached by the receiving resolver in the IP defrag-
mentation cache waiting for the remaining fragments to arrive. In
step (2) the attacker uploads a CSR form requesting certification
for victim domain. The attacker selects an email based DV, hence
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada2214in step (3) the DNS resolver at the CA issues a DNS request to
the nameserver of victim domain asking for an IP address of the
email server. The attacker issues an ICMP fragmentation needed
packet in step (4) to ensure that the response is fragmented; this
ICMP error message can be issued also before step (1). In step (5)
the nameserver of the victim sends a fragmented DNS response.
The first fragment contains the entropy (resolver’s source port and
TXID are copied by the nameserver to the response) and some of the
DNS payload. The question, answer, authoritative and additional
sections are split between the first and the second fragment. The
first fragment is then reassembled with the spoofed second frag-
ment that was already in the cache of the DNS resolver; they both
leave the cache, and are passed on to the UDP layer. The legitimate
second fragment will not have any first fragment to reassemble
with, since when it arrives the legitimate first fragment has already
been reassembled with the spoofed second fragment and left the
buffer. The remaining steps (6)-(8) complete the DV process.
Notice that in step (1) when sending the spoofed fragment the
attacker needs to ensure the correctness of UDP checksum and IP
ID.
2.3 Overwriting Cached Records
Next, the task is to ensure that the records (sent in the spoofed DNS
response) are cached and served in responses to applications and
clients. Often the records will already be present in the cache. We
use the techniques in [12] to overwrite the cached record with new
values. The attack in our demo is launched against a patched new
BIND 9.x with DNSSEC, hence we focus on the caching logic of
BIND.
// CASE - NOT CACHED //
Query: MX? victim-org.info
Answer: victim-org.info MX exchanger0.victim-org.info
Query: A? exchanger0.victim-org.info
Answer: exchanger0.victim-org.info A 198.22.162.189
// Attacker changes this IP to 199.244.49.220
// CASE - CACHED //
Query: MX? victim-org.info
Answer: victim-org.info MX exchanger0.victim-org.info
Query: A? exchanger0.victim-org.info
Answer: exchanger0.victim-org.info A 198.22.162.189
Authority: victim-org.info NS ns0.victim-org.info
Additional: ns0.victim-org.info A 198.22.162.189
// Attacker changes last two records
// victim-org.info NS ns000.attacker.info
// ns000.attacker.info A 199.244.49.220
2.4 Validating Success
How can we know if the attack succeeded? An off-path attacker
cannot measure a state change in a remote cache. We measure the
success of the attack indirectly, by inspecting the records arriving
at the attacker’s host. Specifically, once the record with malicious
mappings is injected into the cache of the CA’s DNS resolver, the
remainder of DV will be performed against attacker’s IP addresses
and not against the victim domain. Hence, by inspecting the queries
at the attacker’s host at IP 199.244.49.220 we identify when the
attack is successful. Subsequently, after successfully passing the
DV, the attacker will also receive the fraudulent certificate to its
own email address.
3 CONCLUSIONS
We provide a real life proof of concept attack against PKI. Our
attack is launched with the weak off-path attacker and utilises DNS
cache poisoning to issue fraudulent certificates which the attacker
does not own. After deployment of [RFC5452] recommendations
in 2008 DNS cache poisoning was believed to be only a theoretical
threat. This also reduced the motivation to adopt more systematic
cryptographic protection with DNSSEC.
Our work is the first since 2008 to weaponise DNS cache poi-
soning with an off-path attacker, and to leverage cache poisoning
against an application of interest - the web PKI. Our demonstration
runs an attack against a large and popular CA. Although more
popular CAs are vulnerable, e.g., see [1], we argue that even a
single vulnerable CA (trusted by the browsers and operating sys-
tems) is sufficient for subverting web security with devastating
consequences for Internet clients and services.
ACKNOWLEDGEMENTS
The research reported in this paper was supported in part by the
German Federal Ministry of Education and Research (BMBF), by the
Hessian Ministry of Science and the Arts within CRISP (www.crisp-
da.de/) and co-funded by the DFG as part of project S3 within the
CRC 1119 CROSSING.
REFERENCES
[1] Markus Brandt, Tianxiang Dai, Amit Klein, Haya Shulman, and Michael Waidner.
2018. Domain Validation++ For MitM-Resilient PKI. In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security.
[2] Taejoong Chung, Roland van Rijswijk-Deij, Balakrishnan Chandrasekaran, David
Choffnes, Dave Levin, Bruce M Maggs, Alan Mislove, and Christo Wilson. 2017.
A longitudinal, end-to-end view of the DNSSEC ecosystem. In USENIX Security.
[3] Tianxiang Dai, Haya Shulman, and Michael Waidner. 2016. DNSSEC Miscon-
figurations in Popular Domains. In International Conference on Cryptology and
Network Security. Springer, 651–660.
[4] Zakir Durumeric, Eric Wustrow, and J Alex Halderman. 2013. ZMap: Fast Internet-
wide Scanning and Its Security Applications.. In USENIX Security Symposium,
Vol. 8. 47–53.
[5] P. Eckersley and J. Burns. 2010. An observatory for the SSLiverse. DEFCON’18.
(2010).
[6] Amir Herzberg and Haya Shulman. 2012. Security of Patched DNS. In Computer
Security - ESORICS 2012 - 17th European Symposium on Research in Computer
Security, Pisa, Italy, September 10-12, 2012. Proceedings. 271–288.
[7] Amir Herzberg and Haya Shulman. 2013. Fragmentation considered poisonous,
or: One-domain-to-rule-them-all. org. In Communications and Network Security
(CNS), 2013 IEEE Conference on. IEEE, 224–232.
[8] Amir Herzberg and Haya Shulman. 2013. Socket Overloading for Fun and Cache
Poisoning. In ACM Annual Computer Security Applications Conference (ACM
ACSAC), New Orleans, Louisiana, U.S., Charles N. Payne Jr. (Ed.).
[9] Amir Herzberg and Haya Shulman. 2013. Vulnerable Delegation of DNS Resolu-
tion. In Computer Security - ESORICS 2013 - 18th European Symposium on Research
in Computer Security, Egham, UK, September 9-13, 2013. Proceedings. 219–236.
https://doi.org/10.1007/978-3-642-40203-6_13
[10] Dan Kaminsky. 2008. It’s the End of the Cache As We Know It. In Black Hat con-
ference. http://www.blackhat.com/presentations/bh-jp-08/bh-jp-08-Kaminsky/
BlackHat-Japan-08-Kaminsky-DNS08-BlackOps.pdf.
[11] Amit Klein, Haya Shulman, and Michael Waidner. 2017. Counting in the Dark:
Caches Discovery and Enumeration in the Internet. In The 47th IEEE/IFIP Inter-
national Conference on Dependable Systems and Networks (DSN).
[12] Amit Klein, Haya Shulman, and Michael Waidner. 2017. Internet-Wide Study of
DNS Cache Injections. In INFOCOM.
[13] Haya Shulman and Michael Waidner. 2014. Fragmentation Considered Leaking:
Port Inference for DNS Poisoning. In Applied Cryptography and Network Security
(ACNS), Lausanne, Switzerland. Springer.
[14] Haya Shulman and Michael Waidner. 2017. One Key to Sign Them All Considered
Vulnerable: Evaluation of DNSSEC in the Internet.. In NSDI. 131–144.
Poster PresentationCCS’18, October 15-19, 2018, Toronto, ON, Canada2215