### 3.2.2 Anonymous Blocks

Blocks in PL/SQL can be nested, and the exception section may also contain nested blocks. The following is the simplest possible block, which consists of a `NULL` statement within the executable section. The `NULL` statement is an executable statement that does nothing.

```sql
BEGIN
    NULL;
END;
```

The next example shows a block with a declaration section and an executable section. Three numeric variables are declared, values are assigned to two of them, and one number is divided by the other, storing the result in a third variable, which is then displayed.

```sql
DECLARE
    v_numerator NUMBER(2);
    v_denominator NUMBER(2);
    v_result NUMBER(5,2);
BEGIN
    v_numerator := 75;
    v_denominator := 14;
    v_result := v_numerator / v_denominator;
    DBMS_OUTPUT.PUT_LINE(v_numerator || ' divided by ' || v_denominator || ' is ' || v_result);
END;
```

If executed, the output would be:

```
75 divided by 14 is 5.36
```

The following block includes a declaration section, an executable section, and an exception section. This block handles a division by zero error by executing the statement within the exception section.

```sql
DECLARE
    v_numerator NUMBER(2);
    v_denominator NUMBER(2);
    v_result NUMBER(5,2);
BEGIN
    v_numerator := 75;
    v_denominator := 0;
    v_result := v_numerator / v_denominator;
    DBMS_OUTPUT.PUT_LINE(v_numerator || ' divided by ' || v_denominator || ' is ' || v_result);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An exception occurred');
END;
```

The output in this case would be:

```
An exception occurred
```

### 3.2.2.1 Overview of Anonymous Blocks

Blocks are typically written as part of a procedure, function, subprogram, or trigger. Procedures, functions, and triggers are named and stored in the database for re-use. For quick, one-time execution (such as testing), you can enter the block without providing a name or storing it in the database. Such a block is called an anonymous block. An anonymous block is unnamed and not stored in the database. Once the block has been executed and erased from the application buffer, it cannot be re-executed unless the block code is re-entered into the application.

To run a block of code repeatedly without re-entering the code each time, an anonymous block can be turned into a procedure or function with some simple modifications. The following sections discuss how to create a procedure or function that can be stored in the database and invoked repeatedly by another procedure, function, or application program.

### 3.2.3 Procedures Overview

Procedures are standalone SPL programs that are invoked or called as individual SPL program statements. When called, procedures may optionally receive values from the caller in the form of input parameters and optionally return values to the caller in the form of output parameters.

#### 3.2.3.1 Creating a Procedure

The `CREATE PROCEDURE` command defines and names a standalone procedure that will be stored in the database. If a schema name is included, the procedure is created in the specified schema; otherwise, it is created in the current schema. The name of the new procedure must not match any existing procedure with the same input argument types in the same schema. However, procedures of different input argument types may share a name (this is called overloading).

To update the definition of an existing procedure, use `CREATE OR REPLACE PROCEDURE`. It is not possible to change the name or argument types of a procedure this way (if you tried, you would actually be creating a new, distinct procedure). When using `OUT` parameters, you cannot change the types of any `OUT` parameters except by dropping the procedure.

```sql
CREATE [OR REPLACE] PROCEDURE name [ (parameters) ]
[
IMMUTABLE
| STABLE
| VOLATILE
| DETERMINISTIC
| [ NOT ] LEAKPROOF
| CALLED ON NULL INPUT
| RETURNS NULL ON NULL INPUT
| STRICT
| [ EXTERNAL ] SECURITY INVOKER
| [ EXTERNAL ] SECURITY DEFINER
| AUTHID DEFINER
| AUTHID CURRENT_USER
| PARALLEL { UNSAFE | RESTRICTED | SAFE }
| COST execution_cost
| ROWS result_rows
| SET configuration_parameter
{ TO value | = value | FROM CURRENT }
...]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
    statements
END [ name ];
```

- **name**: The identifier of the procedure.
- **parameters**: A list of formal parameters.
- **declarations**: Variable, cursor, type, or subprogram declarations. If subprogram declarations are included, they must be declared after all other variable, cursor, and type declarations.
- **statements**: SPL program statements (the `BEGIN - END` block may contain an `EXCEPTION` section).

**Attributes:**

- **IMMUTABLE**: Indicates that the procedure cannot modify the database and always reaches the same result when given the same argument values.
- **STABLE**: Indicates that the procedure cannot modify the database and will consistently return the same result for the same argument values within a single table scan.
- **VOLATILE**: Indicates that the procedure value can change even within a single table scan, so no optimizations can be made. This is the default behavior.
- **DETERMINISTIC**: Synonym for `IMMUTABLE`.
- **[ NOT ] LEAKPROOF**: A `LEAKPROOF` procedure has no side effects and reveals no information about the values used to call the procedure.
- **CALLED ON NULL INPUT**: The default, indicating that the procedure will be called normally when some of its arguments are `NULL`.
- **RETURNS NULL ON NULL INPUT** or **STRICT**: Indicates that the procedure always returns `NULL` whenever any of its arguments are `NULL`.
- **[ EXTERNAL ] SECURITY DEFINER**: Specifies that the procedure will execute with the privileges of the user that created it.
- **[ EXTERNAL ] SECURITY INVOKER**: Indicates that the procedure will execute with the privileges of the user that calls it.
- **AUTHID DEFINER**: Synonym for `[EXTERNAL] SECURITY DEFINER`.
- **AUTHID CURRENT_USER**: Synonym for `[EXTERNAL] SECURITY INVOKER`.
- **PARALLEL { UNSAFE | RESTRICTED | SAFE }**: Enables the use of parallel sequential scans.
- **COST execution_cost**: A positive number giving the estimated execution cost for the procedure.
- **ROWS result_rows**: A positive number giving the estimated number of rows that the planner should expect the procedure to return.
- **SET configuration_parameter { TO value | = value | FROM CURRENT }**: Sets the specified configuration parameter to the specified value when the procedure is entered, and restores it to its prior value when the procedure exits.

**Example:**

A simple procedure that takes no parameters:

```sql
CREATE OR REPLACE PROCEDURE simple_procedure
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('That''s all folks!');
END simple_procedure;
```

This procedure is stored in the database by entering the procedure code in Advanced Server.

Another example demonstrates using the `AUTHID DEFINER` and `SET` clauses in a procedure declaration. The `update_salary` procedure conveys the privileges of the role that defined the procedure to the role that is calling the procedure (while the procedure executes):

```sql
CREATE OR REPLACE PROCEDURE update_salary(id INT, new_salary NUMBER)
SET SEARCH_PATH = 'public' SET WORK_MEM = '1MB'
AUTHID DEFINER IS
BEGIN
    UPDATE emp SET salary = new_salary WHERE emp_id = id;
END;
```

The `SET` clause sets the procedure's search path to `public` and the work memory to `1MB`. Other procedures, functions, and objects will not be affected by these settings.

#### 3.2.3.2 Calling a Procedure

A procedure can be invoked from another SPL program by specifying the procedure name followed by its parameters, if any, followed by a semicolon.

```sql
name [ ([ parameters ]) ];
```

- **name**: The identifier of the procedure.
- **parameters**: A list of actual parameters.

**Example:**

Calling the `simple_procedure` from an anonymous block:

```sql
BEGIN
    simple_procedure;
END;
```

Output:

```
That's all folks!
```

Each application has its own unique way to call a procedure. For example, in a Java application, the application programming interface (JDBC) is used.

#### 3.2.3.3 Deleting a Procedure

A procedure can be deleted from the database using the `DROP PROCEDURE` command.

```sql
DROP PROCEDURE [ IF EXISTS ] name [ (parameters) ]
[ CASCADE | RESTRICT ];
```

- **name**: The name of the procedure to be dropped.

**Example:**

Dropping the previously created `simple_procedure`:

```sql
DROP PROCEDURE simple_procedure;
```

### 3.2.4 Functions Overview

Functions are standalone SPL programs that are invoked as expressions. When evaluated, a function returns a value that is substituted in the expression in which the function is embedded. Functions may optionally take values from the calling program in the form of input parameters. In addition to returning a value, a function may optionally return additional values to the caller in the form of output parameters. However, the use of output parameters in functions is not an encouraged programming practice.

#### 3.2.4.1 Creating a Function

The `CREATE FUNCTION` command defines and names a standalone function that will be stored in the database. If a schema name is included, the function is created in the specified schema; otherwise, it is created in the current schema. The name of the new function must not match any existing function with the same input argument types in the same schema. However, functions of different input argument types may share a name (this is called overloading).

To update the definition of an existing function, use `CREATE OR REPLACE FUNCTION`. It is not possible to change the name or argument types of a function this way (if you tried, you would actually be creating a new, distinct function). Also, `CREATE OR REPLACE FUNCTION` will not let you change the return type of an existing function. To do that, you must drop and recreate the function. When using `OUT` parameters, you cannot change the types of any `OUT` parameters except by dropping the function.

```sql
CREATE [ OR REPLACE ] FUNCTION name [ (parameters) ]
RETURN data_type
[
IMMUTABLE
| STABLE
| VOLATILE
| DETERMINISTIC
| [ NOT ] LEAKPROOF
| CALLED ON NULL INPUT
| RETURNS NULL ON NULL INPUT
| STRICT
| [ EXTERNAL ] SECURITY INVOKER
| [ EXTERNAL ] SECURITY DEFINER
| AUTHID DEFINER
| AUTHID CURRENT_USER
| PARALLEL { UNSAFE | RESTRICTED | SAFE }
| COST execution_cost
| ROWS result_rows
| SET configuration_parameter
{ TO value | = value | FROM CURRENT }
...]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
    statements
END [ name ];
```

- **name**: The identifier of the function.
- **parameters**: A list of formal parameters.
- **data_type**: The data type of the value returned by the function’s `RETURN` statement.

**Example:**

Creating a simple function that takes no parameters and returns a string:

```sql
CREATE OR REPLACE FUNCTION simple_function
RETURN VARCHAR2
IS
BEGIN
    RETURN 'Hello, World!';
END simple_function;
```

This function is stored in the database by entering the function code in Advanced Server.