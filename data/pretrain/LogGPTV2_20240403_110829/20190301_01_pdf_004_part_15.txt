blocks may be nested. The exception section may also contain nested blocks.
The following is the simplest possible block consisting of the NULL statement within the
executable section. The NULL statement is an executable statement that does nothing.
BEGIN
NULL;
END;
The following block contains a declaration section as well as the executable section.
DECLARE
v_numerator NUMBER(2);
v_denominator NUMBER(2);
v_result NUMBER(5,2);
BEGIN
v_numerator := 75;
v_denominator := 14;
v_result := v_numerator / v_denominator;
DBMS_OUTPUT.PUT_LINE(v_numerator || ' divided by ' || v_denominator ||
' is ' || v_result);
END;
In this example, three numeric variables are declared of data type NUMBER. Values are
assigned to two of the variables, and one number is divided by the other, storing the
results in a third variable which is then displayed. If executed, the output would be:
75 divided by 14 is 5.36
The following block consists of a declaration, an executable, and an exception:
DECLARE
v_numerator NUMBER(2);
v_denominator NUMBER(2);
v_result NUMBER(5,2);
BEGIN
v_numerator := 75;
v_denominator := 0;
v_result := v_numerator / v_denominator;
DBMS_OUTPUT.PUT_LINE(v_numerator || ' divided by ' || v_denominator ||
' is ' || v_result);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An exception occurred');
END;
The following output shows that the statement within the exception section is executed as
a result of the division by zero.
An exception occurred
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 130
Database Compatibility for Oracle® Developers Guide
3.2.2 Anonymous Blocks
Blocks are typically written as part of a procedure, function, subprogram, or trigger.
Procedure, function, and trigger programs are named and stored in the database for re-
use. For quick (one-time) execution (such as testing), you can simply enter the block
without providing a name or storing it in the database.
A block of this type is called an anonymous block. An anonymous block is unnamed and
is not stored in the database. Once the block has been executed and erased from the
application buffer, it cannot be re-executed unless the block code is re-entered into the
application.
Typically, the same block of code will be re-executed many times. In order to run a block
of code repeatedly without the necessity of re-entering the code each time, with some
simple modifications, an anonymous block can be turned into a procedure or function.
The following sections discuss how to create a procedure or function that can be stored in
the database and invoked repeatedly by another procedure, function, or application
program.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 131
Database Compatibility for Oracle® Developers Guide
3.2.3 Procedures Overview
Procedures are standalone SPL programs that are invoked or called as an individual SPL
program statement. When called, procedures may optionally receive values from the
caller in the form of input parameters and optionally return values to the caller in the
form of output parameters.
3.2.3.1 Creating a Procedure
The CREATE PROCEDURE command defines and names a standalone procedure that will
be stored in the database.
If a schema name is included, then the procedure is created in the specified schema.
Otherwise it is created in the current schema. The name of the new procedure must not
match any existing procedure with the same input argument types in the same schema.
However, procedures of different input argument types may share a name (this is called
overloading). (Overloading of procedures is an Advanced Server feature - overloading of
stored, standalone procedures is not compatible with Oracle databases.)
To update the definition of an existing procedure, use CREATE OR REPLACE
PROCEDURE. It is not possible to change the name or argument types of a procedure this
way (if you tried, you would actually be creating a new, distinct procedure). When using
OUT parameters, you cannot change the types of any OUT parameters except by dropping
the procedure.
CREATE [OR REPLACE] PROCEDURE name [ (parameters) ]
[
IMMUTABLE
| STABLE
| VOLATILE
| DETERMINISTIC
| [ NOT ] LEAKPROOF
| CALLED ON NULL INPUT
| RETURNS NULL ON NULL INPUT
| STRICT
| [ EXTERNAL ] SECURITY INVOKER
| [ EXTERNAL ] SECURITY DEFINER
| AUTHID DEFINER
| AUTHID CURRENT_USER
| PARALLEL { UNSAFE | RESTRICTED | SAFE }
| COST execution_cost
| ROWS result_rows
| SET configuration_parameter
{ TO value | = value | FROM CURRENT }
...]
{ IS | AS }
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 132
Database Compatibility for Oracle® Developers Guide
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statements
END [ name ];
Where:
name
name is the identifier of the procedure.
parameters
parameters is a list of formal parameters.
declarations
declarations are variable, cursor, type, or subprogram declarations. If
subprogram declarations are included, they must be declared after all other
variable, cursor, and type declarations.
statements
statements are SPL program statements (the BEGIN - END block may contain
an EXCEPTION section).
IMMUTABLE
STABLE
VOLATILE
These attributes inform the query optimizer about the behavior of the procedure;
you can specify only one choice. VOLATILE is the default behavior.
IMMUTABLE indicates that the procedure cannot modify the database and always
reaches the same result when given the same argument values; it does not do
database lookups or otherwise use information not directly present in its argument
list. If you include this clause, any call of the procedure with all-constant
arguments can be immediately replaced with the procedure value.
STABLE indicates that the procedure cannot modify the database, and that within a
single table scan, it will consistently return the same result for the same argument
values, but that its result could change across SQL statements. This is the
appropriate selection for procedures that depend on database lookups, parameter
variables (such as the current time zone), etc.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 133
Database Compatibility for Oracle® Developers Guide
VOLATILE indicates that the procedure value can change even within a single
table scan, so no optimizations can be made. Please note that any function that
has side-effects must be classified volatile, even if its result is quite predictable, to
prevent calls from being optimized away.
DETERMINISTIC
DETERMINISTIC is a synonym for IMMUTABLE. A DETERMINISTIC
procedure cannot modify the database and always reaches the same result when
given the same argument values; it does not do database lookups or otherwise use
information not directly present in its argument list. If you include this clause,
any call of the procedure with all-constant arguments can be immediately
replaced with the procedure value.
[ NOT ] LEAKPROOF
A LEAKPROOF procedure has no side effects, and reveals no information about the
values used to call the procedure.
CALLED ON NULL INPUT
RETURNS NULL ON NULL INPUT
STRICT
CALLED ON NULL INPUT (the default) indicates that the procedure will be called
normally when some of its arguments are NULL. It is the author's responsibility to
check for NULL values if necessary and respond appropriately.
RETURNS NULL ON NULL INPUT or STRICT indicates that the procedure always
returns NULL whenever any of its arguments are NULL. If these clauses are
specified, the procedure is not executed when there are NULL arguments; instead a
NULL result is assumed automatically.
[ EXTERNAL ] SECURITY DEFINER
SECURITY DEFINER specifies that the procedure will execute with the privileges
of the user that created it; this is the default. The key word EXTERNAL is allowed
for SQL conformance, but is optional.
[ EXTERNAL ] SECURITY INVOKER
The SECURITY INVOKER clause indicates that the procedure will execute with the
privileges of the user that calls it. The key word EXTERNAL is allowed for SQL
conformance, but is optional.
AUTHID DEFINER
AUTHID CURRENT_USER
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 134
Database Compatibility for Oracle® Developers Guide
The AUTHID DEFINER clause is a synonym for [EXTERNAL] SECURITY
DEFINER. If the AUTHID clause is omitted or if AUTHID DEFINER is specified,
the rights of the procedure owner are used to determine access privileges to
database objects.
The AUTHID CURRENT_USER clause is a synonym for [EXTERNAL] SECURITY
INVOKER. If AUTHID CURRENT_USER is specified, the rights of the current user
executing the procedure are used to determine access privileges.
PARALLEL { UNSAFE | RESTRICTED | SAFE }
The PARALLEL clause enables the use of parallel sequential scans (parallel mode).
A parallel sequential scan uses multiple workers to scan a relation in parallel
during a query in contrast to a serial sequential scan.
When set to UNSAFE, the procedure cannot be executed in parallel mode. The
presence of such a procedure forces a serial execution plan. This is the default
setting if the PARALLEL clause is omitted.
When set to RESTRICTED, the procedure can be executed in parallel mode, but
the execution is restricted to the parallel group leader. If the qualification for any
particular relation has anything that is parallel restricted, that relation won't be
chosen for parallelism.
When set to SAFE, the procedure can be executed in parallel mode with no
restriction.
COST execution_cost
execution_cost is a positive number giving the estimated execution cost for
the procedure, in units of cpu_operator_cost. If the procedure returns a set,
this is the cost per returned row. Larger values cause the planner to try to avoid
evaluating the function more often than necessary.
ROWS result_rows
result_rows is a positive number giving the estimated number of rows that the
planner should expect the procedure to return. This is only allowed when the
procedure is declared to return a set. The default assumption is 1000 rows.
SET configuration_parameter { TO value | = value | FROM CURRENT }
The SET clause causes the specified configuration parameter to be set to the
specified value when the procedure is entered, and then restored to its prior value
when the procedure exits. SET FROM CURRENT saves the session's current value
of the parameter as the value to be applied when the procedure is entered.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 135
Database Compatibility for Oracle® Developers Guide
If a SET clause is attached to a procedure, then the effects of a SET LOCAL
command executed inside the procedure for the same variable are restricted to the
procedure; the configuration parameter's prior value is restored at procedure exit.
An ordinary SET command (without LOCAL) overrides the SET clause, much as it
would do for a previous SET LOCAL command, with the effects of such a
command persisting after procedure exit, unless the current transaction is rolled
back.
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the procedure as
an autonomous transaction.
Note: The STRICT, LEAKPROOF, PARALLEL, COST, ROWS and SET keywords provide
extended functionality for Advanced Server and are not supported by Oracle.
Note: By default, stored procedures are created as SECURITY DEFINERS, but when
written in plpgsql, the stored procedures are created as SECURITY INVOKERS.
Example
The following is an example of a simple procedure that takes no parameters.
CREATE OR REPLACE PROCEDURE simple_procedure
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('That''s all folks!');
END simple_procedure;
The procedure is stored in the database by entering the procedure code in Advanced
Server.
The following example demonstrates using the AUTHID DEFINER and SET clauses in a
procedure declaration. The update_salary procedure conveys the privileges of the
role that defined the procedure to the role that is calling the procedure (while the
procedure executes):
CREATE OR REPLACE PROCEDURE update_salary(id INT, new_salary NUMBER)
SET SEARCH_PATH = 'public' SET WORK_MEM = '1MB'
AUTHID DEFINER IS
BEGIN
UPDATE emp SET salary = new_salary WHERE emp_id = id;
END;
Include the SET clause to set the procedure's search path to public and the work
memory to 1MB. Other procedures, functions and objects will not be affected by these
settings.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 136
Database Compatibility for Oracle® Developers Guide
In this example, the AUTHID DEFINER clause temporarily grants privileges to a role that
might otherwise not be allowed to execute the statements within the procedure. To
instruct the server to use the privileges associated with the role invoking the procedure,
replace the AUTHID DEFINER clause with the AUTHID CURRENT_USER clause.
3.2.3.2 Calling a Procedure
A procedure can be invoked from another SPL program by simply specifying the
procedure name followed by its parameters, if any, followed by a semicolon.
name [ ([ parameters ]) ];
Where:
name is the identifier of the procedure.
parameters is a list of actual parameters.
Note: If there are no actual parameters to be passed, the procedure may be called with an
empty parameter list, or the opening and closing parenthesis may be omitted entirely.
Note: The syntax for calling a procedure is the same as in the preceding syntax diagram
when executing it with the EXEC command in PSQL or EDB*Plus. See the Database
Compatibility for Oracle Developers Tools and Utilities Guide for information about the
EXEC command.
The following is an example of calling the procedure from an anonymous block:
BEGIN
simple_procedure;
END;
That's all folks!
Note: Each application has its own unique way to call a procedure. For example, in a
Java application, the application programming interface, JDBC, is used.
3.2.3.3 Deleting a Procedure
A procedure can be deleted from the database using the DROP PROCEDURE command.
DROP PROCEDURE [ IF EXISTS ] name [ (parameters) ]
[ CASCADE | RESTRICT ];
Where name is the name of the procedure to be dropped.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 137
Database Compatibility for Oracle® Developers Guide
Note: The specification of the parameter list is required in Advanced Server under certain
circumstances such as if this is an overloaded procedure. Oracle requires that the
parameter list always be omitted.
Note: Usage of IF EXISTS, CASCADE, or RESTRICT is not compatible with Oracle
databases. See the DROP PROCEDURE command in the Database Compatibility for
Oracle Developers Reference Guide for information on these options.
The previously created procedure is dropped in this example:
DROP PROCEDURE simple_procedure;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 138
Database Compatibility for Oracle® Developers Guide
3.2.4 Functions Overview
Functions are standalone SPL programs that are invoked as expressions. When evaluated,
a function returns a value that is substituted in the expression in which the function is
embedded. Functions may optionally take values from the calling program in the form of
input parameters. In addition to the fact that the function, itself, returns a value, a
function may optionally return additional values to the caller in the form of output
parameters. The use of output parameters in functions, however, is not an encouraged
programming practice.
3.2.4.1 Creating a Function
The CREATE FUNCTION command defines and names a standalone function that will be
stored in the database.
If a schema name is included, then the function is created in the specified schema.
Otherwise it is created in the current schema. The name of the new function must not
match any existing function with the same input argument types in the same schema.
However, functions of different input argument types may share a name (this is called
overloading). (Overloading of functions is an Advanced Server feature - overloading of
stored, standalone functions is not compatible with Oracle databases.)
To update the definition of an existing function, use CREATE OR REPLACE FUNCTION.
It is not possible to change the name or argument types of a function this way (if you
tried, you would actually be creating a new, distinct function). Also, CREATE OR
REPLACE FUNCTION will not let you change the return type of an existing function. To
do that, you must drop and recreate the function. Also when using OUT parameters, you
cannot change the types of any OUT parameters except by dropping the function.
CREATE [ OR REPLACE ] FUNCTION name [ (parameters) ]
RETURN data_type
[
IMMUTABLE
| STABLE
| VOLATILE
| DETERMINISTIC
| [ NOT ] LEAKPROOF
| CALLED ON NULL INPUT
| RETURNS NULL ON NULL INPUT
| STRICT
| [ EXTERNAL ] SECURITY INVOKER
| [ EXTERNAL ] SECURITY DEFINER
| AUTHID DEFINER
| AUTHID CURRENT_USER
| PARALLEL { UNSAFE | RESTRICTED | SAFE }
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 139
Database Compatibility for Oracle® Developers Guide
| COST execution_cost
| ROWS result_rows
| SET configuration_parameter
{ TO value | = value | FROM CURRENT }
...]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statements
END [ name ];
Where:
name
name is the identifier of the function.
parameters
parameters is a list of formal parameters.
data_type
data_type is the data type of the value returned by the function’s RETURN
statement.