title:ATTACK2VEC: Leveraging Temporal Word Embeddings to Understand the
Evolution of Cyberattacks
author:Yun Shen and
Gianluca Stringhini
AttAck2vec: Leveraging Temporal Word Embeddings 
to Understand the Evolution of Cyberattacks
Yun Shen, Symantec Research Labs; Gianluca Stringhini, Boston University
https://www.usenix.org/conference/usenixsecurity19/presentation/shen
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.ATTACK2VEC: Leveraging Temporal Word Embeddings to
Understand the Evolution of Cyberattacks
Yun Shen
Symantec Research Labs
PI:EMAIL
Gianluca Stringhini
Boston University
PI:EMAIL
Abstract
Despite the fact that cyberattacks are constantly growing in
complexity, the research community still lacks effective tools
to easily monitor and understand them. In particular, there is a
need for techniques that are able to not only track how promi-
nently certain malicious actions, such as the exploitation of
speciﬁc vulnerabilities, are exploited in the wild, but also (and
more importantly) how these malicious actions factor in as
attack steps in more complex cyberattacks. In this paper we
present ATTACK2VEC, a system that uses temporal word em-
beddings to model how attack steps are exploited in the wild,
and track how they evolve. We test ATTACK2VEC on a dataset
of billions of security events collected from the customers of a
commercial Intrusion Prevention System over a period of two
years, and show that our approach is effective in monitoring
the emergence of new attack strategies in the wild and in ﬂag-
ging which attack steps are often used together by attackers
(e.g., vulnerabilities that are frequently exploited together).
ATTACK2VEC provides a useful tool for researchers and prac-
titioners to better understand cyberattacks and their evolution,
and use this knowledge to improve situational awareness and
develop proactive defenses.
1 Introduction
Modern cyberattacks have reached high levels of complexity.
An attacker who is trying to compromise a computer sys-
tem has to perform a number of attack steps to achieve her
goal [16], including reconnaissance (i.e., identifying weak-
nesses on the victim machine), the actual exploitation, and
installing mechanisms to ensure persistence (e.g., installing a
remote access trojan (RAT) on the machine [10]). Moreover,
getting access to the victim machine might not be enough
for attackers to achieve what they want, therefore they might
have to perform additional attack steps (e.g., exploiting an-
other vulnerability to escalate privileges [36]). Additionally,
for each of the attack steps that compose the attack, attack-
ers have a choice of executing a variety of malicious actions
(e.g., exploiting different known vulnerabilities on the victim
system), depending on the exploits that they have available,
on the software conﬁguration of the victim machine, and on
its security hygiene (i.e., which known vulnerabilities on it
have not been patched).
Previous research studied how attack steps (e.g., speciﬁc
Common Vulnerabilities and Exposures (CVEs) being ex-
ploited) evolve and are used in isolation [5, 33, 39]. While
doing so is useful to understand how prominently certain
attack steps are exploited in the wild, it does not tell us any-
thing on how these attack steps are used as part of complex
cyberattacks. Instead, looking at attack steps in relation to
each other can provide researchers and practitioners with
invaluable insights into the modus operandi of attackers, high-
lighting important trends in the way attacks are conducted.
In this paper, we deﬁne the sequence of attack steps that are
commonly performed together with an attack step of interest
as its context.
Understanding the context in which a vulnerability is ex-
ploited in the wild as well as detecting when this context
suddenly changes can be very useful for researchers, to bet-
ter understand the modus operandi of attackers, to improve
situational awareness in organizations, and to develop more
proactive defenses. For example, when a new CVE is pub-
lished, attackers will start attempting to exploit it, and in this
process they will ﬁrst try a number of strategies. Eventually,
once an attacker will succeed in developing an attack that
reliably compromises machines, we will observe this strategy
being consistently exploited in the wild, potentially because
this consolidated attack was commoditized and added to an
exploit kit for multiple attackers to use [12]. This information
is useful for defenders, since it allows to design better miti-
gation strategies that take into account the entire attack, and
it can possibly also be used for attack attribution, since the
same attacker often uses similar strategies to carry out their
attacks [38].
However, attack strategies are not stable over time, because
new defenses might be deployed that make them ineffective
(e.g., vulnerabilities getting patched), or simply because the
USENIX Association
28th USENIX Security Symposium    905
attackers might develop more efﬁcient strategies. Looking
at the context of an attack step (e.g., a particular CVE) can
help identifying these sudden changes in the way attacks are
performed, and prompt proactive defenses. For example, a
number of systems have been proposed that use supervised
learning to detect attacks [4, 13, 14, 41]. These systems typi-
cally need periodic retraining due to the fact that the evolution
of attacks over time makes the model that the system was
trained on obsolete [18]. Having a system able to track sig-
niﬁcant changes in the context associated to a security event
could be used to perform a timely retraining of such systems.
To model the context of an attack step, in this paper we
adapt techniques that have been proposed in the area of natural
language processing. Word embeddings [30, 35] are a power-
ful tool for modeling relationships between words. This tech-
nique represents words with low-dimensional vectors based
on the surrounding words that appear in the same sentence
(i.e., the context). These vectors are able to capture the con-
text of a word and its relationship with the other words, allow-
ing researchers to understand the way in which words are used
in various types of language (e.g., on social media [8]). In a
similar way, we can calculate the embedding of an attack step
by considering the entire attack sequence as a sentence, and
each step as a word. Upon encoding the relationship between
attack steps within the vector space, we can quantitatively
study the attack steps appearing in similar contexts in the
latent space and understand them in a more meaningful and
measurable way.
As a proxy for the attack steps performed by attackers in
the wild, we use the security alerts generated by a commercial
Intrusion Prevention System (IPS), collected over a period of
two years. Throughout this observation period, we collect 102
snapshots on a weekly basis. Each snapshot contains over 190
million alerts collected from tens of millions unique machines.
Each alert is indicative of the attack step that is performed
by an attacker, and our dataset contains over 8k possible alert
types, spanning from port scans to exploits for speciﬁc CVEs.
Similar data was used in our previous work, which showed
that, although a proxy (e.g., they can only monitor attacks
for which a detection signature exists), these alerts are useful
to study the behavior of attackers in the wild [40]. In the
remainder of the paper, we deﬁne each alert generated by the
IPS a security event.
We implement our approach in a system, ATTACK2VEC.
Our system takes a stream of security events and computes
their context by using temporal word embeddings. By running
ATTACK2VEC on our data, we show that our approach is able
to effectively monitor how security events are exploited in the
wild. For example, we can identify when a certain CVE starts
getting exploited, when its exploitation becomes stable, and
when attackers change strategy in exploiting it. By leveraging
the similarity between the context of different security events,
we can infer which events are often used as part of the same
malicious campaign, and this allows us to identify emerging
attacks in a more timely manner than the state of the art. For
example, we were able to identify a variant of the Mirai botnet
that was scanning the Internet attempting to exploit a CVE
relative to Apache Struts, together with IoT-related exploits
over 72 weeks before this variant was ofﬁcially identiﬁed.
These ﬁndings show that ATTACK2VEC can be an effective
tool for researchers and practitioners who need to understand
how security events are exploited in the wild and react to
sudden changes.
In summary, this paper makes the following contributions:
• We show that temporal word embeddings are an effective
way to study how attack steps are exploited in the wild
and how they evolve.
• We show how ATTACK2VEC can be used to understand
the emergence, the evolution, and the characteristics of
attack steps in relation to the wider context in which they
are exploited.
• We discuss how ATTACK2VEC can be effectively used
to identify emerging attack campaigns several weeks
before they are publicly disclosed.
2 Motivation
This paper presents the ﬁrst approach to characterize not only
single security events, but the context in which they are used
in the wild. The problem of characterizing the evolution of
security events, however, is a complex one and presents mul-
tiple challenges. To illustrate its complexity, consider the
real-world example in Figure 1, showing several machines un-
dergoing two coordinated attacks across time, C1 and C2. Both
attacks leverage the attack step e11, “CVE-2018-7602 Drupal
core RCE.” C1: {e4, e10, e11, e12} mainly functions as a recon-
naissance attack including “Joomla JCE security bypass and
XSS vulnerabilities” (e4), “Wordpress RevSlider/ShowBiz
security byPass” (e10) and “Symposium plugin shell upload”
(e12), together with e11. C2: {e7, e5, e11, e6}, is an attack tar-
geted at the Drupal ecosystem, consisting of “phpMyAdmin
RFI CVE-2018-12613” (e7), “Drupal SQL Injection CVE-
2014-3704” (e5), and “Apache Flex BlazeDS RCE CVE-2017-
3066” (e6), and the aforementioned e11. Our goal is to develop
a system that allows to automatically analyze the context in
which e11 is exploited, and identify changing trends.
The ﬁrst challenge that we can immediately notice from
Figure 1 is that even though the machines at a certain times-
tamp are going through the same type of attack (e.g., C1 at
ti), there are no obvious event relationships reﬂected in the
telemetry recorded by the IPS due to noise (e.g., other secu-
rity events not related to the coordinated attack observed, or
certain events relating to the coordinated attack being not ob-
served). If we take the IPS data recorded at timestamp ti, it is
not trivial to understand how e11 is leveraged by the attackers
by directly inspecting the security events, what attack vectors
906    28th USENIX Security Symposium
USENIX Association
Figure 1: A real-world example of security event evolution. Over time, e11 evolves from being an “add-on” reconnaissance vector
to part of a targeted attack on the Drupal ecosystem.
are used together with e11, etc. Additionally, it is worth noting
that not all security events may be observed in a given obser-
vation period. For example, e7 is not observed until timestamp
t j.
The second challenge is that attacks change over time, con-
sequently, the context of a security event and its relationship
with other attack steps may drift. It is possible that C1 and C2
can be operated by the same attackers, and that at some point
they changed their attack scripts to leverage newly disclosed
vulnerabilities (i.e., , phpMyAdmin RFI CVE-2018-12613
(e7)). As we can see in Figure 1, from timestamp ti to t j attack
C1 gradually migrated to or was replaced by attack C2. How-
ever, it is difﬁcult to determine if these new relationships (e.g.,
e11 starting to appear in close proximity of e5) at timestamp
tk with respect to those of timestamp ti are due to noise or
are actually indicators of a change in the way e11 is being
used in the wild. Considering all these temporal factors, it is
desirable to have a model that is able to understand the con-
text of a security event and its changes over time, and whose
output can be quantitatively measured and studied. This is
what ATTACK2VEC aims to do.
Problem formulation. We formalize our temporal security
event evolution approach as follows. A security event ei ∈ E
is a timestamped observation recorded at timestamp i, where
E denotes the set of all unique events and |E| denotes the
size of E. A security event sequence observed in an endpoint
s j is a sequence of events ordered by their observation time,
z} denote the
s j = {e( j)
set of the security events from z endpoints during the t-th
observation period. Finally we denote S = {S1, ..., St , ..., ST},
t = 1, ...,T , as the total security events over time T . It is
worth noting that not all security events may be observed in a
given St. For example, security events associated with CVEs
reported in 2018 are not present in the set of security events
collected in 2017. Our goal is to ﬁnd a mapping function
M(ei, S,T ) → {ηt
ei ∈ Rd, d (cid:28) |E|
denotes a d-dimensional vector representation of the security
ei}, where t = 1, ...,T and ηt
l }. Let St = {st
1 ,e( j)
2 , ...,e( j)
1, ...,st
i, ...,st
Figure 2: The distribution of events in our IPS security event
dataset follows a power-law, much like the distribution of
words in natural language, conﬁrming the appropriateness of
word embeddings to study the evolution of the use of security
events over time.
event ei at timestamp t. In the next section, we describe the
data used in this paper in more detail. Then, in Section 4 we
describe the methodology used by ATTACK2VEC.
3 Dataset
Data origin. As a proxy for the attack steps performed by mis-
creants in the wild, we use security event data collected from
Symantec’s intrusion prevention system (IPS). The company
offers end users to explicitly opt in to its data sharing program
to help improving its detection capabilities. To preserve the
anonymity of users, endpoint identiﬁers are anonymized and
it is not possible to link the collected data back to the users
that originated it. Meta-information associated with a security
event is recorded when the product detects network-level or
system-level activity that matches a predeﬁned signature (i.e.,
a security event).
Data collection. To thoroughly investigate security event evo-
lution, we collected 102 days (one observation day per week