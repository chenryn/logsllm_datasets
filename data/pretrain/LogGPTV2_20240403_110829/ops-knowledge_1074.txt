To redeploy a Google App Engine (GAE) application, I currently need to install the GAE deployment tools on each system that will be used for deployment. While this process is relatively straightforward, it is manual and does not function behind a firewall. Additionally, the deployment tools must be installed on every machine that will be used for updating GAE applications.

A more ideal solution would be to update a GAE application from another GAE application that has already been deployed. This would eliminate the need to configure multiple systems for app deployment. Since the GAE deployment tools are written in Python and the GAE supports Python, I am wondering if it is possible to modify `appcfg.py` to work within a GAE environment. The use case would involve pulling a project from GitHub or another online repository and updating one GAE application from another.

If this is not possible, what are the limiting constraints?

### Constraints and Workarounds

1. **File System Access**:
   - One of the primary constraints is that you cannot write files directly into a GAE application. Even if you could pull the project from a version control system (VCS), you wouldn't be able to write those files to the GAE file system. Therefore, updates would still need to be initiated from outside the GAE environment.

2. **SDK Requirement**:
   - Every machine that needs to update the GAE application should have the SDK installed to ensure that changes work as expected. This requirement makes it necessary to have the SDK on any system performing the update.

### Alternative Solutions

1. **Host an "Updater" Site**:
   - You can host your own "updater" site and install the GAE SDK there. When you need to update, you can log into this site (or run a script) to perform the remote update. This approach centralizes the update process and reduces the need to configure multiple machines.

2. **Use Amazon EC2**:
   - Although I am not deeply familiar with Amazon EC2, it is likely that you can achieve a similar setup. You can create an EC2 instance, install the GAE SDK, and set up a script to handle the update process. This way, you can manage updates from a single, centralized location.

3. **Automated Scripts and Authentication**:
   - The password for updating the GAE application typically needs to be entered manually. However, since the GAE SDK is open source, you might be able to modify it to handle automated authentication. This could involve using OAuth tokens or other secure methods to automate the update process.

By implementing one of these solutions, you can streamline the deployment process and reduce the overhead of configuring multiple systems.