# Practical, Real-time Centralized Control for CDN-based Live Video Delivery

## Authors
- Matthew K. Mukerjee (Carnegie Mellon University)
- David Naylor (Carnegie Mellon University)
- Junchen Jiang (Carnegie Mellon University)
- Dongsu Han (KAIST)
- Srinivasan Seshan (Carnegie Mellon University)
- Hui Zhang (Carnegie Mellon University, Conviva Inc.)

## Abstract
Live video delivery is expected to reach a peak of 50 Tbps this year [7]. This surge in popularity is fundamentally changing the Internet video delivery landscape. Content Delivery Networks (CDNs) must meet users' demands for fast join times, high bitrates, and low buffering ratios while minimizing their own delivery costs and responding to issues in real-time. Challenges such as wide-area latency, loss, and failures, as well as varied workloads (from "mega-events" to long-tail content), make meeting these demands difficult.

An analysis of video sessions [32] concluded that a centralized controller could improve user experience. However, CDNs have avoided such designs due to the difficulty of quickly handling failures [29], a requirement for both operators and users. We introduce VDN, a practical approach to a video delivery network that uses a centralized algorithm for live video optimization. VDN provides CDN operators with real-time, fine-grained control. It addresses challenges resulting from the wide-area (e.g., state inconsistency, partitions, failures) by using a hybrid centralized+distributed control plane. In different scenarios, VDN increases average bitrate by 1.7× and decreases cost by 2×.

## CCS Concepts
- Networks → Traffic engineering algorithms; Overlay and other logical network structures

## Keywords
- Live video, CDNs, central optimization, hybrid control

## Introduction
The demand for live video is increasing by 4–5× every three years, and the live video peak streaming rate is expected to reach 50 Tbps this year [7]. This demand spans various types of videos (professionally-produced and user-generated) and workloads (from "mega-events" to long-tail content). For example, the 2014 World Cup, a recent live video mega-event, used traditional CDNs to deliver live streams totaling several terabits per second [38], estimated to be 40% of all Internet traffic during that time [37]. At the other extreme, 55 million Twitch users [4] watch more than 150 billion minutes of live video each month, generated by over 1 million users, making it the fourth largest Internet traffic producer in the US [5, 41].

The diversity and volume of live video delivery present a complex challenge for modern content delivery infrastructures. Users demand high quality, instant start-up (join) times, and low buffering ratios [10]. CDNs aim to meet these demands while minimizing delivery costs and responding to issues in real-time [35]. Additionally, operating over the wide-area network environment requires designs that handle common latency variations and communication failures.

Traditional solutions, such as traffic engineering, work on traffic aggregates at coarse timescales. However, users' demands for high per-stream quality and CDNs' need for fast failure recovery require control over individual streams at fine timescales. Overlay multicast systems [12, 14, 26, 30] focus on individual stream optimization but overlook the many concurrent, independent, high-bandwidth streams in today's environment. Internet-scale, video-specific systems like Conviva’s C3 [19] use client-side analytics to pick the best CDN for a given client at a given time but ignore the actual data delivery. Although current CDNs provide good video quality, a previous analysis of a large collection of video sessions [32] concluded that a centralized video controller algorithm could greatly improve end-user experience. Despite this, traditional CDNs have shied away from centralized designs due to the difficulty of providing good performance while quickly handling failures in the wide area [29].

To address these challenges, we propose VDN, a new system that allows CDN operators to dynamically control both stream placement and restrict bitrates automatically, at a very fine timescale in a WAN environment. VDN uses a centralized algorithm that performs end-to-end optimization of live stream routing. The centralized algorithm is part of a larger VDN framework that mitigates WAN challenges with a hybrid approach, balancing the benefits of centralized control with the resilience and responsiveness of distributed control.

We evaluate VDN using traces of real video sessions from multiple live content providers and a WAN testbed. Our results show that VDN provides a 1.7× improvement in average bitrate and reduces delivery costs by 2× compared to current CDNs. We scale VDN to 10,000 videos and demonstrate its ability to react at a timescale of 200 ms.

### Contributions
- A centralized algorithm based on integer programming that coordinates delivery to provide high-quality live video streaming at scale while giving control "knobs" to operators to balance cost and quality.
- A responsive live video delivery framework that minimizes join time and mitigates WAN challenges using a hybrid centralized+distributed control plane.

## Motivation

### Setting
**CDN Background:**
We focus on optimizing CDNs for HTTP-based live video delivery. Each entity on the video delivery path can be independently optimized (e.g., clients in Conviva’s C3 [19]), but our focus is on CDN optimization.

**Live Video:**
Live video is particularly challenging due to the lack of caching and buffering within the delivery network. In HTTP-based live streaming, a video is encoded at multiple pre-determined bitrates. Each stream is broken into chunks (2–10 seconds), which clients fetch independently via standard HTTP GETs. Clients adapt to network issues by fetching different bitrates [6].

**CDN Structure:**
Figure 2 presents the high-level structure of a CDN’s video delivery system [29, 35, 40]. Each node represents a cluster of co-located servers. A CDN’s internal network consists of three logical pieces: video sources, reflectors, and edge clusters. Each link has a delivery cost associated with it, typically more expensive for source/reflectors and less expensive for edge/AS links [2].

**CDNs and DNS:**
When clients resolve the name of a video stream, the CDN’s DNS-based client mapping service maps them to a nearby edge cluster based on factors like load and latency [35]. The end result is a distribution tree for each video from sources to edge clusters.

**Problems with Modern CDNs:**
Using DNS to map requests to the appropriate upstream cluster is natural, but it causes issues: 1) CDNs can't "push" updates to clusters and must wait for clusters to "pull" from DNS after a timeout period (DNS TTL); and 2) To reduce load on DNS, CDNs group different streams together, reducing granularity [29, 40]. CDNs update DNS mappings using heuristics, impacting performance.

**DNS TTLs:**
DNS relies on DNS clients (i.e., clusters) to ask for updates when cached DNS results expire (every ∼30 seconds) [40], preventing a central controller from sending updates as they are ready. Lowering the TTL would help approximate a "push"-based system but at the cost of a large increase in the number of DNS queries.

**Heuristic-based Mapping Algorithm:**
A monitoring system collects performance and load information and updates the DNS system every minute [35]. CDNs map end-users to edge clusters based on geography, load, and performance. The specific algorithm for mapping edge clusters to reflectors is not publicly known, but an analysis of video traces shows that global network views could provide major benefits for end-users [32].

### Design Goals
**Video-Specific Quality and Low Cost:**
VDN must optimize for video quality directly while considering its cost.

**Internet-Scale Video Delivery:**
VDN must support different types of workloads, from "mega-events" to "long tail" user channels, out to a target scale of 10,000 channels and 2000 edge clusters [17].

**Fine Timescale:**
VDN must provide fast join time (less than a second) and fast failure recovery, despite challenges in the wide area.

### Case for Centralized Optimization
Prior work has shown that a control plane designed around centralized optimization can provide great benefit [32]. Centralized coordination allows the consideration of all individual streams simultaneously, leading to better resource allocation. Figure 3 illustrates why stream coordination can lead to better resource allocation. Two video channels (C1 and C2) originate from a single source, S. The goal is to deliver C1 to AS A and C2 to B. Three possible distribution trees exist: T1, T2, and T3 (Figure 3a). We present two feasible distribution strategies in Figure 3b and c. In Figure 3b, the distribution strategy is suboptimal, while in Figure 3c, the strategy is optimal, demonstrating the benefits of centralized coordination.