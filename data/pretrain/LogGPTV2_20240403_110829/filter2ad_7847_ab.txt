第二种情况 只有一个压缩label
第三种情况前面由普通label表示，最后一个压缩label
将三种情况通过Choice组合在一起，Fuzz过程中，Peach会随机在Choice中挑选一个来执行,类似于C语言中的switch
Header中的QDCOUNT取决于Question的数量，同样用Relation处理
到此数据建模部分基本完结，有些地方处理的方式比较粗糙，希望多多指教
### StateModel
DNS协议通信比较简单,分别定义一个output跟input的action，这里我们不关心返回的结果，直接用Blob去匹配就行
## Publisher
Publisher是Peach
Fuzzer的IO接口，所有的数据都是经过Publisher来处理，Peach支持相当多种类的Publisher，如Udp、Tcp、RawSocket、CAN、File等等。DNS协议只要涉及到Tcp与Udp这两个,具体支持的参数可查阅官方文档
## Monitor
Monitor是Peach用来观察Fuzz对象状态的模块，Peach支持许多种类的Monitor,常用的有Ping Monitor、Socket
Monitor、TcpPort Monitor、Run Command等等
TCP比较好处理，在每轮循环结束的时候，检测目标端口，当为Closed的时候，生成Fault
由于不好检测Udp端口是否开放，因此可以采用Run Command来检测,每次循环结束，执行自定义脚本，确定dns服务器是否正常
monitor.py
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-"
    import dns.resolver
    myResolver = dns.resolver.Resolver()
    myResolver.nameservers = ['8.8.8.8']
    try:
        myAnswers = myResolver.query("www.baidu.com", "A",lifetime=2)
    except:
        exit(-1)
当自定义脚本返回值非0时，就认为产生错误
## 优化
Peach支持许多种类的变异器（Mutator)，但并不是所有的变异器都是我们想要使用的,可通过exclude去除掉不需要的变异器，相反地，也可以通过include指定变异器
## 测试
将dns.xml保存至pits目录下，开始执行Peach.exe pits/dns.xml  
dns.xml
Wireshark抓包观察到畸形报文  
## 完结
如果有不正确的地方，请各位大佬多多指点