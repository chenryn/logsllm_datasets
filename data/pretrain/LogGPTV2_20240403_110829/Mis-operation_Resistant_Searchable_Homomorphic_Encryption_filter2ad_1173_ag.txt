then the oracle updates the list by D ← D ∪ {C}.
revdk
eval
responds to a query (ID, C1, C2)
Next, we deﬁne the anonymity of KH-IBE (KH-ANON-CCA).
The security proof of KH-IBE and that of the Gentry IBE
scheme are essentially the same, except the evaluation or-
acle.
In the security model of KH-IBE (KH-IBE-CCA),
an adversary is allowed to issue evaluation queries even for
the challenge ciphertext, and such challenge-related cipher-
texts are not allowed to be inputs of the decryption oracle.
Though these evaluation queries do not contradict the KH-
IBE-CCA security of KH-IBE, they contradict anonymity.
That is, an adversary can always win the game if the adver-
sary is allowed to issue a ciphertext of the challenge identity
(either ID∗
1) since the evaluation oracle cannot help
returning ⊥ if the ciphertext is not computed by ID∗
b where
b ∈ {0, 1} is the challenge bit. So, we need to restrict such a
query as follows: the adversary sends a plaintext M and the
challenge-related ciphertext when the adversary would like
to obtain the evaluation result of the challenge-related ci-
phertext, and the oracle encrypts M by using ID∗
b , evaluates
these ciphertexts, and returns the result to the adversary.
Moreover, due to the same reason, the adversary is not al-
lowed to obtain homomorphic operation keys of ID∗
0 and ID∗
1.
Under these restrictions, the Gentry-based KH-IBE scheme
is anonymous.
0 or ID∗
227Deﬁnition 7.6
(KH-ANON-CCA). We say that a KH-
holds. Here,
IBE scheme is KH-ANON-CCA secure if for any PPT ad-
versary A, the advantage
c5 =e(g, h3)se(g, h4)sδ
KH-IBE,A
AdvKH-ANON-CCA
1, st) ← AO(ﬁnd, params);
(M ∗, ID∗
b $← {0, 1}; C ∗ ← IBE.Enc(params, ID∗
(κ) = (cid:12)(cid:12) Pr[(params, msk) ← IBE.Setup(1κ);
0, ID∗
b , M ∗);
1
b′ ← AO(guess, C ∗, st) : b = b′] −
2(cid:12)(cid:12)
is negligible in κ, where O consists of OKH-IBE
(params, msk,
·), OKH-IBE
(params,
·, ·, ·), and O′KH-IBE
(params, ·, ·, ·) which are deﬁned as fol-
lows. Let D be a list which is set as D = {C ∗} right after
the challenge stage (D is set as ∅ in the ﬁnd stage).
(params, msk, ·), OKH-IBE
(·, ·), OKH-IBE
revhk
revdk
eval
eval
dec
dec
revhk
revdk
0, ID∗
0, ID∗
1} with skd,ID where skd,ID is a part of (skd,ID, skh,ID)
The homomorphic operation key reveal oracle OKH-IBE
re-
sponds to a query ID ∈ ID \ {ID∗
1} with skh,ID where
skh,ID is a part of (skd,ID, skh,ID) ← IBE.KeyGen(params,
msk, ID).
The decryption oracle OKH-IBE
: For a query (ID, C) this ora-
cle responds to a query C with the result of IBE.Dec(skd,ID, C).
We remark that C ∈ D is allowed to be an input of this or-
acle. In this case, the input identity is not required.
The key generation oracle OKH-IBE
ID\{ID∗
← IBE.KeyGen(params, msk, ID).
The evaluation oracle OKH-IBE
where C1, C2 6∈ D, with the result of C ← IBE.Eval(skh,ID,
C1, C2).
The evaluation oracle for the challenge-related ciphertext O′KH-IBE
responds to a query (M, C), where M ∈ M and C ∈ D,
, C, C ′) where C ′ =
with the result of C ′′ ← IBE.Eval(skh,ID∗
IBE.Enc(params, ID∗
← is generated by ex-
b , M ) and skh,ID∗
ecuting IBE.KeyGen(params, msk, ID∗
b ). This oracle updates
the list by D ← D ∪ {C ′′}. We remark ID∗
b has been deter-
mined in the experiment if D 6= ⊥.
responds to a query (ID, C1, C2)
responds to a query ID ∈
eval
eval
b
b
A.2 Proofs of Theorems
First, we give the security proof of Theorem 3.1 (Consis-
tency). For the proof, we assume that the discrete logarithm
problem over G is hard. That is, given (g, h, G, GT , e, p)
where g, h $← G, it is computationally infeasible to compute
logg h ∈ Zp.
Proof : If either ω = α or ω′ = α, then we can immedi-
ately construct an algorithm that breaks the discrete log-
arithm problem (g, g1 := gα). From now on, we assume
that ω, ω′
6= α. Let C = (c1, c2, c3, c4, τ ) be a ciphertext
generated in the experiment, and for δ ← Γhk(c1, c2, c3, c4),
c5 ← e(g, h3)se(g, h4)sδ be a part of ciphertext such that τ =
f (c5) holds, where s is a random number which is used for
computing (c1, c2, c3, c4). Let c′
In the experiment, MR-SHE.Test(pk, tω′ , C) = 1 means ei-
ther (1) c5 = c′
5 := e(c1, hω′,3hδ
5 or (2) c5 6= c′
5 and τ = f (c′
ω′,4)c
5).
rω′ ,3+rω′ ,4δ
2
Case (1):
e(c1, hω′,3hδ
ω′,4)c
rω′ ,3+rω′ ,4δ
2
=e(g, h3)
α−ω
α−ω′ se(g, h4)
α−ω
α−ω′ sδe(g, g)s(rω′ ,3+δrω′ ,4)(1− α−ω
α−ω′ )
=e(g, h3)
α−ω
α−ω′ se(g, h4)
α−ω
α−ω′ sδe(g, g)s(rω′ ,3+δrω′ ,4)(1− α−ω
α−ω′ )
holds. Set A := α−ω
α−ω′ . Then,
s logg h3 + sδ logg h4
=As logg h3 + Asδ logg h4 + s(rω′,3 + δrω′,4)(1 − A)
holds. From this equation, we obtain
s(1 − A)(logg h3 + δ logg h4 − rω′,3 − δrω′,4) = 0
Since ω 6= ω′, 1 − A = 1 − α−ω
6= 0. Here, we can assume
α−ω′
that s 6= 0 since s $← Zp. Assume logg h3 + δ logg h4 −
rω′,3 − δrω′,4 = 0 holds. Then, since logg h3 = −δ logg h4 +
rω′,3 + δrω′,4 we can construct an algorithm that breaks
the discrete logarithm problem as follows. Let (g, h3) be
an instance of the discrete logarithm problem. Then, the
algorithm setups the scheme with one exception that choose
u $← Zp and set h4 = gu. Then, the algorithm can compute
logg h3 = −δu + rω′,3 + δrω′,4. That is, the probability that
the case (1) happens is negligible.
Case (2): The probability that the case (2) happens is
negligible since f is a smooth function.
As a remark, tω′ is honestly generated in the deﬁnition of
consistency. Thus, the probability that MR-SHE.Test(pk, tω′ ,
C) = 1 for a ciphertext C associated with ω where ω 6= ω′ is
negligible. In other word, there exist a trapdoor that breaks
consistency, where logg h3 + δ logg h4 − rω′,3 − δrω′,4 = 0
holds. Since we consider computational security, this does
not contradict consistency.
Next, we give the security proofs of Theorem 3.2 (Data
privacy) and 3.3 (Keyword privacy). Intuitively, Data pri-
vacy directly holds since the underlying KH-IBE scheme is
KH-ID-CCA secure, and the deﬁnition of data privacy and
that of KH-ID-CCA is essentially the same. Similarly, key-
word privacy also directly holds if the underlying KH-IBE
scheme is anonymous. Since the KH-IBE scheme is KH-
ID-CCA and KH-ANON-CCA secure under the truncated
decision q-ABDHE (augmented bilinear Diﬃe-Hellman ex-
ponent) assumption [19], our scheme also relies on the same
assumption. We prove two lemmas where, for data pri-
vacy and keyword privacy, MR-SHE can be constructed from
anonymous KH-IBE in a (almost) generic way. That is, we
trapdoor can be simulated by OKH-IBE
need to conﬁrm that OMR-SHE
.
revhk
In our scheme, for a OMR-SHE
returns
skh,ω = ((rω,3, hω,3), (rω,4, hω,4)). After obtaining skh,ω,
the simulator can compute tω such that tω = (gω, skh,ω).
Thus, in the following proofs, we assume that OMR-SHE
trapdoor can
be simulated by OKH-IBE
trapdoor query ω, OKH-IBE
revhk
.
revhk
.
Lemma 7.1. If the underlying KH-IBE scheme is KH-
ID-CCA secure, then the MR-SHE scheme is data private.
Proof. Let A be an adversary of the data privacy of MR-
SHE. We construct an algorithm B that breaks KH-ID-CCA
security of KH-IBE as follows. Let C be the challenger of
the KH-ID-CCA game of KH-IBE.
228First, C runs (params, msk) ← IBE.Setup(1k), and gives
params to B, and B forwards params to A as pk.
When A issues OMR-SHE
revhk
, OMR-SHE
dec
, OMR-SHE
trapdor , and OMR-SHE
eval
queries, B simulates the oracles by using OKH-IBE
OKH-IBE
dec
oracles of KH-IBE, respectively.
, and OKH-IBE
, OKH-IBE
revhk
revhk
For a OMR-SHE
test
eval
query (ω, C), if ω has been input to OMR-SHE
trapdoor ,
,
then B directly returns the result of MR-SHE.Test(pk, tω, C).
Otherwise, if ω is not input OMR-SHE
trapdoor and if the challenge
keyword ω∗ is not given by A, then B should not obtain the
corresponding tω since ω might be ω∗. Thus, B computes
a ciphertext C ′ ← IBE.Enc(params, ω, M ) for a random M ,
and sends (ω, C, C ′) to C as a OKH-IBE
query. If the response
is ⊥, then C is not associated with ω. Thus, B returns 0 to A.
Otherwise, B returns 1 to A. If B can recognize ω 6= ω∗, i.e.,
after the challenge kerword is given by A, then B can simply
send ω as a OKH-IBE
query, obtains skh,ω, computes tω from
skh,ω, and returns the result of MR-SHE.Test(pk, tω, C).
revhk
dec
0 , M ∗
0 , M ∗
A sends (ω∗, M ∗
1 ) to B as the challenge of MR-SHE.
B forwards (ω∗, M ∗
1 ) to C as the challenge of KH-IBE,
obtains the challenge ciphertext C ∗, and returns C ∗ to A.
B responds queries issued by A as in the previous phase.
Finally, A outputs a bit b′. B outputs b′, and can break the
KH-ID-CCA security with the same advantage of breaking
the data privacy.
Lemma 7.2. If the underlying KH-IBE scheme is KH-
ANON-CCA secure, then the MR-SHE scheme is keyword
private.
Proof. Let A be an adversary of the keyword privacy
of MR-SHE. We construct an algorithm B that breaks KH-
ANON-CCA security of KH-IBE as follows. Let C be the
challenger of the KH-ANON-CCA game of KH-IBE.
First, C runs (params, msk) ← IBE.Setup(1k), and gives
params to B, and B forwards params to A as pk.
When A issues OMR-SHE
and O′MR-SHE
, OKH-IBE
OKH-IBE
cles of KH-IBE, respectively.
eval
, OKH-IBE
revhk
revhk
dec
revhk
, OMR-SHE
trapdor , OMR-SHE
,
queries, B simulates the oracles by using
ora-
, and O′KH-IBE
, OMR-SHE
, OKH-IBE
eval
dec
eval
eval
For a OMR-SHE
test
query (ω, C), if ω has been input to OMR-SHE
trapdoor ,
then B directly returns the result of MR-SHE.Test(pk, tω, C).
Otherwise, if ω is not input OMR-SHE
trapdoor and if the challenge
keyword ω∗ is not given by A, then B should not obtain the
corresponding tω since ω might be ω∗. Thus, B computes
a ciphertext C ′ ← IBE.Enc(params, ω, M ) for a random M ,
and sends (ω, C, C ′) to C as a OKH-IBE
query. If the response
is ⊥, then C is not associated with ω. Thus, B returns 0 to A.
Otherwise, B returns 1 to A. If B can recognize ω 6= ω∗, i.e.,
after the challenge kerword is given by A, then B can simply
send ω as a OKH-IBE
query, obtains skh,ω, computes tω from
skh,ω, and returns the result of MR-SHE.Test(pk, tω, C).
revhk
dec
0 , ω∗
0 , ω∗
1 , M ∗) to B as the challenge of MR-SHE.
A sends (ω∗
B forwards (ω∗
1 , M ∗) to C as the challenge of KH-IBE,
obtains the challenge ciphertext C ∗, and returns C ∗ to A.
B responds queries issued by A as in the previous phase.
Finally, A outputs a bit b′. B outputs b′, and can break
the KH-ANON-CCA security with the same advantage of
breaking the keyword privacy.
229