DES [6], two-key EDE Triple-DES [1], or FEAL [11].
Symmetric-key algorithms are chosen because of their
speed and because of the availability of high-speed hard-
ware implementations. Encryption is performed at the
ATM level, with the payload of each ATM cell encrypted
and the cell header left in the clear. The standard spec-
iﬁes two modes of encryption: CBC and counter mode.
(For more information about these algorithms and encryp-
tion modes, see Schneier [10], chapters 12, 13, and 15, or
Menezes et al. [5], chapter 7.)
Entity authentication determines whether the identities
of the called and calling parties in an ATM connection are
genuine. This service is essential for establishing secure
connections, since it protects against attacks that involve
impersonation of a trusted entity. Approved algorithms
for authentication include symmetric-key-based message
authentication codes (MAC’s), using DES and FEAL, and
public-key digital signatures, such as those provided by
RSA [9], DSA [7], and ESIGN [8]. (See Schneier [10],
chapters 19–20, or Menezes et al. [5], chapters 9 and 11.)
To support these services, the Security Speciﬁcation de-
ﬁnes protocols for security message exchange, key ex-
change, and key update. Security message exchange is
supported by the deﬁnition of standard information ele-
ments (IE’s) that are used to construct and parse secu-
rity messages. The information elements are deﬁned to
be consistent with IE’s used in UNI (User-Network Inter-
face) signaling [4].
The next three sections introduce the parts of the ATM
Forum Security Speciﬁcation that are most relevant to the
CellCase system: counter-mode encryption, key update,
and key exchange.
2.3.1 Counter-Mode Encryption
Counter mode is a method for implementing a stream ci-
pher using a block cipher. The block cipher encrypts
a changing state vector, and the result is used as a key
stream. As shown in Figure 3, the key stream is bitwise
exclusive-ORed with the plaintext to generate ciphertext.
To decrypt, the same key stream is generated by the re-
ceiver (by encrypting the same sequence of state vector
values with the same key) and is exclusive-ORed with the
ciphertext, recovering the original plaintext.
Like CBC, counter mode encryption masks patterns in
the plaintext. Unlike CBC, counter mode does not re-
quire feedback from the ciphertext stream into the plain-
text stream. This is particularly important for Triple-DES,
since the feedback reduces throughput by a factor of three.
Counter mode takes full advantage of the fastest encryp-
tion chips available, leading to a system that scales natu-
rally with technology to OC-12c and multi-gigabit trans-
mission rates.
The state vector deﬁned by the ATM Forum is designed
for high-performance encryption of ATM cells. Each
cell payload is 48 bytes, which corresponds to six 64-bit
blocks. Part of the state vector is a counter from zero to
ﬁve, identifying the six blocks in the cell. These state
vector values can be generated independently, so all six
blocks can be encrypted or decrypted in parallel. Another
part of the state vector is a 21-bit linear feedback shift
register (LFSR), which is advanced one state for each cell.
This deﬁnition allows 
(cid:0) key stream values to be gen-
erated with no repeated elements.
Most of the remainder of the state vector is devoted to a
35-bit jump counter. The sender and receiver are period-
ically resynchronized by incrementing the jump counter
and resetting the LFSR to its starting value (5A5A).
Resynchronization is necessary to recover from lost cells;
without synchronization, counter mode encryption expe-
riences inﬁnite error extension when a ciphertext cell is
lost.
Even without cell loss, synchronization must occur to
avoid repeating the key stream. Therefore, a connection
must be synchronized at least every  cells. For a full-
rate OC-12c connection, this corresponds to about 0.7 sec-
onds worth of data.
Synchronization is accomplished through the use of
special OAM cells, called Session Key Changeover (SKC)
cells. The payload of the SKC cell contains a new jump
number; upon receiving an SKC cell, the cryptographic
unit sets the jump number for that connection to the value
contained in the cell, and the LFSR and other parts of the
state vector are reset to their starting values.
2.3.2 Key Update
The Security Speciﬁcation deﬁnes a protocol for changing
the data encryption key for an active connection without
disrupting data ﬂow. The new key is encrypted (using a
previously negotiated shared key) and placed in another
special OAM cell, called a Session Key Exchange (SKE)
cell, which is sent along with user data on the connection.
Upon receiving an SKE cell, the cryptographic unit de-
crypts the enclosed key and installs it in the unused key
bank for that connection.
A Session Key Changeover (SKC) cell signals that the
new key should be used for subsequent cells. This is the
same SKC used for counter mode synchronization, de-
scribed above. In addition to a new jump number, the SKC
cell contains a key bank identiﬁer, which indicates which
key bank should be used for encryption for subsequent
data cells. In connections that do not use counter mode,
only the key bank identiﬁer is used—the jump number is
ignored.
2.3.3 Key Exchange Protocol
The Security Speciﬁcation deﬁnes two key exchange pro-
tocols. The two-exchange protocol is intended for in-band
key exchange, combined with the normal call setup proce-
dure. It allows no negotiation of security parameters, and
it relies on timestamps for replay protection. The three-
exchange protocol performs key exchange on the user data
channel, after it has been setup through the normal sig-
naling mechanism. This protocol allows the responder to
choose security parameters from a list presented by the
initiator, and it uses challenge and response to protect
against replay.
3 Customer Experiences
In this section, we illustrate the practical realities of de-
ploying ATM encryption in customer networks. Gener-
ally, our experiences have been very good, validating that
encryption can effectively be applied at the ATM layer.
Full line rates for commonly deployed network band-
widths from 1.5 Mb/s to 622 Mb/s are supported. There
is essentially no impact on trafﬁc distribution patterns and
negligible delay is introduced. Encryption has very small
impact on delay variation. The degree of interoperation of
ATM network equipment has proven to be high.
Of course, much can be learned from the unanticipated
situations that occur in real-world environments. For the
rest of this section, we describe some of those situations
and the lessons learned from them.
3.1 Network Equipment Issues
A customer observed that channels encrypted in counter
mode would occasionally have corrupted data. The error
rate was correlated to the amount of trafﬁc that the net-
work switch was handling.
The switch supported two modes of handling OAM
cells: it could be conﬁgured to intercept end-to-end OAM
cells or let them pass through undisturbed. Even with the
intercept function disabled, the problem behavior was still
observed. However, when a virtual path connection (VPC)
was established through the switch and the same counter
mode trafﬁc sent over it no errors were reported. The
OAM cell intercept function was not available for VPC’s.
An ATM analyzer was attached directly to the switch
and conﬁgured to generate a stream of user cells with
OAM cells periodically intermixed. The tester was also
conﬁgured to receive the cell stream output from the
switch and compare the content of the data cells to assure
their values were correct.
At the start of the test, the trafﬁc rate was low and
the trafﬁc distribution cell stream output from the switch
matched the trafﬁc distribution of the input cell stream.
As the rate of data input to the switch was gradually
increased, the distribution of cells in the output stream
changed more and more from the pattern of the input
stream. In particular, position of the OAM cells relative
to the user cells shifted later in time. Eventually this shift-
ing in time caused an OAM cell to leave the switch after a
data cell that occurred later in the input cell stream.
Since OAM cells are used for counter mode synchro-
nization, this re-ordering of the cell stream would cause
loss of synchronization between the encryptor and the de-
cryptor. In other words, a cell would be decrypted with a
portion of the key stream different from that used to en-
crypt the cell; the resulting plaintext cell would be cor-
rupted.
The setting of end-to-end OAM cell interception did not
seem to have much impact on this behavior. The problem
was reported to the switch vendor, who determined that in-
terception of end-to-end OAM cells was never completely
disabled. The vendor created a test build of the switch
software with a ﬁx for this anomaly. When this test code
was loaded on the switch in the test network and the ATM
analyzer test rerun, the cell sequence integrity of OAM
cells was preserved. Running the customer application
with this test build also showed that the problem had been
resolved.
The lesson here is that the intercept function can never
be reliably used on a counter mode channel connection.
A customer must choose between counter mode encryp-
tion for security and OAM cell interception for network
management. In order to support both functions: (1) The
switch must recognize synchronization OAM cells (SKC
cells) and pass them without interception. (2) The encryp-
tor must recognize non-SKC OAM cells and pass them in
the clear. If the OAM cells are not encrypted, then they
may be reordered with respect to data cells without affect-
ing the decryption process. (This feature is supported by
the CellCase encryptor.)
3.2 Virtual Path Connections
The CellCase system and its research prototype [12]
were both designed to provide encryption for virtual chan-
nel connections (VCC’s). ATM networks also support vir-
tual path connections (VPC’s), in which switching and
routing is based only on a cell’s virtual path identiﬁer
(VPI). From a management standpoint, we decided to sup-
port paths in the encryptor, partly to ease administration
of large numbers of related channels and also to provide
an interface that was similar to the management of ATM
switches and interfaces.
In CellCase, a path is implemented as a collection of
independent channels, managed as an integral unit. In the
initial implementation, each channel in the path uses the
same encryption key, but the state of each channel is main-
tained separately.
For a counter mode path, this means that each chan-
nel has an independently maintained state vector, as well.
This has two important consequences. First, each channel
must be synchronized independently. Second, using the
same key for each channel means that the same key stream
is generated to encrypt data on the separate channels.
When two plaintexts are encrypted with the same key
stream, an attacker can exclusive-OR (XOR) the two re-
sulting ciphertexts together to retrieve the XOR of the
original plaintexts. In other words, for plaintexts A and
B, and keystream K, (A (cid:8) K) (cid:8) (B (cid:8) K) = (A (cid:8) B) (cid:8)
(K (cid:8) K) = (A (cid:8) B) (cid:8)   = A (cid:8) B: This may reveal
information to the attacker that makes it easier to recover
one or both plaintext messages. For instance, if one plain-
text contains a well-known or easily guessed pattern, this
is enough to recover part of the other plaintext.
One approach to solving the problem is to use different
ranges of the jump number for each channel in the path.
This reduces the effective lifetime of a key, however, since
the number of cells that can be encrypted is determined by
the number of unique values of the state vector. For a large
path, one with many active secure channels, the effective
key lifetime becomes impractically short if the state vector
space is divided among the channels.
To solve this problem,
the CellCase software was
changed to use a separate key for each channel in the path.
The key for each channel is derived from a path’s session
key and the relative position of the channel in the path. A
key exchange or key update operation establishes the ses-
sion key for the path as a whole, and this session key is
then used to derive keys for each channel in the path.
Another customer-reported problem further illustrates
the consequences of implementing a path as a collection
of channels. The customer reported that they enabled a
secure path that appeared to be passing data properly, but
the decrypting CU reported failures on key updates. Ob-
viously, the appropriate key values were installed, at least
for the channels that carried the test data trafﬁc. However,
since the key update was reported as failing, the key value
for at least one of the channels was not being set properly.
Further analysis showed that not all the channels in the
range of the secure path had been established through the
public network. In other words, a particular range of VCI
values was enabled as a path in each CU, but not ev-
ery channel in that range was provisioned in the network.
For example, suppose the user at each end of the connec-
tion provisions path 10 with channels 32 through 255. In
the network, however, channels 10/32 through 10/63 are
provisioned as permanent virtual channels (PVC’s). The
other channels (10/65–10/255) are not provisioned in the
network. Perhaps the user intends that they will be es-
tablished later, and he does not wish to reconﬁgure the
cryptographic state at that time.
During a key update operation, the new key is transmit-
ted using SKE cells on one channel of the path, speciﬁ-
cally the channel with the lowest VCI (32, in our exam-
ple). However, since the state of each channel is main-
tained separately, SKC cells must be sent on each channel
to complete the changeover process. Therefore, the key
update process could not be completed on the channels
that were not provisioned in the network (10/65 through
10/255), and the decrypting CU reported this as a failure.
The ATM Forum Security Speciﬁcation views a VPC
as a single connection, with a single cryptographic state.
This is consistent with the treatment of VPC’s in the ATM
network: only the VPI of a cell is signiﬁcant. (Certain
VCI values are reserved for network use, however, and
cells containing those VCI values must be passed in the
clear.) This view of a VPC can be implemented with the
current CellCase hardware by referring all channels in the
path to a common state memory index. (Since each cell in
the VPC updates the state vector, and thus the key stream,
the duplicate keystream problem described above would
not occur.) A more space-efﬁcient approach, however, re-
quiring fewer VLT entries, would be to change the hard-
ware to examine only the VPI of a cell associated with a
VPC.
3.3 Trafﬁc Policing
One of the attractive features of ATM is its provisions
for guaranteed bandwidth allocated to a connection. A
bandwidth contract is established between the end user
and the network when a connection is established, and the
network equipment is expected to enforce that contract
by giving priority to cells on that connection or discard-
ing cells if the end user exceeds the allocated bandwidth.
When the end user tries to match its trafﬁc to the provi-
sioned bandwidth, it is called trafﬁc shaping. The actions
taken by the network to enforce the bandwidth contract
are called trafﬁc policing.
Two behaviors can manifest themselves when using
ATM encryptors in networks in which trafﬁc ﬂows are po-
liced. The simplest behavior results from the rate of data
from the source of trafﬁc entering the network through
the encryptor. During periods when the trafﬁc source is
transmitting data at exactly the policed rate, there is no
bandwidth available for security functions, such as key
exchange, key update, and counter mode synchronization.
The CU inserts the cells required for these functions any-
way, since it has no awareness of the bandwidth contract
that the customer has with the service provider. Hence,
both the data cells and the security function cells enter the
public network. Cells exceeding the contracted rate may
be discarded by the public network. The cells discarded
might be data cells, security cells, or a mix of both.
During key exchange, a lost cell means that the key ex-
change message is not received properly at the peer CU.
Depending on the protocol, the message may be resent or
the entire key exchange may be abandoned. Since no data
is being sent on the connection during a key exchange,
problems with policing during this phase are typically due
to the burstiness of the key exchange trafﬁc.
After the connection is established, any data cell loss
will result in corruption of the recovered plaintext. If the
connection is encrypted in ECB mode, the impact of a data
cell being discarded is the absence of six blocks in the re-
covered plaintext. For counter mode, however, loss of a
data cell causes loss of synchronization between the en-
crypting and decrypting CU’s. All subsequent data is cor-
rupted until the next synchronization event. This is also
true if the lost cell is a synchronization (SKC) cell, since
the encrypting CU resets the state vector for this connec-
tion but the decrypting CU does not.
During key update, loss of an SKE cell (which carries
the new key value) is unlikely to cause data corruption,
because multiple SKE cells are sent for each key update
event. Loss of an SKC cell does cause corruption, how-
ever, since the encrypting CU changes to the new key but
the decrypting CU does not. Multiple SKC cells are also
sent, however, so the corruption should cease when an
SKC cell is successfully received by the decryptor.
We anticipated the effects of policing during design,
but we didn’t know how to quantify its impact. We also
didn’t have any basis for predicting how prevalent polic-
ing would be nor at what data rates it would be used. It is
exactly this kind of unanticipated—and unanticipatable—
factor that most challenge a design. As a result, the Cell-