    # 扫描文件（文件中每行一个域名）
    esd --file targets.txt
    # 跳过相似度对比（开启这个选项会把所有泛解析的域名都过滤掉）
    esd --domain qq.com --skip-rsc
    # 使用搜索引擎进行子域名搜索（支持baidu、google、bing、yahoo，使用英文逗号分隔）
    esd --domain qq.com --engines baidu,google,bing,yahoo
    # 平均分割字典，加快爆破
    esd --domain qq.com --split 1/4
    # 使用DNS域传送漏洞获取子域名
    esd --domain qq.com --dns-transfer
    # 使用HTTPS证书透明度获取子域名
    esd --domain qq.com --ca-info
但是实际上我们从源码出发，发现很多功能作者目前并未实现：
      parser = OptionParser('Usage: python ESD.py -d feei.cn -F response_filter -e baidu,google,bing,yahoo -p user:pass@host:port')
            parser.add_option('-d', '--domain', dest='domains', help='The domains that you want to enumerate')
            parser.add_option('-f', '--file', dest='input', help='Import domains from this file')
            parser.add_option('-F', '--filter', dest='filter', help='Response filter')
            parser.add_option('-s', '--skip-rsc', dest='skiprsc', help='Skip response similary compare', action='store_true', default=False)
            parser.add_option('-S', '--split', dest='split', help='Split the dict into several parts', default='1/1')
            parser.add_option('-p', '--proxy', dest='proxy', help='Use socks5 proxy to access Google and Yahoo')
            parser.add_option('-m', '--multi-resolve', dest='multiresolve', help='Use TXT, AAAA, MX, SOA record to find subdomains', action='store_true', default=False)
            parser.add_option('--skey', '--shodan-key', dest='shodankey', help='Define the api of shodan')
            parser.add_option('--fkey', '--fofa-key', dest='fofakey', help='Define the key of fofa')
            parser.add_option('--femail', '--fofa-email', dest='fofaemail', help='The email of your fofa account')
            parser.add_option('--zusername', '--zoomeye-username', dest='zoomeyeusername', help='The username of your zoomeye account')
            parser.add_option('--zpassword', '--zoomeye-password', dest='zoomeyepassword', help='The password of your zoomeye account')
            parser.add_option('--cuid', '--censys-uid', dest='censysuid', help="The uid of your censys account")
            parser.add_option('--csecret', '--censys-secret', dest='censyssecret', help='The secret of your censys account')
            (options, args) = parser.parse_args()
不难发现 `通过 HTTPS 证书透明度`、`域传送漏洞` 等功能均未实现。
ESD 目前仅支持 Linux 系统，这是其源码决定的，不过我们可以 DIY 让它支持 windows
可以看到，engine.py 引擎脚本中，写死了目录是 `/tmp/esd` ，如果要在 windows 上使用，我们只需要替换这里为 windows
的输出目录即可。
     # write output
            tmp_dir = 'C:\\temp\\'
            if not os.path.isdir(tmp_dir):
                os.mkdir(tmp_dir, 0o777)
            output_path_with_time = '{td}/.{domain}_{time}.esd'.format(td=tmp_dir, domain=self.domain, time=datetime.datetime.now().strftime("%Y-%m_%d_%H-%M"))
            output_path = '{td}/.{domain}.esd'.format(td=tmp_dir, domain=self.domain)
            if len(self.data):
                max_domain_len = max(map(len, self.data)) + 2
            else:
                max_domain_len = 2
            output_format = '%-{0}s%-s\n'.format(max_domain_len)
            with open(output_path_with_time, 'w') as opt, open(output_path, 'w') as op:
                for domain, ips in self.data.items():
                    # The format is consistent with other scanners to ensure that they are
                    # invoked at the same time without increasing the cost of
                    # resolution
                    if ips is None or len(ips) == 0:
                        ips_split = ''
                    else:
                        ips_split = ','.join(ips)
                    con = output_format % (domain, ips_split)
                    op.write(con)
                    opt.write(con)
3.Layer 子域名挖掘机
项目地址：
Seay 法师的作品，很早就有了，非常强大的一款 windows 上的 GUI
图形化工具，经历了数个版本的迭代，官方最新版是5.0，当然还有不计其数的网友自定义修改版本在野流传。
4.Xray
项目地址：
xray 是一款强大的安全评估工具，一款自动化扫描器，我们可以用其自带的 subdomain 子域名发掘功能来针对性探测：
subdomain 功能支持暴力破解模式和非暴力模式，可以只探测 web 服务或者只探测 ip 可解析的子域，另外支持 webhook
数据传递，作为插件端或者分发消息的接收端来使用都非常方便快捷。
5.Bypass-firewalls-by-DNS-history
项目地址：
Bypass-firewalls-by-DNS-history 是一款集成全自动化的探测工具，通过探测 DNS 历史记录，搜索旧的 DNS A
Record，收集子域，并检查服务器是否对该域名进行答复。 另外它还基于源服务器和防火墙在HTML响应中的相似性阈值来判断。
用法：
    bash bypass-firewalls-by-DNS-history.sh -d example.com
    -d --domain: domain to bypass
    -o --outputfile: output file with IP's
    -l --listsubdomains: list with subdomains for extra coverage
    -a --checkall: Check all subdomains for a WAF bypass
此外，类似的还有 `subfinder` 、`dnsprobe` 等等工具，有兴趣的读者可以自行去研究了解其工作原理和机制。
###  二、通过 Email 邮局
一般大型网站自己部署架设的邮件服务器如果向外部用户发送邮件的话，如果中间未经任何数据处理和防护措施，那么邮件头部的源码中会包含此邮件服务器的真实 IP
地址。常见的邮件触发点有：
  * RSS 订阅
  * 邮箱注册、激活处
  * 邮箱找回密码处
  * 产品更新的邮件推送
  * 某业务执行后发送的邮件通知
  * 员工邮箱、邮件管理平台等入口处的忘记密码
另外这里还有一个`奇淫技巧`，通过发送邮件给一个不存在的邮箱地址，比如
[PI:EMAIL](mailto:PI:EMAIL)
，因为该用户不存在，所以发送将失败，并且还会收到一个包含发送该电子邮件给你的服务器的真实 IP 通知。
生产上多关注这些点，一个不成功继续测试下一个邮件触发点，很多大型网站的邮件服务器不止一台，并不是所有都做了防护处理，细节决定成败。
###  三、通过 SSL 证书
  * 证书颁发机构 (CA) 必须将他们发布的每个 SSL/TLS 证书发布到公共日志中，SSL/TLS 证书通常包含域名、子域名和电子邮件地址。因此可以利用 SSL/TLS 证书来发现目标站点的真实 IP 地址。
  * CDN 运营商在给服务器提供保护的同时，也会与其服务器进行加密通信（ssl），这时当服务器的 443 端口接入域名时也会在 443 端口暴露其证书，我们通过证书比对便可发现网站的真实 IP 地址。
**1.利用 Censys 引擎（[https://censys.io/）](https://censys.io/%EF%BC%89)**
  * Censys 搜索引擎能够扫描整个互联网，每天都会扫描 IPv4 地址空间，以搜索所有联网设备并收集相关的信息，可以利用 Censys 进行全网方面的 SSL 证书搜索，找到匹配的真实 IP 。
可以看到，当我们针对一个互联网 IP 地址进行搜索时，是有匹配到证书 sha1 签名的
同理，我们根据域名指纹搜索 SSL 证书指纹，然后再反查 IP 就可以了。
首先针对目标域名，选择 `Certificates` 证书搜索，结果出来一堆 `有效` 的证书和 `无效` 的证书：
测试过程中，很容易陷入思维误区，认为 `有效` 的证书才是我们需要的，但其实并不一定，很多服务器配置错误依然保留的是 `无效`
的证书，就比如例子中，在结果特别多的情况下，我又使用 Censys 的语法搜索，来精准定位 `有效` SSL 证书，减少结果：
    parsed.names: xxx.com and tags.raw: trusted
瞬间减少到了 2 个结果，我们逐个点开，然后 sha1 签名反查 IPV4 主机：
不过很遗憾，两条记录全都没查到：
这也从侧面说明了，不是所有的网站只有其 `有效` 证书会匹配其 IP 服务器。
于是只能回到最开始，从所有的结果里面依次打开往下反查指纹，最终定位到了真实 IP ：
安全不仅是个技术活，也是个细心活。
**2.使用命令行**
  * 通过 `openssl` 和 `curl` 等常见的基础命令，也同样可以达到反查 SSL 证书的效果。
openssl：
    openssl s_client -connect 123.123.123.123:443 | grep subject
curl：
    curl -v https://123.123.123.123 | grep 'subject'
**3.使用工具和脚本**
  * 通过自己写工具脚本，集成前面的1、2两点，完全可以做到一个简易版的 SSL 全网证书爬取，也可以利用现有的一些脚本工具和网站，省的我们自己费力了。
例如 `CloudFlair` ，项目地址：
脚本兼容 python2.7 和 3.5，需要配置 Censys API，不过只针对目标网站是否使用 CloudFlare 服务进行探测。
在 Censys 注册一个账号并进入  获取 API ID 和 Secret：
将 CloudFlair 克隆到本地并把 API ID 和 Secret 导入环境变量：
    $ git clone https://github.com/christophetd/CloudFlair
    $ export CENSYS_API_ID="xxx"
    $ export CENSYS_API_SECRET="xxx"
通过 requirements.txt 安装依赖：
    $ pip install -r requirements.txt
运行 cloudflair.py ：
    $ python cloudflair.py --censys-api-id xxx  --censys-api-secret xxx baidu.com
    [*] The target appears to be behind CloudFlare.
    [*] Looking for certificates matching "myvulnerable.site" using Censys
    [*] 75 certificates matching "myvulnerable.site" found.
    [*] Looking for IPv4 hosts presenting these certificates...
    [*] 10 IPv4 hosts presenting a certificate issued to "myvulnerable.site" were found.
      - 51.194.77.1
      - 223.172.21.75
      - 18.136.111.24
      - 127.200.220.231
      - 177.67.208.72