    11 - .github/workflow/pipeline . YAML
    12 #允许您从“操作”选项卡手动运行此工作流
    13 工作流 _ 调度:
    该代码配置如下:
    *   **第 8 行**:配置哪些分支会触发此工作流。具体来说，在这种情况下，这表明工作流是通过将代码推送到主分支来触发的。
    *   **第 9-11 行**:这配置了一个路径过滤器。**第 15 章**目录的任何更改以及**中 **pipeline.yaml** 文件的更改。github/workflow/**目录将触发工作流运行。
    *   **第 13 行**:这样配置工作流程，也可以手动触发。这意味着您可以在不更改代码的情况下触发工作流运行。
    您也可以在 GitHub 动作工作流中配置可重用的变量。以下代码块配置了您将在 GitHub 操作的多个步骤中使用的容器注册表名称:
    14 # Env 设置可重用变量
    15 环境:
    16 ACRNAME:
    在这里，您将把 **ACRNAME** 变量设置为您创建的容器注册表的名称。通过使用变量，您可以避免在多个地方配置相同的值。
    这解释了管道是如何被触发的，以及如何配置变量；现在让我们看看管道中会运行什么。
5.  在我们定义在管道中执行的命令之前，让我们探索一下 GitHub Actions 工作流的结构，如图 15.13 所示:
![A representation of the GitHub action structure](img/B17338_15_13.jpg)
图 15.13: GitHub 动作工作流
GitHub 操作工作流由多个作业组成。一个作业可以有多个步骤。默认情况下，作业并行运行，但可以配置为顺序运行。作业中的步骤将按顺序运行。作业中的一个步骤将包含作为管道一部分运行的实际命令。一个步骤的例子是构建一个容器映像。在工作流中运行命令有多种方式:您可以像在常规终端上一样运行直接 shell 命令，也可以运行 GitHub 社区的预构建操作。
这些工作和步骤是在所谓的跑步者身上进行的。默认情况下，工作流在托管跑步者上运行。这些托管跑步者在 GitHub 建立和管理的基础设施上运行。或者，您可以在自行托管的运行程序上运行作业和步骤。这使您能够在 runner 上拥有更多配置功能，例如，允许您使用特殊硬件或安装特定软件。自我托管的跑步者可以是物理的、虚拟的、容器中的、内部的或云中的。
在本节中，您将运行社区中的工作流步骤以及 shell 命令。有关社区可用操作的概述，请参考位于[https://github.com/marketplace?type=actions](15.html)的 GitHub 市场。
在您正在构建的配置项管道中，您需要执行以下步骤:
1.  获取动作运行器上的 GitHub repo，也称为您的存储库的签出。
2.  登录 Azure 命令行界面。
3.  登录到 Azure 容器注册表。
4.  构建一个容器映像，并将此容器映像推送到 Azure 容器注册表。
让我们一步一步地建立管道。
1.  Before you build the actual steps in the pipeline, you'll need to configure the jobs and the configuration of your job. Specifically, for this example, you can use the following configuration:
    18 份工作:
    19 #此工作流包含一个名为“配置项”的作业
    20 个 CI:
    21 #作业将在其上运行的运行程序类型
    22 次运行:Ubuntu-最新
    您正在配置以下内容:
    *   **第 20 行**:你现在正在创建一个名为 **CI** 的单一作业。稍后您将添加光盘作业。
    *   **第 22 行**:这表示您将在 **ubuntu-latest** 类型的机器上运行该作业。
    这将为步骤配置 GitHub runner。现在让我们开始构建各个步骤。
2.  The first step will be checking out the Git repo. This means that the code in the repo gets loaded by the runner. This can be achieved using the following lines of code:
    25 步:
    26 #在$GITHUB_WORKSPACE 下签出您的存储库，以便您的工作可以访问它
    27 - 名称：Git 签出
    28 个用途:actions/checkout@v2
    这里表示的第一行(*第 25 行*)是打开**步骤**块和所有后续步骤的内容。第一步叫做 **Git checkout** ( *第 27 行*)简单来说就是指一个预建的动作，叫做 **actions/checkout@v2** 。 **@v2** 表示你使用的是这个动作的第二个版本。
3.  Next, you will need to log in to the Azure CLI and then use the Azure CLI to log in to the Azure Container Registry. To do so, you'll make use of an action from the marketplace. You can find items in the marketplace by using the search bar at the right side of your screen, as shown in *Figure 15.14:*
    ![Searching for the Azure Login action in the GitHub Marketplace](img/B17338_15_14.jpg)
    图 15.14:搜索 Azure 登录操作
    在本演示中，您将使用 Azure 登录操作。点击 Azure 登录操作，获得更多信息的屏幕，如图*图 15.15:*
    ![Additional information and somesample code for the Azure Login action](img/B17338_15_15.jpg)
    图 15.15:关于 Azure 登录操作的更多细节
    这向您展示了有关如何使用该操作的更多信息，并为您提供了可以复制并粘贴到工作流编辑器中的示例代码。
    要登录到 Azure CLI 和 Azure 容器注册表，可以使用以下代码:
    30 -名称:az CLI 登录
    31 种用途:azure/login@v1
    32 带:
    33 个信条:${{机密。AZURE_CREDENTIALS }}
    Thirty-four
    35 -名称:ACR 登录
    36 运行:az acr 登录-n $ACRNAME
    第一步是登录 GitHub 操作运行器上的 Azure 命令行界面。要登录 Azure 命令行界面，它会使用您在上一节中配置的密码。第二个作业执行 Azure 命令行界面命令来登录 Azure 容器注册表。它使用您在第 14-15 行中配置的变量。它作为常规 shell 命令执行**登录**命令。在下一步中，您将把映像推送到这个容器注册表中。
4.  Next, you build the container image. There are multiple ways to do this, and you'll use **docker/build-push-action** in this example:
    39 -名称:构建和推送映像
    40 种用途:docker/build-push-action@v2
    41 带:
    42 上下文:。/第 15 章
    43 推:真
    44 个标签:${{ env。ACRNAME } } . azure Cr . io/网站/网站:${{ github.run_number }}
    这一步将构建您的容器映像并将其推送到注册表。您将上下文配置为在第 15 章文件夹中运行，因此 Dockerfile 中对**index.html**页面的引用仍然有效。它将使用容器注册表的名称来标记该映像，并且作为容器映像的版本号，它将使用 GitHub 操作的运行号。要获取工作流的运行号，您将使用 GitHub 配置的默认环境变量之一。完整列表请参考 GitHub 文档:[https://docs . GitHub . com/actions/reference/environment-variables](15.html)。
    #### 注意
    在本例中，您使用工作流运行号作为容器映像的版本。标记容器映像很重要，因为标记版本指示容器的版本。还有多种其他策略来版本化您的容器映像。
    不鼓励的一种策略是用最新的标签标记容器映像，并在 Kubernetes 部署中使用该标签。最新的**标签是 Docker 在没有提供标签的情况下添加到映像中的默认标签。**最新的**标签的问题是，如果您的容器注册表中带有**最新的**标签的映像发生了变化，Kubernetes 将不会直接获得该变化。在拥有带有最新**标签的映像本地副本的节点上，Kubernetes 在超时到期之前不会拉新映像；但是，没有映像副本的节点在需要运行带有此映像的 pod 时，会拉取更新的版本。这可能会导致在单个部署中运行不同的版本，这是应该避免的。****
*****   You are now ready to save and run this GitHub Actions workflow. You can save the workflow configuration file by clicking on the Start Commit button and then confirming by clicking Commit new file, as shown in *Figure 15.16:*
    ![Saving the action configuration file](img/B17338_15_16.jpg)
    图 15.16:保存动作配置文件
    *   Once the file has been saved, the workflow will be triggered to run. To follow the logs of the workflow run, you can click on Actions at the top of the screen. This should show you a screen similar to *Figure 15.17:*
    ![Viewing the Actions run history](img/B17338_15_17.jpg)
    图 15.17:获取动作运行历史
    单击顶部条目，获取工作流运行的更多详细信息。这将带您进入类似于*的屏幕图 15.18:*
    ![A detailed view of the action run](img/B17338_15_18.jpg)
    图 15.18:动作运行的详细界面
    这将向您显示您的工作流详细信息，并向您显示您的工作流中只有一个作业。单击配置项获取该作业的日志。这将显示类似于*的屏幕图 15.19:*
    ![Viewing logs of the CI job](img/B17338_15_19.jpg)
    图 15.19:配置项作业的日志
    在此屏幕上，您可以看到工作流中每个步骤的输出日志。您可以通过单击每个步骤前面的箭头图标来展开该步骤的日志。
    *   In this example, you built a container image and pushed that to a container registry on Azure. Let's verify this image was indeed pushed to the registry. For this, go back to the Azure portal and, in the search bar, look for **container registry**, as shown in *Figure 15.20:*
    ![Searching for container registry using the Azure search bar](img/B17338_15_20.jpg)
    图 15.20:通过 Azure 门户导航到容器注册服务
    在结果屏幕中，单击您之前创建的注册表。现在，点击左侧的资源库，应该会显示**网站/网站**资源库，如图*图 15.21:*
    ![Viewing the website/website repository in the container registry](img/B17338_15_21.jpg)
    图 15.21:显示容器注册表中的网站/网站库
    *   如果点击**网站/网站**资源库链接，应该会看到你的容器映像的映像标签，如图*图 15.22:*****
 ****![Viewing the image tags for the container image](img/B17338_15_22.jpg)
图 15.22:容器映像的映像标签
如果对比一下*图 15.18* 和*图 15.22* 的输出，就会看到动作的运行号也是映像上的标签。在您情况下，运行号和标签可能是 1。
您现在已经构建了一个基本的配置项管道。当**第 15 章**文件夹中的代码更改时，管道将运行并构建一个新的容器映像，该映像将被推送到容器注册表中。在下一节中，您将向管道中添加一个光盘作业，以便将映像部署到 Kubernetes 中的部署中。
## 设置光盘管道
您已经有一个带有配置项作业的管道，该作业将构建一个新的容器映像。在本节中，您将向该管道添加一个光盘作业，该作业将把更新的容器映像部署到 Kubernetes 中的一个部署中。