---
author: Alex Wood
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5618
date: '2018-09-26 09:09:11'
editorchoice: false
excerpt: 了解如何验证某人所声称的身份。
fromurl: https://opensource.com/article/18/7/private-keys
id: 10049
islctt: true
largepic: /data/attachment/album/201809/26/090854i36b2qo5b3l3b3k3.jpg
permalink: /article-10049-1.html
pic: /data/attachment/album/201809/26/090854i36b2qo5b3l3b3k3.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 7289
- displayorder: 1
  raid: 9792
reviewer: wxy
selector: lujun9972
summary: 了解如何验证某人所声称的身份。
tags:
- PKI
- 公钥
- 证书
- SSL
thumb: false
title: 公钥基础设施和密码学中的私钥的角色
titlepic: true
translator: pinewall
updated: '2018-09-26 09:09:11'
---
> 
> 了解如何验证某人所声称的身份。
> 
> 
> 
![](/data/attachment/album/201809/26/090854i36b2qo5b3l3b3k3.jpg)
在[上一篇文章](/article-9792-1.html)中，我们概述了密码学并讨论了密码学的核心概念： 保密性   confidentiality  （让数据保密）、 完整性   integrity  （防止数据被篡改）和 身份认证   authentication  （确认数据源的 身份   identity ）。由于要在存在各种身份混乱的现实世界中完成身份认证，人们逐渐建立起一个复杂的 技术生态体系   technological ecosystem ，用于证明某人就是其声称的那个人。在本文中，我们将大致介绍这些体系是如何工作的。
### 快速回顾公钥密码学及数字签名
互联网世界中的身份认证依赖于公钥密码学，其中密钥分为两部分：拥有者需要保密的私钥和可以对外公开的公钥。经过公钥加密过的数据，只能用对应的私钥解密。举个例子，对于希望与[记者](https://theintercept.com/2014/10/28/smuggling-snowden-secrets/)建立联系的举报人来说，这个特性非常有用。但就本文介绍的内容而言，私钥更重要的用途是与一个消息一起创建一个 数字签名   digital signature ，用于提供完整性和身份认证。
在实际应用中，我们签名的并不是真实消息，而是经过 密码学哈希函数   cryptographic hash function 处理过的消息 摘要   digest 。要发送一个包含源代码的压缩文件，发送者会对该压缩文件的 256 比特长度的 [SHA-256](https://en.wikipedia.org/wiki/SHA-2) 摘要进行签名，而不是文件本身进行签名，然后用明文发送该压缩包（和签名）。接收者会独立计算收到文件的 SHA-256 摘要，然后结合该摘要、收到的签名及发送者的公钥，使用签名验证算法进行验证。验证过程取决于加密算法，加密算法不同，验证过程也相应不同；而且，很微妙的是签名验证[漏洞](https://www.ietf.org/mail-archive/web/openpgp/current/msg00999.html)依然[层出不穷](https://www.imperialviolet.org/2014/09/26/pkcs1.html)。如果签名验证通过，说明文件在传输过程中没有被篡改而且来自于发送者，这是因为只有发送者拥有创建签名所需的私钥。
### 方案中缺失的环节
上述方案中缺失了一个重要的环节：我们从哪里获得发送者的公钥？发送者可以将公钥与消息一起发送，但除了发送者的自我宣称，我们无法核验其身份。假设你是一名银行柜员，一名顾客走过来向你说，“你好，我是 Jane Doe，我要取一笔钱”。当你要求其证明身份时，她指着衬衫上贴着的姓名标签说道，“看，Jane Doe！”。如果我是这个柜员，我会礼貌的拒绝她的请求。
如果你认识发送者，你们可以私下见面并彼此交换公钥。如果你并不认识发送者，你们可以私下见面，检查对方的证件，确认真实性后接受对方的公钥。为提高流程效率，你可以举办[聚会](https://en.wikipedia.org/wiki/Key_signing_party)并邀请一堆人，检查他们的证件，然后接受他们的公钥。此外，如果你认识并信任 Jane Doe（尽管她在银行的表现比较反常），Jane 可以参加聚会，收集大家的公钥然后交给你。事实上，Jane 可以使用她自己的私钥对这些公钥（及对应的身份信息）进行签名，进而你可以从一个[线上密钥库](https://en.wikipedia.org/wiki/Key_server_(cryptographic))获取公钥（及对应的身份信息）并信任已被 Jane 签名的那部分。如果一个人的公钥被很多你信任的人（即使你并不认识他们）签名，你也可能选择信任这个人。按照这种方式，你可以建立一个   信任网络    Web of Trust 。
但事情也变得更加复杂：我们需要建立一种标准的编码机制，可以将公钥和其对应的身份信息编码成一个 数字捆绑   digital bundle ，以便我们进一步进行签名。更准确的说，这类数字捆绑被称为 证书   cerificate 。我们还需要可以创建、使用和管理这些证书的工具链。满足诸如此类的各种需求的方案构成了 公钥基础设施   public key infrastructure （PKI）。
### 比信任网络更进一步