title:Unleashing Mayhem on Binary Code
author:Sang Kil Cha and
Thanassis Avgerinos and
Alexandre Rebert and
David Brumley
2012 IEEE Symposium on Security and Privacy
Unleashing MAYHEM on Binary Code
Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert and David Brumley
Carnegie Mellon University
{sangkilc, thanassis, alexandre.rebert, dbrumley}@cmu.edu
Pittsburgh, PA
In order to tackle this problem, MAYHEM’s design is based
on four main principles: 1) the system should be able to
make forward progress for arbitrarily long times—ideally run
“forever”—without exceeding the given resources (especially
memory), 2) in order to maximize performance, the system
should not repeat work, 3) the system should not throw away
any work—previous analysis results of the system should
be reusable on subsequent runs, and 4) the system should
be able to reason about symbolic memory where a load
or store address depends on user input. Handling memory
addresses is essential to exploit real-world bugs. Principle #1
is necessary for running complex applications, since most
non-trivial programs will contain a potentially inﬁnite number
of paths to explore.
Current approaches to symbolic execution, e.g., CUTE [26],
BitBlaze [5], KLEE [9], SAGE [13], McVeto [27], AEG [2],
S2E [28], and others [3], [21], do not satisfy all
the
above design points. Conceptually, current executors can be
divided into two main categories: ofﬂine executors — which
concretely run a single execution path and then symbolically
execute it (also known as trace-based or concolic executors,
e.g., SAGE), and online executors — which try to execute
all possible paths in a single run of the system (e.g., S2E).
Neither online nor ofﬂine executors satisfy principles #1-#3.
In addition, most symbolic execution engines do not reason
about symbolic memory, thus do not meet principle #4.
Ofﬂine symbolic executors [5], [13] reason about a single
execution path at a time. Principle #1 is satisﬁed by iteratively
picking new paths to explore. Further, every run of the
system is independent from the others and thus results of
previous runs can be immediately reused, satisfying principle
#3. However, ofﬂine does not satisfy principle #2. Every
run of the system needs to restart execution of the program
from the very beginning. Conceptually, the same instructions
need to be executed repeatedly for every execution trace. Our
experimental results show that this re-execution can be very
expensive (see §VIII).
Abstract—In this paper we present MAYHEM, a new sys-
tem for automatically ﬁnding exploitable bugs in binary (i.e.,
executable) programs. Every bug reported by MAYHEM is
accompanied by a working shell-spawning exploit. The working
exploits ensure soundness and that each bug report is security-
critical and actionable. MAYHEM works on raw binary code
without debugging information. To make exploit generation
possible at the binary-level, MAYHEM addresses two major
technical challenges: actively managing execution paths without
exhausting memory, and reasoning about symbolic memory
indices, where a load or a store address depends on user
input. To this end, we propose two novel techniques: 1) hybrid
symbolic execution for combining online and ofﬂine (concolic)
execution to maximize the beneﬁts of both techniques, and
2) index-based memory modeling, a technique that allows
MAYHEM to efﬁciently reason about symbolic memory at
the binary level. We used MAYHEM to ﬁnd and demonstrate
29 exploitable vulnerabilities in both Linux and Windows
programs, 2 of which were previously undocumented.
Keywords-hybrid execution, symbolic memory, index-based
memory modeling, exploit generation
I. INTRODUCTION
Bugs are plentiful. For example, the Ubuntu Linux bug
management database currently lists over 90,000 open
bugs [17]. However, bugs that can be exploited by attackers
are typically the most serious, and should be patched ﬁrst.
Thus, a central question is not whether a program has bugs,
but which bugs are exploitable.
In this paper we present MAYHEM, a sound system
for automatically ﬁnding exploitable bugs in binary (i.e.,
executable) programs. MAYHEM produces a working control-
hijack exploit for each bug it reports, thus guaranteeing each
bug report is actionable and security-critical. By working
with binary code MAYHEM enables even those without source
code access to check the (in)security of their software.
MAYHEM detects and generates exploits based on the
basic principles introduced in our previous work on AEG [2].
At a high-level, MAYHEM ﬁnds exploitable paths by aug-
menting symbolic execution [16] with additional constraints
at potentially vulnerable program points. The constraints
include details such as whether an instruction pointer can be
redirected, whether we can position attack code in memory,
and ultimately, whether we can execute attacker’s code. If the
resulting formula is satisﬁable, then an exploit is possible.
A main challenge in exploit generation is exploring enough
of the state space of an application to ﬁnd exploitable paths.
Online symbolic execution [9], [28] forks at each branch
point. Previous instructions are never re-executed, but the
continued forking puts a strain on memory, slowing down
the execution engine as the number of branches increase.
The result is no forward progress and thus principles #1
and #3 are not met. Some online executors such as KLEE
stop forking to avoid being slowed down by their memory
© 2012, Sang Kil Cha. Under license to IEEE.
DOI 10.1109/SP.2012.31
380
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
use. Such executors satisfy principle #1 but not principle #3
(interesting paths are potentially eliminated).
MAYHEM combines the best of both worlds by introduc-
ing hybrid symbolic execution, where execution alternates
between online and ofﬂine symbolic execution runs. Hybrid
execution acts like a memory manager in an OS, except
that it is designed to efﬁciently swap out symbolic execution
engines. When memory is under pressure, the hybrid engine
picks a running executor, and saves the current execution
state, and path formula. The thread is restored by restoring the
formula, concretely running the program up to the previous
execution state, and then continuing. Caching the path
formulas prevents the symbolic re-execution of instructions,
which is the bottleneck in ofﬂine, while managing memory
more efﬁciently than online execution.
MAYHEM also proposes techniques for efﬁciently reason-
ing about symbolic memory. A symbolic memory access
occurs when a load or store address depends on input. Sym-
bolic pointers are very common at the binary level, and being
able to reason about them is necessary to generate control-
hijack exploits. In fact, our experiments show that 40% of
the generated exploits would have been impossible due to
concretization constraints (§VIII). To overcome this problem,
MAYHEM employs an index-based memory model (§V) to
avoid constraining the index whenever possible.
Results are encouraging. While there is ample room for
new research, MAYHEM currently generates exploits for
several security vulnerabilities: buffer overﬂows, function
pointer overwrites, and format string vulnerabilities for
29 different programs. MAYHEM also demonstrates 2-10×
speedup over ofﬂine symbolic execution without having the
memory constraints of online symbolic execution.
Overall, MAYHEM makes the following contributions:
1) Hybrid execution. We introduce a new scheme for sym-
bolic execution—which we call hybrid symbolic execution—
that allows us to ﬁnd a better balance between speed and
memory requirements. Hybrid execution enables MAYHEM
to explore multiple paths faster than existing approaches
(see §IV).
2) Index-based memory modeling. We propose index-based
memory model as a practical approach to dealing with
symbolic indices at the binary-level. (see §V).
3) Binary-only exploit generation. We present the ﬁrst
end-to-end binary-only exploitable bug ﬁnding system that
demonstrates exploitability by outputting working control
hijack exploits.
II. OVERVIEW OF MAYHEM
In this section we describe the overall architecture, usage
scenario, and challenges for ﬁnding exploitable bugs. We use
an HTTP server, orzHttpd [1]—shown in Figure 1a—as
an example to highlight the main challenges and present how
MAYHEM works. Note that we show source for clarity and
simplicity; MAYHEM runs on binary code.
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48 }
High
s
s
e
r
d
d
a
Low
381
r e a d b u f ;
s t r u c t {
s t r u c t conn {
STATIC BUFFER t
. . .
/ / o m i t t e d
char buf [ BUFSIZE ] ;
i n t used ;
1 # d e f i n e BUFSIZE 4096
2
3 typedef
4
5
6 } STATIC BUFFER t ;
7
8 typedef
9
10
11 } CONN t ;
12
13 s t a t i c void s e r v e r l o g ( LOG TYPE t
14
15 {
16
17
18
19
20
21
22
23
24 }
25
26 HTTP STATE t h t t p r e a d r e q u e s t ( CONN t ∗ conn )
27 {
28
29
30
. . .
while ( conn−>r e a d b u f . used 
}
f p r i n t f ( log , buf ) ;
f f l u s h ( l o g ) ;
v a s t a r t ( ap ,
v s p r i n t f ( buf ,
va end ( ap ) ;
const char ∗ format ,
/ / o m i t t e d
. . .
i f ( f o r m a t
!= NULL) {
f o r m a t ) ;
format , ap ) ;
/ /
v u l n e r a b l e p o i n t
/ / o m i t t e d
type ,
. . . )
s z = s t a t i c b u f f e r
i f ( s z r e a d b u f . used += s z ;
i f (memcmp(&conn−>r e a d b u f . buf [ conn−>
r e a d b u f . used ] − 4 , ”\ r\n\ r\n ” , 4 ) ==
0 )
{
}
break ;
}
i f ( conn−>r e a d b u f . used >= BUFSIZE ) {
conn−>s t a t u s . s t = HTTP STATUS 400 ;
return HTTP STATE ERROR ;
}
. . .
s e r v e r l o g (ERROR LOG,
”%s\n ” ,
conn−>r e a d b u f . buf ) ;
. . .
(a) Code snippet.
...
old ebp
buf (in serverlog)
...
buf ptr
log (ﬁle pointer)
serverlog frame pointer
an exploit generated by 
Mayhem:
\x5c\xca\xff\xbf\x5e\xca\xff
\xbf%51832c%17$hn
%62847c%18$hn
\x90\x90 ... shellcode
return addr to serverlog
fprintf frame pointer
...
(b) Stack diagram of the vulnerable program.
Figure 1: orzHttpd vulnerability
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
In orzHttpd, each HTTP connection is passed
to http_read_request. This routine in turn calls
static_buffer_read as part of the loop on line 29 to
get the user request string. The user input is placed into the
4096-byte buffer conn->read_buf.buf on line 30. Each
read increments the variable conn->read_buf.used by
the number of bytes read so far in order to prevent a buffer
overﬂow. The read loop continues until \r\n\r\n is found,
checked on line 34. If the user passes in more than 4096 bytes
without an HTTP end-of-line character, the read loop aborts
and the server returns a 400 error status message on line
41. Each non-error request gets logged via the serverlog
function.
The vulnerability itself is in serverlog, which calls
fprintf with a user speciﬁed format string (an HTTP
request). Variadic functions such as fprintf use a format
string speciﬁer to determine how to walk the stack looking
for arguments. An exploit for this vulnerability works by
supplying format strings that cause fprintf to walk the
stack to user-controlled data. The exploit then uses additional
format speciﬁers to write to the desired location [22].
Figure 1b shows the stack layout of orzHttpd when the
format string vulnerability is detected. There is a call to
fprintf and the formatting argument is a string of user-
controlled bytes.
We highlight several key points for ﬁnding exploitable
bugs:
Low-level details matter: Determining exploitability re-
quires that we reason about low-level details like return
addresses and stack pointers. This is our motivation for
focusing on binary-level techniques.
There are an enormous number of paths: In the example,
there is a new path on every encounter of an if statement,
which can lead to an exponential path explosion. Additionally,
the number of paths in many portions of the code is related to
the size of the input. For example, memcmp unfolds a loop,
creating a new path for symbolic execution on each iteration.
Longer inputs mean more conditions, more forks, and harder
scalability challenges. Unfortunately most exploits are not
short strings, e.g., in a buffer overﬂow typical exploits are
hundreds or thousands of bytes long.
The more checked paths, the better: To reach the ex-
ploitable fprintf bug in the example, MAYHEM needs to
reason through the loop, read input, fork a new interpreter
for every possible path and check for errors. Without careful
resource management, an engine can get bogged down with
too many symbolic execution threads because of the huge
number of possible execution paths.
Execute as much natively as possible: Symbolic execution
is slow compared to concrete execution since the semantics
of an instruction are simulated in software. In orzHttpd,
millions of instructions set up the basic server before an
attacker can even connect to a socket. We want to execute
these instructions concretely and then switch to symbolic
Mayhem
(CEC)
(SES)
Concrete Execution Client
Symbolic Execution Server
Binary
Input
Spec.
Target
Machine
Taint Tracker
Dynamic Binary 
Instrumentator
(DBI)
Virtualization
Layer
Operating 
System
Hardware
Symbolic
Evaluator
Path Selector
Exploit Generator
Checkpoint
Manager
Check
Points
Figure 2: MAYHEM architecture
Buggy
Inputs
Test
Cases
Exploits
execution.
The MAYHEM architecture for ﬁnding exploitable bugs is
shown in Figure 2. The user starts MAYHEM by running:
mayhem -sym-net 80 400 ./orzhttpd
The command-line tells MAYHEM to symbolically execute
orzHttpd, and open sockets on port 80 to receive symbolic
400-byte long packets. All remaining steps to create an exploit
are performed automatically.
MAYHEM consists of two concurrently running processes:
a Concrete Executor Client (CEC), which executes code
natively on a CPU, and a Symbolic Executor Server (SES).
Both are shown in Figure 2. At a high level, the CEC runs on
a target system, and the SES runs on any platform, waiting
for connections from the CEC. The CEC takes in a binary
program along with the potential symbolic sources (input
speciﬁcation) as an input, and begins communication with
the SES. The SES then symbolically executes blocks that the
CEC sends, and outputs several types of test cases including
normal test cases, crashes, and exploits. The steps followed
by MAYHEM to ﬁnd the vulnerable code and generate an
exploit are:
1) The --sym-net 80 400 argument tells MAYHEM to
perform symbolic execution on data read in from a socket
on port 80. Effectively this is specifying which input
sources are potentially under attacker control. MAYHEM
can handle attacker input from environment variables, ﬁles,
and the network.
2) The CEC loads the vulnerable program and connects to
the SES to initialize all symbolic input sources. After the
initialization, MAYHEM executes the binary concretely on
the CPU in the CEC. During execution, the CEC instru-
ments the code and performs dynamic taint analysis [23].
Our taint tracking engine checks if a block contains tainted
instructions, where a block is a sequence of instructions
that ends with a conditional jump or a call instruction.
3) When the CEC encounters a tainted branch condition or
jump target, it suspends concrete execution. A tainted
jump means that the target may be dependent on attacker
382
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:45 UTC from IEEE Xplore.  Restrictions apply. 
input. The CEC sends the instructions to the SES and the
SES determines which branches are feasible. The CEC
will later receive the next branch target to explore from
the SES.
4) The SES, running in parallel with the CEC, receives a
stream of tainted instructions from the CEC. The SES
jits the instructions to an intermediate language (§III),
and symbolically executes the corresponding IL. The
CEC provides any concrete values whenever needed, e.g.,
when an instruction operates on a symbolic operand and
a concrete operand. The SES maintains two types of
formulas:
Path Formula: The path formula reﬂects the constraints to
reach a particular line of code. Each conditional jump adds
a new constraint on the input. For example, lines 32-33
create two new paths: one which is constrained so that the
read input ends in an \r\n\r\n and line 35 is executed,
and one where the input does not end in \r\n\r\n and
line 28 will be executed.
Exploitability Formula: The exploitability formula deter-
mines whether i) the attacker can gain control of the
instruction pointer, and ii) execute a payload.
5) When MAYHEM hits a tainted branch point, the SES
decides whether we need to fork execution by querying
the SMT solver. If we need to fork execution, all the
new forks are sent to the path selector to be prioritized.
Upon picking a path, the SES notiﬁes the CEC about the
change and the corresponding execution state is restored.
If the system resource cap is reached, then the checkpoint
manager starts generating checkpoints instead of forking
new executors (§IV). At the end of the process, test cases
are generated for the terminated executors and the SES
informs the CEC about which checkpoint should continue
execution next.
6) During the execution, the SES switches context between