ports our intuition that a majority of the false positives can
be eliminated while maintaining reasonable false negatives,
by choosing a suitable threshold. But ﬁrst, in the following
subsections, we present each step of this algorithm in greater
detail.
2.2 The “Mutual-Contacts” Graph
We denote the mutual-contacts graph constructed from
the ﬂow records of a network by G = (N, E), where the
Seed-Bot
Seed-Bot
Dormant
Bots
Benign
Hosts
Benign
Hosts
Dormant
Bots
Benign
Hosts
Benign
Hosts
(b)
(a)
Figure 2:
(a) Illustration of a mutual-contacts
graph. P2P bots tend to share mutual-contacts
with each other (black edges). Also some benign
hosts share mutual-contacts among themselves (blue
edges), which may be due to a legitimate P2P appli-
cation. (b) Illustration of the dye-ﬂow in the Dye-
Pumping algorithm.
nodes correspond to hosts and the edges indicate private
mutual-contacts. Each edge on the graph has a capacity
which is determined by the exact number of mutual-contacts
between corresponding hosts. More formally, if Eij repre-
sents the capacity of the edge between nodes Ni and Nj,
then we can write:
Eij = Eji = |S(Ni) ∩ S(Nj)|
where S(Ni) represents the set of mutual-contacts which Ni
was in communication with during the observation period
and | · | represents the cardinality of a set. Notice that,
if nodes Ni and Nj don’t share any mutual-contacts then
there is no edge between them on the graph or equivalently
Eij = 0.
2.3 The “Dye-Pumping" Algorithm
Once the mutual-contacts graph is constructed, the dye-
pumping algorithm is executed to compute the conﬁdence
levels of hosts being part of the P2P botnet. The dye-
pumping algorithm iteratively pumps dye to the mutual-
contacts graph from the seed node and picks the nodes which
accumulates more dye than a threshold. During the process,
dye coming to a node is distributed to other nodes propor-
tional to a heuristic called the dye-attraction coeﬃcient,
which helps the algorithm to funnel more dye towards the
nodes which are more likely to be P2P bots.
Dye-Attraction Coeﬃcient is denoted by γji, and indi-
cates what portion of the dye arriving at Node j will be
distributed to Node i in the next iteration. Intuitively, it
represents our conﬁdence on Node i being a P2P bot given
that Node j is a P2P bot. Such conﬁdence gets higher as
Node i and Node j share more private mutual-contacts with
each other. On the other hand, our conﬁdence reduces if
Node i shares mutual-contacts with many other nodes in the
graph. The reason is that we expect to have few bots in our
network and therefore if a host shares mutual-contacts with
many other hosts, then these mutual-contacts are probably
due to a diﬀerent application other than botnet C&C. Con-
sequently, we compute the dye-attraction coeﬃcient from
Node j to Node i as follows:
γji = Eji
(Di)β
133
where Di is the degree of Node Ni (i.e. number of neighbors
or edges that Ni has) and β is the Node Degree Sensitiv-
ity Coeﬃcient. Basically, nodes with high degrees receive
less and less dye as β increases.
The Dye-pumping Algorithm has three inputs, namely
the edge capacities (Eji) of the mutual-contacts graph (E
represents the matrix containing all Eji values), the in-
dex (s) of the seed node Ns, and the number of iterations
(maxIter). Given these inputs, the dye-pumping algorithm
ﬁrst computes the dye-attraction coeﬃcients from edge ca-
pacities and forms the transition matrix T such that:
T(i, j) = γji = Eji
(Di)β
where i = 1, ..., v and j = 1, ..., v. Also T(i, j) = 0 if i = j.
Notice that the transition matrix of a mutual-contacts graph
with v nodes is a v × v square matrix.
Following that, the algorithm normalizes T, so that each
of its columns sums to 1 (i.e. stochastic matrix). If T in-
dicates the normalized transition matrix, the normalization
procedure can be written as T(i, j) =
T(i,j). After
normalization, the algorithm iteratively pumps dye to the
mutual-contacts graph from the seed node. For this purpose,
let the column vector L is the dye level vector, where L(i)
indicates the dye level accumulated at node i. The pumping
begins with ﬁlling the seed node with dye and leaving the
others empty such that:
T(i,j)(cid:2)v
i=1
(cid:3)
L(i) =
1,
0,
if s = i
elsewhere
Once the seed node is ﬁlled with dye, the algorithm pumps
dye from the seed node across the mutual-contacts graph.
Since the outgoing edges distribute the dye accumulated
within a node proportional to their capacities, the dye levels
at next iteration can be computed as:
v(cid:4)
L(i) =
T(j, i)L(j)
j=1
which can be also written in matrix form as L = TL. At
each iteration, after updating L, the algorithm pumps more
dye to the graph from the seed node by updating L(s) =
L(cid:2)v
L(s) + 1. Following that the vector L is normalized after
i=1 L(i). Finally after maxIter it-
each iteration as L =
erations, the dye-pumping algorithm outputs the dye-level
vector L. The steps of the dye-pumping algorithm are sum-
marized below:
L(i) {Normalize dye level vector}
L(s) ← L(s) + 1 {Pump dye from the seed node}
L ← L(cid:2)
L ← TL {Distribute dye in network for one iteration}
Algorithm 1 Dye_P umping(E, s, maxIter)
1: T ← computeT ransitionM atrix(E)
2: T ← normalize(T)
3: L ← [0, 0, ..., 0]tr {initialize L as a zero vector}
4: for iter = 1 to maxIter do
5:
6:
7:
8: end for
9: output L
Once the algorithm outputs the vector L, the dye level
of each node (L(i)) indicates the conﬁdence level for the
corresponding host being a member of the same P2P botnet
as the seed node. To have a more conclusive result, we set a
threshold thr such that the nodes having a dye level greater
134
than thr are declared as potential members of the same P2P
botnet as the seed bot.
Notice that the algorithm involves a constant number of
matrix multiplications. Hence, the complexity of a naive
implementation of the algorithm is cubic in the number of
nodes. However, both dye-level vector (L) and transition
matrix (T) are sparse. Therefore one can implement the
dye-pumping algorithm asymptotically faster by using fast
sparse matrix multiplication techniques.
3. EXPERIMENTS
3.1 Detecting Nugache Peers
In order to systematically assess the performance of the
proposed scheme against a real-world botnet, one needs to
know the IP addresses of the members of a P2P botnet in
a given network. Otherwise, nothing can be said about the
true positive or false alarm rate without knowing the ground
truth. One way to obtain the ground truth is to blend real
botnet data into the network traﬃc and make few hosts look
as if they have been infected by the botnet. This strategy
essentially aggregates real botnet traﬃc and real user traf-
ﬁc on some of the hosts and therefore provides a realistic
scenario. From the proposed scheme’s perspective, to make
a host look like a P2P bot, one can ﬁrst capture the ﬂow
records of the network, which contains the host, during a
time window. Then one can collect the ﬂow records form a
real P2P bot during a similar time window. Following that,
one can change the bot’s IP address in these botnet ﬂow
records to a selected host’s IP address and append them to
the ﬂow records of the entire network so that, along with its
original traﬃc, the selected host will appear as if it has also
communicated with the external IP addresses that the real
bot has talked to.
In order to establish the ground truth for our experiments,
we utilize the data collected from the Nugache botnet, which
has been thoroughly studied in [30][8]. Brieﬂy speaking,
Nugache is a P2P botnet that uses random high-numbered
ports for its communication over TCP. The data we use
in our experiments was compiled by the Nugache crawler
presented in [10] and its communication between Nugache
peers.
Nugache Botnet Data: Details on the Nugache botnet
and Nugache crawler can be found in [30] and [8]. In sum-
mary, the C&C protocol of Nugache enables querying a peer
for its list of known peers and a list of recently communi-
cated peers. Using this functionality, the crawler starts from
a series of seed peers and traverses the botnet by querying
peers for their list of known peers. The crawler maintains
the list of recently communicated peers for each accessible
Nugache peer. Consequently, when it ﬁnishes crawling, it
produces list of recently communicated peers for several Nu-
gache peers.
In our experiments, we used the data collected by the
crawler when Nugache was active. To collect data, the
crawler was executed repeatedly for 9 days, where each ex-
ecution lasted roughly 30 to 45 minutes. We used a 24-hour
observation window for our experiments. Hence, we em-
ployed several randomly selected 24-hour segments of the
crawler data from the 9-day results in our experiments to
cover the botnet dynamics during all 9 days. We observed
that in any of these 24-hour segments, 904 Nugache peers
responded to the crawler on an average. We also observed
that 34% of all possible pairs of Nugache peers communi-
103
102
101
k=3
k=5
k=10
100
101
102
Node Degree
100
103
(a) Node Degree Dist.
103
102
101
100
0
k=3
k=5
k=10
1
Clustering Coefficient
0.6
0.8
0.2
0.4
(b) Clustering Coeﬀ. Dist.
Figure 3: Node Degree and Clustering Coeﬃcient
distributions of the mutual-contacts graph of the
background traﬃc for diﬀerent privacy threshold (k)
values.
cated with at least one mutual-contact on average.
Background Traﬃc: In order to obtain background traf-
ﬁc that we could blend with Nugache traﬃc, we captured
the ﬂow records observed at the border of Polytechnic In-
stitute of NYU network during a typical weekday (i.e. the
observation window is 24 hours). Collected ﬂow records in-
dicate that there were 2128 active IP addresses in our net-
work during the observation window. We then extracted
mutual-contacts from the recorded data. To ensure a valid
communication (i.e. not a scan ﬂow), we only considered
external IPs which exchanged suﬃcient amount of data (i.e.
at least 256 bytes) in both directions with at least one inter-
nal IP. Finally we built the corresponding mutual-contacts
graph to serve as a basis for our experiments.
We immediately observed in the mutual-contacts graph
that DNS servers within the network shared a signiﬁcantly
large number of mutual-contacts with each other. As a mat-
ter of fact, DNS servers constituted the highest-magnitude
entries of the ﬁrst eigenvector of the matrix (E) whose en-
tries are the corresponding edge capacities (Eij). This is
not surprising since DNS servers in a network communicates
with many other DNS servers around the world. Obviously
this relationship among DNS servers dominates the mutual-
contacts graph and taints the results of the Dye-Pumping
algorithm. Hence, we removed all the edges of the 11 DNS
servers in the network from the mutual-contacts graph.
The mutual-contacts graph extracted from the background
traﬃc suggests that majority of the hosts share none or very
few mutual-contacts with other nodes. This can be observed
in Figure 3(a), where we plot the distribution of node de-
grees (i.e. no of edge of a node). Figure 3(a) also shows,
as expected, that nodes usually have a higher degree in the
mutual contact graph when a higher privacy threshold (k)
value is used to construct the graph.
We then looked at the clustering coeﬃcient, which is de-
ﬁned as the ratio of the number of the actual edges of a node
to the number of all possible edges among it’s neighbors.
We plot the clustering coeﬃcient distribution of the nodes
in Figure 3(b). We observe that the mutual contact-graph
is a lot more clustered than a comparable random graph (i.e
same number of nodes and edges). For instance the cluster-
ing coeﬃcient distribution of a random graph comparable to
the mutual-contacts graph with k = 5 has a mean of 0.006
and standard deviation of 0.009. This suggests that there are
communities of hosts in the observed network where commu-
nity members usually communicate with the same external
IPs that are exclusive to the corresponding community. One
can speculate that these communities may represent peers
of diﬀerent P2P networks (legitimate or bot) or a group of
users visiting similar websites etc.
Experiments with Nugache: In order to assess the per-
formance of the proposed scheme in detecting Nugache bots,
we randomly picked m Nugache peers from a randomly se-
lected 24-hour segment of the crawler data. Then, we com-
puted the mutual-contacts graph corresponding to these m
Nugache peers based on the recently-communicated peers
ﬁeld of the crawler data. We then randomly picked m inter-
nal hosts from the mutual-contacts graph corresponding to
the background traﬃc. Finally, we superposed the mutual-