resent the journaling modes by specifying the type of data
they accept and the order in which the data must be written.
For example, the model for ordered journaling mode speci-
ﬁes that ordered data must be written before the metadata is
committed to the log.
We build the models as follows. First, we construct a
regular expression for each journaling mode. We use reg-
ular expressions because they can represent the journaling
modes concisely and they are easy to construct and under-
stand. Then, we build a model based on the regular expres-
sion. Figure 2 shows the models for each journaling mode.
The journaling models consist of different states. These
states represent the state of on-disk ﬁle system. The on-
disk ﬁle system moves from one state to another based on
the type of write it receives from the ﬁle system. We keep
track of this state change by moving correspondingly in the
model.
We explain brieﬂy the regular expression for each jour-
naling mode. Let, J represent journal writes, D represent
data writes, C represent journal commit writes, S repre-
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:10:16 UTC from IEEE Xplore.  Restrictions apply. 
J
S1
F
S3
C
J
F
J
S0
F
K/S
D
D/J
K/S
D
D/J
D/K/S
S2
S0
J
F
C
J
F
S1
D
F
S3
S2
S0
S2
J
F
C
J
F
S1
F
S3
(a) Data Journaling Model
(b) Ordered Journaling Model
(c) Writeback Journaling Model
Figure 2: Journaling Models. This ﬁgure shows the models that we use for verifying the different journaling modes. Each model is built
based on a regular expression and then the state S3, which represents the state that is reached on any write failure, is added to it. In the
above models, J represents journal writes, D represents data writes, C represents journal commit writes, K represents checkpoint writes,
S represents journal super block writes, and F represents any write failure.
sent journal super block writes, K represent checkpoint data
writes and F represent any write failures.
Data Journaling: Data journaling can be expressed by the
following regular expression:
((J +C)+(K∗S∗)∗)+.
In data journaling mode, all the ﬁle system writes are jour-
naled (represented by J) and there are no ordered or un-
ordered writes. After writing one or more journal blocks,
a commit block (represented by C) is written by the ﬁle
system to mark the end of the transaction. The ﬁle sys-
tem could write one or more such transactions to the log.
Once the transactions are committed, the ﬁle system might
write the checkpoint blocks (represented by K) to their
ﬁxed locations or the journal super block (represented by
S) to mark the new head and tail of the journal. We con-
vert this regular expression to a state diagram as shown in
Figure 2(a) and add the failure state S3 to it.
Ordered Journaling:
pressed by the following regular expression:
(((D∗J +D∗)+C)+(K∗S∗)∗)+.
Ordered journaling can be ex-
In ordered mode, data (D) must be written before meta-
data blocks are committed to the journal. Note that the data
blocks can be issued in parallel with the journal writes (J)
but all of those writes must be complete before the commit
block (C) is written. Once the commit block is written, the
transaction is over. There could be one or more such trans-
actions. Similar to data journaling, the ﬁle system can write
the checkpoint blocks (K) or the journal super block (S)
after the transactions. This regular expression is converted
into a state diagram and a failure state S3 is added to it as
shown in Figure 2(b).
Writeback Journaling: Writeback journaling is given by
the following regular expression:
(((D∗J +D∗)+C)+(K∗D∗S∗)∗)+.
In writeback journaling mode, the data (D) can be written
at any time by the ﬁle system. It can be written before the
journal writes (J) or after them. Once the journal writes are
complete, a commit block (C) is written. After the transac-
tion is committed, the ﬁle system can write the journal su-
per block (S) or the checkpoint blocks (K) or the unordered
writes (D). The writeback journaling model in Figure 2(c)
is obtained by taking this regular expression and adding the
state S3 to it.
3.4 Error Model
In our error model, we assume that the latent errors orig-
inate from the storage subsystem. These errors can be accu-
rately modeled through software-based fault injection be-
cause in Linux, all such low-level errors are reported to
the ﬁle system in a uniform manner as “I/O errors” at the
device-driver layer.
Write failures can be due to several reasons. The media
on the disk could be corrupt or it could be damaged by the
moving parts in the disk (e.g., head crash) and this can cause
write failures. In a study by Talagala [19], it is found that the
interconnecting bus can be faulty, leading to timeouts; this
can result in transient or permanent write errors. Finally, the
low level device drivers can be buggy and can cause write
failures.
The errors we inject into the block write stream have
three different attributes, similar to the classiﬁcation of
faults injected to the Linux kernel by Gu et al. [7]. The co-
ordinator passes the fault speciﬁcation to the fault-injection
driver with the following attributes:
What: This speciﬁes the ﬁle system to test. The driver cur-
rently understands ext3, Reiserfs, and IBM JFS ﬁle system
semantics.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:10:16 UTC from IEEE Xplore.  Restrictions apply. 
Which: This attribute speciﬁes the block type and it de-
termines which request in a given trafﬁc stream must be
failed. The fault-injection driver can identify the follow-
ing list of block types: ordered data, journal metadata such
as the commit block or the journal super block, journal data,
and checkpoint data. Not all request types are supported by
all the ﬁle systems, and therefore this attribute can change
depending on the ﬁle system. The request to be failed can
be a dynamically-typed one (like a journal commit block)
or a statically typed one (like a journal super block).
How long: This determines whether the fault that is in-
jected is a transient error (i.e., fails for the next N requests,
but then succeeds), or a permanent one (i.e., fails upon all
subsequent requests).
3.5 Failure Classiﬁcation
We now classify the different ways in which the ﬁle sys-
tem can fail due to the write failures. The type of losses one
might incur after the write failure are as follows:
No Loss: The ﬁle system handles the write failure properly
and prevents its data from getting corrupted or lost.
Data Corruption:
In this case, write failures lead to data
corruption but not metadata corruption. Although the ﬁle
system metadata structures remain consistent, data from
ﬁles can get corrupted. This type of failure can occur if the
data block pointers from metadata blocks point to invalid
contents on the disk. Note that these type of errors cannot
be detected by fsck.
Data Loss:
In this type of failure, ﬁle data is lost due to
transient or permanent write failures. Data loss can occur if
the data block pointers are not updated correctly.
Files and Directories Loss: In this case, ﬁle system meta-
data is corrupted. This can result in lost ﬁles or directories.
Unmountable File System: When write failures happen,
the ﬁle system can corrupt its important metadata blocks
like the super block or group descriptors and as a result can
become unmountable.
File System Crash: Write failures can lead to some seri-
ous ﬁle system reactions, such as a system-wide crash. This
failure could be initiated by an explicit call such as panic
or due to other reasons such as dereferencing a null pointer.
3.6 Why Semantic Fault Injection?
One question we have to address is why the fault injec-
tion technique has to be ﬁle-system aware. Is it possible to
conduct a similar analysis without semantic knowledge?
The device driver that we use to fail the disk writes un-
derstands the various ﬁle system block types and transaction
boundaries. Without this high-level information, the driver
does not know the type of block it receives and therefore
it cannot determine if it is failing a journal block or a data
D
S0
(a)
J
S1
D
J
S0
(b)
D
J
J
S0
C
S2
S1
(c)
D
J
J
S0
C
S1
(d)
K
S2
D
J
J
S0
S1
F
S3
(e)
Figure 3: Fault Injection Example. This ﬁgure shows the se-
quence of steps followed by the fault-injection driver to track
transaction writes in ordered journaling mode and fail the com-
mit block write.
block. This information is important because ﬁle systems
behave differently on different block-write failures. For ex-
ample, Reiserfs crashes on journal write failures and does
not crash on data-block write failures. Moreover, depending
on the type of block failed, the ﬁle system errors can vary
from data corruption to unmountable ﬁle systems. With ﬁle-
system knowledge, it is possible to answer why the ﬁle sys-
tem fails in a certain way. Having higher-level semantic
knowledge also enables us to identify several design ﬂaws
that would not have been identiﬁed if the fault injection was
performed without any semantic information, as we will see
in our analysis.
3.7 Putting it All Together:
An Example of Fault Injection
We conclude this methodology section with an example
of how a fault is injected using the journaling model. Fig-
ure 3 shows the sequence of steps followed by the fault-
injection driver to track the ﬁle system writes and inject the
fault. In this example, we consider failing a commit block
write of a transaction in ordered journaling mode. Each
step in the ﬁgure captures a transition to a different state.
Initially, the transaction starts with a set of ordered data
writes (Figure 3a). After the data writes, the journal blocks
are logged (Figure 3b). The commit block is written after
all the data and journal writes are complete and it is failed
(Figure 3c). The ﬁle system can be oblivious to this com-
mit block failure and continue to checkpoint the journaled
blocks (Figure 3d). Or, the ﬁle system can recognize this
failure and take steps to prevent ﬁle system corruption by
moving to state S3 (Figure 3e). In state S3, the ﬁle system
could abort the failed transaction, or do bad block remap-
ping, or remount itself read-only, or crash the system.
From the example, we can see that it is not sufﬁcient to
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:10:16 UTC from IEEE Xplore.  Restrictions apply. 
know just the block types to inject faults in ﬁle system re-
quests. Without the model, the fault-injection driver cannot
determine if the requests following a write failure belong
to the failed transaction or to new transactions from the ﬁle
system. By keeping track of the writes using the journaling
model, the fault-injection driver can explain why a particu-
lar block write failure leads to certain ﬁle system errors.
4 Analysis
In this section, we explain the failure analysis for three
Linux based journaling ﬁle systems: ext3, Reiserfs, and
IBM JFS.
4.1 Ext3 Analysis