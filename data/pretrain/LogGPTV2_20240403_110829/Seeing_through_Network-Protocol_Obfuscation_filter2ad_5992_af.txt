encrypted connections (TLS, SSH), and some censors have already
demonstrated a willingness to block these. Iran, for example, has
been known to block all TLS connections, or at least degrade their
performance [4].
(Degrading bandwidth of such ﬂows will tend
to force Tor to fail, but not non-Tor TLS.) Other countries have
mandated that ISPs prevent or limit use of encrypted protocols [14,
32]. Even so, the majority of ﬂows erroneously labeled by our
techniques as obfuscated are plain, unencrypted HTTP. It seems
reasonable that blocking these will be less palatable for censors
with sensitivity to collateral damage.
Some sophisticated censors have moved to a two-stage detection
pipeline to improve accuracy. China’s so-called Great Firewall ﬁrst
uses DPI to ﬂag ﬂows as potentially resulting from a censorship
circumvention tool. Measurements suggest that they ﬂag any TLS
connection that has the same list of allowed ciphers as a Tor client
as a possible Tor connection [50, 51]. The destination IP address
of all such ﬂows is then submitted to a distributed system that
asynchronously performs an active probe of the remote IP address
using a Tor client. If the remote IP completes a Tor handshake,
then the IP is is added to a blacklist. See [50, 51] for a detailed
discussion of this behavior.
When using our obfuscator detection approaches in such a two-
stage pipeline, the false-positive rate of the deployed approach
will dictate the load on the more expensive, but more accurate,
second-stage. (Perfectly accurate, active attack on Tor that was just
described.) We refer to this second-stage as the DPI’s slow path,
and now turn to analyzing the slow-path load that would result from
using our tests using the collected traces for simulation.
Table 11 shows a summary of the load seen by the DPI in terms
of active ﬂows per second as broken down by the various traces.
For our purposes, a ﬂow is active from the time stamp of its ﬁrst
packet to the time stamp of its last packet. We also report statistics
regarding the load on the slow-path. A ﬂow is labeled as going to
the slow path whenever the combined ML-based classiﬁer labels
the trafﬁc as obfuscated (i.e., any of the individual classiﬁers gives
a positive label to the ﬂow). As is shown, the maximum number
of new slow-path ﬂows per second is modest –in the worst case
54 are active in any given second– and the average is less than
one. This suggests that, with minimal investment in the slow-
path infrastructure, a censor could easily keep up with the false-
positive rate of our obfuscation detectors. Of course, nation-state
censors deal networks even larger than those considered in our
work. Hence, caution should be exercised when extrapolating
results from our setting to others.
8. CONCLUSION
We set out to answer the question of whether censors can use DPI
to detect use of in-use network protocol obfuscators. Unfortunately,
67Avg. DPI load
Max. DPI load
Avg. slow-path load
Max. slow-path load
Slow-path active time
OfﬁceDataset CloudDataset WiﬁDataset
182.2
1,580
0.77
54
39.1%
138.5
1,042
0.60
24
38.2%
14.6
362
0.08
29
4.7%
Table 11: Summary statistics for DPI load (number of ﬂows per
second) and the slow-path load—the number of ﬂows per second
ﬂagged as any obfuscator by our best-performing ML classiﬁers.
our analyses suggest that the answer is ‘yes’. We present the ﬁrst
comprehensive analysis of detectability of in-use network protocol
obfuscators, as they are deployed in Tor. Our analyses reveal fast
entropy-based tests for randomizer protocols and FTE (which is
mostly randomized), and slightly less efﬁcient, but still practical,
machine learning-based attacks that reliably detect meek, a state-
of-the-art tunneling obfuscator. We also show that some semantics-
based detection tests suggested in the literature are less effective
than a censor might like, due to the inherent long tail of non-
standard network trafﬁc. This suggests that future development
of semantics-based tests should necessarily perform false positive
analyses. Towards helping future researchers with such tasks, we
will make our analysis platform open source for other researchers.
It is important to note that the detection techniques we explore
can be,
in turn, easily circumvented in almost all cases with
simple updates to the obfuscator. This suggests that with the
current state-of-the-knowledge on building practical obfuscators,
anti-censorship tools will only have the advantage when censors
remain ignorant of (or choose to ignore knowledge of) the details
of their design. Building more robust, future-proof obfuscators
that cannot be blocked by future, efﬁcient DPI algorithms with
knowledge of the obfuscator design remains an open question.
9. ACKNOWLEDGMENTS
The authors would like to especially thank the system admin-
istrators at the University of Wisconsin who helped ensure the
experiments went smoothly. This work was supported in part by the
National Science Foundation under grants CNS-1546033, CNS-
1330308, CNS-1065134, CNS-0845610, and CNS-1319061, and
by a generous gift from Dr. Eric Schmidt (New Digital Age grant).
10. REFERENCES
[1] M. AlSabah, K. Bauer, and I. Goldberg. Enhancing tor’s
performance using real-time trafﬁc classiﬁcation. In
Proceedings of the 2012 ACM conference on Computer and
communications security, pages 73–84. ACM, 2012.
[2] Apache. Hive operators and user-deﬁned functions.
https://cwiki.apache.org/confluence/
display/Hive/LanguageManual+UDF, 2015.
[3] J. Appelbaum and N. Mathewson. Pluggable transports for
circumvention. https://www.torproject.org/
docs/pluggable-transports.html.en, 2012.
[4] S. Aryan, H. Aryan, and J. A. Halderman. Internet censorship
in iran: A ﬁrst look. Free and Open Communications on the
Internet, Washington, DC, USA, 2013.
[5] J. Barker, P. Hannay, and P. Szewczyk. Using trafﬁc analysis
to identify the second generation onion router. In Embedded
and Ubiquitous Computing (EUC), 2011 IFIP 9th
International Conference on, pages 72–78. IEEE, 2011.
[6] L. Bernaille, R. Teixeira, I. Akodkenou, A. Soule, and
K. Salamatian. Trafﬁc classiﬁcation on the ﬂy. ACM
SIGCOMM Computer Communication Review, 36(2):23–26,
2006.
[7] X. Cai, X. C. Zhang, B. Joshi, and R. Johnson. Touching
from a distance: Website ﬁngerprinting attacks and defenses.
In Proceedings of the 2012 ACM conference on Computer
and Communications Security, pages 605–616. ACM, 2012.
[8] A. Communeau, P. Quillent, and A. Compain. Detecting FTE
proxy. 2014.
[9] D. Cournapeau. Scikit-learn: Machine learning in Python.
http://scikit-learn.org/, 2007.
[10] J. Davis and M. Goadrich. The relationship between
precision-recall and roc curves. In Proceedings of the 23rd
international conference on Machine learning, pages
233–240. ACM, 2006.
[11] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
second-generation onion router. Technical report, DTIC
Document, 2004.
[12] K. P. Dyer, S. E. Coull, T. Ristenpart, and T. Shrimpton.
Protocol misidentiﬁcation made easy with
format-transforming encryption. In Proceedings of the 2013
ACM SIGSAC conference on Computer & communications
security, pages 61–72. ACM, 2013.
[13] K. P. Dyer, S. E. Coull, and T. Shrimpton. Marionette: A
programmable network-trafﬁc obfuscation system. In
Proceedings of USENIX Security 2015, August 2015.
[14] Eugene. Age of surveillance: the ﬁsh is rotting from its head.
http://non-linear-
response.blogspot.com/2011/01/age-of-
surveillance-fish-is-rotting.html, 2011.
[15] Hill01. "Weird" utf-8 characters in POST body causing
content-length mismatch. https://github.com/
strongloop/express/issues/1816, 2013.
[16] A. Houmansadr, C. Brubaker, and V. Shmatikov. The parrot
is dead: Observing unobservable network communications.
In Security and Privacy (SP), 2013 IEEE Symposium on,
pages 65–79. IEEE, 2013.
[17] ISO. 171/sc 2: Iso 32000–1: 2008 document
management-portable document format-part 1: Pdf 1.7.
[18] E. Jones, T. Oliphant, P. Peterson, et al. SciPy: Open source
scientiﬁc tools for Python. http://www.scipy.org/,
2001.
[19] M. Juarez, S. Afroz, G. Acar, C. Diaz, and R. Greenstadt. A
critical evaluation of website ﬁngerprinting attacks. In
Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security, pages 263–274.
ACM, 2014.
[20] T. Karagiannis, K. Papagiannaki, and M. Faloutsos. Blinc:
multilevel trafﬁc classiﬁcation in the dark. In ACM
SIGCOMM Computer Communication Review, volume 35,
pages 229–240. ACM, 2005.
[21] K. H. Kremer. The trouble with the XREF table.
http://khkonsulting.com/2013/01/the-
trouble-with-the-xref-table/, 2013.
[22] B. Krishnamurthy, J. C. Mogul, and D. M. Kristol. Key
differences between HTTP/1.0 and HTTP/1.1. Computer
Networks, 31(11):1737–1751, 1999.
[23] B. Leidl. Obfuscated-openssh. https:
//github.com/brl/obfuscated-openssh, 2009.
[24] D. Luchaup, K. P. Dyer, S. Jha, T. Ristenpart, and
T. Shrimpton. LibFTE: A toolkit for constructing practical,
format-abiding encryption schemes. In Proceedings of
USENIX Security 2014, August 2014.
68[25] Microsoft. Invalid content-length header may cause requests
to fail through ISA server. https:
//support.microsoft.com/en-us/kb/300707,
2007.
[26] H. Mohajeri Moghaddam, B. Li, M. Derakhshani, and
I. Goldberg. Skypemorph: Protocol obfuscation for tor
bridges. In Proceedings of the 2012 ACM conference on
Computer and communications security, pages 97–108.
ACM, 2012.
[27] T. T. Nguyen and G. Armitage. Training on multiple
sub-ﬂows to optimise the use of machine learning classiﬁers
in real-world ip networks. In Local Computer Networks,
Proceedings 2006 31st IEEE Conference on, pages 369–376.
IEEE, 2006.
[28] Ntop.org. nDPI.
http://www.ntop.org/products/deep-
packet-inspection/ndpi/, 2015.
[29] G. Nychis, V. Sekar, D. G. Andersen, H. Kim, and H. Zhang.
An empirical evaluation of entropy-based trafﬁc anomaly
detection. In Proceedings of the 8th ACM SIGCOMM
conference on Internet measurement, pages 151–156. ACM,
2008.
[30] A. Panchenko, L. Niessen, A. Zinnen, and T. Engel. Website
ﬁngerprinting in onion routing based anonymization
networks. In Proceedings of the 10th annual ACM workshop
on Privacy in the electronic society, pages 103–114. ACM,
2011.
[31] V. Paxson. Bro: a system for detecting network intruders in
real-time. Computer networks, 31(23):2435–2463, 1999.
[32] Phobos. Kazakhstan upgrades censorship to deep packet
inspection. https://blog.torproject.org/blog/
kazakhstan-upgrades-censorship-deep-
packet-inspection, 2012.
[33] S. Rayanchu, A. Mishra, D. Agrawal, S. Saha, and
S. Banerjee. Diagnosing wireless packet losses in 802.11:
Separating collision from weak signal. In INFOCOM 2008.
The 27th Conference on Computer Communications. IEEE.
IEEE, 2008.
[34] C. Reis, R. Mahajan, M. Rodrig, D. Wetherall, and
J. Zahorjan. Measurement-based models of delivery and
interference in static wireless networks. volume 36, pages
51–62. ACM, 2006.
[35] A. Rukhin, J. Soto, J. Nechvatal, M. Smid, and E. Barker. A
statistical test suite for random and pseudorandom number
generators for cryptographic applications. Technical report,
DTIC Document, 2001.
[36] C. Sanders, J. Valletta, B. Yuan, and D. Johnson. Employing
entropy in the detection and monitoring of network covert
channels. 2012.
[37] Seleniumhq.org. Selenium - web browser automation.
http://www.seleniumhq.org/, 2015.
[38] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka,
S. Anthony, H. Liu, P. Wyckoff, and R. Murthy. Hive: a
warehousing solution over a map-reduce framework.
Proceedings of the VLDB Endowment, 2(2):1626–1629,
2009.
[39] Tor project. Obfsproxy2.
https://gitweb.torproject.org/pluggable-
transports/obfsproxy.git/tree/doc/obfs2/
obfs2-protocol-spec.txt, 2015.
[40] Tor project. Obfsproxy3.
https://gitweb.torproject.org/pluggable-
transports/obfsproxy.git/tree/doc/obfs3/
obfs3-protocol-spec.txt, 2015.
[41] Tor project. Stem. https://stem.torproject.org/,
2015.
[42] Tor project. Tor meek. https://trac.torproject.
org/projects/tor/wiki/doc/meek, 2015.
[43] Tor project. Tor metrics.
https://metrics.torproject.org/, 2015.
[44] University of Washington. uProxy.
https://www.uproxy.org/, 2015.
[45] Q. Wang, X. Gong, G. T. Nguyen, A. Houmansadr, and
N. Borisov. Censorspoofer: asymmetric communication
using ip spooﬁng for censorship-resistant web browsing. In
Proceedings of the 2012 ACM conference on Computer and
communications security, pages 121–132. ACM, 2012.
[46] Z. Weinberg, J. Wang, V. Yegneswaran, L. Briesemeister,
S. Cheung, F. Wang, and D. Boneh. Stegotorus: a
camouﬂage proxy for the tor anonymity system. In
Proceedings of the 2012 ACM conference on Computer and
communications security, pages 109–120. ACM, 2012.
[47] A. M. White, S. Krishnan, M. Bailey, F. Monrose, and P. A.
Porras. Clear and present data: Opaque trafﬁc and its security
implications for the future. In NDSS, 2013.
[48] B. Wiley. Dust: A blocking-resistant internet transport
protocol. Technical rep ort. http://blanu. net/Dust. pdf, 2011.
[49] N. Williams, S. Zander, and G. Armitage. A preliminary
performance comparison of ﬁve machine learning algorithms
for practical IP trafﬁc ﬂow classiﬁcation. ACM SIGCOMM
Computer Communication Review, 36(5):5–16, 2006.
[50] P. Winter and J. R. Crandall. The great ﬁrewall of China:
How it blocks tor and why it is hard to pinpoint. 2012.
[51] P. Winter and S. Lindskog. How the great ﬁrewall of China is
blocking tor. Free and Open Communications on the
Internet, 2012.
[52] P. Winter, T. Pulls, and J. Fuss. Scramblesuit: A polymorphic
network protocol to circumvent censorship. In Proceedings
of the 12th ACM workshop on Workshop on privacy in the
electronic society, pages 213–224. ACM, 2013.
[53] X. Xu, Z. M. Mao, and J. A. Halderman. Internet censorship
in China: Where does the ﬁltering occur? In Passive and
Active Measurement, pages 133–142. Springer, 2011.
[54] Yawning. Obfsproxy4.
https://github.com/Yawning/obfs4/blob/
master/doc/obfs4-spec.txt, 2015.
[55] J. Yuan, Z. Li, and R. Yuan. Information entropy based
clustering method for unsupervised internet trafﬁc
classiﬁcation. In Communications, 2008. ICC’08. IEEE
International Conference on, pages 1588–1592. IEEE, 2008.
69