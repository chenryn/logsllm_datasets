### Encrypted Connections and Censorship

Encrypted connections, such as those using TLS and SSH, have become targets for censorship. Some censors, like Iran, have demonstrated a willingness to block or degrade the performance of these encrypted connections. For instance, Iran has been known to block all TLS connections or at least significantly reduce their performance [4]. Degrading the bandwidth of such flows can force Tor to fail, although non-Tor TLS connections may still function. Other countries have mandated that ISPs prevent or limit the use of encrypted protocols [14, 32]. Despite this, the majority of flows incorrectly labeled by our techniques as obfuscated are actually plain, unencrypted HTTP. It is reasonable to assume that blocking these flows would be less acceptable to censors concerned about collateral damage.

### Two-Stage Detection Pipeline

Some sophisticated censors, such as China's Great Firewall, have adopted a two-stage detection pipeline to improve accuracy. In the first stage, Deep Packet Inspection (DPI) is used to flag flows that may be from censorship circumvention tools. For example, any TLS connection with the same list of allowed ciphers as a Tor client is flagged as a possible Tor connection [50, 51]. The destination IP addresses of these flagged flows are then submitted to a distributed system that asynchronously performs an active probe using a Tor client. If the remote IP completes a Tor handshake, it is added to a blacklist. For a detailed discussion of this behavior, see [50, 51].

### DPI and Slow-Path Load Analysis

When using our obfuscator detection approaches in such a two-stage pipeline, the false-positive rate of the deployed approach will determine the load on the more expensive but more accurate second stage. We refer to this second stage as the DPI's slow path. Table 11 summarizes the load seen by the DPI in terms of active flows per second, broken down by various traces. A flow is considered active from the timestamp of its first packet to the timestamp of its last packet. We also report statistics regarding the load on the slow path. A flow is labeled as going to the slow path if the combined ML-based classifier labels the traffic as obfuscated (i.e., any of the individual classifiers give a positive label to the flow). As shown, the maximum number of new slow-path flows per second is modest, with a worst-case scenario of 54 active flows in any given second, and an average of less than one. This suggests that, with minimal investment in the slow-path infrastructure, a censor could easily keep up with the false-positive rate of our obfuscation detectors. However, caution should be exercised when extrapolating results from our setting to larger networks managed by nation-state censors.

| Metric | OfficeDataset | CloudDataset | Wi-FiDataset |
|--------|---------------|--------------|--------------|
| Avg. DPI load | 182.2 | 138.5 | 14.6 |
| Max. DPI load | 1,580 | 1,042 | 362 |
| Avg. slow-path load | 0.77 | 0.60 | 0.08 |
| Max. slow-path load | 54 | 24 | 29 |
| Slow-path active time | 39.1% | 38.2% | 4.7% |

### Conclusion

Our analysis aimed to determine whether censors can use DPI to detect the use of in-use network protocol obfuscators. Unfortunately, our findings suggest that the answer is "yes." We present the first comprehensive analysis of the detectability of in-use network protocol obfuscators as they are deployed in Tor. Our analyses reveal fast entropy-based tests for randomizer protocols and FTE (which is mostly randomized), and slightly less efficient but still practical machine learning-based attacks that reliably detect meek, a state-of-the-art tunneling obfuscator. We also show that some semantics-based detection tests suggested in the literature are less effective due to the inherent long tail of non-standard network traffic. This suggests that future development of semantics-based tests should necessarily perform false positive analyses. To assist future researchers, we will make our analysis platform open source.

It is important to note that the detection techniques we explore can, in most cases, be easily circumvented with simple updates to the obfuscator. This suggests that anti-censorship tools will only have the advantage when censors remain ignorant of (or choose to ignore knowledge of) the details of their design. Building more robust, future-proof obfuscators that cannot be blocked by future, efficient DPI algorithms with knowledge of the obfuscator design remains an open question.

### Acknowledgments

The authors would like to especially thank the system administrators at the University of Wisconsin who helped ensure the experiments went smoothly. This work was supported in part by the National Science Foundation under grants CNS-1546033, CNS-1330308, CNS-1065134, CNS-0845610, and CNS-1319061, and by a generous gift from Dr. Eric Schmidt (New Digital Age grant).

### References

[1] M. AlSabah, K. Bauer, and I. Goldberg. Enhancing tor’s performance using real-time traffic classification. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 73–84. ACM, 2012.
...
[55] J. Yuan, Z. Li, and R. Yuan. Information entropy based clustering method for unsupervised internet traffic classification. In Communications, 2008. ICC’08. IEEE International Conference on, pages 1588–1592. IEEE, 2008.