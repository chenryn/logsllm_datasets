throw new Exception(*Invalid data: row without table°);
$row = $table->addRow();
$cell = NULL;
} elseif ($keynord == *cell") {
1f ($ro == NULL)
throw new Exception(*Invalid data: cell without row");
$ce1l = $row->addCe11();
} else {
3.22 Construct a Parser I 237
---
## Page 254
throw new Exception(*Parser bug: unknown keyword");
}elseif ($matches[′string′][$i]!= NULL){
$content = $matches[′string′][$i];
$content = substr($content, 1, strlen($content)-2);
$content = str_replace('%%', *%’, $content);
1f ($ce1l != NULL)
$cell->addContent($content);
elseif ($row != NULL)
throw new Exception(*Invalid data: string after row keyword°);
elself ($table != NULL)
$table->addCaption($content);
else
throw new Exception(*Invalid data: string before table keyword");
}elseif ($matches[′error′][$i]!= NULL) {
throw new Exception("Invalid data: " + $matches[′error′][$i]);
} else {
throw new Exception("Parser bug: no capturing group matched");
1f ($table == MULL)
throw new Exception("Invalid data: table keyword missing*);
return $table;
Ruby
def importtable(filecontents)
table = nil
row = ni1
cell = ni1
groupkeyword = 0;
groupstring = 1;
regexp -/\b(table|xow|ce11)\b
grouperror =2;
1%（[%]*（？:2x[%]*)*）x
1(\s+)/ix
filecontents.scan(regexp) do |match]
1f match[groupkeyword]
keyword = natch[gxoupkeyword] -downcase
1f keyword == *table”
table = RECTable.new()
row = ni1
cel1 = nil
elsif keyuord ==
“xow”
1f table.nil?
raise “Invalid data: row without table"
end
238 | Chapter 3: Programming with RegularExpressions
---
## Page 255
row = table,addRow()
cell = nil
elsif keyuord == "cell"
if rou.nil?
raise "Invalid data: cell without row*
end
cell = row.addcell()
else
ralse
"Parser bug: unknown keyword*
elsif not match[groupstring].ni1?
pua
content = natch[groupstring]·gsub("x%","%")
if not cell.nil?
cell. addContent(content)
elsif not rou.nil?
raise "Invalid data: string after row keyord"
elsif not table.ni1?
table addCaption(content)
else
raise "Invalid data: string before table keyword*
end
elsif not match[grouperror].nil?
raise "Invalid data:
" + match.group("error*)
else
paupeu dnox8 Bufxnpdes ou :8nq xas.red., aste1
end
end
If table.nil?
raise “Invalid data: table keyword missing′
end
return table
end
Discussion
A straightforward way to create a parser is to use a regular expression to tokenize the
input and to use procedural code to parse those tokens.
To tokenize means to scan the file for tokens, which are the smallest elements that the
syntax allows. In the file format we're working with, those tokens are the three
keywords, strings enclosed by percentage signs, whitespace berween keywords and
strings, and nonwhitespace other than keywords and strings. We can easily create a
regular expression that matches each of these tokens.
\b(?table|ro|ce11)\b
%（（[%]xx）[%]）%
I(?\5+)
Regex options: Free-spacing, case insensitive
Regexflaver: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
3.22 Construct a Parser I 239
---
## Page 256
\b(?Ptable|row|ce11)\b
%（（[%]xx:）[%]d）%
|(?P\S+)
Regex options: Free-spacing, case insensitive
Regexflavors: PCRE 4 and later, Perl 5.10, Python
b(table |row|cel1)b
%（（[%]x%）[%])%1
(\s+)
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
（+S) |%(+（+[%]x)+[%])x|q(Ta|mox|qe)q
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
If you iterate over all the matches of this regular expression in the sample file, it will
match each keyword and string separately On anotherfile with invalid characters, each
sequence of invalid characters would also be matched separately. The regular expres-
sion does not match the whitespace between keywords and strings because the parser
does not need to process it. The word boundaries around the list of keywords are all
that is needed to make sure that keywords are delimited with whitespace. W'e use a
separate capruring group for each kind of token. That makes it much easier to identify
the token that was matched in the procedural part of our solution.
We use free-spacing and named capture to make our regular expression and our code
more readable in the programming languages that have regex flavors that support free-
spacing and named caprure. There is no functional difference berween these four reg-
ular expressions.
The capturing group for the strings does not include the percentage signs that enclose
the strings. The benefit is that the procedural code won’t have to remove those per-
centage signs to get the content of the string that was matched. The drawback is that
when the regex matches an empty sring (rwo percentage signs with nothing in be-
rween), the capruring group for the string willfind a zero-length match. When we test
which capturing group found the match, we have to make sure that we accept a zero-
length match as a valid match. In the JavaScript solution, for example, we use 1f
(match[groupstring]I== undefined), which evaluates to true if the group participated
in the match attempt, even when the match is empty. We cannot use 1f (natch[group
string]) because that evaluates to false when the group finds a zero-length match.
240 | Chapter 3: Programming with RegularExpressions
---
## Page 257
Internet Explorer 8 and prior do not follow the JavaScript standard that
requires nonparticipating groups to be undefined in the match object.
sible to distinguish between a group that did not participate, and one
-sodu  fueu sdnou Buedueduou sop sus du sauos g1
JavaScript solution will not work with IE8 and prior. This bug was fixed
that participated and captured a zero-length string, This means the
in Intermet Explorer 9.
The XRegExp.exec() method does return a match object that leaves non-
participating groups undefined, regardless of the browser running the
code. So does XRegExp, forEach() as it relies on XRegExp,exec(). If you
need a solution forbrowsers such as IE8 that aren’t standards-compliant
in this area, you should use the solution based on XRegExp.
In PHP, the preg_natch_al1() function stores MLL in the array for capruring groups
that found a zero-length match as well as for capturing groups that did not participate
in the match. Thus the PHP solution includes the enclosing percentage signs in the
string group. An extra line of PHP code calls substr to remove them.
The procedural code implements our parser. This parser has four different states. It
keeps track of the state it is in by checking which of the variables table, row, and ce11
are assigned.
1. Nothing: nothing has ben read yet. The variables table, ros, and cell are all
unassigned.
2. Inside table: a table keyword has been parsed. The variable table is assigned, while
row and cell are unassigned. Since a table can have any number of caption strings,
including none, the parser does not need a separate state to track whether a string
was parsed after the table keyword.
3. Inside row: a ro keyword has been parsed. The variables table and rou have been
assigned, while ce11 is unassigned.
4. Inside cell a cel1 keyword has been parsed. The variables table, ro, and cell have
all been assigned. Since a cell can have any number of caption strings, including
none, the parser does not need a separate state to track whether a string was parsed
after the cell keyword.
When the parser runs, it iterates over all matches in the regular expression. It checks
what kind of token was matched by the regular expression (a keyword, a string, or
invalid text) and then processes that token depending on the state the parser is in, as
shown in Table 3-2.
3.22 Construct a Parser | 241
---
## Page 258
Table 3-2. Regex matches are handled depending on the state of the parser
Match
State
Nothing
Inside table
Insiderow
Inside cell
keywod
Create new table and
Create new table and
Crete newtable and
pUe a 2
table
change state to “inside
change state to “inside
change state to “inside
change state to “inside
table"
table"
table*
table
keyword
Fail datais inwalid
Addirow to table and
Add row to table
Add rowto table and
roM
apsu,  aes afuep
p 5 p
rom”
row"
keyword
Fail dataisivalid
Fal: data isinralid
Add cel torow and
Ad celto row 
ce11
change state to “inside
cell
string
Fail data is inalid
Add caption to table
Fail: datais imalid
Add content to cell
ialid tesxt
Fail data is inwalid
Fal: data isinralid
Fal: dataisimalid
Fail data is invalid
See Also
Techniques used in the regular expression in this recipe are discussed in Chapter 2.
Recipe 2.6 explains word boundaries and Recipe 2.8 explains alternation, which we
used to match the keywords. Recipe 2.1l explains named capturing groups. Naming
the groups in your regex makes the regex easier to read and maintain.
To match the strings enclosed in percentage signs, we used the same technique ex-
plained in Recipe 7.8 for matching quoted strings in source code. The only difference
is that here the strings are enclosed with percentage signs rather than quotes.
The parser iterates over all the matches found by the regular expression. Recipe 3.11
explains how that works.
242 IChapter 3: Programming with Regular Expressions
---
## Page 259
CHAPTER4
ValidationandFormatting
This chapter contains recipes for validating and formatting common types of user input.
Some of the solutions show how to allow variations of valid input, such as U.S. postal
codes that can contain either five or nine digits. Others are designed to harmonize or
fix commonly understood formats for things such as phone numbers, dates, and credit
card numbers.
Beyond helping you get the job done by eliminating invalid input,these recipes can
also improve the user experience of your applications. Messages such as *no spaces or
hyphens” next to phone or credit card number fields often frustrate users or are simply
ignored. Forrunately, in many cases regular expressions allow you to et users enter
data in formats with which they are familiar and comfortable, with very little extra work
on your part.
Certain programming languages provide functionality similar to some recipes in this
chapter through their native classes or libraries. Depending on your needs, it might
make more sense to use these built-in options, so we'll point them out along the way.
4.1ValidateEmailAddresses
Problem
You have a form on your website or a dialog box in your application that asks the user
for an email address. You want to use a regular expression to validate this email address
before trying to send email to it. This reduces the number of emails retumed to you as
undeliverable.
Solution
Simple
This first solution does a very simple check. It only validates that the string contains
an at sign (@) that is preceded and followed by one or more nonwhitespace characters.
243
---
## Page 260
^\5+\s+$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
\A\S+@′S+\Z
Regex options: None
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
Simple, with restrictions on characters
The domain name, the part after the @ sign, is restricted to characters allowed in domain
names. Internationalized domain names are not allowed. The local part, the part before
the @ sign, is restricted to characters commonly used in email local parts, which is
more restrictive than what most email clients and servers will accept:
$+[-*6-0z-]+[--+6-0z-]
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
z\+[-*6-0z-]8+[-+6-0z-v]
Regex options: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
Simple, with all valid local part characters
This regular expression expands the previous one by allowing a larger set of rarely used
characters in the local part. Not all email sofrware can handle all these characters, but
we’ve included all the characters permitted by RFC 5322, which governs the email
message format. Among the permited characters are some that present a security risk
if passed directly from user input to an SQL statement, such as the single quote () and
the pipe character (l). Be sure to escape sensitive characters when inserting the email
address into a string passed to another program, in order to prevent security holes such
as SQL. injection attacks:
$+[-*6-0z-]+[-*v~{1}、=/+,x$#i6-0z-]
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python
\A[A-Z0-9_!#$%&**+/=?{1}~ -]+Φ[A-Z0-9. - ]+\Z
Regex options: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
No leading, trailing, or consecutive dots