title:Approvability
author:Jon A. Solworth
Approvability
Jon A. Solworth
University of Illinois at Chicago
851 S. Morgan Street, M/C 152
Room 1120 SEO
Chicago IL 60607-7053
PI:EMAIL
ABSTRACT
Consider a set of users who collectively perform a sequence
of actions to complete a task. Separation of duty constraints
hold when there are restrictions which are intended to re-
quire that not all actions are performed by the same user.
The approvability graph is introduced to describe the se-
quences of actions which correspond to one or more tasks.
The graph can represent multiple possible outcomes (dif-
ferent completions from the same starting point) as well as
allowing for repeated actions. Hence, the graph describes a
set of sequences, not necessarily ﬁnite, which deﬁne when a
task is complete.
The graph-based mechanism also describes separation of
duty constraints between diﬀerent actions, ensuring that dif-
ferent actions are performed by diﬀerent users. (It can also
require diﬀerent actions to be performed by the same user.)
Algorithms are presented to analyze the number of users
needed to ensure that any such sequence can be completed,
even in the presence of loops or alternative outcomes. The
various properties that arise in approval sequences are then
explored to characterize well formed systems and to examine
their complexity.
In particular, we show how to achieve
bounds on the number of users which must be members of
each role.
Determining the minimum number of users to complete a
dynamic separation of duty task is proven to be NP-Complete.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Access Controls
General Terms
Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee. ASIACCS‘06, March 21–24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003...$5.00.
Keywords
Authorization, Authorization Properties, Separation of Duty
INTRODUCTION
1.
Consider a task that consists of multiple actions, where each
action is performed by a single user. Separation of Duty
(SoD) constraints are intended to ensure that a single user
does not perform every action in a task. Specifying sepa-
ration of duty problems, in general, involves (1) specifying
the actions that are part of the task (since if actions could
be arbitrarily bypassed it would be impossible to enforce
separation of duty) and (2) the constraints between actions.
Separation of duty problems are important for several rea-
sons. First, they are reserved for the most sensitive tasks
and therefore are crucial to security. Second, they are by def-
inition too important for a single person to perform making
them unique among authorization issues. Third, they must
be described by specialized mechanisms. And fourth, they
are broadly used, for example in ﬁnancial systems to con-
ﬁrm large transactions; in military applications such as to
control the launch of nuclear weapons; and in medicine for
second opinions before non-emergency surgery.
We will deﬁne an approval sequence (in Section 4.1) which
completes a task as a sequence of actions along with the
users who performed them. For example, an accounting
approval sequence might require the issuing of a purchase
order by a purchase clerk, the receipt at the loading dock
of the purchased item by a shipping clerk, the receipt by
the end user of the item, followed by the payment by an ac-
counts payable clerk. To an organization, it is a completed
approval sequence that denotes ﬁnished work, that is a com-
pleted task. In general, the approvability sequence is neither
ﬁxed—for example, multiple revisions may be necessary—
nor is there a single possible outcome—for example, a loan
application may be approved or denied.
There are two major types of Separation of Duty (SoD)1:
Static SoD (SSoD): The individuals are partitioned into
groups or roles, and diﬀerent roles may be assigned to
diﬀerent actions of an approval sequence. SoD con-
straints ensure mutual exclusion between the roles2.
1Sandhu [25] attributes to [9] the static vs. dynamic SoD
terminology.
2Note that pairwise-disjoint roles are suﬃcient, but not

Dynamic SoD (DSoD): Dynamic SoD ensures that for a
given task, diﬀerent actions are performed by diﬀerent
individuals, even if both actions are governed by the
same role.
suggested that, in this case, an estimate of the number of ac-
tions is used and, if exceeded, the algorithm could be rerun.
However, under such circumstances the algorithm could fail
to ﬁnd a solution and a workﬂow could get stuck.
When there are SoD constraints, then by deﬁnition two or
more actions are required and the actions must be performed
by more than one individual. It reduces fraud for at least
two reasons. First, it is necessary for two or more individu-
als to fail to act in the interest of the organization, which has
an inherently lower probability than the failure of a single
individual. Second, collusion requires that one party pro-
poses fraud to another. The second party may report the
ﬁrst party to authorities; alternatively, if the second party
does not report the ﬁrst party he runs the risk that the ﬁrst
party was testing him at the behest of authorities (and hence
the ﬁrst party’s oﬀer was not genuine). Therefore, it is not
safe for either party to cooperate or even discuss an oﬀer of
collusion.
While SSoD is easy both to specify and to analyze, dynamic
SoD is neither. But DSoD is far more ﬂexible. It enables
the protection to be tuned so that for the same number
of people, either more separation can be obtained or it is
easier to ﬁnd someone who can perform an action (or some
combination of these two).
In other authorization mechanisms, it suﬃces to assign one
suﬃciently trusted user to perform each action. Unfortu-
nately, this is insuﬃcient for DSoD since even if a user is
highly trusted, she may not be able to perform a given ac-
tion because she has performed some other conﬂicting action
earlier: In this sense, DSoD actions consume users since, as
a consequence of performing an action a user is unable to
perform future actions to which she would otherwise be per-
mitted. Therefore, an organization’s approval sequence for
DSoD depends on both organizational size and structure. If
only n people are associated with an organization, then n
is the maximum number of users that can be involved in
a task. Smaller organizations will need to decide, for ex-
ample, between lesser SoD and having executives perform
actions which in a larger organization would be performed
by clerks. Hence, organizations must design and analyze
their own approvability sequences with the desired degrees
of SoD.
It is important to analyze the (maximum) number of users
needed to complete a task to ensure that tasks do not be-
come stuck and therefore unable to complete—a kind of de-
nial of service. The only paper which we are aware of that
analyzed completion of tasks is the seminal paper of Bertino,
Ferrari, and Atluri (BFA) [3]. BFA modeled a workﬂow as a
collection of actions, described constraints between actions
and a bound on the number of times an action could be
executed. Given this description, they developed an algo-
rithm which provides an exact solution of the assignment
of users to actions, if one exists. Unfortunately, if the ap-
proval sequence can have loops or alternative outcomes then
the number of times each action executes is unknown. BFA
necessary to obtain SoD. Consider
the following se-
quence of groups of individuals a, b, c which exhibit SoD
[{a, b} ,{b, c} ,{c, a}] since at least two individuals must be
involved in approval.
Our focus here is on determining suﬃcient conditions so that
a SoD task never gets stuck. In this paper, we
• introduce the approvability graph to model tasks. The
approvability graph can represent multiple possible com-
pletions (e.g., the purchase order was issued or was
cancelled), loops, and linear sequences as well as the
DSoD constraints between actions. It is the ﬁrst model
of SoD which allows loops.
• show well-formed conditions on the approvability graph,
so that given a suﬃcient number of users per role, the
task cannot get stuck.
• show a polynomial-time algorithm to determine a suf-
ﬁcient number of users per role. Note that the assign-
ment of users to roles varies with personnel changes;
the approvability graph (i.e., the workﬂow), on the
other hand, does not. Minimum cardinality per role
ensures that the tasks do not get stuck even as per-
sonnel change3.
• show that the analysis of even very simple DSoD prob-
lems is NP-Complete.
This last issue is especially interesting for two reasons: (1) it
indicates that runtime DSoD scheduling may be too expen-
sive and (2) it is a lower bound on the intrinsic complexity
of a SoD problem. The only other complexity analysis of
SoD we know of shows that the complexity of a particular
SSoD solution is NP-Complete [19]. Of course, showing the
problem has high complexity implies that any solution must
have high complexity.
The remainder of this paper is organized as follows: Sec-
tion 2 describes related work; Section 3 describes the ap-
provability graph and gives examples of its use examples;
Section 4 describes the analysis of these systems; and ﬁnally
we conclude.
2. RELATED WORK
SoD has a very long history, going back at least to Multics
in the computer security literature [23] (where it is called
separation of privilege). Saltzer and Schroeder attribute its
ﬁrst use in computer systems to Needham in 1973. But its
use outside of computers is far older, going back thousands
of years. We shall not attempt to trace the non-computer
history here.
Lipner described a use of SSoD with respect to program de-
velopment so that those who installed software were separate
from those who developed it. Its purpose is to make it harder
3This assumes that same user constraints are not used or
can be overridden, for if an individual leaves the company
she is not longer available to perform future tasks.

for a programmer to insert surreptitious code [20]. Clark-
Wilson used it explicitly to counter fraud [5]. Both Clark-
Wilson and Lipner have their antecedents in non-computer
systems.
Sandhu developed an elegant notation for describing action
sequences [24]. The notation allowed for DSoD, and could
require two diﬀerent actions to be performed by diﬀerent
users or the same user.
(Sandhu’s notation even allowed
weighted approvals: For example, a vice president could ap-
prove something that otherwise would require approvals by
two diﬀerent supervisors.) However, other than weighted
approvals, each task consisted of a ﬁxed sequence of actions.
Crampton has modeled SoD as a partially ordered set of
actions enabling parallel actions but requiring all actions to
be performed (that is, it supports neither alternation nor
loops) [7]. He describes a runtime implementation model
using blacklist sets to ensure that constraints are not vio-
lated [6]. Knorr and Weidner use Petri Nets to represent
SoD, but it is clear from their analysis that they did not
consider loops [17].
Hitchens and Varadharajan [13] describe a set-based lan-
guage called Tower for modeling RBAC that can describe
sequences of SSoD and DSoD, as well as several other types
of authorizations.
Nash and Poland [21] introduce object-based SoD in which
the separation is on an object-by-object basis. This is a
ﬁne-grained instance of DSoD. Since the purpose of DSoD
is to increase ﬂexibility while maintaining appropriate con-
straints, this ﬁne-grained version is superior to coarser-grained
versions.
Karger describes an operating system implementation using
capabilities and lattices [16]. He describes the system both
in terms of its veriﬁcation needs and user interface as being
extremely complex. Foley [11] describes SoD using lattices
and high water marks. The lattices used by both Foley
and Karger are more restricted than our approvability graph
since they must be acyclic.
Simon and Zurko presented a taxonomy of SoD and gave a
description of their speciﬁcation [27]. The language appears
to be purely for policy speciﬁcation, it does not seem to be
implementable.
Gligor, Gavrila, and Ferraiolo describe a formal deﬁnition
of various SoD policies, and show the relationship between
them [12]. They also investigated composition of SoD. Fur-
thermore, they note that SoD mechanisms have not been
successfully implemented in operating systems, which is one
of the goals for the model presented here. We present op-
erating system level mechanisms which can implement ap-
provability graphs in a second paper in this proceedings [22].
SoD has been extensively explored in the context of Role-
Based Access Controls (RBAC) [10, 26], including [9, 18].
Ahn and Sandhu used ﬁrst-order predicate logic to describe
SoD [1]. DSoD is typically represented by permissions which
cannot be taken on by the same user within a session.
Joshi, Bertino, Shaﬁq and Ghafoor have examined how to
specify SoD in GTRBAC [15].
Li, Bizri, and Tripunitara (LBT) showed that verifying a
SSoD policy—that is, at least n people are required to com-
plete a task—using mutually exclusive rules is NP-Complete
[19]. Their complexity result is about a particular mecha-
nism to implement SoD, whereas the complexity result here
is inherent in SoD. As described in the introduction, DSoD
is fundamentally diﬀerent from SSoD in that only DSoD
consumes users.
Jaeger and Tidswell [14, 28] used constraints and inheri-
tance in their Dynamically Typed Access Control model to
implement SoD.