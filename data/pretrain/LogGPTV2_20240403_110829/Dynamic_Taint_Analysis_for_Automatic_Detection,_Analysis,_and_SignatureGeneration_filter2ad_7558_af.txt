### Program Shepherding and TaintCheck

Program Shepherding loads code from the disk and verifies each control transfer to ensure that the destination is a basic block that has not been modified. This mechanism can prevent code injection attacks and some existing-code attacks by ensuring that control transfers to libraries only go to exported entry points and that return addresses point to just after a call instruction. However, it does not prevent all existing-code attacks, such as overwriting a function pointer to the `exec` library call. In contrast, TaintCheck can prevent these existing-code attacks and, through dynamic taint analysis, provides detailed information on how vulnerabilities are exploited. Program Shepherding does not offer this level of detail.

### Other Runtime Detection Mechanisms

Many approaches have been proposed to detect when certain vulnerabilities are exploited by attacks. Most of these mechanisms require source code or special recompilation of the program, such as StackGuard [14], PointGuard [13], full-bounds check [19, 37], LibsafePlus [5], FormatGuard [12], and CCured [27]. These methods often require recompiling libraries, modifying the original source code, or are not compatible with some programs [27, 13]. These issues hinder their deployment and applicability for commodity software, where source code is often unavailable.

Other runtime attack detection methods do not require source code or specially compiled binary programs, such as LibSafe [6], LibFormat [36], Program Shepherding [22], and the Nethercote-Fitzhardinge bounds check [28]. However, they fail to detect many types of attacks. For example, LibSafe only catches buffer overflows related to certain string-handling functions, LibFormat only detects specific format modifiers in format strings, leading to high false positives and false negatives, and the Nethercote-Fitzhardinge bounds check also has significant false positives and false negatives. In contrast, TaintCheck detects a wider range of attacks and incurs fewer false positives.

### Coarse-Grained Attack Detection

Some approaches focus on more coarse-grained attack detection, including system call interposition (e.g., Systrace [33], GSWTK [17], Tron [7], Janus [18], and MAPbox [3]). These methods detect attacks by identifying anomalous system call sequences in a program. They do not provide detailed information about the vulnerability and its exploitation, and they require building models for each protected program.

### Taint-Based Approaches

Static taint analysis has been used to find bugs in C programs [16, 39, 46] or to identify potentially sensitive data in Scrash [9]. Perl [2] performs runtime taint checking to ensure that data from untrusted sources are not used in security-sensitive ways, such as arguments to system calls.

Chow et al. [11] independently and concurrently proposed using whole-system simulation with tainting analysis to analyze how sensitive data are handled in large programs like Apache and Emacs. The tainting propagation in TaintCheck is similar to their approach. However, their work focuses on the lifetime of sensitive data such as passwords, while TaintCheck focuses on attack detection and defense.

Minos [15] independently and concurrently proposed hardware extensions to perform Biba-like data integrity checks of control flow to detect attacks at runtime. Their work uses hardware and OS modifications to perform Biba integrity checks at the whole-system level. In contrast, TaintCheck requires no hardware or OS modifications, making it more flexible and fine-grained. TaintCheck can detect attacks that Minos cannot, such as format string vulnerabilities and attacks that overwrite security-sensitive variables like system call arguments. TaintCheck also provides more detailed analysis of detected attacks, which can be used for automatic signature generation.

### Signature Generation Approaches and Defense Systems

Several automatic signature generation methods have recently been proposed, including Earlybird [41], Honeycomb [24], and Autograph [21]. Earlybird monitors traffic and generates signatures based on Rabin fingerprints of the most commonly occurring 39-byte substrings. Honeycomb classifies traffic sent to a honeypot as malicious and generates signatures based on the longest common substrings found in the traffic. Autograph uses distributed monitoring points to determine hosts performing port scans and generates signatures from the most common blocks seen in malicious traffic.

As shown in Section 6, TaintCheck can reduce the false positive and false negative rates of classifiers used in these systems. TaintCheck can also provide semantic analysis of attack payloads, enabling the generation of signatures with fewer samples than content analysis alone. Additionally, TaintCheck can verify the signatures and alarms produced by such systems.

Shield [45] presents an alternative approach to content-based filtering. Shield manually generates a signature for any exploit of a known vulnerability before it is seen in the wild. While promising, this approach is limited if the worm exploits a previously unknown or recently discovered vulnerability.

Sidiroglou and Keromytis [40] propose a worm vaccine architecture to automatically generate patches for vulnerabilities.

### Conclusion

To combat the rapid spread of new worms before they compromise a large number of machines, automatic attack detection and defense mechanisms are essential. In this paper, we propose dynamic taint analysis and demonstrate how it can detect and analyze most types of software exploits without requiring source code or special compilation, making it suitable for commodity software. TaintCheck reliably detects many attacks, with no false positives in our tests. It monitors program execution at a fine-grained level, providing additional information about the attack, such as the input causing the exploit, the processor-instruction-level steps leading to the exploit, and the value used to overwrite protected data (e.g., the return address).

Furthermore, TaintCheck is particularly useful in automatic signature generation systems. It enables semantic analysis-based signature generation, enhances content pattern extraction, and verifies the quality of generated signatures.

### Acknowledgments

We would like to thank David Brumley, Mike Burrows, Jedediah Crandall, Debin Gao, Brad Karp, Angelos Keromytis, Nicholas Nethercote, Jonathon Shapiro, Peter Szor, Helen Wang, Felix Wu, Avi Yaar, and Lidong Zhou for their feedback and assistance on this project. We also thank the anonymous reviewers for their insightful feedback.

### References

[References listed as provided in the original text]