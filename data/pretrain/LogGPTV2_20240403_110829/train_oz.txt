        handle_error_en(s, "pthread_create");
    if (attrp != null) {
        s = pthread_attr_destroy(attrp);
        if (s != 0)
            handle_error_en(s, "pthread_attr_destroy");
    }
    pause();    /* terminates when other thread calls exit() */
}
.ee
.sh see also
.ad l
.nh
.br pthread_attr_getaffinity_np (3),
.br pthread_attr_getdetachstate (3),
.br pthread_attr_getguardsize (3),
.br pthread_attr_getinheritsched (3),
.br pthread_attr_getschedparam (3),
.br pthread_attr_getschedpolicy (3),
.br pthread_attr_getscope (3),
.br pthread_attr_getstack (3),
.br pthread_attr_getstackaddr (3),
.br pthread_attr_getstacksize (3),
.br pthread_attr_init (3),
.br pthread_create (3),
.br pthreads (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/casin.3
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\"
.\" modified 1993-03-29, david metcalfe
.\" modified 1993-04-28, lars wirzenius
.\" modified 1993-07-24, rik faith (PI:EMAIL)
.\" modified 1995-05-18, rik faith (PI:EMAIL) to add
.\"          better discussion of problems with rand on other systems.
.\"          (thanks to esa hyyti{ (PI:EMAIL).)
.\" modified 1998-04-10, nicolÃ¡s lichtmaier 
.\"          with contribution from francesco potorti 
.\" modified 2003-11-15, aeb, added rand_r
.\" 2010-09-13, mtk, added example program
.\"
.th rand 3 2021-03-22 "" "linux programmer's manual"
.sh name
rand, rand_r, srand \- pseudo-random number generator
.sh synopsis
.nf
.b #include 
.pp
.b int rand(void);
.bi "int rand_r(unsigned int *" seedp );
.bi "void srand(unsigned int " seed );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br rand_r ():
.nf
    since glibc 2.24:
        _posix_c_source >= 199506l
    glibc 2.23 and earlier
        _posix_c_source
.fi
.sh description
the
.br rand ()
function returns a pseudo-random integer in the range 0 to
.br rand_max
inclusive (i.e., the mathematical range [0,\ \fbrand_max\fr]).
.pp
the
.br srand ()
function sets its argument as the seed for a new
sequence of pseudo-random integers to be returned by
.br rand ().
these sequences are repeatable by calling
.br srand ()
with the same seed value.
.pp
if no seed value is provided, the
.br rand ()
function is automatically seeded with a value of 1.
.pp
the function
.br rand ()
is not reentrant, since it
uses hidden state that is modified on each call.
this might just be the seed value to be used by the next call,
or it might be something more elaborate.
in order to get reproducible behavior in a threaded
application, this state must be made explicit;
this can be done using the reentrant function
.br rand_r ().
.pp
like
.br rand (),
.br rand_r ()
returns a pseudo-random integer in the range [0,\ \fbrand_max\fr].
the
.i seedp
argument is a pointer to an
.ir "unsigned int"
that is used to store state between calls.
if
.br rand_r ()
is called with the same initial value for the integer pointed to by
.ir seedp ,
and that value is not modified between calls,
then the same pseudo-random sequence will result.
.pp
the value pointed to by the
.i seedp
argument of
.br rand_r ()
provides only a very small amount of state,
so this function will be a weak pseudo-random generator.
try
.br drand48_r (3)
instead.
.sh return value
the
.br rand ()
and
.br rand_r ()
functions return a value between 0 and
.br rand_max
(inclusive).
the
.br srand ()
function returns no value.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br rand (),
.br rand_r (),
.br srand ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
the functions
.br rand ()
and
.br srand ()
conform to svr4, 4.3bsd, c89, c99, posix.1-2001.
the function
.br rand_r ()
is from posix.1-2001.
posix.1-2008 marks
.br rand_r ()
as obsolete.
.sh notes
the versions of
.br rand ()
and
.br srand ()
in the linux c library use the same random number generator as
.br random (3)
and
.br srandom (3),
so the lower-order bits should be as random as the higher-order bits.
however, on older
.br rand ()
implementations, and on current implementations on different systems,
the lower-order bits are much less random than the higher-order bits.
do not use this function in applications intended to be portable
when good randomness is needed.
(use
.br random (3)
instead.)
.sh examples
posix.1-2001 gives the following example of an implementation of
.br rand ()
and
.br srand (),
possibly useful when one needs the same sequence on two different machines.
.pp
.in +4n
.ex
static unsigned long next = 1;
/* rand_max assumed to be 32767 */
int myrand(void) {
    next = next * 1103515245 + 12345;
    return((unsigned)(next/65536) % 32768);
}
void mysrand(unsigned int seed) {
    next = seed;
}
.ee
.in
.pp
the following program can be used to display the
pseudo-random sequence produced by
.br rand ()
when given a particular seed.
.pp
.in +4n
.ex
#include 
#include 
int
main(int argc, char *argv[])
{
    int r, nloops;
    unsigned int seed;
    if (argc != 3) {
        fprintf(stderr, "usage: %s  \en", argv[0]);
        exit(exit_failure);
    }
    seed = atoi(argv[1]);
    nloops = atoi(argv[2]);
    srand(seed);
    for (int j = 0; j 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pthreads 7  2021-03-22 "linux" "linux programmer's manual"
.sh name
pthreads \- posix threads
.sh description
posix.1 specifies a set of interfaces (functions, header files) for
threaded programming commonly known as posix threads, or pthreads.
a single process can contain multiple threads,
all of which are executing the same program.
these threads share the same global memory (data and heap segments),
but each thread has its own stack (automatic variables).
.pp
posix.1 also requires that threads share a range of other attributes
(i.e., these attributes are process-wide rather than per-thread):
.ip \- 3
process id
.ip \- 3
parent process id
.ip \- 3
process group id and session id
.ip \- 3
controlling terminal
.ip \- 3
user and group ids
.ip \- 3
open file descriptors
.ip \- 3
record locks (see
.br fcntl (2))
.ip \- 3
signal dispositions
.ip \- 3
file mode creation mask
.rb ( umask (2))
.ip \- 3
current directory
.rb ( chdir (2))
and
root directory
.rb ( chroot (2))
.ip \- 3
interval timers
.rb ( setitimer (2))
and posix timers
.rb ( timer_create (2))
.ip \- 3
nice value
.rb ( setpriority (2))
.ip \- 3
resource limits
.rb ( setrlimit (2))
.ip \- 3
measurements of the consumption of cpu time
.rb ( times (2))
and resources
.rb ( getrusage (2))
.pp
as well as the stack, posix.1 specifies that various other
attributes are distinct for each thread, including:
.ip \- 3
thread id (the
.i pthread_t
data type)
.ip \- 3
signal mask
.rb ( pthread_sigmask (3))
.ip \- 3
the
.i errno
variable
.ip \- 3
alternate signal stack
.rb ( sigaltstack (2))
.ip \- 3
real-time scheduling policy and priority
.rb ( sched (7))
.pp
the following linux-specific features are also per-thread:
.ip \- 3
capabilities (see
.br capabilities (7))
.ip \- 3
cpu affinity
.rb ( sched_setaffinity (2))
.ss pthreads function return values
most pthreads functions return 0 on success, and an error number on failure.
the error numbers that can be returned have the same meaning as
the error numbers returned in
.i errno
by conventional system calls and c library functions.
note that the pthreads functions do not set
.ir errno .
for each of the pthreads functions that can return an error,
posix.1-2001 specifies that the function can never fail with the error
.br eintr .
.ss thread ids
each of the threads in a process has a unique thread identifier
(stored in the type
.ir pthread_t ).
this identifier is returned to the caller of
.br pthread_create (3),
and a thread can obtain its own thread identifier using
.br pthread_self (3).
.pp
thread ids are guaranteed to be unique only within a process.
(in all pthreads functions that accept a thread id as an argument,
that id by definition refers to a thread in
the same process as the caller.)
.pp
the system may reuse a thread id after a terminated thread has been joined,
or a detached thread has terminated.
posix says: "if an application attempts to use a thread id whose
lifetime has ended, the behavior is undefined."
.ss thread-safe functions
a thread-safe function is one that can be safely
(i.e., it will deliver the same results regardless of whether it is)
called from multiple threads at the same time.
.pp
posix.1-2001 and posix.1-2008 require that all functions specified
in the standard shall be thread-safe,
except for the following functions:
.pp
.in +4n
.ex
asctime()
basename()
catgets()
crypt()
ctermid() if passed a non-null argument
ctime()
dbm_clearerr()
dbm_close()
dbm_delete()
dbm_error()
dbm_fetch()
dbm_firstkey()
dbm_nextkey()
dbm_open()
dbm_store()
dirname()
dlerror()
drand48()
ecvt() [posix.1-2001 only (function removed in posix.1-2008)]
encrypt()
endgrent()
endpwent()
endutxent()
fcvt() [posix.1-2001 only (function removed in posix.1-2008)]
ftw()
gcvt() [posix.1-2001 only (function removed in posix.1-2008)]
getc_unlocked()
getchar_unlocked()
getdate()
getenv()
getgrent()
getgrgid()
getgrnam()
gethostbyaddr() [posix.1-2001 only (function removed in
                 posix.1-2008)]
gethostbyname() [posix.1-2001 only (function removed in
                 posix.1-2008)]
gethostent()
getlogin()
getnetbyaddr()
getnetbyname()
getnetent()
getopt()
getprotobyname()
getprotobynumber()
getprotoent()
getpwent()
getpwnam()
getpwuid()
getservbyname()
getservbyport()
getservent()
getutxent()
getutxid()
getutxline()
gmtime()
hcreate()
hdestroy()
hsearch()
inet_ntoa()
l64a()
lgamma()
lgammaf()
lgammal()
localeconv()
localtime()
lrand48()
mrand48()
nftw()
nl_langinfo()
ptsname()
putc_unlocked()
putchar_unlocked()
putenv()
pututxline()
rand()
readdir()
setenv()
setgrent()
setkey()
setpwent()
setutxent()
strerror()
strsignal() [added in posix.1-2008]
strtok()
system() [added in posix.1-2008]
tmpnam() if passed a non-null argument
ttyname()
unsetenv()
wcrtomb() if its final argument is null
wcsrtombs() if its final argument is null
wcstombs()
wctomb()
.ee
.in
.ss async-cancel-safe functions
an async-cancel-safe function is one that can be safely called
in an application where asynchronous cancelability is enabled (see
.br pthread_setcancelstate (3)).
.pp
only the following functions are required to be async-cancel-safe by
posix.1-2001 and posix.1-2008:
.pp
.in +4n
.ex
pthread_cancel()