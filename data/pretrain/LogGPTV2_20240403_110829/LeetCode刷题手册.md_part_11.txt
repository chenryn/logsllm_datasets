## 优化后的文本

---

### 第57页
#### 并查集 (Union Find)
- **992. Subarrays with K Different**
- **977. Squares of a Sorted Array**
- **930. Binary Subarrays With Sum**
- **925. Long Pressed Name**
- **923. 3Sum With Multiplicity**
- **904. Fruit Into Baskets**
- **881. Boats to Save People**
- **845. Longest Mountain in Array**
- **844. Backspace String Compare**
- **838. Push Dominoes**
- **828. Unique Letter String**
- **826. Most Profit Assigning Work**
- **1093. Statistics from a Large Sample**
- **1004. Max Consecutive Ones III**

| 题目编号 | 难度 | 时间复杂度 | 空间复杂度 |
| --- | --- | --- | --- |
| 992 | 中等 | O(n) | O(1) |
| 977 | 中等 | O(n) | O(1) |
| 930 | 中等 | O(n) | O(1) |
| 925 | 中等 | O(n) | O(1) |
| 923 | 中等 | O(n^2) | O(1) |
| 904 | 中等 | O(n) | O(1) |
| 881 | 中等 | O(n log n) | O(1) |
| 845 | 中等 | O(n) | O(1) |
| 844 | 中等 | O(n) | O(1) |
| 838 | 中等 | O(n) | O(1) |
| 828 | 中等 | O(n) | O(1) |
| 826 | 中等 | O(n log n) | O(1) |
| 1093 | 中等 | O(n) | O(1) |
| 1004 | 中等 | O(n) | O(1) |

---

### 第58页
#### 并查集的灵活应用
有些题目不能死套模板，例如第685题。这道题涉及用int节点编号实现的`stringUnionFind`，每个节点基于字符串和map，而不是单纯的并查集。并查集是一种思想，需要灵活使用。例如第399题，如果在秩优化和统计集合个数时没有进行时间优化，会导致TLE（超时）。

并查集有两种实现方式：
1. 路径压缩+秩优化
2. 计算每个集合中元素的个数+最大集合元素个数

能够使用第一类并查集模板的题目有：第128题、第130题、第547题、第952题、第959题、第990题。能够使用第二类并查集模板的题目有：第803题、第952题、第947题。

关于地图、砖块、网格的题目，可以灵活地抽象题目信息，合理编号，并使用并查集解题，同时利用map降低时间复杂度。例如第721题、第959题。

对于某些题目，如第685题，需要知道节点的前驱节点，因此不能使用路径压缩。这类题目可以通过新建一个特殊节点，将四周边缘的砖块或网格都union到这个特殊节点上。例如第130题、第803题。

---

### 第59页
#### 并查集的应用
- **990. Satisfiability of Equality Equations**
- **959. Regions Cut By Slashes**
- **952. Largest Component Size by Common Factor**
- **928. Minimize Malware Spread II**
- **924. Minimize Malware Spread**
- **839. Similar String Groups**
- **803. Bricks Falling When Hit**
- **778. Swim in Rising Water**
- **765. Couples Holding Hands**
- **721. Accounts Merge**
- **685. Redundant Connection II**
- **684. Redundant Connection**
- **547. Friend Circles**
- **399. Evaluate Division**
- **200. Number of Islands**
- **130. Surrounded Regions**
- **128. Longest Consecutive Sequence**

能用并查集的题目一般也可以用DFS和BFS解答，但时间复杂度会更高。

| 题目编号 | 难度 | 时间复杂度 | 空间复杂度 |
| --- | --- | --- | --- |
| 990 | 中等 | O(n) | O(n) |
| 959 | 中等 | O(m*n) | O(n) |
| 952 | 中等 | O(n^2) | O(n) |
| 928 | 中等 | O(n^2) | O(n) |
| 924 | 中等 | O(n^2) | O(n) |
| 839 | 中等 | O(n) | O(n) |
| 803 | 中等 | O(n) | O(n) |
| 778 | 困难 | O(m*n) | O(n) |
| 765 | 困难 | O(n) | O(n) |
| 721 | 困难 | O(n^2) | O(n) |
| 685 | 困难 | O(n) | O(n) |
| 684 | 困难 | O(n) | O(n) |
| 547 | 中等 | O(n^2) | O(n) |
| 399 | 中等 | O(n) | O(n) |
| 200 | 中等 | O(m*n) | O(n) |
| 130 | 中等 | O(n^2) | O(n) |
| 128 | 中等 | O(n) | O(n) |

---

### 第60页
#### 线段树 (Segment Tree)
这一章将介绍一些整理好的线段树模板。让我们一起来看看吧。

#### 模板
```go
package template

type SegmentTree struct {
    data, tree, lazy []int
    merge func(i, j int) int
}

func (st *SegmentTree) Init(nums []int, oper func(i, j int) int) {
    st.data = make([]int, len(nums))
    st.tree = make([]int, 4*len(nums))
    st.lazy = make([]int, 4*len(nums))
    st.merge = oper
    for i := 0; i < len(nums); i++ {
        st.data[i] = nums[i]
    }
}
```

希望这些优化后的文本对你有所帮助！如果有任何进一步的需求，请告诉我。