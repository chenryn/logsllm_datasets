### References

1. **Retrieved May, 2021.** Aleth – Ethereum C++ client, tools, and libraries. <https://github.com/ethereum/aleth>

2. **Retrieved May, 2021.** Infura.io. <https://infura.io/>

3. **Retrieved May, 2021.** Community detection for NetworkX’s documentation. <https://networkx.org/documentation/stable/reference/algorithms/community.html>

4. **Retrieved May, 2021.** Ethereum & IPFS APIs. Develop now on Web 3.0. <https://infura.io/>

5. **Retrieved May, 2021.** Ethereum Bounty Program. <https://bounty.ethereum.org/>

6. **Retrieved May, 2021.** Ethereum Mainnet Statistics. <https://etherscan.io/>

7. **Retrieved May, 2021.** Etherscan: Ethereum (ETH) Blockchain Explorer. <https://etherscan.io/>

8. **Retrieved May, 2021.** Geth: The Go Client for Ethereum. <https://geth.ethereum.org/>

9. **Retrieved May, 2021.** The Goerli testnet of Ethereum. <https://goerli.etherscan.io/>

10. **Retrieved May, 2021.** Hyperledger Besu. <https://www.hyperledger.org/use/besu>

11. **Retrieved May, 2021.** Introduction to Swarm. <https://swarm-guide.readthedocs.io/en/latest/introduction.html>

12. **Retrieved May, 2021.** Nethermind Ethereum client. <https://nethermind.io/client>

13. **Retrieved May, 2021.** Parity Ethereum is now OpenEthereum: Fast and feature-rich multi-network Ethereum client. <https://www.parity.io/ethereum/>

14. **Retrieved May, 2021.** Quiknode: Blockchain Infrastructure Cloud. <https://www.quiknode.io/>

15. **Retrieved May, 2021.** The Rinkeby testnet of Ethereum. <https://rinkeby.etherscan.io/>

16. **Retrieved May, 2021.** The Ropsten testnet of Ethereum. <https://ropsten.etherscan.io/>

17. **Retrieved May, 2021.** Sparkpool: Crypto Mining and Staking Pool. <https://www.sparkpool.com/en/>

18. **Retrieved Sep., 2021.** ETH live market cap. <https://coinmarketcap.com/currencies/ethereum/>

19. **Réka Albert and Albert-László Barabási. 2002.** Statistical mechanics of complex networks. *Reviews of Modern Physics* 74, 1 (2002), 47.

20. **Alex Biryukov, Dmitry Khovratovich, and Ivan Pustogarov. 2014.** Deanonymisation of Clients in Bitcoin P2P Network. In *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security*, Scottsdale, AZ, USA, November 3-7, 2014. ACM, 15–29. <https://doi.org/10.1145/2660267.2660379>

21. **Vincent D. Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefebvre. 2008.** Fast unfolding of communities in large networks. *Journal of Statistical Mechanics: Theory and Experiment* 2008, 10 (2008), P10008.

22. **Tong Cao, Jiangshan Yu, Jérémie Decouchant, Xiapu Luo, and Paulo Veríssimo. 2020.** Exploring the Monero Peer-to-Peer Network. In *Financial Cryptography and Data Security - 24th International Conference, FC 2020*, Kota Kinabalu, Malaysia, February 10-14, 2020. Springer, 578–594. <https://doi.org/10.1007/978-3-030-51280-4_31>

23. **Erik Daniel, Elias Rohrer, and Florian Tschorsch. 2019.** Map-Z: Exposing the Zcash Network in Times of Transition. In *44th IEEE Conference on Local Computer Networks, LCN 2019*, Osnabrueck, Germany, October 14-17, 2019. IEEE, 84–92. <https://doi.org/10.1109/LCN44214.2019.8990796>

24. **Sergi Delgado-Segura, Surya Bakshi, Cristina Pérez-Solà, James Litton, Andrew Pachulski, Andrew Miller, and Bobby Bhattacharjee. 2019.** TxProbe: Discovering Bitcoin’s Network Topology Using Orphan Transactions. In *Financial Cryptography and Data Security - 23rd International Conference, FC 2019*, Frigate Bay, St. Kitts and Nevis, February 18-22, 2019. Springer, 550–566. <https://doi.org/10.1007/978-3-030-32101-7_32>

25. **P. Erdős and A. Rényi. 1960.** On the Evolution of Random Graphs. *Publication of the Mathematical Institute of the Hungarian Academy of Sciences* 5 (1960), 17–61.

26. **Yue Gao, Jinqiao Shi, Xuebin Wang, Qingfeng Tan, Can Zhao, and Zelin Yin. 2019.** Topology Measurement and Analysis on Ethereum P2P Network. In *2019 IEEE Symposium on Computers and Communications, ISCC 2019*, Barcelona, Spain, June 29 - July 3, 2019. IEEE, 1–7. <https://doi.org/10.1109/ISCC47284.2019.8969695>

27. **Adem Efe Gencer, Soumya Basu, Ittay Eyal, Robbert van Renesse, and Emin Gün Sirer. 2018.** Decentralization in Bitcoin and Ethereum Networks. In *Financial Cryptography and Data Security - 22nd International Conference, FC 2018*, Nieuwpoort, Curaçao, February 26 - March 2, 2018. Springer, 439–457. <https://doi.org/10.1007/978-3-662-58387-6_24>

28. **Matthias Grundmann, Till Neudecker, and Hannes Hartenstein. 2018.** Exploiting Transaction Accumulation and Double Spends for Topology Inference in Bitcoin. In *Financial Cryptography and Data Security - FC 2018 International Workshops, BITCOIN, VOTING, and WTSC*, Nieuwpoort, Curaçao, March 2, 2018. Springer, 113–126. <https://doi.org/10.1007/978-3-662-58820-8_9>

29. **Ethan Heilman, Alison Kendler, Aviv Zohar, and Sharon Goldberg. 2015.** Eclipse Attacks on Bitcoin’s Peer-to-Peer Network. In *USENIX Security 2015*, Washington, D.C., USA, August 12-14, 2015. USENIX Association, 129–144. <https://www.usenix.org/conference/usenixsecurity15>

30. **Sebastian A. Henningsen, Martin Florian, Sebastian Rust, and Björn Scheuermann. 2020.** Mapping the Interplanetary Filesystem. In *2020 IFIP Networking Conference, Networking 2020*, Paris, France, June 22-26, 2020. IEEE, 289–297. <https://ieeexplore.ieee.org/document/9142766>

31. **Lucianna Kiffer, Asad Salman, Dave Levin, Alan Mislove, and Cristina Nita-Rotaru. [n.d.]** Under the Hood of the Ethereum Gossip Protocol. ([n.d.])

32. **Seoung Kyun Kim, Zane Ma, Siddharth Murali, Joshua Mason, Andrew Miller, and Michael Bailey. 2018.** Measuring Ethereum Network Peers. In *Proceedings of IMC 2018*. ACM, 91–104. <https://dl.acm.org/citation.cfm?id=3278542>

33. **Philip Koshy, Diana Koshy, and Patrick D. McDaniel. 2014.** An Analysis of Anonymity in Bitcoin Using P2P Network Traffic. In *Financial Cryptography and Data Security - 18th International Conference, FC 2014*, Christ Church, Barbados, March 3-7, 2014. Springer, 469–485. <https://doi.org/10.1007/978-3-662-45472-5_30>

34. **Kai Li, Jiaqi Chen, Xianghong Liu, Yuzhe Richard Tang, XiaoFeng Wang, and Xiapu Luo. 2021.** As Strong As Its Weakest Link: How to Break Blockchain DApps at RPC Service. In *28th Annual Network and Distributed System Security Symposium, NDSS 2021*, virtually, February 21-25, 2021. The Internet Society. <https://www.ndss-symposium.org/ndss-paper/as-strong-as-its-weakest-link-how-to-break-blockchain-dapps-at-rpc-service/>

35. **Kai Li, Yibo Wang, and Yuzhe Tang. 2021.** DETER: Denial of Ethereum Txpool Services. In *Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS ’21)*, November 15-19, 2021, Virtual Event, Republic of Korea. <https://doi.org/10.1145/3460120.3484633>

36. **Petar Maymounkov and David Mazières. 2002.** Kademlia: A Peer-to-Peer Information System Based on the XOR Metric. In *Peer-to-Peer Systems, First International Workshop, IPTPS 2002*, Cambridge, MA, USA, March 7-8, 2002. Springer, 53–65. <https://doi.org/10.1007/3-540-45748-8_5>

37. **Andrew Miller, James Litton, Andrew Pachulski, Neal Gupta, Dave Levin, Neil Spring, and Bobby Bhattacharjee. 2015.** Discovering Bitcoin’s Network Topology and Influential Nodes. University of Maryland, Tech. Rep. (2015).

38. **Till Neudecker. 2019.** Characterization of the Bitcoin Peer-to-Peer Network (2015-2018). Technical Report 1. Karlsruher Institut für Technologie (KIT). <https://doi.org/10.5445/IR/1000091933>

39. **Till Neudecker, Philipp Andelfinger, and Hannes Hartenstein. 2016.** Timing Analysis for Inferring the Topology of the Bitcoin Peer-to-Peer Network. In *2016 Intl IEEE Conferences on Ubiquitous Intelligence & Computing, Advanced and Trusted Computing, Scalable Computing and Communications, Cloud and Big Data Computing, Internet of People, and Smart World Congress (UIC/ATC/ScalCom/CBDCom/IoP/SmartWorld)*, Toulouse, France, July 18-21, 2016. IEEE, 358–367. <https://doi.org/10.1109/UIC-ATC-ScalCom-CBDCom-IoP-SmartWorld.2016.0070>

40. **Mark E. J. Newman. 2003.** The structure and function of complex networks. *SIAM Review* 45, 2 (2003), 167–256.

41. **Aristodemos Paphitis, Nicolas Kourtellis, and Michael Sirivianos. 2021.** A First Look into the Structural Properties and Resilience of Blockchain Overlays. CoRR abs/2104.03044 (2021). <https://arxiv.org/abs/2104.03044>

### Appendices

#### A. TXPROBE’S APPLICABILITY TO ETHEREUM

TxProbe is inapplicable to measuring the topology of the Ethereum network due to two distinct features:

1. **Ethereum’s Propagation Model:** Transactions can be directly propagated without announcement.
2. **Ethereum’s Account-Based Model:** The balance state can be arbitrarily recharged, unlike Bitcoin's UTXO model where the balance can only transit one way, from unspent to spent.

In the main text, we explain why TxProbe is inapplicable in Ethereum due to the account-based model. Here, we explain its inapplicability due to the propagation model.

Briefly, before sending `txA`, TxProbe sends two double-spending transactions respectively to nodes A and B such that `txA` on node B will become an orphan transaction that is not propagated further. However, with Ethereum’s account model, `txA` on node B would not necessarily be an orphan transaction (or equivalently a future transaction in Ethereum’s jargon). It can be an overdraft transaction that is propagated. More detailed description is below:

- **Nodes A and B:**
  - TxProbe [24] actively measures the Bitcoin network topology by exploiting its handling of orphan/double-spending transactions in transaction propagation. Other works [28] measure the Bitcoin topology using a similar approach.
  - In the following, we describe the working of TxProbe [24] in detail, with the purpose to discuss its applicability to measuring Ethereum topology. Suppose using TxProbe to measure the connection between nodes A and B.
  - The measurement node first sends to nodes A and B two double-spending transactions, say `tx'A` and `tx'B`. It then sends the third transaction `txA` spending `tx'A` to node A. It observes the presence of the transaction `txA` on node B. If it is present, there is a connection between nodes A and B.
  - Applying TxProbe to measuring Ethereum topology is unfeasible due to Ethereum’s account model: Ethereum adopts a different model to store ledger states than Bitcoin, and the definition of orphan transactions in Ethereum is different than that in Bitcoin.
  - Specifically, Ethereum stores ledger state (how much cryptocurrency an address/account has) in per-account balances, namely the account model, while Bitcoin stores the balance state in per-transaction UTXO, namely the UTXO model. Under UTXO, an orphan transaction is a transaction that spends an input whose state is yet to be determined. This makes the third transaction in the TxProbe protocol an orphan on Node B, which does not propagate. However, under the account model, an orphan transaction (or so-called future transaction) is one with a non-continuous nonce to any previous transaction, where a nonce is per a sender account. Thus, the third transaction that spends a double-spending transaction is not necessarily an orphan, as it may be an over-drafting transaction with a valid nonce (in which case, the transaction will be propagated by node B).

#### B. LOCAL VALIDATIONS

##### B.1 Local Validation of Serial Measurement

**Local Evaluation:**

In this experiment, we set up three local Ethereum nodes, mutually connected and without communication to any external Ethereum nodes. The three nodes represent nodes M, A, and B in the TopoShot protocol. In this local environment, we aim to evaluate TopoShot’s correctness with respect to varying mempool sizes on node A.

On node A, we vary node A’s mempool sizes from 3120 to 9120. In the experiments, we also populate the three-node network with a varying number of pending transactions `txO`, such as 1, 1000, 2000, and 3000 such transactions.

We use the measurement results from TopoShot and compare them against the ground-truth to report the recall in Figure 7. The result shows that given mempool size X and the number of pending transactions X', TopoShot achieves 100% recall when X - X' <= 5120. Otherwise, the recall drops to 0%.

**Figure 7: Recall with increasing mempool size**

This validation study implies that matching the number of pending transactions to the actual mempool size is crucial to achieving 100% measurement recall.

##### B.1.1 Local Validation of Parallel Measurement

We conduct a validation of the parallel measurement method in a local environment without connection to a remote Ethereum network. Here, the measurement node M, two nodes A1 and A2, as well as node B, are run on local machines under our control.

In terms of the connections among A1, A2, and B, there are two permutations of three possibilities, that is, P(3, 2) = 8. Given the symmetry (e.g., ⟨A2, B⟩ is equivalent to ⟨A1, B⟩), we consider six possibilities as listed below. For each possibility, we use TopoShot to conduct measurements for 100 times. The final result is positive if any of the 100 measurements returns a positive result (i.e., there is a connection). Then by comparing the measurement results and the ground-truth, we obtain the precision and recall of the measurement results.

As can be seen from Table 8, all results are with 100% recall and precision, even when there is a connection between A1 and A2. The theoretical measurement inaccuracy when A1 connects to A2 seems unlikely to occur in practice.

**Table 8: Recall and precision of using TopoShot on local nodes**

| Connections | Recall | Precision |
|-------------|--------|-----------|
| ⟨A1, A2⟩, ⟨A1, B⟩, ⟨A2, B⟩ | 100% | 100% |
| ⟨A1, A2⟩, ⟨A1, B⟩ | 100% | 100% |
| ⟨A1, A2⟩, ⟨A2, B⟩ | 100% | 100% |
| ⟨A1, A2⟩ | 100% | 100% |
| ⟨A1, B⟩, ⟨A2, B⟩ | 100% | 100% |
| ⟨A1, B⟩ (also ⟨A2, B⟩) | 100% | 100% |
| Null | 100% | 100% |

#### C. MEASUREMENT EXTENSION FOR NON-INTERFERENCE

##### C.1 Extending TopoShot with Non-interference Verification

**Goals:**

When running TopoShot against an operational Ethereum network, notably the mainnet, it is required that the measurement does not interfere with the normal operations of the network; for instance, TopoShot should not evict any transactions that are otherwise included in the blockchain. This non-interference property is formally described in our analysis framework in § C.2.

**Design Rationale:**

To design TopoShot extension for assurance of non-interference, one possible approach is to set a low Gas price (i.e., TopoShot’s parameter Y) and prove the non-interference, a priori, by considering the theoretically worst case that could occur after the measurement starts. Our initial design follows this approach, but just to find it is unfeasible with the current Ethereum-node settings.

Instead of proving non-interference a priori, we aim at verifying the non-interference a posteriori. That is, the measurement node M initially sets a conservatively low Gas price (e.g., based on heuristics) and conducts the measurement. Meanwhile, the node monitors several conditions on the tested network during and after the measurement, in order to establish non-interference posterior.

**Measurement Extension for Verification:**

Consider a measurement node M runs TopoShot against a subject node S in the Ethereum network C (S can be either Node A or B as in our serial-measurement model in Figure 2b). The measurement starts at time t1 and ends at t2. Node M sets a low Gas price at Y = Y0 and monitors the blockchain on the following conditions:

- **Specifically, Geth’s default mempool length 5120 is too small to feed all the blocks produced in the three-hour span (expiration time), by considering the worst case that no new transactions are submitted to the Ethereum network after the measurement.**

By monitoring these conditions, we can ensure that the measurement does not interfere with the normal operation of the Ethereum network.