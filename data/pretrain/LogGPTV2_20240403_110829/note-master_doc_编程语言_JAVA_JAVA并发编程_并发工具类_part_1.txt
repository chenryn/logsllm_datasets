# JUC
J.U.C java.util.concurrent
主要分为几个类簇：
- 线程同步类 使进程间的协调更加容易 CountDownLatch CyclicBarrier等
- 并发集合类
- 线程管理类 线程池等
- 锁相关类 
## ReentrantLock
- 语义同 synchronized 锁，可重入互斥锁
- 构造器接受 fairness 的参数，fairness 是 ture 时，保证获得锁时的顺序，false 不保证
轻量级锁与重量级锁:“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的
ReentrantLock 和synchronized 都是 可重入锁
可重入 是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响
```java
try {
    lock.lock();
    // do something
} catch (Exception e){
    e.printStackTrace();
}finally {
    lock.unlock();
}
```
- 尝试加锁
```java
lock.tryLock() // 可以进行“尝试锁定”tryLock，这样无法锁定，或者在指定时间内无法锁定，线程可以决定是否继续等待
```
- 可打断的加锁
```java
lock.lockInterruptibly(); // 可以通过interrupt()打断
```
- 公平锁
公平锁：每个线程抢占锁的顺序为先后调用lock方法的顺序依次获取锁
非公平锁：每个线程抢占锁的顺序不定，谁运气好，谁就获取到锁，和调用lock方法的先后顺序无关
```java
new ReentrantLock(true); // true为公平锁
```
为什么需要非公平锁：在竞争激烈的情况下，唤醒等待线程的开销会很高，基本上是一种等待-获取-等待-获取的串行的局面，无法很好地利用并发性
### synchronized vs ReentrantLock 
- synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的
- 新版本java 两者性能大致相同
- ReentrantLock 可中断，而 synchronized 不行
- synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的
- ReentrantLock 可以同时绑定多个 Condition 对象
- synchronized 是基于代码块的方式 是由虚拟机自动帮开发人员释放锁 而 ReentrantLock 的加锁释放锁更加灵活但同时也更加危险
应该优先选择synchronized:
- synchronized的锁释放是自动的
- jvm天生支持
### 类层次结构
![2020225152237](/assets/2020225152237.jfif)
### 同步器
- 非公平地获取锁
```java
final boolean nonfairTryAcquire(int acquires) {
    final Thread current = Thread.currentThread();
    int c = getState();
    // 代表锁还没被获取
    if (c == 0) {
        // 设置状态标记获取锁
        if (compareAndSetState(0, acquires)) {
            // 标记获取锁的线程是当前线程
            setExclusiveOwnerThread(current);
            return true;
        }
    }
    // 锁已经被获取了，并且获取锁的线程是当前线程
    else if (current == getExclusiveOwnerThread()) {
        int nextc = c + acquires;
        if (nextc  cache = new HashMap<>();
    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
    public void put(String key, Object value) {
        ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();
        writeLock.lock();
        cache.put(key, value);
        writeLock.unlock();
    }
    public Object get(String key) {
        ReentrantReadWriteLock.ReadLock readLock = lock.readLock();
        readLock.lock();
        Object value = cache.get(key);
        readLock.unlock();
        return value;
    }
}
```
关于读写锁的一些问题：
- 释放优先：当一个线程释放写锁时，那么应该优先选择下一个读线程还是写线程，还是最先发出操作的线程
- 读线程插队：如果锁当前被一些读线程持有，但有一个写线程在等待，那么新到达的读线程是应该插队写线程还是老老实实排在写线程后面
- 重入性：读取和写入的锁是否可重入
- 降级：如果一个线程持有写锁，那么它能不能直接获取读锁
- 升级：如果一个线程持有读锁，那么它能不能优先于其他正在等待的线程获取写锁
## CountDownLatch(闭锁)
> 确保某些活动直到其他活动都完成后才继续执行
![202031219448](/assets/202031219448.png)
其最大的作用不是为了加锁，而是通过计数达到等待的功能，主要有两种形式的等待：
- 让一组线程在全部启动完成之后，再一起执行
- 主线程等待另外一组线程都执行完成之后，再继续执行
```java
CountDownLatch latch = new CountDownLatch(5);
for (int i = 0; i {
        Random random = new Random();
        try {
            Thread.sleep(random.nextInt(5000));
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("线程"+ finalI +"完成");
        lock.latch();
    }).start();
}
latch.await();
System.out.println("all mission complete");
```
### await
```java
// await方法的实现是获取共享锁，如果获得后就返回，否则就等待
public void await() throws InterruptedException {
    sync.acquireSharedInterruptibly(1);
}
// 这里sync判断能否获得锁的标志是state是否=0
protected int tryAcquireShared(int acquires) {
    return (getState() == 0) ? 1 : -1;
}
```
### countDown
```java
// countDown的实现就是释放一个锁
public void countDown() {
    sync.releaseShared(1);
}
// sync判断能否释放锁的标志是 释放这次锁之后，锁的个数为0
protected boolean tryReleaseShared(int releases) {
    // Decrement count; signal when transition to zero
    for (;;) {
        int c = getState();
        // 已经没有锁了
        if (c == 0)
            return false;
        int nextc = c - 1;
        if (compareAndSetState(c, nextc))
            return nextc == 0;
    }
}
```
## CyclicBarrier（栅栏）
>闭锁用于等待事件，而栅栏用于等待其他线程
![2020312194816](/assets/2020312194816.png)
```java
CyclicBarrier barrier = new CyclicBarrier(5, () -> System.out.println("all thread run"));
// 调用await的线程会进行等待，直到第5个线程调用await，所有线程才会继续执行
for (int i = 0; i  {
        Random rnd= new Random();
        try {
            Thread.sleep(rnd.nextInt(3000));
            System.out.println(Thread.currentThread()+"run");
            barrier.await();
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }
    }).start();
}
```
## phaser
## Semaphore(信号量)
> 用来控制使用资源的主体数量
```java
Semaphore semaphore = new Semaphore(5);
// Semaphore semaphore = new Semaphore(5,true); 公平的信号量
// 最多只有5个线程能同时运行
for (int i = 0; i {
        Random rnd = new Random();
        try {
            semaphore.acquire();
            System.out.println(Thread.currentThread()+"acquire lock");
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }finally {
            semaphore.release();
        }
    }).start();
}
```
## Exchanger
两个线程交换数据
```java
Exchanger exchanger = new Exchanger<>();
new Thread(()->{
    try {
        System.out.println("1st:"+exchanger.exchange("1"));
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}).start();
new Thread(()->{
    try {
        System.out.println("2nd:"+exchanger.exchange("2"));
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}).start();
```
## StampedLock
先试着读，然后通过 validate 方法确认是否进入了写模式，如果没有进入，就成功避免了获取锁的开销
```java