for DNS resolutions rather than BGP convergence. Previous stud-
ies demonstrate that BGP convergence can take minutes, whereas
we demonstrate that failover between the PoPs at the application
layer is much faster. This is because failover does not require full
propagation of the BGP updates to the entire Internet.
4.2 Failure Resiliency
Akamai DNS must be resilient to all sources of failure, including
the software, hardware, and network. While software releases are
vetted via a thorough QA process and extensive effort is made to val-
idate inputs, some problems may only present at the nameservers
470
10-1100101102failover time (seconds)0.00.20.40.60.81.0fraction of measurementswithdraw 21 PoPsadvertise 21 PoPswithdraw 2 PoPsadvertise 2 PoPsAkamai DNS
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
the transit links – typically the links over which metadata arrive –
for the PoP fail, but DNS traffic still reaches the nameservers via
peering links.
To mitigate the issues described above, the nameservers check
for staleness in critical state and, if determined to be stale, self-
suspends as described in §4.2.1. The exact criteria for staleness
varies among metadata. A common strategy is to declare state stale
if a critical input’s timestamp is older than a threshold.
4.2.3
Input-induced Failure. Since the nameservers consume a
wide variety of metadata inputs from varied internal and enterprise-
related sources, a great deal of care goes into validating each of these
inputs to ensure the safety of the nameservers. However, despite this
effort, there remains a highly unlikely but not impossible scenario
where a new input exercises a bug in the nameservers leading
to widespread crashes and potentially an outage. Even with very
long odds, such a scenario must be mitigated in order to meet our
resiliency mandate and protect the Internet ecosystem.
Akamai DNS protects against input-induced failures using input-
delayed nameservers. For each of the 24 anycast clouds, one PoP
is selected to house the input-delayed nameservers (in addition to
regular nameservers) that differ from other nameservers in three
ways. First, they receive all inputs with an artificially imposed 1-
hour delay. Second, they do not self-suspend due to input staleness.
Third, the BGP-speaker running along side the input-delayed name-
server advertises the anycast prefixes to the POP’s router with
a higher Multi-Exit Discriminator (MED) value than other name-
servers. The router prefers the advertisements with lowest MED.
So, in the common case where the regular nameservers are also
advertising the anycast prefixes to the router, the input-delayed
nameservers receive no DNS traffic.
The input-delayed nameservers will receive DNS traffic, how-
ever, when all other nameservers within the PoP withdraw their
advertisements, as would occur if an input caused them all to crash.
Similarly, if all other PoPs advertising the same anycast prefix
also withdraw their advertisements due to crashes, then all traffic
globally to the anycast prefix will failover to the input-delayed
nameservers within seconds as shown in §4.1. Since the input-
delayed nameservers have not yet received the input, they continue
to answer DNS queries with intentionally stale data ensuring that
Akamai DNS remains available, until Akamai DNS is fully restored.
Also, the input-delayed nameservers stop receiving any new in-
puts upon use, giving the operations team ample time to identify
and resolve the issue. Thus, the input-delayed system reduces an
extremely rare but potentially devastating outage to a period of
degraded service until mitigated.
4.2.4 Query-of-Death. Given that software crashes due to unex-
pected client traffic are a potential failure mode for all networked
systems, it is important for any DNS infrastructure to be resilient
against unexpected DNS queries, regardless of whether there is
malicious intent behind them. We call a DNS query that causes the
nameserver to crash a query-of-death (QoD). Although they are ex-
tremely rare, we observe that a QoD is seldom a malformed packet
not conforming to the relevant DNS RFCs. More often, a QoD arises
due to a corner-case in a complex query processing code path. No
matter the cause, when a nameserver crashes during answering a
query, the resolver will not receive an answer, eventually leading
471
to timeout & retry. If crashes are frequent, QoDs can cause a partial
or total service outage.
When a nameserver crashes, the on-machine monitoring agent
(Figure 6) detects it and instructs the BGP-speaker to withdraw
anycast advertisements, causing the router to forward traffic to
other machines in the PoP. However, forwarding a QoD to other
nameservers is problematic, as it could make them crash as well.
To mitigate QoDs, the nameservers detect unrecoverable faults
in their query processing logic and write the DNS payload of the
packet that it is currently processing to disk. A separate process on
the machine constructs and inserts a firewall rule to drop similar
DNS queries, preventing repeated crashes due to potential QoDs,
while allowing the nameserver to continue answering dissimilar
queries. However, the firewall rule may be too broad, dropping false
positives. Therefore, the rule is expunged after a configurable time
TQoD, so that the nameserver will occasionally attempt to answer
potential QoDs while limiting the crash rate to at most once per
TQoD. Further, this feature is only deployed on a subset of name-
servers. Thus, queries similar to the QoD that do not themselves
cause crashes experience a partial outage at worst while operations
teams work to identify the precise cause of the crash.
4.3 Attack Resiliency
Distributed Denial of Service (DDoS) attacks against authoritative
nameservers are frequent [6, 33] and sufficiently large attacks could
bring down all services the DNS supports. It is crucial that Akamai
DNS continues responding to valid DNS queries during attacks.
A DDoS attack attempts to exhaust the compute and/or network
resource of the DNS infrastructure. We describe architectural fea-
tures for resiliency and then show how these features can be put
into play in the context of both observed and hypothesized attack
scenarios.
4.3.1 Distributed Deployment. The first line of defense against
attacks is our highly distributed deployment. As mentioned in §3.1,
each enterprise is assigned a unique set of 6 anycast clouds to use for
their DNS zones and each anycast cloud is advertised from a large
set of PoPs. These PoPs are distributed worldwide and connected to
the Internet with thousands of peering links. Individually, PoPs are
over-provisioned in both bandwidth and compute to handle spikes
in traffic, allowing them to absorb a large distributed attack. No PoP
supports more than two anycast clouds. Even if an attacker saturates
a PoP that advertises one or two of the 6 clouds that support a zone,
resolvers, upon receiving a timeout, will retry against the other
4-5 clouds assigned to that zone [34]. Since the resolver is routed
to different PoPs for the other clouds, the resolver will, with high
probability, obtain an answer to the query.
Further, in case the target of an attack is a specific enterprise
deployed on Akamai DNS, rather than Akamai DNS itself, the
uniqueness of the 6 delegations used by that enterprise limits the
collateral damage to other enterprises not directly under attack.
In the worst case scenario that the PoPs advertising the clouds
assigned to enterprise A are all saturated, any other enterprise B
will have at least one delegation not in common with A and likely
advertised from a different PoP. Resolvers thus will be able to obtain
an answer for B’s DNS zones even in the worst case scenario. The
design choice of using 6 delegations is arbitrary and serves only to
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Schomp et al.
more peering links. Deducing exactly how anycast traffic will shift
can be hard, but in many cases we can infer that the other PoPs
with links to the same peer from which we withdraw will absorb
the attack.
V ) If spreading the attack is not possible, then withdrawing from
non-attack-sourcing links minimizes the collateral damage by shift-
ing as much legitimate traffic out of the saturated PoP as possible.
Finally, we note that while the above reactions are described
in terms of withdrawing routes, there are alternatives including
appending BGP communities[10] to implement remote triggered
blackhole filtering [35] or path prepending to reduce preference
for the route. Deciding which action to take is non-trivial and
potentially requires discussion with our network peers. Together
with the sensitivity of the issue and our preference to take no action
unless needed, we opt to leave the traffic engineering decisions to
human operators. Instead of automated systems for these tasks, we
focus on rich controls and rapid delivery of configuration safely
to PoPs that are under attack. Automated mechanisms to perform
traffic engineering and share information between network peers
are important areas for future work.
4.3.3 Query Scoring and Prioritization. To complement the dis-
tributed mitigations described earlier, we also built mitigation mech-
anisms that run on each machine as a part of the nameserver soft-
ware. Each query received by the nameserver is first given a penalty
score that represents the “legitimacy” of the query, where “suspi-
cious” queries receive more penalty than “legitimate” ones. Then,
when the queries are processed to generate a response, the legiti-
mate queries with lower penalty scores receive more resources than
the queries with higher penalty scores. This allows the nameserver
to prevent malicious queries from exhausting resources that it could
have used to serve legitimate ones. We describe this approach in
more detail below.
Query Scoring: Each DNS query passes through a sequence
of filters (described in §4.3.4), where each filter performs a set of
checks on the query parameters and adds a penalty score to the
query if needed. The total penalty score S assigned by the filters is
a measure of the legitimacy of the query. Next, the DNS query is
placed into one of a configurable number of queues according to
score. Each queue i has a maximum score value, Mi and the query
is placed into the queue i with the minimum Mi such that S ≤ Mi.
Queries with a high score, S ≥ Smax , are discarded outright as
definitively malicious.
Query Processing: Queries are read from queues in the increas-
ing order of penalty for processing. If a lower-penalty queue is
empty, it reads from the next higher-penalty queue. In this way,
more legitimate queries are processed ahead of suspicious queries.
Our query processing is work-conserving, so if there are any en-
queued queries, it will attempt to answer them, even if suspicious.
Starvation is allowed in all queues except for the lowest-penalty
queue. We note that starvation is only possible if the compute ca-
pacity of the nameserver is saturated answering lower-penalty DNS
queries.
4.3.4 Attack Scenarios and their Mitigations. We present a tax-
onomy of DDoS DNS attacks and show which architectural features
and mechanisms described above are most effective at mitigating
each type of attack. We present the attacks in the order – from
472
Figure 9: Decision tree of anycast traffic engineering actions
taken during an attack.
balance between assigning each enterprise a unique set and limiting
the total number of clouds needed.
4.3.2 Anycast Traffic Engineering. Another tool to combat DDoS
attacks is traffic engineering via BGP advertisements. As noted in
[33], PoPs within an anycast cloud may either absorb attacks or
withdraw advertisements to shift the attack to other PoPs. Since
anycast prefixes are advertised to each peer at each PoP individually,
the decision to withdraw can be made per advertisement. A human
operator chooses an action during an attack following the decision
tree in Figure 9 as described below.
I) The preferred action is always do nothing. As described in
§4.3.1, resolvers are only DoSed if multiple PoPs are saturated
causing packet loss on all delegations for a zone. If that is not the
case, then absorbing the attack at the few saturated PoPs effectively
mitigates the attack. We also note that any active reaction leaks
information which could be of use to the attacker to improve their
attack. Further, shifting traffic among PoPs during an attack can
reduce the effectiveness of some automated mitigation mechanisms
described in §4.3.4. To know whether resolvers are DoSed we rely
upon our external monitoring and information sharing with peers.
II) If resolvers are DoSed, determine what resource (bandwidth
or compute) is saturated. Measuring saturation of compute on the
nameservers is straightforward, while peering link congestion can
be determined with external monitoring or information sharing
with the peer. If neither is saturated, then there is likely upstream
congestion and we work with peers to determine where and how to
mitigate it.
III) If compute is saturated, withdrawing from a fraction of peer-
ing links sourcing attack traffic can disperse the attack among more
PoPs while absorbing a manageable fraction of the attack traffic in
each PoP.
IV ) However, if one or more peering links are congested, with-
drawing from these attack-sourcing links will shift the traffic else-
where, possibly to larger peering links or spreading the attack across
YESNOResolversDoSed?Are Peering Link(s)Congested?I) Do NothingYESNOCan SpreadAttack?YESNOIs ComputeSaturated?YESNOII) Workwith peersIII) Withdrawfrom fraction oflinks sourcingattackIV) Withdrawfrom all linkssourcing attackV) Withdrawfrom all linksnot sourcingattackAkamai DNS
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
our perspective – of the simplest to the most complex in both the
attacking instrument and mitigation mechanisms. Note that this
is not equivalent to ordering based upon impact or cost of the at-
tacks, as each one of these attacks can have significant impact if not
appropriately defended. Each attack is unique and all of Akamai
DNS’s mitigation mechanisms are reconfigurable so that they can
be tuned to react to a specific attack.
1) Volumetric: The goal in this class of attack is to saturate the
available bandwidth and cause DoS by dropping legitimate traffic
in queues at routers along the path. The attack traffic used need
not be DNS queries because the target is not the application but the
underlying network. Attacks in this class may use sources of ampli-
fication including DNS reflection [23] or NTP reflection [14]. The
attack traffic is typically easy to filter, e.g., simple firewall rules can
drop anything not destined to port 53 or distinguish DNS reflection
traffic from legitimate DNS queries using the QR-bit. In practice,
we observe that the bottleneck for volumetric attacks is usually
upstream from the nameservers as we have sufficient compute ca-
pacity to filter in the firewall at a higher rate than the bandwidth
available in peering links. Thus, volumetric attacks are the only
class of attacks listed here that typically fall into the category of
bandwidth saturating rather than compute saturating. Mitigating
them is a matter of having sufficient bandwidth to absorb the attack
and filtering in the firewall so that the traffic never reaches appli-
cations. We respond to this class of attacks by overprovisioning
peering links and reacting to saturated links as described in §4.3.2.
2) Direct Query: The simplest DNS-based DoS attack is to send
DNS queries directly to authoritative nameservers from one or more
attack machines. While this attack could saturate either bandwidth
or compute, in practice we observe that compute tends to be the
bottleneck for any class of attack that arrives at the application. To
combat this attack, we use a rate limiting filter in the query scoring
module that learns the “typical” query rate (in qps) of resolvers from
historical data and assigns a rate limit on a per-resolver basis. A
query received from a resolver that is over its rate limit is assigned
a penalty score. As shown in Figure 3, DNS traffic is bursty, hence
we use a leaky bucket rate limiting mechanism.
Rate limiting is most effective when the attack is from a small
number of source IP addresses, but becomes less effective when the
attack is from a large number of source IPs that each need to be rate
limited, e.g., a Mirai botnet attack[24]. As the cumulative volume
and source diversity of the attack increases, the query scoring
module activates an allowlist filter that maintains an “allowlist” of
resolvers that are historically-known to Akamai DNS. As noted
in §2, the resolvers that drive the most DNS queries to Akamai
DNS are consistent over time, and so the allowlist changes only