### KEM CPAKEM and IND-CPA Security

#### 1. Security under MEX Attacks
In MEX (Multi-Execution) attacks, a corruption pattern can reveal all ephemeral secrets to the adversary, including the used randomness. This scenario is particularly relevant when the protocol is executed on a device with a compromised or faulty random number generator (RNG). In such cases, security must rely on long-term secrets that are ideally generated in a secure environment. 

In a naive approach, the randomness used by `CCAKEM.Enc` is corrupted, allowing an adversary to recompute the shared secret by simply running `CCAKEM.Enc`. To address this issue, it is essential to securely combine ephemeral randomness \( r \) with a long-term secret \( \sigma \) before using it as protocol input.

One method to achieve this is by using a "twisted PRF" trick, where the combination is done via `PRF(r, σ) ⊕ PRF(σ')` for two independent values \( r \) and \( r' \), and two independent long-term secrets \( \sigma \) and \( \sigma' \). This ensures that the security of the approach relies only on the security of the PRF in the standard model. For WireGuard, we can simplify this to `KDF1(σ, r)` under a dual-PRF assumption on `KDF1`.

#### 2. Resistance to Unknown-Keyshare Attacks
The static-static Diffie-Hellman (DH) exchange is the primary defense against unknown-keyshare attacks in WireGuard. Since the IDs (or public keys) of the parties are not hashed into the final session key, WireGuard has the option to hash a pre-shared key (PSK) into the session key. By default, the PSK is set to the all-zero string. In PQ-WireGuard, we set the PSK to `H(spki ⊕ spkr)`, ensuring that session keys are linked to the static public keys of the communicating parties, thus preventing unknown-keyshare attacks.

#### 3. Authenticated Initiation
The static-static DH also ensures that the first message from the initiator is authenticated. This allows the server to detect and reject illegitimate messages early in the handshake process. While this is not a formal security property, it helps mitigate Denial-of-Service (DoS) attacks. If the static public keys of WireGuard users are not publicly known, the default PSK value provides similar DoS protection. Users who do not want to rely on this assumption can set the PSK to a secret shared key agreed upon out-of-band.

#### Adding Key Confirmation
WireGuard uses the first application-data packet from the initiator for implicit key confirmation, which makes it impossible to prove the handshake secure in the eCK-PFS-PSK model. The proof in [9] requires an explicit and separate key-confirmation message from the initiator at the end of the handshake. In PQ-WireGuard, we add this explicit key-confirmation message.

### High-Level View of the PQ-WireGuard Handshake

**Initiator:**
1. Generate ephemeral key pair: \((eski, epki) \leftarrow CPAKEM.Gen()\)
2. Set \( sidi \)
3. Generate ephemeral randomness: \( ri \leftarrow \{0, 1\}^\lambda \)
4. Encrypt using CCAKEM with mixed randomness: \((ct1, shk1) \leftarrow CCAKEM.Enc(spkr, KDF1(\sigma_i, ri))\)
5. Compute long-term key: \( ltk \leftarrow AEAD.Enc(\kappa_3, 0, H(spki), H3) \)
6. Get current timestamp: \( now \leftarrow Timestamp() \)
7. Encrypt timestamp: \( time \leftarrow AEAD.Enc(\kappa_4, 0, H4, now) \)
8. Compute MAC: \( m1 \leftarrow MAC(H(lbl3 \parallel spkr), type \parallel 03 \parallel sidi \parallel epki \parallel ct1 \parallel ltk \parallel time) \)
9. Compute cookie MAC: \( m2 \leftarrow MAC(cookie, type \parallel 03 \parallel sidi \parallel epki \parallel ct1 \parallel ltk \parallel time \parallel m1) \)
10. Send `InitHello`: \( InitHello \leftarrow type \parallel 03 \parallel sidi \parallel epki \parallel ct1 \parallel ltk \parallel time \parallel m1 \parallel m2 \)

**Responder:**
11. Generate ephemeral key pair: \((e, rr) \leftarrow \{0, 1\}^\lambda \times \{0, 1\}^\lambda\)
12. Encrypt using CPAKEM: \((ct2, shk2) \leftarrow CPAKEM.Enc(epki, e)\)
13. Encrypt using CCAKEM with mixed randomness: \((ct3, shk3) \leftarrow CCAKEM.Enc(spki, KDF1(\sigma_r, rr))\)
14. Generate zero: \( zero \leftarrow AEAD.Enc(\kappa_9, 0, H9, \emptyset) \)
15. Compute MAC: \( m1 \leftarrow MAC(H(lbl3 \parallel spki), type \parallel 03 \parallel sidr \parallel sidi \parallel ct2 \parallel ct3 \parallel zero) \)
16. Compute cookie MAC: \( m2 \leftarrow MAC(cookie, type \parallel 03 \parallel sidr \parallel sidi \parallel ct2 \parallel ct3 \parallel zero \parallel m1) \)
17. Send `RespHello`: \( RespHello \leftarrow type \parallel 03 \parallel sidr \parallel sidi \parallel ct2 \parallel ct3 \parallel zero \parallel m1 \parallel m2 \)

**Key Confirmation:**
18. Generate confirmation: \( conf \leftarrow AEAD.Enc(\kappa_{10}, 0, H10, \emptyset) \)
19. Compute MAC: \( m1 \leftarrow MAC(H(lbl3 \parallel spkr), type \parallel 03 \parallel sidi \parallel sidr \parallel conf) \)
20. Compute cookie MAC: \( m2 \leftarrow MAC(cookie, type \parallel 03 \parallel sidi \parallel sidr \parallel conf \parallel m1) \)
21. Send `InitConf`: \( InitConf \leftarrow type \parallel 03 \parallel sidi \parallel sidr \parallel conf \parallel m1 \parallel m2 \)

### Security Analysis

We provide two proofs of security for PQ-WireGuard: one in the computational model and one in the symbolic model. These proofs ensure the same level of security guarantees as for WireGuard.

#### A. The Computational Proof
To prove that the PQ-WireGuard handshake achieves eCK-PFS-PSK security, we adapt the computational proof for WireGuard [9] by Dowling and Paterson. The core of this adaptation involves replacing proof steps that use the PRFODH or DDH assumptions with generic KEM-security and PRF assumptions. Most of these changes are straightforward.

On a high level, both proofs consist of a case distinction between whether the adversary tries to impersonate a party or learn information about the established key, and the ways in which the adversary can corrupt parties. For each case, the proof uses a sequence of games to show that the adversary must either break the authenticity of the AEAD scheme or distinguish two information-theoretically indistinguishable bit strings to learn any non-trivial information about the key.

Most game hops involve the PRF or PRFswap assumptions, where the output of KDF, used to combine two intermediate values, at least one of which is random, gets replaced by a random value. These "symmetric game hops" are essentially the same in both the WireGuard and PQ-WireGuard proofs.

The other major category of game hops involves replacing the output of some asymmetric primitive with a random value. For WireGuard, these are the cases where two intermediate values are combined using a PRF. In PQ-WireGuard, these steps are adapted to use KEM security and PRF assumptions.