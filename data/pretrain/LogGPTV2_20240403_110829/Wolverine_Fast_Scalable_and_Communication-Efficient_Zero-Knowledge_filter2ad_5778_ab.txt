pipelined fashion, which is why the overall time is the maximum of the prover and veriﬁer times. Spartan uses a 256-bit ﬁeld while Virgo
and Wolverine use a 61-bit ﬁeld. See Section V for details.
Online phase. The online phase of our protocol can be viewed
as adapting the core idea of the ZKGC approach by viewing
a ZK proof as a special case of secure two-party computation
(2PC) where one party has no input. We differ from the ZKGC
approach in the underlying 2PC protocol we use as our starting
point: rather than using garbled circuits, we instead rely on a
“GMW-style” approach [36] using authenticated triples [5],
[51] (whose values are known to the prover) generated during
the ofﬂine phase. A drawback of GMW-style protocols in the
context of generic 2PC is that they have round complexity
linear in the depth of the circuit being evaluated. Crucially, in
the ZK context, we can exploit the fact that only one party has
input to obtain an online phase that runs in constant rounds
(or can even be non-interactive in the random-oracle model).
The prover and veriﬁer run in linear time since they each
make only one pass over the circuit. Moreover,
they can
evaluate the circuit “on-the-ﬂy” (i.e., with memory over-
head linear in what is needed to evaluate the circuit non-
cryptographically), which allows our protocol to scale easily to
very large circuits. Our approach is communication-efﬁcient as
well: for a circuit with C multiplication gates over an arbitrary
ﬁnite ﬁeld Fp, the marginal communication complexity is only
either 3ρ/ log C + 1 elements per gate for small ﬁelds or 2–4
elements per gate for large ﬁelds.
Instantiating the ofﬂine phase. During the ofﬂine phase we
set up authenticated multiplication triples (over the relevant
ﬁeld Fp) between the prover and veriﬁer using subﬁeld Vector
Oblivious Linear Evaluation (sVOLE) [13], [15]. For boolean
circuits (i.e., p = 2), we use the recent work by Yang et al. [60]
to generate an initial pool of authenticated bits, and then use
those authenticated bits to generate authenticated triples as in
prior work [52]. For p > 2, we extend the protocol of Yang et
al. to obtain an efﬁcient sVOLE protocol for arbitrary ﬁelds
(which we believe to be of independent interest). We defer
further details to Section IV.
B. Performance and Comparison to Prior Work
We have implemented Wolverine for both boolean and arith-
metic circuits. Running over a 200 Mbps network, Wolverine
processes boolean circuits at
the rate of 2,000,000 AND
gates per second (XOR gates are free), and arithmetic circuits
over a 61-bit large ﬁeld at the rate of 600,000 multiplication
gates per second (addition gates are free). In Table I we
provide benchmarks comparing Wolverine to prior work for
two examples: proving knowledge of the leaves that hash to
a Merkle-tree root (naturally represented as a boolean circuit)
and proving knowledge of the inputs to matrix multiplication
over a large ﬁeld (naturally represented as an arithmetic
circuit). In the boolean setting, Wolverine uses 15× less
communication than ZKGC [42] along with lower running
time; Wolverine outperforms all other work in terms of overall
time and memory usage. In the arithmetic setting, Wolverine is
5× slower than Virgo [63] but needs only 3% of the memory.
The advantage in memory usage would be even larger for
larger circuits, and would enable Wolverine to scale to circuits
larger than what can be feasibly handled by Virgo.
Comparison to ZK proofs based on VOLE/OT. Boyle et
al. [13], [15] also proposed a framework for ZK proofs in
which an ofﬂine phase is used to set up correlated randomness
between the prover and veriﬁer, and the subsequent online
phase is non-interactive. With regard to the online phase, the
primary advantages of their work are that the online phase can
be non-interactive without the random-oracle model, and can
be run any polynomial number of times following a single
execution of the ofﬂine phase (that is, the ofﬂine phase is
reusable). An advantage of our work is that it applies to
circuits over arbitrary ﬁelds, whereas the work of Boyle et
al. applies either to boolean circuits [15] or arithmetic circuits
over large ﬁelds [13]. More to the point, the focus of our
work is concrete efﬁciency, which was not investigated by
Boyle et al. For boolean circuits, the ZK protocol of Boyle et
al. [15] based on oblivious transfer requires communicating
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1075
over 100,000 bits per gate when ρ = 40, which is four
orders of magnitude larger than our protocol. For large ﬁelds,
the VOLE-based ZK protocol of Boyle et al. [13] requires
communication of at least 16 elements per gate, whereas our
protocol sends only 2–4 elements per gate. We also offer
concrete efﬁciency improvements for the ofﬂine phase in the
large-ﬁeld case. In particular, our sVOLE protocol avoids the
generic, maliciously secure two-party computation used by
Boyle et al. [13].
Comparison to zk-SNARKs. Our ZK protocol occupies a
different portion of the solution space than (existing) zk-
SNARKs. Existing zk-SNARKs impose concretely high mem-
ory requirements on the prover (cf. Table I), even when the
memory requirements are linear in the circuit size. (While
there are zk-SNARKs in which the prover asymptotically uses
sublinear memory [24], such schemes are currently ≈ 200×
slower than state-of-the-art zk-SNARKs that uses linear mem-
ory [54].) The prover memory in Wolverine is signiﬁcantly
lower, allowing Wolverine to scale to very large circuits. On
the other hand, zk-SNARKs have many advantages: they are
non-interactive and have lower communication. They also have
better efﬁciency for the veriﬁer, although their overall time
(i.e., including the time for the prover to generate the proof)
might be longer.
In independent and concurrent work, Dittmer, Ishai, and
Ostrovsky [29] have also developed a ZK protocol based on
VOLE. They focus on communication complexity rather than
concrete performance; their protocol only considers the case
of large ﬁelds, and has lower communication complexity than
our protocol in that case. Subsequent to our work, Baum,
Malozemoff, Rosen and Scholl [3] have also proposed a
different VOLE-based ZK protocol.
Organization of the paper. After reviewing some prelimi-
naries in Section II, we describe the online phase of our ZK
proof in Section III. In Section IV we describe the details of
our sVOLE construction used in the ofﬂine phase of our ZK
proof. We provide experimental results in Section V.
II. PRELIMINARIES
We use κ and ρ to denote the computational and statistical
security parameters, respectively. We let negl(·) denote a
negligible function, and use log to denote logarithms in base 2.
We write x ← S to denote sampling x uniformly from a set S,
and x ← D to denote sampling x according to a distribution D.
We deﬁne [a, b) = {a, . . . , b − 1} and write [n] = {1, . . . , n}.
We use bold lower-case letters like a for row vectors, and bold
upper-case letters like A for matrices. We let a[i] denote the
ith component of a (with a[0] the ﬁrst entry), and let a[i : j)
represent the subvector (a[i], . . . , a[j − 1]).
A circuit C over a ﬁeld Fp is deﬁned by a set of input
wires Iin and output wires Iout, along with a list of gates of
the form (α, β, γ, T ), where α, β are the indices of the input
wires of the gate, γ is the index of the output wire of the
gate, and T ∈ {Add, Mult} is the type of the gate. If p = 2,
then C is a boolean circuit with Add = ⊕ and Mult = ∧. If
p > 2 is prime, then C is an arithmetic circuit where Add/Mult
correspond to addition/multiplication in Fp. We let C denote
the number of Mult gates in the circuit.
When we work in an extension ﬁeld Fpr of Fp, we ﬁx
some monic, irreducible polynomial f (X) of degree r and
so Fpr ∼= Fp[X]/f (X). We let X ∈ Fpr denote the element
can be written uniquely as w =(cid:80)r−1
corresponding to X ∈ Fp[X]/f (X); thus, every w ∈ Fpr
i=0 wi · Xi with wi ∈ Fp
for all i, and we may view elements of Fpr equivalently as
vectors in Fr
p. When we write arithmetic expressions involving
both elements of Fp and elements of Fpr, it is understood that
values in Fp are viewed as lying in Fpr in the natural way.
We let F∗ denote the nonzero elements of a ﬁeld F.
A. Information-Theoretic MACs and Batch Opening
We use information-theoretic message authentication codes
(IT-MACs) [51], [26] to authenticate values in a ﬁnite ﬁeld Fp
using an extension ﬁeld Fpr ⊇ Fp. In more detail, let ∆ ∈ Fpr
be a global key, sampled uniformly, that is known only by one
party PB. A value x ∈ Fp known by the other party PA can
be authenticated by giving PB a uniform key K[x] ∈ Fpr and
giving PA the corresponding MAC tag
M[x] = K[x] + ∆ · x ∈ Fpr .
p and w ∈ Fn
pr, while PB holds v ∈ Fn
We denote such an authenticated value by [x]. Authenticated
values are additively homomorphic, i.e., if PA and PB hold
authenticated values [x], [x(cid:48)] then they can locally compute
[x(cid:48)(cid:48)] = [x + x(cid:48)] by having PA set x(cid:48)(cid:48) := x + x(cid:48) and M[x(cid:48)(cid:48)] :=
M[x] + M[x(cid:48)] and having PB set K[x(cid:48)(cid:48)]
:= K[x] + K[x(cid:48)].
Similarly, for a public value b ∈ Fp, the parties can locally
compute [y] = [x+b] or [z] = [bx]. We denote these operations
by [x(cid:48)(cid:48)] = [x]+[x(cid:48)], [y] = [x]+b, and [z] = b·[x], respectively.
We extend the above notation to vectors of authenticated
values as well. In that case, [u] means that (for some n) PA
holds u ∈ Fn
pr with
w = v + ∆· u. An authenticated multiplication triple consists
of authenticated values [x], [y], [z] where z = x · y.
Batch opening of authenticated values. An authenticated
value [x] can be “opened” by having PA send x ∈ Fp and
M[x] ∈ Fpr to PB, who then veriﬁes that M[x] ?= K[x] + ∆· x.
This has soundness error 1/pr, and requires sending an
additional r log p bits (beyond x itself). While this can be
repeated in parallel when opening multiple authenticated val-
ues [x1], . . . , [x(cid:96)], communication can be reduced using batch-
ing [51], [26]. We describe two approaches in Appendix B.
Hereafter, we write Open([x]) to denote a generic batch
opening of a vector of authenticated values. In addition, we
write CheckZero([x]) for the special case where all xi are
supposed to be 0 and so need not be sent. We let εopen denote
the soundness error (which depends on the technique used);
when using either of the techniques described above, εopen is
independent of the number (cid:96) of authenticated values opened.
B. Security Model and Functionalities
We use the universal composability (UC) framework [22] to
prove security in the presence of a malicious, static adversary.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1076
Functionality FZK
Upon receiving (prove,C, w) from a prover P and (verify,C)
from a veriﬁer V where the same (boolean or arithmetic) circuit
C is input by both parties, send true to V if C(w) = 1; otherwise,
send false to V.
Fig. 1: The zero-knowledge functionality.
Functionality F p,r
sVOLE
Initialize: Upon receiving init from PA and PB, sample
∆ ← Fpr if PB is honest or receive ∆ ∈ Fpr from the adversary
otherwise. Store global key ∆ and send ∆ to PB, and ignore
all subsequent init commands.
Extend: This procedure can be run multiple times. Upon
receiving (extend, (cid:96)) from PA and PB, do:
1) If PB is honest, sample K[x] ← F(cid:96)
2) If PA is honest, sample x ← F(cid:96)
K[x] ∈ F(cid:96)
p and compute M[x] :=
K[x] + ∆· x ∈ F(cid:96)
p and M[x] ∈
pr from the adversary, and then recompute K[x] := M[x]−
F(cid:96)
∆ · x ∈ F(cid:96)
pr .
pr . Otherwise, receive x ∈ F(cid:96)
pr . Otherwise, receive
pr from the adversary.
3) Send (x, M[x]) to PA and K[x] to PB.
Global-key query: If PA is corrupted, receive (guess, ∆(cid:48)) from
the adversary with ∆(cid:48) ∈ Fpr . If ∆(cid:48) = ∆, send success to PA
and ignore any subsequent global-key query. Otherwise, send
abort to both parties and abort.
Fig. 2: Functionality for subﬁeld VOLE.
We say that a protocol Π UC-realizes an ideal functionality
F if for any probabilistic polynomial time (PPT) adversary
A, there exists a PPT adversary (simulator) S such that for
any PPT environment Z with arbitrary auxiliary input z, the
output distribution of Z in the real-world execution where
the parties interact with A and execute Π is computationally
indistinguishable from the output distribution of Z in the ideal-
world execution where the parties interact with S and F.
The protocol that we construct in this work UC-realizes
the standard zero-knowledge functionality FZK, reproduced
in Figure 1 for completeness. (We omit session identiﬁers in
all our ideal functionalities for the sake of readability.) Our
ZK protocol relies on the subﬁeld Vector Oblivious Linear
Evaluation (sVOLE) functionality (see Figure 2), which is the
same as that by Boyle et al. [14], except that the adversary
is allowed to make a global-key query on ∆ and would incur
aborting for an incorrect guess. After an initialization that is
done once, this functionality allows two parties to repeatedly
generate a vector of authenticated values known to PA. Other
functionalities are given for reference in Appendix A.
III. OUR ZERO-KNOWLEDGE PROTOCOL
In Figure 3, we describe our zero-knowledge protocol
ΠZK, which operates in the F p,r
sVOLE-hybrid model. As noted
in Section I-A, our protocol can be viewed as following a
“GMW-style” approach to secure two-party computation using
authenticated multiplication triples [51], [26]. In the secure-
computation setting, the evaluation of a multiplication gate
Protocol ΠZK
Inputs and parameters: The prover P and veriﬁer V hold a
circuit C over a ﬁnite ﬁeld Fp with C multiplication gates; P
holds a witness w such that C(w) = 1. Fix parameters B, c,
and r, and let (cid:96) = C · B + c.
Ofﬂine phase:
1) P (acting as PA) and V (acting as PB) send init to F p,r
2) P and V send (extend,|Iin| + 3(cid:96) + C) to F p,r
which returns a uniform ∆ ∈ Fpr to V.
sVOLE, which re-
turns authenticated values {[λi]}i∈Iin, {([xi], [yi], [ri])}i∈[(cid:96)],
and {[si]}i∈[C] to the parties.
(If V receives abort from F p,r
3) For i ∈ [(cid:96)], P sends di := xi · yi − ri ∈ Fp to V, and then
sVOLE, then it aborts.)
sVOLE,
both parties compute [zi] := [ri] + di.
Online phase:
4) For i ∈ Iin, P sends Λi := wi − λi ∈ Fp to V, and then
5) For each gate (α, β, γ, T ) ∈ C, in topological order:
both parties compute [wi] := [λi] + Λi.
a) If T = Add,
then the two parties locally compute
[wγ] := [wα] + [wβ].
b) If T = Mult and this is the ith multiplication gate, P
sends d := wα·wβ−si ∈ Fp to V, and then both parties
compute [wγ] := [si] + d.
6) V samples a random permutation π on {1, . . . , (cid:96)} and
to P. The two parties use π to permute the
sends it
{([xi], [yi], [zi])}i∈[(cid:96)] obtained in step 3.
7) For the ith multiplication gate (α, β, γ, Mult), where the
parties obtained ([wα], [wβ], [wγ]) in step 5, do the following
for j = 1, . . . , B:
a) Let ([x], [y], [z]) be the(cid:0)(i − 1)B + j(cid:1)th authenticated
triple (after applying π in step 6).
b) The parties run δα := Open([wα] − [x]) and δβ :=
Open([wβ] − [y]). The parties then compute [µ]
:=
[z] − [wγ] + δβ · [x] + δα · [y] + δα · δβ, and ﬁnally
run CheckZero([µ]).
8) For each of
the remaining c authenticated triples, say
([x], [y], [z]), the parties run x := Open([x]) and y :=
Open([y]). They also compute [ν] := [z] − x · y and then
run CheckZero([ν]).
9) For the single output wire o ∈ Iout with authenticated value
[wo], the parties run CheckZero([wo] − 1).
Fig. 3: Zero-knowledge proof in the F p,r
sVOLE-hybrid model.