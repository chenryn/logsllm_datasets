重点回顾
redisServer
# pubsub_patterns 链表的长度就是被订阅模式的数量
 PUBSUB NUMPAT
图18-20 pubsub_patterns 链表
pubsubPattern
music.*n
pattern
client-7
client
 pubsub_patterns
pubsubPattern
图18-21
redisServer
pattern
client-8
client
pubsub_patterns 链表
因为这个链表的长
pubsubPattern
第18章发布与订阅·303
pubsubPattern
"news.*"
pattern
client-9
client
client-7
client
---
## Page 308
304◆第四部分独立功能的实现
18.6
维基百科的 Glob 词条给出了 Glob 风格模式匹配的简介：http://en.wikipedia.org/wiki
 《 Pattern-Oriented Software Architecture Volume 4, A Pattern Language for Distributed
口关于发布与订阅模式的定义可以参考维基百科的Publish Subscribe Pattern 词条：http://
Glob_(programming)，具体的匹配符语法可以参考 glob(7)手册的 Wildcard Matching
Computing》一书第10章《Distribution Infrastructure》关于信息、信息传递、发布
en.wikipedia.org/wiki/Publish-subscribe_pattern，以及《设计模式》——书的 5.7 节。
与订阅等主题的讨论非常好，值得一看。
小节。
参考资料
---
## Page 309
WATCH命令的实现原理。
行的。
事务功能，说明事务中的多个命令是如何被保存到事务里面的，而这些命令又是如何被执
放人事务当中，最后由EXEC命令将这个事务提交（commit）给服务器执行：
执行完毕，然后才去处理其他客户端的命令请求。
期间，服务器不会中断事务而改去执行其他客户端的命令请求，它会将事务中的所有命令都
了一种将多个命令请求打包，然后一次性、按顺序地执行多个命令的机制，并且在事务执行
在介绍了事务的实现原理之后，我们将对 WATCH命令的作用进行介绍，并说明
在本章接下来的内容中，我们首先会介绍 Redis 如何使用 MULTI和EXEC命令来实现
以下是一个事务执行的过程，该事务首先以一个MULTI命令为开始，接着将多个命令
redis> MULTI
Redis 通过MULTI、EXEC、WATCH等命令来实现事务（transaction）功能。事务提供
redis> EXEC
QUEUED
(edis>
QUEUED
redis>
QUEUED
redis> GET "name"
QUEUED
"Peter Seibel"
OK
"Practical Common Lisp"
GET "author"
 SET “author" "Peter Seibel"
事
第19章
务
---
## Page 310
306·第四部分独立功能的实现
同命令执行不同的操作：
19.1.2命令入队
用以下伪代码来表示：
过在客户端状态的 flags 属性中打开 REDIS_MULTI 标识来完成的，MULTI 命令的实现可以
19.1.1事务开始
19.1
对 Redis 事务的原子性、一致性、隔离性和耐久性进行说明。
与此不同的是，当一个客户端切换到事务状态之后，服务器会根据这个客户端发来的不
当一个客户端处于非事务状态时，这个客户端发送的命令会立即被服务器执行：
MULTI命令可以将执行该命令的客户端从非事务状态切换至事务状态，这一切换是通
MULTI命令的执行标志着事务的开始：
本节接下来的内容将对这三个阶段进行介绍，说明一个事务从开始到结束的整个过程。
因为事务的安全性和可靠性也是大家关注的焦点，所以本章最后将以常见的 ACID 性质
redis> GET "author"
OK
redis> GET "name"
"dstr uoumoo testaoeidu soweu, ias  MULTI
3）事务执行。
2）命令人队。
1）事务开始。
一个事务从开始到结束通常会经历以下三个阶段：
事务的实现
replyoK()
#返回OK回复
client.flags
#打开事务标识
IIN SIGEY =1 S
---
## Page 311
里面：
19.1.3
每个 Redis 客户端都有自己的事务状态，这个事务状态保存在客户端状态的 mstate 属性
typedef struct multiState f
 redisClient;
typedef struct redisclient {
服务器判断命令是该人队还是该立即执行的过程可以用流程图19-1来描述。
口
口
务队列里面，然后向客户端返回QUEUED 回复。
以外的其他命令，那么服务器并不立即执行这个命令，
与此相反，如果客户端发送的命令是EXEC、DISCARD、WATCH、MULTI四个命令
个，那么服务器立即执行这个命令。
如果客户端发送的命令为EXEC、DISCARD、WATCH、MULTI四个命令的其中一
muItiCmd *commands;
//事务队列，FIFO顺序
multistate mstate;
1/事务状态
事务队列
图19-1服务器判断命令是该入队还是该执行的过程
向客户端返回 QUEUED
EXEC、 DISCARD. WATCH
将命令放人事务队列
/* MULTI/EXEC state */
或MULTI？
这个命令是否
否
是
这个客户端正处于事务状态？
服务器接到来自客户端的命令
向客户端返回命令的执行结果
是
执行这个命令
否
，而是将这个命令放人一个事
第19章事
务307
---
## Page 312
308·第四部分独立功能的实现
的前面，而较后人队的命令则会被放到数组的后面。
已人队命令的相关信息，包括指向命令实现函数的指针、命令的参数，以及参数的数量：
口最后人队的另一个GET命令被放在了事务队列的索引3位置上。
口第三人队的另一个SET命令被放在了事务队列的索引2位置上。
第二人队的GET命令被放在了事务队列的索引1位置上。
口最先人队的SET命令被放在了事务队列的索引O位置上。
那么服务器将为客户端创建图19-2所示的事务状态：
redis> MULTI
举个例子，如果客户端执行以下命令：
事务队列以先进先出（FIFO）的方式保存人队的命令，较先人队的命令会被放到数组
typedef struct multiCmd {
事务队列是一个 multiCmd类型的数组，数组中的每个 multiCmd 结构都保存了一个
QUEUED
cedis> GET "author"
QUEUED
redis> SET "author" "Peter Seibel"
QUEUED
redis> GET "name"
QUEUED
"dsir uouuoo teotaoeia" maueu, 4as  EXEC
GEr "author"
SET "author" "peter Seibel"
GET "name"
接着执行命令：
"Peter Seibel"
OK
"Practical Common Lisp"
OK
执行事务
multiCmd [4]
multiCmd
multiCmd
multiCmd
multiCmd
argc
argv
 argc
argv
argc
argv
argv
cmd
cmd
cmd
2
cmd
3
图19-2事务状态
"name"
 getCommand
robj*[2]
setCommand
"author"
robj*[3]
getCommand
setCommand
robj*[2]
robj*[3]
"Practical Cormon Lisp"
Stringobject
第19章
"Peter
务309
---
## Page 314
310◆第四部分独立功能的实现
过了，如果是的话，服务器将拒绝执行事务，并向客户端返回代表事务执行失败的空回复。
任意数量的数据库键，并在EXEC命令执行时，检查被监视的键是否至少有一个已经被修改
19.2
WATCH命令是一个乐观锁（optimistic locking），它可以在 EXEC 命令执行之前，监视
表19-1展示了上面的例子是如何失败的。
redis> SET "name" "peter"
以下是一个事务执行失败的例子：
def EXEC():
EXEC命令的实现原理可以用以下伪代码来描述：
(nil)
redis> EXEC
QUEUED
WATCH 命令的实现
send_reply_to_client(client, reply_queue)
#将事务的执行结果返回给客户端
release_transaction_queue (client.mstate.commands)
client.mstate.count = 0
#清空客户端的事务状态，包括：
#移除 REDIS_MULTI 标识，让客户端回到非事务状态
#遍历事务队列中的每个项
#创建空白的回复队列
client.flags &= ~REDIS_MULTI
）释放事务队列
）清零入队命令计数器
reply_queue.append (reply)
#将返回值追加到回复队列末尾
reply = execute_command (cmd, argv, argc)
#执行命令，并取得命令的返回值
‘参数的个数，以及要执行的命令
---
## Page 315
的两个c10086节点就是由刚刚执行的 WATCH命令添加到字典中的。
举个例子，如果当前客户端为c10086，那么客户端执行以下WATCH命令之后：
些客户端正在监视这些数据库键。
令监视的数据库键，而字典的值则是一个链表，链表中记录了所有监视相应数据库键的客户端：
19.2.1使用WATCH命令监视数据库键
并在键被修改的情况下，确保事务的安全性的。
并向客户端A返回空回复。
服务器会发现WATCH监视的键"name”已经被修改，因此服务器拒绝执行客户端A的事务
每个 Redis 数据库都保存着一个 watched_keys 字典，这个字典的键是某个被 WATCH命
本节接下来的内容将介绍WATCH命令的实现原理，说明事务系统是如何监视某个键，
图 19-3 展示的 watched_keys 字典将被更新至图 19-4 所示的状态，其中用虚线包围
redis> WATCH "name" "age"
通过执行 WATCH命令，客户端可以在 watched_keys 字典中与被监视的键进行关联。
客户端c2和c4正在监视键"address"。
口客户端c1和c2 正在监视键“name"。
图19-3是一个 watched_keys字典的示例，从这个 watched_keys字典中可以看出:
 typedef struct redisDb {
在时间T4，客户端B修改了"name"键的值，
OK
口
} redisDb;
’客户端c3正在监视键"age"。
!!...
dict *watched_keys;
/1正在被 WATCH 命令监视的键
L
如
表 19-1
服务器可以清楚地知道哪些数据库键正在被监视，以及哪
EXEC
SET "name" "peter"
MULTI
WATCH "name"
两个客户端执行命令的过程
客户端 A
：当客户端A在T5执行EXEC命令时