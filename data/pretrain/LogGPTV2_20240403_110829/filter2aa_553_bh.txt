=
getchar()两侧的圆括号：
while (ch = getchar() != '\n')
!=运算符的优先级比=高，所以先对表达式getchar() != '\n'求值。由于这
是关系表达式，所以其值不是1就是0（真或假）。然后，把该值赋给ch。省
略圆括号意味着赋给ch的值是0或1，而不是 getchar()的返回值。这不是我们
418
的初衷。
下面的语句：
putchar(ch + 1); /* 改变其他字符 */
再次演示了字符实际上是作为整数储存的。为方便计算，表达式ch + 1
中的ch被转换成int类型，然后int类型的计算结果被传递给接受一个int类型参
数的putchar()，该函数只根据最后一个字节确定显示哪个字符。
7.2.2 ctype.h系列的字符函数
注意到程序清单7.2的输出中，最后输入的点号（.）被转换成斜杠
（/），这是因为斜杠字符对应的ASCII码比点号的 ASCII 码多 1。如果程序
只转换字母，保留所有的非字母字符（不只是空格）会更好。本章稍后讨论
的逻辑运算符可用来测试字符是否不是空格、不是逗号等，但是列出所有的
可能性太繁琐。C 有一系列专门处理字符的函数，ctype.h头文件包含了这些
函数的原型。这些函数接受一个字符作为参数，如果该字符属于某特殊的类
别，就返回一个非零值（真）；否则，返回0（假）。例如，如果isalpha()
函数的参数是一个字母，则返回一个非零值。程序清单7.3在程序清单7.2的
基础上使用了这个函数，还使用了刚才精简后的循环。
程序清单7.3 cypher2.c程序
// cypher2.c -- 替换输入的字母，非字母字符保持不变
#include 
#include        // 包含isalpha()的函数原型
int main(void)
{
char ch;
419
while ((ch = getchar()) != '\n')
{
if (isalpha(ch))    // 如果是一个字符，
putchar(ch + 1);  // 显示该字符的下一个字符
else          // 否则，
putchar(ch);    // 原样显示
}
putchar(ch);        // 显示换行符
return 0;
}
下面是该程序的一个输出示例，注意大小写字母都被替换了，除了空格
和标点符号：
Look! It's a programmer!
Mppl! Ju't b qsphsbnnfs!
表7.1和表7.2列出了ctype.h头文件中的一些函数。有些函数涉及本地
化，指的是为适应特定区域的使用习惯修改或扩展 C 基本用法的工具（例
如，许多国家在书写小数点时，用逗号代替点号，于是特殊的本地化可以指
定C编译器使用逗号以相同的方式输出浮点数，这样123.45可以显示为
123,45）。注意，字符映射函数不会修改原始的参数，这些函数只会返回已
修改的值。也就是说，下面的语句不改变ch的值：
tolower(ch); // 不影响ch的值
420
这样做才会改变ch的值：
ch = tolower(ch); // 把ch转换成小写字母
表7.1 ctype.h头文件中的字符测试函数
表7.2 ctype.h头文件中的字符映射函数
7.2.3 多重选择else if
现实生活中我们经常有多种选择。在程序中也可以用else if扩展if else结
构模拟这种情况。来看一个特殊的例子。电力公司通常根据客户的总用电量
来决定电费。下面是某电力公司的电费清单，单位是千瓦时（kWh）：
首 360kWh:     $0.13230/kWh
续 108kWh:     $0.15040/kWh
续 252kWh:     $0.30025/kWh
421
超过 720kWh:    $0.34025/kWh
如果对用电管理感兴趣，可以编写一个计算电费的程序。程序清单7.4
是完成这一任务的第1步。
程序清单7.4 electric.c程序
// electric.c -- 计算电费
#include 
#define RATE1  0.13230       // 首次使用 360 kwh 的费率
#define RATE2  0.15040       // 接着再使用 108 kwh 的费率
#define RATE3  0.30025       // 接着再使用 252 kwh 的费率
#define RATE4  0.34025       // 使用超过 720kwh 的费率
#define BREAK1 360.0        // 费率的第1个分界点
#define BREAK2 468.0        // 费率的第2个分界点
#define BREAK3 720.0        // 费率的第3个分界点
#define BASE1 (RATE1 * BREAK1)
// 使用360kwh的费用
#define BASE2 (BASE1 + (RATE2 * (BREAK2 - BREAK1)))
// 使用468kwh的费用
#define BASE3 (BASE1 + BASE2 + (RATE3 *(BREAK3 - BREAK2)))
// 使用720kwh的费用
422
int main(void)
{
double kwh;           // 使用的千瓦时
double bill;          // 电费
printf("Please enter the kwh used.\n");
scanf("%lf", &kwh);       // %lf对应double类型
if (kwh  6)
if (number  6)
{
if (number < 12)
printf("You're close!\n");
}
else
printf("Sorry, you lose a turn!\n");
这样改动后，响应如下：
数字    响应
5     Sorry, you lose a turn!
10    You’re close!
15    None
7.2.5 多层嵌套的if语句
前面介绍的if...else if...else序列是嵌套if的一种形式，从一系列选项中选
择一个执行。有时，选择一个特定选项后又引出其他选择，这种情况可以使
用另一种嵌套 if。例如，程序可以使用 if else选择男女，if else的每个分支里
又包含另一个if else来区分不同收入的群体。
我们把这种形式的嵌套if应用在下面的程序中。给定一个整数，显示所
有能整除它的约数。如果没有约数，则报告该数是一个素数。
428
在编写程序的代码之前要先规划好。首先，要总体设计一下程序。为方
便起见，程序应该使用一个循环让用户能连续输入待测试的数。这样，测试
一个新的数字时不必每次都要重新运行程序。下面是我们为这种循环开发的
一个模型（伪代码）：
提示用户输入数字
当scanf()返回值为1
分析该数并报告结果
提示用户继续输入
回忆一下在测试条件中使用scanf()，把读取数字和判断测试条件确定是
否结束循环合并在一起。
下一步，设计如何找出约数。也许最直接的方法是：
for (div = 2; div < num; div++)
if (num % div == 0)
printf("%d is divisible by %d\n", num, div);
该循环检查2～num之间的所有数字，测试它们是否能被num整除。但
是，这个方法有点浪费时间。我们可以改进一下。例如，考虑如果144%2得
0，说明2是144的约数；如果144除以2得72，那么72也是144的一个约数。所
以，num % div测试成功可以获得两个约数。为了弄清其中的原理，我们分
析一下循环中得到的成对约数：2和72、2和48、4和36、6和24、8和18、9和
16、12和12、16和9、18和8，等等。在得到12和12这对约数后，又开始得到
已找到的相同约数（次序相反）。因此，不用循环到143，在达到12以后就
可以停止循环。这大大地节省了循环时间！
分析后发现，必须测试的数只要到num的平方根就可以了，不用到
num。对于9这样的数字，不会节约很多时间，但是对于10000这样的数，使
429
用哪一种方法求约数差别很大。不过，我们不用在程序中计算平方根，可以
这样编写测试条件：
for (div = 2; (div * div) <= num; div++)
if (num % div == 0)
printf("%d is divisible by %d and %d.\n",num, div, num / div);
如果num是144，当div = 12时停止循环。如果num是145，当div = 13时停
止循环。
不使用平方根而用这样的测试条件，有两个原因。其一，整数乘法比求
平方根快。其二，我们还没有正式介绍平方根函数。
还要解决两个问题才能准备编程。第1个问题，如果待测试的数是一个
完全平方数怎么办？报告144可以被12和12整除显得有点傻。可以使用嵌套
if语句测试div是否等于num /div。如果是，程序只打印一个约数：
for (div = 2; (div * div) <= num; div++)
{
if (num % div == 0)
{
if (div * div != num)
printf("%d is divisible by %d and %d.\n",num, div, num / div);
else
printf("%d is divisible by %d.\n", num, div);
}
430
}
注意
从技术角度看，if else语句作为一条单独的语句，不必使用花括号。外
层if也是一条单独的语句，也不必使用花括号。但是，当语句太长时，使用