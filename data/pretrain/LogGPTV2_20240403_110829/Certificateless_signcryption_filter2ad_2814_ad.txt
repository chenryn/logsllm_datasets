H3 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value t in Zp, updates an initially empty list L3 with the input, t and tP and
returns tP .
H4 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value s in Zp, updates an initially empty list L4 with the input, s and sP and
returns sP .
H2 Queries: For each new query (U, T, R, ID, PK), algorithm B proceeds as
follows:
1. It checks if e(aP, bP ) = e(P, R). If this is the case, algorithm B returns R
and stops.
2. Algorithm B goes through the list L2 with entries (U, (cid:63), R, ID, PK, h), for
diﬀerent values of h, such that the decision bilinear Diﬃe-Hellman oracle
returns 1 when queried on the tuple (aP, bP, U, T ). Note that in this case
ID = ID(cid:96). If such a tuple exists, it returns h (and replaces the symbol (cid:63) with
T ).
3. It goes through list L2 with entries entry (U, T, (cid:63), ID, PK, h), for diﬀerent
values of h, such that e(U, PK(cid:48)) = e(P, R). If such a tuple exists, it returns h
(and replaces the symbol (cid:63) with R).
4. If B reaches this point of execution, it returns a random h and updates the
list L2, which is initially empty, with a tuple containing the input and return
values.
De-signcryption Queries: For each new query (U, V, W, ID, ID(cid:48)) algorithm B
proceeds as follows:
problem as described below.
1. It executes the veriﬁcation part of the de-signcryption algorithm obtaining
QID and PK by calling the H1 and request public key oracles. It returns ⊥ if
veriﬁcation does not succeed.
2. It checks if ID = ID(cid:96) and if this is the case then B can solve the GDH(cid:48)
3. It calculates R := x(cid:48)U, obtaining x(cid:48) (and hence PK(cid:48)) from either the adversary
or by calling the request public key oracle.
(cid:54)= ID(cid:96), it calculates T = e(rU, Mpk), where (j, ID(cid:48), r) is obtained by
4. If ID(cid:48)
calling H1 on ID(cid:48), and completes de-signcryption in the usual way placing a
query on H2.
5. If ID(cid:48) = ID(cid:96) then the pairing cannot be calculated. In order to return a con-
sistent answer, B goes through L2 and looks for a tuple (U, T, R, ID(cid:96), PK(cid:48), h),
for diﬀerent values of T , such that the decision bilinear Diﬃe-Hellman oracle
returns 1 when queried on (aP, bP, U, T ). If such an entry exists, the correct
pairing value is found and B decrypts using the hash value h.
15
6. If B reaches this point of execution, it places the entry (U, (cid:63), R, ID(cid:96), PK(cid:48), h)
for a random h on list L2 and decrypts using this h. The symbol (cid:63) denotes
an unknown value of pairing. Note that the identity component of all entries
with a (cid:63) is ID(cid:96).
Signcryption Queries: For each new query (m, ID, ID(cid:48)), algorithm B proceeds
as follows:
1. It calls H1 on ID. If ID (cid:54)= ID(cid:96), algorithm B simply signcrypts the message,
getting the secret value xS from the request public key or the adversary if
necessary.
2. If ID = ID(cid:96) (and hence ID(cid:48) (cid:54)= ID(cid:96)), algorithm B generates two random values
u, v ∈ Zp, sets U = vaP , calculates T = e(U, r(cid:48)Mpk), obtaining (j, ID(cid:48), r(cid:48)) by
calling H1 on ID(cid:48).
3. It goes through list L2 looking for an entry (U, T, R, ID(cid:48), PK(cid:48), h) for some R
such that e(U, PK(cid:48)) = e(P, R), where PK(cid:48) is obtained by calling the request
public key oracle on ID(cid:48). If such an entry exists, it calculates V = m⊕ h. Oth-
erwise it uses a random h and updates the list L2 with (U, T, (cid:63), ID(cid:48), PK(cid:48), h).
4. Then B deﬁnes the hash value H3(U, V, ID(cid:96), PK) as H = v−1(uP − QID(cid:96)),
aborting the simulation if a such a hash queries has been responded with
a diﬀerent value before. This means that B updates list L3 with tuple
(U, V, ID(cid:96), PK,⊥, H). Finally, B sets W = uaP + sPK, where s is the value
obtained by querying H4 on (U, V, ID(cid:96), PK) and returns (U, V, W ). Note that
this is a valid signcryption.
Eventually, A outputs a signcryption (U∗, V ∗, W ∗) from sender ID∗
S to re-
ceiver ID∗
S = ID(cid:96) and if
this is not the case it aborts execution. Otherwise, it obtains PK∗ by calling the
request public key oracle on ID∗
S and retrieves t∗ and s∗ from lists L3 and L4 by
querying H3 and H4 on (U∗, V ∗, ID(cid:96), PK∗). Note that if A succeeded, then the
veriﬁcation condition holds:
R. Algorithm B now calls H1 on ID∗
S and checks if ID∗
e(P, W ∗) = e(Mpk, QID(cid:96))e(U∗, H∗)e(PK∗, H(cid:48)∗)
e(P, W ∗) = e(aP, bP )e(U∗, t∗P )e(PK∗, s∗P )
e(P, abP ) = e(P, W ∗ − t∗U∗ − s∗PK∗),
and thus B can recover
abP = W ∗ − t∗U∗ − s∗PK∗.
Let us now analyse the probability that B succeeds in solving the GDH(cid:48)
problem instance. For this to happen, the simulation must run until the end of
the game, the adversary must pick a speciﬁc identity as ID∗
S, and it must query
the hash functions H3 and H4 to properly construct the forgery. The probability
that A is able to produce a forgery without querying both hash functions is
upper bounded by 2/2κ.
The probability that B aborts the simulation is related with the following
events:
16
– A places a partial key extraction on ID(cid:96).
– A places a full secret key extraction on ID(cid:96).
– B wants to simulate a signcryption query and this leads to an inconsistency
in the H3 simulation.
Note that if A places either of the ﬁrst two fatal queries, then it could not
possibly use ID(cid:96) as the sender identity in the forgery it produces at the end of the
game, so we can pinpoint the probability that B does not abort the simulation
due to these events and A picks the only useful case for solving GDH(cid:48) as 1/qT .
Note that the maximum length of the list L1 is qT , as stated in the Lemma.
The latter fatal event occurs if B’s simulation triggers a collision in its sim-
ulation of H3. Since the maximum size of L3 is qSC + qD + q3 + 1, we can upper
bound the probability that this occurs as qSC(qSC + qD + q3 + 1)/2κ. The result
follows by noting that B makes at most q2
D +2qDq2 queries to its decision bilinear
(cid:3)
Diﬃe-Hellman oracle.
Lemma 6. Under the CDH assumption in G1, no PPT attacker A has non-
negligible advantage in winning the sUF-iCMA-II game against the scheme pro-
posed above, when all hash functions are modelled as random oracles. More pre-
cisely, there exists an algorithm B which uses A to solve the CDH problem such
that:
AdvsUF−iCMA−II
CLSC
(A) ≤ qT AdvCDH
Γ (B) + (qSC(qSC + qD + q3 + 1) + 2)/2κ,
where qT = qP K + qRP K + qSK + 2qD + 2qSC + 1 and various q’s are as before.
Proof. To prove this Lemma, we construct an algorithm B which uses A to
solve the CDH problem over G1. Algorithm B receives a CDH problem in-
stance (Γ, aP, bP ), with generator P , generates a master key pair (Msk, Mpk),
sets params := (Γ, Mpk) and provides these to A. Algorithm B then chooses an
index (cid:96) uniformly at random in {1, . . . , qT}, where qT is as in the statement of
the Lemma, and answers various oracle queries as follows:
H1 Queries: On the non-repeat query ID algorithm B chooses r ∈ Zp uniformly
at random and sets QID = rP . It then adds (ID, r) to a list L1 which is initially
empty and returns QID.
Request Public Key Queries: On the i-th non-repeat query ID, if i (cid:54)= (cid:96), algo-
rithm B generates a new key pair (x, PK), updates the list LK with (i, ID, x, PK).
If i = (cid:96) algorithm B returns aP and adds ((cid:96), ID, aP,⊥) to LK. From this point
on on we denote the (cid:96)-th non-repeat identity queried to this oracle with ID(cid:96).
Replace Public Key Queries: On input (ID, PK) on the i-th non-repeat iden-
tity ID algorithm B inserts/updates LK with tuple (i, ID, PK,⊥). If i = (cid:96) then
B aborts the simulation.
Extract Private Key Queries: For each new query ID, B calls request public
key on ID obtaining (i, ID, PK, x). If i = (cid:96), algorithm B aborts the simulation.
Otherwise, it calls H1 on ID and gets (ID, r). It returns (x, rMskP ).
17
H3 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value t in Zp, updates an initially empty list L3 with the input, t and tP and
returns tP .
H4 Queries: For each new query (U, V, ID, PK), algorithm B generates a random
value s in Zp, updates an initially empty list L4 with the input, s and sbP and
returns sbP .
H2 Queries: For each new query (U, T, R, ID, PK), algorithm B proceeds as
follows:
1. It checks if e(aP, bP ) = e(P, R). If so, B returns R and stops.
2. Algorithm B goes through the list L2 looking for entries (U, T, (cid:63), ID, PK, h),
such that e(U, PK) = e(P, R). If such a tuple exists, it returns h (and replaces
the symbol (cid:63) with R).
3. If B reaches this point of execution, it returns a random h and updates the
list L2, which is initially empty, with a tuple containing the input and return
values.
De-signcryption Queries: For each new query (U, V, W, ID, ID(cid:48)), algorithm B
proceeds as follows:
1. It executes the veriﬁcation part of the de-signcryption algorithm obtaining
QID and PK by calling H1 and request public key oracles. It returns ⊥ if the
veriﬁcation does not succeed.
problem as described below.
2. It checks if ID = ID(cid:96) and if this is the case then B can solve the CDH
3. It calculates T = e(U, r(cid:48)Mpk), where (ID(cid:48), r(cid:48)) is obtained from H1
4. If ID(cid:48)
(cid:54)= ID(cid:96), it calculates R := x(cid:48)U, where (j, ID(cid:48), PK(cid:48), x(cid:48)) is obtained by
calling the request public key oracle on ID(cid:48), and x(cid:48) is possibly received from
the adversary. It completes de-signcryption in the usual way by placing a
query on H2.
5. If ID(cid:48) = ID(cid:96), the correct value of R cannot be computed. To answer the query
consistently, B goes through L2 and looks for a tuple (U, T, R, ID(cid:96), PK(cid:48), h), for
diﬀerent values of R, such that e(U, bP ) = e(P, R). If such an entry exists,
the correct value of R is found, and B decrypts using h.
6. If B reaches this point of execution, B places the entry (U, T, (cid:63), ID(cid:48), PK(cid:48), h)
for a random h on list L2 and decrypts using this h.
Signcryption Queries: For each new query (m, ID, ID(cid:48)), algorithm B calls the
request public key oracle on ID and proceeds as follows:
1. If ID (cid:54)= ID(cid:96), algorithm B simply signcrypts the message, getting the secret
2. If ID = ID(cid:96) algorithm B generates two random values u, v ∈ Zp, sets U =
value xS from the request public key or the adversary if necessary.
vaP and calculates T = e(U, MskQIDj ).
18
3. It goes through list L2 looking for an entry (U, T, R, ID(cid:48), PK(cid:48), h) for some R
such that e(U, PK(cid:48)) = e(P, R), where PK(cid:48) is obtained by calling the request
public key oracle on ID(cid:48). If such an entry exists, it calculates V = m⊕ h. Oth-
erwise it uses a random h and updates the list L2 with (U, T, (cid:63), ID(cid:48), PK(cid:48), h).
4. Then B deﬁnes the hash value H3(U, V, ID(cid:96), PK) as H = v−1(uP − H4),
aborting the simulation if such a hash response has been given before, where
H4 is the output of H4(U, V, ID(cid:96), PK). This means that B updates list L3
with tuple (U, V, ID(cid:96), PK,⊥, H). Finally, B sets W = DS + uaP and returns
(U, V, W ). Note that this is a valid signcryption.
Eventually, A outputs a valid signcryption (U∗, V ∗, W ∗) from sender ID∗
R. Algorithm B now calls the request public key oracle on ID∗
S to
receiver ID∗
S, obtains
PK∗, and checks if ID∗
S = ID(cid:96). If this is not the case it aborts the execution.
Otherwise, it retrieves t∗ and s∗ from lists L3 and L4 by querying H3 and H4
on (U∗, V ∗, ID(cid:96), PK∗). Note that if A succeeded, then the veriﬁcation condition
holds:
e(P, W ∗) = e(Mpk, QID(cid:96))e(U∗, H∗)e(PK∗, H(cid:48)∗)
e(P, W ∗) = e(Mpk, QID(cid:96))e(U∗, t∗P )e(aP, s∗bP )
e(P, s∗abP ) = e(P, W ∗ − DID(cid:96) − t∗U∗)
and thus B can recover
abP = (W ∗ − DID(cid:96) − t∗U∗)/s∗.
Let us now analyse the probability that B succeeds in solving CDH. For this
to happen, the simulation must run until the end of the game, the adversary
must pick a speciﬁc identity as ID∗
S, and it must query the hash functions H3
and H4 to properly construct the forgery. The probability that A is able to
produce a forgery without querying both hash functions is upper bounded by
2/2κ. The probability that B aborts the simulation is related with the following
events:
– A places a full secret key extraction on ID(cid:96).
– B wants to simulate a signcryption query and this leads to an inconsistency
in the H3 simulation.
Note that if A places the ﬁrst fatal query, then it could not possible use ID(cid:96)
as the sender identity in the forgery it produces at the end of the game, so we
can pinpoint the probability that B does not abort the simulation due to this
event and A picks the only useful case for solving CDH as 1/qT . Note that the
maximum length of the list LK is qT , as stated in the Lemma.
The latter fatal event occurs if B’s simulation triggers a collision in its sim-
ulation of H3. Since the maximum size of L3 is qSC + qD + q3 + 1, we can upper
bound the probability that this occurs as qSC(qSC + qD + q3 + 1)/2κ. The result
(cid:3)
follows.
19
6 Discussion
The security proof for the certiﬁcateless signcryption scheme presented in the
previous section has several interesting aspects which we will now discuss.
Full Domain Hash: For the sake of clarity in the proof presentation, we chose
not to adopt Coron’s technique [9] to obtain tighter security reductions in the
analysis of authenticity. Adaptation of this technique to the certiﬁcateless sign-
cryption case can be achieved following the strategy introduced by Libert et al.
in [16] for identity-based signature schemes. However, it is important to empha-
sise an issue speciﬁc to the certiﬁcateless setting which renders this adaptation
less straightforward.
The adaptive power of a Type I attacker as deﬁned in [1] allows the attacker
to decide whether it replaces the public key for the challenge identity or it
extracts the associated partial secret key. This means that a direct adaptation
of the proof in [16], which embeds the hard problem instance in a fraction of the
partial secret keys which arise in the security game, is meaningless for Type I
adversaries that extract the partial secret key for the challenge identity.