# Policy Enforcement and Authorization in Access Control Systems

## 1. Obligations and Policy Evaluation
Obligations are defined by the Policy Enforcement Point (PEP) in conjunction with an authorization decision. These obligations may have associated arguments, whose values are interpreted by the PEP. For example, a policy might include:

- **Deny-Overrides Policy Set**
- **Audit-Level Quality of Protection (QoP)**
- **ToD (Time of Day) Access**
- **IP Authentication Information**
- **Integrity Checks**

In the given policy, the obligation instructs the PEP to use a specific QoP mechanism, such as integrity checks. Similarly, audit levels and warning attributes can be implemented.

### Example Policy:
```plaintext
deny-overrides
POP PolicySet
Audit-level
QoP
ToD Access
ipAuthInfo
Integrity
```

## 2. Authorization Rules
Authorization rules, like Policies of Protection (POPs), impose conditions that must be met before access is granted. These conditions are based on data supplied to the authorization engine from various sources, including user credentials, resource manager applications, business environments, or trusted third parties.

### Tivoli Access Manager (TAM)
In TAM, the eXtensible Stylesheet Language (XSL) is used to specify rules, while XML is used for input data. For instance, the following XSL Transformation (XSLT) template checks if the sum of the requested amount and the current credit card balance is below the credit card limit and if the requester's member status is '100k'.

```xsl
<xsl:template match="/">
  <xsl:if test="(AmountReqd + JohnSmith/CreditCard/Balance) &lt; JohnSmith/CreditCard/Limit and JohnSmith/MileagePlus/MemberStatus = '100k'">
    <!-- Access Granted -->
  </xsl:if>
</xsl:template>
```

If an authorization rule evaluation fails, the decision engine returns "access denied" with a reason code, which is a string defined by the administrator during rule creation.

### XACML
In XACML, the absence of matching attributes in the request context results in a response context where the Decision element contains the value "Indeterminate" and a status code of "missing-attribute". It is recommended that the resource manager reacts to the failure reason, making both behaviors equivalent.

## 3. Sparse Object Space
The sparse object space in TAM consists of hierarchical objects. Not all real-world resources correspond to an object in this space. ACLs, POPs, and ARules are assigned only to nodes where the policy changes. Objects without explicitly attached policies inherit the policy from the nearest ancestor with an explicit policy.

### Inheritance in XACML
ACL inheritance in TAM can be modeled in XACML by ordering PolicySets with respect to their targets. The Rule combining algorithm `first-applicable` ensures that the PolicySet with the longest matching prefix is evaluated first. This structure is illustrated in Figure 7.

## 4. Implementation
We have implemented a Java program to translate TAM policies into XACML. The program uses the AM Java Administration API to extract policy elements from the TAM policy database. Using the Eclipse Meta Format (EMF), we created a Java XACML library generated from the XACML schema definition.

### Performance and Optimization
The generated XACML policy file size can be large, but using policy references for ACL, POP, and ARule policies can reduce the file size significantly. This approach aligns with the AM concept of templates, allowing administrators to define and assign templates to resources, with changes affecting all nodes where the template is attached.

## 5. Conclusions
We have described a mapping of IBM Tivoli Access Manager (TAM) policy language into XACML. This effort aims to provide XACML support for a powerful and widely used legacy access control system. The generated XACML policy clearly reflects the TAM policy elements and evaluation logic.

### Future Work
While many AM functions have equivalent representations in XACML, some, like requesting multiple permissions in a single access request, do not. We also implemented a translator from IBM WebSphere Portal authorization language PAC to XACML, indicating that other legacy systems could be supported similarly.

### Acknowledgments
We thank Craig Forster and Michiharu Kudo for their insights into XACML usage. Chris Giblin implemented the XACML library.

### References
1. Anderson, A. (2007). XACML J2SE[TM] Platform Policy Profile.
2. Anderson, A. (Ed.). (2005). Hierarchical Resource Profile of XACML v2.0.
3. Burri, S. (2007). PAC to XACML – translating IBM WebSphere Portal Server’s access control model to standard model XACML.
4. Fisler, K., Krishnamurthi, S., Meyerovich, L. A., & Tschantz, M. C. (2005). Verification and change impact-analysis of access-control policies.
5. Giblin, C., Hada, S., Karjoth, G., Schade, A., Sodha, Y., & Van Herreweghen, E. (2008). Separation of Duties and Entitlement Analyzer for Tivoli Access Manager.
6. Godik, S., & Moses, T. (Eds.). (2005). eXtensible Access Control Markup Language (XACML).
7. Karjoth, G. (2000). Authorization in CORBA security.
8. Karjoth, G. (2003). Access control with IBM Tivoli Access Manager.
9. Kudo, M., & Hada, S. (2000). XML document security based on provisional authorization.
10. Liu, A. X., Chen, F., Hwang, J., & Xie, T. (2008). Xengine: A fast and scalable XACML policy evaluation engine.
11. Pato, J. (1990). DCE Access Control Lists (ACL’s).
12. IBM Tivoli Access Manager – Administrator’s Guide (2008).
13. The Open Group. (2000). Authorization (AZN) API.
14. Wolter, C., Schaad, A., & Meinel, C. (2007). Deriving XACML policies from business process models.