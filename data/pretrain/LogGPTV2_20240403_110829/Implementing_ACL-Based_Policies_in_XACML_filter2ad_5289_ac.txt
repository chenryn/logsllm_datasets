formed by the PEP in conjunction with an authorization de-
cision. Obligations may have associated arguments, whose
values are interpreted by the PEP. An example policy is
given below.
deny−overridesPOP PolicySetAudit−levelQoPToD AccessipAuthInfo
Integrity
The obligation in the above policy instructs the PEP to use a
particular QoP mechanism, namely integrity checks. Audit
level and Warning attributes are implemented similarly.
4.4 Authorization Rules
Like POPs, an authorization rule when attached to a pro-
tected object imposes conditions that must be met before
access is permitted. These conditions are based on data sup-
plied to the authorization engine within the user credential,
from the resource manager application, from the encom-
passing business environment, or from trusted third parties
[12, Chapter 10].
In Tivoli Access Manager,
the eXtensible Stylesheet
Language (XSL) is used to specify rules and XML is the
language used for the data that forms input to the rules. For
example, the below XSL Transformation (XSLT) template
checks whether the sum of the requested amount and of the
current credit card balance is lower than the credit card limit
and that the requester’s member status is ’100k’.
100k
If an AM rule evaluation fails, the decision engine returns
“access denied” with a reason code, a string deﬁned by
the administrator at rule creation.
In XACML, the ab-
sence of matching attributes in the request context leads to a
XACML response context where the Decision element con-
tains the “Indeterminate” value, accompanied with a sta-
tus code of missing-attribute. Because it is recom-
mended that the resource manager reacts on the failure rea-
son we regard both behaviors to be equivalent.
test="(AmountReqd + JohnSmith/CreditCard/Balance)
&lt; JohnSmith/CreditCard/Limit
and JohnSmith/MilagePlus/MemberStatus = ’100k’">
5 Sparse Object Space
!TRUE!
Authorization PolicySet. The main difference between
an authorization rule and a POP attribute is the fact that the
latter represents a predeﬁned condition. Thus, authorization
rules have the the same XACML policy structure. As XSLT
programs are more general than the XACML condition lan-
guage, the translation must be restricted to the subset of
XSLT expressions that can be implemented in XACML. Of
course, new functions and data types can always be added
to XACML if needed.
The
above
variables,
XSLT
contains
/AmountReqd,
four
JohnSmith/CreditCard/Balance,
JohnSmith/CreditCard/Limit,
and
/JohnSmith/MilagePlus/MemberStatus whose
values must be retrieved for evaluation.
In the XACML
condition below we assume that they are of types string and
integer and are contained in the XACML request context.
Tivoli Access Manager’s object space constitutes a set of
hierarchical objects. However, not all resources in the “real
world” correspond to an object in the object space. ACLs,
POPs, and ARules are assigned only to those nodes in the
hierarchy where the policy changes. Any object without ex-
plicitly attached ACL (POP, ARule) inherits the policy of its
nearest object with an explicitly set ACL (POP, ARule). In
other words, objects without explicit ACL, POP, or ARule
assigned inherit their ACL (POP, ARule) policy from the
closest preceeding container object in the hierarchy.
Tivoli Access Manager’s ACL inheritance can be mod-
eled in XACML by requiring that the PolicySets are ordered
with respect to their targets; i.e., PolicySets with longer re-
source names in the target come ﬁrst. The Rule combin-
ing algorithm first-applicable assures that (only)
the PolicySet whose resource name constitutes the longest
matching preﬁx w.r.t. the requested resource will be eval-
uated. Figure 7 illustrates the structure of the generated
XACML policy. For each node in that AM PolicySet, the
node Resource PolicySet consists of ACL Policy, Traverse
180190
PolicySet, POP PolicySet, and ARules PolicySet as deﬁned
in Section 4. If any of these policies fails then access to the
corresponding resource should be denied.
ˆ/Departments/.+$
/Mgmt/Manuals
ˆ/Mgmt/Manuals/.+$
/
ˆ/.+$
ACL1, POP1
ACL3
ACL3
ACL1
ACL1
To determine the access rights on a speciﬁc resource,
it is now sufﬁcient to locate the ﬁrst node whose name
matches the resource name and to evaluate the corre-
sponding Resource PolicySet. An XACML representa-
tion for the full object space can thus be constructed
as a ’ﬁrst-applicable’ PolicySet of individual PolicySets
each representing one of the resources and ordered by
the length of the fully qualiﬁed resource name.
For
example, the resource /Departments/CodeA, a sib-
ling of (the explicit) nodes /Departments/Code and
/Departments/Docs would be matched by target
ˆ/Departments/.+$.
The above mapping follows the Hierarchical Resource
Proﬁle of XACML v2.0 [2], which treats nodes in a hier-
archical resource as individual resources and makes no as-
sumption about the accessibility of descendent nodes. The
proﬁle takes also into consideration that a node’s position
within the hierarchy may be part of the node’s identity, de-
noted by the separator character ‘/’, and that node identities
do not terminate with the ‘/’ character. To state policies for
a particular resource, it also recommends a regular match
function on URIs. However, using the resource as the only
element of policy (set) targets and their speciﬁc ordering for
a First-applicable evaluation is not given.
6
Implementation
We have implemented the AM to XACML policy trans-
lator as a Java program. It uses the AM Java Administration
API to extract the AM policy elements from the Tivoli Ac-
cess Manager policy database. Exploiting the Eclipse Meta
Format EMF, we have created a Java XACML library, gen-
erated from the XACML schema deﬁnition, to programmat-
ically represent the appropriate XACML terms.
The size of the generated XACML policy ﬁle reaches
double digit megabytes for even moderate AM policies.
With XACML v2.0, policy (set) references for ACL, POP,
and ARule policies can be used to avoid duplication. When
implemented, it drastically reduced the ﬁle size by 75 %. In
retrospect, policy references correspond to the AM concept
of templates – deﬁnitions for ACLs, POPs, and ARules.
Thus, an administrator has to deﬁne ﬁrst a template and then
assign the template to resources. A change to the template
effects all nodes where the template is attached.
Compared to the time needed for retrieval of the policy
information (in the seconds range) from the Tivoli Access
Figure 7. Structure of an AM policy.
ACL assignment is implemented by the target deﬁni-
tion of the overall policy. The below XACML target def-
inition matches any object (resource) that is below object
/Mgmt/Manuals/.
ˆ/Mgmt/Manuals/.+$
To model Tivoli Access Manager’s inheritance of ACLs,
POPs, and ARules, we create a hierarchical representation
of the object space, pruning all the leaf nodes which do not
have an ACL, POP or ARule explicitly attached. Next, we
attach to each node of the tree a ’wildcard’ child node rep-
resenting all possible children in addition to its explicit chil-
dren already deﬁned. We then inherit ACLs throughout this
tree; i.e. each of the nodes without an ACL explicitly at-
tached inherits the ACL of its nearest ancestor that has an
ACL explicitly attached. We repeat this step also for POPs
and ARules. Finally, the nodes in this policy-enhanced tree
are then linearized in a depth-ﬁrst manner such that all chil-
dren precede their parents, and that a wildcard node always
comes after all its siblings. Below we show this lineariza-
tion for the tree of Figure 1.
ACL2, POP2
/Departments/Code/Tiger
ˆ/Departments/Code/Tiger/.+$ ACL2, POP2
ACL2, POP1
/Departments/Code
ACL2, POP1
ˆ/Departments/Code/.+$
ACL1, POP1, ARule1
/Departments/Docs
ACL2, POP1, ARule1
ˆ/Departments/Docs/.+$
ACL1, POP1
/Departments
181191
Resource n−1Resource nResource 2Resource 1TAM PolicySetfirst−applicableManager installation, the generation of the XACML policy
takes only a small fraction of time.
7 Conclusions
We described a mapping of the IBM Tivoli Access Man-
ager policy language (AM) into XACML. Our effort was
motivated by the idea to make XACML support available
for a powerful and widely used legacy access control sys-
tem. To encode the interplay of AM’s policy elements and
decision logic within XACML, we came up with the use of
wildcards to link the check for multiple access rights. To
this end, the generated XACML policy clearly reﬂects the
AM policy elements and the associated evaluation logic.
There are some AM functions for which we did not ﬁnd
an equivalent representation in XACML. For example, it is
possible to ask for the possession of several permissions in
a single AM access request – the read and write permission
for example. CORBAsec has a similar feature called ‘Re-
quiredRights’ [7]. However, XACML allows only to spec-
ify a single action in a request context. Of course, there
is always the possibility to query for each element and to
combine the results but for the price of a big performance
penalty.
Besides AM, we implemented a translator from the
IBM WebSphere R(cid:13) Portal authorization language PAC to
XACML [3]. This makes us conﬁdent that many other
legacy access control systems could also be supported in
XACML by following our approach.
Being able to translate policies of legacy systems to
XACML provides many opportunities. For example, so-
phisticated analysis tools developed for XACML become
available. An example is our Separation of Duty analy-
sis tool [5] that works on AM policies generated by the
described translation. This work is part of our long-term
goal to provide an infrastructure that enables the central-
ized management of access control policies from heteroge-
nous computer platforms. This goal requires that modiﬁ-
cations in the XACML policies can be transfered back into
the legacy system, requiring a mapping in the opposite di-
rection. The challenge is that the XACML normative spec-
iﬁcations, however, include not only negative permissions
and conditions but also powerful rule and policy combina-
tors. Thus, XACML policies can have a multitude of differ-
ent forms that make the translation of an arbitrary XACML
policy very hard if not impossible even if the target policy
language is as expressive.
Acknowledgments
We would like to thank Craig Forster and Michiharu
Kudo for their insights into the usage of XACML. Chris
Giblin implemented the XACML library.
182192
IBM, the IBM logo, and ibm.com are trademarks or registered trade-
marks of International Business Machines Corporation in the United
States, other countries, or both. If these and other IBM trademarked terms
are marked on their ﬁrst occurrence in this information with a trademark
symbol ( R(cid:13) or TM), these symbols indicate U.S. registered or common law
trademarks owned by IBM at the time this information was published.
Such trademarks may also be registered or common law trademarks in
other countries. A current list of IBM trademarks is available on the Web
at “Copyright and trademark information” at www.ibm.com/legal/
copytrade.shtml.
Java is a trademark of Sun Microsystems, Inc. in the United States,
other countries, or both. Other company, product, or service names may
be trademarks or service marks of others.
References
[1] A. Anderson. XACML J2SE[TM] Platform Policy Proﬁle. Ver-
sion: 1.28 Updated: 03/07/21 (yy/mm/dd) research.sun.com/
projects/xacml/J2SEPolicyProvider.html
[2] A. Anderson (Ed.). Hierarchical Resource Proﬁle of XACML
v2.0. OASIS Standard, Feb. 2005. docs.oasis-open.org/
access_control-hier-profile-2.0-spec-os.pdf,
[3] S. Burri. PAC to XACML – translating IBM WebSphere Portal
Server’s access control model to standard model XACML. Semester-
arbeit, ETH Zurich, 2007. www.infsec.ethz.ch/people/
burrisa/PACtoXACML.pdf.
[4] K. Fisler, S. Krishnamurthi, L. A. Meyerovich, and M.C. Tschantz.
Veriﬁcation and change impact-analysis of access-control policies.
In 27th International Conference on Software Engineering ICSE ’05,
pages 196–205. ACM Press, 2005.
[5] C. Giblin, S. Hada, G. Karjoth, A. Schade, Y. Sodha and E. Van
Herreweghen. Separation of Duties and Entitlement Analyzer for
Tivoli Access Manager.
IBM alphaWorks, 2008. http://www.
alphaworks.ibm.com/tech/sod4tam
[6] S. Godik and T. Moses (Eds.). eXtensible Access Control Markup
Language (XACML). Version 2.0, OASIS Standard, Feb. 2005.
[7] G. Karjoth. Authorization in CORBA security. Journal of Computer
Security, 8(2/3):89–108, 2000.
[8] G. Karjoth. Access control with IBM Tivoli Access Manager. ACM
Transactions on Information and System Security, 6(2):232–257,
2003.
[9] M. Kudo and S. Hada. XML document security based on provisional
authorization. In ACM Conference on Computer and Communica-
tions Security, pages 87–96. ACM Press, 2000.
[10] A. X. Liu, F. Chen, J. Hwang, and T. Xie. Xengine: A fast and scal-
able XACML policy evaluation engine. In Measurement and Model-
ing of Computer Systems (SIGMETRICS 2008). ACM Press, 2008.
[11] J. Pato. DCE Access Control Lists (ACL’s). OSF DCE Speciﬁcations,
1990.
[12] IBM Tivoli Access Manager – Administrator’s Guide, 2008.
6.1. publib.boulder.ibm.com/infocenter/
Version
tivihelp/v2r1/topic/com.ibm.itame.doc/am61_
admin.pdf.
[13] The Open Group. Authorization (AZN) API. Open Group Technical
Standard C908, Jan. 2000.
[14] C. Wolter, A. Schaad, and C. Meinel. Deriving XACML policies
from business process models. In M. Weske, M.-S. Hacid, and C. Go-
dart, editors, Web Information Systems Engineering (WISE 2007),
Lecture Notes in Computer Science #4832, pages 142–153. Springer,
2007.