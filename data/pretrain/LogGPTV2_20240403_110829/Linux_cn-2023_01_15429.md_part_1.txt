---
author: 硬核老王
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2509
date: '2023-01-10 11:39:00'
editorchoice: false
excerpt: 2022 年末，openEuler Summit 2022 上吴峰光博士正式向开发者披露了 openEuler 统一构建服务 EulerMaker。
fromurl: ''
id: 15429
islctt: false
largepic: /data/attachment/album/202301/10/113845z924lascl8a9e339.jpg
permalink: /article-15429-1.html
pic: /data/attachment/album/202301/10/113845z924lascl8a9e339.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 2022 年末，openEuler Summit 2022 上吴峰光博士正式向开发者披露了 openEuler 统一构建服务 EulerMaker。
tags:
- openEuler
- EulerMaker
thumb: false
title: EulerMaker：构建 openEuler 全场景生态
titlepic: true
translator: ''
updated: '2023-01-10 11:39:00'
---
![](/data/attachment/album/202301/10/113845z924lascl8a9e339.jpg)
### 引言
2022 年末，openEuler Summit 2022 上，中国 Linux 内核圈最有影响力的开发者之一——吴峰光博士做了名为《**面向全场景操作系统的构建服务发布**》的主题演讲，正式向开发者披露了 openEuler 统一构建服务 **EulerMaker**。
Linux 中国开源社区就此采访了**吴峰光博士**，为读者挖掘到一些在峰会上亮相的 EulerMaker 背后的有趣细节。
> 
> ? 吴峰光博士是著名的 Linux 内核贡献者、华为计算操作系统首席专家、openEuler 社区技术委员会委员。他在 Linux 内核领域上拥有卓越贡献，在 I/O 和内存管理、内核测试服务方面做出了重要的贡献。有关他的故事，可以参阅《新程序员》杂志的专访《**吴峰光杀进 Linux 内核**》。
> 
> 
> 
### openEuler 的全场景
2021 年 9 月，openEuler 宣布将支持全场景，在服务器、云计算之外，还支持编译计算和嵌入式场景，这就引来了很多人的关注，但也有一些怀疑的眼光。因为，服务器和嵌入式分处两端，中间有着巨大的鸿沟。
“30 年前，服务器 OS、嵌入式 OS，界限非常清晰，像是两个村，中间全是农田。但后来 IT 越来越深入千行百业，云、边缘、IoT 兴起，各种场景涌现，发生了交叠。所以我们认为这是一个新的历史机会，来做一个全场景 OS。”吴峰光说。
> 
> ? 关于多场景的支持和融合，请参考我们之前对欧拉技术委员熊伟的采访：《[操作系统专家解读 openEuler 22.09 最新技术特性](/article-15326-1.html)》。
> 
> 
> 
![](/data/attachment/album/202301/10/112113ebs4bsm550d7zamh.jpg)
“要做全场景 OS，就引入了一个需求：原来的构建系统，如何转化为全场景统一构建系统？”
### 什么是 OS 构建系统？
OS 构建系统以 OS 源代码作为输入，以用户可安装使用的软件仓或OS镜像作为输出。
> 
> ? 服务器领域的 OBS、嵌入式领域的 Bitbake，是各自领域的代表性构建系统，历史悠久。
> 
> 
> 
### 为什么需要新的构建系统？
“openEuler 社区一开始是用 OBS 来构建的，”吴峰光介绍说，“OBS 最初由 SUSE 贡献开源，功能强大。但随着使用的深入，我们发现一些复杂的新需求很难在它上面改进，这就对 openEuler 的演进造成了困难。”
就一般的 OS 来说，OBS 构建可能够用；但是当一个操作系统要支持全场景，复杂度就大大增加，对构建系统提出了更严苛的要求。
吴峰光博士对 OBS、Bitbake 做了深入调研。他解释了这些老牌构建系统，为什么满足不了openEuler的需求：
“服务器领域的 OBS 主打能力是什么？几大主流的 Linux 发行版它都支持，比如可以给 Redhat 打包，也可以给 Debian 打包。兼容并包是它的核心设计目标，适应了 Linux 多样化的现状。但我们认为，多样化在早期对 Linux 发展有利，但长期而言，Linux 生态的碎片化是一个需要被解决的问题。”
“嵌入式领域的 Bitbake 采用了面向任务和过程的 DSL 描述语言，这使得它非常灵活强大，但自由度和复杂性过高，以学习曲线陡峭知名。现在流行的理念是如 YAML、JSON 等通用、声明式的配置语言，和函数式编程，以实现低门槛、易理解、可控可重复的构建过程。”
在吴峰光看来，在 30 年后的今天，**构建系统有着新的时代目标**。
2022 年 3 月，openEuler 团队开始设计新的构建系统 EulerMaker。
### EulerMaker 构建系统
OS 构建系统的核心流程是，用户给定一组软件包后，按照包依赖关系，对它们发起并行构建任务。“那么搭一个 Kubernetes 集群，上面叠加一个包构建调度模块，是不是就可以了呢？”
“这里的包依赖管理和调度，的确非常复杂：既有源包的依赖，又有二进制包的依赖，还有构建环境的依赖；既有构建依赖，又有运行依赖，还有传递依赖；成千上万的依赖关系，形成一个巨大的图，要考虑怎么破环，把它变成一个有向无环图（DAG），用于最大化并发调度。随着包构建的推进，新输出的 RPM 包需要成为之后 RPM 包构建的环境，还会提供新的依赖信息，动态更新这个 DAG 图。还要考虑各种包构建的失败情况，多用户并发任务之间的干扰，或者任意机器、模块随时崩溃重启后如何接力，避免单点故障，等等，这需要一整套精巧的架构设计。”
看到这样的难题，可能有工程师大牛们要摩拳擦掌，跃跃欲试了。但是在难题面前，吴峰光不慌不忙，踩了一脚刹车——
“我们先把发动机放一边，追根溯源，回到最初的那一个问题：**用户到底需要一辆什么车？**”
做架构设计，首先要考虑用户场景，然后推导出功能，最后才能确定数据和流程。设计时全盘考虑了所有的用户需求，数据和流程在未来才会稳定，才不会变来变去。
“我们对用户需求的考虑，真的全面了吗？”
吴峰光继续展开分析：“在 Linux 发展的最初阶段，需求是简单的：只要功能实现了，跑一下 gcc / make 能构建出来，用户能用，构建系统的工作就完成了。那时侯 Linux 社区对测试不重视，也还没有 CI / CD 的概念，测试基本全靠用户踩坑。现在情况就不一样了，时代的要求在提高：开发者期望有质量把控，要做测试，要有一整套的构建测试 CI / CD，要覆盖一整个开发流程，一站式全部搞定，出来的 RPM 包已经是经过测试的、用户能放心用的。这已经被开发者认为是标配，是开发者的正常预期。”
所以，新的构建系统要集成测试流程。
那么，是不是直接集成现在流行的通用 CI / CD 测试工具就可以了呢？
“市面上的 CI / CD 通用测试服务，适合测试上层的应用；而操作系统需要测试的，既有上层软件，又有基础软件；既面向应用开发者，又面向内核开发者，还有软件厂商、硬件厂商、OS 厂商，他们都有独特的测试需求；既要做功能测试，还要做性能测试。这些不是市面上通用 CI / CD 能做的。”
“所以，我们需要**一套全栈系统，既能构建，又满足上述所有测试需求**。”