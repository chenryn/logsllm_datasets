## 用PostgreSQL描绘人生的高潮、尿点、低谷 - 窗口/帧 or 斜率/导数/曲率/微积分?          
##### [TAG 15](../class/15.md)
### 作者                                   
digoal                                    
### 日期                                  
2016-12-03                                     
### 标签                                  
PostgreSQL , 曲线拐点 , 窗口查询 , 帧 , 窗口 , 导数 , 曲率 , 微积分 , 斜率                                                                        
----                                  
## 背景           
人生就像一场戏，有高潮，有尿点，有低谷。如果用曲线来描述漫漫人生路的话，怎么找出高潮、尿点、低谷呢？   
其实类似的场景还有很多，比如来自传感器（比如人身上可以探测的指标就有很多）的监控数据；服务器的监控数据；温度，湿度的变化数据；等等，都可以数字化，用曲线来表示。   
找高潮、尿点、低谷有什么好的方法吗？   
如果你是刚毕业不久的学生，可能会往学校里学到的知识去思考，怎么找曲线的拐点？    
导数、微积分、斜率、曲率、面积？       
没错，PostgreSQL可以算这些，math相关的函数里有，如果没有，也可以写UDF来实现。   
如果你把这些都忘了，还有什么方法能找出高潮、尿点、低谷么？   
当然，还是有方法的，也是PostgreSQL，它支持窗口，帧的查询。   
## 高潮、尿点、低谷
用几张图来表示一下什么是高潮、尿点、低谷？     
不要以为我是算命的，我其实是搞PostgreSQL的。       
![pic](20161203_01_pic_001.png)  
这段曲线表示了一段奋力拼搏，快速到达人生巅峰，然后在巅峰期有些许的抖动，一段时间之后遭遇打击急速掉入谷底的情况，由于底子好，东山再起也很快，不过此命注定要在一波三折中度过，最后持续的保持在平滑的巅峰状态。   
![pic](20161203_01_pic_002.png)  
而这一段人生属于不积跬步无以至千里的模式，主人公慢慢的积累，终于到达了人生的巅峰，而且在巅峰期主人公应该是想继续突破，很可惜，只是一个小的突破，马上有跌下来了，在过了一段时间，主人公可能遭遇了不可逆转的挫折，进入了人生的谷底之后，就一蹶不振，甚至还想过自杀，不过还好躲过一劫，可惜此命太薄，后来也只能郁郁不得终。   
![pic](20161203_01_pic_003.png)  
这一段有意思了，也是属于不积跬步无以至千里的模式，主人公慢慢的积累，终于到达了人生的巅峰。但是好景不长，可能娶了个即会败家又不旺夫的败家娘们，慢慢的开始走下坡路，直到精尽人亡。    
![pic](20161203_01_pic_004.png)  
这个主人公绝对属于可以拍电视剧的传奇人物类型，可能是富豪家族的小孩出生后被医院抱错的情况，从小在屌丝家庭长大，后来机缘巧合又回到了富豪家庭，因此经历了急速的从屌丝到高富帅的过程。但是可能不习惯富豪家的勾心斗角，被可恶的后妈搞走，又从高富帅摔入谷底。还好亲爸在世时的庇护下，经历了富豪家的一波三折，中间还出现过几次小的高峰，可惜好景不长，后来还是逐渐的衰退。      
![pic](20161203_01_pic_005.png)  
最后这一段一定是一个从屌丝到人生赢家的励志故事，主人公在屌丝家庭长大，经过自己的坚持不懈的努力，到达了人生的巅峰，整个过程非常的平滑，还创造了不少小的高潮，直到风光逝去。   
看了这么多曲线，我们怎么把拐点找出来？   
## 曲线分析
###  曲线的分辨率
在单位时间内采样的点越多，分辨率就越高。  
对于分辨率较低的曲线，看起来可能就不像曲线了，是一些跳跃的点，按斜率找到有意义的拐点也比较麻烦，也是难点之一。   
### 曲线的长度
在历史的长河中，一个人的详细经历或故事（除了一些对历史有重大影响的人）可能是不起眼的，但是对于这个人来说，他的经历，他遇到的人和事，就可以抓出很多值得说道的点来。   
所以说我们要分析曲线的拐点，和曲线的长度也是有莫大的关系的，你是要看1年的曲线拐点呢，还是要看1天的曲线拐点？     
在1天的曲线中能找出来10个拐点，但是这一天的数据可能在一年的曲线中出现在一个很平淡的段落中，那么可能就一个点都找不到。    
### 曲线的总体落差
即曲线的总体落差，假设我们要分析一条1年的曲线，总体落差指的是1年的数据中最大值和最小值的差。     
总体落差可以描述一段数据的高潮和低谷的差异，可以作为判断关键点的一个评判系数。   
### 曲线的区间落差
区间落差，指以某个点为中心，它的辐射半径内的最大值和最小值的落差。可以用来评判这个点所处的区域中的落差，判断平凡人生路中的小尖刺，比如在平淡期的一些小的波动，小高潮或者小低谷。        
### 曲线的总体高低水位
掌握了整体曲线的落差后，其实就可以设定高低水位，或者按大局来设定高低水位。  
比如股市，有大盘走势，有个股走势。   
什么是低水位，什么是高水位，是有参照的情况下来设置的。  
打个比方，一组监控数据，监控的是服务器的负载，服务器有32核，那么我们就可以根据这些参照设定负载的高低水位，比如低水位为1以下，高水位为24以上。    
## 数据库算高潮、低谷、尿点的实践
需要用到PostgreSQL的窗口查询和帧，用来实现对以上曲线分析的计算。   
### 窗口
窗口指计算的数据区间，指与当前row在同一个分组中的数据。   
### 帧
帧也是指计算的数据区间，但是是在分组内的指定，可以根据当前row设定辐射半径，或者当前row的前后分开设置辐射范围。   
### 例子
求凸点和凹点其实可以用前后值的大小比较就可以了，使用lead()和lag()窗口函数 即可。  
但是有其缺陷，没有落差，没有意义。  
没有范围数据，无法检测渐进数据的凹凸。  
创建测试表：  
```
create table wind (id serial, val numeric);
insert into wind (val) select mod((trunc(100000*random()+210000*random()))::int, 900)+round((100*random())::numeric, 2) from generate_series(1,10000);
postgres=# select * from wind;
  id   |  val   
-------+--------
     1 | 701.20
     2 | 511.14
     3 | 241.83
     4 | 552.72
     5 | 507.11
     6 |  62.66
     7 | 343.72
     8 | 260.89
     9 | 785.54
    10 | 483.94
    11 | 330.08
    12 | 716.85
    13 | 897.21
    14 | 493.07
    15 | 492.86
    16 | 742.36
    17 | 890.77
    18 |  62.47
    19 | 815.17
    20 | 695.46
    21 | 963.36
    22 | 178.90
    23 | 818.06
    24 | 337.37
    25 | 738.30
    26 |  90.01
    27 | 391.66
......
```
#### query 1  
```
select * from 
(
  select id, 
    val, 
    min(val) over(order by id rows between 10 preceding and current row) as left_min,  -- 左边相邻10个点的最小值（包括当前点）, 辐射半径的左边
    max(val) over(order by id rows between 10 preceding and current row) as left_max,  -- 左边相邻10个点的最大值（包括当前点）, 辐射半径的左边
    min(val) over(order by id rows between current row and 10 following) as right_min, -- 右边相邻10个点的最小值（包括当前点）, 辐射半径的右边
    max(val) over(order by id rows between current row and 10 following) as right_max, -- 右边相邻10个点的最大值（包括当前点）, 辐射半径的右边
    min(val) over() as global_min, -- 全局的最小值（包括当前点）
    max(val) over() as global_max  -- 全局的最大值（包括当前点）
    from wind
) t
where 
(  -- 找出全局谷底开始
(  
left_max - val > ((global_max-global_min)*0.5)  -- 左边相邻10个点的最大值 - 当前值 > 全局落差的50% (可能导致无法找到平滑变化的谷底)
and 
val = left_min  -- 拐点
)
and
(
right_max - val > ((global_max-global_min)*0.5)  -- 右边相邻10个点的最大值 - 当前值 > 全局落差的50% (可能导致无法找到平滑变化的谷底)
and 
val = right_min  -- 拐点
)
)  -- 找出全局谷底结束
or
(  -- 找出全局高潮开始
(
val - left_min > ((global_max-global_min)*0.5)  -- 当前值 - 左边相邻10个点的最小值 > 全局落差的50% (可能导致无法找到平滑变化的高潮)
and 
val = left_max  -- 拐点
)
and
(
val - right_min > ((global_max-global_min)*0.5)  -- 当前值 - 右边相邻10个点的最小值  > 全局落差的50% (可能导致无法找到平滑变化的高潮)
and 
val = right_max  -- 拐点
)
)  -- 找出全局高潮开始
;
```
结果  
```
  id  |  val   | left_min | left_max | right_min | right_max | global_min | global_max 
------+--------+----------+----------+-----------+-----------+------------+------------
    6 |  62.66 |    62.66 |   701.20 |     62.66 |    897.21 |       1.50 |     996.57
   18 |  62.47 |    62.47 |   897.21 |     62.47 |    963.36 |       1.50 |     996.57
   21 | 963.36 |    62.47 |   963.36 |     90.01 |    963.36 |       1.50 |     996.57
   44 |  57.54 |    57.54 |   884.70 |     57.54 |    949.44 |       1.50 |     996.57
   45 | 949.44 |    57.54 |   949.44 |    291.63 |    949.44 |       1.50 |     996.57
   62 |  54.09 |    54.09 |   841.67 |     54.09 |    835.75 |       1.50 |     996.57
   76 | 892.74 |   186.73 |   892.74 |     43.92 |    892.74 |       1.50 |     996.57
   83 |  43.92 |    43.92 |   892.74 |     43.92 |    828.41 |       1.50 |     996.57
   98 | 961.65 |   108.82 |   961.65 |    222.69 |    961.65 |       1.50 |     996.57
  112 |  72.93 |    72.93 |   778.41 |     72.93 |    689.00 |       1.50 |     996.57
  126 |  44.19 |    44.19 |   829.42 |     44.19 |    900.01 |       1.50 |     996.57
  141 | 950.97 |    44.80 |   950.97 |     80.02 |    950.97 |       1.50 |     996.57
......
 9924 | 879.23 |    80.56 |   879.23 |     73.87 |    879.23 |       1.50 |     996.57
 9930 |  73.87 |    73.87 |   879.23 |     73.87 |    858.93 |       1.50 |     996.57
 9950 | 941.34 |   117.90 |   941.34 |     61.66 |    941.34 |       1.50 |     996.57
 9953 |  61.66 |    61.66 |   941.34 |     61.66 |    872.60 |       1.50 |     996.57
 9974 | 916.83 |   278.73 |   916.83 |    147.24 |    916.83 |       1.50 |     996.57
 9986 | 957.28 |   147.24 |   957.28 |     87.52 |    957.28 |       1.50 |     996.57
 9994 |  87.52 |    87.52 |   957.28 |     87.52 |    726.31 |       1.50 |     996.57
(945 rows)
```
功能  