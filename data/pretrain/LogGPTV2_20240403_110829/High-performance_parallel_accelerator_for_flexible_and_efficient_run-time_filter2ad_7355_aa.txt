title:High-performance parallel accelerator for flexible and efficient run-time
monitoring
author:Daniel Y. Deng and
G. Edward Suh
High-Performance Parallel Accelerator for Flexible
and Efﬁcient Run-Time Monitoring
Daniel Y. Deng and G. Edward Suh
Computer Systems Laboratory, Cornell University
Ithaca, New York 14850
{deng, suh}@csl.cornell.edu
Abstract—This paper proposes Harmoni, a high performance
hardware accelerator architecture that can support a broad
range of run-time monitoring and bookkeeping functions. Unlike
custom hardware, which offers very little conﬁgurability after
it has been fabricated, Harmoni
is highly conﬁgurable and
can allow a wide range of different hardware monitoring and
bookkeeping functions to be dynamically added to a processing
core even after the chip has already been fabricated. The
Harmoni architecture achieves much higher efﬁciency than
software implementations and previously proposed monitoring
platforms by closely matching the common characteristics of
run-time monitoring functions that are based on the notion
of tagging. We implemented an RTL prototype of Harmoni
and evaluated it with several example monitoring functions for
security and programmability. The prototype demonstrates that
the architecture can support a wide range of monitoring functions
with different characteristics. Harmoni takes moderate silicon
area, has very high throughput, and incurs low overheads on
monitored programs.
I. INTRODUCTION
As we expand the use of computing devices to handle more
sensitive information and control critical infrastructure, secure
and reliable operation becomes increasingly more important.
In this context, run-time monitoring of program execution at an
instruction granularity provides an effective approach to ensure
a wide range of security and reliability properties, especially
with dedicated hardware support. As an example, Dynamic
Information Flow Tracking (DIFT) is a recently proposed
security technique that tracks and restricts the use of untrusted
I/O inputs by performing additional bookkeeping and checking
operations on each instruction that could handle data derived
from untrusted I/O inputs. DIFT has been shown to be quite
effective in detecting a large class of common software attacks
[1], [2], [3]. Similarly, run-time monitoring has been shown
to enable many types of capabilities such as ﬁne-grained
memory protection [4], array bound checking [5], [6], software
debugging support [7], managed language support such as
garbage collection [8], hardware error detection [9], etc.
This paper presents a programmable accelerator that
is
designed to enable a large class of run-time monitoring tech-
niques to execute efﬁciently in parallel to the main processing
core. Unfortunately, existing proposals for run-time monitoring
techniques suffer from either limited programmability or high
performance/energy overheads.
For example, while a custom hardware implementation
of a runtime monitoring scheme can have negligible run-
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
time overheads, high development costs and inﬂexibility of
hardware have made custom hardware difﬁcult
to deploy
in practice. Modern microprocessor development may take
several years and hundreds of engineers from an initial design
to production, and custom hardware cannot be added or
updated after the fabrication. Because of the high costs of
development and silicon resources, processor vendors would
rather not implement a mechanism in custom hardware unless
the mechanism is already proven and is widely used.
At the other end of the spectrum, monitoring in software
offers very high ﬂexibility. Software writers can leverage
the inherent programmability of a general purpose processor
to implement mechanisms of arbitrary complexity using as
many general purpose processor instructions as necessary.
However, software implementations of instruction-grained run-
time monitoring mechanisms typically suffer from high perfor-
mance and energy overheads. For example, a software imple-
mentation for DIFT monitoring on a single core is reported
to have an average slowdown of 3.6X even with aggressive
optimizations [10]. The performance overheads of software
monitoring can be mitigated using parallel processing [11],
however, this entails using multiple processing cores to run
each computation thread and is likely to increase power
consumption by a factor of two or more.
In essence, a traditional processing core is a poor match
in terms of efﬁciency for many runtime monitoring schemes;
for instance, DIFT needs to propagate and check 1-bit tags
on each instruction while a processing core is optimized for
sequential 32-bit (or 64-bit) operations. The bit-level conﬁg-
urability of FPGAs makes them a promising solution as an
efﬁcient accelerator for runtime monitoring. A recent proposal
discussed the ﬂexibility and energy efﬁciency of the FPGA co-
processing approach [12] but also reported that the traditional
FPGA architecture can only keep up with low-performance
processing cores running at hundreds of MHz (< 500MHz).
For higher performance cores, an FPGA co-processor can
incur a signiﬁcant performance penalty.
Fundamentally, there exists a trade-off between efﬁciency
and programmability as illustrated in Figure 1. Because pro-
grammability requires additional hardware such as a mul-
tiplexer to allow a choice, greater programmability implies
higher overheads. In this paper, we develop an accelerator
architecture that can provide low-overhead run-time monitor-
ing even for high-performance processors with a few GHz
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
Efficiency 
Single Monitor 
1-2 GHz cores, 
general tagging 
Custom 
HW 
Harmoni 
10 - 
1,000x 
Too slow beyond 
500MHz main core 
FPGA co-
co
processor 
2x power 
2x
consumption 
Multi-core + 
+
HW support 
Parallel 
Software 
Software 
Programmability 
Monitored 
Program 
INST 1 
••• 
••• 
INST 2 
INST 3 
••• 
••• 
Tag-Based  
Monitor 
Tag Op 1 
Tag Op 2 
Tag Op 3 
Program 
State 
Tags 
(meta-data) 
Tag Operation 
   - Read 
   - Update 
   - Check 
   - Write   
  Value Tag 
  Location Tag 
  Object Tag 
Fig. 1. Trade-off between efﬁciency and programmability.
Fig. 2. Parallel run-time monitoring with tags.
clock frequency. We achieve this goal by carefully restrict-
ing the programmability and optimizing the architecture for
common monitoring operations. In particular, we found that
many instruction-grained monitoring techniques are built upon
tagging, where a piece of meta-data is attached to each value,
memory location, or program object, and the meta-data is
updated/checked based on instruction events in the monitored
program. While the notion of tagging has been studied before,
this work presents a uniﬁed architectural framework that can
support a broad range of run-time monitoring techniques that
use tagging.
Our on-chip accelerator architecture, named Harmoni
(Hardware Accelerator for Runtime MONItoring), provides an
efﬁcient realization of the general tagging model. The Harmoni
architecture is designed to match common tagging operations,
which consist of reading, updating, checking, and writing the
tag for each instruction on the main processing core. Harmoni
maintains programmability by broadly supporting monitoring
schemes that use tagging in various types and granularities.
Harmoni also supports operations on tags that range from
regular ALU computations to irregular tag update and check
by combining ALUs and memory-based look-up tables.
By focusing speciﬁcally on supporting monitoring schemes
that make use of tagging, Harmoni can achieve a high operat-
ing clock frequency of 1.25GHz on a 65nm standard cell tech-
nology. This higher clock frequency allows Harmoni to keep
pace with high-performance processors that are running at
clock frequencies of a few GHz and have minimal performance
overheads. An evaluation of the Harmoni prototype also shows
that the architecture is far more energy efﬁcient compared
to using multiple identical processing cores for both main
computations and monitoring operations in parallel. Harmoni
has moderate area overheads for a small 5-stage embedded
processor, but is quite small compared to processing cores
that run at higher frequencies.
This paper makes the following main contributions:
• General run-time monitoring model: The paper proposes
a general model for parallel run-time monitoring based
on the notion of tagging. This model enables efﬁcient
hardware implementations while capturing a broad range
of monitoring techniques.
• Accelerator architecture: The paper presents an accel-
erator architecture that realizes the proposed monitoring
model. Unlike other programmable monitoring platforms
available today, the accelerator can match the throughput
of a high-frequency processing core with low energy
overheads.
• Prototype implementations and evaluations: The paper
implements and studies a prototype in RTL (VHDL) and
presents results from its evaluation.
The rest of the paper is organized as follows. Section II
describes the model for the parallel monitoring with tagging,
and shows how example monitors can map to the model.
Section III presents the tagging architecture. Section IV studies
the performance, area, and power consumption of our archi-
tecture. Section V discusses the related work, and Section VI
concludes the paper.
II. TAG-BASED MONITORING MODEL
The main challenge in designing a high-performance, pro-
grammable accelerator for run-time monitoring lies in iden-
tifying functions that are common across a broad class of
monitors so that certain aspects of programmability can be
limited without sacriﬁcing functionality. In this context, we
studied a number of run-time monitoring techniques and found
that many of them can be seen under the common framework
of tagging; monitoring schemes often maintain and check
meta-data information for data that are used in the main core.
This section presents our run-time monitoring model used on
Harmoni that is based on the notion of tagging.
A. Overview
Figure 2 shows a high-level model of typical instruction-
grained monitoring techniques. In the ﬁgure, the light blocks
on the left represent the main computation and the darker
blocks on the right represent
the monitoring function. A
monitor often maintains its own meta-data to keep track of
the history of the monitored computation; we will refer to
this meta-data as “tags” in this discussion. Conceptually, the
monitor observes a trace of instructions from the monitored
program and checks program properties by maintaining and
checking tags. We will refer to maintaining and checking tags
as “tagging operations” in this discussion. A failed tag check
indicates that a monitored-for event, which was intended to
be caught or avoided, had occurred in the program running on
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
the main processing core. Therefore, if a tag check fails, the
monitor raises an exception.
In general, a monitoring function can be characterized based
on its tag type and tag operations. The tag type deﬁnes the
meta-data that are maintained by the monitor. The set of
tag operations deﬁne which events in the monitored program
triggers a tag operation and how the tags are updated and/or
check on such events.
B. Tag (Meta-data) Types
Run-time monitoring techniques typically associate a tag
(meta-data) with each piece of state in the monitored program.
In particular, monitoring techniques typically rely on tags for
three types of program state: data value, memory location, and
high-level program objects.
Value tag: Many monitoring techniques keep a meta-data
tag for each data or pointer value in a program. For example,
DIFT maintains a 1-bit tag to indicate whether a word/byte
is from a potentially malicious I/O channel or not, and array
bound checks may keep base and bound information for each
pointer. Because most programming languages use 8-bit or
32-bit (or 64-bit) variables to express a value, the value tag
is often maintained for each word or byte in registers and
memory. Each tag also follows the corresponding value as
it propagates during an execution. As an example, loading a
value from memory into a register moves the corresponding
value tag from memory to a tag register, and an output of an
ALU often inherits its tag from tags of source operands.
Location tag: A tag may be associated with a location such
as a memory address instead of a value. Such a location tag
is often used to keep information on the properties of storage
itself rather than its content. For example, a memory protection
technique can keep permission bits for each memory location
and check if an access is allowed. A software debugging
support may use a location tag to check if each memory
location is initialized before a read. Similar to the value
tags, the location tags are generally kept at a word or byte
granularity, matching typical sizes of variables (int, char, etc.)
in program languages. Yet, the location tag does not follow
memory content.
Object tag: A monitoring scheme may keep coarse-grained
tags for relatively large program objects such as classes,
structures, arrays, etc. instead of keeping ﬁne-grained tags per
byte or word. For example, a reference counter for a garbage
collection is maintained for each program object. While it is
possible to implement such coarse-grained tags using per-byte
or per-word tags - essentially, make all tags that correspond
to a large object to be the same value - it is far more efﬁcient
to manage and update the object tags separately.
C. Tag Operations
In addition to the type of tags, a tag-based run-time moni-
toring scheme can be characterized in terms of which events
in the monitored program triggers tag operations and what
actions are taken within the tag operation. In general, actions
to update or check tags are triggered when the corresponding
values or locations are used by the monitored program. In-
formation about the values or location used in a program can
be deduced from each instruction that executes. For example,
load/store instructions indicate accesses to memory locations
or values. ALU instructions show processing of values. As
a result, low-level tag operations can often be determined
transparently based on the instruction opcode.
On the other hand, certain tag operations may be triggered
by high-level program events that need to be explicitly com-
municated from the monitored program to the monitor. For
example, a monitor to detect out-of-bound memory accesses
needs to set a tag, which encodes bounds for each pointer,
on memory allocation and deallocation events in order to
check bounds on each memory access. A compiler can often
automatically annotate a program to add explicit tag operations
for common program events and information such as function
calls, memory management operations, type information, etc.
High-level program events may need to be annotated by a
programmer.
For each monitored program event, the tagging operation
typically consists of the following common sequence of oper-
ations.
• Read: The monitor reads tags that correspond to the
values or locations used by the monitored program:
registers or memory for value tags, memory for location
tags, and a special table for object tags.
• Update: The monitor updates tags based on the moni-
tored program event.
• Check: The monitor may checks tags for an invariant and
signals an exception if the invariant is violated.
• Write-back: The monitor writes back the updated tag.
The value tag is typically written to the tag that corre-
sponds to the result of the monitored program’s instruc-
tion. The location tag is often written to the location that
is accessed by the monitored program.
D. Monitoring Examples
Here, we survey several previously proposed monitoring
schemes for security, debugging, and reliability, and discuss
how they map to the proposed tagging model. This is not
a comprehensive list of all possible run-time monitoring
functions. However, these schemes represent a spectrum of
monitoring functions that are diverse in terms of the operations
that they perform, information from the main processing core
that they act on, and the hardware requirements on the meta-
data operations.
Dynamic information ﬂow tracking (DIFT) [1]: DIFT is a
security protection technique that prevents common software
exploits from taking over a vulnerable program by tracking
and limiting uses of untrusted I/O inputs. For example, typical
attacks that changes a program control ﬂow can be detected
by preventing I/O inputs from being used as a code pointer.
DIFT uses a 1-bit value tag per memory word and register
to indicates whether the value has been tainted by data from
untrusted I/O inputs. DIFT uses operating system support to