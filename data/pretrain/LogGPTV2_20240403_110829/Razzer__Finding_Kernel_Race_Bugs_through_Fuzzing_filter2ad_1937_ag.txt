RAZZER is based on the assumption that a race across different
kernel modules are rarely happen (e.g., a ﬁle system and a
terminal device driver). However, if that happens, RAZZER’s
RacePaircand would not include such a race pair. In order to
completely address this problem, RAZZER needs to avoid the
partition analysis. Instead, it should perform more precise static
analysis techniques, which aggressively identiﬁes must-not-
race pairs. For instance, RAZZER can leverage synchronization
primitives as done in previous work [14, 41].
Applying RAZZER for Other Systems. We believe it would
not be challenging to apply RAZZER for other modern operating
systems, such as Windows, MacOSX, FreeBSD, as long as
their source code is available. The only place that RAZZER
leverages Linux-speciﬁc domain knowledge is in its system call
invocation model, and all the rest designs are platform-agnostic
as its core mechanism is performed either ofﬂine (i.e., a static
analysis) or transparent (i.e., a tailored hypervisor).
To apply RAZZER for userland programs, additional mutation
strategies after identifying a race may not be necessary. Unlike
the Linux kernel which occasionally allows a race to improve
performance, a race itself itself is considered as a bug in most
of userland programs.
VIII. CONCLUSION
We proposed RAZZER, a fuzz testing tool tailored to ﬁnd race
bugs. It utilizes a static analysis to spot potential data race points
to guide the fuzzer to identify races. Moreover, it modiﬁes the
underlying hypervisor to trigger a race deterministically. The
evaluation of RAZZER demonstrates its strong capability to
detect races. It has thus far detected 30 new races in the Linux
kernel, and a comparison study with other state-of-the-art tools,
speciﬁcally Syzkaller and SKI, demonstrates its outstanding
efﬁciency to detect race bugs in the kernel.
IX. ACKNOWLEDGMENT
We would like to thank anonymous reviewers for their
insightful comments, which signiﬁcantly improved the ﬁnal
version of this paper. We also would like to thank Linux
kernel developers for their helpful feedback and responses. This
research is supported in part by ERC through NRF of Korea
(NRF-2018R1A5A1059921) and Samsung Research Funding
& Incubation Center (SRFC-IT1701-05).
(cid:24)(cid:23)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] Capstone, 2018. https://www.capstone-engine.org.
[2] Kernel address sanitizer, 2018. https://github.com/google/kasan/wiki.
[3] Kcov, 2018. http://simonkagstrom.github.io/kcov/index.html.
[4] Linux kernel mailing list archive, 2018. https://lkml.org.
[5] Qemu, 2018. https://www.qemu.org.
[6] L. O. Andersen. Program analysis and specialization for the C
programming language. PhD thesis, University of Copenhagen, 1994.
[7] Z. Anderson, D. Gay, R. Ennals, and E. Brewer. Sharc: Checking
data sharing strategies for multithreaded c. In Proceedings of the 2008
ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), Tucson, Arizona, June 2008.
[8] M. Böhme, V.-T. Pham, and A. Roychoudhury. Coverage-based greybox
fuzzing as markov chain. IEEE Transactions on Software Engineering,
2017.
[9] M. D. Bond, K. E. Coons, and K. S. McKinley. Pacer: proportional
detection of data races. In Proceedings of the 2010 ACM SIGPLAN
Conference on Programming Language Design and Implementation
(PLDI), Toronto, Canada, June 2010.
[10] S. Burckhardt, P. Kothari, M. Musuvathi, and S. Nagarakatte. A
randomized scheduler with probabilistic guarantees of ﬁnding bugs. In
Proceedings of the 15th ACM International Conference on Architectural
Support for Programming Languages and Operating Systems (ASPLOS),
New York, NY, Mar. 2010.
[11] Y. Cai, J. Zhang, L. Cao, and J. Liu. A deployable sampling strategy
for data race detection. In Proceedings of the 2016 24th ACM SIGSOFT
International Symposium on Foundations of Software Engineering. ACM,
2016.
[12] S. K. Cha, M. Woo, and D. Brumley. Program-adaptive mutational
fuzzing. In Proceedings of the 36th IEEE Symposium on Security and
Privacy (Oakland), San Jose, CA, May 2015.
[13] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel,
and G. Vigna. Difuze: Interface aware fuzzing for kernel drivers. In Pro-
ceedings of the 24th ACM Conference on Computer and Communications
Security (CCS), Dallas, TX, Oct.–Nov. 2017.
[14] D. Engler and K. Ashcraft. Racerx: effective, static detection of race
conditions and deadlocks. In Proceedings of the 19th ACM Symposium on
Operating Systems Principles (SOSP), Bolton Landing, NY, Oct. 2003.
[15] J. Erickson, M. Musuvathi, S. Burckhardt, and K. Olynyk. Effective
data-race detection for the kernel. In Proceedings of the 9th USENIX
Symposium on Operating Systems Design and Implementation (OSDI),
Vancouver, Canada, Oct. 2010.
[16] P. Fonseca, R. Rodrigues, and B. B. Brandenburg. Ski: Exposing
kernel concurrency bugs through systematic schedule exploration. In
Proceedings of the 11th USENIX Symposium on Operating Systems
Design and Implementation (OSDI), Broomﬁeld, Colorado, Oct. 2014.
[17] D. Gens, S. Schmitt, L. Davi, and A.-R. Sadeghi. K-miner: Uncovering
memory corruption in linux. In Proceedings of the 2018 Annual Network
and Distributed System Security Symposium (NDSS), San Diego, CA,
Feb. 2018.
fuzz: practical concolic testing techniques for cots operating systems. In
Proceedings of the 2017 USENIX Annual Technical Conference (ATC),
Santa Clara, CA, July 2017.
[24] M. Labs. Kernelfuzzer, 2016. https://github.com/mwrlabs/KernelFuzzer.
[25] D. Marino, M. Musuvathi, and S. Narayanasamy. Literace: effective
sampling for lightweight data-race detection.
In Proceedings of the
2009 ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI), Dublin, Ireland, June 2009.
[26] MITRE. CVE-2016-8655., 2016. https://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2016-8655.
[27] MITRE. CVE-2017-17712., 2017. https://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2017-17712.
[28] MITRE. CVE-2017-2636., 2017. https://cve.mitre.org/cgi-bin/cvename.
cgi?name=CVE-2017-2636.
[29] I. Molnar. Runtime locking correctness validator, 2018. https://www.
kernel.org/doc/Documentation/locking/lockdep-design.txt.
[30] M. Musuvathi and S. Qadeer. Iterative context bounding for systematic
testing of multithreaded programs.
the 2007
ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), San Diego, CA, June 2007.
In Proceedings of
[31] N. Nethercote and J. Seward. Valgrind: a framework for heavyweight
dynamic binary instrumentation. In Proceedings of the 2007 ACM SIG-
PLAN Conference on Programming Language Design and Implementation
(PLDI), San Diego, CA, June 2007.
[32] R. O’Callahan and J.-D. Choi. Hybrid dynamic data race detection. In
Acm Sigplan Notices, volume 38. ACM, 2003.
[33] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos.
Vuzzer: Application-aware evolutionary fuzzing.
In Proceedings of
the 2017 Annual Network and Distributed System Security Symposium
(NDSS), San Diego, CA, Feb.–Mar. 2017.
[34] A. Rebert, S. K. Cha, T. Avgerinos, J. M. Foote, D. Warren, G. Grieco,
and D. Brumley. Optimizing seed selection for fuzzing. In Proceedings
of the 23rd USENIX Security Symposium (Security), San Diego, CA,
Aug. 2014.
[35] K. Sen. Race directed random testing of concurrent programs.
In
Proceedings of the 2008 ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), Tucson, Arizona, June
2008.
[36] K. Serebryany and T. Iskhodzhanov. Threadsanitizer: data race detection
in practice. In Proceedings of the Workshop on Binary Instrumentation
and Applications, pages 62–71. ACM, 2009.
[37] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov. Address-
sanitizer: A fast address sanity checker. In USENIX Annual Technical
Conference, pages 309–318, 2012.
[38] E. Stepanov and K. Serebryany. Memorysanitizer: fast detector of
uninitialized memory use in c++. In Proceedings of the 13th Annual
IEEE/ACM International Symposium on Code Generation and Optimiza-
tion. IEEE Computer Society, 2015.
[39] Y. Sui and J. Xue. Svf: interprocedural static value-ﬂow analysis in
llvm. In Proceedings of the 25th International Conference on Compiler
Construction. ACM, 2016.
[18] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos. Dowsing
for overﬂows: A guided fuzzer to ﬁnd buffer boundary violations.
In Proceedings of the 22th USENIX Security Symposium (Security),
Washington, DC, Aug. 2013.
[40] K. Veeraraghavan, P. M. Chen, J. Flinn, and S. Narayanasamy. Detecting
and surviving data races using complementary schedules. In Proceedings
of the 23rd ACM Symposium on Operating Systems Principles (SOSP),
Cascais, Portugal, Oct. 2011.
[19] H. Han and S. K. Cha. Imf: Inferred model-based fuzzer. In Proceedings
of the 24th ACM Conference on Computer and Communications Security
(CCS), Dallas, TX, Oct.–Nov. 2017.
[20] G. J. Holzmann. The model checker spin. IEEE Transactions on software
engineering, 23(5), 1997.
[21] B. Kasikci, C. Zamﬁr, and G. Candea. Racemob: crowdsourced data race
detection. In Proceedings of the 24th ACM Symposium on Operating
Systems Principles (SOSP), Farmington, PA, Nov. 2013.
[22] B. Kasikci, W. Cui, X. Ge, and B. Niu. Lazy diagnosis of in-production
In Proceedings of the 26th ACM Symposium on
concurrency bugs.
Operating Systems Principles (SOSP), Shanghai, China, Oct. 2017.
[23] S. Y. Kim, S. Lee, I. Yun, W. Xu, B. Lee, Y. Yun, and T. Kim. Cab-
[41] J. W. Voung, R. Jhala, and S. Lerner. Relay: static race detection on
millions of lines of code. In Proceedings of the the 6th joint meeting of
the European software engineering conference and the ACM SIGSOFT
symposium on The foundations of software engineering. ACM, 2007.
[42] D. Vyukov. Syzkaller, 2015. https://github.com/google/syzkaller.
[43] V. M. Weaver and D. Jones. perf fuzzer: Targeted fuzzing of the perf event
open () system call. Technical report, Technical Report UMAINEVMW-
TR-PERF-FUZZER, University of Maine, 2015.
[44] M. Woo, S. K. Cha, S. Gottlieb, and D. Brumley. Scheduling black-box
mutational fuzzing. In Proceedings of the 20th ACM Conference on
Computer and Communications Security (CCS), Berlin, Germany, Oct.
2013.
(cid:24)(cid:23)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
[45] W. You, P. Zong, K. Chen, X. Wang, X. Liao, P. Bian, and B. Liang.
Semfuzz: Semantics-based automatic generation of proof-of-concept
exploits. In Proceedings of the 24th ACM Conference on Computer and
Communications Security (CCS), Dallas, TX, Oct.–Nov. 2017.
[46] M. Zalewsk. American fuzzy lop, 2014. http://lcamtuf.coredump.cx/aﬂ.
[47] T. Zhang, D. Lee, and C. Jung. Txrace: Efﬁcient data race detection
using commodity hardware transactional memory. In Proceedings of
the 21st ACM International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), Atlanta,
GA, Apr. 2016.
[48] T. Zhang, C. Jung, and D. Lee. Prorace: Practical data race detection
for production use.
In Proceedings of the 22nd ACM International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), Xi’an, China, Apr. 2017.
APPENDIX
Syscall index 8 (sys_ioctl)
BP-0 at ffffffff817f8351
Write to ffff8801e704c020
# ...
thr0: int fd = open("...") # syscall index 0
# ...
thr0: ioctl(fd, TCLFLSH) # syscall index 8
# ...
thr1: write(fd, "...") # syscall index 12
# ...
thr1: ioctl(fd, TCXONC)
thr1: close(fd)
1 [*] User program dump
2
3
4
5
6
7
8
9
10
11
12 [*] RacePair-0: drivers/tty/n_hdlc.c:440
13
14
15
16
17 [*] RacePair-1: drivers/tty/n_hdlc.c:216
18
19
20
21
22 [*] Confirmed as the true race.
23
24 # Begin: A crash report from the kernel.
25 BUG: KASAN: use-after-free in n_hdlc_buf_get+0x41/0x90 ...
26
27
28
29
30
31
32
33
dump_stack+0xb3/0x110
# ...
n_hdlc_buf_get+0x41/0x90
n_hdlc_tty_close+0x1c8/0x2d0
# ...
Syscall index 12 (sys_write)
BP-1 at ffffffff817f95b9
Read from ffff8801e704c020
# ...
# ...
Call Trace:
Fig. 16: A race report produced by RAZZER on CVE-2017-2636
Syscall index 3 (sys_setsockopt)
BP-0 at ffffffff834701bb
Write to ffff8800b0ca9120
Syscall index 7 (sys_setsockopt)
BP-1 at ffffffff8346d480
Read from ffff8800b0ca9120
# ...
thr0: sys_setsockopt(PACKET_AUXDATA) # syscall index 3
# ...
thr1: sys_setsockopt(PACKET_RX_RING) # syscall index 7
# ...
1 [*] User program dump
2
3
4
5
6
7
8 [*] RacePair-0: net/packet/af_packet.c:3773
9
10
11
12
13 [*] RacePair-1: net/packet/af_packet.c:4303
14
15
16
17
18 [*] Confirmed as the true race.
19
20 # Begin: A crash report from the kernel.
21 refcount_t: decrement hit 0; leaking memory.
22 WARNING: CPU: 0 PID: 12248 at lib/refcount.c:228
23 # ...
24
25 Call Trace:
26
27
28
29
30
Fig. 17: A race report produced by RAZZER on a newly discovered
race, WARNING in refcount_dec (v4.16-rc3).
dump_stack+0x155/0x1f6 lib/dump_stack.c:53
# ...
# ...
__sock_put include/net/sock.h:629 [inline]
__unregister_prot_hook+0x128/0x190 net/packet/af_packet.c:369
(cid:24)(cid:23)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply.