400000 of 1000000 tuples (40%) done (elapsed 0.41 s, remaining 0.61 s)  
500000 of 1000000 tuples (50%) done (elapsed 0.51 s, remaining 0.51 s)  
600000 of 1000000 tuples (60%) done (elapsed 0.62 s, remaining 0.41 s)  
700000 of 1000000 tuples (70%) done (elapsed 0.72 s, remaining 0.31 s)  
800000 of 1000000 tuples (80%) done (elapsed 0.84 s, remaining 0.21 s)  
900000 of 1000000 tuples (90%) done (elapsed 0.95 s, remaining 0.11 s)  
1000000 of 1000000 tuples (100%) done (elapsed 1.06 s, remaining 0.00 s)  
vacuum...  
set primary keys...  
done.  
```  
pgbench 压测, 使用脚本生成测试数据  
```  
postgres=# create table tbl6(id int ,info text, crt_time timestamp);  
CREATE TABLE  
vi test.sql  
\set id random(1,10000000)  
insert into tbl6 values (:id, md5(random()::text), now());  
pgbench -M prepared -n -r -f ./test.sql -P 1 -c 32 -j 32 -t 1000  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 32  
number of threads: 32  
number of transactions per client: 1000  
number of transactions actually processed: 32000/32000  
latency average = 0.111 ms  
latency stddev = 0.355 ms  
tps = 257806.709420 (including connections establishing)  
tps = 265264.082829 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.001  \set id random(1,10000000)  
         0.111  insert into tbl6 values (:id, md5(random()::text), now());  
```  
do 编程  
```  
postgres=# do language plpgsql $$  
declare  
begin  
  for i in 1..100 loop  
    insert into tbl6 select mod(id,i), md5(random()::text), clock_timestamp() from generate_series(1,1000) t(id);  
  end loop;  
end;  
$$;  
DO  
```  
plpgsql 编程  
```  
create or replace function func_test() returns void as $$  
declare  
begin  
...  
end;  
$$ language plpgsql strict;  
```  
### 11. 检查空值（NULL）  
判断空值  
is null  
```  
postgres=# select 1 where null is null;  
 ?column?   
----------  
        1  
(1 row)  
```  
is not null  
```  
postgres=# select 1 where null is not null;  
 ?column?   
----------  
(0 rows)  
postgres=# select 1 where 'a' is not null;  
 ?column?   
----------  
        1  
(1 row)  
```  
is distinct from null  
```  
postgres=# select 1 where 'a' is distinct from null;  
 ?column?   
----------  
        1  
(1 row)  
postgres=# select 1 where null is distinct from null;  
 ?column?   
----------  
(0 rows)  
postgres=# select 1 where null is not distinct from null;  
 ?column?   
----------  
        1  
(1 row)  
```  
is distinct from 或 is not distinct from 可以用于两张表的JOIN，如果希望NULL与NULL相连，可以使用is not distinct from  
```  
postgres=# select 1 where 'a'='a';  
 ?column?   
----------  
        1  
(1 row)  
postgres=# select 1 where 'a' is not distinct from 'a';  
 ?column?   
----------  
        1  
(1 row)  
postgres=# select 1 where null=null;  -- 无法关联  
 ?column?   
----------  
(0 rows)  
postgres=# select 1 where null is not distinct from null;  -- 可以关联  
 ?column?   
----------  
        1  
(1 row)  
```  
修正空值  
```  
postgres=# select coalesce(null,'a');  
 coalesce   
----------  
 a  
(1 row)  
postgres=# select coalesce(null,'a','b');  
 coalesce   
----------  
 a  
(1 row)  
postgres=# select coalesce(null,null,'b');  
 coalesce   
----------  
 b  
(1 row)  
```  
### 12. 时间和日期  
当前日期  
```  
postgres=# select current_date;  
    date      
------------  
 2017-04-11  
(1 row)  
```  
事务时间  
```  
postgres=# select current_time;  
       timetz         
--------------------  
 16:25:53.179793+08  
(1 row)  
```  
事务timestamp  
```  
postgres=# select now();  
              now                
-------------------------------  
 2017-04-11 16:25:53.179793+08  
(1 row)  
```  
语句时间  
```  
postgres=# select clock_timestamp()::time;  
 clock_timestamp   
-----------------  
 16:26:57.251972  
(1 row)  
postgres=# select statement_timestamp()::time;  
 statement_timestamp   
---------------------  
 16:27:02.886793  
(1 row)  
postgres=# select statement_timestamp()::timetz;  
 statement_timestamp   
---------------------  
 16:27:06.975794+08  
(1 row)  
postgres=# select clock_timestamp()::timetz;  
  clock_timestamp     
--------------------  
 16:27:10.199891+08  
(1 row)  
```  
语句timestamp  
```  
postgres=# select statement_timestamp();  
      statement_timestamp        
-------------------------------  
 2017-04-11 16:26:42.905786+08  
(1 row)  
postgres=# select clock_timestamp();  
        clock_timestamp          
-------------------------------  
 2017-04-11 16:26:47.695877+08  
(1 row)  
```  
提取时间中的信息  
https://www.postgresql.org/docs/9.6/static/functions-datetime.html  
unix epoch time  
```  
postgres=# select extract(epoch from now());  
    date_part       
------------------  
 1491899255.64279  
(1 row)  
```  
年  
```  
postgres=# SELECT EXTRACT(YEAR from now());  
 date_part   
-----------  
      2017  
(1 row)  
```  
月  
```  
postgres=# SELECT EXTRACT(month from now());  
 date_part   
-----------  
         4  
(1 row)  
```  
一年中的第几日  
```  
postgres=# SELECT EXTRACT(doy from now());  
 date_part   
-----------  
       101  
(1 row)  
```  
一年中的第几周  
```  
postgres=# SELECT EXTRACT(week from now());  
 date_part   
-----------  
        15  
(1 row)  
```  
一月中的第几日  
```  
postgres=# SELECT EXTRACT(day from now());  
 date_part   
-----------  
        11  
(1 row)  
```  
一周中的第几日  
```  
postgres=# SELECT EXTRACT(dow from now());  
 date_part   
-----------  
         2  
(1 row)  
```  
### 13. 多个表协同工作  
子查询  
```  
只能返回一列  
postgres=# select (select * from (values (1,2),(2,3)) as t(c1,c2)) , relname, relkind from pg_class;  
ERROR:  subquery must return only one column  
LINE 1: select (select * from (values (1,2),(2,3)) as t(c1,c2)) , re...  
               ^  
只能返回一条记录  
postgres=# select (select * from (values (1),(2)) as t(c1)) , relname, relkind from pg_class;  
ERROR:  more than one row returned by a subquery used as an expression  
postgres=# select (select * from (values (1),(2)) as t(c1) limit 1) , relname, relkind from pg_class;  
 c1 |                    relname                    | relkind   
----+-----------------------------------------------+---------  
  1 | pg_type                                       | r  
  1 | pg_toast_187550                               | t  
  1 | new_type                                      | c  
  1 | pg_toast_187550_index                         | i  
  1 | test                                          | r  
  1 | pg_toast_187556                               | t  
postgres=# select t.relname from (select * from pg_class limit 1) t , pg_class where t.relname=pg_class.relname;  
 relname   
---------  
 pg_type  
(1 row)  
```  
JOIN  
```  
postgres=# select t1.relname,t2.rolname from pg_class t1, pg_authid t2 where t1.relowner=t2.oid limit 10;  
        relname        | rolname    
-----------------------+----------  
 pg_type               | postgres  
 pg_toast_187550       | postgres  
 new_type              | postgres  
 pg_toast_187550_index | postgres  
 test                  | postgres  
 pg_toast_187556       | postgres  
 pg_toast_187556_index | postgres  
 tblaccount4           | postgres  
 hints_id_seq          | postgres  
 pg_toast_17134        | postgres  
(10 rows)  
```  
update from  
```  
postgres=# create table tbl7(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# create table tbl8(id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=# insert into tbl7 select generate_series(1,100), 'test', now();  
INSERT 0 100  
postgres=# insert into tbl8 select generate_series(1,100), md5(random()::text), now();  
INSERT 0 100  
postgres=# update tbl7 set info=tbl8.info from tbl8 where tbl7.id=tbl8.id;  
UPDATE 100  
postgres=# select info from tbl7 limit 10;  
               info                 
----------------------------------  
 4c86016ec0236be89de3ef4f6044b201  
 b7a9c835cac248ef0de3003f4f41e57e  
 60173e7d7bd328826f48cdf32b74ae96  
 dec7041c58dcb367a0ab59c272032d80  
 775017af1ec532808e24be24ed9e1593  
 67b7326219629ea22d88bdb47e1f4b54  
 0da20f68c459518081f4f3c3a58fc088  
 21b20b667563a7d67f0a92aae2c64b09  
 4074650815e08ddb6f2af8d4b05fd992  
 a2cf8866d99361a545b7a96cbb718a9c  
(10 rows)  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")