exception handlers. Based on information hiding, memory
regions without references to them exist for similar reasons:
they are based on the assumption that memory disclosures
cannot reveal
their location is
not available and they are reference-less. We explain several
instances of information hiding in the following.
them, as knowledge about
1) Sensitive Application Structures: Microsoft Windows
maintains a Process Environment Block (PEB) for each running
process. Similarly, a Thread Environment Block (TEB) is
included in each process’ address space for each thread. The
legitimate method to gain access to either of them is to use
the ofﬁcial Windows API call NtCurrentTeb(). Accessing a
TEB or the PEB illegitimately is often done by using the FS
register on x86 architectures: the address of the currently active
thread’s TEB is found at FS:0 and the address of the PEB at
[FS:0x30]. To the best of our knowledge, references to both
structures do not exist anywhere in user-space memory.
it
In presence of ASLR,
is nearly impossible for an
adversary to reveal the structures with complete read access
to memory, unless prior knowledge of the memory layout is
available to her. Trying to read unreadable memory results in
access faults and termination of the program. For an adversary,
the only possible way to reveal them is to hijack the control-
ﬂow and execute her code of choice. In Section III-E, we show
that this hidden information is accessible even if code-reuse
attacks are not an option (e.g., due to control-ﬂow integrity).
Valuable information for an attacker in a TEB is the
thread’s stack boundaries or the chain of exception handlers.
Very critical
is an undocumented code-trampoline ﬁeld at
offset 0xC0: every system call of a 32-bit process running
on 64-bit Windows is going through this CPU-modeswitch
trampoline. If an attacker manages to overwrite that ﬁeld, she
can gain control over every system call in that process.
Among other information, the PEB contains the base ad-
dresses of all mapped modules and a function callback table for
the Windows kernel. While disclosing a module’s base address
by reading another module’s import address table (IAT) may
be an option, reading the PEB directly yields all executable
modules of a process at once. Note that there are no references
to kernel callback tables in the user-mode address space for
obvious reasons.
2) Reference-Less Regions for Pointer Safety: Another
notable example of this concept are implementations of Code-
Pointer Integrity (CPI [26]) on x86-64 and ARM systems.
In absence of hardware enforced segmentation protection, the
CPI implementation on these platforms relies on hiding the
location of the safe region that contains the sensitive metadata
for pointers. The safe region is used by CPI to enforce its
policies. The most restrictive variant of the CPI policy tracks
all sensitive pointers in a program. A pointer is considered
sensitive if it is a code pointer or a pointer that may later
be used to access a sensitive pointer. This recursive deﬁnition
ensures that all control ﬂow information is protected.
The security of CPI on the x86-64 and ARM architectures
relies on hiding the precise location of metadata from an
attacker. This concept has already been shown to be susceptible
to attacks by Evans et al. [19]. In Section III-E, we present
an even more efﬁcient mechanism to determine the location of
hidden memory. It is used to launch a similar attack on CPI
without crashes in a shorter time.
3) Code and Code Pointer Hiding: In case ﬁne-grained
randomization is in place, an adversary can still conduct JIT-
ROP attacks [51]. To prevent the attacker’s ability to discover
enough code to reuse, recent research has focused on mapping
code as execute-only [2] or hide pointers in code behind a
layer of indirection [3]. In another recent work, Crane et. al
developed a framework called Readactor which aims to be
resilient against memory disclosures and aims to provide a
high degree of protection against code-reuse attacks of all
kinds [13]. Code pointers in code are not readable, as code is
mapped as execute-only, and code-pointers in data are replaced
by execute-only trampolines to their appropriate functions.
However, the authors note that hidden functions which are
imported from other modules can be invoked by an adversary
through the trampolines if she manages to disclose trampoline
addresses. Based on Readactor, Readactor++ was developed
which additionally randomizes the entries in function tables
such as in virtual
function tables and procedure linkage
tables [14]. Export symbols, however, are and must remain
discoverable (see Section III-F on dynamic loading for details).
We show in Section V that this leaves enough space to
conduct powerful code-reuse attacks, when combined with
crash-resistance. Additionally, we found that it is challenging
to hide pointers in structures which are allowed to be accessed
legitimately (see Section III-F for details).
III. UNVEILING HIDDEN MEMORY
In the following, we demonstrate that a memory scanning
ability can be achieved by abusing the fact that certain code
constructs enable a crash-resistance. We introduce the technical
building blocks and show how they can be used to subvert
memory secrecy and randomization without control-ﬂow hi-
jacking, code-injection, or code-reuse attacks.
A. Fault-Tolerant Functionality
Querying characteristics of memory regions is a legitimate
operation in a standard user-mode program. For example,
Windows provides API functions for that purpose: IsBadRead-
Ptr() and related functions allow a programmer to investigate
if a certain memory pointer is accessible with certain permis-
sions without raising faults. Similarly, VirtualQuery() yields
memory information of a range of pages. Furthermore, other
functionality exists whose primary purpose is not to deliver
information about memory permissions. However, exception
handling and system calls can be (ab)used to deduce whether
memory is accessible or not.
1) Exception and Signal Handling: Program code in Win-
dows can be guarded via Structured Exception Handling
(SEH) [41, 45] and Vectored Exception Handling (VEH) [42].
A programmer can install exception handlers and deﬁne ﬁlter
functions which decide if the handler is executed. In case of
try{. . . }
C/C++ code and SEH, this is achieved with
except(FILTER){. . . } and similar constructs, and in
case of VEH with the Windows API. This way, a chain of
exception handlers can be constructed: If an exception like an
access violation is raised, the exception handlers’ ﬁlters are
inspected successively until one handler is picked to process
the exception. It can then decide to pass the exception to
the next exception handler, terminate the program, or return
a status, such that program execution is resumed. In case of
SEH, program resumption can continue to execute the code
except(){} block, and in case of VEH,
which follows the
the program is resumed at an address speciﬁed within the VEH
information. Signal handling is achieved in a similar way in
Linux: callback functions can be speciﬁed which are called
upon a signal raised by the program, such as a segmentation
fault. Similar to Windows, the callback function can process
the reason for the signal and decide to terminate the program
or to resume normal execution.
As we demonstrate in the following, legitimate exception
handling can be utilized to achieve crash-resistant functionality
within a higher-level interpreter language like JavaScript in a
browser without hijacking the control-ﬂow.
2) System Calls: System calls in Linux have the ability
to return speciﬁc status codes based on the parameters they
were called with. If a system call expects a pointer to memory
and receives a pointer to an unreadable memory address, it will
return a different status code than when called with a parameter
which points to a readable memory address. For example, the
access() system call in Linux is normally used to check
different characteristics of a ﬁle whose name is passed as a
string pointer. If the pointer points to an unreadable memory
4
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
# include 
# include 
PCHAR ptr = 0;
typedef VOID (* function ) () ;
VOID CALLBACK triggerFault () {
CHAR mem ;
ptr ++;
switch (( INT ) ptr % 3) {
case 0:
printf (" Execute 0x %.8 x\n" , ptr );
(( function )( ptr )) () ;
break ;
case 1:
printf (" Read at 0x %.8 x\n" , ptr );
mem = * ptr ;
break ;
case 2:
printf (" Write to 0x %.8 x\n" , ptr );
* ptr = 0;
break ;
}
printf (" No fault ");
}
INT main () {
MSG msg ;
SetTimer (0 , 0, 1000 , ( TIMERPROC ) triggerFault );
while (1) {
GetMessage (& msg , NULL , 0, 0) ;
DispatchMessage (& msg );
}
}
Listing 1. Crash-resistant program in Windows
page, access() returns the error “Bad Address”, while it
returns “No such ﬁle or directory” for a readable memory
address (which does not have to constitute a valid ﬁlename).
A similar behaviour can be observed with system calls on
Windows. The system call NtReadVirtualMemory() returns
a different status code when applied to a readable memory
address than to an unreadable memory address.
However, both Windows and Linux do not raise any
exception or access fault. This side channel is still used by
egghunt shellcode. It is a speciﬁc type of injected code which
searches the memory space for the actual malware code after
the control-ﬂow was hijacked with a vulnerability [43]. In this
paper, we show that actually searching the memory space is
possible without control-ﬂow hijacking.
B. Crash-Resistance
Memory access faults like memory access violations in
Windows programs or segmentation faults in Linux programs
are fatal and lead to the abnormal termination of the program.
In both operating systems, exception handling is allowed to
inspect the type, reason, and faulting code which caused the
exception. If the faulting code is not handled by any exception
handler,
the OS terminates the program. Surprisingly, we
discovered that faulting code which should crash a given
program does not have to bring down the program necessarily.
If we can force a program to stay alive despite its code
producing memory corruptions and access faults, we denote
this as crash-resistance.
Consider for example the Windows C-code in Listing 1.
On line 29, the timer callback function triggerFault() is
installed. It is executed in a loop with DispatchMessage()
(line 30 to 33). triggerFault() generates read, write, and
execution faults depending on the value of ptr which is
increased each time it runs. There are no custom SEH or
VEH handlers installed, thus the OS should terminate the
program on the ﬁrst access fault. However, this is not the
case: the function triggerFault() is stopped at access faults,
but is executed permanently anew. Hence, ptr is continuously
increased and each access fault is triggered without forcing
the program into termination. Consequently, the program is
crash-resistant.
This behaviour was observed for both 32-bit and 64-bit
programs and we found the following reasons for it:
the
timer callback triggerFault() is called by the function
DispatchMessagerWorker() from user32.dll. The callback
is wrapped by an exception handler. If an exception in
triggerFault() is raised, the corresponding ﬁlter function
executes and decides if the installed exception handler is
going to handle the exception. The ﬁlter returns EXCEPTION -
EXECUTE HANDLER independently of the exception type. This
to handle any exception.
instructs the exception handler
DispatchMessagerWorker() returns and the program contin-
ues running without executing line 24.
After coorperation with Microsoft, this issue was conﬁrmed
to be security relevant (tracked as CVE-2015-6161, see Sec-
tion VII-B for a discussion). There exist similar design choices
and a more in depth technical analysis can be found in an
article by Permamedov [40].
1) Crash-Resistance in Microsoft Internet Explorer: It is
important to note that we can exploit this feature inside Internet
Explorer and prevent it from abnormal termination on memory
corruption errors. We developed two ways to achieve this
behaviour in Internet Explorer:
1) A web page can use the JavaScript method window.-
open() to open a new browser tab window. JavaScript
code which is dispatched via setTimeout() or set-
Interval() inside that window can produce memory
corruptions without forcing the browser to terminate.
2) Since the introduction of HTML5, web workers are
available and dispatched as real
threads in script en-
gines. JavaScript code executed with setTimeout() or
setInterval() inside web workers can generate access
faults without crashing Internet Explorer.
2) Crash-Resistance in Mozilla Firefox: While the crash-
resistance in Windows may seem like an obscure feature, we
were able to achieve crash-resistance in Mozilla Firefox as
well. We utilized the Firefox JavaScript engine SpiderMonkey
and its asm.js optimization module, called OdinMonkey. It is
able to compile a subset of JavaScript code ahead of time into
high performance native code [33].
We observed that OdinMonkey uses exceptions instead of
runtime checks in special cases. Most prominently, bounds
checking is not performed explicitly. Instead, page protections
on memory are used to check bounds implicitly. Every asm.js
function can access a pre-determined heap of a ﬁxed size.
On creation, the heap is initialized as an array with zeros.
Thus, any access in bounds will not lead to an exception.
On 64-bit machines it is then guarded by a non-accessible
memory region of slightly more than 4GB. As asm.js only
5
permits 32-bit indices, this guarantees that any offset from the
beginning of the heap will either point into the valid array
or into the guard region. Out of bound memory accesses
on that array are not
treated as critical faults. Instead, a
default value of NaN is returned to indicate that an element
outside of that array was accessed. This is accomplished by
an exception handler which prevents program termination:
OdinMonkey sets a global signal handler that gets called for
every unhandled exception in the process. The handler is
deﬁned in AsmJSSignalHandlers.cpp. Out of bound memory
accesses provoke checks to ensure only the intended faults are
caught. First, the exception code itself is inspected to determine