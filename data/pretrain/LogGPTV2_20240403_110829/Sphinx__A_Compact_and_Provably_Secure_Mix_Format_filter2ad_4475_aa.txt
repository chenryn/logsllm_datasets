title:Sphinx: A Compact and Provably Secure Mix Format
author:George Danezis and
Ian Goldberg
2009 30th IEEE Symposium on Security and Privacy
Sphinx: A Compact and Provably Secure Mix Format
George Danezis
Microsoft Research
Cambridge, UK
Ian Goldberg
University of Waterloo
Waterloo, ON, Canada
PI:EMAIL
PI:EMAIL
Abstract
Sphinx is a cryptographic message format used to
relay anonymized messages within a mix network. It
is more compact than any comparable scheme, and
supports a full set of security features: indistinguish-
able replies, hiding the path length and relay position,
as well as providing unlinkability for each leg of the
message’s journey over the network. We prove the
full cryptographic security of Sphinx in the random
oracle model, and we describe how it can be used as
an efﬁcient drop-in replacement in deployed remailer
systems.
1. Introduction
Mix networks were proposed by David Chaum [7]
in 1981 as an efﬁcient means to achieve anonymous
communications. A mix (or a mix node) is simply
a message relay that accepts a batch of encrypted
messages, decrypts them and sends them on their
way. An observer of a mix node should be unable to
link incoming and outgoing messages; this provides
anonymity to the users of the network. A number of
theoretical [12], [15], [9], [5], [21] as well as deployed
systems [16], [8] have been proposed that further
develop the idea of mixes. The Mixmaster network [16]
is currently composed of about 25 reliable remailers,
while the newer Mixminion [8], adding the ability to
reply anonymously to messages, is composed of about
20 reliable nodes.
Anonymizing messages through a mix network
comes at a cost: the messages are batched and therefore
delayed, as well as padded to a standard length to
prevent trafﬁc analysis. Furthermore, multiple encryp-
tion layers have to be used to encapsulate the routing
information necessary to relay the message through a
sequence of mixes. The cryptographic mechanism used
to deliver this routing information to each intermediate
mix, as well as to transform the message as it travels
through the network, is called the cryptographic packet
format. The cryptographic mechanism is to some ex-
tent independent from other trafﬁc analysis protections
offered by the mix network, as long as they guarantee
that some aspects of the routing information, such as
path length or position in the path, are not leaked [4].
The minimum overhead introduced by the crypto-
graphic packet format impacts the types of trafﬁc that
can realistically be anonymized. Previous work, like
Mixminion [8] and Minx [9] added an overhead of
at least a full RSA ciphertext (at least 256 additional
bytes for modern 128-bit security levels). Provable
designs, such as the ones proposed by M¨oller [15], Ca-
menish and Lysyanskaya [5] or Shimshock et al. [21],
use multiple RSA-sized ciphertexts to relay informa-
tion for each stage of the mixing, making the header
necessary for anonymization many kilobytes long.
Such formats may be acceptable for relaying large
email messages, but add a signiﬁcant overhead to short
messages, the length of Instant Messaging or SMS
messages (that are up to 160 characters.) It is therefore
of great importance to devise cryptographic schemes
that are compact to efﬁciently anonymize those classes
of trafﬁc. Furthermore, anonymous replies rely on
cryptographic addresses that are of similar size to the
headers required to route messages thought the net-
work. Compact packet formats directly lead to compact
addresses and thus to cheaper receiver anonymity.
that
Traditionally, cryptographic packet formats have
been based on heuristic security arguments. From early
on it became apparent
these complex crypto-
graphic systems are difﬁcult to get right: the original
scheme by Chaum [7] was shown to have crypto-
graphic weaknesses by Pﬁtzmann and Pﬁtzmann [18]
and Minx [9] leaked information which theoretically
allowed an adversary to extract the full plaintext of
messages [21]. As a result several authors proposed
provably secure packet formats. Some of them only
provide the bare minimum functionality [15], [5], and
in particular no provision for anonymous replies, while
others suffer a signiﬁcant transmission overhead [21].
It has so far been an open problem to devise a compact
1081-6011/09 $25.00 © 2009 IEEE
DOI 10.1109/SP.2009.15
269
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
and provably secure packet format.
Our key contribution is Sphinx: a cryptographic
packet format that can be used to route messages over
a mix network. Sphinx provides all features expected
by modern remailer applications:
of the cryptographic format and the associated proofs
of security respectively. In section 5 we discuss the
efﬁciency of the scheme and compare it with other pro-
posals. Finally we provide some concluding remarks in
section 6.
• It provides bitwise unlinkability, making it cryp-
tographically difﬁcult to link incoming and out-
going messages from a mix. This is the basic
property all packet formats provide.
• It allows for paths up to an arbitrary maximum
length, while hiding the number of hops a mes-
sage has travelled so far, as well as the actual
number of mixes on the path of a message.
These are hidden even from the mixes that are
processing the messages.
• The processing of reply messages is indistinguish-
able from the processing of normal “forward”
messages. The anonymity sets of both types of
trafﬁc are therefore confounded, providing greater
protection for both.
• It resists any active tagging attacks, where the
adversary modiﬁes and re-injects messages to
extract
their destinations or
content.
information about
• It is compact: for 128-bit security, the overhead
is only 32 bytes plus a single group element
(not one per hop) plus 32 bytes of routing and
integrity protection information per hop. The size
of the group element can be as small as 32 bytes
using Dan Bernstein’s Curve25519 elliptic curve
library [3]; the element is the x-coordinate (in
GF (2255−19)) of a point on an elliptic curve. For
example, the header of a Sphinx message with a
maximum path length of 5 mixes can be encoded
in as little as 224 bytes.
From a systems perspective, Sphinx is designed as
a drop-in replacement for the Mixminion packet for-
mat [8]. It makes the same systems and security
assumptions as Mixminion, but is more compact and
cryptographically provably secure. This means that
Sphinx can be easily integrated with the Mixminion
software to take advantage of the thousands of lines of
robust client and server code. Our reference implemen-
tation of Sphinx, which provides all of the functionality
needed for clients, mix nodes, and the nymserver, and
which works either over a 2048-bit prime ﬁeld or
Curve25519, is less than 600 lines of Python code
(including simple tests).
Our description of Sphinx will proceed in the fol-
lowing fashion: section 2 provides an overview of
the threat model, requirements and design rationale of
Sphinx; sections 3 and 4 provide a formal deﬁnition
270
2. Design overview
Mix networks achieve anonymity by relaying mes-
sages over a sequence of mixes, called the path. The
sender cryptographically encodes a message, which is
partially decoded by each mix along the path. As long
as a single mix in the path is honest, meaning that
it does not share its secrets with an adversary, the
message will beneﬁt from some anonymity.
2.1. Threat Model & Requirements
It is traditional to consider the security of crypto-
graphic packet formats against an active adversary that
is able to observe all trafﬁc in the network, as well as
to intercept and inject arbitrary messages. Furthermore,
we assume that some, but not all, of the mixes in the
path of a relayed message are corrupt; i.e., under the
direct control of an adversary that knows all their keys,
and other secrets, and is able to fully control their
functioning. The principal aim of the adversary is to
extract some information about the ultimate destination
of mixed messages through inferring the ﬁnal address
or some of their contents. The security properties of
cryptographic mix packet formats prevent or tightly
control any such information leakage.
Speciﬁcally, Sphinx needs to ensure that if multiple
messages enter an honest mix and are batched together,
it is not feasible to link an output message to any
input message with probability signiﬁcantly higher
than uniform. This is the fundamental requirement of
any packet format. Yet modern packet formats also
control the amount of information leaked to mixes
(including dishonest mixes) along the path. A dishonest
mix should not be able to infer either the full length
of the path of a particular message, or its own position
on that path. Simple trafﬁc analysis detects if a mix is
ﬁrst or last on the path, so we do not consider this a
compromise.
An advantage of mix networks is that they pro-
vide a uniﬁed mechanism for both sender and re-
ceiver anonymity. Alice may encode a single-use reply
block [8] and attach it
to an anonymous message
destined to Bob. Bob cannot know that the originator
of the message is Alice, but can use the reply block
contained in the message as an address to send a reply.
The reply is then routed through the network until
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
it reaches Alice. In both cases Alice beneﬁts from
anonymity properties, ﬁrst as the sender of the message
(sender anonymity) and the second time as the anony-
mous receiver of a message (receiver anonymity).
Nymservers [14] have been developed as services that
make use of anonymous replies to bridge the world
of mix networks with traditional email. Users can
send normal email to pseudonymous email addresses,
which are then routed through the mix network using
anonymous reply blocks. We note that the network
does not attempt to keep it a secret that Bob is talking
to some particular pseudonym; we assume Bob’s email
communication is likely to be unencrypted (though
orthogonal end-to-end encryption mechanisms can of
course also be used). What it does protect is the fact
that that pseudonym belongs to Alice.
To increase the security of both sender- and receiver-
anonymous messages,
the two kinds of messages
should use the same network and the same relay
mechanisms. Hence it is a requirement of the crypto-
graphic packet format that forward and reply messages
be cryptographically indistinguishable; this makes the
task of engineering packet formats more difﬁcult. Tra-
ditional methods for achieving non-malleability (such
as providing a MAC over the full header and body of
the relayed message) are not readily available, as the
reply message body is unknown at the time the reply
block is created.
Finally, Sphinx is required to be resistant to active
attacks: an adversary can use any corrupt node to inject
arbitrary messages into honest nodes in an attempt
to extract information. Sphinx protects against replay
attacks—where the adversary reinjects a previously
seen message verbatim—and tagging attacks—where
the adversary modiﬁes a message before reinjecting it
into the network. In neither event will Sphinx allow
the adversary to learn any information about the ﬁnal
destination of the message or its contents. Other denial-
of-service and ﬂooding attacks (n− 1 attacks) [20] are
not considered in the threat model, since they are not
cryptographic in nature and are handled by orthogonal
mechanisms [12], [13]. Similarly, active trafﬁc analysis
attacks, such as those based on dropping messages or
ﬂooding links and nodes to perform remote network
measurements, cannot be ﬁxed by the cryptographic
format alone, and must be dealt with by the high-level
mix strategies.
2.2. Design Rationale
Sphinx is based on the idea that a mix packet format
should encapsulate enough information to cryptograph-
ically secure a conﬁdential and integrity-protected
channel to each of the mixes on a message’s path. This
requires keys to be shared, or distributed, securely to
each of the mixes on the path, in order that they may
decode the routing information, as well as other parts
of the message. Traditionally, this has been done with
RSA [19] encryption, while Sphinx instead uses Difﬁe-
Hellman [10].
At the heart of the Sphinx key distribution strategy
lies a single element of a cyclic group of prime order
satisfying the decisional Difﬁe-Hellman assumption.
This element is used by each mix on the path to derive
a secret that is shared with the original sender of the
message—a set of keys that can be used for encryption,
integrity protection, etc. are further extracted from this
shared secret. The element used for key derivation
cannot be transported unaltered throughout the path,
however, as this would lead to linkable messages. To
avoid this, the element is blinded at each mixing step
to make it indistinguishable from any other output
element. The blinding factors are extracted from the
shared secrets, and so both senders and mixes can
perform all operations necessary to extract keys used
at each hop of the mix message processing. There
are many possible choices for the cyclic group; two
common ones are a subgroup of the multiplicative
group of a prime ﬁeld, and an elliptic curve group. The
latter in particular leads to a very compact design, since
for 128-bit security, group elements can be expressed
in just 32 bytes, as opposed to 256–384 bytes for a
prime ﬁeld of similar strength.
Besides extracting the shared key, each mix has to
be provided with authentic and conﬁdential routing
information to direct the message to the subsequent
mix, or to its ﬁnal destination. We achieve this by
a simple encrypt-then-MAC mechanism. A secure
stream cipher or AES in counter mode is used for
encryption, and a secure MAC (with some strong but
standard properties) is used to ensure no part of the
message header containing routing information has
been modiﬁed. Some padding has to be added at each
mix stage, in order to keep the length of the message
invariant at each hop.
The steps involved in decoding and routing the
message at each mix are rather simple. Their full
technical description is provided in section 3.6 and is
illustrated in the corresponding Figure 3. In summary:
1) The mix receives the message and, using the
element from the cyclic group and its private key,
extracts a set of shared session keys.
2) The MAC of the message is checked to ensure
that the header has not been modiﬁed.
3) Some padding (of all zeros) is added at the end
of the message to keep the length invariant.
271
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
4) The header of the message is decrypted (in-
cluding the newly added padding), the element
blinded and the payload of the message de-
crypted.
5) The routing information and next MAC are ex-
tracted from the decrypted header, and the result-
ing message is forwarded to the next destination.
Senders encode a message by deriving all session
keys, wrapping the message in multiple layers of
encryption, and calculating the correct message authen-
tication codes for each stage of the journey. Calculating
the correct MACs is not a trivial task: the successive
layers of padding that are encrypted at each stage of
the mixing have to be included in the integrity check.
The MACs ensure that a modiﬁed header is detected
immediately.
The payload of the message is kept separate from the
mix header used to perform the routing. It is decrypted
at each stage of mixing using a block cipher with
a large block size (the size of the entire message),
such as LIONESS [1]. In case the adversary modiﬁes
the payload in transit, any information contained in
it becomes irrecoverable. Sender-anonymous messages
contain the ﬁnal address of the message, as well as
the message itself as part of the payload, and so any
modiﬁcation destroys this information.
Anonymous replies are equally simple to construct:
the intended receiver of the reply (who will beneﬁt
from the anonymity properties) builds a mix header
addressed back to herself with no payload. This header
acts as an anonymous reply address, and can be
included in a message to give anyone the ability to
reply. Some additional information, such as the address
of the ﬁrst mix hop, is also needed.
A reply is built by attaching a message to the reply