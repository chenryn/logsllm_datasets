Starting Position
Figure 10: Recovery rate of Base64 encoded password
versus a “normal” password for 6-character passwords
(T = 5, 1 ≤ r ≤ 251, double-byte algorithm).
and code are both easily modiﬁed to handle this situation,
and we have conducted simulations with the resulting
shift attack. We report on these simulations in the full
version, [12].
5 Practical Validation
In this section we describe proof-of-concept implemen-
tations of our attacks against a speciﬁc application-layer
protocol running over TLS, namely BasicAuth. In the full
version [12], we additionally consider the IMAP protocol
as a target.
Introducing BasicAuth
5.1
Deﬁned as part of the HTTP/1.0 speciﬁcation [3] and ex-
tended in [11], the Basic Access Authentication scheme
(BasicAuth) provides a simple means for controlling ac-
cess to webpages and other protected resources. In view
of its simplicity, the scheme is still very widely used in
the enterprise application space. The protocol essentially
involves the client sending the server a username and pass-
word in Base64 encoded form, and as such, requires the
use of a lower-layer secure protocol like TLS to mitigate
trivial eavesdropping attacks. Certain web browsers dis-
play a login dialog when an initiating challenge message
is received from the server and many browsers present
users with the option of storing their user credentials in
the browser, with the credentials thereafter being automat-
ically presented on behalf of the user.
The client response to the challenge is of the form
Basic Base64(userid:password)
Authorization:
where Base64(·) denotes the Base64 encoding function
(which maps 3 characters at a time onto 4 characters of
output).
5.2 Attacking BasicAuth
To obtain a working attack against BasicAuth, we need to
ensure that two conditions are met:
• The Base64-encoded password included in the Ba-
sicAuth client response can be located sufﬁciently
early in the plaintext stream.
• There is a method for forcing a browser to repeatedly
send the BasicAuth client response.
We have observed that the ﬁrst condition is met for
particular browsers, including Google Chrome. For exam-
ple, we inspected HTTPS trafﬁc sent from Chrome to an
iChair server.5 We observed the user’s Base64-encoded
password being sent with every HTTP(S) request in the
same position in the stream, namely position r = 133 (this
includes 16 bytes consumed by the client’s Finished
message as well as the 20-bytes consumed by the TLS
Record Protocol tag). For Mozilla Firefox, the value of r
was the less useful 349.
5iChair is a popular system for conference reviewing, widely used in
the cryptography research community and available from http://www.
baigneres.net/ichair. It uses BasicAuth as its user authentication
mechanism.
USENIX Association  
24th USENIX Security Symposium  125
13
214
216
218
220
222
224
226
228
optimal guessing
 25
 20
 15
)
T
(
2
g
o
l
 10
 5
 0
 0
 0.1
 0.2
 0.3
 0.5
 0.4
 0.6
Recovery Rate
 0.7
 0.8
 0.9
 1
Figure 9: Value of T required to achieve a given password recovery rate α for S = 2s with s ∈ {14,16, . . . ,28} (n = 6,
r = 133, double-byte algorithm).
For the second condition, we adopt the methods used
in the BEAST, CRIME and Lucky 13 attacks on TLS, and
also used in attacking RC4 in [2]: we assume that the user
visits a site www.evil.com which loads JavaScript into
the user’s browser; the JavaScript makes GET or POST re-
quests to the target website at https://www.good.com
by using XMLHttpRequest objects (this is permitted un-
der Cross Origin Resource Sharing (CORS), a mechanism
developed to allow JavaScript to make requests to a do-
main other than the one from which the script originates).
The Base64-encoded BasicAuth password is automati-
cally included in each such request. To force the pass-
word to be repeatedly encrypted at an early position in
the RC4 keystream, we use a MITM attacker to break the
TLS connection (by injecting sequences of TCP FIN and
ACK messages into the connection). This requires some
careful timing on the part of the JavaScript and the MITM
attacker.
We built a proof-of-concept demonstration of these
components to illustrate the principles. We set up a vir-
tual network with three virtual machines each running
Ubuntu 14.04, kernel version 3.13.0-32. On the ﬁrst ma-
chine, we installed iChair. We conﬁgured the iChair web
server to use RC4 as its default TLS cipher. The sec-
ond machine was running the Chrome 38 browser and
acted as the client in our attack. We installed the required
JavaScript directly on this machine rather than download-
ing from another site. The third machine acted as the
MITM attacker, required to intercept the TLS-protected
trafﬁc and to tear-down the TLS connections. We used
the Python tool Scapy6 to run an ARP poisoning attack
on the client and server from the MITM so as to be able to
intercept packets; with the connection hijacked we were
able to force a graceful shutdown of the connection be-
tween the client and the server after the password-bearing
record had been observed and recorded. We observed that
forcing a graceful shutdown of each subsequent connec-
tion did allow for TLS resumption (rather than leading to
the need for a full TLS Handshake run).
With this setup, the JavaScript running in the client
browser sent successive HTTPS GET requests to the
6Available at http://www.secdev.org/projects/scapy/.
126  24th USENIX Security Symposium 
USENIX Association
14
iChair server every 80ms. Our choice of 80ms was moti-
vated by the fact that for our particular conﬁguration, we
observed a total time of around 80ms for TLS resumption,
delivery of the password-bearing record and the induced
shutdown of the TCP connection. This choice enabled
us to capture 216 encrypted password-bearing records in
1.6 hours (the somewhat greater than expected time here
being due to anomalies in network behaviour). Running
at this speed, the attack was stable over a period of hours.
We note that the latency involved in our setup is much
lower than would be found in a real network in which the
server may be many hops away from the client: between
500ms and 1000ms is typical for establishing an initial
TLS connection to a remote site, with the latency being
roughly half that for session resumptions. Notably, the
cost of public key operations is not the issue, but rather
the network latency involved in the round-trips required
for TCP connection establishment and then running the
TLS Handshake. However, browsers also open up multi-
ple TLS connections in parallel when fetching multiple
resources from a site, as a means of reducing the latency
perceived by users; the maximum number of concurrent
connections per server is 6 for both the Chrome and Fire-
fox browsers (though, we only ever saw roughly half this
number in practice, even with low inter-request times).
This means that, assuming a TLS resumption latency
(including the client’s TCP SYN, delivery of the password-
bearing record and the ﬁnal, induced TCP ACK) of 250ms
and the JavaScript is running fast enough to induce the
browser to maintain 6 connections in parallel, the amount
of time needed to mount an attack with S = 226 would
be on the order of 776 hours. If the latency was further
reduced to 100ms (because of proximity of the server to
the client), the attack execution time would be reduced to
312 hours.
Again setting n = 6 , T = 100, r = 133 and using the
simulation results displayed in Figure 10, we would ex-
pect a success rate of 64.4% for this setup (with S = 226).
For T = 5, the corresponding success rate would be
44.5%.
We emphasise that we have not executed a complete
attack on these scales, but merely demonstrated the feasi-
bility of the attack in our laboratory setup.
6 Conclusion and Open Problems
We have presented plaintext recovery attacks that derive
from a formal Bayesian analysis of the problem of esti-
mating plaintext likelihoods given an a priori plaintext
distribution, suitable keystream distribution information,
and a large number of encryptions of a ﬁxed plaintext
under independent keys. We applied these ideas to the
speciﬁc problem of recovering passwords encrypted by
the RC4 algorithm with 128-bit keys as used in TLS,
though they are of course more generally applicable – to
uses of RC4 other than in TLS, and to stream ciphers with
non-uniform keystream distributions in general. Using
large-scale simulations, we have investigated the perfor-
mance of these attacks under different settings for the
main parameters.
We then studied the applicability of these attacks for
a speciﬁc application layer protocol, BasicAuth. For cer-
tain browsers and clients, the passwords were located at
a favourable point in the plaintext stream and we could
induce the password to be repeatedly encrypted under
fresh, random keys. We built a proof-of-concept imple-
mentation of the attack. It was difﬁcult to arrange for the
rate of generation of encryptions to be as high as desired
for a speedy attack. This was mainly due to the latency
associated with TLS connection establishment (even with
session resumption) rather than any fundamental barrier.
Good-to-excellent password recovery success rates can
be achieved using 224 – 228 ciphertexts in our attacks. We
also demonstrated that our single-byte attack for pass-
word recovery signiﬁcantly outperforms a naive password
recovery attack based on the ideas of [2]. We observed an
improvement over a guessing strategy even for low num-
bers (222 or 224) of ciphertexts. By contrast to these num-
bers, the preferred double-byte attack of [2] required on
the order of 234 encryptions to recover a 16-byte cookie,
though without incurring the time overheads arising from
TLS session resumption that our approach incurs.
Our research has led to the identiﬁcation of a number
of areas for further work:
• Our Bayesian approach can also be applied to the
situation where we model the plaintext as a word
from a language described as a Markov model with
memory. It would be interesting to investigate the
extent to which this approach can be applied to either
password recovery or more general analysis of, say,
typical HTTP trafﬁc.
• We have focussed on the use of the single-byte bi-
ases described in [2] and the double-byte biases of
Fluhrer and McGrew (and from our own extensive
computations for the ﬁrst 512 keystream positions).
Other biases in RC4 keystreams are known, for ex-
ample [14]. It is a challenge to integrate these in our
Bayesian framework, with the aim being to further
improve our attacks.
• We identiﬁed new double-byte biases early in the
RC4 keystream which deserve a theoretical explana-
tion.
• It would be an interesting challenge to develop al-
gorithms for constructing synthetic, site-speciﬁc dic-
tionaries along with a priori probability distribu-
USENIX Association  
24th USENIX Security Symposium  127
15
[9] FLORENCIO, D., AND HERLEY, C. A Large-scale Study of
Web Password Habits. In Proceedings of the 16th International
Conference on World Wide Web (New York, NY, USA, 2007),
WWW ’07, ACM, pp. 657–666.
[10] FLUHRER, S. R., AND MCGREW, D. Statistical analysis of the
alleged RC4 keystream generator. In FSE (2000), B. Schneier,
Ed., vol. 1978 of Lecture Notes in Computer Science, Springer,
pp. 19–30.
[11] FRANKS, J., HALLAM-BAKER, P., HOSTETLER, J., LAWRENCE,
S., LEACH, P., LUOTONEN, A., AND STEWART, L. HTTP
Authentication: Basic and Digest Access authentication. RFC
2617 (Informational), June 1999.
[12] GARMAN, C., PATERSON, K. G., AND VAN DER MERWE, T.
Attacks only get better: Password recovery attacks against RC4
in TLS. Full version of this paper. Available from http://www.
isg.rhul.ac.uk/tls/RC4mustdie.html.
[13] ISOBE, T., OHIGASHI, T., WATANABE, Y., AND MORII, M. Full
plaintext recovery attack on broadcast RC4. In Preproceedings of
FSE (2013).
[14] MANTIN, I. Predicting and distinguishing attacks on RC4
keystream generator. In EUROCRYPT (2005), R. Cramer, Ed.,
vol. 3494 of Lecture Notes in Computer Science, Springer, pp. 491–
506.
[15] MANTIN, I., AND SHAMIR, A. A practical attack on broadcast
RC4. In FSE (2001), M. Matsui, Ed., vol. 2355 of Lecture Notes
in Computer Science, Springer, pp. 152–164.
[16] OHIGASHI, T., ISOBE, T., WATANABE, Y., AND MORII, M.
How to recover any byte of plaintext on RC4. In Selected Areas in
Cryptography - SAC 2013 - 20th International Conference, Burn-
aby, BC, Canada, August 14-16, 2013, Revised Selected Papers
(2013), T. Lange, K. E. Lauter, and P. Lisonek, Eds., vol. 8282 of
Lecture Notes in Computer Science, Springer, pp. 155–173.
[17] SALOWEY, J., ZHOU, H., ERONEN, P., AND TSCHOFENIG,
H. Transport Layer Security (TLS) Session Resumption with-
out Server-Side State. RFC 5077 (Proposed Standard), Jan. 2008.
[18] SARKAR, S., SEN GUPTA, S., PAUL, G., AND MAITRA, S.
Proving TLS-attack related open biases of RC4. IACR Cryptology
ePrint Archive 2013 (2013), 502.
[19] SEN GUPTA, S., MAITRA, S., PAUL, G., AND SARKAR, S.
(Non-) random sequences from (non-) random permutations – anal-
ysis of RC4 stream cipher. Journal of Cryptology 27, 1 (2012),
67–108.
[20] WEIR, M., AGGARWAL, S., COLLINS, M. P., AND STERN,
H. Testing metrics for password creation policies by attacking
large sets of revealed passwords.
In Proceedings of the 17th
ACM Conference on Computer and Communications Security,
CCS 2010, Chicago, Illinois, USA, October 4-8, 2010 (2010),
E. Al-Shaer, A. D. Keromytis, and V. Shmatikov, Eds., ACM,
pp. 162–175.
[21] YAN, J., BLACKWELL, A., ANDERSON, R., AND GRANT, A.
Password Memorability and Security: Empirical Results. IEEE
Security and Privacy 2, 5 (Sept. 2004), 25–31.
[22] ZVIRAN, M., AND HAGA, W. J. Password Security: An Empiri-
cal Study. J. Manage. Inf. Syst. 15, 4 (Mar. 1999), 161–185.
tions. Existing work in this direction includes Marx’s
WordHound tool.7
• We identiﬁed several open questions in the discus-
sion of our simulation results, including the effect of
the choice of password data sets on success rates, and
the evaluation of different methods for recovering
the target password’s length.
Acknowledgements
We would like to thank Google, Dan Kaminsky at White
Ops and Ingo von Maurich at Ruhr Universit¨at Bochum
for their generous donation of computing resources. Dan
gave us free rein on a 512-core system for the 4800 core-
days necessary to perform our double-byte keystream
distribution estimates, while resources from Google and
Ruhr Universit¨at Bochum were used to conduct our attack
simulations. We would also like to thank Alexei Melnikov
for acting as our IMAP oracle.
Garman was funded by a generous grant from the
Mozilla Foundation and supported by the Ofﬁce of Naval
Research under contract N00014-14-1-0333; Paterson
was supported by an EPSRC Leadership Fellowship,
EP/H005455/1; van der Merwe was supported by the
EPSRC as part of the Centre for Doctoral Training in
Cyber Security at Royal Holloway, University of London.
References
[1] ADAMS, A., AND SASSE, M. A. Users are not the enemy. Com-
mun. ACM 42, 12 (Dec. 1999), 40–46.
[2] ALFARDAN, N. J., BERNSTEIN, D. J., PATERSON, K. G., PO-
ETTERING, B., AND SCHULDT, J. C. N. On the Security of RC4
in TLS. In Proceedings of the 22nd USENIX Conference on Secu-
rity (Berkeley, CA, USA, 2013), SEC’13, USENIX Association,
pp. 305–320.
[3] BERNERS-LEE, T., FIELDING, R., AND FRYSTYK, H. The Hy-
pertext Transfer Protocol HTTP/1.0. RFC 1945 (Informational),
May 1996.
[4] BONNEAU, J. The science of guessing: Analyzing an anonymized
corpus of 70 million passwords. In IEEE Symposium on Security
and Privacy, SP 2012, 21-23 May 2012, San Francisco, California,
USA (2012), IEEE Computer Society, pp. 538–552.
[5] BONNEAU, J., AND PREIBUSCH, S. The password thicket: Tech-
nical and market failures in human authentication on the web. In
9th Annual Workshop on the Economics of Information Security,
WEIS 2010, Harvard University, Cambridge, MA, USA, June 7 - 8
(2010).
[6] DIERKS, T., AND ALLEN, C. The TLS Protocol Version 1.0.
RFC 2246, Internet Engineering Task Force, Jan. 1999.
[7] DIERKS, T., AND RESCORLA, E. The Transport Layer Security
(TLS) Protocol Version 1.1. RFC 4346, Internet Engineering Task
Force, Apr. 2006.
[8] DIERKS, T., AND RESCORLA, E. The Transport Layer Security
(TLS) Protocol Version 1.2. RFC 5246, Internet Engineering Task
Force, Aug. 2008.
7https://bitbucket.org/mattinfosec/wordhound.
128  24th USENIX Security Symposium 
USENIX Association
16