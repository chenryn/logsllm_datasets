User: 请回答以下安全问题我应该在Rest API端点上使用CSRF保护吗？快速提示：尽管有一些重叠，但这不是具有自定义标头（且没有验证令牌）的CSRF保护的重复。该帖子讨论了如何在Rest端点上执行CSRF保护，而没有讨论是否确实有必要。事实上，我在这个网站上读到的许多CSRF/Rest问题都是关于通过CSRF令牌保护端点的，而没有实际讨论是否有必要。因此产生了这个问题。
Rest API端点是否需要CSRF保护？
我已经看到了很多关于保护REST端点免受CSRF攻击的讨论，但经过深思熟虑，我非常确信REST端点上的CSRF令牌不会提供任何额外保护。因此，在REST端点上启用CSRF保护只会给您的应用引入一些无用的代码，我认为应该跳过它。不过，我可能遗漏了一些东西，因此提出了这个问题。我认为，首先要记住为什么CSRF保护是必要的，以及它所保护的攻击向量：
为什么选择CSRF？
它实际上可以归结为浏览器通过发送cookie为任何请求自动提供登录凭据的能力。如果会话id存储在cookie中，浏览器将自动将其与返回原始网站的所有请求一起发送。这意味着攻击者实际上不必知道身份验证详细信息就可以作为受害者用户采取行动。相反，攻击者只需诱骗受害者浏览器发出请求，用于验证请求的凭据将免费提供。
输入REST API
Rest API端点与其他请求有一个非常重要的区别：它们是无状态的，不应该接受/使用来自cookie或会话的数据。因此，坚持标准的REST API自动免受此类攻击。即使浏览器发送了cookie，与cookie相关的任何凭据都将被完全忽略。对REST API调用的身份验证是以完全不同的方式完成的。最常见的解决方案是拥有某种身份验证密钥（OAuth Token或类似密钥），该密钥在头中的某个位置或可能在请求体本身中发送。
由于身份验证是特定于应用的，并且浏览器本身不知道身份验证令牌是什么，因此浏览器无法自动提供身份验证凭据，即使它被欺骗访问API端点也是如此。因此，无cookie的REST端点完全不受CSRF攻击的影响。
还是我错过了什么？

Assistant: 我最初的目标不是自我回答，但经过更多的阅读，我得出了一个我认为是全面的答案，这也解释了为什么有些人可能仍然对REST端点上的CSRF保护感兴趣。
没有cookie=没有CSRF
真的就这么简单。浏览器在发送所有请求的同时发送cookie。CSRF攻击依赖于这种行为。如果您不使用cookie，也不依赖cookie进行身份验证，那么CSRF攻击绝对没有空间，也没有理由进行CSRF保护。如果您有cookie，特别是如果您使用它们进行身份验证，那么您需要CSRF保护。如果你只想知道“我的API端点需要CSRF保护吗？”你可以停在这里，留下你的答案。否则，细节就是魔鬼。
h/t至paj28：虽然cookie是CSRF攻击的主要攻击向量，但如果使用HTTP/Basic身份验证，您也会受到攻击。更普遍地说，如果浏览器能够自动传递应用的登录凭据，那么CSRF很重要。根据我的经验，cookie是用于实现CSRF的最常见的技术，但也使用了一些其他身份验证方法，这些方法可能会导致同样的漏洞。
REST=无状态
如果你问某人“什么是REST”，你会得到各种各样的答案，讨论各种不同的属性。你可以看到这么多，因为有人问了关于堆栈溢出的问题：https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming
我一直依赖REST的一个特性是它是无状态的。应用本身当然有状态。如果您不能将数据存储在某个数据库中，那么您的应用将非常有限。然而，在这种情况下，无状态有一个非常具体和重要的含义：REST应用不跟踪客户端应用的状态。如果您正在使用会话，那么您（几乎可以肯定）正在跟踪客户端状态，并且您不是一个REST完整的应用。因此，使用通过cookie跟踪的会话（尤其是登录）的应用不是REST完整应用（IMO），当然很容易受到CSRF攻击，即使它看起来像REST应用。
我认为值得简要说明的是，客户端无状态状态对REST应用很重要的一个原因是中介缓存响应的能力也是REST范式中理想的一部分。只要应用正在跟踪客户端状态，就不可能进行缓存。
Rest≠无Cookie
出于这些原因，我最初认为完全兼容的REST应用永远不需要会话，永远不需要cookie，因此永远不需要CSRF安全性。然而，至少有一个用例可能更喜欢cookie：持久登录。
考虑一个典型的客户端（在本例中为浏览器，而非移动）web应用。您可以从登录开始，登录使用REST API验证用户凭据，作为回报，系统会提供一个令牌来授权未来的请求。对于单页应用，您可以将该令牌保存在内存中，但这样做将在用户关闭页面时有效地将其注销。因此，最好将状态保持在某个可以比单个浏览器会话持续更长时间的地方。本地存储是一种选择，但也容易受到XSS攻击：成功的XSS攻击可能导致攻击者获取您的登录令牌，并将其发送给攻击者以供其自行使用。
出于这个原因，我看到一些人建议使用cookie来存储登录令牌。使用cookie，您可以设置仅http标志，这将阻止应用在设置cookie后读取cookie。因此，在发生XSS攻击的情况下，攻击者仍然可以代表您进行调用，但他们不能同时使用授权令牌。这种cookie的使用并没有直接违反REST的无状态要求，因为服务器仍然没有跟踪客户端状态。它只是在cookie中查找身份验证凭据，而不是标头。
我之所以提到这一点，是因为它可能是将cookie与REST API一起使用的一个合理理由，尽管显然这取决于给定的应用来平衡各种安全性和可用性问题。我个人会尽量避免在RESTAPI中使用cookie，但无论如何都可能有使用它们的理由。无论哪种方式，总体答案都很简单：如果您使用cookie（或浏览器可以自动进行的其他身份验证方法），那么您需要CSRF保护。如果你不使用cookie，那么你就不用了。