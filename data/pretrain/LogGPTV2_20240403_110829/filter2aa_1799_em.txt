### File Attributes and Operations

**File Attributes:**
- **File ID:** 0000000000000000000c000000617912
- **Parent File ID:** 00000000000000000018000000617ab6
- **Source Info:** 0x00000000: *NONE*
- **Security ID:** 0
- **Major Version:** 3
- **Minor Version:** 0
- **Record Length:** 96
- **File Attributes:** 0x00000020: Archive

**Operations:**

1. **Initial Creation and Data Extension:**
   - **USN:** 2816
   - **File Name:** Usn.txt
   - **File Name Length:** 14
   - **Reason:** 0x80000102: Data extend | File create | Close
   - **Time Stamp:** 12/8/2018 15:22:05

2. **Rename (Old Name):**
   - **USN:** 2896
   - **File Name:** Usn.txt
   - **File Name Length:** 14
   - **Reason:** 0x00001000: Rename: old name
   - **Time Stamp:** 12/8/2018 15:22:15

3. **Rename (New Name):**
   - **USN:** 2976
   - **File Name:** UsnNew.txt
   - **File Name Length:** 20
   - **Reason:** 0x00002000: Rename: new name
   - **Time Stamp:** 12/8/2018 15:22:15

4. **Close (New Name):**
   - **USN:** 3056
   - **File Name:** UsnNew.txt
   - **File Name Length:** 20
   - **Reason:** 0x80002000: Rename: new name | Close
   - **Time Stamp:** 12/8/2018 15:22:15

### Change Journal

The entries reflect the individual modification operations involved in the command-line operations. If the change journal is not enabled on a volume (which often occurs on non-system volumes where no applications have requested file change notification or USN Journal creation), you can create it with the following command:

```sh
d:\ >fsutil usn createJournal d: m=10485760 a=2097152
```

In this example, a 10-MB journal is requested. The journal is sparse, meaning it never overflows. When the on-disk size exceeds the maximum defined for the file, NTFS begins zeroing the file data that precedes the window of change information, as shown in Figure 11-49. To prevent constant resizing when an application continuously exceeds the journal's size, NTFS shrinks the journal only when its size is twice the application-defined value over the maximum configured size.

### Indexing in NTFS

In NTFS, a file directory is an index of file names organized as a B-tree. This structure minimizes the number of disk accesses needed to find a particular file, especially for large directories.

#### Directory Structure

- **Index Root Attribute:** Contains the first level of the B-tree (root subdirectories) and points to index buffers containing the next level.
- **Index Buffers:** Fixed-size (4 KB) buffers that store and organize file names for large directories.
- **Index Allocation Attribute:** Maps the VCNs of the index buffer runs to the LCNs indicating where the index buffers reside on the disk.
- **Bitmap Attribute:** Tracks which VCNs in the index buffers are in use and which are free.

Each entry in an index also contains the record number in the MFT where the file is described, along with time stamp and file size information. This duplication of information from the file’s MFT record allows for faster directory browsing without opening every file.

### B-Tree Data Structure

B-trees are ideal for organizing sorted data stored on a disk because they minimize the number of disk accesses needed to find an entry. In the MFT, a directory’s index root attribute contains several file names that act as indexes into the second level of the B-tree. Each file name in the index root attribute has an optional pointer associated with it that points to an index buffer.

#### Benefits of B-Trees

- **Fast Directory Lookups:** File names are stored in a sorted order.
- **Sorted Names:** NTFS returns already-sorted names when higher-level software enumerates files in a directory.
- **Scalability:** B-trees grow wide rather than deep, maintaining fast lookup times even as directories grow.

### Object IDs

NTFS stores the object ID assigned to a file or directory in the OBJECT_ID attribute of its MFT record. It also maintains the correspondence between object IDs and their file record numbers in the O index of the \Extend\ObjId metadata file. This feature allows applications to open a file or directory using its object ID, as demonstrated in Figure 11-51.

#### Correspondence of ObjId Metadata File and OBJECT_ID Attributes

- **ID Passed:** When an application opens a file using its object ID.
- **$O Index:** Collates entries by object ID (GUID).
- **MFT Entry Number:** Corresponds to the FILE_OBJECTID_BUFFER.

This structure enables quick location of a file based on its ID, facilitating efficient file management and access.