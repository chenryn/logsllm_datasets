File attributes   : 0x00000020: Archive
File ID
: 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info
: 0x00000000: *NONE*
Security ID
: 0
Major version     : 3
Minor version     : 0
Record length     : 96
Usn
: 2816
File name
: Usn.txt
File name length  : 14
Reason
: 0x80000102: Data extend | File create | Close
Time stamp
: 12/8/2018 15:22:05
File attributes   : 0x00000020: Archive
File ID
: 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info
: 0x00000000: *NONE*
Security ID
: 0
Major version     : 3
Minor version     : 0
Record length     : 96
Usn
: 2896
File name
: Usn.txt
File name length  : 14
Reason
: 0x00001000: Rename: old name
Time stamp
: 12/8/2018 15:22:15
File attributes   : 0x00000020: Archive
File ID
: 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info
: 0x00000000: *NONE*
Security ID
: 0
678
CHAPTER 11
Caching and file systems
Major version     : 3 
Minor version     : 0 
Record length     : 96 
Usn
: 2976 
File name
: UsnNew.txt 
File name length  : 20 
Reason
: 0x00002000: Rename: new name 
Time stamp
: 12/8/2018 15:22:15 
File attributes   : 0x00000020: Archive 
File ID
: 0000000000000000000c000000617912 
Parent file ID    : 00000000000000000018000000617ab6 
Source info
: 0x00000000: *NONE* 
Security ID
: 0 
Major version     : 3 
Minor version     : 0 
Record length     : 96 
Usn
: 3056 
File name
: UsnNew.txt 
File name length  : 20 
Reason
: 0x80002000: Rename: new name | Close 
Time stamp
: 12/8/2018 15:22:15 
File attributes   : 0x00000020: Archive 
File ID
: 0000000000000000000c000000617912 
Parent file ID    : 00000000000000000018000000617ab6 
Source info
: 0x00000000: *NONE* 
Security ID
: 0 
Major version     : 3 
Minor version     : 0 
Record length     : 96
The entries reflect the individual modification operations involved in the operations underly-
ing the command-line operations. If the change journal isn’t enabled on a volume (this happens 
especially on non-system volumes where no applications have requested file change notification 
or the USN Journal creation), you can easily create it with the following command (in the example 
a 10-MB journal has been requested):
d:\ >fsutil usn createJournal d: m=10485760 a=2097152
The journal is sparse so that it never overflows; when the journal’s on-disk size exceeds the maxi-
mum defined for the file, NTFS simply begins zeroing the file data that precedes the window of change 
information having a size equal to the maximum journal size, as shown in Figure 11-49. To prevent con-
stant resizing when an application is continuously exceeding the journal’s size, NTFS shrinks the journal 
only when its size is twice an application-defined value over the maximum configured size.
Major version     : 3
Minor version     : 0
Record length     : 96
Usn
: 2976
File name
: UsnNew.txt
File name length  : 20
Reason
: 0x00002000: Rename: new name
Time stamp
: 12/8/2018 15:22:15
File attributes   : 0x00000020: Archive
File ID
: 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info
: 0x00000000: *NONE*
Security ID
: 0
Major version     : 3
Minor version     : 0
Record length     : 96
Usn
: 3056
File name
: UsnNew.txt
File name length  : 20
Reason
: 0x80002000: Rename: new name | Close
Time stamp
: 12/8/2018 15:22:15
File attributes   : 0x00000020: Archive
File ID
: 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info
: 0x00000000: *NONE*
Security ID
: 0
Major version     : 3
Minor version     : 0
Record length     : 96
The entries reflect the individual modification operations involved in the operations underly-
ing the command-line operations. If the change journal isn’t enabled on a volume (this happens 
especially on non-system volumes where no applications have requested file change notification 
or the USN Journal creation), you can easily create it with the following command (in the example 
a 10-MB journal has been requested):
d:\ >fsutil usn createJournal d: m=10485760 a=2097152
CHAPTER 11
Caching and file systems
679
File name
Type of change
Time of change
File MFT entry number
…
$J alternate data stream
Virtual size of $UsnJrnl:$J
Physical size of $UsnJrnl:$J
Change Entry
Empty
…
FIGURE 11-49 Change journal (UsnJrnl) space allocation.
Indexing
In NTFS, a file directory is simply an index of file names—that is, a collection of file names (along with their 
file record numbers) organized as a B-tree. To create a directory, NTFS indexes the file name attributes of 
the files in the directory. The MFT record for the root directory of a volume is shown in Figure 11-50.
0
1
2
3
1355
1356
1357
1358
file0
file11
file12
file13 file14
file1
file3
File 5
8
9
10
11
2033
2034
2035
2036
VCN
LCN
VCN
LCN
4
5
6
7
1588
1589
1590
1591
VCN
LCN
Standard
information
File name
Index root
Index
allocation
Bitmap
Index of files
file4    file10   file15
"\"
VCN-to-LCN
mappings
file6
file8
file9
FIGURE 11-50 File name index for a volume’s root directory.
680
CHAPTER 11
Caching and file systems
Conceptually, an MFT entry for a directory contains in its index root attribute a sorted list of the 
files in the directory. For large directories, however, the file names are actually stored in 4 KB, fixed-
size index buffers (which are the nonresident values of the index allocation attribute) that contain and 
organize the file names. Index buffers implement a B-tree data structure, which minimizes the number 
of disk accesses needed to find a particular file, especially for large directories. The index root attribute 
contains the first level of the B-tree (root subdirectories) and points to index buffers containing the 
next level (more subdirectories, perhaps, or files).
Figure 11-50 shows only file names in the index root attribute and the index buffers (file6, for 
example), but each entry in an index also contains the record number in the MFT where the file is 
described and time stamp and file size information for the file. NTFS duplicates the time stamps and 
file size information from the file’s MFT record. This technique, which is used by FAT and NTFS, requires 
updated information to be written in two places. Even so, it’s a significant speed optimization for direc-
tory browsing because it enables the file system to display each file’s time stamps and size without 
opening every file in the directory.
The index allocation attribute maps the VCNs of the index buffer runs to the LCNs that indicate 
where the index buffers reside on the disk, and the bitmap attribute keeps track of which VCNs in the 
index buffers are in use and which are free. Figure 11-50 shows one file entry per VCN (that is, per clus-
ter), but file name entries are actually packed into each cluster. Each 4 KB index buffer will typically con-
tain about 20 to 30 file name entries (depending on the lengths of the file names within the directory).
The B-tree data structure is a type of balanced tree that is ideal for organizing sorted data stored on 
a disk because it minimizes the number of disk accesses needed to find an entry. In the MFT, a direc-
tory’s index root attribute contains several file names that act as indexes into the second level of the 
B-tree. Each file name in the index root attribute has an optional pointer associated with it that points
to an index buffer. The index buffer points to containing file names with lexicographic values less than
its own. In Figure 11-50, for example, file4 is a first-level entry in the B-tree. It points to an index buffer
containing file names that are (lexicographically) less than itself—the file names file0, file1, and file3.
Note that the names file1, file3, and so on that are used in this example are not literal file names but
names intended to show the relative placement of files that are lexicographically ordered according to
the displayed sequence.
Storing the file names in B-trees provides several benefits. Directory lookups are fast because the 
file names are stored in a sorted order. And when higher-level software enumerates the files in a direc-
tory, NTFS returns already-sorted names. Finally, because B-trees tend to grow wide rather than deep, 
NTFS’s fast lookup times don’t degrade as directories grow.
NTFS also provides general support for indexing data besides file names, and several NTFS fea-
tures—including object IDs, quota tracking, and consolidated security—use indexing to manage 
internal data.
The B-tree indexes are a generic capability of NTFS and are used for organizing security descriptors, 
security IDs, object IDs, disk quota records, and reparse points. Directories are referred to as file name 
indexes whereas other types of indexes are known as view indexes.
CHAPTER 11
Caching and file systems
681
Object IDs
In addition to storing the object ID assigned to a file or directory in the OBJECT_ID attribute of its 
MFT record, NTFS also keeps the correspondence between object IDs and their file record numbers in 
the O index of the \Extend\ObjId metadata file. The index collates entries by object ID (which is a 
GUID), making it easy for NTFS to quickly locate a file based on its ID. This feature allows applications, 
using the NtCreateFile native API with the FILE_OPEN_BY_FILE_ID flag, to open a file or directory using 
its object ID. Figure 11-51 demonstrates the correspondence of the ObjId metadata file and OBJECT_
ID attributes in MFT records.
ID passed when an
application opens a
file using its object ID
$O index
$ObjId metadata file MFT entry
MFT
Object ID 0
MFT entry number
FILE_OBJECTID_BUFFER
MFT entry number
FILE_OBJECTID_BUFFER
Object ID 1
Object ID 2
MFT entry number
FILE_OBJECTID_BUFFER
Standard
information
$O index