    /*
     * Twofish Expand Key Function
     * 
     * Description:
     *
     * @param   s
     * @param   len
     * @usage
     * {@code}
     */
    key_t* expand_key(uint8_t *s, uint32_t len);
    /*
     * Twofish Galois Field Multiplication Function
     * 
     * Description:
     *
     * @param   x
     * @param   y
     * @param   m
     * @usage
     * {@code}
     */
    uint8_t gf(uint8_t x, uint8_t y, uint16_t m);
    /*
     * Twofish Generate Subkeys Function
     * 
     * Description:
     *
     * @param   tf_key
     * @usage
     * {@code}
     */
    subkey_t* Twofish_generate_subkey(key_t* tf_key);
    /*
     * Twofish h Function
     * 
     * Description:
     *
     * @param   x[]
     * @param   y[]
     * @param   s
     * @param   stage
     * @usage
     * {@code}
     */
    void Twofish_h(uint8_t x[],  uint8_t y[], uint8_t s[][4], int stage);
    /*
     * Twofish MDS Multiply Function
     * 
     * Description:
     *
     * @param   y[]
     * @param   out[]
     * @usage
     * {@code}
     */
    void Twofish_mds_mul(uint8_t y[],  uint8_t out[]);
    /*
     * Twofish Genrate Extended K Keys Function
     * 
     * Description:
     *
     * @param   tf_twofish
     * @param   tf_subkey
     * @param   p
     * @param   k
     * @usage
     * {@code}
     */
    twofish_t* Twofish_generate_ext_k_keys(twofish_t* tf_twofish, subkey_t *tf_subkey,uint32_t p, uint8_t k);
    /*
     * Twofish Genrate Extended S Keys Function
     * 
     * Description:
     *
     * @param   tf_twofish
     * @param   tf_subkey
     * @param   k
     * @usage
     * {@code}
     */
    twofish_t* Twofish_generate_ext_s_keys(twofish_t* tf_twofish, subkey_t *tf_subkey, uint8_t k);
    /*
     * Twofish f Function
     * 
     * Description:
     *
     * @param   tf_twofish
     * @param   r
     * @param   r0, r1
     * @param   f0, f1
     * @usage
     * {@code}
     */
    void Twofish_f(twofish_t* tf_twofish, uint8_t r,uint32_t r0, uint32_t r1, uint32_t* f0, uint32_t* f1);
    /*
     * Twofish g Function
     * 
     * Description:
     *
     * @param   tf_twofish
     * @param   x
     * @usage
     * {@code}
     */
    uint32_t Twofish_g(twofish_t* tf_twofish, uint32_t x);
    twofish_t* Twofish_setup(uint8_t *s, uint32_t len)
    {
        /* Expand the key if necessary. */
        key_t* tf_key = expand_key(s, len/8);
        /* Generate subkeys: s and k */
        subkey_t *tf_subkey = Twofish_generate_subkey(tf_key);
        /* Generate 40 K keys */
        twofish_t* tf_twofish = (twofish_t*)malloc(sizeof(twofish_t));
        tf_twofish = Twofish_generate_ext_k_keys(tf_twofish,tf_subkey,0x01010101,(tf_key->len/8));
        /* Generate 4x256 S keys */
        tf_twofish = Twofish_generate_ext_s_keys(tf_twofish,tf_subkey,(tf_key->len/8));
        /* Free memory */
        release(tf_key->k, tf_key, tf_subkey);
        return tf_twofish;
    }
    void Twofish_encryt(twofish_t* tf_twofish, uint8_t *data, uint8_t *cypher)
    {
        uint32_t r0, r1, r2, r3, f0, f1, c2,c3;
        /* Input Whitenening */
        r0 = tf_twofish->k[0]^pack(data);
        r1 = tf_twofish->k[1]^pack(data+4);
        r2 = tf_twofish->k[2]^pack(data+8);
        r3 = tf_twofish->k[3]^pack(data+12);
        /* The black box */
        for (int i=0; ik[4]^r2;
        r1 = tf_twofish->k[5]^r3;
        r2 = tf_twofish->k[6]^c2;
        r3 = tf_twofish->k[7]^c3;
        for (int i=0;ik[4]^pack(cypher);
        r1 = tf_twofish->k[5]^pack(cypher+4);
        r2 = tf_twofish->k[6]^pack(cypher+8);
        r3 = tf_twofish->k[7]^pack(cypher+12);
        /* The black box */
        for (int i=15; i >= 0;--i)
        {
            Twofish_f(tf_twofish, i, r0, r1, &f0, &f1);
            c2 = (rol(r2,1)^f0);
            c3 = ror((f1^r3),1);
            /* swap */
            r2 = r0;
            r3 = r1;
            r0 = c2;
            r1 = c3;