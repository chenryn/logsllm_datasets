# The Lazarus Effect: Healing Compromised Devices in the Internet of Small Things

## Authors
- Manuel Huber, Fraunhofer AISEC, Garching near Munich, Germany (PI:EMAIL)
- Stefan Hristozov, Fraunhofer AISEC, Garching near Munich, Germany (PI:EMAIL)
- Simon Ott, Fraunhofer AISEC, Garching near Munich, Germany (PI:EMAIL)
- Vasil Sarafov, Fraunhofer AISEC, Garching near Munich, Germany (PI:EMAIL)
- Marcus Peinado, Microsoft Research, Redmond, United States (PI:EMAIL)

## Abstract
In an era where billions of IoT devices are being deployed and increasingly relied upon, ensuring their availability and recoverability in case of a compromise is paramount. The large and rapidly growing number of deployed IoT devices makes manual recovery impractical, especially if the devices are dispersed over a wide area. Therefore, there is a need for a reliable and scalable remote recovery mechanism that can function even after attackers have taken full control over the devices, potentially misusing them or rendering them useless.

To address this challenge, we present Lazarus, a system that enables the remote recovery of compromised IoT devices. With Lazarus, an IoT administrator can remotely control the code running on IoT devices unconditionally and within a guaranteed time bound, making recovery possible even in cases of severe corruption of the devices' software stack. We impose only minimal hardware requirements, making Lazarus applicable even for low-end, constrained off-the-shelf IoT devices. We isolate Lazarus's minimal recovery trusted computing base (TCB) from untrusted software both in time and by using a trusted execution environment (TEE). This temporal isolation prevents secrets from being leaked through side-channels to untrusted software. Inside the TEE, we place minimal functionality that constrains untrusted software at runtime.

We implement Lazarus on an ARM Cortex-M33-based microcontroller in a full setup with an IoT hub, device provisioning, and secure update functionality. Our prototype can recover compromised embedded operating systems and bare-metal applications and prevent attackers from bricking devices, for example, through flash wear out. We demonstrate this with FreeRTOS, which requires no modifications but only a single additional task. Our evaluation shows negligible runtime performance impact and moderate memory requirements.

## Keywords
- Trusted computing
- Cyber resilience
- Recovery
- Availability

## ACM Reference Format
Manuel Huber, Stefan Hristozov, Simon Ott, Vasil Sarafov, and Marcus Peinado. 2020. The Lazarus Effect: Healing Compromised Devices in the Internet of Small Things. In Proceedings of the 15th ACM Asia Conference on Computer and Communications Security (ASIA CCS '20), October 5â€“9, 2020, Taipei, Taiwan. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3320269.3384723

## 1. Introduction
The Internet of Things (IoT) is becoming increasingly pervasive, driven by cost savings and short product development cycles. A vast number of IoT business use cases have emerged, making IoT a disruptive technology. Examples include home automation, farming, sensor networks, Car2X, industrial IoT, and smart devices such as tools, traffic lights, and vending machines. These devices are typically connected via (wireless) networks to a hub, a back-end server located in the cloud, or managed by an enterprise. The growing importance of IoT deployments for public safety and business processes makes them an attractive target for attackers, as demonstrated by numerous attacks like the Mirai and Hajime botnets.

A critical property of the IoT domain is that many devices with identical software stacks and configurations can be found in the field. This makes identified vulnerabilities or misconfigurations highly scalable, allowing attackers to potentially compromise a large number of devices. Small and cheap devices, often poorly secured, are particularly vulnerable. Attackers can make these devices refuse communication and updates from the hub or permanently damage them, necessitating manual recovery by replacing or resetting them with clean software. Given the large number of geographically dispersed devices, manual recovery becomes impractical.

Several cyber-resilient IoT architectures have been proposed to enable remote recovery of infected IoT devices within a time bound, regardless of the level of compromise. These architectures employ a minimal, early-boot recovery TCB and a reset trigger that preempts compromised software. The recovery TCB ensures that only software authorized by the hub runs on the device. If no such software is present, the recovery TCB downloads the software from the hub and replaces the existing outdated or compromised stack. The reset trigger ensures that a reset into the recovery TCB will eventually happen, even if the software actively resists. Both the recovery TCB and reset trigger are isolated from untrusted software at runtime, preventing malware from modifying the recovery TCB and interfering with the reset trigger.

However, existing cyber-resilient IoT architectures primarily target higher-end IoT devices and do not address several critical real-world problems for low-cost microcontrollers. These include:
1. **Hardware Requirements**: Current designs require hardware that does not exist or would incur additional costs on weaker, low-cost Commercial Off-The-Shelf (COTS) devices.
2. **Preventing Attackers from Disabling Devices**: Existing work neglects attacks where the adversary tries to make a device unavailable, such as entering low-power states, wearing out flash memory, or disabling networking hardware.
3. **Updates of the Recovery TCB**: After deployment, vulnerabilities in the recovery TCB may be discovered, and cryptographic requirements may change. It is essential to patch these vulnerabilities before they can be exploited.

This paper presents Lazarus, a cyber-resilient IoT architecture that addresses these three problems. Lazarus targets low-cost COTS MCUs and leverages the recent addition of a general-purpose TEE to low-end ARM MCUs in the ARMv8-M architecture. We implement storage write protection latches and the Authenticated Watchdog Timer (AWDT) in software running in the TEE, enabling the AWDT to be realized on existing COTS devices without requiring trusted peripherals. Our design prevents attackers from making devices permanently unavailable by interposing between untrusted software and critical peripherals. We also propose DICE++, an extension to DICE, which enables updates of the recovery TCB without loss of device identity.

We demonstrate the effectiveness of Lazarus on low-end devices by implementing a prototype on an ARM Cortex-M33-based MCU. We leverage the isolation capabilities of TrustZone-M to isolate the recovery TCB from untrusted software and build an AWDT without requiring additional hardware. Our contributions include:
- Designing Lazarus, a resilient IoT architecture for off-the-shelf IoT devices that protects against attackers aiming to render devices useless.
- Designing DICE++ to enable updates of the recovery TCB without losing device identity.
- Implementing a prototype on a recent ARM Cortex-M33-based MCU, including a full setup with an IoT hub, device provisioning, and update functionality.
- Demonstrating how to protect an embedded OS, FreeRTOS, with our prototype, requiring only a single supplementary task.
- Providing a security discussion and evaluating the runtime and boot time performance impact, as well as memory requirements, showing the practicability of Lazarus.

## 2. Background
### 2.1 Latches
Latches are used to protect critical code and data from being overwritten or read out by untrusted software. Conceptually, a latch is a state machine with two states: open and locked. A reset puts the latch into the open state, and software can put the latch into the locked state. The only action or event that can return the latch to the open state is a reset. A latch has an associated security function that allows some action (e.g., writing to certain flash regions) if and only if the latch is in the open state.

### 2.2 DICE
DICE is an industry standard designed to enable attestation on low-end devices with minimal hardware support. DICE has been adopted by major MCU manufacturers and cloud providers. A DICE device has a unique secret, the Unique Device Secret (UDS), protected by a latch. After a reset, DICE measures the first mutable software component and uses a one-way function to derive a symmetric key, the Compound Device Identifier (CDI), from this measurement and the UDS. The UDS is then made inaccessible until the next reset, and the CDI is disclosed to the software. This provides the software with an identity unique to both the software and the device, forming the foundation for DICE attestation.

### 2.3 MCU Model
Microcontroller units (MCUs) typically combine one or two low-end microprocessor cores with moderate amounts of RAM and flash memory, along with simple devices such as watchdog timers and security features like DICE. With the introduction of ARMv8-M and TrustZone for Cortex-M, TEEs are becoming prevalent even in the low-end MCU market. Our model assumes an MCU with two privilege levels (privileged and unprivileged) and supports DICE and a TEE. The assumed DICE support is not critical because Lazarus can implement DICE in software.