# Unlock trials
# Failed % Survived participants % Successful unlock trials
Original
1-Point
2-Point
15
13
16
873
730
965
1
1
1
93.3%
92.3%
93.8%
99.9%
99.9%
99.9%
Authentication time
μ
2.16
2.55
2.54
σ
2.53
3.50
4.08
σ
# Attempt
μ
1.07
1.18
1.11
0.34
0.52
0.40
their pattern in all unlock trials made (each participant would
have tried different number of times to unlock his or her phone
depending on their daily usage behaviors) during the 24 hour
period. If a participant failed to unlock his or her phone screen
within 5 attempts during the 24 hour period, we marked it as
a “failed” trial, and stopped the application.
As Table XI shows,
the survival rates for all policies
were high, ranging between 92.3% and 93.8%. For each
policy, only one participant failed to unlock his or her phone
within 5 trials. As with our recall success rate results (see
Section IV-C), policy Original did not show statistically
signiﬁcant superiority in the survival rate against 1-Point
and 2-Point. In fact, 2-Point showed a higher survival
rate.
For each policy, we also computed the percentage of
successful unlock trials (entered a correct pattern within 5
attempts) across all participants (note, each participant tried
unlocking his or her phone different number of times). Those
successful unlock rates were equally very high at 99.9%
across all policies. Again, there was no statistically signiﬁcant
difference between the three policies (all p = 1.0, corrected
FET).
D. Authentication time and the number of attempts made
As shown in Table XI, in contrast to the result of the
large-scale online study (see Table V), Original policy
(2.16 seconds) outperformed 1-Point (2.55 seconds) and
2-Point (2.54 seconds) with a statistically signiﬁcant differ-
ence in authentication time (all p  0.6,
corrected unpaired MW U test).
VII. DISCUSSION
We discuss our ﬁndings with respect to the hypotheses we
set up in Section III.
A. Security improvements
The ﬁrst hypothesis states that “the security of SysPal pat-
terns strengthens with the increase in the number of mandated
points.” As shown in Table IX and X, however, increasing the
number of mandated points from one to three did not improve
the security of SysPal patterns. We did, however, demonstrate
the superiority of all SysPal policies over Original policy
in both the guessing entropy estimates and the percentage of
patterns cracked by the 3-gram Markov model.
Unlike our expectations, policies 1-Point and 2-Point
(lower
showed a lower percentage of cracked patterns
by 4.14% and 4.75%,
respectively) compared to policy
3-Point. Those differences, however, were not statistically
signiﬁcant. Hence, based on our security analysis results, we
cannot accept the ﬁrst hypothesis.
350
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:42 UTC from IEEE Xplore.  Restrictions apply. 
Original policy in the third-test recall success rates (70.09–
73.68% vs. 72.40%). Our lab study under real-life unlock
scenarios also showed that there is no statistically signiﬁcant
difference in memorability between those policies.
In terms of security (see Section V), all SysPal policies
signiﬁcantly outperformed the Original pattern policy in
both the partial guessing entropy estimates (6.95–7.54 vs.
5.04 when α = 0.1), and percentage of cracked patterns
(9.36%–14.11% vs. 32.55%). Hence, our results accept the
third hypothesis.
to the online study results (see Table V,
In contrast
VI and VII),
the lab study results showed superiority of
Original over 1-Point and 2-Point with respect to
authentication time, number of authentication attempts, and
setup time (see Table XI and XII). Those results were some-
what expected though, as most of the participants were already
familiar with the current Android policy. The SysPal policies,
on the other hand, are new policies that the participants had
to learn and try for the ﬁrst time. We believe the usability of
the SysPal policies can improve over time as people become
more familiar with SysPal.
Based on our analysis, SysPal policies can potentially
replace the current Android policy without compromising too
much usability. In fact, SysPal
is highly compatible with
the existing Android lock scheme, and only requires small
software level upgrade to fully support
it. However, our
recommendation is to use 1-Point or 2-Point (that were
more secure than 3-Point) to have extra robustness against
guessing attacks.
D. Usability of random patterns
Random patterns obviously had the highest partial guessing
entropy estimates and the lowest percentage of cracked pat-
terns (0%). However, as expected, the third-test recall success
rate was signiﬁcantly lower (at 50.60%) than all other policies.
This demonstrates a clear memorability limitation in adopting
purely random patterns. To the best of our knowledge, we are
the ﬁrst group to analyze the usability of random patterns.
E. Implications on graphical passwords
Previous studies [22, 24, 30] have shown that the actual
password spaces of user-chosen graphical password schemes
are much smaller than their theoretical password spaces.
Just like textual passwords, people choose easy-to-remember
graphical passwords that are vulnerable against guessing at-
tacks. However, unlike textual passwords, complexity policies
have not yet been implemented nor thoroughly evaluated in
the context of graphical passwords.
The SysPal policies were designed speciﬁcally to improve
the security of graphical patterns by artiﬁcially adding and
mandating some randomness to the pattern selection process.
Our evaluation results indicate that such policies can signiﬁ-
cantly enhance the security of patterns without compromising
too much memorability. We speculatively generalize those
ﬁndings, and indicate that such policies may be effective
in other types of graphical password schemes as well. For
(a) 2–3–6–9
(b) 1–2–3–6–9
Fig. 10: Most frequently cracked patterns in 3-Point.
The different characteristics of 2-Point and 3-Point
patterns provide some possible explanations about the weak-
nesses found in 3-Point patterns. As shown in Table VIII,
the mean distance between mandated points (2.286) was less
than the mean distance between normal points (2.720) in
3-Point, while the mean distance between mandated points
(2.906) was greater than the mean distance between normal
points (2.696) in 2-Point. This indicates that when users
are given more than two mandated points, they may have
a tendency to directly join the mandated points together
– possibly because the chance of creating a pattern with
length 4 or longer, by simply connecting three mandated
points directly, is quite high (which is impossible when there
are just two mandated points). This could have encouraged
the 3-Point participants to merely connect three mandated
points directly to create a pattern that conforms to the pattern
length requirement. We surmise that such tendency may have
introduced some pattern selection bias, and weakened the
security of 3-Point patterns. Figure 10 demonstrates two
most frequently cracked patterns for 3-Point (each being
cracked 5 times).
B. Recall success rate and memorability effects
The second hypothesis states that “the memorability of
SysPal decreases with the increase in the number of mandated
points.” As shown in Table III and IV, however, the effects of
increasing the number of mandated points is not clear. Both the
recall success rate results in Section IV-C and memorability
results in Section VI-C did not show statistically signiﬁcant
difference between all SysPal policies. Hence, we do not have
sufﬁcient evidence to accept the second hypothesis. Intrigu-
ingly, all SysPal policies did not show statistically signiﬁcant
inferiority in recall success rate and memorability against the
Original policy. Overall, our results show that the SysPal
patterns have the potential to be just as memorable as the
Original patterns.
C. Replacing the original Android policy
The third hypothesis states that “a SysPal policy that shows
no statistically signiﬁcant difference in memorability against
the original Android patterns has better security than those
original patterns.” As shown in Section IV, none of the SysPal
policies showed statistically signiﬁcant inferiority against the
351
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:42 UTC from IEEE Xplore.  Restrictions apply. 
instance, with the picture gesture-based authentication sys-
tem [30], a gesture, randomly selected from the three “tap,”
“line,” and “circle” gestures, can be mandated to help users
deviate from their normal gesture selection behaviors, and
choose stronger passwords.
As part of future work, we plan to generalize SysPal poli-
cies, apply the concepts to other types of graphical password
schemes, and evaluate their effectiveness.
VIII. RELATED WORK
Graphical passwords have been studied intensively in
academia [7] but
they have not been so popular in real-
world systems. In 2008, however, a graphical pattern-based
password scheme (modiﬁed from Pass-Go [23]) was deployed
on Android devices as a screen unlock mechanism. It quickly
became the most popularly used screen lock mechanism on
Android [25].
However, Android patterns are vulnerable to smudge at-
tacks [2, 5, 9], accelerometer-based side channel attacks [6],
shoulder surﬁng attacks [26, 29], and guessing attacks [4,
22, 24]. Uellenbeck et al. [24] conducted a large-scale study,
analyzing common (biased) user pattern selection behaviors
that could weaken pattern security. For example, the majority
of the participants used the upper leftmost point as the starting
point. Andriotis et al. [2] also identiﬁed such biased behaviors
through an online survey. Song et al. [22] conﬁrmed those
ﬁndings through the analysis of real-world patterns collected
through an Android application. Our research was motivated
by the practical challenge of changing users’ such biased
pattern selection behaviors.
To improve the pattern security, Andriotis et al. [1] proposed
the use of a pattern security meter based on features such
as pattern length, overlapping points, and knight moves, and
showed that 23.3% of the participants changed their initially
selected pattern when their meter was present. Song et al. [22]
also analyzed the effects of a pattern strength meter by com-
paring two independent user groups, one group with a meter
in place, and another group without a meter in place. Their
guessing entropy results showed that their pattern strength
meter is indeed effective in improving the pattern security
against guessing attacks. However, even with the meter being
present, they still identiﬁed biased pattern selection behaviors.
Aviv et al. [4] suggested the use of a bigger grid (4 × 4)
layout. Again, their bigger grid layout did not really affect
users’ pattern selection behaviors. Even when the 4 × 4 grid
was used, 19% of users’ patterns were cracked by guessing
attacks.
Being mindful of such limitations, SysPal was designed
to help users think and behave differently while selecting a
pattern by randomly assigning a few points. It was also our
goal to design very practical Android security policies that can
signiﬁcantly enhance pattern security with just small compro-
mise in usability. In any given system, this is a challenging
usable security goal to achieve.
To strengthen the security of textual passwords, the effects
of password composition policies (e.g., restricting number of
digits, lowercase, uppercase, and symbols) have been inten-
sively studied [11, 16, 18, 20]. User persuasion techniques for
graphical passwords [10, 21] and textual passwords [12, 15]
were introduced to help users move away from their normal
password selection behaviors. Chiasson et al. [10] proposed
a persuasive cued click-point technique that forces users to
choose points from a series of randomly chosen areas in
a given picture. Siadati et al. [21] proposed a persuasive
technique to suggest a random starting point that a user can
optionally use. In contrast, SysPal policies mandate the use of
given random points at any position. Their memorability eval-
uation was conducted with a small number of students in a lab
environment, experimenting with one short recall interval of 20
minutes. They used a web user interface rather than conducting
the study on the actual Android screen lock user interface,
which could have affected participants’ behavior in selecting
and using patterns, and the security and usability results. In
contrast, to achieve strong ecological validity, we developed an
actual Android screen lock app (with SysPal policies) that the
participants installed on their own smartphones, and recorded
and studied the participants’ real-life unlock behaviors for a
day. We also studied several different policies by varying the
number of mandated points to generalize our observations, and
ﬁnd an optimal SysPal policy.
Such persuasive techniques and SysPal are designed based
on a common goal to persuade users to move away from their
normal selection behaviors, and introduce more randomness
as a result. Nevertheless, SysPal is a new, and fully evaluated
Android pattern selection policy that mandates the use of a
few points, but at the same time allows the freedom of using
those mandated points at any position. It was designed to
incrementally improve the security of an existing, popularly
used graphical password scheme. Those characteristics clearly
differentiate SysPal from previous persuasive techniques.
IX. CONCLUSIONS AND FUTURE WORK
We proposed a novel system-guided pattern scheme for
Android called SysPal, which mandates the use of a few
randomly selected points upon choosing a pattern. The idea is
to help users choose more secure patterns by deviating them
from their normal, biased pattern selection behaviors.
Our large-scale online study showed that SysPal patterns
and original Android patterns have similar pattern recall
success rate. Our lab study, which was designed to closely
resemble real-life unlock scenarios, again showed that SysPal
patterns are just as memorable as original Android patterns.
Yet, SysPal patterns are much more robust against guessing
attacks, and have higher entropy values. Hence,
is our
recommendation to replace the existing Android policy with
the SysPal policy that mandates either one or two points.
SysPal policies may also be used as guidelines to help design
similar security policies for other graphical password schemes,
artiﬁcially injecting some randomness to passwords.