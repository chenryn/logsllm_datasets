cause LLCs. The analysis is done based on the code patterns
in Section IV-C. We refer to this phase of CRASHFINDER
as CRASHFINDER STATIC. In the second phase, it performs
dynamic analysis of the program (under a given set of inputs)
to determine which dynamic instances of the static locations
are likely to result in LLCs. We call this phase CRASHFINDER
DYNAMIC. In the last phase, it injects a selected few faults to
the dynamic instances chosen by CRASHFINDER DYNAMIC.
We refer to this phase of CRASHFINDER as selective fault
injection. We describe the three phases in the three subsections.
Fig. 6: Workﬂow of CRASHFINDER
A. Phase 1: Static Analysis (CRASHFINDER STATIC)
CRASHFINDER STATIC is the static analysis portion of
our technique that statically searches the program’s code for
the three patterns corresponding to those identiﬁed in Sec-
tion IV-C. We found that these three patterns are responsible
for almost all the LLCs in the program, and hence it sufﬁces to
look for these patterns to cover the LLCs. However, not every
instance of these patterns may lead to an LLC, and hence we
455455
may get false-positives in this phase. False-positives are those
locations that conform to the LLC causing patterns but do not
lead to an LLC, and will be addressed in the next phase.
The algorithm of CRASHFINDER STATIC takes the pro-
gram’s source code compiled to the LLVM IR as an input and
outputs the list of potential LLC causing locations. Speciﬁcally,
CRASHFINDER STATIC looks for the following patterns in the
program:
1) Pointer Corruption LLC: CRASHFINDER STATIC ﬁnds
pointers that are written to memory in the program. More
speciﬁcally, it examines static data dependency sequences of
all pointers, and only consider the ones that end with store
instruction.
it
looks for the variable(s) that
2) Loop Corruption LLC: In this category, CRASHFINDER
STATIC ﬁnds loop termination variables in loop headers and
array index assignment operations. For loop termination vari-
able(s),
is used for com-
parison with the loop index variable in loop headers. For
array index assignment, CRASHFINDER STATIC ﬁrst locates
binary operations with a variable and a constant as operands,
then checks if the result being stored is used as offset in
array address calculation. If yes, then we can infer that the
variable being updated will be used as the address offset of an
array. In LLVM, offset calculations are done through a special
instruction and are hence easy to identify statically.
3) State Corruption LLC: CRASHFINDER STATIC ﬁnds
static and global variables used to store state or locks. Because
these may depend on the application’s semantics, we devise a
heuristic to ﬁnd such variables. If a static variable is loaded
and directly used in comparison and branches, we assume that
it is likely to be a state variable or a lock variable. We ﬁnd
that this heuristic allow us to cover most of these cases without
semantic knowledge of the application.
B. Phase 2: Dynamic Analysis (CRASHFINDER DYNAMIC)
In this phase, our technique attempts to eliminate the false
positives from the static locations identiﬁed in phase 1. One
straw man approach for doing so is to inject faults in every
dynamic instance of the static locations to determine if it leads
to an LLC. However, a single static instruction may correspond
to hundreds of thousands of dynamic instances in a typical
program, especially if it is within a loop. Further, each of these
dynamic instances needs to be fault injected multiple times to
determine if it will lead to an LLC, and hence a large number
of fault injections will need to be performed. All this adds up
to considerable performance overheads, and hence the above
straw man approach does not scale.
We propose an alternate approach to cut down the number
of fault injection locations to ﬁlter out the false positives. Our
approach uses dynamic analysis to identify a few dynamic
instances to consider for injection among the set of all the
identiﬁed static locations. The main insight we leverage is
that there are repeated control-ﬂow sequences in which the
dynamic instances occur, and it is sufﬁcient to sample dynamic
instances in each unique control-ﬂow sequence to obtain a
representative set of dynamic instances for fault
injection.
This is because the crash latency predominantly depends on
the control-ﬂow sequence executed by the program after the
(cid:86)(cid:68)(cid:80)(cid:83)(cid:79)(cid:72)(cid:3)(cid:70)(cid:68)(cid:81)(cid:71)(cid:76)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:20)
(cid:86)(cid:68)(cid:80)(cid:83)(cid:79)(cid:72)(cid:3)(cid:70)(cid:68)(cid:81)(cid:71)(cid:76)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:21)
(cid:86)(cid:68)(cid:80)(cid:83)(cid:79)(cid:72)(cid:3)(cid:70)(cid:68)(cid:81)(cid:71)(cid:76)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:22)
(cid:86)(cid:68)(cid:80)(cid:83)(cid:79)(cid:72)(cid:3)(cid:70)(cid:68)(cid:81)(cid:71)(cid:76)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:23)
(cid:86)(cid:68)(cid:80)(cid:83)(cid:79)(cid:72)(cid:3)(cid:70)(cid:68)(cid:81)(cid:71)(cid:76)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:49)
(cid:86)(cid:68)(cid:80)(cid:83)(cid:79)(cid:72)(cid:3)(cid:70)(cid:68)(cid:81)(cid:71)(cid:76)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:11)(cid:49)(cid:14)(cid:20)(cid:12)
(cid:85)(cid:72)(cid:79)(cid:68)(cid:91)(cid:11)(cid:12)
(cid:70)(cid:82)(cid:83)(cid:92)(cid:66)(cid:85)(cid:72)(cid:71)(cid:11)(cid:12)
(cid:85)(cid:72)(cid:79)(cid:68)(cid:91)(cid:11)(cid:12)
(cid:70)(cid:82)(cid:83)(cid:92)(cid:66)(cid:69)(cid:79)(cid:68)(cid:70)(cid:78)(cid:11)(cid:12)
(cid:85)(cid:72)(cid:79)(cid:68)(cid:91)(cid:11)(cid:12)
(cid:70)(cid:82)(cid:83)(cid:92)(cid:66)(cid:85)(cid:72)(cid:71)(cid:11)(cid:12)
(cid:85)(cid:72)(cid:79)(cid:68)(cid:91)(cid:11)(cid:12)
(cid:70)(cid:82)(cid:83)(cid:92)(cid:66)(cid:69)(cid:79)(cid:68)(cid:70)(cid:78)(cid:11)(cid:12)
(cid:17)(cid:17)(cid:17)
(cid:85)(cid:72)(cid:79)(cid:68)(cid:91)(cid:11)(cid:12)
(cid:70)(cid:82)(cid:83)
(cid:70)(cid:82)(cid:83)(cid:92)(cid:66)(cid:85)(cid:72)(cid:71)(cid:11)(cid:12)
(cid:85)(cid:72)(cid:79)
(cid:85)(cid:72)(cid:79)(cid:68)(cid:91)(cid:11)(cid:12)
(cid:70)(cid:82)(cid:83)(cid:92)(cid:66)(cid:69)(cid:79)(cid:68)(cid:70)(cid:78)(cid:11)(cid:12)
(cid:11)(cid:69)(cid:12)
Fig. 7: Dynamic sampling heuristic. (a) Example source code
(ocean program), (b) Execution trace and sample candidates.
injection at a given program location. Therefore, it sufﬁces to
obtain one sample from each unique control ﬂow pattern in
which the dynamic instance occurs. We determine the control
ﬂow sequences at the level of function calls. That is we sample
the dynamic instances with different function call sequences,
and ignore the ones that have the same function call sequences.
We show in Section VIII that this sampling heuristic works
well in practice.
We consider an example to illustrate the sampling heuristic
to determine which dynamic instances to choose. Figure 7(b)
shows the dynamic execution trace generated by the code in
Figure 7(a). For example, we want to sample the dynamic
instances corresponding to the variable t1a at
line 17 in
Figure 7(a). Firstly, because t1a is within a loop in function
relax, it corresponds to multiple dynamic instances in the
trace. We only consider one of them as candidate for choosing
samples (we call it a sample candidate), since they have same
function call sequences (no function calls) in between. Sec-
ondly, function relax is called within a loop in function multig
at lines 5 and 7. As can be seen in the Figure 7, there are two
recurring function call sequences circumscribing the execution
of the static location corresponding to the sample candidates,
namely relax() copy red() and relax() copy black(). We collect
one sample of each sequence regardless of how many times
they occur. In this case, only sample candidate 1 and 2 are
selected for later fault injections. We ﬁnd that this dramatically
reduces the fault injection space thereby saving considerable
time.
456456
C. Phase 3: Selective Fault Injections
The goal of this phase is to ﬁlter out all
the false-
positives identiﬁed in the previous phase through fault in-
jections. Once we have isolated a set of dynamic instances
from CRASHFINDER DYNAMIC to inject for the static location,
we conﬁgure our fault injector to inject two faults into each
dynamic instance, one fault at a time. We choose one high-
order bit and and one low-order bit at random to inject into,
as we found experimentally that LLCs predominantly occur
either in the high-order bits or the low-order bits, and hence
one needs to sample both.
We then classify the location as an LLC location (i.e., not
a false positive) if any one of the injected faults results in an
LLC. Otherwise, we consider it a false-positive, and remove
it from the list of LLC locations. Note that this approach
is conservative as performing more injections can potentially
increase the likelihood of ﬁnding an LLC, and hence it is
possible that we miss some LLCs. However, as we show in
Section VIII, our approach ﬁnds most LLCs even with only
two fault injections per each dynamic instance. We also show
that increasing the number of fault injections beyond 2 for
each dynamic instance does not yield substantial beneﬁts, and
hence we stick to 2 injections per instance.
VI.
IMPLEMENTATION
We implemented CRASHFINDER STATIC as a pass in the
LLVM compiler [15] to analyze the IR code and extract the
code patterns. We implemented the CRASHFINDER DYNAMIC
also as an LLVM pass that instruments the program to obtain
its control-ﬂow. CRASHFINDER DYNAMIC then analyzes the
control-ﬂow patterns and determines what instances to choose
for selective fault injection. We use the LLFI fault injection
framework [28] to perform the fault injections. Finally, we
used our crash latency measurement library to determine the
crash latencies after injection.
To use CRASHFINDER 1, all the user needs to do is to
compile the application code with the LLVM compiler using
our module. No annotations are needed. The user also needs to
provide us with representative inputs so that CRASHFINDER
can execute the application, collect the control-ﬂow patterns
and choose the dynamic instances to inject faults.
VII. EXPERIMENTAL SETUP
We empirically evaluate CRASHFINDER in terms of accu-
racy and performance. We use a fault injection experiment to
measure the accuracy, and use execution time of the technique
to measure its performance. We evaluate both CRASHFINDER
and CRASHFINDER STATIC separately to understand the effect
of different parts of the technique (CRASHFINDER includes
CRASHFINDER STATIC, CRASHFINDER DYNAMIC and the
selective fault injection). We compare both the accuracy and
the performance of both techniques to those of exhaustive fault
injections that are needed to ﬁnd all the LLCs in a program 2.
Our experiments are all carried out on an Intel Xeon E5
machine, with 32 GB RAM running Ubuntu Linux 12.04.
1CRASHFINDER and its source code can be freely downloaded from
https://github.com/DependableSystemsLab/Crashﬁnder
2Our goal is to ﬁnd all LLC causing locations in the program so that we
can selectively protect them and bound the crash latency.
We ﬁrst present
the benchmarks used (Section VII-A,
followed by the research questions (Section VII-B). We then
present an overview of the methodology we used to answer
each of the research questions (Section VII-C).
A. Benchmarks
We choose a total of ten benchmarks from various do-
mains for evaluating CRASHFINDER. The benchmark applica-
tions are from SPEC [13], PARBOIL [25], PARSEC [2] and
SPLASH-2 [29]. All the benchmark application are compiled
and linked into native executables using LLVM, with standard
optimizations enabled. We show the detailed information of
the benchmarks in Table I.
TABLE I: Characteristics of Benchmark Programs
Benchmark
libquantum
Benchmark
Suite
SPEC
Description
h264ref
SPEC
blackscholes
PARSEC
hmmer
mcf
ocean
sad
sjeng
cutcp
stencil
SPEC
SPEC
SPLASH-2
PARBOIL
SPEC
PARBOIL
PARBOIL
A library for the simulation of a quantum com-
puter
A reference implementation of H.264/AVC (Ad-
vanced Video Coding)
Option pricing with Black-Scholes Partial Differ-
ential Equation (PDE)
Uses statistical description of a sequence family’s
consensus to do sensitive database searching
Solves single-depot vehicle scheduling problems
planning transportation
Large-scale ocean movements simulation based on
eddy and boundary currents
Sum of absolute differences kernel, used in MPEG
video encoders
A program that plays chess and several chess
variants
Computes the short-range component of Coulom-
bic potential at each grid point
An iterative Jacobi stencil operation on a regular
3-D grid
B. Research Questions
We answer the following research questions(RQs) in our
experiments.
RQ1: How much speedup do CRASHFINDER STATIC and
CRASHFINDER achieve over exhaustive injection ?
RQ2: What is the precision of CRASHFINDER STATIC and
CRASHFINDER?
RQ3: What is the recall of CRASHFINDER STATIC and
CRASHFINDER?
RQ4: How well do the sampling heuristics used in
CRASHFINDER work in practice ?
C. Experimental Methodology
We describe our methodology for answering each of the
RQs below. We perform fault injections using the LLFI fault
injector [28] as described earlier.
1) Performance:
In order to answer RQ1, we measure
the total time taken for executing CRASHFINDER STATIC,