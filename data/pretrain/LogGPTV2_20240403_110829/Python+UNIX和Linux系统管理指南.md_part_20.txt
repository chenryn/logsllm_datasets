## Page 144
处理中相同的库，也将使用shelve模块来保存每个来自HTTP客户端的HTTP请求。在第
种整合是如何构建在第3章的数据提取以及第12章的数据存储之上。我们将使用与文本
这一节的剩余部分试图将文本处理和数据持久性中的多个概念进行整合，并特别阐明这
晚解析Apache日志，提取必要的信息（在本例中，就是IP地址信息和每一个请求所发送
从指定的Apache web服务器下载信息的字节数。这一过程中，信息收集阶段可能包括每
进行保存以备将来使用。例如，如果想创建一个图表，显示一个月内每一个唯一IP地址
库的模块。apache_log_parser_regex是我们在第3章中编写的模块。之后，打开apache
shelve模块：
下面是一个简单的模块示例，使用了在前一章中创建的Apache日志文件解析模块，以及
12章中会对shelve模块进行介绍。
可以存储在关系数据库、对象数据库、pickle文件、CSV文件和纯文本文件中。
的字节数），并将这些数据保存起来，这样以后就可以打开使用。这些需要保存的数据
你或许从未考虑过将收取邮件作为信息收集的一种方式，而事实上，收取邮件确实可以
收取邮件
将继续使用这个示例。
有行都进行了迭代之后，关闭日志文件和shelve对象。本章后面介绍信息格式化的部分
shelve对象中没有该客户端IP地址的记录，则总字节数自动归0。在对日志文件中的所
节数中，总字节数已经在shelve对象中为每一个客户端IP地址都进行了计算。如果在
态代码，客户端IP地址，以及传输到客户端的字节数。将特定请求的字节数加到总字
理，使用Apache日志文件解析模块为每一行创建一个字典。该字典包括HTTP请求的状
日志文件，access.log和一个框架文件access.s。对日志文件中的每一行进行选代处
130
shelve_file.close()
logfile.close()
for line in logfile:
logfile = open('access.log', 'r')
importapache_log_parser_regex
import shelve
#!/usr/bin/env python
第4章
d_line = apache_log_parser_regex.dictify_logline(line)
shelve_file[d_line[
shelve_ file.setdefault(d line['remote_host'], 0) +\
int(d_line['bytes_sent'])
remote_host'
www.TopSage.com
DG
---
## Page 145
#1/usr/bin/envpython
. = pssed
import imaplib
例4-2：通过IMAP收取email
IMAP代码，该代码能够完成POP3示例中相同的功能。
IMAP几乎与POP3一样简单，但是在Python标准库文档中没能充分地介绍。例4-2显示了
该脚本没有完成在收取邮件之后对邮件的删除操作。删除邮件只需要retr()之后调用
该账户下查看email的权限。选代处理邮件文件列表，依次读取邮件并将其写人磁盘。
件服务器，并给出了已定义的用户名和密码。假设用户名和密码正确，那么就获得了在
正如你所看到的，我们首先定义了username，password和mail_server，之后连接到邮
p = poplib.POP3(mail_server)
mail_server = 'mail.somedomain.com'
username = 'someuser
#1/usr/bin/envpython
例4-1：通过POP3收取email
4-1显示了如何使用poplib来收取所有的email并将它们写入一系列磁盘文件。
POP3也许保存在指定的服务器上更常见些，使用poplib访问POP3的email非常容易。例
username ='some_user’
p.quit()
importpoplib
下，Python标准库提供了对这两个协议的支持。
收集这些email信息来生成报告，或者在出现服务器故障时随时进行替换。
写入或读取日志成功与否，都发送一个email，émail中记录了成功或失败的信息。可以
可以每隔几分钟就写人或读取日志，那么，就可以利用email作为信息传递的机制。不管
每一台服务器都支持邮件功能。如果有一个监测这些服务器上web应用的脚本，该脚本
实现信息收集。想象一下你有一些服务器，这些服务器很难彼此直接连接在一起，但是
dele()。
forn
p.pass_(password)
p.user(username)
password =
outf.close()
outf.write(`\n'.join(p.retr(msg_id)[1]))
print msg_id
msg_id in p.list()[1]:
'S3Cr37'
www.TopSage.com
文档与报告丨131
PDG
---
## Page 146
手工信息收集
mail_server，之后通过SSL连接到IMAP服务器，接下来登录并设置email的目录为
reStructuredText（也称作reST）。下面是reStructuredText网站对其进行的描述：：
虽然有很多选择，但是我们将在这里推荐一种可替换的、专门的纯文本格式，即
子表格（Spreadsheet）就能够用于管理服务器列表。Outlook或Address Book.app就能
管不能实现完全管理，但也可以管理大多数这类信息。例如，Excel或OpenOffice的电
是你的团队成员计划休假的日期等。实际上，已经有一些工具能够管理这类信息。尽
对应的IP地址和功能；联系人的列表，其中包含email地址，电话号码，IM屏幕名；或
接下来，让我们看一下更为复杂的手工收集信息的方法。手工收集信息意味着对我们
么问题，如果删除这一信息也没什么大不了，但是还是注意一下这些信息为好。
一个警告信息：该操作要求目录下的邮件标识为“可读”。这对你来说或许根本不是什
要什么格式？我们怀疑阅读IMAPRFC是否会有帮助，但幸运的是，有大量关于IMAP示
的描述。字符集和搜索准则是Search()的两个必要参数。什么是一个有效的字符集？需
INBOX，然后对整个目录进行迭代搜索。search()方法在Python标准库文件中只有少量
正如在POP3示例中所做的操作，我们在脚本开始处定义了username，password和
i.logout()
i = imaplib.IMAP4_SSL(mail_server)
mail_server = 'mail_server'
132
XHTML），这或许就是解决这一问题的方案。
日期进行管理。如果是使用纯文本编辑数据，并具有可配置的、支持HTML的输出（或
够用于管理联系人。无论是Excel/OpenOffice电子表格还是Outlook，都可以对人员休假
依靠眼睛和手中的按键对内容进行收集。例如服务器的列表，其中包含每台服务器所
例的文档可供参考。对于每一次循环选代，我们将邮件的内容写入到磁盘。这里会出现
outf.close()
outf.write(i.fetch(msg_id,
print msg_id
解析器是一个Docutils组件。reStructuredText是对StructuredText和Setext这样的轻
reStructuredText是一个易于读取，所见即所得的纯文本标记语法和解析系统。对于
量级标记系统的修订和再解析。
页面和独立的文档。reStructuredText为扩展特定应用领域而设计。reStructuredText
行内程序归档非常有用（例如Python中的docstrings），可以快速地创建简单的web 
”第4章
i.search(None, ‘'ALL')[1][o].split():
(RFC822)')[1][0][1])
（.M，
www.TopSage.com
---
## Page 147
的示例：
-(id)init
@implementation MyDocument 
#import "MyDocument.h"
- (void)windowControllerDidLoadNib:(NSWindowController *) aController 
(void)prepareEditView
(NSString *)windowNibName
 return @"MyDocument";
if (1[super init])
[super windowControllerDidLoadNib:aController];
// Attach the new text storage
return self;
// Show the text storage in the text view
textStorage
// What you see for a new document
[selfprepareEditview];
[[editView textStorage]removelayoutManager:lm];
//Detachtheoldtextstorage
return nil;
ReSTless的全部代码。下面是如何在Cocoa应用中调用Python脚本
请从该书的代码资源库http://www.oreilly.com/9780596515829下载
书的作者。在Big Nerd Ranch教授Cocoa编程。
发专家。他是Cocoa Programming for Mac OS X (Big Nerd Ranch)一—
 = [[NSTextStorage alloc] init];
名人简介：RESTLESS
www.TopSage.com
曾在NeXT和Apple任职，是Mac系统下的应用开
文档与报告丨133
---
## Page 148
134
// Reading (the URL is always a file:)
// Saves (the URL is always a file:)
#pragma mark Saving and Loading
#pragma mark Generating and Saving HTML
(BOOL)writeToURL:(NSURL
第4章
(NSData *)dataForHTML
return [[textStorage string] writeToURL:absoluteURL
// Guess the location of the executable
return YES;
textStorage = [[NSTextStorage alloc] initwithString:string.
[textStorage release];
//Readfailed?
[inPipe release];
NSPipe *inPipe
// Connect a pipe where the ReST will go in
task setLaunchPath:path];
Is this a revert?
return NO;
(!string)
[self prepareEditView];
ofType:(NSString *)typeName
ofType: (NSString *)typeName
error:(NSError
error:(NSError
=【[NSPipe alloc] init];
*)absoluteURL
www.TopSage.com
atomically:NO
encoding:NSUTF8StringEncoding
error:outError];
encoding:NSUTF8StringEncoding
error:outError];
---
## Page 149
textEncodingName:@"utf-8"
(IBAction)startSavePanelForHTML:(id)sender
(IBAction)renderRest:(id)sender
// Start the save panel.
NSString
NSString
//Where does it save by.default?
[progressIndicator stopAnimation:nil];
// Stop the spinning so the user feels done
// Start the spinning so the user feels like waiting
return outData;
//All donewiththetask
NSData *outData = [IoutPipe fileHandleForReadingl readDataToEndOffile];
// Get the data from the text view
//Starttheprocess
// Connect a pipe where the HMTl will come out
//Put the html in the main WebFrame
ISData
//Get the html as an NSData
[task release];
[inPipe
[task launch];
outPipe release];
[task setStandardoutput:outPipe];
baseURL:nil];
*directory =
fileHandleForWriting]
stringByDeletingPathExtension]
[restPath stringByDeletinglastPathComponent];
www.TopSage.com
closeFile];
writeData:inDatal;
文档与报告丨135
---
## Page 150
136
#pragma mark Printing Support
// Called when the save panel is dismissed
第4章
// Get the view that displays the whole HTML document
I/ Did the write fail?
NSPrintInfo*printInfo=[self printInfo];
BOOL success=[htmlData writeToFile:savePath
// Write it to the file
NSData *htmIData = [self dataForHTML];
// Get the HTML data
// Get the chosen filename
// Did the user hit Cancel?
[sp
return;
return;
endedwithCode:(int)returnCode
beginSheetForDirectory:directory
setCanSelectHiddenExtension:YES];
[alert beginSheetModalForwindow:[editView window]
context:(void *)context
didEndSelector:@selector(htmlSavePanel:endedwithCode:context:)
modalDelegate:self
contextInfo:NULL];
didEndSelector:NULL
file:filename
www.TopSage.com
contextInfo:NULL];
options:NSAtomicWrite
error:&writeError];
款
---
## Page 151
使用刚刚演示的ReST文档，
http://docutils.sourceforge.net/docs/user/rst/lquickref.html.
里不会给出一个reStructuredText的培训指导。如果想要快速地浏览标记语法，可以访问
第三，从ReST转换到HTML非常简单。这也是我们将在本节集中介绍的第三个方面。这
需要些什么之类的内容了。但是你还不能写ReST文件，只是已经可以一行接一行地进行
你或许已经理解了一些基本结构，不需要再去阅读构成一个有效的reStructuredText文件
的ReST文件示例：
乎可以立即掌握。当你看到文档的结构，会很快理解作者的意图。下面是一个非常简单
那么，我们为什么要用ReST作为文档格式呢？首先，这种格式并不复杂。其次，标记几
Python项目也使用ReST作为主要的文档格式。
上传到PyPI，最好用reStructuredText作为文档的格式。由于归档的需要，许多独立的
ReST是Python文档优先使用的格式。如果创建了一个包含了代码的Python包，并打算
阅读了。
In [2]:import docutils.core
This is just a simple
SubHeading
Heading
item three
item one
'll show a bulleted list:
@end
....
..：
.：
This is just a simple
return [NSPrintoperation printoperationWithView:docView
SubHeading
Heading
// Create a print operation
Now,
，下面的示例展示了将ReST转换为HTML的步骤：
www.TopSage.com
printInfo:printInfo];
文档与报告丨137
PDG
---
## Page 152
器表，并将其转换为HTML。
务器上的任务进行追踪。下面是一个示例，演示了创建一个纯文本（plain-text）服务列