[目标 NAT（DNAT）]{.term}
:   使用此 NAT 类型重写传入数据包的目标地址和端口。例如，如果您的 Web
    服务器使用私有 IP 范围内的 IP
    地址，那么无法直接从互联网访问它，您可以在路由器上设置 DNAT
    规则，以便将传入的流量重定向到此服务器。
[重定向]{.term}
:   这个类型是 IDT 的特殊示例，它根据链 hook
    将数据包重定向到本地机器。例如，如果服务运行在与其标准端口不同的端口上，您可以将传入的流量从标准端口重定向到此特定端口。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-ip-address-masquerading_assembly_configuring-nat-using-firewalld}配置 IP 地址伪装 {.title}
:::
以下流程描述了如何在系统中启用 IP 伪装。IP
伪装会在访问互联网时隐藏网关后面的独立机器。
::: orderedlist
**步骤**
1.  要检查是否启用了 IP 伪装（例如，对于 `external`{.literal} 区），以
    `root`{.literal} 用户身份输入以下命令：
    ``` literallayout
    # firewall-cmd --zone=external --query-masquerade
    ```
    如果已启用，命令将会打印 `yes`{.literal}，且退出状态为
    `0`{.literal}。否则，将打印 `no`{.literal} ，且退出状态为
    `1`{.literal}。如果省略了 `zone`{.literal}，则将使用默认区。
2.  要启用 IP 伪装，请以 `root`{.literal} 用户身份输入以下命令：
    ``` literallayout
    # firewall-cmd --zone=external --add-masquerade
    ```
3.  要使此设置持久，请将 `--permanent`{.literal} 选项传递给 命令。
4.  要禁用 IP 伪装，请以 `root`{.literal} 身份输入以下命令：
    ``` literallayout
    # firewall-cmd --zone=external --remove-masquerade
    ```
    要使此设置永久生效，请将 `--permanent`{.literal} 选项传递给 命令。
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#port-forwarding_using-and-configuring-firewalld}端口转发 {.title}
:::
使用此方法重定向端口只可用于基于 IPv4 的流量。对于 IPv6
重定向设置，您必须使用丰富的规则。
要重定向到外部系统，需要启用伪装。如需更多信息，请参阅[配置 IP
地址伪装](#using-and-configuring-firewalld_firewall-packet-filters.html#configuring-ip-address-masquerading_assembly_configuring-nat-using-firewalld "配置 IP 地址伪装"){.link}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您无法通过从配置了本地转发的主机重定向的端口访问服务。
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#adding-a-port-to-redirect_port-forwarding}添加一个端口来重定向 {.title}
:::
您可以使用 `firewalld`{.literal}
设置端口重定向，以便任何到达您系统中特定端口的流量都会被传送到您选择的另一个内部端口或另一台机器上的外部端口。
::: itemizedlist
**先决条件**
-   在您将从一个端口的流量重新指向另一个端口或另一个地址前，您必须了解 3
    个信息：数据包到达哪个端口，使用什么协议，以及您要重定向它们的位置。
:::
::: orderedlist
**流程**
1.  将端口重新指向另一个端口：
    ``` literallayout
    # firewall-cmd --add-forward-port=port=port-number:proto=tcp|udp|sctp|dccp:toport=port-number
    ```
2.  将端口重定向到不同 IP 地址的另一个端口：
    ::: orderedlist
    1.  添加要转发的端口：
        ``` literallayout
        # firewall-cmd --add-forward-port=port=port-number:proto=tcp|udp:toport=port-number:toaddr=IP
        ```
    2.  启用伪装：
        ``` literallayout
        # firewall-cmd --add-masquerade
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#redirecting-tcp-port-80-to-port-88-on-the-same-machine_port-forwarding}将 TCP 端口 80 重定向到同一台机器中的 88 端口 {.title}
:::
按照以下步骤将 TCP 端口 80 重定向到端口 88。
::: orderedlist
**流程**
1.  将端口 80 重定向到 TCP 流量的端口 88:
    ``` literallayout
    # firewall-cmd --add-forward-port=port=80:proto=tcp:toport=88
    ```
2.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
3.  检查是否重定向了端口：
    ``` literallayout
    # firewall-cmd --list-all
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#removing-a-redirected-port_port-forwarding}删除重定向的端口 {.title}
:::
这个步骤描述了如何删除重定向的端口。
::: orderedlist
**流程**
1.  要删除重定向的端口：
    ``` literallayout
    # firewall-cmd --remove-forward-port=port=port-number:proto=:toport=port-number:toaddr=
    ```
2.  要删除重定向到不同地址的转发端口：
    ::: orderedlist
    1.  删除转发的端口：
        ``` literallayout
        # firewall-cmd --remove-forward-port=port=port-number:proto=:toport=port-number:toaddr=
        ```
    2.  禁用伪装：
        ``` literallayout
        # firewall-cmd --remove-masquerade
        ```
    :::
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#removing-tcp-port-80-forwarded-to-port-88-on-the-same-machine_port-forwarding}在同一台机器上将 TCP 端口 80 转发到端口 88 {.title}
:::
这个步骤描述了如何删除端口重定向。
::: orderedlist
**流程**
1.  列出重定向的端口：
    ``` literallayout
    ~]# firewall-cmd --list-forward-ports
    port=80:proto=tcp:toport=88:toaddr=
    ```
2.  从防火墙中删除重定向的端口：
    ``` literallayout
    ~]# firewall-cmd  --remove-forward-port=port=80:proto=tcp:toport=88:toaddr=
    ```
3.  使新设置具有持久性：
    ``` literallayout
    ~]# firewall-cmd --runtime-to-permanent
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_firewall-packet-filters.html#managing-icmp-requests_using-and-configuring-firewalld}管理 ICMP 请求 {.title}
:::
`Internet 控制消息协议`{.literal}
(`ICMP`{.literal})是一种支持协议，供各种网络设备用来发送错误消息和表示连接问题的操作信息，例如，请求的服务不可用。`ICMP`{.literal}
与 TCP 和 UDP 等传输协议不同，因为它不用于在系统之间交换数据。
不幸的是，可以使用 `ICMP`{.literal} 消息（特别是
`echo-request`{.literal} 和 `echo-reply`{.literal}
）来揭示关于您网络的信息，并将这些信息滥用于各种欺诈活动。因此，`firewalld`{.literal}
允许阻止 `ICMP`{.literal} 请求，来保护您的网络信息。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_firewall-packet-filters.html#listing-and-blocking-icmp-requests_managing-icmp-requests}列出和阻塞 ICMP 请求 {.title}
:::
::: title
**列出 `ICMP`{.literal} 请求**
:::
位于 `/usr/lib/firewalld/icmptypes/`{.literal} 目录中的单独的 XML
文件描述了 `ICMP`{.literal}
请求。您可以阅读这些文件来查看请求的描述。`firewall-cmd`{.literal}
命令控制 `ICMP`{.literal} 请求操作。
::: itemizedlist
-   要列出所有可用的 `ICMP`{.literal} 类型：
    ``` literallayout
    # firewall-cmd --get-icmptypes
    ```
-   IPv4、IPv6 或这两种协议都可以使用 `ICMP`{.literal} 请求。要查看
    `ICMP`{.literal} 请求使用了哪种协议：
    ``` literallayout
    # firewall-cmd --info-icmptype=
    ```
-   如果请求当前被阻止了，则 `ICMP`{.literal} 请求的状态显示为
    `yes`{.literal} ，如果没有被阻止，则显示为 `no`{.literal}。查看
    `ICMP`{.literal} 请求当前是否被阻断了：
    ``` literallayout
    # firewall-cmd --query-icmp-block=
    ```
:::
::: title
**阻止或取消阻止 `ICMP`{.literal} 请求**
:::
当您的服务器阻止了 `ICMP`{.literal}
请求时，它不会提供任何通常会提供的信息。但这并不意味着根本不给出任何信息。客户端会收到特定的
`ICMP`{.literal} 请求被阻止（拒绝）的信息。应仔细考虑阻止
`ICMP`{.literal} 请求，因为它可能会导致通信问题，特别是与 IPv6
流量有关的通信问题。
::: itemizedlist
-   要查看 `ICMP`{.literal} 请求当前是否被阻断了：
    ``` literallayout
    # firewall-cmd --query-icmp-block=
    ```
-   要阻止 `ICMP`{.literal} 请求：
    ``` literallayout
    # firewall-cmd --add-icmp-block=
    ```
-   要删除 `ICMP`{.literal} 请求的块：
    ``` literallayout
    # firewall-cmd --remove-icmp-block=
    ```
:::
::: title
**在不提供任何信息的情况下阻塞 `ICMP`{.literal} 请求**
:::
通常，如果您阻止了 `ICMP`{.literal} 请求，客户端会知道您阻止了 ICMP
请求。这样潜在的攻击者仍然可以看到您的 IP
地址在线。要完全隐藏此信息，您必须丢弃所有 `ICMP`{.literal} 请求。
::: itemizedlist
-   要阻止和丢弃所有 `ICMP`{.literal} 请求：
-   将区的目标设为 `DROP`{.literal} ：
    ``` literallayout
    # firewall-cmd --permanent --set-target=DROP
    ```
:::
现在，除您明确允许的流量外，所有流量（包括 `ICMP`{.literal}
请求）都将被丢弃。
阻止和丢弃某些 `ICMP`{.literal} 请求，而允许其他的请求：
::: orderedlist
1.  将区的目标设为 `DROP`{.literal} ：
    ``` literallayout
    # firewall-cmd --permanent --set-target=DROP
    ```
2.  添加 ICMP block inversion 以一次阻止所有 `ICMP`{.literal} 请求：
    ``` literallayout
    # firewall-cmd --add-icmp-block-inversion
    ```
3.  为您要允许的 `ICMP`{.literal} 请求添加 ICMP 块：
    ``` literallayout
    # firewall-cmd --add-icmp-block=
    ```
4.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
[*block inversion*]{.emphasis} 会颠倒 `ICMP`{.literal}
请求块的设置，因此所有之前没有被阻止的请求都会被阻止，因为区的目标变成了
`DROP`{.literal}。被阻断的请求不会被阻断。这意味着，如果您想要取消阻塞请求，则必须使用
blocking 命令。
将块 inversion 恢复到完全 permissive 设置：
::: orderedlist
1.  将区的目标设置为 `default`{.literal} 或 `ACCEPT`{.literal}: