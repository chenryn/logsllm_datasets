title:SafeDispatch: Securing C++ Virtual Calls from Memory Corruption
Attacks
author:Dongseok Jang and
Zachary Tatlock and
Sorin Lerner
SAFEDISPATCH: Securing C++ Virtual Calls
from Memory Corruption Attacks
Dongseok Jang
PI:EMAIL
Computer Science and Engineering
University of California, San Diego
Zachary Tatlock
Sorin Lerner
PI:EMAIL
Computer Science and Engineering
University of Washington
PI:EMAIL
Computer Science and Engineering
University of California, San Diego
Abstract—Several defenses have increased the cost of tradi-
tional, low-level attacks that corrupt control data, e.g. return
addresses saved on the stack, to compromise program execution.
In response, creative adversaries have begun circumventing
these defenses by exploiting programming errors to manipulate
pointers to virtual tables, or vtables, of C++ objects. These attacks
can hijack program control ﬂow whenever a virtual method of
a corrupted object is called, potentially allowing the attacker to
gain complete control of the underlying system. In this paper we
present SAFEDISPATCH, a novel defense to prevent such vtable
hijacking by statically analyzing C++ programs and inserting
sufﬁcient runtime checks to ensure that control ﬂow at virtual
method call sites cannot be arbitrarily inﬂuenced by an attacker.
We implemented SAFEDISPATCH as a Clang++/LLVM extension,
used our enhanced compiler to build a vtable-safe version of
the Google Chromium browser, and measured the performance
overhead of our approach on popular browser benchmark suites.
By carefully crafting a handful of optimizations, we were able to
reduce average runtime overhead to just 2.1%.
I.
INTRODUCTION
Applications like web browsers and ofﬁce productivity
suites are increasingly trusted to store and manipulate highly
sensitive data in domains ranging from medical record manage-
ment to banking. Such systems demand both performance and
abstraction, making a low-level, object-oriented language like
C++ the tool of choice for their implementation. Unfortunately,
this focus on performance has all too often taken precedence
over critical security concerns. Malicious attacks frequently
exploit the low-level programming errors that plague these sys-
tems, allowing an adversary to corrupt control data, pointers
to code which the program later jumps to. By compromising
control data, attackers are able to hijack program execution, in
the worst case leading to arbitrary code execution.
Buffer overﬂows are one of the most familiar techniques
for corrupting control data: by overwriting the return address
in a function’s activation record on the stack, the attacker
can specify which instruction the CPU will jump to when
the function returns, thus hijacking the program’s execution.
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1)Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:25)(cid:24)
The security community has responded to such attacks with
numerous defenses, including stack canaries [1], data execution
prevention [2], and custom allocators to protect the heap [3].
These successful defenses have increased the cost of mounting
traditional attacks, forcing adversaries to adopt increasingly
sophisticated approaches.
Instead of overwriting return addresses saved on the stack,
several recent, high proﬁle attacks have shifted their focus to
corrupting another class of control data: heap-based pointers to
virtual tables, or vtables. A C++ class’s vtable contains func-
tion pointers to the implementations for each of its methods.
All major C++ compilers, including GCC, Visual C++, and
LLVM, use vtables to implement dynamic dispatch: whenever
an object invokes a virtual method, the vtable for that object’s
class is consulted to determine which function should be
called. This layer of indirection enables polymorphism in C++
by allowing a subclass to invoke its own version of a method,
overriding its parent class.
For performance, the ﬁrst word of a C++ object with virtual
methods is a pointer to its class’s vtable. Unfortunately, this
efﬁciency comes at a price: memory safety violations can
nullify an important invariant: the vtable pointer stored in an
object of type ⌧ always points to the vtable of ⌧ or one of its
subclasses. If an attacker can corrupt an object’s vtable pointer
to instead point to a counterfeit vtable, then they can hijack
program control ﬂow whenever that object calls one of its
virtual methods, potentially executing malicious shellcode [4].
In this paper, we call such attacks vtable hijacking and describe
an efﬁcient technique to prevent them.
Security researchers previously demonstrated one of the
many ways an attacker can hijack vtables: by exploiting use-
after-free errors. In this particular attack method, an adversary
ﬁrst identiﬁes a dangling pointer, a reference to an object
that has been freed. The attacker then tricks the program into
allocating both: (1) a counterfeit vtable and (2) a pointer to
this counterfeit vtable at the start of the memory where the
freed object was stored. Finally, the attacker manipulates the
program to invoke a virtual method via the dangling pointer.
Because the attacker has overwritten the vtable pointer in the
freed object, this method call will jump to an address of the
attacker’s choosing, as speciﬁed by their counterfeit vtable.
Exploiting such use-after-free errors is just one way to launch
vtable hijakcing attacks, others include traditional buffer over-
ﬂows on the stack or the heap [4] and type confusion [5],
[6] attacks. Unfortunately, such vtable hijacking attacks are no
longer merely a hypothetical threat [7], [8].
We increasingly observe robust vtable hijacking attacks
in the wild, often leading to the execution of malicious
shellcode. Such attacks have recently been shown practical in
complex applications, including major web browsers: in recent
Pwn2Own competitions, vtable hijacking enabled multiple
arbitrary code execution attacks in Google Chrome [9], Internet
Explorer [10], and Mozilla Firefox [11]. In fact, abusing
dynamic dispatch in C++ was the major security weakness
in all these browsers. In a recent Google Chrome exploit,
Pinkie Pie employed a vtable hijacking attack to construct a
Zero-day vulnerability to escape the tab sandbox and execute
arbitrary code [12]. As a result of such attacks, researchers
have recently singled out vtable hijacking as one of the most
straightforward attack vectors exploiting heap vulnerabilities,
as an attacker can often construct inputs to inﬂuence when a
program allocates and frees objects.
Unfortunately, existing defenses that could prevent vtable
hijacking are either incomplete or do not speciﬁcally take
advantage of the C++ type system to provide the best possible
performance. Techniques like reference counting can help miti-
gate vtable hijacking attacks that exploit dangling pointers, e.g.
by preventing dangling pointers from being used for invoking
methods. Unfortunately, there are many other ways to mount
vtable hijacking attacks that do not require a dangling pointer.
Other techniques like control ﬂow integrity [13], [14], [15],
[16], [17] can secure all indirect jumps to prevent many kinds
of control ﬂow hijacking attacks, including vtable hijacking.
However, these techniques do not take advantage of the C++
type system for the speciﬁc task of securing virtual method
calls, and therefore none of these techniques treat C++ virtual
method calls both precisely and efﬁciently.
In this paper, we address the growing threat of vtable
hijacking with SAFEDISPATCH, an enhanced C++ compiler
that prevents such attacks. SAFEDISPATCH ﬁrst performs a
static class hierarchy analysis (CHA) to determine, for each
class c in the program, the set of valid method implementations
that may be invoked by an object of static type c. SAFEDIS-
PATCH uses this information to instrument the program with
dynamic checks, ensuring that, at runtime, all method calls
invoke a valid method implementation according to C++
dynamic dispatch rules. By carefully optimizing these checks,
we were able to reduce runtime overhead to just 2.1% and
memory overhead to just 7.5% in the ﬁrst vtable-safe version
of the Google Chromium browser which we built with the
SAFEDISPATCH compiler.
To summarize, this paper makes the following contribu-
tions:
• We develop SAFEDISPATCH, a comprehensive defense
against vtable hijacking attacks. We detail the static
analysis and compilation techniques to efﬁciently en-
sure control ﬂow integrity through virtual method
calls.
• We detail the implementation of SAFEDISPATCH as an
enhanced C++ compiler and discuss several security
and performance trade offs that inﬂuenced our design.
• We applied SAFEDISPATCH to the entire Google
Chromium web browser code base to evaluate the
effectiveness and efﬁciency of our approach. By de-
veloping a handful of carefully crafted optimizations,
2
public: virtual void display(string s) { ... }
// for displaying content on screen
class Window: {
};
// specialized for small screens on mobile devices
class MobileWin: public Window {
};
Window* w = flag ? new Window() : new MobileWin();
// invoke virtual method
w->display("Hello");
delete w;
// free w, now dangling
public: virtual void display(string s) { ... }
// behavior of code generated for w->display("Hello")
method;
typedef void*
typedef method* vtable;
vtable t = *((vtable *)w); // 1. vtable @ 1st word of object
method m = t[0];
m(w, "Hello");
// method is func ptr of any type
// vtable is array of methods
// 2. lookup by display’s id, 0
// 3. make virtual call
Fig. 1. C++ Dynamic Dispatch. Consider the simple Window class above
for displaying a string on the screen. C++ compilers translate each virtual
method call into lower level code that performs three steps: (1) dereference the
ﬁrst word of the calling object to retrieve its class’s vtable, (2) index into the
vtable by the method’s position in the class to retrieve the appropriate function
pointer, and (3) call the retrieved function pointer, passing the calling object
as the ﬁrst argument, followed by any additional arguments. If an attacker
corrupts an object’s vtable pointer to point to a counterfeit vtable, possibly by
exploiting a dangling pointer, then they can cause steps (1) and (2) to lookup
malicious code and step (3) to execute it.
we were able to reduce runtime overhead to just 2.1%
and memory overhead to just 7.5%.
In the next section we provide additional background on
C++ dynamic dispatch and vtable hijacking and then overview
how SAFEDISPATCH prevents such attacks. Section III follows,
where we detail the SAFEDISPATCH compiler, key optimiza-
tions we developed to minimize overhead, and some of the
different security and performance tradeoffs we considered.
Next, in Section VI, we evaluate our SAFEDISPATCH imple-
mentation along several dimensions, including performance
overhead, while in Section VII we discuss the security im-
plications of our approach. In Section VIII we survey existing
defenses, discussing their effectiveness at mitigating vtable hi-
jacking in complex, high performance systems and comparing
them with SAFEDISPATCH. Finally, in Section IX we consider
future directions and conclude.
II. SAFEDISPATCH OVERVIEW
In this section we provide additional background on dy-
namic dispatch in C++,
illustrate vtable hijacking with a
detailed example, and provide a high level description of how
SAFEDISPATCH prevents such attacks.
A. Dynamic Dispatch in C++
Before detailing an example vtable hijacking attack, we
brieﬂy review how dynamic dispatch invokes object methods
in C++. Consider the code in the upper part of Figure 1, which
declares two classes: a Window class with one virtual method
named display for displaying a string on the screen and a
MobileWin subclass of Window which overrides display
to provide an implementation specialized for smaller screens.
C++ dynamic dispatch rules dictate that when an object
implementation invoked
calls a virtual method,
the actual
depends on the runtime type of the calling object. This layer
of indirection allows subclasses to override their parent class’s
implementation of methods and is one of the key mechanisms
for polymorphism in C++. For example, in the code snippet
from Figure 1, the call w->display("Hello") will either
invoke Window::display or MobileWin::display,
depending on what w refers to at run-time, which in turn is
determined by the flag variable.
Of the many implementation strategies for dynamic dis-
patch, Virtual Method Tables, or vtables are the most common.
Prevalent C++ compilers, including GCC, Visual C++, and
Clang++, all use vtables due to their efﬁciency. To implement
vtables, the compiler assigns each virtual method in a class
an identiﬁer, which for simplicity we assume is done by
numbering virtual methods sequentially. A vtable for class C is
then an array t such that t[i] is the implementation of method i
for class C. At compile time, the compiler constructs a vtable
for each class, and inserts code in the constructor of each class
to initialize the ﬁrst word of the constructed object with a
pointer to the vtable for that class.
To implement a virtual method call the compiler generates
code that performs three steps: (1) load the vtable pointer,
located at position 0 in the calling object, (2) lookup index i in
the vtable, where i is the index of the method being called (3)
call the method implementation found at index i in the vtable.
The lower part of Figure 1 uses C++ notation to illustrate
the behavior of code generated for w->display("Hi"),
assuming that display is given index 0 by the compiler.
Note that if w points to a Window object, then the vtable
will contain Window::display at location 0, whereas if w
points to a MobileWin object, then the vtable will contain
MobileWin::display at location 0.
Because vtables are used in determining control ﬂow,
if an attacker can illegally manipulate an object’s vtable
pointer,
they can hijack program execution whenever that
object invokes a virtual method. Since objects are ubiquitous
in C++ programs, such control data is abundant, making
vtable hijacking an attractive target for adversaries seeking to
exploit low-level programming errors. We next illustrate how
an attacker may mount such attacks.
B. vtable Hijacking
Having reviewed C++ dynamic dispatch, we now illustrate
an example of vtable hijacking using the code in Figure 2.
This code mimics the structure of a browser kernel in the style
of OP [18] or Google Chrome [19], [20]. In these browsers,
tabs run as separate, strictly sandboxed, processes whose only
capability is communicating with the browser kernel process.
To perform privileged operations, e.g. rendering to the screen
or initiating a network connection, a tab process must send
requests to the browser kernel process which enforces access
control for privileged operations. This architecture provides
strong security properties: even fully compromising a tab does
not immediately grant an attacker the ability to run arbitrary
code since the tab sandbox prevents an exploited tab from
performing any privileged operations. Of course, if the browser
kernel contains an exploitable bug, the attacker may take full
control of the underlying system.
class Shell {
public: virtual string run(string cmd) { ... }
};
// for displaying content on screen
class Window: {
public: virtual void display(string s) { ... }
};
// specialized for small screens on mobile devices
class MobileWin: public Window {
public: virtual void display(string s) { ... }
};
void tab_request_handler_loop(void) {
Shell*
Window* win = SMALL_SCREEN ? new MobileWin() : new Window();
= NULL;
sh
while (TRUE) {
TabRequest r = recv_tab_request();
switch (r.kind) {
case GET_DATE:
if (sh == NULL)
sh = new Shell();
// run shell with safe, const string
string d = sh->run("date");
send_tab_response(r.originating_tab, d);
break;
case DISPLAY_ALERT:
vtable t = *((vtable *)win);