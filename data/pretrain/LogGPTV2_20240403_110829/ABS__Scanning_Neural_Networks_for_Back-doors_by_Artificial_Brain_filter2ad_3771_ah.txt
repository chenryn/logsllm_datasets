### Reverse Engineering Triggers Using Compromised Neurons

In the context of a trojaned model, the Automatic Backdoor Scanner (ABS) may identify multiple compromised neurons. For our analysis, we randomly select one compromised neuron to reverse engineer the trigger. Row 3 in the table below demonstrates the triggers reverse engineered using all compromised neurons together. To utilize all compromised neurons, we modify \( f1 \) in Algorithm 2 to be the sum of the activations of all compromised neurons.

As illustrated in Figure 26, the triggers reverse engineered using multiple neurons do not outperform those derived from a single neuron. This supports our design choice of using just one neuron for reverse engineering.

### Table 7: Accuracy and Attack Success Rate of Trojaned Models

| Pixel | Dataset | Model | Benign (20) | RI(3) | YI(3) | YS(3) | RS(3) | MP(3) | Static(1) | Gotham(3) | Adversarial(1) | Nashville(3) |
|-------|---------|-------|-------------|-------|-------|-------|-------|-------|-----------|------------|---------------|--------------|
| 0.3%  | CIFAR-10 | NiN   | 88.7%       | -0.6% | -0.1% | -0.4% | -1.5% | 4.2%  | 1.2%      | 1.0%       | 4.1%          | 10.3%        |
| 92.7% | GTSRB    | VGG   | 92.1%       | -0.6% | -0.1% | -0.4% | -1.5% | 4.2%  | 1.2%      | 1.0%       | 4.1%          | 10.3%        |
| 93.0% | ResNet32 | -     | 92.4%       | -0.6% | -0.1% | -0.4% | -1.5% | 4.2%  | 1.2%      | 1.0%       | 4.1%          | 10.3%        |
| 96.8% | ResNet110| -     | 94.9%       | -0.6% | -0.1% | -0.4% | -1.5% | 4.2%  | 1.2%      | 1.0%       | 4.1%          | 10.3%        |
| 90.2% | ImageNet | VGG   | 92.4%       | -0.6% | -0.1% | -0.4% | -1.5% | 4.2%  | 1.2%      | 1.0%       | 4.1%          | 10.3%        |

### Figure 26: Comparison of Reverse Engineered Triggers
- **(a) Original Triggers**
- **(b) Triggers Reverse Engineered on 1 Neuron**
- **(c) Triggers Reverse Engineered on Multiple Neurons**

### Table 8: REASR of ABS with Different Trigger Sizes

| Trigger Size | 25% | 35% | 40% | 65% | 75% | 98% | 100% |
|--------------|-----|-----|-----|-----|-----|-----|------|
| MMS          | 6%  | 8%  | 83% | 100%| 100%| 100%| 100% |
| TS           | 19% | 15% | 25% | 58% | 95% | 100%| 100% |
| 10%          | 23% | 43% | 100%| 100%| 100%| 100%| 100% |
| 14%          | 13% | 23% | 33% | 60% | 85% | 100%| 100% |
| 4%           | 100%| 100%| 100%| 100%| 100%| 100%| 100% |
| 2%           | 100%| 100%| 100%| 100%| 100%| 100%| 100% |
| 2%           | 4%  | 6%  | 10% | 14% | 19% | 25% | -    |

### Table 9: REASR for Label-Specific Attacks

| Label  | Plane | Car | Bird | Cat | Deer | Dog | Frog | Horse | Ship | Truck |
|--------|-------|-----|------|-----|------|-----|------|-------|------|-------|
| Trojaned| 100%  | 100%| 100% | 100%| 100% | 100%| 100% | 100%  | 17%  | 100%  |
| Benign | 0%    | 0%  | 17%  | 17% | 33%  | 33% | 17%  | 100%  | 50%  | 17%   |

### Table 10: Perturbing Parameters and Using Data Augmentation in NC

| Model | MULTIPLIER | THRESHOLD | Pixel Feature | Benign | Pixel Feature | Benign | Pixel Feature | Benign |
|-------|------------|-----------|---------------|--------|---------------|--------|---------------|--------|
| NiN   | 0.8        | 0.01      | 40%           | 90%    | 90%           | 40%    | 85%           | 40%    |
| VGG   | 0.9        | 0.1       | 90%           | 47%    | 85%           | 40%    | 70%           | 53%    |
| ResNet| 0.99       | 1         | 90%           | 47%    | 85%           | 40%    | 70%           | 53%    |
| Data Augmentation | 60% | 50% | - | - | - | - | - | - |

### Sensitivity of Parameters in ABS

The cost function in Algorithm 2 can be re-written as:
\[ \text{cost} = w1 \left( \cdot f2 - \frac{w2}{w1} \right) + w3 \left( \cdot f1 + \frac{w3}{w1} \right) \cdot \text{sum(mask)} - \frac{w4}{w1} \]

We evaluate the sensitivity of weight parameters \( w1, w2, w3, \) and \( w4 \). Since \( w1 \) is a common parameter, we focus on tuning \( w2, w3, \) and \( w4 \).

- **\( w2 \)**: Default value is \( 1e-4 \). We try values ranging from \( 1e-6 \) to \( 1e-2 \).
- **\( w3 \)**: Default value is 50. We try values from 0.5 to 500.
- **\( w4 \)**: Default value is 10. We try values from 0.1 to 1000.

Table 11 shows the average REASR for different parameter values. Changing \( w2 \) and \( w3 \) does not significantly impact REASR. For \( w4 \), ABS is effective from 0.1 to 10, but performance degrades beyond 10.

### Table 11: Sensitivity of ABS Parameters

| Parameter | w2 | w3 | w4 |
|------------|----|----|----|
| Value      | 1E-06 | 1E-05 | 1E-04 | 1E-03 | 1E-02 | 50 | 500 | 5000 | 0.1 | 1 | 10 | 100 | 1000 |
| REASR      | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.98 | 0.25 |