1.  使用以下命令启动追踪过程：
    ``` literallayout
    # /usr/share/bcc/tools/tcptracer
    Tracing TCP established connections. Ctrl-C to end.
    T  PID    COMM        IP SADDR        DADDR       SPORT  DPORT
    A  1088   ns-slapd    4  192.0.2.153  192.0.2.1   0      65535
    A  845    sshd        4  192.0.2.1    192.0.2.67  22     42302
    X  4502   sshd        4  192.0.2.1    192.0.2.67  22     42302
    ...
    ```
    每当内核连接、接受、或关闭连接时，`tcptracer`{.literal}
    会显示连接详情。
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `tcptracer(8)`{.literal} man page。
-   有关 `tcptracer`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/tcptracer_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `tcptracer(8)`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/tcptracer --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#tracing-ipv4-and-ipv6-listen-attempts_network-tracing-using-the-bpf-compiler-collection}追踪 IPv4 和 IPv6 侦听尝试 {.title}
:::
`solisten`{.literal} 实用程序跟踪所有 IPv4 和 IPv6
侦听尝试。它跟踪监听尝试，包括最终失败或者不接受连接的监听程序。当程序要侦听
TCP 连接时，程序会追踪内核调用的功能。
::: orderedlist
**流程**
1.  输入以下命令启动显示所有监听 TCP 尝试的追踪过程：
    ``` literallayout
    # /usr/share/bcc/tools/solisten
    PID    COMM           PROTO         BACKLOG     PORT     ADDR
    3643   nc             TCPv4         1           4242     0.0.0.0
    3659   nc             TCPv6         1           4242     2001:db8:1::1
    4221   redis-server   TCPv6         128         6379     ::
    4221   redis-server   TCPv4         128         6379     0.0.0.0
    ....
    ```
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `solisten`{.literal} man page。
-   有关 `solisten`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/solisten_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `solisten`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/solisten --ebpf`{.literal} 命令。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#summarizing-the-service-time-of-soft-interrupts_network-tracing-using-the-bpf-compiler-collection}软中断的服务时间概述 {.title}
:::
`softirqs`{.literal} 工具总结了提供软中断的时间（软
IRQ），并在此以总数或直方分布的形式显示。该工具使用
`irq:softirq_enter`{.literal} 和 `irq:softirq_exit`{.literal}
内核追踪点，这是稳定的追踪机制。
::: orderedlist
**流程**
1.  输入以下命令启动追踪 `soft irq`{.literal} 事件时间：
    ``` literallayout
    # /usr/share/bcc/tools/softirqs
    Tracing soft irq event time... Hit Ctrl-C to end.
    ^C
    SOFTIRQ          TOTAL_usecs
    tasklet                  166
    block                   9152
    net_rx                 12829
    rcu                    53140
    sched                 182360
    timer                 306256
    ```
2.  按 [**Ctrl**]{.keycap}+[**C**]{.keycap} 停止追踪过程。
:::
::: itemizedlist
**其它资源**
-   详情请查看 `softirqs`{.literal} man page。
-   有关 `softirqs`{.literal} 和示例的详情，请查看
    `/usr/share/bcc/tools/doc/softirqs_example.txt`{.literal} 文件。
-   要显示 eBPF 脚本 `solisten`{.literal} 上传到内核，请使用
    `/usr/share/bcc/tools/softirqs --ebpf`{.literal} 命令。
-   有关 `mpstat`{.literal} 如何使用此信息的详情，请查看
    `mpstat(1)`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#network-tracing-using-the-bpf-compiler-collection_configuring-and-managing-networking.html#additional_resources_8}其它资源 {.title}
:::
::: itemizedlist
-   有关 BCC 的详情，请查看 `/usr/share/doc/bcc/README.md`{.literal}
    文件。
:::
:::
:::
[]{#getting-started-with-tipc_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#getting-started-with-tipc_configuring-and-managing-networking}第 52 章 TIPC 入门 {.title}
:::
透明进程间通信（TIPC），也称为
`Cluster Domain Sockets`{.literal}，用于群集范围的操作的进程间通信（IPC）服务。
在高可用性和动态集群环境中运行的应用程序有特殊需要。集群中的节点数量可能会有所不同，路由器可能会失败，且出于负载均衡的考虑，功能也可以移到集群中的不同节点。TIPC
可最大程度降低应用程序开发人员处理此类问题的工作，并尽可能以正确和最佳的方式处理它们。另外，TIPC
比一般协议（如 TCP）提供效率更高且容错的通讯。
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#the-architecture-of-tipc_getting-started-with-tipc}TIPC 的构架 {.title}
:::
TIPC 是使用 TIPC
和数据包传输服务(`bearer`{.literal})的应用程序之间的一层，跨越传输级别、网络和信号链路层。然而，TIPC
可以使用不同的传输协议作为 bearer，这样 TCP 连接就可以充当 TIPC
信号连接的 bearer。
TIPC 支持以下 bearer:
::: itemizedlist
-   Ethernet
-   InfiniBand
-   UDP 协议
:::
TIPC 提供了在 TIPC 端口间可靠传送信息，这是所有 TIPC 通讯的端点。
以下是 TIPC 构架图：
::: informalfigure
::: mediaobject
```{=html}
```
```{=html}
```
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#loading-the-tipc-module-when-the-system-boots_getting-started-with-tipc}系统引导时载入 tipc 模块 {.title}
:::
在您使用 TIPC 协议前，载入 `tipc`{.literal}
内核模块。本节介绍如何在系统引导时配置 RHEL 自动载入这个模块。
::: orderedlist
**流程**
1.  使用以下内容创建 `/etc/modules-load.d/tipc.conf`{.literal} 文件：
    ``` literallayout
    tipc
    ```
2.  重启 `systemd-modules-load`{.literal}
    服务在不重启系统的情况下载入该模块：
    ``` literallayout
    # systemctl start systemd-modules-load
    ```
:::
::: orderedlist
**验证步骤**
1.  使用以下命令验证 RHEL 是否已载入 `tipc`{.literal} 模块：
    ``` literallayout
    # lsmod | grep tipc
    tipc    311296  0
    ```
    如果命令没有显示 `tipc`{.literal} 模块的条目，RHEL 无法加载它。
:::
::: itemizedlist
**其它资源**
-   有关系统引导时载入模块的详情，请参考 `modules-load.d(5)`{.literal}
    man page。
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#creating-a-tipc-network_getting-started-with-tipc}创建 TIPC 网络 {.title}
:::
这部分论述了如何创建 TIPC 网络。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
这些命令只临时配置 TIPC 网络。要在节点上永久配置
TIPC，在脚本中使用此流程的命令，并将 RHEL 配置为在系统引导时执行该脚本。
:::
::: itemizedlist
**先决条件**
-   已载入 `tipc`{.literal} 模块。详情请查看[在系统引导时载入 tipc
    模块时](#getting-started-with-tipc_configuring-and-managing-networking.html#loading-the-tipc-module-when-the-system-boots_getting-started-with-tipc "系统引导时载入 tipc 模块"){.link}
    [在系统引导时载入 tipc
    模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_networking/index#loading-the-tipc-module-when-the-system-boots_getting-started-with-tipc){.link}
:::
::: orderedlist
**流程**
1.  可选：设置一个唯一的节点身份，如 UUID 或节点的主机名：
    ``` literallayout
    # tipc node set identity host_name
    ```
    身份可以是任何由最多 16 个字母和数字组成的唯一字符串。
2.  添加 bearer。例如：要将以太网用作介质，并将 `enp0s1`{.literal}
    设备用作物理 bearer 设备，请输入：
    ``` literallayout
    # tipc bearer enable media eth device enp1s0
    ```
3.  可选： 要获得冗余和更好的性能，请使用上一步中的命令附加更多
    bearer。您可以配置最多三个 bearer，但在同一介质上不能超过两个。
4.  在应该加入 TIPC 网络的每个节点中重复前面的所有步骤。
:::
::: orderedlist
**验证步骤**
1.  显示集群成员的链接状态：
    ``` literallayout
    # tipc link list
    broadcast-link: up
    5254006b74be:enp1s0-525400df55d1:enp1s0: up
    ```
    此输出显示，节点 `5254006b74be`{.literal} 上的 bearer
    `enp1s0`{.literal} 和节点 `525400df55d1`{.literal} 的 bearer
    `enp1s0`{.literal} 之间的链接是 `up`{.literal}。
2.  显示 TIPC 发布表：
    ``` literallayout
    # tipc nametable show
    Type       Lower      Upper      Scope    Port       Node
    0          1795222054 1795222054 cluster  0          5254006b74be
    0          3741353223 3741353223 cluster  0          525400df55d1
    1          1          1          node     2399405586 5254006b74be
    2          3741353223 3741353223 node     0          5254006b74be
    ```
    ::: itemizedlist
    -   有两个服务类型为 `0`{.literal}
        的条目表示两个节点是这个集群的成员。
    -   服务类型为 `1`{.literal} 的条目代表内置拓扑服务跟踪服务。
    -   服务类型为 `2`{.literal}
        的条目显示在发布节点中看到的链接。范围限制
        `3741353223`{.literal} 代表 peer 端点的地址（基于节点身份的唯一
        32 位哈希值）,以十进制格式表示。
    :::
:::
::: itemizedlist
**其它资源**
-   有关您可以使用的其它 bearer 以及对应的命令行参数的详情，请查看
    `tipc-bearer(8)`{.literal} man page。
-   有关 `tipc namespace`{.literal} 命令的详情请参考
    `tipc-namespace(8)`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tipc_configuring-and-managing-networking.html#additional_resources_9}其它资源 {.title}
:::
::: itemizedlist
-   红帽建议使用其他 bearer
    级别协议来根据传输介质加密节点之间的通信。例如：
    ::: itemizedlist
    -   MACsec：详情请查看 [使用 MACsec 加密第 2
        层流量](#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_configuring-and-managing-networking.html "第 35 章 使用 MACsec 加密同一物理网络中的第 2 层流量"){.link}。
    -   IPsec：详情请参考 `Securing networks`{.literal} 指南中的[使用
        IPsec 配置
        VPN](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/securing_networks/configuring-a-vpn-with-ipsec_securing-networks){.link}
        部分。
    :::
-   有关如何使用 TIPC 的示例，请使用
    `git clone git://git.code.sf.net/p/tipc/tipcutils`{.literal}
    命令克隆上游 GIT 存储库。该仓库包含使用 TIPC
    功能的演示和测试程序的源代码。请注意，这个软件仓库不是由红帽提供的。
-   有关 TIPC 协议的详情，请参阅
    [透明间进程通信协议。](http://tipc.io/protocol.html){.link}
-   有关 TIPC 编程的详情，请参阅 [TIPC
    程序员指南](http://tipc.io/protocol.html){.link}。
:::
:::
:::