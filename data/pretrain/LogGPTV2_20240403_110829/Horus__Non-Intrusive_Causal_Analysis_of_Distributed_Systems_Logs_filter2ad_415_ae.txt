### Event Comparison and Causal Graph Analysis

For the Horus approach, the query compares the logical timestamps of two events. We selected ten event pairs, each with a causal graph containing 10% of the total events in the graph. For example, in a graph with 100 events, each causal graph would contain 10 events. As the graph size increases, the dimension of each pair's causal graph also increases.

Figure 7 illustrates the execution time for each query across different graph sizes. Both axes are represented on a logarithmic scale. The negligible standard deviation indicates that both queries are insensitive to the location of the event pair within the graph. This means that the performance is consistent whether the pair is at the top, middle, or bottom of the graph.

### Performance Analysis

The performance of the shortest path algorithm degrades as the graph grows. For graphs with over 100,000 nodes, the traversal-based approach becomes approximately 30 times slower than comparing logical timestamps. This is because comparing logical timestamps does not require any path traversal; it simply compares the timestamps based on vector clock properties.

### Evaluation for Q2

In this experiment, the Cypher query uses built-in algorithms to find all paths between two events. The position of the event pair and the direction of the internal traversal algorithm influence the query performance. For instance, if the pair is positioned at the top of the graph and the traversal direction is from top to bottom, the query performance will be less efficient.

To ensure a rigorous and fair comparison, we evaluated the traversal-based query with the event pair positioned in the middle of the graph, where the causal graph contains 10 nodes. We chose this pair for two reasons: 1) most analyses do not focus on the beginning or end of the causal graph, and 2) the performance of the path traversal is consistent regardless of the direction.

For evaluating the Horus approach, we used the same procedure as in Q1, selecting ten event pairs, each with a causal graph containing 10% of the total events. Figure 8 shows the performance degradation when using the traversal-based query to extract causal paths on small graphs (from 10 to 100 nodes).

In contrast, the Horus logical-time-based approach is insensitive to the location of the event pair in the graph. For a graph with 100 events, the execution time using logical time decreases from approximately 1653 seconds to approximately 4 milliseconds.

### Summary

The Horus logical-time-based approach scales much better than the traversal-based query for causal queries. This is particularly evident in large graphs, where the traversal-based approach becomes significantly slower.

### Related Work

**Context Propagation:** Distributed tracing techniques like X-Trace [26], Dapper [27], Pivot Tracing [28], Canopy [29], and others [30]–[32] use context propagation to capture causality in distributed systems. These methods propagate identifiers across software components and machine boundaries but require source code instrumentation, which can be impractical for third-party components.

**Watermelon [33]:** This is a distributed debugging framework that tracks comprehensive causality but requires a training phase where engineers must inspect execution traces and write specifications. This can be challenging in modern distributed systems with many heterogeneous components.

**XVector [34]:** A vector clock logging library that augments log messages with vector timestamps for visualization. However, it requires developers to adopt it as a logging library, which may be impractical for third-party components.

**Log-Based Analysis:** Previous works have used log entries for performance analysis [5], [35] and anomaly detection [36]–[39]. For example, lprof [5] uses static analysis to detect identifiers for correlating request log entries, while LRTrace [35] applies pattern matching to unstructured logs to correlate resource usage metrics with logs. Log3C [36], LogRobust [37], DeepLog [38], and CloudRaid [39] leverage machine learning techniques for log-based analysis, anomaly detection, and concurrency bug identification.

**Operating System Internals:** Some approaches infer causality by monitoring system internals [9], [40], [41]. vPath [41] is an application-agnostic monitor that intercepts communication and process syscalls to discover request processing paths. Falcon [9] generates a causally-coherent trace of logs from several sources by intercepting system calls and leveraging kernel event causality. However, Falcon relies on a Satisfiability Modulo Theories (SMT) constraint solver, which does not scale well for executions with more than a few thousand events. In contrast, Horus offers a powerful query language and can output traces compatible with ShiViz [24].

### Conclusions

Horus is a system for analyzing distributed system logs in a non-intrusive, causally consistent, and scalable manner. It leverages kernel-level operations traced at runtime to generate a graph of the distributed execution, where log messages are causally ordered. Key contributions include storage and processing techniques that handle large volumes of data and allow debugging operations to be encoded in a high-level graph querying language. The combination of scalar and vector clocks significantly reduces query execution time.

Our case study with TrainTicket, a ticket booking application with 40+ microservices, demonstrates that Horus effectively pinpoints the root cause of anomalous behavior. Experimental evaluations show that Horus scales better with the number of events, aggregates logs from multiple sources more quickly into a causally consistent execution trace, and executes analysis queries more efficiently.

### Acknowledgments

We thank the anonymous reviewers and our shepherd, Cheng Li, for their helpful comments and suggestions. This work is funded by project AIDA (POCI-01-0247-FEDER-045907), co-financed by the European Regional Development Fund (ERDF) through the Operacional Program for Competitiveness and Internationalisation (COMPETE 2020) and by the Portuguese Foundation for Science and Technology (FCT) under CMU Portugal, and by National Funds through the Portuguese funding agency FCT - Fundação para a Ciência e a Tecnologia with grant SFRH/BD/129771/2017 and within project UIDB/50014/2020.

### References

[References are listed here, following the original format.]

---

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the content is well-structured and easy to understand.