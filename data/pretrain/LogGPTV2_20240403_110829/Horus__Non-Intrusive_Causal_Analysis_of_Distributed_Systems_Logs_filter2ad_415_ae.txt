events exist. For the Horus’ approach, in turn, the query just
compares the logical timestamps of the two events.
We selected ten event pairs, each whose causal graph
contains 10% of the graph’s total events, and then executed the
queries for each pair. For instance, for a graph with 100 events,
each causal graph contains 10 events. Clearly, the dimension
of each pair’s causal graph also increases with the graph size.
Figure 7 unveils the execution time of each query for
different graph sizes. Observe that both axes are represented
)
s
m
(
e
m
i
T
107
106
105
104
103
102
101
100
1653157
51581
4166
152
52
4.07
5.92
151.3
20.4
 100 
 1k
 10k
 100k
Execution Graph Size (#events)
Horus
Path Traversal Query
Fig. 8: Evolution of the execution time of obtaining the causal
graph between two events using traversal-based query and the
logical-time-based approach implemented in Horus.
using logarithmic scale. One important note, derived from the
negligible std. dev., is that both queries are insensitive to pair
location. This is, each query shows similar performance either
for a pair positioned at the top of the graph or for a pair
positioned at the middle or at the bottom of it.
The performance of the shortest path algorithm decreases
as the graph grows. For 100,000+ nodes, it becomes ≈30
times slower than comparing logical timestamps. This happens
because comparing the logical time of any two events does not
require any sort of path traversal. Instead, it compares logical
timestamps according to the properties of vector clocks.
b) Evaluation for Q2.: For this experiment, the Cypher
query that relies on built-in algorithms simply aims at ﬁnding
all paths between the two events. In this case, the position of
the pair and the direction of the internal traversal algorithm in-
ﬂuence the query performance in the traversal-based approach.
For instance, a pair positioned at the top would lead the query
to be less performant if the traversal’s direction from the top
the the bottom of the graph and vice-versa.
To perform a rigorous and fair comparison, we evaluate the
traversal-based query with the pair positioned in the middle of
the graph, which causal graph contains 10 nodes. We selected
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:14 UTC from IEEE Xplore.  Restrictions apply. 
221
this pair for two reasons: 1) we assume that most analysis do
not focus on the beginning nor on the bottom of the causal
graph; and 2) the performance of the path traversal is the same,
independently of direction it takes.
In turn, for evaluating the Horus’ approach, we adopt the
same procedure as in for Q1, that is, we choose ten event pairs,
each which causal graph contains 10% of the total events.
Figure 8 shows the performance degradation incurred when
using the traversal-based query to extract causal paths on small
graphs (from 10 to 100 nodes).
In contrast
to the traversal-based query, our proposed
logical-time-based approach is insensitive to pair location in
the graph. Therefore, we can compare the performance of both
approaches in the scenario of a graph with 100 events.
For the scenario that compares both approaches, i.e., graph
with 100 events, using logical time decreases the execution
time from ≈1653 seconds to ≈4 milliseconds.
In summary, the Horus’ logical-time-based approach scales
much better than traversal-based query for causal queries.
VIII. RELATED WORK
Context propagation is a distributed tracing technique for
causal debugging and performance analysis in distributed
systems [25]. To capture causality, X-Trace [26], Dapper
[27], Pivot Tracing [28], Canopy [29] and others [30]–[32]
propagate identiﬁers in requests, jobs and tasks across software
component and machine boundaries. Nonetheless, it requires
instrumentation of the source code of software components,
otherwise the context-propagation chain is incomplete. More-
over, all these are workﬂow-centric approaches, while Horus
provides a comprehensive view of concurrent requests.
Watermelon [33] is distributed debugging framework capa-
ble of tracking comprehensive causality. Yet, it requires a train-
ing phase in which engineers must inspect execution traces
of component’s communications and write speciﬁcations that
determine which request contributed to the values read by a
later request. In modern distributed systems, analyzing execu-
tion traces of dozens of heterogeneous software components
poses a hard challenge to adopt Watermelon.
XVector [34] is a vector clock logging library that augments
log messages with vector timestamps to enable visualization of
distributed executions using ShiViz [24]. However, it requires
developers to adopt
it as logging library, which may be
unpractical for third-party components.
Log messages often carry valuable information about sys-
tem’s state and execution ﬂow. As such, previous works resort
to processing log entries for performance analysis [5], [35] and
anomaly detection [36]–[39]. Brieﬂy, lprof [5] resort to static
analysis to detect possible identiﬁers that aid correlation of
requests log entries. LRTrace [35] applies pattern matching to
unstructured logs to correlate resource usage metrics with logs.
Log3C [36] samples, clusters and matches log sequences for
identifying problems by correlating clusters of log sequences
with relevant key performance indicators. LogRobust [37],
DeepLog [38] and CloudRaid [39] leverage machine learning
techniques to aid log-based analysis, detect anomalies and
automatically ﬁnd concurrency bugs, respectively.
The operating system internals has been an exploration path
to infer causality in end-to-end requests [9], [40], [41]. vPath
[41] is an application-agnostic monitor that intercepts commu-
nication and process syscalls to precisely discover request pro-
cessing paths in systems that follow well-established program-
ming patterns. Falcon [9] is the most closely related work to
Horus and the current state-of-the-art for tracking causality in
a distributed execution via low-level tracing. Brieﬂy, Falcon is
a pipeline tool that generates a causally-coherent trace of logs
from several logging sources by intercepting system calls and
leveraging well-established causality between kernel events to
construct a causal trace of application logs. Falcon relies on
a Satisﬁability Modulo Theories constraint solver, which does
not scale to executions with more than a few thousands of
events, as shown in Section VII-B. Moreover, Horus offers a
powerful query language inherited from the underlying graph
database and is able to output traces compatible with the causal
diagram visualizer ShiViz [24].
IX. CONCLUSIONS
In this paper, we introduce Horus, a system for analyzing
distributed system logs in a non-intrusive, causally consistent,
and scalable fashion. Horus leverages kernel-level operations
traced at runtime to generate a graph of the distributed
execution in which log messages are causally ordered.
Given the large volume of data generated by kernel-level
tracing in real applications, the key contributions of Horus are
the storage and processing techniques proposed that deal with
scale, in terms of the amount of data, but also conceptually,
allowing debugging operations to be encoded in a high-level
graph querying language. In particular, the combination of
both scalar and vector clocks dramatically reduces the time
to run queries over the execution graph.
Our case study with TrainTicket, a ticket booking appli-
cation with 40+ microservices, demonstrates that Horus is
effective in pinpointing the root cause of anomalous behavior.
Moreover, the experimental evaluation of Horus against prior
state-of-the-art solutions shows that it i) scales better with the
number of events, ii) is faster to aggregate logs from multiple
sources into a causally consistent execution trace, and iii)
executes analysis queries over the trace more efﬁciently.
ACKNOWLEDGMENTS
We thank the anonymous reviewers and our shepherd,
Cheng Li, for their helpful comments and suggestions. This
work is funded by project AIDA (POCI-01-0247-FEDER-
045907), co-ﬁnanced by the European Regional Development
Fund (ERDF) through the Operacional Program for Compet-
itiveness and Internationalisation (COMPETE 2020) and by
the Portuguese Foundation for Science and Technology (FCT)
under CMU Portugal, and by National Funds through the
Portuguese funding agency FCT - Fundac¸ ˜ao para a Ciˆencia
e a Tecnologia with grant SFRH/BD/129771/2017 and within
project UIDB/50014/2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:14 UTC from IEEE Xplore.  Restrictions apply. 
222
[25] J. Mace and R. Fonseca, “Universal context propagation for distributed
the Thirteenth EuroSys
system instrumentation,” in Proceedings of
Conference, 2018, pp. 1–18.
[26] R. Fonseca, G. Porter, R. H. Katz, S. Shenker, and I. Stoica, “X-trace:
USENIX
A pervasive network tracing framework,” in NSDI ’07.
Association, 2007.
[27] B. H. Sigelman, L. A. Barroso, M. Burrows, P. Stephenson, M. Plakal,
D. Beaver, S. Jaspan, and C. Shanbhag, “Dapper, a large-scale distributed
systems tracing infrastructure,” Tech. Rep.
[28] J. Mace, R. Roelke, and R. Fonseca, “Pivot tracing: Dynamic causal
monitoring for distributed systems,” in SOSP ’15. ACM, 2015.
[29] J. Kaldor, J. Mace, M. Bejda, E. Gao, W. Kuropatwa, J. O’Neill, K. W.
Ong, B. Schaller, P. Shan, B. Viscomi et al., “Canopy: An end-to-end
performance tracing and analysis system,” in Proceedings of the 26th
Symposium on Operating Systems Principles, 2017, pp. 34–50.
[30] “Opentelemetry,” https://opentelemetry.io/.
[31] “Zipkin,” https://zipkin.io.
[32] “Lightstep,” https://lightstep.com.
[33] M. Whittaker, C. Teodoropol, P. Alvaro, and J. M. Hellerstein, “Debug-
ging distributed systems with why-across-time provenance,” in Proceed-
ings of the ACM Symposium on Cloud Computing. ACM, 2018, pp.
333–346.
[34] I. Beschastnikh, P. Liu, A. Xing, P. Wang, Y. Brun, and M. D.
Ernst, “Visualizing distributed system executions,” ACM Trans. Softw.
Eng. Methodol., vol. 29, no. 2, Mar. 2020.
[Online]. Available:
https://doi.org/10.1145/3375633
[35] A. Pi, W. Chen, X. Zhou, and M. Ji, “Proﬁling distributed systems in
lightweight virtualized environments with logs and resource metrics,” in
Proceedings of the 27th International Symposium on High-Performance
Parallel and Distributed Computing, 2018, pp. 168–179.
[36] S. He, Q. Lin, J.-G. Lou, H. Zhang, M. R. Lyu, and D. Zhang,
“Identifying impactful service system problems via log analysis,” in
Proceedings of the 2018 26th ACM Joint Meeting on European Software
Engineering Conference and Symposium on the Foundations of Software
Engineering, 2018, pp. 60–70.
[37] X. Zhang, Y. Xu, Q. Lin, B. Qiao, H. Zhang, Y. Dang, C. Xie, X. Yang,
Q. Cheng, Z. Li et al., “Robust log-based anomaly detection on unstable
log data,” in Proceedings of the 2019 27th ACM Joint Meeting on
European Software Engineering Conference and Symposium on the
Foundations of Software Engineering, 2019, pp. 807–817.
[38] M. Du, F. Li, G. Zheng, and V. Srikumar, “Deeplog: Anomaly
detection and diagnosis from system logs through deep learning,”
in Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security, ser. CCS ’17. New York, NY, USA:
Association for Computing Machinery, 2017, p. 1285–1298. [Online].
Available: https://doi.org/10.1145/3133956.3134015
[39] J. Lu, F. Li, L. Li, and X. Feng, “Cloudraid: Hunting concurrency bugs
in the cloud via log-mining,” in Proceedings of the 2018 26th ACM Joint
Meeting on European Software Engineering Conference and Symposium
on the Foundations of Software Engineering, ser. ESEC/FSE 2018.
New York, NY, USA: Association for Computing Machinery, 2018, p.
3–14. [Online]. Available: https://doi.org/10.1145/3236024.3236071
[40] P. Reynolds, J. L. Wiener, J. C. Mogul, M. K. Aguilera, and A. Vahdat,
“Wap5: black-box performance debugging for wide-area systems,” in
Proceedings of the 15th international conference on World Wide Web,
2006, pp. 347–356.
[41] B.-C. Tak, C. Tang, C. Zhang, S. Govindan, B. Urgaonkar, and R. N.
Chang, “vpath: Precise discovery of request processing paths from black-
box observations of thread and network activities.” in USENIX Annual
technical conference, 2009.
REFERENCES
[1] X. Zhou, X. Peng, T. Xie, J. Sun, C. Ji, W. Li, and D. Ding, “Fault
analysis and debugging of microservice systems: Industrial survey,
benchmark system, and empirical study,” IEEE Transactions on Software
Engineering, pp. 1–1, 2018.
[2] “Apache log4j,” https://logging.apache.org/log4j/2.x/.
[3] “Simple logging facade for java (slf4j),” http://www.slf4j.org/.
[4] D. Yuan, Y. Luo, X. Zhuang, G. R. Rodrigues, X. Zhao, Y. Zhang,
P. U. Jain, and M. Stumm, “Simple testing can prevent most critical
failures: An analysis of production failures in distributed data-intensive
systems,” in Proceedings of the 11th USENIX Conference on Operating
Systems Design and Implementation, ser. OSDI?14. USA: USENIX
Association, 2014, p. 249?265.
[5] X. Zhao, Y. Zhang, D. Lion, M. F. Ullah, Y. Luo, D. Yuan, and
M. Stumm, “Lprof: A non-intrusive request ﬂow proﬁler for distributed
systems,” in Proceedings of the 11th USENIX Conference on Operating
Systems Design and Implementation, ser. OSDI?14. USA: USENIX
Association, 2014, p. 629?644.
[6] L. Lamport, “Time, clocks, and the ordering of events in a distributed
system,” Communications of the ACM, vol. 21, no. 7, 1978.
[7] A. Sampath and C. Tripti, “Synchronization in distributed systems,” in
Advances in Computing and Information Technology, N. Meghanathan,
D. Nagamalai, and N. Chaki, Eds. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2012.
[8] “Elastic Stack: Elasticsearch, Logstash and Kibana,” https://www.elastic.
co/pt/products/.
[9] F. Neves, N. Machado et al., “Falcon: A practical log-based analysis tool
for distributed systems,” in 2018 48th Annual IEEE/IFIP International
Conference on Dependable Systems and Networks (DSN).
IEEE, 2018,
pp. 534–541.
[10] L. De Moura and N. Bjørner, “Z3: An efﬁcient SMT solver,” in TACAS
’08/ETAPS ’08. Springer-Verlag, 2008.
[11] X. Zhao, K. Rodrigues, Y. Luo, M. Stumm, D. Yuan, and Y. Zhou,
“Log20: Fully automated optimal placement of log printing statements
under speciﬁed overhead threshold,” in Proceedings of the 26th Sympo-
sium on Operating Systems Principles, 2017, pp. 565–581.
[12] F. Mattern, “Virtual time and global states of distributed systems,” in
Parallel and Distributed Algorithms. North-Holland, 1988, pp. 215–
226.
[13] T. Leesatapornwongsa, J. F. Lukman, S. Lu, and H. S. Gunawi, “Taxdc:
A taxonomy of non-deterministic concurrency bugs in datacenter
distributed systems,” in Proceedings of the Twenty-First International
Conference on Architectural Support
for Programming Languages
and Operating Systems, ser. ASPLOS ’16. New York, NY, USA:
Association for Computing Machinery, 2016, p. 517–530. [Online].
Available: https://doi.org/10.1145/2872362.2872374
[14] F. Neves, R. Vilac¸a, and J. Pereira, “Black-box inter-application trafﬁc
monitoring for adaptive container placement,” in Proceedings of the
35th Annual ACM Symposium on Applied Computing, ser. SAC ’20.
New York, NY, USA: Association for Computing Machinery, 2020, p.
259–266. [Online]. Available: https://doi.org/10.1145/3341105.3374007
Monitor-
https://www.weave.works/blog/
ing
recap-high-performance-linux-monitoring-with-ebpf/.
High-performance
with
eBPF,”
[15] “Recap:
Linux
[16] “eBPF - The Future of Networking and Security,” https://cilium.io/blog/
2020/11/10/ebpf-future-of-networking/.
[17] “Sysdig and Falco now powered by eBPF,” https://sysdig.com/blog/
sysdig-and-falco-now-powered-by-ebpf/.
[18] “iovisor/bcc: Bcc - tools for bpf-based linux io analysis, networking,
monitoring, and more,” https://github.com/iovisor/bcc.
[19] “Neo4j graph platform – the leader in graph databases,” https://neo4j.
com/.
[20] “Janusgraph - distributed, open source, massively scalable graph
database,” https://janusgraph.org/.
[21] “Logrus: Structured logger for Go,” https://github.com/sirupsen/logrus.
[22] “Apache kafka: A distributed streaming platform.” https://kafka.apache.
org/.
[23] C. J. Fidge, “Timestamps in message-passing systems that preserve the
partial ordering,” 1987.
[24] I. Beschastnikh, P. Wang, Y. Brun, and M. D. Ernst, “Debugging dis-
tributed systems: Challenges and options for validation and debugging,”
Communications of the ACM, vol. 59, no. 8, pp. 32–37, Aug. 2016.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:14 UTC from IEEE Xplore.  Restrictions apply. 
223