[root@db-172-16-3-150 ~]# dmsetup remove cachedev1  
```  
删除flashcache设备  
```  
[root@db-172-16-3-150 ~]# flashcache_destroy /dev/sda1  
flashcache_destroy: Destroying Flashcache found on /dev/sda1. Any data will be lost !!  
```  
使用一个机械硬盘, 加上flashcache后看看性能如何.  
```  
[root@db-172-16-3-150 ~]# df -h  
Filesystem            Size  Used Avail Use% Mounted on  
/dev/sdc1              29G   14G   14G  51% /  
tmpfs                  48G  8.0K   48G   1% /dev/shm  
/dev/sdc3              98G   40G   53G  43% /opt  
/dev/sdb1             221G   72G  138G  35% /ssd4  
[root@db-172-16-3-150 ~]# umount /opt  
[root@db-172-16-3-150 ~]# flashcache_create -v -p back -s 40G -b 4k cachedev1 /dev/sda1 /dev/sdc3  
cachedev cachedev1, ssd_devname /dev/sda1, disk_devname /dev/sdc3 cache mode WRITE_BACK  
block_size 8, md_block_size 8, cache_size 83886080  
Flashcache metadata will use 220MB of your 96733MB main memory  
Flashcache Module already loaded  
version string "git commit:   
"  
Creating FlashCache Volume : "echo 0 207254565 flashcache /dev/sdc3 /dev/sda1 cachedev1 1 2 8 83886080 512 140733193388544 8 | dmsetup create cachedev1"  
[root@db-172-16-3-150 ~]# mount /dev/mapper/cachedev1 /opt  
```  
测试fsync性能  
```  
[root@db-172-16-3-150 ~]# /home/bdr/pgsql/bin/pg_test_fsync -f /opt/1  
5 seconds per test  
O_DIRECT supported on this platform for open_datasync and open_sync.  
Compare file sync methods using one 8kB write:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                     12963.806 ops/sec      77 usecs/op  
        fdatasync                         11115.933 ops/sec      90 usecs/op  
        fsync                               412.602 ops/sec    2424 usecs/op  
        fsync_writethrough                              n/a  
        open_sync                         12989.584 ops/sec      77 usecs/op  
Compare file sync methods using two 8kB writes:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                      6513.141 ops/sec     154 usecs/op  
        fdatasync                          8324.517 ops/sec     120 usecs/op  
        fsync                               405.985 ops/sec    2463 usecs/op  
        fsync_writethrough                              n/a  
        open_sync                          6530.344 ops/sec     153 usecs/op  
Compare open_sync with different write sizes:  
(This is designed to compare the cost of writing 16kB  
in different write open_sync sizes.)  
         1 * 16kB open_sync write          9822.855 ops/sec     102 usecs/op  
         2 *  8kB open_sync writes         6519.366 ops/sec     153 usecs/op  
         4 *  4kB open_sync writes         3918.786 ops/sec     255 usecs/op  
         8 *  2kB open_sync writes           20.625 ops/sec   48486 usecs/op  
        16 *  1kB open_sync writes           10.415 ops/sec   96012 usecs/op  
Test if fsync on non-write file descriptor is honored:  
(If the times are similar, fsync() can sync data written  
on a different descriptor.)  
        write, fsync, close                 678.063 ops/sec    1475 usecs/op  
        write, close, fsync                2085.175 ops/sec     480 usecs/op  
Non-Sync'ed 8kB writes:  
        write                            188286.273 ops/sec       5 usecs/op  
```  
对比原机械硬盘的性能  
```  
[root@db-172-16-3-150 ~]# /home/bdr/pgsql/bin/pg_test_fsync -f /1  
5 seconds per test  
O_DIRECT supported on this platform for open_datasync and open_sync.  
Compare file sync methods using one 8kB write:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                       163.266 ops/sec    6125 usecs/op  
        fdatasync                           165.646 ops/sec    6037 usecs/op  
        fsync                                53.012 ops/sec   18864 usecs/op  
        fsync_writethrough                              n/a  
        open_sync                           164.367 ops/sec    6084 usecs/op  
Compare file sync methods using two 8kB writes:  
(in wal_sync_method preference order, except fdatasync  
is Linux's default)  
        open_datasync                        83.180 ops/sec   12022 usecs/op  
        fdatasync                           166.243 ops/sec    6015 usecs/op  
        fsync                                53.661 ops/sec   18636 usecs/op  
        fsync_writethrough                              n/a  
        open_sync                            82.807 ops/sec   12076 usecs/op  
Compare open_sync with different write sizes:  
(This is designed to compare the cost of writing 16kB  
in different write open_sync sizes.)  
         1 * 16kB open_sync write           165.158 ops/sec    6055 usecs/op  
         2 *  8kB open_sync writes           82.624 ops/sec   12103 usecs/op  
         4 *  4kB open_sync writes           41.285 ops/sec   24222 usecs/op  
         8 *  2kB open_sync writes           20.781 ops/sec   48122 usecs/op  
        16 *  1kB open_sync writes           10.390 ops/sec   96242 usecs/op  
Test if fsync on non-write file descriptor is honored:  
(If the times are similar, fsync() can sync data written  
on a different descriptor.)  
        write, fsync, close                  52.233 ops/sec   19145 usecs/op  
        write, close, fsync                  54.324 ops/sec   18408 usecs/op  
Non-Sync'ed 8kB writes:  
        write                            203661.070 ops/sec       5 usecs/op  
```  
postgresql update if exists else insert 测试模型结果  
flashcache device ssd+普通机械盘  
```  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 60  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 465274  
tps = 7754.017036 (including connections establishing)  
tps = 7756.166925 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003762        \setrandom id 1 50000000  
        2.056537        select f(:id);  
```  
普通机械盘+raid卡rw cache.  
```  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 60  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 71206  
tps = 1186.007977 (including connections establishing)  
tps = 1186.820771 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004485        \setrandom id 1 50000000  
        13.459944       select f(:id);  
```  
## 参考  
1\. http://ftp.sjtu.edu.cn/fedora/epel/6/x86_64/  
2\. https://github.com/facebook/flashcache/  
3\. http://blog.163.com/digoal@126/blog/static/163877040201463101652528/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")