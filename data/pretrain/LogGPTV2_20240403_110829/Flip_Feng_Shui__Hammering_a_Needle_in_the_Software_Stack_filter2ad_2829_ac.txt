### Enhanced Text

Rowhammer attacks not only accelerate the process of inducing bit flips but also enhance reliability by confining most bit flips to a specific (victim) row. To execute double-sided Rowhammer within KVM, it is necessary to know the host physical addresses inside the VM. However, this information is not directly available in the guest: guest physical addresses are mapped to host virtual addresses, which can be further mapped to any physical page by the Linux kernel. Similar to [30], we leverage transparent huge pages (THP) [5] for this purpose.

THP is a Linux kernel feature that operates in the background, merging virtually contiguous normal pages (e.g., 4 kB pages) into huge pages (e.g., 2 MB pages) that rely on contiguous pieces of physical memory. THP significantly reduces the number of page-table entries in suitable processes, leading to fewer TLB (Translation Lookaside Buffer) entries and improved performance for certain workloads. THP also serves as a form of memory massaging, allowing the attacker some control over how the system maps guest physical memory to host physical memory.

Once the VM is started and after a certain period, THP will transform most of the VM’s memory into huge pages. Our current implementation of dFFS (Double-Sided Flexible Flipper System) runs entirely in the userspace of the guest and relies on the default THP feature of both the host and the guest. Upon booting, dFFS allocates a large buffer with a size nearly equal to the available memory in the guest. The THP in the host then converts guest physical addresses into huge pages, and the THP in the guest turns the guest virtual pages backing dFFS’s buffer into huge pages as well. Consequently, dFFS’s buffer is largely backed by huge pages all the way down to host physical memory.

To ensure that dFFS’s buffer is backed by huge pages, we request the guest kernel to align the buffer at a 2 MB boundary. This ensures that if the buffer is backed by huge pages, it starts with one: on the x86_64 architecture, the virtual and physical huge pages share the lowest 20 bits, which are zero. The same principle applies when transitioning from guest physical addresses to host physical addresses. With this alignment, dFFS can assume that the start of the allocated buffer is the start of a memory row, and since multiple rows fit into a huge page, it can successively perform double-sided Rowhammer on these rows. To expedite the search for bit flips during double-sided Rowhammer, we use the row-conflict side channel for selecting hammering addresses within each row [44]. Additionally, we employ multiple threads to amplify the Rowhammer effect.

While THP provides an efficient and reliable method for inducing Rowhammer bit flips, it has unexpected interactions with KSM (Kernel Same-page Merging), which we will explore in the next section.

### 4.3 Memory Massaging with KSM

In Section 2.2, we discussed the operational semantics of KSM. Here, we detail some of its implementation features that are important for dFFS.

#### 4.3.1 Interaction with THP

As previously mentioned, KSM deduplicates memory pages with the same contents as soon as it finds them. KSM currently does not support deduplication of huge pages, but what happens when KSM finds matching contents within huge pages?

A careful study of KSM reveals that it always prioritizes reducing memory footprint over reducing TLB entries. Specifically, KSM breaks down huge pages into smaller pages if there is a small page inside with similar contents to another page.

This feature is crucial for the efficient and reliable implementation of dFFS but must be handled carefully. We can use huge pages as discussed earlier for efficient and reliable double-sided Rowhammer, while retaining control over which victim page to map in the middle of our target (vulnerable) huge page.

However, KSM can have undesirable interactions with THP from dFFS’s perspective. If KSM finds pages in the attacker VM’s memory with matching contents, it merges them with each other or with a page from a previously started VM. In such cases, KSM breaks THP by releasing one of its smaller pages to the system. To avoid this, dFFS uses a technique to evade KSM during its templating phase. KSM takes a few tens of seconds to mark the pages of dFFS’s VM as candidates for deduplication. This gives dFFS enough time to allocate a large buffer with the same size as the VM’s available memory and write unique integers at a predetermined location within each (small) page of this buffer as soon as the VM boots. The entropy present within dFFS’s pages prevents KSM from merging these pages, thus avoiding the breaking of THP.

#### 4.3.2 On dFFS Chaining

Initially, we planned to chain memory massaging primitives and FFS (Flexible Flipper System) to induce an arbitrary number of bit flips at many desired locations in the victim’s memory page. After using the first template for the first bit flip, the attacker could write to the merged memory page to trigger a copy-on-write event, ultimately unmerging the two pages (i.e., the attacker page from the victim page). At this stage, the attacker could use dFFS again with a new template to induce another bit flip.

However, the implementation of KSM does not allow this. During the copy-on-write event, the victim’s page remains in the stable tree, even if it is the only remaining page. This means that subsequent attempts for memory massaging result in the victim page controlling the location of physical memory, disabling the attacker’s ability to chain FFS attacks.

Even so, based on our single-bit flip cryptanalysis on public keys and our evaluation in Section 5, chaining is not necessary for performing successful end-to-end attacks with dFFS.

### 4.4 Attacking Weakened RSA

For the two attacks in this paper, we generate RSA private keys, i.e., the private exponents \(d'\) corresponding to corrupted moduli \(n'\) (as described in Section 3). We use \(d'\) to compromise two applications: OpenSSH and GPG.

Although the specifics of the applications differ, the attack pattern is the same and follows these steps:

1. **Obtain the Public Key File**: Obtain the file containing the RSA public key \((n, e)\). This is application-specific, but public keys are generally unprotected. We call this the input file.
2. **Memory Templating**: Using the memory templating step of Section 2.1, we obtain a list of templates that we can flip within a physical page. We flip bits according to the target templates to obtain corrupted keys. For each single bit flip, we save a new file. We call these files the corrupted files. According to the templating step, dFFS can create any of these corrupted files in the victim by flipping a bit in the page cache.
3. **Read Corrupted Public Keys**: One by one, we read the (corrupted) public keys for each corrupted file. If the corrupted file is parsed correctly and the public key has a changed modulus \(n' \neq n\) and the same \(e\), this \(n'\) is a candidate for factorization.
4. **Factorize Candidates**: We start factorizations of all \(n'\) candidates found in the previous step. As described in Section 3, the best-known algorithm for our scenario is ECM (Elliptic Curve Method), which finds increasingly large factors iteratively. We use the Sage [19] implementation of ECM for factorizing \(n'\). We invoke an instance of ECM per available core for each corrupted key with a 1-hour timeout (all available implementations of ECM run with a single thread).
5. **Compute Private Exponent**: For all successful factorizations, we compute the private exponent \(d'\) corresponding to \((n', e)\) and generate the corresponding private key to the corrupted public key. How to compute \(d'\) based on the factorization of \(n'\) is described in Section 3. We can then use the private key with the unmodified application. This step is application-specific and will be discussed for our case studies.

### 4.5 End-to-End Attacks

**Attacker Model**: The attacker owns a VM co-hosted with a victim VM on a host with DIMMs susceptible to Rowhammer. We assume that memory deduplication is enabled, as is common in public cloud settings [8]. The attacker can use the memory deduplication side-channel to fingerprint low-entropy information, such as the IP address of the victim VM, OS/library versions, and usernames on the system (e.g., through the /etc/passwd file in the page cache) as shown by previous work [32, 43, 56]. The attacker’s goal is to compromise the victim VM without relying on any software vulnerability. We now describe how this model applies to dFFS in two important and widely popular applications.

#### 4.5.1 OpenSSH

One of the most commonly used authentication mechanisms allowed by the OpenSSH daemon is an RSA public key. By adding a user’s RSA public key to the SSH authorized_keys file, the corresponding private key will allow login of that user without any other authentication (such as a password) in a default setting. The public key by default includes a 2048-bit modulus \(n\). The complete key is a 372-byte long base64 encoding of \((n, e)\).

The attacker can initiate an SSH connection to the victim with a correct victim username and an arbitrary private key. This interaction forces OpenSSH to read the authorized_keys file, resulting in this file’s contents being copied into the page cache at the right time, as discussed in Section 4.1. Public key cryptosystems do not require public keys to be secret, so we assume the attacker can obtain the victim’s public key. For instance, GitHub makes users’ submitted SSH public keys publicly available [27].

With the victim’s public key known and in the page cache, we can initiate dFFS to induce a bit flip. Not all bit flips in the memory page caching the authorized_keys file will be valid; some will break the base64 encoding, resulting in a corrupted file that OpenSSH does not recognize. Some flips, however, decode to a valid \((n', e)\) key that we can factorize. We report in Section 5 how many templates are available on average for a target public key.

Next, we use a script with the PyCrypto RSA cryptographic library [39] to operate on the corrupted public keys. This library can read and parse OpenSSH public key files, extract the RSA parameters \((n, e)\), generate RSA keys with specific parameters, and export them as OpenSSH public \((n', e)\) and private \((n', d')\) keys. All the attacker needs to do is factorize \(n'\) as discussed in Section 4.4.

Once we know the factors of \(n'\), we generate the private key \((n', d')\) that can be used to log in to the victim VM using an unmodified OpenSSH client.

#### 4.5.2 GPG

The GNU Privacy Guard (GPG) is a sophisticated implementation of, among others, the RSA cryptosystem. It has many security applications, one of which is the verification of software distributions by verifying signatures using trusted public keys. This is the larger application we intend to subvert with this attack.

Specifically, we target the apt package distribution system employed by Debian and Ubuntu for software installation and updates. apt verifies package signatures after download using GPG and trusted public keys stored in trusted.gpg. It fetches the package index from sources in sources.list.

Our attack first steers the victim to our malicious repository. The attacker can use dFFS to achieve this by inducing a bit flip in the sources.list file, which is present in the page cache after an update. sources.list holds the URLs of the repositories used for package installation and updates. By using a correct template, the attacker can flip a bit that results in a URL they control. Now, the victim will seek the package index and packages at an attacker-controlled repository.

Next, we use our exploit to target the GPG trusted keys database. As this file is part of the software distribution, the stock contents of this file are well-known, and we assume it is unchanged or we can guess the new changes. (Only the pages containing the keys we depend on need to be either unchanged or guessed.) This file resides in the page cache every time the system tries to update due to a daily cron job, so no direct interaction with the victim is necessary to bring the file into the page cache. We assume this file remains in the page cache for the next update iteration.

Similar to OpenSSH, we apply bit flip mutations in locations where we can induce bit flips according to the memory templating step. As a result, we obtain the corrupted versions of this file and check whether GPG will still accept this file as a valid keyring and whether one of the RSA key moduli has changed due to our bit flip. Extracting the key data is done with the GPG --list-keys --with-key-data options.

For every bit flip location corresponding to a corrupted modulus that we can factorize, we pick one of these mutations and generate the corresponding \((n', d')\) RSA private key using PyCrypto. We export this private key using PyCrypto as a PEM-formatted key and use pem2openpgp [26] to convert this PEM private key to the GPG format. We specify the usage flags to include signing and the same generation timestamp as the original public key. We can then import this private key for use in signing with an unmodified GPG.

It is important that the Key ID in the private keyring matches the Key ID in the trusted.gpg file. The Key ID is not static but is based on a hash computed from the public key data, a key generation timestamp, and several other fields. For the Key ID in the private keyring to match the Key ID in the public keyring, these fields must be identical, making the setting of the creation timestamp significant.

A significant remark about the Key ID changing (as a result of a bit flip) is that this causes the self-signature on the public keyring to be ignored by GPG! The signature contains the original Key ID, but it is now attached to a key with a different ID due to the public key mutation. As a result, GPG ignores the attached signature as an integrity check of the bit-flipped public key, and the self-signing mechanism fails to catch our bit flip. The only side-effect is harmless to our attack—GPG reports that the trusted key is not signed. apt ignores this without even showing a warning. After factorizing the corrupted public key modulus, we successfully verified that the corresponding private key can generate a signature.