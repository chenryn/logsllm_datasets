        memcpy(colls[j / 6], cb, 48 * sizeof(int));
        free(cb);
      }
      fread(y_buf, sizeof(y_buf), 1, fp);
      y = bytes_to_bits(y_buf, sizeof(y_buf));
      fclose(fp);
      return y;
    }
    char* decrypt(int key[48],int* y,int colls[48][48]) {
      int *aux = matrix_vector_multiply(colls, key);
      int m_xor_e[48];
      for (int i = 0; i < 48; i++) {
        m_xor_e[i] = y[i] ^ aux[i];
      }
      char *m = decode(m_xor_e);
      free(aux);
      return m;
    }
    void decryptflag(int key[48]) {
      FILE *fp;
      char filename[64];
      char buffer[294 - 6];
      char y_buf[6];
      int colls[48][48];
      for (int i = 0; i < 31; i++) {
        sprintf(filename, "./data/flag_%02d", i);
        fp = fopen(filename, "rb");
        for (int j = 0; j < 294 - 6; j += 6) {
          char b[6];
          fread(b, 6, 1, fp);
          int *cb = bytes_to_bits(b, 6);
          memcpy(colls[j / 6], cb, 48 * sizeof(int));
          free(cb);
        }
        fread(y_buf, sizeof(y_buf), 1, fp);
        int *y;
        y = bytes_to_bits(y_buf, sizeof(y_buf));
        int *aux = matrix_vector_multiply(colls, key);
        int m_xor_e[48];
        for (int i = 0; i < 48; i++) {
          m_xor_e[i] = y[i] ^ aux[i];
        }
        char *m = decode(m_xor_e);
        // hex(m, 2);
        printf("%s", m);
        free(aux);
        free(y);
        fclose(fp);
      }
      puts("");
    }
    int* y_1;
    int colls1[48][48];
    int* y_2;
    int colls2[48][48];
    int check(int* key){
      //only read once
      if(!y_1){
        y_1 = readCipher(colls1,"./data/ciphertext_001");
        y_2 = readCipher(colls2,"./data/ciphertext_000");
      }
      char* result = decrypt(key,y_1,colls1);
      if (result[0] == (char)0x62 && result[1] == (char)0xd4) {
        result = decrypt(key,y_2,colls2);
        if(result[0]==(char)0x16 && result[1]==(char)0xdb){
          free(result);
          return 1;
        }
      }
      free(result);
      return 0;
    }
    int* recover_key(int mask[48]) {
      int key_start[48];
      for (int i = 0; i < 48; i++) {
        key_start[i] = flag0xorflagcipher0[i] ^ mask[i];
      }
      int *key = matrix_vector_multiply(cols0Inv, key_start);
      return key;
    }
    int main() {
      unsigned long total=pow(3,16);
      int mask[48];
      unsigned long i = 0;
      for(;i<total;i++){
        if(i%400000 ==0){
          printf("%ld\n",i);
        }
        //clear mask
        for(int tmp=0;tmp<48;tmp++){
          mask[tmp]=0;
        }
        //set mask
        int num=i;
        for(int tmp=0;tmp<16;tmp++){
          mask[tmp*3+num%3]=1;
          num=num/3;
        }
        int* key=recover_key(mask);
        if(check(key)){
          decryptflag(key);
        }
        free(key);
      }  
    }
flag 35C3_let's_hope_these_Q_computers_will_wait_until_we're_ready