title:Hopper: Modeling and Detecting Lateral Movement
author:Grant Ho and
Mayank Dhiman and
Devdatta Akhawe and
Vern Paxson and
Stefan Savage and
Geoffrey M. Voelker and
David A. Wagner
Hopper: Modeling and Detecting Lateral Movement
Grant Ho, UC San Diego, UC Berkeley, and Dropbox; Mayank Dhiman, Dropbox; 
Devdatta Akhawe, Figma, Inc.; Vern Paxson, UC Berkeley and International 
Computer Science Institute; Stefan Savage and Geoffrey M. Voelker, 
UC San Diego; David Wagner, UC Berkeley
https://www.usenix.org/conference/usenixsecurity21/presentation/ho
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Hopper: Modeling and Detecting Lateral Movement
Vern Paxson†(cid:72)
Grant Ho(cid:63)†◦ Mayank Dhiman◦ Devdatta Akhaweψ
Stefan Savage(cid:63) Geoffrey M. Voelker(cid:63) David Wagner†
◦
Dropbox
†
UC Berkeley (cid:63)UC San Diego
ψ
Figma, Inc.
International Computer Science Institute
(cid:72)
Abstract
In successful enterprise attacks, adversaries often need to
gain access to additional machines beyond their initial point
of compromise, a set of internal movements known as lateral
movement. We present Hopper, a system for detecting lat-
eral movement based on commonly available enterprise logs.
Hopper constructs a graph of login activity among internal
machines and then identiﬁes suspicious sequences of logins
that correspond to lateral movement. To understand the larger
context of each login, Hopper employs an inference algorithm
to identify the broader path(s) of movement that each login
belongs to and the causal user responsible for performing a
path’s logins. Hopper then leverages this path inference algo-
rithm, in conjunction with a set of detection rules and a new
anomaly scoring algorithm, to surface the login paths most
likely to reﬂect lateral movement. On a 15-month enterprise
dataset consisting of over 780 million internal logins, Hop-
per achieves a 94.5% detection rate across over 300 realistic
attack scenarios, including one red team attack, while generat-
ing an average of  500 false alarms/day on their
dataset). Whereas SAL focuses on identifying point-wise
3094    30th USENIX Security Symposium
USENIX Association
anomalous logins (“one-hop” paths), Latte [30] detects two-
hop lateral movement attacks by identifying paths where each
login has rarely occurred in prior history. Latte then uses a
speciﬁc signature to reduce false positives by only alerting on
rare paths that also include a remote ﬁle execution operation
on the path’s ﬁnal machine (identiﬁed by a set of hard-coded
Windows events). Based on one day of data and a speciﬁc
anomaly threshold, Latte can detect a pentester exercise while
generating 13 false alarms. Although Latte can identify longer
attack paths, its narrow signature, which requires the attacker
to perform a speciﬁc action on the ﬁnal host, can lead to
false negatives. Moreover, implementing this signature faces
practical challenges, since common authentication logs from
Linux and Mac OS systems do not provide an easy way to
re-implement Latte’s Windows-speciﬁc signature.
Although they provide good starting points for detection,
prior systems generate an impractical volume of false posi-
tives or incur too many false negatives (Section 7.4 reports
the performance of SAL on our data set). Our work addresses
these challenges with a new approach to identifying suspi-
cious login paths. Rather than alerting on paths that are simply
anomalous or relying on signatures that target speciﬁc host
operations, we identify a set of key properties about attack
paths based on the overarching goals of lateral movement. By
focusing on paths with these properties, and only applying
anomaly detection in scenarios with high uncertainty, our ap-
proach detects a wider range of attacks than those that employ
a narrow signature, while also generating fewer false positives
than traditional anomaly detection methods.
2.2 Security Model
Detection Goals: Hopper aims to (1) detect a diverse range of
lateral movement attacks, while (2) generating a very low vol-
ume of false positives. We focus on developing detection for
settings where an organization has a team of security analysts
with a limited time budget for reviewing alerts. In particular,
we design Hopper to score a set of movement paths in terms
of how problematic the activity appears to be, allowing an
organization to specify their own bound on the number of
alerts that Hopper generates. Based on prior work [3, 23] and
the practical experiences of our industry collaborators, this
alert-budget design accurately reﬂects a real-world operating
model for many organizations. We consider Hopper success-
ful if it produces an alert for any login made by an attacker.
Upon conﬁrming the presence of an attack, organizations can
use forensic techniques from complementary work [19,25,50]
to perform further analysis and remediation.
Threat Model: Similar to prior work, we focus on detecting
interactive and credential-based lateral movement attacks [44].
Under this threat model, we assume that an attacker has man-
aged to compromise an initial “foothold” machine within
the enterprise, but they (1) need to acquire additional creden-
Nodes (Source + Destination Machines) Edge (Login)
Hostname
Client vs. server
Owner’s username (clients only)
Timestamp
Target username
Table 1: The information for each login event in our data. Each login
creates a unique edge between two nodes (internal machines) in the
graph that Hopper constructs (§ 4.2).
tials to access the data or systems they ultimately seek, and
(2) move between machines via login or remote command
execution events that use a set of credentials for authentica-
tion. In particular, attackers may exploit vulnerabilities on
machines or weak authentication protocols (e.g., privilege
escalation or pass-the-hash attacks), but we assume that their
movement between machines produces a login event visi-
ble to our detector. Additionally, this threat model focuses
on attackers who manually perform the movement (login)
operations during their attack, as opposed to an attack that
installs malware that moves to new systems autonomously.
Our threat model reﬂects the behavior of many real-world
lateral movement attacks, ranging from targeted attacks by
state-sponsored actors [5, 20, 31, 34, 36, 39, 45] to newer and
stealthier forms of ransomware [13, 48].
3 Data
Our work uses a collection of successful login events between
internal machines by employees at Dropbox,1 a large enter-
prise that provides storage and cloud collaboration services to
hundreds of millions of users. Whenever a machine receives
a remote access attempt from another machine (e.g., an in-
bound ssh session or a remote command execution issued
via utilities like psexec), the receiving machine generates a
record of a remote “login”. Because most operating systems
record these login events by default, organizations collect
these authentication logs as part of standard security best
practices.
This data provides visibility into the internal logins between
machines within Dropbox’s corporate network, such as client
laptops, authentication servers (e.g., Windows Domain Con-
troller), and a variety of infrastructure and application servers
(e.g., DNS servers, machines that test and build applications,
and analytics servers). Representative of the heterogeneous
nature of modern enterprises, the logins in our data span a
variety of authentication protocols (e.g., Kerberos and ssh)
across many types of devices (laptops, physical servers, and
virtual machines), operating systems (Windows, Mac OS, and
Linux), and account types (e.g., regular users, administrators,
and service accounts).
1Because our work focuses on mitigating successful lateral movement,
our analysis omits failed logins; however, future work could investigate ways
to incorporate such failures as additional detection signals.
USENIX Association
30th USENIX Security Symposium    3095
3.1 Data Size and Schema
Our data contains 784,459,506 successful logins from Jan
1, 2019 to Apr 1, 2020 (15 months). As shown in Table 1,
each login event contains a timestamp, the target username
of the login, the source and destination machines that initiate
and receive the login, respectively, and metadata about these
machines. These logins span 634 accounts and occur between
2,327 machines. Section 8.2 provides more details about the