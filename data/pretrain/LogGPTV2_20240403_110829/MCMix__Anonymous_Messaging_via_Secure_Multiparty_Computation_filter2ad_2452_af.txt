s
[
e
m
i
t
g
n
i
n
n
u
R
L = 0ms
L = 2ms
L = 10ms
L = 20ms
103
102
101
100
]
s
c
e
s
[
e
m
i
t
i
g
n
n
n
u
R
102
103
104
No. of users
105
Figure 7: Running time in secs of the Conversation pro-
tocol implementation for a number of n = 100, 500, 1K,
5K, 10K, 50K, 100K, 500K users and latency L = 0, 2,
10, 20 ms. The benchmarks were run with message size
8 Bytes and 1 Gbps network bandwidth.
In Fig. 8, we consider how the message size affects
performance. We have benchmarked various message
sizes ranging from 8 B to 1 KB messages. No artiﬁ-
cial latency has been injected for these experiments. We
see that message size affects performance in a signiﬁcant
way as opposed to latency, but the system can still sup-
port anonymity sets of tens of thousands of users even
with 1KB messages and certainly SMS long messages
for hundreds of thousands.
Finally, in Fig. 9, we provide the peak network band-
width consumption during the Dialing and Conversation
protocols. We note that the total bandwidth is shown,
102
103
104
No. of users
105
Figure 8: Running time in secs of the Conversation pro-
tocol implementation for a number of n = 100, 500, 1K,
5K, 10K, 50K, 100K users and message size |M| = 8,
144, 256, 1K Bytes. The benchmarks were run with no
latency and 1 Gbps network bandwidth.
|M| =8B
|M| =144B
|M| =256B
|M| =1KB
|UN| =64bit
]
s
p
b
M
i
[
h
t
d
w
d
n
a
b
k
r
o
w
t
e
n
k
a
e
P
102
101
102
103
104
No. of users
105
Figure 9: The peak network bandwidth consumption in
Mbps during the Dialing protocol for usernames (UNs)
of 64bits and the Conversation protocol for message size
|M| = 8B, 144B, 256B, 1KB, given a number of n = 100,
500, 1K, 5K, 10K, 50K, 100K users. The benchmarks
were run with no latency and 1 Gbps network bandwidth.
1230    26th USENIX Security Symposium
USENIX Association
9 Client Load and Adoption Incentives
preserving communication systems.
Anonymous communication systems critically rely on
having adequately large anonymity sets to be effective.
In other words: “Anonymity Loves Company” [26],
and the usability aspects of anonymous communication
systems should be an important design consideration.
MCMix strives to offer strong adoption incentives by of-
fering strong security, while minimizing the computation
and communication load on the client side.
Computation load: For the Dialing protocol, each client
performs an ID-KA operation (cf. Section 2) to compute
the dead drop value, plus a few symmetric operations to
encrypt/decrypt the shares. The Key Exchange operation
consists of a few hashes and a single bilinear symmet-
ric pairing computation. In [2], symmetric pairing time
is estimated at 14.9 ms running on a commodity device,
or around three times the time needed for a modular ex-
ponentation in the corresponding cyclic group. For the
Conversation protocol, the load is low, consisting only of
symmetric encryption/decryption operations.
Communication load:
In Table 1, we depict the total
monthly bandwidth costs of the clients in an example
setting with (i) SMS message size of 140 B, (ii) ﬁxed
block size for AES of 128 bits, (iii) standard 20/20 B
TCP/IP headers, (iv) SHA-256 HMACs and (v) dialing
and conversation rounds assumed to be executed every
one minute (simultaneously). For a detailed discussion
on the communication load of our system, we refer to
the full version.
|M| (B)
bandwidth per month (MB)
8
144
256
1K
47
78
106
296
Table 1: Communication costs of clients (Dialing and
Conversation combined) w.r.t. message size.
The theoretical analysis of the computational and
communication overhead of our system shows, that it is
lightweight on the client side and the bandwidth needs
of a device to be constantly connected are in the range
of tens of MB per month, which we consider easily man-
ageable. While we expect MCMix to be practical for
mobile users, further experiments may be needed to com-
pute actual battery consumption and bandwidth usage in
a real-world setting.
10 Related Work and Comparison
This section attempts to place our work in relation to
the state of the art in the expanding ﬁeld of anonymity-
First, regarding Onion-routing based approaches, like
POND [37] which uses the Tor network [27], we empha-
size that they do not ﬁt the model of a global adversary
who can easily defeat them, see e.g., [34]. Systems that
attempt to defeat global adversaries operate in rounds
and expect each online user to send encrypted messages
in each round. Furthermore, our interpretation of anony-
mous messaging is one of unobservable bilateral com-
munication. Therefore, unilateral shufﬂing mechanisms
based on mixnets or recent MPC constructions [41] do
not satisfy our application scenario.
Our work is most closely related to the Vuvuzela sys-
tem [49] that uses mixnets in addition to dummy mes-
sages, to add noise and achieve a differentially private
(cf. [28]) solution to anonymous messaging. By deﬁ-
nition, differential privacy protects users as individuals
and also allows for some (albeit small) leakage to an ob-
server and thus it is weaker than the simulation-based
privacy that we achieve. For example, when all users talk
to each other compared to when no user is talking to any-
one is completely distinguishable in Vuvuzela, but indis-
tinguishable for MCMix that does not leak any metadata
at all. Furthermore, Vuvuzela puts a burden on the client
side that requires to ﬁnish the dial protocol by download-
ing a substantial amount of user data (or losing substan-
tially in terms privacy); note that using Bloom ﬁlters as
described in [39] can help in making this a one time cost.
Another drawback of this system is that it cannot scale
down in a tight way, due to the burden imposed by the
added noise that needs to be always added to maintain
acceptable privacy guarantees. On the up side, the sys-
tem has good architecture and is extremely scalable to
millions of users under the assumption of a single hon-
est server, whereas (non-parallelized) MCMix can scale
to 100,000 users with similar latency and assuming an
honest server majority. However, our parallelized MPC
approach can reach that level of performance and in any
case, we anticipate that further advances in secure MPC
protocols can improve performance substantially even in
the non-parallelized version.
Rifﬂe [36], uses hybrid mixnets and private informa-
tion retrieval (PIR, [19]) techniques to implement anony-
mous messaging. It offers good privacy guarantees, but
unlike MCMix and Vuvuzela, it can not handle network
churn. During the setup phase of the protocol, client keys
are veriﬁably shufﬂed by a mixnet. During each com-
munication phase, the same permutations as the ones es-
tablished in the setup phase are applied to the clients’
authenticated messages by the mix servers. As a result
of this setup, a single client momentarily leaving or en-
tering the system would require to re-run the expensive
setup phase of the protocol.
cMix [15] introduces a mixnet design that can shuf-
USENIX Association
26th USENIX Security Symposium    1231
ﬂe messages faster than previous work by avoiding pub-
lic key operations in the real-time phase. cMix provides
sender anonymity, yet it may leak the number of mes-
sages received by each user, exhibiting a similar security
performance as Vuvuzela’s dialing protocol.
Dissent [22, 51] is based on DC-nets and achieves
anonymity sets up to a few thousand users, in an anony-
mous broadcasting scenario. Riposte [21] uses PIR tech-
niques to implement a distributed database that users
can anonymously write and read from, assuming no two
servers collude (in the efﬁcient scheme). Speciﬁcally,
the authors implement the write stage on the database as
a “reverse” PIR, where a client spreads suitable informa-
tion for writing in the database. Subsequently, when used
for messaging, users can read using PIR from the posi-
tion in the database that the sender wrote the message
(which can be a random position calculated from key in-
formation available to the users). Riposte can scale to
millions of users but it requires many hours to perform a
√
complete operation; a signiﬁcant bottleneck is the write-
L) client communication for
operation that requires O(
an L-long database which is proportional to the number
of users. In contrast, in our system, client bandwidth is
minimal, i.e. a single message per server is sent by each
user. Additionally, the application scenario is more re-
lated to that of Dissent, rather than ours, i.e. anonymous
broadcasting, instead of private point to point message
exchange, as the authors specify that their approach is
suitable “for latency-tolerant workloads with many more
readers than writers”. Finally, our technical approach is
very different compared to Riposte, as Riposte uses MPC
techniques only to detect and exclude malformed client
requests, while MCMix offers a native MPC solution for
the complete messaging functionality.
BAR [35] uses a “broadcast to all” approach to achieve
perfect privacy. A central untrusted server receives all
messages in each round and then broadcasts them to all
participants. This approach induces a very large commu-
nication overhead and therefore anonymity sets are lim-
ited to hundreds of users. Pung [3] is a system that like
BAR operates on fully untrusted setting, while it uses
state-of-the-art PIR techniques and smart database orga-
nization to scale to a much larger number of users. How-
ever, Pung can only implement the equivalent of our con-
versation functionality and not the dialing functionality,
and exhibits substantial client load.
11 Parallelizing the conversation protocol
As discussed in previous sections, our protocols are prov-
ably secure assuming a secure MPC framework and are
also scalable enough to support hundreds of thousands
of users. While these anonymity sets can accommodate
a lot of use cases, we recognize the need for anonymity
systems to offer as large an anonymity set as possible.
Therefore, we propose a technique that leads to an even
more scalable system, by describing a parallel realiza-
tion of the Conversation protocol, as this is the latency-
critical component of our system. Note that the Dialing
protocol can be executed independently of the Conver-
sation protocol and in much longer time intervals, e.g.
every ﬁve minutes. Therefore, the implementation on
a single MPC instance can cover very large anonymity
sets, e.g. 500,000 users as seen in Fig. 6.
In the following paragraph, we provide the general
idea behind our parallelization technique and refer the
reader to the full version for a detailed description of the
parallelized Conversation protocol.
General Idea. Our main challenge is to come up with
a protocol that can run in different MPC instances (is-
lands) in parallel with minimal communication between
those instances, while achieving strong privacy. Ad-
ditionally, the anonymity set should be the whole user
population. The problem of anonymous communication,