theless, only the false negative and true positve rates are
impacted, not the false positive rate that remains constant
for the different values of Ne. Thus, we chose a value of
Ne = 1
Even if the detection accuracy of the tests may
seem low—0.42 for the fonts and 0.51 for the browser
features—these are only two tests among multiple tests,
such as the media queries, WebGL or toDataURL that
can also be used to verify the authenticity of the informa-
tion provided in the user agent or in the canvas.
4.2 Evaluating FP-Scanner
4.2.1 Building a Browser Fingerprints Dataset
To collect a relevant dataset of browser ﬁngerprints, we
created a webpage that includes the browser ﬁngerprinter
we designed. Besides collecting ﬁngerprints, we also
collect the system ground truth—i.e., the real os, browser
family and version, as well as the list of countermeasures
USENIX Association
27th USENIX Security Symposium    143
Table 8: Comparison of accuracies per countermeasures
Accuracy
FP-JS2
/ Augur
Number of
ﬁngerprints
Countermeasure
Accuracy
FP
Scanner
RANDOM AGENT
SPOOFER (RAS)
User agent spoofers (UAs)
CANVAS DEFENDER
FIREFOX protection
CANVAS FP BLOCK
FPRANDOM
BRAVE
No countermeasure
69
22
26
6
3
7
4
10
1.0
1.0
1.0
1.0
1.0
1.0
1.0
1.0
0.55
0.86
0.0
0.0
0.0
0.0
0.0
1.0
installed. In the scope of our experiment, we consider
countermeasures listed in Table 8, as they are represen-
tative of the diversity of strategies we reported in Sec-
tion 2. Although other academic countermeasures have
been published [6, 11, 15, 20], it was not possible to con-
sider them due to the unavailability of their code or be-
cause they could not be run anymore. Moreover, we still
consider RANDOM AGENT SPOOFER even though it is
not available as a web extension—i.e., for FIREFOX ver-
sions > 57—since it modiﬁes many attributes commonly
considered by browser ﬁngerprinting countermeasures.
We built this browser ﬁngerprints dataset by access-
ing this webpage from different browsers, virtual ma-
chines and smartphones, with and without any counter-
measure installed. The resulting dataset is composed
of browser ﬁngerprints, randomly challenged by 7 dif-
ferent countermeasures. Table 8 reports on the number
of browser ﬁngerprints per countermeasure. The num-
ber of browser ﬁngerprints per countermeasure is differ-
ent since some countermeasures are deterministic in the
way they operate. For example, CANVAS DEFENDER al-
ways adds a uniform noise on all the pixels of a canvas.
On the opposite, some countermeasures, such as RAN-
DOM AGENT SPOOFER, add more randomness due to the
usage of real proﬁles, which requires more tests.
4.2.2 Measuring the Accuracy of FP-Scanner
We evaluate the effectiveness of FP-SCANNER, FINGER-
PRINTJS2 and AUGUR to correctly classify a browser
ﬁngerprint as genuine or altered. Our evaluation metric
is the accuracy, as deﬁned in Section 4.1. On the global-
ity of the dataset, FP-SCANNER reaches an accuracy 1.0
against 0.45 for FINGERPRINTJS2 and AUGUR, which
perform equally on this dataset. When inspecting the
AUGUR and FINGERPRINTJS2 scripts, and despite Au-
gur’s obfuscation, we observe that they seem to perform
the same tests to detect inconsistencies. As the number
of ﬁngerprints per countermeasure is unbalanced, Table 8
compares the accuracy achieved per countermeasure.
We observe that FP-SCANNER outperforms FINGER-
PRINTJS2 to classify a browser ﬁngerprint as genuine or
(a) Detection accuracy and false positive rate using the trans-
parent pixels test for different values of Nt p (Number of trans-
parent pixels)
(b) Detection accuracy and false positive rate using the fonts
test for different values of Nf (Number of fonts associated with
the wrong OS)
(c) Detection accuracy and false positive rate of the browser
feature test for different values of Ne (Number of wrong fea-
tures)
Figure 3: Accuracy of the different detection tests for
different parameter values
144    27th USENIX Security Symposium
USENIX Association
02500500075001000012500150001750020000Number of transparent pixels0.00.10.20.30.40.50.60.70.80.91.0Detection accuracyAccuracyFPR2468101214Number of wrong fonts0.00.10.20.30.40.50.60.70.80.91.0Detection accuracyAccuracyFPR012345678910111213141516171819Number of wrong features0.00.10.20.30.40.50.60.70.80.91.0Detection accuracyAccuracyFPRaltered. In particular, FP-SCANNER detects the presence
of canvas countermeasures while FINGERPRINTJS2 and
Augur spotted none of them.
4.2.3 Analyzing the Detected Countermeasures
For each browser ﬁngerprint, FP-SCANNER outputs the
result of each test and the value that made the test fail.
Thus, it enables us to extract some kinds of signatures
for different countermeasures.
In this section, we ex-
ecute FP-SCANNER in depth mode—i.e., for each ﬁn-
gerprint, FP-SCANNER executes all of the steps, even if
an inconsistency is detected. For each countermeasure
considered in the experiment, we report on the steps that
revealed their presence.
and
User Agent Spoofers
are easily detected as they only
operate on the user agent. Even when both values of user
agent are changed, they are detected by simple consis-
tency checks, such as platform for the OS, or function’s
internal representation test for the browser.
Brave is detected because of
the side effects it
such as blocking canvas ﬁngerprint-
introduces,
ing.
FP-SCANNER distinguishes BRAVE from a
vanilla Chromium browser by detecting it overrides
navigator.plugins
navigator.mimeTypes
getters. Thus, when FP-SCANNER analyzes BRAVE’s
navigator prototype to check if any properties have been
overridden, it observes the following output for plugins
and mimeTypes getters string representation: () => {
return handler }. Moreover, BRAVE also overrides
to
navigator.mediaDevices.enumerateDevices
block devices enumeration, which can also be detected
by FP-SCANNER as it returns a Proxy object instead of
an object representing the devices.
Random Agent Spoofer (RAS) By using a system of
proﬁles, RAS aims at introducing fewer inconsistencies
than purely random values.
Indeed, RAS passes sim-
ple checks, such as having identical user agents or hav-
ing a user agent consistent with navigator.platform.
Nevertheless, FP-SCANNER still detects inconsistencies
as RAS only ensures consistency between the attributes
contained in the proﬁle. First, since RAS is a FIREFOX
extension, it is vulnerable to the media query technique.
Indeed, if the user is on a Windows device, or if the pro-
ﬁle selected claims to be on Windows, then the OS in-
consistency is directly detected. In the case where it is
not enough to detect its presence, plugins or fonts linked
to the OS enables us to detect it. Browser inconsisten-
cies are also easily detected, either using function’s in-
ternal representation test or errors attributes. When only
the browser version was altered, FP-SCANNER detects it
by using the combination of MODERNIZR and CANIUSE
features.
RAS overrides most of
the navigator attributes
from the FIREFOX conﬁguration ﬁle.
However,
the navigator.vendor attribute is overridden in
JavaScript, which makes it detectable. FP-SCANNER
also detects devices which claimed to be mobile devices,
but whose accelerometer value was undeﬁned.
Firefox ﬁngerprinting protection standardizes the
user agent when the protection is activated and replaces
it with Mozilla/5.0 (Windows NT 6.1; Win64;
x64; rv:52.0) Gecko/20100101 Firefox/52.0,
thus lying about
the browser version and the op-
erating system for users not on Windows 7 (Win-
dows NT 6.1). While OS-related attributes, such as
navigator.platform are updated, other attributes,
such as webgl vendor and renderer are not consistent
with the OS. For privacy reasons, FIREFOX disabled
OS-related media queries presented earlier in this paper
for its versions > 57, whether or not the ﬁngerprinting
protection is activated. Nevertheless, when the ﬁnger-
printing protection is activated, FIREFOX pretends to be
version 52 running on Windows 7. Thus, it should match
the media query -moz-os-version for Windows 7,
which is not the case. Additionally, when the browser
was not running on Windows, the list of installed fonts
was not consistent with the OS claimed.
Canvas poisoners
including CANVAS DEFENDER,
CANVAS FP BLOCK and FPRANDOM were all detected
by FP-SCANNER. For the ﬁrst two, as they are browser
extensions that override canvas-related functions us-
ing JavaScript, we always detect
the function
toDataURL has been altered. For all of them, we detect
that the canvas pixel constraints were not enforced from
our canvas deﬁnition.
Indeed, we did not ﬁnd enough
occurrences of the color (255,102,0,100), but we found
pixels with a slightly different color. Moreover,
in
case of the browser extensions, we also detected an
inconsistent number of transparent pixels as they apply
noise to all the canvas pixels.
that
Table 9 summarizes, for each countermeasure, the
steps of our test suite that detected inconsistencies. In
particular, one can observe that FP-SCANNER leverages
the work of Nikiforakis et al. [16] by succeeding to de-
tect a wider spectrum of ﬁngerprinting countermeasures
that were previously escaped by their test suite (e.g., can-
vas extensions, FPRANDOM [10] and BRAVE). We also
observe that the tests to reveal the presence of counter-
measures are consistent with the tests presented in Ta-
ble 6.
4.2.4 Recovering the Ground Values
Beyond uncovering inconsistencies, we enhanced FP-
SCANNER with the capability to restore the ground value
of key attributes like OS, browser family and browser
USENIX Association
27th USENIX Security Symposium    145
Table 9: FP-SCANNER steps failed by countermeasures
Test (scope)
User Agents (global)
Platform (OS)
WebGL (OS)
Plugins (OS)
Media Queries
(OS, browser)
Fonts (OS)
Error (browser)
Function representation
(browser)
Product (browser)
Navigator (browser)
Enumerate devices
(browser)
Features (browser)
Events (device)
Sensors (device)
toDataURL (canvas)
Pixels (canvas)
S
A
R
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
s
r
e
f
o
o
p
s
A
U
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
s
a
v
n
a
C
s
n
o
i
s
n
e
t
x
e
M
O
D
N
A
R
P
F
E
V
A
R
B
X
O
F
E
R
I
F
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Mozilla media queries, which stopped working after ver-
sion 58, as already mentioned. Finally, FP-SCANNER
failed to faithfully recover the browser version. Given
the lack of discriminative features in MODERNIZR, FP-
SCANNER can only recover a range of candidate ver-
sions. Nevertheless, this could be addressed by applying
natural language processing on browser release notes in
order to learn the discriminative features introduced for
each version.
4.3 Benchmarking FP-Scanner
This part evaluates the overhead introduced by FP-
SCANNER to scan a browser ﬁngerprint. The benchmark
we report has been executed on a laptop having an In-
tel Core i7 and 8 GB of RAM.
internal
Concerning the browser
version. To recover these attributes, we rely on the
hypothesis that some attributes are harder to spoof, and
hence more likely to reﬂect the true nature of the device.
When FP-SCANNER does not detect any inconsistency
in the browser ﬁngerprint, then the algorithm simply re-
turns the values obtained from the user agent. Otherwise,
it uses the same tests used to spot inconsistencies, but to
restore the ground values.
OS value To recover the real OS, we combine multi-
ple sources of information, including plugins extensions,
WebGL renderer, media queries, and fonts linked to OS.
For each step, we obtain a possible OS. Finally, we se-
lect the OS that has been predicted by the majority of the
steps.
Browser family
fam-
representation
ily, we rely on function’s
(eval.toString().length) that we combine with the
value of productSub. Since these two attributes are
discriminative enough to distinguish most of the major
browsers, we do not make more tests.
Browser version To infer the browser version, we test
the presence or absence of each MODERNIZR feature for
the recovered browser family. Then, for each browser
version, we count the number of detected features. Fi-
nally, we keep a list of versions with the maximum num-
ber of features in common.
Evaluation We applied this recovering algorithm to ﬁn-
gerprints altered only by countermeasures that change
the OS or the browser—i.e., RAS, User agent spoofers
and FIREFOX ﬁngerprinting protection. FP-SCANNER
was able to correctly recover the browser ground value
for 100% of the devices. Regarding the OS, FP-
SCANNER was always capable of predicting the OS
family—i.e., Linux, MacOS, Windows—but often failed
to recover the correct version of Windows, as the tech-
nique we use to detect the version of Windows relies on
Performance of FP-Scanner We compare the per-
formance of FP-Scanner with FINGERPRINTJS2 in
term of processing time to detect
inconsistencies.
First, we automate CHROME HEADLESS version
64 using PUPETEER and we run 100 executions of
FINGERPRINTJS2.
In case of FINGERPRINTJS2,
the reported time is the sum of the execution time
of each function used to detect inconsistencies—i.e.,
getHasLiedLanguages,
getHasLiedResolution,
getHasLiedOs and getHasLiedBrowser. Then, we
execute different versions of FP-Scanner on our dataset.
Input datasets, such as the CANIUSE features ﬁle, are
only loaded once, when FP-SCANNER is initialized. We
start measuring the execution time after this initialization
step as it is only done once. Depending on the tested
countermeasure, FP-SCANNER may execute more or
less tests to scan a browser ﬁngerprint. Indeed, against
a simple user agent spoofer, the inconsistency might be
quickly detected by checking the two user agents, while