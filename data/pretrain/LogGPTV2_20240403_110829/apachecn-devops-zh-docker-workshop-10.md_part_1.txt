# 十、Kubernetes
概观
在本章中，我们将了解市场上最流行的容器管理系统 Kubernetes。从基础知识、体系结构和资源开始，您将创建 Kubernetes 集群并在其中部署实际应用。
到本章结束时，您将能够确定 Kubernetes 设计的基础及其与 Docker 的关系。您将创建和配置一个本地 Kubernetes 集群，使用客户端工具使用 Kubernetes API，并使用基本的 Kubernetes 资源来运行容器化的应用。
# 简介
在前几章中，您使用 **Docker Compose** 和 **Docker Swarm** 运行了多个 Docker 容器。运行在各种容器中的微服务帮助开发人员创建可扩展和可靠的应用。
但是，当多个应用分布在数据中心的多个服务器上，甚至分布在世界各地的多个数据中心时，管理这些应用就变得更加复杂。有许多与分布式应用的复杂性相关的开放式问题，包括但不限于网络、存储和容器管理。
例如，应该配置运行在相同节点以及不同节点上的容器的网络。类似地，包含应用的容器的体积(可以放大或缩小)应该用中央控制器来管理。幸运的是，分布式容器的管理有一个广为接受和采用的解决方案:Kubernetes。
**Kubernetes** 是一个开源的容器编排系统，用于运行可扩展、可靠和健壮的容器化应用。从 T2 树莓皮到数据中心，可以在各种平台上运行 Kubernetes。Kubernetes 使运行带有装载卷、插入机密和配置网络接口的容器成为可能。此外，它还关注容器的生命周期，以提供高可用性和可伸缩性。凭借其包容性的方法，Kubernetes 是目前市场上领先的容器管理系统。
Kubernetes 在希腊语中翻译为**船长**。用 Docker 对船只和容器的比喻，Kubernetes 把自己定位为航海大师。Kubernetes 的想法源于管理谷歌服务(如 Gmail 或谷歌驱动)的容器已有十多年。从 2014 年至今，Kubernetes 一直是开源项目，由**云原生计算基金会** ( **CNCF** )管理。
Kubernetes 的主要优势之一来自它的社区和维护者。它是 GitHub 上最活跃的存储库之一，有来自 2400 多个贡献者的近 88000 个提交。此外，存储库拥有超过 62，000 颗星，这意味着超过 62，000 人对存储库有信心:
![Figure 10.1: Kubernetes GitHub repository ](img/B15021_10_01.jpg)
图 10.1:永久 GitHub 资料档案库
在本章中，您将探索 Kubernetes 的设计和架构，然后是它的 API 和访问，并使用 Kubernetes 资源来创建容器化的应用。由于 Kubernetes 是领先的容器编排工具，获得它的实际操作经验将帮助您进入容器化应用的世界。
# 立方结构设计
Kubernetes 关注容器的生命周期，包括配置、调度、运行状况检查和扩展。使用 Kubernetes，可以安装各种类型的应用，包括数据库、内容管理系统、队列管理器、负载平衡器和 web 服务器。
例如，假设你在一家名为 **InstantPizza** 的新在线食品配送连锁店工作。您可以在 Kubernetes 中部署移动应用的后端，并根据客户需求和使用情况进行扩展。同样，您可以实现一个消息队列来在餐馆和顾客之间进行通信，同样在 Kubernetes 中。为了存储过去的订单和收据，您可以在 Kubernetes 中部署一个带有存储的数据库。此外，您可以使用负载平衡器为您的应用实现**蓝/绿**或**甲乙部署**。
在本节中，讨论了 Kubernetes 的设计和架构，以说明它是如何实现可扩展性和可靠性的。
注意
蓝/绿部署侧重于安装同一应用的两个相同版本(分别称为蓝和绿)，并立即从蓝转绿，以减少停机时间和风险。
A/B 部署侧重于安装应用的两个版本(即 A 和 B)，用户流量在两个版本之间分配，用于测试和实验。
Kubernetes 的设计专注于在一台或多台服务器上运行，即集群。另一方面，Kubernetes 由许多组件组成，这些组件应该分布在单个集群中，以便拥有可靠且可扩展的应用。
有两组 Kubernetes 组件，即**控制平面**和**节点**。尽管构成 Kubernetes 景观的元素有不同的命名约定，例如主组件而不是控制平面，但是分组的主要思想一点也没有改变。控制平面组件负责运行 Kubernetes API，包括数据库、控制器和调度器。Kubernetes 控制平面有四个主要组件:
*   `kube-apiserver`:这是连接集群中所有组件的中央 API 服务器。
*   `etcd`:这是 Kubernetes 资源的数据库，`kube-apiserver`存储`etcd`上集群的状态。
*   `kube-scheduler`:这是为节点分配容器化应用的调度程序。
*   `kube-controller-manager`:这是创建和管理集群中 Kubernetes 资源的控制器。
在具有角色节点的服务器中，有两个 Kubernetes 组件:
*   `kubelet`:这是 Kubernetes 客户端，它驻留在节点上，在 Kubernetes API 和容器运行时之间创建一个桥梁，比如 Docker。
*   `kube-proxy`:这是一个网络代理，运行在每个节点上，允许跨集群的工作负载进行网络通信。
下图说明了控制平面和节点组件及其相互作用:
![Figure 10.2: Kubernetes architecture ](img/B15021_10_02.jpg)
图 10.2:无缝体系结构
Kubernetes 旨在可扩展的云系统上运行。但是，有许多工具可以在本地运行 Kubernetes 集群。`minikube`是官方支持的 CLI 工具，用于创建和管理本地 Kubernetes 集群。它的命令侧重于生命周期事件和集群故障排除，如下所示:
*   `minikube start`:启动本地 Kubernetes 集群
*   `minikube stop`:停止正在运行的本地 Kubernetes 集群
*   `minikube delete`:删除本地 Kubernetes 集群
*   `minikube service`:获取本地集群中指定服务的网址
*   `minikube ssh`:在使用 SSH 的机器上登录或运行命令
在下面的练习中，您将创建一个本地 Kubernetes 集群来检查本章中讨论的组件。要创建本地集群，您将使用`minikube`作为官方的本地 Kubernetes 解决方案，并运行其命令来探索 Kubernetes 组件。
注意
`minikube`在虚拟机管理程序上运行集群，需要根据自己的操作系统安装 KVM、VirtualBox、VMware Fusion、Hyperkit 或 Hyper-V 等虚拟机管理程序。您可以在[https://kubernetes . io/docs/tasks/tools/install-minikube/# install-a-hypervisor](https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor)查看官方文档了解更多信息。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 10.01:启动本地 Kubernetes 集群
Kubernetes 最初被设计为在具有多台服务器的集群上运行。这是在云中运行可扩展应用的容器编排器的预期特征。但是，很多时候需要在本地运行 Kubernetes 集群，例如为了开发或测试。在本练习中，您将安装一个本地 Kubernetes 提供程序，然后创建一个 Kubernetes 集群。在集群中，您将检查本节中讨论的组件。
要完成本练习，请执行以下步骤:
1.  Download the latest version of the `minikube` executable for your operating system and set the binary as executable for your local system by running the following command in your terminal:
    ```
    # Linux
    curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    # MacOS
    curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 
    chmod +x minikube 
    sudo mv minikube /usr/local/bin
    ```
    这些前面的命令为 Linux 或 Mac 下载二进制文件，并准备在终端中使用:
    ![Figure 10.3: Installation of minikube ](img/B15021_10_03.jpg)
    图 10.3:minikube 的安装
2.  Start a Kubernetes cluster with the following command in your terminal:
    ```
    minikube start
    ```
    前面的单个命令执行多个步骤来成功创建集群。您可以按如下方式检查每个阶段及其输出:
    ![Figure 10.4: Starting a new Kubernetes cluster ](img/B15021_10_04.jpg)
    图 10.4:启动一个新的 Kubernetes 集群
    输出从打印出版本和环境开始。然后，拉取并启动 Kubernetes 组件的映像。最后，几分钟后，您有一个本地运行的 Kubernetes 集群。
3.  Connect to the cluster node started by `minikube` with the following command:
    ```
    minikube ssh
    ```
    使用`ssh`命令，您可以继续在集群中运行的节点上工作:
    ![Figure 10.5: Cluster node ](img/B15021_10_05.jpg)
    图 10.5:集群节点
4.  Check for each control plane component with the following commands:
    ```
    docker ps --filter „name=kube-apiserver" --filter „name=etcd" --filter „name=kube-scheduler" --filter „name=kube-controller-manager" | grep -v „pause"
    ```
    该命令检查具有控制平面组件名称的 Docker 容器和过滤器。以下输出不包含 pause 容器，该容器负责 Kubernetes 中容器组的网络设置，以便于分析:
    ![Figure 10.6: Control plane components ](img/B15021_10_06.jpg)
    图 10.6:控制平面组件
    输出显示四个控制平面组件正在`minikube`节点的 Docker 容器中运行。
5.  Check for the first node component, `kube-proxy`, with the following command:
    ```
    docker ps --filter "name=kube-proxy"  | grep -v "pause"
    ```
    类似于*第 4 步*，这个命令列出了一个`kube-proxy`组件，它运行在一个 Docker 容器中:
    ![Figure 10.7: kube-proxy in minikube ](img/B15021_10_07.jpg)
    图 10.7:minikube 中的 kube 代理
    可以看到在 Docker 容器中运行的`kube-proxy`组件已经启动了 21 分钟。
6.  Check for the second node component, `kubelet`, with the following command:
    ```
    pgrep -l kubelet
    ```
    该命令列出其标识在`minikube`中运行的进程:
    ```
    2554 kubelet
    ```
    由于`kubelet`在容器运行时和 API 服务器之间通信，所以它被配置为直接在机器上运行，而不是在 Docker 容器内运行。
7.  Disconnect from the `minikube` node connected in *Step 3* with the following command:
    ```
    exit
    ```
    您应该已经返回到您的终端，并获得类似如下的输出:
    ```
    logout
    ```
在本练习中，您已经安装了一个 Kubernetes 集群并检查了架构组件。在下一节中，将介绍 Kubernetes API 和访问方法来连接和使用在这一节中创建的集群。
# Kubernetes 斯原料药和接入
**Kubernetes API** 是 Kubernetes 系统的基本构件。它是集群中所有组件之间通信的场所。外部通信，如用户命令，也作为 REST API 调用针对 Kubernetes API 执行。Kubernetes API 是一个基于资源的 HTTP 接口。换句话说，应用编程接口服务器面向与资源一起工作来创建和管理 Kubernetes 资源。在本节中，您将连接到应用编程接口，在下一节中，您将开始使用 Kubernetes 资源，包括但不限于 Pods、部署、状态集和服务。
Kubernetes 有一个用于客户端访问的官方命令行工具，名为`kubectl`。如果你想访问一个 Kubernetes 集群，你需要安装`kubectl`工具并配置它连接到你的集群。然后，您可以安全地使用该工具来管理运行集群的应用的生命周期。`kubectl`能够执行基本的创建、读取、更新和删除操作，以及故障排除和日志检索。
例如，您可以使用`kubectl`安装一个容器化的应用，将其扩展到更多副本，检查日志，如果您不再需要它，最后将其删除。此外，`kubectl`有集群管理命令来检查集群和服务器的状态。因此，`kubectl`是访问 Kubernetes 集群和管理应用的重要命令行工具。
`kubectl`是用其丰富的命令集控制 Kubernetes 集群的关键。基本的基本命令和与部署相关的命令如下所示:
*   `kubectl create`:该命令从带有`-f`标志或标准终端输入的文件名创建资源。第一次创建资源时很有帮助。
*   `kubectl apply`:这个命令创建或更新配置到一个 Kubernetes 资源，类似于`create`命令。如果您在首次创建后更改资源配置，这是一个必不可少的命令。
*   `kubectl get`:该命令显示集群中的一个或多个资源及其名称、标签和其他信息。
*   `kubectl edit`:该命令使用`vi`等编辑器直接在终端编辑 Kubernetes 资源。
*   `kubectl delete`:此命令删除 Kubernetes 资源，并传递文件名、资源名和标签标志。
*   `kubectl scale`:这个命令改变了 Kubernetes 集群的资源数量。
同样，所需的集群管理和配置命令如下所示:
*   `kubectl cluster-info`:该命令显示集群及其应用编程接口和域名系统服务的摘要。
*   `kubectl api-resources`:该命令列出了服务器上支持的 API 资源。如果您使用支持不同 API 资源集的不同 Kubernetes 安装，这将特别有帮助。
*   `kubectl version`:该命令打印客户端和服务器版本信息。如果您正在使用具有不同版本的多个 Kubernetes 集群，这是一个捕获版本不匹配的有用命令。
*   `kubectl config`:该命令配置`kubectl`将不同的集群相互连接。`kubectl`是一个 CLI 工具，旨在通过更改其配置来与多个集群配合使用。
在下面的练习中，您将安装并配置`kubectl`以连接到本地 Kubernetes 集群，并借助其丰富的命令集开始探索 Kubernetes API。
## 练习 10.02:使用 kubectl 访问 Kubernetes 集群
Kubernetes 集群安装在云系统中，可以从不同的位置访问。为了安全可靠地访问集群，您需要一个可靠的客户端工具，这是 Kubernetes 的官方客户端工具，即`kubectl`。在本练习中，您将安装、配置和使用`kubectl`来探索其功能以及 Kubernetes 斯应用编程接口。
要完成本练习，请执行以下步骤:
1.  Download the latest version of the `kubectl` executable for your operating system and set this as the executable for your local system by running the following command in your terminal:
    ```
    # Linux
    curl -LO https://storage.googleapis.com/kubernetes-release/release/'curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt'/bin/linux/amd64/kubectl
    # MacOS
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl"
    chmod +x kubectl 
    sudo mv kubectl /usr/local/bin
    ```