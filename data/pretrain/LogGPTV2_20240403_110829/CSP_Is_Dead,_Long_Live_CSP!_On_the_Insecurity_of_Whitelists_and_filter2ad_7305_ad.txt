no
no
yes
AngularJS Bypass Bypassable
no
yes
no
no
no
yes
no
no
yes
yes
no
no
yes
no
no
yes, if unsafe-eval
yes
yes, if unsafe-eval
yes
yes
yes
yes
yes
yes
yes
yes
yes
yes
no
yes
Table 5: Bypassability of the 15 most common whitelisted hosts in script-src
Content-Security-Policy:
script-src https://example.org
default-src
script-src ’nonce-random123’
https://foobar.org,
Another problem with nonce-based policies arises, how-
ever, when new scripts are added to the page by JavaScript:
because JS libraries might not be aware of CSP and do not
know the correct CSP nonce, dynamically inserted scripts
would be blocked from executing by CSP, and parts of the
application would fail.
To address this problem and to facilitate safe policies
without relying on source lists, we propose a new source
expression for script-src: ’strict-dynamic’. ’strict-
dynamic’ is a draft CSP3 speciﬁcation5 and is implemented
in Chrome and Opera. We describe the adoption process
and results in a popular production application in 4.2.
4.1 Propagating trust to dynamic scripts
The addition of the proposed ’strict-dynamic’ keyword
to a script-src source list has the following consequences:
• Dynamically added scripts are allowed to execute. In
practice, this means that script nodes created by doc-
ument.createElement(’script’) will be allowed by
the policy, regardless of whether the URL from which
they are loaded is in the script-src whitelist.
• Other script-src whitelist entries are ignored. The
browser will not execute a static or parser-inserted
script unless it is accompanied by a valid nonce.
The core observation behind this approach is that scripts
added by calling createElement() are already trusted by
the application – the developer has explicitly chosen to load
and execute them. On the other hand, an attacker who has
found a markup-injection bug will not be able to directly
call createElement() without ﬁrst being able to execute
JavaScript; and the attacker cannot inject a malicious script
and execute JavaScript without knowing the proper nonce
deﬁned in the policy.
5https://www.w3.org/TR/CSP3/#strict-dynamic-usage
This mode of using CSP oﬀers the promise of enabling
nonce-based policies, in which the capability to execute scripts
is controlled by the developer by setting nonces on trusted
scripts, and allowing trust to propagate to subscripts by set-
ting ’strict-dynamic’.
As an example, a developer could set a policy similar to
the following:
Content-Security-Policy:
script-src ’nonce-random123’ ’strict-dynamic’;
object-src ’none’;
With such a policy, the owner would need to add nonces
to static  elements, but would be assured that only
these trusted scripts and their descendants would execute.
This mode of deploying CSP can signiﬁcantly improve the
security of a policy and facilitate adoption.
4.2 Case study for ’strict-dynamic’
In February 2015, we adopted a whitelist-based enforcing
Content Security Policy in Google Maps Activities, a com-
plex and JavaScript-heavy web application used by 4 million
monthly active users. We started with a simple policy, in-
cluding a nonce and whole origins, but had to extend it
progressively – making 5 major changes throughout 2015 –
to cope with changes in the application, APIs and libraries,
while keeping the whitelisted paths as secure and restrictive
as possible. In order to avoid breakages in production, we
had to periodically update origins to reﬂect changes to the
API and the content-serving infrastructure. This led to an
explosion in size of the script-src whitelist: it grew to 15
long paths, which unfortunately still had to include at least
one JSONP endpoint, compromising the eﬀectiveness of the
policy in terms of XSS protection.
Since noncing of scripts in the markup was already in
place, switching from a whitelist-based approach to a nonce-
only policy with ’strict-dynamic’ required no refactoring
eﬀort. The switch also allowed us to drastically simplify the
policy, avoiding breakages, while at the same time making it
more secure and much easier to maintain – in fact, we have
not had to make changes to the policy since then.
So far, we have deployed a nonce-only policy with ’strict-
dynamic’ with very little eﬀort on Google Photos, Cloud
Console, History, Cultural Institute and others.
4.3 Limitations
Nonce-based policies that use ’strict-dynamic’ oﬀer the
promise of a more secure and simple-to-deploy CSP, but they
are not a panaceum for XSS. Authors will still need to pay
attention to both security and compatibility considerations:
4.3.1
Security
• Injections into the src-attribute of dynamically cre-
ated scripts: With ’strict-dynamic’, if the root cause
of an XSS bug is the injection of untrusted data into
a URL passed to the src-attribute of a script created
via the createElement() API, the bug will become
exploitable, whereas with a whitelist-based policy, the
location of the script would be restricted to sources
allowed in the policy.
• Injections into a nonced :
If the injection
point is inside a  trusted by the developer
with a nonce, an attacker will be able to execute their
malicious script without restrictions. This, however, is
still possible with traditional policies.
• Post-XSS/scriptless attacks: Even if a policy prevents
an attacker from executing arbitrary scripts in the con-
text of the application, other limited, but also damag-
ing attacks might still be possible[38, 13].
4.3.2 Compatibility
• Parser-inserted scripts:
If an application uses APIs
such as document.write() to dynamically add scripts,
they will be blocked by ’strict-dynamic’ even if they
point to a whitelisted resource. Adopters will have to
refactor such code to use another API such as cre-
ateElement(), or explicitly pass a nonce to the
 element created with document.write().
• Inline event handlers: ’strict-dynamic’ does not elim-
inate the time-consuming process of removing markup
incompatible with CSP, such as javascript: URIs
or inline event handlers. Developers will still need to
refactor such patterns before adopting CSP.
Despite these caveats, based on an analysis of hundreds
of XSS bugs in a Google-internal data set, we expect that a
large majority of XSS will be mitigated using nonce-based
policies, and that adopting such policies is signiﬁcantly eas-
ier for developers than the traditional approach based on
whitelists.
5. RELATED WORK
One of the ﬁrst papers that proposed whitelisting of scripts
to thwart injection attacks was published in 2007 [16]. The
system called Browser-Enforced Embedded Policies (BEEP),
aims to restrict script inclusion at the browser level based
on a policy provided by the application owner. Similar to
BEEP, Oda et al. proposed SOMA [26], which extends the
idea of BEEP from scripts to other web resources. These
ideas were picked up by Stamm et al. who published the
initial CSP paper called “Reining in the Web with Content
Security Policy” [31]. Afterward, CSP was picked up by sev-
eral browser vendors and standardization committees.
In
2011, Firefox [32] as well as Chromium [2] shipped ﬁrst ex-
perimental prototypes. Subsequently, several iterations of
CSP have been standardized and shipped.
Initially, CSP got a lot of attention and many sites started
experimenting with it. However, since CSP requires large-
scale changes the adoption rate is still small. In 2014, Weiss-
bacher et al. published the ﬁrst study on the adoption of
CSP [36]. In their study, they found that only 1 % out of
the top 100 web pages utilized CSP. In order to explore the
reasons behind this low adoption rate, they conducted ex-
periments by deploying CSP policies to three distinct sites.
Thereby, they found that creating an initial policy is very
diﬃcult, because secure policies require extensive changes
to existing applications. This problem was investigated by
Doup´e et al. Their system, named deDacota [7], employs au-
tomatic code rewriting in order to externalize inline scripts.
This in turn enables their system to automatically deploy a
CSP policy to the given application.
Kerschbaumer et al. aimed to solve a similar problem.
They observed that many pages utilize the insecure ’unsafe-
inline’ keyword in order to avoid the rewriting of their ap-
plications. Hence, Kerschbaumer et al. created a system
to automatically generate CSP policies via a crowd-sourced
learning approach [19]. Over time, their system learned the
legitimate scripts observed by multiple users and ensures
that only these legitimate scripts are whitelisted within the
policy, via script hashes.
Another problem in CSP was investigated by Johns. In
his paper [17], he addressed the security issues caused by
dynamically generated scripts. To counter the threat im-
posed by JSONP-like endpoints, he proposed not to whitelist
scripts based on their origin, but to whitelist scripts based
on their checksum; i.e., the script’s hash. However, this ap-
proach only works for static ﬁles, not for dynamic ones such
as JSONP. Hence, he proposed a script templating mecha-
nism that allows developers to separate dynamic data values
from static code. In this way, a script’s hash can be calcu-
lated for its static parts, while it is still capable of containing
dynamic data values.
Another paper by Hausknecht et al. investigates the ten-
sion between browser extensions and CSP [11]. The authors
conducted a large-scale study of browser extensions from the
Chrome web store and found that many extensions tamper
with the CSP of a page. Hence, they propose an endorse-
ment mechanism that allowed an extension to ask the web
page for permission before changing the security policy.
In Section 4, we present a new way of writing CSP poli-
cies. Instead of whitelists, we recommend the use of script
nonces. The idea of using nonces to prevent XSS has been
proposed before. The ﬁrst paper to do so presented a system
called Noncespaces [9]. Noncespaces automatically prepends
legitimate HTML tags with a random XML namespace. If
an injection vulnerability occurs in the application, the at-
tacker is not capable of predicting this random namespace
and thus is not able to inject a valid script tag.
Another system that picked up the idea of instruction
set randomization is xJs [1]. xJS XORs all the legitimate
JavaScript code with a secret key that is shared between
the server and the browser and is refreshed for each request.
Since the browser decrypts the scripts at runtime and the at-
tacker cannot know the secret key, it is impossible to create
a valid exploit payload.
6. CONCLUSION
In this paper, we presented an assessment of the practical
security beneﬁts of adopting CSP in real-world applications,
based on a large-scale empirical study.
We performed an in-depth analysis of the security model
of CSP and identiﬁed several cases where seemingly safe poli-
cies provided no security improvement. We investigated the
adoption of CSP on over 1 billion hostnames, and identiﬁed
1.6 million hosts using 26,011 unique policies in the Google
search index.
Unfortunately, the majority of these policies are inher-
ently insecure. Via automated checks, we were able to demon-
strate that 94.72 % of all policies can be trivially bypassed
by an attacker with a markup-injection bug. Furthermore,
we analyzed the security properties of whitelists. Thereby,
we found that 75.81 % of all policies and 41.65 % of all strict
policies contain at least one insecure host within their white-
lists. These numbers lead us to the believe that whitelists
are impractical for use within CSP policies.
Hence, we proposed a new way of writing policies.
In-
stead of whitelisting entire hosts, we recommend enabling
individual scripts via an approach based on CSP nonces.
In order to ease the adoption of nonce-based CSP, we fur-
thermore proposed the ’strict-dynamic’ keyword. Once
speciﬁed within a CSP policy, this keyword enables a mode
inside the browser to inherit nonces to dynamic scripts.
Hence, if a script trusted with a nonce creates a new script at
runtime, this new script will also be considered legitimate.
Although this technique departs from the traditional host
whitelisting approach of CSP, we consider the usability im-
provements signiﬁcant enough to justify its broad adoption.
Since this is designed to be an opt-in mechanism, it does not
reduce the protective capabilities of CSP by default.
We expect that that the combination of a nonce-based ap-
proach and the ’strict-dynamic’ keyword will allow devel-
opers and organizations to ﬁnally enjoy real security beneﬁts
oﬀered by the Content Security Policy.
7. REFERENCES
[1] E. Athanasopoulos, V. Pappas, A. Krithinakis, S. Ligouras,
E. P. Markatos, and T. Karagiannis. xjs: practical xss
prevention for web application development. In USENIX
conference on Web application development, 2010.
[2] A. Barth. Bug 54379 - add basic parser for content security
policy, 2011.
[3] A. Barth, D. Veditz, and M. West. Content security policy
level 2. W3C Working Draft, 2014.
[4] D. Bates, A. Barth, and C. Jackson. Regular expressions
considered harmful in client-side xss ﬁlters. WWW ’10.
[5] H. Bojinov, E. Bursztein, and D. Boneh. Xcs: cross channel
scripting and its impact on web applications. CCS ’09.
[6] CERT. Advisory ca-2000-02 malicious html tags embedded
in client web requests, Feb. 2000.
[7] A. Doup´e, W. Cui, M. Jakubowski, M. Peinado, C. Kruegel,
and G. Vigna. dedacota: toward preventing server-side xss
via automatic code and data separation. In CCS’13.
[8] M. Foundation. Csp policy directives, 2016.
[9] M. V. Gundy and H. Chen. Noncespaces: Using
randomization to enforce information ﬂow tracking and
thwart cross-site scripting attacks. In NDSS, 2009.
[10] R. Hansen and J. Grossman. Clickjacking, 2008.
[11] D. Hausknecht, J. Magazinius, and A. Sabelfeld. May
i?-content security policy endorsement for browser
extensions. In DIMVA’15.
[12] B. Hayak. Same origin method execution (some):
Exploiting a callback for same origin policy bypass, 2014.
[13] M. Heiderich, M. Niemietz, F. Schuster, T. Holz, and
J. Schwenk. Scriptless attacks: stealing the pie without
touching the sill. In CCS’12.
[14] M. Heiderich, J. Schwenk, T. Frosch, J. Magazinius, and
E. Z. Yang. mxss attacks: Attacking well-secured
web-applications by using innerhtml mutations. In CCS’13.
[15] E. Homakov. Using content-security-policy for evil, 2014.
[16] T. Jim, N. Swamy, and M. Hicks. Defeating script injection
attacks with browser-enforced embedded policies. In
WWW’07.
[17] M. Johns. Script-templates for the content security policy.
Journal of Information Security and Applications, 2014.
[18] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static
analysis tool for detecting web application vulnerabilities.
In S&P’06.
[19] C. Kerschbaumer, S. Stamm, and S. Brunthaler. Injecting
csp for fun and security.
[20] A. Klein. Dom based cross site scripting or xss of the third
kind. Web Application Security Consortium Articles 4,
2005.
[21] S. Lekies, B. Stock, and M. Johns. 25 million ﬂows later:
large-scale detection of dom-based xss. In CCS’13.
[22] M. T. Louw and V. Venkatakrishnan. Blueprint: Robust
prevention of cross-site scripting attacks for existing
browsers. In Security and Privacy, 2009. IEEE, 2009.
[23] G. Maone. Noscript.
[24] MITRE. Common vulnerabilities and exposures - the
standard for information security vulnerability names.
[25] Y. Nadji, P. Saxena, and D. Song. Document structure
integrity: A robust basis for cross-site scripting defense. In
NDSS, 2009.
[26] T. Oda, G. Wurster, P. C. van Oorschot, and A. Somayaji.
Soma: Mutual approval for included content in web pages.
In CCS’08.
[27] K. Patil and B. Frederik. A measurement study of the
content security policy on real-world applications.
International Journal of Network Security, 2016.
[28] D. Ross. IE 8 xss ﬁlter architecture/implementation. Blog:
http://goo.gl/eOiPsI, 2008.
[29] P. Saxena, S. Hanna, P. Poosankam, and D. Song. Flax:
Systematic discovery of client-side validation vulnerabilities
in rich web applications. In NDSS, 2010.
[30] W. Security. Website security statistics report, May 2013.
[31] S. Stamm, B. Sterne, and G. Markham. Reining in the web
with content security policy. In WWW’10.
[32] B. Sterne. Creating a safer web with content security
policy, 2011.
[33] B. Stock, S. Lekies, T. Mueller, P. Spiegel, and M. Johns.
Precise client-side protection against dom-based cross-site
scripting. In USENIX Security, 2014.
[34] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross site scripting prevention with dynamic
data tainting and static analysis. In NDSS, 2007.
[35] G. Wassermann and Z. Su. Static detection of cross-site
scripting vulnerabilities. In ICSE’08.
[36] M. Weissbacher, T. Lauinger, and W. Robertson. Why is
csp failing? trends and challenges in csp adoption. In
RAID’14.
[37] D. Wichers. Owasp top-10 2013. OWASP Foundation,
February, 2013.
[38] M. Zalewski. Postcards from the post-xss world. Online at
http://lcamtuf.coredump.cx/postxss, 2011.
[39] M. Zalewski. The subtle / deadly problem with csp. Online
at http://goo.gl/sK4w7q, 2011.