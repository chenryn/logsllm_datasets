# Content Security Policy (CSP) and the 'strict-dynamic' Directive

## Table 5: Bypassability of the 15 Most Common Whitelisted Hosts in script-src
| Host | Bypassable |
|------|------------|
| AngularJS | No |
| Bypass | No |
| Bypassable | Yes |
| ... | ... |

### Content-Security-Policy:
```http
script-src https://example.org;
default-src;
script-src 'nonce-random123' https://foobar.org,
```

Another issue with nonce-based policies arises when new scripts are added to the page via JavaScript. Since JavaScript libraries may not be aware of CSP and do not know the correct nonce, dynamically inserted scripts would be blocked by CSP, causing parts of the application to fail.

To address this problem and facilitate safe policies without relying on source lists, we propose a new source expression for `script-src`: `'strict-dynamic'`. This is a draft CSP3 specification and is implemented in Chrome and Opera. We describe the adoption process and results in a popular production application in Section 4.2.

## 4.1 Propagating Trust to Dynamic Scripts

Adding the proposed `'strict-dynamic'` keyword to a `script-src` source list has the following consequences:
- **Dynamically Added Scripts**: Scripts created using `document.createElement('script')` will be allowed to execute, regardless of whether their URL is in the `script-src` whitelist.
- **Ignored Whitelist Entries**: The browser will not execute static or parser-inserted scripts unless they are accompanied by a valid nonce.

The core observation behind this approach is that scripts added by calling `createElement()` are already trusted by the application, as the developer has explicitly chosen to load and execute them. An attacker who finds a markup-injection bug cannot directly call `createElement()` without first being able to execute JavaScript, and they cannot inject a malicious script and execute JavaScript without knowing the proper nonce defined in the policy.

### Example Policy
```http
Content-Security-Policy:
script-src 'nonce-random123' 'strict-dynamic';
object-src 'none';
```

With such a policy, the owner needs to add nonces to static `<script>` elements, ensuring that only these trusted scripts and their descendants will execute. This mode of deploying CSP can significantly improve the security of a policy and facilitate its adoption.

## 4.2 Case Study for 'strict-dynamic'

In February 2015, we adopted a whitelist-based enforcing Content Security Policy in Google Maps Activities, a complex and JavaScript-heavy web application used by 4 million monthly active users. We started with a simple policy, including a nonce and whole origins, but had to extend it progressively—making five major changes throughout 2015—to cope with changes in the application, APIs, and libraries while keeping the whitelisted paths as secure and restrictive as possible.

To avoid breakages in production, we had to periodically update origins to reflect changes to the API and content-serving infrastructure. This led to an explosion in the size of the `script-src` whitelist, which grew to include 15 long paths, still including at least one JSONP endpoint, compromising the effectiveness of the policy in terms of XSS protection.

Since noncing of scripts in the markup was already in place, switching from a whitelist-based approach to a nonce-only policy with `'strict-dynamic'` required no refactoring effort. The switch also allowed us to drastically simplify the policy, avoiding breakages, making it more secure, and much easier to maintain. In fact, we have not had to make changes to the policy since then.

We have deployed a nonce-only policy with `'strict-dynamic'` with very little effort on Google Photos, Cloud Console, History, Cultural Institute, and other applications.

## 4.3 Limitations

Nonce-based policies that use `'strict-dynamic'` offer a more secure and simpler-to-deploy CSP, but they are not a panacea for XSS. Authors will still need to pay attention to both security and compatibility considerations:

### 4.3.1 Security
- **Injections into the src-attribute of dynamically created scripts**: With `'strict-dynamic'`, if the root cause of an XSS bug is the injection of untrusted data into a URL passed to the `src-attribute` of a script created via the `createElement()` API, the bug will become exploitable. In contrast, a whitelist-based policy restricts the location of the script to sources allowed in the policy.
- **Injections into a nonced <script> tag**: If the injection point is inside a `<script>` tag trusted by the developer with a nonce, an attacker will be able to execute their malicious script without restrictions. This is still possible with traditional policies.
- **Post-XSS/scriptless attacks**: Even if a policy prevents an attacker from executing arbitrary scripts in the context of the application, other limited but damaging attacks might still be possible.

### 4.3.2 Compatibility
- **Parser-inserted scripts**: If an application uses APIs such as `document.write()` to dynamically add scripts, they will be blocked by `'strict-dynamic'` even if they point to a whitelisted resource. Adopters will need to refactor such code to use another API like `createElement()`, or explicitly pass a nonce to the `<script>` element created with `document.write()`.
- **Inline event handlers**: `'strict-dynamic'` does not eliminate the time-consuming process of removing markup incompatible with CSP, such as `javascript:` URIs or inline event handlers. Developers will still need to refactor such patterns before adopting CSP.

Despite these caveats, based on an analysis of hundreds of XSS bugs in a Google-internal dataset, we expect that a large majority of XSS will be mitigated using nonce-based policies, and that adopting such policies is significantly easier for developers than the traditional approach based on whitelists.

## 5. Related Work

One of the first papers that proposed whitelisting of scripts to thwart injection attacks was published in 2007 [16]. The system, called Browser-Enforced Embedded Policies (BEEP), aims to restrict script inclusion at the browser level based on a policy provided by the application owner. Similar to BEEP, Oda et al. proposed SOMA [26], which extends the idea of BEEP from scripts to other web resources. These ideas were picked up by Stamm et al., who published the initial CSP paper called "Reining in the Web with Content Security Policy" [31]. Afterward, CSP was adopted by several browser vendors and standardization committees.

In 2011, Firefox [32] and Chromium [2] shipped first experimental prototypes. Subsequently, several iterations of CSP have been standardized and shipped. Initially, CSP got a lot of attention, and many sites started experimenting with it. However, since CSP requires large-scale changes, the adoption rate is still small. In 2014, Weissbacher et al. published the first study on the adoption of CSP [36]. They found that only 1% of the top 100 web pages utilized CSP. To explore the reasons behind this low adoption rate, they conducted experiments by deploying CSP policies to three distinct sites. They found that creating an initial policy is very difficult because secure policies require extensive changes to existing applications.

This problem was investigated by Doupé et al. Their system, named deDacota [7], employs automatic code rewriting to externalize inline scripts, enabling the automatic deployment of a CSP policy to the given application.

Kerschbaumer et al. aimed to solve a similar problem. They observed that many pages utilize the insecure `'unsafe-inline'` keyword to avoid the rewriting of their applications. Hence, Kerschbaumer et al. created a system to automatically generate CSP policies via a crowd-sourced learning approach [19]. Over time, their system learned the legitimate scripts observed by multiple users and ensures that only these legitimate scripts are whitelisted within the policy, via script hashes.

Another problem in CSP was investigated by Johns. In his paper [17], he addressed the security issues caused by dynamically generated scripts. To counter the threat imposed by JSONP-like endpoints, he proposed not to whitelist scripts based on their origin but to whitelist scripts based on their checksum; i.e., the script's hash. However, this approach only works for static files, not for dynamic ones such as JSONP. Hence, he proposed a script templating mechanism that allows developers to separate dynamic data values from static code. In this way, a script's hash can be calculated for its static parts, while it is still capable of containing dynamic data values.

Another paper by Hausknecht et al. investigates the tension between browser extensions and CSP [11]. The authors conducted a large-scale study of browser extensions from the Chrome web store and found that many extensions tamper with the CSP of a page. Hence, they propose an endorsement mechanism that allows an extension to ask the web page for permission before changing the security policy.

In Section 4, we present a new way of writing CSP policies. Instead of whitelists, we recommend the use of script nonces. The idea of using nonces to prevent XSS has been proposed before. The first paper to do so presented a system called Noncespaces [9]. Noncespaces automatically prepends legitimate HTML tags with a random XML namespace. If an injection vulnerability occurs in the application, the attacker is not capable of predicting this random namespace and thus is not able to inject a valid script tag.

Another system that picked up the idea of instruction set randomization is xJs [1]. xJS XORs all the legitimate JavaScript code with a secret key that is shared between the server and the browser and is refreshed for each request. Since the browser decrypts the scripts at runtime and the attacker cannot know the secret key, it is impossible to create a valid exploit payload.

## 6. Conclusion

In this paper, we presented an assessment of the practical security benefits of adopting CSP in real-world applications, based on a large-scale empirical study. We performed an in-depth analysis of the security model of CSP and identified several cases where seemingly safe policies provided no security improvement. We investigated the adoption of CSP on over 1 billion hostnames and identified 1.6 million hosts using 26,011 unique policies in the Google search index.

Unfortunately, the majority of these policies are inherently insecure. Via automated checks, we were able to demonstrate that 94.72% of all policies can be trivially bypassed by an attacker with a markup-injection bug. Furthermore, we analyzed the security properties of whitelists. We found that 75.81% of all policies and 41.65% of all strict policies contain at least one insecure host within their whitelists. These numbers lead us to believe that whitelists are impractical for use within CSP policies.

Hence, we proposed a new way of writing policies. Instead of whitelisting entire hosts, we recommend enabling individual scripts via an approach based on CSP nonces. To ease the adoption of nonce-based CSP, we further proposed the `'strict-dynamic'` keyword. Once specified within a CSP policy, this keyword enables a mode inside the browser to inherit nonces to dynamic scripts. Therefore, if a script trusted with a nonce creates a new script at runtime, this new script will also be considered legitimate.

Although this technique departs from the traditional host whitelisting approach of CSP, we consider the usability improvements significant enough to justify its broad adoption. Since this is designed to be an opt-in mechanism, it does not reduce the protective capabilities of CSP by default.

We expect that the combination of a nonce-based approach and the `'strict-dynamic'` keyword will allow developers and organizations to finally enjoy real security benefits offered by the Content Security Policy.

## 7. References
[1] E. Athanasopoulos, V. Pappas, A. Krithinakis, S. Ligouras, E. P. Markatos, and T. Karagiannis. xjs: practical xss prevention for web application development. In USENIX conference on Web application development, 2010.
...
[39] M. Zalewski. The subtle / deadly problem with csp. Online at http://goo.gl/sK4w7q, 2011.