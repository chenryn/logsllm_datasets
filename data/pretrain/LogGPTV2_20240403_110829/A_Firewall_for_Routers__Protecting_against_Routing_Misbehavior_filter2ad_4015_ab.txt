Although individual network providers have the freedom
to deﬁne their own routing policies, there are some well-
known guidelines for specifying policies according to the best
common practices (BCP) of BGP [15]. Violations of policies
may result in unexpected trafﬁc blackholes.
1. Export policy violations. The RouteNormalizer identiﬁes
the class of updates that violate routing policies, especially
those associated with the local AS. For example, a multi-
homed customer, or a customer peering with more than one
upstream providers is not allowed to advertise routes received
from one provider to another [18]. Such violations of the so-
called export policies can be identiﬁed by checking the AS
relationship between the customer AS and the nexthop AS
beyond the customer AS in the AS PATH of the routes ad-
vertised by the customer router. ISP can either deprefer these
routes or resort to overlay routing to bypass the problem.
2. Nexthop violations. Typically the routes advertised by
a neighboring router in the BGP session correspond to the
routes in the forwarding table of the neighbor. The nexthop
AS and the nexthop IP should be the neighbor’s AS num-
ber and the remote router’s interface IP respectively. Other-
wise, the routes advertised will not correspond to trafﬁc going
through the neighbors. If any of the two assertions fails, the
RouteNormalizer raises an alarm to the network operator.
Remark: Routing policy violation checks are more cumber-
some to perform inside routers due to the need of external
information such as AS relationships.
2.4 Detect routing anomalies
The RouteNormalizer identiﬁes routing anomalies by ex-
amining the routing data locally received from the neigh-
bors. Correlating updates from multiple locations can provide
a network-wide view to help consistency checking and po-
tentially discover additional routing anomalies. Network re-
searchers have used BGP data from multiple vantage points to
improve AS relationship inference [18, 41, 8] and BGP health
monitoring [32]. Our goal here is to (i) identify deviations
from average behavior, (ii) perform consistency checking, and
(iii) track announcements of one’s own address blocks. Note
that timely and accurate detection of routing anomalies facil-
itate and inform mitigate responses.
1. Anomalous routing behavior. The RouteNormalizer es-
tablishes a routing proﬁle consisting of characteristics such
as the distribution of routes in terms of AS PATHs, ASes,
and the number of routes from each neighbor. This pro-
ﬁle is tracked over time and across data from each vantage
point. Besides deviation from history data, another way to
3
ﬁnd anomalies is to identify frequently changing values, im-
plying instability in the routing system.
2. Routing inconsistency. The second objective is to iden-
tify inconsistent route advertisements excluding convergence
effects. Commonly each AS advertises its best path consis-
tently across all peering locations to all its neighbors comply-
ing to its export policies. This assumption is commonly held
to be true according to the protocol speciﬁcation, also based
on the well-known deﬁnition of an AS [22]. The consequence
of inconsistent routing advertisements is unintended routing
behavior deviating from the usual practice of hot-potato rout-
ing, resulting in potential increased network cost.
3. Address space hijacking. This is an important anomaly
given today’s danger of IP address hijacks and trafﬁc black-
holes. This also illustrates the usefulness of correlating BGP
data from multiple locations. Address space hijacking refers
to the case when a network announces a route as the origina-
tor to the address block it does not own. The last AS in the
AS PATH is the originating AS. Spammers are known to take
advantage of hijacked address spaces to avoid being identi-
ﬁed. Such instances have also occurred due to misconﬁgura-
tions: in December 1999, AT&T Worldnet was off the air be-
cause someone by mistake was advertising a critical network
owned by Worldnet [9]. To detect hijacking attempts for lo-
cally originated address blocks, the RouteNormalizer uses the
knowledge of which address blocks originate from the local
network. It is important to identify whether other networks
announce as the originator updates to locally owned address
blocks. To increase the conﬁdence in detection, we correlate
the suspected hijacked address blocks with other data sources,
such as Spam Archive [5] and blacklisted addresses from sites
such as Dshield [1].
Remark: Anomaly detection is not supported by routers to-
day and is difﬁcult to implement in routers due to the complex
logic and external data requirement. Commercial routers used
in most networks today are not programmable. Implementing
anomaly detection in software on RouteNormalizer is more
ﬂexible and easily allows additions of new functionality as
the protocol evolves.
2.5 Manage instability and load
Routing instability and attacks can incur numerous up-
dates, as demonstrated by worm outbreaks causing routing
disruptions [16]. Processing such updates adds extra over-
head given router’s limited resources. The RouteNormalizer
helps manage the load on routers by mitigating routing insta-
bility and minimizing unnecessary updates processed by the
local router in the following ways.
1. Identical routing updates. We found on average about 5%
of updates from RouteViews [6] consist of identical BGP up-
dates which is usually due to router software bugs [28]. These
updates are not at all useful for route computation; however,
they may consume router resources. The RouteNormalizer
can easily detect their presence and drop them.
2. Instability due to ﬂapping preﬁxes and session reset.
Occasionally, a large number of routing updates stem from
unstable preﬁxes that continuously go up and down [38] due
to ﬂaky hardware, for instance. Route ﬂap damping [44, 36]
requires maintaining the update history for each preﬁx and
can lead to memory exhaustion. Furthermore, it may not
be enabled in every router. By delaying routing updates,
the RouteNormalizer is effectively slowing down the sending
rate, needed to prevent router overload. The RouteNormalizer
can also effectively emulate the ﬂap damping algorithm in a
modiﬁed and improved way by ensuring that routes are only
suppressed when at least one alternate route exists.
Receiving a large number of legitimate updates from its
neighbors due to sudden signiﬁcant routing changes or ses-
sion resets will causes signiﬁcant update processing over-
head. Usually the core router has multiple BGP sessions,
which can be easily overwhelmed and become unresponsive
in forwarding packets [13]. The graceful restart mechanism
for BGP [39] has been proposed to minimize the effects due
to session resets. To take advantage of this feature, routers
need to support such capability so that End-of-RIB marker
is sent and routes are retained even after session reset for a
bounded time. However, many routers today may not sup-
port such capability, especially the legacy routers with out-
dated router software. The RouteNormalizer can emulate the
graceful restart functionality and furthermore enhance it by
ensuring there are no inconsistent routing information.
Whenever the RouteNormalizer delays routing updates on
behalf of the local router, the imposed delay can be set based
on the inferred load.
Inference is performed by observing
the sending rate of routing trafﬁc and data trafﬁc if available.
Moreover, unstable routes may affect routing decisions if such
routes are preferred over alternate stable ones.
Remark: Functionality provided by the RouteNormalizer to
deal with routing instability cannot be easily implemented in-
side the router, as doing so would directly impact the router
load. Precisely when routers are overloaded, such functional-
ity is critical in preventing the impact on the forwarding plane.
2.6 Detailed normalization algorithms
We have enumerated the main functionalities of the
RouteNormalizer. Here we describe some of them in more
details, focusing on their beneﬁt and improvement over the
equivalent functionalities in the router. In all the following
cases, the router either does not provide such support or our
algorithm signiﬁcantly improves upon it.
Deaggregation detection: Deaggregation, the opposite of
aggregation, refers to the behavior of advertising many small
preﬁxes covered in larger preﬁxes already present. The
negative consequence is that the router receiving such an-
nouncements may experience memory exhaustion, possibly
leading to router crashes. To protect against deaggrega-
tion, routers currently use the Max-Preﬁx Limit [14] feature,
which by default disables the peering session after the number
of received preﬁxes exceeds the conﬁgured maximum num-
ber [25]. However, the router does not attempt to differenti-
ate between regular and deaggregated preﬁxes, consequently
causing the entire BGP session to be affected.
4
The RouteNormalizer more intelligently deals with pre-
ﬁx deaggregation, which can be easily detected by observ-
ing an increase in the number of preﬁxes while the number
IP addresses remains relatively constant. When router mem-
ory is scarce, routing announcements to preﬁxes which are
contained within existing preﬁxes in the routing table can be
safely dropped without impacting reachability. It may impact
routing decisions given differences in routes between the ag-
gregate and the subnet preﬁx.
Address hijacking detection: This functionality is currently
not supported by routers and will be difﬁcult for routers to
provide due to the complex logic and external data require-
ment. Detecting address hijacking relies on having accurate
preﬁx to origin AS mappings; however, there are no such au-
thoritative data sources available. If we generate an alarm for
each update that indicates a different origin AS from the lat-
est route of the preﬁx, there would be many false positives.
The reason is that due to multi-homing there are legitimate
reasons for Multiple origin ASes (MOAS [47]). To remedy
this, we develop a mapping of preﬁx to origin AS by learn-
ing from history data from multiple vantage points to improve
detection accuracy.
Graceful restart: Some routers today support graceful
restart [39] and assume that within a conﬁgurable time limit
the restarting router can still properly forward trafﬁc. The
RouteNormalizer can emulate this and enhance routing con-
sistency if it can observe data trafﬁc. The key is to observe
whether trafﬁc such as TCP ACK packets are arriving from
the remote router indicating that packets can indeed reach the
destinations. Otherwise, the RouteNormalizer will withdraw
the routes advertised by the remote router for which alternate
routes exist at the local router to ensure trafﬁc is not black-
holed unnecessarily. Note that even if due to asymmetric rout-
ing, no return trafﬁc is observed, reachability is not compro-
mised as only alternate routes are chosen.
Before the session is re-established, the RouteNormal-
izer keeps track of the latest updates from the local router
to the restarting remote router. Once the session comes up,
the remote router reannounces its entire forwarding table
to the RouteNormalizer, which in turn only selectively for-
wards routes that were previously withdrawn and any changed
routes compared to those before the session reset. From the
RouteNormalizer to the remote router, the latest local router’s
forwarding table is sent. The added intelligence ensures that
only the necessary routes are exchanged upon session reestab-
lishment to reduce overhead for the local router.
Instability detection: BGP already has route ﬂap damping
as speciﬁed in RFC2439 to deal with routing instability. The
RouteNormalizer can emulate it if it is not supported by the
local router or disabled due to memory usage concerns. This
would help reduce both processing and memory overhead.
The RouteNormalizer further improves it by handling per-
sisent ﬂapping, which is ignored due to reinitialized penalty
values upon session reset. Damping statistics are remembered
after session reset to detect such routing instability.
Figure 2. RouteNormalizer (RN) single router
deployment scenario.
3 Deployment Scenarios
In this section, we illustrate deployment scenarios with dif-
ferent degrees of beneﬁt in terms of functionality and ease
of deployment. We expect both eBGP and iBGP to bene-
ﬁt from deploying the RouteNormalizer to block routes from
untrusted external networks as well as to prevent misconﬁgu-
rations from propagating across the internal network.
Figure 2 depicts how the RouteNormalizer is used for a
single BGP session protecting the local router from one re-
mote router. We expect the RouteNormalizer to be deployed
very close to the local router. There are two main ways of set-
ting it up, distinguished by whether the RouteNormalizer can
observe data trafﬁc. Shown in Figure 2(a), case 1 is the trans-
parent TCP proxy setup, requiring no conﬁguration changes
of existing BGP sessions. The RouteNormalizer intercepts
any packets between the remote and the local router. It inserts,
modiﬁes, and drops any packet destined to the BGP port. The
presence of the RouteNormalizer is completely transparent to
either router. Case 2 of Figure 2(a) illustrates the approach
where the RouteNormalizer establishes two sessions, with the
remote and local router respectively. Remote router needs no
conﬁguration changes as it treats the RouteNormalizer as the
local router, which is made aware of the RouteNormalizer.
Changes to local routers are usually easier to implement. To
address the shortcoming of the ﬁrst setup, one can adopt the
approach shown in Figure 2(b). The RouteNormalizer can
pretend to be local router from the perspective of the remote
router, whose conﬁguration requires no modiﬁcations. The
local router is conﬁgured to have a BGP session with the
RouteNormalizer to receive normalized routes. Note that the
local router forwards the BGP updates between the remote
router and the RouteNormalizer which does not observe data
trafﬁc to other destinations within the local network. The re-
sulting advantage is that it can be implemented as a software-
based router and does not need to forward high-speed data
trafﬁc. This setting is more appropriate for BGP sessions in
the core Internet with high trafﬁc rate.
5
1.Initialization
Start
{
Parse configuration
Parse policy
Initialize spam list
Initialize AS relation table
Initialize RADB table
Local input
Other input
Check update format
Y
Update
withdraw
frequency
Withdrawn route
N
Hash prefix
for MOAS and graceful restart
Detect prefix instability
Check nexthop IP and AS
Hash AS
Check private IP address
Detect abnormal AS
path length
Check bogus IP
Check private AS
Check AS path loop
Check AS relation
Detect abnormal MOAS
usage pattern
Detect address
hijacking
{ {
2. Checking path attributes
3. Anomaly detection
Figure 3. Functionality implementation.
In general, an IP network consists of many BGP routers,
each of which may peer with multiple routers. To reduce the
management overhead of per router neighbor based deploy-
ment, we generalize Figure 2(a) Case 2 to protecting multiple
“local” routers, where the RouteNormalizer peers with mul-