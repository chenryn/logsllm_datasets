This code:
    function a(f) {
       return () => {}
    }
    @a(foo => ({}))
    class MyClass {
    }
is transpiled to
    function a(f) {
       return function () {};
    }
    var MyClass = function MyClass() {
       _classCallCheck(this, MyClass);
    };
whereas if you replace the annotation with `@a(foo => 1)` the result changes
dramatically:
    function a(f) {
       return function () {};
    }
    var MyClass = (function () {
       function MyClass() {
          _classCallCheck(this, _MyClass);
       }
       var _MyClass = MyClass;
       MyClass = a(function (foo) {
          return 1;
       })(MyClass) || MyClass;
       return MyClass;
    })();
So it looks like it's not possible to use an arrow function syntax that return
object literals
Possible use cases:
    @connect(state => ({
      counter: state.counter
    }))
    export default class CounterApp {
      render() {
        const { counter, dispatch } = this.props;
        // Instead of `bindActionCreators`, you may also pass `dispatch` as a prop
        // to your component and call `dispatch(CounterActions.increment())`
        return (
        );
      }
    }