as being either (S∗, R0) ← next(Sd) when ˜b = 0 (as in Gi) or (S∗, R0) $← {0, 1}n+‘ when b = 1
(as in Gi+1). Finally we have:
| Pr[Gi+ 1
2
= 1] − Pr[Gi = 1]| = 2 · (Pr[b0∗ = 1|b0 = 1] − 1) = 2 · (Pr[b0∗ = b0] − 1) ≤ εp.
$← {0, 1} and state S
$← {0, 1}n.
2
= 1] − Pr[Gi+1 = 1]| ≤ εr.
Proposition 3. Assuming that the pseudo-random number generator with input has (t, qr, γ∗, εr)-
recovering security, then for any adversary/distinguisher A,D running in time t0 ≈ t, we have
| Pr[Gi+ 1
Proof. Fix adversary/sampler pair A,D running in time t0. Note that the two games above only
diﬀer in the special case where the (i + 1)th next query made by A is recovering. Therefore, we
can assume that A ensures this is always the case, as it can only maximize advantage.
We deﬁne an adversary A0 such that A0,D has advantage εr in the recovering security game.
The adversary A0 gets a value seed from its challenger and passes it to A. Then A0 begins
running A and simulating all of the oracles in the robustness security game. In particular, it
chooses a random “challenge bit” b
It simulates all oracle
calls made by A until right prior to the (i + 1)th next query as in Gi. To simulate calls to
D-refresh, the adversary A0 outputs the values γk, zk that it got from its challenger in the
beginning, but does not immediately update the current state S. Whenever A makes an oracle
call to get-state, get-next, next-ror, set-state, A’ ﬁrst makes suﬃciently many calls to its get-refresh
oracle so as to get the corresponding samples Ik that should have been sampled by these prior
D-refresh calls, and refreshes its state S accordingly before processing the current oracle call.
When A makes its (i + 1)th next query, the adversary A0 looks back and ﬁnds the most recent
entropy drain (mRED) query that A made, and sets S0 to the state of the generator immediately
following that query. Assume A made d calls to D-refresh between the mRED query and the
(i + 1)th next query (these are the “recovering samples”). Then A0 gives (S0, d) to its challenger
$← {0, 1}‘. If the (i + 1)th next query
and gets back (S∗, R0) and Ik+d+1, . . . , Iqr. It chooses R1
made by A is next-ror the adversary A0 also chooses R1
$← {0, 1}‘ and gives Rb to A, where b is
challenge bit randomly picked by A0 in the beginning. In either case, A0 sets the new generator
state to S∗ and continues running the game, simulating all future oracle calls made by A as in
Gi+1 using the values Ik+d+1, . . . , Iqr to simulate D-refresh calls. Finally, if A outputs the bit b∗,
— 62 —
4.3. A Secure Construction
2
the adversary A0 outputs the bit ˜b∗ which is set to 1 if and only if b = b∗.
Notice that if the challenge bit of the challenger for A0 is ˜b = 0 then this exactly simulates
for A and if the challenge bit is ˜b = 1 then this exactly simulates Gi+1. In particular, we
Gi+ 1
can think of the state immediately following the mRED query as S0 and the state immediately
preceding the (i + 1)th next query being Sd which refreshes S0 with the samples Ik+1, . . . , Ik+d,
and the state immediately following the query as being either (S∗, R0) ← next(Sd) when ˜b = 0
) or (S∗, R0) $← {0, 1}n+‘ when b = 1 (as in Gi+1). Also, we note that A0 is a valid
(as in Gi+ 1
j=k+1 γj ≥ γ∗ if the (i + 1)st next query
adversary since the recovering samples must satisfy Pk+d
2
is recovering. Finally:
| Pr[Gi+1 = 1] − Pr[Gi+ 1
2
= 1]| = 2 · (Pr[b0∗ = 1|b0 = 1] − 1) = 2 · (Pr[b0∗ = b0] − 1) ≤ εr.
4.3 A Secure Construction
Let G : {0, 1}m → {0, 1}n+‘ be a standard pseudo-random generator where m  m, ‘, γ∗ be integers. Assume that G : {0, 1}m → {0, 1}n+‘ is a standard
(t, εG)-secure pseudo-random generator. Let G = (setup, refresh, next) be deﬁned as above. Then
G is a ((t0, qr, qn, qs), γ∗, ε)-robust pseudo-random number generator with input where t0 ≈ t, ε =
r εext +2−n+1) as long as γ∗ ≥ m+2 log(1/εext)+1, n ≥ m+2 log(1/εext)+log(qr)+1.
qn(2εG +q2
We present the proof below, but now make a few comments. First, it is instructive to split the
security bound on ε into two parts (ignoring the “truly negligible” term qn · 2−n+1): “computa-
tional” part εcomp = 2qn · εG and “statistical” part εstat = qnq2
r · εext, so that ε ≈ εcomp + εstat.
Notice, the computational term εcomp is already present in any “input-free” generator (or “stream
cipher”), where the state S is assumed to never be compromised (so there is no refresh operation)
and next(S) = G(S). Also, such stream cipher has state length n = m. Thus, we can view the
r · εext and the “state overhead” n − m = 2 log(1/εext) + log(qr) + 1
statistical term εstat = qnq2
as the “price” one has to pay to additionally recover from occasional compromise (using fresh
entropy gathered by the system).
In addition, to slightly reduce the number of parameters in Theorem 10, we can let k be our
“security parameter” and set qr = qn = qs = 2k and εext = 2−4k. Then we see that εstat =
23k ·2−4k = 2−k, εcomp = 2k+1εG and we can set n = m+2 log(1/εext)+log(qr)+1 = m+9k +1
and γ∗ = m + 2 log(1/εext) + 1 = m + 8k + 1. Summarizing all of these, we get Theorem 11.
— 64 —
4.3. A Secure Construction
Theorem 11. Let k, m, ‘, n be integers, where n ≥ m + 9k + 1. Assume that G : {0, 1}m →
{0, 1}n+‘ is a standard (t, εG)-secure pseudo-random generator. Then G is a ((t0, 2k, 2k, 2k), m+
8k + 1, 2k+1 · εG + 2−k)-robust pseudo-random number generator with input, having n-bit state
and ‘-bit output, where t0 ≈ t.
Coming back to our comparison with the stream ciphers (or “input-free” generators), we see
that we can achieve statistical security overhead εstat = 2−k (with qr = qn = qs = 2k) at the
price of state overhead n − m = 9k + 1 (and where entropy threshold γ∗ = m + 8k + 1 = n − k).
Proof of Theorem 10 We show that G satisﬁes (t0, qr, γ∗, (εG + q2
r εext))-recovering security
and (t0, (εG + 2−n+1))-preserving security. Theorem 10 then follows directly from Theorem 9.
Proposition 4. The pseudo-random number generator with input G has (t0, εG + 2−n+1)-
preserving security.
proc. D-refresh(I)
Sj := Sj−1 · X + I
Game G0 = PRES
proc. next-ror
U = [Sd · X0]m1
(S(0), R(0)) ← G(U)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
proc. D-refresh(I)
Sj := Sj−1 · X + I
Game G1
proc. next-ror
$← {0, 1}n
Sd
U = [Sd · X0]m1
(S(0), R(0)) ← G(U)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
proc. D-refresh(I)
Sj := Sj−1 · X + I
Game G2
proc. next-ror
$← {0, 1}m
U
(S(0), R(0)) ← G(U)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
proc. D-refresh(I)
Sj := Sj−1 · X + I
Game G3
proc. next-ror
(S(0), R(0)) $← {0, 1}n+‘
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
$← {0, 1}n;
proc. initialize(D)
(X, X0) $← setup;
S0
j ← 0;
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. initialize(D)
(X, X0) $← setup;
$← {0, 1}n;
S0
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. initialize(D)
(X, X0) $← setup;
$← {0, 1}n;
S0
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. initialize(D)
(X, X0) $← setup;
$← {0, 1}n;
S0
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
Figure 4.8 – Preserving Security of G