title:Self-healing multitier architectures using cascading rescue points
author:Angeliki Zavou and
Georgios Portokalidis and
Angelos D. Keromytis
Self-Healing Multitier Architectures using Cascading
Rescue Points
Angeliki Zavou, Georgios Portokalidis, Angelos D. Keromytis
Department of Computer Science
Columbia University, New York, NY, USA
{azavou, porto, angelos}@cs.columbia.edu
ABSTRACT
Software bugs and vulnerabilities cause serious problems to
both home users and the Internet infrastructure, limiting
the availability of Internet services, causing loss of data,
and reducing system integrity. Software self-healing using
rescue points (RPs) is a known mechanism for recovering
from unforeseen errors. However, applying it on multitier
architectures can be problematic because certain actions,
like transmitting data over the network, cannot be undone.
We propose cascading rescue points (CRPs) to address the
state inconsistency issues that can arise when using tradi-
tional RPs to recover from errors in interconnected appli-
cations. With CRPs, when an application executing within
a RP transmits data, the remote peer is notiﬁed to also
perform a checkpoint, so the communicating entities check-
point in a coordinated, but loosely coupled way. Notiﬁca-
tions are also sent when RPs successfully complete execu-
tion, and when recovery is initiated, so that the appropriate
action is performed by remote parties. We developed a tool
that implements CRPs by dynamically instrumenting bina-
ries and transparently injecting notiﬁcations in the already
established TCP channels between applications. We tested
our tool with various applications, including the MySQL and
Apache servers, and show that it allows them to successfully
recover from errors, while incurring moderate overhead be-
tween 4.54% and 71.56%.
Categories and Subject Descriptors
D.4.5 [Software]: Operating Systems—Reliability
General Terms
Reliability, Security
Keywords
Software self-healing, error recovery, reliable software, mul-
titier applications
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
1.
INTRODUCTION
Software bugs and vulnerabilities cause serious problems
to both home users and the Internet infrastructure. Such
problems include broad outages [23], integrity violations [26],
and data loss [14]. Despite the great combined eﬀorts of both
industry [12] and researchers [4, 8] the continuously increas-
ing size and complexity of software makes it extremely diﬃ-
cult to produce error-free software. To mitigate the eﬀects of
bugs that can reduce the integrity of systems, a plethora of
runtime protection mechanisms have been devised, like stack
smashing protection [10], write integrity testing [2], address
space layout and code randomization [22, 21, 27]. Never-
theless, while protection mechanisms render certain types
of vulnerabilities infeasible or impractical, they do not also
oﬀer high availability and reliability, as they frequently re-
sort to terminating applications that behave abnormally to
prevent attackers from performing any useful action.
To increase software availability, many mechanisms that
aim to recover execution when unhandled errors occur have
been proposed [16]. One of these mechanisms is software
self-healing based on rescue points [30]. It operates based
on the observation that applications already contain code for
handling anticipated errors and proposes reusing this code
to also handle unexpected errors. Rescue points (RPs) are
essentially functions that contain error handling code, which
can be exploited to recover from errors occurring within the
RP, including the RP routine itself and all called routines.
A checkpoint is taken upon entering a RP, and execution
is rolled back to that checkpoint when an unhandled error
occurs, while concurrently a valid error code is returned by
the RP to the application (i.e., through the routine’s return
value), so that it can gracefully handle the failure.
Applying RP-based self-healing on self-contained functions
is straightforward, however there are many functions that
have side eﬀects, such as transmitting data to other entities
on the network. Applications that are part of multitier archi-
tectures, like client-server or three-tier architectures (com-
prised by presentation, logic, and data tiers), contain many
such functions. Introducing RPs in such architectures can
be problematic because it can result in inconsistent states
between the tiers when a roll back occurs. For example,
consider the following. The ﬁrst tier communicates certain
information to the second tier, which then communicates
with the third tier, and so on. If an error occurs in the ﬁrst
tier, triggering a rescue point, the application will think that
an error, like a communication failure has occurred, while in
fact the eﬀects of the transmission have already propagated
to other tiers.
379
(cid:18)(cid:9)(cid:19)(cid:3)(cid:11)(cid:6)
(cid:8)(cid:4)(cid:4)(cid:5)(cid:19)(cid:2)(cid:10)(cid:4)(cid:2)
(cid:8)(cid:20)(cid:6)(cid:2)(cid:19)(cid:19)(cid:8)(cid:19)
(cid:1)(cid:2)(cid:4)(cid:5)(cid:19)(cid:19)(cid:2)(cid:10)(cid:4)(cid:2)
(cid:8)(cid:20)(cid:6)(cid:2)(cid:19)(cid:19)(cid:8)(cid:19)
(cid:15)(cid:7)(cid:7)(cid:13)(cid:9)(cid:4)(cid:12)(cid:11)(cid:9)(cid:8)(cid:10)
(cid:2)(cid:16)(cid:2)(cid:4)(cid:5)(cid:11)(cid:9)(cid:8)(cid:10)
(cid:9)(cid:10)(cid:6)(cid:11)(cid:9)(cid:17)(cid:2)(cid:6)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)
(cid:12)(cid:10)(cid:12)(cid:13)(cid:14)(cid:3)(cid:9)(cid:3)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:2)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)
(cid:9)(cid:3)(cid:6)(cid:21)(cid:2)(cid:7)(cid:13)(cid:8)(cid:14)(cid:2)(cid:21)
Figure 1: Software self-healing transforms unantic-
ipated errors from fail-stop to fail-once. After an
unexpected error ﬁrst occurs, causing the applica-
tion to terminate, the data produced during the
fault (e.g., a core dump) are used to analyze the
fault and produce a remedy in the form of a rescue
point. While the application is still “vulnerable” un-
til the (either automatic or manual) oﬄine analysis
is completed, after the rescue point is deployed, a
recurrence of the fault will be gracefully handled.
We propose cascading rescue points (CRPs) for self-healing
applications in multitier architectures to address the incon-
sistency issues introduced by traditional RPs.
In our ap-
proach, when an application executing within a RP com-
municates with an application on the next tier, we notify
the remote peer to also perform a checkpoint, cascading, in
this way, the checkpoint and RP to the lower tiers of the ar-
chitecture. If a RP successfully completes execution or if it
triggers a roll back due to an error occurring, a notiﬁcation is
also send to all the peers that were instructed to checkpoint,
so that they also perform the appropriate action.
We have implemented CRPs using the Pin [18] dynamic
binary instrumentation framework for x86 Linux, extending
our previous work [28] on deploying traditional RPs using
Pin. We improve the checkpointing mechanism used by uti-
lizing the fork() system call to quickly create copy-on-write
copies of an application’s image and use ﬁlters to mark the
individual bytes modiﬁed by threads for eﬃcient thread-wide
checkpointing. We also intercept system calls to restore the
contents of overwritten memory and to transparently inject
information in the communication channels between appli-
cations of diﬀerent tiers that run on top of our tool. We
use the injected data to implement a protocol for convey-
ing notiﬁcations between the various parties. Additionally,
we utilize TCP out-of-band data to asynchronously notify
remote peers of a successful exit from a RP.
In practice, we envision RPs being employed as a tempo-
rary solution for running critical software until a concrete
solution, in the form of a dynamic patch or update, is avail-
able. Using a dynamic framework like Pin enables us to
attach and detach our tool on already running applications
without interrupting its operation, applying RPs only for
as long as they are required. Combined with a dynamic
patching mechanism [7, 11, 19], applications can be run and
eventually patched without any interruption.
Distributed checkpointing and recovery has been a popu-
lar subject of research [5, 32]. However our work is driven by
other goals and diﬀers from previous work in the following
ways:
• Our approach is transparent and self-contained. It does
not require that applications are designed with self-
healing in mind, nor does it require support from the
(cid:36)(cid:10)(cid:8)(cid:16)(cid:13)
(cid:26)(cid:34)(cid:10)(cid:26)(cid:35)(cid:37)(cid:19)(cid:16)(cid:13)(cid:11)(cid:16)(cid:13)(cid:8)
(cid:39)(cid:7)(cid:13)(cid:26)(cid:11)(cid:16)(cid:19)(cid:13)(cid:14)(cid:34)(cid:17)(cid:13)(cid:22)(cid:18)(cid:10)(cid:21)
(cid:11)(cid:34)(cid:10)(cid:14)(cid:10)(cid:12)(cid:12)(cid:19)(cid:12)
(cid:1)(cid:2)(cid:3)(cid:4)
(cid:1)(cid:5)(cid:3)(cid:4)
(cid:6)(cid:7)(cid:8)(cid:3)(cid:4)
(cid:1)(cid:2)(cid:2)(cid:3)
(cid:9)(cid:10)(cid:11)(cid:7)(cid:12)(cid:13)(cid:14)
(cid:15)(cid:16)(cid:12)(cid:11)(cid:7)(cid:17)(cid:18)(cid:14)(cid:10)(cid:12)(cid:12)(cid:19)(cid:12)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:6)(cid:14)(cid:20)(cid:14)(cid:21)(cid:10)(cid:13)(cid:22)(cid:3)(cid:4)(cid:23)
(cid:16)(cid:1)(cid:14)(cid:3)(cid:6)(cid:14)(cid:24)(cid:14)(cid:25)(cid:4)
(cid:14)(cid:14)(cid:14)(cid:12)(cid:10)(cid:11)(cid:14)(cid:10)(cid:12)(cid:12)(cid:2)(cid:23)
(cid:32)(cid:32)(cid:32)(cid:32)
(cid:17)(cid:12)(cid:12)(cid:17)(cid:27)(cid:28)(cid:29)(cid:29)(cid:16)(cid:22)(cid:30)(cid:31)(cid:20)(cid:14)(cid:22)(cid:23)
(cid:12)(cid:10)(cid:11)(cid:7)(cid:12)(cid:13)(cid:14)(cid:25)(cid:23)
(cid:6)(cid:14)(cid:20)(cid:14)(cid:12)(cid:10)(cid:26)(cid:15)(cid:3)(cid:4)(cid:23)
(cid:16)(cid:1)(cid:14)(cid:3)(cid:6)(cid:14)(cid:24)(cid:14)(cid:25)(cid:4)
(cid:14)(cid:14)(cid:14)(cid:12)(cid:10)(cid:11)(cid:7)(cid:12)(cid:13)(cid:14)(cid:10)(cid:12)(cid:12)(cid:5)(cid:23)
(cid:6)(cid:14)(cid:20)(cid:14)(cid:21)(cid:10)(cid:13)(cid:22)(cid:3)(cid:4)(cid:23)
(cid:16)(cid:1)(cid:14)(cid:3)(cid:6)(cid:14)(cid:24)(cid:14)(cid:25)(cid:4)
(cid:14)(cid:14)(cid:14)(cid:12)(cid:10)(cid:11)(cid:7)(cid:12)(cid:13)(cid:14)(cid:10)(cid:12)(cid:12)(cid:38)(cid:23)
(cid:32)(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)(cid:32)
(cid:9)(cid:19)(cid:18)(cid:18)(cid:6)(cid:17)(cid:26)(cid:35)
(cid:33)(cid:12)(cid:17)(cid:21)(cid:34)
(cid:9)(cid:10)(cid:21)(cid:26)(cid:7)(cid:10)(cid:14)(cid:37)(cid:19)(cid:16)(cid:13)(cid:11)
Figure 2: Software self-healing using rescue points.
Function bug() contains an error which can cause an
application crash. If it, or a caller function (e.g., f1()
and f2()), contains error handling code for expected
faults, it can be used to handle unexpected errors,
i.e., it is a possible rescue point. A checkpoint is
made upon entering the rescue point, and execution
is rolled back when an error occurs. We return a
valid error code to allow the application to continue
executing (dashed arrows).
operating system, and it is applicable on binary-only
software
• We do not checkpoint at arbitrary points of execution,
but instead checkpointing is driven by rescue points
• We can dynamically engage/disengage software self-
healing to apply it only when needed
• Our tool piggybacks the checkpointing protocol on ex-
isting communication channels
We evaluate our approach using popular servers applica-
tions, like Apache and MySQL, that suﬀer from well known
vulnerabilities and show that our CRP protocol does not
introduce prohibitive overheads. The performance overhead
imposed by our approach varies between 4.54% and 71.96%
depending on the application. Note that our approach can
be ported with moderate eﬀort to operate on other platforms
supported by Pin, including Windows and BSD operating
systems, and the x86-64 architecture.
This paper is organized as follows: Section 2 contains some
background information on the tool we use for developing
CRPs, and discusses the limitations of traditional RPs. An
overview of cascading rescue points is given in Sec. 3. We
describe the implementation of a prototype in Sec. 4, and
evaluate its eﬀectiveness and performance in Sec. 5. Related
work is discussed in Sec. 6. We conclude in Sec. 7.
2. BACKGROUND
2.1 Software Self-healing Using Rescue Points
The goal of software self-healing is to allow applications to
operate normally by healing themselves when unanticipated
errors occur. ASSURE [30] was one of the ﬁrst works to
present a practical and automatic approach to software self-
healing. Fig. 1 depicts a high level overview of the concept.
When an error ﬁrst occurs, it is analyzed oﬄine to determine
its location and the appropriate remedy to be applied that
will allow the application to self-heal when it reoccurs.
One of the key ideas of software self-healing is rescue
points (RPs). RPs are essentially routines that contain
380
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:3)(cid:2)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)
(cid:24)(cid:24)(cid:24)(cid:24)
(cid:1)(cid:2)(cid:3)(cid:2)(cid:11)(cid:5)(cid:12)(cid:13)(cid:8)(cid:9)(cid:10)
(cid:24)(cid:24)(cid:24)(cid:24)
(cid:1)(cid:2)(cid:3)(cid:2)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)
(cid:24)(cid:24)(cid:24)(cid:24)
(cid:14)(cid:11)(cid:11)(cid:14)(cid:15)(cid:16)(cid:17)(cid:17)(cid:18)(cid:7)(cid:19)(cid:20)(cid:3)(cid:2)(cid:7)(cid:10)
(cid:24)(cid:24)(cid:24)(cid:24)
(cid:11)(cid:5)(cid:21)(cid:22)(cid:11)(cid:6)(cid:2)(cid:23)(cid:10)
(cid:25)(cid:26)
(cid:25)(cid:27)
(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)