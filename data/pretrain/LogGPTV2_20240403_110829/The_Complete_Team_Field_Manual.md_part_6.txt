kubectl describe pods Describe the pod name
kubectl get rc list all replication containers
kubectl describe rc  Show the replication controller name
kubectl get services List the services
kubectl describe svc  Shows the service name
kubectl delete pod  Deletes the pod
kubectl get nodes -w Watch nodes continuously
4.2 DOCKER
4.2.1 Determine if you are on docker container
4.2.1.1Docker breakout using SYS_MODULE
Look for SYS_MODULE loaded
Get IP address
Create a makefile for 
Make kernel module
Start netcat listener in background
Insert kernel module
4.2.1.2Docker Cheat Sheet
Command Description
docker run -it  bash Run a bash shell inside an image
docker ps -a List all containers
docker stop  Stop a container
docker rm  Remove a stopped container
docker exec -it  bash Execute and access bash inside a container
docker images List the images
docker pull  Pull an image or a repository from the registry
docker build -t  Build the image from dockerfile
5 OSINT
Open source intelligence is possible one of the most crucial steps for a cyber-
attack,
5.1 -
RECONG NG
5.2 H
THE ARVESTER
6 M A
ALWARE NALYSIS
6.1 STATIC ANALYSIS
Static or Code Analysis is usually performed by dissecting the different
resources of the binary file without executing it and studying each
component. The binary file can also be disassembled
6.1.1 Executable Packing
Malware is often packed, or obfuscated to make it difficult to read. PEiD can
often let you know how the executable is packed.
1. Drag and drop executable to the PEiD window
2. The text area boxed in shows the packing of the executable
3. Unpack the executable to perform further analysis
6.1.2 Hash Check
Get a hash of the executable and check hash against known malware.
Linux and MacOS
Windows Powershell
6.1.3 Strings Check
Check for strings inside the executable and look for domains, dlls, function
names
6.1.4 Inspect Portable Executable
Programs such as PEview, Resource Hacker and PEBrowse Professional can
allow for a more in depth look at the executable headers
6.1.5 PE Disassembly
Tools such as IDA pro, Ollydbg, objdump and python with libdisassemble
take machine code and reverse it to a higher level language, this allows you
to understand what the malware will do without having to execute it.
6.2 DYNAMIC ANALYSIS
Dynamic or Behavioral analysis is performed by observing the behavior of
the malware while it is actually running on a host system. This form of
analysis is often performed in a sandbox environment to prevent the malware
from actually infecting production systems; many such sandboxes are virtual
systems that can easily be rolled back to a clean state after the analysis is
complete.
6.2.1 Setup
The first step is going to be setting up an environment to run the malware,
while it is common to use virtual machines, there is still the possibility that
the malware could have a “0” day, virtual machine breakout or awareness
that it is being ran on a virtual machine. If you choose to use virtual machines
setup a private network that does not have external connectivity and only
assign an interface with that network to the virtual machine. It is
recommended to perform a clean install and then install the tools that you
will use from a thumb drive then perform a snapshot.
Alternatively, if you have the ability to dedicate a physical machine to
analysis, ensure you disable wireless and any external networking, to perform
the networked portion you can hardwire the host to the machine hosting
networking tools.
6.2.2 Common Tools Used
Sysinternals process monitor
Procmon is a part of the Sysinternals suite and is a combination of legacy
filemon and regmon, it is used to monitor the Windows filesystem, registry
and process activity real-time. The best way to use this tool is to start is
shortly before executing the malware and observe what processes and files
the malware manipulates.
Wireshark
Wireshark can be used to monitor network traffic, and show what the
malware is attempting to do on the network, for example if it is trying to
reach out to command and control server or is reaching out to pull down a
second stage. This is best started before executing malware and also filtering
out any known network activity.
Capture BAT
CaptureBAT can be used to capture all modified and new files, as well as
capture network traffic and registry changes. Best started directly before
executing malware.
Regshot
Open source tool that takes a snapshot of the registry, used to take a registry
snapshot before executing malware and after running the malware. It can then
compare the snapshots to highlight any changes.
INETsim
INETSim will simulate common services, and can be very useful to see if
malware is trying to reach out to a network service. Execute malware in a
private virtual network with no external access, the only host the malware
should be able to interact with is the one running INETSim.
6.2.2.1Malware Host
Configure the victim/malware host to use INETSim host as dns server and
gateway
INETSim Host Network Configuration (/etc/network/interfaces)
7 A F
TTACK RAMEWORKS
7.1 M
ETASPLOIT
7.2 M
ETERPRETER
Command Description
sysinfo Display system information
ps List and display running processes
kill (PID) Terminate a running process
getuid Display user ID
upload or download Upload / download a file
pwd or lpwd Print working directory (local / remote)
cd or lcd Change directory (local or remote)
cat Display file content
bglist Show background running scripts
bgrun Make a script run in background
Bgkill Terminate a background process
background Move active session to background
edit Edit a file in vi editor
shell Access shell on the target machine
migrate Switch to another process
idletime Display idle time of user
screenshot Take a screenshot
clearev Clear the system logs
? or Help Shoes all the commands
exit / quit: Exit the Meterpreter session
shutdown / reboot Restart system
use Extension load
channel Show active channels
use priv Load the script
getsystem Elevate your privs
getprivs Elevate your privs
portfwd - L  -l
Enable port forwarding
 -
r  -p 
route Pivot through a session by adding a route
add   within msf
route add  Pivot through a session by adding a route
within msf
route add  -d Deleting a route within msf
7.3 P S E
OWER HELL MPIRE
7.3.1 Host Tools
7.3.1.1John the Ripper
To use John, you just need to supply it a password file and the desired
options. If no mode is specified, john will try "single" first, then "wordlist"
and finally "incremental".
7.3.2 Network Tools
7.3.2.1Berkeley Packet Filter (BPF)
BPF
Option Description
[src|dst] host  Matches a host as the IP source, destination, or either
ether [src|dst] host  Matches a host as the Ethernet source, destination, or either
gateway host  Matches packets which used host as a gateway
[src|dst] net / Matches packets to or from an endpoint residing in network
[tcp|udp] [src|dst] port  Matches TCP or UDP packets sent to/from port
[tcp|udp] [src|dst] portrange Matches TCP or UDP packets to/from a port in the given range
-
less  Matches packets less than or equal to length
greater  Matches packets greater than or equal to length
(ether|ip|ip6) proto  Matches an Ethernet, IPv4, or IPv6 protocol
(ether|ip) broadcast Matches Ethernet or IPv4 broadcasts
(ether|ip|ip6) multicast Matches Ethernet, IPv4, or IPv6 multicasts
type (mgt|ctl|data) [subtype Matches 802.11 frames based on type and optional subtype
]
vlan [] Matches 802.1Q frames, optionally with a VLAN ID of vlan
mpls [] Matches MPLS packets, optionally with a label of label
   Matches packets by an arbitrary expression
TCP Flags
tcp-syn, tcp-ack, tcp-fin, tcp-psh, tcp-rst, tcp-urg
Protocols
tcp, udp, icmp, ip, ip6, wlan, arp, ether, link, tr, fddi, ppp, radio, rarp, slip
7.3.2.2Scapy
SCAPY
Option Description
List all available protocols and protocol
ls()
options
lsc() List all available scapy command functions
conf Show/set scapy configuration parameters
sr(pkt, filter=N, iface=N), srp(…) Send packets and receive replies
sr1(pkt, inter=0, loop=0, count=1, iface=N),
Send packets and return only the first reply
srp1(…)
srloop(pkt, timeout=N, count=N), srploop(…) Send packets in a loop and print each reply
send(pkt, inter=0, loop=0, count=1, iface=N) Send one or more packets at layer three
sendp(pkt, inter=0, loop=0, count=1, iface=N) Send one or more packets at layer two
Send packets much faster at layer two using
sendpfast(pkt, pps=N, mbps=N, loop=0, iface=N)
tcpreplay
Record packets off the wire; returns a list of
sniff(count=0, store=1, timeout=N)
packets when stopped
ip=IP() Create an empty IP packet
ip.dst=”X.X.X.X” Set IP packet destination address
ip.src=”X.X.X.X” Set IP packet source address
ip.version=”X” Set IP version for packet
ether=Ether() Create an empty ethernet frame
ether.src=”XX:XX:XX:XX:XX:XX” Set source for frame
ether.dst=”XX:XX:XX:XX:XX:XX” Set destination for frame
ether.type=”0xAAAA” Set ethernet frame type
tcp=TCP() Create an empty TCP
tcp.sport=”XX” Set TCP source port
tcp.dport=”XX” Set TCP destination port
tcp.flags=”XX” Set TCP flag
Add the ethernet frame, ip packet and TCP
stack=ether/ip/tcp/”data”
information with data
7.3.2.3Tcpdump - Common TCPDUMP Options
Option Desciprtion
-A Prints each packet in ASCII
-c  Capture x number of packets
-D List available interfaces
-e print link-level header
-F use file as filter
-G  Rotate pcap file every n seconds
-i Capture interface
-L List data link types for the interface
-n Don’t perform DNS lookup
-p don’t put interface in promiscuous mode
-r  Read from file
-t Don’t print timestamps
-v[v[v]] verbose output
-w [file] write to file
-x print the data in hex minus link level
-xx print the data in hex includes link level
-X print in hex and ascii minus link level
-XX print in hex and ascii including link level
-y specify datalinktype
-Z  run with user privileges
7.3.2.4Zeek
Log Description
dpd.log A summary of protocols encountered on non- standard ports.
dns.log All DNS activity.
ftp.log A log of FTP session-level activity.
Summaries of files transferred over the network. This information is
aggregated from different protocols, including HTTP, FTP, and
files.log
SMTP.
http.log A summary of all HTTP requests with their replies.
known_certs.log SSL certificates seen in use.
smtp.log A summary of SMTP activity.
ssl.log A record of SSL sessions, including certificates being used.
weird.log A log of unexpected protocol-level activity.
conn.log IP, TCP, UDP and ICMP connection details
dhcp.log DHCP lease activity
ssh.log SSH handshakes
irc.log IRC communication details
modbus.log PLC requests (industrial control)
dnp3.log Distributed Network Protocol (industrial control)
radius.log radius authentication details
socks.log SOCKS proxy requests
traceroute.log Hosts running traceroute
tunnel.log Details of encapsulating tunnels
x509.log x509 Certificate Analyzer Output
syslog.log Syslog messages
snmp.log SNMP communication
software.log Software identified by the software framework
7.3.3 Common Zeek/Bro Options
Bro / Zeek
Operator Description
-i  Read from interface
-p  Add prefix to policy
-r  Read from PCAP file
-w  Write to PCAP file
-x  Print contents of state file
-h Display Help
Operator Expressions
! Negate
$, ?$ Dereference
+,-,*,/,% Arithmetic Operators
++, -- Increment, decrement
+=, -=, *=, /= Arithmetic assignment
== Equals
!= Not equals
>, >= greater than, greater or equal
<, <= less than, less or equal
&&, || AND, OR
in, !in membership ( for x in var)
Data Types
addr IP address
bool Boolean
count 64 bit unsigned int
double double precision floating point
conn.log
Field Description
ts Timestamp of first packet
uid Unique identifier of connection
id connection 4-tuple of endpoint addresses
proto transport layer protocol of connection
service application protocol ID sent over connection
duration how long connection lasted
orig_bytes number of payload bytes originator sent
resp_bytes number of payload bytes responder sent
conn_state connection state
local_orig value=T if connection originated locally
local_resp value=T if connection responded locally
missed_bytes number of bytes missing
history connection state history
orig_pkts number of packets originator sent
orig_ip_bytes number of originator IP bytes
resp_pkts number of packets responder sent
resp_ip_bytes number of responder IP bytes
if tunneled connection UID of encapsulating
tunnel_parents
parents
orig_I2_addr link-layer address of originator
resp_I2_addr link-layer address of responder
vlan outer VLAN for connection
inner_vlan inner VLAN for connection
dhcp.log
Field Description
ts Earliest time DHCP message observed
uids Unique identifiers of DHCP connections
client_addr IP address of client
server_addr IP address of server handing out lease
mac clients hardware address
host_name name given by client in Hostname
client_fqdn FQDN given by client in Client FQDN
domain domain given by server
requested_addr IP address requested by client
assigned_addr IP address assigned by server
lease_time IP address lease interval
client_message message with DHCP-Decline
server_message message with DHCP_NAK
msg_types DHCP message types
duration duration of DHCP session
msg_orig address originated from msg_types
client_software software reported by client
server_software software reported by server
circuit_id DHCP relay agents that terminate circuits
agent_remote_id globally unique ID added by relay agents
subscriber_id value independent of physical network connection
dns.log
Field Description
ts earliest timestamp of DNS msg
uid and id underlying connection info
proto transport layer protocol of con
trans_id 16 bit id assigned by program that generated DNS query
rtt round trip time for query and response
query domain name subject of DNS query
qclass QCLASS value specifying query type
qclass_name descriptive name for query class
rcode response code value in DNS response
rcode_name descriptive name of response code value
AA authoritative answer bit
TC truncation bit
RD recursion desired
RA recursion available
Z reserved field
answers set of descriptions in query answer
TTLs caching intervals of RRs in answers field
rejected DNS query was rejected
auth authoritative responses
addl additional responses for query
files.log
Field Description
ts timestamp when file first seen
fuid ID associated with single file
tx_hosts host that sourced data
rx_hosts host that received data