title:LOOP: Logic-Oriented Opaque Predicate Detection in Obfuscated Binary
Code
author:Jiang Ming and
Dongpeng Xu and
Li Wang and
Dinghao Wu
LOOP: Logic-Oriented Opaque Predicate Detection in
Obfuscated Binary Code
Jiang Ming, Dongpeng Xu, Li Wang, and Dinghao Wu
College of Information Sciences and Technology
The Pennsylvania State University
{jum310,dux103,lzw158,dwu}@ist.psu.edu
ABSTRACT
Opaque predicates have been widely used to insert super-
ﬂuous branches for control ﬂow obfuscation. Opaque predi-
cates can be seamlessly applied together with other obfusca-
tion methods such as junk code to turn reverse engineering
attempts into arduous work. Previous eﬀorts in detecting
opaque predicates are far from mature. They are either ad
hoc, designed for a speciﬁc problem, or have a considerably
high error rate. This paper introduces LOOP, a Logic Ori-
ented Opaque Predicate detection tool for obfuscated binary
code. Being diﬀerent from previous work, we do not rely on
any heuristics; instead we construct general logical formu-
las, which represent the intrinsic characteristics of opaque
predicates, by symbolic execution along a trace. We then
solve these formulas with a constraint solver. The result ac-
curately answers whether the predicate under examination
is opaque or not. In addition, LOOP is obfuscation resilient
and able to detect previously unknown opaque predicates.
We have developed a prototype of LOOP and evaluated it
with a range of common utilities and obfuscated malicious
programs. Our experimental results demonstrate the eﬃ-
cacy and generality of LOOP. By integrating LOOP with
code normalization for matching metamorphic malware vari-
ants, we show that LOOP is an appealing complement to
existing malware defenses.
1.
INTRODUCTION
In general, a predicate is a conditional expression that
evaluates to true or false. A predicate is opaque when its
result is known to the obfuscator a priori, but at runtime
it still needs to be evaluated and is diﬃcult to deduce by
an adversary afterwards. Opaque predicates have been ap-
plied extensively in various areas of software security, such as
software protection [14, 15], software watermarking [3, 39],
software diversiﬁcation [19, 29], securing mobile agents [35],
metamorphism malware [9, 10], and obfuscation of Android
applications [28].
Real-world obfuscation tools have already supported em-
bedding opaque predicates into program at link time or bi-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813617.
nary level [16, 26, 34]. As a result, control ﬂow graph is
heavily cluttered with infeasible paths and software com-
plexity increases as well [2]. Unlike other control ﬂow graph
obfuscation schemes such as call stack tampering or con-
trol ﬂow ﬂattening [46], opaque predicates are more covert
as it is hard to distinguish opaque predicates from normal
conditions. Furthermore, opaque predicates can be seam-
lessly woven together with other obfuscation methods, such
as opaque constants [37] and metamorphic mutations [44]
to further subvert reverse engineering eﬀorts. Such an ex-
ample can be found in a recent notorious “0 day” exploit
(CVE-2012-4681), in which opaque predicates are used to-
gether with encrypted code [21]. Therefore, it has become
more diﬃcult to locate the exploit code of interest due to
the use of opaque predicates.
Depending on the construction cost and resilience to de-
obfuscation, we classify previous work on opaque predicates
into three categories. The ﬁrst category is invariant opaque
predicates. Such predicates always evaluate to the same
value for all possible inputs. Invariant predicates are mainly
constructed from well-known algebraic theorems [3, 39]. For
example, predicate (x3 − x ≡ 0 (mod 3)) is opaquely true
for all integers x. Since it is easy to construct invariant
opaque predicates they are commonly used. The second
category, contextual opaque predicates, is built on some pro-
gram invariant under a speciﬁc context. That means only
the obfuscator knows such a predicate is true (false) at a
particular point, but could be false (true) if the context is
not satisﬁed. The third category, dynamic opaque predi-
cates, is the most complicated one. In this category, a set
of correlated and adjacent predicates evaluate to the same
value in any given run, but the value might be diﬀerent in
another run. In any case, the program produces the same
output. To make matters worse, dynamic opaque predicates
can be carefully crafted by utilizing the static intractability
property of pointer aliasing [17].
A number of methods have been proposed to identify
opaque predicates [17, 33, 42, 43, 45]. Unfortunately, none
of them is suﬃcient to meet our requirements: generality,
accuracy, and obfuscation-resilience. They are either heuris-
tics based [17], limited to a speciﬁc type of already known
opaque predicates [42], unable to work on highly obfuscated
binary [45] (e.g, binary packing and virtualization obfusca-
tion), or have a rather high error rate [33]. On the ad-
versary’s side, to defeat the pattern matching of commonly
used opaque predicates, Arboit [3] introduces a construction
method based on quadratic residues, which can be extended
to a larger set of new opaque predicates. Furthermore, all ex-
isting detection approaches only focus on invariant opaque
757predicates. There has been little work on systematically
modeling and solving contextual or dynamic opaque predi-
cates.
To bridge the gap stated above, we introduce a novel logic-
based, general approach to detecting opaque predicates pro-
gressively in obfuscated binary code. We ﬁrst perform sym-
bolic execution on an execution trace to build path condi-
tion formulas, on which we detect invariant opaque predi-
cates (the ﬁrst category) by verifying tautologies with a con-
straint solver. In the next step, we identify an implication
relationship to detect possible contextual opaque predicates
(the second category). Finally, with input generation and
semantics-based binary diﬃng techniques, we further iden-
tify correlated predicates to detect dynamic opaque predi-
cates. Our method is based on formal logic that captures
the intrinsic semantics of opaque predicates. Hence, LOOP
can detect previously unknown opaque predicates. A bene-
ﬁt of LOOP’s trace oriented detection is that it is resilient
to most of the known attacks that impede static analysis,
ranging from indirect jump, pointer alias analysis [8], opaque
constants [37], to function obfuscation [36]. Our results can
be fed back to security analysts to further de-obfuscate the
cluttered control ﬂow graph incurred by opaque predicates.
We have implemented LOOP to automate opaque pred-
icates detection on top of the BAP platform [7] and con-
ducted the evaluation with a set of common utilities and ob-
fuscated malicious programs. The experimental results show
that LOOP is eﬀective and general in detecting opaque pred-
icates with zero false negatives. Several optimizations such
as taint propagation and “short cut” strategy oﬀer enhanced
performance gains. To conﬁrm the merit of our approach, we
also test LOOP in the task of code normalization for meta-
morphic malware [9, 10]. This kind of malware often uses
opaque predicates to mutate the code during propagations
to evade signature-based malware detection. The result in-
dicates that LOOP can greatly speed up control ﬂow graph
matching by a factor of up to 2.0.
In summary, we make the following contributions.
• We study the common limitations of existing work in
detecting opaque predicates and propose LOOP, an
eﬀective and general approach that identiﬁes opaque
predicates in the obfuscated binary code. Our ap-
proach captures the intrinsic semantics of opaque pred-
icates with formal logic, so that LOOP can detect pre-
viously unknown opaque predicates.
• Our method is based on strong principles of program
semantics and logic, and can detect known and un-
known, simple invariant, intermediate contextual, and
advanced dynamic opaque predicates.
• LOOP is developed based on symbolic execution and
theorem proving techniques. Our evaluation shows
that our approach automatically diagnoses opaque pred-
icates in an execution trace with zero false negatives.
• To the best of our knowledge, our approach is the ﬁrst
solution towards solving both contextual and dynamic
opaque predicates.
The rest of the paper is organized as follows. Section 2
presents the background information about three categories
of opaque predicates. Section 3 illustrates our core method
with a motivating example. Section 4 describes each step of
Figure 1: Examples of two invariant opaque predi-
cates for all integers x.
Figure 2: Example of a contextual opaque predicate
for all integers satisfying x > 3.
our approach in detail. Section 5 introduces our implemen-
tation. We evaluate our approach in Section 6. Discussions
and future work are presented in Section 7. Related work is
discussed in Section 8. We conclude the paper in Section 9.
2. BACKGROUND
In this section, we introduce the three types of opaque
predicates we try to solve:
Invariant Opaque Predicates.
An opaque predicate is invariant when its value always
evaluates to true or false for all possible inputs, but only
obfuscator knows the value in advance. Figure 1 shows two
cases of invariant opaque predicates: always true and always
false. The dashed line indicates that the path will never be
executed. Due to the simplicity, this kind of opaque predi-
cates have a large set of candidates. Most of them are de-
rived from well-known algebraic theorems [39] or quadratic
residues [3]. However, the invariant property also becomes
the drawback of this category. For example, we can iden-
tify possible invariant opaque predicates by observing the
branches that never change at run time with fuzzing test-
ing [33].
Contextual Opaque Predicates.
To avoid an opaque predicate always produces the same
value for all inputs, Drape [22] proposes a more covert opaque
predicate that is always true (false) under a speciﬁc pre-
condition, but could be false (true) when precondition does
not hold. We call this kind as contextual opaque predicates,
which can be carefully constructed based on program invari-
ants under a particular context. Figure 2 shows an example
of contextual opaque predicate, in which x2 − 4x + 3 > 0
x3 - x = 0 (mod 3)truefalsetruex2  3truefalse   x2 - 4x + 3 > 0x > 3truefalsetruefalseI1;I2;758Figure 3: Example of a dynamic opaque predicate.
is always true if the precondition x > 3 holds. Note that
the constant value in the precondition can be further obfus-
cated [37] to hide the context relationship.
Dynamic Opaque Predicates.
Palsberg et al. [41] introduce the idea of dynamic opaque
predicates, which are a family of correlated and adjacent
predicates that all present the same value in any given run,
but the value may vary in another run. That means the
values of such opaque predicates switch dynamically. Com-
bined with code clone, dynamic opaque predicates can al-
ways produce the same output. The term “correlated” is
used to describe that dynamic opaque predicates contain
a set of mutually related predicates, and “adjacent” means
these opaque predicates execute one after another strictly.
Figure 3 illustrates an example of dynamic opaque predi-
cates. Two correlated predicates, p and q, meet the require-
ment of evaluating to true (false) in any given run. The
original three instructions {I1; I2; I3;} execute one after an-
other. After transformation, each run either follows the path
p ∧ q (blue path) or ¬p ∧ ¬q (red path). In any case, the
same instructions will be executed. Look carefully at Fig-
ure 3, we can ﬁnd another common feature. Since predi-
cate q divides both blue path and red path into diﬀerent
segments (i.e., {I1;} vs. {I1; I2;} and {I2; I3;} vs. {I3}), p
and q must be strictly adjacent; or else the transformation
is not semantics-persevering. The correlated predicates can
be crafted by utilizing pointer aliasing, which is well known
for its static intractability property [17].
Existing eﬀorts in identifying opaque predicates mainly
focus on invariant opaque predicates and they are unable
to detect more covert opaque predicates such as contextual
and dynamic opaque predicates. A general and accurate
approach to opaque predicate detection is still missing. Our
research aims to ﬁll in this gap.
3. OVERVIEW
3.1 Method
The core of our approach is an opaque predicate detector,
whose overall detection ﬂow is shown in Figure 4. There are
three rounds in our system to detect three kinds of opaque
predicates progressively. Here we present an overview of our
core method.
Figure 5: A motivating example.
Since embedding opaque predicates into a program is a
semantics-preserving transformation, deterministic programs
before and after opaque predicate obfuscation should pro-
duce the same output. Let us assume the program P is
obfuscated by opaque predicates and the resulting program
is denoted as Po. The logic of an execution of Po is expressed
as a formula Ψ, which is the conjunction of all branch con-
ditions executed, including the following opaque predicates.
Ψ = ψ1 ∧ ... ∧ ψi−1 ∧ ψi ∧ ... ∧ ψn
Formula Ψ represents the conditions that an input must sat-
isfy to execute the same path. Supposing constraint ψi is de-
rived from an opaque predicate, we call ψi a culprit branch.
The key to our approach is to locate all culprit branches in
Ψ. Similar to dynamic symbolic execution [25] on binary
code, we ﬁrst characterize the logic of an execution in terms
of symbolic path conditions, by performing a symbolic exe-
cution on the concrete execution trace.
Then our approach carries out three rounds of scanning.
In the ﬁrst round, we diagnose whether ψi is derived from an
invariant opaque predicate by proving whether ψi is always
true; that is, it is a tautology. Note that the false branch
conditions have already been negated in the recorded trace.
After that, we remove identiﬁed culprit branches from Ψ
and continue to detect possible contextual opaque predicates
in the second round. Our key insight is that a contextual
opaque predicate does not enforce any further constraint on
its prior path condition. Based on this observation, diagnos-
ing whether a path constraint ψi (1 ≤ i ≤ n) is a contextual
opaque predicate boils down to answering an implication
query, namely
ψ1 ∧ ... ∧ ψi−1 ⇒ ψi
I1;ptrueI1;I2;falseI2;I3;qtrueI3;falseI1;I2;I3;  1 int opaque(int x)  2 {  3     int *p = &x;  4     int *q = &x;  5     int y = 0;  6     if (x*x  3)  9     {                      // contextual opaque predicate10         if (x*x-4x+3 > 0)11         x = x= 0
ψ2 : x > 3
ψ3 : x ∗ x − 4x + 3 > 0
ψ4 : (∗p)%2 == 0
ψ5 : (∗q)%2 == 0
Ψ : ψ1 ∧ ψ2 ∧ ψ3 ∧ ψ4 ∧ ψ5
We present the three rounds step by step.
1. At the ﬁrst round, we verify whether a predicate sat-
isﬁes invariant property; i.e., it is a tautology. In our
example, we prove that ψ1 (x ∗ x >= 0) is always true
and therefore conclude that ψ1 is an invariant opaque
predicate. After that, we remove ψ1 from path con-
dition Ψ to reduce the formula size and pass the new
path condition to the next round.
2. We start the second round to detect possible contex-
tual opaque predicates by performing implication check
cumulatively from the ﬁrst predicate. We identify two
cases that satisfy the implication check in our exam-
ple: ψ2 ⇒ ψ3 (ψ1 has been removed), i.e., (x > 3) ⇒
(x ∗ x − 4x + 3 > 0) and ψ2 ∧ ψ3 ∧ ψ4 ⇒ ψ5, i.e.,
(x > 3) ∧ (x ∗ x − 4x + 3 > 0) ∧ ((∗p)%2 == 0) ⇒
((∗q)%2 == 0). Note that ψ5 in the second case is
corresponding to the second culprit branch of the dy-
namic opaque predicates.
3. In the third round, we trace back from the culprit
branches identiﬁed in the second step and further ver-
ify whether their prior predicates are correlated or not.
Recall that another property of dynamic opaque predi-
cates is being adjacent. In our example, we ﬁrst negate
each prior predicate as ¬ψ2 and ψ2 ∧ ψ3 ∧¬ψ4 and au-
tomatically generate inputs to satisfy such new path
conditions. Here we generate two new inputs respec-
tively, namely, x = 0 and x = 5. With the new traces,
we perform implication check for ¬ψ2 ⇒ ¬ψ3 and
ψ2 ∧ ψ3 ∧ ¬ψ4 ⇒ ¬ψ5. It is evident that ¬ψ2 ⇒ ¬ψ3
fails under the counterexample of x = 0. At last,
we compare trace segments controlled by ψ4 ∧ ψ5 and
¬ψ4 ∧ ¬ψ5 to make sure they are semantically equiva-
lent. As a result, we conclude that ψ3 is a contextual
opaque predicate and ψ4 and ψ5 consist of dynamic
opaque predicates.
For the presentation purpose, all the examples in this sec-
tion are shown as C code and the predicates are presented as
Figure 6: An execution trace given x=4.
Note that dynamic opaque predicates satisfy such implica-
tion check as well. For example, the combination of path
condition for Figure 3 is either p∧q or ¬p∧¬q. It is straight-
forward to infer the following implication relationship.
(p ⇒ q) ∧ (¬p ⇒ ¬q)
Assume we have detected p ⇒ q in the second round of