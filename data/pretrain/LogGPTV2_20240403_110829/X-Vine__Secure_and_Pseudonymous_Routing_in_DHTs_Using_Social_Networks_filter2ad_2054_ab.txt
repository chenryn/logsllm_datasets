dresses of the next and previous hops along the trail. Using
this information, a node can send a packet to its endpoints,
by handing the packet off to the ﬁrst node along the trail,
which looks up the next hop along the trail using its trail
records, and so on. Furthermore, using a Chord-like rout-
ing algorithm, a node can route to any other node in the
namespace, by (upon reaching an endpoint) selecting the
next overlay hop that maximizes namespace progress to the
destination (without overshooting). As an optimization, in-
stead of waiting until the endpoint is reached to determine
the next overlay hop, intermediate nodes along the path may
“shortcut” by scanning all their trail records, and choosing
the endpoint that maximizes progress in the namespace (see
Algorithm 1 in Appendix B). If the intermediate node dis-
covers an endpoint that makes more namespace progress to
the destination than the current next overlay hop, the inter-
mediate node may choose to forward the packet towards this
new endpoint, to speed its progress (while explicitly main-
taining the next overlay hop in the packet is not strictly nec-
essary for routing, we do so to simplify parts of our design
described later).
State construction and maintenance: Since nodes can
route, we can perform other DHT operations by simply per-
forming routing atop this structure. For example, we can
execute a Chord-like join: upon arriving at the network,
a node can route a join request towards its own identiﬁer,
and the node that receives it can return back the identiﬁers
which should be the joining node’s successors. However,
there are two key changes we need to make. First, when a
node initially arrives, it does not yet have any trail state and
hence cannot forward packets. To address this, the joining
node randomly selects one of its friends in the social net-
work to act as a bootstrap node. The joining node sends its
join request using the bootstrap node as a proxy. Second,
the joining node also needs to build trails to each of its end-
points (e.g., its successors). To do this, for each endpoint,
it sends a trail construction request to the identiﬁer of that
endpoint. As the request is routed, each intermediate node
along the path locally stores a record corresponding to the
trail. Finally, when these steps are completed, the joining
node can route to any node in the network (by forwarding
packets through its endpoints), and it can receive packets
from any node in the network (by accepting packets through
its endpoints). To maintain this state, we need to achieve
two things. First, we would like to correctly maintain the
set of records along each trail in the presence of churn,
so each node can reach the trail endpoint. This is done
in a manner similar to AODV [49]: each node along the
path locally probes its neighbors and removes trail records
(sending teardown messages upstream if necessary) corre-
sponding to failed trails. Second, we would like to make
sure each trail points to the corresponding globally correct
successor/ﬁnger. To do this, we leverage the stabilization
mechanisms from Chord and VRR [14, 59].
3.2 Balancing Routing State
Temporal correlation: while the scheme above is correct,
it performs poorly in practice. The reason for this is due
to temporal correlation—since trails are constructed using
other trails, social network links that are initially chosen to
be part of a trail become increasingly likely to be part of
later trails. Because of this, nodes that join the network
early tend to accumulate more state over time. To illustrate
this problem, we describe an example. Suppose a node X
has d friends a1, a2, .., ad. Suppose also that there is a trail
from X to Y for which the next hop is node ad. Next, sup-
pose node X is an intermediate node in a new overlay path
that is being setup from node a1 (which is also the previous
hop). With probability 2/d, the next hop of the overlay path
will be ad. Similarly, in the future, the probability of ad
being chosen as the next hop in an overlay path increases to
3/(d+1), and then to 4/(d+2), and so on. This example il-
lustrates that a social network link that was initially chosen
as part of a trail has an increasing chance of being chosen in
trails that are set up in the future. Consequently nodes that
join the social network early tend to be part of many trails.
This is not desirable from both a security perspective or a
performance perspective.
Stabilization algorithms: To address the problem of tem-
poral correlation, we propose two modiﬁcations to the core
X-Vine algorithms: The ﬁrst algorithm leverages the social
connections of new users to reduce the path lengths of exist-
ing trails. When a new node joins the system, its social con-
tacts that are already part of the X-Vine system consider all
trails in their routing tables that have a path length greater
than a threshold thr 1 (set to the upper quartile of trail path
path lengths). Corresponding to each such trail, the social
contacts check if modifying the trail via the new node would
reduce the path length, and if so, a teardown message is
sent to the old trail and another trail via the new node is
setup. The threshold on the path length helps to avoid need-
less communication for trails that are already short, and are
thus unlikely to beneﬁt much from new edges in the social
graph topology. The second algorithm helps to load bal-
ance the routing state at nodes, and also leads to a reduction
in the path lengths of trails. This algorithm is run by all
nodes whose routing state is greater than a threshold thr 2.
Such nodes consider all trails in their routing tables whose
path length is greater than a threshold thr 1 (similar to the
previous algorithm), and send messages to the overlay end
points to check if alternate trails can be established, and if
their path length is shorter than the current path length. If
a shorter alternate trail exists, then it replaces the existing
trail. This helps reduce the routing state size at congested
nodes, while simultaneously reducing the trail path lengths.
Figure 3. Example: backtracking.
3.3 Bounding State With Local Policies
We have seen that the shortcut-based routing protocol
described in Section 3.1 faces the problem of temporal
correlation, leading to unbounded growth in routing state.
To complement our stabilization algorithms, we propose a
mechanism by which nodes can set a hard bound on their
routing state size using local routing policies. These poli-
cies can be set to account for heterogeneity across nodes,
users’ desired degree of participation in the network, and to
limit the worst-case state overhead at any particular node.
Our architecture allows users to set two types of policies
pertaining to state maintained at their local node:Bounding
routes per link: If the number of trails traversing an adjacent
social network link reaches a threshold bl, then the user’s
node refuses to set up any more trails traversing that link.
Bounding routes per node: If the number of trails travers-
ing the user’s node reaches a threshold value bn, then the
node refuses to set up any more trails via itself. Due to
these routing policies, it is possible that a request to set up a
trail may be unable to make forward progress in the overlay
namespace. To address this, we introduce a technique called
backtracking that explores alternate social network paths in
case an intermediate node refuses to process a path setup
request. To do this, each node maintains a failed setup list,
containing a list of trails that have failed to set up. When a
node attempts to set up a trail via a next hop, and receives
a rejection message indicating that the next hop is full, the
node inserts an entry into its failed setup list. Each record in
the list contains the identiﬁer of the destination overlay end-
point that the packet was traversing towards, and the iden-
tiﬁer of the next hop in the social network that rejected the
path setup. When forwarding a message to a particular des-
tination endpoint, a node removes from consideration next
hops contained in the failed setup list corresponding to that
endpoint (see Algorithm 2 in Appendix B). The failed setup
list is periodically garbage collected by discarding entries
after a timeout.
For example (Figure 3), suppose node A wishes to estab-
lish a path to E, and determines B is the best next overlay
hop. A places E into the next overlay hop ﬁeld in the mes-
sage, and forwards the message to B. Similarly, B forwards
the message to C. Suppose D is congested (has more than
bn paths traversing it). In this case, C sends the path setup
message to D, but D responds back with a rejection mes-
sage. C then stores the entry (E, D) in its failed setup list,
to indicate that establishing a path via D to reach E was un-
successful. C then attempts to select an alternate next hop
that makes progress in the namespace (either a route to the
current next overlay hop, or a “shortcut” route that makes
more progress than the current next overlay hop). If C does
not have such a route, it sends a rejection message back to
B, which inserts the entry (E, C) in its failed setup list.
This process repeats until a path is discovered, or a time-to-
live (TTL) contained in the packet is exceeded. When the
TTL is exceeded, the path setup fails, and the source node
must attempt to rejoin to establish the path.
4 Securing X-Vine
The previous section described our approach to perform
routing atop the social network.
In this section, we de-
scribe how to extend and tune the design in the previous
section to improve its resilience to attack. We start by pro-
viding an overview of attacks on our design(Section 4.1),
and then propose extensions to improve resilience to them
(Section 4.2).
4.1 Attacks on the Routing Protocol
We investigate defenses to the following attacks on
DHTs:
Sybil attack [22]: The attacker can insert a large number
of Sybil identities in the DHT, and set up paths with their
successors and predecessors. The attack results in honest
nodes’ routing tables being populated by malicious Sybil
identities. This increases the probability that lookup queries
will traverse some malicious nodes, which can then drop
or misroute the lookup queries. Observe that to minimize
resources, it sufﬁces for Sybil identities to maintain paths
with only nodes in the predecessor list, since paths to the
nodes in the successor list will result in a shortcut to the
honest successor nodes.
Attacks on routing table maintenance: In addition to
the Sybil attack, the adversary could also manipulate the
routing table maintenance protocols to increase the prob-
ability of malicious nodes being present in honest nodes’
routing tables. Intercepting trails: During churn, malicious
nodes can become part of a large number of trail paths be-
tween nodes, in order to attract lookup trafﬁc (for example,
by refusing to send trail teardown messages). Attacking trail
construction: The attacker could prevent honest nodes from
ﬁnding a trail path to their correct successor. This could be
done by dropping or misrouting the trail setup messages.
Attacks on message integrity: Malicious nodes that forward
control trafﬁc could modify the content of the messages, to
disrupt trail setup (for example, by creating routing loops).
Forgery attacks: The malicious nodes could spoof source
identiﬁers in messages sent to honest nodes (for example,
to give the appearance that the message came from the hon-
est node’s friends).
Attacks on lookups: Once the attacker is able to inter-
cept a lookup query, it can either drop the packet or misroute
it. Such attacks can prevent the honest nodes from either
discovering their correct successor in the ring, or discover-
ing a malicious successor list set respectively. By adver-
tising malicious nodes as the successors of an honest join-
ing node, a signiﬁcant fraction of the honest joining node’s
trafﬁc would traverse malicious nodes. Note that attacks on
both overlay construction and overlay routing are captured
by this attack, since in a DHT, both bootstrap and routing
are accomplished by the same operation: a lookup.
4.2 Proposed Defenses
We note that it is imperative to secure both the routing
table maintenance and lookup forwarding. If the routing ta-
ble maintenance protocol were insecure, then the adversary
could manipulate the routing table entries of honest nodes
to point to malicious nodes, and routing to honest nodes
would not be successful. However, even if the routing table
maintenance mechanisms are secure, the adversary still has
the opportunity to drop lookup packets or misroute them.
Mitigating the Sybil attack: To limit the impact of the
Sybil attack, we propose that nodes implement a routing
policy that bounds the number of trails that traverse a social
network edge. We denote the bound parameter as bl. Since
the attacker has limited attack edges, this bounds the num-
ber of overlay paths between the honest subgraph and the
Sybil subgraph regardless of the attacker strategy. Thus, we
limit the number of Sybil identities that are part of the hon-
est node’s routing table. The key challenge in this approach
is to determine the bound bl that enables most honest nodes
to set up trails with each other while hindering the ability of
Sybil nodes to join the DHT. Our analytic and experimental
results suggest that a bound of bl ∈ Θ(log n) works quite
well. Similar to Yu et al. [68], we assume that the bound bl
is a system wide constant known to all honest nodes. Honest
nodes are able to set up trails with each other even though
there is a bound on the number of trails per social network
link because of the fast-mixing nature of the social network.
On the other hand, a Sybil attack gives rise to a sparse cut
in the social network topology, and we use this sparse cut
to limit the impact of the Sybil identities. The number of
overlay paths between the honest and Sybil subgraphs is
bounded to g · bl. The adversary could choose to allocate
each overlay path to a different Sybil identity, resulting in
g · bl Sybil identities in the DHT (in the routing tables of
honest nodes). We can further limit the number of Sybil
identities in the routing tables of honest nodes by ensuring
that the adversary must allocate at least a threshold t num-
ber of overlay paths per Sybil identity. This would bound
the number of Sybil identities in honest nodes routing tables
to g · bl/t. Note that the number of overlay paths between
the honest and Sybil regions does not change. We propose
the following mechanism to ensure that the adversary sets
up trails with at least a threshold t overlay neighbors. Nodes
periodically probe their overlay neighbors to check if each
successor in their routing table has set up a trail with at least
t other nodes in the overlay neighborhood. Note that the
check is performed by directly querying the overlay neigh-
bors. The threshold t is set to t < 2 · num successors
to account for malicious overlay nodes returning incorrect
replies. If the adversary does not allocate t trails per Sybil
identity (set up with its successors and predecessors), the
honest nodes can detect this via probing and can teardown
the trails to the malicious Sybil identity. Note that the ad-
versary cannot game the probing mechanism unless it has
a large number of Sybil identities in the overlay neighbor-
hood of a node. Since the Sybil identities are distributed at
random in the overlay namespace, this is unlikely to hap-
pen unless the adversary has a large number of attack edges
(g ∈ Ω(n/(log n))).
Securing routing table maintenance: We provide the
following defenses to attacks on routing table maintenance:
Trail interception attacks: Observe that our mechanism
to defend against Sybil attacks, i.e., bounding the number
of trails that traverse a social network link, also defends
against malicious nodes that attempt to be a part of a large
number of trails. Speciﬁcally, the adversary has a quota of
g·bl trails between honest nodes and itself, and it can choose
to utilize this quota either by inserting Sybil identities in the
DHT or by being part of trails between two honest nodes.
Either way, the effect of this attack is limited by the bound
bl.
Trail construction attacks: Suppose that a node X is try-
ing to set up a trail with its overlay neighbor Y. To circum-
vent the scenario where a malicious intermediate node M
simply drops X’s path set up request to Y, we propose that
upon path setup the end point Y sends an acknowledgment
along the reverse path back to X. If after a timeout, the node
X does not receive an acknowledgment from Y, then it can
retry sending the trail set up request over a different route.
Again, the fast-mixing nature of the social network topol-
ogy guarantees that two nodes are very likely to have mul-
tiple paths between each other.
Message integrity and forgery attacks: To provide mes-
sage integrity is the use of self-certifying identiﬁers [8, 15,
38]. Nodes can append their public keys to the message and
produce a digital signature of the message along with the
appended public key. The self-certifying nature of identi-
ﬁers ensures that the public key for a speciﬁed node identi-
ﬁer cannot be forged; this enables us to provide both mes-
sage integrity as well as authentication.
Securing the lookup protocol: Even if the routing ta-
ble maintenance protocol is secure, the adversary can still
drop or misroute lookup requests that traverse itself. We se-
cure the lookup protocol using redundant routing, similar to
Castro et al. [16]. Instead of a single lookup, a node can
choose to perform r lookups for the destination (where r is
the redundancy parameter) using r diverse trusted links in
the social network topology. Redundant routing increases
the probability that at least one lookup will traverse only
honest nodes and ﬁnd the correct successor. If the lookup is
performed during route table maintenance, the correct suc-
cessor can be identiﬁed since it will be impossible to set up
a trail to an incorrect one; if the lookup is searching for a
particular node or data item, then self-certifying techniques
can be used to identify incorrect responses.
4.3 Privacy Protection
All communication in X-Vine happens over social net-
work links; while a user’s IP address is revealed to his/her
social contacts, it is not exposed to random peers in the
network. Therefore as long as a user’s social contacts are
trusted, he/she can communicate pseudonymously. More-
over, observe that X-Vine’s mechanisms do not require a
user to expose his/her social contacts. This is in sharp con-
trast to prior work [34], wherein this information is revealed
as part of protocol operations to everyone in the network.
Note that in the absence of a mapping from a DHT ID to an
IP address, the adversary cannot perform trafﬁc analysis to
infer social contacts. The only source of information leak-
age is when the adversary can map DHT IDs of two users to
their respective IP addresses (for example, by virtue of be-
ing their trusted contacts); in this case the adversary can per-
form trafﬁc analysis attacks to infer whether the two users
have a trust relationship or not. In X-Vine, the privacy risk is
with respect to social contacts, rather than random peers in
the network. Note that in this paper, we are only concerned
with overlay level adversaries; adversaries which operate at
the ISP level, or have external sources of information [47]
are outside the scope of our threat model.
5 Experiments and Analysis
We evaluate X-Vine with theoretical analysis, experi-
ments using real-world social network topologies, and a
prototype implementation. We measure routing state size,
lookup path lengths, security against Sybil attacks, re-
silience against churn, and lookup latency. We also devel-
oped a Facebook application to facilitate the use of our de-
sign.
Simulation environment: We constructed an in-house
event-driven simulator. As done in [14], we bootstrap X-
Vine by selecting a random node in the social network as
the ﬁrst node, and the social network neighbors of that node
then become candidates to join the X-Vine network. Next,
one of these neighbors is selected to join, with a probability
proportional to the number of trust relationships it has with
nodes that are already a part of the X-Vine network. This
process is then repeated. Note that some nodes may not be
successful in joining because of the bound on number of
trails per link (as discussed in detail later).
Data sets: Recent work has proposed the use of interac-
tion graphs [62, 66] as a better indicator of real world trust