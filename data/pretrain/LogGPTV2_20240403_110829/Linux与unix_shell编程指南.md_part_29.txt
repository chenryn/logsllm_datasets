本章内容有：
• shift。
• getopts。
• shift和g e t o p t s例子。
简单地说，下述脚本框架控制参数开始与停止。脚本需要两个参数，如果没有输入两个
参数，那么产生一个u s a g e语句。注意这里使用c a s e语句处理输入脚本的不同参数。
执行脚本，输入以下参数，结果为：
任何U N I X或L I N U X命令均接受一般格式：
命令 选项 文件
加入java编程群：524621833
225
第20章 向脚本传递参数
下载
选项部分最多可包含1 2个不同的值。上述脚本中，如果必须控制不同的命令选项，就要
加入大量脚本。这里只控制两个选项：开始和停止。
幸运的是s h e l l提供s h i f t命令以帮助偏移选项，使用s h i f t可以去除只使用$ 1到$ 9传递参数的
限制。
20.1 shift命令
向脚本传递参数时，有时需要将每一个参数偏移以处理选项，这就是 s h i f t命令的功能。
它每次将参数位置向左偏移一位，下面用一段简单脚本详述其功能。脚本使用 w h i l e循环反馈
所有传递到脚本的参数。
你可能想像，上述脚本一直执行，直到命令行中不再有更多的参数输入。错了，因为没
有办法偏移到脚本中下一个参数，将只会反馈出第一个参数。执行结果如下：
20.1.1 shift命令简单用法
使用s h i f t命令来处理传递到脚本的每一个参数。改动后脚本如下：
现在再执行，结果将会不同：
20.1.2 命令行输入的最后一个参数
虽然还没有讲e v a l命令，如果需要知道命令行中输入的最后一个参数（通常是一个文件名），
可以有两种选择：使用命令eval echo \$$#；使用s h i f t命令：shift 'expr $# -2'。
加入java编程群：524621833
226
第四部分 基础s h e l l编程
下载
20.1.3 使用shift处理文件转换
s h i f t可使控制命令行选项更加容易。下面构造一个转换脚本，使用 t r将文件名转换为大写
或小写。
脚本选项为：
-l 用于小写转换。
-u 用于大写转换。
使用s h i f t命令将脚本放在一起以控制- l和- u选项。脚本的第一版本如下：
首先检查脚本是否有参数，如果没有，打印 u s a g e语句，如果有需要处理的参数，使用
c a s e语句捕获每一个传送过来的选项。当处理完此选项后，使用 s h i f t命令搜集命令行中下一选
项，如果未发现匹配选项，打印u s a g e语句。
当向脚本传递两个无效参数时，输出如下：
下一步就是要用c a s e语句处理选项后传递过来的文件名。为此需改动 c a s e语句。c a s e语句
中捕获任意模式*应该为- *以允许传递无效选项，例如- p或- q。
加入java编程群：524621833
227
第20章 向脚本传递参数
下载
*模式也匹配传递过来的所有文件名，以便用 f o r循环处理每一个文件，这里也将使用 - f选
项检测文件是否存在。
改动后的c a s e语句如下：
还需要指定与选项（- l，- u）相关的变量设置。这些变量是：
T R C A S E 保存转换类型（大写或小写）。
E X T 所有文件转换后，大写文件名为. U C，小写为. L C，不保存初始文件状态。
O P T 如果给出此选项，设其为y e s，否则为n o。如果没有给出此选项，捕获此信息并反
馈出来。
其他部分脚本用于实际转换处理，这里即 t r命令。t r命令放在c a s e语句f o r循环中读取文件
名进行处理的脚本末尾部分。
以下为完整脚本：
加入java编程群：524621833
228
第四部分 基础s h e l l编程
下载
加入java编程群：524621833
229
第20章 向脚本传递参数
下载
执行上述脚本，给出不同选项，得结果如下：
转换一个不存在的文件：
传递不正确选项：
只键入文件名，希望脚本提示更多帮助信息：
输入两个有效文件及第三个无效文件：
使用上述脚本可以将许多文件转换为同样的格式。编写一段脚本，使其控制不同的命令
行选项，这种方式编程量很大，是一件令人头疼的事。
假定要写一段脚本，要求控制以下各种不同的命令行选项：
命令-l -c 23 -文v件1文件2
s h i f t命令显得力不从心，这就需要用到g e t o p t s命令。
20.2 getopts
g e t o p t s可以编写脚本，使控制多个命令行参数更加容易。 g e t o p t s用于形成命令行处理标
准形式。原则上讲，脚本应具有确认带有多个选项的命令文件标准格式的能力。
20.2.1 getopts脚本实例
通过例子可以更好地理解g e t o p t s。以下g e t o p t s脚本接受下列选项或参数。
• a 设置变量A L L为t r u e。
• h 设置变量H E L P为t r u e。
加入java编程群：524621833
230
第四部分 基础s h e l l编程
下载
• f 设置变量F I L E为t r u e。
• v 设置变量V E R B O S E为t r u e。
对于所有变量设置，一般总假定其初始状态为f a l s e：
g e t o p t s一般格式为：
getopts option_string variable
在上述例子中使用脚本：
while getopts ahfgv OPTION
可以看出w h i l e循环用于读取命令行，o p t i o n _ s t r i n g为指定的5个选项（- a，- h，- f，- g，- v），
脚本中v a r i a b l e为O P T I O N。注意这里并没有用连字符指定每一单个选项。
运行上述脚本，给出几个有效和无效的选项，结果为：
可以看出不同选项的结合方式。
加入java编程群：524621833
231
第20章 向脚本传递参数
下载
20.2.2 getopts使用方式
g e t o p t s读取o p t i o n _ s t r i n g，获知脚本中使用了有效选项。
g e t o p t s查看所有以连字符开头的参数，将其视为选项，如果输入选项，将把这与
o p t i o n _ s t r i n g对比，如果匹配发现，变量设置为 O P T I O N，如果未发现匹配字符，变量能够设
置为？。重复此处理过程直到选项输入完毕。
g e t o p t s接收完所有参数后，返回非零状态，意即参数传递成功，变量 O P T I O N保存最后处
理参数，一会儿就可以看出处理过程中这样做的好处。
20.2.3 使用getopts指定变量取值
有时有必要在脚本中指定命令行选项取值。 g e t o p t s为此提供了一种方式，即在
o p t i o n _ s t r i n g中将一个冒号放在选项后。例如：
getopts ahfvc: OPTION
上面一行脚本指出，选项a、h、f、v可以不加实际值进行传递，而选项 c必须取值。使用
选项取值时，必须使用变量 O P TA R G保存该值。如果试图不取值传递此选项，会返回一个错
误信息。错误信息提示并不明确，因此可以用自己的反馈信息屏蔽它，方法如下：
将冒号放在o p t i o n _ s t r i n g开始部分。
while getopts :ahfgvc: OPTION
在c a s e语句里使用？创建一可用语句捕获错误。
改动后g e t o p t s脚本如下：
加入java编程群：524621833
232
第四部分 基础s h e l l编程
下载
运行上述脚本，选项- c不赋值，将返回错误，但显示的是脚本语句中的反馈信息：
现在，输入所有合法选项：
20.2.4 访问取值方式
g e t o p t s的一种功能是运行后台脚本。这样可以使用户加入选项，指定不同的磁带设备以
备份数据。使用g e t o p t s实现此任务的基本框架如下：
加入java编程群：524621833
233
第20章 向脚本传递参数
下载
上述脚本中如果指定选项d，则需为其赋值。该值为磁带设备路径。用户也可以指定是否
备份输出到登录文件中的内容。运行上述脚本，指定下列输入：
g e t o p t s检查完之后，变量O P TA R G取值可用来进行任何正常的处理过程。当然，如果输
入选项，怎样进行进一步处理及使该选项有有效值，完全取决于用户。
以上是使用g e t o p t s对命令行参数处理的基本框架。
实际处理文件时，使用f o r循环，就像在t r- c a s e脚本中使用s h i f t命令过滤所有选项一样。
使用g e t o p t s与使用s h i f t方法比较起来，会减少大量的编程工作。
20.2.5 使用getopts处理文件转换
现在用所学知识将t r- c a s e脚本转换为g e t o p t s版本。命令行选项g e t o p t s方法与s h i f t方法的唯
一区别是一个V E R B O S E选项。
变量V E R B O S E缺省取值为n o，但选择了命令行选项后，c a s e语句将捕获它，并将其设为
y e s，反馈的命令是一个简单的i f语句。
如果正在使用其他系统命令包，它总是反馈用户动作，只需简单地将包含错误的输出重
定向到/ d e v / n u l l中即可。如：
命令 >/dev/null 2 >&1
缺省时V E R B O S E关闭（即不显示），使用- v选项可将其打开。例如要用 V E R B O S E将
m y f i l e文件系列转换为小写，方法如下：
tr-case -l -v myfile1 myfile2 ...
或者
tr-case -v -l myfile1 myfile2 ...
可能首先注意的是使用g e t o p t s后脚本的缩减效果。这里用于文件处理的脚本与 s h i f t版本
相同。
脚本如下：
加入java编程群：524621833
234
第四部分 基础s h e l l编程
下载
在脚本中指定命令行选项时，最好使其命名规则与 U N I X或L I N U X一致。下面是一些选项
及其含义的列表。
加入java编程群：524621833
235
第20章 向脚本传递参数
下载
选 项 含 义
- a 扩展
- c 计数、拷贝
- d 目录、设备
- e 执行
- f 文件名、强制
- h 帮助
- i 忽略状态
- l 注册文件
- o 完整输出
- q 退出
- p 路径
-v 显示方式或版本
20.3 小结
正确控制命令行选项会使脚本更加专业化，对于用户来说会使之看起来像一个系统命令。
本章讲到了控制命令行选项的两种方法， s h i f t和g e t o p t s。使用g e t o p t s检测脚本的数量远远小
于使用s h i f t方法检测脚本的数量。
s h i f t也克服了脚本参数$ 1 . . $ 9的限制。使用s h i f t命令，脚本可以很容易偏移至所有调用参