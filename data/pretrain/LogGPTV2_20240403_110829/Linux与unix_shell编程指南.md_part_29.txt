### 第20章 向脚本传递参数

#### 本章内容
- `shift` 命令
- `getopts` 命令
- `shift` 和 `getopts` 的示例

### 20.1 shift 命令
在向脚本传递参数时，有时需要将每个参数偏移以处理选项。`shift` 命令可以实现这一功能，它每次将参数位置向左偏移一位。

#### 20.1.1 `shift` 命令的基本用法
以下是一个简单的脚本，使用 `while` 循环来反馈所有传递到脚本的参数：
```bash
#!/bin/bash
while [ -n "$1" ]; do
    echo "Argument: $1"
    shift
done
```
执行该脚本并传递多个参数时，结果将会显示所有参数。

#### 20.1.2 处理命令行输入的最后一个参数
如果需要知道命令行中输入的最后一个参数（通常是一个文件名），可以使用 `eval echo \$$#` 或 `shift 'expr $# - 2'` 来获取。

#### 20.1.3 使用 `shift` 处理文件转换
下面是一个使用 `tr` 将文件名转换为大写或小写的脚本示例：
```bash
#!/bin/bash
if [ $# -eq 0 ]; then
    echo "Usage: $0 [-l|-u] file..."
    exit 1
fi

while [ -n "$1" ]; do
    case "$1" in
        -l) TR_CASE="[:upper:]" ;;
        -u) TR_CASE="[:lower:]" ;;
        *) break ;;
    esac
    shift
done

for file in "$@"; do
    if [ -f "$file" ]; then
        tr "$TR_CASE" '[a-z]' < "$file" > "${file}.lc"
    else
        echo "File not found: $file"
    fi
done
```

### 20.2 getopts 命令
`getopts` 可以简化脚本中对多个命令行参数的处理。它的基本格式是：
```bash
getopts option_string variable
```

#### 20.2.1 `getopts` 脚本实例
以下是一个使用 `getopts` 的脚本示例，接受以下选项：
- `-a` 设置变量 `ALL` 为 `true`
- `-h` 设置变量 `HELP` 为 `true`
- `-f` 设置变量 `FILE` 为 `true`
- `-v` 设置变量 `VERBOSE` 为 `true`

```bash
#!/bin/bash
ALL=false
HELP=false
FILE=false
VERBOSE=false

while getopts "ahfv" OPTION; do
    case $OPTION in
        a) ALL=true ;;
        h) HELP=true ;;
        f) FILE=true ;;
        v) VERBOSE=true ;;
        ?) echo "Usage: $0 [-a] [-h] [-f] [-v]"; exit 1 ;;
    esac
done

echo "ALL: $ALL, HELP: $HELP, FILE: $FILE, VERBOSE: $VERBOSE"
```

#### 20.2.2 `getopts` 的使用方式
`getopts` 读取 `option_string`，并将匹配的选项设置为指定的变量。如果未发现匹配字符，变量会被设置为 `?`。

#### 20.2.3 使用 `getopts` 指定变量取值
有时需要在脚本中指定命令行选项的取值。可以在 `option_string` 中将冒号放在选项后，例如：
```bash
while getopts "ahfgvc:" OPTION; do
    case $OPTION in
        a) ALL=true ;;
        h) HELP=true ;;
        f) FILE=true ;;
        v) VERBOSE=true ;;
        c) C_VALUE=$OPTARG ;;
        :) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
        ?) echo "Usage: $0 [-a] [-h] [-f] [-v] [-c value]"; exit 1 ;;
    esac
done
```

#### 20.2.4 访问取值方式
`getopts` 可以运行后台脚本，并允许用户加入选项并指定不同的磁带设备以备份数据。以下是基本框架：
```bash
#!/bin/bash
DEVICE=""
LOG=false

while getopts "d:l" OPTION; do
    case $OPTION in
        d) DEVICE=$OPTARG ;;
        l) LOG=true ;;
        :) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
        ?) echo "Usage: $0 [-d device] [-l]"; exit 1 ;;
    esac
done

echo "Device: $DEVICE, Log: $LOG"
```

### 20.3 小结
正确控制命令行选项可以使脚本更加专业化，对于用户来说也更易于使用。本章介绍了两种控制命令行选项的方法：`shift` 和 `getopts`。使用 `getopts` 可以减少脚本的复杂性，并且能够更好地处理多个选项和参数。