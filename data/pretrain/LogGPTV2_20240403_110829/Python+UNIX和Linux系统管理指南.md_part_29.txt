---
## Page 213
sync()
ret = call(cmd, shell=True)
def sync():
source = "/tmp/sync_dir_A/" #Note the trailing slash
#!/usr/bin/env python
import sys
from subprocess import call
#wraps uprsync to synchronizetwodirectories
例6-13：rsync的简单包装
简单的示例，演示了如何对rsync进行包装（wrap）。
灵活性和可定制的工具，正所谓想象力有多远，就可以走多远。例6-13显示了一个非常
glue代码使用能够让UNIX工具能够完成通常情况下难以完成的工作，你可以创建各种高
你可以使用Python为同步添加一定的智能，或是根据需要进行自定义。将Python作为
不希望去手工监视复制的进程，这也就是Python真正发挥作用的时候。
在计划的时间内被复制。在需要对文件服务器之间进行数TB的数据同步的情况下，我们
正如前面提到的，Python可以帮助控制或粘贴rsync的方法。有一个问题是如何确保数据
读rsync的帮助和选项，因为rsync可能会是为系统管理员编写的最有用的命令行工具。
多年来，我们都使用rsync作为把数据从点A移动到点B的主要工具。我们建议你仔细阅
2007年下半年，rsync version 3测试版发布，它包括了比原始版本更多的类型选项。
你可能已经知道，rsync是一个最初由AndrewTridgel1和Mackerra编写的命令行工具。
包装rsync
早期的代码就是这样进行操作的。
然，除非你是公司的老板，否则我们不会建议你真的这么去做。而实际上，在BOFH,
到了星期四，则会进行删除，并给文件的所有者发送一个已删除的MP3文件列表。
命名为文本文件，每周二将它们压缩为ZIP文件，每周三，则将它们移动到/tmp目录中，
每晚创建一个cron作业，查找所有的MP3文件并对它们做一些操作。每周一，将它们重
个用户所使用的文件空间大小指定一个配额，但是这会引来更多麻烦。
·print "rsync failed"
sys.exit(1)
www.TopSage.com
，一个解决方案是
数据
[199
当
ODG
---
## Page 214
200
者说是关于数据的数据，通常比数据本身更为重要。这里给出一个示例，在电影和电视
绝大多数系统管理员所关注的不仅局限于数据，还包括与数据相关的数据。元数据，或
元数据：关于数据的数据
设置下次尝试的时间间隔，连接次数，以及检测所连接主机的磁盘空间使用情况等。
工具可以使一些需要人工完成的事情自动化。此外，你还可以添加一些其他特性，包括
这个示例十分简单，并且包含了部分硬编码数据，但是这是一个非常有用工具，使用该
def sync():
cmd = “%s %s %s %s" % (rsync, arguments, source, target)
例6-14：一个直至工作完成才结束的rsync命令
之任务已完成。例6-14中的 rsync代码实现了这一功能。
sync()
whileTrue:
import sys
完成所有需要做的工作：它会一直对目录进行同步，直到完成，然后会发送一个邮件告
一个高度机动的rsync命令又会如何去做呢？如果你正在监视两个目录之间的同步，它能
的rsync命令。
也需要在第二天重新开始。这种情况下，可以使用Python创建一个更先进的、高度机动
arguments
import time
程在执行过程中被破坏、数据也被破坏、整晚时间都被浪费，后果不堪设想，处理过程
进行同步，但不想整晚都去监视数据同步过程。然而，如果没有监视同步过程，一旦进
以做一些更有趣的事，解决自己会频繁遇到的问题。我们经常需要对两个非常大的目录
这个示例是一个对两个目录进行同步的代码，如果命令执行失败，将打印失败信息。可
sys.exit(o)
subprocess.call("mail -s 'jobs done' PI:EMAIL", shell=True)
else:
if ret !=0:
time.sleep(30)
第6章
1
www.TopSage.com
---
## Page 215
mapper(Filesystem,filesystem_table)
class Filesystem(object):
metadata.create_all(engine)
filesystem_table = Table('filesystem', metadata,
#1/usr/bin/env python
例6-15：利用SQLAlchemy创建文件系统的元数据
ORM和前面介绍的目录遍历技术结合，展示了一个基本的元数据系统。
个文件组成的大文件系统是非常耗时的，因此实时搜索非常有意义。例6-15中通过将
在上面的示例中，我们体验了实时搜索文件系统，执行操作和查询路径。搜索由几百万
于创建自定义的元数据解决方案是一个非常棒的组合。
SQLAlchemy的文档非常好，并且SQLAlchemy可以与SQLite一起使用。我们认为，这对
#Part 4:mapper function
#Part 3: mapped class
metadata = MetaData()
engine =
#Part 1:create engine
from sqlalchemy.orm import mapper,sessionmaker
现在看一个使用ORM，SQLAlchemy创建的关于文件系统的元数据。幸运的是，
#Part 2:metadata
import os
写元数据都非常简单。
说，都是十分关键的。Python可以在这方面有所作为，因为，在Python中使用元数据和
描述文件是如何组织和使用的数据，对于应用程序、动画生产线或是恢复一个备份来
经常涉及创建元数据类型管理系统。
中，相同的数据经常出现在文件系统的多个位置或者是多个文件系统上。跟踪这些数据
def
def
#path
Column('path', String(50o),
rom sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey
self.file=file
create_engine('sqlite://:memory:', echo=False)
= path
www.TopSage.com
数据丨201
PDG
---
## Page 216
#Part 7: commit to the database
for dirpath, dirnames, filenames in os.walk(path):
session = Session()
Session = sessionmaker(bind=engine, autoflush=True, transactional=True)
分，定义了一个元数据实例，并且创建了数据库表。在第三部分，创建了一个类，该类
#Part 8: query
#Part 5: create session
这一示例创建自定义SQLAchemy元数据解决方案，对你的公司和客户而言都是非常好
最后，在第八部分，在Python中执行了一个查询，返回了在数据库中放置的记录结果。
录。之后在第七部分，提交这一处理到SQLite数据库中。
录树时，获得文件名和完整路径。尽管这里会有一些改动。注意，这里在数据库中为每
现在已经非常明确地描述了ORM的安装，在第六部分，完成常规操作，在遍历一个目
里设置了一些关键字参数，包括autoflush和transactional。
上已经将类映射到数据表上了。在第五部分，创建到数据库的会话。需要注意的是，这
会映射到所创建的数据库中的数据表。在第四部分，调用放人ORM的映射函数，它实际
一部分，创建了一个引擎，这是定义将要使用的数据库的非常不错的方法。在第二部
可以将代码视为过程的集合，一段代码可以看作由一个过程接着另一个过程组成。在第
for record in session.query(Filesystem):
session.commit()
我们来看一个重要的归档包：tar，并且一起了解标准库是如何实现tar的。
都提供内建支持。如果压缩和归档是你的目标，那么Python为此提供了丰富的工具。让
不管你信不信，“连电池都包括在内”的Python标准库对TAR文件、zlib文件和gzip文件
bzip、bzip2、hdiutil、asr以及其他工具来完成这些工作。
处理大量数据是系统管理员每天都要面对的问题。他们通常会使用tar、dd，gzip、
存档、
的方法。也可以扩展这一代码来做一些更有趣的事，如执行相关查询或将结果写人文件
一个完整路径和每一个文件创建了一个记录，并且在创建时，保存了每一个新创建的记
202
for file in filenames:
第6章
session.save(record)
、压缩、映像和恢复
Number:%s,
www.TopSage.com
Path: %s ,File: %s "\
Y
PDG
---
## Page 217
In [3]: tar.add("largeFile.txt")
In [2]: tar = tarfile.open("largefile.tar", “w")
In [1]: import tarfile
例6-17：对文件内容使用TAR命令
好了，现在有了一个大文件，让我们对其使用TAR命令。参见例6-17。
In [1]: f = open("largeFile.txt", "w")
例6-16：创建大文本文件
tar命令本身。
建了一个非常大的文件。这里用到的语法对使用者非常友好，在这一点上甚至超过了
In [29]: import os
In [28]: tar = tarfile.open("temp.tar", "w")
In [5]: 11
In [4]: tar.close()
In[4]:ls-1
创建一个TAR归档包非常简单，
In [27]: import tarfile
现方法是遍历目录树然后将每一个文件添加到/tmp目录的归档包中。参见例6-18。
意义。使用本章中多次用到的目录遍历模式，我们对/tmp目录创建了一个TAR文件，实
由于使用Python来创建TAR文件非常方便，因此仅对一个文件使用TAR，几乎没有什么
用IPython shell来完成每天全部的系统管理工作成为可能。
使用tarfile模块创建TAR归档
例6-18：对目录树使用TAR命令
可以看到，
rw-r--1--1 root root 1236992 0ct 25 23:15 largeFile.txt
rw-r--I--1 root root 1236992 0ct 25 23:13 largeFile.txt
"-I--I-MI
1：
，与普通的tar命令相比，vanilla TAR归档有更为简单的语法。这确实也令使
-1 root root 1236992 0ct 26 00:39 largefile.tar
f.write("%s\n"% statement)
，甚至显得过于简单了。在例6-16中，作为示例，我们创
www.TopSage.com
数据|203
PDG
---
## Page 218
204.1
gzip的语法略有不同。参见例6-20。
让我们总结一下，然后使用其他可用的选项进行另一次压缩归档。接下来使用gzip。
的，因为即使在双核AMD系统上，它也会花几分钟时间才能完成文件压缩。
bzip2可以将61M的文本文件压缩到只有10K大小，多么令人惊叹。当然这也不是零代价
-rw-r--r-- 1 root root 61M 0ct 25 23:15 largeFile.txt
In [5]: 1s -1h
ln [4]: tar.close()
foo2.txt fooDir2/ largefile.tar
foo1.txt fooDir1/ largeFile.txt largefilecompressed.tar.bzip2*
In [3]: ls -h
In [2]: tar.add("largeFile.txt")
In [1: tar = tarfile.open("largefilecompressed.tar.bzip2", "w|bz2")
例6-19：创建bzip2 的TAR 归档
CPU全速工作，甚至会报怨怎么会有这么多工作。bzip2压缩算法就十分了不起。下面看
-rw-r--r-- 1
一个示例，相信它会给我们留下深刻印象。
由于创建一个普通的TAR文档有些乏味，让我们换个口味使用bzip2压缩，它会使你的
的代码，从而节省一些磁盘空间。
文件或做其他需要进行的操作。使用本章介绍的方法，可以很容易地编写实现上述目标
档，显然有些不明智，因此，在创建TAR文件之前，需要将重复的文件替换为符号链接
术相结合。你或许正在归档一个全部由媒体文件组成的目录。如果对重复的文件进行归
通过遍历目录来添加目录树中的内容非常简单方便，因为它可以与本章中介绍的其他技
In [33]:tar.close()
for file in files:
In [30]: for root, dir, files in os.walk("/tmp"):
In [30]: for root, dir, files in os.walk("/tmp"):
...：
KeyboardInterrupt
...：
”第6章
tar.add(fullpath)
fullpath = os.path.join(root,file)
www.TopSage.com
Y
2
---
## Page 219
(z8|m, ‘diza ien'alttaiel)uadoatttre1 = xe1 :[ot] ur 
是依靠这些文档来工作的。这时，Willian告诉老板，他早料到自己有可能会因为文档被
Bob非常不安。老板告诉Willian，Alex告诉他备份里只有空的和受损的文件，而他本来
责怪Willian破坏了给他的文档，导致他错过了与客户约定的最后期限，这令Alex的老板
的办公室来，备份出了点问题。”Willian立即走进他的办公室，被告之那个狂人Alex，
一天，我们的朋友Willian从他的老板那里接到一个电话，“Willian，我需要你立刻到我
早会因为错过了某个最后期限，需要找个借口怪罪到他头上。
统，可以对那个狂人的所有文档自动生成TAR文档，并进行分类。他认定，那个狂人迟
坏遭遇而失去所有的一切。于是他决定从最基本的工作做起，并为此建立了一个日志系
但是，他已经在这个演播室工作许多年了，在这里有许多朋友，他不想因为一些临时的
不幸的是，这个朋友一直充当着替罪羊的角色。他也曾想过离开，再找一份新的工作，
撒谎并将责任怪罪到其他人头上。这个替罪羊经常是我们的朋友，系统管理员。
致的错误，例如错过了客户的最后期限，不能按指定的说明书完成工作，他会很容易地
提供支持服务。这个领导以不讲真话，行事冲动，甚至有些疯狂出名。一旦出现由他导
这个朋友作为系统管理员，工作在第一流的电视演播室，为一个由某个狂人领导的部门
构的；如果这个故事与现实生活雷同，纯属偶然。
的故事，让我们称之为“TAR文档丢失事件”。故事中人物的姓名、身份和事情都是虚
为了将这一问题讲得更生动，进一步强调检验TAR文档内容的重要性，这里讲一个朋友
指责。
无论你干了多久，都有可能会为一个坏的备份而气恼或是因创建了一个坏的备份而被
意义了。盲目地创建TAR文件却不做内容的检查不是一件好事。作为一名系统管理员，
现在我们有了创建TAR文件的工具，接下来，对TAR文件的内容进行检查就变得非常有
使用tarfile模块检查TAR文件内容
包的创建只用了几秒钟时间。看起来在大多数环境中，gzip都非常适用。
这个gzip文件依然是难以置信地小，只有160K左右。但是在我的机器上，完成压缩TAR
-rwxr-xr-x 1 root root 160k 0ct 26 01:24 largefile.tar.gzip*
-rw-r--r-- 1 root root 61M 0ct 26 01:20 largeFile.txt
In[13]:1s-1h
ln [12]: tar.close()
In [11]: tar.add("largeFile.txt")
例6-20：创建gzip的TAR存档
-rw-r--I--
61M 0ct 26 00:39 largefile.tar
www.TopSage.com
数据丨205
---
## Page 220
下面是一些检测TAR文件内容的方法，
够帮你避免许多从未想到的危险。
或者被解雇了，但这已经再不重要，我们的朋友Willian已经成功解决了“TAR文档丢失
是，这是Alex最后的救命稻草，几个月后，他再也没有出现在工作场合。他或者离开了
当Alex面对这些信息时，很快就收回之前的言论，并寻找转移注意力的新焦点。不幸的
档，并且几个月来，他创建的目录下内容一直是空的。
行检测，同时记录文件备份前后的文件属性。检测表明，Alex从来没有创建一个演示文
破坏而遭到指责，所以悄悄地写了一个Python代码，能够对所有Alex创建的TAR文档进
从这个故事中得出的道理就是，
事件”
206
In [3]: tar.list()
In [2]: tar = tarfile.open("temp.tar","r")
In [1]: import tarfile
In [4]: tar.name
--I--I-MI-
--I--I-MI-
-rW-I--I-"
-rw-r--r--n
-rw-r--r-- ngift/wheel
[,
Out[10]:
In [10]: tar.members
--I--I-MI
--I--I-MI-
--I--I-MI
--I--I-MI
,
tmp/dirB/file11.txt'
tmp/dirB/file1.txt'
tmp/dirA/file1.txt'
tmp/dirA/file00.txt'