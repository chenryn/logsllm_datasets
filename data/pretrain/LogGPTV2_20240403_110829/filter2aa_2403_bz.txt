异步社区会员 dearfuture(15918834820) 专享 尊重版权
264 
逆向工程权威指南（上册） 
指令清单 18.52  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
sll      
$v0, $a1, 10 
sll      
$a1, 6 
subu     
$a1, $v0, $a1 
addu     
$a1, $a0, $a1 
sll      
$a2, 3 
addu     
$a1, $a2 
lwc1     
$f0, 4($a1) 
or       
$at, $zero 
lwc1     
$f1, 0($a1) 
jr       
$ra 
or       
$at, $zero 
18.9.4 题目 4 
请描述下列代码的作用。 
请判断数组的维度。 
指令清单 18.53  Optimizing MSVC 2010 
_array$ = 8 
_x$ = 12 
_y$ = 16 
_z$ = 20 
_f       PROC 
  mov      eax, DWORD PTR _x$[esp-4] 
  mov      edx, DWORD PTR _y$[esp-4] 
  mov      ecx, eax 
  shl      ecx, 4 
  sub      ecx, eax 
  lea      eax, DWORD PTR [edx+ecx*4] 
  mov      ecx, DWORD PTR _array$[esp-4] 
  lea      eax, DWORD PTR [eax+eax*4] 
  shl      eax, 4 
  add      eax, DWORD PTR _z$[esp-4] 
  mov      eax, DWORD PTR [ecx+eax*4] 
  ret      0 
_f       ENDP 
指令清单 18.54  Non-optimizing Keil 6/2013 (ARM mode) 
f PROC 
  RSB       r1,r1,r1,LSL #4 
  ADD       r1,r1,r1,LSL #2 
  ADD       r0,r0,r1,LSL #8 
  ADD       r1,r2,r2,LSL #2 
  ADD       r0,r0,r1,LSL #6 
  LDR       r0,[r0,r3,LSL #2] 
  BX        lr 
  ENDP 
指令清单 18.55  Non-optimizing Keil 6/2013 (Thumb mode) 
f PROC 
  PUSH  
{r4,lr} 
  MOVS      r4,#0x4b 
  LSLS      r4,r4,#8 
  MULS      r1,r4,r1 
  ADDS      r0,r1,r0 
  MOVS      r1,#0xff 
  ADDS      r1,r1,#0x41 
  MULS      r2,r1,r2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
265 
  ADDS      r0,r0,r2 
  LSLS      r1,r3,#2 
  LDR       r0,[r0,r1] 
  POP       {r4,pc} 
  ENDP 
指令清单 18.56  Optimizing GCC 4.9 (ARM64) 
f: 
  sxtw     x2, w2 
  mov      w4, 19200 
  add      x2, x2, x2, lsl 2 
  smull    x1, w1, w4 
  lsl      x2, x2, 4 
  add      x3, x2, x3, sxtw 
  add      x0, x0, x3, lsl 2 
  ldr      w0, [x0,x1] 
  ret 
指令清单 18.57  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
sll      
$v0, $a1, 10 
sll      
$a1, 8 
addu     
$a1, $v0 
sll      
$v0, $a2, 6 
sll      
$a2, 4 
addu     
$a2, $v0 
sll      
$v0, $a1, 4 
subu     
$a1, $v0, $a1 
addu     
$a2, $a3 
addu     
$a1, $a0, $a1 
sll      
$a2, 2 
addu     
$a1, $a2 
lw       
$v0, 0($a1) 
jr       
$ra 
or       
$at, $zero 
18.9.5 题目 5 
请描述下列代码的作用。 
指令清单 18.58  Optimizing MSVC 2012 /GS- 
COMM     _tbl:DWORD:064H 
tv759 = -4  
;size= 4 
_main    PROC 
  push     ecx 
  push     ebx 
  push     ebp 
  push     esi 
  xor      edx, edx 
  push     edi 
  xor      esi, esi 
  xor      edi, edi 
  xor      ebx, ebx 
  xor      ebp, ebp 
  mov      DWORD PTR tv759[esp+20], edx 
  mov      eax, OFFSET _tbl+4 
  npad     8 ; align next label 
$LL6@main: 
  lea      ecx, DWORD PTR [edx+edx] 
  mov      DWORD PTR [eax+4], ecx 
  mov      ecx, DWORD PTR tv759[esp+20] 
  add      DWORD PTR tv759[esp+20], 3 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
266 
逆向工程权威指南（上册） 
  mov      DWORD PTR [eax+8], ecx 
  lea      ecx, DWORD PTR [edx*4] 
  mov      DWORD PTR [eax+12], ecx 
  lea      ecx, DWORD PTR [edx*8] 
  mov      DWORD PTR [eax], edx 
  mov      DWORD PTR [eax+16], ebp 
  mov      DWORD PTR [eax+20], ebx 
  mov      DWORD PTR [eax+24], edi 
  mov      DWORD PTR [eax+32], esi 
  mov      DWORD PTR [eax-4], 0 
  mov      DWORD PTR [eax+28], ecx 
  add      eax, 40 
  inc      edx 
  add      ebp, 5 
  add      ebx, 6 
  add      edi, 7 
  add      esi, 9 
  cmp      eax, OFFSET _tbl+404 
  jl       SHORT $LL6@main 
  pop      edi 
  pop      esi 
  pop      ebp 
  xor      eax, eax 
  pop      ebx 
  pop      ecx 
  ret      0 
_main    ENDP 
指令清单 18.59  Non-optimizing Keil 6/2013 (ARM mode) 
main PROC 
  LDR       r12,|L0.60| 
  MOV  
r1,#0 
|L0.8| 
  ADD       r2,r1,r1,LSL #2 
  MOV       r0,#0 
  ADD       r2,r12,r2,LSL #3 
|L0.20| 
  MUL  
r3,r1,r0 
  STR  
r3,[r2,r0,LSL #2] 
  ADD  
r0,r0,#1 
  CMP  
r0,#0xa 
  BLT  
|L0.20| 
  ADD  
r1,r1,#1 
  CMP  
r1,#0xa 
  MOVGE 
r0,#0 
  BLT  
|L0.8| 
  BX        lr 
  ENDP 
|L0.60| 
  DCD  
||.bss|| 
  AREA ||.bss||, DATA, NOINIT, ALIGN=2 
tbl 
  %       400 
指令清单 18.60  Non-optimizing Keil 6/2013 (Thumb mode) 
main PROC 
  PUSH      {r4,r5,lr} 
  LDR       r4,|L0.40| 
  MOVS      r1,#0 
|L0.6| 
  MOVS      r2,#0x28 
  MULS      r2,r1,r2 
  MOVS      r0,#0 
  ADDS      r3,r2,r4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
267 
|L0.14| 
  MOVS      r2,r1 
  MULS      r2,r0,r2 
  LSLS      r5,r0,#2 
  ADDS      r0,r0,#1 
  CMP       r0,#0xa 
  STR       r2,[r3,r5] 
  BLT       |L0.14| 
  ADDS      r1,r1,#1 
  CMP       r1,#0xa 
  BLT       |L0.6| 
  MOVS      r0,#0 
  POP       {r4,r5,pc} 
  ENDP 
  DCW       0x0000 
|L0.40| 
  DCD       ||.bss|| 
  AREA ||.bss||, DATA, NOINIT, ALIGN=2 
tbl 
  %       400 
指令清单 18.61  Non-optimizing GCC 4.9 (ARM64) 
  .comm    tbl,400,8 
main: 
  sub      sp, sp, #16 
  str      wzr, [sp,12] 
  b        .L2 
.L5: 
  str      wzr, [sp,8] 
  b        .L3 
.L4: 
  ldr      w1, [sp,12] 
  ldr      w0, [sp,8] 
  mul      w3, w1, w0 
  adrp     x0, tbl 
  add      x2, x0, :lo12:tbl 
  ldrsw    x4, [sp,8] 
  ldrsw    x1, [sp,12] 
  mov      x0, x1 
  lsl      x0, x0, 2 
  add      x0, x0, x1 
  lsl      x0, x0, 1 
  add      x0, x0, x4 
  str      w3, [x2,x0,lsl 2] 
  ldr      w0, [sp,8] 
  add      w0, w0, 1 
  str      w0, [sp,8] 
.L3: 
  ldr      w0, [sp,8] 
  cmp      w0, 9 
  ble      .L4 
  ldr      w0, [sp,12] 
  add      w0, w0, 1 
  str      w0, [sp,12] 
.L2: 
  ldr      w0, [sp,12] 
  cmp      w0, 9 
  ble      .L5 
  mov      w0, 0 
  add      sp, sp, 16 
  ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
268 
逆向工程权威指南（上册） 
指令清单 18.62  Non-optimizing GCC 4.4.5 (MIPS) (IDA) 
main: 
var_18   
= -0x18 
var_10   
= -0x10 
var_C    
= -0xC 
var_4    
= -4 
addiu    
$sp, -0x18 
sw       
$fp, 0x18+var_4($sp) 
move     
$fp, $sp 
la       
$gp, __gnu_local_gp 
sw       
$gp, 0x18+var_18($sp) 
sw       
$zero, 0x18+var_C($fp) 
b        
loc_A0 
or       
$at, $zero 
loc_24:       
# CODE XREF: main+AC 
sw       
$zero, 0x18+var_10($fp) 
b        