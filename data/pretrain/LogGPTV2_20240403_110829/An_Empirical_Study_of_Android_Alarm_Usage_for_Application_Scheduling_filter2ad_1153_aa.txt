title:An Empirical Study of Android Alarm Usage for Application Scheduling
author:M&apos;ario Almeida and
Muhammad Bilal and
Jeremy Blackburn and
Konstantina Papagiannaki
An Empirical Study of Android Alarm Usage
for Application Scheduling
Mario Almeida1(B), Muhammad Bilal1, Jeremy Blackburn2,
and Konstantina Papagiannaki2
1 Universitat Politecnica de Catalunya, Barcelona, Spain
PI:EMAIL
2 Telefonica Research, Barcelona, Spain
Abstract. Android applications often rely on alarms to schedule
background tasks. Since Android KitKat, applications can opt-in for
deferrable alarms, which allows the OS to perform alarm batching to
reduce device awake time and increase the chances of network traﬃc
being generated simultaneously by diﬀerent applications. This mecha-
nism can result in signiﬁcant battery savings if appropriately adopted.
In this paper we perform a large scale study of the 22,695 most popular
free applications in the Google Play Market to quantify whether expec-
tations of more energy eﬃcient background app execution are indeed
warranted. We identify a signiﬁcant chasm between the way application
developers build their apps and Android’s attempt to address energy
ineﬃciencies of background app execution. We ﬁnd that close to half of
the applications using alarms do not beneﬁt from alarm batching capa-
bilities. The reasons behind this is that (i) they tend to target Android
SDKs lagging behind by more than 18 months, and (ii) they tend to
feature third party libraries that are using non-deferrable alarms.
1 Introduction
Todays mobile devices support a diverse set of functionality, much of which is
not dependent on active user interaction. Many tasks are performed in the back-
ground, which has very clear impact on battery life and mobile data usage [4].
The impact is substantial enough that reducing and mitigating it has been the
focus of a signiﬁcant amount of research and development.
A promising set of solutions aim to shape applications’ traﬃc [3,5,8,9,12,16],
but suﬀer from severe limitations. These techniques ignore application-protocol
interactions and lack integration with applications and OSes, often increasing
energy consumption due to retransmissions and/or signaling issues [17] in real-
world scenarios. Other works [4,14,15,17] highlight the need for better applica-
tion knowledge and/or integration with OS/platforms.
Alarms are Android’s integrated application execution scheduling mechanism
(used, e.g., for background network activity) and are a primary vehicle for exe-
cuting the traﬃc shaping techniques. Alarms are so critical to the functionality
c(cid:2) Springer International Publishing Switzerland 2016
T. Karagiannis and X. Dimitropoulos (Eds.): PAM 2016, LNCS 9631, pp. 373–384, 2016.
DOI: 10.1007/978-3-319-30505-9 28
374
M. Almeida et al.
of Android that they have been a hot topic at the last two Google IO confer-
ences and a popular target for energy concerns1,2. One way Android mitigates
Alarms’ negative impact is batching, which can reduce total device awake time
while increasing the chance that traﬃc from diﬀerent applications can occur
simultaneously. As of KitKat, developers can opt-in to have their alarms be
deferrable which makes batching by the OS easier.
Unfortunately, the success of batching depends on the correct usage of alarm
APIs by applications: apps themselves determine the deferrability, trigger time,
and repetition interval of alarms. This leads to the situation Park et al. [13]
discovered in their study of 15 Android applications: alarms are often unneces-
sarily set as non-deferrable. However, it is totally unclear how widespread such
a practice is and thus its impact on the eﬃcacy of alarm scheduling is unknown.
Since there is no indication that alarms will cease to be the preferred applica-
tion level scheduling mechanism within Android, future design and development
should be informed with an understanding of how developers use the current
alarm APIs. Thus, in this paper we perform a large-scale study of 22,695 real
applications from the Google Play Market (to the best of our knowledge, the
largest such study to date) in order to ﬁnd evidence of alarm API adoption
delays and their impact on the performance of the Android OS; more speciﬁ-
cally, the eﬀectiveness of alarm batching in Android. We investigate how many
apps use alarms, what type of alarms they use, diﬀerences in alarm usage by
application category, and whether alarms are being used by apps themselves or
by 3rd party libraries. We ﬁnd that a shocking 46 % of apps with alarms do
not take advantage of Android alarm scheduling capabilities due to either tar-
geting old SDK versions or their use of 3rd party libraries. We further discuss
and analyze the problems behind Android SDK adoption and propose possible
directions for improving alarm batching across applications.
2 Android Alarms
Alarms are the primary mechanism Android provides to allow applications to
schedule background activities. Alarms come in two ﬂavors: (1) time critical
alarms, and (2) non-time critical. The ﬁrst type is called an exact alarm, and
the second is known as an inexact or deferrable alarm. The OS is expected
to execute exact alarms on schedule, but can delay the execution of deferrable
alarms. Deferrable alarms are particularly interesting due to the manner in which
Android can leverage them to improve power eﬃciency. For example, batching
alarms to multiplex network activity of multiple applications can reduce the
wake up frequency of the device’s radio.
Decisions related to what type of alarms to use are left to the application
developers since, in theory, only they have the insight necessary to assess the
impact a delayed alarm will have on their app. Unfortunately, developers will
often optimize for proﬁt (e.g., ensuring fresh ads are retrieved/displayed as often
1 GIO’15, Doze - http://goo.gl/KEJURc.
2 GIO’14, Project Volta - https://goo.gl/aebnwF.
An Empirical Study of Android Alarm Usage for Application Scheduling
375
Table 1. Behavior of alarms based on the Target SDK level. We note that although
our dataset was collected before SDK 23 was available, the continuing eﬀort put into
the alarm API highlights the critical nature of Android Alarms.
Alarm API
set
setRepeating
setInexactRepeating
setExact
setWindow
setAndAllowWhileIdle
setExactAndAllowWhileIdle NA
SDK = 19
8.49 %
52.91 %
AlarmExact
44.05 %
2.31 %
Alarm
46.06 %
53.49 %
that were released more than 18 months ago (up to and including SDK 19,
represent 71.6 %). Close to half (48 %) the apps target SDKs lagging behind by
more than 21 months.
From the perspective of alarms, we note that 47.23 % of apps have a tar-
get SDK lower than 19; i.e., they are still going to use the older alarm API
behavior with defaults oriented towards exact alarms. Out of the 22+K apps
in our dataset, 47.25 % use alarms. Of the apps that use alarms, we see that
53.49 % have target SDK versions above 19, while 46.06 % target older SDKs
(Table 2). As annotations can aﬀect the targeted APIs on a per method basis,
we conﬁrmed that only 2 % of the apps with SDK < 19 had occurrences of the
TargetAPI annotation in methods containing alarm calls.
The major apparent diﬀerence between SDK < 19 apps and SDK ≥ 19 apps
is the ﬂip-ﬂop in usage of exact and inexact alarms: only 2.31 % of apps targeting
SDKs ≥ 19 deﬁne exact alarms in contrast to the 44.05 % of apps targeting <
19. We note that this change might not necessarily be the result of developers
being aware of the impact of exact alarms, but rather an end result of targeting
newer SDKs.
The reason behind Android being so conservative with maintaining the pre-
vious alarm behavior even in newer versions of Android is to avoid apps from
becoming unstable when updating. Since only 2.31 % of the apps targeting SDKs
≥ 19 use the exact alarm API call, if we would consider the hypothesis that apps
with target SDK ≥ 19 updated from an older SDK, it is probable that either
most apps did not have exact time constraints after all or that the ones that
378