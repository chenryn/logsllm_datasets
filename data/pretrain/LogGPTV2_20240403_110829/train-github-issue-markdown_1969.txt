Let's assume there are two excel files with almost identical content:
file_1.xlsx:
![Imgur](https://camo.githubusercontent.com/9d196db59437c2d975eb12d29e883f8c1724be750d68991d21bad24c6e1c6d40/687474703a2f2f692e696d6775722e636f6d2f54424962434f752e706e67)
file_2.xlsx:
![Imgur](https://camo.githubusercontent.com/80d1d42736d4196da24cdd20e7ec9f911e067e38395f6316cba1a6f984d15dda/687474703a2f2f692e696d6775722e636f6d2f4d4d6968596c362e706e67)
Then reading first file in pandas:
    df1 = pd.read_excel('file_1.xlsx', 
                        header=0, index_col=None, 
                        converters={'A0': str, 'B0': str})
    print(df1)
Would produce expected result:
         A0    B0   C0  D0 E0
    0  0001  0004  0.1   1  a
    1  0002  0005  0.2   2  b
    2  0003  0006  0.3   3  c
However trying the same with the second file:
    df2 = pd.read_excel('file_2.xlsx', 
                        header=[0,1], index_col=None,
                        converters={('A0', 'A1'): str, 
                                    ('A0', 'B1'): str},
                       )
    print(df2)
Would yield somewhat different and unexpected (in comparison with previous
example) result:
    A0    A0   C0    E0
    A1    B1   C1 D1 E1
    1   0004  0.1  1  a
    2   0005  0.2  2  b
    3   0006  0.3  3  c
Since it is not possible to use `has_index_names=False` as it has been
depreciated since 0.16.2, there seems to be no way to have control over how
pandas imports this first column (i.e. no way to convert values before
original formatting is lost).
And there is no way to tell pandas DO_NOT_ASSIGN first column to index as it
ignores `index_col=None` when `header` is a list.
So the question is what would be the sensible way to regain control over
import process of first columns with multi-index header:
  * revive or de-depreciate (would that be appreciate?) `has_index_names`;
  * make `index_col` play a role in parsing header?