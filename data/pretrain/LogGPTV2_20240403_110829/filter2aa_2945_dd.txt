### Code and Documentation Optimization

#### ViewModel Initialization
In the `ViewModel` class, commands for editing, discarding, and saving changes are initialized. The `DiscardChanges` command is only enabled if `CanSaveOrDiscardChanges` is true, the ViewModel has a connection to the web service, and the ViewModel is in Adding or Editing mode.

```csharp
public class ViewModel : INotifyPropertyChanged
{
    ...
    public Command EditCustomer { get; private set; }
    public Command DiscardChanges { get; private set; }
    public Command SaveChanges { get; private set; }

    public ViewModel()
    {
        ...
        this.EditCustomer = new Command(this.Edit, ...);
        this.DiscardChanges = new Command(
            this.Discard,
            () => this.CanSaveOrDiscardChanges
        );
        this.SaveChanges = new Command(
            this.SaveAsync,
            () => this.CanSaveOrDiscardChanges
        );
        ...
    }
    ...
}
```

#### SaveAsync Method
The `SaveAsync` method is responsible for saving the new or updated customer data back to the web service and returning the form to Browsing mode. This method is marked with the `async` modifier to handle asynchronous operations.

```csharp
private async void SaveAsync()
{
    if (this.ValidateCustomer(this.Current))
    {
        try
        {
            AdventureWorksService service = new AdventureWorksService();
            if (this.IsAdding)
            {
                // Add a new customer
                var cust = await service.CustomersOperations.PostCustomerAsync(this.Current);
                this.CopyCustomer(cust, this.Current);
                this.OnPropertyChanged(nameof(Current));
                this.IsAdding = false;
                this.IsBrowsing = true;
            }
            else
            {
                // Update an existing customer
                await service.CustomersOperations.PutCustomerAsync(this.Current.CustomerID, this.Current);
                this.IsAdding = false;
                this.IsBrowsing = true;
            }
            this.LastError = String.Empty;
        }
        catch (Exception e)
        {
            this.LastError = e.Message;
        }
    }
}
```

#### Validation and Error Handling
The `ValidateCustomer` method ensures that the current customer's data is valid. If the details are valid, the `SaveAsync` method determines whether the user is adding a new customer or updating an existing one. Errors and HTTP failures are caught and reported through the `LastError` property.

```csharp
private string _lastError = null;

public string LastError
{
    get => this._lastError;
    private set
    {
        this._lastError = value;
        this.OnPropertyChanged(nameof(LastError));
    }
}

private bool ValidateCustomer(Customer customer)
{
    ...
    this.LastError = validationErrors;
    return !hasErrors;
}
```

#### Web Service Updates
To support add and edit functionality, the web service needs to be updated to set the `ModifiedDate` and `rowguid` properties when adding or updating a customer.

```csharp
// POST api/Customers
[ResponseType(typeof(Customer))]
public async Task PostCustomer(Customer customer)
{
    if (!ModelState.IsValid)
    {
        ...
    }
    customer.ModifiedDate = DateTime.Now;
    customer.rowguid = Guid.NewGuid();
    db.Customers.Add(customer);
    await db.SaveChangesAsync();
    ...
}

// PUT api/Customers/5
[ResponseType(typeof(void))]
public async Task PutCustomer(int id, Customer customer)
{
    ...
    customer.ModifiedDate = DateTime.Now;
    db.Entry(customer).State = EntityState.Modified;
    ...
}
```

#### REST API Client Fix
A known issue with the `PostCustomerWithHttpMessagesAsync` method is that it does not handle the HTTP Created response (201). This can be fixed by modifying the method to accept both 200 and 201 status codes.

```csharp
if ((int)_statusCode != 200 && (int)_statusCode != 201)
{
    throw new Exception("Unexpected HTTP status code: " + _statusCode);
}

// Deserialize response
if ((int)_statusCode == 200 || (int)_statusCode == 201)
{
    ...
}
```

#### UI Integration
Finally, integrate the new commands, state information, and error-reporting features into the view provided by the Customers form.

1. **Bind TextBlock controls to `LastError`**:
    ```xaml
    <TextBlock Text="{Binding LastError}" Style="{StaticResource ErrorMessageStyle}"/>
    ```

2. **Enable controls based on `IsAddingOrEditing`**:
    ```xaml
    <TextBox IsEnabled="{Binding IsAddingOrEditing}" .../>
    <ComboBox IsEnabled="{Binding IsAddingOrEditing}" .../>
    ```

3. **Add a command bar for Add, Edit, Save, and Discard commands**:
    ```xaml
    <CommandBar>
        <AppBarButton Icon="Add" Label="Add" Command="{Binding AddCustomer}"/>
        <AppBarButton Icon="Edit" Label="Edit" Command="{Binding EditCustomer}"/>
        <AppBarButton Icon="Save" Label="Save" Command="{Binding SaveChanges}"/>
        <AppBarButton Icon="Cancel" Label="Discard" Command="{Binding DiscardChanges}"/>
    </CommandBar>
    ```

4. **Use a ProgressRing to indicate activity**:
    ```xaml
    <ProgressRing IsActive="{Binding IsBusy}" Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
    ```

By following these steps, you ensure that the application is robust, user-friendly, and handles errors gracefully.