### Core Image and Core Video

Core Image leverages available hardware, such as GPU-based acceleration and vector processing, to enhance performance. It supports 32-bit floating-point pixels for improved accuracy and integrates with other fundamental graphical technologies like OpenGL, Quartz, and QuickTime for optimal image processing. Even when using Core Image, it is ultimately OpenGL that rasterizes the data.

#### Plug-in Architecture
Core Image employs a plug-in architecture, inspired by Core Audio, to access filters, transitions, and effects, collectively known as Image Units. Developers can use pre-shipped Image Units or create custom ones by describing filters and effects using dynamically compiled expressions. Examples of bundled Image Units include:

- Blurring and sharpening
- Color adjustment
- Compositing
- Distortion
- Gradients
- Halftones
- Tiling
- Transitions

**Key Components of Core Image:**

- **Context (CIContext):** A destination for images to be drawn, often created from an OpenGL context.
- **Image (CIImage):** An image that theoretically extends to infinity, with a subrectangle defining the region of interest.
- **Filter (CIFilter):** An object encapsulating an image-processing kernel, representing an effect or transition with a parameter-passing interface.
- **Sampler (CISampler):** An accessor object used (typically by a kernel) to retrieve samples (pixels) from an image.
- **Kernel (CIKernel):** An object within a filter containing per-pixel instructions that apply the filter's image-processing effect.

**Figure 224:** Conceptual view of image processing with Core Image.

### Core Video

Similar to Core Image, Core Video applies these concepts to video, enabling video filters and effects to benefit from hardware acceleration. It acts as a bridge between QuickTime and graphics hardware, enhancing performance and reducing CPU requirements. **Figure 225** shows a conceptual overview of using both Core Image and Core Video in the QuickTime video-rendering pipeline.

Both Core Image and Core Video are part of the Quartz Core framework.

### Quartz Composer

Introduced in Mac OS X 10.4, Quartz Composer is a visual development tool that allows rapid creation of graphical applications using various Mac OS X graphics technologies, including Core Image, OpenGL, Quartz 2D, and QuickTime. Additionally, it can use Rich Site Summary (RSS) content and MIDI System Services. For example, by dragging and dropping graphical building blocks into a grid and connecting them, you can quickly create a rotating cube with different images on each face, complete with custom lighting effects.

### QuickTime

QuickTime is both a graphics and application environment, providing features for working with interactive multimedia. Depending on the media type, QuickTime allows for:

- Accessing media (open, play, or display)
- Capturing media from external devices
- Compressing media
- Creating certain types of media, such as panorama movies, object movies, and scenes using QuickTime Virtual Reality (QTVR)
- Editing and enhancing media, including synchronizing multiple media to a single timeline
- Streaming media over a local network or the Internet using protocols like HTTP, RTP, and RTSP
- Translating between media formats

QuickTime works with various media types, including video, graphics, animation, virtual reality, audio, and text, in a variety of file and streaming formats. The QuickTime architecture is modular and extensible, allowing developers to write components for new media types, codecs, and custom media capture hardware. Starting with Mac OS X 10.4, QuickTime cooperates with Core Image and Core Video to improve performance.

QuickTime is also available on other platforms, such as Java, Mac OS 9, and several versions of Microsoft Windows.

### Core Audio

The Core Audio layer manages audio software and hardware using a plug-in architecture. Plug-ins can perform software operations on audio data or interact with audio hardware. Core Audio's hardware abstraction layer hides unnecessary details of the underlying hardware from applications. Core Audio APIs provide functionality for:

- Accessing and manipulating audio files
- Aggregating multiple audio devices into a single "virtual" device
- Working with multichannel audio, including channel mixing
- Converting audio data between various formats
- Developing audio codecs
- Providing low-level access to audio hardware, including device sharing between multiple applications
- Synthesizing audio using software
- Using MIDI hardware and software

Apple's AU Lab digital mixing application (AULab.app) allows blending audio from multiple sources, supporting multiple outputs.

### OpenAL

The Open Audio Library (OpenAL) is a cross-platform 3D audio API for games and other applications requiring high-quality spatialized audio. It is available on systems such as BSD, IRIX, Linux, Solaris, Microsoft Windows, Mac OS 8, Mac OS 9, Sony PlayStation 2, Microsoft Xbox/Xbox360, and Nintendo GameCube. On Mac OS X, OpenAL is implemented using Core Audio as the underlying device. In the OpenAL specification, a device is defined as an implementation-dependent entity, which could be a hardware device, a daemon, or a system service.

### Other Application Services

The Application Services umbrella framework contains subframeworks that facilitate the development of various types of applications. Some examples include:

- **AE:** Allows creation and manipulation of events in the Apple Events mechanism for interapplication communication.
- **ATS:** Provides font layout and management using Apple Type Services.
- **ColorSync:** Used for color matching with Apple's integrated color management system.
- **CoreGraphics:** Provides the Core Graphics API.
- **FindByContent:** Provides an interface for searching specific volumes or directories for files containing specified content.
- **HIServices:** Provides human-interface services such as Accessibility, Icon Management, Copy and Paste, Process Management, Translation Management, and Internet Configuration.
- **LangAnalysis:** Provides an interface to the Language Analysis Manager for analyzing morphemes in text.
- **LaunchServices:** Provides an interface for opening URLs and starting applications, including opening documents with specified or default applications.
- **PrintCore:** Provides an interface to the printing subsystem.
- **QD:** Provides the QuickDraw API.
- **SpeechSynthesis:** Provides an interface for generating synthesized speech.

### Application Environments

Most typical application development occurs in the Application Environments layer. Mac OS X supports multiple application environments, catering to different developer needs. For example, developers can use Unix APIs, visual tools for rapid prototyping, or object-oriented development. Many portable programming language implementations are accessible on Mac OS X, and some are bundled by Apple.

Examples of applications that can run or be developed on Mac OS X include:

- Unix-style command-line tools and X Window applications written using portable interfaces like POSIX.
- Carbon-based GUI and command-line applications written in C.
- Cocoa-based GUI and command-line applications written in Objective-C, Java, or AppleScript.
- AWT-based and Swing-based applications written in Java.
- Generic command-line applications or tools written in C++ or C, linking with frameworks like Core Foundation, Core Services, Foundation, and I/O Kit.

While the Mac OS X kernel primarily understands the Mach-O binary executable format, it is possible to run certain legacy format binaries on Mac OS X. The Mac OS X kernel can also be seen as an application environment for dynamically loadable kernel extensions.

### BSD

The BSD application environment in Mac OS X provides POSIX APIs, BSD-specific APIs, and some Unix-flavored APIs that export Mac OS X-specific functionality. It is suitable for writing Unix tools, daemons, and shell scripts. Programs targeted for the Mac OS X BSD environment are often portable to other Unix systems and vice versa. Standard libraries and headers reside in /usr/lib/ and /usr/include/, respectively.

### The X Window System

The X Window System is a graphical extension to the BSD environment. Mac OS X includes an optimized X Window server (/usr/X11R6/bin/Xquartz) and a modern X Window environment. The X server is integrated with the Mac OS X Quartz subsystem, enjoying hardware acceleration. The environment includes the quartz-wm X Window manager, which provides Aqua window controls, drop shadows, and integration with the Dock. The X server can be run in rootless or full-screen mode, and it can be configured to enable focus-follows-mouse mode for X Window applications.

### Carbon

The Carbon application environment contains APIs based on the original Mac OS 9 APIs, with some dating back to Mac OS 8.1. These interfaces are procedural and implemented in C. Carbon was designed to provide an easy migration path from Mac OS 8 and Mac OS 9 to newer systems, allowing compliant applications to run natively on both. It is implemented as a framework (Carbon.framework) on Mac OS X and as a system extension (CarbonLib) on Mac OS 9.

#### Support for CFM Binaries

The Code Fragment Manager (CFM) was part of older Mac OS versions, loading PowerPC code fragments from PEF files into memory. The Mac OS X native runtime architecture (dyld/Mach-O) differs from that on Mac OS 9 (CFM/PEF). However, Carbon supports the CFM on Mac OS X for compatibility, allowing the creation and running of CFM applications. Carbon uses the LaunchCFMApp helper application to run programs created for the CFM, but it only supports native PowerPC code and does not support resource-based fragments. Carbon also provides a one-way bridge for CFM applications to link to Mach-O code.

#### Carbon APIs

Carbon includes a subset (about 70%) of the old APIs, covering most functionality used by typical applications. Some APIs have been modified or extended to benefit from Mac OS X's modern features, such as preemptive multitasking and protected memory. New APIs were added to Carbon and made available on Mac OS 9, with several new APIs available only on Mac OS X. Carbon applications running on Mac OS X have the system's native look-and-feel.

Carbon supports standard Aqua user-interface elements and can be designed using Interface Builder, similar to Cocoa applications. Carbon functionality is widely used in Mac OS X and is critical for C-based development. Some parts of Carbon complement object-oriented APIs like Cocoa.

**Examples of Carbon Subframeworks:**

- **CarbonSound:** Provides Carbon Sound Manager interfaces.
- **CommonPanels:** Provides interfaces for displaying commonly used GUI panels, such as the Color window and the Font window.
- **Help:** Provides interfaces for using Apple Help in applications.
- **HIToolbox:** Provides interfaces for the HIToolbox object, the Carbon Event Manager, and others. It includes objects for organizing windows, controls, and menus in Carbon applications, benefiting from native Quartz rendering, automatic layering, and the ability to be hidden or attached/detached from windows.
- **HTMLRendering:** Provides interfaces for rendering HTML content, though it has been superseded by the WebKit framework.
- **ImageCapture:** Provides interfaces for capturing images from digital cameras.
- **Ink:** Provides interfaces for handwriting recognition based on input from pen-based devices, including programmatic enabling or disabling of recognition, direct access to Ink data, toggling between deferred and on-demand recognition, and text manipulation through gestures.
- **NavigationServices:** Provides interfaces for file navigation.
- **OpenScripting:** Contains AppleScript and Open Scripting Architecture (OSA) interfaces.
- **Print:** Provides print dialog interfaces.
- **SecurityHI:** Provides security dialog interfaces.