注A 在SELECT语句中使用WHERE子句的语法如下所示。
这和Excel中根据过滤条件对行
进行过滤的功能是相同的。 语法2-3 语句中的 子句
SELECT WHERE
SELECT , ……
FROM 
WHERE ;
图2-3显示了从Product表中选取商品种类（product_type）
为'衣服'的记录。
图2-3 选取商品种类为'衣服'的记录
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
0004 菜刀 厨房用具 3000 2800 2009-09-20
0005 高压锅 厨房用具 6800 5000 2009-01-15
0006 叉子 厨房用具 500 2009-09-20
0007 擦菜板 厨房用具 880 790 2008-04-28
0008 圆珠笔 办公用品 100 2009-11-11
选取product_type列为'衣服'的记录
从被选取的记录中还可以查询出想要的列。为了更加容易理解，我们
在查询product_type列的同时，把product_name列也读取出来。
SELECT语句请参见代码清单2-10。
● 54 第２章 查询基础
代码清单2-10 用来选取product_type列为'衣服'的记录的SELECT语句
SELECT product_name, product_type
FROM Product
WHERE product_type = '衣服';
执行结果
product_name | product_type
---------------+--------------
T恤衫 | 衣服
运动T恤 | 衣服
WHERE子句中的“product_type = '衣服'”就是用来表示查询
KEYWORD 条件的表达式（条件表达式）。等号是比较两边的内容是否相等的符号，
●条件表达式
上述条件就是将product_type列的值和'衣服'进行比较，判断是否
相等。Product表的所有记录都会被进行比较。
接下来会从查询出的记录中选取出SELECT语句指定的product_
name列和product_type列，如执行结果所示，也就是首先通过
WHERE子句查询出符合指定条件的记录，然后再选取出SELECT语句指
定的列（图2-4）。
图2-4 选取行之后，再输出列
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
① 选取行 0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
0004 菜刀 厨房用具 3000 2800 2009-09-20
0005 高压锅 厨房用具 6800 5000 2009-01-15
0006 叉子 厨房用具 500 2009-09-20
0007 擦菜板 厨房用具 880 790 2008-04-28
0008 圆珠笔 办公用品 100 2009-11-11
② 输出列
代码清单2-10中的语句为了确认选取出的数据是否正确，通过
SELECT子句把作为查询条件的product_type列也选取出来了，其
实这并不是必须的。如果只想知道商品名称的话，可以像代码清单2-11那
2-1 SELECT语句基础 55 ●
样只选取出product_name列。
代码清单2-11 也可以不选取出作为查询条件的列
SELECT product_name
FROM Product
WHERE product_type = '衣服';
执行结果
product_name
---------------
T恤衫
运动T恤
SQL中子句的书写顺序是固定的，不能随意更改。WHERE子句必须
紧跟在FROM子句之后，书写顺序发生改变的话会造成执行错误（代码
清单2-12）。
代码清单2-12 随意改变子句的书写顺序会造成错误
邮 SELECT product_name, product_type
WHERE product_type = '衣服'
电 FROM Product;
执行结果（PostgreSQL）
ERROR: "FROM"或者其前后有语法错误
第3行: FROM Product;
^
法则2-4
WHERE子句要紧跟在FROM子句之后。
注释的书写方法
KEYWORD 最后给大家介绍一下注释的书写方法。注释是SQL语句中用来标识
●注释
说明或者注意事项的部分。
注释对SQL的执行没有任何影响。因此，无论是英文字母还是汉字
都可以随意使用。
注释的书写方法有如下两种。
● 56 第２章 查询基础
KEYWORD ● 1行注释
●1行注释 书写在“--”之后，只能写在同一行。A
●--
注A
MySQL中需要在“--”之后加入 ● 多行注释
半角空格（如果不加的话就不会 书写在“/*”和“*/”之间，可以跨多行。
被认为是注释）。
KEYWORD 实际的示例请参见代码清单2-13和代码清单2-14。
●多行注释
●/*
代码清单2-13 1行注释的使用示例
●*/
-- 本SELECT语句会从结果中删除重复行。
SELECT DISTINCT product_id, purchase_price
FROM Product;
代码清单2-14 多行注释的使用示例
/* 本SELECT语句，
会从结果中删除重复行。*/
SELECT DISTINCT product_id, purchase_price
FROM Product;
任何注释都可以插在SQL语句中（代码清单2-15、代码清单2-16）。
代码清单2-15 在SQL语句中插入1行注释
SELECT DISTINCT product_id, purchase_price
-- 本SELECT语句会从结果中删除重复行。
FROM Product;
代码清单2-16 在SQL语句中插入多行注释
SELECT DISTINCT product_id, purchase_price
/* 本SELECT语句，
会从结果中删除重复行。*/
FROM Product;
这些SELECT语句的执行结果与没有使用注释时完全一样。注释能
够帮助阅读者更好地理解SQL语句，特别是在书写复杂的SQL语句时，
希望大家能够尽量多加简明易懂的注释。注释不仅可以写在SELECT语
句中，而且可以写在任何SQL语句当中，写多少都可以。
法则2-5
注释是SQL语句中用来标识说明或者注意事项的部分。
分为1行注释和多行注释两种。
2-2 算术运算符和比较运算符 57 ●
第２章 查询基础
2-2
算术运算符和比较运算符
● 运算符就是对其两边的列或者值进行运算（计算或者比较大小等）的符号。
学习重点
● 使用算术运算符可以进行四则运算。
● 括号可以提升运算的优先顺序（优先进行运算）。
● 包含NULL的运算，其结果也是NULL。
● 比较运算符可以用来判断列或者值是否相等，还可以用来比较大小。
● 判断是否为NULL，需要使用IS NULL或者IS NOT NULL运算符。
算术运算符
SQL语句中可以使用计算表达式。代码清单2-17中的SELECT语句，
把各个商品单价的2倍（sale_price的2倍）以"sale_price_
x2"列的形式读取出来。
代码清单2-17 SQL语句中也可以使用运算表达式
SELECT product_name, sale_price,
sale_price * 2 AS "sale_price_x2"
FROM Product;
执行结果
product_name | sale_price | sale_price_x2
---------------+-------------+----------------
T恤衫 | 1000 | 2000
打孔器 | 500 | 1000
运动T恤 | 4000 | 8000
菜刀 | 3000 | 6000
高压锅 | 6800 | 13600
叉子 | 500 | 1000
擦菜板 | 880 | 1760
圆珠笔 | 100 | 200
sale_price_x2列中的sale_price * 2就是计算销售单价
的2倍的表达式。以product_name列的值为'T恤衫'的记录行为例，
● 58 第２章 查询基础
sale_price列的值1000的2倍是2000，它以sale_price_x2
列的形式被查询出来。同样，'打孔器'记录行的值500的2倍1000，
'运动T恤'记录行的值4000的2倍8000，都被查询出来了。运算就
是这样以行为单位执行的。
SQL语句中可以使用的四则运算的主要运算符如表2-1所示。
表2-1 SQL语句中可以使用的四则运算的主要运算符
含义 运算符
KEYWORD 加法运算 +
●+运算符
减法运算 -
●-运算符
●*运算符 乘法运算 *
●/运算符
除法运算 /
KEYWORD 四则运算所使用的运算符（+、-、*、/）称为算术运算符。运算符就
●算术运算符
是使用其两边的值进行四则运算或者字符串拼接、数值大小比较等运算，
●运算符
并返回结果的符号。加法运算符（+）前后如果是数字或者数字类型的列
名的话，就会返回加法运算后的结果。SQL中除了算术运算符之外还有其
他各种各样的运算符。
法则2-6
SELECT子句中可以使用常数或者表达式。
KEYWORD 当然，SQL中也可以像平常的运算表达式那样使用括号( )。括号中
●( )
运算表达式的优先级会得到提升，优先进行运算。例如在运算表达式
（1 + 2） * 3中，会先计算1 + 2的值，然后再对其结果进行* 3运算。
括号的使用并不仅仅局限于四则运算，还可以用在SQL语句的任何
表达式当中。具体的使用方法今后会慢慢介绍给大家。
需要注意
NULL
像代码清单2-17那样，SQL语句中进行运算时，需要特别注意含有
NULL的运算。请大家考虑一下在SQL语句中进行如下运算时，结果会
2-2 算术运算符和比较运算符 59 ●
是什么呢？
A 5 + NULL
B 10 - NULL
C 1 * NULL
D 4 / NULL
E NULL / 9
F NULL / 0
正确答案全部都是NULL。大家可能会觉得奇怪，为什么会这样呢？
实际上所有包含NULL的计算，结果肯定是NULL。即使像F那样用NULL
除以0时这一原则也适用。通常情况下，类似5/0这样除数为0的话会发
生错误，只有NULL除以0时不会发生错误，并且结果还是NULL。
尽管如此，很多时候我们还是希望NULL能像0一样，得到5 +
NULL = 5这样的结果。不过也不要紧，SQL中也为我们准备了可以解
决这类情况的方法（将会在6-1节中进行介绍）。
专 栏
子句真的有必要吗？
FROM
在第1节中我们介绍过SELECT语句是由SELECT子句和FROM子句组成的。
可实际上FROM子句在SELECT语句中并不是必不可少的，只使用SELECT子句进
行计算也是可以的。
代码清单2-A 只包含SELECT子句的SELECT语句
SQL Server PostgreSQL MySQL
SELECT (100 + 200) * 3 AS calculation;
执行结果
calculation
-------------
900
实际上，通过执行SELECT语句来代替计算器的情况基本上是不存在的。不
注A 过在极少数情况下，还是可以通过使用没有FROM子句的SELECT语句来实现某
在Oracle中，FROM子句是必需 种业务的。例如，不管内容是什么，只希望得到一行临时数据的情况。
的，这种情况下可以使用DUAL 但是也存在像Oracle这样不允许省略SELECT语句中的FROM子句的RDBMS，
这个临时表。另外，DB2中可以使 A
请大家注意 。
用SYSIBM.SYSDUMMY1这个临
时表。
● 60 第２章 查询基础
比较运算符
在2-1节学习WHERE子句时，我们使用符号=从Product表中选
取出了商品种类（product_type）为字符串'衣服'的记录。下面让
我们再使用符号=选取出销售单价（sale_price）为500日元（数字
500）的记录（代码清单2-18）。
代码清单2-18 选取出sale_price列为500的记录
SELECT product_name, product_type
FROM Product
WHERE sale_price = 500;
执行结果
product_name | product_type
---------------+--------------
打孔器 | 办公用品
叉子 | 厨房用具
KEYWORD 像符号=这样用来比较其两边的列或者值的符号称为比较运算符，
●比较运算符
符号=就是比较运算符。在WHERE子句中通过使用比较运算符可以组合
●=运算符
●<>运算符 出各种各样的条件表达式。
接下来，我们使用“不等于”这样代表否定含义的比较运算符<>A，
注A
有很多RDBMS可以使用比较运算 选取出sale_price列的值不为500的记录（代码清单2-19）。
符“!=”来实现不等于功能。但这
是限于不被标准SQL所承认的特
代码清单2-19 选取出sale_price列的值不是500的记录
定SQL，出于安全的考虑,最好不
要使用。 SELECT product_name, product_type
FROM Product
WHERE sale_price <> 500;