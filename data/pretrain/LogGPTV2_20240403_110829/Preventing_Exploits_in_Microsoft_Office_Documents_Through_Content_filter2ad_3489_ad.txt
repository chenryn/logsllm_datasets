as possible, are about 80–90 bytes [25]. Of course, it may be possible to shrink
the size of the omelette functionality in a given exploit and probabilistic attacks
are possible.
However, if the 64 byte block size provides insuﬃcient fragmentation, this
block size could be dropped to a level rendering any sort of egg hunt infeasible.
The size of these blocks in OLE ﬁles is tunable. It is also noteworthy that the
cutoﬀ between normal and small block streams can be changed and that the block
size for the normal streams is also tunable. Ergo, this ﬂexibility in size applies
generally to both normal and small OLE streams. Due to the arbitrary tuning
of OLE block sizes, it is not feasible to prevent malicious payload fragmentation
by shrinking the payload size using techniques such as omelette shellcode.
In exploring malicious payload size limitations, we use shellcode because
methods such as omelette shellcode are relatively well documented. The same
general principles apply to other situations such as ROP based exploits. Typ-
ical ROP chains are similar in size to the shellcode, so the fragmentation of
DCFR is equally eﬀective. The ROP chains we saw in the CVE-2013-3906 heap
sprays were about 1000 bytes in length. Therefore small block OLE fragmen-
tation should be able to disrupt ROP chains as well, even if omelette style
techniques are employed. The same arguments should apply to .doc ﬁle level
content randomization. To the degree that exploits cannot implement malicious
payload reconstruction mechanisms, then ﬁle level content randomization will
remain eﬀective.
Because document content randomization is not used widely, no examples
of malicious documents could be found in the wild that used countermeasures
such as omelette code. However, observations made during the manual validation
performed for current exploits indicate that DCR would still be successful.
242
C. Smutz and A. Stavrou
In our study of Oﬃce documents, we saw a relatively small number of exploits
that were defeated by encoding based content randomization. We observed no
attempts to counter this exploit protection, and there is a dearth of studies
that apply to DCER evasion. As such, counterevasion strategies are necessarily
speculative.
One likely DCER evasion approach would be to anticipate the encoding and
adjust the payload accordingly. Some encodings are so simplistic that they could
be defeated by preparing the malicious payload so that it appears as desired
post encoding. For example, if base64 were a possible encoding, it would likely
be possible to prepare a malicious payload that was operable following encoding
despite some restrictions in content [15]. This approach would be more diﬃcult
with encoding mechanisms such as compression which have greater complex-
ity. Even if attackers were able to circumvent the tighter constraints caused by
compression, an arbitrarily large number of compression representations are pos-
sible because of the latitude aﬀorded in compression algorithms such as deﬂate.
Adding a custom, entropy infusing, compressor to the existing DCR mechanisms
would be operationally feasible.
Assuming there are enough possible encodings to make brute forcing infeasi-
ble, the indirect approach, analogous to omelette shellcode, would be to imple-
ment a decoder. If a very small decoder can be created, then it might be used
to decode a larger payload. Trivial encodings such as hexascii or base64 may
well be possible to implement in a very small decoder. Assuming an encoding
method such as deﬂate compression is used, it is not likely that a suﬃciently
small decoder can be created to make this method worthwhile. We studied the
compiled object size of a few common decompress only deﬂate implementations
designed speciﬁcally for small size, including miniz and zlib’s puﬀ, and found the
smallest to be 5 KB. When compared with other decoders used in exploits, this
is relatively large. It seems that scenarios where using an over 5 KB decoder is
useful for defeating content encoding based would be rare.
When attacked directly, DCFR’s strength is driven by minimum fragment
size which drives the number of fragments and the resulting number of possible
permutations. It is not feasible to drop the size of a malicious payload small
enough to evade the granularity provided by DCFR in OLE ﬁles. DCER’s eva-
sion resistance lies in both the constraints imposed by the encoding techniques
employed and the number of possible encodings. It seems that the ﬂexibility
provided by encoding, especially compression, should allow suﬃcient entropy to
make defeating DCER infeasible.
8 Discussion
Not all exploits are directly impacted by DCR and some vulnerabilities may be
formulated to circumvent DCR. For example, the malicious documents foiled
through OLE ﬁle randomization could be modiﬁed to load the ﬁnal malicious
executable through a web download instead of extracting it from inside the doc-
ument ﬁle. Similarly, the OOXML documents defeated through memory content
Preventing Exploits in Microsoft Oﬃce Documents
243
location randomization could use a scripted heap spray instead of relying on
document content loaded into memory. However, these changes might cause the
exploit to run afoul of additional mitigations such as restrictions on ability to
download executables or restrictions on the execution of macros. Hence, DCR is
enabled by environmental controls such as restrictions on web downloads, Oﬃce
based protections such as disabling of scripting, and operating system controls
such as DEP. If these complementary protection mechanisms are not used, DCR
will not be as eﬀective. To the degree that security controls that drive attackers
to use raw ﬁle content become more prevalent, DCR should increase in applica-
bility, including in other ﬁle formats.
Some forms of DCR are more diﬃcult to circumvent than others because
they operate much earlier in the exploitation process where the attacker has
lower control over the system. For example, DCR that defeats heap sprays is
more resilient than that which disrupts egg hunts that extract the ﬁnal mali-
cious payload. In our evaluation, the older exploits were interrupted later in the
exploitation process while the newer exploits occur much earlier. It appears that
complimentary mitigations in the operating system (ALSR and DEP) constrain
exploit authors to use document content earlier in the exploits.
DCR is an attractive mitigation technique because it incurs a very low per-
formance impact. Transforming the document requires roughly the same com-
putational resources that are already commonly employed to perform signature
matching on both network servers and client programs. DCR incurs a very small
performance penalty when the transformed document is opened because this
mechanism leverages the ﬁle stream reassembly routines already executed by
the document reader.
Just as virtual memory mechanisms enable ASLR with little overhead, the
parsing and reassembly that enables multiple ﬁle level representations of the
same logical document allows for eﬃcient DCR. Any situation where data is
referenced indirectly, providing for multiple possible low level representations,
could potentially be used to implement exploit protections similar to DCR. We
focus on content fragmentation because the ﬁle formats studied here support a
large degree of layout changes. Content encoding randomization is only eﬀective
in a small number of Oﬃce exploits. However, other document and media for-
mats might not support the same level of data fragmentation but may support
arbitrary encoding or compression. The PDF format is a good candidate for ﬁle
level DCER to prevent raw ﬁle reﬂection based malware retrieval. There is an
opportunity for studying the limits of DCER, especially in document formats
such as PDF where there are multiple options for encoding, the encodings can
be combined for the same stream, and encoding mechanisms themselves can
be tweaked. For example, instead of using standard compression levels for the
deﬂate method, one could use probabilistic Huﬀman coding trees and random-
ized use of LZ77 data deduplication. Operating system based encoding or data
randomization techniques generally have been unsuccessful due to computational
overhead and the diﬃculty of deploying the technique which requires modifying
244
C. Smutz and A. Stavrou
system libraries as well as applications. However, DCER has the potential to be
computationally feasible because the content encoding already occurs.
DCR is likely to be employed in situations where many multiple repeated
exploitations attempts are not easy, lowering concern of probabilistic attacks.
For example, document based attacks usually require the user to take an action
to view the document. Because of how client applications are used, probabilistic
attacks requiring numerous attempts, similar to those employed against network
daemons to defeat ASLR, are not likely to be possible.
While DCR does not impact the content of the document as interpreted
by the document reader and viewed by the user, it does change the raw docu-
ment ﬁle. This could potentially impact some signature matching systems which
operate on raw ﬁles instead of interpreting as the document reader does. Also,
cryptographic signatures such as those used in signed emails would not vali-
date correctly on the transformed document. Solutions to these issues have yet
to be elaborated, but potential solutions are promising. For example, signature
matching systems can implement ﬁle parsing. Signature validation systems could
operate on an invariant logical representation of the parsed document, instead
of a potentially arbitrary ﬁle level representation.
9 Conclusions
We designed and evaluated exploit protections using transformations performed
on documents between production and consumption. Document content frag-
ment and encoding randomization are eﬀective in scrambling exploit critical
content in document ﬁles and in document reader process memory. We eval-
uated the ability to mitigate current exploits in Oﬃce 2003 (.doc) and Oﬃce
2007 (.docx) ﬁle formats using hundreds of malicious documents, demonstrating
a memory misuse exploit block rate of over 96 %. The overhead of transform-
ing documents is comparable in run time to a common anti-virus engine and the
added latency of opening a content layout randomized document is negligible for
.doc and about 3 % for .docx ﬁles. The transformed documents are functionally
equivalent to the original documents, barring the exploit protections that are
induced. The evasion resistance of content randomization is rooted in the num-
ber of raw content permutations possible. File content randomization should be
applicable to other ﬁle formats as complementary controls force attackers to use
direct access to ﬁle content to advance their attacks.
Acknowledgments. The authors would like to thank all of the reviewers for their
valuable comments and suggestions. This work is supported by Lockheed Martin Cor-
poration and the National Science Foundation Grant No. CNS 1421747 and II-NEW
1205453. Opinions, ﬁndings, conclusions and recommendations expressed in this mater-
ial are those of the authors and do not necessarily reﬂect the views of Lockheed Martin,
the NSF, or US Government.
Preventing Exploits in Microsoft Oﬃce Documents
245
References
1. 5 attackers & counting: Dissecting the “docx.image” exploit kit, December 2013.
http://www.proofpoint.com/threatinsight/posts/dissecting-docx-image-exploit-
kit-cve-exploitation.php
2. Security threat report 2014: Smarter, shadier, stealthier malware. Technical report,
Sophos Labs (2014)
3. Bhatkar, S., Sekar, R.: Data space randomization. In: Zamboni, D. (ed.) DIMVA
2008. LNCS, vol. 5137, pp. 1–22. Springer, Heidelberg (2008)
4. Blond, S.L., Uritesc, A., Gilbert, C., Chua, Z.L., Saxena, P., Kirda, E.: A look at
targeted attacks through the lense of an NGO. In: 23rd USENIX Security Sym-
posium (USENIX Security 2014), pp. 543–558, USENIX Association, San Diego
(2014)
5. Bradshaw, S.: The grey corner: omlette egghunter shellcode, October 2013. http://
www.thegreycorner.com/2013/10/omlette-egghunter-shellcode.html
6. Dhamankar, R., Paller, A., Sachs, M., Skoudis, E., Eschelbeck, G., Sarwate, A.:
Top 20 internet security risks for 2007. http://www.sans.org/press/top20 2007.php
7. Garﬁnkel, S., Farrell, P., Roussev, V., Dinolt, G.: Bringing science to digital foren-
sics with standardized forensic corpora. Digit. Investig. 6, S2–S11 (2009)
8. Hardy, S., Crete-Nishihata, M., Kleemola, K., Senft, A., Sonne, B., Wiseman,
G., Gill, P., Deibert, R.J.: Targeted threat index: characterizing and quantify-
ing politically-motivated targeted malware. In: Proceedings of the 23rd USENIX
Security Symposium (2014)
9. Kc, G.S., Keromytis, A.D., Prevelakis, V.: Countering code-injection attacks with
instruction-set randomization. In: Proceedings of the 10th ACM Conference on
Computer and Communications Security, CCS 2003, pp. 272–280. ACM, New York
(2003)
10. Kornblum, J.: Identifying almost identical ﬁles using context triggered piecewise
hashing. Digit. Investig. 3(suppl.), 91–97 (2006)
11. Li, F., Lai, A., Ddl, D.: Evidence of advanced persistent threat: a case study of
malware for political espionage. In: 2011 6th International Conference on Malicious
and Unwanted Software (MALWARE), pp. 102–109, October 2011
12. Li, H., Zhu, S., Xie, J.: RTF attack takes advantage of multiple exploits, April 2014.
http://blogs.mcafee.com/mcafee-labs/rtf-attack-takes-advantage-of-multiple-
exploits
13. Li, W.-J., Stolfo, S.J., Stavrou, A., Androulaki, E., Keromytis, A.D.: A study of
malcode-bearing documents. In: H¨ammerli, B.M., Sommer, R. (eds.) DIMVA 2007.
LNCS, vol. 4579, pp. 231–250. Springer, Heidelberg (2007)
14. Maiorca, D., Corona, I., Giacinto, G.: Looking at the bag is not enough to ﬁnd
the bomb: an evasion of structural methods for malicious PDF ﬁles detection. In:
Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and
Communications Security, ASIA CCS 2013, pp. 119–130. ACM, New York (2013)
15. Mason, J., Small, S., Monrose, F., MacManus, G.: English shellcode. In: Proceed-
ings of the 16th ACM Conference on Computer and Communications Security,
CCS 2009, pp. 524–533. ACM, New York (2009)
16. Pappas, V., Polychronakis, M., Keromytis, A.: Smashing the gadgets: hindering
return-oriented programming using in-place code randomization. In: 2012 IEEE
Symposium on Security and Privacy (SP), pp. 601–615, May 2012
17. Parkour, M.: 11,355+ malicious documents - archive for signature testing
and research, April 2011. http://contagiodump.blogspot.com/2010/08/malicious-
documents-archive-for.html
246
C. Smutz and A. Stavrou
18. Shacham, H.: The geometry of innocent ﬂesh on the bone: return-into-libc with-
out function calls (on the x86). In: Proceedings of the 14th ACM Conference on
Computer and Communications Security, CCS 2007, pp. 552–561. ACM, New York
(2007)
19. Shacham, H., Page, M., Pfaﬀ, B., Goh, E.-J., Modadugu, N., Boneh, D.: On the
eﬀectiveness of address-space randomization. In: Proceedings of the 11th ACM
Conference on Computer and Communications Security, CCS 2004, pp. 298–307.
ACM, New York (2004)
20. Smutz, C., Stavrou, A.: Malicious PDF detection using metadata and structural
features. In: Proceedings of the 28th Annual Computer Security Applications Con-
ference, ACSAC 2012, pp. 239–248. ACM, New York (2012)
21. Srndic, N., Laskov, P.: Detection of malicious PDF ﬁles based on hierarchical docu-
ment structure. In: Proceedings of the 20th Annual Network & Distributed System
Security Symposium 2013 (2013)
22. Stolfo, S.J., Wang, K., Li, W.-J.: Fileprint analysis for malware detection. In: ACM
CCS WORM (2005)
23. Szekeres, L., Payer, M., Wei, T., Song, D.: SoK: eternal war in memory. In: 2013
IEEE Symposium on Security and Privacy (SP), pp. 48–62, May 2013
24. Tabish, S.M., Shaﬁq, M.Z., Farooq, M.: Malware detection using statistical analy-
sis of byte-level ﬁle content. In: Proceedings of the ACM SIGKDD Workshop on
CyberSecurity and Intelligence Informatics, CSI-KDD 2009, pp. 23–31. ACM, New
York (2009)
25. Team, C.: Exploit notes-win32 eggs-to-omelet, August 2010. https://www.corelan.
be/index.php/2010/08/22/exploit-notes-win32-eggs-to-omelet/
26. Team, P.: PaX address space layout randomization (2003). http://pax.grsecurity.
net/docs/aslr.txt
27. Tzermias, Z., Sykiotakis, G., Polychronakis, M., Markatos, E.P.: Combining static
and dynamic analysis for the detection of malicious documents. In: Proceedings of
the Fourth European Workshop on System Security, EUROSEC 2011, pp. 4:1–4:6.
ACM, New York (2011)
28. Wei, T., Wang, T., Duan, L., Luo, J.: Secure dynamic code generation against
spraying. In: Proceedings of the 17th ACM Conference on Computer and Commu-
nications Security, CCS 2010, pp. 738–740. ACM, New York (2010)
29. Zhang, C., Wei, T., Chen, Z., Duan, L., Szekeres, L., McCamant, S., Song, D., Zou,
W.: Practical control ﬂow integrity and randomization for binary executables. In:
2013 IEEE Symposium on Security and Privacy (SP), pp. 559–573, May 2013