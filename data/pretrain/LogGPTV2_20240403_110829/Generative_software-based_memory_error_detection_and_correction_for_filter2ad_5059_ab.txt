Cyg_Scheduler_Base::currenuhread 
TABLE I: Quantitative 
THREADI and MUTEXI benchmarks. 
fault-injection 
the  syste
overhead. 
m's dependability 
significantly with only minimal 
However, 
the approach 
poses some software 
engineering 
way so that it can be  reused  in 
all possible scenario
objects  depends 
has to be implemented 
on the 
in 
s. 
scenario, 
the solution 
the mechanism 
challenges: As the set of critical 
application 
a generic 
Ideally, 
from the protected  software 
developers 
different 
level. 
operating 
to  reuse the generic  protection 
mechanism 
in 
software 
or even on the application 
systems 
component. 
This  would  allow 
2) We abandon the aforementioned 
goal to detect every 
bit flip in accessed data, but try to balance 
the trade­
off between the cost of injected checks and the gained 
error-detection 
rate. 
would be modular and completely 
separated 
A running program generates 
a sequence 
of read and 
A. Exploiting 
Object-Oriented 
Structure 
III. GENERIC OBJECT PROTECTION 
"A little 
exploited, 
tolerance; 
[ 1 8] 
applied redundancy 
redundancy, 
can yield significant  benefits 
however, 
deployed 
and 
for fault 
is pointless." 
thoughtfully 
excessive 
or inappropriately 
in our case the 
would guarantee 
its value is  always 
into the memory cell, regardle
the 
ss 
of kernel objects calls for a fault­
measure that can monitor the data flow between main 
system. 
Ideally, 
the solution 
protection 
software component -
flips that happened 
is difficult to realize, 
Fine-grained 
tolerance 
memory and the protected 
eCos operating 
that when the software  reads  data, 
same as the last value written 
of any  bit 
monitoring 
low-level 
in a virtual 
code. Running the entire  eCos 
the problem. 
one  way to approach 
However, 
very costly approach 
but also infeasible 
hardware 
platforms 
the memory-error protection 
software itself. 
of the protected 
by using an extended 
compiler 
aspect-oriented 
infrastructure 
that do not support 
that is compiled 
programming 
[ 1 2] .  
in between. 
software 
as we have to deal with 
to machine 
machine would be 
has to become an integral 
part 
This could either be achieved 
or, as we did, by means of 
for many embedded 
virtualization. 
Therefore, 
Yet,  data  flow 
hardware 
addresses. 
to a preceding 
data about the written 
store some redundant 
on memory cells with different 
each memory cell may be subject to a non­
fault, which causes one or more bit flips. 
fault, a read with 
fault will make the program use wrong data. This 
write operations 
Additionally, 
deterministic 
While a write is not susceptible 
a preceding 
might cause program failure. To avoid this, the write operation 
can additionally 
value, which can be used to detect and even correct 
the read operation.  However, 
that is occupied 
We thus follow design principle 
subsequent read and write operations 
When we  find such a group, the check can be performed 
only 
once before the 
information 
the last operation. 
long periods 
in  which 
group and the next. If a fault happens at a  random  point 
time, the 
is  very 
but have a drastically  reduced 
high. This means that  we  can 
overhead. 
doing this for every memory cell 
data structure  is 
is that there are 
one 
in 
time frame 
still detect most faults, 
the memory cell is unused  between 
about the memory cell  can  be 
of the group  and the 
redundant 
2 by identifying 
very expensive. 
that it hits  such 
an inter-group 
The underlying 
first operation 
probability 
saved once after 
with temporal 
by a critical 
locality. 
assumption 
groups of 
bit flips by 
can be reduced even more if we also merge 
In other 
memory 
memory access pattern. 
access different 
groups whose operations 
can be merged into a multi group if they overlap 
groups that share a similar 
words:  Two 
locations 
in time significantly. 
shared redundancy 
which is more efficient. 
can be performed 
The implementation 
can then calculate 
information 
over multiple 
memory cells, 
Furthermore, 
only once per multi group. 
checks and calculations 
this is not  only  a 
The overhead 
During the design o f  the mechanism, 
special 
care has to be 
taken to avoid any runtime overhead. 
all accessed memory locations 
ranges in software at runtime is out 
provide 
main design principl
es: 
a highly-efficient 
mechanism, 
with a set of monitored 
of the question. 
our solution 
address 
Thus, to 
follows 
two 
For instance, 
comparing 
The key question 
for the efficient implementation 
is how to detect the temporal 
and spatial 
of the 
mechanism 
sketched 
connections 
(design 
solution
manner, there is an implicit 
(instanc
them (methods 
principle 
: If the program  was 
es of classes) 
of read and write operations 
at compile time 
I). Object orientation 
is the most natural 
designed in an object-oriented 
connection 
between its data objects 
I) We exploit 
application 
knowledge 
at compile time 
and the program code that manipulates 
and, thus, minimize 
the number 
of runtime checks. 
of the class). We can thus approximate 
a multi 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:00 UTC from IEEE Xplore.  Restrictions apply. 
group as the sequence 
by a method of a class while it manipulates 
means that . . .  
of read and write operations 
an object. This 
performed 
•  before  a  method 
of a  critical  object  is 
executed, 
our 
mechanism 
memory fault. 
checks whether the object suffered 
from a 
•  after the execution 
of the method, redundancy 
informa­
tion about the object's state is calculated 
and stored. 
Aspect-oriented 
that we find most suitable 
programming 
for this task. 
is the implementation 
technique 
The built-in  pointer 
tj pi can be used by advice  code 
that triggered 
about the condition 
to 
in a generic 
information 
access context 
its execution 
object of the construction 
the ta rget () function, 
provides 
information 
(JoinPoint: 
much  more 
context 
way. tj p ->ta rget () yields 
the target 
or function call, respectively. 
the AspectC++ JoinPoint-API 
Besides 
[22] 
type 
information, 
especially 
static 
and the called object 
such as the type of the calling 
:That and JoinPoint: 
:Target). 
Advice definitions 
are also  generic 
in the sense that they 
use the point cut protectedClasses() to address the points of 
adaptation. 
a condition. 
class and the Cyg_ Th read class.2 
A pointcut 
In line 2 it is defined to match the Cyg_Scheduler 
is merely an alias for a reusable 
part of 
In AspectC++ 
the adaptation 
mechanism 
can not only affect 
nsions. The 
introspection 
redundantly, 
to  the 
algorit
replaced 
to support 
can be easily 
redundancy 
this feature. 
protection 
which provides 
of AspectC++, 
the injected members 
Here the protected 
type is the interface 
check () and update (). The 
hms, e.g., using Hamming code, 
the target type of the extension. For 
by three new members:  A data member 
checks (CRC), or triple-modular 
language  feature  needed 
flow - it can also inject structural  exte
the control 
advice in line 3 demonstrates 
classes are extended 
replica, which will store the object's information 
and the two member functions 
details 
of the implementation 
different 
cyclic redundancy 
(TMR). An essential 
by our protection 
mechanisms is, again, the JoinPoint type. For structural 
extensions, this built-in 
mechanism 
with information  about 
example, 
including 
it as a parameter for 
such as the JPTL: :MemberIterator. 
that a template 
means that it does not consume any runtime. 
Turing-complete 
C. Summary of the Benefits 
our approach 
based fault-tolerance 
and correct  transient 
locality 
classes in object-oriented 
achieved 
the performance 
it describes all data members of the target class 
their type. We can exploit 
by using 
generative 
of 
in member functions 
the 
V will present 
to 
software. Section 
and correction 
and increased 
mechanism, 
memory faults .  It exploits 
to note 
"runs" at compile time. This 
rate in comparison 
code size. 
error detection 
overhead 
of memory access operations 
[23] code-synthesis 
which can be used to detect 
is an economic kind 
this information 
It is a powerful, 
It is important 
metaprogram 
mechanism. 
the temporal 
of software­
In summary, 
point of view the implemen­
Due to aspect-oriented 
programming 
users. The source code of the 
does not have to be changed for 
is very convenient for 
component 
software 
a reusable 
From the software-engineering 
tation is also  interesting. 
the solution 
protected 
deploying 
to list the most critical 
design also facilitates 
models .  For example,  in 
one could  deploy 
flips in the same obj ect. Finally, 
source-to-source 
is inherently 
portable. 
transformation 
memory-error-protection 
lt suffices 
aspect. 
classes in a pointcut 
definition. The 
the selection of 
applicat
ion-specific 
fault 
a very harsh or critical 
environment 
an aspect that can deal with multiple  bit 
as the approach  is 
based on 
it 
with AspectC++ 
(weaving), 
Iljp is an abbreviation 
2 AspectC++ 
for "!his ioinQoint". 
to declare 
which means that they can be defined in a derived 
this  here 
for writing 
also allows programmers 
but in practice 
and reusable  aspect 
completely 
the listing, 
it is a  basic 
to simplify 
generic 
libraries. 
pointcUls 
aspect. We have not shown 
as "pure virtual", 
mechanism 
needed 
C++  template  metaprograms, 
B. Exploiting 
Features 
of Aspect-oriented 
Programming 
The  idea 
behind aspect-oriented 
programming 
features  that 
support 
of crosscutting 
to provide language 
plementation 
implementation 
program in a systematic way. This is achieved 
such as the following: 
that affect various 
different 
concerns, 
i.e., 
(AOP) is 
the modular im­
concerns of the 
locations 
of the 
by defining rules 
"Tn programs P, whenever 
action A." [ 1 9] 
condition 
C arises, 
perform 
of the control  flow  is  actually  performed. 
at compile time, makes sure that the demanded 
B esides 
typically 
aspect-oriented 
languages 
an introspection 
of the  rules  to  write  generic  actions 
mechanism, which allows the 
that may 
performs  a 
code 
object is executed 
(C). A 
AOP offers 
by the programmer, 
arbitrary 
programs 
code (A) whenever 
mechanism, 
and correction 
which typically 
mechanism to instrument 
As P, C, and A can be provided 
a very generic 
(P) with error detection 
a member function of a critical 
tool called aspect weaver, 
transformation 
adaptation 
this adaptation 
also  provide 
programmer 
depend on the target program' s  structure. 
language 
[20]) and C++ (AspectC++ 
on compile-time 
template 
three ingredients, 
mechanism, 
inlrospeclion 
AspectC++ is a powerful 
tolerance 
software 
[21 ]) .  The latter 
code  adaptation 
are, for instance, 
tool for writing 
extensions 
mechanism 
namely the code adaptation 
and C++'s code synlhesis 
for powerful code synthesis. 
C++ 
With these 
feature, 
the 
capabilit
ies, 
fauIt­
reusable 
mechanisms, which are woven into the protected 
component 
at compile time. 
available 
Aspect-oriented 
for Java 
is strongly 
(AspectJ 
focused 
and can exploit  the 
Figure 2 on the following 
page shows  a simplified  ver­
a 
in 
rules are  de­
mechanism written 
as in lines 3, 8 and 1 0 .  
object-protection 
definitions) that implement 
The definition 
in line 1 with 
an aspect. 
aspect starts 
sion of our generic 
the AspectC++ language. The aforementioned 
fined with the advice keyword, 
I n  AspectC++, rules (advice 
common concern are grouped  in 
of our GenericObjectProtection 
the keyword aspect. One of the benefits of aspect-oriented 
programming 
crosscutting 
the software developer
advice in lines 8 and 10  are  almost 
two rules mentioned 
page: In line 1 1,  a function check() is called before any call 
to a member function of a prolected 
update () is called after the construction 
instance 
techniques 
concerns the source code almost directly 
reflects 
For example,  the 
In line 9, a function 
of a protected 
class' 
or a member function call. 
pieces of 
of the 
implementation 
III-A on the previous 
at the end of Section 
's intention. 
translation 
over other 
a  literal 
is that for 
class. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:00 UTC from IEEE Xplore.  Restrictions apply. 
I 
2 
3 
4 
5 
6 
7 
8 
9 
to 
I I  
aspect GenericObjectProtection 
{ 
point cut protectedClasses() 
advice protectedClasses() 
=  "Cyg_Scheduler" 
; II list of critical  eCos 
: slice class { II generic class extension ("introduction") 
classes 
II "Cyg_Thread"
MemberIterator: 
v01d check ()  {JPTL:: 
MemberIte 
void update ()  { JPTL:: MemberIte 
rate r
rate r:: 
II redundancy data 
:EXEC: :SIZE]; 
:: exec (this); } I I detect/handle 
exec (this); } I I recalculate 'replica' 
e rro rs 
chr replica [JPTL: : 
} ; 
advice construction 
tjp->target() 
(protectedClasses 
() )  II 