Zigbee终端设备通常是电池供电的设备，无法形成集中式或分布式网络，但可以加入其他网络。
Zigbee终端设备通常在空闲时使接收器处于禁用状态，以节省能源，并依靠Zigbee协调器或Zigbee路由器来路由服务。充当Zigbee Coor
dinator的典型硬件设备是智能集线器，它可以提供对Internet和其他本地网络的访问。可以用作Zigbee路由器的硬件设备包括电源插座和灯泡，而门锁和运动传感器可以用作Zigbee终端设备。
## 0x03 Threat Model and Assumptions
与标准安全性文献保持一致，为Zigbee网络设置了以下安全性目标：
•真实性:未经授权的设备应该不能模仿授权的设备。
•可信性：设备应能够检测和拒绝被篡改的数据包。
• 保密性：未经授权的设备不应访问敏感信息。
• 可用性：需要时，网络服务应可用于设备。
假设最终用户及其设备在不故意降低Zigbee网络的安全性的意义上受到信任，而设备的物理安全性不在本工作范围之内。攻击者是局外人，可能使用比网络设备更强大的硬件，例如高增益定向天线和便携式计算机。
假设攻击者没有任何网络密钥的先验知识，但是他们知道默认的信任中心链接密钥，因为它是公开可用的。此外，考虑了攻击者访问安装代码子集的可能性。此外，假设在Zigbee网络的初始形成过程中没有攻击者。在这种情况下，只要网络中存在单个传统Zigbee设备或知道Zigbee
3.0设备的安装代码，就不会有违反上述安全目标的情况。最后，在以下各节中的讨论假定最终用户的Zigbee网络正在使用集中式安全模型。请注意，没有考虑使接收器处于空闲状态的Zigbee终端设备，低功耗路由器，绿色电源设备或启用信标的网络。尽管根据Zigbee
PRO 2015规范支持这些配置，但在撰写本文时，它们尚未在智能家居环境中广泛使用。
最终，攻击者的目标是从已经形成的Zigbee网络中获取网络密钥。当前，启用Zigbee的智能家居的安全性在很大程度上取决于其保密性。获得网络密钥访问权限的攻击者可以解密大多数加密的有效负载，并注入更改最终用户设备状态的命令，这违反了安全目标。
## 0x04 Testing Instrumentation
在测试平台中使用三种核心功能来分析可运行的Zigbee网络的安全性：（a）数据包嗅探，（b）数据包注入和（c）数据包阻塞。这些构成了开发更多复杂攻击的基础。例如，如上图所示，攻击者可以监视Zigbee流量，直到发送感兴趣的数据包以干扰其传输，然后再注入欺骗性的数据包。将在本节末尾演示这种攻击。
###  （1）数据包嗅探
需要的最基本的功能是捕获Zigbee数据包的能力。使用USRP N210捕获I / Q信号并在软件中执行解调。特别是，使用带有gr-ieee802-15-4模块的GNU Radio来接收IEEE 802.15.4数据包，然后使用gr-foo模块以PCAP格式存储它们。选择使用软件无线电而不是IEEE 802.15.4 USB适配器的主要原因是，它还能够分析数据包阻塞的有效性。
使用Wireshark检查了生成的PCAP文件，如果提供了相应的加密密钥，则可以解密加密的有效载荷。但是，没有广泛使用合适的配置文件。某些标头字段对于理解通信流至关重要，而着色规则则通过出现的模式简化了检查过程。为此，开发了针对Zigbee
Traffic4量身定制的Wireshark配置配置文件。对于着色规则，决定将某些数据包类型分组。例如，对影响设备成员资格和加密密钥的命令进行了分组（例如，关联请求，重新加入请求和传输密钥命令），而数据请求具有唯一的颜色，它们提供了有价值的信息关于其发送器和接收器的逻辑设备类型。下图在Wireshark的数据包列表中展示了其中一些着色规则。
###  （2）数据包注入
接下来需要的功能是注入任意数据包。 Scapy中实现了Zigbee数据包中使用的几个标头字段，这能够轻松伪造任意数据包。下图描绘了简化的GNU Radio
Companion流程图，该流程图允许使用一个天线接收和记录IEEE 802.15.4数据包，以及传输通过UDP连接与另一天线发送的伪造IEEE
802.15.4数据包。发布了用于进行本文实验的GNU Radio Companion流程图的集合。
但是，由于将数据包传输到主机然后再传输回收发器会引入延迟，因此该方法不适用于对时间要求严格的数据包的传输。结果修改了ATUSB的固件，以便从接收状态转换为发送状态并在要求的时间范围内发送伪造的数据包。例如，在2.4
GHz频带中使用IEEE 802.15.4-2011标准的O-QPSK PHY层的Zigbee设备将等待864微秒，以接收请求的MAC确认。
###  （3）封包干扰
需要的第三个功能是能够干扰合法数据包传输的能力。复制了Bloessl的选择性干扰器的实现，该干扰器有选择地阻塞所有发往特定设备的数据包。但是，此实现无法充分控制干扰条件以发起攻击。为此对ATUSB固件进行了如下修改：
•每当检测到RX_START中断时，通常在收到PHY标头后9微秒发出该中断，从帧缓冲区中检索接收到的数据包的长度。
•等待32微秒，即传输单个字节所需的时间，然后从帧缓冲区6中检索下一个字节。
•重复之前的过程，直到可以确定是否满足干扰条件为止。
•如果满足干扰条件，则使用FORCE_PLL_ON命令强制从BUSY_RX状态转换为PLL_ON状态，然后通过转换为BUSY_TX状态来传输任意数据包，其长度取决于接收数据包的长度以及已处理的字节数。
•之后转换回RX_ON状态，并等待下一个RX_START中断。
在上图中提供了对干扰器行为的直观描述。请注意，实现支持为选择性干扰器定义任意干扰条件，这能够发起概念验证攻击。
上图显示了捕获的I /
Q信号的大小，以说明如何将选择性干扰与数据包注入结合起来以发起更复杂的攻击。仅对于请求MAC确认的指定网络的数据包，才满足此实验的干扰条件。为了在干扰合法数据包的传输后能够欺骗MAC确认，干扰器在收到它时会存储其MAC序列号。然后，发送干扰数据包，同时在完成合法数据包的传输之后立即发送欺骗的MAC确认。重要的是要注意，即使Zigbee设备使用安全的APS确认来保护用户命令，MAC和NWK命令仍然依赖未处理的已固化MAC确认。
## 0x05 Security Analysis with Zigator
在本节中概述Zigator，在Python中开发的用于分析Zigbee网络的安全性的软件工具。
Zigator的主要依赖项是Scapy库。具体来说，Zigator使用Scapy库的dot15d4和zigbee层来解析捕获的Zigbee数据包并伪造新的数据包进行注入。但是，在撰写本文时，最新版本的Scapy（v2.4.3）尚未实现一些标头字段和帧类型，这对于研究至关重要。因此，分叉了Scapy并为Zigator实现了这些增强功能。
PyCryptodome是Zigator大量使用的另一个库。解析加密数据包的未加密头字段后，Zigator构造数据包的现时和经过身份验证的部分，以便在CCM模式下使用AES-128对其进行解密和验证。还使用了PyCryptodome的AES-128实现来实现Matyas-Meyer-Oseas（MMO）哈希函数。由于Zigbee使用的消息摘要的长度与AES-128的块大小相同，将位串x的消息摘要Ht填充并分成t个128位块，其迭代计算为:
其中H0 = 0并且EK（·）表示由128位密钥K参数化的AES的加密函数。MMO哈希函数在Zigbee 3.0网络中用于从其安装代码中导出Zigbee
3.0设备的预配置信任中心链接密钥。此外，MMO哈希功能还用于定义Zigbee的键哈希消息身份验证代码（HMAC）得出某些受APS层保护的数据包的加密密钥，这也已在Zigator中实现。
Zigator将捕获的数据包的几乎所有可能的标头字段存储在SQLite数据库中，这种方法能够深入了解Zigbee流量的性质，因为它能够执行详细的SQL查询。
Zigator还提供了功能丰富的命令行界面，该界面使安全分析人员可以可视化其数据并发送伪造的数据包以通过UDP进行注入。另外，Zigator可以使用Scikit-learn库训练决策树分类器，以区分不同的数据包类型。随后介绍实验设置，并使用Zigator分析Zigbee网络的安全性。
## 0x06 Experimental Setup