title:SIDE: Isolated and efficient execution of unmodified device drivers
author:Yifeng Sun and
Tzi-cker Chiueh
SIDE: Isolated and Efﬁcient Execution of Unmodiﬁed Device Drivers
Yifeng Sun
Stony Brook University
PI:EMAIL
Tzi-cker Chiueh
Stony Brook University
and Industrial Technology Research Institute
PI:EMAIL
Abstract—Buggy device drivers are a major threat to the
reliability of their host operating system. There have been
myriad attempts to protect the kernel, but most of them either
required driver modiﬁcations or incur substantial performance
overhead. This paper describes an isolated device driver
execution system called SIDE (Streamlined Isolated Driver
Execution), which focuses speciﬁcally on unmodiﬁed device
drivers and strives to avoid changing the existing kernel code as
much as possible. SIDE exploits virtual memory hardware to
set up a device driver execution environment that is compatible
with existing device drivers and yet is fully isolated from the
kernel. SIDE is able to run an unmodiﬁed device driver for a
Gigabit Ethernet NIC and the latency and throughput penalty
is kept under 1% when augmented with a set of performance
optimizations designed to reduce the number of protection
domain crossings between an isolated device driver and the
kernel.
Keywords-fault tolerance; device driver isolation;
I. INTRODUCTION
In modern operating systems, device drivers typically
enjoy the same full privilege as the kernel, and as a result,
a bug in a device driver may lead to crashing of the
kernel and thus the entire system. Following the principle of
least privilege, many previous research efforts attempted to
isolate device drivers from the kernel while minimizing the
performance overhead (throughput, latency and CPU usage)
associated with such isolation. One proposal is to run a
device driver in a user-level process, and transform every call
from the kernel to functions in the device driver as a remote
upcall into the corresponding user-level process. Although
this approach protects the kernel from buggy device drivers,
its performance overhead could be rather signiﬁcant, because
of excessive context switching and/or protection domain
crossing. Moreover, this approach may require modiﬁcations
to existing device drivers so that they could run in a user-
level process. Such modiﬁcations are difﬁcult or impossible
for legacy closed-source drivers. A similar approach is
adopted by some modern hypervisors such as Xen [14],
which executes native device drivers in a driver domain that
is in a separate protection domain from the hypervisor itself,
and thus prevents astray drivers from bringing down the
hypervisor. However, no modiﬁcation to the device drivers
is needed because the hypervisor virtualizes the hardware
abstraction layer.
In this paper, we propose a new Safe and Isolated device
Driver Execution model called SIDE, which runs an unmod-
iﬁed device driver in a different privilege level but in the
same address space as the kernel. More concretely, to load a
device driver, SIDE carves out a region of the kernel address
space, assigns a user-level privilege to it, and conﬁnes the
driver’s execution to this address space region. In contrast,
conventional device drivers run in the same address space
and privilege level as the kernel, and user-level device drivers
run in a different address space and privilege level from
the kernel. Compared with user-level device drivers, SIDE
greatly simpliﬁes the interrupt processing ﬂow because the
interrupt processing routines of device drivers are mapped
in the kernel address space and thus always accessible. Most
importantly, SIDE could run existing device drivers without
requiring any modiﬁcations to them.
SIDE provides an execution environment that prohibits
device drivers from accessing the kernel’s code and data
directly. Instead, every access from an isolated device driver
to the kernel’s code is transparently intercepted and checked,
in a way similar to how the kernel checks system calls
issued by user-level processes. Through this interception
mechanism, SIDE is able to protect the kernel from bugs
in device drivers that manifest themselves in the form of
random data/code accesses to the kernel address space or
invalid arguments that accompany with calls to exposed
kernel service functions. The SIDE model can also protect
the kernel from bugs in device drivers that eventually exhaust
the CPU or memory resource with timeout mechanism and
detailed resource accounting. To reduce the performance
overhead associated with protection domain crossing, the
SIDE prototype virtualizes a small number of kernel data
structures and functions to reduce the number of times the
device driver has to enter the kernel.
II. RELATED WORK
A. Separate Driver Protection Domain
One way to prevent a device driver crashing from bringing
down the whole kernel is to put the device driver in a
separate protection domain from the kernel. Microkernel
systems such as L4 Linux [31] take this approach. The
performance penalty of L4 is between 5% and 10% for prac-
tical applications. MINIX 3 [29, 30] is a POSIX-conformant
UNIX-like operating system that implements critical system
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:49 UTC from IEEE Xplore.  Restrictions apply. 
components such as device drivers as user-level applications,
and its performance degradation is reported to be around
10%.
To isolate device drivers from monolithic kernels such as
Linux, some researchers [9] proposed implementing device
drivers as user-level applications and showed that a user-
level 10 Gbps NIC driver could achieve 93% of the perfor-
mance of its in-kernel counterpart while consuming only 7%
more CPU. This approach requires porting existing device
drivers to the user level. Similarly, the Microdrivers archi-
tecture [10] separates a device driver into a performance-
critical part and a non-performance-critical part, and runs
the non-performance-critical part at the user level while
keeping the performance-critical part inside the kernel. The
performance overhead of Microdrivers is close to zero. [36]
proposed a similar driver architecture as the Microdrivers.
The Microdrivers architecture is further improved by Decaf
[11], which implements the user-level driver part using Java
to take advantage of the language’s type and memory safety.
SUD [40] executes device drivers in untrusted user pro-
cesses in the user-mode Linux (UML) infrastructure. In-
kernel proxy drivers are used to handle requests from the
kernel and feed device inputs to the kernel. To avoid the
overhead of context switch, message queues are used to
pass requests between kernel threads for proxy drivers and
user processes that run real device drivers. The network
performance of this device driver architecture is close to
native Linux, but the CPU usage is more than two times in
the worse case.
To prevent a driver crashing from bringing down the
hypervisor and thus all VMs running on top of it, some
hypervisors such as Xen use special driver domains to run
device drivers but with poor performance [32, 33, 34].
TwinDrivers [15] is designed to improve the performance
of device drivers in Xen by semi-automatically partitioning
device drivers into a performance-critical part and a non-
performance-critical part, and runs the performance-critical
part inside the hypervisor and the non-performance-critical
part
in the driver domain. The in-hypervisor driver can
execute in any domain’s context via a technique called
Software Virtual Memory mechanism. Another work [16]
also tries to prevent service disruption in virtual machines
when the driver domain crashes, by setting up a backup
driver domain. In case the main driver domain dies, the
backup driver domain takes over and services incoming
requests.
B. Intercept and Prevent
Another method to isolate a device driver from the kernel
is to intercept the interactions between the device driver and
the kernel in order to prevent driver faults from crashing the
kernel. Nooks [7] adds memory protection to the in-kernel
device drivers in Linux. A device driver is wrapped in a
light-weight protection domain, and executes with the privi-
lege to read the kernel memory space but only write its own
stack, heap and other device memory regions. The Nooks
isolation manager intercepts all communications between the
kernel and device drivers. Three types of device failures
are detected by Nooks isolation manager: illegal memory
accesses, illegal parameters to kernel functions, and temporal
failures. Nooks recovers from a device driver failure by
recording all resources held by device driver. When a device
driver failure is detected, the isolation manager releases the
resources and then tries to restart the device driver. Because
Nooks needs to switch to a new page table upon a context
switch, the performance overhead of page table reloading
becomes non-negligible as the frequency of context switches
increases. In addition, Nooks cannot prevent a device driver
from calling arbitrary kernel functions or executing arbitrary
privileged instructions.
BGI [42] is a software fault isolation technique designed
to isolate unmodiﬁed windows drivers. A compiler plug-in is
developed to generate and insert checking code into drivers,
including an interception library that validates the interac-
tions between the driver and the kernel. Like SIDE, drivers
in BGI are put in a different protection domain but share
the same address space as the kernel. The checking code
controls how drivers can access every memory byte. BGI
supports a simple recovery mechanism when a driver fails
by unloading and reloading the failed driver. For network
device driver, the performance overhead is maximum 10%,
and the CPU usage is increased between 8% to 16%.
SIDE also belongs to this category. It exploits virtual
memory protection hardware to strictly isolate the execution
of device drivers from the kernel, at the same time mini-
mize the performance overhead of isolated driver execution
because it does not require page table switching thus TLB
ﬂushing in control transfers between the kernel and the
drivers. Finally, a SIDE driver could directly process a
hardware interrupt regardless of the execution context at the
point of interrupt.
C. New Driver Programming Model
Two main reasons behind buggy drivers are complicated
driver execution infrastructure and low-level programming
language. Efforts were made to provide friendlier driver
execution infrastructure and safer programming language so
as to reduce errors/mistakes made by driver writers to the
minimum. Dingo [21] is a new device driver architecture
that simpliﬁes the interactions between the kernel and device
drivers and is capable of detecting protocol violations at
run time. It allows device driver writers to concentrate on
the main task of a driver, i.e., controlling the hardware, by
using the following two improvements. First, Dingo reduces
the degree of concurrency by replacing the multi-threaded
model with the event-based model, and thus eliminates
most concurrency-related driver defects without impacting
the driver performance. Second, Dingo provides a formal
2
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:49 UTC from IEEE Xplore.  Restrictions apply. 
language, called Tingu, to describe the software protocols
between a device driver and the kernel, and help developers
to avoid implementation errors.
SafeDrive [24] aims to improve device driver reliability by
adding features to the C programming language. By adding
annotations in the header ﬁles, every memory pointer is
augmented with size information. At both compile and run
time, every pointer used in memory access is checked if it
exceeds the bound of the pointed object. SafeDrive records
changes made to the system state by intercepting the kernel
API functions, and restores the system state after a driver
failure according to the recorded state changes.
LXFI [41] isolates device drivers by checking the ac-
cesses of modules to complex kernel APIs according to
programmer-speciﬁed integrity rules in the form of capa-
bilities and annotations. A compiler plug-in reads in these
annotations to generate code to grant, check and transfer
capabilities between kernel modules. Under LXFI, the TCP
throughput is not affected but the UDP throughput is de-
graded by 35%, and CPU usage is increased by more than
2.2 times.
Termite [25] improves device driver reliability by auto-
matically generating a device driver from a formal speciﬁ-
cation including a device speciﬁcation, a device-class spec-
iﬁcation and an OS speciﬁcation. The formal speciﬁcation
of a device driver is written in a high-level language and is
therefore not as error-prone as developing the device driver
itself. Though the code size of device drivers generated by
Termite is 2~4 times more than that of manually written
drivers, their run-time performance is comparable.
Laddie [35] introduced a type-safe language that enables
driver writers to create IO interfaces between a driver and its
device so that these IO interfaces cannot be easily misused.
The active device driver architecture [39], similar to Dingo,
deals with synchronization issues as well as provides a clear
driver control ﬂow by assigning a dedicated thread to a
device driver. This driver thread receives requests from the
kernel via message passing in an event-based way.
D. Driver Testing and Analysis
SFI (Software fault isolation) [17] enables safe execution
of untrusted binary modules in the kernel address space
under the kernel privilege, without relying on any hardware
protection mechanisms. SFI enforces safety checks including
memory safety (i.e., driver cannot write to unauthorized
kernel memory) and control transfer safety (i.e., the module
can only access a constrained set of kernel functions and
memory locations). Because SFI operates at the binary code
level, it can be applied to drivers written in C programming
language or assembly languages without requiring access to
their source code.
Recognizing that a major cause of driver failure is the
complexity of Windows driver API prevents driver writers
from fully mastering the rules of how to properly use the
Figure 1. Views of kernel address space for the isolated device driver and
the rest of kernel.
driver API, Static Driver Veriﬁer tool (SDV) [28] is designed
to ﬁnd API errors in C programs. An evaluation study
showed that SDV reported 206 defects in 126 drivers, and
among the 65 defects analyzed, 53 of them are true errors
while 12 of them are false errors.
Herder et al. [22] isolates device drivers by enforcing
least authority and reﬁning the driver by extensive software-
implemented-fault-injection testing. Carburizer [37] ana-
lyzes driver source code to ﬁnd and ﬁx problems in which
device drivers doesn’t handle unexpected device fault. DDT
[38] is a system that combines virtualization with a spe-
cialized form of symbolic execution to thoroughly test
device drivers. The execution traces associated with runs in
which bugs appear are recorded to help developers to better
understand and remove bugs in the drivers.
III. EFFICIENT AND ISOLATED DRIVER EXECUTION
SIDE executes a device driver in the same address space
as the kernel but in a different protection domain from the
kernel, and thus effectively isolates the device driver from
the kernel. To determine if a code or data access from an
isolated device driver to the kernel is allowed, every such
access is intercepted, analyzed, and proxied if it is allowed
to go through. Thus the behavior of an isolated device
driver is under strict control. Accordingly, to properly adjust
the execution mode and context when the kernel calls an
isolated device driver, every such control transfer must be
intercepted; otherwise the driver code may get the kernel
privilege and a driver crash could bring down the entire
kernel. On the other hand, pure data accesses from the kernel
to an isolated device driver could safely proceed without
interception. However, before using pointers passed from
a driver, the kernel should validate them before actually
dereferencing them to make sure that they are legal pointers.
To achieve the isolated execution model above, SIDE
loads a device driver into a memory region of the kernel
address space, for example the 3-4GB region of a 32-bit
3
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:39:49 UTC from IEEE Xplore.  Restrictions apply. 
The driver function R ﬁnishes and control is re-
turned to the kernel, again through a protection fault because
it is a Ring 3 to Ring 0 transition.
After analyzing the cause of the exception,
the
protection fault handler H calls a trampoline kernel function
T, which then resets the processor privilege level and passes
R’s return result.
T returns to the original kernel function calling R
via an IRET instruction.
When M is done, the system call is completed and
control goes back to the user-level process P.
Functions in a device driver are typically invoked by the
kernel, as in the case of Figure 2, or by a hardware interrupt.
When a hardware interrupt occurs, control ﬁrst goes to a
generic interrupt handler (H) ﬁrst, and then follows the
transition path 3-4-11 in Figure 2, where R is replaced by
the device driver’s corresponding interrupt handler.
When an isolated device driver directly accesses the
kernel’s data/code or calls a kernel service function, an
exception occurs and the VM exception handler in SIDE
checks if the intended data/code access is authorized and
further veriﬁes the validity of input arguments used in kernel
service function calls. In the case that a driver directly
accesses kernel data, control follows the transition path 5-6-
7-8-9-10 in Figure 2, except that instead of a kernel service
function (K), a kernel proxy function is called to retrieve the
target kernel data on behalf of the calling driver. However,
this requires SIDE to decode and emulate memory access
instructions of the X86 architecture.
In addition to the fault isolation, SIDE is also capable of
unloading a failed device driver, cleaning up its side effects
left in the kernel, and reloading a new instance of the device
driver to resume service. Currently, SIDE is able to detect
and isolate the following driver failures:
• Illegal accesses to kernel data structures
• Illegal invocation of kernel code
• Invalid input arguments passed with kernel service
function calls
• Illegal execution of privileged instructions
• Memory access errors (e.g. null pointers)