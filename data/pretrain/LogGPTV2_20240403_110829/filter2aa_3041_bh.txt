 "bytes" 
07 
 "fmt" 
08 
 "os" 
09 ) 
10 
11 // main 是应用程序的入口
12 func main() { 
13 
// 创建一个 Buffer 值，并将一个字符串写入 Buffer
14 
// 使用实现 io.Writer 的 Write 方法
15 
 var b bytes.Buffer 
16 
b.Write([]byte("Hello "))
17 
18 
// 使用 Fprintf 来将一个字符串拼接到 Buffer 里
19 
// 将 bytes.Buffer 的地址作为 io.Writer 类型值传入
20 
 fmt.Fprintf(&b, "World!") 
21 
22 
// 将 Buffer 的内容输出到标准输出设备
23 
// 将 os.File 值的地址作为 io.Writer 类型值传入
24 
b.WriteTo(os.Stdout)
25 } 
运行代码清单 8-37 中的程序会得到代码清单 8-38 所示的输出。 
代码清单 8-38  listing37.go 的输出 
Hello World! 
这个程序使用了标准库的 3 个包来将"Hello World!"输出到终端窗口。一开始，程序在
第 15 行声明了一个 bytes 包里的 Buffer 类型的变量，并使用零值初始化。在第 16 行创建了
一个 byte 切片，并用字符串"Hello"初始化了这个切片。byte 切片随后被传入 Write 方法，
成为 Buffer 类型变量里的初始内容。 
第 20 行使用 fmt 包里的 Fprintf 函数将字符串"World!"追加到 Buffer 类型变量里。
让我们看一下 Fprintf 函数的声明，如代码清单 8-39 所示。 
代码清单 8-39  golang.org/src/fmt/print.go 
// Fprintf 根据格式化说明符来格式写入内容，并输出到 w
// 这个函数返回写入的字节数，以及任何遇到的错误
func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) 
8.4  输入和输出
197
需要注意 Fprintf 函数的第一个参数。这个参数需要接收一个实现了 io.Writer 接口类
型的值。因为我们传入了之前创建的 Buffer 类型值的地址，这意味着 bytes 包里的 Buffer
类型必须实现了这个接口。那么在 bytes 包的源代码里，我们应该能找到为 Buffer 类型声明
的 Write 方法，如代码清单 8-40 所示。 
代码清单 8-40  golang.org/src/bytes/buffer.go 
// Write 将 p 的内容追加到缓冲区，如果需要，会增大缓冲区的空间。返回值 n 是
// p 的长度，err 总是 nil。如果缓冲区变得太大，Write 会引起崩溃…
func (b *Buffer) Write(p []byte) (n int, err error) { 
b.lastRead = opInvalid
 m := b.grow(len(p)) 
 return copy(b.buf[m:], p), nil 
} 
代码清单 8-40 展示了 Buffer 类型的 Write 方法的当前版本的实现。由于实现了这个方法，
指向 Buffer 类型的指针就满足了 io.Writer 接口，可以将指针作为第一个参数传入
Fprintf。在这个例子里，我们使用 Fprintf 函数，最终通过 Buffer 实现的 Write 方法，
将"World!"字符串追加到 Buffer 类型变量的内部缓冲区。 
让我们看一下代码清单 8-37 的最后几行，如代码清单 8-41 所示，将整个 Buffer 类型变量
的内容写到 stdout。 
代码清单 8-41  listing37.go：第 22 行到第 25 行 
22 // 将 Buffer 的内容输出到标准输出设备
23 
// 将 os.File 值的地址作为 io.Writer 类型值传入
24 
b.WriteTo(os.Stdout)
25 } 
在代码清单 8-37 的第 24 行，使用 WriteTo 方法将 Buffer 类型的变量的内容写到 stdout
设备。这个方法接受一个实现了 io.Writer 接口的值。在这个程序里，传入的值是 os 包的
Stdout 变量的值，如代码清单 8-42 所示。 
代码清单 8-42  golang.org/src/os/file.go 
var ( 
 Stdin  = NewFile(uintptr(syscall.Stdin), "/dev/stdin") 
 Stdout = NewFile(uintptr(syscall.Stdout), "/dev/stdout") 
 Stderr = NewFile(uintptr(syscall.Stderr), "/dev/stderr") 
) 
这些变量自动声明为 NewFile 函数返回的类型，如代码清单 8-43 所示。 
代码清单 8-43  golang.org/src/os/file_unix.go 
// NewFile 返回一个具有给定的文件描述符和名字的新 File
func NewFile(fd uintptr, name string) *File { 
 fdi := int(fd) 
198
第 8 章  标准库 
 if fdi < 0 { 
 return nil 
 } 
 f := &File{&file{fd: fdi, name: name}} 
 runtime.SetFinalizer(f.file, (*file).close) 
 return f 
} 
就像在代码清单 8-43 里看到的那样，NewFile 函数返回一个指向 File 类型的指针。这就
是 Stdout 变量的类型。既然我们可以将这个类型的指针作为参数传入 WriteTo 方法，那么这
个类型一定实现了 io.Writer 接口。在 os 包的源代码里，我们应该能找到 Write 方法，如代
码清单 8-44 所示。 
代码清单 8-44  golang.org/src/os/file.go 
// Write 将 len(b)个字节写入 File
// 这个方法返回写入的字节数，如果有错误，也会返回错误
// 如果 n != len(b)，Write 会返回一个非 nil 的错误
func (f *File) Write(b []byte) (n int, err error) { 
 if f == nil { 
 return 0, ErrInvalid 
 } 
 n, e := f.write(b) 
 if n < 0 { 
 n = 0 
 } 
 if n != len(b) { 
 err = io.ErrShortWrite 
 } 
 epipecheck(f, e) 
 if e != nil { 
 err = &PathError{"write", f.name, e} 
 } 
 return n, err 
} 
没错，代码清单 8-44 中的代码展示了 File 类型指针实现 io.Writer 接口类型的代码。让
我们再看一下代码清单 8-37 的第 24 行，如代码清单 8-45 所示。 
代码清单 8-45  listing37.go：第 22 行到第 25 行 
22 
// 将 Buffer 的内容输出到标准输出设备
23 
// 将 os.File 值的地址作为 io.Writer 类型值传入
24 
b.WriteTo(os.Stdout)
25 } 
可以看到，WriteTo 方法可以将 Buffer 类型变量的内容写到 stdout，结果就是在终端
窗口上显示了"Hello World!"字符串。这个方法会通过接口值，调用 File 类型实现的 Write
方法。 
这个例子展示了接口的优雅以及它带给语言的强大的能力。得益于 bytes.Buffer 和
os.File 类型都实现了 Writer 接口，我们可以使用标准库里已有的功能，将这些类型组合在
一起完成工作。接下来让我们看一个更加实用的例子。 
8.4.3  简单的 curl 
在 Linux 和 MacOS（曾用名 Mac OS X）系统里可以找到一个名为 curl 的命令行工具。这
个工具可以对指定的 URL 发起 HTTP 请求，并保存返回的内容。通过使用 http、io 和 os 包，
我们可以用很少的几行代码来实现一个自己的 curl 工具。
让我们来看一下实现了基础 curl 功能的例子，如代码清单 8-46 所示。
代码清单 8-46  listing46.go 
01 // 这个示例程序展示如何使用 io.Reader 和 io.Writer 接口 
02 // 写一个简单版本的 curl 
03 package main 
04 
05 import ( 
06 
 "io" 
07 
 "log" 
08 
 "net/http" 
09 
 "os" 
10 ) 
11 
12 // main 是应用程序的入口 
13 func main() { 
14 
 // 这里的 r 是一个响应，r.Body 是 io.Reader 
15 
 r, err := http.Get(os.Args[1]) 
16 
 if err != nil { 
17 
 log.Fatalln(err) 
18 
 } 
19 
20 
 // 创建文件来保存响应内容 
21 
 file, err := os.Create(os.Args[2]) 
22 
 if err != nil { 
23 
 log.Fatalln(err) 
24 
 } 
25 
 defer file.Close() 
26 
27 
 // 使用 MultiWriter，这样就可以同时向文件和标准输出设备 
28 
 // 进行写操作 
29 
 dest := io.MultiWriter(os.Stdout, file) 
30 
31 
 // 读出响应的内容，并写到两个目的地 
32 
 io.Copy(dest, r.Body) 
33 
 if err := r.Body.Close(); err != nil { 
34 
 log.Println(err) 
35 
 } 
36 } 
200
第 8 章  标准库 
代码清单 8-46 展示了一个实现了基本骨架功能的 curl，它可以下载、展示并保存任意的
HTTP Get 请求的内容。这个例子会将响应的结果同时写入文件以及 stdout。为了让例子保持
简单，这个程序没有检查命令行输入参数的有效性，也没有支持更高级的选项。 
在这个程序的第 15 行，使用来自命令行的第一个参数来执行 HTTP Get 请求。如果这个参
数是一个 URL，而且请求没有发生错误，变量 r 里就包含了该请求的响应结果。在第 21 行，我
们使用命令行的第二个参数打开了一个文件。如果这个文件打开成功，那么在第 25 行会使用
defer 语句安排在函数退出时执行文件的关闭操作。 
因为我们希望同时向 stdout 和指定的文件里写请求的内容，所以在第 29 行我们使用 io
包里的 MultiWriter 函数将文件和 stdout 整合为一个 io.Writer 值。在第 33 行，我们使
用 io 包的 Copy 函数从响应的结果里读取内容，并写入两个目的地。由于有 MultiWriter 函
数提供的值的支持，我们可使用一次 Copy 调用，将内容同时写到两个目的地。 
利用 io 包里已经提供的支持，以及 http 和 os 包里已经实现了 io.Writer 和 io.Reader
接口类型的实现，我们不需要编写任何代码来完成这些底层的函数，借助已经存在的功能，将注
意力集中在需要解决的问题上。如果我们自己的类型也实现了这些接口，就可以立刻支持已有的
大量功能。 
8.4.4  结论 
可以在 io 包里找到大量的支持不同功能的函数，这些函数都能通过实现了 io.Writer 和
io.Reader 接口类型的值进行调用。其他包，如 http 包，也使用类似的模式，将接口声明为
包的 API 的一部分，并提供对 io 包的支持。应该花时间看一下标准库中提供了些什么，以及它
是如何实现的——不仅要防止重新造轮子，还要理解 Go 语言的设计者的习惯，并将这些习惯应
用到自己的包和 API 的设计上。 
8.5  小结 
标准库有特殊的保证，并且被社区广泛应用。
使用标准库的包会让你的代码更易于管理，别人也会更信任你的代码。
100 余个包被合理组织，分布在 38 个类别里。
标准库里的 log 包拥有记录日志所需的一切功能。
标准库里的 xml 和 json 包让处理这两种数据格式变得很简单。
io 包支持以流的方式高效处理数据。
接口允许你的代码组合已有的功能。
阅读标准库的代码是熟悉 Go 语言习惯的好方法。
第 9 章  测试和性能 
本章主要内容 
编写单元测试来验证代码的正确性
使用 httptest 来模拟基于 HTTP 的请求和响应
使用示例代码来给包写文档
通过基准测试来检查性能
作为一名合格的开发者，不应该在程序开发完之后才开始写测试代码。使用 Go 语言的测试
框架，可以在开发的过程中就进行单元测试和基准测试。和 go build 命令类似，go test 命
令可以用来执行写好的测试代码，需要做的就是遵守一些规则来写测试。而且，可以将测试无缝
地集成到代码工程和持续集成系统里。 
9.1  单元测试 
单元测试是用来测试包或者程序的一部分代码或者一组代码的函数。测试的目的是确认目标
代码在给定的场景下，有没有按照期望工作。一个场景是正向路经测试，就是在正常执行的情况
下，保证代码不产生错误的测试。这种测试可以用来确认代码可以成功地向数据库中插入一条工
作记录。 
另外一些单元测试可能会测试负向路径的场景，保证代码不仅会产生错误，而且是预期的错
误。这种场景下的测试可能是对数据库进行查询时没有找到任何结果，或者对数据库做了无效的
更新。在这两种情况下，测试都要验证确实产生了错误，且产生的是预期的错误。总之，不管如
何调用或者执行代码，所写的代码行为都是可预期的。 
在 Go 语言里有几种方法写单元测试。基础测试（basic test）只使用一组参数和结果来测试
一段代码。表组测试（table test）也会测试一段代码，但是会使用多组参数和结果进行测试。也
可以使用一些方法来模仿（mock）测试代码需要使用到的外部资源，如数据库或者网络服务器。
这有助于让测试在没有所需的外部资源可用的时候，模拟这些资源的行为使测试正常进行。最后，
9
第 9 章  测试和性能 
在构建自己的网络服务时，有几种方法可以在不运行服务的情况下，调用服务的功能进行测试。 
9.1.1  基础单元测试 
让我们看一个单元测试的例子，如代码清单 9-1 所示。 
代码清单 9-1  listing01_test.go 
01 // 这个示例程序展示如何写基础单元测试 
02 package listing01 
03 
04 import ( 
05 
 "net/http" 
06 
 "testing" 
07 ) 
08 
09 const checkMark = "\u2713" 
10 const ballotX = "\u2717" 
11 
12 // TestDownload 确认 http 包的 Get 函数可以下载内容 
13 func TestDownload(t *testing.T) { 
14 
 url := "http://www.goinggo.net/feeds/posts/default?alt=rss" 
15 