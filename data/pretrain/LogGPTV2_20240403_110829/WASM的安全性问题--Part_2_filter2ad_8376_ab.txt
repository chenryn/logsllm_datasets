    # hello-world-inline.c
    #include 
    int main() 
    {
        EM_ASM(alert('Hello, world!'););
        return 0;
    }
在此代码上运行C预处理器会发现它调用了一个名为emscripten_asm_const_int()的函数:
    [...]
    # 2 "hello-world-inline.c" 2
    int main() 
    {
        ((void)emscripten_asm_const_int("alert('Hello, world!');" ));
        return 0;
    }
emscripten_asm_const_int()和相关函数的原型存在于em_asm.h中，这是emscripten.h包含的头文件。em_asm.h包含函数原型和广泛的宏逻辑，用于在给定宏和内联JavaScript的情况下确定所需的函数名。
尽管预处理的输出看起来与emscripten_run_script()类似，但是最终的JavaScript实现是不同的。
Emscripten在其输出JavaScript文件中创建函数，包括内联代码，而不是使用eval()。这些函数通过一种命名方案来标定函数名。对于hello-world-inline.c示例，hello-world-inline.js文件具有以下内联alert()代码:
    var ASM_CONSTS = [function() { alert('Hello, world!'); }];
    function _emscripten_asm_const_i(code) 
    { 
        return ASM_CONSTS[code]();
    }
可以看出，此函数作为提供给WebAssembly的导入对象，而WebAssembly文本则描述了对此类导入的期望:
    (import "env" "_emscripten_asm_const_i" (func (;13;) (type 1)))
这种组合的结果是一个比使用emscripten_run_script()时更安全的结构。攻击者可能能够使用他们选择的参数调用这些内联代码派生函数，跨站点脚本不是固有的风险，因为不能确定eval()的存在。虽然开发人员可以使用内联JavaScript调用他们自己的eval()，或者触发执行脚本的其他函数，但不能保证仅通过使用这些宏来执行JavaScript的参数执行。
尽管默认情况下比emscripten_run_script()更安全，但是谨慎理解使用内联JavaScript宏可以轻松地转换为利用危险的函数指针覆盖目标，因为安全性的提升源于脚本执行时缺少动态运行时的数据。如果开发人员手动引入和exec()级别类似的函数
-- 类似功能，从参数中获取数据并执行，那么它的存在将是危险的，就像存在emscripten_run_script()是危险的一样。
最典型的演示是使用带有内联JavaScript的eval()
编译最简单的C程序可以显示默认情况下Emscripten无条件地传递给WebAssembly环境的函数。
    int main() 
    { 
        return 0;
    }
在使用文本格式编译上述C程序后，可以在文件透附近看到以下类型和导入的函数:
    (module
        (type  (;0;) (func (param i32 i32 i32) (result i32)))
        (type  (;1;) (func (param i32) (result i32)))
        (type  (;2;) (func (result i32)))
        (type  (;3;) (func (param i32)))
        (type  (;4;) (func (param i32 i32) (result i32)))
        (type  (;5;) (func (param i32 i32)))
        (type  (;6;) (func))
        (type  (;7;) (func (param i32 i32 i32 i32) (result i32)))
     [...]
        (import "env" "enlargeMemory" (func (;0;) (type 2)))
        (import "env" "getTotalMemory" (func (;1;) (type 2)))
        (import "env" "abortOnCannotGrowMemory" (func (;2;) (type 2)))
        (import "env" "abortStackOverflow" (func (;3;) (type 3)))
        (import "env" "nullFunc_ii" (func (;4;) (type 3)))
        (import "env" "nullFunc_iiii" (func (;5;) (type 3)))
        (import "env" "___lock" (func (;6;) (type 3)))
        (import "env" "___setErrNo" (func (;7;) (type 3)))
        (import "env" "___syscall140" (func (;8;) (type 4)))
        (import "env" "___syscall146" (func (;9;) (type 4)))
        (import "env" "___syscall54" (func (;10;) (type 4)))
        (import "env" "___syscall6" (func (;11;) (type 4)))
        (import "env" "___unlock" (func (;12;) (type 3)))
        (import "env" "_emscripten_memcpy_big" (func (;13;) (type 0)))
    [...]
与源C程序相比，导入函数列表较大，源程序执行返回作为其唯一的操作过程。这些函数将出现在Emscripten使用默认编译设置生成的所有WebAssembly模块中。可能会调用其中任何一个来代替具有匹配签名的另一个函数，以绕过条件，拒绝服务或以其他方式将程序状态更改为攻击者的优势。最有用的功能包括直接的JavaScript互操作性
- 跨站点脚本的路径。
Emscripten实现系统调用，来简化将软件移植到WebAssembly的过程。这些系统调用在JavaScript中实现，并提供不同程度的近似。例如，当C代码在Linux系统上调用printf()时，它会调用write(2)系统调用。
但是，由于WebAssembly环境中缺少此系统调用，因此必须提供该系统调用。Emscripten的printf()版本包括将字符打印到控制台，并在Web环境中打印到HTML页面上显示的模拟终端以及JavaScript控制台。
由于系统调用在传统操作系统环境中通过内核呈现，因此应审查默认的模拟WebAssembly系统调用来确认可利用性。
Emscripten工具链提供的系统调用实现是:
  * __syscall6: close
  * __syscall54: ioctl
  * __syscall140: llseek
  * __syscall146: writev
在这些系统调用中，它们都不允许通过eval()直接执行JavaScript，或者通过document.write()等方法编辑DOM或调用元素的innerHTML()方法。然而，writev()的系统调用可能会通过不安全的方式映射到Emscripten的Module
['print']的函数。如果将Module ['print']替换为执行其他操作的代码，则Emscripten的源代码非常适合用于HTML编码字符:
    var Module = {
        preRun: [], postRun: [], 
        print: (function() {
            var element = document.getElementById('output');
            if (element) element.value = ''; // clear browser cache 
            return function(text) {
                if (arguments.length > 1)
                    text = Array.prototype.slice.call(arguments).join(' ');
                // These replacements are necessary if you render to raw HTML
                //text = text.replace(/&/g, "&");
                //text = text.replace(//g, ">"); 
                //text = text.replace('\n', '', 'g'); 
                console.log(text);
                if (element) {
                    element.value += text + "\n";
                    element.scrollTop = element.scrollHeight; // focus on bottom 
                }
            };
        })(),
    [...]
此函数中的元素是文本。直接设置其值不允许利用跨站点脚本，因此该实现默认是安全的。
滥用syscall146或默认情况下可用的其他系统调用可能会导致特定的安全问题，但这些函数并不容易访问任意JavaScript执行的路径。
除了系统调用之外，Emscripten默认还为WebAssembly程序提供了几个其他功能:
  * enlargeMemory()
  * getTotalMemory()
  * abortOnCannotGrowMemory()
  * abortStackOverflow()
  * nullFunc_ii()
  * nullFunc_iiii()
  * nullFunc_vi()
  * ___lock()
  * ___setErrNo()
  * unlock()
  * _abort()
  * _emscripten_memcpy_big()
与系统调用实现函数一样，这些导入都不是JavaScript执行的直接路径，尽管其中一些可能在WebAssembly中很强大。
### 4.3 服务器端远程执行代码(Server-side Remote Code Execution)
间接调用在Node.js中也是可行的。考虑之前的示例，将原Payload替换为使用console.log()的Payload，以便它在Node的stdout中可见。
    char *payload = "console.log('>>>"  // 16 bytes "Server side code" // + 16
                    " execution!');//"  // + 16; '//' lets eval() work
                    "                "  // + 16 to fill .msg = 64
                    "  "                // + 2 for alignment = 66 
                    "\x40\x00"          // + 2 bytes to fill .msg_len = 68
                    "\x05\x00\x00\x00"; // + 4 bytes to overwrite .out = 72
将更改的C程序编译为JavaScript模块(emcc -o fn_ptr_code_exec.js fn_ptr_xss.c)  
并使用Node(node fn_ptr_code_exec.js)运行它并观察以下输出:
    &communicate: 0x4 
    &emscripten_run_script: 0x5 
    Porting my program to WASM! >>>Server side code execution!
正如Payload，这里的安全影响大于浏览器中的安全影响; 我们有一个服务器端代码执行，而不是跨站点脚本。
## 5\. 结论
本文提供了WebAssembly的基本介绍，并检查了开发人员使用它可能带来的实际安全风险。Emscripten是目前最流行的WebAssembly编译器工具链，它在Web页面的上下文中提供了一种新的C/C++实现。虽然在Emscripten编译的WASM环境中无法实现许多本机漏洞和攻击，但开发人员不能允许WASM声称的内存安全性使其陷入虚假的安全感。在本节中，我们为希望将WebAssembly集成到其产品中的开发人员提供了最佳实践和安全注意事项的基本概述。
### 5.1 Emscripten开发团队
  * **处理用户污染输出** : 在浏览器级别，如果JavaScript引擎可以检测并编码任何看起来来自WASM的输出，那么本文中表示的许多攻击都将被阻止。然而，这将是非常困难的，因为它可能需要通过JavaScript引擎携带受WASM污染的信号。此外，浏览器必须理解正在注入的WASM污染的上下文并进行适当的转义/编码。逻辑上更可行的方案是从C/C++引用DOM时向开发人员发出警告。
  * **HeapHardening** : 当前基于dlmalloc的实现应该被替换为具有安全性的方案，例如Blink的PartitionAlloc。
### 5.2 Emscripten开发人员
  * **遵循最佳C/C++编程规则** : 开发人员应该意识到WASM仍处于开发的最初阶段，并且在未来几年内可能会发现更多问题。为本地编译建立的所有规则都是相关的，并且在编译为WebAssembly时应遵循这些规则。在WASM中和在本机代码中一样严肃对待C语言安全问题。
  * **避免emscripten_run_script** : 从WASM中动态执行JavaScript是一种危险的模式。如果存在类型混淆或溢出到函数指针等问题，那么这些函数的存在将允许漏洞利用代码直接执行JavaScript。
  * **使用Clang的CFI编译时** ，使用Clang的Control Integrity flag(-fsanitize = c)可以防止某些函数指针操作问题。
  * **使用优化** 可以删除一些可以用于涉及函数指针操作的漏洞的编译器的构建功能。
### 5.3 未来的研究
在网页上运行本地代码的实现打开了一个漏洞利用场景的新世界。虽然本文为WebAssembly漏洞搜索奠定了基础，但仍存在许多进一步的研究机会。
  * **Emscripten的堆实现** : 逆向工程Emscripten的堆实现将解决许多关于堆元数据损坏，double free漏洞，use after free漏洞以及许多其他基于堆的本地漏洞。
  * **定时攻击和侧信道** : 由于硬件侧通道攻击最近风靡一时，留意有多少额外Wasm利用可以应用于涉及严格时序要求的攻击。此外，使用Wasm可能会引入新的计时攻击和侧信道。
  * **线程，条件竞争等** : 我们无法研究在Wasm上进行多种程序化编程的性能。竞争条件，检查时间/使用时间(TOCTOU)以及C代码中存在的类似错误可能会延续到Wasm编译中。目前尚不清楚Wasm的实施本身是否会在这方面存在缺陷。
## 小结
本部分介绍了一些WebAssembly独特的利用方式，以及该团队的一些后续研究方向。
我也会跟进WebAssembly方面的相关文章以及相关研究。也希望对WebAssembly有兴趣的师傅们可以来带带我，共同交流。