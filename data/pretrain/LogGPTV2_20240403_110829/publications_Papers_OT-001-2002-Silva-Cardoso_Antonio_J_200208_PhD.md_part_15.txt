Web services are “self-contained, self-describing modular applications that can be
published, located, and invoked across the Web” (Tidwell 2000) and therefore are a
modern alternative to the specification of workflow tasks. Since they are self-described,
the interoperation among independently developed Web services is facilitated.
Traditional workflow tasks, such as non-transactional, transactional, and human tasks
(Kochut, Sheth et al. 1999) can easily be represented or encapsulated with Web services .
As with WSMF (Fensel and Bussler 2002), our approach to e-workflow composition
is not dependent on the method chosen to specify Web services. Therefore, any of the
specification languages mentioned above can be employed. For the prototype that we
have developed we have selected the DAML-S specification; more precisely, we use the
Service Profile ontology.
147
The service profile ontology describes the functionality of a Web service. It tells
“what the service does” (Ankolekar, Burstein et al. 2001) and is employed to advertise
Web services availability and capability. We have decided to use DAML-S because in the
same way we did with workflow tasks, we need to establish associations among the
inputs and outputs parameters of a Web service with ontological concepts. Since the
DAML-S specification semantically describes Web services, there is an explicit
association of Web services interface with concepts. In Figure 4-4 we give a partial
example of the specification of a Web service using DAML-S.
- 
- 
PreferredClass
- 
- 
TripItinerary
Figure 4-4 – Web service specification using DAML-S
One of the service inputs is the PreferredClass, and one of the outputs is the
TripItinerary. Both of them refer to concepts defined in the ontology itinerary-ont.daml.
When using a declarative specification language such as WSDL, there is also the
need to associate each input and output with an ontological concept so that they can be
semantically described. This may require the extension of the Web service specification
language to include additional tags which will be employed to specify the ontology and
the concepts associated with input and output parameters.
148
4.4.4 OPERATIONAL METRICS
The operational metrics of tasks and Web services are described using a QoS model. For
us, QoS represents the quantitative and qualitative characteristics of an e-workflow
application which are necessary to achieve a set of initial requirements. E-workflow QoS
addresses the operational issues of workflows, rather than workflow process functions.
Quantitative characteristics can be evaluated in terms of concrete measures such as
workflow execution time, cost, reliability, etc. Qualitative characteristics specify the
expected services offered by the system such as security and faul-ttolerance mechanisms.
QoS should be seen as an integral aspect of workflows, and therefore it should be
integrated with tasks and Web services specifications .
While the DAML-S specification that we use includes constructs to specify quality
of service parameters, such as quality guarantees, quality rating, and degree of quality,
the specification does not provide a detailed set of classes and properties to represent
quality of service metrics. The model needs to be extended to allow for a precise
characterization of each dimension in order to permit the implementation of algorithms
for the automatic computation of QoS metrics of processes based on their sub-processes’
QoS metrics. Therefore, we have developed our own model.
We have investigated relevant work to determine which dimensions would be
relevant to compose a more suitable QoS model for the automatic computation of QoS
metrics.
Based on previous studies (Garvin 1988; Stalk and Hout 1990; Rommel 1995), as
well as our experience in the workflow domain, we have constructed a model composed
of the following dimensions: time, cost, reliability, and fidelity (Cardoso, Sheth et al.
2002). Since fidelity is subject to judgments and perceptions, we have decided to omit its
specification and analysis in this paper. Nevertheless, a thorough study can be found in
(Cardoso, Miller et al. 2002).
149
While in this paper we do not discuss the computation of QoS metrics,
comprehensive solutions to the difficult problems encountered in synthesizing QoS for
composite services are discussed in detail in Cardoso, Sheth et al. (2002). This paper
presents a stochastic workflow reduction algorithm and discusses the use of simulation
analysis (Miller, Cardoso et al. 2002) for computing aggregate QoS properties step-by-
step.
4.4.4.1 QOS DIMENSIONS
Based on our model, we have we have developed an ontology for the specification of
QoS metrics (for tasks and Web services). This information will allow for the discovery
of Web services based on operational metrics and includes the following dimensions :
Time is a common and universal measure of performance. Task response time (T)
corresponds to the time a workflow instance takes to be processed by a task. The task
response time can be broken down into two major components: delay time and process
time. Delay time (DT) refers to the non-value-add time needed in order for an instance to
be processed by a task. Process time (PT) is the time a workflow instance spends at a task
while being processed; in other words, it corresponds to the time a task needs to process
an instance.
Cost (C) represents the cost associated with the execution of workflow tasks. During
workflow design, prior to workflow instantiation, and during workflow execution it is
necessary to estimate the cost of its execution to guarantee that financial plans are
followed. Task cost is the cost incurred when a task or Web service is executed; it can be
broken down into two major components: enactment cost and task realization cost. The
enactment cost (EC) is the cost associated with the management of the workflow system
and workflow instances monitoring. The task realization cost (RC) is the cost associated
with the runtime execution of the task.
150
Task Reliability (R) corresponds to the likelihood that the components will perform
when the user demands them. It is a function of the failure rate. Each task structure has an
initial state, an execution state, and two distinct terminating states. One of the states
indicates that a task has failed or was aborted, while the other state indicates that a task is
done or committed (Krishnakumar and Sheth 1995). This QoS dimension provides
information concerning the relationship between the number of times the state
done/committed is reached, and the number of times the failed/aborted state is reached.
To describe task reliability we follow a discrete-time modeling approach. Discrete-time
models are adequate for systems that respond to occasional demands, such as database
systems. We use the stable reliability model proposed by Nelson( 1973), for which the
reliability of a task t is R(t) = 1 - failure rate.
4.4.4.2 DIMENSIONS CHARACTERIZATION
For each dimension, the description of the operational runtime behavior of a task is
composed of two classes of information: basic and distributional.
The basic class associates with each task’s QoS dimension the minimum value,
average value, and maximum value the dimension can take. For example, the cost
dimension corresponds to the minimum, average, and maximum cost associated with the
execution of a task.
The second class, the distributional class, corresponds to the specification of a
constant or of a distribution function (such as Exponential, Normal, Weibull, or Uniform)
which statistically describes task behavior at runtime. The values specified in the basic
class are typically employed by mathematical methods in order to compute workflow
QoS metrics, while the distributional class information is used by simulation systems to
compute workflow QoS.
Table 4-1 shows an example of the specification of QoS metrics for a task from a
genomic workflow (Cardoso, Miller et al. 2002).
151
Table 4-1 – Task QoS for a manual task
Basic class Distributional class
Min value Avg value Max value Dist. Function
Time 192 196 199 Normal(196, 1)
Cost 576 576 576 576.0
Reliability 100% 100% 100% 1.0
4.5 THE E-WORKFLOW COMPOSITION PROCESS
The composition of e-workflows differs slightly from the design of traditional workflows.
A typical scenario of the composition process is as follows. The designer composes an e-
workflow for which several traditional workflow tasks (e.g. human, non-transactional,
and transactional tasks) and Web service tasks have already been placed and
interconnected on the canvas. Tasks with a realization are called grounded tasks (GT).
When the designer wishes to add a Web service to the workflow, he starts by creating a
service template (ST) – see section 4.5.1 for the formal specification of a ST – which
indicates his intention to extend the functionality of the workflow. The ST will be
employed later to find an appropriate Web service.
Once a ST is created, it is sent to the Web service discovery module, which returns a
set of service object (SO) references that are ranked according to their degree of
similarity with the service template. Services can be ranked according to a syntactical,
operational, or semantic perspective. The designer then selects the most appropriate Web
service to accomplish his objectives (section 4.7 shows an example of the SOs retrieved
from the discovery process). The selection automatically associates a realization with the
152
ST, causing it to change its state to a grounded task. Additionally, a set of data mapping
is presented to the designer suggesting a possible interconnection among the newly
created task interfaces and the grounded task interfaces.
A ST has five sections that need to be specified:
• The name of the Web service to be found,
• Its textual description,
• Its operational metrics,
• The set of outputs parameters from the grounded tasks that will be connected to
SO inputs, and
• The set of input parameters from the grounded tasks that a SO will be connected
to.
The construction of a ST is illustrated in Figure 4-5. The outputs of the GTs Get
Conference Information and Get User Information (Date, Duration, City, User Name,
and Address) are employed to construct the outputs of the ST. The input of the GT Hotel
Reservation (Itinerary) is employed to construct the inputs of the ST. The user manually
sets the name, description, and QoS model of the Web service to be found.
153
Integration
Outputs
Inputs Name + Description + QoS Model
Date
GT Duration
Outputs
City
Inputs
Outputs Inputs
Get Conference
Information
ST Itinerary GT
Inputs Outputs
User Name Hotel Reservation
GT
Replace ST
Address
with SO
Get User
Information
Use ST to Semantic
discover SO Integration
Discovery
SO
SO
Inputs SO Outputs
Figure 4-5 – GT, ST, and SO structures
4.5.1 E-WORKFLOW INTEGRATION COMPONENTS
The composition process described in the previous section involved the manipulation of
three distinct structures: GT, ST, and SOs. In this section, we formally describe each
structure.
Grounded Tasks
Grounded tasks (GT) have a realization and contribute to the achievement of the e-
workflow goal. A GT is formally defined as follows :
GT(t) = 
Where t, QoS, Is, and Os are the name of the task, its QoS, a set of input parameters,
and a set of output parameters, respectively. The QoS specification associated with a GT
154
is to be used by algorithms to synthesize the QoS of workflows based on the QoS metrics
of the tasks and the Web services that compose the workflow (Cardoso, Miller et al.
2002).
For example, in our initial scenario, the tasks Conference Registry, Get User
Information, and Hotel Reservation are grounded tasks. The GT Conference Registry has
the following structure:
GT (“Get Conference Information”) = 
Please note that the inputs and outputs in this example are associated with
ontological concepts.
Service Template
When a designer needs to search for a Web service to be integrated into an e-workflow, a
service template (ST) is created. A service template represents the intent of the designer
to extend the functionality of an e-workflow, bringing the process closer to its ultimate
goal. STs do not have a realization associated with them; they represent a structure or
blueprint that the designer uses to indicate the characteristics of the Web service that is
needed. A ST is specified as:
ST = 
Five fields exist: sn, sd, QoS, Os, and Is. The sn variable corresponds to the name of
the Web service to be found. We will see later that the name specified does not have to
syntactically match exactly with the name of the Web services to be discovered. Thes d,
qos, Os, and Is fields correspond to a textual description, the operational metrics, and a
set of output and input parameters, respectively, of the Web service to be found.
155
The set of output parameters corresponds to the set of the output parameters of the
tasks connected to a ST, and the set of input parameters corresponds to the set of the
input parameters of the tasks the ST will be connected to. Lets us indicate the GTs to be
connected to a ST with the symbol >st, and the GTs that the ST connects to with st gt˛
Service Object
The service object is a structure that holds the description of a real Web service. As stated
earlier, we specified Web services semantically. A SO is formall ydescribed as follows:
SO = 
The structure is composed of five concepts: sn, sd, QoS, Is, and Os. The fields of a
SO have the same meaning as the ones defined in a ST. This makes sense because SOs
will be matched against STs.
156
4.6 MATCHING ST AND SO
The Web service discovery and integration process is carried out by a key operation: the
match function. The matching step is dedicated to finding correspondences between a
service template and a service object. During the discovery phase, the match function is
employed to successively match a ST against a set of SOs, which are possibly advertised
in a registry (e.g. UDDI). The SOs are ranked based on their degree of similarity and
integration with the ST. The user may then select the Web service with the highest degree
of similarity and manually solve the schematic differences not already solved by the
system.
We have constructed a system which implements the following idea. Given a service
template and a set of service objects, the system examines the services and tries to find
similarities between a ST and each SO. This is done using syntactic, operational, and
semantic information as a way to increase the precision of the match. The system (1)
evaluates the degree of similarity between a ST and a SO and (2) provides the means for
the interoperability of services through the analysis and suggestion of connections
between the SO interfaces that maximize the degree of integration with the ST.
Syntactic Similarity: The syntactic similarity of a ST and a SO is based on their service
names and service descriptions. At this stage, only syntactic information is taken into
account, since both fields are simply expressed using a set of words, without attaching
any tag of concepts to each one.
Operational Similarity: Syntactic and semantic information allows for the selection of
Web services based on their functionality, but without accounting for operational metrics.
The operational similarity of a ST and a SO is calculated based on the metrics specifide
157
in their QoS model. The purpose is to determine how close two Web services are, as
based on their operational capabilities.
Semantic Similarity: Purely syntactical methods that treat terms in isolation from their
contexts are insufficient since they deal with syntactic but not with semantic
correspondences, and since users may express the same concept in different ways( Sheth