# HTTP认证方案

## 作者
h0ld1rs, Reclu3e

## 前言
由于HTTP协议是开放的，任何人都可以调用。因此，如果接口不希望被随意调用，就需要进行访问权限控制，只有经过认证的用户才能调用API。本文在郁离歌师傅的指导下，参考RFC文档对常用的HTTP认证方案进行了归纳总结。

## Form认证
Form认证是最常见的一种认证方式，通常与Cookie和Session结合使用。大多数Web站点都采用这种认证方式。用户在登录页面填写用户名和密码后，服务端验证通过会将`sessionId`返回给浏览器，浏览器将其保存在Cookie中。因为HTTP是无状态的，所以浏览器使用Cookie来保存`sessionId`。下次客户端发送请求时会包含`sessionId`值，服务端发现`sessionId`存在并已认证过则允许资源访问。

需要注意的是：Cookie+Session 认证属于Form认证，但Form认证并不属于HTTP标准验证。

### 示例
```http
POST /login HTTP/1.1
Host: example.com
Content-Type: application/x-www-form-urlencoded
username=user&password=pass

HTTP/1.1 200 OK
Set-Cookie: sessionId=abc123
```

## Basic认证 (RFC7617)
Basic认证是一种基于客户端类型的简单认证方案。它将凭据作为用户名和密码对，并使用Base64编码传输。

### 特点
- **响应**：未授权 (Unauthorized) 
- **请求头**：`Authorization: Basic <base64-encoded-credentials>`

### 示例
```http
HTTP/1.1 401 Unauthorized
Date: Mon, 04 Feb 2014 16:50:53 GMT
WWW-Authenticate: Basic realm="WallyWorld"

GET /protected-resource HTTP/1.1
Host: example.com
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
```

### 缺陷
1. 未指定用于将用户密码转换为八位字节序列的字符串编码方案。
2. 大多数实现依赖于特定环境编码（如ISO-8859-1, UTF-8）。
3. 为了向后兼容，规范保留了未定义的默认编码，只要其与US-ASCII兼容。
4. 假冒服务器容易骗过认证，诱导用户输入用户名和密码。
5. 即使密码被强加密，第三方仍可通过重放攻击获取用户名和密码。

### 实现
- **Apache**
  ```apache
  AuthType Basic
  AuthName "Access to the staging site"
  AuthUserFile /path/to/.htpasswd
  Require valid-user
  ```

- **Nginx**
  ```nginx
  location /status {
      auth_basic "Access to the staging site";
      auth_basic_user_file /etc/nginx/.htpasswd;
  }
  ```

## Bearer Token认证 (RFC6750)
Bearer Token认证用于验证客户端身份。客户端向服务器提供一个Token，该Token通常由JSON数据格式组成并通过哈希算法生成，称为JWT（Json Web Token）。

### 特点
- **请求头**：`Authorization: Bearer <token>`
- **适用场景**：分布式站点的单点登录（SSO）场景

### 示例
```http
GET /resource HTTP/1.1
Host: server.example.com
Authorization: Bearer mF_9.B5f-4.1JqM
```

### 缺陷
1. 使用保留的查询参数名称，与URI命名空间冲突。
2. 如果受保护资源请求未包含认证凭证或无效的访问令牌，资源服务器必须包含`WWW-Authenticate`响应头字段。
3. 必须使用Bearer方案，并且必须后跟一个或多个`auth-param`值。
4. 回显的错误信息容易被攻击者利用。
5. 攻击者可能伪造或修改现有令牌的内容，导致不正确的权限访问。

### 防范措施
1. 授权服务器应在令牌中包含预期接受者的身份。
2. 授权服务器必须实现TLS，并使用提供机密性和完整性保护的密码套件。
3. 不记名令牌不得存储在可明文发送的cookie中。
4. 加强前后端的检验。

## Digest认证 (RFC7616)
Digest认证基于简单的质询-响应范例，增加了SHA-256和SHA-512/256算法支持。

### 认证过程
1. 客户端请求受保护资源。
2. 服务器返回401状态码和`WWW-Authenticate`响应头，包含nonce和realm。
3. 客户端根据算法生成摘要，将摘要放入`Authorization`请求头中重新发送请求。

### 示例
```http
POST http://127.0.0.1:8087/digest/auth HTTP/1.1
Accept: application/json
Authorization: Digest username="user", realm="digest#Realm", nonce="MTU1NTMzMDg2MDA4MDo5MTdiMGI4ZmIwMDc2ZTgzOWU5NzA4YzEyZWEwNzlmMg==", uri="/digest/auth", response="dcd98b7102dd2f0e8b11d0f600bfb0c093"
```

### 缺陷
1. 使用保留的查询参数名称，与URI命名空间冲突。
2. 如果受保护资源请求未包含认证凭证或无效的访问令牌，资源服务器必须包含`WWW-Authenticate`响应头字段。
3. 必须使用Digest方案，并且必须后跟一个或多个`auth-param`值。
4. 回显的错误信息容易被攻击者利用。
5. 攻击者可能伪造或修改现有令牌的内容，导致不正确的权限访问。

通过以上几种认证方案的介绍，希望能帮助读者更好地理解和应用HTTP认证机制。