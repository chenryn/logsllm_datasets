title:HyperService: Interoperability and Programmability Across Heterogeneous
Blockchains
author:Zhuotao Liu and
Yangxi Xiang and
Jian Shi and
Peng Gao and
Haoyu Wang and
Xusheng Xiao and
Bihan Wen and
Yih-Chun Hu
HyperService: Interoperability and Programmability
Across Heterogeneous Blockchains
Zhuotao Liu1,2 Yangxi Xiang3
Jian Shi4 Peng Gao5 Haoyu Wang3
Xusheng Xiao4,2 Bihan Wen6 Yih-Chun Hu1,2
1University of Illinois at Urbana-Champaign
3Beijing University of Posts and Telecommunications
5University of California, Berkeley
2HyperService Consortium
4Case Western Reserve University
6Nanyang Technological University
PI:EMAIL
ABSTRACT
Blockchain interoperability, which allows state transitions across
different blockchain networks, is critical functionality to facili-
tate major blockchain adoption. Existing interoperability protocols
mostly focus on atomic token exchanges between blockchains. How-
ever, as blockchains have been upgraded from passive distributed
ledgers into programmable state machines (thanks to smart con-
tracts), the scope of blockchain interoperability goes beyond just
token exchanges. In this paper, we present HyperService, the first
platform that delivers interoperability and programmability across
heterogeneous blockchains. HyperService is powered by two inno-
vative designs: (i) a developer-facing programming framework that
allows developers to build cross-chain applications in a unified pro-
gramming model; and (ii) a secure blockchain-facing cryptography
protocol that provably realizes those applications on blockchains.
We implement a prototype of HyperService in approximately 35,000
lines of code to demonstrate its practicality. Our experiments show
that (i) HyperService imposes reasonable latency, in order of sec-
onds, on the end-to-end execution of cross-chain applications; (ii)
the HyperService platform is scalable to continuously incorporate
new large-scale production blockchains.
CCS CONCEPTS
• Security and privacy → Distributed systems security; Secu-
rity protocols.
KEYWORDS
Blockchain Interoperability; Smart Contract; Cross-chain dApps
ACM Reference Format:
Zhuotao Liu1,2 Yangxi Xiang3
Jian Shi4 Peng Gao5 Haoyu Wang3
and Xusheng Xiao4,2 Bihan Wen6 Yih-Chun Hu1,2. 2019. HyperService:
Interoperability and Programmability Across Heterogeneous Blockchains.
In 2019 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’19), November 11–15, 2019, London, United Kingdom. ACM, New York,
NY, USA, 18 pages. https://doi.org/10.1145/3319535.3355503
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3355503
1 INTRODUCTION
Over the last few years, we have witnessed rapid growth of sev-
eral flagship blockchain applications, such as the payment system
Bitcoin [53] and the smart contract platform Ethereum [27]. Since
then, considerable effort has been made to improve the perfor-
mance and security of individual blockchains, such as more effi-
cient consensus algorithms [3, 8, 32, 43], improving transaction
rate by sharding [20, 44, 51, 60] and payment channels [37, 40, 52],
enhancing the privacy for smart contracts [29, 39, 45], and reducing
their vulnerabilities via program analysis [24, 46, 50].
As a result, in today’s blockchain ecosystem, we see many dis-
tinct blockchains, falling roughly into the categories of public, pri-
vate, and consortium blockchains [6]. In a world deluged with iso-
lated blockchains, interoperability is power. Blockchain interoper-
ability enables secure state transitions across different blockchains,
which is invaluable for connecting the decentralized Web 3.0 [26].
Existing interoperability proposals [21, 36, 38, 61] mostly center
around atomic token exchange between two blockchains, aim-
ing to eliminate the requirement of centralized exchanges. How-
ever, since smart contracts executing on blockchains have trans-
formed blockchains from append-only distributed ledgers into pro-
grammable state machines, we argue that token exchange is not the
complete scope of blockchain interoperability. Instead, blockchain
interoperability is complete only with programmability, allowing
developers to write decentralized applications executable across
those disconnected state machines.
We recognize at least two categories of challenges for simul-
taneously delivering programmability and interoperability. First,
the programming model of cross-chain decentralized applications
(or dApps) is unclear. In general, from developers’ perspective,
it is desirable that cross-chain dApps could preserve the same
state-machine-based programming abstraction as single-chain con-
tracts [59]. This, however, raises a virtualization challenge to ab-
stract away the heterogeneity of smart contracts and accounts on
different blockchains so that the interactions and operations among
those contracts and accounts can be uniformly specified when writ-
ing cross-chain dApps.
Second, existing token-exchange oriented interoperability proto-
cols, such as atomic cross-chain swaps (ACCS) [5], are not generic
enough to realize cross-chain dApps. This is because the “executa-
bles” of those dApps could contain more complex operations than
token transfers. For instance, our example dApp in § 2.3 invokes
a smart contract using parameters obtained from smart contracts
Figure 1: The architecture of HyperService.
deployed on different blockchains. The complexity of this opera-
tion is far beyond mere token transfers. In addition, the executa-
bles of cross-chain dApps often contain transactions on different
blockchains, and the correctness of dApps requires those trans-
actions to be executed with certain preconditions and deadline
constraints. Another technical challenge is to securely coordinate
those transactions to enforce dApp correctness in a fully decentral-
ized manner with zero trust assumptions.
To meet these challenges, we propose HyperService, the first
platform for building and executing dApps across heterogeneous
blockchains. At a very high level, HyperService is powered by two
innovative designs: a developer-facing programming framework for
writing cross-chain dApps, and a blockchain-facing cryptography
protocol to securely realize those dApps on blockchains. Within this
programming framework, we propose Unified State Model (USM),
a blockchain-neutral and extensible model to describe cross-chain
dApps, and the HSL, a high-level programming language to write
cross-chain dApps under the USM programming model. dApps
written in HSL are further compiled into HyperService executables
which shall be executed by the underlying cryptography protocol.
UIP (short for universal inter-blockchain protocol) is the cryptog-
raphy protocol that handles the complexity of cross-chain execution.
UIP is (i) generic, operating on any blockchain with a public trans-
action ledger, (ii) secure, the executions of dApps either finish with
verifiable correctness or abort due to security violations, where mis-
behaving parties are held accountable, and (iii) financially atomic,
meaning all involved parties experience almost zero financial losses,
regardless of the execution status of dApps. UIP is fully trust-free,
assuming no trusted entities.
Contributions. To the best of our knowledge, HyperService is
the first platform that simultaneously offers interoperability and
programmability across heterogeneous blockchains. Specifically, we
make the following major contributions in this paper.
(i) We propose the first programming framework for develop-
ing cross-chain dApps. The framework greatly facilitates dApp
development by providing a virtualization layer on top of the un-
derlying heterogeneous blockchains, yielding a unified model and
a high-level language to describe and program dApps. Using our
framework, a developer can easily write cross-chain dApps without
implementing any cryptography.
(ii) We propose UIP, the first generic blockchain interoperabil-
ity protocol whose design scope goes beyond cross-chain token
exchanges. Rather, UIP is capable of securely realizing complex
cross-chain operations that involve smart contracts deployed on
heterogeneous blockchains. We express the security properties of
UIP via an ideal functionality FUIP and rigorously prove that UIP
realizes FUIP in the Universal Composability (UC) framework [28].
(iii) We implement a prototype of HyperService in approximately
35,000 lines of code, and evaluate the prototype with three cate-
gories of cross-chain dApps. Our experiments show that the end-to-
end dApp execution latency imposed by HyperService is in the order
of seconds, and the HyperService platform has sufficient capacity
to continuously incorporate new production blockchains.
2 HYPERSERVICE OVERVIEW
2.1 Architecture
As depicted in Figure 1, architecturally, HyperService consists of
four components. (i) dApp Clients are the gateways for dApps to
interact with the HyperService platform. When designing HyperSer-
vice, we intentionally make clients to be lightweight, allowing both
mobile and web applications to interact with HyperService. (ii) Ver-
ifiable Execution Systems (VESes) conceptually work as blockchain
drivers that compile the high-level dApp programs given by the
dApp clients into blockchain-executable transactions, which are
the runtime executables on HyperService. VESes and dApp clients
employ the underlying UIP cryptography protocol to securely exe-
cute those transactions across different blockchains. UIP itself has
two building blocks: (iii) the Network Status Blockchain (NSB) and
(iv) the Insurance Smart Contracts (ISCs). The NSB, conceptually,
is a blockchain of blockchains designed by HyperService to provide
an objective and unified view of the dApps’ execution status, based
on which the ISCs arbitrate the correctness or violation of dApp
executions in a trust-free manner. In case of exceptions, the ISCs
financially revert all executed transactions to guarantee financial
atomicity and hold misbehaved entities accountable.
2.2 Universal State Model
A blockchain, together with smart contracts (or dApps) executed
on the blockchain, is often perceived as a state machine [59]. We
desire to preserve the similar abstraction for developers when writ-
ing cross-chain dApps. Towards this end, we propose Unified State
Model (USM), a blockchain-neutral and extensible model for de-
scribing state transitions across different blockchains, which in
essential defines cross-chain dApps. USM realizes a virtualization
layer to unify the underlying heterogeneous blockchains. Such
virtualization includes: (i) blockchains, regardless of their imple-
mentations (e.g., consensus mechanisms, smart contract execution
Phase A. HSL Program CompilationClientVEST1T3T2T4……A.1 HSL ProgramA.2 Executable GraphA.3 Insurance Smart Contractif CorrectExecution:   Pay service feeelse:   Revert effective fund   Enforce accountabilityPhase B. Cross-Chain ExecutionPhase C. Insurance ClaimClientVESState ChannelBN ABN BBN CB.2 Post T3B.1 Post T1B.3 T2B.4 T4Network Status Blockchain (NSB)ActionPoAActionOverall ArchitectureHyperServiceZoom-InPoAdAppClientsVESesBlockchainNetworksBN ABN BBN Z…Universal State ModelBN ABN BBN Z…HSL ProgramHSL ProgramHSL ProgramHSL ExecutablesCross-chain ExecutionReachabilityClientVESSecurityAttestationsSecurityAttestationsNSB or any mutual-agreed BNTable 1: Example of entities, operations and dependencies in USM
Entity Kind
account
contract
Attributes
address, balance, unit
address, state variables[], interfaces[], source
Operation Kind
payment
invocation
Attributes
from, to, value, exchange rate
interface, parameters[const, Contract.SV, ...], invoker
Dependency Kind
precondition
deadline
environment, programming languages, and so on), are abstracted
as objects with public state variables and functions; (ii) developers
program dApps by specifying desired operations over those objects,
along with the relative ordering among those operations, as if all
the objects were local to a single machine.
Formally, USM is defined as M = {E, P, C} where E is a set
of entities, P is a set of operations performed over those entities,
and C is a set of constraints defining the dependencies of those
operations. Entities are to describe the objects abstracted from
blockchains. All entities are conceptually local to M, regardless
of which blockchains they are obtained from. Entities come with
kinds, and each entity kind has different attributes. The current
version of USM defines two concrete kinds of entities, accounts
and contracts, as tabulated in Table 1 (we discuss the extensions of
USM in § 6.1). Specifically, an account entity is associated with a
uniquely identifiable address, as well as its balance in certain units.
A contract entity, besides its address, is further associated with a
list of public attributes, such as state variables, callable interfaces,
and its source code deployed on blockchains. Entity attributes are
crucial to enforce the security and correctness of dApps during
compilation, as discussed in § 2.3.
An operation in USM defines a step of computation performed
over several entities. Table 1 lists two kinds of operations in USM: a
payment operation that describes the balance updates between two
account entities at a certain exchange rate; an invocation operation
that describes the execution of a method specified by the interface
of a contract entity using compatible parameters, whose values
may be obtained from other contract entities’ state variables.
Although operations are conceptually local, each operation is
eventually compiled into one or more transactions on different
blockchains, whose consensus processes are not synchronized. To
honor the possible dependencies among events in distributed com-
puting [47], USM, therefore, defines constraints to specify depen-
dencies among operations. Currently, USM supports two kinds of
dependencies: preconditions and deadlines, where an operation can
proceed only if all its preconditioning operations are finished, and
an operation must be finished within a bounded time interval after
its dependencies are satisfied. Preconditions and deadlines offer
desirable programming abstraction for dApps: (i) preconditions en-
able developers to organize their operations into a directed acyclic
graph, where the state of upstream nodes is persistent and can be
used by downstream nodes; (ii) deadlines are crucial to ensure the
forward progress of dApp executions.
2.3 HyperService Programming Language
To demonstrate the usage of USM, we develop HSL, a programming
language to write cross-chain dApps under USM.
2.3.1 An Introductory Example for HSL Programs
Financial derivatives are among the most commonly cited blockchain
applications. Many financial derivatives rely on authentic data feed,
i.e., an oracle, as inputs. For instance, a standard call-option contract
1 # Import the source code of contracts written in different languages.
2 import (“broker.sol”, “option.vy”, “option.go”)
3 # Entity definition.
4 # Attributes of a contract entity are implicit from its source code.
5 account a1 = ChainX::Account(0x7019..., 100, xcoin)
6 account a2 = ChainY::Account(0x47a1..., 0, ycoin)
7 account a3 = ChainZ::Account(0x61a2..., 50, zcoin)
8 contract c1 = ChainX::Broker(0xbba7...)
9 contract c2 = ChainY::Option(0x917f...)
10 contract c3 = ChainZ::Option(0xefed...)
11 # Operation definition.
12 op op1 invocation c1.GetStrikePrice() using a1
13 op op2 payment 50 xcoin from a1 to a2 with 1 xcoin as 0.5 ycoin
14 op op3 invocation c2.CashSettle(10, c1.StrikePrice) using a2
15 op op4 invocation c3.CashSettle(5, c1.StrikePrice) using a3
16 # Dependency definition.
17 op1 before op2, op4; op3 after op2
18 op1 deadline 10 blocks; op2, op3 deadline default; op4 deadline 20 mins
Figure 2: A cross-chain Option dApp written in HSL.
needs a genuine strike price. Existing oracles [13, 62] require a smart
contract on the blockchain to serve as the front-end to interact with
other client smart contracts. As a result, it is difficult to build a
dependable and unbiased oracle that is simultaneously accessible to
multiple blockchains, because we cannot simply deploy an oracle
smart contract on each individual blockchain since synchronizing
the execution of those oracle contracts requires blockchain interop-
erability, i.e., we see a chicken-and-egg problem. This limitation, in
turn, prevents dApps from spreading their business across multi-
ple blockchains. For instance, a call-option contract deployed on
Ethereum forces investors to exercise the option using Ether, but
not in other cryptocurrencies.
As an introductory example, we shall see how conceptually