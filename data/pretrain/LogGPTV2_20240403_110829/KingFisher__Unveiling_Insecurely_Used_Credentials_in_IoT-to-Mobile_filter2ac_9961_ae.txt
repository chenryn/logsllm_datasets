### Detailed Analysis of SC Usage for IoT-to-Mobile Communication Security

In this section, we analyze the security of IoT-to-Mobile communication implementations by various vendors, focusing on the use of shared credentials (SCs). The vendors under examination include BroadLink, Horn, Tuya, Xiaomi, Haier, ZTE, Qihoo, and Xiaoyi.

#### 1. Encryption Implementation
BroadLink, Horn, Tuya, and Xiaomi implemented cryptographic shared credentials (CSCs) to encrypt their IoT-to-Mobile communication. Specifically:
- **BroadLink, Xiaomi, and Horn** adopted the AES-CBC algorithm for encryption. However, there are subtle differences in their key management:
  - **BroadLink and Horn** used the CSC directly as the encryption key without any additional processing.
  - **Xiaomi** calculated the MD5 hash of the CSC and used it as the encryption key.
- **Tuya** employed the AES-ECB encryption algorithm, using the CSC directly as the encryption key. It is important to note that the AES-ECB algorithm has been proven to be insecure [58], making it inadequate for ensuring the confidentiality of IoT-to-Mobile communication.

#### 2. Authentication Credentials
Haier and ZTE only implemented authentication shared credentials (ASCs) for their IoT-to-Mobile communication. Neither vendor provided encryption protection:
- **Haier** encoded the IoT-to-Mobile communication messages, which included the ASC, and sent them to the devices. This encoding does not provide the same level of security as encryption.
- **ZTE** transmitted the ASCs in plaintext over TCP streams, leaving the communication highly vulnerable to interception.

The lack of encryption in both cases means that an attacker who can recover the decoding algorithm from the companion app or eavesdrop on the traffic can easily obtain the ASC and perform a Man-in-the-Middle (MitM) attack.

#### 3. Shared ASC and CSC
Qihoo and Xiaoyi implemented the same ASC and CSC, which introduces a significant vulnerability. An attacker who obtains either the ASC or CSC can not only decrypt the communication but also impersonate the victim to pass authentication, leading to potential data breaches and unauthorized access.

### Insecurely Protected SCs
Xiaoyi stored its SCs in an encrypted format. However, upon manual analysis, it was discovered that the encryption key was also stored in the app's local storage without any protection. This makes the SCs vulnerable, and KINGFISHER labeled this as a violation of property P7.

### Insecurely Revoked SCs
Six devices did not implement a secure SC update and revocation mechanism:
- **BroadLink, Qihoo, Tuya, and Xiaomi** did not update the SC before unbinding or network re-provisioning. Their SCs remained fixed for more than eight hours, violating property P8.
- **Haier and ZTE** implemented an insecure SC revocation process. The old SCs could still be valid after a new SC was distributed, violating property P9.

### Potential Attacks
1. **Device Hijacking:**
   Since SCs are shared between the IoT device and the companion app, vulnerabilities in SCs can lead to device hijacking. If an attacker obtains the SCs, they can construct device control commands and messages, impersonating the legitimate companion app and gaining control over the device.

2. **Data Injection:**
   An attacker who obtains the ASC used in IoT-to-Mobile communication can forge device status messages. For example, in BroadLink's case, the ASC and CSC are the same, so obtaining the CSC also provides the ASC. The attacker can then construct legal messages with the ASC, making it difficult for the user to distinguish between genuine and forged messages. This is particularly dangerous if the device owner configures action-trigger rules, leading to the automatic execution of other operations.

3. **Privacy Leakage:**
   If a CSC is insecurely used (e.g., generated with repeated subsequences, as in BroadLink's case), the number of possible CSCs that an attacker needs to try decreases. This allows the attacker to quickly find the correct CSC and decrypt all IoT-to-Mobile communications.

### Discussion
**Problem Scope:**
This paper focuses on analyzing Wi-Fi-based IoT-to-Mobile communication. Although other channels like Bluetooth and Zigbee were not included, KINGFISHER can be extended to analyze these channels by collecting information about app code and communication traffic.

**Manual Efforts:**
KINGFISHER is a partially automated tool that requires manual operations, such as enabling the procedure for SC generation, distribution, validation, protection, and revocation. These manual steps are necessary due to the heterogeneity of different solutions and the need for user participation.

**Extended Application Scenarios:**
KINGFISHER uses companion apps to explore the security of SCs and IoT-to-Mobile communication, making source code unnecessary. While this paper focuses on Android companion apps, KINGFISHER is not tied to a specific framework and can be used to analyze other apps, such as iOS apps, as long as the network traffic of IoT-to-Mobile communication can be collected.

### Related Work
Previous research on IoT security has primarily focused on device-level security, including firmware analysis, device pairing protocols, and credential security. Unlike these works, our focus is on the security of SCs used in IoT-to-Mobile communication, proposing a comprehensive set of best practices covering the entire life cycle of SCs.

### Conclusion
In this paper, we conducted a comprehensive analysis of IoT-to-Mobile communication, focusing on shared credentials (SCs). We defined nine security properties for SC implementations and proposed an SC-centric analysis framework, KINGFISHER, to identify and evaluate SCs. Our analysis revealed that all examined products implement an insecure SC life cycle, potentially leading to sensitive data leakage, persistent denial-of-service, and device hijacking.

### References
[References listed here]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.