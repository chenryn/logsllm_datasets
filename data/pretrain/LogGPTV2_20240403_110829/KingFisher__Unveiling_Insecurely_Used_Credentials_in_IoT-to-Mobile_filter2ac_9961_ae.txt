the detailed SC usages to verify the security of their IoT-
to-Mobile communication implementations. BroadLink, Horn,
Tuya and Xiaomi only implemented the CSCs used to encrypt
their IoT-to-Mobile communication. Speciﬁcally, BroadLink,
Xiaomi and Horn adopted the AES-CBC algorithm to encrypt
the IoT-to-Mobile communication messages. But there is slight
difference. Speciﬁcally, BroadLink and Horn used their CSC
as the encryption key directly without any further processing,
while Xiaomi calculated the MD5 value of the CSC and used
it as encryption key. Tuya adopted the AES-ECB encryption
algorithm with CSC directly as encryption key to protect the
transmitted messages. Since the AES-ECB cryptographic algo-
rithm has been proved to be insecure [58], it cannot guarantee
the conﬁdentiality of the IoT-to-Mobile communication. Haier
and ZTE only implemented the ASCs used for authentication
credentials. And none of their IoT-to-Mobile communication
was conﬁgured with encryption protection. In particular, Haier
only encoded the IoT-to-Mobile communication messages,
which contained the ASC, and sent them to the devices rather
than encrypting them, while ZTE just transmitted the ASCs in
plaintext TCP streams. As a result, their ASC transmission
is highly insecure. Because once the attacker recovers the
corresponding decoding algorithm from the companion app or
just eavesdrops the trafﬁcs, the attacker can obtain the ASC
and then perform an active Man-in-the-Middle attack. Qihoo
and Xiaoyi implemented the same ASC and CSC, which are
also vulnerable because the attacker can not only decrypt the
communication but also impersonate as the victim to pass
authentication as long as he obtains any one of the SCs.
4) Insecurely Protected SCs: Only Xiaoyi
implemented
insecure SC storage. Xiaoyi stored its SCs encrypted, but after
a manual analysis, we found that it also stored its encryption
key in the app local storage without any protection, so that
KINGFISHER also labeled it as violating P7.
5) Insecurely Revoked SCs: We found that six devices did
not implement a secure SC update and revocation mechanism,
i.e., BroadLink, Haier, Qihoo, Tuya, Xiaomi and ZTE. Among
them, four devices (i.e., BroadLink, Qihoo, Tuya and Xiaomi)
would not update the SC before unbinding or network re-
provisioning. Their SCs remained ﬁxed more than eight hours
so that we consider them as violating P8. Two devices (i.e.,
Haier and ZTE) implemented an insecure SC revocation as the
old SCs could still be valid after a new SC was distributed,
violating P9.
D. Attacks
1) Device Hijacking: Since the SCs are shared by both the
IoT device and the companion app, vulnerable SCs may not
only cause device data injection, but also device hijacking.
That is, if the attacker obtains the SCs, the attacker would
be able to construct device control commands and messages,
which involve the SCs (for either authentication or encryption).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
497
Like data injection attacks, if BroadLink SCs are obtained by
an attacker, they can be used to construct user messages with
the same protocol as device messages. Hence, the attacker
can impersonate the legitimate companion app to send fake
commands to control the device.
2) Data Injection: When an attacker obtains the ASC
used in the IoT-to-Mobile communication, the attacker can
forge device status messages. As a result, data from “device”
cannot be trusted. Take BroadLink as an example; since the
ASC and CSC it uses are equal, the attacker can also obtain
the ASC after obtaining the CSC. Moreover, the BroadLink
IoT-to-Mobile communication protocol can be recovered by
reversing the companion app. Therefore, the attacker is able
to construct legal messages with the ASC. Since the IoT-to-
Mobile communication security is guaranteed by SCs only, the
user cannot distinguish the forged messages from actual device
messages if they use same SCs. This is even more dangerous
when the device owner conﬁgures action-trigger rules, which
have cascade effects resulting in the automatic execution of
other operations.
3) Privacy Leakage: If a CSC is insecurely used (e.g., the
CSC is generated with repeated subsequences like the case
of BroadLink), the number of possible CSCs that an attacker
has to try decreases and thus the attacker can quickly ﬁnd a
correct CSC. As a result the attacker can decrypt all IoT-to-
Mobile communications.
VI. DISCUSSION
Problem Scope. In this paper, we focus on analyzing Wi-
Fi based IoT-to-Mobile communication. Although we did not
include the other channels (e.g., Bluetooth and Zigbee), KING-
FISHER can be easily extended to analyze the other channels
by collecting information about app code and communication
trafﬁc.
Manual Efforts. KINGFISHER is a partial-automated analysis
tool, which involves manual operations, such as enabling the
procedure of IoT-to-Mobile communication for SC generation,
distribution, validation, protection and revocation. These man-
ual operations are inevitable because these operations are het-
erogeneous in different solutions, in which user participation is
necessary. Besides, SCs are required to be conﬁrmed manually
if an app code is obfuscated or stripped.
Extended Application Scenarios. KINGFISHER utilizes com-
panion apps to explore the security of SCs and IoT-to-Mobile
communication, so source code is not necessary. Moreover, in
this paper, we have used KINGFISHER to analyze the most
popular ones — Android companion apps. But as KING-
FISHER is not tied to a speciﬁc framework and is suitable
for both Java and C/C++, it can also be used to analyze other
apps (e.g., iOS apps) as long as network trafﬁc of IoT-to-
Mobile communication can be collected.
VII. RELATED WORKS
Prior works on IoT security mainly focus on devices.
Firmalice [59] is a binary analysis framework to automati-
cally detect authentication bypass ﬂaws in embedded device
ﬁrmware. Costin et al. [60] performed the ﬁrst large-scale
static analysis of ﬁrmware images, while Kim et al. [61]
proposed an approach for the dynamic analysis of ﬁrmware
in scale via arbitrated emulation. Some work also analyzed
IoT device security via analyses of the companion app [62].
Unlike such previous work, we focus on device authentication
security, especially on the security of the SCs used for IoT-to-
Mobile communication, instead of code defects.
Other related work focuses on device communication. Chen
et al. [2] performed a study of the life cycle of remote binding
in IoT and demystiﬁed various design principles by using a
ﬁnite state machines model. Sethi et al. [63] pointed out that
most device pairing protocols are vulnerable to misbinding.
They implemented related attacks and showed how the attacks
can be found by using formal models of the protocols. Jia et
al. [9] discussed the security risks in the use of the MQTT
protocol and introduced some new general design principles.
Such previous work is related to the communications between
the cloud platform and the IoT devices. In contrast, our
analysis focuses on IoT-to-Mobile communication between the
IoT devices and their companion apps.
There is also work focusing on credential security. Ma et
al. [48] [64] performed an experimental study to analyze the
security of the SMS One-Time Password (OTP) authentication
protocols. Rahat et al. [65] and Wang et al. [66] analyzed
the vulnerabilities of OAuth Implementations, including the
security of OAuth access token. Some well known manufac-
turers and organizations also proposed their own token or IoT
security mechanisms, such as Microsoft Azure [67], Amazon
AWS [68], Google Cloud [69],
IBM [70], Kaspersky [71],
OWASP [18] and IETF RFCs [15], [16]. Unlike such previous
works, we focus on security of the SCs used in IoT-to-Mobile
communication and propose a comprehensive and complete
set of best practices covering the SC entire life cycle. Also
our work focuses on tokens in IoT environments, in which
speciﬁc security vulnerabilities (such as misusing tokens as
encryption keys) exist due to the limited resources of many
IoT systems, rather than in traditional browser-server or the
OAuth model.
VIII. CONCLUSION
In this paper, we performed a comprehensive analysis of
IoT-to-Mobile communication with focus on shared credentials
(SCs). We deﬁned nine security proprieties of SC imple-
mentations, covering the whole life cycle. Following these
proprieties, we proposed an SC-centric analysis framework —
KINGFISHER, to identify SCs by a value-based method and
determine whether they are vulnerable by static and dynamic
testing. Then we evaluated the IoT-to-Mobile communication
solutions of eight popular IoT vendors. Based on the analysis
by KINGFISHER, we found all these products implement an
insecure SC life cycle, which may result in sensitive data leak-
age, persistent denial-of-service, and even device hijacking.
REFERENCES
[1] D. A. Gratton, The Handbook of Personal Area Networking Technologies
and Protocols. Cambridge University Press, 2013.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
498
[2] J. Chen, C. Zuo, W. Diao, S. Dong, Q. Zhao, M. Sun, Z. Lin, Y. Zhang,
and K. Zhang, “Your iots are (not) mine: On the remote binding between
iot devices and users,” in Proceedings of the 49th Annual IEEE/IFIP
International Conference on Dependable Systems and Networks (DSN),
2019.
[3] B. Yuan, Y. Jia, L. Xing, D. Zhao, X. Wang, and Y. Zhang, “Shattered
chain of trust: Understanding security risks in cross-cloud iot access
delegation,” in Proceedings of the 29th USENIX Security Symposium
(Usenix Security), 2020.
[4] “EU general data protection regulation (GDPR),” https://gdpr-info.eu/,
Accessed 2021.
[5] “101 complaints on eu-us transfers ﬁled,” https://noyb.eu/en/101-com
plaints-eu-us-transfers-filed, Accessed 2021.
[6] “Amazon gdpr violation,”
https://www.sec.gov/ix?doc=/Archives/edg
ar/data/1018724/000101872421000020/amzn-20210630.htm, Accessed
2021.
[7] T. Yu, V. Sekar, S. Seshan, Y. Agarwal, and C. Xu, “Handling a trillion
(unﬁxable) ﬂaws on a billion devices: Rethinking network security for
the internet-of-things,” in Proceedings of the 14th ACM Workshop on
Hot Topics in Networks (HotNets), 2015.
[8] M. Antonakakis, T. April, M. Bailey, M. Bernhard, E. Bursztein,
J. Cochran, Z. Durumeric, J. A. Halderman, L. Invernizzi, M. Kallitsis
et al., “Understanding the mirai botnet,” in Proceedings of the 26th
USENIX Security Symposium (Usenix Security), 2017.
[9] Y. Jia, L. Xing, Y. Mao, D. Zhao, X. Wang, S. Zhao, and Y. Zhang,
“Burglars’ iot paradise: Understanding and mitigating security risks of
general messaging protocols on iot clouds,” in Proceeding of the 41st
IEEE Symposium on Security and Privacy (S&P), 2020.
[10] Y. Zhou, L. Wu, Z. Wang, and X. Jiang, “Harvesting developer creden-
tials in android apps,” in Proceedings of the 8th ACM Conference on
Security & Privacy in Wireless and Mobile Networks (WiSec), 2015.
[11] H. Wen, J. Li, Y. Zhang, and D. Gu, “An empirical study of sdk
credential misuse in ios apps,” in Proceedings of the 25th Asia-Paciﬁc
Software Engineering Conference (APSEC), 2018.
[12] C. Zuo, Q. Zhao, and Z. Lin, “Authscope: Towards automatic discovery
of vulnerable authorizations in online services,” in Proceedings of the
24th ACM SIGSAC Conference on Computer and Communications
Security (CCS), 2017.
[13] C. Zuo, Z. Lin, and Y. Zhang, “Why does your data leak? uncovering
the data leakage in cloud from mobile apps,” in Proceedings of the 40th
IEEE Symposium on Security and Privacy (S&P), 2019.
[14] “The oauth 1.0 protocol,” https://datatracker.ietf.org/doc/html/rfc5849,
[15] “The oauth 2.0 authorization framework,” https://datatracker.ietf.org/d
oc/html/rfc6749, Accessed 2021.
[16] “Json web token (jwt),”
https://datatracker.ietf.org/doc/html/rfc7519,
Accessed 2021.
Accessed 2021.
[17] “Http state management mechanism,” https://datatracker.ietf.org/doc/h
[25] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid, “Nist special
publication 800-57,” NIST Special publication, 2020.
[26] “The aes-cbc cipher algorithm and its use with ipsec,” https://datatrac
ker.ietf.org/doc/html/rfc3602, Accessed 2021.
[27] “The oauth 2.0 authorization framework: Bearer token usage,” https:
//datatracker.ietf.org/doc/html/rfc6750, Accessed 2021.
[28] “The transport layer security (tls) protocol version 1.2,” https://www.ie
tf.org/rfc/rfc5246.html, Accessed 2021.
[29] “Cisa least privilege,” https://us-cert.cisa.gov/bsi/articles/knowledge/pr
inciples/least-privilege, Accessed 2021.
[30] S. Vaudenay, “Security ﬂaws induced by cbc padding—applications
to ssl, ipsec, wtls...” in Proceedings of the 21st Annual International
Conference on the Theory and Applications of Cryptographic Techniques
(Eurocrypt), 2002.
[31] M. Y. C. Wei, L. M. Grupp, F. E. Spada, and S. Swanson, “Reliably
erasing data from ﬂash-based solid state drives,” in Proceedings of the
9th USENIX Conference on File and Storage Technologies (FAST), 2011.
[32] “Internet x.509 public key infrastructure certiﬁcate and certiﬁcate re-
vocation list (crl) proﬁle,” https://datatracker.ietf.org/doc/html/rfc5280,
Accessed 2021.
[33] “The deﬁnitive guide to encryption key management
fundamen-
https://info.townsendsecurity.com/deﬁnitive-guide-to-encryptio
tals,”
n-key-management-fundamentals, Accessed 2021.
[34] Y. Ye, Z. Zhang, F. Wang, X. Zhang, and D. Xu, “Netplier: Proba-
bilistic network protocol reverse engineering from message traces,” in
Proceedings of the 28th Annual Network and Distributed System Security
Symposium (NDSS), 2021.
[35] G. Bossert, F. Guih´ery, and G. Hiet, “Towards automated protocol
reverse engineering using semantic information,” in Proceedings of the
9th ACM Symposium on Information, Computer and Communications
Security (AsiaCCS), 2014.
[36] W. Cui, J. Kannan, and H. J. Wang, “Discoverer: Automatic protocol
reverse engineering from network traces,” in Proceedings of the 16th
USENIX Security Symposium (Usenix Security), 2007.
[37] “Android binder ipc,” https://source.android.com/devices/architecture/hi
dl/binder-ipc, Accessed 2021.
[38] J. Caballero, H. Yin, Z. Liang, and D. Song, “Polyglot: Automatic
extraction of protocol message format using dynamic binary analysis,”
in Proceedings of the 14th ACM SIGSAC Conference on Computer and
Communications Security (CCS), 2007.
[39] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data
structures from binary execution,” in Proceedings of the 11th Annual
Information Security Symposium (CERIAS), 2010.
[40] “Classloader,” https://developer.android.com/reference/java/lang/ClassL
oader, Accessed 2021.
[41] “Frida,” https://frida.re/, Accessed 2021.
[42] “Android tcpdump,” https://www.androidtcpdump.com/, Accessed 2021.
[43] “Sequence alignment,” https://en.wikipedia.org/wiki/Sequence alignme
nt, Accessed 2021.
man%E2%80%93Wunsch algorithm, Accessed 2021.
[45] R. R. Sokal, “A statistical method for evaluating systematic relation-
ships,” Univ. Kansas, Sci. Bull., 1958.
[46] J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and G. Jiang,
“{SUPOR}: Precise and scalable sensitive user input detection for
android apps,” in Proceedings of the 24th USENIX Security Symposium
(Usenix Security), 2015.
[47] S. Lounici, M. Rosa, C. M. Negri, S. Trabelsi, and M. ¨Onen, “Opti-
mizing leak detection in open-source platforms with machine learning
techniques,” in Proceedings of
the 7th International Conference on
Information Systems Security and Privacy (ICISSP), 2021.
[48] S. Ma, R. Feng, J. Li, Y. Liu, S. Nepal, E. Bertino, R. H. Deng, Z. Ma,
and S. Jha, “An empirical study of sms one-time password authentication
in android apps,” in Proceedings of the 35th Annual Computer Security
Applications Conference (ACSAC), 2019.
[49] “Burp suite,” https://portswigger.net/burp, Accessed 2021.
[50] “Tuya,” https://www.tuya.com/, Accessed 2021.
[51] “Broadlink,” https://www.ibroadlink.com/, Accessed 2021.
[52] “Haier,” https://www.haier.com/global/, Accessed 2021.
[53] “Horn,” http://www.ihorn-tech.com/, Accessed 2021.
[54] “Qihoo,” https://jia.360.cn/, Accessed 2021.
[55] “Xiaomi,” https://www.mi.com/global/, Accessed 2021.
[56] “Xiaoyi,” https://www.xiaoyi.com/, Accessed 2021.
[57] “Zte,” https://www.zte.com.cn/global/, Accessed 2021.
https://cheatsheetseries.owasp.org/, Ac-
[44] “Needleman-wunsch algorithm,”
https://en.wikipedia.org/wiki/Needle
tml/rfc6265, Accessed 2021.
[18] “Owasp cheat sheet series,”
cessed 2021.
[19] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith,
“Sok: Lessons learned from android security research for appiﬁed
software platforms,” in Proceedings of the 37th IEEE Symposium on
Security and Privacy (S&P), 2016.
[20] Y. Lee, T. Li, N. Zhang, S. Demetriou, M. Zha, X. Wang, K. Chen,
X. Zhou, X. Han, and M. Grace, “Ghost installer in the shadow: Security
analysis of app installation on android,” in Proceedings of the 47th
Annual IEEE/IFIP International Conference on Dependable Systems and
Networks (DSN), 2017.
[21] H. Altuwaijri and S. Ghouzali, “Android data storage security: A review,”
Journal of King Saud University-Computer and Information Sciences,
2020.
[22] D. Antonioli, N. O. Tippenhauer, and K. Rasmussen, “Bias: Bluetooth
impersonation attacks,” in Proceedings of the 41st IEEE Symposium on
Security and Privacy (S&P), 2020.
[23] Y. Zhang, J. Weng, R. Dey, Y. Jin, Z. Lin, and X. Fu, “Breaking
secure pairing of bluetooth low energy using downgrade attacks,” in
Proceedings of th 29th USENIX Security Symposium (Usenix Security),
2020.
[24] E. Ronen, A. Shamir, A.-O. Weingarten, and C. O’Flynn, “Iot goes
nuclear: Creating a zigbee chain reaction,” in Proceedings of the 38th
IEEE Symposium on Security and Privacy (S&P), 2017.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
499
[58] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical
study of cryptographic misuse in android applications,” in Proceedings
of the 20th ACM SIGSAC Conference on Computer and Communications
Security (CCS), 2013.
[59] Y. Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel, and G. Vigna,
“Firmalice - automatic detection of authentication bypass vulnerabilities
in binary ﬁrmware,” in Proceedings of the 22nd Annual Network and
Distributed System Security Symposium (NDSS), 2015.
[60] A. Costin, J. Zaddach, A. Francillon, and D. Balzarotti, “A large-scale
analysis of the security of embedded ﬁrmwares,” in Proceedings of the
23rd USENIX Security Symposium (Usenix Security), 2014.
[61] M. Kim, D. Kim, E. Kim, S. Kim, Y. Jang, and Y. Kim, “Firmae:
Towards large-scale emulation of iot ﬁrmware for dynamic analysis,”
in Proceedings of
the 37th Annual Computer Security Applications
Conference (ACSAC), 2020.
[62] N. Redini, A. Continella, D. Das, G. D. Pasquale, N. Spahn, A. Machiry,
A. Bianchi, C. Kruegel, and G. Vigna, “Diane: Identifying fuzzing
triggers in apps to generate under-constrained inputs for iot devices,”
in Proceedings of the 42nd IEEE Symposium on Security and Privacy
(S&P), 2021.
[63] M. Sethi, A. Peltonen, and T. Aura, “Misbinding attacks on secure device
pairing and bootstrapping,” in Proceedings of the 14th ACM Symposium
on Information, Computer and Communications Security (AsiaCCS),
2019.
[64] S. Ma, J. Li, H. Kim, E. Bertino, S. Nepal, D. Ostry, and C. Sun,
“Fine with “1234”? an analysis of sms one-time password randomness
in android apps,” in Proceedings of the 43rd IEEE/ACM International
Conference on Software Engineering (ICSE), 2021.
[65] T. Al Rahat, Y. Feng, and Y. Tian, “Oauthlint: An empirical study
on oauth bugs in android applications,” inProceedings of the 34th
IEEE/ACM International Conference on Automated Software Engineer-
ing (ASE), 2019.
[66] H. Wang, Y. Zhang, J. Li, H. Liu, W. Yang, B. Li, and D. Gu, “Vulner-
ability assessment of oauth implementations in android applications,”
in Proceedings of
the 31st Annual Computer Security Applications
Conference (ACSAC), 2015.
[67] “Microsoft azure iot security deployment,” https://docs.microsoft.com
/en-us/azure/iot-fundamentals/iot-security-deployment, Accessed 2021.
[68] “Aws iot security,” https://docs.aws.amazon.com/iot/latest/developergu
[70] “Ibm security token,” https://www.ibm.com/docs/en/was/9.0.5?topic=au
thentication-security-token, Accessed 2021.
[71] “Kaspersky best practices for iot security,”
https://www.kaspersky.
com/resource-center/preemptive-safety/best-practices-for-iot-security,
Accessed 2021.
[69] “Google cloud device security,” https://cloud.google.com/iot/docs/conc
ide/iot-security.html, Accessed 2021.
epts/device-security, Accessed 2021.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
500