### In Other Contexts
Sophos reported a free iPad scam being run through a Facebook application [18]. Similar scams have been propagated via spam emails, SMS messages, and the web, and have been discussed in other sources [19], [20].

### Mobile Advertisements and Scams
Next, we draw attention to how this scam appears in mobile advertisements. URL blacklists on VirusTotal flagged some of the intermediate redirection URLs as malicious or phishing sites. The domains involved include avazutracking.com and track.trkthatpaper.org. Our findings indicate that not all URLs associated with these domains are malicious. These domains appear to be part of legitimate advertisement networks and exchanges, and they often display non-malicious content. Similarly, the domain com-00-usa5.com, mentioned earlier, also presents non-malicious advertisements.

Developers are often unaware that they are using ad services that may display scam content. In our experiments, all free iPhone and iPad scams originated from two ad libraries: Mobclix and Tapfortap. These libraries retrieve ad content from ad exchanges where multiple networks participate and bid to show advertisements in the available ad space. The bidding ad networks may have syndication relationships with other ad networks, allowing them to show ads on their behalf. In many cases of free iPad scams, we believe that Mobclix leverages Axonix, another ad exchange. Figure 3 illustrates an example of a redirection chain arising from the Mobclix ad library, leading to the landing page shown in Figure 9(c). This chain involves multiple domains belonging to ad exchanges and networks, with URLs passing information through query parameters. Due to this complex infrastructure, it is challenging for developers, ad libraries like MobClix and Tapfortap, and even the top-level ad networks to ensure the quality of the content presented.

Our system can be particularly useful here. If deployed by a responsible party such as Google or a government agency, which can hold content publishers accountable, the collected traces can help identify and gather evidence against offending parties, thereby limiting the scam content shown to users.

### Scams Through Direct Links
We also encountered scams that result in similar outcomes to the free iPad scams described above, but their origin differs. Instead of an embedded advertisement in the application leading to the scam page, a web link statically embedded in the application leads to the scam page. The web link appears to link to a benign website unrelated to advertisements or scams; however, it contains code that loads an advertisement, which then redirects through a series of URLs to a scam landing page. An example is shown in Figure 10. When the user taps on the button labeled “Fiestas de hoy” (Parties Today), a web page opens in the browser and redirects to the scam webpage. Notably, the scam page displays the user’s city, derived from the client’s IP address, to build trust. It also shows the Facebook logo, even though it is not affiliated with Facebook, bringing the scam close to phishing.

We found several applications exhibiting this behavior, leading to scams through links embedded in them. These applications no longer exist on Google Play, although Google’s VerifyApps service did not label them as malicious. Our detection was based on certain URLs whose domains (e.g., zb1.zeroredirect1.com) are frequently flagged by VirusTotal blacklists. In our automatic attribution, this scam was not linked to any of the ad libraries detected in Section III-D. Manual inspection revealed that some of the application’s own classes were involved, and static links embedded in the app led to scam pages. We are uncertain whether the developers were aware that these applications were participating in propagating scams. It is possible that the developers embedded links without knowing that the advertisements could lead to scams. Alternatively, some applications consistently led to scammy advertisements during our testing, suggesting that the developers may have knowingly participated in such scams. The naming of the link as “Fiestas de hoy” or “Parties today” further supports this possibility.

### Fake Movie Player Malware
Our deployment in China also detected several instances of advertisements on Baidu and Nobot ad networks. These advertisements claim that users can play videos for free. An example screenshot is shown in Figure 11. Such advertisements either lead the user to directly download a video player application or to a webpage containing pornographic images, prompting the user to download a video player. Our system triggered the ads and downloaded the video player applications, which turned out to be malicious, specifically SMS trojans that send SMS messages to premium numbers without user consent. On VirusTotal, nearly 30 antiviruses detect these applications under various names such as SMSSend and SMSPay. Based on their permissions, some of these applications can also make calls, read and write SMS messages, and monitor running applications.

The number of such advertisements we found was significant. Our system triggered 30 advertisements on the Baidu ad network and 3 on the Nobot network. Many of these advertisements do not involve redirection chains, leading directly to the APK or landing page, making it easier to spot and block the malware. In some cases, there was only a one-level redirection through a site like http://csu.ssooying.com/QnqQvy, which is now blacklisted by four URL blacklists, including Google Safebrowsing, on VirusTotal. However, it was not detected by those blacklists at the time our system encountered these advertisements.

Additionally, we observed a pharmaceutical campaign selling alternative therapy drugs for sexual fitness, which appeared dubious and could be classified as another scam. While VirusTotal URL blacklists did not flag the campaign’s website, other vendors like Qihoo 360 flagged it as fake and misleading.

### Questionable Results from Google Ads
Reputed ad networks are generally safe, but we found that even Google’s ad network is not entirely free from malicious content. For instance, we detected a frequent advertisement from Google ads that led to a fitness website (johnshollywoodworkout.com). At the time of detection, the landing URL was flagged by three URL blacklists on VirusTotal, excluding Google Safebrowsing. By the time we attempted manual analysis, the website was down, showing only a blank page. This, combined with the URL blacklist flags, suggests that the website was likely malicious. The advertisement redirected from another clean website (fitness.rasqal.com), indicating that Google may have been unaware of the malicious landing site.

In our Chinese deployment, we also found questionable content originating from Google ads. A prominent case involved 67 downloaded files from advertisements for a game app market (Migu Game) run in cooperation with China Mobile. The ad was run through Doubleclick. The app market hosted several Android applications, which were classified as adware or SMSReg by multiple antiviruses on VirusTotal. These applications charge users for simple functions, which explains the antivirus classification.

### Discussion
This section discusses the limitations, possible improvements, and other questions related to our research. Our methodology, based on dynamic analysis, may not reveal all links and ads in applications, leading to false negatives. Incorporating other GUI exploration techniques, as described in Section VIII, could mitigate this issue. We also inherit the limitations common to GUI exploration, such as bypassing login screens. However, we believe these limitations do not significantly affect the representativeness of our study. Additionally, we could improve coverage by reading embedded links statically and generating ad links by simulating interactions with ad networks, which is part of our future work.

Another potential source of inaccuracies is our reliance on external oracles such as VirusTotal antiviruses and blacklists. We may miss scams and malware that these oracles fail to detect. Nonetheless, our research highlights the benefits of analyzing app-web interfaces, and any detection techniques can complement our methodology.

Ethical considerations are also important. Since advertisers pay for impressions or clicks, our analysis, which involves loading and clicking ads, may cause economic disturbances. However, we argue that such analysis is for the greater good of enhancing security in the ecosystem. Previous malvertising research [4], [5] has faced similar ethical challenges, and minimizing the impact is possible if ad networks collaborate and provide their ad inventory to parties running such analysis services.

### Related Work
#### Automatic UI Exploration
Dynamic analysis of applications requires adequate code coverage, and recent work has focused on automatically exercising the application’s graphic user interface (GUI) in black-box or white-box manners. AppsPlayground [6] implemented a general framework for checking privacy leakages and malicious behaviors in Android applications. We followed AppsPlayground’s approach to UI exploration. Azim et al. proposed A3E [21] with targeted and depth-first exploration, while Choi et al. [22] developed an active-learning-based solution to minimize application restarts. Other works, such as Liu et al. [23], Sounthiraraj et al. [24], Ravindranath et al. [25], and Bhoraskar et al. [26], use automated UI exploration for various purposes, including ad fraud detection, SSL/TLS certificate validation, fault detection, and static analysis. Hao et al. [27] propose a customizable UI exploration framework. These techniques are mostly black box, but some works, like AppIntent [28] and Xia et al. [29], use white-box approaches to improve code coverage. Our work uses automatic exploration to trigger app-web interfaces and can benefit from advancements in this area.

#### Advertisement Security and Privacy
Mobile advertisements have been studied from multiple security and privacy perspectives, including ad fraud and the implications of ad-supported applications. Liu et al. [23] and Crussell et al. [30] have studied ad fraud, focusing on repackaged applications and the redirection of ad revenue. Our primary concern is the propagation of malicious content through advertisements and web links embedded in applications.

Several researchers have also studied privacy leakages through ad libraries. TaintDroid [31] and follow-up works [6], [32] show that a large majority of privacy leakages occur through ad libraries. While these works use dynamic analysis, others, such as [33], [34], use static analysis to identify privacy leaks. Grace et al. [35] performed static analysis of ad libraries to discover private data leakage and untrusted code execution. Industry researchers have detected vulnerabilities in ad libraries that can provide escalated privileges to advertisement code [36]. AdSplit [37] and Quire [38] propose separating ad libraries from the main application to prevent vulnerabilities and privacy leakages. Our goal is not to identify such vulnerabilities but to focus on the end results of web links and advertisements embedded in applications, which may not be malicious themselves but can lead to malicious outcomes.

Web malvertising, the analogous problem of malicious advertising on the web, has been studied in the past. Li et al. [5] used a combination of dynamic and static analysis to detect and analyze malvertising.