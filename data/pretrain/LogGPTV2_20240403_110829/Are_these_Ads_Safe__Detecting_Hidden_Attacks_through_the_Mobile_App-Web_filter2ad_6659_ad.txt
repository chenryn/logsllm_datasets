in other contexts. Sophos reported a free iPad scam being run
through a Facebook application [18]. Similar scams propagating
through spam email and SMS messages and over the Web have
been covered and discussed elsewhere [19], [20].
We next bring the reader’s attention to how this scam
shows up in mobile advertisements. The URL blacklists on
VirusTotal ﬂagged some of the intermediate redirection URLs
as malicious or phishing websites. The concerned domains here
include avazutracking.com and track.trkthatpaper.org. Based on
our results, all URLs relating to these domains are not actually
bad. These domains appear to be parts of some advertisement
networks and exchanges and do show non-malicious content
also. Likewise, the com-00-usa5.com mentioned earlier also
presents non-malicious advertisements.
The developers are actually unaware that they are using ad
services that may show scam content. In our experiments, all
the free iPhone and iPad scams appear from two ad libraries:
Mobclix and Tapfortap. These libraries retrieve ad content from
so-called ad exchanges where multiple networks participate
and bid to show advertisements in the given ad space. The
bidding ad networks may further have syndication relationships
with other ad networks and may allow those networks to show
ads on their behalf. In many of these cases of free iPad scams,
we believe that Mobclix leverages Axonix, which is another
ad exchange. Consider the example redirection chain shown in
Figure 3. This chain arises from the Mobclix ad library and
the landing page is what is seen in Figure 9 (c). In between it
redirects through multiple domains belonging to ad exchanges
and networks with the URLs passing information to those
following them through query parameters. Because of this
complicated infrastructure of multiple networks involved, it
becomes difﬁcult for the developers, ad libraries like MobClix
and Tapfortap, and perhaps even the ad networks on top to
ensure the quality of the content presented.
Our system is again useful here. If deployed by a responsible
party, such as Google or a government agency, which can hold
the content publishers accountable, the collected traces can
be of invaluable help in getting to the offending parties and
gathering evidence against them. In this way, it may be possible
to limit the scam content shown to the users.
C. Scams Through Direct Links
We also encountered scams the result of which is very
similar to the free iPad scams described in the previous section.
However, how they originate is different. Rather than an
advertisement embedded in the application leading to the scam
page, in these cases, a web link statically embedded in the
application leads to the scam page. The web link appears to link
to a benign website not related with advertisements or scam;
however, it contains code that loads an advertisement, which
then redirects through a series of URLs to a scam landing page.
An example is shown in Figure 10. When the user taps on the
button labeled “Fiestas de hoy” (Parties Today), a web page
opens in the browser and redirects to the scam webpage. As an
aside, note the scam page actually shows the user’s city, derived
from the client’s IP address, perhaps to engender conﬁdence
in the user. More importantly, it also shows the Facebook logo
even though it is not afﬁliated to Facebook, bringing the scam
at the brink of phishing as well.
We found a number of applications having such behavior
of leading to scams through links embedded in them. The
applications we found do not exist on Google Play anymore
10
(a)
(b)
Fig. 10. Another free iPad scam. The scam originates not through an ad in
the app but through a link statically embedded in the application (in this case,
“Fiestas de hoy”). Upon clicking this link an ordinary URL is launched and
as the web page loads, it is redirected to web-based ad providers that show
the scam. Note also the presence of the Facebook icon on the web page even
though there is no association between Facebook and this website.
(although Google’s VerifyApps service does not label them
as malicious, so removal due to being malicious is unlikely).
Our detection of such scam was based on certain URLs whose
domains (e.g., zb1.zeroredirect1.com) are nearly always ﬂagged
by VirusTotal blacklists. In our automatic attribution of the
attack, we found that this scam is not attributed to any of the ad
libraries that we detected in Section III-D. Looking manually,
some of the application’s own classes were involved, and it
was static links embedded in the app that led to scam pages.
We are not sure if the developers themselves are aware that
these applications are participating in propagating scams. It
is possible that the developers simply embedded some links
and host advertisements on those web pages without knowing
that advertisements could lead to scam. On the other hand,
some of these applications always seem to lead to scammy
advertisements (during the time we tried them); developers
may thus knowingly be participating in such scams. The link
in the application discussed here being named “Fiestas de hoy”
or “Parties today” seems to also signify this.
D. Fake Movie Player Malware
Our deployment in China also detected several instances
of advertisements on Baidu and Nobot ad networks. These
advertisements tell the user that they can play videos for free.
An example screenshot is shown in Figure 11.
Advertisements like the one at the bottom of the screenshot
lead the user to either directly download a video player
application, or take to a web page containing pornographic
images and prompt the user to download a video player from
there. Our system was able to trigger the ads and download
the video player applications. These applications are however
malicious and, more speciﬁcally, SMS trojans, i.e., they send
SMS messages to premium numbers without users’ consent. On
Fig. 11. A screenshot with an ad from Nobot at the bottom. The ad says
in Chinese that it is free to play video using your mobile phone. It leads
to download a video player. The purported video player is actually an SMS
trojan.
VirusTotal nearly 30 antiviruses detect these applications under
various names such as SMSSend and SMSPay. Based on their
permissions, some of these applications can also, apart from
sending SMS messages, make calls without user conﬁrmation,
read and write SMS messages, and monitor applications running
on the system.
The number of instances of such advertisements we found
was not small either. Our system had triggered 30 advertise-
ments on the Baidu ad network and 3 on the Nobot network.
We also note that many of these advertisements do not have any
redirection chains: the ad just directly leads to the apk or the
landing page. Therefore, we believe it should have been easy
for them to spot the malware and block the advertisements. In
some cases, there would be a one-level redirection only, going
through a site such as http://csu.ssooying.com/QnqQvy. This
site is now blacklisted by four URL blacklists, including Google
Safebrowsing, on VirusTotal. However, it was not detected by
those blacklists at the time these advertisements were seen by
our system.
As an aside, when we manually studied these two ad
networks, we were able to see a pharmaceutical campaign
that sell alternative therapy drugs for sexual ﬁtness. Based on
the content, the campaigns’ claims seem dubious so that they
could very well be classiﬁed as another scam. Even though
VirusTotal URL blacklists do not ﬂag the campaign’s website,
other vendors such as Qihoo 360 ﬂag it as fake and trick
website.
E. Questionable Results from Google ads
We have found reputed ad networks to be generally safe and
not propagating malicious content. Mobclix was one example
where we saw a few scams, although Mobclix itself may not
be aware of them. In this section, we will discuss how even
Google’s ad network appears to be not free from malicious
content. Google ads is the most popular ad network (we
consider both Doubleclick and Admob under one umbrella
of Google ads), being included in over 40% applications while
all other ad libraries are included in less than 10% applications.
11
Consequently, we triggered many more Google ads than ads of
other libraries, and intuitively, have a greater chance of ﬁnding
malicious content in their network.
In our North American deployment, we detected a frequent
advertisement from Google ads that led to what is apparently a
ﬁtness website and which has the domain johnshollywoodwork-
out.com. At the time of detection, the landing URL was ﬂagged
by three URL blacklists, not including Google Safebrowsing, on
VirusTotal. Unfortunately, by the time we attempted to manually
analyze the case, the website was down and would show only a
blank page. Apart from being detected by some URL blacklists,
going down in a short period is another indicator that the
website could be malicious. The advertisement would land
on this website after being redirected from another website
ﬁtness.rasqal.com. This site hosts coupons for several stores
and is considered clean by URL blacklists. It just appears that
Google was not aware of the malicious landing site, or, more
unlikely, the three URL blacklists had false positives.
In our Chinese deployment also, we found some cases where
we saw content originating from Google ads that could be
considered questionable. The most prominent case, consisting
of 67 downloaded ﬁles, is that of advertisements from a game
app market (called Migu Game) which is run in cooperation
with China Mobile, a telecommunication operator in China.
The ad is run through Doubleclick. The app market website
hosts several Android applications for download, all of which
are considered by several antiviruses on VirusTotal as adware
and or as an instance of SMSReg (these kind of applications
are usually not malware but are potentially unwanted). Inside
the app, the users are charged by China Mobile even for simple
functions or asking for help. This is perhaps the reason why
antiviruses give such a classiﬁcation.
VII. DISCUSSION
This section discusses limitations, possible improvements,
and other questions regarding our research. Our methodology
is based on dynamic analysis and may not be able to reveal all
links and ads in applications, thus leading to false negatives. A
partial mitigation of this issue may be possible by incorporating
other GUI exploration techniques as described in Section VIII
to improve coverage. We also inherit the limitations that are
generally applicable to GUI exploration techniques such as
getting past through login screens. We however believe that
such limitations do not affect the representativeness of our
study. Furthermore, we could bypass much of GUI exploration
by reading embedded links from applications statically and by
generating ad links directly by simulating interactions with ad
networks (this would require us to understand the protocols
between ad libraries and ad servers and is challenging to do).
This is part of our future work. Another source of possible
inaccuracies is the fact that we rely on external oracles such
as VirusTotal antiviruses and blacklists. It is likely that we
are missing scams and malware that these oracles missed.
Nonetheless, our research shows the beneﬁt of doing analysis
at the app-web interfaces and any detection techniques may
complement our methodology.
Another important question is related to ethics. Since
advertisers pay for the ads by impressions or clicks, our
analysis, which involves loading and clicking ads, may cause
economical disturbances. Nonetheless, we argue that such
analysis is for the greater good of enhancing security in
the ecosystem. Furthermore, our study comes after earlier
precedents of malvertising research [4], [5], which have faced
similar ethical challenges. It is possible to minimize the analysis
impact if ad networks collaborate and provide their ad inventory
to parties running such analysis services.
VIII. RELATED WORK
A. Automatic UI exploration
Dynamic analysis of applications to understand their runtime
properties requires that we be able to run them in some
way with adequate code coverage. Android Applications
are primarily GUI based and so recent work has taken
the approach of automatically exercising the application’s
graphic user interface in black-box or white-box manner.
AppsPlayground [6] implemented a general framework for
exercising Android applications to check privacy leakages
in applications as well as the presence of certain malicious
behaviors. We have followed AppsPlayground’s approach to
UI exploration in this paper. Azim et al. proposed A3E [21]
with targeted and depth-ﬁrst exploration as the high points
of their solution while Choi et al. [22] developed an active-
learning based solution that minimizes application restarts.
Numerous other application-oriented works have also used
automated UI exploration. Liu et al. [23] automatically explore
the application UI of Windows applications to identify cases of
ad fraud. Sounthiraraj et al. [24] use automatic UI exploration
as part of their methodology to verify the presence SSL/TLS
certiﬁcate validation vulnerabilities in Android applications.
Ravindranath et al. [25] automatically explore applications to
detect faults and crashes in them. Bhoraskar et al. [26] perform
a preliminary static analysis to prune away irrelevant code and
instrument the applications so that automatic exploration can
easily reach the right parts in the instrumented applications. Hao
et al. [27] propose a one-stop UI exploration framework that is
customizable to meet the requirements of different applications.
The above techniques are mostly black box when it comes
to exploring the UI (not considering the preliminary static
analysis involved in some works above). Other works have
also used white-box approaches to improve application code
coverage. AppIntent [28] develops techniques to effectively
use symbolic execution on Android applications for analyzing
privacy leakages. Xia et al. [29] also use a whitebox dynamic
analysis to accurately identify privacy leakages in Android ap-
plications. Our work uses automatic exploration as a technique
to accomplish triggering of app-web interfaces and thus use
any of the above works or any future advancements in this
area to improve the triggering of app-web interfaces.
B. Advertisement Security and Privacy
Mobile advertisements have been studied in the past from
multiple security and privacy perspectives such as ad fraud
and security and privacy implications of using ad-supported
applications. Liu et al. [23] study a kind of ad fraud in which the
developer places ads and the main application widgets in such a
way that it becomes easy for the user to mistakenly click on ads.
Crussell et al. [30] study ad fraud in mobile applications from
a network perspective. They identify repackaged applications
12
with the purpose to direct ad revenue away from the original
developers and to the persons who repackaged the applications
and study the prevalence and implications of this kind of ad
fraud. Our main concern in this paper is not ad fraud but the
propagation of malicious content through advertisements and
web links embedded in applications.
Several researchers have also studied privacy leakages
through ad libraries. TaintDroid [31] and some follow-up
works [6], [32] present results in which a large majority of
privacy leakages happen through ad libraries included in the
applications. While the previous list of works uses dynamic
analysis, researchers have also used static analysis to identify
privacy leaks in applications, and through ad libraries in
particular [33], [34]. Privacy leakages in ad libraries are not in
the scope of this paper. However, we do study scams that extract
personal information of the users, even with their consent.
Grace et al. [35] perform static analysis of ad libraries to
discover a number of implications such as private data leakage
and execution of untrusted advertisement code in applications.
Industry researchers also detected vulnerabilities in ad libraries
that can provide escalated privileges to the advertisement code
that these libraries execute [36]. AdSplit [37] discusses that
ad libraries should be separated from the main application,
running in a different sandbox, so that they can have different
permissions from the applications, and vulnerabilities and
privacy leakages in them do not affect the main application.
Quire [38] also proposed techniques that can achieve a similar
effect. The goal of this paper is not to identify vulnerabilities
due to the inclusion of ad libraries or to ﬁx such problems.
The web links or advertisements embedded in applications may
themselves not be malicious but their end result is.
A more related aspect of advertising security research is
the so-called web malvertising. An important part of our study
is malicious advertising in mobile applications. The analogous
problem of malicious advertising on the Web, dubbed as
malvertising, has been studied in the past. Li et al. [5] use a