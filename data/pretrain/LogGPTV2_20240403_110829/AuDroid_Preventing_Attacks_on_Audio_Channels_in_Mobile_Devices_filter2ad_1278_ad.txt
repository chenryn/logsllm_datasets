o
V






c
i
s
u
M






h
c
r
a
e
S
e
c
i
o
V






s
t
u
o
g
n
a
H

e
n
o
h
P

SV
SV

SV

r
e
s
w
o
r
B






s
p
a
M






a
r
o
d
n
a
P

IV
IV
IV


y
f
i
t
o
p
S

IV
IV
IV


Simple Isolation
AuDroid MLS
AuDroid User Approval
AuDroid Resolver 1
AuDroid Resolver 2
AuDroid
Requested User Approval no no no no no no no no no yes yes yes yes yes yes yes yes
yes no yes yes yes yes yes no no yes yes yes yes yes yes yes yes
User Notified
yes no yes yes yes yes yes no no yes yes yes yes yes yes yes yes
App uses Microphone
App uses Speaker
yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes yes
SIV
IV
SIV
SV

SIV
IV
SIV
SV

SIV
IV
SIV
SV

SIV
IV
SIV
SV

SIV
IV
SIV
SV

SIV
IV
SIV
SV

SIV
IV
SIV
SV

SIV
IV
SIV
SV

SV
SV

SV

1 Snapchat (Take Video)
2 Facebook (Send Voice Message)
3 Whatsapp (Send Voice Message)
4 Voice Recorder (Send Voice Message)
5 Viber (Send Voice Message)
6 Google Voice Search (Voice Search)
7 Browser (Watch Video)
8 Skype (Video Call)
9 Call Recorder (Record Phone Call)
10 Pandora (Listen to a Song)
11 Spotify (Listen to a Song)
that allows system apps, like Phone and Hangouts, to play
approved ring tones and notiﬁcation sounds even when the
external party is identiﬁed as low-secrecy.
Row 5 shows the eﬀect of using a second resolver (Resolver
2) to allow market apps, like Pandora and Viber, to play ap-
proved audio ﬁles that do not contain malice, such as ring
tones, notiﬁcation sounds and sound tracks, even when the
external party is identiﬁed as high-integrity.
By combining the user approval and the resolvers, AuDroid
runs all the tested apps correctly without impact on the
system functionality, as show in row 6.
6.3 Performance Overhead
Existing benchmarks for Android, such as AM-Bench [8]
and Android Workload Suite [7], do not target apps mak-
ing extensive use of the microphone/speaker and are not
publicly available.
Instead, we measured the performance
overhead introduced by AuDroid through the following 3 ex-
periments on a Nexus 5 running Android aosp-5.0.1 r1.
We ﬁrst measured the overhead introduced by AuDroid
while handling each access request for the microphone and
speaker, by measuring the time interval from the time the
request is made by the process running the app to the time
the access is granted/denied by the Media Server. We found
that, on average over 10,000 requests, the original Android
system required 20.35±1.90µs to handle an access request
for the speaker and 25.36±2.01µs for the microphone. When
AuDroid is activated to mediate accesses to the microphone
and speaker, each access request for the speaker is handled
in 24.47±1.86µs and 30.11±1.99µs for the microphone. The
main reason for the overhead introduced by AuDroid was
the time necessary to recreate the context (i.e., PIDs of in-
volved processes) used to make the access control decision.
Note that enabling the AuDroid notiﬁcation mechanism (icon
microphone and notiﬁcation light) increased the access time
for the microphone to 38.43±2.11µs.
Second, we measured the overhead of running a sequence
of 11 well-known apps (listed on the left side of Table 3)
that create audio sessions, closing each app after running a
30s session before opening the subsequent one. We found
that both, the original Android system and AuDroid, took
591±21.93s to complete on average. Unfortunately, such a
measurement required a human in the loop, but the audio
session length reduced the variability caused by human ac-
tions. The main overhead for AuDroid incurred on opening
and closing speaker and microphone connections, which are
infrequent and low overhead operations.
Third, we used the Voice Recorder app to examine the
overhead if we tried to create audio sessions as quickly as
humanly possible on the device. To do this, the user con-
tinuously tapped on the microphone button, as quickly as
possible, to keep recording new voice messages. The experi-
ment was repeated 5 times over a duration of approximately
one minute. We registered a maximum of 21 access request-
s/minute for the microphone and a maximum of 53 access
requests/minute for the speaker. We found that, with the
highest possible number of audio sessions in a minute, both,
the original Android and AuDroid completed the task in ap-
proximately 59.54s, indicating overhead not detectable.
7. RELATED WORK
Diao et al. [4] discuss how a missing check in the Google
Voice Search (GVS) app allows any app to send an intent
and activate GVS app in Voice Dialer Mode, a mode that un-
locks the screen and allows dialing phone numbers through
voice commands. They propose enabling the GVS app to
suspend any other process trying to access the speaker while
it is actively listening for voice commands, ensuring that
GVS app receives voice commands only from the device
owner and not from audio played by third processes. The
two defense mechanisms discussed above are ad hoc solu-
tions for the GVS app, in that, they do not prevent attacks
against other apps or system services. They also suggest
that voiceprint recognition techniques [9] could be adopted
to verify the identity of the user speaking to the device, by
using biometrics voice characteristics. However, an adver-
sary can still perform replay attacks by using audio com-
mands covertly recoded during a legit interaction of the de-
vice owner with the device itself.
Jang et al. [3] suggest the use of a ﬁne-grained access
control that gives the user the possibility to grant access
to accessibility services for assistive technology apps such as
TextToSpeech [17] and TalkBack [16]. This solution moves
the responsibility to the user on deciding if the access is
deemed security-sensitive. Unfortunately, a user might not
fully understand the security implications of granting such
access.
A diﬀerent approach is proposed by Xu et al. [5], with
the design of SemaDroid, a privacy-aware sensor manage-
ment framework for smartphones. This solution allows users
to monitor sensor usage by installed apps and control the
disclosure of sensed information. SemaDroid can be eﬀec-
tive for sensors like GPS and accelerometer that do not re-
quire perfect information, but not so for the microphone
and speaker. Adjusting the sensing parameters to reduce
the quality of sensor data or replacing this data with mock
audio data will impair the functionality of audio channels.
Researchers haven also explored improvements to access
control mechanisms, but these mechanisms fail to prevent
attacks on audio channels. The main enhancement has been
to permit more software to contribute to access control de-
cisions. The Android Security Framework (ASF) [2] allows
instantiation and deployment of diﬀerent security models as
loadable modules at Android’s app layer, middleware and
kernel. AuDroid could be deployed as a loadable ASF mod-
ule, but it would require porting ASF from Android v4.5 to
Android v5.0.1. We leave it as future work. The Android
Security Module (ASM) [1] provides a wide range of security
hooks at any level of the Android Stack (Kernel, Middle-
ware, Framework, Services and even Apps). In ASM, hooks
notify the ASM bridge which in turn notiﬁes all the ASM
apps that have explicitly registered for those speciﬁc hooks.
Therefore, ASM hooks are not suitable for implementing the
hooks used by AuDroid since, in AuDroid, apps should not
have visibility of the Audio Hooks used to mediate access to
the microphone and speaker.
User-Driven Access Control (UDAC) [6] is the most rele-
vant work for the creation of trusted paths between users and
AuDroid. In UDAC, apps use trusted Access Control Gad-
gets (ACGs) to perform user interaction, which grant apps
permission to access user-owned resources or data produced
by security-sensitive sensors. Unfortunately, switching the
SDK API to require apps to use ACGs would impact mil-
lions of apps, not be backward compatible, and lead to false
positives when errors in using ACG occur.
8. CONCLUSION
In this paper, we presented AuDroid, a framework that
detects and prevents eavesdropping and confused deputy at-
tacks using audio channels. We identiﬁed three diﬀerent
types of audio channels that can be exploited by an adver-
sary: (1) speaker to microphone; (2) speaker to external
party; and (3) external party to microphone. To prevent
against attacks, we argue that access control must authorize
the information ﬂows resulting from the creation of these
audio channels. We then designed AuDroid, an extension to
the reference monitor provided by SELinux to enforce lattice
policies over dynamically-created audio channels. AuDroid
determines the labels associated with all three types of au-
dio channels, enforces information ﬂow policies, and enables
resolution of information ﬂow errors. To enable the reso-
lution of information ﬂow errors, AuDroid uses callbacks to
the privileged apps and/or services that are at risk to ne-
gotiate acceptable resolvers, and uses trusted paths to the
user to notify the device owner of risks and gain approval
for the creation of audio channels. We evaluated AuDroid
against six attacks scenarios, covering the three type of au-
dio channels identiﬁed, on 17 widely-used apps, showing how
AuDroid blocks attacks based on audio channels while pre-
serving functionality for these apps.
9. ACKNOWLEDGMENTS
Research was sponsored by the Army Research Labora-
tory and was accomplished under Cooperative Agreement
Number W911NF-13-2-0045 (ARL Cyber Security CRA).
The views and conclusions contained in this document are
those of the authors and should not be interpreted as rep-
resenting the oﬃcial policies, either expressed or implied,
of the Army Research Laboratory or the U.S. Government.
The U.S. Government is authorized to reproduce and dis-
tribute reprints for Government purposes notwithstanding
any copyright notation here on.
10. REFERENCES
[1] S. Heuser, A. Nadkarni, W. Enck and A. Sadeghi.
ASM: A Programmable Interface for Extending
Android Security, USENIX Security’14.
[2] M. Backes, S. Bugiel, S. Gerling, and P. von
Styp-Rekowsky. Android Security Framework:
Extensible Multi-layered Access Control on Android,
ACSAC’14.
[3] Y. Jang, C. Song, S. Chung, T. Wang and W. Lee.
A11Y Attacks: Exploiting Accessibility in Operating
Systems, CCS’14.
[4] W. Diao, X. Liu, Z. Zhou and K. Zhang. Your Voice
Assistant is Mine: How to Abuse Speakers to Steal
Information and Control Your Phone, SPSM’14.
[5] Z. Xu and S. Zhu. SemaDroid: A Privacy-Aware Sensor
Management Framework for Smartphones,
CODASPY’15.
[6] F. Roesner, T. Kohno, A. Moshchuk, B. Parno,
H. Wang and C. Cowan. User-Driven Access Control:
Rethinking Permission Granting in Modern Operating
Systems, SP’12.
[7] X.F. Li. AWS: Android Workload Suite for User
Interaction Measurement, Intel, 2011.
[8] L. Chayong, K. Euna, and K. Hyesoon. The AM-Bench:
An Android Multimedia Benchmark Suite, Georgia
Tech, 2012.
[9] H. Beigi. Fundamentals of speaker recognition, Spinger,
2011.
[10] A. Bianchi, J. Corbetta, L. Invernizzi,
Y. Frantantonio, C. Kruegel, and G. Vigna. What the
App is That? Deception and Countermeasures in the
Android User Interface, Oakland’15.
[11] D.E. Denning. A Lattice Model of Secure Information
Flow, ACM, 1976.
[12] K.J. Biba. Integrity Considerations for Secure
Computer Systems, MITRE, 1977.
[13] D.E. Bell and L.J. LaPadula. Secure Computer
System: Uniﬁed Exposition and Multics Interpretation.
Deputy for Command and Management Systems, HQ
Electronic Systems Division (AFSC), 1976.
[14] R. Schlegel, K. Zhang, X.Y. Zhou, M. Intwala,
A. Kapadia, and X. Wang. Soundcomber: A stealthy
and context-aware sound trojan for smartphones.
NDSS’11.
[15] Trusted Computer System Evaluation Criteria
(Orange Book). NCSC, 1985.
[16] Android Accessibility - TalkBack. http://developer
.android.com/design/patterns/acces-sibility.html
[17] Android Accessibility - TextToSpeech.
http://developer.android.com/reference/
android/speech/tts/TextToSpeech.html
[18] Security Enhancements for Android.
http://selinuxproject.org/ page/NB SEforAndroid 1
[19] Smartphone OS Market Share. http://www.idc.com/
prodserv/smartphone-os-market-share.jsp
[20] Android 5.0 APIs. http://developer.android.com/
about/versions/android-5.0.html
[21] Java Native Interface.
http://en.wikipedia.org/wiki/Java Native Interface
[22] Android Veriﬁed Boot. https://source.android.com/
devices/tech/security/ve-riﬁedboot/index.html
[23] Android Open Source Project.
https://source.android.com/
[24] What if smart devices could be hacked with just a
voice? http://now.avg.com/voice-hacking-devices/
[25] Android System Permission. http://developer.android
.com/guide/topics/security/ permissions.html
[26] N. Hardy. The Confused Deputy, Operating Systems
Review, 1988.
[27] J.P. Anderson.Computer Security Technology
Planning Study, Volume II, 1972.
[28] S. Smalley and R. Craig. Security Enhanced (SE)
Android: Bringing Flexible MAC to Android, NDSS’13.