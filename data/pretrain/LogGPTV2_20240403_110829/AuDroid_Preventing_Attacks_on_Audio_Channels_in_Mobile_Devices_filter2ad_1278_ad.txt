# AuDroid: A Framework for Detecting and Preventing Eavesdropping and Confused Deputy Attacks Using Audio Channels

## 1. Introduction
In this paper, we present AuDroid, a framework designed to detect and prevent eavesdropping and confused deputy attacks via audio channels on Android devices. We identify three types of audio channels that can be exploited by an adversary:
1. Speaker to Microphone
2. Speaker to External Party
3. External Party to Microphone

To prevent these attacks, we argue that access control must authorize the information flows resulting from the creation of these audio channels. AuDroid is an extension to the reference monitor provided by SELinux, which enforces lattice policies over dynamically-created audio channels.

## 2. AuDroid Design
AuDroid determines the labels associated with all three types of audio channels, enforces information flow policies, and enables resolution of information flow errors. To resolve these errors, AuDroid uses callbacks to the privileged apps and/or services at risk to negotiate acceptable resolvers and trusted paths to the user to notify the device owner of risks and gain approval for the creation of audio channels.

### 2.1 Simple Isolation and User Approval
- **Simple Isolation:** AuDroid isolates system and market apps to ensure they do not interfere with each other.
- **User Approval:** Users are notified and asked for approval before any app accesses the microphone or speaker.

### 2.2 Resolvers
- **Resolver 1:** Allows system apps (e.g., Phone, Hangouts) to play approved ring tones and notification sounds even when the external party is identified as low-secrecy.
- **Resolver 2:** Allows market apps (e.g., Pandora, Viber) to play approved audio files that do not contain malice, such as ring tones, notification sounds, and sound tracks, even when the external party is identified as high-integrity.

By combining user approval and resolvers, AuDroid ensures that all tested apps run correctly without impacting system functionality.

## 3. Performance Overhead
We measured the performance overhead introduced by AuDroid through three experiments on a Nexus 5 running Android aosp-5.0.1 r1.

### 3.1 Access Request Handling
- **Original Android System:**
  - Speaker: 20.35 ± 1.90 µs
  - Microphone: 25.36 ± 2.01 µs
- **AuDroid:**
  - Speaker: 24.47 ± 1.86 µs
  - Microphone: 30.11 ± 1.99 µs
  - With Notification Mechanism: 38.43 ± 2.11 µs

The main reason for the overhead is the time required to recreate the context used to make the access control decision.

### 3.2 Running Sequence of Apps
- **Apps Tested:**
  1. Snapchat (Take Video)
  2. Facebook (Send Voice Message)
  3. WhatsApp (Send Voice Message)
  4. Voice Recorder (Send Voice Message)
  5. Viber (Send Voice Message)
  6. Google Voice Search (Voice Search)
  7. Browser (Watch Video)
  8. Skype (Video Call)
  9. Call Recorder (Record Phone Call)
  10. Pandora (Listen to a Song)
  11. Spotify (Listen to a Song)

- **Results:**
  - Both original Android and AuDroid took 591 ± 21.93 seconds on average to complete the sequence.

### 3.3 Continuous Recording
- **Experiment:**
  - The user continuously tapped the microphone button to record new voice messages.
  - Maximum access requests/minute: 
    - Microphone: 21
    - Speaker: 53
- **Results:**
  - Both original Android and AuDroid completed the task in approximately 59.54 seconds, indicating no detectable overhead.

## 4. Related Work
- **Diao et al. [4]:** Discusses how a missing check in the Google Voice Search (GVS) app allows any app to activate GVS in Voice Dialer Mode. They propose suspending other processes accessing the speaker while GVS is active.
- **Jang et al. [3]:** Suggests fine-grained access control for accessibility services, giving users the ability to grant access to assistive technology apps.
- **Xu et al. [5]:** Proposes SemaDroid, a privacy-aware sensor management framework for smartphones, allowing users to monitor and control sensor usage.
- **Android Security Framework (ASF) [2] and Android Security Module (ASM) [1]:** Provide mechanisms for extending security models, but these mechanisms fail to prevent attacks on audio channels.
- **User-Driven Access Control (UDAC) [6]:** Uses trusted Access Control Gadgets (ACGs) for user interaction, but switching the SDK API to require ACGs would impact millions of apps and lead to false positives.

## 5. Conclusion
AuDroid is a robust framework that detects and prevents eavesdropping and confused deputy attacks using audio channels. It enforces information flow policies and enables resolution of information flow errors. Our evaluation shows that AuDroid effectively blocks attacks based on audio channels while preserving functionality for 17 widely-used apps.

## 6. Acknowledgments
This research was sponsored by the Army Research Laboratory under Cooperative Agreement Number W911NF-13-2-0045 (ARL Cyber Security CRA). The views and conclusions in this document are those of the authors and should not be interpreted as representing the official policies of the Army Research Laboratory or the U.S. Government.

## 7. References
[1] S. Heuser, A. Nadkarni, W. Enck, and A. Sadeghi. ASM: A Programmable Interface for Extending Android Security, USENIX Security’14.
[2] M. Backes, S. Bugiel, S. Gerling, and P. von Styp-Rekowsky. Android Security Framework: Extensible Multi-layered Access Control on Android, ACSAC’14.
[3] Y. Jang, C. Song, S. Chung, T. Wang, and W. Lee. A11Y Attacks: Exploiting Accessibility in Operating Systems, CCS’14.
[4] W. Diao, X. Liu, Z. Zhou, and K. Zhang. Your Voice Assistant is Mine: How to Abuse Speakers to Steal Information and Control Your Phone, SPSM’14.
[5] Z. Xu and S. Zhu. SemaDroid: A Privacy-Aware Sensor Management Framework for Smartphones, CODASPY’15.
[6] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. Wang, and C. Cowan. User-Driven Access Control: Rethinking Permission Granting in Modern Operating Systems, SP’12.
[7] X.F. Li. AWS: Android Workload Suite for User Interaction Measurement, Intel, 2011.
[8] L. Chayong, K. Euna, and K. Hyesoon. The AM-Bench: An Android Multimedia Benchmark Suite, Georgia Tech, 2012.
[9] H. Beigi. Fundamentals of Speaker Recognition, Springer, 2011.
[10] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Frantantonio, C. Kruegel, and G. Vigna. What the App is That? Deception and Countermeasures in the Android User Interface, Oakland’15.
[11] D.E. Denning. A Lattice Model of Secure Information Flow, ACM, 1976.
[12] K.J. Biba. Integrity Considerations for Secure Computer Systems, MITRE, 1977.
[13] D.E. Bell and L.J. LaPadula. Secure Computer System: Unified Exposition and Multics Interpretation. Deputy for Command and Management Systems, HQ Electronic Systems Division (AFSC), 1976.
[14] R. Schlegel, K. Zhang, X.Y. Zhou, M. Intwala, A. Kapadia, and X. Wang. Soundcomber: A Stealthy and Context-Aware Sound Trojan for Smartphones. NDSS’11.
[15] Trusted Computer System Evaluation Criteria (Orange Book). NCSC, 1985.
[16] Android Accessibility - TalkBack. http://developer.android.com/design/patterns/accessibility.html
[17] Android Accessibility - TextToSpeech. http://developer.android.com/reference/android/speech/tts/TextToSpeech.html
[18] Security Enhancements for Android. http://selinuxproject.org/page/NB_SEforAndroid_1
[19] Smartphone OS Market Share. http://www.idc.com/prodserv/smartphone-os-market-share.jsp
[20] Android 5.0 APIs. http://developer.android.com/about/versions/android-5.0.html
[21] Java Native Interface. http://en.wikipedia.org/wiki/Java_Native_Interface
[22] Android Verified Boot. https://source.android.com/devices/tech/security/verifiedboot/index.html
[23] Android Open Source Project. https://source.android.com/
[24] What if Smart Devices Could Be Hacked with Just a Voice? http://now.avg.com/voice-hacking-devices/
[25] Android System Permission. http://developer.android.com/guide/topics/security/permissions.html
[26] N. Hardy. The Confused Deputy, Operating Systems Review, 1988.
[27] J.P. Anderson. Computer Security Technology Planning Study, Volume II, 1972.
[28] S. Smalley and R. Craig. Security Enhanced (SE) Android: Bringing Flexible MAC to Android, NDSS’13.