# C-Sim: The C Language Enhancement for Discrete-Time Simulations

**Authors:**
- Jan Hlavicka
- Stanislav Racek

**Affiliations:**
- Czech Technical University in Prague
- University of West Bohemia in Pilsen

**Contact:**
- Email: PI:EMAIL, PI:EMAIL

## Abstract
This paper introduces the C-Sim simulation environment, which enables the execution of interleaved processes using a global simulation time concept. C-Sim was utilized within the EU/IST project Fault Injection for Time Triggered (FIT) to build a model of TTP/C protocol-based real-time embedded computer systems, facilitating fault injection and dependability verification. C-Sim is suitable for modeling discrete-time systems, parallel programs, and traditional applications. The C-coded parts of an application can be directly integrated into C-Sim-based simulations. C-Sim is freely available at [www.c-sim.zcu.cz](http://www.c-sim.zcu.cz), including a user manual.

## 1. C-Sim Characteristics
C-Sim is a simple program enhancement for the C language (ANSI specification) used to create models based on pseudo-time simulation. The C-Sim kernel is a library of basic object types and operations, designed to be portable and machine-independent. While C lacks built-in tools for object-oriented programming, C-Sim implements some of these principles using predefined macro commands, inspired by SIMULA.

## 2. C-Sim Portability
The C-Sim kernel is ANSI-C portable, ensuring that any C program using only the kernel can also be made ANSI-C portable. Customized run-time environments can be created for managing specific classes of simulation experiments. Simple run-time environments have been developed for MS DOS, X-Windows, and NT Windows. A complex, application-dependent run-time environment, including a separate software layer, can be constructed as needed.

## 3. C-Sim Application Areas
C-Sim is applicable in all traditional areas of discrete-time simulation, such as queuing networks. It was used in the EU/IST project FIT to build a model of TTP/C protocol-based real-time embedded computer systems, enabling fault injection and tracking. The model's source code includes two main software layers:
- **C-Reference Model of TTP/C Protocol:** A C-language coded TTP/C specification, including data types (CNJ, MEDL) and functions (TTP/C services).
- **C-Sim Code for (Abstract) Process Controller:** This serves as a template to create the required number of TTP/C processes (abstract cluster controllers).

The process-oriented form of the simulation model allows for the easy inclusion of other processes, such as those for application-controlled objects. For example, the BBW-4W (Brake-By-Wire for 4 wheels) system, developed by Volvo, was implemented in C-Sim as part of the FIT project.

## 4. C-Sim Case Study
Another case study involving C-Sim was presented in [3], where it was used to evaluate fault tolerance in a process controller. This work was published in *Simulation Practice and Theory*.

## References
1. [C-Sim Project Website](http://www.c-sim.zcu.cz)
2. [FIT Project Website](http://www.fit.zcu.cz)
3. J. Hlavicka, S. Racek, and P. Herout. "Fault Tolerance Using Simulation: Evaluation of Process Controller." *Simulation Practice and Theory*, Volume 7, Issue 8, March 2000, pp. 769-790. ISSN 0928-4869.

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:11:30 UTC from IEEE Xplore. Restrictions apply.**