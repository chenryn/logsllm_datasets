com.rainbird
Agricultural Equip.
Agricultural Equip.
Smart Light
Agricultural Equip.
Category
# Device
4
2
2
1
1
Table 4: Firmware using private MAC address.
To further understand why our algorithm works, we plot the
distribution of the target function values N(x) across different candi-
date base addresses in Figure 7a and Figure 7c using two firmware
samples from Nordic and TI, respectively. As shown, the target
function value at the recovered base address (e.g., N(x)=35) is the
maximum one, and this peak effect exists in all the firmware we
tested. Next, we present the distribution of the recovered base ad-
dresses and their N(x) values across all the firmware in Figure 7b
and Figure 7d for Nordic and TI firmware, respectively. It can be in-
ferred that the base addresses range from 0x0 to 0x3C000, showing
that they are actually highly diversified across firmware, and the dis-
tribution of N(x) is significantly different between the two vendors.
Identity Tracking Vulnerability Identification. According to
5.2.2
the detection policies described in §4.3, there are two ways to iden-
tify identity tracking vulnerabilities: one is through detecting static
MAC address, and the other is through detecting static UUIDs.
Static MAC address identification. Among these 538 devices,
FirmXRay discovers that nearly all of them (98.1%) have configured
random static addresses that do not change periodically. For the
rest 10 (1.9%) devices, their MAC addresses are configured to be
private that change periodically, which are shown in Table 4. We
can notice that these devices belong to car accessories, agricultural
equipment, and smart lights. Note that some of the devices have
the same firmware name such as cogobeacon.
Static UUID identification. As shown in Table 5, FirmXRay has
discovered 1, 807 service UUIDs and 1, 699 characteristic UUIDs,
from 651 (82.1%) firmware (for the rest 17.9% firmware, they do
not have static UUIDs as the corresponding APIs are not invoked).
To understand why there are so many static UUIDs, we look into
the firmware code to see how these UUIDs are defined, e.g., by
SIG standard or by each manufacture. Based on the parameters of
the APIs in Table 1, we are able to identify the UUID types. For
the service UUIDs, they can be divided into three types: primary
type (standardized), secondary type (vendor-specific), and invalid
type. Most of the UUIDs (98.5%) are primary type, but a very small
portion of them (1.5%) are defined as invalid by the developers
(which is likely caused by programmer’s mistakes). As for the char-
acteristic UUIDs, 64.8% of them are customized (vendor-specific),
and 20.1% are standardized by Bluetooth SIG [1], while the rest
15.1% are unknown. These results imply that most of the firmware
manufactures tend to use customized static UUIDs.
5.2.3 Active MITM Vulnerability Identification. To understand how
pairing and bonding are performed among devices, we first present
the results of the pairing mode, as shown from the 2nd row to 5th
row of Table 6. For a particular device, it can be configured to be
only (1) a peripheral (e.g., smart band), (2) only a central (e.g., robot
dog), (3) either a peripheral or a central (e.g., smart home switch),
and (4) neither of them (e.g., beacon). As presented in Table 6, it is
Item
# Service
Type
# Primary service UUID
# Invalid service UUID
# Characteristic
Type
# Standard characteristic UUID
# Customized characteristic UUID
# Unknown characteristic UUID
Read Permission
# Characteristic w/ No Protection
# Characteristic w/ Encrypted Read
# Characteristic w/ Authenticated Read
Write Permission
# Characteristic w/ No Protection
# Characteristic w/ Encrypted Write
# Characteristic w/ Authenticated Write
#
1, 807
1, 779
28
1, 699
341
1, 101
257
1, 631
59
9
1, 655
37
7
%
100
98.5
1.5
100
20.1
64.8
15.1
96.0
3.5
0.5
97.4
2.2
0.4
Table 5: Identified UUIDs and characteristic permissions.
quite common for the device to be of peripheral-only mode (47.4%)
since many devices rely on mobile apps to discover and connect
with them. Developers also tend to configure them to support both
peripheral and central mode (34.5%), but rarely specify central-
only mode (1.1%). Interestingly, we find there are 16.9% of devices
that do not invoke any of these pairing functions, and the reasons
may be two-folds. First, they are non-connectable beacons [24],
which keep broadcasting information but never connect to the
surrounding devices. Second, a number of devices directly skip
the pairing procedure to favor user convenience. With respect to
bonding (the 6th row), FirmXRay discovers that 48.9% of devices
perform bonding to maintain the session key after pairing. For the
rest 41.1%, they need to restart the pairing process with the peer
device in future connections, which may expand the attack surface
for eavesdropping of the encryption key during pairing.
Next, we present the details of how FirmXRay identifies vulnera-
bilities based on Just Works pairing and characteristic permissions.
Just Works pairing identification. As presented in the 8th row
of Table 6, 59.1% of devices directly specify Just Works pairing since
they do not explicitly declare MITM protection or I/O capabilities.
Among those that do not use Just Works pairing, FirmXRay has
identified two types of pairing methods: passkey entry and OOB. We
find that none of the devices in our study supports numeric com-
parison. Interestingly, although there are 67 (12.5%) Nordic-based
devices that support passkey entry or OOB pairing, their implemen-
tations are actually flawed, which means they will be eventually
downgraded to Just Works pairing. These 67 devices can be broken
down into 37 and 30 devices that have incorrectly implemented
the passkey entry and OOB pairing, respectively, as shown in the
9th and 10th rows of Table 6. The reason is that their firmware fail
to invoke the SD_BLE_GAP_AUTH_KEY_REPLY API to reply the peer
device with an authenticated key, which is a mandatory step for
correct implementations [12]. Therefore, by adding the 318 devices
that directly specify Just Works pairing with those having flawed
implementations, we have 385 (71.5%) devices use Just Works pair-
ing. These devices essentially do not provide any protection against
active MITM attacks at the BLE link layer.
In contrast, we find that only 30 devices have correctly imple-
mented passkey entry or OOB pairing. We further investigate their
categories, and it turns out they are smart keyboards, smart debit
Item
# Total Device
Pairing Mode
# Peripheral only
# Central only
# Peripheral and central
# No pairing
# Device w/ bonding
# Device w/ active MITM vulnerability
# Device w/ Just Works pairing only
# Device w/ flawed passkey entry implementation
# Device w/ flawed OOB implementation
# Device w/ secure pairing
# Device w/ correct passkey entry implementation
# Device w/ correct OOB implementation
N
513
230
6
186
91
250
384
317
37
30
6
3
3
T Total
25
538
25
0
0
0
13
1
1
0
0
24
24
0
255
6
186
91
263
385
318
37
30
30
27
3
%
100
47.4
1.1
34.5
16.9
48.9
71.5
59.1
6.9
5.6
3.8
3.4
0.4
Table 6: Pairing configurations of devices (N:Nordic, T:TI).
cards, wearable, and so on. In addition, it is more common for TI
firmware to configure secure pairing methods such as passkey entry,
as indicated in the last two rows of Table 6. Overall, our results
reveal that most of the BLE devices tend to use only Just Works
pairing, which is possibly due to the lack of hardware capability or
the misconfiguration from the developers.
Characteristic permission analysis. In addition to the pairing
configurations, the characteristic permission can also reveal the
active MITM vulnerability. As shown in Table 5, we further analyze
the security permissions of the 1, 699 BLE characteristics, which
come from the Nordic-based firmware (we did not identify them
from any TI firmware because them do not invoke corresponding
APIs to configure these permissions). The results are broken down
into read and write permissions, respectively. To our surprise, we
discover that the vast majority (over 96%) of the characteristics speci-
fies the lowest security level of permissions, showing that they can be
arbitrarily read or written by peer devices without any encryption
and authentication. This further implies that they can be directly
exploited once the firmware is compromised by MITM attacks.
In contrast, only very few number of the characteristics require
encryption or authentication before read (4.0%) and write (2.6%).
These characteristics usually come from the security-sensitive de-
vices such as smart locks, smart home switches, and medical devices.
5.2.4 Passive MITM Vulnerability Identification. The passive MITM
vulnerability is determined by whether the firmware has enforced
LESC pairing to secure the key exchange, as described in the detec-
tion policy in §4.3. Among the 538 devices, FirmXRay discovers that
98.5% of them fail to do so, as reported in the last row of Table 2. As
such, these devices can be vulnerable to passive MITM attacks if there
is no application-layer encryption, allowing any attackers to eaves-
drop the encryption key and read sensitive device data. In contrast,
only 8 (1.5%) devices have eliminated this vulnerability by enforc-
ing the LESC pairing. The detailed descriptions of these devices are
shown in Table 7. Among them, there are many firmware versions
mapped to the same device such as DogBodyBoard and CPRmeter.
5.3 Attack Case Studies
To exploit the three types of vulnerabilities identified, we corre-
spondingly design three types of attacks with real devices. Due
to limited budget, we purchased 5 vulnerable devices as shown in
Table 8. We have three criteria when choosing the devices: (1) the
Firmware Name Mobile App
DogBodyBoard
BW_Pro
Smart_Handle
Sma05
CPRmeter
WiJumpLE
nRF Beacon
Hoot Bank
Category
com.wowwee.chip
Robot
com.ecomm.smart_panel
Tag
com.exitec.smartlock
Smart Lock
com.smalife.watch
Wearable
com.laerdal.cprmeter2
Medical Device
com.wesssrl.wijumple
Sensor
no.nordicsemi.android.nrfbeacon Beacon
com.qvivr.hoot
Debit Card
# Version
16
1
1
1
4
1
1
1
Table 7: Firmware that enforce LESC pairing.
device needs to be in the top categories in Table 2, (2) the device
should not be too costly (we therefore excluded medical device
and robot), and (3) the device should simultaneously contain the
three vulnerabilities identified (to maximize the coverage of the
vulnerabilities). Based on the functionality of these devices, we
design three types of attacks: user tracking, unauthorized control,
and sensitive data eavesdropping. To launch these attacks, we built
an attack device based on a Nordic NRF52-DK board [13].
A1. User tracking. Vulnerable BLE devices carried along with
users are desired targets for tracking attacks, and we have three
such devices: Nuband, Chipolo, and XOSS. Although BLE devices
stop broadcasting after they are connected, we demonstrated our
attack still succeeded in the following two scenarios. The first sce-
nario is when companion apps are closed in both Android and iOS,
and then the device disconnects with the app and starts to broadcast
its MAC address. The second scenario is in iOS when the compan-
ion app enters the background, it in fact terminates the connection
due to the limited Bluetooth capability in background [4], and the
device also starts broadcasting.
A2. Unauthorized control. For devices that use Just Works pair-
ing, they can be vulnerable to active MITM attacks such as spoofing.
We demonstrated this attack with a smart home button pusher,
which is usually placed on electronic switches for remote control,
such as lights, coffee machines, and even more safety-critical ones
such as door locks. However, since the device has to use Just Works
pairing, it does not provide any authentication to recognize unau-
thorized users, and thus we successfully sent spoofed commands
to remotely control the lights in our test.
A3. Sensitive data eavesdropping. Among the 5 devices, many
of them, e.g., Nuband, Kinsa Smart, and XOSS, carry sensitive user
data (e.g., steps, temperature, and travel distance). We demonstrated
that it is possible to perform eavesdropping attack to obtain the
LTK to decrypt the BLE data. Specifically, we first listened to all
messages during the pairing process, and applied an offline brute-
force searching to find the appropriate TK to calculate the LTK,
which took only a few seconds. Note that in Just Works pairing, the
attack is much easier since the TK is a hardcoded 0-string [32].
6 DISCUSSION
False positives (FP) and false negatives (FN) of FirmXRay. In
theory, FP can exist due to the incorrect disassembling, which can
be caused by a lack of sufficient absolute pointers in firmware, re-
sulting in less number of constraints to differentiate the optimal
base address with others. However, as demonstrated in our evalua-
tion, FirmXRay correctly recovered all the base addresses according
to our ground truth evaluation. Similarly, the incorrect base address