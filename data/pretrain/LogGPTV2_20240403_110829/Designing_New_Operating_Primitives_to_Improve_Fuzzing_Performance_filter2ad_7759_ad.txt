Fuzzing in parallel. After several unsuccessful mutations, L peri-
odically peeks through the shared corpus directory to obtain new
test cases saved by other running instances. To obtain a new test
case from the shared directory, L first traverses the directory and
only reads those files whose time is greater than the time when in-
voking the directory read operation. After reading input test cases,
L calculates the SHA1 value and only re-executes those test cases
whose SHA1 value is missing in the hash table. Later, L saves the
newly executed test case to its own corpus after deciding whether
it was interesting and then updates the overall coverage L has
achieved. L repeats this whole process for all the saved test cases
in the shared directory and then it moves to the mutating phase to
create new test cases that can further improve the coverage of the
program.
Bottlenecks. LibFuzzer’s in-process model brings restrictions on
the execution of the target but overcomes the issue of forking (un-
like AFL). Thus, the snapshot() system call makes no improvement
on its performance. However, it still suffers from two design issues
which can be solved by the other two primitives: 1) The current de-
sign of collaborative syncing is vague, as each instance re-executes
the interesting test cases even if other instances have already gained
their related features. It is not wise for different LibFuzzer instances
to sync through the file system because they already have a copy
of the generated corpus in their own memory, which can be eas-
ily shared among themselves. 2) Moreover, the syncing phase of
LibFuzzer suffers from file system overhead because it does read
and write to the same shared-corpus directory, which is not scalable,
as shown by prior research [32]. The file system induces a lot of
overhead in order to maintain the consistency of the data, which is
not entirely required for applications like fuzzers. We now describe
our proposed changes to improve the scalability of LibFuzzer with
increasing core count based on the new operating primitives.
4.3.1 Efficient Collaborative Syncing. LibFuzzer already pro-
vides a notion of collaborative fuzzing by allowing any LibFuzzer
instance to get the new test cases from other instances because all
instances write their new test cases to a specific shared corpus di-
rectory. To remove the overhead of the redundant file system based
operations, we use the shared in-memory test case log (see §3.3) by
exposing the test case, its coverage bitmap, and the SHA1 of the test
case. Moreover, each LibFuzzer instance (L) also maintains a local
table of how many test cases it has popped out from the log of other
instances. Thus, after finishing a syncing round, L increases the
number of new test cases it has read from a collaborating instance
in its local table. In addition, now the LibFuzzer does not re-execute
the copied corpus since it can directly update the coverage bitmap,
which is also shared among all collaborators. Hence, by merely
utilizing a fraction of memory, we not only remove the redundant
executions, but also improve the the file system overhead in terms
of reading corpus data from the shared directory.
4.3.2 Removing File System Contention. The shared in-memory
test case log partially resolves the file system overhead by removing
the directory traversal and file reading during the syncing stage.
However, the current design of LibFuzzer still suffers from the
contention of writing the interesting corpus data to the shared
directory. In addition, it also maintains the log of each running
instance in the root directory where the application is being fuzzed.
Unfortunately, both of these designs are non-scalable. First, Linux
holds a directory lock when creating a new file. To solve the con-
tention, our two-tiered file system service creates a local directory
on memory file system for each LibFuzzer instance to write both
the interesting corpus data and its log. The service daemon copies
the data from the first tier, memory file system, to the second tier file
system (storage medium) in order to provide an eventual durability
(see §3.2).
5 IMPLEMENTATION
We implemented and applied our design decisions to both AFL (ver-
sion 2.40b) and LibFuzzer, a part of LLVM v4.0.0, on Linux v4.8.10.
5.1 Operating Primitives
We implemented a new x86_64 system call snapshot() for generic
fuzzers to clone an instance of the target program. It supports
snapshotting the memory and other system states of a running
process and rolling a snapshotted process back to its original state.
snapshot() has system call number 329 and its implementation
involves 750 lines of code (LoC) introduced into the Linux kernel.
snapshot() also requires the cooperation of the page fault handling
process in the kernel in order to track memory updates during a
fuzzing run. We also modified the exit and signal handling routine
of a user process in the kernel, in order to prevent a snapshotted
process from being accidentally terminated at runtime, and mean-
while ensure that a process can normally handle these signals in an
expected way if it is not in snapshot. These changes involve around
100 LoC scattering at different places in the kernel source.
We also developed a library containing six interfaces of the
shared in-memory test case log in around 100 LoC. In particular,
the test case log is implemented as a POSIX shared memory object
supported by /dev/shm utility in Linux.
Furthermore, we wrote a 100 LoC simple dual file system service
daemon which can be launched by a fuzzer for a private working
directory on partitioned tmpfs and periodical test case flushing (see
§3.2).
5.2 Applications
We applied all of our three operating primitives to AFL, and only
the second and third ones to LibFuzzer.
In order to make AFL use snapshot() instead of fork() to clone
a new target instance, we rewrote AFL’s fork server instrumented
into the target application during compilation without modifying
10
Session K2:  Fuzzing Finer and FasterCCS’17, October 30-November 3, 2017, Dallas, TX, USA2322much of its original working mechanism. However, the timeout
and other kill signals are particularly handled since the snapshot
server runs within the same process of the target instance in our
design. Whatever errors occur during a fuzzing run, the snapshot
server must be maintained. Our new snapshot server (for 64-bit
target) has around 350 LoC.
Moreover, we implemented a new function to replace the old
one for syncing test cases from other fuzzer instances. It utilizes the
shared in-memory test case log by linking the library and invoking
related interfaces (see §3.3). An individual AFL instance updates its
own test case log with the path, size and coverage information of
the generated test cases. It also keeps track of the test case logs
belonging to other AFL instances. The new syncing phase introduces
around 50 LoC into AFL’s code.
In LibFuzzer, similar to AFL, we can have a per-thread in-memory
shared queue among the instantiated instances of LibFuzzer, which
is individually updated by the instance, and a list table to keep tracks
of how many corpus data an instance has read from each neighbors.
We added around 200 LoC into LibFuzzer to implement our ideas.
For both fuzzers, we launch our two-tiered file system service
daemon to have a separate directory on tmpfs for each fuzzer in-
stance. The daemon provides the eventual durability, which allows
us to resume previous fuzzing in the future.
6 EVALUATION
We evaluate our proposed design decisions by answering the fol-
lowing questions:
• What is the overall impact of our design choices on two
• How does each design choice help improve the scalability of
classes of fuzzers (i.e., AFL and LibFuzzer)? (§6.1, §6.2)
fuzzers? (§6.3)
Experimental setup. We evaluate the scalability of two fuzzers—
AFL and LibFuzzer—on an eight-socket, 120-core machine with Intel
Xeon E7-8870 v2 processors. Even though it is not conventionally
used at this moment, we use it for the purpose of research to ex-
trapolate the performance characteristics of future, large multi-core
machines. We choose libraries from Google’s fuzzer test suite [24]
to evaluate both AFL and LibFuzzer.
Since the fuzzer test suite already provides the wrapper function
for fuzzing libraries with LibFuzzer, we wrote our own wrapper to
fuzz these libraries with AFL. In particular, we changed the fuzzing
entry for LibFuzzer into the main() function, which can be com-
piled into an executable. LibFuzzer assumes that the input is stored
in a buffer with a certain size. To test AFL by reusing the test suites
for LibFuzzer, our wrapper opens the input test case whose path
is indicated by the argument of the program, and then loads the
test case into a memory buffer. Moreover, we observe that AFL also
allows the target application to directly receive input data from
stdin and performs different file operations from ones used for
delivering input through file. To evaluate this interactive fuzzing
mode, we also fuzzed djpeg built on top of IJG’s libjpeg, which
accepts standard input. Each fuzzing test lasts for 5 minutes for
both AFL and LibFuzzer, and for every used core, we bind a single
fuzzer instance to it.
In the experiment, the file system service checks the usage of
the in-memory file system (i.e., tmpfs) every 30 seconds in the
experiment. If the usage exceeds 80%, then the service daemon
flushes the oldest 25% test cases to the disk file system (i.e., SSD)
(see §4.2.2).
Performance metric. We aim at improving the overall perfor-
mance of fuzzers, regardless of their fuzzing strategies (e.g., muta-
tion policies). To demonstrate such performance benefits, we use
executions per second to evaluate a fuzzer, which is more direct and
scientific. Using the notation of path coverage or bugs found to
show performance improvement tends to be subjective as fuzzers
saturate too quickly with a small corpus size in a laboratory envi-
ronment [7].
6.1 AFL
Figure 5 presents the results of our optimized AFL version (opt—
AFLOPT) against the original version (stock—AFL). AFLOPT improves
the fuzzing execution by 6.1 to 28.9× for nine tested libraries at
120 cores. Moreover, our techniques not only drastically decrease
the average syncing time per core of AFLOPT by 41.7 to 99.8%, but
also enable generating more new test cases by mutating the input
corpus data. Furthermore, we simply provide an empty file as the
seed input when fuzzing openssl-1.0.2d. Because of the serious
performance bottleneck, timeout occurs when several AFL instances
process the only input test case while AFL cannot proceed if there is
no valid input test case for mutation. That explains why there is no
experimental result for openssl-1.0.2d at 90, 105 and 120 cores.
Note that AFLOPT does not change the fuzzing algorithm of stock—
AFL, but our operating primitives remove the contention either from
the inherent design flaws of AFL or from the underlying OS. More-
over, other evolutionary techniques [7, 34] can benefit from our
operating primitives to expedite the process of concurrently finding
new bugs. Another interesting observation is that besides libpng,
woff, boringssl, and c-ares, the other five applications show al-
most linear scalability because these applications do not frequently
invoke dynamic memory allocations and thus are free from kernel
memory allocation overhead such as cgroup accounting or even
page cache maintenance by the zone allocator of the kernel, which
is currently the hot spot in the kernel.
We also found that some applications (harfbuzz, libpng, woff,
libxml and c-ares) suffer from the known open()/close() system
call overhead while reading input test cases [32]. We further remove
this overhead by employing a multi-partition file system in which
each slave saves the data in the own partition as described in §3.2.
This approach further improves the scalability of these libraries by
1.2 to 2.3×.
In summary, our AFLOPT version is the most current lightweight
approach to fuzz any application without realizing on any special-
ized fuzzers that limit the scope of fuzzing, and finding new bugs
efficiently.
6.2 LibFuzzer
Figure 6 presents the results of fuzzing some of the libraries with
LibFuzzer. We choose a set of libraries because LibFuzzer inher-
ently suffers from its threading design limitation, which exits if
any error occurs or if the program encounters any signals. We
observe that LibFuzzer improves applications’ fuzzing execution
11
Session K2:  Fuzzing Finer and FasterCCS’17, October 30-November 3, 2017, Dallas, TX, USA2323500k
400k
300k
200k
100k
0k
200k
160k
120k
80k
40k
0k
400k
300k
200k
100k
0k
c
e
s
/
s
c
e
x
E
c
e
s
/
s
c
e
x
E
c
e
s
/
s
c
e
x
E
(a) harfbuzz
stock
opt
1
15
30
60
45
(d) libxml
75
90
105
120
1
15
30
45
60
75
90
105
120
(g) re2
1
15
30
45
60
#core
75
90
105
120
800k
600k
400k
200k
0k
560k
480k
400k
320k
240k
160k
80k
0k
200k
150k
100k
50k
0k
(b) libpng
1
15
30
60
45
75
(e) boringssl
90
105
120
1
15
30
45
60
75
90
105
120
(h) openssl-1.0.2d
1
15
30
45
60
#core
75
90
105
120
1000k
800k
600k
400k
200k
0k
600k
500k
400k