recommendations expressed in this publication are those of
the authors and do not necessarily reflect the views of the US
Government. We would like to thank the anonymous reviewers
for their valuable feedback, and Haohuang Wen for the support
regarding the dataset collected in FirmXRay [59].
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1094
REFERENCES
[1] 32bitmicro. libc malloc. https://github.com/32bitmicro/newlib-nano-1.0/blob
/master/newlib/libc/sys/linux/malloc.c#L2815, 2012.
[2] 32bitmicro. nanomalloc. https://github.com/32bitmicro/newlib-nano-1.0/blob
/master/newlib/libc/stdlib/mallocr.c#L192, 2012.
[3] Dennis Andriesse, Xi Chen, Victor Van Der Veen, Asia Slowinska, and Herbert
Bos. An in-depth analysis of disassembly on full-scale x86/x64 binaries. In
25th USENIX Security Symposium, pages 583–600, 2016.
[4] angr. The Great ARM CFG Challenge 1. https://github.com/angr/angr/pul
l/1668, 2020.
[5] angr. The Great ARM CFG Challenge 2. https://github.com/angr/angr/pul
l/2075, 2020.
[6] Orlando Arias, Dean Sullivan, and Yier Jin. Ha2lloc: Hardware-assisted secure
In Proceedings of the Hardware and Architectural Support for
allocator.
Security and Privacy, pages 1–7. 2017.
[7] ARM. Cortex-m3 embedded software development. https://www.eecs.umi
ch.edu/courses/eecs373/readings/ARM Cortex AppNote179.pdf, 2007.
[8] ARM. Cortex-m3 vector table. https://developer.arm.com/documentation/
dui0552/latest/the-cortex-m3-processor/exception-model/vector-table, 2007.
[9] ARM. Default hml used by mbed ide. https://os.mbed.com/users/mbed o
fficial/code/mbed//rev/65be27845400/, 2021.
[10] ARM. mbed ide. ide.mbed.com, 2021.
[11] Tiffany Bao, Jonathan Burket, Maverick Woo, Rafael Turner, and David
Brumley. BYTEWEIGHT: Learning to recognize functions in binary code. In
23rd USENIX Security Symposium USENIX Security 14), pages 845–860, 2014.
[12] Michael Barr. Firmware-specific bug #5: Heap fragmentation. https://embedded
gurus.com/barr-code/2010/03/firmware-specific-bug-5-heap-fragmentation/,
2010.
[13] Jeff Bonwick et al. The slab allocator: An object-caching kernel memory
allocator. In USENIX summer, volume 16. Boston, MA, USA, 1994.
[14] Cristian Cadar and Koushik Sen. Symbolic execution for software testing:
three decades later. Communications of the ACM, 56(2):82–90, 2013.
[15] Chen Cao, Le Guan, Jiang Ming, and Peng Liu. Device-agnostic firmware
execution is possible: A concolic execution approach for peripheral emulation.
In Annual Computer Security Applications Conference, pages 746–759, 2020.
[16] CEA IT Security (IT Security at the French Alternative Energies and
Atomic Energy Commission). Sibyl: A miasm2 based function divination.
https://github.com/cea-sec/Sibyl, 2019.
[17] Check Point. Safe-linking - eliminating a 20 year-old malloc() exploit primitive.
https://research.checkpoint.com/2020/safe-linking-eliminating-a-20-year-
old-malloc-exploit-primitive/, 2020.
[18] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin,
XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and
Kehuan Zhang. Iotfuzzer: Discovering memory corruptions in iot through
app-based fuzzing. In NDSS, 2018.
[19] Xi Chen, Asia Slowinska, and Herbert Bos. Membrush: A practical tool
In 2013 20th Working
to detect custom memory allocators in c binaries.
Conference on Reverse Engineering (WCRE), pages 477–478. IEEE, 2013.
[20] Yueqi Chen and Xinyu Xing. Slake: Facilitating slab manipulation for
exploiting vulnerabilities in the linux kernel.
In Proceedings of the 2019
ACM SIGSAC Conference on Computer and Communications Security, pages
1707–1722, 2019.
[21] Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen,
David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and
Mathias Payer. Halucinator: Firmware re-hosting through abstraction layer
emulation. In 29th USENIX Security Symposium USENIX Security 20), pages
1201–1218, 2020.
[22] Clements, Abraham and Gustafson, Eric and Scharnowski, Tobias and Grosen,
Paul and Fritz, David and Kruegel, Christopher and Vigna, Giovanni and
Bagchi, Saurabh and Payer, Mathias. HALucinator: Firmware Re-hosting
through Abstraction Layer Emulation. In USENIX Security Symposium, 2020.
[23] Moritz Eckert. Security implications of tcache. https://sourceware.org/leg
acy-ml/libc-alpha/2018-02/msg00298.html, 2018.
[24] Moritz Eckert, Antonio Bianchi, Ruoyu Wang, Yan Shoshitaishvili, Christopher
Kruegel, and Giovanni Vigna. Heaphopper: Bringing bounded model checking
to heap implementation security.
In 27th USENIX Security Symposium
USENIX Security 18), pages 99–116, 2018.
[25] Embeddedinsights. Question of the week: Do you use or allow dynamic
memory allocation in your embedded design? http://www.embeddedinsigh
ts.com/channels/2010/03/24/question-of-the-week-do-you-use-or-allow-
dynamic-memory-allocation-in-your-embedded-design/, 2012.
[26] Johnson Evan, Bland Maxwell, Zhu YiFei, Mason Joshua, Checkoway
Stephen, Savage Stefan, and Levchenko Kirill. Jetset: Targeted firmware
rehosting for embedded systems.
In 30th USENIX Security Symposium
(USENIX Security 21). USENIX Association, 2021.
[27] Chris Evans. glibc patch. https://sourceware.org/git/?p=glibc.git;a=comm
it;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30, 2017.
[28] Andrew Fasano, Tiemoko Ballo, Marius Muench, Tim Leek, Alexander
Bulekov, Brendan Dolan-Gavitt, Manuel Egele, Aur´elien Francillon, Long
Lu, Nick Gregory, et al. Sok: Enabling security analyses of embedded systems
via rehosting. In ACM ASIA Conference on Computer and Communications
Security (ASIACCS), 2021.
[29] Bo Feng, Alejandro Mera, and Long Lu. P 2 im: Scalable and hardware-
independent firmware testing via automatic peripheral interface modeling. In
Proceedings of the 29th USENIX Security Symposium, 2020.
[30] Fitbit. Fitbit. https://www.fitbit.com/global/us/home, 2022.
[31] Zynamics GmbH. Bindiff manual. https://www.zynamics.com/bindiff/man
ual/#chapUnderstanding, 2020.
[32] GNU.org. The gnu c library (glibc). https://www.gnu.org/software/libc/, 2021.
[33] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry,
Yanick Fratantonio, Davide Balzarotti, Aur´elien Francillon, Yung Ryn Choe,
Christophe Kruegel, et al. Toward the analysis of embedded firmware through
automated re-hosting.
In 22nd International Symposium on Research in
Attacks, Intrusions and Defenses ({RAID} 2019), pages 135–150, 2019.
[34] Sean Heelan, Tom Melham, and Daniel Kroening. Gollum: Modular and
greybox exploit generation for heap overflows in interpreters. In Proceedings
of the 2019 ACM SIGSAC Conference on Computer and Communications
Security, pages 1689–1706, 2019.
[35] Grant Hernandez, Farhaan Fowze, Dave Jing Tang, Tuba Yavuz, Patrick
Traynor, and Kevin RB Butler. Toward automated firmware analysis in the
iot era. IEEE Security & Privacy, 17(5):38–46, 2019.
[36] Muhui Jiang, Yajin Zhou, Xiapu Luo, Ruoyu Wang, Yang Liu, and Kui Ren.
An empirical study on arm disassembly tools. In Proceedings of the 29th ACM
SIGSOFT International Symposium on Software Testing and Analysis, pages
401–414, 2020.
[37] Joseph, Yiu and Andrew, Frame. Cortex-M Processors and the Internet of
Things (IoT). https://community.arm.com/cfs-file/ key/communityserver
-blogs-components-weblogfiles/00-00-00-21-42/White-Paper 2D00 Cor
tex 2D00 M-Processors- 2600 -the-IoT.pdf, 2013.
[38] M Ammar Ben Khadra, Dominik Stoffel, and Wolfgang Kunz. Speculative
disassembly of binary code. In 2016 International Conference on Compliers,
Architectures, and Sythesis of Embedded Systems (CASES), pages 1–10. IEEE,
2016.
[39] Beichen Liu, Pierre Olivier, and Binoy Ravindran. Slimguard: A secure and
memory-efficient heap allocator. In Proceedings of the 20th International
Middleware Conference, pages 1–13, 2019.
[40] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. Pin:
building customized program analysis tools with dynamic instrumentation.
Acm sigplan notices, 40(6):190–200, 2005.
[41] Kenneth Miller, Yonghwi Kwon, Yi Sun, Zhuo Zhang, Xiangyu Zhang, and
Zhiqiang Lin. Probabilistic disassembly. In 2019 IEEE/ACM 41st International
Conference on Software Engineering (ICSE), pages 1187–1198. IEEE, 2019.
[42] Marius Muench, Dario Nisi, Aur´elien Francillon, and Davide Balzarotti.
Avatar2: A multi-target orchestration platform. In Proc. Workshop Binary Anal.
Res.(Colocated NDSS Symp.), volume 18, pages 1–11, 2018.
[43] Marius Muench, Jan Stijohann, Frank Kargl, Aur´elien Francillon, and Davide
Balzarotti. What you corrupt is not what you crash: Challenges in fuzzing
embedded devices. In NDSS, 2018.
[44] Nicholas Nethercote and Julian Seward. Valgrind: a framework for heavyweight
dynamic binary instrumentation. ACM Sigplan notices, 42(6):89–100, 2007.
In
Proceedings of the 17th ACM conference on Computer and communications
security, pages 573–584, 2010.
[45] Gene Novark and Emery D Berger. Dieharder: securing the heap.
[46] Carlos O ´Donell.
Security implications of
tcache.
h t t p s :
//sourceware.org/legacy-ml/libc-alpha/2018-02/msg00313.html, 2018.
[47] Nilo Redini, Andrea Continella, Dipanjan Das, Giulio De Pasquale, Noah
Spahn, Aravind Machiry, Antonio Bianchi, Christopher Kruegel, and
Giovanni Vigna. Diane: Identifying fuzzing triggers in apps to generate
under-constrained inputs for iot devices.
In In Proceedings of the IEEE
Symposium on Security & Privacy (S&P), May 2021.
[48] Chris Rohlf. Isoalloc. https://struct.github.io/iso alloc.html, 2020.
[49] RT-Thread. lwip malloc. https://download.savannah.nongnu.org/releases/
lwip/lwip-1.4.0.zip, 2013.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1095
[50] Jan Ruge, Jiska Classen, Francesco Gringoli, and Matthias Hollick. Franken-
stein: Advanced wireless fuzzing to exploit new bluetooth escalation targets. In
29th USENIX Security Symposium USENIX Security 20), pages 19–36, 2020.
[51] Tobias Scharnowski, Nils Bars, Moritz Schloegel, Eric Gustafson, Marius
Muench, Giovanni Vigna, Christopher Kruegel, Thorsten Holz, and Ali Abbasi.
Fuzzware: Using precise mmio modeling for effective firmware fuzzing.
[52] Secure Mobile Networking Lab (Seemoo-lab). Collection of fitness firmware.
https://github.com/seemoo-lab/fitness-firmware/tree/master/firmwares, 2021.
[53] Shellphish. Educational heap exploitation. https://github.com/shellphish/ho
w2heap, 2020.
[54] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario
Polino, Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser,
Christopher Kruegel, et al. Sok:(state of) the art of war: Offensive techniques
in binary analysis. In 2016 IEEE Symposium on Security and Privacy (SP),
pages 138–157. IEEE, 2016.
[55] Sam Silvestro, Hongyu Liu, Corey Crosser, Zhiqiang Lin, and Tongping
Liu. Freeguard: A faster secure heap allocator. In Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communications Security, pages
2389–2403, 2017.
[56] Sam Silvestro, Hongyu Liu, Tianyi Liu, Zhiqiang Lin, and Tongping Liu.
Guarder: A tunable secure allocator. In 27th USENIX Security Symposium
USENIX Security 18), pages 117–133, 2018.
[57] TrustworthyComputing.
CSAW Embedded Security Challenge.
https://github.com/TrustworthyComputing/csaw esc 2019, 2019.
[58] Richard Wartell, Yan Zhou, Kevin W Hamlen, Murat Kantarcioglu, and
Bhavani Thuraisingham. Differentiating code from data in x86 binaries. In
Joint European Conference on Machine Learning and Knowledge Discovery
in Databases, pages 522–536. Springer, 2011.
[59] Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang. Firmxray: Detecting
bluetooth link layer vulnerabilities from bare-metal firmware. In Proceedings
of the 2020 ACM SIGSAC Conference on Computer and Communications
Security, pages 167–180, 2020.
[60] Christopher Wright, William A Moeglein, Saurabh Bagchi, Milind Kulkarni,
and Abraham A Clements. Challenges in firmware re-hosting, emulation, and
analysis. ACM Computing Surveys (CSUR), 54(1):1–36, 2021.
[61] Wei Wu, Yueqi Chen, Jun Xu, Xinyu Xing, Xiaorui Gong, and Wei Zou.
FUZE: Towards facilitating exploit generation for kernel use-after-free
vulnerabilities. In 27th USENIX Security Symposium USENIX Security 18),
pages 781–797, 2018.
[62] Wang Yan, Zhang Chao, Zhao Zixuan, Zhang Bolun, Gong Xiaorui, Zou Wei,
and Levchenko Kirill. MAZE: Towards automated heap feng shui. In 30th
USENIX Security Symposium (USENIX Security 21). USENIX Association,
August 2021.
[63] Insu Yun, Dhaval Kapil, and Taesoo Kim. Automatic techniques to
systematically discover new heap exploitation primitives. In 29th USENIX
Security Symposium USENIX Security 20), 2020.
[64] Zixuan Zhao, Yan Wang, and Xiaorui Gong. Haepg: An automatic multi-hop
exploitation generation framework. In International Conference on Detection
of Intrusions and Malware, and Vulnerability Assessment, pages 89–109.
Springer, 2020.
[65] Wei Zhou, Le Guan, Peng Liu, and Yuqing Zhang. Automatic firmware
emulation through invalidity-guided knowledge inference. In 30th USENIX
Security Symposium (USENIX Security 21). USENIX Association, 2021.
[66] Zynamics. Zynamics bindiff. https://www.zynamics.com/software.html, 2020.
APPENDIX
A. Function Execution Models
In this Appendix, we provide technical details about the execution
models used to emulate different functions in the firmware image.
Basic Function. When looking for basic functions (as explained
in Section III-B), we simply setup the arguments of the procedure
with values compatible with the prototype of the basic function we
are trying to identify. After that, we simply run the function with
a timeout of 10 seconds.
ResetHandler. When executing the ResetHandler, we focus
the execution to target the loops responsible for the unpacking of
the firmware’s global variables (as discussed in Section III-C). In
particular:
1) We terminate every loop with a symbolic guard. This is based
on the intuition that any loop depending on symbolic data
(during the firmware bootstrap), must depend on peripherals
data, and, therefore, does not implement a compiler-injected
stub responsible for unpacking firmware’s global variables.
2) We stop the execution whenever an angr’s unsupported
ARM SuperVisor Call instruction (SVC) is being executed.
3) We force a return to the caller whenever the RIP register con-
tains an address out of the main binary’s ROM address space.
4) We do not follow any function call during the execution of
the ResetHandler.
5) We stop the execution whenever we hit the first basic block
of a potentially infinite loop detected by purely static analysis
in angr.
6) We return a fresh symbolic variable every time an access to the
MMIO region is detected. This is necessary to overcome issues
related to time-dependent memory locations. More specifically,
as shown in Figure 3, the content of the memory location at
0x40064006 is expected to change during the peripherals
initialization. When returning a fresh symbolic variable at
every access, angr has the opportunity to concretize its value
to the one necessary to break out of the loop, and therefore
to advance the execution.
7) We stop the execution when leaving the ResetHandler
function with a callout (i.e., a jump to another function
that never returns to the caller). In fact, we assume for
simplicity that a callout corresponds to the transition from the
ResetHandler to the firmware’s main function.
1
2
3
while ( (MEMORY[0x40064006] & 2) == 0 );
while ( (MEMORY[0x40064006] & 0x10) != 0 );
while ( (MEMORY[0x40064006] & 0xC) != 8 );
Fig. 3: Time-dependent memory location.
Heap Initializers. Even if heap initializers are commonly very
simple functions per se, they can sometimes be part of a bigger
library initialization procedure, which, in turn, can call multiple
other functions before reaching the code responsible for writing
the heap global variables. For this reason, we need to use a less
strict execution model that forces the execution to make progress,
without terminating it prior to the heap initialization. In particular, to
execute the heap initializers we follow strategy steps 1)-5) defined
for ResetHandler, plus:
6) We stop the execution whenever we reach the address of a
pointer source because we assume that when calling a pointer
source the heap has already been initialized.
7) We follow function calls only if the arguments are concrete.
8) We expect heap initializers to only write concrete data in mem-
ory, and to be executed at the bootstrap of the firmware. There-
fore, we do not execute functions with symbolic arguments.
9) We stop the execution whenever we detect a read/write
memory operation over a symbolic address.
10) We timeout the execution of a function after 30 minutes.
Pointer Sources & De-allocator Candidate Execution. During
the analyses presented in Sections III-C and III-D, we execute the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1096
functions using steps 1)-3) of the ResetHandler’s execution model,
and:
4) We limit concrete loops iterations to 100.
5) We stop the execution of a function after 15 seconds. In fact,
we expect the execution of HML functions to be very quick
as these procedures must have high performances.
B. Firmware HML Usage Categorization
Table III presents the distribution of firmware images in our
dataset across different categories. For each category, we also
report how many images contain an HML library according to our
evaluation in Section V. The main observation is that HMLs are
rather widespread and used in all identified categories.
Category
Wearable
Generic Upgrade Tool
Others
Sensor
Medical Devices
Bike Accessory
Smart Eyeglasses
Tracker
Switch
Car Accessory
Robot
Smart Lock
Smart Light
Battery
Smart Home
Game Accessory
Agricultural Equipment
Thermometer
Beacon
Firearm Accessory
Headphone
Alarm
Total
Blobs with heap Tot. Blobs
209
51
53
67
41
40
19
58
20
25
41
15
21
9
20
9
10
16
12
11
2
2
799
83
50
34
24
22
19
19
16
14
9
9
7
7
6
5
4
3
2
2
2
2
1
340
TABLE III: Categories breakdown for firmware blobs used in the
evaluation.
C. Wild Dataset Reports
For each of the blobs from the wild dataset discussed in
Subsection V-B, Table 4 presents their (sub)cluster, total number
of functions, number of basic functions and pointer sources. Also,
we report whether the HML required patching. Figure 4 reports
the number of blobs and variants per coarse cluster. Interestingly,
we observe a big representation for clusters D, E, and F with a
rather small variance. Most likely, this indicates that these blobs
use standardized HML coming from vendors/IDEs.
D. Resource Usage Statistics during HML Identification
In Table V we report the average memory consumption and
median memory consumption in Megabytes (MB) for each stage
of the analysis detailed in Section III. Reported metrics were
consistently bound by 4.5GB across diffident analysis stages and
datasets allowing our HML analysis to be performed either on
a general-purpose machine or on an upscale one with several
instances run in parallel. Also, we present the average and median
time (in seconds) spent in each analysis step in Table V. The
Sample
# Functions
HML
Name
AC603 0101 V0.9.18 191114 1131.bin@2d2b
BSW20204006.bin@be06
AC603 VIITA BT GS V058 180414 1610.bin@a851
Exakt Pedal Radio Firmware.bin@33d1
BSRLWK h10 s9 20191124.bin@caa9