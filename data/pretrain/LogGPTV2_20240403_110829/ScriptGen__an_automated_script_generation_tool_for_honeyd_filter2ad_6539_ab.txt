e
C
1
2
C
3
C
o
1
r
p
cr
]
S
t
i
S
[
'
2
]
G
c
n
e
S
[
S
e
1
r
i
r
,
a
S
3
t
t
p
i
l
E
t
on
a
mu
]
[
S
Figure 2. Simple example of State Machine
if the protocol is not sending a welcome message when
the connection is opened, then this message will be empty.
There are three outgoing edges representing three differ-
ent client messages: C1, C2 and C3. Each of the edges is
connected to a state having a label containing one or more
server messages.
2.4 State Machine Simpliﬁer
The previous algorithm creates a basic state machine
without any notion of protocol semantics. This state ma-
chine is speciﬁc to the sample tcpdump ﬁle from which it
has been generated and lacks generality: it is not able to
handle anything that has not already been seen. In the next
steps, we simplify and generalize this state machine.
A simple Instant Messaging protocol, whose sample
messages are shown in table 1, is given in order to better
understand the problem. Once connected to a server, we
observe the client sending 12 messages. Each of them is
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
3
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
1. GET MSG FROM 
2. SEND MSG TO  DATA: "Hi!"
3. GET MSG FROM 
4. SEND MSG TO  DATA: "I’m coming"
5. GET MSG FROM 
6. GET MSG FROM 
7. SEND MSG TO  DATA: "Be patient"
8. GET MSG FROM 
9. SEND MSG TO  DATA: "Sorry"
10.SEND MSG TO  DATA: "It’s beautiful"
11.SEND MSG TO  DATA: "See you"
12.GET MSG FROM 
Table 1. Simple IM protocol
represented in the initial state machine by an edge with a
speciﬁc label, coming out of the initial state. In this case,
the number of outgoing edges from the root node is propor-
tional to the number of usernames and messages sent in the
system, which is certainly not good. The State Machine is
then too speciﬁc, and will not be able for instance to handle
a new user that was not present in the sample ﬁle. There is
a need for abstraction in order to generate from this list of
transition labels some more generic patterns.
This problem is due to the fact that we ignore the se-
mantics of the messages. We should, in fact, have only two
edges leaving the initial state. One would be labeled “GET
MSG FROM ” and the other one “SEND MSG
TO  DATA”. As we aim at deriving scripts au-
tomatically, without trying to understand the protocol, we
need to ﬁnd a technique that is able to retrieve that notion of
semantics for us. This is where the simpliﬁcation module
comes into play. It is based on two distinct notions, macro-
clustering and microclustering, explained here below.
2.4.1 The basics
In the macroclustering phase, we run a breadth-ﬁrst visit
of the initial state machine and gradually collapse together
states whose edges are considered to be semantically simi-
lar. Finding “semantically similar messages” implies that
we are, somehow, able to infer the semantics of the ex-
changed messages. This is a problem partially addressed
by the Protocol Informatics Project (PI) [3]. They have
proposed a clever approach to reverse engineer protocols
thanks to novel pattern extraction algorithms initially de-
veloped for processing DNA sequences and proteins.
PI is supposed to facilitate manual analysis of protocols.
We have used it slightly differently to automatically rec-
ognize semantically equivalent messages and, from there,
simplify the state machine as explained before.
PI offers a fast algorithm to perform multiple alignment
on a set of protocol samples. Applied to the outgoing edges
of each node, PI is able to identify the major classes of mes-
sages (distinguishing in the example in table 1 GET mes-
sages from SEND messages) and align messages of each
class using simple heuristics. The result of the PI alignment
for the GET cluster is shown in table 2. ScriptGen uses PI
output as a building block inside a more complex algorithm
called Region Analysis.
2.4.2 Region Analysis
Figure 3 shows the relationship between PI and the whole
Region Analysis process. PI aligns the sequences and pro-
duces a ﬁrst clustering proposal (macroclustering). Then,
we have deﬁned a new algorithm called Region Analysis
that takes advantage of PI output to produce what we call
microclusters.
Looking at the aligned sequences produced by PI on a
byte per byte basis (see table 2), we can compute for each
aligned byte:
• its most frequent type of data (binary, ASCII, zero-
value, ...)
• its most frequent value
• the mutation rate (that is, the variability) of the values
• the presence of gaps in that byte (we have seen samples
where that byte was not deﬁned).
On this basis a region is deﬁned as a sequence of bytes
which i) have the same type, ii) have similar mutation rates,
iii) contain the same kind of data and iv) have, or not,
gaps. A region can be seen as a piece of the message which
has some homogeneous characteristics and, therefore car-
ries probably the same kind of semantic information (e.g. a
variable, an atomic command, white spaces, etc..)
Macroclustering builds clusters using a deﬁnition of dis-
tance which simply counts the amount of different bytes be-
tween two aligned sequences. However, sometimes a single
bit difference, e.g. in a bitmask, can be something important
to identify. Therefore, to complement that ﬁrst approach,
microclustering computes another distance thanks to the
concept of region-wide mutation rate, that is the variability
of the value assumed by the region for each sequence. Fo-
cusing on each region, microclustering assumes that if some
values are coming frequently, they probably carry with them
some sort of semantic information. In the example in ﬁgure
4, we see that macroclustering cannot make any distinction
between an HTTP GET which is retrieving an image ﬁle
and one that is retrieving an HTML ﬁle. Indeed, the dis-
tance between those two sequences is not signiﬁcant enough
to put them into different clusters. However, when looking
at each region, microclustering searches for frequent values
and creates new microclusters using them. Microclustering
introduces an interesting property in the Region Analysis
simpliﬁcation algorithm: frequently used functional parts
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
0012 x47 x45 x54
0001 x47 x45 x54
0005 x47 x45 x54
0006 x47 x45 x54
0003 x47 x45 x54
0008 x47 x45 x54
DT
MT
x3c x77 x71 x72 x61 x66 ___ ___ ___ x3e
x3c ___ x75 x73 x65 x72 ___ ___ x61 x3e
x3c ___ x64 x73 x61 x66 ___ ___ x61 x3e
x3c ___ ___ ___ x68 x66 x67 x68 x66 x3e
x3c ___ ___ ___ x61 x62 x63 ___ ___ x3e
x3c x65 x71 x74 x73 x64 x67 ___ ___ x3e
AAA AAA AAA SSS AAA AAA AAA SSS AAA AAA AAA AAA SSS AAA GGG AAA AAA AAA AAA AAA GGG AAA AAA
000 000 000 000 000 000 000 000 000 000 000 000 000 000 050 066 066 066 066 050 033 050 000
x46 x52 x4f x4d
x46 x52 x4f x4d
x46 x52 x4f x4d
x46 x52 x4f x4d
x46 x52 x4f x4d
x46 x52 x4f x4d
x4d x53 x47
x4d x53 x47
x4d x53 x47
x4d x53 x47
x4d x53 x47
x4d x53 x47
ASCII G
E
T
_
M
S
G
_
F
R
O
M
_
Table 2. Result of PI alignment
R
A
e
a
g
l
i
y
o
s
n
n
i
s
ers
us
c
cro
m
t
l
i
y
ons
reg
i
j
macro
clusters
m
u
l
t
i
p
l
e
a
l
i
g
n
m
e
n
t
Figure 3. Region analysis sequence of operations
I
P
T
T
G
E
E
.
.
G
.
G
H
f
i
m
T
g
g
g
g
h
h
E
T
h
h
T
t
t
t
t
*
.
*
t
*
.
g
i
i
i
i
f
f
f
f
m
m
m
m
.
h
*
T
T
H
T
T
T
T
T
T
T
H
H
H
H
/
P
P
P
T
P
P
.
1
1
/
1
1
/
1
/
/
/
P
1
.
.
.
1
1
1
.
1
1
.