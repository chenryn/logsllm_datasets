js引擎，那它几乎不太可能去生成有效的js语法，会卡在语法parser那里，举个例子,for进行一轮字节变异成aor，能通过才见鬼了。
而通过AFL-unicorn我们可以直接过掉前面这部分代码，直接将Message Packet Parsing
Logic作为Harness，把Packets作为原始输入去fuzz。
但其实看到这里，Packet的构造还是存在一定问题的，首先即使这个Packet喂进去了造成Crash，如何从更上层输入去构造出这个Packet，会不会有更上层的过滤导致永远不可能构造出来这个Packet，这都是很容易考虑到的问题，不过这里暂时略过这个问题往下看吧。
从Packets做输入，那么关键代码就在packet.c里，  
选择要fuzz的函数是cgc_receive_packet  
函数的基本功能如下：
  1. 校验packet buffer不为空且长度大于0
  2. 计算16位CRC校验和以验证数据包的内容
  3. 循环检查packet type，如果匹配，则调用cgc_add_new_packet实例化tSinglePacketData对象pNewPacket，并向其中memcpy来自原始数据包的信息。
现在我们开始考虑参数和约束  
void cgc_receive_packet( uint8_t *pData, uint8_t dataLen, uint16_t packetCRC )  
pData是指向数据包的指针，dataLen是其长度，packetCRC是16位CRC校验和。  
显而易见的约束是CRC要正确。
    // Perform Checksum check
        uint16_t check_checksum = cgc_simple_checksum16( pData, dataLen );
    // Validate Checksum
        if ( packetCRC != check_checksum )
            return;
#### step2
其实看到这里就感觉没必要继续看下去了，价值很有限了。  
简单地说接下来的工作是要dump出有效的进程上下文，这个原因十分简单，在之前我们学习Unicorn的时候就遇到了很多问题，有很多运行时才会分配的内存区域，比如堆分配、栈指针、全局变量这些东西。  
但是说到底…… **我要是能把固件跑起来，我还要你这个仿真干嘛**  
问题就在这里了，所以我感觉除了极小量级的代码可能还能用一下，越是复杂，接口不规范的东西，越是不可能用这个东西跑起来了。  
但权做学习吧。
afl-unicorn的helper tools  
IDA的版本要求
选择在此处断下，此时eax中存放pData，edx（dl)里存放dataLen  
在此处dump进程上下文。
我在这卡住了，因为我想了想我好像并不知道该怎么hit到cgc_receive_packet的代码，在进行了"繁琐"的逆向工程之后。  
我找到了作者的issue。  
它给了一个patch用来生成有效输入。
    ./pov > case
    sakura@ubuntu:~/unicorn/cb-multios/build/challenges/FSK_Messaging_Service$ ./FSK_Messaging_Service :   mov    DWORD PTR [esp],eax
       0x804d109 :   movzx  eax,dl
       0x804d10c :   mov    DWORD PTR [esp+0x4],eax
       0x804d110 :   movzx  eax,WORD PTR [ecx+0x126]
       0x804d117 :   mov    DWORD PTR [esp+0x8],eax
    gef➤  r  mov DWORD PTR [esp], eax
    $eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]
    $cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063
    ───────────────────────────────────────────────────────────────── stack ────
    0xffffd1e0│+0x0000: 0xcccccccd   ← $esp
    0xffffd1e4│+0x0004: 0x40308ccc
    0xffffd1e8│+0x0008: 0x00000000
    0xffffd1ec│+0x000c: 0x40310000
    0xffffd1f0│+0x0010: 0x00000000
    0xffffd1f4│+0x0014: 0x40080000
    0xffffd1f8│+0x0018: 0x04000000
    0xffffd1fc│+0x001c: 0x00000000
    ─────────────────────────────────────────────────────────── code:x86:32 ────
        0x804d0fd  mov    ecx, DWORD PTR [ebp+0x8]
        0x804d100  mov    dl, BYTE PTR [ecx+0x23]
        0x804d103  mov    ecx, DWORD PTR [ebp+0x8]
     →  0x804d106  mov    DWORD PTR [esp], eax
        0x804d109  movzx  eax, dl
        0x804d10c  mov    DWORD PTR [esp+0x4], eax
        0x804d110  movzx  eax, WORD PTR [ecx+0x126]
        0x804d117  mov    DWORD PTR [esp+0x8], eax
        0x804d11b  call   0x804d9f0 
    ───────────────────────────────────── source:/home/sakura/un[...].c+330 ────
        325  #if DEBUG_BASEBAND
        326             cgc_printf( "Packet RX[$d][$X]\n", pState->packetState.packetDataLen, pState->packetState.packetCRC );
        327  #endif
        328
        329             // Packet received! -- send to packet processing
                // pState=0xffffd210  →  [...]  →  0x306cf7fd
     →  330             cgc_receive_packet( pState->packetState.packetData, pState->packetState.packetDataLen, pState->packetState.packetCRC );
        331
        332             // Reset
        333             cgc_reset_baseband_state( pState );
        334         }
        335     }
    ─────────────────────────────────────────────────────────────── threads ────
    [#0] Id 1, Name: "FSK_Messaging_S", stopped 0x804d106 in cgc_do_sample (), reason: BREAKPOINT
    ───────────────────────────────────────────────────────────────── trace ────
    [#0] 0x804d106 → cgc_do_sample(pState=0xffffd3a0, sample_in=0x0)
    [#1] 0x804ccbb → cgc_run_cdr(pState=0xffffd3a0, in_sample=0x0)
    [#2] 0x804ca25 → cgc_process_sample(pState=0xffffd3a0, in_sample=0x0)
    [#3] 0x804e6cd → main(secret_page_i=0x4347c000, unused=0xffffd574)
    ────────────────────────────────────────────────────────────────────────────
    Breakpoint 1, 0x0804d106 in cgc_do_sample (pState=0xffffd3a0, sample_in=0x0) at /home/sakura/unicorn/cb-multios/challenges/FSK_Messaging_Service/src/baseband.c:330
    330             cgc_receive_packet( pState->packetState.packetData, pState->packetState.packetDataLen, pState->packetState.packetCRC );
    gef➤
    gef➤  source unicorn_dumper_gdb.py
    ----- Unicorn Context Dumper -----    You must be actively debugging before running this!
    If it fails, double check that you are actively debugging before running.
    Process context will be output to UnicornContext_20200405_045024
    Dumping segment @0x0000000008048000 (size:0x7000): /home/sakura/unicorn/FSK_Messaging_Service [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x000000000804f000 (size:0x1000): /home/sakura/unicorn/FSK_Messaging_Service [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x0000000008050000 (size:0x22000): [heap] [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x000000004347c000 (size:0x1000):  [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x00000000f7dbd000 (size:0x1d5000): /lib/i386-linux-gnu/libc-2.27.so [{'r': True, 'w': False, 'x': True}]
    Skipping segment /lib/i386-linux-gnu/libc-2.27.so@0x00000000f7f92000
    Dumping segment @0x00000000f7f93000 (size:0x2000): /lib/i386-linux-gnu/libc-2.27.so [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7f95000 (size:0x1000): /lib/i386-linux-gnu/libc-2.27.so [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x00000000f7f96000 (size:0x3000):  [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x00000000f7fc5000 (size:0x1000):  [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x00000000f7fc6000 (size:0x3000): /home/sakura/unicorn/cb-multios/build/include/tiny-AES128-C/libtiny-AES128-C.so [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7fc9000 (size:0x1000): /home/sakura/unicorn/cb-multios/build/include/tiny-AES128-C/libtiny-AES128-C.so [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7fca000 (size:0x1000): /home/sakura/unicorn/cb-multios/build/include/tiny-AES128-C/libtiny-AES128-C.so [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x00000000f7fcb000 (size:0x3000): /home/sakura/unicorn/cb-multios/build/include/libcgc.so [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7fce000 (size:0x1000): /home/sakura/unicorn/cb-multios/build/include/libcgc.so [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7fcf000 (size:0x1000): /home/sakura/unicorn/cb-multios/build/include/libcgc.so [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x00000000f7fd0000 (size:0x2000):  [{'r': True, 'w': True, 'x': True}]
    Exception reading segment ([vvar]): 
    Dumping segment @0x00000000f7fd5000 (size:0x1000): [vdso] [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7fd6000 (size:0x26000): /lib/i386-linux-gnu/ld-2.27.so [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7ffc000 (size:0x1000): /lib/i386-linux-gnu/ld-2.27.so [{'r': True, 'w': False, 'x': True}]
    Dumping segment @0x00000000f7ffd000 (size:0x1000): /lib/i386-linux-gnu/ld-2.27.so [{'r': True, 'w': True, 'x': True}]
    Dumping segment @0x00000000fffdd000 (size:0x21000): [stack] [{'r': True, 'w': True, 'x': True}]
    Done.
大概这样。  
粗略看了一下dump程序，基本上就是调用了gef的get_process_maps接口，然后依次把每个segment的内存保存下来和调用get_register接口保存寄存器信息。
#### step3
接下来就开始编写harness了。  
其实用c来写比python效率要快很多，但是为了快速学习，这里就用python搞一下。  
整体的Harness的流程就是：
  1. 创建和分配memory map
  2. 加载target程序到memory map
  3. 仿真执行至少一条指令(hack trick)
  4. 从afl获取data和size用以fuzz
  5. 设置初始状态，即进程上下文
  6. 仿真代码，并正确处理crash
基本上每个harness都是这样，对着往里面填模板就好了。  
这里的[unicorn_loader](https://github.com/Battelle/afl-unicorn/blob/master/unicorn_mode/helper_scripts/unicorn_loader.py)在这。  
用处就是把我们之前dump出来的context加载进去。
    import argparse
    from unicorn import *
    from unicorn.x86_const import *  # TODO: Set correct architecture here as necessary
    import unicorn_loader 
    # Simple stand-in heap to prevent OS/kernel issues
    unicorn_heap = None
    # Start and end address of emulation
    START_ADDRESS = # TODO: Set start address here
    END_ADDRESS   = # TODO: Set end address here
    """
        Implement target-specific hooks in here.
        Stub out, skip past, and re-implement necessary functionality as appropriate
    """
    def unicorn_hook_instruction(uc, address, size, user_data):
        # TODO: Setup hooks and handle anything you need to here
        #    - For example, hook malloc/free/etc. and handle it internally
        pass
    #------------------------    #---- Main test function  
    def main():
        parser = argparse.ArgumentParser()
        parser.add_argument('context_dir', type=str, help="Directory containing process context")
        parser.add_argument('input_file', type=str, help="Path to the file containing the mutated input content")
        parser.add_argument('-d', '--debug', default=False, action="store_true", help="Dump trace info")
        args = parser.parse_args()
        print("Loading context from {}".format(args.context_dir))
        uc = unicorn_loader.AflUnicornEngine(args.context_dir, enable_trace=args.debug, debug_print=False)       
        # Instantiate the hook function to avoid emulation errors
        global unicorn_heap
        unicorn_heap = unicorn_loader.UnicornSimpleHeap(uc, debug_print=True)
        uc.hook_add(UC_HOOK_CODE, unicorn_hook_instruction)
        # Execute 1 instruction just to startup the forkserver
        # NOTE: This instruction will be executed again later, so be sure that
        #       there are no negative consequences to the overall execution state.
        #       If there are, change the later call to emu_start to no re-execute 
        #       the first instruction.
        print("Starting the forkserver by executing 1 instruction")
        try:
            uc.emu_start(START_ADDRESS, 0, 0, count=1)
        except UcError as e:
            print("ERROR: Failed to execute a single instruction (error: {})!".format(e))
            return