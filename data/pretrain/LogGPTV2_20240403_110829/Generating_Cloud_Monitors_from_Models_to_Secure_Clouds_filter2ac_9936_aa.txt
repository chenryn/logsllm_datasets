# Title: Generating Cloud Monitors from Models to Secure Clouds
# Authors: Elena Troubitsyna and Irum Rauf
# Conference: 2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
Authorization is a critical security concern in cloud computing environments, as it regulates user access to system resources. The large number of resources associated with REST APIs in cloud environments makes implementing security requirements challenging and error-prone. This paper proposes an implementation of a security cloud monitor using a model-driven approach to represent functional and security requirements. These models are used to generate cloud monitors that contain contracts for automatic verification of the implementation. We use the Django web framework to implement the cloud monitor and OpenStack to validate our approach.

## 1. Introduction
Private clouds are a significant component of data center transformations, adopted by 72% of cloud users, according to the Cloud Survey 2017. Private clouds, dedicated environments for internal use by a single organization, are utilized by companies ranging from 500 to over 2000 employees. Designing and developing secure private cloud environments for such a large user base presents a major engineering challenge.

Cloud computing services typically offer REST APIs, which define software interfaces for accessing their resources. Each piece of information is exposed via a URI, resulting in a large number of URIs that can access the system. Data breaches and loss of critical data are among the top cloud security threats. The large number of URIs complicates the task of security experts, who must ensure each URI is safeguarded to prevent data breaches or privilege escalation attacks.

Open Source clouds, developed collaboratively, are subject to frequent updates that may introduce or remove features, potentially violating the security properties of previous releases. Manually checking the correctness of API access control implementations becomes unfeasible, necessitating enhanced monitoring mechanisms.

In this paper, we present a cloud monitoring framework that supports a semi-automated approach to monitoring private cloud implementations for conformance to functional requirements and API access control policies. Our work uses UML (Unified Modeling Language) models with OCL (Object Constraint Language) to specify the behavioral interface with security constraints for the cloud implementation.

The behavioral interface of the REST API provides information about the methods that can be invoked and their pre- and post-conditions. We rely on the Design by Contract (DbC) framework to define security and functional requirements as verifiable contracts. Our methodology enables creating a (stateful) wrapper that emulates usage scenarios and defines security-enriched behavioral contracts to monitor the cloud. This approach also facilitates requirements traceability by ensuring the propagation of security specifications into the code, allowing security experts to observe the coverage of security requirements during testing.

Our approach is implemented as a semi-automatic code generation tool in Django, a Python web framework, and validated using OpenStack as a case study. The validation results are promising and motivate further development of the tool.

The paper is organized as follows: Section 2 motivates our work, Section 3 provides an overview of our cloud monitoring framework, Section 4 presents our design approach to modeling stateful REST services, Section 5 describes the contract generation mechanism, Section 6 presents the tool architecture and our work with monitoring OpenStack, and Sections 7 and 8 cover related work and conclusions, respectively.

## 2. Private Clouds with REST Principles
Cloud computing aims to improve agility, achieve scalability, and shorten time to market. This vision relies on the use of REST APIs, which enable extensibility and scalability of cloud frameworks. REST APIs expose their functionality as resources with unique URIs, resulting in a large number of URIs in complex systems like cloud frameworks. Safeguarding these URIs is challenging due to the different authorization rules for the same set of HTTP methods (GET, PUT, POST, DELETE).

For example, consider the volume resource offered by the Cinder API of OpenStack. Cinder provides storage resources (volumes) that can be consumed by virtual servers. Any user with the right credentials can invoke the GET method to learn details about a volume, but only project administrators and service architects can update or add new volumes, and only project administrators can delete a volume.

REST advocates stateless interactions between components to cater to a large number of clients. However, constructing advanced scenarios using a stateless protocol requires enforcing a sequence of steps, effectively making the behavior stateful. For instance, a POST request to create a new volume will succeed only if the project has not exceeded its allowed volume limit; otherwise, it will fail. Similarly, a DELETE request will delete a volume only if it is not attached to any instance.

Combining security and functional requirements for each resource results in a large volume of information, overwhelming for cloud developers. Additionally, distributed development can lead to design errors and inconsistencies. Therefore, an automated approach is needed to facilitate correct security policy implementation and ensure that the right users have access to the right resources.

## 3. Cloud Monitoring Framework
Figure 1 illustrates the overall architecture of the Cloud Monitoring Framework. A cloud developer uses IaaS to develop a private cloud for their organization, which may be implemented by a group of developers working collaboratively. The REST API provided by IaaS is used to develop the private cloud according to the specification document and required security policy.

The cloud monitor is implemented on top of the private cloud. The main original components of our work are highlighted in Figure 1. The security analyst develops the required design models based on the specification document and security policies. These models define the behavioral interface for the private cloud and specify its functional and security requirements. Additionally, our design models define all the information required to build stateful scenarios using REST as the underlying stateless architecture.

Our approach to constructing design models serves several purposes:
1. The models specify the system from different viewpoints, allowing security analysts to focus on critical parts.
2. The models provide a graphical representation of the expected behavior with contracts, which can be communicated more easily than textual specifications.
3. The models serve as a specification document and facilitate reusability.
4. They are used to generate code skeletons with integrated behavioral and security contracts.
5. Existing model-based testing approaches can be used to facilitate functional and security testing of private clouds.

We build on our partial code-generation tool, extending it to target security requirements and propose an automated approach to representing security requirements in the code. The generated code skeletons are then completed by the developer with the desired implementation of the methods.

### 3.1 Workflow
Our cloud monitor acts as a proxy interface on top of the private cloud implementation. It interprets response codes and ensures that the private cloud implementation conforms to the specified functional and security requirements. The workflow involves the following steps:
1. **Model Development**: Security analysts develop design models based on the specification document and security policies.
2. **Code Generation**: The design models are used to generate code skeletons with integrated behavioral and security contracts.
3. **Implementation Completion**: Developers complete the generated code skeletons with the desired method implementations.
4. **Monitoring and Verification**: The cloud monitor verifies the implementation against the specified contracts and ensures conformance to the functional and security requirements.

This workflow ensures that the private cloud implementation adheres to the specified security and functional requirements, providing a robust and secure environment.

[Figure 1: Architecture of the Cloud Monitoring Framework]

---

**Note**: The figure referenced in the text should be included in the final document.