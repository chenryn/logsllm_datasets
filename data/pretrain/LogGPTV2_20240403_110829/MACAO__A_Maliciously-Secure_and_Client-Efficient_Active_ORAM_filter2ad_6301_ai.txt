works by deﬁning the simulator and the hybrid games similar
to the ones in the proof of Lemma 1 with a slight tweak
as follows. It was proven in [20] that the probability that
the adversary can cheat during the SPDZ multiplication over
two shared values is 1/|Fp|. Thus, we can follow the proof
in [20] and present it for the vectorized values (i.e., matrix)
to construct Game 1. Similarly, it has been also proven in
[20] that the view of the ideal process and the real process is
statistically indistinguishable by the SPDZ multiplication over
single values. We can follow [20] to construct Game 1’ for
vectorized values.
We now prove the security of multi-server PIR protocols
in §IV-B2. We ﬁrst present the security model of multi-server
PIR based on simulation as follows.
Deﬁnition 4 (Multi-server PIR with veriﬁability). We ﬁrst
deﬁne the ideal world and real world as follows.
Ideal world. Let Fpir be an ideal functionality, which main-
tains a version of the database on behalf of the client and
answers the client’s requests as follows.
• Setup: An environment Z provides a database B to the client.
The client sends B to the ideal functionality Fpir. Fpir stores
B and notiﬁes the simulator Spir the completion of the setup,
but not the content of B. The simulator Spir returns ok or abort
to Fpir. Fpir then returns ok or ⊥ to the client accordingly.
• Retrieve: In each time step, the environment Z speciﬁes an
16
index idx as the client’s input. The client sends idx to Fpir.
Fpir notiﬁes the simulator Spir (without revealing idx to Spir).
If Spir returns ok to Fpir, Fpir sends b ← B[idx] to the client.
The client then returns b to the environment Z. If Spir returns
abort to Fpir, Fpir returns ⊥ to the client.
Real world. In the real world, Z gives the client a database B.
The client executes the Setup with (cid:96) servers (S0, . . . , S(cid:96)−1).
At each time step, Z speciﬁes an input idx to the client. The
client executes the PIR protocol Π with (S0, . . . , S(cid:96)−1). The
environment Z gets the view of the adversary A after every
operation. The client outputs to the environment Z the output
of Π or abort.
We say that a protocol ΠF securely realizes the ideal
functionality Fpir
in the presence of a malicious adversary
corrupting t servers iff for any PPT real-world adversary that
corrupts up to t servers, there exists a simulator Spir such that
for all non-uniform, polynomial-time environment Z, there
exists a negligible function negl such that
| Pr[REALΠF ,A,Z (λ) = 1]−Pr[IDEALFpir,Spir,Z (λ) = 1]| ≤ negl(λ).
Proof of Lemma 2: We prove this by constructing a
the environment Z cannot distinguish
simulator such that
between the real protocol and the ideal functionality. We deﬁne
the simulator Spir in the ideal world and a sequence of hybrid
games as follows.
The simulator Spir. To simulate the setup protocol,
the
simulator follows the honest setup procedure with a dummy
database B(cid:48) containing N dummy data items, on behalf of
the client. For the retrieval simulation, the simulator follows
the honest retrieval procedure, on behalf of the client, to read
a block with dummy ID. During the access operation, if the
client (executed by Spir) aborts then the simulator sends abort
to Fpir and stops. Otherwise, the simulator returns ok to Fpir.
Sequence of Hybrid Games. We deﬁne a sequence of hybrid
games to show that the following real world and the simulation
in the ideal world are statistically indistinguishable:
| Pr[REALΠF ,A,Z (λ) = 1]−Pr[IDEALFpir,Spir,Z (λ) = 1]| ≤ negl(λ).
Game 0. This is the real game REALΠF ,A,Z (λ) with an en-
vironment Z and three servers in the presence of an adversary
A. presented in Deﬁnition 3. In this case, the real PIR protocol
ΠF is the one presented in Figure 4. Without loss of generality,
we assume server S0 is corrupted.
Game 1.
In this game, the client maintains a copy of the
database locally. Whenever the client privately retrieves a data
item block from the servers, if abort does not occur, the
client uses its version stored locally for further processing. The
difference between Game 0 and Game 1 happens if at some
point, the client retrieves an incorrect item from the servers,
but unable to detect since the adversarial server generates a
valid MAC for it (thus the abort does not occur). We claim
that Game 0 and Game 1 are statistically indistinguishable.
Similar to other proofs, the intuition is to show that if the
adversarial server ever cheats during the PIR computation, it
will be caught with high probability as follows.
Every server Si ∈ {S0, S1, S2} stores two authenticated
(cid:0)((cid:74)bj(cid:75)i), ((cid:74)αbj(cid:75)i)(cid:1) and (cid:104)B(cid:105)i+1 = ((cid:74)B(cid:75)i+1,(cid:74)αB(cid:75)i+1) =
shares of the database B as (cid:104)B(cid:105)i = ((cid:74)B(cid:75)i,(cid:74)αB(cid:75)i) =
(cid:0)((cid:74)bj(cid:75)i+1), ((cid:74)αbj(cid:75)i+1)(cid:1). According to the XOR-PIR protocol,
every Si aggregates (i.e., XOR) all authenticated shares of the
and e0 (resp. e1). So, the reply that the client obtains from S0
blocks that correspond with the value ‘1’ in the client queries.
Let e0 and e1 be the queries that the client sends to S0, which
are the binary strings of length (cid:96), where (cid:96) is the number of
database blocks. Let ˆe0 (resp. ˆe1) be the error introduced by
(cid:77)
∀j : e0[j]=1(cid:74)bj(cid:75)0
(cid:77)
∀j : e1[j]=1(cid:74)bj(cid:75)1
S0 during the bitwise operations between (cid:74)B(cid:75)0 (resp. (cid:74)B(cid:75)1)
is of the form (cid:74)b(cid:75)(0)
0 ⊕ e0 =
(cid:74)b(cid:75)(0)
1 ⊕ e1 =
2 , (cid:74)b(cid:75)(1)
1 , (cid:74)b(cid:75)(0)
(cid:74)b(cid:75)0 ⊕ e0 =(cid:74)b(cid:75)(0)
(cid:74)b(cid:75)1 ⊕ e1 =(cid:74)b(cid:75)(0)
(cid:74)b(cid:75)2 =(cid:74)b(cid:75)(0)
Since S1, S2 are honest, the client obtains honest answers
from them. Due to XOR-PIR,
0 ⊕(cid:74)b(cid:75)(1)
1 ⊕(cid:74)b(cid:75)(1)
2 ⊕(cid:74)b(cid:75)(1)
0 =(cid:74)b(cid:75)0 + t0
1 =(cid:74)b(cid:75)1 + t1
2 =(cid:74)b(cid:75)2
the client reconstructs the following shares from the server:
2
(cid:74)b(cid:75)(1)
0 , (cid:74)b(cid:75)(1)
(6)
(7)
the form b(cid:48) =(cid:74)b(cid:75)0 +(cid:74)b(cid:75)1 +(cid:74)b(cid:75)2 + t0 + t1 = b + t where
By additive secret sharing, the client recovers a block of
t = t0 + t1 ∈ Fp. Equation 7 implies that if the adversary
introduces any bit of error during the XOR computation, the
client will recover incorrect shares of the original block b
thereby, obtaining an arbitrary block b(cid:48) different from b. In
order to make the client not abort, the adversary must inject
the errors during the bitwise computation between (cid:104)αB(cid:105)0 with
e0 and (cid:104)αB(cid:105)1 with e1, in such a way that allows the client to
reconstruct a valid MAC for b(cid:48), i.e., αb(cid:48) = αb+αt. Since α is
unknown, the probability that the adversary can cheat to make
the client reconstruct a valid MAC for b(cid:48) is
1|Fp|. That means
the adversary must follow the protocol faithfully, otherwise
they will cause the client to abort with high probability.
Game 1’. The client executes the Setup with a dummy
database B(cid:48) (as similar to Spir) instead of the one provided
by Z. For each request, the client executes a dummy retrieval
with three servers instead of the one chosen by Z. In this game,
we use the ideal functionality Fpir, which store the database
provided by Z in the setup phase, to answer the environment
requests. For each retrieval, if the client does not abort, it
forwards the output of Fpir to Z.
We say that Game 1 and Game 1’ are indistinguishable.
Notice that if the client does not abort in these games, then
the data item is retrieved correctly and the corrupted server
follows the protocol faithfully as the honest servers. In our PIR
protocol, the database is stored in the form of authenticated
shares at the server, which are uniformly distributed due to
the perfect privacy of additive secret sharing. The PIR queries
are shared by XOR secret sharing, which are also uniformly
distributed due to the perfect secrecy of XOR. Due to PIR,
the computation is performed over the entire database at each
server. All these security properties indicate that the view of
the adversary can be simulated given the view of the honest
servers that execute the XOR-PIR protocol with the client.
Game 0’. We deﬁne Game 0’ similar to Game 0 except that
the client uses a dummy database and a dummy retrieval index
to interact with the servers, instead of the ones provided by the
environment Z. The client queries the ideal functionality Fpir
on the actual input provided by Z and forwards the output to
Z. We claim that Game 1’ and Game 0’ are indistinguishable
17
using the same argument as between Game 1 and Game 0.
Game 0’ is the ideal game IDEALFpir,Spir,Z with simulator Spir
and the environment Z. Putting all the games together, we
have that Game 0 ≡ Game 1 ≡ Game 1’ ≡ Game 0’ and this
completes the proof.
Proof of Corollary 2:
This can be derived from the proof of Lemma 2 so we
will not repeat due to repetition. Intuitively, we construct the
Simulator Spir and the hybrid games similar to the ones in
the proof of Lemma 2, with a small change as follows. This
protocol interprets the PIR database as a matrix to execute the
matrix multiplication protocol via replicated secret sharing. We
have shown in the proof of Lemma 1 that the probability that
the adversary can inject a malicious input to the stage (i) of
the matrix multiplication without being caught is
1|Fp|. We can
use this argument to construct Game 1. In Game 1’, we can
argue that the view of the ideal process and the real process
is statistically indistinguishable because the retrieval queries
in this PIR are in the form of additive secret sharing, and
therefore, are uniformly distributed.
Proof of Corollary 3: Similar to the proof of Corollary 2,
this proof can be derived from the proof of Lemma 2 by
replacing the XOR operations with the matrix multiplication
protocol by SPDZ secret sharing.
Proof of Theorem 1: We deﬁne a simulator in the ideal
(cid:48) containing N blocks bi for each bi
world and a sequence of hybrid games as follows.
The simulator Soram. To simulate the setup protocol, the
simulator follows the honest setup procedure with a database
$← {0, 1}|b|, on behalf
DB
of the client. For the access simulation, the simulator follows
the honest access protocol, on behalf of the client, to read a
dummy block with dummy ID. During the access operation,
if the client protocol (executed by the simulator) aborts then
the simulator sends abort to Foram and stops. Otherwise, the
simulator returns ok to Foram.
Sequence of Hybrid Games. We deﬁne a sequence of hybrid
games to show that the following real world and the simulation
in the ideal world are statistically indistinguishable:
| Pr[REALΠF ,A,Z (λ) = 1]−Pr[IDEALForam,Soram,Z (λ) = 1]| ≤ negl(λ).
Game 0. This is the real game REALΠF ,A,Z (λ) with an
environment Z and (cid:96) servers in the presence of an adversary
A as presented in Deﬁnition 1. In this game, the real ORAM
access protocol ΠF is the one presented in Figure 8, where the
retrieval and evictions subroutines are presented in Figure 9,
Figure 10, Figure 11, Figure 12.
Game 1. In this game, the client maintains a copy of the data
blocks bi in plaintext locally. Whenever the client accesses a
block bi from the servers, If abort does not occur, the client
uses its plaintext stored locally for further processing. The
difference between Game 0 and Game 1 happens if, at some
point, the client retrieves a modiﬁed block from the servers,
but unable to detect since the adversarial server generates a
valid MAC for it (thus the abort does not occur).
We claim that Game 0 and Game 1 are statistically indis-
tinguishable as follows. First, MACAO schemes harness multi-
server PIR protocols based on XOR/RSS/SPDZ scheme to
perform the retrieval phase. We have shown that all these pro-
tocols are secure against the malicious adversary by Lemma 2,
18
Corollary 2 and Corollary 3, where the probability that the
adversary can tamper with the block and forge a valid MAC
is
1|Fp|. Second, MACAO schemes use the authenticated matrix
multiplication protocols by RSS or SPDZ to perform the
eviction. By Lemma 1 and Corollary 1, all these protocols are
secure against the malicious adversary, where the probability
that the adversary can deviate from the protocol without being
caught is
1|Fp|.
Game 1’.
In this game, the client executes the Setup with a
(cid:48) similar to the simulation, instead of the
dummy database DB
one provided by the environment Z. For each access operation,
the client executes a dummy access with (cid:96) servers instead of
the one chosen by Z. We also introduce the ideal functionality
Foram storing the database provided by the environment Z
in the setup phase, which the client queries to answer the
environment requests. At each time of access, if the client
does not abort, it forwards the output of Foram to Z.
We claim that Game 1 and Game 1’ are statistically
indistinguishable as follows. In both games, if the client does
not abort then the data block is retrieved correctly. That means
the corrupted server follows the protocol faithfully as the
honest servers. We show that the view of the adversary in
these games can be simulated given the view of the honest
servers that execute Access protocol of MACAO with the client
as follows. In MACAO, the client database is stored in the
ORAM tree at the server in the form of authenticated shares,
which achieves a perfect security due to the perfect privacy
of additive secret sharing. MACAO schemes harness the tree-
ORAM paradigm, where the client privately assigns each block
to a path selected uniformly at random. Once a block is
retrieved, the client locally assigns it to a new random path,
and therefore, it is unknown to the server. Thus, given any data
request sequence, the server observes a sequence of random
retrieval paths. The eviction path in MACAO is deterministic
following the reverse lexicographical order and therefore, it
is publicly known by anyone. MACAO schemes employ the
push-down strategy in [66], which achieves a negligible failure
probability with ﬁxed system parameters (e.g., bucket size,
stash size) by Lemma 3. Therefore, given any two data request
sequences of the same length, the servers observe two access
patterns that are statistically indistinguishable from each other
(the statistical bit comes from the negligible failure probability
of push-down strategy). Moreover, any computation performed
by the servers is secure due to the security multi-server PIR
protocols by Corollary 2, Lemma 2, Corollary 3 and multi-
plicative homomorphic properties of SPDZ and RSS schemes.
These security properties show that the view of the adversarial
server can be simulated given the view of the honest servers
in MACAO.
Game 0’. We deﬁne Game 0’ similar to Game 0 except
that the client uses a dummy database and dummy access
operations to interact with the servers, instead of the ones
provided by the environment Z. The client queries the ideal
functionality F on the input of Z and forwards its output to
the environment Z. We claim that Game 1’ and Game 0’ are
indistinguishable using the same argument as between Game
1 and Game 0. It is easy to see that Game 0’ is the ideal game
IDEALF ,S,Z with simulator S and the environment Z.
Putting all the games together, we have that Game 0 ≡
Game 1 ≡ Game 1’ ≡ Game 0’ and this completes the proof.