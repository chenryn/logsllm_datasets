func Setup() { 
// 请求限速 limiter 初始化 
InitRate() 
// fasthttp client 初始化 
DownProxy := conf2.GlobalConfig.HttpConfig.Proxy 
client := &fasthttp.Client{ 
// If InsecureSkipVerify is true, TLS accepts any certificate 
TLSConfig: &tls.Config{InsecureSkipVerify: true}, 
NoDefaultUserAgentHeader: true, 
DisablePathNormalizing:   true, 
} 
if DownProxy != "" { 
log.Info("[fasthttp client use proxy ]", DownProxy) 
client.Dial = fasthttpproxy.FasthttpHTTPDialer(DownProxy) 
} 
fasthttpClient = client 
// jwt secret 初始化 
jwtSecret = []byte(conf2.GlobalConfig.ServerConfig.JwtSecret) 
} 
rule.Setup() 规则配置相关初始化
 poc\rule\handle.go 
1. 初始化一个 字典 key是字符串 value是 HandlerFunc列表
2. 给  Handles  添加  "script"  的value是 函数  ExecScriptHandle  ExecScriptHandle 函数见下面详细展开
3. 给  Handles  添加  "appendparam" 的value是 函数  ExecExpressionHandle  ExecExpressionHandle 函数见下
面详细展开
4. 给  Handles  添加  "replaceparam" 的value是 函数  ExecExpressionHandle 
5. 调用函数  InitTaskChannel  函数见下面详细展开
func Setup() { 
Handles = make(map[string][]HandlerFunc) 
Handles[AffectScript] = []HandlerFunc{ExecScriptHandle} 
Handles[AffectAppendParameter] = []HandlerFunc{ExecExpressionHandle} 
Handles[AffectReplaceParameter] = []HandlerFunc{ExecExpressionHandle} 
InitTaskChannel() 
} 
HandlerFunc 定义了一个统一的handler函数规范 参数是  controllerContext  
 poc/rule/handle.go#9 
type HandlerFunc func(ctx controllerContext) 
 poc/rule/handle.go#52  
controllerContext 定义了一个接口 后面应该有多个实现控制器吧 
然后 会有多个 HandlerFunc 函数解析多种 controllerContext接口实现的结构体
type controllerContext interface { 
Next() 
Abort() 
IsAborted() bool 
GetString(key string) string 
Set(key string, value interface{}) 
Get(key string) (value interface{}, exists bool) 
GetPoc() *Poc 
Groups(bool) (result bool, err error) 
Rules([]Rule, bool) (result bool, err error) 
GetPocName() string 
GetOriginalReq() *http.Request 
SetResult(result *util.ScanResult) 
IsDebug() bool 
// RegisterHandle(f HandlersChain) 
} 
ExecScriptHandle 是poc/script下的poc Handler函数
1. 通过控制器上下文 其实就是一个poc结构体 获取名称
2. 使用poc名称 通过  scripts.GetScriptFunc  获取扫描函数 
GetScriptFunc的函数是从  scriptHandlers  字典中 通过 pocNmae 获取  scanFunc  即是验证方法
3. 输出信息日志
4. 处理端口 和是否是https 创建  scripts.ScriptScanArgs  脚本扫描函数使用的参数结构体 传入 scanFunc 
5. 执行后将结果传递给  SetResult  保存结果 并执行 调用 Abort  终止
func ExecScriptHandle(ctx controllerContext) { 
pocName := ctx.GetPocName() 
scanFunc := scripts.GetScriptFunc(pocName) 
if scanFunc == nil { 
log.Error("[rule/handle.go:ExecScriptHandle error] ", "scan func is nil") 
ctx.Abort() 
return 
} 
log.Info("[rule/handle.go:ExecScriptHandle script start]" + pocName) 
var isHTTPS bool 
// 处理端口 
defaultPort := 80 
originalReq := ctx.GetOriginalReq() 
if originalReq == nil { 
log.Error("[rule/handle.go:ExecScriptHandle error] ", "original request is nil") 
ctx.Abort() 
return 
} 
if originalReq.URL.Scheme == "https" { 
isHTTPS = true 
defaultPort = 443 
} 
if originalReq.URL.Port() != "" { 
port, err := strconv.ParseUint(originalReq.URL.Port(), 10, 16) 
if err != nil { 
ctx.Abort() 
return 
} 
defaultPort = int(port) 
} 
args := &scripts.ScriptScanArgs{ 
Host:    originalReq.URL.Hostname(), 
Port:    uint16(defaultPort), 
IsHTTPS: isHTTPS, 
} 
result, err := scanFunc(args) 
if err != nil { 
log.Error("[rule/handle.go:ExecScriptHandle error] ", err) 
ctx.Abort() 
return 
} 
ctx.SetResult(result) 
ctx.Abort() 
} 
ExecExpressionHandle 是db中的yaml的类似xray格式的poc Handler函数
1. 获取Poc
2. poc的 Groups  如果不是空  ctx.Groups(ctx.IsDebug()) 
3. 如果是空  ctx.Rules(poc.Rules,ctx.IsDebug()) 
4. 返回的result结果不是空 调用  Abort  终止否则返回
func ExecExpressionHandle(ctx controllerContext){ 
var result bool 
var err error 
poc := ctx.GetPoc() 
if poc == nil { 
log.Error("[rule/handle.go:ExecExpressionHandle error] ", "poc is nil") 
return 
} 
if poc.Groups != nil { 
result, err = ctx.Groups(ctx.IsDebug()) 
} else { 
result, err = ctx.Rules(poc.Rules,ctx.IsDebug()) 
} 
if err != nil { 
log.Error("[rule/handle.go:ExecExpressionHandle error] ", err) 
return 
} 
if result { 
ctx.Abort() 
} 
return 
} 
InitTaskChannel 任务管道
初始化任务管道
限制管道大小10个 
管道里的数据是  TaskItem 
// 限制并发 
type TaskItem struct { 
OriginalReq *http.Request // 原始请求 
Plugins     []Plugin      // 检测插件 
Task        *db.Task      // 所属任务 
} 
var TaskChannel chan *TaskItem 
func InitTaskChannel(){ 
// channel 限制 target 并发 
concurrent := 10 
if conf.GlobalConfig.PluginsConfig.Concurrent != 0 { 
concurrent = conf.GlobalConfig.PluginsConfig.Concurrent 
} 
TaskChannel = make(chan *TaskItem, concurrent) 
} 
HotConf 配置热加载
配置配置文件路径 当 配置文件发生任何事件 都重新调用  InitAll  重新初始化配置
// 使用viper 对配置热加载 
func HotConf() { 
dir, err := filepath.Abs(filepath.Dir(os.Args[0])) 
if err != nil { 
log.Fatalf("cmd.HotConf, fail to get current path: %v", err) 
} 
// 配置文件路径 当前文件夹 + config.yaml 
configFile := path.Join(dir, conf.ConfigFileName) 
viper.SetConfigType("yaml") 
viper.SetConfigFile(configFile) 
// watch 监控配置文件变化 
viper.WatchConfig() 
viper.OnConfigChange(func(e fsnotify.Event) { 
// 配置文件发生变更之后会调用的回调函数 
log.Println("config file changed:", e.Name) 
InitAll() 
}) 
} 
routers.InitRouter 初始化web的路由并启动
通过  gin  来启动web服务
1. 如果是 debug 模式 开启  swagger 
2. 设置静态资源路径  ui 
3. 定义api 增删改查接口
func InitRouter(port string) { 
router := gin.Default() 
// debug 模式下 开启 swagger 
if conf.GlobalConfig.ServerConfig.RunMode == "debug" { 
router.GET("/swagger/*any", gs.WrapHandler(swaggerFiles.Handler)) 
} 
// ui 
router.StaticFS("/ui", BinaryFileSystem("web/build")) 
router.GET("/", func(c *gin.Context) { 
c.Redirect(http.StatusPermanentRedirect, "/ui") 
}) 
// api 
v1 := router.Group("/api/v1") 
{ 
v1.POST("/user/login", auth.Login) 
userRoutes := v1.Group("/user") 
userRoutes.Use(jwt.JWT()) 
{ 
userRoutes.POST("/self/resetpwd/", auth.Reset) 
userRoutes.GET("/info", auth.Self) 
userRoutes.GET("/logout", auth.Logout) 
} 
pluginRoutes := v1.Group("/poc") 
pluginRoutes.Use(jwt.JWT()) 
{ 
// all 
pluginRoutes.GET("/", plugin.Get) 
// 增 
pluginRoutes.POST("/", plugin.Add) 
// 改 
pluginRoutes.PUT("/:id/", plugin.Update) 
// 详情 
pluginRoutes.GET("/:id/", plugin.Detail) 
// 删 
pluginRoutes.DELETE("/:id/", plugin.Delete) 
// 测试单个poc 
pluginRoutes.POST("/run/", plugin.Run) 
// 上传yaml文件 
pluginRoutes.POST("/upload/", plugin.UploadYaml) 
// 下载yaml文件 
pluginRoutes.POST("/download/", plugin.DownloadYaml) 
} 
vulRoutes := v1.Group("/vul") 
vulRoutes.Use(jwt.JWT()) 
{ 
// basic 
vulRoutes.GET("/basic/", vulnerability.Basic) 
// all 
vulRoutes.GET("/", vulnerability.Get) 
// 增 
vulRoutes.POST("/", vulnerability.Add) 
// 改 
vulRoutes.PUT("/:id/", vulnerability.Update) 
// 详情 
vulRoutes.GET("/:id/", vulnerability.Detail) 
// 删 
vulRoutes.DELETE("/:id/", vulnerability.Delete) 
} 
appRoutes := v1.Group("/product") 
appRoutes.Use(jwt.JWT()) 
{ 
// all 
appRoutes.GET("/", webapp.Get) 
// 增 
appRoutes.POST("/", webapp.Add) 
// 改 
appRoutes.PUT("/:id/", webapp.Update) 
// 详情 
appRoutes.GET("/:id/", webapp.Detail) 
// 删 
appRoutes.DELETE("/:id/", webapp.Delete) 
} 
scanRoutes := v1.Group("/scan") 
scanRoutes.Use(jwt.JWT()) 
{ 
scanRoutes.POST("/url/", scan2.Url) 
scanRoutes.POST("/raw/", scan2.Raw) 
scanRoutes.POST("/list/", scan2.List) 
} 
taskRoutes := v1.Group("/task") 
taskRoutes.Use(jwt.JWT()) 
{ 
// all 
taskRoutes.GET("/", task.Get) 
// 删 
taskRoutes.DELETE("/:id/", task.Delete) 
} 
resultRoutes := v1.Group("/result") 
resultRoutes.Use(jwt.JWT()) 
{ 
// all 
resultRoutes.GET("/", result.Get) 
// 删 
resultRoutes.DELETE("/:id/", result.Delete) 
} 
} 
router.Run(":" + port) 
log.Info("server start at port:", port) 
} 
这样web都已经启动了 那我们看看如果再界面上创建一个扫描任务是怎么样的
db文件
如果程序要想启动还需要个db文件 地址  https://github.com/jweny/pocassistdb  
里面包含web需要使用的账户 数据 描述等 最主要是的表  plugins  如下图所示
他是把yaml格式的poc解析成json后加上描述名称等字段入库
创建一个扫描任务
首先启动程序后 配置文件默认监听是  1321 端口
看后端代码
 api\routers\route.go#107 
scanRoutes := v1.Group("/scan") 
{ 
    // url的是创建单个url的任务  
    scanRoutes.POST("/url/", scan2.Url) 
    // raw是 上传raw文件的任务 
    scanRoutes.POST("/raw/", scan2.Raw) 
    // list是url列表文件的任务 
    scanRoutes.POST("/list/", scan2.List) 
} 
url的处理函数
1. 接收前端参数获取要用的poc名称 目标等信息
2. 通过  util.GenOriginalReq  生成一个请求包
3. 通过  rule.LoadDbPlugin  从数据库中加载poc 全部的poc还是指定的poc 根据vul_id来查询
4. 创建任务  task  创建  taskItem  包含生成的请求包 poc列表 task
5.  rule.TaskProducer(taskItem) 
func Url(c *gin.Context) { 
scan := scanSerializer{} 
err := c.ShouldBindJSON(&scan) 
if err != nil { 
c.JSON(msg.ErrResp("测试url不可为空，扫描类型为multi或all")) 
return 
} 
oreq, err := util.GenOriginalReq(scan.Target) 
if err != nil || oreq == nil { 
c.JSON(msg.ErrResp("原始请求生成失败")) 
return 
} 
// 插件列表 
plugins, err := rule.LoadDbPlugin(scan.Type, scan.VulList) 
if err != nil || plugins == nil{ 
c.JSON(msg.ErrResp("poc插件加载失败" + err.Error())) 
return 
} 
token := c.Request.Header.Get("Authorization") 
claims, _ := util.ParseToken(token) 
// 创建任务 
task := db.Task{ 
Operator: claims.Username, 
Remarks: scan.Remarks, 
Target:  scan.Target, 
} 
db.AddTask(&task) 
taskItem := &rule.TaskItem{ 
OriginalReq: oreq, 
Plugins:     plugins, 
Task:        &task, 
} 
c.JSON(msg.SuccessResp("任务下发成功")) 
go rule.TaskProducer(taskItem) 
go rule.TaskConsumer() 
return 
} 
GenOriginalReq 生成一个原始请求
 pkg\util\request.go#421  
这个request对象是没有发起请求的
1. 校验目标是否可以连接 通过发一个tcp包来判断 排除  icmp 的
2. 生成一个request对象  originalReq, err := http.NewRequest("GET", fixTarget, nil) 
3. 添加 headers   host   Accept-Encoding   Connection  等 并返回生成的request包
func GenOriginalReq(target string) (*http.Request, error) { 
verify, fixTarget := VerifyInputTarget(target) 
if !verify { 
errMsg := fmt.Errorf("util/requests.go:GenOriginalReq %s can not connect", target) 
log.Error(errMsg) 
return nil, errMsg 
} 
originalReq, err := http.NewRequest("GET", fixTarget, nil) 
if err != nil { 
errMsg := fmt.Errorf("util/requests.go:GenOriginalReq %s original request gen error %v", target, err) 
log.Error(errMsg) 
return nil, errMsg 
} 
originalReq.Header.Set("Host", originalReq.Host) 
originalReq.Header.Set("Accept-Encoding", "gzip, deflate") 
originalReq.Header.Set("Accept", "*/*") 
originalReq.Header.Set("User-Agent", conf.GlobalConfig.HttpConfig.Headers.UserAgent) 
originalReq.Header.Set("Accept-Language", "en") 
originalReq.Header.Set("Connection", "close") 
return originalReq, nil 
} 
rule.TaskProducer 将taskitem写到TaskChannel管道里
func TaskProducer(item *TaskItem) { 
TaskChannel <- item 
} 
rule.TaskConsumer() 消费TaskChannel管道里的数据调用poc测试
从  TaskChannel  管道中接收数据后 通过  RunPlugins 处理 数据
func TaskConsumer() { 
for item := range TaskChannel { 
// 校验格式 
err := item.Verify() 
if err != nil { 
log.Error("[rule/poc.go:WriteTaskError scan error] ", err) 
db.ErrorTask(item.Task.Id) 
continue 
} 
RunPlugins(item) 
} 
} 
RunPlugins 协程限制并发运行插件
 poc\rule\parallel.go#137 
1. 从配置文件中获取到限制并发数量  8 
2. 通过  ants  创建协程池来管理协程
3. 通过  rule.RunPoc  来调用poc
4. 当所有poc都run完 才认为这个任务是完成的了
func RunPlugins(item *TaskItem) { 
// 限制插件并发数 
var wg sync.WaitGroup 
parallel := conf.GlobalConfig.PluginsConfig.Parallel 
p, _ := ants.NewPoolWithFunc(parallel, func(item interface{}) { 
RunPoc(item, false) 
wg.Done() 
}) 
defer p.Release() 
oreq := item.OriginalReq 
plugins := item.Plugins 
task := item.Task 
log.Info("[rule/parallel.go:TaskConsumer start scan]", oreq.URL.String()) 
for i := range plugins { 
item := &ScanItem{oreq, &plugins[i], task} 
wg.Add(1) 
p.Invoke(item) 
} 
wg.Wait() 
db.DownTask(task.Id) 
} 
rule.RunPoc 运行poc
 poc\rule\run.go#54  
根据poc的参数位置替换请求对应位置的参数 如果script即go的poc代码直接调用 如果json的即原来是yaml的在
db里的 
通过cel控制器处理 验证 最后输出结果
1. 获取  scanItem 后调用  Verify 方法 只是验证数据是否都不是空的
2. 定义 req控制器  RequestController  定义 cel控制器  CelController 
3. 初始化 req  requestController.Init(scanItem.OriginalReq)  生成Fasthttp 原始请求转为fasthttp
4. 获取handler  handles := getHandles(scanItem.Plugin.Affects)  默认是数据库里的 除  script 的即go脚本
的
5. 初始化cel  celController.Init(scanItem.Plugin.JsonPoc)  对这个poc进行cel构建