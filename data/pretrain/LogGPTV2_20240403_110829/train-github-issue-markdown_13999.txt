twisted.internet.base.ThreadedResolver currently (18.9.1.dev0) uses
socket.gethostbyname to do DNS resolution, which does not support IPv6.
Meanwhile, scrapy currently (1.5.0) uses ThreadedResolver to do DNS
resolution, thus unable to crawl host name with IPv6 address only or pure IPv6
ip address.
https://github.com/scrapy/scrapy/blob/1fd1702a11a56ecbe9851ba4f9d3c10797e262dd/scrapy/resolver.py
Script to reproduce the scrapy exception:
    if [ ! -d testvenv ]; then virtualenv -p python testvenv ; fi
    . testvenv/bin/activate
    pip install -q scrapy  # or install twisted and scrapy from source repository
    python -m scrapy shell http://ipv6.google.com
    # raises:
    # twisted.internet.error.DNSLookupError: DNS lookup failed: no results for hostname lookup: ipv6.google.com.
    python -m scrapy shell http://[::1]  # no need for existing web server in [::1]:80
    # raises:
    # twisted.internet.error.DNSLookupError: DNS lookup failed: no results for hostname lookup: ::1.
But the default resolver in recent twisted supports IPv6 well.
Delete `reactor.installResolver(self._get_dns_resolver())` in  
https://github.com/scrapy/scrapy/blob/master/scrapy/crawler.py#L289  
and test again:
    python -m scrapy shell http://ipv6.google.com
    python -m scrapy shell http://[::1]
it works and no DNSLookupError exception raised.
Although CachingThreadedResolver is used to cache DNS query, I think that
compatibility with IPv6 outweigh the requirement of in process DNS cache, or
we can reimplement DNS cache using middleware. At least, how about supply a
option for user to explicitly enable IPv6 support in case the
`DNSCACHE_ENABLED = False`?  
Regarding the timeout option in getHostByName, I think there should be other
approaches to set DNS query timeout (I'm not familiar with twisted).
In deed, I tried creating PR to twisted to make
`ThreadedResolver.getHostByName` use `getaddrinfo` to support IPv6, but after
discussing with cdunklau in irc://freenode/twisted-dev , I realised it's a
backward incompatible change and is unlikely to be accepted, then concluded
that the best option is to use the the default IPv6 compatible resolver in
twisted instead of antiquated `ThreadedResolver.getHostByName`.
(note: to use the new default resolver which is IPv6 compatible, the required
Twisted version should also be updated)