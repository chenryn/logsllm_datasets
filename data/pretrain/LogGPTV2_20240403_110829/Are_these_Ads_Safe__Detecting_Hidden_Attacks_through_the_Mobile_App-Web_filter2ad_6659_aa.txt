# Title: Are These Ads Safe? Detecting Hidden Attacks through the Mobile App-Web Interfaces

## Authors:
- Vaibhav Rastogi<sup>1</sup>
- Rui Shao<sup>2</sup>
- Yan Chen<sup>3</sup>
- Xiang Pan<sup>3</sup>
- Shihong Zou<sup>4</sup>
- Ryan Riley<sup>5</sup>

### Affiliations:
- <sup>1</sup>University of Wisconsin-Madison and Pennsylvania State University
- <sup>2</sup>Zhejiang University
- <sup>3</sup>Northwestern University
- <sup>4</sup>State Key Lab of Networking and Switching, Beijing University of Posts and Telecommunications
- <sup>5</sup>Qatar University

## Abstract
Mobile users are increasingly becoming targets of malware infections and scams. Some platforms, such as Android, are more open and thus easier to exploit than others. To mitigate such attacks, it is crucial to understand their origins. We explore a previously unexplored vector: the interface between mobile apps and the web. In-app advertisements often lead users to web pages that may further redirect to potentially malicious destinations. Similarly, applications may embed web links leading to external sites. Even if the original application is not malicious, the web destinations visited by the user could play a significant role in propagating attacks.

To study these attacks, we developed a systematic methodology consisting of three components: triggering web links and advertisements, detecting malware and scam campaigns, and determining the provenance of such campaigns. Our methodology is realized through various techniques and contributions, resulting in a robust, integrated system capable of continuous operation without human intervention. Over a two-month period, we analyzed over 600,000 applications in the United States and China, triggering approximately 1.5 million links. Our findings include rogue antivirus scams, free iPad and iPhone scams, and advertisements propagating SMS trojans disguised as fake movie players. Broadly, our system enables the identification of responsible parties (such as specific ad networks, websites, and applications) that intentionally or unintentionally allow attacks to reach end users, thereby increasing accountability.

## I. Introduction
Android is the predominant mobile operating system, with about 80% of the global market share. However, it also leads in terms of malware infections, partly due to its open nature, which allows users to install applications from unverified sources. This openness facilitates the easy propagation of malware. Additionally, industry researchers report that traditional desktop scams, such as ransomware and phishing, are increasingly targeting mobile devices.

To combat Android malware and scams, it is essential to understand how attackers reach users. While much research has focused on analyzing malicious applications, an important yet unexplored vector is benign, legitimate applications that lead users to websites hosting malicious content. We call this the app-web interface. This can occur through web links embedded directly in applications or via the landing pages of advertisements from ad networks.

A solution for analyzing and understanding this vector involves three components: triggering (or exploring) the application UI and following any reachable web links, detecting malicious content, and collecting provenance information. There has been related research on malvertising, but the context here is broader and requires different solutions for triggering and detection, especially for mobile platforms.

## II. Background
Our contributions include:

- **Framework Development**: We developed a framework for analyzing the app-web interfaces in Android applications. The framework includes three key features: triggering of the app-web interfaces, detection of malicious content, and provenance to identify responsible parties.
  
- **UI Interaction Technique**: We developed a novel technique to interact with UI widgets whose internals do not appear in the GUI hierarchy, using a computer graphics-based algorithm to find clickable elements inside such widgets.
  
- **Ad Network Study**: We conducted a systematic study to associate ad networks with ad library packages in existing applications, identifying 201 ad networks and their associated ad library packages, which is the largest number identified to date.
  
- **Deployment and Findings**: We deployed our system for two months in two continents, studying over 600,000 applications from Google Play and four Chinese stores. We identified hundreds of malicious files and other scam campaigns, including rogue ad networks, free product scams, and SMS trojans.

Our findings highlight both applications embedding links leading to malicious content and malicious advertisements. The responsible parties vary, including application developers and ad networks. Our results indicate that better protection for users can be achieved by screening out offending applications and making ad networks more accountable for their content.

## III. Methodology
Our methodology for analyzing app-web interfaces involves three conceptual components:

- **Triggering**: Interacting with the application to launch web links, which may be statically embedded or dynamically generated.
- **Detection**: Discriminating between malicious and benign activities resulting from triggering.
- **Provenance**: Understanding the cause or origin of detected malicious activity and attributing events to specific entities or parties.

Different processes and techniques can be plugged into these components independently. The rest of this section elaborates on these components and the processes incorporated into each.

### A. Triggering App-Web Interfaces
To trigger web links, we run applications in a custom dynamic analysis environment. Each application is executed in a virtual machine based on the Android emulator. We use techniques from past research and new methods to navigate the GUI automatically and trigger app-web interfaces.

#### 1. Application UI Exploration
Application UI exploration is necessary to trigger app-web interfaces. Researchers have developed several systems for this purpose, and we leverage these, along with new techniques to address specific issues in the app-web interface.

## IV. Implementation Details
(Section IV will discuss the technical details of the implementation, including the tools and techniques used for triggering, detection, and provenance.)

## V. Results
(Section V will present the results of our analysis, including the types of malware and scams detected, and the effectiveness of our system in identifying them.)

## VI. Interesting Findings
(Section VI will provide case studies and detailed findings, characterizing the malware and scam landscape at the app-web interface.)

## VII. Miscellaneous Aspects
(Section VII will cover additional relevant aspects, such as limitations, future work, and potential extensions of our methodology.)

## VIII. Related Work
(Section VIII will review related work in the field, comparing and contrasting our approach with existing methods.)

## IX. Conclusion
(Section IX will summarize the key contributions of our work and discuss its implications for improving the security of mobile ecosystems.)

---

This revised version aims to improve the clarity, coherence, and professional tone of the text.