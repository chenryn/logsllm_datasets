title:Are these Ads Safe: Detecting Hidden Attacks through the Mobile App-Web
Interfaces
author:Vaibhav Rastogi and
Rui Shao and
Yan Chen and
Xiang Pan and
Shihong Zou and
Ryan Riley
Are these Ads Safe: Detecting Hidden Attacks
through the Mobile App-Web Interfaces
Vaibhav Rastogi1, Rui Shao2, Yan Chen3, Xiang Pan3, Shihong Zou4, and Ryan Riley5
1University of Wisconsin-Madison and Pennsylvania State University 2Zhejiang University 3Northwestern University
5Qatar University
4State Key Lab of Networking and Switching, Beijing University of Posts and Telecommunications
PI:EMAIL PI:EMAIL PI:EMAIL
PI:EMAIL PI:EMAIL PI:EMAIL
Abstract—Mobile users are increasingly becoming targets of
malware infections and scams. Some platforms, such as Android,
are more open than others and are therefore easier to exploit than
other platforms. In order to curb such attacks it is important
to know how these attacks originate. We take a previously
unexplored step in this direction and look for the answer at
the interface between mobile apps and the Web. Numerous in-
app advertisements work at this interface: when the user taps on
an advertisement, she is led to a web page which may further
redirect until the user reaches the ﬁnal destination. Similarly,
applications also embed web links that again lead to the outside
Web. Even though the original application may not be malicious,
the Web destinations that the user visits could play an important
role in propagating attacks.
In order to study such attacks we develop a systematic
methodology consisting of three components related to triggering
web links and advertisements, detecting malware and scam
campaigns, and determining the provenance of such campaigns
reaching the user. We have realized this methodology through
various techniques and contributions and have developed a ro-
bust, integrated system capable of running continuously without
human intervention. We deployed this system for a two-month
period and analyzed over 600,000 applications in the United
States and in China while triggering a total of about 1.5 million
links in applications to the Web. We gain a general understanding
of attacks through the app-web interface as well as make
several
including a rogue antivirus scam,
free iPad and iPhone scams, and advertisements propagating
SMS trojans disguised as fake movie players. In broader terms,
our system enables locating attacks and identifying the parties
(such as speciﬁc ad networks, websites, and applications) that
intentionally or unintentionally let them reach the end users and,
thus, increasing accountability from these parties.
interesting ﬁndings,
I.
INTRODUCTION
Android is the predominant mobile operating system with
about 80% worldwide market share [1]. At the same time,
Android also tops among mobile operating system in terms of
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23234
malware infections [2]. Part of the reason for this is the open
nature of the Android ecosystem, which permits users to install
applications for unveriﬁed sources. This means that users can
install applications from third-party app stores that go through
no manual review or integrity violation. This leads to easy
propagation of malware. In addition, industry researchers are
reporting [3] that some scams which traditionally target desktop
users, such as ransomware and phishing, are also gaining ground
on mobile devices.
In order to curb Android malware and scams, it is important
to understand how attackers reach users. While a signiﬁcant
amount of research effort has been spent analyzing the malicious
applications themselves, an important, yet unexplored vector
of malware propagation is benign, legitimate applications that
lead users to websites hosting malicious applications. We call
this the app-web interface. In some cases this occurs through
web links embedded directly in applications, but in other
cases the malicious links are visited via the landing pages
of advertisements coming from ad networks.
A solution directed towards analyzing and understanding
this malware propagation vector will have three components:
triggering (or exploring) the application UI and following
any reachable web links; detection of malicious content; and
collecting provenance information, i.e., how malicious content
was reached. There has been some related research in the
context of the Web, to study so-called malvertising or malicious
advertising [4], [5]. The context of the problem here is however
broader and the problem itself requires different solutions to
triggering and detection to deal with aspects speciﬁc to mobile
platforms (such as complicated UI and trojans being the primary
kinds of malware).
In order to better analyze and understand attacks through
app-web interfaces, we have developed an analysis framework
to explore web links reachable from an application and detect
any malicious activity. We dynamically analyze applications
by exercising their UI automatically and visiting and recording
any web links that are triggered. We have used this framework
to analyze 600,000 applications, gathering about 1.5 million
URLs, which we then further analyzed using established URL
blacklists and anti-virus systems to identify malicious websites
and applications that are downloadable from such websites. Our
methodology enables us to explore the Web that is reachable
from within mobile applications, something that, we believe, is
not yet done by traditional search engines and website blacklist
systems such as Google Safebrowsing.
II. BACKGROUND
We make the following contributions.
• We have developed a framework for analyzing the app-
web interfaces in Android applications. We identify
three features for a successful methodology: triggering
of the app-web interfaces, detection of malicious con-
tent, and provenance to identify the responsible parties.
We incorporate appropriate solutions for the above
features and have implemented a robust system to
automatically analyze app-web interfaces. The system
is capable of continuous operation with little human
intervention.
• As part of our triggering app-web interfaces, we
developed a novel technique to interact with UI widgets
whose internals do not appear in the GUI hierarchy.
We develop a computer graphics-based algorithm to
ﬁnd clickable elements inside such widgets.
•
In order to assist with determining the provenance of
identiﬁed malicious links, we conducted a systematic
study to associate ad networks with ad library packages
in existing applications. Our study reveals 201 ad
networks and their associated ad library packages. To
the best of our knowledge, this is the largest number
of ad libraries identiﬁed.
• We deployed our system for a period of two months
in two continents, with one location in Northwestern
University campus and the other in Zhejiang University
campus. We studied over 600,000 applications from
Google Play and four Chinese stores for a period of
two months and identiﬁed hundreds of malicious ﬁles
and other scam campaigns. We present a number of
interesting ﬁndings and case studies in an attempt to
characterize the malware and scam landscape that can
be found at the app-web interface. As some examples,
we have found rogue ad networks propagating rogue
applications; scams enticing users by claiming to give
away free products propagating through both in-app
advertisements and links embedded in applications;
and SMS trojans propagating through well-known ad
networks.
In our ﬁndings, we have detected both applications embed-
ding links leading to malicious content as well as advertisements
that are malicious. We note that the two cases are different in
terms of which party is to blame: the application developer, or
others like the advertisement networks. Our results indicate that
in both the cases, the users can be offered better protection on
the Android ecosystem by screening out offending applications
that embed links leading to malicious content as well as making
ad networks more accountable for their ad content.
The rest of this paper is organized as follows. Section II
presents the necessary background. Our methodology is pre-
sented in Section III while Section IV discusses implementation
details. Section V and VI presents our results and some
interesting ﬁndings characterizing the studied malware and
scam landscape. Miscellaneous relevant aspects are discussed
in Section VII and related work is presented in Section VIII.
Finally, we conclude in Section IX.
In this section we provide the necessary context in which
our system and study ﬁts as well as some details which led to
important decisions in our methodology.
A. Android Ecosystem
Android is a dominant mobile operating system. The core
operating system is developed primarily by Google and is used
by many device vendors as the platform for their devices. Apart
from system applications, Android also allows running third-
party applications, which serve to enrich the functionality of
user’s devices.
Application stores serve as the primary venue for the users
to ﬁnd and install applications. Google maintains the ofﬁcial
Android application store, called Google Play. However, there
also exist other application stores. In some countries, such as
China, Google services are not as popular and so the unofﬁcial
stores serve as the primary method of application distribution.
Most devices and vendors allow application installation from
unofﬁcial sources, including third-party application stores and
web links.
Apart from the discovery mechanisms built into the ap-
plication stores, users may also discover applications through
advertisements in other applications. These advertisements may
be served through ad networks or may be directly embedded by
the application developers without the involvement of interme-
diary ad networks. Furthermore, in some cases applications may
include direct web links (i.e., not afﬁliated with any application
store).
B. Advertising
In-app advertisements are a signiﬁcant source of revenue
for application developers, and form a large portion of app-web
interaction on mobile devices. As an ad-supported application
runs,
it shows advertisements from various ad networks.
Advertisements take a variety of forms ranging from banners
at top or bottom area of the screen, whole-screen interstitials
during switching of activities (roughly equivalent to windows)
in the application, and as system notiﬁcations.
In the context of mobile advertising, the advertisers are
parties who wish to advertise their products, the publishers
are mobile applications (or their developers) that bring adver-
tisements to the users. Ad networks or aggregators link the
publishers to the advertisers, being paid by the latter and paying
the former. Tapping on advertisements may lead users to content
on Google Play or to web links. This often happens through a
chain of several web page redirections. We generally refer to
all these URLs in these web page redirections as the redirection
chain and the ﬁnal web page as the landing page. Ad networks
themselves may participate in complex relationships with each
other. Certain parties, which may be ad networks themselves,
run so-called ad exchanges where a given ad space is auctioned
among several bidding ad networks so as to maximize proﬁts for
the publishers. Ad networks also have syndication relationships
with each other: an ad network assigned to ﬁll a given ad space
may delegate that space to another network. Such delegation
can happen multiple times through a chain of ad networks and
is visible in the redirection chains.
2
Applications with advertisements embed some code from ad
networks. This code provides the glue between the ad network
and the publisher. It is responsible for managing and serving
advertisements and is called ad library.
C. Android Malware
Among the mobile operating systems, Android is particu-
larly troubled by malware. Part of the reason for this is the
openness in the ecosystem: applications can be downloaded
from the Web and through unofﬁcial application stores. The
stores may be checking for malware with varying strictness
while for Web links, there may be very little the user can do
to know whether the downloaded applications are trusted.
It is also noteworthy that most Android malware comes as
trojans, i.e., applications that have a purported useful function
as well as a hidden malicious function. Android implements a
sandboxed application model, so that the compromise of one
application does not directly mean compromise of the whole
system. In the context of the Web and browsers, this means
that drive-by-download attacks are difﬁcult. Therefore, malware
infections on Android happen not through drive-by-download
attacks, which are fairly common on some other operating
systems, but through trojans.
In our methodology, therefore, we do not attempt to detect
drive-by-download attacks but rather scams that may entice
users into downloading trojans or applications that charge users
exorbitant amount of money.
III. METHODOLOGY
Our methodology for analyzing app-web interfaces will
involve the following three conceptual components:
•
Triggering. This involves interacting with the applica-
tion to launch web links, which may be statically em-
bedded in the application code or may be dynamically
generated (such as those in the case of advertisements).
• Detection. This includes the various processes to
discriminate between malicious and benign activities
that may occur as a result of triggering.
Provenance. This is about understanding the cause or
origin of a detected malicious activity, and attributing
events to speciﬁc entities or parties. Once a malicious
activity is detected,
this component provides the
information required in order to hold the responsible
parties accountable.
•
Different processes and techniques may be plugged-in to these
different components almost independently of what goes into
the other components. The rest of this section elaborates on
these three components, describing the various processes we
incorporate into each of them. An overall schematic depiction
of all the involved processes is presented in Figure 1.
A. Triggering App-Web interfaces
Recall from previous discussion that web links in ap-
plications are often dynamically generated (such as from
advertisements). Thus a static approach of extracting web
links is not sufﬁcient. Therefore, in order to trigger web links
3
from within the application, we run the applications in a
custom dyanamic analysis environment. To enable scalability
and continuous operation, running applications on real devices
is not a feasible option. Therefore, each application is run in a
virtual machine based on the Android emulator. The applications
we are interested in are primarily GUI oriented and therefore
we need to navigate through the GUI automatically to trigger
app-web interfaces. The rest of this subsection describes the
techniques that we leverage from past research in order to
accomplish this, as well as some new techniques designed to
overcome issues speciﬁc to the app-web interface.
1) Application UI Exploration: Application user interface
(UI) exploration is necessary to trigger app-web interfaces.
Researchers have come up with a number of systems for