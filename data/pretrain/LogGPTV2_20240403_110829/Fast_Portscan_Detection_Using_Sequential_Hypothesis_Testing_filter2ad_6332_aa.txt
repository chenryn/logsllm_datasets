title:Fast Portscan Detection Using Sequential Hypothesis Testing
author:Jaeyeon Jung and
Vern Paxson and
Arthur W. Berger and
Hari Balakrishnan
Fast Portscan Detection Using Sequential Hypothesis Testing
Jaeyeon Jung, Vern Paxson, Arthur W. Berger, and Hari Balakrishnan
MIT Computer Science and Artiﬁcial Intelligence Laboratory
Cambridge, MA USA
(cid:0)jyjung, awberger, hari(cid:1)@csail.mit.edu
ICSI Center for Internet Research
and
Lawrence Berkeley National Laboratory
Berkeley, CA USA
PI:EMAIL
Abstract
Attackers routinely perform random “portscans” of IP ad-
dresses to ﬁnd vulnerable servers to compromise. Network Intru-
sion Detection Systems (NIDS) attempt to detect such behavior
and ﬂag these portscanners as malicious. An important need in
such systems is prompt response: the sooner a NIDS detects mal-
ice, the lower the resulting damage. At the same time, a NIDS
should not falsely implicate benign remote hosts as malicious.
Balancing the goals of promptness and accuracy in detecting
malicious scanners is a delicate and difﬁcult task. We develop a
connection between this problem and the theory of sequential hy-
pothesis testing and show that one can model accesses to local
IP addresses as a random walk on one of two stochastic pro-
cesses, corresponding respectively to the access patterns of be-
nign remote hosts and malicious ones. The detection problem then
becomes one of observing a particular trajectory and inferring
from it the most likely classiﬁcation for the remote host. We use
this insight to develop TRW (Threshold Random Walk), an on-
line detection algorithm that identiﬁes malicious remote hosts. Us-
ing an analysis of traces from two qualitatively different sites, we
show that TRW requires a much smaller number of connection at-
tempts (4 or 5 in practice) to detect malicious activity compared to
previous schemes, while also providing theoretical bounds on the
low (and conﬁgurable) probabilities of missed detection and false
alarms. In summary, TRW performs signiﬁcantly faster and also
more accurately than other current solutions.
1. Introduction
Many Internet attacks seen today begin with a reconnais-
sance phase in which the attacker probes a set of addresses
at a site looking for vulnerable servers. In principle, this
pattern of port scanning manifests quite differently from le-
gitimate remote access to the site, and thus holds promise
for providing a means by which a network intrusion detec-
tion system (NIDS) can identify an attacker at a stage early
enough to allow for some form of protective response to
mitigate or fully prevent damage.
A number of difﬁculties arise, however, when we attempt
to formulate an effective algorithm for detecting port scan-
ning. The ﬁrst is that there is no crisp deﬁnition of the activ-
ity. For example, clearly an attempted HTTP connection to
the site’s main Web server is okay, while a sweep through
the entire address space looking for HTTP servers is not
okay (though see below). But what about connections to a
few addresses, some of which succeed and some of which
fail?
Another issue is the granularity of identity. Do we con-
sider probes from adjacent remote addresses as part of a
single reconnaissance activity? What about probes from
merely nearby addresses, or disparate addresses which to-
gether form a clear “coverage” pattern? Similarly, the local-
ity of the addresses to which the probes are directed might
be quite tight (a set of ports at a single local address, or
the same port across adjacent local addresses) or scattered
about the site’s address space.
There are temporal considerations as well as spatial ones.
Over how much time do we track activity? Do we factor in
the rate at which connections are made? As time increases, a
related spatial problem also arises: due to the use of DHCP,
NAT, and proxies, a single address might correspond to
multiple actual hosts, or, conversely, a single host’s activ-
ity might be associated with multiple addresses over time.
A ﬁnal issue is that of intent. Not all scans are necessarily
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
1
hostile. For example, some search engines use not only “spi-
dering” (following embedded links) but also port scanning
in order to ﬁnd Web servers to index. In addition, some ap-
plications (e.g., SSH, some peer-to-peer and Windows ap-
plications, etc.) have modes in which they scan in a benign
attempt to gather information or locate servers. Ideally, we
would like to separate out such benign use from overtly
malicious use. We would note, however, that the question
of whether scanning by search engines is benign will ulti-
mately be a policy decision that will reﬂect the site’s view
of the desirability to have information about its servers pub-
licly accessible.
The state of the art in detecting scanners is surprisingly
limited. Existing schemes have difﬁculties catching all but
high-rate scanners and often suffer from signiﬁcant levels
of false positives. In this work we focus on the problem of
prompt detection: how quickly after the initial onset of ac-
tivity can we determine with high probability that a series
of connections reﬂects hostile activity? Note that “quickly”
here is in terms of the amount of subsequent activity by the
scanner: the activity itself can occur at a very slow rate, but
we still want to nip it in the bud, i.e., detect it before it
has gone very far; and, ideally, do so with few false posi-
tives. The algorithm we develop, Threshold Random Walk
(TRW), can generally detect a scanner after 4 or 5 connec-
tion attempts, with high accuracy.
In our work we use traces from two sites to develop and
assess our detection algorithm. Both sites operate the Bro
NIDS, which has its own scan detection algorithm based on
counting the number of different local addresses to which
a remote address makes connections. The alerts from the
NIDS thus give us a limited form of “ground truth.” At one
of the sites, these alerts are used to block subsequent ac-
tivity from the scanner. Given the site’s willingness to use
this policy (which has been in place for a number of years),
and from the site’s operational follow-up of uncovering er-
roneous blocks of benign sources (primarily triggered by
complaints received by the help desk), we argue that this
blocking policy is known to have a low degree of false pos-
itives and a high degree of efﬁcacy.1
Therefore, regarding the ﬁrst issue above of how to de-
ﬁne a scan, at a minimum we require that our algorithm per-
form well in detecting the activity ﬂagged by Bro’s algo-
rithm. However, we would also like to detect lower-proﬁle
malicious probing, and we would like to show we can ﬂag
the same trafﬁc that Bro does, but sooner. Speed of detection
can be quite important for sites such as this one where the
NIDS actively blocks scanners, because the sooner a scan-
1
The site reports that on the occasions when the blocking mechanism
fails, it is generally a matter of a few hours before an attacker com-
promises a local host; while with the mechanism in place, it is a mat-
ter of days to weeks. Thus, thwarting the reconnaissance activity has
great utility.
ner is detected, the less information it can glean before be-
ing blocked.
In general, we consider it acceptable to ﬂag any re-
mote host as a scanner if it turns out that that host would
never subsequently make a useful connection, where “use-
ful” means successfully established, data transferred, and,
to the degree we can determine, the transfer was benign.
Clearly, assessing this property requires an oracle, and so
cannot be performed in real-time; but we can approximate it
by a what-if assessment of our algorithm using trace-driven
simulation. Also, it is important to note that we do not aim
to detect all such scanners. We are content with detecting
most of them, provided we do so quickly. In addition, since
the data we have available from the two sites consists al-
most solely of TCP connection logs, we conﬁne our analy-
sis to detecting TCP scanners.
Regarding the other issues above, for simplicity we con-
ﬁne our notion of “identity” to single remote IP addresses.
Thus, we do not aim to detect “distributed” scans [9]. We
also focus on detecting scans of multiple local addresses,
regardless of their location in the address space, and do not
consider detecting “vertical” scans of a single host. In terms
of time, we aim to detect scans that might be spread over in-
tervals ranging up to hours (our traces are all 24 hours long),
and we do not consider the particular rate at which a remote
host attempts to make connections.
We pursue the problem in the general framework of
anomaly detection, though unlike classical anomaly detec-
tion we model not only benign behavior but also malicious
behavior. Initially, we had thought to develop an algorithm
that would train on logs of past connections in terms of
differences regarding to which portions of a site’s address
space, and to which services, benign and malicious hosts
tend to attempt to connect, and then use those differences as
priors for making Bayesian decisions. However, our anal-
ysis of the sites’ connection logs revealed a sharp distinc-
tion between the activity of apparently benign hosts and
malicious hosts simply in terms of the proportion of their
connections that are successfully established, and so our ﬁ-
nal algorithm has the highly desirable properties that (1) it
does not require training, and (2) it does not require re-
parameterization when applying it at different sites.
The development of the work is as follows. In (cid:0)2, we dis-
cuss previous research on scan detection, and related work.
In (cid:0)3, we present the connection log data that motivates the
general form of our detection algorithm. In (cid:0)4, we develop
the algorithm and present a mathematical analysis of how to
parameterize its model in terms of expected false positives
and false negatives, and how these trade off with the detec-
tion speed (number of connection attempts observed). We
then evaluate the performance of the algorithm in (cid:0)5, com-
paring it to that of other algorithms. We discuss issues for
further work in (cid:0)6, and summarize in (cid:0)7.
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
2
2. Related Work
As noted by Staniford et al., there has been surprisingly
little work on the problem of detecting scans [7]. Histori-
cally most scan detection has been in the simple form of de-
tecting  events within a time interval of (cid:1) seconds. The
ﬁrst such algorithm in the literature was that used by the
Network Security Monitor (NSM) [2], which had rules to
detect any source IP address connecting to more than 15 dis-
tinct destination IP addresses within a given time window.
Such approaches have the drawback that once the window
size is known it is easy for attackers to evade detection by
simply increasing their scanning interval. Moreover, the al-
gorithm can erroneously ﬂag a legitimate access such as that
of Web crawlers or proxies.
Snort [6] implements similar methods. Version 2.0.2
uses two preprocessors. The ﬁrst is packet-oriented, focus-
ing on detecting malformed packets used for “stealth scan-
ning” by tools such as nmap [1]. The second is connection-
oriented. It checks whether a given source IP address
touched more than (cid:2) number of ports or (cid:3) number of IP
addresses within (cid:4) seconds. Snort’s parameters are tunable,
but it suffers from the same drawbacks as NSM since both
rely on the same metrics.
Other work has built upon the observation that failed
connection attempts are better indicators for identifying
scans. Since scanners have little knowledge of network
topology and system conﬁguration, they are likely to often
choose an IP address or port that is not active. The algorithm
provided by Bro [4] treats connections differently depend-
ing on their service (application protocol). For connections
using a service speciﬁed in a conﬁgurable list, Bro only per-
forms bookkeeping if the connection attempt failed (was ei-
ther unanswered, or elicited a TCP RST response). For oth-
ers, it considers all connections, whether or not they failed.
It then tallies the number of distinct destination addresses to
which such connections (attempts) were made. If the num-
ber reaches a conﬁgurable parameter , then Bro ﬂags the
source address as a scanner.
By default, Bro sets  (cid:0) (cid:1)(cid:2)(cid:2) addresses and the set of
services for which only failures are considered to HTTP,
SSH, SMTP, IDENT, FTP data transfer (port 20), and Go-
pher (port 70). However, the sites from which our traces
came used  (cid:0) (cid:3)(cid:2) instead.
Robertson et al. also focused on failed connection at-
tempts, using a similar threshold method [5]. In general,
choosing a good threshold is important: too low, and it can
generate excessive false positives, while too high, and it
will miss less aggressive scanners. Indeed, Robertson et al.
showed that performance varies greatly based on parame-
ter values.
To address problems with these simple counting meth-
ods, Leckie et al. proposed a probabilistic model to de-
tect likely scan sources [3]. The model derives an access
probability distribution for each local IP address, computed
across all remote source IP addresses that access that des-
tination. Thus, the model aims to estimate the degree to
which access to a given local IP address is unusual. The
model also considers the number of distinct local IP ad-
dresses that a given remote source has accessed so far. Then,
the probability is compared with that of scanners, which are
modeled as accessing each destination address with equal
probability. If the probability of the source being an at-
tacker is higher than that of the source being normal, then
the source is reported as a scanner.
A major ﬂaw of this algorithm is its susceptibility to gen-
erating many false positives if the access probability distri-
bution to the local IP addresses is highly skewed to a small
set of popular servers. For example, a legitimate user who
attempts to access a local personal machine (which is oth-
erwise rarely accessed) could easily be ﬂagged as scanner,
since the probability that the local machine is accessed can
be well below that derived from the uniform distribution
used to model scanners.
In addition, the model lacks two important components.
The ﬁrst of these are conﬁdence levels to assess whether the
difference of the two probability estimates is large enough
to safely choose one model over the other. Second, it is not
clear how to soundly assign an a priori probability to desti-
nation addresses that have never before been accessed. This
can be particularly problematic for a sparsely populated net-
work, where only small number of active hosts are accessed
by benign hosts.
The ﬁnal work on scan detection of which we are aware
is that of Staniford et al. on SPICE [7]. SPICE aims to de-
tect stealthy scans—in particular, scans executed at very low
rates and possibly spread across multiple source addresses.
SPICE assigns anomaly scores to packets based on condi-
tional probabilities derived from the source and destination
addresses and ports. It collects packets over potentially long
intervals (days or weeks) and then clusters them using sim-
ulated annealing to ﬁnd correlations that are then reported
as anomalous events. As such, SPICE requires signiﬁcant
run-time processing and is much more complex than TRW.
3. Data Analysis
We grounded our exploration of the problem space, and
subsequently the development of our detection algorithm,
using a set of traces gathered from two sites, LBL and ICSI.
Both are research laboratories with high-speed Internet con-
nections and minimal ﬁrewalling (just a few incoming ports
blocked). LBL has about 6,000 hosts and an address space
of (cid:3)(cid:0)(cid:1)  (cid:3)(cid:2)  (cid:3)(cid:3) addresses. As such, its host density is fairly
sparse. ICSI has about 200 hosts and an address space of
(cid:3)(cid:2), so its host density is dense.
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
3
Active hosts
1 Total inbound connections
2
Size of local address space
3
4 Total unique remote hosts
5
6
7
8
Scanners detected by Bro
HTTP worms
other bad
remainder
LBL
15,614,500
131,836
5,906
190,928
122
37