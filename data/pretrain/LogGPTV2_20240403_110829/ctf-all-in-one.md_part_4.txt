### 程序崩溃与调试信息
程序因信号 `SIGSEGV`（段错误）终止。
```
Program terminated with signal SIGSEGV, Segmentation fault.
#0 0x5655559b in main ()
gdb-peda$ info frame
Stack level 0, frame at 0x41414141:
eip = 0x5655559b in main; saved eip = 
Outermost frame: Cannot access memory at address 0x4141413d
Arglist at 0x41414141, args:
Locals at 0x41414141, Previous frame's sp is 0x41414141
Cannot access memory at address 0x4141413d
```

### 函数调用约定
函数调用约定定义了函数调用时如何传递参数。以下分别介绍32位和64位Linux系统中的内核接口和用户接口的调用约定。

#### 内核接口
- **x86-32 系统调用约定**：使用寄存器传递参数。`eax` 用于存储系统调用编号，`ebx`、`ecx`、`edx`、`esi` 和 `ebp` 用于传递最多6个参数。返回值保存在 `eax` 中。其他寄存器（包括 `EFLAGS`）在 `int 0x80` 中保持不变。
- **x86-64 系统调用约定**：使用寄存器 `rdi`、`rsi`、`rdx`、`r10`、`r8` 和 `r9` 传递最多6个参数。系统调用通过 `syscall` 指令完成。除了 `rcx`、`r11` 和 `rax` 外，其他寄存器都被保留。系统调用编号必须在 `rax` 中传递。返回时，`rax` 包含系统调用的结果。只有整数或内存类型的值才会被传递给内核。

#### 用户接口
- **x86-32 函数调用约定**：参数通过栈传递。最后一个参数首先被放入栈中，直到所有参数都放置完毕，然后执行 `call` 指令。这是C语言函数在Linux上的标准方式。
- **x86-64 函数调用约定**：通过寄存器传递参数以提高效率。根据参数类型的不同，会使用不同的寄存器。对于整数类型，顺序使用 `rdi`、`rsi`、`rdx`、`rcx`、`r8` 和 `r9`。如果有多于6个整数参数，则后续参数在栈上传递。对于内存类型，参数在栈上传递。

### 环境变量
环境变量是键值对的形式，如 `name=value`。大多数 `name` 由大写字母加下划线组成。`value` 需要以 `\0` 结尾，定义了进程的运行环境。

#### 分类
- **按生命周期划分**：
  - **永久环境变量**：修改相关配置文件后永久生效。
  - **临时环境变量**：使用 `export` 命令，在当前终端下生效，关闭终端后失效。
- **按作用域划分**：
  - **系统环境变量**：对系统中所有用户生效。
  - **用户环境变量**：对特定用户生效。

#### 设置方法
- 在 `/etc/profile` 文件中添加变量，对所有用户永久生效。例如：
  ```sh
  # Set our default path
  PATH="/usr/local/sbin:/usr/local/bin:/usr/bin"
  export PATH
  ```
  添加后执行 `source /etc/profile` 使其生效。
- 在 `~/.bash_profile` 文件中添加变量，对当前用户永久生效。
- 直接运行 `export` 命令定义变量，只对当前终端临时生效。

#### 常用变量
- 使用 `echo` 打印变量：
  ```sh
  $ echo $PATH
  /usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl
  $ echo $HOME
  /home/firmy
  $ echo $LOGNAME
  firmy
  $ echo $HOSTNAME
  firmy-pc
  $ echo $SHELL
  /bin/bash
  $ echo $LANG
  en_US.UTF-8
  ```
- 使用 `env` 命令打印所有环境变量：
  ```sh
  $ env
  COLORFGBG=15;0
  COLORTERM=truecolor
  ...
  ```
- 使用 `set` 命令打印所有本地定义的 shell 变量：
  ```sh
  $ set
  '!'=0
  '#'=0
  ...
  ```
- 使用 `unset` 命令清除环境变量：
  ```sh
  unset $变量名
  ```

### LD_PRELOAD
`LD_PRELOAD` 环境变量可以定义在程序运行前优先加载的动态链接库。例如：
```sh
LD_PRELOAD=/path/to/libc.so ./binary
```

#### 示例
- 查看 `/bin/true` 的动态链接库：
  ```sh
  $ ldd /bin/true
  linux-vdso.so.1 => (0x00007fff9a9fe000)
  libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1c083d9000)
  /lib64/ld-linux-x86-64.so.2 (0x0000557bcce6c000)
  ```
- 使用自定义的 `libc`：
  ```sh
  $ LD_PRELOAD=~/libc.so.6 ldd /bin/true
  linux-vdso.so.1 => (0x00007ffee55e9000)
  /home/firmy/libc.so.6 (0x00007f4a28cfc000)
  /lib64/ld-linux-x86-64.so.2 (0x000055f33bc50000)
  ```

#### 注意事项
- 动态链接库需要使用 `ld.so` 进行重定位。通常符号链接到 `/lib64/ld-linux-x86-64.so`。
- 编译时隐式指定 `ld.so` 的搜索路径，并写入 ELF Header 的 `INTERP` 字段中。直接拷贝已编译的 `.so` 文件可能会引发搜索路径不正确的问题。
- 版本依赖高度耦合的发行版（如 ArchLinux）中，版本相差过大也会导致 `ld.so` 运行失败。

### environ
`environ` 是 `libc` 中定义的全局变量，指向环境变量表。由于环境变量表存在于栈上，因此可以通过 `environ` 指针泄露栈地址。

#### 示例
- 查看 `libc` 映射：
  ```sh
  gdb-peda$ vmmap libc
  Start End Perm Name
  0x00007ffff7a1c000 0x00007ffff7bcf000 r-xp /usr/lib/libc-2.27.so
  0x00007ffff7bcf000 0x00007ffff7dce000 ---p /usr/lib/libc-2.27.so
  0x00007ffff7dce000 0x00007ffff7dd2000 r--p /usr/lib/libc-2.27.so
  0x00007ffff7dd2000 0x00007ffff7dd4000 rw-p /usr/lib/libc-2.27.so
  ```
- 查看栈映射：
  ```sh
  gdb-peda$ vmmap stack
  Start End Perm Name
  0x00007ffffffde000 0x00007ffffffff000 rw-p [stack]
  ```
- 查找 `environ` 地址：
  ```sh
  gdb-peda$ shell nm -D /usr/lib/libc-2.27.so | grep environ
  00000000003b8ee0 V environ
  00000000003b8ee0 V _environ
  00000000003b8ee0 B __environ
  ```
- 读取 `environ` 指针值：
  ```sh
  gdb-peda$ x/gx 0x00007ffff7a1c000 + 0x00000000003b8ee0
  0x7ffff7dd4ee0 : 0x00007fffffffde48
  ```
- 读取环境变量表：
  ```sh
  gdb-peda$ x/5gx 0x00007fffffffde48
  0x7fffffffde48: 0x00007fffffffe1da 0x00007fffffffe1e9
  0x7fffffffde58: 0x00007fffffffe1fd 0x00007fffffffe233
  0x7fffffffde68: 0x00007fffffffe25f
  gdb-peda$ x/5s 0x00007fffffffe1da
  0x7fffffffe1da: "COLORFGBG=15;0"
  0x7fffffffe1e9: "COLORTERM=truecolor"
  0x7fffffffe1fd: "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus"
  0x7fffffffe233: "DESKTOP_SESSION=/usr/share/xsessions/plasma"
  0x7fffffffe25f: "DISPLAY=:0"
  ```

### procfs
`procfs` 是 Linux 内核提供的虚拟文件系统，为访问系统内核数据的操作提供接口。它不占用存储空间，而是占用内存。用户可以通过 `procfs` 查看有关系统硬件及当前正在运行进程的信息，甚至可以通过修改其中的内容来改变内核的运行状态。

#### 常用文件
- **/proc/cmdline**：启动时传递给内核的相关参数信息。
  ```sh
  $ cat /proc/cmdline
  BOOT_IMAGE=/boot/vmlinuz-4.14-x86_64 root=UUID=8e79a67d-af1b-4203-8c1c-3b670f0ec052 rw quiet resume=UUID=a220ecb1-7fde-4032-87bf-413057e9c06f
  ```
- **/proc/cpuinfo**：记录 CPU 相关的信息。
  ```sh
  $ cat /proc/cpuinfo
  processor : 0
  vendor_id : GenuineIntel
  cpu family : 6
  model : 60
  model name : Intel(R) Core(TM) i5-4210H CPU @ 2.90GHz
  stepping : 3
  microcode : 0x24
  cpu MHz : 1511.087
  cache size : 3072 KB
  physical id : 0
  siblings : 4
  core id : 0
  cpu cores : 2
  apicid : 0
  initial apicid : 0
  fpu : yes
  fpu_exception : yes
  cpuid level : 13
  wp : yes
  flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm cpuid_fault epb invpcid_single pti ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid xsaveopt dtherm ida arat pln pts
  bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass
  bogomips : 5788.66
  clflush size : 64
  cache_alignment : 64
  address sizes : 39 bits physical, 48 bits virtual
  power management:
  ...
  ```
- **/proc/crypto**：已安装的内核所使用的密码算法及详细信息。
  ```sh
  $ cat /proc/crypto
  name : ccm(aes)
  driver : ccm_base(ctr(aes-aesni),cbcmac(aes-aesni))
  module : ccm
  priority : 300
  refcnt : 2
  selftest : passed
  internal : no
  type : aead
  async : no
  blocksize : 1
  ivsize : 16
  maxauthsize : 16
  geniv : 
  ...
  ```
- **/proc/devices**：已加载的所有块设备和字符设备的信息。
  ```sh
  $ cat /proc/devices
  Character devices:
  1 mem
  4 /dev/vc/0
  4 tty
  4 ttyS
  5 /dev/tty
  5 /dev/console
  ...
  ```
- **/proc/interrupts**：X86/X86_64 系统上每个 IRQ 相关的中断号列表。
  ```sh
  $ cat /proc/interrupts
  CPU0 CPU1 CPU2 CPU3
  0: 15 0 0 0 IR-IO-APIC 2-edge timer
  1: 46235 1277 325 156 IR-IO-APIC 1-edge i8042
  8: 0 1 0 0 IR-IO-APIC 8-edge rtc0
  ...
  NMI: 0 0 0 0 Non-maskable interrupts
  LOC: 7363806 5569019 6138317 5442200 Local timer interrupts
  SPU: 0 0 0 0 Spurious interrupts
  ...
  ```
- **/proc/kcore**：系统使用的物理内存，以 ELF 核心文件格式存储。
  ```sh
  $ sudo file /proc/kcore
  /proc/kcore: ELF 64-bit LSB core file x86-64, version 1 (SYSV), SVR4-style, from 'BOOT_IMAGE=/boot/vmlinuz-4.14-x86_64 root=UUID=8e79a67d-af1b-4203-8c1c-3b670f0e'
  ```