### Data Collection and Analysis

#### 5.3.2 Title Leak Detection
To determine whether trackers collect information about users’ viewing habits, we checked if channels shared video titles with the trackers. We randomly selected 100 channels on each platform from the subset of channels where video playback was detected. The screenshots from each channel's menu were manually reviewed to determine the video title. If a channel displayed a generic title such as "Live News," the video playback itself was reviewed to determine the most accurate title. Finally, we searched for different encodings of each video title in the network traffic, following a similar approach to the ID leak detection method explained in Section 5.3.

#### Data Preparation and Plotting
```R
roku1k_uniq %>%
  filter(adblocked == "True") %>%
  distinct(channel_id, domain, category, rank, playback) %>%
  group_by(channel_id, category, rank, playback) %>%
  count() %>%
  arrange(rank)

# Plot
ggplot(roku1k_uniq, aes(x = rank, y = n, color = playback)) +
  geom_point(size = 0.67, alpha = 0.6) +
  coord_cartesian(xlim = c(min(roku1k_uniq$rank), quantile(roku1k_uniq$rank, 0.99)),
                  ylim = c(min(roku1k_uniq$n), quantile(roku1k_uniq$n, 0.997))) +
  facet_wrap(~category, nrow = 2, ncol = 5) +
  ylab("Number of Tracking Domains") +
  xlab("Channel Rank") +
  labs(color = "Video Played?") +
  scale_colour_Publication() +
  theme_Publication() +
  geom_hline(aes(yintercept = med, group = category), colour = "black", linetype = 2)
```

### Requests and Identifier Leaks

| **Privacy Setting** | **No. of HTTP Requests** | **No. of Contacted Tracker Domains** | **No. of Contacted Domains** | **AD ID (Instances/Channels)** | **Serial No. (Instances/Channels)** |
|---------------------|--------------------------|--------------------------------------|------------------------------|-------------------------------|------------------------------------|
| **No (default)**    | 4120                     | 96                                   | 266                          | 390/30                        | 135/14                             |
| **Yes**             | 3880                     | 128                                  | 294                          | 0/0                           | 118/13                             |

**Table 7: Effect of “Limit Ad Tracking” on the Roku Express**

Choosing to “Limit Ad Tracking” on the Roku Express seemingly makes no difference to the number and types of leaks to trackers except that the AD ID is not leaked at all.

### Channel and Domain Analysis

- **Roku**: 9 out of 100 randomly selected channels leaked the video title to a tracking domain.
- **Fire TV**: 14 out of 100 randomly selected channels leaked the video title to a tracking domain.

The majority of these channels were news channels:
- **Roku**: 8 channels
- **Fire TV**: 7 channels

The list of channel names, video titles, and tracking domains is provided in Appendix G (Table 13 for Roku and Table 14 for Fire TV).

- **Roku**: All video titles were leaked over unencrypted connections, exposing users’ viewership preferences to eavesdroppers.
- **Fire TV**: Only two channels (NBC News and WRAL) used an unencrypted connection when sending the title to tracking domains.

### User Expectations vs. Tracking Practices

A study by Malkin et al. [41] shows that only 29% of Smart TV users surveyed believed it was acceptable for advertisers to collect their viewing behavior. Our findings highlight the gap between user expectations and current tracking practices. This type of tracking may be subject to legislation such as the Video Privacy Protection Act (VPPA) in the United States, which prohibits collecting the viewing history of clients for video rental services.

### Effect of Countermeasures

#### Roku: “Limit Ad Tracking”
To evaluate the effect of this option, we ran a crawl with “Limit Ad Tracking” enabled and compared the results to a crawl with the same parameters but with “Limit Ad Tracking” turned off. The results showed that turning on “Limit Ad Tracking” reduced the number of AD ID leaks from 390 to zero but did not affect the number of trackers contacted by the channels. The number of serial number leaks remained the same, and the number of contacted domains increased from 96 to 128, indicating the limited efficacy of the “Limit Ad Tracking” option.

#### Amazon Fire TV: “Disable Interest Based Ads”
We evaluated the effect of the “Disable Interest Based Ads” option available on the Fire TV. Comparing the domains contacted in FireTV-CategoriesTop100-DisableInterestAds and FireTV-CategoriesTop100-MITM crawls, we found that the number of requests to amazon-adsystem.com decreased from 65 to just 10 channels, meaning Amazon seemingly reduced access to its own advertising system. However, the remaining traffic, including other identifiers communicated to trackers, remained largely the same.

### Network Connection Security

#### 5.5.1 Unencrypted Connections
Analyzing the requests sent over port 80, we found that 794 out of 1000 Roku channels sent at least one request in cleartext, contacting 191 distinct hosts from 123 distinct domains without encryption. Similarly, 762 out of 1000 Fire TV channels sent at least one unencrypted request. The top 10 domains contacted over insecure connections by Roku and Amazon are shown in Table 9.

#### 5.5.2 Certificate Validation
On Amazon Fire TV, we were able to install our own certificate on the device, allowing us to intercept HTTPS requests on 957 out of 1000 channels in the FireTV-Top1K-MITM crawl. On Roku, 43 channels failed to properly verify the server’s certificate, allowing the smart proxy to decrypt the TLS traffic. Table 10 shows the top ten TLS connections (by channel rank) that our smart proxy was able to decrypt in the Roku-Top1K-MITM crawl.

### Remote Control API Vulnerabilities

To investigate other ways OTT devices may compromise user privacy and security, we analyzed the local API endpoints of Roku and Fire TV. These interfaces enable debugging, remote control, and home automation by mobile apps and other automation software. In the past, security researchers identified several vulnerabilities, including Cross-Site Request Forgery and DNS Rebinding. Recently, Roku’s External Control API, which we used in this study to automate our crawls, was found to be vulnerable to a DNS Rebinding attack.

#### Analysis of Local Interfaces
We limited our analysis to attacks by malicious web scripts. To perform this attack, the attacker may run a malicious script (e.g., by running ads) on websites visited by a user browsing from the same network that the OTT device is connected to (e.g., a home network).

#### Roku External Control API
Roku has an extensive external control API that enables automation by third-party software. The API allows sending commands to install/uninstall/change channels and retrieve device information, including unique device identifiers (e.g., MAC address, Ad ID, serial number) and the SSID of the wireless network.

Analyzing the headers sent by Roku to remote control requests, we discovered that Roku sends “*” in the “Access-Control-Allow-Origin:” header. This value relaxes cross-origin restrictions in the browser, allowing scripts from arbitrary domains to read cross-origin resources without being limited by the Same Origin Policy. This exposes Roku devices to attacks from all web pages visited by Roku users.

We set up a page to demonstrate the attack and verified that a malicious web page visited by Roku users (or third-party scripts embedded on them) can abuse the External Control API to:
- Send commands to install/uninstall/launch channels and collect unique identifiers from Roku devices, even when the connected display is turned off.
- Geolocate Roku users via the SSID of the wireless network and WiFi SSID & Geolocation databases (such as WiGLE [80]).
- Extract MAC address, serial number, and other unique identifiers to track users or respawn tracking identifiers (similar to evercookies [35]).
- Get the list of installed channels and use it for profiling purposes. For instance, the existence of health/religion/children-focused channels can be used to infer victims’ sensitive personal attributes and their lifestyles.

We reported the vulnerability to Roku in December 2018. Roku addressed the issue by changing the value in the “Access-Control-Allow-Origin” header and finalized rolling out their security fix.