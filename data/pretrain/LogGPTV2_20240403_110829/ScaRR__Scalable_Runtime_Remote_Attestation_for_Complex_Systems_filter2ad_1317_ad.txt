propose a runtime attestation based on policies, such as the
number of instructions executed between two consecutive
returns. Previous works suggest ﬁrst to acquire a runtime
measurement of software properties, but do not provide a
ﬁne-grained control-ﬂow analysis.
A modern ﬁne-grained control-ﬂow RA is represented by
C-FLAT, which is proposed by Abera et al. [8]. This schema
measures the valid execution paths undertaken by embedded
systems and generates a hash, which length depends on the
number of control-ﬂow events encountered at runtime. Then,
the hash is compared with a list of ofﬂine measurements. The
main differences between ScaRR and C-FLAT are the follow-
ing ones: (i) C-FLAT control-ﬂow representation grows along
with software complexity, while ScaRR manages complex
control-ﬂow paths by using partial reports, and (ii) ScaRR is
designed to use features of modern computer architectures
(e.g., multi-threading, bigger buffers). Dessouky et al. pro-
pose LO-FAT [22], which is a C-FLAT hardware implementa-
tion aimed at improving runtime performances for embedded
systems. However, LO-FAT inherits all of C-FLAT design
limitations in terms of control-ﬂow representation. Zeitouni
et al. designed ATRIUM [50], that strengthens runtime RA
schemes against physical attacks for embedded devices. Even
though the authors address different use cases, this solution
might be combined with ScaRR.
Dessouky et al. propose LiteHax [21], that deals with data-
only attacks. Their approach shares some similarities with
ScaRR: they send detailed control-ﬂow events information to
a Veriﬁer. However, they target data-oriented attacks (instead
of control-ﬂow). Moreover, LiteHax uses symbolic execution
to validate the reports, which slows down the veriﬁcation
phase. Abera et al. discuss DIAT [9], which is a scalable RA
for collaborative autonomous system. They model a runtime
control-ﬂow as a multi-set. This allows DIAT to represent
complex control-ﬂow graphs by using a relatively short hash.
However, its model loses information about the execution
order of the branches. This makes their approach prone to
attacks like COOP [36]. ScaRR, instead, combines a strong
static analysis and a shadow execution at the Veriﬁer side
that provides a sound approach by design. Overall, our ex-
periments show that ScaRR can handle a higher number of
branches per second compared to all the state-of-the-art run-
time RA schemes.
Haldar et al. [26] propose a semantic RA, which leverages a
virtual machine to validate semantic properties (e.g., subclass
inherited). However, the authors focus on run-time languages,
while ScaRR works at a binary level.
Control-Flow Integrity. In the last few years, some au-
thors have proposed architectures that share some similarities
with RA [23, 27, 33]. These works are composed by two
concurrent processes: a target process (that might be under
attack), and a monitor process (that validate some target prop-
erty). However, ScaRR considers a different attacker model
since we consider a fully compromised user-space, i.e., an
attacker may tamper with the target software code or attack
the monitor process itself. Moreover, unlike ScaRR, these
solutions are not designed to provide any report about the
execution path of the target process.
10 Conclusion
In this work, we propose ScaRR, the ﬁrst schema that en-
ables runtime RA for complex systems to detect control-ﬂow
attacks generated in user-space. ScaRR relies on a novel
control-ﬂow model that allows to: (i) apply runtime RA on
any software regardless of its complexity, (ii) have intermedi-
ate veriﬁcation of the monitored program, and (iii) obtain a
more ﬁne-grained report of an incoming attack.
We developed ScaRR and evaluated its performance against
the set of tools of the SPEC CPU 2017 suite. As a result,
ScaRR outperforms existing solutions for runtime RA on
complex systems in terms of attestation and veriﬁcation speed,
while guaranteeing a limited network trafﬁc.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 131Future works include: investigating techniques to extract
more precise CFG, facing compromised operating systems,
and studying new veriﬁcation methods for partial reports.
Acknowledgments
This work was partly supported by the SUTD start-up research
grant SRG-ISTD-2017-124 and by the European Commission
under the Horizon 2020 Programme (H2020), as part of the
LOCARD project (Grant Agreement no. 832735).
References
[1] Bzip2, 2002. Last access March 2019.
[2] Amazon web services (aws), 2006. Last access March
2019.
[3] Microsoft azure, 2010. Last access March 2019.
[4] Blake2, 2013. Last access March 2019.
[5] Mcsema, 2014. Last access Feb 2019.
[6] Zstandard, 2016. Last access March 2019.
[7] Zlib, 2017. Last access March 2019.
[8] Tigist Abera, N Asokan, Lucas Davi, Jan-Erik Ekberg,
Thomas Nyman, Andrew Paverd, Ahmad-Reza Sadeghi,
and Gene Tsudik. C-ﬂat: control-ﬂow attestation for
embedded systems software. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communi-
cations Security, pages 743–754. ACM, 2016.
[9] Tigist Abera, Raad Bahmani, Ferdinand Brasser, Ahmad
Ibrahim, Ahmad-Reza Sadeghi, and Matthias Schunter.
Diat: Data integrity attestation for resilient collaboration
of autonomous systems.
[10] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent
Scarlata. Innovative technology for cpu based attestation
and sealing. In Proceedings of the 2nd international
workshop on hardware and architectural support for
security and privacy, volume 13. ACM New York, NY,
USA, 2013.
[11] Jean-Philippe Aumasson, Willi Meier, Raphael C.-W.
Phan, and Luca Henzen. BLAKE2, pages 165–183.
Springer Berlin Heidelberg, Berlin, Heidelberg, 2014.
[13] Katelin A Bailey and Sean W Smith. Trusted virtual
containers on demand. In Proceedings of the ﬁfth ACM
workshop on Scalable trusted computing, pages 63–72.
ACM, 2010.
[14] Arash Baratloo, Navjot Singh, Timothy K Tsai, et al.
Transparent run-time defense against stack-smashing
attacks. In USENIX Annual Technical Conference, Gen-
eral Track, pages 251–262, 2000.
[15] Mihir Bellare, Joe Kilian, and Phillip Rogaway. The
security of the cipher block chaining message authenti-
cation code. Journal of Computer and System Sciences,
61(3):362–399, 2000.
[16] Tyler Bletsch, Xuxian Jiang, Vince W Freeh, and
Zhenkai Liang. Jump-oriented programming: a new
class of code-reuse attack. In Proceedings of the 6th
ACM Symposium on Information, Computer and Com-
munications Security, pages 30–40. ACM, 2011.
[17] Nicholas Carlini and David Wagner. Rop is still danger-
ous: Breaking modern defenses. In USENIX Security
Symposium, pages 385–399, 2014.
[18] Victor Costan and Srinivas Devadas. Intel sgx explained.
IACR Cryptology ePrint Archive, 2016:86, 2016.
[19] Dino Dai Zovi. Practical return-oriented programming.
In SOURCE Boston, 2010.
[20] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy.
Dynamic integrity measurement and attestation: towards
defense against return-oriented programming attacks. In
Proceedings of the 2009 ACM workshop on Scalable
trusted computing, pages 49–54. ACM, 2009.
[21] Ghada Dessouky, Tigist Abera, Ahmad Ibrahim, and
Ahmad-Reza Sadeghi. Litehax: Lightweight hardware-
assisted attestation of program execution. In Proceed-
ings of the International Conference on Computer-Aided
Design, ICCAD ’18, pages 106:1–106:8, New York, NY,
USA, 2018. ACM.
[22] Ghada Dessouky, Shaza Zeitouni, Thomas Nyman, An-
drew Paverd, Lucas Davi, Patrick Koeberl, N Asokan,
and Ahmad-Reza Sadeghi. Lo-fat: Low-overhead con-
trol ﬂow attestation in hardware. In Design Automation
Conference (DAC), 2017 54th ACM/EDAC/IEEE, pages
1–6. IEEE, 2017.
[12] Haihe Ba, Huaizhe Zhou, Shuai Bai, Jiangchun Ren,
Zhiying Wang, and Linlin Ci. jmonatt: Integrity moni-
toring and attestation of jvm-based applications in cloud
computing. In Information Science and Control Engi-
neering (ICISCE), 2017 4th International Conference
on, pages 419–423. IEEE, 2017.
[23] Ren Ding, Chenxiong Qian, Chengyu Song, William
Harris, Taesoo Kim, and Wenke Lee. Efﬁcient pro-
tection of path-sensitive control security. In Proceed-
ings of the 26th USENIX Conference on Security Sym-
posium, SEC’17, pages 131–148, Berkeley, CA, USA,
2017. USENIX Association.
132          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association[24] Graeme Gange, Jorge A Navas, Peter Schachte, Harald
Søndergaard, and Peter J Stuckey. An abstract domain
of uninterpreted functions. In International Conference
on Veriﬁcation, Model Checking, and Abstract Interpre-
tation, pages 85–103. Springer, 2016.
[25] Xinyang Ge, Weidong Cui, and Trent Jaeger. Grifﬁn:
Guarding control ﬂows using intel processor trace. In
Proceedings of the Twenty-Second International Con-
ference on Architectural Support for Programming Lan-
guages and Operating Systems, ASPLOS ’17, pages
585–598, New York, NY, USA, 2017. ACM.
[26] Vivek Haldar, Deepak Chandra, and Michael Franz. Se-
mantic remote attestation: a virtual machine directed
In USENIX Virtual
approach to trusted computing.
Machine Research and Technology Symposium, volume
2004, 2004.
[27] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon
Pak Ho Chung, William R. Harris, Taesoo Kim, and
Wenke Lee. Enforcing unique code target property for
control-ﬂow integrity. In Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications
Security, CCS ’18, pages 1470–1486, New York, NY,
USA, 2018. ACM.
[28] Hong Hu, Shweta
Shinde, Sendroiu Adrian,
Zheng Leong Chua, Prateek Saxena, and Zhenkai Liang.
Data-oriented programming: On the expressiveness of
non-control data attacks. In Security and Privacy (SP),
2016 IEEE Symposium on, pages 969–986. IEEE, 2016.
[29] Chongkyung Kil, Jinsuk Jun, Christopher Bookholt, Jun
Xu, and Peng Ning. Address space layout permutation
(aslp): Towards ﬁne-grained randomization of commod-
ity software. In Computer Security Applications Confer-
ence, 2006. ACSAC’06. 22nd Annual, pages 339–348.
IEEE, 2006.
[30] Chongkyung Kil, Emre C Sezer, Ahmed M Azab, Peng
Ning, and Xiaolan Zhang. Remote attestation to dy-
namic system properties: Towards providing complete
system integrity evidence. In Dependable Systems &
Networks, 2009. DSN’09. IEEE/IFIP International Con-
ference on, pages 115–124. IEEE, 2009.
[31] Chris Lattner and Vikram Adve. Llvm: A compilation
framework for lifelong program analysis & transforma-
tion. In Proceedings of the international symposium on
Code generation and optimization: feedback-directed
and runtime optimization, page 75. IEEE Computer So-
ciety, 2004.
[32] E Jebamalar Leavline and DAAG Singh. Hardware
implementation of lzma data compression algorithm.
International Journal of Applied Information Systems
(IJAIS), 5(4):51–56, 2013.
[33] Daiping Liu, Mingwei Zhang, and Haining Wang. A
robust and efﬁcient defense against use-after-free ex-
ploits via concurrent pointer sweeping. In Proceedings
of the 2018 ACM SIGSAC Conference on Computer and
Communications Security, CCS ’18, pages 1635–1648,
New York, NY, USA, 2018. ACM.
[34] Gian Filippo Pinzari.
2003.
Introduction to nx technology,
[35] E. M. Rudd, A. Rozsa, M. Günther, and T. E. Boult. A
survey of stealth malware attacks, mitigation measures,
and steps toward autonomous open world solutions.
IEEE Communications Surveys Tutorials, 19(2):1145–
1172, Secondquarter 2017.
[36] Felix Schuster, Thomas Tendyck, Christopher Liebchen,
Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz.
Counterfeit object-oriented programming: On the difﬁ-
culty of preventing code reuse attacks in c++ applica-
tions. In Security and Privacy (SP), 2015 IEEE Sympo-
sium on, pages 745–762. IEEE, 2015.
[37] Hovav Shacham. The geometry of innocent ﬂesh on
the bone: Return-into-libc without function calls (on the
x86). In Proceedings of the 14th ACM conference on
Computer and communications security, pages 552–561.
ACM, 2007.
[38] Nathan P Smith. Stack smashing vulnerabilities in the
unix operating system, 1997.
[39] William Stallings. The advanced encryption standard.
Cryptologia, 26(3):165–188, July 2002.
[40] Paulus Stravers and Jan-Willem van de Waerdt. Trans-
lation lookaside buffer, December 10 2013. US Patent
8,607,026.
[41] Toshio Suganuma, Takeshi Ogasawara, Mikio Takeuchi,
Toshiaki Yasue, Motohiro Kawahito, Kazuaki Ishizaki,
Hideaki Komatsu, and Toshio Nakatani. Overview of
the ibm java just-in-time compiler. IBM systems Journal,
39(1):175–193, 2000.
[42] Allan Tomlinson. Introduction to the tpm. In Smart
Cards, Tokens, Security and Applications, pages 173–
191. Springer, 2017.
[43] Victor Van der Veen, Lorenzo Cavallaro, Herbert Bos,
et al. Memory errors: The past, the present, and the
future. In International Workshop on Recent Advances
in Intrusion Detection, pages 86–106. Springer, 2012.
[44] Sebastian Vogl, Jonas Pfoh, Thomas Kittel, and Claudia
Eckert. Persistent data-only malware: Function hooks
without code. In NDSS, 2014.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 133[45] Liangming Wang and Fagui Liu. A trusted measurement
model based on dynamic policy and privacy protection
in iaas security domain. EURASIP Journal on Informa-
tion Security, 2018(1):1, 2018.
[46] Robert NM Watson, Jonathan Woodruff, Michael Roe,
Simon W Moore, and Peter G Neumann. Capability
hardware enhanced risc instructions (cheri): Notes on
the meltdown and spectre attacks. Technical report,
University of Cambridge, Computer Laboratory, 2018.
[47] Johannes Winter. Trusted computing building blocks for
embedded linux-based arm trustzone platforms. In Pro-
ceedings of the 3rd ACM workshop on Scalable trusted
computing, pages 21–30. ACM, 2008.
[48] Fan Yao, Jie Chen, and Guru Venkataramani. Jop-alarm:
Detecting jump-oriented programming-based anomalies
In Computer Design (ICCD), 2013
in applications.
IEEE 31st International Conference on, pages 467–470.
IEEE, 2013.
[49] Pinghai Yuan, Qingkai Zeng, and Xuhua Ding.
Hardware-assisted ﬁne-grained code-reuse attack de-
tection. In International Workshop on Recent Advances
in Intrusion Detection, pages 66–85. Springer, 2015.
[50] Shaza Zeitouni, Ghada Dessouky, Orlando Arias, Dean
Sullivan, Ahmad Ibrahim, Yier Jin, and Ahmad-Reza
Sadeghi. Atrium: Runtime attestation resilient under
memory attacks. In Proceedings of the 36th Interna-
tional Conference on Computer-Aided Design, pages
384–391. IEEE Press, 2017.
134          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association