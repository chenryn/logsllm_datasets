title:Towards Network-level Efficiency for Cloud Storage Services
author:Zhenhua Li and
Cheng Jin and
Tianyin Xu and
Christo Wilson and
Yao Liu and
Linsong Cheng and
Yunhao Liu and
Yafei Dai and
Zhi-Li Zhang
Towards Network-level Efﬁciency for
Cloud Storage Services
Zhenhua Li
Tsinghua University
Peking University
PI:EMAIL
Christo Wilson
Northeastern University
Boston, MA, US
PI:EMAIL
Yunhao Liu
Tsinghua University
Beijing, China
PI:EMAIL
Cheng Jin
University of Minnesota
Twin Cities
PI:EMAIL
Yao Liu
State University of New York
Binghamton University
PI:EMAIL
Yafei Dai
Peking University
Beijing, China
PI:EMAIL
Tianyin Xu
University of California
San Diego
PI:EMAIL
Linsong Cheng
Tsinghua University
Beijing, China
PI:EMAIL
Zhi-Li Zhang
University of Minnesota
Twin Cities
PI:EMAIL
ABSTRACT
Cloud storage services such as Dropbox, Google Drive, and Mi-
crosoft OneDrive provide users with a convenient and reliable way
to store and share data from anywhere, on any device, and at any
time. The cornerstone of these services is the data synchronization
(sync) operation which automatically maps the changes in users’
local ﬁlesystems to the cloud via a series of network communica-
tions in a timely manner. If not designed properly, however, the
tremendous amount of data sync trafﬁc can potentially cause (ﬁ-
nancial) pains to both service providers and users.
This paper addresses a simple yet critical question: Is the cur-
rent data sync trafﬁc of cloud storage services efﬁciently used?
We ﬁrst deﬁne a novel metric named TUE to quantify the Trafﬁc
Usage Efﬁciency of data synchronization. Based on both real-world
traces and comprehensive experiments, we study and characterize
the TUE of six widely used cloud storage services. Our results
demonstrate that a considerable portion of the data sync trafﬁc is
in a sense wasteful, and can be effectively avoided or signiﬁcant-
ly reduced via carefully designed data sync mechanisms. All in
all, our study of TUE of cloud storage services not only provides
guidance for service providers to develop more efﬁcient, trafﬁc-
economic services, but also helps users pick appropriate services
that best ﬁt their needs and budgets.
Categories and Subject Descriptors
C.2.4 [Computer-communication Networks]: Distributed Sys-
tems—Distributed applications; D.4.3 [Operating Systems]: File
Systems Management—Distributed ﬁle systems
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’14, November 5–7, 2014, Vancouver, BC, Canada.
Copyright 2014 ACM 978-1-4503-3213-2/14/11 ...$15.00.
http://dx.doi.org/10.1145/2663716.2663747.
General Terms
Design, Experimentation, Measurement, Performance
Keywords
Cloud storage service; network-level efﬁciency; data synchroniza-
tion; trafﬁc usage efﬁciency
1.
INTRODUCTION
Cloud storage services such as Dropbox, Google Drive, and Mi-
crosoft OneDrive (renamed from SkyDrive since Feb. 2014) pro-
vide users with a convenient and reliable way to store and share
data from anywhere, on any device, and at any time. The users’ da-
ta (e.g., documents, photos, and music) stored in cloud storage are
automatically synchronized across all the designated devices (e.g.,
PCs, tablets, and smartphones) connected to the cloud in a timely
manner. With multiplicity of devices – especially mobile devices
– that users possess today, such “anywhere, anytime” features sig-
niﬁcantly simplify data management and consistency maintenance,
and thus provide an ideal tool for data sharing and collaboration.
In a few short years, cloud storage services have reached phe-
nomenal levels of success, with the user base growing rapidly. For
example, Microsoft OneDrive claims that over 200 million cus-
tomers have stored more than 14 PB of data using their service [9],
while Dropbox has claimed more than 100 million users who store
or update 1 billion ﬁles every day [6]. Despite the late entry into
this market (in Apr. 2012), Google Drive obtained 10 million users
just in its ﬁrst two months [7].
The key operation of cloud storage services is data synchroniza-
tion (sync) which automatically maps the changes in users’ local
ﬁlesystems to the cloud via a series of network communications.
Figure 1 demonstrates the general data sync principle. In a cloud
storage service, the user usually needs to assign a designated lo-
cal folder (called a “sync folder”) in which every ﬁle operation is
noticed and synchronized to the cloud by the client software de-
veloped by the service provider. Synchronizing a ﬁle involves a
sequence of data sync events, such as transferring the data index,
data content, sync notiﬁcation, sync status/statistics, and sync ac-
knowledgement. Naturally, each data sync event incurs network
trafﬁc. In this paper, this trafﬁc is referred to as data sync trafﬁc.
115To answer the question thoroughly, we ﬁrst deﬁne a novel metric
named TUE to quantify the Trafﬁc Usage Efﬁciency of data syn-
chronization. Borrowing a term similar to PUE (i.e., the Power Us-
age Effectiveness = Total facility power
IT equipment power [14], a widely adopted metric
for evaluating the cloud computing energy efﬁciency), we deﬁne
TUE =
Total data sync trafﬁc
Data update size
.
(1)
When a ﬁle is updated (e.g., created, modiﬁed, or deleted) at the us-
er side, the data update size denotes the size of altered bits relative
to the cloud-stored ﬁle 2. From the users’ point of view, the data up-
date size is an intuitive and natural signiﬁer about how much trafﬁc
should be consumed. Compared with the absolute value of sync
trafﬁc (used in previous studies), TUE better reveals the essential
trafﬁc harnessing capability of cloud storage services.
In order to gain a practical and in-depth understanding of TUE,
we collect a real-world user trace and conduct comprehensive bench-
mark experiments of six widely used cloud storage services, in-
cluding Google Drive, OneDrive, Dropbox, Box, Ubuntu One, and
SugarSync. We examine key impact factors and design choices that
are common across all of these services. Impact factors include ﬁle
size, ﬁle operation, data update size, network environment, hard-
ware conﬁguration, access method, and so on. Here the “access
method” refers to PC client software, web browsers, and mobile
apps. Design choices (of data sync mechanisms) include data sync
granularity, data compression level, data deduplication granularity,
and sync deferment (for improved batching).
By analyzing these factors and choices, we are able to thoroughly
unravel the TUE related characteristics, design tradeoffs, and opti-
mization opportunities of these state-of-the-art cloud storage ser-
vices. The major ﬁndings in this paper and their implications are
summarized as follows:
• The majority (77%) of ﬁles in our collected trace are smal-
l in size (less than 100 KB). Nearly two-thirds (66%) of
these small ﬁles can be logically combined into larger ﬁles
for batched data sync (BDS) in order to reduce sync trafﬁc.
However, only Dropbox and Ubuntu One have partially im-
plemented BDS so far.
• The majority (84%) of ﬁles are modiﬁed by users at least
once. Unfortunately, most of today’s cloud storage services
are built on top of RESTful infrastructure (e.g., Amazon S3,
Microsoft Azure, and OpenStack Swift) that typically only
support data access operations at the full-ﬁle level [26, 17].
For these services, enabling the efﬁcient incremental data
sync (IDS) mechanism requires an extra mid-layer for trans-
forming MODIFY into GET + PUT + DELETE ﬁle operations.
Given that ﬁle modiﬁcations frequently happen, implement-
ing IDS is worthwhile for improved network-level efﬁciency.
• 52% of ﬁles can be effectively compressed and 18% of ﬁles
can be deduplicated. Nevertheless, Google Drive, OneDrive,
Box, and SugarSync never compress or deduplicate data. Even
for Dropbox and Ubuntu One, the effect of compression and
deduplication is largely inﬂuenced by the access method.
• Implementing compression and block-level deduplication to-
gether is technically challenging. Based on our trace analy-
sis, we suggest providers to implement compression and full-
ﬁle deduplication because the combination of these two tech-
niques is sufﬁcient to provide efﬁcient usage of sync trafﬁc.
2If data compression is utilized by the cloud storage service, the
data update size denotes the compressed size of altered bits.
Figure 1: Data synchronization principle.
If not designed properly, the amount of data sync trafﬁc can
potentially cause (ﬁnancial) pains to both providers and users of
cloud storage services. From the providers’ perspective, the aggre-
gate sync trafﬁc from all users is enormous (given the huge number
of ﬁles uploaded and modiﬁed each day!). This imposes a heavy
burden in terms of infrastructure support and monetary costs (e.g.,
as payments to ISPs or cloud infrastructure providers). To get a
quantitative understanding, we analyze a recent large-scale Drop-
box trace [12] collected at the ISP level [25]. The analysis reveals:
(1) The sync trafﬁc contributes to more than 90% of the total ser-
vice trafﬁc. Note that the total service trafﬁc is equivalent to one
third of the trafﬁc consumed by YouTube [25]; (2) Data synchro-
nization of a ﬁle (sometimes a batch of ﬁles) generates 2.8 MB of
inbound (client to cloud) trafﬁc and 5.18 MB of outbound (cloud
to client) trafﬁc on average. According to the Amazon S3 pricing
policy [1] (Dropbox stores all the data content in S3 and S3 only
charges for outbound trafﬁc), the Dropbox trafﬁc would consume
nearly $0.05/GB × 5.18 MB × 1 billion = $260,000 every day1.
These costs grow even further when we consider that all cloud stor-
age service providers must bear similar costs, not just Dropbox [4].
Data sync trafﬁc can also bring considerable (and unexpected) ﬁ-
nancial costs to end users, despite that basic cloud storage services
are generally free. News media has reported about user complaints
of unexpected, additional charges from ISPs, typically from mobile
users with limited data usage caps [8, 2]. As a consequence, some
users have warned: “Keep a close eye on your data usage if you
have a mobile cloud storage app.” In addition, some cloud stor-
age applications (e.g., large data backup [3]) are also impaired by
the bandwidth constraints between the user clients and the cloud.
This limitation is regarded as the “dirty secrets” of cloud storage
services [5]. Hence users likewise would also beneﬁt from more
efﬁcient sync trafﬁc usage.
This paper addresses a simple yet critical question: Is the current
data sync trafﬁc of cloud storage services efﬁciently used? Our goal
is to quantify and optimize the efﬁciency of data sync trafﬁc usage,
i.e., the pivotal network-level efﬁciency for cloud storage services.
Without impairing user experience, providers would like to limit
data sync trafﬁc as much as possible to reduce operational costs. On
the other side, users also desire more efﬁcient trafﬁc usage, which
can save money and result in better quality of experience. Although
several studies have measured cloud storage services [30, 33, 25,
20, 24, 36, 32, 48], none have addressed the issue of sync trafﬁc
efﬁciency using real-world, large-scale data from multiple cloud
storage services.
1We assume that there is no special pricing contract between Drop-
box and Amazon S3, so our calculation of the trafﬁc costs may
involve potential overestimation.
ClientUserData Sync Event(data index, data content, sync notification, ...)File Operation(file creation, file deletion,file modification, ...)Cloud116• Frequent modiﬁcations to a ﬁle often lead to large TUE. For
instance, for 8.5% of Dropbox users, more than 10% of their
sync trafﬁc is caused by frequent modiﬁcations [36]. Some
services deal with this issue by batching ﬁle updates using
a ﬁxed sync deferment. However, ﬁxed sync deferments are
inefﬁcient in some scenarios. We propose an adaptive sync
defer (ASD) mechanism to overcome this limitation.
• In the presence of frequent ﬁle modiﬁcations, surprisingly,
users with relatively “poor” hardware or Internet access save
on sync trafﬁc, because their ﬁle updates are naturally batched.
In a nutshell, our research ﬁndings demonstrate that for today’s
cloud storage services, a considerable portion of the data sync traf-
ﬁc is in a sense wasteful, and can be effectively avoided or signif-
icantly reduced through carefully designed data sync mechanisms.
In other words, there is plenty of space for optimizing the network-
level efﬁciency of these services. Our study of TUE provides guid-
ance in two folds: (1) help service providers develop more efﬁcient,
trafﬁc-economic cloud storage services; and (2) help end users se-
lect appropriate services that best ﬁt their needs and budgets.
Roadmap.
In the remainder of the paper, we ﬁrst describe the
common design framework of cloud storage services in § 2, and
then introduce our research methodology in § 3. Next, we present
research results and ﬁndings, broken down logically into three ar-
eas: simple ﬁle operations (§ 4), compression and deduplication
(§ 5), and frequent ﬁle modiﬁcations (§ 6). Finally, we discuss
the tradeoffs for cloud storage system design in § 7, review related
work in § 8, and conclude the paper with future work in § 9.
2. COMMON DESIGN FRAMEWORK OF
CLOUD STORAGE SERVICES
From the perspective of sync trafﬁc usage, the common design
framework of cloud storage services involves a number of impact
factors and design choices, which can be on the client side, serv-
er (cloud) side, or network side. The impact factors refer to those
(objective) factors such as the client location, hardware, ﬁle size,
data update size, network environment, and so on that must be ac-
counted for in the design and usage of cloud storage services. The
design choices (of data sync mechanisms) refer to those (subjec-