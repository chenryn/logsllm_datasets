title:SAuth: protecting user accounts from password database leaks
author:Georgios Kontaxis and
Elias Athanasopoulos and
Georgios Portokalidis and
Angelos D. Keromytis
SAuth: Protecting User Accounts
from Password Database Leaks
Georgios Kontaxis
Columbia University
Elias Athanasopoulos
Columbia University
PI:EMAIL
PI:EMAIL
Georgios Portokalidis
Stevens Inst. of Technology
PI:EMAIL
Angelos D. Keromytis
Columbia University
PI:EMAIL
ABSTRACT
Password-based authentication is the dominant form of ac-
cess control in web services. Unfortunately, it proves to be
more and more inadequate every year. Even if users choose
long and complex passwords, vulnerabilities in the way they
are managed by a service may leak them to an attacker.
Recent incidents in popular services such as LinkedIn and
Twitter demonstrate the impact that such an event could
have. The use of one-way hash functions to mitigate the
problem is countered by the evolution of hardware which
enables powerful password-cracking platforms.
In this paper we propose SAuth, a protocol which em-
ploys authentication synergy among diﬀerent services. Users
wishing to access their account on service S will also have to
authenticate for their account on service V , which acts as a
vouching party. Both services S and V are regular sites vis-
ited by the user everyday (e.g., Twitter, Facebook, Gmail).
Should an attacker acquire the password for service S he will
be unable to log in unless he also compromises the password
for service V and possibly more vouching services. SAuth is
an extension and not a replacement of existing authentica-
tion methods. It operates one layer above without ties to a
speciﬁc method, thus enabling diﬀerent services to employ
heterogeneous systems. Finally we employ password decoys
to protect users that share a password across services.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection—Authentication
General Terms
Security
Keywords
Authentication; Synergy; Password Leak; Decoys
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516746.
1.
INTRODUCTION
Password theft can cause annoyance, ﬁnancial damages,
data loss, and loss of privacy [5, 9]. Services employing
passwords urge their users to choose complex combinations,
never write them down, change them frequently, select a dif-
ferent password on each service they use and verify the au-
thenticity of the site before logging in. However, even users
that manage to follow all these rules risk having their pass-
words stolen. Security pitfalls in a series of popular services
have resulted in frequent and massive password leaks [4, 8,
16, 20]. Even though services usually store a digest or hash
of the password (excluding rare incidents [12]), the emer-
gence of powerful password-cracking platforms [14, 44] has
enabled attackers to recover the original passwords in an ef-
ﬁcient manner [13]. What is more, password-reuse practices
by the users have enabled domino-like attacks [17, 34].
We propose Synergetic Authentication (SAuth), an au-
thentication mechanism based on the synergy between dif-
ferent services that complements their individual procedures
for verifying the identity of a given user. To successfully log
into service S one is required to successfully authenticate
both with S and a cooperating vouching service V . For ex-
ample, a user logging into his Gmail account, after success-
fully submitting his password to the Gmail server, he will be
required to also submit his Facebook password to the Face-
book server. Once Gmail receives notice from Facebook that
the same user has managed to authenticate successfully it
will have an additional assurance that the user is the actual
owner of those accounts. Our approach is founded upon the
way most users access the web. In particular, users remain
concurrently and constantly authenticated with many ser-
vices such as e-mail and social networks [24, 42] unless they
explicitly log out. A service the user is already logged on
can transparently vouch for him, e.g., through client-side
cookies. In the above example, had the user been already
logged in to Facebook, he would just be required to enter
his Gmail password to access his e-mails. Facebook would
use his user agent cookies to transparently authenticate him
and subsequently vouch for him to Gmail. At the same time,
an attacker that has compromised the user’s password for S
is unable to access that account as he is lacking the pass-
word for vouching service V and thus cannot complete the
authentication process. In other words, for an attacker to
compromise one account, he must acquire multiple account
passwords for that user located in diﬀerent databases of dis-
tinct services.
187Password-based authentication has received a lot of criti-
cism lately with many large services like Google and PayPal
looking for alternative means to authenticate users [7,15,35].
Some alternatives that have been proposed in the past in-
clude public-key mechanisms, such as TLS client certiﬁ-
cates [19], graphical passwords [25,38], and many more. Un-
fortunately, none of the proposed alternatives has proven
suﬃciently enticing [29]. Passwords have been the de facto
method for authenticating users for many decades, and have
proven to be resilient to change.
Two-factor authentication [22] has probably been the most
successful proposal to complement password-based systems
by requiring that an additional password is provided, ac-
quired through a second independent channel. Unfortu-
nately the overhead both in cost and eﬀort to deploy and
maintain such system has led to adoption only by high-value
services such as banking sites and e-mail providers. More-
over, it scales poorly when users are required to manage mul-
tiple secondary factors for distinct services. Finally, a study
has shown that it can push users to weaker passwords [57].
Single-sign-on services like OpenID, as well as the OAuth-
based interfaces of social networking services [6,46], oﬀer the
alternative of maintaining a single online identity, protected
by one, hopefully strong, password. Users of such services,
instead of creating separate, new accounts and passwords
with third-party services, authenticate with a trusted iden-
tity provider (e.g., Facebook), that vouches for them. How-
ever, these identity providers present a single point of failure,
may carry privacy-related risks, and can also suﬀer vulner-
abilities themselves [55]. A recent study [54] attributes the
limited adoption of such services to concerns regarding their
availability and relinquishing control of the user base as part
of outsourcing authentication.
SAuth does not suﬀer from any of the above problems, as
it complements, rather than substitutes, existing authentica-
tion procedures at each site. Therefore, it does not degrade
the security of a service, but allows heterogeneous authen-
tication systems to operate at each site, while preserving
each party’s user accounting system. Finally, it encourages
symmetric relations between services as it enables all partic-
ipating sites to operate both as relying and vouching parties
if they wish to.
To address the issue of password reuse [41, 53], which can
render vouching ineﬀective if a user recycles the same pass-
word across all vouching services, we employ decoy pass-
words. Each service automatically generates multiple decoy
passwords that are similar to the one chosen by the user.
Furthermore, for the decoys to blend in, they receive no
special treatment by the service and are thus considered as
legitimate credentials for user authentication. Note how-
ever that the user is never aware of them. Enabling decoy
passwords requires no changes in the database schema, can
be implemented with wrappers to existing password man-
agement functions and introduces multiple password entries
per user instead of a single one. An attacker cracking the
passwords will be unable to identify the actual one and re-
sort to online guessing against the vouching services 1.
Overall, this work makes the following contributions:
1In this paper we model an on-line guessing attack according
to the NIST speciﬁcation [32] (see Section 6.1).
• We design, implement, and evaluate SAuth, a frame-
work employing synergy between sites for stronger au-
thentication.
• SAuth builds on widely used technologies and is or-
thogonal to the underlying authentication framework.
Beyond providing stronger authentication, SAuth can
be used as an alert system for password breaches.
• We leverage decoy passwords to tackle password reuse
practices among the cooperating sites participating in
an SAuth session.
The rest of the paper is organized as follows. We provide
background information in §2. We present the design of
SAuth in §3 and its implementation in §4. We discuss decoy
passwords in §5 and evaluate their use in §6. Related work
is presented in §7 and conclusions are in §8.
2. BACKGROUND
Password-based authentication has changed little in the
many decades it is in use and today it is more popular than
ever, with countless web applications using passwords to au-
thenticate their users. In brief, when a user ﬁrst registers
with a service, he selects a username and password with
which he will authenticate. The application stores the user-
name in plain-text form, attaches a random preﬁx called
salt to the password, gets the digest of this preﬁxed pass-
word using a cryptographic hash function such as MD5 or
SHA1, stores the hash output along with the salt in the
database and discards the plain-text password. Note that
recently these general-purpose hash functions have received
criticism [10] and alternatives such as bcrypt [48] have been
proposed. The salt preﬁx ensures that even if a password
is shared by multiple users, a diﬀerent hash will be gener-
ated and stored in the database, and identical passwords
cannot be inferred by their hash product. What is more, it
defeats rainbow tables where the hashes for a large set of
dictionary words and password-space permutations are pre-
computed and then compared against a password hash in
real time. Upon login, users transmit their username and
password to the service in plain text, hopefully through a
secure communication protocol such as TLS. Subsequently
the web service uses the stored salt and the provided pass-
word to compute their digest and compare it to the stored
digest in the database. Note that unfortunately there are
cases where passwords are simply stored verbatim in the
database [3].
2.1 Password Leaks
In recent years we have witnessed an increasing amount
of password leaks [8, 12, 16, 20] from major Internet sites.
Between early 2012 and now these incidents have been oc-
curring at an alarming rate of roughly one every couple of
months. We use the term password leak to describe the
exﬁltration of user passwords stored by some service’s ac-
counting system. This can be due to malicious insiders or
front-end bug exploitation, e.g., through SQL injection.
It is important to stress that password leaks are diﬀerent
in nature from phishing or social engineering attacks which
may also be used to compromise user passwords. Leaks hap-
pen on the server side and usually lead to large-scale pass-
word exﬁltration. As they don’t involve the client side, in
188contrast to phishing attacks, even diligent users may have
their password compromised.
2.2 Password Cracking
Following a successful database leak the attacker has in his
possession all the elements necessary to attempt to crack the
stolen passwords; he holds their digests, the corresponding
salt values and has knowledge of the hashing function used.
Subsequently he can employ various cracking methodolo-
gies [44] ranging from brute-force attacks to dictionary at-
tacks and a combination of the two. In the ﬁrst case he can
simply compute the salted hashes for all possible permuta-
tions in the given password space, e.g., passwords 1 to 8
characters in length involving upper and lower case English
letters, numbers and symbols. Whenever a computed hash,
for which the attacker knows the input, matches one of the
hashes in the stolen set, that user’s password is revealed.
Clearly this approach requires abundant processing power
and a lot of time. Alternatively, the attacker can compute
the salted hashes for a pre-constructed dictionary of poten-
tial passwords. As users tend to choose passwords that are
easy to remember [28], more often than not they select words
such as “password” or phrases such as “letmein” or people’s
names. Therefore a dictionary-based attack can be very fast
and eﬃcient. Finally, a hybrid approach involving permu-
tations of dictionary words can crack passwords that meet
the bare minimum of otherwise complex password policies.
“password1” or “letmein!” and “s3cur3” are such examples.
Even if an attacker designs his password cracking process
in such an elaborate manner he still requires ample pro-
cessing power to achieve high success rates in a reasonably
short amount of time. The parallel architectures of modern
GPUs can greatly shorten the password cracking process.
Recently, GPU-based architectures were able to crack eight-
character-long NTLM passwords for Microsoft Windows in
just about ﬁve hours [14]. At the same time, cracking plat-
forms utilizing the resources and scalability of the cloud have
emerged [1]. Overall the sophistication of password crack-
ing methodologies, along with the availability of increasingly
more powerful hardware, signiﬁcantly extends an attacker’s
capability to reveal complex passwords.
To mitigate the increase in the processing power of crack-
ing platforms, alternatives to the standard cryptographic
hash functions have been proposed. As general purpose
functions like MD5 or SHA1 were designed to be fast and
eﬃcient, they serve in favor of the attacker who wants to
compute a large number of digests in a short amount of
time. On the other hand, adaptive hash functions, such as
bcrypt [48] and scrypt [47], can be conﬁgured in terms of
the work factor they introduce. In other words, as process-
ing power increases over time these functions can be tuned
to take constant amount of time. Therefore it is possible to
slow down the cracking process signiﬁcantly. Note however
that these functions have a much lesser impact on dictionary
attacks compared to brute-force attacks.
Our proposal does not make any assumptions about the
way the password is stored in the database or the particu-
lar hash function employed. Nevertheless we assume that,
as the way users select passwords favors password-cracking,
leaked password hashes, or at least a signiﬁcant portion of
them, will eventually be cracked.
Figure 1: Overview of synergy-enhanced authentica-
tion. A user, with accounts in services S and V (e.g.,
Twitter and Google) tries to log in S. A standard au-
thentication process takes place which involves the