title:VUzzer: Application-aware Evolutionary Fuzzing
author:Sanjay Rawat and
Vivek Jain and
Ashish Kumar and
Lucian Cojocar and
Cristiano Giuffrida and
Herbert Bos
VUzzer: Application-aware Evolutionary Fuzzing
Sanjay Rawat∗†, Vivek Jain‡, Ashish Kumar‡, Lucian Cojocar∗†, Cristiano Giuffrida∗† and Herbert Bos∗†
∗Computer Science Institute, Vrije Universiteit Amsterdam
@vu.nl; @cs.vu.nl
‡ International Institute of Information Technology, Hyderabad
†Amsterdam Department of Informatics
@research.iiit.ac.in
Abstract—Fuzzing is an effective software testing technique
to ﬁnd bugs. Given the size and complexity of real-world
applications, modern fuzzers tend to be either scalable, but not
effective in exploring bugs that lie deeper in the execution, or
capable of penetrating deeper in the application, but not scalable.
In this paper, we present an application-aware evolutionary
fuzzing strategy that does not require any prior knowledge of the
application or input format. In order to maximize coverage and
explore deeper paths, we leverage control- and data-ﬂow features
based on static and dynamic analysis to infer fundamental prop-
erties of the application. This enables much faster generation of
interesting inputs compared to an application-agnostic approach.
We implement our fuzzing strategy in VUzzer and evaluate it
on three different datasets: DARPA Grand Challenge binaries
(CGC), a set of real-world applications (binary input parsers),
and the recently released LAVA dataset. On all of these datasets,
VUzzer yields signiﬁcantly better results than state-of-the-art
fuzzers, by quickly ﬁnding several existing and new bugs.
I.
INTRODUCTION
Fuzzing is a testing technique to catch bugs early, before
they turn into vulnerabilities. However, existing fuzzers have
been effective mainly in discovering superﬁcial bugs, close to
the surface of software (low-hanging bugs) [13], [17], while
struggling with more complex ones. Modern programs have
a complex input format and the execution heavily depends
on input values conforming to the format. Typically, a fuzzer
blindly mutates values to generate new inputs. In this (pes-
simistic) scenario, most of the resulting inputs do not conform
to the input format and are rejected in the early stages of
the execution. This makes a traditional random fuzzer often
ineffective in ﬁnding bugs that hide deep in the execution.
State-of-the-art fuzzers such as AFL [52] employ evolu-
tionary algorithms to operate valid input generation. Such
algorithms employ a simple feedback loop to assess how good
an input is. In detail, AFL retains any input that discovers a
new path and mutates that input further to check if doing so
leads to new basic blocks. While simple, this strategy cannot
effectively select the most promising inputs to mutate from
the discovered paths. In addition, mutating an input involves
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23404
answering two questions: where to mutate (which offset in the
input) and what value to use for the mutation? The problem
is that AFL is completely application-agnostic and employs
a blind mutation strategy. It simply relies on generating a
huge amount of mutated inputs in the hope of discovering
a new basic block. Unfortunately, this approach yields a slow
fuzzing strategy, which can only discover deep execution paths
by sheer luck. Fortunately, we can increase the efﬁciency of
AFL-like fuzzers manifold by accounting for information that
answers the questions above.
In this direction, the use of symbolic and concolic execu-
tion has shown promising results [33], [47]. Driller [47] uses
concolic execution to enable AFL to explore new paths when
it gets stuck on superﬁcial ones. However, fuzzers like AFL
are designed to target arbitrarily large programs and, in spite
of several advancements, the application of symbolic/concolic
techniques to such programs remains a challenge [10]. For
example, Driller was benchmarked with 126 DARPA CGC
binaries [15] and when AFL got stuck on 41 such binaries, its
concolic engine could only generate new meaningful inputs
from 13 of such binaries. The results reported in the LAVA
paper [17] evidence similar problems with symbolic execution
approaches. In another recent study [50], the authors reported
that symbolic execution-based input generation (using KLEE)
is not very effective at exploring meaningful and deeper paths.
In essence, while combining fuzzing with symbolic execution
is an interesting research area, this approach also signiﬁcantly
weakens one of fuzzing’s original key strengths: scalability.
In this paper, we present VUzzer, an application-aware
evolutionary fuzzer which is both scalable and fast to discover
bugs deep in the execution. In contrast to approaches that
optimize the input generation process to produce inputs at max-
imum rates, our work explores a new point in the design space,
where we do more work at the front-end and produce fewer
but better inputs. The key intuition is that we can enhance the
efﬁciency of general-purpose fuzzers with a “smart” mutation
feedback loop based on control- and data-ﬂow application
features without having to resort to less scalable symbolic
execution. We show that we can extract such features by
lightweight static and dynamic analysis of the application
during fuzzing runs. Our control-ﬂow features allow VUzzer
to prioritize deep (and thus interesting) paths and deprioritize
frequent (and thus uninteresting) paths when mutating inputs.
Our data-ﬂow features allow VUzzer to accurately determine
where and how to mutate such inputs.
Thanks to its application-aware mutation strategy, VUzzer
than existing fuzzers. We evalu-
is much more efﬁcient
ated the performance of VUzzer on three different datasets:
a) the DARPA CGC binaries [15], a collection of artiﬁcially
created interactive programs designed to assess bug-ﬁnding
techniques; b) a set of Linux programs with varying de-
grees of complexity (djpeg, mpg321, pdf2svg, gif2png,
tcpdump, tcptrace) and c) the recently released binaries
from the LAVA team [17], a number of Linux utilities with
several
injected bugs. In our experiments on the different
datasets, we outperformed AFL by generating orders of mag-
nitude fewer inputs, while ﬁnding more crashes. For example,
in mpg3211, we found 300 unique crashes by executing 23K
inputs, compared to 883K inputs to ﬁnd 19 unique crashes
with AFL.
Contributions: We make the following contributions:
1) We show that modern fuzzers can be “smarter” without
resorting to symbolic execution (which is hard to scale).
Our application-aware mutation strategy improves the
input generation process of state-of-the-art fuzzers such
as AFL by orders of magnitude.
2) We present several application features to support mean-
ingful mutation of inputs.
3) We evaluate VUzzer, a fully functional fuzzer that imple-
ments our approach, on three different datasets and show
that it is highly effective.
4) To foster further research in the area and in support of
open science, we are open sourcing our VUzzer prototype,
available at https://www.vusec.net/projects/fuzzing.
in the hope of triggering bugs on some of these path [14], [28],
[44], [47], [52]. VUzzer is a coverage-based fuzzer.
By deﬁnition, a coverage-based fuzzer aims at maximizing
the code coverage to trigger paths that may contain bugs. To
maximize code coverage, the fuzzer tries to generate inputs
such that each input (ideally) executes a different path. There-
fore, it is of paramount importance for a fuzzer to account for
the gain obtained for each generated input, a property that we
term input gain (IG). IG is deﬁned as the ability of an input
to discover a new path either by executing new basic blocks
or increase the frequency of previously executed basic blocks
(e.g., loop execution).
Obviously, a coverage-based fuzzer is effective if it fre-
quently generates inputs with non-zero IG. It is not hard to
notice that the ability to generate inputs with non-zero IG
requires addressing our two questions in Section I (where
and what
to mutate). Unfortunately, most existing fuzzers,
especially mutation-based ones make little effort to achieve
this goal. For example, let us consider the code snippet in
Listing. 1.
1 . . .
2 r e a d ( fd , buf ,
3 i f
4
5 e l s e
6
. . .
EXIT ERROR ( ” I n v a l i d f i l e \n ” ) ;
Listing 1. Simple multibyte IF condition.
( buf [ 5 ] == 0xD8 && buf [ 4 ] == 0xFF )
// notice the order of CMPs
some u s e f u l code
s i z e ) ;
. . .
II. BACKGROUND
In this section, we cover the background required for our
discussion of VUzzer in subsequent sections.
A. A Perspective on Fuzzing
Fuzzing is a software testing technique aimed at ﬁnding
bugs in an application [35], [48]. The crux of a fuzzer is
its ability to generate bug triggering inputs. From an input
generation perspective, fuzzers can be mutation- or generation-
based. Mutation-based fuzzers start with a set of known inputs
for a given application and mutate these inputs to generate new
inputs. In contrast, generation-based fuzzers ﬁrst learn/acquire
the input format and generate new inputs based on this format.
VUzzer is a mutation-based fuzzer.
With respect to input mutation, fuzzers can be classiﬁed as
whitebox, blackbox and greybox. A whitebox fuzzer [21], [22],
[26] assumes access to the application’s source code—allowing
it to perform advanced program analysis to better understand
the impact of the input on the execution. A blackbox fuzzer [1],
[39] has no access to the application’s internals. A greybox
fuzzer aims at a middle ground, employing lightweight pro-
gram analysis (mainly monitoring) based on access to the
application’s binary code. VUzzer is a greybox fuzzer.
Another factor that inﬂuences input generation is the appli-
cation exploration strategy. A fuzzer is directed if it generates
inputs to traverse a particular set of execution paths [20]–[22],
[26], [38]. A coverage-based fuzzer, on the other hand, aims at
generating inputs to traverse different paths of the application
1http://linux.die.net/man/1/mpg321
In this code, buf contains tainted data from the input. On
this simple code, AFL runs for hours without making any
progress to go beyond if condition. The reason for this rather
pessimistic behavior is twofold: (i) AFL has to guess the FFD8
byte sequence exactly right; (ii) AFL has to ﬁnd the right
offsets (4 & 5) to mutate. As AFL is a coverage-based fuzzer,
for an input which fails the if condition and thus results in a
new path (the else branch), AFL may focus on exploring this
new path even if the path leads to an error state. In such case,
AFL gets stuck in the else branch. Symbolic execution-based
solutions such as Driller [47] may help AFL by providing an
input with the right byte at the right offset. However, this is not
a deﬁnitive solution, because, with this new input, AFL again
starts mutating at random. In the process, it may try mutating
these offsets again, wasting processing power and time.
1 . . .
2 r e a d ( fd , buf , s i z e ) ;
3 . . .
4 i f
5
6
7} e l s e {
. . .
8
9}
Listing 2. Nested-level conditions and deeper paths
( . . . ) {
i f ( . . . )
. . .
// nested IF
Now consider another simple (pseudo) code snippet, in List-
ing. 2. At line 5, there is another multibyte if condition on the
input bytes, which is nested in the outer if. As AFL will likely
fail to satisfy the branch constraint, it will generate inputs that
traverse the else branch. As there is code to explore in the
else branch, AFL will not be able to prioritize efforts to target
the if branch. It is hard to impart such knowledge to AFL
even via symbolic execution. As a result, any bug inside the
nested if code region may remain hidden. In another case,
2
when AFL gets stuck at the if condition at line 5, symbolic
execution-based approaches such as Driller [47] will try to
ﬁnd new paths by sequentially negating path conditions. In
this process, they may negate constraints at line 4 to ﬁnd a
new path, which may lead to some error handling code. AFL,
however, has no knowledge of such error handling code and,
as a result, it will start exploring in that direction. In general,
there are several complex real-world code constructs that may
hinder the progress of coverage-based fuzzers.
fd ,
s i z e , v a l ;
s i z e ) ;
e l s e
i f
unsigned char buf [ 1 0 0 0 ] ;
i n t
i f
i ,
( ( f d = open ( a r g v [ 1 ] , O RDONLY) ) == −1)
e x i t ( 0 ) ;
f s t a t ( fd , &s ) ;
s i z e = s . s t
i f
s i z e ;
( s i z e > 1000)
return −1;
r e a d ( fd , buf ,
i f
In order to understand such code constructs, we will walk
through a more complex code snippet presented in Listing 3.
Although VUzzer does not require source code, we use high-
level C code for better illustration. The code reads a ﬁle and,
based on certain bytes at ﬁxed offsets in the input, it executes
certain paths.
1 i n t main ( i n t argc , char ∗∗ a r g v ){
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30}
( buf [ 1 ] == 0xEF && buf [ 0 ] == 0xFD )