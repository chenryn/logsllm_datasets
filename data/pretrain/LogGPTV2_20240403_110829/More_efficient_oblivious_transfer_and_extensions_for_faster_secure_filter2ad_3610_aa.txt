title:More efficient oblivious transfer and extensions for faster secure
computation
author:Gilad Asharov and
Yehuda Lindell and
Thomas Schneider and
Michael Zohner
More Eﬃcient Oblivious Transfer and
Extensions for Faster Secure Computation*
Gilad Asharov1, Yehuda Lindell1, Thomas Schneider2, and Michael Zohner2
1 Cryptography Research Group,
Bar-Ilan University, Israel,
PI:EMAIL, PI:EMAIL
2 Engineering Cryptographic Protocols Group,
{thomas.schneider,michael.zohner}@ec-spride.de
TU Darmstadt, Germany,
Abstract. Protocols for secure computation enable parties to compute a
joint function on their private inputs without revealing anything but the
result. A foundation for secure computation is oblivious transfer (OT),
which traditionally requires expensive public key cryptography. A more
eﬃcient way to perform many OTs is to extend a small number of base
OTs using OT extensions based on symmetric cryptography.
In this work we present optimizations and eﬃcient implementations of
OT and OT extensions in the semi-honest model. We propose a novel OT
protocol with security in the standard model and improve OT extensions
with respect to communication complexity, computation complexity, and
scalability. We also provide speciﬁc optimizations of OT extensions that
are tailored to the secure computation protocols of Yao and Goldreich-
Micali-Wigderson and reduce the communication complexity even fur-
ther. We experimentally verify the eﬃciency gains of our protocols and
optimizations. By applying our implementation to current secure com-
putation frameworks, we can securely compute a Levenshtein distance
circuit with 1.29 billion AND gates at a rate of 1.2 million AND gates
per second. Moreover, we demonstrate the importance of correctly im-
plementing OT within secure computation protocols by presenting an
attack on the FastGC framework.
Keywords: Secure computation; oblivious transfer extensions; semi-honest ad-
versaries
1
Introduction
1.1 Background
In the setting of secure two-party computation, two parties P0 and P1 with
respective inputs x and y wish to compute a joint function f on their inputs
*A preliminary version of this paper appears at ACM CCS 2013 [1].
without revealing anything but the output f (x, y). This captures a large vari-
ety of tasks, including privacy-preserving data mining, anonymous transactions,
private database search, and many more. In this paper, we consider semi-honest
adversaries who follow the protocol, but may attempt to learn more than allowed
via the protocol communication. We focus on semi-honest security as this allows
construction of highly eﬃcient protocols for many application scenarios. This
model is justiﬁed e.g., for computations between hospitals or companies that
trust each other but need to run a secure protocol because of legal restrictions
and/or in order to prevent inadvertent leakage (since only the output is revealed
from the communication). Semi-honest security also protects against potential
misuse by some insiders and future break-ins, and can be enforced with software
attestation. Moreover, understanding the cost of semi-honest security is an im-
portant stepping stone to eﬃcient malicious security. We remark that also in a
large IARPA funded project on secure computation on big data, IARPA stated
that the semi-honest adversary model is suitable for their applications [31].
Practical secure computation. Secure computation has been studied since the
mid 1980s, when powerful feasibility results demonstrated that any eﬃcient
function can be computed securely [19, 58]. However, until recently, the bulk of
research on secure computation was theoretical in nature. Indeed, many held the
opinion that secure computation will never be practical since carrying out cryp-
tographic operations for every gate in a circuit computing the function (which
is the way many protocols work) will never be fast enough to be of use. Due to
many works that pushed secure computation further towards practical applica-
tions, e.g., [6,7,10,15,17,25,28,35,41–43,50,57], this conjecture has proven to be
wrong and it is possible to carry out secure computation of complex functions
at speeds that ﬁve years ago would have been unconceivable. For example, in
FastGC [28] it was shown that AES can be securely computed with 0.2 seconds of
preprocessing time and just 0.008 seconds of online computation. This has appli-
cations to private database search and also to mitigating server breaches in the
cloud by sharing the decryption key for sensitive data between two servers and
never revealing it (thereby forcing an attacker to compromise the security of two
servers instead of one). In addition, [28] carried out a secure computation of a cir-
cuit of size 1.29 billion AND gates, which until recently would have been thought
impossible. Their computation took 223 minutes, which is arguably too long for
most applications. However, it demonstrated that large-scale secure computation
can be achieved. The FastGC framework was a breakthrough result regarding the
practicality of secure computation and has been used in many subsequent works,
e.g., [26, 27, 29, 30, 50]. However, it is possible to still do much better. The secure
computation framework of [56] improved the results of FastGC [28] by a factor
of 6-80, depending on the network latency. Jumping ahead, we obtain additional
speedups for both secure computation frameworks [28] and [56]. Most notably,
when applying our improved OT implementation to the framework of [56], we
are able to evaluate the 1.29 billion AND gate circuit in just 18 minutes. We
conclude that signiﬁcant eﬃciency improvements can still be made, considerably
broadening the tasks that can be solved using secure computation in practice.
2
Oblivious transfer and extensions. In an oblivious transfer (OT) [54], a sender
with a pair of input strings (x0, x1) interacts with a receiver who inputs a
choice bit σ. The result is that the receiver learns xσ without learning any-
thing about x1−σ, while the sender learns nothing about σ. Oblivious transfer
is an extremely powerful tool and the foundation for almost all eﬃcient proto-
cols for secure computation. Notably, Yao’s garbled-circuit protocol [58] (e.g.,
implemented in FastGC [28]) requires OT for every input bit of one party, and
the GMW protocol [19] (e.g., implemented in [10, 56]) requires OT for every
AND gate of the circuit. Accordingly, the eﬃcient instantiation of OT is of
crucial importance as is evident in many recent works that focus on eﬃciency,
e.g., [10, 20, 23, 26–28, 30, 40, 43, 49, 56]. In the semi-honest case, the best known
OT protocol is that of [46], which has a cost of approximately 3 exponentiations
per 1-out-of-2 OT. However, if thousands, millions or even billions of oblivious
transfers need to be carried out, this will become prohibitively expensive. In
order to solve this problem, OT extensions [4,32] can be used. An OT extension
protocol works by running a small number of OTs (say, 80 or 128) that are used
as a base for obtaining many OTs via the use of cheap symmetric cryptographic
operations only. This is conceptually similar to public-key encryption where in-
stead of encrypting a large message using RSA, which would be too expensive,
a hybrid encryption scheme is used such that only a single RSA computation is
carried out to encrypt a symmetric key and then the long message is encrypted
using symmetric operations only. Such an OT extension can actually be achieved
with extraordinary eﬃciency; speciﬁcally, the protocol of [32] requires only three
hash function computations on a single block per oblivious transfer (beyond the
initial base OTs).
Related Work. There is independent work on the eﬃciency of OT extension with
security against stronger malicious adversaries [21, 48, 49]. In the semi-honest
model, [24] improved the implementation of the OT extension protocol of [32] in
FastGC [28]. They reduce the memory footprint by splitting the OT extension
protocol sequentially into multiple rounds and obtain speedups by instantiat-
ing the pseudo-random generator with AES instead of SHA-1. Their implemen-
tation evaluates 400,000 OTs (of 80-bit strings without precomputations) per
second over WiFi; we propose additional optimizations and our fastest imple-
mentation evaluates more than 700,000 OTs per second over WiFi, cf. Tab. 4. A
recent contribution [36] focuses on eﬃcient OT extensions on short strings and
achieves sublinear communication in the number of OTs. Our work is orthogo-
nal to theirs, since our OT protocols maintain their eﬃciency when obliviously
transferring long strings. Finally, [12] presented a protocol for large-scale private
set-intersection using 1-out-of-2 OT on bit strings. We point out that our cor-
related OT (cf. §5.4) can be directly used in their semi-honest construction to
improve communication complexity by factor two.
3
1.2 Our Contributions and Outline
In this paper, we present more eﬃcient protocols for OT extensions. This is
somewhat surprising since the protocol of [32] sounds optimal given that only
three hash function computations are needed per transfer. Interestingly, our pro-
tocols do not lower the number of hash function operations. However, we observe
that signiﬁcant cost is incurred due to other factors than the hash function op-
erations. We propose several algorithmic (§4) and protocol (§5) optimizations
and obtain an OT extension protocol (General OT, G-OT §5.3) that has lower
communication, faster computation, and can be parallelized. Additionally, we
propose two OT extension protocols that are speciﬁcally designed to be used in
secure computation protocols and which reduce the communication and com-
putation even further. The ﬁrst of these protocols (Correlated OT, C-OT §5.4)
is suitable for secure computation protocols that require correlated inputs, such
as Yao’s garbled circuits protocol with the free-XOR technique [38, 58]. The
second protocol (Random OT, R-OT §5.4) can be used in secure computation
protocols where the inputs can be random, such as GMW with multiplication
triples [3, 19] (cf. §5.1). We apply our optimizations to the OT extension imple-
mentation of [56] (which is based on [10]) and demonstrate the improvements by
extensive experiments (§6).1 A summary of the time complexity for 1-out-of-2
OTs on 80-bit strings is given in Fig. 1. While the original protocol of [32] as im-
plemented in [56] evaluates 223 OTs in 18.0 s with one thread and in 14.5 s with
two threads, our improved R-OT protocol requires only 8.4 s with one thread
and 4.2 s with two threads, which demonstrates the scalability of our approach.
Secure random number generation. In §3 we emphasize that when OT protocols
are used as building block in a secure computation protocol, it is very important
that random values are generated with a cryptographically strong random num-
ber generator. In fact, we show an attack on the latest version of the FastGC [28]
implementation (version v0.1.1) of Yao’s protocol which uses a weak random
number generator. Our attack allows the full recovery of the inputs of both par-
ties. To protect against our attack, a cryptographically strong random number
generator needs to be used (which results in an increased runtime).
Faster semi-honest base OT without random oracle. In the semi-honest model,
the OT of [46] is the fastest known with 2 + n exponentiations for the sender
and 2n ﬁxed-base exponentiations for the receiver, for n OTs. However, it is
proven secure only in the random oracle model, which is why the authors of [46]
also provide a slower semi-honest OT that relies on the DDH assumption, which
has complexity 4n ﬁxed-base + 2n double exponentiations for the sender and
1 + 3n ﬁxed-base + n exponentiations for the receiver. In §5.2 we construct a
protocol secure under the Decisional Diﬃe-Hellmann (DDH) assumption that is
much faster when many transfers are run (as in the case of OT extensions where
1 Our implementation is available online at http://encrypto.de/code/OTExtension.
4
Fig. 1. Runtime for 1-out-of-2 OT extension optimizations on 80-bit strings. The ref-
erence and number of threads is given in (); the time for 223 OTs is given in {}.
80 base OTs are needed) and is only slightly slower than the fastest OT in the
random oracle model (§6.1).
Faster OT extensions. In §5.3 we present an improved version of the original
OT extension protocol of [32] with reduced communication and computation
complexity. Furthermore, we demonstrate how the OT extension protocol can
be processed in independent blocks, allowing OT extension to be parallelized
and yielding a much faster runtime (§4.1). In addition, we show how to im-
plement the matrix transpose operation using a cache-eﬃcient algorithm that
operates on multiple entries at once (§4.2); this has a signiﬁcant eﬀect on the
runtime of the protocol. Finally, we show how to reduce the communication by
approximately one quarter (depending on the bit-length of the inputs). This is
of great importance since local computations of the OT extension protocol are
so fast that the communication is often the bottleneck, especially when running
the protocol over the Internet or even wireless networks.
Extended OT functionality. Our improved protocol can be used in any setting
that regular OT can be used. However, with a mind on the application of secure
computation, we further optimize the protocol by taking into account its use
in the protocols of Yao [58] and GMW [19] in §5.4. For Yao’s garbled circuits
protocol, we observe that the OT extension protocol can choose the ﬁrst value
randomly and output it to the sender while the second value is computed as
a function of the ﬁrst value. For the GMW protocol. we observe that the OT
extension protocol can choose both values randomly and output them to the
5
sender. In both cases, the communication is reduced to a half (or even less) of
the original protocol of [32].
Experimental evaluation and applications. In §6 we experimentally verify the
performance improvements of our proposed optimizations for OT and OT ex-
tension. In §7 we demonstrate their eﬃciency gains for faster secure computa-
tion, by giving performance benchmarks for various application scenarios. For
the Yao’s garbled circuits framework FastGC [28], we achieve an improvement
up to factor 9 for circuits with many inputs for the receiver, whereas we improve
the runtime of the GMW implementation of [56] by factor 2, e.g., a Levenshtein
distance circuit with 1.29 billion AND gates can now be evaluated at a rate of
1.2 million AND gates per second.
2 Preliminaries
In the following, we summarize the security parameters used in our paper (§2.1)
and describe the OT extension protocol of [32] (§2.2), Yao’s garbled circuits pro-
tocol (§2.3), and the GMW protocol (§2.4) in more detail. Standard deﬁnitions
of security are given in Appendix A.
2.1 Security Parameters
Throughout the paper, we denote the symmetric security parameter by κ. Tab. 1
lists usage times (time frames) for diﬀerent values of the symmetric security
parameter κ (SYM ) and corresponding ﬁeld sizes for ﬁnite ﬁeld cryptography
(FFC) and elliptic curve cryptography (ECC) as recommended by NIST [51].
For FCC we use a subgroup of order q = 2κ. For ECC we use Koblitz curves
which had the best performance in our experiments (cf. [13])2.
Security (Time Frames) SYM FFC ECC
1024 K-163
Short (legacy)
2048 K-243
Medium ( 2030)
3072 K-283
80
112
128
Table 1. Security parameters and recommended key sizes.
2.2 Oblivious Transfer and OT Extension
The m-times 1-out-of-2 OT functionality for (cid:96)-bit strings, denoted m× OT(cid:96),
i ∈ {0, 1}(cid:96)
is deﬁned as follows: The sender S inputs m pairs of strings x0
2 The prime-ﬁeld curves outperformed the Koblitz curves only for [46]-STD using the
i , x1
long-term security setting.
6
.
j
(1 ≤ i ≤ m), the receiver R inputs a string r = (r1, . . . , rm) of length m, and
(1 ≤ j ≤ m) as output. OT ensures that S learns nothing about
R obtains xrj
j
r and R learns nothing about x1−rj
An OT extension protocol implements the m×OT(cid:96) functionality using a small
number of actual OTs, referred to as base OTs, and cheap symmetric crypto-
graphic operations. In [32] it is shown how to implement the m× OT(cid:96) func-
tionality using a single call to κ× OTm, and 3m hash function computations.
Note that κ× OTm can be implemented via a single call to κ× OTκ in order
to obliviously transfer symmetric keys, and then using a pseudo-random gen-
erator G to obliviously transfer the actual inputs of length m (cf. [30, 32]). In
the ﬁrst step of [32], S chooses a random string s ∈R {0, 1}κ, and R chooses a
random m × κ bit matrix T = [t1 | . . . | tκ], where ti ∈ {0, 1}m denotes the