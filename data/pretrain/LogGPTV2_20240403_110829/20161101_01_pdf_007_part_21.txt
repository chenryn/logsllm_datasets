### 优化后的文本

#### 时间: 48.680 ms
#### 指定表的关联顺序配置参数

```sql
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**查询计划:**
```
Nested Loop (cost=2.35..68.82 rows=1 width=65)
 -> Nested Loop (cost=1.92..60.36 rows=1 width=69)
   ...
   -> Index Only Scan using tbl_join_9_pkey on tbl_join_9 t9 (cost=0.43..8.45 rows=1 width=4)
     Index Cond: (id = 10000)
(26 rows)
Time: 23.650 ms
```

#### 设置 `join_collapse_limit` 和 `geqo_threshold`

```sql
digoal=# set join_collapse_limit=9;
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**时间: 51.591 ms**

```sql
digoal=# set geqo_threshold=9;
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**时间: 18.359 ms**

由于 `geqo_threshold` 和 `join_collapse_limit` 设置为相等，这个 SQL 在生成连接列表时会达到 GEQO 限制，触发 GEQO 计划。因此，计划的时间也缩短了。

```sql
digoal=# set join_collapse_limit=1;
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**时间: 5.605 ms**

设置 `join_collapse_limit=1` 后，按照 SQL 写法进行关联。执行计划的时间也缩短了。

### GEQO（遗传算法优化器）

表关联是执行计划中最耗时的部分，特别是当表的数量较多时，关联顺序会呈指数级增长。例如，9 个表的关联最多有 9*8*7*6*5*4*3 = 181,440 种关联顺序。如果再乘上连接方法（如嵌套循环、哈希连接、合并连接）和扫描方法（如索引扫描、顺序扫描、仅索引扫描、位图扫描），则最多有 181,440 * (3^(9-1)) * (n^(9-1)) 种组合。因此，执行计划的开销会随着关联表的数量而呈指数级增加。

GEQO 是一种利用遗传算法解决穷举法带来的执行计划耗费暴增问题的方法。虽然 GEQO 得到的执行计划可能不是最优的，但它可以显著降低执行计划的生成时间。

**相关参数:**
- `geqo` (布尔值) - GEQO 开关，默认打开。
- `geqo_threshold` (整数) - 当 JOIN 表数量大于或等于这个值时，将启用 GEQO。默认值为 12。
- `geqo_effort` (整数) - 优化倾向，值越大，得出的路径越多，越有可能得到更优的执行计划，但也会带来更多的开销。默认值为 5 (范围 1-10)。
- `geqo_pool_size` (整数) - 默认值为 0，从 `geqo_effort` 得出合适的值。
- `geqo_generations` (整数) - 默认值为 0，从 `geqo_pool_size` 得出合适的值。
- `geqo_selection_bias` (浮点数) - GEQO 选择性偏差，默认值为 2.0 (范围 1.5-2.0)。
- `geqo_seed` (浮点数) - 随机数初始值，默认值为 0。

### 示例

```sql
digoal=# set geqo_threshold=8;
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**时间: 16.694 ms**

因为 `join_collapse_limit=8`，所以连接列表长度为 8，达到使用 GEQO 的阈值，执行计划耗时 16.694 毫秒。

```sql
digoal=# set geqo_threshold=9;
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**时间: 23.407 ms**

`join_collapse_limit=8` 时，连接列表长度为 8，小于 GEQO 阈值 9，采用穷举法，执行计划耗时 23.407 毫秒。

```sql
digoal=# set geqo_threshold=12;
digoal=# set join_collapse_limit=9; -- 连接列表长度为 9
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**时间: 54.376 ms** - 采用穷举法

```sql
digoal=# set geqo_threshold=9; -- GEQO 阈值也调到 9
digoal=# explain select t1.info, t5.info from
tbl_join_1 t1 join tbl_join_2 t2 on (t1.id=t2.id)
join tbl_join_3 t3 on (t2.id=t3.id)
join tbl_join_4 t4 on (t3.id=t4.id)
join tbl_join_5 t5 on (t4.id=t5.id)
join tbl_join_6 t6 on (t5.id=t6.id)
join tbl_join_7 t7 on (t6.id=t7.id)
join tbl_join_8 t8 on (t7.id=t8.id)
join tbl_join_9 t9 on (t8.id=t9.id)
where t9.id=10000;
```

**时间: 18.506 ms** - 采用 GEQO

```sql
digoal=# set geqo_effort = 10; -- 把 effort 改到 10，GEQO 的耗时增加。执行计划有所变化。
```

**时间: 32.341 ms**

### 目录
- 授课环境
- SQL 优化基础
- 如何让数据库输出好的执行计划
- 压力测试工具的使用和建模
- 性能分析工具的使用
- 综合优化案例