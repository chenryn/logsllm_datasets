multaneously against servers of all five implementations, i.e., we
compare the responses of all the servers against each other. We
2Versions of implementations as available on 29/05/2020
3We do not create an echo server for the QUANT and the NEQO implementation due
to the absence of a well defined API and documentation. Although we perform testing
on their fully fledged servers supporting QUIC protocol, we do not consider these
servers directly for our reassembly based results.
then analyse the results with the assumption that a DPI system is
based on one of the implementations under consideration in the
result.
To model an inline proxy that forwards the packets to a DPI
system for further inspection, our differential fuzzing module makes
sure that the same sequence of packets are sent to all the IUTs. To
ensure that in the event different data is returned by the two echo
servers, the difference is actually caused by an implementation
level difference and not a design difference in the echo servers, we
design and configure the echo servers in the same way. We use
identical values for the QUIC transport parameters in the servers
as these parameters can affect stream data reassembly. The echo
servers send the data received on a stream back only if they are
able to reassemble the stream data completely, i.e., the reassembled
data is contiguous and the stream has been closed. The servers
attempt to respond on the same streams for which they reassemble
the data. If a stream is unidirectional in nature, the write operation
for that stream will simply fail and the data is discarded (this does
not affect our results because we ensure that our generators create
bi-directional communication streams).
5.2 Experiment Setup
To model a proper client server architecture while removing the
effects of network latency and unintentional packet reordering,
we run our echo servers on a locally hosted virtual machine using
VirtualBox and run the client on our actual local machine. This
ensures that (i) the implementations being compared are fed the
exact same logical sequence of packets and (ii) the reassembly
differences that DPIFuzz uncovers are a consequence of design
differences in the implementations and not of any other reason.
The experiments were run on a machine with a Quad-Core Intel
i5 processor with a 16GB RAM. The virtual machine used was
allocated 4 cores with 8GB of RAM. The operating system used
for both the virtual machine and the local system is Ubuntu 18.04.
Running the tests locally also ensures that no servers in production
are harmed. Table 6 in the appendix contains the values used for
the transport parameters in the servers. Values of input parameters
for the Differential Fuzzing Module are:
• IUTList is initialised with the IP address as well as the port
• GeneratorList is defined as "Basic Stream Reassembly, Flow-
Control-Aware Stream Reassembly, Overlapping Offset"
• Ns is set to 200
• ParallelExecutions is set to 5.
• The probability values used for various mutations are listed
number for the 5 IUTs.
in Table 7 in the appendix.
5.3 DPI Elusion Results
In total, we use our framework to create 600 (|GeneratorList|*Ns)
unique sequences, i.e., we run our fuzzer against each IUT, with
each of the 3 (|GeneratorList|) specified generators, with 200(Ns)
different seed values. It takes approximately 2.5 hours for all the
sequences to finish executing and for the comparison results to be
generated. If run without parallelization, the same process would
take around 12.5 hours (considering the parallelization factor of
5). We summarise the differences uncovered by these sequences in
338ACSAC 2020, December 7–11, 2020, Austin, USA
Reen and Rossow
Seed Value
Generator
QUICHE Reassembled Data MVFST Reassembled Data
QUICLY Reassembled Data
4373445819122772715
Basic Stream
Reassembly
7253654666463259418
Overlapping Offset
2Z?b"?@N5?#48SZyBp????;yGJ-
+$0P7cdWYaBMetcem=+@Wf-
Sja1xZwhYKFFA26AN&YI_
(;k]Nx[CV@g@mc’jZP
Table 1: Reassembly Differences
yGJ+$0P7cdWYaBMetcem=+@-
WfSja1xZwhYKFFA26AN&YI_
yGJ+$0P7cdWYaBMetcem=+@-
WfSja1xZwhYKFFA26AN&YI_
(;k]Nx[CV@g@mc1jZP
(;k]>.gXhn%@mc1jZP
Packet
No.
1
2
3
4
5
6
7
8
9
Stream
Frame
Pay-
load
’jZP
x[
@mc1
CV@g
k]N
>.g
Xhn%
(
;
Stream
Offset
Pay-
load
Length
14
5
11
0
7
2
4
7
1
4
2
3
1
4
3
3
4
1
No. of
over-
lap-
ping
offsets
0
0
1
0
0
0
3
4
0
Stream
Finbit
True
False
False
False
False
False
False
False
False
QUICHE Reassembled
Data
QUICLY Reassembled
Data
MVFST Reassembled
Data
______________’jZP
_____x[_______’jZP
_____x[____@mc’jZP
(____x[____@mc’jZP
(____x[CV@g@mc’jZP
(_k]Nx[CV@g@mc’jZP
(_k]Nx[CV@g@mc’jZP
(_k]Nx[CV@g@mc’jZP
(;k]Nx[CV@g@mc’jZP
______________’jZP
_____x[_______’jZP
_____x[____@mc1jZP
(____x[____@mc1jZP
(____x[CV@g@mc1jZP
(_k]Nx[CV@g@mc1jZP
(_k]>.gCV@g@mc1jZP
(_k]>.gXhn%@mc1jZP
(;k]>.gXhn%@mc1jZP
______________’jZP
_____x[_______’jZP
_____x[____@mc1jZP
(____x[____@mc1jZP
(____x[CV@g@mc1jZP
(_k]Nx[CV@g@mc1jZP
(_k]Nx[CV@g@mc1jZP
(_k]Nx[CV@g@mc1jZP
(;k]Nx[CV@g@mc1jZP
Table 2: Overlapping Offset Data Reassembly. Packets 3, 7 and 8 contain overlapping offsets and highlight the diverging be-
haviour of the implementations.
Table 8 in the appendix. We use the seed values in the result file
generated by DPIFuzz to regenerate sequences of packets for which
the behaviour of the implementations differs. We then manually
inspect them to find the underlying reasons for the differences in
implementation behaviour. Analysing these sequences, we uncover
6 logically different DPI elusion results which we summarise next.
5.3.1 Reassembly Differences:
In this category, we discuss the results which lead to different data
being reassembled (for the same sequence of input packets) by the
IUTs. Using the two exemplary results in Table 1, we highlight how
attackers can exploit differences in reassembly strategies to elude a
DPI system:
• Exploiting Packets with Duplicate Packet Numbers:
The first way to elude DPI systems uncovered by our fuzzer is
based on the idea of inserting packets with duplicate packet
numbers that are ignored by some IUTs, in accordance with
the IETF specification of QUIC, but not by others.
Consider the first entry in Table 1. The MVFST server or
the QUICLY server acts as the DPI system and the QUICHE
server acts as the destination server. While the destination
server reassembles data from two streams (stream ID 12 and
16 in our concrete sequence), the DPI server only reassem-
bles the data from one stream (stream ID 16). After receiving
packets containing stream frames of one stream (ID 16), the
servers receive a packet with a duplicate packet number.
This packet has undergone the "Repeat Payload" mutation at
the fuzzer side because of which the frames in the payload
become structurally invalid. While the destination server is
configured to drop packets with a duplicate packet number,
the DPI server attempts to process the packet. This results
in a "Frame Format Error" on the DPI server and the connec-
tion is closed. Any data sent after this(stream 12 data) is not
reassembled by the DPI server. When used with an inline
proxy, it will still be able to inspect the data in the individual
packets and maybe reassemble stream 12 data independently,
but will not be able to combine it with contents reassembled
from stream 16.
This concrete evasion instance can be trivially generalized
to fool the DPI in missing any blocked keyword(s). Let us
assume that the text "BLOCKED" is denylisted by the DPI
system. We use two streams (IDs 0 and 4) to send this data
from the client to the server. We create the frames such that
stream 0 frames reassemble to "BLO" and stream 4 frames
reassemble to "CKED". After the packets containing stream
0 frames, we insert a packet with a duplicate packet number,
with a randomised payload (structurally invalid frames) , into
the sequence of packets. We then insert packets containing
the stream 4 frames and send this sequence of packets to the
server. The DPI server reassembles the packets as "BLO" and
therefore fails to detect the denylisted word. The destination
server reassembles the packets as "BLOCKED" and is thus
able to elude the DPI.
• Exploiting Stream Offset Overlaps: Another way to elude
DPI systems discovered by our fuzzer is based on the idea
339DPIFuzz: A Differential Fuzzing Framework to Detect DPI Elusion Strategies for QUIC
ACSAC 2020, December 7–11, 2020, Austin, USA
Packet
No.
1
2
Packet
No.
1
2
3
Stream Frame
Payload
OCKED
BLIN
Stream Frame
Payload
OCKED
INKED
BL
Stream Offset
Stream Finbit QUICHE Reassembled Data
(Destination Server)
2
0
True
False
__OCKED
BLOCKED
Table 3: DPI elusion using Overlapping Offsets (Case 1)
Stream Offset
Stream Finbit MVFST Reassembled Data
(Destination Server)
2
2
0
True
False
False
__OCKED
__OCKED
BLOCKED
QUICLY Reassembled Data
(DPI system)
__OCKED
BLINKED
QUICLY Reassembled Data
(DPI system)
__OCKED
__INKED
BLINKED
Table 4: DPI elusion using Overlapping Offsets (Case 2)
Seed Value
5224880393376231849
6867396659762739268
3544824671711368728
8969571667189322506
Generator
Basic Stream Reassembly
Flow-Control-Aware Stream Reassembly
Flow-Control-Aware Stream Reassembly
Basic Stream Reassembly
Implementation
MVFST
QUANT