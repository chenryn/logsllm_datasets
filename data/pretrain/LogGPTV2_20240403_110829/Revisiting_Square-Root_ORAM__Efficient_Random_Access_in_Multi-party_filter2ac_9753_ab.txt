based on two non-colluding servers. When applied to a
two-party secure RAM computation setting, these servers
become parties engaging in an MPC protocol. Their con-
struction achieves O(logN) overhead, but suffers from
huge concrete costs because it requires oblivious eval-
uation of Θ(logN) cryptographic operations per access,
which is prohibitively expensive in an MPC protocol.
Afshar et al. [1] discussed how to extend RAM-SC
with malicious security, where both parties can arbitrarily
220220
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
deviate from the protocol. They proposed efﬁcient con-
sistency checks that avoid evaluating MAC in circuits.
In this paper, we only consider semi-honest adversaries,
and hope that future work will extend our protocol to be
secure against malicious adversaries.
III. REVISITING SQUARE-ROOT ORAM
In this section we revisit Goldreich and Ostrovsky’s
square-root ORAM design [12] and adapt it to the RAM-
SC setting. Section III-A introduces notations used to
describe ORAM algorithms; Section III-B provides a
brief description of the original scheme; Section III-C in-
troduces a basic (but inefﬁcient) construction by making
some key changes to the original scheme; Section III-D
shows how to improve its efﬁciency with a recursive
construction which is our ﬁnal design.
A. Notation
We use (cid:104)x(cid:105) to denote a variable x secretly shared by
the two parties. In our garbled circuit implementation,
(cid:104)x(cid:105) means the generator knows (k0,k1) and the evaluator
knows kx. Since the actual value of x is not known to
either party, we interchangeably use the terms “private”,
“garbled”, and “oblivious” to describe it.
The length of an array is always public, although
padding can be used to hide its exact length when nec-
essary. An array containing private elements is denoted
using angle brackets (e.g., (cid:104)Array(cid:105)). We denote the ith
element of an array using a subscript (e.g., (cid:104)Array(cid:105)i).
The index may be oblivious (e.g., (cid:104)Array(cid:105)(cid:104)i(cid:105)), in which
case the array access is performed via linear scan.
The structure blocks represents an array of block ob-
jects. Each block contains private data, block.(cid:104)data(cid:105), and
a private record of its logical index, block.(cid:104)index(cid:105). Thus,
i is the physical index of blocksi, and blocksi.(cid:104)index(cid:105) is
the logical index of the same block. Neither changing
the contents of a block nor moving it from one structure
to another alters its logical index, unless explicitly noted.
In pseudocode, ordinary conditional statements will
use the keyword if, while conditionals on secret values
will use (cid:104)if(cid:105). The bodies of secret conditionals are
deﬁne Access(Oram,(cid:104)i(cid:105),Φ):
for j from 0 to Oram.n− 1:
(cid:104)if(cid:105) (cid:104)i(cid:105) = j: Φ(Oram j)
Fig. 1: Access algorithm for the linear scan ORAM.
deﬁne Write(Oram,(cid:104)i(cid:105),(cid:104)val(cid:105)):
block.(cid:104)data(cid:105) ← (cid:104)val(cid:105)
deﬁne Φ(block):
Access(Oram,(cid:104)i(cid:105),Φ)
deﬁne Read(Oram,(cid:104)i(cid:105)):
(cid:104)val(cid:105) ← ⊥
deﬁne Φ(block):
Access(Oram,(cid:104)i(cid:105),Φ)
return (cid:104)val(cid:105)
(cid:104)val(cid:105) ← block.(cid:104)data(cid:105)
Fig. 2: Read and write wrappers deﬁned using Access()
always executed, but the statements in them are executed
conditionally, becoming no-ops if the condition is false.
$←− B to denote random choice of a secret
We use (cid:104)a(cid:105)
element a from a public set B.
Figure 1 shows how the access algorithm for a naïve
linear scan ORAM is written in our notation. The algo-
rithm Access takes three parameters as inputs:
• Oram: the main data structure storing the payload.
• (cid:104)i(cid:105): the private, logical index of the block we want
to access.
write or modify the desired block.
• Φ(): a function that is invoked during access to read,
The ORAM hides index (cid:104)i(cid:105) by performing a linear
scan over all elements. Note that we use (cid:104)if(cid:105) for the
conditional, so the body of the conditional statement will
actually be executed n times, although only one will take
effect. Both parties will see the garbled keys representing
(cid:104)val(cid:105) or (cid:104)data(cid:105) change n times inside Φ(); they just won’t
know if the associated plaintext has also changed, since
that depends on secret index (cid:104)i(cid:105).
Users will not typically use ORAMs by directly invok-
ing Access, but by using the wrapper functions shown
in Figure 2. These wrappers are exactly the same across
all ORAM constructions we consider; the essential logic
is in Access.
B. Square-Root ORAM
Figure 3 shows the original square-root ORAM pro-
posed by Goldreich and Ostrovsky [12]. The ORAM
structure consists of following components:
1) Shuﬄe: an array of blocks, also referred to as
“permuted memory” in the original paper.
2) Stash: an array of blocks, termed the “shelter” in
the original paper.
221221
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
deﬁne Initialize(blocks,T )
n ← |blocks|
(cid:104)π(cid:105) ← pseudorandom function
√
append
n dummy blocks to Shuﬄe
Shuﬄe ← ObliviousSort(blocks,(cid:104)π(cid:105))
Oram ← (n,t ← 0,T,(cid:104)π(cid:105), Shuﬄe, Stash ← ∅)
return Oram
deﬁne Initialize(blocks,T )
n ← |blocks|
(cid:104)π(cid:105) ← random permutation on n elements
Shuﬄe ← ObliviousPermute(blocks,(cid:104)π(cid:105))
Oram ← (n,t ← 0,T,(cid:104)π(cid:105), Shuﬄe,
Used ← ∅ , Stash ← ∅)
return Oram
deﬁne Access(Oram,(cid:104)i(cid:105),Φ)
(cid:104)found(cid:105) ← false
for j from 0 to Oram.t:
(cid:104)if(cid:105) Oram.Stash j.(cid:104)index(cid:105) = (cid:104)i(cid:105):
(cid:104)found(cid:105) ← true
Φ(Oram.Stash j)
(cid:104)k(cid:105) ← Oram.n + Oram.t
(cid:104)if(cid:105)(cid:104)found(cid:105) :
(cid:104)else(cid:105) : (cid:104)k(cid:105) ← (cid:104)i(cid:105)
p ← reveal(π((cid:104)k(cid:105)))
(cid:104)if(cid:105) not (cid:104)found(cid:105) :
Φ(Oram.Shuﬄep)
append Oram.Shuﬄep to Oram.Stash
Oram.Shuﬄep ← dummy
Oram.t ← Oram.t + 1
if Oram.t = Oram.T :
blocks ← real blocks in
Oram.Shuﬄe∪ Oram.Stash
Oram ← Initialize(blocks, Oram.T )
Fig. 3: The original square-root ORAM scheme [12].
3) π: a pseudorandom function (PRF) mapping indices
to random strings. Note that π needs to be evaluated
securely using MPC protocols, which is why pre-
vious RAM-SC designs dismissed the square-root
ORAM construction.
√
To initialize an ORAM from an array of blocks, we
√
n dummy blocks to the input array and
ﬁrst append
obliviously permute all n +
n blocks according to the
pseudorandom permutation π(i). Once the blocks are
shufﬂed, their physical locations and semantic indices
are uncorrelated, and so each block may be accessed
once (and only once) without revealing anything about
the access pattern. But, if a location in the shufﬂed array
is accessed multiple times that would leak information,
deﬁne Access(Oram,(cid:104)i(cid:105),Φ)
(cid:104)found(cid:105) ← false
for j from 0 to Oram.t:
(cid:104)if(cid:105) Oram.Stash j.(cid:104)index(cid:105) = (cid:104)i(cid:105):
(cid:104)found(cid:105) ← true
Φ(Oram.Stash j)
(cid:104)if(cid:105)(cid:104)found(cid:105) :
(cid:104)p(cid:105)
$←− {0, . . . , (Oram.n− 1)}\ Oram.Used
(cid:104)else(cid:105) : (cid:104)p(cid:105) ← Oram.(cid:104)π(cid:105)(cid:104)i(cid:105)
p ← reveal((cid:104)p(cid:105))
(cid:104)if(cid:105) not (cid:104)found(cid:105) :
Φ(Oram.Shuﬄep)
append Oram.Shuﬄep to Oram.Stash
Oram.Used ← Oram.Used∪{p}
Oram.t ← Oram.t + 1
if Oram.t = Oram.T :
for j from 0 to |Oram.Used|− 1:
p(cid:48) ← Oram.Used j
Oram.Shuﬄep(cid:48) ← Oram.Stash j
Oram ← Initialize(Oram.Shuﬄe, Oram.T )
Fig. 4: Our basic square-root ORAM scheme.
revealing that the access sequence contains a repeated
access.
To access logical index (cid:104)i(cid:105), we ﬁrst linear scan the
blocks in Stash. If the block is not found, we compute
its physical location, (cid:104)p(cid:105)← π((cid:104)i(cid:105)); otherwise, we ﬁnd the
physical location of the next unaccessed dummy blocks,
(cid:104)p(cid:105) ← π(n + Oram.t). The value (cid:104)p(cid:105) is then revealed to
both parties, but leaks no information about the logical
index. The block at the physical location referred to by
p is accessed, by doing a binary search over the π(i)
values, and moved to Stash.
222222
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 
After T accesses have been performed, we oblivi-
ously remove all dummy blocks in Oram.Stash and
Oram.Shuﬄe and re-initialize the whole structure. The
complete protocol is shown in pseudocode in Figure 3.
√
√
In Goldreich and Ostrovsky’s original protocol, Oram.T
nlog2 n) amortized cost
n, resulting in O(
is set to
per access.
The original scheme was not designed for a RAM-SC
setting, and suffers from two key problems that make it
very expensive to implement in an MPC:
1) It evaluates the PRF π(x) for each access; in the
√
n evaluations of π(i)
initialization algorithm, n +
are needed. This is inefﬁcient, especially in MPC
protocols since evaluating each PRF requires tens
of thousands of gates.
2) It requires a Θ(nlog2 n) oblivious sort on the data
blocks in two different places: to shufﬂe data blocks
according to the PRF results, and to remove dummy
blocks before initialization.
Next, we discuss how to adapt the scheme for efﬁcient
use in RAM-SC by eliminating these problems.
C. Basic Construction
Figure 4 presents our basic construction, a step to-
wards our ﬁnal scheme. The construction is similar to
the original scheme, with a key difference: instead of
using PRF to generate a random permutation, it stores the
permutation π explicitly as a private array. This enables
several performance improvements:
1) Storing the permutation π as a private array enables
us to replace oblivious sorting during the initializa-
tion with a faster oblivious permutation. In addition,
the value p revealed during the access refers to the
real location, which avoids using binary search to
ﬁnd the location for p. Section III-D shows how to
recursively implement π for better efﬁciency.
2) We eliminate the need of dummy blocks. When
a dummy access is needed, we instead access a
random location for real blocks that is not accessed
before and append the block to the Stash.
3) By using a public set Used, we avoid the oblivious
sorting needed when moving blocks from the Stash
to Shuﬄe. This is efﬁcient since Used is maintained
in the clear and is secure because all elements in
Used have already been revealed.
Security. Assuming the MPC protocol itself is secure
and does not
leak any information about oblivious
variables, this protocol satisﬁes the ORAM requirement
that no information is revealed about the logical access
indices p;
pattern. On each access, a uniform unused element
from Shuﬄe is selected, regardless of the semantic
index requested. Subsequently, the entire Stash is always
scanned. Finally, the entire structure is reshufﬂed at a
ﬁxed interval, in a manner independent of the access
pattern. The only values revealed are the permuted
physical
the set Used, which contains no
information about the semantic indices; and the counter
t, which increments deterministically.
Asymptotic cost. Now we analyze the average cost of
accessing a block in this basic scheme. We represent the
combined cost of accessing (cid:104)π(cid:105) and Used as c(n), some
value that only depends on the number of blocks, n, but
not block size. We use B to denote the cost of accessing
a single block (this could be bandwidth, time, or energy
cost). The augmented cost, B(cid:48) = B + Θ(log2 n), includes
the additional cost of accessing the metadata containing
the block’s logical index. For an ORAM of size n, each
logical index requires log2 n bits, so it incurs Θ(log2 n)
cost to retrieve or compare an index.
Since our construction is a periodic algorithm that
performs a shufﬂe every T accesses, we obtain the
amortized per-access cost by computing the average over
T accesses. This is the cost of the shufﬂe plus the cost
of B(cid:48) for each block touched thereafter until the next
shufﬂe.
The cost of shufﬂing is approximately B(cid:48)W (n) using
a Waksman network [33]. Here, W (n) = nlog2 n− n + 1
is the number of oblivious swaps required to permute n
elements. On each access, the entire Stash, comprising
t blocks, must be scanned. Thus, the total cost of the T
accesses and one shufﬂe which constitutes a full cycle
is given by
(cid:0)B(cid:48)t + c(n)(cid:1)
T
B(cid:48)W (n) +
∑
t=1
1
≤ B(cid:48)nlog2 n +
2
(cid:18) 1
= T
T
= T F(n)
B(cid:48)T (T + 1) + T c(n)
B(cid:48)nlog2 n +
B(cid:48)(T + 1) + c(n)
1
2
(cid:19)
where F(n) is the amortized per-access cost we are after.
If reshufﬂe period T = Θ((cid:112)nlog2 n), the asymptotic
cost is F(n) = Θ(B(cid:48)(cid:112)nlog2 n), assuming the block size
is large enough to make c(n) negligible compared to B.
Concrete cost. This design is less expensive than linear
scan, even for reasonably small block sizes and for block
counts as low as four. With linear scan, the cost is nB per
223223
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:03 UTC from IEEE Xplore.  Restrictions apply. 