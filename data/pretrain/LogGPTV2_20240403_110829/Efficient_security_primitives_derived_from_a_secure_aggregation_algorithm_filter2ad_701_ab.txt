root of the tree. A graphical depiction is shown in Figure 3. In
Figure 2 this means that node G must receive all the child ver-
tices of F1, C1, A1 and R1 respectively; this corresponds to the set
{F0, E0, C0, B1, A0, D0, H0, I0}. To facilitate this veriﬁcation,
each internal node in the network topology broadcasts the set of
commitment-tree vertices it received to all the nodes in its subtree.
For example, node A would broadcast the vertices A0, B1, C1, D0
to all the vertices in the subtree rooted at A on Figure 1.
2.3.4 Veriﬁcation Conﬁrmation
Once each node has successfully performed its respective veriﬁ-
cations, they have to notify the base station of their success. Each
node performs this operation by forwarding a speciﬁc veriﬁcation
conﬁrmation message which is the message authentication code
over a speciﬁc “OK” string and a nonce N speciﬁc to the cur-
rent query, computed using the secret key shared between the node
and the base station: Mi = MACKi(N||OK). Individually for-
warding each of these conﬁrmation messages would be too costly
in terms of communication; hence the algorithm makes use of the
fact that the base station only wishes to know if all of the sensor
nodes have released their respective conﬁrmation messages. Thus
the conﬁrmation messages are aggregated using the XOR opera-
tion: each internal node in the topology waits to receive the conﬁr-
mation messages from each of its children, then computes the XOR
of all the received messages with its own conﬁrmation message and
forwards the ﬁnal result to its own parent. If all nodes successfully
veriﬁed the aggregation process, then the ﬁnal conﬁrmation value
transmitted to the base station is the XOR of all the conﬁrmation
messages, i.e., MACK1(N||OK)⊕· ··⊕MACKn(N||OK). Since
the base station has knowledge of all the secret keys used in the con-
struction of this aggregate conﬁrmation message, it can reconstruct
what it “should” expect to receive if every node did indeed suc-
cesfully perform distributed veriﬁcation. The base station can then
compare this expected value with the aggregated conﬁrmation mes-
sage that it receives from the network: if the values are the same
then it can accept the aggregation result; if not then it discards the
aggregation result.
2.4 Optimizations
In aggregation algorithms (as for most sensor network applica-
tions), we measure communication overhead by congestion, which
is deﬁned as the worst-case heaviest communication load on any
single link in the network. The reason for this metric is that for
sensor networks communication is costly because it drains battery
power, which affects node lifetimes. Algorithms with low conges-
tion tend to spread out the communication load, leading to a longer
lifetime until the ﬁrst sensor node death.
The limiting step in the congestion bound is the distributed ver-
iﬁcation phase where each sensor node i must verify the path in
the commitment-tree from each of the vertices it created to the root
vertex r. To do this, node i must collect (or recompute) all the child
vertices of each vertex that is an ancestor of each of the vertices that
node i is verifying. Thus, the height and degree of the commitment
tree affects the cost of the algorithm. Fortunately, the structure of
the commitment tree does not necessarily have to follow the shape
of the network topology. Aggregation operations can be re-ordered
such that the resultant commitment trees formed are well-balanced.
The original CPS algorithm balanced its commitment trees using a
rule which ensured that only trees of similar size could be joined
by creating a parent vertex over them. This resulted in a conges-
tion bound of O(log2 n) [3]. Frikken and Dougherty greatly im-
proved this optimization by using a more sophisticated heuristic
which ensured that all the new vertices created by a sensor node
always shared the same veriﬁcation path [7]. This improved the
congestion bound to O(log n).
Further optimizations may be possible in future work to further
reduce the commitment tree congestion overhead; the applications
described in this paper are viable independently of such optimiza-
tions.
3. FUNCTIONALITY DECOMPOSITION
In this section we extract and analyze the general properties pro-
vided to the protocol designer by the CPS algorithm.
To understand the usefulness of the CPS algorithm, we decom-
pose its four phases into three distinct functionalities. Phase 1
and 3, the commitment tree generation and distributed veriﬁca-
tion phases, correspond to the ability to efﬁciently generate com-
mitment trees and disseminate them such that each sensor node
which contributed a vertex can verify that vertex is properly in-
cluded in the commitment tree. We call this functionality the CT
(for “commitment tree”) functionality. Phase 2, the result dissemi-
nation phase, corresponds to an authenticated broadcast functional-
ity. Phase 4, the veriﬁcation conﬁrmation phase, corresponds to an
efﬁcient network-wide acknowledgement functionality. The three
functionalities are illustrated in relation to one another in Figure 4.
Figure 4: Functional decomposition of the CPS algorithm.
Dashed boxes represent phases/functionalities in the original
CPS scheme, with the Commitment Tree Generation and Dis-
tributed Veriﬁcation phases combined to form the CT function-
ality. Square lettered nodes represent sensor nodes and round
vertices represent hash tree vertices. Thick arrows represent
communication to/from the functionalities, thin arrows repre-
sent hash function inputs. The veriﬁcation path of node D is
highlighted by the grey shaded nodes; D receives all nodes out-
lined in bold.
VERIFICATION CONFIRMATION FUNCTIONALITY
Inputs: (from each sensor node i)
Conﬁrmation message: Ci
Outputs:
To Base Station:
XOR of all conﬁrmation messages: C1 ⊕ C2 ⊕ ··· ⊕ Cn
Table 1: Interface of the Veriﬁcation Conﬁrmation Functional-
ity
Note that since each of these functionalities is network-based, they
are considered untrusted functionalities, i.e., it is up to any nodes
communicating with these functionalities to perform the necessary
veriﬁcations of integrity based on the authenticating information
returned by the functionalities.
To more rigorously deﬁne these modular functionalities, we de-
ﬁne their respective interfaces (i.e., parameters, inputs and outputs)
in turn. We skip discussion of the functionality for the result dis-
semination phase: it is simply authenticated broadcast.
The veriﬁcation conﬁrmation functionality is an efﬁcient method
for collecting a set of acknowledgements; Section 2.3.4 describes
the veriﬁcation conﬁrmation phase of CPS which performs exactly
this function. Table 1 shows the interface of this functionality.
The CT (for “commitment tree”) functionality is the ability to
form and disseminate arbitarily deﬁned trees. It is derived as a gen-
CT FUNCTIONALITY
Inputs: (from each sensor node i)
Data Value xi
Computes:
Tree via the following:
Leaf vertex vi (one per node i): v(xi, i)
Internal vertex u0 with child vertices u1, . . . , uk:
u(u1, . . . , uk)
Outputs:
To Base Station: Commitment tree root vertex r
To each sensor node i: Off path vertices for vi
HT FUNCTIONALITY
Inputs: (from each sensor node i)
String or value Li
Computes:
Tree via the following:
Leaf vertex vi (one per node i): (cid:2)Li(cid:3)
Internal vertex u0 with child vertices u1, . . . , uk:
(cid:2)H[u1||··· ||uk](cid:3)
Outputs:
To Base Station: Commitment tree root vertex r
To each sensor node i: Off path vertices for vi
Table 2: Deﬁnition of the CT Functionality
Table 4: Deﬁnition of the HT Functionality
CTCP S FUNCTIONALITY
Inputs: (from each sensor node i)
Data Value xi
Computes:
Tree via the following:
Leaf vertex vi (one per node i): (cid:2)xi; i(cid:3)
Internal vertex u0 with child vertices u1, . . . , uk
containing values y1, . . . , yk respectively:
y0 =
Outputs:
To Base Station: Commitment tree root vertex r
To each sensor node i: Off path vertices for vi
(cid:4)
j=1 yj; H[y0||u1|| ···||uk]
(cid:2)
(cid:3)k
Table 3: The instance of CT implemented in CPS
eralization of the process of forming and disseminating the speciﬁc
type of commitment-tree deﬁned in the CPS algorithm. After deﬁn-
ing the general CT functionality, we will instantiate it to operate
on simple hash trees; this is the more practical HT functionality
we will use for the practical applications in subsequent sections.
The CT functionality is deﬁned as follows: consider a network
consisting of some number of nodes and a trusted base station (or
central authority). Deﬁne an untrusted functionality CT which per-
forms the following function: it queries each of the nodes in turn,
receiving from each node i a data value xi. Functionality CT then
constructs a tree. First a leaf vertex vi is created for each node i;
then CT repeatedly adds internal vertices until a tree is created over
the given leaves. The shape of the tree can be freely decided by the
algorithm implementing the CT functionality. The internal ver-
tices are computed using the ﬁxed parent vertex creation rule u(),
i.e. for each internal vertex u0 with child vertices u1, . . . , uk, we
compute u0 = u(u1, . . . , uk). Once the tree has been constructed,
functionality CT reports the root r of the hash tree to the base sta-
tion. Then, for each node in the network, CT provides enough
information for the node to verify the inclusion of its provided leaf
values in the tree; speciﬁcally, each node i receives the siblings of
all the vertices in the commitment tree from their leaf vertex vi to
the root vertex r. The CT functionality is summarized in Table 2.
Note that since the nodes do not trust the functionality CT , typ-
ically they need to have some prior knowledge of what root vertex
value to expect (i.e., r) when performing distributed veriﬁcation.
One method of providing this knowledge is for the base station to
disseminate the value r with an authenticated broadcast (i.e., via the
result dissemination phase of CPS ). In certain applications (e.g.,
Section 5) the value r is already known prior to the invocation of
the CT functionality, hence authenticated broadcast is not neces-
sary.
For reference, the speciﬁc parameterization of the CT function-
ality as used in the (simpliﬁed) CPS algorithm as described in Sec-
tion 2 is shown in Table 3. We make the following observation:
Observation 1 The CPS algorithm contains an O(log n) - conges-
tion implementation of the general CT functionality.
This is because the parameterization of the CT functionality only
changes how the commitment tree vertices are deﬁned; for any such
deﬁnition we can replace the standard deﬁnitions of CTCP S di-
rectly without affecting the operation of the algorithm.
In subsequent applications, we move away from the function-
computation aspect of the CT functionality and use it purely for its
commitment properties. In other words, we use a version of CT
that does not perform data aggregation computations and simply
computes a conventional hash tree instead of a commitment tree.
We call the CT functionality parameterized in this fashion, the HT
(hash-tree) functionality.
As mentioned, the commitment tree generation and distributed
veriﬁcation phases of the CPS algorithm can realize the HT func-
tionality simply by changing the deﬁnition of the commitment-tree
vertices to the ones in Table 4. All the other operations of Sec-
tion 2.3.1 and 2.3.3 remain unchanged; in particular the optimiza-
tions of Section 2.4 still apply; the hash trees created by this real-
ization of the HT functionality are binary trees of O(log n) height,
and the cost of distributed veriﬁcation is O(log n) congestion.
Observation 2 Given the HT functionality, the network can efﬁ-
ciently generate and disseminate hash trees.
In other words, HT functionality gives us the ability to construct
protocols which use network-wide authenticated hash trees with
very little overhead. The most common use of a hash tree is as
a batched signature by the base station over a set of values: this
functionality will drive most of the applications for the subsequent
sections.
3.1 CPS Without Authenticated Broadcast
Our decomposition of the CPS algorithm into four phases shows
that the authenticated broadcast of Phase 2 is not intrinsically part
of the CT (or HT ) functionality of Phase 1 and 3. Speciﬁcally,
consider the removal of the authenticity property from Phase 2,
i.e., by using normal broadcast instead of authenticated broadcast
to disseminate the root r of the commitment tree. Without authen-
tication, the distributed veriﬁcation of Phase 3 may be performed
on a falsiﬁed root hash value value r(cid:4) (cid:5)= r. However, as long as the
protocol eventually aborts (instead of accepting) on the injection of
a falsiﬁed root hash value, the correctness of the overall algorithm
remains unchanged. More precisely, instead of using authenticated
broadcast to provide integrity for the root hash value in Phase 2,
we can defer this check to later phases. In particular, we can easily
make the success of Phase 4 dependent on each node receiving the
correct root hash value r. This yields a version of CPS that does
not require an authenticated broadcast primitive. Subsequently, in
Section 5 we show that in some applications it is possible to cause
Phase 3 to abort if any legitimate node is given a falsiﬁed root hash
value: this itself yields an authenticated broadcast algorithm.
The modiﬁcation to the CPS algorithm to remove the need for
authenticated broadcast involves modifying the “veriﬁcation suc-
cessful” message in the ﬁnal phase of the algorithm to include data
about the root vertex that the veriﬁcation process was computed
against. Hence, if the wrong root vertex was used, then the “veri-
ﬁcation successful” message simply becomes invalid and the base
station will (correctly) discard the aggregation result.
The speciﬁc modiﬁcation is as follows. After the base station
receives (or computes) the root vertex of the commitment tree, it
disseminates the value using conventional (unauthenticated) broad-
cast. The sensor nodes then carry out the distributed veriﬁcation
phase as usual against the (possibly invalid) root vertex value that
they receive.
In veriﬁcation conﬁrmation phase, each node then
replies with an authentication code that is efﬁciently aggregated
using XOR and delivered to the base station. In the original proto-
col, each node i releases an authentication code MACKi(N||OK)
where Ki is the key that i shares with the base station and N is a
nonce associated with the aggregation query. We modify this mes-
sage to also include the value of the root vertex that was used in the
veriﬁcation, i.e. node i will reply with MACKi(N||OK||r) where
r is the root vertex that the successful veriﬁcation was computed
against. The rest of the protocol continues unchanged, i.e. the base
station collects the XOR of all the authentication codes and com-
pares it with the value that it expects.
An intuition for the correctness of the scheme is as follows.
The reason why r needs to be authenticated in the original pro-
tocol was to prevent the adversary from injecting some arbitrary
(cid:5)= r which may cause certain nodes to fail to detect that their
r(cid:4)
values were not correctly incorporated in the commitment tree sent
to the base station; in other words, these nodes could be fed an
alternative, false commitment tree with root r(cid:4)
which contained
their input values but which has no relation with the actual commit-
ment tree reported to the base station. The modiﬁed authentication
code message removes the ability to perform this attack since any
node verifying against the wrong root value r(cid:4)
will also (with high
probability under standard MAC unforgeability assumptions) re-
lease the wrong authentication code reply MACKi(N||OK||r) (cid:5)=
MACKi(N||OK||r(cid:4)
). This will cause the base station to reject the
(possibly incorrect) aggregation result.
4. ASSUMPTIONS
We are now ready to start deriving applications from the HT
functionality. First, we state the operating assumptions of the new
protocols.
• Preloaded Keys. We require only that each sensor node
share a unique symmetric key with the trusted base station.
• Limited Resistance to Denial-of-Service (DoS) Attacks.
In our protocols we will mainly be concerned with data in-
tegrity rather than availability. Our deﬁnition of correctness
is based on a tight deﬁnition of soundness and a looser in-