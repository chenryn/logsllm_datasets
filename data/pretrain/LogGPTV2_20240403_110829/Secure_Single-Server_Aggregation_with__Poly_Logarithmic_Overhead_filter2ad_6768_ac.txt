shares from i’s corrupted neighbors. Formally, we define the event
E1 as a predicate on a set C and a pair (G, t) that is 1 iff the “good”
property holds.1
Definition 3.1 (Not too many corrupt neighbors). Let C ⊂ [n] be
such that |C| ≤ γn. We define event E1 as
E1(C, G, t) = 1 iff ∀i ∈ [n] \ C : |NG(i) ∩ C|  |C|, where |C| ≤ γ n. However this implies that k ≥ t = O(n), and results in
linear overhead.
Note that the above event trivially holds for a complete graph G
(and reasonable parameters γ and δ) and any sets C, D, as in that
case k = n − 1 > (γ + δ)n.
Perhaps surprisingly, we will prove that events E1 and E2 cap-
ture all possible ways in which security could be broken (assuming
perfect cryptographic primitives) due to the choice of communica-
tion network. More concretely, we will show the following: Con-
sider a graph generation algorithm GenerateGraph such that for
any sets C, D of appropriate sizes, a pair (G, t) generated using
GenerateGraph will satisfy E1(C, G, t) ∧ E2(C, D, G) = 1 except
for negligible probability. Then, GenerateGraph can be used in
Algorithm 2, and the result will be a secure protocol.
Finally, we still need one more property that GenerateGraph
must satisfy to ensure correctness. Note that if after removing
dropouts some client does not have at least t neighbors then the
server can’t recover the final sum.
Definition 3.3 (Enough surviving neighbors for reconstruction). Let
D ⊂ [n] such that |D| ≤ δn. We define event E3 as
E3(D, G, t) = 1 iff ∀i ∈ [n] : |NG(i) ∩ ([n] \ D)| ≥ t
3.2 Generating “Good” Graphs
This section characterizes “good” graph generation algorithms as
those that generate graphs for which events E1, E2, E3 hold with
probability parameterized by a statistical security parameter σ (for
E1 and E2) and a correctness parameter η (for E3).
Definition 3.4. Let D be a distribution over pairs (G, t). We say
that D is (σ , η)-good if, for all sets C ⊂ [n] and D ⊂ [n] such that
|C| ≤ γn and |D| ≤ δn, we have that
(1) Pr[E1(C, G′, t′) ∧ E2(C, D, G′, t′) = 1 | (G′, t′) ← D] >
(2) Pr[E3(D, G′, t′) = 1 | (G′, t′) ← D] > 1 − 2−η
Analogously, we say that a graph generation algorithm is (σ , η)-
good if it implements a (σ , η)-good distribution.
1 − 2−σ
In Section 3.5, we describe a concrete (randomized) (σ , η)-good
graph generation algorithm.
3.3 Correctness and Security
In this section, we state our correctness and security theorems,
whose proofs are provided in Appendix B of our full paper [5]. We
note that the proof of security uses a standard simulation-based
approach [20, 28] similar to the one by Bonawitz et al. [8]. It is
important to remark that this formulation does not in general imply
security, in the formal sense of [20, 28], in the weaker threat model
where the adversary only corrupts a set of clients and the server is
honest. This is however easy to see for our protocol: note that the
messages sent to the clients are all functions of the other clients’
randomness alone, and in particular do not depend at all on any
inputs. We discuss further the honest server case in the context of
the semi-malicious threat model in Section 4.6.
Theorem 3.5 (Correctness). Let Π be Algorithm 2 instantiated
with a (σ , η)-good graph generation algorithm GenerateGraph. Con-
sider an execution of Π with inputs X = ( (cid:174)xi)i∈[n]. If |A′
3| ≥ (1 − δ)n,
i.e., less than a fraction δ of the clients dropout, then the server does
not abort and obtains (cid:174)z =
2 (cid:174)xi with probability 1 − 2−η.
A′
Session 4D: Distributed Protocols CCS '20, November 9–13, 2020, Virtual Event, USA1257and all sets of corrupted clients C with |C| ≤ γn, denote (cid:174)z =
Theorem 3.6 (Security). Let σ , η, λ be integer parameters. Let
Π be an instantiation of Algorithm 2 with a (σ , η)-good graph gener-
ation algorithm GenerateGraph, a IND-CPA secure authenticated
encryption scheme, and a λ-secure key agreement protocol. There ex-
ists a PPT simulator Sim such that for all k, all sets of surviving clients
A1, A2, A′
2, A3 as defined in Algorithm 2, all inputs X = ( (cid:174)xi)i∈[n],
2 (cid:174)xi ,
the output of Sim is perfectly indistinguishable from the joint view
of the server and the corrupted clients RealC(A1, A2, A′
2, A3) in that
execution, i.e., RealC(A1, A2, A′
2, A3).
3.4 Performance Analysis
We report the communication and computation costs for the client
and server when k = O(log n). We recall that we assume that basic
operations and representation of elements in X are O(1).
2, A3) ≈σ,λ Sim((cid:174)z, C, A1, A2, A′
i∈A′
Client computation: O(log2
n + l log n). Each client computation
can be broken up as 2k key agreements and k encryptions (O(k)
complexity), creating twice t-out-of-k Shamir secret shares (O(k
2)
complexity), generating (cid:174)mi, j for all neighbors j (O(kl) complexity).
Client communication: O(log n + l). Each client performs 2k key
agreements (O(k) messages), sends 2k encrypted shares (O(k) mes-
sages), sends a masked input (O(l) complexity), reveals up to 2k
shares (O(k) messages).
Server computation: O(n(log2
n + l log n)). The server computa-
tion can be broken up as reconstructing t-out-of-k Shamir secrets
for each client (O(n · k
2) complexity), generating values (cid:174)mi, j for all
(dropped out) neighbors j of each client i (O(nkl) complexity).
Server communication: O(n(log n + l)). The server receives or
sends O(log n + l) to each client.
3.5 Our Random Graph Constructions
Since Bonawitz et al. [8] uses a complete graph, all of the events
E1(C, G, t), E2(C, D, G) and E3(D, G, t) are deterministically equal
to 1. That is to say that the complete graph is (σ , η)-good for any
σ and η. In this section we will describe how to construct a much
sparser random graph, which is still (σ , η)-good for reasonable σ
and η.
Our randomized construction is shown is Algorithm 1, and con-
sists of uniformly renaming the nodes of a graph known as a Harary
graph with n nodes and degree k. This graph, which we denote
Harary(n, k), has vertices V = [n] and an edge between two dis-
tinct vertices i and j if and only if j − i modulo n is ≤ (k + 1)/2
or ≥ n − k/2. Roughly speaking, you can think of this as writing
the nodes of the graph in a circle and putting edges between those
within distance k/2 of each other.
Our whole problem now reduces to defining exactly the function
ComputeDegreeAndThreshold such that the values of k and
t it returns result in GenerateGraph being (σ , η)-good. This in
turn leads to a secure protocol, as we saw in the previous section.
More concretely, we will see in this section that choosing k ≥
O(log n + σ + η) is enough to achieve the (σ , η)-goodness property.
Consider any graph generation algorithm G constructed by sam-
pling k neighbors uniformly and without replacement from the set
Algorithm 1: GenerateGraph
Public Parameters: Max. fraction of corrupt nodes γ , max.
fraction of dropout nodes δ.
correctness parameter η.
Input: Number of nodes n, statistical security parameter σ ,
Output: A triple (G, t, k)
(k, t) = ComputeDegreeAndThreshold(n, γ , δ, σ, η)
Let H = Harary(n, k)
Sample a random permutation π : [n] (cid:55)→ [n]
Let G be the set of edges {(π(i), π(j)) | (i, j) ∈ H }
return (G, t, k)
of remaining n − 1 clients (as done in Algorithm 1). This general
property is all we need to argue about events E1, E3 in the defini-
tions of (σ , η)-good, so we don’t need to get into the specifics of
Harary graphs yet.
E1: Not too many corrupt neighbors. Let us first focus on the
event E1(C, G, t), which holds if every client i has fewer than t
corrupt neighbors in NG(i) (Definition 3.1). Let Xi be the random
variable counting the number of malicious neighbors of a user i, and
note that Xi ∼ HyperGeom(n− 1, γn, k), i.e. Xi is hypergeometrically
distributed. Thus by a union bound across all clients we have that
Pr[E1(C, G, t) = 0] ≤ nPr[Xi ≥ t] = n(1 − cdfXi(t − 1)).
E3: Not too many neighbors drop out. Let us now turn our atten-
tion towards correctness: if we set t too large then the server will
fail to recover enough shares of a required mask and abort, and that
would result in a wasted computation. The intuition behind this
event for G is analogous to the case of E1, as if Yi is the number
of surviving (not dropped out) neighbors of the ith user we have
that Yi ∼ HyperGeom(n − 1,(1 − δ)n, k), thanks again to the fact
that G is such that the k neighbors of i are randomly sampled from
[n] \ {i}. Hence, again by a union bound across clients, we have
that Pr[E3(C, G, t) = 0] ≤ nPr[Yi ≤ t] = n(cdfYi(t)).
Hypergeometrics (like Binomials) are concentrated around their
mean and have sub-gaussian tails. This means that Pr[Xi ≥ t]
decreases exponentially fast as t gets away from E[Xi] = γn/(n−1);
thus it is possible to make both of the above probabilities very small.
The Security/Correctness tradeoff. To gain additional intuition,
let us now discuss the interaction between E1 and E3, as they cor-
respond to the tension between correctness and security in out
protocol: For a fixed k, one should be setting t ∈ (0, k) accord-
ing to Xi for security, while simultaneously satisfying correctness
with respect to Yi. Large t achieves results in better security (be-
cause the probability of E1 not holding decreases, while smaller
t helps correctness by reducing the failure probability associated
to E3). Figure 1 visually illustrates the situation by showing the
probability mass function of both Xi and Yi for n = 104, k = 200,
γ = 1/5, δ = 1/10, and a choice of threshold t = 100 that gives
Pr[Xi ≥ t] 
n−1)2 then
Pr[E1(C, G, t) = 0] ≤ 2−σ1.
Let us now turn our attention towards correctness. Maybe not
surprisingly at this point, it turns out that k > O(η + log n), with a
small constant depending on the dropout rate δ is enough to ensure
a failure probability bounded by 2−η, as we show in the next lemma.
Lemma 3.9. Let G be such that, for all i ∈ [n], G(i) is a uniform
(cid:17)2 then
sample of size k from [n] \ {i}. Let D ⊂ [n] such that |D| ≤ δn
and let t = βk. If k ≥ c(η log 2 + log n) and c >
Pr[E3(D, G, t) = 0] ≤ 2−η.
2(cid:16) n(1−δ)
n−1 −β
1
It is important to remark that our previous two lemmas did not
rely entirely on our Harary graph construction. In fact any algo-
rithm that results in Xi and Yi being concentrated would work.
These include Erdős-Rényi graphs, as well as a distributed con-
struction where every client samples k neighbors at random (as
done in the malicious version of our protocol presented in the next
section). However, as discussed above to address our remaining
property E2(C, D, G) we will heavily leverage the Harary graph
based construction, as it results in an efficient and simple solution.
This is done in the proof of the following theorem that ties this
section together.
Theorem 3.10.
n−1 + δ < 1.
The distribution D over pairs (G, t) implemented by Algorithm 1 is
(σ , η)-good, as long as β = t/k satisfies γ n
Let γ , δ ∈ [0, 1] be such that γ n
n−1 < β < (1 − δ), and
k ≥ max(cid:169)(cid:173)(cid:173)(cid:171)((σ + 1) log 2 + log n)
with c = min(cid:0)2(β − 2γ)2
,− log(γ + δ)(cid:1).
c
+ 1,
2(cid:16) n(1−δ)
η log 2 + log n
n−1 − β
(cid:17)2
(cid:170)(cid:174)(cid:174)(cid:172)
As an example consider the situation in which γ = δ = 1/5 and
take β = 1/2 then we get security and correctness with n = 106,