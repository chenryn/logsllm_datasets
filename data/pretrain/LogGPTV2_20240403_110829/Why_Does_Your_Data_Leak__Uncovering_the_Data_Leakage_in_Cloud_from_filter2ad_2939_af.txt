critical system capabilities. Correspondingly, a number of tools
such as CHEX [32] and Harehunter [21] have been developed
to identify them.
Most recently, there were also a number of efforts to iden-
tify server side vulnerabilities of mobile apps. For instance,
there are password brute-forcing attacks [47] if a server fails
to track the number of user login attempts, shopping for free
if a merchant server does not validate the payment informa-
tion [40], SQL injection and server API misuse vulnerabilities
if the servers do not check the requests from the apps [46],
[49], and the use of insecure user tokens (e.g., no randomness)
in server authorization [48]. There are also corresponding tools
such as AutoForge [47] and AuthScope [48] to identify them.
Misconﬁguration Vulnerability Detection. Complex software
systems such as the mBaaS cloud are difﬁcult to conﬁgure and
manage, and consequently various conﬁguration errors can be
introduced. Incorrect access control conﬁguration, such as the
permission misconﬁguration that LeakScope aims to discover
will clearly lead to security vulnerabilities. Unlike the key
misuse vulnerabilities, which are caused by mistakes from the
app developers, permission misconﬁgurations are caused by
system administrators.
To detect permission misconﬁguration in access control
systems (e.g., ﬁrewalls), FIREMAN [41] uses symbolic model
checking of the ﬁrewall conﬁgurations to infer policy viola-
tions and inconsistencies. In typical application systems (e.g.,
healthcare), Bauer et al. [25] have applied association rule
mining to the access control logs to infer the intended policies
and the misconﬁgurations. In an enterprise network, Baaz [26]
infers the permission misconﬁguration by monitoring updates
to the access control metadata and looking at inconsistency
among peers.
There are also numerous efforts to detect misconﬁgurations
in software systems with conﬁguration testing. ConfErr [31] is
a blackbox conﬁguration testing tool, which exposes conﬁgu-
ration errors by injecting spelling errors, structural errors, and
semantic errors. ConfAid [22] is a white box conﬁguration di-
agnosis tool, which explores the control and data ﬂows related
to the erroneous behavior to speciﬁc tokens in conﬁguration
ﬁles. SPEX [39] is also a white-box conﬁguration testing
tool, which generates conﬁguration errors based on how the
conﬁguration parameter is read and used.
Being a blackbox testing tool, LeakScope only explores the
differences in the server response messages to infer whether
a cloud server has conﬁgured the user permissions correctly.
We believe cloud providers can certainly go beyond blackbox
testing, and instead they can develop whitebox approaches to
proactively detect permission misconﬁgurations.
IX. CONCLUSION
We have studied the problem of why there have been
so many recent private data leaks from the cloud, and we
discovered that the misuse of various keys in mobile app
authentication and misconﬁguration of user permissions in au-
thorization are the two root causes that can lead to the massive
data leaks in the cloud. We have designed and implemented
LeakScope to automatically identify the cloud services that
can contain data leakage vulnerabilities from mobile apps. Our
evaluation with over 1.6 million mobile apps from the Google
Play Store has uncovered tens of thousands of vulnerable
cloud services including those from Google, Amazon, and
Microsoft. We have made responsible disclosure to each of
the vulnerable service providers, and they have all conﬁrmed
the vulnerabilities we identiﬁed and are actively working with
the mobile app developers to patch their vulnerable services.
1308
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
ACKNOWLEDGMENTS
We are grateful to the anonymous reviewers for their in-
valuable feedbacks. We also would like to thank Erick Bauman
and Atanas Rountev for their helpful comments on an early
draft of the paper. This work was supported in part by AFOSR
under grant FA9550-14-1-0119, and NSF awards 1718084,
1834213, and 1834215. Any opinions, ﬁndings, conclusions,
or recommendations expressed are those of the authors and not
necessarily of the AFOSR and NSF.
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
REFERENCES
“Authenticate with ﬁrebase using password-based accounts on android,”
https://ﬁrebase.google.com/docs/auth/android/password-auth.
“azure-storage-android,” http://azure.github.io/azure-storage-android/.
“Best practices for securely using api keys,” https://support.google.com/
cloud/answer/6310037.
“Create a platform endpoint and manage device tokens,” http://docs.
aws.amazon.com/sns/latest/dg/mobile-platform-endpoint.html.
“Dexguard
dexguard.
android
obfuscator,”
https://www.guardsquare.com/
“dexlib2,” https://github.com/JesusFreke/smali/tree/master/dexlib2.
“Dexprotector android obfuscator,” https://dexprotector.com.
on
“Disclaimer
//github.com/Azure/azure-storage-android/commit/
d90c3a49312e77c2cc911c8f55a37be9947454e4.
use
the
of
account
key,”
https:
“Head
RESTBucketHEAD.html.
bucket,”
http://docs.aws.amazon.com/AmazonS3/latest/API/
“Manage users
android/manage-users.
in ﬁrebase,” https://ﬁrebase.google.com/docs/auth/
“Mobile backend as a service,” https://en.wikipedia.org/wiki/Mobile_
backend_as_a_service.
“Proguard java obfuscator,” https://http://proguard.sourceforge.net.
“Read and write data on android,” https://ﬁrebase.google.com/docs/
database/android/read-and-write#updating_or_deleting_data.
“Scrapy | a fast and powerful scraping and web crawling framework,”
https://scrapy.org/.
“Shrink your code and resources,” https://developer.android.com/studio/
build/shrink-code.html.
“Soot - a framework for analyzing and transforming java and android
applications,” http://sable.github.io/soot/.
“Upload ﬁles on android,” https://ﬁrebase.google.com/docs/storage/
android/upload-ﬁles?authuser=0.
“Using the aws sdk for java with amazon sns,” http://docs.aws.amazon.
com/sns/latest/dg/using-awssdkjava.html.
is an interface?” https://docs.oracle.com/javase/tutorial/java/
“What
concepts/interface.html.
“The statistics portal: Mobile app usage,” https://www.statista.com/
topics/1002/mobile-app-usage/, December 2017.
[21] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou,
W. Du, and M. Grace, “Hare hunting in the wild android: A study on
the threat of hanging attribute references,” in Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2015, pp. 1248–1259.
[22] M. Attariyan and J. Flinn, “Automating conﬁguration troubleshooting
with dynamic information ﬂow analysis,” in Proceedings of the 9th
USENIX Conference on Operating Systems Design and Implementation,
ser. OSDI’10, Vancouver, BC, Canada, 2010, pp. 237–250.
[23] M. Backes, S. Bugiel, and E. Derr, “Reliable third-party library detec-
tion in android and its security applications,” in Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2016, pp. 356–367.
[24] G. Balakrishnan and T. Reps, “Analyzing memory accesses in x86
Springer, 2004, pp. 2732–
executables,” in Compiler Construction.
2733.
[25] L. Bauer, S. Garriss, and M. K. Reiter, “Detecting and resolving policy
misconﬁgurations in access-control systems,” ACM Trans. Inf. Syst.
Secur., vol. 14, no. 1, pp. 2:1–2:28, Jun. 2011.
[26] T. Das, R. Bhagwan, and P. Naldurg, “Baaz: A system for detecting
access control misconﬁgurations,” in Proceedings of the 19th USENIX
Conference on Security, ser. USENIX Security’10, Washington, DC,
2010.
[27] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “Pios: Detecting privacy
leaks in ios applications,” in NDSS, 2011.
[28] W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. McDaniel, and
A. Sheth, “TaintDroid: an information-ﬂow tracking system for realtime
privacy monitoring on smartphones,” in OSDI, 2010.
[29] C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Androidleaks: auto-
matically detecting potential privacy leaks in android applications on a
large scale,” in Trust, 2012.
[30] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri, “Code injection
attacks on html5-based mobile apps: Characterization, detection and
mitigation,” in Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security, ser. CCS ’14. New York,
NY, USA: ACM, 2014, pp. 66–77.
[31] L. Keller, P. Upadhyaya, and G. Candea, “Conferr: A tool for assessing
resilience to human conﬁguration errors,” in Dependable Systems and
Networks With FTCS and DCC, 2008. DSN 2008. IEEE International
Conference on.
IEEE, 2008, pp. 157–166.
[32] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically vetting
android apps for component hijacking vulnerabilities,” in Proceedings of
the 2012 ACM conference on Computer and communications security.
ACM, 2012, pp. 229–240.
[33] P. Muncaster, “Verizon Hit by Another Amazon S3 Leak,” https://www.
infosecurity-magazine.com/news/verizon-hit-by-another-amazon-s3/,
September 2017.
[34] M. OLSON, “Cloud computing trends to watch in 2017,” https://
apiumhub.com/tech-blog-barcelona/cloud-computing/, April 2017.
[35] M. C. Rinard, C. Cadar, D. Dumitran, D. M. Roy, T. Leu, and W. S.
Beebee, “Enhancing server availability and security through failure-
oblivious computing.” in OSDI, vol. 4, 2004, pp. 21–21.
[36] T.
Spring,
“Insecure
backend
43tb
leaking
insecure-backend-databases-blamed-for-leaking-43tb-of-app-data/
126021/, June 2017.
data,”
app
of
databases
blamed
for
https://threatpost.com/
[37] M. Weiser, “Program slicing,” in Proceedings of the 5th international
IEEE Press, 1981, pp. 439–449.
conference on Software engineering.
[38]
J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt, “Automatic diagnosis
and response to memory corruption vulnerabilities,” in Proceedings of
the 12th ACM conference on Computer and communications security.
ACM, 2005, pp. 223–234.
[39] T. Xu, J. Zhang, P. Huang, J. Zheng, T. Sheng, D. Yuan, Y. Zhou,
and S. Pasupathy, “Do not blame users for misconﬁgurations,” in Pro-
ceedings of the Twenty-Fourth ACM Symposium on Operating Systems
Principles, ser. SOSP ’13, Farminton, Pennsylvania, 2013, pp. 244–259.
[40] W. Yang, Y. Zhang, J. Li, H. Liu, Q. Wang, Y. Zhang, and D. Gu,
“Show me the money! ﬁnding ﬂawed implementations of third-party
in-app payment in android apps,” in Proceedings of the Annual Network
& Distributed System Security Symposium (NDSS), 2017.
[41] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and P. Mohapatra,
“Fireman: A toolkit for ﬁrewall modeling and analysis,” in Proceedings
of the 2006 IEEE Symposium on Security and Privacy, ser. SP’06, 2006,
pp. 199–213.
[42] S. Yue, W. Feng, J. Ma, Y. Jiang, X. Tao, C. Xu, and J. Lu, “Repdroid:
An automated tool for android application repackaging detection,” in
Proceedings of the 25th International Conference on Program Compre-
hension, ser. ICPC ’17. Piscataway, NJ, USA: IEEE Press, 2017, pp.
132–142.
[43] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu, “Viewdroid: To-
wards obfuscation-resilient mobile application repackaging detection,”
in Proceedings of the 2014 ACM conference on Security and privacy
in wireless & mobile networks. ACM, 2014, pp. 25–36.
[44] M. Zhang and H. Yin,
“Appsealer: Automatic generation of
vulnerability-speciﬁc patches for preventing component hijacking at-
tacks in android applications.” in NDSS, 2014.
[45] W. Zhou, Y. Zhou, X. Jiang, and P. Ning, “Detecting repackaged
smartphone applications in third-party android marketplaces,” in ACM
1309
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply. 
Cloud
Service
AWS
API
1*
1.1
1.2
1.3
1.4
1.5
1.6
1.7
2*
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
2.10
2.11
2.12
2.13
2.14
2.15
2.16
2.17
Deﬁnition
TransferUtility: TransferObserver downloadUpload(String, String, File)
TransferUtility: TransferObserver download(String, String, File)
TransferUtility: TransferObserver download(String, String, File, TransferListener)
TransferUtility: TransferObserver upload(String, String, File)
TransferUtility: TransferObserver upload(String, String, File, ObjectMetadata)
TransferUtility: TransferObserver upload(String, String, File, CannedAccessControlList)
TransferUtility: TransferObserver upload(String, String, ObjectMetadata, CannedAccessControlList)
TransferUtility: TransferObserver upload(String, String, ObjectMetadata, CannedAccessControlList, TransferListener)
AmazonS3Client: void S3objectAccess(String, String, ...)
AmazonS3Client: void deleteObject(String, String)
AmazonS3Client: void deleteVersion(String, String, String)
AmazonS3Client: boolean doesObjectExist(String, String)
AmazonS3Client: String getBucketLocation(String)
AmazonS3Client: S3Object getObject(String, String)
AmazonS3Client: String getObjectAsString(String, String)
AmazonS3Client: ObjectMetadata getObjectMetadata(String, String)
AmazonS3Client: String getResourceUrl(String, String)
AmazonS3Client: URL getUrl(String, String)
AmazonS3Client: ObjectListing listObjects(String)
AmazonS3Client: ObjectListing listObjects(String, String)
AmazonS3Client: ListObjectsV2Result listObjectsV2(String)
AmazonS3Client: ListObjectsV2Result listObjectsV2(String, String)
AmazonS3Client: PutObjectResult putObject(String, String, File)
AmazonS3Client: PutObjectResult putObject(String, String, InputStream, ObjectMetadata)
AmazonS3Client: PutObjectResult putObject(String, String, String)
AmazonS3Client: void restoreObject(String, String, int)
Table IX: Speciﬁc Targeted mBaaS Cloud APIs of Amazon AWS
Indexes of The String
Parameters of Our Interest
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
conference on Data and Application Security and Privacy. ACM,
2012, pp. 317–326.
[46] C. Zuo and Z. Lin, “Exposing server urls of mobile apps with selective
the 26th World Wide Web
symbolic execution,” in Proceedings of
Conference, Perth, Australia, April 2017.
[47] C. Zuo, W. Wang, R. Wang, and Z. Lin, “Automatic forgery of cryp-
tographically consistent messages to identify security vulnerabilities
in mobile services,” in Proceedings of the 21st Annual Network and
Distributed System Security Symposium (NDSS’16), San Diego, CA,
February 2016.
[48] C. Zuo, Q. Zhao, and Z. Lin, “Authscope: Towards automatic discovery
of vulnerable authorizations in online services,” in Proceedings of the
24th ACM Conference on Computer and Communications Security
(CCS’17), Dallas, TX, November 2017.
[49]
J. Chen, X. Cui, Z. Zhao, J. Liang, and S. Guo, “Toward discovering
and exploiting private server-side web apis,” in Web Services (ICWS),
2016 IEEE International Conference, 2016.
APPENDIX
In Table III, we could not report the concrete API deﬁni-
tions of two sets of APIs, and instead we just used 1* and 2*
to denote them due to the space limit. The concrete deﬁnition
of these two sets of APIs are described in Table IX. We can see
that there are 7 APIs in 1* and 17 APIs in 2*. We are interested
in all of the ﬁrst parameters, namely the bucketName as
reported in Table V.
1310
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:50 UTC from IEEE Xplore.  Restrictions apply.