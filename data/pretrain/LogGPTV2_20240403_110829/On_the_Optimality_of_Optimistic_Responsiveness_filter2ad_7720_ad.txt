CC′ > (C3/4
v (Bk),⊥) such that tip(CC′) does not extend Bk. Thus,
the highest ranked chain certificate CC in view v must have tip(CC)
extend Bk. Replica r sends CC when it quits view v after time t.
Let t′ be the time in which replica r′ enters view v + 1 (with
t′ > t +∆). Replica r must have received a blame certificate between
time t and t′−∆ and sent a quit-view message containing CC which
arrives at replica r′ at time ≤ t′. Hence, all honest replicas receive
CC before entering view v + 1.
□
Claim 11. If a block Bk is directly committed in view v at time t
using the synchronous commit rule, then all honest replicas receive
Cv(Bk) before entering view v + 1.
Proof. We will prove that if a block Bk is directly committed in view
v at time t using the synchronous commit rule, then (i) all honest
replicas are in view v at time t − ∆, (ii) all honest replicas vote
for Bk at time ≤ t − ∆, and (iii) all honest replicas receive Cv(Bk)
before entering view v + 1. Part (iii) is the desired claim.
Suppose honest replica r synchronously commits Bk at time
t in view v. It votes for block Bk at time t − 2∆. Thus, replica r
entered view v at time ≤ t − 2∆. Due to the 2∆ wait before sending
a status message, replica r must have sent a blame certificate or
equivocating blocks at time ≤ t − 4∆ which arrives all honest
replicas at time ≤ t − 3∆. Hence, all honest replicas enter view v at
time ≤ t − ∆ (again due to 2∆ wait in the status step). Also, observe
that no honest replica has quit view v at time ≤ t − ∆. Otherwise,
replica r hears of blame certificate or equivocation at time ≤ t. This
proves part (i).
Replica r received a proposal for Bk which contains Cv(Bk−1)
at time t − 2∆. Thus, replica r’s vote and forwarded proposal for
Bk arrives all honest replicas by time t − ∆. No honest replica has
voted for an equivocating block at time ≤ t − ∆; otherwise replica r
would have received an equivocation at time ≤ t. Thus, all honest
replicas will vote for Bk at time ≤ t − ∆. This proves part (ii).
The votes from all honest replicas will arrive at all honest replicas
by time ≤ t. By part(i) of the claim and 2∆ wait in the status step,
honest replicas do not enter view v + 1 at time ≤ t + ∆. Thus, all
honest replicas receive Cv(Bk) before entering view v + 1.
□
Lemma 12. If an honest replica directly commits a block Bk in view
v, then: (i) all honest replicas have lockv +1 such that tip(lockv +1)
extends Bk , (ii) for any chain certificate CC′ that the adversary
can create and any honest lock lockv +1, either CC′  (Cv(Bk),⊥) and CC′
equivocates Bk. Similarly, If Bk is committed using the synchronous
commit rule, then by Claim 11, all honest replicas receive Cv(Bk)
before entering view v + 1 and by Claim 9, there doesn’t exists a
view v certificate that equivocates Bk. Since, honest replicas lock
on highest ranked chain certificate, tip(lockv +1) must extend Bk.
By similar argument, any CC′ that an adversary creates either has
CC′  v block
certificate, then Bk′ extends Bk . Moreover, all honest replicas have
lockv′ such that tip(lockv +1) extends Bk .
Proof. The proof is by induction on views v′ > v. For a view v′, we
prove that if Cv′(tip(lock′)) exists then it must extend Bk. A simple
induction shows that all later block certificates must also extend
tip(lock′), this follows directly from the vote rule in Figure 1 step 2.
For the base case, where v′ = v +1, the proof that Cv′(tip(lock′))
extends Bk follows from Lemma 12 because the only way such a
block can be certified is some honest votes for it. However, all honest
are locked on a block that extends Bk and a chain certificate with
a higher rank for an equivocating block does not exist. Thus, no
honest replica will first vote (Figure 2 step iii)) for a block that does
not extend Bk. The second part follows directly from Lemma 12.
Given that the statement is true for all views below v′, the proof
that Cv′(tip(lock′)) extends Bk follows from the induction hypoth-
esis because the only way such a block can be certified is if some
honest votes for it. An honest party with a lock lock will vote only
if tip(lockv′) has a valid block certificate and lock ≥ lockv′. Due to
Lemma 12 and the induction hypothesis on all block certificates of
view v  0, if fewer than p proposals trigger r’s votes in (3p + 4)∆ time in view v, broadcast ⟨blame, v⟩r .
- Quit view on f + 1 blame messages. Upon gathering f + 1 distinct ⟨blame, v⟩r messages, broadcast them, abort all view v timers,
and quit view v.
- Quit view on detecting equivocation. If leader equivocation is detected, broadcast the equivocating proposals signed by L, abort all
view v timers, and quit view v.
Figure 3: Steady state protocol for optimal optimistic responsiveness with ∆-synchronous latency and n-sized quorum.
v (Bk) in view v, commit Bk and all its ancestors immediately. Stop
v (Bk) in view v, commit Bk and all its ancestors immediately. Notify
v (Bk).
has rank equal to or higher than its own locked block. Once replica
r sends an ack, it starts a vote-timerv,k initialized to ∆ time and
starts counting down. Replica r also forwards the received proposal.
Vote. When vote-timerv,k for block Bk expires, if replica r hasn’t
heard of any equivocation in view v, it broadcasts a vote ⟨vote, Bk , v⟩.
Commit. Replica r can commit either responsively or synchronously
based on which rule is triggered first. A responsive commit is trig-
gered when r receives 2f + 1 ack messages for Bk, i.e., Cf
v (Bk) and
r commits Bk and all its ancestors immediately. Replica r stops
vote-timerv,k and notifies Cf
v (Bk) to all honest replicas. Similarly,
replica r synchronously commits Bk along with its all ancestors
when it receives f + 1 vote messages for Bk, i.e., C1/2
v (Bk). r also
notifies C1/2
v (Bk) to all replicas. Like before, both the commit paths
are non-blocking and the leader can keep proposing as soon as it
learns a certificate for previous block.
5.2 View Change Protocol
Blame and quit view step remains identical to the one in Figure 2.
Status. During this step, a replica r waits for 2∆ time and locks on
the highest certified block Cv′(Bk′) known to r. It forwards Cv′(Bk′)
to the next leader and enters next view. As shown in Lemma 19, the
2∆ wait ensures that all honest replicas lock on the highest-certified
block corresponding to a commit at the end of the view, which, in
turn, is essential to maintain the safety of the protocol. The status
message along with the accompanying 2∆ wait in the propose step
ensures liveness, i.e., it ensures that an honest leader proposes a
block that extends locks held by all honest replicas and hence will
be voted upon by all honest replicas.
Next, we provide some intuition on why either of these commit
rules are safe within a view.
Why does a responsive commit ensure safety within a view?
A replica commits a block Bk responsively only when it receives
acks from all replicas which includes all honest replicas. This implies
no honest replicas will either ack or vote for an equivocating block
B′
k′ at any height k′. Hence, an equivocating block B′
k′ will neither
receive 2f + 1 acks nor f + 1 votes required for a commit.
Why does a synchronous commit ensure safety within a view?
An honest replica r synchronously commits a block Bk at time t
when it receives f + 1 votes for Bk and hears no equivocation by
time t. This implies no honest replica has voted for an equivocating
block B′
k′ by time t −∆. At least one honest replica r′ sent an ack for
Bk by time t − ∆. r′s ack arrives all honest replicas by time t. Hence,
honest replicas will neither ack nor vote for an equivocating block
B′
k′ after time t. This also prevents honest replicas from committing
an equivocating block after time t.
5.3 Safety and Liveness
We say a block Bk is committed directly in view v if any of the
two commit rules are triggered for Bk. Similarly, a block Bk is
committed indirectly if it is a result of directly committing a block
Bℓ (ℓ > k) that extends Bk but is not equal to Bk.
Claim 16. If an honest replica directly commits a block Bk in
view v using the responsive commit rule, then there does not exist a
certificate for an equivocating block in view v.
Proof. If replica r commits Bk in view v using responsive commit
rule, r must have received 2f + 1 acks, i.e., Cf
v (Bk). This implies all
honest replicas have sent ack for Bk and no honest replica would
send ack or vote for an equivocating block B′
k′ in view v. Since, a
certificate for B′
k′ requires either 2f + 1 acks for full certificate or
at least one vote from an honest replica for synchronous certificate,
a certificate for an equivocating block cannot exist.
□
Let L and L′ be the leader of view v and v + 1, respectively. Each replica r runs the following steps.
(i) Status. Wait for 2∆ time. Pick the highest certified block Bk′ with certificate Cv′(Bk′). Lock on Cv′(Bk′), and send Cv′(Bk′) to the
new leader L′. Enter view v + 1.
Figure 4: View-change protocol for optimal optimistic responsiveness with ∆-synchronous latency and n-sized quorum.