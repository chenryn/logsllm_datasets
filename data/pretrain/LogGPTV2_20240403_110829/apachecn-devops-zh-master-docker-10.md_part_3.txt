```
$ kubectl config delete-cluster MasteringDockerAKSCluster
$ kubectl config delete-context MasteringDockerAKSCluster
```
接下来，我们将考虑在谷歌云中推出一个类似的集群。
# 谷歌库比厄引擎
**谷歌 Kubernetes 引擎**，你可能已经猜到了，非常紧密地集成到了谷歌的云平台中。让我们直接进入并启动一个集群，而不是深入更多细节。我假设您已经有了一个谷歌云帐户，一个启用了计费的项目，最后安装并配置了谷歌云软件开发工具包来与您的项目交互。
要启动群集，只需运行以下命令:
```
$ gcloud container clusters create masteringdockergke --num-nodes=2
```
一旦集群启动，您的`kubectl`配置将自动更新，并将为新启动的集群设置上下文。您可以通过运行以下命令来查看节点信息:
```
$ kubectl version
$ kubectl get nodes
```
![](img/4b3bd18a-a747-4f9f-85ad-5c8c20d6efb2.png)
现在我们已经启动并运行了集群，让我们通过重复上次使用的命令来启动演示商店:
```
$ kubectl create namespace sock-shop
$ kubectl apply -n sock-shop -f "https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true"
$ kubectl -n sock-shop get pods
$ kubectl -n sock-shop get services
$ kubectl -n sock-shop expose deployment front-end --type=LoadBalancer --name=front-end-lb
$ kubectl -n sock-shop get services front-end-lb
```
同样，一旦创建了`front-end-lb`服务，您应该能够找到要使用的外部 IP 地址端口:
![](img/1b88a296-8862-4db4-9aee-417969dc98e4.png)
将这些输入浏览器将打开商店:
![](img/dc44d962-fe1e-4fdc-9903-74f85f5b7c90.png)
要删除群集，只需运行以下命令:
```
$ kubectl delete namespace sock-shop
$ gcloud container clusters delete masteringdockergke
```
这也将从`kubectl`中移除上下文和集群。
# 亚马逊弹性容器服务
我们要看的最后一项 Kubernetes 服务是针对 Kubernetes 的**亚马逊弹性容器服务**，简称**亚马逊 EKS** 。这是我们覆盖的三项服务中最近推出的服务。事实上，你可以说亚马逊参加 Kubernetes 派对很晚。
不幸的是，亚马逊的命令行工具不如我们在微软 Azure 和谷歌云上使用的工具友好。正因为如此，我将使用一个名为`eksctl`的工具，它是由 Weave 编写的，正是创建我们一直在使用的演示商店的人。您可以在本章末尾的*进一步阅读*部分找到关于`eksctl`和亚马逊命令行工具的详细信息。
要启动我们的亚马逊 EKS 集群，我们需要运行以下命令:
```
$ eksctl create cluster
```
启动集群需要几分钟时间，但在整个过程中，您会在命令行上收到反馈。此外，由于`eksctl`正在使用云信息，您也可以在 AWS 控制台中查看其进度。完成后，您应该会看到如下输出:
![](img/4c382493-e1ee-4ea7-9599-6da285f0e2f8.png)
作为启动的一部分，`eksctl`将配置您的本地`kubectl`上下文，这意味着您可以运行以下内容:
```
$ kubectl version
$ kubectl get nodes
```
![](img/59956609-90b8-468a-8db8-f878996e8997.png)
现在，我们已经启动并运行了集群，我们可以启动演示商店了，就像之前一样:
```
$ kubectl create namespace sock-shop
$ kubectl apply -n sock-shop -f "https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true"
$ kubectl -n sock-shop get pods
$ kubectl -n sock-shop get services
$ kubectl -n sock-shop expose deployment front-end --type=LoadBalancer --name=front-end-lb
$ kubectl -n sock-shop get services front-end-lb
```
您可能会注意到，运行最后一个命令时列出的外部 IP 看起来有些奇怪:
![](img/50a3cbee-1b92-4813-9307-2948a9b16d39.png)
这是因为它是一个域名而不是一个 IP 地址。要查找完整的网址，您可以运行以下命令:
```
$ kubectl -n sock-shop describe services front-end-lb
```
![](img/c4d6c6ea-15b9-49e4-b88c-96a35fd6cae7.png)
您可能已经猜到，输入网址并移植到浏览器中会显示演示商店:
![](img/08ad77e8-6b8f-4743-9bcf-130c42f9c263.png)
要删除群集，请运行以下命令:
```
$ kubectl delete namespace sock-shop
$ eksctl get cluster
```
这将返回正在运行的集群的名称。一旦获得名称，运行以下命令，确保引用您自己的集群:
```
$ eksctl delete cluster --name=beautiful-hideout-1539511992
```
您的终端输出应该如下所示:
![](img/fb0a673e-7663-483f-8b99-313189fbf179.png)
# 立方结构摘要
我们对微软 Azure、谷歌云和亚马逊网络服务中的 Kubernetes 的简要介绍到此结束。我们在这里讨论了几个有趣的问题。首先，我们通过几个简单的步骤，使用命令行启动并管理了我们的集群，尽管我们不得不为亚马逊 EKS 使用第三方工具。
第二点也是最重要的一点是，一旦我们使用`kubectl`访问了集群，在所有三个平台上的体验都完全相同。在任何时候，我们都不必访问云提供商的基于网络的控制面板来调整或检查设置。一切都是用同样的命令完成的；部署相同的代码和服务时，我们没有考虑云提供商提供的任何单独服务。
我们甚至可以使用 Docker 在本地运行演示存储，使用完全相同的命令。只需启动 Kubernetes 集群，确保选择了本地 Docker 上下文，然后运行以下命令:
```
$ kubectl create namespace sock-shop
$ kubectl apply -n sock-shop -f "https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true"
$ kubectl -n sock-shop get pods
$ kubectl -n sock-shop get services
$ kubectl -n sock-shop expose deployment front-end --type=LoadBalancer --name=front-end-lb
$ kubectl -n sock-shop get services front-end-lb
```
从下面的输出可以看出，*负载均衡*的 IP，在本例中是`localhost`。打开浏览器进入`http://localhost:8079`会带你去商店:
![](img/d8fe2e37-04a3-4b51-a7bb-7af5cae602f9.png)
您可以通过运行以下命令来删除该存储:
```
$ kubectl delete namespace sock-shop
```
如果没有大量的工作和配置，或者通过基于订阅的闭源服务，这种跨多个提供商甚至本地机器的一致性水平以前是无法实现的。
# 摘要
在本章中，我们已经了解了如何使用 Docker 自己提供的工具将 Docker Swarm 集群部署到云提供商中。我们还研究了公共云提供的两种服务，以从核心 Docker 工具集中运行容器。
最后，我们研究了在各种云中启动 Kubernetes 集群，并在所有云中运行相同的演示应用。从我们运行的任何命令中可以清楚地看到，所有三个公共云都使用不同版本的 Docker 作为容器引擎。虽然这可能会在你读到这篇文章时发生变化，但从理论上讲，它们可能会切换到另一个引擎，影响很小。
在下一章中，我们将回到 Docker 工作上来，看看 Portainer，一个用于管理 Docker 安装的基于 web 的界面。
# 问题
1.  对或错:AWS 的 Docker 和 Azure 的 Docker 会启动 Kubernetes 集群，供您启动容器。
2.  如果使用亚马逊 Fargate，有哪些亚马逊服务是你不用直接管理的？
3.  我们需要在 Azure 中启动什么类型的应用？
4.  一旦启动，我们需要运行什么命令来为袜子商店创建命名空间？
5.  如何找到负载平衡器的全部细节？
# 进一步阅读
您可以在以下链接中找到 Docker 云服务关闭的详细信息:
*   Docker 云迁移通知和常见问题解答:[https://success.docker.com/article/cloud-migration](https://success.docker.com/article/cloud-migration)
*   卡住了！Docker 云关机！:[https://blog.cloud66.com/stuck-docker-cloud-shutdown/](https://blog.cloud66.com/stuck-docker-cloud-shutdown/)
有关 Docker for AWS 和 Docker for Azure 使用的模板服务的更多详细信息，可在以下链接中找到:
*   AWS 云组:[https://AWS . Amazon . com/cloudtraining/](https://aws.amazon.com/cloudformation/)
*   天青 ARM 模板:[https://azure.microsoft.com/en-gb/resources/templates/](https://docs.microsoft.com/en-gb/azure/azure-resource-manager/resource-group-overview)
*   ARM 模板可视化工具:[http://armviz.io/](http://armviz.io/)
我们用来启动容器的云服务可以在以下链接中找到:
*   亚马逊 ECS:[https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)
*   AWS fargate:[https://AWS . Amazon . com/fargate/](https://aws.amazon.com/fargate/)
*   蔚蓝网络应用:[https://azure.microsoft.com/en-gb/services/app-service/web/](https://azure.microsoft.com/en-gb/services/app-service/web/)
这三项 Kubernetes 服务可以在以下链接中找到:
*   屡教不改的服务:[https://azure . Microsoft . com/en-GB/services/kublets-service/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)
*   谷歌 Kubernetes 引擎:[https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/)
*   亚马逊 Kubernetes 弹性容器服务:[https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)
本章中使用的各种命令行工具的快速入门可在以下链接中找到:
*   蔚蓝色:https://docs.microsoft.com/en-us/cli/azure/?view = azure-CLI-最新
*   谷歌云 SDK:[https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)
*   AWS 命令行界面:[https://aws.amazon.com/cli/](https://aws.amazon.com/cli/)
*   eksctl-适用于 Amazon EKS 的 CLI:[https://eksctl . io/](https://eksctl.io/)
最后，有关演示商店的更多详细信息，请访问以下链接:
*   Sock 商店:https://micro services-demo . github . io