![pic](20201004_01_pic_004.png)    
```    
postgres=# create table points(p point);    
postgres=# insert into points(p) values    
  (point '(1,1)'), (point '(3,2)'), (point '(6,3)'),    
  (point '(5,5)'), (point '(7,8)'), (point '(8,6)');    
postgres=# create index on points using gist(p);    
```    
With this splitting, the index structure will look as follows:    
![pic](20201004_01_pic_005.png)    
The index created can be used to speed up the following query, for example: "find all points contained in the given rectangle". This condition can be formalized as follows: ```p  point '(4,7)' limit 2;    
   p      
-------    
 (5,5)    
 (7,8)    
(2 rows)    
```    
```p  point '(4,7)'``` here is an expression that uses an ordering operator ``````, which denotes the distance from one argument to the other one. The meaning of the query is to return two points closest to the point ```(4,7)```. Search like this is known as ```k-NN - k-nearest neighbor search```. To support queries of this kind, an access method must define an additional distance function, and the ordering operator must be included in the appropriate operator class (for example, "points_ops" class for points). The query below shows operators, along with their types (```"s" - search and "o" - ordering```):    
```    
postgres=# select amop.amopopr::regoperator, amop.amoppurpose, amop.amopstrategy    
from pg_opclass opc, pg_opfamily opf, pg_am am, pg_amop amop    
where opc.opcname = 'point_ops'    
and opf.oid = opc.opcfamily    
and am.oid = opf.opfmethod    
and amop.amopfamily = opc.opcfamily    
and am.amname = 'gist'    
and amop.amoplefttype = opc.opcintype;    
      amopopr      | amoppurpose | amopstrategy    
-------------------+-------------+--------------    
 >(point,point)   | s           |            5  strictly right    
 ~=(point,point)   | s           |            6  coincides    
 ^(point,point)   | s           |           11  strictly above    
 (point,point)  | o           |           15  distance    
  (x2,y2)``` equals the square root of the sum of squares of differences of the abscissas and ordinates. The distance from a point to a bounding rectangle is taken to be the minimal distance from the point to this rectangle or zero if the point lies within the rectangle. It is easy to compute this value without walking through child points, and the value is for sure no greater than the distance to any child point.    
Let's consider the search algorithm for the above query.    
![pic](20201004_01_pic_008.png)    
The search starts with the root node. The node contains two bounding rectangles. The distance to ```(1,1)-(6,3)``` is 4.0 and to ```(5,5)-(8,8)``` is 1.0.    
Child nodes are walked through in the order of increasing the distance. This way, we first descend to the nearest child node and compute the distances to the points (we will show the numbers in the figure for visibility):    
![pic](20201004_01_pic_009.png)    
This information suffices to return the first two points, ```(5,5)``` and ```(7,8)```. Since we are aware that the distance to points that lie within the rectangle ```(1,1)-(6,3)``` is 4.0 or greater, we do not need to descend to the first child node.    
But what if we needed to find the first three points?    
```    
postgres=# select * from points order by p  point '(4,7)' limit 3;    
   p      
-------    
 (5,5)    
 (7,8)    
 (8,6)    
(3 rows)    
```    
Although the second child node contains all these points, we cannot return ```(8,6)``` without looking into the first child node since this node can contain closer points (since ```4.0 < 4.1```).    
![pic](20201004_01_pic_010.png)    
For internal rows, this example clarifies requirements for the distance function. By selecting smaller distance (4.0 instead of actual 4.5) for the second row, we reduced the efficiency (the algorithm needlessly started examining an extra node), but did not break correctness of the algorithm.    
Until recently, GiST was the only access method capable of dealing with ordering operators. But the situation has changed: RUM access method (to be discussed further) has already joined this group of methods, and it is not unlikely that good old B-tree will join them: a patch developed by Nikita Glukhov, our colleague, is being discussed by the community.    
As of march 2019, k-NN support is added for SP-GiST in upcoming PostgreSQL 12 (also authored by Nikita). Patch for B-tree is still in progress.    
## 参考    
https://postgrespro.com/blog/pgsql/4175817    
https://www.postgresql.org/docs/13/gist-extensibility.html    
https://www.postgresql.org/docs/13/xindex.html    
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)      
http://www.sai.msu.su/~megera/wiki/Gevel    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")