In the public-key setting, it is easy to see that hxi, yii is in fact inherent leakage from the ideal
functionality. Concretely, an adversary can always pad an encryption of xi in the i’th slot with
encryptions of 0’s in the remaining n − 1 slots and then decrypt.
Our main scheme. The bulk of this work lies in constructing a multi-input FE for inner
product in the private-key setting, where we can no longer aﬀord to leak hxi, yii. We modify
the previous scheme by introducing additional rerandomization into each slot with the use of
bilinear groups as follows:
msk := {[wi]2, [vi]2, [zi]T}i∈[n],
eki
ctxi
sky1,...,yn
:= ([wi]1, [vi]1, [zi]1),
:= ([si]1, [xi + wisi]1, [zi + visi]1),
:= ([hw1, y1i + v1r]2, . . . , [hwn, yni + vnr]2, [r]2, [(z1 + ··· + zn)r]T ).
The ciphertext ctxi can be viewed as encrypting xikzi using the single-input FE, where
z1, . . . , zn are part of msk. In addition, we provide a single-input FE key for yikr in the secret
key, where a fresh r is sampled for each key. Decryption proceeds as follows: ﬁrst compute
[hxi, yii + zir]T = e([xi + wisi]⊤
1, [yi]2) + e([zi + visi]⊤
and then
[
nXi=1hxi, yii]T = −[(z1 + ··· + zn)r]T +
1, [r]2) − e([si], [hwi, yii + vir]2)
nXi=1
[hxi, yii + zir]T .
The intuition underlying security is that by the DDH assumption [zir]T is pseudorandom
and helps mask the leakage about hxi, yii in [hxi, yii + zir]T ; in particular,
[hx1, y1i + z1r]T , . . . , [hxn, yni + znr]T , [(z1 + ··· + zn)r]T
77
constitutes a computational secret-sharing of [hx1, y1i + ··· + hxn, yni]T , even upon reusing
z1, . . . , zn as long as we pick a fresh r.
In addition, sharing the same exponent r across n
elements in the secret key helps prevent mix-and-match attacks across secret keys.
Our main technical result is that a variant of the private-key MIFE scheme we just described
satisﬁes adaptive indistinguishability-based security under the k-Lin assumption in bilinear
groups; a straight-forward extension of an impossibility result in [BSW11, AGVW13] rules out
simulation-based security. Our ﬁnal scheme, described in Figure 4.6, remains quite simple and
achieves good concrete eﬃciency. We focus on selective security in this overview, and explain
at the end the additional ideas needed to achieve adaptive security.
Overview of the security proof. There are two main challenges in the security proof:
(i) avoiding leakage beyond the ideal functionality, (ii) avoiding super-polynomial hardness
assumptions. Our proof proceeds in two steps: ﬁrst, we establish security with a single challenge
ciphertext per slot, and from which we bootstrap to achieve security with multiple challenge
ciphertexts per slot. We will address the ﬁrst challenge in the ﬁrst step and the second challenge
in the second. For notation simplicity, we focus on the setting with n = 2 slots and a single
key query y1ky2.
Step 1. To prove indistinguishability-based security, we want to switch encryptions x0
to encryptions of x1
that
1, x0
2
2. Here, the leakage from the ideal functionality imposes the restriction
1, x1
hx0
1, y1i + hx0
2, y2i = hx1
1, y1i + hx1
2, y2i
and this is the only restriction we can work with. The natural proof strategy is to introduce an
intermediate hybrid that generates encryptions of x1
2. However, to move from encryptions
x0
1, x0
2, y1ky2i, which implies the
extraneous restriction hx0
1, y1i. (Indeed, the single-input inner-product scheme in
[BJK15] imposes extraneous restrictions to overcome similar diﬃculties in the function-hiding
setting.)
2 to this hybrid, we would require that hx0
2, y1ky2i = hx1
1, y1i = hx1
1kx0
1kx0
1, x0
To overcome this challenge, we rely on a single-input FE that achieves simulation-based
security, which allows us to avoid the intermediate hybrid. See Theorem 9 and Remark 11 for
further details.
Step 2. Next, we consider the more general setting with Q1 challenge ciphertexts in the ﬁrst
slot and Q2 in the second, but still a single key query. We achieve security loss O(Q1 + Q2) for
two slots, and more generally, O(Q1 + ··· + Qn) —as opposed to Q1Q2 ··· Qn corresponding
to all possible combinations of the challenge ciphertexts— for n slots.
Our ﬁrst observation is that we can bound the leakage from the ideal functionality by
O(Q1 + Q2) relations (the trivial bound being Q1· Q2). Denote the j’th ciphertext query in the
i’th slot by xj,b
2 and
i
1 , x1,b
x1,b
1 , y1i and more generally,
hxj,b
i −x1,b
, yii. Indeed, these are essentially the only constraints we need to work with, namely:
2 and substracting the two, the adversary learns hx2,b
, where b is the challenge bit. By decrypting the encryptions of x2,b
1 − x1,b
1 , x1,b
i
hx1,0
1 , y1i + hx1,0
hxj,0
i − x1,0
2 , y2i = hx1,1
, yii = hxj,1
1 , y1i + hx1,1
i − x1,1
i
2 , y2i,
i
, yii, j = 2, . . . , Qi, i = 1, 2.
Next, we need to translate the bound on the constraints to a O(Q1 +Q2) bound on the security
loss in the security reduction. We will switch from encryptions of xj,0
i as follows:
we write
to those of xj,1
i
xj,0
i = x1,0
i + (xj,0
i − x1,0
i
).
78
Chapter 4. Multi-Input Inner-Product Functional Encryption from Pairings
We can switch the ﬁrst terms in the sums from x1,0
i
to xj,1
i − x1,0
using security for a single
i − x1,0
challenge ciphertext, and then switch xj,0
by relying on security of the
i − x1,1
underlying single-input FE and the fact that hxj,0
, yii. Here, we will
require that the underlying single-input FE satisﬁes a malleability property, namely given ∆,
we can maul an encryption of x into that of x + ∆. Note that this does not violate security
because given hx, yi, y, ∆, we can eﬃciently compute hx + ∆, yi. See Theorem 10 for further
details.
to x1,1
i
i
i
i − x1,1
, yii = hxj,1
i
i
Extension to adaptive security. The previous argument for selective security requires to
embed the challenge into the setup parameters. To circumvent this issue, we use a two-step
strategy for the adaptive security proof of MIFE. The ﬁrst step uses an adaptive argument (this
is essentially the argument used for the selective case, but applied to parameters that are picked
at setup time), while the second step uses a selective argument, with perfect security. Thus, we
can aﬀord to use to simply guess the challenge beforehand, which incurs an exponential security
loss, since the exponential term is multiplied by a zero term. The idea of using complexity
leveraging to deduce adaptive security from selective security when the security is perfect, also
appears in [Wee14, Remark 1]. See Remark 12 for further details.
Security against corruption of input slots. Proving the stronger security notion requires
solving technical challenges that did not arise in [AGRW17].
In particular, to obtain full
ﬂedged many-AD-IND security, [AGRW17] use a generic transformation that uses an extra
layer of symmetric encryption, to encrypt the original ciphertext. The symmetric key is shared
across input slots, and the i’th share is given as part of any ciphertext for input slot i ∈ [n].
Thus, when ciphertexts are known for all slots i ∈ [n], the decryption recovers all shares of
the symmetric key, and decrypt the outer layer, to get the original ciphertext. The rest of
decryption is performed as in the original multi-input FE.
The problem with this approach is that the encryption algorithm needs to know the sym-
metric key (and not simply a share of it). Thus, corrupting one input slot allows the adversary
to recover the entire symmetric key, and break the security of the scheme. Such problem did
not arise in [AGRW17], which does not consider corruptions of input slots. To circumvent this
issue, as in [DOT18], we use the symmetric key to encrypt the functional secret keys, instead
of encrypting the ciphertexts. Each encryption key eki for input slot i ∈ [n] contains the i’th
share of the symmetric key, but the full symmetric key is only needed by the key generation
algorithm, which knows msk. If one share is missing, all the functional secret keys are random.
Security of the overall multi-input FE when zero functional secret keys are queried concludes
the security proof. See Section 2.4.2 for further details.
Theoretical perspective. The focus of this work is on obtaining constructions for a speciﬁc
class of functions with good concrete eﬃciency. Nonetheless, we believe that our results do
shed some new insights into general feasibility results for MIFE. Namely, we presented the ﬁrst
MIFE for a non-trivial functionality that polynomial security loss for a super-constant number
of slots under falsiﬁable assumptions. Recall that indistinguishability obfuscation and generic
multilinear maps are not falsiﬁable, whereas the constructions based on single-input FE in
[AJ15, BV15, BKS16] incur a security loss which is exponential in the number of slots. Indeed,
there is a reason why prior works relied on non-falsiﬁable assumptions or super-polynomial
security loss. Suppose an adversary makes Q0 key queries, and Q1, . . . , Qn ciphertext queries
for the n slots. By combining the ciphertexts and keys in diﬀerent ways, the adversary can
learn Q0Q1 ··· Qn diﬀerent decryptions. When n is super-constant, the winning condition in
the security game may not be eﬃciently checkable in polynomial-time, hence the need for either
1The security notion achieved in [KLM+18] is actually a weaker variant of many-AD-IND in which the
adversary is only allowed to perform a single key query at the beginning of the security game.
79
a non-falsiﬁable assumption or a super-polynomial security loss. To overcome this diﬃculty, we
show that for inner products, we can exploit linearity to succinctly characterize the Q0Q1 ··· Qn
constraints by roughly Q0 · (Q1 + ··· Qn) constraints.
Discussion. Our constructions and techniques may seem a-priori largely tailored to the
inner product functionality and properties of bilinear groups. We clarify here that our high-
level approach (which builds upon [Wee14, BKP14]) may be applicable beyond inner products,
namely:
i. start with a multi-input FE that is only secure for a single ciphertext per slot and one
secret key, building upon a single-input FE whose security is simulation-based for a single
ciphertext (in our case, this corresponds to introducing the additional z1, . . . , zn to hide
the intermediate computation hxi, yii);
ii. achieve security for a single ciphertext per slot and multiple secret keys, by injecting
additional randomness to the secret keys to prevent mix-and-match attacks (for this, we
replaced z1, . . . , zn with z1r, . . . , znr, r in the exponent);
iii. “bootstrap” to multiple ciphertexts per slot, where we also showed how to avoid incurring
an exponential security loss.
In particular, using simulation-based security for i. helped us avoid additional leakage beyond
what is allowed by the ideal functionality.
Additional related work. Goldwasser et al. [GGG+14] showed that both two-input public-
key MIFE as well as n-input private-key MIFE for circuits already implies indistinguishability
obfuscation for circuits.
There have also been several works that proposed constructions for private-key multi-input
functional encryption. The work of Boneh et al. [BLR+15] constructs a single-key MIFE in the
private key setting, which is based on multilinear maps and is proven secure in the idealized
generic multilinear map model. Two other papers explore the question how to construct multi-
input functional encryption starting from the single input variant. In their work [AJ15] Ananth
and Jain demonstrate how to obtain selectively secure MIFE in the private key setting starting
from any general-purpose public key functional encryption. In an independent work, Brakerski
et al. [BKS16] reduce the construction of private key MIFE to general-purpose private key
(single input) functional encryption. The resulting scheme achieves selective security when the
starting private key FE is selectively secure. Additionally in the case when the MIFE takes
any constant number of inputs, adaptive security for the private key FE suﬃces to obtain
adaptive security for the MIFE construction as well. The constructions in that work provide
also function hiding properties for the MIFE encryption scheme.
While this line of work reduces MIFE to single-input FE for general-purpose constructions,
the only known instantiations of construction for public and private key functional encryption
with unbounded number of keys require either indistinguishability obfuscation [GGH+13b] or
multilinear maps with non-standard assumptions [GGHZ16]. We stress that the transforma-
tions from single-input to MIFE in [AJ15, BKS16] are not applicable in the case of inner
products since these transformations require that the single-input FE for complex functional-
ities related to computing a PRF, which is not captured by the simple inner functionality.
Road-map.
tion 4.1, then show in Section 4.2 how to obtain adaptive security.
In the rest of this chapter, we ﬁrst present the selectively-secure MIFE in Sec-
80
Chapter 4. Multi-Input Inner-Product Functional Encryption from Pairings
Selectively-Secure, Private-Key MIFE for Inner Products
In this section, we present a private-key MIFE for bounded-norm inner products over Z, that
is, for the set of functionalities {F m,X,Y
: Kn×X1×···×Xn → Z, with
Kn := [0, Y ]mn, for all i ∈ [n], Xi := [0, X]m, Z := Z, such that for any (y1k···kyn) ∈ Kn,
xi ∈ Xi, we have:
nXi=1hxi, yii.
(cid:0)(y1k···kyn), x1, . . . , xn(cid:1) =
}n∈N deﬁned as F m,X,Y
F m,X,Y
n
n
n
Remark 7: on leakage
i
, xj,1
Let (xj,0
For all slots i ∈ [n], all j ∈ [Qi], and all bits b ∈ {0, 1}, the adversary can learn
i )i∈[n],j∈[Qi] be the ciphertext queries, and y1k···kyn be a secret key query.
i − x1,b
hxj,b
i
, yii
via the ideal functionality. In the IND security game, this means the adversary is restricted
to queries satisfying
, yii.
In the hybrid, we want to avoid additional constraints such as
, yii = hxj,1
hxj,0
i − x1,0
i − x1,1
i
i
hxj,0
i − x1,0
i
, yii = hxj,0
i − x1,1
i
, yii = hxj,1
i − x1,0
i
, yii = hxj,1
i − x1,1
i
, yii.
We prove many-SEL security, for static corruptions (see Deﬁnition 23), using an asymmetric
pairing group PG = (G1, G2, GT , p, P1, P2, e) with e : G1 × G2 → GT of prime order p, where p
is a 2λ-bit prime. Our construction relies on the Matrix Decisional Diﬃe-Hellman assumption
in G1 and in G2 (see Deﬁnition 10), and build upon any single-input FE for inner products, that
satisﬁes one-SEL-SIM security, along with some additional structural properties. Such single-
input FE can be obtained by straightforwardly adapting the scheme from [ALS16, Section 3],
and is recalled in Section 2.6.1 for completeness. For correctness, we require n; m; X; Y to be