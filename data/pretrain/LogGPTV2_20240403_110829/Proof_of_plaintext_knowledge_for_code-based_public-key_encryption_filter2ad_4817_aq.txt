### Public-Key Setting and Inherent Leakage

In the public-key setting, it is evident that \( \langle x_i, y_i \rangle \) represents inherent leakage from the ideal functionality. Specifically, an adversary can always pad an encryption of \( x_i \) in the \( i \)-th slot with encryptions of 0's in the remaining \( n-1 \) slots and then decrypt.

### Main Scheme: Multi-Input FE for Inner Product in the Private-Key Setting

The core of our work involves constructing a multi-input functional encryption (FE) scheme for inner products in the private-key setting, where we cannot afford to leak \( \langle x_i, y_i \rangle \). We modify the previous scheme by introducing additional rerandomization into each slot using bilinear groups as follows:

- **Master Secret Key (msk):**
  \[
  msk := \{ [w_i]_2, [v_i]_2, [z_i]_T \}_{i \in [n]}
  \]

- **Encryption Key (ek\(_i\)):**
  \[
  ek_i := ([w_i]_1, [v_i]_1, [z_i]_1)
  \]

- **Ciphertext (ctx\(_i\)):**
  \[
  ctx_i := ([s_i]_1, [x_i + w_i s_i]_1, [z_i + v_i s_i]_1)
  \]

- **Secret Key (sky\(_{y_1, \ldots, y_n}\)):**
  \[
  sky_{y_1, \ldots, y_n} := ([\langle w_1, y_1 \rangle + v_1 r]_2, \ldots, [\langle w_n, y_n \rangle + v_n r]_2, [r]_2, [(z_1 + \cdots + z_n)r]_T)
  \]

The ciphertext \( ctx_i \) can be viewed as encrypting \( x_i k z_i \) using the single-input FE, where \( z_1, \ldots, z_n \) are part of the master secret key. Additionally, we provide a single-input FE key for \( y_i k r \) in the secret key, where a fresh \( r \) is sampled for each key.

**Decryption:**
1. Compute:
   \[
   [\langle x_i, y_i \rangle + z_i r]_T = e([x_i + w_i s_i]^{\top}_1, [y_i]_2) + e([z_i + v_i s_i]^{\top}_1, [r]_2)
   \]
2. Then:
   \[
   \left[ \sum_{i=1}^n \langle x_i, y_i \rangle \right]_T = -[(z_1 + \cdots + z_n)r]_T + \sum_{i=1}^n [\langle x_i, y_i \rangle + z_i r]_T
   \]

### Security Intuition

The security intuition is based on the Decisional Diffie-Hellman (DDH) assumption, which ensures that \( [z_i r]_T \) is pseudorandom and helps mask the leakage about \( \langle x_i, y_i \rangle \) in \( [\langle x_i, y_i \rangle + z_i r]_T \). Specifically:
\[
[\langle x_1, y_1 \rangle + z_1 r]_T, \ldots, [\langle x_n, y_n \rangle + z_n r]_T, [(z_1 + \cdots + z_n)r]_T
\]
constitutes a computational secret-sharing of \( [\langle x_1, y_1 \rangle + \cdots + \langle x_n, y_n \rangle]_T \), even upon reusing \( z_1, \ldots, z_n \) as long as a fresh \( r \) is picked.

Additionally, sharing the same exponent \( r \) across \( n \) elements in the secret key helps prevent mix-and-match attacks across secret keys.

### Main Technical Result

Our main technical result is that a variant of the private-key MIFE scheme described above satisfies adaptive indistinguishability-based security under the \( k \)-Lin assumption in bilinear groups. A straightforward extension of an impossibility result in [BSW11, AGVW13] rules out simulation-based security. Our final scheme, described in Figure 4.6, remains simple and achieves good concrete efficiency. We focus on selective security in this overview and explain the additional ideas needed to achieve adaptive security at the end.

### Overview of the Security Proof

There are two main challenges in the security proof:
1. Avoiding leakage beyond the ideal functionality.
2. Avoiding super-polynomial hardness assumptions.

Our proof proceeds in two steps:
1. Establish security with a single challenge ciphertext per slot.
2. Bootstrap to achieve security with multiple challenge ciphertexts per slot.

For notation simplicity, we focus on the setting with \( n = 2 \) slots and a single key query \( y_1 k y_2 \).

#### Step 1: Indistinguishability-Based Security

To prove indistinguishability-based security, we want to switch encryptions of \( x_0 \) to encryptions of \( x_1 \). The leakage from the ideal functionality imposes the restriction:
\[
\langle x_0, y_1 \rangle + \langle x_0, y_2 \rangle = \langle x_1, y_1 \rangle + \langle x_1, y_2 \rangle
\]
This is the only restriction we can work with. The natural proof strategy is to introduce an intermediate hybrid that generates encryptions of \( x_1 \). However, to move from encryptions \( x_0 \) to this hybrid, we would require:
\[
\langle x_0, y_1 \rangle = \langle x_1, y_1 \rangle
\]
To overcome this challenge, we rely on a single-input FE that achieves simulation-based security, which allows us to avoid the intermediate hybrid. See Theorem 9 and Remark 11 for further details.

#### Step 2: Multiple Challenge Ciphertexts

Next, we consider the more general setting with \( Q_1 \) challenge ciphertexts in the first slot and \( Q_2 \) in the second, but still a single key query. We achieve security loss \( O(Q_1 + Q_2) \) for two slots, and more generally, \( O(Q_1 + \cdots + Q_n) \) for \( n \) slots.

Our first observation is that we can bound the leakage from the ideal functionality by \( O(Q_1 + Q_2) \) relations (the trivial bound being \( Q_1 \cdot Q_2 \)). Denote the \( j \)-th ciphertext query in the \( i \)-th slot by \( x_{j, b}^{(i)} \), where \( b \) is the challenge bit. By decrypting the encryptions of \( x_{j, b}^{(i)} \), the adversary learns:
\[
\langle x_{j, b}^{(i)} - x_{1, b}^{(i)}, y_i \rangle
\]
These are essentially the only constraints we need to work with. We switch from encryptions of \( x_{j, 0}^{(i)} \) to those of \( x_{j, 1}^{(i)} \) using security for a single challenge ciphertext and the underlying single-input FE. We require that the underlying single-input FE satisfies a malleability property, namely given \( \Delta \), we can maul an encryption of \( x \) into that of \( x + \Delta \). See Theorem 10 for further details.

### Extension to Adaptive Security

The previous argument for selective security requires embedding the challenge into the setup parameters. To circumvent this issue, we use a two-step strategy for the adaptive security proof of MIFE. The first step uses an adaptive argument (essentially the argument used for the selective case, but applied to parameters picked at setup time), while the second step uses a selective argument with perfect security. This allows us to guess the challenge beforehand, incurring an exponential security loss, which is multiplied by a zero term. The idea of using complexity leveraging to deduce adaptive security from selective security when the security is perfect also appears in [Wee14, Remark 1]. See Remark 12 for further details.

### Security Against Corruption of Input Slots

Proving the stronger security notion requires solving technical challenges that did not arise in [AGRW17]. To obtain full-fledged many-AD-IND security, [AGRW17] uses a generic transformation that adds an extra layer of symmetric encryption to the original ciphertext. The symmetric key is shared across input slots, and the \( i \)-th share is given as part of any ciphertext for input slot \( i \in [n] \). When ciphertexts are known for all slots, the decryption recovers all shares of the symmetric key and decrypts the outer layer to get the original ciphertext. The rest of the decryption is performed as in the original multi-input FE.

The problem with this approach is that the encryption algorithm needs to know the symmetric key (not just a share of it). Thus, corrupting one input slot allows the adversary to recover the entire symmetric key, breaking the security of the scheme. To circumvent this issue, as in [DOT18], we use the symmetric key to encrypt the functional secret keys instead of encrypting the ciphertexts. Each encryption key \( ek_i \) for input slot \( i \in [n] \) contains the \( i \)-th share of the symmetric key, but the full symmetric key is only needed by the key generation algorithm, which knows the master secret key. If one share is missing, all the functional secret keys are random. The security of the overall multi-input FE when zero functional secret keys are queried concludes the security proof. See Section 2.4.2 for further details.

### Theoretical Perspective

The focus of this work is on obtaining constructions for a specific class of functions with good concrete efficiency. Nonetheless, our results shed new insights into general feasibility results for MIFE. We presented the first MIFE for a non-trivial functionality with polynomial security loss for a super-constant number of slots under falsifiable assumptions. Recall that indistinguishability obfuscation and generic multilinear maps are not falsifiable, whereas the constructions based on single-input FE in [AJ15, BV15, BKS16] incur a security loss which is exponential in the number of slots. Indeed, there is a reason why prior works relied on non-falsifiable assumptions or super-polynomial security loss. Suppose an adversary makes \( Q_0 \) key queries and \( Q_1, \ldots, Q_n \) ciphertext queries for the \( n \) slots. By combining the ciphertexts and keys in different ways, the adversary can learn \( Q_0 Q_1 \cdots Q_n \) different decryptions. When \( n \) is super-constant, the winning condition in the security game may not be efficiently checkable in polynomial-time, hence the need for either a non-falsifiable assumption or a super-polynomial security loss. To overcome this difficulty, we show that for inner products, we can exploit linearity to succinctly characterize the \( Q_0 Q_1 \cdots Q_n \) constraints by roughly \( Q_0 \cdot (Q_1 + \cdots + Q_n) \) constraints.

### Discussion

Our constructions and techniques may seem a-priori largely tailored to the inner product functionality and properties of bilinear groups. We clarify here that our high-level approach (which builds upon [Wee14, BKP14]) may be applicable beyond inner products:
1. Start with a multi-input FE that is only secure for a single ciphertext per slot and one secret key, building upon a single-input FE whose security is simulation-based for a single ciphertext (in our case, this corresponds to introducing the additional \( z_1, \ldots, z_n \) to hide the intermediate computation \( \langle x_i, y_i \rangle \)).
2. Achieve security for a single ciphertext per slot and multiple secret keys by injecting additional randomness to the secret keys to prevent mix-and-match attacks (for this, we replaced \( z_1, \ldots, z_n \) with \( z_1 r, \ldots, z_n r, r \) in the exponent).
3. "Bootstrap" to multiple ciphertexts per slot, where we also showed how to avoid incurring an exponential security loss.

Using simulation-based security for the first step helped us avoid additional leakage beyond what is allowed by the ideal functionality.

### Additional Related Work

Goldwasser et al. [GGG+14] showed that both two-input public-key MIFE and \( n \)-input private-key MIFE for circuits already imply indistinguishability obfuscation for circuits. There have been several works that proposed constructions for private-key multi-input functional encryption. The work of Boneh et al. [BLR+15] constructs a single-key MIFE in the private-key setting, based on multilinear maps and proven secure in the idealized generic multilinear map model. Two other papers explore how to construct multi-input functional encryption starting from the single-input variant. Ananth and Jain [AJ15] demonstrate how to obtain selectively secure MIFE in the private-key setting starting from any general-purpose public-key functional encryption. Brakerski et al. [BKS16] reduce the construction of private-key MIFE to general-purpose private-key (single-input) functional encryption. The resulting scheme achieves selective security when the starting private-key FE is selectively secure. Additionally, in the case when the MIFE takes any constant number of inputs, adaptive security for the private-key FE suffices to obtain adaptive security for the MIFE construction as well. The constructions in that work also provide function-hiding properties for the MIFE encryption scheme.

While this line of work reduces MIFE to single-input FE for general-purpose constructions, the only known instantiations of construction for public and private key functional encryption with an unbounded number of keys require either indistinguishability obfuscation [GGH+13b] or multilinear maps with non-standard assumptions [GGHZ16]. We stress that the transformations from single-input to MIFE in [AJ15, BKS16] are not applicable in the case of inner products since these transformations require that the single-input FE for complex functionalities related to computing a PRF, which is not captured by the simple inner functionality.

### Roadmap

In the rest of this chapter, we first present the selectively-secure MIFE in Section 4.1, then show in Section 4.2 how to obtain adaptive security.