# 【技术分享】手把手教你使用PowerShell内置的端口扫描器

##### 译文声明
本文是翻译文章，原文来自：[pen-testing.sans.org](http://pen-testing.sans.org)。译文仅供参考，具体内容表达及含义请以原文为准。

**翻译者**：h4d35  
**预估稿费**：100 RMB  
**投稿方式**：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 引言
在进行端口扫描时，Nmap 是一个理想的选择。然而，在某些情况下，Nmap 可能不可用，或者你只是想快速检查某个特定端口是否开放。这时，PowerShell 就可以派上用场了。本文将介绍如何使用 PowerShell 实现基本的端口扫描功能。

## 本文中使用的 PowerShell 命令

### PowerShell 端口扫描器：针对单个 IP 的多个端口的扫描
```powershell
1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.100",$_)) "Port $_ is open!"} 2>$null
```

### Test-NetConnection 针对某 IP 段中单个端口的扫描
```powershell
foreach ($ip in 1..20) {Test-NetConnection -Port 80 -InformationLevel "Detailed" 192.168.1.$ip}
```

### 针对某 IP 段 & 多个端口的扫描器
```powershell
1..20 | % { $a = $_; 1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.$a",$_)) "Port $_ is open!"} 2>$null}
```

### PowerShell 测试出口过滤器
```powershell
1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("allports.exposed",$_)) "Port $_ is open!" } 2>$null
```

## 如何实现一个简单的端口扫描器
为了仅用一行 PowerShell 命令实现一个端口扫描器，我们需要组合三个不同的组件：创建一系列对象、循环遍历每个对象、将每个对象的信息输出到屏幕。利用 PowerShell 的面向对象特性，我们可以轻松实现这一过程。

### 示例命令
```powershell
1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.100",$_)) "Port $_ is open!"} 2>$null
```

### 命令分解
1. `1..1024` – 创建从 1 到 1024 的一系列数字。
2. `|` – 管道运算符，将上述对象传递给循环体。
3. `%` – 在 PowerShell 中，`%` 是 `foreach` 对象的别名，用于开始一个循环。循环体为接下来使用大括号 `{}` 括起来的内容。
4. `echo` – 将输出打印至屏幕。
5. `new-object Net.Sockets.TcpClient` – 新建一个 .NET `TcpClient` 类的实例，它允许我们与 TCP 端口之间建立 socket 连接。
6. `.Connect("10.0.0.100",$_)` – 调用 `TcpClient` 类的 `Connect` 函数，参数为 IP 地址 `10.0.0.100` 和端口 `$_`。其中 `$_` 表示当前对象，即本轮循环中的数字（1..1024）。
7. `"Port $_ is open!"` – 当程序发现一个开放的端口时，屏幕打印 `Port # is open!`。
8. `2>$null` – 告诉 PowerShell 忽略任何错误信息。

上述示例中扫描的端口范围是 1-1024，但你可以轻松修改为其他端口范围，如 `(22..53)` 或 `(8000..9000)`。

## 使用 Test-NetConnection 命令
另一种可用的方法是使用 `Test-NetConnection` 命令。该命令不仅使用方法简单，还能提供更多有用的信息。

### 示例命令
```powershell
foreach ($ip in 1..20) {Test-NetConnection -Port 80 -InformationLevel "Detailed" 192.168.1.$ip}
```

### 命令分解
1. `foreach ($ip in 1..20) {}` – 循环遍历数字 1 到 20。
2. `Test-NetConnection` – 一个用于测试不同种类网络连接的工具。
3. `-Port 80` – 检查 80 端口是否可用。
4. `-InformationLevel "Detailed"` – 提供详细的输出信息。
5. `192.168.1.$ip` – 针对列表中的 IP 地址，依次尝试向 80 端口发起连接。在本例中，变量 `$ip` 从 1 循环至 20。

需要注意的是，`Test-NetConnection` 命令是在 PowerShell 4.0 版本中引入的。

## 构建更复杂的扫描器
当然，构建一个可以遍历多个系统的多个端口的扫描器也是可行的。

### 示例命令
```powershell
1..20 | % { $a = $_; 1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.$a",$_)) "Port $_ is open!"} 2>$null}
```

这个版本的扫描器会对 `10.0.0.1-20` IP 段的 `1-1024` 端口进行扫描。注意，这可能需要花费较长时间才能完成扫描。一种更有效的方法是手动指定目标端口，如下所示：

### 示例命令 v2
```powershell
1..20 | % { $a = $_; write-host "------"; write-host "10.0.0.$a"; 22,53,80,445 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.0.0.$a",$_)) "Port $_ is open!"} 2>$null}
```

### 额外奖励 – 测试出口过滤
许多安全的网络环境会开启出口流量过滤控制，以限制对某些服务的出口协议访问。这对于提升 HTTP/HTTPS/DNS 通道的安全性非常有帮助。然而，当需要识别出可替代的出站访问时，我们可以在内网中使用 PowerShell 来评估网络防火墙上的出口过滤器。

### 示例命令
```powershell
1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("allports.exposed",$_)) "Port $_ is open" } 2>$null
```

有关 PowerShell 出口测试的更多信息，请参考 Beau Bullock 在 Black Hills Information Security 发表的文章。

## 结论
PowerShell 是一个强大的工具，一旦在 Windows 环境中启用了 PowerShell，几乎可以用它完成任何事情。如果你有其他相关的 PowerShell 技巧，欢迎留言评论。