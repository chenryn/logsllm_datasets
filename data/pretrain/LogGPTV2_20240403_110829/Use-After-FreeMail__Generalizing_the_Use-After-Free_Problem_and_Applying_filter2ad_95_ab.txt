Most internet users do not have their own mail server. Instead,
they use email addresses registered with a free-mail provider [30,
33], allowing email usage free of charge. Users may have multiple
accounts with one or more free-mail providers, using them for
different purposes and contexts [33]. Still, a non-negligible share
of email addresses is hosted on personal or business mail servers.
Analyzing the data from the last.fm leak, we find that 0.06% of
the hosts appear at least 1000 times in the leak. These 0.06% of
providers amount for 93.2% of all registered email addresses, with
every provider having 56181.7 addresses in the leak on average. The
remaining 99.94% of the hosts amount for only 6.8% of registered
email addresses, with every host having 2.4 addresses in the leak
on average. We discuss the security implications of use-after-free
for personal and business mail servers in Section 5.
3 GENERALIZATION OF USE-AFTER-FREE
In this section, we introduce a generalization of use-after-free that
allows to directly identify systems and environments where the
use-after-free problem exists.
The core of our generalization is a minimal abstraction of a
system with resources:
(1) The system has the concept of resources.
Resources (R) can be any entity, e.g., memory buffers, email
accounts, servers, or persons. Resources are unique and distinct,
i.e., any copy is a resource by itself and distinguishable from the
original resource.
(2) The system has the concept of resource identifiers.
Resource identifiers (IR) enable referring to a resource, e.g.,
pointers, email addresses, domain names, addresses. For any re-
source, there can be an arbitrary number of resource identifiers.
The link between a resource identifier and a resource can be
seen as an edge in a directed graph (IR → R).
(3) The system has the concept of identifier holders.
Identifier holders store resource identifiers for future access
to a resource, e.g., variables, business cards, humans, websites,
databases. For any resource identifier, there can be an arbitrary
number of identifier holders, having a copy of the identifier.
The link between identifier holders and resource identifiers can
again be seen as an edge in a directed graph (HI → IR).
The problem of use-after-free is silently exchanging a resource,
i.e., resource identifiers and identifier holders take no notice of the
change (cf. Figure 1). That is, the system allows transformation of
a directed graph G : HI → IR → R to a different directed graph
G′ : HI → IR → R′, i.e., the edge IR → R is replaced by the edge
IR → R′. Preventing use-after-free problems in such a system is
possible by cutting at least one of the edges of the graph upon
resource exchange, using one of the following two approaches:
(1) Resources cannot be exchanged.
Figure 1: Use-after-free in an abstract system: Resource R
can silently be replaced by resource R′ while IR and HI re-
main unchanged.
The edge HI → IR still exists, but the edge IR → R′ cannot be
created. Hence, IR either has no outgoing edge or it still linked
to R through the edge IR → R. However, this approach is not
practical in most scenarios as resources remain in use forever.
(2) Exchanging resources notifies identifier holders, i.e., the set of
identifier holders will be the empty set.
When R is released, any sub-graph HI → IR → R is updated
such that all edges HI → IR are removed, or the edges IR → R
are updated to IR → R′. These are viable solutions for traditional
use-after-free situations [10, 15, 37, 64, 72].
The negation of both mitigations, i.e., both an edge HI → IR and
an edge IR → R′ exist, directly yields that the transition illustrated
in Figure 1 is possible. Consequently, the link from HI → IR →
R′ exists, enabling use-after-free. Use-after-free is possible in any
system that can be abstracted to these properties.
3.1 Generalized Use-After-Free Attacks
In a use-after-free attack, an attacker tries to exchange a resource
without notification of the identifier holders. The attack works in
three steps or phases:
(1) Collection Phase: Free a resource
The attacker collects resource identifiers to attack, either by
triggering freeing of the resource, or by simply waiting for the
resource being released. The result of this step is a dangling
resource identifier (a dangling pointer), i.e., HI → IR → R
where R is not allocated anymore.
(2) Impersonation Phase: Allocate a resource with the same identifier
In this step, the attacker allocates a resource with the exact
same resource identifier, i.e., HI → IR → R′ where R′ is the
new resource. This resource mimics the original resource with
malicious variations to provide the attacker with information
or capabilities of the original resource. Common techniques for
this step are spraying (i.e., allocating enough resources until
one matches), grooming (i.e., exploiting knowledge of allocation
algorithms to allocate a matching resource at exactly the right
moment), or if the system allows it, by selectively allocating a
resource matching the dangling resource identifier.
(3) Exploitation Phase: Use the outdated resource identifier
In this step, an identifier holder uses the outdated resource
identifier, which now refers to the new counterfeit resource.
Consequently, the attacker obtains capabilities or information
intended for the original resource. In classical scenarios this
phase involves triggering some operation on the outdated re-
source identifier, or simply waiting until the outdated resource
identifier is used by an identifier holder.
Table 1: Systems susceptible to use-after-free.
Resource (R)
Memory buffer
Server
Email account
Resource Identifier (IR)
Pointer / Address
DNS entry / (Sub-)domain
Email address
Twitter account
Personal Phone
Twitter handle
Phone Number
Mailbox
Employee
Address
Office number
Identifier Holder (HI )
Variables
Links, databases, human memory
Links, third-party websites, databases, address books, hu-
man memory
Links, third-party websites, databases, human memory
Personal and business address books, third-party web-
sites, human memory
Personal and business address books, human memory
Human memory, business cards
3.2 Illustrative Examples of Generalized
Use-After-Free
Table 1 shows examples of systems that are susceptible to use-after-
free following from our generalization. Attacks on these systems
also follow the three steps of our generalized use-after-free attacks.
While use-after-free attacks on buffers in memory-unsafe lan-
guages have been studied for several years [4, 17], only recent work
has found that DNS entries [9, 39, 62] are susceptible to a similar
effect. The DNS entry is the resource identifier which points to a
resource, the IP address of the server. In the collection phase of use-
after-free attacks on DNS, the attacker finds DNS entries suitable
for the attack. In the impersonation phase, the attacker either uses
spraying, i.e., allocating a large number of machines such that one
of them has the right IP address, or grooming, i.e., performing a
targeted allocation or registration. The attacker sets up the server
to provide a malicious service instead of the former benign one.
In the exploitation phase, the attacker waits for victims to use the
attacker-controlled server.
Use-after-free attacks on Twitter handles [43] also work in these
three phases. The Twitter handle is the resource identifier which
points to a resource, the Twitter profile. In the collection phase,
the attacker gathers previously used Twitter handles. In the imper-
sonation phase, the attacker performs a targeted registration of a
free Twitter handle. The attacker sets up the profile for malicious
activity, e.g., identity theft. In the exploitation phase, the attacker
waits for victims to visit the fake profile.
Reuse of phone numbers [44] introduces the same effects. The
phone number is the resource identifier pointing to a person, i.e., the
resource. In the collection phase, the attacker gathers previously
used phone numbers. In the impersonation phase, the attacker
uses spraying, i.e., allocating a large number of phone numbers,
or grooming, i.e., choosing a specific phone number known to
be previously in-use. In the exploitation phase, the attacker uses
the phone number to authenticate with other services, e.g., social
networks or SMS TAN mechanisms (online banking).
This shows that our generalized description of use-after-free
allows analyzing the problem in a wide range of scenarios. In con-
current independent work, Borgolte et al. [8] observed a similar
connection between a vulnerabilities arising from IP address reuse
and traditional use-after-free attacks, which they hence called “IP
address use-after-free vulnerabilities”.
4 USE-AFTER-FREEMAIL
In this section, we study the case of use-after-free in free-mail sys-
tems, as an instance of the generalization presented in the previous
section. Free-mail systems comply with the three requirements
4
ResourceRResourceR′ResourceIdentifierIRIdentifierHolderHIwe identified. The free-mail accounts are the resources. Free-mail
accounts can be deleted, or they may even expire automatically
after a certain time of inactivity. Subsequently, an attacker can
re-register the free-mail account. Throughout this process, the iden-
tifier, i.e., the email address, remains unchanged, but now points to
a different free-mail account. Hence, the identifier holders (virtu-
ally any location where the email address is stored, including the
memory of friends and colleagues) take no notice of the change of
the underlying free-mail account.
The goal of Use-After-FreeMail attacks is to acquire sensitive
user data and access to user accounts, to abuse the data (e.g., bank ac-
count information) for malicious purposes, to impersonate the user,
or abuse the accounts for any other malicious activity (e.g., criminal
activities, abusing online shop accounts, demanding ransom, etc.).
As all use-after-free attacks, Use-After-FreeMail attacks work in
three phases. In the first phase, the collection phase (cf. Section 4.2),
the attacker gathers free-mail addresses of potential victims. In
the second phase, the impersonation phase (cf. Section 4.3), the
attacker re-registers free-mail accounts of potential victims found
in the collection phase. In the third phase, the exploitation phase (cf.
Section 4.4), the attacker uses the re-registered free-mail account to
authenticate with and use other websites and services. The other
websites and services then leak sensitive information directly to the
attacker, or provide a means for identity theft and ransom demands.
servers are typically well protected by means of flood protection,
grey-listing and generic error messages, to prevent leaking whether
an email address is valid or invalid on a large scale. This makes it dif-
ficult to determine whether an email address is valid by sending an
email or trying to access the IMAP or SMTP server. Trying to login
or to register a free-mail through the free-mail provider’s website
is typically protected using rate limitations and CAPTCHAs.
We found that this central challenge can be overcome by exploit-
ing modern web APIs provided by the website to offer a responsive
user interface using AJAX. This is certainly not the only approach
that can be pursued in practice, but we found it to be very fast
and reliable. When trying to register a free-mail address, the free-
mail service provides instant feedback through AJAX requests, to
show the user whether an email address is valid and available for
registration. We have found the protections applied to these inter-
faces are much weaker, in some cases we even found the API to
be unrestricted. The attacker can now act like an undecided user,
typing in the email aliases until all aliases have been tested. We fully
automated procedure and hence, automatically determine whether
an address is free to register or not, for an entire database leak.
To evaluate the practicality of our approach, we implemented
this attack step in a fully automated manner. Section 6 provides a
quantitative analysis of the collection phase, where we find that
33.5% of the free-mail accounts are free to register.
4.1 Attacker Model
In our attacker model, we make the assumptions that the attacker
(1) is able to acquire a several database leaks from online sources,
(2) has enough abilities or resources to implement several scripts
to automate steps of the attack,
(3) can either (a) acquire a large number of phone numbers, or
(b) register accounts with common authentication providers
(Google, Facebook, Twitter, etc.), i.e., one account per victim,
(4) can either (a) afford a CAPTCHA-solving service, or (b) use Tor
to avoid anti-bot mechanisms,
(5) for some attack variants, has enough abilities or resources to
run a mail server.
While working on the attack, we found that these assumptions
are easily met in practice. Note that despite this generic set of
assumptions any attack will still remain site-specific. The attacker
will have to adapt to every website to attack and, as discussed in
Section 8, websites may have appropriate countermeasures in place.
4.2 Collection Phase
The goal of the collection phase is gathering a significant amount
of email addresses of potential victims, i.e., email addresses that are
free to register. The search space of email addresses is too large to
be searched exhaustively. Hence, an attacker exploits additional
information to minimize the search space. In Use-After-FreeMail at-
tacks, an attacker acquires free-mail addresses from database leaks.
These addresses have been registered at some point in time, but
they may have been deleted or may have expired in the meantime.
The central challenge of the collection phase is to validate which
free-mail addresses are free to register. Free-mail providers in-
troduced several mechanisms to prevent abuse of their free-mail
addresses and to inhibit automated free-email registration. Mail
5
4.3 Impersonation Phase
In the impersonation phase, the attacker prepares all resources such
that the original resource is fully impersonated by the attacker’s
resource, i.e., the former free-mail account is replaced by the at-
tacker’s free-mail account. The exploitation of this use-after-free
situation happens in the following phase. The goal of the imper-
sonation phase is only to successfully register free-mail addresses
(from the collection phase). These addresses are ideally still used
by identifier holders that remain unaware that the original account
was deleted or expired, and that an attacker registered a free-mail
account with the same address.
Automated registration of an email can be tricky, because of
countermeasures providers installed. Some providers (e.g., Yahoo)
require text message verification for registration. Consequently,
an attacker would need a new phone number for every victim
free-mail address, which may be impractical for some attackers.
However, we found that this requirement can be overcome by using
accounts from other providers for the registration. That is, you can
register a Yahoo account using your Google account instead of a
phone number. Furthermore, the registration process is sometimes
protected using CAPTCHAs against robots registering free-mail
addresses. Solving CAPTCHAs can also be automated using online
CAPTCHA-solving services [50]. However, in our analysis we did
not use any CAPTCHA-solving service but instead focused on what
an attacker can do without such a service.
As the impersonation phase would already invade a user’s pri-
vacy, e.g., inevitably reading subjects and senders of emails ad-
dressed to the former owner of the free-mail account, we only
performed this step for users volunteering in our user case studies.
The qualitative analysis of these studies is presented in Section 7.
4.4 Exploitation Phase