为一个正则表达式，
。所编写的过程将应用于每个输入行，
要记住的主要事情是每个模式/操作过程位于主输入循环中个，且负责读取输入
丁能很复杂，
试输入行的规则，
于这3个组成部分，
尔可以把 awk 脚本看做由3个主要部分组成：处理输入前将做的处理，处理输
/^$/ I print "This is a blank line." }
只包含一条print 语句。
888
888
8
88
8888
888
8
它由语句、函数和表达式组成。
QQ群：
以确定动作是否将应用于这些输入行。我们将看到的操作
88
，用来表示一个空行。这个处理和我们以前所见到的一
，处理输入完成后做的处理。图7-1 解释了在 awk 脚本的
主输入循环或称为“处理过程中将做的处理”是主要的
50192241
88
8
指令被写成一系列的模式/动作过程。模式是用于
8888
那么打印“This is a blankline”
伴
- 150
而且一次一行。
888
8888
第七章 
1
8808
18808
1
8888
8888
88
编写 awk 脚本
1
1
于模式相
1
，我们将看
。这里的模
---
## Page 151
操作来跳过脚本中的其他部分。
注意，输入“4T”被标识为既是整数又是字符串。
print 语句。
#测试一下是整数、字符串还是空行。
类为整数、字符串或空行。
给以上的脚本加入几个新的规则。现在的脚本要对输入进行分析，并将他们归
来调用。)这个结果告诉我们在test 中有3个空行，脚本忽略了非空的行。
(从这里开始，
文件，这个文件中包含3个空行，然后使下面的命令执行这个脚本：
如果我们将这个脚本放在一个称为 awkscr 的文件中，并使用名为test 的输入
则
个使用标准输入的运行示例：
更
总的思想是，
川。你可以编写一个更严格的规则以防止一行与多条规则相匹配。也可以编写
多”
This is a blank line.
That is an integer
$ awk -f awkscr
This is a blank
This is a blank line.
$ awk -f awkscr test
CTRL-D 
That is an integer
44
RETURN
This is a string
That is an integer
This is a string
4
This is
。因此，
$/ I print "This is a blank line."
元字符+是正则表达式元字符扩展急中的一部分，
如果一个输入行能够和任何一个模式匹配，
 a blank
我们将假定脚本放在一个单独的文件中，
，包含一个或多个数字序列的行将被看作是一个整数。一下是一
QQ群：
Iine
Iine.
50192241
- 151 -
一行可以匹配一条或多条规
第七章 
并使用-F 命令行选项
那么就执行相关的
它表示“一个或
编写 awk 脚本
---
## Page 152
awk 允许使用字段操作符$来指定字段。在该操作符后面跟着一个数字或变量,
字段和引用的分离
连续的两个或多个空格和/或制表符被作为一个分隔符。
段，由一个空格或制表符进行分隔。
awk 假设它的输入是有结构的，
记录和字段
的程序脚本中的结构一直，否则将无法工作。
将这些信息嵌入在程序脚本中是很有用的，因此除非输入文件的结构和所编写
下：
注释指出了脚本的名字是blank.awk，
在程序的任何地方都不能用单引号，
注意：如果以命令行的方式提供awk程序，而不是将它写入一个文件中，
和 sed 不同，awk 允许在程序的任何地方添加注释。
在写脚本时添加注释是一个好的习惯。
程序脚本的注释
（用来分隔字段的字符被称为分隔符）。下面的 names 文件中的记录有3个字
下，它将每个输入行作为一条记录，而将由空格或制表符分隔的单词作为字段
学习编写脚本来读取包含姓名和电话号码的文件。这个程序的介绍性注释如
的脚本，注释可以用来描述输入文件的预期的结构。例如，
当我们开始编写叫本事，我们将用注释来对脚本进行描述：
我们通过这一章来解释模式匹配规则的应用。
 John Robinson 666-555-1111 
#blodklist.awk－打印表格中的名字和地址。
# blank. awk 
QQ群：
-- Print message for each blank line.
50192241
而不只是一串无规则的字符。在最简单的情况
- 152 -
否则 shell将对它进行解释而导致错误。
，并简洁的描述了脚本的功能。对于较长
，注释以字符“#”开始，以换行符结束。
第七章 
，在下一节，我们将
编写 awk 脚本
那么
---
## Page 153
种安排使得在报告中的记录由空格隔开。我们可以执行这个脚本并使用下面的
下面两个地址记录中的字段是由逗号分隔的。
双引号包围着。
可以在命令行中使用-F选项改变字段的分隔符。它后面跟着（或者紧跟，或者
可以用任何计算值为整数的表达式来表示一个字段，而不只是用数字和变量。
段分隔符是的只识别制表符。这样，awk 将只识别该记录中的两个字段。
个制表符。如果想将姓和名字结合起来作为一个字段，
包含3个字段的记录：在名字和姓之间有一个空格，在姓和电话号码之间有一
号使得输入的各值之间有一个空格（随后，我们将讨论输出字段分隔符
$1表示名字，
名字，
“$0”表示整个输入记录。下面的例子显示了第一个字段是姓，第二个字段是
用于标识字段的位置。”$1”表示第一个字段，
第
“\t”是表
（OFS）
一个print语句指定一个空串（””）
空白）分隔符。下面的例子将字段分隔符修改为制表符。
# blocklist.awk 
$ awk -F"\t"’{ print $2 }′
666-555-1111
Robinson John 666-555-1111 
$ awk ’{print $2，$1，$3 }′
#
Awk程序可以用块格式打印姓名和地址
John Robinson, Koren Inc. ,978 4th Ave. ,Boston, MA 01760, 696-0987 
S
echo a b c d | awk ′ BEGIN { one = 1; two = 2↓
输入文件—名字、
{ print $(one + two) }'
后面是电话号码。
，它的值中输出的逗号默认为空格）。在这个例子中，
表示一个实际的制表符的转义序列（在下面讨论），它应由单引号或
print $4, $5 # city,
pri
pri
print $1 # name
{ print 
，$2 表示姓，
int $3 # street 
int $2 :
QQ群：
# company
－用块格式打印姓名和地址
# output blank line
而$3 表示电话号码。Print 语句中分隔每个参数的逗
50192241
state zip
-153.
names
names
）（记住print 本身输出当前行）。这
”$2”表示第二个字段等等。
第七章
可以通过显式地指定字
一个输入行形成
编写 awk 脚本
---
## Page 154
名字或其他地方的名字相匹配，其中在这些公司的名字或其他地方的名字中包
这里的MA于马萨诸塞州邮政局的缩写相匹配。然而，MA也可能于一个公司的
我们可以仅选择居住在特定州的人名。我们可以编写为：
作符使得只打印出特定的名字或地址。因此，如果我们有一个长的名字列表，
这个程序脚本用来输出所有的输入行，但我们可以编写匹配规则来修改这个操
这些给了你一个关于如何使用 awk，
间插入逗号和一个空格。这个程序脚本可以通过以下命令行来执行：
我们现在在程序中使用它来打印出姓名和电话号码。
在脚本中指定域分隔符是一个好的习惯并且是非常方便的。可以通过定义系统
产生结果如下：
命令指定字段分隔符为逗号：
形
必
变
.意，我们在脚本中使用空行来改善可读性。在print 语句的两个输出字段之
必须在由 BEGIN规则控制的操作中指定这个变量。
量FS 来改变字段分隔符。因为这个必须在读取第一个舒服行之前执行，所以
/MA/ {print $1 ", “ $6 }
#输入文件-名字、公司、街道、城市、州和邮编、电话
# phonelist.awk－打印姓名和电话号码
 awk -F, -f blocklist.awk names 
Phyllis Chapman, 879-0900
John Robinson, 696-0987 
$ awk -f phonelist.awk names
{ print $1 
BEGIN { FS = ",
BEGIN {FS =","}
Amesbury MA 01881
34 Sea Drive
GVE Corp.
Phyllis Chapman
Boston MA 01760
978 4th Ave.
John Robinson
Koren Inc.
QQ群：
”#用逗号分割字段
50192241
来处理可识别的结构化数据的基本概念。
- 154
第七章 
编写 awk 脚本
---
## Page 155
符，在它们之间的字段值为空串。
个字符出现的任何地方都将分隔出另外一个字段。如果出现两个连续的分隔
作为分隔符来访问 UNIX /etc/passwd 文件。当FS 表示任何单个字符时，在这
第二个方法是使用其他单个字符来分隔字段。例如，awk程序经常使用“：”
这个正则表达式可以分段进行解释。
这个规则和下列的形式相匹配：
模式匹配是仅与长途电话号码相匹配。下面的正则表达式查找一个区域代码。
记录划分为字段的方法。
可以使用3个完全不同的方法使 awk 分隔字段。
字段的划分：完整的问题
（？”表示查找零个或一个左括号；反斜杠能够防止将“（”解释为用于分组
这个规则将与所有其第五个字段不包含“MA”的记录相匹配一个更有挑战性的
可以使用组合符号（！）来反转这个规则的意义。
字段的正则表达式：
含字母“MA”，我们可以测试匹配指定的字段。使用（~）操作符可以测试一个
或
4
隔
字
后
法
制表位来分隔。因为FS 的默认值为一个空格，所以这也是通常情况下awk 将
空白字符和结尾空白字符（空格和/或制表符）将被忽略。并且字段空格和/
字段。要实现这种方法，
后用”[0~9]+”查找一到多位数字，随后跟一个连字符，最后跟一到多位数
$6 ~ /1?(-|)?\(?[0-9]+\)?(|-)?[0-9]+-[0-9]+/
$5 ！/MA/ {print $1"，“ $6}
1 (707)724-0000
1 707-724-0000
1-707-724-0000
(707) 724-0000
(707) 724-0000
707-724-0000
QQ群：
，可将FS设置为一个空格。在这种情况下，记录的前
50192241
- 155.
“1？”表示出现零个或一个1；“（-I
，第一个方法是用空白字符来分
第七章 
或什么也没有；
编写 awk 脚本
然
---
## Page 156
序列
表7-1：转义序列
用引号括起来。在字符串中可以使用在表7-1中列出的转义顺序。
常量有两种类型：字符串型或数字型（“red”或1）。
别，但这是大多数程序设计语言所具有的共同特性。
注2:
在括号中的任何3个字符之一都可以被解释为字段分隔符。
字符作为分隔符：
而使用第二种定义，
行可以分为3个字段：
这个命令行表示用一个或多个制表符来分隔字段。使用第一种定义，下面的一
则表达式，
一个表达式通过计算返回一个值。表达式由数字和字符串常量、变量、操作
可以使用表达式来存储、
表达式
这个命令行将每个制表符作为一个字段分隔符，而：
区别：
语，我们将它定义为“空的字符串”。）你可以发现以下各种不同表示之间的
边最长的非空的不重叠的”子串（注2）。
个正则表达式来解释。也就是说，字段分隔符将是与正则表达式匹配的“最左
最后一种方法是，如果你设置了不止一个字符作为字段分隔符，它将被作为一
FS ="[’:\t]"
FS = "\t"
abc\t\tdef
FS = "\t+"
并在附录二对它们做了总结。函数将在第九章“函数”中完整地介
《The AWK Programming Language》[Aho],第 60 页。
报警字符，通常是ASCIIBEL字符
描述
退格键
，我们将学习由常量、变量和操作符组成的表达式。
QQ群：
只能分隔为两个字段。可以使用一个正则表达式指定几个
操作和检索数据，
50192241
- 156
这些操作与 sed 中的有很大的区
（“null字符串”是一个技术术
。字符串在表达式中必须
第七章 
编写 awk 脚本
---
## Page 157
字段的值赋予变量w:
将两个字符串连接在一起，并将结果“HelloWorld”赋给变量 z。
下面的表达式表示将字符串“Hello”赋给z:
×是变量的名字、=是一个赋值操作符，1是一个数字常量。
美元符号（$）是引用字段操作符。下面的表达式表示把当前输入记录的第一个
空格是字符串连接操作符，表达式：
为数字，它的值为0.下面的表达式表示将一个值赋给x:
字符串值为0），
和数字型值，awk 能够根据表达式的前后关系来选择合适的值（不包含数字的
不必告诉 awk 什么类型的数据存储在一个变量中。每个变量有一个字符串型值
大小写很重要：Salary 和 salary 是两个不同的变量，变量不必进行说明，你
变量是引用值的标识符。定
lc
xbex
ppp\
t
八
。变量名只能由字母、
POSIX没有提供“\x”
"PluoM"OllaH，= Z
x=1