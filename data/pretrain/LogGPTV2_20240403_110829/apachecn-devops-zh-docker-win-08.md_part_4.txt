Docker Enterprise 运行 Kubernetes 和 Docker Swarm。Kubernetes 将在未来版本中支持 Windows 节点，因此您将能够在单个 Docker Enterprise 集群上将 Windows 容器部署到 Docker Swarm 或 Kubernetes。您可以使用 Docker Compose 文件将栈部署到 UCP，目标是 Docker Swarm 或 Kubernetes，UCP 将创建所有资源。
UCP 为您提供了全方位的管理功能:您可以创建、扩展和删除服务，检查和连接到运行服务的任务，以及管理运行群的节点。您需要的所有其他资源，如 Docker 网络、配置、机密和卷，都以同样的方式在 UCP 进行管理。
您可以运行混合 Docker 企业集群，其中 Linux 节点用于 UCP 和 DTR，Windows 节点用于您的用户工作负载。作为 Docker 的订阅服务，Docker 的团队支持您设置集群和处理任何问题，涵盖所有 Windows 和 Linux 节点。
# 导航 UCP 用户界面
你从主页登录 UCP。您可以使用 Docker Enterprise 内置的认证，从 UCP 手动管理用户，也可以连接到任何 LDAP 认证存储。这意味着您可以将 Docker Enterprise 设置为使用您组织的 AD，并让用户使用其 Windows 帐户登录。
UCP 主页是一个仪表板，显示了您的集群的关键性能指标、节点数量、服务以及当时运行的 Swarm 和 Kubernetes 服务，以及集群的整体计算利用率:
![](img/6daec606-9f03-42a5-bc82-c6ed29acc086.png)
从控制面板中，您可以导航到资源视图，这些视图为您提供了按资源类型分组的访问权限:服务、容器、映像、节点、网络、卷和机密。对于大多数资源类型，您可以列出现有资源，检查它们，删除它们，并创建新的资源。
UCP is a multi-orchestrator container platform, so you can have some applications running in Kubernetes and others in Docker Swarm on the same cluster. The Shared Resources section of the navigation shows the resources that are shared between the orchestrators, including images, containers, and stacks. This is a great way to support heterogeneous deliveries, or to evaluate different orchestrators in controlled environments.
UCP 为所有资源提供**基于角色的访问控制** ( **RBAC** )。您可以将权限标签应用于任何资源，并基于该标签保护访问。可以为团队分配标签权限，范围从无访问权限到完全控制权限，这确保了团队成员对所有具有这些标签的资源的访问。
# 管理节点
节点视图向您显示群集中的所有节点，列出操作系统和 CPU 体系结构、节点状态和节点管理器状态:
![](img/65b4a710-75ef-4d74-acd5-78405f58ec28.png)
我的群集中有六个节点:
*   两个用于混合工作负载的 Linux 节点:它们可以运行 Kubernetes 或 Docker Swarm 服务
*   两个只为 Docker Swarm 服务配置的 Linux 节点
*   两个仅用于 Docker Swarm 的窗口节点
这些节点运行所有的 UCP 和 DTR 容器。Docker Enterprise 可以配置为免除管理器节点运行用户工作负载，这也可以用于运行 DTR。这是为 Docker 企业服务隔离计算能力的好方法，以确保您的应用工作负载不会使管理组件缺乏资源。
在节点管理中，您可以通过图形方式查看和管理您有权访问的集群服务器。您可以将节点置于清空模式，允许您运行窗口更新或升级节点上的 Docker。您可以将工人提升为经理，将经理降级为工人，并查看将新节点加入群所需的令牌。
深入到每个节点，您可以看到服务器的总 CPU、内存和磁盘使用情况，并有一个显示使用情况的图表，您可以在 30 分钟到 24 小时的时间段内进行聚合:
![](img/58297ff5-c3fc-4b0c-b5df-a7744e6acdd6.png)
在“度量”选项卡中，有一个节点上所有容器的列表，显示了它们的当前状态和容器运行的映像。从容器列表中，您可以导航到容器视图，我稍后将介绍它。
# 卷
**卷**存在于节点级别而不是群级别，但是您可以在 UCP 跨所有群节点管理它们。如何管理群集中的卷取决于您使用的卷的类型。本地卷适用于将日志和指标写入磁盘，然后集中转发的全局服务等情况。
作为群集服务运行的持久数据存储也可以使用本地存储。您可以在每个节点上创建一个本地卷，但要为带有高容量 RAID 阵列的服务器添加标签。当您创建数据服务时，您可以使用一个约束来将其限制在 RAID 节点上，这样其他节点就永远不会在它们上面安排任务，并且在任务运行的地方，它们会将数据写入 RAID 阵列上的卷。
对于内部数据中心和云中的数据中心，您可以使用带有卷插件的共享存储。有了共享存储，即使容器移动到不同的群节点，服务也可以继续访问数据。服务任务将向共享存储设备上持久化的卷读写数据。Docker Store 上有许多可用的卷插件，包括 AWS 和 Azure 等面向云的服务、HPE 和 Nimble 的物理基础设施，以及 vSphere 等虚拟化平台。
Docker Enterprise uses the Cloudstor plugin to provide cluster-wide storage, and if you deploy with Docker Certified Infrastructure, then this is configured for you. At the time of writing, the plugin is only supported on Linux nodes, so Windows nodes are restricted to running local volumes. There are still many stateful application architectures that can work well in Docker Swarm with local volumes, but you need to configure them carefully.
存储是容器生态系统中非常关注的一个领域。正在出现的技术可以创建集群范围的存储选项，而不需要特定的基础架构。随着这些技术的成熟，您将能够运行具有高可用性和可扩展性的有状态服务，只需将集群上的磁盘汇集在一起。
卷的选项数量有限，因此创建卷需要指定驱动程序并应用任何驱动程序选项:
![](img/2b4af10f-fd2f-4090-99e7-480862e189a9.png)
Permissions can be applied to volumes, such as other resources, by specifying a collection where the resource belongs to. Collections are how UCP enforces role-based access control to limit access.
本地卷是在每个节点上创建的，因此需要命名卷的容器可以在任何节点上运行，并且仍然可以找到该卷。在 UCP 创建的混合群集中，在每个节点上创建本地卷，并显示装载卷数据的服务器上的物理位置:
![](img/adff0283-7fa3-42ee-b1bc-5260cf8f8a29.png)
UCP 为您提供了集群中所有资源的单一视图，包括每个节点上的卷和可用于运行容器的映像。
# 形象
UCP 不是一个映像登记处。DTR 是 Docker Enterprise 中的企业私有注册中心，但是您可以使用 UCP 管理每个节点上 Docker 缓存中的映像。在 images 视图中，UCP 向您展示了哪些映像已在群集节点上提取，它还允许您提取映像，这些映像会下载到每个节点上:
![](img/c64c83a7-f56b-46e5-ab53-05edf617388c.png)
Docker 映像被压缩以供分发，当您拉取映像时，Docker 引擎会解压缩图层。有一些特定于操作系统的优化，可以在提取完成后立即启动容器，这就是为什么您不能在 Linux 主机上提取 Windows 映像，反之亦然。UCP 将尝试在每台主机上提取映像，但如果有些主机因操作系统不匹配而失败，它将继续处理剩余的节点。如果不匹配，您将看到错误:
![](img/03333dcf-1a6d-49b1-ba17-063ec6e62f06.png)
在映像视图中，您可以深入查看映像的详细信息，包括图层的历史记录、运行状况检查、任何环境变量和公开的端口。基本细节还会向您显示映像的操作系统平台、虚拟大小以及创建日期:
![](img/161ff9ad-3d91-44d2-8864-8b1606fbcbe7.png)
在 UCP，您也可以从集群中删除映像。您可能有一个策略，只保留集群上的当前和以前的映像版本，以允许回滚。其他映像可以安全地从 Docker Enterprise 节点中删除，将所有以前的映像版本留在 DTR，以便在需要时可以将其取出。
# 网络
网络管理很简单，UCP 提供了与其他资源类型相同的界面。网络列表显示了群集中的网络，这些网络可以添加到应用了 RBAC 的集合中，因此您将只能看到您被允许看到的网络。
网络有几个低级选项，允许您指定 IPv6 和自定义 MTU 数据包大小。Swarm 模式支持加密网络，其中节点之间的流量是透明加密的，并且可以通过 UCP 启用。在 Docker 企业集群中，您将使用覆盖驱动程序来允许服务在虚拟网络中跨集群节点进行通信:
![](img/fb40e1e0-5d11-45d4-8471-8326cb0fe93e.png)
Docker 支持一种特殊类型的群网络，称为**入口网络**。入口网络为外部请求提供负载平衡和服务发现。这使得端口发布非常灵活。在 10 节点集群上，您可以在具有三个副本的服务上发布端口`80`。如果一个节点在端口`80`上接收到一个传入请求，但是它没有运行任何一个服务任务，Docker 会智能地将其重定向到一个正在运行任务的节点。
Ingress networks are a powerful feature that work the same for Linux and Windows nodes in a Docker Swarm cluster. I cover them in more detail in [Chapter 7](07.html), *Orchestrating Distributed Solutions with Docker Swarm*.
网络也可以通过 UCP 删除，但前提是没有附加容器。如果您定义了使用网络的服务，如果您试图删除它，您将收到一条警告。
# 部署栈
使用 UCP 部署应用有两种方式，类似于使用`docker service create`部署单个服务，以及使用`docker stack deploy`部署完整的合成文件。栈是最容易部署的，并且允许您使用已经在预生产环境中验证过的合成文件。
在本章的源代码中，文件夹`ch08-docker-stack`包含使用集群模式在 Docker Enterprise 上运行 NerdDinner 的部署清单。`core docker-compose.yml`文件与[第 7 章](07.html)、*中提到的使用 Docker Swarm* 编排分布式解决方案的文件相同，但是在覆盖文件中有一些更改，要部署到我的生产集群中。我正在利用我在 Docker Enterprise 中拥有的混合集群，并且我正在为所有开源基础设施组件使用 Linux 容器。
对于使用 Linux 容器而不是 Windows 的服务来说，只有两个变化:映像名，以及确保容器计划在 Linux 节点上运行的部署约束。以下是文件`docker-compose.hybrid-swarm.yml`中 NATS 消息队列的覆盖:
```
message-queue:
  image: nats:1.4.1-linux
  deploy:
    placement:
      constraints: 
        - node.platform.os == linux
```
我使用了与[第 7 章](07.html)、*相同的方法，用 Docker Swarm* 和`docker-compose config`编排分布式解决方案，将覆盖文件连接在一起并导出到`docker-swarm.yml`中。我可以将我的 Docker 命令行界面连接到集群，并使用`docker stack deploy`部署应用，或者我可以使用 UCP 用户界面。在“栈”视图中的“共享资源”下，我可以单击“创建栈”并选择编排器，然后上传一个合成 YML 文件:
![](img/def85847-d39d-44ba-b2ff-f6d639a85227.png)