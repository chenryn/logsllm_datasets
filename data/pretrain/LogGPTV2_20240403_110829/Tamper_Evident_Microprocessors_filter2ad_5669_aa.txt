title:Tamper Evident Microprocessors
author:Adam Waksman and
Simha Sethumadhavan
2010 IEEE Symposium on Security and Privacy
Tamper Evident Microprocessors
Adam Waksman
Department of Computer Science
Columbia University
New York, USA
PI:EMAIL
Simha Sethumadhavan
Department of Computer Science
Columbia University
New York, USA
PI:EMAIL
Abstract—Most security mechanisms proposed to date unques-
tioningly place trust in microprocessor hardware. This trust,
however, is misplaced and dangerous because microprocessors
are vulnerable to insider attacks that can catastrophically com-
promise security, integrity and privacy of computer systems. In
this paper, we describe several methods to strengthen the funda-
mental assumption about trust in microprocessors. By employing
practical, lightweight attack detectors within a microprocessor,
we show that it is possible to protect against malicious logic
embedded in microprocessor hardware.
We propose and evaluate two area-efﬁcient hardware methods
— TRUSTNET and DATAWATCH — that detect attacks on
microprocessor hardware by knowledgeable, malicious insiders.
Our mechanisms leverage the fact that multiple components
within a microprocessor (e.g., fetch, decode pipeline stage etc.)
must necessarily coordinate and communicate to execute even
simple instructions, and that any attack on a microprocessor
must cause erroneous communications between microarchitec-
tural subcomponents used to build a processor. A key aspect of
our solution is that TRUSTNET and DATAWATCH are themselves
highly resilient to corruption. We demonstrate that under realistic
assumptions, our solutions can protect pipelines and on-chip
cache hierarchies at negligible area cost and with no performance
impact. Combining TRUSTNET and DATAWATCH with prior
work on fault detection has the potential to provide complete
coverage against a large class of microprocessor attacks.
Index Terms—hardware security, backdoors, microprocessors,
security based on causal structure and division of work.
I. INTRODUCTION
One of the key challenges in trustworthy computing is
establishing trust
in the microprocessors that underlie all
modern IT. The root of trust in all software systems rests
on microprocessors because all software is executed by a
microprocessor. If the microprocessor cannot be trusted, no
security guarantees can be provided by the system. Providing
trust in microprocessors, however, is becoming increasingly
difﬁcult because of economic, technological and social fac-
tors. Increasing use of third-party “soft” intellectual property
components,
the global scope of the chip design process,
increasing processor design complexity and integration, the
growing size of processor design teams and the dependence
on a relatively small number of designers for a sub-component,
all make hardware highly susceptible to malicious design.
A sufﬁciently motivated adversary could introduce backdoors
during hardware design. For instance, a hardware designer, by
changing only a few lines of Verilog code, can easily modify
an on-chip memory system to send data items it receives to
1081-6011/10 $26.00 © 2010 IEEE
DOI 10.1109/SP.2010.19
173
a shadow address in addition to the original address. Such
backdoors can be used in attacking conﬁdentiality e.g., by
exﬁltrating sensitive information, integrity e.g., by disabling
security checks such as memory protection, and availability
e.g., by shutting down the component based on a timer or an
external signal. Some recent high-proﬁle attacks have been at-
tributed to untrustworthy microprocessors [10]; hardware trust
issues have been a concern for a while now in several domains,
including in military and public safety equipment [67], and this
issue has attracted media attention lately [45].
Because hardware components (including backdoors) are
architecturally positioned at the lowest layer of a computa-
tional device, it is very difﬁcult to detect attacks launched or
assisted by those components: it is theoretically impossible1
to do so at a higher layer e.g., at the operating system or
application, and there is little functionality available in current
processors and motherboards to detect such misbehavior. The
state of practice is to ensure that hardware comes from a
trusted source and is maintained by trusted personnel — a
virtual impossibility given the current design and manufac-
turing realities. In fact, our inability to catch accidental bugs
with traditional design and veriﬁcation procedures, even in
high-volume processors [59], makes it unlikely that hidden
backdoors will be caught using the same procedures, as this
is an even more challenging task.2
In this paper we investigate how microprocessor trust can
be strengthened when manufactured via an untrusted design
ﬂow. Figure 1 shows the standard steps used to manufacture
microprocessors. This paper focuses on one of the initial
production steps, which is the coding phase of hardware design
(register transfer level, or RTL). Any backdoor introduced
during the initial phase becomes progressively more difﬁcult
to catch as it percolates through optimizations and tools in the
later phases. Prior work on detecting attacks on hardware by
malicious foundries [12][17][16][24][40][53][67] assumes as
a starting point the availability of a trusted RTL model, called
a golden netlist. Our work aims to provide this trusted, golden
1It should be noted, however, that in practice it may be possible to detect
discrepancies in the state of the system, such as cache misses. Such detection
cannot be guaranteed, and it
largely depends on both external artifacts
used for the detection (e.g., a reference time source) and on sub-optimal
implementation of the backdoor.
2The International Technology Roadmap for Semiconductors notes that the
number of bugs escaping traditional audit procedures will increase from ﬁve
to nine per 100,000 lines of code in the coming years [2].
(cid:7)(cid:22)(cid:10)(cid:17)(cid:12)(cid:10)(cid:20)(cid:12)(cid:1)(cid:4)(cid:16)(cid:11)(cid:20)(cid:18)(cid:19)(cid:20)(cid:18)(cid:11)(cid:13)(cid:21)(cid:21)(cid:18)(cid:20)(cid:1)(cid:2)(cid:13)(cid:21)(cid:16)(cid:14)(cid:17)(cid:1)(cid:6)(cid:20)(cid:18)(cid:11)(cid:13)(cid:12)(cid:23)(cid:20)(cid:13)
(cid:9)(cid:25)(cid:16)(cid:14)(cid:20)(cid:17)(cid:20)(cid:14)(cid:12)(cid:28)(cid:20)(cid:24)(cid:23)(cid:27)(cid:1)
(cid:7)(cid:20)(cid:18)(cid:19)(cid:4)(cid:21)(cid:16)(cid:30)(cid:16)(cid:21)(cid:1)
(cid:5)(cid:16)(cid:27)(cid:20)(cid:18)(cid:23)(cid:1)
(cid:5)(cid:16)(cid:27)(cid:20)(cid:18)(cid:23)(cid:1)
(cid:11)(cid:12)(cid:21)(cid:20)(cid:15)(cid:12)(cid:28)(cid:20)(cid:24)(cid:23)(cid:1)
(cid:8)(cid:19)(cid:32)(cid:27)(cid:20)(cid:14)(cid:12)(cid:21)(cid:1)(cid:5)(cid:16)(cid:27)(cid:20)(cid:18)(cid:23)(cid:1)
(cid:2)(cid:21)(cid:24)(cid:31)(cid:4)(cid:21)(cid:16)(cid:30)(cid:16)(cid:21)(cid:3)(cid:1)
(cid:10)(cid:12)(cid:25)(cid:16)(cid:24)(cid:29)(cid:28)(cid:1)(cid:12)(cid:23)(cid:15)(cid:1)
(cid:6)(cid:12)(cid:13)(cid:26)(cid:20)(cid:14)(cid:12)(cid:28)(cid:20)(cid:24)(cid:23)(cid:1)
(cid:5)(cid:16)(cid:25)(cid:21)(cid:24)(cid:32)(cid:22)(cid:16)(cid:23)(cid:28)(cid:1)
(cid:8)(cid:20)(cid:23)(cid:21)(cid:22)(cid:5)(cid:3)(cid:8)(cid:1)(cid:20)(cid:32)(cid:23)(cid:1)(cid:2)(cid:10)(cid:22)(cid:10)(cid:9)(cid:10)(cid:22)(cid:11)(cid:15)(cid:1)(cid:23)(cid:24)(cid:37)(cid:24)(cid:22)(cid:37)(cid:36)(cid:1)(cid:21)(cid:20)(cid:22)(cid:29)(cid:23)(cid:33)(cid:33)(cid:35)(cid:36)(cid:1)(cid:28)(cid:32)(cid:36)(cid:24)(cid:35)(cid:37)(cid:24)(cid:23)(cid:1)
(cid:21)(cid:39)(cid:1)(cid:31)(cid:20)(cid:30)(cid:28)(cid:22)(cid:28)(cid:33)(cid:38)(cid:36)(cid:1)(cid:22)(cid:27)(cid:28)(cid:34)(cid:1)(cid:23)(cid:24)(cid:36)(cid:28)(cid:26)(cid:32)(cid:24)(cid:35)(cid:36)(cid:1)(cid:2)(cid:32)(cid:33)(cid:1)(cid:34)(cid:35)(cid:28)(cid:33)(cid:35)(cid:1)(cid:36)(cid:33)(cid:30)(cid:38)(cid:37)(cid:28)(cid:33)(cid:32)(cid:3)
(cid:16)(cid:35)(cid:28)(cid:33)(cid:35)(cid:1)(cid:17)(cid:33)(cid:35)(cid:29)(cid:14)(cid:1)(cid:15)(cid:24)(cid:37)(cid:24)(cid:22)(cid:37)(cid:28)(cid:33)(cid:32)(cid:1)(cid:33)(cid:25)(cid:1)(cid:21)(cid:20)(cid:22)(cid:29)(cid:23)(cid:33)(cid:33)(cid:35)(cid:36)(cid:1)(cid:28)(cid:32)(cid:36)(cid:24)(cid:35)(cid:37)(cid:24)(cid:23)(cid:1)(cid:21)(cid:39)(cid:1)
(cid:31)(cid:20)(cid:30)(cid:28)(cid:22)(cid:28)(cid:33)(cid:38)(cid:36)(cid:1)(cid:25)(cid:33)(cid:38)(cid:32)(cid:23)(cid:35)(cid:28)(cid:24)(cid:36)(cid:1)(cid:18)(cid:6)(cid:7)(cid:4)(cid:1)(cid:6)(cid:11)(cid:4)(cid:1)(cid:6)(cid:12)(cid:4)(cid:1)(cid:7)(cid:9)(cid:4)(cid:1)(cid:9)(cid:5)(cid:4)(cid:1)(cid:10)(cid:8)(cid:4)(cid:1)(cid:11)(cid:13)(cid:19)
Fig. 1. Microprocessor design ﬂow and scope of this paper.
netlist.
The traditional approach to building trustworthy systems
from untrustworthy components is to redundantly perform a
computation on several untrustworthy components and use
voting to detect faulty behavior. For example, N processors
designed by different designers can run the same instructions,
and the most popular output can be accepted. This solution,
however, is not viable for microprocessors because it increases
the initial design cost signiﬁcantly by increasing the size of
the design team and veriﬁcation complexity of the design.
This solution also increases the recurring operational costs by
decreasing performance and increasing power consumption.
In this paper, we describe a novel method for building a
trustworthy microprocessor (at low cost) from untrusted parts,
without the duplication required by the N version model.
Our technique exploits the standard division of work be-
tween different sub-components (or units) within a micropro-
cessor, universally available in microprocessor designs. We
do this by recognizing simple relationships that must hold
between on-chip units. The underlying observation that drives
our technique is that the execution of any instruction in a
microprocessor consists of a series of separate but tightly
coupled microarchitectural events. For example, a memory
instruction, in addition to using a cache unit needs to use the
fetch, decode and register units. We take advantage of this
cooperation in order to detect tampering by noticing that if
one unit misbehaves, the entire chain of events is altered.
We explain our technique with an analogy: say, Alice, Bob
and Chris are involved in a fund raiser. Alice is the Chief
Financial Ofﬁcer, Chris is a donor, and Bob is a malicious
accountant. Let us say Chris makes a donation of $100 towards
the fund-raiser and makes the payment to Bob. Let us also
say Alice follows all probable donors on Twitter so that she
can send a thank you note as soon as donors post tweets
on their charitable deeds. Chris tweets: “Donated $100 to
charity.” Malicious Bob swipes $10 off and reports to Alice
that Chris only donated $90. Of course, Alice catches Bob
because she can predict Bob’s output based on Bob’s input
from Chris. Applying this analogy to our microprocessor, a
malicious cache unit cannot send two outputs when in fact
only one memory write instruction has been decoded. Any
unit that observes the output of the instruction decoder and
output of the cache will be able to tell that tampering has
happened along the way.
Our method relies on the fact that cooperating units are
not simultaneously lying — a reasonable assumption because
high-level design engineers on a microprocessor project are
typically responsible for only one or few processor units but
not all [26, 46]. Using these relationships, our system, called
TRUSTNET, is able to provide resilience against attacks to any
one unit, even if that unit is a part of TRUSTNET itself. Further,
TRUSTNET does not require that any speciﬁc unit is trusted. A
second system, called DATAWATCH, watches select data on the
chip in order to protect against attacks that alter data values
without directly changing the number of outputs. Continuing
on the previous analogy, this would be a case where Bob,
the evil accountant, passed on the full $100, but passed on
Canadian dollars instead of American dollars, keeping the
difference for himself. When DATAWATCH is active, Chris’
tweet would contain the fact that he donated American dollars,
tipping off Alice about Bob’s crime.
In this paper, we evaluate the resiliency of TRUSTNET
and DATAWATCH against a set of attacks implementable in
RTL during the initial processor design steps. We show that
TRUSTNET and DATAWATCH protect the pipeline and cache
memory systems for a microprocessor closely matching the
Sun Microsystems’ OpenSPARC T2 processor against a large
class of attacks at the cost of negligible storage (less than 2 KB
per core) and no performance loss. Additionally, TRUSTNET
and DATAWATCH, in concert with pre-existing solutions (partial
duplication [25]), can provide coverage against many known
hardware design level backdoors.
In summary, the primary contributions of this paper are:
• We present a taxonomy describing the attack space for
microprocessor designs. The key observation that forms the
basis of this taxonomy is that a microprocessor attack can only
change the number of instructions or corrupt instructions.
• We present a novel, general solution that exploits the division
of work and causal structure of events inherent in micropro-
cessors for detecting a large class of attacks created during
the initial stages of microprocessor design by knowledgeable,
venal, malicious insiders. To the best of our knowledge, we are
the ﬁrst to propose using violation of co-operation invariants
in a microprocessors to detect malicious attacks.
The rest of the paper is organized as follows: Section II
describes related work. Section III describes the threat model,
assumptions of our study and a taxonomy of attacks. In
Section IV we describe our solution. Section V presents
evaluation. We conclude and present directions for future
research in Section VI.
174
(cid:5)(cid:10)(cid:23)(cid:13)(cid:27)(cid:10)(cid:23)(cid:14)(cid:1)(cid:8)(cid:16)(cid:23)(cid:14)(cid:10)(cid:25)(cid:24)
(cid:9)(cid:20)(cid:25)(cid:23)(cid:26)(cid:24)(cid:25)(cid:14)(cid:13)(cid:1)
(cid:7)(cid:14)(cid:23)(cid:17)(cid:22)(cid:16)(cid:14)(cid:23)(cid:10)(cid:18)(cid:24)(cid:1)
(cid:9)(cid:20)(cid:25)(cid:23)(cid:26)(cid:24)(cid:25)(cid:14)(cid:13)
(cid:2)(cid:21)(cid:19)(cid:19)(cid:26)(cid:20)(cid:17)(cid:12)(cid:10)(cid:25)(cid:17)(cid:21)(cid:20)
(cid:11)(cid:14)(cid:25)(cid:27)(cid:14)(cid:14)(cid:20)(cid:1)
(cid:7)(cid:14)(cid:23)(cid:17)(cid:22)(cid:16)(cid:14)(cid:23)(cid:10)(cid:18)(cid:24)(cid:1)(cid:10)(cid:20)(cid:13)(cid:1)
(cid:6)(cid:17)(cid:12)(cid:23)(cid:21)(cid:22)(cid:23)(cid:21)(cid:12)(cid:14)(cid:24)(cid:24)(cid:21)(cid:23)
(cid:9)(cid:20)(cid:25)(cid:23)(cid:26)(cid:24)(cid:25)(cid:14)(cid:13)
(cid:6)(cid:17)(cid:12)(cid:23)(cid:21)(cid:22)(cid:23)(cid:21)(cid:12)(cid:14)(cid:24)(cid:24)(cid:21)(cid:23)
(cid:22)(cid:37)(cid:34)(cid:42)(cid:41)(cid:32)(cid:37)(cid:36)(cid:40)(cid:14)
(cid:23)(cid:39)(cid:42)(cid:40)(cid:41)(cid:29)(cid:28)(cid:1)(cid:21)(cid:39)(cid:37)(cid:27)(cid:29)(cid:40)(cid:40)(cid:37)(cid:39)(cid:1)(cid:19)(cid:37)(cid:28)(cid:42)(cid:34)(cid:29)(cid:40)
(cid:16)(cid:29)(cid:43)(cid:32)(cid:27)(cid:29)(cid:1)(cid:26)(cid:42)(cid:41)(cid:31)(cid:29)(cid:36)(cid:41)(cid:32)(cid:27)(cid:26)(cid:41)(cid:32)(cid:37)(cid:36)(cid:1)(cid:35)(cid:29)(cid:27)(cid:31)(cid:26)(cid:36)(cid:32)(cid:40)(cid:35)(cid:40)(cid:3)
(cid:22)(cid:37)(cid:34)(cid:42)(cid:41)(cid:32)(cid:37)(cid:36)(cid:40)(cid:14)
(cid:17)(cid:36)(cid:27)(cid:39)(cid:45)(cid:38)(cid:41)(cid:32)(cid:37)(cid:36)(cid:2)(cid:1)(cid:21)(cid:39)(cid:37)(cid:41)(cid:29)(cid:27)(cid:41)(cid:32)(cid:43)(cid:29)(cid:1)(cid:27)(cid:37)(cid:26)(cid:41)(cid:32)(cid:36)(cid:30)(cid:40)(cid:1)(cid:29)(cid:41)(cid:27)(cid:3)
(cid:6)(cid:10)(cid:18)(cid:17)(cid:12)(cid:17)(cid:21)(cid:26)(cid:24)(cid:1)
(cid:3)(cid:14)(cid:24)(cid:17)(cid:15)(cid:20)(cid:14)(cid:23)
(cid:9)(cid:20)(cid:25)(cid:23)(cid:26)(cid:24)(cid:25)(cid:14)(cid:13)
(cid:8)(cid:21)(cid:21)(cid:18)(cid:12)(cid:16)(cid:10)(cid:17)(cid:20)(cid:1)
(cid:6)(cid:10)(cid:18)(cid:17)(cid:12)(cid:17)(cid:21)(cid:26)(cid:24)(cid:1)
(cid:4)(cid:21)(cid:26)(cid:20)(cid:13)(cid:23)(cid:28)
(cid:18)(cid:36)(cid:27)(cid:32)(cid:28)(cid:29)(cid:36)(cid:41)(cid:40)(cid:14)(cid:1)(cid:24)(cid:6)(cid:5)(cid:25)
(cid:15)(cid:41)(cid:41)(cid:26)(cid:27)(cid:33)(cid:40)(cid:14)(cid:1)(cid:24)(cid:8)(cid:10)(cid:25)
(cid:3)(cid:10)(cid:8)(cid:14)(cid:13)(cid:6)(cid:10)(cid:9)(cid:12)(cid:2)(cid:1)(cid:4)(cid:5)(cid:6)(cid:12)(cid:1)(cid:15)(cid:10)(cid:11)(cid:7)
(cid:20)(cid:37)(cid:1)(cid:33)(cid:36)(cid:37)(cid:44)(cid:36)(cid:1)(cid:26)(cid:41)(cid:41)(cid:26)(cid:27)(cid:33)(cid:4)(cid:40)(cid:37)(cid:34)(cid:42)(cid:41)(cid:32)(cid:37)(cid:36)(cid:40)
(cid:22)(cid:37)(cid:34)(cid:42)(cid:41)(cid:32)(cid:37)(cid:36)(cid:40)(cid:14)
(cid:24)(cid:6)(cid:7)(cid:2)(cid:1)(cid:6)(cid:11)(cid:2)(cid:1)(cid:6)(cid:12)(cid:2)(cid:1)(cid:7)(cid:9)(cid:2)(cid:1)(cid:9)(cid:5)(cid:2)(cid:1)(cid:10)(cid:8)(cid:2)(cid:1)(cid:11)(cid:13)(cid:25)
Fig. 2.
Proposed work in the context of broader work on hardware
threats. Prior countermeasures against hardware threats rely on a trusted
microprocessor which this work aims to provide.
II. RELATED WORK
Microprocessors are one part of a large ecosystem of
hardware parts that forms the trusted computing base. There
has been a signiﬁcant amount of work over the past several
decades on protecting different aspects of the ecosystem (Fig-
ure 2). In this section, we discuss threats and countermeasures
against all classes of hardware, not just microprocessors.
So far hardware, collectively the processor, memory, Net-
work Interface Cards, and other peripheral and communication
devices, has been primarily susceptible to two types of attacks:
(1) non-invasive side-channel attacks and (2) invasive attacks
through external untrusted interfaces/devices. We deﬁne an
attack as any human action that intentionally causes hardware
to deviate from its expected functionality.
Physical side-channel attacks compromise systems by cap-
turing information about program execution by analyzing em-
anations such as electromagnetic radiation [31, 33, 42, 47, 53]
or acoustic signals [15, 44, 60] which occur naturally as
a byproduct of computation. These attacks are an instance
of covert channels [39] and were initially used to launch
attacks against cryptographic algorithms and artifacts (such
as “tamper-proof” smartcards [43][37]) but general-purpose
processors are also pregnable to such attacks. There have
been several attacks that exploit weaknesses in caches [5,
8, 19, 21, 48, 49, 50, 51, 51, 52] and branch predic-
tion [6, 7, 9]. Some countermeasures against these threats
include self-destructing keys [32, 35, 62, 72] and new circuit
styles that consume the same operational power irrespective