    }
修改为:
    window.addEventListener("message", (event)=>{
        if (event.origin !== "http://safe.com")
        return;
        ...
    }
###  漏洞检测
检测`postMessage`漏洞的方法是读取`JavaScript`代码。因为当定义了一个监听器后，需要按照事件数据流来分析代码是否以容易被攻击的函数结束。这里推荐两种方法来检测函数调用：
  * 1 . [J2EEScan](https://github.com/ilmila/J2EEScan)，从git仓库（[https://github.com/ilmila/J2EEScan）可以获得更新版本，而不是从](https://github.com/ilmila/J2EEScan%EF%BC%89%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%BE%97%E6%9B%B4%E6%96%B0%E7%89%88%E6%9C%AC%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BB%8E) `Burp AppStore`。
  * 2 . [BurpBounty](https://github.com/wagiro/BurpBounty) ([https://github.com/wagiro/BurpBounty)，定义一组用于搜索关键字的被动响应字符串，如](https://github.com/wagiro/BurpBounty\)%EF%BC%8C%E5%AE%9A%E4%B9%89%E4%B8%80%E7%BB%84%E7%94%A8%E4%BA%8E%E6%90%9C%E7%B4%A2%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E8%A2%AB%E5%8A%A8%E5%93%8D%E5%BA%94%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%A6%82) `postMessage` 、`addEventListener("message` 、 `.on("message"`。
## 0x03 hackerone 漏洞报告分析
如果你在hackerone平台搜索`PostMessage`漏洞报告关键字，将看到一些报告，有一些漏洞被发现的时间距离现在并不遥远，并且获得了丰厚的奖励。这里重点分析3篇Hackerone披露的报告，并提供一些利用/绕过`postMessage`漏洞的技巧。
###  DOM Based XSS in www.hackerone.com via PostMessage and Bypass (#398054)
在hackeronep披露的
[#398054](https://hackerone.com/reports/398054)报告中，通过Marketo中的不安全消息事件侦听器，`Dom
XSS`在Hackerone中被成功利用。代码流程如下图所示：
通过分析报告可以看出，如果响应的设置没有错误，它就会创建一个名为`u`的变量，并将其设置为`findCorrectFollowUpUrl`方法的返回值。这将对一个名为`followUpUrl`的响应对象的属性进行处理，该属性是在表单提交完成后重定向的URL。
但是HackerOne窗体并没有用到这个，攻击者通过将其设置为绝对URL，就可以控制`u`变量的值。后来这个变量被用来改变窗口的`location.href`。当向Hackerone窗口发送下图所示的`mktoResponse`消息时，窗口被重定向到JavaScript
URL，并执行代码`alert(document.domain)`。
这部分代码由三部分组成：
  * 1 . `mktoResponse`为`PostMessage`的第一个JSON元素，以调用函数:
    else if (d.mktoResponse){
        onResponse(d.mktoResponse)
    }
  * 2 . 为了能执行这个函数，需要一个JSON结构数据，其元素有`for`、`error`和`data`。如果`error`为`false`，则`repuest.success`执行：
    var requestId = mktoResponse["for"];
      var request = inflight[requestId];
      if(request){
        if(mktoResponse.error){
          request.error(mktoResponse.data);
        }else{
          request.success(mktoResponse.data);
  * 3 . 在这个函数中，`followUpUrl`值将关联到`u`，并传递给`location.href`。因此，有效payload`javascript:alert(document.domain)`触发XSS执行：
      var u = findCorrectFollowUpUrl(data);
      location.href = u;
这个漏洞提交之后，Hackerone团队修改了`OnMessage`函数，添加了一个对源的验证:
    if (a.originalEvent && a.originalEvent.data && 0 === i.indexOf(a.originalEvent.origin)) {
        var b;
        try {
            b = j.parseJSON(a.originalEvent.data)
        } catch (c) {
            return
        }
        b.mktoReady ? f() : b.mktoResponse && e(b.mktoResponse)
    }
###  Bypass #398054 (#499030)
@honoki在报告[#499030](https://hackerone.com/reports/499030)找到了上述#398054漏洞修复后的绕过办法。
在上述的修复代码中，变量`i`解析为`https://app-sj17.marketo.com/`，`indexOf`检查字符串中是否包含源。因此注册一个marcarian域名`.ma`，验证将被绕过:
    ("https://app-sj17.marketo.com").indexOf("https://app-sj17.ma")
如果之前的漏洞攻击代码托管在注册域名`https://app-sj17.ma`下，XSS依旧会被成功执行。
###  CVE-2020-8127: XSS by calling arbitrary method via postMessage in
reveal.js (#691977)
在报告[#691977](https://hackerone.com/reports/691977)中，@s_p_q_r提交了一个通过`PostMessage`成功利用的`DOM
XSS`。代码流程如下图所示:
首先，使用`addKeyBinding`方法调用`setupPostMessage`来定义带有恶意负载的JSON元素。然后，调用函数`showHelp()`在浏览器中展示出`registeredKeyBindings[binding].description`中定义的`malicios`有效payload。要利用此漏洞，使用以下代码:
这个代码片段中有三个部分:
  * 1 . 将第一个JSON元素作为`"method":"addKeyBinding"`，用于调用方法并应用到`args`:
    if( data.method && typeof Reveal[data.method] === 'function' ) {
        Reveal[data.method].apply( Reveal, data.args );
  * 2 . 为了到达函数`addKeyBinding`与参数`args`，构造一个JSON对象，包含`callback`、`key`、`description`：
    function addKeyBinding( binding, callback ) {
        if( typeof binding === 'object' && binding.keyCode ) {
            registeredKeyBindings[binding.keyCode] = {
                callback: callback,
                key: binding.key,
                description: binding.description
            };
        }
  * 3 . 调用`toggleHelp()`函数，在没有验证的情况下展现了包含payload的JSON数据，触发JavaScript执行：
    function showHelp() {
        ...
        for( var binding in registeredKeyBindings ) {
            if( registeredKeyBindings[binding].key && registeredKeyBindings[binding].description ) {
                html += '' + registeredKeyBindings[binding].key + '' + registeredKeyBindings[binding].description + '';
            }
        }
        ...
    }
## 0x04 绕过PostMessage漏洞的技巧
1 . 如果`indexOf()`被用来检查`PostMessage`的源，如果源包含在字符串中，有可能被绕过，如 **Bypass #398054
(#499030)** 中分析的那样。
2 .
如果使用`search()`来验证源，也有可能是不安全的。根据`String.prototype.search()`的文档，该方法接收一个常规的压缩对象而不是字符串,如果传递了正则表达式以外的任何东西，也将被隐式转换为正则表达的内容。例如：
    "https://www.safedomain.com".search(t.origin)
在正则表达式中，点(.)被视为通配符。换句话说，源的任何字符都可以用一个点来代替。攻击者可以利用这一特点，使用一个特殊的域而不是官方的域来绕过验证，比如`www.s.afedomain.com`就可以绕过上述语法的验证。
3 .
如果使用了`escapeHtml`函数，该函数不会创建一个新的已转义的对象，而是重写现有对象的属性。这意味着，如果我们能够创建具有不响应`hasOwnProperty`的受控属性的对象，则该对象将不会被转义。例如，`File`对象非常适合这种场景的利用，因为它有只读的`name`属性，使用这个属性，可以绕过`escapeHtml`函数：
    // Expected to fail:
    result = u({
      message: "'\"\\"
    });
    result.message // "'&quot;&lt;b&gt;\"
    // Bypassed:
    result = u(new Error("'\"\\"));
    result.message; // "'"\"
## 0x05 hackerone上PostMessage漏洞报告推荐
[Hackerone report #168116](https://hackerone.com/reports/168116)  
(Twitter: Insufficient validation on Digits bridge)
[Hackerone report #231053](https://hackerone.com/reports/231053)  
(Shopify: XSS on any Shopify shop via abuse of the HTML5 structured clone
algorithm in postMessage listener on “/:id/digital_wallets/dialog”)
[Hackerone report #381356](https://hackerone.com/reports/381356)  
(HackerOne: Client-Side Race Condition using Marketo, allows sending user to
data-protocol in Safari when form without onSuccess is submitted on
www.hackerone.com)
[Hackerone report #207042](https://hackerone.com/reports/207042)  
(HackerOne: Stealing contact form data on www.hackerone.com using Marketo
Forms XSS with postMessage frame-jumping and jQuery-JSONP)
[Hackerone report #603764](https://hackerone.com/reports/603764)  
(Upserve: DOM Based XSS via postMessage at
)
[Hackerone report #217745](https://hackerone.com/reports/217745)  
(Shopify: XSS in $shop$.myshopify.com/admin/ via “Button Objects” in malicious
app)
####  参考文献