title:A security framework for the analysis and design of software attestation
author:Frederik Armknecht and
Ahmad-Reza Sadeghi and
Steffen Schulz and
Christian Wachsmann
A Security Framework for the Analysis and Design
of Software Attestation
Frederik Armknecht
Universität Mannheim,
Germany
PI:EMAIL
Ahmad-Reza Sadeghi
Technische Universität
Darmstadt (CASED),
Germany
PI:EMAIL
Christian Wachsmann
Intel CRI-SC at TU Darmstadt,
Germany
PI:EMAIL
∗
Steffen Schulz
Intel Corporation
PI:EMAIL
ABSTRACT
Software attestation has become a popular and challenging
research topic at many established security conferences with
an expected strong impact in practice. It aims at verifying
the software integrity of (typically) resource-constrained em-
bedded devices. However, for practical reasons, software at-
testation cannot rely on stored cryptographic secrets or ded-
icated trusted hardware. Instead, it exploits side-channel in-
formation, such as the time that the underlying device needs
for a speciﬁc computation. As traditional cryptographic so-
lutions and arguments are not applicable, novel approaches
for the design and analysis are necessary. This is certainly
one of the main reasons why the security goals, properties
and underlying assumptions of existing software attestation
schemes have been only vaguely discussed so far, limiting
the conﬁdence in their security claims. Thus, putting soft-
ware attestation on a solid ground and having a founded
approach for designing secure software attestation schemes
is still an important open problem.
We provide the ﬁrst steps towards closing this gap. Our
ﬁrst contribution is a security framework that formally cap-
tures security goals, attacker models and various system and
design parameters. Moreover, we present a generic software
attestation scheme that covers most existing schemes in the
literature. Finally, we analyze its security within our frame-
work, yielding suﬃcient conditions for provably secure soft-
ware attestation schemes. We expect that such a consolidat-
ing work allows for a meaningful security analysis of existing
schemes, supports the design of secure software attestation
schemes and will inspire new research in this area.
∗At the time of writing this author was aﬃliated with Ruhr-
University Bochum, Germany, Macquarie University, Aus-
tralia as well as the Intel Collaborative Research Institute
for Secure Computing at TU Darmstadt, Germany.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516650.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
Keywords
software attestation; security framework; keyless crypto
1.
INTRODUCTION
Embedded systems are increasingly permeating our infor-
mation society, being more and more used also in security-
and safety-critical applications. This generates an increasing
need for enabling technologies that can validate and verify
the integrity of a system’s software state against malicious
code. In this context, software attestation has become a pop-
ular research topic at many established security conferences
with a large body of literature [15, 24, 26, 11, 23, 25, 22, 9,
21, 20, 3, 10, 14, 17, 19, 16, 29].
Software attestation is a trust establishment mechanism
that allows a system, the veriﬁer, to check the integrity of
the program memory content of another system, the prover,
against modiﬁcation, e.g., by malicious code. As it mainly
targets resource-constrained embedded systems (such as At-
mel tinyAVR [2] microcontrollers), software attestation aims
to work without any security hardware at the prover. Soft-
ware attestation deploys the common approach of challenge-
response protocols, where the veriﬁer challenges the prover
with respect to the expected memory content. However,
cryptographic challenge-response protocols typically rely on
secret values that should be unknown to malicious provers.
This cannot be assumed for software attestation, where the
provers are resource-constrained embedded systems that typ-
ically cannot aﬀord secure hardware (such as a TPM) [28,
18, 27, 5, 16]. Hence, the adversary may get full control of
the prover and its cryptographic secrets, rendering classical
cryptographic primitives and protocols useless, a fact that
demands for keyless security solutions.
Therefore software attestation follows a radically diﬀerent
approach than most conventional security mechanisms: It
exploits the intrinsic physical constraints of the underlying
hardware and side-channel information, typically the compu-
tation time required by the prover to complete the attesta-
tion protocol. More detailed, software attestation schemes
are typically designed to temporarily utilize all the comput-
ing and memory resources of the prover, aiming at ensuring
1that the prover can only give the correct responses in time
if the memory state is genuine. Of course this requires that
the veriﬁer can authenticate the device characteristics of the
prover using an out-of-band channel, such as visual authenti-
cation, which clearly distinguishes software attestation from
other approaches like remote attestation.
Without question, this requires completely diﬀerent forms
of security reasoning and likewise demands for other security
assumptions on the underlying core functionalities and sys-
tem properties, representing a highly challenging task. This
may be the main reason that, despite its popularity and
practical relevance, software attestation has not received any
formal treatment yet but is still subject to ambiguities. To
start with, there exist no common adversary model and no
precise formalization of the security goals so far, hindering
a founded security analysis and making it diﬃcult or even
impossible to compare existing schemes.
Likewise the underlying security properties and assump-
tions have been only vaguely discussed, limiting the conﬁ-
dence in the security claims. In fact, current proposals of-
ten combine weak PRNGs and ad-hoc checksum function
designs with unclear and possibly insuﬃcient security prop-
erties. As a result, checksum collisions have been exploited
directly to hide code modiﬁcations [24] and indirectly to
manipulate the location of the measured code in the mem-
ory (memory copy attack [3]). Some works even propose to
simply XOR consecutive memory blocks [32], leading to ob-
vious collision attacks that were only indirectly considered
in subsequent work [1]. Likewise, although several works
consider the problem of free memory, i.e., unused sections of
the memory, code compression attacks [3] have been ignored
in recent works [17, 31] and considered as impractical [16]
without giving any arguments.
Contribution.
In this paper, we make a ﬁrst step towards putting soft-
ware attestation on a solid ground. Our contributions are:
Security framework: We describe the ﬁrst formal secu-
rity framework for software attestation. This includes an
adversary model that, interestingly, fundamentally deviates
from classical cryptographic adversary models. Typically,
the adversary is modelled by a polynomially bounded algo-
rithm that aims to achieve a certain goal without having
certain knowledge (e.g., cryptographic keys).
In contrast,
an adversary against a software attestation scheme can be
unbounded in principle and has complete knowledge of the
prover device conﬁguration and state. However, during the
attack it has to specify (or program) a malicious prover de-
vice with tight resource constraints. The goal is that this
malicious prover can cheat in the attestation protocol within
the strict time bound with reasonable success probability but
without any interaction with the adversary. In other words,
the adversary has unbound resources for preparing the at-
tack but only a tight time-bound and limited computational
and memory resources for executing the attack. Moreover
we provide precise deﬁnitions for the security and the correct-
ness of software attestation schemes and propose a formal
system model that aims to balance between expressiveness
and applicability. This allows a founded and comparable
treatment of current and coming schemes and should help
to avoid ambiguities in the future.
Generic software attestation scheme: We present a
generic software attestation scheme that covers most exist-
ing software attestation protocols in the literature. More-
over, we identify and formalize several system parameters
of software attestation and provide an upper bound of the
success probability of a malicious prover against the generic
scheme as a function of these parameters. The derived upper
bound of the success probability implies suﬃcient conditions
on the system parameters. Although some of these aspects
have been implicitly assumed and informally discussed in the
literature, we present their ﬁrst formal treatment. Moreover,
our approach provides new insights on how these parame-
ters impact the security of the underlying software attesta-
tion scheme, which has never been analyzed before. This
result allows to argue on the security of software attestation
schemes by mapping the generic scheme and properties to
the concrete scheme and by examining whether the proper-
ties are fulﬁlled. Moreover the generic scheme may serve as
a blueprint for future schemes.
Argumentation techniques: The security treatment of
the generic scheme required to use novel types of arguments.
Since the common cryptographic proof technique of reducing
the security of the scheme to a hard problem is not possible
anymore, we had to argue directly that any attack strategy
that is possible within the given time-bound fails with a
certain probability. We conjecture that our approach may
be of independent interest. For example, we expect that the
security of concrete schemes that are not directly covered by
the generic scheme may be argued using similar techniques.
New insights: Furthermore, our investigations yield new
insights with respect to the cryptographic properties of the
underlying primitives. Our work shows that cryptographic
primitives can be used that are similar to established prim-
itives, such as pseudo-random number generators or hash
functions, but that diﬀer in subtleties: Some cryptographic
assumptions can be relaxed while others need to be strength-
ened. Such observations are relevant with respect to con-
crete realizations of secure software attestation schemes.
We see our work as a ﬁrst step paving the way for a
founded treatment of secure software attestation schemes.
We expect that such a consolidating work allows for a mean-
ingful security analysis of existing schemes and supports the
design of arguably secure software attestation schemes and
will inspire new research in this area.
Outline.
We give an overview of the related work in Section 2 and
introduce our system model in Section 3. We present the for-
mal framework for software attestation in Section 4, describe
the generic software attestation scheme and its requirements
in Section 5 and formally analyze its security in Section 6.
Finally, we discuss our results and conclude in Section 7.
2. RELATED WORK
The existing literature on software attestation focuses on
the design of checksum functions for diﬀerent platform ar-
chitectures and countering platform-speciﬁc attacks [24, 23,
9, 22, 17]. Several works consider the strengthening of check-
sum algorithms and their implementations against unintended
modiﬁcations by either limiting the memory available to the
prover during attestation [10, 29] or by using self-modifying
2and/or obfuscated attestation algorithms [25, 11]. Many
works investigate the suitability and extension of software
attestation to a variety of computing platforms, including
sensors, peripherals and voting machines [21, 17, 9, 23, 16].
Furthermore, software attestation has been proposed as a
key establishment mechanism [21].
Software attestation is diﬀerent from remote attestation
which has the goal to verify the integrity of remote provers,
e.g., over a network. Speciﬁcally, remote attestation usually
relies on secrets shared between the veriﬁer and the hon-
est prover, which is fundamentally diﬀerent from software
attestation that cannot rely on cryptographic secrets and in-
stead typically assumes that the veriﬁer can authenticate the
prover using an out-of-band channel, such as visual authen-
tication. Several works consider how to combine software
attestation with hardware trust anchors such as TPMs and