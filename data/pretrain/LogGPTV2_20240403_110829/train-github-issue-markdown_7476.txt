Currently, the DllPlugin and DllReferencePlugin allows loading external
modules from separately generated bundles. The problem is that we need to
provide a manifest with all the modules being bundled **at the time of
bundling**. This is limiting in certain scenarios, where we would like to
dynamically load modules which are not known at the time of build (user input,
external files).
Example use case:
Imagine an docs-browser app, that dynamically loads the documentation text and
executable examples, based on a JSON file that lists where they are contained.
The documentation and examples are stored and built separately. They both can
grow (more files are added) and we shouldn't need to republish the entire
documentation website after every new addition to the documentation.
What I propose is that we delegate the manifest to the Dll bundle itself. This
way the following could be possible:
    require('https://domain.com/dll-bundle.js#jquery');
Assuming the `dll-bundle.js` file is a bundle that contains the module
`jquery`, the above require would download the file (proper CORS required),
load the manifest from it (listing all the mappings of modules and merging
them with the preloaded ones) and finally load the code from the bundled
module `jquery`.
This would require the module IDs to be long and random (e.g. UUIDs) so that
collisions do not occur, but they could technically also be generated based on
prefixed some seeded value.
This would solve questions like #1421 or #150.
EDIT:  
A helper method for requiring from an external bundle might make more sense,
something like:
    require.ensureExternal('https://domain.com/dll-bundle.js', function(require) {
      var $ = require('jquery');
    })
    // or even:
    require.ensureExternal(dynamicallyGeneratedUrl, function(require) {
      var someModule = require(totallyDynamicName);
    })