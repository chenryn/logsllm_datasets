b + (cid:104)c(cid:105)(cid:96)
b.
Logical Right Shift. In Algorithm 2, we describe our protocol
LRS that takes as input (cid:104)x(cid:105)(cid:96) and outputs (cid:104)x(cid:29)Ls(cid:105)(cid:96). The
for F (cid:96),s
idea is as follows: Consider x ∈ ZL and (cid:104)x(cid:105)(cid:96). Also, for b ∈
{0, 1}, let (cid:104)x(cid:105)(cid:96)
b = ub||vb where ub ∈ {0, 1}(cid:96)−s and vb ∈
{0, 1}s. Then, it can be shown that x(cid:29)Ls = u0 + u1 − 2(cid:96)−s ·
0,(cid:104)x(cid:105)(cid:96)
wrap((cid:104)x(cid:105)(cid:96)
1, L)+wrap(v0, v1, 2s) [21]. A simple protocol
for F (cid:96),s
LRS computes shares of wrap terms over (cid:96)-bits and s-
bits separately. We further optimize this protocol using the
following lemma (proof appears in Appendix C):
Lemma 1. Let x ∈ ZL, (cid:104)x(cid:105)(cid:96) be shares of x and for b ∈ {0, 1},
(cid:104)x(cid:105)(cid:96)
b = ub||vb, where ub ∈ {0, 1}(cid:96)−s and vb ∈ {0, 1}s. Deﬁne
c = wrap(v0, v1, 2s), d = wrap(u0, u1, 2(cid:96)−s), e = 1{u0 +
u1 mod 2(cid:96)−s = 2(cid:96)−s − 1} and w = wrap((cid:104)x(cid:105)(cid:96)
1, L), then
it holds that w = d ⊕ (c ∧ e).
0,(cid:104)x(cid:105)(cid:96)
Using this lemma, our protocol only uses wrap computations
over (cid:96) − s and s bits and a call to FAND functionality. As
another optimization, while invoking FB2A on shares of w,
we go to arithmetic shares over Z2s (and not ZL). Overall
communication cost is less than λ((cid:96) + 3) + 15(cid:96) + s + 20 and
rounds required are log (cid:96) + 3.
Arithmetic Right Shift. Our protocol for F (cid:96),s
ARS that outputs
(cid:104)x(cid:29)As(cid:105)(cid:96) builds upon F (cid:96),s
relation [44]:
x(cid:29)As = x(cid:48)(cid:29)Ls − 2(cid:96)−s−1, where x(cid:48) = x + 2(cid:96)−1. Hence, it
has the same cost as Π(cid:96),s
LRS. Prior state-of-the-art protocol for
arithmetic right shift is from CrypTFlow2 [99] that runs in
log (cid:96) + 2 rounds with communication λ((cid:96) + s + 2) + 19(cid:96) + 14s
bits. Note that unlike our protocol, its communication grows
LRS using the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:57 UTC from IEEE Xplore.  Restrictions apply. 
1008
multiplicatively in λ with both (cid:96) and s.
smaller
to the
and reduce
ring. At a high level, our protocol
Truncate and Reduce. Many of our protocols can beneﬁt
from truncate
ring over
logical/arithmetic right shift operations that output shares
in the original
for
F (cid:96),s
TR that outputs (cid:104)TR(x, s)(cid:105)(cid:96)−s is as follows: Using the
above notation, TR(x, s) = u0 + u1 + wrap(v0, v1, 2s).
Hence, we can skip the computation of shares of w,
i.e., steps 3–7 can be skipped. Overall communication is
λ(s + 1) + (cid:96) + 13s bits. The best solution using prior
techniques is: TR(x, s) = (x(cid:29)As) mod 2(cid:96)−s, which would
incur the same cost as the state-of-the-art ARS protocol [99],
i.e., λ((cid:96) + s + 2) + 19(cid:96) + 14s bits.
Division by power-of-2. In addition to arithmetic right shift,
the ﬁxed-point code for ML benchmarks require C-style di-
vision by power-of-2 to preserve model accuracy. Consider
the functionality F (cid:96),s
DivPow2 that takes (cid:104)x(cid:105)(cid:96) as input and outputs
(cid:104)z(cid:105)(cid:96) such that z = (cid:100)int(x)/2s(cid:101) mod L for z  k. Consider the functionality