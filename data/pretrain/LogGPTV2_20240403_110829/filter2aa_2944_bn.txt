The port number
e
The path component
f
The query parameters
g
The userinfo component
2
Which of the following are differences between capabilities and token-based
authentication?
a
Capabilities are bulkier than authentication tokens.
b
Capabilities can’t be revoked, but authentication tokens can.
c
Capabilities are tied to a single resource, while authentication tokens are
applicable to all resources in an API.
d
Authentication tokens are tied to an individual user identity, while capability
tokens can be shared between users
e
Authentication tokens are short-lived, while capabilities often have a longer
lifetime.
The answers are at the end of the chapter.
3 You can get the project from https://github.com/NeilMadden/apisecurityinaction if you haven’t worked
through chapter 8. Check out branch chapter09.
304
CHAPTER 9
Capability-based security and macaroons
package com.manning.apisecurityinaction.controller;
import com.manning.apisecurityinaction.token.SecureTokenStore;
import com.manning.apisecurityinaction.token.TokenStore.Token;
import spark.*;
import java.net.*;
import java.time.*;
import java.util.*;
import static java.time.Instant.now;
public class CapabilityController {
    private final SecureTokenStore tokenStore;                  
    public CapabilityController(SecureTokenStore tokenStore) {  
        this.tokenStore = tokenStore;                           
    }
    public URI createUri(Request request, String path, String perms,
            Duration expiryDuration) {
        var token = new Token(now().plus(expiryDuration), null);    
        token.attributes.put("path", path);                     
        token.attributes.put("perms", perms);                   
        var tokenId = tokenStore.create(request, token);
        var uri = URI.create(request.uri());
        return uri.resolve(path + "?access_token=" + tokenId);    
    }
}
You can now wire up code to create the CapabilityController inside your main
method, so open Main.java in your editor and create a new instance of the object
along with a token store for it to use. You can use any secure token store implementa-
tion, but for this chapter you’ll use the DatabaseTokenStore because it creates short
tokens and therefore short URIs. 
NOTE
If you worked through chapter 6 and chose to mark the Database-
TokenStore as a ConfidentialTokenStore only, then you’ll need to wrap it in
a HmacTokenStore in the following snippet. Refer to chapter 6 (section 6.4) if
you get stuck.
You should also pass the new controller as an additional argument to the Space-
Controller constructor, because you will shortly use it to create capability URIs:
var database = Database.forDataSource(datasource);
var capController = new CapabilityController(
        new DatabaseTokenStore(database));
var spaceController = new SpaceController(database, capController);
var userController = new UserController(database);
Listing 9.1
Generating capability URIs
Use an existing 
SecureTokenStore 
to generate tokens.
Leave the
username
null when
creating the
token.
Encode the 
resource path 
and permissions 
into the token.
Add the token to the URI
as a query parameter.
305
Capabilities and REST
Before you can start generating capability URIs, though, you need to make one tweak
to the database token store. The current store requires that every token has an associ-
ated user and will raise an error if you try to save a token with a null username.
Because capabilities are not identity-based, you need to remove this restriction. Open
schema.sql in your editor and remove the not-null constraint from the tokens table
by deleting the words NOT NULL from the end of the user_id column definition. The
new table definition should look like the following:
CREATE TABLE tokens(
    token_id VARCHAR(30) PRIMARY KEY,
    user_id VARCHAR(30) REFERENCES users(user_id),   
    expiry TIMESTAMP NOT NULL,
    attributes VARCHAR(4096) NOT NULL
);
RETURNING CAPABILITY URIS
You can now adjust the API to return capability URIs that can be used to access social
spaces and messages. Where the API currently returns a simple path to a social space
or message such as /spaces/1, you’ll instead return a full capability URI that can be
used to access it. To do this, you need to add the CapabilityController as a new
argument to the SpaceController constructor, as shown in listing 9.2. Open Space-
Controller.java in your editor and add the new field and constructor argument.
public class SpaceController {
  private static final Set DEFINED_ROLES =
          Set.of("owner", "moderator", "member", "observer");
  private final Database database;
  private final CapabilityController capabilityController;             
  public SpaceController(Database database,
                         CapabilityController capabilityController) {  
    this.database = database;
    this.capabilityController = capabilityController;                  
  }
The next step is to adjust the createSpace method to use the CapabilityController
to create a capability URI to return, as shown in listing 9.3. The code changes are very
minimal: simply call the createUri method to create the capability URI. As the user
that creates a space is given full permissions over it, you can pass in all permissions
when creating the URI. Once a space has been created, the only way to access it will be
through the capability URI, so ensure that this link doesn’t expiry by passing a large
expiry time. Then use the uri.toASCIIString() method to convert the URI into a
properly encoded string. Because you’re going to use capabilities for access you can
remove the lines that insert into the user_roles table; these are no longer needed.
Listing 9.2
Adding the CapabilityController
Remove the NOT NULL 
constraint here.
Add the
Capability-
Controller as
a new field
and con-
structor
argument.
306
CHAPTER 9
Capability-based security and macaroons
Open SpaceController.java in your editor and adjust the implementation of the create-
Space method to match listing 9.3. New code is highlighted in bold.
  public JSONObject createSpace(Request request, Response response) {
    var json = new JSONObject(request.body());
    var spaceName = json.getString("name");
    if (spaceName.length() > 255) {
      throw new IllegalArgumentException("space name too long");
    }
    var owner = json.getString("owner");
    if (!owner.matches("[a-zA-Z][a-zA-Z0-9]{1,29}")) {
      throw new IllegalArgumentException("invalid username");
    }
    var subject = request.attribute("subject");
    if (!owner.equals(subject)) {
      throw new IllegalArgumentException(
              "owner must match authenticated user");
    }
    return database.withTransaction(tx -> {
      var spaceId = database.findUniqueLong(
          "SELECT NEXT VALUE FOR space_id_seq;");
      database.updateUnique(
          "INSERT INTO spaces(space_id, name, owner) " +
              "VALUES(?, ?, ?);", spaceId, spaceName, owner);
      var expiry = Duration.ofDays(100000);    
      var uri = capabilityController.createUri(request,     
              "/spaces/" + spaceId, "rwd", expiry);         
      response.status(201);
      response.header("Location", uri.toASCIIString());   
      return new JSONObject()
              .put("name", spaceName)
              .put("uri", uri);           
    });
  }
VALIDATING CAPABILITIES
Although you are returning a capability URL, the Natter API is still using RBAC to
grant access to operations. To convert the API to use capabilities instead, you can
replace the current UserController.lookupPermissions method, which determines
permissions by looking up the authenticated user’s roles, with an alternative that reads
the permissions directly from the capability token. Listing 9.4 shows the implementa-
tion of a lookupPermissions filter for the CapabilityController. 
 The filter first checks for a capability token in the access_token query parameter.
If no token is present, then it returns without setting any permissions. This will result
Listing 9.3
Returning a capability URI
Ensure the
link doesn’t
expire.
Create a
capability
URI with full
permissions.
Return the URI as a 
string in the Location 
header and JSON 
response.
307
Capabilities and REST
in no access being granted. After that, you need to check that the resource being
accessed exactly matches the resource that the capability is for. In this case, you can
check that the path being accessed matches the path stored in the token attributes, by
looking at the request.pathInfo() method. If all these conditions are satisfied, then
you can set the permissions on the request based on the permissions stored in the
capability token. This is the same perms request attribute that you set in chapter 8
when implementing RBAC, so the existing permission checks on individual API calls
will work as before, picking up the permissions from the capability URI rather than
from a role lookup. Open CapabilityController.java in your editor and add the new
method from listing 9.4.
public void lookupPermissions(Request request, Response response) {
    var tokenId = request.queryParams("access_token");    
    if (tokenId == null) { return; }
    tokenStore.read(request, tokenId).ifPresent(token -> {    
        var tokenPath = token.attributes.get("path");         
        if (Objects.equals(tokenPath, request.pathInfo())) {  
            request.attribute("perms",                
                    token.attributes.get("perms"));   
        }
    });
}
To complete the switch-over to capabilities you then need to change the filters used to
lookup the current user’s permissions to instead use the new capability filter. Open
Main.java in your editor and locate the three before() filters that currently call user-
Controller::lookupPermissions and change them to call the capability controller
filter. I’ve highlighted the change of controller in bold:
before("/spaces/:spaceId/messages", 
        capController::lookupPermissions);
before("/spaces/:spaceId/messages/*", 
        capController::lookupPermissions);
before("/spaces/:spaceId/members",
        capController::lookupPermissions);
You can now restart the API server, create a user, and then create a new social space.
This works exactly like before, but now you get back a capability URI in the response
to creating the space:
$ curl -X POST -H 'Content-Type: application/json' \
    -d '{"name":"test","owner":"demo"}' \
    -u demo:password https://localhost:4567/spaces
{"name":"test",
➥ "uri":"https://localhost:4567/spaces/1?access_token=
➥ jKbRWGFDuaY5yKFyiiF3Lhfbz-U"}
Listing 9.4
Validating a capability token
Look up the token from 
the query parameters.
Check that the token 
is valid and matches 
the resource path.
Copy the permissions from
the token to the request.
308
CHAPTER 9
Capability-based security and macaroons
TIP
You may be wondering why you had to create a user and authenticate
before you could create a space in the last example. After all, didn’t we just
move away from identity-based security? The answer is that the identity is not
being used to authorize the action in this case, because no permissions are
required to create a new social space. Instead, authentication is required
purely for accountability, so that there is a record in the audit log of who cre-
ated the space.
9.2.3
HATEOAS
You now have a capability URI returned from creating a social space, but you can’t do
much with it. The problem is that this URI allows access to only the resource repre-
senting the space itself, but to read or post messages to the space the client needs to
access the sub-resource /spaces/1/messages instead. Previously, this wouldn’t be a
problem because the client could just construct the path to get to the messages and
use the same token to also access that resource. But a capability token gives access to
only a single specific resource, following POLA. To access the messages, you’ll need a
different capability, but capabilities are unforgeable so you can’t just create one! It
seems like this capability-based security model is a real pain to use.
 If you are a RESTful design aficionado, you may know that having the client just
know that it needs to add /messages to the end of a URI to access the messages is a
violation of a central REST principle, which is that client interactions should be
driven by hypertext (links). Rather than a client needing to have specific knowledge
about how to access resources in your API, the server should instead tell the client
where resources are and how to access them. This principle is given the snappy title
Hypertext as the Engine of Application State, or HATEOAS for short. Roy Fielding, the
originator of the REST design principles, has stated that this is a crucial aspect of
REST API design (http://mng.bz/Jx6v).
PRINCIPLE
HATEOAS, or hypertext as the engine of application state, is a central
principle of REST API design that states that a client should not need to have
specific knowledge of how to construct URIs to access your API. Instead, the
server should provide this information in the form of hyperlinks and form
templates.
The aim of HATEOAS is to reduce coupling between the client and server that would
otherwise prevent the server from evolving its API over time because it might break
assumptions made by clients. But HATEOAS is also a perfect fit for capability URIs
because we can return new capability URIs as links in response to using another capa-
bility URI, allowing a client to securely navigate from resource to resource without
needing to manufacture any URIs by themselves.4
4 In this chapter, you’ll return links as URIs within normal JSON fields. There are standard ways of representing
links in JSON, such as JSON-LD (https://json-ld.org), but I won’t cover those in this book.
309
Capabilities and REST
 You can allow a client to access and post new messages to the social space by
returning a second URI from the createSpace operation that allows access to the
messages resource for this space, as shown in listing 9.5. You simply create a second
capability URI for that path and return it as another link in the JSON response. Open
SpaceController.java in your editor again and update the end of the createSpace
method to create the second link. The new lines of code are highlighted in bold.
  var uri = capabilityController.createUri(request,
          "/spaces/" + spaceId, "rwd", expiry);
  var messagesUri = capabilityController.createUri(request,    
          "/spaces/" + spaceId + "/messages", "rwd", expiry);  
  response.status(201);
  response.header("Location", uri.toASCIIString());
  return new JSONObject()
          .put("name", spaceName)
          .put("uri", uri)
          .put("messages", messagesUri);    
If you restart the API server again and create a new space, you’ll see both URIs are
now returned. A GET request to the messages URI will return a list of messages in the
space, and this can now be accessed by anybody with that capability URI. For example,
you can open that link directly in a web browser. You can also POST a new message to
the same URI. Again, this operation requires authentication in addition to the capa-
bility URI because the message explicitly claims to be from a particular user and so the
API should authenticate that claim. Permission to post the message comes from the
capability, while proof of identity comes from authentication:
$ curl -X POST -H 'Content-Type: application/json' \
    -u demo:password \                             
    -d '{"author":"demo","message":"Hello!"}' \
  'https://localhost:4567/spaces/1/messages?access_token=
➥ u9wu69dl5L8AT9FNe03TM-s4H8M'        
SUPPORTING DIFFERENT LEVELS OF ACCESS
The capability URIs returned so far provide full access to the resources that they iden-
tify, as indicated by the rwd permissions (read-write-delete, if you remember from
chapter 3). This means that it’s impossible to give somebody else access to the space
without giving them full access to delete other user’s messages. So much for POLA! 
 One solution to this is to return multiple capability URIs with different levels of
access, as shown in listing 9.6. The space owner can then give out the more restricted
URIs while keeping the URI that grants full privileges for trusted moderators only.
Open SpaceController.java again and add the additional capabilities from the listing.
Restart the API and try performing different actions with different capabilities.
Listing 9.5
Adding a messages link
Create a new 
capability URI for 
the messages.
Return the messages 
URI as a new field in 
the response.
Proof of identity is supplied 
by authenticating.
Permission to post is granted 
by the capability URI alone.
310
CHAPTER 9
Capability-based security and macaroons
      var uri = capabilityController.createUri(request,
              "/spaces/" + spaceId, "rwd", expiry);
      var messagesUri = capabilityController.createUri(request,
              "/spaces/" + spaceId + "/messages", "rwd", expiry);
      var messagesReadWriteUri = capabilityController.createUri(   
              request, "/spaces/" + spaceId + "/messages", "rw",   
              expiry);                                             
      var messagesReadOnlyUri = capabilityController.createUri(    
              request, "/spaces/" + spaceId + "/messages", "r",    
              expiry);                                             
      response.status(201);
      response.header("Location", uri.toASCIIString());
      return new JSONObject()
              .put("name", spaceName)
              .put("uri", uri)
              .put("messages-rwd", messagesUri)          
              .put("messages-rw", messagesReadWriteUri)  
              .put("messages-r", messagesReadOnlyUri);   
To complete the conversion of the API to capability-based security, you need to go
through the other API actions and convert each to return appropriate capability URIs.
This is largely a straightforward task, so we won’t cover it here. One aspect to be aware
of is that you should ensure that the capabilities you return do not grant more permis-
sions than the capability that was used to access a resource. For example, if the capa-
bility used to list messages in a space granted only read permissions, then the links to
individual messages within a space should also be read-only. You can enforce this by
always basing the permissions for a new link on the permissions set for the current
request, as shown in listing 9.7 for the findMessages method. Rather than providing
read and delete permissions for all messages, you instead use the permissions from
the existing request. This ensures that users in possession of a moderator capability
will see links that allow both reading and deleting messages, while ordinary access
through a read-write or read-only capability will only see read-only message links.
    var perms = request.attribute("perms")   
            .replace("w", "");                       
    response.status(200);
    return new JSONArray(messages.stream()
        .map(msgId -> "/spaces/" + spaceId + "/messages/" + msgId)
        .map(path -> 
            capabilityController.createUri(request, path, perms))    
        .collect(Collectors.toList()));
Listing 9.6
Restricted capabilities