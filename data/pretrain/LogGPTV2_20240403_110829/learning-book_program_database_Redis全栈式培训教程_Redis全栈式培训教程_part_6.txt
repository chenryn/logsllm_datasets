SPOPkey，移除并返回集合中的一个随机元素
3
SMEMBERS key，返回集合中的所有成员
14
SRANDMEMBERkey[count]，返回集合中一个或多个随机数
4
SCARDkey，获取集合的成员数
15
SSCAN key cursor [MATCH pattern][COUNT count]，选代集合中的元素
5
SISMEMBER key member，判断 member 元素是否是集合key 的成员
6
SINTERkey1[key2]，返回给定所有集合的交集
7
SINTERSTORE destination key1 [key2]，返回给定所有集合的交集并存储
在 destination 中
8
SUNIONkey1[key2]，返回所有给定集合的并集
6
SUNIONSTORE destination key1 [key2]，所有给定集合的并集存储在
destination 集合中
10
SDIFFkey1[key2]，返回第一个集合与其他集合之间的差异。
11
SDIFFSTORE destination key1[key2]，返回给定所有集合的差集并存储在
destination 中
春风阁讲堂出品
62
---
## Page 63
4.7.SoredSet数据类型
4.7.1.基本介绍
数据类型
类型名称
特征说明
场景使用
1、排行榜
Sored Set
有序集合
Redis 的 Set 是 string 类型的有序集合
2、带权重的消息
Zset类的逻辑结构图
存储空间
成
成
成
set_key
员
员
员
2
3
我们可以按setkey操作
成员支持按score进行排序
我们也可以按set_key+成员进行操作
春风阁讲堂出品
63
---
## Page 64
4.7.2.内部实现
zset内部实现有两种方式，ziplist/listpack和skiplist
元素个数<zset-max-ziplist-entries(默认为128)
一
ziplist
value大小<zset-max-ziplist-value(默认为64)
zset编码优化
元素个数<zset-max-listpack-entries（默认为128）
listpack
value大小<zset-max-listpack-value(默认为64)
skiplist
其它实现
1.redis为了节省内存开销，对于集合类型，如果集合的数据都是整数，且个数比较少的情况下，会优先使用ziplist/listpack实现
2.inset实现时，内部数量不宜过大，默认为128以下
春风阁讲堂出品
64
---
## Page 65
4.7.3.常用命令
行数
类型名称
行数
ZADD key scorel member1[score2 member2]，向有序集合添加一个或多个
10
ZREMRANGEBYRANK key Start stop，移除有序集合中给定排名区间所有成员
成员，或者更新已存在成员的分数
ZREMkey member[member...]，移除有序集合中的一个或多个成员
11
ZREMRANGEBYLEXkey min max，移除有序集合中给定的字典区间的所有成员
ZCARDkey.获取有序集合的成员数
12
ZREMRANGEBYSCORE key min max，移除有序集合中给定分数区间的所有成员
4
ZINCRBYkey increment member，对指定成员的分数加上增量increment
13
ZREVRANGE key start stop[WITHSCORES]，返回有序集中指定区间内的成员，
通过索引，分数从高到低
5
ZCOLNT key min max，计算指定分数区间的成员数
14
ZREVRANGEBYLEX key max min，返回有序集中指定区间内的成员，通过字典
区间，分数从高到低
6
ZLEXCOUNT key min max，计算指定字典区间内成员数量
15
ZREVRANGEBYSCORE key max min [WITHSCORES],返回有序集中指定分数区间]
内的成员，分数从高到低排序
7
ZRANGE key start stop [WITHSCORES]，通过索引区间返回区间内的成员
16
ZRANK key member，返回有序集合中指定成员的索引
8
ZRANGEBYLEX key min max [LIMIT offset count]，通过字典区间返回有序
集合的成员
ZRANGEBYSCORE key min max [WITHSCORES][LIMIT]，通过分数返回有序集
合指定区间内的成员
Zset一般有三种方式检索，下标索引、字典区间、分数，6以后也提供了交集、并集、差集等命令
春风阁讲堂出品
6,3
---
## Page 66
5.Redis持久化介绍
5.1.Redis核心架构模型
5.1.1.10多路复用线程模型
●I/0：网络1/0
·多路：多个网络连接
·复用：复用同一个工作线程
·10多路复用也是一种同步阻塞10模型，它实现了一个线程可以监视多个文件句柄：一旦某个文件句柄就绪，就能够通知应用程序进行相应的读
写操作：而没有文件句柄就绪时，就会阻塞应用程序，交出cpu
VO多路复用
更多10网络模型了解：
套接字
同步、阻塞、异步、非阻塞
事件处理器
bionioaio多路复用（epoll,javanio)
S1
I/O多路复用程序
命令请求处理器
文件事件分派
命令们复处理器
命令应答处理器
春风阁讲堂出品
66
---
## Page 67
5.1.2.核心工作单线程模型
1.单线程源由
因为CPU不是Redis的瓶颈。Redis的瓶颈最有可能是机器内存或者网络带宽，既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地
采用单线程的方案了。关于Redis的性能，官方网站也有，普通笔记本轻松处理每秒十万的请求
2.所有版本
Redis是单线程模型的，而单线程避免了CPU不必要的上下文切换和竞争锁的消耗。也正因为是单线程，如果某个命令执行过长（如hgetal1命
令），会造成阻塞。Redis是面向快速执行场景的数据库。所以要慎用如smembers和lrange、hgetall等命令
Redis单线程指的是核心工作使用了一个线程，即一个线程处理所有命令请求
Redis其他模块仍然有一些用了多个进程/线程，比如通过fork子进程，RDB输出等
3.6.0后版本
Redis6.0引入了多线程提速，但多线程主要用于在10处理，核心work线程（执行命令操作内存）仍然是个单线程
所以无论6.0前后，我们还是可以认为Redis是一个单线程模型
春风阁讲堂出品
67
---
## Page 68
5.2.Redis持久化介绍
5.2.1.持久化的意义
Redis的数据全部在内存中，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证Redis的数据在发生突发状况时不会丢失、或者只
Redis持久化的意义就是为了保证突然宕机，内存数据不会全部丢失
5.2.2.Redis持久化机制
三种持久化策略
RDB方式：把内存数据以快照的形式保存到磁盘上，可以周期性执行，重启的时候再执行RDB文件来进行数据恢复
AOF方式：采用日志的形式来记录每个写操作，追加到文件中，重启时再重新执行AOF文件中的命令来恢复数据
混合持久化：采用两者相结合的方式
5.2.3.持久化方式对比
持久方式
优点
缺点
RDB持久方式
适合大规模的数据恢复场景，
没办法做到实时持久化/秒级持久化。
如备份，全量复制等
新老版本存在RDB格式兼容问题
AOF持久方式
数据的一致性和完整性更高
AOF记录的内容越多，文件越大，数据恢复变慢
混合持久化
结合了RDB和AOF的优点，使得数据恢复的效率大幅提升
跨版本兼容性不是很好，Redis-4.x新增，虽然最终的文
件也是.aof格式的文件，但在4.0之前版本都不识别
春风阁讲堂出品
---
## Page 69
5.3.Redis持久化之RDB详解
5.3.1.RDB流程简介
RDB是基于快照的一次全量备份，即周期性的把Redis当前内存中的全量数据写入到一个快照文件中
Redis是使用操作系统的多进程Cow（CopyOnWrite）机制来实现快照的持久化，在持久化过程中调用函数fork（产生一个子进程，快照持久化
完全交给子进程来处理，父进程继续处理客户端的读写请求
子进程对当前内存中的数据进行持久化时，并不会修改当前的数据结构，如果父进程收到了读写请求，那么会把处理的一部分数据复制一份到
内存，对复制后的数据进行修改，因此RDB持久化过程中，会产生一个内存扩张的问题，极限情况为Redis的2倍（我们在线上需要适当考虑）
子进程
fork
redis主进程
memory
data
client
oersistenc
page:4K
page:
4K
updaterequest
page
update
page:4K
page:4K
page:4K
Ado3
PQe：4K
page:4K
disk
rdb
page:4K
page:_4K
page.
abed
4K
4K
page
4K
春风阁讲堂出品
69
---
## Page 70
5.3.2.RDB触发机制
RDB有两种触发方式：自动触发和手动触发
1.自动触发：
在Redis.conf 配置文件中的SNAPSHOTTING下配置save参数，来触发Redis的RDB 持久化条件，
比如“save mn”：表示m秒内数据集存在n次修改时，自动触发bgsave
save9001：每隔900s（15min），如果有超过1个key发生了变化，就写一份新的RDB文件
save30010：每隔300s（5min)，如果有超过10个key发生了变化，就写一份新的RDB文件
save 6010000：每隔60s（1min)，如果有超过10000个key发生了变化，就写一份新的RDB文件
2.手动触发：
手动生成新的RDB文件，执行Redis的save、bgsave 命令。
save：阻塞主进程，直到生成新的RDB文件：执行save命令期间，Redis不能处理其他命令。
bgsave：异步生成RDB文件，fork子进程去生成新的RDB文件，主进程不阻塞。
另外，配置多种策略可以同时生效，无论满足哪一种条件都会写一份新的RDB文件：Redis进程在kil1时也会尝试生成RDB文件
save
同步，会阻塞当前Redis服务器
手动触发
bgsave
异步，Redis进程执行fork操作创建子进程
RDB触发机制
自动触发
savemn
m秒内数据集存在n次修改时，自动触发bgsave
@掘金技术社区
春风阁讲堂出品
70
---
## Page 71
5.3.3.配置参数演示
dbfilenamedump.rdb#设置快照文件名称，按端口规则命名
dir . /
#建议修改为绝对路径，rdb和aof文件的保存路径
save 60 1
#60秒+发生一次变动，注意，可以配置多条规则
生成流程：
1.正常周期生成rdb
2.调用save、bgsave命令生成rdb文件
3.正常kill时生成rdb文件
4.shutdown nosave 不会生成rdb文件
5.采用redis-cli-rdb生成文件
恢复流程：
1.rdb启用时（aof不启用），redis在启动的时候会从rdb文件恢复
问题注意：
1.dir路径一般设置为绝对路径，防止在不同的文件夹下启动，生成的rdb文件混乱
2.rdb在运行时删除后，redis会自动生成
3.其中第5种可以远程生成文件，使用非常方便，且不覆盖rdb文件
春风阁讲堂出品
2
---
## Page 72
5.4.Redis持久化之AOF详解
5.4.1.AOF流程简介
AOF（Append-onlyfile）日志存储的是Redis服务器的顺序指令序列，即对内存中数据进行修改的指令记录。
当Redis收到修改指令后，先进行参数校验，如果校验通过，先把该指令存储到AOF日志文件中，也就是先存到磁盘，然后再执行该修改指令。
Redis把操作指令追加到AOF文件这个过程，可以采用always，everysec，no三种模式
always：每次事件都会刷盘，最安全、效率最低
everysec：每秒同秒一次，安全性略差、效率提高
no：交由操作系统，安全性最差、性能最高
redis主进程
data
update 指令
client
update 指令
update 令
update 邯令
disk
fsync0
AOF 文件
update Bl令
update B令
春风阁讲堂出品
72
---
## Page 73
5.4.2.AOF重写机制详解
Redis在长期运行过程中，AOF日志会越来越大，如果Redis服务重启后根据很大的AOF文件来顺序执行指令，将会非常耗时，导致Redis服务
长时间无法对外提供服务，所以需要对AOF文件进行”瘦身”。"瘦身"的过程称作AOF重写（rewrite)。
AOFRewrite的过程是，主进程fork一个子进程，将当前内存中的数据进转换成一系列的Redis操作指令，并序列化到一个新的AOF日志中，
然后把序列化操作期间新收到的操作指令追加到新的AOF文件中，这样就完成了"瘦身”工作，即AOFRewrite，注意，AOF在Rewrite过程中同样用
到了多进程CO（CopyOnWrite)机制。AOFRewrite过程如下：
1.fork子进程
子进程
子进程遍历当前内存中的数
据，生成新的AOF文件
AOF新文件
redis主进程
存存中的指令刷写
4.新文件生成后把内
新脂令
Aowau
到新的AOF文件中
新指令
data
update 指令
OS Memory Cache
clien
sync
update 令
update 令
disk
3.在生成新的AOF文件的
过程中收到的新指令继续
AOFIB文件
保存在系统内存缓存中
update 指令
update 指令
5.新的AOF文件替换
旧的AOF文件
春风阁讲堂出品
73
---
## Page 74
5.4.3.AOF重写触发机制
AOF触发机制有两种，手动触发和自动触发
1.自动触发
通过配置参数触发
auto-aofrewrite-percentage 100
autoaofrewriteminsize 64mb
2.手动触发
执行命令bgrewriteaof，通过子进程生成更小体积的aof，然后替换掉旧的、大体量的aof文件
5.4.4.AOF重写的影响
AOF在重写的时候，采用操作系统的多进程的CoW（CopyOnWrite)机制，因此在这期间，因此会出现内存扩张现象，极限情况是Redis当前内
存的2倍
AOFRewrite带来的内存开销有可能导致Redis内存突然达到maxmemory限制，从而影响正常命令的写入，甚至会触发操作系统限制被0OMKiller
杀死，导致Redis不可服务
AOFRewrite也会带来CPU和额外开销，有可能造成Redis在执行命令时出现RT上的抖动，甚至造成客户端超时的问题
RDB在快照期间，也会造成内存和CPU的额外开销，但通常时间要远小于由行AOF重写时间，因此AOF重写的影响要远大于RDB快照
春风阁讲堂出品
74
---
## Page 75
5.4.5.AOF配置参数演示
appendonly yes
#开启 aof 机制
appenddirname ~appendonlydir_6379^
#aof文件夹名称，7.0增加
appendfilename ~appendonly_6379. aof*
#aof生成文件
appendfsync everysec
#aof刷盘方式，默认每秒
no-appendfsync-onrewrite no
#重写的时候禁止aof刷盘
auto-aofrewrite-percentage 100
#重写百分比
autoaofrewriteminsize 64mb
#重写最小大小
aofloadtruncated yes
#忽略有问题的aof 指令
aof-userdbpreamble no
#是否开启rdb+aof混合机制
生成流程：
1.
正常周期生成aof文件
2.正常触发rewrite重写机制
3.采用bgrewriteaof重写命令生成aof压缩文件
恢复流程：
1.在同时开启rdb和aof持久化时，重启时只会加载aof文件，不会加载rdb文件
问题注意：
1.dir路径一般设置为绝对路径，防止在不同的文件夹下启动，生成的aof文件混乱
2.正常kil1时生成不会生成文件
3.aof在运行时删除后，redis不会自动生成，可以采取bgrewriteaof或者重启方式生成