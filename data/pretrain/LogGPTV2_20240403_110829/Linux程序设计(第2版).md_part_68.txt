define WORK_SIZE 1024
int main(){
pthread_t a_thread;
int res:
void *thread_result;
res
=sen_init（sbin_sem,0,0};
if（res1= 0){
perror(*Semaphore initialization failed*);
exit(EXIT_FAILURE) ;
res
= pthreed_create(&a_thread, NULL, thread_funetion, NULL) :
if(res != o){
perror(*Tnread creation failed*):
exit (EXIT_FAILURE) :
printt(*Input some text. Enter
while(strncmp(*end", work_area,
‘end' to finish\n*):
fgets{work_area.woRK_SI2E.stdin]:
3} != 01 {
sem_post (&bin_sem) ;
printf(*\nWaiting for thread to finish...\n*):
res = pthread_join(a_thread, &thread_result) :
if （res != 0)(
perror(*Thread join failed*):
exit {EXIT_FAILURE):
printf(*Thread joined\n*);
exit(ExIT_SUCCESS):
sem_destroy (&bin_sen);
void *thread_funetion(void *arg){
selm_wait (kbin_sem) :
while[strnc#p(*end*,work_sred,3)!=0）{
printf(*You input d characters\n*, strlen[work_area) -1):
sem_wait [&bin_sem) :
pthread_exit (NULL) :
上
1
第一个重要的改动是包括上了semaphore.h头文件，它使我们能够去访问信号量函数。随后
我们定义了一个信号量和几个变量，并在创建新线程之前对信号量进行了初始化。如下所示：
Sum_t bin_se
加入java编程群：524621833
---
## Page 354
336
Linux程序设计
def1nc WORK_SIZE 1024
char work_area[wORK_SIzE]:
int main()↓
pthread_t a_thread;
int res:
res = sem_init (5bin_sem, 0, 0};
f
res = 0){
perror(*Senaphore initiali>ation fa1led*):
cxit (EXIT,FAILURE) :
注意：我们把这个信号量的初始值设置为0。
在main函数里，当我们启动了新线程之后，我们从键盘读进一些文本并把它们放到工作区
work_area数组里去，然后用sem_post函数给我们的信号量加上一个“1"。如下所示：
printft"Input some text, Enter
whiie(ntrncnp1*end*,work_area,3)=0）(
end’to finish`n*);
fgets(work_area,wORK_SizE,stdin);
）
在新线程里，我们等待信号量，然后统计来自输人的字符个数。如下所示：
sen_wait (6bin_sem) ;
while(strncmp(*end*
printf (*You input sd eharecters\n*, strlen(work_area) -1):
，work_area,3)1= 0){
scm wdit (&bin_sem) :
在设置信号量的同时，我们等待着键盘的输人。当键盘输人来到的时候，我们释放信号量，
在第一个线程再次读取键盘输人之前让第二个线程先统计出字符的个数。
这两个线程共享着work_arca数组。为了让代码示例更简洁更容易理解，我们还省略了一些
错误检查步骤，比如说，我们没有检查sem_wait的返回值。但在成品代码里，除非有特别充足
的理由说可以省略这些错误检查，否则我们必须对函数调用的返同值进行错误检查。
我们来运行这个程序。
$ cr -D_REENTRANT thread4.c -o thread4 -1pthread
Input some text. Entor end' to finish
$./thread4
Yo input 16 characters
Iain Banks
end
Waiting for chread to finish..
Thread jo1ned
在线程化的程序里，定时方面的错误查找起来总是特别困难的，但这个程序似乎对快速的
键盘输入和比较悠闲的暂停都挺适应。
操作注释：
在对信号量进行初始化的时候，我们把它的值设置为“0”。这样，当我们的线程函数启动
加入jaVa编程群：524621833
---
## Page 355
第11章POSIX线程
337
时，sem_wait调用就会被阻塞并等待信号量变为非零值、
在main线程里，我们会等到有文本输人，然后用sem_post给信号量加上一个“1"，这就立
刻使另--个线程从sem_wait等待中返回并开始执行。在统计完字符个数之后，它又再次调用
sem_wait并再次被阻塞，直到main线程再次调用sem_post增加了信号量的值为止。
这个程序没有考虑精细的定时偏差。我们对它稍加修改并另存为thread4a.c，我们想让来自
键盘的输人偶尔被事先准备好的文字自动地替换掉。我们把main中的读数据循环修改为如下所
示的样子：
printf(*Input some text. Enter ‘end' to finigh\n*);
31= 01(
strcpy(work_area, *wheeee...*):
}else(
gets (work_area, wORK_SIZE, stdin) :
sem_post [&bin_sem) :
现在，如果我们输人“FAST"，程序就会调用sem_post使字符统计线程开始执行，同时立刻
用其他一些改掉work_area中的内容。程序运行结果如下所示：
$ cc -0_REENrRANT thread4a.c -o thread4a -1pthread
[nput sose text. Enter ‘end to finish
S./thread4a
You input 9 characters
Excess10n
FAST
You input 7 characterc
qndut toA
7characters
end
Waitinq for thread to finish...
Thread joined
程序正常工作的大前提是：程序接收文本输入的时间间隔要足够长，这样另一个线程才有
时间在主线程还来不及再多给它一些单词去统计之前统计出工作区里字符的个数。如果我们尝
试连续快速地给它两组不同的单词去统计（键盘输人的“FAST”和程序自动给出的“Wece..”）
第二个线程就没有时间去执行。但信号量的加“1”操作可不止一次，所以字符统计线程就会反
复统计工作区里的字符并对信号量做减法，直到它再次变成0为止。
这个例子告诉我们，对多线程程序里的时间安排应该注意、注意、再注意。刚才这个满洞
是很容易修补的，我们可以再增加一个信号量，让主线程等到统计线程完成字符个数的统计工
作之后再继续前进。
11.5.2用互斥量进行同步
另一种用在多线程程序中的同步访问手段是使用互斥量。程序员给某个对象加上一把“锁”，
每次只允许一个线程去访问它。如果想对代码关键部分的访问进行控制，你必须在进人这段代
码之前锁定一把互斥量，在完成操作之后再打开它。
使用互斥量要用到的基本函数与信号量需要使用的函数很相似。它们的定义声明如下所示：
加入jaVa编程群：524621833
---
## Page 356
338Linux程序设计
#include 
int pthread_mutex_init(pthread_mutex_t *mutex. const pthread_mutexatcr_t *mutexatt:):
int pthread.mutex_1ock (pthread_mutex_t *mutex11 :
1nt pt hread_mutex_unlock (pthread_mutex_t *mutex) ,
int pt hread_mutex_destroy (pthread_mutex_t *sutex) ;
通常，成功时将返回“0”，失败时将返回一个错误代码。但这些函数不设置errno，你必须
对错误返回码进行检查。
类似于使用信号量时的做法，这些函数的参数都是一个预先声明了的对象的指针，但这次
它将是pthread_mutex_t类型的。pthread_mutex_init函数中的属性参数允许我们设定互斥量的属
性，这些属性控制着它的行为。缺省的属性类型是“fast”。它有一个小缺陷：如果你的程序试
图对一个已经加了锁的互斥量调用pthread_mutex_lock，程序本身就会被阻塞；而因为拥有互斥
量的那个线程现在也是被阻塞的线程之一，所以互斥量就永远也打不开了，程序将进人死锁状
态。这可以通过改变互斥量的属性来解决，有两种做法：一是让它检测有可能发生死锁的这种
现象并返回一个错误；二是让它递归地操作，允许同一个线程加上好几把锁，但前提是以后必
须有同等数量的解锁钥匙。
互斥量属性的设置问题超出了本书的讨论范围，所以我们这里就简单地把NULL传递给属性
指针，使用其缺省的属性。在pthread_mutex_init的使用手册贞里你会找到与改变属性操作有关
的详细资料。
动手试试：一个线程互斥量
这个程序也以thread2.为蓝本，但改动的地方相当多。这次的情况是我们非常关心程序对一
些关键性变量的访问，因此我们用一个互斥量来保证在任一时刻只能有一个线程去访问它们。为
了让这份示例代码容易阅读，我们省略了几处应该对互斥量加、解锁调用的返回值进行的错误检
查。在成品代码里，对这返回值的检查是不能少的。下面就是我们新程序thread5.c的代码清单。
#include 
#include 
#include 
winclude 
#include 
tinclude 
void ·*thread_function(void *arg):
pthread_mutex_t work_mutex; /* protects both wozk_area and tine_to_exit */
#define wORK_SIZE 1024
char work_area[woRK_SIzE] :
int time_to_exit = 0;
int main[) {
int res;
pthread_t a_thread:
res = pthread_mutex_init {&work_mutex, NULL) :
if (res 1= 0)(
perror(*Mutex initialization failed*):
exit (EXIT_FAILURE) :
加入jaVa编程群：524621833
---
## Page 357
第11章POSIX线程
3.39
res = pthread_creete(&a_thread. NULL, thzead_function, NULL) ;
if (res i= 0) {
perror(*Thread creation failed*);
exit (EXIT_PAILURE1;
pthread_mutex_lock(&work_mutex) :
printf I*Input some text. Enter ‘end' to finish\n*):
while[1time_to_exit][
pthread_mutex_unlock[kwork_mutex):
fgets (work_area, woRx_ SIzE, stdin) :
while(1)(
pthread_mutex_lock(&work_mutex):
if （work_area[0}!=\0·)（
pthread_mutex_unlock(&work_mutex) ;
sleep (1) ;
else{
break;
pthread_mutex_unlock(&work_mutex);
printf(*\nMaiting for thread to finish...\n*):
res=pthread_joinfa_thread,&thread_result};
if [res 1= 0){
perror(*Thread Join failed*):
exit (EXIT_FAILURE) ;
printf(*Thread joined\n*);
pthread_mutex_destroy(bwork_mutex);
exit (EXIT_SUCCESS):
void *thread_function(void *arg)(
pthzead_mutex_1ock(kwork_mutex);
sleep (1) ;
while（strncmp(*end*,work_azea.3)I=0）(
printf(*You input ed characters\n*. strlen(work_area) -1):
work_area[0]\0
pthread_mutex_unlock(&work_mutex):
pthread_mutex_lock（&work_nutex):
sleep(1) :
while （work_area[0}==\0}{
pthread_mutex_unlock(6work_mutex);
sleep(1):
pthread_autex_lock(&work_mutex];
work_area[0]-\0';
time_to_exit=1;
pthread_mutex_unlock(swork_mutex):
pthread_exit(0):
$ cc -D_REENTRANT thread5.c -o thread5 -1pthread
Input sone text. Enter ‘end to finish
$./thread5
You input 4 characters
Whit
You input 13 characters
The Crow Road
end
Waiting for thread to finish..
操作注释：
我们在程序的开始对互斥量、我们的工作区、还有timc_to_exit变量进行定义和声明，如下
加入java编程群：524621833
---
## Page 358
340
Linux程序设计
所示：
pthread_mutex_t work_mutex; /* protects both work_area and time to_exit */
ef1ne WORK_SIZE 1024
char work_area(WoRK_S12E]:
int time_to,,exit. = G:
然后对互斥量进行初始化。如下所示：