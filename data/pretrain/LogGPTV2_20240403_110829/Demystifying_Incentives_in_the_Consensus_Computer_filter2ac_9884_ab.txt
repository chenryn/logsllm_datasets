While it is clear that Nakamoto consensus incentivizes a
miner to mine new blocks with a reward of newly minted
coins, the incentive for others to correctly verify the trans-
actions is not generally understood. The folklore reasons
for why miners verify transactions in the Bitcoin blockchain
are:
• Verifying a transaction at both steps requires negligible
additional work compared to mining a new block. For
example, the Bitcoin transaction in Figure 1 has only
4 opcodes. Miners can do this extra check without
expending any signiﬁcant computational work. The
cost of validation outweighs the miner’s risk of having
their earned Bitcoins in new blocks be discarded, if the
invalidity is detected in the future.
• When receiving a new block, miners can accept it with
or without verifying the included transactions. How-
1 code :
2
3
if msg . d a t a s i z e ==2:
return msg . data [0] + msg . data [1]
Figure 3: An Ethereum contract that returns sum of two numbers.
ever, most miners want to maintain a cheap and cor-
rect system (the “common good”), so that the Bitcoin
blockchain remains healthy and Bitcoins act as a store-
of-value. Thus miners check the validity of a block’s
included transactions for free 1.
In this work, we study the ﬁnancial incentives of users
more carefully to understand when these folklore assump-
tions may fail and what happens when they do.
2.4 Ethereum—Turing-complete scripting
Ethereum is a next generation cryptocurrency which en-
ables more applications beyond those supported by Bitcoin [5].
It provides a Turing-complete programming language in its
design which equips users with a mechanism to express con-
crete conditional semantics for transactions. Ethereum and
Bitcoin share nearly identical incentive structures. The only
conceptual diﬀerence is that Ethereum includes a small re-
ward for late, valid “uncle block” [5]. However, as in Bit-
coin, Ethereum miners maximize their rewards by racing to
extend the longest valid block. Ethereum also introduces
smart contracts which permit many potential applications
to run on top of the blockchain.
Smart contract. A smart contract is an entity on the
Ethereum blockchain which can embed many contractual
clauses and make it expensive for anyone to disoblige or
deviate from the contract after agreement [22]. Each smart
contract has its own address, balance, and storage space
which is used to run a speciﬁed script. While Bitcoin only
allows users to encode a stateless program, smart contracts
support stateful programs. Users can trigger a contract by
sending a transaction to its address. Once a smart contract
transaction gets included in the blockchain, everyone in the
network is expected to execute the contract script to verify
its validity. Figure 3 is a simple contract which returns the
sum of two numbers.
Gas system.
It may be obvious to some readers that
having Turing-complete language in Ethereum script is a
problem. More speciﬁcally, users can write a transaction or
contract script with long veriﬁcation time to perform Denial-
of-Service (DoS) attack on the network. For example, one
can write a simple transaction to make the network enter
an inﬁnite loop while verifying the transaction. To prevent
such attacks, Ethereum introduces the concept of gas [23].
The script is compiled into Ethereum opcodes while stored
in the blockchain, and each opcode costs some predeﬁned
amount of gas (a form of transaction fee) charged to trans-
action sender. When a sender sends a transaction to activate
a contract, he has to specify the available gasLimit that he
supports for the execution. The gas is paid to a miner who
veriﬁes and includes the transactions in his block.
Intu-
itively, the gas system seems to make it expensive for the
attacker to perform DoS attack to the system. However, as
1Note that only the one who ﬁnds the block receives a trans-
action fee, not those who verify.
# Record the initiator , reward and data
c o n t r a c t . storage [0]= msg . sender
c o n t r a c t . storage [1]=0
c o n t r a c t . storage [2]= msg . value
# record the size n of the m a t r i c e s
c o n t r a c t . storage [3]= msg . data [0]
# record the m a t r i c e s A and B
c o n t r a c t . storage [4] = msg . data [1]
c o n t r a c t . storage [5] = msg . data [2]
c o n t r a c t . storage [6] = 1 # status
if c o n t r a c t . storage [6] == 0:
return (1)
1 init :
2
3
4
5
6
7
8
9
10
11
12 code :
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
# data [ C ]: C is the result matrix
if msg . d a t a s i z e == 1:
C = msg . data [0]
n = c o n t r a c t . storage [3]
A = c o n t r a c t . storage [4]
B = c o n t r a c t . storage [5]
# c h e c k i n g the result
for i in range ( n ):
for j in range ( n ):
cell = sum ([ A [ i ][ k ] * B [ k ][ j ]
for k in range ( n )])
if cell != C [ i ][ j ]:
return (0)
# if e v e r y t h i n g is fine , send the reward
send (1000 , msg . sender , c o n t r a c t . storage [2])
c o n t r a c t . storage [6]=0 # update status
c o n t r a c t . storage [7]= C # store result
return (2)
Figure 4: Code snippet of a contract which allows an user can
outsource a matrix multiplication problem. The contract will
verify the correctness of the result before sending out the reward.
we later show, this mechanism does not actually solve the
DoS attack problem.
3. THE VERIFIER’S DILEMMA
In Section 2.3, we discussed incentives for Bitcoin min-
ers to verify transactions in a block. We show that these
motivations fail when block veriﬁcation requires signiﬁcant
computation eﬀort. Various mechanisms can lead to longer
veriﬁcation times. Ethereum users can create transaction
and contract scripts which place arbitrary computational
demands on miners, and similarly Bitcoin miners face high
computational demands when the number of transactions in
a single block is large.
In this section we present a veriﬁer’s dilemma in which
the honest miners in the network decide whether to skip
the veriﬁcation of expensive transactions or to maintain the
common good. To describe the veriﬁer’s dilemma, we ﬁrst
introduce a motivating smart contract in Ethereum which
we will use throughout the paper.
3.1 Example of outsourced computation
Figure 4 shows a code snippet of a contract in Ethereum
which allows a problem giver (G) to ask anyone to compute
A× B where A, B are two matrices of size n× n. In the init
phase, G ﬁrst sends an transaction which speciﬁes n, A, B,
and deposits the reward amount to the contract’s wallet ad-
dress. All information is public including the reward amount
since everything is stored on the blockchain. If a prover (P),
i.e., a user is interested in solving the problem, wants to
claim the solution to get the reward, he sends a transaction
with the result matrix C to the veriﬁer.
When other miners receive the transaction from the prover,
they will verify if C = A × B by running the code phase in
the contract script. G expects that the Nakamoto consensus
protocol used in Ethereum will ensure that the result is cor-
rect due to the check on Lines 22–27, and only one prover
will get paid due to the update of the contract’s status on
Line 30. Note that for the purpose of demonstration, we use
an example in which verifying C requires to run the actual
computation again. In practice, there are several problems
that verifying whether a solution is correct is much easier
than ﬁnding one, e.g., solving a SAT instance, ﬁnding a
hash inversion, breaking cryptography key and so on. Thus,
G can create a contract to allow anyone to submit their so-
lution and rely on the network to verify the correctness as
in Figure 4.
3.2 Attacks
When a transaction that asks miners to verify whether
C = A × B appears in the network, miners have an option
to either verify or not to verify. We show that the miners
are susceptible to a resource exhaustion attack or a incorrect
transaction attack depending on their choice.
Attack 1 (Resource exhaustion attack by problem
givers). If miners honestly follow the protocol, they volun-
tarily verify all transactions in a new block which is broad-
cast to them (step 2 in Section 2.2). Thus, if an attacker
broadcasts his expensive transactions to the network, other
miners will have to spend a lot of power and time to verify
all the transactions. To prevent such situations, Ethereum
introduced a gas system to charge the transaction initiator
(sender) some amount of money for each operation he wants
veriﬁed.
However, the gas system does not prevent the attacker
from creating and including resource-intensive transactions
in his newly minted block. This is because transaction fee
(i.e., gas) is collected by the block founder only (in step 1,
Section 2.2). Thus, the attacker does not lose anything by
adding his transactions to his own block. The other min-
ers, on the other hand, have to spend a signiﬁcant amount
of time verifying those transactions (in step 2, Section 2.2)
and get nothing in return. As a consequence, the attack not
only exhausts other miners’ resource, but also gives the at-
tacker some time ahead of other miners in the race for the
next block. Note that the attacker has complete freedom
to prepare the transactions, so the diﬃculty of verifying the
transaction script is in his control. Since gas charged in each
transaction is credited to his account in step 1, his attack
works at a zero fee (no loss).
As a concrete attack on the running example, the attacker
ﬁrst introduces the contract in Figure 4 with big matrices
size, say n = 1000, and a small reward so that no one will
attempt to solve it. In the second step, he includes a trans-
action with an arbitrary matrix C that he knows whether
C = A × B before hand in all the blocks that he is mining.
He also prepares enough gas to execute the contract script
so that the transaction looks valid and normal. Other hon-
est miners on receiving the block from the attacker spend
time verifying the block and all the included transactions
to see if the block is valid and move on to the next one in
the chain. Since n is quite large, verifying a single transac-
tion from the attacker will take signiﬁcantly more time than
normal transaction. The mining process of other miner will
be delayed, while the attacker enjoys considerable advantage
and has higher chance in ﬁnding the next valid blocks in the
blockchain.
Remark 1. In Ethereum, the number of operations one in-
cludes in a new block is bounded by oplimit, which can
be varied by a certain rate after every block by miners [5].
However, we argue that oplimit does not completely pre-
vent the above attack since attackers can increase oplimit
to a large enough value after some blocks to include his
resource-intensive transactions. We explain this in the Ap-
pendix A. Further, some may argue that attacker’s blocks
are likely to become stale, i.e., other blocks get broadcast to
the network faster, due to the long veriﬁcation time. How-
ever, in [24], Miller et al. ﬁnd that there are (approx. 100)
inﬂuential nodes in the Bitcoin network which are more eﬃ-
cient in broadcasting blocks. An attacker can broadcast his
block to those inﬂuential nodes to reduce the chance that
his blocks getting staled signiﬁcantly.
Attack 2 (Incorrect transaction attack by provers).
Due to Attack 1, rational miners have strong incentive to
skip expensive transactions to compete for the race of the
next block. The mechanism that drives the Bitcoin net-
work (Section 2.3) to achieve a consensus does not hold in
Ethereum. This is because verifying a transaction now may
take much more time and aﬀect the miners’ mining speed.
As a result, when the puzzle giver G asks for the product
A × B, the malicious prover P can include a transaction
which has a wrong solution C. Since verifying C = A × B
requires long time, rational miners are well-incentivized to
accept it as correct without running the veriﬁcation check.
Thus, the result of a contract/transaction, although is de-
rived from the consensus of the network, is incorrect and
unreliable. The problem giver G wastes his money for an
incorrect answer. Unlike in Attack 1, G is a honest miner in
this case. However his computational power is not enough
to match the rational miners who are incentivized to skip
the check.
It is clear that skipping veriﬁcation is problematic. First,
P can include anything as the result of the contract execu-
tion, e.g., sending others’ money deposited in the contract’s
wallet to his wallet. Second, the health of the currency is
aﬀected since it is impossible to correctly verify who-owns-
what. However, if the miners na¨ıvely verify all the transac-
tions, they are vulnerable to Attack 1.
3.2.1 Findings
Attack 1 and Attack 2 are not only speciﬁc to the running
example, but are common challenges to any application that
relies on a consensus protocol. From the veriﬁer’s dilemma,
we establish the following ﬁndings and implications.
Claim 1 (Resource exhaustion attack). In cryptocurren-
cies that allow miners to create expensive blocks, the honest
miners are vulnerable to ampliﬁed resource exhaustion at-
tacks. Malicious miners can perform the attack without fee
and gain signiﬁcant advantage in ﬁnding the next blocks.