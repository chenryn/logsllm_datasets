### Analysis of FTP Attacks and Vulnerabilities

#### A. Probing Files
Attackers often upload probe files, which can be random characters or small amounts of base64-encoded data, prior to uploading their main attack payloads. These probe files are used to test the server's write capabilities and to ensure that the environment is suitable for further exploitation.

In addition to these two types of probe files, there are smaller cases where files are added to the reference set due to the behavior of certain server implementations. Specifically, some configurations allow anonymous users to upload files but not delete or overwrite existing ones. When a second file with the same name is uploaded, an incrementing number is appended to the filename, resulting in a series of files like "name", "name.1", "name.2", etc. Although this behavior is heuristically testable, many other files use this format and are not related to FTP or anonymous uploads. Therefore, we do not add all files matching this format to our reference set.

As shown in Figure 1, we identified 19.4K servers across 3.4K ASes that appear to be world-writable. This is a lower bound, as not all servers may have been found by a write probing campaign or previously had files uploaded anonymously. Factors such as software quirks, incomplete targeting of the IPv4 address space, IP flux, or attackers removing evidence of their probing can contribute to this underestimation.

#### B. Leveraging Server-side Scripting
Many anonymous FTP servers provide access to the web root. To estimate the number of hosts that serve both FTP and a web server, we used the results of an HTTP scan from Censys [19] conducted during the same period as our enumeration. In total, 9.0M IP addresses (65.27% of all FTP servers) contain both a web server and an FTP server. Of these, 2.1M IPs (15.01% of FTP servers) indicate support for server-side scripting through the "X-Powered-By: PHP" or "X-Powered-By: ASP.NET" HTTP headers.

Attackers are aware of this overlap and have been using it for some time. The most direct usage is leveraging server-side scripting for Remote Access Tools (RATs). These RATs range from highly complex and fully featured to simple one-liners. Common practice involves uploading these files across the filesystem to increase the likelihood of landing in the web root. While we observed many variations, only a few can be attributed to FTP with our world-writable methodology. Restricted to the RATs in our reference set, we found 6K RAT-related files on 724 servers.

We also found evidence of attackers using anonymous FTP to set up UDP DDoS infrastructure. Two campaigns, "history.php" and "phzLtoxn.php," are the most widespread. Both are simple PHP scripts that receive a target host/port and time length from GET parameters and send 65kB UDP packets as fast as possible for the specified duration. We identified 1,792 servers infected with these campaigns.

Some campaigns involve multiple stages, uploading increasingly complex server-side scripts as they gather more information about the victim. The "ftpchk3" campaign is likely a four-stage process. The first stage is a small "ftpchk3.txt" file, likely a write probe. The second stage is an "ftpchk3.php" script that echoes "OK" to determine if the attacker can access a directory served by a server-side scripting engine. The third stage is another "ftpchk3.php" script that gathers information such as PHP version, loaded extensions, and the Content Management System (CMS) in use. We believe there is a fourth stage that uses this information for malicious purposes, though our dataset does not conclusively show what that is. In total, we found 1,264 servers in various states of infection by the "ftpchk3" campaign.

An especially interesting find, though not in our reference set, is the "Holy Bible SEO" campaign. This campaign uses the PHP scripting engine to search the victim's filesystem for web files (e.g., HTML, PHP, and ASP) and injects `href` tags. It also spreads itself across the filesystem and deletes files with extensions like .bak, .zip, .apk, and .msi. This campaign is difficult to detect heuristically due to its use of common filenames like "index.php" and its many versions. Our best heuristic comes from an ancillary file named "Holy-Bible.html," which appears to be the attackers' "tag." This file is not involved in the malicious activity but frequently appears with the malicious files and shares identifying strings. We found 1,131 servers containing this file, with 55.35% also having one or more files from our reference set indicating world-writability.

#### C. Other Campaigns
During our investigation, we discovered several other campaigns. One of the oddest is an apparent advertising campaign for a "really cool software cracking service" [1], where .pdf and .ps flyers are uploaded to world-writable FTP servers, offering keygens and dongle emulators for software piracy. Readers are directed to contact the service via Bitmessage [8] or email, with prices ranging from $300 to $500. We found 2,095 servers containing these flyers.

Ramnit, a botnet, is known to use an anonymous FTP server to give its masters easy access to the victim's filesystem. Although Symantec reports that Ramnit's FTP server uses port 22, we discovered 1,051 FTP servers on TCP/21 carrying the malware's FTP banner "220 RMNetwork FTP" [39]. None allowed our enumerator to authenticate anonymously.

We also found attackers sharing "WaReZ" data—pirated software and media. While a large amount of music and movies are available over anonymous FTP, much of it appears to be personal libraries exposed along with other information. One data transport campaign is identifiable by the directory names it uses for storage, following the format: 2-digit year + 2-digit month + 2-digit day + 6-digit time + "p". Overall, there appear to be 4,868 servers that were once used by this campaign, though many directories are now empty. We do not know if these were abandoned upload sites or if the content was deleted after being moved between actors.

### VII. Case Study— Known Vulnerabilities

#### A. CVEs
We analyzed the version strings presented in FTP banners and found that over one million servers are vulnerable to known attacks. Table XI provides a breakdown of IPs vulnerable to each CVE. For ethical reasons, we did not exploit any vulnerabilities on the hosts.

| Implementation | Vulnerability | CVSS Score | Number of IPs |
|----------------|---------------|------------|---------------|
| ProFTPD        | CVE-2015-3306 | 10.0       | 300,931       |
| Pure-FTPD      | CVE-2013-4359 | 5.0        | 24,420        |
| vsFTPD         | CVE-2012-6095 | 1.2        | 1,098,629     |
| Serv-U         | CVE-2011-4130 | 9.0        | 646,072       |
|                | CVE-2011-1137 | 5.0        | 646,072       |
|                | CVE-2011-1575 | 5.8        | 3,305         |
|                | CVE-2011-0418 | 4.0        | 3,309         |
|                | CVE-2015-1419 | 5.0        | 658,767       |
|                | CVE-2011-0762 | 4.0        | 125,090       |
|                | CVE-2011-4800 | 9.0        | 244,060       |

#### B. PORT Bouncing
The PORT command supplies an IP address and port to the server, which then initiates a TCP connection back to that IP. If a server does not verify that the requested data channel's client IP address is the same as the control channel's, it can be used to connect to a third party on the attacker's behalf. This vulnerability has been publicly noted by CERT since 1997 [13].

By sending a PORT command specifying a different IP address that we control, we can check whether each anonymous FTP server is vulnerable. We found 143,073 FTP servers (12.74% of anonymous FTP servers) failed to properly validate PORT parameters and created a TCP connection to an IP address other than the control channel's. The majority of these servers (71.5%) are within AS12824 home.pl S.A. and likely originate from the home.pl hosting service's default software.

FileZilla FTP server implementation failed to properly validate PORT commands in all releases from January 1, 2003, until May 6, 2015 [31]. Although not all allowed anonymous access, we found 409K Filezilla implementations on the IPv4 address space, with the majority likely exploitable after login.

The most straightforward use of this vulnerability is to perform anonymous port scans. While useful to attackers, it can be combined with more subtle techniques to create powerful attacks. For example, if the FTP server is within an otherwise inaccessible network, an attacker can use the PORT command to port scan the internal network. We checked servers' responses to the PASV request and for an IP address different than the original connection, indicating it was behind a NAT. We found 18,947 servers behind a NAT, of which 846 do not properly validate PORT parameters. Another way to leverage servers that fail to validate PORT arguments is the classic "Bounce Attack," where the attacker induces the FTP server to conduct application-level interaction with a third party. For example, the attacker can combine the PORT command with a world-writable filesystem to coerce the server to send FTP or SMTP commands to a third party by uploading a file containing the sequence of commands and then PORT bouncing it to the third-party server [3]. We found 1,973 servers that are both world-writable and fail to properly check the parameters of the PORT command.

### VIII. Case Study— Ongoing Maliciousness

To detect other attacks, we ran eight FTP honeypots exposing anonymous, world-writable FTP servers for three months. We reacted to attackers' behavior by creating and populating paths they attempted to traverse to observe their next actions.

#### A. Results
In total, we observed 457 unique IP addresses scanning TCP/21. Over 30% of these came from the "China Unicom Henan Province Network" AS. 85 IPs spoke FTP to our honeypots, with most of the remainder attempting to fetch the root webpage via the HTTP GET command. 16 IPs attempted to traverse directories, and 21 listed the contents of directories, with some being blind traversals.

We observed over 1,400 unique username-password combinations used to attempt authentication. Most were simple attempts at guessing weak passwords, but we also saw evidence of attempts with default passwords. We observed one attempt to exploit CVE-2015-3306 [15], one attempt to exploit a Seagate device's lack of a root password to upload a RAT [24], and 8 addresses testing whether they could exploit the PORT bounce attack. All eight PORT bounce attempts targeted the same third-party IP, indicating they were potentially part of the same campaign.

#### B. Analysis
Compared to the number of malicious files we found in our crawling, there were surprisingly few attacks on our honeypots. One possible reason is the historical nature of FTP; we may be seeing remnants of past malicious campaigns on servers that remain online today. In one case, we found files consistent with the dsns network scanner [18] from as early as 2004. While we do not see many instances of active maliciousness, those we see align with our analysis. We found several campaigns looking for world-writable FTP servers, where clients attempted to upload and then delete the "hello.world.txt" write probe on our honeypots. We also observed attackers searching for web-root directories such as "cgi-bin," "www," and "public_html," validating that attackers are actively looking for directories useful for server-side scripting attacks.

We noted 36 IPs issued the AUTH command and attempted to complete TLS handshakes, likely to identify devices by certificate. We also saw behavior consistent with the WaReZ transporters from Section VI, with attempts to create directories with no data uploaded to them.

The question of whether these attacks are malicious or academic remains. We saw both explicit evidence: some IPs were nearly identically configured with landing pages describing scanning research, while others tested PORT validation from Tor Exit Nodes. Most IPs provided no indication of their intention.

### IX. Case Study— FTPS Impact

FTPS was created to add security to the FTP protocol. The client signals its desire to use FTPS by sending the AUTH SSL or AUTH TLS request to the server. After the server responds positively, both sides conduct a TLS handshake to secure the connection before continuing with the standard FTP protocol inside the TLS connection. This negotiation protects username and password combinations and any transferred data.

During our enumeration, we found that 3.4M FTP servers (25%) support FTPS, but less than 85K require it before authentication. To explain this low rate, we surveyed popular web browsers and built-in command-line tools on OS X, Linux, and Windows. Surprisingly, none supported FTPS. When a server requires a secure connection before accepting the USER request, these built-in clients disconnect. Third-party FTP clients that support FTPS are available for all three major operating systems. Even when both the client and server support FTPS, the security provided is less than expected. 1.7M (50%) of the sites that support FTPS use self-signed certificates, which provide no way for the client to check the server's identity. Although some third-party clients can pin certificates internally, a trust-on-first-use authentication vulnerability still exists.

Surprisingly, there are only 793K unique certificates across all 3.4M servers that support FTPS. This appears to be due to two reasons: first, hosting providers commonly use their browser-trusted wildcard SSL certificate on all shared-hosting servers. Second, device manufacturers deploy identical certificates on all their devices.