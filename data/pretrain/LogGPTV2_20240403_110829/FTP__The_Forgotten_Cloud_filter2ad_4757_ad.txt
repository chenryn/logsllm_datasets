random
characters, or a small amount of base64-encoded data. It
appears that the attackers attempt to upload these probe ﬁles
prior to uploading their attack payloads.
In addition to these two types, there are also smaller
cases where a ﬁle was added to the reference set due to the
behavior of certain server implementations. Speciﬁcally, some
conﬁgurations allow anonymous users to upload ﬁles, but not
delete or overwrite existing ﬁles. When a second ﬁle with the
same name is uploaded, an incrementing number is appended
to the end of the ﬁlename resulting in the set of ﬁles “name”,
“name.1”, “name.2”, etc. being seen on a server. Although
this behavior is heuristically testable, many other ﬁles use
this format and are not related to FTP or anonymous upload.
Therefore, we do not add all ﬁles which match this format to
our reference set.
As seen in Figure 1, we ﬁnd 19.4K servers in 3.4K ASes
that appear to be world-writable. We note that this is a lower
bound given that not all servers will have been found by
a write probing campaign or previously had ﬁles uploaded
anonymously. An attacker’s software could fail to handle certain
quirks, the attackers may not have targeted the entire IPv4
address space, the ﬂux of IPv4 may have resulted in the
attackers (or ourselves) not ﬁnding certain servers, or, as we
will show in Section VIII, attackers might remove the evidence
of their probing.
B. Leveraging Server-side Scripting
As discussed in Section V, many anonymous FTP servers
provide anonymous access to the web root. To estimate the
number of hosts that serve both FTP and a web server, we
used the results of an HTTP scan supplied by Censys [19]
from the same time period as our enumeration. In total,
9.0M IP addresses (65.27% of all FTP servers) contain
both a web-server and an FTP server. Of these, 2.1M IPs
(15.01% of FTP servers) indicate that they support server-side
scripting by returning either the “X-Powered-By: PHP” or
“X-Powered-By: ASP.NET” HTTP header.
We ﬁnd that attackers are aware of this and have been
using this overlap for quite some time. The most direct usage
we ﬁnd is that attackers leverage server-side scripting for
Remote Access Tools (RATs). These RATs vary from the
extremely complicated and fully featured to a single line of
“”. It appears common practice
to upload these ﬁles across the ﬁlesystem to improve the
chances of landing in the web root. While we see many different
variations, only a few can be sourced to FTP with our world-
writable methodology. Restricted to only the RATs in our
reference set, we ﬁnd 6K RAT related ﬁles on 724 servers.
We also found evidence of attackers using anonymous
FTP to set up UDP DDoS infrastructure. Two campaigns,
history.php and phzLtoxn.php, appear to be the most
widespread. Both are simple PHP scripts which receive a target
host/port and time length from the GET parameters and send
65kB UDP packets as fast as possible for the speciﬁed length
of time. We found 1,792 servers infected with these campaigns.
It appears that some campaigns involve multiple stages
that upload incrementally more complicated server-side scripts
as they gain more information about their new victim. The
ftpchk3 campaign is likely a four-stage campaign that operates
in this manner. The ﬁrst stage is a small ftpchk3.txt ﬁle
which is likely a write probe. The second stage consists of
a ftpchk3.php script which simply echos the text “OK”—
likely to determine whether the attacker can access a directory
served by a server-side scripting engine. The third stage is
a second ftpchk3.php script that gathers information such
as PHP version, loaded extensions, and what, if any, Content
Management System is used. We believe that there is a fourth
stage which uses the information gained to act maliciously, but
our dataset does not allow us to conclusively assert what that
is. In all, we found 1,264 servers in some state of infection by
the ftpchk3 campaign.
While not within our reference set, one especially interesting
ﬁnd is the Holy Bible SEO campaign. This campaign uses the
PHP scripting engine to search the victim’s ﬁlesystem for web
ﬁles (e.g., HTML, PHP, and ASP ﬁles), in which it injects
href tags. Additionally, it spreads itself across the ﬁlesystem
and deletes any ﬁle with extensions such as .bak, .zip, .apk,
and .msi. This campaign is difﬁcult to heuristically search
for due to its use of extremely common ﬁle names such as
index.php and its many different versions. Our best heuristic
comes from an ancillary ﬁle which appears to be the attackers
“tag” named Holy-Bible.html. This ﬁle is not involved in
the maliciousness, but appears frequently with the malicious
ﬁles and shares identifying strings with the malicious ﬁles. We
ﬁnd 1,131 servers that contain this ﬁle, and 55.35% of these
servers also have one or more of our reference set of ﬁles that
denote that the server is world-writable.
C. Other Campaigns
During our investigation, we also discovered a set of
other campaigns. One of the oddest is an apparent advertising
campaign for a “really cool software cracking service” [1], in
which .pdf and .ps ﬂiers are uploaded to world-writable FTP
servers and explain that the proprietors are willing to create
keygens and dongle emulators to enable pirating software.
Readers are to contact the service via Bitmessage [8] or e-
mail, and the service charges either $300 or $500. We found
2,095 servers that contain the campaign’s ﬂiers. Ramnit, a
botnet, is known to use an anonymous FTP server to give
its masters easy access to the victim’s ﬁlesystem. Although
Symantec reports that Ramnit’s FTP server uses port 22,
we discovered 1,051 FTP servers on TCP/21 that carry the
malware’s FTP banner of “220 220 RMNetwork FTP” [39].
None allowed our enumerator to anonymously authenticate.
We also ﬁnd attackers sharing “WaReZ” data—pirated
software and media. While a large amount of music and
movies are available over anonymous FTP, much of it appears
to be personal libraries, which are exposed along with other
information as described in Section V. But one data transport
campaign bears a signature that allows us to identify it. This
campaign is identiﬁed by the directory names that it uses for
storage—2-digit year of upload + 2-digit month + 2-digit day
+ 6-digit time + “p”. Overall, there appear to be 4,868 servers
which were at one time used by this campaign, but many of the
directories are empty. We do not know if these were abandoned
509
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:25 UTC from IEEE Xplore.  Restrictions apply. 
TABLE XI.
NUMBER OF SERVERS VULNERABLE TO CVES
Implementation
Vulnerability
CVSS Score
Number IPs
ProFTPD
Pure-FTPD
vsFTPD
Serv-U
CVE-2015-3306
CVE-2013-4359
CVE-2012-6095
CVE-2011-4130
CVE-2011-1137
CVE-2011-1575
CVE-2011-0418
CVE-2015-1419
CVE-2011-0762
CVE-2011-4800
10.0
5.0
1.2
9.0
5.0
5.8
4.0
5.0
4.0
9.0
300,931
24,420
1,098,629
646,072
646,072
3,305
3,309
658,767
125,090
244,060
upload sites or if the content was deleted after it was shufﬂed
between actors.
VII. CASE STUDY— KNOWN VULNERABILITIES
In this section, we present estimates of the number of
servers that are currently subject to exploitation using known
vulnerabilities.
A. CVEs
We analyzed the version strings presented in FTP banners
and ﬁnd that more than one million servers are vulnerable
to common knownly attacks. We show a breakdown of IPs
vulnerable to each CVE in Table XI. For ethical reasons, we
did not exploit any vulnerabilities on the hosts.
B. PORT bouncing
As discussed in Section II, the PORT command supplies an
IP address and port to the server which then initiates a TCP
connection back to that IP (assumed to be the client). If a
server does not verify that the requested data channel’s client
IP address is the same as the control channel’s, then the server
can be used to connect to a 3rd party on the attacker’s behalf.
This vulnerability is well known and has been publicly noted
by CERT since as early as 1997 [13] and we can easily check
whether servers support properly validate the PORT command
arguments.
By sending a PORT command specifying a different IP
address that we control, we can probe whether each anonymous
FTP server is vulnerable. We found 143,073 FTP servers
(12.74% of anonymous FTP servers) failed to properly validate
PORT parameters and created a TCP connection to an IP address
other than the control channel’s. The vast majority of these
servers (71.5%) are within AS12824 home.pl S.A. and likely
originate from the home.pl hosting service’s default software.
In addition, the FileZilla FTP server implementation failed to
properly validate PORT commands in all releases from January
1, 2003 until May 6, 2015 [31]. Although not all allowed
anonymous access and thereby allowing us to test, we found
409K Filezilla implementations on the IPv4 address space of
which the majority are likely exploitable after login.
The most straightforward use of this vulnerability is to
perform anonymous port scans. While this is useful to attackers,
it can be combined with more subtle techniques to create more
powerful attacks. For example, if the FTP server is within an
otherwise inaccessible network, an attacker can use the PORT
command to port scan the internal network. To measure this,
we checked servers’ responses to the PASV request and for an
IP address different than that which we originally connected
to, indicating it was behind a NAT. We found 18,947 servers
behind a NAT, of which 846 do not properly validate PORT
parameters. Another way to leverage servers that fail to validate
PORT arguments is the classic “Bounce Attack” in which the
attacker induces the FTP server to conduct application-level
interaction with a third-party. For example, the attacker can
combine the PORT command with a world writable ﬁlesystem
to coerce the server to send FTP or SMTP commands to a third
party, by uploading a ﬁle containing the sequence of commands
and then PORT bouncing it to third-party server [3]. We found
1,973 servers which are both world-writable and fail to properly
check the parameters of the PORT command.
VIII. CASE STUDY— ONGOING MALICIOUSNESS
To detect other attacks, we ran eight FTP honeypots
that expose anonymous, world-writable FTP servers for three
months. We worked to be reactionary to attackers’ behavior:
after observing attackers’ attempts to blindly traverse certain
ﬁle paths, we created those paths and populated them with
representative ﬁles in order to observer the attackers’ behavior
the next time they probed our honeypots.
A. Results
In total, we observed 457 unique IP addresses scanning
TCP/21. Interestingly, over 30% come from the “China Unicom
Henan Province Network” AS. 85 IPs spoke FTP to our
honeypots, with most of the remainder attempting to fetch the
root webpage via the HTTP GET command. 16 IPs attempted
to traverse directories and 21 listed the contents of directories;
in both cases, some were blind traversals.
In total, we observed over 1,400 unique username-password
combinations used to attempt to authenticate. While most of
these were simple attempts at guessing weak passwords, we
also saw evidence of attempts with default passwords. We
did observe one attempt to exploit CVE-2015-3306 [15], one
attempt to exploit a Seagate devices’ lack of a root password
to upload a RAT [24], and 8 addresses testing whether they
could exploit the PORT bounce attack. All eight PORT bounce
attempts targeted the same 3rd party IP indicating that they
were potentially part of the same campaign.
B. Analysis
Compared to the number of malicious ﬁles we found in our
crawling, there were surprisingly few attacks on our honey pots.
One possible reason for this is the historical nature of FTP.
In other words, we may be seeing remnants of past malicious
campaigns on servers that remain online today. In one case, we
found ﬁles consistent with the dsns network scanner [18] from
early as 2004. That said, while we do not see many instances
of active maliciousness, those that we see are in line with
our analysis. We ﬁnd several campaigns looking for world-
writable FTP servers, in which clients attempted to upload
and then delete the hello.world.txt write probe on our
honey-pots. We also observed attackers searching for web-root
directories such as cgi-bin, www, and public_html. This
further validates that attackers are cognizant of and actively
510
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:25 UTC from IEEE Xplore.  Restrictions apply. 
looking for directories which may be useful for server-site
scripting attacks.
We also note 36 IPs issued the AUTH command and
attempted to complete TLS handshakes, likely to identify
devices by certiﬁcate. We also see behavior consistent with the
WaReZ transporters from Section VI—we observed attempts
to create directories with no data uploaded to them.
The questions of whether these attacks are malicious or
academic exists. We saw both explicit evidence of both: some
IPs were nearly identically conﬁgured compared to ours with
landing pages describing scanning research while others are
testing PORT validation from Tor Exit Nodes. Most IPs provide
no indication of their intention.
IX. CASE STUDY— FTPS IMPACT
FTPS was created in an attempt to bolt on security to the
FTP protocol. The client signals that it wishes to use FTPS
by sending the AUTH SSL or AUTH TLS request to the server.
After the server responds positively, both sides conduct a TLS
handshake to secure the connection before continuing with
the standard FTP protocol inside of the TLS connection. By
conducting this negotiation, users are able to protect their
username and password combinations as well as any data being
transferred.
During our enumeration, we found that 3.4M FTP servers
(25%) support FTPS, but less than 85K require it before
authentication. Looking for an explanation for this low rate,
we surveyed popular web browsers and built-in command line
tools on OS X, Linux, and Windows. To our surprise, we found
that not a single one supported FTPS. When a server requires
the connection to be secure before accepting the USER request,
these built-in clients disconnect. Third party FTP clients that
support FTPS are available for all three major OSs. Even in
the case that both the client and the server support FTPS, the
security provided is less than would be expected. 1.7M (50%)
of the sites that support FTPS use self-signed certiﬁcates, which
provide no way for the client to check the identity of the server.
Although some third-party clients can pin certiﬁcates internally,
there still exists a trust-on-ﬁrst-use authentication vulnerability.
Surprisingly„ there are only 793K unique certiﬁcates across
all 3.4M servers that support FTPS. This appears to be due
to two reasons. First, hosting providers commonly use their
browser-trusted wildcard SSL certiﬁcate on all shared-hosting
servers. Second, device manufacturers are deploying identical
certiﬁcates on all their devices. We show the most common