change values at random, seeds a secure PRG with ksh
and uses its output for whatever randomness is required
in the key exchange algorithm (e.g., the Difﬁe-Hellman
exponent). If a Telex station has been monitoring the
connection to this point, it will know all the inputs to the
client’s key exchange procedure: it will have observed
the server’s key exchange parameter and computed the
client’s PRG seed ksh. Using this information, the Telex
2Both the additional root CA whitelist and the browser list need to be
checked; the censor may control a CA that is commonly whitelisted by
browsers, and the root CA whitelist may contain entries that are trusted
by one browser but not another.
station simulates the client and simultaneously derives the
same master secret.
Handshake completion
If a Telex station is listening,
it attempts to decrypt each side’s Finished message. The
station should be able to use the master secret to decrypt
them correctly and verify that the hashes match its obser-
vations of the handshake. If either hash is incorrect, the
Telex station stops observing the connection. Otherwise,
it switches roles from a passive observer to a man-in-the-
middle. It forges a TCP RST packet from the client to
NotBlocked.com, blocks subsequent messages from ei-
ther side from reaching the remote end of the connection,
and assumes the server’s role in the unbroken TCP/TLS
connection with the client.
Session resumption Once a client and server have es-
tablished a session, TLS allows them to quickly resume
or duplicate the connection using an abbreviated hand-
shake. Our protocol can support this too, allowing the
Telex station to continue its role as a man-in-the-middle.
The station remembers key and session_id by the
server, for sessions it successfully joined. A client at-
tempts to resume the session on a new connection by send-
ing a ClientHello message containing the session_id
and a fresh tag τ(cid:48), which Telex can observe and verify if
it is present. If the server agrees to resume the session,
it responds with a ServerHello message and a Finished
message encrypted with the original master secret. The
client then sends its own Finished message encrypted in
the same way, which conﬁrms that it knows the original
master secret. The Telex station checks that it can decrypt
and verify these messages correctly, then switches into a
man-in-the-middle role again.
6 Security Analysis
In this section, we analyze Telex’s security under the
threat model described in Section 2.1.
6.1 Passive attacks
First, we consider a passive censor who is able to ob-
serve arbitrary trafﬁc within its network. For this censor
to detect that a client is using Telex, it must be able to
distinguish normal TLS ﬂows from Telex ﬂows.
Telex deviates from a normal TLS handshake in the
client’s nonce (sent in the ClientHello message) and in
the client’s key exchange parameters. In Section 4, we
showed that an attacker cannot distinguish a Telex tag
from a truly random string with more than a negligible
advantage. This means that a client’s tagged nonce (using
Telex) is indistinguishable from a normal TLS random
nonce. Likewise, the Telex-generated key exchange pa-
rameters are the output of a secure PRG; they are not
distinguishable from truly random strings as a direct re-
sult of the security of the PRG.
During the TLS record protocol, symmetric cryptogra-
phy is used between the Telex station and the client. A
censor will be unable to determine the contents of this
encrypted channel, as in normal TLS, and will thus be un-
able to distinguish between a Telex session and a normal
TLS session from the cryptographic payload alone.
Stream cipher weakness
TLS supports several stream
cipher modes for encrypting data sent over the connec-
tion. Normally, the key stream is used once per session, to
avoid vulnerability to a reused key attack. However, the
Telex station and NotBlocked.com use the same shared
secret when sending data to the client, so the same key
stream is used to encrypt two different plaintexts. An
attacker (possibly different from the censor) with the abil-
ity to receive both of the resulting ciphertexts can simply
XOR them together to obtain the equivalent of the plain-
texts XORed together. To mitigate this issue, Telex sends
a TCP RST to NotBlocked.com to quickly stop it from
returning data. In addition, our implementation uses a
block cipher in CBC mode, for which TLS helps mitigate
these issues further by providing for the communication
of a random per-record IV.
We note that an adversary in position to carry out this
attack (such as one surrounding the Telex station) already
has the ability to detect the client’s usage of Telex, as
well as the contents of the connection from Telex to
Blocked.com.
Trafﬁc analysis A sophisticated adversary might at-
tempt to detect a use of Telex by detecting anomalous
patterns in connection count, packet size, and timing. Pre-
vious work shows how these characteristics can be used to
ﬁngerprint and identify speciﬁc websites being retrieved
over TLS [18]. However, this kind of attack would be
well beyond the level of sophistication observed in current
censors [16]. We outline a possible defense against trafﬁc
analysis in Section 9.
6.2 Active attacks
Our threat model also allows the censor to attempt a vari-
ety of active attacks against Telex. The system provides
strong defenses against the most practical of these attacks.
Trafﬁc manipulation
The censor might attempt to
modify messages between the client and the Telex sta-
tion, but Telex inherits defenses against this from TLS.
For example, if the attacker modiﬁes any of the param-
eters in the handshake messages, the client and Telex
station will each detect this when they check the MACs in
the Finished messages, which are protected by the shared
secret of the TLS connection. Telex will then not intercept
the connection, and the NotBlocked.com server will re-
spond with a TLS error. Widescale manipulation of TLS
handshakes or payloads would disrupt Telex; however, it
would also interfere with the normal operation of TLS
websites.
Tag replay
The censor might attempt to use various
replay attacks to detect Telex usage. The most basic of
these attacks is for the censor to initiate its own Telex
connection and reuse the nonce from a suspect connec-
tion; if this connection receives Telex service, the censor
can conclude that the nonce was tagged and the original
connection was a Telex request.
Our protocol prevents this by requiring the client to
prove to the Telex station that it knows the shared secret
associated with the tagged nonce. We achieve this by
using the shared secret to derive the key exchange param-
eter, as described in Section 5. In particular, consider
the encrypted Finished message that terminates the TLS
handshake. This message must be encrypted using the
freshly negotiated key (or else the TLS server will hang
up), so it cannot simply be replayed. Second, the key
exchange parameter in use must match the shared secret
in the tagged nonce, or the Telex station will not be able
to verify the MAC on the Finished message. Together,
these requirements imply that the client must know the
shared secret.
Handshake replay
This property of proving knowl-
edge of the shared secret is only valid if the server pro-
vides fresh key exchange parameters. An attacker may
circumvent this protection by replaying trafﬁc in both di-
rections across the Telex station. This attack will cause a
visible difference in the ﬁrst ApplicationData message re-
ceived at the client, provided that either 1) Blocked.com’s
response is not completely static (e.g., it sets a session
cookie) or 2) the original connection being replayed was
an unsuccessful Telex connection.
In either case, the
new ApplicationData message will be fresh data from
Blocked.com.
A partial defense against this attack is to enforce fresh-
ness of the timestamps used in both halves of the TLS
handshake and prohibit nonce reuse within the window
of acceptable timestamps. However, this defense fails
in the case where the original connection being replayed
was an unsuccessful attempt to initiate a Telex connec-
tion, because the Telex station did not see the ﬁrst use
of the nonce. As a further defense, we note that Not-
Blocked.com will likely not accept replayed packets, and
the Telex station can implement measures to detect at-
tempts to prevent replayed packets from reaching Not-
Blocked.com.
Ciphertext comparison
The attacker is able to detect
the use of Telex if they are able to receive the unaltered
trafﬁc from NotBlocked.com, in addition to the trafﬁc
they forward to the client. Though they will not be able
to decrypt either of the messages, they will be able to see
that the ciphertexts differ, and from this conclude that a
client is using Telex. Normally, Telex blocks the trafﬁc
between NotBlocked.com and the client after the TLS
handshake to prevent this type of attack.
However, it is possible for an attacker to use DNS hi-
jacking for this purpose. The attacker hijacks the DNS en-
try for NotBlocked.com to point to an attacker-controlled
host. The client’s path to this host passes through Telex,
and the attacker simply forwards trafﬁc from this host to
NotBlocked.com. Thus, the attacker is able to observe the
ciphertext trafﬁc on both sides of the Telex station, and
therefore able to determine when it modiﬁes the trafﬁc.
Should censors actually implement this attack, we can
modify Telex stations in the following way to help detect
DNS hijacking until DNSSEC is widely adopted. When
it observes a tagged connection to a particular server IP,
the station performs a DNS lookup based on the common
name observed in the X.509 certiﬁcate. This DNS lookup
returns a list of IP addresses. If the server IP for the
tagged connection appears in this list, the Telex station
will respond to the client and proxy the connection. Oth-
erwise, the station will not deviate from the TLS protocol,
as it is possible that the censor is hijacking DNS. This
may lead to false negatives, as DNS is not globally con-
sistent for many sites, but as long as the censor has not
compromised the DNS chain that the station uses, there
will be no false positives. For popular sites, we could also
add a whitelisted cache of IP addresses.
Since the censor controls part of the network between
the client and the Telex station, it could also try to redirect
the connection by other means, such as transparently prox-
ying the connection to a censor-controlled host. In these
cases, the destination IP address observed by Telex will
be different from the one speciﬁed by the client. Thus,
the context strings constructed by the client and Telex
will differ, and Telex will not recognize the connection
as tagged. This attack offers the adversary an expensive
denial of service attack, but it does not allow the attacker
to detect attempted use of Telex.
Denial of service A censor may attempt to deny service
from Telex in two ways. First, it may attempt to exhaust
Telex’s bandwidth to proxy to Blocked.com. Second, it
may attempt to exhaust a Telex station’s tag detection
capabilities by creating a large amount of ClientHello
messages for the station to check. Both methods are overt
attacks that may cause unwanted political backlash on the
censor or even provoke an international incident. To com-
bat the ﬁrst attack, we can implement a client puzzle [20],
where Telex issues a computationally intensive puzzle
the client must solve before we allow proxy service. The
client puzzle should be outsourced [32] to avoid addi-
tional latency that might distinguish Telex handshakes
from normal TLS handshakes. To combat the second
attack, we can implement our tag checking in hardware
to increase throughput if necessary.
7
Implementation
To demonstrate the feasibility of Telex, we implemented
a proof-of-concept client and station. While we believe
these prototypes are useful models for research and exper-
imentation, we emphasize that they may not provide the
performance or security of a more polished production
implementation, and should be used accordingly.
7.1 Client
Our prototype client program, which we refer to as
telex_client, is designed to allow any program that
uses TCP sockets to connect to the Telex service without
modiﬁcation. It is written in approximately 1200 lines of
C (including 500 lines of shared TLS utility code) and
uses libevent to manage multiple connections. The user
initializes telex_client by specifying a local port and
a remote TLS server that is not blocked by the censor (e.g.
NotBlocked.com). Once telex_client launches, it be-
gins by listening on the speciﬁed local TCP socket. Each
time a program connects to this socket, telex_client
initiates a TLS connection to the unblocked server spec-
iﬁed previously. Following the Telex-TLS handshake
protocol (see Section 5.2), telex_client inserts a tag,
generated using the scheme described in Section 4, into
the ClientHello nonce. We modiﬁed OpenSSL to accept
supplied values for the nonce as well as the client’s Difﬁe-
Hellman exponent. We supply this 1024-bit value as the
output of a secure pseudorandom generator with input
ksh associated with the previously generated tag. These
changes required us to modify fewer than 20 lines of code
in OpenSSL 1.0.0.
7.2 Station
Our prototype Telex station uses a modular design to pro-
vide a basis for scaling the system to high-speed links and
to ensure reliability. In particular, it fails safely: simple
failures of the components will not impact non-Telex TLS
trafﬁc. The implementation is divided into three compo-
nents, which are responsible for diversion, recognition,
and proxying of network ﬂows.
Diversion
The ﬁrst component consists of a router at
the ISP hosting the Telex station. It is conﬁgured to allow
the Telex station to passively monitor TLS packets (e.g.,
TCP port 443) via a tap interface. Normally, the router
will also forward the packets towards their destination,
but the recognition and relay components can selectively
command it to not forward trafﬁc for particular ﬂows.
This allows the other components to selectively manipu-
late packets and then reinject them into the network. In
our implementation, the router is a Linux system that uses
the iptables and ipset [19] utilities for ﬂow blocking.
Recognition During the TLS handshake, the Telex
station recognizes tagged connections by inspecting the
ClientHello nonces. In our implementation, the recog-
nition subsystem reconstructs the TCP connection using
the Bro Network Intrusion Detection System [23]. Bro
reconstructs the application-layer stream and provides
an event-based framework for processing packets. We
used the Bro scripting language for packet processing
(approximately 300 lines), and we added new Bro built-in
functions using C++ (approximately 450 lines).
When the Bro script recognizes a TLS ClientHello
message, it checks the client nonce to see whether it is
tagged. (The tag checking logic is a C implementation
of the algorithm described in Section 4.) If the nonce
is tagged, we extract the shared secret associated with