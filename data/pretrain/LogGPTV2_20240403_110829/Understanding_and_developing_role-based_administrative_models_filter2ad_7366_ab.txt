The deletion of an edge in the role hierarchy can be quite straightforward. However, this approach necessitates the addition of several edges to the relation when a new edge or role is introduced, to maintain transitivity. In summary, there are multiple ways to represent the role hierarchy, each influencing the complexity of different hierarchy operations in unique ways.

In fact, there are four distinct Role Hierarchy Administration (RHA) models, varying in complexity. For simplicity, we will refer to the RHA model, except in Section 5, where we discuss specific members of this family.

### Informal Overview
The RHA model is centered around the concept of administrative scope. Each role \( r \in R \) has an administrative scope, which defines the set of roles that \( r \) can modify. The administrative scope is determined by the structure of the hierarchy.

A role \( r' \) is within the administrative scope of \( r \) if any change to \( r' \) will only be observed by \( r \) and roles more senior than \( r \). This ensures that changes made by \( r \) do not have unexpected side effects due to inheritance elsewhere in the hierarchy. Formally, we define the administrative scope as follows [6]:

**Definition 1.** The administrative scope of a role \( r \), denoted \( \sigma(r) \), is defined as:
\[ \sigma(r) = \{ s \in \downarrow r : \uparrow s \subseteq \uparrow\! r \} \]

The strict administrative scope of \( r \) is defined as:
\[ \sigma'(r) = \sigma(r) \setminus \{ r \} \]

For \( A \subseteq R \), we define:
\[ \sigma(A) = \{ r \in \downarrow A : \uparrow r \subseteq \uparrow\! A \} \]
\[ \sigma'(A) = \sigma(A) \setminus A \]

Note that \( r \in \sigma(r) \) for all \( r \), which motivates the definition of the strict administrative scope. For example, in the role hierarchy depicted in Figure 1, \( \sigma(\text{PL1}) = \{\text{ENG1}, \text{PE1}, \text{QE1}, \text{PL1}\} \).

### Administrative Scope and Operations
The conditions that determine whether an administrative operation is allowed to proceed in the RHA model are summarized in Table 2. Each condition requires that the arguments of the operation be contained within the administrative scope of the role performing the operation.

### Administrative Domains
We say \( D \subseteq R \) is an administrative domain with administrator \( r \) if \( D = \sigma(r) \) for some \( r \in R \). We denote the set of administrative domains in \( R \) as \( D_R \). When the context is clear, we will omit \( R \).

In this section, we establish a fundamental result concerning administrative domains: each pair of domains is either nested or disjoint. This leads naturally to the concept of an administrative domain tree and the smallest domain containing a given role. These concepts will be used extensively in the following section.

**Proof.** Let \( r \in \sigma(a) \). We consider each of the three cases in turn. (Note that \( \sigma(a) \cap \sigma(b) = \sigma(a) \) is equivalent to saying that \( \sigma(a) \subseteq \sigma(b) \)).

- If \( a \in \sigma(b) \), then by definition, \( a \leq b \), \( \downarrow a \subseteq \downarrow b \), and \( \uparrow a \subseteq \uparrow\! b \). Hence, \( \uparrow r \subseteq \uparrow\! a \subseteq \uparrow\! b \) and \( r \in \sigma(b) \). By symmetry, \( \sigma(a) \cap \sigma(b) = \sigma(b) \) if \( b \in \sigma(a) \).
- Now assume \( a \notin \sigma(b) \) and \( b \notin \sigma(a) \). Note that \( a \neq b \).
  - If \( a \nleq b \), then \( a \notin \uparrow\! b \); by definition, \( r \in \sigma(a) \) implies \( r \leq a \) (i.e., \( a \in \uparrow r \)), and hence \( r \notin \sigma(b) \).
  - Otherwise, we can assume without loss of generality that \( a < b \). Since \( a \notin \sigma(b) \), there exists \( x \in \uparrow a \) such that \( x \notin \uparrow\! b \). Given \( r \in \sigma(a) \), we have \( r \leq a \), and hence \( r \leq x \) by transitivity. Therefore, \( x \in \uparrow r \) and hence \( r \notin \sigma(b) \).

**Remark 3.** Note that \( a \leq b \) does not imply \( \sigma(a) \subseteq \sigma(b) \). A counterexample is provided by ED and PL1 in Figure 1.

**Lemma 2.** Let \( a, b \in R \). Then:
\[ \sigma(a) \cap \sigma(b) =
\begin{cases}
\sigma(a) & \text{if } a \in \sigma(b), \\
\sigma(b) & \text{if } b \in \sigma(a), \\
\emptyset & \text{otherwise}.
\end{cases} \]

### Operational Semantics of Hierarchy Operations
The operational semantics of hierarchy operations are detailed in Table 1. The conditions for the success of these operations in the RHA model are summarized in Table 2.

### Preserving Administrative Scope
In Section 2.3, we observed that the effect of a hierarchy operation is not necessarily limited to the parameters of the operation. Consequently, the administrative scope of a role can change following a hierarchy operation. For instance, if PL1 deletes the edge (PE1, PL1), a new edge (PE1, DIR) is added to preserve inheritance, and PE1 no longer belongs to \( \sigma(\text{PL1}) \).

While these operational semantics may be acceptable in certain situations, it is desirable for a hierarchy operation to preserve administrative scope. To achieve this, additional conditions must be imposed. Specifically, if \( a \) performs a hierarchy operation, we could require that:

- \( \sigma(a) \) should be preserved.
- \( \sigma(a') \) should be preserved for all \( a' \leq a \).
- \( \sigma(a') \) should be preserved for all \( a' \).

### Scope Preserving Hierarchy Operations
A hierarchy operation may cause changes to \( R \) or the partial ordering defined on \( R \). If \( S \subseteq R \), we will write \( S' \) to denote the value of \( S \) following a hierarchy operation. In particular, we will write \( \sigma(a)' \) to denote the administrative scope of \( a \) following an operation. Informally, we say \( S \) is preserved by a hierarchy operation if anything in \( S \) prior to the operation remains in \( S \) if it remains in \( R \). Formally, we have the following definition:

**Definition 4.** Let \( S \subseteq R \). We say \( S \) is preserved by a hierarchy operation if \( S \cap R' \subseteq S' \).

**Definition 5.** We say an operation performed by \( a \) is:
- **Locally scope preserving** if it preserves \( \sigma(a) \).
- **Hierarchically scope preserving** if it preserves \( \sigma(b) \) for all \( b \in R \) such that \( \sigma(a) \subseteq \sigma(b) \).
- **Universally scope preserving** if it preserves \( \sigma(b) \) for all \( b \in R \).

For convenience, we will say an operation is 0SP if it is always locally scope preserving, 1SP if it is always hierarchically scope preserving, and 2SP if it is always universally scope preserving. It is clear from the definition that if an operation is 2SP, then it is also 0SP and 1SP, and if an operation is 1SP, then it is also 0SP.

Note that hierarchy operations are not, in general, 0SP. The operation deleteEdge(PL1, PE1, PL1) defined in Table 2 is not 0SP, since \( \sigma(\text{PL1}) = \{\text{ENG1}, \text{QE1}, \text{PE1}, \text{PL1}\} \) and \( \sigma(\text{PL1})' = \{\text{QE1}, \text{PL1}\} \). Hence, it is necessary to impose restrictions on the hierarchy operations that are permitted to succeed (if we wish to preserve administrative scope). We address these issues in the next section and also specify conditions that define 0SP, 1SP, and 2SP operations.

**Definition 6.** We say an operation performed by \( a \) is **autonomy preserving** if there does not exist \( b \leq a \) such that \( b \) is permitted to perform the same operation. We say an operation is 3SP if it is autonomy preserving. An example will make this notion clear: let \( a \) and \( b \) be administrators with \( \sigma(b) \subseteq \sigma(a) \) and \( r \in \sigma(b) \); then deleteRole(a, r) succeeds if the operation is 2SP but fails if it is 3SP. In other words, a 3SP operation will only succeed if it is invoked by the most local administrator: senior administrators cannot change nested administrative domains within their scope.

### Scope Preserving Administrative Models
An administrative model \( M \) is part of the reference monitor that determines whether requests to perform administrative operations should succeed. Typically, \( M \) specifies conditions for each hierarchy operation that must be satisfied for that operation to succeed (as in Table 2, for example). We say a hierarchy operation is \( M \)-permissible if the conditions permit the operation to proceed. Some conditions may only preserve the administrative scope of the role that performs the operation, while others may preserve the administrative scope of all roles. We now introduce a classification scheme for administrative models by extending the definitions of 0SP, 1SP, 2SP, and 3SP for hierarchy operations in the natural way.

**Definition 7.** We say that \( M \) is \( i \)-SP if all \( M \)-permissible hierarchy operations are \( i \)-SP, where \( 0 \leq i \leq 3 \).

The RHA family of models is not 0SP. This is a potential criticism of the RHA family of models, although it should be noted that a role can never increase its own administrative scope by performing a hierarchy operation. Nevertheless, we believe this provides sufficient motivation for introducing the idea of 0SP.

Informally, we note that one problem with the set of conditions in Table 2 is that deleting an edge can "break" the administrative scope of a role.