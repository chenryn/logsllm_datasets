would make the deletion of an edge quite straightforward.
However, this approach would require several edges to be
added to the relation when a new edge or role is added, in
order to preserve transitivity. In short, there are a number
of ways of representing the role hierarchy, each of which
inﬂuences the complexity of diﬀerent hierarchy operations
in diﬀerent ways.
3In fact there are four diﬀerent RHA models of diﬀering
complexity. For convenience we will refer to the RHA model,
except in Section 5, when we discuss the particular members
of the family.
Informally, r(cid:1)
The RHA model is based around the idea of administra-
tive scope. Every role r ∈ R has an administrative scope,
which deﬁnes the set of roles that can be modiﬁed by r.
Administrative scope is determined by the structure of the
hierarchy.
is in the administrative scope of
r if any change to r(cid:1)
will only be observed by r and roles
more senior than r. That is, any change to r(cid:1)
made by r
will not have unexpected side eﬀects due to inheritance else-
where in the hierarchy. More formally, we have the following
deﬁnition [6].
Definition 1. The administrative scope of a role r, de-
noted σ(r), is deﬁned to be
σ(r) = {s ∈ ↓r : ↑s ⊆ (cid:11)r}.
The strict administrative scope of r is deﬁned to be
σ(r) \ {r} and is denoted (cid:2)σ(r). For A ⊆ R we deﬁne
σ(A) = {r ∈ ↓A : ↑r ⊆ (cid:11)A} and (cid:2)σ(A) = σ(A) \ A.
Note that r ∈ σ(r) for all r, which motivates the deﬁnition
of strict administrative scope. In the role hierarchy depicted
in Figure 1, for example, σ(PL1) = {ENG1, PE1, QE1, PL1}.
3.1 Administrative scope and administrative
operations
The conditions that determine whether an administrative
operation is allowed to proceed in the RHA model are sum-
marized in Table 2. Note that each condition requires that
the arguments of the operation be contained in the admin-
istration scope of the role performing the operation.
3.2 Administrative domains
We will say D ⊆ R is an administrative domain, with
administrator r, if D = σ(r) for some r ∈ R. We will write
DR for the set of administrative domains in R. Henceforth
we will omit R when it is obvious from context.
In this section we establish a fundamental result concern-
ing administrative domains: namely, that each pair of do-
mains is either nested or disjoint. This leads naturally to the
concept of an administrative domain tree and of the small-
est domain containing a given role. These concepts will be
used extensively in the following section.
Proof. Let r ∈ σ(a). We consider each of the three cases
in turn. (Note that σ(a)∩σ(b) = σ(a) is equivalent to saying
that σ(a) ⊆ σ(b).)
If a ∈ σ(b) then, by deﬁnition, a (cid:2) b, ↓a ⊆ ↓b and
↑a ⊆ (cid:11)b. Hence ↑r ⊆ (cid:11)a ⊆ (cid:11)b and r ∈ σ(b). By symme-
try, σ(a) ∩ σ(b) = σ(b) if b ∈ σ(a).
Now assume that a (cid:6)∈ σ(b) and b (cid:6)∈ σ(a). Note that a (cid:6)= b.
If a (cid:7) b, then a (cid:6)∈ (cid:11)b; by deﬁnition, r ∈ σ(a) implies r (cid:2) a
(that is, a ∈ ↑r) and hence r (cid:6)∈ σ(b). Otherwise, we can
assume without loss of generality that a < b. Then since
a (cid:6)∈ σ(b), there exists x ∈ ↑a such that x (cid:6)∈ (cid:11)b. Now given
that r ∈ σ(a), we have r (cid:2) a, and hence r (cid:2) x by transitiv-
ity. Therefore x ∈ ↑r and hence r (cid:6)∈ σ(b).
Remark 3. Note that a (cid:2) b does not
imply that
σ(a) ⊆ σ(b). A counterexample is provided by ED and PL1
in Figure 1.
Lemma 2. Let a, b ∈ R. Then
σ(a)
σ(b)
∅
σ(a) ∩ σ(b) =
⎧⎪⎪⎨
⎪⎪⎩
if a ∈ σ(b),
if b ∈ σ(a),
otherwise.
Operation
addEdge(a, c, p)
deleteEdge(a, c, p)
addRole(a, r, C, P )
deleteRole(a, r)
Semantics
RH ← RH ∪ {(c, p)} \ {(x, p) : x ∈ (cid:3)c ∩ (cid:3)p} \ {(c, y) : y ∈ (cid:4)c ∩ (cid:4)p}
If (r, c), (r, p) ∈ RH and the edge (c, p) is added, then we no longer require the edge (r, p),
because (r, c) and (c, p) imply (r, p) by transitivity. Hence any role r that is an immediate
child of both c and p is aﬀected by the operation as the edge (r, p) must be deleted from RH .
Similarly, any role r that is an immediate parent of both c and p is aﬀected by addEdge(a, c, p)
as the edge (c, r) must be deleted from RH .
RH ← RH \ {(c, p)} ∪ {(x, p) : x ∈ (cid:3)c} ∪ {(c, y) : y ∈ (cid:4)p}
If (r, c) ∈ RH , then r (cid:1) c (cid:1) p and hence we may need to add the edge (r, p) to preserve the
inheritance. Similarly, if (p, r) ∈ RH , then c (cid:1) p (cid:1) r and we may need to add the edge (c, r).
R ← R ∪ {r}
RH ← RH ∪ {(c, r) : c ∈ C} ∪ {(r, p) : p ∈ P} \ {(c, p) : c ∈ C, p ∈ P}
If (c, p) ∈ RH , where c ∈ C and p ∈ P , then the edge (c, p) becomes redundant following the
addition of role r (since (c, r) and (r, p) are added to the hierarchy, thereby implying c < p by
transitivity). Hence we remove (c, p) from RH .
R ← R \ {r}
RH ← RH ∪ {(c, p) : c ∈ (cid:3)r, p ∈ (cid:4)r}
For any role c ∈ (cid:3)r and any role p ∈ (cid:4)r we have c (cid:1) r (cid:1) p, so we must add an edge (c, p) to
the hierarchy following the deletion of r.
Table 1: Operational semantics of hierarchy operations
Operation
addRole(a, r, C, P ) C ⊆ (cid:2)σ(a), P ⊆ σ(a)
Conditions
deleteRole(a, r)
addEdge(a, c, p)
deleteEdge(a, c, p)
r ∈ (cid:2)σ(a)
c, p ∈ σ(a)
c, p ∈ σ(a)
Table 2: Conditions for success of hierarchy operations in RHA
Lemma 2 states that administrative domains are either
nested or disjoint.4 An illustration of this result is given in
Figure 1(b); domains are enclosed by broken lines. The hi-
erarchy depicted in Figure 1(a) is adapted from an example
by Sandhu. Hence, for any partially ordered set of roles R,
the partially ordered set (cid:4)D,⊆(cid:5) is a tree. Figure 1(c) illus-
trates the administrative domain tree for the role hierarchy
depicted in Figure 1.
The administrative domain tree provides a natural order-
ing on the set of administrators. Speciﬁcally, if a and b are
administrators, we write a (cid:5) b if σ(a) ⊆ σ(b). Figure 1(d)
shows the partial order deﬁned on the set of administrators.
Note that {r} is an administrative domain (with admin-
istrator r) for any r that is non-maximal in another ad-
ministrative domain (as is the case with PE1, for example).
We call such administrative domains trivial. Note also that,
by the conditions in Table 2, the administrator of a trivial
administrative domain cannot perform any hierarchy oper-
ation. Henceforth, we conﬁne our attention to non-trivial
administrative domains.
4. PRESERVING ADMINISTRATIVE
SCOPE
In Section 2.3 we observed that the eﬀect of a hierarchy
operation is not necessarily limited to the parameters of the
operation. A consequence of this is that the administrative
scope of a role can change following a hierarchy operation.
If, for example, PL1 deletes the edge (PE1, PL1), a new edge
(PE1, DIR) is added to preserve inheritance and PE1 no longer
belongs to σ(PL1).
Of course, these operational semantics may be regarded
as acceptable in certain situations. However, if we assume
that it is desirable for a hierarchy operation to preserve ad-
ministrative scope, then it is necessary to impose some ad-
ditional conditions that must be satisﬁed if the operation is
to succeed. There are at least three diﬀerent possibilities.
Speciﬁcally, if a performs a hierarchy operation we could
require that:
• σ(a) should be preserved;
• σ(a(cid:1)
• σ(a(cid:1)
) should be preserved for all a(cid:1) (cid:1) a;
) should be preserved for all a(cid:1)
.
4ARBAC97 introduces the concept of authority ranges
which are deﬁned by the administrator of the system.
It
is required that authority ranges are either nested or dis-
joint. It is interesting that this property “comes for free”
with domains deﬁned using administrative scope. We will
consider this in more detail in Section 6.
4.1 Scope preserving hierarchy operations
A hierarchy operation may cause a change to R or the
partial ordering deﬁned on R. If S ⊆ R, we will write S(cid:1)
or
(cid:1)
to denote the value of S following a hierarchy operation.
(S)
(cid:1)
In particular, we will write σ(a)
to denote the administra-
tive scope of a following an operation, but for clarity we
DIR
PL1
PL2
PE1
QE1
PE2
QE2
ENG1
ENG2
ED
E
(a) Role names
(b) Administrative domains
{E,...,DIR}
{ENG1,PE1,QE1,PL1}
{ED}
{ENG2,PE2,QE2,PL2}
{ENG1}
{PE1}
{QE1}
{E}
{PE2}
{ENG2,QE2}
DIR
PL1
ED
PL2
QE2
{ENG2}
(d) Administrator tree
(c) Administrative domain tree
Figure 1: An example role hierarchy
, (↓x)
(cid:1)
and ((cid:11)x)
(cid:1)
prefer to write (↑x)
, ↓x(cid:1)
(cid:1)
and (cid:11)x(cid:1)
). Informally, we say S is preserved by a hierarchy
operation if anything in S prior to the operation remains in
S if it remains in R. More formally, we have the following
deﬁnition.
(rather than ↑x(cid:1)
Definition 4. Let S ⊆ R. We say S is preserved by a
hierarchy operation if S ∩ R(cid:1) ⊆ S(cid:1)
.
Definition 5. We say an operation performed by a is
• locally scope preserving if it preserves σ(a);
• hierarchically scope preserving if it preserves σ(b) for
all b ∈ R such that σ(a) ⊆ σ(b);
• universally scope preserving if it preserves σ(b) for all
b ∈ R.
For convenience, we will say an operation is 0SP if it is
always locally scope preserving, 1SP if it is always hierar-
chically scope preserving, and 2SP if it is always universally
scope preserving. It is clear from the deﬁnition that if an
operation is 2SP then it is also 0SP and 1SP, and that if an
operation is 1SP then it is also 0SP.
Note that hierarchy operations are not,
in general,
0SP. The operation deleteEdge(PL1, PE1, PL1) deﬁned in Ta-
ble 2 is not 0SP, since σ(PL1) = {ENG1, QE1, PE1, PL1} and
= {QE1, PL1}. Hence it is necessary to impose re-
(cid:1)
σ(PL1)
strictions on the hierarchy operations that are permitted to
succeed (if we wish to preserve administrative scope). We
address these issues in the next section and also specify con-
ditions that deﬁne 0SP, 1SP and 2SP operations.
Definition 6. We say an operation performed by a is
autonomy preserving if there does not exist b (cid:2) a such that
b is permitted to perform the same operation.
We say an operation is 3SP if it is autonomy preserv-
let a and
ing. An example will make this notion clear:
b be administrators with σ(b) ⊆ σ(a) and r ∈ σ(b); then
deleteRole(a, r) succeeds if the operation is 2SP but fails if
it is 3SP. In other words, a 3SP operation will only succeed
if it is invoked by the most local administrator: senior ad-
ministrators cannot change nested administrative domains
within their scope.
4.2 Scope preserving administrative models
An administrative model M is part of the reference mon-
itor that determines whether requests to perform adminis-
trative operations should succeed. Typically, M speciﬁes
conditions for each hierarchy operation that must be satis-
ﬁed for that operation to succeed (as in Table 2, for exam-
ple). We say a hierarchy operation is M-permissible if the
condition(s) permit the operation to proceed. Some con-
ditions may only preserve the administrative scope of the
role that performs the operation, while others may preserve
the administrative scope of all roles. We now introduce a
classiﬁcation scheme for administrative models by extend-
ing the deﬁnitions of 0SP, 1SP, 2SP and 3SP for hierarchy
operations in the natural way.
Definition 7. We say that M is
permissible hierarchy operations are iSP, 0 (cid:2) i (cid:2) 3.
iSP if all M-
The RHA family of models is not 0SP. This is a potential
criticism of the RHA family of models, although it should be
noted that a role can never increase its own administrative
scope by performing a hierarchy operation. Nevertheless, we
believe this provides suﬃcient motivation for introducing the
idea of 0SP.
Informally, we note that one problem with the set of condi-
tions in Table 2 is that deleting an edge can “break” the ad-