i
door SB for Λ⊥
choose k random scalars θi ∈ Zq for i = 1, . . . , k.
i ∈ {−1, 1}m×m randomly, and also
(3) Let Mi = Aτ ∗
, so Aw =
i =1 wi Mi + B) = (Aτ ∗|Aτ ∗Rw + h(w)B) where Rw =
i ∈ Zm×m
(4) Set stw ← SampleRight(Aτ ∗, hw , Rw , SB, u0, σ) be the token
(Aτ ∗|k
k
i =1 wi R∗
of user τ∗ on keyword w, and send it to A.
and h(w) = 1 +k
· B ∈ Z n×m
i =1 θiwi.
+ θi
q
q
Challenge. After the queries abort, A sends two keywords w0
and w1 to B, B checks if h(w∗) = 0. If it is, abort the game and
output a random b′ ∈ {0, 1}. Otherwise, B generates the challenge
ciphertext under the target identity τ∗ as follows:
(1) Let
v∗ =
 v1
Rw∗ =k
...
vm
q
 ∈ Zm
(cid:21)
∗
i R∗
i
i =1 w
(cid:20)
and C∗
0 = v0 ∈ Zq.
(2) B chooses w∗ ∈ {w1, w2} randomly, and sets
C
v∗
∗
1 =
for 1 ≤ i ≤ k, then computes
(Rw∗)⊤v∗
(3) Finally, B chooses a bit b ∈ {0, 1}. If b = 0, send the ciph-
1) to the adversary. Otherwise, choose a
and send C = (C0, C1)
tertext C∗ = (C∗
random C = (C0, C1) ∈ Zq × Z
to the adversary.
2(m+m′)
∈ Z
q
2(m+m′)
q
0, C∗
.
(cid:20)
Phase 2. The simulator repeats the same steps as in Phase 1
with the restriction that A cannot query for challenge keywords
w1 and w2.
Guess. After all the queries, A outputs a guess b′ of b by exe-
cuting the steps below:
Artificial abort: The challenger checks if h(w∗) = 0 and h(wi) (cid:44) 0
for i = 1, . . . , qt , where w∗ is the target message and w∗ (cid:60)
{w1, . . . , wqt }. If not, it returns a random bit b′ from {0, 1} and
aborts the game. Otherwise, B outputs the guess as the answer to
the LWE challenge which she tries to solve.
Note that if the LWE oracle is pseudorandom, then Aw =
(Aτ ∗|Rw∗) because of h(w∗) = 0, and for some random noise vec-
tor y ∈ Zm+m′
τ ∗s + y.
q
Therefore
, we get that v∗ = A⊤
distributed as Ψ
m+m′
α
= Aτ ∗⊤
y(R∗
w)⊤y
1) is a valid challenge ciphertext.
A⊤
∗
τ ∗s + y
(Aτ ∗R∗
w)⊤s + R∗
1 =
C
Above C∗
1 is a valid part of challenge ciphertext C∗. Again C∗
0 =
u⊤
0 s + x ia also a valid part of challenge ciphertext C0. Therefore
0, C∗
(C∗
If LWE oracle is random oracle, v0 is uniform in Zq and v∗ is
uniform in Zm+m′
. Therefore, the challenge ciphertext is always
2(m+m′)
uniform in Zq × Z
q
Let [pmin, pmax] be the probability interval of artificial abort
which does not happen in trapdoor queries. From the simulation
above and Lemma 6.2, we have that the value |pmax − pmin| is at
q2 , and thus it is required to make q large enough to achieve
least qt
a negligible function neдl(n), where qt ≤ q/2, pmin is at least 1
.
2q
Therefore, the advantage of B in solving LWE can be obtained as:
⊤
y
(cid:21)
(cid:20)
(cid:21)
s +
w
q
.
AdvLW EB
That is to say
′] − 1/2| +
≥ pmin
2
≥ p
4q
|Pr[b = b
+ neдl(n)
1
2(pmax − pmin)
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand129|Pr[Game4(1λ) = 1] − Pr[Game5(1λ) = 1]| ≤ AdvLWE
B .
To sum up, all the above arguments show that the given security
theorem holds.
□
7 IMPLEMENTATION
This section describes the implementation of each algorithm in
our scheme. The first part introduces how to realize the TrapGen
algorithm to find a short basis of lattice for a given matrix and then
generate the master key. The second part introduces how to use
Extbasis and RandBasis to extend a basis and matrix to a higher
dimensional basis and matrix that support the user tag, which is
used to derive the private key. The third part introduces several
sampling algorithms to efficiently compute a search token.
7.1 TrapGen Implementation
Many lattice encryption applications [2, 6] use the TrapGen algo-
rithm to obtain a pair of matrices (A, S) as their public/private keys,
where S is a short basis of lattice Λ⊥(A). However, few studies
show how to implement it. A recent study [4] only brings a rough
introduction to the flow of the algorithm. To realize the algorithm,
we propose a customized gaussian elimination method, which pro-
vides a general way to solve the linear equations problem over finite
fields, and can directly be used to construct a Hermite normal form
matrix and its basis.
In details, our method first addresses the linear equations prob-
lem over the prime finite field Zq; that is, find a set of integer
solutions x satisfying that Ax = 0 mod q. Without loss of gen-
erality, suppose that rank(A) = n, then the number of the basic
system of solutions is m − n. A generic solution is to produce the
reduced row echelon form of the coefficient matrix A via gaussian
elimination method and partial pivoting, and get a basic solution,
i.e, for each row of A, do
A(k, j : n) = A(k, j : n) − A(k, j) · A(i, j : n)
(6)
one by one to eliminate elements below the diagonal and to reduce
the elements on the diagonal to 1, where A(i, j
: n) = A(i, j
:
n)/A(i, j). Inspired by the gaussian elimination method [31], to
ensure that the solution is an element on the lattice, our solution
modifies equation (6) by replacing the division operation in the real
number field of the algorithm with the modular inversion on Zq,
i.e., do
A(k, j : n) = A(k, j : n) − A(k, j) · A(i, j : n) mod q
where A(i, j : n) = A(i, j : n) · A(i, j)−1. Let A′ denote the upper
triangular matrix of A after gaussian elimination, and then the
fundamental solution of linear equations Ax = 0 mod q can be
described as an m × (m − n)-matrix S′ that satisfies
′(i, j) =
S
−A′(i, n + j),
1,
0,
if 1 ≤ i ≤ n, 1 ≤ j ≤ m − n
if n + 1 ≤ i ≤ m, j = i − n
else
where each column of S′ is a solution of Ax = 0 mod q and these
m − n solutions are linearly independent.
From the structure of the above solution, it can be partitioned into
upper and lower blocks, where the lower block is an identity matrix
of order (m − n) × (m − n). Here we call the variable corresponding
to the value of “1” in this identity matrix as free variables. Certainly
the first m − n variables can also be selected as free variables to
construct the solution. Then the new solution obtained is also
a set of linearly independent vectors and the upper block is an
identity matrix, which is more suitable for constructing the basis
of the lattice. With this set of solutions, the next stage is how to
extend it to an m-dimensional one, because the basis of Λ⊥(A) is
an m × m-dimension matrix. This process is straightforward, i.e.,
adding n column vectors like si = q × ei = (0, . . . , 0, q, 0, . . . , 0)
after the S′ for m − n + 1 ≤ i ≤ m, where ei is a column vector
whose i-th coordinate is “1”, and the rest are “0”. Now the matrix
S = (S′|sm−n+1| · · · |sm) is a basis of the lattice Λ⊥(A) in Zm×m.
Finally, the rest operations for generating a short basis of Λ⊥(A) are
based on Alwen et al.’s work [4], i.e. converting the above matrix
into a Hermite normal form matrix to construct a short basis.
7.2 ExtBasis Implementation
As mentioned in Section 5, we employ both ExtBasis(·) and
Randbasis(·) algorithms [10] to derive the private key for a given
identity tag. Here, ExtBasis (·) provides a short basis of the form
(cid:18) S Q
(cid:19)
S+ =
q
0
I
where Q satisfies A0Q = −Fτ ∈ Zn×m′
. Therefore, the problem
of extending a basis for lattice Λ⊥(Aτ ) is equivalent to find an
arbitrary matrix Q that satisfies A0Q mod q = −Fτ . Unlike the
previous one in the Initialization stage, it is much more simpler. For
each column vector −fi of Fτ , we only need to find one solution
qi for A0x = −fi mod q and Q = (q1, . . . , qn). Note that the
RandBasis(·) algorithm is directly used to randomize the basis for
the user.
Remark. The ExtBasis algorithm takes the same lattice basis to
generate the extended basis for the tag-matrix, and the algorithm
involves a similar process to solve linear equations with the same
coefficient matrix. Therefore, our scheme can be further improved
to distribute the keys for different users in batches. In particular,
the gaussian elimination method over matrix (A0|Fτ 1| . . . |Fτ n) is
executed to find the corresponding solution for equation A0x = hi,
where each hi is the column of the block (Fτ 1| . . . |Fτ n).
7.3 SampleLeft Implementation
The main challenge of implementing search is to sample a de-
sired vector for u0 by SampleLeft algorithm with the keyword
w and user’s private key skτ . According to the requirements of
the algorithm, the goal is to output a random vector e ∈ Zm+m1
sampled from a distribution statistically close to the distribution
q(Aτ ,w),σ , where Aτ ,w = (Aτ |G(w)). In particular, the sample
DΛu
algorithm proceeds as follows:
• SampleLeft. First, choose a vector e2 which is distributed
statistically close to DZm1 ,σ randomly as e2. Then execute
e1 = SamplePre(Aτ , skτ , y), and y = u − (G(w) · e2) ∈ Zn
q.
Let e = (e1, e2) as the sample result.
• SamplePre. For the given vector y matrix Aτ and its basis skτ ,
call SampleD(Aτ , skτ ) to sample a vector x′, so Ax′ = 0. Find
a special solution x0 for Ax = y and output x ← (x0 + x′).
It is easy to verify that y = Aτ x.
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand130Figure 1: Performance of basis generation
Figure 2: Performance of private key derivation
bi · ˜
b⊤
i ),
= s/∥bi ∥, zi = SampleZ(Z, si , ci), ci−1 = ci − zibi and
= (ci · ˜
i )/( ˜
• SampleD. Let vn = 0, cn = c. Perform c′
b⊤
s′
i
vi1 = vi + zibi while i = 0. Output v0 as the result.
i
8 EXPERIMENT
All the experiments1 for our scheme are conducted on a Windows
10 laptop with Core i5 CPU 2.5 GHz and 8G memory. Considering
that most of the operations here are linear operations of matrices
and sampling operations, we use Matlab to implement our scheme
for proof of concept, because Matlab provides rich APIs for matrix
operations and their underlying implementations are also highly
optimized. To better understand the performance of our proposed