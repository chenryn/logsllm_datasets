从历史列表中向后移动，依次将每行的最后一个参数插入。
.TP
.B shell\-expand\-line (M\-C\-e)
扩展行，像 shell 做的那样。其中包含别名和历史扩展，还有所有的 shell 词的扩展。
参见下面的
.SM
.B HISTORY EXPANSION
中关于历史扩展的描述。
.TP
.B history\-expand\-line (M\-^)
在当前行进行历史扩展。参见下面的
.SM
.B HISTORY EXPANSION
中关于历史扩展的描述。
.TP
.B magic\-space
在当前行进行历史扩展，并插入一个空格。参见下面的
.SM
.B HISTORY EXPANSION
中关于历史扩展的描述。
.TP
.B alias\-expand\-line
在当前行进行别名扩展，参见上面的
.SM
.B ALIASES
中关于别名扩展的描述。
.TP
.B history\-and\-alias\-expand\-line
在当前行进行历史和别名扩展。
.TP
.B insert\-last\-argument (M\-.\^, M\-_\^)
与 \fByank\-last\-arg\fP 同义。
.TP
.B operate\-and\-get\-next (C\-o)
接受当前行，加以执行，从历史中取出相对当前行的下一行进行编辑。
任何参数都被忽略。
.TP
.B edit\-and\-execute\-command (C\-xC\-e)
启动一个编辑器，编辑当前命令行，将结果作为 shell 命令运行。
\fBBash\fP 将依次试着运行
.SM
.BR $FCEDIT ,
.SM
.BR $EDITOR ,
和 \fIemacs\fP 作为编辑器。
.PD
.SS Commands for Changing Text 改变文本
.PP
.PD 0
.TP
.B delete\-char (C\-d)
删除 point 处的字符。如果 point 在行首，行中没有字符，最后一次输入的字符
没有被关联到 \fBdelete\-char\fP，将返回
.SM
.BR EOF .
.TP
.B backward\-delete\-char (Rubout)
删除光标之后的字符。当给出一个数值的参数时，保存删除的文本到 kill ring 中。
.TP
.B forward\-backward\-delete\-char
删除光标下的字符，除非光标在行尾，此时删除光标后的字符。
.TP
.B quoted\-insert (C\-q, C\-v)
将输入的下一字符保持原样添加到行中。例如，可以用它来插入类似 \fBC\-q\fP 的字符。
.TP
.B tab\-insert (C\-v TAB)
插入一个跳格符号。
.TP
.B self\-insert (a,\ b,\ A,\ 1,\ !,\ ...)
插入键入的字符。
.TP
.B transpose\-chars (C\-t)
将 point 之前的字符向前移动，越过 point 处的字符，同时也改变 point 的位置。
如果 point 在行尾，将调换 point 之前的两个字符。负数参数没有作用。
.TP
.B transpose\-words (M\-t)
将 point 之前的词向前移动，越过 point 处的词，同时也改变 point 的位置。
如果 point 在行尾，将调换行中的最后两个词。
.TP
.B upcase\-word (M\-u)
将当前 (或下一个) 词变成全大写。有负值的参数时，将前一个词变为大写，
但是不移动 point。
.TP
.B downcase\-word (M\-l)
将当前 (或下一个) 词变成全小写。有负值的参数时，将前一个词变为小写，
但是不移动 point。
.TP
.B capitalize\-word (M\-c)
将当前 (或下一个) 词变为首字大写。有负值的参数时，将前一个词变为首字大写，
但是不移动 point。
.TP
.B overwrite\-mode
控制插入/改写模式。给出一个正整数参数时，切换为改写模式。给出一个非正数
参数时，切换为插入模式。这个命令只影响 \fBemacs\fP 模式；\fBvi\fP 模式
的改写与此不同。每个对 \fIreadline()\fP 的调用都以插入模式开始。在改写模式下，
关联到 \fBself\-insert\fP 的字符替换 point 处的字符，而不是将它推到右边。
关联到 \fBbackward\-delete\-char\fP 的字符以空格替换 point 前的字符。
默认情况下，这个命令没有关联。
.PD
.SS Killing and Yanking 剪切和粘贴
.PP
.PD 0
.TP
.B kill\-line (C\-k)
剪切从 point 到行尾的文本。
.TP
.B backward\-kill\-line (C\-x Rubout)
反向剪切到行首。
.TP
.B unix\-line\-discard (C\-u)
反向剪切到行首。与 \fIbackward\-kill\-line\fP 没有什么区别。
剪切的文本被保存于 kill\-ring 中。
.\" There is no real difference between this and backward-kill-line
.TP
.B kill\-whole\-line
剪切当前行中所有字符，不管 point 在什么位置。
.TP
.B kill\-word  (M\-d)
剪切从 point 到当前词尾，或者如果 point 在词之间，那么剪切到下一词尾。
.TP
.B backward\-kill\-word (M\-Rubout)
剪切 point 之后的词。词的边界与 \fBbackward\-word\fP 使用的相同。
.TP
.B unix\-word\-rubout (C\-w)
剪切 point 之后的词，使用空白作为词的边界。剪切的文本被保存于 kill\-ring 中。
.TP
.B delete\-horizontal\-space (M\-\e)
删除 point 两边的所有空格和跳格。
.TP
.B kill\-region
剪切当前 region 的文本。
.TP
.B copy\-region\-as\-kill
将 region 的文本复制到剪切缓冲区中。
.TP
.B copy\-backward\-word
将 point 前面的词复制到剪切缓冲区中。
词的边界与 \fBbackward\-word\fP 使用的相同。
.TP
.B copy\-forward\-word
将 point 之后的词复制到剪切缓冲区中。
词的边界与 \fBbackward\-word\fP 使用的相同。
.TP
.B yank (C\-y)
将 kill\-ring 顶部的内容粘贴到 point 处的缓冲区中
.TP
.B yank\-pop (M\-y)
轮转 kill\-ring，粘贴新的顶部内容。只能在
.B yank
或
.BR yank\-pop
之后使用。
.PD
.SS Numeric Arguments 数值参数
.PP
.PD 0
.TP
.B digit\-argument (M\-0, M\-1, ..., M\-\-)
将这个数字加入已有的 (already accumulating) 参数中，或者开始新的参数。
M\-\- 开始一个否定的参数。
.TP
.B universal\-argument
这是指定参数的另一种方法。如果这个命令后面跟着一个或多个数字，
可能还包含前导的负号，这些数字定义了参数。如果命令之后跟随着数字，再次执行
.B universal\-argument
将结束数字参数，但是其他情况下被忽略。有一种特殊情况，如果命令之后紧接着
一个并非数字或负号的字符，下一命令的参数计数将乘以 4。
参数计数初始是 1，因此第一次执行这个函数，使得参数计数为 4，
第二次执行使得参数计数为 16，以此类推。
.PD
.SS Completing 补全
.PP
.PD 0
.TP
.B complete (TAB)
试着对 point 之前的文本进行补全。
.B Bash
依次试着将文本作为一个变量 (如果文本以 \fB$\fP 开始)，一个用户名
(如果文本以 \fB~\fP 开始)，主机名 (如果文本以 \fB@\fP 开始)，或者命令 
(以及别名和函数) 来补全。如果这些都没有匹配，将尝试文件名补全。
.TP
.B possible\-completions (M\-?)
列出 point 之前的文本可能的补全。
.TP
.B insert\-completions (M\-*)
插入 \fBpossible\-completions\fP 已产生的 point 之前的文本所有的补全。
.TP
.B menu\-complete
与 \fBcomplete\fP 相似，但是使用可能的补全列表中的某个匹配替换要补全的词。
重复执行 \fBmenu\-complete\fP 将遍历可能的补全列表，插入每个匹配。
到达补全列表的结尾时，鸣终端响铃 (按照 \fBbell\-style\fP 的设置来做) 并恢复初始的文本。
参数 \fIn\fP 将在匹配列表中向前移动 \fIn\fP 步；负数参数可以用于在列表中向后移动。
这个命令应当与 \fBTAB\fP 键关联，但是默认情况下是没有关联的。
.TP
.B delete\-char\-or\-list
删除光标下的字符，如果不是在行首或行尾 (类似 \fBdelete\-char\fP)。
如果在行尾，行为与 \fBpossible\-completions\fP 一致。
这个命令默认没有关联。
.TP
.B complete\-filename (M\-/)
尝试对 point 之前的文本进行文件名补全。
.TP
.B possible\-filename\-completions (C\-x /)
列出 point 之前的文本可能的补全，将它视为文件名。
.TP
.B complete\-username (M\-~)
尝试对 point 之前的文本进行补全，将它视为用户名。
.TP
.B possible\-username\-completions (C\-x ~)
列出 point 之前的文本可能的补全，将它视为用户名。
.TP
.B complete\-variable (M\-$)
尝试对 point 之前的文本进行补全，将它视为 shell 变量。
.TP
.B possible\-variable\-completions (C\-x $)
列出 point 之前的文本可能的补全，将它视为 shell 变量。
.TP
.B complete\-hostname (M\-@)
尝试对 point 之前的文本进行补全，将它视为主机名。
.TP
.B possible\-hostname\-completions (C\-x @)
列出 point 之前的文本可能的补全，将它视为主机名。
.TP
.B complete\-command (M\-!)
尝试对 point 之前的文本进行补全，将它视为命令名。命令补全尝试着将此文本
依次与别名，保留字，shell 函数，shell 内建命令，最后是可执行文件名进行匹配。
.TP
.B possible\-command\-completions (C\-x !)
列出 point 之前的文本可能的补全，将它视为命令名。
.TP
.B dynamic\-complete\-history (M\-TAB)
尝试对 point 之前的文本进行补全，将此文本与历史列表中的行相比较来查找可能的补全匹配。
.TP
.B complete\-into\-braces (M\-{)
进行文件名补全，将可能的补全列表放在花括号中插入，使得列表可以被 shell 使用 
(参见上面的
.B Brace Expansion
花括号扩展)。
.PD
.SS Keyboard Macros 宏
.PP
.PD 0
.TP
.B start\-kbd\-macro (C\-x (\^)
开始保存输入字符为当前键盘宏。
.TP
.B end\-kbd\-macro (C\-x )\^)
停止保存输入字符为当前键盘宏，保存宏定义。
.TP
.B call\-last\-kbd\-macro (C\-x e)
重新执行上次定义的键盘宏，即显示出宏中的字符，好像它们是从键盘输入的一样。
.PD
.SS Miscellaneous
.PP
.PD 0
.TP
.B re\-read\-init\-file (C\-x C\-r)
读入 \fIinputrc\fP 文件的内容，合并其中的按键关联和变量赋值。
.TP
.B abort (C\-g)
取消当前编辑命令，鸣终端响铃 (按照
.BR bell\-style
的设置来做)。
.TP
.B do\-uppercase\-version (M\-a, M\-b, M\-\fIx\fP, ...)
如果有 Meta 前缀的字符 \fIx\fP 是小写的，那么与命令相关连的是对应的大写字符。
.TP
.B prefix\-meta (ESC)
将输入的下一个字符加上 Meta 前缀。
.SM
.B ESC
.B f
等价于
.BR Meta\-f .
.TP
.B undo (C\-_, C\-x C\-u)
增量的撤销，分别记住每一行。
.TP
.B revert\-line (M\-r)
撤销这一行的所有修改。这与执行命令
.B undo
足够多次的效果相同，将这一行恢复到初始状态。
.TP
.B tilde\-expand (M\-&)
对当前词进行波浪线扩展。
.TP
.B set\-mark (C\-@, M\-)
在 point 处设置 mark。如果给出了数值的参数，标记被设置到那个位置。
.TP
.B exchange\-point\-and\-mark (C\-x C\-x)
交换 point 和 mark。当前光标位置被设置为保存的位置，旧光标位置被保存为 mark。
.TP
.B character\-search (C\-])
读入一个字符，point 移动到这个字符下一次出现的地方。负数将搜索上一个出现。
.TP
.B character\-search\-backward (M\-C\-])
读入一个字符，point 移动到这个字符上一次出现的地方。负数将搜索下面的出现。
.TP
.B insert\-comment (M\-#)
没有数值的参数时，readline 变量
.B comment\-begin
的值将被插入到当前行首。如果给出一个数值的参数，命令的行为类似于一个开关：
如果行首字符不匹配 \fBcomment\-begin\fP 的值，将插入这个值，否则
匹配 \fBcomment\-begin\fP 的字符将被从行首删除。在两种情况下，这一行都被接受，
好像输入了新行符一样。\fBcomment\-begin\fP 的默认值使得这个命令将当前行变成
一条 shell 注释。如果数值参数使得注释字符被删除，这一行将被 shell 执行。
.TP
.B glob\-complete\-word (M\-g)
point 之前的词被当作路径扩展的一个模式，尾部暗含了一个星号。这个模式被用来
为可能的补全产生匹配的文件名列表。
.TP
.B glob\-expand\-word (C\-x *)
point 之前的词被当作路径扩展的一个模式，匹配的文件名的列表被插入，替换这个词。
如果给出一个数值参数，在路径扩展之前将添加一个星号。
.TP
.B glob\-list\-expansions (C\-x g)
显示
.B glob\-expand\-word
可能产生的扩展的列表，重绘当前行。如果给出一个数值参数，在路径扩展之前将添加一个星号。
.TP
.B dump\-functions
向 readline 输出流打印所有的函数和它们的按键关联。如果给出一个数值参数，
输出将被格式化，可以用作 \fIinputrc\fP 文件一部分。
.TP
.B dump\-variables
向 readline 输出流打印所有可设置的 readline 函数。如果给出一个数值参数，
输出将被格式化，可以用作 \fIinputrc\fP 文件一部分。
.TP
.B dump\-macros
向 readline 输出流打印所有关联到宏的 readline 按键序列以及它们输出的字符串。
如果给出一个数值参数，输出将被格式化，可以用作 \fIinputrc\fP 文件一部分。
.TP
.B display\-shell\-version (C\-x C\-v)
显示当前
.BR bash
实例的版本信息。
.PD
.SS Programmable Completion 可编程补全
.PP
当试图对一个命令的参数进行词的补全时，如果已经使用内建命令 \fBcomplete\fP
定义了这个命令的补全规则 ( \fBcompspec\fP)，将启动可编程补全功能 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。
.PP
首先，命令名被确认。如果针对这个命令有补全规则的定义，那么将使用
规则来产生可能的词的补全的列表。如果命令词是一个路径全名，将首先搜索
针对这个路径全名的规则。如果针对这个路径全名没有找到规则，将尝试查找