is used to locate a particular servlet that will handle the
request. We call the set of all such URL paths that lead to
the invocation of a servlet the “application entry points.”
Thus, before a program can be analyzed, we need to
identify all possible application entry points. In the gen-
eral case, there can be an inﬁnite number of URLs that
lead to an invocation of a servlet; however, for each par-
ticular application, there is a ﬁnite and well-deﬁned num-
ber of possible mappings from a request URL pattern to
a servlet. Thus, for the analysis, it is sufﬁcient to ﬁnd all
such mappings. For example, if an application has the
URL /login mapped to the AuthManager servlet and the
URLs /cart and /checkout mapped to the CartManager
servlet, it can be said that the application has three entry
points. In servlet-based applications, it is also possible
to have wildcard mappings, such as account/*, mapped
to a servlet.
In this case, all URL paths starting with
/account/ are mapped to the same servlet. We consider
7
such mappings to represent single entry points and sim-
ply treat the part of the URL that matches the “*” as a
symbolic input. This is consistent with our handling of
other request parameters accessed by servlets, which are
also represented by symbolic values.
To ﬁnd all entry points, our system inspects the ap-
plication deployment descriptor (typically, the web.xml
ﬁle), which deﬁnes how URLs requested by a user are
mapped to servlets. When analyzing the URL-to-servlet
mapping, we take into account that not all servlets are
directly accessible to users (those servlets that are not
directly accessible are typically invoked internally by
other servlets). Following the standard servlet invocation
model, all URLs that point to accessible (public) servlets
are assumed to be possible entry points.
Once the application’s entry points are determined, the
Application Controller systematically explores the state
space of the application. To this end, it initiates execu-
tion of servlets by simulating all possible user choices of
URLs. For example, if the application has three servlets
mapped to the URLs /login, /cart, and /checkout, the ap-
plication controller attempts to execute all possible com-
binations (sequences) of these servlets. The actual or-
der in which servlets are explored depends on the chosen
search strategy. JPF offers a limited depth-ﬁrst search
(DFS) and a heuristics-based breadth-ﬁrst search (BFS)
strategy. We found that DFS works better for our sys-
tem because it requires signiﬁcantly less memory dur-
ing model checking. With DFS, a path is explored until
the system reaches a speciﬁc (conﬁgurable) limit on the
number of entry points that are executed.
4.2.3 State Space Management
Similar to other model checkers, Waler faces the state
explosion problem. Thus, to make Waler scale to real-
world web applications, we had to take a number of steps
to manage (limit) the exponential growth of the appli-
cation’s state space. In particular, after careful analysis
of several servlet-based applications, we found that JPF
often fails to identify equivalent states. The two main
reasons for that are: (1) the constraints added to the sym-
bolic PC are never removed from it due to the design of
JPF-SE1, and (2), without domain-speciﬁc knowledge,
JPF is not able to identify “logically equivalent” states.
Here we present three techniques that we implemented
to overcome these problems.
States in JPF. JPF comes with some mechanisms to
identify equivalent states. A state in JPF is a snapshot
of the current execution status of a thread, and it con-
sists of the content of the stack, heap, and static variables
storage. This snapshot is created when a sequence of ex-
ecuted instructions reaches a choice point, i.e., a point
where there is more than one way to proceed from the
8
current instruction. Choice points are thread-scheduling
instructions, branching instructions that operate on sym-
bolic values, or instructions where a new application en-
try point needs to be chosen. Whenever JPF ﬁnds a
choice point, a snapshot of the current state is created.
Then, the serialized version of the state is compared to
hashes of previously-seen states. The execution path is
terminated when the same state has been seen before.
We found that the basic version of JPF performs
garbage collection and canonicalization of objects on the
heap before hashing a state. However, it does not per-
form any additional analysis of memory content when
comparing states for equality, as JPF has no knowledge
of the domain-speciﬁc semantics of the objects in mem-
ory. As a result, JPF fails to recognize certain states
as logically equivalent. This leads to a large number of
states that are created unnecessarily. We discuss exam-
ples of some cases in which the standard JPF mechanism
fails to identify equivalent states below.
States in Waler.
In Waler, we extend the concept of
JPF state to a “logical state” using the domain-speciﬁc
knowledge that Waler has about web applications.
In
particular, we observe that the only information that is
preserved between two user requests in a servlet-based
application are the content of user sessions, application-
level contexts, the symbolic PC (which stores constraints
on symbolic variables stored in sessions), and data on
persistent storage. Since we do not model persistent stor-
age in Waler and always return a new symbolic value
when it is accessed, we ignore this information in our
analysis. Thus, the logical state of servlet-based applica-
tion is deﬁned as the content of user sessions and appli-
cation contexts, and the PC. This is the only information
that should be considered when comparing states after
execution of a user request is ﬁnished.
State space reduction. Given the design of JPF and us-
ing our concept of logical state, we implemented three
solutions to reduce the state space of a web application.
First of all, we implemented an additional analysis
step to remove a constraint from the PC when it includes
at least one variable that is no longer live2. This is espe-
cially important when the execution of a user request is
ﬁnished, because, in a web application, input received by
one servlet is independent from input received by another
servlet, and, unless parts of it are stored in a persistent
storage, any constraints on previous input are unrelated
to the new one. The implemented solution is safe (it does
not affect the soundness of the analysis) and allows our
system to identify many states that are equivalent.
The second solution to reduce an application state
space is to prune many “irrelevant” paths from state
exploration. Consider, for example, an /error servlet,
which simply displays an error message, or a /products
servlet, which displays a list of available products. Exe-
HttpServletResponse res) {
User.adminLogin(request,response);
return;
User user = (User) session.getAttribute("User");
if(user==null) {
1 public void _jspService(HttpServletRequest req,
2
3
4
5
6
7
8
9
10
11
12
13
14 }
}
...
if(request.getMethod().equalsIgnoreCase("post")) {
1
2
3
4
5
6
7
8
9
10
11
12
public void _jspService(HttpServletRequest req,
HttpServletResponse res) {
User user = (User) session.getAttribute("User");
if(user==null || (!user.isAdmin())) {
User.adminLogin(request,response);
return;
}
...
out.println("Add New");
}
/admin/variables/index.jsp
result = website.variables.
insert(new Variable(req));
}
/admin/variables/Add.jsp
Figure 3: Simpliﬁed version of an unauthorized access vulnerability in the JspCart application.
cuting such servlets often results in changes to the state
of the memory, for example, due to different Java classes
that must be loaded. However, once such a servlet is ex-
ecuted, the application is still in the same logical state.
Also, the state after executing, for example, the servlet
/login will be logically equivalent to the state resulting
from the execution of the sequence of servlets [/error,
/login]. From this observation, it is clear that it would be
beneﬁcial to identify servlets whose executions do not
modify the logical state of the application. The reason
is that there is no need to consider them for vulnerabil-
ity analysis. Therefore, after a servlet is executed, we
analyze the content of the application’s memory to de-
termine whether the application logical state has been
changed (for example, because of changes to the content
of the user session). When no changes are detected, the
exploration of the current execution path is terminated.
This modiﬁcation also does not compromise the sound-
ness of the analysis, assuming that the memory analysis
takes into the account all the component of the applica-
tion logical state.
A third technique to limit the state space explosion
problem is to identify irrelevant entry points, so that the
servlets mapped to these URLs do not need to be ex-
ecuted. More precisely, during model checking, when
our analysis determines that a servlet does neither read
from nor write to the application’s logical state at all, the
execution of this page can be ignored for all other exe-
cution paths. The pruning of irrelevant servlets is espe-
cially helpful in large applications, where the execution
of a servlet over symbolic inputs can take several min-
utes (and thus, can result in days of model checking time
if the servlet is executed on multiple paths).
To summarize, the state explosion problem that can
rise in the model checking of web applications can be
signiﬁcantly improved in many cases. In particular, we
developed the following three techniques to limit the
growth of an application’s state space: we improved the
existing JPF state hashing algorithm to disregard a path
condition when its variables are out of scope, we found
a way to prune the exploration of irrelevant paths, and
we identify irrelevant servlets and discard them from our
vulnerability analysis. We found that these techniques
often allow for a signiﬁcant reduction in the number of
states explored by Waler. For example, running Waler on
the Jebbo-2 application (described in Section 5) without
using any of our state reduction techniques resulted in
the execution of 322,637 states, and it took around 223
minutes to terminate. When the same application was
executed using our three heuristics, Waler terminated in
about a minute and needed to explore only 529 states to
obtain the same result.
4.3 Vulnerability Detection
As described in the previous section, Waler uses model
checking to systematically explore the state space of an
application. During the model checking process, the sys-
tem checks whether the likely invariants generated by
Daikon for a program point hold whenever that point is
reached.
In our current implementation, we only con-
sider likely invariants that are generated for exit points
of methods (note that we differentiate between different
exit points). The reason is that methods often check their
parameters inside the function body (rather than in the
caller). As a result, entry invariants are typically less sig-
niﬁcant.
To see an example of invariants that can be produced
by our system, consider the code in Figure 3, which
shows a vulnerability that Waler found in the JspCart ap-
plications (see Section 5). The left listing shows the code
of the /admin/variables/Add.jsp servlet, which is a privi-
leged servlet that should only be invoked by an adminis-
trator. This is reﬂected by the set of likely invariants that
are generated for the exit point on Line 14 for Add.jsp3:
(1) session.User != null
(2) session.User.isAdmin == true
(3) session.User.txtUsername == "PI:EMAIL"
It can be seen that the ﬁrst two invariants are part of
the “true” program speciﬁcation, while the third invariant
9
is spurious (an artifact of the limited test coverage). As
a side note, the invariant for the exit point at Add.jsp:
Line 7 would be session.User == null.
To help us to determine whether a likely invariant
holds or fails on a path, we implemented the Program
Checks Analyzer module that keeps information about
all the checks performed on an execution path. When
a comparison instruction is executed, the PCA records
the names of the variables involved and the result of the
comparison. Also, the PCA keeps track of all variable
assignments in the program. As a result, whenever the
PCA encounters a check that operates on local variables,
it can determine how this check constrains (affects) non-
local variables. Recall that Daikon does not generate in-
variants for local variables, and, therefore, we are not in-
terested in comparisons over local variables unless they
store session data or method parameters.
Consider now what happens when Waler analyzes the
Add.jsp servlet. After Waler executes the if-statement on
Line 5, information about a new check is added to the
set of current constraints accumulated by the PCA. If the
user is authenticated, the value stored in the session
object under the key User is not null.
In this case,
the PCA adds session.User != null to the set of
checks along the current execution path, and the execu-
tion proceeds at Line 94. Otherwise, the PCA records the
fact session.User == null, and execution proceeds
at Line 6.
Once the Line 14 of Add.jsp is reached, Waler checks
whether all likely invariants generated for this point hold.
A likely invariant holds on the current path if we can
determine that the relationship among the involved vari-
ables is true. An invariant fails otherwise. To determine
whether a likely invariant holds, we check whether the
truth of this invariant can be determined directly given
the current application state (i.e., the invariant involves
concrete values).
If not, we check whether the set of
constraints accumulated on the current path implies the
relationship deﬁned by the invariant using the constraint
solver employed by the JPF-SE.
Following the example, it can be seen that the ﬁrst in-
variant for Line 14 always holds (because of the check on
Line 5), while the other two might fail on some paths. In
principle, we could immediately report the violations of
the last two invariants as a potential program ﬂaw. How-
ever, this would raise too many false positives, due to
spurious invariants. In the following sections, we intro-
duce two techniques to identify those invariants that are
relevant to the detection of web application logic ﬂaws.
4.3.1 Supported Invariants
The ﬁrst technique to identify real invariants is based on
the insight that many vulnerabilities are due to developer
oversights. That is, a developer introduces checks that
enforce the correct behavior on most program paths, but
misses an unexpected case where the correct behavior
can be violated.
To capture this intuition, we deﬁned a technique that
keeps track of which paths contain checks that support an
invariant and which paths are lacking such checks. More
precisely, an execution path on which a likely invariant
holds and it is supported by a set of checks on that path
is added to the set of supporting paths for this invariant.
That is, along a supporting path, the program contains
checks that ensure that an invariant is true. A path on
which a likely invariant can fail is added to the set of
violating paths. When a likely invariant holds on all pro-
gram paths to a given program point, then we know that
it holds for all executions and there is no bug. When all
paths can possibly violate a likely invariant, then we as-
sume that the programmer did not intend this invariant
to be part of the actual program speciﬁcation, and it is
likely an artifact of the limited test coverage. An appli-
cation logic error is only reported by Waler if at least one
supporting path and at least one violating path are found
for an invariant at a program point.
Let us revisit the example of Figure 3. Waler deter-
mines that the ﬁrst invariant on Line 14 of Add.jsp
always holds. The third one is never supported, and,
thus, it is correctly discarded as spurious. Moreover,
Waler ﬁnds a violating path for the second invariant
(session.User.isAdmin == true) by calling the
Add.jsp servlet with a user in non-administrative role.