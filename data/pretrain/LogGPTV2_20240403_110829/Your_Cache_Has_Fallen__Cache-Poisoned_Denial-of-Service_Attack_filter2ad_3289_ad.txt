5.3 Feasibility of HHO attacks
Table 3 depicts the results of our study on request header size limits.
If available, it moreover lists the request header size limit specified
in the documentation of the corresponding HTTP implementation.
Note, that we omit the web frameworks ASP.NET, Django, Flask,
Laravel, Rails, Symfony and Spring Boot in this table, as we found
out that the request header limits depend on the used web server
and deployment environment.
7
Our obtained results reveal many varieties in terms of request
header size limits among the HTTP implementations. The evalu-
ation shows that CloudFront provides a request header size limit,
which is much higher than the one of the many other HTTP im-
plementations we tested. Moreover, Amazon’s CDN also caches
the error code 400 Bad Request by default (see Table 1), which is
triggered by most of the HTTP implementations when the request
header size limit is exceeded. Hence, in our experiments we figured
out that when using CloudFront as CDN any HTTP implementa-
tion that has a request header size limit lower than CloudFront and
returns the status code 400 Bad Request if the limit is exceeded
is vulnerable to HHO CPDoS atacks. For instance, the web caching
systems Apache HTTPD and Nginx, which can also be used as web
server or reverse proxy provide a lower request header size limit
than CloudFront.
Besides the fact that Apache HTTPD and Nginx are amongst
the most used web servers according to a survey of Netcraft [28],
both systems are often deployed with other intermediate systems.
When using one of these HTTP implementations in conjunction
with CloudFront, these systems can be affected by an HHO CPDoS
attack. This also means if Apache HTTPD and Nginx is configured
as intermediate reverse proxy in front of other web applications,
then these systems are vulnerable to HHO CPDoS as well. More-
over, Apache HTTPD and Nginx are often utilized as web server
and deployment environment for web frameworks such as Rails,
Django, Flask, Symfony and Lavarel. All these web frameworks
are vulnerable to HHO CPDoS likewise if they are deployed with
Apache HTTPD or Nginx. Spring Boot and ASP.NET can also be
affected by HHO CPDoS attacks, as both web frameworks require
a web server in production mode. Spring Boot can be deployed
with Tomcat and ASP.NET can use IIS as the underlying deploy-
ment environment. Tomcat and IIS have request header size limits
lower than CloudFront. Both web servers return the error 400 Bad
Request for oversized header likewise. The cloud service Heroku
is another deployment platform for web frameworks. It supports,
e.g., Django, Flask, Laravel, Rails, Laravel and Symfony. As Heroku
provides a request header size limit lower than CloudFront, web
applications using the cloud service in conjunction with the CDN
can be vulnerable as well. Other HTTP implementations which can
be affected by HHO CPDoS attacks when using CloudFront as CDN
are Play 2 as well as the cloud services Amazon S3, Github Pages
and Heroku. Play 1 is also vulnerable to HHO CPDoS attacks, even
though it does not return an error page when the request header
size limit is exceeded. The web framework does not return any
response if it receives an oversized header. Here, the TCP socket
remains open until the web application shuts down. If CloudFront
notices such an idle communication channel, then the CDN returns
the error code 502 Bad Gateway. This error message is stored
and reused for recurring requests likewise. According to our ex-
periments, Google storage in conjunction with CloudFront is not
vulnerable to HHO CPDoS although the cloud service has lower
request header size limit than the CDN. Google storage returns the
error code 413 Payload Too Large for oversized headers and this
error message is not cached by any of the analyzed web caching
systems. Table 3 also contains a result obtained when using Nginx
with the WAF plugin ModSecurity. In such a configuration, con-
ducting a successful HHO CPDoS attack is even easier as without
Web framework
Rails
Django
Flask
Express.js
Meteor.js
BeeGo
Gin
Play 1
Play 2
Spring Boot
Symfony
Lavarel
ASP.NET
Programming lang.
Ruby
Python
Python
JavaScript
JavaScript
Go
Go
Java
Java/Scala
Java
PHP
PHP
C#
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
Error code when method not implemented
undefined
405
405
405
undefined
undefined
undefined
404
undefined
undefined
405
405
undefined
Legend:(cid:35) must be implemented manually,(cid:32) by default,(cid:71)(cid:35) not by default but by extension
Method overriding support
Table 2: HTTP method overriding headers support of tested web frameworks
CDN
HTTP engine
Cloud Service
Web Framework
HTTP implementation
Akamai
Azure
CDN77
CDNSun
Cloudflare
Cloudfront
Fastly
G-Core Labs
KeyCDN
StackPath
Apache HTTPD
Apache HTTPD + ModSecurity
Apache TS
Nginx
Nginx + ModSecurity
IIS
Squid
Tomcat
Varnish
Amazon S3
Github Pages
Gitlab Pages
Google Cloud Storage
Heroku
BeeGo
Express.js
Gin
Meteor.js
Play 1
Play 2
Table 3: Request header size limits of HTTP implementations
Documented limit
undefined
undefined
undefined
undefined
undefined
20,480 bytes
undefined
undefined
undefined
undefined
8,190 bytes
undefined
131,072 bytes
undefined
undefined
undefined
65,536 bytes
undefined
8,192 bytes
undefined
undefined
undefined
undefined
8,192 bytes
undefined
undefined
undefined
undefined
undefined
8,192 bytes
Tested limit
32,760 bytes
24,567 bytes
16,383 bytes
16,516 bytes
≈ 32,395 bytes
≈ 24,713 bytes
69,623 bytes
65,534 bytes
8,190 bytes
≈ 85,200 bytes
8,190 bytes
8,190 bytes
65,661 bytes
20,584 bytes
8,190 bytes
16,375 bytes
65,527 bytes
8,184 bytes
8,299 bytes
≈ 7,948 bytes
8,190 bytes
>500,000 bytes
16,376 bytes
8,154 bytes
>500,000 bytes
81,867 bytes
>500,000 bytes
81,770 bytes
8,188 bytes
8,319 bytes
Limit exceed error code
No Response
400
400
400
400
494
No Response
400
400
400
400
400
400
400
400
400, (404)
400
400
400
400
400
undefined
413
400
undefined
No Response
undefined
400
No Response
400
the security extension. The tested request header limit of Nginx
is around 20,000 bytes but when ModSecurity is added to both
systems, it reduces the restriction to 8,190 bytes. Even though the
usage of ModSecurity should actually avoid web application attacks
such as DoS, it eases to conduct an HHO CPDoS attack in this case.
As mentioned before, IIS and web frameworks such as APS.NET
running on this web server are vulnerable to HHO CPDoS attacks
when using CloudFront as CDN. However, in certain circumstances,
they might also be vulnerable when Akamai, Fastly, CDN77, Cloud-
flare and Varnish are utilized. The IIS web server provides an option
to set a size limit for a distinct request header. Some web applica-
tions require such a configuration option to block, e.g., an oversized
Cookie header. If this restriction is defined for a request header and
this limit is exceeded, then the web server return the error code
404 Not Found. This error message is cached by Akamai, Fastly,
CDN77, CloudFront, Cloudflare and Varnish.
5.4 Feasibility of HMC attacks
Table 4 shows the results of our third experiments where we ana-
lyzed the handling of strings containing meta characters. For the
sake of readability, we only list the characters and strings that are
8
blocked or sanitized by at least one of the tested HTTP implemen-
tations. Moreover, we omit the web frameworks ASP.NET, Django,
Flask, Laravel, Spring Boot and Symfony in this table, since the
handling of meta characters depends on the used web server and
deployment environment.
The evaluation highlights that the many analyzed systems con-
sider control characters as a threat. Suspicious characters or strings
are either blocked by the denoted error code or are sanitized from
the request header. However, the handling of meta strings and
characters are very diverse. For instance, CloudFront blocks the
character \u0000 and sanitizes \n, \v, \f, \r, but forwards other
control characters such as \a, \b and \e without modifying them.
If Apache HTTPD, IIS or Varnish is used with CloudFront, then
the corresponding systems block the forwarded header contain-
ing forbidden characters with the status code 400 Bad Request.
CloudFront stores such an error message. This means when us-
ing CloudFront as CDN, all tested HTTP implementations, which
blocked harmful strings and characters that are not rejected or
sanitize by CloudFront, are vulnerable to HMC CPDoS attacks. Be-
sides Apache HTTPD, IIS and Varnish, this includes Github Pages,
Gitlab Pages, BeeGo, Gin, Meteor.js and Play 2. Express.js is vul-
nerable to HMC CPDoS attacks as well, even though it does not
block any tested string by an error code. The issue here is similar to
Apache HTTPD +
(ModSecurity)
400
400
400
400
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
400
400
400
400
400
400
Meta character in request header
\u0000
\u0001 ... \u0006
\a
\b
\t
\n
\v
\f
\r
\u000e ... \001f, \u007f
Multiple Unicode control character
(e.g.\u0001\u0002)
(){0;}; touch /tmp/blns.shellshock1.fail;
()
/tmp/blns.shellshock2.fail; }
Meta character in request header
>_[$($())]
_;
{
}
{
touch
touch
{
}
{
_;
>_[$($())]
\u0000
\u0001 ... \u0006
\a
\b
\t
\n
\v
\f
\r
\u000e ... \001f, \u007f
Multiple Unicode control character
(e.g.\u0001\u0002)
(){0;}; touch /tmp/blns.shellshock1.fail;
()
/tmp/blns.shellshock2.fail; }
Meta character in request header
\u0000
\u0001 ... \u0006
\a
\b
\t
\n
\v
\f
\r
\u000e ... \001f
\u0007f
Multiple Unicode control character
(e.g.\u0001\u0002)
(){0;}; touch /tmp/blns.shellshock1.fail;
()
/tmp/blns.shellshock2.fail; }
>_[$($())]
_;
{
}
{
(cid:35)
(cid:35)
Github Pages
No Response
400
400
400
400
400
400
400
400
400
400
400
touch
(cid:35)
(cid:35)
Azure
400
400
400
400
(cid:35)
400
400
400
400
400
400
(cid:35)
(cid:35)
CDN77
400
Sanitized
Sanitized
Sanitized
(cid:35)
Sanitized
Sanitized
Sanitized
Sanitized
Sanitized
Sanitized
(cid:35)
(cid:35)
Apache TS
Sanitized
Sanitized
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
403
403
Sanitized
Sanitized
Sanitized
Sanitized
Sanitized
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
Tomcat
(cid:35)
(cid:35)