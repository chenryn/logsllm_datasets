pocassist浅析
author: https://github.com/Ciyfly
pocassist浅析
项目代码目录
流程图
cmd/pocassist.go 整个程序启动入口
init
RunApp
RunServer
InitAll 加载配置文件
下面是所有的配置展开
conf.Setup() 加载全局配置文件
logging.Setup() 加载日志配置文件
db.Setup() 加载db配置文件
routers.Setup() 配置web
util.Setup() 限流初始化 fasthttpclient jwt secret 初始化
rule.Setup() 规则配置相关初始化
ExecScriptHandle 是poc/script下的poc Handler函数
ExecExpressionHandle 是db中的yaml的类似xray格式的poc Handler函数
InitTaskChannel 任务管道
HotConf 配置热加载
routers.InitRouter 初始化web的路由并启动
db文件
创建一个扫描任务
GenOriginalReq 生成一个原始请求
rule.TaskProducer 将taskitem写到TaskChannel管道里
rule.TaskConsumer() 消费TaskChannel管道里的数据调用poc测试
RunPlugins 协程限制并发运行插件
rule.RunPoc 运行poc
celController.Init cel控制器初始化
celController.InitSet cel控制器初始化
controller.Next()
ExecExpressionHandle
controller.Groups 含有 Groups的poc执行
controller.Rules 含有 Rules的poc执行
controller.SingleRule 单条rule怎么执行
controller.DoSingleRuleRequest fasthttp发请求
raw接口
List
对于cel-go的使用理解
参考
项目代码目录
. 
├── api # web api的接口路由 
│   ├── middleware 
│   │   └── jwt 
│   │       └── jwt.go 
│   ├── msg 
│   │   └── msg.go 
│   └── routers 
│       ├── route.go 
│       ├── ui.go 
│       └── v1 
│           ├── auth 
│           │   └── auth.go 
│           ├── plugin 
│           │   └── plugin.go 
│           ├── scan 
│           │   ├── result 
│           │   │   └── result.go 
│           │   ├── scan 
│           │   │   └── scan.go 
│           │   └── task 
│           │       └── task.go 
│           ├── vulnerability 
│           │   └── vulnerability.go 
│           └── webapp 
│               └── webapp.go 
├── cmd # 入口程序 
│   └── pocassist.go 
├── config.yaml # 全局配置 
├── go.mod 
├── go.sum 
├── LICENSE 
├── logs 
│   └── pocassist.log 
├── main.go 
├── pkg # 核心代码 cel 解析 反连 
│   ├── cel 
│   │   ├── cel.go 
│   │   ├── proto 
│   │   │   ├── http.pb.go 
│   │   │   └── http.proto 
│   │   └── reverse 
│   │       └── reverse.go 
│   ├── conf 
│   │   ├── config.go 
│   │   └── default.go 
│   ├── db 
│   │   ├── auth.go 
│   │   ├── conn.go 
│   │   ├── plugin.go 
│   │   ├── scanResult.go 
│   │   ├── scanTask.go 
│   │   ├── vulnerability.go 
│   │   └── webapp.go 
│   ├── file 
│   │   └── file.go 
│   ├── logging 
│   │   └── log.go 
│   └── util 
│       ├── jwt.go 
│       ├── rand.go 
│       ├── request.go 
│       ├── request_test.go 
│       ├── result.go 
│       ├── tcp.go 
│       ├── util.go 
│       └── version.go 
├── poc 
│   ├── rule # 处理poc的等  
│   │   ├── cel.go 
│   │   ├── content.go 
│   │   ├── controller.go # 核心控制 
│   │   ├── handle.go 
│   │   ├── parallel.go 
│   │   ├── request.go 
│   │   ├── rule.go 
│   │   └── run.go 
│   └── scripts 
│       ├── poc-go-dedecms-bakfile-disclosure.go 
│       ├── poc-go-ecshop-anyone-login.go 
│       ├── poc-go-elasticsearch-path-traversal.go 
│       ├── poc-go-exim-cve-2017-16943-uaf.go 
│       ├── poc-go-exim-cve-2019-15846-rce.go 
│       ├── poc-go-fastcgi-file-read.go 
│       ├── poc-go-ftp-unauth.go 
│       ├── poc-go-iis-ms15034.go 
│       ├── poc-go-jboss-console-weakpwd.go 
│       ├── poc-go-jboss-invoker-servlet-rce.go 
│       ├── poc-go-jboss-serialization.go 
│       ├── poc-go-joomla-serialization.go 
│       ├── poc-go-memcached-unauth.go
│       ├── poc-go-mongo-unauth.go 
│       ├── poc-go-openssl-heartbleed.go 
│       ├── poc-go-redis-unauth.go 
│       ├── poc-go-rsync-anonymous.go 
│       ├── poc-go-shiro-unserialize-550.go 
│       ├── poc-go-smb-cve-2020-0796.go 
│       ├── poc-go-tomcat-weak-pass.go
│       ├── poc-go-zookeeper-unauth.go
│       └── scripts.go 
├── pocassist.db # poc db库 
├── README.md 
└── web # 前端资源 
    ├── bindata.go 
    └── build 
        ├── asset-manifest.json 
        ├── favicon.ico 
        ├── index.html 
        ├── manifest.json 
        ├── precache-manifest.883d9a3cd99a61f6112882ff7a343fde.js 
        ├── robots.txt 
        ├── service-worker.js 
        └── static 
            ├── css 
            │   ├── 2.b2faedfb.chunk.css 
            │   └── main.35003770.chunk.css 
            ├── js 
            │   ├── 2.b26af43a.chunk.js 
            │   ├── 2.b26af43a.chunk.js.LICENSE.txt 
            │   ├── main.c58b4be8.chunk.js 
            │   └── runtime-main.89859971.js 
            └── media 
                └── bg.4bb50474.png 
流程图
cmd/pocassist.go 整个程序启动入口
1.  init 输出 banner等程序信息
2.  RunApp  解析命令行指定的端口启动web程序
func init() { 
fmt.Printf("%s\n", conf.Banner) 
fmt.Printf("\t\tv" + conf.Version + "\n\n") 
fmt.Printf("\t\t" + conf.Website + "\n\n") 
} 
func InitAll() { 
// config 必须最先加载 
conf.Setup() 
logging.Setup() 
db.Setup() 
routers.Setup() 
util.Setup() 
rule.Setup() 
} 
// 使用viper 对配置热加载 
func HotConf() { 
dir, err := filepath.Abs(filepath.Dir(os.Args[0])) 
if err != nil { 
log.Fatalf("cmd.HotConf, fail to get current path: %v", err) 
} 
// 配置文件路径 当前文件夹 + config.yaml 
configFile := path.Join(dir, conf.ConfigFileName) 
viper.SetConfigType("yaml") 
viper.SetConfigFile(configFile) 
// watch 监控配置文件变化 
viper.WatchConfig() 
viper.OnConfigChange(func(e fsnotify.Event) { 
// 配置文件发生变更之后会调用的回调函数 
log.Println("config file changed:", e.Name) 
InitAll() 
}) 
} 
func RunApp() { 
app := cli.NewApp() 
app.Name = conf.ServiceName 
app.Usage = conf.Website 
app.Version = conf.Version 
app.Flags = []cli.Flag{ 
&cli.StringFlag{ 
// 后端端口 
Name:    "port", 
Aliases: []string{"p"}, 
Value:   conf.DefaultPort, 
Usage:   "web server `PORT`", 
}, 
} 
app.Action = RunServer 
err := app.Run(os.Args) 
if err != nil { 
log.Fatalf("cli.RunApp err: %v", err) 
return 
} 
} 
func RunServer(c *cli.Context) error { 
InitAll() 
HotConf() 
port := c.String("port") 
routers.InitRouter(port) 
return nil 
} 
init
go默认的 init 导入的是 conf  的一些值 
conf  "github.com/jweny/pocassist/pkg/conf"  
一些banner version的信息 在  pkg\conf\default.go 
func init() { 
fmt.Printf("%s\n", conf.Banner) 
fmt.Printf("\t\tv" + conf.Version + "\n\n") 
fmt.Printf("\t\t" + conf.Website + "\n\n") 
} 
RunApp
使用cli 解析命令行参数获取端口参数 调用  RunServer  启动web服务器
func RunApp() { 
app := cli.NewApp() 
app.Name = conf.ServiceName 
app.Usage = conf.Website 
app.Version = conf.Version 
app.Flags = []cli.Flag{ 
&cli.StringFlag{ 
// 后端端口 
Name:    "port", 
Aliases: []string{"p"}, 
Value:   conf.DefaultPort, 
Usage:   "web server `PORT`", 
}, 
} 
app.Action = RunServer 
err := app.Run(os.Args) 
if err != nil { 
log.Fatalf("cli.RunApp err: %v", err) 
return 
} 
} 
RunServer
1. 初始化所有相关配置  InitAll 
2. 对配置文件进行监听实现热加载  HotConf 
3. 传递端口启动web服务  routers.InitRouter(port) 
func RunServer(c *cli.Context) error { 
InitAll() 
HotConf() 
port := c.String("port") 
routers.InitRouter(port) 
return nil 
} 
InitAll 加载配置文件
func InitAll() { 
// config 必须最先加载 
conf.Setup() 
logging.Setup() 
db.Setup() 
routers.Setup() 
util.Setup() 
rule.Setup() 
} 
下面是所有的配置展开
conf.Setup() 加载全局配置文件
加载  config.yaml  配置文件
1. 拼接配置文件路径 不存在则初始化配置文件  viper.ReadConfig(bytes.NewBuffer(defaultYamlByte)) 
2. 读取配置文件  viper.ReadInConfig() 
全局配置文件的结构体
type Config struct { 
HttpConfig    HttpConfig    `mapstructure:"httpConfig"` 
DbConfig      DbConfig      `mapstructure:"dbConfig"` 
PluginsConfig PluginsConfig `mapstructure:"pluginsConfig"` 
Reverse       Reverse       `mapstructure:"reverse"` 
ServerConfig  ServerConfig 
`mapstructure:"serverConfig"` 
LogConfig   
  LogConfig 
`mapstructure:"logConfig"` 
} 
func Setup() { 
dir, err := filepath.Abs(filepath.Dir(os.Args[0])) 
if err != nil { 
log.Fatalf("conf.Setup, fail to get current path: %v", err) 
} 
//配置文件路径 当前文件夹 + config.yaml 
configFile := path.Join(dir, "config.yaml") 
// 检测配置文件是否存在 
if !file.Exists(configFile) { 
WriteYamlConfig(configFile) 
} 
ReadYamlConfig(configFile) 
} 
logging.Setup() 加载日志配置文件
通过上面加载的全局配置文件
获取全局配置的日志级别 日志文件最大多少 备份多少 存多久等 使用的是  go.uber.org/zap 
func Setup(){ 
loggerCfg := conf.GlobalConfig.LogConfig 
NewLogger(conf.GlobalConfig.Level(), loggerCfg.MaxSize, loggerCfg.MaxBackups, loggerCfg.MaxAge, 
loggerCfg.Compress, conf.GlobalConfig) 
} 
db.Setup() 加载db配置文件
支持mysql和sqlite 赋值到 dbConfig里 
并 通过 orm框架  gorm  创建  GlobalDB  并同步设置logger
func Setup() { 
var err error 
dbConfig := conf.GlobalConfig.DbConfig 
if conf.GlobalConfig.DbConfig.Sqlite == "" { 
// 配置mysql数据源 
if dbConfig.Mysql.User == "" || 
dbConfig.Mysql.Password == "" || 
dbConfig.Mysql.Host == "" || 
dbConfig.Mysql.Port == "" || 
dbConfig.Mysql.Database == "" { 
log.Fatalf("db.Setup err: config.yaml mysql config not set") 
} 
dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local&timeout=%s", 
dbConfig.Mysql.User, 
dbConfig.Mysql.Password, 
dbConfig.Mysql.Host, 
dbConfig.Mysql.Port, 
dbConfig.Mysql.Database, 
dbConfig.Mysql.Timeout) 
GlobalDB, err = gorm.Open(mysql.Open(dsn), &gorm.Config{}) 
if err != nil { 
log.Fatalf("db.Setup err: %v", err) 
} 
} else { 
// 配置sqlite数据源 
if dbConfig.Sqlite == "" { 
log.Fatalf("db.Setup err: config.yaml sqlite config not set") 
} 
if dbConfig.EnableDefault { 
dir, err := filepath.Abs(filepath.Dir(os.Args[0])) 
if err != nil { 
log.Fatalf("db.Setup, fail to get current path: %v", err) 
} 
//配置文件路径 当前文件夹 + config.yaml 
defaultSqliteFile := path.Join(dir, "pocassist.db") 
// 检测 sqlite 文件是否存在 
if !file.Exists(defaultSqliteFile) { 
log.Fatalf("db.Setup err: pocassist.db not exist, download at https://github.com/jweny/poc
} 
} 
GlobalDB, err = gorm.Open(sqlite.Open(dbConfig.Sqlite), &gorm.Config{ 
DisableForeignKeyConstraintWhenMigrating: true, 
}) 
if err != nil { 
log.Fatalf("db.Setup err: %v", err) 
} 
} 
if GlobalDB == nil { 
log.Fatalf("db.Setup err: db connect failed") 
} 
err = GlobalDB.AutoMigrate(&Auth{}, &Vulnerability{}, &Webapp{}, &Plugin{}, &Task{}, &Result{}) 
if err != nil { 
log.Fatalf("db.Setup err: %v", err) 
} 
if conf.GlobalConfig.ServerConfig.RunMode == "release" { 
// release下 
GlobalDB.Logger = logger.Default.LogMode(logger.Silent) 
} 
} 
routers.Setup() 配置web
设置 gin的 mode级别 为  release 
func Setup() { 
// gin 的【运行模式】运行时就已经确定 无法做到热加载 
gin.SetMode(conf.GlobalConfig.ServerConfig.RunMode) 
} 
gin 可设置的mode
const ( 
// DebugMode indicates gin mode is debug. 
DebugMode = "debug" 
// ReleaseMode indicates gin mode is release. 
ReleaseMode = "release" 
// TestMode indicates gin mode is test. 
TestMode = "test" 
) 
util.Setup() 限流初始化 fasthttpclient jwt secret 初始化
func InitRate() { 
msQps := conf.GlobalConfig.HttpConfig.MaxQps  / 10 
limit := rate.Every(100 * time.Millisecond) 
limiter = rate.NewLimiter(limit, msQps) 
} 
使用的是  golang.org/x/time/rate  基于令牌桶算法 
随着时间以  1/r 个令牌的速度向容积为b个令牌的桶中添加令牌 有请求就取走令牌 若令牌不足则不执行请求或
者等待
通过该fasthttp创建client 是一个比  net/http  快10倍的 客户端请求库 
去掉ua头 
 DisablePathNormalizing  是删除额外的斜杠，对特殊字符进行编码 
并且配置代理
client := &fasthttp.Client{ 
    // If InsecureSkipVerify is true, TLS accepts any certificate 
    TLSConfig: &tls.Config{InsecureSkipVerify: true}, 
    NoDefaultUserAgentHeader: true, 
    DisablePathNormalizing:   true, 
} 
jwt secret
jwtSecret = []byte(conf2.GlobalConfig.ServerConfig.JwtSecret) 
配置在  config.yaml 
serverconfig: 
  jwt_secret: pocassist 