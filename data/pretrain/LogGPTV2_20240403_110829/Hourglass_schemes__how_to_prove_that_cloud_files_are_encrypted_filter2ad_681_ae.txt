12.73
Butterﬂy
0.96
1.96
4.02
8.17
terms of the cost of the hourglass transformation and its
inverse), and it’s mainly of theoretical interest.
We consider a scenario in which the cloud provider (server)
runs on Amazon, but isn’t Amazon itself. Thus it’s subject
to Amazon pricing—a fact useful for economic analysis. The
tenant acting as a client in our experiments also runs within
Amazon EC2.
We implement the butterﬂy construction using AES en-
cryption with 128-bit ﬁle blocks. We parallelize the imple-
mentation once the ﬁle size exceeds 8MB. For the permu-
tation construction, we consider 4KB ﬁle block sizes, and
64-bit symbol sizes as discussed in Section 4.2; as the ma-
chine word size, it’s a good choice for eﬃciency. The number
of symbols in a block is m = 512. We permute the ﬁle using
the simple construction in Section 4.2. The hourglass ﬁle H
consists of 512 segments; we include in segment i symbol i
of every ﬁle block. (Again, this scheme disperses ﬁle symbols
widely across H.)
We run experiments on Amazon EC2 using a quadruple-
extra-large high-memory instance and EBS storage. We also
run them on a local machine (i7 980X processor with 6 cores
running at 4 GHz). For all our experiments, we show aver-
ages over 5 runs.
Hourglass function performance. We ﬁrst measure the
in-memory hourglass function computation time for both
the butterﬂy and permutation constructions for diﬀerent ﬁle
sizes. We report computation times in the local machine’s
memory and in memory for our Amazon EC2 instance in
Figure 3.
The butterﬂy function is at least a factor of 4 faster on
our local machine due to hardware support for AES. The
butterﬂy construction also beneﬁts from multiple cores: For
large ﬁle sizes the multi-threaded implementation is faster
by a factor of 5 (on both local and Amazon machines). The
permutation scheme permutes machine-size words in main
memory, and its cost is determined by cache misses and main
memory latency. The implementation on the local machine
is about twice as fast as that on Amazon.
Compared to the multi-threaded butterﬂy implementa-
tion, the permutation hourglass function is about 8 times
faster on Amazon and 4 times faster locally (since it does
not use cryptographic operations). More importantly, this
permutation-based hourglass function can be computed in a
streaming fashion: After a ﬁle block is read from EBS (and
before the next block is received), its symbols can be ar-
ranged in the corresponding positions in the hourglass out-
put. We performed a preliminary experiment to determine
the overhead of such a streamed implementation, in the sense
of marginal time above that of simply uploading the ﬁle from
EBS into main memory. We ﬁnd that this overhead is negli-
gible. The only extra time the permutation scheme imposes
is that of decryption/encryption once the ﬁle is uploaded.
275Figure 3: In-memory hourglass function performance for the butterﬂy and permutation schemes; local machine (left) vs.
Amazon EC2 (right).
Table 2: Challenge-response performance
File size No challenges Honest Adversarial
2 GB
4 GB
2
4
6
8
2
4
6
8
0.047
0.062
0.093
0.109
0.0468
0.062
0.078
0.094
8.403
9.65
27.40
26.807
30.321
101.015
114.579
121.431
Economic analysis. We present in Table 1 the total time
and cost for computing the transformation from ﬁle F to
format H for a ﬁle-encryption application. (For the permu-
tation scheme, we used the streamed implementation.) We
use a cost basis of 68 cents per hour (as charged by EC2 for
our instance type).
An honest cloud provider stores transformed ﬁle H and
computes plaintext F when needed. We described in Sec-
tion 1 the double-storage problem: A cloud provider might
store data in format H to respond correctly in the challenge-
response protocol, but also store the plaintext for conve-
nience. Using the Amazon EBS pricing scheme for storage
(10 cents per GB per month) and the results in Table 1, we
argue that this scenario is not economically well motivated.
For the butterﬂy transformation, the cost of computing the
plaintext is about 10 times lower than the cost of storing
the plaintext (per month). For the permutation scheme, this
cost is about 270 times lower than monthly storage. This
demonstrates that the butterﬂy scheme might be used in
archival settings (where plaintext data is rarely accessed).
On the other hand, the permutation scheme provides eco-
nomical motivation for the provider to comply and store H
even when plaintext accesses are frequent (several hundred
times a month).
Challenge-response protocol. We also present in Table 2
the challenge-response protocol times for both honest and
adversarial servers (storing plaintext F , but not H). For 2
random challenges, an adversarial server needs to retrieve
1024 symbols distributed across the input ﬁle. We observe
that the response of an honest server is at least 150 times
lower for 2GB ﬁles, and at least 650 times lower for 4GB ﬁles
than that of an adversarial server. We measure the sequential
throughput of EBS volumes at around 95MB per second
(resulting in 10.77s to read a 1GB ﬁle). Based on results
in Table 2, once we exceed 6 challenges for 2GB ﬁles, (and,
respectively 4 challenges for 4GB ﬁles), it’s faster for an
adversarial server to read the full ﬁle sequentially rather
than access blocks at random. Finally, to demonstrate how
the response timing scales, we also plot in Figure 4 the time
to read up to 1000 randomly selected blocks from ﬁles of
diﬀerent sizes.
The impact of parallelism. An adversary could try to
reduce its response time to challenges by spreading ﬁle F
across multiple EBS volumes in Amazon. Such ﬁle distri-
bution improves I/O performance, seek-time latencies, and
throughput. In principle, striping a ﬁle across v volumes can
yield a v-fold performance improvement. Bandwidth con-
straints suggest that such a strategy would be of limited
utility against the butterﬂy hourglass function, which re-
quires adversarial access to all (or at least a large portion)
of F to compute responses. Preliminary experiments suggest
that the network interface for a compute instance supports a
maximum bandwidth of about 1Gbit/s ≈ 125 MB/s. Thus,
retrieving a 1GB ﬁle, for instance, would require about 8s.7
By contrast, for an honest service that stores H to respond
to a very large challenge, e.g., of 100 blocks, requires less
than 1s. (See Figure 4.) Distribution across EBS volumes
would be more eﬀective against our permutation hourglass
function, where an adversary is constrained by seek-time
latency, rather than bandwidth. Still, to achieve response
times comparable to those of an honest service, an adver-
sary must distribute F across roughly v = m independent
storage systems, i.e., achieve an m-fold seek-time speedup,
where m is the number of symbols per challenge block. Our
experiments run with m = 512 (64-bit symbols and 4096-
byte blocks). Experiments suggest, however, that Amazon
supports a mere 8-fold speedup in seek times through dis-
tribution across EBS volumes [11].
6. RELATED WORK
Hourglass schemes—particularly our proposals based on
storage-access speed—intersect technically and conceptually
with a few diﬀerent lines of research.
Economic incentives. Several works have studied the prob-
7An adversary would also incur substantial overhead in
terms of time and compute-instance cost.
276devoted a certain, minimum amount of storage to a com-
mitted ﬁle F . Their protocols, however, don’t provide direct
assurance that the server has actually stored F itself. Later
schemes, including [6, 19, 27] and [5], a variant of [4], enable
a server to prove that it has stored some representation of
a ﬁle F such that F itself can be extracted from the server.
But these techniques don’t prove anything about the actual
representation of F at rest, e.g., that it’s encrypted.
Remote posture veriﬁcation. The Pioneer system [26],
and a later variant for mobile handsets [16], remotely times
the execution of a software module to measure its trustwor-
thiness. Misconﬁguration or the presence of malware slows
this execution, creating a measurable delay. Our storage-
based hourglass schemes may be viewed as a time-based
measurement of a server’s posture—not its software posture,
but its ﬁle-system posture.
Figure 4: Time to read random blocks from EBS.
7. CONCLUSION
lem of creating economic incentives for coordinated protocol
participation in various scenarios [22], including peer-to-peer
systems, communication networks and information security,
examined primarily in the context of algorithmic game the-
ory. Additionally, a growing body of work studies economic
incentives and security analysis against a rational adversary
in the context of rational cryptography (e.g., [15, 22]) and
network security (e.g., [12, 21]).
Puzzles. A moderately hard computational problem is often
called a puzzle or “proof of work” [17]. Dwork and Naor [8]
introduced the idea in a seminal work proposing puzzles as
a form of postage to combat spam. Puzzles have also found
application in the construction of digital time capsules [25]
and denial-of-service resistance [18].
Our storage-bounded hourglass schemes are loosely like
puzzles, but rely on storage access as the bounding resource,
rather than computation. (Our RSA-based hourglass scheme
isn’t really puzzle-like.) Additionally, unlike puzzles, hour-
glass schemes only impose high resource requirements on a
cheating server when it attempts to respond to a challenge,
as in, e.g., [28].
Memory-bound functions. Abadi et al. [3] and Dwork,
Naor, and Wee [9] explore puzzle variants that depend not on
a computational bound, but a bound s on available memory.
In a similar vein, Dziembowski, Kazana, and Wichs [10]
introduce the notion of one-time computable pseudorandom
functions (PRF). They consider a model in which compu-
tation of a PRF FK (·) requires so much memory that it
forces overwriting of the key K itself. Gratzer and Nac-
cache [14] and subsequently Perito and Tsudik [23] similarly
propose the idea of “squeezing out” data, namely purging
the entire memory of a target device by writing in a long
(pseudo)random string and reading it out again.
An hourglass scheme adopts the conceptually related ap-
proach of having a server prove correct behavior to a client
by showing that it ﬁlls its storage with a (nearly) valid en-
coded version H(cid:48) (e.g., ciphertext) of the raw ﬁle F (e.g.,
plaintext). The presence of this validly encoded H(cid:48) in stor-
age “squeezes out” invalidly encoded data (e.g., plaintext)
when the associated storage s is bounded.
Storage-enforcing schemes. Building on the notion of
“incompressible functions” [7], Golle et al. [13] have pro-
posed schemes in which a server demonstrates that it has
We have introduced hourglass schemes, a new crypto-
graphic construct that enables clients to verify remotely that
a server stores ﬁles in a particular target format. The for-
mats we have considered here are encryption, encoding with
“provenance tags” to enable tracing of leaked ﬁles, and the
binding together of two (or more) ﬁles. Hourglass schemes
leverage server resource bounds to achieve their security as-
surances. We have proposed three main hourglass construc-
tions here. Two draw on storage-access times as a resource
bound, another on hardness assumptions on the RSA cryp-
tosystem.
Hourglass schemes hold particular promise as means of
monitoring the ﬁle-handling practices of cloud services. With
this in mind, we have presented a series of experiments
demonstrating the feasibility of our proposals in Amazon’s
cloud service. More generally, as cloud computing prolifer-
ates, we believe that hourglass schemes and related tech-
niques will prove a valuable way of penetrating the cloud’s
abstraction layers and restoring security assurances sacri-
ﬁced to cloud-based outsourcing.
Acknowledgements
We thank all anonymous reviewers for providing detailed
comments and suggestions. Emil Stefanov was supported by
a National Science Foundation Graduate Research Fellow-
ship under Grant No. DGE-0946797, a DoD National De-
fense Science and Engineering Graduate Fellowship and a
grant from the Amazon Web Services in Education program.
8. REFERENCES
[1] American Express may have failed to encrypt data.
Available at http://www.scmagazine.com/
american-express-may-have-failed-to-encrypt-data/
article/170997/.
[2] Sony playstation data breach, 2011. Available at http:
//en.wikipedia.org/wiki/PlayStation_Network_outage.
[3] M. Abadi, M. Burrows, M. Manasse, and T. Wobber.
Moderately hard, memory-bound functions. ACM Trans.
Internet Technol., 5:299–327, May 2005.
[4] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner,
Z. Peterson, and D. Song. Provable data possession at
untrusted stores. In ACM CCS, pages 598–609, 2007.
[5] G. Ateniese, S. Kamara, and J. Katz. Proofs of storage
from homomorphic identiﬁcation protocols. In
ASIACRYPT ’09, pages 319–333, Berlin, Heidelberg, 2009.
277[6] Y. Dodis, S. Vadhan, and D. Wichs. Proofs of retrievability
via hardness ampliﬁcation. In TCC, pages 109–127, 2009.
[7] C. Dwork, J. Lotspiech, and M.Naor. Digital signets:
self-enforcing protection of digital information. In STOC,
pages 489–498. ACM, 1996.
[8] C. Dwork and M. Naor. Pricing via processing or
combatting junk mail. In CRYPTO, pages 139–147, 1993.
[9] C. Dwork, M. Naor, and H. Wee. Pebbling and proofs of
work. In CRYPTO, pages 37–54, 2005.
[10] S. Dziembowski, T. Kazana, and D. Wichs. One-time
computable self-erasing functions. In TCC, pages 125–143,
2011.
[11] E. Giberti. Honesty box: EBS performance revisited. Blog
posting, available at http://tinyurl.com/3nqxngv, 2010.
[12] S. Goldberg, S. Halevi, A. D. Jaggard, V. Ramachandran,
and R. N. Wright. Rationality and traﬃc attraction:
incentives for honest path announcements in BGP. In
SIGCOMM, pages 267–278, 2008.
[13] P. Golle, S. Jarecki, and I. Mironov. Cryptographic
primitives enforcing communication and storage
complexity. In FC ’02, pages 120–135, 2003.
[14] V. Gratzer and D. Naccache. Alien vs. quine. IEEE
Security and Privacy, 5(2):26–31, 2007.
[15] J. Halpern and V. Teague. Rational secret sharing and
multiparty computation: extended abstract. In STOC,
pages 623–632, 2004.
[16] M. Jakobsson and K. Johansson. Retroactive detection of
malware with applications to mobile platforms. In HotSec,
pages 1–13, 2010.
[17] M. Jakobsson and A. Juels. Proofs of work and bread
pudding protocols. In Communications and Multimedia
Security, pages 258–272, 1999.
[18] A. Juels and J. Brainard. Client puzzles: A cryptographic
countermeasure against connection depletion attacks. In
NDSS, pages 151–165, 1999.
[19] A. Juels and B. S. K. Jr. PORs: proofs of retrievability for
large ﬁles. In ACM CCS, pages 584–597, 2007.
[20] M. Labs and M. F. P. Services. Protecting your critical
assets: Lessons learned from “Operation Aurora”, 2010.
Whitepaper available at
http://www.mcafee.com/us/resources/white-papers/
wp-protecting-critical-assets.pdf.
[21] M. H. Manshaei, Q. Zhu, T. Alpcan, and J.-p. Hubaux.
Game theory meets network security and privacy. Main,
V(April):1–44, 2010.
[22] N. Nisan, T. Roughgarden, E. Tardos, and V. V. Vazirani.
Algorithmic Game Theory. Cambridge University Press,
New York, NY, USA, 2007.