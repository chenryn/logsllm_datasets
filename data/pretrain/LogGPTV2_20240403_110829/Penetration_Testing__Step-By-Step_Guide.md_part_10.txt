tables and do database queries
Mysql> show databases; (do not forget the “; “at the end of the sql
command)
S_E_Oblako
5. Exploring databases
MySQL > use owasp10;
MySQL [owasp10]> show tables;
S_E_Oblako
6. Looking inside the tables
S_E_Oblako
>select * from accounts ;
7. The DBA designs the databases and create the tables. The web
application inserts the data inside the table based on end user
interaction.
13.1. Discovering SQL injection
Every web application that accept input from users uses a database to store
and retrieve user’s data, also Website information gathering tools will show if
the website uses a database and show the database type and version. There
are many tools that can find SQL vulnerabilities in a website and we are
going to use some of them in this section but for manual SQL vulnerability
discovery Penetration testers usually enumerate the set of parameters that
each page takes try putting special characters like quotes into them. If
entering O'Reilly in a form input causes an exception, then there is a good
chance ' OR '' == ' will cause a whole bunch more results to come out than
the programmer intended.
S_E_Oblako
Configuring the Metasploitable website:
Fixing lab issue
In older versions of Metasploitable machine version there is configuration
error in the database, the following procedure is just to make sure the
database that we are going to use for testing is configured right
1. Open shell in Metasploitable machine and type
2. Login using msfadmin/msfadmin
3. #sudo Mysql
4. Mysql>show databases;
5. Type Control +c
6. Type:
#sudo nano /var/www/mutillidae/config.inc
S_E_Oblako
7. Check line 4 $dbname = ‘owasp10’; if it is metasploit then
change it to owasp10
8. Hit Control X Then Y to save and enter
Exercise 53: Breaking a webpage
1. From Kali Machine login to webpage at the Metasploitable virtual
machine
2. Click on Mutillidae
S_E_Oblako
3. Click on Login/register and register a new user
4. Create account user and password is password
S_E_Oblako
5. Login with the user just created
S_E_Oblako
6. Logout
7. Login again as follow:
Username = test 
Password= just put the character ‘
8. Logon will fail but the system will through SQL error
Error Analysis
9. It is a database error that contain the location of the file and the
database statement that failed (Select * FROM accounts WHERE
username=’test’ AND password=’’’
10. Which mean the database is vulnerable to SQL injection.
13.2. Injecting a code in webpage
Exercise 54: Injecting Code into Webpage
1. Go back to login page and enter the username (user)
2. Enter the user password followed by statement AND space 1=1#
(password’ AND 1=1#) and hit enter.
S_E_Oblako
3. If the page login without error that’s mean the page accepted the
injected code 1=1
4. Login will be successful because we provide the password and true
SQL statement which AND 1=1#, this means the filed accept any
SQL statement.
5. To prove, Logout and log back again but replace 1=1 with 1=2 and
the page should give an error and Login will fail because of the
AND statement is not true.
S_E_Oblako
6. Even though we give the right username and password, the page
gave us error because the added SQL statement AND is followed by
1=2 which is not true.
7. This confirms the website is actually injecting anything in the
Password field, which mean that we can use the password field to
inject complete SQL statement and the website will execute it, if it
is in the right SQL format.
Exercise 55: Login as Admin without a password
In this exercise we are going to use SQL injection to allow us to login to the
webpage as an Admin without knowing the Admin password, instead we are
going to use OR statement in the password filled.
1. Open the Mutillidae page
2. Click on Login/Register
3. In the username field enter admin
4. In the password field enter aaa’ OR 1=1# and enter
S_E_Oblako
5. The system here tries to run the following SQL statement
6. The first part is Not True because the Admin password we entered
is not right, because we used OR statement and the second part is
True (1=1) the system allow us to continue to the Admin page.
Injecting using the Username Field:
S_E_Oblako
7. The statement that the webpage tries to run for username and
password is as following
8. we were injecting using the password field, in this exercise we will
try to use the username field to inject a SQL code
9. Here we enter admin followed by the one quotation and the #
sign, this sign telling the code to ignore anything behind it
including the password. The system will allow us to login even
though no password entered.
S_E_Oblako
S_E_Oblako
13.3. Discovering SQL injection in GET
What is the difference between HTTP GET and HTTP POST?
HTTP POST requests supply additional data from the client (browser) to the
server in the message body. In contrast, GET requests include all required
data in the URL. Forms in HTML can use either method by specifying
method="POST" or method="GET" (default) in the  element. The
method specified determines how form data is submitted to the server. When
the method is GET, all form data is encoded into the URL, appended to the
action URL as query string parameters. With POST, form data appears within
the message body of the HTTP request.
In the previous method we were using POST method to do SQL injections
using the field of username and password to POST the injection, in this
exercise we are going to use GET method which uses the URL bar to do the
injection.
Exercise 56: Discovering SQL injection vulnerability with GET
1. From Kali Linux open web browser and enter the IP address of
Metasploitable virtual machine then go to Mutillidae page.
2. Login as user and go to page:
3. OWASP Top 10
S_E_Oblako
4. A1 Injection
5. SQLi - Extract Data
6. User Info
7. Copy the URL Link
8. Open leafpad text editor and paste the URL as shown above
9. Insert statement (order by 1) to tell the database to list data from
coulomb 1 to prove that we can inject in the URL
S_E_Oblako
10. The order by statement is inserted after the username ( ‘ order by 1
%23 )
11. The %23 is the html character equivalent to # character
12. Note that when we insert the line in URL we have to change spaces
and signs to HTML code. Below a table for character conversion
from sign to HTML where space=%20
13. Copy the modified URL to the URL field and hit Enter
14. You will login to the page normally and have the results as
S_E_Oblako
expected
15. If you replace order by 1 to order by 10 you going to see an error
from the database because the is no column number 10.
16. That proof that the page is vulnerable to SQL injection as it
interacts with the commands we inter in the URL.
13.4. Reading Database Information:
To read database information we need to guess how many columns is the
database, in the previous example we told order by 10 which gave us error,
we are going to try order by statement until it stop giving the error
Exercise 57: Reading and Extracting Data from Website
Continue from Exercise 56 step 16
S_E_Oblako
17. Order by 6 is still giving error, which means the Database number
of Columns is below 6
18. Keep trying until the error goes away
19. So now we know the Database number of columns 5 we are going
to insert new SQL code to list all the Columns
20. Insert ‘union select 1,2,3,4,5 (union select is a SQL command that
will allow us to to have more than one select in the same command.
The command will list for us the columns as seen below column 2
is called user name , column 3 is password , column 4 is signature
S_E_Oblako
21. The result shown in the screenshot
22. We can replace with union select 1, database (), user (), version (),
5# to list the database name and database user and version
23. See the database name is owasp10 and the database user is root,
S_E_Oblako
which mean that the web application is connected to database as
root and therefore we can pass any SQL command as root, in fact
the main objective of this exercise is to prove that we can get
results from the database by injecting a SQL commands in the
URL.
24. To read more data from the database we are going to read the tables
in the database from the information_schima in the Mysql Database
25. By executing these commands we got all the tables in all databases
26. If we want to look at the tables of specific database such as
owasp10
27. Insert the following statement
Extracting sensitive data:
28. If we need to read data from a table, we must know the columns
names first.
29. The following injection will show the columns names
S_E_Oblako
30. To read the usernames and passwords from accounts table
31. We got all usernames and accounts in the accounts table
13.5. Read/write files using SQL vulnerability
In this exercise we are going to use SQL injection to read any file in the web
server, even files outside the www folder because the SQL database user is
root , also we are going to upload files to the website.
Exercise 58: Reading and writing files using SQL vulnerability
1. To read a file inside the web server , I am going to insert the
following statement in the URL
S_E_Oblako
union select, load_file(‘/etc/passwd’),null,null,null%23
2. As you can see from above screenshot, I got the output of file
/etc/passwd
3. To write to the website insert the following code in the URL
union select null, ‘example example’ ,null,null,null into outfile
‘/var/www/mutillidae/example.txt’
4. This will attempt to write a text file to /var/www/mutillidae
S_E_Oblako
5. That did not work because we don’t have a permission to write to
the folder /var/www/mutillidae
6. If we replace that with folder /temp and test
7. And insert it again
S_E_Oblako
8. Because there is no SQL error, it means the file is written. To
check, we go to the Metasploitable machine and check the file.
13.6. Using Sqlmap tool
Sqlmap is an open source penetration testing tool that automates the process
of detecting and exploiting SQL injection flaws and taking over of database
S_E_Oblako
servers. It comes with a powerful detection engine, many niche features for
the ultimate penetration tester and a broad range of switches lasting from
database fingerprinting, over data fetching from the database, to accessing the
underlying file system and executing commands on the operating system via
out-of-band connections.
In all the previous examples we were injecting using manual methods to
discover and inject SQL, in the following example we will use sqlmap tool
which automate the discovery and penetration of SQL injection.
Sqlmap is a tool that come part of Kali Linux and it is designed to exploit
SQL injections, the tool works with many database types such as
mysql,MSsql,..etc.
Exercise 59: Using Sqlmap tool
1. Open Kali browser and go to Metasplitable virtual machine web
page http://10.0.2.5/Mutillidae
2. Go to the login page and copy the URL
3. Open Terminal Windows and type
#sqlmap –level 3 -u 
#sqlmap –level 3 –u http://10.0.2.6/mutillidae/index.php?page=user.info
S_E_Oblako
4. The tool found the database type as MySQL , PHP version and
Apach2 version
5. Sqlmap tool figured out that system is Linux Ubuntu 8.4 and the
database is MySQL 5.0.12 and it stored the information it found in
a test file.
6. Type
#sqlmap --help to know more about the tool
S_E_Oblako
7. To see the databases, type the same command followed by –dbs
#sqlmap –level 3 –u http://10.0.2.6/mutillidae/index.php?
page=user.info –-dbs
8. Answer No to the using own cookies
S_E_Oblako
9. Checking current Database
10. To see all the tables inside the owasp10 database
Note
sqlmap is slow when retrieving information from database
files, depending on the size of the database it may take
more than 15 minutes to finish.
S_E_Oblako
S_E_Oblako
11. To get dump of all data from table account in owasp10 database
#sqlmap –u http://10.0.2.6/multillidae/index.php -T accounts -D
owasp10 –-dump
12. This command makes a complete dump to a table inside the
targeted database and it store the dump at
/root/.sqlmap/output/10.0.2.6/dump/
S_E_Oblako
13. To see the stored dump file
# cd /home/kali
#ls -al
S_E_Oblako
S_E_Oblako
13.7. Protection from SQL injection
Filters
In some situations, an application that is vulnerable to SQL
injection (SQLi) may implement various input filters that prevent from
exploiting the flaw without restrictions. For example, the application
may remove or sanitize certain characters or may block common SQL
keywords. In this situation. There are numerous tricks you can try to
bypass filters of this kind.
Blacklist of some commands
Some programmers block some SQL commands like union and other to
stop SQL injection but again this method is not secure and can be
bypassed.
Using Prepared statement, Separate Data from SQL code
The use of prepared statements with variable binding (aka parameterized
queries) is how all developers should first be taught how to write
database queries. They are simple to write, and easier to understand than
dynamic queries. Parameterized queries force the developer to first
define all the SQL code, and then pass in each parameter to the query
later. This coding style allows the database to distinguish between code
and data, regardless of what user input is supplied.
Prepared statements ensure that an attacker is not able to change the
intent of a query, even if SQL commands are inserted by an attacker. In
the safe example below, if an attacker were to enter the userID of tom'
or '1'='1, the parameterized query would not be vulnerable and would
instead look for a username which literally matched the entire string
tom' or '1'='1.
Using a least privileged Database Account
To minimize the potential damage of a successful SQL injection attack,
you should minimize the privileges assigned to every database account
in your environment. Do not assign DBA or admin type access rights to
S_E_Oblako
your application accounts. We understand that this is easy, and
everything just ‘works’ when you do it this way, but it is extremely
dangerous. Start from the ground up to determine what access rights
your application accounts require, rather than trying to figure out what
access rights you need to take away. Make sure that accounts that only
need read access are only granted read access to the tables they need
access to. If an account only needs access to portions of a table, consider
creating a view that limits access to that portion of the data and
assigning the account access to the view instead, rather than the
underlying table. Rarely, if ever, grant create or delete access to
database accounts.
If you adopt a policy where you use stored procedures everywhere, and
do not allow application accounts to directly execute their own queries,
then restrict those accounts to only be able to execute the stored
procedures they need. Do not grant them any rights directly to the tables
in the database.
SQL injection is not the only threat to your database data. Attackers can
simply change the parameter values from one of the legal values they
are presented with, to a value that is unauthorized for them, but the
application itself might be authorized to access. As such, minimizing the
privileges granted to your application will reduce the likelihood of such
unauthorized access attempts, even when an attacker is not trying to use
SQL injection as part of their exploit.
While you are at it, you should minimize the privileges of the operating
system account that the DBMS runs under. Do not run your DBMS as
root or system! Most DBMSs run out of the box with an immensely
powerful system account. For example, MySQL runs as system on
Windows by default. Change the DBMS's OS account to something
more appropriate, with restricted privileges
Multiple DB Users
The designer of web applications should not only avoid using the same
owner/admin account in the web applications to connect to the database.
Different DB users could be used for different web applications. In
general, each separate web application that requires access to the
database could have a designated database user account that the web-
app will use to connect to the DB. That way, the designer of the
S_E_Oblako
application can have good granularity in the access control, thus
reducing the privileges as much as possible. Each DB user will then
have select access to what it needs only, and write-access as needed.
As an example, a login page requires read access to the username and
password fields of a table, but no write access of any form (no insert,
update, or delete). However, the sign-up page certainly requires insert
privilege to that table; this restriction can only be enforced if these web
apps use different DB users to connect to the database.
Using WAF (Web Application Firewall)
Web Application Firewall (WAF) that inspect the HTTP traffic coming
or going out the web site and can prevent attacks stemming from web
application security flaws, such as SQL injection, Cross-site scripting
(XSS), file inclusion and other security flaws. WAF can be network
bases or cloud based.
S_E_Oblako
14
Cross Site Scripting (XSS)
Cross-Site Scripting (XSS) attacks are a type of injection, in which
malicious scripts are injected into trusted websites. XSS attacks
occur when an attacker injects a Java script into a web application,
the Java script will be executed in users’ browsers when they
access the Website. Flaws that allow these attacks to succeed are
quite widespread and occur anywhere a web application uses input
from a user within the output it generates without validating or
encoding it. The end user’s browser has no way to know that the
script should not be trusted and will execute the script. Because it
thinks the script came from a trusted source, the malicious script
can access any cookies, session tokens, or other sensitive
information retained by the browser and used with that site. These
scripts can even rewrite the content of the HTML page.
S_E_Oblako
14. Cross Site Scripting XSS
Cross Site scripting vulnerability allow attacker to insert a java script to a