---
author: Daniel Oh
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 4680
date: '2018-03-11 11:09:44'
editorchoice: false
excerpt: 应用这些策略来保护容器解决方案的各个层面和容器生命周期的各个阶段的安全。
fromurl: https://opensource.com/article/17/10/10-layers-container-security
id: 9428
islctt: true
largepic: /data/attachment/album/201803/11/110949us87gob6001hi6z0.png
permalink: /article-9428-1.html
pic: /data/attachment/album/201803/11/110949us87gob6001hi6z0.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 应用这些策略来保护容器解决方案的各个层面和容器生命周期的各个阶段的安全。
tags:
- 容器
- 安全
thumb: false
title: Linux 容器安全的 10 个层面
titlepic: true
translator: qhwdw
updated: '2018-03-11 11:09:44'
---
> 
> 应用这些策略来保护容器解决方案的各个层面和容器生命周期的各个阶段的安全。
> 
> 
> 
![](/data/attachment/album/201803/11/110949us87gob6001hi6z0.png)
容器提供了打包应用程序的一种简单方法，它实现了从开发到测试到投入生产系统的无缝传递。它也有助于确保跨不同环境的连贯性，包括物理服务器、虚拟机、以及公有云或私有云。这些好处使得一些组织为了更方便地部署和管理为他们提升业务价值的应用程序，而快速地采用了容器技术。
![](/data/attachment/album/201803/11/110950jmtrnsnvm2netev6.png)
企业需要高度安全，在容器中运行核心服务的任何人都会问，“容器安全吗？”以及“我们能信任运行在容器中的应用程序吗？”
对容器进行安全保护就像是对运行中的进程进行安全保护一样。在你部署和运行你的容器之前，你需要去考虑整个解决方案各个层面的安全。你也需要去考虑贯穿了应用程序和容器整个生命周期的安全。
请尝试从这十个关键的因素去确保容器解决方案栈不同层面、以及容器生命周期的不同阶段的安全。
### 1. 容器宿主机操作系统和多租户环境
由于容器将应用程序和它的依赖作为一个单元来处理，使得开发者构建和升级应用程序变得更加容易，并且，容器可以启用多租户技术将许多应用程序和服务部署到一台共享主机上。在一台单独的主机上以容器方式部署多个应用程序、按需启动和关闭单个容器都是很容易的。为完全实现这种打包和部署技术的优势，运营团队需要运行容器的合适环境。运营者需要一个安全的操作系统，它能够在边界上保护容器安全、从容器中保护主机内核，以及保护容器彼此之间的安全。
容器是隔离而资源受限的 Linux 进程，允许你在一个共享的宿主机内核上运行沙盒化的应用程序。保护容器的方法与保护你的 Linux 中运行的任何进程的方法是一样的。降低权限是非常重要的，也是保护容器安全的最佳实践。最好使用尽可能小的权限去创建容器。容器应该以一个普通用户的权限来运行，而不是 root 权限的用户。在 Linux 中可以使用多个层面的安全加固手段，Linux 命名空间、安全强化 Linux（[SELinux](https://en.wikipedia.org/wiki/Security-Enhanced_Linux)）、[cgroups](https://en.wikipedia.org/wiki/Cgroups) 、capabilities（LCTT 译注：Linux 内核的一个安全特性，它打破了传统的普通用户与 root 用户的概念，在进程级提供更好的安全控制）、以及安全计算模式（ [seccomp](https://en.wikipedia.org/wiki/Seccomp) ），这五种 Linux 的安全特性可以用于保护容器的安全。
### 2. 容器内容（使用可信来源）
在谈到安全时，首先要考虑你的容器里面有什么？例如 ，有些时候，应用程序和基础设施是由很多可用组件所构成的。它们中的一些是开源的软件包，比如，Linux 操作系统、Apache Web 服务器、Red Hat JBoss 企业应用平台、PostgreSQL，以及 Node.js。这些软件包的容器化版本已经可以使用了，因此，你没有必要自己去构建它们。但是，对于你从一些外部来源下载的任何代码，你需要知道这些软件包的原始来源，是谁构建的它，以及这些包里面是否包含恶意代码。
### 3. 容器注册（安全访问容器镜像）
你的团队的容器构建于下载的公共容器镜像，因此，访问和升级这些下载的容器镜像以及内部构建镜像，与管理和下载其它类型的二进制文件的方式是相同的，这一点至关重要。许多私有的注册库支持容器镜像的存储。选择一个私有的注册库，可以帮你将存储在它的注册中的容器镜像实现策略自动化。
### 4. 安全性与构建过程
在一个容器化环境中，软件构建过程是软件生命周期的一个阶段，它将所需的运行时库和应用程序代码集成到一起。管理这个构建过程对于保护软件栈安全来说是很关键的。遵守“一次构建，到处部署”的原则，可以确保构建过程的结果正是生产系统中需要的。保持容器的恒定不变也很重要 — 换句话说就是，不要对正在运行的容器打补丁，而是，重新构建和部署它们。
不论是因为你处于一个高强度监管的行业中，还是只希望简单地优化你的团队的成果，设计你的容器镜像管理以及构建过程，可以使用容器层的优势来实现控制分离，因此，你应该去这么做：
* 运营团队管理基础镜像
* 架构师管理中间件、运行时、数据库，以及其它解决方案
* 开发者专注于应用程序层面，并且只写代码
![](/data/attachment/album/201803/11/110950afaazjdbf0760333.png)
最后，标记好你的定制构建容器，这样可以确保在构建和部署时不会搞混乱。
### 5. 控制好在同一个集群内部署应用