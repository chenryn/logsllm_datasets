# 缩小栈        
# 函数调用的尾声, 恢复栈指针为原来的值    popq    %rbp         
# 恢复调用者栈帧的底部数值    retq                 
# 返回     
# 文本段, 保存字符串字面量                                      .section    __TEXT,__cstring,cstring_literalsL_.str:                                 
## @.str    .asciz  "fun1 :%d \n"用 as 命令，把这段汇编代码生成可执行文件，运行后会输出结果："fun1: 46"。    as functio-call2-craft.s -o function-call2./function-call2这段程序虽然有点儿长，但思路很清晰，比如，每个函数（过程）都有固定的结构。7～10行，我叫做序曲，是设置栈帧的指针；25\~26行，我叫做尾声，是恢复栈底指针并返回；13\~22行是做一些计算，还要为本地变量在栈里分配一些空间。**我建议你读代码的时候，**对照着每行代码的注释，弄清楚这条代码所做的操作，以及相关的寄存器和内存中值的变化，脑海里有栈帧和寄存器的直观的结构，就很容易理解清楚这段代码了。除了函数调用以外，我们在编程时经常使用循环语句和 if语句，它们转换成汇编是什么样子呢？我们来研究一下，首先看看 while循环语句。
## 示例 3：循环语句的汇编码解析看看下面这个 C 语言的语句：    void fun1(int a){    while (a This Inner Loop Header: Depth=1    cmpl    $10, -4(%rbp)    
# 比较参数 1 和立即数 10, 设置 eflags 寄存器    jge LBB0_3               