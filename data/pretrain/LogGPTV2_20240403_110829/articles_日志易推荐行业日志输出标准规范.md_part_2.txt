缺省情况下日志文件统一保存在应用组件运行时所在/home/{应用用户名}/logs目录下。可以根据子系统或者功能模块在logs目录下建立子目录，然后保存日志文件，方便查找及维护。
例如：
核心系统应用用户名为：cbsapp，其日志保存目录为/home/cbsapp/logs。
# 日志级别及格式要求
每条日志都需要定义日志级别，而且按照相应格式进行记录
# 日志记录级别
日志级别定义（自上而下，级别由低到高）
  ---------------------------------------------------------------------------------------------------------------------------------------------------------
  **日志级别**   **级别描述**                                                                                                  **保存于日志的信息类别**
  -------------- ------------------------------------------------------------------------------------------------------------- ----------------------------
  DEBUG          对调试（debug）有帮助的信息、事件。默认情况不打开。                                                           调试信息日志
  INFO           在正常运行状态中，粗粒度的、关于重要流程/事件的、应用重要的配置和参数信息，可用来表示应用健康度的信息、事件   一般信息日志
  WARN           有潜在风险的、不会造成大危害的错误（往往由应用外部因素造成，如不正确的输入数据）                              错误信息日志或一般信息日志
  ERROR          应用发生错误（往往由于发生异常），但后续流程还能够继续进行                                                    错误信息日志
  FATAL          应用发生严重错误，应用服务被终止或者重启。需要立即被处理的错误                                                错误信息日志
  ---------------------------------------------------------------------------------------------------------------------------------------------------------
在记录日志的时候，必须严格按照日志级别并结合应用组件实际情况生成日志。
生产环境默认Info以上级别全开（含info，主要用于日志平台分析）。
# 日志记录格式
应用组件应该遵循的日志记录格式：
\[组件编码\]\[时间戳\] \[日志级别\] \[消息文本\]
其中：
1.  "组件编码"为是应用组件或者微服务名称的编码，应符合信息系统的企业应用组件管理规范，组件重启或者时间推移不会造成该编码的变化或者漂移；
2.  时间戳"的格式为 "yyyy-mm-dd hh:MM:ss.SSS"或者"yyyyMMddhhmmssNNN"
    （需精确到毫秒级）；
3.  "日志级别"为符合章节[2.2.1](\l)的级别;
4.  "消息文本"，单个属性采用"属性名称：属性值"
    的格式记录以确保消息内容是可读的, 便于自动化程序代码解析的。
    交易日志和业务日志有不同的属性定义，交易日志属性定义详见4.2
    1.  # 日志字符集编码
应用程序或者组件在输出的日志记录，使用UTF-8字符编码，以便于将来的日志文件分析。
# 日志内容规则
日志记录的内容应满足如下规则：
1.  日志在记录时无论成功与否，都不应改变业务逻辑；
2.  日志中应包含交易的唯一标识（例如：平台流水号）；系统间也需要包含交易的唯一标识（全局流水号）；
3.  日志中应记录服务启动时间、服务请求内容；
4.  如果服务依赖外部配置，特别是在运行时刻可以改变的配置，就要求在日志中记录；
5.  日志中应记录服务结束时间、结束状态、结束消息；
6.  除必填属性之外，建议日志记录包含以下属性：服务使用者、参数值、结果值、配置
    、消息关联跟踪号 、消息源、消息目的地、耗时；
7.  所有错误（WARN、ERROR、FATAL级别）都必须记录到日志中：相关的属性包括：错误码、错误消息、错误原因、错误发生位置；
8.  不要使用系统输出记录日志,如System.out.print,
    printStackTrace。不能将应用日志写入生产环境基础系统的日志。（如SystemErr.log、SystemOut.log）；
9.  应用日志信息输出到独有日志文件中 。
10. 不同级别的日志根据配置可输出到不同文件中，out输出全量日志、err输出错误日志。
11. 消息文本输出格式可按照Json格式进行，或K-V格式组织。
# 日志性能要求
输出日志记录不能过于频繁，输出的内容不能过长不能超过65536字节，以防止记录或采集日志文件时产生大量IO，而对整个磁盘或网络的性能产生影响。
日志统一采用log4j2异步方式输出，提高日志输出吞吐性能降低延迟性。
# 其他要求
我行所有应用日志的记录方式必须遵循和使用本规范，便于统一的管理和控制。当日志监控系统发现不满足本规定的规范，开发人员需要进行相应修改。
4.  # 日志埋点最佳实践
    1.  # 适合记录点
-   系统间的交易请求和响应------info级别
-   外部服务调用和返回------info级别
-   应用和服务的启动，关闭，配置加载------info级别
-   程序异常或者错误：例如数据库无法连接------error级别
-   容错行为：调用重试------debug级别
-   重要的警告------warn级别
-   重要的状态变化------info级别
-   用户交互------info级别
-   有已知失败风险的调用------warn级别
-   长期运行任务的执行进度（如跑批）------info级别
-   重要的逻辑分支和导向分支的条件------info级别
-   从高层方法来汇总处理流程的步骤和事件------避免在底层方法中记录复杂流程的每一步骤------info级别
-   业务上需要关注的状态：例如用户配额即将超限警告状态，交易量异常状态等------info级别
    1.  # 不适合记录埋点
```{=html}
```
-   方法入口------不要记录方法入口，除非它非常重要或者是日志处于调试级别。
-   循环中的数据------避免在循环的多次迭代中记录日志。如果是小循环，或者是间歇性的记录，倒也无妨。
-   大消息或者文件的内容------截断或者使用一些有利于调试的方式进行汇总。
-   良性错误------那些不是真正错误的错误会令日志的读者感到困惑。当异常处理是执行成功的一部分时，有时会遇到这种情况。
-   重复的错误------不要重复的记录相同或者相似的错误。这样可能会快速的填满日志，并且隐藏掉真正的问题。多次发生，应该记录同类型错误发生的频率。日志只需捕获首次问题出现时的详细信息。
    1.  # 请求处理的全过程关联
-   "平台流水号"关联 ：系统内交易用"平台流水号"进行跟踪。
-   "全局流水号"关联 ：系统间交易用"全局流水号"进行跟踪。
-   请求出现错误时，错误堆栈信息应和请求的平台流水号或全局流水号进行关联。
3.  # 日志输出设置规范 
    1.  # 日志输出开关设置
        1.  # 日志级别输出设置
```{=html}
```
1.  应用程序必须能够根据日志级别的定义来设置输出内容，各个级别的日志是可控的。比如DEBUG的日志级别在通常生产运行时关闭，但是在生产环境跟踪分析问题时又能够打开，以便于输出更详细的信息。
2.  日志级别应该能够在应用程序运行时在线的调整，不需要应用程序或者模块重启。正常情况下，只输出INFO、WARN、ERROR级别的日志信息。在特殊情况下，则可以动态调整到更细粒度级别（如DEBUG级别），从而获得更多的应用系统运行日志信息。
3.  控制参数的调整不得改变应用程序或者组件的业务逻辑。
控制参数调整后，应用程序不得因为日志输出时的文件路径设置错误而导致整个业务逻辑执行失败。
日志类型和日志级别的对应关系如下表：
  --------------------------------------------------------------------------------------------------------------------------------------------------
  日志类型      日志级别                注释
  ------------- ----------------------- ------------------------------------------------------------------------------------------------------------
  操作记录      DEBUG、INFO             根据实际情况选择日志级别
  性能记录      INFO、WARN              可能根据实际运行状况动态选择。例如在性能在允许范围内以INFO级别记录；当性能下降超过某一指标时以WARN级别记录
  状态记录      DEBUG、INFO，WARN       根据实际情况选择日志级别
  事件记录      DEBUG、INFO，WARN       根据实际情况选择日志级别
  错误记录      WARN、ERROR、FATAL      根据实际情况选择日志级别
  --------------------------------------------------------------------------------------------------------------------------------------------------
在实际应用中决定实施何种类型的日志，要根据业务需求、应用特点决定。
4.  # 日志维护规范
    1.  # 日志安全
日志应该符合的安全规范，不要在日志信息里包含安全敏感信息。遇到敏感信息应该进行脱敏处理输出。（参考数据安全管理办法，对数据进行脱敏处理）。
# 日志文件上限控制
1.  日志文件的大小应该可以通过参数控制，如果超过限制，则必须写入到另一个带新序号的日志文件中。
2.  缺省保留不带日期及序号，其余序号文件需要压缩存放。