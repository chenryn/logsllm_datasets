nated
correlation between ’s next hop choice for the second time and
for the ﬁrst time. Thus strictly speaking, a random route is dif-
ferent from a random walk unless the random route does not
intersect itself. Intuitively, however, such correlation is small,
’s edges) as a choice for
because only
, and also because a random route does not tend to encounter
is eliminated (out of
the same node many times.
C. Locally Determining the Appropriate Length of Random
Routes
. Directly setting
.
, a node
Because SybilGuard is decentralized, each node needs to lo-
cally determine
requires
. This is challenging because we must ex-
the knowledge of
clude sybil nodes when estimating , which requires running
SybilGuard with an appropriate
Instead, to locally determine
ﬁrst performs a
. Be-
short random walk (e.g., 10 hops), ending at some node
cause the random walk is short, with high probability, it stays in
con-
the honest region and
ceptually both perform random routes to determine how long the
should
two routes need to be to intersect. In practice,
have already performed random routes along all directions, thus
. It
is important here to use a standard random walk (instead of a
’s random route will
random route) to choose
within a small number of hops. Also,
always intersect with
our later simulation will show that even a walk as short as 3 hops
in a million-node social
sufﬁces to obtain good estimates of
network.
simply needs to hand over one of its witness tables to
is an honest node. Next
, otherwise
and
and
The intuition behind the above design is that in fast mixing
graphs, a random walk of short length is sufﬁcient to approach
is just a random node
the stationary distribution. Thus,
drawn from the stationary distribution, and the procedure yields
. The sampling, however, is biased
a random sampling of
because the stationary distribution is not necessarily a uniform
is more likely to be a higher-degree node
distribution and
than a lower-degree node. On the other hand, notice that if we
, then
start a random walk from a uniformly random node
after
hops ( being the mixing time), the walk will be at
a node roughly drawn from the stationary distribution. Thus,
and
the needed route length for two routes (starting from
. Because
, we can safely ignore
, which will be further conﬁrmed in our later
, respectively) to intersect is at most
and
the term of
experiments.
Finally, node
obtains multiple such samples using the
above procedure, and calculates the median
of the samples
(see Section VI for the number of samples needed). It then sets
, where the constant 2.1 is derived from our analysis
of Birthday Paradox distributions [14]. The analysis proves that
multiplying the median by 2.1 is sufﬁcient to ensure a collision
is itself
probability of 95%, regardless of
enters
a sybil node or the random route from either
the sybil region, the adversary controls that particular sample.
is much more
Thus, using the median sample to estimate
robust than directly using the 95th percentile.
. Note that when
or
V. SYBILGUARD UNDER DYNAMICS
Our protocol so far assumes that the social network is static.
In decentralized distributed systems, a typical user ﬁrst down-
loads and installs the software (i.e., the user is created). The
node corresponding to the user may then freely join or leave the
system (i.e., become online and ofﬂine) many times. Finally, the
user may decide to uninstall the software and never use it again
(i.e., the user is deleted). Node join/leave tends to be much more
frequent than user creation/deletion. For example, dealing with
frequent node join/leave (or “churn”) is often a critical problem
faced by DHTs.
SybilGuard is designed such that it needs to respond only
to user creation/deletion, and not to node churn (i.e., not to
nodes going ofﬂine and coming online in possibly unpredictable
ways). The social network deﬁnition in this paper always in-
cludes all users/nodes that have been created and not yet deleted,
regardless of whether they are currently online or ofﬂine.
A. Dealing With Ofﬂine Nodes
In SybilGuard, a node communicates with other nodes only
when (i) it tries to verify another node, and hence needs to con-
tact the intersection nodes of the random routes, and (ii) it prop-
agates its registry and witness tables to its neighbors.
For the ﬁrst scenario, because both the veriﬁer
and the
perform multiple random routes, there will likely be
suspect
multiple intersections. In fact, even a single route from and a
single route from may have multiple intersections. The veri-
ﬁcation can be done as long as a majority of
’s routes have at
least one intersection point online.
For propagating registry and witness tables, note that this oc-
curs when a random route changes, due to user creation/deletion
or edge creation/deletion in the social network. Witness table
584
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 16, NO. 3, JUNE 2008
Fig. 9. A potential attack by M during node dynamics.
Fig. 8.
Incremental maintenance of routing tables. The example assumes that
d = 3 and k = 2. Note that after edge e4 is added, only routes entering via
edge e2 need to be redirected.
propagation may also be needed when IP addresses change, but
such updating can be performed lazily. Previous studies [15]
on p2p systems show that despite high node churn rate, user
creation/deletion occurs only infrequently and the average user
lifetime is roughly a year. Similarly, people make and lose so-
cial trust relations in real life over months-long time horizons.
Thus, the system can afford to take days to completely propa-
gate a new registry or witness table, waiting for nodes to come
online. In the case of a new user, prior to becoming a full partic-
ipant, she can always use the system via a friend as a proxy. As
an optimization, SybilGuard also has a mechanism that allows
a node to bypass ofﬂine nodes when propagating registry and
witness tables. We leave the details of such mechanism to [14].
In the process of propagating/updating registry and witness
tables, the social network may change again. Thus, it is helpful
to consider it as a decentralized, background stabilization
process. This means that if the topology were to stop changing,
then the registry and witness tables would eventually stabilize
to a consistent state for this (now static) topology.
B. Incremental Routing Table Maintenance
When users and edges are added or deleted in the social net-
work, the routing tables must be updated as well. Adding a new
node can be considered as ﬁrst adding a node with no edges and
then successively adding its edges one by one. Deleting a node
can be considered similarly. Thus, we need to discuss only edge
creation and deletion.
and
. Suppose
We ﬁrst explain how
updates its routing table when a
’s orig-
new edge is added between
inal degree is
and its original routing table is the per-
’s
mutation “
routing table would be to pick a new random permutation of
”. Doing
“
so, however, would affect/redirect many routes, and incur
unnecessary overhead in updating registry and witness tables.
”. A trivial way to update
” that is unrelated to “
Instead, SybilGuard uses an incremental maintenance algo-
along a speciﬁc edge may be
rithm where only routes entering
affected (Fig. 8). This reduces the expected overhead on the net-
. In this algorithm, when a new edge
work by a factor of almost
chooses a uniformly random integer between
is added to ,
1 and
, then ’s new routing table
’s new routing
will be “
”. In
table will be “
to
other words, we replace
the end of the permutation. Similarly, for edge deletion, suppose
, and then append
, inclusive. If
with
”. If
,
. If
’s original routing table is “
”. Without
loss of generality, assume that we are deleting edge
, and
, then ’s new routing
let be such that
”. Otherwise the new routing
table is trivially “
”. In other
table will be “
words, we simply substitute
. For both insertion
are affected,
and deletion, only routes entering
and one can prove [14] that the resulting routing table is indeed
a uniformly random permutation.
via edge
with
C. Attacks Exploiting Node Dynamics
This section shows that having a node perform a random route
along each of its edges is necessary for security and provides a
defense against potential attacks under node dynamics. We ﬁrst
explain the potential attack scenario. Suppose each node were to
perform only a single random route, and consider the example
is malicious and the other nodes
in Fig. 9, where
are honest.
. Thus,
’s public key key1 in their registry tables.
, and
’s random route is
record
. Here
,
joins, and establishes edges with
Now another honest node
and
.
instead of
now go to
. Being malicious,
the attack by changing its public key to key2. Now ,
updates its routing table, and suppose that routes from
launches
, and
will record key2 in their registry tables. At this point, key1 is
nodes.
registered on
Both of them are likely to be successfully veriﬁed with good
probability.
nodes, while key2 is registered on
The source of the above vulnerability is that when the routing
changes, the system needs to “revoke” the stale
table on
entry of key1 from the registry tables on
’s
random route no longer passes through these nodes. Explicitly
revoking stale entries would introduce considerable complexity
and may be ofﬂine. An alternative design would
because
be to associate TTLs with table entries, which unavoidably
introduces a trade-off between security and overheads to refresh
expired entries.
, because
and
’s key1. It is also possible that
SybilGuard prevents the above attack by having all nodes per-
(with
form random routes along all directions. In particular, if
, then key3
key3) has a random route of
’s route may
will overwrite
. However, it is easy to show that
not be
the stale entries will always be overwritten by some node. To
’s registry table in-
understand why, suppose that an entry in
. If this
dicates that
entry is stale, it means that
’s
route. From the back-traceable property of random routes, we
can always backtrace from for hops and reach some node
’s
. In other words,
public key will overwrite the stale entry on
is the th hop in the random route of
is no longer the th hop in
at the th hop and thus
’s routes must visit
. One of
YU et al.: SYBILGUARD: DEFENDING AGAINST SYBIL ATTACKS VIA SOCIAL NETWORKS
585
the back-traceable property ensures that for any registry table
entry, there is one and exactly one “owner” of the entry. Under
node dynamics, ownership may change and there may be tempo-
rary periods where a malicious user “owns” more entries than
it should. However, after the system stabilizes, all entries will
be “owned” by the right owner. Based on such observations, we
can easily see that other similar attacks under node dynamics
will be prevented by SybilGuard as well.
VI. EVALUATION
This section uses simulation to evaluate the guarantees of
SybilGuard. We choose to use simulation because it enables
us to study large-scale systems. Because social networks tend
to contain private information, there are only a limited number
of publicly available social network datasets. Those that are
publicly available [16], [17] are quite small, which prevents a
thorough evaluation of probabilistic guarantees. Thus we use
the widely accepted Kleinberg’s synthetic social network model
[18] in our evaluation, which generalizes from the Watts–Stro-
gatz model [19]. We use the model to instantiate three different
graphs: a million-node graph with average node degree of 24, a
ten-thousand-node graph with average degree of 24, and a hun-
dred-node graph with average degree of 12.
A. Model for Social Network
Kleinberg’s social network model [18] successfully explains
the principle of “six degrees of separation” in social networks.