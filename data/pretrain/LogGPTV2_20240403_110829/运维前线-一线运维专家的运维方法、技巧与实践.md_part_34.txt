口 show processlist：显示当前正在运行的 SQL 的信息，分析 SQL 的数量及每条 SQL的
（1）MySQL：PHP+MySQL是最常见的搭配，如果怀疑MySQL存在性能问题，那么我
4.常见外部存储的性能分析
xdebug是一个开放源代码的PHP 程序调试器，和xhprof类似，可以用来跟踪、调试和
2）通过xdebug 分析PHP代码级性能
口EWall%：函数执行本身花费的时间所占的百分比，不包括子函数执行的时间
口Excl.WallTime（microsec）：函数执行本身花费的时间，不包括子函数执行的时间。
口IWall%：调用花费的所有时间包括子函数所占的百分比。
口Incl.Wall Time（microsec）：函数调用花费的所有时间（包括子函数），单位是微秒。
口Calls%：此函数调用次数占所有函数调用的百分比。
口Calls：调用次数。
Function Name：函数名。
下面来解释一下图7-34中各个字段的意思。
理，这个比查看 my.cnf文件更准确。
否合理等。
当前状态。
show status like “%cache%"。
内存使用、数据表的打开数量、
FunctionName
运维前线：一线运维专家的运维方法、技巧与实践
图7-34
xhprof查看 PHP代码性能，以表格展现
Calls
、SQL命令执行情况等。like子命令可以过滤信息，如
Calls%
2.8%
2.8%
8.3%
2.8%
2.8%
2.8%
Incl.WallTime
(microsec)
17611
2334
2703
3352
3842
5585
100.0%
IWall%
13.3%
15.3%
19.0%
21.8%
31.7%
Excl.WallTime
(microsec)
2334
2703
3352
3842
2059
3043
EWall%
13.3%
15.3%
19.0%
21.8%
11.7%
17.3%
---
## Page 197
家可以结合这些方法去建设自己的性能分析系统。
方面的问题：
在 xhprof 的基础上进行了简单修改，取其核心部分，重新整合为一套系统，解决了如下几个
无法及时部署。我们的技术团队在xhprof的基础上开发了一套PHP 性能分析系统。该系统
比较麻烦，为了监控一台服务器的PHP程序，需要做多处修改，还得改PHP代码，排障时
7.4.4
配置Web服务器访问
图7-35使用原本xhprof扩展的必要工作
每台服务器部署一次）
在PHP服务器的工作
改进后的性能分析系统的做法如图7-36所示：
xhprof管理程序
Graphviz绘图库
纯粹介绍系统的使用对读者没有什么意义，本节着重介绍下系统的建设思路和方法，大
（3）可以控制采样概率，对性能的影响较小。
（1）快速部署，从需要开发来执行，到只需要开发修改框架，再到无需开发参与。
xhprof扩展是深入分析 PHP性能的神器，但是它也存在一些问题，比如 xhprof 的部署
xhprof管理程序
部署xhprof扩展
（4）将性能数据查看功能整合到了运维系统。
（2）采集性能数据，集中存放在中心服务器。
口Redis：Redis是常用的缓存，也有不少业务将其拿来当作存储组件使用。Redis可以
口Memcached：Memcached也是常用的缓存组件，如果怀疑Memcached出现性能问
读取性能文件
服务器部署
管理程序
部署xhprof
PHP性能分析实践：性能分析系统
持久化、内存使用情况等。也可以通过 monitor命令查看正在Redis 内部执行的指令。
通过redis-cli命令进行管理，info命令分析Redis内部状态：包括连接情况、主从情况
常情况下更大。
（item）的淘汰情况，每秒cmd_get、cmd_set 等命令的执行次数，并判断是不是比正
题，可以通过stats、stats items、stats slabs等命令分析内存的使用情况，内存中项目
需要监测性能的
include xhprof lib
xhprof disable
xhprof enableO
（每个文件）
PHP代码层工作
保存到文件
把性能数据
PHP代码
库文件
。先说说xhprof原本的做法，如图7-35所示：
图7-36改进后的性能分析系统的必要工作
配置Web服务器访问
在管理服务器的工作
xhprof管理程序
xhprof管理程序
Graphviz绘图库
部署xhprof扩展
读取性能文件
服务器部署
部署xhprof
（一次性工作）
管理程序
第7章PHP运维实践181
文件及修改配置
自动部署修改PHP
保存性能数据
全部自动部署
PHP代码层工作
管理服务器
文件并同步到
---
## Page 198
断出现错误502，排查半天也找不到原因。还得叫上研发、DBA上线一起分析。等你查完问
检查。有时你发现PHP进程挂了，重启一下就能解决，有时运气则没有那么好，发现访问不
问题。发现真的是打开首页都很慢，想想或查找这个业务的服务器IP，登录服务器开始各项
然后静下心来思考30秒。回想这个业务的服务器架构，把域名输人到浏览器自已验证一遍
页都很卡，你赶紧看看吧”。你：“收到，我马上就看”。
7.5
了较好的作用。
性能出现问题时，可以在几分钟内部署好并查看性能分析的结果，对性能分析和排障都起到
较小，利用自动化运维技术和一些 PHP 技巧简化了xhprof 的部署，取得了较好的收益，在
次。
并自动修改 php.ini文件中的选项：
和xhprof_end.php，在为某台服务器开启性能分析的同时将这两个文件发布到目标服务器，
图7-35所示）
套程序实现的，Graphviz是一套绘图程序，可以读取性能文件中的调用链绘制调用关系图（如
182
在女朋友的抱怨声中你打开了电脑，趁着开机的时间把刚刚放松的心情重新收拾起来，
那么，自动部署是如何做的呢，我们写好了两个 PHP 程序，分别称为xhprof_start.php
某天晚上你下班回到家，刚准备吃饭。
xhprof管理程序是一套PHP系统代码，展示图（图7-33）和表格（图7-34）都是通过这
这套系统做得比较小，使用起来也比较简单，工作原理如图7-37所示。系统的工作量
性能分析系统的工作流程如图7-37所示：
我们先来看一个场景。
这两个文件将分别执行图7-35 中右边框的所有工作，而且还能控制采集性能数据的频
auto_prepend_file =xhprof_end.php
auto_append_file =xhprof_start.php,
PHP故障处理与监控
系统管理员
运维前线：一线运维专家的运维方法、技巧与实践
后台创建性能
性能文件
PHP生成
分析项目
图7-37性能分析系统工作流程
同步到中央
reloadphp
扩展xhpro且
服务器
。同事打来电话：
到目标服务器
采集代码并部署
读取性能文件
管理系统
“X工，网站打不开了，打开首
性能数据
分析展示
同步脚本
部署定期
---
## Page 199
误返回码、也有可能表现为卡顿。在没有经过异常处理的网站中，常见的错误码有如下
确分类才能一矢中的。大部分PHP故障会反映在用户端，用户看到的可能是HTTP错
障的描述来对问题进行分类了，进行准确的分类判断是进行下一步分析的基础，只有准
7.5.1PHP故障分类及处理思路
方法和解决方法。
一定的量或突破极限后往往就成为了故障。本节将尝试为大家分析PHP故障，介绍快速分析
型网站上是不允许出现这种情况的，一旦出现老板肯定要追责，要进行事故定级，如果背上
只能找研发一起慢慢排查，而用户是不会等你的，所以你只好眼睁睁地看着用户流失了。大
懵。如果是经验丰富的研发或运维或许还能知道问题大概出在哪里。但如果是运维新手呢，
才能快速处理呢？可是你想过没有，时间就这样在一分一秒地过去，而我们对故障还是有点
较正常，你得再静下心来想想问题到底出在哪里了，即使发现是机器负载的问题，你又怎样
几种：
个一二级事故，那么年终奖恐怕得大打折扣。
如果不熟悉，那就还得找架构图或CMDB，这资料还得是最新的。如果机器负载看起来还比
从用户反馈时到解决完已经不知道发生了多久，你如果很熟悉业务则可以回忆起架构，但是
兹是不是很熟悉的场景？也许你觉得这些好像都很正常，都是这样的过程呀。等等，故障
题，女朋友已经吃完饭了。
口502错误：打开页面显示的是502badgateway（错误网关）的信息。原因一般是PHP
有经验的运维一般都能够快速定位到问题点，他们接到报障时就已经在心里根据故
故障问题跟性能问题息息相关，又有不同之处。性能可以体现为吞吐低和高延时，达到
口503错误的一般处理方法：应该重点分析机器负载，Nginx进程是否存活，端口是否
口503错误：伴随503错误出现的描述一般是整个服务临时不可用（Servicetemply
口502错误的一般处理方法：如果是执行超时时间配置不合理，则需要延长超时时间。
Nginx 状态。
存活，Nginx进程的工作饱和度，如果以上都正常则应该参照7.4节所讲的方法分析
应用户的请求。
Unavailable），这种错误一般是Web服务器（如Nginx）这一层端口还活着，但无法响
锁、负载，执行中的 SQL等，strace是个发现PHP 连接后端超时的好方法。
另一种处理方法是从后端人手，找到关键的瓶颈点，比如分析数据库的慢查询、死
条件。来品
存储或调用外部连接反应太慢，或者挂了，导致PHP一直等待，达到了自行了断的
错误日志里出现了SIGxxxx，那就有可能会出现这个现象。而罪魁祸首很可能是后端
时间，导致FPM终止了PHP工作进程，无法为fastcgi接口返回信息。如果PHP的
执行得太久而超过了参数request_terminate_timeout和max_execution_time所设定的
L
第7章PHP运维实践183
---
## Page 200
发现。
地收集性能数据和用户访问数据，智能监控，关联分析，而不是等到业务完全不可用了时才
该如何做呢，首先我们可以回顾有哪些点可以发现故障线索，哪些点需要监控，应尽可能
法，只要关注这些性能指标的变化，就可以提前发现故障的苗头。说起来很容易，但是应
候就把它解决掉。所以故障发现是非常有必要的，故障发现最重要的方式就是监控。大部
故障处理是要做到比用户和老板先发现故障，甚至还没有出现故障，而只是一个风险点的时
出现了多久，这时候老板很可能也已经发现了，运维处理起来会很仓促，压力也很大。好的
7.5.2业务监控和故障发现
分故障的原因是性能问题达到了不可容忍的程度，7.4节已经讲解了很多PHP性能分析的方
的故障比较常见的有如下几种。
往是到了高峰期用户大量涌进网站，导致某些组件达到性能瓶颈。由PHP的性能问题所引起
184运维前线：一线运维专家的运维方法、技巧与实践
9大部分网站可能是等用户抱怨的时候才发现有故障，而这时不知道已经影响了多少人、
口 PHP 状态信息：监控PHP-FPM的PHP状态（status）页面，查看当前正在处理的请
口业务的URL：如果用户访问的页面都出现了问题，这是故障最直观的体现，则要加
1.监控点和监控方法
口依赖的后端存储慢：这种情况比较普遍，比如 MysQL、Redis、Memcached 出现故障
口PHP依赖的接口慢：比如请求外部的接口，外部接口很慢等。
口PHP 进程本身慢：这种情况反而不多，只出现在少数特别复杂的框架写的程序中。
PHP 进程不存在：可能由于进程意外掉挂了，再没有起来，比较常见的是请求一直在
日常正常运行的网站如果突然变得卡顿，那么出现的故障大部分是性能问题造成的，往
口404错误：表示页面不存在，静态页面或PHP文件被删除。查
口504错误的一般处理方法：还是要从PHP层进行分析，如果每个请求的处理时间都
口504错误：504错误表示网关超时（gateway timeout），可能是请求量突发，导致PHP
口PHP进程响应慢，Web服务器响应慢，达到超时后，返回503错误。
处理中，达到max_execute_time时间，管理进程把工作进程干掉了。
博锐、监控宝等第三方服务。
是正常的，那么就是整个PHP层的资源不够用了，需要扩容；如果是某些请求的时
人URL监控，设定合理的超时值。可以使用服务器模拟用户访问，或者使用基调、
间太长，那么就得找到性能瓶颈点了。哦
瓶颈了，导致系统可用性明显下降；影响504错误的是Nginx的超时设置fastcgi
负载太高，无法为请求分配工作进程，或者达到了连接数限制、某些组件达到性能
或性能问题。
connect_timeout、fastcgi_send_timeout、fastcgi _read_timeout.
---
## Page 201
中定期执行：
公司往往会选择自建监控系统。
做法是自动把分析结果存入监控系统中，定期持续地记录数据。需要分析时到监控系统中去
c例如，如何把 PHP 状态（status）监控上报到Zabbix，在Zabbix中展示出来。在服务器
processes/ {print $3)'
监控系统是运维的核心系统。我们不可能每次都靠人工上服务器去分析问题，所以好的
2.监控系统
口业务日志监控：很多PHP程序员不太习惯使用日志、也不太喜欢打日志、对监控问
口性能分析系统：上面都是各种总体的监控，一旦出现故障，排查还是无法准确定位，
口MySQL等的监控：PHP的性能严重依赖后端的性能，所以后端也要加强监控。
/usr/bin/curl
口
口
Web服务器的错误日志：Nginx到PHP的fastcgi_connect、read_timeout、send_timeout
口进程存活和端口：监控PHP进程是否存活，监控PHP的端口是否存活。
口
口业务日志：可以在业务代码中的关键处埋点，如果出现错误或特别耗时的操作超时了
口PHP访问处理时间：通过监控PHP的访问日志得到每个PHP请求的响应时间。
口错误日志的数量和比例：监控PHP 的错误日志和FPM的错误日志，还有慢日志。可
MySQL 可监控的项目非常多，具体请查阅MySQL的 show status 命令。
则打印日志，使得运维对日志做监控。
以通过数量得到错误率。通过日志内容进行双重监控。
PHP服务，为海量用户提供服务。
取的，需要运维和研发一起配合，做好日志和监控，只有这样才能打造出高性能的
题不够重视，容易犯以实现功能为唯一目标的错误。这些对大型互联网来说都是不可
警用邮件，告警用短信、IM、电话、定期出报告等。
合适的报警机制：根据阈值告警出来之后，可以通过各种渠道发送给运维和研发，预