conjunction of two events make cancellation hard. First, an in-
terfering symbol overlaps to a large extent with the symbol of
interest (𝑀𝑖𝑛(𝜏𝑖,𝑇𝑠 − 𝜏𝑖) is small). Second, the symbols’ chirp start
frequencies are very close. Thus, the combination of both close
time proximity Δ𝜏 and frequency proximity Δ𝑓 of an interfering
symbol adversely effects cancellation. For a symbol with start chirp
frequency 𝑓 1 We define Δ𝜏 and Δ𝑓 , from a symbol of frequency 𝑓
as,
Δ𝜏
Δ𝑓
=
=
𝑓 𝑜𝑟 𝐶𝑖
𝑓 𝑜𝑟 𝐶𝑖
𝑛𝑒𝑥𝑡
𝑝𝑟𝑒𝑣
𝜏𝑖
𝑇𝑠 − 𝜏𝑖
|𝑓 1 − 𝑓 𝑖
|𝑓 1 − 𝑓 𝑖
𝑝𝑟𝑒𝑣|
𝑛𝑒𝑥𝑡|
𝑓 𝑜𝑟 𝐶𝑖
𝑓 𝑜𝑟 𝐶𝑖
𝑝𝑟𝑒𝑣
𝑛𝑒𝑥𝑡
(13)
(14)
The extent of cancellation for CIC can be analytically computed,
however, we avoid presenting it due to lack of space. Figure 17
depicts the extent to which CIC can cancel a particular symbol as a
function of Δ𝜏 and Δ𝑓 for 𝑆𝐹 = 8. As seen from Figure 17, while
Δ𝑓
the cancellation can be as high as 20dB when Δ𝜏
𝐵 = 0.5, there
is almost no cancellation when both these values are close to 0. The
cancellation increases to 5dB by the time these values reach 0.1.
𝑇𝑠 =
509
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
M. Osama, M. Phillipose, K. Chintalapudi, S. Banerjee, B. Krishnaswamy
These peak heights are also maintained in a similar manner as CFOs.
6 IMPLEMENTATION
CIC is implemented at the LoRa gateways and does not require
any changes to the COTS LoRa sensor devices. We envision CIC
as either being co-located with a Software Defined Radio-based
gateway at the edge or as a virtual gateway in the cloud in case of
a C-RAN [18] architecture. In general, a LoRa receiver comprises
three separable parts – a radio front end, a demodulator, and a
decoder as depicted in Figure 21. The radio front end receives radio
waves and converts them into raw digital baseband samples. The
demodulator is responsible for preamble detection and converting
the raw samples into LoRa symbols. Finally, the decoder maps
the obtained LoRa symbols to bits based on the LoRa standard
specification for deinterleaving, Forward Error Correction(FEC),
and Cyclic Redundancy Check(CRC).
The Radio Front End. We used USRP B200 [19] as our radio front
end at 2MHz bandwidth. Typically the received signal is oversam-
pled i.e the sampling rate employed is significantly higher than the
required Nyquist rate (4-10×) to allow better averaging. Since our
COTS devices were configured at 250 KHz bandwidth, we have an
oversampling of 8×. The received samples are then input to the
demodulator.
Need for Distinct Demodulator and Decoder Modules. CIC re-
places the standard LoRa demodulator for preamble detection and
converting samples to symbols. Since standard LoRa demodulators
expect to receive only one packet at a time, the demodulator and
decoder are usually integrated into a single implementation. Unlike
standard LoRa, CIC however, can process concurrent transmissions
and thus, generate multiple streams of symbols, one for each packet
simultaneously. This means that multiple decoders might be needed
to concurrently process the output of a single sample stream. Con-
sequently, we provide separate implementations for a demodulator
and a decoder.
Demodulator. We have implemented CIC demodulator in three
different environments – Matlab, GNU Radio [20] and Python. Mat-
lab is often the first choice for a large number of communication
researchers as it allows quick trials, modifications, simulations, and
experimentation to gain experience. For experimental deployments
and trials, GNU Radio is a popular choice, as it allows for quick
configuration of the receiver through a GUI. We have implemented
CIC demodulator as a GNU Radio block. Finally, our python im-
plementation is useful for practical deployments in the cloud as a
C-RAN module or at the gateway edge. We also provide data sets
collected in our experiments for testing and verification.
Decoder. Since the decoder needs to be LoRa compliant, we modi-
fied rppo/gr-lora [21], a popular, open-source GNURadio block for
LoRa reception. Since demodulation and decoding are integrated
in rpp0, we extracted the decoder C++ code and created a separate
GNU Radio module for the decoder that takes symbols as input,
and outputs bits. This allows researchers to mix and match de-
coders with different demodulators and decode multiple packets
concurrently.
LoRa Devices.We used the commercially available LoRa transmit-
ters – Adafruit Feather M0 with RFM 95 [22]. These devices allow
Fig 18: SED Illustration
symbols with fractional-CFO-error more than 𝐵
4∗𝑆𝐹 . We use a size
16× FFT instead of 256× FFT since we find that is more computa-
tionally efficient without sacrificing on performance. Similarly, we
also filter symbols whose received power deviates by more than 3dB
from the estimated value in the preamble. In our evaluations, we
examine the improvements due to each of these features compared
to basic CIC.
5.8 Down-Chirp Based Preamble Detection
As described in Section 3, preamble detection in LoRa exploits its
repetitive structure and searches for a sequence of 8 consecutive
𝐶0 symbols. A key challenge in employing this scheme in the event
of collisions, arises from the fact that all data symbols, as well as
SYNC symbols in LoRa are merely frequency shifted versions of
𝐶0. Consequently, data symbols from ongoing concurrent transmis-
sions interfere with preambles, creating a clutter of peaks resulting
in preamble detection errors. To provide an insight into this clutter,
Figure 19 depicts the clutter of peaks during preamble detection of
a new packet due to ongoing concurrent transmissions.
In our implementation, we take a different approach of searching
for the two down-chirps in the preamble instead. The key insight
that drives this choice, is that down-chirps do not correlate with 𝐶0
and consequently do not correlate with data symbols in ongoing
concurrent transmissions. Thus, to detect preambles we correlate
with the down-chirp 𝐶∗
0 instead and look for two consecutive peaks.
Figure 20 depicts the peaks as detected by using down-chirps. Com-
paring Figures 19 and 20, using down-chirps significantly clears
the clutter of peaks. Having found the two down-chirps, to confirm
the preamble, we detect a preceding sequence of 8 𝐶0s and two
SYNC words by employing an up-chirp as with standard preamble
detection. This approach besides improving preamble detection
compared to existing methods, also reduces the computational com-
plexity of considering all peaks arising out of data symbols from
ongoing interfering transmissions.
Estimation of CFO and Received Power. As discussed in Sec-
tion 5.7, performance of CIC improves by using CFO and received
power to filter partially cancelled symbols. In order to enable this,
for each detected preamble, we estimate CFO (as in Choir [14])
by averaging over all the preamble up-chirp symbols for a robust
estimate and maintain a list of CFOs for all ongoing transmissions.
Similarly, we also estimate the FFT peak height for each preamble
up-chirp symbol and average across them for a robust estimate.
510
CIC : Decoding Multi-Packet Collisions in LoRa
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Fig 19: Upchirp based preamble detection
Fig 20: DownChirp based preamble detection
provide the best benefit to state of the art, we deployed 20 LoRa
nodes within a large laboratory (Fig. 22,Fig. 26). The received SNR
from the devices was approximately 30-40dB as seen in Fig. 27 and
they were all in Line of Sight.
D2: Small Floor Space - High SNR, NLoS Next we evaluate CIC
across the floor of an indoor space (Fig. 23). The nodes were stuck 6
feet high on the walls, some inside rooms and others outside. Here
the received SNR was also between 30-40dB (Fig. 27), however many
of the devices did not enjoy a direct line of sight to the gateway.
D3: Large Floor Space - Low SNR, NLoS
While many state of the art techniques flounder
in low SNR scenarios, CIC continues to perform
well. In this deployment we chose a large floor
space (Fig. 24). There was significant variation
in received SNRs across the various devices
ranging between 5dB to 30dB (Fig. 27) and most
devices had no line of sight. This deployment is
representative of a realistic large scale indoor
deployment.
D4: Outdoor Wide Area Deployment - Sub-
Noise, NLoS In order to test the performance
of CIC in a practical wide area outdoor scenario,
motivated by the smart street lighting applica-
tion, we deployed our LoRa devices on street
lights over an area of 2 Sq. Km in an urban environment, as depicted
in Fig. 25. Most of our packet receptions in this deployment were
below the noise floor and signal strength fluctuations were common
as pedestrians and traffic passed by (Fig. 27). Consequently, CIC
was tested to its utmost in this deployment.
Traffic Generation and Experimental Methodology. IoT traf-
fic is generated in response to unpredictable random physical events
e.g. cars arriving at a parking lot often modeled as Poisson [24,25]
arrivals. Consequently, in our experiments, devices were config-
ured to generate packets with exponentially distributed intervals.
Each sensor node generates an exponentially distributed random
variable Δ𝑇 ( 𝑝𝑑 𝑓 (Δ𝑇) = 𝜇𝑒−𝜇Δ𝑇 ) to determine the time interval
for transmitting the next packet. In order to generate Poisson traffic
in the network with an aggregate rate of 𝑅 packets/second, we
choose 𝜆 = 𝑅
20 since we had 20 nodes in each of our deployments.
To record the actual number of packets transmitted, we recorded
the transmissions at each node. Finally, the number of correctly
received packets (based on all bits being correct) measures the
network throughput.
26:
Fig
Nodes
in
Indoor De-
ployments
Fig 21: Our Implementation
LoRa as well as state of the art techniques?
us to configure various transmission parameters such as Spreading
Factor (SF), Bandwidth (BW), Coding Rate using Arduino Library
RadioHead [23].
7 EVALUATION
In this section we evaluate and demonstrate the efficacy of CIC. We
answer the following questions.
• How does CIC improve network capacity compared to standard
• How does CIC perform in various deployments including in-
• How does employing down-chirp based preamble detection
improve packet detection over conventional preamble detection
techniques?
• How do various additional discriminating features such as CFO,
• How does temporal proximity of packet collisions effect CIC’s
door/outdoor, low/high noise, and Los/NLoS scenarios?
and Received Power improve CIC performance?
ability to cancel inteference?
7.1 Deployments and Experimental Setup
To test CIC under varying conditions such as high/low SNR, in-
door/outdoor, LoS/NLoS, we evaluated CIC in four different test
deployments as described below. Each deployment comprised 20
LoRa devices (depicted as circles) and a gateway (depicted as a
triangle).
D1: Small Indoor Space - High SNR, LoS All state of the art
techniques perform their best in High SNR and LoS scenarios. To
511
012345678910Samples10400.10.20.30.40.50.60.70.80.91Correlation Amp.Correlation with single Upchirp01234567Samples10400.10.20.30.40.50.60.70.80.91Correlation Amp.Correlation with single DownchirpSIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
M. Osama, M. Phillipose, K. Chintalapudi, S. Banerjee, B. Krishnaswamy
Fig 22: Indoor LOS
Fig 23: Indoor NLOS(small)
Fig 24: Indoor NLOS(larger)
Fig 25: Outdoor
Each device is configured to transmit packet with 28 bytes of a
randomly generated data packet at SF=8, BW=250KHz, 4/5 coding
rate, lasting a duration of 45ms. These choices are anecdotally, the
most popular in LoRa deployments. Thus, a single device could
transmit a maximum of 22 packets each second back-to-back. We
increased the aggregate rate 𝑅 from 5 Pkts/sec to 100 Pkts/sec by
changing 𝜆 from 0.25 Pkts/sec to 5 Pkts/sec to measure network
capacity in each experiment. A USRP B200 was used to collect
received samples at 2 MHz sampling rate providing us 8× oversam-
pling. In each deployment, packets were transmitted at each rate
for a duration of 1 minute. Thus, at the highest rate of 100 Pks/sec
a total of 6000 packets were transmitted, while at the lowest rate of
5 packets/sec, 300 were transmitted.
Comparison with State of the art. We compared the perfor-
mance of CIC with standard LoRa as a baseline, and two popular
state of the art in research – Choir [14] and FTrack [12]. Choir is
probably the first significant effort towards multi-packet collision
decoding in LoRa. To the best of our knowledge, FTrack has the
best performance of all existing literature. We thank the authors of
FTrack for providing us their implementation and supporting us.
We implemented Choir based on the description in the paper.
7.2 Network Throughput
Figs. 28, 29, 30, 31 depict the number of successfully received pack-
ets per second as the aggregate network traffic increases from 5
Pkts/sec to 100 Pks/sec. Note that since each packet lasts 45ms in
our deployment allowing for a maximum of 22 Pkts/sec, if a single
node were transmitting back-to-back, the maximum rate of 100
Pkts/sec is 5× greater than what any single node could transmit.
D1 : High SNR, LoS. This scenario gives the best benefit of doubt to
all schemes and establishes the limits of their performance. As seen