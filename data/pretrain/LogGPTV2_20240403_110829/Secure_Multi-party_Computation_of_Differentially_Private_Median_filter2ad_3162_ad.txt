weight computation and selection are the main challenges
for our secure exponential mechanism. Straightforward selec-
tion over all universe elements is linear in the size of U. To
achieve a running time sublinear in the size of U we selects
subranges instead: Algorithm 1 selects one of k subranges
based on their median utility. The selected subrange is recur-
Algorithm 1 Algorithm EM∗.
Input: Number of subranges k, size n of combined data D, num-
ber of selection steps s ∈ [1,(cid:100)logk |U|(cid:101)], and (ε1, . . . ,εs). Data
universe U is known to all parties.
if ε j = ln(2)/2d for some integer d then
Output: Differentially private median of D.
1: rl,ru ← 0,|U|
2: for j ← 1 to s do
r# ← max{1,(cid:98) ru−rl
k (cid:99)}
3:
k ← min{k,ru − rl}
4:
5: Deﬁne array W of size k
6:
7:
8:
9:
10:
11:
12:
13:
14: end for
15: return Uniform random element in [U[rl],U[ru])
(cid:104)W(cid:105)FL ← Weightsln(2)/2d
(rl,ru,r#,k,n,d) //Alg. 3
else
(cid:104)W(cid:105)FL ← Weights∗(rl,ru,r#,k,n,ε j) //Algorithm 4
end if
i ← Select((cid:104)W(cid:105)FL) //Algorithm 2
rl ← rl + (i− 1)· r#
ru ← rl + r# if i  1: ri−1
u = ri
4.3 Weightsln(2)/2d
Next, we generalize the weight computation to support ε =
ln(2)/2d for integers d ≥ 1. To illustrate our approach, we
implement Weightsln(2)/2d in Algorithm 3 for d = 1, and de-
scribe the approach for any integer d: Recall, our goal is to
compute the weight exp(εu) with efﬁcient MPC protocols.
As we can efﬁciently compute 2εu if εu is an integer, we ap-
proximate the weight by truncating εu to an integer before
exponentiation with base 2. To avoid a loss of precision we
correct this approximation with a multiplicative term based
on the truncated remainder. More formally, with ε as above
Algorithm 3 Algorithm Weightsln(2)/2d .
Input: Range [rl,ru), subrange size r#, number k of subranges, data
size n, and parameter d ∈ {0,1}. Subrange ranks rankDp (·) are
input by each party p ∈ {1, . . . ,m}.
for j ← 1 to k do //Divide range into k subranges
il ← rl + ( j− 1)· r#
(cid:104)R[ j](cid:105) ← IntAdd((cid:104)R[ j](cid:105),(cid:104)rankDp (U[il])(cid:105))
end for
(cid:104)R[k + 1](cid:105) ← IntAdd((cid:104)R[k + 1](cid:105),(cid:104)rankDp (U[ru])(cid:105))
Output: List of weights.
1: Deﬁne arrays R of size k + 1, W of size k; initialize R with zeros
2: for p ← 1 to m do //Get input from each party
3:
4:
5:
6:
7:
8: end for
9: for j ← 1 to k do
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
end if
24:
25: end for
26: return (cid:104)W(cid:105)FL
(cid:104)uu(cid:105) ← IntSub((cid:104)R[ j + 1](cid:105),(cid:104) n
2(cid:105))
(cid:104)ul(cid:105) ← IntSub((cid:104) n
2(cid:105),(cid:104)R[ j](cid:105))
(cid:104)cu(cid:105) ← IntLT((cid:104)R[ j + 1](cid:105),(cid:104) n
2(cid:105))
(cid:104)cl(cid:105) ← IntLT((cid:104) n
2(cid:105),(cid:104)R[ j](cid:105))
(cid:104)t(cid:105) ← IntChoose((cid:104)uu(cid:105),(cid:104)0(cid:105),(cid:104)cu(cid:105))
(cid:104)u(cid:105) ← IntChoose((cid:104)ul(cid:105),(cid:104)t(cid:105),(cid:104)cl(cid:105))
if d = 0 then
(cid:104)W [ j](cid:105)FL ← ((cid:104)2(cid:105),(cid:104)u(cid:105),(cid:104)0(cid:105),(cid:104)0(cid:105)) //float (cid:104)2u(cid:105)
(cid:104)t(cid:105) ← IntTrunc((cid:104)u(cid:105),d)
(cid:104)e(cid:105)FL ← ((cid:104)2(cid:105),(cid:104)t(cid:105),(cid:104)0(cid:105),(cid:104)0(cid:105))
(cid:104)c(cid:105) ← IntMod2m((cid:104)u(cid:105),d)
(cid:104)s(cid:105)FL ← FLChoose((cid:104)1(cid:105)FL,(cid:104)√
(cid:104)W [ j](cid:105)FL ← FLMul((cid:104)e(cid:105)FL,(cid:104)s(cid:105)FL)
2(cid:105)FL,(cid:104)c(cid:105))
else
the weight for u is
2u/2d
= 2(cid:98)u/2d(cid:99) · 2(u mod 2d )/2d
.
First, we compute 2(cid:98)u/2d(cid:99) (lines 19–21 in Algorithm 4).
Then, we multiply this with one of 2d constants of the form
2(u mod 2d )/2d . E.g., for d = 1, we either use 1, if u is even,
√
2 otherwise (line 22). The constants themselves are not
or
secret and can be pre-computed. Which constant was selected,
leaks the last d bits from u, thus, we choose them securely.
4.4 Weights∗
We implement Weights∗ in Algorithm 4. To allow arbitrary
values for ε we avoid costly secure exponentiation for weight
computation altogether: Utility u, decomposable w.r.t. u(cid:48), al-
lows for efﬁcient combination of local weights for Di, input
by the parties, into global weights for D via multiplication (as
described in Section 3.2).
4.5 Running Time Complexity Analysis
We analyse the running time of EM∗ w.r.t. MPC protocols
from Table 2 (omitting non-interactive addition/subtraction),
USENIX Association
29th USENIX Security Symposium    2155
Algorithm 4 Algorithm Weights∗.
Input: Range [rl,ru), subrange size r#, number k of subranges, data
size n, and ε. Subrange weights eε(·) are input by each party
p ∈ {1, . . . ,m}.
Output: List of weights.
1: Deﬁne arrays W l, W u, W of size k; initialize W l, W u with ones
2: for p ← 1 to m do //Get input from each party
3:
4:
5:
for j ← 1 to k do //Divide range into k subranges
il ← rl + ( j− 1)· r#
(cid:16) |Dp|
(cid:17)
iu ← ru if j = k else rl + j· r#
(cid:16)
2 |(cid:17)
2 −rankDp (U[il ])
(cid:104)W l[ j](cid:105)FL ← FLMul((cid:104)W l[ j](cid:105)FL,(cid:104)eε
rankDp (U[iu])− |Dp|
(cid:104)W u[ j](cid:105)FL ← FLMul((cid:104)W u[ j](cid:105)FL,(cid:104)eε
(cid:105)FL)
(cid:105)FL)
(cid:104)cu(cid:105) ← FLLT((cid:104)W u[ j](cid:105)FL,(cid:104)1(cid:105)FL)
(cid:104)cl(cid:105) ← FLLT((cid:104)W l[ j](cid:105)FL,(cid:104)1(cid:105)FL)
(cid:104)t(cid:105)FL ← FLChoose((cid:104)W u[ j](cid:105)FL,(cid:104)1(cid:105)FL,(cid:104)cu(cid:105))
(cid:104)W [ j](cid:105)FL ← FLChoose((cid:104)W l[ j](cid:105)FL,(cid:104)t(cid:105)FL,(cid:104)cl(cid:105))
6:
end for
7:
8:
9: end for
10: for j ← 1 to k do
11:
12:
13:
14:
15: end for
16: return (cid:104)W(cid:105)FL
and their complexity is given in Appendix C. We measure the
running time of our implementation in Section 5.
Theorem 4. EM∗ with Weightsln(2) or Weightsln(2)/2d re-
quires O(k(cid:100)logk |U|(cid:101)) MPC protocol calls, with Weights∗ we
require O(mk(cid:100)logk |U|(cid:101)). Note that complexity of these MPC
protocols is at most O(lv loglv + lx) for bit-lengths lv, lx (Ap-
pendix C).
Proof. EM∗ invokes the weight computation and Select at
most (cid:100)logk |U|(cid:101) times. An invocation of Weightsln(2) or
Weightsln(2)/2d performs k truncations IntTrunc, 2k com-
parisons IntLT and 2k selections IntChoose. Additionally,
Weightsln(2)/2d also requires one truncation IntTrunc, mod-
ulo IntMod2m, ﬂoat selection FLChoose and ﬂoat multiplica-
tion FLMul. Weight computation via Weights∗ requires 2km
ﬂoat multiplications FLMul, 2k ﬂoat comparisons FLLT and
2k ﬂoat selections FLChoose. Each invocation of Select re-
quires k − 1 ﬂoat additions FLAdd, only one random draw
IntRand, conversion Int2FL and ﬂoat multiplication FLMul.
Also, Select performs at most log2(k) comparisons FLLT and
share reconstruction steps during binary search.
4.6 Security
We consider the semi-honest model introduced by Goldre-
ich [36] where corrupted protocol participants do not deviate
from the protocol but gather everything created during the run
of the protocol. Our protocol consists of multiple subroutines
realized with MPC protocols listed in Table 2 (for details
and security proof references we refer to [6]). To analyze
the security of the entire protocol we rely on the well-known
composition theorem [36, Section 7.3.1]. Basically, MPC pro-
tocols using an ideal functionality (a subroutine provided by
a trusted third party) remain secure if the ideal functionality
is replaced with an MPC protocol implementing the same
functionality. We implement such ideal functionality with the
maliciously secure SCALE-MAMBA framework [6] (which
was faster than its semi-honest fork in a WAN, as detailed in
Appendix E). Our protocol performs multiple subrange selec-
tions and each selection round is maliciously secure. Overall,
we only provide semi-honest security as malicious adversaries
can deviate from inputs provided in previous rounds. We later
show how to extend our protocol to malicious adversaries, but
ﬁrst we proof semi-honest security for EM∗:
Theorem 5. Protocol EM∗ realizes FEM∗ in the presence of
semi-honest adversaries.
Proof. To prove semi-honest security we show the existence
of a simulator Sim according to Goldreich [36] such that
the distributions of the protocol transcript EM∗ is compu-
tationally indistinguishable from simulated transcript using