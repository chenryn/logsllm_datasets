2022/3/28 10:36
PHP ﬁlter_var 恶作剧 :: pwning.systems
https://pwning.systems/posts/php_ﬁlter_var_shenanigans/
1/7
222326  乔迪·佐默
很可能我们都⻅过可以防⽌我们遇到漏洞的 PHP 过滤器。在这篇博⽂中，我将通过在过滤器本
身中查找错误以找到错误来引导您完成绕过过滤器的思考过程！
假设我们有以下代码，它将⼀些⽤户输⼊传递给 filter_var() 并使⽤
FILTER_VALIDATE_DOMAIN or FILTER FLAG HOSTNAME 标志。这增加了根据每个主机原理
验证主机名的功能（这意味着它们必须以字⺟数字字符开头，并且在整个⻓度中必须仅包含字⺟
数字或连字符）。成功完成此检查后，⽤户输⼊将在系统命令中使⽤（因此可能会引⼊命令注⼊
漏洞）。⽣成的代码将类似于以下内容。
通常，在这种情况下不可能触发此命令注⼊。因为我们⽤户的输⼊只能包含字⺟数字字符或连字
符，所以在这种情况下是完全安全的。
然⽽，底层代码很容易受到攻击，当我们详细检查它以了解 FILTER_VALIDATE_DOMAIN 函数
如何与 FILTER_FLAG_HOSTNAME 标志⼀起⼯作时，我们将看到这⼀点。让我们来看看它是如
何⼯作的！
PHP filter_var 恶作剧
# PHP   # filter_var   #绕过 
2022/3/28 10:36
PHP ﬁlter_var 恶作剧 :: pwning.systems
https://pwning.systems/posts/php_ﬁlter_var_shenanigans/
2/7
⼀旦我们 filter_var() ⽤ FILTER_VALIDATE_DOMAIN 标志调⽤，函数
php_filter_validate_domain() 就会被执⾏。让我们仔细看看这意味着什么。
本质上，它的作⽤是获取指向 $userinput 变量值的指针并将其作为第⼀个参数
_php_filter_validate_domain 传递给 ，并将 的输出 strlen($userinput)  作为第⼆
个参数传递给同⼀个函数。需要注意的是， strlen() 在这种情况下，该函数返回⼀个⽆符号
整数。
现在让我们看⼀下 _php_filter_validate_domain .
在这种情况下，该函数的第⼆个参数是 int len ，这表明它是⼀个有符号整数，⽽我们将 的
输出作为第⼆个参数传递给 strlen 它，这表明它是⼀个⽆符号整数  size_t 。你看到
我要去哪⾥了吗？
为了理解这⼀点，我们必须⾸先了解整数是如何起作⽤的。对于数值变量，它们可以是有符号的
也可以是⽆符号的，这取决于它们表示正数和负数的能⼒。有符号变量和⽆符号变量的区别在
于，有符号变量既可以表示正数也可以表示负数，⽽⽆符号变量只能表示⾮负数。
例如，如果我们假设体系结构是 32 位，那么由于它是⽆符号的，⽆符号整数的值的范围可以
从 0 to 4294967295 到，但由于它是有符号的，int 的值只能在从 -2147483648 to的范
围内 2147483648 。结果是任何⼤于的值 2147483647 都会导致传递给函数的负数。
但是，如果我们检查该 _php_filter_validate_domain 函数，我们会注意到该变量 l 的类
型为 size_t ，并且该值 len 已分配给该变量。
void php_filter_validate_domain(PHP_INPUT_FILTER_PARAM_DECL) /* {{{ */ 
{ 
 if (!_php_filter_validate_domain(Z_STRVAL_P(value), Z_STRLEN_P(value
 RETURN_VALIDATION_FAILED 
 } 
} 
/* }}} */ 
static  int  _php_filter_validate_domain(char * domain, int len, zend_l
2022/3/28 10:36
PHP ﬁlter_var 恶作剧 :: pwning.systems
https://pwning.systems/posts/php_ﬁlter_var_shenanigans/
3/7
该函数将 len 其作为 int （有符号），然后将其分配 l 给 size_t . 这在上⾯得到了证
明。如果我们传递⼀个⻓度很⻓的字符串，例如 4294967296 ，那么两者的值 len 和 l 将
是 0 's 因为将该值作为 int 传递将换⾏到 0 。这意味着start 将具有与end s 相
同的地址。 e
我们看到 if t end1 is .  then e 是⽤字符 写的 . ，就好像我们要向函数传递
⼀个⾮常⼤的数字⼀样。示例：如果我们有 4294967250 ，那么变量 l 将换成
18446744073709551570 ，这意味着我们可以编写 . 越界 OOB 成功的漏洞利⽤将⾮常困
难。结果，我决定不⾛这条路。之后，我们可以看到它被检查是否 l ⼤于 253（如果我们
可以强制它变为 0 ，这不是问题，对吧？）。
static int _php_filter_validate_domain(char * domain, int len, zend_lon
{ 
 char *e, *s, *t; 
 size_t l; 
 int hostname = flags & FILTER_FLAG_HOSTNAME; 
 unsigned char i = 1; 
 s = domain; 
 l = len;  
 e = domain + l; 
 t = e - 1; 
 /* Ignore trailing dot */ 
 if (*t == '.') { 
  e = t; 
  l--; 
 } 
 /* The total length cannot exceed 253 characters (final dot not incl
 if (l > 253) { 
  return 0; 
 } 
2022/3/28 10:36
PHP ﬁlter_var 恶作剧 :: pwning.systems
https://pwning.systems/posts/php_ﬁlter_var_shenanigans/
4/7
上⾯显示的代码是检查主机名是否仅包含字⺟数字字符或连字符（⽽不是其他字符）的实际代
码。正如我们所看到的，这只发⽣在 s ⼩于 e 最初的情况下。
简单来说：如果使⽤ PHP 的 filter_var 函数检查主机名，并且传递给函数的值太⻓，然后
将参数 l 包装为零，则不会执⾏检查。这会导致主机名检查被完全绕过。
让我们使⽤⼀个简单的 PoC 来演示这⼀点！
 /* First char must be alphanumeric */ 
 if(*s == '.' || (hostname && !isalnum((int)*(unsigned char *)s))) { 
  return 0; 
 } 
 while (s  63 || (hostname && *s != '-' && !isalnum((int)*(unsigned 
    return 0; 
   } 
   i++; 
  } 
  s++; 
 } 
 return 1; 
} 
2022/3/28 10:36
PHP ﬁlter_var 恶作剧 :: pwning.systems
https://pwning.systems/posts/php_ﬁlter_var_shenanigans/
5/7
因此，如果我们将以下⽤户输⼊传递给程序，我们将能够以第⼀个示例中描述的⽅式实现代码执
⾏。
胜利！这次我们能够绕过过滤器并获得易受攻击的代码。
因为 PHP 安全团队还没有修复这个问题，所以我在下⾯附上了我⾃⼰的单⾏补丁，你可以使⽤
命令申请 git am $patchfile 。
From 9c064e66226c9da5b9c0170342ba516055a31be5 Mon Sep 17 00:00:00 2001
From: Jordy Zomer 
Date: Fri, 25 Mar 2022 18:03:34 +0100 
Subject: [PATCH] Fix integer conversion that results in filter bypass.
$userinput = "5;id;"  .  str_repeat("a",  4294967286)  .  "a.com"; 
注意：由于 PHP 安全团队缺乏回应，我决定公开此漏洞。特别是因为尽管有很多请求，我
还没有收到任何更新。由于漏洞可以很容易地被利⽤，我相信社区有权了解它。
>
2022/3/28 10:36
PHP ﬁlter_var 恶作剧 :: pwning.systems
https://pwning.systems/posts/php_ﬁlter_var_shenanigans/
6/7
Signed-off-by: Jordy Zomer  
--- 
 ext/filter/logical_filters.c | 2 +- 
 1 file changed, 1 insertion(+), 1 deletion(-) 
diff --git a/ext/filter/logical_filters.c b/ext/filter/logical_filters.c 
index 91bf929a9d..96a6c72b56 100644 
--- a/ext/filter/logical_filters.c 
+++ b/ext/filter/logical_filters.c 
@@ -504,7 +504,7 @@ void 
php_filter_validate_regexp(PHP_INPUT_FILTER_PARAM_DECL) /* {{{ */ 
        } 
 } 
-static int _php_filter_validate_domain(char * domain, int len, 
zend_long flags) /* {{{ */ 
+static int _php_filter_validate_domain(char * domain, size_t len, 
zend_long flags) /* {{{ */ 
 { 
        char *e, *s, *t; 
        size_t l; 
-- 
2.32.0 
此漏洞利⽤存在⼀些限制，例如，⽤户输⼊的⼤⼩必须为 4GB（这是⼤量数据，可能由于某些
Web 服务器和负载平衡器的配置⽽⽆法实现）。
和往常⼀样，我希望你觉得这篇⽂章很有趣。任何和所有的反馈都表示赞赏:
⼲杯，
乔迪
乔迪·佐默
 panr制作的主题
2022/3/28 10:36
PHP ﬁlter_var 恶作剧 :: pwning.systems
https://pwning.systems/posts/php_ﬁlter_var_shenanigans/
7/7