Over the past few decades, there has been extensive re-
search in this area. We divided existing countermeasures
against buffer overﬂows into seven categories: (1) buffer
bounds checking [60, 20, 4, 27, 38, 47, 2, 17, 56, 5], (2) ca-
nary checking [14, 26, 45], (3) return address shadow stack
or stack split [53, 12, 43, 22, 64], (4) non-executable mem-
ory [55, 51], (5) non-accessible memory [24, 59, 21], (6)
randomization and obfuscation [9, 55, 13, 7], and (7) exe-
cution monitoring [31, 1, 11, 15, 48]. Few countermeasures
are suitable for high performance kernel heap buffer over-
ﬂow monitoring and no one has been deployed in produc-
tion systems.
Kruiser falls into the category of canary checking. Ca-
nary was ﬁrstly proposed in StackGuard [14], which tack-
les stack-smashing attacks by putting a canary word before
the return address on stack. A buffer overﬂow that over-
writes the return address would corrupt the canary value
ﬁrst. The approach has been integrated into GCC and Vi-
sual Studio. Robertson et al. [45] applied canary to pro-
tecting heap buffers. When a heap buffer is overrun, the
canary of the adjacent chunk is corrupted, which, however,
is not detected until the adjacent chunk is coalesced, allo-
cated, or deallocated; i.e., the detection relies on the control
ﬂow. Our approach enforces a constant concurrent canary
checking and thus does not have the limitation. In addition,
the secure canary conception is innovative.
The previous work Cruiser [65], among the existing
countermeasures, ﬁrst proposed concurrent buffer overﬂow
cruising in user space using custom lock-free data struc-
tures. Unlike Cruiser that hooks per heap buffer allocation
and deallocation, Kruiser explores the characteristics of ker-
nel heap management to interpose the much less frequent
operations that switch pages into and out of the heap page
pool, such that our system relies on on a ﬁx-sized array data
structure instead of the lock-free data structures to maintain
the metadata. The monitoring algorithms are thus very dif-
ferent. In addition, the hybrid monitoring scheme differs a
lot from the user space monitoring.
Compared with the methods based on probabilistic
memory safety (e.g., DieHard [8] and DieHarder [40]),
Kruiser imposes negligible performance overhead. Nev-
ertheless, Kruiser focuses on kernel heap, while DieHard
and DieHarder have only been demonstrated for user-space
programs. Our previous work Cruiser [65] on user-space
buffer overﬂow monitoring presents detailed comparison
with DieHarder on performance for the SPEC CPU2006
benchmark. In addition, DieHard and DieHarder consume
more memory than Kruiser, which may be a problem for
kernel.
9.2 Virtual Machine Introspection
Garﬁnkel and Rosenblum [23] ﬁrst proposed the idea of
performing intrusion detection from outside of the moni-
tored system. Since then, out-of-VM introspection has been
applied to control-ﬂow integrity checking [42, 49], malware
prevention, detection, and analysis [32, 29, 18, 41, 33, 10,
44, 34, 25, 19], and attack replaying [30]. They monitor
static memory areas (e.g. kernel code, Interrupt Descrip-
tion Table), interpose speciﬁc events such as page faults,
trace system behaviors, or detect violations of invariants be-
tween data structures. Considering the volatile properties
of heap buffers, these approaches are infeasible for kernel
heap buffer overﬂow monitoring; for example, it is imprac-
tical to interpose every memory write on the heap. Some
approaches detected buffer overﬂow attacks as a side ef-
fect by detecting corrupted pointers or control ﬂows, but
cannot deal with non-pointer and non-control data manip-
ulation on heap buffer objects. Approaches, such as ker-
nel memory mapping and analysis, can be misled by buffer
overﬂow attacks or perform better without heap corrup-
tion. Our approach can be complementary to them provid-
ing lightweight heap buffer overﬂow detection.
In contrast to out-of-VM monitoring, SIM [50] puts the
monitor back into the VM and enables secure in-VM mon-
itoring by providing discriminative memory views for the
monitored system and the monitor. Our approach makes
use of this technique to protect the heap metadata, while
the monitor process still runs out-of-VM to achieve parallel
monitoring, leveraging the multiprocessor architecture. The
hybrid scheme enables a secure and efﬁcient monitoring.
OSck [25] also performs kernel space cruising for rootkit
detection. As OSck does not synchronize the running ker-
nel and the veriﬁcation process, it needs to suspend the sys-
tem when an anomaly is detected to avoid false positives,
while our approach does not need to stop the world for de-
tection. In addition, OSck does not check generic buffers
allocated using kmalloc, which are common attack targets,
while Kruiser checks the whole kernel heap.
10 Conclusion
We have presented KRUISER, a semi-synchronized con-
current kernel heap monitor that cruises over heap buffers
to detect overﬂows in a non-blocking manner. Unlike tra-
ditional techniques that monitor volatile memory regions
with security enforcement inlined into normal functional-
ity (interposition) or by analyzing memory snapshots, we
perform constant monitoring in parallel with the monitored
VM on its live memory without incurring false positives.
The hybrid VM monitoring scheme provides high efﬁciency
without sacriﬁcing the security guarantees. Attacks are
bound to be detected within one cruising cycle. Our eval-
uation has shown that Kruiser imposes negligible perfor-
mance overhead on the system running SPEC CPU2006
and 7.9% throughput reduction on Apache. The concur-
rent kernel cruising approach leverages increasingly pop-
ular multi-core architectures; its efﬁciency and scalability
manifest that it can be deployed in practice.
Acknowledgement
We would like to thank Xi Xiong for his valuable
comments during the system design and implementation,
and also thank our shepherd Xuxian Jiang as well as the
anonymous reviewers for their comments that helped shape
the ﬁnal version of this paper. This work was partially
supported by AFOSR FA9550-07-1-0527 (MURI), ARO
W911NF-09-1-0525 (MURI), NSF CNS-0905131, and
AFRL FA8750-08-C-0137. Donghai Tian was supported
by the China Scholarship Council (No. 2009603047).
References
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-
ﬂow integrity. In CCS ’05, pages 340–353.
[2] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy
bounds checking: an efﬁcient and backwards-compatible
defense against out-of-bounds errors.
In Usenix Security
’09, pages 51–66.
[3] P. Argyroudis and D. Glynos. Protecting the core: Kernel
exploitation mitigations. In Black Hat Europe ’11.
[6] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and
N. C. Skalsky. HyperSentry: enabling stealthy in-context
measurement of hypervisor integrity. In Proceedings of the
17th ACM conference on Computer and communications se-
curity, CCS ’10, pages 38–49, New York, NY, USA, 2010.
ACM.
[7] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic,
and D. D. Zovi. Randomized instruction set emulation to
disrupt binary code injection attacks.
In CCS ’03, pages
281–289.
[8] E. D. Berger and B. G. Zorn. DieHard: probabilistic mem-
ory safety for unsafe languages. In Proceedings of the 2006
ACM SIGPLAN conference on Programming language de-
sign and implementation, PLDI ’06, pages 158–168, New
York, NY, USA, 2006. ACM.
[4] T. M. Austin, S. E. Breach, and G. S. Sohi. Efﬁcient de-
tection of all pointer and array access errors. In PLDI ’04,
pages 290–301.
[5] K. Avijit and P. Gupta. Tied, libsafeplus, tools for runtime
In Usenix Security ’04, pages
buffer overﬂow protection.
4–4.
[9] E. Bhatkar, D. C. Duvarney, and R. Sekar. Address obfusca-
tion: an efﬁcient approach to combat a broad range of mem-
ory error exploits. In Usenix Security ’03, pages 105–120.
[10] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and
X. Jiang. Mapping kernel objects to enable systematic in-
tegrity checking. CCS ’09, pages 555–565.
[11] M. Castro, M. Costa, and T. Harris. Securing software by
enforcing data-ﬂow integrity. In OSDI ’06, pages 147–160.
[12] T. Chiueh and F. Hsu. RAD: A compile-time solution to
buffer overﬂow attacks. In ICDCS ’01, pages 409–417.
[13] C. Cowan and S. Beattie. PointGuard: protecting pointers
from buffer overﬂow vulnerabilities. In Usenix Security ’03,
pages 91–104.
[14] C. Cowan and C. Pu. StackGuard: automatic adaptive de-
tection and prevention of buffer-overﬂow attacks. In Usenix
Security ’98, pages 63–78, January 1998.
[15] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. David-
son, J. Knight, A. Nguyen-Tuong, and J. Hiser. N-variant
systems: a secretless framework for security through diver-
sity. In Usenix Security ’06, pages 105–120.
[16] M. Dalton, H. Kannan, and C. Kozyrakis. Real-world buffer
overﬂow protection for userspace & kernelspace. In Usenix
Security ’08, pages 395–410.
[17] E. D.Berger. HeapShield: Library-based heap overﬂow pro-
tection for free. Tech. report, Univ. of Mass. Amherst, 2006.
[18] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: mal-
ware analysis via hardware virtualization extensions. CCS
’08, pages 51–62.
[19] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee.
Virtuoso: Narrowing the semantic gap in virtual machine
introspection. Oakland ’11.
[20] N. Dor, M. Rodeh, and M. Sagiv. CSSV: towards a realis-
tic tool for statically detecting all buffer overﬂows in C. In
PLDI ’03, pages 155–167, June 2003.
[21] Electric
Malloc
http://directory.fsf.org/project/ElectricFence/.
Fence.
debugger.
[22] M. Frantzen and M. Shuey. StackGhost: Hardware facili-
tated stack protection. In Usenix Security ’01, pages 55–66.
[23] T. Garﬁnkel and M. Rosenblum. A virtual machine intro-
spection based architecture for intrusion detection. In NDSS
’03, pages 191–206.
[24] R. Hastings and B. Joyce. Purify: Fast detection of memory
leaks and access errors. In the Winter 1992 Usenix Confer-
ence, pages 125–136.
[25] O. S. Hofmann, A. M. Dunn, S. Kim, I. Roy, and E. Witchel.
Ensuring operating system kernel integrity with OSck. AS-
PLOS ’11, pages 279–290.
[26] IBM.
ProPolice
detector.
http://www.trl.ibm.com/projects/security/ssp/.
[27] T. Jim, J. G. Morrisett, D. Grossman, M. W. Hicks, J. Ch-
eney, and Y. Wang. Cyclone: A safe dialect of C. In Usenix
ATC ’02, pages 275–288, June 2002.
[28] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible
bounds checking for arrays and pointers in C programs. In
the International Workshop on Automatic Debugging, 1997.
[29] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-
Dusseau. Antfarm: tracking processes in a virtual machine
environment. Usenix ATC ’06.
[30] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detect-
ing past and present intrusions through vulnerability-speciﬁc
predicates. SOSP ’05, pages 91–104.
[31] V. Kiriansky, D. Bruening, and S. P. Amarasinghe. Secure
execution via program shepherding. In Usenix Security ’02,
pages 191–206.
[32] K. Kourai and S. Chiba. HyperSpector: virtual distributed
monitoring environments for secure intrusion detection.
VEE ’05, pages 197–207.
[33] A. Lanzi, M. I. Sharif, and W. Lee. K-Tracer: A system for
extracting kernel malware behavior. In NDSS ’09.
[34] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang. SigGraph:
Brute force scanning of kernel data structure instances using
graph-based signatures. NDSS ’11.
[35] T. Mandt.
Kernel
7,
dows
11/Mandt/BlackHat DC 2011 Mandt kernelpool-wp.pdf.
2011.
pool
on Win-
https://media.blackhat.com/bh-dc-
exploitation
[36] P. E. Mckenney. Memory barriers: a hardware view for soft-
ware hackers, 2009.
[37] D. Mosberger. Memory consistency models. Operating Sys-
tems Review, 17(1):18–26, January 1993.
[38] G. C. Necula, J. Condit, M. Harren, S. McPeak, and
W. Weimer. CCured: type-safe retroﬁtting of legacy soft-
ware. ACM Trans. Program. Lang. Syst., 27(3):477–526,
2005.
[39] NIST. National Vulnerability Database. http://nvd.nist.gov/.
[40] G. Novark and E. D. Berger. DieHarder: securing the heap.
In Proceedings of the 17th ACM conference on Computer
and communications security, CCS ’10, pages 573–584,
New York, NY, USA, 2010. ACM.
[41] B. D. Payne, M. Carbone, M. Sharif, and W. Lee. Lares:
An architecture for secure active monitoring using virtual-
ization. Oakland ’08, pages 233–247.
[42] N. L. Petroni, Jr. and M. Hicks. Automated detection of
persistent kernel control-ﬂow attacks. CCS ’07, pages 103–
115.
[43] M. Prasad and T. Chiueh. A binary rewriting defense against
In Usenix ATC ’03,
stack based buffer overﬂow attacks.
pages 211–224.
[44] J. Rhee, R. Riley, D. Xu, and X. Jiang. Kernel malware
analysis with un-tampered and temporal views of dynamic
kernel memory. RAID’10, pages 178–197.
[45] W. Robertson, C. Kruegel, D. Mutz, and F. Valeur. Run-
time detection of heap-based overﬂows. In LISA ’03, pages
51–60.
[46] D.
Roethlisberge.
Cardman
4040
2007.
http://www.securiteam.com/unixfocus/5CP0D0AKUA.html.
[47] O. Ruwase and M. S. Lam. A practical dynamic buffer over-
Omnikey
overﬂow,
buffer
Linux
driver
ﬂow detector. In NDSS ’04, pages 159–169.
[48] B. Salamat, T. Jackson, A. Gal, and M. Franz. Orchestra:
intrusion detection using parallel execution and monitoring
of program variants in user-space.
In EuroSys ’09, pages
33–46.
[49] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: a
tiny hypervisor to provide lifetime kernel code integrity for
commodity OSes. SOSP ’07, pages 335–350.
[50] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi. Secure in-VM
monitoring using hardware virtualization. CCS ’09, pages
477–487.
[51] Solar Designer.
Non-executable user
stack, 1997.
http://www.open wall.com/linux/.
[52] sqrkkyu and twzi. Attacking the core: Kernel exploiting
notes, 2007. http://phrack.org/issues.html.
[53] StackShield, 2000. http://www.angelﬁre.com/sk/stackshield/.
[54] C.
IPv6
2007.
mbuf
http://www.securityfocus.com/archive/1/462728/30/0/threaded.
OpenBSD
overﬂow,
buffer
S.
Technologies.
kernel
remote
[55] The PaX project. http://pax.grsecurity.net/.
[56] T. K. Tsai and N. Singh. Libsafe: Transparent system-
wide protection against buffer overﬂow attacks. In DSN ’02,
pages 541–541.
[57] US-CERT/NIST.
CVE-2008-1673.
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-
2008-1673.
[58] US-CERT/NIST.
CVE-2009-2407.
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-
2009-2407.
[59] Valgrind. http://valgrind.org/.
[60] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A ﬁrst
step towards automated detection of buffer overrun vulnera-
bilities. In NDSS’00, pages 3–17.
[61] J. Wang, A. Stavrou, and A. Ghosh. HyperCheck: a
hardware-assisted integrity monitor. In Proceedings of the
13th international conference on Recent advances in intru-
sion detection, RAID’10, pages 158–177, Berlin, Heidel-
berg, 2010. Springer-Verlag.
[62] Z. Wang and X. Jiang. HyperSafe: A lightweight approach
to provide lifetime hypervisor control-ﬂow integrity. In Pro-
ceedings of the 2010 IEEE Symposium on Security and Pri-
vacy, SP ’10, pages 380–395, Washington, DC, USA, 2010.
IEEE Computer Society.
[63] Wikipedia. RC4. http://en.wikipedia.org/wiki/RC4.
[64] J. Xu, Z. Kalbarczyk, S. Patel, and R. Iyer. Architecture
In
support for defending against buffer overﬂow attacks.
Workshop Evaluating & Architecting Sys. Depend., 2002.
[65] Q. Zeng, D. Wu, and P. Liu. Cruiser: Concurrent heap
buffer overﬂow monitoring using lock-free data structures.
In Proceedings of the 32nd ACM SIGPLAN conference on
Programming language design and implementation, PLDI
’11, pages 367–377, New York, NY, USA, 2011. ACM.