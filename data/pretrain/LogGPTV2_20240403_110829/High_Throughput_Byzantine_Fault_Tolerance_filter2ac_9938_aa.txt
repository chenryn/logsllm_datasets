title:High Throughput Byzantine Fault Tolerance
author:Ramakrishna Kotla and
Michael Dahlin
High Throughput Byzantine Fault Tolerance
Ramakrishna Kotla and Mike Dahlin
The University of Texas at Austin
(cid:0)kotla,dahlin(cid:1)@cs.utexas.edu
Abstract
This paper argues for a simple change to Byzantine Fault
Tolerant (BFT) state machine replication libraries. Tra-
ditional BFT state machine replication techniques pro-
vide high availability and security but fail to provide high
throughput. This limitation stems from the fundamen-
tal assumption of generalized state machine replication
techniques that all replicas execute requests sequen-
tially in the same total order to ensure consistency across
replicas. We propose a high throughput Byzantine fault tol-
erant architecture that uses application-speciﬁc infor-
mation to identify and concurrently execute indepen-
dent requests. Our architecture thus provides a gen-
eral way to exploit application parallelism in order to
provide high throughput without compromising correct-
ness. Although this approach is extremely simple, it yields
dramatic practical beneﬁts. When sufﬁcient applica-
tion concurrency and hardware resources exist, CBASE,
our system prototype, provides orders of magnitude im-
provements in throughput over BASE, a traditional BFT
architecture. CBASE-FS, a Byzantine fault tolerant ﬁle sys-
tem that uses CBASE, achieves twice the throughput of
BASE-FS for the IOZone micro-benchmarks even in a con-
ﬁguration with modest available hardware parallelism.
1. Introduction
With the growing prevalence of large-scale distributed
services and access-anywhere Internet services, there is in-
creasing need to build systems that provide high availabil-
ity to ensure uninterrupted service, high reliability to en-
sure correctness, high conﬁdentiality against malicious at-
tacks [1] to steal data, and high throughput [22] to keep pace
with high system load.
Recent work on Byzantine fault tolerant (BFT) state ma-
chine systems has demonstrated that generalized state ma-
chine replication can be used to improve availability and
reliability [8, 17, 19] as well conﬁdentiality [23]. Further-
more, this work suggests that the approach has important
practical beneﬁts in that it adds low overhead [8, 19, 23],
can recover proactively from faults [9], can make use of ex-
isting off-the-shelf implementations to improve availability
This work was supported, in part, by the Texas Advanced Technol-
ogy Program. Dahlin was also supported by an IBM University Part-
nership Award and by a Sloan Research Fellowship.
and to reduce replication cost [19], and can minimize repli-
cation of the application-speciﬁc parts of the system [23].
However, current BFT state machine systems can fail to
provide high throughput. They use generalized state ma-
chine replication techniques that require all non-faulty repli-
cas to execute all requests sequentially in the same order,
completing execution of each request before beginning ex-
ecution of the next one. This sequential execution of re-
quests can severely limit the throughput of systems de-
signed to achieve high throughput via concurrency [22]. Un-
fortunately, this concurrency-dependent approach lies at the
core of many (if not most) large-scale network services such
as ﬁle systems, web servers, mail servers, and databases.
Furthermore, technology trends generally make it easier for
hardware architectures to scale throughput by increasing
the number of hardware resources (e.g., processors, hard-
ware threads, or disks) rather than increasing the speed of
individual hardware elements. Although current BFT sys-
tems like PBFT [8] and BASE [19] implement optimiza-
tions such as request batching in order to amortize their
replication overheads due to agreement overheads, sequen-
tial execution of requests still imposes a fundamental limi-
tation on application-level concurrency.
In this paper, we argue for a simple addition to the ex-
isting BFT state machine replication architectures that al-
lows throughput of the system to scale with application par-
allelism and available hardware resources. Our architecture
separates agreement from execution [23] and inserts a gen-
eral parallelizer module between them. The parallelizer uses
application-supplied rules to identify and issue concurrent
requests that can be executed in parallel without compro-
mising the correctness of the replicated service. Hence, the
throughput of the replicated system scales with the paral-
lelism exposed by the application and with available hard-
ware resources. More broadly, in our architecture replicas
execute requests according to a partial order that allows for
concurrency as opposed to the total order enforced by tradi-
tional BFT architectures.
We demonstrate the beneﬁts of our architecture by
building and evaluating a prototype library for construct-
ing Byzantine fault-tolerant
replicated services called
CBASE (Concurrent BASE). CBASE extends the BASE
system [19] which uses the traditional BFT state machine
replication architecture. We use a set of micro-benchmarks
to stress test our system and ﬁnd that when sufﬁcient appli-
cation concurrency and hardware resources exist, CBASE
provides orders of magnitude improvements in through-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:03 UTC from IEEE Xplore.  Restrictions apply. 
put over the traditional BFT architecture. We also ﬁnd
that for applications or hardware conﬁgurations that can
not
take advantage of concurrency, CBASE adds lit-
tle overhead compared to the optimized BASE system.
As a case study, we implement CBASE-FS, a repli-
cated BFT ﬁle system,
to quantify the beneﬁts for a
real application. CBASE-FS achieves twice the through-
put of BASE-FS for the IOZone micro-benchmarks even
in a conﬁguration with modest available hardware paral-
lelism. When we artiﬁcially simulate more hardware re-
sources, CBASE’s maximum write throughput scales
by over an order of magnitude compared to the tradi-
tional BFT architecture.
The main contribution of this study is a case for chang-
ing the standard architecture for BFT state machine repli-
cation to include a parallelizer module that can expose po-
tentially concurrent requests to enable parallel execution.
Based on this study, we conclude that this idea is appealing
for two reasons. First, it is simple. It requires only a small
change to the existing standard BFT replication architec-
ture. Second, it can provide large practical beneﬁts. In par-
ticular, this simple change can improve the throughput of
some services by orders of magnitude, making it practical
to use BFT state machine replication for modern commer-
cial services that rely on concurrency for high throughput.
The main limitation of this approach is that safely exe-
cuting multiple requests in parallel fundamentally requires
application-speciﬁc knowledge of inter-request dependen-
cies. But, we do not believe this limitation undermines the
argument for adding a parallelizer model to BFT state ma-
chine replication libraries. In particular, our prototype paral-
lelizer implements a set of default rules that assume that all
requests depend on all other requests. Applications that are
satisﬁed with sequential execution can simply leave these
default rules in place, and applications that desire increased
throughput can override these rules to expose their concur-
rency to the replication library. Furthermore, designers of
such applications can take an iterative approach, ﬁrst de-
veloping simple rules that expose some application concur-
rency and later developing more sophisticated rules that ex-
pose more concurrency if required for performance.
The rest of this paper proceeds as follows. Sections 2
and 3 outline our system model and review the standard ar-
chitecture for existing BFT state machine replication sys-
tems. Then Section 4 describes our proposed architecture
and Section 5 describes our prototype replication library,
CBASE. Section 6 discusses our experimental evaluation,
Section 7 discusses related work, and Section 8 summarizes
our conclusions.
2. System Model
Our system model comprises a set of standard assump-
tions for Byzantine fault tolerant state machine replication.
REPLICAS
Execution
Agreement
Execution
Agreement
Execution
Agreement
Execution
Agreement
Fig. 1. Traditional BFT Architecture
Clients
For brevity, we just list them here. A more complete discus-
sion of these assumptions is available elsewhere [23]. We
assume an asynchronous distributed system where nodes
may operate at arbitrarily different speeds and where the
network may fail to deliver messages, delay them, corrupt
them, duplicate them, or deliver them out of order. The sys-
tem is safe under this asynchronous model, and it is live
under a bounded fair links [23] system model that does in-
clude a weak synchrony assumption that bounds worst-case
delivery time of a message that is sent inﬁnitely often.
We assume a Byzantine fault model where faulty nodes
can behave arbitrarily. They can crash, lose data, alter data,
and send incorrect protocol messages. We assume a strong
adversary who can coordinate faulty nodes in arbitrarily bad
ways to disrupt the service. We assume the adversary to be
computationally limited and that it cannot subvert crypto-
graphic techniques. We assume that at most f nodes can
fail out of n replicas.
3. Background: BFT systems
BFT state machine replication based systems provide
high availability and reliability [8, 19] and high security
[23] but fail to provide high throughput. There is a large
body of research [8, 14, 15, 17, 19, 23] on replication tech-
niques to implement highly-available systems that tolerate
failures. Instead of using a single server to implement a ser-
vice, these techniques replicate the server and use a dis-
tributed algorithm to coordinate the replicas. The replicated
system provides the abstraction of a single service to the
clients and continues to provide correct service even when
some of the replicas fail.
Figure 1 illustrates a typical BFT state machine repli-
cation architecture. Clients issue requests to the replicated
service. Conceptually, replicas consist of two stages, an
agreement stage and an execution stage. In reality, these
two stages may be either tightly integrated on a single ma-
chine [8, 19] or implemented on different machines [23].
The agreement stage runs a distributed agreement protocol
to agree on the order of client requests and the execution
stage executes all of the requests in the same order.
Each execution node maintains a state machine that im-
plements the desired service. A state machine consists of
a set of state variables that encode the machine’s state and
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:03 UTC from IEEE Xplore.  Restrictions apply. 
Execution
Execution
Execution
Execution
Parallelizer
Parallelizer
Parallelizer
Parallelizer
Agreement
Agreement
Agreement
Agreement
Clients
Fig. 2. High throughput BFT state machine replica-
tion architecture
a set of commands that transform its state. A state machine
takes one or more of the following actions to execute a com-
mand:
1. Read a subset of the state variables, called the read-set R.
2. Modify a subset of the state variables, called the write-set
W.
3. Produce some output O to the environment.
A command is non-deterministic if its write-set values or
output are not uniquely determined by its input and read-
set values; otherwise it is deterministic. A state machine is
called a deterministic state machine if all commands are de-
terministic. For safety, all non-faulty replicas starting from
the same state should produce the same set of outputs and
reach the same ﬁnal state after executing the same set of
requests from clients. The following requirements [20] en-
sures safety of a replicated system:
Schnieder’s classical technique [20] for constructing de-
terministic replicated state machines ensure safety by en-
forcing : (1) Agreement – every non-faulty state machine
replica receives every request and (2) Order – every non-
faulty state machine replica processes the requests it re-
ceives in the same relative order.
Although this approach can provide high availability and
reliability, it can fail to provide high throughput because the
Order requirement does not allow replicas to execute re-
quests concurrently. In particular, unless strong assumptions
are made about the state machine’s internal implementation,
execution nodes must ﬁnish executing request i before exe-
cuting request i  1. Otherwise, concurrency within a state
machine could introduce non-determinism into the system,
which could cause different replicas’ state to diverge.
4. High Throughput BFT State Machine
Replication
Figure 2 illustrates our high throughput state machine
replication architecture, where we maintain the separation
between the agreement and execution stages and introduce
a parallelizer between them. The parallelizer takes a totally
ordered set of requests from the agreement stage and uses
application-supplied rules to ﬁrst identify independent re-
quests and then issue them concurrently to the execution
stage. A thread pool in the execution stage can then exe-
cute the requests in parallel to improve system throughput.
4.1. Relaxed Order and Parallelizer
The key idea of high throughput state machine repli-
cation is to relax Schneider’s Order [20] requirement on
state machine replication (deﬁned above) to allow concur-
rent execution of independent requests without compromis-
ing safety.
We say that two requests are dependent if the write-set of
one has at least one state variable in common with the read-
set or write-set of the other. More formally, we deﬁne de-
pendence as follows: Request ri, with read-set Ri and write-
set Wi and request r j, with read-set is R j and write-set W j,
are dependent requests if any of the following conditions is
true (1) Wi (cid:0) W j (cid:1)(cid:1) φ, (2) Wi (cid:0) R j (cid:1)(cid:1) φ, or (3) Ri (cid:0) W j (cid:1)(cid:1) φ.
We also deﬁne dependence to be transitive: if ri and r j are
dependent and r j and rk are dependent, then ri and rk are de-
pendent. Two requests ri and r j are said to be concurrent if
they are not dependent.
Given this notion of dependence, we reﬁne Schneider’s
Order requirement for replicated state machine safety into
a Relaxed Order: every non-faulty state machine replica
processes any pair of dependent requests it receives sequen-
tially and in the same relative order.
Notice that under the Relaxed Order requirement, concur-
rent requests can be processed in parallel. Thus, with the
Relaxed Order requirement, all non-faulty replicas execute
requests in the same partial order as opposed to the tra-
ditional architecture where all correct replicas execute re-
quests in the same total order.
In the new architecture, the parallelizer uses application-
speciﬁc information to take advantage of the Relaxed Order
requirement. The parallelizer transforms a totally ordered
schedule of requests provided by the agreement protocol
into a partially ordered schedule based on application se-
mantics.
A sound parallelizer ensures the following partial or-
der property: for any two requests ri and r j such that ri and
r j are dependent and ri precedes r j in the total order es-
tablished by the agreement stage, then ri completes execu-
tion before r j begins execution. For fault tolerance, we also
assume that the parallelizer has a local decision property:
each replica’s parallelizer does dependence analysis locally
and does not exchange messages with other replicas. Hence,
given a correct agreement protocol, faulty replicas cannot
affect the partial order enforced at the correct replicas.
Notice that there are two properties that are not required
of a parallelizer. First, we do not require precision: a sound
parallelizer may enforce additional ordering constraints on
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:03 UTC from IEEE Xplore.  Restrictions apply. 
requests beyond those required by the partial order prop-
erty. This non-requirement is important because it allows
us to simplify the design of parallelizers for complex ap-
plications by building conservative parallelizers that can in-
troduce false dependencies between requests. For example,
in Section 5.3 we describe a simple NFS implementation
that uses a conservative analysis to identify some, but not
all, concurrent requests. Second, we do not require equal-
ity: different correct parallelizers may enforce different par-
tial orders as long as all correct parallelizers’ partial orders
are consistent with the order required by the partial order
property. One could, for example, implement multiple ver-
sions of the parallelizer for an application to prevent any one
implementation from being a single point of failure [21].