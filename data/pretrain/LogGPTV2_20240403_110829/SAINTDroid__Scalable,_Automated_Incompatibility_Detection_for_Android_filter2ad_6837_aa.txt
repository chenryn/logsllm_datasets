# Title: GAINDroid: General Automated Incompatibility Notifier for Android

## Authors
- Bruno Vieira Resende e Silva
- Clay Stevens
- Niloofar Mansoor
- Witawas Srisa-an
- Tingting Yu
- Hamid Bagheri

## Affiliation
University of Nebraska - Lincoln

## Publication Details
- **Date**: April 2019
- **Repository**: DigitalCommons@University of Nebraska - Lincoln
- **Department**: Computer Science and Engineering
- **Series**: Theses, Dissertations, and Student Research
- **Volume**: 167
- **URL**: [https://digitalcommons.unl.edu/computerscidiss/167](https://digitalcommons.unl.edu/computerscidiss/167)

## Abstract
This thesis introduces GAINDroid, a comprehensive analysis approach supported by a class-loader-based program analyzer. GAINDroid automatically detects three types of mismatches that can cause runtime crashes in Android applications due to incompatibilities across different versions of the Android API. Unlike existing techniques that focus on specific issues, GAINDroid broadens the scope of analysis by effectively identifying various sources of incompatibilities. We evaluated GAINDroid on 3,590 real-world apps and compared it with state-of-the-art tools. The results show that GAINDroid outperforms these tools in terms of both the number and type of mismatches detected and the runtime performance of the analysis.

## Table of Contents
1. **Introduction**
2. **Background**
   - 2.1 Android API Background
   - 2.2 API Compatibility Issues
     - 2.2.1 API Invocation Mismatch
     - 2.2.2 API Callback Mismatch
   - 2.3 Permission-Induced Compatibility Issues
3. **Approach**
   - 3.1 API Usage Extraction
   - 3.2 Database Construction
   - 3.3 Permissions Mapping
   - 3.4 Mismatch Detection
4. **Empirical Evaluation**
   - 4.1 Objects of Analysis
   - 4.2 Variables and Measures
     - 4.2.1 Independent Variables
     - 4.2.2 Dependent Variables
     - 4.2.3 Study Operation
   - 4.3 Threats to Validity
5. **Results**
   - 5.1 RQ1: Accuracy
   - 5.2 RQ2: Real-World Applicability
   - 5.3 RQ3: Performance
6. **Discussion**
7. **Related Work**
8. **Conclusion and Future Work**
9. **Bibliography**

## List of Figures
- Figure 2.1: Mismatch between app and device API level
- Figure 3.1: Architectural Overview of GAINDroid
- Figure 5.1: Scatter plot representing analysis time for compatibility checking of Android apps using GAINDroid
- Figure 5.2: Number of classes loaded by GAINDroid and CiD when analyzing real-world Android apps
- Figure 5.3: Amount of memory used by GAINDroid and CiD when analyzing real-world Android apps

## List of Tables
- Table 2.1: Types of mismatch
- Table 4.1: Basic Characteristics of Objects of Analysis
- Table 5.1: Effectiveness and Efficiency of GAINDroid
- Table 5.2: Time comparison between GAINDroid and other tools
- Table 7.1: Comparing GAINDroid to the state-of-the-art of compatibility detection techniques

## Chapter 1: Introduction
Android is the leading mobile operating system, representing over 80% of the market share. The rapid rise of Android is largely due to its vibrant app market, which currently contains nearly three million apps, with thousands added and updated daily. Android apps are developed using an application development framework (ADF) that ensures interoperability and coexistence in the same environment. The ADF exposes well-defined application programming interfaces (APIs) that encapsulate commands to access resources from the Android operating system and hardware, allowing developers to focus on app development rather than deep understanding of the underlying systems.

The Android ADF evolves frequently, with hundreds of releases since 2008. This rapid evolution can lead to incompatibilities in apps targeting specific versions of the Android OS but running on older or newer versions. Defects and vulnerabilities, especially after ADF updates, have continued to plague the dependability and security of Android devices and their apps. A recent study shows that 23% of Android apps behave differently after a framework update, and around 50% of updates have caused previously working apps to fail or rendered systems unstable.

Additionally, the introduction of a dynamic permission system in Android ADF version 6 (API level 23) has led to new incompatibility issues. Existing compatibility detection techniques target only certain types of APIs and suffer from frequent false alarms due to coarse-grained API information capture. These limitations highlight the need for a more comprehensive and accurate approach.

In this thesis, we present GAINDroid, a general, automated incompatibility notifier for Android that detects mismatches in the use of Android APIs and permission-induced issues. Unlike prior techniques, GAINDroid increases the scope of analysis by automatically and effectively identifying three sources of incompatibilities that can cause runtime crashes.

We validate GAINDroid's effectiveness and scalability through experiments on 3,590 real-world apps, demonstrating its ability to outperform state-of-the-art tools in both the number and type of mismatches detected and runtime performance.

## Chapter 2: Background
### 2.1 Android API Background
As of November 2018, there are 16 releases of the Android API, with the most recent being Android Pie (API level 28). Each version introduces new and updated methods to improve performance, security, and user experience. Developers specify the range of API levels their app supports in the manifest file or Gradle file using attributes such as `minSdkVersion`, `targetSdkVersion`, and `maxSdkVersion`.

### 2.2 API Compatibility Issues
Incompatible API levels can cause runtime crashes in Android apps. Changes to the API are generally additive, so most crashes stem from a lack of backward-compatibility, where an app targets a higher API level but is installed on a device running a lower one. Forward-compatibility issues can also occur when an app is installed on a device with a higher API level than targeted. We divide these incompatibilities into two types:
- **Invocation Mismatches**: An app attempts to invoke an API method not supported by the device.
- **Callback Mismatches**: An app implements a callback method missing from the API level installed on the device.

### 2.3 Permission-Induced Compatibility Issues
The introduction of a dynamic permission system in Android ADF version 6 (API level 23) has led to new incompatibility issues. These issues arise when an app does not appropriately implement mechanisms to support runtime dangerous permissions or when an app using dangerous permissions is installed on devices with a higher API level.

## Chapter 3: Approach
### 3.1 API Usage Extraction
GAINDroid extracts API usage information from the app's code.

### 3.2 Database Construction
A database is constructed to store the extracted API usage information.

### 3.3 Permissions Mapping
Permissions are mapped to their corresponding API levels.

### 3.4 Mismatch Detection
GAINDroid uses the extracted API usage information and permissions mapping to detect potential mismatches.

## Chapter 4: Empirical Evaluation
### 4.1 Objects of Analysis
The objects of analysis include 3,590 real-world Android apps.

### 4.2 Variables and Measures
- **Independent Variables**: Factors affecting the analysis, such as API levels and permissions.
- **Dependent Variables**: Metrics for evaluating the effectiveness and efficiency of GAINDroid.
- **Study Operation**: Description of the experimental setup and procedures.

### 4.3 Threats to Validity
Potential threats to the validity of the empirical evaluation are discussed.

## Chapter 5: Results
### 5.1 RQ1: Accuracy
Evaluation of GAINDroid's accuracy in detecting mismatches.

### 5.2 RQ2: Real-World Applicability
Assessment of GAINDroid's applicability to real-world apps.

### 5.3 RQ3: Performance
Comparison of GAINDroid's performance with state-of-the-art tools.

## Chapter 6: Discussion
Additional discussion of the results and their implications.

## Chapter 7: Related Work
Comparison of GAINDroid with existing compatibility detection techniques.

## Chapter 8: Conclusion and Future Work
Summary of the contributions and future research directions.

## Bibliography
[References to be included here]