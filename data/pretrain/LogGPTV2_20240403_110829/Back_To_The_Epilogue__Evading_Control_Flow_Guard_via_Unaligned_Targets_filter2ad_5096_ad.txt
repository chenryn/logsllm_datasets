stack frame.
epilogue and then simply jumping to the callee. When
control reaches the callee, the stack pointer points to the
caller’s return address and the callee will build its stack
frame over what was the caller’s stack frame. This reduces
stack depth and avoids an extra return, since the callee will
directly return to the caller’s caller.
Most importantly, the caller likely spilled its arguments,
or in some cases other general purpose registers, to the
RPA. Since the stack frame has been deallocated, the stack
at the tail jump looks again like Figure 4c, but now the
RPA contains initialized data. Let us assume that the tail
call is indirect, but CFG-protected, and that we can hijack
it. This puts us in a position where we can chain a PR
gadget with an initialized RPA near the stack top. To apply
this technique in practice, we ﬁnd functions with tail call
optimization that are also valid CFG targets, which we name
spiller (S) gadgets. An S gadget is described by a parameter
n, denoted as Sn, and satisﬁes the following properties:
•
•
•
•
S.1 The gadget is a valid target for CFG.
S.2 The gadget spills n registers to the RPA.
S.3 The gadget ends with a controlled indirect tail
jump after its epilogue.
S.4 The gadget has negligible or manageable side
effects.
This is an approximate notation, that does not take into
account which registers are spilled and at what offsets. We
give a more precise description of S gadget semantics in
Section VI. We note that S gadgets can be considered as a
particular subclass of the EP-IJ gadgets deﬁned in [17]. If
the ﬁnal jump is made through a virtual table, they are also
similar to COOP [34] gadgets. We redirect the ﬁnal indirect
jump of an S gadget to a PR gadget to build an S-PR chain.
F. Exploiting S-PR chains
with a PR gadget that will pivot spr to the spilled value. We
focus on argument registers (rcx, rdx, r8, r9) because
they are easier to control, but we stress that other registers
may be spilled.
Figure 5 shows a realistic example in a C++ application.
The ﬁrst code chunk from the top makes an indirect call via
dispatch mode, which takes the target address in the rax
register. This particular example shows a C++ virtual call:
rcx (ﬁrst argument) is the this pointer, the virtual table
pointer is at offset 0 in the object and the method pointer is
at offset 0x50 in the virtual table. The attacker has corrupted
the virtual table pointer so that rax is loaded with the
address of an S2 gadget. Also, the attacker controls rdx,
which is the second argument, and sets it to the address of
the ﬁnal target.
Caller (controlled rdx)
···
mov rax, [rcx]
mov rax, [rax+0x50]
call [dispatch_fptr]
···
S2 gadget
mov [rsp+0x8], rcx
mov [rsp+0x10], rdx
sub rsp, 0x40
···
mov rax, [rcx]
mov rax, [rax+0x20]
add rsp, 0x40
jmp [dispatch_fptr]
P16R0 gadget
pop rdi
pop rsi
ret
Attacker
target
Fig. 5. An S-PR chain, that shows how S gadgets are used to setup the
stack for PR gadgets.
Control ﬂow can be hijacked by redirecting an indirect
call for which we control a spilled register to an S-PR chain
In this example, the S gadget starts by spilling the ﬁrst
two arguments (rcx and rdx) to the RPA, which begins
9
at rsp+8. In particular, the highlighted instruction spills
the attacker-controlled rdx to rsp+16. The gadget then
builds a stack frame (64 bytes), performs some innocuous
operations, and prepares rax for an indirect dispatch-mode
tail call. This is again a virtual call, on the same corrupted
object as before, at a 0x20 offset. Thus, the attacker can
hijack it to a P16R0 gadget. Finally, due to the tail call
optimization, the S gadget deallocates the stack frame and
jumps (via CFG dispatch) to the PR gadget. The stack
pointer is now the same as it was at the beginning of the
S gadget, and the spilled rdx is again at rsp+16. The PR
gadget increments the stack pointer by 16 bytes, bringing
the spilled register to the top of the stack, where ret will
use it as the return address, achieving ﬂow control.
VI.
IMPACT AND APPLICABILITY
We systematically assessed the presence of PR and S
gadgets both in system libraries (as they expose to BATE all
applications that load them), and Microsoft Ofﬁce 2016, a
very popular software and thus high-value target. Results
were obtained from clean installs of 32-bit and 64-bit
Windows 10 Pro Insider Preview, build 16232.1000.
A. Analysis
To ﬁnd PR gadgets we apply a simple pattern matching
approach, as their structure is predictable. For each ﬁle,
we extract the list of valid targets and ﬁlter it down to
unaligned targets. Then, we disassemble backwards from
unaligned targets, at every offset within the window of
addresses that share all but the lowest 4 bits. We match
the disassembled chunks against the PR gadget structure
previously illustrated, to determine whether we found a PR
gadget and what its semantics are. This works well because
the layout of epilogues is ﬁxed.
For S gadgets we use a less naive approach, because
they are much more diverse. To simplify exploitation, we
only identify S gadgets made of a single basic block, without
any control ﬂow transfer except the ﬁnal indirect jump. We
extract the valid targets from the ﬁle, then we disassemble
forwards until we reach an instruction that changes control
ﬂow, such as a call, a jump or a return. If this instruction is
an indirect jump to the dispatch pointer, or if it is a call to
the check pointer followed by an indirect jump to a register,
we mark the gadget as a candidate. We then symbolically
execute candidate gadgets to determine whether the stack
frame has been deallocated prior to the indirect branch,
and what was spilled to the RPA.
We use Capstone [1] for disassembly and angr [37] for
symbolic execution.
B. Results
Table I shows libraries that contain unaligned targets
and PR gadgets. We recall that, in a PpRr gadget, p indicates
how many bytes are added to the stack pointer before
returning, and r how many are added after returning. As
expected (see discussion in Section V-C), small p values
are more frequent than big ones. We also note that, as a
general trend, p grows at ﬁrst by steps of 8 bytes (from pop
instructions), then suddenly increases because of adds.
TABLE I.
UNALIGNED TARGETS AND PR GADGETS FOUND IN WINDOWS 10
SYSTEM LIBRARIES.
Library
Unaligned
targets
Total PR
gadgets
PR gadgets
(deduplicated)
32-bit Windows, 32-bit WoW64 subsystem
AppVEntSubsystems32.dll
clusapi.dll
d3dim.dll
d3dim700.dll
msvcr120_clr0400.dll
msvcrt.dll
MSVP9DEC.dll
MSVPXENC.dll
ntdll.dll (32-bit only)
resutils.dll
ucrtbase.dll
user32.dll
wsp_fs.dll
wsp_health.dll
jscript9.dll
msmpeg2vdec.dll
MSVPXENC.dll
PayloadRestrictions.dll
rtmpltfm.dll
1
1
322
323
17
34
40
53
1
1
6
3
1
1
—
—
1
11
5
15
10
11
—
—
4
—
—
—
64-bit Windows
9
1
1
5
6
4
3
—
—
4
—
—
P4R0
P4R{0,8}, P8R{0,8},
P12R8, P16R8, P80R8
P4R{0,4098}, P8R0,
P12R0, P36R0
P4R{0,4,8}, P8R0,
P12R0, P16R4, P36R0,
P40R0, P44R0, P52R0
P4R0, P8R0, P12R0,
P16R0, P20R0, P112R0
P4R0, P8R0, P12R0,
P16R0, P20R0, P112R0
—
—
P4R0, P8R0, P12R0,
P36R0
—
—
—
P8R0, P16R0, P24R0,
P32R0
P8R0, P16R0, P56R0
—
—
P8R0, P16R0
On 32-bit systems our bypass is widely applicable,
because PR gadgets can be found in C/C++ runtime li-
braries (such as msvcrt.dll), which are loaded by most
applications, along with being dependencies for a large
number of other system DLLs. The same applies to 32-
bit applications on 64-bit systems, which run through the
WoW64 subsystem. On 64-bit the attack surface is smaller.
However, we found two libraries that offer PR gadgets and
are particularly appealing to attackers: jscript9.dll
is the legacy JavaScript engine used by Internet Explorer,
while msmpeg2vdec.dll is a system video codec that
could be loaded by applications that handle media ﬁles.
Analyzing the 64-bit Microsoft Ofﬁce 2016 suite, we found
1410 unaligned targets in 139 executables and libraries,
resulting in 123 non unique PR gadgets. Of those, 101
are P40R0, which are particularly interesting as they reach
beyond the RPSA. We do not report details of these gadgets
because of space issues.
We show an approximate overview of S gadgets on
64-bit Windows in Table II. Both the Internet Explorer
(jscript9.dll) and Edge (Chakra.dll) JavaScript en-
gines contain a fair number of S gadgets. The same holds for
the HTML parsers used by the two browsers (mshtml.dll
for Internet Explorer and edgehtml.dll for Edge). We
also note the presence of S gadgets in real-time codecs
used by Skype and graphics libraries. We highlight that
this is only an approximate overview, as our notation is
not completely precise: we deﬁne n as the total number of
spilled 64-bit registers. We do not take into account 32-bit
10
registers, as they are generally not useful. Most importantly,
the Sn notation does not describe exactly which registers
are spilled, whether they are argument registers or not, and
at what position in the RPA they are spilled. We report a
precise description of the S gadgets we found and of the
registers they spill in Appendix A.
TABLE II.
S GADGETS FOUND IN WINDOWS 10 64-BIT SYSTEM LIBRARIES.
Library
Total S
gadgets
S gadgets (deduplicated)
3
aadtb.dll
52
Chakra.dll
1
Chakradiag.dll
1
CoreUIComponents.dll
1
d2d1.dll
1
d3d10warp.dll
64
D3DCompiler_47.dll
76
dbghelp.dll
76
edgehtml.dll
2
FlashUtil_ActiveX.dll
34
jscript9.dll
5
jscript9diag.dll
3
mrt_map.dll
217
mshtml.dll
41
msvcp120_clr0400.dll
12
msvcr120_clr0400.dll
28
ortcengine.dll
24
pdm.dll
2
pidgenx.dll
4
rgb9rast.dll
3
rometadata.dll
12
rtmcodecs.dll
2
rtmmvrortc.dll
83
rtmpal.dll
129
rtmpltfm.dll
6
sppc.dll
1
sppcext.dll
SystemSettings.Handlers.dll
7
SystemSettingsThresholdAdminFlowUI.dll 12
20
Windows.Media.Protection.PlayReady.dll
58
Windows.UI.Input.Inking.Analysis.dll
WsmSvc.dll
5
S1
S1, S2, S3
S2
S1
S1
S1
S1, S2, S3, S4
S1, S2, S3, S4
S1, S2, S3
S1
S1, S2, S3
S2, S3
S4