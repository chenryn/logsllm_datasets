### Stack Frame and Tail Call Optimization

In the context of tail call optimization, after the caller's epilogue, control is directly transferred to the callee. At this point, the stack pointer points to the caller’s return address, and the callee builds its stack frame over the caller’s existing stack frame. This approach reduces the stack depth and avoids an extra return, as the callee will directly return to the caller’s caller.

Importantly, the caller may have spilled (stored) its arguments or other general-purpose registers to the Return Pointer Area (RPA). Since the stack frame has been deallocated, the stack at the tail jump resembles Figure 4c, but now the RPA contains initialized data. Assuming the tail call is indirect and protected by Control Flow Guard (CFG), and that we can hijack it, we can chain a Pivot-Return (PR) gadget with an initialized RPA near the top of the stack.

To apply this technique, we identify functions with tail call optimization that are also valid CFG targets, which we refer to as "spiller" (S) gadgets. An S gadget, denoted as \( S_n \), satisfies the following properties:
1. The gadget is a valid target for CFG.
2. The gadget spills \( n \) registers to the RPA.
3. The gadget ends with a controlled indirect tail jump after its epilogue.
4. The gadget has negligible or manageable side effects.

This notation is approximate and does not specify which registers are spilled and at what offsets. A more precise description of S gadget semantics is provided in Section VI. S gadgets can be considered a subclass of the EP-IJ gadgets defined in [17]. If the final jump is made through a virtual table, they are similar to COOP [34] gadgets. We redirect the final indirect jump of an S gadget to a PR gadget to build an S-PR chain.

### Exploiting S-PR Chains

An S-PR chain involves using a PR gadget to pivot the stack pointer (SP) to the spilled value. We focus on argument registers (rcx, rdx, r8, r9) because they are easier to control, but other registers may also be spilled.

Figure 5 illustrates a realistic example in a C++ application. The first code chunk from the top makes an indirect call via dispatch mode, with the target address in the rax register. This example shows a C++ virtual call where rcx (the first argument) is the `this` pointer, the virtual table pointer is at offset 0 in the object, and the method pointer is at offset 0x50 in the virtual table. The attacker has corrupted the virtual table pointer so that rax is loaded with the address of an \( S_2 \) gadget. Additionally, the attacker controls rdx, the second argument, and sets it to the address of the final target.

**Caller (controlled rdx)**
```assembly
...
mov rax, [rcx]
mov rax, [rax+0x50]
call [dispatch_fptr]
...
```

**\( S_2 \) gadget**
```assembly
mov [rsp+0x8], rcx
mov [rsp+0x10], rdx
sub rsp, 0x40
...
mov rax, [rcx]
mov rax, [rax+0x20]
add rsp, 0x40
jmp [dispatch_fptr]
```

**P16R0 gadget**
```assembly
pop rdi
pop rsi
ret
```

**Attacker target**

Control flow can be hijacked by redirecting an indirect call for which we control a spilled register to an S-PR chain. In this example, the \( S \) gadget starts by spilling the first two arguments (rcx and rdx) to the RPA, beginning at rsp+8. Specifically, the highlighted instruction spills the attacker-controlled rdx to rsp+16. The gadget then builds a stack frame (64 bytes), performs some innocuous operations, and prepares rax for an indirect dispatch-mode tail call. This is another virtual call on the same corrupted object, at a 0x20 offset. The attacker can hijack it to a P16R0 gadget. Due to tail call optimization, the \( S \) gadget deallocates the stack frame and jumps (via CFG dispatch) to the PR gadget. The stack pointer is now the same as it was at the beginning of the \( S \) gadget, and the spilled rdx is again at rsp+16. The PR gadget increments the stack pointer by 16 bytes, bringing the spilled register to the top of the stack, where `ret` will use it as the return address, achieving control flow.

### Impact and Applicability

We systematically assessed the presence of PR and S gadgets in system libraries and Microsoft Office 2016, a popular and high-value target. Results were obtained from clean installs of 32-bit and 64-bit Windows 10 Pro Insider Preview, build 16232.1000.

#### Analysis

To find PR gadgets, we used a simple pattern matching approach due to their predictable structure. For each file, we extracted the list of valid targets and filtered it down to unaligned targets. We then disassembled backwards from unaligned targets, at every offset within the window of addresses that share all but the lowest 4 bits, and matched the disassembled chunks against the PR gadget structure.

For S gadgets, we used a more sophisticated approach due to their diversity. To simplify exploitation, we identified S gadgets made of a single basic block without any control flow transfer except the final indirect jump. We extracted the valid targets from the file, disassembled forwards until reaching a control flow change, and marked candidates if the final instruction was an indirect jump to the dispatch pointer or a call to the check pointer followed by an indirect jump to a register. We then symbolically executed candidate gadgets to determine if the stack frame was deallocated before the indirect branch and what was spilled to the RPA.

We used Capstone [1] for disassembly and angr [37] for symbolic execution.

#### Results

Table I shows libraries containing unaligned targets and PR gadgets. In a PpRr gadget, p indicates how many bytes are added to the stack pointer before returning, and r how many are added after returning. Small p values are more frequent than large ones, and p generally grows in steps of 8 bytes (from pop instructions) before increasing sharply due to adds.

**Table I: Unaligned Targets and PR Gadgets Found in Windows 10 System Libraries**

| Library | Unaligned Targets | Total PR Gadgets | PR Gadgets (Deduplicated) |
|---------|-------------------|------------------|---------------------------|
| AppVEntSubsystems32.dll | 1 | 1 | 1 |
| clusapi.dll | 1 | 1 | 1 |
| d3dim.dll | 322 | 323 | 15 |
| d3dim700.dll | 17 | 34 | 10 |
| msvcr120_clr0400.dll | 40 | 53 | 6 |
| msvcrt.dll | 1 | 1 | 3 |
| MSVP9DEC.dll | 1 | 1 | 1 |
| MSVPXENC.dll | 1 | 1 | 1 |
| ntdll.dll (32-bit only) | 1 | 1 | 1 |
| resutils.dll | 1 | 1 | 1 |
| ucrtbase.dll | 6 | 3 | 1 |
| user32.dll | 1 | 1 | 1 |
| wsp_fs.dll | 1 | 1 | 1 |
| wsp_health.dll | 1 | 1 | 1 |
| jscript9.dll | - | - | - |
| msmpeg2vdec.dll | - | - | - |
| MSVPXENC.dll | - | - | - |
| PayloadRestrictions.dll | - | - | - |
| rtmpltfm.dll | - | - | - |

On 32-bit systems, our bypass is widely applicable because PR gadgets can be found in C/C++ runtime libraries (such as msvcrt.dll), which are loaded by most applications and are dependencies for many system DLLs. The same applies to 32-bit applications on 64-bit systems running through the WoW64 subsystem. On 64-bit systems, the attack surface is smaller, but we found two libraries particularly appealing to attackers: jscript9.dll (the legacy JavaScript engine used by Internet Explorer) and msmpeg2vdec.dll (a system video codec that could be loaded by media-handling applications).

Analyzing the 64-bit Microsoft Office 2016 suite, we found 1410 unaligned targets in 139 executables and libraries, resulting in 123 non-unique PR gadgets. Of these, 101 are P40R0, which are particularly interesting as they reach beyond the RPSA. We do not report details of these gadgets due to space constraints.

**Table II: S Gadgets Found in Windows 10 64-Bit System Libraries**

| Library | Total S Gadgets | S Gadgets (Deduplicated) |
|---------|-----------------|--------------------------|
| aadtb.dll | 3 | S1 |
| Chakra.dll | 52 | S1, S2, S3 |
| Chakradiag.dll | 1 | S2 |
| CoreUIComponents.dll | 1 | S1 |
| d2d1.dll | 1 | S1 |
| d3d10warp.dll | 64 | S1, S2, S3, S4 |
| D3DCompiler_47.dll | 76 | S1, S2, S3, S4 |
| dbghelp.dll | 76 | S1, S2, S3 |
| edgehtml.dll | 2 | S1 |
| FlashUtil_ActiveX.dll | 34 | S1, S2, S3 |
| jscript9.dll | 5 | S2, S3 |
| jscript9diag.dll | 3 | S4 |
| mrt_map.dll | 217 | S1 |
| mshtml.dll | 41 | S1, S2, S3 |
| msvcp120_clr0400.dll | 12 | S1 |
| msvcr120_clr0400.dll | 28 | S1, S2, S3 |
| ortcengine.dll | 24 | S1 |
| pdm.dll | 2 | S1 |
| pidgenx.dll | 4 | S1 |
| rgb9rast.dll | 3 | S1 |
| rometadata.dll | 12 | S1 |
| rtmcodecs.dll | 2 | S1 |
| rtmmvrortc.dll | 83 | S1, S2, S3 |
| rtmpal.dll | 129 | S1, S2, S3 |
| rtmpltfm.dll | 6 | S1 |
| sppc.dll | 1 | S1 |
| sppcext.dll | 1 | S1 |
| SystemSettings.Handlers.dll | 7 | S1 |
| SystemSettingsThresholdAdminFlowUI.dll | 12 | S1 |
| Windows.Media.Protection.PlayReady.dll | 58 | S1, S2, S3 |
| Windows.UI.Input.Inking.Analysis.dll | 1 | S1 |
| WsmSvc.dll | 5 | S1 |

Both the Internet Explorer (jscript9.dll) and Edge (Chakra.dll) JavaScript engines contain a fair number of S gadgets. The same holds for the HTML parsers used by the two browsers (mshtml.dll for Internet Explorer and edgehtml.dll for Edge). We also note the presence of S gadgets in real-time codecs used by Skype and graphics libraries. This overview is approximate, as our notation does not specify exactly which registers are spilled, whether they are argument registers, or their positions in the RPA. A precise description of the S gadgets and the registers they spill is provided in Appendix A.