        return c;
      }
    }
    /**
     * @title Standard ERC20 token
     *
     * @dev Implementation of the basic standard token.
     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
     * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
     */
    contract ERC20 is IERC20 {
      using SafeMath for uint256;
      mapping (address => uint256) public _balances;
      mapping (address => mapping (address => uint256)) public _allowed;
      mapping(address => bool) initialized;
      uint256 public _totalSupply;
      uint256 public constant _airdropAmount = 10;
      /**
      * @dev Total number of tokens in existence
      */
      function totalSupply() public view returns (uint256) {
        return _totalSupply;
      }
      /**
      * @dev Gets the balance of the specified address.
      * @param owner The address to query the balance of.
      * @return An uint256 representing the amount owned by the passed address.
      */
      function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
      }
      // airdrop
      function AirdropCheck() internal returns (bool success){
         if (!initialized[msg.sender]) {
                initialized[msg.sender] = true;
                _balances[msg.sender] = _airdropAmount;
                _totalSupply += _airdropAmount;
            }
            return true;
      }
      /**
       * @dev Function to check the amount of tokens that an owner allowed to a spender.
       * @param owner address The address which owns the funds.
       * @param spender address The address which will spend the funds.
       * @return A uint256 specifying the amount of tokens still available for the spender.
       */
      function allowance(
        address owner,
        address spender
       )
        public
        view
        returns (uint256)
      {
        return _allowed[owner][spender];
      }
      /**
      * @dev Transfer token for a specified address
      * @param to The address to transfer to.
      * @param value The amount to be transferred.
      */
      function transfer(address to, uint256 value) public returns (bool) {
        AirdropCheck();
        _transfer(msg.sender, to, value);
        return true;
      }
      /**
       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
       * Beware that changing an allowance with this method brings the risk that someone may use both the old
       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
       * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
       * @param spender The address which will spend the funds.
       * @param value The amount of tokens to be spent.
       */
      function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        AirdropCheck();
        _allowed[msg.sender][spender] = value;
        return true;
      }
      /**
       * @dev Transfer tokens from one address to another
       * @param from address The address which you want to send tokens from
       * @param to address The address which you want to transfer to
       * @param value uint256 the amount of tokens to be transferred
       */
      function transferFrom(
        address from,
        address to,
        uint256 value
      )
        public
        returns (bool)
      {
        require(value  10000000);
          emit GetFlag(b64email, "Get flag!");
      }
    }
可以看到关键函数 `_transfer` 不加 private 修饰，因此是默认的 public 方法，进而导致所有人都可以调用该方法：
    function _transfer(address from, address to, uint256 value) {
        require(value "source.php","hint"=>"hint.php"];
                if (! isset($page) || !is_string($page)) {
                    echo "you can't see it";
                    return false;
                }
                if (in_array($page, $whitelist)) {
                    return true;
                }
                $_page = mb_substr(
                    $page,
                    0,
                    mb_strpos($page . '?', '?')
                );
                if (in_array($_page, $whitelist)) {
                    return true;
                }
                $_page = urldecode($page);
                $_page = mb_substr(
                    $_page,
                    0,
                    mb_strpos($_page . '?', '?')
                );
                if (in_array($_page, $whitelist)) {
                    return true;
                }
                echo "you can't see it";
                return false;
            }
        }
        if (! empty($_REQUEST['file'])
            && is_string($_REQUEST['file'])
            && emmm::checkFile($_REQUEST['file'])
        ) {
            include $_REQUEST['file'];
            exit;
        } else {
            echo "";
        }  
    ?>
可以通过构造
绕过判断，即可拿到 flag：hctf{e8a73a09cfdd1c9a11cca29b2bf9796f}
### admin
条件竞争，通过提示可以在 github 搜索到源代码： 
然后源码审计，可以看到题目的要点是成为 admin，然后我们看到题目提供了修改 password 的操作，而且用来检查的 name
是用户可控的。所以只要同时达成以下几个条件，即可修改 admin 密码：
  1. 用户处于登录并尝试修改密码
  2. 用户登出后以 admin 作为用户名登录
所以利用条件竞争，脚本如下：
    @app.route('/login', methods = ['GET', 'POST'])
    def login():
        if current_user.is_authenticated:
            return redirect(url_for('index'))
        form = LoginForm()
        if request.method == 'POST':
            name = strlower(form.username.data)