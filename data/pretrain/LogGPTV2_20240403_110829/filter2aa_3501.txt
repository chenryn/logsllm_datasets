漫 谈 A O S P 蓝 牙 漏 洞 挖 掘 技 术
韩子诺 OPPO安珀实验室
关于我
•
韩子诺（ele7enxxh），OPPO安珀实验室高级安全专家，主要研究领域为Android安全，IoT
安全和车联网安全。在二进制漏洞挖掘与利用方面拥有6年以上相关经验；
•
曾在Ruxcon，Zer0Con和Pacsec等多个国际知名会议进行技术演讲；
•
截至目前，累计独立获得Android数百个CVE编号，Google Bug Hunters排行榜第8，
Hackerone高通致谢榜2022年度第1；
•
联系我：ele7enxxh（weibo | weixin | github）；
议程
•
背景
•
Android蓝牙协议栈发展历史
•
历史漏洞分析
•
攻击面
•
挖掘方法
•
源码审计和模糊测试
•
展望
•
潜在的脆弱点
•
更高效的挖掘思路
背景
Android蓝牙默认协议栈
2.2 - BlueZ
•
Linux默认协议栈
Android蓝牙默认协议栈
2.2 - BlueZ
4.2 - Bluedroid
•
由博通和Google共同开发
•
external/bluetooth/bluedroid
Android蓝牙默认协议栈
2.2 - BlueZ
4.2 - Bluedroid
6.0 - Fluoride
Android蓝牙默认协议栈
2.2 - BlueZ
4.2 - Bluedroid
6.0 - Fluoride
13 - Gabeldorsche
•
/system/bt - /packages/modules/Bluetooth/system
•
新的AVRCP协议实现
•
重写了BLE扫描，BLE广播，ACL连接管理，控制器信息管
理，HCI层，HAL接口层等模块
•
部分模块开始使用rust语言
历史漏洞
•
BlueBorne - 2017年公开的一组蓝牙HOST层协议内存破坏漏洞，影响多个平台和系统，造成
了很广的影响，引导了众多安全研究者关注蓝牙安全
•
BadBluetooth - 2019年由香港中文大学Fenghao Xu发表于2019年安全顶会NDSS上的一篇
论文，主要介绍了蓝牙配对时的逻辑缺陷导致的绕过风险
•
BlueFrag - 2020年Android安全公告披露的一个严重漏洞，攻击者利用ACL分包处理时的一
个越界写漏洞可以远程代码执行
历史漏洞分析
•
从2017年1月到2022年10月，累计至少披露
148个漏洞，其中高危99个，严重49个（未统
计中危）
•
2018年发现漏洞67个，几乎占比近6年总数的
一半（主要是受到BlueBorne的影响）
历史漏洞分析
•
漏洞的类型具有较强的时间相关性：业务逻辑
错误漏洞 -> 内存破坏漏洞 -> 权限校验不当漏
洞 -> 内存破坏漏洞
•
漏洞的类型随着代码的健壮性和白帽子的关注
点而变化
历史漏洞分析
•
由于蓝牙存在天然的远程攻击面，因此漏洞级别定级偏高
•
白帽子在AVRCP，SDP，L2CAP，GATT等模块中发现了大量的漏洞
攻击面
system_server - packages/modules/Bluetooth/service/java/com/android/server/bluetooth
com.android.bluetooth
APP
Remote
Host
Controler
Data
Normal APP
Binder IPC
权限校验不当，业务逻辑错误（CVE-2020-27054，CVE-2020-0183等）
libbluetooth_jni - packages/modules/Bluetooth/android/app/jni
libbluetooth - packages/modules/Bluetooth/system
Java Service - packages/modules/Bluetooth/android/app/src/com/android/bluetooth
Bluetooth Chip
BluetoothManagerService
Adapter
Pbap
Gatt
Sap
HearingAid
Headset
Map
Mcp
Opp
HidDevice
Pan
battery
AvrcpController
AvrcpTarget
Tbs
BassClient
A2dpSink
HeadsetClient
HidHost
A2dp
LeAudio
MapClient
Hap
VolumeControl
Csip
adapter
gatt
csip
a2dp
hap
hfp
hid
sdp
avrcp
vc
le_audio
pan
SDP
BNEP
L2CAP - (BR/LE)
HIDD/HIDH
RFCOMM
HCI
ATT/GATT/EATT
ACL
AVDT/AVRC/AVCT
SMP
PAN
SRVC
GAP
A2DP
LEAUDIO
HFP/HFPC
BTIF
BTE
BTA
BTM
权限校验不当，业务逻辑错误（CVE-2021-
0328，CVE-2021-0588，CVE-2021-0604，
CVE-2022-20126等）
内存破坏（CVE-2018-9414，CVE-2022-XXXX等）
业务逻辑错误，C++特性使用不当，
线程不安全，内存破坏（CVE-2021-
0522，CVE-2021-39708，CVE-
2022-20345等）
Bind 
Service
JNI
Interface
&&
Callback
JNI/Main Threads
cmd
&&
event
&&
packet
Radio
挖掘方法
源码审计
•
优势
•
无需运行：传统的蓝牙远程Fuzz效率较低，且复杂度高（需要考虑不同协议栈的状态机）
•
不依赖硬件：某些蓝牙漏洞需要特定的硬件才能触发
•
方便且高效：https://cs.android.com/
•
劣势
•
需要比较了解蓝牙协议和实现架构
•
费眼，费脑
源码审计 - HID简介
•
HID(Human Input Device)：人体输入设备配置文件，定义了蓝牙键盘和鼠标的功能
•
Android在9.0之后开放了HID相关的API，APP主要通过BluetoothHidDevice类使用相关能
力
•
HID设备主要分为Host和Device，Android目前只默认启用HID Device
•
在framework，libbluetooth_jni，libbluetooth等多个模块中均有大量的HID实现代码
源码审计 - HIDD工作流程之应用注册
Normal APP
BluetoothManagerService
com.android.bluetooth
HidDeviceService
registerAppNative
register_app
请求建立HIDD代理连接
bind
获取到binder对象
获取到HIDD代理对象
注册HIDD应用
registerApp
注册成功
源码审计 - CVE-2018-9544/9545
本地应用通过Binder IPC可以调用
registerApp接口，且参数全部可控
sdp参数包含多个不定长的数据，如
果传入一个很长的值呢？
源码审计 - CVE-2018-9544/9545
通过JNI接口调用registerAppNative
通过hidd的BTIF接口调用
register_app
源码审计 - CVE-2018-9544/9545
bthdInterface的register_app接口
memcpy越界读
源码审计 - CVE-2018-9544/9545
description为一个固定大小的数组
BTIF层通过多个函数调用到BTA层，
导致memcpy越界写
模糊测试
•
优势
•
无需深入了解蓝牙协议
•
结合ASAN和MSAN可以更容易发现不明显的漏洞
•
节省人力
•
劣势
•
没有现成的适合模糊测试的暴露接口
•
部分配置文件/协议栈包含复杂的状态机
模糊测试
•
寻找入口
•
L2CA_Register()，L2CA_Register2()，L2CA_RegisterLECoc()
模糊测试
•
寻找入口
•
L2CA_Register()，L2CA_Register2()，L2CA_RegisterLECoc()
模糊测试
•
寻找入口
•
pL2CA_DataInd_Cb
•
avct | avdt | bnep | eatt | gap | 
gatt | hidd | hidh | rfcomm | sdp
模糊测试 - SDP协议栈
•
测试用例
•
sdp_data_ind函数是sdp协议数据处理入口函数
•
服务端响应数据处理 - sdp_disc_server_rsp
•
客户端请求数据处理 - sdp_server_handle_client_req
模糊测试 - SDP协议栈
•
测试用例
•
p_ccb为当前SDP连接的控制块
•
p_msg为当前需要处理的数据，其
中len代表数据长度，data为可控
数据
需要手动创建p_ccb，并生成sdp db数据，根据上下文设置状态机值和pdu值
模糊测试 - SDP协议栈
•
测试用例
•
调用sdp_init完成sdp协议栈初始化工
作
•
初始化ccb，模拟蓝牙连接状态
•
生成sdp数据库
•
模拟蓝牙连续发包，持续对两个接口进
行测试
•
清理现场
模糊测试 - SDP协议栈
•
测试用例
•
从上一步生成的数据库中选择一个
•
生成不同的状态机，并构造数据进行测
试
总结
•
源码审计
•
使用一个好的平台：https://cs.android.com/
•
从攻击面展开，跟随数据的全生命周期进行代码审计
•
模糊测试
•
在写测试用例的时候，不能只是简单的调用入口函数，而需要根据协议栈的具体情况，考
虑到所有的状态机，并且完成初始化工作，否则无法测试到代码深处 - 模拟真实场景下的
蓝牙交互过程
•
从今年的结果上看，两种方法的产出几乎一样：CVE-2021-39774，CVE-2021-39708，
CVE-2021-39809，CVE-2022-20140，CVE-2022-20221，CVE-2022-20222，CVE-
2022-20224，CVE-2022-20229，CVE-2022-20273，CVE-2022-20283，CVE-2022-
20273，CVE-2022-20283，CVE-2022-20362，CVE-2022-20410
展望
展望
•
关于攻击面
•
常见协议栈上的漏洞会越来越少，需要更多关注新特性（如Android13上的le audio）
•
传统的数据解析导致的越界读写漏洞几乎已经被修复干净，数据在蓝牙进程的全生命周期
的处理也许有更多可能性
•
HAL服务
•
架构设计导致的安全风险 - 并发线程，内存管理，代码错误
•
关于挖掘方法
•
攻击面代码审计 + 核心代码模糊测试
•
相似漏洞挖掘方法 - CodeQL
感谢
Q & A