# AOSP蓝牙漏洞挖掘技术漫谈
## 韩子诺，OPPO安珀实验室

### 关于我
- **韩子诺（ele7enxxh）**：OPPO安珀实验室高级安全专家，专注于Android安全、IoT安全及车联网安全。拥有超过6年的二进制漏洞挖掘与利用经验。
- 曾在Ruxcon、Zer0Con和Pacsec等国际知名会议进行技术演讲。
- 截至目前，累计独立发现数百个Android CVE编号，在Google Bug Hunters排行榜上位列第8名，并在Hackerone高通致谢榜2022年度排名第1。
- 联系方式：ele7enxxh（微博 | 微信 | GitHub）

### 议程
1. **背景**
2. **Android蓝牙协议栈发展历史**
3. **历史漏洞分析**
4. **攻击面**
5. **挖掘方法**
   - 源码审计
   - 模糊测试
6. **展望**
7. **潜在的脆弱点**
8. **更高效的挖掘思路**

### 背景
#### Android蓝牙默认协议栈
- **2.2 - BlueZ**：Linux默认蓝牙协议栈
- **4.2 - Bluedroid**：由博通和Google共同开发，位于`external/bluetooth/bluedroid`
- **6.0 - Fluoride**：新的AVRCP协议实现，重写了BLE扫描、广播、ACL连接管理等多个模块
- **13 - Gabeldorsche**：部分模块开始使用Rust语言编写，位于`/system/bt` 和 `/packages/modules/Bluetooth/system`

### 历史漏洞
- **BlueBorne (2017)**：一组蓝牙HOST层内存破坏漏洞，影响广泛，引发对蓝牙安全的关注
- **BadBluetooth (2019)**：香港中文大学Fenghao Xu发表的论文，揭示了蓝牙配对时的逻辑缺陷
- **BlueFrag (2020)**：一个严重漏洞，允许攻击者通过ACL分包处理中的越界写漏洞远程执行代码

### 历史漏洞分析
- 从2017年1月到2022年10月，共披露至少148个漏洞，其中高危漏洞99个，严重漏洞49个（未统计中危）。
- 2018年发现的漏洞数量最多，占总数近一半，主要是受到BlueBorne的影响。
- 漏洞类型随时间变化：业务逻辑错误 -> 内存破坏 -> 权限校验不当 -> 内存破坏。

### 攻击面
- **系统服务**：`packages/modules/Bluetooth/service/java/com/android/server/bluetooth`
- **库文件**：
  - `libbluetooth_jni`
  - `libbluetooth`
- **Java服务**：`packages/modules/Bluetooth/android/app/src/com/android/bluetooth`

### 挖掘方法
#### 源码审计
- **优势**：
  - 不依赖硬件
  - 方便高效
  - 可以深入理解代码
- **劣势**：
  - 需要深入了解蓝牙协议和架构
  - 对人力要求较高

#### 模糊测试
- **优势**：
  - 无需深入了解蓝牙协议
  - 结合ASAN和MSAN更容易发现不明显的漏洞
  - 节省人力
- **劣势**：
  - 缺乏现成的适合模糊测试的接口
  - 复杂的状态机

### 具体案例
#### 源码审计 - HID简介
- **HID (Human Input Device)**：定义了蓝牙键盘和鼠标的功能
- **API开放**：Android 9.0之后开放HID相关API，主要通过`BluetoothHidDevice`类使用
- **实现代码**：在framework、`libbluetooth_jni`、`libbluetooth`等多个模块中有大量HID实现代码

#### 源码审计 - HIDD工作流程之应用注册
- 应用通过Binder IPC调用`registerApp`接口，参数可控
- `sdp`参数包含多个不定长数据，传入过长值可能导致越界读写

#### 模糊测试 - SDP协议栈
- **入口函数**：`L2CA_Register()`, `L2CA_Register2()`, `L2CA_RegisterLECoc()`
- **数据处理**：`sdp_data_ind`是SDP协议数据处理入口
- **测试用例**：手动创建`p_ccb`并生成SDP数据库，模拟蓝牙连接状态，持续测试接口

### 总结
- **源码审计**：使用好的平台如`https://cs.android.com/`，跟随数据生命周期进行审计
- **模糊测试**：需要考虑所有状态机并完成初始化，模拟真实场景下的蓝牙交互过程

### 展望
- **攻击面**：关注新特性如le audio，传统数据解析漏洞已基本修复
- **HAL服务**：架构设计导致的安全风险，如并发线程、内存管理等
- **挖掘方法**：结合攻击面代码审计和核心代码模糊测试，使用CodeQL进行相似漏洞挖掘

### 感谢
- Q & A环节

希望以上内容能帮助您更好地理解和掌握AOSP蓝牙漏洞挖掘技术。感谢您的关注！