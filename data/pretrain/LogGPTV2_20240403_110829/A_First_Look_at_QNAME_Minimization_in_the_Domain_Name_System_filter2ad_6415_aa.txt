title:A First Look at QNAME Minimization in the Domain Name System
author:Wouter B. de Vries and
Quirin Scheitle and
Moritz M&quot;uller and
Willem Toorop and
Ralph Dolmans and
Roland van Rijswijk-Deij
A First Look at QNAME Minimization
in the Domain Name System
Wouter B. de Vries1(B), Quirin Scheitle2, Moritz M¨uller1,3, Willem Toorop4,
Ralph Dolmans4, and Roland van Rijswijk-Deij1,4
1 University of Twente, Enschede, The Netherlands
PI:EMAIL
2 TUM, Munich, Germany
3 SIDN Labs, Arnhem, The Netherlands
4 NLnet Labs, Amsterdam, The Netherlands
Abstract. The Domain Name System (DNS) is a critical part of net-
work and Internet infrastructure; DNS lookups precede almost any user
request. DNS lookups may contain private information about the sites
and services a user contacts, which has spawned eﬀorts to protect pri-
vacy of users, such as transport encryption through DNS-over-TLS or
DNS-over-HTTPS.
In this work, we provide a ﬁrst look on the resolver-side technique of
query name minimization (qmin), which was standardized in March 2016
as RFC 7816. qmin aims to only send minimal information to authorita-
tive name servers, reducing the number of servers that full DNS query
names are exposed to. Using passive and active measurements, we show
a slow but steady adoption of qmin on the Internet, with a surprising
variety in implementations of the standard. Using controlled experiments
in a test-bed, we validate lookup behavior of various resolvers, and quan-
tify that qmin both increases the number of DNS lookups by up to 26%,
and also leads to up to 5% more failed lookups. We conclude our work
with a discussion of qmin’s risks and beneﬁts, and give advice for future
use.
Keywords: DNS · Privacy · QNAME minimization · Measurements
1 Introduction
The Domain Name System (DNS) plays a crucial role on the Internet. It is
responsible for resolving domain names to IP addresses. The DNS is a hierar-
chical system where each so-called authoritative name server in the hierarchy
is responsible for a part of a domain name. Recursive caching name servers –
or ‘resolvers’ for short – query each level of authoritative name servers in turn
to obtain the ﬁnal answer. Resolvers usually cache responses to improve lookup
speed.
On the Internet every domain resolution, given an empty cache, starts at the
root of the DNS, which has knowledge of the name servers that are responsible
c(cid:2) Springer Nature Switzerland AG 2019
D. Choﬀnes and M. Barcellos (Eds.): PAM 2019, LNCS 11419, pp. 147–160, 2019.
https://doi.org/10.1007/978-3-030-15986-3_10
148
W. B. de Vries et al.
for all the Top-Level Domains (TLDs). Those name servers typically then refer
the recursive resolver on towards yet another name server. This can keep going
indeﬁnitely, only limited by the maximum query name (qname) length, until
ﬁnally the authoritative name server for the requested qname is reached (in
practice the recursive resolver can give up earlier).
In the standard DNS resolution process, outlined in RFC 1034 [24], the recur-
sive resolver, unaware of zone cuts in which diﬀerent parts of the domain are
under control of diﬀerent authorities, sends the full qname to each of the authori-
tative name servers in this chain. Since the ﬁrst two (root and TLD) name servers
in the recursion are very unlikely to be authoritative for the requested qname,
this particular aspect causes unnecessary exposure of potentially private infor-
mation [6]. E.g., exposing the qname of a website that is illegal in some countries
to more parties than necessary might put the querying end-user at serious risk.
A solution for this issue is proposed in RFC 7816 [7], which introduces query
name minimization (qmin), preventing recursive resolvers from sending the full
qname until the authoritative name server for that qname is reached [7].
End-users typically do not run a recursive resolver, but instead depend on
others, such as their ISP, to enable this privacy-preserving feature. From a user’s
perspective, qmin is diﬃcult to detect, making it hard to judge adoption.
In this paper we study the adoption, performance, and security implications
of RFC 7816. Speciﬁcally, we: (1) develop novel methodology to detect whether
a resolver has qmin enabled, and quantify the adoption of qmin over time, both
with active measurements from the end-user perspective, and passive measure-
ments from the authoritative name server perspective, at a root and TLD server,
(2) develop an algorithm to ﬁngerprint qmin implementations, and classify the
use of qmin algorithms in the Internet and, (3) provide insight into the impact
of qmin on performance and result quality for three resolver implementations.
In order to facilitate reproducibility we make our scripts and datasets avail-
able publicly [33].
2 Background and Related Work
When DNS was ﬁrst introduced in the 1980s, there was no consideration for
security and privacy. These topics have now gained considerable importance,
leading to a plethora of RFCs that add security and privacy to the DNS. For
example, DNSSEC [28–30] introduces end-to-end authenticity and integrity, but
no privacy. More recently, DNS-over-TLS [21] and DNS-over-HTTPS [20] added
transport security. “Aggressive Use of DNSSEC-Validated Cache” [18], reduces
unnecessary leaks of non-existing domain names. Furthermore, running a local
copy of the root zone at a resolver avoids sending queries to root servers com-
pletely [19].
Typically, resolvers send the full qname to each authoritative name server
involved in a lookup. Consequently, root servers receive the same query as the
ﬁnal authoritative name server. Since the IETF states that Internet protocols
should minimize the data used to what is necessary to perform a task [12],
A First Look at QNAME Minimization in the Domain Name System
149
qmin was introduced to bring an end to this. Resolvers that implement qmin
only query name servers with a name stripped to one label more than what
that name server is known to be authoritative for. E.g., when querying for
a.b.domain.example, the resolver will ﬁrst query the root for .example, instead
of a.b.domain.example. The reference algorithm for qmin also hides the original
query type by using the NS type instead of the original until the last query. In
Table 1 we show what queries are performed for both standard DNS and the
qmin reference implementation.
This reference algorithm, however, faces two challenges on the real Internet:
First, it does not handle conﬁguration errors in the DNS well [26]. E.g., in case
b.domain.example does not have any RRs but a.b.domain.example does, a name
server should respond with NOERROR for a query to b.domain.example [8], but
in fact often responds with NXDOMAIN, or another invalid RCODE. This would
force resolvers that conform to the standard to stop querying and thereby not
successfully resolve the query. Also, operators report other issues, such as name
servers that do not respond to NS queries, which would break qmin as well [25].
Table 1. DNS queries and responses without (left) and with (right) qmin.
com.
qmin Reference (RFC 7816)
Standard DNS resolution
NS → .
a.b.example.com. A → .
com.
NS ← .
NS ← .
com.
NS → com.
a.b.example.com A → com.
example.com
NS ← com.
example.com NS ← com.
example.com
NS → example.com.
a.b.example.com A → example.com. b.example.com
b.example.com NS ← example.com
a.b.example.com A ← example.com.
NS → example.com.
a.b.example.com NS ← example.com
A → example.com.
example.com
a.b.example.com
a.b.example.com
a.b.example.com A
Second, qmin can lead to a large number of queries. For example, a name with
20 labels would make the resolver issue 21 queries to authoritative name servers,
causing excessive load at the resolver and authoritative. Attackers can abuse this
for DoS attacks by querying excessively long names for victim domains. Both of
these issues led resolver implementors to modify their qmin implementations, as
well as adding so called “strict” and “relaxed” modes, which we investigate in
Subsect. 3.2 and Sect. 5.
As of October 2018, three major DNS resolvers support qmin. Unbound
supports qmin since late 2015 and turned relaxed qmin on by default in May
2018 [25]. Knot resolver uses relaxed qmin since its initial release in May 2016
[13], and the recursive resolver of BIND supports qmin and turned the relaxed
mode on by default in July 2018 [23]. Another frequently used resolver, Pow-
erDNS Recursor, does not support qmin yet [9].
150
W. B. de Vries et al.
Related Work: Hardaker et al. [19] showed that root servers receive a
considerable amount of privacy-sensitive query names, and propose using local
instances of root servers to alleviate this issue. Imana et al. [22] study this
aspect from a broader perspective, covering all name servers above the recursive
resolver, and report similar privacy issues.
Schmitt et al. [32] propose Oblivious DNS, an obfuscation method introduc-
ing an additional intermediate resolver between recursive resolver and authorita-
tive name servers. Oblivious DNS prevents the additional resolver from learning
the user’s IP address and the recursive resolver from learning the query name.
Recent work [34] has also shown that qmin increases the number of queries
per lookup, increasing the load on authoritative name servers. They provide a
technique called NXDOMAIN optimization that reduces the number of queries in
case the resolver encounters an NXDOMAIN. We extend this by providing longitu-
dinal measurements, showing various implementations of qmin algorithms and
quantifying the increase in queries per resolver implementation.
3 Active Internet-Wide Measurements
We conduct active Internet-wide measurements using two methods. First, we use
RIPE Atlas probes to query a domain under our control. Second, we query open
resolvers for the same domain. RIPE Atlas is a global measurement network with
over 10,000 small devices called probes, and 370 larger probes, called anchors.
In this section, we measure qmin adoption over time, classify the various qmin
implementations in use, and shed light on qmin use by open resolvers.
3.1 Resolver Adoption over Time
We detect qmin support by relying on the fact that a non-qmin resolver will miss
any delegation that happens in one of the labels before the terminal label. So, if
we delegate to a diﬀerent name server, with a diﬀerent record for the terminal
label in one of the labels before the terminal label, qmin resolvers will ﬁnd a
diﬀerent answer than non-qmin resolvers.
We scheduled a RIPE Atlas measurement for all probes to perform a lookup
with all the probe’s resolvers for “a.b.qnamemin-test.domain.example” with type
TXT [1], repeating every hour. Each probe uses its own list of resolvers, typically
obtained via DHCP, and assumed typical for the network that hosts the probe.
A non-qmin resolver will send a query for the full qname to the authoritative
name server for “qnamemin-test.domain.example”, and will end up with a TXT
reply containing the text: “qmin NOT enabled.” A qmin resolver will send a
query for just the second-to-last label, “b.qnamemin-test.domain.example”, to
the authoritative name server for “qnamemin-test.domain.example”. For this
minimized query, it will receive a delegation to a diﬀerent name server, which
will return a TXT record containing the text: “qmin enabled.”
This measurement runs since April 2017, and allows us to see the long term
adoption of qmin. Figure 1b shows the overall adoption of qmin as seen from all
A First Look at QNAME Minimization in the Domain Name System
151
RIPE Atlas probes. We count both probes and probe/resolver combinations, as
a signiﬁcant number of probes uses multiple resolvers. Adoption grew from 0.7%
(116 of 17,663) of probe/resolver pairs in April 2017 to 8.8% (1,662 of 18,885) in
October 2018. Also in April 2017, 0.9% (82 of 9,611) of RIPE Atlas probes had
at least one qmin resolver, growing to 11.7% (1,175 of 10,020) in October 2018.
Fig. 1. Adoption over time
In Fig. 1a only probe/resolver pairs supporting qmin are shown. We see a
steep rise of qmin resolvers in April 2018. Figure 1a also shows probes that have
at least one qmin resolver as well as at least one resolver that does not do qmin.
It is noteworthy that at the last measurement (October 15, 2018) at least 31%
of probes that have a qmin resolver, also have at least one non-qmin resolver.
Alongside the qmin measurement, we run measurements that return the IP
address of the resolver as seen from an authoritative name server [2,3,5]. By
identifying the Autonomous System Numbers (ASNs) associated with the IP
addresses seen at the authoritative name server we gain insight in the orga-
nizations providing the qmin resolvers. From this we learn that the adoption
of Cloudﬂare (1.1.1.1) is responsible for the fast rise of qmin resolvers in
April 2018.