# A First Look at QNAME Minimization in the Domain Name System

**Authors:**
- Wouter B. de Vries<sup>1</sup>
- Quirin Scheitle<sup>2</sup>
- Moritz Müller<sup>1,3</sup>
- Willem Toorop<sup>4</sup>
- Ralph Dolmans<sup>4</sup>
- Roland van Rijswijk-Deij<sup>1,4</sup>

**Affiliations:**
1. University of Twente, Enschede, The Netherlands
2. TUM, Munich, Germany
3. SIDN Labs, Arnhem, The Netherlands
4. NLnet Labs, Amsterdam, The Netherlands

## Abstract

The Domain Name System (DNS) is a critical component of network and Internet infrastructure, with DNS lookups preceding almost any user request. These lookups may contain private information about the sites and services a user contacts, which has led to efforts to protect user privacy, such as transport encryption through DNS-over-TLS or DNS-over-HTTPS.

In this work, we provide an initial analysis of the resolver-side technique of query name minimization (qmin), standardized in March 2016 as RFC 7816. qmin aims to send only minimal information to authoritative name servers, reducing the number of servers that see full DNS query names. Using both passive and active measurements, we demonstrate a slow but steady adoption of qmin on the Internet, with a surprising variety in implementations of the standard. Through controlled experiments in a test-bed, we validate the lookup behavior of various resolvers and quantify that qmin increases the number of DNS lookups by up to 26% and leads to up to 5% more failed lookups. We conclude our work with a discussion of qmin's risks and benefits, and provide advice for future use.

**Keywords:** DNS, Privacy, QNAME minimization, Measurements

## 1. Introduction

The Domain Name System (DNS) plays a crucial role on the Internet by resolving domain names to IP addresses. The DNS is hierarchical, with each authoritative name server responsible for a part of a domain name. Recursive caching name servers, or "resolvers," query each level of authoritative name servers to obtain the final answer, usually caching responses to improve lookup speed.

On the Internet, every domain resolution, given an empty cache, starts at the root of the DNS, which knows the name servers responsible for all Top-Level Domains (TLDs). These name servers then refer the recursive resolver to other name servers, continuing until the authoritative name server for the requested query name (qname) is reached.

In the standard DNS resolution process, the recursive resolver, unaware of zone cuts, sends the full qname to each authoritative name server in the chain. This exposes potentially private information, as the first two (root and TLD) name servers are unlikely to be authoritative for the requested qname. RFC 7816 introduces query name minimization (qmin) to prevent recursive resolvers from sending the full qname until the authoritative name server for that qname is reached.

End-users typically do not run their own recursive resolvers, relying instead on others, such as their ISP, to enable this privacy-preserving feature. From a user's perspective, qmin is difficult to detect, making it hard to judge adoption.

In this paper, we study the adoption, performance, and security implications of RFC 7816. Specifically, we:
1. Develop a novel methodology to detect whether a resolver has qmin enabled and quantify the adoption of qmin over time using both active and passive measurements.
2. Develop an algorithm to fingerprint qmin implementations and classify the use of qmin algorithms on the Internet.
3. Provide insight into the impact of qmin on performance and result quality for three resolver implementations.

To facilitate reproducibility, we make our scripts and datasets publicly available [33].

## 2. Background and Related Work

When DNS was introduced in the 1980s, there was no consideration for security and privacy. These topics have since gained significant importance, leading to numerous RFCs that add security and privacy to the DNS. For example, DNSSEC [28–30] introduces end-to-end authenticity and integrity, but no privacy. More recently, DNS-over-TLS [21] and DNS-over-HTTPS [20] added transport security. “Aggressive Use of DNSSEC-Validated Cache” [18] reduces unnecessary leaks of non-existing domain names. Running a local copy of the root zone at a resolver avoids sending queries to root servers completely [19].

Typically, resolvers send the full qname to each authoritative name server involved in a lookup. Consequently, root servers receive the same query as the final authoritative name server. Since the IETF states that Internet protocols should minimize the data used to what is necessary to perform a task [12], qmin was introduced to address this. Resolvers that implement qmin only query name servers with a name stripped to one label more than what that name server is known to be authoritative for. For example, when querying for `a.b.domain.example`, the resolver will first query the root for `.example` instead of `a.b.domain.example`. The reference algorithm for qmin also hides the original query type by using the NS type instead of the original until the last query. Table 1 shows the queries performed for both standard DNS and the qmin reference implementation.

| **Standard DNS Resolution** | **QMIN Reference (RFC 7816)** |
|-----------------------------|-------------------------------|
| `NS → .`                     | `a.b.example.com. A → .`      |
| `com. NS ← .`                | `com. NS ← .`                 |
| `NS → com.`                  | `a.b.example.com A → com.`    |
| `example.com NS ← com.`      | `example.com NS ← com.`       |
| `NS → example.com.`          | `b.example.com NS ← com.`     |
| `a.b.example.com A ← example.com.` | `a.b.example.com A ← example.com.` |

However, the reference algorithm faces two challenges on the real Internet:
1. It does not handle configuration errors in the DNS well [26]. For example, if `b.domain.example` does not have any resource records (RRs) but `a.b.domain.example` does, a name server should respond with NOERROR for a query to `b.domain.example` [8], but often responds with NXDOMAIN or another invalid RCODE. This would force resolvers that conform to the standard to stop querying and fail to resolve the query.
2. Operators report other issues, such as name servers that do not respond to NS queries, which would break qmin [25].

Additionally, qmin can lead to a large number of queries. For example, a name with 20 labels would make the resolver issue 21 queries to authoritative name servers, causing excessive load at the resolver and authoritative. Attackers can abuse this for DoS attacks by querying excessively long names for victim domains. Both of these issues led resolver implementors to modify their qmin implementations, adding "strict" and "relaxed" modes, which we investigate in Subsection 3.2 and Section 5.

As of October 2018, three major DNS resolvers support qmin. Unbound supports qmin since late 2015 and turned relaxed qmin on by default in May 2018 [25]. Knot resolver uses relaxed qmin since its initial release in May 2016 [13], and the recursive resolver of BIND supports qmin and turned the relaxed mode on by default in July 2018 [23]. Another frequently used resolver, PowerDNS Recursor, does not yet support qmin [9].

### Related Work

Hardaker et al. [19] showed that root servers receive a considerable amount of privacy-sensitive query names and propose using local instances of root servers to alleviate this issue. Imana et al. [22] study this aspect from a broader perspective, covering all name servers above the recursive resolver, and report similar privacy issues.

Schmitt et al. [32] propose Oblivious DNS, an obfuscation method introducing an additional intermediate resolver between recursive resolver and authoritative name servers. Oblivious DNS prevents the additional resolver from learning the user’s IP address and the recursive resolver from learning the query name.

Recent work [34] has shown that qmin increases the number of queries per lookup, increasing the load on authoritative name servers. They provide a technique called NXDOMAIN optimization that reduces the number of queries in case the resolver encounters an NXDOMAIN. We extend this by providing longitudinal measurements, showing various implementations of qmin algorithms and quantifying the increase in queries per resolver implementation.

## 3. Active Internet-Wide Measurements

We conduct active Internet-wide measurements using two methods. First, we use RIPE Atlas probes to query a domain under our control. Second, we query open resolvers for the same domain. RIPE Atlas is a global measurement network with over 10,000 small devices called probes and 370 larger probes, called anchors.

### 3.1 Resolver Adoption Over Time

We detect qmin support by relying on the fact that a non-qmin resolver will miss any delegation that happens in one of the labels before the terminal label. So, if we delegate to a different name server, with a different record for the terminal label in one of the labels before the terminal label, qmin resolvers will find a different answer than non-qmin resolvers.

We scheduled a RIPE Atlas measurement for all probes to perform a lookup with all the probe’s resolvers for `a.b.qnamemin-test.domain.example` with type TXT [1], repeating every hour. Each probe uses its own list of resolvers, typically obtained via DHCP, and assumed typical for the network that hosts the probe.

A non-qmin resolver will send a query for the full qname to the authoritative name server for `qnamemin-test.domain.example`, and will end up with a TXT reply containing the text: "qmin NOT enabled." A qmin resolver will send a query for just the second-to-last label, `b.qnamemin-test.domain.example`, to the authoritative name server for `qnamemin-test.domain.example`. For this minimized query, it will receive a delegation to a different name server, which will return a TXT record containing the text: "qmin enabled."

This measurement has been running since April 2017, allowing us to see the long-term adoption of qmin. Figure 1b shows the overall adoption of qmin as seen from all RIPE Atlas probes. We count both probes and probe/resolver combinations, as a significant number of probes use multiple resolvers. Adoption grew from 0.7% (116 of 17,663) of probe/resolver pairs in April 2017 to 8.8% (1,662 of 18,885) in October 2018. Also in April 2017, 0.9% (82 of 9,611) of RIPE Atlas probes had at least one qmin resolver, growing to 11.7% (1,175 of 10,020) in October 2018.

![Adoption over time](fig1.png)

In Figure 1a, only probe/resolver pairs supporting qmin are shown. We see a steep rise of qmin resolvers in April 2018. Figure 1a also shows probes that have at least one qmin resolver as well as at least one resolver that does not do qmin. Notably, at the last measurement (October 15, 2018), at least 31% of probes that have a qmin resolver also have at least one non-qmin resolver.

Alongside the qmin measurement, we run measurements that return the IP address of the resolver as seen from an authoritative name server [2,3,5]. By identifying the Autonomous System Numbers (ASNs) associated with the IP addresses seen at the authoritative name server, we gain insight into the organizations providing the qmin resolvers. From this, we learn that the adoption of Cloudflare (1.1.1.1) is responsible for the fast rise of qmin resolvers in April 2018.