 adds r16 = 96, r32  
 // ptr to ctx->KEY[2] 
0096|80 C0 82 00 42 00             
 adds r8 = 88, r32 
 // ptr to ctx->KEY[0] 
009C|00 00 04 00                    
 nop.i 0 
00A0|09 18 70 41 00 21             
 adds r3 = 92, r32 
 // ptr to ctx->KEY[1] 
00A6|F0 20 88 20 28 00             
 ld4 r15 = [r34], 4  
 // load z 
00AC|44 06 01 84                    
 adds r32 = 100, r32;; 
 // ptr to ctx->KEY[3] 
00B0|08 98 00 20 10 10             
 ld4 r19 = [r16]  
 // r19=k2 
00B6|00 01 00 00 42 40             
 mov r16=r0         
 // r0 一直是 0 
00BC|00 08 CA 00                     
 mov.i r2 = ar.lc 
 // 保存 lc 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 93 章  安 腾 指 令 
861 
00C0|05 70 00 44 10 10 9E FF FF FF 7F 20  ld4 r14 = [r34]   
 // load y 
00CC|92 F3 CE 6B                    
 movl r17 = 0xFFFFFFFF9E3779B9;; // TEA_DELTA 
00D0|08 00 00 00 01 00             
 nop.m 0 
00D6|50 01 20 20 20 00             
 ld4 r21 = [r8]   
 // r21=k0 
00DC|F0 09 2A 00                    
 mov.i ar.lc = 31 
 //TEA_ROUNDS=32 
00E0|0A A0 00 06 10 10             
 ld4 r20 = [r3];; 
 // r20=k1 
00E6|20 01 80 20 20 00             
 ld4 r18 = [r32] 
 // r18=k3 
00EC|00 00 04 00                    
 nop.i 0 
00F0| 
00F0|                                         loc_F0: 
00F0|09 80 40 22 00 20              
 add r16 = r16, r17  
 //r16=sum, r17=TEA_DELTA 
00F6|D0 71 54 26 40 80              
 shladd r29 = r14, 4, r21  
 // r14=y, r21=k0 
00FC|A3 70 68 52                    
 extr.u r28 = r14, 5, 27;; 
0100|03 F0 40 1C 00 20             
 add r30 = r16, r14 
0106|B0 E1 50 00 40 40             
 add r27 = r28, r20;; 
 // r20=k1 
010C|D3 F1 3C 80                    
 xor r26 = r29, r30;; 
0110|0B C8 6C 34 0F 20             
 xor r25 = r27, r26;; 
0116|F0 78 64 00 40 00             
 add r15 = r15, r25    
 // r15=z 
011C|00 00 04 00                    
 nop.i 0;; 
0120|00 00 00 00 01 00             
 nop.m 0 
0126|80 51 3C 34 29 60             
 extr.u r24 = r15, 5, 27 
012C|F1 98 4C 80                    
 shladd r11 = r15, 4, r19  
 // r19=k2 
0130|0B B8 3C 20 00 20             
 add r23 = r15, r16;; 
0136|A0 C0 48 00 40 00             
 add r10 = r24, r18         
 // r18=k3 
013C|00 00 04 00                    
 nop.i 0;; 
0140|0B 48 28 16 0F 20             
 xor r9 = r10, r11;; 
0146|60 B9 24 1E 40 00             
 xor r22 = r23, r9 
014C|00 00 04 00                    
 nop.i 0;; 
0150|11 00 00 00 01 00             
 nop.m 0 
0156|E0 70 58 00 40 A0             
 add r14 = r14, r22 
015C|A0 FF FF 48                    
 br.cloop.sptk.few loc_F0;; 
0160|09 20 3C 42 90 15             
 st4 [r33] = r15, 4      
 // store z 
0166|00 00 00 02 00 00             
 nop.m 0                   
016C|20 08 AA 00                    
 mov.i ar.lc = r2;;   
 // restore lc legister 
0170|11 00 38 42 90 11             
 st4 [r33] = r14          
 // store y 
0176|00 00 00 02 00 80             
 nop.i 0 
017C|08 00 84 00                    
 br.ret.sptk.many b0;; 
上述 IA64 指令很有特点。 
首先，每 3 条指令构成一个指令字（instruction bundles）。每个指令字的长度都是 16 字节即 128 位，
由 1 个 5 位的模版字段和 3 个 41 位微操作指令构成。IDA 把这些指令组分为（6 + 6 + 4）字节的结构体，以
便于调试人员进行区分。 
除了含有停止位（stop bit）的指令之外，这些由 3 条微操作指令构成的指令字，通常都由 CPU 并行
处理。 
据称，Intel 和 HP 的开发人员针对常见指令进行了模式划分，从而推出了指令字类型（即指令模版）
的概念—声明指令字运算资源的模版字段。CPU 依此把指令字区分为 12 种基本类型（basic bundle types），
基本类型又分为带停止位的版本和不带停止位的版本。举例来说，第 0 类指令字叫作 MII 类指令字，依次
由内存读写微操作指令（M）和两条整数运算的微操作指令（II）构成；最后一类指令，即 0x1d 类指令字，
又叫作 MFB 类指令字，依次由内存读写微操作指令（M）、浮点数运算微操作指令（F）、分支（转移）微
操作指令（B）构成。 
如果编译器在指令字的指令位（instruction slot）上编排不了相应的微操作指令，那么它可能在这些指
令位上安插空操作指令 nop。您可能注意到了，本文中的 nop 指令分为“nop，i”和“nop，m”。i 代表该
nop 指令占用整数（integer）处理单元，属于整数运算型微操作指令；m 代表它占用内存处理单元，属于
内存操作型微操作指令。在人工编写汇编语言时，编辑程序会自动插入相应的 nop 指令。 
IA64 汇编指令的特性不止这些。该平台的指令字还可进行分组，构成指令组（instruction group）。指
令组可由任意个连续运算的指令字和一个含有停止位的指令字构成，是一个可并行执行的指令集合。在实
异步社区会员 dearfuture(15918834820) 专享 尊重版权
862 
逆向工程权威指南（下册） 
际应用中，安腾 2 处理器可以并行执行 2 路指令字，即同时处理 6 个微操作指令。 
这就要求指令字中的各微操作指令和每个指令组的各指令字之间互不干扰，即不存在数据竞争。如果
存在数据竞争、形成脏数据，那么运算结果不可控（undefined）。 
在 IDA 中，微操作指令之后的两个分号（；；）表示该指令有停止位。可见，［90-ac］及［b0-bc］分别
属于可并行执行的两个指令组，它们之间不存在互扰。下一组则是［b0-cc］。 
另外，在 10c 处的指令，以及下一条位于 110 处的指令都有停止位。这就意味着 CPU 会在与其他指令
隔绝的情况下运行这两个指令，这种运行模式就和常规的 CISC/复杂指令集的执行方式完全相同了。这是
由于后续指令，即 110 处的指令需要前一条指令的运行结果（R26）寄存器，所以不能并行处理这两条指
令。很明显，此时编译器不能找到更好的并行处理手段，无法更有效地利用 CPU，所以在此添加了 2 个停
止位和多个 NOP 指令。虽说编译器在智能方面很不成熟，但是人工的 IA64 汇编编程也丝毫不轻松：程序
员要手动完成指令字分组的工作。 
要图省事的话，程序员可以给每条指令添加停止位，不过这将大幅度地浪费安腾处理器的运算性能。 
Linux 内核的源代码中，就有一些经典的、手写 IA64 汇编代码。有兴趣的读者可参考：http://lxr.free- 
electrons.com/source/arch/ia64/lib/。 
有关 IA64 汇编语言人工编程的具体方法，可参见 Mike Burrell 撰写的专业论著《Writing Effcient Itanium 2 
Assembly Code》（http://yurichev.com/mirrors/RE/itanium.pdf）。有关汇编语言指令字的详细说明，请参见
Phrack Itanium 的帖子 http://phrack.org/issues/57/5.html。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9944 章
章    88008866 的
的寻
寻址
址方
方式
式  
在 MS-DOS 及 Win16（参见本书 78.3 节和 53.5 节）平台的 16 位应用程序中，我们可以看到程序指针由
两个 16 位值构成。这是什么情况？不得不说这是 MS-DOS 和 8086 的另一大怪异的特色。 
虽然 8086/8088 属于 16 位 CPU，但是它却有 20 位的 RAM 地址空间（内存总线有 20 个引脚）；即，
它可直接寻址的存储空间只有 1MB。这 1MB 的外部内存空间又被划分为 RAM（最大 640kB）、ROM、显
卡内存、EMS 卡，等等。 
16 位的 8086/8088 CPU 实际上由 8080 CPU 发展而来。8080 CPU 的地址空间只有 16 位，所以可直接
控制的内存只有 64KB。大概是 8086 的设计者认为 64KB 空间不够用，而且 8086 还要兼容 8080 平台的程
序，所以就把 20 位/1MB 的内存划分为若干个段使用。这就是早期玩具级的虚拟内存技术的思路。而 8086
的寄存器又只是 16 位寄存器，为了进行更大范围（20 位）的寻址，它就得借助新推出的段寄存器。从此 CPU
就有了 CS、DS、ES 和 SS 寄存器。20 位的内存指针由短寄存器和地址寄存器对（DS:BX）混合计算而来： 
(
)
_
_
4
_
real
address
segment
register
address
register
=
  +
举例来说，过去 IBM PC 兼容的主机，其显卡（EGA、VGA）的显存都只有 64KB。要读写显存，就
要在某个段寄存器里（例如 DS）写入 0xA000。如此一来，程序就可使用 DS:0~DS:0xFFFF 访问整个显存。
虽然地址总线是 20 位的，超过了 16 位寄存器的表达范围，但是 CPU 可借助段寄存器毫无障碍地访问
0xA0000～0AFFFF。 
程序还可能直接访问固定的内存地址，例如 0x1234，但是操作系统加载应用程序到起始地址却不是固
定的。段寄存器的出现，解决了这种问题——它可由段寄存器进行相对寻址，应用程序不必关心自己到底
被加载到了什么 RAM 地址上。 
实际上，MS-DOS 系统下的指针由段地址和段内地址构成，可由两个 16 位的数值表示。20 位地址总
线足以满足这种寻址方式的需要。不过，程序员就需要重新计算内存地址了：他们要不停地考虑空间和效
率的平衡，仔细规划数据栈的分配情况。 
另外，8086 的寻址方式决定了每个内存块不能大于 64KB。 
80286 平台仍然继承了段寄存器（segment registers），只是用途不同而已。 
在支持更大 RAM 的 80386 CPU 问世时，市面上流行的仍然是 MS-DOS。更有一大批叫作 DOS extenders
的 DOS 粉丝在 Windows 系统问世以后继续坚守 DOS 阵地。他们甚至开发出各种像模像样的 OS 系统。这
种系统不仅实现了 CPU 保护模式的切换功能，而且大幅度地改进了内存 API，可继续支持 MS-DOS 的应
用程序。著名的有：DOS/4GW（游戏巨作 DOOM 就是面向它编译的）、Phar Lap 和 PMODE。 
在 Win32 之前，16 位的 Windows 3.x 仍然沿用了这种寻址方式。 
≪
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9955 章
章    基
基本
本块
块重
重排
排  
95.1  PGO 的优化方式 
PGO 是 Profile-guided optimization 的缩写，中文有“配置文件引导的优化”等译法。经 PGO 方式优化
以后，程序中的某些基本块（basic block）（所谓基本块，指的是程序里顺序执行的语句序列。基本块由第
一个语句构成入口，由最后一个语句构成出口。在执行程序时，不可从入口以外进入该基本块（被跳入），
也不可从出口以外的地址跳出该基本块。）可能会被调整到可执行文件的任意位置。 
很明显，函数中的程序代码存在执行频率的差异。例如，循环语句一类代码的执行频率必然很高，而
错误报告、异常处理之类代码的执行频率较低。 
在使用 PGO 时，编译器首先会生成一种可记录运行细节的特殊程序。而后，研发人员通过试运行的手
段收集该程序的各项统计信息。最后，编译器根据这些统计信息对可执行文件进行调整和优化，把执行几
率较小的基本块挪到其他地方。 
在经 PGO 优化后的程序里，频繁执行的函数代码会被调整得更为紧凑。PGO 优化了条件跳转的性能，
提高了 CPU 分支预测的准确率。这些特性均有助于提升程序性能。 
Oracle 是由 Intel C++编译器生成的程序。本文收录了 Oracle 中 orageneric11.dll（Win32）的部分代码。 
指令清单 95.1  orageneric11.dll（Win32） 
                   public _skgfsync 
_skgfsync         proc near 
; address 0x6030D86A 
                   db       66h 
                   nop 
                   push     ebp 
                   mov      ebp,  esp 
                   mov      edx, [ebp+0Ch] 
                   test     edx, edx 
                   jz        short loc_6030D884 
                   mov      eax, [edx+30h] 
                   test     eax, 400h 
                   jnz      __VInfreq__skgfsync  ; write to log 
continue:  
                   mov      eax, [ebp+8] 
                   mov      edx, [ebp+10h] 
                   mov      dword ptr [eax], 0 
                   lea      eax, [edx+0Fh] 
                   and      eax, 0FFFFFFFCh 
                   mov      ecx, [eax] 
                   cmp      ecx, 45726963h 
                   jnz      error                 ; exit with error 
                   mov      esp, ebp 
                   pop      ebp 
                   retn 
_skgfsync        endp 
... 
; address 0x60B953F0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 95 章  基本块重排 
865 
__VInfreq__skgfsync: 
                   mov      eax, [edx] 
                   test     eax, eax 
                   jz        continue 
                   mov      ecx, [ebp+10h] 
                   push     ecx 
                   mov      ecx, [ebp+8] 
                   push     edx 
                   push     ecx 
                   push     offset ... ; "skgfsync(se=0x%x, ctx=0x%x, iov=0x%x)\n" 
                   push     dword ptr [edx+4] 
                   call     dword ptr [eax] ; write to log 
                   add      esp, 14h 
                   jmp      continue 
error: 
                   mov      edx, [ebp+8] 
                   mov      dword ptr [edx], 69AAh ; 27050 "function called with invalid FIB/IOV structure" 
                   mov      eax, [eax] 
                   mov      [edx+4], eax 
                   mov      dword ptr [edx+8], 0FA4h ; 4004 
                   mov      esp, ebp 
                   pop      ebp 
                   retn 
; END OF FUNCTION CHUNK FOR _skgfsync 
上述两个基本块的地址相距 9MB 左右。 
在这个文件中，所有的不常用函数都位于 DLL 文件的尾部。这部分不常用函数都被 Intel C++编译器
打上了 VInfreq 前缀。例如，我们看到函数尾部的部分代码用于记录 log 文件（大概用于错误、警告和异常
处理）。因为 Oracle 开发人员在试运行期间收集统计信息时，它的执行概率较低（甚至没被执行过），所以
它们被标注上了__VInfreq 前缀。最终，这个日志基本块把控制流返回给位于“热门地区”的函数代码。 
程序里另外一处“不常用”的区间是返回错误代码 27050 的基本块。 
在 Linux ELF 环境下，Intel C++编译器会在 ELF 文件里通过.hot/.unlikely 标记“热门”/“冷门”
基本块。 
以逆向工程的角度来看，这些信息可用来辨别函数的核心部分和异常处理部分。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第十
十一
一部
部分
分  
推
推荐
荐阅
阅读
读  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
868 
逆向工程权威指南 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 9966 章
章    参
参  考
考  书
书  籍
籍  
96.1  Windows 
Mark E. Russinovich､ David A. Solomon 与 Alex Ionescu 合著的《Windows Internals: Including Windows 
Server 2008 and Windows Vista, Fifth Edition》2009。 
96.2  C/C++ 
《ISO/IEC 14882:2011 (C++ 11 standard)》。 
此外，读者可参见 http://go.yurichev.com/17275（2013）。 
96.3  x86/x86-64 