### 容器状态概述

| CONTAINER ID | IMAGE       | COMMAND              | CREATED      | STATUS                    | PORTS | NAMES          |
|--------------|-------------|----------------------|--------------|---------------------------|-------|----------------|
| 7dbc5bafd5805 | ubuntu:latest | `echo hello`         | 7秒前        | 已退出 (0) 6秒前         | -     | hopeful_bartik |
| f40f1463221f  | ubuntu:latest | `/bin/sh -c 'while`  | 16分钟前    | 运行中 16分钟             | -     | -              |

上表展示了最近创建的两个容器的运行情况。

### 2.1.3 启动容器

通过 `docker run` 命令创建的容器会直接进入运行状态，而使用 `docker create` 创建的容器则处于停止状态。要启动一个已停止的容器，可以使用 `docker start` 命令。

例如，启动名为 `inspect_shell` 的已停止容器：
```bash
$ sudo docker start inspect_shell
```
或者通过容器ID启动：
```bash
$ sudo docker start 761ef6d4b28f
```

容器在运行过程中可能会因各种问题而异常退出。有时我们需要根据错误码来判断是否需要重启容器。默认情况下，容器不会自动重启。为了使容器在退出后自动重启，可以使用 `--restart` 参数。该参数会检查容器的退出码，并据此决定是否重启。

示例命令：
```bash
$ sudo docker run --restart=always --name docker_restart -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"
```

在这个例子中，`--restart` 参数设置为 `always`，表示无论退出码如何，Docker 都会尝试重启容器。还可以设置为 `on-failure`，只有当退出码非零时才会重启容器。此外，可以指定最大重启次数，如：
```bash
--restart=on-failure:5
```
这表示当收到非零退出码时，最多尝试重启容器5次。

### 2.1.4 终止容器

终止容器的方式有多种。当容器发生严重错误时，它会因异常而退出并带有错误码。可以通过错误码来判断容器内部发生的错误。对于交互型容器，可以在 shell 中输入 `exit` 或使用 `Ctrl+D` 组合键退出。对于交互型和后台型容器，都可以使用 `docker stop` 命令停止：

```bash
$ sudo docker stop daemon_while
```

也可以通过容器ID停止：
```bash
$ sudo docker stop f40f1463221f
```

`docker stop` 命令会给容器中的进程发送 `SIGTERM` 信号，默认会导致容器退出。如果需要强制停止容器，可以使用 `docker kill` 命令，它会发送 `SIGKILL` 信号，强制容器退出。

### 2.1.5 删除容器

当一个容器停止时，它并没有消失，只是进入了停止状态，必要时可以重新运行。如果确定不再需要某个容器，可以使用 `docker rm` 命令删除它：

```bash
$ sudo docker rm hopeful_bartik
```

需要注意的是，不能删除正在运行的容器。必须先停止容器才能删除。例如：
```bash
$ docker ps
CONTAINER ID   IMAGE          COMMAND       CREATED       STATUS       PORTS     NAMES
dfc72feb607b   ubuntu:14.04   "/bin/sh"     13秒前       运行中 12秒   -         modest_mestorf

$ docker rm modest_mestorf
Error response from daemon: You cannot remove a running container. Stop the container before attempting removal or use –f
FATA[0000] Error: failed to remove one or more containers
```

此时会输出错误提示。可以使用 `-f` 选项强制删除：
```bash
$ docker rm -f modest_mestorf
```

Docker 没有一条命令可以一次性删除所有容器，但可以通过以下命令实现：
```bash
docker rm `docker ps -a -q`
```

### 2.2 容器内信息获取和命令执行

#### 2.2.1 依附容器

`attach` 操作通常用于由 `docker start` 或 `docker restart` 启动的交互型容器。由于 `docker start` 启动的交互型容器没有具体终端可依附，可以通过 `attach` 命令将终端依附到容器上。

示例：
```bash
$ docker run -i -t --name ubuntu ubuntu:14.04 /bin/sh
# ls
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
# ^C
#
$ docker start ubuntu
$ docker attach ubuntu
# ls
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
#
```

注意，使用 `attach` 命令依附容器后，需要多按一次回车才会出现容器的 shell 交互界面。

对于后台型容器，无法通过 `attach` 依附终端，因为它本身不接受用户交互输入。

#### 2.2.2 查看容器日志

对于交互型容器，查看配置信息或调试程序比较方便。但对于后台型容器，可以使用 `docker logs` 命令查看日志。

首先，创建一个不断输出内容的后台型容器：
```bash
$ sudo docker run -d --name deamon_logs ubuntu /bin/bash -c 'for((i=0;1;i++));do echo $i;sleep 1;done;'
```

然后，使用 `docker logs` 查看其输出：
```bash
$ sudo docker logs -f deamon_logs
0
1
2
3
...
```

默认情况下，`logs` 输出从容器启动到调用命令时的所有输出。使用 `-f` 标志可以实时查看日志。如果只想查看最后几行日志，可以使用 `--tail` 参数：
```bash
$ sudo docker logs -f --tail=5 daemon_logs
723
724
725
726
727
...
```

还可以通过 `-t` 标志查看日志生成的时间戳：
```bash
$ sudo docker logs -f --tail=5 -t daemon_logs
2014-12-27T08:16:00.873690621Z 755
2014-12-27T08:16:01.875306639Z 756
2014-12-27T08:16:02.880058459Z 757
2014-12-27T08:16:03.884377275Z 758
2014-12-27T08:16:04.885695676Z 759
...
```

#### 2.2.3 查看容器进程

使用 `docker top` 命令可以查看容器中正在运行的进程。

首先，创建一个后台型容器：
```bash
$ sudo docker run -d --name="deamon_top" ubuntu /bin/bash -c 'while true;do sleep 1; done'
```

然后，使用 `docker top` 查看容器中的进程：
```bash
$ sudo docker top deamon_top
UID         PID         PPID        C          STIME       TTY         TIME        CMD
root        11699       1158        0          16:38       ?           00:00:00    /bin/bash -c while true;do sleep 1; done
root        11778       11699       0          16:39       ?           00:00:00    sleep 1
```

可以看到，这里有两个进程：一个是 `while` 循环的进程，另一个是 `while` 循环内部运行的 `sleep` 进程。

#### 2.2.4 查看容器信息

使用 `docker inspect` 命令可以查看容器的配置信息，包括容器名、环境变量、运行命令、主机配置、网络配置和数据卷配置等。

示例：
```bash
$ sudo docker inspect daemon_dave
[
    {
        "ID": "c2c4e57c12c4c142271c031333823af95d64b20b5d607970c334784430bcbd0f",
        "Created": "2014-05-10T11:49:01.902029966Z",
        "Path": "/bin/sh",
        "Args": [
            "-c",
            "while true; do echo hello world; sleep 1; done"
        ],
        "Config": {
            "Hostname": "c2c4e57c12c4",
            ...
        }
    }
]
```

使用 `-f` 或 `--format` 标志可以查看指定部分的信息。例如，查询容器的运行状态：
```bash
$ sudo docker inspect --format='{{ .State.Running }}' daemon_dave
false
```

查询容器的 IP 地址：
```bash
$ sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' daemon_dave
```

同时可以查看多个信息，例如查看容器名和运行状态：
```bash
$ sudo docker inspect --format '{{.Name}} {{.State.Running}}' daemon_dave bob_the_container
/daemon_dave false
/bob_the_container false
```

#### 2.2.5 容器内执行命令

在容器启动时，通常需要指定要执行的程序。然而，有时需要在容器运行中途启动另一个程序。从 Docker 1.3 开始，可以使用 `docker exec` 命令在容器中运行新的任务，它可以创建两种任务：后台型任务和交互型任务。

后台型任务示例：
```bash
$ sudo docker exec -d daemon_dave touch /etc/new_config_file
```

交互型任务示例：
```bash
$ sudo docker exec -t -i daemon_dave /bin/bash
```

### 2.3 容器的导入和导出

Docker 的流行与其对容器的易分享和易移植密不可分。用户不仅可以把容器提交到公共服务器上，还可以将容器导出到本地文件系统中。同样，可以将导出的容器重新导入到 Docker 运行环境中。Docker 的导入和导出分别由 `import` 命令和 `export` 命令完成。

首先，创建一个容器：
```bash
$ sudo docker run -i -t --name=inspect_import ubuntu /bin/bash
```

然后按需修改容器，安装软件，配置系统环境。完成后，可以使用 `docker export` 命令将容器导出为 tar 包：
```bash
$ sudo docker export inspect_import > my_container.tar
$ ls
my_container.tar
```

`docker export` 命令会将容器的文件系统以 tar 包格式导出到标准输出。将容器保存到本地文件也是一种持久化方式。保存后，可以通过网络等方式将 tar 包分享给他人。

反过来，可以使用 `docker import` 命令导入本地的 tar 包作为镜像：
```bash
$ cat my_container.tar | sudo docker import - imported:container
```