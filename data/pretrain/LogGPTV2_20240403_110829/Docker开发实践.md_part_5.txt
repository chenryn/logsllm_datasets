CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS
NAMES 7
dbc5bafd5805 ubuntu:latest echo hello 7 seconds ago Exited (0) 6 seconds ago
hopeful_bartik
f40f1463221f ubuntu:latest /bin/sh -c 'while tr 16 minutes ago Up 16 minutes 9
这里列出了最近创建的两个容器的运行情况。
8
2.1.3 启动容器
10
通过docker run命令创建的容器会直接进入到运行状态，而通过docker create命令创建的容
器则会进入到停止状态，想要运行该容器，则可以通过docker start命令来启动它。当容器运行
10
完自己的任务后，容器会退出，进入到停止状态，如果需要再次启动该容器，可以再次用docker
start命令来启动。
11
例如，可以通过docker start来启动之前已经停止了的inspect_shell容器：
13
$ sudo docker start inspect_shell
也可以使用该容器的ID来启动：
14
$ sudo docker start 761ef6d4b28f
15
容器在运行过程中，总是不可避免地会出现各种问题，严重的会导致容器因为异常而退出。
而有时我们需要根据错误码来判断容器是否需要重启。默认情况下，容器是不重启的，为了让容
器在退出后能够自动重启，需要用到--restart参数。--restart标志会检查容器的退出码，并据 16
此来决定是否需要重启容器。
17
我们可以用下面的命令创建容器：
$ sudo docker run --restart=always --name docker_restart -d ubuntu /bin/sh -c "while 18
true; do echo hello world; sleep 1; done"
22 第2章 容器
在这个例子中，--restart标志被设置成always。不管容器的返回码是什么，Docker都会尝试
重启容器。另外，我们也可以将其设置成on-failure，这样的话，当容器的返回值是非0时，Docker
才会重启容器。on-failure标志还接受一个可选的重启次数，如下所示：
--restart=on-failure:5
表示当收到一个非0的返回码时，最多尝试重启容器5次。
2.1.4 终止容器
退出容器的方式有很多种。当容器发生严重的错误时，容器会因为异常而退出并带有错误码，
这时可以通过错误码来判定容器内部发生的错误。而在正常情况下，交互型容器可以在shell中输
入exit，或者是使用ctrl+d组合键来使其退出。另外，交互型容器和后台型容器都可以采用docker
stop命令来停止：
$ sudo docker stop daemon_while
上述介绍的都是通过容器名来停止该容器。此外，我们还可以通过容器ID来停止容器：
$ sudo docker stop f40f1463221f
docker stop命令给容器中的进程发送SIGTERM信号，默认行为是会导致容器退出。当然，
容器内程序可以捕获该信号并自行处理，例如可以选择忽略。如果要强行停止一个容器，则需要
使用docker kill命令，它会给容器的进程发送SIGKILL信号，该信号将会使容器必然退出。
2.1.5 删除容器
当一个容器停止时，容器并没有消失，只是进入了停止状态，必要的话还可以重新运行。如
果确定不再需要这个容器时，可以使用docker rm命令删除它：
$ sudo docker rm hopeful_bartik
hopeful_bartik
要注意一点，不可以删除一个运行中的容器，此时必须先用docker stop或docker kill命令
停止它才能删除。示例如下：
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
dfc72feb607b ubuntu:14.04 "/bin/sh" 13 seconds ago Up 12 seconds modest_mestorf
micall@micall-ThinkPad:~$ docker rm modest_mestorf
Error response from daemon: You cannot remove a running container. Stop the container
before attempting removal or use –f
FATA[0000] Error: failed to remove one or more containers
此时会输出错误，提示你不能够删除一个正在运行的容器，必须先停止才能够删除。当然，
你也可以使用-f选项强制删除它：
2.2 容器内信息获取和命令执行 23
$ docker rm -f modest_mestorf
1
modest_mestorf
micall@micall-ThinkPad:~$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
2
Docker并没有提供一次性删除所有容器的命令，但是可以用下面的命令来实现这个目的：
3
docker rm `docker ps -a -q`
这个命令会用docker ps列出当前的所有容器，-a标志列出所有容器，-q标志只列出容器的ID，
4
不包括容器的其他信息。然后将这个列表传给docker rm命令，依次删除容器。
5
2.2 容器内信息获取和命令执行
6
在2.1节中，我们主要讲解容器的管理操作，这属于外部操作。在本节中，我们将讲解容器
内部的操作，包含获取容器的内部信息以及在容器内部运行命令。
7
2.2.1 依附容器
9
依附操作attach通常用在由docker start或者docker restart启动的交互型容器中。由于
docker start启动的交互型容器并没有具体终端可以依附，而容器本身是可以接收用户交互的， 8
这时就需要通过attach命令来将终端依附到容器上。具体示例如下：
10
$ docker run -i -t ubuntu:14.04 /bin/sh
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
10
$ docker run -i -t --name ubuntu ubuntu:14.04 /bin/sh
# ls
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
11
# ^C
#
$ docker ps
13
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
$ docker start ubuntu
ubuntu
14
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
d5521fff6cdb ubuntu:14.04 "/bin/sh" 45 seconds ago Up 5 seconds ubuntu
15
$ docker attach ubuntu
# ls
16
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var
#
需要注意的是，当使用attach命令依附容器后，需要多按一次回车才会出现容器的shell交互 17
界面。
18
在上面，我们特别强调的是将终端依附到交互型容器中，那么对于后台型容器，使用attach
24 第2章 容器
命令会发生什么呢？我们通过实例来探索这个问题的答案。我们发现，后台型容器是无法依附终
端的，因为它本身就不接受用户交互输入。
2.2.2 查看容器日志
对于交互型容器，由于本身就存在交互终端或者可以通过attach依附终端，所以查看容器的
配置信息或者调试程序比较方便。但对于后台型容器，它不存在交互终端，要获取其信息，势必
需要其他的方法，Docker给我们提供了logs、inspect等方法。docker logs命令用于查看容器的
日志，它将输出到标准输出的数据作为日志输出到运行docker logs命令的终端上。
首先，创建一个不断输出一些内容的后台型容器:
$ sudo docker run -d --name deamon_logs ubuntu /bin/bash -c 'for((i=0;1;i++));do echo $i;sleep 1;done;'
956c4bb8db65aa24c2e7b865f829c1c19d2b201c9c7fc86a77d199b2589bdc54
deamon_logs是一个包含循环输出自然数的应用程序的容器，我们可以使用logs来查看其
输出：
$ sudo docker logs -f deamon_logs
0
1
2
3
...
可以看到，该容器的程序循环向标准输出数字0、1、2 ...。默认情况下，logs输出的是从容
器启动到调用执行logs命令时的所有输出，之后的日志不再输出，并立即返回主机的控制台。如
果要实时查看日志，可以使用-f标志。由于这里使用了-f标志，可以看到，日志从开始一直输出
到当前时刻，并且还在不断更新，此时可以使用ctrl+C快捷键退出监视日志。
如果前面已经有很多日志，但是我们不想关心，只想要查看日志的最后部分，可以通过--tail
参数。
使用--tail标志可以精确控制logs输出的日志行数。例如，查看最后5行日志：
$ sudo docker logs -f --tail=5 daemon_logs
723
724
725
726
727
...
可以看到，首先输出日志的最后5行。由于使用了-f标志，之后的日志也会不断更新出来。
为了方便调试程序，我们还可以通过-t标志查看日志产生的时刻，相关代码如下：
$ sudo docker logs -f --tail=5 -t daemon_logs
2.2 容器内信息获取和命令执行 25
2014-12-27T08:16:00.873690621Z 755
1
2014-12-27T08:16:01.875306639Z 756
2014-12-27T08:16:02.880058459Z 757
2014-12-27T08:16:03.884377275Z 758
2
2014-12-27T08:16:04.885695676Z 759
...
3
2.2.3 查看容器进程
4
使用docker top命令，可以查看容器中正在运行的进程。
5
首先，创建一个后台型容器（交互型容器也行，但是要到其他控制台运行docker top）：
$ sudo docker run -d --name="deamon_top" ubuntu /bin/bash -c 'while true;do sleep 1; done' 6
d9a46de654821f15269d7427d93b3126dd3217492e7c2eb3c7ae09a18fdf8bc2
运行docker top命令，查看容器中的进程：
7
$ sudo docker top deamon_top
UID PID PPID C STIME
9
TTY TIME CMD
root 11699 1158 0
16:38 ? 00:00:00 /bin/bash -c while true;do sleep
8
1; done
root 11778 11699 0
16:39 ? 00:00:00 sleep 1
10
可以看到，这里有两个进程，一个是while循环的进程，另一个是while循环内部运行的sleep
进程。 10
2.2.4 查看容器信息 11
docker inspect用于查看容器的配置信息，包含容器名、环境变量、运行命令、主机配置、
13
网络配置和数据卷配置等：
$ sudo docker inspect daemon_dave 14
[{
"ID": " c2c4e57c12c4c142271c031333823af95d64b20b5d607970c334784430bcbd0f ",
"Created": "2014-05-10T11:49:01.902029966Z", 15
"Path": "/bin/sh",
"Args": [
"-c", 16
"while true; do echo hello world; sleep 1; done"
],
"Config": {
17
"Hostname": "c2c4e57c12c4",
...
18
使用-f或者--format格式化标志，可以查看指定部分的信息。
26 第2章 容器
查询容器的运行状态：
$ sudo docker inspect --format='{{ .State.Running }}' daemon_dave
false
查询容器的IP地址：
$ sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}'
daemon_dave
同时还可查看多个信息，例如查看容器名和运行状态：
$ sudo docker inspect --format '{{.Name}} {{.State.Running}}' \
daemon_dave bob_the_container
/daemon_dave false
/bob_the_container false
2.2.5 容器内执行命令
在容器启动的时候，通常需要指定其需要执行的程序，然而有时候我们需要在容器运行之后
中途启动另一个程序。从Docker 1.3开始，我们可以用docker exec命令在容器中运行新的任务，
它可以创建两种任务：后台型任务和交互型任务。后台型任务没有用户交互终端，交互型任务具
有和用户交互的输入输出终端。
让我们看一个后台型任务的例子：
$ sudo docker exec -d daemon_dave touch /etc/new_config_file
这里-d标志表示要运行一个后台型任务。接着需要指定要运行命令的容器名和要运行的命
令。在这个例子里，touch命令会在daemon_dave容器中创建一个new_config_file文件。通过docker
exec创建的后台任务，我们可以执行维护、监视、管理等复杂而有意义的任务。
使用docker exec命令创建交互型任务时，需要加上-t -i标志，示例如下：
$ sudo docker exec -t -i daemon_dave /bin/bash
-t和-i标志的用法与我们创建交互型容器时一样，会创建一个交互终端，并捕捉进程的标准
输入和输出。通过该交互终端，我们可以在容器内运行命令和查看信息等。
2.3 容器的导入和导出
Docker的流行与它对容器的易分享和易移植密不可分。用户不仅可以把容器提交到公共服务
器上，还可以将容器导出到本地文件系统中。同样，我们也可以将导出的容器重新导入到Docker
运行环境中。Docker的导入和导出分别由import命令和export命令完成。
下面我们说明一下容器的导出。首先，创建一个容器：
2.3 容器的导入和导出 27
$ sudo docker run -i -t --name=inspect_import ubuntu /bin/bash
1
root@3d2371934e2d:/#
然后按需要修改容器，安装需要的软件，配置系统环境。当我们完成这一切后，就可以把容
2
器保存到本地，使用docker export命令导出容器：
$ sudo docker export inspect_import > my_container.tar 3
$ ls
my_container.tar
4
docker export 命令会把容器的文件系统以tar包的格式导出到标准输出，我们将其重定位到
目标文件name.tar。将容器保存到本地文件也算是其持久化方式的一种。将容器保存到本地之后，
5
我们就可以通过网络等方法将tar包分享给他人。
反过来，我们可以使用docker import命令导入一个本地的tar包作为镜像： 6
$ cat my_container.tar | sudo docker import - imported:container