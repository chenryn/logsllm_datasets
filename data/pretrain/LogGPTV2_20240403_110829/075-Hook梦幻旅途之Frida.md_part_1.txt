Hook梦幻旅途之Frida
原创雪狼别动队 酒仙桥六号部队
2020-09-04原文
这是 酒仙桥六号部队 的第 75 篇文章。
全文共计8297个字，预计阅读时长25分钟。
一、基础知识
Frida是全世界最好的Hook框架。在此我们详细记录各种各样常用
的代码套路，它可以帮助逆向人员对指定的进程的so模块进行分析
。它主要提供了功能简单的python接口和功能丰富的js接口，使得
hook函数和修改so编程化，值得一提的是接口中包含了主控端与目
标进程的交互接口，由此我们可以即时获取信息并随时进行修改。
使用frida可以获取进程的信息（模块列表，线程列表，库导出函数
），可以拦截指定函数和调用指定函数，可以注入代码，总而言之
，使用frida我们可以对进程模块进行手术刀式剖析。
1.1 Frida安装
需 要 安 装 Python Frida 库 以 及 对 应 手 机 架 构 的 Frida
server，Frida如果安装极慢或者失败，原因在于国内网络状况。
1.1.1 启动进程
启动手机Frida server进程
adb shell
su
cd /data/local/tmp
chmod 777 frida-server
./frida-server
PS ： /data/local/tmp 是 一 个 放 置 frida server 的 常 见 位 置 。
1.1.2 混合运行Frida
以Python+Javascript混合脚本方式运行Frida（两种模式）。
// 以附加模式启动（Attach）
// 要求待测试App正在运行
run.py文件
// 导入frida库，sys系统库用于让脚本持续运行
import sys
import frida
# 找寻手机frida server
device = frida.get_usb_device()
# 选择应用进程（一般为包名）
appPackageName =""
# 附加
session = device.attach(appPackageName)
# 加载脚本,填入脚本路径
with open("script.js", encoding="utf-8")as f:
script = session.create_script(f.read())
script.load()
sys.stdin.read() //也可以不依赖sys库，使用time.sleep(10000000);
script.js文件
setImmediate(function() {
//prevent timeout
console.log("[*] Starting script");
Java.perform(function() {
// 具体逻辑
})
})
################################################################
####################
// 启动新的进程（Spawn）
// 不要求待测试App正在运行，Frida会启动一个新的App进程并挂起
//
优点：因为是Frida启动的进程，在启动的同时注入frida代码，所以Hook的时机
很早。
// 适用于在进程启动前的一些hook，如hook
RegisterNative、较早进行的加解密等，注入完成后调用resume恢复进程。
//
缺点：会Hook到从App启动→想要分析的界面和逻辑的内容，干扰项多，且容易卡
死。
run.py文件
import sys
import frida
# 找寻手机frida server
device = frida.get_usb_device()
# 选择应用进程（一般为包名）
appPackageName =""
# 启动新进程
pid = device.spawn([appPackageName])
device.resume(pid)
session = device.attach(pid)
# 加载脚本,填入脚本路径
with open("script.js", encoding="utf-8")as f:
script = session.create_script(f.read())
script.load()
sys.stdin.read()//也可以不依赖sys库，使用time.sleep(10000000);
script.js文件
setImmediate(function() {
//prevent timeout
console.log("[*] Starting script");
Java.perform(function() {
// 具体逻辑
})
})
PS:脚本的第一步总是通过get_usb_device用于寻找USB连接的手
机设备，这是因为Frida是一个跨平台的Hook框架，它也可以Hook
Windows 、 mac 等 PC 设 备 ， 命 令 行 输 入 frida-ls-
devices 可 以 展 示 当 前 环 境 所 有 可 以 插 桩 的 设 备 ， 输 入 frida-
ps展示当前PC所有进程（一个进程往往意味着一个应用），frida-
ps -
U即意味着展示usb所连接设备的进程信息。你可以通过Python+Js
混 合 脚 本 的 方 式 操 作 Frida ， 但 其 体 验 远 没 有 命 令 行 运 行 Frida
Js脚本丝滑。
1.1.3 获取前端进程
获取最前端Activity所在的进程，进程名。
// 可以省去填写包名的困扰
device = frida.get_usb_device()
front_app = device.get_frontmost_application()
print(front_app)
front_app_name = front_app.identifier
print(front_app_name)
输出1：Application(identifier="com.xxxx.xxx", name="xxxx",
pid=xxxx)
输出2: com.xxxx.xxxx
1.1.4 命令行调用
命令行方式使用：
Spawn方式
frida -U --no-pause -f packageName -l scriptPath
Attach方式
frida -U --no-pause packageName -l scriptPath
输出内容太多时，可以将输出导出至文件
frida -U --no-pause -f packageName -l scriptPath -o savePath
可以自行查看所有的可选参数。
通过CLI 进行hook有诸多优势，列举两个：
1) 当脚本出错时，会提供很好的错误提示；
2)Frida进程注入后和原JS脚本保持同步，只需要修改原脚本并保
存，进程就会自动使用修改后的脚本，这会让出错→修复，调试→
修改调试目标 的过程更迅捷。
1.2 Frida In Java
1.Frida hook 无重载Java方法；
2.Frida hook 有重载Java方法；
3.Frida hook Java方法的所有重载。
1.2.1 Hook导入导出表函数地址
对So的Hook第一步就是找到对应的指针（内存地址），Frida提供
了各式各样的API帮助我们完成这一工作。
获得一个存在于导出表的函数的地址：
// 方法一
var so_name = "";
var function_name = "";
var this_addr = Module.findExportByName(so_name, function_name);
// 方法二
var so_name = "";
var function_name = "";
var this_addr = Module.getExportByName(so_name, function_name);
//
区别在于当找不到该函数时findExportByName返回null，而getExportByName
抛出异常。
// 方法三
var so_name = "";
var function_name = "";
var this_addr = "";
var i = undefined;
var exports = Module.enumerateExportsSync(so_name);
for(i=0; i<exports.length; i++){
if(exports[i].name == function_name){
var this_addr = exports[i].address;
break;
}
}
1.2.2 枚举进程模块/导出函数
枚举某个进程的所有模块/某个模块的所有导出函数。
Frida与IDA交互：
1.内存地址和IDA地址相互转换；
function memAddress(memBase, idaBase, idaAddr) {
var offset = ptr(idaAddr).sub(idaBase);
var result = ptr(memBase).add(offset);
return result;
}
function idaAddress(memBase, idaBase, memAddr) {
var offset = ptr(memAddr).sub(memBase);
var result = ptr(idaBase).add(offset);
return result;
}
二、Hook JNI函数
JNI很多概念十分模糊，我们做如下定义，后续的阐述都依照此定义
。
·native：特指Java语言中的方法修饰符native。
·Native方法：特指Java层中声明的、用native修饰的方法。
·JNI实现方法：特指Native方法对应的JNI层的实现方法。
·JNI函数：特指JNIEnv提供的函数。
·Native函数：泛指C/C++层的本地库/自写函数等。
2.1 JNI编程模型
如果对JNI以及NDK开发了解较少，务必阅读如下资料。（我不要你
觉得，听我 的，下面都是精挑细选的。）
· 《 深 入 理 解 Android 卷 1 》 ——第 二 章 ： 深 入 理 解 JNI
作者邓凡平
· 《 Android 的 设 计 与 实 现 卷 1 》 ——第 二 章 ： 框 架 基 础 JNI
作者杨云君
除此之外，你可能还会想了解一些其他的知识，我们回顾一下JNI编
程模型。
步骤1：Java层声明Native方法。
步骤2：JNI层实现Java层声明的Native方法，在JNI层可以调用底
层库/回调Java方法。这部分将被编译为动态库（SO文件）供系统
加载。
步骤3：加载JNI层代码编译后生成的SO文件。
这其中有一个额外的关键点，SO文件的架构。
C/C++等Native语言直接运行在操作系统上，由CPU执行代码，所
以编译后的文件既和操作系统有关，也和CPU相关。So是C/C++代码
在Linux系统中编译后的文件，Window系统中为dll格式文件。
Android手机的CPU型号千千万，但CPU架构主要有七种，Mips，Mi
ps64 位 ， x86 ， x86_64 ， armeabi ， armv7-
a，armv8，编译时我们需要生成这七种架构的so文件以适配各种各
样的手机。
2.2 armv7a架构成因
在反编译过程中，我们需要选择某种CPU架构的so文件，得到特定架
构的汇编代码。一般情况下我们选择armv7a架构，这涉及到一系列
连环的原因。
2.2.1 通用情况
七种架构可以简单分为Mips，X86，ARM三家，前两者的在Android
处理器市场占比极小。Arm架构几乎成为了Android处理器的行业标
准，IOS和Android都采用ARM架构处理器。
2.2.2 Apk臃肿考虑