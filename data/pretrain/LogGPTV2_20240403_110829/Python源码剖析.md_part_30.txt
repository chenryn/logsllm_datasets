户自定义的类的实例对象，那么首先会选择对象对应的PyTypeobject对象中所定义的
即常规意义上的比较操作。如果进行比较操作的两个对象类型相同，且这两个对象不是用
RichCompare进行。
对于通常意义上的两个对象之间的大小关系的比较操作，com_outcome委托给Pyobject
com_outcom会委托给PySequence_containes来判断在序列对象w中是否存在对象v：而
是处理这些广义上的比较操作，甚至还包揽了s操作符的实现。对于PyCom_IN操作，
译为coMPARE_OP指令，而指令的参数则是PyCmp_IN。所以，cmp_outcome实际上主要
POP_TOP
#define Py_True((Pyobject *）&_Py_TrueStruct）
PyIntobject
(boolobject.h]
#deEine Py_False （(PyObject +）&_Py_ZeroStruct)
Usethese maeros*
下。在其他编程语言中，比较操作的结果通常会是一个boo1值，即使在没有内建boo1
print"Found"
到了这里，如果继续剖析，我们就将陷入Pyton中复杂的对象比较体系了，这里面
第10章Python虚拟机中的控制流
在Pyobject_RichCompare中，首先会确保执行的比较操作在Py_LT和py_GE之间，
我们可以略过Py山on的对象比较体系，但是对于比较操作的返回结果需要着重研究
在第2行代码编译后的字节码指令序列中我们发现，其中的in操作符最终也会被编
比较操作的结果
深度探索动态语言核心技术
Python中的bool对象
---
## Page 209
10.1.3
指令的实现中最后的那个PREDICT宏。
如果判断不成立，则应该跳过print语句，执行下一个判断a=-2。所以这里有一个指
马上就会需要利用比较操作的结果来进行指令的跳跃了，那又将是另一个有趣的话题。
执行，到COMPRE_OP指令完成时这一段时间内运行时栈的变化情况。因为在后面，我们
令跳跃的动作。Pyhon虚拟机中的字节码指令跳跃是如何实现的呢，奥秘就在coMPARE_oP
对象。
#define PREDIcTED(op)
PyIntobjeot
PyIntobject
[boolobject.d]
#define PREDIeT(op)
[ceval.c]
一
Named Zero for link-level compatibility
在ifcontrolpy中，如果第一个判断a>1o成立，那么会执行接下来的print语句；
了解了Python中比较操作的返回值之后，我们通过图10-2看一下从ifa>10开始
PyObjeot_HEAD_INIT(&PyBool_Type)
和C语言所采用的策略类似，Python也是利用两个PyIntobject对象来充当boo1
指令跳跃
sizeof(PyIntobject).
"bool"
LOAD_NAME
Py_TrueStruct
LOAD_NAME
图10-2
(next_instr == op） goto PRED ##op
PRED_##op:next_instr+
比较操作过程中运行时栈的变化
LOAD NAME
10.1
Python源码剖析
Python虚拟机中的if控制流
COMPARE_OP
SETLOPO)
一深度探索动态语言核心技术
PyFalse
179
---
## Page 210
Python源码剖析
180
指令代码之前的（见代码清单10-2）。
所以在这里，我们就来看看PRED_JUMP_IF_FALSE标识符是如何被放置到JUMP_IF_FALSE
指令，那么在cOMPAREOP指令的实现代码的最后，将执行gotoPRED_JUMP_IF_FALSE。
的指令代码，那么很显然，这些宏应该位于JUMP_IF_FALSE指令或JUMP_IF_TRUE指令
代码清单10-2
对应的case语句之前。
指令跳跃的目的是为了绕过一些无谓的操作，直接进入JUMP_IF_FALSE或JUMP_IF_TRUE
清楚：
对应的代码处。将COMPARE_OP的实现中的PREDICT宏展开，我们可以将这个过程看的更
码是否是JUMP_IF_FALSE。如果是，则程序流程会跳转到PREDLJUMP_IF_FALSE标识符
的概率非常高时，效率的提升尤其显著。
去很多无谓的操作，使执行效率获得提升。尤其是当这种字节码指令之间的搭配关系出现
清晰地看到。而且通常在它们的后面，还会紧跟着一个POP_TOP指令。
的后面就通常会紧跟JUMP_TFFALSE或JUMP_IF_TRUE，这一点在f_conrolpy中可以很
[ceval.c]
这就为根据上一个字节码指令直接预测下一个字节码指令提供了可能。比如COMPARE_OP
[COMPARE_OP]
#define PEEKARG()((next_instr[2]0)
（next_instr[2]10是成立的，所以接下来就会执行print语句。再次利用pREDIcT宏，对POP_TOP
之前，需要将这个对象从栈中弹出，打扫干净屋子，才好迎接新的客人。
抽取运行时栈中的对象的，所以现在那个Py_False还停留在栈中，在进行新的判断动作
字节码指令“27POP_TOP”
1个字节，参数2个字节），如果跳跃距离为9，那么确实就会跳到print语句的最后一条
0”，与当前字节码指针next_instr所指向的“18Pop_rOp”之间的距离为10（字节码
败后，会进行下一个判断a10的判断失
跳跃的距离就是JUMP_IFFALSE的指令参数，在这里是9。在第一节所展示出的字节
PREDICTED(POP_TOP):
case
深度探索动态语言核心技术
goto fast_next_opcode:
Py_DECREP（V）:
IOP:
上。
---
## Page 213
10.2
何意义，它实际上就是为了JUMP_TF_FALSE指令而生的。
程会横越千里，直接跳转到迁控制结构的末尾后的第一条字节码指令，这个惊险的飞跃
个i控制结构之后的下一条字节码，所以在执行完print之后，Python虚拟机的执行流
为从程序的流程上看，在执行完了print之后，程序就会跳过以下的几个判断直接执行这
编译出含有JUMP_IF_TRUE的指令序列。
距离都是当前指令与目标指令之间的距离。如果按照这种逻辑，那么在回退时，这个跳跃
种新的指令跳跃方式，即指令的回退。在上一节中，我们看到了指令跳跃时，通常跳跃的
中，我们将研究另一种控制结构：for循环控制结构。在循环控制结构中，我们将看见一
令的前向跳跃。虽然程序有可能左右摇摆，但是程序的流程始终是向前奔流而去。在本节
的指令参数。所以我们看到，在不同的print语句编译后的指令序列中，JUMP_FORWARD
由JUMP_FORWORD指令完成。
诸如ifa>10这样的判断改为inota>10时，Pyhon编译器才会为i控制语句
COMPARE_OP中的PREDICT（JUMP_IF_TRUE）得到执行：
影响的Python应用程序，是.py源文件中的Python代码。
控制结构的剖析之前，我们先来看一看这一节剖析的对象。
的距离一定就是负数了，是否真是如此呢？别急，马上就会见分晓了。在进入对for循环
的指令参数是不同的。但是它们跳跃的目标却都是一致的，都是“99LOAD_CONST8”。
[JUMP FORWARD]
POP_TOP
COMPARE_OP*
TUMIP
Python虚拟机中的for循环控制流
从这里也可以看到，在JUMP_FORWARD后面的那条POP_TOP对于print语句没有任
最后还有一点需要指出的是，在print的执行中，同样会有指令跳跃的动作出现。因
在注控制结构中，只存在着分支结构，这意味着在控制结构中，只存在字节码指
跳跃的距离是当前字节码与if控制结构之后的第一条字节码指令（在i_control.py
很遗憾，在if_contol.py中的所有i控制语句都没有编译出这样的指令结构。只有将
现在我们通过对PREDICT宏的分析可以知道，只有如下的字节码指令序列才能使
TFTRUE
goto fast_next_opcode,
JUMPBY(oparg);
10.2Python虚拟机中的for循环控制流
Python源码剖析
深度探索动态语言核心技术
183
---
## Page 214
Python源码剖析
10.2.2
10.2.1
184
结构的大幕：
“12sETUP_LOOP19"是一条关键的指令，正是它拉开了Python虚拟机中for循环控制
虚拟机中对for循环控制流的实现的关键从第二条Python语句开始。第一条字节码指令
现。下面列出了包含了字节码指令序列的for_control.py：
[SETUP LOOP]
1st
[for_control.py]
00
8
OT
对于for_control.py中的第一条Python语句，我们已经很熟悉了，不用再去考虑。Pyhon
第10章
图10-3展示了for_control.py编译得到的pyCodeobject中的常象表co_consts和符
print
在这一节，我们通过对for_control.py的剖析来研究Python中for循环控制结构的实
循环控制结构的初始化
STORE_NAME
BUILD LAIST
研究对象
RETURN VALUE
LOAD CONST
POP BLOCK
PRINT_NEWLINE
PRINT
LOAD_NAME
STORE_
GET_ITER
LOAD_NAME
LOAD
SETUP_
一深度探索动态语言核心技术
CONST
Python虚拟机中的控制流
NAME
W出工
OQP
2（None)
0(st)
11（to33）
19(to34)
图10-3for_control.pyc中的常量表和符号表
19
for_control.py
object/s
---
## Page 215
10.2.2.1
有多少种用途了。
不同用途。我们看一看有哪些指令会调用PyFrame_BlockSetup，就能知道PyTryBlock
设置为当前Python虚拟机正在执行的字节码指令，以字节码指令作为区分PyTryBlock的
用途的PyTryBlock对象。从PyFrame_BlockSetup中可以看到，这个b_type实际上被
的作用了。
栈的深度等等。那么这个结构在ror循环控制结构中起着什么样的作用呢？到目前为止，
中存放了一些Python虚拟机当前的状态信息。比如当前执行的字节码指令，当前运行时
SETUP_LOOR指令所做的就是从这个数组中获得了一块PyTryB1ock结构，并在这个结构
case SETUP LOOP:
一无所知。不过，随着对for_control.py剖析的深入，我们马上就能看到pyTryBlock结构
时被初始化为0。而那个至关重要的ryTryBlock定义如下：
[ceval.c]
[frameobject.h]