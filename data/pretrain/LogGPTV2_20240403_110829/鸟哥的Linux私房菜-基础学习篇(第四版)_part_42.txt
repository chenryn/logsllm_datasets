-rw-r--r--. 1 root root 176 Jun 3 00:04 .bashrc_test <==新文件的属性没变
由于复制行为（cp）会复制执行者的属性与权限，所以！怎么办？.bashrc_test还是属于root所拥有， 如此一来，即使你将文件拿给bin
这个使用者了，那他仍然无法修改的（看属性/权限就知道了吧）， 所以你就必须要将这个文件的拥有者与群组修改一下啰！知道如何修改了
吧？
改改变变权权限限, chmod
文件权限的改变使用的是chmod这个指令，但是，权限的设置方法有两种， 分别可以使用数字或者是符号来进行权限的变更。我们就来
谈一谈：
数数字字类类型型改改变变文文件件权权限限
Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限， 先复习一下刚刚上面提到的数
据：文件的权限字符为：“-rwxrwxrwx”， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表
如下：
r:4
w:2
x:1
每种身份（owner/group/others）各自的三个权限（r/w/x）分数是需要累加的，例如当权限为： [-rwxrwx---] 分数则是：
owner = rwx = 4+2+1 = 7
group = rwx = 4+2+1 = 7
others= --- = 0+0+0 = 0
所以等一下我们设置权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：
[root@study ~]# chmod [-R] xyz 文文件件或或目目录录
选项与参数：
xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。
-R : 进行递回（recursive）的持续变更，亦即连同次目录下的所有文件都会变更
举例来说，如果要将.bashrc这个文件所有的权限都设置启用，那么就下达：
[root@study ~]# ls -al .bashrc
-rw-r--r--. 1 root root 176 Dec 29 2013 .bashrc
[root@study ~]# chmod 777 .bashrc
[root@study ~]# ls -al .bashrc
-rwxrwxrwx. 1 root root 176 Dec 29 2013 .bashrc
那如果要将权限变成“ -rwxr-xr-- ”呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754 啰！所以你需要下达“ chmod 754 filename”。 另
外，在实际的系统运行中最常发生的一个问题就是，常常我们以vim编辑一个shell的文字批处理文件后，他的权限通常是 -rw-rw-r-- 也就是
664， 如果要将该文件变成可可执行文件，并且不要让其他人修改此一文件的话， 那么就需要-rwxr-xr-x这样的权限，此时就得要下达：“
chmod 755 test.sh ”的指令啰！
另外，如果有些文件你不希望被其他人看到，那么应该将文件的权限设置为例如：“-rwxr-----”，那就下达“ chmod 740 filename ”吧！
例题：
将刚刚你的.bashrc这个文件的权限修改回-rw-r--r--的情况吧！
答：
-rw-r--r--的分数是644，所以指令为：
chmod 644 .bashrc
符符号号类类型型改改变变文文件件权权限限
还有一个改变权限的方法呦！从之前的介绍中我们可以发现，基本上就九个权限分别是（1）user （2）group （3）others三种身份啦！
那么我们就可以借由u, g, o来代表三种身份的权限！此外， a 则代表 all 亦即全部的身份！那么读写的权限就可以写成r, w, x啰！也就是可
以使用下面的方式来看：
u
+（加入） r
g
chmod -（除去） w 文件或目录
o
=（设置） x
a
来实作一下吧！假如我们要“设置”一个文件的权限成为“-rwxr-xr-x”时，基本上就是：
user （u）：具有可读、可写、可执行的权限；
group 与 others （g/o）：具有可读与执行的权限。
所以就是：
[root@study ~]# chmod u=rwx,go=rx .bashrc
# 注意喔！那个 u=rwx,go=rx 是连在一起的，中间并没有任何空白字符！
[root@study ~]# ls -al .bashrc
-rwxr-xr-x. 1 root root 176 Dec 29 2013 .bashrc
那么假如是“ -rwxr-xr-- ”这样的权限呢？可以使用“ chmod u=rwx,g=rx,o=r filename ”来设置。此外，如果我不知道原先的文件属性，而我只
想要增加.bashrc这个文件的每个人均可写入的权限， 那么我就可以使用：
[root@study ~]# ls -al .bashrc
-rwxr-xr-x. 1 root root 176 Dec 29 2013 .bashrc
[root@study ~]# chmod a+w .bashrc
[root@study ~]# ls -al .bashrc
-rwxrwxrwx. 1 root root 176 Dec 29 2013 .bashrc
而如果是要将权限去掉而不更动其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：
[root@study ~]# chmod a-x .bashrc
[root@study ~]# ls -al .bashrc
-rw-rw-rw-. 1 root root 176 Dec 29 2013 .bashrc
[root@study ~]# chmod 644 .bashrc # 测试完毕得要改回来喔！
知道 +, -, = 的不同点了吗？对啦！ + 与 – 的状态下，只要是没有指定到的项目，则该权限“不会被变动”， 例如上面的例子中，由于仅以 –
拿掉 x 则其他两个保持当时的值不变！多多实作一下，你就会知道如何改变权限啰！ 这在某些情况下面很好用的～举例来说，你想要教
一个朋友如何让一个程序可以拥有执行的权限， 但你又不知道该文件原本的权限为何，此时，利用“chmod a+x filename” ，就可以让该程
序拥有执行的权限了。是否很方便？
现在我们知道了Linux系统内文件的三种身份（拥有者、群组与其他人），知道每种身份都有三种权限（rwx）， 已知道能够使用chown,
chgrp, chmod去修改这些权限与属性，当然，利用ls -l去观察文件也没问题。 前两小节也谈到了这些文件权限对于数据安全的重要性。那么，
这些文件权限对于一般文件与目录文件有何不同呢？ 有大大的不同啊！下面就让鸟哥来说清楚，讲明白！
权权限限对对文文件件的的重重要要性性
文件是实际含有数据的地方，包括一般文本文件、数据库内容档、二进制可可执行文件（binary program）等等。 因此，权限对于文件
来说，他的意义是这样的：
r （read）：可读取此一文件的实际内容，如读取文本文件的文字内容等；
w （write）：可以编辑、新增或者是修改该文件的内容（但不含删除该文件）；
x （eXecute）：该文件具有可以被系统执行的权限。
那个可读（r）代表读取文件内容是还好了解，那么可执行（x）呢？这里你就必须要小心啦！ 因为在Windows下面一个文件是否具有执
行的能力是借由“ 扩展名 ”来判断的， 例如：.exe, .bat, .com 等等，但是在Linux下面，我们的文件是否能被执行，则是借由是否具有“x”这个权
限来决定的！跟文件名是没有绝对的关系的！
至于最后一个w这个权限呢？当你对一个文件具有w权限时，你可以具有写入/编辑/新增/修改文件的内容的权限， 但并不具备有删除该
文件本身的权限！对于文件的rwx来说， 主要都是针对“文件的内容”而言，与文件文件名的存在与否没有关系喔！因为文件记录的是实际的数据
嘛！
权权限限对对目目录录的的重重要要性性
文件是存放实际数据的所在，那么目录主要是储存啥玩意啊？目录主要的内容在记录文件名清单，文件名与目录有强烈的关连啦！ 所以
如果是针对目录时，那个 r, w, x 对目录是什么意义呢？
r （（read contents in directory））：
表示具有读取目录结构清单的权限，所以当你具有读取（r）一个目录的权限时，表示你可以查询该目录下的文件名数据。 所以你就可以
利用 ls 这个指令将该目录的内容列表显示出来！
w （（modify contents of directory））：
这个可写入的权限对目录来说，是很了不起的！ 因为他表示你具有异动该目录结构清单的权限，也就是下面这些权限：
创建新的文件与目录；
删除已经存在的文件与目录（不论该文件的权限为何！）
将已存在的文件或目录进行更名；
搬移该目录内的文件、目录位置。
总之，目录的w权限就与该目录下面的文件名异动有关就对了啦！
x （（access directory））：
咦！目录的执行权限有啥用途啊？目录只是记录文件名而已，总不能拿来执行吧？没错！目录不可以被执行，目录的x代表的是使用者能
否进入该目录成为工作目录的用途！ 所谓的工作目录（work directory）就是你目前所在的目录啦！举例来说，当你登陆Linux时， 你所在
的主文件夹就是你当下的工作目录。而变换目录的指令是“cd”（change directory）啰！
上面的东西这么说，也太条列式～太教条了～有没有清晰一点的说明啊？好～让我们来思考一下人类社会使用的东西好了！ 现在假
设“文件是一堆文件数据夹”，所以你可能可以在上面写/改一些数据。而“目录是一堆抽屉”，因此你可以将数据夹分类放置到不同的抽屉去。 因
此抽屉最大的目的是拿出/放入数据夹喔！现在让我们汇整一下数据：
元件 内容 叠代物件 r w x
文件 详细数据data 文件数据夹 读到文件内容 修改文件内容 执行文件内容
目录 文件名 可分类抽屉 读到文件名 修改文件名 进入该目录的权限（key）
根据上述的分析，你可以看到，对一般文件来说，rwx 主要是针对“文件的内容”来设计权限，对目录来说，rwx则是针对“目录内的文件名
列表”来设计权限。 其中最有趣的大概就属目录的 x 权限了！“文件名怎么执行”？没道理嘛！其实，这个 x 权限设计，就相当于“该目录，也就
是该抽屉的 "钥匙" ”啦！ 没有钥匙你怎么能够打开抽屉呢？对吧！
大致的目录权限概念是这样，下面我们来看几个范例，让你了解一下啥是目录的权限啰！
例题：
有个目录的权限如下所示：
drwxr--r-- 3 root root 4096 Jun 25 08:35 .ssh
系统有个帐号名称为vbird，这个帐号并没有支持root群组，请问vbird对这个目录有何权限？是否可切换到此目录中？
答：
vbird对此目录仅具有r的权限，因此vbird可以查询此目录下的文件名列表。因为vbird不具有x的权限，亦即 vbird 没有这个抽屉
的钥匙啦！ 因此vbird并不能切换到此目录内！（相当重要的概念！）
上面这个例题中因为vbird具有r的权限，因为是r乍看之下好像就具有可以进入此目录的权限，其实那是错的。 能不能进入某一个目录，
只与该目录的x权限有关啦！此外， 工作目录对于指令的执行是非常重要的，如果你在某目录下不具有x的权限， 那么你就无法切换到该目录
下，也就无法执行该目录下的任何指令，即使你具有该目录的r或w的权限。
很多朋友在架设网站的时候都会卡在一些权限的设置上，他们开放目录数据给网际网络的任何人来浏览， 却只开放r的权限，如上面的
范例所示那样，那样的结果就是导致网站服务器软件无法到该目录下读取文件（最多只能看到文件名）， 最终用户总是无法正确的查阅到文件
的内容（显示权限不足啊！）。要注意：要开放目录给任何人浏览时，应该至少也要给予r及x的权限，但w权限不可随便给！ 为什么w不能随
便给，我们来看下一个例子：
例题：