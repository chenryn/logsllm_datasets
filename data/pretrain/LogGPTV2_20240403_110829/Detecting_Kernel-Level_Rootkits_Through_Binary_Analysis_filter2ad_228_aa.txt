title:Detecting Kernel-Level Rootkits Through Binary Analysis
author:Christopher Kr&quot;ugel and
William K. Robertson and
Giovanni Vigna
Detecting Kernel-Level Rootkits
Through Binary Analysis
Christopher Kruegel
William Robertson and Giovanni Vigna
Technical University Vienna
PI:EMAIL
Reliable Software Group
University of California, Santa Barbara
{wkr,vigna}@cs.ucsb.edu
Abstract
A rootkit is a collection of tools used by intruders to
keep the legitimate users and administrators of a compro-
mised machine unaware of their presence. Originally, root-
kits mainly included modiﬁed versions of system auditing
programs (e.g., ps or netstat on a Unix system). How-
ever, for operating systems that support loadable kernel
modules (e.g., Linux and Solaris), a new type of rootkit has
recently emerged. These rootkits are implemented as kernel
modules, and they do not require modiﬁcation of user-space
binaries to conceal malicious activity. Instead, these rootkits
operate within the kernel, modifying critical data structures
such as the system call table or the list of currently-loaded
kernel modules.
This paper presents a technique that exploits binary anal-
ysis to ascertain, at load time, if a module’s behavior re-
sembles the behavior of a rootkit. Through this method, it
is possible to provide additional protection against this type
of malicious modiﬁcation of the kernel. Our technique relies
on an abstract model of module behavior that is not affected
by small changes in the binary image of the module. There-
fore, the technique is resistant to attempts to conceal the ma-
licious nature of a kernel module.
1. Introduction
Most intrusions and computer security incidents follow a
common pattern where a remote user scans a target system
for vulnerable services, launches an attack to gain some type
of access to the system, and, eventually, escalates her privi-
leges. These privileges are then used to create backdoors that
will allow the attacker to return to the system at a later time.
In addition, actions are taken to hide the evidence that the
system has been compromised in order to prevent the sys-
tem administrator from noticing the security breach and im-
plementing countermeasures (e.g., reinstalling the system).
The tools used by an attacker after gaining administra-
tive privileges include tools to hide the presence of the at-
tacker (e.g., log editors), utilities to gather information about
the system and its environment (e.g., network sniffers), tools
to ensure that the attacker can regain access at a later time
(e.g., backdoored servers), and means of attacking other sys-
tems. Common tools have been bundled by the hacker com-
munity into “easy-to-use” kits, called rootkits [3].
Even though the idea of a rootkit is to provide all the
tools that may be needed after a system has been compro-
mised, rootkits focus in particular on backdoored programs
and tools to hide the attacker from the system administra-
tor. Originally, rootkits mainly included modiﬁed versions
of system auditing programs (e.g., ps or netstat for Unix
systems) [9]. These modiﬁed programs do not return any in-
formation to the administrator that involves speciﬁc ﬁles and
processes used by the intruder. Such tools, however, are eas-
ily detected using ﬁle integrity checkers such as Tripwire [7].
Recently, a new type of rootkit has emerged. These root-
kits are implemented as loadable kernel modules (LKMs). A
loadable kernel module is an extension to the operating sys-
tem (e.g., a device driver) that can be loaded into and un-
loaded from the kernel at runtime. Solaris and Linux are two
popular operating systems that support this type of runtime
kernel extension.
By implementing a rootkit as a kernel module, it is possi-
ble to modify critical kernel data structures (such as the sys-
tem call table, the list of active processes, or the list of kernel
modules) or intercept requests to the kernel regarding ﬁles
and processes that are created by an intruder [10, 14, 15].
Once the kernel is infected, it is very hard to determine
if a system has been compromised without the help of
hardware extensions such as the Trusted Platform Module
(TPM) [17, 12]. Therefore, it is important that mechanisms
are in place to detect kernel rootkits and prevent their inser-
tion into the kernel.
In this paper, we present a technique for the detection of
kernel-level rootkits in the Linux operating system. The tech-
nique is based on static analysis of loadable kernel module
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
binaries. More precisely, the use of behavioral speciﬁcations
and symbolic execution allow one to determine if the mod-
ule being loaded includes evidence of malicious intent.
The contribution of this approach is twofold. First, by us-
ing static analysis, our technique is able to determine if a
kernel module is malicious before the kernel module is ac-
tually loaded into the kernel and executed. This is a major
advantage, because once the kernel image has been modi-
ﬁed it may become infeasible to perform dynamic analysis
of the module’s actions in a reliable way. Second, the tech-
nique is applied to the binary image of a module and does not
require access to the module’s source code. Because of this,
the technique is widely applicable and it is possible to ana-
lyze the behavior of device drivers and other closed-source
kernel components that are distributed in binary form only.
The rest of the paper is structured as follows. Section 2
discusses related work on rootkits and rootkit detection. Sec-
tion 3 presents our approach to the detection of kernel-level
rootkits. Then, Section 4 provides an experimental evalua-
tion of the effectiveness and efﬁciency of our technique. Fi-
nally, Section 5 discusses possible limitations of the current
prototype, while Section 6 brieﬂy concludes.
2. Related Work
Kernel-level rootkits have been circulating in the under-
ground hacker community for some time and in different
forms [6]. In general, there are different means that can be
used to modify kernel behavior.
The most common way of modifying the kernel is by in-
serting a loadable kernel module. The module has access
to the symbols exported by the kernel and can modify any
data structure or function pointer that is accessible. Typi-
cally, these kernel-level rootkits “hijack” entries in the sys-
tem call table and provide modiﬁed implementations of the
corresponding system call functions [10, 14]. These modi-
ﬁed system calls often perform checks on the data passed
back to a user process and can thus efﬁciently hide informa-
tion about ﬁles and processes. An interesting variation is im-
plemented by the adore-ng rootkit [15, 16]. In this case,
the rootkit does not touch the system call table but hijacks the
routines used by the Virtual File System (VFS), and, there-
fore, it is able to intercept (and modify) calls that access ﬁles
in both the /proc ﬁle system and the root ﬁle system.
A related technique injects malicious code directly into
existing kernel modules instead of providing a complete
rootkit module. While this solution is in principle similar to
the insertion of a rootkit kernel module, it has the advan-
tage that the modiﬁcation will survive a kernel reboot pro-
cedure if the modiﬁed module is automatically loaded in the
kernel standard conﬁguration. On the other hand, this tech-
nique requires the modiﬁcation of a binary that is stored on
the ﬁle system, and, therefore, it may be detected using in-
tegrity checkers.
Another way to modify the behavior of the kernel is to
access kernel memory directly from user space through the
/dev/kmem ﬁle. This technique (used, for example, by
SucKIT [13]) requires the identiﬁcation of data structures
that need to be modiﬁed within the kernel image. However,
this is not impossible; in particular, well-known data struc-
tures such as the system call table are relatively easy to lo-
cate.
Kernel-level rootkits can be detected in a number of dif-
ferent ways. The most basic techniques include searching
for modiﬁed kernel modules on disk, searching for known
strings in existing binaries, or searching for conﬁguration
ﬁles associated with speciﬁc rootkits. The problem is that
when a system has been compromised at the kernel level,
there is no guarantee that these detection tools will return re-
liable results. This is also true for signature-based rootkit de-
tection tools such as chkrootkit [11] that rely on oper-
ating system services to scan a machine for indications of
known rootkits.
To circumvent the problem of a possibly untrusted op-
erating system,
rootkit scanners such as kstat [4],
rkscan [2], or St. Michael [8] follow a different ap-
proach. These tools are either
implemented as kernel
modules with direct access to kernel memory, or they an-
alyze the contents of the kernel memory via /dev/kmem.
Both techniques allow the programs to monitor the in-
tegrity of important kernel data structures without the use of
system calls. For example, by comparing the system call ad-
dresses in the system call table with known good values
(taken from the /boot/System.map ﬁle), it is possi-
ble to identify hijacked system call entries.
This approach is less prone to being foiled by a kernel-
level rootkit because kernel memory is accessed directly.
Nevertheless, changes can only be detected after a rootkit
has been installed. In this case, the rootkit had the chance to
execute arbitrary code in the context of the kernel. Thus, it is
possible that actions have been performed to thwart or dis-
able rootkit scanners. Also, rootkits can carry out changes at
locations that are not monitored (e.g., task structures).
3. Rootkit Detection
The idea for our detection approach is based on the ob-
servation that the runtime behavior of regular kernel mod-
ules (e.g., device drivers) differs signiﬁcantly from the be-
havior of kernel-level rootkits. We note that regular modules
have different goals than rootkits, and thus implement differ-
ent functionality.
The main contribution of this paper is that we show that it
is possible to distinguish between regular modules and root-
kits by statically analyzing kernel module binaries. The anal-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
ysis is performed in two steps. First, we have to specify unde-
sirable behavior. Second, each kernel module binary is stati-
cally analyzed for the presence of instructions sequences that
implement these speciﬁcations.
Currently, our speciﬁcations are given informally, and the
analysis step has to be adjusted appropriately to deal with
new speciﬁcations. Although it might be possible to intro-
duce a formal mechanism to model behavioral speciﬁcations,
it is not necessary for our detection prototype. The reason is
that a few general speciﬁcations are sufﬁcient to accurately
capture the malicious behavior of all LKM-based rootkits.
Nevertheless, the analysis technique is powerful enough that
it can be easily extended. This may become necessary when
rootkit authors actively attempt to evade detection by chang-
ing the code such that it does not adhere to any of our speci-
ﬁcations.
3.1. Speciﬁcation of Behavior
A speciﬁcation of malicious behavior has to model a se-
quence of instructions that is characteristic for rootkits but
that does not appear in regular modules (at least, with a high
probability). That is, we have to analyze the behavior of root-
kits to derive appropriate speciﬁcations that can be used dur-
ing the analysis step.
In general, kernel modules (e.g., device drivers) initial-
ize their internal data structures during startup and then in-
teract with the kernel via function calls, using both system
calls or functions internal to the kernel. In particular, it is
not often necessary that a module directly writes to kernel
memory. Some exceptions include device drivers that read
from and write to memory areas that are associated with a
managed device and that are mapped into the kernel address
space to provide more efﬁcient access or modules that over-
write function pointers to register themselves for event call-
backs.
Kernel-level rootkits, on the other hand, usually write di-
rectly to kernel memory to alter important system manage-
ment data structures. The purpose is to intercept the regular
control ﬂow of the kernel when system services are requested
by a user process. This is done in order to monitor or change
the results that are returned by these services to the user pro-
cess. Because system calls are the most obvious entry point
for requesting kernel services, the earliest kernel-level root-
kits modiﬁed the system call table accordingly. For example,
one of the ﬁrst actions of the knark [10] rootkit is to re-
place entries in the system call table with customized func-
tions to hide ﬁles and processes.
In newer kernel releases, the system call table is no longer
exported by the kernel, and thus it cannot be directly ac-
cessed by kernel modules. Therefore, alternative approaches
to inﬂuence the results of operating system services have
been proposed. One such solution is to monitor accesses to
the /proc ﬁle system. This is accomplished by changing
the function addresses in the /proc ﬁle system root node
that point to the corresponding read and write functions. Be-
cause the /proc ﬁle system is used by many auditing tools
to gather information about the system (e.g., about running
processes, or open network connections), a rootkit can eas-
ily hide important information by ﬁltering the output that is
passed back to the user process. An example of this approach
is the adore-ng rootkit [16], which replaces functions of
the virtual ﬁle system (VFS) node of the /proc ﬁle sys-
tem.
As a general observation, we note that rootkits perform
writes to a number of locations in the kernel address space
that are usually not touched by regular modules. These writes
are necessary either to obtain control over system services
(e.g., by changing the system call table, ﬁle system functions,
or the list of active processes) or to hide the presence of the
kernel rootkit itself (e.g., modifying the list of installed mod-
ules). Because write operations to operating system manage-
ment structures are required to implement the needed func-
tionality, and because these writes are unique to kernel root-
kits, they present a salient opportunity to specify malicious
behavior.
To be more precise, we identify a loadable kernel mod-
ule as a rootkit based on the following two behavioral speci-
ﬁcations:
1. The module contains a data transfer instruction that per-
forms a write operation to an illegal memory area, or
2. the module contains an instruction sequence that i) uses
a forbidden kernel symbol reference to calculate an ad-
dress in the kernel’s address space and ii) performs a
write operation using this address.
Whenever the destination address of a data transfer can
be determined statically during the analysis step, it is possi-
ble to check whether this address is within a legitimate area.
The notion of legitimate areas is deﬁned by a white-list that
speciﬁes the kernel addressed that can be safely written to.
For our current system, these areas include function pointers
used as event call-back hooks (e.g., br ioctl hook()) or
exported arrays (e.g., blk dev).
One drawback of the ﬁrst speciﬁcation is the fact that the
destination address must be derivable during the static anal-
ysis process. Therefore, a complementary speciﬁcation is in-
troduced that checks for writes to any memory address that
is calculated using a forbidden kernel symbol.
A kernel symbol refers to a kernel variable with its cor-
responding address that is exported by the kernel (e.g., via
/proc/ksysm). These symbols are needed by the module
loader, which loads and inserts modules into the kernel ad-
dress space. When a kernel module is loaded, all references
to external variables that are declared in this module but de-
ﬁned in the kernel (or in other modules) have to be patched
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
appropriately. This patching process is performed by substi-
tuting the place holder addresses of the declared variables
in the module with the actual addresses of the correspond-
ing symbols in the kernel.
The notion of forbidden kernel symbols can be based
on black-lists or white-lists. A black-list approach enumer-
ates all forbidden symbols that are likely to be misused by
rootkits, for example, the system call table, the root of the
/proc ﬁle system, the list of modules, or the task structure
list. A white-list, on the other hand, explicitly deﬁnes ac-
ceptable kernel symbols that can legitimately be accessed by
modules. As usual, a white-list approach is more restrictive,
but may lead to false positives when a module references a
legitimate but infrequently used kernel symbol that has not
been allowed previously. However, following the principle
of fail-safe defaults, a white-list also provides greater assur-
ance that the detection process cannot be circumvented.
Note that it is not necessarily malicious when a forbidden
kernel symbol is declared by a module. When such a symbol
is not used for a write access, it is not problematic. There-
fore, we cannot reject a module as a rootkit by checking the
declared symbols only.
Also, it is not sufﬁcient to check for writes that target a
forbidden symbol directly. Often, kernel rootkits use such
symbols as a starting point for more complex address calcu-
lations. For example, to access an entry in the system call
table, the system call table symbol is used as a base ad-
dress that is increased by a ﬁxed offset. Another example
is the module list pointer that is used to traverse a linked list
of module elements until the one that should be removed is
reached. Therefore, a more extensive analysis has to be per-
formed to also track indirect uses of forbidden kernel sym-
bols for write accesses.
A clever intruder could use an attack in which two mod-
ules cooperate to evade detection. In this attack, a ﬁrst mod-
ule only reads the sensitive address (e.g., the address of the
system call table) and then it exports a function to access
the address. A second module then reads the sensitive ad-
dress indirectly from the ﬁrst module and uses it for an ille-
gal write access. To thwart this evasion, all symbols and re-
turn values of functions declared by other kernel modules are
also marked as forbidden. Thus, when the second module ac-
cesses the function exported by the ﬁrst module, the return
value is tagged as forbidden and also subsequent write oper-