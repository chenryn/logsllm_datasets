retrieves and subsequently executes the function when the
document has ﬁnished loading. This delayed execution leads
to the top of the stack being jQuery; hence, any inclusion con-
ducted by the callback function would incorrectly be attributed
to jQuery. In fact, artifacts2 published by Lauinger et al.
[11] even highlight cases in which the included jQuery script
seemingly includes further inline scripts. Manual analysis of
all the libraries (as classiﬁed by retire.js [23]) shows
that no library by itself conducts further inclusions. Given this
observation, we assume the ﬁrst non-library script contained
in an execution trace to be the actual initiator. Using this
notion allows us to accurately infer the culprits behind actions,
i.e., inclusion relations and API usage, even in the case of
omnipresent libraries acting as confused deputies.
B. The Extended Same Party (eSP)
With this precise inclusion information, we can now turn
towards understanding which hostnames actually belong to
the same entity. This is necessary for two aspects of our
analyses, namely to differentiate between ﬁrst and third party
(to count how many sites are affected by third parties) as
well as to differentiate between different third parties (to count
how many third parties affect a given site). In addition, this
enables us to reason about delegation of trust, i.e., when a
third party includes scripting content from another third party,
which is important to understand whether a direct business
relationship exists between a ﬁrst and a third party. Related
research [10] used the notion of an eTLD+1 to differen-
tiate different parties; however, modern practices of ﬁrst-
party CDN’s (e.g., facebook.com and fbcdn.net) or the
logical separation of content (e.g., doubleclick.net and
googleadservices.com) highlight the need for a reﬁned
notion that does not rely on domain labels alone.
2The jQuery in the lower-left corner at https://seclab.ccs.neu.edu/static/
projects/javascript-libraries/causality-trees/modernfarmer.com/
4
Naturally,
there is no ground-truth list of all domains
belonging to a particular entity. Still, there exists a curated list
of domains belonging to the same entity [13, 14] which is used
as part of a tool named webXray [15]. Unfortunately, we could
see that those lists frequently miss connections among two
hostnames, e.g., twitch.tv and twitchcdn.net, which
is to be expected as those lists are not explicitly crafted for our
dataset. Therefore, we need to mine our dataset for more of
such connections to attribute hostnames to entities accurately.
While clustering approaches based on TLS certiﬁcates or IP
ranges appear meaningful to achieve such a mapping, we ex-
perimentally determined that such approaches yield high num-
bers of both false positive and negatives, e.g., through shared
hosting (through Cloudﬂare) as well as disjunct IP ranges for
different domains of the same entity (such newrelic.com
and their CDN nr-data.net). We instead apply a semi-
automatic approach, which involves relying on the observed
inclusion relations in the wild and is complemented by a
researcher validating all results manually. This way, our ap-
proach does not yield false positives (in the sense of two
eTLD+1s ﬂagged as belonging to the same party when, in fact,
they are not). Naturally, any such empirical analysis yields
imprecisions. However, as we show in Section V, the notion
provides a much better upper bound for the number of third
parties included in Web sites compared to relying on eTLD+1s.
As the ﬁrst step, in uncovering further same-party domains,
we look for eTLD+1s that are commonly used together in
inclusions, such as doubleclick.net and googlead-
services.com. Based on the crawl data from all our crawls
(see Section III), we ﬁnd combinations of two eTLD+1s with
an inclusion relation on at least 10 sites. Based on this list of
908 combinations, we manually investigate their relation. In
several cases, this is trivial, such as the example mentioned
above. In other cases, this requires additional checks, such as
for IP ranges of the involved domains, up to the manual inspec-
tion of the sites themselves (e.g., their imprints). This enables
us to ﬁnd pairs like cookielaw.org and onetrust.com,
which are operated by the same entity/party.
While the previously outlined approach allows us to ﬁnd
large CDN providers, it does not yet allow us to ﬁnd individual
sites that have their own CDN. To ﬁnd these, we analyze
our collected inclusions to see cases in which a ﬁrst party
(identiﬁed by its eTLD+1) directly included content from a
different eTLD+1 (the potential CDN). For each potential
CDN, we check if it is also used on any other site we analyzed
and only consider those domains which are exclusively used
by one site. Furthermore, observations of the collected data
indicated that keywords such as img, cdn, or static were
often part of CDN domain names. Hence we exclusively focus
on domains containing them. For each combination of a ﬁrst
party and potential CDN, we then again resort to manual
checks to determine if this is, in fact, a CDN. In many cases,
this is straight-forward based on the involved domain names,
such as soufun.com and soufunimg.com. In checking
individual domains to see if they are a CDN, we also observed
a notable trend, namely the fact
that accessing the CDN
directly (i.e., http://sitecdn.com) would redirect us to
the main site. Therefore, we augment our manual analysis by
leveraging this observation to automatically check, whenever
a possible CDN is discovered, if accessing it redirects us to
the main site. If that is the case, we mark it as the site’s CDN
without further manual review. By combining both techniques
to identify same-party candidates, we in total identiﬁed 2,175
site pairs for further checks, out of which 1,146 are operated
by the same entity (across all crawls). Overall, all manual
efforts combined took approximately eight person-hours, and
we make our results available as part of SMURF [30], which
we discuss in Section VIII-C. We augment our list with same-
entity entries from the most up-to-date list used by webXray
[14] as available in the Internet Archive. Doing so allows
us to ﬁnd 133 additional same-party relations. Contrarily,
webXray’s list does account for 1,096 of our 1,146 found
connections meaning that it alone does not sufﬁce for our
purposes.
1) Threats to Validity: The manual clustering approach we
chose naturally suffers from a certain limitation in missing
sites that belong to the same party. One prominent example
is Alibaba, which uses alicdn.com on a number of their
properties. Notably, though, the combination of the individual
sites (e.g., alibaba.com or alipay.com) does not occur
often enough to qualify for the ﬁrst check we perform. On
the ﬂip side, given that alicdn.com is not exclusively used
on alibaba.com, the second check also fails to detect the
relation. Luckily, these rather obvious relations of popular
sites are picked up by webXray’s list [14]. To understand the
impact of this on our heuristics (i.e., without the webXray
list), we conducted a manual spot check. Based on the total
of 183,028 inclusion relations (between different eTLD+1s)
we gathered in our ﬁrst crawl, we could assign 1,434 pairs to
be originating from the same party. Of the remaining 181,594,
70,973 could be trivially shown to not originate from the same
party; merely because they were included through services
like Google’s Ad services, for which we are conﬁdent to
know all related domains3. Of the remaining 110,621 pairs,
we randomly sampled 1,000 and manually checked if they
were of the same party. In doing so, we found that only 24
pairs were actually from the same party. Given our approach
of removing the trivially obvious different parties before this
sampling, we are conﬁdent that our approximation of same-
party relations is reasonable. Thus, while our approach may
still overestimate the number of third parties for any given
Web site, it is much better compared to approaches merely
based on the eTLD+1 (as we show in Section V).
C. Holistic View on Disconnect from First Party
Besides having a clear understanding of which hostnames
belong together, we want to be able to quantify how (un)related
a particular party is to the ﬁrst party. Prior work [10] used the
longest chain of inclusions to measure implicit trust; instead,
3we conducted a spot check of around 1,000 domains classiﬁed as non-
Google domains and could not ﬁnd a single false positive
Fig. 1. Example inclusion trees
we use the shortest path observed in any inclusions from a
given party to ascertain its disconnect from the ﬁrst party.
Figure 1 depicts our running example of two inclusion trees
spanning four scripting resources. We use it to introduce con-
cepts that allow us to quantify the disconnect to the ﬁrst-party
developer on the level of parties. We ﬁrst focus on the left-
hand side of the graph. Here, the Web document from p1.com
(our ﬁrst party) includes a script resource JS 2 from p2.com,
which in turn includes JS 3 from p3.com. Judging merely on
this inclusion chain, p3.com seems to be disconnected from the
ﬁrst-party developer. However, looking at the right-hand side
document, we ﬁnd p1.com directly includes JS 4 from p3.com,
meaning there is actually no disconnect. If we now turn our
attention to the inclusion of p3cdn.com, we see that it is never
included directly by the ﬁrst party. Considering the eTLD+1
notion, we would ﬂag p3cdn.com as a delegated party, as its
inclusion is merely a product of the delegated capabilities of
script inclusion to p3.com. However, if we infer that those two
sites are in fact to be considered to be the same party, then
we would report that p1.com never includes a delegated party.
This example highlights the necessity for an improved notion
of a same party as well as a means of investigating the shortest
chains to a party. In our analysis, we conduct this aggregation
for all observed documents belonging to a common root node;
e.g., if we ﬁnd Facebook iframes on another site, we attribute
all inclusions within that iframe to Facebook.
For every party inside a given site, we can now calculate the
smallest number of other third parties that are scattered along
our inclusion chains for any of the hostnames that we can
associate with the given party. This allows us to holistically
quantify their disconnect from the ﬁrst party and a delegated
party can then be deﬁned as a party for which this number is
greater or equal to one.
V. MEASURING DISCONNECT ON THE WEB
Given that prior work has relied on longest chains of
inclusions and used an eTLD+1 as the separator between
parties, in this section, we study how this notion compares
to ours, which relies on shortest paths to a party and the more
ﬁne-grained eSP notion. The data is based on the ﬁrst snapshot
of our crawls from January 13, but the results generalize, as
Table VI in the appendix conﬁrms.
5
Document #1p1.comJS 4p3.comJS 2p2.comJS 3p3.comJS 5p3cdn.comDocument #2p1.comSITES WHICH HAVE AT LEAST GIVEN NUMBER OF INVOLVED PARTIES IN
TABLE I
LONGEST CHAIN
LEVEL OF DISCONNECT BETWEEN THIRD PARTY AND FIRST PARTY BY
LEAST NUMBER OF THIRD PARTIES ALONG ANY INCLUSION CHAIN.
TABLE II
parties
eTLD+1
eSP
1
7,643
7,628
2
6,589
5,124
3
3,578
1,451
4
786
199
5
137
19
6
50
5
7
1
0
parties
eTLD+1
eSP
1
7,643
7,625
2
5,807
3,853
3
2,215
750
4
315
49
5
43
6
6
19
2
A. eTLD+1 vs. eSP
In this particular experiment, we want to investigate how
our notion of eSP inﬂuences the number of different parties
that jointly contribute to one inclusion chain. Considering our
running example shown in Figure 1, the left branch involves
two parties. For the right-hand side, depending on the notion
of a party, we have two (for the site notion) or one (for
the eSP notion) party involved. We disregard the ﬁrst party,
which means that this number directly reﬂects the amount
of different third parties along any chain in the application.
In the example, though, as we are counting most involved
parties in any chain, the document counts as having two code
contributors regardless of the used party notion.
Table I depicts the number of sites and the corresponding
number of code contributors involved in any inclusion. eSP
counts the number of distinct code contributors according to
our notion of an extended Same Party, whereas eTLD+1 shows
the number according to prior works [2, 10, 22]. Comparing
the two notions, a clear difference becomes apparent, which
highlights the need for our reﬁned notion. Our results show
that for our deﬁnition of an extended Same Party 7,628 sites
(7,643 for eTLD+1) have at least one additional party from
which code is included (shown as 1). This number is in light
of our successful detection of 1,146 same-party relations and
the 133 relations extracted from webXray. Nevertheless, the
majority of these sites also included actual third-party content,
explaining the comparatively low difference in numbers.
We ﬁnd that 5,124 sites have pages on which a directly
included third party includes resources from another third
party (indicated by having two involved parties, 6,589 for the
eTLD+1 notion); i.e., 5,124 sites show a delegation of trust
in the longest observed inclusion chain. This is a signiﬁcant
difference of 1,465 sites (18% of the sites with any Java-
Script), which would have incorrectly classiﬁed as containing
delegated inclusions if we had relied on eTLD+1. Hence, we
ﬁnd that our eSP notion provides a signiﬁcantly better display
of inclusion practices in the wild. However, in the following,
we highlight the necessity to holistically investigate a site
and consider all inclusions in all documents to arrive at a
meaningful understanding of trust disconnect.
B. Longest vs. Shortest Path
While investigating the extreme chains provides us with
very interwoven interactions among multiple parties, it does
not yet allow us to reason about the disconnect between the
ﬁrst-party developer and the code contributor that, in the end,
runs their code in the ﬁrst-party site. To provide a more
meaningful notion of such a disconnect, we resort to ﬁnding
the shortest path to any party that runs code in the site, as in
having the least amount of other third parties contributing to
the inclusion of a script from the given party as introduced in
Section IV-C. In particular, we count how many third parties
are between the ﬁrst and the ﬁnal third party. As discussed
in the previous section,
this analysis is conducted on all
documents belonging to a given root node (Tranco list entry).
Table II depicts our ﬁndings with the number of sites for
which we can ﬁnd at least one representative of the party,
which depends on the number of other third parties and no
other representative being included in a shorter path. We ﬁnd
that 7,625 sites for our extended Same Party notion and 7,643
sites for the eTLD+1 notion include at least one third party
and do so directly without the involvement of any other party
(meaning they are directly connected but are not the ﬁrst party,
i.e., have a level of disconnect equal to one). What is more,
on 3,853 sites code originating from an implicitly trusted party
is included; i.e., an explicitly trusted third party includes code
from somewhere else, denoted as a delegated party. Moreover,
we ﬁnd that 750 sites include code from parties to which trust
has been delegated twice (i.e., a delegated party included code
from yet another party). Finally, 49 sites have at least three
levels of trust delegations, and two sites have ﬁve.
Our comparative (longest chains with site notion vs. shortest
paths with eSP notion) analysis indicates that while sites tend
to exhibit highly interwoven trust chains somewhere in their
pages, considering the holistic view on the code disconnect
within a Web site, which we could gather by favoring depth
over breadth, provides a much clearer picture. When we
compare the trust approximations provided by the longest
chain and the site notion with the shortest path and the eSP
notion, which account to 6,589 and 3,853 respectively, we can
see that 2,736 (34% of our dataset) sites do not suffer from the
dangerous pattern of including parties in a delegated fashion.
And while we cannot reproduce the ﬁndings of prior work or
retroactively apply our methods to their data, our results indeed
illustrate that for the current web models of trust disconnect
would be heavily skewed when resorting to the longest path
and eTLD+1 notion.
For the following analyses, we rely on our established
notions; i.e., both for separating parties from each other as
well as to reason about delegated or direct inclusions.
VI. IMPAIRING CONTENT SECURITY POLICY
Equipped with our improved notion of parties and third
parties’ disconnect from the ﬁrst party, in this section, we
quantify the impact of third parties on a site’s ability to deploy
6
Fig. 2. Stability of included hosts
CSP securely. CSP is primarily meant to protect against XSS.
This protection mechanism is undermined if a policy requires
the unsafe-inline and unsafe-eval keywords, which
are necessary if inline script or event handlers are used, or
strings are transformed to code through eval, respectively.
Orthogonally, while host-based allowlists are known to be
prone for bypasses [3, 39], they are nevertheless recommended
to constrain the sources from which developers can include
code in the presence of nonces and strict-dynamic [16].
This implies that ﬂuctuations in included hosts either break
an application or force the ﬁrst party to allow wildcards such