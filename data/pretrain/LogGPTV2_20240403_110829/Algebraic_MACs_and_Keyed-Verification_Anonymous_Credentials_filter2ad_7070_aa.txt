title:Algebraic MACs and Keyed-Verification Anonymous Credentials
author:Melissa Chase and
Sarah Meiklejohn and
Greg Zaverucha
This is the full version of an extended abstract published in ACM CCS 2014. Posted as Report
2013/516 on 19 August 2013; revised 8 September 2014.
Algebraic MACs and Keyed-Veriﬁcation Anonymous Credentials
Melissa Chase
Microsoft Research
Sarah Meiklejohn∗
UC San Diego
Greg Zaverucha
Microsoft Research
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract
We consider the problem of constructing anonymous credentials for use in a setting where the
issuer of credentials is also the veriﬁer, or more generally where the issuer and veriﬁer have a
shared key. In this setting we can use message authentication codes (MACs) instead of public key
signatures as the basis for the credential system.
To this end, we construct two algebraic MACs in prime-order groups, along with eﬃcient proto-
cols for issuing credentials, asserting possession of a credential, and proving statements about hidden
attributes (e.g., the age of the credential owner). We prove the security of the ﬁrst scheme in the
generic group model, and prove the security of the second scheme — using a dual-system-based
approach — under decisional Diﬃe-Hellman (DDH). Our MACs may be of independent interest, as
they are the only uf-cmva-secure MACs with eﬃcient proofs of knowledge.
Finally, we compare the eﬃciency of our new systems to two existing constructions of anonymous
credentials: U-Prove and Idemix. We show that the performance of the new schemes is competitive
with U-Prove (which does not have multi-show unlinkability), and many times faster than Idemix.
1
Introduction
An anonymous credentials system [13, 8, 10] allows for a landscape in which users can be known in
diﬀerent contexts by diﬀerent pseudonyms. For example, a user Alice might be known to Bob under
one pseudonym nym, and to Carol under a diﬀerent pseudonym nym(cid:48). Her behavior under these two
pseudonyms should be unlinkable, meaning no one can discern that the two pseudonyms belong to the
same user, yet she should be able to prove possession of a credential issued to one given pseudonym to
any other user, without revealing the pseudonym (e.g., if Carol issued a credential to nym(cid:48), Alice should
nevertheless be able to prove to Bob — using a diﬀerent pseudonym nym — that she is in possession of
the credential). Beyond proving basic possession of a credential, Alice may want to furthermore prove
that it certiﬁes certain attributes about her (e.g., her age).
Many of the potential applications of anonymous credentials involve authentication. For example,
a transit authority might issue monthly passes and then check for possession of such a pass when the
user boards a bus; similarly, a university might issue keycards to access certain buildings, and then
require a user to swipe his card upon entering one of these buildings. For each of these situations, the
authority needs to know only that an authorized user is gaining entry, yet current implementations of
such access systems allow the authority to learn the patterns of each individual participant (e.g., who
is entering which building and when). Anonymous credentials present a solution that simultaneously
preserves the integrity of the system through an unforgeability guarantee that a user cannot prove
possession of credentials he wasn’t issued (e.g., cannot gain access to a building without having been
∗This work was done in part while Sarah Meiklejohn was an intern at Microsoft Research and in part while she was a
graduate student at UC San Diego, funded by CNS-1237264 and support from the UCSD Center for Networked Systems
(CNS).
1
granted access) but also preserves the anonymity of the individual participants. If the anonymity is
preserved throughout multiple presentations of the credential (e.g., each time a user boards the bus),
it is said to satisfy multi-show unlinkability.
Traditionally, the models for anonymous credentials have assumed that a user must be prepared
to prove possession of his credentials to many other participants in the system; as such, all existing
constructions are built on top of public-key primitives such as digital signatures. In both of the above
examples, however, the issuer and veriﬁer are in fact the same entity; e.g., the transit authority both
sells (i.e., issues) monthly passes and veriﬁes them when users enter the system. In these scenarios,
and more generally in any setting in which the party controlling access to a resource also manages the
accounts of authorized parties, constructions can take advantage of this symmetry to use symmetric-
key primitives — which are typically signiﬁcantly more eﬃcient than their public-key counterparts —
to construct a keyed-veriﬁcation credential.
If we deﬁne keyed-veriﬁcation credentials as allowing the issuer and veriﬁer to share access to
some secret key, then symmetric-key primitives can be further adopted beyond the setting in which
the issuer and veriﬁer are the exact same entity. As long as a user does not need to authenticate
himself to any other user in the system, the issuer can share a separate secret key with each veriﬁer,
and then issue credentials speciﬁc to each of these veriﬁers. In a purely non-interactive setting this
might require the issuer to provide credentials for each veriﬁer all at once (which might become fairly
unattractive beyond a small number of veriﬁers), but in a more online setting the user might request
credentials from the issuer as needed. (Interestingly, the blind issuance allows the user to do this in
an anonymous fashion, as they can request a credential on the same attributes without revealing them
to the issuer.)
More generally, it is also possible to translate a publicly veriﬁable credential into a more eﬃcient
keyed-veriﬁcation credential with the same attributes and functionality. Another use case is thus as
follows: when a user wishes to interact with a new veriﬁer, he ﬁrst enrolls with the veriﬁer by presenting
a publicly veriﬁable credential; the veriﬁer checks this credential, then issues a new credential that
only he can verify. Importantly, this protocol does not require that the user reveal the attributes in
the publicly veriﬁable credential, or allow the issuer and veriﬁer together to link the credential used
during enrollment with a run of the issuance protocol. When the user returns, the eﬃcient keyed-
veriﬁcation credential is used, and it is impossible to link this use with previous presentations of the
credential or with the user’s initial enrollment. Translating credentials in this manner provides the
appealing trade-oﬀ that public veriﬁability is still possible when necessary, but credential use becomes
more eﬃcient with repeat veriﬁers.
Our contributions.
In this paper, we introduce keyed-veriﬁcation credentials, which formalize the
intuition outlined above. By using message authentication codes (MACs) in place of more tradi-
tional public-key signatures, we show that we can achieve performance improvements over existing
constructions of anonymous credentials.
In order to integrate nicely with primitives such as zero-knowledge proofs (which are typically
needed to construct anonymous credentials), we require an algebraic MAC, meaning a MAC con-
structed using group operations rather than block ciphers or hash functions. In Section 3, we present
two such MACs, both constructed in prime-order groups. The ﬁrst, MACGGM, is a generalization of
a MAC presented by Dodis et al. [17]. While Dodis et al. show that this MAC provides only a very
weak notion of security under the DDH assumption, we generalize the scheme to allow for blocks of
messages, and then prove it satisﬁes the standard notion (uf-cmva security) of MAC unforgeability,
albeit in the generic group model. The second, MACDDH, is a new construction which we propose, and
which we prove to be uf-cmva secure under the DDH assumption.
Both MACs are of potential independent interest, as they avoid techniques such as collision-
2
resistant hash functions and bit-wise decompositions, which have often been relied upon to construct
eﬃcient MACs. MACGGM is quite eﬃcient; MACDDH only slightly less eﬃcient and is based on a
mild assumption. Interestingly, the proof of security for MACDDH follows the dual-system approach
introduced by Waters [32], which makes it (to the best of our knowledge) the ﬁrst application of this
technique outside of the pairing-based setting.
Next, in Section 4, we present keyed-veriﬁcation credentials. We ﬁrst present a formal security
model, and then present two constructions, one based on each of our MACs. For each construction,
we describe how to eﬃciently issue and prove possession of credentials. Our constructions consider
credentials certifying many attributes at once to reﬂect situations with a complex access policy (e.g., in
the transit setting, a monthly pass could encode an expiration date, the area of usage, etc.); allow for
blind issuance of credentials, in which one or more of the attributes may remain hidden from the issuer
(e.g., a senior citizen might need to provide their date of birth or other sensitive information in order
to receive a discount transit pass, or one might want to transfer attributes from a publicly veriﬁable
credential as described above); and allow for presentation of credentials with attributes satisfying a
given statement.
Finally, in Section 5, we provide a detailed eﬃciency comparison of our new keyed-veriﬁcation
credentials to U-Prove [7, 25] and Idemix [9, 22], the two most eﬃcient anonymous credential schemes
to date. Our comparison indicates that, depending on the parameters of the presentation, our new
constructions both have the same or slightly higher cost when compared to U-Prove, and are always
many times faster than Idemix (by our estimates, anywhere between 4 and 16 times faster).
Related work. The state of the art in MACs based on number-theoretic assumptions are the
schemes by Dodis et al. [17]. (Their paper also contains a survey of prior work.) Of the nine MACs
presented in [17], all either (1) satisfy a weaker security notion than uf-cmva, or (2) use hash func-
tions or bitwise decomposition of the message, thus preventing an eﬃcient proof of knowledge. Since
our keyed-veriﬁcation credential constructions require both of these properties, we cannot use these
existing MACs directly. Section 3 describes the diﬀerences in more detail.
Anonymous credentials were introduced by Chaum [13] as a way to provide individuals more
control over the disclosure of personal data. U-Prove [25] is a credential system constructed from
a blind version of Schnorr signatures [7].
It is deﬁned in a prime-order group, and is thus very
computationally eﬃcient. A U-Prove credential is constructed as a number of tokens, where each token
may be used once unlinkably, so the size of U-Prove credentials is linear in the number of unlinkable
uses. A recent paper of Baldimtsi and Lysyanskaya [2] presents a construction with eﬃciency similar
to U-Prove (and similarly with no multi-show unlinkability), but with a security proof assuming the
DDH assumption in the random oracle model. (U-Prove does not have a formal proof of security.)
Idemix [22] is based on the Camenisch-Lysyanskaya [10] signature scheme (CL signatures).
In
terms of performance, Idemix and U-Prove credentials have an opposite trade-oﬀ: Idemix creden-
tials have constant size, but are considerably more expensive to present. The computational cost is
increased because the underlying signature scheme is constructed in a group where the strong RSA
problem (SRSA) is hard. While there are no guidelines for choosing parameters for the strong RSA
problem, they must be at least as large as RSA parameters, e.g., 3072 bits for 128-bit security.1 With
multiple attributes, and advanced presentation proof predicates, this cost quickly becomes too high
for lightweight provers such as smartcards [5].
There are also versions of the CL signature scheme deﬁned in bilinear groups [1, 10], and Belenkiy
et al. [3] construct anonymous credentials that support delegation. However, the algorithms in this
setting are considerably more expensive, and the computational costs of creating a presentation proof
1Note the optimizations that apply to the RSA signing operation are available only to the issuer in Idemix, not the
user or veriﬁers, as in that case the group order is unknown and exponents must be large to satisfy privacy requirements.
3
and verifying it are still signiﬁcantly greater than in U-Prove. The standardization of cryptographic
schemes based on SRSA and bilinear groups also lags further behind prime-order groups, presenting
another hurdle to deployment.
Given the trade-oﬀs of each system, our design goal is a credential system with the strengths of
U-Prove (eﬃcient presentation and standard parameters), and those of Idemix (constant credential
size and multi-show unlinkability).
2 Preliminaries
Notation. We use the notation x ∈R X or x $←− X to mean x is chosen uniformly at random from
the set X. The notation {xi}n
i=1 xi
respectively. This shorthand is used only when the set, sum or product has a single index. The
notation (cid:126)x is used to denote the vector (x0, . . . , xn) or (x1, . . . , xn), where n and the choice of 0, 1 will
be clear from the context.
i=1 xi, and (cid:81)n
1 xi are shorthand for {xi}n
1 , (cid:80)n
1 xi, and (cid:81)n
i=1, (cid:80)n
We use games in the deﬁnition of MAC security and in proofs. A game G has a main procedure
whose output is the output of the game. Pr[G] denotes the probability that this output is 1.
Zero-Knowledge Proofs. The protocols that comprise our credential system make use of zero-
knowledge (ZK) proofs to prove knowledge of, and relations between, discrete logarithms. We abstract
these protocols with a notation introduced by Camenisch and Stadler [11]. Proofs are expressed with
the notation
PK{(x, y, . . .) : statements about x, y, . . .}
where (x, y, . . .) are secrets (discrete logarithms) which satisfy statements. The prover is asserting
knowledge of (x, y, . . .), and all other values in the protocol are public.
There are many choices to implement these protocols, especially since the types of statements
required by our protocols are relatively simple (knowledge of a representation and proof of logarithm
equality). In particular, all the statements we prove can be captured by eﬃcient sigma protocols.
For our application, we need a proof system that is zero knowledge and satisﬁes a weak form of
online extraction [19]. We propose two approaches to instantiate the proof system. The ﬁrst is to
use the Damg˚ard protocol [16], which converts any sigma protocol into a three-round interactive zero-
knowledge proof of knowledge secure under concurrent composition. This protocol requires trusted
parameters, but this restriction can be omitted in the random oracle model. The second option is
to make the assumption that Fiat-Shamir based proofs [18] in the random oracle model satisfy the
required extraction property. For more discussion, see Appendix D.
Parameter Generation. Some of the parameters of our constructions include a group element h,
chosen such that logg h is unknown, where g is a generator of the group. In practice, this can be done
by deterministically deriving h from arbitrary public information using a cryptographic hash function.
All protocol participants may then verify that h was derived correctly by repeating the derivation
process. One such derivation procedure is speciﬁed in [25]. Formally, we model this as a trusted setup
algorithm which generates g, h where logg h is unknown to all parties.
Cryptographic Assumptions. The decisional Diﬃe-Hellman problem (DDH) is the following: Let
G be a cyclic group of prime order p with generator g and let a, b, c ∈R Fp; given (A = ga, B = gb, C) ∈
G3, determine whether C = gab or C = gc. The DDH assumption is that this problem is intractable
for all polynomial time adversaries when p is exponential.
4
For some of our constructions we will also give security results in the generic group model (GGM).
Intractability results in this model essentially mean that problems are intractable provided the adver-
sary only performs a series of group operations. The GGM was ﬁrst used by Shoup to prove lower
bounds on DDH and related problems [6, 28].
Concrete examples of groups that are thought to satisfy these assumptions are certain elliptic curve
groups over Fp, such as those standardized by NIST in [24].
3 MACs in Prime-Order Groups
In this section we present two MACs constructed using a cyclic group of prime order. Both schemes
use the same system parameters, created with the following algorithm.
Setup(1k). Choose a group G with order p, where p is a k-bit prime. Let g and h be generators of G
such that logg h is unknown. The system parameters are params := (G, p, g, h).
In addition to the Setup algorithm, MACs have a key generation function KeyGen, a MAC function
MAC that produces an authentication tag on a message, and a verify function Verify that veriﬁes a tag
is valid with respect to a key and message. While we do not include it as an explicit parameter, the
MAC and Verify functions are assumed to have params. This could easily be captured by including it
in the secret key; we omit it to simplify the descriptions. The message space of both schemes is Fn
p ,
where n > 0 is a parameter.
We say that (Setup, KeyGen, MAC, Verify) is a secure MAC if it is existentially unforgeable under
chosen message attack, given a veriﬁcation oracle (deﬁned as uf-cmva in [17]). We augment the
deﬁnition slightly to guarantee security even when the signer publishes some parameters iparams
associated with his secret key. In our application to anonymous credentials, iparams are the issuer
parameters and we use them to implement an eﬃcient presentation protocol.
Deﬁnition 1 (uf-cmva security). For a MAC (Setup, KeyGen, MAC, Verify), deﬁne Advuf-cmva
Pr[GA
uf-cmva(k) is deﬁned as follows:
mac,A (k) =
uf-cmva(k)], where GA
uf-cmva(k)
main GA
Q ← ∅; params $←− Setup(1k); (iparams, sk ) $←− KeyGen(params)
(m, σ) $←− AMac,Verify(params, iparams)
return (m /∈ Q) ∧ (Verify(sk , m, σ) = 1)
Procedure Macsk (m)
Q ← Q ∪ {m}
return MAC(sk , m)
Procedure Verifysk (m, σ)
return Verify(sk , m)
Then the MAC is uf-cmva secure if for all PPT adversaries A, there exists a negligible function ν(·)
such that Advuf-cmva
mac,A (k) < ν(k).
A stronger security notion for MACs is sometimes used, where A may win by outputting (m, σ),