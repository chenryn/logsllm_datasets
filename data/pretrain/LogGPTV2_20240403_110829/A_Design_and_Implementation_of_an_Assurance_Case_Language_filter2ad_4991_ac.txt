### Pattern Instantiation Algorithm

The pattern instantiation algorithm is defined as follows:

- **Case 1:**
  \[
  (g, ♦, ) \Rightarrow (g, ♦, )
  \]
- **Case 2:**
  \[
  (g, e, ) \Rightarrow (g, e, )
  \]
- **Case 3:**
  \[
  (g, st, (P_1, \ldots, P_n), ) \Rightarrow (g, st, (\Pi(P_1), \ldots, \Pi(P_n)), )
  \]
- **Case 4:**
  \[
  (g, ♦, [x : \tau = \bot]) \Rightarrow (g[v/x], ♦, [x : \tau = v])
  \]
- **Case 5:**
  \[
  (g, e, [x : \tau = \bot]) \Rightarrow (g[v/x], e[v/x], [x : \tau = v])
  \]
- **Case 6:**
  \[
  (g, st, (P_1, \ldots, P_n), [x : \tau = \bot]) \Rightarrow (g[v/x], st[v/x], (\Pi(P_1[v/x]), \ldots, \Pi(P_n[v/x])), [x : \tau = v])
  \]
- **Case 7:**
  \[
  (g, st, c[i, j](P_1, \ldots, P_n), d) \Rightarrow \Pi((g, st, (Ps_1, \ldots, Ps_k), d))
  \]
- **Case 8:**
  \[
  (g, st, m[i, j](P), d) \Rightarrow \Pi((g, st, (P, \ldots, P), d))
  \]
- **Case 9:**
  \[
  \mu\alpha.P \Rightarrow \Pi(P[\mu\alpha.P/\alpha]) \quad \text{if } u = \mu
  \]
- **Case 10:**
  \[
  \mu\alpha.P \Rightarrow ♦ \quad \text{if } u = ♦
  \]

**Figure 9. Pattern Instantiation Algorithm**

For other cases, there are corresponding pattern instantiation relations such as:
\[
(g, ♦, [x : \tau = \bot]) \xrightarrow{v} (g[v/x], ♦, [x : \tau = v])
\]
where the right-hand side is a normal form. Therefore, the theorem holds.

### Induction Step

Assume that the theorem holds for all cases in which the number of applications of \(\Pi\) is less than or equal to \(k\) (where \(1 \leq k\)). Let \(\Pi(P) = I\) by \(k + 1\) applications of \(\Pi\). For example, consider the case \(P = (g, st, (P_1, \ldots, P_n), )\):

\[
\Pi((g, st, (P_1, \ldots, P_n), )) \Rightarrow (g, st, (\Pi(P_1), \ldots, \Pi(P_n)), )
\]

Let \(\Pi(P_1) = I_1, \ldots, \Pi(P_n) = I_n\). Since these are derived by fewer than \(k\) applications of \(\Pi\), there are corresponding pattern instantiation relations: \(P_i \xrightarrow{*} I_i\) (for \(1 \leq i \leq n\)), and \(I_1, \ldots, I_n\) are normal forms. Let \(E = (g, st, ([\ ]_1, \ldots, [\ ]_n), )\). Using the pattern instantiation relation for the environmental context, we obtain the following relation:
\[
E[P_1]_1 \ldots [P_n]_n \xrightarrow{*} E[\Pi(P_1)]_1 \ldots [\Pi(P_n)]_n,
\]
i.e., \(P \xrightarrow{*} I\). \(I = (g, st, (I_1, \ldots, I_n), )\) is a normal form. Hence, the theorem holds. Other cases are similar. \(\blacksquare\)

### GSN Modules

For simplicity, we assume that a GSN module has one GSN term. It is straightforward to have multiple GSN terms in a module. We denote a GSN module by \(M\), defined as follows:
\[
M = (T, f)
\]
where \(T\) is the GSN term and \(f\) is a flag indicating whether \(M\) is public (i.e., can be referred to from other modules) or private (cannot be referred to). The definition of GSN term \(T\) is extended as follows:
\[
g ::= (desc, f)
\]
\[
T ::= ♦ \mid (g, ♦) \mid (g, e) \mid (g, st, (T_1, \ldots, T_n)) \mid M \mid \text{ref}(M) \mid \text{away}(M.g)
\]

A goal node \(g\) is extended to have a flag \(f\) to indicate whether the goal is public or private. This corresponds to public indicators in [14]. `desc` is the description, such as "System is dependable." In the definition of GSN term \(T\), \(M\) represents a sub-module inside a GSN term. \(\text{ref}(M)\) represents a reference to another module. To refer to a module \(M\), the flag of \(M\) should be public. In [14], there is no distinction between direct and indirect references. In our development, we recognized the need for this distinction to introduce the notion of sub-modules. \(\text{away}(M.g)\) represents an away goal in Figure 5. \(M\) is the module in which the goal \(g\) exists, and the flag of \(g\) should be public.

A module system \(M\) is defined as a set of modules:
\[
M ::= \{M_1, \ldots, M_n\}
\]

In [14], inter-module notation is defined. If a module \(M_2\) is referred to from another module \(M_1\), then there is a direct edge from \(M_1\) into \(M_2\) in the inter-module notation. In our framework, inter-module notation \(I\) is defined as a directed control flow graph over \(M\):
\[
I ::= (M, \rightarrow_c),
\]
where \(M_1 = (T_1, f_1) \rightarrow_c M_2 = (T_2, f_2)\) (with \(M_1, M_2 \in M\)) if and only if \(M_2\) appears in \(T_1\). The subscript \(c\) in \(\rightarrow_c\) represents the contract module between \(M_1\) and \(M_2\). Currently, the semantics of a contract module are unspecified, as the semantics seem to still be under development in [14].

### Implementation

To show that our framework can be implemented easily, we have implemented the GSN pattern and module extensions using the open-source code of D-Case Editor [25]. Our implementation has been incorporated into the newest version of D-Case Editor (version 0.9.4). The source code is located in a GitHub repository [24]. D-Case Editor has been implemented as a plug-in of Eclipse [9] using Eclipse GMF (Graphical Modeling Framework) [8].

**Figure 10. D-Case Editor Screenshot**

### GSN Pattern Implementation

Matsuno and Taguchi [27] reported on a preliminary implementation of the global parameter instantiation function in D-Case Editor. In this paper, we have implemented all pattern constructs. The pattern instantiation process involves the following steps:

1. **Select a Pattern:** The user selects an appropriate pattern from the pattern library, which is an Eclipse project named "D-CasePattern" inside the user's workspace. User-defined patterns can also be stored in the project.
2. **Choose Values:** The user recursively chooses values for parameters, the number of multiplicity and choice, and whether to unfold loop structures once or not on the GSN tree structure.
3. **Place the Pattern:** The editor automatically places the instantiated pattern in the canvas.

We show a few pattern examples in our implementation.

#### Simple Pattern

Let \(P_1 = (g_1, st_1, m[1, 3]((g_2, e_2, [FunctionName : \text{string} = \bot])))\), where \(g_1 = "System is dependable," st_1 = "Argument over functions," g_2 = "[\bot] is dependable," e_2 = "Evidence for [\bot]." Note that a parameter is enclosed by [] in the node description. \(P_1\) can be written as in Figure 11. In our implementation, parameter, multiplicity, choice, and loop constructs are generalized as "Pattern" nodes. Figure 12 shows an instance of \(P_1\). The number of multiplicity is set as 2, and the parameter "FunctionName" is instantiated with "Function1" and "Function2" in each instantiated sub-tree, respectively.

**Figure 11. A Simple Pattern**

**Figure 12. An Instance of the Pattern in Figure 11**

#### Simple Loop Pattern

Let \(P_2 = \mu\alpha.(g_1, st_1, (\alpha))\). \(P_2\) in D-Case Editor is shown in the left-hand side of Figure 13. The right-hand side shows an instance of the loop pattern accomplished by unfolding the loop once. In the current implementation, an occurrence of \(\alpha\) is defined by choosing the parent node. In Figure 13, the strategy node \(S_1\) is chosen as the parent node of \(\alpha\).

**Figure 13. A Simple Loop Pattern and Its Instance**

### GSN Module Implementation

Let \(M_{\text{dependability}} = (T_1, f_1)\) and \(M_{\text{security}} = (T_2, f_2)\), where:
\[
T_1 = (g_1, st_1, ((g_2, e_2), M_{\text{security}}.g_3))
\]
\[
T_2 = (g_3, e_3)
\]

The descriptions of \(g_1, g_2, st_1, g_3\) are "System is dependable," "System is safe," "Argument over attributes," "System is secure," respectively. The descriptions of \(e_1, e_3\) are both "test results." Figure 14 shows \(T_1\) and \(T_2\). In the current implementation, away goals are represented by a green color, and referred goals are by an orange color. Figure 15 shows the inter-module notation for \(M = \{M_{\text{dependability}}, M_{\text{security}}\}\). The small module node named "c" represents the contract node. D-Case Editor can automatically produce inter-module notations by analyzing the dependency among modules.

**Figure 14. GSN Terms \(T_1\) in \(M_{\text{dependability}}\) and \(T_2\) in \(M_{\text{security}}\)**

**Figure 15. Inter-Module Notation for \(M_{\text{dependability}}\) and \(M_{\text{security}}\)**

### Representing Existing GSN Examples

As far as we know, our formal definition and implementation of all GSN and its pattern and module extensions are the first ones for the GSN community standard [14]. Currently, we are representing existing GSN examples in the literature ([16], [21], [42], [1], [7]). We mainly focus on [16] as it seems to be the most recent catalogue and [42] as it seems to be the most collective catalogue.

Current implemented GSN patterns in D-Case Editor are shown in [26]. From the original GSN patterns, to satisfy Definition 2, the following normalizations are required (normalization of GSN links is also done as in Figure 6) in a few cases:

1. **Pattern Constructs Splitting:** Multiple pattern constructs are defined in the same node. We normalize such cases by adding a few nodes to separate multiple pattern constructs. This is required for determining the order of pattern instantiation.
2. **Pattern Merge Splitting:** As shown in Figure 16, multiple different pattern constructs are merged into the same node. We normalize such cases by making a copy of the merged sub-tree and splitting it into different sub-trees. Merge of patterns requires data flow analysis [2] for parameters.

**Figure 16. Merge Splitting of GSN Pattern Constructs**

Table I shows GSN patterns in [26]. The "Norm." column indicates the required changes mentioned above.

The results show some applicability of our framework for existing GSN patterns. Our implementation of GSN patterns with D-Case Editor is partly achieved by normalizations 1) and 2). Note that 1) and 2) only add a few nodes and copies of sub-trees, respectively, from the original patterns (except for the Requirements Breakdown Pattern in [7], which has merged nested loops, thus requiring multiple copies of loops).

We show two patterns from Table I as examples. Figure 17 is the "Hazard Avoidance Pattern" [21]. This pattern is essentially the same as the pattern in Figure 11.

**Figure 17. Hazard Avoidance Pattern [21]**

Figure 18 is the "Software Contribution Safety Argument" [16]. In the original pattern [16], the loop construct (P5) and multiplicity construct (P2) are defined in the same node (S1). We split these two constructs by adding nodes G5 and S3. A subtle issue is the loop counter. In [16], it is defined as {tier n} in the top goal and also as the loop counter. We divide \(n\) into "tier" and "tierLoop."

**Figure 18. Software Contribution Safety Argument [16]**

### Table I: GSN Pattern List [26]

| Pattern Name | Norm. |
|--------------|-------|
| High-Level Software Safety Argument [16] | 1) |
| Software Contribution Safety Argument [16] | 1), 2) |
| SSR Identification Software Safety Argument [16] | 2) |
| Hazardous Contribution Software Safety Argument [16] | 1), 2) |
| SW Contribution Safety Argument with Grouping [16] | - |
| Hazard Avoidance Pattern [21] | - |
| Fault Free Software Pattern [21] | - |
| ALARP (As-Low-As-Reasonably-Practicable) Pattern [21] | - |
| Component Contributions to System Hazards [42] | - |
| Hazardous SW Failure Mode Decomposition Pattern [42] | - |
| Hazardous Software Failure Mode Classification Pattern [42] | - |
| Software Argument Approach Pattern [42] | - |
| Absence of Omission Hazardous Failure Mode Pattern [42] | - |
| Absence of Commission Hazardous Failure Mode Pattern [42] | - |
| Absence of Early Hazardous Failure Mode Pattern [42] | - |
| Absence of Late Hazardous Failure Mode Pattern [42] | - |
| Absence of Value Hazardous Failure Mode Pattern [42] | - |
| Effects of Other Components Pattern [42] | - |
| Handling of Hardware/Other Component Failure Mode [42] | - |
| Handling of Software Failure Mode [42] | - |
| At Least As Safe Argument [1] | - |
| Requirements Breakdown Pattern [7] | 1), 2) |

### Current Limitations and Research Issues

We list the current limitations:

- **Evaluation for Real Systems:** The pattern extensions have not been evaluated for real systems (only for patterns in papers). Patterns are introduced for reusing successful existing fragments. It is worth experimenting on how patterns reduce the cost of writing assurance cases with a tool assistant.