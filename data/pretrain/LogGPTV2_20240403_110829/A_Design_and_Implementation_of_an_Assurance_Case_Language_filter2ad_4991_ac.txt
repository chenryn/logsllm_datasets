case P of
(g, ♦, ) =⇒ (g, ♦, )
(g, e, ) =⇒ (g, e, )
(g, st, (P1, . . . , Pn), ) =⇒ (g, st, (Π(P1), . . . , Π(Pn)), )
(g, ♦, [x : τ = ⊥]) =⇒ (g[v/x], ♦, [x : τ = v])
(g, e, [x : τ = ⊥]) =⇒ (g[v/x], e[v/x], [x : τ = v])
(g, st, (P1, . . . , Pn), [x : τ = ⊥]) =⇒
(g[v/x], st[v/x], (Π(P1[v/x]), . . . , Π(Pn[v/x])), [x : τ = v])
(g, st, c[i, j](P1, . . . , Pn), d) =⇒ Π((g, st, (Ps1 , . . . , Psk
), d))
(g, st, m[i, j](P ), d) =⇒ Π((g, st, (P, . . . , P ), d))
μα.P =⇒ Π(P [μα.P/α]) if u = μ
μα.P =⇒ ♦ if u = ♦
Figure 9. Pattern instantiation algorithm
For other cases, there are corresponding pattern instantiation
relations such as
(g, ♦, [x : τ = ⊥])
v−→ (g[v/x], ♦, [x : τ = v]),
and the righthand is a normal form. Therefore the theorem
holds.
Induction Step
Assume that the theorem holds for all cases in which the
number of application of Π is less than or equal to k (1 ≤ k).
Let Π(P ) = I by k + 1 applications of Π. For example,
consider the case P = (g, st, (P1, . . . , Pn), ):
Π((g, st, (P1, . . . , Pn), )) =⇒ (g, st, (Π(P1), . . . , Π(Pn)), )
Let Π(P1) = I1, . . . , Π(Pn) = In. Since these are de-
rived by less than k applications of Π, there are corre-
sponding pattern instantiation relations: Pi −→∗ Ii (1 ≤
i ≤ n), and I1, . . . , In are normal forms. Let E =
(g, st, ([]1, . . . , []n), ). Using the pattern instantiation rela-
tion for the environmental context, we obtain the follow-
ing relation: E[P1]1 . . . [Pn]n −→∗ E[Π(P1)]1 . . . [Π(Pn)]n,
i.e., P −→∗ I. I = (g, st, (I1, . . . , In), ) is a normal form.
Hence the theorem holds. Other cases are similar. (cid:3)
C. GSN Modules
For simplicity, we assume that a GSN module has one
GSN term. It is easy to have multiple GSN terms in a
module. We denote a GSN module by M, deﬁned as follows.
M = (T, f )
where T is the GSN term and f is the ﬂag to indicate
whether M is public (i.e., can be referred to from other
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
modules) or private (can not be referred to). The deﬁnition
of GSN term T is extended as follows.
g ::= (desc, f )
T ::= ♦ | (g, ♦) | (g, e) | (g, st, (T1, . . . , Tn))
M | ref(M ) | away(M.g)
A goal node g is extended to have the ﬂag f to indicate
whether the goal is public or private. This corresponds to
public indicators in [14]. desc is the description such as
“System is dependable.” In the deﬁnition of GSN term T ,
M represents a sub module inside a GSN term. ref(M )
represents a reference to other module. To refer to a module
M, the ﬂag of M should be public. In [14], there is no
distinction between direct and indirect references. In our
development, we recognized the need for a distinction to
be able to introduce the notion of sub module. away(M.g)
represents an away goal in Figure 5. M is the module in
which the goal g exists. The ﬂag of g should be public.
A module system M is deﬁned as a set of modules:
M ::= {M1, . . . , Mn}.
In [14], inter-module notation is deﬁned. If a module M2
is referred to from another module M1, then there is a direct
edge from M1 into M2 in the inter-module notation. In our
framework, inter-module notation I is deﬁned as a directed
control ﬂow graph over M:
I ::= (M,→c),
where M1 = (T1, f1) →c M2 = (T2, f2) (M1, M2 ∈ M)
if and only if M2 appears in T1. The subscript c in
→c represents the contract module between M1 and M2.
Currently, the semantics of a contract module are unspeciﬁed
as the semantics seems to still be under development in [14].
IV. IMPLEMENTATION
To show that our framework can be implemented easily,
we have implemented the GSN pattern and module exten-
sions using the open source code of D-Case Editor [25].
Our implementation has been incorporated into the newest
version of D-Case Editor (version 0.9.4). The source code
is located in a GitHub repository [24]. D-Case Editor has
been implemented as a plug-in of Eclipse [9] using Eclipse
GMF (Graphical Modeling Framework) [8].
A screenshot of D-Case Editor is shown in Figure 10. The
main components of D-Case Editor are the Package Explorer
(lefthand side of Figure 10) of Eclipse, from which a user
can select GSN terms, Canvas to edit GSN terms (center in
Figure 10), and Palette (righthand side of Figure 10) to use
GSN nodes.
Figure 10. D-Case Editor screenshot
A. GSN Pattern Implementation
Matsuno and Taguchi [27] reported on a preliminary
implementation of the global parameter instantiation func-
tion in D-Case Editor. In this paper, we have implemented
all pattern constructs. The pattern instantiation takes the
following steps.
1) The user selects an appropriate pattern from the
pattern library, which is an Eclipse project named
“D-CasePattern” inside the user’s workspace. User-
deﬁned patterns can also be stored in the project.
2) The user recursively chooses values for parameters,
number of multiplicity and choice, and whether to
unfold loop structure once or not on the GSN tree
structure.
3) The editor automatically places the instantiated pattern
in the canvas.
We show a few pattern examples in our implementation.
A simple pattern
Let P1 = (g1, st1, m[1, 3]((g2, e2, [F unctionN ame :
string = ⊥]))), where g1 = “System is dependable,” st1 =
“Argument over functions,” g2 = “[⊥] is dependable,” e2 =
“Evidence for [⊥].” Note that a parameter is enclosed by []
in the node description. P1 can be written as in Figure 11.
In our implementation, parameter, multiplicity, choice, and
loop constructs are generalized as “Pattern” node. Figure 12
shows an instance of P1. The number of multiplicity is set
as 2, and the parameter “FunctionName” is instantiated with
“Function1” and “Function2” in each instantiated sub tree,
respectively.
A simple loop pattern
Let P2 = μα.(g1, st1, (α)). P2 in D-Case Editor is shown
in the lefthand side of Figure 13. The righthand side shows
an instance of the loop pattern accomplished by unfolding of
the loop once. In the current implementation, an occurrence
of α is deﬁned by choosing the parent node. In Figure 13,
636
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
Figure 11. A simple pattern
Figure 13. A simple loop pattern and its instance
Figure 12. An instance of the pattern in Figure 11
the strategy node S1 is chosen as the parent node of α.
B. GSN Module Implementation
Figure 14. GSN Terms T1 in Mdependability and T2 in Msecurity
In our
implementation, modules are implemented as
Let Mdependability = (T1, f1) and Msecurity = (T2, f2),
Eclipse ﬁles.
where
T1 = (g1, st1, ((g2, e2), Msecurity.g3))
T2 = (g3, e3)
The descriptions of g1, g2, st1, g3 are “System is depend-
able,” “System is safe,” “Argument over attributes,” “System
is secure,” respectively. The description of e1, e3 are both
“test results.” Figure 14 shows T1 and T2. In the current
implementation, away goals are represented by a green color,
and referred goals are by an orange color. Figure 15 shows
the inter-module notation for M = {Mdependability, Msecurity}.
The small module node named “c” represents the contract
node. D-Case Editor can automatically produce inter-module
notations by analyzing the dependency among modules.
637
Figure 15.
Inter-module notation for Mdependability and Msecurity
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
Figure 17. Hazard Avoidance Pattern [21]
C. Representing Existing GSN Examples
As far as we know, our formal deﬁnition and implementa-
tion of all GSN and its pattern and module extensions are the
ﬁrst ones for the GSN community standard [14]. Currently,
we are representing existing GSN examples in the literature
([16], [21], [42], [1], [7]). We mainly focus on [16] as it
seems to be the most recent catalogue and [42] as seems to
be the most collective catalogue.
Current implemented GSN patterns in D-Case Editor is
shown in [26]. From the original GSN patterns, to satisfy
Deﬁnition 2, the following normalizations are required (nor-
malization of GSN links is also done as in Figure 6) in a
few cases.
1) Pattern constructs splitting. Multiple pattern constructs
are deﬁned in the same node. We normalize such cases
by adding a few nodes to separate multiple pattern
constructs. This is required for determining the order
of pattern instantiation.
2) Pattern merge splitting. As shown in Figure 16, mul-
tiple different pattern constructs are merged into the
same node. We normalize such cases by making a copy
of the merged sub tree, and split it to different subtrees.
Merge of patterns requires data ﬂow analysis [2] for
parameters.




Figure 16. Merge splitting of GSN pattern constructs
Table I shows GSN patterns in [26]. 1) and 2) in “Norm.”
column indicate required changes mentioned above.
The results show some applicability of our framework for
existing GSN patterns. Our implementation of GSN patterns
with D-Case Editor is partly achieved by normalizations
1) and 2). Note that 1) and 2) only add a few nodes and
copies of sub trees, respectively from the original patterns
(except for Requirements Breakdown Pattern in [7], which
has merged nested loops, thus multiple copies of loops are
required).
We show two patterns from Table I as examples. Figure 17
is the “Hazard Avoidance Pattern” [21]. This pattern is
essentially the same as the pattern in Figure 11.
Figure 18 is the “Software Contribution Safety Argument”
[16]. In the original pattern [16], the loop construct (P5) and
multiplicity construct (P2) are deﬁned in the same node (S1).
We split these two constructs by adding nodes G5 and S3.
A subtle issue is the loop counter. In [16], It is deﬁned as
{tier n} in the top goal and also as the loop counter. We
divide n into “tier” and “tierLoop”.
Figure 18. Software Contribution Safety Argument [16]
638
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
Table I
GSN PATTERN LIST [26]
Pattern Name
High-Level Software Safety Argument [16]
Software Contribution Safety Argument [16]
SSR Identiﬁcation Software Safety Argument [16]
Hazardous Contribution Software Safety Argument [16]
SW Contribution Safety Argument with Grouping [16]
Hazard Avoidance Pattern [21]
Fault Free Software Pattern [21]
ALARP (As-Low-As-Reasonably-Practicable) Pattern [21]
Component Contributions to System Hazards [42]
Hazardous SW Failure Mode Decomposition Pattern [42]
Hazardous Software Failure Mode Classiﬁcation Pattern [42]
Software Argument Approach Pattern [42]
Absence of Omission Hazardous Failure Mode Pattern [42]
Absence of Commission Hazardous Failure Mode Pattern [42]
Absence of Early Hazardous Failure Mode Pattern [42]
Absence of Late Hazardous Failure Mode Pattern [42]
Absence of Value Hazardous Failure Mode Pattern [42]
Effects of Other Components Pattern [42]
Handling of Hardware/Other Component Failure Mode [42]
Handling of Software Failure Mode [42]
At Least As Safe Argument [1]
Requirements Breakdown Pattern [7]
Norm.
1)
1), 2)
2)
1), 2)
There are several issues. One issue is the addition of a
“list pattern.” For example, assume that there is a hazard
list. In many existing GSN examples, a goal is divided into
sub goals for each item of such lists. The Hazard Avoidance
Pattern [21] in Figure 17 is a typical one. List pattern
constructs could be deﬁned as (g, st, (λx : τ.P ), d), where
P is the body of sub trees and x : τ is the binding parameter
for elements of the list. The pattern instantiation relation can
be deﬁned as:
[e1,...,en]
−→ (g, st, (P [e1/x], . . . , P [en/x]), d),
(g, st, (λx : τ.P ), d)
where [e1, . . . , en] is a list of type τ list given by the user.
Loop counter should be automatically instantiated accord-
ing to the loop unfolding. It would be needed to introduce
intermediate loop pattern constructs holding current value of
the loop counter. First, the loop pattern construct is extended
to have the loop counter as a binding parameter: μ(α, n).P .
Next, the intermediate loop pattern construct is of the form
[μ(α, n).P ]i, where i is the current value of the loop counter.
The pattern instantiation relations would be of the form:
[μ(α, n).P ]0 −→ ♦
[μ(α, n).P ]i −→ P [[μ(α, n).P ]i−1/α, i/n]
This corresponds to passing a loop counter as an argument
to a recursively called function. Currently, we are designing
such extended pattern constructs.
D. Current Limitations and Research Issues
We list current limitations.
• The pattern extensions have not been evaluated for
real systems (only for patterns in papers). Patterns are
639
introduced for reusing successful existing fragments. It
is worth experimenting on how patterns reduce the cost
of writing assurance cases with a tool assistant.