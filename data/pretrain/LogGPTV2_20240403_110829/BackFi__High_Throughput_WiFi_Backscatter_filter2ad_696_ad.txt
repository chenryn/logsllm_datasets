to the received signal and performing backscatter. We show
experimentally that this small silent period is sufﬁcient for
the reader/AP to estimate the self-interference channel and
perform cancellation for the rest of the WiFi packet. Since
Cancellation filter CirculatorΣTXRXEnvironmentalReflections{𝑥∗ℎ𝑓.𝑒𝑗𝜃}∗ℎ𝑏+𝑥∗ℎ𝑒𝑛𝑣xClientEstimating Forward and Backward ChannelMRC & Demodulator{𝑥∗ℎ𝑓.𝑒𝑗𝜃}∗ℎ𝑏Viterbi Decoderℎ𝑏ℎ𝑓ℎ𝑒𝑛𝑣Tag Data 𝑒𝑗𝜃 ℎ=ℎ𝑒𝑛𝑣𝜃DownlinkxTagData289Figure 6: Discrete time representation of the design of BackFi: The samples of the WiFi excitation signal z is multiplied by the data φ at
the tag.The modulated signal then passes through the backward channel hb. The sampling period of WiFi is much smaller than the symbol
period of the tag. This results in multiple copies of the tag data over several sampling period at the reader. These multiple copes are combined
optimally by the MRC to estimate the tag data ˆφ.
4.3.2 Decoding the Tag Data
The ﬁnal step is decoding the tag data itself. BackFi’s key
insight here is the fact that symbol times for tag data are quite
long due to the need to conserve energy at the tag. Speciﬁ-
cally the tag modulates data by changing the phase term in
ejθ(t). Changing the phase is implemented by switching a
transistor as described in Sec. 4.1. Transistor energy con-
sumption scales linearly with switching frequency, hence
tags use low rate switching frequencies. Typical transistor
switching frequencies in tags are on the order of 0.5 − 2.5
MHz in tags, hence the symbol period in a tag is between
500 − 2000 ns. How can we exploit this insight to decode
the data?
Our observation is that the delay spread in a typical chan-
nel between the reader and the tag is far smaller than 500
ns. In other words the length of the channel is far smaller.
Intuitively this is because typical distances between a reader
and a tag are around 10 m, so even accounting for reﬂections
the extra multipath delay spread is small. Hence a channel
usually lasts for 50 − 80 ns. But the symbol period from the
tag is much longer at 500 ns, hence for the duration of the
channel, we can consider the tag signal to be an unknown
constant ejθc. BackFi leverages this insight to decode, it
looks at the part of the symbol period (with some guard pe-
riods at the start and end of the symbol time as shown in
Fig. 6 and tries to ﬁnd the value of the constant phase within
that period.
Speciﬁcally, with a constant phase from time t1 − t2, we
can rewrite the decoding equation at the reader as:
y(t) = (x(t) ∗ [hf (t) ∗ hb(t)])ejθc + N ; t1 ≤ t < t2
Note that all the terms except ejθc are known in the above
equation. A natural next step might be to divide y(t) by
x(t) ∗ [hf (t) ∗ hb(t)] but this works poorly because it will
also divide the noise term in the above equation and in many
scenarios amplify it.
(5)
To tackle this, we turn to an old trick in communication
theory: maximal ratio combining. To see how this works it
helps to write the above equation in the discrete domain (the
representations are equivalent assuming sufﬁcient sampling
rate) as follows:
ytag[n] = ejθ[n1]xT
n,L+Mhfb
∀n ∈ [n1, n2]
(6)
Here L is the length of the forward channel, and M is the
length of the backward channel. The hfb is the length L +
M vector of the combined forward-backward channel and
xn,L+M = [xn . . . xn+L+M−1]T is a vector of length L+M
constructed using the excitation data x[n], and we have as-
sumed that the tag signal is constant for the period [n1, n2].
The above equation is simply a discrete version of Eq. 5 with
the discrete convolution operation represented as dot product
of vectors xn,L+M and hfb.
Notice that the tag signal is expressed in terms of the
forward-backward channel that we have estimated earlier,
and therefore individual estimates of the forward and the
backward channel are not needed. Also note that the tag
modulation is constant for n2−n1+1 interval which is larger
than L + M, this is restating the same insight that length of
the forward and backward channels is much smaller than the
symbol period of the tag. So we will have n1 + n2 − LM
different values of ytag[n] which contains information of the
unknown but constant tag signal ejθc. We can leverage this
fact to combine all these values to obtain the most likely
value of θc that could have produced those sequence of ob-
servations of ytag[n] over the period [n1, n2] using maximal
ratio combining (essentially the same as temporal diversity
combining). Speciﬁcally MRC would use the following for-
mula to estimate θc,
(cid:80)n2
(cid:123)
ˆytag[n]
(cid:80)|ˆytag[n]|2
n=n1
ˆθc =
ytag[n]
,
(7)
where ˆytag[n] is the expected tag backscatter signal with-
out the modulation and can be computed as
ˆytag[n] = xT
n,L+Mhfb
∀n ∈ [n1, n2],
and (cid:123) is the complex conjugate operator. Essentially the dif-
ferent measurements of y over that interval are weighted ap-
j1= ejq1j2= ejq2z1z2z3z4z5z6Symbol PeriodSampling Periodj1z1j1z2j1z3j2z4j2z5j2z6Backward Channel Length}j1 ( z1 hb1+z2 hb2 )MRCSample ignoredj1 ( z2 hb1+z3 hb2 )j2 ( z4 hb1+z5 hb2 )j2 ( z5 hb1+z6 hb2 )}MRCj2^j1^Tag DataExcitation Signal at TagTag modulatorModulated Tag DataReceived tag backscatter=hb1hb2Convolution with backward channel=Estimated tag dataMaximal Ratio CombiningTag ModulationBackward Channel ConvolutionMRC Decoder at Readerj1z3 hb1+j2z4 hb2 )290propriately and combined to produce the most likely esti-
mate of θc.
At this point, we have a robust estimate of the tag data for
that symbol. The algorithm is repeated for all the symbols
in the tag packet. There may still be decoding errors of the
n-PSK symbols, which we can correct by using a standard
channel code on top. In BackFi, we use a convolutional code
at the tag to improve the link performance. The coding pro-
vides additional robustness and is decoded using a standard
Viterbi decoder [38], we omit the details for brevity.
5.
IMPLEMENTATION
We build a prototype of both the AP and tag of BackFi
system. We describe their implementation details below.
5.1 BackFi AP
The BackFi AP is implemented using WARP software
radios. The WARP incorporates a standard 20 MHz WiFi
baseband operating in the 2.4 GHz range. We also use the
same implementation on a WARP board to work as a WiFi
client in our experiments. Further the decoding logic for
backscatter signals is also implemented in the WARP FPGA [7].
For self-interference cancellation, we reproduce the recent
design on single antenna cancellation [12, 11].
5.2 BackFi Tag
The IoT sensor is designed to operate across the 2.4 GHz
WiFi channels. The prototype uses a 2.4 GHz omni-directional
antenna that can receive and backscatter WiFi signals and
has a gain of 3 dB. In our current prototype, logic imple-
mented on a Kintex Kc705 board [6] supplies the data to
be transmitted and conﬁgures the backscatter circuitry. This
can be replaced with custom ASIC in a full design which
would consumes signiﬁcantly lower energy.
The backscatter circuitry implements two components on
the uplink: the detector, and the modulator. The modula-
tor implements BPSK, QPSK and 16-PSK modulation. The
phase modulation is implemented using SP4T switches. We
chose phase modulation instead of n-QAM because this will
result in the least amount of RF signal degradation during
the backscatter modulation.
5.2.1 Energy consumption efﬁciency metric
In order to compare various implementation choices for
IoT sensor, traditionally Energy per Bit (EPB) measured in
average joules of energy required to transmit one bit of in-
formation has been used as a metric for energy efﬁciency.
However, EPB varies signiﬁcantly with the implementation
platform. For example, the EPB for an IoT sensor imple-
mented using off-the-shelf discrete components can be or-
ders of magnitude larger than the EPB for IoT sensor im-
plemented in a sub-micron ASIC design. Even for the sub-
micron ASIC designs, EPB varies signiﬁcantly depending
on the technology node chosen (say 65-nm CMOS node vs
45-nm CMOS node) and the design choices (low power sub-
threshold CMOS design vs traditional strong inversion CMOS
design). BackFi’s contribution is in showing how the EPB of
an IoT sensor are related to each other for various communi-
cation parameters on a particular implementation platform.
For example, if an IoT sensor can choose BPSK or QPSK for
communication, an interesting question may be, what is the
relationship between the EPB of these two cases. While to
the ﬁrst order the EPB of these two cases should be the same
and only the throughput should double going from BPSK to
QPSK, a more detailed analysis shows that EPB is not the
same for these two cases.
To understand why, let us refer to the architecture of the
RF modulator as shown in Fig. 3. While BPSK requires only
one SPDT switch, the QPSK requires three SPDT switches
with double the throughput, therefore the EPB of the mod-
ulator goes up by a factor of 3
2. Likewise, for 16-PSK we
need 15 SPDT switches, but the data rate improvement is
only 4 times compared to the BPSK, therefore the relative
EPB for modulator increases by a factor of 15
4 . Also, power
consumption in IoT sensor has two major components, the
ﬁrst one is dynamic power resulting from the charging and
discharging of capacitors in various sub-systems of the IoT
sensor as digital logic is computed, and the second is static
power which is either due to leakage, or due to constant
current required by some of the analog components in the
IoT sensor. Because of the static power, the EPB is also ef-
fected by the symbol rate of the IoT sensor as the device
takes longer time to transmit the same amount of data. For
example, an IoT sensor can reduce the symbol rate which
results in the improved SNR at the BackFi from MRC, but
at the same time the static power consumption of the circuits
will increase thereby increasing the overall EPB.
In order to show the energy efﬁciency trade-offs associ-
ated with the various choices offered by BackFi and to de-
couple them from the energy efﬁciency gained from actual
choice of the implementation platform, we will present the
remainder of the results using unit-less Relative Energy per
Bit (REPB). We will ﬁrst describe how energy consumption
is modeled for our exemplary IoT sensor as shown in Fig. 2
and then show how we can compute its REPB for different
parameter choices.
We have modeled the EPB of the tag by identifying the
major power consumption modules of the IoT sensor archi-
tecture shown in Fig. 2. The three major contributors for
EPB of this design are: the RF modulator, the channel en-
coder and the memory. As discussed earlier, the EPB of RF
modulator varies depending on the chosen modulation index
because the ratio of bit rate to the number of SPDT switches
varies as we change the modulation index. In our current en-
ergy model we have computed the static and dynamic EPB
of RF modulation unit by appropriately scaling the data pro-
vided for an industry standard modulator, the Analog De-
vices ADG904 [1].
BackFi uses a convolutional encoder to reduce bit error
rates (BER). The exact EPB contributed by the encoder cir-
cuit is a very small fraction of the total EPB required for
communication because convolutional encoders with mod-
erate constraint length ( 7 in BackFi) require only 6 shift
registers and a few XOR gates to encode the IoT sensor data.
But the major EPB contribution comes from the coding rate
associated with the convolutional encoder. For example, a
2 rate code will essentially double the EPB of the RF mod-
1
291ulator because the IoT sensor will transmit twice the actual
amount of data on the channel. Likewise, a rate 2
3 code will
bump the RF modulator’s EPB by a factor of 3
2 and so on.
And ﬁnally BackFi also models the EPB associated with
the memory read of the data in the IoT sensor. Because
memory reads are performed for the sole purpose of backscat-
tering the data to the BackFi’s reader, we believe it is very
important to include the read energy associated with the mem-
ory element as part of the overall EPB. In our current energy
model we have computed the static and dynamic EPB of the
memory read by using data provided for Cypress Semicon-
ductor CY62146EV30 [2].
Using the above energy modeling technique we can now
compute the EPB required for a particular choice of com-
munication parameters: channel code rate, symbol switching
rate, modulation index
EPB = EPBmem + EPBmod + EPBenc.
(8)
Here EPBmem is the EPB associated with the memory read
inside the IoT sensor. This has two parts, the dynamic EPB
that is dependent on the number of read operations per bit of
data of IoT sensor, and the static part that is dependent on
the symbol switching rate Ts,
EPBmem = EPBmem,read + Pmem,static × Ts.
Similarly, we can express the EPB associated with the con-
volutional encoder EPBenc and the modulator EPBmod with
their constituent dynamic and static EPB.
In order to obtain the unit-less REPB, we use EPB for one
set of such communication parameters as a reference and
then divide the EPB for all the other choices with this refer-
ence EPB. In our current evaluation, we use 1