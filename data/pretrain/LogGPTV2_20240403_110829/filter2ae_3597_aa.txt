**Author：Longofo@Knownsec 404 Team**  
**Time: March 27, 2020**  
**Chinese version:**
A vulnerability on [Liferay Portal JSON Web Service
RCE](https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html)
was previously posted on CODE WHITE. At first, my friends were dealing with
this vulnerability, and I went to see it later. Liferay Portal uses [Flexjson
library](http://flexjson.sourceforge.net/) for JSON Web Service processing in
6.1 and 6.2 versions, and replaced it with [Jodd Json](https: /
/jodd.org/json/) after version 7.
**In summary, the vulnerability is: Liferay Portal provides Json Web Service
service. For some endpoints that can be called, if a method provides Object
parameter type, then we can construct an exploitable malicious class that
conforms to Java Beans and pass the constructed json deserialization string,
Liferay will automatically call the setter method of the malicious class and
the default constructor when deserializing**. However, there are still some
details, and I feels quite interesting. In this article, the analysis of
Liferay using JODD deserialization.
#### JODD Serialization And Deserialization
Refer to the [Official User Manual](https://jodd.org/json/), first look at the
direct serialization and deserialization of JODD:
TestObject.java:
    package com.longofo;
    import java.util.HashMap;
    public class TestObject {
        private String name;
        private Object object;
        private HashMap hashMap;
        public TestObject() {
            System.out.println("TestObject default constractor call");
        }
        public String getName() {
            System.out.println("TestObject getName call");
            return name;
        }
        public void setName(String name) {
            System.out.println("TestObject setName call");
            this.name = name;
        }
        public Object getObject() {
            System.out.println("TestObject getObject call");
            return object;
        }
        public void setObject(Object object) {
            System.out.println("TestObject setObject call");
            this.object = object;
        }
        public HashMap getHashMap() {
            System.out.println("TestObject getHashMap call");
            return hashMap;
        }
        public void setHashMap(HashMap hashMap) {
            System.out.println("TestObject setHashMap call");
            this.hashMap = hashMap;
        }
        @Override
        public String toString() {
            return "TestObject{" +
                    "name='" + name + '\'' +
                    ", object=" + object +
                    ", hashMap=" + hashMap +
                    '}';
        }
    }
TestObject1.java
    package com.longofo;
    public class TestObject1 {
        private String jndiName;
        public TestObject1() {
            System.out.println("TestObject1 default constractor call");
        }
        public String getJndiName() {
            System.out.println("TestObject1 getJndiName call");
            return jndiName;
        }
        public void setJndiName(String jndiName) {
            System.out.println("TestObject1 setJndiName call");
            this.jndiName = jndiName;
    //        Context context = new InitialContext();
    //        context.lookup(jndiName);
        }
    }
Test.java
    package com.longofo;
    import jodd.json.JsonParser;
    import jodd.json.JsonSerializer;
    import java.util.HashMap;
    public class Test {
        public static void main(String[] args) {
            System.out.println("test common usage");
            test1Common();
            System.out.println();
            System.out.println();
            System.out.println("test unsecurity usage");
            test2Unsecurity();
        }
        public static void test1Common() {
            TestObject1 testObject1 = new TestObject1();
            testObject1.setJndiName("xxx");
            HashMap hashMap = new HashMap();
            hashMap.put("aaa", "bbb");
            TestObject testObject = new TestObject();
            testObject.setName("ccc");
            testObject.setObject(testObject1);
            testObject.setHashMap(hashMap);
            JsonSerializer jsonSerializer = new JsonSerializer();
            String json = jsonSerializer.deep(true).serialize(testObject);
            System.out.println(json);
            System.out.println("----------------------------------------");
            JsonParser jsonParser = new JsonParser();
            TestObject dtestObject = jsonParser.map("object", TestObject1.class).parse(json, TestObject.class);
            System.out.println(dtestObject);
        }
        public static void test2Unsecurity() {
            TestObject1 testObject1 = new TestObject1();
            testObject1.setJndiName("xxx");
            HashMap hashMap = new HashMap();
            hashMap.put("aaa", "bbb");
            TestObject testObject = new TestObject();
            testObject.setName("ccc");
            testObject.setObject(testObject1);
            testObject.setHashMap(hashMap);
            JsonSerializer jsonSerializer = new JsonSerializer();
            String json = jsonSerializer.setClassMetadataName("class").deep(true).serialize(testObject);
            System.out.println(json);
            System.out.println("----------------------------------------");
            JsonParser jsonParser = new JsonParser();
            TestObject dtestObject = jsonParser.setClassMetadataName("class").parse(json);
            System.out.println(dtestObject);
        }
    }
Output:
    test common usage
    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject default constractor call
    TestObject setName call
    TestObject setObject call
    TestObject setHashMap call
    TestObject getHashMap call
    TestObject getName call
    TestObject getObject call
    TestObject1 getJndiName call
    {"hashMap":{"aaa":"bbb"},"name":"ccc","object":{"jndiName":"xxx"}}
    ----------------------------------------    TestObject default constractor call
    TestObject setHashMap call
    TestObject setName call
    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject setObject call
    TestObject{name='ccc', object=com.longofo.TestObject1@6fdb1f78, hashMap={aaa=bbb}}
    test unsecurity usage
    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject default constractor call
    TestObject setName call
    TestObject setObject call
    TestObject setHashMap call
    TestObject getHashMap call
    TestObject getName call
    TestObject getObject call
    TestObject1 getJndiName call
    {"class":"com.longofo.TestObject","hashMap":{"aaa":"bbb"},"name":"ccc","object":{"class":"com.longofo.TestObject1","jndiName":"xxx"}}
    ----------------------------------------    TestObject1 default constractor call
    TestObject1 setJndiName call
    TestObject default constractor call
    TestObject setHashMap call
    TestObject setName call
    TestObject setObject call
    TestObject{name='ccc', object=com.longofo.TestObject1@65e579dc, hashMap={aaa=bbb}}
In Test.java, two ways are used. First one is the commonly used way. The root
type is specified when deserializing. The second official does not recommend
this，security issues are exist. Assume up this application provides a place to
receive JODD Json, and uses the second way, you can deserialize any type
specified。The Liferay vulnerability is not caused by this reason, because it
does not use `setClassMetadataName("class")`.
#### Liferay's Packaging For JODD
Liferay does not directly use JODD for processing, but repackages some
functions of JODD. The code is not long, so we will use JODD separately to
analyze Liferay's packaging of JsonSerializer and JsonParser.
##### JSONSerializerImpl
Liferay's wrapper for JODD JsonSerializer is the
`com.liferay.portal.json.JSONSerializerImpl` class:
    public class JSONSerializerImpl implements JSONSerializer {
        private final JsonSerializer _jsonSerializer;//JODD's JsonSerializer was finally handed over to JODD's JsonSerializer for processing, but it wrapped some additional settings
        public JSONSerializerImpl() {
            if (JavaDetector.isIBM()) {//Judging the JDK
                SystemUtil.disableUnsafeUsage();//Related to the use of the Unsafe class
            }
            this._jsonSerializer = new JsonSerializer();
        }
        public JSONSerializerImpl exclude(String... fields) {
            this._jsonSerializer.exclude(fields);//Exclude a field from being serialized
            return this;