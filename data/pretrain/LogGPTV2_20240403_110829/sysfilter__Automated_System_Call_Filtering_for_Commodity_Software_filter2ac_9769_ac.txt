taken only within such functions. Again, if this condition is
true, it marks the AT functions that correspond to the object
beginning at OBJ_BEGIN as unreachable, and iteratively per-
forms the purging process until no additional functions can be
classiﬁed as unreachable. We refer to the pruned ACG, com-
bined with DCG, as vacuumed call graph (VCG). Speciﬁcally,
VCG = DCG ∪ ACG(cid:48), where ACG(cid:48) denotes the pruned ACG
using the approach outlined above (see Figure 1C). Again,
VCG is a complete, tight over-approximation of the true FCG:
i.e., sysfilter only excludes functions that can never be
executed by the program (under any possible input); more
formally: V [FCG] ⊆ V [VCG] ⊆ (V [DCG] ∪ V [ACG]).
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    463
1 #define ctor __attribute__ (( constructor ))
2 typedef void (* fptr )(void);
3
4 void f10 (void) { ... }
5 ctor void f9 (void) { ... f10 (); ... }
6 void f8 (void) { ... }
7 void f7 (void) { ... f8 (); ... }
8 void f6 (void) { ... }
9 void f5 (void) { ... fp_arr [n ](); ... }
10 void f4 (void) { ... f5 (); ... }
11 void f3 (void) { ... }
12
13 fptr f2 (void) { ... return & f4 ; }
14 fptr f1 (void) { ... return & f3 ; }
15
16 fptr fp ;
17 fptr fp_arr [] = {& f6 , & f7 };
18
19 int main (void)
20 {
21
22
23
24
25
26 }
...
fp = f1 ();
...
fp ();
return EXIT_SUCCESS ;
Figure 2: VCG Construction Example. Without symbol
information V [VCG] = {main, f1, f3, f6, f7, f8, f9, f10},
whereas with symbols (or debugging information) available,
V [VCG] = {main, f1, f3, f9, f10}.
Figure 2 illustrates a C-like program, which we will be
using as an example to demonstrate the VCG construc-
tion. sysfilter will initially include main (ln. 19) and
f9 (ln. 5). DCG will also include all the directly-reachable
functions from the above initial set: f1 (reachable from
main, ln. 22) and f10 (reachable from f9, ln. 22). Hence,
V [DCG] = {main, f1, f9, f10}. Next, sysfilter will pro-
ceed with the construction of the ACG, which, initially, will
include all the address-taken functions: f3 (ln. 14), f4 (ln. 13),
and f6 and f7 (ln. 17). ACG will also include all the directly-
reachable functions from set of AT functions: f5 (reachable
from f4, ln. 10) and f8 (reachable from f7, ln. 7). Thus,
V [ACG] = {f3, f4, f5, f6, f7, f8}.
sysfilter will then continue with pruning the ACG as
follows. First, it will remove f4, as its address is only taken
in function f2 (ln. 13), which is unreachable. This will also
result in removing f5, as it is only directly-reachable from f4
(ln. 10). If the respective ELF object is stripped, the pruning
process will terminate at this point, resulting in the following
set of functions: V [ACG(cid:48)] = {f3, f6, f7, f8}. If symbol (or
debugging) information is available, then sysfilter can
perform more aggressive pruning by identifying that fp_arr
is not referenced by any function in scope. Therefore, the AT
functions f6 and f7 can also be removed, as well as f8 that
is directly-reachable only from f7 (ln. 7). The net result of
the above is the following set of functions: V [ACG(cid:48)(cid:48)] = {f3}.
To summarize, without symbol information, V [VCG] =
V [DCG] ∪ V [ACG(cid:48)] = {main, f1, f3, f6, f7, f8, f9, f10},
whereas with symbols (or debugging information) available,
V [VCG] = V [DCG] ∪ V [ACG(cid:48)(cid:48)] = {main, f1, f3, f9, f10}.
Interested readers are referred to the appendix (§ A) for more
information about how sysfilter handles GNU IFUNC and
NSS symbols, overlapping code, and hand-written assembly.
3.1.3 System Call Set Construction
The x86-64 ABI dictates that system calls are performed
using the syscall instruction [30].3 Moreover, during the
invocation of syscall, the system call number is placed in
register %rax. Armed with the program’s VCG, sysfilter
constructs the system call set in question as follows.
First, it identiﬁes all reachable functions that include
syscall instructions, by performing a linear sweep in each
function f ∈ V [VCG] to pinpoint syscall instances. Once
the set of all the reachable syscall instructions is estab-
lished, sysfilter continues with performing a simple value-
tracking analysis to resolve the exact value(s) of %rax on ev-
ery syscall site. The process relies on standard live-variable
analysis using use-deﬁne (UD) chains [2, § 9.2.5]. Speciﬁ-
cally, sysfilter considers that syscall instructions “use”
%rax and leverages the UD links to ﬁnd all the instructions
that “deﬁne” it. In most cases, %rax is deﬁned via constant-
load instructions (e.g., mov $0x3,%eax), and by collecting
such instructions and extracting the respective constant values,
sysfilter can assemble system call sets. If %rax is deﬁned
via instructions that involve memory operands, sysfilter
aborts (or issues a warning, if invoked accordingly) as the
resulting system call set may be incomplete [72]. The output
of the syscall-set extraction component is the collected set of
system call numbers in JSON format (see Figure 1D).
We opt for applying the analysis above in an intra-
procedural manner, as our results indicate that this strategy
works well in practice (see § 5); system call invocation is
architecture-speciﬁc, and typically handled via libc using
the following pattern (in x86-64): ‘mov $SYS_NR, %eax;
syscall’, where $SYS_NR = {$0x0, $0x1, ...}. One ex-
ception is the handling of the syscall() function [48], which
performs system calls indirectly by receiving the respective
system call number as argument. If syscall() is not-address
taken in VCG, then sysfilter ﬁrst identiﬁes the reachable
functions that directly-invoke syscall(), and performs intra-
procedural, value-tracking on register %rdi (ﬁrst argument,
system call number). If the address of syscall() is taken
in the reachable VCG, then sysfilter aborts (or issues a
warning, if invoked accordingly) as the resulting system call
set may, again, be incomplete.
3Performing syscalls via software interrupts (e.g., int $0x80), or
sysenter, is only supported in x86-64 Linux to allow executing 32-bit appli-
cations over a 64-bit kernel. sysfilter focuses solely on 64-bit applications
(i.e., it does not consider syscalls via int $0x80 or sysenter).
464    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
AUDIT_ARCH_X86_64
SECCOMP_RET_KILL_PROCESS
( offsetof (struct seccomp_data , arch ))) ,
1 #define ARCH
2 #define NRMAX ( X32_SYSCALL_BIT - 1)
3 #define ALLOW SECCOMP_RET_ALLOW
4 #define DENY
5
6 struct sock_filter filter [] = {
7 BPF_STMT ( BPF_LD | BPF_W | BPF_ABS ,
8
9 BPF_JUMP ( BPF_JMP | BPF_JEQ | BPF_K , ARCH , 0, 7) ,
10 BPF_STMT ( BPF_LD | BPF_W | BPF_ABS ,
11
12 BPF_JUMP ( BPF_JMP | BPF_JGT | BPF_K , NRMAX , 5, 0) ,
3, 0) ,
13 BPF_JUMP ( BPF_JMP | BPF_JEQ | BPF_K , 0,
14 BPF_JUMP ( BPF_JMP | BPF_JEQ | BPF_K , 1,
2, 0) ,
15 BPF_JUMP ( BPF_JMP | BPF_JEQ | BPF_K , 15 , 1, 0) ,
16 BPF_JUMP ( BPF_JMP | BPF_JEQ | BPF_K , 60 , 0, 1) ,
17 BPF_STMT ( BPF_RET | BPF_K , ALLOW ),
18 BPF_STMT ( BPF_RET | BPF_K , DENY ) };
( offsetof (struct seccomp_data , nr ))) ,
Figure 3: Classic BPF (cBPF) Program. Compiled-by
sysfilter, enforcing the following syscall set: 0 (read),
1 (write), 15 (exit), and 60 (sigreturn). The ﬁlter checks
if the value of ﬁeld nr (syscall number) ∈ {0,1,15,60} via
means of linear search.
3.2 System Call Set Enforcement
The input to the syscall-set enforcement component of
sysfilter is the set of allowed system calls, as well as the
ELF ﬁle that corresponds to the main binary of the application
(see Figure 1E). Armed with the set of developer-intended
syscalls, sysfilter uses seccomp-BPF [36] to enforce it at
run-time. The latter receives as input a BPF “program” [54],
passed via prctl, or seccomp, which is invoked by the ker-
nel on every system call. Note that BPF programs are exe-
cuted in kernel mode by an interpreter for BPF bytecode [54],
while just-in-time (JIT) compilation to native code is also sup-
ported [11]. In addition, the Linux kernel provides support for
two different BPF variants: (a) classic (cBPF) and (b) extended
(eBPF) [46]; seccomp-BPF makes use of cBPF only.
The input to seccomp-BPF programs (ﬁlters) is a ﬁxed-size
struct (i.e., seccomp_data; see Figure 8 in Appendix B),
passed by the kernel, which contains a snapshot of the system
call context: i.e., the syscall number (ﬁeld nr), architecture
(ﬁeld arch), as well as the values of the instruction pointer
and syscall arguments. sysfilter performs ﬁltering based
on the value of nr as follows: if (nr ∈ {0,1, ...}) then
ALLOW else DENY, where {0,1, ...} is the set of allowed
system call numbers. Given such a set, sysfilter compiles
a cBPF ﬁlter that implements the above check via means of
linear or skip list-based search. Figure 3 depicts a ﬁlter that
uses the linear search approach to enforce the following set of
syscalls: read (0), write (1), exit (15), and sigreturn (60).
Ln. 7 – 12 implement a standard preamble, which asserts that
the architecture is indeed x86-64. This check is crucial as
it guarantees that the mapping between the allowed syscall
numbers and the syscalls performed is the right one.
For instance, suppose that this check is missing, and
getuid (102)—a harmless syscall—exists in the allowed set.
If the target process (x86-64) is compromised, and the at-
tacker issues syscall no. 102, via int $0x80 (or sysenter),
then the ﬁlter will allow the syscall but the kernel will exe-
cute socketcall instead: i.e., the syscall with number 102
in x86 (32-bit), effectively giving the attacker network-access
capabilities. The check in ln. 9 rejects every architecture dif-
ferent from x86-64, while the check in ln. 12 rejects syscalls
that correspond to the x32 ABI [50].4 The bulk part of the
enforcement/search is implemented in ln. 13 – 16 (BPF_JEQ
statements). Note that cBPF does not allow loops, and there-
fore sysfilter implements the linear search using loop un-
winding (i.e., ‘if-else if-...-else’ construct). In case
of a non-permitted syscall, sysfilter terminates the pro-
cesses (ln. 4, SECCOMP_RET_KILL_PROCESS). Figure 9, in the
appendix (§ B), illustrates a cBPF ﬁlter that uses the skip list
approach to implement the search.
links
sysfilter injects
the compiled ﬁlter as
follows.
First, it generates a dynamic shared object, namely
libsysfilter.so. Next, it
the aforementioned
shared object with the main binary, using patchelf [61];
libsysfilter.so includes only a
function,
install_filter, registered as a constructor. The net
result of the above is that ld.so will automatically load
libsysfilter.so, and invoke install_filter, during
the initialization of the main binary (see Figure 1F).
single
install_filter attaches the compiled cBPF ﬁlter, at load-
time, using the seccomp system call [47]. Importantly, be-
fore invoking seccomp (with SECCOMP_SET_MODE_FILTER),
the no_new_privs attribute of the calling thread is asserted,
via invoking prctl (with PR_SET_NO_NEW_PRIVS), disabling
the acquisition of new privileges via further execve-ing pro-
grams that make use of set-user-ID, set-group-ID, or other
capabilities. Lastly, install_filter passes the argument
SECCOMP_FILTER_FLAG_TSYNC [47] to seccomp for making
the respective ﬁlter visible to all executing threads, while it
also uses SECCOMP_FILTER_FLAG_SPEC_ALLOW [47] to dis-
able the speculative store bypass (SSB) mitigation. Note that
the latter is conﬁgurable; however, the SSB mitigation is
only relevant when BPF programs of unknown provenance
are loaded in kernel space to further assist mounting Spectre
attacks [37] (variant 4 [25])—sysfilter cBPF programs are
not malicious nor attacker-controlled.
Once the ﬁlter is installed using the method outlined above,
the respective process can execute only developer-indented
syscalls. Note that ld.so is included in the analysis scope,
and hence the initialization/ﬁnalization of additional libraries,
at run-time (e.g., via dlopen/dlclose), as well as any other
ld.so-related functionality, is supported seamlessly.
4If the target binary is going to be executed atop an x86-64 Linux kernel
that does not support x86 emulation (CONFIG_IA32_EMULATION=n) nor the
x32 ABI (CONFIG_X86_X32=n), then sysfilter can further optimize the
generated ﬁlters by omitting the arch-related preamble.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    465
Crucially, no_new_privs guarantees that ﬁlters are pinned
to the protected process during its lifetime—i.e., even if the
process is completely compromised, attackers cannot remove
ﬁlters. Recall that the ﬁltering itself takes place in kernel
mode using only the syscall number as input; the syscall
arguments are not inspected, and user space memory is not
accessed, thereby avoiding the pitfalls related to concurrency
and (wrapper-based) syscall ﬁltering [17, 92]. In addition,
applications that make use of seccomp-BPF are seamlessly
supported as well. BPF ﬁlters are stackable, meaning that more
than one ﬁlter can be attached to a process; if multiple ﬁlters
exist, the kernel always enforces the most restrictive action.
Handling execve sysfilter prevents enforcement by-
passes via the execution of different programs. Speciﬁcally,
even if a (compromised) process is allowed to invoke execve,
it still cannot extend its set of allowed syscalls by invoking
a different executable that has a (potentially) larger set of
allowed syscalls; the same is also true if the process tries to
craft a rogue executable in the ﬁlesystem, which allows all
syscalls (or some of the blocked ones), and execute it. Filter
pinning and stacking are essential for ensuring that processes
can only reduce their set of allowed syscalls, in accordance to