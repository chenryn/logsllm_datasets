---
## Page 2087
了原先的表现行为。影响如此之大，而我们却没有一个测试用例去
对它进行检查，显然我们应当改进测试集！
Javalanche框架
在变异测试实验中，我们为Java程序编写了一个框架，称为
Javalanche。Javalanche中实现了之前所列的所有优化操作，因此即使
面对一个中等规模的程序，它也可以在可接受的时间内完成。
Javalanche还支持对变异操作根据影响排序，因此你可以将注意力集
中在影响比较大的变异上。
Javalanche可以在网上免费得到。我们可以很方便地对它的框架进行
扩展，支持更多的变异操作或者支持更多衡量影响的方法。而且它
是完全自动的，通过与Eclipse的集成（它也可以在网上免费得
到），我们可以将它作为一个批量运行的工具让它自动运行。如果
你想要一个可以交互的工具，我们推荐之前提到过的uJava，μJava有
很多可以交互的设置。
2086
---
## Page 2088
备注
测试用例：编辑摘要
输人第二个摘要
wait_for_element_present_ok
steditsummarytextarea
30000
click.ok
steditsummarytextarea
图18-2在Eclipse环境运行Javalanche
其他
变异测试从第一次提出这个概念，至今已经有30年了。它也开始步
入成熟阶段。主要原因如下：
变异测试完全依赖于自动化测试，自动化测试的应用相比10年之前
要广泛得多。
随着计算能力的提高，我们终于可以满足变异测试所需要的爆炸式
增长的计算需求。
测试用例生成器帮助我们很方便就可以得到很高的代码覆盖率，但
是生成的测试用例还不是非常完美。
2087
---
## Page 2089
我们有了许多动态和静态的优化方法来极大地提高变异测试的效
率，同时提高了在改进测试集时的效率。
致谢
在此，我们要特别感谢和我们一起体验变异测试之美的研究人员和
学生。ValentinDallmeier为我们在不变性学习、二进制代码工具及不
变量检测中提供了许多帮助。BernhardGrin完成了基于覆盖率的影
响检测的实现。同时，我们还要感谢对本章早些版本提供审读及评
价的人。
参考文献
Mothra框架是变异测试领域最早的一个框架，此框架是基于
FORTRAN语言的。它的概述值得一读：
DeMillo,R.A.,DS.Guindi,K.N.King,W.M.McCracken,and
A.J.Offutt.1998."An extended overview of the Mothra software testing
environment."In Proceedings of the Second Workshop on Software
Testing,Verification,and Analysis,142-151.Banff,Alberta:IEEE Computer
SocietyPress
μJava框架是比较新的一个框架。此论文是uJava框架的一个概述：
Ma, Y.-S.,J.Offutt,and Y.-R.Kwon,2006." MuJava:a mutation system for
Java." In ICSE06:Proceedings of the 28th International Conference on
Software Engineering,827-830.New York,NY:ACM.
我们做实现的Javalanche在以下两篇论文中有所提及：
Grun,B.J.M.,D.Schuler,and A.Zeller.2009."The impact of equivalent
mutants."In Mutation 2009:International Workshop on Mutation
Analysis,April,in Denver,CO,USA
Schuler,D.,VDallmeier,and A.Zeller.2009."Efficient mutation testing by
checking invariant violations".In ISSTA 2009:International Symposium on
Software Testing and Analysis,July,in Chicago,IL,USA
所有的这些资料，都可以在我们的网站
(http:/www.javalanche.org/）上找到。
2088
---
## Page 2090
第19章参照测试之美ClintTalbert
自动化回归测试通常不会被看作是优美的测试。事实上，如果自动
化是成功的，则它应该可以脱离人类意识而自动运行：它由一系列
系统组成，这些系统能够不借助人工干预，在每次构建之后运行成
千上万个测试。自动化测试通常会和一个已稳定项目的维护阶段关
联起来，而这并不那么迷人。然而，当尝试测试Web技术时，你会
发现你是在这些方法和技术被开发者广泛使用之前就尝试测试的。
在Mozilla项目上，我们正在尝试利用自动化回归测试系统来解决这
个问题。作为一种手段，它能够将回归测试从反馈型测试转变成一
种更富有前瞻意义的、预期型的测试。
我们的目标是在互联网上建立和支持开放、创新以及机遇。为了达
成这一目标，我们正在建立一个平台，它将会提供开放的Web技
术，并且它和我们对互联网的前瞻预期相一致。山我们的产品中最
有名的例子是Firefox浏览器，但还有许多其他产品也是基于这一理
念：Thunderbird、Komodo、Miro和Songbird是其中一些较为知名的
代表。这些产品能够使人们做不同的事情，从阅读电子邮件、播放
音乐到开发其他应用程序，但这些产品有一个共同点：它们都构建
在Gecko页面渲染引擎之上。
在Mozilla平台中，界面（UserInterface,UI）元素被嵌入在XUL中，
XUL是一种基于XML的标记语言。这种标记使用JavaScript来与那些
元素交互，它使用和你的站点相同的层叠样式表。你可能已经听说
了基于XML的HTML一—XHTML，它是XUL的一个近亲。事实上，
你甚至能用XUL写一个页面。所以，同样的渲染引擎既能够渲染标
准页面，也能够渲染基于每个Mozilla平台的用户界面元素。这就是
Gecko渲染引擎成为我们所支持的开放Web的一个核心部件的原因。
并且，它的改变会极大地影响每个下游的应用程序，无论那个程序
是否将显示页面内容作为其基本功能。
因为渲染引擎是Mozilla平台中最为关键的组件之一，我们的可视化
测试框架—参照测试（reference testing），就成为了我们遵循简单
性和可扩展性使用回归测试框架来进行前瞻性测试的最佳范例之
一。作为一个优美的范例，参照测试框架体现了这些原则，使得自
动化测试更具前瞻性。为了学习下面的课程并且便于将其应用于你
自己的测试基础设施（testinfrastructure）中，你需要了解参照测试
的以下三个核心组件：
2089
---
## Page 2091
优雅地解决问题
·包含可扩展性
·构建造
参照测试结构
在我们谈论扩展性或社区之前，我们应该先来了解什么是参照测试
以及它们是如何工作的。参照测试其实产生于一个简单的想法，就
是你能够使用两段不同的页面代码片段来生成一个相同的可视化谊
染。如果两个代码片段产生的渲染里出现了不同，那么测试结果就
是失败的。例如，我们来测试一个应用了样式规则的元素，应该和参照文件（表19-1）中用HTML标
记产生相同的效果。这两种代码都应该使那个句子变
成粗体。
备注
测试用例：编辑摘要
输人第二个摘要
wait_for_elenent_present_ok
steditsummarytextarea
30000
clickok
steditsummarytextarea
2090
---
## Page 2092
那么，设想一下如果我们想要测试CSS样式表和选择器②来代替上
面的语义标识的情形。在此情况下，我们可以使用CSS选择器来控
制测试的渲染效果，同时在参照文件中使用内联样式（inline style）
来控制元素的渲染（表19-2）。因此，表19-1中的测试通过参照
HTML标识测试了CSS样式规则，而表19-2中的测试则是通过对照类
选择器（classselector）和内联样式（inlinestyle）来测试CSS子系统
是否工作正常。
备注
测试用例：编辑摘要一输入第二个摘要
wait_for_element_present_ok
steditsummarytextarea
0000
clickok
steditsummarytextarea
在这个测试中使用类选择器将"Thisisbold"句子的字体转换成了粗体
字。而参照项中则使用了和表19-1中使用过的相同的内联样式。我
们可以在表19-2中使用和表19-1相同的一份参照文件吗？是的，可
以，但是潜在的问题是这可能测试了一条不同的代码路径。表19-2
为测试和参照项都使用CSS样式规则，使我们能够将测试锁定在
Gecko的CSS子系统上。这将使我们能有信心证明类分离器工作正
常。我们用这种方法，可以分离和测试所有支持的可视化Web技
2091
---
## Page 2093
术的特定行为。目前，我们使用参照测试来测试HTML、XHTML、
CSS、XUL和可缩放矢量图形（ScalableVectorGraphics,SVG）。
参照测试被清单文件（manifestfile）控制，它能够依次包括进其他
的清单文件，允许我们将这些测试嵌套入资源树。一个清单文件如
例19-1所示。
例19-1：参照测试示例清单文件
=test1.html testl-ref.html
!=test2.xhtml test2-ref.html
fails-if(MOZ_WIDGET_TOOLKIT=="windows")=test3.html test3-
ref.html
清单文件使用一种非常直接的语法，并且保证你已经看到它是如何
工作的：
三个需要的参数是类型、测试URL和参照URL。例19-1中的前三行符
合这个语法，大多数在参照测试框架里面所作的测试都是这样做
的。在这个例子里，第一个符号一或！=用来确定测试项和参照项的
关系，第二个和第三个符号就分别是测试项和参照项。==符号代表
测试通过的条件是渲染结果必须一致。相反地，！=符号代表测试通
过的条件是渲染结果必须不同。
可选参数允许我们指引指挥系统如何在各种情况下
预期失败和断言。例如，例19-1中的那行语句表示预期测试3将在
Windows上失败而在其他系统上通过。如果测试出乎意料地在
Windows上通过，那么肯定被看作是失败了。像fails-if，还有其他的
操作符用来条件性地忽略断言、跳过某些测试或者标注出某些测试
不可靠。可选参数表示该测试应该通过HTTP服务器来运
行，因为该测试依赖于某些特定的HTTP头信息或某一特定的HTTP
状态。[4]
2092