JDK 7u21分析
0x01 写在前⾯
JDK7u21原⽣gadget链的构造⼗分经典，在对于其构造及思想学习后，写下本⽂作为笔记。
0x02 所需的知识点
JDK7u21这个链⽤了很多的Java基础知识点，主要如下：
Java 反射
javassist 动态修改类
Java 静态类加载
Java 动态代理
hash碰撞
为了⽅便⼤家理解此⽂，因此我会对这些知识点进⾏简单介绍，如果都了解的朋友可以直接
翻到后⾯的分析过程。
0x03 基础知识
1、Java 反射
反射 (Reflection) 是 Java 的特征之⼀，在C/C++中是没有反射的，反射的存在使得运⾏中的 
Java 程序能够获取⾃身的信息，并且可以操作类或对象的内部属性。那么什么是反射呢？
对此， Oracle 官⽅有着相关解释：
“Reflection enables Java code to discover information about the
fields, methods and constructors of loaded classes, and to use
reflected fields, methods, and constructors to operate on their
underlying counterparts, within security restrictions.”
（反射使Java代码能够发现有关已加载类的字段、⽅法和构造函数的信息，并在安全限
制内使⽤反射的字段、⽅法和构造函数对其底层对应的对象进⾏操作。）
简单来说，通过反射，我们可以在运⾏时获得程序或程序集中每⼀个类型的成员和成员的信
息。同样的，JAVA的反射机制也是如此，在运⾏状态中，通过 Java 的反射机制，对于任意⼀
个类，我们都能够判断⼀个对象所属的类；对于任意⼀个类，都能够知道这个类的所有属性
和⽅法；对于任意⼀个对象，都能够调⽤它的任意⼀个⽅法和属性；这种动态获取的信息以
及动态调⽤对象的⽅法的功能称为Java语⾔的反射机制。
既然利⽤Java的反射机制，我们可以⽆视类⽅法、变量访问权限修饰符，可以调⽤任何类的任
意⽅法、访问并修改成员变量值，那么这可能导致安全问题，如果⼀个攻击者能够通过应⽤
程序创建意外的控制流路径，那么就有可能绕过安全检查发起相关攻击。假设有段代码如
下：
存在⼀个字段为name，当获取⽤户请求的name字段后进⾏判断，如果请求的是 Delect 操
作，则执⾏DelectCommand 函数，若执⾏的是 Add 操作，则执⾏ AddCommand 函数，如
果不是这两种操作，则执⾏其他代码。
此时，假如有位开发者看到了这段代码，他觉得可以使⽤Java 的反射来重构此代码以减少代
码⾏，如下所示：
  String name = request.getParameter("name");
  Command command = null;
   if (name.equals("Delect")) {
     command = new DelectCommand();
  } else if (ctl.equals("Add")) {
     command = new AddCommand();
  } else {
   ...
  }
  command.doAction(request);
1
2
3
4
5
6
7
8
9
10
String name = request.getParameter("name");
  Class ComandClass = Class.forName(name + "Command");
  Command command = (Command) CommandClass.newInstance();
  command.doAction(request);
1
2
3
4
这样的重构看起来使得代码⾏减少，消除了if/else块，⽽且可以在不修改命令分派器的情况下
添加新的命令类型，但是如果没有对传⼊进来的name字段进⾏限制，那么我们就能实例化实
现Command接⼝的任何对象，从⽽导致安全问题。实际上，攻击者甚⾄不局限于本例中的
Command接⼝对象，⽽是使⽤任何其他对象来实现，如调⽤系统中任何对象的默认构造函
数，再如调⽤Runtime对象去执⾏系统命令，这就可能导致远程命令执⾏漏洞。
更多关于反射的内容具体可以参考我以前写的这篇⽂章：https://www.cnpanda.net/codeaudi
t/705.html
2、javassist 动态修改类
Javaassist 就是⼀个⽤来处理 Java 字节码的类库，其主要优点在于简单、便捷。⽤户不需要了
解虚拟机指令，就可以直接使⽤Java编码的形式，并且可以动态改变类的结构，或者动态⽣成
类。
Javassist中最为重要的是ClassPool，CtClass ，CtMethod 以及 CtField这⼏个类。
ClassPool：⼀个基于HashMap实现的CtClass对象容器，其中键是类名称，值是表示该类
的CtClass对象。默认的ClassPool使⽤与底层JVM相同的类路径，因此在某些情况下，可能
需要向ClassPool添加类路径或类字节。
CtClass：表示⼀个类，这些 CtClass 对象可以从ClassPool获得。
CtMethods：表示类中的⽅法。
CtFields ：表示类中的字段。
Javassit官⽅⽂档中给出的代码示例如下
⾸先获取 ClassPool 的实例，ClassPool 主要⽤来修改字节码，并且在 ClassPool 中存储着 
CtClass 对象，它能够按需创建出 CtClass 对象并提供给后续处理流程使⽤，当需要进⾏类
修改操作的时候，可以通过 ClassPool 实例的.get()⽅法，获取CtClass对象。如在上述代码
中就是从 pool 中利⽤ get ⽅法获取到了 test.Rectangle 对象，然后将获取到的 CtClass 
对象赋值给cc变量。
需要注意的是，从 ClassPool 中获取的 CtClass 对象，是可以被修改的。如在上述代码
中，可以看到，原先的⽗类，由 test.Rectangle 被改成了 test.Point 。这种更改可以
通过调⽤ CtClass().writeFile() 将其持久化到⽂件中。
可以举个实例来看看，如下代码：
运⾏后，就会⽣成名为 Test.class 的⽂件，如下图所示：
实际上如果反编译该 class ⽂件，可以得到以下内容：
这就是动态修改类的⼀些知识了。
import javassist.*;
public class TestJavassist {
    public static void createPseson() throws Exception {
        ClassPool pool = ClassPool.getDefault();
        CtClass cls = pool.makeClass("Test");
        CtField param = new CtField(pool.get("java.lang.String"), "test", cls);
        param.setModifiers(Modifier.PRIVATE);
        cls.addField(param, CtField.Initializer.constant("whoami"));
        CtConstructor cons = new CtConstructor(new CtClass[]{}, cls);
        cons.setBody("{test = \"whoami\";}");
        cls.addConstructor(cons);
        cls.writeFile("./");
    }
    public static void main(String[] args) {
        try {
            createPseson();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
public class Test{
    private String test = "test";
    public Test(){
        this.test = "whoami";
    }
}
1
2
3
4
5
6
更具体的可以参考这位⽼哥写的⽂章：https://www.cnblogs.com/scy251147/p/11100961
.html
3、Java 静态类加载
java 静态类加载属于类加载的⼀种，类加载即是指 JVM 虚拟机把 .class ⽂件中类信息加载
进内存，并进⾏解析⽣成对应的 class 对象的过程，举个通俗点的例⼦来说，JVM在执⾏某
段代码时，遇到了class A， 然⽽此时内存中并没有class A 的相关信息，于是 JVM 就会到相
应的 class ⽂件中去寻 找class A的类信息，并加载进内存中，这就是我们所说的类加载过
程。
由此可⻅，JVM不是⼀开始就把所有的类都加载进内存中，⽽是只有第⼀次遇到某个需要运
⾏的类时才会加载，且只加载⼀次。
类加载的过程主要分为三个部分：加载、链接、初始化，⽽链接⼜可以细分为三个⼩部分：
验证、准备、解析。
在加载阶段，JVM 将 class ⽂件字节码内容通过类加载器加载到内存中，并将这些静态数据转
换成⽅法区的运⾏时数据结构，然后⽣成⼀个代表这个类的 java.lang.Class 对象；在链接阶
段，主要是将 Java 类的⼆进制代码合并到 JVM 的运⾏状态之中，在初始化阶段，主要是对类
变量初始化，是执⾏类构造器的过程。换句话说，只对static修饰的变量或语句进⾏初始化。
如果初始化⼀个类的时候，其⽗类尚未初始化，则优先初始化其⽗类。如果同时包含多个静
态变量和静态代码块，则按照⾃上⽽下的顺序依次执⾏。java 静态类加载就是在这个阶段执
⾏的，也就是说 java 静态类加载早于其他类加载。
那么什么时候会发⽣类初始化呢？
主要是类的主动引⽤（⼀定会发⽣类的初始化），类的主动引⽤主要指以下情形：
虚拟机启动时，先初始化 main ⽅法所在的类
new ⼀个类的对象
调⽤类的静态成员（除了 final 常量）和静态⽅法
使⽤ java.lang.refect 包的⽅法对类进⾏反射调⽤
当初始化⼀个类，如果其⽗类没有被初始化，那么会初始化他的⽗类
关于类加载，可以参考这个【 Class.forName()  与 ClassLoader.loadClass()  - 哪个⽤于
动态加载？】：https://stackoverflow.com/questions/8100376/class-forname-vs-classloader-l
oadclass-which-to-use-for-dynamic-loading/8100407#8100407
很有趣的⼀个讨论
4、Java 动态代理
代理是 Java中的⼀种设计模式，主要⽤于提供对⽬标对象另外的访问⽅式。即是通过代理对
象访问⽬标对象。这样⼀来，就可以在⽬标对象实现的基础上，加强额外的功能操作，起到
扩展⽬标对象的功能。
举个例⼦来说，我们想买⼀款国外的产品，但是我们⾃⼰不想出国，那么就可以通过代购的
⽅式来获取该产品。代理模式的关键点在于代理对象和⽬标对象，代理对象是对⽬标对象的
扩展，并且代理对象会调⽤⽬标对象。
来谈动态代理前可以理解以下静态代理。
所谓静态代理，就像其名字⼀样，当确定了代理对象和被代理对象后，⽆法再去代理另⼀个
对象，⽐如在⽣活中，我们找⼀个专⻔负责代购⼝红的代购⼈员让其代购⼝红，但是如果想
要让其代购笔记本电脑，那么其就⽆法实现这⼀要求，因此我们就需要寻找另外⼀个专⻔负
责代购笔记本电脑的⼈员，同理，在 Java 静态代理中，如果我们想要实现另⼀个代理，就需
要重新写⼀个代理对象，如下图所示的就是这个原理：
总的来说，在静态代理中，代理类和被代理的类实现了同样的接⼝，代理类同时持有被代理
类的引⽤，这样，当我们需要调⽤被代理类的⽅法时，可以通过调⽤代理类的⽅法来实现，
下图所示，就是静态代理实现的示意图。
    静态代理的优势很明显，可以让开发⼈员在不修改已有代码的前提下，去完成⼀些增强功
能的需求，但是静态代理的缺点也很明显，静态代理的使⽤会由于代理对象要实现与⽬标对
象⼀致的接⼝，会产⽣过多的代理类，造成冗余；其次，⼤量使⽤静态代理会使项⽬不易维
护，⼀旦接⼝增加⽅法，⽬标对象与代理对象都要进⾏修改。基于这两点，有了动态代理，
动态代理的优势在于可以很⽅便的对代理类的函数进⾏统⼀的处理，⽽不⽤修改每个代理类
中的⽅法。那对于我们信息安全⼈员来说，动态代理意味着什么呢？实际上，Java 中的“动
态”也就意味着使⽤了反射，因此动态代理其实是基于反射机制的⼀种代理模式。
如上图，动态代理和静态代理不同的点在于，动态代理可能有不同的需求（⽤户），通过动
态代理，可以实现多个需求。动态代理其实就是通过实现接⼝的⽅式来实现代理，具体来
说，动态代理是通过 Proxy 类创建代理对象，然后将接⼝⽅法“代理”给 InvocationHandler 接
⼝完成的。
动态代理的关键有两个，即上⽂中提到的 Proxy 类以及 InvocationHandler 接⼝，这是我们实
现动态代理的核⼼。
Proxy 类
在JDK中，Java提供了 java.lang.reflect.InvocationHandler 接⼝和 java.lang.reflec
t.Proxy 类，这两个类相互配合，其中Proxy类是⼊⼝。Proxy类是⽤来创建⼀个代理对象的
类，它提供了很多⽅法，如：
static InvocationHandler getInvocationHandler(Object proxy)
这个⽅法主要⽤于获取指定代理对象所关联的调⽤程序
static Class getProxyClass(ClassLoader loader, Class... interfaces)
该⽅法主要⽤于返回指定接⼝的代理类
static Object newProxyInstance(ClassLoader loader, Class[] interfaces, 
InvocationHandler h)
该⽅法主要返回⼀个指定接⼝的代理类实例，该接⼝可以将⽅法调⽤指派到指定的调⽤处理
程序。 
static boolean isProxyClass(Class cl)
当且仅当指定的类通过 getProxyClass  ⽅法或 newProxyInstance  ⽅法动态⽣成为代理
类时，返回 true。这个⽅法的可靠性对于使⽤它做出安全决策⽽⾔⾮常重要，所以此⽅法的
实现不应仅测试相关的类是否可以扩展 Proxy。
在上述⽅法中，我们最常⽤的是 newProxyInstance ⽅法，这个⽅法的作⽤是创建⼀个代理
类对象，它接收三个参数，loader、interfaces以及h，各个参数含义如下：
loader：这是⼀个classloader对象，定义了由哪个classloader对象对⽣成的代理类进⾏加载。
interfaces：代理类要实现的接⼝列表，表示我们将要给我们的代理对象提供⼀组什么样的接
⼝，如果我们提供了这样⼀个接⼝对象数组，那么也就是声明了代理类实现了这些接⼝，代
理类就可以调⽤接⼝中声明的所有⽅法。
h：指派⽅法调⽤的调⽤处理程序，是⼀个InvocationHandler对象，表示的是当动态代理对象
调⽤⽅法的时候会关联到哪⼀个InvocationHandler对象上，并最终由其调⽤。
InvocationHandler 接⼝
java.lang.reflect InvocationHandler ，主要⽅法为 Object invoke(Object proxy, M
ethod method, Object[] args) ，这个⽅法定义了代理对象调⽤⽅法时希望执⾏的动作，
⽤于集中处理在动态代理类对象上的⽅法调⽤。Invoke 有三个参数，各个参数含义如下：
proxy：在其上调⽤⽅法的代理实例
method：对应于在代理实例上调⽤的接⼝⽅法的 Method 实例。 Method 对象的声明类将是
在其中声明⽅法的接⼝，该接⼝可以是代理类赖以继承⽅法的代理接⼝的超接⼝。
args：包含传⼊代理实例上⽅法调⽤的参数值的对象数组，如果接⼝⽅法不使⽤参数，则为 
null。基本类型的参数被包装在适当基本包装器类（如 java.lang.Integer  或 java.lang.
Boolean ）的实例中。
以下代码就是⼀个简单的动态代理的实例：
package main.java.com.ms08067.dtProxy;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
public class dtProxyDemo {
}
interface Speaker{
    public void speak();
}
class xiaoMing implements Speaker {
    @Override
    public void speak() {
        System.out.println("我有纠纷!");
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
    }
}
class xiaoHua implements Speaker {
    @Override
    public void speak() {
        System.out.println("我有纠纷!");
    }
}
class LawyerProxy implements InvocationHandler {
    Object obj;
    public LawyerProxy(Object obj){
        this.obj = obj;
    }
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        if(method.getName().equals("speak")){
            System.out.println("有什么可以帮助你的");
            method.invoke(obj,args);
            System.out.println("根据 XXXX 法律，应该 XXXX");
        }
        return null;
    }
}
class gov{
    public static void main(String[] args) {
    xiaoMing xiaoMing = new xiaoMing();
    xiaoHua xiaoHua = new xiaoHua();
    LawyerProxy xiaoMing_lawyerProxy = new LawyerProxy(xiaoMing);
    LawyerProxy xiaoHua_lawyerProxy = new LawyerProxy(xiaoHua);
    Speaker xiaoMingSpeaker = (Speaker) Proxy.newProxyInstance(gov.class.getClassLoader(),new Class[]
{Speaker.class},xiaoMing_lawyerProxy);
    xiaoMingSpeaker.speak();
    System.out.println("*********************");
    Speaker xiaoHuaSpeaker = (Speaker) Proxy.newProxyInstance(gov.class.getClassLoader(),new Class[]
{Speaker.class},xiaoHua_lawyerProxy);
    xiaoHuaSpeaker.speak();