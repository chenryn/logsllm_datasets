title:Greedy Receivers in IEEE 802.11 Hotspots
author:Mi Kyung Han and
Brian Overstreet and
Lili Qiu
Greedy Receivers in IEEE 802.11 Hotspots
Mi Kyung Han, Brian Overstreet, Lili Qiu
Department of Computer Sciences, The University of Texas at Austin, Austin, TX 78712
{hanmi2,overstre,lili}@cs.utexas.edu
Abstract
As wireless hotspot business becomes a tremendous
ﬁnancial success, users of these networks have increas-
ing motives to misbehave in order to obtain more band-
width at the expense of other users. Such misbehaviors
threaten the performance and availability of hotspot
networks, and have recently attracted increasing re-
search attention. However the existing work so far fo-
cuses on sender-side misbehavior. Motivated by the ob-
servation that many hotspot users receive more traﬃc
than they send, we study greedy receivers in this paper.
We identify a range of greedy receiver misbehaviors,
and quantify their damage using both simulation and
testbed experiments. Our results show that even though
greedy receivers do not directly control data transmis-
sion, they can still result in very serious damage, in-
cluding completely shutting oﬀ the competing traﬃc.
To address the issues, we further develop techniques
to detect and mitigate greedy receiver misbehavior, and
demonstrate their eﬀectiveness.
Keywords: Greedy receiver, wireless LAN.
1 Introduction
The proliferation of lightweight hand-held devices
with built-in high-speed WiFi network cards has
spurred widespread deployment of wireless “hot-spot”
networks at many public places, such as hotels, air-
ports, restaurants, and malls. As reported in [5, 6],
worldwide wireless data hotspot revenue will rise from
$969 million in 2005 to $3.46 billion in 2009, and the
number of hotspot locations will nearly double in size
from 100,000 in 2005 to almost 200,000 by the end of
2009. As hotspot business becomes a tremendous ﬁ-
nancial success, users of these networks have increasing
incentives to misbehave in order to gain more band-
width even at the expense of others.
The serious damage caused by MAC-layer misbe-
havior has recently received substantial research atten-
tion. Some of the pioneering work in this area includes
[1, 9, 11]. These works identify several types of MAC-
layer misbehaviors, and propose countermeasures to
detect and prevent such misuse.
The existing work so far focuses on sender-side mis-
behavior.
In wireless LAN (WLAN) networks, the
amount of traﬃc coming from access points (APs)
to clients is typically higher than that from clients
to APs [7, 13]. APs are under the control of service
providers and send more data, whereas (possibly mis-
behaving) users often act as receivers. Therefore mis-
behaving receivers can be serious threats to the per-
formance and availability of WLANs. However, there
is little work on receiver-side MAC misbehaviors. This
motivates our work.
In this paper, we ﬁrst identify a range of greedy
receiver misbehaviors. Such receiver misbehaviors are
possible because IEEE 802.11 is a feedback-based pro-
tocol; while receivers do not directly control data trans-
missions, they can cause damage by manipulating the
feedback. We quantify the performance impact of mis-
behaving receivers using both simulation and testbed
experiments. Our results show that misbehaving re-
ceivers can cause serious damage to the network.
In
some cases, a greedy receiver can completely shut oﬀ
the other competing ﬂows. To mitigate the threats
and enhance network availability, we further develop
techniques to detect and mitigate greedy receiver mis-
behavior, and demonstrate their eﬀectiveness.
The rest of the paper is organized as follows. We
overview the background of IEEE 802.11 in Section 2,
and survey related work in Section 3. We present a
range of greedy receiver misbehaviors in Section 4. We
quantify their damage using simulation and testbed ex-
periments in Section 5 and Section 6, respectively. We
describe techniques to detect and mitigate greedy re-
ceiver misbehavior in Section 7, and evaluate its eﬀec-
tiveness in Section 8. We conclude in Section 9.
2 Background of IEEE 802.11
In IEEE 802.11 DCF [3], before transmission, a sta-
tion ﬁrst checks to see if the medium is available by us-
ing virtual carrier-sensing and physical carrier-sensing.
The medium is considered busy if either carrier-sensing
indicates so. Virtual carrier-sensing is performed us-
ing the Network Allocation Vector (NAV). Most 802.11
frames have a NAV ﬁeld, which indicates how long
the medium is reserved in order to ﬁnish transmitting
all the frames for the current operation. Virtual car-
rier sensing considers medium is idle if NAV is zero,
otherwise it considers the medium busy. Only when
NAV is zero, physical carrier-sensing is performed us-
ing carrier-sensing hardware. If physical carrier-sensing
also determines the medium idle, a station may begin
transmission using the following rule. If the medium
has been idle for longer than a distributed inter-frame
spacing time (DIFS), transmission can begin immedi-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:48:46 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007ately. Otherwise, a station having data to send ﬁrst
waits for DIFS and then waits for a random backoﬀ in-
terval, which is uniformly chosen between [0, CWmin],
where CWmin is the minimum contention window. If at
anytime during the above period the medium is sensed
busy, the station freezes its counter and the count-
down resumes when the medium becomes idle. When
the counter decrements to zero, the node transmits the
packet. If the receiver successfully receives the packet,
it waits for a short inter-frame spacing time (SIFS) and
then transmits an ACK frame. If the sender does not
receive an ACK (e.g., due to a collision or poor channel
condition), it doubles its contention window to reduce
its access rate. When the contention window reaches
its maximum value, denoted as CWmax, it stays at that
value until a transmission succeeds, in which case the
contention window is reset to CWmin.
3 Related Work
The serious damage caused by misbehaving MAC
has received increasing attention in wireless research
community. For example, Bellardo and Savage [1] stud-
ied denial of service attacks in 802.11. Kyasanur and
Vaidya [9] identiﬁed that selﬁsh senders can get signif-
icantly more bandwidth than regular senders by modi-
fying the backoﬀ value in IEEE 802.11. Raya et al. [11]
developed DOMINO, a software installed on access
points to detect and identify greedy stations. More re-
cently, Cagalj et al. [2] used a game-theoretic approach
to study selﬁsh nodes in CSMA/CA networks. Unlike
the existing work, which focuses on sender-side misbe-
havior, we identify a range of receiver-side misbehav-
iors and evaluate their impact on network performance.
In addition to MAC misbehaviors, researchers also
studied misbehavior at other protocol layers, such as
jamming attacks [14], routing attacks [4], and selﬁsh
TCP behavior and attacks [8, 12].
In particular, our
work is inspired by [12], which studies TCP receiver
misbehaviors and shows that in a feedback-based pro-
tocol receivers can signiﬁcantly aﬀect network perfor-
mance even though they do not directly send data. Un-
like [12], we study receiver misbehavior at MAC-layer.
4 Greedy Receiver
In this section, we present three types of greedy re-
ceiver misbehaviors. For each misbehavior, we ﬁrst in-
troduce the misbehavior and then describe its applica-
ble scenarios, greedy actions, and eﬀects. Throughout
the paper, we let GR denote a greedy receiver, N R
denote a normal receiver, GS denote GR’s sender, and
N S denote N R’s sender. We assume that APs are the
senders and behave normally, since they are under the
control of service providers.
4.1 Misbehavior 1: Increasing NAV
IEEE 802.11 uses NAV to perform virtual carrier
sensing. Greedy receivers can increase their goodput
(i.e., received rate) by increasing NAV. Our work com-
plements the previous studies on NAV inﬂation [1, 11]
in the following aspects. First, we focus on greedy
receiver misbehavior, whereas [11] focuses on greedy
senders and [1] focuses on denial-of-service (DOS) at-
tacks, where misbehaving nodes simply cause damage
without necessarily gaining more throughput. We will
show that only a small NAV increase is required for
GR to starve other ﬂows due to additional data traﬃc,
whereas a large NAV inﬂation is required to launch the
type of DOS considered in [1]. Second, we present a
simple analysis to model the eﬀect of NAV inﬂation in
Section 5. Third, we will use extensive evaluation to
study the eﬀect of NAV inﬂation in various scenarios.
Applicable Scenarios The misbehavior is eﬀective
whenever there is traﬃc competing with a greedy re-
ceiver. Inﬂated CTS NAV causes damage only when
RTS/CTS is enabled, whereas inﬂated ACK NAV
causes damage regardless whether RTS/CTS is used.
When TCP is used, the greedy receiver also sends TCP
ACK packets, which are data frames to the MAC layer.
As a result, the greedy receiver can also inﬂate NAV
on the RTS and data frames, which are used to send
the TCP ACK packet.
Greedy Actions A greedy receiver may inﬂate NAV
in its CTS and/or ACK frames under UDP, and inﬂate
NAV in CTS, ACK, RTS, and/or data frames under
TCP. It can increase the NAV up to 32767µs, which is
the maximum allowable value in IEEE 802.11.
Eﬀects Sending frames with inﬂated NAV allows a
greedy receiver to silence all nearby nodes longer than
necessary. According to IEEE 802.11 [3],upon receiving
a valid frame, each station should update its NAV, only
when the new NAV value is greater than the current
NAV value and only when the frame is not addressed
to the receiving station. Thus the increased NAV value
will not aﬀect GS, which sends data to GR, but silence
the other nearby senders and receivers.
If the amount of NAV increase is large enough, GS
can exclusively grab the channel even in presence of
other nearby competing senders since it always senses
the medium idle before its transmission.
4.2 Misbehavior 2: Spooﬁng ACKs
Upon a packet loss, a TCP sender reduces its send-
ing rate by decreasing its congestion window (i.e., the
maximum amount of unacknowledged data allowed by
the TCP sender). MAC-layer retransmissions help to
reduce packet losses observed at the TCP layer. Based
on the observation, a greedy receiver can send MAC-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:48:46 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007layer ACKs on behalf of other TCP ﬂows. In this way,
packet losses are not recovered at MAC-layer as they
should, but are propagated to the TCP layer, which
can cause TCP senders to slow down.
Applicable Scenarios The misbehavior is eﬀective
under the following two conditions. First, the traﬃc
competing with greedy receiver is TCP and its link is
lossy. Second, a greedy receiver uses promiscuous mode
so that it can spoof MAC-layer ACKs in response to
data frames not destined to itself.
Greedy Actions A greedy receiver (GR) sniﬀs a
data frame destined to a normal receiver (N R) coming
from a sender (N S), and sends a MAC-layer ACK on
behalf of N R. Because the link from N S to N R is
lossy, N R may not successfully receive the data. How-
ever GR spoofs a MAC-layer ACK on behalf of N R so
that N S moves on to the next transmission, instead of
performing MAC-layer retransmissions as it should.
Eﬀects A spoofed ACK has two eﬀects. First, when
the original receiver (N R) does not receive the data
frame, the spoofed ACK from GR eﬀectively disables
MAC-layer retransmission at N S. This propagates
packet losses to N S’s TCP, which will decrease its con-
gestion window and may even cause TCP timeouts,
thereby increasing the traﬃc rate towards the greedy
receiver. When the normal traﬃc spans both wireless
and wireline network, the damage of this misbehav-
ior is further increased; The additional wireline delay
makes end-to-end TCP loss recovery even more expen-
sive than local MAC-layer retransmissions on the wire-
less link. We also observe this eﬀect in our evaluation,
as described in Section 5.
Second, when N R receives the data frame, spoofed
ACK will collide with the ACK from the original re-
ceiver N R. Such collisions cause unnecessary retrans-
missions from N S and slow down N R’s ﬂow. This is
essentially a jamming attack, which has been studied
before [14]. Therefore Section 5, we focus on the ﬁrst
eﬀect – disabling MAC-layer retransmissions.
To study the ﬁrst eﬀect, we consider capture ef-
fects: When the two packets are received simultane-
ously, if their received signal strength ratio is above
capture threshold, only the packet with stronger sig-
nal is received and the other is lost. In our context,
we consider either RSSN R/RSSGR ≥ T hreshcap or
RSSGR/RSSN R ≥ T hreshcap, where T hreshcap is
capture threshold, and RSSN R and RSSGR are re-
ceived signal strength from N R and GR, respectively.
In the former case, ACK from N R is demodulated and
received, and ACK from GR is lost, and in the latter
case, the ACK from GR is received and the ACK from
N R is lost. (The performance degradation caused by
greedy receiver would be even larger under both jam-
802.11b
802.11a
# received
65536
23068
# corrupted
1367
7376
# corrupted
w/ correct dest
1351
6197
# corrupted w/
correct src-dest
1282
5663
Table 1. Testbed measurement shows that
most corrupted packets preserve source and
destination MAC addresses.
ming and disabled MAC retransmissions.)
4.3 Misbehavior 3: Sending fake ACKs
In 802.11, a sender performs an exponential backoﬀ
upon seeing a packet loss. This slows down the sender
when network is congested and packets get corrupted.
A greedy receiver can prevent its sender from backing
oﬀ by sending ACKs even when receiving corrupted
packets (destined to itself).
In this way, the greedy
receiver receives a higher goodput (i.e., the receiving
rate of uncorrupted packets).
Applicable Scenarios This misbehavior is eﬀective
under the following two conditions. First, the traﬃc
to GR is carried by non-TCP connections (to avoid
interacting with TCP congestion control). Second, the
link from GS to GR is lossy.
Greedy Actions When receiving a corrupted frame,
GR sends a MAC-layer ACK back to the source even
though the data is actually corrupted.
The eﬀectiveness of this attack depends on how of-
ten a corrupted packet preserves correct source and
destination addresses. Since MAC addresses are much
smaller than the payload, most of corrupted pack-
ets preserve MAC addresses. To further validate this
claim, we conduct measurement experiments in our
testbed by placing sender and receiver far enough
to generate signiﬁcant packet corruption. Table 1
shows a breakdown of the number of corrupted pack-
ets, corrupted packets with correct destination MAC
addresses, and corrupted packets with correct source
and destination MAC addresses. As it shows, 98.8%
and 84% corrupted packets are delivered to the cor-
rect destination in 802.11b and 802.11a, respectively.
Among them, 94.9% and 91.4% packets have correct
source addresses in 802.11b and 802.11a, respectively.
These numbers indicate that sending fake ACKs is a
practical attack since most of corrupted packets pre-
serve MAC addresses.
Eﬀects GR sending ACK in the presence of cor-
rupted data eﬀectively prevents GS from doing expo-
nential backoﬀ, which increases GR’s goodput. An in-
teresting aspect of this misbehavior is that it is a com-
mon belief that the link layer retransmission is consid-
ered to improve performance over end-to-end recovery;
however its performance beneﬁt can be oﬀset by expo-
nential backoﬀ when competing with other ﬂows.
Similar to misbehavior 2, misbehavior 3 also mod-
iﬁes how MAC-layer ACK is transmitted under cor-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:48:46 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007rupted/lost packets. However they diﬀer in that mis-
behavior 2 targets TCP traﬃc by exploiting its rate
reduction upon packet losses whereas misbehavior 3
targets non-TCP traﬃc by avoiding MAC-layer expo-
nential backoﬀ under packet losses.
5 Evaluation of Greedy Receivers in
Simulation
In this
section, we use Network Simulator 2
(NS2) [10] to quantify the damage caused by greedy
receivers. We use 802.11b for all simulation evaluation,
since 802.11b is commonly used in hotspot networks.
All the senders behave normally, which correspond to
APs that are under the control of hotspot providers
and do not misbehave. We consider N S sends to N R,
and GS sends to GR, where GR denotes a greedy re-
ceiver, and N S, GS and N R all behave normally. Our
evaluation uses both TCP and UDP, both of which use
data packet size of 1024 bytes. When UDP is used, we
generate constant bit rate (CBR) traﬃc high enough to
saturate the medium. Moreover, the rates of all CBR
ﬂows are the same so that the diﬀerence in goodput
is due to MAC-layer eﬀect. We run each scenario 5
times and report the median of the goodput, which is
the received data rate of uncorrupted packets. As we
will show, even though greedy receivers do not directly
control data transmission, they can still eﬀectively in-
crease their goodput at the expense of degrading or
even shutting oﬀ other competing ﬂows.
5.1 Misbehavior 1: Increasing NAV
We randomly place nodes so that all of them can
hear each other. We evaluate the impact of NAV in-
ﬂation by varying (i) the type of transport protocols,
(ii) the amount of NAV inﬂation, (iii) the frequency of
NAV inﬂation, (iv) the number of greedy receivers, and
(v) the number of greedy senders. When the greedy
receiver uses UDP, it can inﬂate CTS and/or ACK
frames. When the greedy receiver uses TCP, not only
can it inﬂate NAV in CTS and/or ACK, but also in-
ﬂate NAV in RTS and data frames corresponding to
the TCP ACK.
Vary the amount of NAV inﬂation: We vary the
value of NAV used by greedy receivers by changing α
in n + α· 100, where n is the original NAV value before
inﬂation, and α varies from 0 to 310 for CTS NAV,
and from 0 to 327 for ACK NAV. α = 310 in CTS
and α = 327 in ACK give close to the maximum NAV,
which is 32767µs.
UDP traﬃc: First, we evaluate the impact of
greedy receivers using constant-bit-rate (CBR) traﬃc
transferred via UDP. Fig. 1 shows the goodput of a
normal receiver and a greedy receiver, competing with
each other and both using UDP. The greedy receiver
)
s
p
b
M
(
s
r
e
v
e
c
e
R
i
f
o
t
u
p
d
o
o
G
 4.5
 4
 3.5
 3
 2.5
 2
 1.5
 1
 0.5
 0
  NR
  GR
5
10
15
20
25
30
Amount of CTS NAV increased at GR (msec) 
Figure 1. Goodput of two UDP ﬂows N S-N R
and GS-GR, where GR inﬂates CTS NAV.
can completely grab the medium and starve the com-
peting ﬂow even when NAV is inﬂated by only 0.6 ms.
Below we analyze the eﬀect of NAV inﬂation under
UDP traﬃc. Suppose N S and GS both have an inﬁnite
amount of data to send. GR inﬂates NAV in either its
CTS and/or ACK by v timeslots. The probability of
GS transmitting in a given round is the probability
that only GS sends or both GS and N S send. The
probability that only GS sends is P r[BGS < BN S +
v − 1], and the probability that both GS and N S send
is P r[BN S + v − 1 ≤ BGS ≤ BN S + v + 1]. So the
probability of GS transmitting is P r[BGS ≤ BN S +v +
1]. v is added to BN S because GS starts count-down
v timeslots earlier than N S due to NAV inﬂation; and
the probability that both of them send takes the above
form because it takes a station 1 time slot to measure
signal strength and two nodes can both send if the time
of their counting down to zero diﬀers within 1 time-
slot. Similarly, the probability of N S transmitting in
a round is P rob[BN S ≤ BGS − v + 1]. The backoﬀ
interval is uniformly distributed over [0..CW ], where
CW is initialized to CWmin and doubles every time
after a failed transmission until it reaches CWmax. We
ﬁnd that as NAV increases N S’s average CW increases
due to increasing collisions, whereas GS’s average CW
stays close to CWmin because the fraction of collided
packets does not change much due to an increasing
number of packets sent by GS. Based on the above
observation, we have the following relationship:
P r[GS sends]
= P r[BGS ≤ BN S + v + 1]
(P r[BGS = i]×
=
X
i=0..CW
CWmaxX
P r[CWN S = m]P r[BN S ≥ i − v − 1|CWN S = m])
m=CWmin
P r[N S sends]
= P r[BN S ≤ BGS − v + 1]
(P r[BGS = i]×
=
X
i=0..CW
CWmaxX
P r[CWN S = m]P r[BN S ≤ i − v + 1|CWN S = m])
(1)
(2)
m=CWmin
We evaluate the accuracy of our model by plugging
the distributions of CW into Equation 1 and 2. Fig. 2
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:48:46 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007o
i
t
a
r
i