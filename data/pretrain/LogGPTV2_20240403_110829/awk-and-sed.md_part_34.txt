- 255 -
可以用 getline 读取这行并将它赋给
第十章
它可以使用 getline 来
它们可能被包围在引
“底部抽屉”
---
## Page 238
将输入赋给一个变量不会影响当前的输入行，也就是说，对$O 没有影响。新的
供。下面的语句从输入中读取下一行并赋给变量input：
Getline 函数允许你将输入记录赋给一个变量，
注1:
响应被赋给$O，并用 print 语句输出这个值。
这一示例打印提示“Enter your name:”（使用 printf 是因为我们不想在提示
getline:
较。）输入也可以来自标准输入。你可以在提示用户输入信息后使用
尽管文件名可以通过一个变量来提供，
getline 函数除了能读取正常的输入流外，
将输入赋给一个变量
到文件结束时循环退出。
从文件中读取
尾时，getline 返回0并退出循环。
后
（这里加上括弧以防止混乱；
串
面产生一个回车符）、然后调用 getline 获取用户的响应（注1）。用户的
解释为“小于”符号。我们可以用while循环从文件中读取所有的行，测试
 getline input
while（(getline〈"data")>0）
getline ”是对返回值的一个比
第十章
“底部抽屉”
，这字符
---
## Page 239
那个文件的第五个字段，
令的输出结果得到用户的名字，
下面的脚本将一个命令的输出结果用管道输送给 getline。
通过将输出结果赋给一个变量可以避免设置$O和NF，
这个行被分解为字段并设置了系统变量NF。
这个表达式将 who ami命令的输出结果赋给$0。
达式：
可以执行一个命令并将输出结果用管道输送到 getline。例如，
从管道读取输入
这里将 getline 的返回值赋给变量 name。
注意将输入数据赋给变量的语法，
赋给变量
上例演示了如何提示用户。这个例子也可以按下面的方式编写，将用户的响应
NF 和 FNR。
输入行没有被分解成字段，因些对变量NF 也无影响。但它递增了记录计数器
段
dale ttyC3 Jul 18 13:37
"who am i" | getline
name = getline # 错误 
BEGIN I printf "Enter your name:
name
BEGIN
awk’
～ $1 {print $5”
 name.
name 
QQ群：
print name 
I
 $1
50192241
即用户的命名：
|getline
从/etc/passwd文件中打印用户命名
然后在/etc/passwd 中查找这个名字，打印出
因为通常错误地写成：
- 257.
同样地，
但输入行没有被分解为字
你也可以将结果赋给一个
第十章 
它使用 who ami命
“底部抽屉”
参见下面的表
---
## Page 240
以上脚本用于在格式信件插入日期：
，sp
date 命令使用它的格式化选项（注2）来提供日期，而 getline 将它赋给变量
下一个例子是一个文档中查找“@data”并用当天的日期替换它：
每次调用 getline 函数时，
的每一行并将它赋给数组 who_out 的下一个元素：
getl ine,
getl ine, 
次读取一行。
当一个命令的输出结果被用管道输送给 getline 且包含多个行时，getline 
Dougherty. ”
录的第五个字段打印出来。例如，当Dale运行这个程序时，它打印“Dale
出字段的分解。
的单独的字段。注意，FS 在执行 getline 这后设置，否则将影响到对信念的输
字段分隔符被规定为冒号“：”，
getline 将赋给$0。输出的第一个字段$1 接着被赋给 name。
命令在 BEGIN 过程中执行，
最
后，
# subdate.awk－用当天的日期替换 @date 
while ("who" | getline)
I am writing you on @date to
Date: @date
From: Sherman
To: Peabody
/@date/ {
 print 
主过程被设计为用来测试第一个字段是否和 name 匹配。如果匹配，将记
/etc/passwd
直到不再有输出为止。例如，
它将读取第二行。要读取输出的所有行，就必须创建一个循环来执行
 gsub(/@date/, today)
O$ = [!++]noloum 
第一次调用 getline，
QQ群：
50192241
，读取输出的下一行。然而，其中的who命令只执行
，并为我们提供用户的名字，
，这允许我们访问/etc/passwd 文件中的条目
- 258 -
它将读取输出的第一行。
下面的例子使用while 循环来读取输出
第十章 
该名字用于在
如果再次调用
“底部抽屉”
---
## Page 241
注2：
close（)函数用于关闭打开的文件和管道。使用它有以下几个原因：
close（函数
按
除了包含“@date”的行，
?
原样通过：
为了保证同时打开的文件数不超过系统的限制，
每次你只能打开一定数量的管道（参见后面的“约束”一节，
为了得到一个输出管道来完成它的工作，使用close（)可能是必要的。例
来定是一个命令。
关闭一个管道使得你可以运行同一个命令两次。例如，你可以用两次 date
式相同。
getline i
统与系统之间的约束的区别）
$ awk -f subdate.awk subdate.test
 remind you about our special offer.
I am writing you on Sun., May 05, 1996 to
Date: Sun., May 05, 1996
From:
To:Peabody 
date 版本，在那里必须使用/usr/5bin/date。参见本地文档。
date 的较老版本不支持格式化选项。尤其是 Sun0S 4.1x 系统上的
{ some processing of $o | "sort > tmpfile" }
close ("who")
END {
 Sherman
下面是一个例子：
返回〇或-1时）。它用一个语句来实现，和用于创建管道的表达
while （(getline0)
close("sort > tmpfile")
QQ群：
你必须用close（)函数来关闭一个你用过的管道（通常是，
50192241
 do more work
“@date”被用当天的日期替换外，其余的所有行都
- 259 -
，为了在一个程序中能够打开你所希望的数
第十章
关闭打开的文件是必要
“底部抽屉”
它描述了系
乐
---
## Page 242
所示，它被简单地打印到标准输出。
cat命令并输出文件的内容。这些输出和文件中剩余的行合并，如下面的例子
这个脚本查找在行的开始处的.s0，
注3：
Berkeley UNIX命令集中为 troff 用户提供了一个很小但很有用的命令 soelim,
Failed”信息是awk产生的。
行这命令，
这个程序两次，结果是一次成功和一次失败：
这里在一个if语句中调用 system(函数，来测试一个非零的退出状态。运行
完成任务后才继续执行。
生可供程序处理的输出。
System()函数执行一个以表达式给出的命令（注3）。然而，它的命令没有产
“.so”行（. so 是一个请求，
System(函数
有
第
一个老的 SystemV系统，
第一次运行产生新的目录，
$ cat soelim.test
$ awk -f system.awk
BEGIN { if (system("mkdir dale") != 0)
This is a test
.so test1 
This is a test
Command Failed 
mkdir: dale: File exists
S
S
Is dale 
awk -f system. awk
system()函数模仿标准的C库函数中的同名函数。
目录已经存在，
QQ群：
system("cat " $2)
next
print "Command Failed" }
50192241
：下面的例子执行了 mkdir 命令：
它返回被执行的命令的退出状态。脚本等待这个命令
，因此 mkdir 失败并产生一个出错信息。
并且 system（)返回退出状态0（成功）。第二次执
它没有 soelim，
包含或“指定”命名文件的内容的来源)。如果你
去掉所有的引号，
260
，你可以用下面的 awk脚本来创建
，然后用 system()来执行
第十章
“底部抽屉”
“ Command 
---
## Page 243
行test 命令以验证文件存在并且可读：
下面的例子是一个函数，
理嵌入的“.so”请求。
我们希望测试 system(（)函数的返回值并为用户生成出错信息。这个程序也很简
我们没有显式地测试命令的退出状态。因些，如果指定的文件不存在，出错信
单
：它没有处理包含在文件中的“.so”。考虑该如何修改这个程序的版本以处
#验证文件名存在，并返回绝对路径名
# getFilename 函数－－提示用户输入文件名
if (file ! /^\V//）{
function getFilename( file)
This is a test 
$ awk -f soelim.awk soelim.test
This is a test.
This is a test 
first:second
This is a test.
five:six 
cat: cannot open test2
one:two
three: four 
This is a test
one:two
first:second
This is a test 
$ awk -f soelim.awk soelim.test
This is a test.
so test2
QQ群：
#检查文件存在并可读
file = $0 
 printf "Enter a filename:
if (system("test -r " file)） {
#如果文件不存在，
getline < 
50192241
用来提示输入一个文件名。它使用 system()函数来执
"_"
#获取用户的响应
- 261 -
测试返回1
第十章
“底部抽屉”
---
## Page 244
中使用 getline 从这个文件中一次读取一行。
子
执行的实际命令行。
这个程序被设计为一种解释程序，
提示给用户，
简单的方法，
在这一部分，我们着眼于 system(）函数和 getline 函数的一个常见的应用，
基于菜单的命令生成器
一个是获得用户的响应，第二个是执行 pwd 命令。
进行了处理，尽管测试匹配它们很容易。）注意 getline 函数的两个用法：第
径名。如果测试失败，
名是正确的，就测试文件名是否以“/”开始，斜杠表明用户提供了一个绝对路
如果文件存在且可读，test－r命令将返回0，否则返回1。一旦确定了文件
中
的
菜
来
然
在while循环中，以便于用户在前一个文件非法时可以重新输入。
以上函数返回了由用户指定的文件的绝对路径名。它把提示信息和验证序列放
第一行并将它赋给变量title。余下的行包括两个字段并被读到两个数组
建基于菜单的命令生成器的第一步是读取菜单命令文件。我们首先读怪文件
单命令文件的格式是在文件中将菜单标题作为第一行。后面的行包括两个字
建立基于菜单的命令生成器。这个程序的目标是为非熟练技术用户提供一个
后将它与文件名拼接起来。
，一个用于生成莱单项，另一个用于提供要执行的命令。在一个while 循环
：第一个是要执行的动作的描述，第二个是要执行的命令行。下面是一个例
BEGIN { FS = ":"
Look for lock files:ls /var/spool/uucp/*. LCK 
Look at files in PUBDIR:find /var/spool/uucppublic -print 
UUCP Status Menu 
$ cat uucp_commands
ook
return file
file = $o "/" file
close("pwd")
"pwd"|getline #得到当前目录
，允许用户使用数字在菜单中选择要执行的任务。
来执行长的或复杂的 UNIX命令。菜单用于将要执行的任务的描述
QQ群：
，这种方式可以使用多重菜单命令文件，且它们可以在不改
，我们将使用 getline 函数去获得 pwd 命令的输出结果,
50192241
（不可否认，
，它从文件中读取要出现在菜单中的描述和要
- 262-
，该脚本没有对“.／”和“
第十章 
“底部抽屉”
用
---
## Page 245
一旦菜单命令文件被装载后，程序必须显示菜单并提示用户。这是通过函数来
递。创建一个 shell程序来执行 awk，并在该脚本中定义 CMDFILE。然后修改
如果你的 awk 版本没有-v 选项，你可以将 CMDFILE 的值作为 shelI 变量来传 
设置并在BEGIN模式中可用。
幸运的是，awk 提供了-v选项来处理这种情况。使用-v 选项可以使变量被立即
因为直到第一个输入行被读取后变量CMDFILE才有定义。
并且在BEGIN模式中不可用。换句话说，下面的命令是不起作用的：
这个过程被放在 BEGIN模式中。但这儿有一个问题，因为我们要将菜单文件的
达式中使用括弧的目的是为了使表达式更清楚。换句话说，首先计算
入重定向操作符，
仔细观察使用if语句和while 循环测试的表达式的语法。
invoke 脚本（如下所示）中读取 CMDFILE的行：
名