We note here that this phase can be performed ahead of time
and with user level permissions, without the need to interact
with the victim application or its secrets.
Removing Useless Bits. Next, we note that not all of these
bitÔ¨Çips are useful for key extraction. First, given OpenSSH
memory layout and the location of the key elements in their
respective pages, only a 6144
16 fraction of the bits
(corresponding to offsets of d, p, q, dp and dq) are useful for
key recovery. Out of the 84K bit Ô¨Çips recovered in the previous
phase, this leaves approximately 15750 bits Ô¨Çips which have
the potential to reveal bits of the secret key. Next, we note
that these bit Ô¨Çips also contain repetitions in their locations in
the page, meaning that two or more bit Ô¨Çips might actually
correspond to the same bit of the secret key. After removing
such duplicates, we are left with 4.2K bit Ô¨Çips in distinct
locations that are useful for key extraction.
Reading Private Key Material.
After placing the key
containing pages in the desired locations to achieve one of the
RAMBleed conÔ¨Ågurations, we then proceed to hammer A0 and
A2 (See Figure 3). We have no way of determining if we are in
the double-sided, single-sided, or unable-to-place RAMBleed
situation, but given the probabilities in Section VII-C, it is
likely that the bit Ô¨Çip in A1 will depend upon the secret bit
values. Overall, this process resulted in recovering 68% of the
2We empirically found that 84K bit Ô¨Çips was approximately the threshold
for locating 4200 usable, unique, Ô¨Çippable bits.
private key, or 4200 key bits, at a rate of 0.31 bits/second at
an accuracy rate of 82% against OpenSSH. We conjecture that
the deceased accuracy is due to the combined noise from both
the inaccuracy of RAMBleed and Frame Feng Shui.
Key Recovery. As mentioned above, we recover 68% of the
key bits with 82% accuracy. Using our amended Heninger-
Shacham algorithm, we recover the entire RSA private key in
about 3 minutes on a consumer laptop (Dell XPS 15 featuring
an Intel i7-6700 3.4 GHz CPU and 32 GiB of RAM).
VIII. RAMBLEED ON ECC MEMORY
In this section we show how to use RAMBleed to read
secret information stored on DIMMs that use ECC memory.
Unlike Section IV, which shows how RAMBleed can exploit
visible bit Ô¨Çips to read secret information, here we show how
an attacker can exploit bit Ô¨Çips that were successfully corrected
by ECC to read information from the victim‚Äôs address space.
We begin by providing background on ECC memory.
A. ECC Memory Background
Memory manufacturers originally designed ECC memory
for correcting rare, spontaneous bit Ô¨Çips, such as those caused
by cosmic rays. As such, ECC memory uses error correcting
codes that can only correct a small number of bits in a single
code word, typically only one or two. This is commonly known
as SECDED (Single error correction double error detection).
Correction Mechanism. When an ECC enabled system
writes data to DRAM, the memory controller writes both the
data bits and an additional string of bits, called the check bits.
These bits offer the redundancy that enables detection and
correction of errors. Together, the data and check bits make up
a codeword, where the typical sizes for data and check bits are
64 and 8 bits, respectively. Upon serving of a read request from
DRAM, the memory controller reads both the data and check
bits, and checks for errors. If an uncorrectable error is detected,
the controller typically crashes the machine, rather than letting
the software operate on corrupted data. Alternately, if the error
can be corrected, the memory controller Ô¨Årst corrects the error,
and only then passes the corrected value to the software. We
note that ECC correction and detection occurs only during
read requests, and that a bit Ô¨Çip will go undetected until a
codeword is read from the DIMM.
Detecting Bit Flips. As Cojocar et al. [13] describe, this
synchronous error correction results in a timing side channel
that allows an attacker to determine if a single-bit error has
occurred. They found that the overhead incurred by correctable
bit Ô¨Çips is on the order of hundreds of thousands of cycles,
which the attacker can easily measure.
Concretely, we can detect the presence of a bit Ô¨Çip in
any given word by measuring the read latency from the
word. When we read from a word with a single-bit error, the
hardware must Ô¨Årst complete the ECC algorithm, and often log
the error in the Ô¨Årmware log, before the value from the read is
returned. If we observe a much longer read latency, it indicates
that a bit Ô¨Çip occurred sometime after the last time that the
same 64 bit word was read from. This effect is illustrated in
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
706
	



Fig. 6: Read latencies for the 64-bit words in a single
page. When ECC corrects an error, the latency is 5 orders
of magnitude greater than the common case. This can be seen
by the peak for the 186th word, which indicates a bit Ô¨Çip.
Figure 6; after performing double-sided hammering on the two
aggressor rows, we read from the victim row and observe a
crisp peak for the 186th word, clearly indicating a bit Ô¨Çip.
B. RAMBleed on ECC Memory
We now show how we can leverage the ability to detect the
presence of corrected bit Ô¨Çips to read information from the
victim‚Äôs address space. To the best of our knowledge, this is
the Ô¨Årst demonstration of security implications of corrected bit
Ô¨Çips.
Experimental Setup.
Following the Intel-1 setup of
Cojocar et al. [13], we demonstrate the RAMBleed attack on
ECC memory on a Supermicro X10SLL-F motherboard (BIOS
version 3.0a) equipped with an Intel Xeon E3-1270 v3 CPU
and a using a pair of Kingston 8GB 1333 MHz ECC DIMMs,
model number KVR1333D3E9SK2.
Templating. As with the non-ECC attack, we begin by Ô¨Årst
templating memory to locate bit Ô¨Çips. We do so in much the
same manner of [13], only with an algorithmic improvement
for determining which bit in a row is the Ô¨Çippable bit.
Cojocar et al. [13] locate bit Ô¨Çips by performing double
sided Rowhammer, and then using the timing side channel to
locate a word containing a bit Ô¨Çip. They determine which of
the 64 bits Ô¨Çipped by setting exactly one of the bits to its
charged state, while all the rest are discharged. This results in
the targeted bit being in the middle of a striped conÔ¨Åguration,
while all the other bits in the word are part of a uniform
conÔ¨Åguration. Next, a long read latency indicates that the
single charged bit Ô¨Çipped. Finally, they repeat the process for
each bit to determine which bits can be Ô¨Çipped.
To speed up the process of templating memory for bit
Ô¨Çips, we replace the single-bit iteration phase with a binary
search over the possible locations for the bit Ô¨Çip. That is,
after locating a word with a bit Ô¨Çip, we set half of the bits
to their charged state, with the other half discharged. We
then hammer the aggressor rows again, and record the read
latency. If it is long, then the bit Ô¨Çip lies in the half with the
charged bits; otherwise, it lies in the other half. We repeatedly
reduce the search space by half in this manner, until we have
pinpointed the location of the bit Ô¨Çip. Overall this speeds up
the templating phase of Cojocar et al. [13] by a factor of 10.
Reading Bits. After proÔ¨Åling memory and recording the pre-
cise locations of Ô¨Çippable bits, we use the memory massaging
and Frame Feng Shui techniques described in Section V to
achieve the double-sided RAMBleed conÔ¨Åguration. In the non-
ECC RAMBleed case, we hammered the aggressor rows and
subsequently directly read the victim row for a Rowhammer-
induced bit Ô¨Çip, thereby leaking values of secret bits. With
ECC, we cannot observe the Ô¨Çips directly. Instead we use the
timing side channel and look for long read latencies. As such
latencies occur only due to Rowhammer-induced Ô¨Çips, they
can be used to reveal the value of the secret bit as described
in Section IV.
Experimental Results. We can successfully read bits via
RAMBleed against ECC memory with a 73% accuracy at
a reading rate of 0.64 bits/second in our setup. Since ECC
DIMMs are typically built using the same chips as used on
non-ECC DIMMs, but with an additional chip for storing the
check bits, we attribute the drop in accuracy to the fact that
they are simply different sets of DIMMS.
IX. MITIGATIONS
Unlike previous Rowhammer attacks which compromise
integrity, RAMBleed is an attack which compromises con-
Ô¨Ådentiality. Moreover, to leak information cross process and
cross address space, RAMBleed only requires that the attacker
can read and hammer her own private memory, and does not
involve any access or modiÔ¨Åcation to the target‚Äôs data, code,
or address space. As such, RAMBleed can bypass software-
based integrity checks that might be applied to the target,
such as using message authentication codes (MAC) to protect
the target‚Äôs data. Moreover, techniques designed to protect
cryptographic systems against fault attacks (such as Shamir‚Äôs
countermeasure [56]) are also ineffective as they again protect
the integrity of the cryptographic computation and not its
conÔ¨Ådentiality. Other software defenses, such as Brasser et
al.‚Äôs [8] memory partitioning scheme do not mitigate our
attack, as we are not trying to read from kernel memory.
A. Hardware Mitigations
There are, however, a few commonly proposed hardware-
based mitigations that have the potential to mitigate RAM-
Bleed. Kim et al. [34] propose PARA (probabilistc adjacent
row activation), wherein activating a row causes nearby rows
to activate with some probability. Repeated hammering of an
address then increases the likelihood that nearby victim rows
will be refreshed, thereby restoring their cells‚Äô charges and
preventing Rowhammer. PARA has not been widely adopted,
as it can only proide a probabilistic security guarantee.
Targeted Row Refresh (TRR). The more recent LPDDR4
standard supports the ability to refresh a targeted row with
TRR, where after a row is accessed a set number of times,
the nearby rows are automatically refreshed [31]. Despite
this mitigation, [21, 61] already report the ability to induce
Rowhammer bit Ô¨Çips in the presence of TRR.
Increasing Refresh Intervals.
Doubling DRAM refresh
rate by halving the refresh interval from 64ms to 32ms is an
attempt at reducing the number of bit Ô¨Çips by refreshing victim
rows. However, this is impractical on mobile systems due to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:39:51 UTC from IEEE Xplore.  Restrictions apply. 
707
and Falkner‚Äôs [65] Flush and Reload technique to determine
when the secret page is about to be allocated.
it
lies in the page cache,
Another limitation is that our attack against OpenSSH 7.9
required the the daemon to allocate the key multiple times. We
conjecture, however, that it may be possible to read secrets
even when they are never reallocated by the victim. If the
secret
is likely possible to use
Gruss et al.‚Äôs [21] memory waylaying technique to repeatedly
evict the secret and then bring it back into memory, thereby
changing its physical address. Even if it does not lie in the page
cache, the attacking process can still evict it by exhausting
enough memory to start paging memory to disk. Both of
these strategies would, however, be defeated by using Linux‚Äôs
mlock system call to lock secret pages into memory, thereby
preventing them from ever being evicted to disk.
Next, while we demonstrated our attack on a system using
DDR3 DRAM, we do not suspect DDR4 to be a fundamental
limitation, assuming that DDR4 memory retains the property
that Rowhammer-induced bit Ô¨Çips are data-dependent. Our
techniques for recovering physically sequential blocks depend
only on the operating system‚Äôs memory allocation algorithm,
and are thus hardware agnostic. With regard to Ô¨Ånding pairs of
addresses in different rows of the same bank, [49] have already
demonstrated how to reverse engineer the DRAM addressing
scheme in DDR4 systems. Furthermore, Rowhammer-induced
bit Ô¨Çips in DDR4 have been demonstrated by [1, 21, 37]. We
leave the composition of these results to achieve RAMBleed
on DDR4 memory to future work.
Finally, RAMBleed‚Äôs rate of reading memory is modest,
toping at around 3‚Äì4 bits per second. This allows sufÔ¨Åcient
time for memory scrubbing countermeasures to remove short-
lived secret data from the target‚Äôs memory. We thus leave the
task of improving RAMBleed‚Äôs read rate to future work.
XI. CONCLUSION
In this paper, we have shifted Rowhammer from being a
threat only to integrity to also being a threat to conÔ¨Ådentiality.
We demonstrated the practical severity of RAMBleed by con-
ducting and end-to-end exploit against OpenSSH 7.9, in which
we extracted the complete 2048 bit RSA private signing key.
To do so, we also developed memory massaging methods and
a technique called Frame Feng Shui that allows an attacker to
place the victim‚Äôs secret-containing pages in chosen physical
frames. By uncovering another channel for Rowhammer based
exploitation, we have highlighted the need to further explore
and understand the complete capabilities of Rowhammer.
ACKNOWLEDGMENTS
This research was partially supported by a gift from Intel.
the increased power demands. Worse yet, Aweke et al. [2] and
Gruss et al. [21] demonstrate bit Ô¨Çips even under this setting.
Using Error Correcting Codes (ECC).
An oft-touted
panacea for Rowhammer is the usage of ECC memory, as
any bit Ô¨Çip will simply be corrected by the hardware without
affecting the software layer. However, as we show in Sec-
tion VIII, the hardware error correction implementation actu-
ally produces sufÔ¨Åcient side channel information for mounting
RAMBleed. Thus, while ECC signiÔ¨Åcantly slows RAMBleed,
it does not offer complete protection.
B. Memory Encryption
One defense that does in fact protect against RAMBleed
is memory encryption. This is because RAMBleed reads bits
directly from memory, which are ciphertext bits in the case that
memory is encrypted. Trusted execution environments, such
as Intel‚Äôs Software Guard Extensions (SGX), ARM‚Äôs Trust
Zone, and AMD‚Äôs Secure Encrypted Virtualization (SEV), in
fact fully encrypt the enclave‚Äôs memory, thereby protecting
them from RAMBleed. It should be noted, however,
that
some enclaves, such as SGX, perform integrity checking on
encypted memory; Jang et al. [28] and Gruss et al. [21] show
that Rowhammer induced Ô¨Çips in enclave memory halt the
entire machine, necessitating a power cycle.
C. Flushing Keys from Memory
For systems that use sensitive data for a short amount of
time (e.g., cryptographic keys), zeroing out the data immedi-
ately after use [22] would signiÔ¨Åcantly reduce the risk from
RAMBleed. This is because RAMBleed cannot accurately read
bits of keys that do not remain in memory for at least one
refresh interval (64ms by default). While this countermeasure
is effective for protecting short lived data, it cannot by used
for data that needs to stay in memory for long durations.
D. Probabilistic Memory Allocator
Our Frame Feng Shui technique exploits the deterministic
behavior of the Linux buddy allocator to place the vic-
tim‚Äôs pages in speciÔ¨Åc locations. Consequently, introducing