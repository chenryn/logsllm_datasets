# Bridging the Gap between Data-Flow and Control-Flow Analysis for Anomaly Detection

## Authors
- Peng Li
- Hyundo Park
- Debin Gao
- Jianming Fu

## Affiliations
- University of North Carolina at Chapel Hill
- Korea University, Seoul, Korea
- Singapore Management University, Singapore
- Wuhan University, Wuhan, China

## Abstract
Host-based anomaly detectors monitor the control-flow and data-flow behavior of system calls to detect intrusions. Control-flow-based detectors monitor the sequence of system calls, while data-flow-based detectors monitor the data propagation among arguments of system calls. Although it has been suggested that data-flow-based detectors can be layered on top of control-flow-based ones (or vice versa) to improve accuracy, there is a significant gap between these two research directions. Research in one direction has often been isolated and has not effectively utilized results from the other.

In this paper, we demonstrate how data-flow analysis can leverage results from control-flow analysis to learn more accurate and useful rules for anomaly detection. Our results show that the proposed control-flow-analysis-aided data-flow analysis reveals accurate and useful rules that were not achievable with previous data-flow analysis techniques. These relationships among system call arguments and return values are valuable for detecting real attacks. A trace-driven evaluation shows that the proposed technique has low false-alarm rates and overhead when implemented on a production server.

## 1. Introduction
Many host-based anomaly detectors have been proposed to monitor system calls. Some detectors [5–8, 13, 17, 19, 20] monitor the sequence of system calls emitted by the application and use control-flow information for intrusion detection. Control-flow-based detectors are effective in detecting intrusions, such as code-injection attacks, because such intrusions often change the control flow of the program to make additional system calls.

Other detectors [2, 11, 15, 16] monitor the arguments of system calls and use data-flow information for intrusion detection. Monitoring system call arguments can detect more stealthy attacks that do not change the control flow but modify system call arguments. Despite the success of many data-flow techniques, there has been little research on how data-flow analysis can leverage results from control-flow analysis to detect intrusions. Bhatkar [2] noted that using control-flow context can help learn data-flow properties, but this was limited to using program counter information to differentiate instructions at different locations in a program.

To illustrate how control-flow information can aid data-flow analysis, consider the example in Figure 1.

```c
// Block A
fd = open(dir, "r");
read(fd, buf, size);

// Block B
fd1 = open(dir1, "r");
fd2 = open(dir2, "w");
read(fd1, buf, size);
write(fd2, buf, size);

// Block C
fd1 = open(dir1, "r");
if (need_to_write)
    fd2 = open(dir2, "w");
read(fd1, buf, size);
if (need_to_write)
    write(fd2, buf, size);
```

**Figure 1. Control-flow information helps data-flow analysis**

In Block A, the first argument of the `read` system call always equals the return value of the preceding `open` system call. This is a useful rule that most existing techniques can learn. However, in Block B, the same rule does not apply because the first argument of `read` now equals the second preceding `open`. If both Block A and Block B are in the program, training will be confused as the rules are valid with low probabilities.

A simple solution is to combine the two rules, but this results in a less precise rule and gives attackers more room to evade detection. Another solution is to use different program counter values to differentiate the two `read` system calls, but this does not work in cases like Block C where program counter values cannot differentiate the two cases.

This example motivates the idea that control-flow information is crucial for learning data-flow relations in system call arguments and return values. The same system call may have different data-flow properties in different contexts, and this context information may not be available by simply examining program counter values. Therefore, a better method is needed to utilize control-flow information for improved data-flow analysis.

In this paper, we introduce a technique that leverages results from control-flow analysis for data-flow analysis in intrusion detection. We design three Rule Sets to capture these relations: 
- **Rule Set A**: Contains rules that reveal the argument and return value relations when the process is performing a specific task.
- **Rule Set B**: Exploits rules governing system calls when the process is performing the same task repeatedly.
- **Rule Set C**: Reflects the argument and return value behavior when the process is performing different tasks.

Our trace-driven evaluation using logs from a production web server shows that the proposed technique can detect real attacks and learn useful rules for intrusion detection that prior approaches could not. The false-alarm rates of our system are low, and we also evaluate the convergence of the training process and the overhead in real-time monitoring.

The rest of the paper is organized as follows:
- Section 2: Motivations of our technique.
- Section 3: Design details of our system.
- Section 4: Evaluation results.
- Section 5: Related work.
- Section 6: Future work.

## 2. Motivations of our Technique
Figure 1 illustrates that context information from control-flow analysis is necessary for learning data-flow relations among system call arguments and return values. This context information can be obtained through static or dynamic analysis. In this paper, we focus on dynamic analysis due to its wide applicability, simplicity, and accuracy in learning relations governing normal executions.

Control-flow-based detectors using dynamic analysis have proposed using real-time information, such as program counters and call stacks, to learn the context of a system call [5, 7, 8, 13]. However, as shown in Block C of Figure 1, the context information needed for data-flow relations is not readily available from this information. The required context information is about the program's behavior before and after the system call is made, i.e., the sub-task the program is performing.

A sliding window of system calls provides context information about system calls made before and after the system call under analysis, which can differentiate the two cases in Block C. Variable-length patterns extracted from system call sequences more naturally reflect the behavior of an application than fixed-length patterns [8, 19, 20]. Each variable-length pattern corresponds to a task performed by the application, and there are strong relations among arguments of system calls within a single pattern.

Motivated by these observations, we define three Rule Sets to capture the relations among system call arguments and return values using context information from variable-length patterns:
1. **Rule Set A**: Contains rules that reveal the argument and return value relations among system calls within one system call pattern.
2. **Rule Set B**: Exploits rules governing system calls from repeating system call patterns.
3. **Rule Set C**: Reflects the behavior of system calls from different patterns.

Rules in each of these sets are learned using techniques inspired by association rule mining [1, 21].

## 3. Relations Mining
In this section, we describe the detailed process of mining relations in system call arguments and return values using context information from variable-length system call patterns.

### 3.1 Overview
The input training data, containing system call sequences (along with arguments and return values) recorded during benign application execution, is passed to a pattern extraction engine for control-flow analysis. The engine outputs a set of patterns and a representation of the training data using these patterns. Three types of rules are then learned using relation mining techniques. Finally, the learned rules are used for online monitoring of the application.

### 3.2 System Call Patterns via Control-Flow Analysis
We use the Teiresias algorithm [12] and a pattern reduction algorithm [20] for control-flow analysis. These algorithms have been successfully used in various projects to improve intrusion detection systems [8–10, 19, 20]. Each pattern extracted corresponds to a task performed by the program. Table 1 shows an example of a pattern composed of three system calls.

| Syscall No. | Syscall Name |
|-------------|--------------|
| 168         | poll         |
| 003         | read         |
| 078         | gettimeofday |

**Table 1. System calls in a pattern**

With the system call patterns found, the system call sequences in the training data can be represented in terms of the patterns and their corresponding system calls, along with their arguments and return values. For simplicity, we refer to arguments and return values as attributes.

### 3.3 Relations and Relation Mining
With pattern extraction, each system call in the training data falls into a particular pattern, providing context information for more accurate relation mining. We group system call arguments and return values based on their data types and present a generalized form for the rules and the three Rule Sets. Inspired by association rule mining techniques [1, 21], we implement two evaluations on each learned rule to filter out rules that may cause too many false positives or negatives.

#### 3.3.1 Macro-Types
Only relations between attributes of the same data type are typically useful. However, after checking the 111 distinct data types from the 324 system calls defined in Linux kernel 2.6.22, we found that system call arguments of different data types might also be related. For example, the data type of the return value of a system call can be related to the data type of an argument in another system call.