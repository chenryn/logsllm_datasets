    #endif
##### 利用思路
    [+] 构造合理数据, 使其分配0页
    [+] 触发漏洞执行shellcode
##### 爬坑点
[+] 分配内存页
    if (!NT_SUCCESS(NtAllocateVirtualMemory(HANDLE(-1),
            &fakeAddr,  //==> 这个地方别赋值为NULL(0), 否则系统会自动分配地址(请参考MSDN)
            0,
            &MemSize,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_READWRITE)) || fakeAddr != NULL)
        {
            std::cout  你得确定漏洞的触发点 --> 得有代码的逻辑分析能力
        ==> 你得确定调用怎样的合适的API, 各个参数放怎样的数据才是合理的. --> 对windows编程要有相应的熟悉.
CVE的学习, 如果你做过1day的比较之后, 你会发现. 定位漏洞点其实借助于其他的小技巧(比如补丁比较)可能没有那么难.
但是触发了漏洞之后利用函数里面的哪一段数据才能合理的实现利用我觉得是更难的部分. 因为很容易迷失在此中. 所以我做的过程当中面对这个问题的解决方案是:
    [+] xref触发漏洞逻辑
    [+] 利用调试去做与补丁比较反方向的事, 验证判断
    [+] 构建POC
            ==> 确定漏洞的相关内核数据类型, 如果前辈们已经做过了. 就直接参考前辈的经验
            ==> 如果没做过:
                ==> 结合windows nt4泄露源码实现逆向
                ==> 动态调试, 对比哪些数据被污染了(如果这一部分做得好的话, 甚至可以不用逆向)
##### 开发难度
HEVD:
    [+] HEVD的利用github上面有很多很多, 如果你不会的话你可以参考其他人的代码与教程学习
    [+] HEVD对数据的操控十分简单. 大多数数据都是连续的(你可以覆盖可控数据的n个byte)
CVE:
    [+] 很多CVE的利用在网上都没有push出相应的源代码, 得自己游离于google的开发平台做相应的资料搜集.
    [+] 大多数漏洞操纵的数据都是有限的, 而且很容易写原语残缺(可以参考我的第二篇文章)
    [+] 缓解措施问题: 针对各个平台, 有形形色色的缓解措施等着你. 其中的绕过让人头疼不已.
我一度困扰于缓解措施和各种绕过, 所以对于此, 我做了下面的解决方案.
    [+] 寻求一种通用性的方法: 直接替换system token和current process token. 这种方法能够实现内核提权, 你只需要绕过KASLR. 以及获取相应的读写权限即可
    [+] 多读以前的漏洞, 看看前辈们如何解决写原语残缺.
        ==> 控制关键数据结构体, 获取更优秀的读写能力
    [+] 在github上面更新了(目前更新到了rs3)漏洞利用的合集, 保证我在各个平台上至少掌握一种方法可利用.
## 一些自己内核学习的过程中绕弯的地方
### 贫穷
这一部分其实没有开玩笑, 在我早期的学习过程中. 我用着我的4G的笔记本. 同时开着两三个虚拟机. 然后电脑天天处于爆炸的状态. 十分影响学习的效率.
所以如果可以的话, 尽量使用性能比较好的电脑. 好的工具会让你事半功倍.
### 理论分析与调试分析
我做的最难受的洞应该是[cve-2017-0263](https://xiaodaozhi.com/exploit/71.html),
因为那是小刀师傅的博客上面做的是一篇十分详细的分析. 所以我觉得应该是蛮简单的, 但是我当时差不多花了一个星期左右在上面, 因为我走错了重点.
小刀师傅的博客上面有对每一个控件的原理相关的数据变量都做详细的分析, 能做到此是基于其强大的内功. 他熟悉windows的管理细节,
以及内核结构的实现思路. 这一部分是需要经验的积累的. 然而初入内核的我是根本不可能有内功这种东西的. 所以我做的最大的错误就是让自己陷入知识的海洋当中.
后来的解决方案是我开始从exp入手, 定位相应的关键代码段.然后记住关键的代码信息, 完成了那个漏洞的理解分析.
所以我们可以牵涉到另外一个东西. 我在学习的过程当中, 一开始翻阅了大量的paper, 光是blackhat的演讲paper就搜集了一大堆,
但是经常看着看着就忘了. 大概自己实在是一个不擅长寄东西的人.所以我开始对paper做了另外一个十分的定义. 字典. 哪里不会点哪里.
学堆喷的时候去参考11年的pool, feng shui的时候去看13的paper. 在重复的查阅当中. 获取更深的理解.
## 关于挖洞的探讨.
依然想首先讲出, 我还没有开始挖洞, 所以这一部分的东西只是我下一步的工作的主体思路. 在后期当中我会更新变改正.
##### 开发者失误
在前面的过程当中. 我对每一个类型的洞都给了相应的背锅归属, 我把pool overflow, stackoverflow归类于开发者背锅.
然而微软的老师们都是很厉害的存在, 所以我觉得想去挖这种类型的洞概率还是挺小的. 如果说有的话, 应该是在相应的比较老的源码当中.
在那个时候微软还是良莠不齐, 以及大家并不注重安全的年代我觉得漏洞可能存在. 所以相应的思路是:
    [+] 比较古老的windows和现有的windows(bindiff)
    [+] 重点观测未更改的函数
        ==> 留意核心功能的函数, 攻击面广.
##### 系统特性
这一部分的挖洞是我最想做的. 做CVE和HEVD的分析的时候, 一般我都会去尝试假设如果自己实现这份源码会去怎么实现.
最终得出的结论是我可能在`整数溢出+UAF模式的回调攻击`这两个个类型的洞会百分百命中.
###### 整数溢出
`整数溢出`的漏洞其实我觉得锅是不应该给开发者的, 寄存器的局限性和语言的局限性导致了这个漏洞的出现. 正常人的思路应该是`FFFFFFFF+1=1
0000 0000`, 然而由于局限性的出现, 结果变为了`0`, 所以我觉得由`人的惯性思维`去入手. 应该会有不错的收获. 所以在下面的学习当中.
我会主要关注于整数溢出的漏洞挖掘.
目前的大概思路是:
    [+] 寻找最新的补丁
    [+] 使用IDA python完成相应的代码搜索. 过滤条件:
        ==> PALLOCMEM
        ==> without: ULongLongToLong
###### UAF攻击
`UAF`的漏洞也应该是由系统特性来背锅. 因为在设计方面, 使用用户回调来与user space的相关数据实现交互可以极大的提高效率.
引发了潜在的安全问题. 在微软最开始的设计当中, 应该对于这一部分的考虑挺少的. 所以我觉得这一部分的洞可能比`整数溢出`漏洞更多一些.
但是不做这一方面的原因是, 手工寻找此类型的漏洞可能过于痛苦. 所以我得去学一点`fuzz`的知识. 那也是一个漫长的过程. 所以先慢慢来.
目前的大概思路是:
    [+] 学习fuzz
    [+] 构建好的策略
## 相关链接
    ==> 北归姐的个人博客: www.baidu.com(北归姐的博客不开放. 所以先占位)
    ==> sakura师父的个人博客: http://eternalsakura13.com/
    ==> 小刀师傅的博客: https://xiaodaozhi.com/(小刀师傅拥有着我所有想要的优点)
    ==> rootkits老师的博客: https://rootkits.xyz/(入门的良心材料)
    ==> j00ru: https://j00ru.vexillium.org/(我的偶像, 我能做到的只是这副皮囊比偶像帅一点(逃), 其他的还有很长的距离去赶)
    ==> alex: http://www.alex-ionescu.com/(一个非常厉害非常厉害的老师. 学windows内核内功方面的字典)
    ==> NCC group: https://www.nccgroup.trust/us/(发布的paper有很强的研究意义)
    ==> coresecurity: https://support.coresecurity.com/hc/en-us(发布的paper有很强的研究意义)
    ==> sensepost: https://sensepost.com/(发布的paper有很强的研究意义)
    ==> awesome kernel: https://github.com/ExpLife0011(一份相当有用的资料来源地. explife老师帮忙节省了很多找资料的细节)
    ==> blackhat: https://www.blackhat.com/(有很多的paper, 大量的最新的研究)
    ==> k0keoyo: https://github.com/k0keoyo(在老师的github上面学到很多.) 
    ==> 我的博客地址: https://www.redog.me/
## 后记
内核系列分析的文章到这里告一段落. 十分感谢你阅读完这些又长又丑的文章(假装自己的博客有人看的样子). 希望能够对你有所帮助.
做这个系列的目的是, 在我学习的过程中, 阅读了大量的前辈们的文章, 他们把windows的闭源变成了开源. 所以我觉得很酷. 我也想做这样的事.
另外一个方面, 自己的学习过程当中实在是一个相当愚蠢的过程, 犯了大量的错误, 所以想把自己犯的错给贴出来. 如果能够帮助你避免重复犯错实在是幸运的事.
最后, wjllz是人间大笨蛋.
* * *