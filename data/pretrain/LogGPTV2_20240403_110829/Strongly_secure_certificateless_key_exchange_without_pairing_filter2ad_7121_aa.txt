# Strongly Secure Certificateless Key Exchange without Pairing

**Authors:** Guomin Yang and Chik How Tan

## Abstract

We introduce a formal model for certificateless authenticated key exchange (CL-AKE) protocols. Contrary to expectations, we demonstrate that the natural combination of an identity-based AKE (ID-AKE) protocol with a public key-based AKE (PK-AKE) protocol does not provide strong security. We present the first one-round CL-AKE scheme proven secure in the random oracle model. Our scheme introduces two variants of the Diffie-Hellman trapdoor, as introduced by [CKS08]. The proposed key agreement scheme remains secure as long as each party has at least one uncompromised secret, even if the key generation center (KGC) learns the ephemeral secrets of both parties.

## 1. Introduction

Certificateless encryption, introduced by Al-Riyami and Paterson [ARP03], is a variant of identity-based encryption that limits the key escrow capabilities of the key generation center (KGC), which is inherent in identity-based encryption [BF03]. Dent [Den08] surveyed over twenty certificateless encryption schemes, focusing on different security models and their efficiency. In certificateless cryptography, each party has three secrets:
- The key issued by the KGC (referred to as the "partial private key" by Dent [Den08]).
- The user-generated private key \( x_{ID} \) (referred to as the "secret value" by Dent).
- The ephemeral value chosen randomly for each session.

Key agreement schemes provide an efficient means for two parties to communicate over an adversarial-controlled channel. Chen, Cheng, and Smart [CCS07] compiled an overview of nearly twenty identity-based key agreement protocols and provided security proofs for two of them. Many ID-based schemes ensure full privacy for both parties as long as the KGC does not learn any of the ephemeral secrets used in computing the session key. However, Krawczyk [Kra05] highlighted that the leakage of ephemeral keys should not be neglected, as they are often precomputed and stored in insecure memory. In the context of ID-based key agreement protocols, this means that if the ephemeral key of either party leaks, a malicious KGC can compute the session key.

Swanson [Swa08] compiled an overview of current certificateless key agreement schemes. These schemes aim to provide full privacy even if the ephemeral secrets of the parties leak to the KGC or if the KGC actively interferes with the messages exchanged (e.g., through a man-in-the-middle attack). The first certificateless key agreement scheme was published by Al-Riyami and Paterson [ARP03] as a side note to their certificateless encryption scheme. However, they did not provide a security model for certificateless key agreement schemes or a proof of security for the scheme. Other certificateless key agreement schemes were published by Mandt and Tan [MT06] and improved by Xia et al. [XWSX08], Wang, Cao, and Wang [WCW06], and Shao Zu-hua [Zh05], but the respective authors only provided heuristic arguments for their security. Swanson [Swa08] analyzed these schemes and demonstrated generic attacks that break the claimed security notions. Swanson also posed three open questions in her thesis, which we address in this paper.

By combining an ID-based scheme with a public key-based scheme, certificateless encryption [YL04a, LQ06], certificateless signatures [YL04b], and certificateless key encapsulation mechanisms [BFMLS08] can be constructed from existing protocols. Contrary to expectations, we show that a certificateless key agreement protocol cannot be securely constructed by a natural combination of an ID-based key agreement protocol with a public key-based key agreement protocol.

The security model is an extension of Swanson's [Swa08] modified version of the extended Canetti-Krawczyk model presented in [LLM07] for certificateless key agreement. In this paper, we further strengthen the model (giving more power to the adversary) and provide the first formal proof for a strongly secure certificateless key agreement scheme in the random oracle model. The proposed protocol is a one-round protocol that withstands all of Swanson's attacks, although the messages exchanged in our protocol are the same as those in Mandt and Tan's protocol [MT06]. To withstand the attacks, we use a modified version of the technique presented by Xia et al. [XWSX08].

We prove that our certificateless key agreement protocol is secure even if the KGC actively tries to break the scheme: it may either reveal ephemeral secrets or reveal secret values/replace public keys, but not both. As long as each party still has at least one uncompromised secret, our scheme remains secure in the random oracle model, assuming the computational Diffie-Hellman assumption and the computational bilinear Diffie-Hellman assumption hold. Our proofs are in the strongest security model available for certificateless schemes, corresponding to Dent's [Den08] Strong Type I and Strong Type II security, where the adversary is allowed to replace certificateless public keys, and the challenger must answer all oracle queries.

The main contributions of this paper are:
- The strongest formal model for secure authenticated certificateless key exchange protocols today, including a strong decryption oracle [Den08] for reveal queries.
- An analysis of why certificateless key establishment schemes (CL-AKE) cannot be readily composed by combining an ID-AKE scheme with a PK-AKE scheme in our security model.
- The first one-round protocol for certificateless key agreement with a security proof in the random oracle model, fulfilling all notions of security in our model and withstanding recent attacks on certificateless key agreement protocols.

The organization of the paper is as follows: Section 2 introduces the security model and relates it to existing notions of security for key agreement schemes and certificateless encryption. We also show why a generic composition of ID-AKE with PK-AKE does not have sufficient security guarantees in our model. Section 3 describes the scheme. Section 5 discusses the security proof of the new protocol. We conclude the paper by answering some open questions in Section 6.

## 2. Security Model for Certificateless Key Agreement Schemes

### 2.1 Common Security Properties

The following security properties are commonly required of key establishment protocols:
- **Resistance to Basic Impersonation Attacks:** An adversary who does not know the private key of party A should not be able to impersonate A.
- **Resistance to Unknown Key-Share (UKS) Attacks:** An adversary M interferes with two honest parties A and B such that both parties accept the session and compute the same key. However, while A thinks the key is shared with B, B believes the key is shared with M.
- **Known Key Security:** Each run of a key agreement protocol between two parties A and B should produce a unique session key. The protocol should not become insecure if the adversary has learned some of the session keys [LMQ+03].
- **Weak Perfect Forward Secrecy (wPFS):** A key-exchange protocol provides weak PFS (wPFS) if an attacker M cannot distinguish a key of any session from random, even if M has learned the private keys of both peers, as long as the session and its matching session are clean [Kra05, Definition 22].
- **Resistance to Key-Compromise Impersonation (KCI) Attacks:** A KE-attacker M that has learned the private key of party \(\hat{A}\) succeeds in a Key-compromise impersonation (KCI) attack against \(\hat{A}\) if M can distinguish the session key of a complete session at \(\hat{A}\) from random, where the session peer is uncorrupted and the session and its matching session (if it exists) are clean [Kra05, Definition 20].
- **Resistance to Disclosure of Ephemeral Secrets:** The protocol should be resistant to the disclosure of ephemeral secrets. The disclosure of an ephemeral secret should not compromise the security of sessions where the ephemeral secret was not used.
- **KGC Forward Secrecy:** The KGC should be unable to compute the session key knowing all publicly available information.

For certificateless protocols, we additionally require:
- **Resistance to Leakage of Ephemeral Secrets to the KGC:** If a malicious KGC learns the ephemeral secrets of any session, the KGC should not be able to compute the session key.

### 2.2 Formal Definition of the Security Model

We present a strengthened version of Swanson's [Swa08] model, which is based on LaMacchia, Lauter, and Mityagin's [LLM07] extended Canetti-Krawczyk (eCK) model. We discuss the changes to the respective models in Section 2.2.

Let \( U = \{U_1, \ldots, U_n\} \) be a set of parties. The protocol may be run between any two of these parties. For each party, there exists an identity-based public key that can be derived from its identifier. There is a KGC that issues identity-based private keys to the parties through a secure channel. Additionally, the parties generate their own secret values and certificateless public keys.

The adversary controls the network over which protocol messages are exchanged. \(\Pi^t_{i,j}\) represents the \(t\)-th protocol session running at party \(i\) with intended partner party \(j\). The adversary is allowed to replace certificateless public keys used to compute the session key, without disclosing the private key matching the replaced public key to the respective party.

A session \(\Pi^t_{i,j}\) enters an accepted state when it computes a session key \(SK^t_{i,j}\). A session may terminate without entering an accepted state. Whether a session has terminated with acceptance or without acceptance is assumed to be public. The session \(\Pi^t_{i,j}\) is assigned a partner ID \(pid = (ID_i, ID_j)\). The session ID \(sid\) of \(\Pi^t_{i,j}\) at party \(i\) is the transcript of the messages exchanged with party \(j\) during the session. Two sessions \(\Pi^t_{j,i}\) are considered matching if they have the same \(pid\) (and \(sid\)).

The game runs in two phases. During the first phase, the adversary \(M\) is allowed to issue the following queries in any order:
- **Send(\(\Pi^t_{i,j}, x\)):** If the session \(\Pi^t_{i,j}\) does not exist, it will be created as an initiator at party \(i\) if \(x = \lambda\), or as a responder at party \(j\) otherwise. If the participating parties have not been initiated before, their respective private and public keys are created. Upon receiving the message \(x\), the protocol is executed. After party \(i\) has sent and received the last set of messages specified by the protocol, it outputs a decision indicating acceptance or rejection of the session. For one-round protocols, party \(i\) behaves as follows:
  - \(x = \lambda\): Party \(i\) generates an ephemeral value and responds with an outgoing message only.
  - \(x \neq \lambda\): If party \(i\) is a responder, it generates an ephemeral value for the session and responds with an outgoing message \(m\) and a decision indicating acceptance or rejection of the session. If party \(i\) is an initiator, it responds with a decision indicating acceptance or rejection of the session.
- **Reveal Master Key:** The adversary is given access to the master secret key.
- **Session Key Reveal(\(\Pi^t_{i,j}\)):** If the session has not accepted, it returns \(\bot\); otherwise, it reveals the accepted session key.
- **Reveal ID-Based Secret(\(i\)):** Party \(i\) responds with its ID-based private key, e.g., \(sH_1(ID_i)\).
- **Reveal Secret Value(\(i\)):** Party \(i\) responds with its secret value \(x_i\) that corresponds to its certificateless public key. If \(i\) has been asked the replace public key query before, it responds with \(\bot\).
- **Replace Public Key(\(i, pk\)):** Party \(i\)'s certificateless public key is replaced with \(pk\) chosen by the adversary. Party \(i\) will use the new public key for all communication and computation.
- **Reveal Ephemeral Key(\(\Pi^t_{i,j}\)):** Party \(i\) responds with the ephemeral secret used in session \(\Pi^t_{i,j}\).

We group the key reveal queries into three types:
- The reveal master key and reveal ID-based secret queries try to undermine the security of the ID-based part of the scheme.
- The reveal secret value and replace public key queries try to undermine the security of the public key-based part of the scheme.
- The reveal ephemeral key query tries to undermine the security of one particular session.

We define a session as fully corrupt if it has been asked all three types of reveal queries: the reveal master key or reveal ID-based secret, the reveal secret value or the replace public key, and the reveal ephemeral key query.

Once the adversary \(M\) decides that the first phase is over, it starts the second phase by choosing a fresh session \(\Pi^t_{i,j}\) and issuing a Test(\(\Pi^t_{i,j}\)) query, where the fresh session and test query are defined as follows:

**Definition 1 (Fresh Session):** A session \(\Pi^t_{i,j}\) is fresh if:
1. \(\Pi^t_{i,j}\) is unopened (not being issued the session key reveal query).
2. The session state at neither party participating in this session is fully corrupted.
3. There is no opened session \(\Pi^u_{j,i}\) which has a matching conversation to \(\Pi^t_{i,j}\).

**Test(\(\Pi^t_{i,j}\)):** The input session \(\Pi^t_{i,j}\) must be fresh. A bit \(b \in \{0, 1\}\) is randomly chosen. If \(b = 0\), the adversary is given the session key; otherwise, it randomly samples a session key from the distribution of valid session keys and returns it to the adversary.

After the Test(\(\Pi^t_{i,j}\)) query has been issued, the adversary can continue querying, except that the test session \(\Pi^t_{i,j}\) should remain fresh. We emphasize that partial corruption is allowed as a benefit of our security model. Additionally, replace public key queries may be issued to any party after the test session has been completed.

At the end of the game, the adversary outputs a guess \(\hat{b}\) for \(b\). If \(\hat{b} = b\), we say that the adversary wins. The adversary's advantage in winning the game is defined as:

\[ \text{Adv}_M(k) = \left| \Pr[M \text{ wins}] - \frac{1}{2} \right| \]

**Definition 2 (Strong Type I Secure Key Agreement Scheme):** A certificateless key agreement scheme is Strong Type I secure if every probabilistic, polynomial-time adversary \(M\) has negligible advantage in winning the game described in Section 2.1, subject to the following constraints:
- \(M\) may corrupt at most two out of three types of secrets per party involved in the test session.
- \(M\) is allowed to replace public keys of any party; however, this counts as the corruption of one secret.
- \(M\) may not reveal the secret value of any identity for which it has replaced the certificateless public key.
- \(M\) is allowed to ask session key reveal queries even for session keys computed by identities where \(M\) replaced the identity's public key.
- \(M\) is allowed to replace public keys of any party after the test query has been issued.

**Definition 3 (Strong Type II Secure Key Agreement Scheme):** A certificateless key agreement scheme is Strong Type II secure if every probabilistic, polynomial-time adversary \(M\) has negligible advantage in winning the game described in Section 2.1, subject to the following constraints:
- \(M\) is given the master secret key \(s\) at the start of the game.
- \(M\) may corrupt at most one additional type of secret per party participating in the test query.
- \(M\) is allowed to replace public keys of any party; however, this counts as the corruption of one secret.
- \(M\) may not reveal the secret value of any identity for which it has replaced the certificateless public key.
- \(M\) is allowed to ask session key reveal queries even for session keys computed by identities where \(M\) replaced the identity's public key.
- \(M\) is allowed to replace public keys of any party after the test query has been issued.

### 2.3 Relation to Existing Notions of Security

Swanson's [Swa08] replace public key query assumes that the party whose key was replaced continues to make its computations with its original (unreplaced) public key (and its matching private key). Although Swanson's model seems more "natural," strong certificateless encryption has been the goal of many papers, and a discussion of the benefits and drawbacks can be found in [DLP08]. Our model gives more power to the adversary, making schemes that are strongly secure preferable to those in a weaker security model.

When checking for a matching conversation, Swanson omits the certificateless public keys from the conversation transcript. This weakens the adversary compared to our model, as the adversary would not be allowed to replace public keys and try to replay the conversation with the replaced keys of the test session.