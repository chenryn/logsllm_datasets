```
 | 这个是这个容器的相对 CPU 份额。 |
| 
```
--cpuset=""
```
 | 这些是允许执行的 CPUs 从 0 开始。(例如，0 到 3)。 |
| 
```
-m, --memory=""
```
 | 这个是这个容器`(`的内存限制。 |
| 
```
--restart=""
```
 | (v1.2+)这个指定了容器崩溃时的重启策略。 |
| 
```
--cap-add=""
```
 | (v1.2+)此向容器授予能力(参考[第 4 章](4.html "Chapter 4. Automation and Best Practices")、*安全最佳实践*)。 |
| 
```
--cap-drop=""
```
 | (v1.2+)此将能力列入容器黑名单(参考[第 4 章](4.html "Chapter 4. Automation and Best Practices")、*安全最佳实践*)。 |
| 
```
--device=""
```
 | (v1.2+)此将设备安装在容器上。 |
当运行一个容器时，重要的是要记住，容器的生存期与您启动容器时运行的命令的生存期相关联。现在试着运行这个:
```
$ docker run -dt ubuntu ps
b1d037dfcff6b076bde360070d3af0d019269e44929df61c93dfcdfaf29492c9
$ docker attach b1d037
2014/07/16 16:01:29 You cannot attach to a stopped container, start it first
```
这里发生了什么？当我们运行简单命令`ps`时，容器运行该命令并退出。因此，我们得到了一个错误。
### 注
`attach`命令将标准输入和输出附加到运行的容器。
这里的另一个重要信息是，对于所有需要容器标识的命令，您不需要使用整个 64 个字符的标识。前几个字符就足够了。下面的代码显示了相同的示例:
```
$ docker attach b1d03
2014/07/16 16:09:39 You cannot attach to a stopped container, start it first
$ docker attach b1d0
2014/07/16 16:09:40 You cannot attach to a stopped container, start it first
$ docker attach b1d
2014/07/16 16:09:42 You cannot attach to a stopped container, start it first
$ docker attach b1
2014/07/16 16:09:44 You cannot attach to a stopped container, start it first
$ docker attach b
2014/07/16 16:09:45 Error: No such container: b
```
更方便的方法是自己给容器命名:
```
$ docker run -dit --name OD-name-example ubuntu /bin/bash
1b21af96c38836df8a809049fb3a040db571cc0cef000a54ebce978c1b5567ea
$ docker attach OD-name-example
root@1b21af96c388:/#
```
`-i`标志对于容器中的任何类型的交互都是必需的，而`-t`标志对于创建伪终端是必需的。
前面的例子也让我们意识到了一个事实，即使我们退出了一个容器，它仍然处于`stopped`状态。也就是说，我们将能够再次启动容器，保留其文件系统层。您可以通过运行以下命令看到这一点:
```
$ docker ps -a
CONTAINER ID IMAGE         COMMAND CREATED    STATUS    NAMES
eb424f5a9d3f ubuntu:latest ps      1 hour ago Exited OD-name-example 
```
虽然这可能很方便，但随着越来越多的容器被保存下来，您可能很快就会耗尽主机的磁盘空间。因此，如果您要运行一次性容器，您可以使用`–-rm`标志运行它，该标志将在进程退出时移除容器:
```
$ docker run --rm -it --name OD-rm-example ubuntu /bin/bash
root@0fc99b2e35fb:/# exit
exit
$ docker ps -a
CONTAINER ID    IMAGE    COMMAND    CREATED    STATUS   PORTS   NAMES
```
### 运行服务器
现在，对于我们的下一个例子，我们将尝试运行一个网络服务器。选择这个例子是因为 Docker 容器最常见的实际用例是 web 应用的运输:
```
$ docker run -it –-name OD-pythonserver-1 --rm python:2.7 \
python -m SimpleHTTPServer 8000;
Serving HTTP on 0.0.0.0 port 8000
```
现在我们知道问题了；我们有一个在容器中运行的服务器，但是由于容器的 IP 是由 Docker 动态分配的，这使得事情变得困难。但是，我们可以将容器的端口绑定到主机的端口，Docker 将负责转发网络流量。现在让我们用`-p`标志再次尝试这个命令:
```
$ docker run -p 0.0.0.0:8000:8000 -it --rm –-name OD-pythonserver-2 \ python:2.7 python -m SimpleHTTPServer 8000;
Serving HTTP on 0.0.0.0 port 8000 ...
172.17.42.1 - - [18/Jul/2014 14:25:46] "GET / HTTP/1.1" 200 -
```
现在打开浏览器，进入`http://localhost:8000`。瞧！
如果您是 OS X 用户，并且您意识到自己无法访问`http://localhost:8000`，这是因为 VirtualBox 尚未配置为响应**网络地址转换** ( **NAT** )对 boot2Docker VM 的请求。向别名文件(`bash_profile`或)添加以下功能。`bashrc`)会省去很多麻烦:
```
natboot2docker () { VBoxManage controlvm boot2docker-vm natpf1 \
   "$1,tcp,127.0.0.1,$2,,$3"; }
removeDockerNat() {
    VBoxManage modifyvm boot2docker-vm \
    --natpf1 delete $1;
}
```
之后，您应该可以使用`$ natboot2docker mypythonserver 8000 8000`命令访问 Python 服务器。但是完成后记得运行`$ removeDockerDockerNat mypythonserver`命令。否则，当您下次运行 boot2Docker 虚拟机时，您将面临一个不允许您获取 IP 地址或`ssh`脚本的错误:
```
$ boot2docker ssh
ssh_exchange_identification: Connection closed by remote host
2014/07/19 11:55:09 exit status 255
```
您的浏览器现在显示容器的`/root`路径。如果你想为你的主机目录服务呢？让我们尝试安装一个设备:
```
root@eb53f7ec79fd:/# mount -t tmpfs /dev/random /mnt
mount: permission denied
```
如您所见，`mount`命令不起作用。事实上，大多数潜在危险的内核功能都会被丢弃，除非您包含`--privileged`标志。
然而，除非你知道自己在做什么，否则你永远不应该使用这面旗帜。Docker 提供了一种更简单的方法来绑定装载主机卷，并使用`-v`和`–volumes`选项绑定装载主机卷。让我们在当前目录中再次尝试这个示例:
```
$ docker run -v $(pwd):$(pwd) -p 0.0.0.0:8000:8000 -it –rm \
--name OD-pythonserver-3 python:2.7 python -m SimpleHTTPServer 8000;
Serving HTTP on 0.0.0.0 port 8000 ...
10.0.2.2 - - [18/Jul/2014 14:40:35] "GET / HTTP/1.1" 200 -
```
现在，您已经将运行命令的目录绑定到容器。但是，当您访问容器时，您仍然会得到容器根目录的目录列表。为了服务已经绑定到容器的目录，让我们使用`-w`标志将其设置为容器的工作目录(容器化进程运行的目录):
```
$ docker run -v $(pwd):$(pwd) -w $(pwd) -p 0.0.0.0:8000:8000 -it \ --name OD-pythonserver-4 python:2.7 python -m SimpleHTTPServer 8000;
Serving HTTP on 0.0.0.0 port 8000 ...
10.0.2.2 - - [18/Jul/2014 14:51:35] "GET / HTTP/1.1" 200 -
```
### 注
Boot2Docker 用户还不能使用这个，除非你使用 guest 插件并设置共享文件夹，其指南可以在[https://medium . com/boot 2 docker-轻量级-Linux-for docker/boot 2 docker-with-virtualbox-guest-additions-da1e 3a b 2465 c](https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c)找到。虽然这个解决方案有效，但它是一个黑客，不建议使用。与此同时，Docker 社区正在积极尝试寻找解决方案(查看 boot2Docker GitHub 存储库中的问题`#64`和 Docker 存储库中的`#4023`)。
现在`http://localhost:8000`将服务于您当前运行的目录，但是来自 Docker 容器。不过要小心，因为您所做的任何更改也会写入主机的文件系统。
### 类型
从 v1.1.1 开始，可以使用`$ docker run -v /:/my_host:ro ubuntu ls /my_host`将主机的挂载根绑定到一个容器上，但是禁止在容器的`/`路径上挂载。
该卷可选地以`:ro`或`:rw`命令作为后缀，以分别以只读或读写模式装载卷。默认情况下，卷以与主机中相同的模式(读写或只读)装载。
该选项主要用于装载静态资产和写入日志。
但是如果我想安装一个外部设备呢？
在 v1.2 之前，您必须在主机中装载设备，并使用权限容器中的`-v`标志绑定装载，但是 v1.2 增加了一个`--device`标志，您可以使用它来装载设备，而无需使用`--privileged`标志。
例如，要使用容器中的网络摄像头，请运行以下命令:
```
$ docker run --device=/dev/video0:/dev/video0
```
Docker v1.2 还添加了一个`--restart`标志来指定容器的重启策略。目前，有三种重启策略:
*   `no`:如果容器死亡，不要重启(默认)。
*   `on-failure`:如果容器以非零退出代码退出，则重新启动容器。它还可以接受可选的最大重启次数(例如，`on-failure:5`)。
*   `always`:无论返回什么退出代码，都要重启容器。
下面是一个无休止重启的例子:
```
$ docker run --restart=always code.it
```
下一行用来在放弃之前尝试五次:
```
$ docker run --restart=on-failure:5 code.it
```
## 搜索命令
`search`命令允许我们在公共注册表中搜索 Docker 映像。让我们搜索所有与 Python 相关的映像:
```
$ docker search python | less
```
## 拉动命令
`pull`命令用于从注册表中提取映像或存储库。默认情况下，它从公共 Docker 注册表中提取它们，但是如果您正在运行自己的注册表，您也可以从中提取它们:
```
$ docker pull python # pulls repository from Docker Hub
$ docker pull python:2.7 # pulls the image tagged 2.7
$ docker pull /
```
## 启动命令
我们在讨论`docker run`时看到，容器状态在退出时被保留，除非它被明确移除。`docker start`命令启动停止的容器:
```
$ docker start [-i] [-a] 
```
考虑以下`start`命令的例子:
```
$ docker ps -a
CONTAINER ID IMAGE         COMMAND   CREATED STATUS    NAMES
e3c4b6b39cff ubuntu:latest python -m 1h ago  Exited OD-pythonserver-4 
81bb2a92ab0c ubuntu:latest /bin/bash 1h ago  Exited evil_rosalind 
d52fef570d6e ubuntu:latest /bin/bash 1h ago  Exited prickly_morse 
eb424f5a9d3f ubuntu:latest /bin/bash 20h ago Exited OD-name-example
$ docker start -ai OD-pythonserver-4
Serving HTTP on 0.0.0.0 port 8000 
```
选项的含义与`docker run`命令相同。
## 停止命令
`stop`命令通过发送`SIGTERM`信号来停止正在运行的容器，然后在宽限期后发送`SIGKILL`信号:
### 注
`SIGTERM`和`SIGKILL`是 Unix 信号。信号是一种进程间通信的形式，用于 Unix、类 Unix 和其他符合 POSIX 的操作系统。`SIGTERM`发出终止进程的信号。`SIGKILL`信号用于强行杀死一个进程。
```
docker run -dit --name OD-stop-example ubuntu /bin/bash
$ docker ps
CONTAINER ID IMAGE         COMMAND   CREATED  STATUS    NAMES
679ece6f2a11 ubuntu:latest /bin/bash 5h ago   Up 3s   OD-stop-example
$ docker stop OD-stop-example
OD-stop-example
$ docker ps
CONTAINER ID IMAGE         COMMAND   CREATED  STATUS    NAMES
```
您也可以指定`-t`标志或`--time`标志，可以设置等待时间。
## 重启命令
`restart`命令重启正在运行的容器:
```
$ docker run -dit --name OD-restart-example ubuntu /bin/bash
$ sleep 15s # Suspends execution for 15 seconds
$ docker ps
CONTAINER ID IMAGE         COMMAND   STATUS    NAMES
cc5d0ae0b599 ubuntu:latest /bin/bash Up 20s    OD-restart-example
$ docker restart OD-restart-example
$ docker ps
CONTAINER ID IMAGE         COMMAND   STATUS    NAMES
cc5d0ae0b599 ubuntu:latest /bin/bash Up 2s    OD-restart-example
```
如果观察状态，您会注意到容器已重新启动。
## RM 命令
`rm`命令移除 Docker 容器:
```
$ Docker ps -a # Lists containers including stopped ones
CONTAINER ID  IMAGE  COMMAND   CREATED  STATUS NAMES
cc5d0ae0b599  ubuntu /bin/bash 6h ago   Exited OD-restart-example 
679ece6f2a11  ubuntu /bin/bash 7h ago   Exited OD-stop-example 
e3c4b6b39cff  ubuntu /bin/bash 9h ago   Exited OD-name-example 
```
我们似乎在冒险之后剩下了很多容器。让我们删除其中一个:
```
$ dockerDocker rm OD-restart-example
cc5d0ae0b599
```
我们可以也可以组合两个 Docker 命令。让我们将打印`docker ps -a`中容器的标识参数的`docker ps -a -q`命令和`docker rm`命令结合起来，一次性移除所有容器:
```
$ docker rm $(docker ps -a -q)
679ece6f2a11
e3c4b6b39cff
$ docker ps -a
CONTAINER ID    IMAGE    COMMAND     CREATED    STATUS      NAMES
```
这首先评估`docker ps -a -q`命令，输出由`docker rm`命令使用。
## PS 命令
`ps`命令用于列出容器。它的使用方式如下:
```