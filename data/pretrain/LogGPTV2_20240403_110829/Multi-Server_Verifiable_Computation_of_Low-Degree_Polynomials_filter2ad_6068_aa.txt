# Title: Multi-Server Verifiable Computation of Low-Degree Polynomials

**Authors:**
- Liang Feng Zhang, ShanghaiTech University
- Huaxiong Wang, Nanyang Technological University

**Conference:**
2022 IEEE Symposium on Security and Privacy (SP)

**Abstract:**
The inherent conflict between input privacy and computational efficiency in single-server non-interactive verifiable computation (NIVC) motivates the exploration of multi-server models. While existing multi-server NIVC schemes offer meaningful improvements, they either necessitate server-to-server communication or fail to protect the client's data. Designing a multi-server NIVC that ensures both input privacy and non-communicating servers remains an open challenge. In this paper, we introduce a multi-server verifiable computation (MSVC) model where the client secret-shares its input \( x \) among non-communicating servers. Each server independently computes a function \( F \) to produce a partial result, and the client reconstructs \( F(x) \) from these partial results. We present five MSVC schemes for outsourcing low-degree polynomials, thereby addressing the open question for such functions. Our schemes are \( t \)-private, ensuring that any \( t \) servers gain no information about \( x \), and \( t \)-secure, preventing any \( t \) servers from convincing the client to accept incorrect results. The privacy and security guarantees can be either information-theoretic or computational. Compared to existing schemes, our servers achieve at least two orders of magnitude faster performance.

## 1. Introduction

Outsourcing computation has gained significant traction due to the widespread adoption of cloud computing and the proliferation of mobile devices. This paradigm allows resource-constrained devices to offload computationally intensive tasks to powerful cloud servers in a scalable, pay-per-use manner. The outsourced computations are typically modeled as evaluating a function \( F \) at an input \( x \). Two primary security concerns arise in this context:

1. **Computation Integrity:** Servers may be malicious or malfunctioning, leading to incorrect results.
2. **Data Confidentiality:** Servers may be curious about the clientâ€™s data (e.g., input \( x \)) and misuse it.

In [89], these issues are referred to as the computation integrity problem and the data confidentiality problem, respectively.

### 1.1 Historical Context

Solutions to the computation integrity problem date back to the interactive proofs introduced by [6] and [56], and the efficient arguments proposed by [69] and [70]. Goldwasser et al. [57] developed interactive proofs suitable for outsourcing the computation of log-space uniform boolean circuits. For circuits of depth \( d \) and input length \( n \), the prover runs in time \( \text{poly}(n) \), while the verifier operates in time \( (n + d) \cdot \text{polylog}(n) \) and space \( O(\log n) \). They also explored non-interactive or single-round schemes, where the server sends at most one message to the client, and extended their results to a more restricted class of functions.

Recent research has increasingly turned to multi-server models to address these challenges. Such schemes are particularly appealing because the client can outsource computations without maintaining active connections to the servers, and the results can be returned via email with a fully documented "certificate" of correctness.

Since [57], theoretical work in the field of outsourcing computation has focused on non-interactive schemes for ensuring computation integrity, resulting in various models [19], [30], [51], [52], [59]. We are particularly interested in the non-interactive verifiable computation (NIVC) model proposed by Gennaro et al. [51]. This single-server model consists of two phases: an offline phase, where the client sends an encoding of \( F \) to the server; and an online phase, where the client sends an encoding of \( x \) to the server, the server responds with an encoding of \( F(x) \), and the client verifies and reconstructs \( F(x) \). The client's offline computation is performed once and can be amortized over multiple evaluations of \( F \). The client's online computation should be significantly faster than the native computation of \( F(x) \), and the server's computation should be as efficient as possible.

### 1.2 Single-Server NIVC Models

There are two main lines of research in single-server NIVC:

1. **Generic Functions:** Schemes like [4], [38], and [51] focus on outsourcing generic functions, such as boolean circuits. These schemes provide both computation integrity and input privacy but rely on expensive cryptographic primitives like fully homomorphic encryption (FHE) and garbled circuits (GCs), making them impractical for many applications.
2. **Efficient Schemes:** Schemes like [17], [46], [48], [49], and [80] aim for higher efficiency by avoiding FHE and GCs, but at the cost of sacrificing input privacy or the generality of the functions.

Achieving both input privacy and high efficiency in single-server NIVC for generic functions is challenging. Ananth et al. [2] and Schoenmakers et al. [81] argue that some form of FHE is inherently required to keep \( x \) private. Even for specific functions, the client may need to send a somewhat homomorphic encryption (SHE) ciphertext of \( x \) to the server, which then performs many expensive public-key operations to generate an encoding of \( F(x) \).

### 1.3 Multi-Server NIVC Models

To address the conflicts between input privacy and efficiency, researchers have explored multi-server models. Canetti et al. [27], [28] constructed multi-server schemes where the client's input is always sent in plaintext. Ananth et al. [2] developed multi-server schemes for outsourcing boolean circuits, using GCs to hide the client's input. These schemes require sequential communication, with each server passing messages to the next. Schoenmakers et al. [81] distributed Pinocchio [79] across three or more servers, achieving information-theoretic privacy for the client's input. In Trinocchio [81], the servers use a multi-party computation (MPC) protocol to evaluate \( F \), requiring server-to-server communication and relying on non-falsifiable assumptions [54].

Thus, current multi-server NIVC schemes either provide no input privacy (e.g., [27], [28]) or require server-to-server communication (e.g., [2], [81]). In this paper, we focus on efficient multi-server schemes that achieve input privacy with non-communicating servers.

### 1.4 Importance of Input Privacy and Non-Communication

Input privacy is crucial, allowing clients to outsource computations even if the input is sensitive, without the servers learning any partial information. Eliminating server-to-server communication is also important, as it avoids the need for complex coordination and enhances the overall system efficiency, especially when servers belong to competing cloud services. In multi-server NIVC, the privacy of the client's input often relies on the assumption that servers do not collude. Requiring server-to-server communication increases the risk of collusion. Without such communication, the client can maintain the anonymity of the leased servers, reducing potential threats. Ananth et al. [2] posed an open question about constructing schemes where the client sends a single message to each server and receives a single message from each server, without any server-to-server communication.

### 1.5 Our Contributions

In this paper, we define a multi-server verifiable computation (MSVC) model where the client secret-shares its input \( x \) among non-communicating servers. Each server independently computes a function \( F \) to produce a partial result, and the client reconstructs \( F(x) \) from these partial results. We construct five MSVC schemes for outsourcing low-degree polynomials, thus answering the open question for such polynomials. Our schemes are \( t \)-private, ensuring that any \( t \) servers gain no information about \( x \), and \( t \)-secure, preventing any \( t \) servers from convincing the client to accept incorrect results. The privacy and security guarantees can be either information-theoretic or computational. Compared to existing schemes, our servers achieve at least two orders of magnitude faster performance.