title:Multi-Server Verifiable Computation of Low-Degree Polynomials
author:Liang Feng Zhang and
Huaxiong Wang
2022 IEEE Symposium on Security and Privacy (SP)
Multi-Server Verifiable Computation of Low-Degree
Polynomials
Liang Feng Zhang
ShanghaiTech University
Huaxiong Wang
Nanyang Technological University
2
9
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Abstract—The conflicts between input privacy and efficiency
in single-server non-interactive verifiable computation (NIVC)
makes it interesting to consider the multi-server models of
NIVC. Although the existing multi-server NIVC schemes provide
meaningful
improvements, they either require the servers to
communicate or leave the client’s data unprotected. It has been
an open problem to design multi-server NIVC with both input
privacy and non-communicating servers. In this paper we define
a multi-server verifiable computation (MSVC) model where
the client secret-shares its input x among non-communicating
servers, each server locally computes a function F to get a partial
result, and finally the client reconstructs F (x) from all partial
results. We construct five MSVC schemes for outsourcing low-
degree polynomials and thus answer the open question for such
polynomials. Our schemes are t-private such that any t servers
learn no information about x. Our schemes are t-secure such that
any t servers cannot persuade the client to output wrong results.
The privacy and security can be either information-theoretic or
computational. Comparing with the existing schemes, our servers
can be at least two orders faster.
I. INTRODUCTION
Outsourcing computation has been very popular in recent
years due to the prevalence of cloud computing and the
proliferation of mobile devices. It allows computationally
weak devices to offload heavy computations to powerful cloud
servers in a scalable pay-per-use manner. The outsourced
computations are usually modeled as evaluating a function F
at an input x. There are two fundamental security concerns
in outsourcing computation: (1) The servers may be malicious
or malfunctioning and return incorrect results. (2) The servers
may be curious about the client’s data (e.g., input x) and
abuse it. In [89], the problems of verifying the correctness
of the server’s computation and protecting the client’s data
have been termed as the computation integrity problem and
the data confidentiality problem, respectively.
In the theoretical community, solutions to the computation
integrity problem date back to as early as the interactive
proofs of [6], [56] and the efficient arguments of [69], [70].
Goldwasser et al. [57] constructed interactive proofs that
are suitable for outsourcing the computation of log-space
uniform boolean circuits. In particular, for circuits of depth
d and input
the prover is efficient and runs in
time poly(n) and the verifier is super-efficient and runs in
time (n + d) · polylog(n) and space O(log n). They found
it very interesting to outsource computations with a non-
interactive or single-round scheme, where the server sends
at most one message to the client, and extended their result
length n,
A number of recent works have resorted to multiple servers,
© 2022, Liang Feng Zhang. Under license to IEEE.
DOI 10.1109/SP46214.2022.00087
596
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
to a non-interactive argument for a more restricted class of
functions. Such schemes are particularly interesting because
the client can farm out computations without preserving active
connections to servers and later the result can be returned via
email with a fully written down “certificate” of correctness.
Since [57], theoretical research in the field of outsourcing
computation has largely focused on non-interactive schemes
for ensuring computation integrity and results in many differ-
ent models [19], [30], [51], [52], [59]. We are mostly interested
in the non-interactive verifiable computation (NIVC) model
of Gennaro et al. [51]. This single-server model consists of
two phases [4]: an offline phase, where the client sends an
encoding of F to the server; and an online phase, where the
client sends an encoding of x to the server, the server replies
with an encoding of F (x), and the client performs verification
and reconstructs F (x). The client’s offline computation is
executed only once and the cost can be amortized over many
evaluations of F . The client’s online computation should be
substantially faster than the native computation of F (x). The
server’s computation should be as fast as possible.
There are two different lines in the study of single-server
NIVC. One of the lines [4], [38], [51] focuses on the outsourc-
ing of generic functions such as any boolean circuits. These
schemes provide not only computation integrity but also input
privacy. However, the client/server’s computations in these
schemes are quite impractical due to their dependance on the
expensive cryptographic primitives such as fully homomorphic
encryptions (FHEs) and garbled circuits (GCs). The other line
[17], [46], [48], [49], [80] focuses on more efficient schemes
that are free of FHEs and GCs, at the price of sacrificing input
privacy or the generality of functions.
In a single-server NIVC for outsourcing generic functions,
it is quite challenging to achieve both input privacy and high
efficiency. In fact, both Ananth et al. [2] and Schoenmakers et
al. [81] believe that some form of FHE is inherently required
by such schemes: in order to keep x private, the encoding of
x in single-server NIVC can be viewed as an “encryption”
of x and the encoding of F (x), which is computed with
F and the “encryption” of x, must allow the recovery of
F (x). The question is still challenging even if we consider the
outsourcing of specific functions. The client may have to send
an SHE (somewhat homomorphic encryption) ciphertext of x
to the server and the server has to perform many expensive
public-key operations to generate an encoding of F (x).
in order to resolve the conflicts between input privacy and
efficiency in NIVC. Canetti et al. [27], [28] constructed multi-
server schemes where the client’s input is always given to
the server in clear. Ananth et. al. [2] constructed multi-server
schemes for outsourcing boolean circuits, where the client’s
input is hidden with the expensive primitive of GCs. Their
schemes require sequential communications: the client sends
a message to the first server; from the second server on, each
server receives a message from the previous server and sends a
message to the next server, and the last server sends a message
to the client. By distributing Pinocchio [79] to three (or more)
servers, Schoenmakers et al. [81] constructed schemes for
outsourcing any boolean/arithmetic circuits, where the client’s
input is information-theoretically private from each server. In
Trinocchio [81], the servers run an MPC protocol to evaluate
F and the MPC requires the servers to communicate with each
other; the security relies on non-falsifiable assumptions [54].
Therefore, if we restrict our attention to NIVC schemes that
use multiple servers, the state of the art offers protocols that
either provide no input privacy (e.g. [27], [28]) or require the
servers to communicate with each other (e.g. [2], [81]). In this
paper, we are interested in efficient multi-server schemes that
achieve input privacy with non-communicating servers.
Input privacy is extremely important and enables the client
to save time by outsourcing computations, even if the input
is sensitive [81] and the servers are not expected to learn any
partial information. Free of server communications is also an
important feature, from which both the cloud servers and the
client may benefit. Communications among servers require the
servers to operate sequentially. Very complex coordinations
among servers may be needed and therefore significantly
diminish the efficiency of the entire system, especially when
the servers belong to competing cloud services. In multi-server
NIVC schemes, the privacy of the client’s input usually relies
on the assumption that servers do not collude with each other
(e.g., [81]). Requiring servers to communicate means that each
server may know which other servers are working on the same
computation and facilitate them to collude. Without server
communications, it may be possible for the client to keep
the leased servers anonymous and thus reduce the potential
threat. In fact, Ananth et al. [2] put forward a very interesting
open question of constructing schemes where the client sends
a single message to each of the servers and receives a single
message from each of the servers, and can obtain the correct
result from this (i.e., a model in which the servers do not
communicate with each other at all).
A. Our Contributions