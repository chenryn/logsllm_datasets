数据库可靠性工程
Laine Campbell, Fastly
这是 Laine Campbell 和 Charity Majors 合编的数据库可靠性工程 的摘录（O'Reilly，2017）。
  在本章中，我将数据库可靠性工程作为SRE的子集来讨论。数据库层是风险承受能力最小的层，因此是通过可靠性工程文化实现增长的最大机会之一。传统上，DBA 从事制作筒仓和雪花的业务。他们的工具不同，硬件不同，语言也不同。DBA 在编写 SQL，系统工程师在编写 Perl，软件工程师在编写C++，网络开发人员正在编写 PHP，网络工程师正在把玩他们自己的完美设备。只有一半的团队会尝试使用版本控制系统，而且他们显然没有在别人的地盘上说话的权利。那就像进入一个外国的疆界。
这种模式能够证明自己有效和可持续的天数已经不多了。本章是一对数据库工程眼镜中可靠性工程的视图。我不打算在这里涵盖一切可能的事情。相反，我通过 SRE 体验的镜头来描述我所看到的重要内容。然后，您可以将此框架应用于多个数据存储、体系结构和组织。数据库可靠性工程师的指导原则
 我花了相当长的时间考虑可靠性工程范式如何适应数据库工程领域。我问自己的第一个问题是，数据库专业新迭代背后的原则是什么？如果人们对待数据存储设计和管理的方式正在改变，则需要为这个新世界的基础定义。因此，以下是数据库可靠性工程师（DBRE）的指导原则。
保护数据
 传统上，这一直是数据库专业人员的基本课题，当然现在仍然是。通过以下途径尝试了普遍接受的方法：
软件与数据库工程师之间严格分离职责
严格的备份和恢复流程，定期测试
监管良好的安全程序，定期审核
昂贵的数据库软件，具有强大的耐用性保证
底层昂贵的存储，所有组件的冗余
对更改和管理任务的广泛控制
对于具有协作文化的团队来说，严格职责分离不仅会带来负担，而且会限制创新的速度。有办法建立安全网，减少在不影响可靠性的情况下职责分离的需要。
数据保护的新方法可能更像：
跨职能团队共享的数据的责任数据保护的新方法可能更像：
跨职能团队共享的数据的责任
DBRE 赋能的标准化和自动化备份和恢复流程
DBRE 和安全团队赋能的标准化安全策略和程序
通过自动调配和部署实施的所有策略
数据需求决定了数据存储，耐久性需求评估成为决策过程的一部分
依靠自动化流程、冗余和精心操作的程序，而不是昂贵、复杂的硬件
纳入部署和基础架构自动化的更改，重点是测试、回退和影响缓解
自助缩放服务
  有才华的 DBRE 是一种罕见的人才。大多数公司无法证明拥有（或保留）一两个这样的专家。因此，我们必须创造尽可能多的价值，这来自为团队创建自助服务平台。通过设置标准和提供工具，团队能够部署新服务并以所需的速度进行适当的更改，而无需依赖过度操劳的数据库工程师。
以下是这些类型的自助服务方法的一些示例：
通过提供正确的插件，确保从数据存储中收集适当的指标
构建可部署新数据存储的备份和恢复实用程序构建可部署新数据存储的备份和恢复实用程序
为已批准用于操作且可供团队部署的数据存储定义参考体系结构和配置
使用安全性为数据存储部署定义标准
构建安全部署方法和测试脚本，以便应用数据库迁移
换句话说，有效的 DBRE 功能是赋予他人权力并引导他们，而不是充当看门人。
数据库不特殊
  数据库通常是组织基础结构的关键组件。在它们需要和从失败和故障中恢复的复杂性方面，它们往往产生最大的风险。我们必须努力实现标准化、自动化和复原力。关键是数据库群集的组件并不神圣。我们应该能够丢失任何组件，并有效地替换它，而不必担心。玻璃房间的易碎数据存储应该（而且可能）成为过去。
宠物与家畜的比喻经常被用来显示特殊的雪花和商业服务成分之间的区别。原始归因归于微软杰出工程师 Bill Baker。宠物服务器是一个你需要喂养、照顾，并在生病时帮它回到健康的服务器。它有一个名字（在 2000 年的 Travelocity），我们的服务器名为辛普森。我们运行 Oracle 的两台 SGI 服务器名为帕蒂和塞尔玛。我自己花了太多时间在夜间维护这些服务器。维护这些机器真的很费心！家畜服务器只有编号，没有名字。你不会花时间自定义服务器，更不会花时间登录到各个主机。当它们有生病的迹象时，你把它们从群中移除。当然，如果你看到异常多的疾病，你应该把那些被宰杀的家畜留待法医鉴定。但我不会再打这个比喻了。
数据存储是“宠物”的最后一些保留。毕竟，它们持有“数据”，根本不能被视为寿命短且完全标准化的可替换家畜。报告副本的特殊复制规则如何？主数据库冗余备用数据库的不同配置如何？
为什么需要指导原则？
每天在我们的工作中，我们发现自己面临着许多令人难以置信的决定。指导原则减少了这些决策的认知开销，帮助我们在选择上保持一致。随着时间推移，不断引入的新决策都有望有助于建立一种连贯的文化。 
数据库可靠性工程文化
 我觉得真正需要强调可靠性不仅在 DBRE 的职称，但在他们所做的一切，是因为数据库先天是拒绝风险和混乱的。现在，我们日常工作中很多司空见惯的事情都来自于计算领域的创新，在这些领域，风险是可以容忍的。现在，这个潮流已经更加强大，而且由组织最宝贵的资源之一，数据，推动数据库也开始迎接创新。使持久数据存储成为可靠性工程的一部分，这方面大部分工作仍处于早期阶段。当数据发挥作用时，组织只能容忍少量的风险。因此，我们如何将这些概念引入组织的其他部分，或我们如何回应其他人这样做，成为我们实际的课题和工作职能。拥有远见和意图是不够的；我们必须同时找到办法，以成功的方式介绍这种趋势。
数据库可靠性文化是什么样子的，如何推广？当人们想到的可靠性文化不是特定于数据库世界时，会想到许多项目，包括：
无可指责的故障报告
自动化重复性工作
结构化和理性的决策
这一切都是有道理的，运营或 SRE 组织中的每个人都应该不断为此而努力。在本章中，我将介绍 SRE 可以重点关注的两个特定的数据库工程智能，以确保其数据库基础结构和支持组织获得可靠性培养的好处。这些功能包括数据完整性和持久性以及持续交付（CD）。
虽然这些智能只是 DBRE 在 SRE 领域必须完成的工作的一部分，但它们包含了对运维和设计的深入见解。可恢复性
  让我们面对现实吧。每个人都认为备份和恢复是枯燥乏味的。他们认为它是辛劳的代名词。它通常被归为初级工程师、外部承包商和团队不愿打交道的第三方工具。我以前处理过一些非常可怕的备份软件。相信我，我同情这些人。
不过，这是运维工具包中最重要的流程之一。让你宝贵的数据在节点之间、跨数据中心的流动，并最终进入归档中的，是企业最珍贵的财产，也就是数据。我们强烈建议你将其视为 VIP，而不是将其归为二等公民。每个人都应该不仅了解恢复目标，而且应非常熟悉操作和监控流程。许多 DevOps 哲学建议每个人都应该有机会编写代码并将其推送到生产环境中。我们建议每个工程师至少应参与一次关键数据的恢复过程。
我们创建和存储数据的副本（也称为备份和存档）作为实现实际需求的方法：恢复。有时，这种恢复是美好而悠闲的事情，例如为审计而构造环境或构建备用环境。但更常见的是，恢复需要快速替换失败的节点或向现有群集补充计算容量。今天，在分布式环境中，我们在备份和恢复领域面临着新的挑战。现在，与以前一样，大多数本地数据集的分布大小都合理，最多可达几 TB。区别在于，这些本地数据集只是较大分布式数据集的一小部分。恢复节点是一项相对易于管理的任务，但在整个群集中保持状态将变得更加困难。
恢复注意事项
   在首次评估有效战略时，应该回顾一下服务级别目标 （SLO）。具体说来，你需要考虑可用性和耐久性指标。你选择的任何策略都要求自己能够在设置的运行时约束范围内恢复数据。需要足够快地备份数据，以确保满足必要的持久性参数。如果每天备份，并且备份之间的事务日志保留在节点级存储上，则很可能在下一次备份之前丢失这些事务。
此外，你需要考虑数据集在整体生态系统中如何工作。例如，订单可能存储在关系系统中，其中所有内容都提交在事务中，因此很容易根据数据库中的其他数据进行恢复。但是，在完成订单后，工作流可能通过存储在队列系统或键值存储中的事件触发。这些系统可能属于最终一致系统，甚至可能存储在易失环境中，并依赖于关系系统作为可参考或可恢复的基础。那么在恢复时，你如何对待这些工作流？如果你所处的环境有快速开发，你可能还会发现存储在备份中的数据是由应用程序的不同版本编写和利用的，而不是还原完成后运行的应用程序版本。应用程序将如何与较旧的数据进行交互？希望你的数据是版本化的，但最好提前意识到这一点，并为这种可能性做好准备。否则，应用程序可能会从逻辑上损坏该数据，并造成更大的问题。
在规划数据恢复时，必须考虑其中每个变量以及无法规划的许多其他变量。你根本无法为每一种可能性做好准备。但这是一项关键的服务。数据可恢复性是 DBRE 最重要的职责之一。因此，你的数据可恢复性计划必须能够尽可能广泛，并考虑到尽可能多的潜在问题。
恢复策略的剖析
 我之所以说恢复策略，而不是备份策略，是有原因的。数据恢复是我们执行备份的全部原因。备份只是一种最终的手段，因此取决于真正的要求：参数内的恢复。简单的问题“数据库是否已备份？”只是一个入门问题，理想的回答“是的，多种方式，具体取决于恢复方案”。一个简单的已备份是天真的期望，只会助长一种不负责任且危险的虚假安全感。有效的数据库恢复策略不仅使用最有效的策略处理多个方案，还包括检测数据丢失/损坏、恢复测试和恢复验证。
构建基块 1：检测
  及早发现潜在的数据丢失或损坏至关重要。这意味着，当发现需要备份时，备份甚至可能老化。因此，检测必须成为所有工程的重中之重。除了围绕数据丢失或损坏建立早期检测之外，确保尽可能长的窗口期，尽早检测失败并进行恢复也至关重要。让我们来看看讨论的不同故障场景，并确定一些实际的检测方法和延长恢复窗口的方法。