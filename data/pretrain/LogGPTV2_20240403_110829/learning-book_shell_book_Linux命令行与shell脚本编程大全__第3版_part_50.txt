295
# testing s* and $8
echo
count=1
for paran in *s**
do
echo *\s* Paraneter #Scount = Sparam*
done
[  + qumoos 1s=qumoo
echo
count=1
for param in *sg*
do
echo *^s9 Paraneter #Scount = $param*
[ + qumoos 1s=qumoo
done
$
S./test12.sh rich barbara katie jessica
Ω*Paraneter #1= rich barbara katie jessica
$9 Paraneter #2 = barbara
$θ Paraneter #1 = rich
$9 Paraneter #3 = katie
$9 Paraneter #4 = jesslca
现在清楚多了。通过使用for命令遍历这两个特殊变量，你能看到它们是如何不同地处理命
令行参数的。$*变量会将所有参数当成单个参数。而s9变量会单独处理每个参数。这是遍历命
令行参数的一个绝妙方法。
14.3移动变量
bash shell工具箱中另一件工具是shift命令。bash shell的shift命令能够用来操作命令行参
数。跟字面上的意思一样，shift命令会根据它们的相对位置来移动命令行参数。
在使用shift命令时，默认情况下它会将每个参数变量向左移动一个位置。所以，变量s3
的值会移到s2中，变量s2的值会移到s1中，而变量s1的值则会被删除（注意，变量s0的值，也
就是程序名，不会改变）。
这是遍历命令行参数的另一个好方法，尤其是在你不知道到底有多少参数时。你可以只操作
第一个参数，移动参数，然后继续操作第一个参数。
这里有个例子来解释它是如何工作的。
1/bin/ba.sh
S cat test13.sh
 demonstrating the shift command
4
---
## Page 311
296
第14章处理用户输入
echo
[s. u-] Tq
count=1
dlo
echo *Parameter #$count = $1*
count=S[ $count + 1 ]
shlft
Gone
S./test13.sh rich barbara katie Jessica
Paraneter 1 = r1ch
Paraneter #2 = barbara
Paraneter #3 = katie
Paraneter 14 = jessica
这个脚本通过测试第一个参数值的长度执行了一个while循环。当第一个参数的长度为零
时，循环结束。测试完第一个参数后，shift命令会将所有参数的位置移动一个位置。
窍门使用shiEt命令的时候要小心。如果某个参数被移出，它的值就被丢弃了，无法再恢复。
另外，你也可以一次性移动多个位置，只需要给shift命令提供一个参数，指明要移动的位
置数就行了。
 cat test14.sh
 denonstrating a multi-position shift
1/bin/bash
echo
+
echo *The original parametersi $**
echo *Here′s the nev first paraneter: $1*
shift 2
./test14.sh 1 2 3 4 5
The original parameters1 1 2 3 4 5
Here*s the new first paraneter: 3
通过使用shift命令的参数，就可以轻松地跳过不需要的参数。
14.4处理选项
如果你认真读过本书前面的所有内容，应该就见过了一些同时提供了参数和选项的bash命
令。选项是跟在单破折线后面的单个字母，它能改变命令的行为。本节将会介绍3种在脚本中处
理选项的方法。
---
## Page 312
14.4处理选项
67
14.4.1查找选项
表面上看，命令行选项也没什么特殊的。在命令行上，它们紧跟在脚本名之后，就跟命令行
参数一样。实际上，如果愿意，你可以像处理命令行参数一样处理命令行选项。
1.处理简单选项
在前面的test13.sh脚本中.你看到了如何使用shift命令来依次处理脚本程序携带的命令
行参数。你也可以用同样的方法来处理命令行选项。
在提取每个单独参数时，用case语句（参见第12章）来判断某个参数是否为选项。
S cat test15.sh
ueeq/uTα/i#
# extracting comnand llne options aa paraneters
[-。 u-]m
echo
do
case *$1* in
,uotdo e- aqa pumog。 otos (e-
uotado q- es punoa. ouos (q-
：
uotado o- aqpumog。 oos (o-
▪lecho *$1 la not an option* 
F 
shift
e.8ac
done
S -/test15.ab -a -b -c -d
Found the -a option
Found the -b option
Found the =c option
-d La not an option
case语句会检查每个参数是不是有效选项。如果是的话，就运行对应case语句中的命令。
不管选项按什么顺序出现在命令行上，这种方法都适用。
S./test15.sb -d =c -a
Found the -c option
d la not an option
Found the -a option
case语句在命令行参数中找到一个选项，就处理一个选项。如果命令行上还提供了其他参
数，你可以在case语句的通用情况处理部分中处理。
2.分离参数和选项
你会经常遇到想在shel脚本中同时使用选项和参数的情况。Linux中处理这个问题的标准方
式是用特殊字符来将二者分开，该字符会告诉脚本何时选项结束以及普通参数何时开始。
---
## Page 313
298
第14章处理用户输入
对Linux来说，这个特殊字符是双破折线（--）。shell会用双破折线来表明选项列表结束。在
双破折线之后，脚本就可以放心地将剩下的命令行参数当作参数，而不是选项来处理了。
要检查双破折线，只要在case语句中加一项就行了。
S cat test16.sh
1/bin/bash
 extracting options and parameters
vhile [ -n *$1* ]
echo
do
case *$1* in
11,uotdo q- aua punoa。 oqoa (q-
[1uoo e- aua punoa. oupa (e-
-c) echo *Found the -c option* 11
--) shift
*) echo *$1 is not an option*1
break 11
shi ft
esac
done
count=1
for param in $e
do
wexeds1qunoos+ sanauexea。oqoa
done
[ T + qunos ]s=quno
$
在遇到双破折线时，脚本用break命令来跳出while循环。由于过早地跳出了循环，我们需
要再加一条shift命令来将双破折线移出参数变量。
对于第一个测试，试试用一组普通的选项和参数来运行这个脚本。
./test16.sh -c -a -b test1 test2 test3
Found the -c option
Found the -a option
Found the -b option
testl is mot an option
test2 is mot an option
test3 is mot an option
结果说明在处理时脚本认为所有的命令行参数都是选项。接下来，进行同样的测试，只是这
次会用双破折线来将命令行上的选项和参数划分开来。
./test16.sh -c -a -b -- test1 test2 test3
Found the -a option
Found the -c option
Found the -b option
Parameter +1: test1
---
## Page 314
14.4处理选项
667
Parameter #2: test2
Parameter #3: test3
当脚本遇到双破折线时，它会停止处理选项，并将剩下的参数都当作命令行参数。
3.处理带值的选项
有些选项会带上一个额外的参数值。在这种情况下，命令行看起来像下面这样。
S ./testing.sh -a test1 -b -c -d test2
当命令行选项要求额外的参数时，脚本必须能检测到并正确处理。下面是如何处理的
例子。
S cat test17.sh
# extracting command llne optiong and values
#1/bin/ba.sh
whi1e [ -n *$1* ]
echo
dg
:,uodo e- a pumog。 oqos (e-
-$=wexed (q-
echo *Found the -b optlon, vith paraneter value Sparan*
1,0o 3- 8[a pmog。ooe
shlft =
c)
-
shlft
*)echo *S1 1a not an optlon*; :
break 
esac
shift
done
count=1
for paran In *sa*
do
uexedis :aumoosaxeseeered。 ou29
done
[ +qunoos 1s=umoo
S ./test17.ab -a -b test1 -d
Found the -a option
Found the b option, with parameter value teat1
-d 1a not an option
在这个例子中，case语句定义了三个它要处理的选项。-b选项还需要一个额外的参数值。
由于要处理的参数是S1，额外的参数值就应该位于$2（因为所有的参数在处理完之后都会被移
出）。只要将参数值从$2变量中提取出来就可以了。当然，因为这个选项占用了两个参数位，所
以你还需要使用shift命令多移动一个位置。
只用这些基本的特性，整个过程就能正常工作，不管按什么顺序放置选项（但要记住包含每
14
---
## Page 315
300
第14章处理用户输入
个选项相应的选项参数）。
$./test17.sh -b test1 -a -d
Found the -b option, vith paraneter value test1
Fosnd the -a option
-d is not an option
现在shell脚本中已经有了处理命令行选项的基本能力，但还有一些限制。比如，如果你想将
多个选项放进一个参数中时，它就不能工作了。
./test17.sh -ac
-ac is not an option
在Linux中，合并选项是一个很常见的用法，而且如果脚本想要对用户更友好一些，也要给
用户提供这种特性。幸好，有另外一种处理选项的方法能够帮忙。
14.4.2使用getopt命令
getopt命令是一个在处理命令行选项和参数时非常方便的工具。它能够识别命令行参数，
从而在脚本中解析它们时更方便。
1.命令的格式
getopt命令可以接受一系列任意形式的命令行选项和参数，并自动将它们转换成适当的格
式。它的命令格式如下：
getopt optstring paramecers
optstring是这个过程的关键所在。它定义了命令行有效的选项字母，还定义了哪些选项字
母需要参数值。
首先，在optstring中列出你要在脚本中用到的每个命令行选项字母。然后，在每个需要参
数值的选项字母后加一个冒号。getopt命令会基于你定义的optstring解析提供的参数。
窍门getopt命令有一个受高级的版本叫作getopta（注意这是复数形式）。getopts命令会在
本章随后部分讲到。因为这两个命令的拼写几乎一模一样，所以很容易搞混。一定要小
心！
下面是个getopt如何工作的简单例子。
S getopt ab:cd -a -b test1 =cd test2 teat3
qs s -- p- - qse q- -
optstring定义了四个有效选项字母：a、b、c和a。冒号（：）被放在了字母b后面，因为b
选项需要一个参数值。当getopt命令运行时，它会检查提供的参数列表（-a-btest1-cd
test2 test3），并基于提供的optstring进行解析。注意，它会自动将-ca选项分成两个单独
---
## Page 316
14.4处理选项
301
的选项，并插人双破折线来分隔行中的额外参数。
如果指定了一个不在optstring中的选项，默认情况下，getopt命令会产生一条错误消息。
S getopt abicd -a -b test1 -cde test2 test3
getopt: invalid option -- e
-α -b test1 -c -d -- test2 test3
如果想忽略这条错误消息，可以在命令后加-g选项。
S getopt -q abicd -a -b test1 -ode test2 test3
.[qsa. .aa, -- p D- ,sa. q- e-
6
注意，getopt命令选项必须出现在optstring之前。现在应该可以在脚本中使用此命令处
理命令行选项了。
2.在脚本中使用getopt
可以在脚本中使用getopt来格式化脚本所携带的任何命令行选项或参数，但用起来略微复杂。
方法是用getopt命令生成的格式化后的版本来替换已有的命令行选项和参数。用set命令能
够做到。
在第6章中，你就已经见过set命令了。set命令能够处理shell中的各种变量。
set命令的选项之一是双破折线（--），它会将命令行参数替换成set命令的命令行值。
然后，该方法会将原始脚本的命令行参数传给getopt命令，之后再将getopt命令的输出传
给set命令，用getopt格式化后的命令行参数来替换原始的命令行参数，看起来如下所示。
(=e$。 poiqe b- qdoqa6)s -- qas
现在原始的命令行参数变量的值会被getopt命令的输出替换，而getopt已经为我们格式化
好了命令行参数。
利用该方法，现在就可以写出能帮我们处理命令行参数的脚本。
S cat te8t18.sh
1/bin/ba.sh
 Extract command line options & values with getopt
(-e$- poiqe b- qdoqaB) s -- qas
while [ -n *$1* ]
echo
do
case *$1* in
[f,uotqdo e- au puno. oqoa (e-