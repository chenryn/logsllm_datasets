often relies on the fairness assumption that each process,
when repeatedly offered the possibility to make a decision,
eventually does so. For simplicity, we avoid extending the
framework and prove termination directly on the concrete
models of our reﬁnement tree (Figure 1).
C. Distributed System Models
The system speciﬁcations and reﬁnements described so far
are standard and not speciﬁc to distributed systems. We now
specialize them to the distributed setting. In the rest of the
paper, we assume a ﬁxed set Π of N processes, and adopt the
convention that p and q range over Π, and r over N. In this
section we also assume a set of messages M.
In all our models, the set of states S is the product of local
state sets Sp for each process p, and the computation is struc-
tured into rounds where all processes make their transitions
simultaneously, proceeding to the next round. Hence, these
models are lockstep. Since we derive algorithms by stepwise
reﬁnement, we take the liberty of working with two types of
lockstep models with different communication mechanisms,
which give rise to two abstraction levels and associated views:
(1) global view: lockstep models with direct access to all
processes’ states. These models clearly exhibit the central
ideas underlying the algorithms and simplify reasoning
about them, but implementing such models in a distributed
fashion requires further reﬁnement.
(2) local view: lockstep models with message passing commu-
nication, including the possibility of message loss. Note
that this possibility means that they do not correspond to
synchronous distributed system models with known upper
bounds on message delays. These models can directly
serve as a basis for a distributed implementation.
We specify the ﬁrst type of models directly as event-based
speciﬁcations introduced in Section II-A. Guards can refer to
the state variables of any process. Likewise, a state update may
affect any process. This type of systems is used in all non-leaf
models of the tree in Figure 1.
For
the local view, we adopt
(HO)
model [12], which we use to represent the concrete algorithms,
i.e., the (boxed) leaf models in Figure 1. In this model, in every
round, each process sends a message to every other process,
the Heard-Of
Process HO r
pi
p1
p2
p3
{p1, p2, p3}
{p1, p2}
{p1, p3}
Messages received: μp
{(p1, m1), (p2, m2), (p3, m3)}
r
{(p1, m1), (p2, m2)}
{(p1, m1), (p3, m3)}
Figure 2. An example of ﬁltering by HO sets within a round, for N = 3.
For simplicity, we assume that the process broadcast messages in this round,
i.e., sendr
pi
(spi , ·) = mi
receives messages from a speciﬁed set of processes, and then
performs a local computation step. Hence, the behavior of
process p in round r is speciﬁed by a function sendr
p, a set of
processes HO r
p, called a heard-of set, and a function nextr
p,
which we now explain in turn.
p(q) = sendr
The function sendr
q(sq, p) if q ∈ HO r
p : Sp × Π → M determines the mes-
sages sent by process p to the other processes. For uniformity,
we assume that p sends a message to every other process. If
nothing needs to be sent, p sends some predeﬁned dummy
message from M. The messages received by process p in
round r are described by a partial function μr
p : Π (cid:2) M
deﬁned as follows: μr
p and
is undeﬁned otherwise (sq is the projection of the global
system state s to process q’s local state). This means that p
receives only the messages from the processes in the heard-of
set HO r
p, while the other messages are lost. Figure 2 gives
an example. This ﬁltering of messages captures various kinds
of failures, including link failures and timeouts. Importantly,
it also captures process failures, removing the need for an
explicit notion of such failures in the HO model. The function
p : Sp × (Π (cid:2) M ) → 2Sp takes process p’s state sp
nextr
and the messages μr
p that p receives in round r and returns
a set of states nextr
p(sp, μr
p). The successor state is chosen
non-deterministically from this set. This is performed simulta-
neously for all processes and yields a new global system state
(cid:2) for the next round. This determines the transition system
s
semantics of heard-of models. Since each transition includes
an instantaneous exchange of messages, this semantics does
not require an explicit representation of the network. This
greatly simpliﬁes reasoning about these models compared to
an asynchronous model.
semantics of
Reality, of course, does not proceed in lockstep. Hence,
there is a second, asynchronous
the HO
model [11]. Here, each process has its own view of the current
round number. All messages carry the sender’s round number
and are explicitly transmitted over a network. Each process
only accepts messages carrying its round number. Hence,
rounds are communication-closed. A process receives only the
messages from processes in its HO set. Once it has received
all such messages, it can take a nextr
p transition to move on
to the next round. Each process does this independently. This
asynchronous semantics thus closely corresponds to the real
world, where the sequence of HO sets is, however, generated
dynamically, depending on when the processes decide to move
on to the next round.
The theorem of [11] tells us that a certain class of so-called
local properties, when proved under the lockstep semantics
also hold in the asynchronous one. We exploit this result
to simplify our correctness proofs, since consensus can be
speciﬁed as a set of such local properties.
D. Assumptions on Failures and the Network
The result in [15] rules out a deterministic solution to the
consensus problem in a completely asynchronous setting when
even just a single process fails. However, there are solutions
provided we are willing to either give up determinacy [3]
or assume partial synchrony, where asynchronous behavior is
interspersed with “good” periods of predictable behavior [14].
Moreover, we also need a bound on the number f of processes
that can fail. This bound measures the fault tolerance of a
distributed algorithm and is usually expressed as a fraction of
the total number of processes N.
In the HO model, the assumptions on network behavior
and fault tolerance are reﬂected in communication predicates.
These predicates play a role similar to failure detectors and
their properties (e.g. eventual perfect accuracy) in the more
traditional asynchronous models [16]. A communication pred-
icate P : (Π × N → 2Π) → bool is a predicate on heard-of
sets, viewed as functions HO : Π× N → 2Π. For example, we
will often use predicates ∃r. Punif (r) and ∀r. Pmaj (r), where:
(Punif )
p = HO r
q,
Punif (r) (cid:3) ∀p, q. HO r
Pmaj (r) (cid:3) ∀p.
(cid:2)
(cid:2)
(cid:2)HO r
(cid:2) >
p
N
2 .
(Pmaj )
The ﬁrst predicate ensures the existence of a round in which
every process sees the same messages; the second one ensures
that every process sees at least N
2 messages in each round.
Given assumptions on the network and failures, an algo-
rithm’s implementation must guarantee both that all processes
eventually advance their rounds and that any sequence of HO
sets generated in this way satisﬁes the appropriate predicate.
For example, the predicate ∃r. Punif (r) can be implemented
(e.g., using timeouts [20]) under the partial synchrony assump-
tion of a global stabilization time, after which no failures occur
and process speeds and message delays respect known bounds.
The predicate ∀r. Pmaj (r) can be implemented by waiting on
messages and using retransmission, assuming fair-lossy links
and f < N
2 . In fact, since the HO model has no notion
of explicit process failure, our assumptions on f (and thus
an algorithm’s fault tolerance) will only be visible implicitly,
through such communication predicates.
III. CONSENSUS PROPERTIES
A system solves the consensus problem if it guarantees:
Uniform agreement No two processes ever decide on two
different values.
some process.
Termination Every process eventually decides on a value.
Non-triviality Any value decided upon has been proposed by
Stability Once a process has made a decision, it never reverts
to an undecided state.
Since non-triviality and stability are usually straightfor-
ward, we do not discuss them further in this paper. The
difﬁcult part is achieving both agreement and termination.
Typically, the termination requirement is limited only to non-
failed processes. As there is no notion of process failure in the
HO model, this is not necessary for our models.
Ideally, we would like to show that our abstract models al-
ready guarantee both termination and agreement, and conclude
394394
from the reﬁnement proof that the implementations inherit
these guarantees. As discussed in Section II-B, this works
for unconditional properties like agreement, but not for ter-
mination, which usually requires fairness assumptions. While
we will consider termination conditions informally for all of
our models, we take the easy way out and prove termination
individually for each concrete algorithm formulated in the
HO model. Fortunately, assuming a suitable communication
predicate such as Punif , this is fairly simple.
IV. VOTING, QUORUMS, AND DEFECTION
All the consensus algorithms we consider share a few basic
ideas. These ideas are captured by our most abstract model,
which we call Voting and describe in this section. To motivate
these ideas, let us ﬁrst consider some other, more obvious
candidate solutions to the consensus problem, and see what
their shortcomings are.
The ﬁrst candidate is to have all processes mutually ex-
change their proposals, and pick the result deterministically,
for example, by taking the smallest proposal. Unfortunately, in
the presence of even a single failure, this scheme can violate
agreement. Any failure could cause two processes to end up
with different sets of proposals, as the example from Figure 2
shows, and thus pick different values.
Another obvious candidate is to have one distinguished pro-
cess, the leader, collect the proposals, pick one, and announce
its decision to the others. Two-phase commit protocols are
based on this idea. This guarantees agreement, but the leader
is a single point of failure for termination. If it fails, there is
no way of proceeding; we do not know if it decided anything,
and whether it announced its decision to the other processes.
Trying again, with a different leader, could violate agreement.
We thus need to revert to a decentralized approach. All
the algorithms we consider achieve this by voting, based on
simple counting. Each process picks a value to vote for, and
announces the vote to all other processes. Processes then count
the votes: if a process sees that some value received an absolute
majority (more than N
2 ) of the votes, it decides on that value.
Clearly, two different values cannot both get a majority of
votes, ensuring agreement. We take a slightly more abstract
view, which will be useful later, and require a value to receive
votes from a quorum of processes instead of a majority. A set
of processes is a quorum if it is a member of a quorum system
QS ⊆ 2Π, where, to ensure agreement, we require:
∀Q, Q
(cid:2) ∈ QS . Q ∩ Q
(cid:2) (cid:10)= ∅.
(Q1)
In contrast to the leader-based approach, voting has no sin-
gle point of failure. However, while it is possible to terminate
and reach a decision even when any non-quorum of processes
fails, there are no guarantees. For example, if all the processes
vote for different values, no value will receive a quorum of
votes. Furthermore, even if a value does receive a quorum
of votes, message loss can prevent processes from learning
this. To address these problems, we iterate voting in multiple
rounds, and allow processes to switch their votes between the
rounds. Switching allows us to eventually form a quorum of
votes for the same value within a round. Voting is iterated until
such a quorum is formed, and until all the processes become
aware of the quorum and decide; to simplify, we assume that
it is iterated forever.
395395
A. Formalizing Voting
We now have the basic ingredients of our most abstract
model. Its system state is represented by the record:
record v_state =
next_round : N
votes : N → (Π (cid:2) V )
decisions : Π (cid:2) V
where V is the set of possible proposed values. The ﬁelds’
names suggest their purpose:
•
•
•
next_round is the next round to be run. It is a natural
number, initially 0.
votes is a (curried) function that, given a round
number and a process, tells us which vote, if any, the
process cast in that round. In other words, votes is
the system’s voting history. Initially, no votes are cast.
decisions records the current decision, if any, of the
given process. Initially, no decisions are made.
We overload the notation for curried functions in the usual
way, writing g(p, q) for g(p)(q). We also treat partial functions
g : A (cid:2) B as total and write g(x) = ⊥ if x /∈ dom(g),
where ⊥ is a distinguished value that is not in any of the
sets we use. In particular, ⊥ /∈ V . Moreover, we write g[S] to
denote the image of a set under g and we deﬁne the range of g
by ran(g) = g[A]. Note that ⊥ ∈ ran(g) unless dom(g) = A.
With this, we formalize the voting principle for decisions
in a single round, where r_decisions and r_votes are partial
functions of type Π (cid:2) V :
d_guard(r_decisions, r_votes) (cid:3) ∀p.∀v ∈ V.
r_decisions(p) = v =⇒ ∃Q ∈ QS. r_votes[Q] = {v} .
A process can decide on any value v that receives a quorum
of votes. We always allow the processes not to decide, even
if such a v exists, to anticipate the possibility of message loss
in the implementations.
The voting principle ensures agreement within a single
round, but the rounds are iterated. This, together with vote
switching, gives us some hope of achieving termination, but
we must now also ensure agreement across the rounds. The
basic property we must establish is that if a value receives
a quorum of votes in some round, then no other value ever
receives a quorum of votes in any other round. Formally:
∀r, r
(cid:2) ∈ QS.
votes(r)[Q] = {v} ∧ votes(r
(cid:2) ∈ V. ∀Q, Q
(cid:2)} =⇒ v = v
(cid:2)] = {v
. ∀v, v
(cid:2))[Q
(cid:2)
(cid:2)
.
This formulation of the property, however, leaves open how
to implement it. We thus replace it by a slightly stronger
and more operational property: forbidding defection. That is,
once a quorum for a value is formed, no process from that