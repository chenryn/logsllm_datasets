.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"     @(#)readlink.2	6.8 (berkeley) 3/10/91
.\"
.\" modified sat jul 24 00:10:21 1993 by rik faith (PI:EMAIL)
.\" modified tue jul  9 23:55:17 1996 by aeb
.\" modified fri jan 24 00:26:00 1997 by aeb
.\" 2011-09-20, guillem jover :
.\"     added text on dynamically allocating buffer + example program
.\"
.th readlink 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
readlink, readlinkat \- read value of a symbolic link
.sh synopsis
.nf
.b #include 
.pp
.bi "ssize_t readlink(const char *restrict " pathname ", char *restrict " buf ,
.bi "                 size_t " bufsiz );
.pp
.br "#include             " "/* definition of " at_* " constants */"
.b #include 
.pp
.bi "ssize_t readlinkat(int " dirfd ", const char *restrict " pathname ,
.bi "                 char *restrict " buf ", size_t " bufsiz );
.pp
.fi
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br readlink ():
.nf
    _xopen_source >= 500 || _posix_c_source >= 200112l
.\"    || _xopen_source && _xopen_source_extended
        || /* glibc = 200809l
    before glibc 2.10:
        _atfile_source
.fi
.sh description
.br readlink ()
places the contents of the symbolic link
.i pathname
in the buffer
.ir buf ,
which has size
.ir bufsiz .
.br readlink ()
does not append a terminating null byte to
.ir buf .
it will (silently) truncate the contents (to a length of
.i bufsiz
characters), in case the buffer is too small to hold all of the contents.
.ss readlinkat()
the
.br readlinkat ()
system call operates in exactly the same way as
.br readlink (),
except for the differences described here.
.pp
if the pathname given in
.i pathname
is relative, then it is interpreted relative to the directory
referred to by the file descriptor
.i dirfd
(rather than relative to the current working directory of
the calling process, as is done by
.br readlink ()
for a relative pathname).
.pp
if
.i pathname
is relative and
.i dirfd
is the special value
.br at_fdcwd ,
then
.i pathname
is interpreted relative to the current working
directory of the calling process (like
.br readlink ()).
.pp
if
.i pathname
is absolute, then
.i dirfd
is ignored.
.pp
since linux 2.6.39,
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
.i pathname
can be an empty string,
in which case the call operates on the symbolic link referred to by
.ir dirfd
(which should have been obtained using
.br open (2)
with the
.b o_path
and
.b o_nofollow
flags).
.pp
see
.br openat (2)
for an explanation of the need for
.br readlinkat ().
.sh return value
on success, these calls return the number of bytes placed in
.ir buf .
(if the returned value equals
.ir bufsiz ,
then truncation may have occurred.)
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eacces
search permission is denied for a component of the path prefix.
(see also
.br path_resolution (7).)
.tp
.b ebadf
.rb ( readlinkat ())
.i pathname
is relative but
.i dirfd
is neither
.b at_fdcwd
nor a valid file descriptor.
.tp
.b efault
.i buf
extends outside the process's allocated address space.
.tp
.b einval
.i bufsiz
is not positive.
.\" at the glibc level, bufsiz is unsigned, so this error can only occur
.\" if bufsiz==0.  however, the in the kernel syscall, bufsiz is signed,
.\" and this error can also occur if bufsiz 
#include 
#include 
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    struct stat sb;
    char *buf;
    ssize_t nbytes, bufsiz;
    if (argc != 2) {
        fprintf(stderr, "usage: %s \en", argv[0]);
        exit(exit_failure);
    }
    if (lstat(argv[1], &sb) == \-1) {
        perror("lstat");
        exit(exit_failure);
    }
    /* add one to the link size, so that we can determine whether
       the buffer returned by readlink() was truncated. */
    bufsiz = sb.st_size + 1;
    /* some magic symlinks under (for example) /proc and /sys
       report \(aqst_size\(aq as zero. in that case, take path_max as
       a "good enough" estimate. */
    if (sb.st_size == 0)
        bufsiz = path_max;
    buf = malloc(bufsiz);
    if (buf == null) {
        perror("malloc");
        exit(exit_failure);
    }
    nbytes = readlink(argv[1], buf, bufsiz);
    if (nbytes == \-1) {
        perror("readlink");
        exit(exit_failure);
    }
    /* print only \(aqnbytes\(aq of \(aqbuf\(aq, as it doesn't contain a terminating
       null byte (\(aq\e0\(aq). */
    printf("\(aq%s\(aq points to \(aq%.*s\(aq\en", argv[1], (int) nbytes, buf);
    /* if the return value was equal to the buffer size, then the
       the link target was larger than expected (perhaps because the
       target was changed between the call to lstat() and the call to
       readlink()). warn the user that the returned target may have
       been truncated. */
    if (nbytes == bufsiz)
        printf("(returned buffer may have been truncated)\en");
    free(buf);
    exit(exit_success);
}
.ee
.sh see also
.br readlink (1),
.br lstat (2),
.br stat (2),
.br symlink (2),
.br realpath (3),
.br path_resolution (7),
.br symlink (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) tom bjorkholm & markus kuhn, 1996
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" 1996-04-01 tom bjorkholm 
.\"            first version written
.\" 1996-04-10 markus kuhn 
.\"            revision
.\"
.th sched_yield 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
sched_yield \- yield the processor
.sh synopsis
.nf
.b #include 
.pp
.b int sched_yield(void);
.fi
.sh description
.br sched_yield ()
causes the calling thread to relinquish the cpu.
the thread is moved to the end of the queue for its static
priority and a new thread gets to run.
.sh return value
on success,
.br sched_yield ()
returns 0.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
in the linux implementation,
.br sched_yield ()
always succeeds.
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
if the calling thread is the only thread in the highest
priority list at that time,
it will continue to run after a call to
.br sched_yield ().
.pp
posix systems on which
.br sched_yield ()
is available define
.b _posix_priority_scheduling
in
.ir  .
.pp
strategic calls to
.br sched_yield ()
can improve performance by giving other threads or processes
a chance to run when (heavily) contended resources (e.g., mutexes)
have been released by the caller.
avoid calling
.br sched_yield ()
unnecessarily or inappropriately
(e.g., when resources needed by other
schedulable threads are still held by the caller),
since doing so will result in unnecessary context switches,
which will degrade system performance.
.pp
.br sched_yield ()
is intended for use with real-time scheduling policies (i.e.,
.br sched_fifo
or
.br sched_rr ).
use of
.br sched_yield ()
with nondeterministic scheduling policies such as
.br sched_other
is unspecified and very likely means your application design is broken.
.sh see also
.br sched (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/cos.3
.so man3/j0.3
.so man3/drand48.3
.so man7/system_data_types.7
.so man2/getrlimit.2
.\" no new programs should use vlimit(3).
.\" getrlimit(2) briefly discusses vlimit(3), so point the user there.
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th wctrans 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
wctrans \- wide-character translation mapping
.sh synopsis
.nf
.b #include 
.pp
.bi "wctrans_t wctrans(const char *" name );
.fi
.sh description
the
.i wctrans_t
type represents a mapping
which can map a wide character to
another wide character.
its nature is implementation-dependent, but the special
value
.ir "(wctrans_t)\ 0"
denotes an invalid mapping.
nonzero
.i wctrans_t
values can be passed to the
.br towctrans (3)
function to actually perform
the wide-character mapping.
.pp
the
.br wctrans ()
function returns a mapping, given by its name.
the set of
valid names depends on the
.b lc_ctype
category of the current locale, but the
following names are valid in all locales.
.pp
.nf
    "tolower" \- realizes the \fbtolower\fp(3) mapping
    "toupper" \- realizes the \fbtoupper\fp(3) mapping
.fi
.sh return value
the
.br wctrans ()
function returns a mapping descriptor if the
.i name
is valid.
otherwise, it returns
.ir "(wctrans_t)\ 0" .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br wctrans ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
the behavior of
.br wctrans ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br towctrans (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.