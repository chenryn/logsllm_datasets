depend on the content of that page, since they execute even
when the presented web page is empty. Moreover, out of the
2,906 extensions that reveal themselves on the right URLs,
1,149 can be tricked into executing on attacker-controlled web
pages. Only for 6 Chrome extensions (but none of the Firefox
extensions) does the attacker potentially have to register a new
domain to host the malicious website on.
Moreover, for 1,149 of the extensions that can be tricked
to execute on an attacker URL, 911 do not depend on the page
content, further easing the life of the attacker.
The numbers between brackets in Table V denotes the
total number of extension users affected by these revealing
extensions. Assuming there are no overlaps between the users
of the revealing extensions, a total of 38,604,160 web users are
vulnerable to the revelation attack through their installed exten-
sions. For the 792,038 affected Firefox users, this means that
they are uniquely identiﬁable through the unique ﬁngerprint
exposed by their revealing extensions. The 37,812,122 affected
Chrome users do not suffer from this issue at this point in time,
but would also be uniquely identiﬁable if the Google Chrome
developers adopt Firefox’s UUID randomization scheme.
Furthermore, as seen in Table VI, out of the 2,906 revealing
extensions, 2,261 have at least one unique path, and 2,819 have
at least one WAR with a unique content. The union of those
sets contains 2,822 extensions, indicating that 97.11% of the
2,906 (97.09% of Chrome and 97.30% of Firefox) revealing
extensions can be uniquely identiﬁed.
V. MITIGATION DESIGN
From the introductory example in Section I, it is clear that
there is a legitimate use-case for being able to probe for WARs.
Extensions that want to be detectable through their WARs,
e.g. ChromeCast, would become dysfunctional if probing for
8
TABLE V: Breakdown of extensions that reveal themselves. The number between brackets indicates the amount of potentially
affected users, assuming no overlaps.
Chromium
Firefox
Either browser
289
49
338
“real” URL
(3,227,947)
(39,780)
(3,267,727)
Content-dependent
“attackerhost” URL
(2,680,324)
217
(75,940)
19
236
(2,756,264)
“buydns” URL
2
0
2
(110)
(0)
(110)
“real” URL
1,281
138
1,419
(17,301,512)
(649,236)
(17,950,748)
Any content
“attackerhost” URL
(14,601,057)
891
(27,082)
16
907
(14,628,139)
“buydns” URL
4
0
4
(1,172)
(0)
(1,172)
Total
(37,812,122)
(792,038)
(38,604,160)
2,684
222
2,906
TABLE VI: Breakdown of revealing Chrome and Firefox
extensions, indicating how many of the extensions revealing
themselves that could be uniquely identiﬁed, either through
the path, through the content of the WARs, and the union of
those sets.
Chromium
Firefox
Total
Revealed
2,684
222
2,906
Unique path
2,063
198
2,261
Unique hash
2,603
216
2,819
Unique path ∪ hash
2,606 (97.09%)
216 (97.30%)
2,822 (97.11%)
WARs was blocked in general. Therefore, preventing the
extension probing attack through a blanket ban on extension
probing, is not an option.
In similar vein, preventing extensions from revealing them-
selves to web pages is also not an option. The data from
Section IV-A implies that many extensions may inject content
into a web page, and could become dysfunctional
if this
functionality was no longer available. Extensions ill intent on
revealing themselves may be unstoppable, and we consider
them out of scope, only focusing on those extensions that
accidentally reveal themselves.
Our experiments show the different ways through which
extensions reveal themselves by injecting content. From an
unrandomized WAR URL injected in a page, as is the case
for Chrome extensions, it is trivial to extract the UUID to
determine the installed extension. As is shown in Table II,
from a WAR URL where just the UUID has been randomized
and probing is possible, as is the case for Firefox extensions,
we can deduce the installed extension with a 80.33% accuracy
by considering only the path of the URL, and the paths tied
to each extension. Similarly, we would be able to deduce the
installed extension with a 93.76% accuracy by only looking
at the contents of the resources tied to the extensions, and
combining the two approaches, we can deduce the installed ex-
tension with a 94.41% accuracy. Similarly, we detect Chrome
extensions with a 62.01% accuracy based on the path, 89.01%
accuracy based on the content of the resource, and 89.91%
accuracy when we combine the path and the content.
Without breaking the intended functionality provided by
existing extensions, we cannot prevent extension probing at-
tacks and extension revelation attacks in general.
Our envisioned solution, which we call “Latex Gloves”
since the goal is to prevent extensions from leaving ﬁnger-
prints, is depicted in Figure 3.
We prevent extension probing attacks (Figure 3a) by allow-
ing a whitelist to specify a set of web pages that may probe
for each individual extension.
For instance, YouTube.com may be allowed to probe for the
ChromeCast extension, so that the extension’s functionality can
be used with YouTube videos. In that case, a request for a WAR
in the ChromeCast extension will be allowed by the policy.
However, when the same WAR is requested by another web
page, such as attacker.com, the request is blocked. Similarly, if
YouTube.com would request a WAR from another extension,
e.g. AdBlock, it would be blocked with this particular policy.
We prevent extension revelation attacks (Figure 3b) by
allowing a whitelist to specify a set of web pages on which
each extension is allowed to execute.
thereby not
For instance, the AdBlock extension may be allowed to run
on example.com. In that case, when example.com is visited,
the AdBlock extension can remove any advertisements from
the page. However, the same extension may be disallowed
from running on a website which is trusted by the whitelist
policy,
interfering with the revenue stream of
that website. Similar to the probing defense example,
the
policy here also blocks other extensions from executing — and
thereby potentially revealing themselves — on example.com.
Conceptually, the policies for both defenses can be visual-
ized in a matrix, with extensions and web origins as rows and
columns respectively. Each element in this matrix would then
indicate whether access is allowed between the extension and
the web origin.
However, such a matrix would make the assumption that
policies for the probing and revelation defenses cannot conﬂict,
which is not necessarily the case.
For instance, consider a conﬁguration where AdBlock is
installed, and a banking website bank.com, which is trusted
by the whitelist policy. Because this trust, bank.com should be
allowed to probe for AdBlock. However, due to the sensitive
nature of the data on bank.com, the whitelist policy does
not allow AdBlock to operate on the bank.com web pages,
although AdBlock want to execute on every web page.
This conﬂict between the policies for a particular web ori-
gin and extension illustrates the need for separate whitelisting
mechanisms for both the probing and revelation defenses.
VI. PROOF OF CONCEPT IMPLEMENTATION
Our prototype implements defenses against both the ex-
tension probing and extension revelation attacks as a proof of
concept. Because changing browser code can quickly get very
complicated, we opted to implement only the core functionality
in the actual browser code, while the bulk of our prototype
is implemented separately as a browser extension and a web
proxy. For adoption in the real world, the full implementation
should of course be embedded in the web browser’s C++ code.
However, our proof of concept implementation still allows to
test the effectiveness of our solution. For simplicity, the proof
of concept is designed to allow a security-aware end user to
9
(a) Probing defense
(b) Revelation defense
Fig. 3: Concept design of our proposed defenses for the extension probing and revelation attacks. Our solution mediates access
from the web page to the extension WARs for the probing defense, and from the extensions to web pages for the revelation
defense. In each case, access is mediated based on a speciﬁed policy.
arbitrarily modify the whitelists. While this is not something
one should assume an arbitrary user would do, we deem it to
be good in order to show the functionality of the whitelisting
mechanisms. In a full implementation, the end user should be
queried as little as possible.
As depicted in Figure 4, our prototype implementation
consists of three components: a slightly modiﬁed Chromium
browser, a browser extension named “Latex Gloves” and a
web proxy based on mitmproxy. Our modiﬁcations to the
Chromium 65.0.3325.181 code consist of nine lines of code
spread over four ﬁles. The patches to Chromium, as well as
binary packages compiled for Ubuntu 16.04, our browser ex-
tension and our addon script for mitmproxy 3.0.4 are available
upon request to the authors.
request. Second, we disable Chromium’s behavior of replacing
invalid chrome-extension:// URIs.
The remainder of this part of the prototype is implemented
as a browser extension which uses this modiﬁed webRequest
API. Requests to all chrome-extension:// URIs are mon-
itored by the extension and matched against a predeﬁned but
customizable whitelist. The whitelist maps a web origin O to a
list of allowed extension IDs L. When the browser visits a web
page located in the given web origin O, the extension checks
any requested chrome-extension:// URIs and determines
whether they target an extension in L. In case of a match, the
request is allowed, otherwise it is canceled. In the latter case,
it will appear to the web page as if the requested resource is
not accessible, whether the extension is installed or not.
A. Preventing the probing attack
B. Preventing the revelation attack
Chrome extensions can use the webRequest API to observe,
modify and block requests from web pages. The requests
that an extension can observe through the webRequest API,
include requests with the chrome-extension:// scheme.
However, requests to chrome-extension://
URIs where  is not its own extension ID, will
be hidden. Even though requests to non-installed extension
resources, or to chrome-extension:// URIs with an invalid
extension ID are hidden from observation with the webRequest
API, those URIs are replaced by chrome-extension://
invalid internally.
Our prototype needs the ability to monitor requests to
all chrome-extension:// URIs, even for other installed
extensions, non-installed extensions or invalid extension IDs.
In addition, we also want to avoid that Chromium replaces
the URI with chrome-extension://invalid, since we are
interested in the originally requested URI.
To achieve this, we modiﬁed the Chromium source code
and changed just two lines of code in two ﬁles. First, we
disable the check that determines whether the extension ID of
the requested URI matches that of the extension observing the
By design, Chrome extensions can specify which URLs
they want
to operate on, by listing those URLs in the
permissions and content_scripts properties of the man-
ifest.json ﬁle. Restricting the list of URLs on which an exten-
sion is allowed to operate, would help prevent the extension
revelation attack on arbitrary attacker pages, since the exten-
sion would not execute on those pages, and thus not reveal
itself. However, this whitelist of URLs is at the discretion of
the extension developer and cannot easily be altered by the
whitelist policy provider.
Our implementation, schematically depicted on the right
side of Figure 4, exposes the whitelist on which URLs the
extension operates to the whitelist policy provider, allowing
the restriction of the set of URLs on which the extension
operates. Instead of implementing new functionality in the
browser to modify this whitelist, and then exposing it to our
browser extension, we decided to modify the browser extension
CRX [19] ﬁles, which are packaged and signed versions of
browser extensions, “in ﬂight” when they are installed or
updated from the Chrome web store.
Because extensions from the Chrome web store are signed
10
Fig. 4: Overview of the prototype implementation of our proposed defenses: a modiﬁed Chromium browser with the Latex
Gloves extension and mitmproxy.
with a private key, which we cannot obtain, we modiﬁed
the Chromium browser to not strictly verify an extension’s
signature. This modiﬁcation consists of six lines of code in a
single ﬁle, and disables signature veriﬁcation on both version
2 and 3 of the CRX ﬁle format. It is important to note that,
for a real-world implementation, this should not be done, but
rather have the full mechanism implemented in the browser.
We only use this to show and evaluate the core whitelisting
mechanism in the proof of concept prototype.
Since the browser no longer veriﬁes CRX signatures, we
are free to modify web trafﬁc between the browser and the
Chrome web store, and can update the manifest ﬁles in
extensions’ CRX ﬁles “in ﬂight” and restrict the permissions
and content_scripts properties according to the wishes of
the whitelist. This CRX rewriting process is implemented in a
web proxy as a mitmproxy addon script.
When the policy changes the hostname whitelist associated
with an extension, the new whitelist is communicated to the
proxy. When the auto-update process in the browser queries
the Chrome web store whether the extension has been updated,
we inform the browser that a new version exists. The browser
then downloads the new version of the extension from the
Chrome web store, which gets rewritten by our mitmproxy
addon script, and includes the new whitelist.