# Title: Dissecting UbuntuOne: Autopsy of a Global-scale Personal Cloud Back-end

## Authors:
- Raúl Gracia-Tinedo, Universitat Rovira i Virgili, PI:EMAIL
- Yongchao Tian, Eurecom, PI:EMAIL
- Josep Sampé, Universitat Rovira i Virgili, PI:EMAIL
- Hamza Harkous, EPFL, hamza.harkous@epfl.ch
- John Lenton, Canonical Ltd., PI:EMAIL
- Pedro García-López, Universitat Rovira i Virgili, PI:EMAIL
- Marc Sánchez-Artigas, Universitat Rovira i Virgili, PI:EMAIL
- Marko Vukolić, IBM Research - Zurich, PI:EMAIL

## Abstract
Personal cloud services, such as Dropbox and Box, have gained widespread adoption. However, due to their proprietary nature, little is known about their internal operations and general characteristics. This paper aims to understand the nature of personal clouds by presenting an in-depth analysis of UbuntuOne (U1). We first detail the U1 architecture, including the core components of the metadata service hosted in Canonical's datacenter and its interactions with Amazon S3 for data storage. To our knowledge, this is the first research work to describe the internals of a large-scale personal cloud.

Second, we provide an extensive analysis of U1's back-end activity over one month, tracing the U1 servers. Our analysis covers the storage workload, user behavior, and the performance of the U1 metadata store. Based on these findings, we suggest improvements that could benefit similar personal cloud systems. Finally, we contribute our dataset to the community, which is the first to contain the back-end activity of a large-scale personal cloud, providing unique opportunities for further research in the field.

## Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement techniques; K.6.2 [Management of Computing and Information Systems]: Installation management–Performance and usage measurement

## Keywords
Personal cloud, performance analysis, measurement

## 1. Introduction
Today, users require ubiquitous and transparent storage to manage, synchronize, and access their personal data. Forrester Research forecasts a $12 billion market in the US for personal and user-centric cloud services by 2016. In response, personal cloud services like Dropbox, Box, and UbuntuOne (U1) have become increasingly popular, with companies like Google, Microsoft, Amazon, and Apple offering integrated solutions.

A personal cloud service provides automatic backup, file sync, sharing, and remote accessibility across multiple devices and operating systems. These services are popular due to their easy-to-use Software-as-a-Service (SaaS) storage facade, often built on top of Infrastructure-as-a-Service (IaaS) providers like Amazon S3.

However, the proprietary nature of these systems means little is known about their performance and characteristics. Most studies rely on a "black-box" approach, collecting traces from limited measurement points to infer properties. The most comprehensive study to date, conducted by Drago et al. [2], focused on Dropbox but provided no insights into the back-end infrastructure. Additionally, it only analyzed specific communities, leading to potential false generalizations.

In this paper, we present a detailed study of U1, the personal cloud service of Canonical, integrated by default in Linux Ubuntu OS. Despite U1's shutdown in July 2014, our analysis, based on data collected by the provider, offers a complete performance analysis of a personal cloud in the wild. U1 served 1.29 million users at the time of the study in January-February 2014. Our contributions include:

- **Back-end Architecture and Operation of U1**: A comprehensive description of the U1 architecture, including the back-end infrastructure.
- **Workload Analysis and User Behavior in U1**: An extensive analysis of U1's back-end activity, confirming and expanding on previous studies.
- **Potential Improvements to Personal Clouds**: Suggestions for optimizing U1 and similar systems based on our findings.
- **Publicly Available Dataset**: Contribution of our dataset (758GB) to the community, available at http://cloudspaces.eu/results/datasets.

## 2. Background
A personal cloud can be defined as a unified digital locker for personal data, offering file storage, synchronization, and sharing. Services like Dropbox, U1, and Box fall under this definition. Architecturally, a personal cloud has a 3-tier structure: clients, synchronization or metadata service, and data store. This decouples the management of file contents (data) and their logical representation (metadata). Companies like Dropbox and Canonical own the metadata service infrastructure, while file contents are stored separately in Amazon S3.

## 3. The U1 Personal Cloud
### 3.1 U1 Storage Protocol
U1 uses its own protocol (ubuntuone-storageprotocol) based on TCP and Google Protocol Buffers. The protocol specifications and client-side implementation are publicly available. Here, we describe the main entities and operations in the protocol.

#### 3.1.1 Protocol Entities
- **Node**: Files and directories are nodes in U1, supporting CRUD operations. Nodes and their contents are assigned UUIDs generated in the back-end.
- **Volume**: A container of node objects. There are three types: root/predefined, user-defined folders (UDFs), and shared volumes.
- **Session**: A TCP connection between the U1 desktop client and the server, identified by an OAuth token.

#### 3.1.2 API Operations
Table 2 describes the most important U1 API operations, including metadata and data management operations.

### 3.2 Architecture Overview
U1 has a 3-tier architecture: clients, synchronization service, and data/metadata store. U1 decouples the storage of file contents and their logical representation. Canonical owns the metadata service, while file contents are stored in Amazon S3.

U1 treats client requests differently from Dropbox. U1 receives both metadata and data transfer requests, internally discriminating and managing them. For each upload and download request, a new back-end process is instantiated to manage the data transfer between the client and S3.

### 3.3 U1 Desktop Client
U1 provides a user-friendly desktop client implemented in Python (GPLv3) with a graphical interface. It runs a daemon in the background to handle file management and synchronization.

## 4. Trace Collection Methodology
(To be added)

## 5. Storage Workload Analysis
(To be added)

## 6. User Behavior Analysis
(To be added)

## 7. Back-end Performance Analysis
(To be added)

## 8. Related Work
(To be added)

## 9. Implications and Conclusions
(To be added)