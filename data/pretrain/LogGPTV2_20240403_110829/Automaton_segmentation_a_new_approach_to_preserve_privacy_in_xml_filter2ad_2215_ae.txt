(cid:20)(cid:19)(cid:19)
(cid:20)(cid:24)(cid:19)
(cid:21)(cid:19)(cid:19)
(a)simple path rules; (b) rules with wildcards in the XPath.
Figure 7: System scalability against ACR complex-
ity.
{Q
n}. When an accepted/rewritten sub-query Q
(cid:2)
(cid:2)
(cid:2)
i is
1, ..., Q
processed by the rule Ri, the number of hops it experiences
is determined by the number of segments of Ri. In the ex-
periment, we generate a set of 200 synthetic access control
rules and 1000 synthetic XPath queries.We choose the ﬁnest-
granularity automaton segmentation (each XPath step of an
ACR is partitioned as one segment and kept at one coordi-
nator) for maximum privacy preserving. Our experiment
result shows that NHOP is 5.7, and the maximum number
of hops of all queries is 8.
Total forward end-to-end query processing time: from
above experiment results, the total forward query processing
time is calculated as Tf orward (cid:4) 1.9× 5.7 + 100× (5.7 + 1) (cid:4)
681(ms). It is obvious that network latency TN ∗(NHOP +1)
dominates total forward end-to-end query processing time,
because the value of TC is negligible compared with TN .
Moreover, since TN remains the same (as an estimation
from Internet traﬃc), NHOP becomes the deterministic fac-
tor that aﬀects end-to-end query processing time. Note that
for other information brokering systems, although they use
diﬀerent query routing scheme, network latency is not avoid-
able. As a conclusion, the proposed PPIB approach achieves
privacy-preserving query brokering and access control with
limited computation.
7.2 System Scalability
We evaluate the scalability of the PPIB system against
complicity of ACR, the number of user queries, and data
size (number of data objects and data servers).
Complicity of XML schema and ACR When the seg-
mentation scheme is determined, the demand of coordina-
tors is determined by the number of ACR segments, which
is linear with the number of access control rules. As shown
in Figure 7 (also adopting the ﬁnest granularity automaton
segmentation), we can see that the increase of demanded
number of coordinators is linear or even better. This is be-
cause similar access control rules with same preﬁx may share
XPath steps, and save the number of coordinators. More-
over, diﬀerent ACR segments (or, logical coordinators) may
reside at the same physical site, thus reduce the actual de-
mand of physical sites.
Number of queries Considering n queries submitted into
the system in a unit time, we use the total number of query
segments being processed in the system to measure the sys-
tem load. When a query is accepted as multiple sub-queries,
all sub-queries are counted towards system load.For a query
that is rejected after i segments, the processed i segments
are counted.
X: number of queries in a unit time; Y: number of total segments in
the system.
(cid:21)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:27)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:23)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:20)(cid:19)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:25)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:28)(cid:19)(cid:19)(cid:19)
(cid:27)(cid:19)(cid:19)(cid:19)
(cid:26)(cid:19)(cid:19)(cid:19)
(cid:25)(cid:19)(cid:19)(cid:19)
(cid:24)(cid:19)(cid:19)(cid:19)
(cid:23)(cid:19)(cid:19)(cid:19)
(cid:22)(cid:19)(cid:19)(cid:19)
(cid:21)(cid:19)(cid:19)(cid:19)
(cid:20)(cid:19)(cid:19)(cid:19)
(cid:19)
(cid:21)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:27)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:23)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:20)(cid:19)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:25)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:28)(cid:19)(cid:19)(cid:19)
(cid:27)(cid:19)(cid:19)(cid:19)
(cid:26)(cid:19)(cid:19)(cid:19)
(cid:25)(cid:19)(cid:19)(cid:19)
(cid:24)(cid:19)(cid:19)(cid:19)
(cid:23)(cid:19)(cid:19)(cid:19)
(cid:22)(cid:19)(cid:19)(cid:19)
(cid:21)(cid:19)(cid:19)(cid:19)
(cid:20)(cid:19)(cid:19)(cid:19)
(cid:19)
(cid:19)
(cid:20)(cid:19)(cid:19) (cid:21)(cid:19)(cid:19) (cid:22)(cid:19)(cid:19) (cid:23)(cid:19)(cid:19) (cid:24)(cid:19)(cid:19) (cid:25)(cid:19)(cid:19) (cid:26)(cid:19)(cid:19) (cid:27)(cid:19)(cid:19) (cid:28)(cid:19)(cid:19) (cid:20)(cid:19)(cid:19)(cid:19)
(cid:19)
(cid:20)(cid:19)(cid:19) (cid:21)(cid:19)(cid:19) (cid:22)(cid:19)(cid:19) (cid:23)(cid:19)(cid:19) (cid:24)(cid:19)(cid:19) (cid:25)(cid:19)(cid:19) (cid:26)(cid:19)(cid:19) (cid:27)(cid:19)(cid:19) (cid:28)(cid:19)(cid:19) (cid:20)(cid:19)(cid:19)(cid:19)
(a)Simple XPath ACR; simple
XPath query.
(cid:25)(cid:19)(cid:19)(cid:19)(cid:19)
(b)ACR with wildcards; simple
XPath query.
(cid:25)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:21)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:27)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:23)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:20)(cid:19)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:25)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:24)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:23)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:22)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:21)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:20)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:19)
(cid:21)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:27)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:23)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:20)(cid:19)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:25)(cid:19)(cid:3)(cid:53)(cid:88)(cid:79)(cid:72)(cid:86)
(cid:24)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:23)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:22)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:21)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:20)(cid:19)(cid:19)(cid:19)(cid:19)
(cid:19)
(cid:19)
(cid:20)(cid:19)(cid:19) (cid:21)(cid:19)(cid:19) (cid:22)(cid:19)(cid:19) (cid:23)(cid:19)(cid:19) (cid:24)(cid:19)(cid:19) (cid:25)(cid:19)(cid:19) (cid:26)(cid:19)(cid:19) (cid:27)(cid:19)(cid:19) (cid:28)(cid:19)(cid:19) (cid:20)(cid:19)(cid:19)(cid:19)
(cid:19)
(cid:20)(cid:19)(cid:19) (cid:21)(cid:19)(cid:19) (cid:22)(cid:19)(cid:19) (cid:23)(cid:19)(cid:19) (cid:24)(cid:19)(cid:19) (cid:25)(cid:19)(cid:19) (cid:26)(cid:19)(cid:19) (cid:27)(cid:19)(cid:19) (cid:28)(cid:19)(cid:19) (cid:20)(cid:19)(cid:19)(cid:19)
(c)ACR with wildcards; query
with 5% wildcard probability at
each XPath step.
(d)ACR with wildcards; query
with 10% wildcard probability at
each XPath step.
Figure 8: System scalability against queries.
We generate 5 sets of synthetic ACRs and 10 sets of syn-
thetic XML queries with diﬀerent numbers and wildcard (i.e.
“/*” and “//”) probabilities at each XPath step in each ex-
periment. Figure 8 shows system load vs. number of XPath
queries in a unit time. More speciﬁcally, Figure 8 (a) only
has simple path rules (without wildcard or predicate), and
Figure 8(b) has rules with wildcards. In both cases, system
load increases linearly and each query is processed less than
10 segments. Figure 8(c) and (d) use the same set of ACRs
as in (b), but add wildcards into queries with probability 5%
and 10% at each step, respectively. In the worst case, each
query is processed no more than 50 segments. Moreover, if
we compare curves in each sub-ﬁgure, we can see that larger
ACR leads to higher system load, but the increase appears
to be linear in all cases.
Data size When data volume increases (e.g. adding more
data items into the online auction database), the number
of indexing rules also increases. This results in increasing of
number of indexing entries at leaf-coordinators. However, in
PPIB, query indexing is implemented through hash tables,
which is scalable. Thus, the system is scalable when data
size increases.
8. RELATED WORK
Research areas such as information integration, Web search,
peer-to-peer ﬁle sharing systems, and publish-subscribe sys-
tems provide partial solutions to the problem of large scale
data sharing.
Information integration seeks to provide an
integrated view over large numbers of heterogeneous data
sources by exploiting the semantic relationship between schemas
of diﬀerent sources [7, 16, 9]. It turns out that the PPIB
approach will facilitate but is orthogonal to the information
integration technology. On the other hand, Web search fo-
cuses on locating data sources with high precision and cov-
erage [26, 18]. However, it only supports keyword queries
with limited expressiveness.
Peer-to-peer systems are designed to share ﬁles and data
sets (e.g.
in collaborative science applications). Distrib-
uted hash table technology [25, 8] is adopted to locate repli-
cas based on keyword queries. However, although these
technologies have recently been extended to support range
queries [21], the coarse granularity (e.g. ﬁles and documents)
still makes them short of our expressiveness needs. Further,
P2P ﬁle-sharing systems may not provide complete set of
answers to a request while we need to locate all relevant
data.
Addressing a conceptually dual problem, the XML publish-
subscribe systems (e.g. [3, 6]) is probably the closely related
technology to our proposed research: while we locate rele-
vant data sources for a given query and route the query
to these data sources, the pub/sub systems locate relevant
consumers for a given document and route the document to
these consumers. However, due to this duality, we have dif-
ferent concerns: they focus on eﬃciently delivering the same
piece of information to a large number of consumers, and
we are trying to route large volume but small-size queries
to many fewer sites. Accordingly, the multicast solution in
pub/sub systems does not scale in our environment and we
need to develop new mechanisms.
One idea is to build an XML overlay architecture that
supports expressive query processing and security checking
on top of normal IP network. In particular, specialized data
structures are maintained on nodes of the overlay networks
to route path queries.
In [24], a robust mesh has been
built to eﬀectively route XML packets by making the use of
self-describing XML tags and the overlay networks. Kouds
et al. [12] describes a decentralized architecture for ad hoc
XPath query routing across a collection of XML databases
using the open and agreement cooperation models. In [10],
content-based routing of path queries in peer-to-peer sys-
tems is studied to serve the purpose as sharing data among
a large number of autonomous nodes. The main diﬀerence
between these approaches and ours is that they focus on dis-
tributed query routing, while we seamlessly integrate query
routing and security checking (e.g. access control) so as to
preserve relevant privacy information.
As long as privacy becomes an important information
that should be protected from unauthorized entities, sev-
eral approaches have been designed to preserve anonymity
in communication. Crowds [19] is a distributed and chained
Anonymizer (http://www.anonymizer.com), where users are
grouped dynamically and issue request on behalf of a crowd
member. In [27], sender anonymity is guaranteed by build-
ing up anonymous connections among Onion Routers using
Chaum Mix. Since we integrate security checking enroute
that involves more privacy concerns other than anonymity,
our privacy addresses more challenge.
As for security check, many researches have been proposed
on distributed access control (see [28] for a good overview on
access control in collaborative systems). Earlier approaches
implement access control mechanisms at the nodes of XML
trees and ﬁlter out data nodes that users do not have au-
thorizations to access [4, 17]. These approaches rely much
on the XML engines. View-based access control approaches
create and maintain a separate view (e.g. a speciﬁc por-
tion of XML documents) for each user [20, 29]. However,
supporting large number of views causes high maintenance
and storage cost. Our PPIB approach adopts a recently pro-
posed NFA-based query re-writing access control scheme [15,
13] and extends it to a decentralized manner. It has a better
performance compared with [17], and any oﬀ-the-shelf XML
databases can be used due to its query re-writing nature.
9. CONCLUSION AND FUTURE WORK
With little attention drawn on privacy of user, data, and
metadata during the design stage, existing information bro-
kering systems suﬀer from a spectrum of vulnerabilities as-
sociated with user privacy, data privacy, and metadata pri-
vacy. In this paper, we propose PPIB, a new approach to
preserve privacy in XML information brokering. Through an
innovative automaton segmentation scheme, in-network ac-
cess control, and query segment encryption, PPIB integrates
security enforcement and query forwarding while providing
comprehensive privacy protection. Our analysis shows that
it is very resistant to privacy attacks. End-to-end query
processing performance and system scalability are also eval-
uated and the results show that PPIB is eﬃcient and scal-
able.
Many directions are ahead for future research. First, at
present, site distribution and load balancing in PPIB are
conducted in an ad-hoc manner. Our next step of research
is to design an automatic scheme that does dynamic site dis-
tribution. Several factors can be considered in the scheme
such as the workload at each peer, trust level of each peer,
and privacy conﬂicts between automaton segments. Design-
ing a scheme that can strike a balance among these factors
is a challenge.
Second, we would like to quantify the level of privacy pro-
tection achieved by PPIB. Finally, we plan to minimize (or
even eliminate) the participation of the administrator node,
who decides such issues as automaton segmentation granu-
larity, site distribution and replication. A main goal is to
make PPIB self-reconﬁgurable.
Acknowledgements
The ideas in this paper were reﬁned during discussions with
Ting Yu, Wang-Chien Lee, Prasenjit Mitra, and Michael Ra-
binovich. The anonymous reviewers provided valuable feed-
back that helped improve the paper’s quality. This research
was supported in part by NSF CCR-0233324 and NSF/DHS
0335241.
10. REFERENCES
[1] Internet traﬃc report.
http://www.internettraﬃcreport.com.
[2] R. Agrawal, A. V. Evﬁmievski, and R. Srikant. Information
sharing across private databases. In SIGMOD, pages 86–97,
2003.
[3] A. Carzaniga, M. J. Rutherford, and A. L. Wolf. A routing
scheme for content-based networking. In Proc. of
INFOCOM, 2004.
[4] S. Cho, S. Amer-Yahia, L. V. S. Lakshmanan, and
D. Srivastava. Optimizing the secure evaluation of twig
queries. In VLDB, pages 490–501, China, 2002.
[5] E. Damiani, S. Vimercati, S. Paraboschi, and P. Samarati.
A ﬁne-grained access control system for XML documents.
ACM Trans. Inf. Syst. Secur., 5(2):169–202, 2002.
[6] Y. Diao, S. Rizvi, and M. J. Franklin. Towards an
Internet-scale XML dissemination service. In VLDB,
Toronto, 2004.
[7] M. Genesereth, A. Keller, and O. Duschka. Informaster: An
information integration system. In SIGMOD, Tucson, 1997.
[8] R. Huebsch, B. Chun, J. Hellerstein, B. Loo, P. Maniatis,
T. Roscoe, S. Shenker, I. Stoica, and A. Yumerefendi. The
architecture of pier: an internet-scale query processor. In
CIDR, pages 28–43, 2005.
[9] J. Kang and J. F. Naughton. On schema matching with
opaque column names and data values. In SIGMOD, pages
205–216, 2003.
[10] G. Koloniari and E. Pitoura. Content-based routing of path
queries in peer-to-peer systems. In EDBT, 2004.
[11] G. Koloniari and E. Pitoura. Peer-to-peer management of
xml data: issues and research challenges. SIGMOD Rec.,
34(2):6–17, 2005.
[12] N. Koudas, M. Rabinovich, D. Srivastava, and T. Yu.
Routing xml queries. In IEEE ICDE, page 844, 2004.
[13] F. Li, B. Luo, P. Liu, D. Lee, P. Mitra, W. Lee, and
C. Chu. In-broker access control: Towards eﬃcient
end-to-end performance of information brokerage systems.
In Proc. IEEE SUTC, 2006.
[14] H. Lu, J. X. Yu, G. Wang, S. Zheng, H. Jiang, G. Yu, and
A. Zhou. What makes the diﬀerences: benchmarking xml
database implementations. ACM Trans. Inter. Tech.,
5(1):154–194, 2005.
[15] B. Luo, D. Lee, W.-C. Lee, and P. Liu. QFilter:
Fine-grained run-time XML access control via NFA-based
query rewriting. In ACM CIKM, Washington D.C., USA,
nov 2004.
[16] I. Manolescu, D. Florescu, and D. Kossmann. Answering
xml queries on heterogeneous data sources. In VLDB, pages
241–250, 2001.
[17] M. Murata, A. Tozawa, and M. Kudo. XML access control
using static analysis. In ACM CCS, Washington D.C., 2003.
[18] S. Park, A. Khrabrov, D. M. Pennock, S. Lawrence, C. L.
Giles, and L. H. Ungar. Static and dynamic analysis of the
internet’s susceptibility to faults and attacks. In IEEE
Infocom, 2003.
[19] M. K. Reiter and A. D. Rubin. Crowds: anonymity for Web
transactions. ACM Transactions on Information and
System Security, 1(1):66–92, 1998.
[20] S. Rizvi, A. Mendelzon, S. Sudarshan, and P. Roy.
Extending query rewriting techniques for ﬁne-grained access
control. In SIGMOD, pages 551–562, Paris, France, 2004.
[21] O. Sahin, A. Gupta, D. Agrawal, and A. E. Abbadi. A
peer-to-peer framework for caching range queries. In Proc.
of the 20th Int. Conf. on Data Engineering, 2004.
[22] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
Youman. Role-based access control models. IEEE
Computer, 29(2):38–47, 1996.
[23] A. R. Schmidt, F. Waas, M. L. Kersten, D. Florescu,
I. Manolescu, M. J. Carey, and R. Busse. “The XML
Benchmark Project”. Technical Report INS-R0103, CWI,
April 2001.
[24] A. C. Snoeren, K. Conley, and D. K. Giﬀord. Mesh-based
content routing using XML. In Symposium on Operating
Systems Principles, pages 160–173, 2001.
[25] I. Stoica, R. Morris, D. Liben-Nowell, D. Karger,
M. Kaashoek, F. Dabek, and H. Balakrishnan. Chord: A
scalable peer-to-peer lookup protocol for internet
applications. In IEEE/ACM Trans. Networking, volume 11
of 1, 2003.
[26] A. Sugiura and O. Etzioni. Query Routing for Web Search
Engines:Architecture and Experiments. Computer
Networks, 33(1), 2000.
[27] P. F. Syverson, D. M. Goldschlag, and M. G. Reed.
Anonymous connections and onion routing. In IEEE
Symposium on Security and Privacy, pages 44–54,
Oakland, California, 4–7 1997.
[28] W. Tolone, G.-J. Ahn, T. Pai, and S.-P. Hong. Access
control in collaborative systems. ACM Comput. Surv.,
37(1), 2005.
[29] T. Yu, D. Srivastava, L. V. S. Lakshmanan, and H. V.
Jagadish. Compressed accessibility map: Eﬃcient access
control for XML. In VLDB, pages 478–489, China, 2002.