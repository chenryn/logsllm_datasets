(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:6)(cid:14)(cid:15)
The global menu occupies the whole screen including the
SLI. Parts of the screen that are not covered by menu entries
are dimmed. During presentation only the global menu will
receive input events. The global menu allows the user to
adjust global settings such as display brightness, mute and
ﬂight mode. Further it allows to power oﬀ the device.
(cid:16)(cid:17)(cid:17)(cid:18)(cid:19)(cid:8)(cid:20)(cid:21)(cid:19)(cid:22)(cid:23)
4.4 Secure Lockscreen
The third piece of Crossover is a global lockscreen. If not
in use a mobile device is usually locked. This mode serves the
following conditions. First, when in locked state, the screen
backlight is turned oﬀ, which saves energy and thereby pro-
longs battery life. Second, when locked the user cannot ac-
cidentally interact with the device, such as pocket dialing.
Third, security policies can demand that the user needs to
authenticate before using the device to prevent unautho-
rized access. Thus, the device must only be unlocked after
entering a PIN or issuing a predeﬁned unlock pattern.
Further the global lockscreen acts as a notiﬁcation center.
It can display various notiﬁcation types such as the num-
ber of missed calls, unread e-mails or new text messages.
To preserve conﬁdentiality, notiﬁcations from a secure VM
may only be displayed by using a badge which denotes the
number of missed notiﬁcations. In that case details such as
caller ID or a message excerpt are not shown.
VMs are able to post notiﬁcations to Crossover UI. For
each notiﬁcation type Crossover only allows a ﬁxed number
of total notiﬁcations. If the total is reached Crossover will
not accept more notiﬁcations of that type until after the
user has dismissed pending notiﬁcations. This avoids DoS
attacks against the lockscreen by depleting its resources.
4.5 Crossover Workﬂows
In this section we describe common workﬂows and how
the user interacts with Crossover.
Usually security adds some inconvenience to the workﬂow.
But users just want to get their work done without dealing
with complicated procedures. That means that Crossover
has to be simple and should minimize the hassle for the
user.
In the following paragraphs we describe how the diﬀerent
Crossover components work.
4.5.1
Switching VMs
Switching between VMs is a security sensitive operation.
A malicious VM could carry out a DoS attack by constantly
switching VMs or prevent switching at all. Thus we do not
allow VMs to initiate switches. Consequently a VM switch
in Crossover must be initiated by Crossover, for example on
demand by the user or by an incoming call.
To be intuitive we decided to use a gesture to initiate the
switch. Our gesture requires a two-ﬁnger swipe from the
top of the screen to the bottom. This gesture does not mask
functionality of the mobile OS. As it can be initiated on the
screen bezel, which represents a large target for your ﬁngers,
this gesture is easy to hit. Please have a look at Figure 6
for an illustration.
When a switch is initiated the user must receive imme-
diate feedback. Otherwise he might repeat the command
and unintentionally switch to the next but one VM. Also
the switch has to be disruptive so that the user is informed
of the switch and cannot miss it. The workﬂow is described
below.
Figure 4: An illustration of the SLI. Optionally, it
shows the name of the active VM, two handles for
the switch gesture and the color of the active VM.
4.3 Secure Global Menu
Certain device options such as display brightness, airplane
mode and sleep are device global and must not be controlled
by a single VM, because that could interfere with a VM’s
availability. On a normal device the display and the touch-
screen are turned oﬀ when the user presses the sleep button.
If the active VM is allowed to control both devices directly
it could start a denial of service (DoS) attack at the UI level
by ignoring sleep button presses.
Figure 5: A conceptual illustration of the global
menu provided by Crossover.
Instead Crossover provides a global menu to impose those
settings by a central policy. A mockup is depicted in Fig-
ure 5. We route certain input events such as the sleep but-
ton exclusively to Crossover UI. This policy is deﬁned in the
multiplexing component.
252
1. The sleep button is pressed or the inactivity period
passed.
2. Crossover revokes access to the screen and the input
stream from the active VM. At this point in time there
is no VM that can draw to the screen or receive input.
3. Crossover switches the screen backlight oﬀ and disables
the touchscreen. The system may then do further mea-
sures to save power such as suspend to RAM of VMs
or clocking down the CPU.
Reactivation is handled like this in Crossover:
1. The sleep button is pressed.
2. Crossover displays a full screen lock interface. This
interface shows the name of the last active VM, and
its color, as well as a handle for the unlock gesture.
3. The user does the unlock gesture (e.g. a swipe to the
Figure 6: Two ﬁnger swipe gesture to switch VMs.
left).
1. The user does the two ﬁnger top-down switch gesture.
The multiplexer recognizes the gesture and sends a
switch event to Crossover UI. The multiplexer redi-
rects the complete input stream to Crossover UI. Until
the switch is ﬁnished or aborted no VM receives input
events.
2. Crossover updates the SLI, replacing the VM name
with the word switch, and removing the VM’s color.
During the switch gesture, the SLI follows the ﬁngers
down to the screen bottom (similar to how the notiﬁ-
cation screen of Android works).
3. When the ﬁngers of the user cross the middle of the
screen, Crossover selects a background VM (according
to the ordering as deﬁned at provisioning time) to be-
come the new active VM. The SLI shows the name and
color of the new active VM. If the user stops the switch
gesture before reaching the middle of the screen, the
switch is aborted and Crossover selects the previously
active VM and shows its name.
4. At the end of the switch gesture, the SLI goes back to
the top of the screen, and shows the name and color
of the newly activated VM. Crossover notiﬁes the mul-
tiplexer that the switch has ﬁnished. The multiplexer
then restores the input stream routing to the new ac-
tive VM.
4.5.2 Handling Global Device Settings and State
As described in Section 4.3 Crossover provides a global
menu to handle global device settings and state. The sleep
button event is exclusively routed to Crossover. A double
“click” with that button brings the menu to the front. The
user then selects the desired function. To dismiss the global
menu the user has to tap the closure button in the upper
right corner.
4.5.3 Locking the Device
The device locks itself automatically after a predeﬁned
inactivity period. The amount of time until lock mode is
deﬁned at provisioning time and shall be chosen according
to the security policies of the most strict VM. Lock mode can
also be triggered by the user by pressing the sleep button.
In Crossover locking the device works like this:
4. Crossover may display the PIN entry screen, which
consists of the name of the last active VM and its color,
a test ﬁeld and a soft keyboard.
5. The user enters his PIN.
6. Crossover draws the SLI with the name of the last
active VM and its color.
7. Crossover grants access to the screen and the input
stream to the last active VM, making it the active VM
again.
Reactivation can also be triggered by an incoming call.
In that case the user can take the call directly. The device
remains locked.
5.
IMPLEMENTATION
We implemented a prototype based on the L4Android se-
curity framework [9].
It is an OS framework which facil-
itates the construction of secure smartphone systems with
multiple personalities. L4Android encapsulates the original
smartphone OS in a VM and multiple VMs are allowed to
run simultaneously. The L4Android framework is based on
a state-of-the-art microkernel and allows applications with
high security requirements to run side-by-side with the VMs.
We ported the L4Android framework to the Samsung Gal-
axy S2. This work included porting the Fiasco.OC micro-
kernel to the Exynos 4 SoC. A userspace component called
platform ctrl implements low level drivers for I2C and SPI
which are needed to control the touchscreen and the display
of the device. In our setup we run two VMs with Android
Gingerbread version 2.3.7. A picture of Crossover running
on a Galaxy S2 is depicted in Figure 7.
The display controller is the hardware component which
is responsible for displaying an image on the screen. It reads
pixel data from memory and displays the image by creating
the right data signals and timings for the display. On the
Exynos 4 SoC the display controller provides up to 5 physi-
cal independent framebuﬀers called planes. The display con-
troller composes the planes into the ﬁnal image which is then
displayed. During composition it can perform various trans-
formations such as color conversion and alpha blending on
the planes. The planes have a ﬁxed stacking order and can
be enabled separately. Also the size and position of each
plane can be conﬁgured individually.
In our setup the display controller is driven by the fb-drv
driver. It provides an interface which allows the multiplexing
component mag to access and conﬁgure individual planes.
253
to avoid having a overly small or large widget on high or low
resolution displays.
In the ﬁrst series of experiments we tested diﬀerent sizes
of the SLI and how good it was touchable with the index
ﬁnger. We asked the proband to touch the SLI while we
increased the size of the SLI. For each size we made ten
runs. The smartphone was lying ﬂat on a table and the
proband was asked to touch the SLI with his index ﬁnger and
before touching it again to touch another target on the table.
We chose this setup to avoid that the proband permanently
installs their hand in a ﬁxed position above the device.
In the second experiment we used the same setup as before
but the proband was holding the smartphone in their left or
right hand. They then were required to touch the SLI with
the thumb of the hand holding the device.
Index finger
Thumb
100
]
%
[
e
t
a
R
t
i
H
90
80
70
60
50
40
30
20
10
0
0.1
0.2
0.3
0.4
0.5
0.7
0.6
1.0
SLI Bar Height [mm]
0.8
0.9
1.1
1.2
1.3
1.4
1.5
Figure 8: The smaller the SLI is the less it can be
touched. At a size of 1.2mm the hit rates with the
index ﬁnger and thumb are around 90 percent.
We expected the hit rates to constantly improve as the size
of the SLI was increased. We anticipated the hit rates to be
better when the proband used their index ﬁnger compared
to their thumb. The results are depicted in Figure 8.
From the graph it is evident that no proband was able to
touch the SLI up to a size of 0.5mm. We assumed a certain
threshold which is the smallest touchable coordinate which
may be deﬁned by the hardware. To verify our assumption
we ran a simple test on various Android devices to learn
about the hardware constraints. In Table 6.1 you can ﬁnd
the smallest y coordinate reported by diﬀerent devices and
their respective display resolution. For that experiment we
used the tool getevent and recorded the reported coordinates
while slowly sliding one ﬁnger from the upper screen bezel
onto the touchscreen. Then we took the minimum of all
values reported for the y coordinate.
As Table 6.1 shows almost all devices start reporting events
after roughly 0.5mm. This makes this value the lower bound
for the SLI height. Any UI widget located at the top of the
screen which is smaller than that won’t be touchable by the
user.
In Figure 8 you can see that our initial assumption was
right. The hit rates for the index ﬁnger and the thumb
constantly improve with the increased SLI size. The ﬁgure
254
Figure 7: A photo of Crossover in action. The SLI
is red and displays the VM’s text label.
Each VM is a client of mag and opens a session with mag
to receive a framebuﬀer and a virtual input stream. The
session parameters such as plane number and framebuﬀer
size and position are determined by a policy which is read by
mag during startup. Each framebuﬀer handed out by mag
is backed by a plane in the display controller. For this we
wrote a plugin for mag which supports that special type of
session. Because we exploited all physical framebuﬀers of the
display controller mag does not need to do the composition
of the virtual framebuﬀers in software as this task is done
in hardware by the display controller.
A userlevel input driver reads input events from the At-
mel mXT224 touchscreen controller, the touchkeys and the
hardware buttons of the Galaxy S2. The input driver re-
ports the input events to mag which distributes them to its
clients according to the conﬁgured policy.
As depicted in Figure 3 Crossover UI itself is a client of
mag. To prevent other clients from overlaying Crossover
UI it uses the front most plane. During normal operation
Crossover uses the top most pixels of the screen to draw
the SLI. Mag sends touch events it received in the SLI area
directly to Crossover UI.
6. EVALUATION
With the prototype implemented in Section 5 we con-
ducted a series of experiments to evaluate the usability of
Crossover. We present the results in the next section. This
evaluation is followed by a security analysis where we discuss
the impact of certain attacks and how they are mitigated by
Crossover.
6.1 Security Level Indicator Size
We ran a series of experiments to measure the impact of
the size of the SLI on the touchability and visibility. Setting
the SLI height has to take the display resolution into account
Device
Nexus 7
Galaxy S2
Galaxy S3
HTC One S
y (px)
Display dpi
Size (mm)
4
4
11
6
1280x800 (216dpi)
480x800 (218dpi)
720x1280 (306dpi)