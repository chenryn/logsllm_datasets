title:Protecting users against XSS-based password manager abuse
author:Ben Stock and
Martin Johns
Protecting Users Against XSS-based Password Manager
Abuse
Ben Stock
FAU Erlangen-Nuremberg
PI:EMAIL
Abstract
To ease the burden of repeated password authentication on
multiple sites, modern Web browsers provide password man-
agers, which oﬀer to automatically complete password ﬁelds
on Web pages, after the password has been stored once.
Unfortunately, these managers operate by simply inserting
the clear-text password into the document’s DOM, where
it is accessible by JavaScript. Thus, a successful Cross-site
Scripting attack can be leveraged by the attacker to read and
leak password data which has been provided by the pass-
word manager. In this paper, we assess this potential threat
through a thorough survey of the current password manager
generation and observable characteristics of password ﬁelds
in popular Web sites. Furthermore, we propose an alterna-
tive password manager design, which robustly prevents the
identiﬁed attacks, while maintaining compatibility with the
established functionality of the existing approaches.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access;
H.4.3 [Communications Applications]: Information
browsers
Keywords
Cross-site Scripting, XSS, Passwords, Password Managers,
Countermeasure, Web Security
1.
INTRODUCTION
In this section, we present the motivation behind our work
and give a short outlook on the remainder of the paper.
1.1 Motivation
Passwords are the primary authentication method of the
Web. With the growing set of Web applications that enter
our life, the number of utilized passwords rises continuously.
Security’s best practices dictate, that each password should
be suﬃciently hard to guess and unique for the respective
Permission to make digital or hard copies of all or part of this work for personal 
or  classroom  use  is  granted  without  fee  provided  that  copies  are  not  made  or 
distributed  for  profit  or  commercial  advantage  and  that  copies  bear this  notice 
and the full citation on the first page. Copyrights for components of this work 
owned by others than the author(s) must be honored. Abstracting with credit is 
permitted. To copy otherwise, or republish, to post on servers or to redistribute to 
lists, requires prior specific permission and/or a fee. Request permissions from 
permissions@acm.org. 
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan. 
Copyright is held by the owner/author(s). Publication rights licensed to ACM. 
ACM 978-1-4503-2800-5/13/06…$15.00. 
http://dx.doi.org/10.1145/2590296.2590336 .
Martin Johns
SAP AG
PI:EMAIL
site, to limit dangers that arise from password reuse and
guessing attacks. However, due to the traits of human na-
ture, our capacities for remembering large sets of good pass-
words are limited, which in turn evidently leads to violation
of the aforementioned password discipline [18, 13].
To provide assistance in this matter, password managers
were introduced, that store passwords for the user and oﬀer
to (semi)automatically enter them into the matching pass-
word dialogues. Nowadays, all popular Web browser pro-
vide built-in password managers. Unfortunately, these man-
agers operate by simply inserting the clear-text password
into the document’s DOM, where it is accessible by Java-
Script. Thus, a successful Cross-site Scripting (XSS) attack
can be leveraged by the attacker to read and leak password
data which has been provided by the program.
Cross-Site Scripting is one of the most common security
issues on the Web. The Open Web Application Security
Project (OWASP) regularly lists XSS as one of the top three
security vulnerability problems on the Web [24] and in its
yearly analysis report [27], Whitehat Security lists XSS vul-
nerabilities documents that 43% of all discovered serious vul-
nerabilities can be accounted to XSS.
Thus, XSS-driven, automated password stealing attacks
appear to be a realistic threat. In this paper, we assess the
susceptibility of the current password (manager) landscape
and propose a lightweight countermeasure, that robustly
prevents the identiﬁed attacks, while maintaining compati-
bility with the established functionality of the existing ap-
proaches.
1.2 Contribution and Paper Outline
After providing the required technical background (Sec. 2),
we make the following contributions:
• We give a comprehensive overview on potential XSS-
based attack patterns on browser-provided password
managers (Sec. 3) and explore potential mitigation stra-
tegies, that can be realized with the currently available
technology (Sec. 4).
• We present two systematic studies: For one, we exam-
ine the current generation of existing password man-
agers and show their susceptibility to the outlined at-
tacks. Furthermore, we report on a large-scale study
on the Alexa Top 4000 site, in which we studied how
password ﬁelds are used by popular Web sites (Sec. 5).
• Motivated by the gained insights, that the vast major-
ity of password scenarios are indeed vulnerable to the
183identiﬁed attacks, and that the currently available mit-
igation strategies are insuﬃcient, we propose a client-
side countermeasure, which robustly protects against
XSS-based password theft without changing the gen-
eral interaction scheme between user, Web page and
password manager. Using a prototypical implemen-
tation as a Firefox extension, we practically evaluate
our solution’s security and functionality characteristics
(Sec. 6).
We end the paper with a discussion of related work (Sec. 7)
and a conclusion (Sec. 8).
2. TECHNICAL BACKGROUND
In the following, we give a brief technical background on
password managers and the concepts of Cross-Site Scripting.
2.1 Password Managers
As studies [18, 13] have shown, users tend to choose bad
passwords and/or reuse passwords over multiple sites, there-
fore undermining the security of their login credentials. To
support users in employing a more secure password strategy,
browser vendors as well as third party programmers have
implemented password managers capable of storing these
secret credentials for the users. This allows users to choose
more complex and possibly random passwords by lifting the
burden of remembering numerous complicated passwords.
Hence, password managers can be beneﬁcial for supporting
better security practices in password handling.
Current implementations of password managers in browsers
all work in a similar manner. Just before a form is submit-
ted, the form is checked for password ﬁelds. If any such ﬁeld
exists, the username and password ﬁelds are determined and
their values are subsequently extracted. These extracted
credentials are then – along with the domain they were en-
tered into – passed to the password manager. The password
manager’s database is subsequently checked for a matching
entry, whereas no action is taken if the extracted credentials
already match the stored ones.
If, however, no matching
entry is found, the user is prompted to approve storing of
the password data. Analogously to that, if an entry for the
same username but diﬀerent password is found, the user is
prompted to consent to updating the stored data. This pro-
cess only works with forms that are submitted, either by
the user clicking a submit button or by JavaScript invoca-
tion of the submit() method of that form. According to
Mozilla [6], storing passwords which are sent using Java-
Script XMLHttpRequests is not supported since no actual
submission of the form takes place.
For each page containing a username and password ﬁeld,
the password manager is queried for entries matching the
URL (or domain, depending on the implementation). If an
entry is found, the ﬁelds on that page are automatically ﬁlled
with the previously persisted credentials. Hence, the user
then only has to submit the form to log into the application.
2.2 Cross-site Scripting
In the Web, access from a document to another docu-
ment’s content is governed by the Same-Origin Policy [2].
This policy makes sure that interaction between two docu-
ments may only occur if their origins match. An origin in
this sense is the combination of protocol, domain and port
of the interacting resources. Hence, an attacker, hosting his
code on his own page, cannot directly access the content of,
e.g., Google Mail even if the visitor of the page is logged
in to that service. In the Web context, the term Cross-Site
Scripting (XSS ) is used for a class of attacks that allow an
attacker to inject HTML or script code into a vulnerable
Web application. This code is then executed in the con-
text and, thus in the origin of the vulnerable application. In
our example, this would mean that the code would be exe-
cuted in the origin of Google Mail, thus allowing it to read
arbitrary content from the site. Hence, Cross-Site Script-
ing can be seen as a way of circumventing the Same-Origin
Policy. Cross-Site Scripting attacks are typically classiﬁed
into three categories, namely persistent, reﬂected and DOM-
based XSS. The ﬁrst term adheres to the fact that the attack-
ers code is persistently stored in an application’s database,
where in the second case, data provided to the application
– e.g. via the URL – is reﬂected back into the response,
allowing for malicious code to be executed. The third kind,
which was ﬁrst described by Amit Klein [15] in 2005 and – in
contrast to the previously outlined attacks – abuses client-
side code vulnerabilities. Although it was ﬁrst discussed in
2005, DOM-based XSS still appears to be a major threat
as Lekies et al. [16] recently showed by ﬁnding DOM-based
XSS vulnerabilities on 9.6% of the Alexa top 5000 sites.
3. ATTACKS
In this section, we discuss the general attack pattern us-
able for stealing passwords via Cross-Site Scripting vulner-
abilities and follow up with means of leveraging password
managers to automate these kinds of pattacks. Afterwards,
we give an overview of speciﬁc attack scenarios aiming to ex-
tract credentials from password managers and conclude the
section with a related, active network-based attacker model.
3.1 Stealing passwords with XSS
Cross-Site Scripting gives an attacker ample opportunity
to steal secret data from his victim. Typically, login forms
for Web applications are realized using two input ﬁelds,
which the user ﬁlls with his username and password, respec-
tively. By design, JavaScript may interact with the docu-
ment and thus is also capable of accessing the username and
password ﬁeld. This feature is often used by applications
to verify that certain criteria are met – such as checking
for e-mail addresses. However, this functionality also allows
an attacker to retrieve the credentials utilizing Cross-Site
Scripting.
If the attacker can successfully inject his own
JavaScript code into the login page, that code can extract
the credentials entered by the user and subsequently leak
them back to the attacker. This kind of vulnerability obvi-
ously only works if the user is not yet logged in when clicking
on the crafted link. However, this is where password man-
agers come to the aid of the attacker, as we will discuss in
the following.
3.2 Leveraging Password Managers to Auto-
mate Attacks
Password managers provide a convenient way for users to
automate parts of logins into Web applications. To make the
login as simple and comfortable as possible, they automat-
ically pre-ﬁll forms for which the user stored the password
beforehand. This feature can be exploited by a Cross-Site
Scripting attacker. If a site is susceptible to XSS attacks,
184the adversary can inject his own code into the application’s
login form in a similar manner as described earlier.
However, the attacker no longer needs to wait for the form
ﬁlled by the user, since the password manager auto-ﬁlls the
required ﬁelds. The attacker’s code can then automatically
retrieve the information and leak it back to the attacker.
The biggest advantage in comparison to the aforementioned
attack is the fact that the user does not need to be involved
at all. This process can – depending on the browser – be
fully automated in a hidden frame while the user is looking
at a seemingly innocent page.
Figure 1 shows this process. First, when the login page is
initially loaded, the ﬁelds are both empty. In the next step,
the password manager automatically ﬁlls in the username
and password, which can be subsequently retrieved by the
code the attacker injected. The password is then automat-
ically leaked back to the attacker as depicted in the lower
part of the ﬁgure.
3.3 Speciﬁc Attack Patterns
In terms of Cross-Site Scripting, an attack targeting pass-
word managers speciﬁcally aims at extracting the stored user
credentials in an automated way. The attacker therefore
tries to embed a form into a vulnerable application which
is then ﬁlled in by the password manager. This form can
afterwards be read by the attacker’s JavaScript code to re-
trieve the data that was inserted by the victim’s browser
and eventually leak the information back to the attacker.
In our study of current password manager implementa-
tion, which we will discuss in further detail in Section 5.1,
we found that their behavior could be distinguished in four
dimensions. In the following, we will discuss the discrimi-
nating factors and the attack patterns associated with them.
Matching requirements for the URL and form.
The ﬁrst factor we examined was the way in which pass-
word managers react to changes both to the URL and the
form itself. Password managers often ﬁll passwords regard-
less of the context, as long as the domain matches, and,
potentially, other easily fabricated indicators such as ﬁeld
names and types or form action are present.
When a password manager does not explicitly store the
complete form the credentials were stored for, but rather
only the origin, an attacker can easily extract the creden-
tials. To achieve this, he can abuse a Cross-Site Scripting
vulnerability on an arbitrary part of the application to in-
ject his form and corresponding JavaScript code. This form
is then ﬁlled by the password manager and the stolen data
can be sent to the attacker. In cases where a password man-
ager also does not store the names of the ﬁelds the data was
stored from, the attack is even easier since an attacker does
not need to craft a form speciﬁcally mimicking the login page
of the target application, but may use a generic form. This
allows him to automate the attack for multiple vulnerable
pages in a very simple and almost eﬀortless manner.
Viewports.
If a password manager explicitly checks the URL rather
than the origin, the attacker has to force the victim’s browser
to load the original login page to make the password man-
ager ﬁll out all the relevant ﬁelds. Hence, the second crite-
rion we found is the diﬀerence in handling viewports. In our
notion, a viewport can either be a top frame, a sub frame
or a popup window. With respect to that, the interesting
question is whether a password manager still ﬁlls out forms
if they are not located in the top frame of a page.
If login ﬁeld data is inserted regardless of the viewport,
an adversary can place a hidden frame pointing to the login
page on the vulnerable page. As enforced by the Same-
Origin Policy, any page may only access another document’s
content and resources if the protocol, the domain and the
port of both involved documents match. As we assume the
attacker has control over some page inside the vulnerable
Web application, he can therefore access the aforementioned
frame’s content, thus enabling extraction of the credentials
that were ﬁlled in by the password manager. If a password
manager does not automatically ﬁll in the values of interest
to the attacker, or the application itself forces not to be
framed using the X-Frame-Options header [19], the login
page can be opened in a popup window. Still operating
under the assumption that vulnerable and login page are of
the same origin, the attacker’s code can retrieve the data
from the opened popup.
User interaction.
As a third distinguishing feature of the examined pass-
word managers, we identiﬁed user interaction – i.e. whether
the user has to somehow interact with the password manager
before it ﬁlls out the forms, e.g., via clicking or typing into
the password ﬁeld.
If a given password manager requires
such interaction, fully automated XSS password stealing at-
tacks are not feasible.
However, in such cases, an attacker can attempt to con-
duct a ClickJacking [26] attack. ClickJacking attacks work
by tricking the user to interact with a security sensitive Web
UI without his knowledge. In the general attack case, the ad-
versary loads the document which contains the security sen-
sitive UI into an iframe and hides the frame from the user’s
eyes via CSS properties, such as opacity. Subsequently, he
overlays the targeted (and now invisible) UI elements with
unsuspicious elements and motivates the user to click them,
for instance in the context of a game or a competition. If the
user falls for the adversary’s bait, he involuntary interacts
with the hidden UI.
Using this attack, the adversary can trick the victim to
interact with the password ﬁeld in the required fashion, thus,
causing the password manager to ﬁll the ﬁeld with the stored
value.
Adherence to the autocomplete attribute.
The fourth and last dimension we found was the adherence
to the autocomplete attribute for ﬁelds. According to the
W3C standard [12], a browser must not store data that is
inserted into input ﬁelds which have autocomplete set to
off.