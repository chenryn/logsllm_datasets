# Web Application Penetration Testing: eXtreme XSS Filter Evasion and WAF Bypassing

**Section 01 | Module 04**
© Caendra Inc. 2020
All Rights Reserved

## Table of Contents
- **MODULE 04: XSS FILTER EVASION AND WAF BYPASSING**
  - 4.1 Introduction
  - 4.2 Bypassing Blacklisting Filters
  - 4.3 Bypassing Sanitization
  - 4.4 Bypassing Browser Filters

---

### Learning Objectives
In the first module, we covered the basics of filtering, including a set of controls that can be implemented at different layers to protect web applications. In this module, we will explore evasion techniques to bypass weak rules and achieve successful Cross-Site Scripting (XSS) attacks.

---

### 4.1 Introduction
Over the years, many security researchers have developed guides and cheat sheets to assist security professionals in testing for Cross-Site Scripting vulnerabilities. One of the most notable is the "XSS Filter Evasion Cheat Sheet" created by RSnake, which was later donated to OWASP. Another useful resource is the HTML5 Security Cheatsheet by Cure53.

- [OWASP XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)
- [HTML5 Security Cheatsheet](http://html5sec.org/)

In this module, we will not analyze each vector listed in these cheat sheets. Instead, we will focus on identifying common scenarios and learning how to overcome them. The most frequent scenarios include:

1. The XSS vector is blocked by the application or another security measure.
2. The XSS vector is sanitized.
3. The XSS vector is filtered or blocked by the browser.

---

### 4.2 Bypassing Blacklisting Filters
Blacklist filters are the most commonly used due to their ease of implementation. These filters aim to detect specific patterns and prevent malicious behavior. The effectiveness of these filters depends on the accuracy of the patterns they use.

#### 4.2.1 Injecting Script Code
The `<script>` tag is the primary method for executing client-side scripting code such as JavaScript. It is designed for this purpose and is often the first vector that filters block.

##### 4.2.1.1 Bypassing Weak `<script>` Tag Banning
Weak filters may not cover all possible cases, making them vulnerable to bypass. Here are some examples of bypasses for weak rules:

- **Upper- & Lower-case characters:**
  ```html
  <sCriPt>alert(1);</sCriPt>
  ```

- **Upper- & Lower-case characters, without closing tag:**
  ```html
  <sCriPt>alert(1);
  ```

- **Random string after the tag name:**
  ```html
  <ipt>alert(1)</ipt>
  ```

- **Nested tags:**
  ```html
  <script<script>></script>alert(1)</script>
  ```

- **NULL byte (IE up to v9):**
  ```html
  <script\x00>alert(1)</script>
  ```

##### 4.2.1.2 ModSecurity: Script Tag Based XSS Vectors
For example, ModSecurity uses the following rule to filter the `<script>` tag:
```apache
SecRule ARGS "(?i)(]*>[\s\S]*?]*>|]*>[\s\S]*?]*>[\s\S]*?]*>[\s\S]*?]*>)" [continue]
```
Source: [GitHub - owasp-modsecurity-crs](https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/master/base_rules/modsecurity_crs_41_xss_attacks.conf)

Clearly, this is not the only way to inject script code. There are several alternatives, such as using different HTML tags and related event handlers.

##### 4.2.1.3 Beyond `<script>` Tag: Using HTML Attributes
HTML attributes can also be used to inject script code. For example:
```html
<img src="x" onerror="alert(1)">
```

##### 4.2.1.4 Beyond `<script>` Tag: Using HTML Events
HTML events add interactivity between the website and its visitors by executing client-side code. Event handlers typically start with `on` followed by the event name. One of the most commonly used events is `onerror`.

From a defensive perspective, the solution is to filter all events that start with `on*` to block this injection point. A common regex for this is:
```regex
(on\w+\s*=)
```

However, this can be bypassed using a mix of HTML and browser "dynamisms." An improved regex is:
```regex
(?i)([\s\"'`;\/0-9\=]+on\w+\s*=)
```

Some browsers convert control characters to spaces, so the `\s` meta-character is not sufficient. Here are some bypasses for different browsers:

- **Works in all browsers except Safari:**
  ```html
  <img src=x onerror=alert(1)>
  ```

- **IE only:**
  ```html
  <img src=x onerror=alert(1)>
  ```

Thanks to Masato Kinugawa, here is a list of control characters allowed between the event name attribute and the equal sign (`=`), or just before the event name:

- **IExplorer:** `[0x09, 0x0B, 0x0C, 0x20, 0x3B]`
- **Chrome:** `[0x09, 0x20, 0x28, 0x2C, 0x3B]`
- **Safari:** `[0x2C, 0x3B]`
- **Firefox:** `[0x09, 0x20, 0x28, 0x2C, 0x3B]`
- **Opera:** `[0x09, 0x20, 0x2C, 0x3B]`
- **Android:** `[0x09, 0x20, 0x28, 0x2C, 0x3B]`

Gareth Heyes has created two fuzzer tests on Shazzer Fuzz DB to check the characters allowed after and before the attribute name:

- [Characters allowed after attribute name](http://shazzer.co.uk/vector/Characters-allowed-after-attribute-name)
- [Characters allowed before attribute name](http://shazzer.co.uk/vector/Characters-allowed-before-attribute-name)

A valid regex rule should be:
```regex
(?i)([\s\"'`;\/0-9\=\x00\x09\x0A\x0B\x0C\x0D\x3B\x2C\x28\x3B]+on\w+[\s\x00\x09\x0A\x0B\x0C\x0D\x3B\x2C\x28\x3B]*?=)
```

#### 4.2.2 Keyword-Based Filters
Signature-based filters may also block the execution of scripting code by preventing the use of certain keywords, such as `alert`, `javascript`, `eval`, etc. Here are some "alternatives" you can use to bypass these types of filters. Remember, encoding and obfuscation techniques were introduced in Module 1.

##### 4.2.2.1 Character Escaping
JavaScript allows various character escape types that can help execute the code instead of being interpreted as literal form. For example, if a filter blocks the `alert` keyword, you can use Unicode escaping:

- **Unicode Escaping:**
  ```javascript
  \u0061\u006c\u0065\u0072\u0074(1)
  ```

This concludes the introduction to bypassing blacklisting filters. In the next sections, we will explore more advanced techniques for bypassing sanitization and browser filters.

---

**WAPTXv2: Section 01, Module 04 - Caendra Inc. © 2020**