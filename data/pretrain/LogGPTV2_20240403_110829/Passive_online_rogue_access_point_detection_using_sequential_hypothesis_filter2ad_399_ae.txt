A then translates the addresses of the packets and forwards
the packets to the Internet through its Ethernet card.
We conduct an experiment on 10/26/2006. The experi-
ment lasts for about two minutes. We observed 163 ACK-
pairs. Among them, 92% of the ACK-pairs are from web
traﬃc via port 80. The remaining ACK-pairs are from port
1935, which is used by Macromedia Flash Communication
Server MX for the RTMP (Real-Time Messaging Protocol).
The sequential hypothesis test with training makes 37 online
detections, all as WLAN host. On average, one detection is
made in every 4 ACK-pairs. The above results demonstrate
that our test can eﬀectively detect wireless networks behind
NAT boxes.
7.4.2 NATs in the Computer Science Department
Two NAT boxes in the Computer Science Department
provide a free local network to users in the department. A
host may use either Ethernet or WLAN to connect to a NAT
box. All traﬃc through a NAT box will have the IP address
of the NAT box. We monitor the IP addresses of these
two NAT boxes. Our oﬄine detection (from 10/18/2006
to 10/20/2006) and online detection (from 10/25/2006 to
10/27/2006) both indicate a mixture of WLAN and Ether-
net connections. The ACK-pair ratios are higher than that
of WLAN and lower than that of Ethernet hosts, which are
consistent with the setting that these two NAT boxes pro-
vide both WLAN and Ethernet connections.
7.5 Detection of Connection-type Switchings
Next we explore a scenario where an end host may switch
between a wired and wireless connection. Our goal is to
examine whether our detection approach can accurately re-
port the connection switchings. We use an IBM laptop with
both 100 Mbps Ethernet and 54 Mbps 802.11g WLAN con-
nections. This laptop uses a web crawler to download the
ﬁrst 200 web ﬁles from cnn.com (8.3 Mbytes of data) using
Ethernet, and then switches to WLAN to download the ﬁrst
200 web ﬁles from nytimes.com (6.5 Mbytes of data). This
process is repeated for three times. We run the sequential
hypothesis test with training using T = 240µs, K = 106 and
N = 100. Our algorithm makes 284 detections, 283 correct
and one incorrect. The correct detection ratio is 99.65%.
This demonstrates that our approach is eﬀective in detect-
ing connection-type switchings. Therefore, if a host switches
between using Ethernet and WLAN provided by its rogue
AP, our approach can eﬀectively detect this rogue AP.
7.6 Detection under High CPU, Disk or
Network Utilization
We now investigate whether the performance of our ap-
proach will be aﬀected when an end host has very high CPU,
disk or network utilization. For this purpose, we stress ei-
ther the CPU, disk or network connection of an end host,
while downloading the ﬁrst 200 web ﬁles from cnn.com us-
ing a web crawler at the host. For each scenario, we conduct
experiments for both Ethernet and WLAN connections and
detect the connection type using sequential hypothesis test
with training. All experiments are conducted on an IBM lap-
top with both a 100 Mbps Ethernet and a 54 Mbps 802.11g
WLAN connection card.
We stress the CPU (utilization reaching 100%) by run-
ning an inﬁnite loop. For the Ethernet connection, we ob-
serve 1077 ACK-pairs and 53 detections. For the WLAN
connection, we observe 921 ACK-pairs and 123 detections.
All the detections are correct. We stress the hard disk by
running a virus scanning program that scans the disk. For
the Ethernet connection, we observe 1158 ACK-pairs and
57 detections. For the WLAN connection, we observe 872
ACK-pairs and 84 detections. Again, all the detections are
correct.
To stress the network connection, we conduct two sets of
experiments, one stressing the downlink direction by down-
loading a large ﬁle from the local network; the other stressing
the uplink direction by uploading a large ﬁle to the local net-
work. Note that both cases only generate traﬃc in the local
network, not captured at the monitoring point, and hence
does not interfere with data monitoring. When stressing the
downlink, we observe 848 ACK-pairs and 42 detections for
the Ethernet connection; 660 ACK-pairs and 72 detections
for the WLAN connection. When stressing the uplink, we
observe 438 ACK-pairs and 21 detections for the Ethernet
connection; 487 ACK-pairs and 46 detections for the WLAN
connection. All the detections are correct. We observe that
while stressing the downlink or the uplink, the number of
ACK-pairs is signiﬁcantly smaller than that when stressing
CPU or disk. This is due to cross traﬃc generated by the
local downloading or uploading activities. We also observe
that the number of ACK-pairs is less when stressing the up-
link than that when stressing the downlink. This is because
the uploading data packets may be inserted between ACKs
and lead to less ACK-pairs.
In summary, the above results indicate that our detection
approach is eﬀective even when hosts have high CPU, hard
disk or network utilization.
8. DISCUSSIONS
We next discuss several issues related to rogue AP detec-
tion.
8.1 Locating Rogue APs
Our approach to detecting a rogue AP also helps to locate
the rogue AP. Let us consider a common scenario in which a
WLAN host is connected to a rogue AP, which is connected
to an access router via one or multiple switches.
In this
scenario, the rogue AP can be located using the following
steps. First, a network manager detects the IP address of
the WLAN host at the monitoring point, and then locates
the access router of this host based on the host’s IP address
and the subnet addressing structure. From the ARP table at
the access router (which stores the mapping between an IP
address and its corresponding MAC address), the network
manager further determines the MAC address of the WLAN
host. Afterwards, the network manager uses the identiﬁed
MAC address to obtain its corresponding switch port by
SNMP querying the ﬁrst downstream switch connected to
the access router (this is through the switch table at the
switch, which stores the mapping between a MAC address
and a switch port). Last, the network manager sequentially
queries downstream switches (if any) to locate the switch
port (and hence the physical location) of the rogue AP.
8.2 Rogues by Authorized Users
Our scheme can easily detect rogue APs installed by hosts
not authorized to use WLAN. We next discuss the case
that rouges are installed by hosts authorized to use WLAN.
We consider two types of local networks: purely wireless
networks (i.e., all IP addresses are allowed to use wireless
connections) and mixed networks (i.e., networks supporting
both Ethernet and wireless connections).
Purely wireless networks. In such a network, a wireless
host A may set up another wireless card as a rogue AP for
an illegitimate host B (as described in Section 7.4). In this
case, packets from B will have the IP address of A, which is
an authorized WLAN address. Therefore, our scheme does
not detect this type of rogue directly. However, since host
B connects to the Internet through two wireless hops, its
traﬃc characteristics will diﬀer from those through a sin-
gle wireless hop and those through Ethernet, and hence can
be detected through traﬃc analysis. An accurate detection
scheme for this type of rogue is left as future work.
Mixed networks. In such a network, we consider two sce-
narios. In the ﬁrst scenario, the IP address blocks for Ether-
net and WLAN connections do not overlap. Then a host will
have diﬀerent IP addresses for its Ethernet and WLAN con-
nections. In this scenario, if a host authorized to use both
Ethernet and WLAN installs a rogue AP on its Ethernet
connection, the host obtains an IP address in the Ethernet
block and the associated rogue AP will be easily detected by
our scheme. If the host uses its authorized WLAN connec-
tion to connect to the Internet and sets up another wireless
card as a rogue AP for an illegitimate host, then this illegit-
imate host connects to the Internet via two wireless hops,
and can be detected through traﬃc analysis (as described
for purely wireless networks.)
In the second scenario, the IP address blocks for Ethernet
and WLAN connections overlap. Then a host may maintain
the same IP address for both Ethernet and WLAN connec-
tions. Similar to the ﬁrst scenario, we can detect rogue APs
that provide hosts Internet connection using two wireless
hops through traﬃc analysis. However, a host authorized
to use WLAN may also set up a rogue AP on its Ethernet
connection for itself to connect to the Internet. This type of
rogue cannot be detected by our scheme or traﬃc analysis
(since this host only use a single wireless hop). However,
in this case, our scheme can be combined with RF-sensing
schemes so that only hosts in the authorization list need to
be closely monitored by RF sensing.
The above discussions imply that, to achieve tighter secu-
rity, it is better to use separate IP blocks for Ethernet and
WLAN connections.
8.3 Possible attacks to our approach
Our approach is based on inter-ACK times.
It is eﬀec-
tive for the common scenario where a rogue AP is installed
by an innocent user (for convenience or ﬂexibility).
It is
also robust against MAC-address spooﬁng attacks. How-
ever, a rogue AP may change the inter-ACK times to elude
being detected by our algorithms. For instance, it may re-
duce the inter-ACK times by buﬀering ACKs ﬁrst and then
releasing them in a batch in order to disguise the traﬃc
as Ethernet traﬃc. Such a camouﬂage, however, will in-
evitably increase local RTTs (i.e., the portion of RTT inside
the WLAN). Therefore, we may combine inter-ACK time
and local RTT measurement to detect such a camouﬂage.
An eﬀective scheme is left as future work.
9. CONCLUSIONS
In this paper, we have proposed two online algorithms to
detect rogue access points, based on real time passive mea-
surements collected at a gateway router. Both algorithms
exploit the fundamental properties of the 802.11 CSMA/CA
MAC protocol and the half duplex nature of wireless chan-
nels to diﬀerentiate Ethernet and WLAN TCP traﬃc. Cen-
tral to both algorithms are sequential hypothesis tests that
determine a host’s connection type in real time by extending
our earlier TCP ACK-pair techniques [25]. One algorithm
requires training sets, while the other does not. Extensive
experiments in various scenarios and over hosts with various
operating systems have demonstrated the excellent perfor-
mance of our approach: the algorithm that requires training
provides rapid detection and is extremely accurate; the algo-
rithm that does not require training detects 60%-76% of the
wireless hosts without any false positives; both algorithms
require computation and storage well within the capability
of commodity equipment. Furthermore, our scheme can de-
tect connection switchings and wireless networks behind a
NAT box. Last, our scheme remains eﬀective for hosts with
high CPU, hard disk or network utilizations.
Acknowledgements
This research was supported in part by the National Science
Foundation under NSF grants ANI-0325868, ANI-0240487,
ANI-0085848, CNS-0519998, CNS-0519922, CNS-0524323,
and EIA-0080119. Any opinions, ﬁndings, and conclusions
or recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of the
funding agencies. We would like to thank the anonymous
reviewers for their insightful comments, and our shepherd,
Dr. Dina Papagiannaki, for her valuable suggestions on the
ﬁnal version of the paper. We would also like to thank Prof.
Richard S. Ellis (UMass, Amherst), Prof. Guanling Chen
(UMass, Lowell), and Dr. Sharad Jaiswal (Bell lab, In-
dia) for helpful discussions. Last, we wish to thank Rick
Tuthill from the Oﬃce of Information Technology at UMass
Amherst, for helping us understand the UMass network ar-
chitecture, and in the installation and management of the
monitoring equipment.
10. REFERENCES
[1] AirDefense, Wireless LAN Security.
http://airdefense.net.
[2] AirMagnet. http://www.airmagnet.com.
[3] AirWave, AirWave Management Platform.
http://airwave.com.
[4] Cisco Wireless LAN Solution Engine (WLSE).
http://www.cisco.com/en/US/products/sw/cscowork
/ps3915/.
[5] Host AP. http://hostap.epitest.ﬁ.
[6] http://www.endace.com.
[7] Microsoft Windows 2000 TCP/IP implementation
details, http://www.microsoft.com/technet/itsolu
tions/network/deploy/depovg/tcpip2k .mspx.
[8] NetStumbler. http://www.netstumbler.com.
[9] Rogue Access Point Detection: Automatically Detect
and Manage Wireless Threats to Your Network.
http://www.proxim.com.
[10] A. Adya, V. Bahl, R. Chandra, and L. Qiu.
Architecture and techniques for diagnosing faults in
ieee 802.11 infrastructure networks. In Proc. ACM
MOBICOM, September 2004.
[11] P. Bahl, R. Chandra, J. Padhye, L. Ravindranath,
M. Singh, A. Wolman, and B. Zill. Enhancing the
security of corporate Wi-Fi networks using DAIR. In
Proc. ACM MOBISYS, 2006.
[12] V. Baiamonte, K. Papagiannaki, and G. Iannaccone.
Detecting 802.11 wireless hosts from remote passive
observations. In Proc. IFIP/TC6 Networking, Atlanta,
GE, May 2007.
[13] R. Beyah, S. Kangude, G. Yu, B. Strickland, and
J. Copeland. Rogue access point detection using
temporal traﬃc characteristics. In Proc. IEEE
GLOBECOM, Dec 2004.
[14] G. Casella and R. L. Berger. Statistical Inference.
Duxbury Thomson Learning, 2002.
[15] L. Cheng and I. Marsic. Fuzzy reasoning for wireless
awareness. International Journal of Wireless
Information Networks, 8(1), 2001.
[16] S. Garg, M. Kappes, and A. S. Krishnakumar. On the
eﬀect of contention-window sizes in IEEE 802.11b
networks. Technical Report ALR-2002-024, Avaya
Labs Research, 2002.
[17] IEEE 802.11, 802.11a, 802.11b standards for wireless
local area networks.
http://standards.ieee.org/getieee802/802.11.html.
[18] J. Jung, V. Paxson, A. W. Berger, and
H. Balakrishnan. Fast portscan detection using
sequential hypothesis testing. In Proc. IEEE
Symposium on Security and Privacy, May 2004.
[19] C. Mano, A. Blaich, Q. Liao, Y. Jiang, D. Salyers,
D. Cieslak, and A. Striegel. RIPPS: Rogue identifying
packet payload slicer detecting unauthorized wireless
hosts through network traﬃc conditioning. ACM
Transactions on Information Systems and Security, to
appear.
[20] Packet trace analysis.
http://ipmon.sprintlabs.com/packstat/packetoverview.php.
[21] P. Sarolahti and A. Kuznetsov. Congestion control in
Linux TCP. In Proc. USENIX02, June 2002.
[22] A. N. Shiryaev. Probability. Springer, 2nd edition.
[23] K. Thompson, G. Miller, and R. Wilder. Wide-area
Internet traﬃc patterns and characteristics. IEEE
Network, 11(6):10–23, Nov./Dec. 1997.
[24] A. Wald. Sequential Analysis. J. Wiley & Sons, 1947.
[25] W. Wei, S. Jaiswal, J. Kurose, and D. Towsley.
Identifying 802.11 traﬃc from passive measurements
using iterative Bayesian inference. In Proc. IEEE
INFOCOM, 2006.
[26] W. Wei, B. Wang, C. Zhang, J. Kurose, and
D. Towsley. Classiﬁcation of access network types:
Ethernet, wireless LAN, ADSL, cable modem or
dialup? In Proc. IEEE INFOCOM, March 2005.
[27] H. Yin, G. Chen, and J. Wang. Detecting Protected
Layer-3 Rogue APs. In Proceedings of the Fourth
IEEE International Conference on Broadband
Communications, Networks, and Systems
(BROADNETS), Raleigh, NC, September 2007.
APPENDIX
A. PROOF OF THEOREM 1
In the Ethernet setting, we ignore the transmission time of
an ACK since it is negligible. For convenience, we introduce
a time unit of 30 µs. Measurement studies show that the
average packet size on the Internet is between 300 and 400
bytes [23, 20]. For ease of calculation, we assume that all
cross-traﬃc packets are 375 bytes. Then the transmission
time of a cross-traﬃc packet on a 100 Mbps link is 1 time
unit.
Recall that ∆A denotes the inter-ACK time of ACKs A1
and A3. We discretize ∆A using the time unit and denote
the discretized value as IA, that is, IA = ⌊∆A/30⌋. Let
∆D denote the inter-departure time of packets P1 and P3 at
queue QD (i.e., the queue at the router in the direction of
data packets). Similarly, we discretize ∆D and denote the
discretized value as ID, that is, ID = ⌊∆D/30⌋. We next
state three lemmas that are used to prove Theorem 1.