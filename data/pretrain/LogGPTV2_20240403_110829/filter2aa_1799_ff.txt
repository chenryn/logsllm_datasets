Hvix64.exe (or hvax64.exe)
The Windows Hypervisor (Hyper-V). Depending on the proces-
sor architecture, this file could have different names. It’s the 
basic component for Virtualization Based Security (VBS).
Windows boot partition
Ntoskrnl.exe
Initializes executive subsystems and boot and system-start 
device drivers, prepares the system for running native applica-
tions, and runs Smss.exe.
Windows boot partition
Securekernel.exe
The Windows Secure Kernel. Provides the kernel mode services 
for the secure VTL 1 World, and some basic communication 
facility with the normal world (see Chapter 9, “Virtualization 
Technologies”).
Windows boot partition
Hal.dll
Kernel-mode DLL that interfaces Ntoskrnl and drivers to the 
hardware. It also acts as a driver for the motherboard, support-
ing soldered components that are not otherwise managed by 
another driver.
Windows boot partition
Smss.exe
Initial instance starts a copy of itself to initialize each session. 
The session 0 instance loads the Windows subsystem driver 
(Win32k.sys) and starts the Windows subsystem process 
(Csrss.exe) and Windows initialization process (Wininit.exe). All 
other per-session instances start a Csrss and Winlogon process.
Windows boot partition
Wininit.exe
Starts the service control manager (SCM), the Local Security 
Authority process (LSASS), and the local session manager 
(LSM). Initializes the rest of the registry and performs usermode
initialization tasks.
Windows boot partition
Winlogon.exe
Coordinates log-on and user security; launches Bootim and 
LogonUI.
Windows boot partition
CHAPTER 12
Startup and shutdown
781
Component
Responsibilities
Location
Logonui.exe
Presents interactive log on dialog screen.
Windows boot partition
Bootim.exe
Presents the graphical interactive boot menu.
Windows boot partition
Services.exe
Loads and initializes auto-start device drivers and Windows 
services.
Windows boot partition
TcbLaunch.exe
Orchestrates the Secure Launch of the operating system in a 
system that supports the new Intel TXT technology.
Windows boot partition
TcbLoader.dll
Contains the Windows Loader code that runs in the context of 
the Secure Launch.
Windows boot partition
Protective
MBR
Primary
GPT
UEFI
system
partition
Windows
Recovery
petition
Reserved
partition
Windows Boot
Partition
GPT Protective partition
LBA 0
LBA z
Backup GPT
FIGURE 12-2 Sample UEFI hard disk layout.
Another of Setup’s roles is to prepare the BCD, which on UEFI systems is stored in the \EFI\Microsoft 
\Boot\BCD file on the root directory of the system volume. This file contains options for starting 
the version of Windows that Setup installs and any preexisting Windows installations. If the BCD 
already exists, the Setup program simply adds new entries relevant to the new installation. For more 
information on the BCD, see Chapter 10, “Management, diagnostics, and tracing.”
All the UEFI specifications, which include the PEI and BDS phase, secure boot, and many other 
concepts, are available at https://uefi.org/specifications.
The BIOS boot process
Due to space issues, we don’t cover the old BIOS boot process in this edition of the book. The complete 
description of the BIOS preboot and boot process is in Part 2 of the previous edition of the book.
Secure Boot
As described in Chapter 7 of Part 1, Windows was designed to protect against malware. All the old BIOS 
systems were vulnerable to Advanced Persistent Threats (APT) that were using a bootkit to achieve 
stealth and code execution. The bootkit is a particular type of malicious software that runs before 
the Windows Boot Manager and allows the main infection module to run without being detected by 
782
CHAPTER 12
Startup and shutdown
antivirus solutions. Initial parts of the BIOS bootkit normally reside in the Master Boot Record (MBR) 
or Volume Boot Record (VBR) sector of the system hard disk. In this way, the old BIOS systems, when 
switched on, execute the bootkit code instead of the main OS code. The OS original boot code is 
encrypted and stored in other areas of the hard disk and is usually executed in a later stage by the mali-
cious code. This type of bootkit was even able to modify the OS code in memory during any Windows 
boot phase.
As demonstrated by security researchers, the first releases of the UEFI specification were still vul-
nerable to this problem because the firmware, bootloader, and other components were not verified. 
So, an attacker that has access to the machine could tamper with these components and replace the 
bootloader with a malicious one. Indeed, any EFI application (executable files that follow the portable 
executable or terse executable file format) correctly registered in the relative boot variable could have 
been used for booting the system. Furthermore, even the DXE drivers were not correctly verified, al-
lowing the injection of a malicious EFI driver in the SPI flash. Windows couldn’t correctly identify the 
alteration of the boot process.
This problem led the UEFI consortium to design and develop the secure boot technology. Secure 
Boot is a feature of UEFI that ensures that each component loaded during the boot process is digitally 
signed and validated. Secure Boot makes sure that the PC boots using only software that is trusted 
by the PC manufacturer or the user. In Secure Boot, the firmware is responsible for the verification of 
all the components (DXE drivers, UEFI boot managers, loaders, and so on) before they are loaded. If a 
component doesn’t pass the validation, an error message is shown to the user and the boot process 
is aborted. 
The verification is performed through the use of public key algorithms (like RSA) for digital sign-
ing, against a database of accepted and refused certificates (or hashes) present in the UEFI firmware. In 
these kind of algorithms, two different keys are employed: 
I 
A public key is used to decrypt an encrypted digest (a digest is a hash of the executable file
binary data). This key is stored in the digital signature of the file.
I 
The private key is used to encrypt the hash of the binary executable file and is stored in a secure
and secret location. The digital signing of an executable file consists of three phases:
1.
Calculate the digest of the file content using a strong hashing algorithm, like SHA256. A 
strong “hashing” should produce a message digest that is a unique (and relatively small)
representation of the complete initial data (a bit like a sophisticated checksum). Hashing
algorithms are a one-way encryption—that is, it’s impossible to derive the whole file from
the digest.
2.
Encrypt the calculated digest with the private portion of the key.
3.
Store the encrypted digest, the public portion of the key, and the name of the hashing
algorithm in the digital signature of the file.
In this way, when the system wants to verify and validate the integrity of the file, it recalculates the file 
hash and compares it against the digest, which has been decrypted from the digital signature. Nobody ex-
cept the owner of the private key can modify or alter the encrypted digest stored into the digital signature. 
CHAPTER 12
Startup and shutdown
783
This simplified model can be extended to create a chain of certificates, each one trusted by the firm-
ware. Indeed, if a public key located in a specific certificate is unknown by the firmware, but the certifi-
cate is signed another time by a trusted entity (an intermediate or root certificate), the firmware could 
assume that even the inner public key must be considered trusted. This mechanism is shown in Figure 
12-3 and is called the chain of trust. It relies on the fact that a digital certificate (used for code signing)
can be signed using the public key of another trusted higher-level certificate (a root or intermediate
certificate). The model is simplified here because a complete description of all the details is outside the
scope of this book.
reference
End-entity Certificate
Owner’s name
Issuer’s signature
Owner’s public key
Issuer’s (CA’s)
name
Intermediate Certificate
reference
sign
sign
self-sign
Owner’s (CA’s) name
Issuer’s signature
Owner’s public key
Issuer’s (root CA’s)
name
Root Certificate
Root CA’s name
Root CA’s signature
Root CA’s public key
FIGURE 12-3 A simplified representation of the chain of trust.
The allowed/revoked UEFI certificates and hashes have to establish some hierarchy of trust by using 
the entities shown in Figure 12-4, which are stored in UEFI variables:
I 
Platform key (PK) The platform key represents the root of trust and is used to protect the
key exchange key (KEK) database. The platform vendor puts the public portion of the PK into
UEFI firmware during manufacturing. Its private portion stays with the vendor.
I 
Key exchange key (KEK) The key exchange key database contains trusted certificates that
are allowed to modify the allowed signature database (DB), disallowed signature database
(DBX), or timestamp signature database (DBT). The KEK database usually contains certificates of
the operating system vendor (OSV) and is secured by the PK.
Hashes and signatures used to verify bootloaders and other pre-boot components are stored in 
three different databases. The allowed signature database (DB) contains hashes of specific binaries 
or certificates (or their hashes) that were used to generate code-signing certificates that have signed 
bootloader and other preboot components (following the chain of trust model). The disallowed signa-
ture database (DBX) contains the hashes of specific binaries or certificates (or their hashes) that were 
784
CHAPTER 12
Startup and shutdown
compromised and/or revoked. The timestamp signature database (DBT) contains timestamping certifi-
cates used when signing bootloader images. All three databases are locked from editing by the KEK.
KEK–Key exchange key
database
PK–Platform key
DB–allowed signatures
database
DBX–revoked
signatures database
DBT–timestamping
database
FIGURE 12-4 The certificate the chain of trust used in the UEFI Secure Boot.
To properly seal Secure Boot keys, the firmware should not allow their update unless the entity 
attempting the update can prove (with a digital signature on a specified payload, called the authenti-
cation descriptor) that they possess the private part of the key used to create the variable. This mecha-
nism is implemented in UEFI through the Authenticated Variables. At the time of this writing, the UEFI 
specifications allow only two types of signing keys: X509 and RSA2048. An Authenticated Variable may 
be cleared by writing an empty update, which must still contain a valid authentication descriptor. When 
an Authenticated Variable is first created, it stores both the public portion of the key that created it and 
the initial value for the time (or a monotonic count) and will accept only subsequent updates signed 
with that key and which have the same update type. For example, the KEK variable is created using the 
PK and can be updated only by an authentication descriptor signed with the PK.
Note The way in which the UEFI firmware uses the Authenticated Variables in Secure Boot 
environments could lead to some confusion. Indeed, only the PK, KEK, and signatures data-
bases are stored using Authenticated Variables. The other UEFI boot variables, which store 
boot configuration data, are still regular runtime variables. This means that in a Secure Boot 
environment, a user is still able to update or change the boot configuration (modifying even 
the boot order) without any problem. This is not an issue, because the secure verification 
is always made on every kind of boot application (regardless of its source or order). Secure 
Boot is not designed to prevent the modification of the system boot configuration.
CHAPTER 12
Startup and shutdown
785
The Windows Boot Manager
As discussed previously, the UEFI firmware reads and executes the Windows Boot Manager (Bootmgfw.efi). 
The EFI firmware transfers control to Bootmgr in long mode with paging enabled, and the memory 
space defined by the UEFI memory map is mapped one to one. So, unlike wBIOS systems, there’s no 
need to switch execution context. The Windows Boot Manager is indeed the first application that’s 
invoked when starting or resuming the Windows OS from a completely off power state or from hiber-
nation (S4 power state). The Windows Boot Manager has been completely redesigned starting from 
Windows Vista, with the following goals:
I 
Support the boot of different operating systems that employ complex and various boot
technologies.
I 
Separate the OS-specific startup code in its own boot application (named Windows Loader)
and the Resume application (Winresume).
I 
Isolate and provide common boot services to the boot applications. This is the role of the
boot libraries.
Even though the final goal of the Windows Boot Manager seems obvious, its entire architecture is 
complex. From now on, we use the term boot application to refer to any OS loader, such as the Windows 
Loader and other loaders. Bootmgr has multiple roles, such as the following:
I 
Initializes the boot logger and the basic system services needed for the boot application
(which will be discussed later in this section)
I 
Initializes security features like Secure Boot and Measured Boot, loads their system policies,
and verifies its own integrity
I 
Locates, opens, and reads the Boot Configuration Data store
I 
Creates a “boot list” and shows a basic boot menu (if the boot menu policy is set to Legacy)
I 
Manages the TPM and the unlock of BitLocker-encrypted drives (showing the BitLocker unlock
screen and providing a recovery method in case of problems getting the decryption key)
I 
Launches a specific boot application and manages the recovery sequence in case the boot has
failed (Windows Recovery Environment)
One of the first things performed is the configuration of the boot logging facility and initialization of 
the boot libraries. Boot applications include a standard set of libraries that are initialized at the start of 
the Boot Manager. Once the standard boot libraries are initialized, then their core services are available 
to all boot applications. These services include a basic memory manager (that supports address transla-
tion, and page and heap allocation), firmware parameters (like the boot device and the boot manager 
entry in the BCD), an event notification system (for Measured Boot), time, boot logger, crypto modules, 
the Trusted Platform Module (TPM), network, display driver, and I/O system (and a basic PE Loader). The 
reader can imagine the boot libraries as a special kind of basic hardware abstraction layer (HAL) for the 
Boot Manager and boot applications. In the early stages of library initialization, the System Integrity 
boot library component is initialized. The goal of the System Integrity service is to provide a platform 
for reporting and recording security-relevant system events, such as loading of new code, attaching a 
786
CHAPTER 12
Startup and shutdown
debugger, and so on. This is achieved using functionality provided by the TPM and is used especially for 
Measured Boot. We describe this feature later in the chapter in the “Measured Boot” section.
To properly execute, the Boot Manager initialization function (BmMain) needs a data structure 
called Application Parameters that, as the name implies, describes its startup parameters (like the 
Boot Device, BCD object GUID, and so on). To compile this data structure, the Boot Manager uses the 
EFI firmware services with the goal of obtaining the complete relative path of its own executable and 
getting the startup load options stored in the active EFI boot variable (BOOT000X). The EFI specifica-
tions dictate that an EFI boot variable must contain a short description of the boot entry, the complete 
device and file path of the Boot Manager, and some optional data. Windows uses the optional data to 
store the GUID of the BCD object that describes itself.
Note The optional data could include any other boot options, which the Boot Manager will 
parse at later stages. This allows the configuration of the Boot Manager from UEFI variables 
without using the Windows Registry at all.
EXPERIMENT: Playing with the UEFI boot variables
You can use the UefiTool utility (found in this book’s downloadable resources) to dump all the 
UEFI boot variables of your system. To do so, just run the tool in an administrative command 
prompt and specify the /enum command-line parameter. (You can launch the command 
prompt as administrator by searching cmd in the Cortana search box and selecting Run As 