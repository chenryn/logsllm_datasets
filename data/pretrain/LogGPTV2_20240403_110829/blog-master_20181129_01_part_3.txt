select id from test_sig order by (('('||c2||')')::cube)  cube '(%s)' limit %s  
$_$,vc2,lmt1),  
format(  
$_$  
select id from test_sig order by (('('||c3||')')::cube)  cube '(%s)' limit %s  
$_$,vc3,lmt1),  
format(  
$_$  
select id from test_sig order by (('('||c4||')')::cube)  cube '(%s)' limit %s  
$_$,vc4,lmt1),  
format(  
$_$  
select id from test_sig order by (('('||c5||')')::cube)  cube '(%s)' limit %s  
$_$,vc5,lmt1)];  
  foreach vsql in array sql loop    
    perform conn(app_prefix||i,  conn||app_prefix||i);     
    perform id from dblink_get_result(app_prefix||i, false) as t(id int);      
    perform dblink_send_query(app_prefix||i, vsql);       
    i := i+1;  
  end loop;    
  ts1 := clock_timestamp();    
  for i in 1..5 loop    
    select array_agg(id) into ids from dblink_get_result(app_prefix||i, false) as t(id int);      
    ids1 := ids1||ids;  
  end loop;    
  raise notice '%', clock_timestamp()-ts1;   
  return query execute  
  format($_$  
  select * from test_sig where id = any (%L) order by (('('||c1||','||c2||','||c3||','||c4||','||c5||')')::cube)    
cube '(%s,%s,%s,%s,%s)'   
limit %s $_$,ids1,vc1,vc2,vc3,vc4,vc5,lmt2);  
  return;    
end;    
$$ language plpgsql strict;   
```  
4、性能测试  
```  
select * from parallel_img_search(  
'4010,8018,7566,9150,5278,7782,5188,7960,98,5960,9605,6981,6882,9398,2356,8905',  
'4811,2484,345,2856,5851,4647,5846,246,1029,5395,5519,1372,966,2449,1414,4976',  
'467,8980,4127,5745,6762,9314,3705,6860,5274,3311,3842,2156,2708,6197,1061,7519',  
'8682,1406,375,4533,6053,6221,4778,7083,1616,297,8454,2581,2746,9869,7558,3213',  
'8849,1684,8958,5611,998,2663,2471,6273,5974,6312,8429,8682,2510,9490,6201,1191',  
100,  
1  
)  
as t (id int, c1 text, c2 text, c3 text, c4 text, c5 text);  
-[ RECORD 1 ]-----------------------------------------------------------------------  
id | 747179  
c1 | 2078,3409,9574,9870,3416,1144,494,7580,582,4150,4434,5115,4206,8239,2058,9233  
c2 | 6658,1164,1592,4742,5276,2063,3176,2736,2019,9209,5868,2924,1246,3781,8324,3324  
c3 | 7191,7898,3194,606,9042,3688,8187,9625,7838,2621,4740,2044,860,6798,1277,7519  
c4 | 7962,2869,2261,3238,4932,5436,5974,6951,4645,1841,9875,5891,5623,8199,9215,2813  
c5 | 6097,2409,3420,5140,6097,1607,4764,3935,4228,9504,5979,5088,6302,7256,2607,4265  
Time: 356.775 ms  
```  
### 性能对比  
查询方法 | 速度  
---|---  
全表扫描 | 14.5 秒  
80维索引加速查询 | -   
CTE 分组(每组16维)查询（索引加速） | 1.6 秒  
异步调用 分组(每组16维)查询（索引加速） | 356 毫秒  
## 其他优化方法  
1、复合索引  
如果查询除了有向量距离，还有其他查询条件，可以建立组合索引。  
```  
create extension btree_gist;  
```  
2、降维，类似图层  
前面已提及，可以做压缩降维，在少量维度上计算得到TOP N条，然后再精细排序。  
3、拆表，使用 dblink异步并行  
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 2 - 单机分区表 (dblink 异步调用并行) (4亿图像)》](../201809/20180904_03.md)    
4、使用citus 插件 sharding  
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 3 - citus 8机128shard (4亿图像)》](../201809/20180904_04.md)    
## 100维向量相似压测方法
2亿条记录，每条记录100维，求KNN相似，如何压测？  
```
CREATE OR REPLACE FUNCTION public.f()
 RETURNS cube
 LANGUAGE sql
 STRICT
AS $function$
  select cube(x.x) from (select array(select trunc(100*random()::numeric,3) from generate_series(1,100))x )x;
$function$;
create table te(id int , c cube);
create index idx_te on te using gist(c);
vi test.sql
insert into te select generate_series(1,1000), f();
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 50 -j 50 -t 4000
explain (analyze,verbose,timing,costs,buffers) select * from te order by c  cube '(86.649, 23.444, 10.261, 32.764, 41.385, 33.2, 35.308, 60.326, 33.755, 58.559, 45.206, 81.782, 67.243, 41.497, 26.566, 6.446, 21.066, 56.709, 37.345, 41.49, 50.515, 75.564, 80.019, 19.847, 59.982, 62.648, 50.972, 70.709, 62.076, 57.32, 57.874, 88.445, 38.371, 89.238, 66.494, 38.133, 93.235, 0.35, 46.146, 29.582, 83.396, 70.264, 36.745, 9.157, 92.957, 99.022, 69.681, 42.126, 51.111, 5.524, 75.481, 65.783, 91.535, 73.789, 91.085, 83.106, 76.076, 77.69, 2.664, 81.889, 37.759, 51.238, 92.073, 18.739, 90.123, 41.22, 88.389, 10.216, 41.587, 86.028, 4.491, 54.123, 98.451, 45.023, 82.749, 37.152, 32.371, 51.147, 5.345, 15.876, 83.186, 52.648, 92.457, 26.712, 13.899, 32.76, 15.188, 47.638, 90.15, 66.427, 66.689, 6.065, 21.811, 66.388, 42.496, 79.656, 42.514, 45.31, 84.432, 41.560)' limit 1;
```
## 参考  
https://github.com/postgrespro/imgsmlr  
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 3 - citus 8机128shard (4亿图像)》](../201809/20180904_04.md)    
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 2 - 单机分区表 (dblink 异步调用并行) (4亿图像)》](../201809/20180904_03.md)    
[《PostgreSQL 11 相似图像搜索插件 imgsmlr 性能测试与优化 1 - 单机单表 (4亿图像)》](../201809/20180904_02.md)    
[《PostgreSQL 相似搜索插件介绍大汇总 (cube,rum,pg_trgm,smlar,imgsmlr,pg_similarity) (rum,gin,gist)》](../201809/20180904_01.md)    
[《PostgreSQL 多维空间几何对象 相交、包含 高效率检索实践 - cube》](../201810/20181015_01.md)    
[《PostgreSQL 相似人群圈选，人群扩选，向量相似 使用实践 - cube》](../201810/20181011_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")