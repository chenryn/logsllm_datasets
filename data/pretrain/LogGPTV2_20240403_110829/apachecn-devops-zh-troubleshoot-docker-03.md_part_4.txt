```
$ docker run -rm -it de1d48805de2 bash -il 
root@ecd3ab97cad4:/# ls -l /tmp 
total 4 
-rw-r-r-- 1 root root 4 Jul 3 12:14 trouble.txt 
root@ecd3ab97cad4:/# cat /tmp/trouble.txt 
trouble 
root@ecd3ab97cad4:/#
```
## 附加示例
最后一个例子是注释掉下面的 Dockerfile，包括违规的行。然后，我们能够手动运行容器和 docker 命令，并以正常方式查看日志。在本例中，Dockerfile:
```
RUN trouble 
RUN shoot 
RUN debug 
```
此外，失败是在拍摄，然后评论如下:
```
RUN trouble 
# RUN shoot 
# RUN debug 
```
然后，构建并运行:
```
$ docker build -t trouble . 
$ docker run -it trouble bash 
container# shoot 
...grep logs...
```
## 检查失败的容器进程
即使您的容器从命令行成功运行，检查任何失败的容器进程、不再运行的容器以及检查我们的容器配置也是有益的。
运行以下命令检查失败或不再运行的容器，并注意`CONTAINER ID`检查给定容器的配置:
```
$ sudo docker ps -a
```
注意容器的**状态**。如果您的任何容器，**状态**显示除`0`以外的退出代码，则可能是容器的配置有问题。举例来说，错误的命令会导致退出代码为`127`。有了这些信息，您可以对任务定义`CMD`字段进行故障排除以进行调试。
尽管有些受限，但我们可以进一步检查容器，了解更多故障排除细节:
```
$ sudo docker inspect 
```
最后，让我们也分析一下容器的应用日志。此处输出容器启动失败的错误消息:
```
$ sudo docker logs 
```
## 其他潜在有用的资源
`$ sudo docker` top 给了我们一个在容器内部运行的进程列表。
当您需要比`top`提供的更多一点的细节时，可以使用`$ sudo docker htop`以一种方便的、光标控制的方式。`htop`启动比`top`快，可以纵横滚动列表查看所有进程，完成命令行，不需要输入进程号就可以终止进程，也不需要输入优先级值就可以接收进程。
到本书付印时，对容器和映像进行故障排除的机制可能已经有了显著的改进。除了肯定会带来额外选择的市场力量之外，Docker 社区正把更多的焦点放在*预定义的*报告和监控解决方案上。
## 使用 sysdig 进行调试
如同任何更新的技术一样，它们固有的一些初始复杂性会被及时调试，并且开发更新的工具和应用来增强它们的使用。正如我们已经讨论过的，容器现在肯定属于这一类。虽然我们在 Docker 注册表中看到了官方标准化映像可用性的提高，但我们现在也看到了帮助我们有效管理、监控和排除容器故障的新兴工具。
![Using sysdig to debug](img/image_03_016.jpg)
Sysdig 为容器提供应用监控[Image 版权所有 2014 Draios，Inc.]
**Sysdig**([http://www.sysdig.org/](http://www.sysdig.org/)[)](http://www.sysdig.org/)就是这样一个工具。作为一个面向容器化环境的系统级探索和故障排除可见性的 *au courant* 应用，`sysdig`的美妙之处在于我们能够从外部访问容器数据(尽管`sysdig`实际上也可以安装在容器内部)。从最高层面来看，`sysdig`给我们的容器管理带来的是:
*   能够访问和审查每个容器中的流程(包括内部和外部 PID)
*   能够深入到特定容器中
*   能够轻松过滤用于流程审查和分析的容器集
Sysdig 提供有关 CPU 使用、I/O、日志、网络、性能、安全性和系统状态的数据。重复一遍，这一切都可以从外部完成，不需要在我们的容器中安装任何东西。
我们将继续并有价值地使用本书中的`sysdig`来监控和排除与我们的容器相关的特定过程，但是现在我们将提供几个例子来排除我们的基本容器过程和日志。
让我们通过把它安装在我们的主机上来挖掘`sysdig`，展示它能为我们和我们的容器做什么！
### 单步安装
`sysdig`的安装可以通过以 root 身份执行以下命令或使用`sudo`一步完成:
```
curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash
```
### 注
**注:** `sysdig`目前原生包含在最新的 Debian 和 Ubuntu 版本中；但是，建议更新/运行最新软件包的安装。
### 高级安装
根据`sysdig` wiki，高级安装方法可能对脚本部署或容器化环境有用。也很容易；RHEL 和 Debian 系统采用了先进的安装方法。
### 什么是凿子？
首先，我们应该了解一下它的一些说法，特别是**凿子**。在`sysdig`中，凿子是分析`sysdig`事件流以执行有用动作的小脚本(用 Lua 编写)。事件被有效地带到用户级别，用上下文丰富，然后脚本可以应用到它们。凿子在实时系统上运行良好，但也可以与跟踪文件一起用于离线分析。你可以同时运行任意多个凿子。例如:
`topcontainers_error`凿子会根据错误的数量向我们显示最上面的容器。
有关 sysdig 凿子的列表:
`$ sysdig -cl`(使用`-i`标志获取特定凿子的详细信息)
**单容器流程分析**
使用`topprocs_cpu`凿子的例子，我们可以应用过滤器:
```
$ sudo sysdig -pc -c topprocs_cpu container.name=zany_torvalds
```
以下是示例结果:
```
CPU%          Process       container.name   
------------------------------------------ 
02.49%        bash          zany_torvalds 
37.06%        curl          zany_torvalds 
0.82%         sleep         zany_torvalds
```
与使用`$ sudo docker top`(和类似的)不同，我们可以准确地确定我们希望看到哪些容器的流程；例如，以下示例向我们展示了仅来自`wordpress`容器的流程:
```
$ sudo sysdig -pc -c topprocs_cpu container.name contains wordpress 
CPU%           Process         container.name   
-------------------------------------------------- 
5.38%          apache2         wordpress3 
4.37%          apache2         wordpress2 
6.89%          apache2         wordpress4 
7.96%          apache2         wordpress1
```
**其他有用的系统凿子&语法**
*   `topprocs_cpu`按 CPU 使用率显示顶级进程
*   `topcontainers_file`按 R+W 磁盘字节显示顶级容器
*   `topcontainers_net`按网络输入/输出显示顶部容器
*   `lscontainers`将列出正在运行的容器
*   `$ sudo sysdig -pc -cspy_logs`每屏分析所有日志
*   `$ sudo sysdig -pc -cspy_logs container.name=zany_torvalds`打印容器的日志`zany_torvalds`
## 故障排除-一个开放的社区在等着你
总的来说，你可能面临的大多数问题可能已经被其他人经历过，在某个地方和某个时间之前。Docker 和开源社区、IRC 渠道和各种搜索引擎可以提供高度可访问的结果信息，并可能为您提供复杂情况和条件的答案。充分利用开源社区(特别是 Docker 社区)来获得您想要的答案。就像任何新兴技术一样，一开始，我们都在一起学习！
# 自动化映像构建
有很多方法可以让我们构建容器映像的过程自动化；太多了，无法在一本书中合理地提供方法的完整披露。在本书后面的章节中，我们将更深入地研究一系列自动化选项和工具。在这个特殊的例子中，我们只是使用我们的 Dockerfile 来谈论自动化。我们已经一般性地讨论了 Dockerfiles 可以用于自动化我们的映像构建，所以让我们具体来看一下 docker files 自动化。
## 单元测试部署
在构建过程中，Docker 允许我们运行任何命令。让我们利用这一点，在构建我们的映像时启用单元测试。这些单元测试有助于在我们将生产映像推向试运行或部署之前识别出其中的问题，并且将至少部分地按照我们预期的方式验证映像的功能。如果单元测试成功运行，我们有一定程度的信心，相信我们的服务有一个有效的运行时环境。这也意味着，如果测试失败，我们的构建将会失败，从而有效地将一个不工作的映像排除在生产之外。
使用我们之前的`cloudconsulted/joomla`存储库映像，我们将建立一个自动化构建的示例工作流，并进行测试。 **PHPUnit** 是我们将使用的，因为它被 Joomla 正式使用！项目的开发团队，因为它可以方便地对我们的整个栈运行单元测试 Joomla 代码、Apache、MySQL 和 PHP。
进入`cloudconsulted/joomla`(在我们的例子中为`dockerbuilder`)的 Dockerfile 目录，并按如下方式进行更新。
执行以下命令安装 PHPUnit:
```
[# install composer to a specific directory 
curl -sS https://getcomposer.org/installer | php -- --install-dir=bin 
# use composer to install phpunit 
composer global require "phpunit/phpunit=4.1.*"]
```
还可以通过执行以下命令来安装 PHPUnit:
```
[# install phpunit 
wget https://phar.phpunit.de/phpunit.phar 
chmod +x phpunit.phar 
mv phpunit.phar /usr/local/bin/phpunit 
# might also need to put the phpunit executable placed here? test this: 
cp /usr/local/bin/phpunit /usr/bin/phpunit]
```
现在，让我们用`phpunit:`运行我们的单元测试
```
# discover and run any tests within the source code 
RUN phpunit 
```
我们还需要确保我们对映像中的资产进行单元测试:
```
# copy unit tests to assets 
COPY test /root/test 
```
最后，让我们打扫一下房子。为了确保我们的生产代码不能(意外地或以其他方式)依赖于测试代码，一旦单元测试完成，我们应该删除那些测试文件:
```
# clean up test files 
RUN rm -rf test 
```
我们对 Dockerfile 的全部更新包括:
```
wget https://phar.phpunit.de/phpunit.phar 
chmod +x phpunit.phar 
mv phpunit.phar /usr/local/bin/phpunit 
RUN phpunit   
COPY test /root/test 
RUN rm -rf test 
```
现在，我们有了一个脚本化的 Dockerfile，每次我们构建这个映像时，它都会完全测试我们的 Joomla 代码、Apache、MySQL 和 PHP 依赖项，作为构建过程的字面部分。结果是经过测试的、可再现的生产环境！
## 自动化测试部署
随着我们对为部署生产可行映像信心的增强，这一构建过程仍然需要开发人员或 DevOps 工程师在每次生产推进之前重建映像。相反，我们将依赖于 Docker 和 GitHub 存储库中的自动化构建。
我们的 GitHub 和 Docker Hub 存储库将用于自动化我们的构建。通过在 GitHub 上维护我们的 Docker 文件、依赖项、相关脚本等，任何推送或提交更新存储库文件的操作都会自动强制将更新推送至同步的 Docker Hub 存储库。我们在 Docker Hub 上拉取的生产映像会自动更新任何新的构建信息。
Docker Clouds 是完成应用生命周期的最新产品之一，它提供了带有构建和测试工具的托管注册服务。Docker Cloud 扩展了 Tutum 的功能，并带来了与 Docker Hub 更紧密的集成。借助 Docker Cloud 系统，管理员只需点击几下鼠标，就可以在云中部署和扩展应用。持续交付与构建、测试和部署工作流集成并自动化的代码。它还提供了整个基础设施容器的可见性，并访问编程 RESTful APIs 以获得一个开发人员友好的 CLI 工具。因此，Docker Cloud 可以用于自动化构建过程和测试部署。
以下是 Docker 云的重要特性:
*   允许构建 Docker 映像，也允许将云存储库链接到源代码，以便简化映像构建过程
*   它允许链接您的基础架构和云服务，以自动调配新节点
*   一旦构建了映像，它就可以用于部署服务，并且可以与 Docker Cloud 的服务和微服务集合相链接
*   测试模式下的集群管理可用于在 Docker cloud 内创建集群，或使用 Docker ID 将现有集群注册到 Docker cloud
# 总结
Docker 和 Dockerfiles 在整个应用开发周期中提供了可重复的过程，为开发人员和 DevOps 工程师提供了一个独特的工具——生产就绪部署，注入了测试映像的信心和自动化的便利性。这为最需要的人提供了高水平的授权，并带来了经过测试和生产就绪的映像构建的持续交付，我们可以完全自动化该构建，并将其扩展到我们的云中。
在本章中，我们了解到生产就绪型应用容器化中的一项关键任务是映像构建。构建基础映像和分层映像以及避免故障排除区域是我们讨论的主要主题。在构建基础映像时，我们看到 Docker 注册表提供了大量经过验证的映像，我们可以自由地将其用于可重复的过程。我们还从零开始手动搜索建筑映像。接下来，我们探索了用 Dockerfile 构建分层映像，并详细登记了 Dockerfile 命令。最后，一个示例工作流说明了自动映像构建，以及映像和容器的烘焙测试。自始至终，我们都强调了故障排除领域和选项的方法和途径。
为应用容器构建简洁的 Docker 映像对于应用的功能和可维护性至关重要。既然我们已经了解了构建基础和分层映像以及解决这些问题的基本方法，我们将期待构建真正的应用映像。在我们的下一章中，我们将学习使用一组合适的映像来规划和构建多层应用。