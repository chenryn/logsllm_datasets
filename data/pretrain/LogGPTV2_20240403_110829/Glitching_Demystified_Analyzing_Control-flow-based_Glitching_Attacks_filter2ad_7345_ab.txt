and and or operations). We also tested bidirectional bit ﬂips
(i.e., xor), and the results were in between the those of and
and or, which are shown here.
Trigger OffsetWidthOffset(a) AND
they were ﬂipped, i.e., 1s to 0s (AND) or 0s to 1s (OR), computed by taking every possible combination, i.e.,(cid:0)n
Fig. 2: The probability of a glitch succeeding on ARM Thumb as a function of the number of bits that were ﬂipped and how
(cid:1), of bits for
(b) OR
(c) AND (0x0000 Invalid)
each ﬂip value and creating a bit mask that was either ANDed or ORed with the original instruction. The reasons for the
failures are shown in the accompanying histograms.
k
We implemented our glitch emulator using Unicorn [53]
for central processing unit (CPU) emulation, Capstone [62]
for disassembling code, and Keystone [63] for assembly. All
of our test cases are manually written for the instruction
in question such that a successful glitch (i.e., the targeted
instruction was skipped) will place the value 0xdead in a
known register, and a normal execution will place the value
0xaaaa in a separate known register. Because these snippets
of code are so small (e.g., 3-5 lines of assembly), we are
able to completely isolate the instruction in question. Our
automated framework takes this source code, assembles it to
machine code, and then generates every possible bit mask for
every possible number of bits. More precisely, it produces
(cid:1) possible bit masks for each k, where n is the number
k
of bits in the instruction and k is the number of bits being
mutated. These bit masks are then either ANDed or ORed with
the target instruction and then the entire program is executed
in an emulator. Upon completion, the register values and error
codes are read to log the result.
(cid:0)n
We used this framework to quantify the effects of glitching
on the popular 16 bit ARM Thumb architecture. The results for
every conditional branch instruction in ARM Thumb under the
AND and OR perturbation conditions can be seen in Figure 2.
In these ﬁgures, a glitch is considered a “success” if the in-
struction immediately following the conditional branch, which
would otherwise not be executed, was executed successfully.
The failures are grouped in the following way: a bad read
is when the system attempted to read unmapped memory;
an invalid instruction is thrown when the emulator did not
recognize the perturbed instruction; a bad fetch is thrown when
an instruction was fetched from unmapped memory (e.g., the
PC was modiﬁed); an unknown failure is any unrecognized
error; and, if the modiﬁcation had no effect on the execution
of the code, we annotate it as such.
One immediate observation is that the AND model exhibits
a substantially higher success rate than the OR model. Ini-
tially we hypothesized that this was because in our experi-
ments, the conditional branches had a relatively low Ham-
ming weight (e.g., beq #6 is repressed as 0b1101 0000
00000000 [3]), and thus converting them all to zeros, which
is interpreted as mov r0, r0 (or no operation) in ARM
Thumb, was highly likely. However, after modifying our
emulator to interpret all 0s as an invalid instruction this
hypothesis was quickly debunked since the overall success rate
was effectively unchanged (see Figure 2c). Thus, it appears
that the ISA itself is simply vulnerable to glitches that are
capable of ﬂipping 1s to 0s, which is, unfortunately, the most
likely effect of the cheaper, more popular forms of glitching
(i.e., voltage and clock). Nevertheless, in practice, we hypoth-
esize that a minor modiﬁcation like this to the ISA could
pay large dividends. Similarly, adding invalid instructions in
between valid instructions would likely thwart many glitching
attempts. However, the only way to test these hypotheses
against physical glitches would be to fabricate a microchip
with a modiﬁed ISA, which is out of scope for this work.
V. REAL-WORLD GLITCHING
To glean insights into real-world glitching effects, we
employed the popular open-source ChipWhisperer Lite, a
suite of hardware and software tools that enable glitching
and side-channel analysis. In our experiments, we wanted
to evaluate the upper bound of glitching effectiveness (i.e.,
the best case scenario for an attacker, and the worst case
scenario for the system being glitched). Therefore, we used
the STM32F071RBT6, a 48 MHz ARM Cortex M0 chip
with a 3-stage pipeline, as our target board, and drove the
clock directly from the ChipWhisperer (i.e., the most powerful
glitching attack proposed by previous work). Similarly, we
0x0000Unmodified# of 1s in Bitmask020406080100Success Rate (%)BVCBGEBVSBEQBLTBCCBLEBLSBHIBMIBGTBCSBPLBNEBLTBVSBMIBHIBLEBEQBCCBGTBGEBVCBLSBNEBPLBCSInstruction020406080100Percentage of Results (%)SuccessBad ReadBad FetchFailedNo EffectUnmodified0xFFFF# of 1s in Bitmask020406080100Success Rate (%)BVCBGEBVSBEQBLTBCCBLEBLSBHIBMIBGTBCSBPLBNEBMIBCSBGEBGTBLSBNEBEQBVSBVCBLEBCCBPLBHIBLTInstruction020406080100Percentage of Results (%)SuccessBad ReadInvalid InstructionBad FetchFailedNo Effect0x0000Unmodified# of 1s in Bitmask020406080100Success Rate (%)BVCBGEBVSBEQBLTBCCBLEBLSBHIBMIBGTBCSBPLBNEBLTBVSBMIBHIBLEBEQBCCBGTBGEBVCBLSBNEBPLBCSInstruction020406080100Percentage of Results (%)SuccessBad ReadInvalid InstructionBad FetchFailedNo EffectTABLE I: The number of successful glitches for each clock cycle, mapped to the respective instruction that was executing and
with a post-mortem view of the comparator register
Count
Cycle
Instruction
Successes
R3
Count
Cycle
Instruction
Successes
R2
Count
Cycle
Instruction
Successes
0
MOV R3, SP
110
1
ADDS R3, #7
2 LDRB R3, [R3]
3
CMP R3, #0
BEQ .loop
4
5
6
7
9
-
18
43
89
133
183
R3
0
8
8
-
0
0
8
0x55
0xFF
0x21
0x68
44
32
33
1
8
1
-
18
1
37
2
0x20003FE8 3
41
4
0x20003FE8 44
49
3
0x20003FE8 73
0x20003FEF 2
6
0x28004309
41
102
0x20003FE8 36
0x28004309
1
0x40007FD7 1
0xDFFFC010 1
0xFFFFFFF9 1
0x55
0x55
0
8
8
8
MOV R3, SP
ADDS R3, #7
LDRB R3, [R3]
CMP R3, #0
BNE .loop
0
1
2
3
4
5
6
7
84
14
-
-
-
9
39
126
0
0
1
0x55
0x55
0x68
0xFF
11
38
33
1
1
4
10
-
-
-
9
32
0x20003FF6 1
4
39
1
82
-
-
-
0
0x55
0x55
0
1
8
LDR R2,[SP,#0x10+a]
LDR R3,=0xD3B9AEC6
CMP R2, R3
BNE .loop
0
1
2
3
4
5
6
7
25
-
-
1
1
46
150
129
0
-
-
1
0x4EE6BB18 1
0xE7D25763 23
-
-
0xE7D25763 1
0xD3B9AEC61
0xD3B9AEC61
0xE7D25763 45
2
2
0xE7D25722 1
0xE7D25763145
1
1
0xE7D25763127
0x40
0x400
0x40
0x400
Total
585 (0.705%)
12 unique
Total
272 (0.347%)
7 unique
(a) while(!a), R3=0x1000
(b) while(a), R3=0x1000
Total
352 (0.449%)
7 unique
while(a!=0xD3B9AEC6),
(c)
R2=0x48000028, R3=0x1000
created a perfect trigger for each instruction sequence that
we wanted to glitch. More precisely, our trigger would apply
voltage to a general purpose input/output (GPIO) pin exactly
1 clock cycle before the targeted instruction, which permitted
precise, reliable glitches to be injected. These conditions are
ideal for an attacker and should provide a reasonable upper
bound on the capabilities of glitching attacks. Choosing a more
advanced chip, a more complex “real-world” ﬁrmware, or
different glitching mechanism would likely inﬂate the ﬁndings
of GLITCHRESISTOR, since producing successful glitches
would be more difﬁcult, especially as code complexity and
chip complexity increase. Thus, these smaller, controllable
experiments against the most powerful glitching technique are,
counter-intuitively, a more stringent analysis of GLITCHRE-
SISTOR than a more modern chip with real ﬁrmware. We
investigate the following research questions:
RQ2 What is the upper bound of glitching effectiveness?
RQ3 Does the value being compared affect its glitchability?
RQ4 How are branches being “skipped” (i.e., which instruc-
tion is being corrupted, and in which way)?
RQ5 How much more difﬁcult is a multi-glitch (i.e., a glitch
that affects multiple instructions)?
A. Glitching Effects
In theory, the actual value being compared should affect the
ability to glitch a certain branch. For example, glitching a 1
into a 0 should be easier than glitching 0b1010 into 0b0101.
To test
this, we constructed three distinct experiments to
evaluate the following expressions: while(a), where a=1;
while(!a), where a=0; and while(a!=0xD3B9AEC6),
where a=0xE7D25763. These are all implemented as empty
inﬁnite loops, with volatile variables so they are not opti-
mized out by the compiler (a successful glitch would exit the
loop). The hypothesis is that while(a) and while(!a),
which are common in C code, should be much easier to glitch
than values with a large Hamming distance, as they both
only require a single bit ﬂip to change the outcome of the
conditional branch.
To evaluate the effects of glitching on these three loops, we