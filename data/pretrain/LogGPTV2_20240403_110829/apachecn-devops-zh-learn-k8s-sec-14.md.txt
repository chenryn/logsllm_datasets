# 十四、答案
# 第一章
1.  扩展、运营成本和更长的发布周期。
2.  主组件在主节点上运行。这些组件负责管理工作节点。主组件包括`kube-apiserver`、`etcd`、`kube-scheduler`、`kube-controller-manager`、`cloud-controller-manager`和`dns-server`。
3.  Kubernetes 部署有助于根据标签和选择器向上/向下扩展 Pod 。部署封装了副本集和荚。部署的 YAML 规范由许多 Pod 实例和`template`组成，这与 Pod 规范相同。
4.  OpenShift、K3S 和 Minikube。
5.  Kubernetes 环境是高度可配置的，由无数组件组成。不安全默认值的可配置性和复杂性是一个令人担忧的大问题。此外，损害集群中的主组件是导致违规的最简单方法。
# 第二章
1.  PODS。
2.  网络命名空间和 IPC 命名空间。
3.  一个占位符，用于保存其他容器的网络命名空间。
4.  集群 IP、节点端口、负载平衡器和外部名称。
5.  入口支持第 7 层路由，不需要云提供商提供额外的负载平衡器，而负载平衡器服务要求每个服务有一个负载平衡器。
# 第三章
1.  威胁建模是从设计阶段开始的迭代过程。
2.  最终用户、内部攻击者和权限攻击者。
3.  存储在`etcd`中的未加密数据。
4.  Kubernetes 环境的复杂性增加了在 Kubernetes 环境中使用威胁建模应用的难度。
5.  Kubernetes 引入了额外的资产和与应用的交互。这增加了 Kubernetes 中应用的复杂性，增加了攻击面。
# 第四章
1.  `Role`对象包含由动词和资源组成的规则，这些规则指示命名空间中资源的操作权限。
2.  一个`RoleBinding`对象将命名空间中的`Role`对象链接到一组主体(例如，`User`和`ServiceAccount`)。它用于将角色对象中定义的权限授予主体。
3.  `RoleBinding`表示主体拥有的权限在`RoleBinding`对象的名称空间中有效。`ClusterRoleBinding`表示受试者拥有的权限在整个集群中有效。
4.  `hostPID`、`hostNetwork`和`hostIPC`。
5.  使用出口规则为 Pod 创建网络策略。
# 第五章
1.  主组件、工作组件和 Kubernetes 对象。
2.  Pod、服务/入口、`api-server`、节点和命名空间。
3.  RBAC 和网络政策。
4.  Pod 中的进程可以访问主机 PID 命名空间，查看工作节点中运行的所有进程。
    ```
    kind: NetworkPolicy
    metadata:
      name: allow-good
    spec:
      podSelector:
        matchLabels:
          app: web
      policyTypes:
      - Ingress
      ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              from: 
    ```
# 第六章
1.  基于令牌的身份验证支持使用静态令牌来识别群集中请求的来源。如果不重新启动应用编程接口服务器，静态令牌将无法更新，因此不应使用。
2.  `NodeRestriction`准入控制器确保 kubelet 只能修改其运行节点的节点和 Pod 对象。
3.  将`--encryption-provider-config`传递给 API 服务器，确保数据在`etcd`中静态加密。
4.  `dnsmasq`中的安全漏洞，SkyDNS 中的性能问题，以及为`kube-dns`提供相同功能的单个容器而不是三个。
5.  您可以在 EKS 集群上使用`kube-bench`，如下所示:
    ```
    $ git clone : https://github.com/aquasecurity/kube-bench $ kubectl apply -f job-eks.yaml
    ```
# 第七章
1.  静态令牌和基本身份验证不应在生产集群中使用。这些模块使用静态凭据，需要重新启动应用编程接口服务器才能更新。
2.  群集管理员可以使用用户模拟权限来测试授予新用户的权限。使用`kubectl`，集群管理员可以使用`--as --as-group`标志以不同用户的身份运行请求。
3.  默认情况下，在 Kubernetes 中启用节点和 RBAC。应该使用这些。如果集群使用远程应用编程接口进行授权，应该使用网络钩子模式。
4.  `EventRateLimit`准入控制器规定了可由应用编程接口服务器服务的请求的最大限制。另一方面，LimitRanger 确保 Kubernetes 对象遵守`LimitRange`对象指定的资源限制。
5.  拒绝使用`test.example`端点创建入口的`rego`策略如下:
    ```
    package kubernetes.admission
    import data.kubernetes.namespaces
    operations = {"CREATE", "UPDATE"}
    deny[msg] {
        input.request.kind.kind == "Ingress"
        operations[input.request.operation]
        host := input.request.object.spec.rules[_].host
        host == "test.example"
        msg := sprintf("invalid ingress host %q", [host])
    }
    ```
# 第八章
1.  定义一个命令，要求 Docker 引擎定期检查容器的健康状态。
2.  `COPY`指令只能将文件从构建机器复制到映像的文件系统，而`ADD`指令不仅可以从本地主机复制文件，还可以从远程网址检索文件到映像的文件系统。使用`ADD`可能会带来将来自互联网的恶意文件添加到映像中的风险。
3.  `CAP_NET_BIND_SERVICE`。
4.  当`runAsNonRoot`设置设置为`true`时，如果以 root 用户身份运行，kubelet 将阻止容器启动。
5.  创建一个有权限的角色，使用`PodSecurityPolicy`对象，创建一个`rolebinding`对象，将角色分配给工作负载使用的服务帐户。
# 第九章
1.  `Docker history `。
2.  7-8.9.
3.  `anchore-cli image add `。
4.  `anchore-cli image vuln  all`。
5.  `anchore-cli evaluate check  --tag `。
6.  它有助于识别具有最新公开已知漏洞的映像。
# 第十章
1.  资源请求指定了 Kubernetes 对象保证获得的资源，而限制则指定了 Kubernetes 对象可以使用的最大资源。
2.  将内存限制为 500 mi 的资源配额如下:
    ```
    apiVersion: v1
    kind: ResourceQuota
    metadata:
        name: pods-medium
    spec:
        hard:
          memory: 500Mi
    ```
3.  LimitRanger 是一个实施限制范围的准入控制器。限制范围定义了对 Kubernetes 资源的限制。极限范围可以应用于 Pod 、容器或`persistantvolumeclaim`。名称空间资源配额类似于`LimitRange`，但对整个名称空间强制实施。
4.  服务帐户令牌。
5.  普罗米修斯和格拉夫纳。
# 第十一章
1.  机密数据将被记录在 Kubernetes 审计日志中。
2.  `--master-zones`。
3.  将更新的机密同步到 Pod 的挂载卷。
4.  系统调用和 Kubernetes 审计事件。
5.  `proc.name`。
6.  检查正在运行的容器，稍后可以在沙盒环境中恢复该容器。
7.  故障排除和安全调查。
# 第十二章
1.  仪表板在未启用身份验证的情况下使用。
2.  不要运行仪表板，也不要为仪表板启用身份验证。
3.  不。这可能是一种加密挖掘攻击，但也可能是由其他一些原因引起的，例如应用错误。
4.  加密挖掘二进制文件使用 HTTP 或 HTTPS 协议连接到挖掘池服务器，而不是 stratum。
5.  Kubernetes 集群配置、构建、部署和运行时。
# 第十三章
1.  集群管理员跟踪 CVE 标识，以确保 Kubernetes 集群不会受到公开问题的影响。安全研究人员研究参考资料部分，以了解问题的技术细节，为 CVE 制定缓解措施。最后，攻击者研究引用部分以找到未修补的变体，或者使用类似的技术来发现代码其他部分的问题。
2.  客户端问题通常会导致客户端的数据泄露或代码执行。构建机器或集群管理员的机器通常包含敏感数据，对这些机器的攻击可能会对组织产生重大的经济影响。
3.  `api-server`上的 DoS 问题会导致整个集群的可用性中断。
4.  未经身份验证的 DoS 问题比经过身份验证的 DoS 问题更严重。理想情况下，未经认证的用户不应该能够与`api-server`通信。如果未经身份验证的用户能够发送请求并导致`api-server`出现 DoS 问题，这比经过身份验证的用户更糟糕。经过身份验证的 DoS 请求也非常严重，因为集群中的错误配置可能允许未经身份验证的用户提升权限并成为经过身份验证的用户。
5.  Kubernetes 的安全建议和公告是了解任何新的公开已知漏洞的好方法。这些公告和建议相当嘈杂，管理员很容易忽略一个重要问题。定期运行`kube-hunter`有助于集群管理员识别任何可能被管理员遗漏的已知问题。