    ``` literallayout
    %_topdir /opt/some/working/directory/rpmbuild
    ```
:::
您可以从上面示例中创建 目录，包括通过 `rpmdev-setuptree`{.literal}
实用程序的所有子目录。此宏的值默认为 `~/rpmbuild`{.literal}。
``` literallayout
%_smp_mflags -l3
```
以上宏通常用于传递 Makefile，如
`make %{?_smp_mflags}`{.literal}，并在构建阶段设置多个并发进程。默认情况下，它被设置为
`-jX`{.literal}，其中 `X`{.literal}
是内核数。如果您更改了内核数量，您可以加快或减慢软件包构建速度或减慢速度。
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#epoch-scriplets-and-triggers_advanced-topics}Epoch, Scriptlets 和 Triggers {.title}
:::
本节介绍 `Epoch`{.literal}、`Scriptlets`{.literal} 和
`Triggers`{.literal}，它们代表 RMP SPEC 文件的高级指令。
所有这些指令都影响不仅影响 SPEC 文件，还影响到安装结果 RPM
的末尾计算机。
::: section
::: titlepage
## []{#advanced-topics.html#packaging-epoch_epoch-scriplets-and-triggers}Epoch 指令 {.title}
:::
`Epoch`{.literal} 指令支持根据版本号定义权重的依赖关系。
如果 RPM SPEC 文件中未列出此指令，则完全不设置 `Epoch`{.literal}
指令。这与常规的理解不同：不设置 `Epoch`{.literal} 的结果是
`Epoch`{.literal} 为 0。但是，`dnf`{.literal} 工具会把一个未设置的
`Epoch`{.literal} 视为 `Epoch`{.literal} 为 0 用于处理。
但是，在 SPEC 文件中列出 `Epoch`{.literal}
时通常会被省略，因为在大多数情况下，如果使用 `Epoch`{.literal}
值，则在进行软件包版本比较时会 skews 预期的 RPM 行为。
::: example
[]{#advanced-topics.html#idm140428040479264}
**例 4.2. 使用 Epoch**
::: example-contents
如果您安装了 `foobar`{.literal} 软件包，带有 `Epoch:1`{.literal} 和
`Version:1.0`{.literal}，以及其它软件包 `foobar`{.literal}，带有
`Version:2.0`{.literal} 但没有 `Epoch`{.literal}
指令，新版本永远不会被视为更新。原因是，在签发 RPM 软件包版本是首选使用
`Epoch`{.literal} 版本而不是传统的 `Name-Version-Release`{.literal}
marker。
:::
:::
使用 `Epoch`{.literal} 比较罕见。但是，`Epoch`{.literal}
通常用于解决升级排序问题。在软件版本号方案或带有字母字符的版本中，这个问题可能会出现上游变化的影响，这些字符不能始终根据编码进行可靠地进行比较。
:::
::: section
::: titlepage
## []{#advanced-topics.html#scriptlets-directives_epoch-scriplets-and-triggers}scriptlets 指令 {.title}
:::
[**Scriptlets**]{.strong} 是一组在安装或删除软件包之前或之后执行的 RPM
指令。
使用 [**Scriptlets**]{.strong} 仅在构建时或启动脚本中无法完成的任务。
存在一组常用 [**Scriptlet**]{.strong} 指令。它们和 SPEC
文件部分标题类似，如 `%build`{.literal} 或
`%install`{.literal}。它们由多行代码段定义，这些片段通常写为标准的 POSIX
shell 脚本。但是，它们也可以使用其他适用于目标机器分布接受的 RPM
编程语言编写。RPM 文档包括可用语言的详尽列表。
下表包含 [**Scriptlet**]{.strong}
指令，按其执行顺序列出。请注意，包含脚本的软件包会在 `%pre`{.literal} 和
`%post`{.literal} 指令之间安装，并在 `%preun`{.literal} 和
`%postun`{.literal} 指令之间卸载。
::: table
[]{#advanced-topics.html#idm140428037341792}
**表 4.2. Scriptlet 指令**
::: table-contents
  指令                     定义
  ------------------------ --------------------------------------------
  `%pretrans`{.literal}    Scriptlet 在安装或删除任何软件包之前执行。
  `%pre`{.literal}         Scriptlet 在目标系统上安装软件包之前执行。
  `%post`{.literal}        Scriptlet 仅在目标系统上安装软件包后执行。
  `%preun`{.literal}       在从目标系统卸载软件包前执行的 Scriptlet。
  `%postun`{.literal}      Scriptlet 在软件包从目标系统卸载后执行。
  `%posttrans`{.literal}   在事务结束时执行的 Scriptlet。
:::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#turning-off-a-scriptlet-execution_epoch-scriplets-and-triggers}关闭 scriptlet 执行 {.title}
:::
下面的步骤描述了如何使用 `rpm`{.literal} 命令和
`--no_scriptlet_name_`{.literal} 选项一起关闭任何 scriptlet 的执行。
::: itemizedlist
**步骤**
-   例如，要关闭 `%pretrans`{.literal} scriptlets 的执行，请运行：
    ``` literallayout
    # rpm --nopretrans
    ```
    您还可以使用 `-- noscripts`{.literal} 选项，它等同于以下所有：
    ::: itemizedlist
    -   `--nopre`{.literal}
    -   `--nopost`{.literal}
    -   `--nopreun`{.literal}
    -   `--nopostun`{.literal}
    -   `--nopretrans`{.literal}
    -   `--noposttrans`{.literal}
    :::
:::
::: itemizedlist
**其他资源**
-   `rpm(8)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#scriptlets-macros_epoch-scriplets-and-triggers}scriptlets 宏 {.title}
:::
[**Scriptlets**]{.strong} 指令也适用于 RPM 宏。
以下示例显示了使用 systemd scriptlet 宏，这样可确保 systemd
会收到有关新单元文件的通知。
``` literallayout
$ rpm --showrc | grep systemd
-14: transaction_systemd_inhibit %{plugindir}/systemd_inhibit.so
-14: _journalcatalogdir /usr/lib/systemd/catalog
-14: _presetdir /usr/lib/systemd/system-preset
-14: _unitdir   /usr/lib/systemd/system
-14: _userunitdir       /usr/lib/systemd/user
/usr/lib/systemd/systemd-binfmt %{?} >/dev/null 2>&1 || : /usr/lib/systemd/systemd-sysctl %{?} >/dev/null 2>&1 || :
-14: systemd_post
-14: systemd_postun
-14: systemd_postun_with_restart
-14: systemd_preun
-14: systemd_requires
Requires(post): systemd
Requires(preun): systemd
Requires(postun): systemd
-14: systemd_user_post  %systemd_post --user --global %{?} -14: systemd_user_postun %{nil} -14: systemd_user_postun_with_restart %{nil} -14: systemd_user_preun systemd-sysusers %{?} >/dev/null 2>&1 || :
echo %{?} | systemd-sysusers - >/dev/null 2>&1 || : systemd-tmpfiles --create %{?} >/dev/null 2>&1 || :
$ rpm --eval %{systemd_post}
if [ $1 -eq 1 ] ; then
        # Initial installation
        systemctl preset  >/dev/null 2>&1 || :
fi
$ rpm --eval %{systemd_postun}
systemctl daemon-reload >/dev/null 2>&1 || :
$ rpm --eval %{systemd_preun}
if [ $1 -eq 0 ] ; then
        # Package removal, not upgrade
        systemctl --no-reload disable  > /dev/null 2>&1 || :
        systemctl stop  > /dev/null 2>&1 || :
fi
```
:::
::: section
::: titlepage
## []{#advanced-topics.html#triggers_epoch-scriplets-and-triggers}Triggers 指令 {.title}
:::
[**Triggers**]{.strong} 是 RPM
指令，可提供在软件包安装和卸载期间交互的方法。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
[**Triggers**]{.strong}
可能会在意外执行，例如在更新包含软件包时执行。很难调试
[**Triggers**]{.strong}，因此需要以可靠的方式实施它们，以便在意外执行时不会中断任何操作。因此，红帽建议尽可能减少使用
[**Triggers**]{.strong}。
:::
下面列出了一次软件包升级的顺序以及每个现有 [**Triggers**]{.strong}
的详情：
``` literallayout
all-%pretrans
…​
any-%triggerprein (%triggerprein from other packages set off by new install)
new-%triggerprein
new-%pre      for new version of package being installed
…​           (all new files are installed)
new-%post     for new version of package being installed
any-%triggerin (%triggerin from other packages set off by new install)
new-%triggerin
old-%triggerun
any-%triggerun (%triggerun from other packages set off by old uninstall)
old-%preun    for old version of package being removed
…​           (all old files are removed)
old-%postun   for old version of package being removed
old-%triggerpostun
any-%triggerpostun (%triggerpostun from other packages set off by old un
            install)
…​
all-%posttrans
```
以上项目位于 `/usr/share/doc/rpm-4.*/triggers`{.literal} 文件中。
:::
::: section
::: titlepage
## []{#advanced-topics.html#using-non-shell-scripts-in-a-spec-file_epoch-scriplets-and-triggers}在 SPEC 文件中使用非 shell 脚本 {.title}
:::
SPEC 文件中的 `-p`{.literal} scriptlet
选项允许用户调用特定的解释器，而不是默认的 shell
脚本解释器(`-p /bin/sh`{.literal})。
下面的步骤描述了如何创建脚本，它会在安装 `pello.py`{.literal}
程序后输出信息：
::: orderedlist
**步骤**
1.  打开 `pello.spec`{.literal} 文件。
2.  找到以下行：
    ``` literallayout
    install -m 0644 %{name}.py* %{buildroot}/usr/lib/%{name}/
    ```
3.  在上面的行下，插入：
    ``` literallayout
    %post -p /usr/bin/python3
    print("This is {} code".format("python"))
    ```
4.  按照[构建
    RPM](#packaging-software_packaging-and-distributing-software.html#con_building-rpms_packaging-software "构建 RPM"){.link}
    中所述构建您的软件包。
5.  安装软件包：
    ``` literallayout
    # dnf install /home//rpmbuild/RPMS/noarch/pello-0.1.2-1.el8.noarch.rpm
    ```
6.  安装后检查输出信息：
    ``` literallayout
    Installing       : pello-0.1.2-1.el8.noarch                              1/1
    Running scriptlet: pello-0.1.2-1.el8.noarch                              1/1
    This is python code
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要使用 Python 3 脚本，在 SPEC 文件中的 `install -m`{.literal}
下包含以下行：
``` literallayout
%post -p /usr/bin/python3
```
要使用 Lua 脚本，在 SPEC 文件中的 `install -m`{.literal} 下包含以下行：
``` literallayout
%post -p 
```
这样，您可以在 SPEC 文件中指定任何解释器。
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#rpm-conditionals_advanced-topics}RPM 条件 {.title}
:::
RPM 条件可启用 SPEC 文件的各种部分的条件。
条件包括通常会处理：
::: itemizedlist
-   特定于架构的部分
-   特定于操作系统的部分
-   不同操作系统版本之间的兼容性问题
-   宏的存在和定义
:::
::: section
::: titlepage
## []{#advanced-topics.html#rpm-conditionals-syntax_rpm-conditionals}RPM 条件语法 {.title}
:::
RPM 条件使用以下语法：
如果 [*expression*]{.emphasis} 为 true，则执行一些操作：
``` literallayout