SKid = fu(id, α, CMPK, r).
Encrypt(mpk, M, id): On input mpk, a message M , and an
identity id ∈ {0, 1}∗, the algorithm outputs a cipher-
text CTid.
Decrypt(mpk, CTid, SKid): On input mpk, a ciphertext CTid
and a private key SKid, the algorithm outputs a mes-
sage M or ⊥ indicating failure.
Correctness. For any CMPK ← Fc(G), α ← Z∗
p, id ∈
{0, 1}∗, r ← R, and any message M from the message space
M(CMPK), let mpk := (Fp(α, CMPK), CMPK), it holds that
Decrypt(mpk, Encrypt(mpk, M, id), fu(id, α, CMPK, r)) = M.
Key Homomorphism. Let ⊗ be an operation deﬁned over
the distribution of the outputs of Fp() , ⊕ be an operation
deﬁned over the distribution of the outputs of fs(), and (cid:12)
be an operation deﬁned over the distribution of the outputs
of fu. For any CMPK ← Fc(G), α1, α2 ← Z∗
p, id ∈ {0, 1}∗,
r1, r2 ← R, it holds that
Fp(α1, CMPK) ⊗ Fp(α2, CMPK) = Fp(α1 + α2, CMPK),
fs(α1, CMPK) ⊕ fs(α2, CMPK) = fs(α1 + α2, CMPK),
fu(id, α1, CMPK, r1) (cid:12) fu(id, α2, CMPK, r2)
= fu(id, α1 + α2, CMPK, r1 (cid:0) r2).
(3)
(4)
(5)
It is easy to see that such an IBE template has the key-
In particular, for any CMPK ← Fc(G),
homomorphism.
α1, α2 ← Z∗
p, id ∈ {0, 1}∗, mpk(1) = (Fp(α1, CMPK), CMPK),
msk(1) = (fs(α1, CMPK)), mpk(2) = (Fp(α2, CMPK), CMPK),
(1)
msk(2) = (fs(α2, CMPK)), SK
id = fu(id, α1, CMPK, r1) for
some r1 ∈ R, and SK
(2)
id = fu(id, α2, CMPK, r2) for some
r2 ∈ R, deﬁne operations ˆ⊗ (over mpk), ˆ⊕ (over msk) and ˆ(cid:12)
(over SK) as
mpk(1) ˆ⊗mpk(2) := (Fp(α1, CMPK) ⊗ Fp(α2, CMPK), CMPK) ,
msk(1) ˆ⊕msk(2) := (fs(α1, CMPK) ⊕ fs(α2, CMPK)) ,
SK
id := fu(id, α1, CMPK, r1) (cid:12) fu(id, α2, CMPK, r2),
ˆ(cid:12)SK
(1)
id
(2)
thus we have
ˆ⊗
ˆ⊕
mpk
msk
:= mpk(1) ˆ⊗mpk(2) = (Fp(α1 + α2, CMPK), CMPK) ,
:= msk(1) ˆ⊕msk(2) = (fs(α1 + α2, CMPK)) ,
ˆ⊕, id), we have
id ← KeyGen(mpk
(cid:1)
Then for SK
ˆ⊗, msk
(cid:1)
(cid:1)
id = fu(id, α1 + α2, CMPK, r
SK
) f or some r
(cid:1) ∈ R.
Now, for any M ∈ M(CMPK), we have
Decrypt(mpk
Decrypt(mpk
ˆ⊗
ˆ⊗
, Encrypt(mpk
, Encrypt(mpk
ˆ⊗
ˆ⊗
, M, id), SK
, M, id), SK
(cid:1)
id) = M,
(1)
(2)
id ) = M.
id
ˆ(cid:12)SK
KeyGen(mpk, msk, id): Let R be a distribution and the al-
gorithm will choose randomness from R, and (cid:0) be
an operation deﬁned over R. Let fu be a function
deﬁned over {0, 1}∗ × Z∗
p × Fc(G) × R. For mpk =
i.e. the above IBE (template) is key-homomorphic.
Furthermore, we deﬁne some additional operations that
are derived from ⊗,⊕,(cid:12). For any positive integer n, any
CMPK ← Fc(G), any α, α1, . . . , αn ∈ Z∗
p, any id ∈ {0, 1}∗,
213n(cid:79)
i=1
n(cid:77)
i=1
n(cid:75)
any r, r1, . . . , rn ∈ R, and any positive integers k, k1, . . . , kn,
we deﬁne
Fp(α, CMPK)
(cid:125)
⊗k := Fp(α, CMPK) ⊗ · · · ⊗ Fp(α, CMPK)
,
k
(cid:123)(cid:122)
(cid:124)
⊗ki := Fp(α1, CMPK)
(cid:123)(cid:122)
(cid:124)
⊕ki := fs(α1, CMPK)
k
Fp(αi, CMPK)
⊗k1 ⊗ · · · ⊗ Fp(αn, CMPK)
⊗kn ,
fs(α, CMPK)
(cid:125)
⊕k := fs(α, CMPK) ⊕ · · · ⊕ fs(α, CMPK)
,
fs(αi, CMPK)
fu(id, α, CMPK, r)
⊕k1 ⊕ · · · ⊕ fs(αn, CMPK)
⊕kn ,
(cid:125)
(cid:12)k := fu(id, α, CMPK, r) (cid:12) · · · (cid:12) fu(id, α, CMPK, r)
(cid:123)(cid:122)
,
k
(cid:124)
(cid:12)ki := fu(id, α1, CMPK, r1)
n(cid:93)
(cid:0)kn
(cid:0)k1
(cid:0) · · · (cid:0) r
rki
i = r
1
n
.
i=1
(cid:12)k1 (cid:12) . . .
(cid:12) fu(id, αn, CMPK, rn)
(cid:12)kn ,
fu(id, αi, CMPK, ri)
i=1
r
(cid:125)
(cid:0)k := r (cid:0) · · · (cid:0) r
(cid:123)(cid:122)
(cid:124)
,
k
It is easy to see that we have
Fp(α, CMPK)
Fp(αi, CMPK)
kiαi, CMPK),
n(cid:79)
n(cid:77)
i=1
⊗k = Fp(kα, CMPK),
n(cid:88)
⊗ki = Fp(
n(cid:88)
⊕k = fs(kα, CMPK),
⊕ki = fs(
i=1
fs(α, CMPK)
fs(αi, CMPK)
kiαi, CMPK),
i=1
i=1
i=1
fu(id, α, CMPK, r)
fu(id, αi, CMPK, ri)
n(cid:75)
(cid:0)(cid:76)n
i=1 fs(αi, CMPK)⊕ki(cid:1), SK
id =(cid:74)n
ˆ⊗ =(cid:0)(cid:78)n
Then, let mpk
and SK
ˆ(cid:12)
(cid:0)k),
n(cid:88)
(cid:12)k = fu(id, kα, CMPK, r
(cid:12)ki = fu(id,
n(cid:93)
i=1 Fp(αi, CMPK)⊗ki , CMPK(cid:1), msk
kiαi, CMPK,
i=1
i=1
rki
i ).
id ← KeyGen(mpk
(cid:1)
ˆ⊗, msk
i=1 fu(id, αi, CMPK, ri)(cid:12)ki , we have
ˆ⊕ =
ˆ⊕, id),
Decrypt(mpk
Decrypt(mpk
ˆ⊗
ˆ⊗
, Encrypt(mpk
, Encrypt(mpk
ˆ⊗
ˆ⊗
, M, id), SK
, M, id), SK
(cid:1)
id) = M,
ˆ(cid:12)
id) = M.
Key Veriﬁcation. To apply the later Dealerless Distributed
PKG protocol to the above km-IBE template, we also re-
quire the km-IBE template to have the following properties.
• There exist an algorithm MKVerify() that can publicly
check the validity of a (master public key, master se-
cret key) pair. In particular, for any CMPK ← Fc(G),
α, α(cid:48) ← Z∗
p, if and only if α ≡ α(cid:48) mod p, it holds that
MKVerify(CMPK, Fp(α, CMPK), fs(α(cid:48), CMPK)) = 1.
• There exist an algorithm SKVerify() that can publicly
check the validity of a (master public key, user pri-
vate key) pair. In particular, for any CMPK ← Fc(G),
α, α(cid:48) ← Z∗
p, id ∈ {0, 1}∗, r ∈ R, if and only if α ≡
α(cid:48) mod p, it holds that
SKVerify(CMPK, Fp(α, CMPK), fu(id, α(cid:48), CMPK, r)) = 1.
Using the algorithm SKVerify(), any user can check whether
a PKG honestly generates his user private key. In our Deal-
erless Distributed PKG protocol, each PKG will use secret
sharing scheme to generate shares from his α value and send
the shares to other PKGs. Using the algorithm MKVerify(),
whether a PKG honestly generates and sends the shares can
be checked by other PKGs.
2.2 Concrete Key-Homomorphic IBE Schemes
It is observed that many existing important IBE schemes
comply with the km-IBE template, for example, Boneh-
Franklin IBE [7], Boneh-Boyen IBE [3], Waters IBE [22],
Boneh-Boyen-Goh Hierarchical IBE (HIBE) [5], and so on.
In the full version, we review some existing IBE schemes in
the sense of km-IBE template.
3. BACKGROUND ON ACCESS POLICES
An access policy can be described as an access structure
which can be realized by a secret sharing scheme.
Definition 3
(Access Structure [2]). Let P = {P1,
P2, . . . , Pn} be a set of parties. A collection A ⊆ 2{P1,P2,...,Pn}
is monotone if for any B and C: if B ∈ A and B ⊆ C then C ∈
A. An access structure (respectively, monotone access struc-
ture) is a collection (respectively, monotone collection) A of
non-empty subsets of {P1, P2, . . . , Pn}, i.e., A ⊆ 2{P1,P2,...,Pn}\
{∅}. The sets in A are called the authorized sets, and the
sets not in A are called the unauthorized sets.
As shown in [2], any monotone access structure can be real-
ized by a Linear Secret Sharing Scheme (LSSS).
Definition 4
(Linear Secret Sharing Scheme [2]).
A secret sharing scheme Π over a set of parties P is called
linear (over Zp) if
1. the shares for each party form a vector over Zp, and
2. there exists a matrix M called the share-generating ma-
trix for Π. The matrix M has m rows and d columns.
For i = 1, . . . , m, the ith row Mi of M is labeled by
a party ρ(i) where ρ is a function from {1, . . . , m} to
P. Given a column vector (cid:126)v = (s, r2, . . . , rd), where
s ∈ Zp is the secret to be shared and r2, . . . , rd ∈ Zp
are randomly chosen, M(cid:126)v is the vector of m shares of
the secret s according to Π. The share λi = (M(cid:126)v)i,
i.e., the inner product Mi · (cid:126)v, belongs to party ρ(i).
satisfying(cid:80)
shares of any secret s according to Π, then (cid:80)
Also as shown in [2], any LSSS deﬁned as above enjoys the
linear reconstruction property deﬁned as follows. Suppose
that Π = (M, ρ) is an LSSS for access structure A. Let
S ∈ A be an authorized set, and I ⊂ {1, . . . , m} be deﬁned
as I = {i : ρ(i) ∈ S}. There exist constants {ωi ∈ Zp}i∈I
i∈I ωiMi = (1, 0, . . . , 0), so that if {λi} are valid
i∈I ωiλi =
s. Furthermore, these constants {ωi} can be found in time
polynomial in the size of the share-generating matrix M .
For any unauthorized set, no such constants exist. Here the
size of the LSSS (M, ρ) is the number of rows of M .
Below are some points that may be worth noticing in im-
plementation.
1. Note that it is the secret shares that are used to recover
the secret, when we say “authorized set”, we actually
mean the secret shares held by the parties in the au-
thorized set. For some access structures, there may
exist some parties who hold multiple shares. In such
cases, if party Pi is assigned k(> 1) secret shares, we
labeled the shares by Pi,1, Pi,2, . . . , Pi,k, respectively.
On the other side, Pi can be regarded as k diﬀerent
parties, each of which is assigned just one share.
2. Due to the monotonicity, a monotone access structure
A can be eﬃciently described by a set A−, which con-
sists of the minimal elements (sets) in A, i.e., the el-
ements in A for which no proper subset is also in A.
214In other words, for any set S ∈ A−, S is an autho-
rized set, and for any S(cid:48) (cid:40) S, S(cid:48) is not authorized set.
When we say “authorized set”, we actually mean a set
in A−. That is, all the secret shares provided by the
authorized set are indispensable.
3. Based on the above discussions, we would like to stress
that, each secret share is labeled by one ‘party’ and
each ‘party’ is assigned only one secret share, and an
authorized set means a minimum one.
According to Deﬁnition 4, we suppose there exist two deter-
ministic algorithms GenLsssM atrix() and F indLsssConst():
• GenLsssM atrix(A) → (M, ρ). For any monotonic ac-
cess structure A, GenLsssM atrix(A) outputs an LSSS
matrix (M, ρ) that realizes A, where each row of M is
labeled (through ρ) by a ‘diﬀerent party’. In particu-
lar, if multiple rows (say k rows) are mapped to the
same party Pi, then they are labeled by Pi,1, . . . , Pi,k
respectively. Correspondingly, when (M, ρ) is used
to generate secret shares, the shares corresponding to
these rows are also labeled by Pi,1, . . . , Pi,k respec-
tively, although these shares will be assigned to the
same party (Pi). Note that in practice the access poli-
cies and access structures may be expressed by more
natural and intuitive ways, such as Boolean formulas or
access trees, Lewko and Waters [15] proposed an algo-
rithm that can convert any monotonic boolean formu-
las to LSSS matrices, and Liu et al. [17] proposed an
algorithm that can convert any monotonic access trees
to corresponding LSSS matrices. These algorithms can
act as the GenLsssM atrix() algorithm.
stants {wi ∈ Zp|i ∈ I} such that (cid:80)
• F indLsssConst(A, (M, ρ), A) → {wi ∈ Zp|ρ(i) ∈ A}.