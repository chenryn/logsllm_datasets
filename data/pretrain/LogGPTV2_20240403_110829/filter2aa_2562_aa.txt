# Buffer Overflows and Heap Exploitation: An In-Depth Guide

## 0x0000 - Poetic Introduction
```
They steal a way innocence and peace,
Though I'm a king, I'm a king on my knees.
And I know they are wrong when they say I am strong,
As the darkness covers me.
- J. Knapp
```

## 0x0100 - Introduction to Buffer Overflows
### Common Vulnerable Functions
- **`gets()` / `fgets()`**
  - **Man Page Notes:** "Never use `gets()`. Because it is impossible to tell without knowing the data in advance how many characters `gets()` will read, and because `gets()` will continue to store characters past the end of the buffer, it is extremely dangerous to use. It has been used to break computer security. Use `fgets()` instead."
- **`str(n)cpy()` / `memcpy()`**
- **`rep movs` (opcode)**
- **`s/f/scanf()`**

## 0x0200 - The Heap
### Overview
- **Dynamically allocated storage** created using allocators like `malloc()`.
- **Cleaned up using deallocators** like `free()`.
- **Stack overflows** typically involve writing enough bytes to change the return address (`RET`).
- **Heap overflows** have different options:
  - Overwrite another variable on the heap.
  - Overwrite the End-of-String (EOS) (NULL) byte.
  - Overwrite the heap descriptors.

### Kernel Chunk/Malloc Buffer
- The **Operating System assigns a raw chunk of memory** to a process for dynamic allocation, often referred to as a **Chunk**.
- **User-space management** of this memory is up to the implementor, with each OS having a default but allowing custom implementations.
- For this presentation, **"chunk" and "buffer"** will refer to a `malloc()`-allocated memory buffer.

### Example: `buf = malloc(1024)`
- This call **allocates at least 1024 bytes** from the kernel-provided memory space.
- The **virtual memory address** where this buffer starts is stored in `buf`.
- **Low-level nature** of `malloc()` means minimal processing, such as sanity checking.
- For `dlmalloc`, `*(buf-4)` accesses the length of the buffer.

### Example: `free(buf)`
- This call **marks a previously `malloc()`-allocated buffer as available** for reuse.
- Often, this memory chunk is inserted into a **linked-list or array** of "recycled" buffers for speedy reuse.
- **Low-level nature** of `free()` means minimal processing, such as sanity checking.

### Example: Microsoft GDI
- **JPEG buffer overflow** in September 2004.
- **GDIscan** (special thanks to Tom Liston from Intelguardians).

## 0x0300 - Various Implementations
- **Doug Lea's Malloc / Free (our focus)**
  - **Linux default**
- **RTL and the Windows Heap**
- **BSD phk**
  - BSDi, FreeBSD, OpenBSD
- **BSD kingsley**
  - 4.4BDS, AIX (compat), Ultrix
- **System V AT&T**
  - Solaris, IRIX
- **Yorktown**
  - AIX (default)

### Doug Lea's Malloc (Linux)
- **Allocated chunks** are preceded by a size.
- **Recycled chunks** are maintained in a basic doubly-linked list.
- **`malloc()` adds 4 bytes** to the requested length, then pads to the next quadword (8-byte) boundary.
- **Example:** `malloc(101)` - allocates 112 bytes (0x70):
  - Sets aside 105 bytes (101+4).
  - Pads to the next 8-byte multiple, which is 112.

### RTL and Win32 Heap
- **For fun and compatibility**...
- **`RtlAllocateHeap()` / `RtlFreeHeap()`**
- **Free()d chunks** are maintained in an array of 127 doubly-linked lists.
  - Lists 2-127 store 16-1024 byte chunks.
  - List 0 stores >1024 byte chunks.

## 0x0400 - Heap Descriptor
### Inband Allocation Descriptor
- If a heap chunk is in use, the **allocation descriptor** is one 32-bit integer immediately preceding the chunk.
- If a heap chunk is not in use, the first 8 bytes and the last 4 bytes of the data are also used as 32-bit integers.

### Allocation Descriptor (Used)
- **Example:** `malloc(101)`
  ```c
  struct heapchunk {
      long len;
      char[101];
      char[padsize];
  }
  ```

### Allocation Descriptor (Free()-d)
- **Example:** `malloc(101)`
  ```c
  struct heapchunk {
      long len;   // this is |PREV_INUSE|
      long prev;  // next->prev = node->prev
                  // node->prev->next = node->next
  }
  ```
- **Note:** Prev and next for the next buffer come from the inband descriptor, which we just overwrote.

## 0x0500 - Detailed Memory Layout
### In-Use Memory Buffer
- **Adapted from “Once upon a free()”**
  ```
             +--------------------------------+
    chunk --> | prev_size (32bit long)         |
             +--------------------------------+
             | size | PREV_INUSE (32bit long)  |
             +--------------------------------+
      mem --> | data                          |
             : ...                            :
             +--------------------------------+
  nextchunk --> | prev_size (32bit long)       |
                : ...                          :
  ```
- **Notes:**
  - If the previous buffer is used, `prev_size` is part of the buffer.
  - If not, it is the length of the previous chunk.
  - The least-significant-bit indicates whether the previous chunk is in use. If the number is odd, `PREV_INUSE` is set.

### Unused Memory Buffer
- **Adapted from “Once upon a free()”**
  ```
             +--------------------------------+
    chunk --> | prev_size (32bit long)         |
             +--------------------------------+
             | size | PREV_INUSE (32bit long)  |
             +--------------------------------+
      mem --> | fd                            |
             +--------------------------------+
             | bk                            |
             +--------------------------------+
             | (old memory, can be zero bytes)|
  nextchunk --> | prev_size ...               |
                : ...                          :
  ```
- **Notes:**
  - If the previous buffer is used, `prev_size` is part of the buffer.
  - If not, it is the length of the previous chunk.
  - The least-significant-bit indicates whether the previous chunk is in use. If the number is odd, `PREV_INUSE` is set.

### Unlinking and Collapsing Chunks
- **`fd` and `bk`** are used to write to memory when `unlink()` is called to collapse two chunks together.
- **Forward collapsing:**
  - `*(fd+12) = bk`
  - `*(bk+8) = fw`
- **Backward collapsing:**
  - Similar operations.

### Example Exploit
- **bk = 0x80496c4** (imagine this is the GOT entry for `free()`)
- **fw = 0x804a0e8** (imagine this is the location of another buffer we control)
- **Memory layout:**
  ```
  "\xb8\x96\x04\x08" + "\xe8\xa0\x04\x08" + "D"*92 + "\xfc\xff\xff\xff" + "PAD0" + "\xfc\xff\xff\xff" + "\xb8\x96\x04\x08" + "\xe8\xa0\x04\x08"
  ```

### Gotchas
- **Exploiting `unlink()`** has a few gotchas:
  - Shellcode + 8 is clobbered. Can't help it.
  - Use `"\xeb\x0eAA" + "AAAA" + "AAAA" + "AAAA"` to start off shellcode.
  - `0xeb` is the 'jmp byte-offset' opcode.

This guide provides a comprehensive overview of buffer overflows and heap exploitation, focusing on common vulnerabilities and detailed memory management techniques.