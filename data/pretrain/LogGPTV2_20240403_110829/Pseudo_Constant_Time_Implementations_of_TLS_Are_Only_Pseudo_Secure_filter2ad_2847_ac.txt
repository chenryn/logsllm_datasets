8:
9:
10:
11: end function
if Probe(xor pad) then
return 1
else
return 0
end if
(cid:46) evict xor pad set from cache
(cid:46) buﬀer was accessed
(cid:46) buﬀer was not accessed
Our attack (see Algorithm 1) is now straightforward. The attack code runs on
a diﬀerent VM on the same CPU socket. We start by ﬁnding the cache set of the
xor pad buﬀer. This is done by sending valid TLS records to the target (for example,
by using malicious JavaScript running in a remote victim’s browser), and using the
PRIME+PROBE technique of [23] to ﬁnd the correct cache set. We then prime the
xor pad buﬀer, and send the attacker-constructed TLS record for decryption. After the
TLS record is rejected (due to a MAC failure) we probe the cache set. If we get a cache
miss, we assume that with high probability the xor pad buﬀer was accessed, and so the
TLS record’s padding length (as determined by s2n from PadLen, the value of the last
byte of the decrypted TLS record P = R||T||pad) is such that the length of R mod
hash_block_size is between hash_block_size − 9 − 13 and hash_block_size − 13
(here, 13 comes from the TLS header length and ”9” would be replaced by ”17” for SHA-
384 if the bug identiﬁed in Appendix 3.4 were to be ﬁxed). By setting the attacker’s
−1 ⊕ ∆||C∗, as in Appendix 2.1, information
TLS record so that its last blocks are C∗
about the value of the last byte of P ∗ ⊕ ∆ is thereby leaked to the attacker.
4.3 Full synchronized probe PRIME+PROBE Attack
The simpliﬁed attack is not practical due to the following ad hoc programming decision
in the veriﬁcation function s2n verify cbc (see Listing 1.2 in Appendix A). After ﬁn-
ishing the HMAC calculation, the s2n code hashes the rest of the TLS record padding
bytes, to ensure a constant number of compression function calls. In this speciﬁc solu-
tion it is required to “remember” the number of bytes digested up to this point. To allow
this, the function s2n_hmac_copy was added to the HMAC API. This function (used
only in CBC-mode processing) copies all of the state buﬀers of the HMAC calculation,
so that the copy can be used to digest the remaining padding bytes. The copy function
also copies the xor_pad buﬀer (although it is not required for the calculation), and so
it accidentally causes it to be read into the cache. For the simpliﬁed attack to work,
we would need to arrange for the probing of the xor_pad buﬀer to happen exactly in-
between the call to s2n_hmac_copy and s2n_hmac_digest_two_compression_rounds.
This requires too ﬁne a control over timing.
However, we can use the fact that the HMAC copy buﬀer is only accessed in the
s2n_hmac_copy function, just after ﬁnishing the HMAC calculation over the message.
The time elapsed until this buﬀer is accessed is actually the same as the time taken for
HMAC veriﬁcation in the Lucky 13 attack.
The full synchronized probe PRIME+PROBE attack (see Algorithm 2) tries to ap-
proximate the HMAC execution time by using a “race condition” between the message
12
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
copy xor pad ← FindCopyXorPadCache(valid msg)
Prime(copy xor pad)
Send attacker’s TLS record to target
Delay to synchronize the probe
if Probe(copy xor pad) then
Algorithm 2 s2n synchronized probe PRIME+PROBE Attack
1: function S2NPadOracle(valid msg,attack msg)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end function
return 1
else
return 0
end if
(cid:46) evict copy xor pad set from cache
(cid:46) buﬀer was accessed
(cid:46) buﬀer was not accessed
veriﬁcation and the cache probing. We start again by ﬁnding the correct cache set for
the copy xor pad, using valid messages. Then we prime the cache set, and send the TLS
record for decryption. We use a short delay to synchronize the attack, as our probing
step should run at approximately the same time as the HMAC veriﬁcation code would
ﬁnish hashing a short message (corresponding to a long TLS padding pattern).
We assume that there will be small timing variations due to the behaviour of the
operating system. So we run the attack multiple times, and use the probability of a
cache miss as an indicator of the HMAC execution time. If the probability of a cache
miss is high (so Algorithm 2 outputs ”0” frequently), it indicates that we have probed
before the call to s2n_hmac_copy. This means that the HMAC execution took longer,
and so we can infer that PadLen was small. On the other hand, if the probability of a
cache hit is high, it indicates that PadLen was large. We will shortly make this analysis
more precise.
4.4 s2n’s Timing Blinding Mitigation
Amazon added a general mitigation to protect s2n from attacks targeting their non-
constant time implementation. In the event of a decryption error , the function s2n_connection_kill
adds a very large random time delay before killing the connection and sending the error
message. This is supposed to add a large amount of noise to any timing-based attack,
making it impractical [24]. While this random delay can indeed block regular timing
attacks, it oﬀers no protection against our cache-based attack, as the cache access that
we target is made before the random delay is added. Moreover, since a server running
s2n can support many concurrent connections, the random delay does not signiﬁcantly
slow down the rate at which we can send attack TLS records.
4.5 s2n Proof of Concept
We experimentally implemented a PoC for the attack. We ran our attack on an Intel(R)
Core(TM) i7-7500U CPU @ 2.70GHz running Ubuntu 17.10. We used the code from the
master branch of the oﬃcial s2n git repository on 14/2/2018 (commit hash f742802),
and compiled with the provided make ﬁles and GCC version 7.2.0. We targeted the
code of the s2n_verify_cbc function (including the code for hashing the header and
sequence number called before the function). The function is called to verify multiple
messages that diﬀer only in the last byte of the decrypted TLS record (which is used
to set PadLen). Another thread was run in parallel to evaluate the cache hit/miss
probability.
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
13
Hash Message PadLen Cache hit
probability
range
≈ 0.68
0 − 44
45 − 172 ≈ 0.75
173 − 255 ≈ 0.97
0 − 44
≈ 0.63
45 − 108 ≈ 0.65
109 − 172 ≈ 0.66
173 − 236 ≈ 0.90
237 − 255 ≈ 0.95
function Length
SHA-384
SHA-384
SHA-384
SHA-256
SHA-256
SHA-256
SHA-256
SHA-256
720
720
720
576
576
576
576
576
Table 2: Cache hit probabilities for s2n attack
We studied HMAC veriﬁcation for both SHA-384 and SHA-256. We chose a random
720-byte string (576 bytes for SHA-256) as our decrypted TLS record (the record length
must be a multiple of the cipher block-size, and these sizes are optimal for our attack),
and ran 2000 trials of the attack for all 256 possible padding length values in the last
byte. As expected the hit probability changes on the 128-byte boundaries of the hashed
data (64-byte boundaries for SHA-256). Since the number of bytes hashed until the call
to s2n_hmac_copy is made is:
HashLen = InnerHashKeyLen + SeqNumLen + HdrLen
then
HashLenSHA-384 = 128 + 8 + 5 + 720 − 48 − PadLen − 1
+ DecMsgLen − MacLen − PadLen − 1,
HashLenSHA-256 = 64 + 8 + 5 + 576 − 32 − PadLen − 1
and
= 812 − PadLen,
= 620 − PadLen
Due to the inclusion of the underlying hash length ﬁeld and padding in this hashing
operation, we expect to see an increase in the cache hit probability when PadLen ≡
45 mod 128 (45 mod 64 for SHA-256). The experimental results in Table 2 show these
expected changes. We synchronized the attack so that the cache probe is expected to
happen after ≈ 5 calls to the SHA-384 compression function (≈ 7 for SHA-256). So
we should get a cache hit with high probability if the value of PadLen is greater than
172, and with low probability otherwise. This can be seen in the table. There is also
a smaller change in the probability at value 44 (48, 108 and 236 for SHA-256). When
the pad length is less than 44, there is one less compression function call, which causes
the probability of a cache hit to be even lower.
4.6 Creating the Padding Oracle
Our experiments show that s2n permits a single-bit oracle that can distinguish if
PadLen > 172 or not. Recall that PadLen is set from the last byte of the decrypted TLS
record P = R||T||pad, and the method described in Appendix 2.1 can use such an oracle
to learn information about the value of the last byte of P ∗ ⊕ ∆ for attacker-controlled
values ∆. We build this oracle by repeatedly running Algorithm 2 and estimating the
cache hit probability p. We then use this estimate to decide whether PadLen > 172 or
not. The accuracy of this process is determined by the diﬀerence in probabilities and the
number of iterations n of Algorithm 2 that we perform; we are eﬀectively trying to dis-
tinguish between two binomial distributions, one with p = 0.75 (p = 0.66 for SHA-256)
14
Eyal Ronen, Kenneth G. Paterson, and Adi Shamir
and the other with p = 0.97 (p = 0.90 for SHA-256). We set a threshold probability of
pt = 0.86 (pt = 0.78 for SHA-256) and set a desired error probability of β. We can then
calculate n, the required number of iterations, such that Pr(Bin(n, 0.75) > 0.86n)  12 + 16k mod
256 for any k. In Appendix 5 we will show how to choose n, β and the optimal k to
use in the oracle for achieving full plaintext recovery.
5 From s2n Padding Oracle to Full Plaintext Recovery
The attack in Section 4 on s2n provides us with one-bit linear condition oracles on the
padding length byte that is located at the end of the decrypted TLS record.9
However, our goal is to recover multiple, full bytes of plaintext. Fortunately, we
−1 ⊕ ∆||C∗ for diﬀerent
can select the last blocks of the attacker’s TLS record as C∗
values of mask ∆, and post-process the results to gain information about the values of
plaintext block P ∗; more precisely, since the linear conditions are always on the very
last byte p∗ of P ∗, we need only vary ∆ in its last byte position δ, and we can only
gain information about p∗. In this section, we describe two strategies for selecting the
diﬀerent single-byte masks δ to try: a naive approach, and a more sophisticated one.
We remark here that going from single-byte recovery to many-byte recovery can
be achieved in the main application scenario of recovering HTTP cookies. The idea
is to use progressively longer padding of pathnames in HTTP requests to move the
target HTTP cookie bytes one-by-one into the last position p∗ in the target block
P ∗. The HTTP requests are produced by malicious JavaScript running in the victim’s
browser; the browser automatically generates the required TLS connections in response
to the requests. This is a known technique that we borrow from the literature on TLS
attacks [14,3,29], and we do not comment on it further here.
5.1 Naive Algorithm
The naive algorithm is described in Algorithm 3. The algorithm receives the following
parameters:
1. OracleFunc(δ): a function that implements a padding oracle attack for mask value
δ. This function carries out one of the padding oracle attacks from the previous
sections, targeting a particular ﬁxed byte p∗ in the last position in some target
plaintext block P ∗. This involves repeatedly intercepting TLS records containing the
target byte/block p∗/P ∗ in ciphertext block C∗, building ﬁxed-length TLS records
−1 ⊕ ∆||C∗ where the last byte of ∆ is set to δ, and recovering the
ending with C∗
result of evaluating the oracle’s one-bit linear condition on input p∗ ⊕ δ. We assume
that the oracle has error probability β when n iterations are carried out.
9 We actually have several diﬀerent conditions and oracles, depending on the attacker-
controlled TLS record length.
Pseudo Constant Time Implementations of TLS Are Only Pseudo Secure
15
(cid:46) all possible values for PadLen
(cid:46) all possible one-byte mask values δ
OracleRes ← OracleFunc(δ)
for all val in ValList do
ValList ← [0..255]
MaskList ← [0..255]
for all δ in MaskList do
Algorithm 3 Padding Oracle to Plaintext Byte — Naive Algorithm
1: function NaiveOracleToByte(OracleFunc, OracleCondition)
2:
3:
4: