title:Measuring and Disrupting Anti-Adblockers Using Differential Execution
Analysis
author:Shitong Zhu and
Xunchao Hu and
Zhiyun Qian and
Zubair Shafiq and
Heng Yin
Measuring and Disrupting Anti-Adblockers Using
Differential Execution Analysis
Shitong Zhu∗, Xunchao Hu†, Zhiyun Qian∗, Zubair Shaﬁq‡ and Heng Yin∗
∗University of California, Riverside
Email: PI:EMAIL, PI:EMAIL, PI:EMAIL
†Syracuse University, Email: PI:EMAIL
‡University of Iowa, Email: zubair-shaﬁPI:EMAIL
Abstract—Millions of people use adblockers to remove in-
trusive and malicious ads as well as protect themselves against
tracking and pervasive surveillance. Online publishers consider
adblockers a major threat to the ad-powered “free” Web. They
have started to retaliate against adblockers by employing anti-
adblockers which can detect and stop adblock users. To counter
this retaliation, adblockers in turn try to detect and ﬁlter
anti-adblocking scripts. This back and forth has prompted an
escalating arms race between adblockers and anti-adblockers.
We want to develop a comprehensive understanding of anti-
adblockers, with the ultimate aim of enabling adblockers to
bypass state-of-the-art anti-adblockers. In this paper, we present a
differential execution analysis to automatically detect and analyze
anti-adblockers. At a high level, we collect execution traces by
visiting a website with and without adblockers. Through differ-
ential execution analysis, we are able to pinpoint the conditions
that lead to the differences caused by anti-adblocking code. Using
our system, we detect anti-adblockers on 30.5% of the Alexa top-
10K websites which is 5-52 times more than reported in prior
literature. Unlike prior work which is limited to detecting visible
reactions (e.g., warning messages) by anti-adblockers, our system
can discover attempts to detect adblockers even when there is no
visible reaction. From manually checking one third of the detected
websites, we ﬁnd that the websites that have no visible reactions
constitute over 90% of the cases, completely dominating the ones
that have visible warning messages. Finally, based on our ﬁndings,
we further develop JavaScript rewriting and API hooking based
solutions (the latter implemented as a Chrome extension) to help
adblockers bypass state-of-the-art anti-adblockers.
I.
INTRODUCTION
The ad-powered Web keeps most online content and ser-
vices “free”. However, online advertising has raised serious
security and privacy concerns. Attackers have repeatedly ex-
ploited ads to target malware on a large number of users [48,
55]. Advertisers track users across the Web without providing
any transparency or control to users [30, 32, 39, 41, 47]. The
popularity of adblockers is also rising because they provide a
clean and faster browsing experience by removing excessive
and intrusive ads.
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23331
www.ndss-symposium.org
Millions of users worldwide now use adblockers [51] that
are available as browser extensions (e.g., Adblock, Adblock
Plus, and uBlock) and full-ﬂedged browsers (e.g., Brave and
Cliqz). Even Chrome has now included a built-in adblocker in
its experimental version — Chrome Canary [7]. According to
PageFair [26], 11% of the global Internet population is block-
ing ads as of December 2016. A recent study by comScore [40]
reported that 18% of Internet users in the United States use
adblockers. Moreover, the prevalence of adblockers is much
higher for certain locations and demographics. For instance,
approximately half of 18-34 year old males in Germany use
adblockers.
The online advertising industry considers adblockers a
serious threat to their business model. Advertisers and pub-
lishers have started using different countermeasures against
adblockers. First, some publishers such as Microsoft and
Google have enrolled in the so-called acceptable ads program
which whitelists their ads. While small publishers can enroll
in the program for free, medium- and large-sized publishers
have to pay a signiﬁcant cut of their ad revenue to enroll.
Second, some publishers — most notably Facebook — are
manipulating ads that are harder to remove by adblockers
[13]. However, adblockers have been reasonably quick to
catch up and adapt their ﬁltering rules to block these ads
as well [3]. Third, many publishers have implemented anti-
adblockers — JavaScript code that can detect and/or respond to
the presence of adblockers at client-side. While Facebook is the
only reported large publisher that has tried to use the second
approach, a recent measurement study of Alexa top-100K
websites [42] reported that the third strategy of anti-adblocking
is more widely employed. Common anti-adblockers force users
to whitelist the website or disable their adblocker altogether.
We want to develop a comprehensive understanding of anti-
adblockers, with the ultimate aim of enabling adblockers to be
resistant against anti-adblockers. To this end, we propose a sys-
tem based on differential execution analysis to automatically
detect anti-adblockers. Our key idea is that when a website
is visited with and without adblocker, the difference between
the two JavaScript execution traces can be safely attributed
to anti-adblockers. We use differential execution analysis to
precisely identify the condition(s) used by anti-adblockers to
detect adblockers which helps us understand how they operate.
The experimental evaluation against a ground-truth labeled
dataset shows that our system achieves 87% detection rate with
no false positives.
We employ our system on Alexa top-10K list and are able
to detect anti-adblockers on 30.5% websites. From manually
checking one third (1000) of these detected websites, we ﬁnd
that the number of websites that have no visible reactions
versus is an order of magnitude higher than the ones that
have visible warning messages. We not only discover anti-
adblocking walls (warnings) invoked after adblockers are de-
tected, but also websites that silently detect adblockers and
subsequently either switch ads [49] or report adblock statistics
to their back-end servers. Our ability to detect visible as well
as silent anti-adblockers allows us to detect 5-52 times more
anti-adblockers than reported in prior literature.
We further leverage our systematic detection of anti-
adblockers using differential execution analysis to help ad-
blockers evade state-of-the-art anti-adblockers. First, since we
can precisely identify the branch divergence causing adblock
detection, we propose to use JavaScript rewriting to force the
outcome of a branch statement for avoiding anti-adblocking
logic. Second, we propose to use API hooking in a browser
extension to intercept and modify responses to hide adblock-
ers. The evaluation shows that our current proof-of-concept
implementations, which still have room for engineering im-
provements, are able to successfully evade a vast majority of
the state-of-the-art anti-adblockers.
II. BACKGROUND AND RELATED WORK
Adblockers rely on manually curated ﬁlter lists to block
ads and/or trackers. EasyList and EasyPrivacy are the two most
widely used ﬁlter lists to block ads and trackers, respectively.
The ﬁlter lists used by adblockers contain two types of rules
in the form of regular expressions. First, HTTP ﬁlter rules
generally block HTTP requests to fetch ads from known third-
party ad domains. For example, the ﬁrst ﬁlter rule below blocks
all
third-party HTTP requests to doubleclick.com. Second,
HTML ﬁlter rules generally hide HTML elements that contain
ads. For example, the second ﬁlter rule below hides the HTML
element with ID banner_div on aol.com.
||doubleclick.comˆ$third-party
aol.com###banner_div
It is noteworthy that ﬁlter lists may contain tens of thou-
sands of ﬁlter rules that together block ads/trackers on different
websites. At the time of writing, EasyList contains more than
63K ﬁlter rules and EasyPrivacy contains more than 13K ﬁlter
rules. The ﬁlter lists are maintained by a group of volunteers
through informal crowdsourced feedback from users [16]. As
expected, adding new rules or removing redundant rules in the
ﬁlter lists is a laborious manual process and is prone to errors
that often result in site breakage [20].
Adblocking browser extensions (e.g., Adblock, AdBlock
Plus, uBlock) and full-ﬂedged browsers (e.g., Brave, Cliqz)
are used by millions of mobile and desktop users around the
world. According to PageFair [26], 11% of the global Internet
population is blocking ads as of December 2016. Adblocking
results in billions of dollars worth of lost advertising revenue
for online publishers. Therefore, online publishers are fast
adopting different technical measures to counter adblockers.
First, publishers can manipulate ad delivery to evade ﬁlter
lists. For example, publishers can keep changing domains that
serve ads or HTML element identiﬁers [13, 52] to bypass
ﬁlter list rules. Such manipulation forces ﬁlter list authors to
update ﬁlter list rules very frequently, making the laborious
process even more challenging. To address this problem,
researchers [31] proposed a method based on network trafﬁc
analysis (e.g., identify ad-serving domains) for updating HTTP
ﬁlter list rules automatically. This method, however, does
not address HTML manipulation by publishers (like recently
done by Facebook [13]). While adblockers have updated their
ﬁlter rules to block Facebook ads for now [3], Facebook can
continuously manipulate their HTML to circumvent new ﬁlter
rules. To address this challenge, researchers [50] proposed
a perceptual adblocking method for visually identifying and
blocking ads based on optical character recognition and fuzzy
image matching techniques. The key idea behind the perceptual
adblocking method is that ads are distinguishable from organic
content due to government regulations (e.g., FTC [12]) and in-
dustry self-regulations (e.g., AdChoices [27]). Researchers [50]
reported that perceptual adblocking fully addresses the ad
delivery manipulation problem.
Second, publishers try to detect and stop adblockers using
anti-adblocking scripts. At a high level, anti-adblockers check
whether ads are correctly loaded to detect the presence of
adblockers [45]. After detecting adblockers, publishers typi-
cally ask users to disable adblockers altogether or whitelist the
website. Some publishers also ask users for donation or paid
subscription to support their operation. Prior work [42] showed
that 686 out Alexa top-100K websites detect and visibly react
to adblockers on their homepages.
Adblockers try to circumvent anti-adblockers by remov-
ing JavaScript code snippets or by hiding intrusive adblock
detection notiﬁcations. To this end, adblockers again rely on
crowdsourced ﬁlter lists such as Anti-Adblock Killer [11] and
Adblock warning removal list [18]. First, HTTP ﬁlter list rules
block HTTP requests to download anti-adblock scripts. For
example, the ﬁrst ﬁlter rule below blocks URLs to download
blockadblock.js. Second, HTML ﬁlter rules hide HTML
elements that contain adblock detection notiﬁcations. For ex-
ample, the second ﬁlter rule below hides the HTML element
with ID ad_block_msg on zerozero.pt.
/blockadblock.js$script
zerozero.pt###ad_block_msg
Prior work [35] showed that these ﬁlter lists targeting anti-
adblockers are maintained in an ad-hoc manner and are always
playing catchup. Publishers can evade these ﬁlter lists by either
serving anti-adblocking scripts from ﬁrst-party or by incorpo-
rating them in the base HTML. Moreover, some third-party
anti-adblocker services deploy fairly sophisticated hard-to-
defeat techniques to detect adblockers [42]. In sum, adblockers
currently are simply not effective against anti-adblocking. For
example, prior work showed that adblockers remove less than
20% of the adblock detection warning messages shown by
anti-adblockers [42].
Prior research has proposed several solutions to detect
and circumvent anti-adblockers. One solution is to ﬁngerprint
third-party anti-adblocking scripts using static code signatures
[50]. However, JavaScript ﬁngerprinting is not scalable if code
signatures are not automatically derived. Manual JavaScript
2
code analysis is much more challenging compared to iden-
tifying ad-related URL or HTML elements. So even if the
effort is crowdsourced, it is unlikely to catch up with the
quickly changing landscape of anti-adblockers. Worse, even
simple obfuscation techniques such as code minimization will
likely substantially increase the manual effort to rebuild these
signatures. Similarly, the approach in [45] also bears the above
limitations even when they attempt to reduce the amount of
manual work by analyzing only commonly appeared scripts in
clusters.
Researchers have proposed automated static JavaScript
code analysis techniques (based on syntactic and structural
analysis) for malicious JavaScript detection [28, 37, 46]. Prior
work has borrowed these techniques to automatically extract
signatures for tracker [34] and anti-adblock [35] detection.
Ikram et al. [34] proposed syntactic and semantic JavaScript
static code features with one-class SVMs to detect tracking
JavaScript programs. Iqbal et al. [35] proposed syntactic
JavaScript static code features with SVMs to detect anti-
adblocking scripts. However, it is challenging for static code
analysis techniques to truly capture JavaScript behavior, which
is dynamic and can be easily obfuscated.
To aid future research on the arms race between adblockers
and anti-adblockers, in this paper we propose a dynamic code
analysis approach to systematically characterize anti-adblock
behavior on a large scale. Our key idea is that differential
execution analysis (i.e., with and without adblocker) will reveal
anti-adblockers trying to detect adblockers. Our proposed
approach has three major advantages over prior work. First,
it allows us to detect anti-adblockers without prior knowledge
about their behavior. Second, it is robust against simple (e.g.,
code minimization) and more advanced (e.g., runtime code
generation) code obfuscation techniques. Finally, unlike prior
work [42] that only detects visible reactions by anti-adblockers,
it can identify whether there is an attempt to detect adblockers
even if there is no visible reaction.
III. PROBLEM FORMULATION & SYSTEM OVERVIEW
An anti-adblocker script consists of two main components:
(1) trigger, which detects the presence of adblockers (e.g.,
by checking the absence of an ad); (2) reaction, which can
display the adblock detection message and/or simply report
the results to a backend server. As discussed earlier, prior
work [35, 42, 43, 45] has reported a wide range of strategies
used by different publishers to detect and react to adblockers.
Some websites use simple anti-adblock scripts, served from
ﬁrst-party domains, to check display-related attributes of ads
for detecting adblockers. Others use more sophisticated third-
party anti-adblocking services that may employ active baits,
do continuous detection, or use cookies track users’ adblock
detection status across different visits. Therefore, it is challeng-
ing to automatically detect diverse anti-adblocking behaviors
used by different publishers and third-party anti-adblocking
services. The state-of-the-art solution in prior literature [42]
uses machine learning to automatically detect anti-adblockers
that exhibit visible reactions. However, this solution can largely
underestimate the ubiquitous of anti-adblockers because it
cannot detect silent anti-adblockers or subtle reactions (more
details in §V-B). In this section, we formulate the anti-
adblock detection problem. We then present the blueprint for a
1 &nbsp;
2 
Fig. 1: A simple anti-adblocking example from a real website
Fig. 2: System overview
program analysis based approach to automatically detect anti-
adblockers.
We start by providing a motivating example to introduce
our key ideas. Our key observation is that a website employing
anti-adblocking would have a different JavaScript execution
trace if it is loaded with adblocker (positive trace) as compared
to without adblocker (negative trace). To illustrate the point,
we consider a simple real-world anti-adblocking example in
Figure 1. We note that the anti-adblocking script embeds an
empty div whose class is set to banner_ads which is a
known class type that will trigger blocking. The code then
simply checks whether the ad frame is blocked to determine
the presence of adblockers. Speciﬁcally, when an adblocker is
used, the ad frame will become undeﬁned, and its length
and height values will be zero. The if condition in the
anti-adblocking script checks the values of these attributes. If
the script detects that the value of either of these attributes is
zero, it detects adblocker and reacts by displaying an alert and
subsequently redirecting the user to a subscription page (code
omitted for brevity). Without adblocker, the if condition will
not be satisﬁed.
It is noteworthy that the JavaScript execution trace will
differ under A/B testing. More speciﬁcally, since we are able
to control two execution environments (i.e., browser instances)
where the only difference is the presence/absence of an ad-
blocker, the execution trace difference can be safely attributed