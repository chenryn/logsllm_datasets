34 !
35 ip access-list extended VOICE
36 permit ip 192.168.1.0 0.0.0.255 any
37 permit ip any 192.168.1.0 0.0.0.255
38 ip access-list ...
! ACLs FOR OTHER TRAFFIC TYPES
! INTERFACE TO PER1
Figure 3: Class of Service con(cid:2)guration of CER1.
and PER-CER links. Before forwarding an IP packet to the back-
bone, the PER encapsulates it with an MPLS label and maps the
DSCP value of the packet to a 3-bit (cid:2)eld in the MPLS label re-
ferred to as the experimental (EXP) value. This EXP value is used
by P routers to differentially treat traf(cid:2)c in the core. Fig. 2 illus-
trates the overall process of realizing differentiated treatment along
an end-to-end path.
Based on the SLAs and customer input, the network designer
is tasked with determining the CoS policies to instantiate at each
CER and PER for a given VPN. Conceptually, there are three main
components to CoS policies:
(cid:15) Marking: This component involves rules to determine how in-
coming traf(cid:2)c may be assigned to a particular class by setting ap-
propriate ToS values based on packet parameters. Typically, the
parameters used are a subset of the 6-tuple: source and destination
IPs and ports, protocol, and ToS. Note that the ToS (cid:2)eld is included
as the classi(cid:2)cation decision may depend on the ToS (cid:2)eld set by an
earlier device, e.g., a router at the customer premise.
(cid:15) Policing: This component involves rules that determine whether
the packet arrival rate of a class conforms to the speci(cid:2)ed traf(cid:2)c
rates and what actions should be taken. For example, conformant
and non-conformant traf(cid:2)c of each data class could be assigned
different DSCP bits to indicate they must be treated differently. Al-
ternately, non-conformant traf(cid:2)c could simply be dropped.
(cid:15) Queuing: This component applies queuing rules to outgoing router
interfaces that may experience congestion (e.g., a PER-facing CER
interface). The rules for each queue specify the discipline (e.g.,
RED, Weighted Fair Queuing) and allocated bandwidth of the queue,
as well as attributes (e.g., drop rate) for different traf(cid:2)c classes as-
signed to the queue.
1 class-map match-any REALTIME
2 match ip dscp 46
3 class-map match-any CRITICAL-DATA
4 match ip dscp 48
5 match ip dscp 26
6 match ip dscp 28
7 !
8 policy-map WAN-INGRESS-POLICING
9 class REALTIME
10
police 95000 conform-action set-mpls-exp-transmit
5 exceed-action drop
11 class CRITICAL-DATA
12
police 60000 conform-action set-mpls-exp-transmit
3 exceed-action set-mpls-exp-transmit 7
13 class class-default
14
police 75000 conform-action set-mpls-exp-transmit
0 exceed-action set-mpls-exp-transmit 4
15 !
16 interface Serial1/0 ! INTERFACE TO CER1
17 service-policy input WAN-INGRESS-POLICING
18 service-policy output WAN-EGRESS-QUEUE ! TO LA
19 !
Figure 4: Class of Service con(cid:2)guration of PER1.
2.3 Complexity of CoS con(cid:2)guration
In this section, we draw attention to a few key aspects of CoS
con(cid:2)guration that make CoS policies particularly complex to man-
age and understand. Our insights are drawn from extensive anal-
ysis of con(cid:2)guration data from operational enterprise VPNs (see
§6). Our discussion is conducted in the context of Fig. 3 and Fig. 4
which respectively present CoS con(cid:2)guration snippets of CER1
and PER1 in Fig. 2. The con(cid:2)gurations are based on Cisco IOS
and are signi(cid:2)cantly simpli(cid:2)ed for ease of illustration.
Instantiated over multiple devices: CoS policies may be instan-
tiated at the CERs, PERs, and P routers, all of which may impact
the treatment of a (cid:3)ow traversing these routers. For example, poli-
cies in the ingress CER are customized to individual customers and
impact how different traf(cid:2)c (cid:3)ows are prioritized on the CER-PER
link. Policies in the ingress PER typically set the appropriate EXP
value in the MPLS label based on the DSCP marking from the
ingress CER, and traf(cid:2)c conformance. Policies in the P routers de-
termine the per-hop queuing strategy inside the core based on the
EXP bits and are typically homogeneous across enterprises since
they re(cid:3)ect provider-level priorities inside the backbone. Finally,
policies in the egress PER prioritize (cid:3)ows on the PER-CER link
according to their ToS values.
Diversity and dynamics of customer policies: The con(cid:2)guration
of the ingress CER is tailored to meet the unique requirements of in-
dividual customers. As our analysis of real enterprise VPN datasets
in §6.2 will show, CERs within an enterprise VPN may be very dif-
ferent and heterogeneous in terms of the data classes that each CER
supports, while the polices used across enterprises may be very di-
verse. Further, these policies are very dynamic, requiring con(cid:2)gu-
ration changes over time to re(cid:3)ect the evolving nature of customer
requirements, emergence of new applications, and shifts in traf(cid:2)c
patterns (e.g., migration of a database server to another site).
Multiple policy blocks per device: The CoS con(cid:2)guration of each
router can be composed of multiple CoS policy blocks. Typically,
the output PER-facing interface of a CER is associated with two
policy blocks, corresponding to the policing and queuing rules.
In addition, every input interface may be associated with a policy
block corresponding to the marking rules, or the marking rules may
be merged with the policing rules on the output interface. Fig. 3
illustrates CER1’s con(cid:2)guration, which employs the latter style.
Lines 32-34 show the de(cid:2)nition of the PER1-facing WAN interface,
which is associated with a single policy construct embedding two
egress policy blocks (policing and queueing). Lines 18-28 show
221)
R
E
C
(
F
D
C
 100
 80
 60
 40
 20
 0
 0
 100
 200
 300
 400
 500
Number of ACL rules related to CoS
Figure 5: CDF of the number of CoS-related ACL rules per CER.
the de(cid:2)nition of the queuing policy block, and lines 7-17 show the
de(cid:2)nition of the policing block. Each of these con(cid:2)guration blocks
starts with the keyword policy-map and is organized into multi-
ple sub-blocks, each of which starts with the keyword class. Each
of these sub-blocks corresponds to a particular class of traf(cid:2)c, and
de(cid:2)nes the (policing or queuing) rules for that class. For instance,
for the REALTIME class, line 9 indicates that based on the param-
eter, traf(cid:2)c is either marked with a DSCP value of 46 to indicate
it is conformant, or dropped if it is non-conformant, while line 20
indicates that the queueing discipline to be used is a priority queue.
Specifying class membership using multiple large ACLs: Flows
are usually classi(cid:2)ed into different classes by using multiple ACLs.
For instance, in Fig. 3, the class membership is speci(cid:2)ed in lines 1-5
using con(cid:2)guration blocks that start with the keyword class-map.
Each class-map identi(cid:2)es matching (cid:3)ows with a list of criteria,
such as ACLs (lines 2-3) or packet parameters (line 4), and based
on the match-all or match-any keyword might declare a packet
to be a member of that class if all or any of the criteria is matched.
An ACL consists of a list of permit/deny rules evaluated sequen-
tially, and the membership described by an ACL includes all the
permitted (cid:3)ows. For example, the ACL used by line 2 describes
VOICE traf(cid:2)c with two permit rules (lines 35-37). Fig. 5 shows a
CDF of the total number of ACL rules used by CoS policies con-
(cid:2)gured in a CER, across all VPNs in our dataset. We see that more
than 100 ACL rules are con(cid:2)gured for CoS in 20% of the CERs,
and the CER with the most ACL rules has more than 500 rules.
Discussions with the designers revealed that the large number of
rules may be due to (i) a customer not using contiguous subnet or
port ranges to classify applications; and (ii) evolution of classi(cid:2)-
cation policies, when ACL entries are added without consolidating
existing entries. Given that each policy block can specify member-
ship of multiple classes, each expressed as a logical combination
of multiple ACLs with potentially hundreds of rules, manually de-
termining the class which each (cid:3)ow in a set of (cid:3)ows belongs to is
impractical from the perspective of operators.
Transformations of (cid:3)ows: Each CoS policy block may modify the
packet headers or MPLS labels, impacting how they are treated at
the next policy block or device. For instance, marking rules may
be instantiated in the input LAN-facing interface of a CER, which
can modify the DSCP header of a packet, which in turn affects how
the packet is treated by the policing and queueing rules. Likewise,
the treatment of a (cid:3)ow at the PER may depend on how it has been
marked at the CER. Fig. 4 presents a con(cid:2)guration snippet of PER1.
The con(cid:2)guration has a similar structure to that of CER1. For each
class of traf(cid:2)c, the appropriate EXP value in the MPLS label is set
based on the DSCP value and traf(cid:2)c conformance as shown in the
policy-map block in lines 8-15. Interestingly, we note that traf(cid:2)c
is labeled with the same EXP bits for multiple DSCP values of 48,
26, and 28. Thus, though the traf(cid:2)c belonging to these classes may
CER
Ethernet0/1
……
Serial1/0
LAN-POLICY
……
WAN-EGRESS-POLICER-QUEUE
……
……
REALTIME-POLICER
CRITICAL-DATA-POLICER
BEST-EFFORT-MARKER
REALTIME
class-
default
CRITICAL-
DATA
ROUTING
OTHER-CRITICAL-
DATA
CONFIG
CONFIG
BLOCK
BLOCK
interface
policy-map
(parent)
policy-map
(child)
class-map
……
INTERACTIVE-
VIDEO
VOICE
TRANSACTIONAL-
DATA
BGP
access-list
Figure 6: Syntactic reference structure of con(cid:2)guration in Fig. 3.
be treated differently at the CER1-PER1 link, they are treated in the
same fashion in the backbone. Given such complexity in design, it
is necessary to consider potential transformations by every router
in determining the end-to-end treatment of a (cid:3)ow.
Potential for errors: CoS con(cid:2)guration is highly intertwined, with
several dependencies that exist across different logical blocks of
the con(cid:2)guration. Fig. 6 illustrates the syntactic dependencies of
CER1’s con(cid:2)guration. Con(cid:2)gurations with such a highly inter-
twined structure are hard to manually navigate and prone to mis-
con(cid:2)gurations. An example miscon(cid:2)guration may involve real-
time traf(cid:2)c being incorrectly con(cid:2)gured to enter the queue cor-
responding to best-effort traf(cid:2)c. As another example, errors may
arise due to the complex ordering relationships in the con(cid:2)gura-
tion. For instance, consider the policy-map block in lines 18-28
of Fig. 3. If the class-map REALTIME had a catch-all clause (all
traf(cid:2)c is matched), then, no traf(cid:2)c would match the class CRITICAL-
DATA. This would imply that no traf(cid:2)c would be sent to that par-
ticular queue, even though this is not obvious from a casual inspec-
tion of the con(cid:2)guration. We refer to a situation where a policy
corresponding to a traf(cid:2)c class can never see traf(cid:2)c as a shadowed
policy. We discuss more examples of such errors in §6.
3. MODELING CLASS OF SERVICE
In this section, we present a model to extract the end-to-end CoS
policies between a pair of devices from low-level con(cid:2)gurations.
We view such a model as an essential building block that can en-
able applications useful to operators such as troubleshooting, visu-
alization of network-wide CoS designs, auditing, and analysis of
con(cid:2)guration changes. Performing these tasks is challenging to-
day due to the complex nature of CoS con(cid:2)guration, motivating the
need for formal modeling of CoS policies.
In modeling CoS con(cid:2)guration, we had several objectives. First,
we wanted a formal representation of CoS policies that precisely
and unambiguously captures the policy goals, yet is independent of
low-level con(cid:2)guration syntax. Second, the representation should
be easily derivable from low-level con(cid:2)gurations through a sim-
ple parser. Third, we wanted the representation to be amenable to
composition, i.e., it should be possible to compose the formal rep-
resentations corresponding to different policy blocks in a router, or
across routers to obtain an end-to-end view of the CoS design.
We provide an overview of our approach to achieve these goals
in §3.1, and discuss the details in the rest of the section.
3.1 Overview
We model the overall CoS policy as a function that we call a rule-
set that takes a multiple dimensional input and produces an output.
The input is a (cid:3)owset, which is an arbitrary set of (cid:3)ows. A sin-
gle (cid:3)ow is identi(cid:2)ed by the 6-tuple IP header (cid:2)elds: source and
222destination IP addresses, source and destination port numbers, pro-
tocol, and ToS byte. In addition, there may be other inputs that
model attributes outside the scope of a static analysis. For exam-
ple, a policing policy treats packets differently depending on their
conformance to the SLA. We handle this by having an additional
bit in the input that speci(cid:2)es whether the model should treat the
packets in a (cid:3)ow as conformant or not. The output provides infor-
mation about the treatment seen by a packet corresponding to each
(cid:3)ow (e.g., which queue would be used by the packet), how the
packet gets changed (e.g., how the routers modify the ToS byte),
and where the packet ends up (e.g., does it get dropped by a policer
if non-conformant).
Our overall approach consists of three steps:
(cid:15) First, we construct a root ruleset that models each CoS policy
block of every device from the con(cid:2)guration (cid:2)les. For instance, for
the CER con(cid:2)guration in Fig. 3, two root rulesets are constructed,
which correspond to the policing rules (lines 7-17) and the queuing
rules (lines 18-28). For the PER con(cid:2)guration in Fig. 4, one root
ruleset is constructed corresponding to the policing rules (lines 8-
15).
(cid:15) We initially begin with a representation of a root ruleset which is
itself expressed in terms of other rulesets. These dependencies mir-
ror the inherent nested structure of con(cid:2)guration, enabling the root
ruleset to be easily derivable from the low-level con(cid:2)gurations. We
then show how a (cid:3)at representation which eliminates these depen-
dencies may be derived. The (cid:3)at representation makes it feasible to
compose multiple root rulesets.
(cid:15) Finally, we model the end-to-end CoS policy as a sequence of root
rulesets in (cid:3)at representation, with each root ruleset being allowed
to transform the input before sending it to the next root ruleset. We
take such a sequence and collapse it into one single ruleset in (cid:3)at
representation that contains the overall CoS behavior.
3.2 Recursive representation of rulesets
A ruleset can be viewed as a generalization of access control
lists (ACLs), typically used for reachability control [18]. A stan-
dard ACL has only two basic actions: (cid:147)permit(cid:148) and (cid:147)deny(cid:148). Thus,
it can be seen as a function that maps an input to one of these two
output values. A ruleset generalizes the notion in a few ways. First,
a ruleset may recursively depend on other rulesets. The ruleset at
the top of the recursive hierarchy is a root ruleset that encompasses
a single CoS policy block. The rulesets at the bottom of the hierar-
chy, which we refer to as leaf rulesets, capture the matching criteria