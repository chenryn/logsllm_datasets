# PDF流的提取与恶意样本分析

## 流的提取
在PDF文档中，`/Filter`关键字之后保存了流的编码信息。常见的编码方式包括：
- `/FlateDecode`
- `/ASCIIHexDecode`
- `/ASCII85Decode`
- `/LZWDecode`
- `/DCTDecode`
- `/RunLengthDecode`
- `/CCITTFaxDecode`
- `/JBIG2Decode`
- `/JPXDecode`
- `/Crypt`

这些编码方式可以按常见顺序进行排序，并且支持级联编码。例如：

```pdf
0 0 obj
<</Filter [/ASCIIHexDecode /FlateDecode]>>stream
...
endstream
```

表示流先经过了`/ASCIIHexDecode`再经过了`/FlateDecode`编码。解码时，需要先对流进行`/FlateDecode`解码，然后再进行`/ASCIIHexDecode`解码。目前发现的级联编码样本多为两级编码，但可能存在三级或更多级的级联编码。解码后的流对象通常为JavaScript脚本或图片对象，其中恶意攻击代码通常储存在JavaScript脚本中。

### 示例
下面是从一个恶意样本中提取的PDF流文件中的JavaScript脚本，明显是攻击代码：

```javascript
function urpl(k, sc) {
    var c = "x75";
    var kc = k + c;
    var re = /MM/g;
    sc = sc.replace(re, kc);
    return sc;
}
padding_0c = "MM0c0cMM0c0c";
padding00 = "MM0000";
padding_41 = "MM4141";
var x1 = 0;
var x2 = 0;
var x3 = 0;
```

## 常见规避行为
恶意PDF样本通常会使用一些特殊手段来对抗杀软的扫描检查。以下是一些常见的规避行为：

### 交叉引用表问题
1. **偏移不正确**
   ```pdf
   Xref
   0 2
   0000000000 65536 f
   0000003195 00000 n
   startxref
   8980
   %%EOF
   ```
   正常情况下，交叉引用表的偏移地址应为固定数值。然而，实际测试发现偏移地址可以任意设置，例如上例中的`8980`。

2. **多个交叉引用表**
   ```pdf
   xref
   0 4
   0000000000 65535 f
   0000000000 65536 n
   0000039095 00000 n
   0000000015 00000 n
   trailer
   ]/Root 26 0 R/Size 28/Info 27 0 R>>
   startxref
   39630
   %%EOF
   ...
   xref
   20 1
   0000040341 00000 n
   26 4
   0000040380 00000 n
   0000040484 00000 n
   0000040677 00000 n
   0000040734 00000 n
   55 2
   0000172790 00000 n
   0000172925 00000 n
   trailer
   ]/Size 63/Prev 39630>>
   startxref
   173446
   %%EOF
   ```
   通常一个文档只有一个`%%EOF`结束符，但此样本中出现了两个。

### 字符串长度问题
1. **流对象长度可以直接跟对象**
   ```pdf
   2 0 obj
   >
   # 对应的obj对象中包含的长度如下
   4 0 obj
   4880
   endobj
   ```
   流的实际长度为`4880`，虽然符合PDF格式规范，但也是一种规避杀软的手法。

2. **流对象长度可以为任意值**
   ```pdf
   16 0 obj
   >
   stream
   WTF is ANIWAY_LEN???
   ```
   实际测试发现，`/Length`后面可以不跟数值，流的实际长度等于`endstream`关键字的偏移减去`stream`关键字的偏移，再减去包含的`0x0D`或`0x0A`。

### 解码问题
1. **JavaScript支持文本和八进制**
   ```javascript
   function urpl(k, sc) {
       var c = "x75";
       var kc = k + c;
       var re = /MM/g;
       sc = sc.replace(re, kc);
       return sc;
   }
   padding_0c = "MM0c0cMM0c0c";
   padding00 = "MM0000";
   padding_41 = "MM4141";
   var x1 = 0;
   var x2 = 0;
   var x3 = 0;
   ```
   需要判断JavaScript内容是否需要转码。

2. **编码方式缩写形式**
   ```pdf
   1 0 obj
   >
   Stream
   xœíÜYXù
   ÷qÆÌ0K3ÆØRÆVdoUƒQ"[M!S(íRÓ¾0–h¥B*d•hß~5´©
   endstream
   ```
   编码方式可以使用缩写形式，如`/Fl`代表`/FlateDecode`。

3. **编码形式可以级联**
   ```pdf
   10 0 obj
   >
   <</Filter [/ASCIIHexDecode /FlateDecode]>>stream
   ...
   endstream
   ```
   表示流先经过了`/ASCIIHexDecode`加密再进行了`/FlateDecode`加密，解码时需要先进行`/FlateDecode`解密，再进行`/ASCIIHexDecode`解密。

## 常用分析工具推荐
介绍完恶意PDF格式后，推荐一些基本的分析工具：

- **PdfStreamDumper**：[http://www.freebuf.com/sectool/1211.html](http://www.freebuf.com/sectool/1211.html)
  - 功能：流解析工具
  - 语言：VB
  - 备注：存在一些bug，无法解析级联编码后的流。

- **PDFParser**：[https://github.com/vincent0629/PDFParser](https://github.com/vincent0629/PDFParser)
  - 功能：PDF格式解析
  - 语言：C++
  - 备注：逻辑清晰，可以参考。

- **ParanoiDF**：[https://github.com/patrickdw123/ParanoiDF](https://github.com/patrickdw123/ParanoiDF)
  - 功能：恶意PDF分析
  - 语言：Python
  - 备注：开源项目。

此外，还有一些优秀的开源项目如`pyew`、`peepdf`等，不再一一列举。

## 参考资料
- [PDF, let me count the way…](https://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/)
- [Cryin/PDFTear](https://github.com/Cryin/PDFTear)
- [Adobe PDF 官方文档](http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf)
- [Malicious Document PDF analysis in 5 steps](https://countuponsecurity.com/2014/09/22/malicious-documents-pdf-analysis-in-5-steps/?utm_source=tuicool&utm_medium=referral)
- [C#实现的PDF解析器](https://www.oschina.net/translate/pdf-file-analyzer-with-csharp-parsing-classes-vers)