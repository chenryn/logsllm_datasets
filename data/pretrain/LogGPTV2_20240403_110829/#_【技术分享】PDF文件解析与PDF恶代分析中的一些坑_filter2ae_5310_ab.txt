**  
**
**流的提取**
****/Filter关键字之后保存了stream流的编码信息一共包括以下几种：  
    /FlateDecode
    /ASCIIHexDecode
    /ASCII85Decode
    /LZWDecode
    /DCTDecode
    /RunLengthDecode
    /CCITTFaxDecode
    /JBIG2Decode
    /JPXDecode
    /Crypt
一共包括上面几种编码方式，按常见顺序进行了排序，可以级联编码。例如：
    0 0 obj
    >
表示流先经过了ASCIIHexDecode再经过了FlateDecode编码解密是即先对流进行FlateDecode解码再对流进行ASCIIHexDecode解码目前遇到2种级联编码样本（如上），可能会有更多级联编码方式（3级或以上）解码后能够触发攻击的流对象为javascript脚本或者图片对象，常见的恶意攻击代码储存在javascript脚本中。  
下面的图片是提取自样本中的PDF steam流文件中的js脚本，已经很明显是攻击代码了：
**一些坑**
PDF的恶意攻击样本毫无疑问会使用一些特殊手段对抗杀软的扫描检查，下面统计了一下恶意样本常见的规避行为
交叉引用表坑1 引用表偏移不正确
    Xref    #表示交叉引用表开始
    0 2     #0表明引用表描述的对象编号从0开始，8说明共有8个对象
    0000000000 65536 f #一般pdf都是以这行开始交叉引用表的，起始地址0和产生号
    0000003195 00000 n #表示对象1，就是catalog，3195为偏移地址n表示对象在使用
    startxref
    8980  #8980为交叉引用表的偏移地址，此处为十进制表示
    %%EOF #文件结束标志
上面有提到过交叉引用表的偏移地址为固定数值，推测adobe的parser是从文件尾开始解析，获得交叉引用表的偏移地址(Xref中X在文档中所在的位置即为偏移地址)，找到交叉引用表再定位到各个对象，实际测试发现偏移地址可以不正确8980偏移地址实际可能为任意地址。
坑2 引用表可以有多个
    xref
    0 4
    0000000000 65535 f
    0000000000 65536 n
    0000039095 00000 n
    0000000015 00000 n
    trailer
    ]/Root
    26 0 R/Size 28/Info 27 0 R>>
    startxref
    39630
    %%EOF
    >
    Stream
    Ddd
    endstream
    xref
    20 1
    0000040341 00000 n
    26 4
    0000040380 00000 n
    0000040484 00000 n
    0000040677 00000 n
    0000040734 00000 n
    55 2
    0000172790 00000 n
    0000172925 00000 n
    trailer
    ]/Size
    63/Prev 39630>>
    startxref
    173446
    %%EOF
样本如上，正常来讲，一个文档只存在一个%EOF结束符，但是这个样本里出现了两个  
**字符串长度**
坑1 流对象长度可以直接跟对象
正常一个字典语句中/Length之后的数值代表stream~endstream两个关键字之间流的长度，如下
    7 0 obj
    >
    stream
但测试发现流的长度可以是obj对象
    2 0 obj
    >
    #对应的obj对象中包含的长度如下
    4 0 obj
    4880
    endobj
所以stream流对象压缩前的实际长度为4880虽然是PDF格式的正规使用方法，但同时也是规避杀软的一种手法。  
坑2 流对象长度可以为任意值
    7 0 obj
    >
    stream
同理，正常流对象长度为上图，实际测试发现样本
    16 0 obj
    >
    stream
WTF is ANIWAY_LEN???
长度可以为填ascii字符???所以，/Length后面可以不跟数值stream流的实际长度实际==关键字endstream偏移-关键字stream偏移-包含的0x0D或0x0A
**解码问题**
坑1 javascript可以支持文本和八进制
    7 0 obj
    >
    endobj
    16 0 obj
    >
    stream
    function urpl(k,sc){
    var c = "x75";
    var kc=k+c;
    var re = /MM/g;
    sc = sc.replace(re,kc);
    return sc;
    }
    padding_0c = "MM0c0cMM0c0c";
    padding00="MM0000";
    padding_41 = "MM4141";
    var x1=0;
    var x2=0;
    var x3=0;
    endstream
    endobj
有JS编程基础的肯定注意到了，因此在这里需要判断javascript内容在对象中还是在（）内亦或是否需要转码
坑2 编码方式缩写形式
    1 0 obj
    >
    Stream
    xœíÜYXù
    ÷qÆÌ0K3ÆØRÆVdoUƒQ"[M!S(íRÓ¾0–h¥B*d•hß~5´©
    endstream
正常文件默认/Filter关键字之后会出现xxdecode关键字表示stream流编码方式，但测试发现样本可以没有xxdecode关键字，但同样进行了编码处理，如上/Fl字段即为/FlateDecode的简写，对应表如下：
    /FlateDecode     /Fl
    /ASCIIHexDecode  /AHx
    /ASCII85Decode   /A85
    /LZWDecode       /LZW
    /RunLengthDecode /RL
    /CCITTFaxDecode  /CCF
    /JBIG2Decode #/JBIG2Decode其实和/DCTDecode解码方式是一样的
    /DCTDecode       /DCT
坑3 编码形式可以级联
    10 0 obj
    >
如上表示流先经过了ASCIIHex加密再进行了FlateDecode加密解码时需要先进行FlateDecode解密之后再进行ASCIIHexDecode解密
**  
**
**常用分析工具推荐**
介绍完恶代格式后，推荐一些恶代分析的基本工具
[**PdfStreamDumper**](http://www.freebuf.com/sectool/1211.html)
stream流解析工具
vb开源项目。工具存在一些bug，无法解析级联编码后的stream流，例如/Fl/Fl编码就无法解析
[**PDFParser**](https://github.com/vincent0629/PDFParser)
c++开源项目，pdf格式解析，逻辑比较清晰，可以参考
[**ParanoiDF**](https://github.com/patrickdw123/ParanoiDF)
python开源项目，恶代分析
此外还有一些很赞的开源项目如pyew、peepdf等等，不一一贴地址了。
**  
**
**References**
[PDF, let me count the way…](https://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/)
[](https://github.com/Cryin/PDFTear)[Cryin/PDFTear](https://github.com/Cryin/PDFTear)
[](http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf)[Adobe
PDF
官方文档](http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf)
[](https://countuponsecurity.com/2014/09/22/malicious-documents-pdf-analysis-in-5-steps/?utm_source=tuicool&utm_medium=referral)[Malicious Document PDF
analysis in 5 steps](https://countuponsecurity.com/2014/09/22/malicious-documents-pdf-analysis-in-5-steps/?utm_source=tuicool&utm_medium=referral)
[](https://www.oschina.net/translate/pdf-file-analyzer-with-csharp-parsing-classes-vers)[](https://www.oschina.net/translate/pdf-file-analyzer-with-csharp-parsing-classes-vers)[C#实现的PDF解析器](https://www.oschina.net/translate/pdf-file-analyzer-with-csharp-parsing-classes-vers)