> 感谢南梦师傅博客 [南梦爷爷博客](https://196011564.github.io "南梦爷爷博客")
# 虚拟机保护的pwn
当我们 拿到 一个 虚拟机的 pwn的时候 先看看函数的逻辑
是很多 分支 或者说很多 switch 语句  
这样 很大可能说明了 这很有可能是一个 虚拟机 或者是一个 解释器
## vm 解释器的 基本认识
### 寄存器
  1. `PC` 程序计数器，他存放的是一个内存地址，该地址中存放着 **下一条** 要执行的计算机指令
  2. `SP` 指针寄存器，永远指向当前栈顶。
  3. `BP` 基质指针。也是用于指向栈的某些位置，在调用函数的时候会用到它
  4. `AX` 通用寄存器，我们的虚拟机中，它用于存放一条指令执行后的结果
在程序中 `PC`的初始值指向目标代码的 `main` 函数
### 指令集
虚拟机定义的时候 会定义一个 全局变量的 枚举类型 里面有我们需要的指令  
如 ：`MOV`,`ADD` 之类的
## 通过例题学习
### ciscn 2019 华东南 pwn Virtual
#### 题目分析
刚开始的 malloc_all 里面会记录我们的 的输入 的不同段开始的地址 和 对应的 参数个数  
例如：stack
在 store 函数中 有个 move 函数 会把我们的输入保存到我们 开始时创建的 对应chunk 中
  1. 首先输入`name`和`instruction`
  2. 让进入到主要函数 以`\n\r\t被分割` 将我们 输入的`instruction` 分为一组一组的指令
  3. 分别根据 匹配到的指令将 对应的 值 放入`ptr` 数组中
  4. 程序一共有 `push` `pop` `add` `sub` `mul` `div` `load` `save` 这几个指令
**分析得到这里是 给虚拟机 布置指令**
    void __fastcall ins_stack(__int64 some_data, char *ins)
    {
      int idx; // [rsp+18h] [rbp-18h]
      int i; // [rsp+1Ch] [rbp-14h]
      const char *part1; // [rsp+20h] [rbp-10h]
      _QWORD *ptr; // [rsp+28h] [rbp-8h]
      if ( some_data )
      {
        ptr = malloc_0(8LL * *(some_data + 8));
        idx = 0;
        for ( part1 = strtok(ins, delim); idx = 0 && mov(some_data, ptr[i]); --i )
          ;
        free(ptr);
      }
    }
mov 函数
    signed __int64 __fastcall mov(chunk *data, __int64 ptr)
    {
      int idx; // [rsp+1Ch] [rbp-4h]
      if ( !data )
        return 0LL;
      idx = data->idx + 1;
      if ( idx == data->size )
        return 0LL;
      *(data->section_ptr + 8LL * idx) = ptr;
      data->idx = idx;
      return 1LL;
    }
  1. 然后会到另一个函数，给栈上布置参数
  2. 也是用`\n\r\t被分割` 将我们的输入 然后保存在虚拟的栈上
    void __fastcall num_stack(__int64 a1, char *data)
    {
      int v2; // [rsp+18h] [rbp-28h]
      int i; // [rsp+1Ch] [rbp-24h]
      const char *nptr; // [rsp+20h] [rbp-20h]
      _QWORD *ptr; // [rsp+28h] [rbp-18h]
      if ( a1 )
      {
        ptr = malloc_0(8LL * *(a1 + 8));
        v2 = 0;
        for ( nptr = strtok(data, delim); v2 = 0 && mov(a1, ptr[i]); --i )
          ;
        free(ptr);
      }
    }
**布置指令和参数**
IDA 在识别的时候出现错误 没有很好的反汇编  
我们就看看汇编代码
如果我们 之前输入的 指令 对应的值 `-0x11` 还小于 0x21 的话这个时候 会把它当作 index 去找到对应的值
然后让程序跳转到对应的指令去 执行虚拟机指令
#### 漏洞分析
程序 分析到这里 就是一个 简单的 虚拟机结构，但是程序没有对数组的下标进行判断  
所以，我们可以看i用这个漏洞向我们需要的一个地方写入值。
#### 利用思路
我们可以先泄露 一个 libc 的值，从而 修改一个 函数的 Got 表的值为  
system 或者 为 onegadget 的值  
从而让我们能直接利用得到 shell
测试  
计算出 1 + 3 的值
> > 根据队列来取值 或调用的参数
然后发现 程序每个 值都是更具 对应chunk 前一个 chunk 中更具 idx 来选取的，发现程序没有对 这个 idx 进行判断
sava(data, offset）  
sava 函数对 offset 地址赋值为 data  
因为没有验证 offset 的值  
我们可以 输入负数修改 data chunk 的信息chunk 的 data_chunk 指针为 got 表 从而下次 push 函数会吧这个地址当作我们的
运行段
load(offset)  
保存data 段对应 offset 地址的值
然后用到 save 函数把我们 需要的 libc 地址 保存到对应的 libc 表中  
从而得到 shell
修改 puts 为 system
    from pwn import *
    context.log_level='debug'
    p = process('./pwn')
    elf = ELF('./pwn')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    def d(s=''):
        gdb.attach(p,s)