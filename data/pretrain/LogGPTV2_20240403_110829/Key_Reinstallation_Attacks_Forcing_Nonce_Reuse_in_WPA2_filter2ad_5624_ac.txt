### Table 1: Client Behavior

| Implementation | Retransmission of Message 3 Accepted | Plain-Text EAPOL Messages Accepted (PTK Configured) | Plain-Text EAPOL Messages Accepted (After 1st Message 3) | Affected by Section 3.4 Attack | Vulnerable to 4-Way Handshake Attack | Vulnerable to Group Key Handshake Attack |
|----------------|---------------------------------------|----------------------------------------------------|--------------------------------------------------------|---------------------------------|--------------------------------------|------------------------------------------|
| OS X 10.9.5    | ✓                                     | ✓                                                  | ✓                                                      | ✓                               | ✓                                    | ✓                                        |
| macOS Sierra 10.12 | ✓                                     | ✓                                                  | ✓                                                      | ✓                               | ✓                                    | ✓                                        |
| iOS 10.3.1     | ✗                                     | N/A                                                | N/A                                                    | ✗                               | ✓                                    | ✓                                        |
| wpa_supplicant v2.3 | ✓                                     | ✓                                                  | ✓                                                      | ✓a                              | ✓a                                   | ✓                                        |
| wpa_supplicant v2.4-5 | ✓                                     | ✓b                                                 | ✓b                                                     | ✓                               | ✓                                    | ✓                                        |
| wpa_supplicant v2.6 | ✓                                     | ✓a                                                 | ✓a                                                     | ✓                               | ✓                                    | ✓                                        |
| Android 6.0.1  | ✗                                     | ✓                                                  | ✗                                                      | ✗                               | ✓                                    | ✓                                        |
| OpenBSD 6.1 (rum) | ✗                                     | ✓                                                  | ✗                                                      | ✗                               | ✓                                    | ✓                                        |
| OpenBSD 6.1 (iwn) | ✗                                     | ✓                                                  | ✗                                                      | ✗                               | ✓                                    | ✓                                        |
| Windows 7      | ✗                                     | N/A                                                | N/A                                                    | ✗                               | ✓                                    | ✓                                        |
| Windows 10     | ✗                                     | N/A                                                | N/A                                                    | ✗                               | ✓                                    | ✓                                        |
| MediaTek       | ✓                                     | ✓                                                  | ✓                                                      | ✓                               | ✓                                    | ✓                                        |

**Notes:**
- **a**: Due to a bug, an all-zero TK will be installed. See Section 6.3.
- **b**: Only the group key is reinstalled in the 4-way handshake.
- **c**: Certain tests are irrelevant (not applicable) because the implementation does not accept retransmissions of message 3.

### Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2

#### Introduction
The third obstacle in our attack is that some implementations only accept frames protected by the data-confidentiality protocol once a PTK has been installed (see Table 1, column 3). This is problematic because the authenticator will retransmit message 3 without encryption, causing the retransmitted message to be ignored by the supplicant. Although this seems to thwart our attack, we found a technique to bypass this issue (see Section 3.4).

In the following sections, we will detail how to execute our key reinstallation attack against the 4-way handshake under various conditions. Specifically, we first explain the attack when the client (victim) accepts plaintext retransmissions of message 3 (see Table 1, column 3). Then, we demonstrate the attack when the victim only accepts encrypted retransmissions of message 3 (see Table 1, column 4). Table 1, column 6, summarizes which devices are vulnerable to some variant of the key reinstallation attack against the 4-way handshake. It is important to note that device behavior depends on both the operating system and the wireless NIC being used. For example, while Linux accepts plaintext retransmissions of message 3, the Wi-Fi NICs in several Android devices reject them. However, Android phones with different wireless NICs may accept plaintext retransmissions of message 3.

#### 3.3 Plaintext Retransmission of Message 3
If the victim still accepts plaintext retransmissions of message 3 after installing the session key, our key reinstallation attack is straightforward. First, the adversary performs a channel-based MitM attack to manipulate handshake messages [70]. The adversary then blocks message 4 from reaching the authenticator (stage 1 in Figure 4). Immediately after sending message 4, the victim installs the PTK and GTK, opens the 802.1x port, and starts transmitting normal data frames (recall Section 2.3). The first data frame uses a nonce value of 1 in the data-confidentiality protocol.

In the third stage of the attack, the authenticator retransmits message 3 because it did not receive message 4. The adversary forwards the retransmitted message 3 to the victim, causing it to reinstall the PTK and GTK. This resets the nonce and replay counter used by the data-confidentiality protocol. Note that the adversary cannot replay an old message 3 because its EAPOL replay counter is no longer fresh. We ignore stage 4 of the attack for now. When the victim transmits its next data frame, the data-confidentiality protocol reuses nonces. The adversary can control the amount of nonces reused by waiting an arbitrary amount of time before forwarding the retransmitted message 3 to the victim. Additionally, the adversary can always perform the attack again by deauthenticating the client, after which it will reconnect with the network and execute a new 4-way handshake.

Figure 4 also shows that our key reinstallation attack can occur spontaneously if message 4 is lost due to background noise. Clients that accept plaintext retransmissions of message 3 may already be reusing nonces without an adversary present. An adversary could selectively jam message 4 [70], resulting in a stealthy attack indistinguishable from random background interference.

Returning to stage 4 of the attack, the goal is to complete the handshake at the authenticator side. This is not trivial because the victim has already installed the PTK, meaning its last message 4 is encrypted. Since the authenticator has not yet installed the PTK, it will normally reject this encrypted message 4. However, a careful inspection of the 802.11 standard reveals that the authenticator may accept any replay counter used in the 4-way handshake, not just the latest one [1, §12.7.6.5]:

"On reception of message 4, the Authenticator verifies that the Key Replay Counter field value is one that it used on this 4-way handshake."

In practice, we found that several APs accept older replay counters. Some APs accept replay counters used in a message to the client but not yet in a reply from the client (see column 2 in Table 2 on page 8). These APs will accept the older unencrypted message 4, which has the replay counter r + 1 in Figure 4. As a result, these APs will install the PTK and start sending encrypted unicast data frames to the client.

Although Figure 4 only illustrates nonce reuse in frames sent by the client, our attack also enables us to replay frames. After the client reinstalls the GTK in stage 3 of the attack, broadcast and multicast frames sent by the AP after retransmitting message 3 can be replayed. This is because replay counters are also reset when reinstalling a key. If we can make the AP install the PTK, we can also replay unicast frames sent from the AP to the client. We confirmed that the attack shown in Figure 4 works against MediaTek’s implementation of the Wi-Fi client and certain versions of wpa_supplicant (see Section 6.3).

#### 3.4 Encrypted Retransmission of Message 3
We now describe how to attack clients that, once they have installed the PTK, only accept encrypted retransmissions of message 3. To accomplish this, we exploit an inherent race condition between the entity executing the 4-way handshake and the entity implementing the data-confidentiality protocol.

As a warm-up, we first attack Android’s implementation of the supplicant. We found that Android accepts plaintext retransmissions of message 3 when they are sent immediately after the original message 3 (see column 4 of Table 1). Figure 5 illustrates why this is the case.

**Figure 4: Key Reinstallation Attack Against the 4-Way Handshake**

- **Stage 1:** Adversary blocks message 4.
- **Stage 2:** Victim installs PTK and GTK.
- **Stage 3:** Authenticator retransmits message 3.
- **Stage 4:** Adversary forwards retransmitted message 3 to the victim, causing nonce and replay counter reset.
- **Stage 5:** Victim reuses nonces in subsequent data frames.

**Figure 5: Key Reinstallation Attack Against the 4-Way Handshake (Encrypted Retransmission)**

- **Stage 1:** Adversary blocks message 4.
- **Stage 2:** Victim installs PTK and GTK.
- **Stage 3:** Authenticator retransmits message 3.
- **Stage 4:** Adversary forwards retransmitted message 3 to the victim, causing nonce and replay counter reset.
- **Stage 5:** Victim reuses nonces in subsequent data frames.

This detailed explanation provides a clear and professional overview of the key reinstallation attacks and their execution under different conditions.