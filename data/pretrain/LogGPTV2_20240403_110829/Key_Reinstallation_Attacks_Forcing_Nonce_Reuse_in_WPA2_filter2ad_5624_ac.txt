Table 1: Behaviour of clients: 2nd column shows whether re-
transmission of message 3 are accepted, 3rd whether plain-
text EAPOL messages are accepted if a PTK is configured,
4th whether it accepts plaintext EAPOL messages if sent im-
mediately after the first message 3, and 5th whether it is af-
fected by the attack of Section 3.4. The last two columns de-
note if the client is vulnerable to a key reinstallation attack
against the 4-way or group key handshake, respectively.
3
g
s
M
Implementation R
e
.
L
O
P
A
E
.
t
P
.
t
P
k
c
i
u
Q
.
t
C
k
c
i
u
Q
y
a
w
-
4
p
u
o
r
G
✓
✓
✓
✓
✓
✓
✓
✓
✗
✗
✗
✗
✓
✓
✓ ✓
OS X 10.9.5
macOS Sierra 10.12
✓
✓ ✓
iOS 10.3.1 c
✗ N/A N/A N/A ✗ ✓
wpa_supplicant v2.3
✓
✓
✓ ✓
✓a ✓a ✓
wpa_supplicant v2.4-5 ✓
✓b ✓b ✓
wpa_supplicant v2.6
✓
✓a ✓a ✓
Android 6.0.1
OpenBSD 6.1 (rum)
✗ ✓
✗
OpenBSD 6.1 (iwn)
Windows 7 c
Windows 10 c
MediaTek
a Due to a bug, an all-zero TK will be installed, see Section 6.3.
b Only the group key is reinstalled in the 4-way handshake.
c Certain tests are irrelevant (not applicable) because the im-
plementation does not accept retransmissions of message 3.
✓
✓ ✓
✗ N/A N/A N/A ✗ ✓
✗ N/A N/A N/A ✗ ✓
✓ ✓
✓
✗
✗
✗
✗
✓
✓
✓
✓
✓
✗
✓
with the same MAC address as the targeted AP. This assures the
client and AP derive the same session key.
The third obstacle is that certain implementations only accept
frames protected using the data-confidentiality protocol once a PTK
has been installed (see Table 1 column 3). This is problematic for our
attack, because the authenticator will retransmit message 3 without
encryption. This means the retransmitted message will be ignored
by the supplicant. Although this would seem to foil our attack, we
found a technique to bypass this problem (see Section 3.4).
In the next two Sections, we will describe in detail how to ex-
ecute our key reinstallation attack against the 4-way handshake
under various conditions. More precisely, we first explain our attack
when the client (victim) accepts plaintext retransmissions of mes-
sage 3 (see Table 1 column 3). Then we demonstrate the attack when
the victim only accepts encrypted retransmissions of message 3 (see
Table 1 column 4). Table 1 column 6 summarizes which devices are
vulnerable to some variant of the key reinstallation attack against
the 4-way handshake. We remark that the behaviour of a device
depends both on the operating system, and the wireless NIC being
used. For example, although Linux accepts plaintext retransmis-
sions of message 3, the Wi-Fi NICs used in several Android devices
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1317CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Mathy Vanhoef and Frank Piessens
reject them. However, Android phones with a different wireless
NIC may in fact accept plaintext retransmissions of message 3.
3.3 Plaintext Retransmission of message 3
If the victim still accepts plaintext retransmissions of message 3 after
installing the session key, our key reinstallation attack is straight-
forward. First, the adversary uses a channel-based MitM attack
so she can manipulate handshake messages [70]. Then she blocks
message 4 from arriving at the authenticator. This is illustrated in
stage 1 of Figure 4. Immediately after sending message 4, the victim
will install the PTK and GTK. At this point the victim also opens
the 802.1x port, and starts transmitting normal data frames (recall
Section 2.3). Notice that the first data frame uses a nonce value
of 1 in the data-confidentiality protocol. Then, in the third stage
of the attack, the authenticator retransmits message 3 because it
did not receive message 4. The adversary forwards the retransmit-
ted message 3 to the victim, causing it to reinstall the PTK and
GTK. As a result, it resets the nonce and replay counter used by the
data-confidentiality protocol. Note that the adversary cannot replay
an old message 3, because its EAPOL replay counter is no longer
fresh. We ignore stage 4 of the attack for now. Finally, when the
victim transmits its next data frame, the data-confidentiality pro-
tocol reuses nonces. Note that an adversary can wait an arbitrary
amount of time before forward the retransmitted message 3 to the
victim. Therefore, we can control the amount of nonces that will
be reused. Moreover, an adversary can always perform the attack
again by deauthenticating the client, after which it will reconnect
with the network and execute a new 4-way handshake.
Figure 4 also shows that our key reinstallation attack occurs
spontaneously if message 4 is lost due to background noise. Put
differently, clients that accept plaintext retransmissions of mes-
sage 3, may already be reusing nonces without an adversary even
being present. Inspired by this observation, an adversary could also
selectively jam message 4 [70], resulting in a stealthy attack that is
indistinguishable from random background interference.
We now return to stage 4 of the attack. The goal of this stage
is to complete the handshake at the authenticator side. This is not
trivial because the victim already installed the PTK, meaning its last
message 4 is encrypted.3 And since the authenticator did not yet
install the PTK, it will normally reject this encrypted message 4.4
However, a careful inspection of the 802.11 standard reveals that
the authenticator may accept any replay counter that was used in
the 4-way handshake, not only the latest one [1, §12.7.6.5]:
“On reception of message 4, the Authenticator verifies
that the Key Replay Counter field value is one that it
used on this 4-way handshake.”
In practice, we found that several APs indeed accept an older replay
counter. More precisely, some APs accept replay counters that were
used in a message to the client, but were not yet used in a reply
from the client (see column 2 in Table 2 on page 8). These APs
will accept the older unencrypted message 4, which has the replay
3The 802.11 standard says that a retransmitted message 4 must be sent in plaintext in
the initial 4-way handshake [1, §12.7.6.5], but nearly all clients send it using encryption.
4 Similar to fixes in [63, 64], a non-standard implementation may already install the
PTK for reception-only after sending message 3. We found no AP doing this though.
Supplicant (victim)
Adversary (MitM)
Authenticator
Msg1(r, ANonce)
Msg2(r, SNonce)
Msg3(r+1; GTK)
Msg4(r+1)
Install PTK & GTK
Enc1
ptk{ Data(...) }
Msg3(r+2; GTK)
Enc2
ptk{ Msg4(r+2) }
Reinstall PTK & GTK
Msg1(r, ANonce)
Msg2(r, SNonce)
Msg3(r+1; GTK)
Msg3(r+2; GTK)
Enc2
ptk{ Msg4(r+2) }
Msg4(r+1)
Install PTK ?
next transmitted frame(s) will reuse nonces
Enc1
ptk{ Data(...) }
ptk{ Data(...) }
Enc1
1○
2○
3○
4○
5○
Figure 4: Key reinstallation attack against the 4-way hand-
shake, when the supplicant (victim) still accepts plaintext
retransmissions of message 3 if a PTK is installed.
counter r + 1 in Figure 4. As a result, these AP will install the PTK,
and will start sending encrypted unicast data frames to the client.
Although Figure 4 only illustrates nonce reuse in frames sent by
the client, our attack also enables us to replay frames. First, after
the client reinstalls the GTK in stage 3 of the attack, broadcast and
multicast frames that the AP sent after retransmitting message 3
can be replayed. This is because replay counters are also reset when
reinstalling a key. Second, if we can make the AP install the PTK,
we can also replay unicast frames sent from the AP to the client.
We confirmed that the attack shown in Figure 4 works against
MediaTek’s implementation of the Wi-Fi client, and against certain
versions of wpa_supplicant (see Section 6.3). How we attacked
other implementations is explained in the next section.
3.4 Encrypted Retransmission of message 3
We now describe how we can attack clients that, once they installed
the PTK, only accept encrypted retransmissions of message 3. To
accomplish this, we exploit an inherent race condition between the
entity executing the 4-way handshake, and the entity implementing
the data-confidentiality protocol.
As a warm-up, we first attack Android’s implementation of the
supplicant. Here we found that Android accepts plaintext retrans-
missions of message 3 when they are sent immediately after the
original message 3 (see column 4 of Table 1). Figure 5 shows why
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1318Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2
CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Supplicant (victim)
Supplicant (vitcim)
Main CPU
Wireless NIC
Adversary (MitM)
Main CPU
Wireless NIC
Adversary (MitM)
1○
2○
3○
4○
5○
Msg1(r, ANonce)
Msg2(r, SNonce)
Msg3(r+1; GTK)
Msg3(r+2; GTK)
Msg4(r+1)
Install-keys command
Msg1(r, ANonce)
Msg2(r, SNonce)
Msg3(r+1; GTK)
Msg3(r+2; GTK)