title:Oblix: An Efficient Oblivious Search Index
author:Pratyush Mishra and
Rishabh Poddar and
Jerry Chen and
Alessandro Chiesa and
Raluca Ada Popa
2018 IEEE Symposium on Security and Privacy
Oblix: An Efﬁcient Oblivious Search Index
Pratyush Mishra Rishabh Poddar
Jerry Chen Alessandro Chiesa
Raluca Ada Popa
{pratyush, rishabhp, jerry.c, alexch, raluca.popa}@berkeley.edu
UC Berkeley
Abstract—Search indices are fundamental building blocks of
many systems, and there is great interest in running them on
encrypted data. Unfortunately, many known schemes that enable
search queries on encrypted data achieve efﬁciency at the expense
of security, as they reveal access patterns to the encrypted data.
In this paper we present Oblix, a search index for encrypted
data that is oblivious (provably hides access patterns), is dynamic
(supports inserts and deletes), and has good efﬁciency.
Oblix relies on a combination of novel oblivious-access tech-
niques and recent hardware enclave platforms (e.g., Intel SGX).
In particular, a key technical contribution is the design and
implementation of doubly-oblivious data structures, in which the
client’s accesses to its internal memory are oblivious, in addition
to accesses to its external memory at the server. These algorithms
are motivated by hardware enclaves like SGX, which leak access
patterns to both internal and external memory.
We demonstrate the usefulness of Oblix in several applications:
private contact discovery for Signal, private retrieval of public
keys for Key Transparency, and searchable encryption that hides
access patterns and result sizes.
I. INTRODUCTION
A search (or inverted) index is a fundamental building block
of many systems, and is often used for sensitive data such
as personal or corporate information. A rich line of work
[8, 12, 11, 17, 33, 36, 39, 40, 51, 52, 62, 63] aims to protect
such sensitive information by encrypting it while still allowing
search on the encrypted data. In this model, when a client
wishes to retrieve documents matching a certain keyword, the
client generates a search token for the keyword and sends it
to the server; the token hides information about the keyword,
but enables the server to identify all matching (encrypted)
documents and return them to the client, who can then decrypt.
Despite signiﬁcant progress in constructing such encrypted
search indices, known schemes with good efﬁciency suffer from
an important limitation, namely, they leak access patterns. The
exact leakage varies from scheme to scheme, but in its basic
form it enables identiﬁcation of which (encrypted) documents
match a keyword, for each searched keyword (this is leakage
proﬁle L1 in the categorization of Cash et al. [10]).
A recent line of attacks [4, 10, 26, 30, 34, 42, 53, 79] has
demonstrated that such access pattern leakage can be used
to recover signiﬁcant information about data in encrypted
indices. For example, some attacks can recover all search
queries [10, 34, 42, 79] or a signiﬁcant portion of the content
of encrypted documents [4, 26]. Even hiding access patterns
can be insufﬁcient: some attacks cleverly use the number of
documents that match a search query [10, 37], so it is important
to hide the result size as well. Clearly, preventing such leakage
would drastically improve security of encrypted search indices.
The go-to method to hide access patterns is Oblivious RAM
© 2018, Pratyush Mishra. Under license to IEEE.
DOI 10.1109/SP.2018.00045
279
Apps
Private contact
discovery for
Signal (§VI-C)
Anonymizing
Google’s Key
Transparency
(§VI-D)
Oblivious
searchable
encryption (§VI-E)
Oblix
singly-oblivious
oblivious sorted
multimap (OSM) (§IV)
oblivious data structures
(ODS) (§III-B)
doubly-oblivious
doubly-oblivious sorted
multimap (DOSM) (§V-C)
doubly-oblivious data
structures (DODS) (§V-B)
Path ORAM (§III-A)
Path DORAM (§V-A)
Figure 1: Component stack of Oblix. Grey blocks are components that exist
before Oblix, and white blocks are Oblix’s contributions.
(ORAM) [27], but this is an expensive tool [10, 34, 50], and
thus few prior schemes try to hide access patterns [24], and
even fewer hide result sizes.
In this paper, we present Oblix (OBLivious IndeX), an
efﬁcient search index that does not leak access patterns and
enables hiding the result size of searches. In particular, Oblix
protects against all the aforementioned attacks. At the same
time, Oblix supports updates (inserts and deletes) as well
as multiple (potentially malicious) users, properties that are
challenging to achieve for many prior schemes. While hardware
enclaves such as Intel SGX [45] are a key enabler for Oblix,
they are far from sufﬁcient, and Oblix leverages a combination
of novel cryptographic protocols and systems techniques. Fig. 1
shows the logical layout of our techniques, as well as the three
applications that we demonstrate on top of Oblix.
A. Summary of techniques
We discuss the challenges that arose in designing our system,
and the techniques that we used to overcome them. Recall that
Path ORAM [64] (a popular and relatively efﬁcient ORAM
scheme) consists of an ORAM client that stores the secret
key and an ORAM server holding the bulk of the data; the
ORAM client maintains a position map, mapping each item in
the search index to a location in the oblivious database, and a
stash of temporary values; see Section III-A for details.
Challenge: high round complexity. The position map has
size that is linear in the number of entries in the index. In our
applications (e.g., contact discovery for Signal), clients cannot
store it. The standard solution is to store the position map at
the ORAM server in another ORAM instance with its own
(smaller) position map, and recurse until the position map is
small enough for the client to store. However, this solution
implies that each index lookup requires a logarithmic (in the
index size) number of requests, and hence roundtrips, to the
server. These roundtrips severely degrade latency.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
Approach: Our ﬁrst insight is that, by using recent hardware
enclave technology (such as Intel SGX [45]), we can improve
latency by reducing network roundtrips, as we now explain. At
the server, we place the ORAM client inside the enclave and
place the ORAM server in unprotected memory outside the
enclave. All accesses to the ORAM server are still oblivious, but
interaction between the ORAM client and server happens within
a single machine, and not over the network. In Section I-B,
we explain that hardware enclaves also let us support multiple
users. Unfortunately, simply “throwing the ORAM client inside
the enclave” is far from sufﬁcient and, in fact, is insecure.
Challenge: hardware enclaves are not oblivious. Recent
attacks have shown that hardware enclaves like Intel SGX leak
access patterns in several ways (see Fig. 2).
First, prior work [69, 75] shows that an operating system
can observe page-level access patterns and uses this leakage
to recover encrypted document contents from the enclave.
Second, when the data grows large, it needs to be stored
on secondary storage. An attacker can then observe (page-
level) access patterns to this secondary storage. Third, an
attacker could mount an affordable hardware attack that taps
into the memory bus and reads memory addresses coming
from an enclave. We note that recent work aiming to prevent a
compromised operating system from mounting the page-fault
attack [59] does not address the second and third attacks.
In our setting, the above leakage is problematic because the
security guarantees of ORAM rely on the attacker not seeing
the access patterns of the ORAM client to its internal memory.
For Path ORAM, this means that if the attacker sees accesses
to the client’s position map or stash, it can infer access patterns
to the ORAM server, defeating the purpose of using ORAM.
Approach: We devise a two-part solution to address this
challenge. First, we avoid the need for a position map by
constructing an oblivious data structure (ODS) [74] that embeds
the position map into the data structure itself.
Second, we make the ORAM client’s accesses to its internal
state oblivious via novel oblivious algorithms. We call the
resulting ORAM scheme doubly oblivious because not only
are the accesses to the ORAM server oblivious, but so are the
accesses to the ORAM client’s internal memory. Thus, even
if the attacker observes access patterns to the client’s internal
memory, it learns nothing about the data. We design efﬁcient
oblivious algorithms for stash eviction and for initializing the
ORAM server. These algorithms were challenging to design
because the ORAM client makes complex accesses to the stash
and (during initial setup) to the ORAM storage, and cannot rely
on any memory location being unobservable to the attacker. We
deem our doubly-oblivious algorithms for Path ORAM (called
DORAM), and also for the ODS framework (called DODS), to
be of independent interest.
Challenge: hide result sizes. Even if we hide access patterns,
we still need to hide the size of the result set for a search query.
Indeed, this information can be used to learn the contents of a
query or its result set [10, 37]. The simplistic solution is to pad
each result size to a worst-case upper bound, but this is too
expensive for many applications. For instance, when searching
documents, while most keywords might have a modest number
of matches, some popular keywords will have a large number
of matches, forcing the worst-case upper bound to be large. In
fact, Naveed [50] shows that padding to the worst-case size can
be more expensive than simply streaming the entire database
to the client, obviating the need for ORAM.
Approach: The insight is to examine how the user sees
search results in regular systems today. Many applications
do not display to users all results at once (think of web or
email searches), but only a page of r results, for some pre-
determined m (say, 20). To make these r results meaningful,
these applications show the “best” r results according to
some order of interest (relevance, chronological, or others
[54]). Ordering the results of a search query presupposes
embedding support for scoring in the search index, which is not
traditionally captured by searchable encryption (SE) schemes.
We deviate from this tradition and explicitly model scores in
the interface of our search index, which supports operations on
a scored inverted index data structure whose searches return the
r highest-scoring search results. Doing so enables us to avoid
expensive worst-case padding without compromising security,
while providing a meaningful correctness guarantee.
Challenge: ordered lists, efﬁciently and obliviously. We
need to design an oblivious data structure that can (efﬁciently)
search ordered lists, and support insertions and deletions.
Simply mapping the multimap [k ⇒ v1, v2, . . . , vn] to a regular
oblivious map ([55, 74]) [(k, 1) ⇒ v1, . . . , (k, n) ⇒ vn] is
problematic because inserts require shifting O(n) values.
Approach: We design a doubly-oblivious sorted multimap
(DOSM), a specialized data structure that efﬁciently supports
searching ranges in sorted lists,
insertions, and deletions.
First, we design a suitable tree data structure, where inser-
tions/deletions run in time O(log n) instead of O(n) as above,
that is compatible with the ODS framework. Next, to achieve
double-obliviousness, one might consider simply employing our
DODS in place of ODS. However, ODS uses caching to fetch
tree nodes more efﬁciently. Replicating this feature without
leaking information about cache contents implies performing a
dummy ORAM access upon a cache hit (to give the impression
of a cache miss), thus defeating the purpose of the cache.
Instead, we carefully analyze our oblivious tree algorithms to
allow oblivious caching. For example, for certain tree operations
(such as inserts), one can predict from public information which
nodes will be accessed repeatedly (and thus must be in the
cache), and can thus safely retrieve these nodes from the cache
without a dummy ORAM access. We make a worst-case access
only when such a prediction is not possible.
B. Summary of Applications and Evaluation
We show that Oblix can scale to databases of tens of millions
of records while providing practical performance. For example,
retrieving the top 10 values mapped to a key takes only 12.7 ms
for a database containing ∼ 16 M records.
We point out that an important side effect of using hardware
enclaves is support for multiple users even when some users
280
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:06 UTC from IEEE Xplore.  Restrictions apply. 
user 1
user 2
…
query
results
processor
processor
cores &  
cores &  
caches
caches
memory 
memory
encryption  
encryption  
engine
engine
gi
physical protection 
boundary
server-side
bus
bus
address,  
address, 
data   
data
a   
RAM
RAM
enclave internal 
enclave internal 
memory
memory
external RAM
external RAM
storage
storage
address, 
address, 
data      
data
a    
Figure 2: Visibility of access patterns with enclaves such as Intel SGX: the