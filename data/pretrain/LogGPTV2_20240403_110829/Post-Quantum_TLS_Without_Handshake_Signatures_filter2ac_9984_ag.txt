namespaced API, it is straightforward to link together these im-
plementations. We took SIKE and all signature schemes from the
Open Quantum Safe (OQS) library [107], although many of the
relevant implementations in liboqs came from PQClean initially.
Where PQClean and OQS did not provide implementations using
architecture-specific optimizations (most importantly, AVX2 vector
instructions), we ad-hoc integrated those ourselves.
Specifically, we use the AVX2-accelerated code from PQClean for
Kyber and Dilithium. The AVX2-optimized implementation of SIKE
comes from OQS. We ad-hoc integrated AVX2-accelerated imple-
mentations of GeMSS and Falcon, provided by their submitters, into
PQClean, and used OQS‚Äôs scripts to import those into liboqs. For
XMSSMT
, we used the reference implementation of XMSS, which
uses an optimized C implementation of SHAKE-128 for hashing.
The pre-quantum and symmetric algorithms are provided by Ring.
To support TLS 1.3 with post-quantum primitives in Rustls, we
simply added the KEMs to the list of supported key-exchange al-
gorithms in Rustls. By hard-coding the key share offered by the
client, we can then easily force a certain KEM to be used for key
exchange. We added the supported signature algorithms to Rustls,
Ring, and WebPKI. In various places we needed to update RSA- and
EC-inspired assumptions on the sizes of key shares and certificates.
For example, Rustls did not expect certificates to be larger than
64 KB, instead of the 16 MB allowed by the RFC [93, App. B.3.3].
Supporting KEMTLS required changing the state machine, for
which we modified the TLS 1.3 implementation in Rustls to suit
our new handshake. To authenticate using KEM certificates, we
added encapsulation and decapsulation using certificates and the
corresponding private keys to WebPKI. Rustls and WebPKI do not
support creating certificates, so we created a script for that.
s
6 EVALUATION OF KEMTLS VS. TLS 1.3
In this section we compare KEMTLS to TLS 1.3 with post-quantum
signatures and key exchange. We first give a comparison in terms
of handshake size and speed and then move to properties beyond
performance, including consequences for PQ signature design.
6.1 Handshake sizes
Table 1 shows the size of public-key cryptographic objects trans-
mitted in KEMTLS versus TLS 1.3.
In scenarios aiming to minimize communication size, switching
from TLS 1.3 to KEMTLS can reduce the total number of bytes
transmitted in a handshake by 38% from 3035 (SFXG) to 1853 (SSXG),
when including intermediate CA certificates, or by 58% from 2024
(SFGG) to 842 (SSGG), when excluding intermediate CA certificates.
In scenarios with much faster lattice-based cryptography, switch-
ing from TLS 1.3 to KEMTLS also reduces handshake size. For exam-
ple, when switching TLS 1.3 with Kyber key exchange and Dilithium
authentication (KDDD) to KEMTLS with Kyber ephemeral and au-
thenticated key exchange and Dilithium signatures only in cer-
tificates (KKDD), handshake size reduces by 16% from 10036 B to
8344 B when including intermediate CA certificates, and by 24%
from 6808 B to 5116 B when excluding intermediate CA certificates.
6.2 Speed measurements
Benchmarking methodology. In our experiments we use the ex-
ample TLS client and server implementations provided by Rustls,
modifying the client to allow measuring more than one handshake
in a loop. We instrument the handshake to print nanoseconds
elapsed, starting from either sending or receiving the initial message
until operations of interest for both client and server.
We follow the same methodology as [87] for setting up emu-
lated networks. The measurements are done using the Linux ker-
nel‚Äôs network namespacing [14] and network emulation (NetEm)
features [51]. We create network namespaces for the clients and
the servers and create virtual network interfaces in those names-
paces. We vary the latency and bandwidth of the emulated network.
NetEm adds a latency to the outgoing packets, so to add a latency
of ùë• ms, we add ùë•/2 ms of latency to the client and server inter-
faces; following [87], we consider round-trip times (RTT) of 31.1 ms
(representing an transcontinental connection) and 195.6 ms (repre-
senting a trans-Pacific connection). We also throttle the bandwidth
of the virtual interfaces, considering both 1000 Mbps and 10 Mbps
connections. We do not vary packet loss rate, fixing it at 0%.
We ran measurements on a server with two Intel Xeon Gold 6230
(Cascade Lake) CPUs, each featuring 20 physical cores, which gives
us 80 hyperthreaded cores in total. For the measurements, we run
forty clients and servers in parallel, such that each process has its
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
own (hyperthreaded) core. We measured 100000 handshakes for
each scheme and set of network parameters.
Handshake times. Table 2 (middle) shows handshake times for a
high-speed internet connection, with 31.1 ms RTT and 1000 Mbps
bandwidth. Table 2 (right) shows handshake times for a slower con-
nection with an RTT of 195.6 ms and a bandwidth limit of 10 Mbps.
In both scenarios the client sends a request to the server, to which
the server replies, modeling an HTTP request. We highlight in
bold-face the time until the client receives the response.
For the size-optimized instantiations of KEMTLS, i.e., SSXG and
SSGG, we see a slowdown compared to the corresponding SFXG and
SFGG instantiations of TLS 1.3, due to the rather high computational
cost of the additional usage of compressed SIKE. For the NTRU
and module-lattice instantiations, we see a mild increase in speed,
which becomes more notable on slower connections. This effect is
only to a very small extent due to faster computations, but rather
an effect of smaller amounts of data being transmitted.
The handshake times including transmission of intermediate CA
certificates with GeMSS public keys (i.e., SFGG and SSGG) require
more round trips, because our benchmarks use the ‚Äústandard‚Äù TCP
initial congestion window (initcwnd) value of 10 maximum seg-
ment size (MSS). Eliminating this would require a massive increase
of initcwnd to around 200 MSS. See discussion in [101, Sec. VII-C].
CPU cycles for asymmetric crypto. For busy Internet servers
performing large numbers of TLS handshakes, as well as battery-
powered clients, another interesting performance criterion is the
computational effort spent on cryptographic operations. For fast
lattice-based schemes the differences in computational effort are not
visible from handshake timings, because computation needs orders
of magnitude less time than network communication. We report
time in ms for asymmetric-crypto computations (signing, verifying,
key generation, encapsulation, and decapsulation) in Table 2 (left).
As with handshake times, we see the impact of rather slow SIKE
key encapsulation and the resulting increase in computational effort
when switching from TLS 1.3 with Falcon for authentication (SFXG
and SFGG) to KEMTLS with SIKE for authentication (SSXG and
SSGG). However, for instantiations with stronger focus on speed, we
see a moderate decrease in computational effort on the client side,
e.g., 16% when switching from NFFF to NNFF, excluding verification
of intermediate CA certificates. More importantly, we see a massive
decrease in computational effort on the server side: saving more
than 75% when switching from KDDD to KKDD and almost 90%
when switching from NFFF to NNFF.
6.3 Other characteristics
Who can first send application data. In TLS 1.3, the server is
able to send the first application data after receiving ClientHello,
i.e., in parallel with its first handshake message to the client and
before having received an application-level request from the client.
This feature is used, for example, in SMTPS to send a server banner
to the client. But this feature is not used in many other applications
of TLS, including the most prominent one, HTTPS. In KEMTLS, it
is the client that is ready to send application data first. This does
incur a small overhead in protocols that require a client to receive,
for example, a server banner. However, for most typical application
scenarios, including HTTPS, in which the client sends a request
before receiving any data from the server, this is not a problem.
Smaller TCB in core handshake. The core KEMTLS handshake
is free of signatures, which reduces the trusted code base. Notably,
KEMTLS servers no longer need efficient and secure implemen-
tations of signing, a routine that has been the target of various
side-channel attacks [8, 24, 48, 60, 109]. With KEMTLS, signatures
are only generated in the more confined and secured environment
of certificate authorities. The effect is less notable on the client side,
because clients still need code to verify signatures in certificates.
However, this code does not deal with any secret data and thus
does not need side-channel protection. The same argument applies
for servers in KEMTLS with client authentication as in Appendix C.
For some combinations of algorithms, clever tweaks could also
reduce the TCB size; for example, in SSXG or SSGG, running SIKE
‚Äòin reverse‚Äô for the ephemeral KEM would allow the client to only
do degree-2 isogeny operations, also increasing client performance.
Reducing the amount of (trusted) code is particularly attractive for
embedded devices, which typically have tight constraints on code
size and are often exposed to a variety of side-channel attacks.
Requirements for post-quantum signatures. Many PQ signa-
ture schemes can tweak parameters to make different trade-offs
between signature size, signing speed, public-key size, and veri-
fication speed. One common direction to optimize for is signing
speed, or more precisely signing latency reported as the number
of clock cycles for a single signature. The common motivation for
this optimization is the use of online signatures in handshake pro-
tocols like the one used in TLS 1.3 (and earlier versions) or the
SIGMA handshake approach [67] used, for example, in the Internet
key-exchange protocol (IKE) [64].
In KEMTLS, signatures are only needed for certificates and thus
computed offline. This eliminates the requirement for low-latency
signing; what remains important (depending to some extent on
certificate-caching strategies) is signature size, public-key size, ver-
ification latency, and‚Äîat least for certificate authorities‚Äîsigning
throughput. However, throughput can easily be achieved for any
signature scheme by signing the root of an XMSS or LMS tree and
using the leaves of that tree to sign a batch of messages. See [80,
Sec. 6] and the XMSS discussion in Appendix D.
7 CONCLUSION AND FUTURE WORK
In this paper we presented KEMTLS, an alternative to the TLS
handshake using a KEM for both key exchange and authentication,
yielding significant advantages in terms of communication size and
performance compared to TLS 1.3 with post-quantum signatures.
Our analysis only considered the worst-case scenario for KEM-
TLS, in which a client has no prior knowledge of the server‚Äôs certifi-
cate when establishing a connection. This is currently the common
case for HTTPS, but there are multiple other applications of TLS
that could benefit even more from switching to KEMTLS, where a
servers‚Äô public keys are known to clients. Investigating how KEM-
TLS behaves in these scenarios, and how to best optimize the choice
of algorithms, is an interesting question for future work.
This paper reports results only for select NIST PQC Round 3
finalists and alternate candidates, and only for parameter sets at
Post-Quantum TLS Without Handshake Signatures
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
NIST security level 1. It will be interesting to expand benchmarks
to KEMTLS and TLS 1.3 with more primitives and parameter sets.
ACKNOWLEDGMENTS
The authors gratefully acknowledge insightful discussions with
Nick Sullivan and Chris Wood, and the helpful comments of several
anonymous reviewers. We thank Felix G√ºnther for several helpful
suggestions, including suggesting simplifying the proof of KEM-
TLS to rely on IND-CCA, not the more complex PRF-ODH-like
assumption in an earlier version of this paper. We thank Nik Unger
for advice on the deniability properties of KEMTLS. This work
has been supported by the European Research Council through
Starting Grant No. 805031 (EPOQUE) and the Natural Sciences
and Engineering Research Council of Canada through Discovery
grant RGPIN-2016-05146 and a Discovery Accelerator Supplement.
REFERENCES
[1] David Adrian, Karthikeyan Bhargavan, Zakir Durumeric, Pierrick Gaudry,
Matthew Green, J. Alex Halderman, Nadia Heninger, Drew Springall, Emmanuel
Thom√©, Luke Valenta, Benjamin VanderSloot, Eric Wustrow, Santiago Zanella-
B√©guelin, and Paul Zimmermann. 2015. Imperfect Forward Secrecy: How Diffie-
Hellman Fails in Practice. In ACM CCS 2015, Indrajit Ray, Ninghui Li, and Christo-
pher Kruegel (Eds.). ACM Press, 5‚Äì17. https://doi.org/10.1145/2810103.2813707
[2] Erdem Alkim, L√©o Ducas, Thomas P√∂ppelmann, and Peter Schwabe. 2016. Post-
quantum Key Exchange - A New Hope. In USENIX Security 2016, Thorsten Holz
and Stefan Savage (Eds.). USENIX Association, 327‚Äì343.
[3] Nicolas Aragon, Paulo Barreto, Slim Bettaieb, Loic Bidoux, Olivier Blazy, Jean-
Christophe Deneuville, Phillipe Gaborit, Shay Gueron, Tim Guneysu, Carlos
Aguilar Melchor, Rafael Misoczki, Edoardo Persichetti, Nicolas Sendrier, Jean-
Pierre Tillich, Gilles Z√©mor, and Valentin Vasseur. 2019. BIKE. Technical
Report. National Institute of Standards and Technology. available at https:
//csrc.nist.gov/projects/post-quantum-cryptography/round-2-submissions.
[4] Mihir Bellare. 2006. New Proofs for NMAC and HMAC: Security without
Collision-Resistance. In CRYPTO 2006 (LNCS, Vol. 4117), Cynthia Dwork (Ed.).
Springer, Heidelberg, 602‚Äì619. https://doi.org/10.1007/11818175_36
[5] Mihir Bellare, Ran Canetti, and Hugo Krawczyk. 1998. A Modular Approach
to the Design and Analysis of Authentication and Key Exchange Protocols
(Extended Abstract). In 30th ACM STOC. ACM Press, 419‚Äì428. https://doi.org/
10.1145/276698.276854
[6] Mihir Bellare and Phillip Rogaway. 1994. Entity Authentication and Key Dis-
tribution. In CRYPTO‚Äô93 (LNCS, Vol. 773), Douglas R. Stinson (Ed.). Springer,
Heidelberg, 232‚Äì249. https://doi.org/10.1007/3-540-48329-2_21
[7] Mihir Bellare and Phillip Rogaway. 2006. The Security of Triple Encryption
and a Framework for Code-Based Game-Playing Proofs. In EUROCRYPT 2006
(LNCS, Vol. 4004), Serge Vaudenay (Ed.). Springer, Heidelberg, 409‚Äì426. https:
//doi.org/10.1007/11761679_25
[8] Naomi Benger, Joop van de Pol, Nigel P. Smart, and Yuval Yarom. 2014. ‚ÄúOoh
Aah... Just a Little Bit‚Äù: A Small Amount of Side Channel Can Go a Long Way. In
CHES 2014 (LNCS, Vol. 8731), Lejla Batina and Matthew Robshaw (Eds.). Springer,
Heidelberg, 75‚Äì92. https://doi.org/10.1007/978-3-662-44709-3_5
[9] Daniel J. Bernstein. 2006. Curve25519: New Diffie-Hellman Speed Records. In
PKC 2006 (LNCS, Vol. 3958), Moti Yung, Yevgeniy Dodis, Aggelos Kiayias, and Tal
Malkin (Eds.). Springer, Heidelberg, 207‚Äì228. https://doi.org/10.1007/11745853_
14
[10] Daniel J. Bernstein. 2019. Re: [pqc-forum] new quantum cryptanalysis of CSIDH.
Posting to the NIST pqc-forum mailing list. https://groups.google.com/a/list.
nist.gov/forum/#!original/pqc-forum/svm1kDy6c54/0gFOLitbAgAJ.
[11] Daniel J. Bernstein, Tanja Lange, Chloe Martindale, and Lorenz Panny. 2019.
Quantum Circuits for the CSIDH: Optimizing Quantum Evaluation of Isogenies.
In EUROCRYPT 2019, Part II (LNCS, Vol. 11477), Yuval Ishai and Vincent Rijmen
(Eds.). Springer, Heidelberg, 409‚Äì441. https://doi.org/10.1007/978-3-030-17656-
3_15
[12] Karthikeyan Bhargavan, Christina Brzuska, C√©dric Fournet, Matthew Green,
Markulf Kohlweiss, and Santiago Zanella-B√©guelin. 2016. Downgrade Resilience
in Key-Exchange Protocols. In 2016 IEEE Symposium on Security and Privacy.
IEEE Computer Society Press, 506‚Äì525. https://doi.org/10.1109/SP.2016.37
[13] Jean-Fran√ßois Biasse, Annamaria Iezzi, and Michael J. Jacobson Jr. 2018. A
Note on the Security of CSIDH. In INDOCRYPT 2018 (LNCS, Vol. 11356), Debrup
Chakraborty and Tetsu Iwata (Eds.). Springer, Heidelberg, 153‚Äì168. https:
//doi.org/10.1007/978-3-030-05378-9_9
ctz/rustls (accessed 2020-04-23).
[17] Joseph Birr-Pixton. 2019. TLS performance: rustls versus OpenSSL. https://jbp.
[18] Ethan Blanton, Vern Paxson, and Mark Allman. 2009. TCP Congestion Control.
io/2019/07/01/rustls-vs-openssl-performance.html
RFC 5681. https://doi.org/10.17487/RFC5681
[14] Eric W. Biederman and Nicolas Dichtel. 2013. https://man7.org/linux/man-
pages/man8/ip-netns.8.html man ip netns.
[15] Nina Bindel, Jacqueline Brendel, Marc Fischlin, Brian Goncalves, and Douglas
Stebila. 2019. Hybrid Key Encapsulation Mechanisms and Authenticated Key Ex-
change. In Post-Quantum Cryptography - 10th International Conference, PQCrypto
2019, Jintai Ding and Rainer Steinwandt (Eds.). Springer, Heidelberg, 206‚Äì226.
https://doi.org/10.1007/978-3-030-25510-7_12
[16] Joseph Birr-Pixton. [n.d.]. A modern TLS library in Rust. https://github.com/
[19] Xavier Bonnetain and Andr√© Schrottenloher. 2020. Quantum Security Analysis
of CSIDH. In Advances in Cryptology ‚Äì EUROCRYPT 2020 (LNCS, Vol. 12106),
Anne Canteaut and Yuval Ishai (Eds.). Springer, 493‚Äì522. https://eprint.iacr.org/
2018/537.
[20] Joppe Bos, L√©o Ducas, Eike Kiltz, Tancr√®de Lepoint, Vadim Lyubashevsky,
John M. Schanck, Peter Schwabe, and Damien Stehl√©. 2018. CRYSTALS ‚Äì Kyber:
a CCA-secure module-lattice-based KEM. In 2018 IEEE European Symposium
on Security and Privacy, EuroS&P 2018. IEEE, 353‚Äì367. https://cryptojedi.org/
papers/#kyber.
[21] Joppe W. Bos, Craig Costello, Michael Naehrig, and Douglas Stebila. 2015. Post-
Quantum Key Exchange for the TLS Protocol from the Ring Learning with
Errors Problem. In 2015 IEEE Symposium on Security and Privacy. IEEE Computer
Society Press, 553‚Äì570. https://doi.org/10.1109/SP.2015.40
[22] Colin Boyd, Yvonne Cliff, Juan Manuel Gonzalez Nieto, and Kenneth G. Paterson.
2009. One-round key exchange in the standard model. IJACT 1 (2009), 181‚Äì199.
Issue 3.
[23] Robert T. Braden. 1989. Requirements for Internet Hosts - Communication
Layers. RFC 1122. https://doi.org/10.17487/RFC1122
[24] Billy Bob Brumley and Nicola Tuveri. 2011. Remote Timing Attacks Are Still
Practical. In ESORICS 2011 (LNCS, Vol. 6879), Vijay Atluri and Claudia D√≠az (Eds.).
Springer, Heidelberg, 355‚Äì371. https://doi.org/10.1007/978-3-642-23822-2_20
[25] Christina Brzuska. 2013. On the foundations of key exchange. Ph.D. Dissertation.