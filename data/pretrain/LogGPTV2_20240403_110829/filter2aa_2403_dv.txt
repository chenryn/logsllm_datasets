第 47 章  字符串剪切 
493 
47.8  MIPS 
指令清单 47.8  (IDA)GCC 4.4.5 优化 
str_trim: 
; IDA is not aware of local variable names, we gave them manually: 
saved_GP            = -0x10 
saved_S0              = -8 
saved_RA              = -4 
lui      $gp, (__gnu_local_gp >> 16) 
addiu    $sp, -0x20 
la       $gp, (__gnu_local_gp & 0xFFFF) 
sw       $ra, 0x20+saved_RA($sp) 
sw       $s0, 0x20+saved_S0($sp) 
sw       $gp, 0x20+saved_GP($sp) 
; call strlen(). input string address is still in $a0, strlen() will take it from there: 
lw       $t9, (strlen & 0xFFFF)($gp) 
or       $at, $zero ; load delay slot, NOP 
jalr     $t9 
; input string address is still in $a0, put it to $s0: 
move     $s0, $a0 ; branch delay slot 
; result of strlen() (i.e, length of string) is in $v0 now 
; jump to exit if $v0==0 (i.e., if length of string is 0): 
beqz     $v0, exit 
or        $at, $zero ; branch delay slot, NOP 
addiu    $a1, $v0, -1 
; $a1 = $v0-1 = str_len-1 
addu     $a1, $s0, $a1 
; $a1 = input string address + $a1 = s+strlen-1 
; load byte at address $a1: 
lb        $a0, 0($a1) 
or        $at, $zero ; load delay slot, NOP 
; loaded byte is zero? jump to exit if its so': 
beqz     $a0, exit 
or        $at, $zero ; branch delay slot, NOP 
addiu    $v1, $v0, -2 
; $v1 = str_len-2 
addu     $v1, $s0, $v1 
; $v1 = $s0+$v1 = s+str_len-2 
li        $a2, 0xD 
; skip loop body: 
b  
    loc_6C 
li      $a3, 0xA ; branch delay slot 
loc_5C: 
; load next byte from memory to $a0: 
lb       $a0, 0($v1) 
move     $a1, $v1 
; $a1=s+str_len-2 
; jump to exit if loaded byte is zero: 
beqz     $a0, exit 
; decrement str_len: 
addiu     $v1, -1   
; branch delay slot 
loc_6C: 
; at this moment, $a0=loaded byte, $a2=0xD (CR symbol) and $a3=0xA (LF symbol) 
; loaded byte is CR? jump to loc_7C then: 
beq     $a0, $a2, loc_7C 
addiu     $v0, -1  
; branch delay slot 
; loaded byte is LF? jump to exit if its not LF': 
bne     $a0, $a3, exit 
or 
    $at, $zero  ; branch delay slot, NOP 
loc_7C: 
; loaded byte is CR at this moment 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
494 
逆向工程权威指南（下册） 
; jump to loc_5c (loop body begin) if str_len (in $v0) is not zero: 
bnez     $v0, loc_5C 
; simultaneously, store zero at that place in memory: 
sb 
    $zero, 0($a1) ; branch delay slot 
; "exit" label was named by me manually: 
exit: 
lw      $ra, 0x20+saved_RA($sp) 
move     $v0, $s0 
lw 
    $s0, 0x20+saved_S0($sp) 
jr 
    $ra 
addiu     $sp, 0x20      ; branch delay slot 
S-字头的寄存器就是保存寄存器（saved temporaries）。在过程调用过程中，保存寄存器的值需要保留
（被调用方函数保存和恢复），因此$S0 的值保存在局部栈里，在完成任务后恢复其初始状态。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 4488 章
章    ttoouuppppeerr(())函
函数
数  
本章讨论的是将小写字符转换成大写字符的 toupper()函数。这是一个比较常见的函数。 
char toupper (char c) 
{ 
          if(c>='a' && c25) 
          return c; 
else 
          return c-32; 
这里的变量 tmp 应当是一个有符号数。这里的转换过程采用了两个减法指令以及一个比较指令。而原
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 48 章  toupper()函数 
497 
来的算法是通过两个比较指令加一个减法指令来实现的。 
优化的 GCC 算法更好，它不用跳转指令 JUMP，转而采用 CMOVcc 指令（参见 33.1 节）。 
指令清单 48.4  x64 下的 GCC 4.9 优化程序 
1  toupper: 
2   
lea      edx, [rdi-97] ; 0x61 
3   
lea      eax, [rdi-32] ; 0x20 
4   
cmp      dl, 25 
5   
cmova    eax, edi 
6   
ret 
第三行的指令代码首先准备了要减去的数值 0x20（十六进制的 20，十进制的 32），这会给人一种印象，
好像减法总会发生似的。而第五行的指令，在不应进行转换（也就是不执行减法）的时候，把原始的输入数
据复制给 EAX 寄存器。可见它能在条件不成立的情况下舍弃错误的值。也就是说，编译器为了避免使用条
件转移指令而预先进行了减法运算。 
48.2  ARM 
ARM 模式下的 Keil 优化也只有一个比较指令。 
指令清单 48.5  ARM 模式下的 Keil 6/2013 优化程序 
toupper PROC 
          SUB  
r1,r0,#0x61 
          CMP  
r1,#0x19 
          SUBLS  r0,r0,#0x20 
          ANDLS  r0,r0,#0xff 
          BX   
lr 
          ENDP 
从这里的程序我们可以看到，如果 R1 的值小于或等于 0x19（十六进制的 19），那么就会执行 SUBLS
指令和 ANDLS 指令。这两条指令实际执行的是转换大写字符的操作。 
而 Thumb 模式下的 Keil 优化也可以通过单条比较指令进行大写转换。 
指令清单 48.6  Thumb 模式下的 Keil 6/2013 的优化指令 
toupper PROC 
          MOVS  
r1,r0 
          SUBS  
r1,r1,#0x61 
          CMP  
r1,#0x19 
          BHI  
|L0.14| 
          SUBS  
r0,r0,#0x20 
          LSLS  
r0,r0,#24 
          LSRS  
r0,r0,#24 
|L0.14| 
          BX   
lr 
          ENDP 
最后的两条指令（LSLS 和 LSRS）的整体作用其实就是“AND reg,0xFF”。用 C/C++表达式书写的话，
它就可以表示为“(i>24”，也 就是先左移动 24 位，然后右移 24 位。显然，Thumbe 模式下的 Keil
认为，它们这里的 2 个双字节的指令比“AND reg,0xFF”的运行效率更高（后者要首先将 0xFF 载入寄存
器，然后做 And 与操作）。 
48.2.1  ARM64 下的 GCC 
指令清单 48.7  ARM64 下的非优化 GCC 4.9 
toupper: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
498 
逆向工程权威指南（下册） 
          sub  
sp, sp, #16 
          strb  
w0, [sp,15] 
          ldrb  
w0, [sp,15] 
          cmp  
w0, 96 
          bls  
.L2 
          ldrb  
w0, [sp,15] 
          cmp  
w0, 122 
          bhi  
.L2 
          ldrb  
w0, [sp,15] 
          sub  
w0, w0, #32 
          uxtb  
w0, w0 
          b   
.L3 
.L2: 
          ldrb  
w0, [sp,15] 
.L3: 
          add  
sp, sp, 16 
          ret 
指令清单 48.8  ARM64 下的优化 GCC 4.9 
toupper: 
          uxtb  
w0, w0 
          sub  
w1, w0, #97 
          uxtb  
w1, w1 
          cmp  
w1, 25 