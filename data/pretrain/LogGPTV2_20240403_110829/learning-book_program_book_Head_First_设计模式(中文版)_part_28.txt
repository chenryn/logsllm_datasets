### 代码示例

```java
remoteControl.onButtonWasPushed(3);
remoteControl.offButtonWasPushed(3);
```

### 测试遥控器

现在，逐步按下每个插槽的开与关按钮。接下来，观察遥控器的测试结果。

#### 遥控器输出
```plaintext
File Edit Window Help Commands GetThingsDone
java RemoteLoader
Remote Control
Command
headfirst.command.remote.LightOffCommand
[slot1] headfirst.command.remote.LightOnCommand
[slot2] headfirst.command.remote.CeilingFanOnCommand
[slot3] headfirst.command.remote.CeilingFanOffCommand
[slot4] headfirst.command.remote.StereoOnWithCDCommand
[slot5] headfirst.command.remote.NoCommand
[slot6] headfirst.command.remote.NoCommand
Living Room light is on
Kitchen light is on
Living Room light is off
Kitchen light is off
Living Room ceiling fan is on high
Living Room ceiling fan is off
Living Room stereo is on
Living Room stereo is set for CD input, volume set to 11
Living Room stereo is off
```

### 插槽初始化
你可能注意到，插槽4到插槽6被设置为`NoCommand`。这是为了确保每个插槽都有一个命令对象，即使它实际上不执行任何操作。这样可以避免在每次调用时检查插槽是否为空。

```java
public class NoCommand implements Command {
    public void execute() {}
}

// 在构造函数中初始化所有插槽
Command noCommand = new NoCommand();
for (int i = 0; i < 7; i++) {
    onCommands[i] = noCommand;
    offCommands[i] = noCommand;
}
```

### 空对象模式
`NoCommand`是一个空对象的例子。使用空对象可以在不需要返回有意义的对象时提供一个默认实现。这使得客户端代码不必处理`null`值，从而简化了逻辑。

### 命令模式设计文档

#### 概述
我们为巴斯特家电自动化公司设计了一款遥控器API。主要目标是使遥控器代码尽可能简单，以便于未来添加新的厂商类时无需修改现有代码。为此，我们采用了命令模式，将遥控器类和厂商类解耦。

#### 类图
- `RemoteControl`管理一组命令对象，每个按钮对应一个命令对象。
- `Command`接口定义了所有命令对象必须实现的方法，包括`execute()`和`undo()`。
- `RemoteLoader`创建并加载命令对象到遥控器的插槽中。
- 厂商类（如`Light`）控制具体的家电设备。

#### 示例代码
```java
public interface Command {
    void execute();
    void undo();
}

public class LightOnCommand implements Command {
    private Light light;

    public LightOnCommand(Light light) {
        this.light = light;
    }

    public void execute() {
        light.on();
    }

    public void undo() {
        light.off();
    }
}

public class LightOffCommand implements Command {
    private Light light;

    public LightOffCommand(Light light) {
        this.light = light;
    }

    public void execute() {
        light.off();
    }

    public void undo() {
        light.on();
    }
}

public class RemoteControlWithUndo {
    private Command[] onCommands;
    private Command[] offCommands;
    private Command undoCommand;

    public RemoteControlWithUndo() {
        onCommands = new Command[7];
        offCommands = new Command[7];
        Command noCommand = new NoCommand();

        for (int i = 0; i < 7; i++) {
            onCommands[i] = noCommand;
            offCommands[i] = noCommand;
        }
        undoCommand = noCommand;
    }

    public void setCommand(int slot, Command onCommand, Command offCommand) {
        onCommands[slot] = onCommand;
        offCommands[slot] = offCommand;
    }

    public void onButtonWasPushed(int slot) {
        onCommands[slot].execute();
        undoCommand = onCommands[slot];
    }

    public void offButtonWasPushed(int slot) {
        offCommands[slot].execute();
        undoCommand = offCommands[slot];
    }

    public void undoButtonWasPushed() {
        undoCommand.undo();
    }

    @Override
    public String toString() {
        // 这里是toString代码...
    }
}

public class RemoteLoader {
    public static void main(String[] args) {
        RemoteControlWithUndo remoteControl = new RemoteControlWithUndo();
        Light livingRoomLight = new Light("Living Room");
        LightOnCommand livingRoomLightOn = new LightOnCommand(livingRoomLight);
        LightOffCommand livingRoomLightOff = new LightOffCommand(livingRoomLight);

        remoteControl.setCommand(0, livingRoomLightOn, livingRoomLightOff);
        remoteControl.onButtonWasPushed(0);
        remoteControl.offButtonWasPushed(0);
        System.out.println(remoteControl);
        remoteControl.undoButtonWasPushed();
        remoteControl.offButtonWasPushed(0);
        remoteControl.onButtonWasPushed(0);
        System.out.println(remoteControl);
        remoteControl.undoButtonWasPushed();
    }
}
```

### 撤销功能
撤销功能通过记录上一次执行的命令并在撤销时调用其`undo()`方法来实现。例如，当电灯打开后，按下撤销按钮会关闭电灯。

### 总结
通过使用命令模式，我们可以灵活地扩展遥控器的功能，并且通过空对象模式简化了代码逻辑。撤销功能进一步增强了用户体验，使其更加直观和易用。