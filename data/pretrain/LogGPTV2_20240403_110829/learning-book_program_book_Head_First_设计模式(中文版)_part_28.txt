remoteControl.onButtonWasPushed (3) ;
remoteControl.offButtonWasPushed (3) ;
好了，一切准条就结：现在
遂步按下每个插楼的开与美按
租。
现在，看系遥控器的测试结果….…
File Edit Window Help Com
andsGetThingsDone
java RemoteLoader
Remote Control
mand
headfirst.co
mmand.remote.LightOffCommand
and.re
note.LightoffCor
and
[slot1]
headfirst.comm
mand.remote.LightOnCom
mand
headfirst.cot
[slot2]
headfirst.command.remote.CeilingFanOnCommand
headfirst.command.remote.CeilingFanOffCor
[slot3]
headfirst.co
mand.rer
mote.StereoOnWithcDCom
[slot4]
headfirst.c
and.re
mote.NoCo
and
headfirst.command.remote.NoCommand
[slot5]
headfirst.co
nand.re
mote.NoCommand
headfirst.co
nd.re
mote.NoCommand
mand
[slot 6]headfirst.co
and.re
note.NoCommand
eadfirst.co
and.rer
Living Room light is on
Kitchen light is on
Living Room light is off
开启插槽关闭插槽
Kitchen light is off
Living Room ceiling fan is on high
命今的执行结果！记住，每个装置的给出都是
Living Room ceiling fan is off
Living Room stereo is on
由厂商类所提供的。比方说，当一个电灯对
Living Room
stereo is set for CD input
volume set to11
象被打开它金打印出“LivingRoomlightis
Living Room
o
Living Room stereo is off
OR
你现在的位置
213
---
## Page 250
空对象
等一下，插槽4到插槽6写
筹“NoCommand”，这是怎么
回事？想要弄我吗？
被你发现了。我们的确省略了一些东西。在遥控器中，我们
不想每次都检查是否某个插槽都加载了命令。比方说，在这个
onButtonWasPushedO方法中，我们可能需要这样的代码：
public void onButtonWasPushed(int slot)(
if(onCommands[slot]!=null)
onCommands[slot].execute();
所以，我们要如何避免上述的做法？实现一个不做事情的命令！
public class NoCommand implements Command (
public void execute() ()
这么一来，在RemoteControl构造器中，我们将每个插槽都预先指定成
NoCommand对象，以便确定每个插槽永远都有命令对象。
Command noCommand = new NoCommand ();
for(int i=0;i< 7;i++){
onCommands[i] = noCommand;
offCommands[i] = noCommand;
所以在测试的输出中，没有被明确指定命令的插槽，其命令将是默
认的NoCommand对象。
NoCommand对象是一个空对象（nullobject）的例子。当你不想返回一个有意义的对象
模
时，空对象就很有用。客户也可以将处理null的责任转移给空对象。举例来说，遥控器不
式
可能一出厂就设置了有意义的命令对象，所以提供了NoCommand对象作为代用品，当调
荣
用它的execute0方法时，这种对象什么事情都不做。
誉
奖
在许多设计模式中，都会看到空对象的使用。甚至有些时候，空对象本身也被视为是一
种设计模式。
214
第6章
---
## Page 251
命令模式
写文档的时刻到了···..
为巴斯特家电自动化公司设计的遥控器API。
我们很高兴为您呈献下列的家电自动化遥控器设计与应用编程接口。主要的设计目标是让遥控器代码尽可
能地简单，这样一来，新的厂商类一且出现，遥控器并不需要随之修改。因此，我们采用了命令模式，从
逻辑上将遥控器的类和厂商的类解耦。我们相信这将降低遥控器的生产成本，并大大地减少未来维护时所
需的费用。
下面的类图提供了设计的全貌：
RemoteControl管理一组命令对
象，每个按钮都有一个命令对
所有的遥控器命令都实现这个
象。每当按下按钮，就调用相应的
Command接口，此接口中包含
RemoteLoader创建许多命
xxButtonWasPushed(方法，间接造
了一个方法，也就是execute()，
令对象，然后将其加载到
成该命令的executeO方法被调用。
命令封装了某个特定厂商类的
遥控器的插槽中。每个命
一组动作，遥控器可以通过调
令对象都封装了某个家电
用execute（）方法，执行这些动
自动化装置的一项请求。
作。
RemoteControl
ands
mands
cute)
nd0
WasPushed)
WasPushedg
Light.
LightOnCon
of)
on()
LightOfICor
Oeero
ublic
light.on():
void
oublic void ext
light.off()
ute()
这些厂商类被用来控制特定的家
利用Command接口，每个动作都被实现成一个
电自动化装置。在这里，我们用
简单的命令对象。命令对象持有对一个厂商类
Light类当做例子。
的实例的引用，并实现了一个executeO方法。这
个方法会调用厂商类实例的一个或多个方法，
完成特定的行为。在这个例子中，有两个类，
分别打开电灯与关闭电灯。
你现在的位置
215
---
## Page 252
别忘了撤销
做得好！看来似乎已经
完成了一个了不起的设计，但
是，是不是忘了原客要求的某些
小东西？比方说撤销按钮！！！
哎呀！差点就忘了还好，因为我们采用基
本命令类，所以可以很容易地加上撤销的功能。
让我们逐步为遥控器加上撤销命令
我们要做什么？
好了，我们现在需要在遥控器上加上撤销的功能。这个功能使用起来就像是这样的：比
方说客厅的电灯是关闭的，然后你按下遥控器上的开启按钮，自然电灯就被打开了。现
在如果按下撤销按钮，那么上一个动作将被倒转，在这个例子里，电灯将被关闭。在进入
更复杂的例子之前，先让撤销按钮能够处理电灯：
1
当命令支持撤销时，该命令就必须提供和execute(方法相反的undo()方法。不
管execute（）刚才做什么，undo（）都会倒转过来。这么一来，在各个命令中加人
undoO之前，我们必须先在Command接口中加入undoO方法：
public interface Command {
public void execute ();
public void undo () ;
这是新加入的undo(）方法。
这实在是够简单。
现在让我们深入电灯的命令，并实现undo0方法。
PDG
216
第6章
---
## Page 253
命令模式
2
我们从LightOnCommand开始下手：如果LightOnCommand的execute（方法被调
用，那么最后被调用的是on（方法。我们知道undo（需要调用off(（方法进行相反的
动作。
public class LightOnCommand implements Command {
Light 1ight;
public LightOnCommand (Light 1ight)(
this.light = 1ight;
public void execute(){
light.on () ;
）
public void undo(){
light.off () ;
execute打丹电灯
所以undo(）该做的事情
就是关闭电灯。
太容易了！现在来处理LightOffCommand，在这里，undoO方法需要调用电
灯的onO方法。
public class LightoffCommand implements Command{
Light light;
public LightOffCommand(Light 1ight){
this.light = 1ight;
）
public void execute(）{
light.off () ;
public void undo(){
light.on () ;
在这里，undo(）把
电灯打开：
实在是简单到不行！事情可还没完，我们还要花一些力气，让遥控器能
够追踪最后被按下的按钮是什么。
你现在的位置
217
---
## Page 254
实现撤销
3
要加上对撤销按钮的支持，我们必须对遥控器类做一些小修改。我们打算这么做：加人一
个新的实例变量，用来追踪最后被调用的命令，然后，不管何时撤销按钮被按下，我们都
可以取出这个命令并调用它的undo0方法。
public class RemoteControlWithUndo {
Command[] onCommands;
Command[] offCommands;
前一个命今将被记录在这里。
Command undoCommand;
public RemoteControlWithUndo()(
onCommands = new Command[7];
offCommands = new Command[7];
Command noCommand = new NoCommand ();
for(int i=0;i<7;i++){
一开始，并没有所请的“前
onCommands [i] = noCommand;
一个命今”，所以将它设置
offCommands[i] = noCommand;
成NoCommand的对象。
undoCommand*noCommand;
public void setCommand(int slot, Command onCommand, Command offCommand) {
onCommands[slot] - onCommand;
offCommands[slot]= offCommand;
当按下按铝，我们取得这个命今，
public void onButtonWasPushed(int slot) {
onCommands [slot].execute ();
并优先执行它，然后将它记录在
undoCommand =onCommands[slot];
undoCommand实例变量中。不管
是“开”或“关”命今，我们的
public void offButtonWasPushed(int slot)(
处理方法都是一样的。
offCommands[slot].execute() ;
undoCommand=offCommands[slot];
当按下教销按钮，我们调
public void undoButtonWasPushed（)(
用undoCommaxd实例变量的
undoCommand.undo();
undo（）方法，就可以倒转前
个命今。
public String toString()(
//这里是toString代码....
218
第6章
---
## Page 255
命令模式
好了！让我们修改测试程序，测试撤销按钮。
public class RemoteLoader {
public static void main(String[] args) {
RemoteControlWithUndo remoteControl = new RemoteControlWithUndo() ;
LightOnCommand 1ivingRoomLightOn =
sndo（）功能的命今。
new LightOnCommand (livingRoomLight) ;
LightOffCommand 1ivingRoomLightOff =
new LightOffCommand (livingRoomLight) ;
remoteControl.setCommand (0, 1ivingRoomLightOn, 1ivingRoomLightOff) ;
将电灯命今设置到遥
remoteControl.onButtonWasPushed(0);
remoteControl.offButtonWasPushed(0);
控器的0号插槽。
System.out.println(remoteControl);
remoteControl.undoButtonWasPushed();
打丹电灯，关闭电灯，然
remoteControl.offButtonWasPushed(0)
后撤销。
remoteControl.onButtonWasPushed(0);
System.out.println(remoteControl);
remoteControl.undoButtonWasPushed();
关闭电灯，打开电灯.然后撒销。
结果如下：
Light is off
打开电灯，美用电灯。
这是电订的命合
Islot
1
.Lighton
[slot
1]
headfirst.c
nand.undo.NoCommand
nd
slot
headfirat.
eaianrst.c
slot
41
sand.undo.No
slot
and.undo.Noc
nd.ur
slot
6
nd.undo.LightoffCom
adfirst,c
sand.undo.NeCo
按下版销搭.ightOtCommand的
规在ndo变量记最的是
Ligntlson
ndo会进成电订被打开
CighrOisCommand
Light is on
关用电灯再打开电订
[slot0]he
slot
eadnirst
irSL.CO
alot
21
headiret.c
slot
neadtirat.c
nand.undo.Nc
beadtirst.c
headrirst.co
61headirst.
undo] headfirst.comand.undo.LightonC
现任und定量记录的是
Light is off
按下搬销检钮，造成电灯被关用
LishtOnCom
你现在的位置
219
---
## Page 256
需要记录一些状态以便撤销
使用状态实现撤销
好了，实现电灯的撤销是有意义的，但也实在是太容易了。通常，想要实现撤销
CeilingFan
的功能，需要记录一些状态。让我们试一个更有趣的例子，比方说厂商类中的天
high)
medium[)
花板上的吊扇。吊扇允许有多种转动速度，当然也允许被关闭。
low[