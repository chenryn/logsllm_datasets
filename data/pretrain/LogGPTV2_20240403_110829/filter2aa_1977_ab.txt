您可能认为，使 param1 等于任何HTML标记都会导致相同的⾏行行为，但它不不会：使 param1 等于  、  或  将
使 Content-Type 以plain/text形式发送，⽽而不不是以预期的text/html形式发送。
现在，让我们使 param1 等于
根据whatwg-spec，内容类型http-response-header将以⽂文本/html形式发送，将呈现param1值，并…这⾥里里是XSS跨站点脚本。
在与⾕谷歌讨论了了这⼀一情况后，他们告诉我们：
它实际上⾮非常⽅方便便，旨在能够打印HTML并⾃自动设置内容类型。我们希望程序员将使⽤用HTML/模板进⾏行行适当的转义。
bloodzer0&Lingfighting
⾕谷歌声明开发⼈人员负责清理理和保护他们的代码。我们完全同意，但是在安全性是优先考虑的语⾔言中，除了了默认的text/plain之外，允许⾃自动设
置 Content-Type 并不不是最好的⽅方式。
让我们澄清⼀一下： text/plain 和/或 text/template 包不不会让您远离XSS，因为它不不会清理理⽤用户输⼊入。
package main
import "net/http"
import "text/template"
func handler(w http.ResponseWriter, r *http.Request) {
        param1 := r.URL.Query().Get("param1")
        tmpl := template.New("hello")
        tmpl, _ = tmpl.Parse(`{{define "T"}}{{.}}{{end}}`)
        tmpl.ExecuteTemplate(w, "T", param1)
}
func main() {
        http.HandleFunc("/", handler)
        http.ListenAndServe(":8080", nil)
}
使 param1 等于  将导致内容类型作为text/html发送，这使您容易易受到XSS的攻击。
将text/template包替换为html/template包，您就可以安全地继续了了。
bloodzer0&Lingfighting
package main
import "net/http"
import "html/template"
func handler(w http.ResponseWriter, r *http.Request) {
        param1 := r.URL.Query().Get("param1")
        tmpl := template.New("hello")
        tmpl, _ = tmpl.Parse(`{{define "T"}}{{.}}{{end}}`)
        tmpl.ExecuteTemplate(w, "T", param1)
}
func main() {
        http.HandleFunc("/", handler)
        http.ListenAndServe(":8080", nil)
}
当param1等于  时，不不仅 Content-Type HTTP响应头将以text/plain格式发送。
但是， param1也 被正确编码到输出媒体：浏览器器。
bloodzer0&Lingfighting
由于缺乏正确的输出编码，另⼀一个常⻅见的注⼊入是SQL注⼊入，这主要是由于⼀一个旧的错误做法：字符串串串串联。
简⽽而⾔言之：只要将包含任意字符（例例如对数据库管理理系统有特殊意义的字符）的值的变量量简单地添加到（部分）SQL查询中，就容易易受到SQL注⼊入的
攻击。
假设您有如下查询：
ctx := context.Background()
customerId := r.URL.Query().Get("id")
query := "SELECT number, expireDate, cvv FROM creditcards WHERE customerId = " + customerId
row, _ := db.QueryContext(ctx, query)
你将毁了了它。
当提供有效的customerId时，您将只列列出该客户的信⽤用卡，但如果customerId变为1或1=1会怎么样？
您的查询将如下所示：
SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1 OR 1=1
您将转储所有表记录（是的，任何记录的1=1都是真的）！
只有⼀一种⽅方法可以保证数据库的安全：Prepared Statements。
ctx := context.Background()
customerId := r.URL.Query().Get("id")
query := "SELECT number, expireDate, cvv FROM creditcards WHERE customerId = ?"
stmt, _ := db.QueryContext(ctx, query, customerId)
注意到占位符了了?以及您的查询⽅方式：
SQL注⼊入
bloodzer0&Lingfighting
可读性强
较短
安全的
准备好的语句句中的占位符语法是特定于数据库的。例例如，⽐比较mysql、postgresql和oracle：
MySQL
PostgreSQL
Oracle
WHERE col = ?
WHERE col = $1
WHERE col = :col
VALUES(?, ?, ?)
VALUES($1, $2, $3)
VALUES(:val1, :val2, :val3)
检查本指南中的"数据库安全性"部分，以获取有关此主题的详细信息。
OWASP安全编码实践是⼀一个便便利利的⽂文档，可以帮助开发⼈人员验证在项⽬目实现期间是否遵循了了所有的最佳实践。身份验证和密码管理理是任何系统的关
键部分，从⽤用户注册到凭证存储、密码重置和个⼈人资源访问都有详细介绍。
为了了更更深⼊入的细节，可以对⼀一些指导原则进⾏行行分组。这⾥里里源代码示例例来说明。
让我们从经验规则开始："所有身份验证控制都必须在受信任的系统上强制执⾏行行"，通常是运⾏行行应⽤用程序后端的服务器器。
为了了系统的简单性和减少故障点，您应该使⽤用标准的和经过测试的认证服务：通常框架拥有这样的模块，并且有许多⼈人开发、维护和使⽤用它们，我们
⿎鼓励您使⽤用它们作为⼀一种集中的认证机制。不不过，您应该"仔细检查代码以确保它不不受任何恶意代码的影响"，并确保它遵循最佳实践。
身份验证的过程不不应该是资源⾃自身来执⾏行行它,相反，应该使⽤用"从集中式身份验证控件重定向"。⼩小⼼心处理理重定向：您应该只重定向到本地和/或安全资
源。
当认证需要"连接到涉及敏敏感信息或功能的外部系统"时，它不不仅应该由应⽤用程序的⽤用户使⽤用，⽽而且还应该由您⾃自⼰己的应⽤用程序使⽤用。在这种情况
下，"访问应⽤用程序外部服务的身份验证凭据应加密并存储在受信任系统（如服务器器）上的受保护位置。存储在代码中不不是安全的位置"。
在本节中，"通信"在更更⼴广泛的意义上使⽤用，包括⽤用户体验（UX）和CS通信。
不不仅"密码输⼊入应在⽤用户屏幕上隐藏"，⽽而且"记住我"功能应禁⽤用。
您可以使⽤用输⼊入字段type="password"并将autocomplete属性设置为off来完成这两项⼯工作。
身份验证凭据只能在HTTP POST请求上使⽤用加密连接（HTTPS）发送。加密连接的例例外可能是电⼦子邮件重置相关联的临时密码。
虽然通过tls/ssl（https）的HTTP GET请求看起来和HTTP POST请求⼀一样安全，但⼀一般情况下，HTTP服务器器（如apache2、nginx）会将请求的URL
写⼊入访问⽇日志。
xxx.xxx.xxx.xxx - - [27/Feb/2017:01:55:09 +0000] "GET /?username=user&password=70pS3cure/oassw0rd HTTP/1.1" 200 23
5 "-" "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0"
前端代码如下：
认证与密码管理理
认证与密码管理理
经验规则
身份验证数据通信
bloodzer0&Lingfighting
    Username 
    Password 
在处理理身份验证错误时，应⽤用程序不不应公开身份验证数据的哪⼀一部分不不正确。不不要使⽤用"⽆无效⽤用户名"或"⽆无效密码"，只需交替使⽤用"⽆无效⽤用户名和/或密
码"：
        Invalid username and/or password
    Username 
    Password 
对于⼀一般性信息，您不不披露露：
注册⼈人："⽆无效密码"表示⽤用户名存在。
系统的⼯工作⽅方式："⽆无效密码"可能会显示应⽤用程序的⼯工作⽅方式，⾸首先查询数据库中的⽤用户名，然后⽐比较内存中的密码。
验证和存储部分提供了了如何执⾏行行验证数据验证（和存储）的示例例。
成功登录后，应通知⽤用户上次成功或不不成功的访问⽇日期/时间，以便便⽤用户能够检测和报告可疑活动。有关⽇日志记录的更更多信息可以在⽂文档的错误处理理
和⽇日志记录中找到。此外，为了了防⽌止攻击，建议在检查密码时使⽤用恒定时间⽐比较功能，包括分析具有不不同输⼊入的多个请求之间的时间差。在这种情况
下，表单record==password⽐比较不不匹配的第⼀一个字符处将会返回false，提交的密码时间越近，响应时间越⻓长。通过利利⽤用这个漏漏洞洞，攻击者可以猜测
密码。请注意，即使记录不不存在，我们也总是强制执⾏行行带有空值的subtle.ConstantTimeCompare以便便与⽤用户输⼊入进⾏行行⽐比较。
本节的关键主题是身份验证数据存储，因为⽤用户帐户数据库经常在Internet上泄漏漏，这是不不可取的。当然，这并不不能保证发⽣生，但在这种情况下，如
果正确存储身份验证数据，特别是密码，就可以避免附带的损害。
⾸首先，让我们明确“所有认证控制都应该安全失败”。建议您阅读所有其他身份验证和密码管理理部分，因为它们包括有关报告错误身份验证数据和如何
处理理⽇日志记录的建议。
另⼀一个初步建议是：对于顺序认证的实现（像Google现在做的那样），验证应该只在所有数据输⼊入完成后，在可信系统（如服务器器）上进⾏行行。
验证与存储
验证
安全存储密码理理论
bloodzer0&Lingfighting
package main
import (
    "crypto/rand"
    "crypto/sha256"
    "database/sql"
    "context"
    "fmt"
)
const saltSize = 32
func main() {
    ctx := context.Background()
    email := []byte("PI:EMAIL")
    password := []byte("47;u5:B(95m72;Xq")
    // create random word
    salt := make([]byte, saltSize)
    _, err := rand.Read(salt)
    if err != nil {
        panic(err)
    }
    // let's create SHA256(password+salt)
    hash := sha256.New()
    hash.Write(password)
    hash.Write(salt)
    // this is here just for demo purposes
    //
    // fmt.Printf("email   : %s\n", string(email))
    // fmt.Printf("password: %s\n", string(password))
    // fmt.Printf("salt    : %x\n", salt)
    // fmt.Printf("hash    : %x\n", hash.Sum(nil))
    // you're supposed to have a database connection