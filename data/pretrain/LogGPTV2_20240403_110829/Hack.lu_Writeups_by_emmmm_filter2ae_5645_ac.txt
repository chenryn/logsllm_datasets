      File "/home/chall/pyaes/aes.py", line 134, in __init__
        raise ValueError('Invalid key size')
    ValueError: Invalid key size
So the ADD,XOR is for the key,and the key size is 16 bytes, you can check it
by XOR "10"+"00"*16 and xor "10", and no overflow with the key, I think it may
first XOR or ADD, then &"ff"*16. we can query the oracle byte by byte to get
the key, for example if
base64(aes_ecb(byteA^key))==base64(aes_ecb(byteA+key)), we can get the one
byte key at that position.But this is the single function, we might get more
than one key. Just limit the key range and decrypt the cipher offline.  
script to get the last 15 byte possible key and ciphertext.
    from pwn import *
    from base64 import b64decode,b64encode
    import sys
    #context.log_level = "debug"
    io = remote("arcade.fluxfingers.net",1821)
    def server(commmand,number):
        io.recvuntil("-----------------------------*\n")
        io.sendline(commmand)
        io.recvuntil("Please choose the operand in hex >>> ")
        io.sendline(number)
        data = io.recvuntil("------------------------------\n")
        return data.split("Ciphertext is  ")[1].split("\n")[0]
    def xor_add(xor_key,add_key):
        byte = []
        for i in range(0,256):
            for loop in range(0,len(xor_key)):
                if i^xor_key[loop] != i + add_key[loop]:
                    break
                if loop ==len(xor_key)-1:
                    byte.append(chr(i))
        print repr(byte)
        return byte
    key = []
    io.recvuntil("-----------------------------*\n")
    io.sendline("XOR")
    io.recvuntil("Please choose the operand in hex >>> ")
    io.sendline("00")
    data = io.recvuntil("------------------------------\n")
    print data
    for loop in range(0,15):
        flag = False
        xor_aes_result=[]
        add_aes_result=[]
        xor_key=[]
        add_key=[]
        for i in range(1,256):
            xor_aes_result.append(server("XOR",hex(i)+loop*"00"))
        for j in range(1,256):
            data = server("ADD",hex(j)+loop*"00")
            if data in xor_aes_result:
                xor_key.append(xor_aes_result.index(data)+1)
                add_key.append(j)
                flag = True
        # print xor_key,add_key
        if flag:
            key.append(xor_add(xor_key,add_key))
        else:
            key.append(["\xff"])
        print key
brute force offline
    from base64 import b64decode
    c = b64decode("56mMyXpFGdMr48rfyehvxjsuRogij8qydacuhGgDlUepmmnsPnh9hSpfHq9nh/0BSWOkCCt95nQ7JxUmX/0JCg==")
    key = [['M'], ['M'], ['Y'], ['\x04', '\x14', '$', '4', 'D', 'T', 'd', 't', '\x84', '\x94', '\xa4', '\xb4', '\xc4', '\xd4', '\xe4', '\xf4'], ['g'], ['@'], ['\n', '*', 'J', 'j', '\x8a', '\xaa', '\xca', '\xea'], ['C'], ['\x05', 'E', '\x85', '\xc5'], ['\x1d'], ['$', '\xa4'], [':'], ['(', '\xa8'], ['\x06'],['\x1d', '\x9d'],['\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07', '\x08', '\t', '\n', '\x0b', '\x0c', '\r', '\x0e', '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!', '"', '#', '$', '%', '&', "'",
     '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\x7f', '\x80', '\x81', '\x82', '\x83', '\x84', '\x85', '\x86', '\x87', '\x88', '\x89', '\x8a', '\x8b', '\x8c', '\x8d', '\x8e', '\x8f', '\x90', '\x91', '\x92', '\x93', '\x94', '\x95', '\x96', '\x97', '\x98', '\x99', '\x9a', '\x9b', '\x9c', '\x9d', '\x9e', '\x9f', '\xa0', '\xa1', '\xa2', '\xa3', '\xa4', '\xa5', '\xa6', '\xa7', '\xa8', '\xa9', '\xaa', '\xab', '\xac', '\xad', '\xae', '\xaf', '\xb0', '\xb1', '\xb2', '\xb3', '\xb4', '\xb5', '\xb6', '\xb7', '\xb8', '\xb9', '\xba', '\xbb', '\xbc', '\xbd', '\xbe', '\xbf', '\xc0', '\xc1', '\xc2', '\xc3', '\xc4', '\xc5', '\xc6', '\xc7', '\xc8', '\xc9', '\xca', '\xcb', '\xcc', '\xcd', '\xce', '\xcf', '\xd0', '\xd1', '\xd2', '\xd3', '\xd4', '\xd5', '\xd6', '\xd7', '\xd8', '\xd9', '\xda', '\xdb', '\xdc', '\xdd', '\xde', '\xdf', '\xe0', '\xe1', '\xe2', '\xe3', '\xe4', '\xe5', '\xe6', '\xe7', '\xe8', '\xe9', '\xea', '\xeb', '\xec', '\xed', '\xee', '\xef', '\xf0', '\xf1', '\xf2', '\xf3', '\xf4', '\xf5', '\xf6', '\xf7', '\xf8', '\xf9', '\xfa', '\xfb', '\xfc', '\xfd', '\xfe', '\xff']]
    for key0 in key[0]:
        for key1 in key[1]:
            for key2 in key[2]:
                for key3 in key[3]:
                    for key4 in key[4]:
                        for key5 in key[5]:
                            for key6 in key[6]:
                                for key7 in key[7]:
                                    for key8 in key[8]:
                                        for key9 in key[9]:
                                            for key10 in key[10]:
                                                for key11 in key[11]:
                                                    for key12 in key[12]:
                                                        for key13 in key[13]:
                                                            for key14 in key[14]:
                                                                for key15 in key[15]:
                                                                    k = key0+key1+key2+key3+key4+key5+key6+key7+key8+key9+key10+key11+key12+key13+key14+key15
                                                                    aes = pyaes.AESModeOfOperationECB(k[::-1])
                                                                    print k[::-1]
                                                                    m = aes.decrypt(c[:16])+aes.decrypt(c[16:32])+aes.decrypt(c[32:48])+aes.decrypt(c[48:64])
                                                                    if "flag" in m:
                                                                        print m
                                                                        exit(1)
    #flag  flag{r3l4t3d_k3y_der1iviNg_fuNct1on5_h4ve_to_be_a_l1mit3d_cla55}
### Multiplayer Part 1
    description
    Multiplayer Part 1 (Category: Crypto)
    Author(s): asante, kai Solves: 40
    Difficulty: medium
    Can you get the pole position of this elliptic racing curve contactless?
    nc arcade.fluxfingers.net 1822
    Download
three files named parameters.sage,server.sage and points.db.
> parameters.sage
    param = {   "hacklu":
                ((889774351128949770355298446172353873, 12345, 67890),
                # Generator of Subgroup of prime order 73 bits, 79182553273022138539034276599687 to be excact
                (238266381988261346751878607720968495, 591153005086204165523829267245014771),
                # challenge Q = xP, x random from [0, 79182553273022138539034276599687)
                (341454032985370081366658659122300896, 775807209463167910095539163959068826)
                )
            }
    serverAdress = '0.0.0.0'
    serverPort = 23426
    (p, a, b), (px, py), (qx, qy) = param["hacklu"]
    E = EllipticCurve(GF(p), [a, b])
    P = E((px, py))
    Q = E((qx, qy))
> server.sage
    import asyncore, socket, json, sqlite3, time
    FLAG1 = "flag{XXXXXXXXXXX}"
    POINT_TRESHOLD = 200
    def json_response(code, additional_parameter=""):
        response_codes = {
            0 : "Point added",
            1 : "Collision found",
            2 : "Point already included",
            3 : 'Wrong input format. Please provide a string like this: {"x": val, "y": val, "c": val, "d": val, "groupID": val})',
            4 : "Value mismatch! X != c*P + d*Q",
            5 : "Server Error"
        }
        return '{"Response": "%d", "Message": "%s"%s}' % (code, response_codes[code], additional_parameter)
    # Teams should choose a non-guessable groupID
    def get_response(x, y, c, d, groupID):
        # open connection to database
        conn = sqlite3.connect("points.db")
        conn.row_factory = sqlite3.Row
        conn_cursor = conn.cursor()
        # convert sage integers to string to avoid "Python int too large for SQLite INTEGER"
        x = str(x)
        y = str(y)
        c = str(c)
        d = str(d)
        # Select records that map to the same X value
        conn_cursor.execute("SELECT * FROM points WHERE x = :x", {"x": x})
        query = conn_cursor.fetchall()
        # No record found -> Point is not yet included
        if len(query) == 0:
            # Insert point into database
            conn_cursor.execute("INSERT INTO points (x, y, c, d, groupID) VALUES (?, ?, ?, ?, ?)",
                      (x, y, c, d, groupID))
            # Get number of points added by this group
            conn_cursor.execute("SELECT x FROM points WHERE groupID = :gID", {"gID": groupID})
            points_found = conn_cursor.fetchall()
            add_param = ', "points_found": %d' % len(points_found)
            # When they found POINT_TRESHOLD distinguished points and a collision occured, return the colliding values as well
            if len(points_found) > POINT_TRESHOLD:
                add_param += ', "flag1": "%s"' % FLAG1
                if server.collision_found:
                    # compute x from the collision, second flag is just x (not in flag format)
                    add_param += ', "collision": %s' % (server.collision)
            response = json_response(0, add_param)
        else:
            # One (or more) records found -> check if they have the same exponents
            is_included = False
            for row in query:
                if row["c"] == c and row["d"] == d:
                    is_included = True
                    response = json_response(2)
                    break
            if not is_included:
                # Exponents are different -> Collision found, add this point
                conn_cursor.execute("INSERT INTO points (x, y, c, d, groupID, collision) VALUES (?, ?, ?, ?, ?, 1)",
                          (x, y, c, d, groupID))
                # Get number of points added by this group
                conn_cursor.execute("SELECT x FROM points WHERE groupID = :gID", {"gID": groupID})
                points_found = conn_cursor.fetchall()
                add_param = ', "points_found": %d' % len(points_found)
                # add collision
                server.collision_found = True
                server.collision = '{"c_1": %s, "d_1": %s, "c_2": %s, "d_2": %s}' % (c, d, row["c"], row["d"])
                if len(points_found) > POINT_TRESHOLD:
                    add_param += ', "collision": %s' % (server.collision)
                else:
                    add_param += ', "collision": "collision found but not enough distinguished points submitted yet"'
                response = json_response(1, add_param + ', "c": %s, "d": %s' % (row["c"], row["d"]))
        # close db connection and return response
        conn.commit()
        conn_cursor.close()
        conn.close()
        return response
    class DLogHandler(asyncore.dispatcher_with_send):
        def handle_read(self):
            try:
                json_data = self.recv(8192)
                if not json_data:
                    return
                data = json.loads(json_data)
                print data
                # check if the format is correct
                if not ("x" in data and "y" in data and "c" in data and "d" in data and "groupID" in data):
                    response = json_response(3)
                else:
                    c = Integer(data["c"])
                    print c
                    d = Integer(data["d"])
                    x = Integer(data["x"])
                    y = Integer(data["y"])
                    print y
                    X = E((x, y))
                    print X
                    print data
                    print X
                    if X == c*P + d*Q:
                        print data
                        response = get_response(data["x"], data["y"], data["c"], data["d"], data["groupID"])
                    else:
                        print("expected %s = %d*%s + %d*%s, but got %s" % (c*P + d*Q, c, P, d, Q, X))
                        response = json_response(4)
                self.send(response)
            except Exception as e:
                response = json_response(5, ', "Error Message": "%s"' % e)
    class Server(asyncore.dispatcher_with_send):
        def __init__(self, host, port):
            asyncore.dispatcher.__init__(self)
            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
            self.set_reuse_addr()
            self.bind((host, port))
            self.listen(5)
            # variable to store some collision
            self.collision_found = False
            self.collision = {}
        def handle_accept(self):
            pair = self.accept()
            if pair is not None:
                sock, addr = pair
                print("incoming connection from %s" % repr(addr))
                DLogHandler(sock)
    if __name__ == '__main__':
        load("parameters.sage")
        server = Server(serverAdress, serverPort)
        asyncore.loop()
From the server.py, we just need to find points that satisfy E((x, y)) == c _P
+ d_ Q, from the parameters.sage we have P,Q,we can easily do it offline and
send 200 points to server with same groupID, then the server give back the
flag.