### Bug Report

**Bug Summary**

The `set_aspect(aspect='equal')` command for 3D plots in Matplotlib (version 3.1.1) functions as expected when lines 1279-1282 in the file `...\site-packages\matplotlib\axes_base.py` are commented out. With these lines commented, the 3D plot maintains its aspect ratio even when the window is resized. This behavior is desirable for 3D plots where maintaining the correct axes aspect is crucial. This was also the default behavior in Matplotlib version 3.0.3.

It is important to note that `set_aspect` does not set the axes limits; this must be done using the `set_xlim3d()`, `set_ylim3d()`, and `set_zlim3d()` methods. The documentation for `set_aspect` should be updated to clearly reflect its usage and limitations in the context of 3D plots.

**Steps to Reproduce:**
1. Create a 3D plot using Matplotlib.
2. Call `set_aspect('equal')` on the 3D axes.
3. Resize the plot window and observe the aspect ratio.

**Expected Behavior:**
- The 3D plot should maintain its aspect ratio when the window is resized.

**Actual Behavior:**
- The 3D plot does not maintain its aspect ratio when the window is resized, unless lines 1279-1282 in `axes_base.py` are commented out.

**Suggested Solution:**
- Comment out or modify lines 1279-1282 in `axes_base.py` to ensure the desired behavior.
- Update the documentation for `set_aspect` to clarify its functionality and the need to use `set_xlim3d()`, `set_ylim3d()`, and `set_zlim3d()` to set the axes limits.