Ghost in the Wireless, iwlwiﬁ edition
Nicolas Iooss and Gabriel Campana
PI:EMAIL
PI:EMAIL
Ledger Donjon
Abstract. Wi-Fi replaced Ethernet and became the main network pro-
tocol on laptops for the last few years. Software implementations of the
Wi-Fi protocol naturally became the targets of attackers, and vulnera-
bilities found in Wi-Fi drivers were exploited to gain control of the OS,
remotely and without any user interaction. However, not much research
has been published on Wi-Fi ﬁrmware, outside of Broadcom models.
This article presents the internals of an Intel Wi-Fi chip. This study,
mostly conducted through reverse engineering, led to the discovery of
vulnerabilities such as arbitrary code execution on the chip and secure
boot bypass, which were reported to the manufacturer.
1
Introduction
1.1
How we met the Intel Wi-Fi chip
One day in January 2021, Gabriel tried to browse a web application
hosted by his laptop using his smartphone. This operation seems simple,
but that day, it made his laptop disconnect from the Wi-Fi network, and
this was reproducible. As this was quite annoying, he opened his kernel
log (listing 1).
1
iwlwifi
0000:01:00.0:
Start
IWL
Error
Log
Dump:
2
iwlwifi
0000:01:00.0:
Status: 0x00000100 , count: 6
3
iwlwifi
0000:01:00.0:
Loaded
firmware
version : 34.0.1
4
iwlwifi
0000:01:00.0: 0 x00000038 | BAD_COMMAND
5
...
6
iwlwifi
0000:01:00.0:
Start
IWL
Error
Log
Dump:
7
iwlwifi
0000:01:00.0:
Status: 0x00000100 , count: 7
8
iwlwifi
0000:01:00.0: 0 x00000070 | ADVANCED_SYSASSERT
9
...
10
iwlwifi
0000:01:00.0: 0 x004F01A7 | last
host
cmd
11
ieee80211
phy0: Hardware
restart
was
requested
Listing 1. Messages appearing in Linux kernel log while requesting a web page
The failed assertion (line 8) indicated an issue in the ﬁrmware of the
Wi-Fi chip. This issue was easy to reproduce and only occurred when both
2
Ghost in the Wireless, iwlwiﬁ edition
the smartphone and the laptop were connected to the same Wi-Fi access
point. Why is this happening? Can it be exploited, for example to run
arbitrary code on the Wi-Fi chip?
This event started an adventure in the internals of Intel Wi-Fi chips.
As the interactions between a kernel module and a hardware component
can be very complex, the ﬁrst step was to better understand the Linux
kernel module driving the chip. This work quickly led to the code actually
loaded on the chip. Nicolas then joined the adventure and developed some
tooling, as using IDA disassembler felt too rudimentary. Analyzing the
code led to the discovery of a simple vulnerability enabling arbitrary code
execution on the Wi-Fi chip.
As the chip was quite old, we also experimented on a more recent
laptop, with a more recent Wi-Fi chip. The diﬀerences between the chips
are presented in ﬁgure 1. We did not ﬁnd the same vulnerability on this
chip, and both chips included a mechanism preventing modiﬁed ﬁrmware
from being loaded (by verifying a digital signature). So at ﬁrst we did not
have any way to run arbitrary code on this newer chip.
First chip
Second chip
Hardware device
Intel Dual Band
Intel Wireless-AC 9560 160MHz
Wireless AC 8260
Launch date
Q2 2015
Q4 2017
Firmware ﬁle
iwlwifi-8000C-34.ucode iwlwifi-9000-pu-b0-jf-b0-46.ucode
Firmware version
34.0.1
46.6f9f215c.0
Intel
website
resources:
https://www.intel.com/content/www/us/en/products/
sku/86068/intel-dual-band-wirelessac-8260/specifications.html
and
https://www.intel.com/content/www/us/en/products/sku/99446/intel-
wirelessac-9560/specifications.html
Fig. 1. Diﬀerences between the two studied Wi-Fi chips
Both Wi-Fi chips expose a rich interface to the Linux kernel. Using
it, we managed to dump the code which actually veriﬁes the ﬁrmware
signature. Analyzing this code quickly led to the discovery of a simple
signature veriﬁcation bypass on the ﬁrst studied chip. Unfortunately this
bypass did not work on the newer chip, even though the root cause of the
issue did not appear to be ﬁxed. After some weeks, we found a way to
bypass the signature veriﬁcation on the newer Wi-Fi chip too.
Being able to run arbitrary code on the chip enabled us to gain
a more precise understanding of its working. For example, the Wi-Fi
ﬁrmware is too large to ﬁt in the memory of the chip and a mechanism is
N. Iooss, G. Campana
3
implemented to store code and data in the main system memory. This is
what Intel calls the Paging Memory in the source code of the Linux kernel
module. The content of this memory has to be authenticated in some
way, to prevent an attacker on the main operating system from modifying
it. In practice, the ﬁrmware seems to use a hardware-assisted universal
message authentication code to ensure the integrity of each page in this
Paging Memory. The details of this mechanism do not seem to be publicly
documented anywhere, even though they are key to ensure the security of
the chip.
1.2
State of the art and contributions
The ﬁrst public remote exploits against Wi-Fi were presented in 2007 [9].
The exploited vulnerabilities were found in Linux kernel modules thanks
to fuzzing. These modules being open-source and their code quality quite
low, multiple vulnerabilities were found in the Wi-Fi kernel modules of
major network cards manufacturers. Public analysis of Wi-Fi ﬁrmware
wasn’t a thing at that time, probably because the attack surface of kernel
modules was suﬃcient for attackers to gain access to a remote computer.
In 2010 [8], the reverse engineering of an Ethernet network card
ﬁrmware led to the discovery of vulnerabilities in the ASF protocol im-
plementation. The researchers successfully gained control of this network
card, remotely.
In 2012 [4], the ﬁrmware of an Ethernet Broadcom chip was reverse
engineered and modiﬁed to include a debugger and eventually a backdoor.
Broadcom’s Ethernet and Wi-Fi ﬁrmware aren’t encrypted or signed and
can thus be patched, allowing dynamic analysis. Public datasheets also
help analysis [3] [7]. Vulnerabilities in Broadcom’s Wi-Fi chipsets were
found and exploited in 2017 [2].
In this article, we’ll present the internals of Intel Wi-Fi chips, gained
through the reverse engineering of the associated ﬁrmware. While the
ﬁrmware source code isn’t available, the Linux kernel module interacting
with these PCI chips is open source and is of great help. Links to the Linux
kernel sources are speciﬁc to the version 5.11 in order to have permalinks.
The main contributions of this article are:
— The publication of an Intel Wi-Fi ﬁrmware parsing tool,
— Reverse engineering of Intel Wi-Fi ﬁrmware,
— Internals of these ﬁrmware,
— Exploitation of vulnerabilities in the secure-boot mechanisms,
— Publication of on-chip instrumentation, tracing and debugging
tools.
4
Ghost in the Wireless, iwlwiﬁ edition
2
Finding the ﬁrmware code
2.1
Discovering iwlwiﬁ
When studying a hardware component such as the Intel Wi-Fi chip,
one of the ﬁrst things to do is to identify which one it is: its model name,
revision number, etc. On a laptop which was used to perform experiments,
the kernel log indicated the presence of an Intel Wireless-AC 9560 chip
handled by iwlwifi, the Linux kernel module for Intel Wireless Wi-Fi
(listing 2).
1
iwlwifi
0000:00:14.3:
Detected
Intel(R) Wireless -AC 9560
160MHz ,
2
REV =0 x318
Listing 2. Extract of kernel log showing information about the Wi-Fi chip
In practice, four kernel modules are used to implement the Wi-Fi
feature with this chip, in Linux 5.11:
— iwlwifi 1 handles the hardware interface (through the PCIe bus)
with the chip.
— iwlmvm 2 implements some higher-level interface to the ﬁrmware of
chips using MVM (which seems to be an acronym for multi-virtual
MAC).
— mac80211 3 implements a IEEE 802.11 (Wi-Fi) networking stack
in Linux.
— cfg80211 4 provides a conﬁguration interface to user-space pro-
grams.
The modules iwlwifi and iwlmvm support many versions of Intel
Wi-Fi chips. To identify which version is used, these modules use the PCI
device ID. The studied chip uses a PCI device ID 9df0 (listing 3), which
is mapped to a structure named iwl9560_trans_cfg in iwlwifi.5
1
$ lspci
-nn -s 00:14.3
2
00:14.3
Network
controller
[0280]:
Intel
Corporation
Cannon
Point -LP
CNVi [Wireless -AC] [8086:9 df0] (rev
30)
Listing 3. Requesting the PCI device ID using lspci
1 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi
2 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/mvm
3 https://elixir.bootlin.com/linux/v5.11/source/net/mac80211
4 https://elixir.bootlin.com/linux/v5.11/source/net/wireless
5 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/pcie/drv.c#L463
N. Iooss, G. Campana
5
To communicate with the chip, iwlwifi conﬁgures the ﬁrst
Base Address Register (BAR) of the PCIe interface, using functions
pcim_iomap_regions_request_all and pcim_iomap_table.6 This is a
standard way of communicating with a PCIe chip using Memory-Mapped
Input/Output (MMIO). After conﬁguring this interface, the kernel module
uses it to retrieve some hardware revision information. Then, at some
point, the function iwl_request_firmware 7 tries to load a ﬁle named
iwlwifi-9000-pu-b0-jf-b0-{API}.ucode 8 where {API} is a number
identifying the interface version of the ﬁrmware. At the time of the study,
the Linux ﬁrmware repository 9 contained 6 such ﬁles, with numbers be-
tween 33 and 46. To study the correct ﬁrmware, it was necessary to ﬁnd
out which one was actually loaded. And this information was actually
written in the kernel log (listing 4)!
1
iwlwifi
0000:00:14.3:
loaded
firmware
version
46.6 f9f215c .0
2
9000 -pu -b0 -jf -b0 -46. ucode
op_mode
iwlmvm
Listing 4. Extract of kernel log showing the chosen ﬁrmware ﬁle
2.2
Dissecting the ﬁrmware ﬁle
In the hardware world, some devices receive their ﬁrmware directly, as
an opaque blob, without much analysis from the operating system. The
studied Intel Wi-Fi chips are not like these devices. Instead, their ﬁrmware
ﬁles are ﬁrst decoded by iwlwifi and only some parts are actually sent
to the chips.
In the kernel module, the function which parses the ﬁrmware ﬁle is
named iwl_parse_tlv_firmware.10 It parses a header followed by a series
of Type-Length-Value entries (TLV) containing much information.
The ﬁrmware we studied in the experiments is available on
https://git.kernel.org/pub/scm/linux/kernel/git/firmware/
linux-firmware.git/tree/iwlwifi-9000-pu-b0-jf-b0-46.ucode?
6 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/pcie/trans.c#L3455
7 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/iwl-drv.c#L160
8 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/cfg/9000.c#L29
9 https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-
firmware.git/tree/?h=20211216
10 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/iwl-drv.c#L554
6
Ghost in the Wireless, iwlwiﬁ edition
h=20210511&id=4f549062619750e76f3155fc50b5c0f6529eed8a.
This
web page gives the ASCII representation of the ﬁrmware, which starts with
the header containing a version string IWL.release/core43::6f9f215c.
After the header, each entry of the ﬁle starts with a type which is an
item of enum iwl_ucode_tlv_type.11 The actual code which is loaded
on the chip is contained in entries with type IWL_UCODE_TLV_SEC_RT
and IWL_UCODE_TLV_SEC_INIT (and a few other ones not described here).
Each such entry deﬁnes a memory section (hence the _SEC_ in the name)
of the loaded ﬁrmware and starts with a 32-bit load address (in Little
Endian bit order) followed by the content.
For example, in the studied ﬁrmware ﬁle, the bytes at oﬀset 0x2f4
are 13000000 bc020000 00404000 06000000 a1000000. This deﬁnes a
TLV entry of type 0x13=IWL_UCODE_TLV_SEC_RT with 0x2bc bytes. This
type enables to decode the remaining bytes as the deﬁnition of a ﬁrmware
section at the address 0x00404000 which starts with the bytes 06000000
a1000000.
Plugging everything together leads to ﬁnding the sections presented
in listing 5.
1
SEC_RT
00404000..004042 b8 (0 x2b8 =696
bytes)
2
SEC_RT
00800000..00818000
(0 x18000 =98304
bytes)
3
SEC_RT
00000000..00038000
(0 x38000 =229376
bytes)
4
SEC_RT
00456000..0048 d874 (0 x37874 =227444
bytes)
5
SEC_INIT
00404000..004042 c8 (0 x2c8 =712
bytes)
6
SEC_INIT
00800000..008179 c0 (0 x179c0 =96704
bytes)
7
SEC_INIT
00000000..00024 ee8 (0 x24ee8 =151272
bytes)
8
SEC_INIT
00456000..00471 d04 (0 x1bd04 =113924
bytes)
9
SEC_INIT
00410000..00417100
(0 x7100 =28928
bytes)
10
SEC_RT
ffffcccc .. ffffccd0
(0x4=4
bytes)
11
SEC_RT
00405000..004052 b8 (0 x2b8 =696
bytes)
12
...
Listing 5. Raw decoding of the sections in the ﬁrmware ﬁle
This listing contains some strange entries. For example, some SEC_INIT
sections (used at initialization time) seem to be inserted between two sets
of SET_RT sections (used for runtime) and the entry for ffffcccc seems
oﬀ. The iwlwifi kernel module contains a macro which deﬁnes this last
value as a separator between CPU1 and CPU2 (listing 6).12 Indeed the
studied W-Fi chip contains two processors named UMAC and LMAC! In
literature, MAC usually means Medium Access Controller and is a layer of
11 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/fw/file.h#L47
12 https://elixir.bootlin.com/linux/v5.11/source/drivers/net/wireless/
intel/iwlwifi/fw/file.h#L461
N. Iooss, G. Campana
7
a network stack. According to Wi-Fi-related documents,13 it seems UMAC
means Upper MAC while LMAC means Lower MAC. These documents
also give an overview of how these abstraction layers seem to be stacked
in Intel Wi-Fi chips (see listing 7).
1
# define
CPU1_CPU2_SEPARATOR_SECTION 0xFFFFCCCC
2
# define
PAGING_SEPARATOR_SECTION
0xAAAABBBB