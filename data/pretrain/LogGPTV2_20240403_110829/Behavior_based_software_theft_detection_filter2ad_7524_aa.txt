title:Behavior based software theft detection
author:Xinran Wang and
Yoon-chan Jhi and
Sencun Zhu and
Peng Liu
Behavior Based Software Theft Detection
1Xinran Wang, 1Yoon-Chan Jhi, 1,2Sencun Zhu, and 2Peng Liu
1Department of Computer Science and Engineering
2College of Information Sciences and Technology
Pennsylvania State University, University Park, PA 16802
{xinrwang, szhu, jhi}@cse.psu.edu, PI:EMAIL
ABSTRACT
Along with the burst of open source projects, software
theft (or plagiarism) has become a very serious threat to the
healthiness of software industry. Software birthmark, which
represents the unique characteristics of a program, can be
used for software theft detection. We propose a system call
dependence graph based software birthmark called SCDG
birthmark, and examine how well it reﬂects unique behav-
ioral characteristics of a program. To our knowledge, our
detection system based on SCDG birthmark is the ﬁrst one
that is capable of detecting software component theft where
only partial code is stolen. We demonstrate the strength of
our birthmark against various evasion techniques, including
those based on diﬀerent compilers and diﬀerent compiler op-
timization levels as well as two state-of-the-art obfuscation
tools. Unlike the existing work that were evaluated through
small or toy software, we also evaluate our birthmark on a
set of large software. Our results show that SCDG birth-
mark is very practical and eﬀective in detecting software
theft that even adopts advanced evasion techniques.
Categories and Subject Descriptors
K.4.1 [COMPUTERS AND SOCIETY ]: Public Pol-
icy Issues—Intellectual property rights
General Terms
Security
Keywords
Software Birthmark, Software Plagiarism, Software Theft,
Dynamic Analysis
1.
INTRODUCTION
Software theft is an act of reusing someone else’s code, in
whole or in part, into one’s own program in a way violating
the terms of original license. Along with the rapid develop-
ing software industry and the burst of open source projects
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
(e.g., in SourceForge.net there were over 230,000 registered
open source projects as of Feb.2009), software theft has be-
come a very serious concern to honest software companies
and open source communities. As one example, in 2005 it
was determined in a federal court trial that IBM should pay
an independent software vendor Compuware $140 million
to license its software and $260 million to purchase its ser-
vices [1] because it was discovered that certain IBM products
contained code from Compuware.
To protect software from theft, Collberg and Thoborson
[10] proposed software watermark techniques. Software wa-
termark is a unique identiﬁer embedded in the protected
software, which is hard to remove but easy to verify. How-
ever, most of commercial and open source software do not
have software watermarks embedded. On the other hand,
“a suﬃciently determined attackers will eventually be able
to defeat any watermark.” [9]. As such, a new kind of soft-
ware protection techniques called software birthmark were
recently proposed [21, 26–28]. A software birthmark is a
unique characteristic that a program possesses and can be
used to identify the program. Software birthmarks can be
classiﬁed as static birthmarks and dynamic birthmarks.
Though some initial research has been done on software
birthmarks, existing schemes are still limited to meet the
following ﬁve highly desired requirements: (R1) Resiliency
to semantics-preserving obfuscation techniques [11]; (R2)
Capability to detect theft of components, which may be
only a small part of the original program; (R3) Scalabil-
ity to detect large-scale commercial or open source software
theft; (R4) Applicability to binary executables, because the
source code of a suspected software product often cannot
be obtained until some strong evidences are collected; (R5)
Independence to platforms such as operating systems and
program languages. To see the limitations of the existing
detection schemes with respect to these ﬁve requirements,
let us break them down into four classes: (C1) static source
code based birthmark [27]; (C2) static executable code based
birthmark [22]; (C3) dynamic WPP based birthmark [21];
(C4) dynamic API based birthmark [26,28]. We may brieﬂy
summarize their limitations as follows. First, Classes C1, C2
and C3 cannot satisfy the requirement R1 because they are
vulnerable to simple semantics-preserving obfuscation tech-
niques such as outlining and ordering transformation. Sec-
ond, C2, C3 and C4 detect only whole program theft and
thus cannot satisfy R2. Third, C1 cannot meet R4 because
it has to access source code. Fourth, existing C3 and C4
schemes cannot satisfy R5 because they rely on speciﬁc fea-
tures of Windows OS or Java platform. Finally, none of the
four class schemes has evaluated their schemes on large-scale
programs.
In this paper, we propose behavior based birthmarks to
meet these ﬁve key requirements. Behavior characteristics
have been widely used to identify and separate malware from
benign programs [8,16]. While two independently developed
software for the same purpose share many common behav-
iors, one usually contains unique behaviors compared to the
other due to diﬀerent features or diﬀerent implementations.
For example, HTML layout engine Gecko engine [3] supports
MathML, while another engine KHTML [4] does not; Gecko
engine implements RDF (resource description framework) to
manage resources, while KHTML engine implements its own
framework. The unique behaviors can be used as birthmarks
for software theft detection. Note that we aim to protect
large-scale software. Small programs or components, which
may not contain unique behaviors, are out of the scope of
this paper.
A system call dependence graph (SCDG), a graph rep-
resentation of the behaviors of a program, is a good can-
didate for behavior based birthmarks. In a SCDG, system
calls are represented by vertices, and data and control de-
pendences between system calls by edges. A SCDG shows
the interaction between a program and its operating system
and the interaction is an essential behavior characteristic
of the program [8, 16]. Although a code stealer may apply
compiler optimization techniques or sophisticated semantic-
preserving transformation on a program to disguise original
code, these techniques usually do not change the SCDGs.
It is also diﬃcult to avoid system calls, because a system
call is the only way for a user mode program to request
kernel services in modern operating systems. For exam-
ple, in operating systems such as Unix/Linux, there is no
way to go through the ﬁle access control enforcement other
than invoking open()/read()/write() system calls. Although
an exceptionally sedulous and creative plagiarist may cor-
rectly overhaul the SCDGs, the cost is probably higher than
rewriting his own code, which conﬂicts with the intention of
software theft. After all, software theft aims at code reuse
with disguises, which requires much less eﬀort than writing
one’s own code.
We develop system call dependence graph (SCDG) birth-
marks for meeting these ﬁve key requirements. To extract
SCDG birthmarks, automated dynamic analysis is performed
on both plaintiﬀ and suspect programs to record system call
traces and dependence relation between system calls. Since
system calls are low level implementation of interactions be-
tween a program and an OS, it is possible that two diﬀerent
system call traces represent the same behavior. Thus, we ﬁl-
ter out noises, which cause the diﬀerence, from system call
traces in the second step. Then, SCDGs are constructed and
both plaintiﬀ and suspect SCDG birthmarks are extracted
from the SCDGs.
We exploit subgraph isomorphism algorithm to compare
plaintiﬀ and suspect SCDG birthmarks. Although subgraph
isomorphism is NP-complete in general, it is tractable in
this application. First, the size of SCDGs is limited by a
predeﬁned parameter (100 or 400 in our experiment). Sec-
ond, SCDGs are not general graphs. Their characteristics
such as various types of nodes, makes backtrack-based iso-
morphism algorithm eﬃcient. Finally, the ﬁrst matching
suﬃces for software theft detection, whereas the traditional
isomorphism testing ﬁnds all isomorphism pairs. Hence, the
isomorphism testing on SCDGs is tractable and eﬃcient in
practice.
This paper makes the following contributions:
• We proposed a new type of birthmarks, which exploit
SCDGs to represent unique behaviors of a program. With-
out requiring any source code from the suspect, SCDG
birthmark based detection is a practical solution for re-
ducing plaintiﬀ’s risks of false accusation before ﬁling a
lawsuit related to intellectual property.
• As one of the most fundamental runtime indicators of pro-
gram behaviors, the proposed system call birthmarks are
resilient to various obfuscation techniques. Our experi-
ment results indicate that they not only are resilient to
evasion techniques based on diﬀerent compilers or diﬀer-
ent compiler optimization levels, but also successfully dis-
criminates code obfuscated by two state-of-the-art obfus-
cators.
• We design and implement Hawk, a dynamic analysis tool
for generating system call traces and SCDGs. Hawk po-
tentially has many other applications such as behavior
based malware analysis. Detailed design and implemen-
tation of Hawk are present in this paper.
• To our knowledge, SCDG birthmarks are the ﬁrst birth-
marks which are proposed to detect software component
theft. Moreover, unlike existing works that are evaluated
with small or toy software, we evaluate our birthmark on
a set of large software, for example web browsers. Our
evaluation shows the SCDG birthmark is a practical and
eﬀective birthmark.
The rest of this paper is organized as follows. Section 2
introduces concepts and measurements about software birth-
marks. In Section 3, we propose the design of SCDG birth-
marks based software theft detection system. Section 4
presents evaluation results. We discuss limitation and fu-
ture work in Section 5. Finally, we summarize related work
in Section 6 and draw our conclusion in Section 7.
2. PROBLEM FORMALIZATION
This section ﬁrst presents the deﬁnitions related to soft-
ware birthmark and SCDG birthmark, and then introduces
a metric to compare two SCDG birthmarks.
2.1 Software Birthmarks
A software birthmark is a unique characteristic that a pro-
gram possesses and that can be used to identify the program.
Before we formally deﬁne software birthmarks, we ﬁrst de-
ﬁne the meaning of copy. We say a program q is a copy
of program p if q is exactly the same as p. Beyond that,
q is still considered as a copy of p if it is the result of ap-
plying semantic preserving transformation (e.g., obfuscation
techniques and compiler optimization) over p. The follow-
ing deﬁnition of software birthmark and dynamic software
birthmark is a restatement of the deﬁnition by Tamada et
al. [27] and Myles et al. [21]:
Deﬁnition 1. (Software Birthmark) Let p, q be programs
or program components. Let f (p) be a set of characteristics
extracted from p. We say f (p) is a birthmark of p, only if
both of the following conditions are satisﬁed:
• f (p) is obtained only from p itself.
• program q is a copy of p ⇒ f (p) = f (q).
Software birthmarks can be classiﬁed as static birthmarks
and dynamic birthmarks. A static birthmark relies on syn-
tactic structure of a program. Existing static birthmarks
are vulnerable to simple semantic-preserving transforma-
tions [21]. On the other hand, a dynamic birthmark relies
on runtime behavior of a program, which is more diﬃcult to
be altered through code obfuscation techniques. The system
call based birthmark we propose in this paper is a dynamic
birthmark.
Deﬁnition 2. (Dynamic Software Birthmark) Let p, q be
programs or program components. Let I be an input to p
and q. Let f (p, I) be a set of characteristics extracted from p
when executing p with input I. We say f (p, I) is a dynamic
birthmark of p, only if both of the following conditions are
satisﬁed:
• f (p, I) is obtained only from p itself when executing P
with input I.
• program q is a copy of q ⇒ f (p, I) = f (q, I)
2.2 SCDG Birthmarks
Before we deﬁne SCDG birthmarks, we ﬁrst deﬁne SCDG.
A system call dependence graph (SCDG) is a graph repre-
sentation of the behaviors of a program, where system calls
are represented by vertices, and data and control depen-
dences between system calls are represented by edges. To
formally deﬁne SCDG, we ﬁrst deﬁne dynamic dependence
graph (DDG) [31] of a program run. Later, an SCDG can
be constructed from a DDG.
Deﬁnition 3. (DDG: Dynamic Dependence Graph) The
dynamic dependence graph of a program run is a 3-tuple
graph DDG = (N, E, β), where
• N is a set of nodes, and node n ∈ N corresponds to an
executed statement in the program run
• E ⊆ N × N is the set of dependence edges, and each
edge n1 → n2 ∈ E corresponds to a dynamic data depen-
dence or dynamic control dependence between statements
n1 and n2. A data dependence exists between two exe-
cuted statements if the set values used by one statement
overlaps the set of value deﬁned by the other. A control
dependence is introduced if the execution of one statement
depends on the values deﬁned by the other statement, usu-
ally a predicate statement.
• β : E → T is a function assigning dynamic dependence
types, either data or control, to edges.
Deﬁnition 4. (SCDG: System Call Dependence Graph)
The system call dependence graph of a program run is a
4-tuple graph SCDG = (N, E, α, β), where
• N is a set of nodes, where node n ∈ N corresponds to a
system call execution in the program run
• E ⊆ N × N is the set of dependence edges, and each
edge n1 → n2 ∈ E denotes that there exists a dependence
path from n1 to n2 in the DDG of the program run.
• α : N → S is a function assigning system call to nodes,
• β : E → T is a function assigning dependence types,
either data or control, to edges.
Figure 1 presents an example to illustrate DDG and SCDG.
Data and control dependences are plotted in solid and dashed
lines, respectively. In Figure 2.2 (b), statement executions 2,
7
6
 1 :  fd1 = open(path1,"r",...);
 2 :  read(fd1, buf, ...);
  3   :     i f   ( b u f   = =   " 1 " )   {
 4 :      fd2 = open(path2, "r", ...);
 5 :      n = read(fd2,buf,...);
 6 :      offset = n + 10;
 7 :      lseek(fd2,offset,...);
          ...
 8 :      close(fd2);
       }
 9 :  fd3 = open(path3,"w",...);
10:  read(fd1, buf, ...);
11:  strcpy(outbuf,buf);
12:  write(fd3,outbuf);
13:  close(fd3);
14:  close(fd1);
5
8
4
12
13
3
11
9
2
10
14
1
(a) statements
(b) DDG
7:lseek
8:close
5:read
12:write