The 
in Section 
If the client 
to access the object through 
is  described 
object 
that locked the object 
interface. 
Log servers 
4.3. 
interface, 
4.1. The substrate interface and locking 
maintains 
best guess as to which objects 
a list of locked objects 
it 
In Zzyzx, each client 
current 
ss. Each replica 
that is the client's 
has locked. 
correctne
object called the lock table. 
thoritative 
description 
locked each object. 
client 
including 
state, 
The lock table provides 
an au­
of which client, 
if any, has currently 
The lock table also  provides 
some per­
a counter, 
an operation 
by the operation 
vs. 
in Zzyzx, a client 
is not 
checks if 
of locked 
in its list 
Upon invoking 
any object touched 
The list may be inaccurate 
without 
impacting 
used in the MACS.) The client sends the 
maintains 
a special 
state machine 
and all MACs to each log server. 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
366 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
  .... 
V: : : : : : : 
 ......... 
. 
: : : : .'  :.:. 
in Zyzzyva. 
execution 
tine Locking provides  clients 
temporary 
objects, 
objects, 
each client 
avoiding 
can order its own requests for locked 
the need for an agreement 
subprotocol. 
increases latency 
Because Byzan­
exclusive 
access to 
Z yzzyva 
Zzyzx 
Pr ... 
 . : : : : : 
:: 
Server 4 ........................... 
Figure 3: Basic communication pattern of Zzyzx versus 
Zyzzyva. Operations 
in Zzyzx complete 
single round-trip 
Zyzzyva requires 
message delays, 
sage delays, 
on locked objects 
to 2/ + 1 log servers. 
are unresponsive. 
if all 3/+ 1 replicas 
are responsive, 
if some replicas 
or more mes­
in a 
three 
. 
than the next in sequence, 
or if the 
than the log server's 
or an unlock, 
quest number is greater 
vs value is greater 
must have missed a request 
transfer 
to access an object touched 
is in the process of being unlocked, 
tion 4.3), it returns 
(Section 
failure. 
5.1). If the log server has  promised 
not 
by the request  (since 
the object 
as  described 
in Sec­
value, the log server 
so it initiates 
state 
If the request 
the log server 
objects 
interface. 
Of 
with a replica, 
pointers 
from 
number is next in sequence, 
the request. 
fetches 
It lazily 
failure. 
If fetching 
Otherwise, 
the substrate 
may be sufficient. 
an object fails be­
the log 
as needed by invoking 
if a log server is co-located 
tries to execute 
replicas 
course, 
to objects 
cause the object is no longer locked by the client, 
server returns 
copy of each object that is touched 
cutes the request 
number, and the set of MACs to its request 
request 
a MACed message 
returns 
MACs. (If the returned 
client 
re-sends  the 
pendix B.7].) 
the client returns 
by the request. 
It exe­
vs, 
log, and 
21 + 1 non-failure 
response. 
MACs and a MAC of the MACs [15, Ap­
MACs do not match those sent, the 
on its local copy, appends 
with the response 
Upon receiving 
the majority 
the log server has a local 
the request, 
and the client's 
responses, 
If any log server 
returns 
the client 
failure, 
interface, 
sends a retry 
which includes 
both 
checks if 
number. Each replica 
before the last exe­
through 
the substrate 
and the request 
completed 
request 
the request 
the request 
at the log servers 
cution of the unlock subprotocol, 
tell the client 
erwise, 
to wait for a response 
the replicas 
execute 
the request. 
in which case the replicas 
from a log server. 
Oth­
Figure 3 shows the basic communication 
pattern 
of the 
Zyzzyva requires 
upon Zyzzyva further, 
in Zzyzx versus Zyzzyva. 
to be responsive 
servers 
log interface 
50% more network hops than Zzyzx, and Zyzzyva re­
quires all 31+ I servers 
I more than the 21 + 1 responsive 
Zzyzx. Zzyzx improves 
the bottleneck primary 
removing 
tography 
at servers. 
need for batching, 
cols [6,19,20,24] where the primary accumulates 
before sending 
the cryptographic  overhead 
over many requests, but waiting 
to perform well, 
required 
though, 
less cryp­
the 
obviates 
proto­
requests 
The latter 
a technique 
them to other replicas. 
used in previous 
and requiring 
improvement 
to batch requests before 
Batching 
by 
by 
amortizes 
4.3. Handling contention 
The protocol, 
so far, is a simple combina­
as described 
issued to PBFT or Zyzzyva (Section 
4.1) 
tion of operations 
and requests 
subprotocol 
prior lease-and lock-like 
Farsite 
[2] and Chubby [5]. 
to a log (Section 
appended 
is what differentiates 
Byzantine 
4.2). The unlock 
mechanisms in systems 
Locking from 
such as 
If a request  touches 
an unlocked 
object (Section 
4.1) 
(Sec­
failure 
to the primary 
because a log server returned 
interface. 
any locked objects 
or is retried 
tion 4.2), then the client sends the request 
using the substrate 
quest  touches 
lock subprotocol 
unlock subprotocol 
execution, 
a single 
can unlock multiple 
but, for clarity, 
The primary 
this section 
described 
object. 
in this section. 
checks if the re­
the un­
and, if so, initiates 
the 
In general, 
objects 
describes 
in a single 
unlocking 
The unlock subprotocol 
consists of a fast path and a 
round-trip 
full path, both shown in Figure 4. The fast path requires 
just a single 
servers. 
it is  required 
when request  logs 
and 21 + 1 log 
but 
or log server  is 
or 
faulty, 
do not match due to concurrency. 
between the primary 
additional 
Full unlock requires 
only when a client 
communication, 
Fast unlock: In the fast unlock path (A in Figure 4), the 
a message containing 
the hash 
the object (or set of objects) 
message to each log server, 
being unlocked. 
primary sends a "Try unlock" 
describing 
Each log server constructs 
of its request 
replier 
in replies 
located 
sent. Each log server sends  its 
matted as a request 
with replicas, 
includes 
for PBFT [7]). Once again, if log servers 
are co­
to the object need be 
to the primary 
for­
only a pointer 
response 
log and a hash of the object. 
A designated 
the value of the object in its message (as 
to the substrate 
21 + 1 responses 
interface. 
through 
with matching 
Upon receiving 
protocol, batched 
sends the responses 
with any requests enqueued 
object 
log hashes and at least one object that matches 
the primary 
(see Section 
and vs is incremented 
Before sending 
and request 
the hashes, 
strate 
object contention 
object unlocked, 
or full unlock operation. 
primary, 
each log server adds the object to a list of objects 
it promises not to touch until the next instantiation 
full unlock subprotocol. 
from touching 
potentially 
appends (see Section 
the sub­
due to 
marks the 
before the next lock 
a response 
to the 
This  list  prevents  the 
unlocked 
4.1). Each replica 
in concurrent 
log server 
objects 
4.2). 
of the 
The full unlock subprotocol: If request 
log hashes do 
ex­
not match in the fast path, the full unlock subprotocol is 
ecuted (B in Figure 4). The primary 
logs from 21 + 1 log servers 
lock" in Figure 4). 
signed request 
("Break 
fetches 
of the agreement  subprotocol 
978-1-4244-7501-8/101$26.00 
©201 0 IEEE 
367 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Try  Break  Vote on  Choose and  Issue 
unlock lock  logs  replay log  request 
Try 
Issue 
Request unlock request 
r-'--,  
Client 
Log Server 1 
Log Server 2 
Log Server 3 
Log Server 4 
Primary 
Replica 2 
Replica 3 
Replica 4 
A) Fast unlock 
sends the hashes and 
request 
Figure 4: Unlock message diagram. A) The primary fetches 
match, the primary 
request 
B) Otherwise, the primary 
which requests 
sequence 
request  log 
which the primary 
have valid MACS ("Vote on logs"). 
to reach a consistent state ("Choose and  replay 
sends with the conflicting request 
with f + I votes, and return the chosen request 
the conflicting 
of requests 
through 
fetches 
log"). 
Finally, 
the substrate 
a hash of the request 
through 
the substrate 
logs from 2f + I log servers ("Break 
lock"). The primary then 
Each log server sends its votes via the substrate 
log as a substrate 
protocol 
interface. 
response. Each log server replays 
choose the longest 
Replicas 
that 
as above, the log servers 
send the primary matching 
hashes, 
interface 
("Issue request"). (See Section 
4.3.) 
B) Full unlock 
log at 2f + I log  servers 
interface 
("Issue request"), 
("Try Unlock"). If hashes 
which unlocks 
asks each log server 
the object. 
to vote on 
5. Protocol details 
techniques, 
being unlocked 
of objects 
its request 
can be avoided 
using standard 
that it promises 
but 
log, a log 
to 
not to touch until the next 
as in the fast path. Unfortunately, 
(Signatures 
full unlock is rare.) Before sending 
server adds the object (or set of objects) 
its  list 
full unlock, 
cannot verify the MACs stored with each request 
quest logs (Section 
request 
log entry to prove whether 
as follows. 
logs to the log servers, 
the client 
4.2). Thus, the primary sends the signed 
which "vote" on each request 
invoked 
each request, 
the replicas 
in the re­
Each log server sends a substrate 
interface 
request 
that 
interface 
invoked 
replays 
request 
log entries 
this request 
log entries 
that the client 
Each log server 
a consistent 
create a new log consisting 
object is locked and each request 
each request. 
in a substrate 
have valid MACs. ("Vote on 
of 
such that each 
has at least / + I 
Repli­
lists which request 
logs" in Figure 4.) Replicas 
the longest 
sequence of 
touched 
votes,  ensuring 
cas return this log to each log server 
response. 
thus reaching 
other correct 
ure 4.) Each log server then marks the object unlocked, 
increments 
to touch. Finally, 
mary matching 
object to be unlocked. 
any requests 
enqueued 
tion 4.1), in a batch through 
replica 
it promised 
not 
send the pri­
their state and the 
and 
sends these hashes, 
due to object contention 
(see Sec­
the substrate 
VS. 
hash  values  describing 
log servers.  ("Choose 
state that matches the state at 
marks the object unlocked 
and increments 
the list of objects 
and replay log" in Fig­
as above, correct 
log as needed, 
VS, and clears 
The primary 
protocol. 
Each 
log servers 
The primary sends and each log server checks vs before 
each "Try unlock", 
sage. If the log server's 
the message is stale. 
log server's, 
state transfer 
"Break lock", and "Replay log" mes­
vs is greater 
than the primary's, 
If the primary's 
vs is greater 
then 
than the 
The log servers 
use checkpointing 
and state transfer 
5.2 describes 
5.1, similar 
to those in 
in Section 
for read-only 
requests, 
and preferred 
mechanisms, described 
PBFT [7], HQ [8], and Zyzzyva [20]. Section 
optimizations 
ing, lower contention, 
discusses how Zzyzx can provide 
deploying 
replicas. 
most Byzantine 
significantly 
quests flow through 
PBFT and Zyzzyva) 
vides limited 
fault-tolerant 
by adding additional 
In contrast, 
protocols 
scalability). 
or overlapping 
a bottleneck 
additional 
node (e.g., 
more aggressive 
quorums. 
lock­
5.3 
Section 
by 
of 
the throughput 
near-linear 
scalability 
cannot be increased 
replicas, 
all re­
because 
the primary 
in 
quorums (which pro­
i.e., either 
can support 
are correct, 
Though this paper assumes that at most / servers 
(log 
Locking (and many other 
a hybrid 
or replicas) 
b + 2t + 1 rather 
fail, Byzantine 
fault-tolerant 
classes of failures. 
n - b are honest, 
that at least n - t servers 
protocols) 
model that allows for different 
correct 
such, t  b. Then, the total number of 
servers 
Byzantine 
failure 
As in Q/U [1], suppose 
and that at  least 