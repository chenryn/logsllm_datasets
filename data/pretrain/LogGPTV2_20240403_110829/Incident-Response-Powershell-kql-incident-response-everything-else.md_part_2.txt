rel="noopener noreffer"}
## Analysing Windows Security Events
The KQL part of this blog will show high level examples of useful steps
to take when analysing logs. Since all different types of data can be
ingested and reviewed in ADX, the KQL queries need to be specifically
written for the data.
When analysing the content of any table I most often first take the
first 10 rows to get a feeling of the content. In this case, 10 Windows
Security Events are returned, and opening one of the rows will show all
the rows including its content. I advise to always open a few rows from
different EventIds to get a feeling for its contents.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
SecurityEventsDevice1
| take 10
```
:::
![Ingest Data](/svg/loading.min.svg){.lazyload
data-src="/images/kql-for-incident-response-part2/Data.png"
data-srcset="/images/kql-for-incident-response-part2/Data.png, /images/kql-for-incident-response-part2/Data.png 1.5x, /images/kql-for-incident-response-part2/Data.png 2x"
data-sizes="auto"}
Based on those rows we can collect some statistics which can help us to
find rare behaviours in our environment. The fields that contain the
actiontypes are most valuable for those statistics. In the case of
Windows Security Events, the actiontype is the EventId field. Event
identifiers uniquely identify a particular event. To get an
understanding of what happened on the device the statistics of the
EventIds can be valuable for investigation.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
SecurityEventsDevice1
| summarize TotalEvents = count() by EventID
| sort by TotalEvents
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
KQL Solutions
:::
::: details-content
::: admonition-content
The
[Azure-Sentinel](https://github.com/Azure/Azure-Sentinel){target="_blank"
rel="noopener noreffer"} GitHub Repository contains KQL queries for a
lot of solutions. Even if you have not ingested the data in Sentinel the
prebuild KQL logic can be beneficial.
For Windows Security Events the following links are very helpful and can
be used if you have ingested the data in ADX:
-   [Windows Security Events Hunting
    Queries](https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Windows%20Security%20Events/Hunting%20Queries){target="_blank"
    rel="noopener noreffer"}
-   [Windows Security Events Analytics
    Rules](https://github.com/Azure/Azure-Sentinel/tree/master/Solutions/Windows%20Security%20Events/Analytic%20Rules){target="_blank"
    rel="noopener noreffer"}
-   [All Sentinel
    Solutions](https://github.com/Azure/Azure-Sentinel/tree/master/Solutions){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
# Microsoft 365
The second example investigates the unified audit logs from Microsoft
365 which have been retrieved using the [Microsoft Extractor
Suite](https://github.com/invictus-ir/Microsoft-Extractor-Suite){target="_blank"
rel="noopener noreffer"}. The results of Microsoft Extractor Suite can
be exported to CSV format for further analysis. For this blog, the
publicly available dataset from [Invictus Incident
Response](https://www.invictus-ir.com/){target="_blank"
rel="noopener noreffer"} is used to simulate the activities. Because the
dataset is publicly available you can perform the same actions!
Dataset:
[https://github.com/invictus-ir/o365_dataset](https://github.com/invictus-ir/o365_dataset){target="_blank"
rel="noopener noreffer"}
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Microsoft Extractor Suite
:::
::: details-content
::: admonition-content
The [Microsoft Extractor
Suite](https://github.com/invictus-ir/Microsoft-Extractor-Suite){target="_blank"
rel="noopener noreffer"} is a PowerShell module for the acquisition of
data from Microsoft 365 and Azure for Incident Response and Cyber
Security purposes. This has been developed by the team of [Invictus
Incident Response](https://www.invictus-ir.com/){target="_blank"
rel="noopener noreffer"}. The following Microsoft data sources can be
extracted for analysis: Unified Audit Log, Admin Audit Log, Mailbox
Audit Log, Mailbox Rules, Transport Rules, Message Trace Logs, Azure AD
Sign-In Logs, Azure AD Audit Logs, Registered OAuth applications in
Azure AD.
The documentation on how to use this PowerShell Module:
[https://microsoft-365-extractor-suite.readthedocs.io/en/latest/](https://microsoft-365-extractor-suite.readthedocs.io/en/latest/){target="_blank"
rel="noopener noreffer"}
:::
:::
:::
To ingest the CSV into Azure Data Explorer the same activities have been
performed as for the Windows Security Events (see section [Ingesting
Logs in Azure Data
Explorer](#ingesting-logs-in-azure-data-explorer){rel=""}). The only
difference is that a new table has been made, which is named
AuditRecordsInvictusIR and it contains other data. One of the first
steps is to determine which actiontypes (operations in this case) this
dataset has.
``` {tabindex="0"}
AuditRecordsInvictusIR
| summarize count() by Operations
```
![Operations in the M365 Logs](/svg/loading.min.svg){.lazyload
data-src="/images/kql-for-incident-response-part2/AuditLogsContent.png"
data-srcset="/images/kql-for-incident-response-part2/AuditLogsContent.png, /images/kql-for-incident-response-part2/AuditLogsContent.png 1.5x, /images/kql-for-incident-response-part2/AuditLogsContent.png 2x"
data-sizes="auto"}
Based on the listing of all the operations we could determine that
multiple alerts have been triggered in our Microsoft 365 environment.
This information could of course be very useful in an incident response
scenario, thus the help of KQL was needed to list the alerts. The query
below collected all *AlertTriggered* operations and parsed the
*AlertName* and *AlertId* fields from the AuditData column. Lastly, the
arg_max() function is used to only collect the latest status of all the
triggered alerts.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
AuditRecordsInvictusIR
| where Operations == 'AlertTriggered'
| extend AlertName = tostring(parse_json(AuditData.Name)), 
    AlertId = tostring(parse_json(AuditData.AlertId))
| summarize arg_max(CreationDate, AlertName, AlertId) by AlertId
```
:::
![Alerts from the M365 Logs](/svg/loading.min.svg){.lazyload
data-src="/images/kql-for-incident-response-part2/AuditLogsAlerts.png"
data-srcset="/images/kql-for-incident-response-part2/AuditLogsAlerts.png, /images/kql-for-incident-response-part2/AuditLogsAlerts.png 1.5x, /images/kql-for-incident-response-part2/AuditLogsAlerts.png 2x"
data-sizes="auto"}
# The sky is the limit
When using Azure Data Explorer for incident response it does not matter
whether you use Windows Security Event Logs, Unified Audit Logs,
Firewall Logs or Signin Logs from an appliance. All data can be analyzed
using KQL, if the data consists of less standardized formats some
parsing must be done before you can query the events. But Azure Data
Explorer has proven that it can be a huge help when performing incident
response!
The last part of the incident response series will also include how you
can leverage MDE Live Response to remotely run scripts that can be
ingested in Azure Data Explorer. Stay tuned!
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [KQL Functions For Security
    Operations](https://kqlquery.com/posts/kql-for-security-operations/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 1: IR on Microsoft Security Incidents (KQL
    edition)](https://kqlquery.com/posts/kql-incident-response/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 3: Leveraging Live
    Response](https://kqlquery.com/posts/leveraging-live-response/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
**Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2023-10-13
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/kql-incident-response-everything-else/"
data-title="Incident Response Part 2: What about the other logs?"
via="BertJanCyber"
hashtags="KQL,PowerShell"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/kql-incident-response-everything-else/"
hashtag="KQL"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/kql-incident-response-everything-else/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/kql-incident-response-everything-else/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [KQL](/tags/kql/), [PowerShell](/tags/powershell/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[Incident Response Part 1: IR on Microsoft Security Incidents (KQL
edition)](/posts/kql-incident-response/ "Incident Response Part 1: IR on Microsoft Security Incidents (KQL edition)"){.prev
rel="prev"} [Incident Response Part 3: Leveraging Live
Response](/posts/leveraging-live-response/ "Incident Response Part 3: Leveraging Live Response"){.next
rel="next"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [Â©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::