title:SPIFFY: Inducing Cost-Detectability Tradeoffs for Persistent Link-Flooding
Attacks
author:Min Suk Kang and
Virgil D. Gligor and
Vyas Sekar
SPIFFY: Inducing Cost-Detectability Tradeoffs for Persistent Link-Flooding Attacks
Min Suk Kang
Carnegie Mellon University
PI:EMAIL
Virgil D. Gligor
Carnegie Mellon University
PI:EMAIL
Vyas Sekar
Carnegie Mellon University
PI:EMAIL
Abstract—We have recently witnessed the real life demonstra-
tion of link-ﬂooding attacks—DDoS attacks that target the core of
the Internet that can cause signiﬁcant damage while remaining
undetected. Because these attacks use trafﬁc patterns that are
indistinguishable from legitimate TCP-like ﬂows, they can be
persistent and cause long-term trafﬁc disruption. Existing DDoS
defenses that rely on detecting ﬂow deviations from normal TCP
trafﬁc patterns cannot work in this case. Given the low cost of
launching such attacks and their indistinguishability, we argue
that any countermeasure must fundamentally tackle the root
cause of the problem: either force attackers to increase their costs,
or barring that, force attack trafﬁc to become distinguishable
from legitimate trafﬁc. Our key insight is that to tackle this root
cause it is sufﬁcient to perform a rate change test, where we
temporarily increase the effective bandwidth of the bottlenecked
core link and observe the response. Attacks by cost-sensitive
adversaries who try to fully utilize the bots’ upstream bandwidth
will be detected since they will be unable to demonstrably
increase throughput after bandwidth expansion. Alternatively,
adversaries are forced to increase costs by having to mimic
legitimate clients’ trafﬁc patterns to avoid detection. We design
a software-deﬁned network (SDN) based system called SPIFFY
that addresses key practical challenges in turning this high-level
idea into a concrete defense mechanism, and provide a practical
solution to force a tradeoff between cost vs. detectability for link-
ﬂooding attacks. We develop fast trafﬁc-engineering algorithms
to achieve effective bandwidth expansion and suggest scalable
monitoring algorithms for tracking the change in trafﬁc-source
behaviors. We demonstrate the effectiveness of SPIFFY using
a real SDN testbed and large-scale packet-level and ﬂow-level
simulations.
I.
INTRODUCTION
Over the last few years, link-ﬂooding DDoS attacks have
been proposed that can cause substantial damage to the core
of the Internet [51] [31]. Unlike traditional DDoS attacks that
exhaust the resources (access bandwidth or computation) of
the end targets, these DDoS attacks target the connectivity
infrastructure of the targets. These attacks utilize distributed
botnets to create a large number of low-rate attack ﬂows
that traverse a set of chosen network links. Such ﬂows can
cause severe congestion at the targeted links and ultimately
signiﬁcantly degrade the connectivity of target hosts or servers.
These attacks have quickly moved from the realm of academic
curiosity [31], [51] to real-world incidents [28], [17].
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23147
Link-ﬂooding attacks have two speciﬁc characteristics that
make them exceedingly effective at scale while rendering
traditional defense mechanisms irrelevant. First, they attack
targets indirectly. As the locus of attack is different from
the targeted end servers, they cannot be easily detected by
intrusion-detection systems and ﬁrewalls at the end servers.
Second, these attacks use protocol-conforming trafﬁc ﬂows
that are indistinguishable from legitimate ﬂows, thereby caus-
ing high collateral damage when ﬂows are dropped to relieve
congestion. Consequently,
traditional defenses that rely on
detecting anomalous ﬂows with speciﬁc attack signatures (e.g.,
SYN ﬂoods) or sources that appear in “elephant ﬂows” [34],
[58] will simply be ineffective against these attacks, and may
in fact adversely impact legitimate connections.
Moreover, attackers have a fundamental cost-asymmetry
advantage with respect to defenders. On the one hand, the
cost of ﬂooding a 10 Gbps network link can be as low as
US $80 and averages US $920, assuming 1 Mbps upload
bandwidth per bot [18]. On the other hand, the cost of the
backbone link bandwidth is orders of magnitude higher. For
example, 10 Gbps bandwidth in the Internet transit costs about
US $6,300 as of 2015 [3]. This is approximately 7 – 80 times
more expensive relative to the equivalent attack bandwidth.
Unfortunately, removing the attack-defense cost asymmetry
is very difﬁcult to achieve since these costs are determined
by two fundamentally independent markets, namely, pay-per-
install bot markets [18] and Internet
transit markets [53].
Taken together, indistinguishability and cost asymmetry enable
attackers to launch pernicious attacks on critical infrastructures
and services with impunity.
In this paper, we argue that any solution that purports
to defend against indistinguishable link-ﬂooding attacks must
achieve at least one of the following goals: (1) remove or re-
duce the cost asymmetry; (2) ensure adversary detection; or (3)
create an untenable tradeoff between the cost and detectability.
By deﬁnition, any ISP that can either substantially increase the
attack cost relative to the defense cost or induce detectability
will deter attacks by rational adversaries; i.e., cost-sensitive
adversaries who wish to remain undetected.1
that
We show, perhaps surprisingly,
is indeed possible
to force the adversary into an untenable tradeoff that either
increases the attack cost or forces detectability. The high-level
intuition behind our approach is as follows; viz., Figure 1.
Suppose we know the locus of the attack L (i.e., a speciﬁc
ISP link) and we have some capability to logically increase
1In contrast, countermeasures for cost-insensitive, irrational adversaries are
known to be harder and more expensive to orchestrate and deploy; e.g.,
CoDef [38]. Thus, SPIFFY’s efﬁcient deterrence is a very desirable ﬁrst-line
defense for cost-sensitive, rational adversaries, which are believed to be the
majority of DDoS adversaries; viz., Section VIII-A.
Fig. 1: Intuition for distinguishing legitimate senders from
bots via temporary bandwidth expansion.
the bandwidth of L by some factor M temporarily. After
the increase, we observe the response of the trafﬁc source
IPs that were traversing L. Now, legitimate sources running
TCP-like ﬂows will naturally see a corresponding increase in
their throughputs as the bandwidth of their bottleneck link
has increased. Attack sources, however, will not observe this
increase as a rational cost-sensitive attacker would have chosen
to fully utilize the available bandwidth of the upstream links
of the sources in the ﬁrst stage; i.e., before the temporary
bandwidth expansion. Thus, the bottleneck bandwidth increase
will induce no increase in the effective throughput of the attack
sources. Alternatively, to avoid detection, the attacker could
choose to keep each bot’s attack trafﬁc rate much lower than
the available bandwidth of its upstream link. Note, however,
that this will increase the number of required bots and thus
increase attack cost proportionally. In essence, adversaries are
forced to either allow their attack sources to be detected (via
rate-change measurements) or accept an increase in attack cost.
Note that the key requirement is to monitor the change in
throughput for trafﬁc sources after the bottleneck bandwidth
increase; measuring the raw throughput itself alone will not
help detection as the attack ﬂows are indistinguishable from
normal ﬂows.
However, there are three practical challenges that need to
be addressed before this high-level intuition can turn into a
practical defense mechanism:
(1) Implementing bandwidth expansion: First, we need
some mechanism for increasing the logical bandwidth of
L with a sufﬁciently large expansion factor. Note that a
larger expansion factor will: (a) make it easier to distinguish
bots vs. legitimate sources (e.g., to create a clear separation
accounting for measurement noise) and (b) equivalently
increase the effective attack cost. However, it is infeasible
and uneconomical for ISPs to have spare dark ﬁbers for each
link, and thus we need deployable mechanisms to virtually
increase the bandwidth, if only temporarily.
(2) Fast workﬂow: Second, we need the defense workﬂow to
be fast and responsive to be effective against real attacks.
If the temporary bandwidth expansion and detection takes
several hours, then the damage is already done.
(3) Robust rate-change detection: Third, we need per-sender
rate change measurements at scale, which may in turn
require high processing requirements on monitoring routers
2
Fig. 2: An example of link-ﬂooding attacks. Legitimate
looking connections between the bots and the legitimate
public servers cross the link L in the ISP [31].
as well as high control overhead for reporting these mea-
surements. Furthermore, this detection must be robust to
TCP effects, especially given that many legitimate ﬂows on
the Internet are short ﬂows.
We address these practical challenges and present the de-
sign and implementation of SPIFFY.2 To address (1), SPIFFY
presents a new trafﬁc engineering [25] technique based on
software-deﬁned networking (SDN) whereby one can virtually
increase the bandwidth by routing around the bottleneck. To
address (2), we develop fast greedy algorithms to solve a trafﬁc
optimization problem, which would otherwise take several
hours even with state-of-art solvers [2]. Finally, to address (3),
we suggest simple sketch-based change detection algorithms
that can measure rate changes with low overhead [33], [58].
We develop a proof-of-concept prototype using POX [7] and
use a combination of real testbed evaluation and large-scale
simulations to validate the effectiveness of SPIFFY against link
ﬂooding attacks. SPIFFY relies on SDN’s centralized control
and trafﬁc visibility to develop the ﬁrst-known defense against
such link-ﬂooding attacks.
Contributions:
In summary, this paper makes the following
contributions:
(cid:15) A practical solution to force link-ﬂooding adversaries into
an untenable tradeoff between cost and detectability, which
provides an effective ﬁrst-line defense;
(cid:15) A bandwidth expansion mechanism for SDN via trafﬁc en-
gineering based on a fast heuristic for solving the underlying
optimization problem;
(cid:15) An SDN-based implementation of SPIFFY and an extensive
evaluation demonstrating its robustness with realistic TCP
effects.
II. BACKGROUND AND THREAT MODEL
In this section, we review the types of link-ﬂooding attacks
we address in this paper and then formally characterize the
attacker goals and constraints.
Background: The link-ﬂooding attacks we consider in this
paper target network links in the core of the Internet (e.g.,
backbone links in large ISPs or inter-ISP links) and create
a large number of attack ﬂows crossing the targeted links to
ﬂood and virtually disconnect them; viz., Figure 2. This is in
sharp contrast to traditional DDoS attacks that aim to choke
the resources of the end target; e.g., computation, memory, or
2SPIFFY stands for handling ‘Scalable Persistent Indistinguishable link-Flooding
attacks with reduced cost asymmetrY.’
degradedrateindistinguishable      flow ratesincreasedratenot-increasedrate  distinguishable per-sender ratesdegradedrateTemporaryBandwidthExpansion(TBE)legitimatesendertargeted link Lbotbots	
  targeted	
  link	
  L legi/mate	
  public	
  servers	
  ISP access link bandwidth. Recent research (e.g., Coremelt [51]
and Crossﬁre [31]) and real-life attacks against core routers
of upstream networks (e.g., ProtonMail attack [28], Spamhaus
attack [17]) are the examples of such attacks.
In the general case, link-ﬂooding attacks may ﬂood multi-
ple link targets, as exempliﬁed in Crossﬁre [31]. For simplicity
of presentation, we focus on the link-ﬂooding attacks against a
single infrastructure link throughout this paper. However, our
system is also robust to multiple link-ﬂooding attacks; viz.,
Section VIII-C for a detailed discussion.
Threat model: We consider a rational adversary who wants
to inﬂict as much damage as possible on legitimate ﬂows of
the target network link using as few resources as possible, and
while remaining indistinguishable. Formally, our link-ﬂooding
adversary pursues three goals:
(cid:15) Attack-Strength Maximization (Gstrength): Suppose the
network a mechanism to guarantee a per-ﬂow rate under
“normal” network operation when there are no attacks; e.g.,
through a combination of link capacity provisioning and
trafﬁc engineering [12]. Let this guaranteed rate be denoted
by rg. The adversary aims to reduce the per-TCP-ﬂow fair-
share rate of ﬂows traversing the target link to the degraded
rate, denoted by rd. The degraded rate will be much smaller
than the guaranteed rate (i.e., rd ≪ rg); otherwise (e.g.,
rd (cid:24) rg) the attack would fail to degrade a legitimate ﬂow
much beyond the guaranteed rate rg.
The degraded rate rd is an adversary-chosen parameter
that measures the attack strength. A smaller rd indicates a
stronger attack since legitimate ﬂow rates would be degraded
more.
(cid:15) Attack Persistence (Gpersistence): To circumvent detection
and hence be persistent, a link-ﬂooding attack needs to
mimic legitimate trafﬁc patterns. That is, the attack ﬂows
are indistinguishable from legitimate ones via trafﬁc analysis
of headers/payloads and/or intrusion detection at the target
link. For instance, this can be achieved by using legitimate
looking web sessions to decoy servers [31]. To this end,
the adversary uses TCP-based ﬂooding attacks. Because
TCP trafﬁc constitutes the majority of the Internet backbone
trafﬁc, as it represents about 90 – 98% of the byte volume
of the backbone links, these attacks are more difﬁcult to
detect and ﬁlter than UDP-based ﬂooding attacks [59].
(cid:15) Attack-Cost Minimization (Gcost): A rational adversary
will seek to minimize the cost of the attack. In this paper,
we assume that the cost of the attack is proportional to
the number of bots necessary for the attack;
the
number of bots is a good proxy for the attack cost. This
assumption is based on the observation that, in general, bots
are sold in bulk (e.g., several thousands) in the pay-per-
install markets [18].
thus,
We assume that the network follows a per-ﬂow fair-share
allocation of link bandwidth to all ﬂows served. This is already
widely observed in today’s Internet since TCP ﬂows adjust