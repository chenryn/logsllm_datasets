这个概念，用来衡量密码的强度或解密的难度，一般用成本或时间来表示。也就是暴力破解一
个密码所需的计算时间。
⑨加密算法的简写。
在一些资料中，你可能会遇到 RC5-w/r/b 或 RC5-32/12/16 这类符号。它是说明算法配置
的简略表达形式。
•w=word=分组长度（字长），单位为位，长度可为 16、32 或 64 位。
•r=round=转换轮数，其值介于 0——255 之间。
•b=bit=密钥长度，16 字节为 128 位。
3.逻辑运算
①与，AND，∧
双真才为真，其它为假
②或，OR，∨
有真就是真，双假才是假。
③非，NOT，！，~
取反。
④异或，ExclusiveOR，XOR，⊕。最重要的计算机运算。
不同就是真，相同就是假。
④模，MOD。最重要的密码学运算。
求整除后的余数。
4.什么是密钥
早期密码系统的算法是必须保密的，没什么所谓的密钥；算法一旦公开或被破解，就没任
何保密性了。而现代密码系统的算法是全公开的，安全性靠密钥来实现；也就是说各类系统都
使用相同原理的“锁”，给不同的用户主体配不同的“钥匙”就行了。密钥就是一长串的字符，
长度是 2 的很多次方，很长很长。
密钥聚类（Key Clustering）：使用相同加密算法但不同密钥对同一明文进行加密产生相
同密文的情况。这种情况实际减小了密钥空间，从而降低了密码强度。
密码术（cyptograpgy）：通过加密和解密使通信双方对外界隐藏和验证通信信息的技术
或科学。AIO 用这个词，其它其它教材叫“密码学”。
密码分析（cryptanalysis）：在不知道加密算法中使用的原始密钥的情况下，把密码转
换成明文的和运算。
密码学（cryptology）：研究密码术和密码分析的科学。
三、密码学方法
加密数据有两种主要方法：流方法和块方法。主要也是用在对称加密里的。
1.流密码 stream cipher
逐位执行加密的密码系统叫做基于流密码（分组为 1 位的块密码就是流密码了）。这是最
常用在流应用上的一种方法，例如，语音或视频传输无线等效隐私(WEP)使用了流密码 RC4。
由于存在把加密密钥暴露给攻击者的许多弱点例如弱密钥大小，这种密码被认为不安全。
流密码使用密码流生成器(keystream generator)，就像是“一次性密码本”，它生成的
—80—
位流与明文位进行异或，从而产生密文。正确实施流密码的难点在于要生成一个真正随机而平
衡的密钥流，一般要用初始化向量 IV 来提高随机性。
2.块密码/分组密码 block cipher
块密码对成块的文本运算。明文在输入密码系统的过程中，被分解成预定大小的块—通常
是 ASCⅡ码大小的倍数——64、128、192 位等。一个强密码必须具有两个主要属性：扰乱和扩
散，以确保攻击者不可能对其进行逆向工程。扰乱(confusion)通常通过替代实现，扩散
(diffusion)则通过换位实现。密钥值的随机性和数学函数的复杂性也决定了所涉及的扰乱和
扩散的级别。大多数块密码结合使用了替代和置换运算。这使块密码相对而言强于大多数基于
流密码，但计算密度更大，执行成本往往也更高。也正是由于这个原因，许多基于流密码在硬
件中执行，而基于块密码在软件中执行。
①扰乱（混淆）指的是使密钥和密文之间的关系尽可能复杂，从而令攻击者无法从密文中
发现密钥。每个密文值都应依赖于密钥的若干部分，但在观察者看来，密钥值和密文值之间的
对应关系应当看上去是完全随机的。（算法很复杂）
②扩散（置乱）指的是单独一个明文位会影响到若干密文位。改变一个明文值应当更改许
多而不是一个密文值。实际上，在强分组密码中，如果改变一个明文位，那么每一个密文位都
会发生变化的几率为 50%。与扩散非常类似的一个概念叫做雪崩效应。如果一个算法非常符合
雪崩效应准则，这就意味着算法输入值的轻微变化会引起输出值的显著变化。即密钥或者明文
的少量变化会引起密文的显著变化。（结果很多样）
③SP-network。为了增强分组加密（块加密）算法的强度，替换 substitution 和置换
permutation 这 2 种方法都要用，反复用，以实现扰乱和扩散，这被称为 SP-network。
在算法中，将一个分组中的各个位打乱或者分散到整个分组内，即可实现扩散。扰乱则通
过执行复杂的替代函数来实现，这样坏人就无法了解如何替换正确的值以得到原始的明文消
息。假设我有 500 块上面写有字母的木块，将它们排列起来拼出一封电报(明文)。然后，我
使用另外 300 块木块替换其中 300 块木块(通过替代实现扰乱)。接下来，我将所有木块打乱(通
过换位实现扩散)，并将它们堆成一堆。如果你想要得到原始的消息，那么就必须替换正确的
木块，并将它们接正确的顺序排列。这很难做到。
3.初始化向量 IV(Initialization Vector)
IV 是一个随机值，用于确保加密过程中不会产生某种规律性的模式。它们与密钥一同使
用，而且在传输时不需要加密。如果不使用 IV，相同明文会得到相同的密文，攻击者可以轻
松破解密钥。
4.会话密钥(session key)
会话密钥是只使用一次的对称密钥，用于对通信会话期间两个用户之间的消息进行加密。
5 密码学在网络通信领域的应用
通信线路加密有两份种方式（IPsec 的 EAP 模式也有这 2 种通信方式）：
①链路加密（Link encryption）：建立 1 个安全隧道，所有的数据(包括头、尾、地址和
路由数据)被加密，路由每一跳都需要解密再加密转发，速度慢。
③端到端加密（End-to-end encryption）：不加密头、尾、地址和路由数据，速度快，
但易遭嗅探和窃听。
—81—
端到端加密的一个典型应用是 SSH（Secure Shell）安全外壳。SSH 为 FTP，Telnet,rlogin
等提供加密解决方案，有 2 个版本：
SSH1,不安全,支持 DES, 3DES, IDEA,和 Blowfish 算法；
SSH2，安全，不支持 DES/IDEA,支持其它算法。
6.通信线路加密的一个典型体系结构就是 IPsec
IPSec 是由互联网工程任务组(IETF) 确立的标准体系结构，没规定技术实施的细节，是
一个开放的模块化架构，目的是实现实体（系统、路由器、网关、计算机等）之间的通信加密。
IPSec 使用公钥密码算法来提供加密、访问控制、不可否认性以及消息身份验证，使用 IP 协
议，被广泛应用于虚拟专用网(VPN)。
IPSec 通常与二层隧道协议(L2TP)一起使用，可以工作在两种模式：传输模式或隧道模式。
传输模式只有数据包有效载荷被加密，用于对等通信；隧道模式对整个数据包(包括头)都加密，
用于网关间通信。IPSec 有 2 个重要的组件：
①身份验证首部(AH)。提供消息完整性和不可否认性，提供身份验证和访问控制，并且可
以防止重放攻击。
②封装安全有放载荷(ESP)。提供数据包内容的机密性和完整性。ESP 还提供加密和有限
的身份验证，并且可以防止重放攻击。
IPSec 另一个重要概念是安全关联(SA security association)，SA 就是 1 个单向的通信
会话，并记录与连接有关的配置和状态信息。双向信道就有 2 个 SA，要同时支持 AH、ESP 就
要 4 个 SA。
IPSec 还有很多内容要考，详见第四域 C.4 章节。
7.网络安全关联和密钥管理协议(ISAKMP) The Internet Security Association and Key
Management Protocol
ISAKMP 是为 IPSec 提供后台支持的，主要功能是协商、建立、修改、删除和管理安全关
联（SA），具备 4 方面的主要能力：
①对通信主体（peer）进行身份验证。
②建立并管理安全关联 SA。
③提供密钥生成机制。
④防止遭受威胁(例如重放和拒绝服务攻击)。
I.1 密码生命周期 （例如：加密的局限性、算法/协议治理）
除了一次一密，所有的密码系统都有一个有限的寿命。一方面，加密的数据是有保密期限
的，有的是 1 天，有的是 10 年，到期就可以公开了；另一方面，加密的算法、协议和密钥长
度随着技术的发展，很快就会过时，需要与时俱进。
业界一般用“强”、“弱化”和“遭破坏”等词来描述密码系统生命周期的各个阶段。NIST
以下几个词语描述算法和密钥长度的：“可接受”、“不宜使用”、“受限”、“没有用途”。
I.2 加密类型 （例如：对称加密、非对称加密、椭圆曲线加密）
一、对称密钥算法/对称加密/私有密钥/秘密密钥/单钥密码/共享密钥 common key
—82—
消息的加密和解密使用相同的密钥，消息的发送者和接收者都要拥有这个密钥才行。凯撒
密码、斯巴达密码棒和恩尼格玛密码机等算法和系统都是对称算法的例子。接收者需要用加密
流程中使用过的同一个密钥来执行解密流程。
先解释一下“私钥”这个概念：
在对称密钥算法中，“私钥”指是的私有密钥密码学或公钥密码学，也就是对称加密的意
思，它的字面涵义是指收、发双方都要保守这个秘密（相同的密钥）。
在非对称密钥算法中，即所谓的公钥密码学，“私钥”是与“公钥”相对应的概念，是这
个密钥对中不公开给其它通信对象的密钥，它的字面涵义是指收、发双方仅要保守自己的这个
秘密（独有的私钥）就行了，不关其它人的事。
对称密码学运算很快，简单高效，可以集成到硬件里，但缺点是很明显的（考点）：
①可扩展性差。它不能用于大量用户间的加密，因为每一对不同用户间的点对点通信加密
都要一个密钥，这个量很大，管理和分发这些密钥也很麻烦。N 个对象间要 N×（N-1）/2 个
不同的密钥。
②密钥必须经常更新。如果 1 个人离职，不使用加密系统了，整个系统的密钥都要换掉，
不然就不安全了；就算没人走，也要经常换换，怕有人泄露密钥；而且分发密钥必须通过带外
安全途径。
③不能实现不可否认性（抗抵赖性）。使用同一密钥的多个通信对象间，无法证实该消息
是由确认的某个对象发出来的，它不提供数字签名之类的功能。
下面是必须熟悉的对称加密算法：
1.数据加密标准（DES）Data Encryption Standard
DES 是一种算法标准，DEA 是其具体实现，两个概念可以混用。美国 1977 年搞的 DES 已经
过时了，但它很精典，一直被优化升级。基本原理：明文按 64 位的长度逐段拆分，用 64 位的
字串来逐段异或（XOR），于是得到了密文。记住几个概念：
DES 的分组长度是 64 位，密钥是 56 位！64 位字串中有 8 位是奇偶信息，不是密钥。加密、
解密要异或 16 次，1 次被称为是 1 轮（round），DES 为什么是 16 轮转换呢，开发者就这么定
的，他觉得这个够安全了，算的也快。不过可以很快被暴力破解。
下面是 DES 的 5 种操作模式（必考），也就是分组加密/块加密的方式：
前 2 种是在块结构中运行的；后 3 种是在流模式中运行的。
①电子代码本模式（ECB）Electronic Codebook Mode，照本宣科
ECB 简单容易不安全，就是每个 64 字串都用相同密钥来运算，毫无变化。相同的明文会
得到相同的密文。搞得多了，破密者就可以搞出 64 位字串的明、密对照代码本了，不要密钥
也能解密。
这个脆弱性使得 ECB 仅能用于短代码的加密传输，用它来做主用通信加密手段并不现实
（因为长文本很容易被破密者归纳出明、密对照的代码本）。
②密码分组链接模式（CBC）Cipher Block Chaining Mode，逐串变化
先用 1 个 64 位 IV（初始向量）来异或变换明文的第 1 个分组，再做 16 轮加密变换；后
续的分组都要用上一组的密文来先变换明文，再加密。这样相同明文不可能得到相同的密文。
CBC 用的 IV 可以明传给对方，也可以密传给对方。不过，如果加密过程中或传输过程中丢失
—83—
了一些字串，就不可能再解密了，环环相扣啊。
③密码反馈模式（CFB）Cipher Feedback Mode，实时的逐串变化
CFB 就是 CBC，也用 IV 和链接，只是运算的方法不一样。（也有说 CFB 对 IV 加密了）
链接模式 CBC 在硬盘里算，把明文拆分，用 IV 逐个算出密文，明文、密文都存在硬盘上；
回馈模式 CFB 在内存里算，直接边算边发送，不用硬盘，它读明文的第 1 组 64 位，算完
发出去，接着读第 2 组，用上一组密文转换后再加密，接着发出去。因为算的很快，完全就是
个数据流。
CBC 就相当于是笔译，记下来翻译；CFB 就相当于同声翻译，边听边说，直接大脑反应。
④输出反馈模式（OFB）Output Feedback Mode，容错的逐串变化（用的最多）
OFB 就是 CFB,用 IV,运算方法一样，只是每个字串的明文变换不依赖上一个字串，而是通
过 IV 为每组字串都计算出一个种子值（seed value），再用这个种子值与对应字串做异或运
算，得到变换的明文后再加密。
输出回馈 OFB 在内存里算，因为 IV 是可以明传的，所以就算中间有丢包，也可以通过 IV、
密钥和字串序号来解密；但 CBC 和 CFB 的消息内容是密传的，每组字串的加密和解密都要依赖
上一组密文，一旦中间少了几串，就无法得知变换的 IV 到底是什么了，也就无法解密。
⑤计数模式（CTR）Counter Mode，更快的容错的逐串变化
CTR 就是 OFB，用种子值的流密码运算，不过种子值不依赖上一个种子值，而是直接通过
字串的序号和 IV 来算出对应的种子值。这样算起来更快了，不用从第一个种子值一路推算到
第 N 个种子值，可以直接根据序号算出种子值来，好处是长文本的加密可以被拆分成很多个小
文来进行并行运算。CTR 用于 IPsec 和 ATM 等。
总结一下：懒得写了，自己归纳 5 种模式的特点吧，第 5 种是最好的。
2.三重数据加密算法(3DES) Triple DES