title:A novel approach for a file-system integrity monitor tool of Xen virtual
machine
author:Anh-Quynh Nguyen and
Yoshiyasu Takefuji
A Novel Approach for a File-system Integrity Monitor Tool
of Xen Virtual Machine
Nguyen Anh Quynh, Yoshiyasu Takefuji
Graduate School of Media and Governance,
Keio university
5322 Endoh, Fujisawa, Japan 252-8520
{quynh,takefuji}@sfc.keio.ac.jp
ABSTRACT
File-system integrity tools (FIT) are commonly deployed host-based
intrusion detections (HIDS) tool to detect unauthorized ﬁle-system
changes. While FIT are widely used, this kind of HIDS has many
drawbacks: the intrusion detection is not done in real-time man-
ner, which might render the whole scheme useless if the attacker
can somehow take over the system with privileged access in the
time between. The administrator also has a lot of problems to keep
the base-line database updating. Besides, the database and the FIT
itself are vulnerable if the attacker gains local privileged access.
This paper presents a novel approach to address the outstanding
problems of the current FIT. We propose a design and implementa-
tion of a tool named XenFIT for Xen virtual machines. XenFIT can
monitor and ﬁres alarms on intrusion in real-time manner, and our
approach does not require to create and update the database like in
the legacy methods. XenFIT works by dynamically patching mem-
ory of the protected machine, so it is not necessary to install any
kernel code or user-space application into the protected machines.
As a result, XenFIT is almost effortless to deploy and maintain. In
addition, thanks to the advantage introduced by Xen, the security
polices as well as the detection process are put in a secure machine,
so XenFIT is tamper-resistant with attack, even in case the attacker
takes over the whole VM he is penetrating in. Finally, if deploy-
ing strictly, XenFIT is able to function very stealthily to avoid the
suspect of the intruder.
Categories and Subject Descriptors
H.2.0 [General]: Security, integrity and protection; D.4.6 [Security
and Protection]: Invasive Software
General Terms
Security, Performance
Keywords
Rootkit, Intrusion Detection, Xen Virtual Machine, Linux
1.
INTRODUCTION
File-system is the heart of any computer system: it contains data
ﬁles, executable ﬁles, conﬁguration and administrative ﬁles. Al-
most all the security incident resulted in critical ﬁles changed: the
attacker would wish to return again without any authentication, or
he wants to steal precious information like password, credit-card
number. To do that, he usually installs various Trojan or back-doors
in the system before leaving. Further more, the sophisticated at-
tacker always modiﬁes or removes logging data to cover his traces.
All of these activities lead to new ﬁles are generated, existent ﬁles
are altered or deleted, and consequently the system’s integrity is
changed. That is why ﬁle-system integrity is a very important factor
for computer security, and FIT should always be employed to pro-
tect critical systems. Once installed and conﬁgured properly, these
monitoring tools can detect the illegal tampering and ﬁre alarms on
the incident.
Regarding the practical solutions on FIT, there are many choices.
Some of the most popular tools are available with even the source
code such as Tripwire ([10]), or Tripwire-alike tools like AIDE
([19]), Osiris ([20]) and Samhain ([22]). To detect the changes
in the ﬁle-system, a FIT is usually equipped with a security policy:
if it detects the violation against the policy (for example, a system
binary ﬁle is overwritten), it will record the suspected action and
signal the administrator. The administrator then must also specify
a list of ﬁles or directories the FIT needs to watch out. Initially
FIT is executed to collect a base-line database of ﬁle-system pa-
rameters, such as permission or ownership, ﬁle size, MAC times
along with cryptographic checksums over the ﬁle content. During
the scheduled operation, FIT compares the current state of the ﬁle-
system with the information in the database. Any suspected change
against the security policy is ﬂagged, and the corresponding report
is generated and sent to the administrator.
Unfortunately, while these solutions are widely used, they still
leave much things to desire: their schemes have some drawbacks
which make them vulnerable to attackers. Below is the most out-
standing problems the users are experiencing:
(1) Delay detection: Most of the current solutions work in off-
line manner, in which the tools are periodically scheduled to
run and verify the integrity of the system. Clearly this leaves a
window of opportunity for the attacker to penetrate the system
and evade our IDS.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’07, March 20-22, 2007, Singapore.
Copyright 2007 ACM 1-59593-574-6/07/0003 ...$5.00.
(2) High deployment complexity: Organizations with hundred
machines (like ISPs or large data-center) experience a lot of
problem to deploy FIT: they all require to be well prepared and
planed. One of the troubles is that all systems must generate the
base-line database, then these database must be safely stored so
the attacker cannot damage them. However the database must
be easily retrieved by the administrator when he wants to run
194
FIT to verify the integrity. This contrary demand alone causes
a lot of headache for the administrators.
(3) Highly maintaining overhead: The base-line database must
be maintained and updated when there are changes in the sys-
tem, for example if the software are upgraded. This job might
be required to be done frequently, especially because nowa-
days the software vulnerabilities are published almost every-
day, which then come with various patches [4].
(4) Poor information: As almost all the FIT run in off-line man-
ner, the information they can provide to help the forensic pro-
cess are quite limited. For example they cannot answer fun-
damental questions such as which proccess-name/process-id
made the modiﬁcation to the data, and what happened around
that event. Without these kind of clues, forensic analyzer must
do a hard job to investigate the intrusion.
(5) Highly vulnerable to attack: Most of the current FIT are
user-space applications, which makes them vulnerable if the
attacker gets the root access. In that case he can kill the verify-
ing processes, then completely disables or removes these tools,
thus disarm all the intrusion system. Besides, the base-line
database and the FIT itself must be protected at all cost, oth-
erwise if the attacker compromise them, the monitoring result
becomes useless. But again, the situation can be very compli-
cated if the attacker gains privilege access right.
(6) Exposed problem: Most of the FITs are visible in the system:
the attacker can easily ﬁnd out that he is observed by an IDS.
The fact that our monitoring tools fail to hide their presence
might reduce its chance to detect the malicious activities of a
highly-skillful attacker.
Recently some real-time FITs such as SNARE ([9]) and I3FS
([13]) are proposed to ﬁx the problems. The common idea of these
solutions is that they modify the system kernel to capture all the
I/O events, then decide if the access is legal or not. Unfortunately
these tools either have high deployment complexity, or simply not
very suitable for some detection/prevention schemes.
This paper proposes a solution named XenFIT, a real-time Fle-
system Integrity monitor Tool, to address 6 above-mentioned short-
comings of the current FITs. XenFIT is made to run in Xen virtual
machines ([6]), [15]), and it can report the security policy viola-
tions in real-time.
In contrast with other tactics, XenFIT works
by dynamically patching the memory of the monitored virtual ma-
chines (VM), so it get notiﬁed about potential problems of the pro-
tected VM in real-time manner, with richer information about the
context of the incident. Because XenFIT scheme does not require
any program or kernel module loaded inside the protected VM, it
causes almost zero-effort to deploy. In addition, because there is no
need to generate and update the base-line database like in legacy
approaches, the maintenance cost of our solution is very low. To
detect the intrusion, XenFIT have security policies for each spe-
ciﬁc VM, and the detection process is safely done in a centralized
machine. Last but not least, if XenFIT is installed and conﬁgured
properly, it is hard to subvert, and able to survive even if the at-
tacker gains root access.
The rest of this paper is organized as followings. The section 2
covers some background on Xen Virtual Machine. The section 3
presents the design and implementation of XenFIT, while section 4
discusses some issues of our solution. Section 5 evaluates our ap-
proach with some rootkits and performance benchmark. Section 6
summaries the related works, and discusses in detail the outstand-
ing problems of some popular FIT. Finally we conclude the paper
in section 7.
2. BACKGROUND ON XEN VIRTUAL MA-
CHINE
Our solution XenFIT is based on Xen, and exploits the debug-
ging architecture of Xen to inject detection breakpoints into pro-
tected VM. In this part, we will take a brief look at Xen version
3.0.2, the latest version as of this writing. After that we discuss the
kernel debugging architecture for Xen VM, which will be used by
our XenFIT solution.
2.1 Xen Virtual Machine
Basically, Xen is a thin layer of software above the bare hard-
ware. This layer is either called hypervisor or virtual machine mon-
itor. Its main job is to expose a virtual machine abstraction that is
slightly different from the underlying hardware. Xen introduces a
new architecture called xen, which is very similar to x86 architec-
ture. The virtual machines (VMs) executing on Xen are modiﬁed
(at kernel level) to work with xen architecture1. All the accesses
of DomUs to the hardware and peripherals must go through Xen,
so Xen can keep the close eye to those VMs and control all the
activities.
Running on top of Xen, VM is called Xen domain, or domain
in short. A privileged special domain named Domain0 (or Dom0
in short) always runs. Dom0 controls other domains (called User
Domain, or DomU in short), including jobs like start, shutdown,
reboot, save, restore and migrate them between physical machines.
Especially, Dom0 is able to map and access to memory of other
DomUs at run-time.
2.2 Exceptions handling in Xen
In Xen, to manage other DomUs and the physical hardware, the
hypervisor layer runs at the highest privilege level (ring 0 on x86
architecture). To provide a strong isolation between DomUs as
well as between DomUs and the hypervisor, all the DomUs are
run at lower level (ring 1 on x86 architecture). So are the inter-
rupt handlers of DomUs: While normally the interrupt handlers
are registered in the interrupt descriptor table (IDT), Xen does not
allow DomU to install their handlers themselves because of the se-
curity reasons: it cannot give DomU the direct access to the below
hardware. Instead, DomU’s kernel are modiﬁed at source code, so
the hypervisor captures the interrupts instead of letting the DomUs
handle them. 2
Speciﬁcally, in the asynchronous interrupt case, also called ex-
ception and generated when the system executes the INTO, INT1,
INT3, BOUND instruction or by page faults: these exceptions are
handled by the hypervisor layer ﬁrst instead by the DomU’s kernel.
To register handlers, DomU’s kernels are modiﬁed to call the hy-
percall named HYPERVISOR set trap table to setup the exception
handlers. The handlers are functions initialized at machine boot
time, and managed by hypervisor layer.
2.3 Debugging Support Architecture in Xen
In x86 architecture, INT3 is a breakpoint instruction which is
used for debugging purpose3. Whenever this instruction is hit, the
control is passed to the exception handler of INT3 in kernel space.
1The recent hardware from Intel and AMD allow commodity OSes
to run on Xen without any change, but we will not consider them
here
2In this paper we only consider DomU as in para-virtualization
case, because we do not have access to the latest VT-enable ma-
chine yet.
3Breakpoint instruction is an one-byte opcode with the value of
0xCC on x86 platform
195
In Xen, the sequence of handling the INT3 exceptions is as in the
following steps:
• When the DomU hits the breakpoint instruction, it raises the
exception #BP.
• The system makes a hypervisor switch to give control to the
INT3 handler staying in the hypervisor layer.
• The INT3 handler in hypervisor checks if DomU is in kernel
mode. If that is not the case, Xen returns the control to DomU
• If the exception comes from DomU’s kernel, Xen pauses the
DomU for inspection.
In fact, the Xen debugger works by exploiting the mentioned
feature: When the debugger server running in Dom0 detects that
the concerned domain is paused, it comes to inspect the DomU’s
kernel, then resume it after it ﬁnishes the job ([1]).
Besides INT3, INT1 is another special interrupt made for debug-
ging. This interrupt sends the processor into the single-step mode,
in which after each construction, the handler of INT1 is called. To
make this happen, we only need to enable the trap ﬂag (TF) of the
FLAGS register. The processor switches to normal mode if the TF
ﬂag is turned off. And similarly to the case of INT3, when the
system is in single-step mode, after each instruction the control is
changed to the INT1 handler at hypervisor layer. The sequence of
handling INT1 is same as in INT3’s case.
3. XENFIT SOLUTION
XenFIT is our answer to the problem of the current FIT, and
XenFIT is made to work for Xen virtual machines. Our object is
to use XenFIT instead of the available FITs to protect Xen VM, to
assure that the intrusions that violate the system integrity are more
effectively detected. This section presents the goals, design and
implementation of XenFIT.
3.1 Goals and Approaches
With XenFIT, we aim to address 6 problems of the current FIT
as discussed in section 2. Therefore the design of XenFIT is driven
by the following goals:
• Real-time detection: XenFIT should be able to detect the
violation at real-time to ﬁx the problem (1). To achieve this
goal, XenFIT exploits the debugging architecture available
in Xen: XenFIT runs as a daemon process in Dom0, and
at run-time puts breakpoints instruction into DomU’s kernel
code at the right places of its ﬁle-system stack. With this
approach, XenFIT is able to intercept operation of DomU’s
ﬁle-system, so it can see what is happening with all the I/O
ﬂow. Whenever the DomU’s kernel hits these breakpoints,
the control path is transferred to Dom0 via the hypervisor
layer, and then to our XenFIT. XenFIT handles the excep-
tions similar to the way Xen debugger does: It inspects the
DomU’s kernel, and gather concerned data on ﬁle-system ac-
tivities, which can disclose the malicious intrusion. Once we
have the information, we can verify them against the secu-
rity policies kept in Dom0, and the violations are reported
accordingly. Then XenFIT resumes the related DomU, and
waits for the next breakpoint exception.
From DomU’s point of view, XenFIT functions as an auto-
matical kernel debugger. But in fact, XenFIT only handles
the debugging event to access and capture information re-
lated to ﬁle-system to detect activities that breach system in-
tegrity.
• Stealthy functioning: In contrast with other solution, as ex-