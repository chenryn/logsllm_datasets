      return result;
    }
当进程的线程首次被转换成 GUI 线程并调用 W32pProcessCallout 时，win32k 将调用
win32k!xxxInitProcessInfo 来初始化每进程 W32PROCESS/PROCESSINFO 结构体（W32PROCESS 是
PROCESSINFO 的子集， 处理 GUI 子系统，而 PROCESSINFO 还包含特定于 USER 子系统的信息）。该结构体具体保存针对于每个进程的
GUI 相关的信息，例如相关联的桌面、窗口站，以及用户和 GDI 句柄计数。在调用 win32k!xxxUserProcessCallout 初始化
USER 相关的域及随后调用 GdiProcessCallout 初始化 GDI 相关的域之前，该函数通过调用
win32k!xxxAllocateW32Process 分配结构体自身。
另外，win32k 也为所有被转换为 GUI 线程的线程初始化一个每线程 W32THREAD/THREADINFO 结构体。该结构体存储与 GUI
子系统相关的特定信息，例如线程消息队列中的信息，注册的窗口挂钩，所有者桌面，菜单状态，等等。在这里，W32pThreadCallout 调用
win32k!AllocateW32Thread 来分配该结构体，随后调用 GdiThreadCallout 和 UserThreadCallout
来初始化 GUI 和 USER 子系统各自特有的信息。在该处理过程中最重要的函数是
win32k!xxxCreateThreadInfo，其负责初始化线程信息结构体。
##### 2.2 窗口管理器
窗口管理器的重要功能之一是追踪实体，例如窗口，菜单，光标，等等。其通过将此类实体表示为用户对象来实现该功能，并通过用户会话维护自身句柄表来追踪这些实体的使用。这样一来，当应用程序请求在某个用户实体中执行行为时，将提供自己的句柄值，句柄管理器将这个句柄有效地映射在内核内存中对应的对象。
用户对象
用户对象被划分成不同的类型，从而拥有它们自己类型的特定结构体。例如，所有的窗口对象由 win32k!tagWND 结构体定义，而菜单由
win32k!tagMENU 结构体定义。虽然对象类型在结构上不同，但它们都共享一个通用的被称为 HEAD 结构体的头部。
HEAD
结构体存储句柄值（h）的一份副本，以及一个锁计数（cLockObj），每当某对象被使用时其值增加。当该对象不再被一个特定的组件使用时，它的锁计数减小。在锁计数达到零的时候，窗口管理器知道该对象不再被系统使用然后将其释放。
    typedef struct _HEAD {
        HANDLE    h;
        ULONG32   cLockObj;
    } HEAD, *PHEAD;
虽然 HEAD 结构体相当小，但很多时候对象使用像 THRDESKHEAD 和 PROCDESKHEAD
这样的进程和线程特有的头结构体。这些结构体提供一些特殊的域，例如指向线程信息结构体 tagTHREADINFO
的指针，和指向关联的桌面对象（tagDESKTOP）的指针。通过提供这些信息，Windows
能够限制对象在其他桌面中被访问，并因此提供桌面间隔离。同样地，由于此类对象通常被一个线程或进程所有，共存于同一桌面的线程和进程间的隔离也能够被实现。例如，一个线程不能通过简单地调用
DestroyWindow
销毁其他线程创建的对象，而是需要发送一个经过完整性级别检查等额外校验的窗口消息。然而，对象间隔离并未规定成一种统一集中的方式，任何不做必要检查的函数都能够允许攻击者用以绕过这个限制。不可否认，这是引入高特权级的服务和已登录用户会话之间的会话间隔离（session
separation，Vista
及更新）的原因之一。由于运行在同一会话中的所有进程共享同一个用户句柄表，低特权级的进程能够潜在地发送消息给某个高特权级的进程，或者与后者所拥有的对象进行交互。
句柄表
所有的用户句柄被索引在所属会话的句柄表中。该句柄表在 win32k!Win32UserInitialize 函数中被初始化，每当 win32k
的新实例被加载时调用该函数。句柄表自身存储在共享段的基地址（win32k!gpvSharedBase），同样在 Win32UserInitialize
函数中初始化。随后该共享段被映射进每个新的 GUI
进程，这样一来将允许进程在不发起系统调用的情况下从用户模式访问句柄表信息。将共享段映射进用户模式的决策被视为有益于改善性能，并且也被应用在基于非内核的
Win32 子系统中，用以缓解在客户端应用程序和客户端-服务端运行时子系统进程（CSRSS）之间频繁的上下文切换。在 Windows 7
中，在共享信息结构体（win32k!tagSHAREDINFO）中存在一个指向句柄表的指针。在用户模式（user32!gSharedInfo，仅
Windows 7）和内核模式（win32k!gSharedInfo）都存在一个指向该结构体的指针。
用户句柄表中的每项都被表示为 HANDLEENTRY
结构体。具体来说，该结构体包含关于其对象特定于句柄的信息，例如，指向对象自身的指针（pHead），它的所有者（pOwner），以及对象类型（bType）。所有者域要么是一个指向某进程或线程结构体的指针，要么是一个空指针（在这种情况下其被认为是一个会话范围的对象）。举个例子会是监视器或键盘布局/文件对象，其被认为在会话中是全局的。
    typedef struct _HANDLEENTRY {
        struct _HEAD* phead;
        VOID*         pOwner;
        UINT8         bType;
        UINT8         bFlags;
        UINT16        wUniq;
    } HANDLEENTRY, *PHANDLEENTRY;
用户对象的实际类型由 bType 值定义，并且在 Windows 7 下其取值范围从 0 到 21，可见下表。bFlags
域定义额外的对象标志，通常用来指示一个对象是否已被销毁。通常是这种情况：如果一个对象被请求销毁，但其锁计数非零值的话，它将仍旧存在于内存中。最后，wUniq
域作为用来计算句柄值的唯一计数器。句柄值以 handle = table_entry_id | (wUniq  dps poi($peb+58)
    00000000`77b49500 00000000`77ac6f74 USER32!_fnCOPYDATA
    00000000`77b49508 00000000`77b0f760 USER32!_fnCOPYGLOBALDATA
    00000000`77b49510 00000000`77ad67fc USER32!_fnDWORD
    00000000`77b49518 00000000`77accb7c USER32!_fnNCDESTROY
    00000000`77b49520 00000000`77adf470 USER32!_fnDWORDOPTINLPMSG