8(b), the new APK file can be downloaded through the query 
function. Taking InsecureBankv2 as an example, the running of 
the processed APK file is shown in Figure 8(c)-(f). Before the 
sensitive information is leaked out by the information flow, it 
will be limited, and a notification will be sent to the user after 
being successfully intercepted, as shown in Figure 8(c)-(d). The 
user can click on the notification to view the details of the leak-
age path, which is shown in Figure 8(e)-(f).  
FastDroid  [69]  is  an  STA  method,  similar  to  FlowDroid. 
FastDroid implements a static information flow search based on 
a taint value graph by modifying the FlowDroid tool. Although 
the experiment in [69] showed that FastDroid can obtain better 
search  performance,  FSAFlow  is  not  implemented  on  Fast-
Droid since FastDroid’s path is only composed of variable re-
lationships. The statements on the path, including branch state-
ments, are invisible in FastDroid, which makes it difficult to 
extract key path information from its output for path tracking.  
F.  Limitations 
False negatives/positives: FSAFlow searches all paths using 
the STA tool FlowDroid. Although STA benefits from analyz-
ing the complete program code, FSAFlow may exhibit false neg-
atives due to implementation limitations [70], such as reflective 
calls and inaccessible code. FlowDroid resolves reflective calls 
only if their arguments are string constants. However, if reflec-
tive call targets are determined by external configuration or net-
work servers, the edge of a reflection call will be lost in the ICFG, 
resulting in potential false negatives. In order to prevent mali-
cious developers from writing their code deliberately like that to 
leak whatever they want to leak, our further work will adopt a 
strict taint-sensitive policy mentioned in Section III D. For na-
tive code, FlowDroid assumes a sensible default: the call argu-
ments and the return value become tainted if at least one param-
eter is previously tainted. Although this may be the best practical 
approximation  in  a  black-box  setting,  it  is  also  generally  un-
sound. To minimize the storage overhead, FSAFlow may also 
exhibit false positives in coarse tracking granularity for arrays, 
lists, etc. 
Partially  support  for  multithreading:  FSAFlow  has  three 
phases:  program  static  analysis,  static  instrumentation,  and 
runtime control. FSAFlow's runtime control can handle multi-
threaded cases since it sets the path states as global variables that 
2121
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
FSAFlow continues to monitor the path in the loop stable 
period  to  avoid  misreporting.  For  a  repeatedly  executed  loop 
body, its execution in the loop stable period tends to be stable to 
maintain the final taint state in the previous propagation period. 
Table III in section V-A also shows that it is true in most cases. 
However, FSAFlow can track any path output by STA tools, by 
removing Rules 7 and 10 listed in Table I. 
Theorem 1 (Correctness) In a program Q, for any path p 
found by IFDS/FlowDroid, by only tracking in the forward and 
loop propagation period, FSAFlow can report p if, and only if, 
p occurs when Q is running. 
Proof: Assume that path p=s1->s2->s3…si*…sj*…sk->sm is 
judged by IFDS/FlowDroid as a leakage path, where s1 is the 
source node and sm is the sink node. The jump statement can be 
used as the split node to express p as a basic block sequence 
q=B1->B2->B3…>Bn. FSAFlow instrument a monitoring point 
MBi in ahead of each Bi and transforms Q into Q’. 
Before any Bi is executed, its MBi is executed first. Accord-
ing to the transition rules, if the preorder state is qi-1, the execu-
tion of MBi will update the state to qi. When the source statement 
is executed, the path is activated, and Q’ reaches the state q1 
from the initial state q0. Any state transition from qi to qi+1 in-
dicates that after Bi is executed, the code of Bi+1 is also subse-
quently  executed.  The  possibility  of  other  blocks  being  exe-
cuted during the transition from Bi to Bi+1 must be excluded. 
Assuming that there is an execution path Bi->E1->E2…->EX-> 
Bi+1, consider the following two cases. First, E1 occurs on the 
path q, and the position set of E1 on q is labelled as K={k | 
k≠i+1,Bk=E1}. Then, SNs of the monitoring point ME1 of E1 is 
equal to K. Before E1 is executed after Bi, ME1 is first executed. 
According to the rules, ME1 restores the path state to q0 since 
i+1∉SNs does not meet Rules 2-6, indicating that tracking of 
the current path is stopped. Therefore, when Bi->E1->E2…-> 
EX->Bi+1 is executed at qi, the state will not enter qi+1 from qi in 
the current path. Thus, this state transition in the current path 
can only occur if there is a direct execution from Bi to Bi+1. Sec-
ond, E1 is not a basic block on path q. Then, SNs of the moni-
toring point ME1 of E1 is {0}. If ME1 is executed, FSAFlow will 
restore the state to q0, and also stop tracking the current path. 
Hence, the state transitions from qi to qi+1 occur if and only if 
Bi+1 is executed immediately after Bi is executed. Furthermore, 
the generalized state transition q1->q2…, -> qn must be accom-
panied by the flow path B1->B2->B3…->Bn being established. 
Thus, the execution reaches qn state if and only if p occurs.    ■ 
B.  Complexity Analysis 
Theorem  2  (FSAFlow’s  tracking  and  control  runtime 
overhead) Given a program Q with E being the set of statements 
in Q. Assume u paths are monitored in Q and the average num-
ber of different branch nodes on a path is n and the average num-
ber of statements of a monitoring point is r. Then, the average 
overhead of FSAFlow’s runtime is nru/|E|. 
Proof: Given a  path  p,  according  to  the  FSAFlow  instru-
menting mechanism, the monitoring points can only be set at 
branch nodes. Additionally, the repeated branch nodes share a 
monitoring point. The execution frequency of a monitoring point 
depends on that of the corresponding branch statement. Assume 
that all statements in E are uniformly executed, and p has n dif-
ferent branch nodes. Then, the executed frequency ratio of all 
monitoring pointers of p is n/|E|. If the average execution state-
ment number of a monitoring point is r, the ratio of the average 
runtime overhead of monitoring p is nr/|E|. Extended to u paths, 
the ratio of FSAFlow’s runtime overhead is nru/|E|. 
The randomness of instruction execution for r must be con-
sidered. Most program execution does not follow a leakage path. 
Thus, when a monitoring point code is executed, it is most likely 
to be in an inactive state q0 [47]. For most monitoring points, the 
state transition from q0 to qi (i≠1) is not consistent with the rules, 
indicating that only the beginning code of the monitoring point 
is executed, and the subsequent complex judgment may not be 
executed. Many set-determination operations may be omitted in 
the loop stable period. Consequently, the actual amount of code 
executed at each monitoring point may be small. 
Concerning u, only the potential user paths that violate the 
relevant policies are monitored, rather than all information flow 
paths. According to the previous work on the analysis of actual 
software [9], in commercial systems, such leak paths are rare. 
As for n, the nodes on the path mainly consist of sequential 
statements  such  as  assignment,  moving,  and  calculation.  The 
number of branch statements of a path is usually considerably 
smaller than the path length. Besides, the path length is usually 
much smaller than |E|, thus n is far smaller than |E|. 
In summary, since nru/|E|1, which usually in-
creases by  an order of  magnitude  and  is  significantly higher 
than that of FSAFlow.                                                               ■ 
Theorem 3 (Termination of Algorithms 1 and 2) Algo-
rithms 1 and 2 can all always terminate. 
Proof: Algorithm 1 continues to extend G* to G^=(N^,E^), 
where N^= N*×String and E^={→ | (u, 
v)∈E*, dy∈fu(dx)}. Meanwhile, the PFSA records the key node 
sequence on the information flow path thus far, including the 
information  of  function  call  and  jump  statement.  Besides,  to 
achieve better efficiency, Algorithm 1 records and updates the 
path information while searching. 
In Algorithm 1, pathedge records the set of path edges that 
has been searched. As each extended edge is added, more varia-
bles will be infected. Meanwhile, each edge will be inserted into 
the list pathedge after the first extended analysis. Later, if the 
new extended edge is in the pathedge list, the task is already in-
dicated to have been executed. Then, to avoid repeated analysis, 
this analysis is stopped. With the extension of the edge, the num-
ber  of  infected  variables  increases  monotonically.  Since  the 
number of variables and the number of edges are both limited, 
the  upper  limit  is  that  all  variables  are  infected.  Therefore,  a 
graph search state exists where all new extended edge tasks have 
been executed, for Algorithm 1 to terminate. 
For a single-source information flow tracking, the worst case 
is to search all the extended edges and taint all the variables. In 
this case, the complexity of Algorithm 1 is O(|E||D|2), where E 
is the set of program statements and D is the set of program var-
iables. Considering the verification of the function repeat node, 
and  assuming  that  the  average  number  of  statements  in  the 
method is k, then the complexity of Algorithm 1 is O(k|E||D|2). 
Moreover, if the backward alias analysis is considered, the com-
plexity  of  Algorithm  1  is  O(k|E||D|4).  However,  the  extended 
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
2122
edge of calling a function is only propagated and analyzed once, 
because after it is first analyzed, the record is summarized into a 
hash table Summaryhash. When the same extension is encoun-
tered later, the function summary can be reused, making the ap-
proach highly efficient. Especially, at different call sites of the 
same method m, the summary function can be reused (gaining 
efficiency). 
Regarding the static instrumentation in Algorithm 2, a mul-
tilevel hash mapping table HashMappolic is exploited to classify 
and record all the paths, and these are processed hierarchically 
by methods. Based on this, the methods of each class are ana-
lyzed only once, saving the long preparation and delay in re-
peatedly accessing them. The corresponding monitoring point 
is inserted at each branch node to monitor the path state. Be-
cause the path length and path set are both limited, Algorithm 
2  can  terminate.  For  u  paths,  the  average  number  of  branch 
nodes of a path is denoted as v, then the complexity of Algo-
rithm 2 is O(uv), which mainly depends on the number of paths 
and the number of branch nodes.                                              ■ 
V.  EVALUATION 
This section reports on how FSAFlow’s function and per-
formance  were  evaluated.  Experiments  were  performed  on  a 
simulator. The host ran Windows 10, and was equipped with an 
Intel(R) Core (TM) i7-10710U CPU with 16.0 GB RAM. The 
simulator environment is a Pixel 2 smartphone with Android 
10.0, API 29.  
A.  Function Evaluation 
This function evaluation verifies whether the system cor-
rectly  prevents  the  release  of  prohibited  information  and  re-
leases authorized information. Conventional DTA may produce 
false negatives due to its low code coverage, while FSAFlow 
may exhibit false negatives due to its implementation limita-
tions  during  the  static  analysis  stage.  We  mainly  compared 
FSAFlow with TaintDroid, an important DTA tool, from the 
perspective  of  false  negatives.  Considering  that  FSAFlow  is 
based on FlowDroid, a well-known STA tool, FlowDroid was 
also chosen to mainly compare false positive rates because this 
is a common problem in STA. For the evaluations, implicit flow 
analysis was only enabled in FSAFlow and FlowDroid, since 
TaintDroid cannot support it. 
1) First, DroidBench 2.0 [57] was exploited to verify func-
tion  adaptability  in  mining  specific  information  flow  paths. 
DroidBench 2.0 is an open-source benchmark suite for compar-
ing Android taint-analysis functions. 
Since FlowDroid and TaintDroid can only perform analysis 
but not control, their test results  were judged by whether the 
given path can be found, while the test results of FSAFlow were 
judged by whether the given path can be intercepted at runtime. 
All 120 apps in DroidBench 2.0 were used and divided into 13 
categories.  FSAFlow/FlowDroid  defines  more  sources  than 
DroidBench, such as getLastKnownLocation, etc. To focus on 
function evaluations, the leakage paths brought by such sources 
are marked as positive cases. The test results are listed in Table 
II. 
There are 115 leakage paths among all the test cases. Both 
FlowDroid  and  FSAFlow  found  101  of  these  paths,  but 
FlowDroid  misreported 
eight  paths,  while  FSAFlow 
misreported five. The three paths that FlowDroid misreported 
TABLE II.  CORRECTNESS TEST RESULTS OF INFORMATION FLOW  
LEAK PATH DETECTION ON DROIDBENCH 2.0 
# 
leaks 
DroidBench 2.0 Category 
Aliasing (1) 
Arrays and Lists (7) 
Callbacks (15) 
Field and Object Sensitivity (7)  
Inter-App Communication (3) 
ICC (18) 
Lifecycle (17) 
General Java (23) 
Android-Specific (13) 
Implicit Flows (4) 
Reflection (4) 
Threading (5) 
Emulator Detection (3) 
Total 
Precision=TP/(TP+FP) 
Recall=TP/(TP+FN) 
FlowDroid TaintDroid  FSAFlow 
TP  FP  FN  TP  FP  FN  TP  FP  FN  
0  1  0  0  0  0  0  1  0 
0 
3 
3  4  0  3  4  0  3  4  0 
17  17  1  0  17  0  0  17  0  0 
2  0  0  2  3  0  2  0  0 
2 
3 
3  0  0  3  0  0  3  0  0 
19  17  0  2  17  0  2  17  0  2 
17  17  0  0  16  0  1  17  0  0 
20  18  2  2  19  0  1  18  0  2 
7  0  4  9  0  2  7  0  4 
11 
7  0  1  1  0  7  7  0  1 
8 
4 
1  0  3  4  0  0  1  0  3 
3  0  2  5  0  0  3  0  2 
5 
6 
6  0  0  4  0  2  6  0  0 
115  101  8  14  100  7  15  101  5  14 
95.28% 
87.83% 
TABLE III.  CORRECTNESS TEST RESULTS OF INFORMATION FLOW LEAK 
92.66% 
87.83% 
93.46% 
86.96% 
PATH DETECTION FOR THE LOOP STABLE PERIOD 
#Cases 
#Paths 
FlowDroid 
FP 
FN 
24 
20 
19 
31 
18 
40 
FSAFlow 
FP 
FN 
0 
0 
0 
1 
0 
2 
M  N  L  K 
5  3  7  1 
10  8  12  2 
15  17  18  3 
20 
20 
20 
20 
19 
18 
and FSAFlow did not misreport actually never occur in tests. 
These  are  Unregister1/Callbacks,  Exceptions3/General  Java, 
and  VirtualDispatch3/General  Java.  FlowDroid  does  not 
provide a more precise analysis of the codes in the unregistered-
again  callback,  the  non-occurring  exceptions,  and  the  never-
called factory method. The five paths misreported by FSAFlow 
involved a coarse-grained array or list tracking, and inaccurate 
backward alias analysis. To avoid incurring a significant storage 
overhead, all data items in an array or a list share the same taint 
tag, which caused four false positives.  
FlowDroid and FSAFlow missed 14 paths, mainly because 
some  special  codes  were  not  tracked,  including  propagating 
taints across interleavings of separate components (Singletons1/ 
ICC), ICC Handler constructs (ServiceCommunication1/I CC), 
static initialization method (StaticInitialization1/General java), 
formatter (StringFormatter1/General java), etc. 
TaintDroid adopts a coarse-grained tracking strategy similar 
to FlowDroid, and stores only one taint tag per array/list/ object 
to minimize the storage overhead. Thus, it misreported seven 
paths in the tests of Arrays, Lists, and object fields. It missed 15 
paths, seven of which were implicit flow paths. TaintDroid does 
not  track  control  flows  and  it  missed  seven  implicit  flows 
generated by the control-flow dependency in the ImplicitFlow 
1-4/ImplicitFlows  tests.  Instead,  FSAFlow/FlowDroid  tracks 
implicit  flow  generated  by  control  dependency.  Additionally, 
TaintDroid  cannot  track  taint  propagation  in  some  specific 
objects, such as Sharedreferences (SharedPreference-Changed1/ 
lifecycle), or for specific sources such as findViewById (Private 
DataLeak1-2/AndroidSpecific), etc. 
In short, FSAFlow achieved a recall of 87.83% and a preci-
sion of 95.28%. FlowDroid also achieved a recall of 87.83%, 
but only 92.66% for precision. TaintDroid achieved a recall of 
86.96% and a precision of 93.46%. 
2) The tracking ability  during the loop stable period was 
then  tested.  DroidBench  2.0  have  very  few  loop  structures. 
Therefore,  a  java  program,  GT,  was  written  to  produce  test 