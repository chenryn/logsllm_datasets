                }
               //********对ref发起JRMP请求**********
                var7 = new StreamRemoteCall(var6, this.ref.getObjID(), -1, var4);
               //处理结果
                Object var11;
                try {
                    ObjectOutput var10 = var7.getOutputStream();
                    this.marshalCustomCallData(var10);
                    var11 = var2.getParameterTypes();
                    for(int var12 = 0; var12 )`，这个readString进来的接口跟我们平时调用readObject不一样：
    //平时调用的
    public final Object readObject()
        throws IOException, ClassNotFoundException {
        return readObject(Object.class);//我们平常会进入此处
    }
`readObject(Object.class);`与`readObject(String.class);`
在`java.io.ObjectInputStream#readObject(type)`会进行一些无关竟要的操作然后传递type  
进入`java.io.ObjectInputStream#readObject0(type)`：
    //8u241时这里，type传入String
    private Object readObject0(Class type, boolean unshared) throws IOException {
        //...
        case TC_OBJECT://我们输入的payload对象是一个Object
            if (type == String.class) {
                //8u241 type=String 直接在此处报错不进行反序列化了
            throw new ClassCastException("Cannot cast an object to java.lang.String");
            }
            //之前的版本都是传入type=Object于是正常反序列化
            return checkResolve(readOrdinaryObject(unshared));
        //..
    }
所以在8u241中，如果参数应该是String的反序列化点就直接拒绝了Object的反序列化，杜绝了我们的上面的Gadgets。
### bind加上IP限制枷锁还可以用？
那么是不是所有地方都做了这种限制呢？其实也不是，重新看回`sun.rmi.registry.RegistryImpl_Skel#dispatch`:
    case 0:
         //bind操作，权限检查
         RegistryImpl.checkAccess("Registry.bind");
        try {
            var10 = (ObjectInputStream)var7.getInputStream();
            var8 = SharedSecrets.getJavaObjectInputStreamReadString().readString(var10);
            var81 = (Remote)var10.readObject();//这里还是正常的readObject
        } catch (IOException | ClassNotFoundException | ClassCastException var78) {
            var7.discardPendingRefs();
            throw new UnmarshalException("error unmarshalling arguments", var78);
        } finally {
            var7.releaseInputStream();
        }
发现bind中还是有可以反序列化的点的。但是这又回到了原来的问题：
bind由于`RegistryImpl.checkAccess("Registry.bind");`这句话在8u141之后有注册端地址校验限制，我们之前也是想要绕过8u141的限制所以转战lookup。（同时rebind也一样）
那么我们可不可以接受IP限制，假设场景：RMI服务器与RMI注册端分离，我们获取了一台对方内网的RMI服务器然后去利用RMI反序列化攻击RMI注册端，是否在8u241的版本下可行呢？
  1. 使用bind通讯
  2. 使用An Trinh的UnicastRemoteObject链
  3. 由于使用到UnicastRemoteObject对象这就需要修改bind的底层协议使UnicastRemoteObject对象内容不会被覆盖，这就需要修改bind通讯。（在 绕过序列化过程中的替换使所有类均可用于攻击 一节中提到）
选取ysomap作为poc构造工具，参考lookup重构一个bind协议：
`ysomap.core.exploit.rmi.component.Naming`
    public static Remote bind(Registry registry,String name, Object obj)
                throws Exception {
            //..一致
            java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) registry, operations, 0, interfaceHash);//修改为0，bind接口编号
            try {
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    //反射修改enableReplace，处理覆盖问题
                    ReflectionHelper.setFieldValue(out, "enableReplace", false);
                    out.writeObject(name);//随便写
                    out.writeObject(obj); // payload
                //..
        }
然后修改`ysomap.core.exploit.rmi.RMIRegistryExploit`里面`Naming.lookup(registry,
remote);`为`Naming.bind(registry, name,remote);`
尝试攻击8u241
华丽失败
### 8u241的修复第二处
好吧，肯定是哪里有问题，0day就这样没了（狗头）。
问题在于8u241还修复了调用栈中的`java.rmi.server.RemoteObjectInvocationHandler#invokeRemoteMethod`方法。（复用调用栈的图，第三行）
对比下8u231和8u241：
添加了一处针对传入method的验证。
这个的method是从`sun.rmi.transport.tcp.TCPEndpoint#newServerSocket`的
    ServerSocket var2 = ((RMIServerSocketFactory)var1).createServerSocket(this.listenPort);
由于动态代理特性过来的，method就是createServerSocket这个方法，然而它理所当然不是一个remote接口
    public interface RMIServerSocketFactory {
        public ServerSocket createServerSocket(int port)
            throws IOException;
    }
所以即使我们用bind绕过第一个修复，还是被第二个修复处给干掉了。
假如要硬趟着修复点过去，必须在UnicastRemoteObject的invoke的调用栈中，找到一个可控的同时方法还是remote的地方，再把它接到RemoteObjectInvocationHandler的invoke方法，从而满足这个修复点的验证。
太难，太难。
至此8u241之后针对RMI服务的反序列化攻击，就GG了......
## 小结&总结
针对利用JRMP反序列化绕过JEP290-bind：
  1. 反序列化打服务端，可以使用一个服务端不存在的类。在这个服务端不存在的类的变量中放入payload，这个payload会在服务端反序列化这个不存在的类的时候触发，虽然会报错，但是会触发。
  2. 指出了[bsmali4师傅的文](\[http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/\]\(http://www.codersec.net/2018/09/一次攻击内网rmi服务的深思/))中关于UnicastRemoteObject类不能用是因为ref属性为transient的错误。（在动态代理-RemoteObjectInvocationHandler一节中）
  3. 在利用JRMP反序列化绕过JEP290的Ysoserial的实现中，利用RemoteObjectInvocationHandler仍然使用动态代理是非必要的。
  4. 在利用JRMP反序列化绕过JEP290的Ysoserial的实现，利用服务端不存在的自定义的InvocationHandler是可行的。
针对利用JRMP反序列化绕过JEP290-lookup：
  1. 利用lookup，绕过了8u141的限制，从而真正完成了JEP290的版本绕过
来自An Trinh的另一种绕过JEP290的思路：
  1. 利用RemoteObjectInvocationHandler完全不同的触发点，绕过了8u231的修复，被8u241阻止了为所欲为。
最后总结：
## 参考
认真看了很多老哥的博客，先给全员点个赞：
写到一半的时候发现总体文章框架是跟[attacking-java-rmi-services-after-jep-290](https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/)雷同的，原来我想写的已经有人做过了，想想当作这篇文章详细版本好了，但是到后面发现还是发现了一些别人没有记录下来或没有细说的东西，比如自定义类，lookup绕过等。
在文章后半部分还大量参考了[0kami的研究结果](https://blog.0kami.cn/2020/02/06/rmi-registry-security-problem/)和[An Trinh的绕过方式](https://mogwailabs.de/blog/2020/02/an-trinhs-rmi-registry-bypass/)，膜拜。
此外[paper这篇](https://paper.seebug.org/1091/)在第三点RMI的动态加载、第四点JNDI注入都花了比较多的笔墨，但是在对于第二点RMI服务端的反序列化攻击中，讨论了
**RMI客户端--攻击-->RMI服务端**的情况，同时也是要求RMI服务端必须提供一个输入参数为Object的方法，客户端调用这个方法传入Object的payload。此外将RMI
**客户端--通过lookup攻击-- >RMI注册端**的情况点了一下（也就是我忽略了的注册端）。
[threedr3am第一篇](https://xz.aliyun.com/t/7079)讲述了JNDI注入、 **RMI服务端---通过bind攻击--RMI注册端** ，导致RMI注册端被RCE（此处他文章中的标题与讲述内容不符，应该是标题写错了），JRMP的客户端与服务端攻击。
[threedr3am第二篇](https://xz.aliyun.com/t/7264)细节分析了 **RMI客户端---通过lookup攻击--RMI注册端** （以及注册端回打客户端）、 **RMI服务端---通过bind攻击--RMI注册端** ，点了一下 **RMI客户端---通过替换参数攻击
--RMI服务端**
，重新分析了下JNDI注入关于Reference远程对象的细节（这里可能会出现误解，攻击场景是我们控制一个RMI服务端，我们要让RMI客户端（受害者）主动来`new
InitialContext().lookup`我们，这个lookup与RMI客户端查询RMI注册端的lookup不一样【前者的lookup=后者的lookup查询+会触发漏洞的解析过程】，最后导致客户端被RCE）、打注册端时在8u121之后的JDK存在黑名单，出现Yso-RMIClient、再是JNDI注入绕过。
[afanti的Bypass
JEP290攻击rmi](https://www.anquanke.com/post/id/200860)与[0c0c0f的RMI漏洞的另一种利用方式](https://mp.weixin.qq.com/s/TbaRFaAQlT25ASmdTK_UOg)实际都是讲述了客户端攻击服务端解析参数时绕过Object的方法
译文：