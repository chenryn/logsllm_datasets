duration: 120 s  
number of transactions actually processed: 1716069  
latency average = 7.830 ms  
latency stddev = 5.340 ms  
tps = 14255.242120 (including connections establishing)  
tps = 14258.960645 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.003  \set x random(73,135)    
         0.001  \set y random(3,53)    
         7.828  select * from ff(st_setsrid(st_makepoint(:x,:y),4326), 5000, 100) as t(id int, pos geometry, dist float8);  
```  
2、指定任意一个点，由近到远返回5公里内的1个点。  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 112  
number of threads: 112  
duration: 120 s  
number of transactions actually processed: 12802519  
latency average = 1.049 ms  
latency stddev = 0.948 ms  
tps = 106443.247555 (including connections establishing)  
tps = 106471.622064 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set x random(73,135)    
         0.001  \set y random(3,53)    
         1.048  select * from ff(st_setsrid(st_makepoint(:x,:y),4326), 5000, 1) as t(id int, pos geometry, dist float8);  
```  
3、指定任意一个点，由近到远返回附近的100个点。  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 112  
number of threads: 112  
duration: 120 s  
number of transactions actually processed: 4259777  
latency average = 3.154 ms  
latency stddev = 1.730 ms  
tps = 35485.626794 (including connections establishing)  
tps = 35493.479127 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set x random(73,135)    
         0.001  \set y random(3,53)   
         3.152  select *, st_distancespheroid(pos, st_setsrid(st_makepoint(:x,:y),4326), 'SPHEROID["WGS84",6378137,298.257223563]') as dist from t_pos order by pos  st_setsrid(st_makepoint(:x,:y),4326) limit 100;  
```  
4、指定任意一个点，由近到远返回附近的1个点。  
```       
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 112  
number of threads: 112  
duration: 120 s  
number of transactions actually processed: 16396606  
latency average = 0.819 ms  
latency stddev = 0.766 ms  
tps = 136561.188639 (including connections establishing)  
tps = 136600.851378 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set x random(73,135)    
         0.001  \set y random(3,53)   
         0.818  select *, st_distancespheroid(pos, st_setsrid(st_makepoint(:x,:y),4326), 'SPHEROID["WGS84",6378137,298.257223563]') as dist from t_pos order by pos  st_setsrid(st_makepoint(:x,:y),4326) limit 1;  
```         
#### TPS  
1、指定任意一个点，由近到远返回5公里内的100个点。  
```14258 ```  
2、指定任意一个点，由近到远返回附近的100个点。  
```35493 ```  
3、指定任意一个点，由近到远返回5公里内的1个点。  
```106471 ```  
4、指定任意一个点，由近到远返回附近的1个点。  
```136600 ```  
#### 平均响应时间    
1、指定任意一个点，由近到远返回5公里内的100个点。  
```7.830 毫秒```  
2、指定任意一个点，由近到远返回附近的100个点。  
```3.154 毫秒```  
3、指定任意一个点，由近到远返回5公里内的1个点。  
```1.049 毫秒```  
4、指定任意一个点，由近到远返回附近的1个点。  
```0.819 毫秒```  
## 参考              
[《PostgreSQL、Greenplum 应用案例宝典《如来神掌》 - 目录》](../201706/20170601_02.md)                
[《数据库选型之 - 大象十八摸 - 致 架构师、开发者》](../201702/20170209_01.md)                
[《PostgreSQL 使用 pgbench 测试 sysbench 相关case》](../201610/20161031_02.md)                
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)       
https://www.postgresql.org/docs/10/static/pgbench.html                
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")