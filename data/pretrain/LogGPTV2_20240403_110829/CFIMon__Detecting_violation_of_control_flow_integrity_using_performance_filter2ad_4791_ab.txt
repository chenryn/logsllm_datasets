start of a function, which could be obtained by statically
scanning the binary code of the application and the
libraries it uses.
A return instruction branches to an address popped
from the stack, which could only be determined during
runtime. Since a function maybe be invoked through
a function pointer, we cannot know exactly all of its
callers. Fortunately, we ﬁnds that in most cases, a return
follows a call instruction. Thus the target address of a
return has to be the one next to a call, which could also
be obtained by scanning the binary code. However, there
do exist several cases of “return-without-call”, which
will be discussed in Section 3.3.
We analyze the distribution of branches in binary and
at runtime. Table 1 presents the distribution of different
types of branches of Apache and the libraries it uses.
As shown in the ﬁgure, the indirect branch (including
indirect call/jump and return) takes up only 8.5% in
static binary, but 84.8% at runtime. However, among
all the executed indirect branches, 94.7% have only one
target address, 99.3% have less than or equal 2 target
addresses. There are only 0.1% of all 7736 branches (9
branches) have more than 10 different target addresses.
It indicates that the variation of an application’s control
ﬂow is limited. Thus, only a small number of rules
are needed to diagnose and analyze the branch trace
at runtime.
3.2. Monitoring All Branches at Runtime
To accurately and effectively identify an attack, CFI-
Mon needs precise information of every branch at run-
time for detection. As mentioned in section 2, there are
some mechanisms that can record each control transfer,
e.g. LBR and BTS, thus provide users with the ability
to trace back program execution ﬂow and ﬁnd how
attackers transfer control ﬂow to the malicious code.
However, since LBR uses a small register stack to store
the branch information, previous samples may be over-
written by upcoming samples during monitoring, and
the overwritten events cannot be detected. Thus, LBR
provides no opportunity to check the samples, which
makes this mechanism hard to be used in detecting
security attacks. On the other hand, BTS can precisely
record all control transfers into a predeﬁned buffer. An
interrupt will be delivered when the buffer is nearly full.
The monitor can then get the trace in a batch and do the
security check. Meanwhile, since the monitor can obtain
all the branch information of a running application, it
can not only detect security attacks, but also identify the
control ﬂow of the execution of malicious code, thus
help users locate the vulnerabilities.
3.3. Detecting CFI Violation
During the ofﬂine phase, CFIMon ﬁrst scans the
binary of application and dynamic libraries to get ret set
and call set. The ret set contains addresses of the
instructions next to each call. The call set contains
all addresses of the ﬁrst instruction of each function.
CFIMon gathers branch traces from training runs to get
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:22 UTC from IEEE Xplore.  Restrictions apply. 
the legal set of branch target for each indirect jump,
namely train sets.
There are several cases that the calling convention
may be violated, including setjmp/longjmp and Unix
signal handling. In the setjmp/longjmp situation, the
longjmp() will not return to its own caller, but return
to the caller of setjmp() instead, which is also a legal
return address. Hence, no false positive will occur. In
the case of Unix signal handling, when a signal has
been received, the OS will invoke the signal handler,
and push a return address on the stack. When the signal
handler returns, it will pop and branch to the address
as if it is invoked from there. Since an application may
be trapped into OS at any instruction, the address may
be any location in the memory space, thus violates the
rules of return. In order to eliminate such false positives,
we modify the OS to notify the monitor when a signal
handler is invoked. The monitor will then omit the alarm
when a signal handler returns.
 is direct call/jump
 is
return
 is 
indirect call
 is 
indirect jump
 in
ret_set ?
 in
call_set ?
 in
train_set ?
yes
no
yes
no
yes
no
 is unknown
Fig. 1. Rules in CFIMon
Legal
Legal
Illegal
Legal
Illegal
Legal
Suspicious
Illegal
Figure 1 shows the detail of diagnose module in
CFIMon. Any branch has one of three states: legal,
illegal or suspicious. For every branch sample,
the
diagnosis module ﬁrst handles special cases such as a
return from legal signal handler. Then, it switches into
different cases according to the type of source address,
and considers the state of branches depending on the
target address.
The train sets are obtained through training runs.
CFIMon collects branch traces of an application with
training input, and parses the trace to get the legal target
jump, namely train set.
addresses for each indirect
However,
the train set may not be complete since
there could be corner cases which are not covered.
Thus, during online checking, if a branch is not in the
train set, it is not considered as illegal but suspicious,
which will be delivered to the diagnose module to make
further decision.
Once the diagnose module discovers an illegal
branch, it will take serious actions such as suspending
the application and triggering an alarm immediately. For
suspicious branches, the diagnose module can make a
ﬂexible decision, depend on the pattern of the branches.
For example,
the diagnose module can maintain a
window of the states of recent n branches, and apply a
rule of tolerating at most m suspicious branches in the
recent n ones. The parameter m and n can be adjusted
by the users to make a balance between availability and
security, according to speciﬁc requirements of appli-
cation. Our current prototype adopts this slide-window
mechanism.
CFIMon also collects all suspicious branches at run-
time. If the suspicious branches are considered as corner
cases, the trace will be used as the input of online
training to further improve the accuracy of train set.
In order to make the training more accurate, machine
learning technologies can be adopted to analyze the
pattern of continues branches, which is our future work.
3.4. Case Studies of Real-World Exploits
In this section, we use three real-world examples of
the above mentioned attack types and show on how they
could be detected with our approach.
Code-injection Attack of Samba:
In this at-
tack, we exploits a heap overﬂow vulnerability in
the “lsa trans name” function to overwrite a function
pointer called “destructor” in Samba’s malloc header.
When a memory buffer is freed, the destructor will be
called, causing the control to be transferred into the
injected nop-sled 2, which eventually executes shell-
code. The shellcode will open a socket and listen to
tcp connections. Upon each connection, the shellcode
will provide attackers with a remote shell. The attack is
detected since the branches have never appeared in the
train set. The monitor detected such event and triggered
an alarm when the number of suspicious branches
exceeds the threshold.
There may be cases where code execution on stack is
legal, such as trampoline code on the stack for nested
functions in GCC and signal handling code in old
versions of Linux. Fortunately, recent Linux kernel has
abandoned the need of execution on stack for signal
handling. GCC generates trampoline code only when
an nested function address is referenced and the nested
function accesses variables from its outer closure, which
is a very rare case. Even if an application indeed use
code execution in data section, CFIMon can solve the
situation without false positive since the branches will
be in the train set.
2. nop-sled is a piece of code that is semantic equivalent to nops,
which is used to enlarge the chance of transferring to injected code.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:22 UTC from IEEE Xplore.  Restrictions apply. 
Return-to-libc Attack of GPSd: GPSd is a service
daemon that monitors GPSes or AIS receivers attached
to a host computer through serial or USB ports. It makes
all data on the location/course/velocity of the sensors
available to be queried on TCP port 2947 of the host
computer. We use GPSd of version 2.7, which has a
format string vulnerability in “gpsd report” function.
Attackers can overwrite arbitrary memory addresses
with arbitrary values. In our evaluation, we use this
format string vulnerability to overwrite the GOT entry of
“syslog” into “system” library routine address, and the
subsequent calls to “syslog” library routine will actually
invoke “system” with attacker-supplied arguments.
We evaluate CFIMon by detecting this return-to-libc
attack, according to our detection scheme. When the
“system” library routine appear in the branch target
address of the collected traces, CFIMon marks it and
the following branches as suspicious. The number of
suspicious branches quickly exceeds the threshold and
an alarm is triggered as expected.
Return-oriented Programming Attack of Squid:
We use Squid with version 2.5-STABLE1, which is a
widely-used proxy server. In Squid, the helper module
for ntlm authentication has a stack overﬂow bug in
its function “ntlm check auth”. Attackers can supply
arbitrary password of at most 300 bytes to smash the
stack. After the attack, the return value stored before
old %ebp is overwritten to the address of the ﬁrst
instruction of our return-oriented shellcode and the stack
is overwritten as the return addresses of return-oriented
shellcode, as shown in Figure 2. When the program gets
to execute “leave”, the stack pointer now points to our
injected return address stack. After the “ret” instruction
execution, control transfers to our shellcode ﬁnally.
We use CFIMon to detect this return-oriented pro-
gramming attack. When the malicious code executes the
ﬁrst “ret” instruction, the monitor ﬁnds that the target of
the “ret” is not an instruction next to a “call”. Since the
instruction is not a special case, e.g., signal handling,
CFIMon indicated it as an illegal return.
3.5. Discussions
False Alarms: As most attack detecting systems,
CFIMon might have false positives or false negatives.
For code-injection attacks, since the attack needs to
trigger abnormal control transfer to injected code. Thus,
CFIMon is able to detect code-injection attacks with-
out false negatives. However,
there may have some
false positives when detecting code-injection, besides
the trampoline and signal usage in stack or heap,
applications can still execute code on heap or stack,
including some self-modifying code, binary translators
or Java virtual machines. In such cases, CFIMon can
stack
.
.
.
ADDR7
ADDR6
ADDR5
ADDR4
ADDR3
ADDR2
ADDR1
old ebp
password
samples
(ntlm_check_auth)
5
R
D
D
A
ADDR4
ADDR1
ADDR2
ADDR3
ret
insn4
ret
insn1
ret
insn2
ret
insn3
ret
Inst1->inst2->inst3->inst4->...
Fig. 2. An example return-oriented programming
attack of Squid.
learn application-speciﬁc knowledge to ﬁlter such false
positives.
For code-reuse attacks, CFIMon needs to prepro-
cess binaries and use training to collect legal sets of
branches. Consequently, if there is imprecision during
the preprocessing, CFIMon might have some false pos-
itives or false negatives. However, CFIMon is able to
learn from the program execution to minimize false
alarms.
Informed Attackers: Attackers knowing the mech-
anisms in CFIMon can still hardly bypass CFIMon.
First, an attacker can leverage the detection latency.
Since CFIMon is triggered when the buffer is full or a
sensitive system call is made, there’s latency from attack
starting. An attacker may carefully construct malicious
code with few or even no branches. When such code is
running, it delays the detection.
Second, an attacker can leverage the slide-window
size. If the attack code is constructed in the form of loop
of “few abnormal-branches + many normal-branches”,
it may use normal-branches to ﬁll the slide-window and
not trigger alert.
We argue that both attacks are hard to construct that
increases the cost of attacking. Meanwhile, in the ﬁrst
case, one can make a tradeoff between the security level
and performance by setting the buffer size. In the second
case, one can balance between the security level and
false-positive rate by setting the slide-window size.
For example, for attackers exploiting return-oriented
programming, they now have to choose a consecutive
number of unusual branch sequences not covered in
the train sets, which, unfortunately, are very rare in
reality. Further, once the number of suspicious branch
instructions increase to a threshold, CFIMon will report
an alarm. The memory buffer used by BTS is also pro-
tected by CFIMon. If an attacker aims to compromise
the memory buffer, there’ll be abnormal branches too.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:49:22 UTC from IEEE Xplore.  Restrictions apply. 
4. Implementation of CFIMon
We have implemented CFIMon based on perf events on
Linux kernel version 2.6.34, which is a uniﬁed kernel
extension in Linux for user-level performance monitor-
ing. Currently, CFIMon supports Intel Core Duo, Core
i5 and i7 processors and focuses on user-level attacks
only.
Control Flow
Data Flow
Parent Process
CFIMon
Ret
Sets
Call
Sets
Train
Set
Child Process
Diagnose Module
Application
Control
Module
Trace
Buffer
OS
Trace
Buffer
Core 0
BTS
Core 1
Fig. 3. Architecture of CFIMon.
Figure 3 presents the overall architecture of CFIMon.
There are two components of CFIMon: a kernel ex-
tension and a user-level tool. The kernel extension is
responsible to operate the performance samples, monitor
signals, and provide the interfaces to user-level tool.
The user-level tool has two modules: diagnose module
and control module. The diagnose module uses branch
traces, call set, ret set and train sets as inputs to check
the control ﬂow integrity, and receives information
from the OS to solve special cases such as signal
handling. The control module is in charge of initializing
the environment, launching and synchronizing with an
application.
The user-level tool is executed as a monitoring pro-
cess, which is the parent process of the application
processes. It uses ptrace to synchronize with the ap-
plication processes. When launching an application, the
monitoring process forks a child process. The child pro-
cess ﬁrst calls ptrace with the ﬂag PTRACE TRACEME
on. Thus, when making the exec system call, it will be
suspended by the OS and its parent process gets to run.
Since the addresses in call set and ret set are obtained
from the binary ﬁle of application and dynamic libraries,
they are in the form of relative address. Thus the parent
process will get the memory mapping information of