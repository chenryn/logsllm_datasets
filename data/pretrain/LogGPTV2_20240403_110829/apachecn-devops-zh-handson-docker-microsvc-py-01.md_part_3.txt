如您所见，整块似乎遵循模型视图控制器结构([https://www.codecademy.com/articles/mvc](https://www.codecademy.com/articles/mvc)):
Django uses a structure called Model Template View, which follows a similar pattern to the MVC one. Read the article at [https://medium.com/shecodeafrica/understanding-the-mvc-pattern-in-django-edda05b9f43f](https://medium.com/shecodeafrica/understanding-the-mvc-pattern-in-django-edda05b9f43f) for more information. Whether it's 100% MCV or not is debatable. Let's not get stuck on semantics, but use the definition as a starting point to describe the system.
*   有三个实体存储在数据库中，并通过模型访问:用户、想法和会话模型。会话用于跟踪登录。
*   用户可以通过`login.py`中的代码登录和退出来访问网站。如果用户登录，将创建一个会话，允许用户查看网站的其余部分。
Please note that the handling of authentication and passwords in this example is for demonstration purposes only. Use the default mechanisms in Django for more secure access. It's the same for the session, where the native session management is not used.
*   用户可以看到自己的想法。在同一页，有一个新的形式，创造了一个新的想法。这由`thoughts.py`文件处理，该文件通过`ThoughtModel`检索并存储思想。
*   为了搜索其他用户的想法，有一个搜索栏连接到`search.py`模块，并返回获得的值。
*   HTML 通过`login.html`、`search.html`、`list_thoughts.html`和`base.html`模板呈现。
*   除此之外，网站还有静态资产。
这个例子非常简单，但是我们能够看到一些相互依赖的关系:
*   静态数据非常孤立。它可以在任何时候进行更改，而不需要在其他任何地方进行任何更改(只要模板与 Bootstrap 兼容)。
*   搜索功能与列出想法密切相关。模板相似，信息的显示方式也相同。
*   登录和注销不与`ThoughtModel` *交互。*他们编辑会话，但应用的其余部分只读取那里的信息。
*   `base.html`模板生成顶栏，用于所有页面。
分析之后，我想到了一些关于如何进行的想法:
1.  就让它保持原样，投资构建它，但不要把它分成几个服务。它已经有了一定的结构，虽然有些部分还可以改进。例如，处理用户是否登录可能会更好。这显然是一个小例子，在现实生活中，将其拆分成微服务会有很大的开销。请记住，坚持一个整体可能是一个可行的策略，但如果你这样做了，请投入时间清理代码和支付技术债务。
2.  寻找想法是非常基本的。此刻，我们直接搜索数据库。如果有数百万个想法，这将不是一个可行的选择。`search.py`中的代码可以调用特定的搜索微服务，由搜索引擎支持，如 Solr([https://lucene.apache.org/solr/](https://lucene.apache.org/solr/))或 elastic search([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch))。这将扩大搜索范围，并可增加诸如在日期之间搜索或显示匹配文本等功能。搜索也是只读的，因此将创建新想法的呼叫从搜索它们的呼叫中分离出来可能是个好主意。
3.  认证也是一个不同于读写思维的问题。拆分它将使我们能够跟踪新的安全问题，并有一个专门处理这些问题的团队。从应用其余部分的角度来看，它只要求您有一些可用的东西来检查用户是否登录，并且可以在模块或包中进行委托。
4.  目前前端相当稳定。也许我们想创建一个单页应用，调用一个后端应用编程接口来呈现客户端的前端。为此，需要创建一个能够返回用于思考和搜索的元素的 RESTful API 微服务。前端可以用 JavaScript 框架编码，比如 Angular([https://Angular . io](https://angular.io))或者 React([https://reactjs.org/](https://reactjs.org/))。在这种情况下，新的微服务将是前端，它将作为静态的预编译代码，并将从后端获取。
5.  RESTful 应用编程接口后端也将允许外部开发人员在 MyThoughts 数据的基础上创建自己的工具，例如，创建一个本地手机应用。
这些只是一些想法，需要讨论和评估。你的单体应用有哪些具体的痛点？路线图和战略未来是什么？现在或未来最重要的点和特点是什么？也许，对于一家公司来说，拥有强大的安全性是优先事项，第 3 点至关重要，但对于另一家公司来说，第 5 点可能是与合作伙伴合作的扩展模式的一部分。
团队的结构也很重要。第 4 点将需要一个具有良好前端和 JavaScript 技能的团队，而第 2 点可能涉及后端优化和数据库工作，以允许高效搜索数百万条记录。
Do not jump too quickly to conclusions here; think about what capacity is viable and what your teams can achieve. As we discussed before, the change to microservices requires a certain way of working. Check with the people involved for their feedback and suggestions.
经过一些考虑，对于我们的示例，我们提出了以下潜在的体系结构:
![](img/e0b5fd45-46bf-49e7-ac45-ecfe9c6daca7.png)
该系统将分为以下模块:
1.  **用户后端:**这将负责所有认证任务，并保存用户的相关信息。它会将其数据存储在数据库中。
2.  **思想后端:**这将创建并存储*思想*。
3.  **搜索后端**:这将允许搜索*的想法*。
4.  将任何请求路由到适当后端的代理。这需要外部访问。
5.  **HTML 前端:**这将复制当前的功能。这将确保我们以向后兼容的方式工作，并确保过渡能够顺利进行。
6.  允许客户端访问后端将允许创建除我们的 HTML 前端之外的其他客户端。将创建一个动态前端服务器，并与一家外部公司就创建一个移动应用进行谈判。
7.  **静态资产:**能够处理静态文件的网络服务器。这将为 HTML 前端提供样式，为动态前端提供索引文件和 JavaScript 文件。
这种架构需要适应现实生活中的使用；为了验证它，我们需要测量现有的使用情况。
# 通过测量使用情况进行准备和调整
显然，任何现实世界的系统都会比我们的例子更复杂。代码分析仅仅通过仔细查看就能发现的东西是有限度的，而且计划在与现实世界的接触中往往无法存活。
任何部门都需要得到验证，以确保它会有预期的结果，并且努力是值得的。因此，请仔细检查系统是否按照您认为的方式工作。
了解实时系统如何工作的能力被称为**可观测性**。它的主要工具是度量和日志。您会发现的问题是，它们通常会被配置为反映外部请求，而不会给出关于内部模块的信息。我们将在 [第 10 章](10.html)*监控日志和指标*中深入讨论系统的可观测性。您可以参考它了解更多信息，并在此阶段应用那里描述的技术。
If your system is a web service, by default, it will have activated its access log. This will log each HTTP request that comes into the system and store the URL, result, and time when it happens. Check with your team where these logs are located, as they will provide good information on what URLs are being called.
然而，这种分析可能只给出关于被调用的外部端点是什么的信息，但不会说太多关于根据我们的计划将被分成不同微服务的内部模块的信息。请记住，迁移到微服务的长期成功最重要的因素是允许团队独立。如果您在不断需要统一更改的模块之间进行划分，部署就不会真正独立，并且在过渡之后，您将被迫使用两个紧密耦合的服务。
Be careful, in particular, about making a microservice that's a dependency for every other service. Unless the service is extremely stable, that will make frequent updates likely when any other service requires a new feature.
为了验证新的微服务不会紧密耦合，让团队意识到这些划分，以及他们必须多久改变一次围绕它们的接口。监控这些变化几周，以确保分割线是稳定的，不需要不断变化。如果微服务之间的接口被非常积极地改变，任何特性都需要在几个服务中进行多次改变，这将减缓交付新特性的速度。
在我们的示例中，在分析了建议的体系结构后，我们决定简化设计，如下图所示:
![](img/82ea1d40-9fc8-4d9a-8452-84332c3e2780.png)
在监控和与团队讨论后，已经决定了一些变更:
1.  这些团队对 JavaScript 动态编程没有很好的了解。在转向微服务的同时，对前端的改变被认为风险太大。
2.  另一方面，外部移动应用被视为公司的一项战略举措，使外部可访问的应用编程接口成为一项可取的举措。
3.  分析日志，似乎不经常使用搜索功能。搜索数量的增长很小，将搜索分成自己的服务需要与思想后端协调，因为这是一个积极发展的领域，并增加了新的领域。决定在思想后端下继续搜索，因为两者都使用相同的思想。
4.  用户后端受到了好评。它将允许通过明确谁负责修补安全漏洞和改进服务来提高认证的安全性。其余的微服务必须独立工作，由用户后端进行验证，这意味着负责这个微服务的团队需要创建和维护一个包，其中包含如何验证请求的信息。
一旦我们决定了最终状态，我们仍然必须决定如何从一个状态转移到另一个状态。
# 打破整体的战略规划
正如我们之前所讨论的，从初始状态到期望状态将是一个缓慢的过程。不仅因为它涉及到新的做事方式，还因为它将与“一切照旧”的其他特性和开发并行发生。实事求是，公司的经营活动不会停止。这就是为什么应该有一个计划来允许一个州和另一个州之间的平稳过渡。
This is known as the **strangler pattern** ([https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler](https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler))—replacing parts of a system gradually until the old system is "strangled" and can be removed safely.
对于采取何种技术方法进行迁移以及如何划分每个元素以迁移到新系统，有几种选择:
*   替换方法，用新服务从头开始编写的新代码替换旧代码
*   divide 方法，即挑选现有代码并将其移入自己的新服务中
*   两者的结合
让我们更好地看看他们。
# 替代方法
服务被大块替换，只考虑它们的外部接口或影响。这种黑盒方法用从头开始的替代方法完全取代了现有的功能编码。一旦新代码准备好了，它就会被激活，旧系统中的功能就会被弃用。