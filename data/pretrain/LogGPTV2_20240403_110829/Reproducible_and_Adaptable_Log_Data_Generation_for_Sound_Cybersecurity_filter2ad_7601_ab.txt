to analyze cause-effect relationships [39]. It is also a prerequisite
for reproducibility, which allows other researchers to obtain similar
results under different conditions (e.g., same testbed, different host).
Available. Lastly, for an experiment to be reproducible by other
researchers, the used artifacts must be made (freely) available to
them, either as a dataset or as a testbed that allows to reproduce
the artifacts on own hardware.
3.3 Testbeds for Artifact Generation
In Section 2, we argued that artifacts collected from productive
systems or networks usually do not allow for controlled and repro-
ducible experiments and thus, dedicated testbeds are an essential
means to create artifacts for sound experiments. In the following,
we present five principal properties that a testbed for artifact gener-
ation should possess to fulfill the previously described properties
of artifacts for sound experiments (cf. Figure 1).
Real-World Scenario. Carefully recreating a real-world scenario
in a testbed is vital for the generation of realistic artifacts [55]. For
example, experiments analyzing intrusions of enterprise networks
require a testbed scenario with realistic topology (network zones
etc.), assets (operating systems, services, etc.), and activity (benign
user activity, cyberattacks, etc.).
Deterministic Activity. Any activity in the testbed should be per-
formed in a deterministic way to ensure transparent and replicable
artifacts. For example, attacks should be scripted instead of per-
formed manually. If stochastic activity is required (e.g., to train
anomaly detection systems), it should be pseudo-random with a
configurable seed, thus making it replicable.
Open Source. Providing a testbed as open-source software has
multiple advantages: (1) Artifact generation becomes transparent
for other researchers, enabling a detailed analysis of why/how cer-
tain artifacts are created, (2) artifact generation becomes adaptable
for others so that they can build on previous work, and (3) log
data generated by open-source testbeds are usually not affected by
privacy or confidentiality concerns, improving their availability.
Commodity Hardware. Some testbeds build on multiple physical
systems and/or specialized hardware such as proprietary traffic
generators [10, 13], making them costly to reproduce for other
researchers. It is therefore beneficial if a testbed can be run on
commodity hardware (i.e., common desktop, notebook, or server
computers) to aid transparency (because others can re-run a sce-
nario and better understand the generated artifacts) and adaptability
(because adapted versions can be run on own hardware).
Self-Tests. Testbeds are complex and consist of multiple inter-
dependent components, making their installation and operation
prone to errors. A testbed should therefore provide self-tests to
verify that all components function correctly after installation. Self-
tests improve replicability of artifacts because potential errors can
be found and fixed. They also aid adaptability because changes that
break existing functionality can be identified [3].
We would like to note that a complete fulfillment of all desired
properties might not be possible. Some goals might even contradict
each other, e.g., perfect replicability can impede realism because
Internet connectivity must be disabled to avoid non-deterministic
network traffic such as software updates. It is thus the duty of an
experiment designer to find appropriate trade-offs during artifact
generation to facilitate sound experiments.
In the following section, we analyze existing testbeds and show
that all of them have major flaws with regard to the presented
requirements, thus impeding their utility for the generation of log
data for sound cybersecurity experiments.
693Reproducible and Adaptable Log Data Generation for Sound Cybersecurity Experiments
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 1: Our analysis of existing testbeds from related work
identifies substantial gaps in meeting the requirements for
sound log data generation.
R eal- W orld Sce n ario
D eter m inistic
O p e n S o urce
C o m
H
W
m o dity
Self-T ests
Testbed name or author
LARIAT [51]
National Cyber Range [13]
CyberVAN [10]
ViSe [50]
DETERLab [5]
ATT&CK Evaluations [63]
DetectionLab [31]
SimuLand [37]
Skopik et al. [57]
Landauer et al. [27]
SOCBED (this paper)
Requirement fulfilled:
yes
partially
no
not discussed
4 ANALYSIS OF RELATED WORK
Different streams of related work address the challenge of gener-
ating meaningful and adaptable artifacts for cybersecurity experi-
ments. As artifacts collected from productive systems or networks
typically cannot be made publicly available due to confidentiality or
privacy concerns and are inherently non-replicable (cf. Section 2),
dedicated testbeds are the predominant approach to create such
artifacts. Testbeds for artifact generation can be classified into three
categories [12]: An (1) overlay simulates or emulates desired func-
tionality (e.g., cyberattacks) on top of an existing, usually produc-
tive network, a (2) simulation employs an abstracted model instead
of real networks or machines, and an (3) emulation makes use of
full-featured (i.e., virtualized or physical) systems.
Considering our requirements for testbeds for artifact genera-
tion underlying sound cybersecurity experiments (cf. Section 3.3),
we require testbeds to be implemented with deterministic activity.
Thus, overlay testbeds, which are realized on top of uncontrollable
networks do not fit our requirements. Likewise, simulations are not
well-suited for generating sound artifacts, as, due to abstraction,
they cannot generate realistic log data in the same way as complex,
real software such as operating systems. Consequently, we focus
our analysis of related work on testbeds relying on emulation. We
provide an overview of our analysis in Table 1.
LARIAT [51] extends the testbed of the well-known DARPA 1998
and 1999 intrusion detection evaluations [30] and offers sophisti-
cated adversary and user emulation. However, a proprietary traffic
generator and its use of physical machines prohibit the free gen-
eration of datasets with commodity hardware by others. Likewise,
the National Cyber Range [13], an effort of DARPA to build a large-
scale, diverse physical testbed for cybersecurity testing, consists
of only one instance and access is restricted. CyberVAN [10] is a
complex testbed including user emulation, but relies on commercial
components and is only accessible to selected entities. Since attacks
are performed manually, the testbed also lacks determinism.
ViSe [50] is a testbed based on virtual machines (VMs) and fo-
cuses on the forensic analysis of exploits against common operating
systems. It lacks multi-step attacks and user emulation, thus provid-
ing only limited realism. DETERLab [5] is a cybersecurity testbed
provided as a web service. Registered researchers can create and
run experiments remotely with choosable topology, nodes, and
user/adversary emulation. The code for the testbed is not publicly
available, it does not run on commodity hardware, and it does not
provide self-tests.
MITRE ATT&CK Evaluations [63] assess cybersecurity products
on a yearly basis utilizing a network environment that consists
of Microsoft Windows VMs provided by Microsoft Azure. Rough
information on how the environment was build is publicly available,
but not sufficiently detailed to completely reproduce the performed
experiments. Furthermore, a lack of user emulation impairs real-
ism. DetectionLab [31] is a testbed for Windows domain logging,
focusing on a quick setup with security tooling and best-practice
logging. It does not implement a benign user emulation and also
lacks deterministic activity. SimuLand [37] is a recent open-source
approach for deploying lab environments with attacks and detec-
tion mechanisms in place. Although deployment instructions and
scripts are freely available, a commercial license is needed to de-
ploy the labs to Azure. Furthermore, there is no automation for
benign or malicious activity, which contradicts the requirement of
determinism for generated artifacts.
Skopik et al. [57] focus on realistic emulation of users interacting
with an exemplary web application. They mix generated legitimate
activity with manually performed cyberattacks to attain more re-
alistic log data. However, the system’s source code is not publicly
available and no self-tests are included. Finally, Landauer et al. [27]
introduce the concept of a model-driven testbed generator, together
with an implementation for web applications. They do provide a
dataset created using the testbed, but neither the testbed nor its
generator are publicly available, and hence, our requirements are
not met. Furthermore, deterministic activity in dataset generation
is briefly discussed, but not evaluated.
Our analysis shows that existing testbeds only insufficiently
fulfill the requirements for artifact generation, especially w.r.t. the
generation of log data: While several testbeds emulate real-world
scenarios and provide scripted/deterministic activity, none of them
are designed with a focus on reproducibility and adaptability, i.e.,
none is available as open source software to other researchers, runs
on commodity hardware, and provides features to ease reproduction
and extension such as infrastructure as code and self-tests.
If the primary goal of a testbed is to generate network traffic
instead of log data, there are approaches that fulfill at least most
of our criteria for artifact generation: Handigol et al. [18] exam-
ine the reproducibility of networking experiments with a focus
on container-based emulation. Wright et al. [72] discuss general
requirements for reproducible realistic user emulation and present
a model of users interacting with a graphical interface. Notable
simulators with a focus on network cybersecurity and especially
attack simulation include ADVISE [29], NeSSi2 [17], and MASS [41].
However, the high level of realism and detail required for gener-
ating meaningful cybersecurity log data artifacts paired with the
inherent need of reproducibility and adaptability necessitates a
testbed specifically designed for these purposes.
694ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Rafael Uetz, Christian Hemminghaus, Louis Hackländer, Philipp Schlipper, and Martin Henze
network (Client, Internal Server, Log Server, Company Router, and
DMZ Server) and are placed inside an internal network zone and a
demilitarized zone (DMZ). The other two types (Attacker and In-
ternet Router) reside outside the company network. Client systems
can be duplicated automatically as needed and simulate benign
user activity such as browsing the Internet and exchanging mails.
The Attacker system allows to run multi-step attacks that target
company network systems and incorporate lateral movement, e.g.,
phishing a Client to visit a malicious website, escalating privileges
on their machine, and exfiltrating sensible documents from another
Client using that expanded access. A dedicated Log Server system
collects, processes, and stores log data from all relevant sources
within the company network. Generated log datasets can be ana-
lyzed directly on the Log Server using state-of-the-art visualization
tools such as Kibana or exported for persistent offline use.
5.2 Testbed Infrastructure
In general, a testbed can be realized using different types of in-
frastructure such as physical machines, virtual machines (VMs), or
containers. For our proof-of-concept implementation of SOCBED,
we specifically decided to use VMs for the following reasons: Physi-
cal machines are costly to operate and duplicate, which contradicts
reproducibility. Containers do not allow access to the underlying
operating system for the purpose of attack execution (e.g., kernel ex-
ploits) and log data collection, hence impeding realism. In contrast,
VMs are easy to operate and duplicate, as well as able to produce
realistic log data on operating system level. Furthermore, setup and
control of VMs is comparatively simple, making it possible to scale
the underlying network for experimentation needs.
When building a VM-based testbed, VMs can be either self-
hosted (i.e., on own hardware) or provided as a cloud service (such
as Microsoft Azure). The latter option has potential drawbacks on
the reproducibility of experiments as the service provider might
make changes to VMs or periphery (e.g., unavailability of older
OS versions). Additionally, such services are usually charged, con-
tradicting our goal of reproducibility for as many researchers as
possible. According to our requirements, we chose to implement
SOCBED’s infrastructure using the open-source hypervisor Virtual-
Box. The minimum host system requirements for basic experiments
using SOCBED’s base systems and network topology (cf. Section 5.1)
are 16 GB of RAM, 30 GB of SSD space, and a multi-core CPU with
hardware-assisted virtualization. These rather modest requirements
make it possible to run SOCBED even on most modern laptops,
thus enabling a majority of researchers and students to use it.
5.3 Log Data Generation
To adequately generate log data as found in a real company net-
work under attack, SOCBED needs to implement common assets
such as operating systems, services, and applications as well as an
emulation of the activities of benign users and an adversary.
Realistic Assets. To ensure a high degree of realism, systems in
SOCBED utilize operating systems, services, and applications as
typically used in company networks. We chose to let the client
systems run Windows, as it is the most common operating system
for desktop and notebook computers in company networks [44]. All
other systems run Linux, which is a common choice for servers and
Figure 2: SOCBED emulates a small company network in-
cluding benign user activity as well as multi-step cyberat-
tacks in a reproducible and adaptable manner to facilitate
sound log data generation.
5 SOCBED: REPRODUCIBLE AND
ADAPTABLE LOG DATA GENERATION
To address the pressing need for a testbed particularly targeting
the generation of reproducible and adaptable log data as founda-
tion for sound cybersecurity experiments, we present the design
and implementation of SOCBED, our Self-contained Open-source
Cyberattack experimentation testBED. The focus of SOCBED lies
on the generation of sound log datasets for intrusion detection re-
search, i.e., log data that are realistic, transparent, adaptable, replica-
ble, and publicly available. To this end, SOCBED emulates a typical
company network including benign user activity and an adversary
acting from the Internet or inside the company’s infrastructure.
As such, SOCBED is the first proof-of-concept testbed with the
goal of fostering reproducible and adaptable log data generation,
thus allowing researchers to reuse or adapt existing scenarios for
novel experiments to achieve better comparability of results and
avoid the unnecessary effort of building new testbeds from scratch.
Most importantly, SOCBED thereby lays the foundation for long-
ranging, usable log datasets fostering sound cybersecurity research
by allowing frequent updates and modifications through various
groups of researchers. In the following, we describe in more detail
SOCBED’s emulated company network (Section 5.1), infrastructure
(Section 5.2), generation of log data (Section 5.3), and measures im-
plemented to ensure reproducibility and adaptability (Section 5.4).
5.1 Systems and Network Topology
SOCBED’s network topology, resembling a typical company net-
work, is built of seven different types of base systems, as depicted
in Figure 2. Five of those system types mimic a small company
InternetNetwork Zone"Internet"Network Zone "DMZ"Network Zone "Internal"AttackerInternetRouterDMZ ServerInternal ServerClient 1-N (running user emulation)Log Server. . .Company Router695Reproducible and Adaptable Log Data Generation for Sound Cybersecurity Experiments
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
results in a smaller memory footprint of SOCBED as compared to
Windows. The servers run common services such as a web server,
mail server, and domain controller. A detailed listing of operating
systems, services, and their purpose is shown in Appendix A.
User Emulation. Client systems run a user emulation to generate
a “noise floor” of benign activity in the log data. The user emulation
is implemented as an agent running on all clients, which executes
individual modules concurrently. Its actions are logged locally. To
this end, we implemented modules for web surfing, exchanging
emails, and manipulating files. The implementation of the mod-
ules is based on configurable, seeded finite-state machines, which
facilitates deterministic activity (detailed in Section 5.4).
We chose to implement web and email as they are by far the
most frequent delivery methods for malware [70]. The web surf-
ing module alternates periods of active web browsing sessions
and prolonged periods of inactivity. A Firefox browser window
is opened at the start of each session and closed afterwards. It is
remote-controlled using the Selenium framework. During a session,
so-called routines are executed until the session is over. Each routine
starts with either performing a web search on Google or opening
a known web page directly. The search terms and web pages are
chosen from configurable lists. When the web page has loaded,
random links on the web page are followed with random delays in
between. Relevant parameters and distributions are modeled after
published statistics of real users’ web surfing activity [46].
For the emailing module, each client has an account on the mail
server, which is running on the DMZ Server VM. The inbox is regu-
larly checked by the module. If a received email contains hyperlinks
or attachments, they are opened automatically, facilitating phishing
attacks. Emails are also created and sent randomly by the module.
The recipient is either another client or an external address, which
replies to each incoming email with a slightly modified message.
File manipulation was implemented to increase the volume and
variety of endpoint log data. This module simulates basic file activity
in a specified folder. Per iteration, a random filename and action
(create, delete, append, read, move, and copy) are executed.
Supplementary custom user activity modules, e.g., videoconfer-
encing emulation, can be added using a Python interface. Depending
on the specific use case, the implemented user activity can also be
exchanged by a more sophisticated, but possibly less deterministic
software such as DETERLab’s DASH [5, 26].
Adversary Emulation. To replicate realistic attacks on company
networks, SOCBED allows to run multi-step attacks that comprise
entire kill chains [22], e.g., from a phishing email up to the exfiltra-
tion of confidential data. The attack steps are implemented using
common security tools (e.g., Metasploit, mimikatz, sqlmap) as well
as benign tools or commands often employed by adversaries (e.g.,
PowerShell, xcopy, reg). To choose an initial set of attack steps, we
sighted publications on tactics, techniques, and procedures used
by adversaries in successful network breaches, including academic
research [7, 19, 73], reports focusing on breach statistics [34, 61, 70],
and reports on Advanced Persistent Threat campaigns [16, 23, 54] as
well as the MITRE ATT&CK Enterprise tactics and techniques [64].
Currently implemented attack steps cover at least one attack step
for each tactic of the ATT&CK Matrix for Enterprise [64]. A full
list of implemented attack steps is shown in Appendix B.
Figure 3: SOCBED can generate and execute pseudo-random
multi-step cyberattacks from the implemented attack steps
using a customizable digraph that models prerequisites.
SOCBED is self-contained in the sense that all cyberattacks (as
well as benign activity) are fitted to the simulated company net-
work, which is a significant advantage over stand-alone adversary
emulation tools such as CALDERA [1], which are not fitted to a
specific environment and thus are either restricted to rather simple
post-exploitation steps (e.g., running local PowerShell commands)
or require a lot of initial configuration to work.
As in reality, some attack steps can only execute successfully
if prerequisite attack steps were executed against the same target
beforehand. In particular, there are several attack steps that use
a command-and-control (C2) channel, which first has to be estab-
lished by initial attack steps. We model these dependencies with a
digraph (see Figure 3) and allow to pseudo-randomly generate valid
attack chains as an alternative to fixed, scripted attacks. Analogue
to the user emulation, generated attack chains solely depend on a
configurable seed and are hence replicable (detailed in Section 5.4).
Cyberattacks in the real world change over time and observed
campaigns reveal new attack techniques. Therefore, SOCBED’s
modular adversary emulation can be adjusted to recreate different
attack chains and be extended by new atomic attack steps, so-called
attack modules, using a simple Python interface. Consequently,
SOCBED can be used for both external and internal adversary
models although the main focus of currently implemented modules
lies on an attacker operating from the Internet.
Logging. The main purpose of adversary and user emulation
in SOCBED is to generate realistic log data that can be used for
intrusion detection research. We therefore chose log data sources
and their configuration according to best practices in productive
company networks [2, 11, 24]. Consequently, log data are collected
from operating systems, services, and dedicated security software
as depicted in Figure 4. The Windows clients can be configured to