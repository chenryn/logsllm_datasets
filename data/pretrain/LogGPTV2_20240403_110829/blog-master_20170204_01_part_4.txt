会调用comparePartial进行索引entry 与查询key之间的部分匹配  
b) 如果是精确查找，则把索引元组的posting list或者posting tree的root页面的posting list，存储到GinEntryScan的list中  
4\. 循环获取满足查询条件的基表元组：  
a) 对每一个GinScanKey，调用consistent，合并GinScanKey中所有GinEntryScan的结果  
b) 把所有GinScanKey的结果合并，一次一条的返回  
c) 把满足条件的基表元组tid插入到bitmap中  
5\. 返回查询到的基表元组个数  
## 7 GIN索引的insert和fastupdate优化  
GIN索引的插入操作与btree索引不同，对于btree索引，基表增加一行，btree索引也是增加一个索引项。而对于GIN索引基表增加一行，GIN索引可能需要增加多个索引项。所以GIN索引的插入是低效的。所以PG为了解决这个问题，实现了两种插入模式：  
1\. 正常模式  
在该模式下，基表元组产生的新的GIN索引，会被立即插入到GIN索引  
2\. fastupdate模式  
在该模式下，基表元组产生的新的GIN索引，会被插入到pending list中，而pending list会在一定条件下批量的插入到GIN索引中  
下面就说明一下fastupdate模式的插入。  
2\.1 开启和关闭fastupdate模式  
可以通过create index 的WITH FASTUPDATE = OFF来关闭fastupdate模式，默认情况下是开启fastupdate模式  
2\.2 对索引扫描的影响  
在fastupdate模式下，新的索引元组以追加的方式插入到pending list中，不会进行任何的排序和去重操作，所以，在扫描时，只能顺序扫描，因此pending list的扫描效率是非常低的，必须保证pending list的大小不要太大  
2\.3 对插入的影响  
通常情况下，在fastupdate模式下，基表的更新效率是比较高的，但是如果一个事务的更新刚好让pending list到达临界点，而导致合并操作，则会使该事务比正常的事务慢很多  
2\.4 pending list的合并  
把pending list的索引元组合并到GIN索引树上有2种触发条件：  
1) 当pending list所占空间大于work_mem时  
PS  
(有gin_pending_list_limit参数的版本，通过gin_pending_list_limit参数来控制，而非work_mem)  
2) 在vacuum 索引的基表时（包括autovacuum在内）  
因此可以根据autovacuum的间隔时间和work_mem来控制pending list的大小，避免其过大而拖慢扫描速度  
在pending list合并时，其采用与GIN索引构建时相同的方式，即先把pending list内的数据，组织成一个RB树，然后再把RB树合并到GIN索引上。RB树可以把pending list中无序的数据变成有序，并且可以合并重复key的项，提高插入效率。  
## 8 GIN索引的vacuum  
GIN索引的vacuum是用来清理无用的posting list或者posting tree的，GIN索引的vacuum与btree索引的vacuum一样，提供了两个接口ginbulkdelete和ginvacuumcleanup。  
GIN索引的vacuum主要是清理entry tree和posting tree，如果entry的posting list为空了，vacuum依然不会删除该entry，说明entry tree中的entry永远不会被删除；对于posting tree，如果posting tree也空了，在系统依然会把posting tree的root页面保留，并关联到entry上面。  
## 9 GIN索引的并发控制  
参考 《PostgreSQL数据库内核分析》  
## 10 GIN索引的日志  
参考 《PostgreSQL数据库内核分析》  
## 11 TSVector类型的GIN索引  
PG默认提供了对TSVector数据类型的GIN索引的支持，并提供了对TEXT类型转换TSVector类型的接口，因此PG在对TEXT类型的属性建立GIN索引时，需要使用to_tsvector接口把TEXT类型转换成TSVector。  
### TSVector  
TSVector是PG中的一种数据类型，用来实现全文搜索。它实际上是一个的数组，其中key是一个关键词，pos list是key在字符串中出现的位置列表。如字符串:  
```  
'Before you can use PostgreSQL you need to install it'  
```  
在转换成TSVector后的值为：  
```  
[Before, 1] [you, 2:6] [can, 3] [use, 4] [PostgreSQL, 5] [need, 7] [to, 8] [install, 9] [it, 10]  
```  
因此TSVector实际上就是一组key和其出现位置的集合。  
在代码中使用如下结构表示TSVector：  
```  
typedef struct  
{  
         int32                  vl_len_;  
         int32                  size;  
         WordEntry        entries[1];                  /* var size */  
         /* lexemes follow */  
} TSVectorData;  
```  
其中WordEntry为：  
```  
typedef struct  
{  
         uint32  
                                     haspos:1,  
                                     len:11,                        /* MAX 2Kb */  
                                     pos:20;                        /* MAX 1Mb */  
} WordEntry;  
```  
从WordEntry的定义可以看出PG中每个key的最大长度是2Kb，而每个TSVector的最大长度是1MB。  
根据定义，TSVector的内存结构为：  
```  
[vl_len_] [size] [entry array] {[lexeme][pos num][pos array], … , [lexeme][pos num][pos array]}  
```  
对于TEXT类型，在更新索引时，会先调用to_tsvector把基表的索引列的字符串转换成TSVector表示的key和位置列表的集合，然后在使用用户自定义的extractValue把TSVector中所有的key提取出来，对每个key创建一个索引元组，然后插入到GIN索引中。  
### TSQuery  
TSQuery用来表示全文搜索的查询，PG提供了一个to_tsquery和plainto_tsquery接口把待查询的字符串格式化成TSQuery，其结构如下：  
```  
typedef struct  
{  
         int32                  vl_len_;  
         int4           size;                    /* number of QueryItems */  
         char          data[1];  
} TSQueryData;  
```  
其中QueryItem的结构为：  
```  
typedef union  
{  
         QueryItemType type;  
         QueryOperator qoperator;  
         QueryOperand qoperand;  
} QueryItem;  
```  
QueryItem是一个操作符和操作数的联合体，对于to_tsquery中的每一项都会转换成一个QueryItem。  
在GIN扫描之前会把TSQuery中的key使用函数extractQuery提取出来，并为每个key创建一个GinScanEntry。在GIN扫描时，会对每个GinScanKey调用consistent接口根据TSQuery中记录的key之间的关系(&、|、！)合并每个GinScanEntry的结果集。  
## 参考   
src/backend/access/gin/README  
src/backend/access/gin/*  
src/include/access/gin*  
《PostgreSQL数据库内核分析》 ( 成书较早,大量内容基于8.4的代码编写 )    
http://zisedeqing.blog.163.com/blog/static/95550871201621623458216/   
[《深入浅出PostgreSQL B-Tree索引结构》](../201605/20160528_01.md)  
[《B-Tree和B+Tree》](../201606/20160610_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")