                (u32) msg[1] 
    /* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */
    void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
        unsigned int i;
        uint32_t v0=v[0], v1=v[1], sum=0, delta=0x9E3779B9;
        for (i=0; i > 5)) + v1) ^ (sum + key[sum & 3]);
            sum += delta;
            v1 += (((v0 > 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
        }
        v[0]=v0; v[1]=v1;
    }
    void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
        unsigned int i;
        uint32_t v0=v[0], v1=v[1], delta=0x9E3779B9, sum=delta*num_rounds;
        for (i=0; i > 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
            sum -= delta;
            v0 -= (((v1 > 5)) + v1) ^ (sum + key[sum & 3]);
        }
        v[0]=v0; v[1]=v1;
    }
可以看到相较之前，发生了如下的变化:
  * 由之前的`((v1>5) + k1)` 变化成了 `((v1 > 5)) + v1)`，此时v1内部数据的加密变化不再受到密钥的影响。
  * 原先的`v1 + sum`变成了`(sum + key[sum & 3])`以及`sum + key[(sum>>11) & 3]`，密钥变成了轮转使用，而不是固定只针对某种数据进行加密（解密）。并且此时密钥的选取 **受到sum的影响**
  * `sum += delta`的时机由每次加密开头就发生变化到v0，v1两个block加密的中间。
这些变化帮助XTEA摆脱了一些密钥相关攻击，不过同时诞生了一种叫做 **TEA 块加密**
的加密手法。这种手法作用在一些可变长的数据中（XTEA默认用于64bit长的数据）。这中加密使用XTEA的轮转加密函数（就是上述的加密流程），但是却将同一段消息进行多次迭代加密。因为它对整个消息进行操作，所以块加密具有不需要ECB、CBC那些分组密码加密的属性。然而这个方式给XTEA本身引入了漏洞，如下
    void teab1_encrypt(long *v, long n, long *k)
    {
        unsigned long z = v[n - 1], sum = 0, e;
        long p, q;
        for (q = 6 + 52 / n; q > 0; q--)
        {
            sum += 0x9e3779b9;
            e = sum >> 2 & 3 ;
            for (p = 0; p > 5)) + z) ^
                (k[(p & 3) ^ e] + sum);
        }
    }
这类加密算法本身虽然套用了XTEA，不过总的来说也是属于一种错误使用，所以给了暴力破解的可能。感兴趣的可以参考[这里](https://www.researchgate.net/profile/Markku_Juhani_Saarinen/publication/228548968_Cryptanalysis_of_block_tea/links/5446bc1e0cf2d62c305049da/Cryptanalysis-of-block-tea.pdf?origin=publication_detail)
###  XXTEA
在经历了块加密的问题之后，XTEA再度进化， 变成了支持块加密`XXTEA`。
这次的加密代码如下:
     #include 
      #define DELTA 0x9e3779b9
      #define MX (((z>>5^y>3^z 1) {          /* Coding Part */
          rounds = 6 + 52/n;
          sum = 0;
          z = v[n-1];
          do {
            sum += DELTA;
            e = (sum >> 2) & 3;
            for (p=0; p> 2) & 3;
            for (p=n-1; p>0; p--) {
              z = v[p-1];
              y = v[p] -= MX;
            }
            z = v[n-1];
            y = v[0] -= MX;
            sum -= DELTA;
          } while (--rounds);
        }
      }
可以看到是由之前提到过的块加密衍生的一种写法。并且作者给出了这种算法的优势：
  * 每一个bit的更改将影响整个块的大约一半的bit位，但。
  * 不用进行加密模式的选择。
  * 即使采用始终更改发送的数据（可能只是一个消息号）的正确用法，只有相同的消息会给出相同的结果，并且只有很少量的信息泄漏。
  * 应始终检查消息号，因为此操作是针对接受随机消息的检查。
  * 应该无法被剪切和合并攻击。
  * 如果不能接受很长的消息，则可以将它们分成60个单词的小块，并类似于用于DES的方法进行链接。
不过即使这样，这个算法似乎还是存在选择明文攻击的可能。感兴趣的可以自行搜索。
###  CTF题目中的常见TEA
这类算法比较常见于逆向中，在分析二进制文件中的算法的时候有几个识别的特征:
  * 可能存在针对64bit以及128bit数字的操作（输入的msg和key）
  * 存在 **先进行位移，然后异或** 的类似操作（`(z>>5^y>11) & 3]`）
  * 会在算法开始定义一个delta，并且这个值不断的参与算法，但是 **从来不会受到输入的影响** （delta数值，根据见过的题目中很少会直接使用0x9e3779b9）
解决逆向题大部分出现TEA的场合都是【识别算法->编写对应解密程序】，将上述的算法进行逆推即可得到解密。
####  实战：xnuca2020 babyarm
这个题目里面的TEA是出题人魔改过的:
    if ( (signed int)v34 <= 15 )
        {
          v9 = v4[15];
          v28 = v4[1];
          v10 = v4[6];
          v32 = *v4;
          v11 = v4[9];
          v25 = v4[2];