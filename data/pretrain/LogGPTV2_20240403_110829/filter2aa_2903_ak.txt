试的代码。
编码和调试是程序员日常工作中两项最主要的任务，这两项任务是
相辅相成的，编写具有可调试性的高质量代码可以明显提高调试效率，
节约调试时间。此外，调试可以让程序员真切感受程序的实际执行过
程，反思编码和设计中的问题，加深对软件和系统的理解，提高对代码
的感知力和控制力。
在软件发布后，有些调试任务是由技术支持人员来完成的，但是当
他们将错误定位到某个模块并且无法解决时，有时还要找到它的本来设
计者。
很多经验丰富的程序员都把调试放在头等重要的位置，他们会利用
各种调试手段观察、跟踪和理解代码的执行过程。通过调试，他们可以
发现编码和设计中的问题，并把这些问题在发布给测试人员之前便纠正
了。于是，人们认为他们编写代码的水平非常高，没有或者很少有
bug，在团队中有非常好的口碑。对于测试人员发现的问题，他们也仿
佛先知先觉，看了测试人员的描述后，一般很快就能意识到问题所在，
因为他们已经通过调试把代码的静态和动态特征都放在大脑中了，对其
了然于胸。
但也有些程序员很少跟踪和调试他们编写的代码，也不知道这些代
码何时被执行以及执行多少次。对于测试人员报告的一大堆问题，他们
也经常是一头雾水，不知所措。
毋庸置疑，忽视调试对于提高程序员的编程水平和综合能力都是很
不利的。因此，《Debugging by Thinking》一书的作者Robert Charles
Metzger说道：“导致今天的软件有如此多缺欠的原因有很多，其中之一
就是很多程序员不擅长调试，一些程序员对待软件调试就像对待个人所
得税申报表那样消极。”
 老雷评点  
多年来，我所遇到的编程高手无不深谙调试技术，而那些摸
不到编程门道的门外汉则大多不知调试为何物。亦有貌似深谙软
件之道者，说调试无足轻重，真是大言不惭。
1.7.2 调试与测试的关系
简单地说，测试的目的是在不知道有问题存在的情况下去寻找和发
现问题，而调试是在已经知道问题存在的情况下定位问题根源。从因果
关系的角度来看，测试是旨在发现软件“表面”的不当行为和属性，而调
试是寻找这个表象下面的内因。因此二者是有明显区别的，尽管有些人
时常将它们混淆在一起。
如果说代码是联系调试与编码的桥梁，那么软件缺欠便是联系调试
与测试的桥梁。缺欠是测试过程的成果（输出），是调试过程的输入。
测试的目标首先是要发现缺欠，其次是如何协助关闭这些缺欠。
测试与调试的宗旨是一致的，那就是软件的按期交付。为了实现这
一共同目标，测试人员与调试人员应该相互尊重，密切配合。例如，测
试人员应该尽可能准确详细地描述缺欠，说明错误的症状、实际的结果
和期待的结果、发现问题的软硬件环境、重现问题的方法以及需要注意
的细节。测试人员应该在软件中加入检查错误和辅助调试的手段，以便
更快地定位问题。
软件的调试版本应包含更多的错误检查环节，以便更容易测试出错
误，因此除了测试软件的发布版本外，测试调试版本是提高测试效率、
加快整个项目进度的有效措施。著名的调试专家John Robbins建议根据
软件的开发阶段来安排测试调试版本的时间，在项目的初始阶段，对两
个版本的测试时间应该是基本一样的，随着软件的成熟，逐渐过渡到只
测试发布版本。
为了使以上方法更有效，编码时应该加入恰当的断言并建立合适的
错误报告和记录机制。我们将在本书后续分册中介绍运行期检查时更详
细地讨论这个问题。
1.7.3 调试与逆向工程的关系
典型的软件开发过程是设计、编码，再编译为可执行文件（目标程
序）的过程。因此，所谓逆向工程（reverse engineering）就是根据可执
行文件反向推导出编码方式和设计方法的过程。
调试器是逆向工程中的一种主要工具。符号文件、跟踪执行、变量
监视和观察以及断点这些软件调试技术都是实施逆向工程时经常使用的
技术手段。
逆向工程的合法性依赖于很多因素，需要视软件的授权协议、所在
国家的法律、逆向工程的目的等具体情况而定，其细节超出了本书的讨
论范围。
1.7.4 学习调试技术的意义
为什么要学习软件调试技术呢？原因如下。
首先，软件调试技术是解决复杂软件问题最强大的工具。如果把解
决复杂软件问题看作一场战斗，那么软件调试技术便是一种可以直击要
害而且锐不可当的武器。说直击要害，是因为利用调试技术可以从问题
的正面迎头而上，从问题症结着手，直接深入内部。而不像很多其他技
术那样需要从侧面探索，间接地推测，然后做大量的排查。说锐不可当
是因为核心的调试技术大多来源于CPU和操作系统的直接支持，所以具
有非常好的健壮性和稳定性，有较高的优先级。
其次，提高调试技术水平有利于提高软件工程师特别是程序员的工
作效率，降低他们的工作强度。很多软件工程师都认为调试软件花去了
他们大半的工作时间。因此提高调试软件的技术水平和效率对于提高总
的工作效率是非常有意义的。
再次，调试技术是学习其他软硬件技术的一个极好工具。通过软件
调试技术的强大观察能力和断点、栈回溯、跟踪等功能可以快速地了解
一个软件和系统的模块、架构和工作流程，因此是学习其他软硬件技术
的一种快速而有效的方法。作者经常使用这种方法来学习新的开发工
具、应用软件和操作系统。
最后，相对其他软件技术，软件调试技术具有更好的稳定性，不会
在短时间内被淘汰。事实上，我们前面介绍的大多数调试技术都有几十
年的历史了。因此，可以说软件调试技术是一门一旦掌握便可以长期受
用的技术。
1.7.5 调试技术尚未得到应有的重视
尽管软件调试始终是软件开发中必不可少的一步，但至今没有得到
应有的重视。
在教育和研究领域，软件调试技术尚未像软件测试和编译原理那样
成为一个独立的学科，有关的理论和知识尚未系统化，专门讨论软件调
试的书籍和资料非常有限。根据作者的了解，还没有一所大学或软件学
院开设专门关于软件调试的课程。这导致很多软件工程师没有接受过系
统的软件调试培训，对软件调试的基本原理知之甚少。
在软件工程中，很多时候，软件调试还处于被忽略的位置。当定义
日程表时，开发团队很少专门评估软件调试方面的风险，为其预留专门
的时间；当设计架构时，他们很少考虑软件的可调试性；在开发阶段，
针对调试方面的管理和约束也很薄弱—— 一个项目中经常存在着多种
调试机制，相互重叠，而且都很简陋。在员工培训方面，针对软件调试
的培训也比较少。
我们将在第四篇（第15～16章）进一步讨论软件调试与软件工程的
更多话题，特别是软件的可调试性。
 老雷评点  
近年来，欣然看到招聘广告中有时出现调试工程师（debug
engineer）的职位，且有些公司开始设立专职的调试团队（debug
team），这或为软件调试从隐学变为显学之征兆。
1.8 本章小结
本章的前两节介绍了软件调试的解释性定义、基本过程（见1.1
节）和特征（见1.2节）。1.3节讨论了断点、单步执行和分支监视3种基
本的软件调试技术的简要发展历史。1.4节从多个角度介绍了常见的软
件调试任务。1.5节介绍了软件调试所使用的基本技术。1.6节探讨了关
于软件错误的一些术语和概念。最后一节介绍了软件调试的重要性及其
与软件工程中其他活动的关系。
作为全书的开篇，本章旨在为读者勾勒出一个关于软件调试的总体
轮廓，帮助读者建立一些初步的概念和印象。所以，本章的内容大多是
概括性的介绍，没有深入展开，如果读者不能理解其中的某些术语和概
念，也不必担心，因为后面章节中会有更详细的介绍。
参考资料
[1] Robert Charles Metzger. Debugging by Thinking[M]. Holland:
Elsevier Digital Press, 2003.
[2] G Pascal Zachary. Showstopper: The Breakneck Race to Create
Windows NT and the Next Generation at Microsoft[M]. New York: The Free
Press, 1994.
[3] Manual of Operations for UNIVAC System. Remington Rand Inc.,
1954.
第二篇 CPU及其调试设施
如果把程序（program）中的每一条指令看作电影胶片的一帧，那
么执行程序的CPU就像一台飞速运转的放映机。以英特尔P6系列CPU为
例，其处理能力大约在300（第一代产品Pentium Pro）～3000（奔腾
III）MIPS。MIPS的含义是CPU每秒钟能执行的指令数（以百万指令为
单位）。如果按3000MIPS计算，那么意味着每秒钟大约有30亿条指
令“流”过这台高速的“放映机”。这大约是电影胶片放映速度（24帧每
秒）的1.25亿倍。如此高的执行速度，如果在程序中存在错误或CPU内
部发生了错误，该如何调试呢？
CPU的设计者们一开始就考虑到了这个问题—— 如何在CPU中包含
对调试的支持。就像在制作电影过程中人们可以慢速放映或停下来分析
每一帧一样，CPU也提供了一系列机制，允许一条一条地执行指令，或
者使其停在指定的位置。
以英特尔的IA结构CPU为例，其提供的调试支持如下。
INT 3指令：又叫断点指令，当CPU执行到该指令时便会产生断点
异常，以便中断到调试器程序。INT 3指令是软件断点的实现基
础。
标志寄存器（EFLAGS）中的TF标志：陷阱标志位，当该标志为1
时，CPU每执行完一条指令就产生调试异常。陷阱标志位是单步执
行的实现基础。
调试寄存器DR0～DR7：用于设置硬件断点和报告调试异常的细
节。
断点异常（#BP）：INT 3指令执行时会导致此异常，CPU转到该异
常的处理例程。异常处理例程会进一步将异常分发给调试器软件。
调试异常（#DB）：当除INT 3指令以外的调试事件发生时，会导
致此异常。
任务状态段（TSS）的T标志：任务陷阱标志，当切换到设置了T标
志的任务时，CPU会产生调试异常，中断到调试器。
分支记录机制：用来记录上一个分支、中断和异常的地址等信息。
性能监视：用于监视和优化CPU及软件的执行效率。
JTAG支持：可以与JTAG调试器一起工作来调试单独靠软件调试器
无法调试的问题。
除了对调试功能的直接支持，CPU的很多核心机制也为实现调试功
能提供了硬件基础，比如异常机制、保护模式和性能监视功能等。
本篇首先将概括性地介绍CPU的基本概念和常识（第2章），包括
指令集、寄存器及保护模式等重要概念；然后介绍与调试功能密切相关
的中断和异常机制（第3章），包括异常的分类、优先级等。这两章的
内容旨在帮助读者了解现代CPU的概貌和重要特征，为理解本书后面的
章节打下基础。对CPU了解较少的读者，应该认真阅读这两章的内容。
其他读者则可以将这些内容作为复习资料和温故知新。第4章将详细讨
论软件断点、硬件断点和陷阱标志的工作原理，从CPU层次详细解析支
持常用调试功能的硬件基础。第5章将介绍CPU的分支监视、调试存储
和性能监视机制。第6章将介绍CPU的机器检查架构（Machine Check
Architecture，MCA），包括机器检查异常和处理方法等。第7章将介绍
JTAG原理和IA-32 CPU的JTAG支持。
第2章 CPU基础
CPU是Central Processing Unit的缩写，即中央处理单元，或者叫中
央处理器，有时也简称为处理器（processor）。第一款集成在单一芯片
上的CPU是英特尔公司于1969年开始设计并于1971年推出的4004，与当
时的其他CPU相比，它的体积可算是微乎其微，因此，人们把这种实现
在单一芯片上的CPU（Single-chip CPU）称为微处理器
（microprocessor）。目前，绝大多数（即使不是全部）CPU都是集成在
单一芯片上的，甚至多核技术还把多个CPU内核（core）集成在一块芯
片上，因此微处理器和处理器这两个术语也几乎被等同起来了。
尽管现代CPU的集成度不断提高，其结构也变得越来越复杂，但是
它在计算机系统中的角色仍然非常简单，那就是从内存中读取指令
（fetch instruction），然后解码（decode）和执行（execute）。指令是
CPU可以理解并执行的操作（operation），它是CPU能够“看懂”的唯一
语言。本章将以这一核心任务为线索，介绍关于CPU的基本知识和概
念。
 老雷评点 
读到这里，我不禁想起一位长者，一位和蔼的美国老头——
Tom Shanley，他没有在英特尔工作过，但却比大多数英特尔工
程师都更熟悉英特尔CPU，他多次到英特尔讲课，我有幸聆听两
次。上述说法当来自Tom对处理器角色之精炼概括：“Processor =
Instruction Fetch/Decode/Execute Engine”。从书架中取出Tom的皇
皇巨著《奔腾4全录：IA32处理器宗谱》（《The Unabridged
Pentium 4: IA32 Proces Genealogy》），看到Tom的亲笔签名，如
晤其人。
2.1 指令和指令集
某一类CPU所支持的指令集合简称为指令集（Instruction Set）。根
据指令集的特征，CPU可以划分为两大阵营，即RISC和CISC。
精简指令集计算机（Reduced Instruction Set Computer，RISC）是
IBM研究中心的John Cocke博士于1974年最先提出的。其基本思想是通
过减少指令的数量和简化指令的格式来优化和提高CPU执行指令的效