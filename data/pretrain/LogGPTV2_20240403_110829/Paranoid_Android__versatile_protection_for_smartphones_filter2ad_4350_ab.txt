Particularly, we do not activate or keep any of the network
adaptors from sleeping, but rather attempt to transmit the
trace only when the device is awake and connected to the
Internet. This can be due to the user performing an action
like reading email or surﬁng the web, when he is also most
likely to be attacked (e.g., by receiving a malicious email, or
accessing a malicious web site). Alternatively, we also sup-
port an extremely loose synchronisation model, where the
device synchronises with its replica only when it is recharg-
ing. Such a model may be suitable for users with more re-
laxed security requirements, as attacks can only be detected
after synchronising with the server.
2.2.2 Tamper-Evident Secure Storage
Loose synchronisation with the server is ideal for preserv-
ing power, but unless we protect the execution trace, an at-
tacker may compromise the phone and disable the synchro-
nisation procedure. Even worse, a capable attacker could
modify the execution trace to remove the entries that ex-
pose the attack (e.g., a speciﬁc read from the network), while
keeping the system operational to make it appear as if ev-
erything is still running properly.
We defend against such attacks by employing a secure
storage to detect if someone has tampered with the execu-
tion trace. Every block of data written to secure storage
is associated with an HMAC code [2], that simultaneously
veriﬁes the block’s authenticity and integrity. HMAC is a
speciﬁc type of message authentication code (MAC) that
involves a cryptographic hash function in combination with
a secret key. We achieve tamper-evidency by continuously
“rolling” the key used with the HMAC, as we explain below.
Each time an entry along with its HMAC code is writ-
ten to secure storage, we generate a new key by applying a
second cryptographic hash function on the old key (which
is completely overwritten). This way an attacker compro-
mising the device, cannot alter old entries already in the
execution trace to hide an attack. At worst, attackers can
delete entries or block synchronisation, which both count as
synchronisation errors.
ST ORE(message + HM AC(key, message))
key(cid:48) = HASH(key)
key = key(cid:48)
Writes to secure storage occur regularly during the oper-
ation of PA, or can be triggered by a speciﬁc event. While
the system is running, the data produced by the tracer are
initially buﬀered and compressed in the manner described
in Section 3.2. When data can no longer be buﬀered (e.g.,
because the buﬀer has been exhausted), or when it is de-
termined that they cannot be further compressed, they are
Encode/filterTamper-evident storageSynchroniseReplayerProxy APISmartphone emulatorSecurity checksRECORDREPLAYMirroredtrafficDataUMTS, Internet,…loggingdataPROXYregulartrafficmirroredtrafficTracerwritten to secure storage and a new key is generated. Al-
ternatively, writes to secure storage may be “forced” when
certain events occurs, even if additional buﬀering is possi-
ble. For instance, when a network read occurs that could
potentially introduce malicious data, we request that the
entry describing the network read (as well as the previously
buﬀered entries) are written into secure storage. Diﬀerent
algorithms and strategies that determine the frequency of
writes to secure storage can be explored in future work.
Synchronisation Errors
Using HMAC is more lightweight than digital signatures,
as it requires less processing cycles (and consequently power)
and storage. The only requisite is that a secret key is initially
shared between the device and the server. Such a key can
be established when setting up the device for use with PA.
The replayer authenticates the received data by calculating
their HMAC code, and comparing it with the one received.
2.2.3
An error during synchronisation can be the result of a
software bug, or a failed attempt by an attacker to cover his
tracks. It can manifest itself as a mismatch in the HMAC
code, a corrupted execution trace, or failure to communi-
cate for a long period of time. The true cause of such an
error cannot be determined with conﬁdence by the security
server, and in any case we lose the ability to further replay
execution. Consequently, devices exhibiting such errors are
treated as potentially compromised, and the user needs to be
notiﬁed and his device restored to a clean state (Section 2.5).
2.3 Security Methods
The real power of PA lies in the scalability and ﬂexibility
in security methods. By replicating smartphone execution
in the cloud, we have ample resources for running a combina-
tion of security tasks. Moreover, we can apply any detection
method that obeys the rule of noninterference For instance,
all of the following detection methods are compatible with
PA’s security model. As a proof of concept, we implemented
the ﬁrst two in the list (Section 3.3) and are currently work-
ing on the others.
1. Dynamic analysis in the emulator. We instrument the
emulator to perform runtime analysis to detect certain
types of zero-day attacks such as buﬀer-overﬂows and
code-injection attacks [18, 41, 10, 8].
2. AV products in the cloud. We modiﬁed a popular open
source AV to run in the emulator, and perform peri-
odical ﬁle scans. Additionally, on access ﬁle scanning
can be applied with few modiﬁcations to the replayer.
On access scanning AV intercept ﬁle handling system
calls and scan the target ﬁle before allowing a pro-
cess to access it. As we already intercept system calls,
the replayer could be transformed to an on access AV
scanner.
3. Memory scanners. We can scan emulator memory for
patterns of malicious code directly. Memory scanners
are able to detect memory-resident attacks that leave
no ﬁles behind for AV scanners to detect.
4. System call anomaly detection. Detection methods
based solely on the system calls [36, 15], can even be
applied directly to the execution trace, without any
need for replaying. As a result, system call detection
methods are extremely fast.
While, all the techniques we have referred to in this sec-
tion have been around for some time, execution replay oﬀers
great ﬂexibility, even enabling future runtime security solu-
tions to be applied retrospectively. Furthermore, the execu-
tion trace can be retained and used for auditing purposes.
2.4 Proxy And Server Location
The location of the security server and the proxy, and who
controls them is a policy decision beyond the scope of this
paper. For instance, institutions running their own cloud
could deploy the proxy and replica in-house. Alternatively,
PA could be oﬀered as a service by wireless providers, host-
ing the server on their own cloud. While privacy is impor-
tant both for companies and individuals, smaller companies
and individuals frequently place their data on cloud services
oﬀered by providers such as Amazon and Google.
In an extreme scenario, users with strong privacy consid-
erations could run their own replicas on their desktop or
notebook, and not use a proxy at all. Doing so gives them
full control over their data, but implies a very loose syn-
chronisation model, where the device synchronises with the
server only when the device is plugged to the computer, or
when they are on the same network (e.g., similarly to Ap-
ple’s Time Capsule).
2.5 User Notiﬁcation And Recovery
When an attack is detected, PA needs to warn the user,
so that recovery procedures can be initiated. This is not
trivial. Sending an SMS or email message may not work, as
a skilled attacker could block such messages. As such, a sig-
nalling channel beyond the control of the attacker is needed.
The nature of this channel is not very important for this pa-
per, but various options are already available. For instance,
we could use special hardware on the phone to have it de-
stroy all data, when it receives a privileged message by the
owner or provider (e.g., the “kill pill” message on Black-
berry phones [39]). If hardware support is not available, the
provider could also simply deny service to the device, which
would (hopefully) inform the user that something is wrong.
Compromised devices can be restored to a pristine state
using the data held at the replica. Data-loss can be kept at
a minimum, as an exact copy of all user data exists in the
cloud. Furthermore, using multiple intrusion detection tech-
niques we can accurately detect the moment of the attack,
to restore the really last clean state of the system. Unfor-
tunately, recovery over the network cannot be guaranteed,
so we adopt an approach similar to current systems such as
the iPhone, where the device needs to be plugged-in a PC
to be recovered.
2.6 Handling Data Generated On The Device
While we can proxy the data that is already available ‘in
the network’, we cannot do so for data that is generated
locally. Examples include key presses, speech, downloads
over Bluetooth (and other local connections), and pictures
and videos taken with the built-in camera. Keystroke data
is typically limited in size. Speech is not very bulky either,
but generates a constant stream. We will show in Section 4
that PA is able to cope with such data quite well.
Downloads over Bluetooth and other local connections fall
into two categories: (a) bulk downloads (e.g., a play list of
music ﬁles), typically from a user’s PC, and (b) incremental
downloads (exchange of smaller ﬁles, such as ringtones, of-
ten from other mobile devices). Incremental downloads are
relatively easy to handle. For bulk downloads, we can save
on transmitting the data if we duplicate the transmission
from the PC such that it mirrors the data on the replica.
However, this is an optimisation that we have not yet ap-
plied.
Pictures and videos taken using the device may incur sig-
niﬁcant overhead in transmission. PA caters more to se-
curity sensitive environments like corporations and govern-
ment institutions, where such data are encountered less fre-
quently. Nevertheless, in application domains where such ac-
tivities are common, users will probably have to disconnect
from the server, and only resynchronise when their device is
recharging to avoid draining the battery. In the future, we
could exploit the increasing trend of users uploading their
content to the Internet directly from their devices, to also
proxy the uploaded data and make them available to the
replica.
3.
IMPLEMENTATION
In this section, we discuss a prototype implementation of
PA for Google’s Android system. While it is possible to im-
plement the tracer and replayer in diﬀerent ways, the most
eﬃcient way is to intercept system calls and signals in the
kernel. It is also the most convenient way to inﬂuence the
scheduling to serialise accesses to shared objects (discussed
in 2.1). However, it is hard to maintain such an implemen-
tation, as it requires frequent updates to keep it operational
with new kernels, and it requires that a new boot image is in-
stalled on the device every time the tracer is updated. This
motivated us to implement PA’s prototype in user space.
Our implementation is transparent to applications and the
OS, and only requires process tracing functionality, compa-
rable to the one oﬀered by Linux’s ptrace, which enables us
to attach to arbitrary processes, and intercept system calls
and signals. Similar interfaces are also support by BSD-
and Windows-style OSs used on other devices, such as the
iPhone OS and Windows Mobile.
3.1 Recording And Replaying
In this section, we explain the novel aspects of implement-
Starting The Tracer And Everything Else
ing execution recording and replaying on Android.
3.1.1
In UNIX tradition, Android uses the init process to start
all other processes, including the supporting framework and
user applications. The tracer itself is also launched by init,
before launching any of the processes we wish to trace. Init
launches the processes that are to be traced using an execu-
tion stub. This process serves a twofold purpose: it allows
the tracer to start tracing the target processes from the ﬁrst
instruction, and it enables us to run processes without trac-
ing them (e.g., debugging and monitoring applications).
Init brings up the tracer process ﬁrst. The tracer ini-
tialises a FIFO to allow processes that need tracing to con-
tact it. Next, init starts the other processes. Rather than
starting them directly, we add a level of indirection, which
we call the exec stub. So, instead of forking a new thread and
using the exec system call directly to start the new binary,
we fork and run a short stub. The stub writes its process
identiﬁer (pid) to the tracer’s FIFO (eﬀectively requesting
the tracer to trace it) and then pauses. Upon reading the
pid, the tracer attaches to the process to trace it. Finally,
the tracer removes the pause in the traced process, mak-
ing the stub resume execution. The stub immediately calls
exec to start the appropriate binary with the corresponding
parameters.
Scheduling And Shared Memory
3.1.2
In Section 2.1, we brieﬂy mentioned that we serialise ac-
cesses to shared objects using a modiﬁed task scheduler that
operates in a deterministic way. Unfortunately, we can only
do so with coarse granularity, as we operate entirely in user
space. Our scheduling algorithm is quite simple and far from
optimal, but suﬃcient for our purpose, as it is reproducible.
Furthermore, it does not require us to log any additional
information in the execution trace. It operates by ensuring
that no two threads that share a memory object can ever
run concurrently. Because the scheduler is triggered by sys-
tem calls, it can be unfair, and it may theoretically deadlock
in the presence of spinlocks. To avoid the latter, we created
a spinlock detector that is activated when a task keeps run-
ning for more than a predeﬁned period of time. In practice,
Android does not use spinlocks as they are wasteful in terms
of CPU cycles. Instead, locking is performed using mutexes,
which results in a system call in case of contention, and are
handled by PA in a straightforward way. While the spin-
lock detector provides the robustness that is required for a
production system, so far we have only seen it triggered for
contrived test cases.
Modern operating systems also allow processes to directly
memory map HW memory. If such memory was to be used
for directly reading data from hardware, neither repeatable
scheduling nor a traditional CREW protocol could ensure
proper serialisation of accesses to that memory. To the best
of our knowledge, Android does not use memory in this way.
However, it could be a problem in the future in a diﬀerent
hardware/software combination.
In that case, we need a
modiﬁed CREW protocol that will track all reads from such