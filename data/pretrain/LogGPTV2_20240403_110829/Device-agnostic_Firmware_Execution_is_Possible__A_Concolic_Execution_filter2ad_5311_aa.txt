title:Device-agnostic Firmware Execution is Possible: A Concolic Execution
Approach for Peripheral Emulation
author:Chen Cao and
Le Guan and
Jiang Ming and
Peng Liu
Device-agnostic Firmware Execution is Possible: A Concolic
Execution Approach for Peripheral Emulation
Anonymous Author(s)
ABSTRACT
With the rapid proliferation of IoT devices, our cyberspace
is nowadays dominated by billions of low-cost computing
nodes, which are very heterogeneous to each other. Dynamic
analysis, one of the most effective approaches to finding
software bugs, has become paralyzed due to the lack of
a generic emulator capable of running diverse previously-
unseen firmware. In recent years, we have witnessed devas-
tating security breaches targeting low-end microcontroller-
based IoT devices. These security concerns have significantly
hamstrung further evolution of the IoT technology. In this
work, we present Laelaps, a device emulator specifically
designed to run diverse software of microcontroller devices.
We do not encode into our emulator any specific information
about a device. Instead, Laelaps infers the expected behav-
ior of firmware via symbolic-execution-assisted peripheral
emulation and generates proper inputs to steer concrete exe-
cution on the fly. This unique design feature makes Laelaps
capable of running diverse firmware with no a priori knowl-
edge about the target device. To demonstrate the capabilities
of Laelaps, we applied dynamic analysis techniques on top
of our emulator. We successfully identified both self-injected
and real-world vulnerabilities.
1 INTRODUCTION
Software-based emulation techniques [41] have demonstrated
their pivotal roles in dynamically analyzing binary code. Run-
ning a program inside an emulator allows analysts to gain
semantically insightful run-time information (e.g., execution
path and stack layout) and even dynamically instrument
the binaries [6, 30, 34, 36]. However, none of these capabili-
ties have been utilized to analyze the firmware of low-end
microcontroller-based IoT devices. A major obstacle of utiliz-
ing existing analysis capabilities is the absence of a versatile
emulator that could execute arbitrary firmware of different
microcontroller devices. Such an emulator has to deal with
the vast diversity of microcontroller firmware in terms of
hardware architecture (e.g., x86, ARM, MIPS, etc), integrated
peripherals (e.g., communication interface, DSP, etc.), and
the underlying operating system (e.g., bare-metal, mBed OS,
FreeRTOS, etc.). Customizing the emulator for every kind of
device is nearly impossible.
Dynamically analyzing embedded firmware has been stud-
ied for a while. Unfortunately, existing solutions are far from
1
mature in many ways. They are either ad-hoc, tightly cou-
pled with real devices, or for Linux-based firmware only.
Existing work [24, 27, 32, 42, 44] forwards peripheral signals
to real devices and run the rest of firmware in an emulator.
In this way, analysts could execute the firmware and inspect
into the inner state of firmware execution. However, this
approach is not affordable for testing large-scale firmware
images because for every firmware image a real device is
needed. Besides, frequent rebooting of the device and signal
forwarding are time-consuming. A recent work advances
this research direction by modeling the interactions between
the original hardware and the firmware [21]. This enables
the virtualized execution of any piece of firmware possi-
ble without writing a specific back-end peripheral emulator
for the hardware. However, this approach still requires the
real hardware to “learn” the peripheral interaction model.
Previous work also explores ways to emulate Linux-based
firmware [9, 46]. FIRMADYNE [9] extracts the file system of
the firmware and mounts it with a generic kernel executed
in QEMU [4]. FIRM-AFL [46] further proposes a grey-box
fuzzing mechanism. However, both of them only work for
Linux-based embedded firmware because the generality re-
lies upon on an abstract software layer – the Linux kernel. A
large number of real-world embedded systems run on micro-
controllers and only support lightweight RTOS or bare-metal
systems. On these devices, a solution has to gracefully handle
the diverse requirements from the hardware directly.
In this work, we demonstrate that the obstacles of device-
agnostic firmware execution are not insurmountable. We
present Laelaps, a generic emulator for ARM Cortex-M
based microcontroller units (MCUs). Instead of implement-
ing peripheral logic for every device, we leverage symbolic
execution and satisfiability modulo theories (SMT) [3] to
reason about the expected inputs from peripherals and feed
them to the being-emulated firmware on the fly. Therefore,
our approach aims to achieve the ambitious goal of executing
non-Linux firmware without relying on real devices. The
design of Laelaps combines concrete execution and sym-
bolic execution. Concrete execution runs in a full system
emulator, QEMU [4], to provide the inner state of execution
for dynamic analysis. However, the state-of-the-art whole
system emulators cannot emulate previously-unseen periph-
erals. If the firmware accesses unimplemented peripherals,
the emulation will become paralyzed. Symbolic execution
then kicks in to find a proper input for the current peripheral
Anonymous Submission to MobiCom, 2020
Anon.
access operation and guides firmware execution. We found
that symbolic execution is particularly good at inferring pe-
ripheral inputs, because many of them are used in logical or
arithmetical calculations to decide a branch target.
In general, Laelaps’s concrete execution will be stuck
when accessing an unimplemented peripheral, and then it
switches to the symbolic execution to find proper inputs that
can guide QEMU to a path that is most likely to be identical
with a real execution. One significant practical challenge
for automatic test generation is how to effectively explore
program paths. Various search heuristics have been proposed
to mitigate the path explosion problem in PC software [29,
39, 43]. However, peripherals reveal many distinct features
that require special treatment, such as very common infinite
loops and interrupt requests. At the heart of our technique is
a tunable path selection strategy, called Context Preserving
Scanning Algorithm, or CPSA for short. CPSA contains a set
of peripheral-specific heuristics to prune the search space
and find the most promising path. Peripherals also interact
with the firmware through interrupts. In fact, embedded
systems are largely driven by interrupts. QEMU has built-in
support for interrupt delivering, but it has no knowledge
with regard to when to assert an interrupt—this logic should
be implemented by peripherals. We address this issue by
periodically raising interrupts which have been activated
by the firmware. Although our solution may not strictly
follow the designed firmware logic, we demonstrate that it
is able to steer the execution to properly initialized points
suitable for further analysis. This is particularly useful for
analyzing “cold” code regions that can only be reached with
the knowledge of real hardware behaviors.
We have developed Laelaps on top of angr [40] and QEMU [4].
Our prototype focuses on ARM Cortex-M MCUs, which dom-
inate the low-end embedded device market, but the design
of Laelaps is applicable to other architectures as well. We
evaluate Laelaps by running 30 firmware images built for
4 development boards. The tested firmware spans a wide
spectrum of sophistication, including simple synthetic pro-
grams as well as real-world IoT programs running Amazon
FreeRTOS OS [1]. Laelaps takes a big step towards scalable,
dynamic IoT firmware analysis. It enables existing dynamic
analysis techniques to become directly applicable to analyz-
ing microcontroller firmware. Our work makes the following
main contributions:
• We abstract the system model of ARM Cortex-M based
embedded microcontroller devices and distill the miss-
ing but essential parts for full system emulation of
those devices.
• We fill the missing parts of full system device emu-
lation by designing a symbolically-guided emulator,
2
which is capable of running diverse firmware for ARM
MCUs with previously-unknown peripherals.
• We demonstrate the potential of Laelaps by using it
in combination with advanced dynamic analysis tools,
including boofuzz [35], angr [40], and PANDA [16].
Laelaps is an open-source tool. Its source code and
demonstration firmware samples are available at (URL
omitted for double-blind reviewing).
2 BACKGROUND
2.1 ARM Cortex-M Microcontroller
Previously, microcontroller units were often considered as
specialized computer systems that are embedded into some
other devices, as contrary to personal computers or mobile
SoC. With the emergence of IoT, now they has been central
to many of the innovations in the cost-sensitive and power-
constrained IoT space.
ARM Cortex-M family is the dominating product in the
microcontroller market. Cortex-M cores are based on the
32-bit ARMv6-M, ARMv7-M or ARMv8-M architectures. All
of them support Thumb instructions for the most efficient
code density. From the view point of a programmer, the most
remarkable difference between PC/mobile processors and
Cortex-M processors is that Cortex-M processors do not
support MMU. This means that the application code and the
OS code are mingled together in a flat memory address space.
For this reason, it does not support the popular Linux kernel.
ARM Cortex-M processors map everything into a single
address space, including the ROM, RAM and peripherals.
Therefore, peripheral functions are invoked by accessing
the corresponding registers in the system memory. For each
ARM core, ARM defines the basic functionality and the mem-
ory map for its core peripherals, such as the interrupt con-
troller (called Nested Vector Interrupt Controller or NVIC),
system timer, debugging facilities, etc. Then, ARM sells the
licenses of its core design as intellectual property (IP). The
licensees produce the physical cores. These participating
manufactures are free to customize their implementation as
long as it conforms to the design defined by Arm. As a result,
different manufactures optimize and customize their prod-
ucts in different ways, leading to a vast diversity of Cortex-M
processors.
2.2 Firmware Execution
Th MCU firmware execution can be roughly divided into
four phases: 1) device setup, 2) base system setup, 3) RTOS
initialization, and 4) task execution. In the device setup phase,
the hardware components, including RAM and peripherals,
are turned on and self-tested. In the base system setup phase,
standard libraries such as libc are initialized. That means
dynamic memory can be used, and static memory is allocated.
Device-agnostic Firmware Execution
Anonymous Submission to MobiCom, 2020
Then the code of a RTOS (or bare-metal) image is copied into
the allocated memory regions, and core data structures are
initialized. If the firmware is powered RTOS, the scheduler
is also started. Finally, multiple tasks are executed on the
processor in a time-sharing fashion (in case of RTOS design)
or a single-purpose task monopolizes the processor (in case
of bare-metal design).
Firmware execution highly depends on the underlying
hardware, and such hardware uncertainties have become the
biggest barrier to the development of a generic emulator. An
improper emulation leads to failed bootstrap very early in
phase 1. We also note that there can be multiple valid execu-
tion paths in a firmware execution. In fact, manufacturers
often include multiple driver versions to normalize different
peripherals. All the valid paths can lead to a successful execu-
tion. In other words, the executed driver version, as long as it
is valid, does not influence the result of firmware analysis. This
fact grants us a certain level of fault tolerance in firmware
emulation. That is, a wrongly selected path can still lead to
a successful emulation for analysis.
2.3 Dynamic Symbolic Execution
Symbolic execution, first proposed by King [26], is a powerful
automated software testing technique. It treats program in-
puts as symbolic variables and simulates program execution
so that all variables are represented as symbolic expressions.
Together with theorem proving technique [18, 31], symbolic
execution is able to automatically generate concrete inputs
that cover new program paths. Notably, symbolic execution
has achieved encouraging results in testing closed-source de-
vice drivers [10, 28, 37]. Dynamic symbolic execution (a.k.a
concolic execution) [7, 8, 19, 38] performs symbolic execution
along a concrete execution path, and it combines static and
dynamic analysis in a manner that gains the advantages of
both. Dynamic symbolic execution has achieved remarkable
success in generating high-coverage test suites and finding
deep vulnerabilities in commercial software [5, 11, 20]. The
core of Laelaps is a concolic execution approach for pe-
ripheral emulation. One particular challenge for concrete
execution is the path explosion problem [29, 39, 43]. Our
study proposes a set of peripheral-specific search heuristics
to mitigate the path explosion.
3 OVERVIEW
3.1 Function Gap
QEMU [4], the most popular generic machine emulator, has
built-in support for almost all of the functions defined by
ARM. We call them core peripherals/functions in the remain-
der of this paper. However, chip manufacturers often inte-
grate custom-made peripherals that are also mapped into the
address space of the system. The logic of these peripherals,
Figure 1: Missing logic in QEMU (shaded memory re-
gions correspond to unimplemented peripherals).
together with the core peripherals, define the behavior of
an ARM MCU device. Therefore, to emulate a real device,
an emulator needs to support all the manufacturer-specific
peripherals. However, our source code review shows that
QEMU, the state-of-the-art emulator, only supports three
ARM-based microcontrollers (two TI Stellaris evaluation
boards and one Arm SSE-200 subsystem device). For unsup-
ported devices, QEMU only emulates the core peripherals
defined by ARM. Figure 1 shows the missing logics in QEMU.
When the processor interacts with an unimplemented
peripheral (shown as shaded in Figure 1), QEMU becomes
paralyzed due to two unfilled gaps. Gap 1: QEMU does not
know how to respond when the processor accesses an unim-
plemented peripheral register. Gap 2: QEMU lacks the logic
of unimplemented peripherals and therefore cannot know
when to send interrupt requests.
3.2 Motivating Observations
QEMU becomes paralyzed when the firmware access an
unimplemented peripheral, simply because it cannot provide
a suitable value to the firmware. If QEMU provides a random
value, the execution is very likely to be stuck indefinitely.
Our in-depth study on the usage of peripheral values leads
to three key observations. First, most peripheral accesses
are in fact not critical to firmware execution. As shown be-
low, this statement reads a value from peripheral register
base->PCR[pin] and assigns another value to the same reg-
ister after some logic calculations. This statement configures
the functionality of a pin on the board, but the values being
read and written do not influence the firmware emulation at
all.
base -> PCR [ pin ] = ( base -> PCR [ pin ] & ~ PORT_PCR_MUX_MASK ) |
PORT_PCR_MUX ( mux );
Second, excluding the non-critical peripheral accesses, many
of the rest are involved in firmware control flow logic so that
they have direct influence on the execution path. Third, if we
can find a value that drives the execution along a correct path,
then QEMU can usually execute the firmware as expected.
3
Peripheral 1……Peripheral 0……MPUNVICSystem Control Block……RAMROMCPUGap 2: When torequest interrupt?System MapGap 1: Whatto respond?Anonymous Submission to MobiCom, 2020
Anon.
To explain this, we list a code snippet for a UART driver
in Listing 1. It outputs a buffer through the UART interface.
In Line 3, it reads from a UART register (base->S1) in a
while loop. Only if the register has certain bits set would
the loop be terminated. Then the driver will send out a byte
by putting the byte on another register (base->D). It is clear
that executing line 4 is necessary for the firmware to move
forward. To obtain the input leading to line 4, we found
symbolic execution a perfect fit. Specifically, if we mark
the value in the unknown register (base->S1) as a symbol,
we can instantly deduce a satisfiable value to reach line 4.
Like this example, we found many peripheral drivers use
peripheral registers in simple logic or arithmetic calculations,
and then the results are used in control-flow decision making.
1 void UART_WriteBlocking ( UART_Type * base , const uint8_t
* data , size_t length ){
while ( length - -) {
while (!( base -> S1 & UART_S1_TDRE_MASK )) {}
base ->D = *( data ++) ;
}
2
3
4
5
6 }
Listing 1: Code snippet from real driver code.
3.3 Laelaps Overview
Laelaps combines concrete execution and symbolic execu-
tion, namely concolic execution [7, 8, 19, 38]. Neither of
them alone could achieve our goal because 1) concrete exe-
cution cannot deal with unimplemented peripherals; and 2)
pure symbolic execution faces the traditional path explosion
problem. We design our system based on concrete execution