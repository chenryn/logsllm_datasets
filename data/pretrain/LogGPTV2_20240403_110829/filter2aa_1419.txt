Java类加载机制
本⽂发表于赛博回忆录。
正如我们学习Java安全⼀样，⼤家都知道，RCE是第⼀⽣产⼒，那么就要从Java的类加载机制和反射机制
这两类基础开始学习，下⾯我们来由浅⼊深的了解⼀下Java的类加载机制。
Java是⼀个靠JVM实现编译运⾏，从⽽跨平台的⼀个开发语⾔。
然后在虚拟机中默认了提供了了三种类加载器，启动类加载器（Bootstrap ClassLoader）、扩展类加载
器（Extension ClassLoader）、应⽤类加载器（Application ClassLoader）
双亲委派模型
三种不同的加载器，那么⼜存在⼀个谁加载，加载顺序是什么的问题，其⼤概的加载顺序可以通过学习
双亲委派模型来了解
Java程序运⾏流程⼤概如下
  java代码编译class⽂件
  .class⽂件读⼊内存
  创建对象
1、启动类加载器
  负责加载在\lib⽬录和被-Xbootclasspath参数所指定的路径中的类库 
2、扩展类加载器
  负责加载 \lib\ext⽬录 和 被java.ext.dirs系统变量所指定的路径中的所有类库
3、应⽤类加载器
  负责加载⽤户类路径classPath所指定的类库，如果应⽤程序中没有⾃定义过⾃⼰的类加载器，⼀般情况
下这个就是程序中默认的类加载器
从图中可以看出，除类顶层的启动类加载器以外，其他加载器都有⽗类加载器，在加载⼀个类的时候，
会先从底判断是否加载了这个类，然后从顶层往下加载，只有⽗类加载器加载不类的时候才会向下加
载。
当然我们知道，⼀般我们写的程序，在我们不指定加载器的情况下，默认情况下会使
⽤ AppClassLoader 加载类，可以通过
ClassLoader.getSystemClassLoader() 来返回系统类加载器来判断。
其中有⼀些个例，⽐如 java.io.file 类返回的就是 null 的原因就是因为已经被⽗类 Bootstrap 
ClassLoader 加载。
⾃定义加载类
在知道Java的类加载的这种机制下，我们可以配合后续要讲的Java的反射来进⾏来进⾏⽐如⾃定义加载类
这个操作。
在这⾥⽐如我们如果只讲类加载的应⽤等话，我们可以通过编写⾃⼰的类的对象，来调⽤本地命令，因
为现在有很多通过RASP检测，绕过很多基于流量的保护。
第⼀步 先定义⼀个 TestWebshell 类
然后我们要采⽤⾃定义的类加载器来加载TestWebshll类
public class TestWebshell {
    public String hello() {
        System.out.println("Hello World!");
    }
}
通过上⾯的代码，我们定义了⼀个 MyClassLoader ,我们定义了要加载的类的 ClassName 和
其 classpath ，这样就可以⽤⽗类 ClassLoader 中的 findClass 传⼊字节码和 defineClass 注
册加载类这⼏个⽅法。
public class MyClassLoader extends ClassLoader {
    private static String testClassName = "类名";
    private static String classPath = "路径";
    //findLoadedClass⽅法检查是否初始化
    //然后传⼊字节码调⽤defineClass⽅法去JVM中注册该类
    @Override
    protected Class findClass(String className ) {
        byte[] testClassBytes = this.loadClassData(className );
        return this.defineClass(testClassName, testClassBytes, 0, 
testClassBytes.length);
    }
    //对要加载的包获取其字节码
    private static byte[] loadClassData(String className ) {
        try {
            // 传进来是带包名的
            className = className.replace(".", "//");
            FileInputStream inputStream = new FileInputStream(new 
File(classPath + className + ".class"));
            // 定义字节数组输出流
            ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
            int b = 0;
            while ((b = inputStream.read()) != -1) {
                byteArrayOutputStream.write(b);
            }
            inputStream.close();
            return byteArrayOutputStream.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
  public static void main(String[] args) {
        // 创建⾃定义的类加载器
        MyClassLoader loader = new MyClassLoader();
        try {
            // 使⽤⾃定义的类加载器加载TestWebshell类
            Class testClass = loader.loadClass(testClassName);
            // 反射创建TestWebshell类，等价于 TestWebshell t = new TestWebshell();
            Object testInstance = testClass.newInstance();
            // 反射获取hello⽅法
            Method method = testInstance.getClass().getMethod("hello");
这样通过我们⾃定义的 MyClassLoader 就可以调⽤编译好的类对象了，当然其中还有因为反射机
制的原因，包括我们也可以远程去加载⼀些类，⽤到的就是 URLClassLoader 来进⾏加载，这⾥就
不过多的展开了
⼩结
总的来说，ClassLoader作为Java的重要机制，其中除了⾃定义类加载的⽅法外，其余所有的动作完全由
JVM主导和控制，ClassLoader可以为我们加载任意的加载类，在配合反射机制下，可以为我们带来各种
利⽤⽅式，后续我们可以总结⼀些常⻅的利⽤⽅式。
Java虚拟机：对象创建过程与类加载机制、双亲委派模型_张维鹏的博客-CSDN博客
⾃定义类加载实现⼩⼩的⼈啊-CSDN博客⾃定义类加载
浅谈RASP技术攻防之基础篇 - FreeBuf⽹络安全⾏业⻔户
【深⼊Java虚拟机】之四：类加载机制兰亭⻛⾬的专栏-CSDN博客java类加载机制
            // 反射调⽤hello⽅法,等价于t.hello();
            method.invoke(testInstance);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}