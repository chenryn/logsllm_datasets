解释  
1、ACTIVE_STATEMENTS ，允许同时运行（active状态）的SQL数。 -1不限。  
2、MEMORY_LIMIT 'memory_units kB, MB or GB' ， 设置资源队列中所有SQL允许的最大内存使用量。 -1不限（但是受前面提到的数据库或系统参数限制，触发OOM错误。）。  
SQL的内存使用限制不仅受资源队列限制，同时还受到参数限制：  
2\.1 参数gp_resqueue_memory_policy=none时，限制同Greenplum Database releases prior to 4.1。  
2\.2 参数gp_resqueue_memory_policy=auto时，如果设置了会话的statement_mem参数，或者设置了statement_mem参数时，单条QUERY允许申请的内存将突破资源队列的MEMORY_LIMIT限制。  
例子  
```  
=> SET statement_mem='2GB';  
=> SELECT * FROM my_big_table WHERE column='value' ORDER BY id;  
=> RESET statement_mem;  
```  
注意，还有一个系统参数max_statement_mem，这个可以理解为SEGMENT级别的内存使用安全控制阀，单个QUERY申请的memory不能超过max_statement_mem。  
意思是你可以随便改会话级的statement_mem参数，但是不要随便改max_statement_mem参数。  
建议的max_statement_mem设置：  
```  
(seghost_physical_memory) / (average_number_concurrent_queries)  
```  
2\.3 参数gp_resqueue_memory_policy=eager_free时，表示数据库在评估SQL对内存的申请渴望时，分阶段统计，也就是说一个SQL可能总共需要申请1G内存，但是每个阶段只申请100MB，所以需要的内存实际上是100MB。  
使用eager_free策略，可以降低QUERY报内存不足的可能性。  
3、MAX_COST float，设置为浮点或指数（(for example 100.0)，(for example 1e+2)），-1不限制。  
表示资源组允许同时执行的QUERY加起来的COST上限。COST是SQL执行计划中的总成本。  
4、COST_OVERCOMMIT boolean，当系统空闲时，是否允许(TRUE)超过max_cost的限制。  
5、MIN_COST float，（资源超限时，是需要排队的）但是，当QUERY的成本低于min_cost时，不需要排队，直接运行。(也就是说小查询，就让他跑吧。)  
6、PRIORITY={MIN|LOW|MEDIUM|HIGH|MAX}，指当前资源队列的优先级，当资源紧张时，优先将CPU资源分配给高优先级的资源队列。（处于高优先级的资源队列中的SQL，可以获得更高优先级的CPU资源）。建议将实时性要求高的查询对应的用户分配到高优先级的资源队列中。  
类似LINUX CGROUP中的CPU资源组，real time task和普通task的时间片策略。  
### 二、修改资源队列限制举例：  
```  
ALTER RESOURCE QUEUE myqueue WITH (MAX_COST=-1.0, MIN_COST= -1.0);  
```  
### 三、如何将用户放到资源队列中，举例：  
```  
ALTER ROLE sammy RESOURCE QUEUE poweruser;  
```  
### 四、资源队列相关参数  
1、gp_resqueue_memory_policy，资源队列的内存管理策略，前面讲了用法。  
2、gp_resqueue_priority，是否使用资源队列的优先级。ON使用，OFF不使用。不使用资源队列优先级时，所有队列公平对待。  
3、gp_resqueue_priority_cpucores_per_segment，每个SEGMENT可以使用的CPU核数，例如8核的机器，跑了2个PRIMARY SEGMENT，则配置为4。master 上面如果没有其他节点，配置为8。  
当发生CPU抢占时，优先级高的资源组中运行的SQL，优先分配CPU资源。  
4、gp_resqueue_priority_sweeper_interval，CPU时间片统计间隔，SQL执行时，计算它的share值（根据优先级以及计算gp_resqueue_priority_cpucores_per_segment出来）。  
越小越频繁，优先级设置带来的效果越好。但是overhead越大。  
### 五、建议的资源队列使用方法：  
1、GPDB默认的资源队列为pg_default，如果不创建队列，那么所有的用户都会被指定给pg_default。这是非常不建议的。  
建议的做法是为每个用户创建一个资源队列。（因为通常一个数据库用户对应一个业务。不同的数据库用户可能对应不同的业务或者使用者（例如业务用户、分析师用户、开发者、DBA等）。）  
2、超级用户发起的SQL请求不受资源队列的限制，仅仅受前面讲到的参数的限制。因此如果要使用resource queue来限制资源的使用，那么就不建议业务使用超级用户来执行QUERY。  
3、ACTIVE_STATEMENTS表示资源队列中，允许同时执行的SQL。（注意当QUERY的成本低于min_cost时，不需要排队，直接运行。）  
4、MEMORY_LIMIT，设置资源队列中所有SQL允许的最大内存使用量。前面讲了突破方法，statement_mem设置的优先级更高，可以突破resource queue的限制。  
注意所有资源队列的内存加起来不要超过gp_vmem_protect_limit的限制。  
5、通过配置资源队列的优先级，可以区分不同的业务。例如出报表的业务优先级最高，其次是普通业务，其次是分析师。这样的情况，我们可以创建3个资源队列，分别使用MEDIUM|HIGH|MAX的优先级。  
6、如果每个时间段的资源需求不一样，可以写一个CRONTAB任务，定时的调整资源队列的限制。  
例如白天分析师的优先级更高，晚上处理报表的队列优先级更高。  
目前Greenplum还不支持按时间段来设置资源限制，所以只能外部部署任务，alter resource queue来实现。  
7、通过gp_toolkit提供的视图，可以观察资源队列的资源使用。  
```  
gp_toolkit.gp_resq_activity              
gp_toolkit.gp_resq_activity_by_queue     
gp_toolkit.gp_resq_priority_backend      
gp_toolkit.gp_resq_priority_statement    
gp_toolkit.gp_resq_role                  
gp_toolkit.gp_resqueue_status  
```  
### 六、限制了资源队列但是并发执行的QUERY依旧很高，原因分析
当我们创建了资源队列，但是你发现并没有限制住并发时，可能是什么原因呢？  
因为在资源队列中有一个开关，如果SQL的COST低于设置的值时，SQL依旧被放行，实际上就是简单的小SQL，不会和大SQL一样排队。   
就好像银行的窗口，取钱业务通常可以很快办理，但是开卡的业务需要很久。那么在排队时，我们可以让取钱的业务不排队，直接去窗口办理。   
但是，这里也可能存在问题，你怎么就知道他一定是来取钱的呢？万一他也来办卡呢？   
在数据库中，有COST来标识，但是记住，他需要依赖准确的统计信息，否则可能COST不准确，例如一张1亿的表，我们没有收集统计信息的话，记录数就是0，那么对这个表的查询操作COST算出来就会很低。   
这样的话，大SQL也被混入执行中。   
所以，此时请关注，你的统计信息是否准确。     
[《Greenplum 统计信息收集参数 - 暨统计信息不准引入的broadcast motion一例》](../201712/20171211_03.md)   
## 参考  
http://greenplum.org/docs/best_practices/workloads.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")