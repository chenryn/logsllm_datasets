conditions (such as time, locations, events, etc.) for hiding its mali-
cious activities that cannot be easily triggered. Further, dynamic
analysis alone tends to be heavyweight, less suitable for processing
a large number of apps (on the order of hundreds of thousands or
even millions). Development of e(cid:130)ective techniques to make the
imprint discovery more comprehensive and highly scalable is the
aim of our research (Section 3).
Assumptions. Our study focuses on the apps capable of producing
network tra(cid:129)c that carries identi(cid:128)able imprints. A small portion of
real-world apps do not generate tra(cid:129)c at all or do not have unique
tokens in their communication (cid:131)ows, which are outside the scope
of our study. Also we do not consider the tra(cid:129)c tokens introduced
by an app’s server-side logic, since these tokens could be altered by
the server. Further, given the limitations of today’s NGFW, which
does not work well on stateful tra(cid:129)c signatures, all the imprints
generated in our research are combinations of the invariable tokens
within a single packet. Finally, it is important to note that the ob-
jective of our study is to generate imprints to serve network-based
PHA detection and app management, which are widely deployed
within organizations today and become increasingly important to
ISPs and carriers. Our imprint generation approach is based on
code analysis and independent from the network protocol (HTTP
or HTTPS) adopted by apps. In this study, we focus on HTTP
tra(cid:129)c as a (cid:128)rst step, since the overwhelming majority of apps are
HTTP-based [14]. For HTTPS tra(cid:129)c, a trusted HTTPS proxy need
to be placed MITM to scan the cleartext of the tra(cid:129)c for matching
with the generated imprints [33].
3 FINDING IMPRINTS WITH TIGER
Here we elaborate the design and implementation of Tiger, starting
with a high-level description of the idea and the architecture of our
system and then coming to technical details, particularly those of
the IPE technique.
3.1 Overview
As mentioned earlier, Tiger is designed for a comprehensive, scal-
able analysis of Android apps, automatically identifying invariable
tokens in the apps’ network tra(cid:129)c. (cid:140)e key idea here is to stat-
ically locate all network sinks within an app, and then slice and
prune the program to identify the statements related to putative
invariants before partially executing the simpli(cid:128)ed slice to generate
the invariant tokens if they indeed exist. To serve this purpose,
Tiger includes a suite of technical innovations: it (cid:128)rst run a coarse
(yet fast) slicing to establish a relation between a statement (more
precisely its variables) and a set of internal sources of invariants
(e.g., constant values, manifest or other resource content); among
such statements, it further performs a di(cid:130)erential analysis to (cid:128)nd
the variables whose values have no impact on possible invariable to-
kens. By assigning concrete values (instantiation) to such variables,
the IPE avoids the cost for back-tracking the statements a(cid:130)ecting
these variables, and also produces a simpli(cid:128)ed slice (with fewer
statements) that can be quickly executed to obtain the tokens for
constructing the app’s tra(cid:129)c imprints.
Architecture. Figure 1 illustrates the architecture of Tiger, which
includes the pre-processing module, IPE engine (with coarse slicing,
di(cid:130)erential analysis and cross-slice optimization), partial execution
module and imprint generator. (cid:140)e pre-processor disassembles
an app, locates all its network sinks (the APIs for sending mes-
sages) and builds up call graphs (CG) of the app. (cid:140)e IPE performs
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA817Figure 1: Architecture of Tiger.
Figure 2: An example showing how instantiated slicing (cid:128)nds
a token.
both coarse slicing and di(cid:130)erential analysis for each sink, selects
the invariant-related statements and runs these statements to ac-
quire invariable tokens through the partial execution module. (cid:140)e
generator constructs an imprint for the app using all the tokens
found.
An example. Here we use an example (Figure 2) to walk through
the whole imprint discovery process. (cid:140)e code fragment in the
(cid:128)gure is from a popular Chinese app com.tjsinfo.mangguoVideo.
Once the sink statement at Line 7 is discovered by the pre-processor,
the IPE starts working on the variable v5 which represents an object
of HTTP request, slicing the program backward until the statement
at Line 5 with variables v1 and v4 encountered. So we need to
check whether any variable among v1 and v4 a(cid:130)ects v5. A(cid:137)er
running a coarse slicing (at the method level) on both variables,
v1 is determined to be unrelated to any invariant source within
the app while v4 does. So we instantiate v1, and further slice back
on v4. We (cid:128)nd that the content of v4, once adjusted, causes the
change on a signi(cid:128)cant portion of the sink’s output. (cid:140)at portion
is considered to be a putative token. Going further up the control
(cid:131)ow, the IPE (cid:128)nds that two new variables v2 and v3 at Line 3
impact v4 through function f . (cid:140)is triggers a di(cid:130)erential analysis
in which the IPE changes the content of v2 or v3 while (cid:128)xing
the other before running the partial slice toward the sink. (cid:140)e
analysis result reveals that v2 does not contribute to the putative
token. Hence, both v1 (unrelated to any invariable sources) and
v2 (not a(cid:130)ecting any invariable token) are assigned with concrete
values, allowing the slicing to continue without exploring their
corresponding branches. During this process, the IPE continuously
checks the methods discovered along the CFG: if any of them shows
up within a known slice (for a di(cid:130)erent sink within an app), the
output of the method is instantiated based upon prior (cid:128)ndings.
In the end, a simpli(cid:128)ed slice is constructed as illustrated in the
(cid:128)gure in bold font. (cid:140)e slice is then executed to produce the out-
put for the sink, which con(cid:128)rms that the putative output is in-
deed an invariant. (cid:140)is invariant, which is actually a collection
of tokens (data, nid, 93535c6092f543e8a257ee435a69da06), is
further compared with those produced by other apps. If it is only
present in the tra(cid:129)c of this app, the invariant is reported as one
of the app’s imprints. When a NGFW performs PHA detection/ac-
cess control and (cid:128)nds a network packet containing the imprint, we
say com.tjsinfo.mangguoVideo is identi(cid:128)ed. In the following we
elaborate how these components work.
3.2 Instantiated Slicing
Critical to the high-performance design of Tiger is its IPE engine,
which given a set of network sinks discovered by the preprocessor,
quickly identi(cid:128)es the statements related to possible invariants pro-
duced by these sinks and further runs the statements to recover the
tokens in the tra(cid:129)c. Serving this purpose is a unique instantiated
slicing technique. More speci(cid:128)cally, program slicing discovers a
set of statements (called a program slice) that a(cid:130)ect variables at
some point of interest (the network sinks in this case). Execution
of the slice leads to the disclosure of the variables’ values. However,
this conventional approach does not scale well on complicated pro-
grams, due to the di(cid:129)culties in keeping track of potentially a large
number of paths. To address these challenges, towards a highly
e(cid:129)cient, scalable invariant discovery, our IPE engine is designed
to prune within the sink-related paths, leaving only a small set of
statements related to potential invariants. (cid:140)is is achieved through
testing a variable’s relevance to tokens, including a coarse slicing
and di(cid:130)erential analysis, and instantiating less essential variables
to avoid exploring their branches. (cid:140)is approach enhances the
performance of the slicing step by at least one order of magnitude,
as observed Section 4.3, and achieves the accuracy (0.742% false
detection rate and 98.54% app coverage, see Section 4.2). Following
we (cid:128)rst describe the pre-processing step that discovers the network
sinks and then explicate our unique slicing technique.
Pre-processing. (cid:140)e preprocessor is designed to locate network
sinks within an app and also convert the code to the form that
can be easily analyzed by the IPE. Speci(cid:128)cally, our implementa-
tion (cid:128)rst disassembles the app’s DEX bytecode to the SMALI1 in-
termediate representation [35] and then builds a call graph (CG)
across di(cid:130)erent methods within the app based on the idea from
Flowdroid [8]2. (cid:140)en within each method involving network sinks
(APIs) like org.apache.h(cid:138)p.client.H(cid:138)pClient.execute(), its control-
(cid:131)ow graph (CFG) is created for the follow-up slicing analysis. Our
approach further builds CFGs3 for other methods whenever the
backward slicing goes across the procedure boundary and enters
these methods.
1We choose to use SMALI instead of a simpler IR (e.g., Jimple) since SMALI can
represent the original bytecode in a more accurate way.
2Similar with Flowdroid, our CG construction approach takes into consideration the
callback and message handling mechanisms. But currently, we do not support the
resolution of re(cid:131)ective calls.
3We acknowledge that we do not handle ICC while building CFGs.
IPE ENGINEIMPRINT GENERATORSinksCFGPDTtoken collectionsimprintsAndroidAppsPRE-PROCESSORapp disassemblernetwork sinklocaterCFGconstructorpartial executortotototototokekekekekeken n n cococollllllllllllececectitititititionononsssssSlicecoarse slicinganalyzerdifferentialanalyzercross-slice optimizerinvariants generatorcross-appchecker1.  publicvoida(arg1, arg2, …){ 2.       …3.       v4 = f(v1, v2, v3);4.       …5.       v5 =  v1 + v4;6.       …7.      (HttpClient.execute(((HttpUriRequest)v5));8.       …9.  }instantiate due to coarse slicingHTTP requestittitdtinstantiate due to differential analysisputative invariantSession D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA818into these functions whenever possible, unless the variable received
from a method (through parameters with which it calls the sink
method) is considered highly likely to have an impact on the tra(cid:129)c
invariants.
Speci(cid:128)cally, Tiger is designed to strategically analyze the la-
beled variables from the app’s initial slice, only extending those
likely to a(cid:130)ect tra(cid:129)c tokens while instantiating others. In this way,
we can minimize the cost of inter-procedural slicing, remove all
non-essential functions and their subtrees (the ones rooted at the
function calls) and only execute the simpli(cid:128)ed slice to discover
target network invariants. For this purpose, our approach performs
two correlation analyses on each variable to identify irrelevant vari-
ables (which are instantiated later): coarse slicing and di(cid:130)erential
analysis. Note that our approach does not sacri(cid:128)ce accuracy. Tiger
achieves over 98% coverage with 0.74% false detection rate (see
Section 4.2).
Sources of invariants and coarse slicing. A key observation we
leverage for irrelevant variable identi(cid:128)cation is that almost always,
a tra(cid:129)c token produced by an app’s network sink originates from
some constant values within the program, such as constants, re-
source and manifest (cid:128)les. For example, package names appear in
an app’s manifest (cid:128)le; domain names are o(cid:137)en hardcoded in the
code or stored in the resource (cid:128)le. In our research, we found that all
invariants observed from 100 randomly sampled apps exactly come
from these sources. (cid:140)erefore, we consider constant, manifest and
resource (cid:128)les of an app as its sources of invariants and expect that
invariable tokens in the app’s tra(cid:129)c all have a data-(cid:131)ow related to
these sources. (cid:140)is observation enables us to simplify the slicing
operation by stopping the backward analysis on the variables unre-
lated to these sources. Speci(cid:128)cally, for each variable encountered
in PDT, Tiger quickly evaluates its contributions to the network
invariants through a coarse slicing: for the variable returned from a
function (including the return value and the (cid:128)eld of a global object),
our approach inspects the CG to extract a subgraph of calls invoked
by the function and (cid:128)nds out whether any method on the subgraph
contains a source of invariants; if none of them do, the variable is
considered irrelevant. An example is that, in Figure 3, the return
variable of D does not need to be sliced.
(cid:140)is approach does not slice callees within a function. Instead it
quickly goes through code statements of each callee and the callee’s
subgraph to (cid:128)nd the constants and Android system APIs calls which
access source of invariants (e.g., android.os.Bundle.getString-
Array() for reading from the manifest and android.content.res.
Resources.getString() for accessing to the resource (cid:128)les). Fig-
ure 3 presents an example. As we can see here, v6 in method
C() depends on the return value of method D(). (cid:140)en coarse slic-
ing quickly looks into the method D() and its subgraph to check
whether any source of invariants exists there. In this example, there
only exist APIs for acquiring geo-location, which do not access any
sources of invariants, indicating that v6 is irrelevant to the source
and should be instantiated.
Di(cid:130)erential analysis. Di(cid:130)erential analysis is another technique
for removing irrelevant variables from the slicing targets, when
these variables cannot be identi(cid:128)ed through the coarse slicing. For a
function that returns a variable in the PDT, the di(cid:130)erential analysis
identi(cid:128)es a subset of the function’s inputs (any variables de(cid:128)ned
Figure 3: Example of backward slicing. (cid:135)e initial slice is in
method B, which is highlighted.
Backward slicing. For each network sink, Tiger then conducts
backward slicing to discover the statements a(cid:130)ecting invariable
tokens sent out through the sink. Speci(cid:128)cally, starting from the
input parameters of a sink API (e.g., v in the API org.apache.h(cid:138)p.
client.H(cid:138)pClient.execute(v)), our approach goes backward on the
CFG of the method containing the sink (called sink method) to
build an initial slice with all the statements within the method that
directly or indirectly in(cid:131)uence the sink. In the meantime, Tiger also
constructs a Possibly Dependent Tree (PDT) for the method, with all
variables potentially related to the output invariants. Speci(cid:128)cally,
for each statement on the slice, if it does not involve a function call,
its variables are then added to the PDT. For example, in Figure 3,
suppose that in method B, v3 is the content sent out at a network
sink, and a statement on the slice is v3 = v2 at Line 9. (cid:140)en v2
is added to the PDT with an edge from v2 to v3. Further Tiger
slices back to Line 8. (cid:140)e statement assigns a return value of a
function call to v2. So Tiger adds a node C (which represents a
return variable) and an edge from C to v2. Tiger assumes that the
returned variable is a(cid:130)ected by all the inputs (ar❕1 and v4) of the
function C(), therefore adds these variables to the PDT and labels
them for a later revisit. (cid:140)en our approach continues to slice the
method until all its input variables are on the PDT. (cid:140)is process
results in an initial slice as illustrated in the grayed box at the right-
hand side of Figure 3, in the form of a tree rooted at the network
sink.
(cid:140)e initial slice is for a single method, the one containing the
sink. (cid:140)e next step, naturally, is to extend the slice across proce-
dures, to include related statements in the functions it calls and
those in the methods that call it. Also, the variables on these state-
ments (e.g., v1, F .a and D in Figure 3) need to be added to the PDT.
(cid:140)e challenge here is the complexity of analyzing these methods,
which requires not only slicing their code but traversing the CG
to work on other methods they trigger or those that invoke them.
Also stepping into such methods signi(cid:128)cantly raises the chance
to encounter the program structures hard to process, loops in par-
ticular. Although techniques exist for estimating the number of
iterations for each loop [40] or unwinding iterations [15], they are
heavy-weight and less accurate. So our strategy is to avoid ge(cid:138)ing
1.method A(){2.       …3.       B(v1);4.       …5.  }6.method B(arg1){7.       …8.       v2 = C(arg1, v4);9.       v3= v2;10.      …11.  }12.method C(arg1, arg2){13.      …14.v5 = F.a;15.      v6 = D();16.v7 = android.content.res.Resouces.getString();17.      … 18.  }v3method Bmethod Cmethod ACv2v4arg1v1F.a19.method D(){20.      …21.      v8 = E();22.      …23.  }method DDEreturn variablevariableassignfunction inputreturn variable whose function contains constantsetturnvariiiabbblllevariiabblleassiig24.method E(){25.return Location.getLatitude() + “ “ + Location.getLongitude();26.  }gnffunctiioniinputigmethod EgLagLoSession D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA819Figure 4: Example of di(cid:130)erential analysis.
outside the function before its use within the function, including
the parameters from its caller, return variables from its internal
calls and global variables) that do not contribute to the tra(cid:129)c token,
and instantiates them with concrete values.
(cid:140)e whole idea of di(cid:130)erential analysis comes from a key observa-
tion: given a function whose output is either a string or the content
serializable to a string (e.g., JSONObject), if any of its inputs indeed
contributes to the tra(cid:129)c token, the inputs must also a(cid:130)ect the in-
variable part of this function’s output, which serves to propagate
invariable data from the inputs related to sources of invariants to
the tra(cid:129)c invariant portion; in other words, any input indepen-
dent of the function’s invariable output will not relate to the sink’s
invariant. Based on this observation, our approach (cid:128)rst identi(cid:128)es
the invariable part of a function’s output and utilizes a lightweight
partial execution to test whether any input has an impact on this
invariable portion. Speci(cid:128)cally, consider a function with n inputs
and a return variable R. (cid:140)rough the coarse slicing, Tiger is able
to identify some of the inputs that do not contribute to the tra(cid:129)c
token by checking their relations to the sources of invariants. Let
I0, · · · , Ik (0 ≤ k < n) be such irrelevant variables. (cid:140)en we test
whether any variable of Ik +1, · · · , In contributes to the invariable
portion of R. Note that in the case that all inputs are irrelevant,
R is instantiated directly as discussed before. Also, when none of