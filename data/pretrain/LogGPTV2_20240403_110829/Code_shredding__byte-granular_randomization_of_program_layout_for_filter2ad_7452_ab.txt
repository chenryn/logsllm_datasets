The Threat Model:
• The execution environment is assumed to have data ex-
ecution prevention system or equivalent enabled, or in
other words all writable regions on memory are non-
executable.
• During execution, the attacker somehow successfully
overwrites a part or whole of the content of a code
pointer to an arbitrary value.
• Prior to the rewriting, the attacker is able to obtain a
leaked address within the program image.
It can be
any address except for the address overwritten to, men-
tioned above.
Desired Properties:
• Security: Under the threat model presented above the
ability to infer the location of instruction to execute
from the leaked address should be limited to the great-
est extent, i.e., having the (cid:191)nest randomization granu-
larity possible.
• Compatibility: The requirement for recompilation should
be minimized, while preserving the integrity of the orig-
inal program as much as possible.
Note that other aspects not listed above such as those concerning
the eﬀects on execution environment or performance will not be our
main focus in this paper although they will be mentioned brie(cid:192)y.
3. DESIGN
To solve the problems stated above, we propose a novel defen-
sive approach, code shredding, which detects invalid control-(cid:192)ow
transfers caused by code pointer modi(cid:191)cation. In this section we
describe its overview and design. Brie(cid:192)y described, this scheme
consists of (1) conversion of addresses into specially-encoded self-
validating addresses, and (2) validation of target addresses used
in control (cid:192)ow transfer instructions at their execution. Below we
describe these procedures in more detail.
3.1 Self-Validating Address
A self-validating address is simply generated in the following
way:
• perform a checksum calculation on the bits at the (cid:191)xed posi-
tion of the address (we refer to these bits as input bits), and
• place the checksum value as the bits at another (cid:191)xed position
of the same address (similarly, checksum bits).
An address is considered valid if the calculated checksum from
the input bits matches the checksum bits. It is called self-validating
because the information needed to validate an address is self-contained,
as opposed to other methods that must compare the address with
other(e.g., saved) values. Unless the attacker knows how to perform
the computation, it is impossible for them to generate, with enough
success probability, a valid address that can be used for code-reuse
attacks. In addition, if it is impossible to infer the checksum value
of any other input value from a given valid converted address, it
provides byte-granularity randomization. This can be realized, for
example by using a secure hash function which satis(cid:191)es such prop-
erty and feeding the input value combined with a random value
which is hidden from the attacker.
311
Figure 2: a self-validating address
Some design choices for self-validating addresses include the po-
sition and length of the input and checksum bits. For this proposal
we place the checksum bits at the position higher(more signi(cid:191)cant)
than input bits, and make checksum bits shorter than input bits, as
illustrated in Figure 2. The actual length and position are con(cid:191)g-
ured considering the size of available memory space, the size of
program image, and the level of security to assure.
3.2 Conversion
To be able to distinguish invalid addresses from valid addresses,
the valid addresses must be converted in advance. There is no point
of converting an address after it has been modi(cid:191)ed by an attacker, so
it is desirable to convert it as soon as the address is generated. There
are basically two types of address generation to consider: addresses
generated before program execution starts, and those dynamically
generated after.
For those generated before, the loading of program image must
be hooked, and absolute addresses that exist in the image must be
located and converted. The locating of such addresses is possible
using the relocation information on the executable. This implies
that our proposal assumes the existence of such side information,
but this is the same condition assumed by ASLR, and is relatively
easy to satisfy thanks to the widespread of ASLR.
Addresses dynamically generated during program execution are
mainly return addresses from function calls, so call instructions
must be hooked and the return address written to the stack must
be converted. There are some other occasions, mostly application
or loader speci(cid:191)c, where absolute addresses are dynamically gen-
erated which will be discussed later.
3.3 Validation
Validation is done just before the execution of a control (cid:192)ow
transfer instruction. It calculates the checksum value in the same
manner as it is done in conversion and compares the calculated
value with the checksum value embedded in the address. If they
match, the address is considered valid, and otherwise it is consid-
ered invalid. Upon detection of an invalid transfer, the execution
can be halted or be continued depending on the policy. To continue
execution after validation, the address must be converted back to
the original address where the actual code exists, but this proce-
dure can be omitted as described later.
3.4 Segments
For the following discussions, and also to make the above de-
scription more comprehensible, we introduce the notion of seg-
ments. As the result of applying this design decision, letting Ninp
be the length of input bits and Nchk be the length of checksum bits,
we observe 2Nchk consecutive blocks of memory regions, each block
having the size of 2Ninp bytes. We will refer to these blocks as seg-
ments. Each segment must be at least the size of the original pro-
gram image, for each byte in segment corresponds to each byte of
original program image. Depending on the value of checksum, any
valid address will belong to one of these segments.
Increasing the length of checksum bits increases the security
strength because addresses are distributed over larger space, low-
ering the success probability of guessing attacks. The pattern of
dispersion which designates which address belongs to which seg-
ment, can be randomized by feeding a random value as a part of its
input. By choosing a new random value, say, for every process, the
valid code will appear to be located in random segments from the
perspective of attackers, making them diﬃcult to specify them in
their exploit codes, as shown in Figure 3.
Figure 3:
two patterns of speci(cid:191)able destination addresses
dispersed across multiple segments, randomized diﬀerently in
each execution (each square represents a byte).
Example.
Here we show an example, with its layout illustrated in Figure
4. Assuming 32-bit memory address space, let an address be rep-
resented by 0xKKAXXXXX where the input bits are bits 1 – 20
denoted by X’=XXXXX, checksum bits are bits 21 – 24 denoted
by A, and remainder bits are bits 25 – 32 represented by K which
are don’t-care bits in this example. Let Hash() be a hash function
from 20 bits space to 4 bits space, and R be a random constant
chosen uniformly random from 20 bits space. We de(cid:191)ne an ad-
dress valid if it satis(cid:191)es A = Hash(R + X’). Then any address orig-
inally existed in the program will, after conversion, belong to one
of the 16 segments 0xKK000000 – 0xKK0FFFFF, 0xKK100000
– 0xKK1FFFFF, ··· , 0xKKF00000 – 0xKKFFFFFF depending on
the calculated value A. For example, any address satisfying A =
Hash(R + X’) = 1 would belong to 0xKK100000 – 0xKK1FFFFF.
Figure 4: memory layout of the given example
3.5 Code Mirroring
With the approach above, a converted address does not actually
point to an executable code and thus requires that, after validation,
the address be converted back to point to the segment where code
312
actually exists. Here we propose an extensive idea, code mirror-
ing for eliminating the need for this by actually placing executable
code in each segment, letting the execution continue at the desti-
nation pointed by the converted address. Figure 5 illustrates the
eﬀect on execution (cid:192)ow when code mirroring is introduced, and di-
agram (c) shows dotted arrows and solid arrows overlapping with
each other because now converted addresses can be treated as a real
address unmodi(cid:191)ed. Consequently, the control (cid:192)ow will proceed in
an interesting manner; a switch to a random segment occurs upon
every execution of monitored control transfers instructions.
Lastly, we show the overall (cid:192)ow of our system in Figure 7, for the
case with single loaded image. Note that the procedures p1 and p2
enclosed by dotted lines are in trade-oﬀ relations, i.e., when code
mirroring is applied p1 is required but p2 is not, and vice versa.
Figure 5:
code mirroring, (c) code shredding with code mirroring
(a) normal execution, (b) code shredding without
Figure 7: (cid:192)owchart of procedures of our scheme.
An obvious drawback of this scheme is the additional use of
memory space, which is non-negligible because it increases expo-
nentially with the number of checksum bits, or linearly with the
number of segments created for each image. To alleviate this over-
head, we believe that intra-process memory mapping which allows
mapping of identical objects on virtual address space to the same
physical memory space (Figure 6). This may be implemented with
system APIs, such as mmap on Linux or MapViewOfFile on Win-
dows. While such APIs are usually used for (cid:191)le mapping or sharing
memory contents among diﬀerent processes, here we use it within
the same virtual address space of a single process. Note that an
idea similar to intra-process memory mapping has been proposed
as VMA Mirroring[30], as discussed later.
Figure 6: intra-process memory mapping
3.6 Overall View
313
4.
IMPLEMENTATION
In this section we describe the prototype implementation of our
proposal. It is implemented for the Windows/IA-32 platform using
the Intel Pin dynamic binary instrumentation framework[7]. Pin is
a process-level VMM that JIT compiles code as the targeted pro-
gram executes, and allows instrumentation of additional code. Note
that our implementation is used for a brief evaluation in this paper
and is still an ongoing work. Some functions such as intra-process
memory mapping has not been implemented yet, but it should not
greatly aﬀect basic feasibility nor performance.
4.1 Conversion
Pre-Generated Addresses
We hook the end of program image loading, and copy the loaded
program image to each segments which are allocated. This is when
we convert the pre-generated addresses. Generally, PE (cid:191)les have
metadata called relocation table for (cid:191)nding absolute addresses hard-
coded in the program image for relocation purposes, so we (cid:191)nd
these addresses by parsing the entries of the associated table which
can be located from header information. Our conversion targets are
code pointers, so in this implementation we make all data pointers
in all segments point to the data section of the (cid:191)rst segment. The
decision to determine whether the address points to data or code is
done by investigating the (cid:192)ags of the section of the destination. If it
has a write (cid:192)ag, it is considered data and is not considered subject
for conversion. This is shown to be not suﬃcient in some cases and
will crash some programs, and this problem is discussed later.
Note that with this setup, we have a great property such that, al-
though each program image is loaded at diﬀerent memory locations
their contents will be exactly the same, which implies that it can be
eﬀectively shared by intra-process memory mapping.
Dynamically Generated Addresses
All CALL instructions generate a return address which is pushed
onto the stack when they are executed, so these instructions must be
hooked for address conversion. One straightforward way for doing
this is by hooking the instruction followed by the CALL instruc-
tion, and directly modify the return address stored on the stack. For
performance reasons, we instrumented code that emulates a call in-
struction that does the conversion at the same time, avoiding the
need for the second memory access.
4.2 Validation
The destinations of all control (cid:192)ow transfer instructions that re-
fer to absolute addresses are subject for validation. On IA-32, they
are absolute JMP, absolute CALL, and RET instructions, so we set
hooks on all of these instructions. Note that we do not need to
consider relative control (cid:192)ow transfer instructions because such in-
structions all take immediate operand on this architecture which
cannot be targeted by our attack model because they cannot be
overwritten. After hooking, the destination address is calculated
and then validated.
4.3 Loader-Speci(cid:191)c Considerations
Our prototype implementation is for the Windows system, and
because we made no modi(cid:191)cations to the loader, there are some
special considerations required where interactions with the loader
occur. Some of the information about internals of Windows or
its API speci(cid:191)cations mentioned below can be referred to at the
MSDN website[20].
• Handles: Windows uses data objects called handles to re-
fer to system objects such as processes, (cid:191)les, and threads.
For images (or modules) which are our main concern, their
handle is essentially a pointer to the base address of the im-
age, which implies that the value of handles are relocated
depending on where the image is loaded. The system of-
ten uses a handle as an ID of an object, not as an address,
so it would be problematic if handles are regarded as an ad-
dress for our conversion, because then the system would not
be able to recognize them. Therefore, when parsing through
the relocation table to look for pre-generated addresses, if an
address points to the base address, we leave it unconverted
as it is most likely used as a handle. For the same reason,
when some Windows APIs such as LoadLibrary or GetMod-
uleHandle return handles, we leave them unconverted. Note
that, on the other hand, it may have a side-eﬀect causing a
problem if handles are used as addresses.
• DLL Entrypoints: DLLs often (though are not required to)
have an entrypoint function de(cid:191)ned, which are called on cre-
ation/termination of threads and processes, and also on calls
of LoadLibrary/FreeLibrary APIs to perform initializations
and cleanups. The absolute addresses of these entrypoint
functions are stored in the internal database of the loader, and
they point to the image loaded at the original base address,
causing false-positives when they are dispatched. Therefore,
when image loading is hooked, we parse through the loader
database which is accessible from PEB(Process Environment
Block), and convert these entrypoint addresses as soon as
they are registered.
• GetProcAddress: This API takes as its argument a module
handle and a procedure name, returning the address of the
speci(cid:191)ed procedure. However, the returned address turns out
to be an unconverted address, and this is most likely because
of how functions are exported in windows. The address is
probably calculated by adding the base address of the image
and the RVA(Relative Virtual Address), the oﬀset from the
base address, obtained from the export table. To avoid this
problem we hook the returning from of this API and convert
the return value.
• GetModuleHandleEx: This API is used to obtain a mod-
ule handle from the argument pointing to the name of im-
age name to look for. However, when it is called with the
dwFlags argument with an appropriate bit set, it accepts an