title:Increased DNS forgery resistance through 0x20-bit encoding: security
via leet queries
author:David Dagon and
Manos Antonakakis and
Paul Vixie and
Tatuya Jinmei and
Wenke Lee
Increased DNS Forgery Resistance
Through 0x20-Bit Encoding
SecURItY viA LeET QueRieS
David Dagon
Georgia Institute of
Technology
Manos Antonakakis
Georgia Institute of
Technology
PI:EMAIL
PI:EMAIL
Paul Vixie
Internet Systems Consortium
PI:EMAIL
Tatuya Jinmei
Internet Systems Consortium
PI:EMAIL
ABSTRACT
We describe a novel, practical and simple technique to make DNS
queries more resistant to poisoning attacks: mix the upper and
lower case spelling of the domain name in the query. Fortuitously,
almost all DNS authority servers preserve the mixed case encoding
of the query in answer messages. Attackers hoping to poison a DNS
cache must therefore guess the mixed-case encoding of the query,
in addition to all other ﬁelds required in a DNS poisoning attack.
This increases the difﬁculty of the attack. We describe and measure
the additional protections realized by this technique. Our analysis
includes a basic model of DNS poisoning, measurement of the ben-
eﬁts that come from case-sensitive query encoding, implementation
of the system for recursive DNS servers, and large-scale real-world
experimental evaluation. Since the beneﬁts of our technique can be
signiﬁcant, we have simultaneously made this DNS encoding sys-
tem a proposed IETF standard. Our approach is practical enough
that, just weeks after its disclosure, it is being implemented by nu-
merous DNS vendors.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Reliability, availability, and ser-
viceability.
General Terms
Measurement, Security, Standardization.
Keywords
DNS poisoning, DNS-0x20, computer security.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
Wenke Lee
Georgia Institute of
Technology
PI:EMAIL
1.
INTRODUCTION
DNS poisoning attacks present a persistent, ongoing threat to
server operations. While there are a variety of DNS poisoning tech-
niques, those directed at large cache servers often use two steps:
(a) they force the recursive server to perform a lookup; and then
(b) spoof misleading DNS answers, using the source address of the
authority server. A successful attacker can change a DNS cache
entry, and redirect all users of the victim DNS server to arbitrary
proxy locations. When done to obtain transactional information
(e.g., banking), this technique is called pharming (or large-scale
phishing) [27].
Numerous solutions have been proposed to prevent DNS poison-
ing, e.g., whitelisting [14], cryptographic systems [33], and many
client-based systems have been suggested. Solutions requiring changes
to the DNS infrastructure, however, face larger hurdles in deploy-
ment. For example, DNSSEC [5] and DLV [34] use cryptography
to provide strong DNS messaging integrity. However, these ap-
proaches require signiﬁcant changes to the world’s DNS infrastruc-
ture: the signing of zones, the creation of policies to manage those
keys, and the deployment of DNSSEC-aware clients and servers.
Other DNS security solutions contemplate even larger changes to
the network infrastructure, e.g., the creation of DHT-based naming
or cooperative naming systems that replace DNS [24, 37]. Even if
these systems prevent poisoning, they are more likely to ﬁnd adop-
tion in new, developing network architectures, such as P2P systems,
compared to existing network systems. DNS is so widely used, de-
ployed in tens of millions of systems, and so central to every other
protocol, that one must expect it will survive the creation of novel
replacement solutions.
The goal of our work is to devise practical security solutions for
DNS that make resolvers more resistant to poisoning. Speciﬁcally,
we desire the creation of DNS light-weight forgery-resistance tech-
nology that has several properties:
1. No Radical Changes. DNS improvements should ideally re-
quire no large-scale replacement or modiﬁcation of existing
DNS infrastructure. (If large changes were needed, one could
argue that zone owners should instead just deploy DNSSEC.)
2. Protocol Stability.
Improvements should require no alter-
ation of the DNS protocol, which would in turn require reim-
plementation of DNS server and client code. (Surveys have
shown there are tens of millions of DNS servers deployed
world-wide, many on embedded devices [8, 25]. Amending
them to handle a new protocol is likely cost-prohibitive.)
3. Backward Compatible. Any improvements should be op-
tional, and not disrupt other technologies that rely on existing
DNS standards.
We present a defense technique against poisoning that satisﬁes
these requirements. We propose the mixed-case encoding of query
and reply messages between recursive and authority servers. For
example, instead of querying for www.example.com, recursive
DNS servers would instead query for wwW.eXamPLe.cOM, or
some other pattern of case variations.
Since almost all authority DNS servers preserve the case encod-
ing of DNS queries, bit-for-bit, as presented by the recursive server,
only the recursive servers need to change how they format ques-
tions.
The pattern of mixed-case encoding of domain names, unique to
each transaction between DNS initiators and responders, provides
an additional means to track messages between servers. We call our
encoding system “DNS-0x20” after the bit position used to manip-
ulate case.
The main contributions of this paper include:
• We propose DNS-0x20, a simple change to the formatting of
DNS queries. We have implemented DNS-0x20, and have
offered the technology as an IETF standards proposal [32].
At this writing, the proposal has progressed to working group
status. As further proof that our scheme is practical, work-
able, and useful, numerous DNS vendors (at this writing) are
now incorporating DNS-0x20 encoding into their servers and
products–just weeks after the idea was ﬁrst proposed.
• We present an in-depth analysis of the cache poisoning at-
tack and the ID ﬁeld vulnerability. We use an basic model of
DNS poisoning, but extend it to consider parameters (e.g.,
server diversity) commonly used in DNS operations. We
show that DNS-0x20 encoding increases message integrity
far more than authority and recursive diversiﬁcation.
• To show how DNS-0x20 encoding improves resolver secu-
rity, we study the number of additional bits available, based
on a large-scale DNS trafﬁc trace. For short domains, of
course, the beneﬁts are less. Nonetheless, since each ad-
ditional bit doubles the search space of the attacker, even
small improvements obtained through DNS-0x20 results in
a query stream that is exponentially harder to successfully
attack. While not offering complete security, our system sig-
niﬁcantly raises the bar.
Section 2 presents a succinct overview of DNS, and essential
background on DNS poisoning. Readers already familiar with DNS
may skip to Section 3, where we offer a model of DNS poisoning.
Our encoding system is presented in Section 4, and is evaluated in
Section 5.
2. BACKGROUND
A critically-important component of the Internet infrastructure,
the Domain Name System (DNS) [21, 22], maps between names
and addresses. DNS is a complex protocol with numerous control-
ling RFCs. We therefore focus on only those details relevant to
DNS forgery attacks. Readers requiring a more general overview
may consult [31].
2.1 DNS Overview
In DNS, domain names are composed of labels, separated by pe-
riods, which correspond to namespaces in a hierarchical tree struc-
ture. Each domain is a node, and the bottom-up concatenation of
nodes creates a fully qualiﬁed domain name. A zone is collection
of such nodes, constituting a separate tree structure, with the zone’s
start of authority, or SOA, at the apex. The contents of the SOA (ei-
ther mappings of labels to hosts, or further downward delegation),
is available from “DNS authority servers”. In DNS nomenclature,
these authority servers are sometimes called the SOA.
There are two other DNS resolvers typically involved in poison-
ing attacks: recursive resolvers, and (less frequently) stub resolvers.
A recursive resolver is what one normally thinks of as a “DNS
server”. Such resolvers accept queries from users, understand the
zone hierarchy system, and properly implement the various rules
and RFCs to obtain and cache answers.
DNS initiators on host machines are called stub resolvers. They
typically don’t interact with the zone hierarchy, and with a few ex-
ceptions, don’t cache answers.
Instead, they implement enough
DNS logic to pose basic queries to recursive servers.
A short example illustrates how these three classes of DNS sys-
tems interact. Assuming no intermediate caching, resolving a do-
main name like www.example.com potentially requires numer-
ous steps:
• First, the stub resolver sends the query to the recursive server.
In our example, we assume no previous resolutions whatso-
ever remain cached.
• Next, the recursive resolver consults with the root servers,
which are the authority for the empty label (the dot, “.”,
implicit at the end of all fully qualiﬁed domain names). In
this example, the root servers would indicate a downward
delegation of the “com.” zone to other authority servers.
(For example, the client might be told to visit the DNS server
at a.gtld-servers.net., run by VeriSign, and further
be given the IP address of that DNS server as “glue” to avoid
additional lookups).
• Next, the recursive server will consult with the “com.” zone
authority servers, which again will indicate further down-
ward delegation to the example.com. zone. (For exam-
ple, instead of being given an answer, the client might be
told next to visit ns1.example.com., or the appropriate
authority server for the zone.1)
• Next, the recursive server consults the example.com. zone,
which would reveal the host address record (or “A record”)
for www.example.com.
• Finally, the answer is returned to the stub resolver, and cached
by the recursive resolver to assist in future resolutions.
Each one of these consultations involves the recursive resolver
expecting an answer from a remote authority server–either an in-
dication of further delegation or a terminating RRset. A DNS poi-
soner could anticipate or induce this chain of resolutions and, be-
fore the authority responds, inject false answers with spoofed source
addresses. This form of DNS poisoning is a packet race. The re-
cursive servers accept whichever answer arrives ﬁrst–so long as the
arriving message matches a few simple transactional requirements.
1At this writing, the NS for the example.com are the hosts a and
b in the zone iana-servers.net; however, we’ve simpliﬁed
this sample to presume an authority at ns1.example.com.
Figure 1: Simpliﬁed model of DNS resolution, and poisoning.
2.2 DNS Poisoning
To better understand the transactional issues in DNS poisoning,
we can reduce the complexity of DNS lookups into a simpliﬁed
model. Figure 1 shows a basic conceptual model of these three
DNS actors critical to a DNS poisoning attack. In Figure 1, the
stub resolver ﬁrst queries a caching server (labeled A? in the dia-
gram). Since in our example, the recursive lacks a cache entry for
the query, it contacts the authority server (labeled SOA in the dia-
gram). The answer (labeled IN A in Figure 1) is returned to the
recursive server, which caches and sends the answer to the stub.
Note that we have omitted any reference to the zone hierarchies.
For purposes of our analysis, DNS has but a single messaging
format, whether used to ask or answer a query. The protocol for-
mat for DNS messages includes a 16-bit ID ﬁeld, and a query ﬁeld
holding a wire representation of the domain name. Figure 1 shows
how the ID ﬁeld is used to establish the uniqueness of each mes-
sage.
A DNS poisoner’s task, in the simple case, is to guess the 16-bit
query ID ﬁeld. Figure 1 shows a DNS poisoner offering several
(spoofed source) DNS answers to a recursive server (indicated as
the “crafted IN A” answers in the diagram). If the attacker guesses
the ID ﬁeld, and her packet arrives before the authority server’s
answer, the recursive server will accept and cache her malicious
answer.
Clearly, DNS poisoners are most effective when they can guess
the ID ﬁeld. Early versions of DNS servers deterministically in-
cremented the ID ﬁeld (until OpenBSD developer Theo de Raadt
suggested they be randomized). In [19, 16], Klein demonstrated
that if the ID ﬁeld is not securely randomized, it can be attacked
successfully after a few interactions with the server.
Because there are only 65,536 possible ID ﬁeld values, previous
work has noted the use of birthday attacks, and techniques to ex-
ploit weak random number generation [15, 16, 17, 18, 19, 28], see
also [37].
Accordingly, some DNS implementers have sought additional
sources of entropy to protect server messaging. D.J. Bernstein [9]
ﬁrst suggested using the UDP source port ﬁelds, to show additional
correspondence between queries and answers. In this approach, re-
cursive DNS servers would send a query, using a random 16-bit
source port, and (conceptually) listen over some 65K open sockets
for the appropriate reply. Not all source ports might be used (for
example, one might want to avoid well known ports < 1024 typi-
cally used by other protocols) [12], and of course pools of sockets