3.3 Plaintext Recovery
The ciphertext side channel can also be exploited to recover
the plaintext from some of the ciphertext blocks. To recover
plaintext from the ciphertext, the adversary ﬁrst needs to build
a dictionary of plaintext-ciphertext pairs for the targeted reg-
isters, and then make use of the dictionary to recover the
plaintext value of the registers of interest during the execution
of a sensitive application.
3.3.1 Attack Primitive
During some NAE events, the guest kernel may exchange
register states with the hypervisor through GHCB. Thus, the
plaintext value of speciﬁc registers can be learned when these
register states are stored in the GHCB. The hypervisor can
thus collect plaintext-ciphertext pairs for those registers. Be-
cause different registers have different offset in the VMSA
and different physical addresses, we need to build the dictio-
nary of plaintext-ciphertext pairs for each register separately.
There are two ways to collect such pairs, depending on
who stores the register values to GHCB. First, for those NAE
events where the hypervisor returns emulated registers to the
guest VM, the hypervisor may clear the P bit of the instruc-
tion page that triggers the NAE events before VMRUN. Thus,
after the VC handler use IRET to return to the original in-
struction page, an NPF will occur, and the hypervisor can
obtain the ciphertext of corresponding registers while han-
dling this NPF. Figure 2a shows an example about collecting
plaintext-ciphertext pairs of RAX from IOIO_PROT events
(ioread). The hypervisor records the plaintext of RAX when
emulating the VMEXIT and obtains the ciphertext of RAX
when handling the NPF caused by IRET.
Second, for those NAE events where the VM exposes reg-
isters to the hypervisor, the hypervisor may periodically clear
the P bit of the VC handler code and record the ciphertext of
all registers in VMSA whenever there is an NPF triggered
by the VC handler code. At the next NAE, the plaintext of
722    30th USENIX Security Symposium
USENIX Association
int main( ) {…    int a = sum(10);int b = expand(10);…}int expand(int i){return i+10;}int sum(int n){int result = 0;for (int i= 0; imov    %eax,-0x8(%rbp)mov    $0xa,%edicallq5fa push   %rbpmov    %rsp,%rbp…mov    -0x8(%rbp),%eaxpop    %rbpretqpush   %rbpmov    %rsp,%rbpmov    %edi,-0x4(%rbp)…retqCaller functionCalleefunctions❷❸❶Exitcode: 100000004NPF0[CR3, RIP,  RSP,  RAX, RBP, RDI, …][0, 0, 0, 0, 0, 0, …]Exitcode: 100000014[CR3, RIP,  RSP,  RAX, RBP, RDI, …][0, 1, 1, 0, 1, 1, …]Exitcode: 100000014[CR3, RIP,  RSP,  RAX, RBP, RDI, …][0, 2, 1, 2, 1, 1, …]NPF1NPF2the RAX state from GHCB to RAX register after VMGEXIT.
In the iowrite cases, the RAX state after the VC handler
ﬁnishing handling an iowrite exception and before returning
to the sequential instruction, should be the same as the RAX
state passed to the hypervisor in the VMGEXIT.
In our case of DebugDumpCmos in PlatformPei PEIM,
the hypervisor can observe 128 IOIO_PROT events with
SW_EXITINFO1 being 0x700210 (indicating that the guest
VM is accessing CMOS/RTC information) and increasing
RAX values from 0x00 to 0x7f. The hypervisor can also trap
the sequential instruction by clearing the P bit of the physical
address of the PlatformPei PEIM’s EntryPoint, which will
be accessed after the guest VM exiting the VC handler. The
guest physical address of EntryPoint is always 0x83a000 in
our setting. Note that the hypervisor can also easily locate
the physical address of the PlatformPei PEIM because the
plaintext of the OVMF ﬁle is known by both the guest VM
owner and the hypervisor [3] for in-place encryption during
the remote attestation.
Each IOIO_PROT event in DebugDumpCmos helps the hy-
pervisor record the ciphertext of a known RAX plaintext value
in VMSA when handling the NPF caused by returns to the
PlatformPei PEIM. After the DebugDumpCmos, the hypervi-
sor can build a dictionary with 128 plaintext-ciphertext pairs
in total, where the plaintext are from 0x00 to 0x7F. Some other
IOIO_PROT events with the same SW_EXITINFO1 can also
occur during the execution of DebugDumpCmos. The hypervi-
sor can distinguish those events by looking at the ciphertext of
RFLAG/RIP ﬁeld in VMSA since all target iowrites inside
DebugDumpCmos have the same RFLAG/RIP value.
3.3.3 Other Plaintext-ciphertext Pairs
In this section, we show other plaintext-ciphertext pairs the ad-
versary may collect during the boot period of a SEV-enabled
VM. We also analyze plaintext recovery under different
OVMF versions and different build conﬁgurations.
All data shown in this section were collected on a
workstation with 8-Core AMD EPYC 7251 Processor.
The OVMF version used to boot the SEV-ES-enabled
VMs may vary according to different settings that we
will illustrate later. The victim VMs were conﬁgured
as SEV-ES-enabled VMs with one virtual CPU, 4 GB
DRAM, and 30 GB disk storage. The host and guest
OS kernel were forked from branch sev-es-v3, and the
QEMU version was QEMU sev-es-v12. All code is directly
downloaded from AMD’s Github repository [5] (com-
mit:96f2b75aaa9801646b410568d12b928cc9f06e0c,
Nov, 25th, 2020). We only performed the attacks on SEV-ES
machines, as SEV-SNP machines were not available to us at
the time of writing. But SEV-SNP is equally vulnerable (see
Section 6).
Plaintext Range. To show the potential plaintext range the
hypervisor can collect, we monitored all NAE events which
(a) ioread event.
(b) iowrite event
Figure 2: Workﬂow of how VC handler handles IOIO_PROT
events.
some registers will be written to the GHCB, and their corre-
sponding ciphertext can be found from the last VC handler
triggered NPF. Figure 2b shows an example about collecting
plaintext-ciphertext pairs of RAX from IOIO_PROT events
(iowrite). The hypervisor obtains the ciphertext of RAX
either when handling the VC-exception-triggered NPF after
the NAE event or when handling the NPF caused by IRET
and learns the plaintext of RAX when handling the VMEXIT.
3.3.2 Examples
The adversary could use the NAE VMEXITs to collect a
dictionary of plaintext-ciphertext pairs for certain registers
stored in VMSA. Here we present a method that leverages the
IOIO_PROT (error code = 0x7b) NAE VMEXIT events to
collect the ciphertext of the RAX register when its plaintext
values are 0 to 127.
Building the dictionary of plaintext-ciphertext pairs. Dur-
ing the PEI phase, the guest VM needs to access the mem-
ory region that stores the information about the Nonvolatile
BIOS settings (CMOS) and the Real-Time Clock (RTC)
through IO ports 0x70 and 0x71. The OVMF code ensures
the correctness of the CMOS/RTC by calling a function
named DebugDumpCmos when loading the PlatformPei PEI
Module (PEIM) during the initialization of the guest VM.
DebugDumpCmos checks the CMOS/RTC by writing the off-
set of CMOS/RTC to port 0x70 and then reading one byte
of data from port 0x71. DebugDumpCmos enumerates offset
0x00-0x7f (i.e., 0-127) during the PEI phase to access the
CMOS/RTC information.
In both SEV-ES and SEV-SNP, every iowrite and ioread
in IOIO_PROT are ﬁrst trapped and handled by the VC han-
dler. The VC handler and the hypervisor then cooperate to
emulate iowrite and ioread as shown in Figure 2. For
iowrite, the VC handler copies the RAX value to GHCB
before calling VMGEXIT. For ioread, the VC handler copies
USENIX Association
30th USENIX Security Symposium    723
VMCPUKVMioreadAE#VCVChandlerNAEVMEXIThandlerSaveVMstatesLoadVMstatesNextIns…ReadRAXfromGHCBWriteportinfoVMGEXITWriteRAXtoGHCBReadportinfoEmulateVMRUNRestoreRegsIRETVChandlerNPFVMCPUKVMiowriteAE#VCVChandlerNAEVMEXIThandlerSaveVMstatesLoadVMstates…WriteRAXtoGHCBWriteportinfoVMGEXITReadRAXfromGHCBReadportinfoEmulateVMRUNRestoreRegsIRETVChandlerNextInsNPFNPFTable 3: Number of NAE events observed during boot period and registers state range maybe exposed. Num: the number of NAE
event being observed. *: state to hypervisor. **: state from hypervisor, N/A: not observed. -: this register is not supposed to be
used during this NAE event. Range R1: numbers of different exposed register states lying in [0,1], Range R2: [0,15], Range R3:
[0,127], Range R4: [0,264-1].
NAE Event
Code
Num
DR7 Read*
DR7 Write*
RDTSC*
RDPMC*
RDPMC**
CPUID*
CPUID**
IOIO_PROT*
IOIO_PROT**
RDMSR*
RDMSR**
WRMSR*
RDTSCP**
0x27
0x37
0x6e
0x6f
0x6f
0x72
0x72
0x7b
0x7b
0x7c
0x7c
0x7c
0x87
0
1
0
0
0
35328
35328
260648
246527
1261
1261
12532
0
RAX
R2
R1
R3
N/A N/A N/A
N/A N/A N/A
N/A N/A N/A
0
-
6
5
16
15
-
4
4
0
-
6
6
128
82
-
4
6
0
-
2
1
2
2
-
2
1
R4
N/A
N/A
1
-
N/A
276
18
8717
9033
-
51
10363
N/A
RBX
R1 R2 R3 R4
-
-
-
-
-
-
-
-
-
-
-
-
15
2
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
2
-
-
-
-
-
-
-
-
-
-
-
-
3
-
-
-
-
-
-
N/A N/A N/A
R1
-
-
-
-
2
1
-
-
0
-
0
R2
-
-
-
-
11
2
-
-
0
-
0
R3
-