# 使用连接命令连接到容器
在前面的练习中，您看到了如何使用`docker exec`命令在运行的容器实例中启动一个新的 shell 会话，并在其中执行命令。`docker exec`命令非常适合快速访问容器化的实例，用于调试、故障排除和理解容器运行的上下文。
但是，正如本章前面所述，Docker 容器按照容器内运行的主进程的生命周期运行。当此过程退出时，容器将停止。如果您想要直接访问容器内的主进程(与辅助外壳会话相反)，那么 Docker 提供`docker attach`命令来附加到容器内的主运行进程。
当使用`docker attach`时，您获得了对容器中运行的主进程的访问。如果这个过程是交互式的，例如 Bash 或 Bourne shell 会话，您将能够通过`docker attach`会话(类似于`docker exec`)直接执行命令。但是，如果容器中的主进程终止，整个容器实例也会终止，因为 Docker 容器生命周期取决于主进程的运行状态。
在下面的练习中，您将使用`docker attach`命令直接访问 Ubuntu 容器的主进程。默认情况下，该容器的主进程为`/bin/bash`。
## 练习 1.03:连接到 Ubuntu 容器
`docker attach`命令用于附加到主进程上下文中正在运行的容器。在本练习中，您将使用`docker attach`命令连接到正在运行的容器，并直接研究主容器`entrypoint`过程:
1.  Use the `docker run` command to start a new Ubuntu container instance. Run this container in interactive mode (`-i`), allocate a TTY session (`-t`), and run it in the background (`-d`). Call this container `attach-example1`:
    ```
    docker run -itd --name attach-example1 ubuntu:latest
    ```
    这将使用最新版本的 Ubuntu 容器映像启动名为`attach-example1`的新 Ubuntu 容器实例。
2.  Use the `docker ps` command to check that this container is running in our environment:
    ```
    docker ps 
    ```
    将显示正在运行的容器实例的详细信息。请注意，这个容器的主要进程是一个 Bash shell ( `/bin/bash`):
    ```
    CONTAINER ID    IMAGE            COMMAND          CREATED
      STATUS              PORTS               NAMES
    90722712ae93    ubuntu:latest    "/bin/bash"      18 seconds ago
      Up 16 seconds                           attach-example1
    ```
3.  Run the `docker attach` command to attach to the primary process inside this container, (`/bin/bash`). Use `docker attach` followed by the name or ID of the container instance:
    ```
    $ docker attach attach-example1
    ```
    这应该会让您进入这个容器实例的主 Bash shell 会话。请注意，您的终端会话应该更改为根 shell 会话，这表明您已经成功访问了容器实例:
    ```
    root@90722712ae93:/#
    ```
    这里需要注意的是，使用`exit`之类的命令来终止 shell 会话将导致容器实例停止，因为您现在已经连接到容器实例的主进程。默认情况下，Docker 提供快捷键序列 *Ctrl* + *P* 然后 *Ctrl* + *Q* 来优雅地脱离`attach`会话。
4.  Use the keyboard combinations *Ctrl* + *P* and then *Ctrl* + *Q* to detach from this session gracefully:
    ```
    root@90722712ae93:/# CTRL-p CTRL-q
    ```
    注意
    您不会键入`CTRL-p CTRL-q`字样；相反，您将按住 *Ctrl* 键，按下 *P* 键，然后松开两个键。然后，再次按住 *Ctrl* 键，按下 *Q* 键，然后再次松开两个键。
    成功卸下容器后，在返回您的主终端或 PowerShell 会话之前，将显示`read escape sequence`字样:
    ```
    root@90722712ae93:/# read escape sequence
    ```
5.  Use `docker ps` to verify that the Ubuntu container is still running as expected:
    ```
    $ docker ps
    ```
    将显示`attach-example1`容器，仍按预期运行:
    ```
    CONTAINER ID    IMAGE            COMMAND          CREATED
      STATUS              PORTS               NAMES
    90722712ae93    ubuntu:latest    "/bin/bash"      13 minutes ago
      Up 13 minutes                           attach-example1
    ```
6.  Use the `docker attach` command to attach once more to the `attach-example1` container instance:
    ```
    $ docker attach attach-example1
    ```
    您应该回到主进程的 Bash 会话中:
    ```
    root@90722712ae93:/#
    ```
7.  Now, terminate the primary process of this container using the `exit` command. In the Bash shell session, type the `exit` command:
    ```
    root@90722712ae93:/# exit
    ```
    终端会话应该已经退出，让您再次回到主终端。
8.  Use the `docker ps` command to observe that the `attach-example1` container should no longer be running:
    ```
    $ docker ps
    ```
    这应该不会返回正在运行的容器实例:
    ```
    CONTAINER ID    IMAGE            COMMAND              CREATED
      STATUS              PORTS               NAMES
    ```
9.  Use the `docker ps -a` command to view all the containers, even ones that have been stopped or have exited:
    ```
    $ docker ps -a
    ```
    这将显示处于停止状态的`attach-example1`容器:
    ```
    CONTAINER ID      IMAGE                COMMAND 
      CREATED            STATUS    PORTS           NAMES
    90722712ae93      ubuntu:latest        "/bin/bash"
      20 minutes ago     Exited (0) 3 minutes ago  attach-example1
    ```
    如您所见，容器在大约 3 分钟前已经优雅地终止(`Exited (0)`)。`exit`命令优雅地终止一个 Bash shell 会话。
10.  Use the `docker system prune -fa` command to clean up the stopped container instances:
    ```
    docker system prune -fa
    ```
    这将删除所有停止的容器实例，包括`attach-example1`容器实例，如以下输出所示:
    ```
    Deleted Containers:
    ry6v87v9a545hjn7535jk2kv9x8cv09wnkjnscas98v7a762nvnw7938798vnand
    Deleted Images:
    untagged: attach-example1
    ```
在本练习中，我们使用`docker attach`命令直接访问正在运行的容器的主进程。这与我们在本章前面探讨的`docker exec`命令不同，因为`docker exec`在运行的容器中执行一个新的进程，而`docker attach`直接附加到容器的主进程。然而，当连接到容器时，必须小心注意不要通过终止主要过程来停止容器。
在下一个活动中，我们将把本章中介绍的 Docker 管理命令放在一起，开始组装构建块容器，这些容器将成为全景漫游微服务应用栈。
## Ac 活动 1.01:从 Docker 集线器中提取并运行 PostgreSQL 容器映像
全景徒步旅行是我们将在本书中构建的多层网络应用。与任何 web 应用类似，它将由一个 web 服务器容器(NGINX)、一个 Python Django 后端应用和一个 PostgreSQL 数据库组成。在开始部署 web 应用或前端 web 服务器之前，必须先部署后端数据库。
在本练习中，要求您使用默认凭据启动 PostgreSQL 版本 12 数据库容器。
注意
官方 Postgres 容器映像提供了许多环境变量覆盖，您可以利用它们来配置 PostgreSQL 实例。查看位于 https://hub.docker.com/_/postgres Docker 中心的容器文件。
请执行以下步骤:
1.  创建一个 Postgres 数据库容器实例，作为我们应用栈的数据层。
2.  使用环境变量在运行时配置容器，以使用以下数据库凭据:
    ```
    username: panoramic
    password: trekking
    ```
3.  验证容器是否运行正常。
**预期输出:**
运行`docker ps`命令时，应返回以下输出:
```
CONTAINER ID  IMAGE         COMMAND                 CREATED
  STATUS              PORTS               NAMES
29f115af8cdd  postgres:12   "docker-entrypoint.s…"  4 seconds ago
  Up 2 seconds        5432/tcp            blissful_kapitsa
```
不〔t0〕你
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor316)找到。
在下一个活动中，您将在容器实例中访问刚刚在此活动中设置的数据库。您还将与容器交互，以获取容器中运行的数据库列表。
## Ac 活动 1.02:访问全景徒步应用数据库
他的活动将涉及使用命令行界面工具访问容器实例中运行的数据库。使用凭据(`panoramic/trekking`)登录后，您将查询容器中运行的数据库列表。
请执行以下步骤:
1.  使用 PSQL 命令行实用程序登录 Postgres 数据库容器。
2.  Once logged in to the database, return a list of databases in Postgres by default.
    注意
    如果您不熟悉 PSQL CLI，下面是一个参考命令列表，可帮助您完成本练习:
    登录:`psql --username username --password`
    列出数据库:`\l`
    退出 PSQL 外壳:`\q`
**预期输出:**
![Figure 1.3: Expected output of Activity 1.02 ](img/B15021_01_03.jpg)
图 1.3:活动 1.02 的预期产出
注意
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor318)找到。
# 总结
在本章中，您学习了容器化的基础知识、在容器中运行应用的好处，以及管理容器化实例的基本 Docker 生命周期命令。您了解到容器是一个通用的软件部署包，真正可以一次构建并在任何地方运行。因为我们在本地运行 Docker，所以我们可以肯定地知道，在我们的本地环境中运行的相同容器映像可以在生产中部署，并且可以放心地运行。
使用`docker run`、`docker start`、`docker exec`、`docker ps`和`docker stop`等命令，我们通过 Docker CLI 探索了容器生命周期管理的基础知识。通过各种练习，我们从同一个基本映像启动容器实例，使用`docker exec`配置它们，并使用其他基本容器生命周期命令(如`docker rm`和`docker rmi`)清理部署。
在本章的最后一部分，我们从头开始，通过启动 PostgreSQL 数据库容器实例，朝着运行全景徒步应用迈出了第一步。使用我们在`docker run`命令中放置的环境变量，我们创建了一个用默认用户名和密码配置的实例。我们通过从容器内部执行 PSQL 命令行工具并查询数据库以查看模式来测试配置。
尽管这只是 Docker 能力的表面，但我们希望它能够激发您对即将到来的章节中涵盖的材料的兴趣。在下一章中，我们将讨论使用`Dockerfiles`和`docker build`命令构建真正不可变的容器。编写定制的`Dockerfiles`来构建和部署独特的容器映像将展示大规模运行容器化应用的能力。**