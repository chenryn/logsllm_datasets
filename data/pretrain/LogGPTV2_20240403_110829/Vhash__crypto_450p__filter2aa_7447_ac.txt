    memcpy(&vctx->state[27], "r do", 4uLL);
    memcpy(&vctx->state[28], "ctor", 4uLL);
    memcpy(&vctx->state[29], " abo", 4uLL);
    memcpy(&vctx->state[30], "ut v", 4uLL);
    memcpy(&vctx->state[31], "hash", 4uLL);
}
void vhash_round(vhash_ctx *vctx)
{
    for (int i = 0; i state[i];
    for (int ia = 0; ia state[ia], ia);
        vctx->state[ia] = v1;
    }
    for (int ib = 0; ib state[ib] += vctx->state[((((unsigned int)((ib + 1) >> 31) >> 27) + (uint8_t)ib + 1) & 0x1F)
                                       - ((unsigned int)((ib + 1) >> 31) >> 27)];
    for (int ic = 0; ic state[ic] ^= vctx->state[((((unsigned int)((ic + 7) >> 31) >> 27) + (uint8_t)ic + 7) & 0x1F)
                                       - ((unsigned int)((ic + 7) >> 31) >> 27)];
    uint32_t t = vctx->state[0];
    for (int id = 0; id state[id] = vctx->state[id + 1];
    vctx->state[31] = t;
}
void vhash_update(vhash_ctx *vctx, uint32_t (*in)[4])
{
    for (int i = 0; i state[i] += (*in)[((((unsigned int)((uint64_t)i >> 32) >> 30) + (uint8_t)i) & 3)
    - ((unsigned int)((uint64_t)i >> 32) >> 30)];
    for (int ia = 0; ia state[ib] ^= (*in)[((((unsigned int)((uint64_t)ib >> 32) >> 30) + (uint8_t)ib) & 3)
    - ((unsigned int)((uint64_t)ib >> 32) >> 30)];
    for (int ic = 0; ic state[4 * i],
                vctx->state[4 * i + 1],
                vctx->state[4 * i + 2],
                vctx->state[4 * i + 3]);
    printf("\n");
}
void process_data(const char *data, vhash_ctx* vctx, uint32_t &size, uint32_t len) {
    int done = 0;
    size= 0;
    uint32_t block[4];
    while ( !done )
    {
        memset(block, 0, 0x10uLL);
        for (int i = 0; (unsigned int)i state[" + str(i) + "] = 0x" + c + ";" for i, c in enumerate(chunk(data, 8))]))
def main():
    data = 'e4d6ed47e23694e76f8a611111fd7b52a980e40a718b28256342adc740814a09fa4592e434dbb0b2b5d3405dd554e5b40f432cfb7cbf6fe06d95ed16cc1f1b21f0d5f5b432b0e82c9ce0693ed4caca8cf7a035e48a29fc358d75bb0674d5e0b910252bfc1712a76698662a0ea4441183d4b3d7f1ade921ae47f0b0c641e25813'
    dump_state(data)
main()
```
a to daje nam zawartość dla funkcji `set_initial_state`:
```c
void set_initial_state(const vhash_ctx *vectx) {
    vectx->state[0] = 0xe4d6ed47;
    vectx->state[1] = 0xe23694e7;
    vectx->state[2] = 0x6f8a6111;
    vectx->state[3] = 0x11fd7b52;
    vectx->state[4] = 0xa980e40a;
    vectx->state[5] = 0x718b2825;
    vectx->state[6] = 0x6342adc7;
    vectx->state[7] = 0x40814a09;
    vectx->state[8] = 0xfa4592e4;
    vectx->state[9] = 0x34dbb0b2;
    vectx->state[10] = 0xb5d3405d;
    vectx->state[11] = 0xd554e5b4;
    vectx->state[12] = 0x0f432cfb;
    vectx->state[13] = 0x7cbf6fe0;
    vectx->state[14] = 0x6d95ed16;
    vectx->state[15] = 0xcc1f1b21;
    vectx->state[16] = 0xf0d5f5b4;
    vectx->state[17] = 0x32b0e82c;
    vectx->state[18] = 0x9ce0693e;
    vectx->state[19] = 0xd4caca8c;
    vectx->state[20] = 0xf7a035e4;
    vectx->state[21] = 0x8a29fc35;
    vectx->state[22] = 0x8d75bb06;
    vectx->state[23] = 0x74d5e0b9;
    vectx->state[24] = 0x10252bfc;
    vectx->state[25] = 0x1712a766;
    vectx->state[26] = 0x98662a0e;
    vectx->state[27] = 0xa4441183;
    vectx->state[28] = 0xd4b3d7f1;
    vectx->state[29] = 0xade921ae;
    vectx->state[30] = 0x47f0b0c6;
    vectx->state[31] = 0x41e25813;
}
```
Teraz zostaje już tylko uruchomić `rigged(&vctx,"&username=administrator&", 24);` a to wypisze nam poprawny hash.
Ostatni krok to wysłanie nowych danych razem z hashem na serwer:
```python
import urllib
import requests
def main():
    cookies = {"auth": urllib.quote_plus(
        "39005958a36fcfabc56482ef87d46c3e1aec3c7babbc487dfc73d5c48441f24e67ffb44a2814be8e2e890e282188430b442ec8bea4c18a80cf03568de70b98234395e39a75a541290cf419680a436ec1bc6da7730a130fa71f947b3f43c86c40b5eb983934bc57cbd0802795b5a8760277ff9aa0bdcdc84fa8b20c7eab97af03|username=guest&date=2017-02-13T23:45:45+0000&secret_length=8&\0\0\0\0\0\0\0\0\0\0\0\x80\x00\x00\x00\x00\x00\x00\x45\x00\x00\x00\x00\xff\xff\xff\xff&username=administrator&")}
    result = requests.get("http://thenewandlessbrokenvhash.ctf.bsidessf.net:9292/index.php", cookies=cookies)
    print(result.content)
main()
```
Co daje name `FLAG:06c211f73f4f5ba198c7fb56145b39a2` w odpowiedzi.