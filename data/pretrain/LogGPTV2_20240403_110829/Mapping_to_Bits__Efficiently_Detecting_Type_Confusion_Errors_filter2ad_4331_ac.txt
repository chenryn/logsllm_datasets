as C, A, and the ﬁrst element type of A. Among them, C is
the largest one, as all the other types are directly or indirectly
contained by C. As we start from (t, 0) ([GLOBAL/STACK] and
[HEAP]), GetT ype(t, off) therefore returns the largest type at
(t, off) (nested inside (t, 0)), i.e., the type obtained after a
sequence of ﬁeld accesses starting from (t, 0). In the special
case when off is negative, GetT ype(t, off) returns t itself, as
it is now outside the starting point (t, 0).
THE LARGEST TYPE AT (t, off) ILLUSTRATED FOR FIGURE 2.
TABLE I
(t, off)
(C, 0)
(C, 8)
(C, 12)
(B, 0)
(A, 0)
Possible Types
{C, A, void ** }
{B,int}
{int}
{B,int}
{A,void **}
Largest Type
C
B
int
B
A
In Table I, we list all the possible types at different offsets
off within A, B, and C, including the largest in each case,
for the example program given in Figure 2. For example, at
(C,8), the largest type is B. Note that the type of the virtual
table pointer in A is denoted as void **.
3) An Example: In Figure 7, we show how to apply our
rules given in Figure 5 to analyze a simple C++ program,
which includes one safe downcast in line 2 and one unsafe
downcast
in line 9. In each case, we focus on how the
type information of an object is initialized, propagated, and
determined during the pointer analysis.
In this example, we give only the instructions related to
our rules. For simplicity, each copy %x = %y here is an
(cid:19)(cid:26)(cid:23)
    // C++
 1: B * bptr = new C; // (C,0)
 2: C * cptr = static_cast(bptr);
 3: [HEAP]
A *
A *
C *
C *
B *
B *
0
0
0
8
8
8
12
12
12
Virtual Table 
Virtual Table 
Virtual Table 
Virtual Table 
Pointer
Pointer
Pointer
Pointer
int y
int y
int y
int y
int z
int z
int z
int z
 C  Object 
 C  Object 
 C  Object 
// LLVM IR
 3: %1 = call i8* @_Znwm(i64 16)
 4: %5 = %1
 5: %6 = getelementptr i8, i8* %5, i64 8
 6: %12 = %6 
 7: %13 = getelementptr i8, i8* %12, i64 -8
 7: [FIELD]
4: [COPY]
(a) Safe Cast:      (t ,∑ (cid:1867)(cid:1858)(cid:1858)(cid:1861)
(cid:1866)(cid:1861)=1
)  =  (C,  0)  +  ( _ , 8)  +  ( _ , -8)  =  (C , 0) 
5: [FIELD]
5: [FIELD]
 6: [COPY]
 6: [COPY]
    // C++
 8: B * bptr = new B; // (B,0)
 9: C * cptr = static_cast(bptr);
    // LLVM IR
10: %18 = call i8* @_Znwm(i64 4)
11: %22 = %18
12: %23 = getelementptr i8, i8* %22, i64 -8
(b) Unsafe Cast:       (t ,∑ (cid:1867)(cid:1858)(cid:1858)(cid:1861)
(cid:1866)(cid:1861)=1
)  =  (B,  0)  +  ( _ , -8) = (B , -8) 
 12: [FIELD]
10: [HEAP]
11: [COPY]
C *
B *
Out-of-Bound
Out-of-Bound
Out-of-Bound
int y
int y
int y
B  Object
B  Object
-8
-8
0
0
Fig. 7. An example illustrating the rules in our pointer analysis. For example, the label “3:[HEAP]” means [HEAP] is applied in line 3.
RULE APPLICATION FOR THE CODE IN FIGURE 7.
TABLE II
Rule
[HEAP]
[COPY]
[FIELD]
[COPY]
[FIELD]
[HEAP]
[COPY]
[FIELD]
Inst. (Line #) Pointer Pointed-to Object Type
(C,0)
(C,0)
(C,8)
(C,8)
(C,0)
(B,0)
(B,0)
(B,-8)
objC
objC
objC.8
objC.8
objC
objB
objB
objB.−8
%1
%5
%6
%12
%13
%18
%22
%23
3
4
5
6
7
10
11
12
abstraction of several LLVM-IR instructions. The notations
such as %x and %y represent virtual registers in LLVM-IR.
As they act as top-level pointers in program analysis, we use
them directly to represent pointers in the following discussion.
• Safe Cast. Let us consider the safe cast in the top part of
Figure 7. We start with by issuing a points-to query pt(%13)
in line 7, i.e., pt(cptr) in line 2. During the demand-
driven pointer analysis, the IR instruction for allocating
a heap object, denoted objC, in line 3 is analyzed. By
applying [HEAP], we obtain pt(%1) = {objC} such that
P OS(objC, (C, 0)), highlighted by the dotted line labeled
with “3:[HEAP]”. Due to the copy %5 = %1 in line
4, we obtain pt(%5) = pt(%1) = {objC}, highlighted
by the dotted line “4:[COPY]”. The getelementptr
instruction in line 5 performs the pointer adjustment due
to upcasting. According to [FIELD], %6 points to objC
but at its offset 8, indicated by P OS(objC.8, (C, 8)), as
(cid:19)(cid:26)(cid:24)
highlighted by the dotted line labeled with “5:[FIELD]”.
Due to the copy %12 = %6 in line 6, %12 now also
points to objC at its offset 8, highlighted by the dotted line
“6:[COPY]”. In line 7, the getelementptr instruction
performs the pointer adjustment due to downcasting. By
applying [FIELD] again, %13 now points to objC at its be-
ginning, i.e., the offset 0, indicated by P OS(objC, (C, 0)).
Finally, we apply [ASSIGNTYPE] to obtain Type(objC) =
C. Now, we can conclude that cptr in line 2 actually points
to a C object. The type cast is therefore safe.
• Unsafe Cast. Let us consider the unsafe cast in the bottom
part of Figure 7. This time, we start with by issuing a points-
to query pt(%23) in line 12, i.e., pt(cptr) in line 9. When
applying [HEAP] to the IR instruction in line 10, which
allocates a heap object, denoted objB, we obtain pt(%18) =
{objB} such that P OS(objB, (B, 0)) holds. Unlike the safe
cast above, there is no upcasting here. By applying [COPY]
to %22 = %18 in line 11, we ﬁnd that %22 now also points
to objB at its beginning. In line 12, the getelementptr
instruction performs the pointer adjustment due to down-
casting. According to [FIELD], %23 points to objB but at
the offset -8, indicated by P OS(objB.−8, (B,−8)). Finally,
we apply [ASSIGNTYPE] to obtain Type(objB.−8) = B. As
cptr in line 9 points to potentially a B object, TCD will
issue a warning about this unsafe downcast in that line.
In Table II, we summarize the rules applied to the LLVM-IR
instructions given in Figure 7, as explained above.
C. Type Confusion Bug Detector
An LLVM pass is implemented to collect all
the cast
expressions instrumented by our customized C++ compiler
front-end. For a cast expression static_cast(ptr),
we will retrieve its destination type T and the declared type S
of ptr from the metadata associated with its stub.
Let dst = static_cast(ptr), with the pointer
adjustment performed already (Figure 2). So ptr and dst
may not point to the same location. Note that T will be used
directly for detecting type confusion bugs (as shown below)
and S will be used for bug-reporting purposes. As C++ classes
are the main targets of type confusion attacks, we focus on
detecting type confusion errors for C++ classes.
Now, a points-to query pt(dst) is issued. We handle the
following two cases, depending on the types of the objects in
pt(dst):
• Unsafe Casts. static_cast(ptr) is unsafe if
∃ o ∈ pt(dst), the type of o is incompatible with T.
• Safe Casts. static_cast(ptr) is safe if it is
not an unsafe cast.
We can handle reinterpret_cast similarly. It should
be noted that an unsafe cast reported by TCD may be a false
positive (due to, e.g., the lack of path-sensitivity).
D. Implementation
We have implemented TCD in LLVM on top of the
open-source SVF pointer analysis framework [17]. Given a
type in the form of (t, off), Algorithm 1, which implements
GetT ype(t, off) used in [ASSIGNTYPE] (Figure 5), returns the
largest type at a designated byte offset off within a C++ class
type t. A C++ class is represented as a recursive structure,
where its elements can be a C++ class, a primary type or an
array. In addition, the element type of an array can also be a
C++ class, a primary type or an array.
In lines 8 – 15, the while loop ﬁnds an element in the
class t that is closest to the speciﬁed byte offset off. As
the class t has at least one element, the statements in lines
12 – 14 in the while body is expected to be executed at
least once. If the element happens to locate at the given byte
offset, then its type is returned in line 20. Otherwise, we
recursively ﬁnd the type being searched for in line 24. The
function getEleOffset() in line 12 returns the offset of
the speciﬁed element i within a class t and getEleType()
in line 13 is used to retrieve its type. The functionalities of
the other functions are reﬂected in their names.
There is another important implementation detail that is
worth emphasizing, as it is critical to ﬂow-sensitive analysis in
the presence of global object initialization in C++ programs.
In a C++ program (unlike in a C program), global objects
must be initialized with their corresponding C++ constructors
before main() is called. To obtain a ﬂow-sensitive analysis
that respects the original semantics in C++ programs, we
need to analyze the whole program and synthesize a pseudo
entry function before.main() to call all the initializer
functions ﬁrst and then invoke main(). The synthesized
Algorithm 1: GetT ype(t, off) in Figure 5.
Input : A C++ class t and a byte offset off
Output: The largest type at the offset off
return t;
if getEleOffset(t, i) > off then
1 Procedure GETTYPE(t, off)
2 structSize ← getSizeInBytes(t);
3 if (off < 0) || (off % structSize == 0) then
4
5 end
6 off ← (off % structSize);
7 i ← 0;
8 do
9
10
end
11
eleOffset ← getEleOffset(t, i);
12
eleType ← getEleType(t, i);
13
i ← i + 1;
14
15 while i < numOfElements(t);
16 while eleType is an array do
17
18 end
19 if eleOffset == off then
20
21 end