a random edge AS. We require this to hold for any rate of
adoption, although we are especially interested in the impact
in the early adoption phase.
Goal 2 (Prevent hijacks (on average)). Let x be the percentage
of ASes adopting ROV++, and let PHijack,SubP (x) (resp.
PHijack,N onR(x)) be the probability that trafﬁc from a random
edge AS is hijacked by a subpreﬁx hijack (resp. non-routed
preﬁx hijack). Then both probabilities should monotonically
decrease in x. Furthermore, for any given x, PHijack,SubP (x)
and PHijack,N onR(x) should be less than the corresponding
values for ROV.
The previous goal focuses on reducing the probability of
hijacks. However, it does not necessarily translate to increase in
the probability of successful connections to the correct origin,
since some ASes may be disconnected from some preﬁxes.
Indeed, ROV++ would often only be able to prevent hijack,
but it may not be able to ﬁnd a secure path to the correct
origin. We therefore consider a more modest, no-harm goal:
to have successful connection rates not much worse than those
of ROV, and preferably better.
Goal 3 (Do no harm 2: maintain successful connections). Let
PROV (x) (resp. PROV ++(x)) be the probability that trafﬁc
from a random edge AS reaches the correct origin during a
subpreﬁx hijack, where x is the percentage of the ASes that
adopt ROV (resp. ROV++). Then, PROV (x) (cid:47) PROV ++(x)
for all (or most) values of x.
Finally, we mention two non-quantiﬁable yet important
goals: simplicity and ease of deployment.
Goal 4 (Keep It Simple). ROV++ design should be as simple
as possible.
Goal 5 (Easy to Deploy). ROV++ design should be easy to
implement and deploy.
In the above, Goals 1 to 3 are security-oriented goals, while
Goals 4 and 5 are system-oriented goals.
ROV++ meets the goals. In §IV, we prove that ROV++
achieves Goal 1 (see Corollary 1). Our simulation results in
§V show that Goals 2 and 3 are also achieved. In §VI we
present the Lite versions of ROV++, which meet the system
goals. The “do no harm” property achieved by ROV++ is
with respect to what is listed in Goals 1 and 3; ROV++ may
lead to non-necessary disconnections (e.g., due to blackhole
announcements in ROV++ v2).
B. The Preﬁx-hijack Attack Model
Many studies in cryptography and network security are
designed against arbitrary attack strategies and often assume
very powerful attack models such as MitM. ROV and ROV++
focus on the preﬁx-hijack attack model, a more speciﬁc attack
model that allows only a restricted set of attacker operations.
We next explain this attack model and justify why we adopt
it for this study.
The preﬁx-hijack attack model considers an attacker who
controls an AS. The attack method that the attacker exploits
is to send misleading BGP announcements from this AS to
other ASes with whom it has a connection (and relationship).
The misleading BGP announcements incorrectly indicate the
attacking AS as the origin of an IP preﬁx p, not assigned to
6
441.2.3/241.2/16991.2.3/24, 44-6661.2/16, 44-99225487666531.2/16, 87-991.2.3/24, 54-53-44-6661.2/16, 54-53-44-991.2/16, 33-87-9933v2BGPROVHijacked data flowROV++AnnouncementsProviderCustomerAttackerCorrect data flow441.2.3/241.2/16991.2.3/24, 44-6661.2/16, 44-99225487666531.2/16, 87-991.2.3/24, 54-53-44-6661.2/16, 54-53-44-991.2.3/24, 33-87-99 1.2/16, 33-87-9933v3the attacker; the main evaluation metric is the amount of trafﬁc
to preﬁx p that the attacker succeeds in intercepting. We do
not consider impersonation and MitM attacks since there are
widely-deployed mechanisms to prevent them, e.g., IPsec and
TLS.
The main reason that we do not consider other attacks
such as path manipulation or route leakage is that, if not
prevented, preﬁx hijacks are more effective than other attacks.
Speciﬁcally, in other attacks, by deﬁnition, the attacker will
not be the origin, and hence the announcement
it sends
will contain AS-path of length at least two, while a preﬁx
hijack for the same preﬁx will send announcements with
AS-path containing only the attacking AS. Since ASes give
preference to announcements with shorter AS-path, the preﬁx-
hijack announcements are more likely to attract the trafﬁc to
the preﬁx, compared to similar announcements with longer
AS-path (e.g., due to path manipulation or route leakage). The
fact that preﬁx hijack is a more effective attack was conﬁrmed
by simulations, e.g., in [15].
Within the preﬁx-hijack attack model, we focus on pro-
tecting preﬁxes protected by a ROA. Namely, we assume that
an AS that deploys ROV or ROV++ can identify preﬁx/sub-
preﬁx hijacks reliably and correctly through ROAs. This is a
reasonable assumption given that misconﬁgurations of ROAs
have become rare [14]; dealing with ROA failures is out of
the scope of this paper.
C. Detailed Design
As illustrated in §II, a basic mechanism in ROV++ (all
three variants) is to support data-plane blackholing and prefer-
ence to safer paths. For this purpose, each ROV++ AS identi-
ﬁes and maintains holes for incoming announcements, deﬁned
as follows. Suppose an AS X receives a valid announcement
ann and an invalid announcement ann(cid:48), both from the same
neighbor, and ann(cid:48) has a subpreﬁx (i.e., ann(cid:48).pre ⊂ ann.pre),
then X marks that ann has a hole to indicate that if it uses the
path in ann to route data to subpreﬁx ann(cid:48).pre, then the data
will be hijacked. Whenever possible, X chooses a path that
has no hole (i.e., prefer safe path), and blockholes subpreﬁx
ann(cid:48).pre if no safe path is available.
Speciﬁcally, X maintains a table of invalid announcements,
denoted as H. Each announcement hole ∈ H includes the
preﬁx hole.pre and the neighbor AS, hole.from, from which
hole was received. Let A denote the set of non-invalid an-
nouncements (i.e., classiﬁed as valid or unknown by ROV).
Similarly, each announcement ann ∈ A has ann.pre and
ann.from, with three additional attributes: ann.rel that rep-
resents the relationship between ann.from and X (i.e., peer,
provider, or customer), ann.path that represents the AS-path,
and ann.hole that represents the set of holes in ann.pre. Initially
ann.hole is empty, and holes will be added to ann.hole once
identiﬁed (see details below).
In ROV++, the incoming announcements can be standard
BGP announcements (update, withdraw), blackhole announce-
ments (in ROV++ v2 and v3), or preventive announcements (in
ROV++ v3). In the following, we ﬁrst describe the marking of
blackhole and preventive announcements so that a ROV++ AS
can identify them (If only v1 is used, this aspect is not needed).
We then describe the handling of an incoming announcement.
Markings
in blackhole announcements. A ROV++
AS marks a blackhole announcement, allowing subsequent
ROV++ ASes to be aware that the trafﬁc would be blackholed
(dropped). Marking should be transitive, i.e., be propagated
also by ASes which use ROV or plain BGP, to reach ROV++
ASes without requiring direct connections between ROV++
ASes. This can be done in different ways; the best may be
to use an optional transitive BGP attribute [46]. A blackhole
announcement is treated mostly like an invalid announcement
(see details later).
Markings in preventive announcements. Preventive an-
nouncements are marked similarly so that they can be identi-
ﬁed by ROV++ ASes, and not ﬂagged as invalid and dropped
by the ROV mechanism. For example, suppose AS 99 owns the
IP address block 1.2/16, and the issued ROA has the maximum
length of 16. Then a preventive announcement of 1.2.3/24 with
the origin as AS 99 will be ﬂagged as invalid (since 24 is
larger than the maximum length in the ROA) if not marked;
see the full version [43] on detailed examples that show the
advantage of marking preventive announcements. A preventive
announcement is treated mostly like a legitimate announcement
(see details later).
Handling incoming announcements. Algorithm 1 sum-
marizes how ROV++ handles incoming announcements. For
clarity, it does not include the handling of withdrawal an-
nouncements, which are handled in the same manner as in
BGP. Only the most essential procedures are deﬁned in Algo-
rithm 1; the others are deﬁned in Appendix A. The description
is for ROV++ v3, which includes all the three mechanisms in
ROV++; the operations in ROV++ v1 and v2 are (mostly) a
subset, as marked in Algorithm 1.
Consider an incoming announcement ann. We consider two
cases. (i) The announcement ann is determined as valid or
unknown by ROV, i.e., indicated by PASSROV(ann) as being
true, or it is a preventive announcement. In this case, the router
uses UPDATEHOLE(ann,H) to check whether any hole needs
to be added to ann. After that, ann is added to A, and the
router uses DECIDEBESTROUTE to ﬁnd the best route. If the
best route is a new route (i.e., differs from the currently used
best route), then the router needs to perform a sequence of
actions, including removing blackhole, blackhole or preventive
announcements that were set up or sent due to the old route,
and actions for the new route. For the new route, if there
is no alternative safe route for a subpreﬁx, the router sets
up a local blackhole for that subpreﬁx; it further creates a
blackhole announcement for that subpreﬁx if it is received from
a provider or peer, and sends it to customers (in ROV++ v2 or
v3) or according to export policy (in ROV++ v2a). Otherwise,
i.e., there is a safe route, the router decides whether to send
a preventive announcement through SENDPREVENTIVEANN
(to be described later). (ii) The announcement ann is an
invalid or blackhole announcement. In this case, the router
invokes UPDATEHOLE (A, ann), which updates the holes for
all the announcements in A based on ann. If the holes of an
announcement a ∈ A have been updated, then the router uses
DECIDEBESTROUTE to ﬁnd the best route for preﬁx a.pre.
In the above, the procedure UPDATEHOLE takes two sets,
one containing valid announcements whose holes need to
be updated and the other containing one or more invalid
announcements. In the procedure, each valid announcement a
7
DECIDEBESTROUTE (ann.pre)
UPDATEHOLE (ann, H)
Algorithm 1 ROV++ Handling Incoming Announcements.
1: procedure INCOMINGANNOUCEMENT (ann)
2: if PASSROV (ann) or ISPREVENTIVE (ann) then
3:
4: A = A ∪ ann
5:
6: else
7:
8: H = H ∪ ann
9:
10:
11:
12:
13: end if
14: end procedure
// invalid or blackhole announcement
UPDATEHOLE (A, ann)
if ∃a ∈ A s.t. a.hole has been updated then
end if
DECIDEBESTROUTE (a.pre)
if b.pre ⊂ a.pre and a.f rom = b.f rom then
15: procedure UPDATEHOLE (annSet, holeSet)
16: for ∀a ∈ annSet and ∀b ∈ holeSet do
17:
18:
end if
19:
20: end for
21: end procedure
a.hole = a.hole ∪ b
22: procedure DECIDEBESTROUTE (pre)
23: Let u ∈ A be the currently used route for preﬁx pre; set
to NULL if no route exists
else
end for
USE (a)
if u.hole (cid:54)= ∅ then
end if
if a.hole (cid:54)= ∅ then
24: a = FINDBEST (pre)
25: if a (cid:54)= u then
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45:
46:
47:
48:
49:
50:
51:
52:
53: end if
54: end procedure
end if
end for
else
end if
for all hole ∈ u.hole do
REMOVEBLACKHOLE (hole)
// Only for ROV++ v2 and v3
WITHDRAWBLACKHOLEANN (hole)
// Only for ROV++ v3
for all hole ∈ H s.t. hole.pre ⊂ u.pre do
end for
WITHDRAWPREVENTIVEANN (u, hole.pre)
for all hole ∈ a.hole do
BLACKHOLE (hole)
// Only for ROV++ v2 and v3
if ISPARENTORPEER (hole.from) then
SENDBLACKHOLEANN (hole)
// Only for ROV++ v3
for all hole ∈ H s.t. hole.pre ⊂ a.pre do
SENDPREVENTIVEANN (a, hole.pre)
end for
is checked with each invalid announcement b. If a.pre contains
b.pre (i.e., b.pre ⊂ a.pre), and the two announcements
have the same upstream AS (i.e., a.from = b.from), then
a.hole = a.hole ∪ b.
The procedure FINDBEST applies a set of rules,