**Issue Type** (Please check one with "x")
- [x] Bug report => Please search GitHub for a similar issue or PR before submitting
- [ ] Feature request
- [ ] Support request => Please do not submit support requests here. Instead, see [CONTRIBUTING.md](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question)

**Current Behavior**
When using an asynchronous or observable property with `[routerLink]`, the `[routerLinkActive]` directive does not re-evaluate its state when the observable emits a new value.

**Expected Behavior**
The `[routerLinkActive]` directive should re-evaluate whether the link is active whenever the value emitted by the observable changes.

**Minimal Reproduction of the Problem with Instructions**
1. Create an observable that emits a new value periodically.
   ```typescript
   observable$ = Observable.interval(1000).map(i => ['/page/' + i]);
   ```
2. Use this observable in a `[routerLink]` binding.
3. Observe that the `routerLinkActive` class is not updated when the observable emits a new value.
   - For example, if you are on `/page/0`, the link will be active on the first emission, but it will not become inactive once `i > 1`.

**Motivation / Use Case for Changing the Behavior**
Using observables with `[routerLink]` should work seamlessly, and the `[routerLinkActive]` directive should correctly reflect the current state of the route.

**Environment Information**
- **Angular Version:** 2.4.1
- **Browser:** Chrome 55, Windows 10
- **Language:** TypeScript 2.1.4

**Additional Notes**
- This issue affects all browsers, but I have specifically tested it on Chrome 55 on Windows 10.
- If this is related to Ahead-of-Time (AOT) compilation, please provide the Node.js version: `node --version`

**Reproduction Link**
[Provide a minimal reproduction link, e.g., a StackBlitz or GitHub repository]

Thank you for your attention to this issue.