# Smarty 模板注入与沙箱逃逸
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
Smarty 模板是基于 PHP 开发的模板，我们可以利用 Smarty 实现程序逻辑与页面显示（HTML/CSS）代码分离的功能。
模板引擎中花哨的功能导致了模板注入的出现，也就是SSTI。但是在谈及 SSTI 的时候，大家往往还是会去重点关注 python 语言下的 flask
模板，而一些其他语言、其他模板的相关资料反而非常稀缺，这里也是根据红明谷杯的一道题目发现的，我系统学习了 Smarty 的模板注入并进行了总结。
## 前置
###  文档
在模板注入中，我们所利用的都是模板中提供的功能，或者模板中某些功能的漏洞，这就要求我们需要对文档中的有效内容有较高的搜集能力与判断能力。
###  测试环境
写个 demo 来进行测试，具体扔到我的项目里了
demo 中具体产生漏洞的就是下面这里的代码：
`$smarty->display("string:". $name);`
属于是完全信任用户的输入的模板利用方式了，这里用来测试各种攻击方式。
###  测试方法
还是 HackTricks（[https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection）](https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection%EF%BC%89) 中的这张老图，这里利用的实际上是各种语法来进行判断，比如单括号内可以执行表达式，
以{**} 为注释符就可以判断我们的模板为 Smarty 模板，具体的语法还是要去看手册。
## 注入攻击
在模板注入中我们进行攻击的方式所依赖的是模板引擎中的各种标签，标签为了实现功能，很多时候会进行命令执行等操作，有时一些正常的功能也会被恶意利用而导致一系列的问题，下面就来总结一下常用的标签。
###  前期工作
`{$smarty.version}`
返回版本信息，有助于根据版本进行后续攻击手段的选择
**${smarty.template}**
返回当前模板的文件名（如果使用了的话）
关于使用模板的部分大家可以去看相关的文档或者一些相关教程（[https://www.w3cschool.cn/smarty/smarty-resourcescustom.html）](https://www.w3cschool.cn/smarty/smarty-resourcescustom.html%EF%BC%89)
###  常规攻击方式
**获取类的静态方法**
我们可以通过 self 标签来获取 Smarty 类的静态方法，比如我们可以获取 getStreamVariable 方法来读文件
`public function getStreamVariable($variable)  
{  
$_result = '';  
$fp = fopen($variable, 'r+');  
if($fp) {  
while (!feof($fp) && ($current_line = fgets($fp)) !== false) {  
$_result .= $current_line;  
}  
fclose($fp);  
return $_result;  
}  
$smarty = isset($this->smarty) ? $this->smarty : $this;  
if ($smarty->error_unassigned) {  
throw new SmartyException('Undefined stream variable "'. $variable . '"');  
} else{  
return null;  
}  
}`
{self::getStreamVariable(“file:///etc/passwd”)}
不过这种利用方式只存在于旧版本中，而且在 3.1.30 的 Smarty 版本中官方已经将 getStreamVariable 静态方法删除。
其他的一些类中的方法也是一样，会受到版本的限制，比如 writeFile 方法等也是同理，在高版本下同样不能使用。
`{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,"",self::clearConfig())}`
**{literal} 标签**
{literal} 可以让一个模板区域的字符原样输出。这经常用于保护页面上的Javascript或css样式表，避免因为 Smarty 的定界符而错被解析。
在 PHP5 环境下存在一种 PHP 标签， ，我们便可以利用这一标签进行任意的 PHP
代码执行。
通过上述描述也可以想到，我们完全可以利用这一种标签来实现 XSS 攻击，这一种攻击方式在 SSTI
中也是很常见的，因为基本上所有模板都会因为需要提供类似的功能。
`{literal}alert('xss');{/literal}`
**{if} 标签**
Smarty 的 {if} 条件判断和 PHP 的 if 非常相似，只是增加了一些特性。每个 {if} 必须有一个配对的 {/if}，也可以使用
{else} 和 {elseif} ，全部的PHP条件表达式和函数都可以在 {if} 标签中使用。
例如：
`{if phpinfo()}{/if}  
{if readfile ('/flag')}{/if}  
{if show_source('/flag')}{/if}  
{if system('cat /flag')}{/if}  
etc.`
**{php} 标签**
Smarty3 官方手册中明确表示已经废弃 {php} 标签，不建议使用。在 Smarty3.1， {php} 仅在 SmartyBC 中可用。
通常情况下我们包含的是上面的 Smarty.class.php
例子：
`{php}echo id;{/php}`
###  CVE 分析
**CVE-2017-1000480**
测试代码
`registerResource('test', new testSmarty);  
$smarty->display('test:'.$_GET['eval']);  
?>`
我们可以利用 _/ /_ 或者 */ // 等方式来实现代码执行
**具体分析：**
**参考**
跟进 display 方法
我们只传入了一个参数也就是说我们传入给 display 的参数就是这里的 $template，跟进 _execute()
这个方法写的很长，我们只关注我们要关注的部分
我们传入的显然进入了最后的 else，可以看到我们调用 createTemplate() 创建了模板，这里返回的 $template 是一个
SmartyInternalTemplate 对象
接下来会进入到一个 try 结构体中，这里我们重点关注的代码是这里的 render 方法
跟进到 SmartyInternalTemplate 类中，这里因为我们之前没有进行过模板缓存文件的生成会进入这里的 else，我们继续跟进
smartytemplatecompiled 类中的这个 render
可以看到这里的 $this->process($_template)；调用，
继续跟进这里的 process 方法
跟进这里的 $this->compileTemplateSource($_smarty_tpl)