the exact question of what is the necessary amount of payload one needs to capture
in order to identify diﬀerent types of applications.
46
A.W. Moore and K. Papagiannaki
START
II
Is
Flow Result
of Another
Application ?
YES
II
NO
Tag flows 
with known ports
III
IV
1st pkt
"Well Known"
Signature ?
NO
1st pkt
"Well Known"
Protocol ?
V
NO
1st KB
"Well Known"
Signature ?
VI
NO
1st KB
"Well Known"
Protocol ?
VII
NO
VIII
Flow Contains
Known Protocol?
(selected)
NO
Flow Contains
Known Protocol?
(all)
NO
YES
YES
YES
YES
VERIFY
(using      among other mechanisms)
IX
YES
YES
Failed
Verify
Passed
Verify
STOP
Manual
Intervention
Fig. 2. Classiﬁcation procedure
Our technique utilises this information to build a knowledge base for particular
host/port combinations that can be used to validate future classiﬁcation by test-
ing conformance with already-observed host roles (Method IX). One outcome
of this operation is the identiﬁcation of hosts performing port scanning where
a particular destination host is contacted from the same source host on many
sequential port numbers. These ﬂows evidently do not belong to a particular
application (unless port scanning is part of the applications looked into). For a
diﬀerent set of ﬂows, this process validated the streaming audio from a pool of
machines serving a local broadcaster.
Method IX can be further enhanced to use information from the host name
as recorded in the DNS. While we used this as a process-of-last-resort (DNS
names can be notoriously un-representative), DNS names in our trace did reveal
the presence of an HTTP proxy, a Mail exchange server and a VPN endpoint
operating over a TCP/IP connection.
3.3 Classiﬁcation Approach
An illustration of the ﬂow through the diﬀerent identiﬁcation sub-methods, as
employed by our approach, is shown in Figure 2. In the ﬁrst step we attempt to
reduce the number of ﬂows to be further processed by using context obtained
through previous iterations. Speciﬁc ﬂows in our data can be seen as “child”
connections arising from “parent” connections that precede them. One such ex-
ample is a web browser that initiates multiple connections in order to retrieve
parts of a single web page. Having parsed the “parent” connection allows us to
immediately identify the “child” connections and classify them to the causal web
application.
A second example, that has a predominant eﬀect in our data, is passive FTP.
Parsing the “parent” FTP session (Method VIII) allows the identiﬁcation of
the subsequent “child” connection that may be established toward a diﬀerent
host at a non-standard port. Testing whether a ﬂow is the result of an already-
classiﬁed ﬂow at the beginning of the classiﬁcation process allows for the fast
characterisation of a network ﬂow without the need to go through the remainder
of the process.
Toward the Accurate Identiﬁcation of Network Applications
47
If the ﬂow is not positively identiﬁed in the ﬁrst stage then it goes through
several additional classiﬁcation criteria. The ﬁrst mechanism examines whether
a ﬂow uses a well-known port number. While port-based classiﬁcation is prone
to error, the port number is still a useful input into the classiﬁcation process
because it may convey useful information about the identity of the ﬂow. If no
well-known port is used, the classiﬁcation proceeds through the next stages.
However, even in the case when a ﬂow is found to operate on a well-known
port, it is tagged as well-known but still forwarded through the remainder of the
classiﬁcation process.
In the next stage we test whether the ﬂow contains a known signature in its
ﬁrst packet. At this point we will be able to identify ﬂows that may be directed
to well-known port numbers but carry non-legitimate traﬃc as in the case of
virus or attack traﬃc. Signature-scanning is a process that sees common use
within Intrusion Detection Systems such as snort [6]. It has the advantage that
a suitable scanner is often optimised for string-matching while still allowing the
expression of ﬂexible matching criteria. By scanning for signatures, applications
such as web-servers operating on non-standard ports may be identiﬁed.
If no known signature has been found in the ﬁrst packet we check whether the
ﬁrst packet of the ﬂow conveys semantics of a well-known protocol. An example
to that eﬀect is IDENT which is a single packet IP protocol. If this test fails we
look for well-known signatures in the ﬁrst KByte of the ﬂow, which may require
assembly of multiple individual packets. At this stage we will be able to identify
peer-to-peer traﬃc if it uses well known signatures. Traﬃc due to SMTP will
have been detected from the port-based classiﬁcation but only the examination
of the protocol semantics within the ﬁrst KByte of the ﬂow will allow for the
conﬁdent characterisation of the ﬂow. Network protocol analysis tools, such as
ethereal [7], employ a number of such protocol decoders and may be used to
make or validate a protocol identiﬁcation.
Speciﬁc ﬂows will still remain unclassiﬁed even at this stage and will require
inspection of their entire payload. This operation may be manual or automated
for particular protocols. From our experience, focusing on the protocol semantics
of FTP led to the identiﬁcation of a very signiﬁcant fraction of the overall traf-
ﬁc limiting the unknown traﬃc to less than 2%. At this point the classiﬁcation
procedure can end. However, if 100% accuracy is to be approached we envision
that the last stage of the classiﬁcation process may involve the manual inspec-
tion of all unidentiﬁed ﬂows. This stage is rather important since it is likely to
reveal new applications. While labour-intensive, the individual examination of
the remaining, unidentiﬁed, ﬂows caused the creation of a number of new sig-
natures and protocol-templates that were then able to be used for identifying
protocols such as PCAnywhere, the sdserver and CVS. This process also served
to identify more task-speciﬁc systems. An example of this was a host oﬀering
protocol-speciﬁc database services.
On occasion ﬂows may remain unclassiﬁed despite this process; this takes
the form of small samples (e.g., 1–2 packets) of data that do not provide enough
information to allow any classiﬁcation process to proceed. These packets used
48
A.W. Moore and K. Papagiannaki
unrecognised ports and rarely carried any payload. While such background noise
was not zero in the context of classiﬁcation for accounting, Quality-of-Service, or
resource planning, these amounts could be considered insigniﬁcant. The actual
amount of data in terms of either packets or bytes that remained unclassiﬁed
represented less than 0.001% of the total.
3.4 Validation Process
Accurate classiﬁcation is complicated by the unusual use to which some protocols
are put. As noted earlier, the use of one protocol to carry another, such as
the use of HTTP to carry peer-to-peer application traﬃc, will confuse a simple
signature-based classiﬁcation system. Additionally, the use of FTP to carry an
HTTP transaction log will similarly confuse signature matching.
Due to these unusual cases the certainty of any classiﬁcation appears to be
a diﬃcult task. Throughout the work presented in this paper validation was
performed manually in order to approach 100% accuracy in our results. Our
validation approach features several distinct methods.
Each ﬂow is tested against multiple classiﬁcation criteria. If this procedure
leads to several criteria being satisﬁed simultaneously, manual intervention can
allow for the identiﬁcation of the true causal application. An example is the peer-
to-peer situation. Identifying a ﬂow as HTTP does not suggest anything more
than that the ﬂow contains HTTP signatures. After applying all classiﬁcation
methods we may conclude that the ﬂow is HTTP alone, or additional signature-
matching (e.g. identifying a peer-to-peer application) may indicate that the ﬂow
is the result of a peer-to-peer transfer.
If the ﬂow classiﬁcation results from a well-known protocol, then the val-
idation approach tests the conformance of the ﬂow to the actual protocol. An
example of this procedure is the identiﬁcation of FTP PASV ﬂows. A PASV ﬂow
can be valid only if the FTP control-stream overlaps the duration of the PASV
ﬂow — such cursory, protocol-based, examination allows an invalid classiﬁcation
to be identiﬁed. Alongside this process, ﬂows can be further validated against
the perceived function of a host, e.g., an identiﬁed router would be valid to relay
BGP whereas for a machine identiﬁed as (probably) a desktop Windows box be-
hind a NAT, concluding it was transferring BGP is unlikely and this potentially
invalid classiﬁcation requires manual-intervention.
4 Results
Given the large number of identiﬁed applications, and for ease of presentation, we
group applications into types according to their potential requirements from the
network infrastructure. Table 3 indicates ten such classes of traﬃc. Importantly,
the characteristics of the traﬃc within each category is not necessarily unique.
For example, the BULK category which is made up of ftp traﬃc consists of both
ftp control channel: data on both directions, and the ftp data channel which
consists of a simplex ﬂow of data for each object transferred.
Toward the Accurate Identiﬁcation of Network Applications
49
Table 3. Network traﬃc allocated to each category
Example Application
ftp
postgres, sqlnet, oracle, ingres
Classiﬁcation
BULK
DATABASE
INTERACTIVE ssh, klogin, rlogin, telnet
MAIL
SERVICES
WWW
P2P
MALICIOUS
GAMES
MULTIMEDIA Windows Media Player, Real
imap, pop2/3, smtp
X11, dns, ident, ldap, ntp
www
KaZaA, BitTorrent, GnuTella
Internet work and virus attacks
Half-Life
In Table 4 we compare the results of simple port-based classiﬁcation with
content-based classiﬁcation. The technique of port-analysis, against which we
compare our approach, is common industry practise (e.g., Cisco NetFlow or
[1, 2]). UNKNOWN refers to applications which for port-based analysis are not
readily identiﬁable. Notice that under the content-based classiﬁcation approach
we had nearly no UNKNOWN traﬃc; instead we have 5 new traﬃc-classes de-
tected. The traﬃc we were not able to classify corresponds to a small number
of ﬂows. A limited number of ﬂows provides a minimal sample of the applica-
tion behavior and thus cannot allow for the conﬁdent identiﬁcation of the causal
application.
Table 4 shows that under the simple port-based classiﬁcation scheme based
upon the IANA port assignments 30% of the carried bytes cannot be attributed
Table 4. Contrasting port-based and Content-based classiﬁcation
Classiﬁcation
Type
BULK
DATABASE
GRID
INTERACTIVE
MAIL
SERVICES
WWW
UNKNOWN
MALICIOUS
IRC/CHAT
P2P
GAMES
MULTIMEDIA
Port-Based Content-Based
Packets Bytes Packets Bytes
As a percentage of total traﬃc
64.54
46.97 45.00
0.76
0.03 0.03
0.00
0.03 0.07
0.39
1.19 0.43
3.62
3.37 3.62
0.28
0.07 0.02
19.98 20.40
27.30
28.36 30.43 <0.01 <0.01
65.06
0.84
0.00
0.75
3.37
0.29
26.49
— — 1.10
— — 0.44
— — 1.27
— — 0.17
— — 0.22