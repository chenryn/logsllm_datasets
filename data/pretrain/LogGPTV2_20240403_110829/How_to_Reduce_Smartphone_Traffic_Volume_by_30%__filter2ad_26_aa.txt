title:How to Reduce Smartphone Traffic Volume by 30%?
author:Feng Qian and
Junxian Huang and
Jeffrey Erman and
Zhuoqing Morley Mao and
Subhabrata Sen and
Oliver Spatscheck
How to Reduce Smartphone Trafﬁc Volume by 30%?
Feng Qian1, Junxian Huang2, Jeffrey Erman1, Z. Morley Mao2,
Subhabrata Sen1, and Oliver Spatscheck1
1 AT&T Labs – Research
2 University of Michigan
Abstract. The unprecedented growth in smartphone usage has fueled a massive
increase in cellular network trafﬁc volumes. We investigate the feasibility of
applying Redundancy Elimination (RE) for today’s smartphone trafﬁc, using
packet traces collected from 20 real mobile users for ﬁve months. For various
RE techniques including caching, ﬁle compression, delta encoding, and packet
stream compression, we present the ﬁrst characterization of their individual
effectiveness, the interaction among multiple jointly applied RE techniques, and
their performance on mobile handsets. By leveraging several off-the-shelf RE
techniques operating at different layers, we can achieve an overall reduction of
smartphone trafﬁc by more than 30%.
1 Introduction
Mobile data trafﬁc is experiencing unprecedented growth. Cisco predicted that from
2011 to 2016, global smartphone trafﬁc will increase by 5000% [4]. Meanwhile, in
2011, the cellular infrastructure expenditure was expected to be only a 6.7% increase
over 2010 [1]. From the customers’ perspective, reducing the bandwidth consumption
effectively lowers usage-based data charges, and decreases page download times.
Network Redundancy Elimination (RE) plays a crucial role in bandwidth reduction
by preventing duplicate data transfers and making the transferred data more com-
pact [8]. In our recent work [17], we investigated HTTP caching on smartphones. We
found that for web caching, there exists a huge gap between the protocol speciﬁcation
and the implementation on today’s mobile devices. A surprisingly high 17% reduction
in the trafﬁc volume can be achieved if just the HTTP caching protocol is fully
supported and strictly followed by smartphone applications and mobile browsers. This
begs the question: What about other off-the-shelf RE techniques? The potential savings
from applying these techniques to smartphone trafﬁc are not known quantitatively.
To answer this question, we investigate the feasibility of redundancy elimination
for today’s smartphone trafﬁc, using packet traces collected from 20 real mobile users
for ﬁve months. For various RE techniques including caching, ﬁle compression, delta
encoding, and packet stream compression, we present the ﬁrst characterization of:
– Their effectiveness on smartphone trafﬁc. Previous studies [8][6][7][15] inves-
tigated RE techniques for wired trafﬁc, whose content and protocol compositions
signiﬁcantly differ from those of smartphone trafﬁc.
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 42–52, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
How to Reduce Smartphone Trafﬁc Volume by 30%?
43
– Their interaction when jointly applied. Prior work [10][14][18] only studied RE
techniques in isolation for mobile networks. Jointly employing multiple techniques
can potentially save more bandwidth.
– Their computation load on mobile handsets. Such considerations are important
given mobile handsets are more limited in computation capabilities compared to
desktop counterparts.
Our key ﬁnding is that, a judicious composition of several off-the-shelf RE techniques
operating at different protocol layers can achieve an overall reduction in smartphone
trafﬁc by more than 30% with acceptable runtime overheads. In comparison, HTTP
caching by itself saves as much as 17% of the overall trafﬁc (§5.2). Such high savings
become more interesting and somewhat surprising given that a major fraction of the
trafﬁc is video, audio, or image which are already compactly encoded.
2 Related Work
We describe related work in three categories.
RE Algorithms. Data compression techniques, such as gzip, are the most well-known
RE approach. An orthogonal approach is caching. Speciﬁcally, web caching can be
extremely useful in reducing HTTP trafﬁc [10]. Other methodologies include delta
encoding [13] and packet stream compression [19][14]. We study the effectiveness and
efﬁciency of these well-established techniques for smartphone trafﬁc.
RE Measurements. A recently study [10] explored the potential beneﬁts of in-network
caching at the cellular gateway. Gember et al. [12] reported high intra-user redundancy
of handheld trafﬁc in campus Wi-Fi networks. The above studies motivated us to make
a further step by examining different RE techniques and their interplay when applied
jointly for mobile trafﬁc. Anand et al. [8] conducted a trace-driven study of packet
stream compression [19] for university and enterprise trafﬁc. Earlier RE measurements
also focused on delta encoding and ﬁle compression [15].
RE Systems. [6] proposed incorporating RE into an IP-layer service on routers.
The SmartRE [7] architecture eliminates network-wide redundancy by coordinating
multiple devices. EndRE [5] is an end-to-end service where packet-stream-based RE is
put into the protocol stack. PACK [20] is an RE system designed for cloud computing
customers. Our measurement provides useful insights for designing future RE systems
for mobile networks, which none of the above systems speciﬁcally focuses on.
3 The Measurement Data
The dataset used in this study was collected from 20 users from May 12 to October
12 2011. They were given 11 Motorola Atrix and 9 Samsung Galaxy S smartphones,
all running Android 2.2, with unlimited voice, text and data plans from a large 3G
carrier in the U.S. This dataset was also used in our earlier study of smartphone HTTP
caching [17]1. We deployed custom data collection software on the 20 handsets. It runs
1 The dataset will be available for veriﬁcation purposes under NDA after relevant IRB approvals.
44
F. Qian et al.
in the background and collects the full packet traces (with payload) for both cellular
and Wi-Fi trafﬁc. We collected 118 GB of packet traces during the ﬁve-month trial.
The participants were selected to be students from 8 departments at University of
Michigan. Their individually contributed trafﬁc volume ranges from 0.3 GB to 23.6
GB. Overall, 15,683 distinct values of Host ﬁelds appeared in HTTP requests. Across
all user pairs (X, Y ), the overlaps of Host sets |HX ∩ HY |/|HX ∪ HY | range from 1%
to 25% (HX consists of all Host strings in the requests made by user X). We therefore
believe the 20 participants are reasonably diverse smartphone users.
4 Explored RE Techniques
We explored four different RE approaches. These are extremely popular and represen-
tative techniques for reducing network trafﬁc redundancy.
HTTP Caching. In [17], we found for web caching, there exists a huge gap between
the protocol speciﬁcation and the implementation on today’s mobile devices. A 17%
reduction in the overall trafﬁc volume can be achieved if the HTTP caching protocol is
fully supported and strictly followed by smartphone apps and mobile browsers.
Delta Encoding. In Delta encoding, instead of transferring a ﬁle in its entirety, only
any difference from its previously transferred version (if exists) is sent. We used
VCDIFF [13] (RFC 3284), known as the best overall delta encoding algorithm[16].
File Compression. We study three off-the-shelf ﬁle compression techniques selected
due to their popularity: gzip, bzip2, and 7-zip2. gzip is based on the well-known DE-
FLATE algorithm [9]. bzip2 employs diverse compression techniques such as Huffman
coding, Burrows-Wheeler transform, and run-length encoding. 7-zip uses Lempel-Ziv-
Markov chain algorithm (LZMA), which is also a dictionary-based approach similar to
DEFLATE but features a higher compression ratio.
Packet Stream Compression. Compression can also be performed in an application-
agnostic manner where the IP packet stream is compressed at one end of a network
path (e.g., the cellular gateway) and is decompressed at the other end (e.g., a handset).
We employ MODP [19], a representative packet stream compression algorithm. MODP
was also used in existing RE systems such as [6].
We brieﬂy explain how MODP works. Two packet caches, whose contents are
synchronized, are deployed at both ends of a network path. To compress an incoming
packet, the ingress end (i) ﬁngerprints byte subsequences in the packet by sliding a
running window over it, (ii) matches the ﬁngerprints against a signature table, which
contains mappings from ﬁngerprints to pointers to the cached packets, (iii) for matched
ﬁngerprints, replaces their byte subsequences with the pointers, (iv) inserts the new
packet into the packet cache and updates the signature table. The decompression
procedure is straightforward: the egress end simply follows the pointers and replaces
them with byte sequences in the cache. The algorithm involves two parameters:
2 http:// www. gzip. org, http:// bzip. org,
http:// www. 7-zip. org
How to Reduce Smartphone Trafﬁc Volume by 30%?
45
the packet cache size n, and the sampling rate for ﬁngerprint generation p3. Selecting
their values involves trading off the compression ratio and the processing speed.
5 Measurement Results
We apply the aforementioned RE techniques to our dataset to study their effectiveness.
5.1 Evaluation Methodology
We perform RE in the following order. In the remainder of this paper, we refer to a web
object (e.g., an HTML document) carried by an HTTP response as a ﬁle.
Step 1: Web Caching. We eliminate redundant transfers due to problematic caching
behaviors by assuming a good HTTP caching implementation that (i) strictly follows
the protocol speciﬁcation [11], and (ii) has a non-volatile LRU cache shared by all
applications. The cache size is assumed to be 256 MB. As long as the cache size is not
too small (e.g., >50 MB), it has little impact on the RE effectiveness, as shown in [17].
Step 2: Delta Encoding. Assume a handset has requested for ﬁle f , and there is already
a copy of f in the cache (a ﬁle is keyed by its full URL including query strings). If the
content of f has changed, we use VCDIFF to encode the delta between the new and
the old version, to save the bandwidth. If f is not expired or not changed, the standard
caching procedure (Step 1) is used although VCDIFF can also handle two identical
inputs and output a delta of zero.
Step 3: File Compression. The ﬁle is compressed by an off-the-shelf compression
technique such as gzip, unless it is already compressed in the trace or by Step 2.
Step 4: Packet Stream Compression. We use MODP to compress all the IP packets in
both directions between the cellular gateway and the handset.
Steps 1 to 3 are object-level RE schemes. In theory these general techniques can
be applied to any application-level objects. However, here we apply them to only
HTTP trafﬁc that dominates smartphone trafﬁc usage [8][12]. In particular, encrypted
HTTPS trafﬁc over TCP port 443 accounts for 11.2% of the bytes – we are unable
to apply objected-based RE techniques to them (the data collector runs below the
SSL library). Hence the reported RE effectiveness is an underestimation of the actual
possible gains. Also, Step 1 and 3 are already part of the HTTP speciﬁcation [11] but
today’s smartphones and web servers may not strictly follow or fully utilize them. We
quantify the additional beneﬁts that can be gained if they do so.
The Ordering of the Four Steps is justiﬁed as follows. We consider caching (Step 1)
ﬁrst since it can potentially avoid transferring the entire ﬁle. If Step 2 is performed, then
Step 3 will be skipped, because delta encoding usually yields a more compact output
than compressing a single ﬁle does. Note that in Step 2, the output of VCDIFF (i.e.,
the delta) is always compressed (using gzip by default). Step 4 is applied at the end of
the pipeline because packet stream compression is performed on a network path after
packets leave the server.
3 Fingerprints are indexed probabilistically since indexing all is computationally impractical.
46
F. Qian et al.
Table 1. Compression Ratios (CR) for caching, ﬁle compression, and delta encoding, when each
of them is individually applied. The “HTTP” row and the “All” row correspond to CR values
computed for only HTTP trafﬁc, and the overall trafﬁc, respectively.
1.
Caching
bzip2
∗
2-4. File Compression (lv 1–9)
gzip
7-zip
5-7. Lower Bound (lv5) 8-9. Δ Encoding
gzip bzip2
NT only
HTTP 79.8% 83.9–84.5% 84.4–84.9% 82.5–82.5% 80.4% 78.9% 71.7% 77.8% 98.0%
All