### Title: How to Reduce Smartphone Traffic Volume by 30%?

### Authors:
- Feng Qian
- Junxian Huang
- Jeffrey Erman
- Z. Morley Mao
- Subhabrata Sen
- Oliver Spatscheck

### Affiliations:
1. AT&T Labs – Research
2. University of Michigan

## Abstract
The unprecedented growth in smartphone usage has led to a significant increase in cellular network traffic volumes. This study investigates the feasibility of applying Redundancy Elimination (RE) techniques to reduce smartphone traffic. Using packet traces collected from 20 real mobile users over five months, we evaluate various RE techniques, including caching, file compression, delta encoding, and packet stream compression. We provide the first comprehensive characterization of their individual effectiveness, the interactions among multiple jointly applied RE techniques, and their performance on mobile handsets. By leveraging several off-the-shelf RE techniques operating at different layers, we achieve an overall reduction in smartphone traffic by more than 30%.

## 1. Introduction
Mobile data traffic is experiencing unprecedented growth. Cisco predicted that global smartphone traffic would increase by 5000% from 2011 to 2016 [4]. In contrast, cellular infrastructure expenditure was expected to increase by only 6.7% over 2010 [1]. From the customers' perspective, reducing bandwidth consumption effectively lowers usage-based data charges and decreases page download times.

Network Redundancy Elimination (RE) plays a crucial role in bandwidth reduction by preventing duplicate data transfers and making the transferred data more compact [8]. In our recent work [17], we investigated HTTP caching on smartphones and found that a 17% reduction in traffic volume can be achieved if the HTTP caching protocol is fully supported and strictly followed by smartphone applications and mobile browsers. This raises the question: What about other off-the-shelf RE techniques? The potential savings from applying these techniques to smartphone traffic are not well quantified.

To address this, we investigate the feasibility of redundancy elimination for today's smartphone traffic using packet traces collected from 20 real mobile users over five months. For various RE techniques, including caching, file compression, delta encoding, and packet stream compression, we present the first characterization of their effectiveness, the interaction when jointly applied, and their computational load on mobile handsets. Our key finding is that a judicious combination of several off-the-shelf RE techniques operating at different protocol layers can achieve an overall reduction in smartphone traffic by more than 30% with acceptable runtime overheads. In comparison, HTTP caching alone saves up to 17% of the overall traffic (§5.2). These high savings are particularly interesting given that a major fraction of the traffic is video, audio, or images, which are already compactly encoded.

## 2. Related Work
We categorize related work into three main areas:

### RE Algorithms
Data compression techniques, such as gzip, are the most well-known RE approaches. Caching, especially web caching, can significantly reduce HTTP traffic [10]. Other methodologies include delta encoding [13] and packet stream compression [19][14]. We study the effectiveness and efficiency of these established techniques for smartphone traffic.

### RE Measurements
A recent study [10] explored the potential benefits of in-network caching at the cellular gateway. Gember et al. [12] reported high intra-user redundancy in handheld traffic in campus Wi-Fi networks. These studies motivated us to examine different RE techniques and their interplay when applied jointly to mobile traffic. Anand et al. [8] conducted a trace-driven study of packet stream compression [19] for university and enterprise traffic. Earlier RE measurements also focused on delta encoding and file compression [15].

### RE Systems
[6] proposed incorporating RE into an IP-layer service on routers. The SmartRE [7] architecture eliminates network-wide redundancy by coordinating multiple devices. EndRE [5] is an end-to-end service where packet-stream-based RE is integrated into the protocol stack. PACK [20] is an RE system designed for cloud computing customers. Our measurement provides useful insights for designing future RE systems for mobile networks, which none of the above systems specifically focus on.

## 3. The Measurement Data
The dataset used in this study was collected from 20 users from May 12 to October 12, 2011. Participants were provided with 11 Motorola Atrix and 9 Samsung Galaxy S smartphones, all running Android 2.2, with unlimited voice, text, and data plans from a large 3G carrier in the U.S. This dataset was also used in our earlier study of smartphone HTTP caching [17]. Custom data collection software was deployed on the 20 handsets, collecting full packet traces (with payload) for both cellular and Wi-Fi traffic. We collected 118 GB of packet traces during the five-month trial.

Participants were selected from 8 departments at the University of Michigan. Their individually contributed traffic volume ranged from 0.3 GB to 23.6 GB. Overall, 15,683 distinct values of Host fields appeared in HTTP requests. Across all user pairs (X, Y), the overlaps of Host sets |HX ∩ HY|/|HX ∪ HY| ranged from 1% to 25%. Therefore, we believe the 20 participants represent a reasonably diverse group of smartphone users.

## 4. Explored RE Techniques
We explored four popular and representative RE techniques for reducing network traffic redundancy:

### HTTP Caching
In [17], we found a significant gap between the HTTP caching protocol specification and its implementation on mobile devices. A 17% reduction in overall traffic volume can be achieved if the HTTP caching protocol is fully supported and strictly followed by smartphone apps and mobile browsers.

### Delta Encoding
Delta encoding involves transferring only the differences from a previously transferred version of a file. We used VCDIFF [13] (RFC 3284), known as the best overall delta encoding algorithm [16].

### File Compression
We studied three popular file compression techniques: gzip, bzip2, and 7-zip. Gzip is based on the DEFLATE algorithm [9]. Bzip2 employs diverse compression techniques such as Huffman coding, Burrows-Wheeler transform, and run-length encoding. 7-zip uses the Lempel-Ziv-Markov chain algorithm (LZMA), which is similar to DEFLATE but offers a higher compression ratio.

### Packet Stream Compression
Packet stream compression can be performed in an application-agnostic manner, where the IP packet stream is compressed at one end of a network path (e.g., the cellular gateway) and decompressed at the other end (e.g., a handset). We employed MODP [19], a representative packet stream compression algorithm. MODP uses two synchronized packet caches at both ends of the network path. The ingress end fingerprints byte subsequences in the packet, matches the fingerprints against a signature table, replaces matched byte subsequences with pointers, and updates the cache and signature table. The egress end follows the pointers and replaces them with byte sequences from the cache. The algorithm involves two parameters: the packet cache size \( n \) and the sampling rate for fingerprint generation \( p \). Selecting their values involves trading off the compression ratio and processing speed.

## 5. Measurement Results
We applied the aforementioned RE techniques to our dataset to study their effectiveness.

### 5.1 Evaluation Methodology
We performed RE in the following order:

**Step 1: Web Caching**
- We eliminate redundant transfers due to problematic caching behaviors by assuming a good HTTP caching implementation that strictly follows the protocol specification [11] and has a non-volatile LRU cache shared by all applications. The cache size is assumed to be 256 MB. As long as the cache size is not too small (e.g., >50 MB), it has little impact on the RE effectiveness, as shown in [17].

**Step 2: Delta Encoding**
- If a handset requests a file \( f \) and there is already a copy of \( f \) in the cache, and the content of \( f \) has changed, we use VCDIFF to encode the delta between the new and old versions to save bandwidth. If \( f \) is not expired or unchanged, the standard caching procedure (Step 1) is used, although VCDIFF can handle two identical inputs and output a zero delta.

**Step 3: File Compression**
- The file is compressed using an off-the-shelf compression technique such as gzip, unless it is already compressed in the trace or by Step 2.

**Step 4: Packet Stream Compression**
- We use MODP to compress all IP packets in both directions between the cellular gateway and the handset.

Steps 1 to 3 are object-level RE schemes and are applied to HTTP traffic, which dominates smartphone traffic usage [8][12]. Encrypted HTTPS traffic over TCP port 443 accounts for 11.2% of the bytes, and we cannot apply object-based RE techniques to them (the data collector runs below the SSL library). Thus, the reported RE effectiveness is an underestimation of the actual possible gains. Steps 1 and 3 are part of the HTTP specification [11], but today’s smartphones and web servers may not strictly follow or fully utilize them. We quantify the additional benefits that can be gained if they do so.

The ordering of the four steps is justified as follows:
- **Caching (Step 1)** is considered first since it can potentially avoid transferring the entire file.
- **Delta Encoding (Step 2)** is performed next because it usually yields a more compact output than compressing a single file.
- **File Compression (Step 3)** is skipped if Step 2 is performed.
- **Packet Stream Compression (Step 4)** is applied at the end of the pipeline because it is performed on a network path after packets leave the server.

### 5.2 Results
Table 1 shows the compression ratios (CR) for caching, file compression, and delta encoding when each is individually applied. The "HTTP" row and the "All" row correspond to CR values computed for only HTTP traffic and the overall traffic, respectively.

| Technique        | HTTP    | All     |
|------------------|---------|---------|
| Caching          | 79.8%   |         |
| bzip2            | 83.9–84.5% |       |
| gzip             | 84.4–84.9% |       |
| 7-zip            | 82.5–82.5% |       |
| Delta Encoding   | 80.4%   | 78.9%   |
| Lower Bound      | 71.7%   | 77.8%   |
| NT only          | 98.0%   |         |

By combining these techniques, we achieve an overall reduction in smartphone traffic by more than 30% with acceptable runtime overheads.