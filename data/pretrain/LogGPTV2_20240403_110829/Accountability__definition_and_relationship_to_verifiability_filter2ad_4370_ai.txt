party is given a chance to perform the required actions in every
stage of the protocol (and therefore can be fairly held accountable
if he/she does not do it).
While we focus here on speciﬁc cryptographic primitives used in
the PRST protocol, the model presented here is generic and can be
used with a different set of cryptographic primitives.
Messages. Let Σ be some signature for cryptographic primitives
(including a possibly inﬁnite set of constants for representing par-
ticipant names, etc.), X = {x1,x2, . . .} be a set of variables, and
Nonce be an inﬁnite set of nonces, where the sets Σ, X, and Nonce
are pairwise disjoint. For N ⊆ Nonce, the set TN of terms over
Σ∪ N and X is deﬁned as usual. Ground terms, i.e., terms with-
out variables, represent messages. The set of all messages will be
denoted by Msg.
We assume some ﬁxed equational theory associated with Σ and
denote by ≡ the congruence relation on terms induced by this the-
ory. The particular signature Σ we take to model the PRST protocol,
along with an appropriate equivalence theory, is given below.
Cryptographic Primitives for PRST. We use a term of the form
(cid:104)m,m(cid:48)(cid:105) to represent a pair of messages m and m(cid:48); with ﬁrst(p) and
sec(p) yielding, respectively, the ﬁrst and the second component
of a pair p. A term sigk(m) represents the signature on a message
m under a (private) key k. Such a signature can be veriﬁed using
pub(k), the public key corresponding to k. A term hash(m) repre-
sents the result of applying the hash function to m.
We use the following terms to represent randomized encryption
with homomorphic property: {m}r
k represents a term m encrypted
under a (public) key k using a randomness r; dec(c,k) represents
a decryption of a ciphertext c with a key k (k is intended to be a
private key corresponding to the public key under which c is en-
crypted). The ability to extracting the random coin from a given
ciphertext is expressed using the symbol extractCoin.
checkSig(sigm(k),pub(k)) = T
pub(k),k) = x
pub(k),k) = r
dec({x}r
extractCoin({x}r
{m1}r1
ﬁrst((cid:104)x,y(cid:105)) = x
k ×{m2}r2
k = {m1 + m2}r1+r2
k
sec((cid:104)x,y(cid:105)) = y
x .
= x = T
T∧ T = T
T∨ x = T
x∨ T = T
Figure 1: Theory E — equational theory for modeling PRST.
To model the set of possible bids (which is ﬁnite) we introduce
symbols 0, . . . , (M − 1) along with operators + and × (needed for
expressing the homomorphic property of the encryption) and sym-
bols < and ≤. We assume full axiomatization of this ﬁnite set of
numbers w.r.t. these operators.
Zero-knowledge proofs. We will model the zero-knowledge
proofs used in the protocol following the approach of [7] and
[32]. A zero-knowledge proof will be represented by a term
P = ZKn,k
ϕ (t1, . . . ,tn; s1, . . . ,sn) where t1, . . . ,tn are terms called the
private component (the proof will keep these terms secret), terms
s1, . . . ,sn are called the public component (the proof reveals these
terms), and ϕ is a term built upon variables x1, . . . ,xn,y1, . . . ,yn (no
other variables and no nonces can occur in this term; xi is intended
to refer to ti, while yi is intended to refer to si), called the formula
of P.
We have the following equalities associated to zero-knowledge
proofs. The ﬁrst group of equations reveals the public components
(also the formula) of a proof. The second one allows one to check
validity of a proof.
public(ZKn,k
check(ZKn,k
ϕ (t1, . . . ,tn,s1, . . . ,sn)) = (cid:104)ϕ,s1, . . . ,sn(cid:105)
ϕ (t1, . . . ,tn,s1, . . . ,sn)) = T
if ϕ is a formula build upon x1, . . . ,xn,y1, . . . ,yn, and
ϕ[ti/xi,si/yi] ≡E T.
To model the zero-knowledge proofs used in the protocol, we
will use the expression P<(b1,b2,k; c1,c2) representing the proof
that the c1 is of the form {b1}r1
k , for some r1, and c2 is of the form
{b2}r2
k , for some r2, with b1 < b2. Formally, P<(b1,b2,k; c1,c2)
stands for ZK1,1
ϕ (b1,b2,k; c1,c2), where
ϕ = (cid:2)dec(y1,x3) = x1 ∧ dec(y2,x3) = x2 ∧ x1 < x2
ϕ = (cid:2)dec(y1,x3) = x1 ∧ dec(y2,x3) = x2 ∧ x1 ≤ x2
Similarly, P≤(b1,b2,k; c1,c2) representing the proof that the c1 is
of the form {b1}r1
k , with b1 ≤ b2. For-
mally, P≤(b1,b2,k; c1,c2) stands for ZK1,1
ϕ (b1,b2,k; c1,c2), where
k and c2 is of the form {b2}r2
(cid:3).
(cid:3).
Runs and views. Let Ch be a set of channels (channel names). An
event is of the form (c : m), for c ∈ Ch and m ∈ Msg. Such an event
is meant to express that the message m is delivered on channel c.
The set of all events will be denoted by Ev. A ﬁnite or inﬁnite
sequence of events is called a run.
For a run ρ = (c1 : m1) (c2 : m2), . . ., we denote by chan(ρ) the
sequence c1,c2, . . . of channels in this sequence. For C ⊆ Ch, we
18
denote by ρ|C the subsequence of ρ containing only the events (c :
m) with c ∈ C. Let τ ∈ TN be a term. Then, with ρ as above,
we denote by τ [ρ] the message τ [m1/x1,m2/x2, . . . ], where xi is
replaced by mi. (Recall that the set of variables is X = {x1,x2, . . .}.)
EXAMPLE 3. Assume that τex = dec(x1, ﬁrst(x2)) and ρex =
(c1 : {a}r
pub(k)), (c2 : (cid:104)k,b(cid:105)). Then
τex[ρex] = dec({a}r
pub(k), ﬁrst((cid:104)k,b(cid:105))) ≡ex a.
Borrowing the notion of static equivalence from [2], we call two
runs ρ and ρ(cid:48) statically equivalent w.r.t. a set C ⊆ Ch of chan-
N ρ(cid:48),
nels and a set N ⊆ Nonce of nonces, written ρ ≡C
if (i)
chan(ρ|C) = chan(ρ(cid:48)
|C) and (ii) for every τ1, τ2 ∈ TN we have that
N ρ(cid:48) means
τ1[ρ|C] ≡ τ2[ρ|C] iff τ1[ρ(cid:48)
|C]. Intuitively, ρ ≡C
that a party listening on channels C and a priori knowing the nonces
in N cannot distinguish between the inputs received according to ρ
and those received according to ρ(cid:48). We call the equivalence class
of ρ w.r.t. ≡C
|C] ≡ τ2[ρ(cid:48)
N, the (C,N)-view on ρ.
EXAMPLE 4. For example, if k, k(cid:48), a, and b are different con-
stants, r and r(cid:48) are nonces, C = {c1,c2}, and N = /0, then it is easy
to see that ρ1
ex =
pub(k)), (c2 : (cid:104)k(cid:48),b(cid:105)) yield the same (C,N)-view w.r.t. ≡ex.
(c1 : {b}r(cid:48)
pub(k)), (c2 : (cid:104)k(cid:48),b(cid:105)), (c3 : k) and ρ2
ex = (c1 : {a}r
Processes. Processes are built from atomic processes. An atomic
process is basically a function that given a ﬁnite history (represent-
ing the messages delivered so far) returns ε (if the process does not
send any message) or an element of the form (c : τ ) (if the process
sends some message). We require that an atomic process behaves
the same on inputs on which it has the same view. Formally, atomic
processes are deﬁned as follows.
tively,
DEFINITION 7. An atomic process is a tuple p = (I,O,N, f )
where
(i) I,O ⊆ Ch are ﬁnite sets of input and output channels, respec-
(ii) N ⊆ Nonce is a set of nonces used by p,
(iii) f is a mapping which assigns, to each (I,N)-view U, a re-
sponce f (U) of the form ε or (c : τ ) with c ∈ O and τ ∈ TN.
We refer to I, O and N by Ip, Op, and Np, respectively. We note
that the sets Ip and Op do not have to be disjoint (which means that
p can send messages to itself).
We note that (iii) guarantees that p performs the same computation
on event sequences that are equivalent according to ≡I
N, and hence,
on which p has the same view. This is why f is deﬁned on (I,N)-
views rather than on sequences of input events.
For a history ρ such that U is the equivalence class of ρ(cid:48)
w.r.t. ≡I
N, we write p(ρ) for the output produced by p on input
ρ. This output is ε, if f (U) = ε, or (c : τ [ρ|I]) if f (U) = (c : τ ).
ex) = (c4 : (cid:104){a}r
EXAMPLE 5. Let I = {c1,c2}, N = /0, and U be the equiva-
ex. Assume also that f (U) = (c4 : (cid:104)x1, ﬁrst(x2)(cid:105)).
lence class of ρ1
pub(k), ﬁrst((cid:104)k(cid:48),b(cid:105))(cid:105)), which modulo ≡ex
Then, p(ρ1
can be equivalently written as (c4 : (cid:104){a}r
ex) =
pub(k), ﬁrst((cid:104)k(cid:48),b(cid:105))(cid:105)), which modulo ≡ex can be equiva-
(c4 : (cid:104){b}r(cid:48)
lently written as (c4 : (cid:104){b}r(cid:48)
ex and ρ2
ex
yield the same (I,N)-view w.r.t. ≡ex, p performs the same transfor-
mation on ρ1
pub(k),k(cid:48)(cid:105)). Note that since ρ1
pub(k),k(cid:48)(cid:105)) and p(ρ2
ex and ρ2
ex.
For the deﬁnition of a process, given below, we assume that there
is a distinct channel chinit ∈ Ch and a distinct constant init in the
signature Σ.
DEFINITION 8. A process is a ﬁnite set π of atomic processes
with disjoint sets of input channels and sets of nonces (i.e., Ip ∩
Ip(cid:48) = /0 and Np ∩Np(cid:48) = /0, for distinct p, p(cid:48) ∈ π) such that there is an
atomic proces p0 ∈ π with chinit ∈ Ip and chinit /∈ Op for all p in π.
The atomic process p0 is called the master atomic process of π.
Runs of processes. For a process π, we deﬁne the run of π in the
following way. In each step, we have a conﬁguration that consists
of a ﬁnite run ρ (the events delivered so far) and the current event e
(the event to be delivered in the next step). We start with the initial
conﬁguration with the empty run ρ and e = ε.
In each step we
extend the run and compute the next current event, obtaining the
new conﬁguration (ρ(cid:48),e(cid:48)), as follows. By deﬁnition of processes,
there exists at most one atomic process, say p, in π with an input
channel corresponding to e (if e (cid:54)= ε). If such a process p exists
(which means that the current event can be delivered to p), then
we obtain the next conﬁguration, by taking ρ(cid:48) = ρe and e(cid:48) = p(ρ(cid:48)).
If such a process does not exists—which can happen if there is no
message to be delivered (e = ε) or there is no atomic process with
the appropriate input channel—then we trigger the master atomic
process p0 by sending to it the init event: we take ρ(cid:48) = ρ (chinit :
init) and e(cid:48) = p0(ρ(cid:48)). Note that, in the ﬁrst step of a run of π, the
master atomic process is always triggered. Now, the run of π is an
inﬁnite run induced by the sequence of ﬁnite runs in the consecutive
conﬁgurations, as deﬁned above.
We will consider only fair runs, where the master atomic process
is triggered inﬁnitely often (which means that no regular processes
can “hijack” the run by performing some inﬁnite computations).
B.3 Modeling the PRST System
We deﬁne PJ
In this section we provide the formal description of the PRST
protocol, based on the model described above. We give, however,
only the modeling of our variant of this system; the original variant
can be modeled in an analogously way. Also, since in our variant of
the protocol, the security properties we prove do not depend on the
use of notaries, we skip these parties in the modelling. Moreover,
for the simplicity of presentation, we consider only the case with
an external judge (the result easily carries out to the case when one
of the bidders plays the role of the veriﬁer).
PRST (cid:48) as the system (Σ, Ch,In,Out,{Πa}a∈Σ,
{ ˆΠa}a∈Σ) with the components deﬁned below. We assign to ev-
ery party a ∈ Σ an inﬁnite set Na of nonces a can use.
Participants. The set Σ of the protocol participants consists of
B1, . . . ,Bn (the bidders), A (the auctioneer), BB (the bulletin board),
the judge J, and, additionally, the scheduler S and the key distribu-
tion center (KDC). The role of the scheduler (who formally will
be the master atomic process; see Section B.2) is to make sure that
every party gets a chance to perform some actions in every proto-
col phase. It is important, because otherwise we could not blame
parties who did not perform required actions (for instance, did not
open their commitments, as required, in the appropriate protocol
stage). The role of KDC is to generate and distribute private and
public keys of the participants.
Recall that the judge and the bulletin board are assumed to be
honest. We also assume that the scheduler, and KDC are honest.
The remaining parties are not assumed to be honest.
Channels. The set of channels we consider here consists of chan-
b, for every a,b ∈ Σ, the channel chinit, and decision chan-
nels cha
19
expected action
A performs S1’
every Bi performs S2’
time
t1
t2
t3 (= T1) A performs S3’
t4
t5 (= T2)
t6 (= T3) A performs (the second part of) S5’
t7
t8
t9
A performs S6’
every Bi performs S7’
the judge performs V2’–V5’
every Bi performs S4’
every Bi performs (the ﬁrst part of) S5(cid:48)
Figure 2: The expected response of the protocol participants to
the consecutive time messages
nels decisiona, for every a ∈ Σ. The channel cha
b is an output chan-
nel of a and an input channel of b. So, a and b can communicate
a : a(cid:48) ∈ Σ}
a. For a ∈ Σ, we deﬁne In(a) = {cha(cid:48)
b and chb
using cha
a(cid:48) : a(cid:48) ∈ Σ}∪{decisiona}. For the scheduler, we
and Out(a) = {cha
additionally assume that chinit is in In(S) (therefore, the scheduler
is running master atomic processes).
Sets of programs Πa. Depending on whether a party a ∈ Σ un-
der consideration is assumed to be honest (the judge, the bulletin
board, the scheduler, and the key distribution center) or, possibly,
dishonest (the auctioneer and the bidders) we deﬁne the set Πa of
the programs of a to be: (1) the set of honest programs of a, i.e.