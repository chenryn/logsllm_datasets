Unfortunately, under this assumption, the P SIMPLE scheme
is highly insecure. This is because the k ‚àí 1 shares that are
common to all secrets can be immediately identiÔ¨Åed since they
are the only ones that have their particular index. Suppose
those indexes are 1, 2, . . . , k ‚àí 1. Then, the adversary can
simply put those shares together with each share that has
index k, in turn, and recover all m secrets with only m
reconstructions. Thus, with Shamir‚Äôs scheme and with this
assumption, P SIMPLE is not a viable approach.3 For this
reason, we primarily compare our proposed NCP scheme
against P NAIVE in the remainder of this section.
B. Description of NCP scheme
The NCP scheme is similar to the CYCLIC scheme in the
way that it reuses shares across multiple secrets and attempts
to balance the number of secrets of which each share is a
part. Because of their similarity, we will mainly describe how
NCP is different from CYCLIC in this section. We still denote
the number of secrets by m and the overlap between two
neighboring secrets by r. A signiÔ¨Åcant difference of NCP,
3If we instead assume that indexes are available to valid users but not to the
adversary, the security of P SIMPLE would be similar to that of SIMPLE.
as compared to CYCLIC, is that the overlap r between two
consecutive secrets has to be less than k. If this were not
true, then two consecutive secrets would have the same value
since they would share at least k points on their degree k ‚àí 1
polynomials, meaning the polynomials (and hence the secret
values) would actually be the same.
Next, we describe two aspects in which the NCP scheme
is different from CYCLIC, namely the process of generating
shares and the structure of the circle.
Since two secrets may have common shares, two polyno-
mials may share some points. To simplify the scheme, we
give each share the same index in all secrets it belongs to,
so there is a bijection between the shares and the points. The
generating process is similar to the CYCLIC scheme, but here
each share needs to be given an index. Again drawing the
shares and secrets around a circle, the indexes are generated in
a round-robin fashion around the circle from 1 to n, wrapping
back around to 1, and repeating until all shares are assigned
an index. Figure 8 shows the indexes generated for m = 3,
n = 6, k = 4, and two different values of r < k.
Once share indexes are assigned, shares can be generated.
the Ô¨Årst k ‚àí 1 shares are generated
For the Ô¨Årst secret,
randomly. With a0 as the secret, once the Ô¨Årst k ‚àí 1 shares
are determined, the polynomial q(x) is determined and the
remaining n ‚àí k + 1 shares are also determined and are
generated as q(k), q(k+1), . . . , q(n). The second secret shares
r < k shares with the Ô¨Årst secret, which have indexes
n ‚àí r + 1, n ‚àí r + 2, . . . , n. These same share values are
re-used by the second secret and an additional k ‚àí r ‚àí 1
shares with indexes starting from 1 are generated at random.
At this point, k‚àí1 shares of the second secret are known and,
along with its secret value, this determines its polynomial. The
remaining n‚àí k +1 shares can then be generated according to
the polynomial‚Äôs formula. The process is similar for each new
secret around the circle. The Ô¨Årst r < k shares are in common
with the previous secret, an additional r ‚àí k ‚àí 1 shares are
generated randomly, and the Ô¨Ånal n ‚àí k + 1 shares are then
generated from the chosen polynomial.
We would like to keep a share‚Äôs index the same in every
secret it belongs to, and so we choose not to have the circle
wrap around as in the CYCLIC scheme, because choosing
shares for the wrapped-around portions can be quite complex.
In Figure 8, we see that if the example on the right-hand
side wrapped around, we could simply select the shares with
indexes 1 and 2 from Secret 1. However, if the example on
the left-hand side wrapped around, the Ô¨Ånal share should have
index 4 and so it would need to use the 4th share from Secret
1 instead of wrapping around in the normal way. While it
would be possible to deÔ¨Åne the scheme to wrap around and
this might reduce the overall number of shares in some cases,
we have chosen not to include the wrap-around feature in order
to simply speciÔ¨Åcation and analysis of the scheme.
There are several things to emphasize about the scheme.
First, each share has only one index, no matter how many
secrets it belongs to. This helps simplify implementation of
the scheme, since we don‚Äôt need to store (or be able to
449
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 

	

	


	
	









































Fig. 8. Examples of NCP scheme
dynamically generate) multiple indexes for the same share.
Second, two consecutive secrets on the circle have r shares in
common, where r < k as discussed earlier.
C. Overhead of NCP scheme
We follow a similar analysis to that done for CYCLIC in
the previous section. To derive the total number of shares,
Nshare, we see that the Ô¨Årst secret generates n shares and
each additional secret generates n ‚àí r new shares. Thus,
Nshare = n + (m ‚àí 1) √ó (n ‚àí r) =m(n ‚àí r) + r =
mn‚àír(m‚àí1). Compared with Nshare for CYCLIC, here it is
obvious that, with Ô¨Åxed m and n, a higher overlap r reduces
Nshare. Therefore, to minimize the overhead of NCP, we
should maximize r, subject to constraints on security, which
we analyze in the next two subsections.
It is clear from the above expression that, for a given m
and n, Nshare decreases linearly with r. Thus, the shape of
the Nshare curves is very similar to those shown in Figure 4,
except that r cannot be increased beyond k ‚àí 1. Note that,
just as with NAIVE in Figure 4, the number of shares used
by P NAIVE would be the left-most point on the NCP curves
(corresponding with r = 0).
D. Security of NCP scheme
In this section, we discuss the security of NCP. Recon-
structing secrets is very different from CYCLIC because, as
mentioned earlier, we assume that an adversary knows the
index for any share that it is able to retrieve. Knowledge of
the index provides more information about where the share
Ô¨Åts and this makes the reconstruction process simpler. Despite
this, we will show that NCP can still provide high security
with a reasonable overhead. Due to page limitations, we omit
some details of the security analyses.
1) Reconstructing a Ô¨Årst secret: The number of combina-
tions an adversary must try to reconstruct a secret, Ncomb all
for NCP with (k, n) secret sharing can be shown to be lower
bounded by wk, where w = (cid:3) m(n‚àír)+r
(cid:4). With this new value
of Ncomb all, we can use Equation 1 to get the probability of
reconstructing at least one secret in t attempts with the same
comb for p = 0.1 and varying
deÔ¨Ånition of N p
k and r, with the y-axis on a log scale in Figure 9. We Ô¨Åx
m = 50 and n = 15 in the example. We choose k as 14, 12,
10, and 8 and vary r from 0 to k ‚àí 1 in each case. We note
comb. We show N p
n
Fig. 9. Number of attempts needed to reconstruct Ô¨Årst secret with probability
0.1 for NCP scheme (m = 50, n = 15, log scale on y-axis)
that r = 0 gives the number of combinations for P NAIVE.
We can see that a higher k increases the security level, since
wk will be larger and there are more overall combinations for
the adversary to consider.
Note that
the calculations for decoding a secret using
Shamir‚Äôs scheme involve polynomial interpolation and, there-
the process is more complex than for (n, n) secret
fore,
sharing, which uses only XOR operations. Thus, one secret
reconstruction will take considerably longer for NCP than
for CYCLIC. Despite this added complexity for NCP, for
illustration, we will assume the same security goal from the
previous section, where 1016 attempts was considered a good
security threshold. To reach 1016 attempts in Figure 9, k must
be at least 12. We can see that there are many choices of r
with both k = 12 and k = 14 that yield at least 1016 attempts.
is also interesting to consider the overhead of NCP
conÔ¨Ågured to achieve the required security level and compare
it to P NAIVE. With n = 15 and m = 50 as used in Figure 9,
the number of shares required by P NAIVE is 750. If we
choose k = 14 and r = 10, then Nshare for NCP is 260 and
the desired security level is achieved with only about 1/3 the
number of shares required by P NAIVE.
It
2) Reconstructing all secrets with one secret reconstructed:
We still assume that, once a secret is reconstructed, the adver-
sary will next try a neighboring secret in the circle, because
the Ô¨Årst secret reconstruction reveals some information about
the neighboring secrets. As in the analysis of CYCLIC, there
are again three cases depending on the overlap. We omit
the analysis details due to page limitations and simply state
the results for these cases. When r < k/2, the number of
combinations is:
n √ó wk‚àír +
wn
k‚àír(cid:4)
((cid:3)w ‚àí t √ó k ‚àí r
k‚àír
(cid:4))
t=1
n
When k/2 ‚â§ r < n/2, the number of combinations is:
n √ó wk‚àír +
2wn
k(cid:4)
t=1
((cid:3)w ‚àí t √ó k
2n
(cid:4))
(cid:3) k
2 (cid:4)
Finally, when k/2 ‚â§ r < n/2, the number of combinations
is:
((cid:3)w ‚àí t √ó k(n ‚àí r)
n ‚àó n
(cid:4))
(cid:3) k(n‚àír)
(cid:4)
n
n √ó wk‚àír +
wn
k(n‚àír)(cid:4)
t=1
450
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:43 UTC from IEEE Xplore.  Restrictions apply. 
servers in CloudLab. The metadata server is deployed on a
separate CloudLab server. Each server has eight ARMv8 cores
running at 2.4GHz. The client is deployed at the CloudLab site
in South Carolina while the servers reside in Utah. The client
contacts the metadata server on writes, to determine on which
storage servers to write shares, and on reads, to determine from
which storage servers to read shares and which shares make
up the real secret. All shares (real and fake) are read so as not
to reveal to an adversary eavesdropping on the storage servers‚Äô
network which are the real shares. We were able to maintain
up to 150 servers reliably in CloudLab for the durations of
our experiments. Since the number of shares in our schemes
often exceeds 150, we store multiple shares on each server
and the metadata server chooses a server at random for each
individual share (random share assignment).
We have implemented both CYCLIC and NCP in the
prototype. Since availability is an important issue in cloud
storage and CYCLIC cannot tolerate a single crashed server,
we also implemented CYCLIC with triple-modular replication,
where each primary storage server is matched with two other
storage servers that maintain exact replicas.
B. Evaluation
Metrics: We evaluated the performance of the schemes by
measuring the latency of reads and writes for different object
sizes and different secret sharing parameters. The latency of
read and write operations includes the time to communicate
with the metadata server and all relevant storage servers, to
generate shares for the write, and to reconstruct the secret for a
read. We also evaluated the data availability of the approaches.
Data availability was measured as follows: we wrote 1000
objects to the prototype using the random share assignment
scheme, emulated crashes of some storage servers, and then
attempted to read back the 1,000 objects. The fraction of reads
that were successful is our data availability metric.
Latency: Figure 11 shows the latency of the three schemes
for different object sizes and secret sharing parameters. As can
be seen, most of the latencies are between 1.5 and 3.5 seconds
to read or write a 256KB Ô¨Åle to/from the cloud, which is an
acceptable value. The exception is the higher write latency for
CYCLIC with replication where, with synchronous replication,
each individual share write must occur at 3 different servers.
This latency could be reduced to be similar to the read latency