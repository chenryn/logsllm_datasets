In Angular 1, when using `ng-model="obj.prop"`, if `obj` does not exist, no error is thrown. Instead, if the user types anything in the input, a new `obj` object is created with the `prop` property.

However, in Angular 2 and later versions, if you pass an undefined object from a parent to a child component using `@Input` and bind it with `[(ngModel)]="obj.prop"`, the behavior changes. If `obj` is defined in the parent, the binding works, and the data is synchronized between the parent and child components. But if `obj` is not defined, an error is thrown: "Cannot read property 'prop' of undefined."

To avoid this error, you can use the Elvis operator (optional chaining) like this:

```html
[ngModel]="obj?.prop"
(ngModelChange)="obj ? obj.prop = $event : null"
```

While this approach eliminates the error, it breaks the two-way data binding, and the data is no longer synchronized with the parent component.

We are using this in a dynamic component scenario where we do not know whether the object is defined or not. In such cases, we would like the behavior to be similar to that of Angular 1, where the object is automatically created if it does not exist.

### Suggested Solution

To achieve the desired behavior in Angular 2 and later, you can initialize the object in the parent component or use a custom directive to handle the initialization. Hereâ€™s an example of how you can do this:

#### Option 1: Initialize the Object in the Parent Component

Ensure that `obj` is always initialized in the parent component:

```typescript
// Parent Component
export class ParentComponent {
  obj = {}; // Initialize the object
}
```

#### Option 2: Use a Custom Directive

Create a custom directive to handle the initialization:

```typescript
import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';

@Directive({
  selector: '[appInitializeObject]'
})
export class InitializeObjectDirective implements OnChanges {
  @Input() appInitializeObject: any;

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['appInitializeObject'] && !this.appInitializeObject) {
      this.appInitializeObject = {};
    }
  }
}
```

Use the directive in your template:

```html
<input
  [ngModel]="obj?.prop"
  (ngModelChange)="obj ? obj.prop = $event : null"
  appInitializeObject
>
```

This way, the object will be automatically initialized if it does not exist, and the two-way data binding will still work as expected.