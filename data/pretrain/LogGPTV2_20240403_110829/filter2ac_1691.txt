### Title: Jack-in-the-Cache: A New Code Injection Technique via Modifying X86-to-ARM Translation Cache

**Abstract:**

The increasing popularity of ARM processors in laptop computers, driven by their high energy efficiency, has led to the development and deployment of Windows 10 on ARM. This new operating system (OS) is now available on several laptops, including the recently launched Microsoft Surface Pro X, which is expected to further accelerate its adoption.

However, with the introduction of a new OS, new security threats emerge. In this talk, we present a novel code injection technique that exploits a unique feature of Windows 10 on ARM: the X86 emulation. Specifically, Windows 10 on ARM can run X86 applications through just-in-time (JIT) binary translation, converting X86 code to ARM code. To enhance performance, the OS caches these translated results as X86-to-ARM (XTA) cache files.

Our new code injection technique involves modifying these XTA cache files. This method is particularly challenging to detect and trace, making it a significant threat. Furthermore, it can be used for API hooking that remains invisible to the X83 process, thereby posing a serious security risk to Windows 10 on ARM.

As future operating systems, such as Apple's upcoming ARM-based macOS with Rosetta 2, also incorporate JIT translation mechanisms, our technique may be applicable to them as well. Caching translated results as files is a common strategy to reduce performance overhead, but it introduces vulnerabilities that need to be addressed.

This presentation aims to serve as a valuable advisory for developers of future operating systems, not limited to Windows 10 on ARM. We will provide proof-of-concept (PoC) code and detailed analysis results of the X86 emulation, which will be made publicly available on GitHub following the talk.

**Key Points:**
- **Threat Overview:** A new code injection technique exploiting X86-to-ARM translation cache.
- **Detection and Tracing:** The technique is difficult to detect and trace.
- **API Hooking:** Invisible to X86 processes, enhancing the threat.
- **Future Implications:** Applicable to other OSs with similar JIT translation mechanisms.
- **Advisory Role:** Providing guidance for developers of future OSs.
- **Public Resources:** PoC code and analysis results to be published on GitHub.