and will differ depending on the setup. Compared to a local
cache timing attack, the reduced resolution time in network-
based attacks means that for cryptographic key recovery more
measurements will likely be necessary. This is an interesting
avenue for further research.
Other PCIe Devices as Targets While this paper focuses on
snooping on NIC activity through DDIO, in general we can
snoop on other PCIe devices. For example, a USB keyboard
may send user keystroke events to the LLC via DDIO.
This opens the possibility for JavaScript attacks that measure
the LLC activity and can obtain sensitive keystroke data or
network activity as shown by previous attacks [14, 23]. Unlike
previous attacks, the attack through DDIO would be able to
monitor cache access patterns and discern hardware-speciﬁc
behavior, as demonstrated in this paper with the NIC receive
buffer access pattern. This potentially allows DDIO-enabled
attacks to reach a higher precision.
X. MITIGATION
This section discusses potential mitigations against last-level
cache side-channel attacks from PCIe devices, such as the
attack presented in this paper.
Disabling DDIO The most obvious and straightforward miti-
gation against DDIO-based attacks such as ours is to disable
DDIO. This can be done by adjusting the Integrated I/O (IIO)
conﬁguration registers. There are two possibilities, changing
it globally (Disable_All_Allocating_Flows bit) or per root
PCIe port (NoSnoopOpWrEn and Use_Allocating_Flow_Wr
bit). We successfully mitigated NetCAT by setting these bits
on our Intel Xeon E5 cluster. For the Intel Xeon Silver 4110
the offsets of these bits are not (yet) publicly documented.
While this approach mitigates our attack by preventing us from
building a cache eviction set, it comes at a signiﬁcant perfor-
mance cost. For example, even for 10 GB/s NICs, disabling
DDIO presents a performance bottleneck [19]. Applications
which are latency sensitive could suffer an increase of latency
by 11% to 18% [26]. Furthermore, power consumption could
increase by seven watts per two-port NIC [27].
LLC Partitioning Another possible defense is to use CAT
to partition the LLC in hardware or software [56], to limit
eviction to a number of ways per set. However, note that this
does not solve the problem of inter-device DDIO snooping, as
all DDIO-enabled devices still share the same cache ways.
This defense can be implemented in software through page
coloring, which allows security domains to be isolated by the
kernel by organizing physical memory by color (each color
being a partition in the LLC), and ensuring that separate
security domains never share a color. Unfortunately, given
that domains frequently share devices, this defense might be
hard to apply in practice. Software-based LLC partitioning is
explored in detail in [57].
Another existing software cache defense is based on
TSX [58]. However, this defense does not help against our
attack because TSX protects only cache activity generated
by the CPU, not devices. Other software defenses [59, 60]
similarly fail to address the inter-device snooping possibility.
Using CAT can have also negative side effects as it can be
abused to accelerate rowhammer attacks [61].
DDIO Improvement The most principled alternative is to
change the current design of DDIO. In an ideal design, every
user (e.g., network client) would receive their own portion
of the cache. Partitioning by ways seems attractive, but is
not scalable because of the limited number of ways in the
LLC. Ultimately, we believe the optimal solution is a ﬂexible
hardware mechanism that allows systems software (such as
the OS) to selectively whitelist regions of the LLC for use by
DDIO-enabled devices.
XI. RELATED WORK
A. Local Microarchitectural attacks
Local microarchitectural attacks have been widely studied
in the context of leaking and corrupting information. These
attacks typically either spy on a victim process [1, 2, 3, 4, 5,
6, 7] or co-located VMs [8, 9, 10, 11].
Osvik et al.
[1] pioneered the PRIME+PROBE attack
on the L1 cache, while Ristenpart et al. [22] developed
PRIME+TRIGGER+PROBE to measure L1 and L2 activity on
VMs that share a core. Liu et al. [9] extended PRIME+PROBE
to the LLC under the assumption of large memory pages,
allowing the attacker to extract secrets from co-hosted VMs.
Later work extended the threat model to JavaScript [12, 13,
14, 15, 23], allowing attack code to be delivered from a web
server.
Our remote PRIME+PROBE is based on the method of Oren
et al. [14] to build a non-canonical eviction set. Moreover, our
attack requires no attack code execution on the victim machine
at all.
B. Network Side-channel & Microarchitectural Attacks
Network-based side-channel attacks typically trigger code
execution on a victim machine and then observe the execu-
tion time to leak information. For instance, Bernstein [17]
recovered an AES key by monitoring request times in a web
server encrypting a known-plaintext message. Monitoring was
supported by a local machine that was a clone of the victim
web server. Cock et al. [62] used an OpenSSL vulnerability
to launch a distinguishing attack against Datagram TLS,
exploiting the non-constant execution time of the MAC check.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:59 UTC from IEEE Xplore.  Restrictions apply. 
32
Schwarz et al. [16] remotely exploited a web server containing
a Spectre v1 gadget triggered over the network, showing that
is is possible to break ASLR over the network.
Kim et al. [63] shows that the Rowhammer ﬂaw can be
triggered from software, and later found to be exploitable by
increasingly sophisticated means [64, 65, 66, 67], all of which
local. Recent work has shown that Rowhammer can also be
triggered from the network. Tatar et al. [68] shows how RDMA
can be leverage to build an end-to-end Rowhammer exploit in
data center settings. Lipp et al. [69] show that under certain
cache-limited conditions, Rowhammer can also be triggered
in Ethernet networks as well.
Many network-based attacks require repeating operations to
ﬁlter out noise factors like network variance. In contrast, our
attack leaks sensitive information using only a single trace
of operation. This is possible because we can measure cache
activity precisely by pinpointing the exact cache sets to mea-
sure, providing us with more accurate activity measurement
than prior work. Moreover, NetCAT can spy even on other
PCIe peripherals (not just the CPU), making NetCAT the ﬁrst
network-based attack of its kind.
C. Keystroke attacks
Prior keystroke recovery attacks have targeted procf [48],
audio [70], CPU scheduling [71], Wi-Fi Signals [72], inter-
rupts [73] and graphic renderings [74]. Song et al. [47] were
the ﬁrst to use SSH network packets to exploit interleaving
times for password recovery, using a Hidden Markov Model
(HMM) to model character pairs. Hogye et al. [75] argued
that network timing variance would disguise such interleaving
times in a real-world network. Lipp et al. [23] used JavaScript
to spy on URLs typed into browser address bars, using a
closed-world dictionary and using k-nearest neighbors to map
their signal to URLs. We use the same basic technique to
demonstrate the signal strength of our attack. However, we
use a publicly available dataset [49] which provides a large
set of words and subjects to show that our keystroke attack is
practical in real-world settings. As discussed in Section VIII,
a large word corpus is key to validating classiﬁer results.
In our prototype setup, we were able to retrieve cacheline
information with a polling frequency of between 10kHz and
20kHz. Our ofﬂine extraction logic is then reliable enough so
that the word prediction accuracy only reduces on average by
11.7% compared to predicting the words from raw keyboard
data.
XII. CONCLUSION
In the last decade, increased peripheral performance has
forced Intel to place the LLC on the fast I/O path in its
processors. This paper explored the security implications of
this design choice and showed that
the DDIO feature on
modern Intel CPUs exposes the system to cache attacks over
the network. Our proof of concept exploit, NetCAT, can leak
secret keystrokes of a victim client of a target OpenSSH
server through nothing more than timing the duration of
network requests. Our implementation of NetCAT required
us to reverse engineer the details of the DDIO technology
on Intel processors in order to measure the timing differences
between packets served from the LLC or memory, respectively.
Using only this basic timing primitive, NetCAT is able to build
eviction sets and use these as the ﬁrst stage of a network-
based LLC PRIME+PROBE attack, ultimately leading to our
keystroke timing attack. While NetCAT is powerful even with
only minimal assumptions, we believe that we have merely
scratched the surface of possibilities for network-based cache
attacks, and we expect similar attacks based on NetCAT in
the future. We hope that our efforts caution processor vendors
against exposing microarchitectural elements to peripherals
without a thorough security design to prevent abuse.
RESPONSIBLE DISCLOSURE
We initiated a coordinated disclosure process with Intel and
NCSC (the Dutch national CERT) on June 23, 2019. The
vulnerability was acknowledged by Intel with a bounty and
CVE-2019-11184 was assigned to track this issue. The public
disclosure was on September 10, 2019.
ACKNOWLEDGEMENTS
We would like to thank our shepherd, Clémentine Maurice,
and the anonymous reviewers for their valuable feedback. This
work was supported by the European Union’s Horizon 2020
research and innovation programme under grant agreements
No. 786669 (ReAct) and No. 825377 (UNICORE), by Intel
Corporation through the Side Channel Vulnerability ISRA,
and by the Netherlands Organisation for Scientiﬁc Research
through grants NWO 639.023.309 VICI “Dowsing”, NWO
639.021.753 VENI “PantaRhei”, and NWO 016.Veni.192.262.
This paper reﬂects only the authors’ view. The funding agen-
cies are not responsible for any use that may be made of the
information it contains.
REFERENCES
[1] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks
and countermeasures: the case of AES,” in Cryptogra-
phers’ Track at the RSA Conference.
Springer, 2006,
pp. 1–20.
[2] Y. Yarom and K. Falkner, “FLUSH+ RELOAD: A High
Resolution, Low Noise, L3 Cache Side-Channel Attack,”
in USENIX Security Symposium, 2014, pp. 719–732.
[3] B. Gras, K. Razavi, H. Bos, and C. Giuffrida, “Trans-
lation Leak-aside Buffer: Defeating Cache Side-channel
Protections with TLB Attacks,” in USENIX Security
Symposium, 2018.
[4] S. Van Schaik, C. Giuffrida, H. Bos, and K. Razavi,
“Malicious management unit: why stopping cache attacks
in software is harder than you think,” in 27th USENIX
Security Symposium (USENIX Security 18), 2018, pp.
937–954.
[5] R. Hund, C. Willems, and T. Holz, “Practical timing side
channel attacks against kernel space ASLR,” in Security
and Privacy (SP), 2013 IEEE Symposium on.
IEEE,
2013, pp. 191–205.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:59 UTC from IEEE Xplore.  Restrictions apply. 
33
[6] C. Disselkoen, D. Kohlbrenner, L. Porter, and D. Tullsen,
“Prime+ Abort: A Timer-Free High-Precision L3 Cache
Attack using Intel TSX,” in 26th USENIX Security Sym-
posium (USENIX Security 17), 2017, pp. 51–67.
[7] M. Yan, R. Sprabery, B. Gopireddy, C. Fletcher,
R. Campbell, and J. Torrellas, “Attack Directories,
Not Caches: Side-Channel Attacks in a Non-Inclusive
World,” in IEEE Symposium on Security and Privacy,
2019.
[8] M. Oliverio, K. Razavi, H. Bos, and C. Giuffrida, “Secure
Page Fusion with VUsion: https://www. vusec. net/pro-
jects/VUsion,” in Proceedings of the 26th Symposium on
Operating Systems Principles. ACM, 2017, pp. 531–
545.
[9] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-
level Cache Side-channel Attacks are Practical,” in IEEE
Symposium on Security and Privacy, 2015.
[10] M. S. Inci, B. Gülmezoglu, G. I. Apecechea, T. Eisen-
barth, and B. Sunar, “Seriously, get off my cloud! Cross-
VM RSA Key Recovery in a Public Cloud,” IACR
Cryptology ePrint Archive, vol. 2015, no. 1-15, 2015.
[11] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar,
“Wait a minute! A fast, Cross-VM attack on AES,” in
International Workshop on Recent Advances in Intrusion
Detection. Springer, 2014, pp. 299–319.
[12] P. Frigo, C. Giuffrida, H. Bos, and K. Razavi, “Grand
Pwning Unit: Accelerating Microarchitectural Attacks
with the GPU,” in 2018 IEEE Symposium on Security
and Privacy (SP).
IEEE, 2018, pp. 195–210.
[13] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida,
“ASLR on the Line: Practical Cache Attacks on the
MMU,” in NDSS, vol. 17, 2017, p. 13.
[14] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D.
Keromytis, “The Spy in the Sandbox: Practical Cache
Attacks in JavaScript and their Implications,” in Proceed-
ings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security. ACM, 2015, pp. 1406–
1418.
[15] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz,
and Y. Yarom, “Spectre Attacks: Exploiting Speculative
Execution,” arXiv preprint arXiv:1801.01203, 2018.
[16] M. Schwarz, M. Schwarzl, M. Lipp, and D. Gruss,
“NetSpectre: Read Arbitrary Memory over Network,”
arXiv preprint arXiv:1807.10535, 2018.
[17] D. J. Bernstein, “Cache-timing attacks on AES,” The
University of Illinois at Chicago, Tech. Rep., 2005.
[18] A. Shusterman, L. Kang, Y. Haskal, Y. Meltser, P. Mittal,
Y. Oren, and Y. Yarom, “Robust website ﬁngerprinting
through the cache occupancy channel,” in USENIX Se-
curity, 2019.
[19] R. Huggahalli, R. Iyer, and S. Tetrick, “Direct Cache Ac-
cess for High Bandwidth Network I/O,” in 32nd Interna-
tional Symposium on Computer Architecture (ISCA’05).
IEEE, 2005, pp. 50–59.
[20] R. Neugebauer, G. Antichi, J. F. Zazo, Y. Audzevich,
S. López-Buedo, and A. W. Moore, “Understanding PCIe
performance for end host networking,” in Proceedings of
the 2018 Conference of the ACM Special Interest Group
on Data Communication. ACM, 2018, pp. 327–341.
[21] S. Li, H. Lim, V. W. Lee, J. H. Ahn, A. Kalia, M. Kamin-
sky, D. G. Andersen, O. Seongil, S. Lee, and P. Dubey,
“Architecting to Achieve a Billion Requests Per Second
Throughput on a Single Key-Value Store Server Plat-
form,” in ACM SIGARCH Computer Architecture News,
vol. 43, no. 3. ACM, 2015, pp. 476–488.
[22] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage,
“Hey, You, Get Off of My Cloud: Exploring Information
Leakage in Third-Party Compute Clouds,” in Proceed-
ings of
the 16th ACM conference on Computer and
communications security. ACM, 2009, pp. 199–212.
[23] M. Lipp, D. Gruss, M. Schwarz, D. Bidner, C. Maurice,
and S. Mangard, “Practical Keystroke Timing Attacks
in Sandboxed JavaScript,” in European Symposium on
Research in Computer Security.
Springer, 2017, pp.
191–209.
[24] D. Brumley and D. Boneh, “Remote timing attacks are
practical,” Computer Networks, vol. 48, no. 5, pp. 701–
716, 2005.
[25] M. Neve, J.-P. Seifert, and Z. Wang, “Cache time-
behavior analysis on aes,” Selected Area of Cryptology,
2006.
[26] Intel, “Intel Data Direct I/O Technology (Intel DDIO):
https://www.intel.com/content/dam/www/
A Primer,”
public/us/en/documents/technology-briefs/data-direct-i-
o-technology-brief.pdf, 2012, [Accessed: 24.03.2019].
[27] Intel., “Intel Data Direct I/O Technology Overview,”
https://www.intel.co.jp/content/dam/www/public/us/en/
documents/white-papers/data-direct-i-o-technology-
overview-paper.pdf, 2012, [Accessed: 24.03.2019].
[28] Microsoft, “Azure High performance compute VM
https://docs.microsoft.com/en-us/azure/virtual-
sizes,”
machines/windows/sizes-hpc, [Accessed: 24.03.2019].
[29] Oracle, “HPC on Oracle Cloud Infrastructure,” https://
cloud.oracle.com/iaas/hpc, [Accessed: 24.03.2019].
[30] Huawei,
“Huawei Cloud
Service Combination,”
https://www.huaweicloud.com/en-us/solution/solution-
high-mb/mb1.html, [Accessed: 24.03.2019].
[31] Alibaba, “Alibaba Cloud Super Computing Cluster,”
[Accessed:
https://www.alibabacloud.com/product/scc,
24.03.2019].
[32] Microsoft,
“SMB-Direct,” https://docs.microsoft.com/
en-us/windows-server/storage/ﬁle-server/smb-direct,
[Accessed: 24.03.2019].
[33] RedHat,
“NFS
OVER
RDMA,”
https:
//access.redhat.com/documentation/
en-us/red_hat_enterprise_linux/6/html/
storage_administration_guide/nfs-rdma,
24.03.2019].
[Accessed:
[34] A. Dragojevi´c, D. Narayanan, M. Castro, and O. Hodson,
“FaRM: Fast remote memory,” in 11th USENIX Sympo-
sium on Networked Systems Design and Implementation
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:59 UTC from IEEE Xplore.  Restrictions apply. 