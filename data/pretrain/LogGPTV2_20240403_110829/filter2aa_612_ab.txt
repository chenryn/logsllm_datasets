安全启动 
内部 
引导芯片 
第二阶段 
引导程序 
近阶段 
引导程序 
OS 加载器 
应用程序 
加载器 
验证签名&解密 
验证签名&解密"
验证签名&解密"
验证签名&解密"
绕过安全启动 
绕过安全启动 
//Verify image. Returns true is correct 
bool verifyImage(uint8_t *image, 
       uint32_t len, uint8_t *sign, rsaKey) { 
    char *hash1, *hash2; 
    ...
    // Calculate Hash 
    calculateHash(image,len,hash1) 
    // Verify signature 
    verifySignature(sign, rsaKey, hash2) 
    // Compare hashes 
    if (memcmp(hash1, hash2, HASH_LEN) != 0) 
        return false; 
    else 
        return true;  
} 
void boot() { 
 void (*entryPoint)(void); 
 ... 
 // Load image to buffer 
 uint32_t len = loadFlashImage(imgBuf) 
 // Verify image 
 if (verifyImage(imgBuf, len, sign, 
   rsaKey) == false) { 
 goto reset;
 // Auth failed 
 } 
 // Jump to image 
 entryPoint = imgbuf; 
 (*entryPoint)(); 
 ... 
} 
你是否记得FI规则#2？ 
保护安全启动可能是一个噩梦 
FISim(金融中介服务)案例 
升级权限 
升级权限 
User space 
Kernel 
space 
REE 
TEE 
REE-TEE 分离 
REE 
CPU 
TEE 
CPU 
REE memory 
Shared memory 
(mailbox) 
TEE memory 
随机跳跃攻击 
REE 
CPU 
TEE 
CPU 
Mailbox"
载荷 
载荷地址 
载荷地址 
载荷地址 
载荷地址 
… 
写入消息"
读取消息"
随机跳跃攻击 
REE 
CPU 
写入消息"
TEE 
CPU 
Mailbox"
载荷 
载荷地址 
载荷地址 
载荷地址 
载荷地址 
… 
读取消息"
随机跳跃攻击 
TEE 
CPU 
Mailbox"
载荷 
载荷地址 
载荷地址 
载荷地址 
载荷地址 
… 
读取消息"
 memcpy(dst,src,len); 
... 
loop: 
  ldr  r0, [r3], #4 
  str  r0, [r4], #4 
... 
1 1 1 0 0 1 0 0 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
1 1 1 0 0 1 0 0 1 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 
随机跳跃攻击 
TEE 
CPU 
Mailbox"
载荷 
载荷地址 
载荷地址 
载荷地址 
载荷地址 
… 
Read"message"
 memcpy(dst,src,len); 
... 
loop: 
  ldr  r0, [r3], #4 
  str  r0, [r4], #4 
... 
1 1 1 0 0 1 0 0 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
... 
loop: 
  ldr  pc, [r3], #4 
  str  r0, [r4], #4 
... 
  Payload(); 
升级权限 
复原密钥 
复原密钥 
故障分析 
DFA$
差分故障分析$
CFA$
碰撞故障分析$
SFA$
统计故障分析$
DFIA$
差分故障$
强度分析$
$
IFA$
失效的故障分析$
SIFA$
统计失效故障分析$$
$
b0,0 
b0,1 
b0,2 
b0,3 
b1,0 
b1,1 
b1,2 
b1,3 
b2,0 
b2,1 
b2,2 
b2,3 
b3,0 
b3,1 
b3,2 
b3,3 
b0,0 
b0,1 
b0,2 
b0,3 
b1,0 
b1,1 
b1,2 
b1,3 
b2,0 
b2,1 
c2,2 
b2,3 
b3,0 
b3,1 
b3,2 
b3,3 
AES故障分析 
基于关键属性的故障注入 
Key 
Attributes 
Key 1 
AES 
ENC 
Key 2 
3DES 
DEC 
Key 3 
AES/3DES ENC/DEC 
… 
… 
… 
Crypto engine 
3DES 
DES 
AES 
Key 
Attributes 
Key 1 
AES 
ENC 
Key 2 
3DES 
DEC 
Key 3 
AES/3DES ENC/DEC 
… 
… 
… 
Keyslot"
Key 
Attributes 
Key 1 
AES 
ENC 
Key 2 
3DES 
DEC 
Key 3 
AES/3DES ENC/DEC 
… 
… 
… 
基于关键属性的FI 
Key 
Attributes 
Key 1 
DES 
ENC 
Key 2 
3DES 
DEC 
Key 3 
AES/3DES ENC/DEC 
… 
… 
… 
Crypto engine 
3DES 
DES 
AES 
Keyslot"
复原密钥 
修改安全配置 
阻碍安全配置 
// Read fuses and configure security modules 
bool disableJtag = readFuse(DISABLE_JTAG); 
bool enableMemoryScrambler =  
  readFuse(ENABLE_MEM_SCRAMBLER); 
bool enableTEE = readFuse(ENABLE_TEE); 
if (disableJtag==true) 
    closeJtag(); 
if (enableMemoryScrambler==true) 
    configureMemoryScrambler(); 
if (enableTEE==true) 
    configureTEE(); 
void boot() { 
 void (*entryPoint)(void); 
 ... 
 // Load image to buffer 
 uint32_t len = loadFlashImage(imgBuf) 
 // Verify image 
 if (verifyImage(imgBuf, len, sign, 
   rsaKey) == false) { 
 goto reset;
 // Auth failed 
 } 
 // Jump to image 
 entryPoint = imgbuf; 
 (*entryPoint)(); 
 ... 
} 
局部故障注入 
电磁故障注入"
激光故障注入"
激光故障注入 
电磁故障注入 
FI的预防 
FI的应对措施 
VS 
硬件"
软件"
故障注入规则 #3 
基于硬件的措施 
1.8V 
故障感应器"
冗余"
if (receivedKey != expectedKey)
 not_authenticated(); 
 // Glitch 
else  
 authenticated();   
基于软件的措施#1 
if (receivedKey != expectedKey)
 not_authenticated();     
else  
 authenticated();   
if (receivedKey != expectedKey)
 not_authenticated();    // Glitched 
... 
// Do something else 
...  
if (receivedKey != expectedKey)
 not_authenticated();     
else  
 authenticated(); 
if (receivedKey != expectedKey)
 not_authenticated();   
... 
// Do something else 
...  
if (receivedKey != expectedKey)
 not_authenticated();     
else  
 authenticated(); 
基于软件的措施 #1 
sleep(rand()); // Random delay 
if (receivedKey != expectedKey)
 not_authenticated();     
else  
 authenticated();   
基于软件的措施 #2 
总结 
记住这些规则! 
更多信息: 
Protecting software against FI 
https://www.riscure.com/uploads/2018/11/201708_Riscure_Whitepaper_Side_Channel_Patterns.pdf 
FI on UDS: 
https://www.riscure.com/uploads/2018/06/
Riscure_Whitepaper_Fault_injection_on_automotive_diagnostic_protocols.pdf 
Bypassing secure boot 
https://www.riscure.com/uploads/2017/10/eu-16-Timmers-Bypassing-Secure-Boot-Using-Fault-
Injection.pdf 
Linux privileges escalation: 
https://www.riscure.com/uploads/2017/10/
Riscure_Whitepaper_Escalating_Privileges_in_Linux_using_Fault_Injection.pdf 
Optical FI 
https://www.riscure.com/uploads/2017/09/Practical-optical-fault-injection-on-secure-
microcontrollers.pdf 
Wild Jungle Jump attack 
https://www.riscure.com/uploads/2017/09/Controlling-PC-on-ARM-using-Fault-Injection.pdf 
Practical DFA 
https://www.slideshare.net/secret/K8jlDL4os1evrW 
招聘进行中! 
上海海·中国 
代尔夫特·荷兰 
旧⾦金金⼭山·美国 
Riscure North America  
550 Kearny St.  
Suite 330  
San Francisco, CA 94108  
+1 (650) 646 9979 
PI:EMAIL  
Riscure B.V.  
Frontier Building, Delftechpark 49  
2628 XJ  Delft  
The Netherlands  
Phone: +31 15 251 40 90  
www.riscure.com 
Contact: 
Riscure China  
2081, No.989, Changle Road 
200031 Shanghai 
China 
Phone: +86 21 5117 5440 
Wechat: RiscureChina 
Ramiro Pareja 
PI:EMAIL