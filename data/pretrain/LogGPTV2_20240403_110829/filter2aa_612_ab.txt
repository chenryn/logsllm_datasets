### 安全启动流程

1. **内部引导芯片**：
   - **第二阶段引导程序**：加载并执行近阶段引导程序。
   - **近阶段引导程序**：加载并验证操作系统（OS）加载器。
   - **OS加载器**：加载并验证应用程序加载器。
   - **应用程序加载器**：加载并验证最终的应用程序。

2. **验证签名与解密**：
   - 在每个阶段，都需要对加载的镜像进行签名验证和解密操作，以确保其完整性和真实性。

### 绕过安全启动
绕过安全启动可能会导致系统安全性的严重漏洞。以下是一个示例代码，展示了如何在引导过程中验证镜像：

```c
// 验证镜像。返回值为 true 表示验证成功
bool verifyImage(uint8_t *image, uint32_t len, uint8_t *sign, rsaKey) {
    char *hash1, *hash2;
    ...
    // 计算哈希值
    calculateHash(image, len, hash1);
    // 验证签名
    verifySignature(sign, rsaKey, hash2);
    // 比较哈希值
    if (memcmp(hash1, hash2, HASH_LEN) != 0)
        return false;
    else
        return true;
}

void boot() {
    void (*entryPoint)(void);
    ...
    // 将镜像加载到缓冲区
    uint32_t len = loadFlashImage(imgBuf);
    // 验证镜像
    if (verifyImage(imgBuf, len, sign, rsaKey) == false) {
        goto reset; // 验证失败
    }
    // 跳转到镜像
    entryPoint = imgBuf;
    (*entryPoint)();
    ...
}
```

### FI规则#2
保护安全启动可能是一个复杂的任务。以下是一些关键点：

- **FISim（金融中介服务）案例**：展示了如何通过升级权限来绕过安全启动。
- **用户空间与内核空间分离**：
  - **REE（富执行环境）**
  - **TEE（可信执行环境）**
  - **REE-TEE 分离**：确保 REE 和 TEE 之间的隔离，防止攻击者从 REE 进入 TEE。

### 随机跳跃攻击
随机跳跃攻击是一种针对 TEE 的攻击方法，通过在 REE 和 TEE 之间共享内存（如 Mailbox）进行攻击。

### 密钥恢复与安全配置
- **复原密钥**：通过故障注入技术恢复密钥。
- **修改安全配置**：通过读取熔丝位并配置安全模块来保护系统。

```c
// 读取熔丝位并配置安全模块
bool disableJtag = readFuse(DISABLE_JTAG);
bool enableMemoryScrambler = readFuse(ENABLE_MEM_SCRAMBLER);
bool enableTEE = readFuse(ENABLE_TEE);

if (disableJtag == true)
    closeJtag();
if (enableMemoryScrambler == true)
    configureMemoryScrambler();
if (enableTEE == true)
    configureTEE();
```

### 故障注入类型
- **电磁故障注入**
- **激光故障注入**

### 故障注入的预防与应对措施
- **基于硬件的措施**：
  - 使用故障感应器
  - 引入冗余机制
  - 设置电压阈值（例如 1.8V）

- **基于软件的措施**：
  - 引入随机延迟
  - 多次验证密钥

### 总结
记住这些规则，以确保系统的安全性。更多详细信息，请参考以下资源：

- [保护软件免受故障注入](https://www.riscure.com/uploads/2018/11/201708_Riscure_Whitepaper_Side_Channel_Patterns.pdf)
- [汽车诊断协议上的故障注入](https://www.riscure.com/uploads/2018/06/Riscure_Whitepaper_Fault_injection_on_automotive_diagnostic_protocols.pdf)
- [绕过安全启动](https://www.riscure.com/uploads/2017/10/eu-16-Timmers-Bypassing-Secure-Boot-Using-Fault-Injection.pdf)
- [Linux 权限提升](https://www.riscure.com/uploads/2017/10/Riscure_Whitepaper_Escalating_Privileges_in_Linux_using_Fault_Injection.pdf)
- [光学故障注入](https://www.riscure.com/uploads/2017/09/Practical-optical-fault-injection-on-secure-microcontrollers.pdf)
- [野蛮丛林跳跃攻击](https://www.riscure.com/uploads/2017/09/Controlling-PC-on-ARM-using-Fault-Injection.pdf)
- [实用差分故障分析](https://www.slideshare.net/secret/K8jlDL4os1evrW)

### 招聘信息
- **上海·中国**
- **代尔夫特·荷兰**
- **旧金山·美国**

**Riscure North America**
550 Kearny St.
Suite 330
San Francisco, CA 94108
+1 (650) 646 9979
PI:EMAIL

**Riscure B.V.**
Frontier Building, Delftechpark 49
2628 XJ Delft
The Netherlands
Phone: +31 15 251 40 90
[www.riscure.com](http://www.riscure.com)

**Riscure China**
2081, No.989, Changle Road
200031 Shanghai
China
Phone: +86 21 5117 5440
Wechat: RiscureChina

**联系人：Ramiro Pareja**
PI:EMAIL