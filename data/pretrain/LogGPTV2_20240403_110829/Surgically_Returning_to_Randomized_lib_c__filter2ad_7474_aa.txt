title:Surgically Returning to Randomized lib(c)
author:Giampaolo Fresi Roglia and
Lorenzo Martignoni and
Roberto Paleari and
Danilo Bruschi
2009 Annual Computer Security Applications Conference
Surgically returning to randomized lib(c)
Giampaolo Fresi Roglia† Lorenzo Martignoni‡ Roberto Paleari† Danilo Bruschi†
Dipartimento di Informatica e Comunicazione†
{roberto,gianz,bruschi}@security.dico.unimi.it
Universit`a degli Studi di Milano
Dipartimento di Fisica‡
Universit`a degli Studi di Udine
PI:EMAIL
Abstract—To strengthen systems against code injection attacks,
the write or execute only policy (W⊕X) and address space layout
randomization (ASLR) are typically used in combination. The
former separates data and code, while the latter randomizes
the layout of a process. In this paper we present a new attack
to bypass W⊕X and ASLR. The state-of-the-art attack against
this combination of protections is based on brute-force, while
ours is based on the leakage of sensitive information about the
memory layout of the process. Using our attack an attacker can
exploit the majority of programs vulnerable to stack-based buffer
overﬂows surgically, i.e., in a single attempt. We have estimated
that our attack is feasible on 95.6% and 61.8% executables (of
medium size) for Intel x86 and x86-64 architectures, respectively.
We also analyze the effectiveness of other existing protections at
preventing our attack. We conclude that position independent
executables (PIE) are essential to complement ASLR and to
prevent our attack. However, PIE requires recompilation, it is
often not adopted even when supported, and it is not available
on all ASLR-capable operating systems. To overcome these
limitations, we propose a new protection that is as effective
as PIE, does not require recompilation, and introduces only a
minimal overhead.
I. INTRODUCTION
In 1988 the ﬁrst buffer overﬂow vulnerability was used to
compromise thousands of systems [1]. After twenty years,
applications are still vulnerable to the same type of vulnerabil-
ities, although today it is more difﬁcult to abuse them because
of the advances in the defensive technology. However, well
motivated attackers still succeed in their intent.
Write or execute only memory pages (W⊕X) and address-
space layout randomization (ASLR) are two strategies nowa-
days adopted in combination on most UNIX distributions [2],
[3]. The former ensures that no memory page is writable and
executable at the same time. The latter randomizes, at runtime,
the address of certain components of a process (e.g., the stack,
the heap, and shared objects). Although their combination is
believed to provide a good protection against code injection
attacks, the belief is not completely true. Researchers have
demonstrated that these protections can be defeated by patient
attackers [4]. The state-of-the-art approach to exploit stack-
based buffer overﬂows on systems protected with W⊕X and
ASLR involves mounting a return-to-lib(c) attack [5] repeat-
edly, in a brute-force fashion. Indeed, on 32-bit architectures
(e.g., Intel x86) ASLR is weak because of low randomization
entropy. Hence, with a relatively small number of attempts
an attacker can guess the base random address at which
a certain library is loaded and then successfully mount a
return-to-lib(c) attack. However, a brute-force attack can easily
rise alarms (e.g., because of a large number of crashes) and
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.16
60
automatic mechanisms can be used to impede the attacker [6].
Furthermore, it is unfeasible to perform such an attack on a 64-
bit architecture, because the number of address bits available
for randomization is too high.
In this paper, we present a new approach to exploit stack-
based buffer overﬂows in programs protected with both W⊕X
and ASLR. Our attack is an information leakage attack that
exploits information about the random base address at which a
library is loaded, available directly in the address space of the
process, and is not avoidable. Contrarily to the aforementioned
brute-force attack, with ours an attacker can subvert the exe-
cution of a vulnerable program and perform a return-to-lib(c)
with surgical precision, i.e., in a single shot. Furthermore, our
attack works independently of the strength of randomization
(i.e., it works on 32 and on 64-bit architecture), and it is
applicable to any position dependent executable. The impact of
our attack is not negligible, since the majority of executables
found in modern UNIX distributions belong to this class.
In the second part of the paper we analyze the effectiveness
that complement W⊕X and
of other existing protections,
ASLR, at mitigating our attack. Our conclusion is that ASLR
is really effective only when used in combination with position
independent executables (PIE) [7], and therefore the address
space of both shared objects and executables is randomized.
Unfortunately, modern UNIX distributions still do not widely
adopt position independent executables. We believe the reason
is to avoid performance penalties, but there are no commonly
understood motivations. Since recompilation is necessary to
transform a position dependent executable into a position in-
dependent one, we propose a new protection that is as effective
as PIE at stopping our attack, does not require recompilation of
any executable, and introduces only negligible overhead. The
proposed mitigation technique can be used to protect users of
operating systems with ASLR and PIE, but that still have to
adopt PIE on large scale (e.g., all GNU/Linux distributions).
Moreover, our protection can be used by users of operating
systems with ASLR, but lacking PIE (e.g., OpenBSD), and
by users of programs with no possibility of recompilation.
In summary, the paper makes the following contributions.
1) A new attack to exploit stack-based buffer overﬂows on
systems protected by ASLR and W⊕X.
2) An analysis of the executables found in some of the
most popular UNIX distributions to demonstrate the
wide applicability of the attack.
3) A study of the effectiveness of existing protections,
complementary to W⊕X and ASLR, at mitigating our
attack.
void sanitize(char *str, int len) {
char newstr[128];
int newlen = 0;
for (int i = 0; i :
80600a4
:
80600a8
0xb7f53204
0xb753408
PLT (Procedure Linkage Table)
:
805f7d8
:
805f7e8
jmp *0x80600a4
jmp *0x80600a8
:
b7f53204
Text (libc)
push %ebp
:
b7f53408
push %ebp
2
3
Fig. 3. Layout of a sample process and overview of the mechanism used to invoke functions residing in shared libraries
stubs. The ith PLT entry contains a jump instruction that
jumps to the address stored in the ith GOT entry. The linker,
at load time (assuming preemptive binding), ﬁlls the GOT
with the addresses of the imported functions, updated to be
consistent with the current base address of the library. The
separation between PLT and GOT is for improved security:
the former is executable but not writable, the latter is writable
but not executable, thus preventing an attacker from writing
and executing arbitrary code. For example, to invoke the libc
function open our sample program performs a function call
(instruction 0x805b127), but instead of invoking a normal
function, it invokes the stub for open in the PLT (located at
address 0x805f7d8). In turn, the stub of the PLT jumps to
the code of the function inside the libc. The jump is indirect
and the target of the jump is the address stored in the GOT
entry of the open function (at address 0x80600a4). In
summary, through the call and the indirect jump the execution
ﬂows to open in the libc (in our sample process, the absolute
address of open is 0xb7f53204).
The knowledge of the absolute address of a single function
exported by the lib(c) is sufﬁcient
to mount a successful
attack, enabling any function in the library (including those not
exported) to be invoked. Our attack exploits the information
found in the GOT of the process to calculate the base address
of the library, calculate the absolute address of an arbitrary
function of the library, and subsequently invoke that function.
Let oﬀset(s) be a function that computes the virtual offset,
relative to the base address of the library, of the symbol s. It
is worth noting that the virtual offset can be computed off-line