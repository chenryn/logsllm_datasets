 = N(5%,1%)
p
p
mx
mx
 = N(1%,0.2%)
 = N(10%,2%)
1
0.8
 TPR
 FPR
 TAIL
 R−TAIL
0.6
0.4
0.2
0
0  1  2  3  4  5  6  7  8  9  10
DT (# of clone evidences)
0  1  2  3  4  5  6  7  8  9  10
DT (# of clone evidences)
1
0.8
0.6
0.4
0.2
0
(0,0)
(1,2)
(2,4)
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
0.2
 TPR
 FPR
 DT=1
 DT=2
(3,5)
|,|V
A
A
(|L
(5,8)
(4,6)
|) (# of controlled partners and compromised readers)
(7,10) (8,12) (9,14) (10,15)(11,16)(12,18)(13,19)(14,20)
(6,9)
Figure 8. Detection rate (TPR) and false(cid:173)alarm
rate (FPR) as a function of detection threshold
DT for R-TAIL in the baseline scenario (Sec(cid:173)
tion 6.1), but considering adversary A2 that
controls |LA| locations (partners) and com(cid:173)
promises |VA| readers.
Figure 7(b) shows the impact of different misread, mis-
write, and misevent probabilities on detection and false-
alarm rates (pmr = pmw = pme = pmx = N (µ, σ), i.e.,
each probability is normally distributed with µ and σ). As
the rate of misreads and misevents rises, of course, coun-
terfeit products are more likely to go unnoticed, decreasing
the detection rate. Even under highly adverse conditions,
though, e.g., pmx = N (10%, 2%) (which translates into
85% of traces presenting at least one inconsistency), R-TAIL
detects 86% of all clones with a false-alarm rate of 2.8%
(DT = 1); with a false-alarm rate of 0.01%, the detection
rate is 64% (DT = 2).
The impact on the detection and false-alarm rates of the
stocking and transport times (Tst and Ttr) is shown in Fig-
ure 7(c). Varying Tst and Ttr does not impact the false-
alarm rate. Ttr > Tst, though, decreases the detection rate:
Under this condition, a counterfeit product injected at a re-
tailer can emerge (exits the chain) before the genuine prod-
uct reaches a 2nd-level partner.
As shown in Figure 7(d), the supply-chain structure has
a limited impact on both rates for DT = 1, and a larger
impact for DT > 1. The main determinant of the detec-
tion rate is the (average) length of the paths traversed by
products: Structures with longer paths (e.g., a 6-level binary
tree) generate more clone evidence than those with shorter
paths (e.g., a 4-level binary tree).
Similarly, counterfeit goods are harder to detect when in-
jected toward the end of the supply chain, and thus travers-
ing fewer partners, as shown in Figure 7(e). Finally, detec-
tion and false-alarm rates are invariant to the rate of injec-
tion/production of counterfeit goods (Figure 7(f)).
Figure 8 shows the impact on detection and false-alarm
rates of the stronger adversary A2, as deﬁned above in Sec-
tion 5.1. A2 controls a subset LA of supply-chain locations
(partners) and the full set of readers within these locations.
A2 injects clones at the 2nd-level distributors (Figure 6)
and compromises locations so as to control the maximum
number of complete manufacturer-retailer paths. (E.g., for
(a)
T
 = N(3,0.5), T
 = N(1,0.25)
tr
st
T
 = N(1,0.25), T
 = N(3,0.5)
tr
st
T
 = N(1,0.25), T
 = N(6,1)
tr
st
T
 = N(6,1), T
 = N(1,0.25)
tr
st
 TPR
 FPR
0
0  1  2  3  4  5  6  7  8  9  10
DT (# of clone evidences)
(c)
1
0.8
0.6
0.4
0.2
0
 TPR
 FPR
 2nd−4th level
 2nd level
 3rd level
 4th level
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
0.2
0
0 
2 
(b)
 TPR
 FPR
 4−level binary tree
 6−level binary tree
 4−level quaternary tree
6 
4 
12
DT (# of clone evidences)
10
8 
14
16
(d)
 TPR
 FPR
 r
 = 10 products/day
c
 r
 = 1
c
 r
 = 100
c
0  1  2  3  4  5  6  7  8  9  10 11 12 13 14
DT (# of clone evidences)
0  1  2  3  4  5  6  7  8  9  10 11 12 13 14
DT (# of clone evidences)
(e)
(f)
Figure 7. Detection rate (TPR) and false(cid:173)
alarm rate (FPR) as a function of detec(cid:173)
tion threshold DT for R-TAIL in (a) the base(cid:173)
line scenario (Section 6.1) and while varying:
(b) Misread, miswrite, and misevent proba(cid:173)
bilities (pmx = pmr = pmw = pme); (c) Stocking
and transport times (Tst and Ttr,
in days);
(d) Supply(cid:173)chain structure; (e) Counterfeit in(cid:173)
jection point (supply(cid:173)chain level); (f) Counter(cid:173)
feit production rate (rc).
ﬁned in Section 5.3.) TAIL is more sensitive to inconsis-
tencies generated by miswrites and misevents than R-TAIL;
it occasionally detects a cloned ID when direct clone evi-
dence is effaced by misreads. But this sensitivity yields sub-
stantially higher false-alarm rates than R-TAIL with nearly
TPRs. The best results occur with a small DT : With
DT = 1, R-TAIL detects 93% of clones with a false-alarm
rate of 0.95%; with DT = 2, the false-alarm rate drops to
0% for a detection rate of 80%. (DT > 2 merely lowers the
TPR.) Given these results, all experiments that follow use
R-TAIL only.
|LA| = 4, A2 controls locations L2 to L5.) Curves here rep-
resent the TPR and FPR for the detection thresholds leading
to the highest detection rate (F P R = 0.95%, DT = 1) and
the lowest false-alarm rate (F P R = 0, DT = 2) as a func-
tion of the number |LA| of supply-chain partners under the
control of the adversary, as well as of the number |VA| of
compromised readers. An aggressive adversary can signif-
icantly impact detection rates: Compromise of 50% of all
readers reduces the detection rate to 27%.
7 Performance Evaluation
In this section we evaluate the resource costs of tailing
in terms of storage, computation, and communication costs,
as well as its performance in terms of tag processing speed.
We assume use of EPC C1G2 RFID tags [11].
An RFID reader executing R-TAIL must read the entire
tag tail and tail pointer from tag memory and write an up-
dated pointer and a new symbol. A single EPC C1G2 write
operation operates on a data block of 16 bits, while a sin-
gle read operation operates on up to 128 bits. In a minimal
conﬁguration (8 bits for tail and pointer), a tailing operation
requires a single read and a single write operation. Figure 9
shows the corresponding communication sequence between
a reader and a tag in an inventorying and tailing operation.
The following performance results.
Storage capacity. Tailing consumes little memory, even by
the standards of low-cost tags, e.g., 8 bits. A local database
requires storage equal to the number of events generated by
the reader(s), i.e., tailing creates no additional events. Each
event, though, has to be extended with tail-related attributes
TT, TP, TF, and TMF, resulting in a minimum 7% increase
in the event size for an 8-bit tag dedicated memory.7 Use
of an EPC C1G2 tag’s full minimal data block size, i.e.,
16 bits, results in event size increasing by 10%.
Computation. Tags perform no computation, while readers
perform only lightweight operations, e.g., pseudo-random
or random number generation for bit updates. The de-
tector needs to perform the rule evaluation on each pair
of two time-consecutive events, a form of basic complex-
event-processing (CEP) that imposes fairly little computa-
tional overhead.
Communication. Tailing requires readers to perform extra
write operations (see below on tag processing speed), but
carries no extra cost on back-end communication between
local databases and the detector;8 however, as for its storage
7Assuming a basic event that comprises 28 bytes:
(ID(12 bytes),
T (8 bytes), L(4 bytes), P (4 bytes)). For one-byte storage granularity,
an 8-bit dedicated memory requires 2 bytes of storage, and a 16-bit one,
3 bytes of storage.
8We assume that events are already collected by other service-oriented
platforms to optimize business processes.
Figure 9. EPC C1G2(cid:173)compliant tailing oper(cid:173)
ation and tag inventorying for one tag. CW
stands for continuous waveform.
overhead for events, messages have to additionally include
the tail-related attributes.
Tag processing speed. The EPC C1G2 standard requires
a nominal tag processing speed for inventory operations
(reads) of 24.4 to 1838 tags/s, depending on several pa-
rameters (e.g., the tag data rate, encoding scheme, and data
modulation). As noted above, tailing requires writing into
tag memory, currently a time-intensive operation: The EPC
C1G2 standard allows a write time up to 20 ms for a sin-
gle 16-bit memory block. With an 8-bit dedicated memory,
writing a new tail bit and updating the tag pointer (4 bits
in total) would require writing an entire memory block, re-
sulting in a nominal tag processing speed of 9.6/44.5 tags/s.
Commercial tags, however, outperform EPC speciﬁcations;
e.g., the Impinj Monza 5 chip [1] supports a write speed of
approx. 2.5 ms, potentially boosting processing speed to
11.5/200 tags/s. (Other tags, we believe, are similar.)
In summary, tailing carries little overhead. Its main cost
is the slowdown on reader-to-tag communication caused by
tag writes. However, tailing can be performed by a few
readers in a supply-chain facility (e.g., upon product receipt
and shipping as explored in Section 6), which makes it a rare
operation. Consequently, we believe that tailing promises to
be highly scalable in real-world supply-chain environments.
8 Comparison
Using our supply-chain simulator from Section 6.1, we
now compare tailing against the clone detection schemes of
Lehtonen et al. [24] and Zanetti et al. [36].
The Lehtonen et al. [24] scheme resembles tailing: It
writes a fresh, single random value in tag memory at each
tag observation. A tag event includes the old (read) value
and the fresh (written) one.
In contrast to tailing, this
scheme relies on an online centralized entity that creates and
stores tag events and veriﬁes consistency between them. If a
previously written value (stored in event ei−1) is identical to
the currently read one (event ei), the tag and the centralized
entity are said to be synchronized; otherwise a clone alert
is raised. We refer to this scheme as synchronization (or
SYNCH). The Zanetti et al. [36] scheme veriﬁes the correct-
ness of consecutive shipping and receiving operations using
1
0.8
0.6
0.4
0.2
0
0 
1 
2 
 TPR
 FPR
 R−TAIL
 SYNCH
 PROC
1
0.8
0.6
0.4
0.2
0
 TPR
 FPR
 R−TAIL
 R−SYNCH
 R−PROC
1
0.8
0.6
0.4
0.2
0
 TPR
 FPR
 R−TAIL
 R−SYNCH
 PROC
4 
3 
7 
DT (# of clone evidences)
5 
6 
8 
9 
10
0
1
2
4
3
7
DT (# of clone evidences)
5
6
8
9
10
0
1
2
3
4
DT (# of clone evidences)
(a)
(b)
(c)
Figure 10. Detection rate (TPR) and false(cid:173)alarm rate (FPR) as a function of detection threshold DT
for robust 1bit(cid:173)tailing (R-TAIL), synchronization (SYNCH and R-SYNCH), and process(cid:173)based (PROC and
R-PROC) schemes for: (a,b) The baseline scenario (Section 6.1); (c) A more challenging, highly adverse
scenario with pmr = pmw = pme = N (10%, 2%), Tst = N (1, 0.25) days, Ttr = N (6, 1) days, counterfeit
products injected at the retailers, and a 4(cid:173)level quaternary(cid:173)tree chain structure.
1
0.8
0.6
0.4
0.2
0
(0,0)
(1,2)
(2,4)
 TPR  
 FPR  
R−TAIL   
R−SYNCH   
PROC
1
0.8
0.6
0.4
0.2
0
(3,5)
|,|V
A