"version": "1.2",
"background_page": "background.html",
"permissions": [
Reachability. We computed the security lattice for the
Firefox extension interfaces by implementing our rules in
Datalog. We add an edge from one interface to another if
our deductive system computes that a reference to an object
with the ﬁrst interface implemented by one principal could
lead to an object with the second interface implemented by
the same principal. Notice that the type forgery rule permits
us to reason about each interface individually instead of re-
quiring us to build a lattice over sets of interfaces. Figure 5
summarizes the lattice by coalescing all the interfaces with
the same security rating into a single vertex and contracting
the unlabeled interfaces.
Of the 2920 edges in the lattice, 147 edges go “up” the
lattice. These upward edges represent potential escalation
points that make reducing the privilege of extensions difﬁ-
cult. Because our analysis is an over-approximation, some
of these edges might not actually be exploitable given the
Firefox implementation of the extension interfaces. How-
ever, even these edges might become exploitable if an exten-
sion replaces the built-in implementation of the relevant in-
terface. To retroﬁt security onto the Firefox extension API,
we recommend preventing privilege escalation by removing
these edges, either by adding runtime access control checks
or by taming the interfaces at design time. When designing
a new extension system, we suggest not introducing escala-
tion points into the security lattice.
4 Google Chrome Extension System
In this section, we describe and evaluate the security ar-
chitecture of the Google Chrome extension system. We fo-
cus on the aspects of the design related to protecting users
from benign-but-buggy extensions. The security model for
"tabs",
"http://*.google.com/",
"https://*.google.com/"
],
"browser_action": {
"default_title": ""
},
"icons": {
"128": "icon_128.png"
}
}
In the example, Gmail Checker needs access to subdomains
of google.com and the tabs API. An extension can re-
quest a number of different privileges in its manifest:
• Execute Arbitrary Code. Although our case study
suggests that a majority of extensions do not require
the privilege to execute arbitrary code, some exten-
sions do require this privilege. To request the privilege
to execute arbitrary code, an extension lists a native
binary in its manifest.
• Web Site Access. Extensions can also request the
privilege to interact with web sites. Instead of receiv-
ing access to all web sites, extensions designate which
web sites they would like to access by origin. For ex-
ample, Gmail Checker requests access to subdomains
of Google by listing http://*.google.com
and https://*.google.com in its manifest.
If the extension were later compromised,
the at-
tacker would not have the privilege to access
https://bank.com.
• API Access.
In addition to the usual web platform
APIs, extensions can also request access to extension
APIs, which are grouped according to functionality.
7
Interface
User chooses a ﬁle (N)
HTML5 storage (N)
HTML5 storage (N)
Behavior
User chooses a ﬁle (N)
Extension-speciﬁc ﬁles (N)
Extension-speciﬁc SQLite (N)
Speciﬁc-domain network access (M) Restricted domains (M)
Page for display only (L)
Page for display only (L)
Restricted domains (M)
DOM of speciﬁc sites (M)
Gleam API (L)
Highlighted text/images (L)
HTML5 storage (N)
Same-extension prefs (N)
Language preferences (M)
Browser settings (M)
Disparity?
No
No
No
No
No
No
No
No
No
Figure 6. The proposed Google Chrome extension interfaces closely match the privileges required
by the 25 extensions in our case study.
For example, the extension system contains an API
group called tabs for interacting with the browser’s
tab strip (creating tabs, moving tabs, etc.). An ex-
tension is granted access to an API group only if that
group appears in the extension’s manifest.
The API groups closely match the privileges needed
by the extensions we studied in Section 3.1. Figure 6
shows how those extensions could implement their
functionality using the extension APIs. For example,
an extension that requires access only to user-selected
ﬁles can use the  element,
which grants the extension access to a ﬁle chosen by
the user (and not to a mutable ﬁle handle).
Without additional encouragement, developers are likely to
request the maximum possible privileges for their exten-
sions, reducing the beneﬁts of least privilege. To encour-
age developers to request the minimum required privileges,
we alter the user experience for installing an extension from
the Google-controlled extension gallery based on the maxi-
mum privilege level the extension requests. The most dan-
gerous class of extensions (extensions with the privilege
to execute arbitrary code) are not permitted in the gallery
unless the developer signs a contract with Google. An-
other approach is to review extensions manually, as in the
addons.mozilla.org gallery.
In this approach, the
manifests make it easier for reviewers to prioritize reviews
of low-privilege extensions. This incentivizes developers to
request fewer privileges to reduce review latency. Whether
these incentives are sufﬁcient to encourage least privilege
will depend largely on whether developers can gain more
exposure for their extensions by appearing in the gallery
sooner or more prominently.
Extensions can also be installed from arbitrary web sites.
This install experience is different from installing an exten-
sion from the gallery. When installing an extension from
outside the gallery, the user experience is the same as the
user experience for downloading and running a native ex-
ecutable. An attacker who can trick a user into installing
a malicious extension this way can likely already trick the
user into running an arbitrary executable, giving the attacker
little additional leverage.
4.2 Privilege Separation
To make it more difﬁcult for a malicious web site oper-
ator to usurp an extension’s privileges, the extension plat-
form forces developers to divide their extensions into mul-
tiple components: content scripts, the extension core, and a
native binary (see Figure 1):
• Content Scripts. Content scripts let extensions inter-
act directly with untrusted web content. If the manifest
limits the extension’s access to origins, the browser
blocks the extension from injecting content scripts into
unauthorized origins. Each content script, written in
JavaScript, has direct access to the DOM of a single
web page via the standard DOM APIs. Content scripts
do not have access to the powerful extension APIs pro-
vided by the browser. The only other privilege granted
to content scripts is the privilege to send JSON [2]
messages to the extension core via a postMessage-
like API.
• Extension Core.
The extension core, written in
HTML and JavaScript, controls the extension’s user
interface (e.g., browser actions, pop-ups) and has ac-
cess to the extension APIs declared in the extension’s
manifest. The extension core contains the majority of
the extension’s privileges, but it is insulated from di-
rect interaction with untrusted web content. To interact
with untrusted content, the extension core can either
(1) communicate with a content script or (2) issue an
XMLHttpRequest. Both of these mechanisms re-
quire the extension author to take explicit action and
restrict the interaction to plain data.
8
• Native Binary. Only native binaries can run arbitrary
code or access arbitrary ﬁles. To gain these privileges,
the extension developer must supply a native Netscape
Plug-in API (NPAPI) binary. For example, on Win-
dows such a binary consists of a dynamically linked
library (DLL) with certain entry points. By default,
the native binary can interact only with the extension
core (e.g., not with content scripts). Furthermore, the
interaction is typically limited to the interfaces deﬁned
when the native binary was compiled, but, of course,
the native binary can re-compile itself because it can
run arbitrary code. Similarly, the manifest lets devel-
opers expose their native binaries to web pages be-
cause there are no technical means for stopping an ex-
tension that can run arbitrary code from installing a
regular browser plug-in.
Content scripts, which have the largest attack surface, do
not have a direct channel to the component with critical
privileges. By dividing the extension’s privileges among
three components, the extension system makes it harder for
an attacker to exploit the user’s machine. To run arbitrary
code, the attacker ﬁrst convinces the extension’s content
script to forward malicious input to the extension core. The
attacker then convinces the extension core to forward the
malicious input to the native binary (assuming one even ex-
ists). Finally, the attacker exploits a vulnerability in the na-
tive binary.
4.3
Isolation Mechanisms
The extension system uses three mechanisms to isolate
extension components from each other and from web con-
tent. First, we leverage the same-origin web sandbox by
running the extension core in a unique origin designated by
a public key. Second, we run the extension core and the na-
tive binaries in their own processes. Finally, content scripts
run in a separate JavaScript heap from untrusted web con-
tent.
Origin.
In the web platform, the authority of a script is
derived from its origin (in particular, the scheme, host,
and port of the URL from which the browser obtained the
script). However, extension scripts are not loaded from
the network; extensions are stored in the user’s ﬁle system.
Consequently, extensions do not have an origin in the usual
sense. We assign an “origin” to an extension by including a
public key in the extension’s URL as follows:
chrome-extension://
ilpnegfhimflflifcnmgpeihglhedbnn/
When loading an extension, the browser veriﬁes that the
extension package is “self-signed” by the public key in its
URL. Placing the extension’s public key in its URL frees the
extension system from depending on a central naming au-
thority (like a public-key infrastructure or DNS), reducing
the attack surface of the platform and simplifying extension
signing. By using this approach, we can reuse the web’s
same-origin machinery to isolate extensions from browser
internals, web pages, and each other.
This approach to extension identity also makes updating
extensions easy. If the browser encounters a newer exten-
sion package signed with the same public key, the browser
can replace the installed version of the extension (unless the
new manifest requests critical privileges and changes the in-
stall experience). When the browser reloads the extension,
the updated version inhabits the same security context as
the old version, analogous to re-visiting a web site. In par-
ticular, the updated extension still has access to its previous
persistent state because localStorage is segregated by
origin and its origin remains the same.
Process Isolation. Each component of the extension runs
in a different process. The extension core and the native bi-
nary each receive dedicated processes. Content scripts run
in the same process as their associated web pages. This pro-
cess isolation has two beneﬁts: it defends against browser
errors and low-level exploits. Process isolation helps pro-
tect the extension core from browser implementation er-
rors, such as cross-origin JavaScript capability leaks [12],
because JavaScript objects cannot leak from one process to
another. Process isolation also defends against low-level
exploits in the browser. For example, if a malicious web
site operator manages to corrupt the renderer process [11]
(e.g., via a buffer overﬂow), the attacker will not be granted
access to the extension APIs because the extension core re-
sides in another process.
Isolated Worlds. We provide an additional layer of isola-
tion between the content script and the untrusted web site’s
JavaScript environment by running the content script in an
isolated world. Instead of accessing the underlying DOM
data structures via the same JavaScript objects used by the
page, each content script accesses the DOM with its “own”
JavaScript objects. Content scripts and web pages therefore
never exchange JavaScript pointers, making it more difﬁcult
for a malicious web page to confuse the content script (e.g.,
with a JavaScript rootkit [9]).
This design changes the normal one-to-one relation be-
tween DOM implementation objects and their JavaScript
representations (see Figure 7) into a one-to-many rela-
tion (see Figure 8). For example, both the page and the
content script have a global variable named document,
but these variables refer to two distinct JavaScript objects.
Consistency is still maintained: when either script calls a
DOM method, such as appendChild, both objects are
9
To select the correct world with reasonable assurance, we
cache a reference to the appropriate world on the function
object itself at the time the callback is registered.
4.4 Performance
Separating extensions into components could potentially
add overhead to operations that involve multiple compo-
nents. For example, if a content script needs to use privi-
leges held by the extension core, the content script needs to