LOLbin CertUtil 
Decode 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "certutil.exe" 
| where ProcessCommandLine contains "-decode" 
and ProcessCommandLine contains "\\AppData\\" 
| project EventTime, ComputerName, 
ProcessCommandLine, InitiatingProcessFileName, 
AccountName   
| top 1000 by EventTime 
MSOffice Abuse 
Indicators 
ProcessCreationEvents   
| where EventTime > ago(1d) 
| where InitiatingProcessParentName contains 
"winword.exe" or InitiatingProcessParentName 
contains "excel.exe" or 
InitiatingProcessParentName contains  
"powerpnt.exe" 
| where FileName contains "cscript" or FileName 
contains "wscript" or FileName contains 
"powershell" 
| project EventTime, ComputerName, 
ProcessCommandLine, InitiatingProcessFileName, 
InitiatingProcessParentName,  AccountName   
| top 1000 by EventTime 
LOLbin RunDll32 
Activity 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "rundll32.exe" 
| where ProcessCommandLine contains 
",Control_RunDLL" 
| summarize makeset(ComputerName), 
424 
makeset(AccountName), dcount(ComputerName)   by 
InitiatingProcessFileName, ProcessCommandLine 
| sort by dcount_ComputerName desc 
LOLbin RunDll32 
Register Server 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "rundll32.exe" 
| where ProcessCommandLine contains 
"DllRegisterServer" 
| summarize makeset(ComputerName), 
makeset(AccountName)  by 
InitiatingProcessFileName, ProcessCommandLine 
| sort by InitiatingProcessFileName asc  
LOLbin RunDll32 
Suspicious 
Execution 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "rundll32.exe" 
| where InitiatingProcessFileName in 
("winword.exe" , "excel.exe" , "cscript.exe" , 
"wscript.exe" , "mshta.exe" ) 
| summarize makeset(ComputerName), 
makeset(AccountName)  by 
InitiatingProcessFileName, ProcessCommandLine 
| sort by InitiatingProcessFileName asc 
LOLbin RunDll32 
HTA Remote 
ProcessCreationEvents   
| where EventTime > ago(1d) 
| where FileName =~ "rundll32.exe" 
| where ProcessCommandLine contains 
"mshtml,RunHTMLApplication" 
| project EventTime, ComputerName, 
ProcessCommandLine, InitiatingProcessFileName, 
AccountName   
| top 1000 by EventTime 
LOLbin RunDll32 
Roaming Profile 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "rundll32.exe" 
| where ProcessCommandLine contains 
"\\roaming\\" 
| where ProcessCommandLine !contains "\\STREAM 
Interactive (Emirates).appref-ms|" 
| summarize makeset(ComputerName), 
makeset(AccountName)  by 
InitiatingProcessFileName, ProcessCommandLine 
| sort by InitiatingProcessFileName asc 
at.exe Process 
Execution 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "at.exe" 
| project EventTime, ComputerName, 
ProcessCommandLine, InitiatingProcessFileName, 
AccountName   
| top 1000 by EventTime 
WMIC Process 
call 
ProcessCreationEvents   
| where EventTime > ago(7d) 
425 
| where FileName =~ "WMIC.exe" 
| where ProcessCommandLine contains "process 
call create" 
| project EventTime, ComputerName, 
ProcessCommandLine, InitiatingProcessFileName, 
AccountName   
| top 1000 by EventTime 
Process wscript 
to .js 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "wscript.exe" 
| where ProcessCommandLine contains ".js" 
| summarize makeset(ComputerName), 
makeset(AccountName)  by 
InitiatingProcessFileName, ProcessCommandLine 
| sort by InitiatingProcessFileName asc  
Process wscript 
creating .zip/.
rar 
ProcessCreationEvents   
| where EventTime > ago(7d) 
| where FileName =~ "wscript.exe" 
| where ProcessCommandLine contains 
"\\appdata\\" and ProcessCommandLine contains 
".zip" or ProcessCommandLine contains 
"\\Rar$*\\"  
| project EventTime, ComputerName, 
ProcessCommandLine, InitiatingProcessFileName, 
AccountName   
| top 1000 by EventTime 
Uncoder: One common language for cyber security 
https://uncoder.io/ 
Uncoder.IO is the online translator for SIEM saved searches, 
filters, queries, API requests, correlation and Sigma rules to help 
SOC Analysts, Threat Hunters and SIEM Engineers. Easy, fast and 
private UI you can translate the queries from one tool to another 
without a need to access to SIEM environment and in a matter of 
just few seconds. 
Uncoder.IO supports rules based on Sigma, ArcSight, Azure Sentinel, 
Elasticsearch, Graylog, Kibana, LogPoint, QRadar, Qualys, RSA 
NetWitness, Regex Grep, Splunk, Sumo Logic, Windows Defender ATP, 
Windows PowerShell, X-Pack Watcher. 
REFERENCE: 
https://github.com/beahunt3r/Windows-
Hunting/tree/master/WindowsDefenderATP%20Hunting%20Queries%20 
https://docs.microsoft.com/en-us/windows/security/threat-protection/ 
W
W 
WIRELESS FREQUENCIES 
ALL 
INFORMATIONAL 
N/A 
426 
STANDARD 
FREQUENCIES 
802.11 
2.4, 3.6, 4.9, 5.0, 5.2, 5.6, 5.8, 
5.9 and 60 GHz 
802.11a 
5.0 GHz 
802.11b/g 
2.4 GHz 
802.11n 
2.4, 5.0 GHz 
Bluetooth/BLE 
2.4-2.483.5 GHz 
CDMA2000 (inc. EV-DO, 1xRTT) 
450, 850, 900 MHz 1.7, 1.8, 1.9, 
and 2.1 GHz 
EDGE/GPRS 
850 MHz, 900 MHz, 1.8 GHz, and 
1.9 GHz 
EnOcean 
868.3 MHz 
Flash-OFDM 
450 and 870 MHz 
iBurst 
1.8, 1.9, and 2.1 GHz 
ISM Band 
4.33GHz, 915MHz, 2.4GHz, 5GHz 
Keyless FOB 
315 MHz (US) 433.92 MHz (EU,Asia) 
Low Rate WPAN (802.15.4) 
868 MHz (EU), 915 MHz (US), 
2.4 GHz 
RFID 
120-150 kHz (LF) 13.56 MHz (HF) 
UMTS FDD 
850 MHz, 900 MHz, 2.0, 1.9/2.1, 
2.1, and 1.7/2.1 GHz 
UMTS-TDD 
450, 850 MHz, 1.9, 2, 2.5, and 
3.5 GHz 
Vemesh 
868 MHz, 915 MHz, and 953 MHz 
WiMax (802.16e) 
2.3, 2.5, 3.5, 3.7, and 5.8 GHz 
Wireless USB, UWB 
3.1 to 10.6 GHz 
AT&T 4G [2, 4, 5, 12, 14, 
17, 29, 30, 66] 
1900MHz, 1700MHz abcde, 700MHz bc 
Verizon Wireless 4G [2, 4, 
5, 13, 66] 
1900MHz, 1700MHZ f, 700MHz c 
T-Mobile 4G [2, 4, 5, 12, 
66, 71] 
1900MHz, 1700MHz def, 700MHz a, 
600MHz 
Sprint 4G [25, 26, 41] 
1900MHz g, 850MHz, 2500MHz 
Europe 4G [3, 7, 20] 
1800MHz, 2600MHz, 800MHz 
China,India 4G [40, 41] 
2300MHz, 2500MHz 
Longwave AM Radio 
148.5 kHz – 283.5 kHz 
Mediumwave AM Radio 
525 kHz – 1710 kHz 
Shortwave AM Radio 
3 MHz – 30 MHz 
HF 
0.003 - 0.03 GHz 
VHF 
0.03 - 0.3 GHz 
UHF 
0.3 - 1 GHz 
L 
1 - 2 GHz 
S 
2 - 4 GHz 
C 
4 - 8 GHz 
X 
8 - 12 GHz 
Ku 
12 - 18 GHz 
K 
18 - 27 GHz 
Ka 
27 - 40 GHz 
V 
40 - 75 GHz 
427 
W 
75 - 110 GHz 
mm or G 
110 - 300 GHz 
REFERENCE 
https://en.wikipedia.org/wiki/Comparison_of_wireless_data_standards 
https://en.wikipedia.org/wiki/List_of_interface_bit_rates 
WIRELESS_Tools 
BETTERCAP 
https://www.bettercap.org/intro/ 
bettercap is a powerful, easily extensible and portable framework 
written in Go which aims to offer to security researchers, red 
teamers and reverse engineers an easy to use, all-in-one solution 
with all the features they might possibly need for performing 
reconnaissance and attacking WiFi networks, Bluetooth Low Energy 
devices, wireless HID devices and Ethernet networks. 
KISMET 
https://www.kismetwireless.net/ 
Kismet is a wireless network and device detector, sniffer, 
wardriving tool, and WIDS (wireless intrusion detection) framework. 
Kismet works with Wi-Fi interfaces, Bluetooth interfaces, some SDR 
(software defined radio) hardware like the RTLSDR, and other 
specialized capture hardware. 
PWNAGOTCHI 
https://pwnagotchi.ai/ 
Pwnagotchi is an A2C-based “AI” powered by bettercap and running on 
a Raspberry Pi Zero W that learns from its surrounding WiFi 
environment in order to maximize the crackable WPA key material it 
captures (either through passive sniffing or by performing 
deauthentication and association attacks). This material is 
collected on disk as PCAP files containing any form of handshake 
supported by hashcat, including full and half WPA handshakes as 
well as PMKIDs. 
AIRCRACK-NG 
https://www.aircrack-ng.org/ 
Aircrack-ng is a complete suite of tools to assess WiFi network 
security. It focuses on different areas of WiFi security: 
Monitoring: Packet capture and export of data to text files for 
further processing by third party tools 
Attacking: Replay attacks, deauthentication, fake access points and 
others via packet injection 
Testing: Checking WiFi cards and driver capabilities (capture and 
injection) 
Cracking: WEP and WPA PSK (WPA 1 and 2) 
WIFI-ARSENAL - GitHub Everything Wireless 
428 
https://github.com/0x90/wifi-arsenal 
NEW TO SDR (Software Defined Radio) 
https://luaradio.io/new-to-sdr.html 
W
W 
WIRESHARK 
RED/BLUE TEAM 
NETWORK TRAFFIC 
WINDOWS/LINUX/MacOS 
Wireshark is an open-source network protocol analysis software 
program. 
FILTER 
DESCRIPTION 
!(arp or icmp or stp) 
Filters out arp, icmp, stp  
protocols to reduce background 
noise 
dst host ff02::1  
Captures all IPv6 traffic within 
the local network that is 
multicast 
eth.addr 
Filter MAC Address 
eth.dst.eth.src 
Filter MAC Address 
eth[0x47:2] == 01:80 
offset filter for HEX values of 
0x01 and 0x80 at the offset 
location of 0x47 
ether host ##:##:##:##:##:## 
Captures only traffic to or from 
the MAC address 
used.  Capitalizing hexadecimal 
letters does not matter. 
Example: ether host 
01:0c:5e:00:53:00 
frame contains traffic 
displays all packets that 
contain the word ‘traffic’. 
host #.#.#.# 
Capture only traffic to or from 
a specific IP address.  Example: 
host 192.168.1.1 
host www.example.com and not 
(port xx or port yy) 
Capture all traffic, exclude 
specific packets. 
http.authbasic 
Filter to HTTP Basic 
Authentication 
http.cookie 
Filter to HTTP Cookies 
http.data 
Filter to HTTP data packets 
http.referer 
Filter to HTTP Referer headers 
http.request 
Sets a filter for all HTTP GET 
and POST requests. 
http.server 
Filter to HTTP Server 
http.user_agent 
Filter to HTTP User Agent 
strings 
http.www_authentication 
Filter to HTTP authentication 
429 
ip 
Captures only IPv4 traffic 
ip proto 41 
Capture only IPv6 over IPv4 
Tunnelled Traffic. 
ip.addr == 10.0.0.0/24 
Shows packets to and from any 
address in the 10.0.0.0/24 space 
ip.addr == 10.0.0.1 
Sets a filter for any packet 
with 10.0.0.1, as either the src 
or dest 
ip.addr==10.0.0.1  && 
ip.addr==10.0.0.2  
sets a conversation filter 
between the two defined IP 
addresses 
ip.dst  
Filter IP to destination 
ip.src 
Filter IP to source 
ip6 
Capures only IPv6 traffic 
ip6 and not ip proto 41 
Capture IPv6 Native Traffic 
Only.  This will exclude 
tunnelled IPv6. 
net #.#.#.#/24 
Capture traffic to or from 
(sources or destinations) a 
range of IP addresses 
not broadcast and not 
multicast 
Capture only Unicast traffic.  
port ## 
Captures only a particular src 
or dst port 
port sip 
Captures all SIP traffic (VoIP) 
pppoes 
Capture PPPOE traffic 
tcp 
Captures only TCP traffic 
tcp contains xxx 
searches TCP packets for that 
string 
tcp portrange 1800-1880 
Capture traffic within a range 
of ports 
tcp.analysis.flags 
&& !tcp.analysis.window_update 
displays all retransmissions, 
duplicate acks, zero windows, 
and more in the trace 
tcp.dstport 
Filter Port to TCP destination 
tcp.flags == 0x012 
displays all TCP SYN/ACK packets 
& shows the connections that had 
a positive response. Related to 
this is tcp.flags.syn==1 
tcp.port==4000 
sets a filter for any TCP packet 
with 4000 as src or dest 
tcp.srcport 
Filter port to TCP source 
tcp.time_delta > .250 
sets a filter to display all tcp 
packets that have a delta time 
of greater than 250ms 
udp.dstport 
Filter Port to UDP destination 
udp.srcport 
Filter Port to UDP source 
vlan 
Captures only VLAN traffic. 
wlan.fc.type eq 0 
Filter to 802.11 Management 
Frame 
430 
wlan.fc.type eq 1 
Filter to 802.11 Control Frame 
wlan.fc.type_subtype eq 0 
(1=response) 
Filter to 802.11 Association 
Requests 
wlan.fc.type_subtype eq 11 
(12=authenticate) 
Filter to 802.11 Authentication 
Requests 
wlan.fc.type_subtype eq 2 
(3=response) 
Filter to 802.11 Reassociation 
Requests 
wlan.fc.type_subtype eq 4 
(5=response) 
Filter to 802.11 Probe Requests 
wlan.fc.type_subtype eq 8 
Filter to 802.11 Beacons 
REFERENCE: 
https://www.wireshark.org/ 
https://hackertarget.com/wireshark-tutorial-and-cheat-sheet/ 
https://www.willhackforsushi.com/papers/80211_Pocket_Reference_Guide.pdf 
https://www.cellstream.com/reference-reading/tipsandtricks/379-top-10-
wireshark-filters-2 
Y 
Y
Y 
YARA 
ALL 
DISCOVERY 
N/A 
YARA is an open source tool aimed at helping researchers to 
identify and classify malware samples. YARA you can create 
descriptions of malware families based on textual or binary 
patterns. Descriptions consist of a set of strings and a Boolean 
expression which determine its logic. 
META 
431 
Metadata section input additional information about your rule with 
user created assigned values. 
STRINGS 
Three types of strings in YARA:  
1- hexadecimal 
  -wild-cards    
Ex. { E2 34 ?? C8 A? FB } 
  -jumps  
Ex. { F4 23 [4-6] 62 B4 } 
  -alternatives 
Ex. { F4 23 ( 62 B4 | 56 ) 45 } 
2- text 
-case-sensitive  
Ex. "text" 
-case-insensitive 
Ex. "text" nocase 
-wide-character 
Ex. "text" wide 
-full words 
Ex. "text" fullword 
3- regular expressions 
\  
Quote the next metacharacter 
^  
Match the beginning of the file 
$  
Match the end of the file 
|  
Alternation 
()  
Grouping 
[]  
Bracketed character class 
Quantifiers: 
*  
Match 0 or more times 
+  
Match 1 or more times 
?  
Match 0 or 1 times 
{n}  
Match exactly n times 
{n,}  
Match at least n times 
{,m}  
Match 0 to m times 
{n,m}  
Match n to m times 
*?  
Match 0 or more times, non-greedy 
+?  
Match 1 or more times, non-greedy 
??  
Match 0 or 1 times, non-greedy 
{n}?  
Match exactly n times, non-greedy 
{n,}?  
Match at least n times, non-greedy 
{,m}?  
Match 0 to m times, non-greedy 
{n,m}?  
Match n to m times, non-greedy 
Escape seq: 
\t  
Tab (HT, TAB) 
\n  
New line (LF, NL) 
\r  
Return (CR) 
\n  
New line (LF, NL) 
\f  
Form feed (FF) 
\a  
Alarm bell 
\xNN  
Character whose ordinal number is the given 
hexadecimal number 
Char classes: 
\w  
Match a word character (aphanumeric plus “_”) 
\W  
Match a non-word character 
432 
\s  
Match a whitespace character 
\S  
Match a non-whitespace character 
\d  
Match a decimal digit character 
\D  
Match a non-digit character 
Zero-with 
assertions: 
\b  
Match a word boundary 
\B  
Match except at a word boundary 
CONDITION 
Conditions are Boolean expressions to be met.  
+ boolean (and, or, not) 
+ relational operators (>=, , ==, !=)  
+ arithmetic operators (+, -, *, \, %) 
+ bitwise operators (&, |, >, ~, ^) 
Example YARA Rule: 
rule ExampleRule 
{ 
    meta: 
author = "netmux" 
description = "Detects Emotet binary" 
license = "Free as in beer" 
    strings: 
        $ex_text_string = "text string" nocase 
        $ex_hex_string = { E2 34 A1 C8 23 FB } 
    condition: 
        $ex_text_string or $ex_hex_string 
} 
YARA SIGNATURE CREATION MINDMAP: 
@cyb3rops **https://twitter.com/cyb3rops/status/1210992711903383554?s=11 
433 
Uncoder: One common language for cyber security 
https://uncoder.io/ 
Uncoder.IO is the online translator for SIEM saved searches, 
filters, queries, API requests, correlation and Sigma rules to help 
SOC Analysts, Threat Hunters and SIEM Engineers. Easy, fast and 
private UI you can translate the queries from one tool to another 
without a need to access to SIEM environment and in a matter of 
just few seconds. 
Uncoder.IO supports rules based on Sigma, ArcSight, Azure Sentinel, 
Elasticsearch, Graylog, Kibana, LogPoint, QRadar, Qualys, RSA 
NetWitness, Regex Grep, Splunk, Sumo Logic, Windows Defender ATP, 
Windows PowerShell, X-Pack Watcher. 
REFERENCE: 
https://yara.readthedocs.io/en/v3.4.0/writingrules.html 
https://github.com/InQuest/awesome-yara 
434 
NOTES 
435 
NOTES 
436 
NOTES