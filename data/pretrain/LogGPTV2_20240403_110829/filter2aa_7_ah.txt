当然，“做什么”和“怎么做”不应被割裂开来。如果你决定做某件事，却不清楚如何实现，那你就是在自找麻烦。然而，仅仅专注于实现某种规格，并不是黑客精神的体现。黑客的最高境界在于创造新的标准。通常情况下，实现这一目标的最佳方式是先制作一个能够展示新标准的样品。

或许有一天，“计算机科学”会分裂成几个独立的部分，这或许是一件好事。特别是如果我所从事的领域——黑客工作——能够独立出来，那将更为理想。将不同类型的工作捆绑在一起，虽然可能出于行政管理的方便，但容易造成概念上的混淆。这也是我不喜欢“计算机科学”这个术语的一个原因。处于中间位置的“计算机科学家”们，或许可以被称为从事实验性计算机科学研究的人。然而，位于两端的数学家和黑客实际上并不在进行计算机科学研究。

对于数学家来说，他们似乎并不在乎自己是在研究计算机还是纯粹的数学。一旦进入这个领域，他们会迅速投入到定理证明中去，与传统意义上的数学家无异。不久之后，他们甚至可能会忘记自己所在的办公楼外挂着的是“计算机科学系”的牌子。但对于黑客而言，“计算机科学”这一标签则显得有些不合适。如果黑客的工作被视为一种科学，那么他们可能会觉得有必要遵循科学研究的方法论，从而偏离了真正想做的事情：设计优雅的软件。因此，在大学或实验室工作的黑客们，往往会转而撰写研究论文，而非专注于开发优秀的软件产品。

当黑客被迫写论文时，即使是最理想的情况下，这些论文也往往只是一些补充性的描述，缺乏实际价值。通常，黑客首先开发出一款出色的软件，然后才会考虑撰写一篇介绍该软件的论文。这种结合往往是错误的，常常会导致问题的发生。为了适应论文的研究性质，黑客们很容易将工作重心从开发优雅的软件转向制造一些不那么令人满意的产品。

优雅的软件并不总是适合成为论文的主题。一方面，科学研究要求原创性；另一方面，它需要能够产生大量成果。那些尚未成熟且充满挑战的领域往往更容易产出大量论文，因为你可以详细阐述为克服各种障碍所做的努力。例如，在人工智能（AI）领域，很多研究都基于这样一个假设：通过一系列谓词逻辑表达式加上代表抽象概念的参数，就能够表达人类的知识。基于这样的假设，研究人员可以写出许多篇解释其实施过程的论文。然而，这种方法更像是电视剧《我爱露西》中的情节：“露西，你得好好解释一番了。”

创造美好事物的方式往往不是从零开始，而是对现有成果进行微小改进，或将已有观点以新颖的方式重新组合。这类工作很难通过研究论文来表达。

那么，为什么大学和实验室会将论文数量作为评价黑客工作成效的标准呢？这种情况其实很常见，比如我们用简单的标准化测试来评估学生的学术能力倾向，或者根据程序员编写的代码行数来衡量其工作效率。这些方法易于执行，因而常被采用。

真正想要的是设计出优雅的软件，但要准确评估这项工作的质量是非常困难的。你需要具备良好的设计感才能评判别人的设计是否优秀。遗憾的是，认为自己拥有良好设计感与实际情况之间并不存在直接联系，甚至可能存在负相关关系。

唯一有效的外部评价标准就是时间。经过岁月洗礼后，美好的东西更有可能生存下来，丑陋的东西则会被淘汰。不幸的是，这种评价过程可能比一个人的生命还要漫长。塞缪尔·约翰逊曾说过，人们需要一百年的时间才能对一位作家达成一致的评价。必须等到他的朋友和追随者都去世后，才能对他做出公正的评判。

我认为，名声具有很大的随机性，黑客对此只能听天由命。在这方面，他们与其他创作者并无不同。事实上，相比其他领域的创作者，黑客们还算是幸运的。短暂的流行趋势对画家的影响远大于对黑客的影响。

无法得到外界的认可，甚至被误解，都不是最糟糕的事情。更大的危险在于你自己也可能误解自己的工作。因为你总是从相关领域寻找灵感，如果你发现自己身处计算机科学系，自然就会认为“计算机科学”与其他理论科学并无二致，你的工作属于“理论计算机科学”范畴内的应用研究。在我读研究生期间，我一直有一种不舒服的感觉，觉得自己应该多学习一些理论知识，而不是在期末考试结束后不到三周就把所有内容忘得一干二净。现在我意识到这是不对的。黑客了解“计算理论”的必要性，就像画家了解颜料化学成分一样有限。一般来说，你需要知道如何计算时间和空间复杂度；如果要编写解析器，则还需要理解状态机的概念；除此之外，并不需要掌握太多理论知识。

我发现，黑客获取新想法的最佳来源并非那些名字中含有“计算机”字样的理论领域，而是来自其他创作领域。与其在“计算理论”领域寻找灵感，不如从绘画中汲取创意。

例如，在大学里我被告知，在开始编程之前应该先在纸上把程序搞清楚。但我从未这样做过。我喜欢直接坐在电脑前编程，而不是在纸上规划。更糟糕的是，我不是耐心地一步步构建整个程序以确保大体正确，而是一股脑地堆砌代码，然后再逐步修改。书上说调试是最后一步，用于纠正打字错误和疏忽。但我的工作方法看起来更像是编程本身就是在调试。

很长一段时间内我都为此感到沮丧，就像小学时老师教我怎么握笔写字，而我总是学不会那样。如果当时我能看看其他创作领域，如绘画或建筑，我就会发现我的方法其实有一个正式名称：草稿。我现在认为，大学里教给我们的编程方法都是错的。你应该在编写代码的同时思考整个程序，而不是在编写代码之前就想好一切，这与作家、画家和建筑师的做法完全相同。

认识到这一点对软件设计有着深远的影响。这意味着，编程语言最重要的特性应该是可塑性。编程语言是用来帮助思考程序的工具，而不是用来表达你已经想好的程序。它应该像铅笔一样灵活，而不是像钢笔那样固定不变。如果大家都按照学校教授的方法编程，那么静态类型是一个不错的选择。但是，据我所知，没有一个黑客喜欢使用静态类型语言编程。我们需要一种可以随意涂抹、擦改的语言，而不希望正襟危坐，小心翼翼地与一丝不苟的编译器对话，生怕变量类型匹配不当。

认识到自己是一名创作者而非科学家有许多好处。除了不必为静态类型烦恼外，还可以避免另一个困扰科学家的问题——即“对数学家的嫉妒”。科学界的每个人暗地里都认为数学家比自己聪明。最终结果是科学家们往往会试图让自己的工作看起来更像数学。对于物理学等学科来说，这可能影响不大。但在自然科学领域，这成为一个严重的问题。

一页写满数学公式的纸张确实令人印象深刻。（小贴士：使用希腊字母表示变量名会更加令人印象深刻。）因此，你会受到巨大的诱惑去解决那些可以用数学公式处理的问题，而不是去解决真正重要的问题。

如果黑客认识到自己与其他创作者——如作家和画家——属于同一类人，这种诱惑就不会对他们产生太大影响。作家和画家没有“对数学家的嫉妒”，因为他们认为自己从事的是与数学完全不同的事情。我认为，黑客也应该如此。

如果大学和实验室不允许黑客做他们想做的事情，那么企业可能是更适合黑客的地方。不幸的是，大多数企业也不允许黑客自由发挥。大学和实验室迫使黑客成为科学家，而企业则强迫他们成为工程师。

直到最近我才意识到这一点。当雅虎收购Viaweb时，他们问我接下来想做什么。我对商业活动一直兴趣不大，便回答说我想继续做黑客。但当我加入雅虎后才发现，在他们看来，“黑客”的职责只是用软件实现某个功能，而不是设计软件。在那里，程序员被视为技术人员，负责将产品经理的想法转化为代码。

这似乎是大型企业的普遍做法。这样安排的原因是为了降低结果的不确定性。由于只有少数黑客懂得如何正确设计软件，公司管理层难以识别到底应该将设计任务交给谁。因此，大多数公司不将设计软件的任务交给一位优秀的黑客，而是交给一个委员会，黑客的作用仅仅是实现那个委员会的设计。

如果你想在未来赚大钱，请记住这一点，因为这是创业公司能够成功的原因之一。大型企业为了避免设计灾难，选择降低设计结果的不确定性。但当你排除差异时，不仅排除了失败的可能性，也排除了获得高利润的可能性。这对大公司来说不是问题，因为生产出特别优秀的产品并不是他们的制胜之道。大公司只需做到不太差就能赢得市场。

因此，如果你的竞争优势在于软件设计，并且你的对手是一家大型企业，那么你就有可能永远领先于对手。不过说实话，这样的机会并不多见。单靠软件设计与大公司竞争非常困难。这就好比试图攻入一座城堡与对手面对面搏斗。即使你能写出比微软Word更好的文字处理软件，但由于微软的操作系统具有垄断地位，你根本无法对其构成威胁，甚至都不会引起他们的注意。

真正能够在软件设计方面展开竞争的是新兴市场的领域，这里还没有人建立起防御工事。只要你能大胆创新，同时负责设计和实现产品，就有机会在这里战胜大公司。微软、苹果和惠普等公司在早期就是这样取得成功的。我觉得几乎所有成功的创业公司都是这样做的。

因此，开发优秀软件的一种方法就是自己创业。但这也会遇到两个问题。一是创办公司后，必须处理许多与软件开发无关的事情。当我创立Viaweb时，如果能有四分之一的时间用于开发就已经感到很幸运了。剩下的四分之三时间里，我做的事情从单调乏味到惊心动魄都有。有一次董事会开到一半，我不得不离开去补牙。我记得坐在牙医诊所等待治疗的时候，感觉像是在度假一样轻松愉快。

创业的另一个问题是赚钱的软件往往不是有趣的软件，两者的重叠度不高。设计编程语言是一项很有意思的工作，事实上，微软的第一个产品就是一种编程语言。但现在很少有人愿意花钱购买编程语言。如果你想赚钱，可能不得不去做一些既繁琐又讨厌的事情，因为这些事情没有人愿意义务来做。