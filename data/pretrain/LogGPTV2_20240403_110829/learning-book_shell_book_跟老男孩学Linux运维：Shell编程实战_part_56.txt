口在Shell中使用“&”可以产生子Shell。
2.使用“管道”功能
下面通过脚本再来实现一个由“管道”产生的子Shell，这个脚本中的绝大部分都
---
## Page 398
38跟老男孩学Linux运维：Shell编程实战
和上一个脚本一样，因此，只对差异的部分做注释：
[root8oldboy scripts]# cat 20_1_2.sh
#1/bin/bash
+Author:oldboy training
B1og:http://o1dboy.blog.51cto.com
parent_var=*Parent*
echo *Shell Start:ParentShel1 Level: SBASH_SUBSHELL*
echo **1\
#/tnp/passwd
[rootθoldboy scripts]#cat/tmp/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daenon:/abin:/8bin/no1ogin
adm:x:3:4:adm:/var/adm:/sbin/no1ogin
1p1x:4:7:1p1/var/spoo1/1pd:/sbin/no1ogin
shutdowm:x:6:0:shutdown:/sbin:/sbin/shutdowm
sync1x15:01sync:/sbin:/bin/sync
halt:x:7:0:ha1t:/sbin:/sbin/ha1t
mai1 :×: 8:12 :mai1 : /var/spoo1/ma11 :/sbin/no1ogin
uucp:x:10:14:uucp:/var/spoo1/uucp1/sbin/no1ogin
接下来执行过程的主体实现脚本，这其实就是一个有“坑”的脚本，而你可能会浑
然不觉：
[root@oldboy scripts] cat 20_1_5.sh
#1/bin/bash
#Author:oldboy training
B1og:http://o1dboy.b1og.51cto.com
1/bin/bash
function readPasswd()
---
## Page 402
384跟老男孩学Linux运维：Shell编程实战
local retval=0
<==定义返回值变量并将其初始化为0。
local count=0
<==定义count变量，用于数组下标。
cat /tmp/passwdlwhile read 1ine
f<.=
使用cat读取文件，管道用while环。
每次读取一行。
do
array[Scount]=*Sline#<将每次读出的行内容赋值（子Shel1 内）始数组，下标为count。
if[-z*s（array[Scount])·];then
retval=1 &&break<==则赋值（子Shel1 内）retval=1，且通出while环。
<==判断如果数组当前元素内容为空
fi
（（+unoo））
<=count自增1。
done
return Sretval
#<以retva1的值作为函数远因值返因。
function main(1(
readPassud
#<==调用readPaB8wd函数。
<=输出函数执行返图值。
echo *array[0] = $(array[0])*
<==输出/cmp/pa88wd第一行的内容，
即数组中第一个元素的内容。
main
<开始执行脚本的内容。
执行结果如下：
[root@oldboy scripts]#sh 20_1_5.sh
retval=0
<==返因值输出为0。
array[0]=
<==数组元素内容为空
可以看到，执行结果和预期结果不同，为什么得不到预期的结果呢？
查看/tmp/passwd文件的内容，发现其中一行为空，但readPasswd函数中对空行做
了特殊的判断和处理，即如果发现空行，则将retval的值赋为1，且退出while循环，所
以readPasswd的最终返回值应该为1，而实际打印输出的retval最终值却为0，且/tmp
passwd文件的第一行是非空行，因此，不可能是把空行赋给了第一个数组元素array[0]，
但实际结果是打印array[0]时却得到了空行。
那么问题到底出在哪里呢？回过头来再仔细研读一下脚本中的代码，细心的读者就
会发现while read line那一行开头使用了管道，前面说过，使用管道会产生子 Shell，子
Shell的特性之一就是在子Shell中定义的变量（数组也是变量）无法被父Shell引用，即
不能被readPasswd这个函数所引用，面 array[0]-xxxx和retval-1的赋值均是在子 Shell
中完成的，所以当while循环执行完毕退回到函数主体时，retval=1的赋值随即失效，
函数主体继续保持retval=0的原始赋值。而array数组仅在子Shell中定义、赋值过，所
以当退回到函数主体这个父Shell时，array数组被父Shell认为从未定义过，因此打印
输出为空。
---
## Page 403
第20章子 Shel及Shell嵌套模式知识应用385
20.2.2解决while循环遭遇的“坑”
下面换一种方法，不使用管道来实现和上述脚本同样的功能，脚本代码如下：
[root@oldboy scripts]#cat 20_1_6.sh
#1/bin/bash
Author:oldboy training
#B1og:http://o1dboy.blog.51cto.com
#!/bin/bash
function readPasswd()
local retval=0
local count=0
while read 1ine
<=用while环读取文件，弃用管道。
op
array[$count]-*sline*
if [-z*S（array[Scount])*]then
retval=1 && break
Ei
(（count++))
done</tnp/passud
<==使用输入重定向的方法读入文件。
function main()(
readPasswd
=.o
echo*array[0]=${array[0]]*
main
提示：有关while循环按行读文件的多种方式，请参考本书的10.5节。
执行结果如下：
[root@oldboy scripts]sh 20_1_6.sh
<返因值输出为1
retval =1
array(0]=root:x:0:0:root:/root:/bin/bash
<==输出了数组中的第一个元素
以及文件的第一行。
这次改用了输人重定向的方法将/tmp/passwd的内容输入给read，实现对数据
源的获取，面这一次的脚本执行结果与上一次截然不同，retval输出的值为1，打印
一致。
---
## Page 404
3B跟老男孩学 Linux运堆： Shel 编程实战
20.3Shel调用脚本的模式说明
随着Shell脚本的广泛应用，它所使用的场合也变得多种多样，并且编写脚本的代
码量也有所增加，有可能一个脚本的代码量可能会达到上百行甚至更多，且多种功能会
被整合在一个脚本中，但是企业里的系统架构往往非常庞大，系统应用程序种类繁多，
如果用一个复杂的大脚本控制多个程序，显然效果不太理想，也不符合程序架构解耦的
发展趋势。因此，对于每个不同的程序，编写不同的脚本进行控制管理就是运维人员常
用的方式了，即通过一个主脚本（父脚本）对所有其他功能性的脚本进行统一调用，这
就产生了嵌套脚本（子Shell脚本的一种）的概念。
在主脚本中嵌套脚本的方式有很多，常见的为fork、cxcc、source三种模式，这三
种调用脚本的方式还是有一定的区别，本节将通过下面的说明让读者更清晰地明白这三
种调用脚本模式的不同。
20.3.1fork模式调用脚本知识
fork模式是最普通的脚本调用方式，即直接在父脚本里面用“/bin/sh/directory/
script.sh”来调用脚本，或者在命令行中给script.sh脚本文件设置执行权限，然后使用/
directory/script.sh来调用脚本。
使用上述方式调用脚本的时候，和20.1.2节中的第4点说明一致。系统会开启一个
SubShell（子 Shell）执行调用的脚本，SubShell 执行的时候ParentShell还在，SubShell
执行完毕后返回到ParentShell。最后的
结论是SubShell可以从ParentShell继承
Pare
ntShell
环境变量，但是默认情况下SubShell中
的环境变量不能带回ParentShell。
就好比图20-2，在当前Shell中直接
S
Shell
执行某个脚本后，脚本会进人到此Shell
的子Shell中，完成脚本执行过程，当前
的 Shell称为父 Shell，在子 Shell 中可以
调用自身的环境变量信息，并且也可以调
用父Shell的环境变量信息，但子 Shell 的
环境变量信息不能被父Shell使用。
图 20-2ParentShell 与 SubShell 变量继承关系图
执行方式说明：