l sT
ikRC, where sT
ik is the transpose of sik.
3. Output invalid if z ≥ τ , where τ is a pre-determined
threshold; otherwise, output valid.
Revoke(grti, RC): The inputs to this algorithm are the re-
vocation token of the signer, grti, and the current revo-
cation code, RC. To revoke signer i, the group manager
updates the revocation code using the following steps.
1. Map each xik ∈ grti to the corresponding alias code
sik, i.e., compute sik = Fc(xik) for k = 1, 2 · · · m.
2. Compute the code, ¯si, by adding all the unique alias
codes corresponding to the revoked alias tokens such
that ¯si = Pm
k=1 sik.
3. Update the revocation code as RC = RC + ¯si.
Open(reg, σ, M ): With the valid signature σ on message
M , the actual signer of the signature is identiﬁed using the
following step.
1. Search the registration list reg to ﬁnd signer i that
has generated signature σ with the alias token xik.
2. If a match is successfully found, output i; otherwise,
output 0 to indicate a failure.
13385. SECURITY ANALYSIS
5.1 Signature and Identity Correctness
It can be shown that GSPR satisﬁes the signature correct-
ness and the identity correctness properties. Security proofs
for these properties can be constructed using the frameworks
discussed in [6]. We omit the proofs for the sake of brevity
of the paper.
5.2 Anonymity
Theorem 1. In the random oracle model, suppose an al-
gorithm A breaks the anonymity of GSPR with advantage
ǫ after qH hash queries and qS signing queries, then there
exists an algorithm B that breaks the DLIN assumption with
the advantage (1/n2 − qSqH /p)ǫ/2.
This theorem prescribes that GSPR satisﬁes the anonymity
property in the random oracle model when the DLIN as-
sumption is presumed. In [6], the core technique used in the
proof of anonymity is the randomness of (ˆu, ˆv) such that the
challenger can backpatch the hash oracle. GSPR also pre-
serves the randomness of (ˆu, ˆv). Hence, we can employ the
same technique, and the proof construction method used in
[6] to prove Theorem 1. However, here we omit the proof
due to space constraints.
Note that within a time interval, the signer uses the same
alias token to generate all the signatures, and hence those
signatures can be linked to the same signer. However, the
signer utilizes diﬀerent alias tokens in diﬀerent time inter-
vals, and thus non-linkability is preserved between diﬀerent
time intervals. For many applications, the duration of each
time interval is small (e.g., 1 minute in vehicular networks
[20]), resulting in only a few linkable signatures.
In GSPR, all of the previous signatures generated using
a revoked private key can be linked together using the im-
plicit tracing algorithm. The scheme proposed in [6] as well
as most other VLR schemes share this drawback. This draw-
back can be mitigated in a number of ways, including the
use of time-stamped parameters [16] or the use of accumula-
tors [21]. However, these methods incur additional overhead
that may be unacceptable in many applications.
5.3 Traceability
We consider traceability property of GSPR in Theorem 2,
and utilize Lemma 1 to prove it.
2
Lemma 1. Suppose an algorithm A which is given an in-
2 , · · · , ˜gγm
) and n tuples ( ˜Ai, xi1, xi2, · · · xim),
stance (˜g1, ˜g2, ˜gγ
∀i ∈ [1, n], where xik ∈ Z∗
p ∀i ∈ [1, n], k ∈ [1, m], ˜g2 ∈ G2,
˜g1 = ψ(˜g2) and ˜Ai = ˜g1/ Qm
k=1(γ+xik)
, forges a tuple ( ˜A∗, ˜B∗,
˜C∗, x∗) for some ˜A∗ ∈ G1, ˜B∗ ∈ G2, ˜C∗ ∈ G2 and x∗ 6= xik
∀i ∈ [1, n], k ∈ [1, m] such that e( ˜A∗, ˜B∗) = e(˜g1, ˜g2) and
e(˜g1, ˜B∗) = e(˜gγ
1 , ˜C∗), then there exists an algorithm B
solving q-BSDH problem, where q = (n + 1)m.
1 ˜gx∗
1
Proof. Algorithm B is given a q-BSDH instance repre-
sented by (g1, w0, w1, · · · , wq), where wj = gγj
2 , ∀j ∈ [0, q].
B sets q = (n + 1)m. The objective of B is to produce a
BSDH pair (e(g1, g2)1/(γ+d), d) for some d ∈ Z∗
p. For this, B
creates the following framework to interact with A.
Setup: B does the following.
R
1. Select nm values: xik
←− Z∗
p, ∀i ∈ [1, n], k ∈ [1, m].
2. Deﬁne πi = Qm
k=1(γ + xik), and f (γ) = Qn
Pnm
j=0 αjγj, where α0, α1, · · · , αnm ∈ Z∗
ﬁcients of the polynomial f with variable γ.
i=1 πi =
p are the coef-
αj
j=0 w
j
αj
j=0 w
2 = Qnm
3. Compute ˜g2 = gf (γ)
2 = Qnm
4. Compute ˜wk = ˜gγk
5. Deﬁne fi(γ) = f (γ)/πi = Qn
where a0, a1, · · · , anm−m ∈ Z∗
the polynomial fi.
= gfi(γ)
6. Calculate ˜Di = ˜g1/πi
2
, and ˜g1 = ψ( ˜g2).
j+k, ∀k ∈ [0, m].
j=1,j6=i πj = Pnm−m
ajγj,
p are the coeﬃcients of
j=0
2
= Qnm−m
j=0 w
aj
j , and
˜Ai = ψ( ˜Di).
7. Send ( ˜Ai, xi1, xi2, · · · , xim), ∀i ∈ [1, n], and (˜g1, ˜w0, ˜w1,
· · · , ˜wm) to A.
1
Note that with this information, A or B can compute nm
tuples ( ˜Ai, ˜Bi, ˜Cik, xik) such that e( ˜Ai, ˜Bi) = e(˜g1, ˜g2) and
e(˜g1, ˜Bi) = e(˜gγ
1 ˜gxik
1. Deﬁne πi = Qm
k=0 bkγk, where b0, b1,
p are the coeﬃcients of the polynomial de-
, ˜Cik) in the following manner.
k=1(γ + xik) = Pm
2 = Qm
2. Compute ˜Bi = ˜gπi
3. Deﬁne fik(γ) = πi/(γ + xik) = Qm
Pm−1
j=0 cjγj, where c0, c1, · · · cm−1 ∈ Z∗
j=1,j6=k(γ + xij) =
p are the coeﬃ-
· · · bm ∈ Z∗
ﬁned by πi.
k=0 ˜wbk
k .
cients of the polynomial fik.
4. Compute ˜Cik = ˜gfik(γ)
Also, A or B can compute nm BSDH pairs ( ˜Eik, xik) in
j=0 ˜w
2
cj
j .
= Qm−1
the following manner.
˜Eik = e( ˜Ai, ˜Cik) = e(˜g1, ˜g2)1/(γ+xik).
Output: A outputs a forged tuple ( ˜A∗, ˜B∗, ˜C∗, x∗), for some
˜A∗ ∈ G1, ˜B∗ ∈ G2, ˜C∗ ∈ G2 and x∗ 6= xik, ∀i ∈ [1, n], k ∈
[1, m], such that e( ˜A∗, ˜B∗) = e(˜g1, ˜g2) and e(˜g1, ˜B∗) =
e(˜gγ
1 ˜gx∗
Having received the forged tuple from A, B generates a
1. Deﬁne
new BSDH pair in the following manner.
1 , ˜C∗).
E′ = e(A∗, C∗) = e(˜g1, ˜g2)1/(γ+x∗) = e(˜g1, g2)f (γ)/(γ+x∗).
polynomial fd(γ) = Pnm−1
2. Rewrite f (γ) as f (γ) = (γ + x∗)fd(γ) + d∗ for some
djγj, and constant d∗ ∈
j=0
Z∗
p. This means that
E′ = e(˜g1, g2)fd(γ)+d∗/(γ+x∗).
3. Compute gfd(γ)
2
dj
j , and
j=0 w
= Qnm−1
)(cid:17)1/d∗
2
= e(˜g1, g2)1/(γ+x∗)
˜E = (cid:16)E′/e(˜g1, gfd(γ)
= e(g1, g2)f (γ)/(γ+x∗) = e(g1, g2)fd(γ)+d∗/(γ+x∗).
E∗ = (cid:16) ˜E/e(g1, gfd(γ)
= e(g1, g2)1/(γ+x∗).
)(cid:17)1/d∗
2
4. Calculate
Hence, B returns the tuple (E∗, x∗) as the solution to the
submitted instance of the BSDH problem.
Theorem 2. In the random oracle model, suppose an al-
gorithm A breaks the traceability of GSPR with advantage ǫ,
after qH hash queries and qS signature queries, then there
exists an algorithm B that breaks the q-BSDH assumption
with advantage (ǫ/n − 1/p)2/16qH , where q = (n + 1)m.
Proof. The following is an interaction between A and B.
1339Setup: B is given a bilinear group pair (G1, G2) with respec-
tive generators g1 and g2. B is also given (w0, w1, · · · wm),
where wk = gγk
2 , ∀k ∈ [0, m]. Further, B is given (Ai, yi),
∀i ∈ [1, n]. For each i, either si = 1 indicating that a valid
key pair (Ai, yi) generated using equations (1) and (2) is
known, or si = 0 indicating that Ai corresponding to yi is
not known. We run A giving it gpk = (g1, w0, w1, · · · wm)
and yi, ∀i ∈ [1, n]. Note that yi can be used to generate the
alias tokens using equation (1).
Queries: A can query B about the following.
• Hash queries: A queries the hash functions Hz and Hg,
and B responds with random values with consistency.
• Signing queries: A requests a signature of member i on
message M . If si = 1, B responds with the signature
σ using Sign algorithm with the private key (Ai, yi). If
si = 0, B selects xik, α, β, δ to compute T1, T2, T3 and
T4 and the SPK V as in equation (5). If the hash func-
tion causes a collision, B declares failure and aborts;
otherwise, B responds with σ = (xik, T1, T2, T3, T4, c,
sα, sβ, sδ). We assume that the signing queries related
to a signer does not exceed m.
• Corruption queries: A requests the secret key of mem-
If si = 1, B adds i to U , and responds with
ber i.
(Ai, yi); otherwise, B declares failure and aborts. With
(Ai, yi), A can compute alias tokens xik, ∀k ∈ [1, m]
using equation (1), Bi using equation (3), and Cik,
∀k ∈ [1, m] using equation (4).
Output: Finally, if A is successful, it outputs a forged sig-
nature σ∗ on a message M ∗ using tuple (Ai′ , Bi′ , Ci′k, xi′k).
If B fails to ﬁnd the signer i′ in U , it outputs σ∗; otherwise,
B identiﬁes some i′ = i. If si′ = 0, B outputs σ∗; otherwise,
B declares failure and aborts.
With the above framework, there can be two types of
forger algorithms [6]. Type I forger forges a signature of
the member who is diﬀerent from all i ∈ [1, n]. Type II
forger forges a signature of the member i ∈ [1, n] whose cor-
ruption is not requested. B treats these two types of forg-
ers diﬀerently. Note that using the technique of Lemma 1,
with a q-BSDH instance (ˆg1, ˆg2, ˆgγ
2 ), B can obtain
(g1, g2, gγk
), and (q − m) BSDH pairs. Moreover,
any BSDH pair besides these (q − m) pairs can be trans-
formed into a solution to the original q-BSDH instance which
means that the q-BSDH assumption is broken.
2 , · · · , gγm
2 , · · · ˆgγq
2
2 , · · · , gγm
2
Type I Forger : From an instance of (n+1)m-BSDH, B ob-
tains (g1, g2, gγk
), and n tuples (Ai, xi1, xi2, · · · xim).
From these n tuples, B obtains n valid key pairs (Ai, yi) by
setting Hz(yi, k) = xik, ∀i ∈ [1, n], k ∈ [1, m]. B applies the
above framework to A. The framework succeeds whenever
A succeeds. Hence, B obtains the Type I forgery with the
probability ǫ.
Type II Forger : From an instance of nm-BSDH, B obtains
(g1, g2, gγk
), and n− 1 tuples (Ai, xi1, xi2, · · · xim).
From these n − 1 tuples, B obtains n − 1 valid key pairs
(Ai, yi) by setting Hz(yi, k) = xik ∀i ∈ [1, n − 1], k ∈ [1, m].
These n − 1 pairs (Ai, yi) are distributed among n indices.
B sets si′ = 0 for the unﬁlled entry at random index i′. B
selects Ai′
p. B applies the framework
to A. The framework succeeds only if A never requests the
corruption of member i′, but forges a signature that traces
to Ai′ . The value of i′ is independent of the views of A,
←− G1, and yi
2 , · · · , gγm
←− Z∗
2
R
R
and hence B obtains the Type II forgery with probability at
least ǫ/n.
B obtains another BSDH pair beyond the given nm BSDH
pairs using the framework with Type I or Type II forger in
the following manner, contradicting the BSDH assumption.
B rewinds the framework to obtain two forged signatures on
the same message, where the commitments are the same,
but the challenges and responses are diﬀerent. The proba-
bility of success in achieving this is at least (ǫ′ − 1/p)2/16qH
by the forking lemma [6, 18], where ǫ′ is the probability
that the framework on each forger succeeds. B extracts
(A∗, B∗, C∗, x∗) encoded in the forged signatures [6]. Fur-
ther, B obtains a BSDH pair from (A∗, B∗, C∗, x∗) using the
technique discussed in Lemma 1. The framework is success-
ful only if the extracted BSDH pair is not among the BSDH
pairs created by B. Therefore, B obtains a new BSDH pair
with the probability (ǫ′ − 1/p)2/16qH .
Hence, we have shown that B can solve the (n+1)m-BSDH
instance with probability (ǫ−1/p)2/16qH using Type I forger,
and the nm-BSDH instance with probability (ǫ/n−1/p)2/16qH
using Type II forger. Therefore, the pessimistic Type II
forger proves the theorem. This implies that traceability
is satisﬁed in GSPR in the random oracle model under the
BSDH assumption.
5.4 Revocation Correctness
In the following discussion, we analyze the correctness
of the results generated by the revocation check algorithm,
RevCheck. The revocation correctness depends on the cross
correlation property of the alias codes since the revocation
code is generated by summing over multiple alias codes.
Here, we discuss two categories of codes from the existing
literature which can be potentially used as alias codes—
orthogonal codes and non-return-to-zero (NRZ) based ran-
dom codes. Through analytical results, we show that or-
thogonal codes and random codes are both inadequate for
use in GSPR. Hence, we propose a new type of codes which
we refer to as piecewise-orthogonal codes which can be used
as alias codes. With the use of piecewise-orthogonal codes,