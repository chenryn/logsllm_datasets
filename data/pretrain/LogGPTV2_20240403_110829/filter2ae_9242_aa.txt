原文链接：https://www.brokenbrowser.com/abusing-of-protocols/
原作者： **Manuel Caballero**
译： **Holic (知道创宇404安全实验室)**
在 10 月 25 日，研究员 [@MSEdgeDev](https://twitter.com/MSEdgeDev) twitter
了一个[链接](https://twitter.com/MSEdgeDev/status/790980669820145665)，成功引起了我的注意，因为我点击那个链接的时候（在
Chrome 上），Windows 应用商店会自动打开。这对你来说也许不足为奇，但它足以让我感到惊讶。
在我的印象中，Chrome 有这样一个健康的习惯，在打开外部程序之前询问用户是否打开外部程序。但是这次的情况是它直接打开了相应程序，而且没有弹出警告。
这次的差别情况反应引起了我的注意，因为我从来没有允许 Chrome 打开 Windows 商店。有一些插件和协议会自动打开，但我从来没有允许过
Windows 商店这一应用。
Twitter 的短链接重定向至 https://aka.ms/extensions-storecollection ，然后再一次重定向到：`ms-windows-store://collection/?CollectionId=edgeExtensions` ，Interesting ~.
关于这一协议我不甚了解，因此我马上试着找到与该协议存在多处关联的地方：注册表。搜索 “ms-windows-store” 立即返回了我们在
PackageId 中的字符串，这似乎是 Windows 应用商店的程序。
注意我们也在一个名为 “Windows.Protocol”
的键之中，我稍微上下滚动了一些，以便看看有没有其他的应用程序在其中。然后我发现他们很多拥有自己的注册协议。这便是极好的，因为这直接从浏览器打开了一个新的攻击面。然后我们按
F3 看看是否找到了其他的匹配项。
似乎 ms-windows-store：协议也接受搜索参数，所以我们可以试着直接从 Google Chrome 打开我们的自定义搜索。事实上，Windows
应用商店应用程序好像使用了 Edge 的引擎渲染 HTML，这也是很有趣的地方，因为我们可能尝试进行 XSS
攻击，亦或是针对本地程序，发送一大堆数据然后看看会发生什么。
但是现在我们不会这么干，我们回到注册表上来，按下 F3 看看能找到什么。
这也是很有意思的，因为如果它们用字符串 “URL:”前缀的话，它会给我们快速找到更多的协议的线索。让我们将搜索重置为 “URL:”，看看我们得到什么。按下
[HOME] 键回到注册表的顶部，搜索 “URL:” ，将马上返回第一个匹配的 “URL： **about:blank**
”，以及各位顺便确认下我们有没有疯掉。
再次按下 F3 ，我们找到了 `bingnews:` 协议，但是这次 Chrome 向我们确认了是否要打开它。没毛病，让我们在 Edge
上试试看会发生什么。它打开了！在注册表中下一个匹配的的是 `calculator:` 协议。这会生效吗？
Wow！exploit 的作者们肯定好气啊。它们将弹出什么程序呢？[calc](calculator:) 和
[notepad](https://www.cracking.com.ar/demos/edgedefaultapp/)
可以打开，而且没有产生内存损坏。现在 cmd.exe 已经弃用，而是采用了 powershell。微软毁了你们这群人的乐趣 ? 。
这便是枚举所有可能被加载的协议的时候了，先去看看哪些程序接受参数，那么我们可以尝试注入代码（二进制或者纯
Javascript，取决于应用程序的编码方式和他如何处理参数）。有很多有趣的玩法，如果我们继续寻找协议，我们将发现大量的能打开的程序（包括 Candy
Crush，我还不知道我电脑上有这东西）。
通过按这几次 F3 ，我受益匪浅。例如，有一个 `microsoft-edge:`协议在新标签中加载 URL。这看起来似乎并不重要，直到我们想起 HTML
页面应有的限制。弹出窗口拦截器会阻止我们打开 20 个 `microsoft-edge:http://www.google.com` 标签吗？
#### [ [PoC – 在微软 Edge
浏览器上弹窗](http://unsafe.cracking.com.ar/demos/edgeprotocols/popups.html) ]
那么 HTML5 沙箱又怎样呢？如果你不熟悉它，它只是一种使用 iframe 沙箱属性或者 http header
的沙箱属性对网页施加限制的方法。例如，如果我们想在 iframe 中渲染内容并且确保它不运行 javascript
（甚至不打开新标签），我们只需要使用此标签：
然后渲染的页面将被完全限制。它基本上只能渲染 HTML/CSS ，但是没有 javascript 或者其他访问接触到像 cookie
这样的东西。事实上，如果我们使用沙盒粒度，并且至少允许打开新窗口/标签，他们应该全都继承沙箱属性，以及从 iframe
点击链接打开的依然受沙盒限制。然而，使用 microsoft-edge 协议完全绕过了这一点。
#### [ [PoC – 在 微软 Edge 浏览器上绕过 HTML5
沙箱](http://unsafe.cracking.com.ar/demos/sandboxedge/) ]
很高兴看到 `microsoft-edge` 协议允许我们绕过不同的限制。我更深入研究，但你可以一试！这是一次发现之旅，纪念这一条 tweet
激发了我研究的动力，而且最终给我们真正值得进行更多研究的材料。
我继续在注册表中按下 F3 键，发现了 `read:` 协议，它引起了我的注意力，因为当阅读它的 （javascript）源码时，它可能有潜在的 UXSS
漏洞，但是尝试的过程中 Edge 一次次地崩溃了。它崩溃太多次了。例如，将 iframe 的 location 设置为 “read:”
就足以使浏览器崩溃，包括所有选项卡。想看看吗？
#### [ [PoC – Crash on MS
Edge](http://unsafe.cracking.com.ar/demos/edgeprotocols/readiframecrash.html)
]
OK，我很好奇发生了什么，所以我附加了几个字节到 read 协议，并启动了 WinDbg 看看崩溃是不是和无效数据有关。这些东西迅速且简单，没有
fuzzing 或任何特殊的东西：`read:xncbmx,qwieiwqeiu;asjdiw!@#$%^&*`。
Oh yes，我真的打出来了这些东西。我发现的不会使 read 协议崩溃的唯一方法就是加载来自 http[s]的东西。其他的方法都会使浏览器崩溃。
那么让我们将 WinDbg 附加至 Edge 浏览器吧。有一个快速的脏方法，我使用它来简单地杀死 Edge 进程和子进程，重新打开它并附加到使用
EdgeHtml.dll 的最新进程。当然还有更简单的方法，但是...yeah，我就是这么做的。打开命令行，然后...
    taskkill /f /t /im MicrosoftEdge.exe
    ** Open Edge and load the webpage but make sure it doesn't crash yet **
    tasklist /m EdgeHtml.dll
够了。现在加载 WinDbg ，并将其附加到使用 EdgeHtml 的，最新列出的 Edge 进程。记得在 WinDbg 中使用调试符号。
一旦附加上去，只需要按 F5 或者在 WinDbg 中按 g [回车]，使 Edge
保持运行。这是我屏幕现在看起来的样子。左边有我用来测试一切的页面，在右边， WinDbg 附加到特定的 Edge 进程。
我们将使用 `window.open` 伴以 `read:` 协议继续玩耍，而不是一个 iframe ，因为它使用起来更舒服。仔细想想，有的协议/url
可能会最终改变顶部 location，无论它们如何使用框架。
如果我们开始在 iframe
中使用协议，我们自己的页面（顶部）将有可能被卸载，失去我们刚刚键入的代码。我特定的测试页面保存了我键入的内容，如果浏览器崩溃，它很可能被恢复。但即使一切都保存下来了，当我编写一些可以改变我测试页面的
URL 的代码时，我就在一个新窗口中打开它。这只是一种习惯罢了。
在左侧屏幕上，我们可以快速键入并执行 JavaScript 代码，右侧有 WinDbg 准备向我们解释在崩溃的背后到底发生了什么。我们继续，运行
JavaScript 代码以及... Bang! WinDbg 中断了连接。
    ModLoad: ce960000 ce996000 C:\Windows\SYSTEM32\XmlLite.dll
    ModLoad: c4110000 c4161000 C:\Windows\System32\OneCoreCommonProxyStub.dll
    ModLoad: d6a20000 d6ab8000 C:\Windows\SYSTEM32\sxs.dll
    (2c90.33f0): Security check failure or stack buffer overrun - code c0000409 (!!! second chance !!!)
    EdgeContent!wil::details::ReportFailure+0x120:
    84347de0 cd29 int 29h
OK，看来 Edge 知道出了问题，因为它位于一个叫做 “ReportFailure” 的函数中，对吧？得了，我知道我们可以马上假设，如果 Edge
在此崩溃，不至于有失“优雅”。所以我们检查 stack trace 来看看我们调用自何方。在 WinDbg 中输入 “k” 。
    0:030> k
    # Child-SP RetAddr Call Site
    00 af248b30 88087f80 EdgeContent!wil::details::ReportFailure+0x120
    01 af24a070 880659a5 EdgeContent!wil::details::ReportFailure_Hr+0x44
    02 af24a0d0 8810695c EdgeContent!wil::details::in1diag3::FailFast_Hr+0x29
    03 af24a120 88101bcb EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x7c
    04 af24a170 880da669 EdgeContent!CReadingModeViewer::Load+0x6b
    05 af24a1b0 880da5ab EdgeContent!CBrowserTab::_ReadingModeViewerLoadViaPersistMoniker+0x85
    06 af24a200 880da882 EdgeContent!CBrowserTab::_ReadingModeViewerLoad+0x3f
    07 af24a240 880da278 EdgeContent!CBrowserTab::_ShowReadingModeViewer+0xb2
    08 af24a280 88079a9e EdgeContent!CBrowserTab::_EnterReadingMode+0x224