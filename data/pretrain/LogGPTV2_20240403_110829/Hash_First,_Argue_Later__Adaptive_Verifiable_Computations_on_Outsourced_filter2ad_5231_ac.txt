### Optimized Text

#### 1. Definitions and Initial Setup
- **Public Parameters (pp):** 
  \[ pp = (k, EK_{pp}, VK_{pp}) \]
- **Hash Function:**
  \[ \text{HashE}(pp, x) \] computes \(\sigma_x \leftarrow \text{hash}_k(x)\) and \(\Pi \leftarrow \text{VC.Prove}(EK_{pp}, \sigma_x ; x)\). It returns \(\sigma = (\sigma_x, \Pi)\).
- **Verification:**
  \[ \text{Check}(pp, \sigma) \] parses \(\sigma\) as \((\sigma_x, \Pi)\) and returns \(\text{VC.Verify}(VK_{pp}, \sigma_x, v, \Pi)\).

#### 2. Theorem 3.3
- **Statement:**
  If the Verifiable Computation (VC) scheme is knowledge-sound, then the Hash & Prove (HPE) scheme is hash extractable (Definition 3.2).
- **Proof:**
  The proof of Theorem 3.3 follows from the existence of the VC extractor. By using a separate VC scheme on a new relation \(R_k\), rather than reusing a VC scheme on one of the relations \(R'\), we can use knowledge soundness in a completely standard manner, taking only the key \(k\) as 'benign' auxiliary input.

#### 3. Discussion
- **HPinn Construction:**
  The HPinn construction is simple and can be extended to Merkle trees [16] to provide logarithmic random access in data structures.
- **Practical Drawback:**
  The main practical drawback is that the relation to be verified now includes a hash computation, which adds tens of thousands of cryptographic operations to the prover's workload for each block of input when using standard algorithms such as SHA2 (Section 6).
- **Optimization:**
  To lower this considerable cost for the prover, one pragmatically chooses custom, algebraic hash functions, which in turn increases the cost for the verifier that computes the digest. In the following sections, we present constructions that are efficient for both the prover and the verifier.

#### 4. Hash & Prove Constructions
- **Overview:**
  In this section, we present our main technical contribution: two efficient multi-relation hash & prove schemes for families of relations \(R_\lambda\). We let \(R(x, v; w)\) range over these relations.
- **Building Blocks:**
  Our two schemes are obtained via a generic hash & prove construction that relies on:
  1. Any SNARK scheme with offline/online verification algorithms (Section 2.1) where the offline verification consists of a multi-exponentiation in a group \(G_1\).
  2. Any HP scheme that allows proving the correctness of such multi-exponentiations.

#### 5. Generic Hash & Prove Scheme (HPgen)
- **Setup:**
  \[ \text{Setup}(1^\lambda) \] runs \(\text{XP.Setup}(1^\lambda)\) and returns its public parameters \(pp\).
- **Hash:**
  \[ \text{Hash}(pp, x) \] returns \(\sigma_x := \text{XP.Hash}(pp, x)\).
- **Key Generation:**
  \[ \text{KeyGen}(pp, R) \] takes a relation \(R\) and runs:
  - \(EK, VK \leftarrow \text{VC.KeyGen}(1^\lambda, R)\)
  - Let \(F := (F_1, F_2, \ldots, F_n)\) be the 'offline' elements in \(VK\)
  - \(EK_F, VK_F \leftarrow \text{XP.KeyGen}(pp, F)\)
  - Return \(EK_R := (EK, VK, EK_F)\), \(VK_R := (VK, VK_F)\)
- **Proving:**
  \[ \text{Prove}(EK_R, x, v; w) \] parses \(EK_R\) as \((EK, VK, EK_F)\) and runs:
  - \(c_x \leftarrow \text{VC.Offline}(VK, x)\)
  - \(\Pi \leftarrow \text{VC.Prove}(EK, (x, v); w)\)
  - \(\Phi_x \leftarrow \text{XP.Prove}(EK_F, x, c_x)\)
  - Return \(\Pi_R := (c_x, \Pi, \Phi_x)\)
- **Verification:**
  \[ \text{Verify}(VK_R, \sigma_x, v, \Pi_R) \] parses \(VK_R\) as \((VK, VK_F)\) and \(\Pi_R\) as \((c_x, \Pi, \Phi_x)\), and returns:
  \[ \text{VC.Online}(VK, c_x, v, \Pi) \land \text{XP.Verify}(VK_F, \sigma_x, c_x, \Phi_x) \]

#### 6. Security Theorem
- **Theorem 4.1:**
  If XP is adaptively sound in the publicly verifiable (resp. designated verifier) setting, and VC is sound, then the HPgen construction in Section 4.1 is adaptively sound in the publicly verifiable (resp. designated verifier) setting.
- **Proof:**
  The full proof appears in Appendix D.3. The idea is that any adversary breaking HPgen has to either break the security of the underlying VC scheme or cheat on the value of \(c_x\), thus breaking the security of XP. Our proof shows a reduction for each case.

#### 7. Corollary 4.1
- **Statement:**
  If XP is hash extractable, then the HPgen construction in Section 4.1 is also hash extractable.

#### 8. Publicly Verifiable HP Scheme for Multi-Exponentiation (XP1)
- **Setup:**
  \[ \text{Setup}(1^\lambda) \] samples \(H_i \leftarrow G_1\) for \(i \in [1, n]\) and returns \(pp = (G_\lambda, H)\) where \(H = (H_1, \ldots, H_n)\).
- **Hash:**
  \[ \text{Hash}(pp, (x_1, \ldots, x_n)) \] returns \(\sigma_x \leftarrow \prod_{i \in [1, n]} H_i^{x_i}\).
- **Key Generation:**
  \[ \text{KeyGen}(pp, F) \] samples \(u, v, w \leftarrow Z_p^*\), computes \(U \leftarrow g_2^u\), \(V \leftarrow g_2^v\), \(W \leftarrow g_2^w\), and returns \(EK_F = (F, T, R)\) and \(VK_F = (U, V, W)\) where \(R = (R_1, \ldots, R_n)\) and \(T = (T_1, \ldots, T_n)\).
- **Proving:**
  \[ \text{Prove}(EK_F, (x_1, \ldots, x_n), c_x) \] computes \(T_x \leftarrow \prod_{i \in [1, n]} T_i^{x_i}\) and \(R_x \leftarrow \prod_{i \in [1, n]} R_i^{x_i}\), and returns \(\Phi_x = (T_x, R_x)\).
- **Verification:**
  \[ \text{Verify}(VK_F, \sigma_x, c_x, \Phi_x) \] parses \(\Phi_x = (T_x, R_x)\) and returns:
  \[ e(T_x, g_2) \stackrel{?}{=} e(\sigma_x, U) \cdot e(R_x, V) \cdot e(c_x, W) \]

#### 9. Security Theorem for XP1
- **Theorem 4.2:**
  If the Strong External DDH Assumption holds, then the XP1 scheme is adaptively sound (Definition 3.1 for multiple relations).
- **Proof Outline:**
  The proof works by considering the case of a single relation. The extension to multiple relations is obtained by applying Theorem 3.1. The proof proceeds via a sequence of game hops, showing statistical indistinguishability and computational indistinguishability under the SXDH assumption.

#### 10. Designated Verifier HP Scheme for Multi-Exponentiation (XP2)
- **Setup:**
  \[ \text{Setup}(1^\lambda) \] samples \(H_i \leftarrow G_1\) for \(i \in [1, n]\) and returns \(pp = (G_\lambda, H)\) where \(H = (H_1, \ldots, H_n)\).
- **Hash:**
  \[ \text{Hash}(pp, (x_1, \ldots, x_n)) \] returns \(\sigma_x \leftarrow \prod_{i \in [1, n]} H_i^{x_i}\).
- **Key Generation:**
  \[ \text{KeyGen}(pp, F) \] generates \(\delta, k \leftarrow Z_p^*\), computes \(T_i \leftarrow F_i^k\) for \(i \in [1, n]\), and returns \(EK_F = (F, T)\), \(VK_F = (\delta, k)\) where \(T = (T_1, \ldots, T_n)\).
- **Proving:**
  \[ \text{Prove}(EK_F, (x_1, \ldots, x_n), c_x) \] computes \(\Phi_x \leftarrow \prod_{i \in [1, n]} T_i^{x_i}\) and returns \(\Phi_x\).
- **Verification:**
  \[ \text{Verify}(VK_F, \sigma_x, c_x, \Phi_x) \] returns \(\Phi_x \stackrel{?}{=} c_x\).

This optimized text aims to make the content more clear, coherent, and professional, while maintaining the technical accuracy and detail of the original text.