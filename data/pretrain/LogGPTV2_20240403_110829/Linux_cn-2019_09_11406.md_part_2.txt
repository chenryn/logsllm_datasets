6    0.68
7    0.75
8    0.53
9    0.01
Name: red, dtype: float64
```
处理数据表是经常使用 Pandas 解析数据的好方法。从数据帧中选择数据的方法有很多，你尝试的次数越多就越习惯。
### 可视化你的数据
很多人偏爱可视化信息已不是什么秘密，这是图表和图形成为与高层管理人员开会的主要内容的原因，也是“信息图”在新闻界如此流行的原因。数据科学家的工作之一是帮助其他人理解大量数据样本，并且有一些库可以帮助你完成这项任务。将 Pandas 与可视化库结合使用可以对数据进行可视化解释。一个流行的可视化开源库是 [Seaborn](https://seaborn.pydata.org/)，它基于开源的 [Matplotlib](https://matplotlib.org/)。
#### 安装 Seaborn 和 Matplotlib
你的 Python 虚拟环境还没有 Seaborn 和 Matplotlib，所以用 `pip3` 安装它们。安装 Seaborn 的时候，也会安装 Matplotlib 和很多其它的库。
```
(example) $ pip3 install seaborn
```
为了使 Matplotlib 显示图形，你还必须安装 [PyGObject](https://pygobject.readthedocs.io/en/latest/getting_started.html) 和 [Pycairo](https://pycairo.readthedocs.io/en/latest/)。这涉及到编译代码，只要你安装了必需的头文件和库，`pip3` 便可以为你执行此操作。你的 Python 虚拟环境不了解这些依赖库，因此你可以在环境内部或外部执行安装命令。
在 Fedora 和 CentOS 上：
```
(example) $ sudo dnf install -y gcc zlib-devel bzip2 bzip2-devel readline-devel \
sqlite sqlite-devel openssl-devel tk-devel git python3-cairo-devel \
cairo-gobject-devel gobject-introspection-devel
```
在 Ubuntu 和 Debian 上：
```
(example) $ sudo apt install -y libgirepository1.0-dev build-essential \
libbz2-dev libreadline-dev libssl-dev zlib1g-dev libsqlite3-dev wget \
curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libcairo2-dev
```
一旦它们安装好了，你可以安装 Matplotlib 需要的 GUI 组件。
```
(example) $ pip3 install PyGObject pycairo
```
### 用 Seaborn 和 Matplotlib 显示图形
在你最喜欢的文本编辑器新建一个叫 `vizualize.py` 的文件。要创建数据的线形图可视化，首先，你必须导入必要的 Python 模块 —— 先前代码示例中使用的 Pandas 模块：
```
#!/usr/bin/env python3
from pandas import read_csv, DataFrame
import pandas as pd
```
接下来，导入 Seaborn、Matplotlib 和 Matplotlib 的几个组件，以便你可以配置生成的图形：
```
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import rcParams
```
Matplotlib 可以将其输出导出为多种格式，包括 PDF、SVG 和桌面上的 GUI 窗口。对于此示例，将输出发送到桌面很有意义，因此必须将 Matplotlib 后端设置为 `GTK3Agg`。如果你不使用 Linux，则可能需要使用 `TkAgg` 后端。
设置完 GUI 窗口以后，设置窗口大小和 Seaborn 预设样式：
```
matplotlib.use('GTK3Agg')
rcParams['figure.figsize'] = 11,8
sns.set_style('darkgrid')
```
现在，你的显示已配置完毕，代码已经很熟悉了。使用 Pandas 导入 `sample.csv` 文件，并定义数据帧的列：
```
FILE = open('sample.csv','r')
DATAFRAME = pd.read_csv(FILE)
DATAFRAME.columns = [ 'red','green','blue' ]
```
有了适当格式的数据，你可以将其绘制在图形中。将每一列用作绘图的输入，然后使用 `plt.show()` 在 GUI 窗口中绘制图形。`plt.legend()` 参数将列标题与图形上的每一行关联（`loc` 参数将图例放置在图表之外而不是在图表上方）：
```
for i in DATAFRAME.columns:
    DATAFRAME[i].plot()
plt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=1)
plt.show()
```
运行代码以获得结果。
![第一个数据可视化](/data/attachment/album/201909/30/001927sbk9jbqi11s2y2kq.png "First data visualization")
你的图形可以准确显示 CSV 文件中包含的所有信息：值在 Y 轴上，索引号在 X 轴上，并且图形中的线也被标识出来了，以便你知道它们代表什么。然而，由于此代码正在跟踪颜色值（至少是假装），所以线条的颜色不仅不直观，而且违反直觉。如果你永远不需要分析颜色数据，则可能永远不会遇到此问题，但是你一定会遇到类似的问题。在可视化数据时，你必须考虑呈现数据的最佳方法，以防止观看者从你呈现的内容中推断出虚假信息。
为了解决此问题（并展示一些可用的自定义设置），以下代码为每条绘制的线分配了特定的颜色：
```
import matplotlib
from pandas import read_csv, DataFrame
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams
matplotlib.use('GTK3Agg')
rcParams['figure.figsize'] = 11,8
sns.set_style('whitegrid')
FILE = open('sample.csv','r')
DATAFRAME = pd.read_csv(FILE)
DATAFRAME.columns = [ 'red','green','blue' ]
plt.plot(DATAFRAME['red'],'r-')
plt.plot(DATAFRAME['green'],'g-')
plt.plot(DATAFRAME['blue'],'b-')
plt.plot(DATAFRAME['red'],'ro')
plt.plot(DATAFRAME['green'],'go')
plt.plot(DATAFRAME['blue'],'bo')
plt.show()
```
这使用特殊的 Matplotlib 表示法为每列创建两个图。每列的初始图分配有一种颜色（红色为 `r`，绿色为 `g`，蓝色为 `b`）。这些是内置的 Matplotlib 设置。 `-` 表示实线（双破折号，例如 `r--`，将创建虚线）。为每个具有相同颜色的列创建第二个图，但是使用 `o` 表示点或节点。为了演示内置的 Seaborn 主题，请将 `sns.set_style` 的值更改为 `whitegrid`。
![改进的数据可视化](/data/attachment/album/201909/30/001932q8nq81e4pq8nefqg.png "Improved data visualization")
### 停用你的虚拟环境
探索完 Pandas 和绘图后，可以使用 `deactivate` 命令停用 Python 虚拟环境：
```
(example) $ deactivate
$
```
当你想重新使用它时，只需像在本文开始时一样重新激活它即可。重新激活虚拟环境时，你必须重新安装模块，但是它们是从缓存安装的，而不是从互联网下载的，因此你不必联网。
### 无尽的可能性
Pandas、Matplotlib、Seaborn 和数据科学的真正力量是无穷的潜力，使你能够以有意义和启发性的方式解析、解释和组织数据。下一步是使用你在本文中学到的新工具探索简单的数据集。Matplotlib 和 Seaborn 不仅有折线图，还有很多其他功能，因此，请尝试创建条形图或饼图或完全不一样的东西。
一旦你了解了你的工具集并对如何关联数据有了一些想法，则可能性是无限的。数据科学是寻找隐藏在数据中的故事的新方法。让开源成为你的媒介。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[GraveAccent](https://github.com/GraveAccent) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出