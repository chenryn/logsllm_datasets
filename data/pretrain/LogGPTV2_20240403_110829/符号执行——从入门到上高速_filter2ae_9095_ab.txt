        %1 = load i8* %arrayidx
        call void @uart_send(i8 zeroext %1)
        ret i32 0
    }
为什么要转换成LLVM-IR的代码呢。LLVM-IR是LLVM的一种中间的语言表达形式，也是一种汇编语言的形式。现有的KLEE工具就是LLVM-IR工具实现的符号执行虚拟机。在解释上面的代码之前，简单介绍几个LLVM-IR的基础语法，以便更清楚的理解。
LLVM-IR的变量有三种，通过前缀@或者%的形式区分，其中@表示全局变量，%表示局部变量：
  1. %或者@接数字，表示的是临时变量，在一个函数中，从0开始编号使用。比如%0，%1，。。
  2. %或者@接字符串，表示有名字的变量，可以任意使用；
  3. 第三类就是立即数
    @msg = global [6xi8]c"world0"
    @index = global i32 0
上述代码初始化了全局变量msg和index。
    entry:
    %0 = load i32* @index
    %inc = add nsw i32 %0, 1
    store i32 %inc, i32* @index
上述代码中，i32表示是32位的类型，i32 _表示的指向i32类型的指针类型。%0 = load i32_
[@index](https://github.com/index "@index")表示将全局变量index的值赋值给局部变量%0. Add
nsw是有符号的相加。再加完之后，又把数值存储回了全局变量index。
    %arrayidx = getelementptr inbounds [6xi8]* @msg, i32 0, i32 %0
    %1 = load i8* %arrayidx
    call void @uart_send(i8 zeroext %1)
上述代码中，[6xi8] 这种形式表示的是数组类型，这里就是含有6个8位的元素的数组。Getelementptr
inbounds即使获得数组对应元素的指针。之后利用语句%1 = load i8*
%arrayidx获取指针指向的8位的值，在传入到函数uart_send中执行。
可以发现，如果按照已有的KLEE方法，在转换成LLVM-IR代码之后，由于代码中含有arm架构的汇编，而该arm代码中没有明显的调用参数的代码和方式，使得符号数值的传递再次中断，导致KLEE方法不能执行。因此，我们需要对上述含有混合LLVM-IR代码的内存进行再次转化，使得含有低级语意的arm汇编也能够被KLEE的符号执行虚拟机分析。
最近在安全顶会USENIX
Security18上发表的论文Inception，正是完成了上面的这件事情。它通过程序分析的方式，将混合油高级语言和低级语言的代码同时转化成KLEE能够分析的语言，从而执行符号执行的分析。根据Inception里面的思想，上述LLVM-IR转化之后，可以有下面的表达形式：
    @msg = global [6xi8]c"world0"
    @index = global i32 0
    ; stack is stored in global variables
    @R0 = global i32 0, align 4
    @SP = global i32 0, align 4 
    @_SVC_fe = global i32 0, align 4 
    @LR = global i32 0, align 4 
    @.stack = global [8202xi4] zeroinitializer 
    define void @uart_send(i8) #0
    {
        ; pass the parameters from high level to the low level.
        entry:
        %1 = zext i8 %0 to i32
        store i32 %1, i32* @R0
        br label %"uart_send+0" ; jmp to the actual code
    "uart_send+0":
        %SP1 = load i32* @SP ; load the stack pointer
        store i32 0, iew* @_SVC_fe
        store i32 268436580, i32* @PC ; store pointer execution
        call void (...)* @_sv_call()
        call void (...)* os_uart_send()    ; invoke uart send function and  using the value from the R0
        %LR1 = load i32* @LR1              ;load return address
        ret void
    }
    define void @os_uart_send(){...}
    define int @main() #1
    {
        entry:
        %0 = load i32* @index
        %inc = add nsw i32 %0, 1
        store i32 %inc, i32* @index
        %arrayidx = getelementptr inbounds [6xi8]* @msg, i32 0, i32 %0
        %1 = load i8* %arrayidx
        call void @uart_send(i8 zeroext %1)
        ret i32 0
    }
可以发现，相比于之前的LLVM-IR。函数uart_send中多了一部分内容。
    ; stack is stored in global variables
    @R0 = global i32 0, align 4
    @SP = global i32 0, align 4 
    @_SVC_fe = global i32 0, align 4 
    @LR = global i32 0, align 4 
    @.stack = global [8202xi4] zeroinitializer 
这部分代码对于arm汇编中只用的寄存器架构搬移了出来，并且声明成了全局变量的形式，之后，arm在寄存器和栈中的操作，都会转化成在上述全局变量中的操作。
    entry:
    %1 = zext i8 %0 to i32
    store i32 %1, i32* @R0
    br label %"uart_send+0" ; jmp to the actual code
上述代码的主要功能是讲参数msg[i++]获得的值传递给寄存器R0中，这种显示的表达，将使得符号的数值传递串联起来。%1 = zext i8 %0 to
i32表示将参数i8转化成i32。store i32 %1, i32* [@R0](https://github.com/R0
"@R0")表示将转化后的内容%1存储到寄存器R0中。Br是条件跳转语句，在这里，br将执行无条件跳转到”uart_send+0”中。
    "uart_send+0":
    %SP1 = load i32* @SP ; load the stack pointer
    store i32 0, iew* @_SVC_fe
    store i32 268436580, i32* @PC ; store pointer execution
    call void (...)* @_sv_call()
上述代码主要为转换arm的寄存器模式为SVC模式。
    call void (...)* os_uart_send()    ; invoke uart send function and using the value from the R0
    %LR1 = load i32* @LR1              ;load return address
上述内容则调用了函数os_uart_send，并使用了参数R0。因此，完成了符号数值的传递。上述寄存器的赋值，以及该系统函数的调用，可以转化成语意为调用了R0参数的函数调用。Arm的函数调用规范见[ABI](http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042f/IHI0042F_aapcs.pdf)  
更详细的arm指令可以参考[arm](http://infocenter.arm.com/help/topic/com.arm.doc.dui0489i/DUI0489I_arm_assembler_reference.pdf)  
LLVM-IR的参考可以见[LLVM-IR](http://llvm.org/docs/LangRef.html#introduction)  
Inception项目的安装可以基于docker，使得操作更加简单了[Inception-docker-install](https://github.com/Inception-framework/docker)
## 总结
总体来说，现有的符号执行工具，在开源方面，主要还是基于KLEE项目的。可见对于KLEE项目的深入理解，将有助于我们打造更加高效的工具。有了高效的工具，就能够使得我们一边学习理论，一遍验证，从而走上高速公路。Inception工具是就ARM架构，而对于路由器中常使用的MIPS架构，就笔者现在所知，现在还尚未有类似的符号执行工具发布（如果已经由类似工具，欢迎读者留言）。其中，基于IDA的脚本工具bugscam，经过揭秘路由器0DAY漏洞的作者修改之后，也能够支持分析MIPS架构的漏洞了。然而，其误报率非常之高，笔者在使用了之后，发现该工具报告的漏洞基本都不可用。因此，如何基于上述符号执行的思想，结合IDA工具中强大的反汇编能力，开发也具有符号执行功能的MIPS架构漏洞分析工具，相信也是非常有价值的。由于时间仓促，笔者对于一些部分的理解难免有误，望各位读者见谅以及不吝赐教。感谢。