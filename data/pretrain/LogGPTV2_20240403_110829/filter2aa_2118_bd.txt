#     p = getPrime(512)
#     q = getPrime(512)
#     e = 5
#     n = p * q
#     c = pow(m, e, n)
#     return (c, n)
# l = leak(bytes_to_long(flag[0]), bytes_to_long(padding), 
bytes_to_long(flag[1] + flag[2]))
# c, n = enc(m)
# print(l)
# print(n)
# print(c)
l = 
(851467273064385904853439480706913130978768075116411459993467991318244785505135
1521282825849300875451180808934634723540177392572020614371228127350366315093, 
1139618348466298216041452011599656864105349316944181838568999887492219018460061
8993189406161808331825258864834179755881024216396230998042790787143415918623, 
mpz(463467319174971534478537125753876210185303159831131986339048929995863706242
5141842768415934848075692534267896154614889702109236564561535721415087927569509
), 
mpz(278469714101315064792728503874418188023256239590971323836095557991989748017
3610712938239225733208967421091494647565583041208257260929211079467472399900897
), 
1865128094455160431157451390592424080817085824468296880631990470698505753159847
1703952601755416438724112982474074553590239198586111314171935361177438127669603
9105588814886362830787764421286351510843394803822937904055901794602280177680723
11976510633046745233628899455474429389344003169695798357039738211025666,
5482916971077907100465900758386122395988093179254480170511691938212094686909346
0763311583690212409258006035046837680193543721822507513325966776865986598193474
6633764957340105075967569550340423696075077667483329402303870371584084323140887
9195866584742586386333373862336287408841247917195883597624403390910372, 
7496162470057082566142507469993217660932146905644951378308582993882670733728750
2198895054962001192345105970228367025392103044122840249185367359738330285315139
0750447690562612154394227864234235202428826165990692623206578927364905731999537
47616316977906614094081725739377860475149681397270351494502879810040119, 
9199578264898001084742773999321748602616249934960574602308573395013033128797090
1582164575965127425637201059093005775243323253033284087100922267082650658959030
4289001756546446884923570854092468237408509133732727011430441521065926676978152
57823931523933665000651956390275184280406451020398039989430172569966888)
n = 
9953314871550860913731573280534051623812260533797190507313404910653547115040095
3730776337851964290567462702510396193784084088446908685021259972049637120028927
7720771048914166984108470608386522815414574987718098382149542812454181602941401
03403240809785976984535856950679868772244695570256951863999317571672437
c = 
3433858217120737986203352592778252898352958362274625019104853451651218586514680
4370249601090807953801674089517476781590729012862579342009960254301681032365519
4838968735185399644436681114919619354417413112404174423429285968056324310725545
04001292544711291709844962036644053777982072444079745282278911191432141
p, q, dp, dq, c1, c2, c3, c4 = l
print(p, q)
phi = (p-1)*(q-1)
# print(c1, p*q)
d = inverse(0x10001, phi)
c = pow(c4, d, p*q)
print(long_to_bytes(c))
# print()
d = crt([p-1, q-1], [dp, dq])[0]
b = padding = pow(c1, d, p*q)
m1, m2 = b >> 256, b & 2 ** 256 - 1
mm = m1+m2
# print(mm)
print(c2)
e = 1751345818
print(hex(e))
s = [0x68, 0x63, 0x6a, 0x9a]
charset = '0123456789abcdef'
cnt = 0
for a in charset:
    if chr(0x68-ord(a)) not in charset:
        continue
    for b in charset:
        if 0x63-ord(b)  = PolynomialRing(Zmod(n))
            f = (mbar + ((ord(c1)-ord('0'))sk
a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
b = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/'
s = ''
c = '2NI5JKCBI5Hyva+8AZa3mq'
for x in c:
    idx = b.find(x)
    idx = (idx - 32) % 64
    s = s + a[idx]
print(s + "==")
for (int i = 0; i sk[i], ctx2->sk[31 - i]);  
}