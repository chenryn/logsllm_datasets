title:Establishing Browser Security Guarantees through Formal Shim Verification
author:Dongseok Jang and
Zachary Tatlock and
Sorin Lerner
Establishing Browser Security Guarantees
through Formal Shim Veriﬁcation
Dongseok Jang
UC San Diego
Zachary Tatlock
UC San Diego
Sorin Lerner
UC San Diego
Abstract
Web browsers mediate access to valuable private data in
domains ranging from health care to banking. Despite
this critical role, attackers routinely exploit browser vul-
nerabilities to exﬁltrate private data and take over the un-
derlying system. We present QUARK, a browser whose
kernel has been implemented and veriﬁed in Coq. We
give a speciﬁcation of our kernel, show that the imple-
mentation satisﬁes the speciﬁcation, and ﬁnally show
that the speciﬁcation implies several security properties,
including tab non-interference, cookie integrity and con-
ﬁdentiality, and address bar integrity.
1
Introduction
Web browsers increasingly dominate computer use as
people turn to Web applications for everything from busi-
ness productivity suites and educational software to so-
cial networking and personal banking. Consequently,
browsers mediate access to highly valuable, private data.
Given the browser’s sensitive, essential role, it should be
highly secure and robust in the face of adversarial attack.
Unfortunately, security experts consistently discover
vulnerabilities in all popular browsers, leading to data
loss and remote exploitation. In the annual Pwn2Own
competition, part of the CanSecWest security confer-
ence [4], security experts demonstrate new attacks on up-
to-date browsers, allowing them to subvert a user’s ma-
chine through the click of a single link. These vulnera-
bilities represent realistic, zero-day exploits and thus are
quickly patched by browser vendors. Exploits are also
regularly found in the wild; Google maintains a Vulner-
ability Reward Program, publishing its most notorious
bugs and rewarding the cash to their reporters [2].
Researchers have responded to the problems of
browser security with a diverse range of techniques, from
novel browser architectures [10, 42, 17, 41, 31] and de-
fenses against speciﬁc attacks [26, 20, 22, 8, 36] to al-
ternative security policies [25, 40, 21, 8, 39, 5] and im-
proved JavaScript safety [14, 23, 38, 6, 44]. While all
these techniques improve browser security, the intricate
subtleties of Web security make it very difﬁcult to know
with full certainty whether a given technique works as in-
tended. Often, a solution only “works” until an attacker
ﬁnds a bug in the technique or its implementation. Even
in work that attempts to provide strong guarantees (for
example [17, 13, 41, 12]) the guarantees come from ana-
lyzing a model of the browser, not the actual implemen-
tation. Reasoning about such a simpliﬁed model eases
the veriﬁcation burden by omitting the gritty details and
corner cases present in real systems. Unfortunately, at-
tackers exploit precisely such corner cases. Thus, these
approaches still leave a formality gap between the theory
and implementation of a technique.
There is one promising technique that could mini-
mize this formality gap: fully formal veriﬁcation of the
browser implementation, carried out in the demanding
and foundational context of a mechanical proof assistant.
This severe discipline forces the programmer to specify
precisely how their code should behave and then pro-
vides the tools to formally guarantee that it does, all in
fully formal logic, building from basic axioms up. For
their trouble, the programmer is rewarded with a ma-
chine checkable proof that the implementation satisﬁes
the speciﬁcation. With this proof in hand, we can avoid
further reasoning about the large, complex implementa-
tion, and instead consider only the substantially smaller,
simpler speciﬁcation.
In order to believe that such a
browser truly satisﬁes its speciﬁcation, one needs only
trust a very small, extensively tested proof checker. By
reasoning about the actual implementation directly, we
can guarantee that any security properties implied by the
speciﬁcation will hold in every case, on every run of the
actual browser.
Unfortunately, formal veriﬁcation in a proof assistant
is tremendously difﬁcult. Often, those systems which we
can formally verify are severely restricted, “toy” versions
of the programs we actually have in mind. Thus, many
researchers still consider full formal veriﬁcation of real-
istic, browser-scale systems an unrealistic fantasy. Fortu-
nately, recent advances in fully formal veriﬁcation allow
us to begin challenging this pessimistic outlook.
In this paper we demonstrate how formal shim veriﬁ-
cation radically reduces the veriﬁcation burden for large
systems to the degree that we were able to formally
verify the implementation of a modern Web browser,
QUARK, within the demanding and foundational context
of the mechanical proof assistant Coq.
At its core, formal shim veriﬁcation addresses the
challenge of formally verifying a large system by clev-
erly reducing the amount of code that must be con-
sidered; instead of formalizing and reasoning about gi-
gantic system components, all components communi-
cate through a small, lightweight shim which ensures the
components are restricted to only exhibit allowed behav-
iors. Formal shim veriﬁcation only requires one to rea-
son about the shim, thus eliminating the tremendously
expensive or infeasible task of verifying large, complex
components in a proof assistant.
Our Web browser, QUARK, exploits formal shim ver-
iﬁcation and enables us to verify security properties for
a million lines of code while reasoning about only a few
hundred. To achieve this goal, QUARK is structured sim-
ilarly to Google Chrome [10] or OP [17].
It consists
of a small browser kernel which mediates access to sys-
tem resources for all other browser components. These
other components run in sandboxes which only allow the
component to communicate with the kernel. In this way,
QUARK is able to make strong guarantees about a million
lines of code (e.g., the renderer, JavaScript implementa-
tion, JPEG decoders, etc.) while only using a proof as-
sistant to reason about a few hundred lines of code (the
kernel). Because the underlying system is protected from
QUARK’s untrusted components (i.e., everything other
than the kernel) we were free to adopt state-of-the-art
implementations and thus QUARK is able to run popu-
lar, complex Web sites like Facebook and GMail.
By applying formal shim veriﬁcation to only reason
about a small core of the browser, we formally establish
the following security properties in QUARK, all within a
proof assistant:
1. Tab Non-Interference: no tab can ever affect how
the kernel interacts with another tab
2. Cookie Conﬁdentiality and Integrity: cookies for
a domain can only be accessed/modiﬁed by tabs of
that domain
3. Address Bar Integrity and Correctness: the ad-
dress bar cannot be modiﬁed by a tab without the
2
user being involved, and always displays the correct
address bar.
To summarize, our contributions are as follows:
• We demonstrate how formal shim veriﬁcation en-
abled us to formally verify the implementation of
a modern Web browser. We discuss the techniques,
tools, and design decisions required to formally ver-
ify QUARK in detail.
• We identify and formally prove key security prop-
erties for a realistic Web browser.
• We provide a framework that can be used to further
investigate and prove more complex policies within
a working, formally veriﬁed browser.
The rest of the paper is organized as follows. Section 2
provides background on browser security techniques and
formal veriﬁcation. Section 3 presents an overview of
the QUARK browser. Section 4 details the design of the
QUARK kernel and its implementation. Section 5 ex-
plains the tools and techniques we used to formally ver-
ify the implementation of the QUARK kernel. Section 6
evaluates QUARK along several dimensions while Sec-
tion 7 discusses lessons learned from our endeavor.
2 Background and Related Work
This section brieﬂy discusses both previous efforts to im-
prove browser security and veriﬁcation techniques to en-
sure programs behave as speciﬁed.
Browser Security As mentioned in the Introduction,
there is a rich literature on techniques to improve browser
security [10, 42, 17, 41, 31, 13, 12]. We distinguish our-
selves from all previous techniques by verifying the ac-
tual implementation of a modern Web browser and for-
mally proving that it satisﬁes our security properties, all
in the context of a mechanical proof assistant. Below, we
survey the most closely related work.
Previous browsers
like Google Chrome
[10],
Gazelle [42], and OP [17] have been designed using
privilege separation [35], where the browser is divided
into components which are then limited to only those
privileges they absolutely require, thus minimizing the
damage an attacker can cause by exploiting any one
component. We follow this design strategy.
Chrome’s design compromises the principles of priv-
ilege separation for the sake of performance and com-
patibility. Unfortunately, its design does not protect the
user’s data from a compromised tab which is free to
leak all cookies for every domain. Gazelle [42] adopts
a more principled approach, implementing the browser
as a multi-principal OS, where the kernel has exclusive
control over resource management across various Web
principals. This allows Gazelle to enforce richer policies
than those found in Chrome. However, neither Chrome
nor Gazelle apply any formal methods to make guaran-
tees about their browser.
The OP [17] browser goes beyond privilege separa-
tion. Its authors additionally construct a model of their
browser kernel and apply the Maude model checker to
ensure that this model satisﬁes important security prop-
erties such as the same origin policy and address bar cor-
rectness. As such, the OP browser applies insight similar
to our work, in that OP focuses its formal reasoning on
a small kernel. However, unlike our work, OP does not
make any formal guarantees about the actual browser im-
plementation, which means there is still a formality gap
between the model and the code that runs. Our formal
shim veriﬁcation closes this formality gap by conducting
all proofs in full formal detail using a proof assistant.
Formal Veriﬁcation Recently, researchers have begun
using proof assistants to fully formally verify imple-
mentations for foundational software including Operat-
ing Systems [27], Compilers [28, 1], Database Man-
agement Systems [29], Web Servers [30], and Sand-
boxes [32]. Some of these results have even experimen-
tally been shown to to drastically improve software relia-
bility: Yang et al. [43] show through random testing that
the CompCert veriﬁed C compiler is substantially more
robust and reliable than its non-veriﬁed competitors like
GCC and LLVM.
As researchers verify more of the software stack, the
frontier is being pushed toward higher level platforms
like the browser. Unfortunately, previous veriﬁcation re-
sults have only been achieved at staggering cost; in the
case of seL4, veriﬁcation took over 13 person years of
effort. Based on these results, verifying a browser-scale
platform seemed truly infeasible.
Our formal veriﬁcation of QUARK was radically
cheaper than previous efforts. Previous efforts were
tremendously expensive because researchers proved
nearly every line of code correct. We avoid these costs in
QUARK by applying formal shim veriﬁcation: we struc-
ture our browser so that all our target security properties
can be ensured by a very small browser kernel and then
reason only about that single, tiny component. Leverag-
ing this technique enabled us to make strong guarantees
about the behavior of a million of lines of code while rea-
soning about only a few hundred in the mechanical proof
assistant Coq.
We use the Ynot library [34] extensively to reason
about imperative programming features, e.g.,
impure
functions like fopen, which are otherwise unavailable in
Coq’s pure implementation language. Ynot also provides
Figure 1: QUARK Architecture. This diagram shows how QUARK
factors a modern browser into distinct components which run in sep-
arate processes; arrows indicate information ﬂow. We guarantee our
security properties by formally verifying the QUARK Kernel in the Coq
proof assistant, which allows us to avoid reasoning about the intricate
details of other components.
features which allow us to verify QUARK in a familiar
style:
invariants expressed as pre- and post-conditions
over program states, essentially a variant of Hoare Type
Theory [33]. Speciﬁcally, Ynot enables trace-based ver-
iﬁcation, used extensively in [30] to prove properties of
servers. This technique entails reasoning about the se-
quence of externally visible actions a program may per-
form on any input, also known as traces. Essentially,
our speciﬁcation delineates which sequences of system
calls the QUARK kernel can make and our veriﬁcation
consists of proving that the implementation is restricted
to only making such sequences of system calls. We go
on to formally prove that satisfying this speciﬁcation im-
plies higher level security properties like tab isolation,
cookie integrity and conﬁdentiality, and address bar in-
tegrity and correctness. Building QUARK with a different
proof assistant like Isabelle/HOL would have required
essentially the same approach for encoding imperative
programming features, but we chose Coq since Ynot is
available and has been well vetted.
Our approach is fundamentally different from pre-
vious veriﬁcation tools like ESP [16], SLAM [7],
BLAST [18] and Terminator [15], which work on ex-
isting code bases.
In our approach, instead of trying
to prove properties about a large existing code base ex-
pressed in difﬁcult-to-reason-about languages like C or
C++, we rewrite the browser inside of a theorem prover.
This provides much stronger reasoning capabilities.
3 QUARK Architecture and Design
Figure 1 diagrams QUARK’s architecture. Similar to
Chrome [10] and OP [17], QUARK isolates complex and
vulnerability-ridden components in sandboxes, forcing
3
InputsandbTabInputboxProcNetworkQuark KernelOutputsandboxCookieProcthem to access all sensitive resources through a small,
simple browser kernel. Our kernel, written in Coq, runs
in its own process and mediates access to resources in-
cluding the keyboard, disk, and network. Each tab runs a
modiﬁed version of WebKit in its own process. WebKit
is the open source browser engine used in Chrome and
Safari. It provides various callbacks for clients as Python
bindings which we use to implement tabs. Since tab pro-
cesses cannot directly access any system resources, we
hook into these callbacks to re-route WebKit’s network,
screen, and cookie access through our kernel written in
Coq. QUARK also uses separate processes for display-
ing to the screen, storing and accessing cookies, as well
reading input from the user.
Throughout the paper, we assume that an attacker can
compromise any QUARK component which is exposed to
content from the Internet, except for the kernel which we
formally veriﬁed. This includes all tab processes, cookie
processes, and the graphical output process. Thus, we
provide strong formal guarantees about tab and cookie
isolation, even when some processes have been com-
pletely taken over (e.g., by a buffer overﬂow attack in
the rendering or JavaScript engine of WebKit).
3.1 Graphical User Interface
The traditional GUI for Web browsers manages several
key responsibilities: reading mouse and keyboard input,
showing rendered graphical output, and displaying the
current URL. Unfortunately, such a monolithic compo-
nent cannot be made to satisfy our security goals.
If
compromised, such a GUI component could spoof the
current URL or send arbitrary user inputs to the kernel,
which, if coordinated with a compromised tab, would vi-
olate tab isolation. Thus QUARK must carefully separate
GUI responsibilities to preserve our security guarantees
while still providing a realistic browser.
QUARK divides GUI responsibilities into several com-
ponents which the kernel orchestrates to provide a tradi-
tional GUI for the user. The most complex component
displays rendered bitmaps on the screen. QUARK puts
this component in a separate process to which the kernel
directs rendered bitmaps from the currently selected tab.
Because the kernel never reads input from this graphi-
cal output process, any vulnerabilities it may have can-
not subvert the kernel or impact any other component
in QUARK. Furthermore, treating the graphical output
component as a separate process simpliﬁes the kernel and
proofs because it allows the kernel to employ a uniform
mechanism for interacting with the outside world: mes-
sages over channels.
To formally reason about the address bar, we designed
our kernel so that the current URL is written directly to
the kernel’s stdout. This gives rise to a hybrid graphi-
Figure 2: QUARK Screenshot. This screenshot shows QUARK run-
ning a Google search, including an interactive drop-down suggesting
query completions and an initial set of search results from a JavaScript
event handler dispatching an “instant search” as well as a page preview
from a search result link. (Location blurred for double-blind review.)
cal/text output as shown in Figure 2 where the kernel has
complete control over the address bar. With this design,
the graphical output process is never able to spoof the