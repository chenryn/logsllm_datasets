does not accept a \s-1PID\s0 argument, so only \f(CW\*(C`PID==0\*(C'\fR is truly portable.
.IP "getppid" 8
.IX Item "getppid"
Returns the process id of the parent process.
.Sp
Note for Linux users: on Linux, the C functions \f(CW\*(C`getpid()\*(C'\fR and
\&\f(CW\*(C`getppid()\*(C'\fR return different values from different threads. In order to
be portable, this behavior is not reflected by the perl-level function
\&\f(CW\*(C`getppid()\*(C'\fR, that returns a consistent value across threads. If you want
to call the underlying \f(CW\*(C`getppid()\*(C'\fR, you may use the \s-1CPAN\s0 module
\&\f(CW\*(C`Linux::Pid\*(C'\fR.
.IP "getpriority \s-1WHICH\s0,WHO" 8
.IX Item "getpriority WHICH,WHO"
Returns the current priority for a process, a process group, or a user.
(See \fIgetpriority\fR\|(2).)  Will raise a fatal exception if used on a
machine that doesn't implement \fIgetpriority\fR\|(2).
.IP "getpwnam \s-1NAME\s0" 8
.IX Item "getpwnam NAME"
.PD 0
.IP "getgrnam \s-1NAME\s0" 8
.IX Item "getgrnam NAME"
.IP "gethostbyname \s-1NAME\s0" 8
.IX Item "gethostbyname NAME"
.IP "getnetbyname \s-1NAME\s0" 8
.IX Item "getnetbyname NAME"
.IP "getprotobyname \s-1NAME\s0" 8
.IX Item "getprotobyname NAME"
.IP "getpwuid \s-1UID\s0" 8
.IX Item "getpwuid UID"
.IP "getgrgid \s-1GID\s0" 8
.IX Item "getgrgid GID"
.IP "getservbyname \s-1NAME\s0,PROTO" 8
.IX Item "getservbyname NAME,PROTO"
.IP "gethostbyaddr \s-1ADDR\s0,ADDRTYPE" 8
.IX Item "gethostbyaddr ADDR,ADDRTYPE"
.IP "getnetbyaddr \s-1ADDR\s0,ADDRTYPE" 8
.IX Item "getnetbyaddr ADDR,ADDRTYPE"
.IP "getprotobynumber \s-1NUMBER\s0" 8
.IX Item "getprotobynumber NUMBER"
.IP "getservbyport \s-1PORT\s0,PROTO" 8
.IX Item "getservbyport PORT,PROTO"
.IP "getpwent" 8
.IX Item "getpwent"
.IP "getgrent" 8
.IX Item "getgrent"
.IP "gethostent" 8
.IX Item "gethostent"
.IP "getnetent" 8
.IX Item "getnetent"
.IP "getprotoent" 8
.IX Item "getprotoent"
.IP "getservent" 8
.IX Item "getservent"
.IP "setpwent" 8
.IX Item "setpwent"
.IP "setgrent" 8
.IX Item "setgrent"
.IP "sethostent \s-1STAYOPEN\s0" 8
.IX Item "sethostent STAYOPEN"
.IP "setnetent \s-1STAYOPEN\s0" 8
.IX Item "setnetent STAYOPEN"
.IP "setprotoent \s-1STAYOPEN\s0" 8
.IX Item "setprotoent STAYOPEN"
.IP "setservent \s-1STAYOPEN\s0" 8
.IX Item "setservent STAYOPEN"
.IP "endpwent" 8
.IX Item "endpwent"
.IP "endgrent" 8
.IX Item "endgrent"
.IP "endhostent" 8
.IX Item "endhostent"
.IP "endnetent" 8
.IX Item "endnetent"
.IP "endprotoent" 8
.IX Item "endprotoent"
.IP "endservent" 8
.IX Item "endservent"
.PD
These routines perform the same functions as their counterparts in the
system library.  In list context, the return values from the
various get routines are as follows:
.Sp
.Vb 7
\&    ($name,$passwd,$uid,$gid,
\&       $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*
\&    ($name,$passwd,$gid,$members) = getgr*
\&    ($name,$aliases,$addrtype,$length,@addrs) = gethost*
\&    ($name,$aliases,$addrtype,$net) = getnet*
\&    ($name,$aliases,$proto) = getproto*
\&    ($name,$aliases,$port,$proto) = getserv*
.Ve
.Sp
(If the entry doesn't exist you get a null list.)
.Sp
The exact meaning of the \f(CW$gcos\fR field varies but it usually contains
the real name of the user (as opposed to the login name) and other
information pertaining to the user.  Beware, however, that in many
system users are able to change this information and therefore it
cannot be trusted and therefore the \f(CW$gcos\fR is tainted (see
perlsec).  The \f(CW$passwd\fR and \f(CW$shell\fR, user's encrypted password and
login shell, are also tainted, because of the same reason.
.Sp
In scalar context, you get the name, unless the function was a
lookup by name, in which case you get the other thing, whatever it is.
(If the entry doesn't exist you get the undefined value.)  For example:
.Sp
.Vb 7
\&    $uid   = getpwnam($name);
\&    $name  = getpwuid($num);
\&    $name  = getpwent();
\&    $gid   = getgrnam($name);
\&    $name  = getgrgid($num);
\&    $name  = getgrent();
\&    #etc.
.Ve
.Sp
In \fIgetpw*()\fR the fields \f(CW$quota\fR, \f(CW$comment\fR, and \f(CW$expire\fR are special
cases in the sense that in many systems they are unsupported.  If the
\&\f(CW$quota\fR is unsupported, it is an empty scalar.  If it is supported, it
usually encodes the disk quota.  If the \f(CW$comment\fR field is unsupported,
it is an empty scalar.  If it is supported it usually encodes some
administrative comment about the user.  In some systems the \f(CW$quota\fR
field may be \f(CW$change\fR or \f(CW$age\fR, fields that have to do with password
aging.  In some systems the \f(CW$comment\fR field may be \f(CW$class\fR.  The \f(CW$expire\fR
field, if present, encodes the expiration period of the account or the
password.  For the availability and the exact meaning of these fields
in your system, please consult your \fIgetpwnam\fR\|(3) documentation and your
\&\fIpwd.h\fR file.  You can also find out from within Perl what your
\&\f(CW$quota\fR and \f(CW$comment\fR fields mean and whether you have the \f(CW$expire\fR field
by using the \f(CW\*(C`Config\*(C'\fR module and the values \f(CW\*(C`d_pwquota\*(C'\fR, \f(CW\*(C`d_pwage\*(C'\fR,
\&\f(CW\*(C`d_pwchange\*(C'\fR, \f(CW\*(C`d_pwcomment\*(C'\fR, and \f(CW\*(C`d_pwexpire\*(C'\fR.  Shadow password
files are only supported if your vendor has implemented them in the
intuitive fashion that calling the regular C library routines gets the
shadow versions if you're running under privilege or if there exists
the \fIshadow\fR\|(3) functions as found in System V ( this includes Solaris
and Linux.)  Those systems which implement a proprietary shadow password
facility are unlikely to be supported.
.Sp
The \f(CW$members\fR value returned by \fIgetgr*()\fR is a space separated list of
the login names of the members of the group.
.Sp
For the \fIgethost*()\fR functions, if the \f(CW\*(C`h_errno\*(C'\fR variable is supported in
C, it will be returned to you via \f(CW$?\fR if the function call fails.  The
\&\f(CW@addrs\fR value returned by a successful call is a list of the raw
addresses returned by the corresponding system library call.  In the
Internet domain, each address is four bytes long and you can unpack it
by saying something like:
.Sp
.Vb 1
\&    ($a,$b,$c,$d) = unpack('C4',$addr[0]);
.Ve
.Sp
The Socket library makes this slightly easier:
.Sp
.Vb 3
\&    use Socket;
\&    $iaddr = inet_aton("127.1"); # or whatever address
\&    $name  = gethostbyaddr($iaddr, AF_INET);
.Ve
.Sp
.Vb 2
\&    # or going the other way
\&    $straddr = inet_ntoa($iaddr);
.Ve
.Sp
If you get tired of remembering which element of the return list
contains which return value, by-name interfaces are provided
in standard modules: \f(CW\*(C`File::stat\*(C'\fR, \f(CW\*(C`Net::hostent\*(C'\fR, \f(CW\*(C`Net::netent\*(C'\fR,
\&\f(CW\*(C`Net::protoent\*(C'\fR, \f(CW\*(C`Net::servent\*(C'\fR, \f(CW\*(C`Time::gmtime\*(C'\fR, \f(CW\*(C`Time::localtime\*(C'\fR,
and \f(CW\*(C`User::grent\*(C'\fR.  These override the normal built\-ins, supplying
versions that return objects with the appropriate names
for each field.  For example:
.Sp
.Vb 3
\&   use File::stat;
\&   use User::pwent;
\&   $is_his = (stat($filename)->uid == pwent($whoever)->uid);
.Ve
.Sp
Even though it looks like they're the same method calls (uid),
they aren't, because a \f(CW\*(C`File::stat\*(C'\fR object is different from
a \f(CW\*(C`User::pwent\*(C'\fR object.
.IP "getsockname \s-1SOCKET\s0" 8
.IX Item "getsockname SOCKET"
Returns the packed sockaddr address of this end of the \s-1SOCKET\s0 connection,
in case you don't know the address because you have several different
IPs that the connection might have come in on.
.Sp
.Vb 6
\&    use Socket;
\&    $mysockaddr = getsockname(SOCK);
\&    ($port, $myaddr) = sockaddr_in($mysockaddr);
\&    printf "Connect to %s [%s]\en",
\&       scalar gethostbyaddr($myaddr, AF_INET),
\&       inet_ntoa($myaddr);
.Ve
.IP "getsockopt \s-1SOCKET\s0,LEVEL,OPTNAME" 8
.IX Item "getsockopt SOCKET,LEVEL,OPTNAME"
Returns the socket option requested, or undef if there is an error.
.IP "glob \s-1EXPR\s0" 8
.IX Item "glob EXPR"
.PD 0
.IP "glob" 8
.IX Item "glob"
.PD
In list context, returns a (possibly empty) list of filename expansions on
the value of \s-1EXPR\s0 such as the standard Unix shell \fI/bin/csh\fR would do. In
scalar context, glob iterates through such filename expansions, returning
undef when the list is exhausted. This is the internal function
implementing the \f(CW\*(C`\*(C'\fR operator, but you can use it directly. If
\&\s-1EXPR\s0 is omitted, \f(CW$_\fR is used.  The \f(CW\*(C`\*(C'\fR operator is discussed in
more detail in \*(L"I/O Operators\*(R" in perlop.
.Sp
Beginning with v5.6.0, this operator is implemented using the standard
\&\f(CW\*(C`File::Glob\*(C'\fR extension.  See File::Glob for details.
.IP "gmtime \s-1EXPR\s0" 8
.IX Item "gmtime EXPR"
Converts a time as returned by the time function to an 8\-element list
with the time localized for the standard Greenwich time zone.
Typically used as follows:
.Sp
.Vb 3
\&    #  0    1    2     3     4    5     6     7
\&    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday) =
\&                                            gmtime(time);
.Ve
.Sp
All list elements are numeric, and come straight out of the C `struct
tm'.  \f(CW$sec\fR, \f(CW$min\fR, and \f(CW$hour\fR are the seconds, minutes, and hours of the
specified time.  \f(CW$mday\fR is the day of the month, and \f(CW$mon\fR is the month
itself, in the range \f(CW0..11\fR with 0 indicating January and 11
indicating December.  \f(CW$year\fR is the number of years since 1900.  That
is, \f(CW$year\fR is \f(CW123\fR in year 2023.  \f(CW$wday\fR is the day of the week, with
0 indicating Sunday and 3 indicating Wednesday.  \f(CW$yday\fR is the day of
the year, in the range \f(CW0..364\fR (or \f(CW0..365\fR in leap years.)
.Sp
Note that the \f(CW$year\fR element is \fInot\fR simply the last two digits of
the year.  If you assume it is, then you create non\-Y2K\-compliant
programs\*(--and you wouldn't want to do that, would you?
.Sp
The proper way to get a complete 4\-digit year is simply:
.Sp
.Vb 1
\&        $year += 1900;
.Ve
.Sp
And to get the last two digits of the year (e.g., '01' in 2001) do:
.Sp
.Vb 1
\&        $year = sprintf("%02d", $year % 100);
.Ve
.Sp
If \s-1EXPR\s0 is omitted, \f(CW\*(C`gmtime()\*(C'\fR uses the current time (\f(CW\*(C`gmtime(time)\*(C'\fR).
.Sp
In scalar context, \f(CW\*(C`gmtime()\*(C'\fR returns the \fIctime\fR\|(3) value:
.Sp
.Vb 1
\&    $now_string = gmtime;  # e.g., "Thu Oct 13 04:54:34 1994"
.Ve
.Sp
Also see the \f(CW\*(C`timegm\*(C'\fR function provided by the \f(CW\*(C`Time::Local\*(C'\fR module,
and the \fIstrftime\fR\|(3) function available via the \s-1POSIX\s0 module.
.Sp
This scalar value is \fBnot\fR locale dependent (see perllocale), but
is instead a Perl builtin.  Also see the \f(CW\*(C`Time::Local\*(C'\fR module, and the
\&\fIstrftime\fR\|(3) and \fImktime\fR\|(3) functions available via the \s-1POSIX\s0 module.  To