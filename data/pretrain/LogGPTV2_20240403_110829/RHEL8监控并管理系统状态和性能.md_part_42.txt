    # tuned-adm profile my_profile
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在共享示例中，不需要重新启动。但是，如果 [*my_profile*]{.emphasis}
配置集中的更改需要重新启动才能生效，则重新启动您的计算机。
:::
::: itemizedlist
**其它资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
:::
[]{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance}第 33 章 影响 I/O 和文件系统性能的因素 {.title}
:::
存储和文件系统性能的适当设置高度依赖于存储用途。
I/O 和文件系统性能可能会受到以下任何因素的影响：
::: itemizedlist
-   数据写入或读取模式
-   连续或随机
-   缓冲或直接 IO
-   与底层几metry 的数据一致
-   块大小
-   文件系统大小
-   日志大小和位置
-   记录访问时间
-   确保数据可靠性
-   预获取数据
-   预分配磁盘空间
-   文件碎片
-   资源争用
:::
::: section
::: titlepage
# []{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html#tools-for-monitoring-and-diagnosing-i-o-and-file-system-issues_factors-affecting-i-o-and-file-system-performance}用于监控和诊断 I/O 和文件系统问题的工具 {.title}
:::
Red Hat Enterprise Linux 8 中提供了以下工具来监控系统性能，并诊断与
I/O、文件系统及其配置相关的性能问题：
::: itemizedlist
-   `vmstat`{.literal} 工具报告整个系统中的进程、内存、分页、块
    I/O、中断和 CPU 活动。它可以帮助管理员确定 I/O
    子系统是否负责处理任何性能问题。如果使用 `vmstat`{.literal} 分析显示
    I/O 子系统负责降低性能，管理员可以使用 `iostat`{.literal}
    工具来确定负责的 I/O 设备。
-   `iostat`{.literal} 报告您系统中的 I/O 设备负载。它由
    `sysstat`{.literal} 软件包提供。
-   `Bricktrace`{.literal} 提供 I/O
    子系统中花时间的详细信息。配套实用程序 `blkparse`{.literal} 从
    `blktrace`{.literal} 读取原始输出，并生成由 `blktrace`{.literal}
    记录的人类可读输入和输出操作摘要。
-   `BTT`{.literal} 分析s `blktrace`{.literal} 输出并显示数据在 I/O
    堆栈的每个区域所花费的时间，使得在 I/O
    子系统中发现瓶颈变得更容易。该实用程序作为 the `blktrace`{.literal}
    软件包的一部分提供。由 B `tt`{.literal} 分析的 Blo
    `ktrace`{.literal} 机制跟踪的一些重要事件有：
    ::: itemizedlist
    -   I/O 事件队列(`Q`{.literal})
    -   将 I/O 分配到驱动程序事件(`D`{.literal})
    -   完成 I/O 事件(`C`{.literal})
    :::
-   `iowatcher`{.literal} 可以使用 `blktrace`{.literal} 输出来图形
    I/O。它侧重于磁盘 I/O 的逻辑块地址(LBA)、每秒吞吐量（以 MB
    为单位）、每秒请求数和 I/O
    操作数。这有助于识别何时达到设备的操作数秒限制。
-   BPF Compiler Collection(BCC)是一个库，可帮助创建扩展的 Berkeley
    Packet Filter(eBPF`)`{.literal}程序。`eBPF`{.literal}
    程序在事件中触发，如磁盘 I/O、TCP 连接和进程创建。BCC 工具安装在
    `/usr/share/bcc/tools/`{.literal} 目录中。以下 `bcc-tools`{.literal}
    有助于分析性能：
    ::: itemizedlist
    -   `biolatency`{.literal} 总结了直方图中的块设备 I/O（磁盘
        I/O）中的延迟。这允许研究发行版，包括两种设备缓存命中和缓存未命中模式，以及延迟延迟延迟。
    -   `biosnoop`{.literal} 是一个基本块 I/O 追踪工具，用于显示每个 I/O
        事件以及发布进程 ID 和 I/O 延迟。使用这个工具，您可以调查磁盘
        I/O 性能问题。
    -   `biotop`{.literal} 用于内核中的块 i/o 操作。
    -   `filelife`{.literal} 工具跟踪 `stat（）`{.literal} 系统调用。
    -   `文件更低的`{.literal} 跟踪同步文件读写速度较慢。
    -   `filetop`{.literal} 可按进程显示文件的读取和写入权限。
    -   `ext4slower`{.literal}、`nfsslower`{.literal} 和
        `xfsslower`{.literal}
        是显示文件系统操作比特定阈值慢的工具，其默认值为
        `10ms`{.literal}。
        如需更多信息，请参阅使用 [BPF Compiler Collection
        分析系统性能](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/analyzing-system-performance-with-bpf-compiler_collection_managing-monitoring-and-updating-the-kernel){.link}。
    :::
-   `bpftace`{.literal} 是用于分析性能问题的 `eBPF`{.literal}
    的跟踪语言。它还提供跟踪实用程序（如 BCC）进行系统观察，这对于调查
    I/O 性能问题非常有用。
-   以下 `SystemTap`{.literal}
    脚本在诊断存储或文件系统性能问题时可能有用：
    ::: itemizedlist
    -   `disktop.stp`{.literal} ：每 5
        秒检查一次读取或写入磁盘的状态，并输出该期间内前 10 个条目。
    -   `iotime.stp`{.literal}
        ：打印读取和写入操作所用时间，以及读写操作的字节数。
    -   `traceio.stp`{.literal} ：根据观察到的累积 I/O
        流量（每秒）打印前十个可执行文件。
    -   `traceio2.stp`{.literal}
        ：在出现对指定设备的读取和写入时，打印可执行名称和进程标识符。
    -   `Inodewatch.stp`{.literal}
        ：每次对指定主设备或次要设备上的指定索引节点发生读取和写入时，打印可执行名称和进程标识符。
    -   `inodewatch2.stp`{.literal}
        ：每次在指定主设备或次要设备的指定索引节点上更改属性时，打印可执行名称、进程标识符和属性。
    :::
:::
::: itemizedlist
**其它资源**
-   `vmstat(8),`{.literal} `iostat(1)`{.literal},
    `blktrace(8),`{.literal} `blkparse(1)`{.literal},
    `btt(1),`{.literal} `bpftrace`{.literal} 和 `iowatcher(1)`{.literal}
    man page
-   [使用 BPF Compiler Collection
    分析系统性能](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#analyzing-system-performance-with-bpf-compiler_collection_monitoring-and-managing-system-status-and-performance){.link}
:::
:::
::: section
::: titlepage
# []{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html#available-tuning-options-for-formatting-a-file-system_factors-affecting-i-o-and-file-system-performance}用于格式化文件系统的可用调整选项 {.title}
:::
在设备格式化后，无法更改一些文件系统配置决策。
以下是格式化存储设备前可用的选项：
::: variablelist
[`Size`{.literal}]{.term}
:   为您的工作负载创建适当大小的文件系统。较小的文件系统需要较少的时间和内存进行文件系统检查。但是，如果文件系统太小，其性能会受到高碎片影响。
[`块大小`{.literal}]{.term}
:   块是文件系统的工作单元。块大小决定了单个块中可以存储多少数据，因此一次写入或读取的最小数据量。
    默认块大小适用于大多数用例。但是，如果块大小或多个块的大小与通常一次读取或写入的数据量相同或略大，则文件系统性能更好，并且存储数据效率更高。个小文件仍然使用整个
    块。文件可以分散到多个块中，但这会产生额外的运行时开销。
    此外，某些文件系统仅限于特定数量的块，进而限制文件系统的最大大小。使用
    `mkfs`{.literal}
    命令格式化设备时，块大小作为文件系统选项的一部分指定。指定块大小的参数因文件系统而异。
[`geometry`{.literal}]{.term}
:   文件系统 geometry
    涉及文件系统中数据的分布。如果您的系统使用分条存储（如
    RAID），您可以在格式化该设备时将数据和元数据与底层存储几兆对齐来提高性能。
    许多设备会导出建议的
    geometry，然后在设备使用特定文件系统格式化时自动设置。如果您的设备没有导出以上建议，或者您想要更改推荐的设置，那么当使用
    `mkfs`{.literal} 命令格式化设备时，您必须手动指定 geometry。
    指定文件系统地理位置的参数因文件系统而异。
[`外部日志`{.literal}]{.term}
:   日志文件系统记录了在执行操作之前，日志文件中写入操作期间将要进行的更改。这降低了存储设备在系统崩溃或电源故障时损坏的可能性，并加快恢复过程。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
红帽不推荐使用外部日志选项。
:::
元数据密集型工作负载涉及非常频繁的日志更新。较大的日志使用更多的内存，但会降低写入操作的频率。此外，您可以通过将其日志放在专用存储中，使其与主存储快或快于主存储，从而缩短具有元数据密集型工作负载的设备的搜索时间。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
确保外部日志可靠。丢失外部日志设备会导致文件系统损坏。必须在格式时创建外部日志，并在挂载时指定日志设备。
:::
::: itemizedlist
**其它资源**
-   `mkfs(8)和`{.literal} `mount(8)man`{.literal} page
-   [可用文件系统概述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_file_systems/overview-of-available-file-systems_managing-file-systems){.link}
:::
:::
::: section
::: titlepage
# []{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html#available-tuning-options-for-mounting-a-file-system_factors-affecting-i-o-and-file-system-performance}用于挂载文件系统的可用调整选项 {.title}
:::
以下是大多数文件系统可用的选项，可指定为该设备：
::: variablelist
[`访问时间`{.literal}]{.term}
:   每次读取文件时，都会使用发生访问的时间（`一次`{.literal}）更新其元数据。这涉及额外的写入
    I/O。`relatime`{.literal} 是大多数文件系统的默认 `atime`{.literal}
    设置。
    但是，如果更新此元数据非常耗时，并且不需要准确的访问时间数据，您可以使用
    `noatime`{.literal}
    挂载选项挂载文件系统。这会在文件读取时禁用对元数据的更新。它还启用
    `nodiratime`{.literal} 行为，这可在读取目录时禁用对元数据的更新。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
通过使用 `noa time 挂载选项禁用 a`{.literal} time``{=html}
更新可能会破坏依赖它们的应用，例如备份程序。
:::
::: variablelist
[`read-ahead`{.literal}]{.term}
:   `读出行为`{.literal}
    可加快文件访问的速度，方法是：快速获取可能需要的数据并将其加载到页面缓存中，其中的检索速度比磁盘上快。读-ad-head
    值越大，系统预填充数据前面是另一个。
    Red Hat Enterprise Linux
    尝试根据它检测到的文件系统设置适当的读号值。但是，准确检测并不总是被允许。例如，如果存储阵列作为单个
    LUN 向系统显示自己，则系统会检测到单个
    LUN，且不会为阵列设置适当的读-ahead 值。
    涉及大量流传输顺序 I/O 的工作负载通常得益于高读头值。红帽企业 Linux
    提供的与存储相关的调优配置集提高了读头值，与使用 LVM
    条带一样，这些调整并非始终足以满足所有工作负载的需要。
:::
::: itemizedlist
**其它资源**
-   `mount(8)`{.literal}、`xfs(5)`{.literal} 和 `ext4(5)`{.literal} man
    page
:::
:::
::: section
::: titlepage
# []{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html#types-of-discarding-unused-blocks_factors-affecting-i-o-and-file-system-performance}丢弃未使用块的类型 {.title}
:::
对于固态磁盘和精简置备的存储，建议定期丢弃文件系统未使用的块。
以下是丢弃未使用的块的两种方法：
::: variablelist
[`批量丢弃`{.literal}]{.term}
:   这种丢弃是 `fstrim`{.literal}
    命令的一部分。它丢弃文件系统中的所有未使用块，这些块符合管理员指定的标准。Red
    Hat Enterprise Linux 8 支持在支持物理丢弃操作的 XFS 和 ext4
    格式的设备上进行批量丢弃。
[`在线丢弃`{.literal}]{.term}
:   这种丢弃操作在挂载时通过 discard
    选项进行配置，并在用户不干预的情况下实时运行。但是，它只丢弃从已使用到空闲的块。Red
    Hat Enterprise Linux 8 支持在 XFS 和 ext4 格式的设备上进行在线丢弃。
    红帽建议批量丢弃，除非需要在线丢弃才能保持性能，或者在系统工作负载无法使用批量丢弃的情况下。
:::
预分配将磁盘空间标记为分配给文件，而不将任何数据写入该空间。这可用于限制数据碎片和读性能差。Red
Hat Enterprise Linux 8 支持在 XFS、ext4 和 GFS2
文件系统上预分配空间。应用也可通过使用 `fallocate(2)glibc`{.literal}
调用来预分配空间。
::: itemizedlist
**其它资源**
-   `mount(8)和`{.literal} `fallocate(2)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#factors-affecting-i-o-and-file-system-performance_monitoring-and-managing-system-status-and-performance.html#solid-state-disks-tuning-considerations_factors-affecting-i-o-and-file-system-performance}固态磁盘调优注意事项 {.title}
:::
固态磁盘(SSD)使用 NAND 闪存芯片，而不是旋转磁带来存储持久数据。SSD
为整个逻辑块地址范围内的数据提供恒定访问时间，而且不会像其对应人员那样产生可观的搜索成本。它们每
GB 存储空间的成本更高，存储密度也更低，但它们的延迟和吞吐量也比 HDD
更低。
性能通常降级为 SSD