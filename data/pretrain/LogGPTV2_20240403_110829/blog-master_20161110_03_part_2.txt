 55 };  
 56       
 57 //该结构体用来保存与epoll节点关联的多个文件描述符，保存的方式是使用红黑树实现的hash表.  
 58 //至于为什么要保存，下文有详细解释。它与被监听的文件描述符一一对应.  
 59 struct eventpoll {  
 60         /* Protect the this structure access */  
 61         rwlock_t lock;  
 62         //读写锁  
 63          
 64         /*  
 65          * This semaphore is used to ensure that files are not removed  
 66          * while epoll is using them. This is read-held during the event  
 67          * collection loop and it is write-held during the file cleanup  
 68          * path, the epoll file exit code and the ctl operations.  
 69 */  
 70         struct rw_semaphore sem;  
 71         //读写信号量  
 72           
 73         /* Wait queue used by sys_epoll_wait() */  
 74         wait_queue_head_t wq;  
 75         /* Wait queue used by file->poll() */  
 76           
 77         wait_queue_head_t poll_wait;  
 78         /* List of ready file descriptors */  
 79           
 80         struct list_head rdllist;  
 81         //已经完成的操作事件的队列。  
 82           
 83         /* RB-Tree root used to store monitored fd structs */  
 84         struct rb_root rbr;  
 85         //保存epoll监视的文件描述符  
 86 };  
 87   
 88 //这个结构体保存了epoll文件描述符的扩展信息，它被保存在file结构体的private_data  
 89 //中。它与epoll文件节点一一对应。通常一个epoll文件节点对应多个被监视的文件描述符。  
 90 //所以一个eventpoll结构体会对应多个epitem结构体。那么，epoll中的等待事件放在哪里呢？见下面  
 91 /* Wait structure used by the poll hooks */  
 92 struct eppoll_entry {  
 93         /* List header used to link this structure to the "struct epitem" */  
 94         struct list_head llink;  
 95         /* The "base" pointer is set to the container "struct epitem" */  
 96         void *base;  
 97         /*  
 98          * Wait queue item that will be linked to the target file wait  
 99          * queue head.  
100 */  
101         wait_queue_t wait;  
102         /* The wait queue head that linked the "wait" wait queue item */  
103         wait_queue_head_t *whead;  
104 };  
105   
106 //与select/poll的struct poll_table_entry相比，epoll的表示等待队列节点的结  
107 //构体只是稍有不同，与struct poll_table_entry比较一下。  
108 struct poll_table_entry {  
109         struct file * filp;  
110         wait_queue_t wait;  
111         wait_queue_head_t * wait_address;  
112 };  
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")