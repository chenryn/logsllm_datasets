### Rootkits: Ring 0
**Alexandre Borges - Malware and Security Researcher**
**DEFCON 2018 - USA**

---

#### Malicious Driver Rootkits: Ring 0

- **Infection Mechanism:**
  - Infections typically occur at the lowest levels of the device stack, such as SCSI miniport drivers, rather than file system drivers. This makes the infection more efficient.
  - Most monitoring tools today focus on detecting unusual activities at higher layers, making lower-level infections harder to detect.

- **Interception Techniques:**
  - Malware often intercepts read/write operations by manipulating the `MajorFunction` array (e.g., `IRP_MJ_DEVICE_CONTROL` and `IRP_INTERNAL_CONTROL`) within the `DRIVER_OBJECT` structure.
  - Rootkits protect themselves from removal by modifying routines like `IRP_MJ_DEVICE_CONTROL` and hooking disk requests (e.g., `IOCTL_ATA_*` and `IOCTL_SCSI_*`).
  - Another common technique is to hook the `DriverUnload()` routine to prevent the rootkit from being unloaded.

- **Avoiding Detection:**
  - To avoid detection, malware must avoid modifying critical areas protected by Kernel Patch Guard (KPP). One method to identify these areas is using the following command:
    ```shell
    kd> !analyze –show 109
    ```
  - Thanks to Alex Ionescu for this insight.

- **Hidden Filesystems:**
  - Malware often creates hidden filesystems in free sectors to store configuration files. These are accessed via randomly generated device object names during boot.
  - Some ring 0 malware authors are careless, writing malicious drivers that provide access to shared user-mode buffers using `METHOD_NEITHER` without data validation, leading to memory corruption and information leakage.

- **Advanced Communication Techniques:**
  - Modern malware uses Advanced Local Procedure Call (APLC) for communication between user-mode code and kernel drivers, instead of just IOCTL commands.
  - APLC has been used since Windows Vista, notably between `lsass.exe` and the Security Reference Monitor (SRM). Many analysts are not familiar with this approach.
  - Malware does not target a specific driver for injection but randomly selects one by parsing structures like `_KLDR_DATA_TABLE_ENTRY`.

- **Hooking Filesystem Drivers:**
  - Hooking filesystem driver access is a common alternative:
    - `IoCreateFile()` gets a handle to the filesystem.
    - `ObReferenceObjectByHandle()` retrieves a pointer to the `FILE_OBJECT` represented by the handle.
    - `IoCreateDevice()` creates a `DEVICE_OBJECT` for use by a driver.
    - `IoGetRelatedDeviceObject()` retrieves a pointer to the `DEVICE_OBJECT`.
    - `IoAttachDeviceToDeviceStack()` creates a new `DEVICE_OBJECT` and attaches it to the existing `DEVICE_OBJECT`.

- **System Reboot and Shutdown:**
  - Malware hooks functions like `ZwCreate()` to intercept all opened requests sent to devices.
  - After dropping kernel drivers, malware often forces a system reboot using `ZwRaiseHardError()` with `OptionShutdownSystem` as the 5th parameter.
  - Malware can also use `IoRegisterShutdownNotification()` to register the driver for an `IRP_MJ_SHUTDOWN` notification, ensuring the malicious driver is restored on the next boot if necessary.

- **Memory Allocation:**
  - Malware allocates and marks its pages using `ExAllocatePoolWithTag()` and related functions. This can be detected through memory analysis.

- **APC Injection:**
  - Asynchronous Procedure Calls (APCs) are executed in the thread context. Normal APCs run at `PASSIVE_LEVEL`, while special ones run at `APC_LEVEL`.
  - APC injection allows a program to execute code in a specific thread by attaching to the APC queue and preempting the thread to run malicious code (e.g., `QueueUserAPC()`, `KeInitializeAPC()`, and `KeInsertQueueAPC()`).

---

### Advanced Malwares and Rootkits: Ring -2

- **MBR Rootkits:**
  - Examples include Petya and TLD4 (in bootstrap code), Omasco (partition table), and Mebromi (MBR + BIOS, triggering SMI 0x29/0x2F for erasing SPI flash).

- **VBR Rootkits:**
  - Examples include Rovnix (IPL) and Gapz (BPB - Bios Parameter Block, specific to the filesystem).

- **UEFI Rootkits:**
  - Replace EFI boot loaders and sometimes install custom firmware executables (EFI DXE).

- **Disk Design Overview:**
  - MBR → VBR → IPL → NTFS
  - The Initial Program Loader (IPL) contains 15 sectors of bootstrap code for parsing NTFS and locating the OS boot loader.
  - The VBR contains necessary boot code for loading the OS loader.

- **BPB Modifications:**
  - Modern malware alters the BPB in the VBR to bypass Kernel-Mode Code Signing (KCS).

- **KCS Bypass Techniques:**
  - Disabling KCS by booting in Testing Mode (requires disabling Secure Boot and rebooting).
  - Changing kernel memory (e.g., MBR and/or VBR modifications).
  - Finding flaws in the firmware (requires disabling Secure Boot).

- **Boot Process Components:**
  - **BIOS**: Reads the MBR and hands over execution to the code there.
  - **MBR**: Contains the initial bootloader code.
  - **EFI**: Manages the boot process in UEFI systems.
  - **VBR**: Contains the necessary boot code for loading the OS loader.
  - **Bootmgr**: Switches the processor from real mode to protected mode.
  - **Winload.exe**: Enables protected mode, checks module integrity, loads the Windows kernel, and initializes early launch anti-malware (ELAM).

- **Integrity Checking:**
  - If the integrity checking of `winload.exe` is subverted, malicious code can be injected into the kernel, bypassing integrity control.

- **SMM Basics:**
  - System Management Mode (SMM) is a protected environment where malware can hide.
  - SMM code is copied into SMRAM and locked during initialization.
  - Triggering a System Management Interrupt (SMI) switches to SMM, saving the current state and executing the SMI handler code.
  - The return to normal execution is done using the `RSM` instruction.

---

**Alexandre Borges - Malware and Security Researcher**
**DEFCON 2018 - USA**