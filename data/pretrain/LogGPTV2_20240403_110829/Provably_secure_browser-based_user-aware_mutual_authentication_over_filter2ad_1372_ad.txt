Provably Secure Browser-Based User-Aware Mutual Authentication over TLS
11
Game G0. [Real protocol] This is the real Gamebbma
Proof. (Sketch) In this proof we apply the meanwhile classical proving technique from [34]. We construct
a sequence of games Gi, i = 0, . . . , 21 and denote by Wini the event that adversary A breaks the mutual
authentication of the protocol in game Gi, i.e., wins in the corresponding interaction as described in Deﬁnition
3.
BBMA (κ) played between a simulator ∆ and a PPT adversary
A. ∆ simulates protocol participants according to the natural protocol speciﬁcation and answers all queries of
the adversary.
Game G1. [Same TLS Session Id] In this game the simulation aborts if during the interaction the simulator
on behalf of the browser B chooses the same TLS session id sid in two different protocol sessions. Considering
the probability for the collision of two random choices we obtain
| Pr[Win1] − Pr[Win0]| ≤ q2
2p5(κ)
.
Game G2. [Same Nonces] In this game the simulation aborts if during the interaction the simulator on
behalf of the browser B or server S chooses the same random nonce rC or rS in two different protocol sessions.
Similar to Game G1 we obtain
| Pr[Win2] − Pr[Win1]| ≤ 2q2
2p5(κ)
.
Note that since in our protocol both session ids – sidC and sidS – are computed as concatenation rC|rS this
game rules out the occurrence of different (uncorrupted) client or server instances having the same session id,
i.e., for the honest party each new session is associated with a different session id.
Game G3. [Hash collision of hσC] This game proceeds exactly as Game G2 except that the simulation
aborts if during the interaction ∆ computes the same hash value hσC := Hash(A|B|C) in two different session.
Note that games G1 and G2 ensure that values A and B are fresh in different protocol sessions. Hence, the
simulation aborts in the current game if ∆ computes a hash collision. Due to the collision-resistance of Hash
we obtain
| Pr[Win3] − Pr[Win2]| ≤ qSucccoll
Hash(κ).
This game implies that hσC is fresh for each new session.
Game G4. [Signature Forgery of σC] In this game the simulation aborts if A asks a Send query for the
message C(cid:48)|certB|σC|FC such that σC is a valid signature on some string rC|sid|rS|certS|C(cid:48)|certB which has
never been signed by B before, i.e., if a signature forgery occurs. It is possible to construct a forger algorithm F
which will simulate all protocol participants and answer all queries of A such that if A wins in this game then
F breaks the EUF-CMA security of the applied digital signature scheme (Sig, V er). Thus,
| Pr[Win4] − Pr[Win3]| ≤ qSucceuf−cma
(Sig,V er)(κ).
Note that with this game we have also excluded replay attacks on the protocol messages containing A = rC|sid,
B = A|rS|certS and the part C(cid:48)|certB from the third protocol message in Figure 1.
Game G5. [Same Pre-master Secret] In this game the simulation aborts if during the interaction the sim-
ulator on behalf of the browser B chooses the same pre-master secret kp in two different protocol sessions.
Thus,
| Pr[Win5] − Pr[Win4]| ≤ q2
2p3(κ)
.
Game G6. [Indistinguishability of C’] This game proceeds exactly as Game G5 except for the following
actions of ∆: if ∆ receives a message B = rS|sid|certS as part of the adversarial Send query then ∆ computes
:= EpkS (α) for some additional randomly chosen α (cid:54)= kp. Otherwise, if B = A|rS|cert(cid:48)
C(cid:48)
S with some
S (cid:54)= certS then ∆ computes C(cid:48) := EpkS (kp), i.e., exactly as speciﬁed in the protocol. We denote this
cert(cid:48)
certiﬁcate injection event by InjCert. With the above modiﬁcation we consider in our proof attacks against
users that do not properly verify the validity of server’s certiﬁcate. That is, the protocol proceeds in a natural
way even if the user accepts some forged or invalid certiﬁcate. On the other hand, if the real server’s certiﬁcate is
received (no InjCert occurred) then the purpose of this game is to show that the security of the used asymmetric
12
Sebastian Gajek, Mark Manulis, Ahmad-Reza Sadeghi, and Jörg Schwenk
encryption scheme has an impact on the secrecy of the transmitted pre-master secret kp. Due to the IND-CPA
property of (E,D) and since InjCert can occur only in a session invoked via the Invoke query we obtain
| Pr[Win6] − Pr[Win5]| ≤ qAdvind−cpa
(E,D)
(κ).
Note that the speciﬁcation of TLS prescribes the use of the RSA encryption according to PKCS#1 (a.k.a. RSA-
OAEP) which in turn is known to provide IND-CPA security in ROM (see [33] for the proof).
Game G7. [Pseudo-randomness of km] This game proceeds exactly as Game G6 except that if no InjCert
occurred then the simulator chooses the master secret km at random instead of computing it using the pseudo-
random function PRF. This can be done since the secret seed (given by the pre-master secret kp) used in the
computation is uniformly distributed. Note that if InjCert has occurred then these modiﬁcations are not applied.
Due to the pseudo-randomness of PRF we obtain
| Pr[Win7] − Pr[Win6]| ≤ qAdvprf
PRF (κ).
Game G8. [Pseudo-randomness of k1 and k2] This game proceeds exactly as Game G7 except that if no
InjCert occurred then the simulator chooses k1|k2 at random instead of computing it using PRF. Note that the
master secret km is already uniform if InjCert has not occurred (according to Game G7). On the other hand,
if InjCert has occurred then k1|k2 are computed as speciﬁed in the protocol. Due to the pseudo-randomness of
PRF we obtain
| Pr[Win8] − Pr[Win7]| ≤ qAdvprf
PRF (κ).
Game G9. [Hash collision of h1] This game proceeds exactly as Game G8 except that the simulation aborts
if during the interaction ∆ computes the same hash value h1 := Hash(A|B|C|σC) in two different sessions.
Note that games G1 to G3 ensure that values A, B, and σC are fresh in different protocol sessions. Hence, the
simulation aborts in the current game if ∆ computes a hash collision. Due to the collision-resistance of Hash
we obtain
| Pr[Win9] − Pr[Win8]| ≤ qSucccoll
Hash(κ).
Note, this game implies that h1 is fresh for each new session.
Game G10. [Pseudo-randomness of FC] This game proceeds exactly as Game G9 except that if no InjCert
occurred then the simulator chooses FC at random instead as computing it using PRF. Due to the pseudo-
randomness of PRF we obtain
| Pr[Win10] − Pr[Win9]| ≤ qAdvprf
PRF (κ).
Note, this game implies that FC does not leak any information about km. Note also, this and the previous games
exclude replay and forgery attacks on A, B and C|σC, since the pseudo-random function is instantiated with
fresh values, i.e., h1, and different labels.
Game G11. [Forgery of ηC] This game proceeds exactly as Game G10 except that the simulation aborts if
no InjCert occurred and there has been a Send query containing valid ηC which has not been previously returned
by ∆ on behalf of the browser (i.e., if A outputs a successful forgery for ηC). Thus,
| Pr[Win11] − Pr[Win10]| ≤ qSuccwuf−cma
HMAC
(κ).
Game G12. [Indistinguishability of D] The only difference to Game G11 is that if no InjCert occurred
then the simulator computes D := Enck1(β) using some additional randomly chosen β (cid:54)= FC|ηC; otherwise
D is computed as speciﬁed in the protocol. The purpose of this game is to show that the symmetric encryption
protects secrecy of the transmitted encrypted and authenticated client ﬁnished message FC. Due to the IND-CPA
property of (Enc, Dec) we obtain
| Pr[Win12] − Pr[Win11]| ≤ qAdvind−cpa
(Enc,Dec)(κ).
Note that this and the previous games exclude replay and forgery attacks on D resulting in the acceptance by S.
Game G13. [Hash collision of h2] This game proceeds exactly as Game G12 except that the simulation
aborts if during the interaction ∆ computes the same hash value h2 := Hash(A|B|C|σC|FC) in two different
Provably Secure Browser-Based User-Aware Mutual Authentication over TLS
13
sessions. Since as observed in Game G1 to Game G3 and Game G10 the input of h2 is fresh for each new
session the probability of such collision in this game is given by the collision-resistance of Hash, i.e.,
| Pr[Win13] − Pr[Win12]| ≤ qSucccoll
Hash(κ).
Game G14. [Pseudo-randomness of FS] This game proceeds exactly as Game G13 except that if no InjCert
occurred then the simulator chooses FS at random instead as computing it using PRF. Due to the pseudo-
randomness of PRF we obtain
| Pr[Win14] − Pr[Win13]| ≤ qAdvprf
PRF (κ).
Note, this game implies that FS does not leak any information about km. Note also, this and the previous games
exclude replay and forgery attacks on A, B, C|σC, and FS, since the pseudo-random function is instantiated
with fresh values, i.e., h2, and different labels.
Game G15. [Forgery of ηS] This game proceeds exactly as Game G14 except that the simulation aborts
if no InjCert occurred and there has been a Send query containing valid ηS which has not been previously
returned by ∆ on behalf of the server (i.e., A outputs a successful forgery for ηC), thus
| Pr[Win15] − Pr[Win14]| ≤ qSuccwuf−cma
HMAC
(κ).
Game G16. [Indistinguishability of E] The only difference to Game G15 is that if no InjCert occurred then
the simulator computes D := Enck1(γ) using some additional randomly chosen γ (cid:54)= FS|ηS; otherwise E
is computed as speciﬁed in the protocol. The purpose of this game is to show that the symmetric encryption
protects secrecy of the transmitted encrypted and authenticated server ﬁnished message FS. Due to the IND-
CPA property of (Enc, Dec) we obtain
| Pr[Win16] − Pr[Win15]| ≤ qAdvind−cpa
(Enc,Dec)(κ).
Note, this and the previous games exclude replay and forgery attacks on E resulting in the acceptance by B.
Game G17. [Forgery of µS] This game proceeds exactly as Game G16 except that the simulation aborts
if no InjCert occurred and there has been a Send query containing valid µS which has not been previously
returned by ∆ on behalf of the server (i.e., if A outputs a successful forgery for µS). Thus,
| Pr[Win17] − Pr[Win16]| ≤ qSuccwuf−cma
HMAC
(κ).
Game G18. [Indistinguishability of F ] The only difference to Game G17 is that if no InjCert occurred then
the simulator computes F := Enck1(δ) using some additional randomly chosen δ (cid:54)= (w|µS); otherwise F
is computed as speciﬁed in the protocol. The purpose of this game is to show that the symmetric encryption
protects secrecy of the transmitted encrypted authenticator w. Due to the IND-CPA property of (Enc, Dec) we
obtain
| Pr[Win18] − Pr[Win17]| ≤ qAdvind−cpa
(Enc,Dec)(κ).
Note, this and the previous games exclude replay and forgery attacks on F resulting in the acceptance by B.
Game G19. [Forgery of µC] This game proceeds exactly as Game G18 except that the simulation aborts
if no InjCert occurred and there has been a Send query containing valid µC which has not been previously
returned by ∆ on behalf of the client (i.e., if A was able to output a successful forgery for µC). Thus,
| Pr[Win19] − Pr[Win18]| ≤ qSuccwuf−cma
HMAC
(κ).
Game G20. [Indistinguishability of G] The only difference to Game G19 is that if no InjCert occurred then
the simulator computes G := Enck1() using some additional randomly chosen  (cid:54)= pw|µC; otherwise G is
computed as speciﬁed in the protocol. The purpose of this game is to show that if no certiﬁcate injection took
place then A does not obtain any information about the encrypted password pw. Due to the IND-CPA property
of (Enc, Dec) we get
| Pr[Win20] − Pr[Win19]| ≤ qAdvind−cpa
(Enc,Dec)(p3(κ)).
Note, this and the previous games exclude replay and forgery attacks on G resulting in the acceptance by S.
14
Sebastian Gajek, Mark Manulis, Ahmad-Reza Sadeghi, and Jörg Schwenk
Game G21. [Random Guess of the Authenticator w] This game proceeds exactly as Game G20 except
that the simulation aborts if during the interaction there is a client instance which accepts but there exists no
partnered server instance, i.e., the ﬁrst condition for the adversarial success from Deﬁnition 3 is satisﬁed. Note