Other than the initialization step, the rest of the
transformation is very simple: replace the occurrence of
each static variable to use its associated pointer variable,
i.e., replace occurrence of v by (*v ptr).
The data segment might contain other sections in-
cluded by the static linker. Of these sections, .ctors,
.dtors and .got contain code pointers. Therefore we
need to protect these sections, or otherwise attackers can
corrupt them to hijack program control. The sections
.dtors and .ctors, which contain global constructors
and destructors, can be put into a read-only segment by
changing a linker script option.
Section .got contains GOT, whose randomization
was discussed in the previous section in the context of
randomization of PLT (See Section 2.6).
All of the v ptr variables are write-protected by
initialization code that is introduced into main. This
code ﬁrst ﬁgures out the boundaries of the data segment,
and then uses the mprotect system call to apply the
write protection.
USENIX Association
14th USENIX Security Symposium
261
Implementation of Code Transformations
3.2
Code transformation mainly involves converting direct
function calls into indirect ones. We store function
pointers in an array, and dereference elements from this
array to make the function calls. The details can be un-
derstood with an example. Consider a source ﬁle con-
taining following piece of code:
char *f();
void g(int a) { ... }
void h() {
char *str;
char *(*fptr)();
...
fptr = &f;
str = (*fptr)();
g(10);
}
The above code will be transformed as follows:
void *const func_ptrs[] =
{M1, M2, M3, M4, (void *)&f, (void *)&g,
M5, M6, M7, M8};
char *f();
void g(int a) { ... }
void h() {
char *str;
char *(*fptr)();
...
fptr = (char *(*)())func_ptrs[4];
str = (*fptr)();
(*((void (*)(int)) (func_ptrs[5])))(10);
}
The function pointer array in each source ﬁle con-
tains locations of functions used in that ﬁle. Due to the
const modiﬁer, the array becomes part of the .rodata
section in the code segment of the corresponding ELF
executable, and is hence write-protected.
The func ptrs array is bounded on each end with
a distinctive, 128-bit pattern that is recorded in the
marker variables M1 through M8. This pattern is assumed
to be unique in the binary, and can be easily identi-
ﬁed when scanning the binary. These markers simplify
binary transformations, as we no longer need to disas-
semble the binary for the purpose of function-reordering
transformation. Instead, the original locations of func-
tions can be identiﬁed from the contents of this array.
By sorting the array elements, we can identify the be-
ginning as well as the end of each function. (The end
of a function is assumed to just precede the beginning
of the next function in the sorted array.) Now, the bi-
nary transformation simply needs to randomly reorder
function bodies, and change the content of the func ptr
array to point to these new locations. We adapted the
LEEL binary-editing tool [33] for performing this code
transformation.
In our current implementation, we do not reorder
the same effect is
functions at load time.
Instead,
achieved by modifying the executable periodically.
This
Implementation of Stack Transformations
3.3
In our current implementation, the base of the stack
is randomized by decrementing a large number from
is done in the
the stack pointer value.
libc start main routine, and hence happens before
the invocation of main. Other stack-related transforma-
tions are implemented using a source-code transforma-
tion. Transformation of buffer-type local variables is
performed in a manner similar to that of static variables.
The only difference is that their memory is allocated on
the shadow stack.
Introduction of random-sized gaps between stack
frames is performed using the alloca function, which
is converted into inline assembly code by gcc. There
are two choices on where this function is invoked: (a)
immediately before calling a function, (b) immediately
after calling a function, i.e., at the beginning of the called
function. Note that option (b) is weaker than option (a)
in a case where a function f is called repeatedly within
a loop. With (a), the beginning of the stack frame will
differ for each call of f. With (b), all calls to f made
within this loop will have the same base address. Never-
theless, our implementation uses option (b), as it works
better with some of the compiler optimizations.
Handling setjmp/longjmp. The implementation of
shadow stack needs to consider subroutines such as
setjmp() and longjmp(). A call to setjmp()
stores the program context which mainly includes the
stack pointer, the frame pointer and the program counter.
A subsequent call to longjmp() restores the program
context and the control is transferred to the location of
the setjmp() call. To reﬂect the change in the pro-
gram context, the shadow stack needs to be modiﬁed.
Speciﬁcally, the top of shadow stack needs to be ad-
justed to reﬂect the longjmp. This is accomplished by
storing the top of the shadow stack as a local variable
in the regular stack and restoring it at the point of func-
tion return. As a result, the top of shadow stack will be
properly positioned before the ﬁrst allocation following
the longjmp. (Note that we do not need to change the
implementation of setjmp or longjmp.)
Implementation of Heap Transformations.
3.4
Heap-related transformations may have to be imple-
mented differently, depending on how the underlying
heap is implemented. For instance, suppose that a heap
implementation allocates as much as twice the requested
memory size. In this case, randomly increasing a request
by 30% will not have much effect on many memory al-
location requests. Thus, some aspects of randomization
have to be matched to the underlying heap implementa-
262
14th USENIX Security Symposium
USENIX Association
Program Workload
Apache-1.3.33 Webstone 2.5, client connected over 100Mbps network.
sshd-OpenSSH 3.5p1
wu-ftpd-2.8.0
bison-1.35
grep-2.0
bc-1.06
tar-1.12 Create a tar ﬁle of a directory of size 141MB.
Run a set of commands from ssh client.
Run a set of different ftp commands.
Parse C++ grammar ﬁle.
Search a pattern in ﬁles of combined size 108MB.
Find factorial of 600.
patch-2.5.4 Apply a 2MB patch-ﬁle on a 9MB ﬁle.
enscript-1.6.4 Convert a 5.5MB text ﬁle into a postscript ﬁle.
ctags-5.4 Generate tag ﬁle of 6280 C source code ﬁles with total 17511 lines.
gzip-1.2.4 Compress a 12 MB ﬁle.
Figure 1: Test programs and workloads
tion.
For randomizing the base of heap, we could make a
dummy malloc() call at the beginning of program exe-
cution, requesting a big chunk of memory. However, this
would not work for malloc() as implemented in GNU
libc: for any chunk larger than 4K, GNU malloc re-
turns a separate memory region created using the mmap
system call, and hence this request doesn’t have any im-
pact on the locations returned by subsequent malloc’s.
We note that malloc uses the brk system call to
allocate heap memory. This call simply changes the end
of the data segment. Subsequent requests to malloc
are allocated from the newly extended region of mem-
ory. In our implementation, a call to brk is made be-
fore any malloc request is processed. As a result, lo-
cations returned by subsequent malloc requests will be
changed by the amount of memory requested by the pre-
vious brk. The length of the extension is a random num-
ber between 0 and 108. The extended memory is write-
protected using the mprotect system call.
In addition, each malloc request is increased by a
random factor as described earlier. This change is per-
formed in a wrapper to malloc that is incorporated in
the modiﬁed C library used by our implementation.
Implementation of DLL transformations
3.5
In our current implementation, DLL transformations are
limited to changing their base addresses. Other transfor-
mations aimed at relative address randomization are not
performed currently.
Base address randomization is performed at load-
time and link-time. Load-time randomization has been
implemented by modifying the dynamic linker ld.so
so that it ignores the “preferred address” speciﬁed in a
DLL, and maps it at a random location. Note that there
is a boot-strapping problem with randomizing ld.so it-
self. To handle this problem, our implementation modi-
ﬁes the preferred location of ld.so, which is honored by
the operating system loader. This approach negatively
impacts the ability to share ld.so among executables,
but this does not seem to pose a signiﬁcant performance
problem due to the relatively small size and infrequent
use (except during process initialization) of this library.
Link-time transformation is used to address the lim-
ited range of randomization that can be achieved at load-
time. In particular, the load-time addresses are limited
to be multiples of page size. To provide ﬁner granu-
larity changes to the base address, our implementation
uses the “-r” option of ld to generate a relocatable object
ﬁle for the DLL. Periodically, the relocatable version of
the DLL is linked with random-sized (between 0 and 4K
bytes) junk code to produce a new DLL that is used by
all programs. We envision that this relinking step will be
performed periodically, or perhaps once on every system
restart.
Note that this approach completely avoids distri-
bution of source code and (expensive) recompilation of
libraries. Moreover, it allows sharing of library code
across multiple processes.
3.6 Other Implementation Issues
Random number generation. Across all the transfor-
mations, code for generation of random numbers is re-
quired to randomize either the base addresses or the rel-
ative distances. For efﬁciency, we use a pseudo-random
numbers rather than cryptographically random numbers.
The pseudo-random number generator is seeded with a
real random number read from /dev/urandom.
Debugging support. Our transformation provides sup-
port for some of the most commonly used debugging
features such as printing a stack trace. Note that no
transformations are made to normal (i.e., non-buffer)
stack variables. Symbol table information is appro-
priately updated after code rewriting transformations.
Moreover, conventions regarding stack contents are pre-
served. These factors enable off-the-shelf debuggers to
produce stack traces on transformed executables.
USENIX Association
14th USENIX Security Symposium
263
Degradation (%)
#clients
Connection
Response
Rate
Time
2-clients
16-clients
30-clients
1
0
0
0
0
1
Figure 2: Performance overhead for Apache.
Unfortunately,
it isn’t easy to smoothly handle
some aspects of transformation for debugging purposes.
Speciﬁcally, note that accesses to global variables (and
buffer-type local variables) are made using an additional
level of indirection in the transformed code. A person
attempting to debug a transformed program needs to be
aware of this. In particular, if a line in the source code
accesses a variable v, he should know that he needs to
examine (*v ptr) to get the contents of v in the un-
transformed program. Although this may seem to be a
burden, we point out that our randomizing transforma-
tion is meant to be used only in the ﬁnal versions of code
that are shipped, and not in debugging versions.
4 Performance Results
We have collected data on the performance impact of the
randomizing transformations. The transformations were
divided into the following categories, and their impact
studied separately.
• Stack:
transformations which randomize the stack
base, move buffer-type variables into the shadow
stack, and introduce gaps between stack frames.
• Static data: transformations which randomize loca-
tions of static data.
• Code: transformations which reorder functions.
• All: all of the above, plus randomizing transforma-
tions on heap and DLLs.
Figure 1 shows the test programs and their work-
loads. Figure 3 shows performance overheads due to
each of the above categories of transformations. The
original programs and the transformed programs were
compiled using gcc version 3.2.2 with -O2 optimiza-
tion, and executed on a desktop running Red Hat Linux
9.0 with 1.7GHz Pentium IV processor, and 512MB
RAM. Average execution (system + user) time was com-
puted over 10 runs.
For Apache server, we studied its performance sep-
arately after applying all the transformations. To mea-
sure performance of the Apache server accurately, heavy
trafﬁc from clients is required. We generated this using
WebStone [30], a standard web server benchmark. We
used version 2.5 of this benchmark, and ran it on a sep-
arate computer that was connected to the server through
Program
Orig.
CPU
time
grep
0.33
tar
1.06
patch
0.39
wu-ftpd
0.98
bc
5.33
enscript
1.44
bison
0.65
gzip
2.32
sshd
3.77
ctags
9.46
Avg. Overhead
% Overheads
Static
Code
Stack
All
0
2
2
2
7
8
4
6
6
10
5
0
2
0
0
1
3
0
9
10
3
3
0
1
0
6
2
0
7
4
2
8
3
2
4
4