    4.  Sends the encrypted RSA public key (Stage 1) to the Empire C2
> ![](media/image428.jpeg)
5.  Empire C2 receives the encrypted RSA public key and decrypts it
    > using the staging key to save the key for further communication.
6.  Empire C2 now does the following things:
> Generates an AES session key for agent\'s session management. Gets its
> Epoch time.
>
> Encrypts (Epoch time + session key) with RSA public key.
>
> Sends the encrypted Epoch time and session key to the target server:
>
> ![](media/image429.jpeg)
7.  The target server receives the encrypted values and decrypts them
    > using the RSA private key.
8.  The target server gathers basic system information, encrypts this
    > information using the newly received AES session key, and sends it
    > back to the Empire C2 (Stage 2).
9.  Empire C2 decrypts the information received using the AES session
    > key and sends the patched agent.ps1 with the key, delay, and so
    > on, to the target server. (This can be found in Empire\'s
    > data/agent/ directory.)
10. The agent starts its beaconing behavior. (The agent will call back
    > to Empire C2 after a few seconds.)
When the stager is executed onto the target server, the stager will call
back to the Empire C2, requesting Stage 1 and Stage 2:
> ![](media/image430.jpeg)
>
> When Stage 2 is complete, the agent will begin the **beaconing
> process**.
# Phase 4 -- Acquiring Agent
> When the stager is executed on the target system, the Agent will
> connect back to the Empire Listener. We can view the active agents
> using the agents command as follows:
>
> ![](media/image431.jpeg)
A live agent will give us the following information when the preceding
command is executed:
> Name of the agent (Name)
>
> Launcher used by the stager (La) - PowerShell or Python Internal IP
>
> Machine name
>
> Username with the domain Process
>
> **Process ID** (**PID**) Delay with jitters Last seen
>
> Instead of using the agents command, we can also use the list command
> to see all of the available agents. However, this will only work if we
> are in the agent\'s menu (Empire: agents):
>
> ![](media/image432.jpeg)
>
> ![](media/image433.jpeg)To view more options in the agents menu, we
> can execute the help command, or just a ?:
>
> We can also rename the agent name according to our needs by executing
> the
>
> rename command as follows:
>
> ![](media/image434.jpeg)**rename \ \**
>
> To discover more about the agent, we can use the interact command to
> interact with an agent, and then use the info command to get more
> information regarding the chosen agent:
>
> ![](media/image435.jpeg)
We now have an active agent connected to our Empire C2, just like a
**Meterpreter session opened** in Metasploit. We can now interact with
the agent for further post exploitation.
# Phase 5 -- Post Module Operations
> Once the agent is connected back to the Empire C2, we can start with
> our post exploitation process using the Empire modules. The post
> exploitation modules can be categorized into two parts:
>
> PowerShell-based post modules Python-based post modules
Let\'s see the following table to get more clarity about the post
modules in Empire and how they are further categorized:
+-----------------------------------+-------------------+-------------+
| > **Module category**             | > **PowerShell**  | >           |
|                                   |                   |  **Python** |
+===================================+===================+=============+
| > **Code Execution**              | > **√**           | > ×         |
+-----------------------------------+-------------------+-------------+
| > **Collection**                  | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Credentials**                 | > **√**           | > ×         |
+-----------------------------------+-------------------+-------------+
| > **Exfiltration**                | > **√**           | > ×         |
+-----------------------------------+-------------------+-------------+
| > **Exploitation**                | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Lateral Movement**            | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Persistence**                 | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Management**                  | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Privilege Escalation**        | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Situational Awareness**       | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Trollsploit**                 | > **√**           | > √         |
+-----------------------------------+-------------------+-------------+
| > **Recon**                       | > **√**           | > ×         |
+-----------------------------------+-------------------+-------------+
> Every module category mentioned in the preceding table has sub-modules
> in it.
For example, code execution has the following modules available in
Empire:
> invoke_dllinjection will inject a DLL into the process ID of your
> choosing invoke_ntsd uses NT Symbolic Debugger to execute Empire
> launcher code invoke_shellcode will inject shellcode into the process
> ID of your choosing, or within the context of the running PowerShell
> process
>
> invoke_metasploitpayload will spawn a new, hidden PowerShell window
> that downloads and executes a Metasploit payload
>
> invoke_reflectivepeinjection will reflectively load a DLL/EXE into the
> PowerShell process or reflectively load a DLL into a remote process
> invoke_shellcodemsil will execute shellcode within the context of the
> running PowerShell process, without making any Win32 function calls
>
> Now let\'s explore some post exploitation scenarios for different
> operating systems.
# Empire post exploitation for Windows
> Assuming that we have already got an agent connected to us, we will
> now perform post exploitation on Windows OS when the agent\'s security
> context is low. As demonstrated in the following screenshot, we have
> got an agent which has low privileges (high_integrity: 0):
>
> ![](media/image436.jpeg)
>
> We can elevate the privileges using the privilege escalation modules
> in Empire. For this scenario, we will be using the bypassuac_eventvwr
> module.
>
> To execute this module, use the bypassuac command and the listener as
> the argument passed to bypassuac_eventvwr:
>
> ![](media/image437.jpeg)
>
> The same thing can be achieved using the following commands:
>
> ![](media/image438.jpeg)**usemodule privesc/bypassuac_eventvwr**
>
> This will bring us to the bypassuac_eventvwr menu.
>
> Let\'s execute the info command to see the options available in this
> module:
>
> ![](media/image439.jpeg)
The Listener field is required here, so let\'s set up the listener using
the following command:
> **set Listener http**
>
> ![](media/image440.jpeg)
>
> A new agent will be connected back to the Empire C2 with a higher
> security context once the module is successfully executed:
>
> ![](media/image441.jpeg)
>
> The \* in front of the username means this is a high integrity agent
> (also known as a **privileged agent**). Empire also has a very
> interesting feature named
>
> workinghours. This will Get or Set an agent\'s working hours
> (9:00-17:00). Execute the following command to use this feature:
>
> ![](media/image442.jpeg)**workinghours**
The agent will now only connect back to us according to the target
server\'s working hours. Because of this, it is better to stay hidden
for longer.
Let\'s interact with a high integrity agent for further post
exploitation:
> ![](media/image443.jpeg)
>
> The agent connected back with the Empire C2 using the PowerShell
> process. This also means that any user on the target server can detect
> the powershell.exe process in their task manager. To stay hidden,
> it\'s always a good idea to migrate to another process. In Metasploit,
> this can be achieved by using the migrate command but unfortunately,
> Empire doesn\'t have a direct way to perform process migration.
> However, Empire does have process injection supported, so let\'s use
> process injection as a workaround for process migration.
>
> Let\'s first list all the processes on the target server using the ps
> command:
>
> ![](media/image444.jpeg)
>
> Injecting in explorer.exe with PID 1048:
>
> ![](media/image445.jpeg)
Injecting into another process using psinject:
> ![](media/image446.jpeg)
>
> At this point, the new agent connects back to the listener:
>
> ![](media/image447.jpeg)
Let\'s check the newly connected agent to confirm whether or not the
process injection worked:
> ![](media/image448.jpeg)
>
> We can look for the saved credentials in Empire using the creds
> command:
>
> ![](media/image449.jpeg)
>
> We don\'t have any credentials saved for now, so let\'s run mimikatz
> to gather credentials. By default, Empire uses the mimikatz
> logonpasswords module.
>
> To execute Mimikatz, run the mimikatz command as follows:
>
> ![](media/image450.jpeg)
Upon successful execution, the plain text password is retrieved and
stored:
> ![](media/image451.jpeg)
>
> Now let\'s check the stored credentials again:
>
> ![](media/image452.jpeg)
>
> The credentials are now stored. These credentials can further be used
> in post exploitation.
# Empire post exploitation for Linux
> Empire also supports Python-based modules. This means that any OS
> which has Python installed on them is supported as well. Let\'s take a
> look at how we can perform post exploitation on Linux using Empire.
>
> To begin with, let\'s create a one-liner stager for Linux. This can be
> achieved by using a Bash launcher. To use the Bash launcher, execute
> the usestager multi/bash command and info command to view its options:
>
> ![](media/image453.jpeg)
>
> Let\'s follow the usual process. Start by setting the listener and
> generating the one-liner stager using the execute command:
>
> ![](media/image454.jpeg)
>
> Once the stager is executed on the target Linux server, the staging
> process will begin:
>
> ![](media/image455.jpeg)
A new agent is connected back to the Empire C2:
> ![](media/image456.jpeg)
Let\'s interact with the agent and get the basic system information
using the
> sysinfo command:
>
> ![](media/image457.jpeg)
>
> From the agent list, we can see that the agent is not a high integrity
> user. We need to perform privilege escalation here. Empire has another
> privilege escalation module based on Python linux_priv_checker. This
> module will do a full system enumeration to find common privilege
> escalation vectors. To use the module, execute the following command:
>
> **usemodule privesc/linux/linux_priv_checker**
>
> ![](media/image458.jpeg)
Once the module is executed, the enumeration begins:
> ![](media/image459.jpeg)
As shown in the preceding screenshot, we found a kernel exploit here.
Consequently, we uploaded the payload and executed our launcher in the
new security context. The result of this is that we are now root!
> ![](media/image460.jpeg)
>
> The next thing to acquire is the passwords. Unlike Windows, Mimikatz
> doesn\'t run on Linux. Instead, Empire supports another module called
> hashdump. (Empire also supports a module known as mimipenguin which
> can extract plain-text passwords. For more information, refer to:
> [https://github.com/huntergregal/mimipengui n). This extracts the
> /etc/passwd and /etc/shadow file and then unshadows the
> result.](https://github.com/huntergregal/mimipenguin) This module can
> be executed using the following command:
>
> **usemodule collection/linux/hashdump\***
>
> ![](media/image60.png)*The \* (asterisk) in the module name means that
> the module will only run with a higher security context (higher
> privilege).*
>
> Upon execution of the module, the unshadowed result is displayed as
> follows:
>
> ![](media/image462.jpeg)
>
> There are multiple collection modules which can be used for further
> information gathering and internal network exploitation.
# Empire post exploitation for OSX
> Next in line is the post exploitation of macOS using Empire. There are
> some
>
> cool modules for OS X, and to see their magic, let\'s first get our
> stager ready. For stager creation, we can either choose the default
> launcher multi/launcher or the OSX launcher osx/launcher. The only
> difference between these two launchers is their available options.
> Unlike multi launcher, OSX launcher doesn\'t have proxy and
> obfuscation support. Let\'s execute the following command in order to
> use OSX launcher:
>
> ![](media/image463.jpeg)**usestager osx/launcher info**
>
> Let\'s add the listener using the set Listener Empire command:
>
> ![](media/image464.jpeg)
>
> A Python one-liner command will be generated, and once this one-liner
> is executed on the target server, we\'ll get the agent connection:
>
> ![](media/image465.jpeg)
Now let\'s confirm the agent:
> ![](media/image466.jpeg)
Now that we have the agent, let\'s interact with the agent and execute
the sysinfo
command to retrieve system information:
> ![](media/image467.jpeg)
The collection module has many options to choose from. In this case,
let\'s choose the prompt module:
> ![](media/image468.jpeg)
The prompt module will launch a specified application with a prompt for
credentials. By default, this module will open in the Mac App Store and
prompt the user to provide their credentials. Execute the following
command to use the prompt module:
> **usemodule osx/collection/prompt info**
>
> ![](media/image469.jpeg)
Use the execute command to start the module. Note: this module will ask
for credentials from the user which means that this is not a stealth
module; that is, it is not opsec-safe. If the user finds this odd, you
could get caught:
> ![](media/image470.jpeg)
>
> Upon successful execution, the App Store will open on the user\'s
> screen and a prompt for a password will be displayed:
>
> ![](media/image471.jpeg)
>
> Once the user inputs their credentials, they will be phished back to
> Empire C2:
>
> ![](media/image472.jpeg)
>
> There\'s another module which lets us copy the content from the target
> system\'s clipboard. Let\'s execute the following command to run this
> module:
>
> **usemodule collection/osx/clipboard info**
>
> ![](media/image473.jpeg)
>
> Upon successful execution, we\'ll be able to see the content that is
> saved in the clipboard.
>
> ![](media/image474.jpeg)
>
> We can also use the screenshot module to take a screenshot of the