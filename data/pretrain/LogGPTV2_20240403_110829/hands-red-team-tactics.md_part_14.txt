# Phase 4: Establishing the Initial Connection

1. The agent sends the encrypted RSA public key (Stage 1) to the Empire C2.
   > ![](media/image428.jpeg)

2. The Empire C2 receives and decrypts the encrypted RSA public key using the staging key, saving it for future communication.

3. The Empire C2 performs the following actions:
   - Generates an AES session key for managing the agent's session.
   - Retrieves the current Epoch time.
   - Encrypts the Epoch time and the session key with the RSA public key.
   - Sends the encrypted Epoch time and session key to the target server.
   > ![](media/image429.jpeg)

4. The target server receives the encrypted values and decrypts them using the RSA private key.

5. The target server collects basic system information, encrypts this data with the newly received AES session key, and sends it back to the Empire C2 (Stage 2).

6. The Empire C2 decrypts the received information using the AES session key and sends the patched `agent.ps1` file, along with the key, delay, and other necessary parameters, to the target server. (This file can be found in the `Empire/data/agent/` directory.)

7. The agent initiates its beaconing behavior, periodically calling back to the Empire C2 after a specified interval.

When the stager is executed on the target server, it will call back to the Empire C2, requesting both Stage 1 and Stage 2:
> ![](media/image430.jpeg)
Once Stage 2 is complete, the agent will begin the **beaconing process**.

## Acquiring the Agent

Upon executing the stager on the target system, the agent will connect back to the Empire Listener. You can view the active agents using the `agents` command as follows:
> ![](media/image431.jpeg)

A live agent will provide the following information:
- **Name**: The name of the agent.
- **Launcher**: The launcher used by the stager (PowerShell or Python).
- **Internal IP**: The internal IP address of the machine.
- **Machine Name**: The name of the machine.
- **Username**: The username with the domain.
- **Process ID (PID)**: The process ID of the agent.
- **Delay with Jitters**: The delay and jitter settings.
- **Last Seen**: The last time the agent was seen.

Alternatively, you can use the `list` command to see all available agents, but this only works if you are in the agent's menu (`Empire: agents`):
> ![](media/image432.jpeg)

To view more options in the agents menu, you can execute the `help` command or simply type `?`:
> ![](media/image433.jpeg)

You can also rename the agent by executing the `rename` command:
> ![](media/image434.jpeg)

To gather more details about the agent, use the `interact` command to interact with the agent, followed by the `info` command to get additional information:
> ![](media/image435.jpeg)

Now that we have an active agent connected to our Empire C2, similar to a **Meterpreter session** in Metasploit, we can proceed with further post-exploitation activities.

# Phase 5: Post-Exploitation Operations

Once the agent is connected back to the Empire C2, we can start the post-exploitation process using Empire modules. These modules can be categorized into two types:

- **PowerShell-based post modules**
- **Python-based post modules**

The following table provides a clearer view of the post-exploitation modules in Empire and their categorization:

| **Module Category**       | **PowerShell** | **Python** |
|---------------------------|----------------|------------|
| **Code Execution**        | √              | ×          |
| **Collection**            | √              | √          |
| **Credentials**           | √              | ×          |
| **Exfiltration**          | √              | ×          |
| **Exploitation**          | √              | √          |
| **Lateral Movement**      | √              | √          |
| **Persistence**           | √              | √          |
| **Management**            | √              | √          |
| **Privilege Escalation**  | √              | √          |
| **Situational Awareness** | √              | √          |
| **Trollsploit**           | √              | √          |
| **Recon**                 | √              | ×          |

Each module category has sub-modules. For example, the **Code Execution** category includes the following modules:
- `invoke_dllinjection`: Injects a DLL into the specified process ID.
- `invoke_ntsd`: Uses NT Symbolic Debugger to execute Empire launcher code.
- `invoke_shellcode`: Injects shellcode into the specified process ID or within the running PowerShell process.
- `invoke_metasploitpayload`: Spawns a new, hidden PowerShell window to download and execute a Metasploit payload.
- `invoke_reflectivepeinjection`: Reflectively loads a DLL/EXE into the PowerShell process or a remote process.
- `invoke_shellcodemsil`: Executes shellcode within the running PowerShell process without making any Win32 function calls.

Let's explore some post-exploitation scenarios for different operating systems.

## Empire Post-Exploitation for Windows

Assuming we have an agent connected with low privileges, we can elevate these privileges using the privilege escalation modules in Empire. For this scenario, we will use the `bypassuac_eventvwr` module.

To execute this module, use the `usemodule privesc/bypassuac_eventvwr` command and set the listener:
> ![](media/image437.jpeg)

Execute the `info` command to see the available options in the module:
> ![](media/image439.jpeg)

Set the listener using the `set Listener http` command:
> ![](media/image440.jpeg)

A new agent will connect back to the Empire C2 with higher privileges once the module is successfully executed:
> ![](media/image441.jpeg)

The `*` in front of the username indicates a high-integrity (privileged) agent. Empire also features a `workinghours` option, which sets the agent's working hours (e.g., 9:00-17:00). Use the `workinghours` command to configure this:
> ![](media/image442.jpeg)

Interact with the high-integrity agent for further post-exploitation:
> ![](media/image443.jpeg)

To stay hidden, migrate the agent to another process. First, list all processes on the target server using the `ps` command:
> ![](media/image444.jpeg)

Inject the agent into `explorer.exe` with PID 1048 using the `psinject` command:
> ![](media/image445.jpeg)

Confirm the process injection by checking the newly connected agent:
> ![](media/image448.jpeg)

Retrieve saved credentials using the `creds` command:
> ![](media/image449.jpeg)

If no credentials are saved, run Mimikatz to gather them. Execute the `mimikatz` command:
> ![](media/image450.jpeg)

Upon successful execution, the plain text password is retrieved and stored:
> ![](media/image451.jpeg)

Check the stored credentials again:
> ![](media/image452.jpeg)

These credentials can be used for further post-exploitation.

## Empire Post-Exploitation for Linux

Empire supports Python-based modules, making it compatible with any OS that has Python installed. Let's perform post-exploitation on a Linux system.

Create a one-liner stager for Linux using the Bash launcher:
> ![](media/image453.jpeg)

Set the listener and generate the one-liner stager using the `execute` command:
> ![](media/image454.jpeg)

Once the stager is executed on the target Linux server, the staging process will begin, and a new agent will connect back to the Empire C2:
> ![](media/image456.jpeg)

Interact with the agent and retrieve system information using the `sysinfo` command:
> ![](media/image457.jpeg)

Perform privilege escalation using the `privesc/linux/linux_priv_checker` module:
> ![](media/image458.jpeg)

Execute the module to begin the enumeration:
> ![](media/image459.jpeg)

If a kernel exploit is found, upload the payload and execute the launcher in the new security context, resulting in root access:
> ![](media/image460.jpeg)

Extract passwords using the `hashdump` module:
> ![](media/image462.jpeg)

There are multiple collection modules for further information gathering and internal network exploitation.

## Empire Post-Exploitation for macOS

For macOS post-exploitation, use the `osx/launcher` stager. Execute the following command to use the stager:
> ![](media/image463.jpeg)

Add the listener using the `set Listener Empire` command:
> ![](media/image464.jpeg)

Generate a Python one-liner command and execute it on the target server to establish the agent connection:
> ![](media/image465.jpeg)

Confirm the agent connection:
> ![](media/image466.jpeg)

Interact with the agent and retrieve system information using the `sysinfo` command:
> ![](media/image467.jpeg)

Use the `prompt` module to launch a specified application and prompt the user for credentials:
> ![](media/image469.jpeg)

Execute the `prompt` module to open the Mac App Store and prompt the user for their credentials:
> ![](media/image470.jpeg)

Once the user inputs their credentials, they will be phished back to the Empire C2:
> ![](media/image472.jpeg)

Use the `clipboard` module to copy content from the target system's clipboard:
> ![](media/image473.jpeg)

Upon successful execution, view the content saved in the clipboard:
> ![](media/image474.jpeg)

You can also use the `screenshot` module to take a screenshot of the target system.