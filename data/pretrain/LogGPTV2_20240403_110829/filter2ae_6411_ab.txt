    s_string("1")
    # end the request with the mandatory static sequence.
    s_static("\r\n\r\n")
    # close the open block, the name argument is optional here.
    s_block_end("body")
该脚本首先导入Sulley的所有组件。接下来，初始化新请求并命名为“HTTP
BASIC”。稍后可以引用此名称以直接访问此请求。接下来，使用名称“verbs”和可能的字符串值“GET”，“HEAD”，“POST”和“TRACE”定义group。使用名称“body”启动一个新block，并通过可选的“group”关键字参数将其绑定到先前定义的group原语。请注意，closeslock_start（）始终返回True，这允许您使用简单的if子句选择性地“删除”其包含的基元。另请注意，closeslock_end（）的name参数是可选的。这些框架设计决策纯粹是出于美学目的。然后在“主体”block的限制内定义一系列基本分隔符和字符串基元，并关闭该block。当这个定义的请求被加载到Sulley
session中时，模糊器将为block
“body”生成并传输所有可能的值，对于组中定义的每个动词一次。请注意，group可以独立使用，不必绑定到特定block。
### Encoders
Encoders是一个简单但功能强大的block修饰符。可以指定函数并将其附加到block，以便在返回和通过线路传输之前修改该block的变异内容。
这里有一个很好的真实例子来解释。 Trend Micro ConTrol
Manager的DcsProcessor.exe守护程序侦听TCP端口20901，并期望接收使用专有XOR编码例程格式化的数据。
对decoder进行逆向工程，开发了以下XOR编码程序：
    def trend_xor_encode (str):
    key = 0xA8534344
    ret = ""
    # pad to 4 byte boundary.
    pad = 4 - (len(str) % 4)
    if pad == 4:
    pad = 0
    str += "\x00" * pad
    while str:
    dword = struct.unpack("'。  
格式:(字符串，默认=“二进制”）输出格式，“二进制”或“ascii”，控制整数的格式  
原语呈现。
  * inclusive :( boolean，default = False）sizer应该计算自己的长度吗？
  * signed :( boolean，default = False）使sizers有符号或无符号，仅在format =“ascii”时适用。
  * math：（functon，default = None）将此函数中定义的数学运算应用于size。
  * fuzzable :( boolean，default = False）启用或禁用此基元的fuzz。
  * name :( string，default = None）与所有Sulley对象一样，指定名称使您可以在整个请求中直接访问此原语。
Sizer是数据生成中的关键组件，允许表示复杂协议，如XDR表示法，ASN.1等。Sulley将在渲染sizer时动态计算相关block的长度。
默认情况下，Sulley不会fuzz size字段。 在许多情况下，这是期望的行为，但是，如果不是，则启用fuzzable。
### Checksums
与sizer类似，s_checksum（）帮助程序使用块名称来计算作为第一个参数的校验和。还可以指定以下可选关键字参数：
  * algorithm :(字符串或函数指针，默认=“crc32”）。 校验和算法应用于目标block。（crc32，adler32，md5，sha1）
  * endian :( character，default =''。
  * length :(整数，默认= 0）校验和的长度，保留为0表示自动计算。
  * name :( string，default = None）与所有指定名称的Sulley对象一样，您可以在整个请求中直接访问此原语。  
'algorithm'参数可以是“crc32”，“adler32”，“md5”或“sha1”之一。 或者，您可以为此参数指定函数指针以应用自定义校验和算法。
### Repeaters
s_repeat（）（或s_repeater（））helper用于复制块可变的次数。这对于再解析具有多个元素的表时进行溢出测试很有帮助。这个helper需要三个参数，即要重复的块的名称，最小重复次数和最大重复次数。
此外，还提供以下可选关键字参数：
  * step :(integer ，default = 1）最小和最大代表之间的步数。
  * fuzzable :( boolean，default = False）启用或禁用此基元的fuzz。
  * name :( string，default = None）与指定名称的所有Sulley对象一样，您可以在整个请求中直接访问此原语。
请思考以下将三个helper绑定在一起的例子。 我们正在fuzz包含一个字符串表的协议的一部分。
表中的每个entry包括一个2字节的字符串类型字段，一个2字节的长度字段，一个字符串字段，最后是一个在字符串字段上计算的CRC-32校验和字段。
我们不知道类型字段的有效值是什么，因此我们将使用随机数据进行fuzz。 以下是在Sulley中的协议的一部分：
    # table entry: [type][len][string][checksum]
    if s_block_start("table entry"):
    # we don't know what the valid types are, so we'll fill this in with random data.
    s_random("\x00\x00", 2, 2)
    # next, we insert a sizer of length 2 for the string field to follow.
    s_size("string field", length=2)
    # block helpers only apply to blocks, so encapsulate the string primitive in one.
    if s_block_start("string field"):
    # the default string will simply be a short sequence of C's.
    s_string("C" * 10)
    s_block_end()
    # append the CRC-32 checksum of the string to the table entry.
    s_checksum("string field")
    s_block_end()
    # repeat the table entry from 100 to 1,000 reps stepping 50 elements on each iteration.
    s_repeat("table entry", min_reps=100, max_reps=1000, step=50)
Sulle脚本不仅会fuzz表entry的输入解析，而且可能会发现在处理过长的表时出现的错误。
## Legos
Sulley利用“Legos”来表示用户定义的组件，例如Microsoft RPC，XDR，ASN.1和电子邮件地址，主机名和协议原语等。在ASN.1 /
BER中，字符串表示为序列[0x04][0x84][dword
length][string].。对基于ASN.1的协议进行fuzz时，每个字符串要包含前面的长度和类型前缀可能会变得很麻烦。
相反，我们可以定义Lego并引用它：
    s_lego("ber_string", "anonymous")
每个Lego都遵循类似的格式，但可选的'options'关键字参数除外，该参数特定于各个legos。 举个简单的例子，考虑“标签”Lego的定义，在fuzz
XML-ish协议时很有用：
    class tag (blocks.block):
    def __init__ (self, name, request, value, options={}):
    blocks.block.__init__(self, name, request, None, None, None, None)
    self.value = value
    self.options = options
    if not self.value:
    raise sex.error("MISSING LEGO.tag DEFAULT VALUE")
    #
    # [delim][string][delim]
    self.push(primitives.delim(""))
这个Lego示例只是接受所需的tag作为字符串并将其封装在适当的分隔符中。它通过扩展块类并通过self.push（）手动将tag分隔符和用户提供的字符串添加到块堆栈来实现。
这是另一个用于表示Sulley中的ASN.1 / BER整数的Lego的简单例子，选择“最小公分母”将所有整数表示为4字节整数，其格式如下：[0x02]
[0x04] [dword]，其中0x02指定整数类型，0x04指定整数长度为4字节且'dword '代表我们传递的实际整数。以下是来自sulley \
legos \ ber.py的定义：
    class integer (blocks.block):
    def __init__ (self, name, request, value, options={}):
    blocks.block.__init__(self, name, request, None, None, None, None)
    self.value = value
    self.options = options
    if not self.value:
    raise sex.error("MISSING LEGO.ber_integer DEFAULT VALUE")
    self.push(primitives.dword(self.value, endian=">"))
    def render (self):
    # let the parent do the initial render.
    blocks.block.render(self)
    self.rendered = "\x02\x04" + self.rendered
    return self.rendered
与前面的示例类似，使用self.push（）将提供的整数添加到block的堆栈中。
与前面的示例不同，render（）例程被重载以使呈现的内容前缀为静态序列“\ x02 \ x04”，以满足先前描述的整数表示要求。
## Final Notes
Sulley随着每个新fuzzer的创造而成长。 开发的block/request扩展了request库，可以很容易地引用并用于构建将来的fuzzers。
有关更详细的API参考，请参阅Epydoc生成的Sulley API文档。