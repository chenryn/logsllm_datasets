title:Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations
via Script Gadgets
author:Sebastian Lekies and
Krzysztof Kotowicz and
Samuel Groß and
Eduardo A. Vela Nava and
Martin Johns
Code-Reuse A(cid:29)acks for the Web: Breaking Cross-Site Scripting
Mitigations via Script Gadgets
Sebastian Lekies
Google
PI:EMAIL
Krzysztof Kotowicz
Google
PI:EMAIL
Samuel Groß
SAP
PI:EMAIL
Eduardo A. Vela Nava
Google
PI:EMAIL
ABSTRACT
Cross-Site Scripting (XSS) is an unremitting problem for the Web.
Since its initial public documentation in 2000 until now, XSS has
been continuously on top of the vulnerability statistics. Even though
there has been a considerable amount of research [15, 18, 21] and
developer education to address XSS on the source code level, the
overall number of discovered XSS problems remains high. Because
of this, various approaches to mitigate XSS [14, 19, 24, 28, 30] have
been proposed as a second line of defense, with HTML sanitiz-
ers, Web Application Firewalls, browser-based XSS (cid:27)lters, and the
Content Security Policy being some prominent examples. Most of
these mechanisms focus on script tags and event handlers, either
by removing them from user-provided content or by preventing
their script code from executing.
In this paper, we demonstrate that this approach is no longer
su(cid:28)cient for modern applications: We describe a novel Web attack
that can circumvent all of theses currently existing XSS mitiga-
tion techniques. In this attack, the attacker abuses so called script
gadgets (legitimate JavaScript fragments within an application’s
legitimate code base) to execute JavaScript. In most cases, these
gadgets utilize DOM selectors to interact with elements in the Web
document. Through an initial injection point, the attacker can inject
benign-looking HTML elements which are ignored by these mitiga-
tion techniques but match the selector of the gadget. This way, the
attacker can hijack the input of a gadget and cause processing of his
input, which in turn leads to code execution of attacker-controlled
values. We demonstrate that these gadgets are omnipresent in al-
most all modern JavaScript frameworks and present an empirical
study showing the prevalence of script gadgets in productive code.
As a result, we assume most mitigation techniques in web applica-
tions written today can be bypassed.
CCS CONCEPTS
• Security and privacy → Browser security; Web application
security; Intrusion detection systems; Firewalls; Penetration testing;
Web protocol security;
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:27)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:27)rst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, Texas, USA
© 2017 Copyright held by the owner/author(s). ISBN 978-1-4503-4946-8/17/10.
DOI: http://dx.doi.org/10.1145/3133956.3134091
Martin Johns
SAP
PI:EMAIL
1 INTRODUCTION
Web technology is moving forward at a rapid pace. Everyday new
frameworks and APIs are pushed to production. This constant
development also leads to a change in attack surface and vulner-
abilities. In this process Cross-Site Scripting (XSS) vulnerabilities
have evolved signi(cid:27)cantly in the recent years. The traditional re-
(cid:30)ected XSS issue is very di(cid:29)erent from modern DOM-based XSS
vulnerabilities such as mXSS [12], or expression-language-based
XSS [10]. While the topic of XSS becomes increasingly more com-
plex, many mitigation techniques only focus on the traditional and
well-understood re(cid:30)ected XSS variant.
In this paper, we present a novel Web attack which demonstrates
that many mitigation techniques are ine(cid:28)cient when confronted
with modern JavaScript libraries. At the core of the presented attack
are so-called script gadgets, small fragments of JavaScript contained
in the vulnerable site’s legitimate code. Generally speaking, a script
gadget is piece of JavaScript code which reacts to the presence
of speci(cid:27)cally formed DOM content in the Web document. In a
gadget-based attack, the adversary injects apparently harmless
HTML markup into the vulnerable Web page. Since the injected
content does not carry directly executable script code, it is ignored
by the current generation of XSS mitigations. However, during
the web application lifetime, the site’s script gadgets pick up the
injected content and involuntarily transform its payload into exe-
cutable code. Thus, script gadgets introduce the practice of code-reuse
attacks [27], comparable to return-to-libc, to the Web.
To explore the severity and prevalence of the underlying vul-
nerability pattern, we conduct a qualitative and quantitative study
of script gadgets. For this, we (cid:27)rst identify the various gadget
types, considering their functionality and their potential to un-
dermine existing XSS mitigations. Furthermore, we examine 16
popular JavaScript frameworks and libraries, focusing on contained
script gadgets and mapping the found gadget instances to the af-
fected XSS mitigations. For instance, in 13 out of the 16 examined
code-bases we found gadgets capable to circumvent the emerging
strict-dynamic variant of the Content Security Policy [34]. Fi-
nally, we report on a large-scale empirical study on the prevalence
of script gadgets in popular web sites.
By crawling the Alexa top 5000 Web sites and their (cid:27)rst-level
links, we measured gadget-related data (cid:30)ows for approximately
650,000 individual crawled URLs. In total, we measured 4,352,491
sink executions with data retrieved from the DOM. Using our fully-
automated exploit generation framework, we generated exploits
and veri(cid:27)ed gadgets on 19.88% of all domains in the data set. As
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1709we applied a very conservative, but false-positive-free veri(cid:27)cation
approach, we believe that this number is just a lower bound and
that the numbers of gadgets are considerably higher in practice.
In particular, this paper makes the following contributions:
• To the best of our knowledge, we are the (cid:27)rst researchers to
systematically explore this new Web attack that allows to
circumvent popular XSS mitigation techniques by abusing
script gadgets. We describe the attack in detail and give a
categorization of di(cid:29)erent types of gadgets.
• In order to explore script gadgets in detail, we present the
results of a manual study on 16 modern JavaScript libraries.
Based on proof-of-concept exploits we demonstrate that
almost all of these libraries contain gadgets. Furthermore,
we demonstrate how these di(cid:29)erent script gadgets can
be used to circumvent all 4 popular classes of mitigation
techniques: The Content Security Policy, HTML sanitizers,
Browser-based XSS (cid:27)lters and Web Application Firewalls.
• Based on the results of the manual study, we built a tool
chain capable of automatically detecting and verifying gad-
gets at scale. Based on this tool, we conducted an empirical
study of the Alexa top 5000 Web sites including more than
650k Web pages. The results of this study suggests that
script gadgets are omnipresent in modern JavaScript-heavy
applications. While our study is very conservative when
measuring gadgets, we managed to detect and verify gad-
gets in 19.88% of all domains. This number just represents
a lower bound and is likely much higher in practice.
2 TECHNICAL BACKGROUND
2.1 JavaScript, HTML and the DOM
Since its development, JavaScript has been used to interact
with the DOM to make HTML documents more interactive.
To do this, JavaScript working in the browser uses many
di(cid:29)erent ways to read data from the DOM. Most of the cor-
responding functions
such as document.getElementById
or document.getElementsByClassName are based on DOM
selectors[33]
around
by providing
document.querySelectorAll.
convenient wrappers
DOM selectors are a powerful pattern language that can be used
to query the DOM for certain elements, and therefore are the basis
for all modern JavaScript frameworks. For example, one of the most
famous JavaScript functions - jQuery’s $ function - enhances the
browser-based selector language with a lot of syntactic sugar. In
the following table, we describe some selector features in detail:
Selector
Tag-based
Id-based
Class-based
Attr.-based
E.g.
div
#foo
.foo
[foo]
Matches...
div elements
elements with id ’foo’
elements with class ’foo’
elements with an attribute named ’foo’
and/or JavaScript into Web content that is not legitimately under
their control. XSS vulnerabilities are generally categorized based on
the location of the vulnerable source code, i.e., server- or client-side
XSS, and the persistence of the injected attack code, i.e., re(cid:30)ected
or stored XSS.
XSS can be avoided through secure coding practices, which
mainly rely on the careful handling of attacker controlled input
and context-aware sanitization/encoding of untrusted data before
processing it in a security sensitive context. For brevity, we’ll omit
further details on the basic vulnerability class and refer to the vast
body of existing work on the topic [7, 8, 17, 18, 21, 31].
2.3 XSS Mitigation Techniques
The basic XSS problem has been recognized since the beginning
of the decade [5], the root cause is understood, and a signi(cid:27)cant
amount of work has been done to design approaches to detect and
prevent XSS issues in source code. XSS is statistically still the most
common vulnerability class however, and there seems to be no
overall decline in its prevalence. It therefore seems safe to assume
that XSS problems will not be solved completely with secure coding
practices alone.
For this reason various XSS mitigations have been introduced as
an important second line of defense. Instead of removing the under-
lying vulnerability, XSS mitigations aim to prevent the exploitation
of the vulnerability by stopping the execution of the injected script
code. XSS mitigations are widely implemented in four di(cid:29)erent
forms:
(1) HTML Sanitizers. These are libraries used by developers
to clean untrusted HTML into HTML that is safe to use
within the application. This category contains examples
such as DOMPurify1 and Google Closure2 HTML sanitizer.
(2) Browser XSS Filters. These (cid:27)lters are implemented as
part of the browser navigation and rendering, and they
attempt to detect an XSS attack and neuter it. Internet
Explorer, Edge, and Chrome implement XSS (cid:27)lters as part
of their default con(cid:27)guration. Firefox does not have one,
but the popular NoScript3 AddOn implements one.
(3) Web Application Firewalls. This is software that runs on
the server, and attempts to allow benign requests from web
tra(cid:28)c, while detecting and blocking malicious requests. An
example of an open-source Web Application Firewall is
ModSecurity4 with OWASP Common Rule Set5.
(4) Content Security Policy [34]. This is a browser feature
that a web developer can con(cid:27)gure to de(cid:27)ne a policy that
allows the browser to whitelist the JavaScript code that
belongs to the application.
These mitigations all fundamentally rely one of three basic strate-
gies:
(1) Request (cid:27)ltering blocks HTTP requests before they
reach the application, working either at the browser level
2.2 Cross-site Scripting (XSS)
The term Cross-site Scripting (XSS) [29] describes a class of string-
based code injection vulnerabilities that let adversaries inject HTML
1https://github.com/cure53/DOMPurify
2https://github.com/google/closure-library
3https://noscript.net/
4https://modsecurity.org/
5https://github.com/SpiderLabs/owasp-modsecurity-crs
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1710(like NoScript), or at the network or application level (like
WAFs).
(2) Response sanitization focuses on detecting malicious
code and sanitizing it out of the response. Examples of
these are HTML sanitizers, as well as Internet Explorer’s
and Edge’s XSS (cid:27)lter.
(3) Code (cid:27)ltering detects malicious JavaScript just before it
is executed and tries to detect whether it is benign or not.
Examples of this strategy include CSP and Chrome’s XSS
(cid:27)lter.
We will go into more details about the implementation of such
strategies and the ways to bypass them in Section 4.
3 SCRIPT GADGETS
In this section, we introduce the concept of script gadgets, explain-
ing how injecting a benign HTML markup may result in arbitrary
JavaScript execution by reusing parts of legitimate application code
and how this can be used to negate the e(cid:29)ects of XSS mitigations.
3.1 Benign HTML markup
XSS mitigation techniques described in Section 2.3 aim to stop XSS
attacks by blocking execution of illegitimate, injected JavaScript
code. Mitigations detect the injected code, present in inline event
handlers or in separate script elements and prevent its execu-
tion, while legitimate JavaScript code, carrying appropriate trust
information, is left as-is and is allowed to execute.
Those XSS mitigations ignore injected HTML markup that would
not result in JavaScript execution - we’ll call such markup benign
HTML. Benign HTML does not contain  tags, inline event
handlers, src or href attributes with javascript: or data: URLs,
or other tags capable of JavaScript execution (,
, ). The following snippet is an example of benign
HTML:
Hello world!
Listing 1: Benign HTML markup ignored by the mitigation
// Userland code
var button = document.getElementById("button");
button.getAttribute("data-text");
var links = $("a[href]").children();
// Reading ’ref’ attributes in Aurelia framework
if (attrName === ’ref’) {
info.attrName = attrName;
info.attrValue = attrValue;
info.expression = new NameExpression(
this.parser.parse(attrValue), ’element’,
resources.lookupFunctions);=
}
// Vue.js reading from v-html attribute
if ((binding = el.attrsMap[’v-html’])) {
return [{ type: EXPRESSION, value: binding }]
}
Listing 2: Reading data from the DOM
By injecting benign HTML markup matching DOM selectors
used in the application we are able to trigger the execution of
speci(cid:27)c pieces of legitimate application code 6 - script gadgets.
3.3 Script Gadgets - Introduction
Script gadgets are fragments of legitimate JavaScript code belonging
to the web application that execute as a result of benign HTML
markup present in the web page. Script gadgets are not injected
by the attacker - they are already present either in the user-land
web application code, or one of the libraries/frameworks used by
the web application.
Our research explores using script gadgets to bypass XSS miti-
gations. In order to do that, gadgets must both result in arbitrary
script execution, and be triggered from benign HTML injection.
For example, a web application might assign a value read from the
DOM to the innerHTML property of an element:
var button = getElementById("my-button");
button.innerHTML = button.getAttribute("data-text");
Listing 3: Simple innerHTML gadget
3.2 DOM selectors
The presence of benign HTML in a document does not directly
trigger code execution. However, in virtually all web applications
JavaScript code already present in the page interacts with the DOM,
reading data from the document by using various DOM selectors
(2.1). For example, a web application might take all elements with a
tootltip attribute to decorate them by showing a given text when
the user selects these elements. JavaScript code reading data from
the DOM based on a selector is a common pattern in both user-land
and library code - example code snippets might look like this:
Simple gadgets like these are often explored in the context of
DOM XSS vulnerabilities [16], but for the purpose of this research
we propose a new classi(cid:27)cation of gadgets of varying complexity.
But (cid:27)rst we’ll explain how to use script gadgets in attacks against
XSS mitigations.
6An alternative way of triggering speci(cid:27)c code paths in a web application from benign
markup is DOM clobbering. DOM clobbering allows markup to override variables
in JavaScript execution environment, making it possible to trigger speci(cid:27)c script
behavior. While we have identi(cid:27)ed working bypasses of some XSS mitigations via
DOM clobbering, for clarity we focus only on DOM selector-based code triggers.
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA17113.4 Attack Outline
In this paper, we introduce a novel XSS attack that relies on script
gadgets to cause the execution of the adversary’s JavaScript code.
Attacker model: The applicable attacker is the classic XSS at-
tacker [29], who is able to inject arbitrary HTML code into the
content of the attacked web document. In the context of this paper
whether the injection technique used is re(cid:30)ected or stored XSS is
irrelevant.
As discussed above, existing XSS mitigations rely on the basic
assumption that malicious code is being directly injected into the
a(cid:29)ected page in the course of an XSS attack. All non-script carrying,
injected HTML content is therefore assumed to be benign and
remains untouched by the mitigation. This assumption is exploited
by the proposed attack method. The HTML code injected by the
attacker exposes two characteristics:
(1) The actual attack payload, for example the attack’s
JavaScript, is contained in the benign HTML in a non-
executable form.
(2) The HTML is speci(cid:27)cally crafted so that its presence in
the web document triggers a script gadget already con-
tained in the web page’s legitimate JavaScript code. In other
words, the injected HTML payload triggers a code-reuse
attack, similar to ret2libc techniques used in exploitation
of memory-corruption vulnerabilities.
In the course of an attack, a script gadget accesses the injected
DOM content and uses the contained information in an insecure
manner, ultimately leading to the execution of the adversary’s code,
which was hidden in the benign HTML code. In summary, the class
of attacks described in this paper follows this basic pattern:
(1) Injection into the raw HTML. The attacker controls the
DOM of the webpage and injects a payload that triggers
script gadgets in the application code. This payload con-
tains only benign HTML markup and matches the DOM
selectors used by the web application.
(2) Mitigation attempt. An XSS mitigation inspects the in-