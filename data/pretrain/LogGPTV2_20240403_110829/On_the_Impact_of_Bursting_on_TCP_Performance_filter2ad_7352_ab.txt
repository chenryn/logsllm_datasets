### Analysis of Burst Causes and Their Impact on TCP Performance

#### Root Cause Analysis of Bursts
Table 3 presents the determined causes of bursts in the datasets. The table shows that each dataset contains a significant number of bursts, with varying percentages attributed to different root causes.

**Table 3: Percentage of Bursts Triggered by Given Root Causes**

| Dataset | Total Bursts | Initial Window | Loss Recovery ACKs | Stretch ACKs | Window Opening Pattern | Application Sending Pattern | Unknown |
|---------|--------------|----------------|--------------------|--------------|------------------------|-----------------------------|----------|
| Anon    | 274,880      | 1.8%           | 6.4%               | 26.3%        | 5.0%                   | 17.0%                       | 49.6%    |
| LBNL    | 187,176      | 0.9%           | 4.2%               | 22.9%        | 3.1%                   | 32.8%                       | 40.0%    |
| ICSI1   | 165,023      | 0.2%           | 0.7%               | 23.5%        | 4.8%                   | 24.0%                       | 40.6%    |
| ICSI2   | 228,063      | 0.3%           | 5.1%               | 22.4%        | 4.5%                   | 23.3%                       | 45.1%    |

- **Initial Window**: 1–6% of the bursts are observed during the initial window of data transmission.
- **Loss Recovery ACKs**: A similarly small amount (1–6%) of bursting is caused by the sender being limited by the advertised window during loss recovery and then transmitting a burst upon leaving loss recovery.
- **Stretch ACKs**: Approximately 20–25% of the bursts are caused by stretch ACKs, which acknowledge more than twice the number of bytes in the largest segment seen in the connection. Stretch ACKs can be generated for various reasons, including economy of processing and bandwidth, simple ACK loss, and ACK reordering.
- **Window Opening Pattern**: 3–5% of the bursts are due to ACKs that do not free space in the advertised window, causing a burst when an ACK finally does open the window.
- **Application Sending Pattern**: 17–33% of the bursts are triggered by the application's sending pattern, occurring after all transmitted data has been acknowledged.
- **Unknown**: 40–50% of the bursts could not be accurately determined, indicating the need for further research to develop additional techniques for identifying these causes.

#### Implications of Bursts on TCP Connections

**Figure 3: Probability of Losing at Least One Segment in a Burst as a Function of Burst Size (in Segments)**

- **Anon Dataset**: Shows a smooth increase in the probability of loss as the burst size increases.
- **LBNL and ICSI Datasets**: Show a clear threshold where the probability of losing at least one segment jumps from less than 5% to over 20%, often reaching 100%. This suggests a maximum queue size or active queue management in these networks.

**Table 4: Retransmission Rates Observed Inside and Outside Bursts**

| Dataset | Connections | Bursts | Burst Loss Rate (%) | Non-Burst Loss Rate (%) |
|---------|-------------|--------|---------------------|-------------------------|
| Anon    | 4,233       | 69,299 | 70.9                | 41.2                    |
| LBNL    | 5,685       | 45,282 | 23.0                | 22.9                    |
| ICSI1   | 4,805       | 39,832 | 16.1                | 14.5                    |
| ICSI2   | 8,201       | 72,069 | 26.6                | 20.5                    |

- **Burst Loss Rate**: The aggregate retransmission rate is higher when connections are bursting compared to when they are not. The increase ranges from nearly non-existent in the LBNL dataset to a roughly 75% increase in the Anon dataset.

#### Conclusions and Future Work

- **Frequency and Size of Bursts**: Micro-bursts are not frequent, with over 75% of the connections showing no bursting. When bursting occurs, 90% of the bursts are less than 15 segments, and the probability of experiencing loss within these bursts is generally less than 5%.
- **Causes of Bursts**: The two predominant known causes are the reception of stretch ACKs and application sending patterns. However, 40–50% of the bursts remain unclassified.
- **Future Work**: Further refinement of analysis techniques to understand the unclassified bursts and correlate network issues with specific bursting situations. Additionally, understanding how the results relate to those in [JD03] will be crucial for developing effective mitigation strategies.

#### Acknowledgments

- **Data Providers**: Andrew Moore and Vern Paxson provided the Anon and LBNL datasets, respectively.
- **Discussions**: Sally Floyd, Vern Paxson, and Scott Shenker contributed to discussions on this study.
- **Funding**: This work was partially funded by the National Science Foundation under grant number ANI-0205519.

#### References

- [AB04] Mark Allman and Ethan Blanton. Notes on Burst Mitigation for Transport Protocols. December 2004. Under submission.
- [AEO03] Mark Allman, Wesley Eddy, and Shawn Ostermann. Estimating Loss Rates with TCP. ACM Performance Evaluation Review, 31(3), December 2003.
- [AFP02] Mark Allman, Sally Floyd, and Craig Partridge. Increasing TCP’s Initial Window, October 2002. RFC 3390.
- [APS99] Mark Allman, Vern Paxson, and W. Richard Stevens. TCP Congestion Control, April 1999. RFC 2581.
- [BA02] Ethan Blanton and Mark Allman. On Making TCP More Robust to Packet Reordering. ACM Computer Communication Review, 32(1):20–30, January 2002.
- [Bra89] Robert Braden. Requirements for Internet Hosts – Communication Layers, October 1989. RFC 1122.
- [FF96] Kevin Fall and Sally Floyd. Simulation-based Comparisons of Tahoe, Reno, and SACK TCP. Computer Communications Review, 26(3), July 1996.
- [FK04] Sally Floyd and Eddie Kohler. Profile for DCCP Congestion Control ID 2: TCP-like Congestion Control, November 2004. Internet-Draft draft-ietf-dccp-ccid2-08.txt (work in progress).
- [JD03] Hao Jiang and Constantinos Dovrolis. Source-Level IP Packet Bursts: Causes and Effects. In ACM SIGCOMM/Usenix Internet Measurement Conference, October 2003.
- [KHF04] Eddie Kohler, Mark Handley, and Sally Floyd. Datagram Control Protocol (DCCP), November 2004. Internet-Draft draft-ietf-dccp-spec-09.txt (work in progress).
- [MHK+03] Andrew Moore, James Hall, Christian Kreibich, Euan Harris, and Ian Pratt. Architecture of a Network Monitor. In Passive & Active Measurement Workshop 2003 (PAM2003), April 2003.
- [MM96] Matt Mathis and Jamshid Mahdavi. Forward Acknowledgment: Refining TCP Congestion Control. In ACM SIGCOMM, August 1996.
- [Mog92] Jeffrey C. Mogul. Observing TCP Dynamics in Real Networks. In ACM SIGCOMM, pages 305–317, 1992.
- [Pax97] Vern Paxson. Automated Packet Trace Analysis of TCP Implementations. In ACM SIGCOMM, September 1997.
- [SXM+00] Randall Stewart, Qiaobing Xie, Ken Morneault, Chip Sharp, Hanns Jürgen Schwarzbauer, Tom Taylor, Ian Rytina, Malleswar Kalla, Lixia Zhang, and Vern Paxson. Stream Control Transmission Protocol, October 2000. RFC 2960.
- [ZKFP03] Ming Zhang, Brad Karp, Sally Floyd, and Larry Peterson. RR-TCP: A Reordering-Robust TCP with DSACK. In Proceedings of the Eleventh IEEE International Conference on Networking Protocols (ICNP), November 2003.