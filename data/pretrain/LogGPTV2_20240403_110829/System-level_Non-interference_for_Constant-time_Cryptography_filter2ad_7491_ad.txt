tion details such as encoding and size of values, and assume
given an abstract type Value of values with a distinguished
element ⊥ to denote undeﬁned values; iii. we consider a sin-
gle stealth address;
iv. we do not model registers. These
simpliﬁcations do not impact the security analysis.
Policies. Our model and henceforth results are parame-
terized by a write policy and a replacement policy for the
cache. They can be instantiated respectively to write back
and write through, and to all typical replacement policies,
such as LRU, pseudo-LRU or LFU.
Memory model. States (SLST) are modelled as 6-tuples
that respectively store data about operating systems and
about the active operating system, the memory, the hyper-
visor mapping, the cache and the TLB (translation lookaside
buﬀer); the formal deﬁnition appears in Figure 7.
There are three levels of address spaces: virtual addresses,
which are handled by guest operating systems (OSs) and
processes, physical addresses, a software abstraction used
to provide the illusion of hardware memory to each guest
OS and machine addresses, which refer to actual hardware
memory. Some virtual and machine addresses are marked
as stealth.
The ﬁrst component of a state records for each OS, drawn
i. a physical address
from a set OSId of OS identiﬁers:
pointing to its current page table;
ii. its pending hyper-
call. Hypercalls are priviledged functionalities exported by
the hypervisor to the guest OSs; there is at most one pending
hypercall per OS.
The second component of a state stores the current active
operating system (ActiveOS) together with its activity mode.
The active OS is either running or waiting for a hypercall
to be resolved.
The third component of the state stores the platform mem-
ory (Memory). The memory is modelled as a function from
machine addresses to memory pages; contrary to separation
kernels, pages are allocated on demand. Each page contains:
.i an owner (PageOwner); .ii a ﬂag indicating whether the
page can be cached or not3; .iii a content (PageContent).
A page owner is either the hypervisor or a guest OS; pages
may not have owners. The page content is either a read-
able/writable value or an OS page table. Page tables are
used by guest OSs for mapping the virtual addresses used
by running applications to machine addresses. Neither ap-
plications nor guest OSs have permission to read or write
page tables; these actions can only be performed by the hy-
pervisor.
The fourth component of the state stores the hypervisor
mapping (HyperMap). This mapping is used to translate
physical page addresses to machine page addresses and is
under control of the hypervisor, which can allocate and deal-
locate machine memory.
The ﬁfth component of the state stores a Virtually In-
dexed Physically Tagged (VIPT) data cache (Cache). The
cache is used to speed up data fetch and store, and con-
sists of a collection of data blocks or cache lines that are ac-
cessed by cache indices. The cache consists of:
i. a bounded
map4 from pairs of virtual and machine addresses to mem-
ory pages, ii. a history (used by the replacement policy) and,
iii. a static mapping from virtual addresses to cache indices.
Each entry is tagged with a machine address. This avoids
the need of ﬂushing the cache on every context switch. Since
caches are usually set associative, there are many virtual ad-
dresses that map to the same index. All data that is accessed
using the same index is called a cache line set. We select one
cache index and one particular virtual address (stealth va)
in its cache line set for stealth use. All other virtual ad-
dresses in that cache line set are reserved and cannot be
used either by the guest operating systems or the hypervi-
sor. It is relatively straightforward to extend the deﬁnitions
to a set of stealth addresses.
The ﬁnal component of the state stores the Translation
Lookaside Buﬀer (TLB), which is used to improve virtual ad-
dress translation speed. The TLB is modelled as a bounded
map from virtual to machine addresses. It is used in conjunc-
tion with the current page table of the active OS to speed
up translation of virtual to machine addresses. The TLB is
ﬂushed on context switch and updates are done simultane-
ously in the page table, so its management is simpler than
the cache (we do not need to record the TLB access history,
as it is not necessary to write back evicted TLB entries).
State invariants. The model formalizes a notion of valid
state that captures several well-formedness conditions, and
an exclusion property, which is crucial for proving isolation,
and ensures that stealth and non-stealth addresses cannot
be mapped to the same cache line set. Both properties are
preserved by execution; for exclusion, this is achieved by a
careful treatment of allocation in the operational semantics.
Platform semantics. Our formalization considers a repre-
sentative set of actions to read and write from memories,
manage memory mappings, request and perform priviledge
actions, and switch between operating systems and the hy-
pervisor; see Figure 9. Figure 10 presents the semantics
of two important actions: write (write value in virtual ad-
dress) and new_sm (extends the stealth memory of the active
OS with a new mapping).
We use some helper functions to manipulate the compo-
nents of the state. These functions are explained in the
description of the actions semantics. There is, for example,
a function cache add that is used to add entries in the cache.
It returns the new cache and an optional entry selected for
replacement. The function cache add is parameterized by
an abstract replacement policy that determines which ele-
ments are evicted from a full cache, and guarantees that
the inertia property, as deﬁned in [34], holds for the cache:
when adding an entry to the cache in a virtual address va, if
an eviction occurs, the evicted address is in the same cache
line set as va.
3To properly deal with the problems posed by aliasing in
VIPT caches, pages mapped by two diﬀerent virtual ad-
dresses are ﬂagged as non-cacheable.
4A bounded map is a ﬁnite map whose domain must have
size less than some ﬁxed positive constant.
::= new | del | lswitch| pin | unpin | none
::= Pa × HC
::= OSId → OSData
:= running | waiting
::= OSId × OSActivity
Va, Pa, Ma
OSId
HC
OSData
GuestOSs
OSActivity
ActiveOS
PageContent := RW (Value) | P T (Va → Ma) | none
PageOwner
Page
Memory
HyperMap
CacheData
CacheIndex
CacheHistory := Index → Hist
Cache
TLB
:= Hyp | OS(OSId) | none
:= PageContent × PageOwner × Bool
::= Ma → Page
::= OSId → Pa → Ma
:= Va × Ma 7→ Page
:= Va → Index
::= CacheData × CacheIndex × CacheHistory
::= Va 7→ Ma
virtual, physical and machine address
OS identiﬁer
hyper calls
OS data
guest OSs
exec modes
active OS
page content
page owner
memory page
memory map
hypervisor map
cache data
cache index
cache history
VIPT cache
TLB
SLST
::= GuestOSs × ActiveOS × HyperMap × Memory × Cache × TLB System level state
Figure 7: System level state
Attacker model and state equivalence. We let the at-
tacker observe:
i. its current page table; ii. its pending
hypercalls; iii. the identity of the active operating system;
iv. its activity when active; v. its own readable/writable
memory pages; vi. the values of its own cache entries; vii. the
memory layout of the victim, as deﬁned by the page meta-
data (owner and cacheable status) of the victim memory
pages; viii. the layout of the non-stealth part of the cache;
ix. the cache history. The attacker cannot, however, directly
read, write, or observe page table or the hypervisor map-
pings (either its own or the victim). This is because these
mappings are maintained by the hypervisor, and guest OSs
have no access to them. Moreover, the attacker cannot ob-
serve the values held in the memory or cache entries of the
victim. This very strong adversary model captures the kind
of attacks we are interested in:
if two states diﬀer in one
of these observable components, the execution of an action
might replace an attacker entry in the cache, potentially
leading to a cache-based attack. On the other hand, we
prove that if an action is executed in two states that are
equivalent from the attacker’s view, the attacker cache en-
tries are equal in the resulting states.
Dynamic allocation is a known diﬃculty when reasoning
about state equivalence; in our setting, the diﬃculty man-
ifests itself in the deﬁnition of equivalence for memory and
hypervisor mappings. In an object-oriented setting, this dif-
ﬁculty is normally solved using partial bijections [9]. How-
ever, we model both memory allocation and deallocation via
the pin and unpin actions; unfortunately, the partial bijec-
tion approach breaks in this setting5 and we do not know
any formal proof of soundness of an information ﬂow type
system for a language with allocation and deallocation. For-
tunately, we can deﬁne state equivalence without using par-
tial bijections; instead, we rely on the hypervisor mapping
physical addresses, which are the same in both executions.
hyp
ma
mem
pa
if RW
pg
hyp'
ma'
mem'
Figure 8: Equivalence of hypervisor mappings
Formally, state equivalence ∼ is deﬁned as the conjunc-
tion of four equivalence relations for OS information, cache
history, hypervisor mapping, and memory mapping. The
ﬁrst two relations are straightforward. We deﬁne equiva-
lence of hypervisor mappings below; equivalence of memory
is deﬁned similarly.
Definition 7
(Equivalence of hypervisor mappings).
Two states t and t′ have equivalent hypervisor mappings for
the attacker (t ∼hyp t′) if for every physical address pa,
readable/writable page pg and machine address ma:
• if get page hyp(t, oa, pa) = (ma, pg), there exists ma′
such that get page hyp(t′, oa, pa) = (ma′, pg);
• if get page hyp(t, ov, pa) = (ma, pg), and no page table
maps stealth va to ma, then there exists ma′ such that
get page hyp(t′, ov, pa) = (ma′, pg′), where pg and pg′
are equal except in their contents;
and reciprocally for t′.
Figure 8 provides a pictural representation of the equiva-
lence: we require that the attacker readable/writable pages
are the same for hyp and hyp′. Furthermore, the layout
of the non-stealth memory pages of the victim must be the
same (non-stealth pages should have the same owner, and
same cacheable ﬂag, but arbitrary value).
5The approach requires that the partial bijection grows dur-
ing execution. With deallocation, one would require that the
ﬁnal partial bijection is a superset of a subset of the original
one, which is vacuous.
Unwinding lemmas. The equivalence relation ∼ is kept
invariant by the execution of a victim stealth action. Fur-
thermore, if the same attacker action or two victim actions
with the same eﬀect are executed in two equivalent states,
the resulting states are also equivalent. These results are
variations of standard unwinding lemmas [44]. In the sequel,
we write tov and toa respectively to denote states where ov
and oa are the active operating system.
Lemma 8
1 ֒ a−→ s′
soa
1, and soa
(oa step-consistent unwinding). Assume
2 ֒ a−→ s′
2. If s1 ∼ s2 then s′
1 ∼ s′
2.
Lemma 9
1 ֒ a−→ s′
sov
then s′
1 ∼ s′
2.
(ov step-consistent unwinding). Assume
2. If eﬀ(a) = eﬀ(a′) and s1 ∼ s2,
2 ֒ a′
−→ s′
1, and sov
The proofs of these lemmas critically rely on the inertia
property of cache [34]: upon adding a virtual address to the
cache, the evicted virtual address, if any, is in the same cache
line set as the added one; and on the exclusion property: the
hypervisor ensures that guest operating systems can only
allocate virtual addresses that are not in the same cache
line set as the stealth virtual addresses.
Isolation. We ﬁrst deﬁne a relation to capture that two
traces perform the same sequence of actions from the at-
tacker’s view:
eﬀ(b1) = eﬀ(b2) Θ1 ≈ Θ2
tov
1 ֒
b1−→ Θ1 ≈ tov
2 ֒
b2−→ Θ2
Θ1 ≈ Θ2
toa
1 ֒ b−→ Θ1 ≈ toa
2 ֒ b−→ Θ2
We then deﬁne equivalence of traces:
t1 ∼ t2 Θ1 ∼ Θ2