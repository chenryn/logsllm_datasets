perform and affect the overall performance of the system. Our
results show that compilation time increases by 15.22% on
average compared to the baseline compiler without encryption
and end-to-end execution time increases by no more than
7.05% across all workloads. ERIC’s hardware components
introduce a minor 3.17% FPGA resource overhead and can
be implemented at the low FPGA component cost.
ERIC makes the following contributions:
• ERIC is the ﬁrst end-to-end software obfuscation and
trusted execution framework that offers a lightweight
architecture applicable to all systems.
• We implement and publicly released an end-to-end pro-
totype of ERIC which comprises a real RISC-V system
and a compiler.
II. BACKGROUND AND THREAT MODEL
A. LLVM
LLVM is a set of compiler and toolchain technologies
that can be used to develop any programming language
as a front-end and any instruction set architecture as a
back-end [28], [31]. LLVM is designed around a language-
independent methodology called Intermediate Representation
(IR). The program compiled using any language is ﬁrst trans-
lated to the IR language. IR is a high-level assembly language
that can be optimized with a variety of transformations over
multiple passes. Many optimizations and analyses are possible
during compilation with IR. After all the desired optimizations
and analyses are made on the IR representation of the pro-
gram, a binary code translation for the target instruction set
architecture (ISA) is produced from the IR language.
With the IR methodology, it is possible to develop a custom
compiler on LLVM. The designed compiler can be built by
performing the target compilation options on the IR language.
In addition, this compiler is compatible with most languages
thanks to the support of LLVM libraries.
B. Arbiter PUF
Physical unclonable function (PUF) is a function that pro-
vides a physically deﬁned ”digital ﬁngerprint” output (re-
sponse) for a given input and conditions (difﬁculty), usu-
ally serving as a unique identiﬁer for a semiconductor de-
vice [34], [24]. PUFs are mostly based on variations that
occur naturally during semiconductor fabrication. Since the
distribution of
these variances is unique for each semi-
conductor, PUFs use it
to obtain the unique identity of
the device. There are many PUF methods proposed to
date [8], [13], [37], [40], [7], [25], [19], [14]. Delay-based
PUFs are among the most common PUF methods used [36].
Arbiter PUFs compare the delay of two identical paths
to generate a ’0’ or ’1’ bit, depending on the result of the
comparison [32]. Although no two paths are the same and
should introduce the same delay, minor unforeseen differences
during the manufacturing process make one path ultimately
faster than the other.
Arbiter PUFs
authentication.
Challenge-response authentication is the protocol in which
challenge–response
use
the source gives a response output for an incoming challenge
input. PUF-based systems can check system authentication
by the validation of the response output. Figure 1 shows the
scheme of the 5-bit challenge and 1-bit response PUF model.
As seen in the ﬁgure, the response output changes depending
on the path of the delays on the hardware and the challenge
value.
Fig. 1: 5 Bit Challenge - 1 Bit Response PUF Scheme
C. Threat Model
In our threat model, we assume that the executable (program
binaries) is transmitted over an untrusted network. Malicious
parties can retrieve the executable to violate IP rights, make
modiﬁcations to the executable and send the modiﬁed version
to the destination hardware. We assume that the target hard-
ware is trusted. In summary, we protect against these types of
threats: (i) Hijacking critical programs and resulting reverse
engineering applications, (ii) attempting to execute programs
of unknown origin on user hardware, (iii) running programs
compiled by the software source on unlicensed or unveriﬁed
hardware and (iv) the execution of malicious modiﬁcations or
soft errors to the program on the system.
III. ARCHITECTURE OF ERIC
ERIC is an efﬁcient and practical framework designed
to establish a trusted execution environment
that provides
authenticated target-hardware-speciﬁc software compilation
capability. To provide such capability, ﬁrst, ERIC encrypts
software such that the encrypted software can only be de-
crypted in the target hardware, protecting the software against
malicious attacks in the form of static and dynamic analyses,
second, ERIC integrates a secure hash digest of the software
within the software’s encrypted version to support integrity
validation. ERIC consists of two components: (i) hardware-
based architecture and (ii) software-based architecture.
ERIC’s hardware and software components are easily de-
coupled. For example, ERIC’s software components can be
used in one computer to compile and encrypt programs, and
its hardware components can be used in another computer
to perform decryption. This way, an encrypted program can
be securely transferred over a network from one computer to
another, and its integrity can be validated by the hardware
that decrypts and runs it. If the integrity of an encrypted
program can be validated, it is guaranteed to come from a
trusted source, thus the encrypted program’s authenticity is
also validated. This way, the program runs only on the target
hardware and the target hardware only executes the programs
written for it. We refer to this feature of ERIC as two-way
authentication. Figure 2 shows how two-way authentication
works between hardware and software interfaces.
On the other hand, ERIC achieves obfuscation of the
program binaries from malicious activities while transferring
between the software source and the target hardware.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
467
can be applied to the program or bit ﬂips that may occur
because of soft errors while the program is being transferred
or stored. ERIC includes a graphical interface in order to
understand the encryption stages more easily and to enable the
programmer to control the encryption according to their own
needs. Encryption can be done through this interface according
to the requirements.
The proposed architecture is compatible with different en-
cryption methods. New encryption algorithms can be easily
implemented in the system by the ERIC’s interface. With the
changes to be made in the target ﬁles, the user has the freedom
to upload his own encryption method to the system. After
deciding on the encryption algorithm, encryption methods
should be determined. There are three different encryption
methods that can be used for this. These are the complete
encryption of the program, partial encryption of the program,
and the partial encryption of a select few instructions of
the program by specifying the target bits in the instruction
encoding.
All instructions are encrypted with PUF-based keys and
ready to be executed on the target hardware. For the target
hardware to detect which instructions are encrypted, the en-
cryption map must be transmitted to the other party along
with the encrypted program. Using partial encryption,
the
programmer can protect the critical parts of the program or
create an area within the program that can only be active on
the target hardware. In addition, the programmer can select the
features he/she wants to run only on licensed hardware within
the program.
The interface where target
instructions can be selected
for partial encryption is provided with ERIC. The presented
interface also allows selecting special parts within the tar-
get instructions. In this way, only critical information can
be protected without interfering with the program ﬂow. For
example, only the pointer values of the instructions that make
memory accesses can be encrypted, which makes it difﬁcult
to follow the program’s memory trace. If the opcode parts of
the instructions are not encrypted during partial encryption, it
will also make it difﬁcult to understand that the program is
encrypted in the case of reverse engineering.
ERIC is suitable for compiling from a single software
source for multiple target hardware or creating multiple trusted
software sources for single target hardware. For this, it is
only necessary to apply the appropriate conversion function
to the system to match the PUF-based key with the PUF keys.
Also, if the hardware manufacturer maps two or more different
hardware to the same PUF-based key while performing the
conversion function in the Key Management Unit, programs
can be created to run on multiple hardware of their own with
a single compile step. This implies that ERIC does not have
a scaling problem for multiple targets or sources.
In addition to encryption, ERIC generates signatures for
compiled programs to ensure that the program reaches the
target without modiﬁcation. This signature is obtained by
running a cryptographic hash function on the instructions
before the program is encrypted. The signature is produced
before the program is encrypted and the signature is encrypted
with the program, making the signature useless for those who
cannot decrypt the program. The resulting signature is ﬁnally
encrypted with a PUF-based key. In this way, interference or
Fig. 2: Two-Way Authentication Model
1) Software Architecture
Target-hardware-speciﬁc encryption is provided by a PUF-
based key. For this, the compiler performs integrated encryp-
tion with the PUF-based Key Generator Unit on the hardware
side. PUF-based keys are obtained by passing the PUF key
in the hardware through the function (e.g., secure hash algo-
rithm [16]) in the Key Management Unit. Since the PUF key is
immutable on each target hardware, an encryption mechanism
directly linked to the PUF key gives unlimited access to the
trusted program resource, and this access relationship cannot
be changed. To avoid this, it is suggested to obtain a PUF-
based key from the PUF key that the target hardware can
conﬁgure at any time. The use of PUF keys provides a unique
key for each device that has physical foundations and does not
need to be constantly stored in a register.
As stated in Section II.C, the proposed architecture aims
at the obfuscation and safety of the compiled program until
the execution stage while achieving two-sided authentica-
tion between the target hardware and the software source.
Therefore, it is assumed that the handshake is already done
for the hardware targeted by the software source, and PUF-
based keys that are compatible with the target hardware are
assumed to be known to the software source. The key unit we
added on the compiler side takes the PUF-based key of the
target hardware as input and generates the keys to be used in
encryption operations. The PUF key is not exposed to the user
during software compilation. With the abstraction layer created
between the PUF-based key generator in the hardware and the
key generator in the software, there is no need for direct access
to the PUF key when integrated encryption with the PUF
key. This allows long-term key usage, enabling different key
conﬁgurations in the system. Also, in this way, the PUF key in
the hardware is protected and can be used for different targets
since it is not shared with the software developer directly.
ERIC’s software components encrypt the program in various
conﬁgurations during the compilation phase. The encrypted
program is intended to remain secure until it reaches the target
hardware. The main goals of the encryption are to be protected
from reverse engineering methods, malicious add-ons that
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
468
errors that may occur in the program during the transfer or
storage of the program become detectable by the hardware.
The developments made on the software side of ERIC are
completely suitable for targeted customization. The variety
of encryption methods, the ability to change the encryption
function, and the selection of ISA speciﬁcations suitable for
the target hardware make this possible.
2) Hardware Architecture
For the hardware to run the encrypted and signed program
securely and efﬁciently, hardware architecture is needed that
will work in harmony with the software architecture. ERIC’s
Hardware architecture includes several units. These are the
Decryption Unit, the Validation Unit, the Key Management
Unit, the Signature Generator, and the PUF Key Generator.
The high-level unit in which these units are integrated is called
as Hardware Decryption Engine (HDE) Unit. The hardware
architecture is completed by integrating the processor with the
HDE Unit. The security model in the hardware ensures that
the received programs are kept encrypted until they are loaded
into the main memory for execution. Since decryption opera-
tions are performed without writing the program to memory,
the recommended hardware architecture is compatible with
common processor architectures.
PUF Key Generator (PKG). The PKG enables the generation
of keys that act as an identity for the hardware device due to
the differences in the hardware during production (e.g., process
variation). These keys provide the hardware with a unique
identiﬁcation number. These PUF keys will be used in ERIC
to distinguish between two different hardware.
Key Management Unit. PUF-based keys used by hardware
are used to decrypt
the incoming encrypted program. In
order to integrate the keys used on the software side and
the keys used on the hardware side, the existing PUF key
goes through the key generation function within the Key
Management Unit. The PUF-based key is obtained by passing
the PUF key through the function. In this way, multiple
PUF-based keys are generated with a single PUF key. As
mentioned earlier, this provides a layer of abstraction between
the encryption/decryption key and the PUF key. Using the PUF
key with abstraction allows conﬁguring the function used for
the PUF-based key in the Key Management Unit, allowing
to change the compatible software resources according to
time or preferences. With this ﬂexibility,
if the necessary
variables in the hardware are given as input to the PUF-
based key generation function a program that can only be
decrypted and run at a speciﬁc time range or a program that
can only be decrypted at a speciﬁc temperature, frequency, or
altitude, etc. can be obtained. We did not discuss the different
conﬁgurations of PUF-based key generation for the sake of
simplicity of the paper and planned for future work.
Decryption Unit. The Decryption Unit decrypts the program
that reaches the SoC encrypted with the PUF-based key. If the
program is partially encrypted, the Decryption Unit analyzes
the additional bits added to the encrypted program for each
instruction. While these are the addition of a new bit
to
each instruction in instruction-based partial encryption, the