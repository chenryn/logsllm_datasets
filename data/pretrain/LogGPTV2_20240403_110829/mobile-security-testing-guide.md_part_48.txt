Usbmuxd is a socket daemon that monitors USB iPhone connections. You can use it to map the mobile device's
localhost listening sockets to TCP ports on your host machine. This allows you to conveniently SSH into your iOS
device without setting up an actual network connection. When usbmuxd detects an iPhone running in normal mode, it
connects to the phone and begins relaying requests that it receives via /var/run/usbmuxd .
Connect macOS to an iOS device by installing and starting iproxy:
$ brew install libimobiledevice
$ iproxy 2222 22
waiting for connection
The above command maps port 22 on the iOS device to port 2222 on localhost. With the following command in a
new terminal window, you can connect to the device:
$ ssh -p 2222 root@localhost
root@localhost's password:
iPhone:~ root#
351
Setting up a Testing Environment for iOS Apps
You can also connect to your iPhone's USB via Needle.
On-device Shell App
While usually using an on-device shell (terminal emulator) might be very tedious compared to a remote shell, it can
prove handy for debugging in case of, for example, network issues or check some configuration. For example, you
can install NewTerm 2 via Cydia for this purpose (it supports iOS 6.0 to 12.1.2 at the time of this writing).
In addition, there are a few jailbreaks that explicitly disable incoming SSH for security reasons. In those cases, it is
very convenient to have an on-device shell app, which you can use to first SSH out of the device with a reverse shell,
and then connect from your host computer to it.
Opening a reverse shell over SSH can be done by running the command ssh -R :localhost:22
@ .
On the on-device shell app run the following command and, when asked, enter the password of the mstg user of the
host computer:
ssh -R 2222:localhost:22 PI:EMAIL
On your host computer run the following command and, when asked, enter the password of the root user of the iOS
device:
$ ssh -p 2222 root@localhost
Host-Device Data Transfer
There might be various scenarios where you might need to transfer data from the iOS device or app data sandbox to
your workstation or vice versa. The following section will show you different ways on how to achieve that.
Copying App Data Files via SSH and SCP
As we know now, files from our app are stored in the Data directory. You can now simply archive the Data directory
with tar and pull it from the device with scp :
iPhone:~ root# tar czvf /tmp/data.tgz /private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8
F5560EB0693
iPhone:~ root# exit
$ scp -P 2222 root@localhost:/tmp/data.tgz .
Passionfruit
After starting Passionfruit you can select the app that is in scope for testing. There are various functions available, of
which one is called "Files". When selecting it, you will get a listing of the directories of the app sandbox.
352
Setting up a Testing Environment for iOS Apps
When navigating through the directories and selecting a file, a TextViewer pop-up will show up that illustrates the data
either as hex or text. When closing this pop-up you have various options available for the file, including:
Text viewer
SQLite viewer
Image viewer
Plist viewer
Download
Objection
When you are starting objection you will find the prompt within the Bundle directory.
org.owasp.MSTG on (iPhone: 10.3.3) [usb] # pwd print
Current directory: /var/containers/Bundle/Application/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app
Use the env command to get the directories of the app and navigate to the Documents directory.
org.owasp.MSTG on (iPhone: 10.3.3) [usb] # cd /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D
353
Setting up a Testing Environment for iOS Apps
8B4A2D44133/Documents
/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents
With the command file download  you can download a file from the iOS device to your workstation and
can analyze it afterwards.
org.owasp.MSTG on (iPhone: 10.3.3) [usb] # file download .com.apple.mobile_container_manager.metadata.plist
Downloading /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_cont
ainer_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plist
Streaming file from device...
Writing bytes to destination...
Successfully downloaded /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple
.mobile_container_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plist
You can also upload files with file upload  to the iOS device, but this implementation is not fully
stable at the moment and might produce an error. If that's the case file an issue in the objection GitHub repo.
Obtaining and Extracting Apps
Getting the IPA File from an OTA Distribution Link
During development, apps are sometimes provided to testers via over-the-air (OTA) distribution. In that situation, you'll
receive an itms-services link, such as the following:
itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist
You can use the ITMS services asset downloader tool to download the IPS from an OTA distribution URL. Install it via
npm:
$ npm install -g itms-services
Save the IPA file locally with the following command:
# itms-services -u "itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-
uat/manifest.plist" -o - > out.ipa
Acquiring the App Binary
1. From an IPA:
If you have the IPA (probably including an already decrypted app binary), unzip it and you are ready to go. The
app binary is located in the main bundle directory (.app), e.g. "Payload/Telegram X.app/Telegram X". See the
following subsection for details on the extraction of the property lists.
On macOS's Finder, .app directories are opened by right-clicking them and selecting "Show Package
Content". On the terminal you can just cd into them.
2. From a Jailbroken device:
If you don't have the original IPA, then you need a jailbroken device where you will install the app (e.g. via App
Store). Once installed, you need to extract the app binary from memory and rebuild the IPA file. Because of DRM,
the file is encrypted when it is stored on the iOS device, so simply pulling the binary from the Bundle (either
through SSH or Objection) will not be successful. The following shows the output of running class-dump on the
Telegram app, which was directly pulled from the installation directory of the iPhone:
$ class-dump Telegram
354
Setting up a Testing Environment for iOS Apps
//
// Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun 9 2015 22:53:21).
//
// class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//
#pragma mark -
//
// File: Telegram
// UUID: EAF90234-1538-38CF-85B2-91A84068E904
//
// Arch: arm64
// Source version: 0.0.0.0.0
// Minimum iOS version: 8.0.0
// SDK version: 12.1.0
//
// Objective-C Garbage Collection: Unsupported
//
// Run path: @executable_path/Frameworks
// = /Frameworks
// This file is encrypted:
// cryptid: 0x00000001
// cryptoff: 0x00004000
// cryptsize: 0x000fc000
//
In order to retrieve the unencrypted version, we can use tools such as frida-ios-dump or Clutch. Both will extract the
unencrypted version from memory while the application is running on the device. The stability of both Clutch and Frida
can vary depending on your iOS version and Jailbreak method, so it's useful to have multiple ways for extracting the
binary. In general, all iOS versions lower than 12 should work with Clutch, while iOS 12+ should work with frida-ios-
dump or modify Clutch as discussed later.
Using Clutch
After building Clutch as explained on the Clutch GitHub page, push it to the iOS device through scp. Run Cluch with
the -i flag to list all installed applications:
root# ./Clutch -i
2019-06-04 20:16:57.807 Clutch[2449:440427] command: Prints installed applications
Installed apps:
...
5: Telegram Messenger 
...
Once you have the bundle identifier, you can use Clutch to create the IPA:
root# ./Clutch -d ph.telegra.Telegraph
2019-06-04 20:19:28.460 Clutch[2450:440574] command: Dump specified bundleID into .ipa file
ph.telegra.Telegraph contains watchOS 2 compatible application. It's not possible to dump watchOS 2 apps with C
lutch (null) at this moment.
Zipping Telegram.app
2019-06-04 20:19:29.825 clutch[2465:440618] command: Only dump binary files from specified bundleID
...
Successfully dumped framework TelegramUI!
Zipping WebP.framework
Zipping NotificationContent.appex
Zipping NotificationService.appex
Zipping Share.appex
Zipping SiriIntents.appex
Zipping Widget.appex
DONE: /private/var/mobile/Documents/Dumped/ph.telegra.Telegraph-iOS9.0-(Clutch-(null)).ipa
Finished dumping ph.telegra.Telegraph in 20.5 seconds
355
Setting up a Testing Environment for iOS Apps
After copying the IPA file over to the host system and unzipping it, you can see that the Telegram application can now
be parsed by class-dump, indicating that it is no longer encrypted:
$ class-dump Telegram
...
//
// Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun 9 2015 22:53:21).
//
// class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//
#pragma mark Blocks
typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown
#pragma mark Named Structures
struct CGPoint {
double _field1;
double _field2;
};
...
Note: when you use Clutch on iOS 12, please check Clutch Github issue 228
Using Frida-ios-dump
Frida-ios-dump requires Frida server running on your jailbroken device. It is basically using Frida scripts to dump the
decrypted binary from memory onto a file. Note: before we get started, please note that the Frida-ios-dump tool is not
always compatible with the latest version of Frida. Therefore: it might well be that you have to install an older version
of Frida on your jailbroken device. First, make sure that the configuration in dump.py is set to either localhost with port
2222 when using iProxy, or to the actual IP address and port of the device from which you want to dump the binary.
Next, change the username and password to the ones you use. Now you can safely use the tool to enumerate the
apps installed:
$ ./dump.py -l
PID Name Identifier
---- --------------- -------------------------------------
860 Cydia com.saurik.Cydia
1130 Settings com.apple.Preferences
685 Mail com.apple.mobilemail
834 Telegram ph.telegra.Telegraph
- Stocks com.apple.stocks
...
and you can dump one of the listed binaries:
$ python dump.py ph.telegra.Telegraph
/Users/jbeckers/Security/iOS/frida-ipa-dump/env/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:39: Crypt
ographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed i
n a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed p
oint encoding.
m.add_string(self.Q_C.public_numbers().encode_point())
/Users/jbeckers/Security/iOS/frida-ipa-dump/env/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:96: Crypt
ographyDeprecationWarning: Support for unsafe construction of public numbers from encoded data will be removed
in a future version. Please use EllipticCurvePublicKey.from_encoded_point
self.curve, Q_S_bytes
/Users/jbeckers/Security/iOS/frida-ipa-dump/env/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:111: Cryp
tographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed
in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed
point encoding.
356
Setting up a Testing Environment for iOS Apps
hm.add_string(self.Q_C.public_numbers().encode_point())
Start the target app ph.telegra.Telegraph
Dumping Telegram to /var/folders/qw/gz47_8_n6xx1c_lwq7pq5k040000gn/T
[frida-ios-dump]: HockeySDK.framework has been loaded.
[frida-ios-dump]: Load Postbox.framework success.
[frida-ios-dump]: libswiftContacts.dylib has been dlopen.
...
start dump /private/var/containers/Bundle/Application/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Framewo
rks/libswiftsimd.dylib
libswiftsimd.dylib.fid: 100%|██████████| 343k/343k [00:00<00:00, 1.54MB/s]
start dump /private/var/containers/Bundle/Application/14002D30-B113-4FDF-BD25-1BF740383149/Telegram.app/Framewo
rks/libswiftCoreData.dylib
libswiftCoreData.dylib.fid: 100%|██████████| 82.5k/82.5k [00:00<00:00, 477kB/s]
5.m4a: 80.9MB [00:14, 5.85MB/s]
0.00B [00:00, ?B/s]Generating "Telegram.ipa"
After this, the Telegram.ipa file will be created in your current directory. You can validate the successfulness of the
dump by removing the application and reinstalling it through io-deploy using ios-deploy -b Telegram.ipa . Note that
this will only work on jailbroken devices, as otherwise the signature won't be valid.
Installing Apps
When you install an application without using Apple's App Store, this is called sideloading. There are various ways of
sideloading which are described below. On the iOS device, the actual installation process is then handled by the
installd daemon, which will unpack and install the application. To integrate app services or be installed on an iOS
device, all applications must be signed with a certificate issued by Apple. This means that the application can be
installed only after successful code signature verification. On a jailbroken phone, however, you can circumvent this
security feature with AppSync, a package available in the Cydia store. It contains numerous useful applications that
leverage jailbreak-provided root privileges to execute advanced functionality. AppSync is a tweak that patches installd,
allowing the installation of fake-signed IPA packages.
Different methods exist for installing an IPA package onto an iOS device, which are described in detail below.
Please note that since iTunes 12.7 it is not longer possible to install apps using iTunes.
Cydia Impactor
One tool that is available for Windows, macOS and Linux is Cydia Impactor. This tool was originally created to
jailbreak iPhones, but has been rewritten to sign and install IPA packages to iOS devices via sideloading. The tool can
even be used to install APK files to Android devices. A step by step guide and troubleshooting steps can be found
here.
libimobiledevice
On Linux and also macOS, you can alternatively use libimobiledevice, a cross-platform software protocol library and a
set of tools for native communication with iOS devices. This allows you to install apps over a USB connection by
executing ideviceinstaller. The connection is implemented with the USB multiplexing daemon usbmuxd, which
provides a TCP tunnel over USB.
The package for libimobiledevice will be available in your Linux package manager. On macOS you can install
libimobiledevice via brew:
$ brew install libimobiledevice
After the installation you have several new command line tools available, such as ideviceinfo , ideviceinstaller or
idevicedebug .
# The following command will show detailed information about the iOS device connected via USB.
357
Setting up a Testing Environment for iOS Apps
$ ideviceinfo
# The following command will install the IPA to your iOS device.
$ ideviceinstaller -i iGoat-Swift_v1.0-frida-codesigned.ipa
WARNING: could not locate iTunesMetadata.plist in archive!
WARNING: could not locate Payload/iGoat-Swift.app/SC_Info/iGoat-Swift.sinf in archive!
Copying 'iGoat-Swift_v1.0-frida-codesigned.ipa' to device... DONE.
Installing 'OWASP.iGoat-Swift'
Install: CreatingStagingDirectory (5%)
Install: ExtractingPackage (15%)
Install: InspectingPackage (20%)
Install: TakingInstallLock (20%)
Install: PreflightingApplication (30%)
Install: InstallingEmbeddedProfile (30%)
Install: VerifyingApplication (40%)
Install: CreatingContainer (50%)
Install: InstallingApplication (60%)
Install: PostflightingApplication (70%)
Install: SandboxingApplication (80%)
Install: GeneratingApplicationMap (90%)
Install: Complete
# The following command will start the app in debug mode, by providing the bundle name. The bundle name can be
found in the previous command after "Installing".
$ idevicedebug -d run OWASP.iGoat-Swift
ipainstaller
The IPA can also be directly installed on the iOS device via the command line with ipainstaller. After copying the file
over to the device, for example via scp, you can execute the ipainstaller with the IPA's filename:
$ ipainstaller App_name.ipa
ios-deploy
On macOS one more tool can be used on the command line called ios-deploy, to allow installation and debugging of
iOS apps from the command line. It can be installed via brew: