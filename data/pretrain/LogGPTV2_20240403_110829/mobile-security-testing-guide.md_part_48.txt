### USBMuxd and SSH Access to iOS Devices

**USBMuxd Overview:**
USBMuxd is a socket daemon that monitors USB connections for iPhones. It allows you to map the mobile device's localhost listening sockets to TCP ports on your host machine, enabling convenient SSH access without setting up an actual network connection. When USBMuxd detects an iPhone in normal mode, it connects to the phone and relays requests via `/var/run/usbmuxd`.

**Connecting macOS to an iOS Device:**

1. **Install and Start iProxy:**
   ```sh
   $ brew install libimobiledevice
   $ iproxy 2222 22
   waiting for connection
   ```

   The above command maps port 22 on the iOS device to port 2222 on your local machine.

2. **SSH into the iOS Device:**
   Open a new terminal window and run:
   ```sh
   $ ssh -p 2222 root@localhost
   root@localhost's password:
   iPhone:~ root#
   ```

### On-Device Shell App

While using an on-device shell (terminal emulator) can be more cumbersome than a remote shell, it is useful for debugging, especially in cases of network issues or configuration checks. For example, you can install NewTerm 2 via Cydia (compatible with iOS 6.0 to 12.1.2 as of this writing).

Some jailbreaks disable incoming SSH for security reasons. In such cases, an on-device shell app can be used to initiate a reverse shell, allowing you to connect from your host computer.

**Opening a Reverse Shell:**

1. **On the iOS Device:**
   ```sh
   ssh -R 2222:localhost:22 PI:EMAIL
   ```

2. **On Your Host Computer:**
   ```sh
   $ ssh -p 2222 root@localhost
   Host-Device Data Transfer
   ```

### Transferring Data Between Host and iOS Device

There are several scenarios where you might need to transfer data between your iOS device and your workstation. Below are different methods to achieve this.

**Copying App Data Files via SSH and SCP:**

1. **Archive the Data Directory:**
   ```sh
   iPhone:~ root# tar czvf /tmp/data.tgz /private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693
   ```

2. **Pull the Archive to Your Host:**
   ```sh
   iPhone:~ root# exit
   $ scp -P 2222 root@localhost:/tmp/data.tgz .
   ```

### Using Passionfruit for File Management

Passionfruit provides various functions for managing files in the app sandbox. After starting Passionfruit, select the app you want to test. One of the available functions is "Files," which lists the directories of the app sandbox.

**File Management Options:**

- Text Viewer
- SQLite Viewer
- Image Viewer
- Plist Viewer
- Download

### Using Objection for File Operations

When you start Objection, the prompt will be within the Bundle directory.

```sh
org.owasp.MSTG on (iPhone: 10.3.3) [usb] # pwd print
Current directory: /var/containers/Bundle/Application/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app
```

**Navigating and Downloading Files:**

1. **Navigate to the Documents Directory:**
   ```sh
   org.owasp.MSTG on (iPhone: 10.3.3) [usb] # cd /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents
   ```

2. **Download a File:**
   ```sh
   org.owasp.MSTG on (iPhone: 10.3.3) [usb] # file download .com.apple.mobile_container_manager.metadata.plist
   ```

### Obtaining and Extracting Apps

**Getting the IPA File from an OTA Distribution Link:**

During development, apps are sometimes distributed via over-the-air (OTA) links. You can use the ITMS services asset downloader tool to download the IPA.

1. **Install the Tool:**
   ```sh
   $ npm install -g itms-services
   ```

2. **Download the IPA:**
   ```sh
   $ itms-services -u "itms-services://?action=download-manifest&url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist" -o - > out.ipa
   ```

**Acquiring the App Binary:**

1. **From an IPA:**
   Unzip the IPA to access the app binary, typically located in the `.app` directory.

2. **From a Jailbroken Device:**
   Use tools like `frida-ios-dump` or `Clutch` to extract the unencrypted binary from memory while the app is running.

**Using Clutch:**

1. **List Installed Applications:**
   ```sh
   root# ./Clutch -i
   ```

2. **Dump the IPA:**
   ```sh
   root# ./Clutch -d ph.telegra.Telegraph
   ```

**Using Frida-ios-dump:**

1. **List Installed Applications:**
   ```sh
   $ ./dump.py -l
   ```

2. **Dump a Specific Application:**
   ```sh
   $ python dump.py ph.telegra.Telegraph
   ```

### Installing Apps

**Sideloading:**

Sideloading refers to installing an application without using Apple's App Store. There are various methods for sideloading, including:

- **Cydia Impactor:**
  A cross-platform tool for signing and installing IPA packages on iOS devices.

- **libimobiledevice:**
  A cross-platform library and set of tools for native communication with iOS devices. Install it via Homebrew on macOS:
  ```sh
  $ brew install libimobiledevice
  ```

- **ipainstaller:**
  Directly install the IPA on the iOS device via the command line.

- **ios-deploy:**
  A command-line tool for installing and debugging iOS apps. Install it via Homebrew:
  ```sh
  $ brew install ios-deploy
  ```

By following these steps, you can set up a robust testing environment for iOS applications.