### 路径操作
- `os.path.join('/root/test', 'test.py')` 用于将路径进行合并。
- `os.path.split('.')` 和 `os.path.split('/root/test/test.py')` 用于将路径分解为目录和文件名。
- `os.path.abspath('..')` 返回当前路径的上一级绝对路径。
- `os.path.abspath('.')` 返回当前路径的绝对路径。
- `os.listdir(os.getcwd())` 列出当前工作目录下的所有文件。

### 文件操作
- `os.path.getmtime()` 获取文件或文件夹的最后修改时间。
- `os.path.exists('/root/test/test.py')` 检查文件或文件夹是否存在。
- `os.path.getsize('/root/test/test.py')` 获取文件或文件夹的大小（注意，对于文件夹，这可能不是实际占用的空间）。

### 示例
```python
import os

# 合并路径
print(os.path.join('/root/test', 'test.py'))

# 分解路径
print(os.path.split('/root/test/test.py'))

# 获取上一级目录的绝对路径
print(os.path.abspath('..'))

# 获取当前目录的绝对路径
print(os.path.abspath('.'))

# 列出当前目录下的文件
files = os.listdir(os.getcwd())
print(files)

# 按修改时间排序
lists = os.listdir(os.getcwd())
lists.sort(key=lambda fn: os.path.getmtime(os.getcwd() + '/' + fn))
print(lists)
```

### 数据结构操作
#### 列表操作
- `ll.append('jeanron100')` 向列表追加元素。
- `ll.count('jeanron100')` 计算列表中某个元素出现的次数。
- `ll.reverse()` 反转列表中的元素顺序。
- `ll.remove('jeanron')` 删除列表中的指定元素。
- `ll.extend(['jeanron', 'jianrong'])` 将另一个列表中的元素添加到当前列表中。

#### 字典操作
- `info = {'name': 'jeanron', 'age': 33, 'gender': 'male'}` 创建字典。
- `print(info.keys())` 输出字典的所有键。
- `print(info.values())` 输出字典的所有值。
- `print(info.items())` 输出字典的所有键值对。
- `print(info.get('name'))` 获取字典中指定键的值。

#### 集合操作
- `info.union(test_info)` 返回两个集合的并集。
- `info.intersection(test_info)` 返回两个集合的交集。
- `info & test_info` 也可以用来获取两个集合的交集。

### 字符串处理
- `print('\\')` 和 `mysql> select '\\';` 展示了如何处理转义字符。
- `x = 'hello'` 和 `@x = 'hello'` 分别展示了 Python 和 MySQL 中字符串变量的赋值。
- `print(name[1:])` 和 `mysql> select substring(@name, 2);` 展示了如何截取字符串。
- `print(x * 3)` 和 `mysql> select repeat('x', 3);` 展示了如何复制字符串。

通过这些示例，可以更清晰地理解 Python 和 MySQL 在处理字符串时的不同方法。希望这些示例能够帮助你快速上手基础操作。