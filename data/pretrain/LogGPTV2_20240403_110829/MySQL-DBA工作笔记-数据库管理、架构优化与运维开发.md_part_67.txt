>>> os.path.join('/root/test','test.py')
将路径进行合并。
>>> os.path.split('.')
>>> os.path.split('/root/test/test.py')
把路径分解为路径和文件名。
>>> os.path.abspath('..')
得到当前路径上一次的绝对路径。
>>> os.path.abspath('.')
>>> os.listdir(os.getcwd())
得到文件或文件夹的最后修改时间。
'test
'test.py'
'/root/test/test.py'
('/root/test',
'/root'
'/root/test'
返回当前的绝对路径。
列出当前路径所在的文件夹下的文件。
'/root/test'
/
和上面的可以互为印证。
'test.py')
'test.txt',
'cmdb_server.txt',
'opsmanage.tar.gz',
cmdb
.txt.bak
'a.sql',
''test.sql']
'paramiko.py',
'test.py',
---
## Page 449
的最后修改时间，最后对 lists 元素，按文件修改时间大小从小到大排序。
'users.pyc']
-sh 类似的结果。
task_
dict.py',
'backup.py']
users.pyc!
mysql_manage.pyc'
>>> lists.sort (key=lambda fn:os.path.getmtime (os.getcwd()+'/'+fn)
 sort 按 key 的关键字进行升序排序，lambda 的入参 fn 为 lists 列表的元素，获取文件
>>> print(lists)
>>> lists.sort()
>>> lists=os.listdir(os.getcwd())
将当前目录下的文件存入列表。
init
得到列表。
对列表进行排序。
['dict.py',
得到目录下的文件。
如果要对文件列表进行管理，可以参考如下的操作：
\n
>>> os.sep
True
>>> os.path.exists('/root/test/test.py')
查看文件或者文件夹是否存在。
29
>>> os.path.getsize('/root/test/test.py')
>>>
>>>
>>>
得到文件或文件夹的大小，注意文件夹的部分得到的可能不是真实的大小，不是 du
一
>>
一些路径在不同操作平台的表示。
init
os.pathsep
 os.linesep
os.extsep
.Pyc
'dict.pyc'
'assets.py',
'sqlplan.py'
ansible.py
'users.py',
'index.py'
init
'system_manage.py',
'deploy.pyc',
.pyc',
init
age
.pyc
'celeryHandle.py'
'index.pyc'
'backup.pyc'
PY
'task_manage.py',
'tuning.ini'
task
'deploy.py
'index.pyc',
_manage.pyc'
'system_manage.pyc'
'mysql_manage.py',
'celeryHandle.py'
'ansible.pyc'
第11章运维开发基础丨427
'assets.pyc'
'cron.py'
---
## Page 450
428丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
'mysql_manage.py',
mysql_manage.pyc']
'users.pyc'
index.py'
'cron.pyc',
>>> print ll.count('jeanron100')
运行操作系统命令，使用 popen。
列表转换为字典。
2．数据结构操作
列出当前目录下所有的.py 文件。
>>> os.path.splitext('/root/OpsManage-master/OpsManage/views/task_manage.pyc')
>>> os.path.splitext(os.getcwd())
得到文件的扩展名，如果输入是文件夹，则返回为空。
>>> print(lists)
判断列表元素是否存在。
>>>
>>>
>>>1l=['a,'b','c','d']
列表的追加。
（0，
运行操作系统命令，使用commands，这个返回更丰富一些。
{1:3,2:2,3:1}
>>>dat=[3，2,1]
（1）列表操作
数据结构操作主要会从列表操作、字典操作和集合操作三个部分来进行演示。
('/root/OpsManage-master/OpsManage/views/task_manage',
print(ll)
1l.append('jeanron100')
'dev01')
commands.getstatusoutput('hostname')
C
hostname'
init
'deploy.py'
"'deploy.py'',
'd',
'sqlplan.py'
'jeanron100']
mode
'cmdb.py',
'ansible.pyc',
'index.py'
'cron.py',
'backup.pyc',
at 0x7f416e1d45d0>
'ansible.py'!
'users.py'
'assets.py'
'dict.py'
'system_manage.py'
'celeryHandle.py'
'mysql_manage.py',
Tassets.pyc'
'.pyc')
init
'dict
.pyc'
---
## Page 451
集合并集。
set(['a',
>>> print info.union(test_info)
集合合集。
>>>print
集合交集。
uu}gu>> print info.values ()
以列表返回字典中的所有值。
>>>print info.keys()
输出字典的键值。
>>> print info.get('name')
>> info=('name':'jeanron','age':33,'gender':'male')
（2）字典操作
>>> 1l.sort()
列表排序。
['jianrong',
>>>
>>> 1l.reverse ()
set(['is
('gender'
>>
['gender'
jeanron
>>
反向输出列表元素。
>>>
>>>ll.remove('jeanron')
删除指定元素。
>>
>>>ll.extend(['jeanron','jianrong'])
0列表的组合，如果是两个列表，效果就更清晰了。
>>> print ll.count('jeanronl00o')
'a'，
e
>test_info={'this'
print
print(11)
a
‘]）
 info&test_info
info.items()
'age'
'c'，
'c'，
'male'),('age'， 33)，('name','jeanron')］
'jeanron100'，'d', 'c'， 'b'，'a']
'd'，
'is'
(l,Aw,'asen, ' uoxueal. 'sT.',stua.
'name']
'jeanronl00', 'jianrong'］
'jeanronl00'，'jianrong'”
'jeanron100',
'is','a','test'}
'my',
'name'])
'jeanron'，'jianrong']
第11章运维开发基础|429
---
## Page 452
430丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
价的。
兀了。
所以我决定对比一下两者的差别。
另一个是数据库，但是字符串的处理都是一个相对重要的部分，也是通用的逻辑处理，
解差异，找到共同之处，Python 和 MySQL的学习也不是孤立的，尽管一个是开发语言，
11.3.2
的火花。
的结合作为演示的切入点，我们来看看当 Python 字符串处理和 MySQL 碰撞会有什么样
开发来说，只能是抛砖引玉。
通过对比的方式学习是一种推荐的学习方式，因为通过对比能够更加清晰快速地理
我们这本书是基于数据库运维方向的，所以我们对于Python的学习还是以和 MySQL
小结：通过对比测试，Python 和MySQL 中对于特殊字符的处理方式和输出结果是等
>>> print `\\'
（1）转义字符
下面的演示会是Python 和 MySQL 成对出现，所以按照这个思路来看就不会感觉突
mysql> select '\'';
>>> print '\"
>>> print '\"
mysql>
相信通过如上的演示，对于一些 Python 的基础操作能够快速上手，当然对于 Python
---+
---
1
Python 字符串遇上 MySQL
select'\\';
'name'
---
## Page 453
MySQL 的字符串定制方案更为丰富。
>>> name = 'yangjianrong'
（4）字符串截取
小结：通过对比测试，Python 和 MySQL 中对于字符串复制都提供了丰富的功能，
mysql> select space(20);
space(20)
####################
（3）字符串复制
小结：通过对比测试，Python 和 MySQL 中对于字符串处理的逻辑上，Python 更加简洁。
+----
mysql> select concat(@x,@y);
+---
mysql> select @y;
mysql> select @x;
#################
tester
hello
一
set
hellotester
>>
>>
（2）字符串拼接
repeat('#',20)
hellotester
concat(@x,@y)
@y
XP
x='hello'
name[0]
-----+
print
'tester'
--十
end
---
第11章运维开发基础丨431
---
## Page 454
432丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
yangjianrong
mysql>
mysql> select mid(@name,2,3); 
或者使用mid，
mysql> select substring(@name,1);
mysql> select right(@name,1);
>>>name
mysql>
mysql> set @name:='yangjianrong';
T
>
>>>name[:]
'ang'
>>
>>> name[1] 
'yangjianrong'
ag'
yangjianrong
>>