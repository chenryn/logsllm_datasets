McIllroy 的“roff”的。
两个文件格式化程序的主要家族占据了该领域：继承自原始rof程序的，包括nroff和troff；
以及基于DonaldKnuth的TEX（发音“tek"）排版系统。是的，中间那个掉下来的“E”是其
名称的一部分。
nroff程序用于格式化文档以输出到使用等宽字体的设备，如字符终端和打字机式打印机。在它
刚面世时，这几乎包括了所有连接在计算机上的打印设备。稍后的trof程序格式化用于排版
机输出的文档，也就是“camera-ready”（可供拍摄成印刷版的）类型的用于商业打印的设备。
今天的大多数电脑打印机都能够模拟排版机的输出。rof家族还包括一些用于准备文档部分的
程序。这些包括eqn（用于数学方程）和tbl（用于表）。
TEX系统（稳定形式）首先在1989年出现，井在某种程度上取代了trof作为排版机输出
的首选工具。由于其复杂性（整本书都讲不完）以及在大多数现代Linux系统上默认情况下不
安装的事实，我们不会在此讨论TEX。
提示：对于有兴趣安装TEX的用户，请查看大多数分发版本中可以找到的texlive软件包，
以及LyX图形内容编辑器。
324
---
## Page 326
22.3.1groff
groff是一套用GNU实现troff的程序。它还包括一个脚本，用来模仿nroff和其他roff家族。
roff及其后继制作格式化文档的方式对现代用户来说是相当陌生的。今天的大部分文件都是
由能够一次性完成排字和布局的文字处理器生成的。在图形文字处理器出现之前，需要两步来
生成文档。首先用文本编辑器排字，接着用诸如trof之类的处理器来格式化。格式化程序的
说明通过标记语言的形式插入到已排好字的文本当中。类似这种过程的现代例子是网页。它首
先由某种文本编辑器排好字，然后由使用HTMIL作为标记语言的Web浏览器渲染出最终的页
面布局°
我们不会讲解grof的全部内容，因为它的标记语言被用来处理少有人懂的排字细节。我们
将专注于其中的一个仍然广泛使用的宏包。这些宏包将低级命令转换少量高级命令，从而简化
groff的使用。
现在，我们来看一下这个简单的手册页。它位于/usr/share/man目录，是一个gzip压缩文
本文件。解压后，我们将看到以下内容（显示了ls手册的第1节）：
[neglinuxbox -]$ zcat /usr/share/man/man1/ls.1-gz 1 head
.* DO NOT MODIFY THIS FILE! It vas generated by help2man 1.35.
SH NAME
1s \- list directory contents
.SH SYNOPSIS
.B 1s
[\fIOPTION\,fR] .. - [\fIFILE\,fR] .  
SH DESCRIPTION
.° Add any additional description here
.PP
与默认手册页进行比较，我们可以开始看到标记语言与其结果之间的相关性：
[ne@linuxbox -]$ man 1s I head
LS(1) User Cosmands LS(1)
NAME
1s - list directory contents
325
---
## Page 327
SYNOPSIS
ls [OPTION] .. . [FILE] . .
令人感兴趣的原因是手册页由groff渲染，使用mandoc宏包。事实上，我们可以用以下流
水线来模拟man命令：
[ne@linuxbox -]$ zcat /usr/share/man/man1/1s.1.gz I groff -nandoc -T
peaq 1 Tose
LS(1) User Cosmands LS(1)
NAME
ls - list directory contents
SYNOPSIS
1s [OPTION] ... [FILE] -..
在这里，我们使用groff程序和选项集来指定mandoc宏程序包和ASCII的输出驱动程序。
groff可以产生多种格式的输出。如果没有指定格式.默认情况下会输出PostScript格式：
[nedlinuxbox -]$ zcat /usr/share/man/man1/ls.1.gz I groff -nandoc 1
head
X!PS-Adobe-3.0
X%Creator: groff version 1.18.1
%%CreationDate: Thu Feb 5 13:44:37 2009
X%DocumentMeededResources: font Times-Roman
X%+ font Tines-Bold
%%+ font Tines-Italic
XZDocumentSuppliedResources: procset grops 1. 18 1
XXPages: 4
XXPageDrder: Ascend
X%Orientation: Portrait
我们在前一章中简要介绍了PostScript，并将在下一章中再次介绍。PostScript是一种页面
描述语言，用于将打印页面的内容描述给类似排字机的设备。如果我们输出命令并将其存储到
一个文件中（假设我们正在使用带有Desktop目录的图形桌面）：
326
---
## Page 328
[ne@linuxbox -]$ zcat /usr/share/man/man1/1s.1-gz I groff -nandoc )
-/Desktop/foo.pa
输出文件的图标应该出现在桌面上。双击图标，页面查看器将启动，并显示渲染后的文件：
图4:在GNOME中使用页面查看器查看PostScript输出
我们看到的是一个排版很好的ls手册页面！事实上，可以使用以下命令将PostScript输出
的文件转换为PDF（便携式文档格式）文件：
pd st/dosxsa/- sd·ooz/doeog/- spdzsd s[- xoqxnusteou]
ps2pdf 程序是ghostscript 包的一部分，它安装在大多数支持打印的Linux系统上。
提示：Linux系统通常包含许多用于文件格式转换的命令行程序。它们通常以format2format
命名·尝试使用该命令
ls /usr/bin/+ [[:alpha:]]2[[:a1pha:]] *
去识别它们。同样也可以尝试搜索formattoformat程序。
groff的最后一个练习，将再次访问我们的老朋友distros.txt·这一次，我们将使用能够将
表格格式化的tbl程序，来输出Linux发行版本列表。为此，我们将使用早期的sed脚本添加
一个文本流的标记，提供给grof。
首先，我们需要修改我们的sed脚本来添加tbl所需的请求。使用文本编辑器，我们将将
distros.sed 更改为以下内容：
# sed script to produce Linux distributions report
1i\
.TS\
327
---
## Page 329
center box;^
cb s s\
cb cb cb\
1 n c.\
Linux Distributions Report\
=\
Hane Version Released\
s/[09]{2)([092/[09]4)$/312/
$al
.TE
请注意，为使脚本正常工作，必须注意单词“NameVersion Released”由tab分隔，而不
是空格。我们将生成的文件保存为distros-tblsed.tbl使用.TS和.TE请求来启动和结束表格。
.TS请求后面的行定义了表格的全局属性，就我们的示例而言，它在页面上水平居中并含外边
框。定义的其余行描述每行的布局。现在，如果我们再次使用新的sed脚本运行我们新的报告
生成流水线，我们将得到以下内容：
[ne@linuxbox -]$ sort -k 1,1 -k 2n distros.txt | sed -f distros-tb1
Tnu/nap/<Z TtoseI-4-ypo.x81pos
| Linux Distributions Report 1
| Hane Version Released 1
|Fedora 5 2006-0320 1
|Fedora 6 2006-10-24 1
|Fedora 7 2007-05-31 1
|Fedora 8 2007-11-08 1
|Fedora 9 2008-05-13 1
|Fedora 10 2008-1125 1
SUSE 10.1 200605-111
|SUSE 10.2 2006-1207 1
|SUSE 10.3 2007-1004 1
|SUSE 11.0 20080619 1
|Ubuntu 6.06 2006-06-01 1
|Ubuntu 6.10 2006-1026 1
328
---
## Page 330
|Ubuntu 7.04 2007-04-19 1
|Ubuntu 7.10 2007-1018 1
|Ubuntu 8.04 2008-04-24 1
[Ubuntu 8.10 2008-1030 1
将-t选项添加到groff指示它用tbl预处理文本流。同样地，-T选项用于输出到ASCII，
而不是默认的输出介质PostScript°
如果仅限于终端屏幕或打字机式打印机，这样的输出格式是我们能期望的最好的。如果我
们指定PostScript输出并以图形方式查看生成的输出，我们将得到一个更加满意的结果：
[ne@linuxbox -]$ sort -k 1,1 -k 2n distros.txt | sed -f distros-tb1
sd·oog/doxoα/- <4- xzox 1 pos*
图5：查看生成的表格
22.4
Summing Up
22.5小节
文本是类Unix系统的核心特性，一定会有许多修改和格式化文本的工具。正如我们所看到的
那样，的确很多！像fnt和pr这种比较简单的格式化工具会在生成比较短的文件时发挥很多
用途，而groff和其他工具则会在写书的时候用上。我们也许永远不会用命令行工具来写一篇
技术文章（尽管有很多人在这么做！），但是知道我们可以这么做也是极好的。
22.6 Further Reading
http://www.gnu.org/software/groff/manual/
http://docs.freebsd.org/44doc/usd/19.memacros/paper.pdf
http:/ /docs.freebsd.org/44doc/usd/20.meref/paper.pdf
http:/ /plan9.bell-labs.com/10thEdMan/tbl.pdf
http://en.wikipedia.org/wilki/TeX
http://en.wikipelia.org/wiki/Donald_Knuth
http://en.wilkipedia.org/wilki/Typesetting
---
## Page 331
22.7
阅读更多
·grof用户指南
http://www.gnu.org/software/groff/manual/
·运用nroff指令中的-me选项写论文：
http:/ /docs.freebsd.org/44doc/usd/19.memacros/paper.pdf
-me参考手册：
http://docs.freebsd.org/44doc/usd /20.meref/paper.pdf
·Tbl一一个格式化表格的指令：
http:/ /plan9.bell-labs.com/10thEdMan/tbl.pdf
·当然，你也可以试试下面列出的维基百科中的内容：
http://en.wikipedia.org/wiki/TeX
http://en.wikipedia.org/wiki/Donald_Knuth
http://en.wikipedia.org/wiki/Typesetting
330
---
## Page 332
23
打印
前几章我们学习了如何操控文本，下面要做的是将文本呈于纸上。在这章中，我们将会着手用
于打印文件和控制打印选项的命令行工具。通常不同发行版的打印配置各有不同且都会在其安
来完成。
我们将讨论一下命令：
·P一转换需要打印的文本文件
·lpr—打印文件
·lp—打印文件（SystemV)
·a2ps—为PostScript打印机格式化文件
·lpstat一显示打印机状态信息
·lpq—显示打印机队列状态
·lprm——取消打印任务
·cancel—取消打印任务（SystemV)
23.1打印简史
为了较好的理解类Unix操作系统中的打印功能，我们必须先了解一些历史。类Unix系统中
的打印可追溯到操作系统本身的起源，那时候打印机和它的用法与今天截然不同。
23.1.1早期的打印
和计算机一样。前PC时代的打印机都很大、很贵，并且很集中。1980年的计算机用户都是在
离电脑很远的地方用一个连接电脑的终端来工作的，而打印机就放在电脑旁并受到计算机管理
员的全方位监视。
331
---
## Page 333
由于当时打印机既昂贵又集中，而且都工作在早期的Unix环境下，人们从实际考虑通常都
着用户名字的标题页，然后计算机工作人员会用推车装好当天的打印任务并分发给每个用户。
23.1.2基于字符的打印机
80年代的打印机技术有两方面的不同。首先，那时的打印机基本上都是打击式打印机。打击式
打印机使用擅针打击色带的机械结构在纸上形成字符。这种流行的技术造就了当时的菊轮式打
印和点阵式打印。
其次，更重要的是，早期打印机的特点是它使用设备内部固定的一组字符集。比如，一台
菊轮式打印机只能打印固定在其菊花轮花瓣上的字符，就这点而言打印机更像是高速打字机。
大部分打字机都使用等宽字体，意思是说每个字符的宽度相等，页面上只有固定的区域可供
打印，而这些区域只能容纳固定的字符数。大部分打印机采用横向10字符每英寸（CPI）和
纵向6行每英寸（LPI）的规格打印，这样一张美式信片纸就有横向85字符宽纵向66行高，
加上两侧的页边距，一行的最大宽度可达80字符。据此，使用等宽字体就能提供所见即所得
(WYSIWYG,What You See Is What You Get)的TE印预览°
接着，一台类打字机的打印机会收到以简单字节流的形式传送来的数据，其中就包含要打印
的字符。例如要打印一个字母a，计算机就会发送ASCII码97，如果要移动打印机的滑动架和
纸张，就需要使用回车、换行、换页等的小编号ASCII控制码。使用控制码，还能实现一些之
前受限制的字体效果，比如租体，就是让打印机先打印一个字符，然后退格再打印一遍来得到
颜色较深的效果的。用nrof来产生一个手册页然后用cat-A检查输出，我们就能亲眼看看这
种效果了：
[ne@linuxbox -]$ zcat /usr/share/man/man1/ls.1.gz 1 nroff -nan 1 cat -A I head
LS (1) User Commands LS (1)
N*HNA~HANHME^HE$
1s - list directory contents$
$SH-SIH-ISH.SdHdOH.ONH.NAHASH-S
1^H1s~Hs [_~BO_~HP_~HT_~HI_~HO_~HN] -.. [_~HP_~BI_~HL_~HE] . -$
H（ctrl-H）字符是用于打印粗体效果的退格符。同样，我们还可以看到用于打印下划线效
果的退格/下划线]序列。
332
---
## Page 334
23.1.3图形化打印机
图形用户界面（GUI）的发展催生了打印机技术中主要的变革。随者计算机的展现步人史多以
图形为基础的方式，打印技术也从基于字符走向图形化技术，这一切都是源于激光打印机的到
来，它不仅廉价，还可以在打印区域的任意位置打印微小的墨点，而不是使用固定的字符集。
这让打印机能够打印成比例的字体（像用排字机那样），甚至是图片和高质量图表。
然而，从基于字符的方式到转移到图形化的方式提出了一个严峻的技术挑战。原因如下：使
用基于字符的打印机时，填满一张纸所用的字节数可以这样计算出来（假设一张纸有60行，每
行80个字符）：60×80=4800字节。
相比之下，用一台300点每英寸（DPI）分辨率的激光打印机（假设一张纸有8乘10英寸
的打印区域）打印则需要（8×300）×（10×300)/8=900,000字节。
当时许多慢速的个人电脑网络无法接受激光打印机打印一页需要传输将近1兆的数据这一
点，因此，很有必要发明一种更聪明的方法。
这种发明便是页面描述语言（PDL）。PDL是一种描述页面内容的编程语言。简单的说就
是，“到这个地方，印一个10点大小的黑体字符a，到这个地方。。”这样直到页面上的所有
内容都描述完了。第一种主要的PDL是Adobe系统开发的PostScript，直到今天，这种语言
仍被广泛使用。PostScript是专为印刷各类图形和图像设计的完整的编程语言，它内建支持35
种标准的高质量字体，在工作时还能够接受其他的字体定义。最早，对PostScript的支持是打
印机本身内建的。这样传输数据的问题就解决了。相比基于字符打印机的简单字节流，典型的
PostScript程序更为详细.而且比表示整个页面的字节数要小很多。
一台PostScript打印机接受PostScript程序作为输入。打印机有自己的处理器和内存（通
常这让打印机比连接它的计算机更为强大），能执行一种叫做PostScript解析器的特殊程序用
于读取输入的PostScript程序并生成结果导入打印机的内存，这样就形成了要转移到纸上的位
（点）图。这种将页面渲染成大型位图（bitmap）的过程有个通用名称作光栅图像处理器（raster
image processor)， 文㎡叫 RIP °
多年之后，电脑和网络都变得更快了。这使得RIP技术从打印机转移到了主机上，还让高
品质打印机变得更便宜了。
现在的许多打印机仍能接受基于字符的字节流，但很多廉价的打印机却不支持，因为它们依
赖于主机的RIP提供的比特流来作为点阵打印。当然也有不少仍旧是PostScript打印机。
23.2在Linux下打印