the device manufacturer or the service operator may provide such a service
that a user can submit the collected measurement data to a server for malware
detection. This however will increase the communication cost on the mobile
device.
7 Practical Issues in VirusMeter Implementation
As Symbian is the most popular mobile OS, we implement a prototype of Virus-
Meter on Nokia 5500 Sport, supported by Symbian OS 9.1. Figure 4 shows the
modules of VirusMeter implementation. Currently, it is implemented as a user-
level application and a user can choose to start it or to shut it down manually.
The implementation program uses a client/server architecture which is widely
used for Symbian applications. Figure 5 shows the user interface once VirusMeter
is installed on our experimental device.
I
U
G
keyboard module
Telephone module
MsvSession Module
Power module
Data Collection
e
n
i
h
c
a
M
e
t
a
t
S
Log module
Realtime Mode
Charging Mode
Detector
client
server
Fig. 4.
Implementation
Modularized
VirusMeter
Fig. 5. VirusMeter Implemented on
a Nokia 5500 Sport
VirusMeter: Preventing Your Cellphone from Spies
255
7.1 Power Measurement Precision and Power Model Construction
The power consumption data are collected through the APIs provided by Sym-
bian for power status changes. In the prototype implementation, however, we
ﬁnd that the precision of the power capacity measurement is not suﬃcient. In
fact, the precision returned by the APIs of mobile devices varies signiﬁcantly. For
example, iPhone can return the current power capacity at 1% precision. Many
other devices, including the one in our experiments, return the power consump-
tion data only at the level of battery bars shown on the screen. On the Nokia
5500, these bars are at the 100, 85, 71, 57, 42, 28, 14, and 0 percent of the full
capacity. We call the battery supply between two of these successive values as
a power segment. To overcome the precision challenge, we perform experiments
long enough so that the power consumption is suﬃcient to cross a segment. As-
suming a constant draining rate during the experiments, we expect the power
measurement through this method is more accurate.
Accordingly, it is necessary to transform the power model in Equation 3 be-
cause if we were to still follow Equation 3, many experiment samples would have
the same constant dependent value ΔP , which is bad for the linear regression
and neural network regression. To make the regression as accurately as possible,
we transform the function as follows. Because in all our experiments, the signal
strength is always good (at level 6 and 7) but the duration of idle time has a
large range, we select idle time at the best signal strength as the dependent
variable, and transform our model to
Didle = f(cid:3)
(Di
call
, SSi
call
, T j
msg
, Sj
msg
, SSj
msg
, N j
msg
..., ΔP, SSk
idle).
(4)
For environmental factors, VirusMeter is currently only concerned about the
signal strength and network condition. Through the API, VirusMeter can di-
rectly query the current signal strength. There are 7 levels of signal strength on
Nokia 5500, from 1 to 7. We, however, cannot directly query APIs for network
conditions when a user performs a certain operation, such as text messaging. In
the experiments, we have observed that if the network congestion is severe, the
duration for sending or receiving messages increase signiﬁcantly. Therefore, to
make the power model more accurate, we introduce the sending time into it, and
the duration is measured as follows. In Symbian, sending a message leads to a
sequence of events that can be captured by VirusMeter: ﬁrst, an index is created
in the draft directory; when the creation is complete, the index is moved to
the sending directory; when sending is successful, the index will be moved to
the sent directory. Hence, the operation time can be measured from the time
when the index is created to the time when it is moved to the sent directory.
Following the similar idea, we further reﬁne the parameter input for receiving
messages and other networking operations.
Note that our power model is built in such a way due to insuﬃcient power
precision, but a malware does not need to be active throughout a segment of
battery power to be detected by VirusMeter. Instead, no matter how long the
malware is active, we can always feed the runtime data collected during an entire
256
L. Liu et al.
power segment for malware detection, and our experiments in the next section
will show that it is still very eﬀective.
7.2 Data Collection Rules
To construct the power model, we need to collect not only the power consump-
tion data under normal user operations (clean data) for the three power models,
but also dirty data when malware is present for training the decision tree. Con-
strained by the precision of the battery power measurement oﬀered by Symbian
OS, we treat all user operations conducted in one battery segment as a batch to
achieve more accurate detection. As our goal is to detect malware whose activ-
ities lead to abnormal power consumption no matter how long they are active,
we collect clean data under various circumstances for model construction: (1) In
some experiments, our data collection just focuses on a single user operation. For
example, in a battery segment, we only send SMS text messages, and in another
one, we only receive SMS text messages; (2) In some experiments, mixed user
operations are conducted. For example, in a battery segment, we make phone
calls and also receive text messages; (3) For each user operation, we consider var-
ious properties of the activity. For instance, we send text messages with diﬀerent
sizes ranging from ten bytes to a thousand bytes; and (4) In all experiments, we
avoid abnormal conditions, which decrease the accuracy of our power models.
Dirty data are also necessary to train the decision trees. The power consump-
tion of a malware program may vary signiﬁcantly in diﬀerent environments.
For example, diﬀerent usage frequencies or spy call durations on FlexiSPY cause
great diﬀerence in power consumption. In another example, the power consumed
by the Cabir worm depends on how many Bluetooth devices exist in the neigh-
borhood. Based on such considerations, we collect dirty data as follows: (1)
During dirty data collection, we conduct experiments to cover as many diﬀer-
ent scenarios as possible, including both high power consumption cases and low
power consumption cases; and (2) For the purpose of model training, the fraction
of high and low power consumption data samples are randomly selected.
7.3 Stepwise Regression for Data Pre-processing and Time-Series
Data Analysis
The data we have collected, including both clean and dirty data, have 41 variables
that are measurable through the Symbian APIs. To simplify the model by elimi-
nating insigniﬁcant factors, we ﬁrst use the stepwise regression technique [7]
to pre-process the collected data. Stepwise regression is a statistical tool that
helps ﬁnd the most signiﬁcant terms and remove least signiﬁcant ones. Besides
that, stepwise regression also provides information that help to merge variables.
Using stepwise regression, we found that the idle time with signal strength level
6 is insigniﬁcant. This is because in our experimental environment, we often have
good signal strength at level 7. The signal strength 6 is relatively rare. Thus, we
merge the signal strength 6 to the signal strength 7.
To further improve the model accuracy, we collect data samples from multiple
segments and use the average to smooth out the ﬂuctuations due to the internal
VirusMeter: Preventing Your Cellphone from Spies
257
electro-chemical battery properties. Based on this idea, we generate three sets
of input for each power model. If a model is built from data samples collected
in a single battery power segment, we call them “short-term” experiments. If a
model is built from data samples from seven segments, we call them “middle-
term” experiments. Note that Nokia 5500 only has seven battery segments. We
can further feed data samples collected in more than one battery lifecycle. In our
experiments, we use four battery lifecycles, which correspond to 28 segments, and
we call them “long-term” experiments. A stealthy malware that does not con-
sume much power in one segment may not be caught in a short-term detection,
but can be caught in the middle- or long-term detection.
8 Evaluation Results
In this section, we use actual mobile malware, including FlexiSPY, Cabir, and
some variants of Cabir, to evaluate the eﬀectiveness of VirusMeter. FlexiSPY is
a spyware program that runs on either Symbian OS or Blackberry handhelds.
Once installed, it conducts eavesdropping, call interception, GPS tracking, etc.
It monitors phone calls and SMS text messages and can be conﬁgured to send
them to a remote server. We test three major types of misbehaviors supported by
FlexiSPY: eavesdropping (spy call), call interception, and message (text message
and email) forwarding. Figure 6 shows the information ﬂow of FlexiSPY. The
Cabir malware exploit Bluetooth to spread themselves. We obtained 3 Cabir
variants and in the experiments, we used two of them for decision tree training
and the other one for testing.
We have several sets of experiments to examine common malware behaviors
that consume low (such as Cabir), medium (such as text-message forwarding),
and high battery power (such as eavesdropping). We also evaluate false positives
and the runtime overhead, i.e., power consumption, of VirusMeter.
GPRS
FlexiSPY transfer
phone activities log
to FlexiSPY web
FlexiSPY
on target
monitor phone eavesdrops
and controls target 
read SMS, email, call logs
and location on FlexiSPY web
Fig. 6. FlexiSPY Running on Nokia 5500 Sport and the Information Flow
258
L. Liu et al.
Table 1. Detection Rate (%) on Eavesdropping
Short-Term Middle-Term Long-Term
Linear Regression
Neural Network
Decision Tree
85.1
89.3
89.8
89.9
90.9
90.2
87.1
93.0
88.9
8.1 Experiments on Eavesdropping Detection
When using FlexiSPY to eavesdrop on a cellphone, the attacker makes a call to
a previously conﬁgured phone number and then the phone is activated silently
without user authentication. Our power measurement shows that eavesdropping
has a similar power consumption rate as a normal call. In our experiments, we
make spy calls of diﬀerent time durations uniformly ranging from 1 minute to
30 minutes. More than 50 samples are collected in this and each of the following
detection rate experiments. Table 1 shows the detection rates (true positives).
The results show that for eavesdropping, both middle-term and long-term
experiments can improve the detection rates for linear regression and neural
network, compared with short-term detection. In fact, even the short-term lin-
ear regression achieves a detection rate over 85%. This is because eavesdropping
consumes a lot of power, which makes short-term detection quite accurate. Sur-
prisingly, the long-term detection based on linear regression generates a worse
result than mid-term detection. Our conjecture is that due to the inaccurate
linear relationship between variables, more errors may be accumulated in the
long-term experiments, which leads to worse results. This may apply to long-
term decision tree as well.
8.2 Experiments on Call Interception Detection
FlexiSPY can also perform call interceptions, which enables the attacker to mon-
itor ongoing calls. A call interception diﬀers from eavesdropping in that the call
interception can only be conducted when a call is active. After FlexiSPY is in-
stalled, when the victim makes a call to a pre-set phone number, the attacker
will automatically receive a notiﬁcation via text message and silently call the
victim to begin the interception.
In our detection experiments, we again perform call interceptions with dif-
ferent time durations uniformly ranging from 1 minute to 30 minutes. Table 2
shows the detection rate. The short-term linear regression detection results are
Table 2. Detection Rate (%) on Call Interception
Short-Term Middle-Term Long-Term
Linear Regression
Neural Network
Decision Tree
66.8
82.9
84.8
79.5
86.0
86.8
82.4
90.5
86.9
VirusMeter: Preventing Your Cellphone from Spies
259
Table 3. Detection Rate (%) on Text Message Forwarding
Short-Term Middle-Term Long-Term
Linear Regression
Neural Network
Decision Tree
89.5
90.3
88.7
93.0
94.8
89.1
96.4
98.6
90.7
not very good when compared to neural network and decision tree. This is be-
cause the call interception only consumes slightly more battery power than a
normal phone call and it only works when a call is active. But middle-term and
long-term experiments can signiﬁcantly improve the detection rate for linear re-
gression. The results conﬁrm that for stealthy malware that consumes only a
small amount of power, a more accurate model or a longer detection time can
help improve the detection accuracy.
8.3 Experiments on Text-Message Forwarding and Information
Leaking Detection