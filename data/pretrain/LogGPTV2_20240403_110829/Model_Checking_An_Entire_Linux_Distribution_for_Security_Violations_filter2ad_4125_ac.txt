minilogd, which is run by root. This program may unlink
_PATH_LOG (which is deﬁned to be /dev/log by default) if
2The suggested scenario requires that the sticky bit is not set. The sticky
bit prevents deletion of ﬁles and directories for anyone except the creator,
even if others have write access. Generally, /tmp has the sticky bit set.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:43 UTC from IEEE Xplore.  Restrictions apply. 
3.2 A Standard File Descriptor Attack
COO
OOO
The ﬁrst three ﬁle descriptors of each Unix process are
called standard ﬁle descriptors: FD 0 for the standard input
(stdin), FD 1 for the standard output (stdout), and FD 2 for
the standard error (stderr). Several commonly used C stan-
dard library functions read from or write to these standard
ﬁle descriptors; e.g., fgets() reads from stdin, printf()
writes to stdout, and perror() writes to stderr. Programs
that print information intended for the user to see, or diag-
nostic information, typically do so on FDs 1 and 2. Cus-
tomarily, a program starts with its standard ﬁle descriptors
opened to terminal devices. However, since the kernel does
not enforce this convention, an attacker can force a standard
ﬁle descriptor of a victim program to be opened to a sensi-
tive ﬁle, so that he may discover conﬁdential information
from the sensitive ﬁle or modify the sensitive ﬁle.
For example, suppose a victim program is setuid-root3
and executes the following code:
/* victim.c */
fd = open("/etc/passwd", O_RDWR);
if (!process_ok(argv[0])) perror(argv[0]);
Then the adversary can run the following attack program
to exploit the standard ﬁle descriptor vulnerability in the
victim program:
/* attack.c */
int main(void) {
close(2);
execl("victim",
"foo::0:1:Super-User-2:...", NULL);
}
This attack works as follows. First, the attack program
closes FD 2 and executes victim.c. A child process will
inherit the ﬁle descriptors from the parent process; conse-
quently, the victim program starts with FD 2 closed. Then,
when the victim opens the password ﬁle /etc/passwd, the
ﬁle is opened to the smallest available ﬁle descriptor—in
this case, FD 2. Later, when the victim program writes an
error message by calling perror(), which writes to FD 2,
the error message is appended to /etc/passwd. Due to the
way the attacker has chosen this error message, the attacker
may now log in with superuser privileges. These bugs are
particularly dangerous when the attacker can inﬂuence the
data written to the standard FD.
In the previously discussed vulnerability, the attacker is
able to append content to an important system ﬁle. One can
envision similar attacks on the stdin ﬁle descriptor in which
the attacker can read content from a ﬁle that is not intended
3A setuid-root program runs with root privileges, even if it is executed
by an unprivileged user.
CCO
OCO
COC
OOC
CCC
OCC
Figure 2. The structure of an FSA for ﬁnd-
ing ﬁle descriptor vulnerabilities. This FSA
tracks the state of the three standard ﬁle de-
scriptors across open() calls.
to be publically available. To stage such an attack, the ma-
licious program would ﬁrst close FD 0, then execute the
privileged program containing code that unwittingly tries to
read from stdin. The vulnerable program will now instead
read data that is from the attacker’s choosing, and possibly
disclose conﬁdential information in the process. Note that
the program must relay the information it has learned back
to the attacker, either directly or through a covert channel.
The latter means of disclosure is impossible to detect using
the single program analysis techniques we employ.
The way to prevent these types of attacks is simple—a
program that runs as setuid-root should ensure that the three
lowest numbered ﬁle descriptors are opened to a known
safe state prior to carrying out any important operations. A
common way to do this is by opening a safe ﬁle, such as
/dev/null, three times when the program ﬁrst starts up. In
the case that someone tries to attack the program by closing
one or more of the ﬁle descriptors prior to executing the vic-
tim program, no harm is done because they are re-opened to
point to /dev/null. This solution is usually acceptable be-
cause the overhead is only three system calls. In the case
that all 3 FDs were already opened, the program also con-
sumes three ﬁle descriptor slots.
Our FSA used in this property (see Figure 2) contains
eight states that are used to describe a unique combination
of the states of the three standard ﬁle descriptors 0, 1 and 2.
For example, the state OCC represents that FD 0 is open, but
FD 1 and FD 2 are closed. The program may start in any
of the seven states where at least one of the three standard
FDs is closed; the case where all of the standard FDs are ini-
tially open is the usual one, and not of interest to an attacker.
The starting state will be chosen nondeterministically dur-
ing the model checking phase to insure all possibilities are
explored. Transitions in the FSA occur only along the edges
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:43 UTC from IEEE Xplore.  Restrictions apply. 
of the cube, as there are no system calls that can change the
status of multiple standard ﬁle descriptors at once.
The basic FSA structure in Figure 2 is not entirely com-
plete, as we have not shown the error state. For detecting the
class of attacks which can cause the vulnerable program to
write to arbitrary ﬁles, we add a new error state and a transi-
tion to the error state when a ﬁle that is neither /dev/null nor
/dev/tty is opened on FD 1 or 2 in a mode other than read-
only. For detecting the class of attacks that may disclose
the contents of secret ﬁles, we add transitions to the error
state from the four states in which FD 0 is closed (COO, COC,
CCO, and CCC), and a ﬁle other than /dev/null or /dev/tty is
opened for reading. These two transitions are seperated into
two different automata, to give the two properties.
To save space, we have not labeled the transitions along
the edges of the cube. These transitions are taken for sys-
tem calls that are considered a “safe” open—that is, when
/dev/null or /dev/tty is opened. For example, if the current
state is COC and a “safe” open is encountered, then the new
state is OOC, since the ﬁle will be opened on the lowest-
numbered available FD.
We have audited the programs that run as setuid root on
our Linux distribution, and have identiﬁed a number of bugs
(but not exploitable vulnerabilities at this time). In many
cases, an attacker can cause a setuid program to write data
not of her choosing to temporary ﬁles, lock ﬁles, or PID ﬁles
(ﬁles used to store the process ID of the currently running
service). These situations can be potential vulnerabilities
if some other program trusts the contents of the PID ﬁle.
For example, consider a system administration script for
restarting some network daemon that executes kill ‘cat
pidfile‘. If the attacker exploits a setuid program that
writes to this PID ﬁle to introduce a line of the form “PID;
rm /etc/passwd” into the PID ﬁle, then the administra-
tion script might unwittingly remove /etc/passwd when
it is next run. We have not yet found any fully exploitable
scenario like this, but the fact that some setuid programs al-
low corrupting PID ﬁles like this is perhaps room for some
concern.
An example of a bug we found in the program gnuchess,
a chess playing application, follows:
int main(int argv, char *argv[]){
... BookBuilder(depth, ...); ...
}
void BookBuilder(short depth, ...){
FILE *wfp,*rfp;
if (depth == -1 && score == -1) {
if ((rfp = fopen(BOOKRUN,"r+b")) != NULL) {
printf("Opened existing book!\n");
} else {
printf("Created new book!\n");
wfp = fopen(BOOKRUN,"w+b");
fclose(wfp);
if ((rfp = fopen(BOOKRUN,"r+b"))
== NULL) {
printf("Could not create %s file\n",
BOOKRUN);
return;
}
...
}
The function BookBuilder is called to manipulate and
read from the playbook used by the game. Although there
is no attack to compromise security, it is easy to see the bug.
The playbook can become corrupted when a malicious user
closes all ﬁle descriptors except standard out, and invokes
the gnuchess program. The ﬁle BOOKRUN will then be
opened onto standard out, and the subsequent writes from
printf() can corrupt the book.
The full version of the paper lists results from apply-
ing MOPS to all Redhat 9 setuid programs. There were
two main sources of false positives: 1) the property does
not track the UID privilege changes inside the program, so
the program may drop privileges before opening ﬁles, and
2) the property did not recognize that the program safely
opened /dev/null three times, due to a nonstandard invoca-
tion of safe opens. Unfortunately these are difﬁcult false
positives to recognize, because they require the user to look
at the trace in its entirety as opposed to the usual points of
interest (line numbers that caused transitions in the FSA).
The presentation of our results differentiates betweens bugs
and exploits. For this property, we classify bugs as program-
ming mistakes that can cause unexpectd program behavior,
but not necessarily lead to any compromise of security. For
example, an attack that can compromise the contents of a
non-important ﬁle, such as a lockﬁle, falls under the cate-
gory of a bug. An exploit needs to have security concerns—
we have found none of these to date. However, it was sur-
prising that many setuid programs did not open /dev/null
three times before performing ﬁle operations, given that it
has low overhead and guarantees safety with regards to this
property.
3.3 Secure Temporary Files
Applications often use temporary ﬁles as a means for
passing data to another application, writing log information,
or storing temporary data. Often times on a Unix system,
the ﬁles will be created in the /tmp directory, which is world
writable and readable. For example, the GNU C compiler
creates temporary ﬁles when it is compiling programs, and
later passes them to the linker. Many of the functions to cre-
ate temporary ﬁles that are found in the C standard library
are insecure. The reason is that they do not return a ﬁle de-
scriptor, but rather a ﬁle name. An adversary that is able to
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:43 UTC from IEEE Xplore.  Restrictions apply. 
mkstemp(x)
FSsyscall(x)
}
tmpnam()
tempnam()
mktemp()
tmpfile()
Figure 3. An FSA to detect insecure uses of
temporary ﬁles.
predict the ﬁlename can thus create the ﬁle before the ap-
plication has a chance to open or create it. This attack can
give the adversary ownership of the temporary ﬁle, which is
undesirable4.
We identiﬁed the set of insecure functions: mktemp,
tmpnam, tempnam, and tmpfile. These functions should
never be used. There is one function that can be secure, de-
pending on how it is used: mkstemp. Security requires that
the ﬁlename retrieved from mkstemp is never subsequently
used in another system call: mkstemp returns both a ﬁle de-
scriptor and a ﬁlename, but a secure program should not use
the ﬁlename. Figure 3 illustrates our automaton.
Below we show a representative example of a program
that violates the clause of our property that ﬁnds reuses
of the parameter passed to mkstemp. Not only is this the
most complicated example presented thus far, but it shows
how the whole-program inter-procedural analysis was ef-
fective. The code will be presented in several fragments as
they occur temporally while executing the program. The
example comes from the program yacc from the package
byacc-1.9-25.
static void open_files() {
int fd;
create_file_names();
if (input_file == 0) {
input_file = fopen(input_file_name, "r");
if (input_file == 0)
open_error(input_file_name);
fd = mkstemp(action_file_name);
if (fd = 0)
close(fd);
open_error(action_file_name);
}
4In the gcc example, an adversary could insert malicious code into a
user’s program by replacing the temporary ﬁle with the desired code.
there is
Before the above program fragment executes,