然后就可以列出艺术家Dixie Chicks的所有记录。这又证明了当初选择用列表来保存记录是明智的。
用一种方式来查询数据，比如类似于下面这样的语句。
会出现足够多的记录，但你并不想为了查看它里面有什么而每次都把整个数据库导出来。需要采
3.6
因此，如果已经用add-recora或者add-cds添加了尚未用save-db保存的记录，就将失去它们。
那些列表组成的列表。需要特别注意一件事—load-db会破坏其被调用之前*db*里面的东西.
结果。因此在load-ab里，变量*db*将含有从文件中读取的对象，也就是由save-ab所写入的
时相同的基本语法。
并不会对它求值。WITH-STANDARD-IO-SYNTAX宏再一次确保READ使用和saVe-db在打印数据
读取器，可以读取你在REPL提示符下输人的任何Lisp表达式。但本例中只是读取和保存表达式
值:input。并且与打印相反，所做的是使用函数READ来从流中读入。这是与REPL使用的相同的
里输人*db*时看到的东西差不多。
举个例子，假如要从一个由数字组成的列表里抽出所有偶数来，就可以像下面这样来使用
SETF宏是Common Lisp最主要的赋值操作符。它将其第一个参数设置成其第二个参数的求值
24
① Windows事实上可以理解文件名中的正斜杠（/），尽管它正常情况下是使用反斜杠（\）作为目录分隔符的。这是
函数REMOVE-IF-NOT接受一个谓词和一个原始列表，然后返回一个仅包含原始列表中匹配
((01 6 8 97 ): :# --)  (remove-if-not
注意，lambda并不是函数的名字一
(defun select-by-artist (artist)
(13579)
CL-USER> (remove-if-not #'(lambda (x) (= 1 (mod x 2))) '(1 2 3 4 5 6 7 8 9 10))
(lambda (x） (= 0 (mod x 2)))
在这种情况下，谓词是下面这个匿名函数：
CL-USER> (remove-if-not #'(lambda (x) (= 0 (mod x 2))) '(1 2 3 4 5 6 7 8 9 10))
这里的谓词是函数EVENP，当其参数是偶数时返回真。那个有趣的#记号是“获取函数，其
化方法。
(:TITLE "Fly" :ARTIST "Dixie Chicks" :RATING 8 :RIPPED T))
((:TITLE "Home":ARTIST "Dixie Chicks"
(246810)
(remove-if-not
#'(lambda (cd)
*db*）}
#'(lambda (cd) (equal (getf cd :artist) artist))
{equal
(getf cd :artist) "Dixie Chicks")) *db*)
www.TopSage.com
一它只是一个表明你正在定义匿名函数的指示器。?但除
:RATING9:RIPPEDT)
3.6·查询数据库
---
## Page 43
实参来调用的函数，关键字形参就是其中一种实现方式。使用关键字形参的foo版本可能看起来
有3个形参，a、b和c，并且必须用3个实参来调用。但有时可能想要编写一个可以用任何数量的
例如，下列函数：
下关键字形参（keyword parameter）的有关内容。
不同字段甚至字段组合的选择器函数。完全可以写出这样一个函数来，不过首先需要快速学习一
生成器。那么为什么不写一个通用的选择器函数生成器呢？让它根据传递给它的参数，生成用于
by-rating等雷同的东西那样，你也不会想去写一大堆长相差不多每个字段写一个的选择器函数
面的select调用了：
将得到另一个匹配:artist字段为"LyleLovett"的函数。所以现在可以像下面这样来重写前
其:artist字段为"Dixie Chicks"的CD的匿名函数，而如果用"LyleLovett"来调用它，就
作—如果用参数"DixieChicks"调用artist-selector，那么将得到一个可以匹配
后将不会存在的变量。?尽管现在可能看起来有些奇怪，但它确实可以按照你所想象的方式来工
在对select的调用中，#'还是会出现。
函数。它应该使用的是一个作为select的实参传递到变量selector-fn里的匿名函数。不过,
了。换个做法，可以做出一个更加通用的select函数来，它接受一个函数作为其实参。
法的一种，还可以编写其他几个函数，诸如select-by-title、select-by-rating、
(defun foo (a b c) (list a b c))
目前写过的函数使用的都是一个简单的形参列表，随后被绑定到函数调用中对应的实参上。
26
①一个引用了其封闭作用域中变量的函数，称为闭包——因为函数“封闭包装”了变量。我将在第6章里讨论闭包
现在只需要用更多的函数来生成选择器了。但正如不想编写select-by-title、select-
CL-UsER> (select (artist-selector "Dixie Chicks"))
这是一个返回函数的函数，并且返回的函数里引用了一个似乎在artist-selector返回以
但这样看起来相当乱。所幸可以将匿名函数的创建过程包装起来。
CL-USER> (select #'(lambda (cd) (equal (getf cd :artist) "Dixie Chicks")))
但是#哪里去了？这是因为你并不希望REMOvE-IF-NOT在此使用一个名为selector-fn的
以上就是select-by-artist。尽管如此，通过艺术家来搜索只是你想要支持的各种查询方
((:TITLE "Home"
(defun artist-selector (artist)
((:TITLE
(defun select (selector-fn)
的更多细节。
#'(lambda (cd) (equal (getf cd :artist) artist)))
(:TITLE "Fly" :ARTIST "Dixie Chicks"
(remove-if-not selector-fn *db*))
第3章实践：简单的数据库
:ARTIST "Dixie Chicks"
:ARTIST
"Dixie Chicks*
www.TopSage.com
:RATING 8:RIPPED T))
:RATING 9 :RIPPED T)
:RATING 9 :RIPPED T)
---
## Page 44
中的一个字段。每个子句会检查相应的参数是否被传递进来，然后要么将其跟CD记录中对应字
或是这样：
函数，后者可以选出任何匹配where子句的CD。例如，它可以让你写出这样的语句来：
什么叫它where了。
函数调用里是否真的被传入相应的关键字形参中。下面是-个使用了该特性的foo版本：
supplied-p形参的列表。这个supplied-p形参可被设置成真或假，具体取决于实参在特定的
一个关键字形参时，可以将那个简单的名称替换成一个包括形参名、默认值和另一个称为
有时你可能想要区分作为实参显式传递给关键字形参的NIL和作为默认值的NIL。为此，在指定
及它们与其他类型形参的关系等诸多细节在此不予赞述，不过你还需要知道其中一点。
特定的关键字在调用中没有指定，那么对应的变量将被设置成NIL。关于关键字形参如何指定以
是截然不同的。下面这些调用都是合法的，同时在→的右边给出了相应的结果。
是这样的：
正常情况下，如果所调用的函数没有为特定关键字形参传递实参，该形参的值将为NIL。但
这个函数返回一个匿名函数，后者返回一个逻辑AND，而其中每个子句分别来自我们CD记录
(select (where :artist "Dixie Chicks"))
它与前者唯一的区别在于形参列表的开始处有一个&key。但是，对这个新foo的调用方法将
该函数看起来是这样的：
(select (where :rating 10 :ripped nil))
通用的选择器函数生成器where是一个函数，如果你熟悉SQL数据库的话，就会逐渐明白为
前面给出同样的调用将产生下面的结果：
(defun foo (&key a (b 20) (c 30 c-p)) (list ab c c-p)) 
这些示例显示，变量a、b和c的值被绑定到了跟在相应的关键字后面的值上。并且如果一个
(defun foo (&key a b c) (list a b c))
(defun where (&key title artist rating (ripped nil ripped-p))
(foo)
Hoo
(foo :c
(foo :a 1 :b 2 :c 3) → (1 2 3 T)
（foo)
(foo
foo
:a 1:c 3)
:a
{and
(if ripped-p (equal 
(if title
if
:C
:b
rating
artist
2
3）
，它接受对应于我们的CD记录字段的四个关键字形参，然后生成一个选择器
2:a 1)-
:a 1）
(equal
equal
(equal
↑
↑
→
一→
(NIL 20 30 NIL)
（1
(NIL NIL NIL)
(1NIL 3)
(12
(123)
(getf cd :ripped) ripped) t))))
(getf cd :title)
23)
(getf
(getf
www.TopSage.com
:artist)
title)
rating)
artist)
t
3.6查询数据库
27
---
## Page 45
式求值：
觉得自己真的很喜欢DixieChicks，并且他们的所有专辑的评级应该升到11，那么可以对下列形
的plist将具有紧跟着属性名：title后面的那项变量title的值。有了这个update函数，如果你
系。）眼下知道执行（setf（getf row：title）title)以后的结果就可以了：由row所引用
变量进行赋值即可。（SETF和GETF具有相似的名字，但这纯属巧合，两者之间并没有特别的关
详细讨论SETF，目前只需知道它是一个通用的赋值操作符，可用于对各种“位置”而不只是对
上调用一个函数所得到的结果。
其映射在一个列表上（这里是*db*），然后返回一个新的列表，其中含有在原来列表的每个元素
记录，再使用关键字形参来指定需要改变的值。这里主要出现的新内容是对MAPCAR函数的使用，
数只是你已经见过的一些思路的再应用：使用一个通过参数传递的选择器函数来选取需要更新的
这听起来像是个很好的模型，尤其是当已经有了一个where子句生成器时。事实上，update函
了——更新特定记录的方法。在SQL中，update命令被用于更新一组匹配特定where子句的记录。
3.7
ripped字段的值”。
ripped字段为nil的CD”，或者是否它们将：ripped整个扔下不管了，意思是“我不在乎那个
键字形参ripped，因为你需要知道调用者是否实际传递了：rippednil，意思是“选择那些
将只在CD记录匹配所有传递给where的参数时才返回真。?注意到需要使用三元素列表来指定关
段的值相比较，要么在参数没有传进来时返回t，也就是Lisp版本的逻辑真。这样，选择器函数
2
①注意，在Lisp中，IF形式和其他所有东西一样，是一个带有返回值的表达式。它事实上更像是Perl、Java和C语言