seconds after the original page has completed loading. This is
done by using a JavaScript snippet that dynamically inserts a
HTML object tag that loads the SWF ﬁle into the web page
visited by the user. Basically, the script is triggered only after
the original page ﬁnishes loading, and further waits a few
seconds, before actually inserting the applet. Additionally, we
built server-side mechanisms to allow granular control over
the sampling rates in speciﬁc countries or networks. This
granularity enables us to increase the sampling rate for certain
populations in response to the detection of a speciﬁc attack.
To support Flash-based socket connections used by our SWF
ﬁles, we have set up Flash socket policy servers that listens on
port 843 of the website, which are conﬁgured with a socket
policy ﬁle that allows only its own applets to open socket
connections to port 443. We also setup a logging endpoint
on the HTTPS servers, in PHP, that parses the reports, and
aggregates data into our back-end databases. The extracted
Fig. 4. Browser usage share of sampled clients. Note that given our sampling
parameters, this is not directly representative of the entire population of
Facebook’s website.
NUMBER OF CLIENTS THAT COMPLETED EACH STEP OF THE DETECTION
TABLE I
PROCEDURE
Procedure
Count
1. Inserted HTML object tag into web page
2. Downloaded SWF ﬁle from server
3. Sent report to logging server
9, 179, 453
6, 908, 675
5, 415, 689
SSL certiﬁcates were processed and read using the OpenSSL
library. In addition, we built an internal web interface for
querying the log reports.
D. Experimentation
Using the Flash-based detection method, we conducted the
ﬁrst large-scale experiment in an attempt to catch forged SSL
certiﬁcates in the wild. We served our client-side applet to
a set of randomly sampled clients on Facebook’s website.
We collected and analyzed data from November 20, 2012 to
March 31, 2013.2 Our dataset consists of reports from a variety
of browsers, shown in Figure 4. The most popular browser
versions in our dataset were (in descending order) Chrome
23, Chrome 24, Internet Explorer 9, Chrome 25, and Firefox
18.
First of all, we noticed that only a portion of the sampled
clients actually completed our detection procedure, explained
below. As shown in Table I, a total of 9, 179, 453 page
views on Facebook’s desktop website had our HTML object
tag dynamically inserted. Our web servers logged 6, 908, 675
actual downloads for the SWF ﬁle. The download count for
the SWF ﬁle was noticeably lower than the number of object
tags inserted. We reason that this is possibly due to: (1) the
Flash Player plugin was not enabled on the client, (2) a few
legacy browsers did not support our SWF object embedding
method, or (3) the user navigated away from the web page
before the object tag was loaded. Our log servers received
a total of 5, 415, 689 reports from applets upon successful
execution. Again, the number of received reports is lower than
the number of SWF ﬁle downloads. This is likely due to the
web page being closed or navigated away by the user, before
the applet was able to ﬁnish execution.
2Personally identiﬁable information (IP addresses and HTTP cookies) were
removed from our database after a 90-day retention period.
88
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 07:14:31 UTC from IEEE Xplore.  Restrictions apply. 
(cid:23)(cid:18)(cid:20)(cid:24)(cid:18)(cid:20)(cid:22)(cid:69)(cid:85)(cid:82)(cid:90)(cid:86)(cid:72)(cid:85)(cid:17)(cid:75)(cid:87)(cid:80)(cid:79)(cid:73)(cid:76)(cid:79)(cid:72)(cid:29)(cid:18)(cid:18)(cid:79)(cid:82)(cid:70)(cid:68)(cid:79)(cid:75)(cid:82)(cid:86)(cid:87)(cid:18)(cid:56)(cid:86)(cid:72)(cid:85)(cid:86)(cid:18)(cid:79)(cid:76)(cid:81)(cid:86)(cid:75)(cid:88)(cid:81)(cid:74)(cid:75)(cid:88)(cid:68)(cid:81)(cid:74)(cid:18)(cid:39)(cid:85)(cid:82)(cid:83)(cid:69)(cid:82)(cid:91)(cid:18)(cid:47)(cid:68)(cid:55)(cid:72)(cid:59)(cid:18)(cid:73)(cid:69)(cid:66)(cid:80)(cid:76)(cid:87)(cid:80)(cid:18)(cid:69)(cid:85)(cid:82)(cid:90)(cid:86)(cid:72)(cid:85)(cid:17)(cid:75)(cid:87)(cid:80)(cid:79)(cid:20)(cid:18)(cid:20)(cid:38)(cid:75)(cid:85)(cid:82)(cid:80)(cid:72)(cid:41)(cid:76)(cid:85)(cid:72)(cid:73)(cid:82)(cid:91)(cid:44)(cid:81)(cid:87)(cid:72)(cid:85)(cid:81)(cid:72)(cid:87)(cid:3)(cid:40)(cid:91)(cid:83)(cid:79)(cid:82)(cid:85)(cid:72)(cid:85)(cid:54)(cid:68)(cid:73)(cid:68)(cid:85)(cid:76)(cid:50)(cid:83)(cid:72)(cid:85)(cid:68)(cid:50)(cid:87)(cid:75)(cid:72)(cid:85)(cid:23)(cid:27)(cid:17)(cid:26)(cid:8)(cid:26)(cid:17)(cid:24)(cid:8)(cid:20)(cid:27)(cid:17)(cid:26)(cid:8)(cid:21)(cid:21)(cid:17)(cid:26)(cid:8)TABLE II
CATEGORIZATION OF REPORTS
Type
Count
Well-formed certiﬁcates
Flash socket errors
Empty reports
Bogus reports
HTTP responses
3, 447, 719 (64%)
1, 965, 186 (36%)
2, 398 (0%)
290 (0%)
96 (0%)
Next, we noticed that only 64% out of the 5, 415, 689 re-
ceived reports contained complete and well-formed certiﬁcate
records, as shown in Table II. We observed that 1, 965, 186
(36%) of the reported data indicated that the client caught
SecurityErrorEvent or IOErrorEvent exceptions in the Flash
Player and failed to open a raw socket. We believe that most
of these errors were caused by ﬁrewalls blocking the socket
policy request (for example, whitelisting TCP ports 80 and 443
to only allow web trafﬁc), thus not allowing the Flash Player to
retrieve a valid socket policy ﬁle from our socket policy servers
(over port 843). For clients behind these ﬁrewalls, we were not
able to open socket connections using Flash Player, although
using Java might have worked in some legacy client platforms.
We discuss in Section III-E that similar measurements can be
conducted on native mobile platforms to avoid the drawbacks
of Flash sockets.
In addition to the Flash socket errors, we also observed a
few other types of erroneous reports. There were 2, 398 reports
that were empty, indicating that the SWF ﬁle failed to receive
any certiﬁcates during the SSL handshake. This might have
been caused by ﬁrewalls that blocked SSL trafﬁc (port 443).
There were 96 reports that received HTTP responses during
the SSL handshake, mostly consisting of error pages (HTTP
400 code) or redirection pages (HTTP 302 code). These
responses suggest that some intercepting proxies contained
logic that were modifying the client’s web trafﬁc to block
access to certain websites (or force redirection to certain web
pages, known as captive portals). We found that some clients
received a HTML page in plaintext over port 443, for instance,
linking to the payment center of Smart Bro, a Philippine
wireless service provider. These type of proxies do not appear
to eavesdrop SSL trafﬁc, but they inject unencrypted HTTP
responses into the client’s web trafﬁc.
In addition, there were 290 reports that contained garbled
bytes that could not be correctly parsed by our scripts. Al-
though we could not successfully parse these reports, manual
inspection determined that 16 of the reports contained seem-
ingly legitimate VeriSign certiﬁcates that had been truncated in
transit, presumably due to lost network connectivity. Another
37 of these reports appear to be issued by Kurupira.NET, a
web ﬁlter, which closed our SSL connections prematurely.
We also found that 17 of the unrecognized POST requests
on our log servers were sent from a Chrome extension called
Tapatalk Notiﬁer (determined by the HTTP origin header),
however we have no evidence that these false POST requests
were intentional.
Finally, we successfully extracted 3, 447, 719 (64%) well-
formed certiﬁcates from the logged reports. We used custom
scripts (mentioned in Section III-B2) to parse the recorded
SSL handshake bytes. A total of 3, 440, 874 (99.8%) out of
3, 447, 719 observed certiﬁcates were conﬁrmed to be the
website’s legitimate SSL certiﬁcates, by checking the RSA
public keys (or more strictly, by comparing the observed
certiﬁcate bit-by-bit with its legitimate certiﬁcates). We note
that there were multiple SSL certiﬁcates (thus, multiple RSA
public keys) legitimately used by Facebook’s SSL servers
during the period of our study,
issued by publicly-trusted
commercial CAs including VeriSign, DigiCert, and Equifax.
Most interestingly, we discovered that 6, 845 (0.2%) of the
observed certiﬁcates were not legitimate, nor were they in
any way approved by Facebook. We further examine these
captured forged certiﬁcates in Section IV.
E. Limitations
Before we move on, we offer insights on the limitations
of our detection method. It is important to point out that the
goal of our implementation was not to evade the SSL man-in-
the-middle attacks with our detection mechanism. Admittedly,
it would be difﬁcult to prevent professional attackers that are
fully aware of our detection method. We list below some ways
that an attacker might adaptively evade our detection:
• Attackers may corrupt all SWF ﬁles in transmission, to
prevent our client-side applet from loading. However, this
approach would cause many legitimate applications using
SWF ﬁles to break. Of course, the attacker could narrow
the scope of SWF blacklisting to include only the speciﬁc
SWF ﬁles used in this detection. In response, websites
may consider randomizing the locations of their SWF
ﬁles.
• Attackers may restrict Flash-based sockets by blocking
Flash socket policy trafﬁc on port 843. To counter this,
websites could possibly serve socket policy ﬁles over
ﬁrewall-friendly ports (80 or 443), by multiplexing web
trafﬁc and socket policy requests on their servers. In
addition, websites could try falling back to Java applets
on supporting clients if Flash-based sockets are blocked.
• Attackers may try to avoid intercepting SSL connections
made by the Flash Player. However, the website may
tailor its client-side applet to act similarly to a standard
browser.
• In theory, attackers could possibly tamper the reports
(assuming that the measured client was under an SSL
man-in-the-middle attack, and probably clicked through
SSL warnings, if any), and trick our log servers to believe
that
the website’s legitimate certiﬁcate was observed.
Under this scenario, the website may need additional
mechanisms to verify the integrity of their reports.
At the time of this study, there is no reason to think that
any attacker is tampering our reports, or even aware of our
detection method. We do not consider attackers that have
89
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 07:14:31 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III
FORGED CERTIFICATE CHAIN SIZES
Size (bytes)
0 - 1000
1000 - 2000
2000 - 3000
3000 - 4000
4000 - 5000
5000 - 6000
6000 - 7000
Count
6,154 (90%)
508 (7%)
140 (2%)
29 (0%)
2 (0%)
23 (0%)
13 (0%)
obtained access to Facebook’s internal servers. As shown
in Section III-D, our current methodology has successfully
captured direct evidences of unauthorized SSL interceptions in
the wild. However, if more websites become more aggressive
about this sort of monitoring, we might get into an arms race,
unfortunately.
Fortunately, many popular websites nowadays have the op-
tion to leverage their native mobile applications for detecting
attacks. While our initial
implementation targeted desktop
browsers, we suggest that similar mechanisms can be im-
plemented, more robustly, on mobile platforms such as iOS
and Android.3 Native mobile applications have the advantage
of opening socket connections without Flash-based socket
policy checks, and are more difﬁcult for network attackers
to bypass (since the Flash applet is no longer necessary, and
native applications can be programmed to act exactly like
a standard browser). Furthermore, mobile clients can also
implement additional defenses (e.g. certiﬁcate pinning [22])
to harden itself against SSL man-in-the-middle attacks (e.g.
preventing the tampering of reports), while performing similar
measurement experiments.
IV. ANALYSIS OF FORGED SSL CERTIFICATES
From the experiments in Section III-D, we collected 6, 845
forged certiﬁcates from real-world clients connecting to Face-
book’s SSL servers. In this section, we analyze the root cause
of these injected forged SSL certiﬁcates. First, we survey the
characteristics of the forged certiﬁcate chains, including the
certiﬁcate chain sizes, certiﬁcate chain depths, and public key
sizes. Subsequently, we examine the subject names and the
issuer names of the forged certiﬁcates.
A. Size Characteristics
We ﬁrst examine the size characteristics of the forged SSL
certiﬁcates, as follows:
• Certiﬁcate chain sizes. Table III summarizes the total
sizes in bytes of the forged certiﬁcate chains. Notably,
most of the forged certiﬁcate chains were actually very
small (less than a kilobyte). By manual inspection, these
small certiﬁcates were generally self-signed certiﬁcates
3After our initial study, Facebook has implemented our methodology across
their native mobile applications.
90
TABLE IV
FORGED CERTIFICATE CHAIN DEPTHS
Depth
1
2
3
4
5
Count
6,173 (90%)
617 (9%)
19 (0%)
34 (0%)
2 (0%)
PUBLIC KEY SIZES OF FORGED SERVER CERTIFICATES
TABLE V
Public Key Size (bits)
512
1024
2048
Count
119 (2%)
3,447 (50%)
3,279 (48%)
that did not include any intermediate CA certiﬁcates (thus