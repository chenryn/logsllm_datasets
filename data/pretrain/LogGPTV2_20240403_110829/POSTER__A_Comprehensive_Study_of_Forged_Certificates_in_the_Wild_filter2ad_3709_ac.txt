### Optimized Text

After the original page has fully loaded, a JavaScript snippet dynamically inserts an HTML `<object>` tag to load an SWF file into the web page. This script is triggered only after the initial page loading is complete and then waits a few seconds before inserting the applet. Additionally, we have implemented server-side mechanisms to provide granular control over sampling rates in specific countries or networks. This allows us to adjust the sampling rate for certain populations in response to detected attacks.

To support Flash-based socket connections used by our SWF files, we have set up Flash socket policy servers that listen on port 843 of the website. These servers are configured with a socket policy file that permits only our applets to open socket connections to port 443. We also established a logging endpoint on the HTTPS servers using PHP to parse and aggregate data into our backend databases. The SSL certificates were processed and read using the OpenSSL library. Furthermore, we developed an internal web interface for querying the log reports.

### D. Experimentation

Using the Flash-based detection method, we conducted the first large-scale experiment to detect forged SSL certificates in the wild. We served our client-side applet to a randomly sampled set of clients on Facebook’s website. Data collection and analysis took place from November 20, 2012, to March 31, 2013. Our dataset includes reports from various browsers, as shown in Figure 4. The most popular browser versions in our dataset were Chrome 23, Chrome 24, Internet Explorer 9, Chrome 25, and Firefox 18.

#### Detection Procedure Completion

We observed that only a portion of the sampled clients completed the entire detection procedure. Table I summarizes the steps and the number of clients who completed each step:

| **Procedure** | **Count** |
|---------------|-----------|
| Inserted HTML object tag into web page | 9,179,453 |
| Downloaded SWF file from server | 6,908,675 |
| Sent report to logging server | 5,415,689 |

The number of SWF file downloads (6,908,675) was lower than the number of object tags inserted (9,179,453). This discrepancy may be due to:
1. The Flash Player plugin not being enabled on the client.
2. Some legacy browsers not supporting our SWF object embedding method.
3. Users navigating away from the web page before the object tag was loaded.

Similarly, the number of received reports (5,415,689) was lower than the number of SWF file downloads. This is likely because the web page was closed or navigated away from before the applet could complete execution.

#### Categorization of Reports

Table II categorizes the types of reports we received:

| **Type** | **Count** |
|----------|-----------|
| Well-formed certificates | 3,447,719 (64%) |
| Flash socket errors | 1,965,186 (36%) |
| Empty reports | 2,398 (0%) |
| Bogus reports | 290 (0%) |
| HTTP responses | 96 (0%) |

Out of the 5,415,689 received reports, 64% contained complete and well-formed certificate records. We observed that 36% of the reported data indicated that the client caught `SecurityErrorEvent` or `IOErrorEvent` exceptions in the Flash Player, failing to open a raw socket. Most of these errors were likely caused by firewalls blocking the socket policy request, preventing the Flash Player from retrieving a valid socket policy file from our servers.

Other erroneous reports included:
- 2,398 empty reports, suggesting the SWF file failed to receive any certificates during the SSL handshake.
- 96 reports that received HTTP responses, indicating intercepting proxies modifying web traffic.
- 290 reports containing garbled bytes, which manual inspection determined to be truncated VeriSign certificates or prematurely closed SSL connections by Kurupira.NET, a web filter.

#### Valid Certificates

We successfully extracted 3,447,719 (64%) well-formed certificates from the logged reports. Of these, 99.8% (3,440,874) were confirmed to be legitimate SSL certificates used by Facebook, issued by publicly-trusted CAs such as VeriSign, DigiCert, and Equifax. Interestingly, 6,845 (0.2%) of the observed certificates were not legitimate and were not approved by Facebook.

### E. Limitations

Our detection method has several limitations. It is important to note that our goal was not to evade SSL man-in-the-middle attacks but to detect them. Professional attackers aware of our method could potentially evade detection by:
- Corrupting all SWF files in transmission.
- Blocking Flash socket policy traffic on port 843.
- Avoiding interception of SSL connections made by the Flash Player.
- Tampering with the reports to make them appear legitimate.

At the time of this study, there was no evidence of attackers tampering with our reports or being aware of our detection method. However, if more websites adopt similar monitoring, it could lead to an arms race.

### IV. Analysis of Forged SSL Certificates

From our experiments, we collected 6,845 forged certificates from real-world clients connecting to Facebook’s SSL servers. In this section, we analyze the characteristics of these forged certificates, including their sizes, chain depths, and public key sizes.

#### A. Size Characteristics

- **Certificate Chain Sizes**: Most forged certificate chains were small (less than a kilobyte), typically self-signed certificates without intermediate CA certificates (Table III).
- **Certificate Chain Depths**: Most forged certificates had a chain depth of 1 (Table IV).
- **Public Key Sizes**: The public key sizes of the forged server certificates were primarily 1024 bits and 2048 bits (Table V).

This analysis provides insights into the nature and origins of the forged SSL certificates, helping us better understand and mitigate such security threats.