title:Verifying the Safety of User Pointer Dereferences
author:Suhabe Bugrara and
Alex Aiken
2008 IEEE Symposium on Security and Privacy
Verifying the Safety of User Pointer Dereferences
Suhabe Bugrara
Alex Aiken
Department of Computer Science
Department of Computer Science
Stanford University
Stanford, CA 94305
PI:EMAIL
Abstract
Operating systems divide virtual memory addresses
into kernel space and user space. The interface of a
modern operating system consists of a set of system call
procedures that may take pointer arguments called user
pointers. It is safe to dereference a user pointer if and
only if it points into user space. If the operating system
dereferences a user pointer that does not point into user
space, then a malicious user application could gain con-
trol of the operating system, reveal sensitive data from
kernel space, or crash the machine. Because the oper-
ating system cannot trust user processes, the operating
system must check that the user pointer points to user
space before dereferencing it. In this paper, we present a
scalable and precise static analysis capable of verifying
the absence of unchecked user pointer dereferences. We
evaluate an implementation of our analysis on the en-
tire Linux operating system with over 6.2 million lines of
code with false alarms reported on only 0.05% of deref-
erence sites.
1
Introduction
Operating systems divide virtual memory addresses
into kernel space and user space. The interface of a
modern operating system consists of a set of system call
procedures that may take pointer arguments called user
pointers. It is safe to dereference a user pointer if and
only if it points into user space. If the operating system
dereferences a user pointer that does not point into user
space, then a malicious user application could gain con-
trol of the operating system, reveal sensitive data from
kernel space, or crash the machine [12]. Because the
operating system cannot trust user processes, the oper-
ating system must check that the user pointer points to
978-0-7695-3168-7 /08 $25.00 © 2008 IEEE
DOI 10.1109/SP.2008.15
325
Stanford University
Stanford, CA 94305
PI:EMAIL
aok := access_ok(u);
1: void syscall(int** u) {
2:
int aok; int* cmd;
3:
4:
5:
6:
7:
8:
9:
10: }
if (aok != 0)
cmd := get(u);
else
cmd := 0;
11: int* get(int** y) {
12:
13:
14:
15: }
int* x;
x := *y;
return x;
Figure 1. Example 1
user space before dereferencing it.
Figure 1 gives an example of how a user pointer is
checked before being dereferenced. The example con-
sists of two procedures: syscall and get. The proce-
dure access ok, whose deﬁnition is not provided in the
ﬁgure, returns a non-zero value if and only if its pointer
parameter points into user space. Procedure syscall
is a system call available to user applications. Conse-
quently, its pointer parameter u is a user pointer. Line
4 applies access ok to u to check whether u points
into user space. Subsequently, line 7 calls get with u
under the condition that the return value of the call to
access ok is non-zero which implies that the check on
line 4 succeeded. On line 13, procedure get derefer-
ences its pointer parameter.
In this paper, we present a scalable and precise static
analysis capable of automatically verifying the absence
of unchecked user pointer dereferences. That is, the
analysis provides a formal guarantee that these secu-
rity vulnerabilities do not exist given some standard as-
sumptions, which are discussed later. The unchecked
user pointer dereferences property is an example of a
ﬁnite state safety property, an important class of speci-
ﬁcations extensively studied in previous work [2, 4, 6–8,
10–13, 15]. Intuitively, a ﬁnite-state property associates
one of a ﬁnite set of states with a value at each point
in a program. In particular, the ﬁnite-state characteriza-
tion of the unchecked user pointer dereferences property
uses the set of states {user, unchecked, unsafe}
described in Section 5.
We have implemented our analysis and evaluated its
precision and scalability on the entire Linux 2.6.17.1 op-
erating system. Our implementation reports false alarms
on only 0.05% of dereference sites and uses only 2 an-
notations for scalability. We believe our static analysis
is the ﬁrst automatic veriﬁer to demonstrate this level of
scalability while maintaining soundness and precision.
The key to scalability in our system is the compo-
sitional manner in which a program is analyzed. Each
procedure P is analyzed independently and only infor-
mation about P ’s summary, which captures P ’s behav-
ior with respect to the ﬁnite-state property, is commu-
nicated to other procedures that call P . Analyzing a
procedure independently makes it possible to scale the
analysis to millions of lines of code and still use expen-
sive techniques to maintain necessary precision. In par-
ticular, our analysis is context-sensitive, ﬂow-sensitive,
ﬁeld-sensitive, and intraprocedurally path-sensitive. Our
experience suggests that this level of precision is needed
to keep the number of false alarms low. Procedure sum-
maries abstract the intraprocedural analysis but cause
relatively little loss of information in practice, as pro-
grammers already naturally abstract at procedure bound-
aries. Our combination of precision and scalability
makes near veriﬁcation of interesting safety properties
feasible on large, complex systems.
Our soundness claim makes several standard assump-
tions about the program being analyzed. In particular,
our analysis is not guaranteed to ﬁnd errors that may
arise from unsafe memory operations in C such as buffer
overruns, concurrency, and inline assembly. In addition,
our system fails to converge completely on a few proce-
dures, which means that any errors that depend on those
procedures may not be reported. In our experiment, our
system failed to converge completely on 0.17% of all
procedures in Linux as described in Section 6. Further-
more, our system builds upon an existing alias analy-
sis [9] that fails to converge completely on 10% of all
procedures. However, manual inspection of the alias
analysis results suggests that the alias analysis neverthe-
less conservatively overapproximates the set of concrete
aliases for every procedure. Aside from these caveats,
our system fully veriﬁes the absence of unchecked user
pointer dereferences in the Linux kernel.
1.1 Contributions
This paper makes the following contributions.
• We verify the absence of unchecked user pointer
dereferences given some standard assumptions.
• We present experimental results that evaluate the
scalability and precision of our analysis on a large,
complex, and important program.
• We detail a general framework for summary-based,
path-sensitive static analyses of ﬁnite-state safety
properties.
The rest of this paper is organized as follows. Sec-
tion 2 covers related work. Section 3 deﬁnes the lan-
guage used in our examples and algorithms. Section 4
brieﬂy explains the memory model that handles pointer
aliasing. Section 5 details the safety analysis for ﬁnite-
state properties. Finally, Section 6 presents our experi-
ence and experimental results.
2 Related Work
We brieﬂy describe closely related work on scalable
veriﬁcation of ﬁnite-state properties in general and the
unchecked user pointer dereferences property in partic-
ular.
MECA [16] is a path-insensitive bug ﬁnding tool that
statically ﬁnds operating system security vulnerabilities
such as unchecked user pointer dereferences. MECA is
not sound, which means that it does not provide a formal
guarantee that vulnerabilities of this kind do not exist.
In particular, it does not handle aliasing conservatively
and breaks recursive call chains arbitrarily. Using about
45 manual annotations to suppress false alarms, MECA
found 44 unchecked user pointer dereferences and re-
ported 8 false alarms on Linux 2.5.63.
Sparse [14] is a bug ﬁnding tool developed by the
Linux community that statically ﬁnds unchecked user
pointer dereferences. Linux 2.6.17.1 has more than
9,000 annotations on variables and other constructs be-
lieved to be user pointers. Sparse is not sound and
does not check the correctness of these thousands of
programmer-supplied annotations.
326
CQual [8] is a type-qualiﬁer inference system that
has been used to verify the absence of unchecked user
pointer dereferences of individual modules in earlier
versions of Linux [12]. Solving the monolithic set
of constraints that CQual produces degenerates into a
whole program analysis that requires keeping the entire
program in main memory, thus limiting its scalability to
about 300,000 lines of code. The experiments in [12] are
not directly comparable to ours because their reports are
clustered to avoid redundancy. For example, the single
source causing 111 sink warnings in our system would
count as one report by their methodology. Even so, their
analysis of Linux 2.2.23 produced 227 raw warnings, or
one warning for every 1300 lines of code. We achieve an
order of magnitude improvement in warning density due
to the fact that our system is ﬂow-sensitive and intrapro-
cedurally path-sensitive which are features that CQual
lacks. Several sources of false alarms listed in [12] do
not appear in our experiments, because our analysis is
precise enough to handle them soundly.
Interestingly,
function pointers are not a major cause of false alarms
in [12], although they cause over 1/3 of the false alarms
in our experiments. This is actually consistent with our
experience that accuracy in analyzing function pointers
is not particularly important until one analyzes the entire
operating system including all device drivers.
ESP [4] is a path-sensitive dataﬂow analysis sys-
tem used to verify probing, the Windows version of
unchecked user pointer dereferences [6]. Their exper-
iment reports warnings on 30 of the 500 user pointer
sources (6%) on a program consisting of about 1 million
lines of code, all of which were false alarms. Contrast-
ingly, our experiment reports warnings on 11 of the 627
user pointer sources (1.8%) on a program consisting of
about 6.2 million lines of code. Because ESP’s value-
ﬂow analysis is path-sensitive (including interprocedu-
rally) and performs strong updates (a feature we have
not discussed, but which our underlying memory model
also handles), ESP’s expressive power is more compara-
ble to our’s than CQual’s. One signiﬁcant technical dif-
ference is that ESP encodes path sensitivity by tracking
sets of dataﬂow facts, one set for each path. In contrast,
we associate a boolean constraint, or guard, with each
fact describing a set of paths. In our representation it is
easy to reason about multiple paths simultaneously, as
the guards directly encode all paths where a fact holds.
SLAM [2] and BLAST [11] are software model
checkers based on predicate abstraction. Both systems
are able to analyze systems with hundreds of thousands
of lines of code. Astree [3] is a static analysis tool that
has been used to verify automatically-generated safety-
critical software in a restricted subset of C. A notable
aspect of Astree is that it performs full veriﬁcation of
the absence of any undeﬁned runtime behavior without
making any assumptions about the analyzed program.
3 Language
We brieﬂy deﬁne a simple imperative language used
to present our analysis in this paper. This language is
restrictive, which enables us to present our techniques
with minimal extraneous detail. However, our imple-
mentation handles the entire C language. A program is
a set of procedures.
procedure ::= type P (
statement ::= type v | return v | v := Z
−−−−→
type v) {statement}
−→
v2)
| v1 := *v2 | v1 := &v2
| v1 := Q (
| statement ; statement
| if (v != 0) statement
else statement
type ::= void | int | int* | int**
A procedure has a return type, formal parameters, and
a statement. The statement forms are self explanatory.
Our analysis always takes place in some procedure, thus
we superscript variables, sets, and functions with the
name of the procedure with which they are associated.
The superscript is omitted when the procedure is clear
from context. Let Proc be the set of procedures in the
program. Then, Rvalue P is the set of right hand side
expressions, Lvalue P is the set of left hand side expres-
sions, and Var P is the set of variables v of procedure
P ∈ Proc. Figure 1 shows the running example used in
the rest of the paper written in this language.
4 Memory Model
This section describes the memory model used by the
safety analysis. The memory model of a procedure gives
an abstract description of the portion of the heap relevant
to the procedure. Interested readers are referred to [9]
for details of how the memory model is computed.
The memory model for a procedure P consists of a
distinct set of abstract locations LocP (usually called
just locations). A function varlocP ∈ Var P → LocP
assigns each variable v ∈ Var P to a location l ∈ LocP .
The set of guards, Guard P , consists of propositional
formulas over a set of primitive predicates on locations
and boolean variables.
327
EXAMPLE. In procedure syscall in Figure 1, sup-
pose the memory model assigns the location laok the
variable aok so varlocsyscall(aok) = laok. Then, the
conditional aok != 0 that appears on line 6 is repre-
sented by the guard (laok (cid:3)= 0) ∈ Guard syscall. (cid:1)
4.1 Guarded Points-to Graphs
A guarded points-to graph ρ ∈ PointsToP =
LocP × LocP → Guard P is a function that asso-
ciates a guard ϕ ∈ Guard P with each pair of loca-
tions li , lj ∈ LocP , representing the condition under
which li may point-to lj . The rvalue evaluation function
rval P ∈ PointsToP → (Rvalue P×LocP ) → Guard P
gives the guard under which an rvalue may point-to
a given location. An rvalue is an expression that ap-
pears on the right-hand side of an assignment. Similarly,
the lvalue evaluation function lval P ∈ PointsToP →
(Lvalue P × LocP ) → Guard P gives the guard under
which an lvalue is represented by a given location. An
lvalue is an expression that appears on the left-hand side
of an assignment.
*y, l
EXAMPLE.
In procedure get in Figure 1, as-
sume the guarded points-to graph ρ11 encodes the
points-to relationships at entry on line 11. Also let
**y ∈ LocP where varloc(y) = ly and
l, ly, l
varloc(x) = lx. The guard under which the lvalue
*y is represented by the location l
*y with respect to
the points-to graph ρ11 is lval(ρ11)(*y, l
*y), which is
*y), the guard under which
equivalent to rval(ρ11)(y, l
*y with respect to ρ11, which
the rvalue y points-to l
*y). Similarly, the guard un-
is equivalent to ρ11(ly, l
der which the lvalue **y is represented by the loca-
**y), which is equivalent to
tion l
**y), the guard under which the rvalue
rval(ρ11)(*y, l
l[ρ11(ly, l) ∧
*y points-to l
**y, which is equivalent to
ρ11(l, l
**y)], which is the disjunction of all guards under
which ly points-to some location l and l points-to l
**y.
(cid:1)
**y is lval(ρ11)(**y, l
(cid:1)
4.2 Location Instantiation
The abstract locations of two different procedures are
disjoint: LocP ∩ LocQ = ∅ if P (cid:3)= Q. A separate map-
ping shows when two abstract locations from different
procedures represent the same set of concrete locations.
Suppose P calls Q at a call statement s in P and let
ρ ∈ PointsToP be the points-to graph encoding the
points-to information at s. The location instantiation
Loc ∈ PointsToP → (LocQ × LocP ) →
function I P
Guard P gives the guard under which the abstract loca-
2 ∈ LocP represent the same set
tions lQ
1 ∈ LocQ and lP
of concrete locations. We say the callee location lQ
stantiates to the caller location lP
the same set of concrete locations.
1 in-
2 at s if they represent
EXAMPLE.
*u ∈ Locsyscall and ly, l
In the example in Figure 1, proce-
dure syscall calls procedure get on line 7 with ac-
tual parameter u and formal parameter y. Let ρ11 ∈
PointsToget be the points-to graph at entry to proce-
dure get on line 11 and ρ7 ∈ PointsTosyscall be the
points-to graph at the call statement on line 7. Also
*y ∈ Locget, where
let lu, l
varlocsyscall(u) = lu and varlocget(y) = ly. The lo-
cations lu and ly never correspond to the same set of
concrete locations because the concrete locations rep-
resented by lu are allocated on the stack of syscall
while the concrete locations represented by ly are allo-
cated on the stack of get. Thus, Isyscall
(ρ7)(ly, lu) =
false. However, l
*y may correspond to the
same set of concrete locations because of the implicit
pointer copy that occurs from lu to ly at the call state-
ment. Thus, Isyscall
*u) when
*y) = true. (cid:1)
ρ11(ly, l
4.3 Judgments
*u) = ρ7(lu, l
*u and l
(ρ7)(l
Loc
Loc
*y, l
This paper refers to the memory model by using judg-
ments of the form
φ, ρ (cid:7)mem s : φ(cid:1), ρ(cid:1), ψ
where φ (resp. φ(cid:1)
) is the guard under which execution
reaches the entry (resp. exit) point of statement s, ρ
(resp. ρ(cid:1)
) is the points-to graph at the entry (resp. exit)
point of s, and ψ is the guard under which transfer of
control occurs across s.
EXAMPLE. In the example in Figure 1, consider the
assignment statement x = *y on line 13. The guards
under which execution reaches the entry and exit points
of the statement are both true, and the guard under
which control transfer across the statement is also true.
The points-to graph ρ13 on entry to the statement has
**y) = true. The points-
ρ13(ly, l
to graph ρ14 on exit to the statement has ρ14(ly, l
*y) =
**y) = true. Con-
true, ρ14(l
sequently, the judgment true, ρ13 (cid:7)mem x = *y :
true, ρ14, true is valid. (cid:1)
**y) = true, ρ14(lx, l
*y) = true, ρ13(l
*y, l
*y, l
5 Safety
This section describes the safety analysis. Section 5.1
deﬁnes state environments. Section 5.2 describes the