然后，在执行 f2()时，情况如图 5.2 所示。 
图 5.2  使用 OllyDbg 查看 f2()函数的数据栈 
f2()函数的三个变量的地址，和 f1()函数的三个变量的地址相同。因为没有对这个空间进行重新赋值，
所以那三个变量会因为地址相同的原因获得前三个变量的值。 
在这个特例里，第二个函数在第一个函数之后执行，而第二个函数变量的地址和 SP 的值又与第一个
异步社区会员 dearfuture(15918834820) 专享 尊重版权
34 
逆向工程权威指南（上册） 
函数的情况相同。所以，相同地址的变量获得的值相同。 
总而言之，在运行第二个函数时，栈中的所有值（即内存中的单元）受前一个函数的影响，而获得了
前一个函数的变量的值。严格地说，这些地址的值不是随机值，而是可预测的伪随机值。 
有没有办法清除脏数据呢？我们可以在每个函数执行之前清除其开辟的栈空间的数据。不过，即使这
是一种技术上可行的方法，但是因为这种方法开销太大、而且必要性很低，所以没有人这样做。 
5.5 练习题 
5.5.1 题目 1 
如果使用 MSVC 编译、运行下列程序，将会打印出 3 个整数。这些数值来自哪里？如果使用 MSVC
的优化选项“/Ox”，程序又会在屏幕上输出什么？为什么 GCC 的情况完全不同？ 
#include  
int main()  
{ 
          printf ("%d, %d, %d\n"); 
          return 0; 
}; 
答案请参见 G1.1。 
5.5.2 题目 2 
请问描述下述程序的功能。 
经 MSVC 2010（启用/Ox 选项）编译而得的代码如下。 
指令清单 5.5  Optimizing MSVC 2010 
$SG3103 DB      '%d', 0aH, 00H 
_main   PROC 
         push    0 
         call    DWORD PTR __imp___time64 
         push    edx 
         push    eax 
         push    OFFSET $SG3103 ; ’%d’ 
         call    DWORD PTR __imp__printf 
         add     esp, 16 
         xor     eax, eax 
         ret     0 
_main   ENDP 
指令清单 5.6  经 Keil 6/2013（启用优化选项）编译而得的 ARM 模式代码 
main PROC 
          PUSH   {r4,lr} 
          MOV     r0,#0 
          BL       time 
          MOV      r1,r0 
          ADR      r0,|L0.32| 
          BL       __2printf 
          MOV      r0,#0 
          POP      {r4,pc} 
          ENDP 
|L0.32| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 5 章 栈 
35 
          DCB      "%d\n",0 
指令清单 5.7  经 Keil 6/2013（启用优化选项）编译而得的 Thumb 模式代码 
main PROC 
          PUSH     {r4,lr} 
          MOVS     r0,#0 
          BL       time 
          MOVS     r1,r0 
          ADR      r0,|L0.20| 
          BL       __2printf 
          MOVS     r0,#0 
          POP      {r4,pc} 
          ENDP 
|L0.20| 
          DCB      "%d\n",0 
指令清单 5.8  经 GCC 4.9（启用优化选项）编译而得的 ARM64 模式代码 
main: 
          stp     x29, x30, [sp, -16]! 
          mov     x0, 0 
          add     x29, sp, 0 
          bl      time 
          mov     x1, x0 
          ldp     x29, x30, [sp], 16 
          adrp    x0, .LC0 
          add     x0, x0, :lo12:.LC0 
          b       printf 
.LC0: 
          .string "%d\n" 
指令清单 5.9  经 GCC 4.4.5（启用优化选项）编译而得的 MIPS 指令（IDA） 
main: 
var_10         = -0x10 
var_4          = -4 
                lui     $gp, (__gnu_local_gp >> 16) 
                addiu    $sp, -0x20 
                la       $gp, (__gnu_local_gp & 0xFFFF) 
                sw       $ra, 0x20+var_4($sp) 
                sw       $gp, 0x20+var_10($sp) 
                lw       $t9, (time & 0xFFFF)($gp) 
                or       $at, $zero 
                jalr     $t9 
                move     $a0, $zero 
                lw       $gp, 0x20+var_10($sp) 
                lui      $a0, ($LC0 >> 16)  # "%d\n" 
                lw       $t9, (printf & 0xFFFF)($gp) 
                lw       $ra, 0x20+var_4($sp) 
                la       $a0, ($LC0 & 0xFFFF)  # "%d\n" 
                move     $a1, $v0 
                jr       $t9 
                addiu    $sp, 0x20 
$LC0:         .ascii "%d\n"         # DATA XREF: main+28 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 66 章
章    pprriinnttff(())函
函数
数与
与参
参数
数传
传递
递  
现在我们对 Hello, world! 程序稍做修改，演示它的参数传递的过程。 
#include  
int main()  
{ 
          printf("a=%d; b=%d; c=%d", 1, 2, 3); 
          return 0;  
}; 
6.1 x86 
6.1.1 x86：传递 3 个参数 
MSVC 
使用 MSVC 2010 express 编译上述程序，可得到下列汇编指令： 
$SG3830 DB       'a=%d; b=%d; c=%d’, 00H 
... 
          push    3 
          push    2 
          push    1 
          push    OFFSET $SG3830 
          call    _printf 
          add     esp, 16                                 ; 00000010H 
这与最初的 Hello World 程序相差不多。我们看到 printf()函数的参数以逆序存入栈里，第一个参数在最后入栈。 
在 32 位环境下，32 位地址指针和 int 类型数据都占据 32 位/4 字节空间。所以，我们这里的四个参数
总共占用 4×4=16（字节）的存储空间。 
在调用函数之后，“ADD ESP, X”指令修正 ESP 寄存器中的栈指针。通常情况下，我们可以通过 call
之后的这条指令判断参数的数量：变量总数＝X÷4。 
这种判断方法仅适用于调用约定为cdecl的程序。本书将在第 64 章详细介绍各种函数约定
①
① calling convention，又有“调用规范”“调用协定”等译法。 
。 
如果某个程序连续地调用多个函数，且调用函数的指令之间不夹杂其他指令，那么编译器可能把释放
参数存储空间的“ADD ESP,X”指令进行合并，一次性地释放所有空间。例如： 
push a1 
push a2 
call ... 
... 
push a1 
call ... 
...  
push a1 
push a2 
push a3 
call ... 
add esp, 24 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
37 
如下是一个规定中的例子。 
指令清单 6.1  x86 
.text:100113E7             push 3 
.text:100113E9             call sub_100018B0 ; takes one argument (3) 
.text:100113EE             call sub_100019D0 ; takes no arguments at all 
.text:100113F3             call sub_10006A90 ; takes no arguments at all 
.text:100113F8             push 1 
.text:100113FA             call sub_100018B0 ; takes one argument (1) 
.text:100113FF             add  esp, 8       ; drops two arguments from stack at once 
使用 OllyDbg 调试 MSVC 编译出的程序 
现在我们在 OllyDbg 中加载这个范例。OllyDbg 是非常受欢迎的 user-land（用户空间）win32 debugger。
在使用 MSVC 2012 编译这个样本程序的时候，启用/MD 选项，可使可执行程序与 MSVCR*.DLL 建立动态
链接。这样，我们就能在 debugger 里清楚地观察到程序从标准库里调用函数的过程。 
在 OllyDbg 里调用可执行文件，将第一个断点设为 ntdll.dll，然后按 F9 键执行。然后把第二个断点设
置在 CRT-code 里。我们应该能够找到 main()主函数。 
因为 MSVC 将 main()函数分配到代码段的开始处，所以只要向下滚屏就能够在底部找到 main()函数体。
如图 6.1 所示。 
图 6.1  使用 OllyDbg：查看 main()函数的启动部分 
单击 PUSH EBP 指令，按 F2 设置断点，再按 F9 键运行。这么做是为了跳过 CRT-code，因为我们的
目的不是分析 CRT 代码。 
而后按 6 次 F8 键，就是说跳过 6 条指令。如图 6.2 所示。 
图 6.2  使用 OllyDbg：定位到调用 printf()之前的指令 
此时，指令指针 PC 指向 CALL printf 指令。与其他主流的调试器相同，OllyDbg 调试器会加亮显示所有发
生过变化的寄存器。每按一次 F8 键，EIP 的值都会发生变化，所以这个寄存器一直被高亮显示。在这个例子中，
ESP 同样会被 OllyDbg 高亮显示，因为在这几步调试中 ESP 寄存器的值也发生了变化。 
栈里的数值在哪呢？我们看一下 debugger 的右下角，如图 6.3 所示。 
此处的内容分为 3 列：栈地址列、数值列及 OllyDbg 的注释列。OllyDbg 能够识别 printf()这样的指令
字符串，按照其指令的形式把它所引用的三个值进行了整理。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
38 
逆向工程权威指南（上册） 
我们还可以使用鼠标的右键单击 printf()的格式化字符串、单击下拉菜单中的“Follow in dump”，这样
屏幕左下方将会显示出格式化字符串的输出结果。调试器左下方的这个区域用于显示内存中的部分数据。
我们同样可以编辑这些值。如果修改格式化字符串，那么程序的输出结果就会发生变化。在这个例子中，
我们还用不上这样的功能，但是我们可以练练手，从而进一步熟悉调试器。 
按下 F8 键，单步执行（Step Over）。 
我们将会看到图 6.4 所示的输出结果。 
               图 6.3  使用 OllyDbg：观察 PUSH 指令                       图 6.4  printf() 函数的输出结果 
                   造成的栈值变化（红色方块内） 
寄存器和栈状态的变化过程如图 6.5 所示。 
图 6.5  使用 OllyDbg：观察 printf()运行后的数据栈 
现在，EAX 寄存器的值是 0xD（即 13）。这个值是 printf()函数所打印的字符总数，所以这个值没有问
题。EIP 寄存器的值发生了变化，实际上它是在执行 CALL printf 指令后的 PC。与此同时，ECX 和 EDX
寄存器的值也发生了变化；显然 printf()函数在运行过程中会使用这两个寄存器。 
这里最重要的现象是 ESP 的值和栈里的参数都没有发生变化。我们可以观察到数据栈里的、传递给
printf()函数的字符串和其他 3 个参数的值原封未动。这是 cdecl 调用约定的特征：被调用方函数不负责恢复
ESP 的状态；调用方函数（caller function）负责还原参数所用的栈空间。 
继续按 F8 键，执行“ADD ESP, 10”指令，如图 6.6 所示。 
图 6.6  使用 OllyDbg：观察“ADD ESP，10”指令运行之后的状态 
ESP 寄存器的值有变化，但是栈中的数据还在那里。因为程序没有把原有栈的数据进行置零（也没有必
要清除这些值），所以保留在栈指针 SP 之上的（原有地址）参数值就成为了噪音（noise）或者脏数据（garbage），
失去了使用的价值。另外，清除全部噪音的操作十分耗时，程序员完全没有必要刻意地去这么做。 
GCC 
现在我们使用 GCC 4.4.1 编译这个程序，并使用 IDA 打开可执行文件： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 6 章  printf()函数与参数调用 
39 
main       proc near 
var_10    
= dword ptr -10h 
var_C       = dword ptr -0Ch 
var_8       = dword ptr -8 
var_4       = dword ptr -4 
             push    ebp 
             mov     ebp, esp 
             and     esp, 0FFFFFFF0h 
             sub     esp, 10h 
             mov     eax, offset aADBDCD ; "a=%d; b=%d; c=%d" 
             mov     [esp+10h+var_4], 3 
             mov     [esp+10h+var_8], 2 
             mov     [esp+10h+var_C], 1 
            mov     [esp+10h+var_10], eax 
            call    _printf 
             mov     eax, 0 
            leave 
            retn 
main   
endp 
与 MSVC 生成的程序相比，GCC 生成的程序仅在参数入栈的方式上有所区别。在这个例子中，GCC
没有使用 PUSH/POP 指令，而是直接对栈进行了操作。 
GCC 和 GDB 
GDB 就是 GNU debugger。 
在 Linux 下，我们通过下述指令编译示例程序。其中，“−g”选项表示在可执行文件中生成 debug 信息。 
$ gcc 1.c –g –o 1 
接下来对可执行文件进行调试。 
$ gdb 1 
GNU gdb (GDB) 7.6.1-ubuntu 
Copyright (C) 2013 Free Software Foundation, Inc. 
License GPLv3+: GNU GPL version 3 or later  
This is free software: you are free to change and redistribute it. 
There is NO WARRANTY, to the extent permitted by law.  Type "show copying" 
and "show warranty" for details. 
This GDB was configured as "i686-linux-gnu". 
For bug reporting instructions, please see: 
... 
Reading symbols from /home/dennis/polygon/1...done. 
指令清单 6.2  在 printf()函数开始之前设置调试断点 
(gdb) b printf 
Breakpoint 1 at 0x80482f0 
然后运行程序。我们的程序里没有 printf() 的源代码，所以 GDB 也无法显示相应源代码。但是，这并
不妨碍我们调试程序。 
(gdb) run 
Starting program: /home/dennis/polygon/1 
Breakpoint 1, __printf (format=0x80484f0 "a=%d; b=%d; c=%d") at printf.c:29 
29      printf.c: No such file or directory. 
继而令 GDB 显示栈里的 10 个数据，其中左边第一列是栈地址。 
(gdb) x/10w $esp 
0xbffff11c:  0x0804844a  0x080484f0  0x00000001  0x00000002 
0xbffff12c:  0x00000003  0x08048460  0x00000000  0x00000000 
0xbffff13c:  0xb7e29905  0x00000001 
第一个元素就是返回地址 RA(0x0804844a)。为了验证这点，我们让 GDB 显示出这个地址开始的指令： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
40 
逆向工程权威指南（上册） 
(gdb) x/5i 0x0804844a 
   0x804844a : mov    $0x0,%eax 
   0x804844f : leave 
   0x8048450 : ret 
   0x8048451:   xchg   %ax,%ax 
   0x8048453:   xchg   %ax,%ax 
ret 之后的 XCHG 指令与 NOP 指令等效。x86 平台并没有专用的 NOP 指令，实际上，多数采用 RISC
的 CPU 的指令集里也没有专用的 NOP 指令。 
栈中的第二个数据（0x080484f0）是字符串格式的内存地址（指针）： 
(gdb) x/s 0x080484f0 
0x80484f0:      "a=%d; b=%d; c=%d" 
紧接其后的三个数据，是传递给 printf()函数的余下的三个参数。栈中其余的数据，可能是脏数据，也
可能是其他函数的数据或局部变量等数据。没有必要进行深究。 
此后，我们执行“finish”指令，令调试器“继续执行余下的指令、直到函数结束为止”。在我们的例
子里，这条指令将引导 GDB 执行 printf()函数，到它退出为止。 
(gdb) finish 
Run till exit from #0 __printf (format=0x80484f0 "a=%d; b=%d; c=%d") at printf.c:29 
main () at 1.c:6 
6                  return 0; 
Value returned is $2 = 13 
GDB 显示：在 printf()退出时，EAX 寄存器的值为 13。这个值是函数打印的字符的总数，其结果与
OllyDbg 的结果相同。 
GDB 显示出了程序的源代码“return 0；”，它是
1.c 文件里第六行的指令。实际上 1.c 文件就在当前目
录里，GDB 在源文件里找到了汇编指令对应的源代码。GDB 又是如何知道当前的指令对应源代码的哪一
行呢？这就要归功于编译器所生成的调试信息了。如果启用了保存调试信息的选项，那么编译器在编译程
序的时候，会生成源代码的行号与对应的指令地址之间的对应关系表，把它一并保存在可执行文件里。 
我们一起检查下 EAX 寄存器里到底是不是 13： 
(gdb) info registers 
eax 
    0xd 
   13 
ecx 
    0x0 
   0 
edx 
    0x0 
   0 
ebx 
    0xb7fc0000  
-1208221696 
esp 
    0xbffff120  
0xbffff120 
ebp 