studying the security policy of Android’s application frame-
work and evaluate the results of prior works of this domain.
Thus, we evaluate our tool
in four prominent use cases
from the literature. We start by comparing the state-of-the-art
permission mapping from Arcade [5] with the mapping built by
DYNAMO (Section V-A). Second, we reproduce and evaluate
the permission re-delegation vulnerabilities, as reported by
ARF [29] (Section V-B). The ﬁrst
two evaluations show
that DYNAMO can conﬁrm the majority of prior results but
can also be used to extend and refute (or at least question)
several others. Third, inspired by Kratos [47], we conduct
a lightweight analysis for detecting access control inconsis-
tencies between APIs of system services (Section V-C). We
were able to discover several unprotected and misconﬁgured
APIs. Fourth, we use DYNAMO’s permission mapping for the
latest Android release (v10) to assess the completeness and
correctness of APIs’ permission information in the developer’s
documentation of Android (Section V-D). We found several
cases where the ofﬁcial documentation is incomplete or inac-
curate, affecting third-party app developers.
Evaluation environment: We tested DYNAMO on different
Android versions (6, 8.1, 10, and 11) of vanilla Android and
other vendor images. We used a combination of hardware
devices (Pixel 4, Nexus 5, and One+) and emulators (Cuttle-
ﬁsh [1] and Android Studio emulators) running different CPU
architectures (x86, x86 64, arm, and arm64). DYNAMO, was
fully functional under all of those settings.
A. Evaluating Previous Permission Mappings
Static analysis has been shown to be capable of building
good approximations of permission mappings [11], [12], [5].
However, since there is no systematic approach for verifying
those mappings at scale, we cannot easily describe their accu-
racy and completeness. Using DYNAMO, we are ﬁnally able
to systematically evaluate previous mappings using dynamic
testing. The most up-to-date mappings are from Axplorer and
Arcade. Since all but 20 protected APIs reported by Axplorer
are also covered in Arcade, we only focus on the state-of-the-
art mapping from Arcade.
Overview. As shown in Figure 3, DYNAMO is able to
verify the permission mapping for 76.1% of 951 APIs also
reported by Arcade and to extend the mapping by 10.6%
with newly discovered security checks which we consider as
8
1 public List getScanResults() {
2
3
4
5
6 }
int callingUid = Binder.getCallingUid();
long ident = Binder.clearCallingIdentity();
enforcePermission(ACCESS_FINE_LOCATION, callingUid);
Binder.restoreCallingIdentity(ident);
Listing 3. Enforcing permission after clearing the caller’s identity
those APIs are actually unprotected and Arcade’s reporting
is inaccurate (i.e., FPs). Since Arcade’s source code was not
available to us, we could not investigate the causes of this
wrong reporting. Similarly, we investigated the reasons why
Arcade missed 343 APIs reported by DYNAMO. First, Arcade
did not report mappings for some services, such as WiFi and
Telecom, which account for 65.3% of the missed APIs. Ar-
cade’s authors acknowledged this shortcoming and attributed
it to not including the corresponding binary ﬁles for all services
in the analysis. However, the remaining missed APIs from
Arcade belong to services whose corresponding binary ﬁles
were considered. This suggests other technical limitations of
Arcade, such as early termination of the analysis, inability to
identify entry points to APIs, and improper bridging of IPC,
which we discuss later in the results in this section.
Comparison. For the 951 common APIs, we deﬁned strict
criteria that classify an API into one of three categories based
on how DYNAMO’s mapping compares with Arcade’s mapping
for that API (see also Figure 3). Those categories are 1) exactly
matching if both mappings have the same number of paths and
enforce the same security checks on each path, 2) APIs with
new security checks if DYNAMO reports more paths or security
checks than the ones reported by Arcade, and 3) discrepant
security checks if DYNAMO’s mapping has different or less
checks. This third category is further classiﬁed into three
subcategories: a) FPs from Arcade, b) FNs from DYNAMO,
and c) APIs that we could not classify as any of the other
subcategories because the APIs’ logic was too complex to be
manually analyzed to search for checks reported by Arcade.
Results. As shown in Figure 3, this automatic comparison
reported 724 APIs (76.1%) with exactly matching security
checks. We consider those APIs as conﬁrmed mappings given
that dynamic results are sound. Zooming onto this number
reveals that 89.6% of the conﬁrmed mappings contain one or
two paths with one path being dominant. The conﬁrmed APIs
also enforce a combination of 117 unique permissions. The
comparison also showed that DYNAMO was able to extract
more security checks than Arcade for 101 APIs, which was
surprising given that static analysis is known for achieving
high coverage. In total, 51 new paths were discovered by
DYNAMO as well as 23 new unique permissions. After man-
ual code inspection and a discussion with Arcade’s authors,
we can attribute this particular discrepancy to three issues:
1) Arcade relies on a simpliﬁed and incomplete mechanism
for bridging IPC [11], [47] and subsequently misses some
permissions enforced in APIs invoked via IPC from within
the analyzed API. 2) Arcade relies on heuristics to identify
the endpoints of the analysis and avoid noise in the results
to retain its approach’s practicality. For example, they stop
the analysis immediately before the caller’s identity is cleared
with Binder.clearCallingIdentity. However, this leads
Fig. 3. Breakdown of results from evaluating 951 common APIs from Arcade.
False Negatives (FNs) for Arcade. Manual code analysis of the
13.2% discrepant APIs identiﬁed 30 FPs in Arcade’s mapping
and 73 FNs in DYNAMO. DYNAMO was also able to report
security checks for 343 APIs that are missing in Arcade’s
mapping (FNs in Arcade) but also missed 247 APIs reported
in Arcade (FNs in DYNAMO). We shared our ﬁndings with
the authors of Arcade, and we incorporate their feedback in
our root-cause analysis for the discovered discrepancies. As
mentioned earlier, we shared our ﬁndings with the authors of
Arcade who reacted to our discussion and updated their tool
to increase API-coverage and ﬁx some erroneous reports to
their old permission mapping. As such, the updated permission
mapping from Arcade reports new access control information
for 217 APIs. We discuss those changes separately at the end
of this section.
Setup. To avoid wrong reporting due version mismatch, we
ﬁxed DYNAMO to analyze Android-6.0.1 r10 (v.23), the same
build used for Arcade’s mapping. We used two Nexus 5 devices
and four x86 emulators to run the analysis (using Cuttleﬁsh
was infeasible as it requires Android API level ≥28). The
analysis took about four weeks to conclude for this test setup.
Scope of Analysis. Table II describes the permission map-
pings in this evaluation. DYNAMO analyzed 2,057 public APIs
and reported security checks for 1,294 (62.9%) of them while
Arcade analyzed 4,189 APIs and reported similar security
checks for 1,198 (28.5%) of them. DYNAMO and Arcade
reported 2,064 and 2,164 execution paths, accordingly. As
expected, permissions are the most common security checks
with 160 unique permissions enforced in 84.3% of the pro-
tected APIs found by DYNAMO. While missing in all previous
permission mappings, DYNAMO found AppOps checks (e.g.,
package validation) in 16.3% of the protected APIs it covers.
Both permissions mappings that are used in this evaluation
are included in the ﬁle android-6.0.1\_r10.json under
the results folder in DYNAMO’s project repository [16].
There are 951 APIs that are shared between both mappings.
This means that DYNAMO and Arcade exclusively reported 343
and 247 unique APIs, respectively. We found three reasons
why DYNAMO missed mappings for 247 APIs that exist in
Arcade’s mapping: First, DYNAMO considers APIs whose
services are deployed on the target device and can be directly
retrieved from the ServiceManager. However, some services
are wrapped inside other services and require a multi-step
approach to retrieve them [38]. We only discovered this after
the testing was concluded and, therefore, DYNAMO missed
131 APIs. Additionally, the low code coverage and missing
calling dependencies led to missing another 113 APIs. Finally,
DYNAMO did not report any security checks for 3 other APIs in
comparison to Arcade. Manual code inspection revealed that
9
2373FNs (Dynamo)Undecided101(10.6%)126(13.2%)724(76.1%)DiscrepantExtendedConﬁrmed30FPs (Arcade)TABLE I.
SUMMARY OF PERMISSION MAPPINGS BUILT BY ARCADE AND DYNAMO.
Tool
Android Version
# Covered APIs
# Protected APIs
# Paths
# Permissions
DYNAMO
Android-6.0.1 r10
Arcade
Android-6.0.1 r10
DYNAMO
Android-10.0.0 r27
2,057
4,189
3,579
1,294
(62.9%)
1,198***
(28.5%)
2,537
(70.8%)
2,164
2,064
3,877
160
170
257
Permissions
# APIs Enforcing *
UID/PID
AppOps
1,092
(84.3%)
1074
(89.6%)
1,953
(76.9%)
302
(23.3%)
281
(14.9%)
392
(10.9%)
212
(16.3%)
1
(0%)
489
(19.2%)
Others **
108
(8.3%)
34
(2.8%)
370
(14.5%)
* Different checks can be used for the same API; ** Checks if caller is isolated or in same app, user restrictions, and unhandled security exceptions.
*** Arcade reports 1,519 protected APIs in the paper, however, the published mapping used in this evaluation includes only information for 1,198 APIs.
our ﬁndings with Arcade’s authors, the authors released ﬁxes to
the Arcade tool and updated their published permission map-
ping. The update focused on increasing the API-coverage and
ﬁxing erroneous mappings. As such, the updated permission
mapping from Arcade lists new access control information for
217 APIs. Of those APIs, we found 182 APIs that also exist
in the mapping from DYNAMO. The remaining 35 APIs are
missing from DYNAMO for the same reasons discussed earlier
(e.g., low code coverage, failing to invoke the API due to
unsatisﬁed conditions, etc). We applied the same methodology
discussed earlier for evaluating the 182 common APIs between
both mappings (i.e., automatic comparison and then manual
code inspection). A summary of this evaluation is presented in
Figure 4. As shown in the ﬁgure, 118 of the 182 common APIs
are completely matched between both permission mappings
(i.e., conﬁrmed), 21 APIs are extended by DYNAMO (i.e., FNs
in Arcade), while 43 APIs exhibit discrepancies between the
reported permission mappings. After manually inspecting the
discrepant APIs, we found 6 FPs in Arcade that report wrong
association between permissions (e.g., required permissions are
reported in conjunction to each other instead of disjunction).
We also found 21 FNs in DYNAMO and 16 APIs that we
could not fully analyze due to time constraints. It is worth
noting that we could not identify new root-causes for the
discrepant APIs in addition to those identiﬁed earlier. Overall,
the updated permission mapping from Arcade added 171
APIs with manually veriﬁed permission mappings (i.e., 118
conﬁrmed, 21 FNs in DYNAMO, and 32 missing APIs from
DYNAMO)
B. Verifying Permission Re-Delegation Vulnerabilities
System APIs in Android are highly interconnected and rely
on each other. Since there is no speciﬁcation for the security
policy of those APIs, discrepancies in their access control
can arise. For example, one API (deputy) might expose the
functionality of another protected API (target), creating a less-
restrictive path to execute that functionality as opposed to
the path that directly leads to the target API. This problem
is known as permission re-delegation. ARF [29] analyzed
Android’s framework for permission re-delegation vulnerabil-
ities. It used static analysis and manual code inspection to
discover vulnerable paths in Android-8.1.0 r1. The authors
reported 88 APIs (out of 170 discovered) that are potentially
vulnerable. The authors were transparent in their reporting,
stressing that they have not created proofs of concept attacks
based on those vulnerabilities. We saw this as an opportunity
to showcase DYNAMO’s ability in verifying the vulnerabilities
using dynamic testing.
Fig. 4. Breakdown of results from evaluating 182 common APIs between
DYNAMO and the added APIs in Arcade’s updated permission mapping.
to missing security checks performed after the identity is
cleared. For example, in Listing 3, the caller’s UID is saved in
line 2 before it is cleared in line 3. The original UID stored in
variable callingUid is then used to check for the permission
in line 4. Consequently, this permission is not detected by
Arcade. 3) Arcade reduces the Control Flow Graph (CFG) of
an API to an abstract CFG that only contains security checks.
This design decision of Arcade is error-prone as Arcade might
not be able to infer the security relevance of a check on API’s
access control—either due to limiting the analysis or inability
to resolve runtime values—and therefore truncates it.
For the remaining 126 APIs,
the two mappings report
different security checks and require manual
inspection to
uncover the reason for this discrepancy. Of those, we conﬁrmed
with clear evidence 30 APIs as FPs by Arcade (Appendix A),
conﬁrmed 73 APIs as FNs by DYNAMO (see Appendix B for
examples), and for 22 APIs we could not classify them as
either of those previous cases despite the high manual effort.
Among the conﬁrmed FPs from Arcade, 13 APIs were mapped
with permissions that are actually not enforced by the APIs and
17 APIs actually enforced different permissions than reported
by Arcade. We shared a representative sample of FP cases with
Arcade’s authors who conﬁrmed them. As for the APIs that
report different permissions, Arcade’s authors attribute those
cases to mistakes in string resolution of the permission name.
Since we do not have access to Arcade’s tool, we cannot
further investigate the reasons behind reporting non-existing
permissions. But, we speculate that the permission mapping of
some of those APIs has been mistakenly mixed with other APIs
that enforce the same permissions. Out of the 30 FPs from
Arcade, we found that 12 APIs are protected by permissions
that can be requested by third-party app developers. For
those APIs, Arcade’s mapping suggests the need for more
permissions than actually needed. Clearly, this aggravates the
problem of over-privileged apps instead of mitigating it and
entails negative consequences that we discuss in Section VI.
Updated Mapping From Aracde. As a result of sharing