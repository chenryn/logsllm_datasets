formatguard_counter (a, b)
which gets expanded to 
__formatguard_count1 ( , a, b)
which the second macro expands to 
__formatguard_count2 (  , a, b, 5, 4, 3, 2, 1, 0)
The arguments to match the __formatguard_count2 rule in the following way:
__formatguard_count2 (  ,  a,  b , 5,  4,  3,  2,  1, 0)
                       ^   ^   ^   ^   ^   ^   ^   ^  ^
                       |   |   |   |   |   |   |   |  |
                       _  x0  x1  x2  x3  x4   n   ys...
Thus n gets matched to 2, which is what is returned.
Figure 3  Example Expanding the FormatGuard Macro
format  string  accurately  (i.e.  getting  the  same  answer
that  printf 
the
parse_printf_format  function  from  the  glibc
library 
itself,  which  conveniently  enough,  returns
exactly the number of arguments to be formatted.
will  get)  by  borrowing 
to 
provided 
printf, 
If  the  number  of  %  directives  exceeds  the  number  of
arguments 
then
__protected_printf deems a format attack to be
under way. Note that the attack is mid-way through: the
attacker has not corrupted any significant program state,
but the attacker has put the victim program in an untena-
ble position; at the very least, it is not possible to suc-
cessfully  complete  the  printf  call.  FormatGuard
responds by syslog’ing the intrusion attempt with an
entry similar to:
Feb  4 04:54:40 groo foo[13128]: Immu-
nixOS format error - mismatch of 2 in
printf called by main 
where  “foo”  is  the  name  of  the  victim  program,
“printf”  is  one  of  the  FormatGuard-wrapped  func-
tions  (syslog,  printf,  fprintf,  sprintf,  and
snprintf) and “main” is the function that printf
was called from. FormatGuard then aborts the process to
prevent the attacker from taking control, similar to the
way StackGuard handles buffer overflow attacks [8, 6].
3.3 FormatGuard Packaging: Modified 
glibc
In Linux-like systems, the printf family of functions
is 
library.  The
__formatguard_count macros shown in Figure 2
are inserted into the /usr/include/stdio.h  file
and  the  __protected_printf  function  is  inserted
into  the  glibc  library  itself.  Thus  FormatGuard  is
provided 
glibc 
by 
the 
packaged  as  a  modified  implementation  of  glibc
2.2.
Note that, despite the packaging of FormatGuard with a
library package, programs that are to benefit from For-
matGuard protection must be re-compiled from source,
using the FormatGuard version of  stdio.h. In many
cases,  this  imposes  a  substantial  workload  on  people
wishing to protect an entire system with FormatGuard.
However,  WireX  has  included  both  FormatGuard  and
StackGuard  [8,  6]  in  the  latest  edition  of  Immunix
Linux. Both the Immunix system and the FormatGuard
implementation  of  glibc  are  available  for  download
from http://immunix.org/
4  Security Effectiveness
FormatGuard presents several security limitations in the
form of various cases that FormatGuard does not protect
against,  which  we  present  in  Section  4.1.  Section  4.2
presents our testing  of live exploits against  actual vul-
nerabilities found in widely used software.
4.1 Security Limitations
FormatGuard fails to protect against format bugs under
several circumstances. The first is if the attacker’s for-
mat string undercounts or matches the actual argument
count to the printf-like function, then FormatGuard will
fail to detect the attack. In theory, it is possible for the
attacker to employ such an attack by creatively mis-typ-
ing the arguments, e.g. treating an int argument as dou-
ble  argument.  In  practice,  no  such  attacks  have  been
constructed, and would likely be brittle.Insisting on an
exact  match  of  arguments  and  %  directives  would
induce  false-positives:  it  is  quite  common  for  code  to
provide more arguments than the format string specifies.
There is even an example within the glibc code itself.
Table 1: FormatGuard Security Testing Against Live Exploits
Program
wu-ftpd [22]
cfengine [20]
rpc.statd [19]
LPRng [24]
PHP 3.0.16 [17]
Bitchx [26]
xlock [2]
gftp
Result Without 
FormatGuard
root shell
root shell
root shell
root shell
httpd shell
user shell
root shell
user shell
Result With 
FormatGuard
root shell
FormatGuard alert
FormatGuard alert
FormatGuard alert
FormatGuard alert
FormatGuard alert
FormatGuard alert
user shell
The  second  limitation  is  that  a  program  may  take  the
address of printf, store it in a function pointer variable,
and  then  call  via  the  variable  later.  This  sequence  of
events disables FormatGuard protection, because taking
the address of printf does not generate an error, and the
subsequent  indirect  call  through  the  function  pointer
does  not  expand  the  macro.  Fortunately,  this  is  not  a
common thing to do with a printf-like function.
The third limitation is that FormatGuard cannot provide
protection for programs that manually  construct stacks
of  varargs  arguments  and  then  make  direct  calls  to
vsprintf  (and  friends).  Because  such  programs  can
dynamically construct a variable list of arguments, it is
not  possible  to  count  the  arguments  presented  through
static analysis.
A  variation  on  this  problem  is  libraries  that  present
printf-like functions.These libraries in turn call vsprintf
directly,  and  thus  do  not  get  FormatGuard  protection.
For example the GLib library (part of GTK+, not to be
confused with glibc) provides a rich family of printf-
like string manipulation functions. To address this class
of  problems,  we  are  considering  expanding  Format-
Guard  protection  beyond  glibc  into  other  libraries  that
provide printf-like functionality, such as GLib.
In  practice,  the  only  limitations  that  we  have  encoun-
tered  are  the  direct  calls  to  vsprintf  and  the  non-glibc
library calls to vsprintf, as we show in Section 4.2.
4.2 Security Testing
To test the security value of FormatGuard, we tested it
against  real  vulnerable  programs  and  real  live  exploit
programs collected from the wild. The test procedure is
to run the attack exploit against the vulnerable version
of the program, to verify that the vulnerability is legiti-
mate and the attack program is functional. We then re-
compile the vulnerable program from source, including
FormatGuard protection, without repairing the vulnera-
bility, and re-run the attack against the vulnerable pro-
gram. Because of the level of integration effort required
to deploy FormatGuard, we consider only the Immunix
system, and thus consider only the vulnerabilities for the
Linux/x86 platform. The results are shown in Table 1.
We note (with some irony) that wu-ftpd was the catalyst
for the format string vulnerability problem [22, 5] and
yet is one of the few format bugs that we found that For-
matGuard does not stop. Investigation revealed that this
is  because  wu-ftpd  completely  re-implements  its  own
printf  functions  (as  described  in  Section  4.1)  and
thus does not use the hardened printf functions that
FormatGuard supplies. In similar fashion, FormatGuard
failed to protect gftp, which uses the family  printf-
like functions found in the GLib library.
While  this  is  unfortunate  for  wu-ftpd  and  for  Format-
Guard,  it  also  provides  interesting  additional  evidence
that  synthetic  “biodiversity”  in  the  form  of  n-version
programming  (re-implementing  the  same  functionality
by different people) does not necessarily provide resis-
tance against common security failure modes [7]. In this
case, biodiversity seems to have actually degraded secu-
rity, because the semantic failure was replicated across
implementations,  necessitating  the  replication  of  For-
matGuard protection across these implementations.
We also note (with further irony) that the PHP vulnera-
bility [17] is only manifest in an unusual configuration
that involves extra logging. The cause is unsafe format
string handling in the call to  syslog. The interesting
factor  to  note  is  that  security-conscious  administrators
often  increase  the  level  of  logging  on  their  systems  to
provide  enhanced  security.  If,  as  these  vulnerabilities
tend  to  indicate,  it  is  the  case  that  format  bugs  often
result  from  unsafe  format  string  handling  in  syslog
calls,  then  increasing  logging  levels  may  occasionally
have  the  opposite  from  intended  effect,  and  actually
open the host to new vulnerabilities, further increasing
the need for protection against format bugs.
5  Compatibility Testing
FormatGuard is intended to be highly transparent: For-
matGuard protection should not cause programs to fail
to compile or run, and  the  “false positive” rate (legiti-
mate  computation  reported  as  format  string  attacks)
should  be  asymtopic  to  zero.  To  be  effective,  Format-
Guard  needs  to  compile  and  run  literally  millions  of
lines of production C code. In this section, we describe
the extent to which we have achieved these goals.
For the most part, we have succeeded. FormatGuard has
been  used  to  build  the  Immunix  Linux  distribution,
which  includes  500+  RPM  packages,  comprising  mil-
lions of lines of C code. These Immunix systems have
been  running  in  production  on  assorted  WireX  servers
and  workstations  since  October  2000.  These  systems
function  normally,  being  not  noticabley  different  from
non-FormatGuard machines. To date, the observed false
positive rate is zero. The experience has been similar to
the StackGuard “eat our own dog food” experience [6].
However,  FormatGuard  is  also  less  transparent  than
StackGuard: of the approximately 500 packages that we
compiled  with  FormatGuard  in  the  construction  of  the
Immunix system, two required modification to accom-
modate StackGuard protection, while approximately 70
required  modification  to  accommodate  FormatGuard
protection. These modifications were required to treat C
programming  idioms  that  break  when  CPP  directives
(macros  and  #ifdef  statements)  are  included  inside  the
arguments to a macro1, as in the following C program-
ming idiom:
printf(“Hello world”
#ifdef X
“ is X enabled”
#endif
“\n”);
CPP expands the above code into either
1. Rumor has it that the ANSI C standard [1] mandates 
that printf is not a macro. This is not true [16].
printf(“Hello  world”  “  is  X  enabled”
“\n”);
or
printf(“Hello world” “\n”);
which  is  a  convenient  way  of  conditionally  compiling
strings. This creates problems for FormatGuard, because
FormatGuard makes printf a macro instead of a pure
function, and CPP does not support #ifdef (or other
CPP directives) as argument to macros, and so the above
code will not work.
disables  macro 
expansion, 
world”) 
The work-around is to put the printf call in parentheses,
which 
e.g.  write
of
instead 
(printf)(“Hello 
printf(“Hello  world”).  This  disables  Format-
Guard protection for this call  only. Thus the developer
must ensure that the resulting naked call to printf is safe.
However, the problematic cases almost always involve
static  strings  being  conditionally  compiled,  so  this  is
rarely a difficult problem.
Once code has been compiled with FormatGuard, there
are additional limitations:
Non-FormatGuard  programs  can  link  to  Format-
Guard  libraries  without  problems.  However,  these
programs  to  not  get  the  benefit  of  FormatGuard
protection, and are still vulnerable to format bugs.
FormatGuard programs cannot link to non-Format-
Guard libraries unless the FormatGuard version of
glibc is present.
Thus  the  Immunix  platform  easily  hosts  foreign  pro-
grams, but FormatGuard-protected programs do not run
on foreign platforms without some intervention.
6  Performance Testing
Any run-time security defense will impose performance
costs,  due  to  additional  run-time  checks  that  it  is  per-
forming. However, a security enhancement must be effi-
cient enough that these overhead costs are minimal with
respect  to  the  defense  they  provide.  Ideally,  the  cost
should be below noticability for the intended user base.
FormatGuard achieves this level of performance. Over-
head  is  only  imposed  on  the  run-time  cost  of  calling
*printf and syslog functions. Section 6.1 presents
microbenchmarks 
the  precise  overhead
imposed  on  calling  these  functions.  Section  6.2  shows
macrobenchmarks  that  measure  the  imposed  overhead
on (fairly) printf-intensive programs.
that  show 
(cid:127)
(cid:127)
int main(void) {
    int i = 0;
    int counter = 100000000;
    while (i != counter) {
        printf(“%s %s %s\n”, “a”, “b”, “c”);
        i++;
    }
    printf(“%d\n”, i); // force compiler to retain the loop
    exit(0);           // & not optimize it away
}
Figure 4  Microbenchmark
6.1 Microbenchmarks
We  measure  the  marginal  overhead  of  FormatGuard
protection on printf calls with a tight loop as shown
in Figure 4. We measured the performance of this loop
in single-user mode with and without FormatGuard pro-
tection,  subtract  out  the  run  time  of  a  loop  executed
without  the  printf  to  eliminate  the  loop  overhead,
and then divide to get the %overhead. The run time with
FormatGuard was 19.09 seconds, without FormatGuard
was  13.97  seconds,  and  the  loop  overhead  was  0.032