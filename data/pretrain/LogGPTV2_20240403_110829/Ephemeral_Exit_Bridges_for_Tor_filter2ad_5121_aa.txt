title:Ephemeral Exit Bridges for Tor
author:Zhao Zhang and
Tavish Vaidya and
Kartik Subramanian and
Wenchao Zhou and
Micah Sherr
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Ephemeral Exit Bridges for Tor
Zhao Zhang, Tavish Vaidya
Georgetown University
Kartik Subramanian
Jericho High School
Wenchao Zhou, Micah Sherr
Georgetown University
Abstract—This paper examines an existential threat to Tor—
the increasing frequency at which websites apply discriminatory
behavior to users who arrive via the anonymity network.
Our main contribution is the introduction of Tor exit bridges.
Exit bridges, constructed as short-lived virtual machines on
cloud service providers, serve as alternative egress points for
Tor and are designed to bypass server-side censorship. Due
to the proliferation of managed cloud-based desktop services
(e.g., Amazon Workspaces), there is already a surprisingly large
fraction of web requests that originate in the cloud. Trivially
disrupting exit bridges by blocking requests from the cloud would
thus lead to signiﬁcant collateral damage.
Our experiments demonstrate that exit bridges effectively
circumvent server-side blocking of Tor with low overhead. Ad-
ditionally, we perform a cost-analysis of exit bridges and show
that even a large-scale deployment can be done at low cost.
Keywords-Tor; Bridge; Exit; Server-side; Blocking;
I. INTRODUCTION
Tor [12] is used by millions of daily users [27, 49], most
of whom use the anonymity network to privately browse the
web [27]. Blocking access to the relays that comprise the
Tor network is trivial: the network locations of the relays are
public (to allow for source routing) and can be straightfor-
wardly enumerated and subsequently blocked. To prevent such
blocking, the Tor Project has responded by developing new
obfuscation protocols [16, 31, 54] that allow Tor clients to
covertly communicate with bridge relays—Tor relays whose
network locations are not advertised by the directory servers.
This paper explores a complementary threat to Tor. Rather
than study how censors prevent their citizenries from accessing
Tor, we focus on attempts to block Tor at the destination. We
are interested in the degree to which websites and hosting
providers discriminate against Tor trafﬁc (for example, by
blocking it) and how users can circumvent such techniques
by concealing that their trafﬁc has been relayed through Tor.
As prior work has shown [26, 41], some websites prevent
access from Tor. Although motivations differ, such blocking
is commonly done due to the inclusion of Tor exit relays in
subscribed IP blacklists (that is, Tor relays are the collateral
damage of subscribing to such lists) or the site operators’
beliefs that a disproportionate amount of attack trafﬁc ﬂows
through Tor [26]. Our measurements show that the rate of
server-side ﬁltering has increased since these prior studies
were conducted, and that that approximately 8% of Alexa top
10,000 sites [4] either signiﬁcantly alter content for Tor users
or block Tor trafﬁc entirely.
We argue that this trend represents an existential threat to
Tor. Simply put, as more sites block access from Tor users, we
posit that more users will abandon the anonymity service. Our
belief is buoyed by recent work that shows that approximately
80% of Tor visits are to the Alexa top 1 million sites [27];
based on their measurements, we estimate that more than 4.8%
of Tor trafﬁc would go to the blocked sites. We anticipate that a
large fraction of Tor users will indeed be disenfranchised as top
sites continue to block access and Tor becomes increasingly
unable to provide access to the desired content.
The main contribution of this paper is the design, imple-
mentation, and roll-out of ephemeral exit bridges (or simply,
exit bridges). The aim of an exit bridge is to disguise the fact
that Tor is being used by providing a temporary egress point
for Tor trafﬁc. Exit bridges are ephemeral in that they are
short-lived and thus difﬁcult to blacklist.
Exit bridges are inspired by, but are distinct from, traditional
(ingress) Tor bridges. Traditional bridges operate at ﬁxed
(albeit unadvertised) network locations, and are the target of
adversaries intent on preventing people from using Tor.
In contrast, exit bridges are more similar
to domain
fronting [21] and operate as ephemeral virtual machines (VMs)
on popular cloud service providers. They assume users who
can access the Tor network (perhaps using a traditional bridge)
but are otherwise stymied by server-side discrimination against
requests originating from the Tor network. The threat model
for exit bridges is thus more constrained and assumes a more
corporate (as opposed to nation-state) adversary who operates
or hosts a website. Whereas traditional bridges are required
for all Tor connections when direct access to Tor is blocked,
exit bridges can be applied in a more ad hoc fashion, as needs
dictate; e.g., their use can be reserved for sites that otherwise
block access from Tor.
We perform an extensive evaluation of exit bridges and show
that they enable access while imposing little overhead. The use
of exit bridges permitted us to access nearly all tested sites,
even those that block connections from Tor. Exit bridges incur
additional latency; however, this cost is overwhelmed by Tor’s
overall end-to-end latency.
At ﬁrst blush it may seem trivial for sites to effectively
block exit bridges by preventing incoming requests from
cloud providers since sites could expect few requests that
originate from the cloud. However, we argue that such a strat-
egy will likely cause signiﬁcant collateral damage given the
proliferation of virtualized desktop services such as Amazon
Workspace. We show that a surprising amount of web trafﬁc
already originates from the cloud,
thus making it a good
mixing ground for exit bridge trafﬁc.
We consider the anonymity implications of exit bridges, and
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00042
253
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
ﬁnd that coalescing egress trafﬁc at cloud service providers in-
creases vulnerability to trafﬁc correlation [25, 33, 37] attacks.
Such a threat is roughly analogous to that faced by domain
fronting techniques (e.g., meek [45]), although in our case a
rogue (or honest-but-curious) cloud operator learns the sites
being visited as opposed to the clients who request them.
As a ﬁnal contribution, we explore the operational costs of
deploying exit bridges. Unlike domain fronting systems that
are expensive to operate, we argue that the cost of operating an
exit bridge is sufﬁciently low that it can be fully-funded by its
users. Here, we use nascent web revenue services [23] that pay
website site operators a small amount each time their visitors
complete a short online task. We demonstrate that the revenue
is sufﬁcient for operating an exit bridge, while imposing only
a modest time commitment on the bridge user.
II. BACKGROUND AND RELATED WORK
Tor is an overlay network that provides anonymity by
routing user requests through volunteer operated nodes called
relays. The Tor client typically forms anonymous circuits,
each of which consists of a guard, middle, and exit relay; the
guard and exit respectively serve as ingress and egress points
for the anonymity network. On receiving the user’s requested
destination, the exit relay establishes a TCP connection to
the desired destination and forwards trafﬁc over this TCP
connection. The destination perceives the Tor exit relay to be
the requesting client, rather than the actual Tor user.
When a Tor relay comes online, it publishes various infor-
mation about itself, including its public key ﬁngerprint and
network address, to the Tor directory authorities. This infor-
mation is then consolidated into signed consensus documents
that can be retrieved by Tor clients to discover the relays that
comprise the network, enabling source routing.
Blocking trafﬁc from Tor. Online services can easily block
trafﬁc coming from Tor. By simply creating a blacklist of IP
addresses belonging to exit relays (obtained via the consensus
document), sites can effectively block requests from Tor.
Existing research has looked into the extent of blocking of
Tor users by online services. Khattak et al. [26] provide a
systematic evaluation of Tor exit blocking and the differential
treatment of Tor users by online services. Their results show
that at least 1.3 million IPs block trafﬁc from Tor exits at
the TCP/IP layer. Khattak et al. also found that 3.67% of top
Alexa 1000 websites perform blocking or discrimination of
Tor trafﬁc. Their work points out that most online services
inherit the blocking behavior of their hosting providers while
only a few sites employ their own blocking mechanisms.
Singh et al. [41] extend Khattak et al.’s work by measuring
the extent of blocking of sites’ search and login functionalities.
Their ﬁndings show that 20% of Alexa top 500 websites
discriminate against trafﬁc coming from Tor users.
Related work.
Tor was originally intended to allow users
to more privately browse the web by separating a user’s
identity from its network location [12]. However, with various
actors trying to block access to the Tor network [55], Tor
has extended its original focus to also take on the role of a
censorship-circumvention tool.
Most of the relevant literature focuses on censors’ efforts to
block access to the Tor network. Preventing access to guards
is trivial since the list of relays is publicly available from the
directory consensus. To mitigate such blocking, the Tor Project
maintains a separate list of relays, called bridges, whose IPs
are not publicly advertised and are thus more difﬁcult to enu-
merate. (However, existing work has shown that discovering
bridge IP addresses is not especially difﬁcult [11, 15].)
Even if the locations of the bridges are not public, censors
can easily identify Tor protocol trafﬁc through trafﬁc anal-
ysis or active probing techniques and can thus still restrict
access to Tor bridges [24, 51, 55]. As a countermeasure, Tor
supports pluggable transports [48] that obfuscate Tor trafﬁc
between Tor users and bridges. Various pluggable transports
have been proposed [16, 17, 20, 31, 46, 47, 54, 56] and
deployed [16, 20, 46, 48, 56], each of them using different
schemes to conceal Tor trafﬁc patterns. For example,
the
meek [20] pluggable transport uses HTTP to relay Tor trafﬁc
via cloud-based domain fronting [21], using TLS to hide the
underlying Tor protocol. Using pluggable transports requires
both the Tor user and the bridge to support a particular
transport. (We impose similar requirements for exit bridges.)
Davidson et al. [10] examine how some users are treated
unfairly by content providers because they happen to share a
common IP address with a large pool of users, some of whom
may be malicious. For example, it was previously the case
that Cloudﬂare imposed multiple CAPTCHAs on Tor users
due to the relatively high volume of malicious activity that it
received from the Tor network [40]. Davidson et al. propose
PrivacyPass, a cryptographic protocol
that allows users to
earn “tokens” by providing solutions to a challenge; these
tokens can then be exchanged in the future without interacting
with the challenge again. However, PrivacyPass requires the
participation of the service provider. In contrast, exit bridges
are designed as a more general solution and do not require the
support of either the requested website or its hosting provider.
III. DESIGN PRINCIPLES
We next present an overview of exit bridges, starting with
a motivating analysis of the state of server-side discrimination
against Tor.
A. The state of server-side blocking of Tor
To understand the status quo of how severely Tor trafﬁc
is blocked or censored at various destination websites, we
conduct an analysis of Tor’s accessibility to Alexa’s top 10,000
websites. For each website, we perform three consecutive
HTTP/S requests and collect their responses: one direct request
without using Tor (Direct1) from a local machine, one request
through Tor (Tor), and ﬁnally another direct request (Direct2)
from same local machine. The reason for performing two
direct requests is to identify sites that serve signiﬁcantly
different content for each request (see Figure 1).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:25:23 UTC from IEEE Xplore.  Restrictions apply. 
254
Header HTML Similarity
26.86%
7.99%
27.94%
9.86%
pycurl
Selenium
TABLE I: Tor block rates for Alexa’s top 10,000 sites, including sites
that present CAPTCHAs.
Header HTML Similarity
8.01%
7.39%
8.97%
9.21%
pycurl
Selenium
TABLE II: Tor block rates for Alexa’s top 10,000 sites, after removing
sites that present CAPTCHAs.
We further reﬁne our results by excluding sites that serve
CAPTCHAs to Tor users, since presumably users could still
access these sites if they are willing to solve puzzles. Table II
shows these ﬁltered results. Here, our results are generally
consistent both between web clients and block detection tech-
niques. Overall, we ﬁnd that approximately 8% of Alexa top
sites blocks Tor. The modest differences in HTML similarity
scores between the two crawlers is due to the manner in
which pages are constructed: pycurl retrieves the embedded
web objects, while Selenium does a full rendering of the page
(including Javascript).
To sanity-check our automated technique, we additionally
randomly sampled 100 sites from the Alexa list and then
manually evaluated whether the sampled sites discriminated
against Tor. To conduct our manual analysis, we loaded
each site directly without using Tor and contemporaneously
requested the site through the TorBrowser. We found that 11%
of the sampled sites either blocked Tor or timed-out when
using the TorBrowser, which generally agrees with the ﬁndings
of our more comprehensive automated analysis.
Our ﬁndings agree with prior studies [26, 41] that similarly
show high rates of server-side blocking of Tor trafﬁc. As such
blocking becomes more commonplace, we posit that more
users may turn away from using Tor, since they will become
increasingly unable to access content on the Internet. This, in
turn, will endanger users’ anonymity as they either decide to
directly access content (at the expense of losing anonymity)
or move to less studied (and sometimes dubious) methods of
achieving anonymity.
B. Threat model
We consider the threat model adopted by Tor [12]. Brieﬂy,
we assume an adversary whose goal is to compromise the
anonymity of Tor users. The adversary can observe, inject,
modify, delete, or delay the trafﬁc within its reach.
The adversary may also operate or compromise some of the
Tor relays. Finally, we allow the adversary to compromise the
entire exit bridge infrastructure.
As a focus of this paper, we additionally consider the
threat posed by adversaries that, as content providers, aim
to discriminate against Tor users by providing differentiated
services between Tor and non-Tor users. (In the remainder of
this paper, we use the shorthand “block” to denote any instance
Fig. 1: A webpage (livejournal.com) that renders different dynamic
content. Comparing the left and right screenshots, different cover
stories, article feeds, and languages are presented for different users.
We use two techniques to measure the frequency at which
sites block Tor. We ﬁrst consider the HTTP response codes
returned by the server in the Direct1 and Tor conﬁgurations.
We treat a web request as successful if and only if we receive a
2xx or 3xx HTTP response code (which signiﬁes success). We
consider a site to block Tor if we receive an HTTP response
code that indicates success for Direct1, but not for Tor.
We also consider the similarity between a page fetched
directly (Direct1) or viaTor . Here, we quantify similarity
using the HTML similarity score metric [22, 28], where a
score of 1 indicates that two HTML documents are identical,
and a score of 0 reﬂects completely different content (e.g.,
one request returns an empty response). We consider only
sites that returned 2xx or 3xx HTTP response codes when
their top pages were fetched via Direct1 and whose returned
content was valid HTML. We choose a conservative threshold
and consider a site to be blocked if (i) the HTML similarity
score of the site’s top page between Direct1 and Tor is below
0.01, indicating that the two returned HTML pages are almost
entirely different and (ii) the HTML similarity score of the
site’s top page between Direct1 and Direct2 is above 0.01.
The latter check reduces false positives by not considering sites
that serve radically different content based on geolocations.