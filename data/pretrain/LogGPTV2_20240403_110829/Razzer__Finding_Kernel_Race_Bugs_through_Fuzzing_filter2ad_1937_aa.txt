title:Razzer: Finding Kernel Race Bugs through Fuzzing
author:Dae R. Jeong and
Kyungtae Kim and
Basavesh Shivakumar and
Byoungyoung Lee and
Insik Shin
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Razzer: Finding Kernel Race Bugs through Fuzzing
Dae R. Jeong
†
‡
Kyungtae Kim
‡
Basavesh Shivakumar
Byoungyoung Lee
‡∗
Insik Shin
†
†
Computer Science, KAIST,
Computer Science, Purdue University,
‡
Electrical and Computer Engineering, Seoul National University
∗
Abstract—A data race in a kernel is an important class of bugs,
critically impacting the reliability and security of the associated
system. As a result of a race, the kernel may become unresponsive.
Even worse, an attacker may launch a privilege escalation attack
to acquire root privileges.
In this paper, we propose RAZZER, a tool to ﬁnd race bugs
in kernels. The core of RAZZER is in guiding fuzz testing
towards potential data race spots in the kernel. RAZZER employs
two techniques to ﬁnd races efﬁciently: a static analysis and
a deterministic thread interleaving technique. Using a static
analysis, RAZZER identiﬁes over-approximated potential data
race spots, guiding the fuzzer to search for data races in the
kernel more efﬁciently. Using the deterministic thread interleav-
ing technique implemented at the hypervisor, RAZZER tames
the non-deterministic behavior of the kernel such that it can
deterministically trigger a race. We implemented a prototype of
RAZZER and ran the latest Linux kernel (from v4.16-rc3 to v4.18-
rc3) using RAZZER. As a result, RAZZER discovered 30 new races
in the kernel, with 16 subsequently conﬁrmed and accordingly
patched by kernel developers after they were reported.
I. INTRODUCTION
Data races are detrimental to the reliability and security
of the underlying system. Particularly for the kernel, data
races are the root cause of various harmful behaviors. If
a data race introduces circular lock behavior,
the kernel
can become unresponsive due to the resulting deadlock. If
safety assertions residing in the kernel arise, the kernel would
reboot itself, resulting in a denial-of-service. Especially from
the perspective of security, data races may turn into critical
security attacks if they lead to traditional memory corruptions
in the kernel (e.g.,
traditional buffer overﬂows, use-after-
free, etc.), which may allow privilege escalation attacks, as
observed in kernel exploits abusing previously known data
races, such as CVE-2016-8655 [26], CVE-2017-2636 [28], and
CVE-2017-17712 [27].
In response to these issues associated with data races,
there have been extensive research efforts with regard to
avoiding, preventing, or detecting them. However, to the best
of out knowledge, each technique has certain limitations,
mainly due to the fact that a data race inherently stems from
the non-deterministic behavior of the kernel. More precisely,
understanding the data race requires not only precise control-
ﬂow and data-ﬂow information but also precise concurrency
execution information, which is heavily impacted by many other
Correspondence to: Byoungyoung Lee (PI:EMAIL)
external factors of the underlying system (such as scheduling,
synchronization primitives, etc.).
In this paper, we propose RAZZER, a fuzzing based data
race detector. The key insight behind RAZZER is that it drives
the fuzz testing towards potential data race spots in the kernel.
To achieve this, RAZZER takes a hybrid approach, leveraging
both static and dynamic analyses, to amplify the advantages
of two techniques while complementing their disadvantages.
First, RAZZER carries out a static analysis to obtain over-
approximated, potential data race points. Based on information
on such potential data race points, RAZZER performs a two-
staged dynamic fuzz testing. The ﬁrst stage involves a single-
thread fuzz testing, which focuses on ﬁnding a single-thread
input program that executes potential race points (without
considering whether the program indeed triggers the race). The
second stage is multi-thread fuzz testing. It constructs a multi-
thread program, which further leverages a tailored hypervisor
intentionally to stall its execution at potential data race points.
As such, RAZZER avoids any external factors to render the
race behavior deterministic, making it an efﬁcient fuzzer for
data races.
We implemented RAZZER’s static analysis with an LLVM
pass to conduct a points-to analysis, and the hypervisor was
developed by modifying QEMU and KVM for x86-64. The
corresponding two-staged fuzzing framework is developed to
fuzz system call interfaces of the kernel, while leveraging
static analysis results as well as the tailored hypervisor. Once
RAZZER identiﬁes a data race, it outputs not only the input
program to reproduce the race but also provides a detailed
report that facilitates an easy understanding of the root cause
of the race.
Our evaluation of RAZZER demonstrates that RAZZER is
truly a ready-to-be-deployed race detection tool. We applied
RAZZER to the latest versions of the Linux kernel (from
v4.16-rc3 to v4.18-rc3) at the time of writing this paper,
and RAZZER found 30 new data races in the kernel. We have
reported these; 16 races have been conﬁrmed and patches
of 14 have been submitted thus far by the kernel developers.
Moreover, 13 races have been merged into various affected
kernel versions, including the mainline kernel as well.
To highlight the effectiveness of RAZZER in ﬁnding data
races, we performed a restricted comparison study (§III-C)
with other state-of-the-art tools, speciﬁcally Syzkaller [42]
(i.e., a kernel fuzzer developed by Google) and SKI [16] (i.e.,
an academic research prototype which randomizes the thread
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:37)(cid:66)(cid:70)(cid:1)(cid:51)(cid:15)(cid:1)(cid:43)(cid:70)(cid:80)(cid:79)(cid:72)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:18)(cid:24)
(cid:24)(cid:22)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
interleaving to ﬁnd races in the kernel). Summarizing this
comparison study, RAZZER signiﬁcantly outperformed both
tools in identifying three race issues. Compared to Syzkaller,
RAZZER takes much less time to ﬁnd a race, ranging from 23
to 85 times (at minimum). Compared to SKI, RAZZER was far
more effective in exploring thread interleaving cases to ﬁnd a
race, ranging from 30 to 398 times.
Furthermore, our reporting experience with the kernel
developers suggests that RAZZER’s detailed analysis report
assists developers to ﬁx a reported race easily. More speciﬁcally,
because RAZZER points out a speciﬁc race location (i.e., two
memory access instructions in the kernel incurring the race)
as well as the call stack when the race occurs, developers
were easily able to determine the root cause of the race and
develop a patch for it. As an extreme example, once we
reported newly discovered races through LKML [4], two of
our reported races were patched (within 20 minutes and in
2 hours by the respective kernel developers). In light of the
common knowledge about data races, particularly the difﬁculty
in determining the root causes, we believe that our reporting
experience suggests the strong potential to facilitate easy, low-
cost patching for data races.
This paper makes the following contributions:
• Race-Oriented Fuzzer. We present a new fuzz testing
mechanism which is speciﬁcally designed to detect races
in the kernel. It leverages both static and dynamic analysis
techniques to focus its fuzzing on potential race points.
• Robust Implementation: We implemented RAZZER based
on various industry-strength frameworks, ranging from
KVM/QEMU to LLVM. It requires no manual modiﬁcation
of the target kernel to be analyzed. We believe its imple-
mentation is robust enough given that it can easily support
the latest Linux kernel without any manual intervention.
• Practical Impacts: We ran RAZZER on the Linux kernel,
and it found 30 races, where 16 races were already conﬁrmed
and accordingly ﬁxed by the respective kernel developers.
We will open source of RAZZER1 such that kernel developers
and researchers can beneﬁt from using RAZZER.
This paper is organized as follows. §II deﬁnes the problem
scope and identiﬁes the design requirements of RAZZER. §III
presents the design detail of RAZZER, and §IV describes
its implementation. §V presents various evaluation results of
RAZZER. §VI discusses related work, and §VIII concludes the
paper.
II. PROBLEM SCOPE AND DESIGN REQUIREMENTS
In this section, we ﬁrst deﬁne the data race, which is the main
focus of this paper. We then summarize existing approaches to
ﬁnd race bugs in the target program. Lastly, we describe our
motivating example and brieﬂy explain our approach.
A. Problem Scope and Terminology
This paper aims to identify data races in system software.
A data race is behavior in which the output is dependent on
1https://github.com/compsec-snu/razzer
the sequence or the timing of other non-deterministic events.
More speciﬁcally, a data race occurs when two memory access
instructions in a target program meet the following three
conditions: (i) they access the same memory location. (ii)
at least one is a write instruction. and (iii) they are executed
concurrently.
If all above three conditions above are met, the memory
accesses performed by the two memory instructions can be non-
deterministic, rendering computational result to vary depending
on the execution order. Throughout this paper, we use the
term RacePaircand to denote two memory access instructions
that may satisfy the three conditions described above (i.e., a
candidate race pair), and we use RacePairtrue for those that are
conﬁrmed to meet the three conditions (i.e., a true race pair,
which is a subset of RacePaircand).
Data races can be further classiﬁed into two groups: benign
and harmful. A benign race is an expected (or intentional)
data race by developers, tolerating a potential deviation in the
computational results. For example, it is common to allow
data races in maintaining performance counters, as doing so
can avoid sluggish data contentions on a performance counter
variable (while tolerating a small error of a counter value). We
use the term RacePairbenign to refer to two memory instructions
raising such a benign race.
A harmful race is a data race that negatively impacts a run-
time behavior of a program, and we use the term RacePairharm
for this case. Due to the non-deterministic computational result,
there can be various aftermaths of a harmful race, including
deadlocks, raising safety assertions in the kernel, and memory
safety violations (including stack/heap buffer overﬂows, use-
after-free, and double-free), etc. We note that these aftermaths
are critical to kernel’s reliability and security: deadlocks may
make the kernel unresponsive, violating safety assertions may
cause a reboot the kernel, and memory safety violations allow
a privilege escalation attack. We use the term RacePairharm to
refer to two memory instructions in this case.
Summarizing the terminology, RacePaircand refers to two
memory access instructions that may cause a race, and
RacePairtrue refers to two instructions that are conﬁrmed to
cause a race. RacePairtrue can be further classiﬁed into two
groups: RacePairbenign and RacePairharm.
Race Example: CVE-2017-2636. To clarify how a data race
occurs, we take the real-world example from the Linux kernel,
CVE-2017-2636 [28], as illustrated in Figure 1. This race can
be induced by an adversarial multi-threaded user program
which invokes a speciﬁc list of syscalls in a speciﬁc order.
The data race occurs while the kernel is processing such
syscalls, which in turn causes a double-free issue that allows
a privilege escalation attack. In particular, the key to trigger
the race consists of two system calls, ioctl(fd, TCFLSH) and
write(fd, ...), each of which is executed concurrently by
user thread A or B, respectively. In response, the kernel starts
executing the corresponding syscall handlers on an individual
kernel thread (i.e., kernel thread A or B). In order to trigger
the race, kernel thread A ﬁrst checks if n_hdlc->tbuf (n_hdlc
is a structure allocated in the heap) is a null pointer (line 431
(cid:24)(cid:22)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:09 UTC from IEEE Xplore.  Restrictions apply. 
User
ioctl(fd, TCFLSH);
User thread A
int fd = open(”/dev/ptmx”);
Pre-race
ioctl(fd, TCXONC);
close(fd);
Post-race
write(fd, “……”);
User thread B
Kernel
Exec
Flow
431:
432:
…
if (n_hdlc->tbuf) {
push_back(free_list,
n_hdlc->tbuf);
RPB
RPA
440:        n_hdlc->tbuf = NULL;
441:     }
…
…
216:    tbuf = n_hdlc->tbuf;
…
217:    if (tbuf)
218:          push_back(free_list
tbuf);
Guest
User
X
Y
Guest
Kernel
…
syscall i – 1 (w, …)
syscall I (x, …)
…
User Thread A
…
…
cmp %r14,%r12
je
ffff…..734
…
`
…
movq $0, 0x20(%rbx)
callq 0xffff……cbf0
…
…
…
syscall j (y, …)
syscall j + 1 (z, …)
…
User Thread B
②
⑤
⑥
X
Y
…
…
mov -0x20(%rdi), %r8
test %r8, %r8
…
…
mov $0x2400,%esi
add     $0x10,%rdi
…
…
①
③
④
⑦