Returns bytes unless the decNumber has too many digits to fit in length bytes (allowing for the sign) or
is a special value (an infinity or NaN), in which cases NULL is returned and the bytes and scale values
are unchanged.
The number is converted to bytes in Packed Decimal format, right aligned in the bytes array, whose
length is given by the second parameter. The final 4-bit nibble in the array will be one of the preferred
sign nibbles, 1100 (0x0c) for + or 1101 (0x0d) for -. The maximum number of digits that will fit in
the array is therefore length×2-1. Unused bytes and nibbles to the left of the number are set to 0.
The scale is set to the scale of the number (this is the exponent, negated). To force the number to a
particular scale, first use the decNumberRescale function (see page 39) on the number, negating the
required scale in order to adjust its exponent and coefficient as necessary.
decPackedToNumber(bytes, length, scale, number)
This function is used to convert a Packed Decimal format number to decNumber form in preparation
for arithmetic or other operations.
The arguments are:
bytes (uint8_t *) Pointer to an array of unsigned bytes which contain the number to be
converted.
length (int32_t) Contains the length of the byte array, in bytes.
scale (int32_t *) Pointer to an int32_t which contains the scale of the number to be
converted. This must be set; use 0 if the number has no associated scale (that is, it is an
integer). The effective exponent of the resulting number (that is, the number of
significant digits in the number, less the scale, less 1) must fit in 9 decimal digits.
number (decNumber *) Pointer to the decNumber structure which will receive the number. It
must have space for length×2-1 digits.
Returns number, unless the effective exponent was out of range or the format of the bytes array was
invalid (the final nibble was not a sign, or an earlier nibble was not in the range 0–9). In these error
cases, NULL is returned and number will have the value 0.
Note that -0 and zeros with non-zero exponents are possible resulting numbers.
68 Module descriptions Version 3.68
Additional options
This section describes some additional features of the decNumber package, intended to be used when
customizing, tuning, or testing the package. If you are just using the package for applications, using
full IEEE arithmetic, you should not need to modify the parameters controlling these features unless
compiling for a big-endian target, in which case the DECLITEND setting will need to be altered.
If any of these parameters is changed, all the decNumber source files being used must be recompiled
to ensure correct operation.
Each parameter is set to a default value in one of the header files, as noted below. The parameters are
only set if undefined, so the defaults can be overridden by compiler command-line definitions (e.g.,
with the option -DDECUSE64=0).
Version 3.68 Additional options 69
Customization parameters
The decNumber package includes four compile-time parameters for customizing its use.
The first parameter controls the layout of the compressed decimal formats (see page 48). The storage
of a number in these formats must follow the byte ordering (“endianness”) of the computing platform;
this parameter determines how the formats are loaded and stored. The parameter is set in the
decNumberLocal.h file, and is:
DECLITEND This must be either 1 or 0. If 1, the target platform is assumed to be little-endian (for
example, AMD and Intel x86 architecture machines are little-endian, where the byte
containing the sign bit of the format is at the highest memory address). If 0, the target
platform is assumed to be big-endian (for example, for IBM System z machines are
big-endian, where the byte containing the sign bit of the format is at the lowest
memory address).
Many compilers provide a compile-time definition for determining the endianness of
the target platform, and DECLITEND can in that case be defined to use the provided
definition.
The decContextTestEndian function can be called to check that the DECLITEND
parameter is set correctly.
A second customization parameter allows the use of 64-bit integers to improve the performance of
certain operations (notably multiplication and the mathematical functions), even when DECDPUN (see
page 71) is less than 5. (64-bit integers are required for the decNumber module when DECDPUN is 5 or
more.) The parameter is set in the decNumberLocal.h file, and is:
DECUSE64 This must be either 1 or 0. If 1, which is recommended, 64-bit integers will be used
for most multiplications and mathematical functions when DECDPUN4. If set to 0, 64-bit integer support is not used
when DECDPUN<=4, and the maximum value for DECDPUN is then 4. Full 64-bit
support is not assumed; only 32×32 to 64 and the inverse (divide) are used; most 32-
bit compilers will be able to handle these efficiently without requiring 64-bit
hardware.
Another customization parameter controls whether the status flags returned by decNumber are
restricted to the five IEEE flags or comprise an extended set which gives more detail about invalid
operations along with some extra flags (this does not affect performance). The parameter is set in the
decContext.h file, and is:
DECEXTFLAG This must be either 1 or 0. If 1, the extended set of flags is used. If 0, only 5 bits are
used, corresponding to the IEEE 754 flags.
The fourth customization parameter enables the inclusion of extra code which implements and
enforces the subset arithmetic defined by ANSI X3.274. This option should be disabled, for best
performance, unless the subset arithmetic is required.
The parameter is set in the decContext.h file, and is:
DECSUBSET This must be either 1 or 0. If 1, subset arithmetic is enabled. This setting includes the
extended flag in the decContext structure and all code which depends on that flag.
Setting DECSUBSET to 0 improves the performance of many operations by 10%–20%.
70 Additional options Version 3.68
Tuning parameters
The decNumber package incorporates two compile-time parameters for tuning the performance of the
decNumber module. These are used to tune the trade-offs between storage use and speed. The first of
these determines the granularity of calculations (the number of digits per unit of storage) and is
normally set to three or to a power of two. The second is normally set so that short numbers (tens of
digits) require no storage management – working buffers for operations will be stack based, not
dynamically allocated. These are:
DECDPUN This parameter is set in the decNumber.h file, and must be an integer in the range 1
through 9. It sets the number of digits held in one unit (see page 30), which in turn
alters the performance and other characteristics of the library. In particular:
• If DECDPUN is 1, conversions are fast, but arithmetic operations are at their
slowest. In general, as the value of DECDPUN increases, arithmetic speed
improves and conversion speed gets worse.
• Conversions between the decNumber internal format and the decimal64 and
other compressed formats are fastest – sometimes by as much as a factor of 4
or 5 – when DECDPUN is 3 (because Densely Packed Decimal encodes digits in
groups of three).
• If DECDPUN is not 1, 3, or a power of two, calculations converting digits to
units and vice versa are slow; this may slow some operations by up to 20%.
• If DECDPUN is greater than 4, either non-ANSI-C-89 integers or library calls
have to be used for 64-bit intermediate calculations.24
The suggested value for DECDPUN is 3, which gives good performance for working
with the compressed decimal formats. If the compressed formats are not being used,
or 64-bit integers are unavailable (see DECUSE64, below), then measuring the effect
of changing DECDPUN to 4 is suggested. If the library is to be used for high precision
calculations (many tens of digits) then it is recommended that measurements be made
to evaluate whether to set DECDPUN to 8 (or possibly to 9, though this will often be
slower).
DECBUFFER This parameter is set in the decNumberLocal.h file, and must be a non-negative
integer. It sets the precision, in digits, which the operator functions will handle
without allocating dynamic storage.25
One or more buffers of at least DECBUFFER bytes will be allocated on the stack,
depending on the function. It is recommended that DECBUFFER be a multiple of
DECDPUN and also a multiple of 4, and large enough to hold common numbers in your
application.
24 The decNumber library currently assumes that non-ANSI-C-89 64-bit integers are available if DECDPUN is greater than
4. See also the DECUSE64 code parameter.
25 Dynamic storage may still be allocated in certain cases, but in general this is rare.
Version 3.68 Additional options 71
Print and testing parameters
The decNumber package includes a compile-time parameter that can be used to prevent the package
using the printf function. This parameter is set in the decNumberLocal.h file, and is:
DECPRINT This must be either 1 or 0. If 1, calls to printf are permitted; if 0, they will not. In
the latter case, the decContextTestEndian will not display a warning message
(even if its argument is 0), and also the functions decSingleShow,
decDoubleShow, and decQuadShow will be excluded from compilation.
The decNumber package also incorporates three compile-time parameters which control the inclusion
of extra code which provides for extra checking of input arguments, etc., run-time internal tracing
control, and storage allocation auditing. These options are usually disabled, for best performance, but
are useful for testing and when introducing new conversion routines, etc. It is recommended that
DECCHECK be set to 1 while developing an application that uses decNumber.
These test settings may all report errors using the printf function, so DECPRINT must be set to 1 if
any of them are used. The parameters are all set in the decNumberLocal.h file, and are:
DECCHECK This must be either 1 or 0. If 1, extra checking code, including input structure
reference checks, will be included in the module. The latter checks that the structure
references are not NULL, and that they refer to valid (internally consistent in the
current context) structures. If an invalid reference is detected, the
DEC_Invalid_operation status bit is set (which may cause a trap), a message may
be displayed using printf, and any result will be a valid number of undefined value.
This option is especially useful when testing programs that construct decNumber
structures explicitly.
Some operations take more than twice as long with this checking enabled, so it is
normally assumed that all decNumbers are valid and DECCHECK is set to 0.
DECALLOC This must be either 1 or 0. If 1, all dynamic storage usage is audited and extra space
is allocated to enable buffer overflow corruption checks. The cost of these checks is
fairly small, but the setting should normally be left as 0 unless changes are being
made to the decNumber.c source file.
DECTRACE This must be either 1 or 0. If 1, certain critical values are traced (using printf) as
operations take place. This is intended for decNumber development use only, so
again should normally be left as 0.
72 Additional options Version 3.68
Appendix A – Library performance
The decNumber module implements arbitrary-precision arithmetic with fully tailorable parameters
(rounding precision, exponent range, and other factors can all be changed at run time). All decNumber
operations can accept arbitrary-length operands. Further, decNumber uses a general-purpose internal
format (tunable at compile time) which therefore requires conversions to and from any external format
(such as strings, BCD, or the IEEE 754 fixed-size decimal encodings).
As a result, the module has significant overheads compared to the dedicated decFloats modules (see
page 52) which work directly on the fixed-size encodings. This appendix compares the performance
of the decNumber module with the decDouble and decQuad implementations of the same operations.
As the tables below show, there is a significant performance advantage in using the decFloats modules
when arbitrary-precision operations are not required.
Description of the tables
In the following tables, timings for each operation are given in processor clock cycles. While generally
a more useful indicator of comparative performance than “wall clock” times, cycle counts vary
considerably with processor architecture. For example, the times below are cycles measured on an
Intel Pentium M processor in an IBM X41T Thinkpad;26 on a Pentium 4 or RISC processor most of the
tests would show significantly higher cycle counts. The compiler used also makes a measurable
difference. Details of the tests and compiler are given in the notes at the end of this appendix.
Throughout the tables, worst-case cycle times are shown for the main operations in the decDouble and
decQuad modules, compared with the same operations using the decNumber module (which requires
conversion of operands and results).
Worst-case timings are quoted because best-case timings are generally trivial special cases (such as
NaN arguments) and “typical” instruction mixes are very application-dependent.
For each operation, the name of the operation is given, along with a brief description of the worst-case
form of the operation. This is the worst case for the decFloats module (in some cases the worst case is
different for the decNumber module).
26 “Intel” and “Pentium” are trade marks of the Intel Corporation. “Thinkpad” is a trade mark of Lenovo.
Version 3.68 Appendix A – Library performance 73
decDouble performance tables
decDouble (64-bit) conversions
Operation decDouble decNumber
Encoding to BCD (with exponent) 39 481
16-digit finite
BCD to encoding (with exponent) 46 327
16-digit finite
Encoding to string 84 133
16-digit, with exponent
Exact string to encoding (unrounded) 229 196
16-digit, with exponent
String to encoding (rounded (see page 77)) 266 548
16-digit, rounded, with exponent
Widen to decQuad 30 209
16-digit, with exponent
int32 to encoding 39 199
From most negative int
Encoded integer to int32 32 136
To most negative int32
decDouble (64-bit) miscellaneous operations
Operation decDouble decNumber
Class (classify datum) 37 113
Negative small subnormal
Copies (Abs/Negate/Sign) 25 338
CopySign, copy needed
Count significant digits 24 122
Single digit
Logical And/Or/Xor/Invert (digitwise) 23 510
16-digit
Shift/Rotate 154 583
Rotate 15 digits
74 Appendix A – Library performance Version 3.68
decDouble (64-bit) computations
Operation decDouble decNumber
Add (same-sign addition) 248 848
16-digit, unaligned, rounded
Subtract (different-signs addition) 288
16-digit, unaligned, rounded, borrow
Compare 126 442
16-digit, unaligned, mismatch at end
CompareTotal 149 594
16-digit, unaligned, mismatch at end
Divide 828 1576
16- by 16-digit (rounded)
FMA (fused multiply-add) 785 1683
16-digit, subtraction, rounded
LogB (returns a decDouble) 48 279
Negative result
MaxNum/MinNum 155 656
16-digit, unaligned, mismatch at end
Multiply 362 1305
16×16-digit, round needed
Quantize 112 422
16-digit, round all-nines
ScaleB (from decDoubles) 212 513
Underflow
To integral value 135 709
16-digit, round all-nines
Version 3.68 Appendix A – Library performance 75
decQuad performance tables
decQuad (128-bit) conversions
Operation decQuad decNumber
Encoding to BCD (with exponent) 53 460
34-digit finite
BCD to encoding (with exponent) 74 307
34-digit finite
Encoding to string 183 239
34-digit, with exponent
Exact string to encoding (unrounded) 297 597
34-digit, with exponent
String to encoding (rounded (see page 77)) 451 956
34-digit, rounded, with exponent
Narrow to decDouble 140 612
34-digit, all nines
int32 to encoding 44 199
From most negative int
Encoded integer to int32 32 156
To most negative int32
decQuad (128-bit) miscellaneous operations
Operation decQuad decNumber
Class (classify number) 53 133
Negative small subnormal
Copies (Abs/Negate/Sign) 27 380
CopySign, copy needed
Count significant digits 27 138
Single digit
Logical And/Or/Xor/Invert (digitwise) 27 622
34-digit
Shift/Rotate 222 812
Rotate 33 digits
76 Appendix A – Library performance Version 3.68
decQuad (128-bit) computations
Operation decQuad decNumber
Add (same-sign addition) 433 1180
34-digit, aligned