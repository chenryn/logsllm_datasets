systematic methodology to crawl websites and load ad content
in them. They then analyze the redirection chains and landing
pages for malicious activity. Zarras et al. [4] have also studied
web malvertising. Our work is different from these works in
several aspects. First, our focus is on mobile applications;
a similar study on mobile apps has not been done earlier.
Moreover, we broadly study all app-web interaction and not just
advertisements. Second, a study on mobile applications needs an
additional triggering component in the methodology. Triggering
for web malvertising is trivial as the entire web page is loaded
at once with all the advertisements simultaneously visible.
Triggering increases the complexity of the methodology and we
have also made an important contribution to enhance it. Finally,
the malware propagation vectors through web malvertising are
different from what we see on mobile. Drive-by-downloads are
virtually non-existent on mobile platforms such as Android due
to sandboxing at the process level. Similarly link hijacking, i.e.,
advertisement or other malicious code embedded in a web page
automatically redirecting users to a page they did not intend
without any user interaction, is also not possible on mobile
apps. Rather the main propagation vector for malware is trojans.
Collecting trojans again complicates our methodology as we
need to automatically download content from the landing pages.
C. Malware Analysis and Detection
Both the industry and the academia are interested in
analyzing potentially malicious or malicious applications to
understand their behavior. We discuss here works related to
mobile platforms only. Google has a service called Bouncer
in place to analyze any applications that get uploaded to
Google Play for malicious activity [39]. More recently, Google
also introduced the VerifyApps service that collects all the
applications from the Web, including those not from Google
Play, and curates analysis results on those applications. The
details of analysis are not public but it is likely to be a mix
of both static and dynamic analysis. The results are used to
warn the users whenever they install an application of which
the VerifyApps is suspicious [40].
Mobile Sandbox [41] and Andrubis [42] are some of the
dynamic analysis sandboxes proposed by the academia. They
incorporate several different analyses and produce a report for
the analyzed application, such as the permissions, the servers
contacted while running, and so on. We are not aware of
any analysis system that incorporates the kind of analysis
we do: understanding the app-web interfaces and following
the web links from applications and analyzing if they host
any malicious content. If such analysis is supported by the
industry or the government, it will be very helpful in curbing
down instances of malicious content reachable from mobile
applications. Moreover, by using their results, it may be possible
for us as well to enhance our detection.
Another avenue of related work is honeypots. Honeypots
interact with attackers allowing them to exploit the honeypots.
This way, valuable information, such as malicious servers and
websites as well as previously unknown vulnerabilities, can
be identiﬁed. HoneyMonkey [43] is an active honeypot, i.e., it
actively crawls and seeks out websites to connect. It analyzes
the differences in the system state before and after visiting
to determine if it was exploited. Such systems also need to
perform triggering and detection; however triggering in case of
mobile UI is more complicated. Moreover, our detection also
does not seek to identify exploits but to recognize scams and
download trojans.
Researchers have also proposed several
techniques to
perform Android malware detection. Zhou et al. [44] analyzed
mobile applications from Play and third-party application
stores and detected several instances of malware. Grace et
al. [45] perform static analysis on Android applications to
systematically detect malware. Arp et al. [46] introduce a
machine-learning based system to detect and classify Android
malware of previously known families. Zhang et al. [47] propose
a dynamic analysis based on permission use to detect malicious
applications. Feng et al. [48] and Zhang et al. [49] propose
semantics-aware static analyses of applications so as to defeat
malware obfuscation attacks such as those proposed by Rastogi
et al. [50]. All these malware detection and analysis approaches
are complementary to our methodology and can be incorporated
in it to enhance our detection capabilities.
IX. CONCLUSION
In order to curb malware and scam attacks on mobile
platforms it is important to understand how they reach the
user. In this paper, we explored the app-web interface, wherein
13
a user may go from an application to a Web destination via
advertisements or web links embedded in the application. We
used our implemented system for a period of two months to
study over 600,000 applications in two continents and identiﬁed
several malware and scam campaigns propagating through
both advertisements and web links in applications. With the
provenance gathered, it was possible to identify the responsible
parties (such as ad networks and application developers). Our
study shows that should such as system be deployed, the users
can be offered better protection on the Android ecosystem by
screening out offending applications that embed links leading
to malicious content as well as by making ad networks more
accountable for their ad content.
ACKNOWLEDGMENT
We thank our reviewers for their valuable comments. We
would also like to thank Kexin Zhang and Yao Xiao, who helped
in data collection and in the early stages of implementation. This
paper was made possible by NPRP grant 6-1014-2-414 from the
Qatar National Research Fund (a member of Qatar Foundation),
by National Science Foundation grant CNS-1408790, and by
National Natural Science Foundation of China grant 61472209.
The statements made herein are solely the responsibility of the
authors.
REFERENCES
[1]
[2]
[3]
“Smartphone os market share, q1 2015,” http://www.idc.com/prodserv/
smartphone-os-market-share.jsp.
“Malware infected as many android devices as windows laptops in 2014,”
http://bgr.com/2015/02/17/android-vs-windows-malware-infection/.
“Android phones hit by ‘ransomware’,” http://bits.blogs.nytimes.com/
2014/08/22/android-phones-hit-by-ransomware/? r=0.
[4] A. Zarras, A. Kapravelos, G. Stringhini, T. Holz, C. Kruegel, and
G. Vigna, “The dark alleys of madison avenue: Understanding malicious
advertisements,” in Proceedings of the 2014 Conference on Internet
Measurement Conference. ACM, 2014, pp. 373–380.
[5] Z. Li, K. Zhang, Y. Xie, F. Yu, and X. Wang, “Knowing your enemy:
understanding and detecting malicious web advertising,” in Proceedings
of the 2012 ACM conference on Computer and Communications Security.
ACM, 2012, pp. 674–686.
[6] V. Rastogi, Y. Chen, and W. Enck, “AppsPlayground: Automatic
Security Analysis of Smartphone Applications,” in Proceedings of ACM
CODASPY, 2013.
“Selendroid: Selenium for android,” http://selendroid.io/.
[7]
[8] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou, “Fast, scalable
detection of piggybacked mobile applications,” in Proceedings of the
third ACM conference on Data and application security and privacy.
ACM, 2013, pp. 185–196.
[9] Symantec,
November
airpush-begins-obfuscating-ad-modules.
“Airpush
2012,
begins
modules,”
http://www.symantec.com/connect/blogs/
obfuscating
ad
[11]
[12]
[10] V. Rastogi, Y. Chen, and W. Enck, “Appsplayground: automatic security
analysis of smartphone applications,” in Proceedings of the third ACM
conference on Data and application security and privacy. ACM, 2013,
pp. 209–220.
“Genymotion,” https://www.genymotion.com/.
“Android-x86 running arm apps thanks to libhoudini and buildroid.org,”
2012, http://forum.xda-developers.com/showthread.php?t=1750783.
“Celery: Distributed task queue,” http://www.celeryproject.org/.
[13]
[14] N. Viennot, E. Garcia, and J. Nieh, “A measurement study of google
play,” in The 2014 ACM international conference on Measurement and
modeling of computer systems. ACM, 2014, pp. 221–233.
[15] http://forums.makingmoneywithandroid.com/advertising-networks/
1868-tapcontext-shit-breaking-policy-making-loosing-active-users.
html#post12949.
[16]
[17]
[18]
[19]
[20]
http://www.androidauthority.com/armor-for-android-342192/.
“Reputation of amarktﬂow.com,” https://www.mywot.com/en/scorecard/
amarktﬂow.com.
“Free iPad mini scam spreads via facebook rogue application,” https:
//nakedsecurity.sophos.com/2012/10/31/free-ipad-mini-facebook/.
“Apple
apple-ipad-scam.html.
“How to spot
scam: Why ’free
iPhone’ and ’free iPad’ stories are always bogus, and how to
avoid getting ripped off,” http://www.macworld.co.uk/feature/iphone/
free-iphone-ipad-scam-fake-auction-site-facebook-3608522/.
http://blog.spamﬁghter.com/software/
iPhone or
scam,”
iPad’
iPad
a
‘free
[21] T. Azim and I. Neamtiu, “Targeted and depth-ﬁrst exploration for
systematic testing of android apps,” ACM SIGPLAN Notices, vol. 48,
no. 10, pp. 641–660, 2013.
[22] W. Choi, G. Necula, and K. Sen, “Guided gui testing of android apps
with minimal restart and approximate learning,” in ACM SIGPLAN
Notices, vol. 48, no. 10. ACM, 2013, pp. 623–640.
[23] B. Liu, S. Nath, R. Govindan, and J. Liu, “Decaf: detecting and
characterizing ad fraud in mobile apps,” in Proc. of NSDI, 2014.
[24] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “Smv-
hunter: Large scale, automated detection of ssl/tls man-in-the-middle
vulnerabilities in android apps,” in Proceedings of Network and
Distributed Systems Security (NDSS), 2014.
[25] L. Ravindranath, S. Nath, J. Padhye, and H. Balakrishnan, “Automatic
and scalable fault detection for mobile applications,” in Proceedings of
the 12th annual international conference on Mobile systems, applications,
and services. ACM, 2014, pp. 190–203.
[26] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath,
R. Wang, and D. Wetherall, “Brahmastra: Driving apps to test the
security of third-party components,” in 23rd USENIX Security Symposium
(USENIX Security 14). USENIX Association, 2014, pp. 1021–1036.
[27] S. Hao, B. Liu, S. Nath, W. G. Halfond, and R. Govindan, “Puma:
Programmable ui-automation for large-scale dynamic analysis of mobile
apps,” in Proceedings of the 12th annual international conference on
Mobile systems, applications, and services. ACM, 2014, pp. 204–217.
[28] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang, “Appintent:
Analyzing sensitive data transmission in android for privacy leakage
detection,” in ACM CCS, 2013.
[30]
[29] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu, “Effective real-time android
application auditing,” in IEEE Security and Privacy, 2015.
J. Crussell, R. Stevens, and H. Chen, “Madfraud: Investigating ad fraud
in android applications,” in Proceedings of the 12th annual international
conference on Mobile systems, applications, and services. ACM, 2014,
pp. 123–134.
[31] W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. McDaniel, and A. Sheth,
“Taintdroid: An information-ﬂow tracking system for realtime privacy
monitoring on smartphones,” in OSDI, 2010.
[32] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall, “These
aren’t the droids you’re looking for: retroﬁtting android to protect data
from imperious applications,” in Proceedings of ACM CCS, 2011.
[33] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A study of android
application security,” in USENIX Security, 2011.
[34] C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Androidleaks:
Automatically detecting potential privacy leaks in android applications
on a large scale,” Trust and Trustworthy Computing, 2012.
[35] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure
analysis of mobile in-app advertisements,” in Proceedings of the ﬁfth
ACM conference on Security and Privacy in Wireless and Mobile
Networks. ACM, 2012, pp. 101–112.
[36] Y. Zhang, D. Song, H. Xue, and T. Wei, “Ad vulna: A
vulnaggressive
threatening
millions,” 2013, https://www.ﬁreeye.com/blog/threat-research/2013/10/
ad-vulna-a-vulnaggressive-vulnerable-aggressive-adware-threatening-millions.
html.
(vulnerable & aggressive)
adware
[37] S. Shekhar, M. Dietz, and D. S. Wallach, “Adsplit: Separating smartphone
advertising from applications.” in USENIX Security Symposium, 2012,
pp. 553–567.
[38] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, “Quire:
14
Lightweight provenance for smart phone operating systems.” in USENIX
Security Symposium, 2011, p. 24.
[39] H. Lockheimer, “Android and security,” February 2012, http://
googlemobile.blogspot.com/2012/02/android-and-security.html.
“Protect against harmful apps,” https://support.google.com/accounts/
answer/2812853?hl=en.
[40]
[41] M. Spreitzenbarth, F. Freiling, F. Echtler, T. Schreck, and J. Hoffmann,
“Mobile-sandbox: having a deeper look into android applications,” in
Proceedings of the 28th Annual ACM Symposium on Applied Computing.
ACM, 2013, pp. 1808–1815.
[42] M. Lindorfer, M. Neugschwandtner, L. Weichselbaum, Y. Fratantonio,
V. van der Veen, and C. Platzer, “Andrubis-1,000,000 apps later: A view
on current android malware behaviors,” in Proceedings of the the 3rd
International Workshop on Building Analysis Datasets and Gathering
Experience Returns for Security (BADGERS), 2014.
[43] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen,
and S. King, “Automated web patrol with strider honeymonkeys,” in
Proceedings of the 2006 Network and Distributed System Security
Symposium, 2006, pp. 35–49.
[44] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, you, get off of my
market: Detecting malicious apps in ofﬁcial and alternative android
markets,” in Proceedings of the 19th Network and Distributed System
Security Symposium, ser. NDSS ’12, 2012.
[45] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang, “Riskranker: scalable
and accurate zero-day android malware detection,” in Proceedings of
the 10th international conference on Mobile systems, applications, and
services, ser. MobiSys ’12. ACM, 2012.
[46] D. Arp, M. Spreitzenbarth, M. H¨ubner, H. Gascon, and K. Rieck, “Drebin:
Effective and explainable detection of android malware in your pocket,”
in Proceedings of the Annual Symposium on Network and Distributed
System Security (NDSS), 2014.
[47] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S. Wang, and
B. Zang, “Vetting undesirable behaviors in android apps with permission
use analysis,” in Proceedings of the 2013 ACM SIGSAC conference on
Computer & communications security. ACM, 2013, pp. 611–622.
[48] Y. Feng, S. Anand, I. Dillig, and A. Aiken, “Apposcopy: Semantics-based
detection of android malware through static analysis,” in Proceedings
of the 22nd ACM SIGSOFT International Symposium on Foundations
of Software Engineering. ACM, 2014, pp. 576–587.
[49] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, “Semantics-aware android
malware classiﬁcation using weighted contextual api dependency graphs,”
in Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2014, pp. 1105–1116.
[50] V. Rastogi, Y. Chen, and X. Jiang, “Droidchameleon: evaluating android
anti-malware against transformation attacks,” in Proceedings of the 8th
ACM SIGSAC symposium on Information, computer and communications
security. ACM, 2013, pp. 329–334.
15