reset
none
参数
preop
preaction
pretimeout
action
timeout
参数
3action的各参数设置时的行为
说明
说明
关闭电源
关闭电源再打开
重启系统
什么都不做
预超时时的驱动程序操作（preop_none、preop_panic）
预超时时的操作（pre_none、pre_smi、pre_nmi、pre_int）
超时操作执行和预超时（pretimeout）操作执行之间的时间差（秒）
超时时的操作（reset、none、power_cycle、power_off）
超时时间（秒）
HACK#22死机时利用 IPMI watchdog timer获取崩溃转储
www.TopSage.com
#122
131
132
---
## Page 146
当然，这些参数可以在通过命令行加载模块时直接设置，也可以写到
preop_panic, 引发 panic。
预超时时间的信息会通知给 ipmi 驱动程序，然后驱动程序执行 preop指定的动作
preaction 设置为 pre_int、preop 设置为 preop_panic，也能获得转储。此时，超过
引发 panic。如果设置了kdump（参见[HACK#20])，就能获取转储。另外，将
图3-4模块参数和执行的操作之间的关系
主板上就会产生NMI信号报警。NMI报警后，一般会启动内核的NMI处理程序
定的动作。设置为 pre_nmi的话，那么在超出 pretimeout 时间之外发生死机的话，
timer更新之后60 秒之内如果不发生更新（即系统死机了），就执行preaction指
或pre_int.例如,将timeout 设置为90,pretimeout 设置为30,这样最后一次 watchdog
要获取转储，应当设置 pretimeout为小于timeout 的值,并将 preaction设置为 pre_nmi
表 3-10 preop 的各参数的含义
参数说明
表3-9preaction的各参数设置时的行为
timer更新
最后的watchdog
preop_panic
pre_nmi
128
preop_none
参数
pre_int
pre_smi
pre_none
第3章内核调试的准备
引发 kermel panic
什么都不做
说明
引发 NMI 中断
使用中断将信息通知 IPMI 启动程序
将信息通知IPMII 驱动程序
什么都不做
www.TopSage.com
timeout
preaction执行
...
 pretimeout
时间
action执行
---
## Page 147
化后的代码。
中的 Documentation/watchdog/src/watchdog-simple.c也是控制程序之一。下面是简
有多个程序可以控制/dev/watchdog，都包含在 ipmitools 等中。另外，内核代码树
使用 softdog 和 IPMI WDT。
sofdog、厂商自带的硬件 WDT 的控制。但是，该接口为互斥的，比如不能同时
提供Linux 的 watchdog 标准控制功能，除了IPMI watchdog 之外，还能用于像
加载 ipmi_watchdog.ko之后,就能通过/dev/watchdog 控制 IPMI WDT。/dev/watchdog
/dev/watchdog 接口
获取崩溃转储的过程中执行重启等动作。
就会发生问题。例如，安装的内存较多，在timeout 时间内无法完成转储，就会在
kernel panic 后利用 diskdump 等工具的话，在死机的第1内核上执行崩溃转储，
使用 kdump 的话，转储会在第 2 内核上执行，因此没有问题，但 preaction 引发
下来又发生死机，那么在超过timeout设置的时间之后，就会执行action的动作。
执行 action指定的动作（硬件重启等）。第2点，即使pretimeout执行了，如果接
机，那么当然不会执行 pretimeout的动作，而超过timeout 设置的时间之后，就会
此外，设置参数时需要注意两点。第1点，如果内核在执行崩溃转储的过程中死
ipmi 服务，就能在启动时自动加载该模块。
/etc/modprobe.conf 中。RHEL5 中，在/etc/sysconfig/ipmi 中写入以下配置，打开
int main(void)
#include 
#include 
#include 
#include 
$ cat watchdog-very-simple.c
preop_panic"
IPMI_WATCHD0G_0PTIONSs="timeout=90 action=reset pretimeout=30 preaction=pre_init preop=
IPMI_WATCHDOG=yes
if (fd = -1) {
int ret = 0;
int fd = open("/dev/watchdog", 0_wRONLY);
HACK#22 死机时利用 iPMI watchdog timer 获取崩溃转储1129
www.TopSage.com
---
## Page 148
本 hack 讲述了使用IPMI watchdog timer 在死机时获取崩溃转储的方法。
总结
Linux 内核的 Documentation/IPMI.txt
参考文献
硬件，该模块就会加载失败。
另外，开头的 ipmi_si 是与主板上安装的 IPMI 硬件通信的模块，如果未安装 IPMI
会根据内核模块的 pre_timeout 设置，执行崩溃转储。
该方法停止 watchdog-very-simple 进程，模拟死机的发生。该操作发生之后，就
际让系统死机是很困难的，所以采取如下做法。
这里利用上述watchdog-very-simple 确认死机时是否能输出崩溃转储。但是，实
输出崩溃转储
130
#
Ctrl-z
# watchdog-very-sinple
preop=preop_panic
# modprobe ipmi_si
return ret;
while (1) {
第3章内核调试的准备
close(fd);
 sleep(10);
if (write(fd, "\0", 1) != 1) {
exit(EXIT_FAILURE);
perror("watchdog");
break;
ret = -1;
www.TopSage.com
---
## Page 149
注5：
现在的大多数机器都能使用该功能，可以用下述方法检查是否能使用。
检查能否使用NMlwatchdog
就认为发生了死机。
否被执行，如果超过一定时间没有执行(各个发行版不同，通常为5～30秒左右),
态下也能产生，CPU 就能执行 NMI 处理程序。NMI 处理程序监视定时器中断是
况下陷入死循环或死锁状态，定时器处理就无法执行。相反，NMI即使在这种状
数的中断，该次数由内核配置设置（100～1000次)。但是，如果在禁止中断的情
内核利用 NMI watchdog 检测死机的原理如下。通常定时器每秒钟会产生一定次
Linux 内核可以检测系统死机，并执行panic、获取崩溃转储。
中断。NMI watchdog 是利用该功能实现的 watchdog 定时器。通过 NMI watchdog;
NMI是 Non Maskable Interrupt 的缩写，意为不可屏蔽中断。这种中断本来用于将
什么是 NMl watchdog
# cat /proc/interrupts
# cat /proc/interrupts
(2-3秒之后）
NMI: 598499293 598499235
APIC（Advanced Programmable Interrput Controllers），高级可编程中断控制器。
CPUO
CPUO
本 hack 讲述利用x86_64、i386 架构上的 NMl watchdog 在系统死机
用NMIwatchdog在死机时获取崩溃转储
时获取崩溃转储的方法。
CPU1
CPU1
HACK#23 用 NMI watchdog 在死机时获取崩溃转储| 131
www.TopSage.com
一译者注
136
---
## Page 150
137
命令的输出以Linux2.6.19版内核为例。
本hack介绍一些用户空间中很难见到，
汇编代码进行分析。
分析内核的转储，就是要对比阅读内核源代码和使用crash命令的dis等显示的
#24
HACK
本hack讲述了利用NMI watchdog在死机时获取崩溃转储的方法。
总结
应（自旋锁篇之二）”。
另外，NMIwatchdog超时时的内核信息的例子请参见“HACK#38内核停止响
何，如果要保证通过nmi_watchdog的超时获得转储，就按照上面的方法设置。
状态等，就会通过kexec启动第2内核（secondkermel），执行崩溃转储。不论如
内核选项，只要满足几个条件，比如irq执行中、当前任务处于空闲状态或init
使之获取崩溃转储即可。另外，有些内核版本上，即使不设置上述nmi_watchdog
就会产生kernelpanic，然后设置kdump（[HACK#20]）、diskdump（[HACK#19]）
备上将N设置为2（localAPIC模式）。这样设置之后，NMIwatchdog在超时时
在安装了IO-APIC的设备上将N设置为1（IVO-APIC模式），没有IO-APIC的设
用上述方法确认NMIwatchdog可用后，可以在内核选项中加入以下设置。
在NMIwatchdog超时时获取崩溃转储
就只有在致命错误发生时才产生，NMI数字大部分情况下为0。
如果NMI增加，说明NMIwatchdog可用。如果NMIwatchdog不可用，那么NMI
132|第3章内核调试的准备
nmi_watchdog=panic,N（N为1或2）
NMI:598502039 598501981
本hack介绍一些用户空间中不常见的汇编指令。
内核独有的汇编指令（之一）
www.TopSage.com
，内核中却频繁出现的汇编指令。objdump
—大和一洋
---
## Page 151
可见，ud2指令之后立即出现 BUG_ON()或 BUG()。
①处有个ud2a。阅读内核源代码就能立即明白，●的源代码为①。
阅读内核的汇编代码，
BUG:ud2 指令
[include/asm-i386/bug.h]
#endif
#define BUG_ON(condition) do { if (unlikely((condition)!=0)) BUG(); }
#ifndef HAVE_ARCH_BUG_ON
[include/asm-generic/bug.h]
void free_buffer_head (struct buffer_head *bh)
[fs/buffer.c]
co184749:
c0184742:
c0184736:
c0184733:
c0184731:
c0184731 :
# objdump -d vmlinux-2.6.19
while(0)
c018473f:
c018473d:
c018473b:
c0184739:
put_cpu_var(bh_accounting);
BUG_ON( !list_empty(&bh->b_assoc_buffers)); -—
recalc_bh_state();
get_cpu_var(bh_accounting).nr--;
kmem_cache_free(bh_cachep, bh);
10 11
c
8d 40 28
dc 34 33
6
89c2
8b
al a0 35 4a c0 e8 s
g
4228
：会经常遇到 ud2指令。下面是 free_buffer_head()。
www.TopSage.com
adc
shlb $0xe8,0xc04a35a0(%ecx)
fdivl
市
B
&dl,(&ecx)
HACK#24 内核独有的汇编指令(之一)I 133
(%ebx,&esi,1)
(%ebx),secx
c0184743 
%eax, 0x28(%edx)
0x28 (%eax),*eax
geax,sedx
1
---
## Page 152
内核源代码如下所示。
内核的汇编代码中还经常见到 sti和 cli指令。下面是 on_each_cpu()。
禁止/允许中断：sti、cli指令
使 CPU 接受该异常。内核接受该异常后通过 handle_BUG()调用 BUG()。
“无效 opcode 异常”就是CPU 引发的异常（中断编号为6)，内核执行 ud2 指令，
图 3-5Intel手册中的说明
该指令在 Intel的手册中如图3-5所示。
134 1
int on_each_cpu(void (*func) (void *info), void *info, int retry, int wait)
c0129e75:
c0129e74:
c0129e5a :
# objdump -d vmlinux-2.6.19
[kernel/softirq.c]
c0129e7d:
c0129e7b:
c0129e7a:
c0129e79:
c0129e77:
co129e72:
co129e6d:
c0129e6b:
c0129e68:
c0129e64:
第3章内核调试的准备
int ret = 0;
8
8904 24
8b 44 24 14
5
f
8
8
8P
9
c3
3 70 cc fe ff
f8
OF OB
opcode
UD2-Undefined Instruction
www.TopSage.com
00
0
9.
call 
100
mov
%ebx
%ebx,%eax
Sedx
*%edi
%esi,%eax
%eax,&ebx
c0116ae2 
%edi,%eax
geax,(%esp)
0x14(%esp),%eax
UD2
指令
产生无效 opcode异常
说明
?
2
---