        map = av->binmap[block];
        bit = idx2bit(idx);
如果当前链表没有堆块能够满足，就将 idx 加一，目的是移动到下一个 largebin 链表，并且获取这个链表对应的 binmap 中的值，binmap
是分配区当中的一个成员，它用来标识相应的链表中是否存在空闲 chunk，利用 binmap 可以加快查找 chunk 的速度。 这段代码用来查询比 nb
大的链表中是否存在可用的 chunk。
        for (;;) {  // 进入循环
          /* Skip rest of block if there are no more set bits in this block.  */
          if (bit > map || bit == 0) {   // 首先判断 bit 是否大于 map，或者 bit 等于 0？
        do {    // 循环遍历每个 block，尝试找到一个符合条件的 block
          if (++block >= BINMAPSIZE)  /* out of bins */ 
            goto use_top;
        } while ( (map = av->binmap[block]) == 0);
        bin = bin_at(av, (block binmap[block] = map &= ~bit; /* Write through */  // 清除之前设置的标志位
        bin = next_bin(bin);    // 获取当前 bin 的下一个 bin，
        bit = (unsigned long)(nb));  // 如果上面取出的 chunk 不是表头，那么这个 chunk 的大小一定大于 nb！
        remainder_size = size - nb;  // 和之前的代码一样，计算切割后的 chunk 大小
        /* unlink */    // 下面的注释省略
        unlink(victim, bck, fwd);
        /* Exhaust */
        if (remainder_size size |= NON_MAIN_ARENA;
        }
        /* Split */
        else {
          remainder = chunk_at_offset(victim, nb);
          /* We cannot assume the unsorted list is empty and therefore
             have to perform a complete insert here.  */
          bck = unsorted_chunks(av);
          fwd = bck->fd;
          if (__builtin_expect (fwd->bk != bck, 0))
            {
              errstr = "malloc(): corrupted unsorted chunks 2";
              goto errout;
            }
          remainder->bk = bck;
          remainder->fd = fwd;
          bck->fd = remainder;
          fwd->bk = remainder;
          /* advertise as last remainder */
          if (in_smallbin_range(nb))
            av->last_remainder = remainder;
          if (!in_smallbin_range(remainder_size))
            {
              remainder->fd_nextsize = NULL;
              remainder->bk_nextsize = NULL;
            }
          set_head(victim, nb | PREV_INUSE |
               (av != &main_arena ? NON_MAIN_ARENA : 0));
          set_head(remainder, remainder_size | PREV_INUSE);
          set_foot(remainder, remainder_size);
        }
        check_malloced_chunk(av, victim, nb);
        void *p = chunk2mem(victim);  // 返回堆块
        if (__builtin_expect (perturb_byte, 0))
          alloc_perturb (p, bytes);
        return p;
          }
        }
以上的代码用来处理三种情况，一是 nb 在 smallbin 范围内，二是之前的 largebin 为空，三是之前的 largebin
不为空，但是其中最大的堆块都要比 nb 小。
代码的后半部分和前面的代码类似，区别在于头部引入了 binmap，它是定义在分配区中的成员，具体介绍在上面写过，这段代码的主要功能是遍历剩下的
largebin，直到找到一个包含满足要求的堆块的 bin，并且取出这个 chunk 进行切割，比较难以理解的是针对 binmap
的操作，之所以引入这个东西，是为了加快遍历 largebin 的速度。
> 补： binmap 的大致原理。binmap 一共 128 bit，16 个字节，分成 4 个 int 变量，每一个 int 变量称为一个
> block，每个 block 有 32 个 bit，最多可以表示 32 个 bin 的状态，使用宏 idx2block 可以计算出一个
> index(bin) 在 binmap 中属于哪个 block。 idx2bit 宏取第 i 位为1，剩下的置 0，例如 idx2bit(2) 会生成
> “00000000000000000000000000000100”
其实利用 binmap 来遍历 largebin 和正常遍历效果是一样的，但是利用 binmap 可以很大的提升效率。
当这一步操作也不能满足 nb 时，就需要动用 top chunk 了。
        victim = av->top;
        size = chunksize(victim);
        if ((unsigned long)(size) >= (unsigned long)(nb + MINSIZE)) {
          remainder_size = size - nb;
          remainder = chunk_at_offset(victim, nb);
          av->top = remainder;
          set_head(victim, nb | PREV_INUSE |
               (av != &main_arena ? NON_MAIN_ARENA : 0));
          set_head(remainder, remainder_size | PREV_INUSE);
          check_malloced_chunk(av, victim, nb);
          void *p = chunk2mem(victim);
          if (__builtin_expect (perturb_byte, 0))
        alloc_perturb (p, bytes);
          return p;
        }
流程还是一样的，如果 top chunk size 大于 nb，就从 top chunk 中切割下来 chunk 返回给用户。如果 top chunk
大小也不够了，会先执下面的代码
        else if (have_fastchunks(av)) {
          assert(in_smallbin_range(nb));
          malloc_consolidate(av);
          idx = smallbin_index(nb); /* restore original bin index */
        }
引用 malloc.c 注释如下
          If there is space available in fastbins, consolidate and retry,
          to possibly avoid expanding memory. This can occur only if nb is
          in smallbin range so we didn't consolidate upon entry.
如果存在 fastbin chunk，就执行 malloc_consolidate 合并 fastbin chunk，然后再尝试
> 为什么还要检查 fastbin？ 两个原因，一是如果开启了 ATOMIC_FASTBINS ，由于 free fastbin chunk
> 的时候不需要加锁，所以 malloc 走到这一步的时候可能已经有其他线程向 fastbin 中注入了新的 chunk，另外一个原因是如果 nb 是一个
> smallbin chunk，走到这一步说明之前所有的分配操作都失败了，但是在分配 smallbin chunk 的时候始终都没有调用过
> malloc_consolidate，所以在 malloc 尾声的时候可以尝试合并 fastbin chunk 构造出符合要求的 chunk。
如果 fastbin 链表是空的，那么无论那一个缓冲区都无法提供合适的堆块了(甚至 top chunk
的空间也不够)，这时就需要映射另一片内存(也就是所谓的 mmap)。
        /*
           Otherwise, relay to handle system-dependent cases
        */
        else {
          void *p = sYSMALLOc(nb, av);
          if (p != NULL && __builtin_expect (perturb_byte, 0))
        alloc_perturb (p, bytes);
          return p;
注意调用的依旧是一个外壳函数，叫做 sYSMALLOc。
large bin 的分配逻辑应该是 malloc 中最为复杂的，可以参考下面这张图片
复杂的主要原因是前面尝试通过 fastbin、smallbin、unsortedbin 分配堆块都失败了，但是经过各种切割合并 chunk
的操作之后这些缓冲区中又很有可能出现合适的 chunk ，为了尽量减少向操作系统申请内存的次数，就要极大限度的利用好缓冲区的 chunk。
## malloc 的流程总结
  1. 获取分配区的锁。
  2. 将用户的请求大小转换为实际需要分配的 chunk 空间大小。
  3. 判断所需分配 chunk 是否在 fastbin 区域，如果是的话， 则转下一步，否则跳到第 5 步。
  4. 首先尝试在 fastbins 中取一个所需大小的 chunk 分配给用户。 如果可以找到， 则分配结束。 否则转到下一步。
  5. 判断所需大小是否处在 small bins 中，如果 chunk 大小处在 smallbins 中，则转下一步，否则转到第 7 步。
  6. 根据所需分配的 chunk 的大小， 找到具体所在的某个 smallbin，从该 bin 的尾部摘取一个恰好满足大小的 chunk。 若成功，则分配结束，否则转到下一步。
  7. 到了这一步， 说明需要分配的是一块大的内存，或者 small bins 中找不到合适的chunk。于是，ptmalloc 首先会遍历 fastbins 中的 chunk，将相邻的 chunk 进行合并，并链接到 unsorted bin 中， 然后遍历 unsorted bin 中的 chunk，如果 unsorted bin 只有一个 chunk，并且这个 chunk 在上次分配时被使用过，并且所需分配的 chunk 大小属于 small bins，并且 chunk 的大小大于等于需要分配的大小，这种情况下就直接将该 chunk 进行切割，分配结束，否则将根据 chunk 的空间大小将其放入 smallbins 或是 large bins 中，遍历完成后，转入下一步。
  8. 到了这一步，说明需要分配的是一块大的内存，或者 small bins 和 unsorted bin 中都找不到合适的 chunk，并且 fast bins 和 unsorted bin 中所有的 chunk 都清除干净了。 从 large bins 中按照“smallest-first， best-fit”原则， 找一个合适的 chunk， 从中划分一块所需大小的 chunk， 并将剩下的部分链接回到 bins 中。 若操作成功， 则分配结束， 否则转到下一步。
  9. 如果搜索 fast bins 和 bins 都没有找到合适的 chunk， 那么就需要操作 top chunk 来进行分配了。 判断 top chunk 大小是否满足所需 chunk 的大小， 如果是， 则从 topchunk 中分出一块来。 否则转到下一步。
  10. 到了这一步， 说明 top chunk 也不能满足分配要求， 所以， 于是就有了两个选择: 如果是主分配区， 调用 sbrk()， 增加 top chunk 大小； 如果是非主分配区，调用 mmap来分配一个新的 sub-heap，增加 top chunk 大小； 或者使用 mmap()来直接分配。 在这里， 需要依靠 chunk 的大小来决定到底使用哪种方法。 判断所需分配的 chunk大小是否大于等于 mmap 分配阈值， 如果是的话， 则转下一步， 调用 mmap 分配，否则跳到第 12 步， 增加 top chunk 的大小。
  11. 使用 mmap 系统调用为程序的内存空间映射一块 chunk_size align 4kB 大小的空间。然后将内存指针返回给用户。
  12. 判断是否为第一次调用 malloc， 若是主分配区， 则需要进行一次初始化工作， 分配一块(chunk_size + 128KB) align 4KB 大小的空间作为初始的 heap。 若已经初始化过了， 主分配区则调用 sbrk()增加 heap 空间， 分主分配区则在 top chunk 中切割出一个 chunk， 使之满足分配需求， 并将内存指针返回给用户。
## Reference
华庭 《Glibc 内存管理 Ptmalloc2 源代码分析》