If (fk(x) = s)
Return 1
Return 0
Adversary A2(k, ϵ)
x1 ←$ f.Inp
s ← fk(x1)
x2 ← A(k, s)
Return (x1, x2)
f
(A)
Game Gunif
b ←$ {0, 1}
k ←$ f.Keys
x ←$ f.Inp
s0 ← fk(x)
s1 ←$ f.Out
b′ ←$ A(k, sb)
Return (b = b′)
Figure 13: Game defining uniformity of compression func-
tion F and adversaries used in proof of Theorem 8.3.
Game G0 ,G1
k ←$ f.Keys; bad ← false
x1 ←$ f.Inp
s ← fk(x1); s ←$ f.Out
x2 ←$ A(k, s)
If (x1 = x2) then
bad ← true
Return (fk(x2) = s)
Game G2
k ←$ f.Keys; bad ← false
x1 ←$ f.Inp
s ← fk(x1)
x2 ←$ A(k, s)
If (x1 = x2) then
bad ← true
Return false
Return (fk(x2) = s)
Figure 14: Games used in proof of Theorem 8.3. Boxed code
is only executed in the comparably boxed game.
a separate assumption than the assumption of collision resistance.
There is, however, an assumption we can make on the structure
of the compression function for which pre-image resistance will
not be a separate assumption. In particular, collision resistance will
imply pre-image resistance when the image of a random point is
indistinguishable from a random range point.
The ideas of this proof are very similar to the method used by [12]
to show that RpreS is essentially equivalent to the typical notion
of one-way function security for their particular idealized hash
functions. Stinson [32] likewise showed that pre-image resistance
was implied by collision resistance in certain cases. Specifically,
he showed it for the case that the pre-image resistance adversary
was equally likely to succeed for all inputs or the case that every
range point had a “large” number of pre-images. Our result can be
considered a generalization of this latter result. It strengthens these
prior results by showing it for potentially keyed hash functions
and by giving an explicit reduction to the uniformity of the hash
function. Thus, the result will hold even if it is only computationally
(but not information theoretically) difficult to distinguish between
the output of the hash function and uniform output.
We will define the uniformity of a hash function by the game
(A) shown in Fig. 13. This game measures an adversary’s
Gunif
ability to distinguish between the pairs (k, y) and (k, fk(x)) when
f
y is picked at random from f.Out and x is picked randomly from
(A1) =
f.Inp. The advantage of an adversary is defined by Advunif
2 Pr[Gunif
(A)] − 1.
f
f
It is important to note that this requires the output of f to look
uniformly random even given k. We now present our theorem which
tells us that if f is sufficiently uniform then collision resistance will
imply pre-image resistance.
Theorem 8.3. Let f be a family of functions, S = f.Out, and A be
an adversary. Then we can build adversaries A1 and A2 (shown in
Fig. 13) such that,
AdvRpreS
f
(A) ≤ Advunif
f
(A1) + Advcr
f (A2) + |f.Out|/|f.Inp|.
Both A1 and A2 have approximately the same time and memory
complexities as A.
Recall from above that the particular case we are interested in
is when f is a compression function and thus f.Inp = f.Bl × f.Out.
Therefore, the ratio will equal 1/|f.Bl| and the desired implication
will hold as long as f.Bl is large (which is typically the case in
practice). To prove the result we first use the uniformity of f to
switch to a game in which Ais trying to find a pre-image for a point
fk(x) where x is chosen at random instead of a random s. Then we
consider the standard collision resistance adversary which chooses
a random x1, asks Ato produce a pre-image of fk(x1), then returns
that together with x1 as its collision. Analyzing the success of this
adversary requires bounding the probability that the pre-image
produced by Ais itself x1 because (x1, x1) is not a valid collision.
Proof. (of Theorem 8.3) Consider the sequence of games G0,
G1, and G2 shown in Fig. 14. The boxed code is only included in
G0, meaning that s will be chosen uniformly at random. Note that
G2 only differs from G1 after the bad flag is set to true. Game G0 is
(A) with f and Ahardcoded. In both, Ais given
identical to GRpreS
a random key k and string s chosen at random from f.Out. It wins
if it correctly returns a pre-image of s under fk. Thus we have
AdvRpreS
(A) = Pr[GRpreS
= Pr[G0]
= (Pr[G0] − Pr[G1]) + (Pr[G1] − Pr[G2]) + Pr[G2].
To bound the first difference, consider the view of A when run
(A1)). Let bunif denote the
by A1 (during the execution of Gunif
(A1) and b1 denote the bit output by
bit chosen by the game Gunif
A1. When bunif = 1, the view of A is k and s chosen uniformly
at random. Then A1 returns b1 = 1 if Areturns a pre-image for s.
Similarly when bunif = 0, Ais given k and s = fk(x) for a uniformly
random x. In this case, A1 once again returns b1 = 1 if Areturns a
pre-image for s. Thus we have
(A)]
f
f
f
f
f
Pr[G0] − Pr[G1] = Pr[b1 = 1|bunif = 1] − Pr[b1 = 1|bunif = 0]
= Advunif
f
(A1).
That the latter equality holds by a standard conditioning argument.
Now games G1 and G2 are identical until bad, so the funda-
mental lemma of game playing [11] says that Pr[G1] − Pr[G2] ≤
Pr[G1 sets bad]. In particular, the bad flag is set when Ahappens
to choose x1 exactly as its pre-image for s. Let k be fixed and f−1
(s)
be the set of all pre-images of s under fk. The probability that Ais
given a particular s is then exactly |f−1
(s)|/|f.Inp| and the probabil-
ity that bad will be set given that Ais given s is at most 1/|f−1
(s)|.
k
k
k
Session D4:  Crypto PrimitivesCCS’17, October 30-November 3, 2017, Dallas, TX, USA903Summing over all possible choices of s we then have that bad is
set with probability at most |f.Out|/|f.Inp| for our chosen k. This
was independent of the key k, so the probability averaged over
all choices of k will be bounded by the same probability. Hence,
Pr[G1 sets bad] ≤ |f.Out|/|f.Inp|.
Finally, note that the probability A succeeds in G2 is identical
(A2). Each
to the probability that adversary A2 succeeds in Gcr
succeeds if A, given fk(x1), produces an x2 which is a collision with
f
x1 for fk. Hence Pr[G2] = Advcr
Combining the given equation gives the stated bound. The stated
complexities are apparent from the code of A1 and A2.
□
f (A2).
From the above, believing that f is uniform suffices to remove the
necessity that it is pre-image resistant from Theorem 7.2, but only
in the case that the set of starting points is all of f.Out. However,
for hash functions based on the MD transform which are used
in practice, it is clearly the case that the initial point s was not
chosen uniformly at random from f.Out. In the following theorem
we show how to build a compression function which is S pre-image
resistant for an arbitrary S from one which is pre-image resistant
for S′ = f.Out. Put simply, we include a random pad in the key of
our new compression function which is XORd with the output of f.
Proposition 8.4. Let f′ be a family of functions with f′.Out =
{0, 1}a for some a ∈ N. and f be the compression function shown
in Fig. 12 with f.Keys = f′.Keys × f′.Out. Let S′ = f.Out and S ⊆
{0, 1}a be a set. Then given an adversary A, we can build an efficient
adversary Bf′ (shown in Fig. 12) satisfying,
(A) ≤ AdvRpreS′
AdvRpreS
(Bf′).
f
f′
The time and memory complexity of Bf′ are essentially that of A.
The use of this new compression function in the MD transform
could alternatively be viewed as a variation of the transform in
which an additional key is added that gets XORd with all interme-
diate chaining variables. In terms of collision resistance security,
however, this does not gain anything that would not have been
equivalently obtained by simply choosing the starting point uni-
formly at random.
Proof. (of Proposition 8.4) The view of A when run by Bf′
consists of a random key k ∈ f′.Keys, a random pad p ∈ f′.Out,
and a random element s from S. This is identical to the view it
(A), so it will have the same probability
expects when run in GRpreS
of returning an x such that s = f(k,p)(x) = f′
(x)⊕p. Then from the
perspective of Bf′, such an x satisfies f′
(x) = s⊕p = s⊕(s⊕s′) =
s′. This gives us the stated advantage bound because Bf′ wins
whenever Awould.
The stated complexities are apparent from the code of Af′. □
k
k
f
9 REDUCTION COMPLEXITY
We will now briefly revisit some of our reductions to provide alter-
native reductions that are more memory-efficient [4].
Consider, for example, Theorem 5.3. The primary technical com-
ponent underlying that theorem is the collision-finding algorithm
Bcr which, given as input a collision for the hash function H, finds a
collision for the underlying compression function h. This collision-
finding algorithm naturally emanates from various proofs of the
MD transform’s collision resistance which do not explicitly give
an algorithm.[1, 5, 15, 17, 18, 20, 22, 24, 31]. We observe that Bcr is
a less memory efficient algorithm than the algorithm specified by
BBBGKSZ in [5].
Recall the algorithm Bcr shown in Fig. 5. It first precomputes
the entire vectors m1, m2, c1, and c2, then processes them back-
wards to find the collision described in the proof of the lemma. Its
memory complexity is thus the memory required to store the entire
precomputed vectors.
However, this reduction can be done in a more memory efficient
manner. We present such an algorithm, called Bmem, in Fig. 5. It
scans for the collision in the opposite direction, as compared to
Bcr. By doing so, it avoids the need to precompute the vector c
and instead only computes the individual blocks of c that it needs
in a streaming fashion. Furthermore, for most choices of splitting
function considered in practice (e.g. SplitSha), the individual blocks
of Split(M) can be computed independently in a memory-efficient
manner which would allow Bmem to use only a constant amount of
memory overhead.
Theorem 9.1. Let h be a compression function, let Split be a suffix-
free splitting function with Split.Bl = h.Bl and let S ⊆ h.Out be a
set of possible starting points. Let H = MD[h, Split, S] be the hash
function associated to these components via the MD transform of
Fig. 2. Given an adversary AH, let Ah be the adversary of Fig. 15
using Bmem from the same figure.
Then
Advcr
H(AH) ≤ Advcr
h (Ah).
(6)
The time complexity of Ah is the sum of the time complexities of
AH and Bcr. The memory complexity of Ah is the maximum of the
memory complexity of AH and the memory complexity of Bmem.