title:Space-code bloom filter for efficient traffic flow measurement
author:Abhishek Kumar and
Jun (Jim) Xu and
Erran L. Li and
Jia Wang
Space-Code Bloom Filter for Efﬁcient Trafﬁc Flow
Measurement∗
Abhishek Kumar
Jun (Jim) Xu
College of Computing
Georgia Institute of Technology
{akumar,jx}@cc.gatech.edu
Li Li
Bell Labs
Lucent
PI:EMAIL
Jia Wang
AT&T Labs - Research
PI:EMAIL
ABSTRACT
Per-ﬂow trafﬁc measurement is critical for usage accounting, trafﬁc
engineering, and anomaly detection. Previous methodologies are
either based on random sampling (e.g., Cisco’s NetFlow), which
is inaccurate, or only account for the “elephants”. Our paper in-
troduces a novel technique for measuring per-ﬂow trafﬁc approx-
imately, for all ﬂows regardless of their sizes, at very high-speed
(say, OC192+). The core of this technique is a novel data structure
called Space Code Bloom Filter (SCBF). A SCBF is an approxi-
mate representation of a multiset; each element in this multiset is
a trafﬁc ﬂow and its multiplicity is the number of packets in the
ﬂow. SCBF employs a Maximum Likelihood Estimation (MLE)
method to measure the multiplicity of an element in the multiset.
Through parameter tuning, SCBF allows for graceful tradeoff be-
tween measurement accuracy and computational and storage com-
plexity. SCBF also contributes to the foundation of data streaming
by introducing a new paradigm called blind streaming. We eval-
uated the performance of SCBF on packet traces gathered from a
tier-1 ISP backbone and through mathematical analysis. Our pre-
liminary results demonstrate that SCBF achieves reasonable mea-
surement accuracy with very low storage and computational com-
plexity.
Categories and Subject Descriptors
C.2.3 [COMPUTER-COMMUNICATION NETWORKS]: Network
Operations - Metwork Monitoring
E.1 [DATA STRUCTURES]
General Terms
Measurement, Theory
Keywords
Network Measurement, Trafﬁc Analysis, Data Structures, Statisti-
cal Inference, Bloom Filter
∗
This paper was supported in part by the National Science Foun-
dation under Grant ANI-0113911 and under NSF CAREER Award
Grant ANI-0238315.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’03, October 27–29, 2003, Miami Beach, Florida, USA.
Copyright 2003 ACM 1-58113-773-7/03/0010 ...$5.00.
1.
INTRODUCTION
Accurate trafﬁc measurement and monitoring is critical for net-
work management. For example, per-ﬂow trafﬁc accounting has
applications in usage-based charging/pricing, security, per-ﬂow QoS,
and trafﬁc engineering [1]. While there has been considerable re-
search on characterizing the statistical distribution of per-ﬂow traf-
ﬁc [2] or on identifying and measuring a few large ﬂows (ele-
phants) [3, 1, 4], little work has been done on investigating highly
efﬁcient algorithms and data structures to facilitate per-ﬂow mea-
surement on very high-speed links.
To ﬁll this gap, we propose a novel data structure called Space-
Code Bloom Filter (SCBF) and explore its applications to network
measurement in general, and to per-ﬂow trafﬁc accounting in par-
ticular. A (traditional) bloom ﬁlter [5] is an approximate repre-
sentation of a set S, which given an arbitrary element x, allows
for the membership query “x ∈ S?”. A Space-Code Bloom Filter
(SCBF), on the other hand, is an approximate representation of a
multiset M, which allows for the query “how many occurrences of
x are there in M?”. Just as a bloom ﬁlter achieves a nice tradeoff
between space efﬁciency (bits per element) and false positive ratio,
SCBF achieves a nice tradeoff between the accuracy of counting
and the number of bits used for counting.
SCBF has several important applications in network measure-
ment. This paper focuses on its application to performing “per-
ﬂow” trafﬁc accounting without per ﬂow state on a high-speed link.
Given a ﬂow identiﬁer, SCBF returns the estimated number of pack-
ets in the ﬂow during a measurement epoch. Here, a ﬂow identiﬁer
can be an IP address, a source and destination IP address pair, the
combination of IP addresses and port numbers, or other indices that
can identify a ﬂow.
Per-ﬂow accounting is a challenging task on high-speed network
links. While keeping per-ﬂow state would make accounting straight-
forward, it is not desirable since such a large state will only ﬁt on
DRAM and the DRAM speed can not keep up with the rate of a
high-speed link. While random sampling, such as used in Cisco
Netﬂow, reduces the requirement on memory speed, it introduces
excessive measurement errors for ﬂows other than elephants, as
shown in Section 2. The scheme by Estan and Varghese [1] only
needs a small amount of fast memory. However, it allows the mon-
itoring of only a small number of “elephants”.
Previous attempts at using bloom ﬁlters to answer multiset queries
have produced a number of variations of counting bloom ﬁlter [6].
In its most basic form, a counting bloom ﬁlter has a counter asso-
ciated with each bit in the array. When an element x is inserted
in a counting bloom ﬁlter with k hash functions h1,··· , hk, each
of the k counters associated with the bits h1(x),··· , hk(x) are in-
cremented by one. Unfortunately, quantitative estimates based on
counters might be a long way off the correct value of the frequency
of occurrence of any element in counting bloom ﬁlters. Approaches
like conservative update [1] have been proposed to counter this
problem to some extent. Such heuristics fail to provide any bounds
on the estimation error and are not amenable to analysis. Counting
bloom ﬁlters are not suitable from the implementation perspective
either. They require a large number of counters, each of them capa-
ble of counting up to the largest possible multiplicity, thus wasting
both space and computation cycles. Attempts to improve the space
efﬁciency of counting bloom ﬁlters have resulted in the proposal of
variable size counters [7]. Unfortunately, the mechanism required
to implement variable size counters is complex, and cannot match
the rate of a high speed link.
Our approach is to perform trafﬁc accounting on a very small
amount of high-speed SRAM, organized as an SCBF page. Once
an SCBF page becomes full (we formalize this notion later), it is
eventually paged to persistent storages such as disks. Later, to ﬁnd
out the trafﬁc volume of a ﬂow identiﬁed by a label x during a mea-
surement epoch, the SCBF pages corresponding to the epoch can be
queried using x to provide the approximate answer. The challenges
facing this approach are threefold. First, the amount of persistent
storage to store SCBF pages cannot be unreasonably large, even for
a high-speed link like OC-192+ (10+ Gbps). Second, the computa-
tional complexity of processing each packet needs to be low enough
to catch up with the link speed. Third, the accounting needs to be
fairly accurate for all the ﬂows, despite the aforementioned storage
and complexity constraints.
SCBF is designed to meet all these challenges. Our design can
easily scale to maintaining approximate per-ﬂow counts at an OC-
192+ link using a limited amount of fast memory. The storage cost
for a full-speed OC-192 link is tolerable: about 2 bits per packet or
9 GB per hour. Such a cost is manageable for Tier-1 ISPs as the
storage cost right now is about 1 dollar per GB. In addition, it is
very amenable to pipelined hardware implementation to facilitate
high-speed processing.
Here we describe the conceptual design of SCBF, deferring its
detailed description to Section 3. An SCBF is essentially a large
number of statistical estimators running in parallel. Each estima-
tor tracks the trafﬁc volume of a certain ﬂow. SCBF nicely codes
and compresses the current “readings” of these estimators within
a small memory module so that they do not interfere with each
other. Like space-time coding allows signals to multiplex on both
space and time domains, SCBF allows “signals” to multiplex on
both space and code domains, hence the name Space-Code. The de-
multiplexing operation for obtaining the “reading” of a given ﬂow
in an SCBF employs a Maximum Likelihood Estimation (MLE)
process. We show through careful analysis that the “readings” of
all ﬂows will be accurate to a certain ratio with high probability.
SCBF not only has important applications in network measure-
ment, but also contributes to the foundation of data streaming [8,
4]. Data streaming is concerned with processing a long stream of
data items in one pass using a small working memory in order to
answer a class of queries regarding the stream. The challenge is to
use this small memory to “remember” as much information perti-
nent to the queries as possible. The contributions of SCBF to data
streaming are twofold. First, it is among the earliest work in the
networking context [4]. Although data streaming has emerged as
a major ﬁeld in database [8, 7, 9], the techniques invented in the
database context generally cannot be “ported” to networking be-
cause they are much more expensive in computational complexity.
Second, SCBF introduces a new paradigm called blind streaming
in which incrementing the reading of an estimator does not require
the decoding of its current reading, and hence the blindness. This
signiﬁcantly reduces the computational and hardware implementa-
tion complexity of each operation, as discussed in Section 2.2.
The rest of this paper is organized as follows. In the next section,
we revisit the motivation of this work and identify objectives and
constraints speciﬁc to per-ﬂow measurement on high-speed links.
Section 3 describes the design of SCBF. We provide some mathe-
matical details of SCBF in Section 4. Section 5 presents a prelim-
inary evaluation over a number of large packet header traces from
a tier-1 ISP IP backbone network. We conclude in Section 6 with
pointers to future work.
2. ARCHITECTURE, PERFORMANCE MET-
RICS, AND BLIND STREAMING
The proposed SCBF scheme is motivated by the need to provide
per-ﬂow trafﬁc accounting at very high speed (e.g, OC192+). A
naive solution to this problem would be to maintain per-ﬂow coun-
ters that are updated upon every packet arrival. However, as shown
in [1], this approach cannot scale to the link speed of OC192+ since
fast SRAM modules can only hold a tiny fraction of per-ﬂow state
due to their size limitations, yet large DRAM modules cannot sup-
port such speed. Random sampling with a small rate such as 1%
may make the speed requirement for keeping the per-ﬂow state af-
fordable for DRAM. However, they lead to intolerable inaccuracies
in network measurement [1]. In particular, sampling will typically
miss the majority of small ﬂows (containing only a few packets).
Ignoring these mice altogether may lead to wrong conclusions in
applications such as estimation of ﬂow distribution and network
anomaly detection.
0. New 
packet
arrival
Header
CPU
1. Process
header
2. Write 
to SCBF
SCBF Module
SRAM
Module 1
SRAM
Module 2
4. Query
5.Answer
Persistent
Storage
3. Paging 
to disk
once "full"
Figure 1: The system model for using SCBF for trafﬁc mea-
surement.
Our vision is to design a synopsis data structure that keeps ap-
proximate track of the number of packets in each ﬂow regardless
of its size, yet is small enough to ﬁt in fast SRAM. The proposed
SCBF scheme is a brainchild of this vision. The overall architecture
of using SCBF to perform per-ﬂow accounting is shown in Figure 1.
SCBF is updated upon each packet arrival (arcs 1 and 2 in Figure 1)
so that it will not fail to record the presence of any ﬂow, small or
large. When the SCBF becomes full, it will be paged to persistent
storage devices (arc 3). Typically, two “ping-pong” SCBF modules
will be used so that one can process new packets while the other is
being paged, as shown in Figure 1. In other words, these two SCBF
modules store approximate ﬂow accounting information in alternat-
ing measurement epochs. In addition, SCBF succinctly represents
a large number of counters so that paging is infrequent enough to
ﬁt within the disk bandwidth even for OC-192+ link speed. Finally,
a query concerning the size of a ﬂow can be made to a SCBF page
stored on the disk (arc 4). The result of the query (arc 5) is the ap-
proximate number of packets in the ﬂow during the measurement
epoch an SCBF page records.
2.1 Performance Metrics
The key challenge of designing SCBF is to achieve a nice trade-
off between the following three key performance metrics.
1. Storage complexity. This refers to the amount of space con-
sumed on persistent storage to store the SCBF pages. This can
be equivalently characterized as the trafﬁc rate between the SCBF
module and the disk. Our goal is to make this complexity as small
as possible, given a ﬁxed link speed. At least this rate should not
exceed the disk bandwidth. We will show that this complexity is
manageable even at OC192+ speed since SCBF takes advantage
of the “Quasi-Zipf Law” of the Internet trafﬁc: a small number of
ﬂows contribute to the majority of Internet trafﬁc and the majority
of ﬂows are small.
2. Computational complexity. We are also concerned with the
number of memory accesses to the SCBF module for each packet.
This has to be minimized. We show that our scheme will incur no
more than 6 bits of write per packet to the memory. We will see
later that most of these writes overwrite bits that are already 1, thus
ﬁlling up the SCBF page at a much slower rate.
3. Accuracy of estimation. We would like our estimation of the
trafﬁc volume in a measurement epoch to be as close to the actual
value as possible. In this paper, our goal is constant relative error
tolerance, i.e., for the estimate ˆF to be within [(1− )F, (1 + )F ]
with high probability. Here F is the actual size of the ﬂow. This is
achieved using a maximum likelihood estimator (MLE).
Clearly, very high accuracy can be achieved if one is willing
to spend more storage and computational complexity. Therefore,
there is an inherent tradeoff between the complexities and the ac-
curacy. This tradeoff is exploited through a sophisticated parameter
tuning process, which will be described in Section 5.
2.2 Blind Streaming
A careful reader may notice that in Figure 1, we do not have
an arc from the SCBF module to the CPU. One may also wonder
whether this is a mistake, since when a new packet arrives, its ﬂow
identiﬁer should be used to look up a corresponding entry for up-
date. In fact, our SCBF is designed to avoid such a read before
update, i.e., the SCBF data structure is write-only! We refer to this
feature as blind streaming, in the sense that reading and decoding
data in the SCBF is not required before updating it.
Blind streaming is a new paradigm of data streaming that is es-
pecially suitable for high-speed networks for the following reasons.
First, in blind streaming, we do not need to deal with the race con-