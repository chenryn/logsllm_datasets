original program contains code
if (t>0)
for (i=0; i n for the computation to be
carried in the ﬁeld Zp or be equal to 256 to indicate that the com-
putation is in the ﬁeld GF(28).
The output utility program has a similar functionality: Upon re-
ceipt of output transmissions from at least t + 1 computational
parties, an output party will input the supplemental conﬁguration
ﬁle together with the user id into the program. The output utility
program consequently reconstructs user data according to the data
types and outputs the result to the user.
5. PERFORMANCE EVALUATION
In this section we provide experimental results using PICCO.
Following [29], we create a number of user programs of various
functionalities, compile and run them in the distributed setting, and
measure their performance. To fully evaluate the effect of parallel
execution (using array operations, batching, and threads), for each
tested functionality we provide its basic version as well as opti-
mized version that uses concurrent execution features of PICCO.
The types of computations tested as part of this work include:
1. A mix of arithmetic operations consisting of 90% additions
and 10% multiplications with 10 input and 5 output variables.
The basic functionality sequentially executes all operations,
while the optimized version uses batch operations.
2. Multiplication of two matrices. The basic and optimized user
programs are given in Figures 2 and 3, respectively. For com-
pactness of presentation, we assume that the second matrix
is given as the transpose of the matrix to be multiplied. Com-
puting the transpose uses only local memory operations and
does not increase the overall runtime.
3. Mergesort computation that outputs the median of the sorted
array. The programs are given in Figures 4 and 5.
4. Computation of the Hamming distance between two binary
vectors. The programs are given in Figures 6 and 7.
5. Evaluation of one block of AES on a private 128-bit message
using private 128-bit key.
6. Computation of the edit distance between two strings of equal
size via dynamic programming. The cost of insertion, dele-
tion, and substitution is ﬁxed and set to 1.
7. Matching of two ﬁngerprints consisting of an equal number
of minutiae. Each minutia point consists of x and y coordi-
nates in a two-dimensional space, as well as its orientation.
The source code of the last three programs is omitted, but will be
reported in the full version. Instead, we give a brief description. For
compactness of presentation of other programs, we use array oper-
ations with input/output functions even in unoptimized programs,
which introduces only a marginal improvement on the runtime of
basic programs. All of the programs included in the experiments
use integer arithmetic, which facilitates comparison of their per-
formance with the same functionalities produced using other tools.
Performance of our implementation of ﬂoating point operations,
however, can be found in [7], including performance of executing
multiple instances of an operation in a batch.
The results of the experiments for n = 3 computational par-
ties are given in Table 2. We consider this value of n to be com-
monly used in practice. Because the number of computational par-
ties is independent of the number of input owners and output re-
cipients, in cases of both single client computation outsourcing and
secure collaborative computation it is possible to ﬁnd three inde-
pendent computational parties which are unlikely to collude with
each other. The programs our compiler produces are written in
C/C++ using the GMP [5] library for large number arithmetic, the
Boost libraries [2] for communication, and OpenSSL [6] for secur-
ing the computation. Our LAN experiments were conducted using
2.4 GHz 6-core machines running Red Hat Linux and connected
through 1 Gb/s Ethernet. Our WAN experiments used machines
from the GENI infrastructure [4], where two of the machines were
821Experiment
100 arithmetic operations
1000 arithmetic operations
3000 arithmetic operations
5 × 5 matrix multiplication
8 × 8 matrix multiplication
20 × 20 matrix multiplication
Median, mergesort, 32 elements
Median, mergesort, 64 elements
Median mergesort, 256 elements
Median mergesort, 1024 elements
Hamming distance, 160 bits
Hamming distance, 320 bits
Hamming distance, 800 bits
Hamming distance, 1600 bits
AES, 128-bit key and block
Edit distance, 100 elements
Edit distance, 200 elements
Fingerprint matching, 20 minutiae
Fingerprint matching, 40 minutiae
Modulus p
Two-party compiler [29]
length (bits) LAN (ms) WAN (ms) LAN (ms) WAN (ms) LAN (ms) WAN (ms) LAN (ms) WAN (ms)
Basic functionality Optimized functionality
Sharemind
33
33
33
33
33
33
81
81
81
81
9
10
11
12
8
57
57
66
66
1.40
13.4
42.7
17.7