# FART源码解析及编译镜像支持到Pixel2(xl)
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 镜像编译
先看结论吧，最近用`android-8.1.0_r1`这个版本来编译了`FART`，这个版本支持的设备比较多，大家常用的应该都有了。
Codename | aosp version | android version | supported devices  
---|---|---|---  
OPM1.171019.011 | android-8.1.0_r1 | Oreo | Pixel 2 XL, Pixel 2, Pixel XL,
Pixel, Pixel C, Nexus 6P, Nexus 5X  
也传到网盘里去了，网盘链接在我github主页最下方：
  * 
## 源码解析
分析方法为源码比对，如下图所示：
源码分析常用在漏洞分析的情况下，只要知道补丁打在了哪里，就可以研究漏洞出在哪里，知道漏洞成因后写出利用代码，批量攻击没有打补丁的机器；虽然现在补丁发布后`90`天才允许发布漏洞细节报告，但是只要分析能力够强，可以直接逆补丁即可，获取漏洞成因和细节，写出`1day`的利用，（然后被不法分子使用，在网上扫肉鸡）。
比如这位大佬在源码还没有开源的情况下，仅通过逆向分析`system.img`镜像和`libart.so`就还原出源码并应用到安卓`9`上去，是真的大佬，原贴链接：[FART：ART环境下基于主动调用的自动化脱壳方案
[android脱壳源码公开，基于android-9.0.0_r36]
](https://bbs.pediy.com/thread-257101.htm)。当然以下的分析其实这位大佬和寒冰大佬已经讲得披露得非常清楚了，也没啥新的东西，只是再康康源码，见下图源码结构。
虽然俺这里源码改好了，但是毕竟是人家的代码，等人家自己公开哈。
###  第一组件：脱壳
在`FART`系列文章中，三篇中有两篇是讲第一组件也就是脱壳，在寒冰大佬的第一篇中使用的脱壳方法还是通过`ClassLoader`脱壳的方式，选择合适的时机点获取到应用解密后的`dex`文件最终依附的`Classloader`，进而通过`java`的反射机制最终获取到对应的`DexFile`的结构体，并完成`dex`的`dump`。
**不优雅且效率低的`Classloader`时代**
对于获取`Classloader`的时机点的选择。在`App`启动流程以及`App`加壳原理和执行流程的过程中，可以看到，`App`中的`Application`类中的`attachBaseContext`和`onCreate`函数是`app`中最先执行的方法。壳都是通过替换`App`的`Application`类并自己实现这两个函数，并在这两个函数中实现`dex`的解密加载，`hook`系统中`Class`和`method`加载执行流程中的关键函数，最后通过反射完成关键变量如最终的`Classloader`，`Application`等的替换从而完成执行权的交付。
因此，可以选在任意一个在`Application`的`onCreate`函数执行之后才开始被调用的任意一个函数中。众所周知，对于一个正常的应用来说，最终都要由一个个的`Activity`来展示应用的界面并和用户完成交互，那么我们就可以选择在`ActivityThread`中的`performLaunchActivity`函数作为时机，来获取最终的应用的`Classloader`。选择该函数还有一个好处在于该函数和应用的最终的`application`同在`ActivityThread`类中，可以很方便获取到该类的成员。
    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {
            ......
    Activity activity = null;
            try {
                java.lang.ClassLoader cl = r.packageInfo.getClassLoader();
    //下面通过application的getClassLoader()获取最终的Classloader，并开启线程，在新线程中完成内存中的dex的dump以及主动调用过程，由于该过程相对耗时，为了防止应用出现ANR，从而开启新线程，在新线程中进行，主要的工作都在getDexFilesByClassLoader_23
                //addstart
                packagename=r.packageInfo.getPackageName();
                //mInitialApplication
                //final java.lang.ClassLoader finalcl=cl
                if(mInitialApplication!=null){
                final java.lang.ClassLoader finalcl=mInitialApplication.getClassLoader();
                new Thread(new Runnable() {
                @Override
                public void run() {              
                                    getDexFilesByClassLoader_23(finalcl);
                                }
                            }).start();
                    }
                //addend
              }
    }
`getDexFilesByClassLoader_23()`函数的主要流程就是通过一系列的反射，最终获取到当前`Classloader`中的`mCookie`，即`Native`层中的`DexFile`。为了在`C/C++`中完成对`dex`的`dump`操作。这里我们在`framework`层的`DexFile`类中添加两个`Native`函数供调用：
在文件`libcore/dalvik/src/main/java/dalvik/system/DexFile.java`中
    private static native void dumpDexFile(String dexfilepath,Object cookie);
    private static native void dumpMethodCode(String eachclassname, String methodname,Object cookie, Object method);
以上流程总结一下就是：
  1. 获取最终`dex`依附的`ClassLoader`
  2. 通过反射获取到`PathList`对象、`Element`对象、`mCookie`对象
  3. 在`native`层通过`mCookie`完成`dex`的`dump`
具体的脱壳代码就不贴了，因为`FART`最终采用的完全不是这个方法。
我们分析最终的`libcore/dalvik/src/main/java/dalvik/system/DexFile.java`文件也发现，移除掉了`dumpDexFile`函数，只剩下`dumpMethodCode`函数。
    //add
    private static native void dumpMethodCode(Object m);
    //add
在最终的`ActivityThread.java`的`performLaunchActivity`函数中也没有出现`getDexFilesByClassLoader_23()`函数，可见被整体移除了。
**直接内存中获取`DexFile`对象脱壳**
具体原因在大佬的第二、三篇中解释的非常清楚。大佬的第二篇就对第一组件提出了改进，[《ART下几个通用简单高效的dump内存中dex方法》](https://bbs.pediy.com/thread-254028.htm)，在对`ART`虚拟机的类加载执行流程以及`ArtMethod`类的生命周期进行完整分析之后，选择了通过运行过程中`ArtMethod`来使用`GetDexFile()`函数从而获取到`DexFile`对象引用进而达成`dex`的`dump`这种内存型脱壳的技术。
最终实现的代码如下，修改的文件为`art_method.cc`，直接看注释：
    extern "C" void dumpdexfilebyExecute(ArtMethod* artmethod)  REQUIRES_SHARED(Locks::mutator_lock_) {
                //为保存dex的名称开辟空间
                char *dexfilepath=(char*)malloc(sizeof(char)*1000);    
                if(dexfilepath==nullptr)
                {
                    LOG(ERROR)PrettyMethod().c_str()0)
                {
                    result=read(fcmdline, szProcName,256);
                    if(resultGetDexFile();
                          //当前DexFile的起始地址
                          const uint8_t* begin_=dex_file->Begin();  // Start of data.
                          //当前DexFile的长度
                          size_t size_=dex_file->Size();  // Length of data.
                          //保存地址置零
                          memset(dexfilepath,0,1000);
                          int size_int_=(int)size_;
                          //构造保存地址
                          memset(dexfilepath,0,1000);
                          sprintf(dexfilepath,"%s","/sdcard/fart");
                          mkdir(dexfilepath,0777);
                          memset(dexfilepath,0,1000);
                          sprintf(dexfilepath,"/sdcard/fart/%s",szProcName);
                          mkdir(dexfilepath,0777);
                          //与进程名、大小一起，构建文件名
                          memset(dexfilepath,0,1000);
                          sprintf(dexfilepath,"/sdcard/fart/%s/%d_dexfile_execute.dex",szProcName,size_int_);
                          //打开文件，转储内容
                          int dexfilefp=open(dexfilepath,O_RDONLY,0666);
                          if(dexfilefp>0){
                              close(dexfilefp);
                              dexfilefp=0;
                              }else{
                                          int fp=open(dexfilepath,O_CREAT|O_APPEND|O_RDWR,0666);
                                          if(fp>0)
                                          {
                                              //直接写内容
                                              result=write(fp,(void*)begin_,size_);
                                              if(result0)
                                                {
                                                    for (size_t ii= 0; iiNumClassDefs(); ++ii) 
                                                    {
                                                        const DexFile::ClassDef& class_def = dex_file->GetClassDef(ii);
                                                        const char* descriptor = dex_file->GetClassDescriptor(class_def);
                                                        //写入GetClassDescriptor
                                                        result=write(classlistfile,(void*)descriptor,strlen(descriptor));
                                                        if(resultLoadClassMembers->LinkCode`脱壳点，再次被无情的抛弃，寒冰大佬对当前安卓`App`脱壳的本质进行了深入的总结，以及引申开，介绍如何快速发现`Art`虚拟机中隐藏的海量脱壳点，具体内容见[《安卓APP脱壳的本质以及如何快速发现ART下的脱壳点》](https://bbs.pediy.com/thread-254555.htm)。
最终在`interpreter.cc`中添加的就约等于两句话，在文件头声明一下，在`Execute`函数中执行调用一下，将`dumpdexfilebyExecute`函数跑起来就行了。
    //add
    namespace art {
        extern "C" void dumpdexfilebyExecute(ArtMethod* artmethod);
    //add
    static inline JValue Execute(
        Thread* self,
        const DexFile::CodeItem* code_item,
        ShadowFrame& shadow_frame,
        JValue result_register,
        bool stay_in_interpreter = false) REQUIRES_SHARED(Locks::mutator_lock_) {
        //add
        if(strstr(shadow_frame.GetMethod()->PrettyMethod().c_str(),""))
        {
            dumpdexfilebyExecute(shadow_frame.GetMethod());
            }
        //add
      DCHECK(!shadow_frame.GetMethod()->IsAbstract());
      DCHECK(!shadow_frame.GetMethod()->IsNative());
这部分代码最少，确实最考验功底的地方。在这里脱壳，实践下来可以脱市面上绝大多数壳，很多抽取型的壳在这个点上也方法体也恢复进了`dex`连壳带方法完整的脱了下来，因为现在很多壳通过阻断`dex2oat`的编译过程，导致了不只是类的初始化函数在解释模式下执行，也让类中的其他函数也运行在解释模式下的原因。
这就好比修电脑，换个电容五毛钱，但是你要付五十块一样的。几行代码简单，找到这个点不简单，能脱几乎所有壳，壳还没办法绕过，这个值钱。
###  第二组件：转存函数体
在`FART`系列文章中，三篇中只有第一篇介绍了`FART`的针对函数抽取型壳而设计的主动调用方法、转储方法体组件，对设计的细节和代码的介绍非常少，在这里我们结合代码来看一下具体的流程。
**从`ActivityThread`中开始**
故事的开始，起源于`ActivityThread.java`。引用大佬文章中的图：
通过`Zygote`进程到最终进入到`app`进程世界，我们可以看到`ActivityThread.main()`是进入`App`世界的大门，对于`ActivityThread`这个类，其中的`sCurrentActivityThread`静态变量用于全局保存创建的`ActivityThread`实例，同时还提供了`public
static ActivityThread
currentActivityThread()`静态函数用于获取当前虚拟机创建的`ActivityThread`实例。`ActivityThread.main()`函数是`java`中的入口`main`函数,这里会启动主消息循环，并创建`ActivityThread`实例，之后调用`thread.attach(false)`完成一系列初始化准备工作，并完成全局静态变量`sCurrentActivityThread`的初始化。之后主线程进入消息循环，等待接收来自系统的消息。当收到系统发送来的`bindapplication`的进程间调用时，调用函数`handlebindapplication`来处理该请求。
在`handleBindApplication`函数中第一次进入了`app`的代码世界，该函数功能是启动一个`application`，并把系统收集的`apk`组件等相关信息绑定到`application`里，在创建完`application`对象后，接着调用了`application`的`attachBaseContext`方法，之后调用了`application`的`onCreate`函数，而作者添加的`fartthread()`这个函数体，就位于`handleBindApplication`之前，当然具体的调用，还是在上文的`performLaunchActivity`之中。
    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {
            // System.out.println("##### [" + System.currentTimeMillis() + "] ActivityThread.performLaunchActivity(" + r + ")");
            Log.e("ActivityThread","go into performLaunchActivity");
            ...
            //add
            fartthread()
            //add
            ...
`fartthread()`函数的根本目和最终目标还是通过一系列的反射，最终获取到当前`Classloader`中的`mCookie`，即`Native`层中的`DexFile`，这一点体现在下一小节的`DexFile_dumpMethodCode`函数之中，完成主动调用链的构造。
`fartthread()`代码非常简单，进入`ActivityThread`开个新线程之后，先睡个一分钟，再进入`fart()`函数。
    public static void fartthread() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                // TODO Auto-generated method stub
                try {
                    Log.e("ActivityThread", "start sleep......");
                    Thread.sleep(1 * 60 * 1000);
                } catch (InterruptedException e) {