192.251.16.0/24
T&TForex
20179
5703
TigerFund
198.15.10.0/24
33584
FTENNY
204.13.72.0/24
216.223.46.0/24
SDSNY
12265
Cogent
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
ConEd.
Pollu.
(%)
31.6
65.7
33.1
49.4
16.4
32.3
83.0
78.0
27.5
14.7
86.0
34.6
77.6
j(cid:10)j
492
458
176
369
221
261
594
658
380
170
707
205
606
3.5 Detecting Known Hijacking Events
We now validate our observation on the cut size using known
hijacking events. We simulate the list of known hijacking events
studied in [4]. As in Section 3.4, for each hijack, we (cid:2)rst recon-
struct the forward path from the victim AS to every transit AS, and
then calculate the set of unique cuts observed by the victim. Table 4
shows the percentage of polluted transit ASes and the number of
cuts for these hijacking events. Although the pollution varies from
14.7% to 86.0%, the number of cuts is above 170 for all hijacks.
4. PREFIX-OWNER-INITIATED
PROB-
ING
In this section, we present the design of the probing module of
ISPY. The probing module performs continuous rounds of probing
to other ASes in the Internet to obtain the reachability and the AS-
level paths to these ASes, which are used to construct the vPath
used by ISPY to perform hijacking detection.
4.1 Design
The probing module faces several design challenges. First, the
probing needs to be light-weight and ef(cid:2)cient, in order to scan the
large number of ASes in the Internet in short intervals. Second,
the probing mechanism has to be carefully designed to minimize
the impact of probing unfriendly con(cid:2)gurations and events in the
Internet such as (cid:2)rewall, ICMP rate limiting, and congestion.
The probing module of ISPY aims to successfully probe at least
one live IP per AS, via a combination of traceroute, ping and TCP
ping. Each network that deploys ISPY collects in advance and
continuously maintains a database of live IPs using active probing,
and an IP-to-AS mapping. The live IPs respond either to ICMP
ping (these IPs are called pingable IPs) or TCP connect at port 80
(these IPs are called web IPs). ISPY launches traceroute to a single
live pingable IP of each selected AS, but also retries traceroute to
a different live pingable IP, if the (cid:2)rst traceroute fails to reach that
AS. The traceroute probing is further complemented with ICMP
ping probing, if traceroute fails. Like traceroute, ICMP ping also
tries at most two live pingable IPs. If ICMP ping still cannot reach
that AS, TCP ping to port 80 of at most two web IPs is attempted.
In the following, we present more details on the major components
of the probing module.
Probing only Transit ASes. As discussed in Section 3.1, to reduce
the probing cost, ISPY probes only transit ASes, not stub ASes.
This optimization reduces the total number of ASes to be probed
from 23191 to 3742 (transit ASes).
Live IPs. We created a database of live IPs as follows. We collected
a set of probing candidate IPs from three sources: (1) x.x.x.1 of
each announced pre(cid:2)x seen in RouteViews routing tables, (2) IPs
found in a university department DNS server log, (3) web client IPs
found in a university department web server log. We then expanded
this set by performing traceroute to each candidate IP; the IPs that
appear along the traceroute paths are added into the candidate set.
Since these IPs may not be globally routable, we used ping to test
the liveness of these added candidate IPs and (cid:2)lter out unresponsive
IPs. Altogether, the set of live IPs we collected has a high coverage
of all transit ASes: 3470 (92.7%) of the total 3742 transit ASes
have at least one live IP, and 3464 (92.6%) of transit ASes have at
least two live IPs. Throughout this paper, we use these 3470 transit
ASes as the probing targets. We also incorporate web IPs from the
web server list in [27], which covers 2997 transit ASes.
Resolving IP-Level Paths into AS-Level Paths. Accurate IP-to-
AS mapping is a challenging problem by itself [21] due to the lack
of a uniform way of numbering router interfaces. For simplicity, we
used the BGP routing tables in RouteViews to generate IP-to-AS
mapping. An IP pre(cid:2)x is mapped to the origin AS of its route an-
nouncement. Pre(cid:2)xes with multiple origins account for only 0.6%
of the total pre(cid:2)xes. Such pre(cid:2)xes are marked as unmapped. The
IP-level paths are resolved to AS-level paths by applying the IP-to-
AS mapping. Some of the IP hops do not respond to traceroute,
and appear as (cid:147)*(cid:148) in traceroute output. Such (cid:147)*(cid:148) hops as well as
unmapped IP hops can still be resolved if both the previous hop
and the next hop map to the same AS. For example, if (cid:147)1239 *
1239(cid:148) appears in the IP path, the (cid:147)*(cid:148) must belong to AS 1239. The
remaining unmapped hops are translated into unresolved ASes.
Next, we collapse consecutive hops mapped to the same AS to
produce the AS-level traceroute path. As in Section 3.1, adjacent
unresolved hops are collapsed together to a symbol (cid:147)#(cid:148), which is
used to represent the uncertain part of an AS path. We also incor-
porate the results of ping probing into the AS path. If an AS d is not
reached by traceroute but reached by ping, we append d to the end
of the AS path obtained by traceroute. For example, if the AS path
obtained by traceroute is [sabc#], but d is reached by ping, then we
record the AS path as P (d) = [sabc#d]. Such (maybe partially)
resolved AS paths produce a snapshot of the vPath, i.e., the output
of the probing module.
Increasing the Ef(cid:2)ciency and Robustness of Traceroute. We
used the Paris-traceroute [3] tool, but modi(cid:2)ed it to improve its ef-
(cid:2)ciency and robustness. First, we modi(cid:2)ed it to perform IP-to-AS
translation on the (cid:3)y. The on-the-(cid:3)y translation enables the prob-
ing to make intelligent early termination decision; whenever the
current hop belongs to the destination AS, the traceroute is termi-
nated, since the AS-level path has already been discovered. Second,
since the goal of our probing is not to measure the per-hop delay,
instead of sending three probes for each hop (per TTL), we modi-
(cid:2)ed Paris-traceroute to serially send up to three probes, i.e., to stop
sending more probes if one probe successfully replies.
4.2 Evaluation
We evaluate the performance of our probing design in the sce-
narios when there is no pre(cid:2)x hijacking. Such scenarios constitute
the common case since hijacking is a rare event. In particular, we
evaluate the probing ef(cid:2)ciency, which determines the real-time and
light-weight properties of ISPY, and the probing coverage, which
affects the accuracy of ISPY.
Ef(cid:2)ciency. We study the probing ef(cid:2)ciency using a deployment of
the ISPY probing module on 108 geographically diversely located
PlanetLab nodes. The module on each node probes the 3470 transit
ASes, and is con(cid:2)gured to maintain 50 concurrent traceroutes. We
measure the average time it takes to (cid:2)nish a round of probing, i.e.,
Table 5: Ef(cid:2)ciency of ISPY’s probing module.
Avg hops per traceroute
Probing traf(cid:2)c per round (MB)
Time per traceroute (sec)
Probing time per round (min)
Bandwidth (KB/s)
Five sample sources (by location)
UK Pitts,US
13.5
16.6
1.4
1.7
10.9
11.3
17
17
1.7
1.4
LA,US Norway
16.7
1.7
11.0
17
1.7
17.2
1.8
11.7
19
1.6
Japan
16.1
1.7
11.4
17
1.6
Overall (108 sources)
min max median
15.5
10.7
1.6
1.1
11.4
9.6
18
15
0.8
1.5
19.9
2.1
19.5
29
2.2
to all destination ASes probed, and the amount of probing traf(cid:2)c.
Table 5 shows the statistics of (cid:2)ve sampled nodes among the 108
nodes, as well as the overall statistics.
First, the average number of IP hops per traceroute including tail-
ing *’s is 10 (cid:24) 20. This number depends on the network location of
the probing source. In general, networks higher up in the AS hier-
archy have fewer IP hops per traceroute. This hops-per-traceroute
metric of traceroute probing primarily determines the ef(cid:2)ciency of
the whole probing round. We further calculate the amount of total
probing traf(cid:2)c per round. A traceroute TTL-limited probing packet
accounts for 26 bytes, an ICMP ping sends two packets, 64 bytes
each, and a TCP ping sends two packets, 26 bytes each. The total
probing traf(cid:2)c per round ranges between 1.1 (cid:24) 2.1 MB.
Second, the average execution time of a single traceroute is be-
tween 9.6 (cid:24) 19.5 seconds. Keeping 50 concurrent traceroutes,
one round of probing (cid:2)nishes in 15 (cid:24) 29 minutes. This short
turn-around time of probing enables ISPY to obtain the up-to-date
vPath. Furthermore, as we will describe in Section 5, ISPY deter-
mines there is an ongoing hijacking if it detects the number of cuts
has exceeded a threshold, and hence a hijacking can be detected be-
fore (cid:2)nishing one complete probing round, achieving even shorter
detection latency.
Finally, the bandwidth consumed by the probing traf(cid:2)c from the
pre(cid:2)x-owner network is only 2 (cid:24) 3 KB/s, con(cid:2)rming ISPY is light-
weight. ISPY’s probing module can run on a low-end PC and in-
curs very low bandwidth consumption to the access bandwidth, and
the probing is non-intrusive to the Internet.
Coverage. We next evaluate the coverage of our probing module.
The purpose of probing is to test the reachability of other ASes
and discover the AS-level paths to them. Accordingly, we measure
what fraction of the ASes can be reached by the probing, and how
complete the collected AS-level paths are. As before, we ran the
probing module on the 108 PlanetLab nodes. Each node probes the
set of 3470 transit ASes.
First, we focus on one node at Princeton. Table 6 lists the cover-
age in terms of ASes by traceroute probing, complementary ICMP
and TCP ping probing, and the overall probing. Traceroute prob-
ing successfully reaches 91.4% of the 3470 transit ASes, ICMP
ping reaches 7.5%, and TCP ping reaches the remaining 1.1%. The
failed traceroutes are due to traceroute (cid:2)ltering since the associated
destinations are mostly reachable by ping. Overall, 3468 (99.9%)
ASes are reached. Therefore, our probing module design achieves
high coverage in measuring reachability.
In terms of AS-level path discovery, complete AS-level paths are
obtained for 76.7% of the ASes. The incompletely resolved paths
are mainly due to unmapped *’s in traceroute. This imperfection of
path discovery poses a challenge for locating cuts in the vPath by
ISPY. We will show in Section 5 how to tackle this problem.
Second, we show the coverage on (cid:2)ve sampled nodes as well
as across all nodes in Table 7. Across all nodes, the reachable
AS coverage is 95.6% (cid:24) 100% with a median of 99.9%, and the
portion of ASes having complete paths ranges between 69.7% (cid:24)
85.9%. This latter property depends on how frequently the prob-
ing traverses traceroute-(cid:2)ltering networks, which depends on the
location of the probing source network.
Table 6: Probing coverage and breakdown of different meth-
ods.
Traceroute stat
Probed
Reached
AS-path completely resolved
AS-path incompletely resolved
Has at least 1 unmapped IP hop
Has at least 1 unmapped * hop
Complementary ping stat
Probed
Reached
Complementary TCP stat
Probed
Reached
Traceroute + ping + TCP stat
Reached
AS-path completely resolved
Transit ASes
Number
Percent
3470
3170
2663
807
155
680
300
261
39
37
100.0%
91.4%
76.7%
23.3%
4.5%
19.6%
8.6%
7.5%
1.1%
1.1%
3468
2663
99.9%
76.7%
5.
ISPY: PREFIX-OWNER-CENTRIC HI-
JACK DETECTION
The architecture of our pre(cid:2)x-owner-based hijacking detection
system is simple: it integrates our observation of the unreachability
signature of pre(cid:2)x hijacking with the carefully engineered probing
module. The probing module continuously probes the transit ASes
in the Internet, and the reachability and AS-level paths are streamed
into the detection decision making module to scan for the unreach-
ability signature of pre(cid:2)x hijacking. In the following, we discuss
two details in the decision making module of ISPY.
Handling Uncertain Subpaths. Accommodating the uncertainty
in resolving IP-level paths into AS-level paths as discussed in Sec-
tion 4.1 makes calculating the exact number of distinct cuts j(cid:10)j dif-
(cid:2)cult, since we do not know if two cuts both containing the same
starting node going into (cid:147)#(cid:148) are actually the same cut. However, our
goal is not to calculate the exact value of j(cid:10)j, but to compare the
value with a threshold. We can calculate the lower bound and the
upper bound of j(cid:10)j, and use both bounds to aid decision making.
We calculate the lower bound by simply assuming that all uncer-
tain cuts sharing the same starting node are the same, and calculate
the upper bound by assuming that each uncertain cut is a different
cut. To be conservative, we will use the lower bound to perform
hijack detection, although as we will show in Section 6 via Internet
experiments that the gap between the two bounds is small.
Continuous Decision Making. Although ISPY performs probing
round by round, each round probing a total of N transit ASes in
some (cid:2)xed order, since probing rounds are issued continuously, at
any point in the middle of a round, taking out the past N consecu-
tive probes would also make up a complete round of probing.
ISPY exploits the above observation to perform continuous real-
time decision making. It continuously streams new vPath data pro-
duced by the probing module into the decision making module. On
receiving each updated AS-level path P (i), the detection module
identi(cid:2)es if there is a cut in it. It then updates the set (cid:10) with the
Table 7: Coverage of probing on 108 PlanetLab nodes.
ASes reached by probing (%)
ASes having complete path (%)
Five sample sources (by location)
Overall (108 sources)
UK Pitts,US
100.0
99.9
79.7
74.5
LA,US Norway
100.0
82.4
99.9
80.7
Japan min
95.6
100.0
82.4
69.7
max median
99.9
81.0
100.0
85.9
number of unique cuts in the past N probes. Whenever the lower
bound of j(cid:10)j exceeds a predetermined threshold C, the decision
making module reports the occurrence of a hijack. Because the
cuts are calculated on the (cid:3)y and the total number is updated con-
tinuously, the system can detect hijacking well before all cuts in a
complete round of probing are witnessed.
As with any threshold-based decision system (e.g., [37]), the
choice for the threshold cut value used in hijacking detection in
ISPY represents a tradeoff between acceptable false negative and
false positive ratios. Lowering the threshold value is likely to lower
the false negative ratio but also increase the false positive ratio,
while increasing the threshold value is likely to increase the false
negative ratio but reduce the false positive ratio. Our analysis in
Section 3.4 shows that using a threshold value of 10 leads to a low
false negative ratio of 0.45%. In Section 6.1, we measure the false