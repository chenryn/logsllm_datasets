del_segm(ea, flags);
DelSelector
del_selector(sel);
DelSourceFile
del_sourcefile(ea);
DelStkPnt
del_stkpnt(get_func(func_ea), ea);
DelStruc
del_struc(get_struc(id));
DelStrucMember
del_struc_member(get_struc(id), offset);
DelXML
del_xml(path);
DeleteAll
while (get_segm_qty ())
   del_segm(getnseg (0), 0);
FlagsDisable(0, inf.ominEA);
FlagsDisable(inf.omaxEA, 0xFFFFFFFF); 
DeleteArray
netnode n(id).kill();
Demangle
demangle_name(buf, sizeof(buf), name, disable_mask);
return qstrdup(buf); 
DetachProcess
detach_process();
Dfirst
return get_first_dref_from(From);
DfirstB
return get_first_dref_to(To);
Dnext
return get_next_dref_from(From, current);
DnextB
return get_next_dref_to(To, current);
Dword
return get_full_long(ea);
EnableBpt
enable_bpt(ea, enable);
EnableTracing
if (trace_level == 0)
   return enable_step_trace(enable);
else if (trace_level == 1)
   return enable_insn_trace(enable);
else if (trace_level == 2)
   return enable_func_trace(enable); 
EndTypeUpdating
end_type_updating(utp);
Eval
 idc_value_t v;
calcexpr(-1, expr, &v, errbuf, sizeof(errbuf)); 
Exec
call_system(command);
ExecIDC
 char  fname[16];
uint32_t fnum = globalCount++; //mutex around globalCount
qsnprintf(fname, sizeof(fname), "___idcexec%d", fnum);
uint32_t len;
len = qsnprintf(NULL, 0, "static %s() {\n%s\n; }", fname, input);
char  * func = (char*)qalloc(len);
qsnprintf(func, len, "static %s() {\n%s\n; }", fname, input);
ExecuteLine(func, fname, NULL, 0, NULL, NULL, err, sizeof(err)); 
globalCount--; //mutex around globalCount 
qfree(func); 
Exit
qexit(code);
ExtLinA
netnode n(ea).supset(n + 1000, line);
setFlbits(ea, FF_LINE); 
ExtLinB
netnode n(ea).supset(n + 2000, line);
setFlbits(ea, FF_LINE); 
Fatal
error(format, ...);
FindBinary
ea_t endea = (flag & SEARCH_DOWN) ? inf.maxEA : inf.minEA;
return find_binary(ea, endea, str, getDefaultRadix(), flag); 
FindCode
return find_code(ea, flag);
FindData
return find_data(ea, flag);
FindExplored
return find_defined(ea, flag);
FindFuncEnd
func_t f;
find_func_bounds(ea, &f, FIND_FUNC_DEFINE);
return f->endEA; 
FindImmediate
return find_imm(ea, flag, value);
FindSelector
return find_selector(val);
FindText
return find_text(ea, y, x, str, flag);
FindUnexplored
return find_unknown(ea, flag);
FindVoid
return find_void(ea, flag);
FirstFuncFchunk
get_func(funcea)->startEA;
FirstSeg
return getnseg (0)->startEA;
ForgetException
excvec_t  *ev = retrieve_exceptions();
for (excvec_t::iterator i = ev->begin(); i != ev->end(); i++)
   if ((* i).code == code)
      ev->erase(i);
      return store_exceptions();
return 0; 
GenCallGdl
gen_simple_call_chart(outfile, "Building graph", title, flags);
GenFuncGdl
func_t  * f = get_func(ea1);
gen_flow_graph(outfile, title, f, ea1, ea2, flags); 
GenerateFile
gen_file(type, file_handle, ea1, ea2, flags);
GetArrayElement
 netnode n(id);
if (tag == 'A') return n.altval(idx);
else if (tag == 'S')
   n.supstr(idx, buf, sizeof(buf));
   return qstrdup(buf); 
GetArrayId
qsnprintf(buf, sizeof(buf), "$ idc_array %s", name); 
netnode n(buf);
return (nodeidx_t)n; 
GetBmaskCmt
get_bmask_cmt(enum_id, bmask, repeatable, buf, sizeof(buf));
return qstrdup(buf); 
GetBmaskName
get_bmask_name(enum_id, bmask, buf, sizeof(buf));
return qstrdup(buf); 
GetBptAttr
 bpt_t bpt;
if (get_bpt(ea, &bpt) == 0) return -1;
if (bpattr == BPTATTR_EA) return bpt.ea;
else if (bpattr == BPTATTR_SIZE) return bpt.size;
else if (bpattr == BPTATTR_TYPE) return bpt.type; 
else if (bpattr == BPTATTR_COUNT) return bpt.pass_count;
else if (bpattr == BPTATTR_FLAGS) return bpt.flags; 
else if (bpattr == BPTATTR_COND) return qstrdup(bpt.condition); 
GetBptEA