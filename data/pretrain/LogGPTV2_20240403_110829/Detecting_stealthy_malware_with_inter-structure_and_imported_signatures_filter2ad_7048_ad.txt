# Detection Results and Experimental Evaluation

## Figure 12: Screenshot of Hidden Process Detection
The screenshot in Figure 12 demonstrates the detection of hidden processes by DeepScanner. We will discuss the detailed detection of the classical rootkit, adore-ng, and present the detection results for all rootkits in a table. The second set of experiments evaluates DeepScannerâ€™s effectiveness against evasion attacks. We developed an experimental rootkit based on adore-ng to conduct these tests. The results show that it could not evade DeepScanner without disrupting the normal functions of target objects and the system.

## Experimental Setup
We conducted our experiments on two versions of the Linux kernel (2.4.18 and 2.6.9) to test our approach with a broader range of available rootkits. The detailed configurations of our experimental environment are listed in Table 1.

### 5.1 Real-world Rootkits Experiments
We evaluated DeepScanner using 7 real-world Linux rootkits, as shown in Table 2. These rootkits can hide various system objects, including processes, sockets, and kernel modules, employing major stealth techniques such as KOH and DKOM. DeepScanner successfully detected all hidden objects by scanning the system kernel memory using the four invariants discussed earlier. Notably, DeepScanner achieved perfect precision, with no false negatives or false positives.

#### Detailed Experiment with Adore-ng Rootkit
Adore-ng is a classic rootkit that infects the kernel as an LKM and can hide processes, sockets, and kernel modules. It uses KOH to hide processes by targeting the kernel function pointers `proc_root.proc_iops->readdir` and `proc_root_inode_operations->lookup`. Similarly, it hides sockets by targeting the kernel function pointer `proc_net->get_info`. Additionally, adore-ng employs DKOM to hide kernel modules by unlinking them from the module list maintained by the Linux kernel.

Using DeepScanner, we detected the objects hidden by the adore-ng rootkit. As shown in Figure 12, a calculator process (PID: 5603) was still running despite being hidden by the rootkit. This process was not visible in the output of the `ps` utility but was detected by DeepScanner. According to the cross-view technique, DeepScanner concluded that the process with PID 5603 was hidden. In the DeepScanner console, hidden objects are highlighted and displayed at the top of the list.

### 5.2 Performance
We measured two aspects of DeepScanner's performance:
- **Detection Time:** The time taken to scan memory and discover hidden objects.
- **Performance Overhead:** The overhead on the target system due to signature pages protection.

#### Detection Time
DeepScanner employs a directed scanning strategy, fetching candidate memory blocks from specific parts of the kernel memory space rather than traversing the entire kernel memory. It checks memory blocks in the slab list with specific item sizes to find socket alloc data structures, memory blocks with 8KB-aligned start addresses to find thread info data structures, and identifies imported signature pages page by page. Consequently, DeepScanner's scanning is very fast, taking no more than 1 second in our experimental environment.

#### Performance Overhead
Before enforcing the signature pages protection, we used Unixbench to measure the overall system performance, which scored 94.2. After installing the signature pages protection mechanism, the score dropped slightly to 93.4, indicating a negligible and acceptable performance overhead of less than 1%.

### 5.3 Experiments for Evasion Attacks
To evaluate DeepScanner's resistance to evasion attacks, we implemented an experimental rootkit based on adore-ng. This rootkit attempts to evade detection by modifying fields related to signatures. The experiments consist of four parts, each attempting to evade detection by violating one of the four invariants used by DeepScanner. The results show that the rootkit cannot evade DeepScanner without breaking the normal functions of target objects and the system.

#### Violation of Invariant 1
The experimental rootkit attempts to evade hidden socket detection by breaking the reference chain about the socket alloc data structure. It does this by setting any one link pointer field of the chain to an arbitrary address value, breaking the original reference. This results in an unstable and eventually broken connection.

#### Violation of Invariant 2
The experimental rootkit attempts to evade hidden process detection by breaking the cross-reference relationship between a task struct data structure and a related thread info data structure. It does so by setting either `(t.thread_info)->task` or `(th.task)->thread_info` to another value, causing the system to crash immediately.

#### Violation of Invariant 3
Similar to Invariant 1, the experimental rootkit attempts to evade hidden socket detection by breaking the reference relationship of a socket alloc data structure, a related task struct data structure, and a related file data structure. If it points either `socket-related (t.files)->fd array[i]` or `(f.dentry)->d_inode` to another place, the socket will be disconnected. If it modifies the `(sa.socket)->file` pointer, the system will crash.

#### Violation of Invariant 4
The experimental rootkit attempts to evade hidden module detection by tampering with the signature pages. Since all signature pages lack write permission, any attempt to modify their content directly will result in a segmentation fault. Additionally, the rootkit tries to set the signature pages to writable by modifying the related PTE. Under the protection of the monitor deployed in the XEN hypervisor, any modification towards the protected PTE is terminated and fails.

## 6. Limitations and Future Work
The primary limitation of our approach is that the signatures are derived from manual analysis of kernel data structures, which is feasible only for open-source operating systems like Linux. For closed-source OSes like Windows, an automatic technique for generating signatures, similar to [12][16], is needed. In the future, we plan to introduce dynamic analysis to generate inter-structure signatures for closed-source OSes using fuzzing techniques.

Currently, DeepScanner is implemented as an LKM, which means its detection is enforced in the target OS kernel. This may be compromised by rootkits designed to tamper with the detection mechanisms. To counter this, we aim to port DeepScanner to a hypervisor to shield it from malicious attacks, even if the guest OS kernel is compromised.

## 7. Conclusions
Scanning memory for object signatures to detect stealthy malware has proven to be effective. Constructing robust scanning signatures is critical. Traditional approaches use fields from a single data structure, but our analysis and experiments show that this is limited or even impossible for some critical system object structures. We introduced two new concepts: inter-structure signatures and imported signatures. Based on these, we extended the signature space to involve relationships of multiple data structures or importing artificial signatures. We provided four invariants as signatures to detect hidden processes, sockets, and kernel modules in Linux. Our prototype system, DeepScanner, and a hypervisor-based monitor to protect imported signatures, effectively and efficiently detect stealthy malware and resist evasion attacks. Our work provides a new method for constructing robust signatures, and the invariants presented can be used to locate processes, sockets, and kernel modules in memory.

## 8. Acknowledgments
We thank the anonymous reviewers for their insightful comments, which helped improve this paper. This work was supported by the National Natural Science Foundation of China under Grant No. 60873213, 91018008, 60703103, and 61070192, the Beijing Science Foundation under Grant No. 4082018, and the Shanghai Key Laboratory of Intelligent Information Processing, China, Grant No. IIPL-09-006.

## 9. References
[References listed as in the original text]

---

This optimized version of the text is more structured, clear, and professional, with improved readability and coherence.