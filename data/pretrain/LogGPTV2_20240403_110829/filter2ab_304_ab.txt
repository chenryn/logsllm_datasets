      }
      if (_isOver != '\0') break;
      BVar2 = FindNextFileA(local_18,(LPWIN32_FIND_DATAA)&local_158);
      local_11 = BVar2 != 0;
    }
    FindClose(local_18);
  }
  return;
}
```
It looks like `_listdir` is a recursive function which iterates over files in the folder (in our case it was called with the folder "`./test`" by the main function) and calls `_hideInFile` for every other file... assuming `param_1` is set to `0`. If `param_1` is set to `1`, an interesting function called `_decodeBytes` is called on the file instead.
Who calls `_listdir` with `param_1 = 1`? An interesting uncalled function named `_decode`:
```c
void _decode(void)
{
  undefined4 local_28;
  undefined4 local_24;
  undefined4 local_20;
  undefined4 local_1c;
  undefined4 local_18;
  undefined4 local_14;
  undefined4 local_10;
  local_24 = 1634496360;
  local_20 = 2105376;
  local_1c = 0;
  local_18 = 0;
  local_14 = 0;
  _buff_size = 0x12;
  local_28 = 0;
  local_10 = 1;
  _buff = &local_24;
  _buff_index = &local_28;
  _listdir(1,_folderName);
  printf("value of DECODE %s \n",_buff);
  puts("Wait for 5 seconds to exit.");
  _sleep(5);
                    /* WARNING: Subroutine does not return */
  exit(0);
}
```
This function relies on the `_folderName` global and seems very promising. We can call it independently using the debugger after `_folderName` gets initialized in the main function.
Using `x64dbg`, we launch the program and execute:
```
> SetBPX 00401bda
```
This will set a breakpoint in main, right after initializing _folderName:
```assembly
        00401bc9 8d 44 24 48     LEA        EAX=>local_28,[ESP + 0x48]
        00401bcd a3 34 54        MOV        [_folderName],EAX                                = ??
                 40 00
        00401bd2 c7 44 24        MOV        dword ptr [ESP + local_14],0x0
                 5c 00 00 
                 00 00
        00401bda c7 05 48        MOV        dword ptr [_pLevel],0x31                         = ??
                 54 40 00 
                 31 00 00 00
```
We run and hit the breakpoint. Now we just need to change `eip` to `_decode` and run:
```
> EIP=00401afe
```
Now we just need to run, and we get the flag:
```
value of DECODE picoCTF{M4cTim35!}
Wait for 5 seconds to exit.
```
So where did the flag hide?
Let's take a look at the `_hideInFile` function:
```c
void __cdecl _hideInFile(LPCSTR param_1)
{
  BOOL BVar1;
  _FILETIME local_2c;
  _FILETIME local_24;
  _FILETIME local_1c;
  char local_12;
  char local_11;
  HANDLE local_10;
  local_10 = CreateFileA(param_1,0x100,0,(LPSECURITY_ATTRIBUTES)0x0,3,0,(HANDLE)0x0);
  .text(local_10);
  if (local_10 == (HANDLE)0xffffffff) {
    printf("Error:INVALID_HANDLED_VALUE");
  }
  else {
    BVar1 = GetFileTime(local_10,(LPFILETIME)&local_1c,(LPFILETIME)&local_24,(LPFILETIME)&local_2c);
    if (BVar1 == 0) {
      printf("Error: C-GFT-01");
    }
    else {
      local_11 = *(char *)(*_flag_index + _flag);
      *_flag_index = *_flag_index + 1;
      local_12 = *(char *)(*_flag_index + _flag);
      *_flag_index = *_flag_index + 1;
      _encodeBytes(local_11,local_12,(uint *)&local_2c);
      if (0 >> os.stat("Item01 - Copy.bmp")
os.stat_result(st_mode=33206, st_ino=562949953448601, st_dev=1009486881, st_nlink=1, st_uid=0, st_gid=0, st_size=127654, st_atime=1554572121, st_mtime=1553556008, st_ctime=1554505885)
>>> os.stat("Item01 - Copy.bmp").st_mtime
1553556008.0027752
>>> os.path.getmtime("Item01 - Copy.bmp")
1553556008.0027752
```
We can either write a `C` program that uses `WinAPI` or use the Python `ctypes` module to call Windows API functions directly.
We just need to notice that the program sets `_pLevel` to `0` (so that only the file modification time is used to hide the flag) and that the `_encodeBytes` logic is simply:
```c
void __cdecl _encodeBytes(char param_1,char param_2,uint *param_3)
{
  *param_3 = (*param_3 & 0xffff0000) + (int)param_2 + (int)param_1 * 0x100;
  return;
}
```
Meaning, every two bytes of the flag are encoded as the two least significant bytes of the modification time of a file.
Here's how to extract the flag with Python:
```python
from ctypes import windll, Structure, byref
from ctypes.wintypes import LPWSTR, DWORD, FILETIME
import os, glob 
class WIN32_FILE_ATTRIBUTE_DATA(Structure):
    _fields_ = [("dwFileAttributes", DWORD),
                ("ftCreationTime", FILETIME),
                ("ftLastAccessTime", FILETIME),
                ("ftLastWriteTime", FILETIME),
                ("nFileSizeHigh", DWORD),
                ("nFileSizeLow", DWORD)]
# https://stackoverflow.com/questions/38508351/getting-last-change-time-in-python-on-windows
def get_mtime(filename):
    wfad = WIN32_FILE_ATTRIBUTE_DATA()
    GetFileExInfoStandard = 0
    windll.kernel32.GetFileAttributesExW(LPWSTR(filename), GetFileExInfoStandard, byref(wfad))
    lowtime = long(wfad.ftLastWriteTime.dwLowDateTime)
    hightime = long(wfad.ftLastWriteTime.dwHighDateTime)
    filetime = (hightime > 8)
    flag += chr(time & 0xff)
print flag
```
Output:
```
test\Item01 - Copy.bmp:         131980296080027753
test\Item02 - Copy.bmp:         131980296340005743
test\Item03 - Copy.bmp:         131980296509997908
test\Item04 - Copy.bmp:         131980296730003067
test\Item05 - Copy.bmp:         131980296889978164
test\Item06 - Copy.bmp:         131980298579960660
test\Item07 - Copy.bmp:         131980298870024557
test\Item08 - Copy.bmp:         131980299550012213
test\ItemTest - Copy.bmp:       131980329319997821
picoCTF{M4cTim35!}
```