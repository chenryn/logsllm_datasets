of the system contains kinds of application services based
on cloud computing, which are in charge of generating,
storing and transmitting encrypted digital content and
corresponding licenses.
Because the SIM card and cloud are introduced into CS-
DRM, the roles and functions of the client and backend
are more distinguished. In our scheme, we use E and S
instead of C deﬁned in Section 2.2.1 so that characteristics
of these two parts can be expressed clearly, such as the
better security provided by the SIM card, and the elasticity,
signiﬁcant economic advantages [11] as well as multitenant
nature brought by the cloud.
3.2. Entities. The cloud client of CS-DRM has four main
entities: a SIM card, a DRM agent, a custom player, and a
CS-DRM compliant browser.
SIM Card is the Subscriber Identity Module card used
in the mobile device [8]. At the client, besides the network
operations such as identifying a subscriber of the mobile
network, the SIM card is in charge of security issues,
for example, authentication between the cloud client and
the license service, veriﬁcation for license integrity and
generating Kcek, as shown later in Algorithm 4. It stores a
secret key Ki and a unique IMSI. The A3, A5, A8, and A38
algorithms embedded in a SIM card are implemented and
protected by hardware.
DRM Agent is a “bridge” among other entities, and
consists of a set of logical rules of cloud clients in the device.
For example, if the client wants to render the encrypted
EURASIP Journal on Wireless Communications and Networking
5
digital media when it has acquired the corresponding license,
the DRM agent will send an APDU (Application Protocol
Data Unit) command to the SIM card for Kcek. After that,
the DRM agent decrypts encrypted digital media by Kcek and
then sends it to the compliant player for rendering. Here Kcek
is generated by decrypting EK using UK, and more details
will be presented later in Algorithms 3 and 4.
Custom Player is for rendering digital media. The player
could not illegally copy or distribute the decrypted digital
media when it is rendering the content.
CS-DRM Compliant Browser is for browsing web sites of
the backend. It notiﬁes the DRM agent to do the next action
when it receives corresponding responses or events.
3.3. Application Services. As shown in Figure 1, the backend
of CS-DRM provides cloud clients with two application
services within the application layer. The implementation of
the platform layer and infrastructure layer is not considered
in this paper because it is out of the scope of this work.
Content Service deals with all content related requests
from clients and provides high-quality services to content
providers for dealing with contents. It encrypts digital
content with the key Kcek and hosts distribution channels,
such as a web site used to search TV menus. Content
service will transmit Kcek to the license service for generating
licenses.
License Service is in charge of all license-related requests,
such as dealing with SIM card authentication and generat-
ing, transmitting licenses to the DRM agent according to
rights, Kcek and other necessary information, as shown in
Algorithm 2. The rights information is the usage rules of the
content.
These application services in CS-DRM get new feathers
from the cloud such as elasticity, multitenancy, and dis-
tributed storage, which is quite diﬀerent from common DRM
servers. Taking Content Issuer (CI) for example, our content
service guarantees the data security, sharing, and isolation
among multiple content providers and provides rich as well
as powerful services for handling contents, which is not well
considered by CI of OMA DRM.
For convenience of explanation, we assume that each
application service is provided by a group of servers in the
cloud. Therefore, we let certain servers represent correspond-
ing application services. For instance, the content service is
provided by a group of servers called content servers, and
the license service is provided by those called license servers.
In the rest of the paper, we do not diﬀerentiate between
application services and corresponding servers.
3.4. Protocols. The CS-DRM scheme has a collection of
protocols. Besides several common protocols such as HTTP,
RTP [13], RTSP [14], and SSL, we designed two new
protocols—License State Word Protocol (LSWP) and License
Acquisition Protocol (LAP)—to guarantee the integrity of
license ﬁles, as well as the safety of the whole scheme. The
processes of both LSWP and LAP are illustrated in Figure 2.
3.4.1. The License State Word Protocol. We propose a data
structure, License State Word (LSW), stored in the SIM card
Table 2: LSW Commands.
LSW Command Function Description
CREATE LSW
Creating LSW when the DRM agent acquires a
license at the ﬁrst time.
UPDATE LSW Updating LSW after the license is consumed.
DELETE LSW Deleting the LSW when no license is available.
CHECK LSW Checking the integrity of the LSW.
GENERATE UK
Generating UK when the DRM agent wants to
render the content.
ﬁle system. We apply the data hiding technique proposed
in [15] on LSW to make sure that LSW is invisible. The
structure of LSW is
LSW = License ID(cid:3)Rand(cid:3)License Hash(cid:3)V ersion,
(3)
where License ID is the license index and Rand is a random
number in the license and is also a parameter of Algorithms
1 and 2. License Hash is the hash value of the license for
ensuring the license integrity. V ersion is an identity for
uploading LSW. Only if the LSW version in the license service
equals the version of the uploaded LSW, the LSW in the
license service will be replaced by the uploaded LSW. When
the upload subprotocol of LAP carried out successfully, the
version domain of LSW in both the SIM card and license
service will be updated.
In order to regulate the operations on LSW between
the SIM card and DRM agent, LSWP is designed and
adopted in the cloud client. The instructions of the ADPU
command for LSWP are CREATE LSW, UPDATE LSW,
DELETE LSW, CHECK LSW, and GENERATE UK. The
functional descriptions of these instructions are listed in
Table 2.
An example of the APDU command CREATE LSW
is shown in Table 3. The parameter CLA is the class of
instruction; “0x88” represents the instruction class for LSWP.
INS is the instruction code; “0x20” means CREATE LSW
command. Lc is the number of bytes in the data ﬁeld of
the command; “0x10” means that the Data domain is the
next 16 bytes behind the Lc domain. In the Data domain,
the ﬁrst 4 bytes represent License ID, the second 4 bytes
represent Rand, and the last 8 bytes represent License Hash.
Le is the maximum number of bytes expected in the data ﬁeld
of the response command; “0x01” means that only 1 byte is
expected for the data ﬁeld of the response.
3.4.2. The License Acquisition Protocol. License Acquisition
Protocol (LAP) is a protocol based on XML for license
acquisition and is shown in Figure 2. LAP consists of
four subprotocols: Trigger subprotocol, Authentication sub-
protocol, License Transmission subprotocol, and Upload
subprotocol. The trigger subprotocol is a 4-pass protocol
existing in the rights customization phase, through which
users can customize the rights for the related content.
The response trigger containing a license server URL and
other useful information (e.g., price) will be sent to the
DRM agent. After the trigger subprotocol, the license server
6
EURASIP Journal on Wireless Communications and Networking
SIM card
DRM agent
License server
Trigger sub-protocol
Rights customization web page
Rights customization
Trigger
Trigger conﬁrm
Authentication sub-protocol
Authentication
Conﬁrm authentication
License transmission
-protocol
sub
License request
License response
Render content
Upload sub-protocol
LAP
LSWP
Create LSW/check LSW
Generate UK
Update/delete LSW
License upload
Upload conﬁrm
Figure 2: The processes of both LSWP and LAP.
Table 3: An example of APDU command CREATE LSW.
Parameter
Length
Value
CLA
1
0x88
INS
1
0x20
Lc
1
0x10
CREATE LSW
License ID
4
Data
Rand
4
License Hash
8
0x00000001
0x1d3a9f62
0x1d31e4049a672dc8
Le
1
0x01
generates the rights for a license. The DRM agent starts a 2-
pass authentication subprotocol after conﬁrming the trigger
message. The authentication subprotocol is a 2-pass protocol
for transmitting and authenticating identity information of
the SIM card to the license server as seen from Algorithm 3.
The license transmission subprotocol is a 2-pass protocol
for transmitting a license to the DRM agent during which
the sensitive data have been encrypted by Algorithm 2. The
upload subprotocol is a 2-pass protocol for synchronizing
the license, and LSW stored in the license server. The upload
command is a proactive command [9] initiated by the SIM
card.
Input: Rand : a 4-byte random number from the DRM
agent;
Ki : a secret key stored in both the SIM card and
the database of the license server;
Output: CK : a byte array for SIM-Authentication
(1) Kc := A8(Ki, Rand);
(2) CK := A5(Kc, Rand);
Algorithm 1: SIM-Authentication (Rand, Ki).
3.5. Algorithms. There are four main algorithms in the CS-
DRM scheme. In this subsection, each algorithm is presented
in detail.
3.5.1. SIM Card Authentication Algorithm. The SIM card
authentication algorithm, as shown in Algorithm 1, is exe-
cuted within the SIM card and used to generate the SIM card
authentication information CK. After receiving a random
EURASIP Journal on Wireless Communications and Networking
7
Input: Rand: a 4 byte random number from the DRM
Agent;
IMSI hash: the index for Ki stored in the
database of the mobile operator;
CK: the authentication value;
Rights ID: the index of rights information stored
in the database of the license server.
DRM Agent
∗
is equal to CK then
:= A5(Kc, Rand);
∗
Output: Message: the transmission message to the
(1) Ki := GetKI(IMSI hash);
(2) Kc := A8(Ki, Rand);
(3) CK
(4) if CK
(5)
(6)
(7)
(8)
(9)
(10) Message := GenerateMessage(license);
(11) else
(12)
(13) Message := GenerateMessage(error);
UK := AUK (Kc, Rand);
EK := EUK (Kcek);
Rights := GetRight(Rights ID);
license := {License ID, Content ID, Rights,
error := ErrorIn f o(“Unauthentic SIM Card
(cid:5)(cid:5)
);
EK, Rand, H(HKey(cid:3)Rights(cid:3)EK(cid:3)Rand)};
Algorithm 2: License-Generation (Rand,
Rights ID).
IMSI hash, CK,
number Rand from the DRM agent, the SIM card generates
an intermediate number Kc by Ki, Rand, and A8. Then, the
SIM card generates CK and sends it to the license server to
distinguish the legal SIM card from impostors.
3.5.2. License Generation Algorithm. The license generation
algorithm is executed in a license server to generate licenses.
As shown in Algorithm 2, Rand is a 4-byte random number
from the DRM agent; IMSI hash is used to get Ki; CK
is the SIM card authentication information generated by
Algorithm 1; Rights ID is the index of usage rights which
is generated through the trigger subprotocol. The Hash
function needs a special key HKey as a parameter. HKey
is generated by hashing the concatenation of the random
number and Ki which can be acquired through IMSI. Since
attackers could not get the Ki, they cannot generate HKey
and tamper the message and hash value without being
aware. The license server ﬁrst veriﬁes CK for the SIM card
authentication. After that, the license server generates UK,
and then encrypts Kcek by EUK , that is, the symmetric
encryption algorithm Ek where the value of k is UK. EK is
the encrypted Kcek. At the end, the license server generates a
license.
A license is an XML ﬁle. An example of the license
is shown in Figure 3. In general, a license contains two
parts. One is the rights related part, which deﬁnes the
rights information of the digital content, in the protectLicense
domain, such as the encrypted Kcek in the keyInfo domain
and the constraint of the rights information in the constraint
domain. The other is the part which describes the user and
server information, for example, the IMSI hash domain and
C6357835D8FA407894653EAC5749CC94
BC219D155FFB5590C1F46E50E9383196
1
32efd34de39sdwefqwer
... ...
0152
BraveHeart
... ...
9204587f85f16040a3808ca50b743164
7aec0fc08012a627a3a9f570404ae4a2
3
76BAC0E6
0003 BraveHeart
... ...
... ...
... ...
6
4CD943D00BA424EF8B1F421066A3AE5F76F31AF8
Figure 3: An example of a license.
the LicenseServerID domain. The integrity of a license is
ensured by kinds of Hash algorithms.
3.5.3. Key Generation Algorithm. The key generation algo-
rithm is used to generate Kcek by decrypting EK, which is
executed within a SIM card. This algorithm, as shown in
Algorithm 3, is the pivotal step of Algorithm 4. The related
A8 and AUK algorithms are embedded in the hardware of
a SIM card. And the output Kcek cannot be acquired by
attackers because of LSWP.
3.5.4. Content Decryption Algorithm. The content decryp-
tion algorithm, as shown in Algorithm 4, is used to decrypt
the encrypted content after the DRM agent acquires an
available license. The DRM agent ﬁrst checks whether the
rights information is available and then gets the useful
information such as Rand, License ID, Rights, EK, and
Hash. If a license is acquired by LAP for the ﬁrst time,
8
EURASIP Journal on Wireless Communications and Networking
Input: Rand: a 4 byte random number;
EK: the encrypted Kcek in the license;
content.