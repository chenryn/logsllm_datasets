1"
MODERN MALWARE: 
OBFUSCATION AND EMULATION 
DEF"CON"CHINA"1.0"(2019)"
DEF CON CHINA 1.0 (2019) 
by Alexandre Borges 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
2"
ü  Malware and Security 
Researcher. "
ü  Speaker at DEFCON USA 2018 
ü  Speaker at HITB 2019 
Amsterdam 
ü  Speaker at CONFidence Conf. 
2019 
ü  Speaker at BSIDES 
2018/2017/2016 
ü  Speaker at H2HC 2016/2015 
ü  Speaker at BHACK 2018 
ü  Consultant, Instructor and 
Speaker on Malware Analysis, 
Memory Analysis, Digital 
Forensics and Rookits. "
ü  Reviewer member of the The 
Journal of Digital Forensics, 
Security and Law."
ü
Referee on Digital
Agenda: 
"
v  Introduction 
v  Anti-reversing 
v  METASM 
v  MIASM 
v  TRITON 
v  Radare2 + MIASM 
v  DTRACE on Windows 
v  Anti-VM 
v  Conclusion 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"INTRODUCTION 
DEF"CON"CHINA"1.0"(2019)"
3"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
4"
ü  Every single day we handle malware samples that use several known packers such as 
ASPack, Armadillo, Petite, FSG, UPX, MPRESS, NSPack, PECompact, WinUnpack and so on. 
For most of them, it is easy to write scripts to unpack them.  
ü  We also know the main API functions, which are used to create and allocate memory 
such as: 
ü  VirtualAlloc/Ex( ) 
ü  HeapCreate( ) / RtlCreateHeap( ) 
ü  HeapReAlloc( ) 
ü  GlobalAlloc( ) 
ü  RtlAllocateHeap( ) 
ü  Additionally, we know how to unpack them using debuggers, breakpoints and dumping 
unpacked content from memory.  Furthermore, pe-sieve from Hasherezade is excellent. 
J 
ü  When we realize that the malware use some customized packing techniques, it is still 
possible to dump it from memory, fix the ImageAddress field using few lines in Python 
and its respective IAT using impscan plugin to analyze it in IDA Pro: 
ü  export VOLATILITY_PROFILE=Win7SP1x86 
ü  python vol.py -f memory.vmem procdump -p 2096 -D . --memory  (to keep slack space) 
ü  python vol.py -f memory.vmem impscan --output=idc -p 2096 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
5"
//############################################################# 
//  FileName      :  dumpexe.txt (first draft) 
//  Comment     :  Dump memory segments containing executables 
//  Author          :  Alexandre Borges 
//  Date              :  today 
//############################################################# 
entry: 
msg "Program to dump modules containing executables." 
msg "You must be at EP before continuing" 
bc
 // Clear existing breakpoints 
bphwc
 // Clear existing hardbreakpoints 
bp VirtualAlloc
 // Set up a breakpoint at VirtualAlloc 
erun
 // run and pass all first exceptions to the application 
core: 
sti
 // Single-step 
sti
 // Single-step 
sti
 // Single-step 
sti
 // Single-step 
sti
 // Single-step 
x64dbg  
script 
1/3 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
6"
find cip,"C2 1000“  // find the return point of VirtualAlloc 
bp $result
 // set a breakpoint 
erun
 // run and pass all first exceptions to the application 
cmp eax,0
 // test if eax (no allocated memory) is equal to zero 
je pcode  
 // jump to pcode label 
bpm eax,0,x
 // set executable memory breakpoint and restore it once hit. 
erun
 // run and pass all first exceptions to the application 
//try to find if there is the “This program” string within the module’s memory.  
findall $breakpointexceptionaddress,"546869732070726F6772616D”   
cmp $result,0
 // check if there isn’t any hit 
je pcode  
 // jump to pcode label 
$dumpaddr = mem.base($breakpointexceptionaddress)
 //find the memory base.  
$size = mem.size($breakpointexceptionaddress)   
 //find the size of memory base. 
savedata :memdump:,$dumpaddr,$size 
 //dump the segment. 
msgyn "Memory dumped! Do you want continue?“   
 //show a dialog 
cmp $result,1
 //check your choice 
je scode  
 // jump to scode label 
bc
 // clear existing breakpoints 
bphwc
 // clear existing hardware breakpoints 
ret
 // exit  
x64dbg  
script 2/3 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
7"
pcode: 
msgyn "There isn't a PE file! Do you want continue?" 
cmp $result,0
 // check if we don’t want continue 
je final 
sti
 //single step. 
erun
 // run and pass all first exceptions to the application 
jmp core  
 // jump to core label 
scode: 
msg "Let's go to next dump“  // shows a message box 
erun
 // run and pass all first exceptions to the application 
jmp core  
 // jump to core label 
final: 
bc
 // clear existing breakpoints 
bphwc
 // clear existing hardware breakpoints 
ret
 // exit  
!
x64dbg  
script 3/3 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
"ANTI-REVERSING 
DEF"CON"CHINA"1.0"(2019)"
8"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019"
9"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Obfuscation aims to protect software of being reversed, intellectual property and, 
in our case, malicious code too.  J Honestly, obfuscation does not really protect 
the program, but it can make the reverser’s life harder than usual.  
ü  Thus, at end, obfuscation buys time by enforcing reversers to spend resources and 
time to break a code.   
ü  We see obfuscated code every single day when  we analyze commom userland 
malware, droppers written in VBA and Powershell, so it mightn’t seem to be a big 
deal.  
ü  We can use IDA Pro SDK to write plugins to extend the IDA Pro functionalities, 
analyze some code and data flow and even automatizing unpacking of strange 
malicious files. 
ü  Additionally, if you are facing problems to analyze a modified MBR, so you could 
even write a loader to load the MBR structure and analyze it in IDA Pro. J 
ü  Unfortunately, there are packers and protectors such as VMprotect, Themida, 
Arxan and Agile .NET that use modern obfuscation techniques, so making the 
procedure of reversing a code very complicated.  
DEF"CON"CHINA"1.0"(2019)"
10"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü Most protectors have used with 64-bit code (and malware). 
ü Original IAT is removed from the original code (as usually applied by any 
packer). However, IAT from packers like Themida keeps only one function 
(TlsSetValue).  
ü Almost all of them provide string encryption.  
ü They protect and check the memory  integrity. Thus, it is not possible to 
dump a clean executable from the memory (using Volatility, for example) 
because original instructions are not decoded in the memory.   
ü Instructions (x86/x64 code) are virtualized and transformed into virtual 
machine instructions (RISC instruction).  
ü .NET protectors rename classes, methods, fields and external references.  
DEF"CON"CHINA"1.0"(2019)"
11"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü Some packers can use instruction encryption on memory as additional 
memory layer. 
ü Obfuscation is stack based, so it is hard to handle virtualized code 
statically.  
ü Virtualized code is polymorphic, so there are many representations 
referring the same CPU instruction.  
ü There are also fake push instructions. 
ü There are many dead and useless codes.  
ü There is some code reordering using unconditional jumps.  
ü All obfuscators use code flattening. 
ü Packers have few anti-debugger and anti-vm tricks. However, few months 
ago, I saw a not so common anti-vmware trick based on temperature 
(more about it later).  
DEF"CON"CHINA"1.0"(2019)"
12"
int defcon(int x) 
“Virtualizer” 
(bytecodes) 
vm_call_1(opcodes, x) 
Fetches bytes, decodes  
them to instructions and  
dispatches them to handlers 
v  Protectors using virtual machines introduces into the obfuscated code: 
ü  A context switch component, which “transfers” registry and flag information into VM 
context (virtual machine). The oposite movement is done later from VM machine 
and native (x86/x64) context (suitable to keep within C structures during unpacking 
process J) 
ü  This “transformation” from native register to virtualized registers can be one to one, 
but not always. 
ü  Inside of the virtual machine, the cycle is: 
ü  fetch instruction 
ü  decode it 
ü  find the pointer to instruction and lookup the associate opcode in a handler table 
ü  call the target handler   
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
13"
ü  Few interesting concepts:  
ü  Fetching:  the instruction to be executed by Virtual Machine is 
fetched.  
ü  Decoding: the target x86 instruction is decoded using rules from 
Virtual Machine (remember: usually, the architecture is usually 
based on RISC instructions) 
ü  Dispatcher: Once the handler is determined, so jump to the suitable 
handler. Dispatchers could be made by a jump table or switch case 
structure.  
ü  Handler: In a nutshell, a handler is the implementation of the Virtual 
Machine instruction set. 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
14"
B 
C 
H 
D 
DISPATCHER 
A 
I 
G 
F 
E 
2 
3 
Instruction 
decoder 
Instruction 
A, B, C, ... are handlers such as 
handler_add, handler_sub, 
handler_push...   
Opcodes from a custom  
instruction set. 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
Initialization 
Fetch 
Decode 
RVA à RVA + process base 
address and other tasks. 
Instructions are stored in 
an  
encrypted format.  
DEF"CON"CHINA"1.0"(2019)"
15"
opcode 1 
opcode 2 
opcode 3 
opcode 4 
opcode 7 
opcode 5 
opcode 6 
handler 1 
handler 2 
handler 3 
handler 4 
handler 7 
handler 5 
handler 6 
function pointer 1 
function pointer 2 
function pointer 3 
function pointer 4 
function pointer 7 
function pointer 5 
function pointer 6 
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
function pointer table 
(likely encrypted) 
encr_1 
encr_n 
encr_2 
encr_3 
encr_5 
encr_4 
... 
1 
2 
3 
4 
5 
n-1 
n 
vm_add 
vm_n 
vm_sub 
vm_xor 
vm_push 
vm_pop 
... 
decrypted 
instruction
s 
encrypted 
instruction
s 
indexes 
recovering and 
decrypting funcions 
DEF"CON"CHINA"1.0"(2019)"
16"
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
ü  Is it easy to reverse virtualized and packed code? Certainly, it is not. 
The number of challenges might be huge J 
ü  Remember: obfuscating is transforming a code from A to B by using 
any tricks (including virtualization).  
ü  It is not so easy to identify whether the program is virtualized or 
not.  
ü  Handlers, which are independent of one each other, usually set up:  
ü  registers 
ü  a encryption key 
ü  memory  
ALEXANDRE"BORGES"–"MALWARE"AND"SECURITY"RESEARCHER"
DEF"CON"CHINA"1.0"(2019)"
17"
ü  There is usually one handler by instruction type. 
ü  These handlers are “started” by the VM dispatcher.  
ü  Instructions’ operands are encrypted using keys (initializing code) 
provided by handlers.  
ü  Sometimes, keys have 4 bytes and are xor’ed with operands. J 
ü  Prologues and epilogues from each function could be not 