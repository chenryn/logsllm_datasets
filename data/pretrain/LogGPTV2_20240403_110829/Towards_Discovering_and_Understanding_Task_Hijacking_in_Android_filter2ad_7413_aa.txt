title:Towards Discovering and Understanding Task Hijacking in Android
author:Chuangang Ren and
Yulong Zhang and
Hui Xue and
Tao Wei and
Peng Liu
Towards Discovering and Understanding Task 
Hijacking in Android
Chuangang Ren, The Pennsylvania State University; Yulong Zhang, Hui Xue, 
and Tao Wei, FireEye, Inc.; Peng Liu, The Pennsylvania State University
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/ren-chuangang
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXTowards Discovering and Understanding Task Hijacking in Android
Chuangang Ren1, Yulong Zhang2, Hui Xue2, Tao Wei2 and Peng Liu1
1Pennsylvania State University, State College
2Fireeye, Inc.
Abstract
Android multitasking provides rich features to enhance
user experience and offers great ﬂexibility for app de-
velopers to promote app personalization. However, the
security implication of Android multitasking remains
under-investigated. With a systematic study of the com-
plex tasks dynamics, we ﬁnd design ﬂaws of Android
multitasking which make all recent versions of An-
droid vulnerable to task hijacking attacks. We demon-
strate proof-of-concept examples utilizing the task hi-
jacking attack surface to implement UI spooﬁng, denial-
of-service and user monitoring attacks. Attackers may
steal login credentials, implement ransomware and spy
on user’s activities. We have collected and analyzed over
6.8 million apps from various Android markets. Our
analysis shows that the task hijacking risk is prevalent.
Since many apps depend on the current multitasking de-
sign, defeating task hijacking is not easy. We have noti-
ﬁed the Android team about these issues and we discuss
possible mitigation techniques in this paper.
1
Introduction
In the PC world, computer multitasking means multiple
processes are running at the same period of time.
In
Android systems, however, multitasking is a unique and
very different concept, as deﬁned in Android documenta-
tion: “A task is a collection of activities that users interact
with when performing a certain job” [1]. In other words,
a task contains activities [4] (UI components) that may
belong to multiple apps, and each app can run in one or
multiple processes. The unique design of Android multi-
tasking helps users to organize the user sessions through
tasks and provides rich features such as the handy ap-
plication switching, background app state maintenance,
smooth task history navigation using the “back” button,
etc. By further exposing task control to app developers,
Android tasks have substantially enhanced user experi-
ence of the system and promoted personalized features
for app design.
Despite the merits, we ﬁnd that the Android task man-
agement mechanism is plagued by severe security risks.
When abused, these convenient multitasking features can
backﬁre and trigger a wide spectrum of task hijacking at-
tacks. For instance, whenever the user launches an app,
the attacker can condition the system to display to the
user a spoofed UI under attacker’s control instead of the
real UI from the original app, without user’s awareness.
All apps on the user’s device are vulnerable, including
the privileged system apps. In another attack, the mal-
ware can be crafted as one type of ransomware, which
can effectively “lock” the tasks that any apps belong to
on the device (including system apps or packages like
“Settings” or “Package Installer”), i.e.
restricting user
access to the app UIs and thus disabling the functionality
of the target apps; and there is no easy way for a normal
user to remove the ransomware from the system. More-
over, Android multitasking features can also be abused
to create a number of other attacks, such as phishing and
spyware. These attacks can lead to real harms, such as
sensitive information stolen, denial-of-service of the de-
vice, and user privacy infringement, etc.
The Android multitasking mechanism and the under-
lying feature provider,
the Activity Manager Service
(AMS), haven’t been thoroughly studied before. In this
paper, we take the ﬁrst step to systematically investi-
gate the security implications behind Android multitask-
ing design and the AMS. At the heart of the problem,
although the Android security model renders different
apps sandboxed and isolated from one another, Android
allows the UI components (i.e., activities) from differ-
ent apps to co-reside in the same task. Given the com-
plexity of task dynamics, as well as the vagaries of addi-
tional task controls available to developers, the attacker
can play tricky maneuvers to let malware reside side by
side with the victim apps in the same task and hijack the
user sessions of the victim apps. We call this task hijack-
USENIX Association  
24th USENIX Security Symposium  945
Attacks
Types
Spooﬁng
Denial-of-service
Consequences
Sensitive info stolen
Restriction of use access
to apps on device
Vulnerable
system & apps
all; all
all; all
Monitoring
User privacy infringement
Android 5.0.x; all
Table 1: Types of task hijacking attacks presented in this paper
(system versions considered - Android 3.x, 4.x, 5.0.x).
ing.
Given the security threats, it becomes important to
fully study Android multitasking behaviors in a system-
atic way. We approach this topic by projecting the task
behaviors into a state transition model and systematically
study the security hazards originated from the discrep-
ancies between the design assumptions and implementa-
tions of Android tasks. We ﬁnd that there is a plethora
of opportunities of task hijacking exploitable to create a
wide spectrum of attacks. To showcase a subset of the
attack scenarios and their consequences, we implement
and present a set of proof-of-concept attacks as shown in
Table 1.
We do vulnerability assessment to the task hijacking
threats and discover that all recent Android versions, in-
cluding Android 5, can be affected by these threats, and
all apps (including all privileged system apps) are vul-
nerable to most of our proof-of-concept attacks on a vul-
nerable system. By investigating the employment of task
control features by app developers based on 6.8 million
apps in various Android markets, we ﬁnd that despite the
serious security risks, the “security-sensitive” task con-
trol features are popular with developers and users. We
have reported our ﬁndings to the Android security team,
who responded to take a serious look into the issue. We
summarize our contributions below:
• To the best of our knowledge, we are the ﬁrst to sys-
tematically study the security implications of An-
droid multitasking and the Activity Manager Ser-
vice design in depth.
• We discover a wide open attack surface in Android
multitasking design that poses severe threats to the
security of Android system and applications.
• Base on our vulnerability analysis over 6.8 million
apps, we ﬁnd that this problem is prevalent and can
lead to a variety of serious security consequences.
• We provide mitigation suggestions towards a more
secure Android multitasking sub-system.
2 Background
Android Application Sandbox: The Android security
model treats third-party apps as untrusted and isolates
them from one another. The underlying Linux kernel en-
forces the Linux-user based protection and process iso-
lation, building a sandbox for each app. By default, the
components of one app run in the same Linux process
with an unique UID. Components from different apps
run in separate processes. One exception is that differ-
ent apps can run in one process only if they are from the
same developer (same public key certiﬁcate), and the de-
veloper explicitly speciﬁes the same process in the man-
ifest ﬁle. The Linux sandbox provides the foundation for
app security in Android. In addition, Android provides a
permission model [12, 19] to extend app privileges based
on user agreement, and offers an inter-component com-
munication scheme guarded by permissions for inter-app
communication.
Activity: Activity is a type of app component. An ac-
tivity instance provides a graphic UI on screen. An app
typically has more than one activities for different user
interactions such as dialing phone numbers and reading
a contact list. All activities must be deﬁned in an app’s
manifest ﬁle.
Intent:
To cross the process boundaries and enable
communication between app components, Android pro-
vides an inter-component communication (ICC) scheme
supported by an efﬁcient underlying IPC mechanism
called binder. To perform ICC with other components,
an component use intent, an abstract description of the
operations to be performed. An intent object is the mes-
sage carrier object used to request an action from another
component, e.g., starting an activity instance by calling
startActivity() function. Intent comes in two ﬂa-
vors. Explicit intent speciﬁes the component to start ex-
plicitly by name. Implicit intent instead encapsulates a
general type of action, category or data for a component
to take. The system will launch a component “capable”
of handling this intent. If more than one target activi-
ties exist in the system, the user is prompted to choose a
preferred one.
Activity Manager Service (AMS): AMS is an Android
system service that supervises all the activity instances
running in the system and controls their life cycles (cre-
ation, pause, resume, and destroy). The interaction
and communication protocols between activities and the
AMS are implemented by the Android framework code,
which is transparent to app developers, leaving devel-
opers focusing on the app functionality. While Win-
dow Manager Service (WMS) manages all windows in
the system and dispatches user inputs from the windows,
AMS organizes all the activities in the system into tasks,
and is responsible for managing the tasks and support-
ing the multitasking features as will be described in Sec-
tion 3.
946  24th USENIX Security Symposium 
USENIX Association
2
In addition, AMS is in charge of supervising ser-
vice components, intent routing, broadcasting, content
providers accesses, app process management, etc., mak-
ing itself one of the most critical system services in the
Android system.
T1: 
(
S0 
Foreground 
Home 
Launcher Task 
s s e 
0
start
,
,
,
1
newtask
)
T2: 
(
,
s s e 
1
start
,
,
2
default
)
S1 
Foreground 
Home 
A 
Home 
S2 
Foreground 
B 
A 
Launcher Task  App Task 
Launcher Task  App Task 
3 Android Tasks State Transition Model
T4: 
( ,
s s e 
1
back
,
,
0
default
)
T3: 
(
s s e 
2
back
,
,
,
1
default
)
3.1 Task and Back Stack
In Android, a task [1] is a collection of activities that
users have visited in a particular job. The activities in a
task are kept in a stack, namely back stack, ordered by
the time the activities are visited, such that clicking the
“back” button would navigate the user back to the most
recent activity in the current task. The activities in the
back stack may be from the same or different apps.
The activity displayed on the screen is a foreground
activity (on the top of the back stack) and the task as-
sociated with it is a foreground task. Therefore, there is
only one foreground task at a time and all other tasks are
background tasks. When switched to the background,
all activities in a task stop, and remain intact in the back
stack of the task, such that when the users return they can
pick up from where they left off. This is the fundamental
feature that Android multitasking offers to users.
3.2 A Tasks State Transition Model
The status of tasks in a system keeps changing as a re-
sult of user interaction or app program behaviors. To
understand the complex task dynamics and its behind se-
curity implications, we view the task transitions through
time as a state transition model. The model is described
by (S,E,Λ,→), where S denotes a set of task states; E
and Λ are sets of events and conditions respectively; and
→ indicates a set of feasible transactions allowed by the
system under proper events and conditions.
1. Task state (s ∈ S): represents the state of all tasks
(speciﬁcally, the back stacks) in the system and their
foreground/background statuses.
In other words,
the tasks in the system remain in one state i f f the
activity entries and their orders in the back stacks
stay the same, and the foreground task remains to
be the same task.
2. Event (e ∈ E): denotes the event(s) it takes to
trigger the state transition, for example, pressing
the “back” button or calling startActivity()
function.
3. Condition (λ ∈ Λ): the prerequisites or conﬁgura-
tions (usually default) that enable a state transition
under certain events. We denote λ de f ault as the sys-
tem default conditions in this paper.
Figure 1: A simple task state transition example.
4. Transition (→): stands for a feasible state transi-
tion. Not all task transitions are feasible, e.g., the
order of activities in back stack cannot be changed
arbitrarily (only push and pop are viable operations
over the stack). A viable transaction is also repre-
sented as s1 → s2, or (s1,s2,e,λ ), where s1,s2 ∈ S.
3.3 A Task State Transition Example
Given the state transition model, we depict a simple task
state transition example in Figure 1. The ﬁgure shows
three task states, and the state transitions reﬂect the pro-
cess in which the user ﬁrst launches an app from the
home screen (s0 → s1), visits an additional activity UI
in the app (s1 → s2) and returns to the home screen by
pressing the “back” button twice (s2 → s1 → s0).
In each task state, we show all existing tasks and their
back stacks. For example, s0 is a task state in which no
task, except the launcher task, is running in the system.
The launcher task has only one activity in its back stack -
the home screen from which users can launch other apps.
In (s0,s1,estart ,λ newtask), a new app task is created and
brought to the foreground in the resulting state s1. estart
represents the event that startActivity() is called
by the home activity in the launcher task. This event
could happen when the user clicks the app’s icon on the
home screen. λ newtask speciﬁes a special condition, i.e.,
the FLAG_ACTIVITY_NEW_TASK ﬂag is set to the in-
put intent object to startActivity() function. This
ﬂag notiﬁes the AMS the intention of creating a new task
to host the new activity. Note that in this example most
state transitions are under default conditions, indicated
by λ de f ault, while here s0 → s1 is an exception because
the launcher app customizes the condition (λ newtask) for
a valid design purpose: start the app in a brand new task
when the user launches an new app. This is an example
where app developers can customize certain conﬁgurable
conditions to implement helpful app features. However,
condition like λ newtask can be abused in a task hijacking
attack, as discussed in Section 4.
Next, (s1,s2,estart ,λ de f ault) is triggered by event estart
again (this time called by activity A instead), yet un-
der the default condition. By default, AMS pushes the
new activity instance B on top of the current back stack
USENIX Association  
24th USENIX Security Symposium  947
3
Activity Manager Service
ActivityStack
ActivityStack
TaskRecord
TaskRecord
TaskRecord
TaskRecord