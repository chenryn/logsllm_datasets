---
title: Selenium
date: 20210624
author: Lyz
---
[Selenium](https://en.wikipedia.org/wiki/Selenium_%28software%29) is a portable
framework for testing web applications. It also provides a test domain-specific
language (Selenese) to write tests in a number of popular programming
languages.
# Web driver backends
Selenium can be used with many browsers, such as [Firefox](#firefox),
[Chrome](#chrome) or
[PhantomJS](#phantomjs). But first, install `selenium`:
```bash
pip install selenium
```
## Firefox
Assuming you've got firefox already installed, you need to download the
[geckodriver](https://github.com/mozilla/geckodriver/releases), unpack the tar
and add the `geckodriver` binary somewhere in your `PATH`.
```python
from selenium import webdriver
driver = webdriver.Firefox()
driver.get("https://duckduckgo.com/")
```
!!! note "If you need to get the status code of the requests use [Chrome](#chrome) instead"
    There is an issue with Firefox that doesn't support this feature.
## Chrome
We're going to use Chromium instead of Chrome. Download the
[chromedriver](https://sites.google.com/chromium.org/driver/downloads)
of the same version as your Chromium, unpack the tar and add the `chromedriver`
binary somewhere in your `PATH`.
```python
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
opts = Options()
opts.binary_location = '/usr/bin/chromium'
driver = webdriver.Chrome(options=opts)
driver.get("https://duckduckgo.com/")
```
If you don't want to see the browser, you can run it in headless mode adding the
next line when defining the `options`:
```python
opts.add_argument("--headless")
```
## [PhantomJS](https://realpython.com/headless-selenium-testing-with-python-and-phantomjs/)
!!! warning "PhantomJS is abandoned -> Don't use it"
    The [development stopped in 2018](https://github.com/ariya/phantomjs/issues/15344)
PhantomJS is a headless Webkit, in conjunction with Selenium WebDriver, it can
be used to run tests directly from the command line. Since PhantomJS eliminates
the need for a graphical browser, tests run much faster.
[Don't install phantomjs from
the official repos](https://stackoverflow.com/questions/36770303/unable-to-load-atom-find-element)
as it's not a working release -.-. `npm install -g phantomjs` didn't work
either. I had to download the tar from the [downloads
page](https://phantomjs.org/download.html), which didn't work either. The
project is [abandoned](https://github.com/ariya/phantomjs/issues/15344), so
don't use this.
# Usage
Assuming that you've got a configured `driver`, to get the url you're in after
javascript has done it's magic use the `driver.current_url` method. To return
the HTML of the page use `driver.page_source`.
## Open a URL
```python
driver.get("https://duckduckgo.com/")
```
## Get page source
```python
driver.page_source
```
## Get current url
```python
driver.current_url
```
## [Click on element](https://towardsdatascience.com/using-python-and-selenium-to-automate-filling-forms-and-mouse-clicks-f87c74ed5c0f)
Once you've opened the page you want to interact with `driver.get()`, you need
to get the Xpath of the element to click on. You can do that by using your
browser inspector, to select the element, and once on the code if you right
click there is a "Copy XPath"
Once that is done you should have something like this when you paste it down.
```python
//*[@id=”react-root”]/section/main/article/div[2]/div[2]/p/a
```
Similarly it is the same process for the input fields for username, password,
and login button.
We can go ahead and do that on the current page. We can store these xpaths as
strings in our code to make it readable.
We should have three xpaths from this page and one from the initial login.
```python
first_login = '//*[@id=”react-root”]/section/main/article/div[2]/div[2]/p/a'
username_input = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[2]/div/label/input'
password_input = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[3]/div/label/input'
login_submit = '//*[@id="react-root"]/section/main/div/article/div/div[1]/div/form/div[4]/button/div'
```
Now that we have the xpaths defined we can now tell Selenium webdriver to click
and send some keys over for the input fields.
```python
from selenium.webdriver.common.by import By
driver.find_element(By.XPATH, first_login).click()
driver.find_element(By.XPATH, username_input).send_keys("username")
driver.find_element(By.XPATH, password_input).send_keys("password")
driver.find_element(By.XPATH, login_submit).click()
```
!!! note
    Many pages suggest to use methods like `find_element_by_name`,
    `find_element_by_xpath` or `find_element_by_id`. These [are deprecated now](https://stackoverflow.com/questions/74023553/attributeerror-webdriver-object-has-no-attribute-find-elements-by-xpath-in).
    You should use `find_element(By.` instead. So, instead of:
    ```python
    driver.find_element_by_xpath("your_xpath")
    ```
    It should be now:
    ```python
    driver.find_element(By.XPATH, "your_xpath")
    ```
    Where `By` [is
    imported](https://stackoverflow.com/questions/44629970/python-selenium-webdriver-name-by-not-defined)
    with `from selenium.webdriver.common.by import By`.
### Solve element isn't clickable in headless mode
There are many things you can try to fix this issue. Being the first to configure the `driver` to use the full screen. Assuming you're using the [undetectedchromedriver](#use-undetected-chromedriver):
```python
import undetected_chromedriver.v2 as uc
options = uc.ChromeOptions()
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--no-sandbox")
options.add_argument("--headless")
options.add_argument("--start-maximized")
options.add_argument("--window-size=1920,1080")
driver = uc.Chrome(options=options)
```
If that doesn't solve the issue use the next function:
```python
def click(driver: uc.Chrome, xpath: str, mode: Optional[str] = None) -> None:
    """Click the element marked by the XPATH.
    Args:
        driver: Object to interact with selenium.
        xpath: Identifier of the element to click.
        mode: Type of click. It needs to be one of [None, position, wait]
    The different ways to click are:
    * None: The normal click of the driver.
    * wait: Wait until the element is clickable and then click it.
    * position: Deduce the position of the element and then click it with a javascript script.
    """
    if mode is None:
       driver.find_element(By.XPATH, xpath).click() 
    elif mode == 'wait':
        # https://stackoverflow.com/questions/59808158/element-isnt-clickable-in-headless-mode
        WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, xpath))
        ).click()
    elif mode == 'position':
        # https://stackoverflow.com/questions/16807258/selenium-click-at-certain-position
        element = driver.find_element(By.XPATH, xpath)
        driver.execute_script("arguments[0].click();", element)
```
## Close the browser
```python
driver.close()
```
## Change browser configuration
You can pass `options` to the initialization of the chromedriver to tweak how
does the browser behave. To get a list of the actual `prefs` you can go to
`chrome://prefs-internals`, there you can get the code you need to tweak.
### Disable loading of images
```python
options = ChromeOptions()
options.add_experimental_option(
    "prefs",
    {
        "profile.default_content_setting_values.images": 2,
        "profile.default_content_setting_values.cookies": 2,
    },
)
```
### Disable site cookies
```python
options = ChromeOptions()
options.add_experimental_option(
    "prefs",
    {
        "profile.default_content_setting_values.cookies": 2,
    },
)
```
## Bypass Selenium detectors
Sometimes web servers react differently if they notice that you're using
selenium. Browsers can be detected through different ways and some commonly used
mechanisms are as follows:
* Implementing captcha / recaptcha to detect the automatic bots.
* Non-human behaviour (browsing too fast, not scrolling to the visible elements,
    ...)
* Using an IP that's flagged as suspicious (VPN, VPS, Tor...)
* Detecting the term HeadlessChrome within headless Chrome UserAgent
* Using Bot Management service from [Distil
    Networks](http://www.distilnetworks.com/),
    [Akamai](https://www.akamai.com/us/en/products/security/bot-manager.jsp),
    [Datadome](https://datadome.co/product/).
They do it through different mechanisms:
* [Use undetected-chromedriver](#use-undetected-chromedriver)
* [Use Selenium stealth](#use-selenium-stealth)
* [Rotate the user agent](#rotate-the-user-agent)
* [Changing browser properties](#changing-browser-properties)
* [Predefined Javascript variables](#predefined-javascript-variables)
* [Don't use selenium](#dont-use-selenium)
If you've already been detected, you might get blocked for a plethora of other