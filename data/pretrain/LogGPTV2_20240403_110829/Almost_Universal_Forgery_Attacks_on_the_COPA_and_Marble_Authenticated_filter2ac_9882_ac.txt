, C (µ)
, C (µ)
(ω)
1
1
1
1
1
1
1
Figure 2: Message encryption and tag generation of
Marble
2abn(cid:0)1 ∗ 33 ∗ L in Marble v1.0/1.2, and is 2abn(cid:0)1 ∗ 32 ∗ L
in Marble v1.1; and (3) when there is no associated data,
Marble v1.0/1.1 simply sets τ = 0 (but an empty message
is not allowed), while Marble v1.2 processes a padded block
of associated data.
3.
(ALMOST) UNIVERSAL FORGERY AT-
TACKS ON THE BASIC CASES OF COPA
AND AES-COPA
In this section, we ﬁrst present almost universal forgery
attacks on the basic case of COPA (that processes messages
of a multiple of the block size long) under variable associated
data, then present an almost universal forgery attack on the
basic case of COPA under constant (or no) associated data,
and describe their applications to the basic case of AES-
COPA (v1/2); at last, we brief a more eﬃcient attack on
COPA and AES-COPA under constant (or no) associated
data, suggested by an anonymous reviewer. Note that the
distinction between the two versions of AES-COPA does not
make much sense in these attacks.
3.1 (Almost) Universal Forgery Attacks on the
Basic Case of COPA under Variable Asso-
ciated Data
We ﬁrst describe our attack idea at a high level, then show
how to recover the secret parameter L in a more advanta-
geous way than exhaustive key search, next describe three
ways to make an almost universal forgery once L is recov-
ered, and more importantly we apply them to AES-COPA
(v1/2) in the nonce-respecting scenario.
3.1.1 Attack Idea
Each of the attacks consist of two phases: recovering the
secret parameter L, followed by a forgery if L is recovered,
while the attacks share the same phase of recovering L but
use diﬀerent ways for a forgery.
E1⊕E2E3AD132∗LE1⊕E2E3⊕AD22∗32∗LS1S2············τE1⊕E2E3⊕ADabn−12abn−2∗32∗LE1⊕E2E3⊕ADabn2abn−1∗33∗LE1E2E3Const0LConst1Const2InitializationProcessingassociateddatadenotestheTRANSoperationE1⊕E2E3⊕M12∗L3∗LC1E1⊕E2E3⊕M222∗L2∗3∗LC2E1⊕E2E3⊕Lmbni=1Mi2mbn∗7∗L2mbn−1∗3∗7∗LTS1τE1⊕E2E3⊕Mmbn2mbn∗L2mbn−1∗3∗LCmbn·········EncryptingmessageTaggenerationS2···S1S2S1S2793ADabn, M1, M2,··· , Mmbn, 2mbn ∗ 3 ∗ L ⊕ 2mbn(cid:0)1 ∗
32 ∗ L ⊕⊕
i=1 Mi), and obtain its ciphertext eC =
(eC1, eC2,··· , eCmbn, eCmbn+1).
2. The ciphertext for (AD, M ) is C = (eC1, eC2,··· , eCmbn),
and the tag for (AD, M ) is eCmbn+1 ⊕ 2mbn+1 ∗ L ⊕
mbn
2mbn(cid:0)1 ∗ 7 ∗ L.
The third way is based on modifying both message and
associated data, which is a combination of the ﬁrst two ways,
and can make a forgery under diﬀerent associated data and
diﬀerent messages, as follows.
1. Query the COPA encryption and tag generation oracle
with the (associated data of (abn+2) blocks long, mes-
L ⊕ 2abn(cid:0)1 ∗ 33 ∗ L, ADabn ⊕ 2abn(cid:0)1 ∗ 34 ∗ L ⊕ 2abn+1 ∗
34 ∗ L, M1, M2,··· , Mmbn, 2mbn ∗ 3 ∗ L ⊕ 2mbn(cid:0)1 ∗
sage of (mbn + 1) n-bit blocks long) pair (gAD,fM ) =
(AD1, AD2,··· , ADabn(cid:0)1, gADabn,gADabn ⊕ 2abn ∗ 33 ∗
32 ∗ L ⊕⊕
i=1 Mi), and obtain its ciphertext eC =
(eC1, eC2,··· , eCmbn, eCmbn+1).
2. The ciphertext for (AD, M ) is C = (eC1, eC2,··· , eCmbn),
and the tag for (AD, M ) is eCmbn+1 ⊕ 2mbn+1 ∗ L ⊕
mbn
2mbn(cid:0)1 ∗ 7 ∗ L.
The correctness of the three ways can be easily veriﬁed.
Particularly, when n = 128 and σ = φ = 64, each universal
forgery attack that includes the phase of recovering L re-
quires about 265 encryption queries, a memory of about 268
bytes, and has a time complexity of 264 memory accesses
and a success probability of about 63%.
(Here, typically
as suggested in [9, 20], encrypting chosen messages is as-
sociated with the data complexity of an attack and is not
counted as part of the time complexity of the attack. The
same statement applies to subsequent attacks, although we
do not make any further explicit statements. However, if
one would treat the time complexity for encrypting chosen
messages as part of the time complexity of the attack, the
resulting time complexity would be about 265 × 5 ≈ 267.4
block cipher encryptions.)
3.1.4 An Application to AES-COPA in the Nonce-
Respecting Scenario
Diﬀerent from COPA, AES-COPA (v1/2) has an addi-
tional (public) input parameter called nonce, which has a
constant length of 128 bits.
It is appended to associated
data (if any), and then the resulting value is treated as as-
sociated data in COPA. As a consequence, when applying
the state recovery attack of Section 3.1.2 to AES-COPA, we
should obtain associated data satisfying Steps 1 and 2; this
can be easily done, for example:
• In Step 1, we choose (associated data of one 128-bit
block long, nonce of one 128-bit block long) pairs (AD,
N (i)), where N (i) = AD(i)
is from Section
3.1.2);
1 , (and AD(i)
1
• In Step 2, we choose the (associated data of less than
128 bits long, nonce of one 128-bit block long) pairs
such that the padded (associated data, nonce) pairs
are (AD, X (j)), where X (j) = dAD
1 , (and dAD
(j)
1
is
(j)
from Section 3.1.2);
Figure 3: State recovery attack on COPA under
variable associated data
3.1.3 Making an (Almost) Universal Forgery
If the secret parameter L is recovered by the above state
recovery attack, we have three ways to make a universal
forgery attack on COPA with a single query at a 100%
success probability. Below we assume a target (associated
data of abn n-bit blocks long, message of mbn n-bit blocks
long) pair (AD, M ) = (AD1, AD2,··· , ADabn, M1, M2,··· ,
Mmbn), where abn > 0 and mbn ≥ 0.
One way is similar to Fuhr et al.’s universal forgery at-
tack [10] on Marble v1.1, which is based on modifying only
associated data and can make a forgery on the same message
under diﬀerent associated data. Its main idea is to insert two
additional blocks of associate data and cancel their outputs
immediately after the ﬁrst layer of block cipher encryptions,
due to the XOR sum feature of the processing associated
data phase. It works as follows.
L, ADabn⊕2abn(cid:0)1∗34∗L⊕2abn+1∗34∗L, M1, M2,··· ,
1. Query the COPA encryption and tag generation ora-
cle with the (associated data of (abn + 2) blocks long,
the same message) pair (gAD, M ) = (AD1, AD2,··· ,
ADabn(cid:0)1,gADabn,gADabn ⊕ 2abn ∗ 33 ∗ L ⊕ 2abn(cid:0)1 ∗ 33 ∗
Mmbn), where gADabn is an arbitrary block. Obtain
its ciphertext and tag, denoted respectively by eC =
(eC1, eC2, ··· , eCmbn) and eT .
2. The ciphertext for (AD, M ) is C = (eC1, eC2,··· , eCmbn),
and the tag for (AD, M ) is eT .
The second way is based on modifying only message, and
can make a forgery on the same associated data under diﬀer-
ent messages. Its main idea is to append an additional block
of message with a particular value and deduce the correct
tag from the corresponding ciphertext block, due to the fact
that the tag generation phase has the same internal struc-
ture as the two block cipher encryptions after a message
block. It works as follows.
1. Query the COPA encryption and tag generation oracle
with the (the same associated data, message of (mbn+
1) n-bit blocks long) pair (AD,fM ) = (AD1, AD2,··· ,
⊕AD(i)134∗LEKEK⊕M13∗L⊕EK⊕C(i)12∗LEK⊕M132∗L⊕EK⊕T(i)7∗L⊕EK35∗LdAD(j)1EK⊕M13∗L⊕EK⊕bC(j)12∗LEK⊕M132∗L⊕EK⊕bT(j)7∗LLL794• For instance, a value of AD can be (1,··· , 1, 0) in bi-
nary form, which can guarantee that the nonces in
Step 2 before padding are diﬀerent (i.e., the rightmost
128 bits after removing the padded one and zero (if
any) bits from the right-hand side of (AD, X (j)) =
((1,··· , 1, 0)||(j × 2
n
2 )), and the leftmost remaining
bits are chosen associated data).
Then, the ﬁrst blocks for all the (2σ + 2φ − 1) (padded)
(associated data, nonce) pairs are identical, and the ﬁrst
block cipher encryption operations produce the same out-
put, and we only need to modify the above state recovery
attack slightly. As a result, the nonces used are diﬀerent
one another, and the state recovery attack works in the
nonce-respecting scenario. Of course, it can also work in
the nonce-misuse scenario.
For AES-COPA (v1/2), when we set σ = φ to be slightly
smaller than 62 extremely, the attack requires slightly less
than 263 queries with the total (associated data, message)
pairs having a length slightly less than 264 blocks (which is
the maximum number of data blocks that AES-COPA can
process with a single key), and a memory of about 262×16 =
266 bytes, and has a time complexity of about 262 memory
accesses and a success probability of about 6%. (For a longer
(associated data, nonce, message) triple, we need to reduce
the values of σ and φ accordingly.)
Because of the constraint on the maximum number of data
blocks that can be processed with a single key, the success
probability 6% is not very high, but it is not negligible even
in reality and it still represents a semi-practical security con-
cern, considering particularly that COPA was proposed for
GPGPU-like parallel architectures.
3.2 (Almost) Universal Forgery Attack on the
Basic Case of COPA under Constant As-
sociated Data
There are real situations that only allow for constant as-
sociated data, for example, sending some ﬁles with the same
public header, where the header is used as associated data.
Thus, the above attacks are not applicable in such situations.
In this subsection, we show how to recover the secret pa-
rameter L in the basic case of COPA under constant as-
sociated data in a more advantageous way than exhaustive
key search, then describe a way to make an almost univer-
sal forgery after L is recovered, and ﬁnally brief its appli-
cation to AES-COPA (v1/2) in the nonce-misuse scenario.
We start with our attack idea.
3.2.1 Attack Idea
The attack also consists of two phases: recovering the
secret parameter L, followed by a forgery if L is recovered.
Note that associated data is ﬁxed here.
Diﬀerent from the idea used in Section 3.1, a novel idea is
used here to recover L. First, we choose a number of two-
block messages, and then from these messages we select a
certain small number of messages whose second ciphertext
blocks are identical, like ﬁnding a multi-collision [15, 23] in
hash function cryptanalysis. Next, we choose a number of
three-block messages with the ﬁrst two blocks ﬁxed to one of
the messages with the second ciphertext blocks being iden-
tical, which means an identical internal state S immediately
after the second block. At last, we recover L by looking for
a general collision between the process of the third blocks
of the three-block messages and the tag generation process
of the two-block messages with the second ciphertext blocks
being identical; this general collision is diﬀerent in nature
from the general one used in Section 3.1.
To make a forgery on a message, we query with the mes-
sage obtained by modifying the target message so that the
pair of messages make a general collision similar to the one in
the phase of recovering L. Note that here we cannot use the
forgery ways based on modifying associated data and mod-
ifying associated data and message, since associated data is
constant.
3.2.2 Recovering the Secret Parameter L
The procedure for recovering the secret parameter L is as
follows, which is illustrated in Fig. 4. Since the same associ-
ated data is used, we will omit it in the attack description.
1. Choose uniformly at random 2θ messages M (i) = (M (i)
1 ,
M (i)
2 ) of two n-bit blocks long (a speciﬁc value of θ
will be given below, and i = 1, 2,··· , 2θ). Query the
COPA encryption and tag generation oracle, and ob-
tain all the ciphertexts and tags for the 2θ messages;
we denote by C (i) = (C (i)
2 ) and T (i) the cipher-
text and tag for message M (i), respectively.
1 , C (i)
2. Select a tuple of δ messages (M (i1), M (i2),··· , M (iδ ))
such that
C (i1)
2 = C (i2)
2 = ··· = C (iδ )
2
.
(1)
(A speciﬁc value of δ will be given below.) This can
be done eﬃciently by storing (M (i), C (i), T (i)) into a
table indexed by C (i)
2 . Go to Step 1 if there does not
exist such a δ-tuple.
3. Choose two n-bit constants α and β such that
α∗(2∗32∗L⊕22∗3∗L) = β∗(23∗L⊕2∗7∗L).(2)
1
2
l = M (i1)
, M (i1)
Observe that the secret parameter L is not required
when solving Eq. (2) for α and β, because it cancels
out.
l
(M (i1)
3 ). Query the COPA encryption and
tag generation oracle, and obtain all the ciphertexts
1 ,
3 ) of three n-bit blocks long (a speciﬁc value
of ϕ will be given below, and j = 1, 2,··· , 2ϕ), such
4. Choose uniformly at random 2ϕ messagescM (j) = (cM (j)
cM (j)
2 ,cM (j)
that cM (j)
for 1 ≤ l ≤ 2; that is, cM (j) =
,cM (j)
and tags for the 2ϕ messages; we denote by bC (j) =
2 , bC (j)
3 ) and bT (j) the ciphertext and tag for
(bC (j)