of keystream is output accordingly, i.e.,
zl =M(R1,1, R1,6, R1,15) ⊕ M(R2,3, R2,8, R2,14)⊕
M(R3,4, R4,15, R3,19) ⊕ R1,11 ⊕ R2,1 ⊕ R3,0
is generated.
3) R4 is clocked.
A5-GMR-1 is operated in two modes, initialization and
generation mode. Running the cipher in former mode in-
cludes setting the initial state of the cipher, which is done
in the following way:
1) All four registers are set to zero.
2) A 64-bit initialization value I is computed by xor’ing
the 19-bit frame-number N and 64-bit key K in a
certain way. However, the speciﬁc mapping is not
relevant in the remainder.
3) I is clocked into all four registers, i.e., R1 is clocked
and one bit of I is xor’ed with the feedback-bit, R2 is
clocked and xor’ed with the same bit of I, etc. While
doing this, no irregular clocking takes place, i.e., the
taps of R4 are not evaluated.
4) The least-signiﬁcant bits of all four registers are set to
1, i.e., R1,0 = R2,0 = R3,0 = R4,0 = 1.
After all registers are initialized, irregular clocking is acti-
vated and the cipher is clocked for 250 times. The resulting
output bits are discarded.
Now the cipher is switched into generation mode and
clocked for 2 · m times, generating one bit of keystream
at a time. We denote the l-th keystream-bit by z(N )
, where
250 ≤ l ≤ 250 + 2 · m is the number of irregular clockings
and N the frame-number that was used for initialization.
l
The number of keystream-bits depends on the type of
channel for which data is encrypted or decrypted, see
Tab. III. Note that the encoded blocks on channels TCH6,
FACCH6, TCH9, and FACCH9 are always multiplexed with
ten bits of the SACCH channel. After 2 · m bits have been
generated, the cipher is re-initialized with the next frame-
number.
Depending on the direction bit, either the ﬁrst or the
second half of the keystream is used. Here, we assume that
133
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
Channel
TCH3/SDCCH
TCH6/FACCH6+SACCH
TCH9/FACCH9+SACCH
n: size of
raw data
80/84 bits
144/188+10 bits
480/300+10 bits
m: size of
encoded data
208 bits
420+10 bits
648+10 bits
Table III
PAYLOAD SIZES IN GMR-1 [9]
only the ﬁrst3 half of each block with only m bits is used,
therefore we deﬁne z(cid:2) as the actual keystream with
z(cid:2) = (z(0)
250, . . . , z(0)
250+m, z(1)
250, . . . , z(1)
250+m, z(2)
250, . . . )2.
E. Cryptanalysis
Since A5-GMR-1 is similar to A5/2, known attacks
against that cipher [13], [17], [18] apply. We build on the
ideas of Petrovic and Fuster-Sabater [13] and present a
known-keystream attack which systematically guesses all
possible 216 initial states of R4. Knowing R4 completely
determines the clocking behavior of the cipher and allows us
to express the known keystream as binary quadratic equation
system in variables which determine the state of R1, R2, and
R3 before warm-up. Taking the ﬁxed bits in these LFSRs
as well as symmetries in the quadratic terms into account,
the equation system can be linearized by replacing quadratic
terms, thus yielding a linear equation system
A · x = z(cid:2)
(cid:3)
(cid:2)
in v variables with
21
2
18
2
v =
+
(cid:5)(cid:6)
(cid:2)
(cid:4)
(cid:2)
(cid:3)
+
(cid:3)
(cid:7)
22
2
linearized variables
+ (18 + 21 + 22)
(cid:5)(cid:6)
(cid:7)
(cid:4)
original variables
(1)
= 655
for each guess of R4. After obtaining 655 linearly indepen-
dent equations, each of these systems can be solved, yielding
a potential initialization-state for R1, R2, and R3. To test the
candidate, the registers are initialized with the guessed value
of R4 and the state candidate, then the cipher is clocked for
several times and the resulting keystream is compared with
the known keystream. If both keystreams match, we have
most likely found the correct initial state. Given the frame-
number N that was used to initialize the registers, K can
be derived efﬁciently.
The known-keystream attack can be modiﬁed in order to
obtain a time/keystream trade-off which enables a ciphertext-
only attack. The number of keystream bits required to solve
the equation system is directly dependent on the number of
unknowns. We can reduce the size of the equation system by
guessing parts of R1, R2 and R3 as well. By k1, k2, k3 we
denote the number of bits we guess for each of the respective
3The ﬁrst m bits are used on the handset’s side for decryption, on the
satellite side for encryption
134
registers, thus the number of variables is reduced to
(cid:2)
v =
(cid:3)
(cid:2)
+
18 − k1
21 − k2
22 − k3
2
2
+(18 − k1) + (21 − k2) + (22 − k3)
2
(cid:3)
(cid:2)
+
(cid:3)
On the downside,
the number of guesses increases and
becomes 216 · 2k1+k2+k3 in the worst case. However, this
makes it possible to mount a direct ciphertext-only attack
on any of the channels (see Tab. II) which exploits the facts
that encryption is applied after encoding and encoding is
linear. This attack was inspired by a work of Barkan et. al. in
2003 [23]. Given a block of raw data d(N ) of n bits which is
transmitted in the N-th frame on one of the relevant channels
in GMR-1, encoding is basically4 a matrix multiplication,
i.e.,
c(cid:2)(N ) = (d(N ) · G)
and c(N ) = c(cid:2)(N ) ⊕ z(N )
where G is called the n×m generator-matrix of the code. By
z(N ) we denote a key-frame (i.e., a block of keystream bits
to encrypt one frame of equal size) for one direction, c(cid:2)(N )
is the encoded and c(N ) the encoded and encrypted block
of m bits. A property of the encoding scheme is that there
exists a corresponding parity-check matrix H of (m−n)×m
size with
H · c(cid:2)(N ) = 0
and therefore H · c(N ) = H · z(N )
if c(cid:2)(N ) is a valid code-word (and was received without bit-
errors). In this case, we can set up an equation system in
the variables z(N )
with 250 ≤ i ≤ 250 + m by computing
the syndrome r = H · c(N ), i.e.,
i
H · z(N ) = r.
(2)
This equation system has (m − n) equations and is there-
fore underdetermined but completely independent from the
encoded plaintext. Given that v ≤ (m − n) holds due to a
proper choice of k1, k2, and k3 and combining Eq. 1 and
Eq. 2, we can set up a uniquely solvable equation system
H · (A · x) = S · x = r
where A is a m × v matrix for a particular guess of R4 (and
parts of R1, R2, R3) and S a (m−n)×v matrix. Solving the
right-hand system results in a potential initialization-state.
This can be tested by deriving a key candidate which can
then be used to generate the keystream for a different frame-
number M and test whether the following relation holds:
H · (c(M ) ⊕ z(M )) ?= 0 with N − 1 > M > N + 1.
4After encoding, a pseudo-random sequence is xor’ed with the encoded
block “[...] to randomize the number of 0s and 1s in the output bit
stream.” [24]. This process is called scrambling and not to be confused with
the subsequent encryption-step, which does basically the same. However,
since the parameters of the LFSR used to generate the scrambling-sequence
are publicly known, scrambling can be inverted easily which is why we
ignore it completely.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:23 UTC from IEEE Xplore.  Restrictions apply. 
The attack can be greatly accelerated by pre-computing and
storing all possible S matrices in advance. Even better, if S
is quadratic, we can store the LU-decompositions of all pos-
sible matrices, which reduces solving the equation systems
to a forward- and backward-substitution step. Typically, S
is not quadratic, but can be made quadratic by dropping an
appropriate selection of rows while maintaining full rank of
the matrix, i.e.,
S(cid:2) = L · U with S(cid:2) = E · S
where S(cid:2) is a v × v matrix, U is an upper triangular matrix
and L a lower triangular matrix. For each guess, we need to
pre-compute and store the tuple (L, U, E) in order to solve
S · x = r in two steps. First, we compute r(cid:2) = E · (H · c(N ))
which is then used to solve the equation system with the
LU-decomposition of S(cid:2), i.e., solve
L · r(cid:2) = y
and U · y = x.
Finally, we propose an attack against the FACCH9 chan-
nel which has some properties that we can take advantage
of: one encoded and encrypted block c(N ) has 658 bits. This
attack requires only one of these blocks, which must be
received without a single bit-error, otherwise H · c(N ) (cid:6)=
H · z(N ). The FACCH9 channel is always multiplexed with
ten bits from SACCH which can be removed, but then we
have to account5 for this when generating the A matrices.
By choosing k1 = 3, k2 = 6 and k3 = 8 the number of
variables representing the remaining unknown bits of the
LFSRs is v = 345. Attacking the demultiplexed FACCH9
channel directly by utilizing only one block of encrypted
data thus requires solving
(216 · 217)/2 = 232
equation systems on average. One of these systems has the
form
S · x = r with S = H · A,
r = H · (D · c(N ))
where D is a 648 × 658 matrix responsible for demulti-
plexing FACCH9/SACCH by removing ten bits from c, A
is a 648 × 345 matrix describing the state of the cipher
for 648 of 658 clockings, H is the 348 × 648 syndrome
matrix for this particular channel and S a slightly overde-
ﬁned 348 × 345 matrix. As stated above, pre-computations
and LU-decomposition can be used if enough memory is
available.
Evidently, there are several variants of this attack possible
on different channels, even more so when multiple frames
are used. These attacks have a lower computational com-
plexity but require more ciphertext. To justify our approach,
we argue that being able to intercept a single block with-
out errors is a more reasonable assumption than receiving
multiple consecutive blocks correctly.
5Multiplexing is done by taking 52 encoded bits from FACCH9, con-
catenating ten bits from SACCH and then appending the remaining 596
encoded bits from FACCH9. We account for this by clocking the cipher
ten times between the generation of the 52-nd and 53-rd equation.
V. SECURITY ANALYSIS OF GMR-2
To obtain the code responsible for implementing the
cipher according to the GMR-2 standard, we analyzed the
latest publically available ﬁrmware image of the Inmarsat
IsatPhone Pro, which was released in June 2010. Only
Inmarsat handsets support the GMR-2 standard at this point
and we are conﬁdent that our analysis results apply to all of
these satphones.
A. Hardware Architecture
The Inmarsat IsatPhone Pro runs on an Analog Devices
LeMans AD6900 platform. The core of the platform is an
ARM 926EJ-S CPU, which is supplemented by a Blackﬁn
DSP (see Figure 5 for a schematic overview). This archi-
tecture can be deduced from plain text strings within the
ﬁrmware image. We identiﬁed an operating system function
that returns information on the underlying hardware of the
system and this function returns the platform name as a static
string.
Both CPUs connect to the same bus interface, which is
attached to the system RAM, any external memory that
might be present as well as the shared peripherals (e.g., SIM
card, keypad, SD/MMC slots, etc.). The system is initialized
by the boot ROM code of the ARM CPU. The ARM CPU
then has the task to initialize the DSP for further operations.
B. Finding the Crypto Code
The ﬁrmware ﬁle is delivered in a special, proprietary
format. When loading it
into the update program from
Inmarsat, the program extracts6 three ﬁles, with each ﬁle
having a header of 80 bytes. After removing the header, two
resulting binary ﬁles can be ARM-disassembled by setting
the correct base address, which can be deduced from the
respective headers. The third ﬁle is seemingly used in a
6This was discovered while disassembling the Dynamic Link Libraries
(DLLs) of the update program.







