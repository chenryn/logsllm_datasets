{
AesManaged aes = null;
MemoryStream memoryStream = null;
CryptoStream cryptoStream = null;
try
{
aes = new AesManaged();
aes.Key = cryptoKey;
aes.IV = iv;
aes.KeySize = 256;
aes.Mode = CipherMode.CBC;
memoryStream = new MemoryStream();
cryptoStream = new CryptoStream(memoryStream,
aes.CreateEncryptor(), CryptoStreamMode.Write);
byte[] data = Encoding.UTF8.GetBytes(dataToEncrypt);
cryptoStream.Write(dataIn, 0, dataIn.Length);
cryptoStream.FlushFinalBlock();
// return encrypted data
return memoryStream.ToArray();
}
finally
{
if (cryptoStream != null)
cryptoStream.Close();
if (memoryStream != null)
memoryStream.Close();
if (aes != null)
aes.Clear();
}
}
public string decrypt(byte[] dataIn, byte[] cryptoKey, byte[] iv)
{
AesManaged aes = null;
MemoryStream memoryStream = null;
try
{
aes = new AesManaged();
aes.Key = cryptoKey;
aes.IV = iv;
aes.KeySize = 256;
aes.Mode = CipherMode.CBC;
memoryStream = new MemoryStream();
CryptoStream cryptoStream = new CryptoStream(memoryStream,
aes.CreateDecryptor(), CryptoStreamMode.Write);
// decrypt Data
cryptoStream.Write(dataIn, 0, dataIn.Length);
cryptoStream.FlushFinalBlock();
byte[] decryptBytes = memoryStream.ToArray();
//Dispose
if (cryptoStream != null)
cryptoStream.Dispose();
//Retval
return decryptBytes;
}
finally
{
if (memoryStream != null)
memoryStream.Dispose();
if (aes != null)
aes.Clear();
}
}
Each of the functions accept input data, a key, and an IV, all as byte arrays, and return the data resulting from
the encryption or decryption as a byte array as well.
After encryption by the encrypt() method, the resulting data can be stored using the standard file I/O APIs:
StorageFolder or IsolatedStorage, and StreamReader.
Applications may also use the standard Data Protection API (DPAPI) for data that will be stored locally. (If the
data is transmitted to a remote host, the host would not be able to decrypt it, because only the local device
knows the key.) However, there are certain cases against using it for apps requiring high levels of security,
which were outlined in the Chapter 12 section, “Data Protection API Misuse on Windows Phone.” You can find
the documentation for DPAPI at the following MSDN article: http://msdn.microsoft.com/en-
us/library/windows/apps/hh487164%28v=vs.105%29.aspx.
If you use DPAPI, we highly recommend using the optionalEntropy parameter with a secret that only the app
user knows.
Encrypting Databases
Two database types find common usage in Windows Phone applications: Windows Phone native databases and
SQLite-based databases. We cover how to apply crypto to each of these main types.
Windows Phone Local Databases
Creating encrypted local databases in a Windows Phone applications is fortunately very easy; you may simply
use the Password property in your database’s connection string:
string connectionString = "Data
Source='isostore:/ToDo.sdf';Password='myDatabasePassword'";
Developers should not, of course, hard-code the password; secure credential and key management principles
should be adhered to. Applying database crypto in this way results in the database’s being encrypted via AES-128
in CBC mode. The key used is the SHA-256 hash of the password specified in the connection string’s Password
property.
A detailed discussion of Windows Phone local databases is beyond the scope of this section, but a short
introduction appears in Chapter 12.
You can also consult MSDN’s introduction to local databases for a general example on implementing local
database storage: http://msdn.microsoft.com/en-us/library/windows/apps/hh202860%28v=vs.105%29.aspx.
The documentation at the previous URL also provides information on applying crypto to a database, as we’ve
also done in this short section (http://msdn .microsoft.com/en-
us/library/windows/apps/hh202860%28v=vs.105%29.aspx#BKMK_DatabaseSecurity).
SQLite-Based Databases
The two main options for applying crypto to databases that are SQLite in nature are SQLite’s SQLite Encryption
Extension (SEE) and SQLCipher.
Each of these options is almost as simple to use as the standard Windows Phone SQLite options, although SEE
requires some setup, including compilation of the distribution.
For general information on obtaining and using encrypted SQLite-like databases in your applications, consult
SQLCipher’s or SEE’s documentation at https://www.zetetic.net/sqlcipher/ and
https://www.sqlite.org/see/doc/trunk/www/readme.wiki.
Secure Random Number Generation
We’ve looked at how random numbers can be badly generated in some detail in Chapter 12’s section, “Insecure
Random Number Generation.” In particular, we focused on how the .NET non-cryptographically secure random
number generator—System.Random—may introduce security bugs into apps that are supposed to be secure.
In the context of mobile applications, arguably the most common use case for random number generation is in
the generation of crypto keys. In modern mobile computing, mobile apps often rely on data held in an app’s
isolated storage as being secure, and as such, recovery of this data by attackers may potentially have very serious
consequences.
System.Random is not fit for generating cryptographically secure crypto keys. This short section gives positive
examples showing how the RNGCryptoServiceProvider API can instead be used for generating crypto keys. Of
course, the same method may be used for generating random data for any other purposes.
RNGCryptoServiceProvider does not have the same problems with predictability of outputted data that
System.Random does. Fortunately, as well, using RNGCryptoServiceProvider is straightforward. Consider the
following example for generating a 256-bit crypto key:
RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
byte[] cryptoKey = new byte[32];
rng.GetBytes(cryptoKey);
// cryptoKey now holds 32 random bytes!
Although the RNGCryptoServiceProvider API is significantly slower (some benchmarks estimate around 300
times slower), in the context of mobile applications, generation of crypto keys and other random data is
generally a rare occurrence, hence the cryptographic security of the outputted data versus the speed of its
generation is a trade-off that is absolutely worth it for apps that need to be secure.
The full documentation for the RNGCryptoServiceProvider class appears on the API’s MSDN page at
http://msdn.microsoft.com/en-us/library/system
.security.cryptography.rngcryptoserviceprovider%28v=vs.110%29.aspx.
Securing Data in Memory and Wiping Memory
When you’re handling sensitive data in memory, being able to wipe the memory when it is no longer
immediately needed is sometimes desirable. Having sensitive memory secured is also desirable to lessen the
chances of memory analysis attacks from gaining access to sensitive data in a process’s memory space. An
example of such a piece of data would be a crypto key.
We advise that crypto keys be wiped from memory when they are not needed. Example scenarios for when to
wipe a crypto key include:
When the app is placed into the background
When the app’s custom screen lock is applied
When the key is not needed for the time being
In such cases, overwriting all elements of the byte array holding the crypto key is recommended. For example:
for(int i = 0; i ()
db.DeferredQuery()
db.DeferredQuery()
When developers want to execute raw queries instead of using abstraction layers to handle SQL statement
construction, SQL injection bugs occur due to direct inclusion of attacker-controlled data into queries, instead of
using parameterization for construction of the query.
For example, the following code fragment is vulnerable to SQL injection, assuming an attacker is in control of
the attackerInput string:
var db = new SQLiteConnection(Path.Combine(ApplicationData.Current.LocalFolder.
Path,
"test.db"));
[ ... ]
SQLiteCommand cmd = db.CreateCommand("select * from Stock where Symbol = '" +
attackerInput + "'");
// get all stock items with name in question
List stockList = cmd.ExecuteQuery();
In the preceding snippet, the attackerInput string is included into the raw query by concatenation, thus any
data in the attackerInput string simply becomes part of the query itself, allowing the attacker to change the
structure of the actual query.
Developers needing to construct raw queries for operations on their SQLite database should use the API’s
parameterization features. The following code snippet shows how to construct the same query as earlier,
without being vulnerable to SQL injection:
var db = new SQLiteConnection(Path.Combine(ApplicationData.Current.
LocalFolder.Path,
"test.db"));
[ ... ]
SQLiteCommand cmd = db.CreateCommand("select * from Stock where Symbol = ?",
attackerInput);
// get all stock items with name in question
List stockList = cmd.ExecuteQuery();
The emboldened "?" character instructs the CreateCommand() API to include attackerInput as a parameter to
the query, and as such, any data in attackerInput will be correctly treated as data, rather than as part of the
query syntax itself.
In general, however, we recommend that you use a data model approach, instead of constructing raw SQL
queries if possible. Sqlite-net’s github README gives a simple example of how to do this at
https://github.com/praeclarum/sqlite-net/blob/master/README.mdown. The example is also applicable to
SQLCipher, given the deliberate similarity of its API to other SQLite layers.
Implementing Secure Communications
As with any application that requires secure network communications, mobile apps should also use secure
communications channels for their network-based interactions. This section offers guidelines for secure
network communications.
Using SSL/TLS
Using SSL/TLS for all network traffic that has the potential to contain sensitive information is now standard. In
general, though, we recommend using SSL/TLS for all network communications, because interference on non-
sensitive communications can also end up having security consequences; consider as-of-yet unknown parsing
vulnerabilities, or HTML/JavaScript injection that facilitates phishing attempts, for example.
For carrying out any kind of web-based interaction, we recommend using https:// URLs, as opposed to http://
URLs, which result in traffic transmitted in unencrypted form.
When apps use WebBrowser or WebView components, pages should be loaded via https://,
webBrowser.Navigate(new Uri("https://www.myapp.co.uk", UriKind.Absolute));
and never via http://, as in this insecure example:
webBrowser.Navigate(new Uri("http://www.myapp.co.uk", UriKind.Absolute));
The same principles apply when making API requests using, for example, the WebRequest API; use SSL—as in,
string requestUri = "https://www.myapp.co.uk/webapi/getPost= + postId;
HttpWebRequest request =
(HttpWebRequest)HttpWebRequest.Create(requestUri);
[ ... ]
request.BeginGetResponse(GetPostCallback, request);
and not via the equivalent http:// URL.
SSL connections should be used for network interactions that are not HTTP-based. The following MSDN
documentation details how to enable SSL/TLS for connections being made via Windows.Networking.Sockets:
http://msdn.microsoft.com/en-us/library/windows/apps/hh780595.aspx.
Although it’s arguable that requests that do not deal with sensitive information do not need to be made via
SSL/TLS sessions, data encryption is not the only security advantage of using encrypted tunnels. Use of
SSL/TLS for non-sensitive communications should be encouraged because SSL/TLS guarantees the integrity of
data being sent and received, guarantees the identity of the remote peer, and can prevent unanticipated attacker
vectors that could occur as a result of an attacker’s being able to inject into a non-SSL/TLS’d stream (that is,
phishing attempts or exploiting a bug in a library being used by an app, either directly or indirectly).
We therefore recommend the use of SSL/TLS for all network communications made by mobile apps, especially
given that using smartphones on untrusted networks such as open Wi-Fi networks in coffee shops, bars, and in
hotels has become very common. Some standard cell phone protocols, such as General Packet Radio Service
(GPRS), also have known problems relating to forcing phones to connect to an attacker-controlled base station
(http://blog.mdsec .co.uk/2014/11/44con-2014-greedybts-hacking-adventures.html).
SSL/TLS Certificate Validation
In general, the only sensible reason for disabling certificate validation in applications is that the application is in
development, because many development environments do not have certificate authority (CA)-signed
certificates installed on their infrastructure. In production, generally no good reasons exist for having SSL/TLS
certificate validation disabled.
In Windows Phone 8, the HTTP APIs expose no documented way to disable certificate validity checks, thus
ensuring that certificate validation is enabled is not generally a concern in Windows Phone 8 apps.
Windows Phone 8.1, however, does allow certificate validation to be turned off in Windows.Web.Http.HttpClient
objects, via use of an HttpBaseProtocolFilter object. Code like the following disables certificate validation:
HttpBaseProtocolFilter filter = new HttpBaseProtocolFilter();
filter.IgnorableServerCertificateErrors.Add(ChainValidationResult.Untrusted);
filter.IgnorableServerCertificateErrors.Add(ChainValidationResult.Expired);
[ ... ]
var httpClient = new Windows.Web.Http.HttpClient(filter);
Developers preparing their applications for build and release should ensure that no HttpBaseProtocolFilter
object is being instantiated and used for disabling SSL/TLS certificate validation. Failure to ensure that
certificate validation is turned on in production builds may endanger the data of app users, thus adding such
checks to an engineer’s build checklist is highly encouraged.
Avoiding Cross-Site Scripting in WebViews and WebBrowser Components
In Chapter 12, we discussed how injection attacks into WebBrowser and WebView components could have serious
security consequences. In particular, cross-site scripting attacks by suitably positioned attackers (that is,
unencrypted Wi-Fi in coffee shops and hotels) could result in attacks such as cookie theft and phishing attacks.
Because guarding against these attacks is important for secure smartphone apps, we offer guidelines for