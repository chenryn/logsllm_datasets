322
199
431
499
316
535
285
285
364
195
A
966
471
1372
1313
793
1443
814
869
1265
529
983.50
343.10
C
5.68
5.29
5.36
4.99
5.87
5.01
5.65
5.36
7.19
4.60
5.46
C
3.43
2.17
2.86
2.55
2.39
2.36
3.21
3.22
3.17
2.86
2.79
ROP0.25
B
555
377
733
676
419
747
457
546
605
381
A
1513
798
2135
1775
1047
2026
1189
1437
1770
845
1453.50
549.60
C
8.90
8.97
8.34
6.75
7.76
7.03
8.26
8.87
10.06
7.35
8.17
ROP0.50
B
719
491
919
950
539
1003
621
713
720
554
A
2090
1085
3015
2842
1598
3259
1769
1946
2322
1361
2128.70
722.90
C
12.29
12.19
11.78
10.81
11.84
11.32
12.28
12.01
13.19
11.83
11.94
ROP0.75
B
856
589
1025
1105
642
1137
710
844
838
660
A
2734
1310
3830
3914
2341
4444
2211
2539
2810
1761
2789.40
840.60
C
16.08
14.72
14.96
14.88
17.34
15.43
15.35
15.67
15.97
15.31
15.55
ROP1.00
B
940
644
1124
1163
659
1220
803
935
924
737
A
3411
1608
4717
4727
2666
5487
2883
3268
3367
2234
3436.80
914.90
C
20.06
18.07
18.43
17.97
19.75
19.05
20.02
20.17
19.13
19.43
19.19
TABLE III: N:= number of program points (instructions), A:= total number of gadgets used across all ROP chains; B:=
number of unique gadgets used across all ROP chains; C:= average number of gadgets used per program point.
RandomFunsControlStructures Parameter Value
(if (bb 4) (bb 4))
(for (if (bb 4) (bb 4)))
(for (for (bb 4)))
(for (for (if (bb 4) (bb 4))))
(for (if (if (bb 4) (bb 4)) (if (bb 4) (bb 4))))
(if (if (if (bb 4) (bb 4)) (if (bb 4) (bb 4))) (if (bb 4) (bb 4)))
Ctrl-
ﬂow
depth
1
2
2
3
3
3
Num.
of if-
stmts
1
1
0
1
3
5
Num.
of
Loops
0
1
2
2
1
0
IV: Values
TABLE
RandomFuns
ControlStructures parameter in Tigress to generate the
72 functions for §VII-B.
the
used
for
Additional Deployability Experiments: Table III reports
several statistics collected by the rewriter during the translation
of the 10 benchmarks from the shootout suite considered in
§VII-C. In particular, the table provides for different settings
of ROPk the following kinds of information: the number of
program points (i.e., instructions) N that were obfuscated (not
affected by k), the total number A of gadgets used by the
chains from all the obfuscated functions, the number B of
unique gadgets used across all chains, and the average number
C of gadgets used per obfuscated program point.
A, B, and C increase as we add more instance of P3 with
higher k values. The increase in the number B of used unique
gadgets shall be interpreted as an indication that the rewriter
does not use a ﬁxed set of gadgets to instantiate P3 (but can
draw from multiple equivalent versions of a desired gadget
functionality, bringing diversity) and that possibly different
dead and symbolic registers get involved at different program
points. At the same time, the rewriter performs gadget reuse
across different chains: for instance, for k = 1.00 the rewriter
uses the largest number of gadgets per obfuscated instruction
(geometric mean of 19.19), but the ratio between the average
values for A and B is ∼3.75, showing that a gadget is on
average reused almost four times across all the chains.
and different combinations for the parameters control,
seed, and data_type. Table IV lists the values we used
for control; seed was from {1, 2, 3}, while data_type
was char, short, int, or long.
For the code coverage scenario we used the same sets of
parameters and altered the command in the following way:
we set Random FunsPointTest to false to disable the
secret value checking step, and RandomFunsTrace to 2 to
annotate CFG split and join points.
VM Obfuscation: To apply during our experiments one or
more layers of VM obfuscation (with or without implicit VPC
loads) to a piece of code we used Tigress with the following
parameters:
tigress --Environment=x86_64:Linux:Gcc:6.3.0
--Transform=InitOpaque --Functions=main
--Transform=InitImplicitFlow --Functions=main
--InitImplicitFlowHandlerCount=0
--InitImplicitFlowKinds=counter_int, \
counter_float,bitcopy_unrolled,bitcopy_loop
[transformations]
--out={output_file} {input_file}
Where [transformations] is obtained by adding for
each VM layer on function the following parameters:
--Transform=Virtualize
--VirtualizeDispatch={[call, switch]}
--VirtualizeImplicitFlowPC={[PCUpdate,none]}
--VirtualizeOpaqueStructs=array
--Functions={function}
Following the documentation of Tigress, we alternate the
call and switch methods for VPC dispatching across nested
virtualization layers. In our tests with S2E, however, the engine
did not seem evidently affected by the choice of a particular
dispatching method over another (including the additional
schemes supported by Tigress to this end).
15