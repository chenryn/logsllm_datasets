GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Command Execution Through Recovery
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Command Execution Through Recovery
GTVHacker
  The exploit was simple, a package with a command:
package_list_;cd tmp; cd mnt; cd diskb1; sh t.sh; .zip
/package-updater.sh -l 0 -p /tmp/mnt/diskb1/package_list_;cd /tmp;cd /mnt;cd /diskb1;sh t.sh;.zip
The command above involved a t.sh bash script (to meet filename size 
limitations) which spawned a shell over UART and telnetd.
From there we proceeded to dump the recovery file system.
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Command Execution Through Recovery
Unfortunately this exploit was patched in the 7/2011 update.
“It's not exactly what we'd call a easy jailbreak, seeing as how it requires a soldering iron, a NAND 
format procedure, and a Logitech Revue that's never even been powered on, but it looks like it is 
possible to root a Google TV box after all.” - engadget.com
That was said about 4 large pads for the Revue.
Needless to say, this was not a viable option for the public.
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
UART
● Active UART line (output only)
● After initial hack - achieved 
 root console in Linux.
● Memory dump shows 
 existence of “NBL” - an extra 
 step after Intel's initial 
 bootloader.
● Mashing escape over UART at 
 start-up brings us to a 
 “Password:” 
● Password found after 
 reversing NBL areas of memory:
console_ON
console_ON
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
UART / Bootloader
● NBL options included loading files into memory, and executing 
from internal flash or network via TFTP.
● Insecure booting features were disabled on production units.
● NBL Utilized signature and hash checks similar to the normal 
start-up mode.
Remember that exploitable recovery version?
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
UART / Bootloader
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
UART / Bootloader
Booting via TFTP allowed us to set kernel args.
boot -f net:tftp:/vmlinux_recovery.trf -c "root=/dev/ram0 console=ttyS0,115200"  
-initrd net:tftp:/initrd.trf
Booting via TFTP however kept the internal SSD ATA locked.
The good news was that when that recovery booted to a locked 
ATA, the box dropped us into a console!
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
UART / Bootloader
Exploitable Recovery:
● System boot binaries stored on flash at  /dev/Glob_Spectraa2
● ATA was locked, flash was not! Drivers just needed to be loaded.
● Replaced new recovery on flash with the old, exploitable version.
● Now we had an exploitable recovery!
● Wait for the rumored 3.2 release in late September to release exploit
● Google and Sony were slow – it was December.
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Downgrade via USB (nodev)
● Come the 3.2 release in December, we did not want to let on 
about the bootloader password being found. So, two weeks of 
intense bug finding was started.
● We found a few bugs, but not what we needed for privileged code 
execution
● However, we got to really, really know the update process...
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Downgrade via USB (nodev)
GTVHacker
● Recovery mounts USB to 
/tmp/mnt/diskb1
● Looks for package_list_*.zip
● Passes this to 
package_updater.sh
● package_updater.sh then copies 
the file to /cache
● package_updater then unzips 
build.prop, and displays to the 
user
If the update is accepted, it's copied again to /cache
I'm sure they checked to see if there was a destination file...
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Downgrade via USB (nodev)
The Sony recovery mounted ext2/3 partitions with no mount parameters 
meaning a block device on the USB could allow us to write to a device 
node as root.
GTVHacker
USB1
contains update file which fools 
the updater to think a properly 
formatted update is on the drive.
Recovery confirms that an 
update is inserted and asks the 
user if they'd like to continue.
USB2
contains update file which is a file 
system node point to 
/dev/Glob_Spectraa2
Recovery moves the FS node to 
/cache/package_list_*.zip and then 
errors leaving the file in place.
USB1
is used again now that the FS 
node is in place, we restart update
 and perform part 2 of attack.
Recovery confirms that an 
update is inserted and asks the 
user if they'd like to continue.
USB3
contains update file which contains 
files to overwrite .trfs on 
/dev/Glob_Spectraa2
The recovery version is now 
downgraded to the LCE exploitable 
version.
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Downgrade via USB (nodev)
Assuming the downgrade went 
correctly, use LCE recovery 
exploit.  
Exploit:
● Re-partitions internal SSD
● Copies /boot to a new partition.
● Edits initial /boot to include 
kexec files.
● Hijacks initial boot process to 
call kexec.
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Unsigned Kernels
● Kexec is normally built into the kernel, so we opted to build it as a 
kernel module.
● Kexec allows us to boot the system, have it kick over after in less 
than 1 second, and load our unsigned kernel.
But what about that init hash, and those RSA signatures?
GTVHacker
“kexec (kernel execution) is a mechanism of the Linux kernel that 
allows "live" booting of a new kernel "over" the currently running 
kernel. “ ~ Wikipedia
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Unsigned Kernels
● Chain of Trust needed to be broken
● kexec had to to be called before the platform's security firmware 
was loaded.
● Where do we attack?
● /bin/e2fsck
● / is mounted from sda1, on the SSD, that we can now write to
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Unsigned Kernels
/bin/e2fsck was replaced with a script which:
● Mounted /system
● insmod our kexec modules
● kexec to load our new kernel
Our new kernel, apart from featuring no hash on init, had a few 
other tweaks:
GTVHacker
● no initd hash
● no signed init.rc
● no signed init.(eagle/asura).rc
● modified init.rc
● modified init.(eagle/asura).rc
● modified default.prop
● ro.secure=0
● ro.debuggable=1
http://gtvhacker.com/pres/dc20.ppt
Sony Google TV
Content Provider Bypass
But wait – there's more!
Our update script pulled Chrome's Flash player and
mutated the Flash plug-in string randomly per each install.
Since each box has a unique ID, content providers will have a 
harder time blocking streaming content for Google TV users.  
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Google TV
“Future” / ARM Devices
In the last few months we've seen a release of the second 
generation of Google TV devices, all of which are ARM:
Sony NSZ-GS7 – Network Streamer 
Sony NSZ-GP9 – Blu-Ray Player *unreleased*
Vizio VAP430 (CoStar) – Network Streamer *unreleased*
Vizio VBR430 – Blu-Ray Player *unreleased*
Vizio R3D*0VS (42/47/55/65) – Google TV *unreleased*
LG 47/55G2 (LMG620) – Google TV
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Google TV
Sony - ARM Devices
● The Sony ARM devices feature a Marvell 88DE3100 SoC, which 
has a 1.2GHZ Dual Core Processor.
● The Blu-Ray variant should be close to identical specs wise, but 
with a Blu-ray drive, and a BD playback app.
● Sony has yet to branch off into TV integration, as they may have 
jumped the gun the first time around.
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Google TV
Vizio - ARM Devices
● The Vizio ARM devices, like 
the Sony's feature a Marvell 
88DE3100 SoC, which has a 
1.2GHZ Dual-Core processor.
● Again, the Blu-Ray variant 
should be close to identical 
specs wise, but with a Blu-ray 
drive, and a BD playback app.
● Multiple devices, a streamer, 
BD player, and integrated TV.
● Hey, you – guy on stage. Is the 
streamer out yet?
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Google TV
LG - ARM Devices
● LG Google TV's are a bit 
more mysterious.
● 47” & 55” (G2 / LMG620)
● Mostly, there have been 
few purchases, and at 
$1200 each, a bit out of 
our price ranges!
● Dual Core ??? MHZ 
processor
● Anyone care to donate 
one?
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
GTVHacker Timeline
GTVHacker
Date
Event
12/2010
Logitech UART found (and live)
1/2011
Root package released (content bypass)
7/2011
Sony (Blu-ray) unit acquired
Sony unit rooted (SATA modification)
Sony recovery command execution found
Software root method found
Sony update encryption keys found, reversed, decrypted
8/2011
Revue 3.1 "Honeycomb" leaked
9/2011
Sony 3.1 Released
Sony TV acquired
Sony TV rooted
http://gtvhacker.com/pres/dc20.ppt
GTVHacker Timeline
GTVHacker
Date
Event (Continued)
10/2011
Sony bootloader shell found/downgrade achieved
11/2012
kexec ported as module to x86, unsigned kernels for     
Sony (saving for 3.2 rls)
12/2012
3.2 for Sony released
1/2012
Sony nodev recovery downgrade released
1/2012
Sony exploit package released (unsigned kernels)
3/2012
Revue signed module exploit achieved (needed root privileges)
4/2012
Logitech Revue kernel exploit (awaiting 3.2 release)
5/2012
Revue 3.2 Released
6/30/2012
NSZ-GP7 Acquired
6/30/2012
NSZ-GP7 Root Exploit
http://gtvhacker.com/pres/dc20.ppt
Sony NSZ-GP7
 Newest Sony 
device
 Released this 
month
 Tear down 
posted at 
GTVHacker.com
 CN2000 looks 
familiar!
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
NSZ-GP7 Root Demo
 Noticed that last bit on the time line? Yeah.
 We gained root access on 6/30, and proceeded 
to explore
 Our goal is to get unsigned kernels running 
before a release, which may or may not be 
done already (you, with the microphone?)
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
NSZ-GP7 Root Demo
Demo
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Questions?
GTVHacker
http://gtvhacker.com/pres/dc20.ppt
Thank you!
More information can be found at:
http://www.GTVHacker.com/
http://forum.GTVHacker.com/
http://blog.GTVHacker.com/
GTVHacker