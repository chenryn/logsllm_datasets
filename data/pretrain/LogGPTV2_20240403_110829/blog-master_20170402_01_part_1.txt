## PostgreSQL 转义、UNICODE、与SQL注入    
##### [TAG 6](../class/6.md)
### 作者                                 
digoal                         
### 日期                                                                                             
2017-04-02                        
### 标签                          
PostgreSQL , json , 字符串转义 , unicode , SQL注入 , backslash_quote , escape_string_warning , standard_conforming_strings     
----                                                                                          
## 背景                      
通过本文，你可以了解：  
1\. 如何在字符串中输入特殊字符，例如回车。  
2\. 如何在字符串中输入单引号。    
3\. 转义字符是什么？用法。  
4\. 在SQL标准中，反斜线是转义符吗？PostgreSQL如何使用反斜线转义？书写格式如何？  
5\. 为什么转义单引号存在SQL注入的风险？数据库有什么参数可以控制这个风险？有哪些参数可以发出警告？  
6\. 如何以UNICODE的形式输入字符串。  
7\. 以UNICODE的格式输入，支持所有字符集吗？目前支持哪些字符集，支持的CODE范围是多少？  
8\. 在Greenplum的JSON中输入UNICODE value有什么问题吗？PostgreSQL中有没有同样的问题？  
9\. 如何将unicode转换为普通字符串.  
## 转义配置    
有三个配置控制转义如下：    
1\. （与SQL注入有关）是否允许使用反斜线\转义单引号?   ```\'```       
backslash_quote = on 允许, off 不允许, safe_encoding（仅当client_encoding不允许反斜线```\```出现在多字节字符中时（大多数字符集```\```都是单字节表示），那么才允许使用```\'```转义单引号.）    
为什么要控制，不让转义单引号呢？    
因为这样可能引入SQL注入的风险，比如最终客户将```\```放在末尾，就可以将单引号转义掉，本来应该正常输入的字符串结束符，就不存在了。    
```    
backslash_quote (enum)    
This controls whether a quote mark can be represented by \' in a string literal.     
The preferred, SQL-standard way to represent a quote mark is by doubling it ('') but PostgreSQL has historically also accepted \'.     
However, use of \' creates security risks because in some client character set encodings, there are multibyte characters in which the last byte is numerically equivalent to ASCII \.     
If client-side code does escaping incorrectly then a SQL-injection attack is possible.     
This risk can be prevented by making the server reject queries in which a quote mark appears to be escaped by a backslash.     
The allowed values of backslash_quote are on (allow \' always), off (reject always), and safe_encoding (allow only if client encoding does not allow ASCII \ within a multibyte character).     
safe_encoding is the default setting.    
Note that in a standard-conforming string literal, \ just means \ anyway. This parameter only affects the handling of non-standard-conforming literals, including escape string syntax (E'...').    
```    
注意，仅仅当standard_conforming_strings=off或者使用E''的写法时，backslash_quote的配置才起作用。    
否则当standard_conforming_strings=on时，```\```会被作为普通的字符串处理。    
例子1, 当standard_conforming_strings=on时，```\```会被作为普通的字符串处理    
```    
postgres=# set standard_conforming_strings=on;    
SET    
postgres=# select '\';                            
 ?column?     
----------    
 \    
(1 row)    
```    
例子2, 当standard_conforming_strings=off 或者 使用E''的写法时，backslash_quote的配置才起作用。    
```    
postgres=# set backslash_quote = off;  -- 不允许转义'    
SET    
postgres=# select E'\';                  
';    
ERROR:  22P06: unsafe use of \' in a string literal    
LINE 1: select E'\';    
               ^    
HINT:  Use '' to write quotes in strings. \' is insecure in client-only encodings.    
LOCATION:  core_yylex, scan.l:641    
```    
```    
postgres=# set backslash_quote = off;  -- 不允许转义'    
SET    
postgres=# set standard_conforming_strings=off;    
SET    
postgres=# select '\';                             
';    
ERROR:  22P06: unsafe use of \' in a string literal    
LINE 1: select '\';    
               ^    
HINT:  Use '' to write quotes in strings. \' is insecure in client-only encodings.    
LOCATION:  core_yylex, scan.l:641    
postgres=# set backslash_quote = on;  -- 允许转义'    
SET    
postgres=# select '\';                             
';    
WARNING:  22P06: nonstandard use of \' in a string literal    
LINE 1: select '\';    
               ^    
HINT:  Use '' to write quotes in strings, or use the escape string syntax (E'...').    
LOCATION:  check_string_escape_warning, scan.l:1483    
 ?column?     
----------    
 ';      +    
(1 row)    
postgres=# set backslash_quote = safe_encoding;  -- 当client_encoding不允许反斜线```\```出现在多字节字符中时（大多数字符集```\```都是单字节表示），允许使用```\'```转义单引号.    
SET    
postgres=# show client_encoding;    
 client_encoding     
-----------------    
 UTF8    
(1 row)    
postgres=# select '\';                             
';    
WARNING:  22P06: nonstandard use of \' in a string literal    
LINE 1: select '\';    
               ^    
HINT:  Use '' to write quotes in strings, or use the escape string syntax (E'...').    
LOCATION:  check_string_escape_warning, scan.l:1483    
 ?column?     
----------    
 ';      +    
(1 row)    
```    
2\. 当standard_conforming_strings=off，同时在''中的字符串中包含反斜线时，是否输出警告。    
因为SQL标准中，字符串中的反斜线不是转义字符，而是普通字符。    
如果你要转义，那么请使用E''的写法。    
```    
escape_string_warning (boolean)    
When on, a warning is issued if a backslash (\) appears in an ordinary string literal ('...' syntax) and standard_conforming_strings is off.     
The default is on.    
Applications that wish to use backslash as escape should be modified to use escape string syntax (E'...'),     
because the default behavior of ordinary strings is now to treat backslash as an ordinary character, per SQL standard.     
This variable can be enabled to help locate code that needs to be changed.    
```    
例子1    
```    
postgres=# set escape_string_warning=on;    
SET    
postgres=# set standard_conforming_strings=off;    
SET    
postgres=# select '\';                         
';    
WARNING:  22P06: nonstandard use of \' in a string literal  -- 收到警告消息    
LINE 1: select '\';    
               ^    
HINT:  Use '' to write quotes in strings, or use the escape string syntax (E'...').    
LOCATION:  check_string_escape_warning, scan.l:1483    
 ?column?     
----------    
 ';      +    
(1 row)    
```    
例子2    
```    
postgres=# set escape_string_warning=on;    
SET    
postgres=# set standard_conforming_strings=off;    
SET    
postgres=# select E'\';   -- 使用E''写法，\作为转义字符                    
';    
 ?column?     
----------    
 ';      +    
(1 row)    
```    
3\. 告诉数据库，在''字符串中的反斜线，是否作为普通字符。    
standard_conforming_strings = on 反斜线作为普通字符(SQL标准用法)， off 反斜线作为转义字符。    
```    
standard_conforming_strings (boolean)    
This controls whether ordinary string literals ('...') treat backslashes literally, as specified in the SQL standard.     
Beginning in PostgreSQL 9.1, the default is on (prior releases defaulted to off).     
Applications can check this parameter to determine how string literals will be processed.     
The presence of this parameter can also be taken as an indication that the escape string syntax (E'...') is supported.     
Escape string syntax (Section 4.1.2.2) should be used if an application desires backslashes to be treated as escape characters.    
```    
如果standard_conforming_strings=on，要使用转义怎么办？采样E''写法即可    
```    
postgres=# set standard_conforming_strings=on;    
SET    
postgres=# select '\';  -- SQL标准写法    
 ?column?     
----------    
 \    
(1 row)    
postgres=# select E'\'';  -- 转义写法，此时\作为转义字符    
 ?column?     
----------    
 '    
(1 row)    
```    
### 如何转义    
1\. standard_conforming_strings=on(SQL标准)，那么字符串''中的反斜线是普通字符。 使用E''写法，反斜线才是转义字符。    
2\. standard_conforming_strings=off(非SQL标准), 那么字符串''中的反斜线都是转义字符。    
## C语言风格字符串    
Backslash Escape Sequence|      Interpretation    
---|---    
\b|     backspace    
\f|     form feed    
\n|     newline    
\r|     carriage return    
\t|     tab    
\o, \oo, \ooo (o = 0 - 7)|      octal byte value    
\xh, \xhh (h = 0 - 9, A - F)|   hexadecimal byte value    
\uxxxx, \Uxxxxxxxx (x = 0 - 9, A - F)|  16 or 32-bit hexadecimal Unicode character value    
\\\\|   反斜线    
\'|     单引号    
## unicode输入    
如何输入unicode的字符串呢？    
用户可以直接向数据库输入UNICODE编码，省去编码转换的过程，但是用户必须保证编码与数据库服务端编码一致，否则可能出现编码溢出，或者乱码的问题。存入后，就和直接存储字符串是一样的。    
### unicode输入格式1    
当反斜线为转义字符配置时，这样输入UNICODE    
（注意这种输入格式，要求反斜线必须为转义字符，参考前面的章节，如果让反斜线变成转义字符）    
```    
\uxxxx, \Uxxxxxxxx (x = 0 - 9, A - F)    
小写    
16 or 32-bit hexadecimal Unicode character value    
```    
例子    
```    
postgres=# set standard_conforming_strings =on;    
SET    
postgres=# select E'\u00f7';  -- \为转义字符    
 ?column?     
----------    
 ÷    
(1 row)    
postgres=# select '\u00f7';  -- \为普通字符, 没有输入unicode, 而是字符串    
 ?column?     
----------    
 \u00f7    
(1 row)    
postgres=# set standard_conforming_strings =off;  -- \为转义字符    
SET    
postgres=# select '\u00f7';    
WARNING:  22P06: nonstandard use of escape in a string literal    
LINE 1: select '\u00f7';    
               ^    
HINT:  Use the escape string syntax for escapes, e.g., E'\r\n'.    
LOCATION:  check_escape_warning, scan.l:1508    
 ?column?     
----------    
 ÷    
(1 row)    
```    
```    
postgres=# create table u(id int, info text);    
CREATE TABLE    
postgres=# select E'\u00f0';    
 ?column?     
----------    
 e    
(1 row)    