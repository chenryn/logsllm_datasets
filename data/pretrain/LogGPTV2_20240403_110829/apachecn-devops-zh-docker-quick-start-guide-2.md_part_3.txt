```
检查命令的`--format`参数使用 go 模板。您可以在 Docker 文档页面上找到关于它们的更多信息，用于格式化输出:[https://docs.docker.com/config/formatting](https://docs.docker.com/config/formatting)。
# 容器统计命令
另一个非常有用的 Docker 命令是 stats 命令。它为一个或多个正在运行的容器提供实时的、持续更新的使用统计数据。这有点像使用 Linux `top`命令。您可以运行不带参数的命令来查看所有正在运行的容器的统计信息，也可以提供一个或多个唯一的容器标识符来查看一个或多个容器的特定容器的统计信息。以下是使用该命令的一些示例:
```
# using the new syntax, view the stats for all running containers
# Usage: docker container stats [OPTIONS] [CONTAINER...]
docker container stats
# view the stats for just two web server containers
docker container stats web-server1 web-server2
# using the old syntax, view stats for all running containers
docker stats
```
当你看到足够的统计数据时，你可以使用 C *trl* + *C* 退出视图。
回到`run`命令参数，接下来，我们将讨论通常一起使用的`run`命令的两个参数。有时候你运行一个容器，你想和它进行一个交互会话。例如，您可能运行一个容器，该容器在一个或多或少已满的操作系统(如 Ubuntu)中执行一些应用，并且您希望能够访问该容器来更改配置或调试一些问题，类似于使用 SSH 连接到服务器。与 Docker 的大多数事情一样，实现这一点的方法不止一种。一种常见的方法是对运行命令使用两个可选参数:`--interactive`和`--tty`。现在让我们来看看这是如何工作的。您已经看到了如何使用`--detach`参数启动与我们正在运行的容器断开连接:
```
# running detached docker container run --detach --name web-server1 nginx
```
当我们运行这个命令来启动我们的 nginx web 服务器并浏览到`http://localhost`时，我们发现它并没有提供我们期望的欢迎页面。因此，我们决定进行一些调试，并且决定使用两个`--interactive`和`--tty`参数交互运行它，而不是从我们的容器中分离。现在，由于这是一个 nginx 容器，它有一个默认命令，在容器启动时执行。那个命令是`nginx -g 'daemon off;'`。因为这是默认命令，所以与容器交互对我们没有任何好处。因此，我们将通过为运行命令提供一个参数来覆盖默认命令。它看起来像这样:
```
# using the long form of the parameters
docker container run --interactive --tty --name web-server2 nginx bash
# using the short form of the parameters (joined as one), which is much more common usage
docker container run -it --name web-server2 nginx bash
```
该命令将像以前一样运行容器，但它将执行`bash`命令，而不是执行默认命令。它还会打开一个终端会话，与我们可以交互的容器进行交互。根据需要，我们可以作为`root`用户在容器内部执行命令。我们可以查看文件夹和文件，我们可以编辑配置设置，我们可以安装软件包，等等。我们甚至可以运行映像的默认命令来查看我们是否解决了任何问题。这里有一个有点做作的例子:
![](img/5355ddb7-ef52-4406-9397-c7839cf8de8f.png)
您可能已经注意到`-p 80:80`参数。这是发布参数的简短形式，我们将在*回到 Docker 运行命令*一节中讨论。使用`container ls`命令，您可以看到使用默认命令运行容器和使用覆盖命令运行容器之间的区别:
![](img/339ffd7a-c93b-466f-b9f1-e389a763598b.png)
网络服务器运行使用默认 CMD，网络服务器 2 使用覆盖 CMD `bash`。这是一个人为的例子来帮助你理解这些概念。一个真实的例子可能是当您想要与基于操作系统的容器交互连接时，比如 Ubuntu。大家可能还记得在[第 1 章](1.html)、*建立 Docker 开发环境*的开头，说在一个 Ubuntu 容器中运行的默认命令是`bash`。既然是这种情况，您就不必提供命令来覆盖默认值。您可以使用如下运行命令:
```
# running interactively with default CMD docker container run -it --name earls-dev ubuntu
```
通过这个`container run`命令，你被连接到你运行的 Ubuntu 容器的一个交互终端会话。当 ssh 进入 Ubuntu 服务器时，你可以做任何你通常会做的事情。你可以用`apt-get`安装软件，你可以查看正在运行的进程，你可以执行`top`命令，等等。可能是这样的:
![](img/9fafd0d2-f070-4432-bea9-b6d2a7a141ba.png)
还有其他几个容器命令可以帮助您与已经运行并分离的容器进行交互。现在让我们快速看一下这些命令。
# 容器附加命令
假设您有一个正在运行的容器。它当前已从您的终端会话中分离。您可以使用`container attach`命令使该容器的执行进程成为终端会话的前台进程。让我们使用之前使用的 web 服务器示例:
```
# run a container detached
docker container run --detach -it --name web-server1 -p 80:80 nginx
# show that the container is running
docker container ps
# attach to the container
# Usage: docker container attach [OPTIONS] CONTAINER
docker container attach web-server1
# issue a *Ctrl* + *PQ* keystroke to detach (except for Docker on Mac, see below for special Mac instructions)
# again, show that the container is running detached.
docker container ps
```
当您附加到正在运行的容器时，它的执行命令将成为终端会话的前台进程。要脱离容器，需要发出*Ctrl* + *PQ* 键。如果您发出 *Ctrl* + *C* 键击，容器的执行过程将收到一个符号信号并终止，这反过来将退出容器。这通常是不可取的。所以记得用 *Ctrl* + *PQ* 键分离。
但是，在 macOS 上有一个已知的问题:对于 Mac 上的 Docker 来说， *Ctrl* + *PQ* 键击不起作用，除非您在`attach`命令上使用另一个参数`--sig-proxy=false`参数，否则您将无法脱离容器，除非使用 *Ctrl* + *C* 键击终止容器:
```
# when you are using Docker for Mac, remember to always add the "--sig-proxy=false" parameter
docker attach --sig-proxy=false web-server1
```
当您向`attach`命令提供`--sig-proxy=false`参数时，您可以向附加的容器发出 *Ctrl* + *C* 键击，它将脱离，而不会向容器进程发送信号，从而保持容器运行，再次脱离您的终端会话:
![](img/fcf8b70a-0e46-4ad1-a260-d783fadf9ca6.png)
# 容器执行命令
有时，当一个容器被分离运行时，您可能想要访问它，但不想附加到正在执行的命令。您可以通过使用 container exec 命令来实现这一点。此命令允许您在运行的容器中执行另一个命令，而不会附加到或干扰已经运行的命令。该命令通常用于创建与已经运行的容器的交互会话，或者在容器中执行单个命令。该命令如下所示:
```
# start an nginx container detached
docker container run --detach --name web-server1 -p 80:80 nginx
# see that the container is currently running
docker container ls
# execute other commands in the running container
# Usage: docker container exec [OPTIONS] CONTAINER COMMAND [ARG...] docker container exec -it web-server1 bash
docker container exec web-server1 cat /etc/debian_version
# confirm that the container is still running 
docker container ls
```
当`exec`命令完成时，您退出 bash shell，或者文件内容已经被替换，然后它退出回到终端会话，保持容器运行分离:
![](img/fb344e4d-5ba7-440f-af71-9b42c8c4ccce.png)
在我们继续讨论许多可选的`container run`参数之前，让我们看一下另一个 Docker 命令。
# 容器提交命令
重要的是要知道，当您附加到一个正在运行的容器并对其进行更改时，例如安装新的包或更改配置文件，这些更改只适用于该正在运行的容器。例如，如果您使用 Ubuntu 映像运行一个容器，然后将`curl`安装到该容器中，则更改不会应用回您运行该容器的映像，在本例中，是 Ubuntu。如果您要从同一个 Ubuntu 映像启动另一个容器，您需要再次安装`curl`。但是，如果您希望在运行的容器中所做的更改保持不变，并在运行新容器时可用，您可以使用`container commit`命令。`container commit`命令允许您将容器的当前读/写层与原始映像的层一起保存，创建一个全新的映像。当您使用新映像运行容器时，它将包括您所做的更改，并使用`container commit`命令保存。以下是`container commit`命令的样子:
```
# Usage: docker container commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
docker container commit ubuntu new-ubuntu
```
这里有一个例子，使用`container commit`命令将`curl`安装到一个正在运行的容器中，然后创建一个包含已安装的`curl`命令的新容器:
![](img/47f18f01-68e7-42e5-80de-4dacdf2aad16.png)
有了这个例子，我现在可以从`ubuntu-curl`映像运行新的容器，并且它们都已经安装了`curl`命令。
# 返回到 Docker 运行命令
现在，让我们回到对`container run`命令的讨论。之前，您看到了一个使用带有`--publish`参数的`run`命令的例子。使用可选的发布参数可以指定将打开哪些与运行容器相关的端口。`--publish`参数包括用冒号分隔的成对端口号。例如:
```
# create an nginx web-server that redirects host traffic from port 8080 to port 80 in the container
docker container run --detach --name web-server1 --publish 8080:80 nginx
```
第一个端口号与运行容器的主机相关联。在 nginx 示例中，`8080`暴露在主机上；在我们的情况下，这将是`http://localhost:8080`。第二个端口号是正在运行的容器上打开的端口。在这种情况下，应该是`80`。说出`--publish 8080:80`参数的描述，您会说类似于，发送到端口`8080` *o* n 的流量被重定向到运行容器上的端口`80`:
![](img/3309bf24-df9f-47bf-b97c-9bc3112928fb.png)
区分主机端口和容器端口非常重要。我可以在同一个系统上运行几个容器，它们都暴露端口`80`，但是只有一个容器可以有来自主机上每个端口的流量。请看下面的例子，以便更好地理解:
```
# all of these can be running at the same time
docker container run --detach --name web-server1 --publish 80:80 nginx
docker container run --detach --name web-server2 --publish 8000:80 nginx
docker container run --detach --name web-server3 --publish 8080:80 nginx
docker container run --detach --name web-server4 --publish 8888:80 nginx # however if you tried to run this one too, it would fail to run 
# because the host already has port 80 assigned to web-server1
docker container run --detach --name web-server5 --publish 80:80 nginx
```
要知道这是一般网络的限制，而不是 Docker 或容器的限制。这里我们可以看到这些命令及其输出。请注意端口和名称，以及已用作端点的端口的使用如何失败:
![](img/60594bf1-705f-48cf-9ecd-60d4691320be.png)
这是关于`container run`命令的各种选项参数的大量数据。这不是所有的选项参数，但它应该足以让你有一个很好的开始。如果您想了解更多关于我们探索的可选参数的信息，或者想了解我们在这里没有介绍的参数，请访问`container run`命令的 docker documents 页面，该页面可在[https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)找到。
# 摘要
在本章中，我们了解了 Docker 映像描述和 Docker 注册表的一些信息。然后我们看到版本命令还有另一种形式。之后，我们探索了很多 Docker 容器命令，包括`run`、`stop`、`ls`、`logs`、`top`、`stats`、`attach`、`exec`，以及`commit`命令。最后，我们找到了如何通过打开主机和容器的端口来公开容器。您应该已经对可以使用 Docker 做的事情感到非常满意，但是请稍等——在[第 3 章](3.html)、*创建 Docker 映像*中，我们将向您展示如何使用`Dockerfile`和映像构建命令创建您自己的 Docker 映像。如果你准备好了，翻开新的一页。
# 参考
*   Docker 注册表:https://hub . docker . com/explore/
*   `container run`命令的所有参数:[https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)
*   使用`--format`参数和容器检查命令:[https://docs.docker.com/config/formatting](https://docs.docker.com/config/formatting)
*   json jq 解析器:[https://stedolan . github . io/jq/](https://stedolan.github.io/jq/)
*   巧克力视窗软件包管理器:[https://chocolatey.org/](https://chocolatey.org/)