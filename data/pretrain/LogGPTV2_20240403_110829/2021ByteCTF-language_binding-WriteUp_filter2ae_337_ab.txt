        ,
        opmode(0, 1, 1, 0, 1)  // CLOSURE
        ,
        opmode(0, 1, 0, 0, 1)  // LOADKX
        ,
        opmode(0, 1, 2, 0, 2)  // TFORLOOP
        ,
        opmode(0, 1, 1, 1, 0)  // NEWTABLE
        ,
        opmode(0, 1, 3, 3, 0)  // SHR
        ,
        opmode(0, 0, 3, 3, 0)  // SETTABLE
        ,
        opmode(0, 1, 3, 3, 0)  // ADD
        ,
        opmode(0, 1, 1, 1, 0)  // TAILCALL
        ,
        opmode(0, 0, 1, 0, 0)  // SETUPVAL
        ,
        opmode(0, 0, 1, 1, 3)  // EXTRAARG
        ,
        opmode(0, 1, 1, 3, 0)  // GETTABUP
        ,
        opmode(0, 1, 2, 0, 0)  // LEN
        ,
        opmode(0, 1, 3, 3, 0)  // SUB
        ,
        opmode(0, 1, 1, 1, 0)  // LOADBOOL
        ,
        opmode(0, 0, 0, 1, 0)  // TFORCALL
        ,
        opmode(0, 1, 1, 0, 0)  // LOADNIL
        ,
        opmode(0, 1, 2, 0, 2)  // FORPREP
        ,
        opmode(0, 1, 3, 3, 0)  // SHL
        ,
        opmode(1, 0, 0, 1, 0)  // TEST
        ,
        opmode(0, 1, 3, 3, 0)  // BXOR
        ,
        opmode(1, 0, 3, 3, 0)  // LT
        ,
        opmode(0, 1, 1, 1, 0)  // CALL
        ,
        opmode(0, 1, 2, 0, 0)  // NOT
        ,
        opmode(0, 1, 3, 3, 0)  // BOR
        ,
        opmode(0, 1, 3, 3, 0)  // MUL
        ,
        opmode(0, 0, 3, 3, 0)  // SETTABUP
        ,
        opmode(1, 0, 3, 3, 0)  // EQ
        ,
        opmode(0, 1, 2, 0, 0)  // MOVE
        ,
        opmode(0, 0, 2, 0, 2)  // JMP
        ,
        opmode(0, 1, 3, 3, 0)  // IDIV
        ,
        opmode(0, 1, 2, 3, 0)  // GETTABLE
        ,
        opmode(0, 1, 2, 2, 0)  // CONCAT
        ,
        opmode(0, 1, 1, 0, 0)  // VARARG
        ,
        opmode(0, 1, 3, 3, 0)  // POW
        ,
        opmode(0, 1, 3, 3, 0)  // MOD
        ,
        opmode(0, 1, 3, 3, 0)  // DIV
        ,
        opmode(0, 1, 2, 0, 0)  // BNOT
        ,
        opmode(0, 1, 2, 3, 0)  // SELF
        ,
        opmode(1, 0, 3, 3, 0)  // LE
        ,
        opmode(0, 0, 1, 0, 0)  // RETURN
        ,
        opmode(0, 1, 2, 0, 2)  // FORLOOP
        ,
        opmode(0, 1, 1, 0, 0)  // GETUPVAL
        ,
        opmode(0, 1, 3, 0, 1)  // LOADK
        ,
        opmode(0, 1, 3, 3, 0)  // BAND
    };
  * 修改 `lopcode.h`
    /*
    ** $Id: lopcodes.h,v 1.148 2014/10/25 11:50:46 roberto Exp $
    ** Opcodes for Lua virtual machine
    ** See Copyright Notice in lua.h
    */
    #ifndef lopcodes_h
    #define lopcodes_h
    #include "llimits.h"
    /*===========================================================================
      We assume that instructions are unsigned numbers.
      All instructions have an opcode in the first 6 bits.
      Instructions can have the following fields:
        'A' : 8 bits
        'B' : 9 bits
        'C' : 9 bits
        'Ax' : 26 bits ('A', 'B', and 'C' together)
        'Bx' : 18 bits ('B' and 'C' together)
        'sBx' : signed Bx
      A signed argument is represented in excess K; that is, the number
      value is the unsigned value minus K. K is exactly the maximum value
      for that argument (so that -max is represented by 0, and +max is
      represented by 2*max), which is half the maximum for the corresponding
      unsigned argument.
    ===========================================================================*/
    enum OpMode { iABC,
                  iABx,
                  iAsBx,
                  iAx }; /* basic instruction format */
    /*
    ** size and position of opcode arguments.
    */
    #define SIZE_C 9
    #define SIZE_B 9
    #define SIZE_Bx (SIZE_C + SIZE_B)
    #define SIZE_A 8
    #define SIZE_Ax (SIZE_C + SIZE_B + SIZE_A)
    #define SIZE_OP 6
    #define POS_OP 0
    #define POS_A (POS_OP + SIZE_OP)
    #define POS_C (POS_A + SIZE_A)
    #define POS_B (POS_C + SIZE_C)
    #define POS_Bx POS_C
    #define POS_Ax POS_A
    /*
    ** limits for opcode arguments.
    ** we use (signed) int to manipulate most arguments,
    ** so they must fit in LUAI_BITSINT-1 bits (-1 for sign)
    */
    #if SIZE_Bx > 1) /* 'sBx' is signed */
    #else
    #define MAXARG_Bx MAX_INT
    #define MAXARG_sBx MAX_INT
    #endif
    #if SIZE_Ax > POS_OP) & MASK1(SIZE_OP, 0)))
    #define SET_OPCODE(i, o) ((i) = (((i)&MASK0(SIZE_OP, POS_OP)) | \
                                     ((cast(Instruction, o) > pos) & MASK1(size, 0)))
    #define setarg(i, v, pos, size) ((i) = (((i)&MASK0(size, pos)) | \
                                            ((cast(Instruction, v) << pos) & MASK1(size, pos))))
    #define GETARG_A(i) getarg(i, POS_A, SIZE_A)
    #define SETARG_A(i, v) setarg(i, v, POS_A, SIZE_A)
    #define GETARG_B(i) getarg(i, POS_B, SIZE_B)
    #define SETARG_B(i, v) setarg(i, v, POS_B, SIZE_B)
    #define GETARG_C(i) getarg(i, POS_C, SIZE_C)
    #define SETARG_C(i, v) setarg(i, v, POS_C, SIZE_C)
    #define GETARG_Bx(i) getarg(i, POS_Bx, SIZE_Bx)
    #define SETARG_Bx(i, v) setarg(i, v, POS_Bx, SIZE_Bx)
    #define GETARG_Ax(i) getarg(i, POS_Ax, SIZE_Ax)
    #define SETARG_Ax(i, v) setarg(i, v, POS_Ax, SIZE_Ax)
    #define GETARG_sBx(i) (GETARG_Bx(i) - MAXARG_sBx)
    #define SETARG_sBx(i, b) SETARG_Bx((i), cast(unsigned int, (b) + MAXARG_sBx))
    #define CREATE_ABC(o, a, b, c) ((cast(Instruction, o) << POS_OP) | (cast(Instruction, a) << POS_A) | (cast(Instruction, b) << POS_B) | (cast(Instruction, c) << POS_C))
    #define CREATE_ABx(o, a, bc) ((cast(Instruction, o) << POS_OP) | (cast(Instruction, a) << POS_A) | (cast(Instruction, bc) << POS_Bx))
    #define CREATE_Ax(o, a) ((cast(Instruction, o) << POS_OP) | (cast(Instruction, a) << POS_Ax))
    /*
    ** Macros to operate RK indices
    */
    /* this bit 1 means constant (0 means register) */
    #define BITRK (1 << (SIZE_B - 1))
    /* test whether value is a constant */
    #define ISK(x) ((x)&BITRK)
    /* gets the index of the constant */
    #define INDEXK(r) ((int)(r) & ~BITRK)
    #define MAXINDEXRK (BITRK - 1)
    /* code a constant index as a RK value */
    #define RKASK(x) ((x) | BITRK)
    /*
    ** invalid register that fits in 8 bits
    */
    #define NO_REG MAXARG_A
    /*
    ** R(x) - register
    ** Kst(x) - constant (in constant table)
    ** RK(x) == if ISK(x) then Kst(INDEXK(x)) else R(x)
    */
    /*
    ** grep "ORDER OP" if you change these enums
    */
    typedef enum {
      OP_UNM,
      OP_SETLIST,
      OP_TESTSET,
      OP_CLOSURE,
      OP_LOADKX,
      OP_TFORLOOP,
      OP_NEWTABLE,
      OP_SHR,
      OP_SETTABLE,