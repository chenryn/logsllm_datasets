long where everything is identical across the twins: the
Pi-3 hardware, software image, the hat and its satellite
visibility, experiment duration and temperature envi-
ronment. The only diﬀerence is the source of the PPS:
in one it comes from the hat itself, in the other this has
been replaced by our signal generator reference PPS.
For the ﬁrst time we will examine timestamps from
the system clock, which is disciplined by the ntpd dae-
mon synchronizing to the input PPS in a standard con-
ﬁguration for each twin. Timestamps are made within
the IRQ routine responding to pulses (just after our
raw timestamping location). We compare the system
clock timestamps Sr(i) and Sh(i) for the twin with the
reference and hat PPS respectively.
6.2 Results
We examine the Inter-Pulse Time sequence
IPTx(i) = Sx(i + 1) − Sx(i)
for each Pi, where x is one of h or r.
Figure 6 gives a representative subset 3000 pulses
wide of each IPTx timeseries, and histograms of all
values between the 0.1 and 99.9-th percentiles. The
two series are very similar, however the outliers in the
hat case are larger than those of the underlying pulses
themselves, which have a range under 1µs (Figure 2).
This shows that the system clock built on hat pulses
can have, overall, similar accuracy to one built on a
high end reference system (provided satellite reception
is maintained). However, it also highlights the impor-
tance of algorithm stability, as small instabilities at the
pulse level are being ampliﬁed rather than suppressed
by ntpd, albeit slightly, despite the ideal conditions.
Whereas IPTx(i) looks at errors in measuring 1 sec-
ond intervals, the error of the system clock as it evolves
across the entire trace is given by examining Sx(i) −
(Sx(1) + i − 1). For each twin we observe a ﬂuctuating
Figure 5: Kernel to user-space latency L(i).
errors and potentially limited resolution. The low cost
of Pi+Hat nodes makes it feasible to assemble a sub-
stantial measurement network with this capability. Its
potential could however be derailed by latency issues,
in particular those due to crossing the user and kernel
space divide. We examine this question here.
5.1 Experiment Design
Linux provides a standard way to access a PPS signal
via the Kernel PPS interface. We wrote a user-space
data logging application that uses this call to block on
each pulse. Upon each callback we immediately read the
STC using memory mapping, and also retrieve and log
our IRQ-based STC timestamp. For each generation of
Pi we collected several hours of data, including periods
of minimal load, and high load induced by ﬁle transfers.
5.2 Results
We ﬁrst examined the Inter-Pulse values C(i) taken
at each timestamping location separately. Take for ex-
ample results for the Pi-2. Although having identi-
cal median values, they exhibited markedly diﬀerent
variabilities, with [kernel, user] standard deviations of
[3.1, 418]µs, and ranges of [0.11, 32.5]ms. Note that this
is despite the beneﬁt of the low latency memory-mapped
STC reads.
i )− STC(tk
i in the kernel and tu
i
A more direct approach is to examine the latency
L(i) = STC(tu
i ) between the raw timestamps
read at time tk
in user-space. The
histogram of L(i) is given in Figure 5 for each Pi gen-
eration, showing in each case values from the minimum
to the 99.9-th percentile. Though a clear generational
improvement is seen, the gap between the arrival of the
pulse and its receipt in user-space can be signiﬁcant,
indeed outliers continue out into the ms range.
The experiment also collected instances where the
pulse was seen by the kernel, but the callback failed.
6080100120140160Pi -1:   med = 81, iqr=7 µs405060708090100Pi -2:   med = 51, iqr=3 µsµs2030405060Pi -3:   med = 21, iqr=4 µsFigure 6: Inter-Pulse Intervals from the twin experiment. Left: timeseries, Right: histogram.
periodic wander in a 30µs band in this quantity, (indi-
cating that the software clock (in)stability is dominating
the small diﬀerences in pulse quality. For reference, the
best case wander on a PC platform is closer to 10µs.
7. CONCLUSION
We conclude by synthesizing our ﬁndings into a re-
sponse to the question, can we trust the Pi for timing?
In terms of timing hardware fundamentals, results
from Goal 1 showed that the STC’s stability was an ad-
equate basis for a software clock, not very diﬀerent from
that of a larger PC platform [17]. The 1µs resolution
however is a current limitation that will be inherited by
any software clock based on it. As pointed out in the in-
troduction however, this could potentially be overcome.
The results from Goal 2 showed that a well chosen,
inexpensive GPS source can be almost indistinguishable
from an expensive reference for timing needs below 1µs,
however this is, crucially, predicated on a reliable PPS
which implies in particular consistent satellite coverage.
Moreover, Goals 3 and 4 each point to the need to man-
age access latencies properly to fully beneﬁt from a PPS.
Operating system and other latencies are more signiﬁ-
cant on a Pi than on a larger platform.
Beyond hardware fundamentals comes synchroniza-
tion fundamentals, which depend critically on the syn-
chronization algorithm, and its ability to manage la-
tency variability both in the underlying reference, and
in timestamps thereof. With PPS available, Goal 4 shows
that Pi+hat using ntpd on Raspbian can perform to
within a small factor of a Stratum-1 server on a larger
platform, but erratic behavior if the PPS stability were
for some reason degraded cannot be ruled out, partic-
ular under high system load. We performed some sim-
ple tests of system clock robustness, by repeatedly dis-
abling the hat’s pulse for a few seconds at a time and
then restoring it. We found that the system clock suf-
fered immediate disruption following each missing pulse
event, and took minutes to recover.
For a Pi without PPS, the timestamps used for sys-
tem clock deﬁnition/synchronization would be of pack-
ets exchanged with remote timeservers, which is prob-
lematic as each Pi has a high latency network interface.
For example the Pi-3 has a USB based interface which
is polled from the operating system rather than inter-
rupt driven. Under ideal conditions latencies lie in the
10’s of µs range, but can easily reach 100’s of µs or
even the ms level under heavy load.
It is well docu-
mented that ntpd has signiﬁcant stability issues [19, 17,
16]. When network and system latency variability reach
certain ‘tipping points’, stability is lost, and errors can
jump from a best case value of the order of 1ms to a
wandering error with an amplitude of 10’s or 100’s of
ms, or even beyond. Because latencies are higher on a
Pi, it is more vulnerable to this occuring. Whether any
given error is acceptable is entirely application depen-
dent, however reliability is always important, as without
it error bounds cannot be placed on measurements.
To give an idea of the best possible performance of the
Pi without a PPS based on ntpd, we performed an addi-
tional 30 hour experiment where a Pi-3 was a Stratum-2
client, synchronizing over the LAN to a Stratum-1 ref-
erence NTP server (the SRS) with no other network
traﬃc or system load, while system clock timestamps
were still collected based on in-kernel PPS triggers as
per Section 6. The IPTh(i) timeseries now exhibited
spikes in the ±20µs range and periodicity with am-
plitude 5µs. More importantly, the accumulated error
Sx(i) − (Sx(1) + i − 1) exhibited a wander in a 370µs
band, compared to 30µs previously. This is approach-
ing the ms level, even under these very unrealistic ideal
conditions.
Feedforward synchronization algorithms such as RAD-
clock [19] do not suﬀer from the feedback instabilities
2000250030003500400045005000 IPT - 1 [µs]-6-4-20246reference PPS[µs]-2-1012med= 0, iqr= 0.48 [µs]inter-pulse #i2000250030003500400045005000 IPT - 1 [µs]-6-4-20246hat PPS[µs]-505med= 0, iqr= 0.48 [µs]above and can deliver high accuracy (wander under
1ms under reasonable assumptions). Moreover, because
RADclock treats time diﬀerence measurement diﬀer-
ently from absolute time at a fundamental level, it can
provide PPS-like accuracy for quantities such as round-
trip and inter-packet times, and delay variation, with-
out the need for PPS [19]. This is ideal for measurement
eﬀorts, such as CAIDA’s Internet topology mapping,
which are based on RTTs. Of course, individual packet
timestamps will still suﬀer from the latencies of the net-
work hardware, even with a perfect system clock.
To conclude, timing suﬃcient for most network mea-
surement purposes is at a fundamental level possible on
a Pi, but to achieve it may require replacing ntpd to en-
sure accuracy, reliability, and meaningful error bounds.
With the right clock synchronization approach, the lim-
itation to timestamp accuracy on the platform is likely
to be the latency of the network interface.
Acknowledgment
Partially supported by Australian Research Council’s
Linkage Projects funding scheme #LP120100073, in part-
nership with Symmetricom (now Microsemi), an ITSP
Tier-2 project grant (ref. no. GHP/027/11) from the
Innovation Technology Fund in Hong Kong, and a re-
search grant from the Joint Universities Computer Cen-
ter of Hong Kong (ref. no. H-ZL17). Thanks also to
Lewis Masters, Nick Gustafson, Brendan Horan, and
Michael Wouters for their insights, and the reviewers
and our shepherd for helpful comments.
8. REFERENCES
[1] Archipelago monitor locations.
http://www.caida.org/projects/ark/locations/.
[2] BISmark. http://www.projectbismark.net.
[3] Raspberry Pi. https://www.raspberrypi.org/.
[4] P. Abry, D. Veitch, and P. Flandrin. Long-range
dependence: revisiting aggregation with wavelets.
Journal of Time Series Analysis (Bernoulli
Society), 19(3):253–266, May 1998.
[5] ARM. RealView Platform Baseboard for
ARM1176JZF- S User Guide., 2011.
[6] P. Barham, B. Dragovic, K. Fraser, S. Hand,
T. Harris, A. Ho, R. Neugebauer, I. Pratt, and
A. Warﬁeld. Xen and the Art of Virtualization. In
SOSP ’03: Proceedings of the nineteenth ACM
symposium on Operating systems principles, pages
164–177, New York, NY, USA, 2003. ACM.
[7] T. Broomhead, J. Ridoux, and D. Veitch. Counter
Availability and Characteristics for Feed-forward
Based Synchronization. In Int. IEEE ISPCS’09,
pages 29–34, Brescia, Italy, Oct. 12-16 2009.
[8] R. Calvo-Palomino, D. Giustiniano, and
V. Lenders. Collaborative Signal Monitoring and
Decoding with Low-Cost Software-Deﬁned Radio.
In Proc. ACM SIGCOMM Internet Measurement
Conf., Santa Monica, Nov. 14-16 2016.
[9] J. C. Corbett, J. Dean, M. Epstein, A. Fikes,
C. Frost, J. J. Furman, S. Ghemawat,
A. Gubarev, C. Heiser, P. Hochschild, W. Hsieh,
S. Kanthak, E. Kogan, H. Li, A. Lloyd, S. Melnik,
D. Mwaura, D. Nagle, S. Quinlan, R. Rao,
L. Rolig, Y. Saito, M. Szymaniak, C. Taylor,
R. Wang, and D. Woodford. Spanner: Google’s
globally-distributed database. In Proceedings of
the 10th USENIX, OSDI’12, pages 251–264,
Berkeley, CA, USA, 2012.
[10] E. K. Lua, T. Griﬃn, M. Pias, H. Zheng, and
J. Crowcroft. On the accuracy of embeddings for
internet coordinate systems. In IMC’05:
Proc. ACM Internet Measurement Conference,
pages 11–11, Berkeley, CA, USA, 2005.
[11] D. L. Mills. The Network Computer as Precision
Timekeeper. In Proc. Precision Time and Time
Interval (PTTI) Applications and Planning
Meeting, pages 96–108, Reston VA, Dec. 1996.
[12] R. Mok, W. Li, and R. Chang. Improving the
packet send-time accuracy in embedded devices.
In Proc. PAM, 2015.
[13] R. Mok, W. Li, R. Chang, K.-W. Yung, C.-H.
Chan, and Y.-S. Poon. An automated testbed for
proﬁling the packet send-time accuracy of
embedded devices. In Proc. TRIDENTCOM
(Poster Session), 2015.
[14] NMEA. Publications and Standards from the
National Marine Electronics Association (NMEA)
/ NMEA 0183, Nov. 2008.
[15] J. Regehr. High-Resolution Timing on the
Raspberry Pi.
http://blog.regehr.org/archives/794.
[16] J. Ridoux and D. Veitch. Ten Microseconds Over
LAN, for Free (Extended). IEEE Trans.
Instrumentation and Measurement (TIM),
58(6):1841–1848, June 2009.
[17] J. Ridoux, D. Veitch, and T. Broomhead. The
Case for Feed-Forward Clock Synchronization.
IEEE/ACM Transactions on Networking,
20(1):231–242, Feb. 2012.
[18] D. Veitch, S. Babu, and A. P´asztor. Robust
Synchronization of Software Clocks Across the
Internet. In Proc. ACM SIGCOMM Internet
Measurement Conf., pages 219–232, Taormina,
Italy, Oct. 2004.
[19] D. Veitch, J. Ridoux, and S. B. Korada. Robust
Synchronization of Absolute and Diﬀerence
Clocks over Networks. IEEE/ACM Transactions
on Networking, 17(2):417–430, April 2009.
[20] D. Veitch and K. Vijayalayan. Network Timing
and the 2015 Leap Second. In Proc. of PAM 2016,
Heraklion, Crete, Greece, March 31 - April 1 2016.
[21] K. Vijayalayan and D. Veitch. Rot at the Roots?
Examining Public Timing Infrastructure. In Proc.
of IEEE INFOCOM 2016, San Francisco, CA,
USA, April 10-15 2016.