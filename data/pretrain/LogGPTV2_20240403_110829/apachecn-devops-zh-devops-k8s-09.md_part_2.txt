| 私人的 | 10.0.2.0/24 | `subnet-62758c06` | `rtb-cc4cafb7` | `nat-084ff8ba1edd54bf4` (NAT-GW) | 否(默认) |
Technically, you can still assign a public IP to private subnet EC2 instance, but there is no default gateway to the internet (IGW). Therefore, a public IP will just be wasted and absolutely not have connectivity from the internet.
现在，如果您在公共子网上启动一个 EC2 实例，它将成为面向公共的，因此您可以从这个子网为您的应用提供服务。
另一方面，如果您在专用子网上启动一个 EC2 实例，它仍然可以通过 NAT-GW 访问互联网，但不会有来自互联网的访问。但是，它仍然可以从公共子网的 EC2 实例访问它。因此，您可以部署内部服务，如数据库、中间件和监控工具。
# 安全组
一旦 VPC 和具有相关网关/路由的子网准备就绪，您就可以创建 EC2 实例。但是，至少需要预先创建一个访问控制，称为**安全组**。它可以定义防火墙规则，即入口(传入网络访问)和出口(传出网络访问)。
在以下示例中，为公共子网主机创建了一个安全组和一个规则，允许从您的计算机的 IP 地址进行 ssh，并在全球范围内开放 HTTP(80/tcp):
When you define a security group for public subnet, it is highly recommended it to be reviewed by a security expert. Because once you deploy an EC2 instance onto the public subnet, it has a public IP address and then everyone including crackers and bots are able to access your instances directly.
```
//create one security group for public subnet host on vpc-66eda61f
$ aws ec2 create-security-group --vpc-id vpc-66eda61f --group-name public --description "public facing host"
{
 "GroupId": "sg-7d429f0d"
}
//check your machine's public IP (if not sure, use 0.0.0.0/0 as temporary)
$ curl ifconfig.co
107.196.102.199
//public facing machine allows ssh only from your machine
$ aws ec2 authorize-security-group-ingress --group-id sg-7d429f0d --protocol tcp --port 22 --cidr 107.196.102.199/32
//public facing machine allow HTTP access from any host (0.0.0.0/0)
$ aws ec2 authorize-security-group-ingress --group-id sg-d173aea1 --protocol tcp --port 80 --cidr 0.0.0.0/0  
```
接下来，为私有子网主机创建一个安全组，允许来自公共子网主机的 ssh。在这种情况下，指定公共子网安全组标识(`sg-7d429f0d`)而不是 CIDR 块是很方便的:
```
//create security group for private subnet
$ aws ec2 create-security-group --vpc-id vpc-66eda61f --group-name private --description "private subnet host"
{
 "GroupId": "sg-d173aea1"
}
//private subnet allows ssh only from ssh bastion host security group
//it also allows HTTP (80/TCP) from public subnet security group
$ aws ec2 authorize-security-group-ingress --group-id sg-d173aea1 --protocol tcp --port 22 --source-group sg-7d429f0d
//private subnet allows HTTP access from public subnet security group too
$ aws ec2 authorize-security-group-ingress --group-id sg-d173aea1 --protocol tcp --port 80 --source-group sg-7d429f0d
```
总体而言，创建了两个安全组，如下所示:
| **名称** | **安全组 ID** | **允许 ssh (22/TCP)** | **允许 HTTP (80/TCP)** |
| 公众 | `sg-7d429f0d` | 你的机器(`107.196.102.199`) | `0.0.0.0/0` |
| 私人的 | `sg-d173aea1` | 公共 sg ( `sg-7d429f0d`) | 公共 sg ( `sg-7d429f0d`) |
# EC2 和 EBS
EC2 是 AWS 中的一项重要服务，您可以在 VPC 上启动虚拟机。根据硬件规格(中央处理器、内存和网络)，AWS 上有几种类型的 EC2 实例。启动 EC2 实例时，需要指定 VPC、子网、安全组和 ssh 密钥对。因此，所有这些都必须事先创建。
由于前面的例子，最后一步是 ssh keypair。让我们制作一个 ssh 密钥:
```
//create keypair (internal_rsa, internal_rsa.pub)
$ ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/saito/.ssh/id_rsa): /tmp/internal_rsa
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /tmp/internal_rsa.
Your public key has been saved in /tmp/internal_rsa.pub.
//register internal_rsa.pub key to AWS
$ aws ec2 import-key-pair --key-name=internal --public-key-material "`cat /tmp/internal_rsa.pub`"
{
 "KeyName": "internal", 
   "KeyFingerprint":  
 "18:e7:86:d7:89:15:5d:3b:bc:bd:5f:b4:d5:1c:83:81"
} 
//launch public facing host, using Amazon Linux on us-east-1 (ami-a4c7edb2)
$ aws ec2 run-instances --image-id ami-a4c7edb2 --instance-type t2.nano --key-name internal --security-group-ids sg-7d429f0d --subnet-id subnet-d83a4b82
//launch private subnet host
$ aws ec2 run-instances --image-id ami-a4c7edb2 --instance-type t2.nano --key-name internal --security-group-ids sg-d173aea1 --subnet-id subnet-62758c06  
```
几分钟后，检查 AWS 网络控制台上的 EC2 实例状态；它显示了具有公共 IP 地址的公共子网主机。另一方面，私有子网主机没有公共 IP 地址:
![](img/00120.jpeg)
```
//add private keys to ssh-agent
$ ssh-add -K /tmp/internal_rsa
Identity added: /tmp/internal_rsa (/tmp/internal_rsa)
$ ssh-add -l
2048 SHA256:AMkdBxkVZxPz0gBTzLPCwEtaDqou4XyiRzTTG4vtqTo /tmp/internal_rsa (RSA)
//ssh to the public subnet host with -A (forward ssh-agent) option
$ ssh -A PI:EMAIL
The authenticity of host '54.227.197.56 (54.227.197.56)' can't be established.
ECDSA key fingerprint is SHA256:ocI7Q60RB+k2qbU90H09Or0FhvBEydVI2wXIDzOacaE.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '54.227.197.56' (ECDSA) to the list of known hosts.
           __|  __|_  )
           _|  (     /   Amazon Linux AMI
          ___|\___|___|
    https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/
    2 package(s) needed for security, out of 6 available
    Run "sudo yum update" to apply all updates.
```
现在你在公共子网主机(`54.227.197.56`)但是这个主机也有一个内部(私有)IP 地址，因为这个主机部署在 10.0.1.0/24 子网(`subnet-d83a4b82`)，所以私有地址范围必须是`10.0.1.1` - `10.0.1.254`:
```
$ ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 0E:8D:38:BE:52:34 
          inet addr:10.0.1.24  Bcast:10.0.1.255      
          Mask:255.255.255.0
```
让我们在公共主机上安装 nginx web 服务器，如下所示:
```
$ sudo yum -y -q install nginx
$ sudo /etc/init.d/nginx start
Starting nginx:                                            [  OK  ]
```
然后，回到你的机器上查看`54.227.197.56`的网站:
```
$ exit
logout
Connection to 52.227.197.56 closed.
//from your machine, access to nginx
$ curl -I 54.227.197.56
HTTP/1.1 200 OK
Server: nginx/1.10.3
...
Accept-Ranges: bytes  
```
此外，在同一个 VPC 内，还有其他可用性区域的可达性，因此您可以从该主机 ssh 到专用子网主机(`10.0.2.98`)。请注意，我们使用的是转发 ssh 代理的`ssh -A`选项，因此不需要创建`~/.ssh/id_rsa`文件:
```
[ec2-user@ip-10-0-1-24 ~]$ ssh 10.0.2.98
The authenticity of host '10.0.2.98 (10.0.2.98)' can't be established.
ECDSA key fingerprint is 1a:37:c3:c1:e3:8f:24:56:6f:90:8f:4a:ff:5e:79:0b.
Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added '10.0.2.98' (ECDSA) to the list of known hosts.
           __|  __|_  )
           _|  (     /   Amazon Linux AMI
          ___|\___|___|
https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/
2 package(s) needed for security, out of 6 available
Run "sudo yum update" to apply all updates.
[ec2-user@ip-10-0-2-98 ~]$ 
```
除了 EC2，还有一个重要的功能，那就是磁盘管理。AWS 提供了一种叫做**弹性块存储** ( **EBS** )的灵活磁盘管理服务。您可以创建一个或多个可以连接到 EC2 实例的持久性数据存储。从 EC2 的角度来看，EBS 是 HDD/SSD 之一。一旦您终止(删除)了一个 EC2 实例，EBS 及其内容可能会保留下来，然后重新附加到另一个 EC2 实例。
在以下示例中，创建了一个容量为 40 GB 的卷；然后连接到公共子网主机(实例 ID `i-0db344916c90fae61`):
```
//create 40GB disk at us-east-1a (as same as EC2 host instance)
$ aws ec2 create-volume --availability-zone us-east-1a --size 40 --volume-type standard
{
    "AvailabilityZone": "us-east-1a", 
    "Encrypted": false, 
    "VolumeType": "standard", 
    "VolumeId": "vol-005032342495918d6", 
    "State": "creating", 
    "SnapshotId": "", 
    "CreateTime": "2017-08-16T05:41:53.271Z", 
    "Size": 40
}
//attach to public subnet host as /dev/xvdh
$ aws ec2 attach-volume --device xvdh --instance-id i-0db344916c90fae61 --volume-id vol-005032342495918d6
{
    "AttachTime": "2017-08-16T05:47:07.598Z", 
    "InstanceId": "i-0db344916c90fae61", 
    "VolumeId": "vol-005032342495918d6", 
    "State": "attaching", 
    "Device": "xvdh"
}
```
将 EBS 卷附加到 EC2 实例后，Linux 内核按照指定识别`/dev/xvdh`，然后您需要进行分区才能使用该设备，如下所示:
![](img/00121.jpeg)
在本例中，我们将一个分区设为`/dev/xvdh1`，因此您可以在`/dev/xvdh1`上创建一个格式为`ext4`的文件系统，然后您可以在 EC2 实例上挂载并使用该设备:
![](img/00122.jpeg)
卸载该卷后，您可以随意分离该卷，然后在需要时重新连接它:
```
//detach volume
$ aws ec2 detach-volume --volume-id vol-005032342495918d6
{
    "AttachTime": "2017-08-16T06:03:45.000Z", 
    "InstanceId": "i-0db344916c90fae61", 
    "VolumeId": "vol-005032342495918d6", 
    "State": "detaching", 
    "Device": "xvdh"
}
```
# 53 号公路
AWS 还提供名为**53 号公路**的托管域名服务。路由 53 允许你管理你自己的域名和相关的 FQDN 到一个 IP 地址。例如，如果你想要一个域名`k8s-devops.net`，你可以通过 53 号路由订购注册你的域名。
下图截图显示订购一个域名`k8s-devops.net`；完成注册可能需要几个小时:
![](img/00123.jpeg)
注册完成后，您可能会收到来自 AWS 的通知电子邮件，然后您可以通过 AWS 命令行或网络控制台控制该域名。让我们添加一条记录(FQDN 到 IP 地址)，将`public.k8s-devops.net`与面向公众的 EC2 主机公共 IP 地址`54.227.197.56`相关联。为此，获取托管区域标识，如下所示:
```
$ aws route53 list-hosted-zones | grep Id
"Id": "/hostedzone/Z1CTVYM9SLEAN8",   
```
现在您获得了一个托管区域 id`/hostedzone/Z1CTVYM9SLEAN8`，所以让我们准备一个 JSON 文件来更新 DNS 记录，如下所示:
```
//create JSON file
$ cat /tmp/add-record.json 
{
 "Comment": "add public subnet host",
  "Changes": [
   {
     "Action": "UPSERT",