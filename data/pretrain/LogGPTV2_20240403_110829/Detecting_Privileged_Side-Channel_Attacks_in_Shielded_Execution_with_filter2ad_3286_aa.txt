title:Detecting Privileged Side-Channel Attacks in Shielded Execution with
D&apos;ejà Vu
author:Sanchuan Chen and
Xiaokuan Zhang and
Michael K. Reiter and
Yinqian Zhang
Detecting Privileged Side-Channel Attacks in Shielded
Execution with Déjà Vu
Sanchuan Chen
The Ohio State University
Columbus, OH, USA
PI:EMAIL
Xiaokuan Zhang
The Ohio State University
Columbus, OH, USA
PI:EMAIL
Michael K. Reiter
Yinqian Zhang
University of North Carolina
The Ohio State University
Chapel Hill, NC, USA
PI:EMAIL
Columbus, OH, USA
yinqian@cse.ohio-
state.edu
ABSTRACT
Intel Software Guard Extension (SGX) protects the conﬁ-
dentiality and integrity of an unprivileged program running
inside a secure enclave from a privileged attacker who has
full control of the entire operating system (OS). Program ex-
ecution inside this enclave is therefore referred to as shielded.
Unfortunately, shielded execution does not protect programs
from side-channel attacks by a privileged attacker. For in-
stance, it has been shown that by changing page table entries
of memory pages used by shielded execution, a malicious OS
kernel could observe memory page accesses from the execu-
tion and hence infer a wide range of sensitive information
about it.
In fact, this page-fault side channel is only an
instance of a category of side-channel attacks, here called
privileged side-channel attacks, in which privileged attackers
frequently preempt the shielded execution to obtain ﬁne-
grained side-channel observations. In this paper, we present
D´ej`a Vu, a software framework that enables a shielded exe-
cution to detect such privileged side-channel attacks. Specif-
ically, we build into shielded execution the ability to check
program execution time at the granularity of paths in its
control-ﬂow graph. To provide a trustworthy source of time
measurement, D´ej`a Vu implements a novel software ref-
erence clock that is protected by Intel Transactional Syn-
chronization Extensions (TSX), a hardware implementation
of transactional memory. Evaluations show that D´ej`a Vu
eﬀectively detects side-channel attacks against shielded ex-
ecution and against the reference clock itself.
CCS Concepts
•Security and privacy → Information ﬂow control;
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ASIA CCS ’17 April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4944-4/17/04.
DOI: http://dx.doi.org/10.1145/3052973.3053007
Keywords
side-channel detection; Software Guard Extension; Transac-
tional Synchronization Extensions
1.
INTRODUCTION
To reduce the trusted computing base of sensitive appli-
cations, numerous eﬀorts have proposed systems to support
shielded execution—i.e., application program execution for
which the conﬁdentiality and integrity is protected from an
untrusted operating system (e.g., [37, 10, 22, 7]). The advent
of Intel Software Guard eXtension (SGX) [3], which is now
commercially available, oﬀers an opportunity for shielded
execution to become mainstream. Enforced by the hard-
ware memory management unit (MMU), shielded memory
regions of userspace programs (i.e., enclaves) are isolated
from other software, including privileged system software—
no memory read or write can be performed inside the enclave
by external software, regardless of its privilege level.
A signiﬁcant challenge in accomplishing shielded execu-
tion eﬀectively is that the operating system (OS), though
untrusted, must still be relied upon for some system ser-
vices (e.g., managing devices and physical memory). Pre-
vious work has shown, for example, that the untrusted OS
might be able to compromise a shielded execution by manip-
ulating the return values to system calls that it invokes [8].
Side-channel attacks from an untrusted OS have also been
demonstrated against SGX-based shielded execution: e.g.,
it has been shown that a malicious OS can force page faults
on all but one or two virtual page owned by a victim SGX
enclave so that memory accesses by the victim will leave a
trace of page faults that could leak sensitive information [53,
45]. Unlike the vulnerabilities exploitable by malicious re-
turn values from system calls, these side-channel attacks
cannot be avoided merely through defensive programming
of the shielded program.
Moreover, on untrusted OSes, this page-fault side channel
is only the tip of the iceberg. Page faults are simply one
type of exception that can trap the execution of a software
program into the OS kernel, allowing the malicious OS to
trace the control ﬂow or data ﬂow of a shielded execution.
Similar side channels can be constructed by a malicious OS
using other types of exceptions or interrupts. For example,
by interrupting the shielded execution using frequent hard-
7ware interrupts, the malicious OS may conduct ﬁne-grained
cache side-channel attacks on private caches (e.g., L1 caches)
that are used by the shielded execution. This type of at-
tack has been demonstrated in scenarios where the attackers
are unprivileged—cross-process attacks [39, 20] or cross-VM
attacks [58]—by exploiting design ﬂaws in OS schedulers.
On untrusted OSes, such attacks, which can be performed
without scheduler vulnerabilities, are even more powerful as
the privileged attacker can program hardware interrupt con-
trollers directly to take control of the CPU at high frequency,
e.g., after every memory access of the shielded execution.
In this paper, we systematize a category of side-channel
attacks on untrusted OSes that we call privileged side-channel
attacks, in which privileged attackers in control of the OS
frequently intervene, via software exceptions or hardware
interrupts, on the shielded execution to obtain ﬁne-grained
side-channel observations. To defeat such privileged side-
channel attacks, we devise an approach to allow the shielded
execution to detect such attacks as it incurs them during its
execution. The shielded execution can then implement an
application-speciﬁc policy in response to these detections.
So, for example, if the shielded execution detects unusually
frequent page faults during its execution of a cryptographic
routine, then the execution could abort or else refresh its
keys. Our focus here is not on the policy—again, the pol-
icy will generally be application-speciﬁc—but rather on con-
structing a way for a shielded execution to reliably detect
privileged side-channel attacks when they occur.
A key obstacle to building such a detection capability is
that current SGX-enabled hardware provides no support for
a shielded execution to directly observe the page faults it
induces or interrupts issued by hardware. An alternative,
therefore, is for the shielded execution to time its own ac-
tivity to observe timings that indicate that a page fault or
an interrupt occurred, as both exceptions and interrupts oc-
curred inside enclaves will result in Asynchronous Enclave
Exits (AEXs) and context switches from userspace to kernel
space, which grows the execution time of the shielded execu-
tion. Unfortunately, current SGX-enabled hardware allows
access to timers only through the untrusted OS, rendering
these timers untrustworthy, as well. As such, the central
challenge is for the shielded execution to itself implement a
reference clock against which to time steps of its own ex-
ecution, to detect when exceptions or interrupts occurred
during one of those steps.
Following Wray [52], one approach to constructing such
a reference clock is by using execution itself as a clock—
i.e., to measure the time between events by the distance
that an execution progresses between those events. While
Wray envisioned this capability as a means to implement
timing side channels, here we use this idea defensively, to
detect when steps of the shielded execution take too long
in comparison to a reference execution. That is, our goal is
to construct a shielded execution consisting of threads that
execute concurrently, one serving as the “reference clock” to
measure the time taken for each step of the other thread.
Of course, this design begs the question of how to de-
tect if the reference-clock thread incurs a delay due to a
page fault or interrupt (again, possibly induced by the un-
trusted OS). For this purpose, we leverage another capability
of modern Intel platforms, namely Transactional Synchro-
nization Extensions (TSX), a hardware implementation of
transactional memory. Speciﬁcally, our design advances its
reference clock using transactional memory, in a way that
an interrupt or page fault will cause a transaction to abort
with high probability. This transaction abort will be visible
to the reference-clock thread, allowing it to determine when
it was “paused” by the OS. Of course, this is not the only
threat that the OS poses to the reference clock—e.g., the
OS might change the execution speed of the processor core
on which it executes. However, we show that with careful
engineering, we can implement an execution-based reference
clock within SGX-based shielded execution, for detecting
the interruption of (and thus potential leakage from) criti-
cal routines within the shielding.
We have realized our design in an implementation for
Linux called D´ej`a Vu.1 Specially, D´ej`a Vu is implemented
as an extension of the LLVM framework [28], which takes
the source code of the shielded program as the input and
outputs an instrumented binary to be loaded into SGX en-
claves at runtime. The execution time of the shielded ex-
ecution is measured by the instrumented code at selected
basic blocks, which employ threshold-based classiﬁers to de-
termine whether the measured execution time exceeds the
expected values—longer execution between basic blocks sug-
gests AEXs have occurred during the execution.
We have integrated D´ej`a Vu with the Intel Linux SGX
SDK. The security evaluation shows D´ej`a Vu achieves at
least 0.94 precision and recall in detecting AEXs of the ap-
plication thread, and 0.95 or better recall and 0.78 or better
precision in detecting AEXs on the reference-clock thread.
The runtime performance overhead of D´ej`a Vu when ap-
plied to nbench applications [4] is typically less than 4%.
Contributions. In summary, this paper contributes to the
ﬁeld of study in the following aspects:
• A software framework, D´ej`a Vu, for automated program
transformation and detection of privileged side-channel
attacks against shielded execution with good accuracy.
• A software-based reference clock that is protected by In-
tel’s hardware transactional memory, which cannot be
manipulated by the malicious OS without being noticed.
• Implementation and evaluation of D´ej`a Vu on Intel Sky-
lake processors with both SGX and TSX features.
2. BACKGROUND AND RELATED WORK
2.1 Intel SGX and Shielded Execution
There is a long history of research on shielded execution
on untrusted operating systems [31, 46, 9, 10, 37, 54, 42,
56, 22, 11, 14, 30]. Most rely on a trusted software compo-
nent, usually a hypervisor running at the highest privilege,
to protect the memory of an isolated program against both
conﬁdentiality and integrity attacks from an untrusted guest
operating system.
In contrast to these software-based approaches, Intel Soft-
ware Guard eXtensions (SGX) is a new hardware feature
provided in the most recent Intel processors (e.g., Skylake
processor families) that protects a shielded memory region
from reading and writing by external software regardless of
its privilege levels [3]. This security mechanism provides
1
D´ej`a Vu is a reference to the movie The Matrix, in which the world
as we know it is a simulation. The simulation has glitches, which are
revealed when one experiences d´ej`a vu. A transaction abort in our
reference-clock thread is an analogy for this d´ej`a vu, or evidence of a
“glitch” in the virtual world.
8software developers with an unprecedented capability to de-
velop security-critical software programs that can achieve
strong security guarantees (in terms of conﬁdentiality and
integrity) even under the assumption of a malicious operat-
ing system.
2.2 Transactional Synchronization Extensions
Intel Transactional Synchronization eXtensions (TSX) is
a hardware implementation of transactional memory that is
available in recent Intel processors (including Skylake mod-
els that have SGX enabled). Transactional memory (TM) [21]
enables atomic execution of a set of memory read and write
instructions on shared memory regions by concurrent threads,
without the overhead of software locks.
Although not designed as a security enhancement, Intel
TSX has been leveraged to improve security in several works.
Most directly related to our work, concurrent research by
Shih et al. [44] employs TSX to address controlled-channel
attacks on SGX by leveraging, as we do here, the fact that
an exception during the execution of a transaction in an en-
clave will abort the transaction, notifying the enclave pro-
gram without interference by the system software. We will
compare to their solution, called T-SGX, in Sec. 3.4.
In
more distant security-related research, Liu et al. [34] demon-
strated the use of Intel TSX to facilitate virtual machine
introspection. Guan et al. [19] explored the use of TSX to
protect cryptographic keys in CPU caches to prevent mem-
ory disclosure attacks.
In terms of usability of Intel TSX, it has been shown in
these prior studies [34, 19] that enclosing large code regions
inside TSX transactions may induce numerous transaction
aborts, degrading the performance of their applications and
even making it unusable. Our use of Intel TSX avoids such
issues by only enclosing a small loop inside the transac-
tion, which signiﬁcantly reduces the likelihood of transac-
tion aborts due to regular system operations. Therefore,
our design is highly practical.
2.3 Side-Channel Attacks and Defenses
Besides exception-based side-channel attacks, cache-based
side-channel attacks have also been demonstrated to be ca-
pable of tracing the victim program’s code execution and
data accesses. A cache-based side channel can be constructed
using data caches (including per-core L2 uniﬁed caches) on
shared processors [39, 47, 20, 23], instruction caches [5, 58],
shared last-level caches (LLC) [55, 59, 33, 18, 40, 25]. Sim-
ilar to page fault side-channel attacks, cache side-channel
attacks conducted on per-core caches also require frequent
preemption of the victim program’s execution [39, 20, 58].
However, the page fault side-channel attacks enforce CPU
preemption by inducing page faults, which leads to better
synchronization with the victim program and less noise.
Defenses against these side-channel attacks are not easy.
Modifying the processor architecture [50, 36, 15, 32] and re-
lying on system-level isolation enhancement [49, 27, 29, 60,
48, 57] are not possible in the settings we consider. Software
defenses against cache-based side-channel attacks may be
applicable to our settings, however. Ideally, if the shielded
execution can be transformed so that it does not have secret-
dependent side-eﬀects on memory pages or caches, both
cache-based and exception-based side channels can be elim-
inated. However, doing so in practice is extremely labor-
intensive. Automated program transformation to eliminate
the secret-dependent control ﬂows or data ﬂows have been
attempted in several prior works [38, 12, 35, 13, 43], but
due to the high performance overhead (e.g., several times
higher runtime), these compiler-based approaches have not
yet been widely adopted. Static analysis of software pro-
grams to automatically detect side-channel vulnerabilities
have been studied by Doychev et al. [16]. To enable such
analysis for exception-based side-channel attacks, new mod-
els need to be constructed.
3. PRIVILEGED SIDE-CHANNEL ATTACKS
ON SGX ENCLAVES
Prior studies on side channels by an attacker with a foothold
on the same machine as the victim usually consider unpriv-
ileged attackers, e.g., virtual machines conﬁned by hyper-
visors (e.g., [58, 55, 24, 33]), non-root userspace processes
(e.g., [41, 39, 5, 6, 47, 59]), or sandboxed Javascript code
(e.g., [40]).
In contrast, much less is known about side-
channel attacks from privileged attackers. This is primarily
because privileged attackers, i.e., attackers who control priv-
ileged software components, are capable of conducting more
direct attacks than side-channel attacks.
As described in Sec. 2, Intel SGX provides hardware-level
memory isolation of userspace programs running inside en-
claves with an enhanced memory-management unit (MMU),
as well as hardware-facilitated encryption of memory when
it is not protected by the MMU. As such, even the most
privileged software attacker that controls the entire oper-
ating system cannot inspect the memory space inside the
enclave. Side-channel threats thus become primary attack
vectors against SGX-protected programs.
Although the malicious OS cannot access memory inside
the enclaves, it still controls the scheduling of CPU resources,
mediates accesses to I/O devices, handles interrupts and ex-
ceptions, maintains process control blocks and page tables,
etc. Of particular concern here is the OS’ responsibilities in
handling exceptions and interrupts, which allows the mali-
cious OS to intercept the control ﬂows of the shielded exe-