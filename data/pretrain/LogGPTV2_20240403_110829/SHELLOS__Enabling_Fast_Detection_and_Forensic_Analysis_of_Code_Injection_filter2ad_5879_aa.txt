title:SHELLOS: Enabling Fast Detection and Forensic Analysis of Code Injection
Attacks
author:Kevin Z. Snow and
Srinivas Krishnan and
Fabian Monrose and
Niels Provos
SHELLOS: Enabling Fast Detection and
Forensic Analysis of Code Injection Attacks
Kevin Z. Snow, Srinivas Krishnan, Fabian Monrose
Department of Computer Science
University of North Carolina at Chapel Hill,
{kzsnow, krishnan, fabian}@cs.unc.edu
Niels Provos
Google,
PI:EMAIL
Abstract
The availability of off-the-shelf exploitation toolkits for
compromising hosts, coupled with the rapid rate of
exploit discovery and disclosure, has made exploit or
vulnerability-based detection far less effective than it
once was. For instance, the increasing use of metamor-
phic and polymorphic techniques to deploy code injec-
tion attacks continues to confound signature-based de-
tection techniques. The key to detecting these attacks
lies in the ability to discover the presence of the injected
code (or, shellcode). One promising technique for do-
ing so is to examine data (be that from network streams
or buffers of a process) and efﬁciently execute its con-
tent to ﬁnd what lurks within. Unfortunately, current ap-
proaches for achieving this goal are not robust to eva-
sion or scalable, primarily because of their reliance on
software-based CPU emulators.
In this paper, we ar-
gue that the use of software-based emulation techniques
are not necessary, and instead propose a new framework
that leverages hardware virtualization to better enable the
detection of code injection attacks. We also report on
our experience using this framework to analyze a corpus
of malicious Portable Document Format (PDF) ﬁles and
network-based attacks.
1 Introduction
In recent years, code-injection attacks have become a
widely popular modus operandi for performing mali-
cious actions on network services (e.g., web servers and
ﬁle servers) and client-based programs (e.g., browsers
and document viewers). These attacks are used to deliver
and run arbitrary code (coined shellcode) on victims’
machines, often enabling unauthorized access and con-
trol of the machine. In traditional code-injection attacks,
the code is delivered by the attacker directly, rather than
already existing within the vulnerable application, as in
return-to-libc attacks. Depending on the speciﬁcs of the
vulnerability that the attacker is targeting, injected code
can take several forms, including source code for an in-
terpreted scripting-language, intermediate byte-code, or
natively-executable machine code [17].
Typically, though not always, the vulnerabilities ex-
ploited arise from the failure to properly deﬁne and re-
ject improper input. These failures have been exploited
by several classes of code-injection techniques, includ-
ing buffer overﬂows [24], heap spray attacks [7, 36], and
return oriented programming (ROP)-based attacks [3].
One prominent and contemporary example embodying
these attacks involves the use of popular, cross-platform
document formats, such as the Portable Document For-
mat (PDF), to help compromise systems [37].
Malicious PDF ﬁles started appearing on the Internet
a few years ago, and their rise steadily increased around
the same time that Adobe Systems published their PDF
format speciﬁcations [34].
Irrespective of when they
ﬁrst appeared, the reason for their rise in popularity as
a method for compromising hosts is obvious: PDF is
supported on all major operating systems, it supports a
bewildering array of functionality (e.g., Javascript and
Flash), and some applications (e.g., email clients) render
them automatically. Moreover, the “stream objects” in
PDF allow many types of encodings (or “ﬁlters” in the
PDF language) to be used, including multi-level com-
pression, obfuscation, and even encryption.
It is not surprising that malware authors quickly re-
alized that these features can be used for nefarious pur-
poses. Today, malicious PDFs are distributed via mass
mailing, targeted email, and drive-by downloads [32].
These ﬁles carry an infectious payload that may come
in the form of one or more embedded executables within
the ﬁle itself1, or contain shellcode that, after successful
exploitation, downloads additional components.
The key to detecting these attacks lies in accurately
discovering the presence of the shellcode in network
payloads (for attacks on network services) or process
buffers (for client-based program attacks). This, how-
ever, is a signiﬁcant challenge because of the prevalent
use of metamorphism (i.e., the replacement of a set of
instructions by a functionally-equivalent set of different
instructions) and polymorphism (i.e., a similar technique
that hides a set of instructions by encoding—and later
decoding—them), that allows the shellcode to change its
appearance signiﬁcantly from one attack to the next.
In this paper, we argue that a promising technique for
detecting shellcode is to examine the input—be that net-
work streams or buffers from a process—and efﬁciently
execute its content to ﬁnd what lurks within. While this
idea is not new, we provide a novel approach based on
a new kernel, called ShellOS, built speciﬁcally to ad-
dress the shortcomings of current analysis techniques
that use software-based CPU emulation to achieve the
same goal (e.g., [6, 8, 13, 25, 26, 43]). Unlike these ap-
proaches, we take advantage of hardware virtualization
to allow for far more efﬁcient and accurate inspection of
buffers by directly executing instruction sequences on the
CPU. In doing so, we also reduce our exposure to evasive
attacks that take advantage of discrepancies introduced
by software emulation.
The remainder of the paper is organized as follows.
We ﬁrst present background information and related
work in §2. Next, we discuss the challenges facing
emulation-based approaches in §3. Our framework for
supporting the detection and forensic analysis of code
injection attacks is presented in §4. We provide a perfor-
mance evaluation, as well as a case study of real-world
attacks, in §5. Limitations of our current design are dis-
cussed in §6. Finally, we conclude in §7.
2 Background and Related Work
Early solutions to the problems facing signature-based
detection systems attempted to ﬁnd the presence of mali-
cious code (for example, in network streams) by search-
ing for tell-tale signs of executable code. For instance,
Toth and Kruegel [38] applied a form of static analysis,
coined abstract payload execution, to analyze the exe-
cution structure of network payloads. While promising,
Fogla et al. [9] showed that polymorphism defeats this
detection approach. Moreover, the underlying assump-
tion that shellcode must conform to discernible structure
on the wire was shown by several researchers [19, 29, 42]
to be unfounded.
Going further, Polychronakis et al. [26] proposed the
use of dynamic code analysis using emulation techniques
to uncover shellcode in code injection attacks target-
ing network services.
In their approach, the bytes off
the wire from a network tap are translated into assem-
bly instructions, and a simple software-based CPU em-
ulator employing a read-decode-execute loop is used to
execute the instruction sequences starting at each byte
offset in the inspected input. The sequence of instruc-
tions starting from a given offset in the input is called
an execution chain. The key observation is that to be
successful, the shellcode must execute a valid execution
chain, whereas instruction sequences from benign data
are likely to contain invalid instructions, access invalid
memory addresses, cause general protection faults, etc.
In addition, valid malicious execution chains will exhibit
one or more observable behaviors that differentiate them
from valid benign execution chains. Hence, a network
stream can be ﬂagged as malicious if there is a single
execution chain within the inspected input that does not
cause fatal faults in the emulator before malicious be-
havior is observed. This general notion of network-level
emulation has proven to be quite useful, and has garnered
much attention of late (e.g., [13, 25, 41, 43]).
Recently, Cova et al. [6] and Egele et al. [8] extended
this idea to protect web browsers from so-called “heap-
spray” attacks, where an attacker coerces an application
to allocate many objects containing malicious code in or-
der to increase the success rate of an exploit that jumps
to locations in the heap [36]. These attacks are partic-
ularly effective in browsers, where an attacker can use
JavaScript to allocate many malicious objects [4, 35].
Heap spraying has been used in several high proﬁle at-
tacks on major browsers and document readers. Several
Common Vulnerabilities and Exposure (CVE) disclo-
sures have been released about these attacks in the wild.
To the best of our knowledge, all the aforementioned ex-
ploit detection approaches employ software-based CPU
emulators to detect shellcode in heap objects.
Finally, we note that although runtime analysis of pay-
loads using software-based CPU emulation techniques
has been successful in detecting exploits in the wild [8,
27], the use of software emulation makes them suscepti-
ble to multiple methods of evasion [18, 21, 33]. More-
over, as we show later, software emulation is not scal-
able. Our objective in this paper is to forgo software-
based emulation altogether, and explore the design and
implementation of components necessary for robust de-
tection of code injection attacks.
3 Challenges for Software-based CPU
Emulation Detection Approaches
As alluded to earlier, prior art in detecting code injec-
tion attacks has applied a simple read-decode-execute ap-
proach, whereby data is translated into its corresponding
instructions, and then emulated in software. Obviously,
the success of such approaches rests on accurate software
emulation; however, the instruction set for modern CISC
architectures is very complex, and so it is unlikely that
software emulators will ever be bug free [18].
As a case-in-point, the popular and actively developed
QEMU emulator [2], which employs more advanced em-
ulation techniques based on dynamic binary translation,
does not faithfully emulate the FPU-based Get Program
Counter (GetPC) instructions, such as fnstenv 2. Con-
sequently, some of the most commonly used code in-
jection attacks fail to execute properly, including those
encoded with Metasploit’s popular “shikata ga nai” en-
coder and three other encoders from its arsenal that rely
on this GetPC instruction to decode their payload. While
this may be a boon to QEMU users employing it for full-
system virtualization (as one rarely requires a fully faith-
ful fnstenv implementation for normal application us-
age), using this software emulator as-is for injected code
detection would be fairly ineffective. In fact, we aban-
doned our earlier attempts at building a QEMU-based de-
tection system for exactly this reason.
To address accurate emulation of machine instructions
typically used in code injection attacks, special-purpose
CPU emulators (e.g. nemu [28], libemu [1]) were
developed. Unfortunately, they suffer from a different
problem: large subsets of instructions rarely used by in-
jected code are skipped when encountered in the instruc-
tion stream. The result is that any discrepancy between
an emulated instruction and the behavior on real hard-
ware potentially allows shellcode to evade detection by
altering its behavior once emulation is detected [21, 33].
Indeed, the ability to detect emulated enviroments is al-
ready present in modern exploit toolkits.
Arguably, a more practical limitation of emulation-
based detection is that of performance. When this ap-
proach is used in network-level emulation, for example,
the overhead can be non-trivial since (i) the vast major-
ity of network streams will contain benign data, some of
which might be signiﬁcant in size, (ii) successfully de-
tecting even non-sophisticated shellcode can require the
execution of thousands of instructions, and (iii) a sepa-
rate execution chain must be attempted for each offset in
a network stream because the starting location of injected
code is unknown.
To avoid these obstacles, the current state of practice is
to limit run-time analysis to the ﬁrst n bytes (e.g., 64kb)
of one side of a network stream, to examine ﬂows to
only known servers or from known services, or to termi-
nate execution after some threshold of instructions (e.g.,
2048) has been reached [25, 27, 43]. It goes without say-
ing that imposing such stringent run-time restrictions in-
evitably leads to the possibility of missing attacks (e.g.,
in the unprocessed portions of streams).
One might argue that more advanced software-based
emulation techniques such as dynamic binary transla-
tion [30] could offer signiﬁcant performance enhance-
ments over the simple emulation used in current state-of-
the-art dynamic shellcode detectors. However, the per-
formance beneﬁt of dynamic binary translation hinges
on the assumption that code blocks are translated once,
but executed many times. While this assumption holds
true with typical application usage, executing random
streams of data (as in network-level emulation) results in
short instruction sequences ending in a fault, rather than
a structured program ﬂow. Furthermore, dynamic binary
translation still has the problem of emulation accuracy.
Lastly, it is common for software-based CPU em-
ulation techniques to omit processing of some exe-
cution chains as a performance-boosting optimization
(e.g., only executing instruction sequences that contain a
GetPC instruction, or skipping an execution chain if the
starting instruction was already executed during a previ-
ous execution chain). Unfortunately, such optimizations
are unsafe, in that they are susceptible to evasion. For in-
stance, in the former case, metamorphic code may evade
detection by, for example, pushing data representing a
GetPC instruction to the stack and then executing it.
begin snippet
0 exit:
1
2
3
4
5
6
in al, 0x7
mov eax, 0xFF
mov ebx, 0x30
cmp eax, 0xFF
je exit
mov eax, fs:[ebx]
...
; Chain 1
; Chain 2 begins
; Chain 2
; Chain 2
; Chain 2 ends
; Chain 3 begins
end snippet