- reducing data transfer in garbled circuits using half gates. In Elisabeth
Oswald and Marc Fischlin, editors, EUROCRYPT 2015, Part II, volume 9057
of LNCS, pages 220–250. Springer, Heidelberg, April 2015.
[ZSB13] Yihua Zhang, Aaron Steele, and Marina Blanton. PICCO: a general-
purpose compiler for private distributed computation. In Ahmad-Reza
Sadeghi, Virgil D. Gligor, and Moti Yung, editors, ACM CCS 2013, pages
813–826. ACM Press, November 2013.
MP-SPDZ: A Versatile Framework for Multi-Party Computation
A INNER PRODUCT EXAMPLES
A.1 ABY
/**
\file
\author
\copyright
innerproduct.h
PI:EMAIL
ABY - A Framework for Efficient Mixed-protocol Secure Two-party Computation
Copyright (C) 2015 Engineering Cryptographic Protocols Group, TU Darmstadt
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.
You should have received a copy of the GNU Affero General Public License
along with this program. If not, see .
Implementation of the Inner Product using ABY Framework.
\brief
*/
#ifndef __INNERPRODUCT_H_
#define __INNERPRODUCT_H_
#include "../../../abycore/circuit/booleancircuits.h"
#include "../../../abycore/circuit/arithmeticcircuits.h"
#include "../../../abycore/circuit/circuit.h"
#include "../../../abycore/aby/abyparty.h"
#include "../../../abycore/sharing/sharing.h"
#include 
#include 
using namespace std;
IP Address
Number of threads
mt_alg
The algorithm for generation of multiplication triples
role
role played by the program which can be server or client part.
address
seclvl
nvals
bitlen
nthreads
Security level
Number of values
Bit length of the inputs
/**
\param
\param
\param
\param
\param
\param
\param
\param
\param
\brief
Inner Product.
*/
int32_t test_inner_product_circuit(e_role role, char* address, uint16_t port, seclvl seclvl,
the number of elements in the inner product
This function is used for running a testing environment for solving the
Sharing type object
sharing
num
uint32_t nvals, uint32_t bitlen, uint32_t nthreads, e_mt_gen_alg mt_alg,
e_sharing sharing, uint32_t num);
/**
\param
\param
\param
\param
\brief
s_x
s_y
num
share of X values
share of Y values
the number of elements in the inner product
ac
This function is used to build and solve the Inner Product modulo 2^16. It computes the inner product by
Arithmetic Circuit object.
multiplying each value in x and y, and adding those multiplied results to evaluate the inner
product. The addition is performed in a tree, thus with logarithmic depth.
*/
share* BuildInnerProductCircuit(share *s_x, share *s_y, uint32_t num, ArithmeticCircuit *ac);
Marcel Keller
#endif
innerproduct.cpp
ABY - A Framework for Efficient Mixed-protocol Secure Two-party Computation
PI:EMAIL, heavily modified by marcella
/**
\file
\author
\copyright
Copyright (C) 2015 Engineering Cryptographic Protocols Group, TU Darmstadt
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.
You should have received a copy of the GNU Affero General Public License
along with this program. If not, see .
\brief
*/
Implementation of the Inner Product using ABY Framework.
#include "innerproduct.h"
int32_t test_inner_product_circuit(e_role role, char* address, uint16_t port, seclvl seclvl,
uint32_t nvals, uint32_t bitlen, uint32_t nthreads, e_mt_gen_alg mt_alg,
e_sharing sharing, uint32_t num) {
/**
Step 1: Create the ABYParty object which defines the basis of all the
operations which are happening.
Operations performed are on the
basis of the role played by this object.
*/
ABYParty* party = new ABYParty(role, address, port, seclvl, bitlen, nthreads,
mt_alg);
/**
Step 2: Get to know all the sharing types available in the program.
*/
vector& sharings = party->GetSharings();
/**
Step 3: Create the circuit object on the basis of the sharing type
being inputed.
*/
ArithmeticCircuit* circ =
(ArithmeticCircuit*) sharings[sharing]->GetCircuitBuildRoutine();
/**
Step 4: Creating the share objects - s_x_vec, s_y_vec which
are used as inputs to the computation. Also, s_out which stores the output.
*/
MP-SPDZ: A Versatile Framework for Multi-Party Computation
share *s_x_vec, *s_y_vec, *s_out;
/**
Step 5: Allocate the vectors that will hold the plaintext values.
*/
uint16_t x, y;
uint16_t output;
uint16_t * input = (uint16_t*) malloc(num * sizeof(uint16_t));
uint32_t i;
/**
Step 6: Fill the input array with data read from file.
Copy the input values into a share object for each party.
The values for the party different from role is ignored,
but PutINGate() must always be called for both roles.
*/
char *fname = (char *) malloc(100);
sprintf(fname, "/root/ABY/src/examples/innerprod/data/innerprod.%d.dat", role);
std::ifstream infile;
infile.open(fname);
for(i = 0; i > input[i] ;
if(infile.eof()) {break;}
}
infile.close();
s_x_vec = circ->PutSIMDINGate(i, input, 16, SERVER);
s_y_vec = circ->PutSIMDINGate(i, input, 16, CLIENT);
/**
Step 7: Build the circuit, passing the input shares and circuit object.
*/
s_out = BuildInnerProductCircuit(s_x_vec, s_y_vec, num, circ);
/**
Step 8: Output the value of s_out (the computation result) to both parties
*/
s_out = circ->PutOUTGate(s_out, ALL);
/**
Step 9: Executing the circuit using the ABYParty object evaluate the
problem.
*/
party->ExecCircuit();
/**
Step 10: Type caste the plaintext output to 16 bit unsigned integer.
*/
output = s_out->get_clear_value();
cout PutMULGate(s_x, s_y);
// split SIMD gate to separate wires (size many)
s_x = ac->PutSplitterGate(s_x);
// add up the individual multiplication results and store result on wire 0
// in arithmetic sharing ADD is for free, and does not add circuit depth, thus simple sequential adding
for (i = 1; i set_wire_id(0, ac->PutADDGate(s_x->get_wire_id(0), s_x->get_wire_id(i)));
}
// discard all wires, except the addition result
s_x->set_bitlength(1);
return s_x;
}
A.2 ABY3
#include
#include 
#include "aby3/sh3/Sh3Runtime.h"
#include "aby3/sh3/Sh3Encryptor.h"
#include "aby3/sh3/Sh3Evaluator.h"
#include "innerprod.h"
using namespace oc;
using namespace aby3;
void innerprod_test(oc::u64 partyIdx, std::vectorvalues) {
if (partyIdx == 0)
std::cout 
using namespace emp;
using namespace std;
int LEN = 100000;
void test_innerprod(int bitsize, string inputs_a[], string inputs_b[], int len) {
Integer sum(bitsize, 0, PUBLIC);
Integer prod(bitsize, 0, PUBLIC);
Integer *a = new Integer[len];
Integer *b = new Integer[len];
Batcher batcher;
for( int i=0; i(bitsize, inputs_b[i]);
}
batcher.make_semi_honest(BOB);
for( int i=0; i();
}
for( int i=0; i()   " << endl