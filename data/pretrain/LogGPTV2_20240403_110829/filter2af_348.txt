# 【技术分享】从补丁对比到PoC复现：MS16-030漏洞分析

### 译文声明
本文为翻译文章，原文来源：安全客
原文地址：[链接]
译文仅供参考，具体内容及含义以原文为准。

## MS16-030漏洞概述
MS16-030是一个影响Windows OLE的远程代码执行漏洞。该漏洞源于OLE未能正确验证用户输入，导致攻击者可以通过构造特定文件或程序触发此漏洞，从而在用户点击后远程执行任意代码。

- 漏洞补丁信息：[链接]
- 漏洞说明文档：[链接]

## 补丁对比分析
在研究某些相关产品时，我们对MS16-030补丁进行了深入分析。通过补丁对比，我们发现了一些有趣的攻击向量，并希望通过分享这些细节帮助大家更好地理解这个漏洞。本文将重点介绍从补丁对比到触发MS16-030漏洞的过程。

### OLEAUT32.dll修改
OLEAUT32.dll是Windows OLE的重要动态链接库之一。通过对比补丁前后的函数列表，我们重点关注了`_ResToIcon`函数的变化。下图展示了该函数在补丁前后逻辑流程的对比：

![ResToIcon 函数补丁前后逻辑流程对比](https://example.com/image.png)

通过对流程图的对比，我们可以发现`_ResToIcon`函数在执行逻辑上有许多变化。我们需要进一步分析每个代码块的变化，以确定它们是否与漏洞修复有关。

#### 关键代码块分析
在分析过程中，我们发现以下代码块可能是触发MS16-030漏洞的关键部分：
```c
call SizeTAdd
call ULongLongToULong
```

- `SizeTAdd`：这是OLEAUT32.dll中的一个内联函数，用于进行算术运算并检查结果的有效性，对性能影响较小。
- `ULongLongToULong`：同样是OLEAUT32.dll中的内联函数，用于类型转换并检查结果的有效性，对性能影响较小。

### 符号路径执行
为了使符号路径执行到上述关键代码块，我们需要找到一条能够调用`_ResToIcon`函数的路径。通过分析，我们选择了由`vbscript.dll`中调用的导入函数`OLEAUT32!_OleLoadPicture`作为入口点。

#### vbscript.dll执行路径
通过IDA Pro打开`vbscript.dll`并查看其流程图，我们可以看到`_OleLoadPicture`函数的调用过程非常简单。最终，`vbscript!VbsLoadPicture`会调用`OLEAUT32!_OleLoadPicture`，从而进入我们关注的分支。

## PoC构造
为了验证我们的分析，我们尝试构造一个PoC（Proof of Concept）来触发该漏洞。

1. **断点设置**：在`vbscript.dll`中调用`OleLoadPicture`的位置设置断点。
2. **图标创建**：创建一个图标文件，并使用`vbscript LoadPicture` API加载该图标。
3. **调试分析**：通过Windbg附加进程并跟踪执行过程。

在调试过程中，我们发现`StgIsStorageFile`函数阻止了`OleLoadPicture`的调用。经过进一步分析，我们发现需要创建一个结构化的存储对象，并插入图片流来绕过这一检查。

### 结构化存储对象
我们使用OpenMCDF工具创建了一个包含图片流的结构化存储对象。具体步骤如下：
1. 在OpenMCDF界面中创建文件，并将流名称改为“CONTENTS”。
2. 使用vbscript脚本加载该文件，并调用`LoadPicture`函数。

通过这些步骤，我们成功命中了`OleLoadPicture`断点，并进一步跟踪到了`_ResToIcon`函数。

### 畸形文件生成
为了触发漏洞，我们使用dumb fuzzer生成畸形文件，并通过eEye公司的自动化调试工具进行测试。经过多次测试，我们在第619次尝试时捕获到了一次崩溃。

### 总结
通过补丁对比和PoC构造，我们成功复现了MS16-030漏洞。打上补丁后，该PoC无法再触发漏洞。使用bindiff等工具可以显著加快补丁分析进度，并有助于全面了解动态链接库的变化情况。此外，将文件类型转换为结构化存储进行测试也可能成为未来漏洞挖掘的一个有趣方向。

希望本文能为大家提供有价值的参考。