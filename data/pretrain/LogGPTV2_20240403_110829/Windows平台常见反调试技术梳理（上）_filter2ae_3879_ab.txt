        PVOID pPeb64 = GetPEB64();
        PVOID heap = 0;
        DWORD offsetProcessHeap = 0;
        PDWORD heapFlagsPtr = 0, heapForceFlagsPtr = 0;
        BOOL x64 = FALSE;
    #ifdef _WIN64
        x64 = TRUE;
        offsetProcessHeap = 0x30;
    #else
        offsetProcessHeap = 0x18;
    #endif
        heap = (PVOID)*(PDWORD_PTR)((PBYTE)pPeb + offsetProcessHeap);
        heapFlagsPtr = (PDWORD)((PBYTE)heap + GetHeapFlagsOffset(x64));
        heapForceFlagsPtr = (PDWORD)((PBYTE)heap + GetHeapForceFlagsOffset(x64));
        if (*heapFlagsPtr & ~HEAP_GROWABLE || *heapForceFlagsPtr != 0)
        {
            std::cout  uf kernelbase!CheckRemotedebuggerPresent
    KERNELBASE!CheckRemoteDebuggerPresent:
    ...
    75207a24 6a00            push    0
    75207a26 6a04            push    4
    75207a28 8d45fc          lea     eax,[ebp-4]
    75207a2b 50              push    eax
    75207a2c 6a07            push    7
    75207a2e ff7508          push    dword ptr [ebp+8]
    75207a31 ff151c602775    call    dword ptr [KERNELBASE!_imp__NtQueryInformationProcess (7527601c)]
    75207a37 85c0            test    eax,eax
    75207a39 0f88607e0100    js      KERNELBASE!CheckRemoteDebuggerPresent+0x2b (7521f89f)
    ...
如果我们查看[NtQueryInformationProcess](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684280\(v=vs.85).aspx)文档，就可知上面汇编代码中，因为`ProcessInformationClass`参数（第2个参数）值为7，`CheckRemoteDebuggerPresent`函数会被赋予`DebugPort`值。如下反调试示例代码就调用了`NtQueryInformationProcess`：
    typedef NTSTATUS(NTAPI *pfnNtQueryInformationProcess)(
        _In_      HANDLE           ProcessHandle,
        _In_      UINT             ProcessInformationClass,
        _Out_     PVOID            ProcessInformation,
        _In_      ULONG            ProcessInformationLength,
        _Out_opt_ PULONG           ReturnLength
        );
    const UINT ProcessDebugPort = 7;
    int main(int argc, char *argv[])
    {
        pfnNtQueryInformationProcess NtQueryInformationProcess = NULL;
        NTSTATUS status;
        DWORD isDebuggerPresent = 0;
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        if (NULL != hNtDll)
        {
            NtQueryInformationProcess = (pfnNtQueryInformationProcess)GetProcAddress(hNtDll, "NtQueryInformationProcess");
            if (NULL != NtQueryInformationProcess)
            {
                status = NtQueryInformationProcess(
                    GetCurrentProcess(),
                    ProcessDebugPort,
                    &isDebuggerPresent,
                    sizeof(DWORD),
                    NULL);
                if (status == 0x00000000 && isDebuggerPresent != 0)
                {
                    std::cout 
    #include "mhook.h"
    typedef NTSTATUS(NTAPI *pfnNtQueryInformationProcess)(
        _In_      HANDLE           ProcessHandle,
        _In_      UINT             ProcessInformationClass,
        _Out_     PVOID            ProcessInformation,
        _In_      ULONG            ProcessInformationLength,
        _Out_opt_ PULONG           ReturnLength
        );
    const UINT ProcessDebugPort = 7;
    pfnNtQueryInformationProcess g_origNtQueryInformationProcess = NULL;
    NTSTATUS NTAPI HookNtQueryInformationProcess(
        _In_      HANDLE           ProcessHandle,
        _In_      UINT             ProcessInformationClass,
        _Out_     PVOID            ProcessInformation,
        _In_      ULONG            ProcessInformationLength,
        _Out_opt_ PULONG           ReturnLength
        )
    {
        NTSTATUS status = g_origNtQueryInformationProcess(
            ProcessHandle,
            ProcessInformationClass,
            ProcessInformation,
            ProcessInformationLength,
            ReturnLength);
        if (status == 0x00000000 && ProcessInformationClass == ProcessDebugPort)
        {
            *((PDWORD_PTR)ProcessInformation) = 0;
        }
        return status;
    }
    DWORD SetupHook(PVOID pvContext)
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        if (NULL != hNtDll)
        {
            g_origNtQueryInformationProcess = (pfnNtQueryInformationProcess)GetProcAddress(hNtDll, "NtQueryInformationProcess");
            if (NULL != g_origNtQueryInformationProcess)
            {
                Mhook_SetHook((PVOID*)&g_origNtQueryInformationProcess, HookNtQueryInformationProcess);
            }
        }
        return 0;
    }
    BOOL WINAPI DllMain(HINSTANCE hInstDLL, DWORD fdwReason, LPVOID lpvReserved)
    {
        switch (fdwReason)
        {
        case DLL_PROCESS_ATTACH:
            DisableThreadLibraryCalls(hInstDLL);
            CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)SetupHook, NULL, NULL, NULL);
            Sleep(20);
        case DLL_PROCESS_DETACH:
            if (NULL != g_origNtQueryInformationProcess)
            {
                Mhook_Unhook((PVOID*)&g_origNtQueryInformationProcess);
            }
            break;
        }
        return TRUE;
    }
###  基于NtQueryInformationProcess的其他反调试技术
有些反调试技术还用到了`NtQueryInformationProcess`提供的信息，包括如下技术：
  * `ProcessDebugPort 0x07` – 前面已讨论过
  * `ProcessDebugObjectHandle 0x1E`
  * `ProcessDebugFlags 0x1F`
  * `ProcessBasicInformation 0x00`
接下来我们详细讨论下后3种技术。
**ProcessDebugObjectHandle**
从Windows XP开始，系统会为被调试进程创建一个“调试对象”。检查当前进程是否存在“调试对象”的代码如下所示：
    status = NtQueryInformationProcess(
                GetCurrentProcess(),
                ProcessDebugObjectHandle,
                &hProcessDebugObject,
                sizeof(HANDLE),
                NULL);
    if (0x00000000 == status && NULL != hProcessDebugObject)
    {
        std::cout << "Stop debugging program!" << std::endl;
        exit(-1);
    }
如果调试对象存在，那么当前进程正在被调试。
**ProcessDebugFlags**
检查该标志时，会返回`EPROCESS`内核结构中`NoDebugInherit`位的取反值。如果`NtQueryInformationProcess`函数的返回值为0，那么该进程正在被调试。使用这种原理的反调试代码如下所示：
    status = NtQueryInformationProcess(
        GetCurrentProcess(),
        ProcessDebugObjectHandle,
        &debugFlags,
        sizeof(ULONG),
        NULL);
    if (0x00000000 == status && NULL != debugFlags)
    {
        std::cout << "Stop debugging program!" << std::endl;
        exit(-1);
    }
**ProcessBasicInformation**
当使用`ProcessBasicInformation`标志来调用`NtQueryInformationProcess`函数时，就会返回`PROCESS_BASIC_INFORMATION`结构体：
    typedef struct _PROCESS_BASIC_INFORMATION {
        NTSTATUS ExitStatus;
        PVOID PebBaseAddress;
        ULONG_PTR AffinityMask;
        KPRIORITY BasePriority;
        HANDLE UniqueProcessId;
        HANDLE InheritedFromUniqueProcessId;
    } PROCESS_BASIC_INFORMATION, *PPROCESS_BASIC_INFORMATION;
这个结构体中最有意思的就是`InheritedFromUniqueProcessId`字段。这里我们需要获取父进程的名称，然后将其与常用的调试器进行对比。使用这种方法的反调试技术代码如下所示：
    std::wstring GetProcessNameById(DWORD pid)
    {
        HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (hProcessSnap == INVALID_HANDLE_VALUE)
        {
            return 0;
        }
        PROCESSENTRY32 pe32;
        pe32.dwSize = sizeof(PROCESSENTRY32);
        std::wstring processName = L"";
        if (!Process32First(hProcessSnap, &pe32))
        {
            CloseHandle(hProcessSnap);
            return processName;
        }
        do
        {
            if (pe32.th32ProcessID == pid)
            {
                processName = pe32.szExeFile;
                break;
            }
        } while (Process32Next(hProcessSnap, &pe32));
        CloseHandle(hProcessSnap);
        return processName;
    }
    status = NtQueryInformationProcess(
        GetCurrentProcess(),
        ProcessBasicInformation,
        &processBasicInformation,
        sizeof(PROCESS_BASIC_INFORMATION),
        NULL);
    std::wstring parentProcessName = GetProcessNameById((DWORD)processBasicInformation.InheritedFromUniqueProcessId);
    if (L"devenv.exe" == parentProcessName)
    {
        std::cout << "Stop debugging program!" << std::endl;
        exit(-1);
    }
**如何绕过**
绕过`NtQueryInformationProcess`检查的方法非常简单。我们需要修改`NtQueryInformationProcess`函数的返回值，修改成调试器不存在的值即可：
1、将`ProcessDebugObjectHandle`设置为0；
2、将`ProcessDebugFlags`设置为1；
3、对于`ProcessBasicInformation`，将`InheritedFromUniqueProcessId`的值修改为其他进程的ID，如`explorer.exe`。