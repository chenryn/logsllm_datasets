  * addSuiteTab
该接口实现创建一个自定义选项卡到Burp的选项栏中，默认我们的输出只会在插件的output处输出，如果想输出在界面中，就需要实现此接口。
这方面涉及到java的图形化开发，其实和burp就没多大关系了，不懂也没关系，我们照葫芦画瓢就可以了。
在实现这块之前，请读者先思考一下，我们实现一个图形化的界面有几种目的，在这里我先说一下我的个人观点。
1.实现插件与用户交互  
2.更好的显示漏洞细节
其实实现图形化无非就这两点，所以我们现在来尝试实现这两个功能。
以Burp的官方案例CustomLogger为例：[custom-logger](https://github.com/PortSwigger/custom-logger/blob/master/python/CustomLogger.py)
整个插件实现起来的效果如下：
其实就是展示了我们的数据包是从burp的哪个模块发出去的，并且显示出数据包的详细内容。
如果我们想改改，将此处整成展示漏洞详情的页面，需要怎么改呢？
要实现这个功能，我们需要修改几个地方。
1.将Tool修改为param(即存在漏洞的参数)  
2.只将存在漏洞的页面显示在这里，其他的不显示。
通过全局搜索的方式，我们可以找到定义Tool的地方：
此时我们将TOOL修改为PARAM，就算简单完成了第一步：
    def getColumnName(self, columnIndex):
        if columnIndex == 0:
            return "PARAM"
        if columnIndex == 1:
            return "URL"
        return ""
但是我们要注意的是，现在只是修改了其对应的标签名，并没有修改其对应输出的内容，此处输出的内容依旧是toolflag对应的burp组件(如果不知道toolflag是什么，请仔细阅读前文)：
如果此处我们想显示为当前url的query，如何做到呢？将想法分割为多个小步，是我实现一个目的的基本办法，所以我们将`显示为当前url的query`分成如下小步来实现：
1.找到显示此处的位置  
2.修改显示内容
第一个问题和第二个问题都很容易解决，我们只需要找到输出此处内容的方法即可：
columnIndex=0对应着PARAM，而columnIndex=1对应着URL，此处稍微修改一下：
    def getValueAt(self, rowIndex, columnIndex):
        logEntry = self._log.get(rowIndex)
        url = logEntry._url.toString()
        if urlparse(url).query =='':
            return
        if columnIndex == 0:
            return urlparse(url).query
        if columnIndex == 1:
            return logEntry._url.toString()
        return ""
实现效果：
此时虽然只显示出了带有参数的URL，但是却多了很多空白行，这样看起来很丑，所以我们需要找到是哪个方法调用了getValueAt方法，并修改对应点。
通过全局搜索getValueAt这个关键字，我发现并没有任何地方显式的调用了getValueAt方法：
那么很明显了，此处就是隐式的调用了getValueAt方法：
此处为burp处理请求的方法，而使用者也已经注释的很清楚了，这里就是添加log的地方，由于此处只有一个图形化界面的操作fireTableRowsInserted，所以推测就是此处对表格进行插入的，所以我们只需要在插入之前判断一下url是否带有query即可：
此时重新加载一次插件，就可以看到我们想要的效果了：
以上只是简单的以一个不懂任何图形化界面的新手来完成这些操作，通过此例，我们可以知道即使不会任何图形化界面的开发也不必要，照葫芦画瓢即可，实在不行直接看官方文档，一样是可以实现我们想实现的功能的。
通过以上案例，我们实现了`更好的显示漏洞细节`，那么如何与用户交互呢，一样的，让我们来照葫芦画瓢。
先思考与用户交互需要什么，无非就是一个输入框，一个确认按钮，程序通过监听按钮来获取用户输入，代入到程序的执行过程中。
以lufe1师傅的xxe检测插件为例：[burp插件LFI
scanner第二版](https://lufe1.cn/2018/05/18/Burp%20XXE%20Scanner%20%E6%8F%92%E4%BB%B6/)
先看看图形化实现效果：
此处只说明图形化相关的配置：
    public class XxeOption implements ITab, ActionListener {
        JPanel jp;
        JTextField jtfId,jtfToken;
        JButton jb;
        JLabel jlId,jlToken;
        private final IBurpExtenderCallbacks callbacks;
        public XxeOption(final IBurpExtenderCallbacks callbacks) {
            this.callbacks = callbacks;
            jp = new JPanel();
            jlId = new JLabel("Identifier:");
            jlToken = new JLabel("API Token:");
            jtfId = new JTextField(10);
            jtfToken = new JTextField(20);
            //设置Id,Token文本框
            File file = new File("xxe.config");
            if(file.exists()){
                String info = ReadConfig();
                if(info.contains("|"))
                {
                    jtfId.setText(info.split("\\|")[0]);
                    jtfToken.setText(info.split("\\|")[1]);
                }
            }
            jb = new JButton("保存");
            jb.addActionListener(this);
            jp.add(jlId);
            jp.add(jtfId);
            jp.add(jlToken);
            jp.add(jtfToken);
            jp.add(jb);
            callbacks.customizeUiComponent(jtfToken);
            callbacks.addSuiteTab(XxeOption.this);
        }
        //写入配置
        public void WriteConfig(String data)
        {
            try{
                File file = new File("xxe.config");
                //if file doesnt exists, then create it
                if(!file.exists()){
                    file.createNewFile();
                }
                //true = append file
                FileWriter fileWritter = new FileWriter(file.getName(),false);
                BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
                bufferWritter.write(data);
                bufferWritter.close();
            }catch(IOException e){
                e.printStackTrace();
            }
        }
        //读取配置
        public String ReadConfig()
        {
            StringBuilder result = new StringBuilder();
            try{
                BufferedReader br = new BufferedReader(new FileReader("xxe.config"));//构造一个BufferedReader类来读取文件
                String s = null;
                while((s = br.readLine())!=null){//使用readLine方法，一次读一行
                    result.append(s);
                }
                br.close();
            }catch(Exception e){
                e.printStackTrace();
            }
            return result.toString();
        }
        @Override
        public String getTabCaption() {
            return "XXEScanner";
        }
        @Override
        public Component getUiComponent() {
            return jp;
        }
        @Override
        public void actionPerformed(ActionEvent e) {
            if((jtfId.getText() != "") && (jtfToken.getText() != ""))
            {
                String path = "";
                File directory  = new File(".");
                try {
                    path = directory.getCanonicalPath() + "\\xxe.config";
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
                WriteConfig(jtfId.getText() + "|" +jtfToken.getText());
            }else {
                JOptionPane.showMessageDialog(jp, "ID 和 Token不能为空", "提示",JOptionPane.WARNING_MESSAGE);
            }
        }
    }
此处实现了两个接口：ITab, ActionListener
重点在XxeOption这个方法：
    public XxeOption(final IBurpExtenderCallbacks callbacks) {
            this.callbacks = callbacks;
            jp = new JPanel();
            jlId = new JLabel("Identifier:");
            jlToken = new JLabel("API Token:");
            jtfId = new JTextField(10);
            jtfToken = new JTextField(20);
            //设置Id,Token文本框
            File file = new File("xxe.config");
            if(file.exists()){
                String info = ReadConfig();
                if(info.contains("|"))
                {
                    jtfId.setText(info.split("\\|")[0]);
                    jtfToken.setText(info.split("\\|")[1]);
                }
            }
            jb = new JButton("保存");
            jb.addActionListener(this);
            jp.add(jlId);
            jp.add(jtfId);
            jp.add(jlToken);
            jp.add(jtfToken);
            jp.add(jb);
            callbacks.customizeUiComponent(jtfToken);
            callbacks.addSuiteTab(XxeOption.this);
        }
        //写入配置
        public void WriteConfig(String data)
        {
            try{
                File file = new File("xxe.config");
                //if file doesnt exists, then create it
                if(!file.exists()){
                    file.createNewFile();
                }
                //true = append file
                FileWriter fileWritter = new FileWriter(file.getName(),false);
                BufferedWriter bufferWritter = new BufferedWriter(fileWritter);
                bufferWritter.write(data);
                bufferWritter.close();
            }catch(IOException e){
                e.printStackTrace();
            }
        }
先是new了一个JPanel类，24-27行设置了文本内容以及文本框长度：
    jlId = new JLabel("Identifier:");
    jlToken = new JLabel("API Token:");
    jtfId = new JTextField(10);
    jtfToken = new JTextField(20);
JLabel传入一个字符串代表创建一个标签，标签的名称为传入的字符串，JTextField(10)代表长度为10的文本框。
31-40行用于判断有无历史配置文件，如果有则自动载入配置文件中的内容到文本框中：
    File file = new File("xxe.config");
    if(file.exists()){
        String info = ReadConfig();
        if(info.contains("|"))
        {
            jtfId.setText(info.split("\\|")[0]);
            jtfToken.setText(info.split("\\|")[1]);
        }
    }
42-43行用于创建一个按钮，并监听此按钮的事件：
    jb = new JButton("保存");
    jb.addActionListener(this);
当点击此按钮后，会触发actionPerformed方法，在110-128行重写了此方法：
    @Override
        public void actionPerformed(ActionEvent e) {
            if((jtfId.getText() != "") && (jtfToken.getText() != ""))
            {
                String path = "";
                File directory  = new File(".");
                try {
                    path = directory.getCanonicalPath() + "\\xxe.config";
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
                WriteConfig(jtfId.getText() + "|" +jtfToken.getText());
            }else {
                JOptionPane.showMessageDialog(jp, "ID 和 Token不能为空", "提示",JOptionPane.WARNING_MESSAGE);
            }
        }
    }
45-47行添加了组件：
    jp.add(jlId);
    jp.add(jtfId);
    jp.add(jlToken);
    jp.add(jtfToken);
    jp.add(jb);
53行代码在burp中创建了一个自定义选项卡：
    callbacks.addSuiteTab(XxeOption.this);
以上代码实现了所有图形化的界面，那么我们在插件代码中如何与用户交互？
来到插件入口处：[BurpExtender.java](https://github.com/lufeirider/Project/blob/bccb10837f4075508c4af616e2d619411b64078c/LXXEScanner/src/burp/BurpExtender.java)
在43行代码中实例化了XxeOption这个类：
    xxeOption = new XxeOption(callbacks);
并在被动扫描插件处调用了他：
    byte[] xxePayload = ("\n" +
                    "\n" +
                    "%remote;]>\n" +
                    "").getBytes();
以上代码实现了与用户传递进行交互的功能。
  * removeSuiteTab
从字面意思理解，addSuiterTab用于添加自定义选项卡，那么removeSuiteTab就是用于删除自定义选项卡了，这功能基本用不到，不作讲解。
大概到用途就是给一个按钮，比如一个关闭选项卡的按钮，点击后触发removeSuiteTab方法并传日当前的ITab实例化对象。
  * customizeUiComponent
这个方法不需要实现，可以用ITab.getUiComponent来代替，没怎么用过emmm。
  * addToSiteMap
简而言之，此方法就是用于将某个数据包添加到burp的sitemap中的。
参考代码：
    from burp import IBurpExtender
    from burp import IHttpListener
    from burp import IBurpExtenderCallbacks
    class BurpExtender(IBurpExtender, IHttpListener, IBurpExtenderCallbacks):
        def registerExtenderCallbacks( self, callbacks):
            self._helpers = callbacks.getHelpers()
            self._callbacks = callbacks