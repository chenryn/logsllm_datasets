21 ; call printf(): 
22   4006fc:  
   8fbc0010  
lw   
gp,16(sp) 
23   400700:  
   3c040040  
lui   
a0,0x40 
24 ; get address of x: 
25   400704:  
   8f828044  
lw   
v0,-32700(gp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
72 
逆向工程权威指南（上册） 
26   400708:  
   8f99803c  
lw   
t9,-32708(gp) 
27 ; load value from "x" variable and pass it to printf() in $a1: 
28   40070c:  
   8c450000  
lw   
a1,0(v0) 
29   400710:  
   0320f809  
jalr   
t9 
30   400714:  
   24840900  
addiu  
a0,a0,2304 ; branch delay slot 
31 ; function epilogue: 
32   400718:  
   8fbf001c  
lw   
ra,28(sp) 
33   40071c:  
   00001021  
move   
v0,zero 
34   400720:  
   03e00008  
jr   
ra 
35   400724:  
   27bd0020  
addiu  
sp,sp,32 ; branch delay slot 
36 ; pack of NOPs used for aligning next function start on 16-byte boundary: 
37   400728:  
   00200825  
move   
at,at 
38   40072c:  
   00200825  
move   
at,at 
第 18 行处的指令对全局指针 GP 和一个负数值的偏移量求和，以此计算变量 x 在 64KB 数据缓冲区里
的访问地址。此外，三个外部函数（puts()、scanf()、printf()）在 64KB 数据空间里的全局地址，也是借助
GP 计算出来的（第 9 行、第 16 行、第 26 行）。GP 指向数据空间的正中央。经计算可知，三个函数的地
址和变量 x 的地址都在数据缓冲区的前端。这并不意外，因为这个程序已经很短小了。 
此外，值得一提的是函数结尾处的两条 NOP 指令。它的实际指令是空操作指令“MOVE$AT, $AT”。
借助这两条 NOP 指令，后续函数的起始地址可向 16 字节边界对齐。 
有初始值的全局变量 
我们对前文的例子做相应修改，把有关行改为： 
int x=10; // default value 
则可得如下代码段。 
指令清单 7.10  Optimizing GCC 4.4.5 (IDA) 
.text:004006A0  main: 
.text:004006A0 
.text:004006A0  var_10     = -0x10 
.text:004006A0  var_8      = -8 
.text:004006A0  var_4      = -4 
.text:004006A0 
.text:004006A0           
lui      
$gp, 0x42 
.text:004006A4           
addiu    
$sp, -0x20 
.text:004006A8           
li       
$gp, 0x418930 
.text:004006AC           
sw       
$ra, 0x20+var_4($sp) 
.text:004006B0           
sw       
$s0, 0x20+var_8($sp) 
.text:004006B4           
sw       
$gp, 0x20+var_10($sp) 
.text:004006B8           
la       
$t9, puts 
.text:004006BC           
lui      
$a0, 0x40 
.text:004006C0           
jalr     
$t9 ; puts 
.text:004006C4           
la       
$a0, aEnterX     # "Enter X:" 
.text:004006C8           
lw       
$gp, 0x20+var_10($sp) 
; prepare high part of x address: 
.text:004006CC           
lui      
$s0, 0x41 
.text:004006D0           
la       
$t9, __isoc99_scanf 
.text:004006D4           
lui      
$a0, 0x40 
; add low part of x address: 
.text:004006D8           
addiu    
$a1, $s0, (x - 0x410000) 
; now address of x is in $a1. 
.text:004006DC           
jalr     
$t9 ; __isoc99_scanf 
.text:004006E0           
la       
$a0, aD          # "%d" 
.text:004006E4           
lw       
$gp, 0x20+var_10($sp) 
; get a word from memory: 
.text:004006E8           
lw       
$a1, x 
; value of x is now in $a1. 
.text:004006EC           
la       
$t9, printf 
.text:004006F0           
lui      
$a0, 0x40 
.text:004006F4           
jalr     
$t9 ; printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
73 
.text:004006F8           
la       
$a0, aYouEnteredD___  # "You entered %d...\n" 
.text:004006FC           
lw       
$ra, 0x20+var_4($sp) 
.text:00400700           
move     
$v0, $zero 
.text:00400704           
lw       
$s0, 0x20+var_8($sp) 
.text:00400708           
jr       
$ra 
.text:0040070C           
addiu    
$sp, 0x20 
... 
.data:00410920           
.globl  x 
.data:00410920 x:        
.word   0xA 
为何它处没有了.sdata 段？这可能是受到了 GCC 选项的影响。不论如何，变量 x 出现在.data 段里。这
个段会被加载到常规的通用内存区域，我们可以在此看到变量的处理方法。 
MTPS 程序必须使用成对指令处理变量的地址。本例使用的是 LUI(Load Upper Immediate)和 ADDIU 
(Add Immediate Unsigned Word)指令时。 
我们继续借助 objdump 观察确切地操作指令。 
指令清单 7.11  Optimizing GCC 4.4.5 (objdump) 
004006a0 : 
  4006a0:        3c1c0042     
lui    
gp,0x42 
  4006a4:        27bdffe0     
addiu  
sp,sp,-32 
  4006a8:        279c8930     
addiu  
gp,gp,-30416 
  4006ac:        afbf001c     
sw      
ra,28(sp) 
  4006b0:        afb00018     
sw       
s0,24(sp) 
  4006b4:        afbc0010     
sw       
gp,16(sp) 
  4006b8:        8f998034     
lw       
t9,-32716(gp) 
  4006bc:        3c040040     
lui      
a0,0x40 
  4006c0:        0320f809     
jalr     
t9 
  4006c4:        248408d0     
addiu    
a0,a0,2256 
  4006c8:        8fbc0010     
lw       
gp,16(sp) 
; prepare high part of x address: 
  4006cc:        3c100041     
lui      
s0,0x41 
  4006d0:        8f998038     
lw       
t9,-32712(gp) 
  4006d4:        3c040040     
lui      
a0,0x40 
; add low part of x address: 
  4006d8:        26050920     
addiu    
a1,s0,2336 
; now address of x is in $a1. 
  4006dc:        0320f809     
jalr     
t9 
  4006e0:        248408dc     
addiu    
a0,a0,2268 
  4006e4:        8fbc0010     
lw       
gp,16(sp) 
; high part of x address is still in $s0.   
; add low part to it and load a word from memory: 
  4006e8:        8e050920     
lw       
a1,2336(s0) 
; value of x is now in $a1.   
  4006ec:        8f99803c     
lw       
t9,-32708(gp) 
  4006f0:        3c040040     
lui      
a0,0x40 
  4006f4:        0320f809     
jalr     
t9 
  4006f8:        248408e0     
addiu    
a0,a0,2272 
  4006fc:        8fbf001c     
lw       
ra,28(sp) 
  400700:        00001021     
move     
v0,zero 
  400704:        8fb00018     
lw       
s0,24(sp) 
  400708:        03e00008     
jr       
ra 
  40070c:        27bd0020     
addiu   
sp,sp,32 
这个程序使用 LUI 和 ADDIU 指令对生成变量地址。地址的高地址位仍然存储于$S0 寄存器，而且单条 LW
指令（Load Word）即可封装这个偏移量。所以，单条 LW 指令足以提取变量的值，然后把它交付给 printf()函数。 
T-字头的寄存器名称是临时数据寄存器的助记符。此外，这段程序还使用到了 S-字头的寄存器名称。
在调用其他函数之前，调用方函数应当保管好自身 S-字头的寄存器的值，避免它们受到被调用方函数的影
响，举例来说在 0x4006cc 处的指令对$S0 寄存器赋值，而后程序调用了 scanf()函数，接着地址为 0x4006e8
的指令然继续调用$S0 据此我们可以判断。scanf()函数不会变更$S0 的值。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
74 
逆向工程权威指南（上册） 
7.3 scanf()函数的状态监测 
大家都知道 scanf()不怎么流行了，但是这并不代表它派不上用场了。在万不得已必须使用这个函数的
时候，切记检查函数的退出状态是否正确。例如： 
#include  
int main() 
{ 
          int x; 
          printf ("Enter X:\n"); 
          if (scanf ("%d", &x)==1) 
                    printf ("You entered %d...\n", x); 
          else 
                    printf ("What you entered? Huh?\n"); 
          return 0;  
}; 
根据这个函数的功能规范
①
7.3.1 MSVC：x86 
，scanf()函数在退出时会返回成功赋值的变量总数。 
就本例子而言，正常情况下：用户输入一个整型数字时函数返回 1；如果没有输入的值存在问题（或
为 EOF/没有输入数据），scanf()则返回 0。 
为此我们可在 C 程序里添加结果检查的代码，以便在出现错误时进行相应的处理。 
我们来验证一下： 
C:\...>ex3.exe 
Enter X: 
123 
You entered 123... 
C:\...>ex3.exe 
Enter X: 
ouch 
What you entered? Huh? 
使用 MSVC2010 生成的汇编代码如下所示。 
          lea     eax, DWORD PTR _x$[ebp] 
          push    eax 
          push    OFFSET $SG3833 ; '%d', 00H 
          call    _scanf 
          add     esp, 8 
          cmp     eax, 1 
          jne     SHORT $LN2@main 
          mov     ecx, DWORD PTR _x$[ebp] 