1. Our attacks suggest that the AES-COPA designers
should also claim a birthday-bound security on tag
guessing, instead of a full security. Although the AES-
COPA designers proved a birthday-bound security on
integrity (i.e. existential forgery resistance) by refer-
ring to the integrity security proof of COPA, they did
not prove its security on tag guessing (i.e. univer-
sal forgery), but they claimed a full security for it.
Our attacks have a complexity similar to the com-
plexity of the proven birthday-bound security on in-
tegrity, showing that AES-COPA (v1/2) has roughly
(at most) a birthday-bound security against tag guess-
ing in the nonce-respecting scenario, rather than a full
security as the designers claimed or conjectured. (Note
that AES-COPA merged recently with another second
round candidate of CAESAR and the merger [5] went
into the third round of CAESAR in August 2016. The
merger uses a completely diﬀerent nonce process and
does not make any security claim or conjection on tag
guessing or universal forgery resistance.)
2. The COPA designers proved a birthday-bound security
on integrity (i.e. existential forgery resistance), but
did not specify its security against universal forgery.
As mentioned earlier, existential and universal forgery
attacks represent diﬀerent threat levels and usually
have diﬀerent complexity levels. The security claim
and conjecture of AES-COPA (v1/2) indicated that
the designers might have thought that COPA had a
full security against universal forgery (even under the
birthday-bound data constraint), however, our attacks
show that COPA has roughly (at most) a birthday-
bound security against universal forgery, the same se-
curity level as for integrity. Thus, COPA users should
not take it for granted that the general belief of a
full security on universal forgery holds for COPA, and
should not misuse COPA for such a full security in
reality.
3. Our attacks show that Marble has roughly (at most) a
birthday-bound security on authenticity, rather than a
full security that the designer claimed. We would like
to mention that as a consequence, our attacks resulted
partially in the withdrawal of Marble from the CAE-
SAR competition in January 2015, together with Fuhr
et al.’s attack [10].
4. Our attacks are mainly based on the structures of
COPA and Marble, and thus designers should pay at-
tention to these attacks when designing authenticated
encryption algorithms with similar structures in the
future.
5. Lastly, if some security notion of a cryptographic al-
gorithm is proved under its most fundamental form,
it should be careful when claiming the security of an
advanced form of the security notion without making
a corresponding proof, for example, claiming universal
forgery security after proving integrity only under ex-
istential forgery security, claiming key/plaintext/state
recovery security after proving conﬁdentiality/privacy
only under distinguishing attack security [27]. Strictly
speaking, a corresponding proof or justiﬁcation is also
required for a security claim on such an advanced form.
1.2 Organization
The remainder of the paper is organised as follows.
In
the next section, we give the notation used throughout this
paper and brieﬂy describe the basic cases of the COPA and
Marble algorithms that process messages of a multiple of
the block size long. We present our almost universal forgery
attacks on COPA (as well as AES-COPA) and Marble in
Sections 3 and 4, respectively. Section 5 concludes this pa-
per.
2. PRELIMINARIES
In this section, we give the notation used throughout this
paper and brieﬂy describe the concerned basic cases of COPA
and Marble that process messages of a multiple of the block
size long (that is, no message padding is required). We refer
the reader to [1–4,12–14] for detailed speciﬁcations of COPA
and Marble.
2.1 Notation
We use the following notation throughout this paper.
⊕
bitwise logical exclusive OR (XOR) operation
∗
polynomial multiplication modulo the polynomial
x128 ⊕ x7 ⊕ x2 ⊕ x⊕ 1 in GF(2128)
||
string concatenation
the base of the natural logarithm (e = 2.71828··· )
e
2.2 The COPA Authenticated Encryption Al-
gorithm
The COPA [3] authenticated encryption mode was pub-
lished in 2013. Its internal state, key and tag have the same
length as the block size of the underlying block cipher. It has
mainly three phases: processing associated data, message
encryption, and tag generation. Fig. 1 illustrates the mes-
sage encryption and tag generation phase of COPA, where
• EK is an n-bit block cipher with a k-bit user key K;
791In 2014, AES-COPA (v1) [1] — an instantiation of COPA
that uses AES with 128 key bits [24]— was submitted to the
CAESAR competition [7], where a nonce of 128 bits long is
used and is appended to associated data, and the resulting
value is treated as the associated data in the COPA mode.
The designers claimed a 128-bit security against tag guessing
for AES-COPA (v1) [1] without giving a proof or explana-
tion on the security. In 2015, the designers made a tweaked
version (v2) [2], and also changed the previous security claim
on tag guessing to a conjecture without explanation. Under
the basic cases that process messages of a multiple of the
block size long, AES-COPA v2 diﬀers from AES-COPA v1
only in that the last mask parameter of the tag generation
phase becomes 2mbn ∗ 7 ∗ L.
2.3 The Marble Authenticated Encryption Al-
gorithm
The Marble [12] authenticated encryption algorithm is
similar to COPA. Marble has four phases: initialization, pro-
cessing associated data, message encryption, and tag gener-
ation. Compared with COPA, Marble has mainly two struc-
tural distinctions at a high level: First, it has three layers of
block cipher encryption operations to have an internal state
that is twice as long as its key or tag in order to achieve a
full security; second, the processing associated data phase
produces anther secret parameter τ , which is to be used in
the tag generation phase. Fig. 2 illustrates the message en-
cryption and tag generation phase of the newest version (i.e.
v1.2) of Marble, where
• each of the operations E1, E2 and E3 is a 4-round re-
duced version of the AES block cipher, with four ﬁxed
round subkeys chosen from the eleven round subkeys
of the AES with 128 key bits;
• the TRANS operation is deﬁned as TRANS(x, y) =
(x ⊕ y, 3 ∗ x ⊕ y), where x and y are 128-bit inputs;
• Const0, Const1 and Const2 are three 128-bit constants;
• S1 and S2 are two 128-bit internal states;
• (AD1, AD2,··· , ADabn) is an associated data of abn
128-bit blocks;
• L and τ are 128-bit secret parameters;
• (M1, M2,··· , Mmbn) is a message of mbn 128-bit blocks;
• (C1, C2,··· , Cmbn) is the ciphertext for (M1, M2,··· ,
Mmbn); and
• T is the tag for (M1, M2,··· , Mmbn).
No nonce is used in Marble.
(Note that in the last two
versions (v1.1/1.2) [13, 14] the designer mentioned that one
can opt to replace Const0 with a nonce, but this option
is not recommended by the designer). Decryption is the
inverse of encryption, and tag veriﬁcation is identical to tag
generation.
Under the basic cases that process messages of a multi-
ple of the block size long, the distinctions among the three
versions of Marble are: (1) associated data with the last
block being full should not be padded in Marble v1.0, but
should also be padded in Marble v1.1/1.2; (2) the mask pa-
rameter before E1 for the last block of associated data is
Figure 1: Message encryption and tag generation of
COPA
• L = EK (0) is an n-bit secret internal parameter, which
is called subkey sometimes [1, 2];
• S is an n-bit internal state;
• (AD1, AD2,··· , ADabn) is an associated data of abn
n-bit blocks;
• (M1, M2,··· , Mmbn) is a message of mbn n-bit blocks;
• (C1, C2,··· , Cmbn) is the ciphertext for (M1, M2,··· ,
Mmbn); and
• T is the tag for (M1, M2,··· , Mmbn).
COPA ﬁrst computes the secret parameter L, and then
generates a number of dummy masks of the form 2i∗3j∗7l∗L
for speciﬁc indices i, j and l. During the processing associ-
ated data phase, associated data should be padded if it is
not a multiple of n bits long, by appending ﬁrst a one then
as many zeros as required to reach a multiple of n; then
the (padded) associated data is divided into a series of n-bit
blocks, each block is XORed with its corresponding mask,
and the XORed value goes though a block cipher encryption
operation EK ; and ﬁnally the outputs of the block cipher
encryption operations are XORed and the resulting value
goes though another block cipher encryption operation EK .
During the message encryption phase, the message is divided
into a series of n-bit blocks, each message block is XORed
with its corresponding mask, goes though a block cipher en-
cryption operation EK , is XORed with the most recent state
value (and the parameter L only for the ﬁrst message block),
and ﬁnally the XORed value goes though another block ci-
pher encryption operation EK and is XORed with another
corresponding mask to produce a ciphertext block. Dur-
ing the tag generation phase, the XOR sum of the message
blocks is XORed with the corresponding mask, goes though
a block cipher encryption operation EK , is XORed with the
most recent state value, and ﬁnally the XORed value goes
though another block cipher encryption operation EK and
is XORed with another corresponding mask to produce the
tag for the message.
Decryption is the inverse of encryption, and tag veriﬁca-
tion is identical to tag generation. COPA can be used with-
out associated data, by setting the output of the processing
associated data phase to zero.
EK⊕AD133∗LProcessingassociateddataEK⊕AD22∗33∗LEK⊕ADabn−12abn−2∗33∗L⊕ADabn2abn−1∗34∗L⊕⊕······⊕EK2abn−1∗35∗LorADabn||1||0∗orEncryptingmessageTaggenerationEK⊕M13∗LEK⊕M22∗3∗LEK⊕Mmbn−12mbn−2∗3∗L⊕Mmbn2mbn−1∗3∗L⊕⊕······⊕⊕EK⊕C12∗LEK⊕C222∗LEK⊕Cmbn−12mbn−1∗LEK⊕Cmbn2mbn∗LEK⊕Lmbnl=1Ml2mbn−1∗32∗L⊕EK⊕T2mbn−1∗7∗LEKSL792To recover L we use an idea similar to but much simpler
than Fuhr et al.’s universal forgery attack on Marble v1.1,
due to the structure of COPA. We ﬁx a one-block message
and choose a set of associated data of one block long and the
other set of associated data of less than one block long which
meet a condition after padding. The two sets of associated
data mean that two diﬀerent mask parameters are used for
the two sets of associated data by the padding rule. At last,
we recover L by looking for a collision on the ciphertext
blocks.
We then use three ways to make a forgery: modifying only
message, or modifying only associated data, or modifying
both message and associated data.
3.1.2 Recovering the Secret Parameter L
The procedure is as follows, which is illustrated in Fig. 3.
1. Choose 2σ (associated data of one n-bit block long,
1 , M1)
2 and i = 0, 1,··· , 2σ − 1.
ﬁxed message of one n-bit block long) pairs (AD(i)
= (i, M1), where 0 < σ ≤ n
Query the COPA encryption and tag generation or-
acle, and obtain all the ciphertexts and tags for the
2σ (associated data, message) pairs; we denote by C (i)
1
and T (i) the ciphertext and tag under associated data
AD(i)
into a table indexed by
C (i)
1 .
1 , respectively. Store C (i)
1
1
can recover L from this equation.
The reason that we use padded associated data in Step 2
is that an input mask (i.e. 35∗ L) diﬀerent from the one (i.e.
34 ∗ L) used in Step 1 will be introduced for the ﬁrst block
of (padded) associated data. This state recovery attack re-
quires approximately 2σ + 2φ encryption queries, a memory
1 ),
and has a time complexity of about 2φ memory accesses
(from Step 3) and a success probability of approximately
(cid:0)2σ+φ(cid:0)n
.
of approximately n·2σ bits (as we do not need to store bC (j)
1 −(
(cid:0)n)2σ(cid:1)(2φ(cid:0)1) ≈ 1 − e
(cid:0)n)0 · (1 − 2
) · (2
2σ(cid:1)(2φ(cid:0)1)
0
(j)
n
1 , M1) = (j × 2
pairs (dAD
2. Choose (2φ − 1) (associated data of less than n bits
long, the same ﬁxed message of one n-bit block long)
pairs such that the (padded associated data, message)
2 , M1), where 0 < φ ≤ n
2 ,
j = 1, 2,··· , 2φ − 1.
(The padded associated data
are possible by the padding rule for associated data
of COPA, namely, ﬁrst a one then as many zeros as
required to reach a multiple of the block size n. Note
that 0 is an impossible value for the block of padded
associated data.) Query the COPA encryption and
tag generation oracle, and obtain all the ciphertexts
and tags for the (2φ − 1) (associated data, message)
and bT (j) the ciphertext and
1 matches one of the set {C (i)
) if any, that is bC (ω)
pairs; we denote by bC (j)
tag under associated data dAD
3. Check whether bC (j)
match(es) by (bC (ω)
4. For the match (bC (ω)
dAD
|i =
0, 1,··· , 2σ−1} for j = 1, 2,··· , 2φ−1. We denote the
1 = C (µ)
.
⊕ 34 ∗ L =
1 ⊕ 35 ∗ L by the structure of COPA. Thus, we
(j)
1 , respectively.
), we have AD(µ)