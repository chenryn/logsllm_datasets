### 优化后的文本

#### 报告函数
`report` 函数在 O(n) 时间内将所有非标记元素复制到输出数组中：

```cpp
void report(int v[], int n) {
    for (int i = 0; i < n; ++i) {
        v[i] = x[i];
    }
}
```

如果事先知道集合的大小，使用数组来实现集合较为合适。由于数组是有序的，可以利用二分查找实现 O(log n) 时间复杂度的成员查找。本节末尾将详细讨论数组的运行时间。

---

### 链表实现
如果事先不知道集合的大小，链表将是表示集合的首选结构。链表消除了插入时元素移动的成本。

`IntSetList` 类使用以下私有数据：

```cpp
private:
    int n;
    struct node {
        int val;
        node* next;
        node(int v, node* p) : val(v), next(p) {}
    };
    node* head, *sentinel;
```

链表中的每个节点包含一个整数值和指向下一个节点的指针。构造函数创建一个哨兵节点，并将其值设置为大于所有实际值的数。

```cpp
IntSetList(int maxelements, int maxval) {
    sentinel = head = new node(maxval, nullptr);
    n = 0;
}

void report(int v[]) {
    int j = 0;
    for (node* p = head; p != sentinel; p = p->next) {
        v[j++] = p->val;
    }
}
```

递归通常能简化隐藏在众多特殊情况下的编程问题。当生成 m 个随机整数时，平均每次查找的时间与 m 成正比，因此总时间与 m² 成正比。链表版本比数组版本更快，因为它使用额外的空间来避免超出数组上界。

以下是不同结构在不同集合大小下的运行时间（n=1000000，m 从 10000 到 40000）：

| 结构 | 集合大小 (m) |
| --- | ---: | ---: | ---: |
| 数组 | 0.6s | 2.6s | 11.1s |
| 简单链表 | 5.7s | 31.2s | 170.0s |
| 消除递归的链表 | 1.8s | 12.6s | 73.8s |
| 组分配的链表 | 1.2s | 5.7s | 25.4s |

如预期，数组的运行时间呈平方增长，而第一个链表的增长速度较慢但最终超过数组。通过消除递归和改进存储分配，链表性能显著提升。

---

### 二分查找树
接下来介绍支持快速查找和插入的二分查找树。以下是插入整数 31、41、59 和 26 后的树结构：

```
      59
     /  \
   31   41
  /     /
26     59
```

`IntSetBST` 类定义了节点和根：

```cpp
private:
    int n;
    struct node {
        int val;
        node* left, *right;
        node(int i) : val(i), left(nullptr), right(nullptr) {}
    };
    node* root;
```

初始化树时将根设为空，并通过递归函数执行其他操作。

```cpp
IntSetBST(int maxelements, int maxval) : root(nullptr), n(0) {}

void insert(int t) { root = rinsert(root, t); }

void report(int v[]) { vn = 0; traverse(root, v); }

node* rinsert(node* p, int t) {
    if (p == nullptr) {
        p = new node(t);
        n++;
    } else if (t < p->val) {
        p->left = rinsert(p->left, t);
    } else if (t > p->val) {
        p->right = rinsert(p->right, t);
    }
    return p;
}

void traverse(node* p, int v[]) {
    if (p == nullptr) return;
    traverse(p->left, v);
    v[vn++] = p->val;
    traverse(p->right, v);
}
```

应用程序中的元素按随机顺序插入，因此无需复杂的平衡方法。以下是不同结构在不同集合大小下的运行时间：

| 结构 | 集合大小 (m) |
| --- | ---: | ---: | ---: |
| STL set | 9.38s | 72MB | - |
| 二分查找树 | 7.30s | 56MB | - |
| 优化的二分查找树 | 3.71s | 16MB | - |
| 桶 | 2.36s | 60MB | - |
| 位向量 | 3.72s | 16MB | - |

这些时间不包括输出结果的时间。简单的二分查找树避免了 STL 的复杂平衡方法，因此稍快且占用空间更少。

---

### 整数结构
最后介绍两个常用的整数集合结构：位向量。以下是它们的私有数据和函数：

```cpp
enum { BITSPERWORD = 32, SHIFT = 5, MASK = 0x1F };
int n, hi, *x;
```

希望这些优化后的代码和说明更加清晰和专业。