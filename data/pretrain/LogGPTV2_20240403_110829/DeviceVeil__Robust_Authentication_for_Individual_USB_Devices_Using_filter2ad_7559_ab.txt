command to load a separate Linux kernel without restrictions
(e.g., no active defense against USB attacks). Kexec is a kernel
function to load another kernel from the running kernel with-
out the help of BIOS/UEFI and bootloader, which can also be
used as a jailbreak mechanism [47]. From kernel version 3.17,
kexec has an option for allowing only kernels with veriﬁable
digital signatures. (b) Insiders may also reinstall the OS on
the target PC. They can recover the previous/legitimate OS if
they keep the disk image (to avoid detection). Backup tools can
also help such attacks by allowing the seamless/instant restore
feature. (c) Attackers may also try to install a hypervisor that
allows direct access to USB devices through I/O virtualization
(e.g., Intel VT-d) to a guest OS. The host OS/hypervisor does
not interfere with such direct access.
Security assumptions for DeviceVeil include the following.
1) The adversary can have physical control of the machine
after the secure setup of DeviceVeil. We assume that
administrators deploy PCs with secure BIOS, keep the
BIOS ﬁrmware updated, and protect
the BIOS using
strong passwords that are not shared with a regular user
(see also Section VIII).
2) The adversary has root/admin privileges of the OS, but
he cannot replace the hypervisor/kernel as they are pro-
tected by secure boot (only signed updates issued by the
administrator are allowed).
3) The adversary can have physical control of USB devices,
including legitimate USB devices with PUF. He can
exploit the USB controller and modify the USB device
descriptor (i.e., device class and serial number) as in
BadUSB. However, we assume PUF is unmodiﬁed and
cannot be moved to another USB device (i.e., PUF is
integrated into the USB’s IC).
4) DeviceVeil does not control the content in USB devices,
and as such cannot protect the host OS against USB
malware in legitimate USB devices. Also, DeviceVeil
cannot prevent information leakage through an authorized
USB device. Conﬁdentiality and integrity of contents
must be protected by other means (e.g., encryption or
access control).
5) The adversary can change TPM conﬁguration (e.g., re-
set ownership via jumper settings), but cannot launch
attacks that require signiﬁcant lab efforts (chip imag-
ing/decapping). Note that TPM reset will not leak the
TPM-sealed disk encryption key (unsealed only with
speciﬁc PCR values). We also assume the TPM ﬁrmware
is also kept up-to-date (cf. [23]).
III. CURRENT COUNTERMEASURES
Several countermeasures for USB attacks have been pro-
posed and implemented in academic literature and commercial
solutions. We categorize them as USB access control, USB au-
thentication, and tamper-prooﬁng, and discuss a few examples
closely related to our work. For a comprehensive analysis of
all major defensive solutions, see Tian et al. [69].
A. USB access control
ActiveDirectory and SELinux are the most popular access
control mechanisms on Windows and Linux, respectively.
ActiveDirectory has a group policy for USB devices and
allows access control for each product or device class, but
cannot distinguish individual devices. SELinux also offers
similar access control in Linux. Solutions that support in-
dividual device authentication, mostly rely on USB serial
numbers (e.g., USBSec [78] and GoodUSB [66]). However,
USB serial numbers can be easily modiﬁed, and thus such
weak authentication can be defeated (see e.g., [44]).
USBFILTER [68] and Cinch [2] introduce packet ﬁltering
based security mechanisms for USB communication. Packet
ﬁltering can allow ﬁne-grain access control and prevent at-
tacks. USBFILTER is implemented as a reference monitor
and is statically compiled and linked into the Linux kernel
to avoid being unloaded;
it uses a database of rules for
USB packets for each application, and ﬁlters the applications
accordingly. Cinch also utilizes packet ﬁltering, but it uses two
KVM virtual machines, where the ﬁrst VM is sacriﬁcial while
the other one runs a guest OS. The sacriﬁcial VM uses I/O
virtualization and connects to USB devices directly. There is
an enforcer between the sacriﬁcial VM and the guest OS, and
packets are ﬁltered and encrypted. However, as packet ﬁltering
304
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:47 UTC from IEEE Xplore.  Restrictions apply. 
involves checking all communications to/from a USB device,
signiﬁcant overhead is incurred; e.g., USBFILTER suffered
17.6% overhead when 100MB data was transferred, and Cinch
reduced the I/O throughput from 3.4Gbps (direct) to 2.1Gbps
for USB-SSD.
SandUSB [34] and USBWall [27] use a small computer
between a USB device and a host PC, which monitors the
USB’s behaviors. SandUSB uses a Raspberry Pi2 with a
module to relay USB packets from a USB device to the
PC. SandUSB scans and analyzes USB packets using USB-
Mon [83]. USBWall uses a BeagleBone Black (BBB) and runs
USBProxy [59] to act as middleware to enumerate the devices
on behalf of the PC. USBWall has no mechanism to ﬁlter USB
protocols, and simply works as an isolated environment.
B. USB authentication
Most USB device authentication targets device class identi-
ﬁcation, instead of individual devices (as in USB 3.0 Type-C
speciﬁcations). Some solutions use the serial number of a USB
device but the serial number is easily modiﬁed. Kanguru’s
FlashTrust [28] introduces a digitally signed ﬁrmware to
protect against BadUSB, but it is not designed for individual
authentication. GoodUSB [66] offers device authentication
mediated by a human user. The user makes “the ﬁnal decision”
from the physical form of the USB device, i.e., GoodUSB
implicitly trusts its users, and thus cannot prevent
inside
attackers or unscrupulous users.
Kells [7] and ProvUSB [67] offer host authentication based
on a TPM to limit USB devices to connect only to legitimate
host computers. They require a special USB device with
computation capability (e.g., an ARM CPU). The device also
includes public key issued by the TPM on the host machine.
If the authentication (i.e., the public key veriﬁcation) fails,
the device exposes dummy ﬂash storage. The deployment cost
may be non-negligible due to the need for an on-board CPU
per USB device.
C. Tamper-prooﬁng
Robust and tamper-proof authentication is essential to pre-
vent insider attacks, but most countermeasures are installed
only in a kernel or hypervisor, which can be bypassed by
several attack vectors such as kernel replacement via kexec,
or installation of an unprotected hypervisor/OS. On the other
hand, many current PCs are equipped with UEFI secure
boot [81] that prevents the loading of unsigned/unauthorized
bootloaders or kernels. For example, Microsoft Windows Pro-
duction CA allows booting only signed Windows bootloader
and kernel. DeviceVeil utilizes the secure boot mechanism
and TPM sealing to enable tamper-prooﬁng, which resembles
Windows BitLocker to some extent.
IV. BACKGROUND
As discussed in Section I in the explanation of USB 3.0
Type-C speciﬁcation and Secure Element of SIM card, a
hardware-based tamper-proof mechanism is needed to im-
plement robust individual device authentication. In addition,
tamper-prooﬁng and OS independence are required. These
requirements are fulﬁlled by PUF and a novel combination
of security technologies in commodity PCs, i.e., TPM, secure
boot, and virtualization.
A. PUF: Physical Unclonable Function
PUFs use the delay of the electric signal or the initial state
of memory, which differs on each chip due to small variations
resulting from the manufacturing process. These features allow
deriving unique secrets from individual physical characteristics
of ICs. When the sampling points are changed, PUFs create a
different ID from the device. PUFs utilize hardware intrinsic
features and do not require any special mechanism for hiding
secret keys in tamper-proof hardware. PUFs are used for DRM,
key generation, and device authentication (see e.g., [16], [30],
[33], [36], [49], [61], [63]).
1) Fuzzy extractor: PUFs use fragile physical characteris-
tics of ICs and have an intrinsic limitation. Since PUFs are
sensitive to noise and always produce bit errors in response,
a correction technique is required. In 2004, Dodis et al. [13]
proposed circuits, known as a fuzzy extractor, to correct bit
errors by extracting uniform random bits. The fuzzy extractor
is implemented in PUF authentication and creates error correc-
tion data known as helper data [6]. The helper data is passed
to the circuits when the key is used for authentication. While
the redundant information calculated during veriﬁcation may
include noise, the original redundant information (calculated
at the initialization, and used at the veriﬁcation phase as helper
data) is noiseless. The noise in redundant information in the
veriﬁcation phase is corrected with the helper data.
2) PUF device authentication: The key created by PUF
and fuzzy extractor can be used for authentication [16],
[61]. Note that, pure PUF circuits are passive and lack
memory, and some PUF authentication circuits include an
additional cipher mechanism [30], [36], [49]. Some current
PUF authentication mechanisms are based on arbitrary string
encryption/decryption and include the circuits implementing
the ciphers (see later sections for DeviceVeil).
B. TPM and Trusted Boot
Trusted Platform Module (TPM) is a secure chip avail-
able on many commodity PCs. DeviceVeil utilizes platform
integrity and sealing/unsealing of TPM.
1) Platform integrity: The measurement of platform in-
tegrity is the core concept of trusted boot consisting of multiple
phases: measuring and extending cryptographic hash values
of hardware and software components. When the system is
powered on, the immutable bootstrap code (CRTM: Core Root
of Trust for Measurement) measures the hash value (e.g.,
through SHA-1 in TPM 1.2) of the BIOS and extends it in
the PCR (Platform Conﬁguration Register) of TPM before
transferring control. The TCG-BIOS also measures the hash
values of peripheral devices, option ROMs, and the bootloader,
and extends them in the same manner. The same method is
implemented in the bootloader and kernel, and thus enables a
chain of trust.
305
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:47 UTC from IEEE Xplore.  Restrictions apply. 
2) Sealing/Unsealing:
Sealing/unsealing
of TPM is
limited by the measured PCR values to load a key in a
TPM. Windows BitLocker uses this mechanism to limit
access to the key when PCRs show the values which are
extended at a legitimate booting (i.e., the boot procedures
and devices remain original). In order to offer a FDE (Full
Disk Encryption)
the
storage into the non-encrypted and encrypted partitions, as
the non-encrypted partition is used by the bootloader before
the secret key is unsealed from the TPM. Sealing/unsealing
of TPM is also used for other applications to conﬁrm the
correctness of the machine, boot sequence and BIOS/UEFI.
to Windows, BitLocker
separates
C. Secure Boot
Although trusted boot can measure platform integrity, it
cannot prevent kexec and reinstallation attacks (even if the
disk remains encrypted). UEFI secure boot [81] can be used
to prevent booting unauthorized kernels (e.g., not signed
by a trusted authority). Secure boot requires two keys and
two databases. The Platform Key (PK), typically set by the
manufacturer, is the encryption key for the Key Exchange
Key (KEK). KEK is the encryption key for Authorized DB
(db) and Unauthorized DB (dbx), which are databases for
public-keys issued by a CA, and include hashes for authorized
and unauthorized modules (e.g., bootloaders, hypervisors or
kernels). Unfortunately, most PCs do not allow customizing
the keys and databases of secure boot. As a workaround, many
Linux distributions use a pre-bootloader signed by Microsoft
(e.g., Fedora’s shim.elf [55]).
D. Virtualization Technology (Hypervisor)
Most secure hypervisors function as the trusted computing
base (TCB) to protect a guest OS. Some solutions leverage
trusted computing, and guarantee the chain of trust starting
from power-on. For example, HyperSentry [4] and Hyper-
Safe [79] protect the hypervisor itself, and TrustVisor [38]
and SecVisor [53] protect the hypervisor, guest kernel and ap-
plications. However, they are not secure against reinstallation
and kexec attacks. Unauthorized loading kexec kernels can be
avoided by disallowing the kexec syscall in the allowed/signed
kernel, and reinstallation attacks can be prevented by secure
boot. However, secure boot is not used by common hypervi-
sors, possibly because most PCs do not allow changing the
keys and databases in the UEFI. Fortunately, a few PCs (e.g.,
Lenovo ThinkPad T460s) allow customizing secure boot, and
DeviceVeil’s prototype takes advantage of such ﬂexibility.
V. DESIGN OF DEVICEVEIL
DeviceVeil authenticates individual USB devices using
PUFs and offers robustness against inside attackers. Figure 1
shows DeviceVeil’s components. DeviceVeil unseals a key
from the TPM and decrypts the encrypted disk to boot the OS.
The DB for USB device detection and PUF authentication is
also decrypted by the key in the TPM. The hypervisor and OS
kernel are authenticated by the secure boot.
(cid:87)(cid:18)
(cid:28)(cid:374)(cid:272)(cid:396)(cid:455)(cid:393)(cid:410)(cid:286)(cid:282)
(cid:87)(cid:258)(cid:396)(cid:410)(cid:349)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:296)(cid:381)(cid:396)
(cid:39)(cid:437)(cid:286)(cid:400)(cid:410)(cid:3)(cid:75)(cid:94)
(cid:87)(cid:258)(cid:396)(cid:410)(cid:349)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:296)(cid:381)(cid:396)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:115)(cid:286)(cid:349)(cid:367)
(cid:60)(cid:286)(cid:455)(cid:3)(cid:349)(cid:374)(cid:3)(cid:100)(cid:87)(cid:68)
(cid:39)(cid:437)(cid:286)(cid:400)(cid:410)(cid:3)(cid:75)(cid:94)
(cid:24)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:115)(cid:286)(cid:349)(cid:367)
(cid:894)(cid:44)(cid:455)(cid:393)(cid:286)(cid:396)(cid:448)(cid:349)(cid:400)(cid:381)(cid:396)(cid:895)
(cid:87)(cid:104)(cid:38) (cid:4)(cid:437)(cid:410)(cid:346)(cid:286)(cid:374)(cid:410)(cid:349)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)
(cid:115)(cid:286)(cid:396)(cid:349)(cid:296)(cid:349)(cid:286)(cid:282)(cid:3)(cid:271)(cid:455)(cid:3)