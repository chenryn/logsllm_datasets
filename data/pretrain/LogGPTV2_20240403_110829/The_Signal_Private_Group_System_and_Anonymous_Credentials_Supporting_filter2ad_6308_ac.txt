Symmetric-key veriﬁable encryption with unique ciphertexts
need a symmetric-key encryption scheme that (i) has unique ciphertexts, meaning that for
every plaintext there is at most one ciphertext that will decrypt correctly, (ii) has public
veriﬁability, meaning that we can prove that a ciphertext encrypts a certiﬁed plaintext with
a key that is consistent with some public parameters, and (iii) is correct under adversarially
chosen keys, meaning that it is hard to ﬁnd a key and message that cause decryption to
fail. In Section 7.2 we deﬁne these properties formally and prove our construction meets
them in the random oracle model assuming the DDH problem is hard in G.
4.1 Construction
System parameters A cyclic group G of prime order q. Recall that EncodeToG is a
function that encodes strings as group elements, that HashToG and HashToZq are
cryptographic hash functions that hash strings to elements of G and Zq (respectively).
We deﬁne a fourth function Derive : {0, 1}2κ → (Zq)2, used to derive two keys from
a master key. Derive should also be a cryptographic hash function (and our analysis
in Theorem 10 models it as a random oracle). Two group elements Ga1 and Ga2 are
chosen such that the relative discrete logs are unknown.
KeyGen(1κ) Choose the secret key k0 at random from {0, 1}2κ, and derive k = Derive(k0) =
(a1, a2) ∈ (Zq)2. We assume that honest parties will not use k that was not derived
from a k0 in this way. Compute the public parameters pk := Ga1
Enc(k, m) Compute M1 = HashToG(m) and M2 = EncodeToG(m), then
a1Ga2
a2.
a1
E1 = M1
E2 = (E1)a2M2.
14
Dec(k, E1, E2) First compute m(cid:48) = DecodeFromG(E2/E1
1 = HashToG(m(cid:48)).
Then perform the following checks and return m(cid:48) if they succeed, and ⊥ otherwise.
a2) and M(cid:48)
1)a1
?= (M(cid:48)
?(cid:54)= 1
E1
E1
Prove(k, pk, E1, E2, (cid:126)C) To prove that (E1, E2) encrypts the plaintext committed in the list
of commitments (cid:126)C:
zM1, and Cy2 := Gy2
ﬁrst compute the scalar z1 = −za1, then create the proof
Cy1 := Gy1
zM2,
πEnc = PK{(a2, a2, z, z1) :
a1Ga2
pk = Ga1
Cy2/E2 = Gy2
a1Gy1
E1 = Cy1
a2 ∧
z/E1
z1}
a2 ∧ //plaintext is M2
//E1 is well-formed
Verify(pk, πEnc, (cid:126)C) Accept if πEnc veriﬁes, otherwise reject.
Discussion When we use the Prove function, it will be combined with the credential
presentation proof, which creates the pair of commitments (cid:126)C (and this is why they use the
same z value). E1 plays a role similar to the synthetic initialization vector of [RS06] and
can be seen as an authentication tag on m, assuming DDH, as we prove in Lemma 11.
We also note that a more generic way to achieve CCA security is possible with an
encrypt-then-MAC construction. Since the algebraic MAC of Section 3.1 can authenticate
group elements, we can MAC the pair (E1, E2) and append the tag. This is less performant,
but has the advantage that decryption can immediately reject ciphertexts without a valid
MAC.
The Derive function in key generation serves two purposes. First, when sharing group
keys amongst themselves, group members can share a short master key, saving bandwidth.
Second, it ensures that (a1, a2) are not a degenerate value (such as all zero), that might be
used to break the correctness under the adversarially chosen keys property (Deﬁnition 9).
5 The Signal Private Group System
In Section 1.1 we provided an overview of the system. Here we review the main data
objects; spell out the high-level operations; and then describe encryption and credential
operations and objects in detail.
15
5.1 Data Objects
The user encrypts UIDs and ProﬁleKeys into UidCiphertexts and ProﬁleKeyCiphertexts,
using GroupSecretP arams which are shared between users. For eﬃciency, and to avoid
maliciously chosen keys (as described in Section 4.1) users actually share a smaller Group-
MasterKey, and use this to derive GroupSecretP arams. The GroupPublicP arams for each
group are registered with the server.
Users prove correctness of these ciphertexts to the server using AuthCredentials and
ProﬁleKeyCredentials. An AuthCredential certiﬁes a UID and a redemption date during
which the credential will be valid. A ProﬁleKeyCredential certiﬁes a UID and ProﬁleKey.
There are ﬁve data objects used to acquire and present credentials which all contain
zero-knowledge proofs of knowledge: The server issues credentials using an AuthCredential-
Response or ProﬁleKeyCredentialResponse. The ProﬁleKeyCredentialResponse is sent
in response to a ProﬁleKeyCredentialRequest. Users present these credentials and prove
they correspond to ciphertexts via AuthCredentialPresentation and ProﬁleKeyCredential-
P resentation objects, which contain both the ciphertexts and proofs of knowledge.
These objects are described in more detail below.
5.2 General Data Object
UID: A 16-byte UUID (universally unique identiﬁer) representing a user.
ServerSecretParams: A set of secret values the server uses to issue and verify creden-
tials.
ServerPublicParams: A set of public values which are derived from ServerSecret-
P arams and which are known to all users.
5.3 Data Objects for Authentication
AuthCredential: A credential with attributes based on the UID and a redemption date
which speciﬁes the day on which this credential is valid.
AuthCredentialResponse: A message sent from the server to a user containing an
AuthCredential and a proof that this credential was constructed correctly. Since the
corresponding request is trivial, we omit it.
AuthCredentialPresentation: A message sent from a user to the server containing
a UidCiphertext, a redemption date, and the credential presentation proof πA from Sec-
tion 5.12.
16
5.4 Data Objects for Proﬁle Keys
The data objects in this section are all related to proﬁle keys, commitment and credentials.
ProﬁleKey: A 32-byte key used for symmetric-key encryption of proﬁle data. A user
shares their ProﬁleKey with users they trust, but not with the server. At any point in time
a UID is associated with a single proﬁle key. The uses of proﬁle data are outside the scope
of this document, but two examples are a user’s screen name and proﬁle picture.
ProﬁleKeyCommitment: A deterministic commitment to a ProﬁleKey.
ProﬁleKeyVersion: An identiﬁer derived from a ProﬁleKey.
ProﬁleKeyCredential: A credential with attributes based on a UID and ProﬁleKey.
Note that an AuthCredential for a UID is issued only to the user who owns that UID,
whereas ProﬁleKeyCredentials are issued to anyone who knows the proﬁle key for a UID.
ProﬁleKeyCredentialRequest: A message sent from a user to the server to request a
ProﬁleKeyCredential. The message contains a ProﬁleKeyV ersion, a proof of knowledge of
the corresponding ProﬁleKey, and some data to help the server perform a blinded credential
issuance.
ProﬁleKeyCredentialResponse: A message sent from the server to a user containing
a ProﬁleKeyCredential and the blind issuance proof πBI from Section 5.10.
ProﬁleKeyCredentialPresentation: A message sent from a user to the server con-
taining a UidCiphertext, a ProﬁleKeyCiphertext, and a zero-knowledge proof of knowledge
of some ProﬁleKeyCredential issued over the UidCiphertext and ProﬁleKey.
5.5 Data Objects for Groups
The data objects in this section exist for a speciﬁc group.
GroupMasterKey: A random value which the GroupSecretP arams are derived from.
When a new user is added or invited to a group, the user adding them will send the new
member the group’s GroupMasterKey via an encrypted message, so the new member can
derive the GroupSecretP arams. Each encrypted message sent within the group will also
contain a copy of the GroupMasterKey, in case the initial message fails to arrive. Note
that a user who has acquired a group’s GroupMasterKey and then leaves the group (or is
deleted) retains the ability to collude with a malicious server to encrypt and decrypt group
17
entries. We deem this risk acceptable for now due to the complexities in rapid and reliable
rekey of the GroupMasterKey.
GroupSecretParams: A set of secret values which group members use to encrypt and
decrypt UidCiphertexts and ProﬁleKeyCiphertexts, as well as construct zero-knowledge
proofs about these ciphertexts. Derived from the GroupMasterKey.
GroupPublicParams: A set of public values corresponding to the GroupSecretP arams.
The GroupPublicP arams are stored on the server to represent a group.
UidCiphertext: A deterministic encryption of a UID using GroupSecretP arams.
ProﬁleKeyCiphertext: A deterministic encryption of a ProﬁleKey using GroupSecret-
P arams.
Role: A value specifying what access privileges a user has to modify the group. For
example, a user with an administrator role may have more privileges than other users.
Discussion of speciﬁc roles is out of scope of this document. Roles are enforced by the
server, not by a cryptographic mechanism.
5.6 Operations for Credentials
GetAuthCredential
1. The user contacts the server over an authenticated channel and requests an Auth-
Credential for some redemption date.
2. If the date is in the allowed range (e.g., within next few days) the server returns an
AuthCredentialResponse for the date.
3. The user veriﬁes the proof of knowledge in the AuthCredentialResponse and stores
an AuthCredential.
CommitToProﬁleKey
1. The user generates a random ProﬁleKey, and derives a ProﬁleKeyV ersion and Proﬁle-
KeyCommitment from it.
2. The user sends the (ProﬁleKeyV ersion, ProﬁleKeyCommitment) pair over the au-
thenticated channel to the server.
3. The server stores the ProﬁleKeyCommitment associated with the authenticated user’s
UID and the ProﬁleKeyV ersion.
18
GetProﬁleKeyCredential
This operation provisions a user with a ProﬁleKeyCredential for some (UID, ProﬁleKey) if
and only if the user knows a ProﬁleKey matching the target user’s ProﬁleKeyCommitment.
1. The user derives a ProﬁleKeyV ersion from the ProﬁleKey, and computes a Proﬁle-
KeyCredentialRequest from the ProﬁleKey.
2. The user sends the (UID, ProﬁleKeyV ersion, ProﬁleKeyCredentialRequest) over an
unauthenticated channel to the server.
3. If the server has a stored ProﬁleKeyCommitment for the speciﬁed UID and Proﬁle-
KeyV ersion, the server veriﬁes the proof of knowledge in the ProﬁleKeyCredential-
Request.
4. If veriﬁcation succeeds the server generates a ProﬁleKeyCredentialResponse.
5. The user veriﬁes the proof of knowledge in the ProﬁleKeyCredentialResponse, and if
veriﬁcation succeeds the user stores a ProﬁleKeyCredential for the target UID.
5.7 Operations for Group Management
AuthAsGroupMember
This operation uses an unauthenticated channel so that the server does not learn the user’s
UID. Upon completion, the channel is authenticated to a particular UidCiphertext within
a group. This operation is used by the subsequent operations.
1. The user recomputes their UidCiphertext for the group and creates an AuthCredential-
Presentation to prove knowledge of an AuthCredential matching the UidCiphertext.
2. The user contacts the server over an unauthenticated channel and sends the Group-
PublicP arams and AuthCredentialPresentation.
3. The server veriﬁes the proof of knowledge in the AuthCredentialPresentation and that
the GroupPublicP arams and UidCiphertext correspond to some user in the speciﬁed
group.
AddGroupMember
1. The user and server execute AuthAsGroupM ember.
2. The user encrypts the new user’s (UID, ProﬁleKey) into (UidCiphertext, Proﬁle-
KeyCiphertext) using the GroupSecretP arams, then creates a ProﬁleKeyCredential-
P resentation for these ciphertexts and sends it to the server, along with a Role for
the new user.
3. The server veriﬁes the ProﬁleKeyCredentialP resentation and checks that:
19
(a) The authenticated user’s Role allows them to add users.
(b) The UidCiphertext does not already exist in the group as a full member.
If
the UidCiphertext exists in the group as an invited member (i.e., missing Pro-
ﬁleKeyCiphertext; see AddInvitedM ember below), then this operation adds the
user as a full member.
If these checks succeed, the server stores the tuple (UidCiphertext, ProﬁleKeyCipher-
text, Role) in the group. Otherwise the server returns an error.
CreateGroup
1. The user generates a GroupMasterKey, and uses it to derive GroupSecretP arams
and GroupPublicP arams.
2. The user contacts the server over an unauthenticated channel and sends the Group-
PublicP arams for the new group.
3. The user performs a variant of AddGroupM ember which initializes the group with one
member (the UidCiphertext from AuthAsGroupM ember) and skips the Role check.
FetchGroupMembers
1. The user and server execute AuthAsGroupM ember.
2. All of the (UidCiphertext, ProﬁleKeyCiphertext) pairs are returned for full members
as well as invited members.
DeleteGroupMember
1. The user and server execute AuthAsGroupM ember.
2. The user sends the UidCiphertext of another user or themselves (the target user).
3. The server checks whether the authenticated user’s Role allows them to delete the
target user.
4. If so, the entry in the group membership is deleted.
AddInvitedGroupMember and UpdateProﬁleKey
These operations are variants of AddGroupMember. AddInvitedGroupMember is used when
a group member would like to add a target user to the group but doesn’t know the target’s
ProﬁleKey. In this case, the target user is added without a ProﬁleKeyCiphertext or Proﬁle-
KeyCredentialP resentation. An invited user only becomes a full group member once their
ProﬁleKeyCiphertext is populated via AddGroupMember or UpdateProﬁleKey.
UpdateProﬁleKey is the same as AddGroupMember except that users are only allowed
to replace their own ProﬁleKeyCiphertext (to prevent the possibility of rollback attacks to
older versions of proﬁle data).
20
5.8 System Parameters and Server Parameters
AuthCredentials and ProﬁleKeyCredentials use the same system parameters, but they each
use a separate issuer key and iparams.
In addition to the parameters of the MAC scheme, the group el-
System Parameters
ements (Ga1, Ga2, Gb1, Gb2, Gj1, Gj2, Gj3) are generated so that the relative discrete loga-
rithms are unknown.
ServerSecretParams and ServerPublicParams The ServerSecretP arams contains
two secret keys for the MAC scheme. The ServerPublicP arams contains the corresponding
issuer parameters, denoted iparams A (for auth credentials) and iparams P (for proﬁle key
credentials).
5.9 Auth Credentials
An AuthCredential has three attributes:
1. M1 := HashToG(UID),
2. M2 := EncodeToG(UID), a reversible encoding of UID,
m3, where m3 ∈ Zq, is a “redemption date”.