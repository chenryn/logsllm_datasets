title:SIP overload control: a backpressure-based approach
author:Yaogong Wang
SIP Overload Control: A Backpressure-based Approach
Yaogong Wang
Department of Computer Science
North Carolina State University
Raleigh, NC 27695-8206, USA
PI:EMAIL
ABSTRACT
Overload happens in Session Initiation Protocol (SIP) net-
works when SIP servers have insuﬃcient resources to han-
dle all messages they receive. Under overload, SIP net-
works suﬀer from congestion collapse due to its ineﬀective
overload control mechanism.
In this paper we propose a
backpressure-based SIP overload control mechanism called
Bassoon. It consists of two parts: the ﬁrst part is a provably
optimal load balancing algorithm that ensures full utiliza-
tion of the available network resources. The second part
is an end-to-end load control algorithm that intelligently
throttles excessive traﬃc at the edge of the network. We
show that, by combining optimal load balancing and end-
to-end load control, Bassoon eﬀectively controls overload in
SIP networks and outperforms existing schemes in terms of
goodput, fairness and responsiveness.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols—Applications
General Terms
Algorithms, Design, Performance
Keywords
SIP, Load Balancing, Load Control, Goodput
1.
INTRODUCTION
Session Initiation Protocol (SIP [8]) is an application-layer
control protocol for managing multimedia sessions over the
Internet. It’s widely used as the signaling protocol for ap-
plications like VoIP, instant messaging and video conferenc-
ing. Overload may occur in SIP networks when SIP servers
have insuﬃcient resources to complete the processing of a
request. Under overload, SIP networks suﬀer from conges-
tion collapse where the goodput of the whole network drops
to almost zero [5, 7].
To control overload in SIP networks, we ﬁrst propose a
backpressure-based load balancing algorithm to ensure the
full utilization of the available resources in the network. This
algorithm is inspired by [10] and has been proved to be opti-
mal in the sense that its stability region is a superset of the
stability region of any other scheme. It also introduces the
unique eﬀect of “backpressure” which automatically propa-
gates the load status of the internal network back to the
source. Thus, we can utilize it to implement an end-to-
end load control algorithm [3] that throttles excessive traﬃc
close to the source.
The diﬃculty of SIP overload control lies in the fact that
rejecting a SIP request also consumes resources (although
less than serving a request). Hence, you need to carefully
decide who should reject those excessive requests when over-
load happens. Previous works [5, 6, 9, 4] use either local or
hop-by-hop approach where the rejection is performed by
the overloaded server itself or its direct upstream server.
This is sub-optimal because the overload is resolved close
to the overloaded server. Our end-to-end overload control
algorithm throttles traﬃc as close to the source as possible
so that it minimizes the waste of resources in forwarding a
request that will ﬁnally be rejected. The diﬃculty with end-
to-end overload control is that, at the edge of the network it’s
hard to infer which internal server is overloaded and whether
a request will be routed through the overloaded server. Be-
cause of these diﬃculties, no practical end-to-end overload
control mechanism has been proposed before. To the best of
our knowledge, Bassoon is the ﬁrst practical end-to-end SIP
overload control algorithm. Simulation results show that, by
combining optimal load balancing and end-to-end load con-
trol, Bassoon eﬀectively controls overload in SIP networks
and outperforms existing schemes in terms of goodput, fair-
ness and responsiveness.
2. BASSOON
We begin with the load balancing part of Bassoon: each
SIP server maintains separate queues for messages going to
diﬀerent destinations and exchanges the backlog informa-
tion of these queues with its direct neighbors. This per-
destination queue is the key data structure of Bassoon and
all following operations are based on it.
Let Uij(t) denote the current backlog of the queue for
destination j on server i. Due to queue backlog exchange, i
will also know the backlogs of the queues for destination j on
its neighbors, i.e. Ukj(t), for all k that neighbors with i. The
queue diﬀerential for destination j at i is then calculated as
follow:
QDij(t) = max
k∈Rij
{Uij(t) − Ukj(t)}
(1)
Copyright is held by the author/owner(s).
SIGCOMM’10, August 30–September 3, 2010, New Delhi, India.
ACM 978-1-4503-0201-2/10/08.
where Rij denotes the set of next-hop servers that i could
use to route messages destined to j. This set is determined
by the routing scheme of SIP itself and Bassoon picks the
399next-hop with maximum queue diﬀerential as the associated
next-hop for this destination.
With the queue diﬀerential and the associated next-hop
server for each destination in hand, each server indepen-
dently schedules its message processing as follow: it chooses
the destination queue with maximum diﬀerential, processes
its head-of-line message and forwards it to the associated
next-hop. This process is executed repeatedly and the queue
diﬀerentials and associated next-hops are updated periodi-
cally.
This seemingly strange scheduling algorithm actually bal-
ances the load of a network optimally [10]. Moreover, under
this scheme the backlog of a destination queue at a node re-
ﬂects the aggregated load status of all paths from that node
to that destination. Therefore, the backlog of a destination
queue at an edge servers reﬂects the overall load status on
that edge server’s path(s) to the destination. We can utilize
this to implement eﬀective end-to-end load control:
Bassoon uses call gapping for load control. Every time an
INVITE request to a destination is admitted, this destina-
tion queue is blocked for a speciﬁc amount of time (called
the gap interval) during which any INVITE request to the
same destination is rejected. After the gap interval, the des-
tination queue is unblocked until another INVITE request
is admitted. The gap interval for each destination is calcu-
lated as follow: we ﬁrst smooth the queue backlog with a
low-pass ﬁlter:
sqlenij(t + 1) = α · sqlenij(t) + (1 − α) · Uij(t)
(2)
where α is set to 0.9 to eliminates transient queue ﬂuctua-
tion. Then we periodically adjust the gap interval for each
destination:
φij(t) = max{ sqlenij(t)
tqlen
, φmin}
gapij(t + 1) = gapij(t) · φij(t)
where tqlen is set to 1 and φmin is set to 0.2.
(3)
(4)
Note that this load control is performed only at edge
servers and is independently imposed on each destination
queue. Thus, requests that will cause overload are rejected
at the ﬁrst place while requests that will not go through the
overloaded server are unaﬀected. We therefore overcome the
two major diﬃculties of end-to-end overload control men-
tioned in Section 1.
3. PERFORMANCE EVALUATION
We evaluated the performance of Bassoon through NS-2
[1] simulation and compared it with other existing schemes
(no control, occupancy-based [2] local and hop-by-hop con-
trol). The same topology as Figure 5 in [5] is used in our
simulation. Figure 1 shows the goodput comparison re-
sults. As can be seen from the ﬁgure, Bassoon achieves
much higher goodput than existing schemes under overload.
We also evaluated other aspects of Bassoon such as fair-
ness and responsiveness. For more details, refer to http:
//research.csc.ncsu.edu/netsrv/?q=bassoon
4. REFERENCES
[1] The Network Simulator NS-2.
http://www.isi.edu/nsnam/ns/.
No Control
OCC-Local
OCC-Hop
Bassoon
)
s
p
c
(
t
u
p
d
o
o
G
 80
 70
 60
 50
 40
 30
 20
 10
 0
 0
 50
 100
Offered Load (cps)
 150
 200
Figure 1: Goodput comparison of Bassoon with no
overload control, occupancy-based [2] local and hop-
by-hop overload control
[2] B. Cyr, J. Kaufman, and T. Lee. Load Balancing and
Overload Control in a Distributed Processing
Telecommunications System. U.S. Patent 4974256,
Nov. 1990.
[3] V. Hilt, E. Noel, C. Shen, and A. Abdelal. Design
Considerations for Session Initiation Protocol (SIP)
Overload Control. Internet Draft
draft-ietf-sipping-overload-design-02, July 2009. Work
in progress.
[4] V. Hilt and H. Schulzrinne. Session Initiation Protocol
(SIP) Overload Control. Internet Draft
draft-hilt-sipping-overload-08, Apr. 2010. Work in
progress.
[5] V. Hilt and I. Widjaja. Controlling Overload in
Networks of SIP Servers. In IEEE International
Conference on Network Protocols, Oct. 2008.
[6] E. Noel and C. Johnson. Initial Simulation Results
That Analyze SIP Based VoIP Networks Under
Overload. In International Teletraﬃc Congress, June
2007.
[7] J. Rosenberg. Requirements for Management of
Overload in the Session Initiation Protocol. IETF
RFC 5390, Dec. 2008.
[8] J. Rosenberg, H. Schulzrinne, G. Camarillo,
A. Johnston, J. Peterson, R. Sparks, M. Handley, and
E. Schooler. SIP: Session Initiation Protocol. IETF
RFC 3261, June 2002.
[9] C. Shen, H. Schulzrinne, and E. Nahum. Session
Initiation Protocol (SIP) Server Overload Control:
Design and Evaluation. In Principles, Systems and
Applications of IP Telecommunications, July 2008.
[10] L. Tassiulas and A. Ephremides. Stability Properties
of Constrained Queueing Systems and Scheduling
Policies for Maximum Throughput in Multihop Radio
Networks. Automatic Control, IEEE Transactions on,
37(12):1936–1948, Dec. 1992.
400