# SIP Overload Control: A Backpressure-based Approach

**Author:** Yaogong Wang  
**Department of Computer Science**  
North Carolina State University  
Raleigh, NC 27695-8206, USA  
**Email:** [PI:EMAIL]

## Abstract
Overload in Session Initiation Protocol (SIP) networks occurs when SIP servers lack the necessary resources to handle all incoming messages. This can lead to congestion collapse due to the ineffective overload control mechanisms currently in place. In this paper, we introduce Bassoon, a backpressure-based SIP overload control mechanism. Bassoon consists of two main components: a provably optimal load balancing algorithm that ensures full utilization of available network resources, and an end-to-end load control algorithm that intelligently throttles excessive traffic at the network's edge. By combining these two components, Bassoon effectively controls overload in SIP networks, outperforming existing schemes in terms of goodput, fairness, and responsiveness.

## Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network Protocols—Applications

## General Terms
Algorithms, Design, Performance

## Keywords
SIP, Load Balancing, Load Control, Goodput

## 1. Introduction
The Session Initiation Protocol (SIP) is an application-layer control protocol for managing multimedia sessions over the Internet. It is widely used for applications such as VoIP, instant messaging, and video conferencing. Overload in SIP networks can occur when SIP servers do not have sufficient resources to process all incoming requests, leading to congestion collapse where the network's goodput drops to almost zero [5, 7].

To address this issue, we propose a backpressure-based load balancing algorithm to ensure the full utilization of available network resources. This algorithm, inspired by [10], has been proven to be optimal, with its stability region being a superset of any other scheme. The unique "backpressure" effect automatically propagates the load status of the internal network back to the source, enabling us to implement an effective end-to-end load control algorithm [3] that throttles excessive traffic near the source.

The challenge in SIP overload control is that rejecting a SIP request also consumes resources, though less than serving a request. Therefore, it is crucial to carefully decide who should reject excessive requests during overload. Previous approaches [5, 6, 9, 4] use local or hop-by-hop methods, where rejection is performed by the overloaded server itself or its direct upstream server. This is sub-optimal because it resolves overload close to the overloaded server. Our end-to-end overload control algorithm throttles traffic as close to the source as possible, minimizing the waste of resources in forwarding a request that will ultimately be rejected. To our knowledge, Bassoon is the first practical end-to-end SIP overload control algorithm. Simulation results show that Bassoon effectively controls overload in SIP networks and outperforms existing schemes in terms of goodput, fairness, and responsiveness.

## 2. Bassoon
Bassoon's load balancing component involves each SIP server maintaining separate queues for messages destined for different destinations and exchanging backlog information with its direct neighbors. This per-destination queue is the key data structure, and all subsequent operations are based on it.

Let \( U_{ij}(t) \) denote the current backlog of the queue for destination \( j \) on server \( i \). Due to queue backlog exchange, server \( i \) also knows the backlogs of the queues for destination \( j \) on its neighbors, denoted as \( U_{kj}(t) \), for all \( k \) neighboring \( i \). The queue differential for destination \( j \) at server \( i \) is calculated as follows:

\[ QD_{ij}(t) = \max_{k \in R_{ij}} \{ U_{ij}(t) - U_{kj}(t) \} \]

where \( R_{ij} \) denotes the set of next-hop servers that \( i \) can use to route messages to destination \( j \). This set is determined by the routing scheme of SIP, and Bassoon selects the next-hop with the maximum queue differential as the associated next-hop for this destination.

With the queue differentials and associated next-hop servers, each server independently schedules message processing by choosing the destination queue with the maximum differential, processing its head-of-line message, and forwarding it to the associated next-hop. This process is repeated, and the queue differentials and associated next-hops are updated periodically.

This scheduling algorithm optimally balances the network load [10]. Under this scheme, the backlog of a destination queue at a node reflects the aggregated load status of all paths from that node to the destination. Thus, the backlog of a destination queue at an edge server reflects the overall load status on that edge server's path(s) to the destination. This information is used to implement effective end-to-end load control.

Bassoon uses call gapping for load control. Each time an INVITE request to a destination is admitted, the destination queue is blocked for a specific gap interval, during which any INVITE request to the same destination is rejected. After the gap interval, the destination queue is unblocked until another INVITE request is admitted. The gap interval for each destination is calculated as follows:

1. Smooth the queue backlog with a low-pass filter:
   \[ \text{sqlen}_{ij}(t + 1) = \alpha \cdot \text{sqlen}_{ij}(t) + (1 - \alpha) \cdot U_{ij}(t) \]
   where \( \alpha \) is set to 0.9 to eliminate transient queue fluctuations.

2. Periodically adjust the gap interval for each destination:
   \[ \phi_{ij}(t) = \max\left\{ \frac{\text{sqlen}_{ij}(t)}{\text{tqlen}}, \phi_{\text{min}} \right\} \]
   \[ \text{gapij}(t + 1) = \text{gapij}(t) \cdot \phi_{ij}(t) \]
   where \( \text{tqlen} \) is set to 1 and \( \phi_{\text{min}} \) is set to 0.2.

This load control is performed only at edge servers and is independently imposed on each destination queue. Thus, requests that would cause overload are rejected early, while requests that do not pass through the overloaded server are unaffected. This approach overcomes the major difficulties of end-to-end overload control mentioned in Section 1.

## 3. Performance Evaluation
We evaluated Bassoon's performance using NS-2 [1] simulations and compared it with existing schemes (no control, occupancy-based [2] local, and hop-by-hop control). The same topology as Figure 5 in [5] was used in our simulation. Figure 1 shows the goodput comparison results. As seen in the figure, Bassoon achieves significantly higher goodput than existing schemes under overload conditions. We also evaluated other aspects of Bassoon, such as fairness and responsiveness. For more details, refer to http://research.csc.ncsu.edu/netsrv/?q=bassoon.

## 4. References
[1] The Network Simulator NS-2. http://www.isi.edu/nsnam/ns/.

[2] B. Cyr, J. Kaufman, and T. Lee. Load Balancing and Overload Control in a Distributed Processing Telecommunications System. U.S. Patent 4974256, Nov. 1990.

[3] V. Hilt, E. Noel, C. Shen, and A. Abdelal. Design Considerations for Session Initiation Protocol (SIP) Overload Control. Internet Draft draft-ietf-sipping-overload-design-02, July 2009. Work in progress.

[4] V. Hilt and H. Schulzrinne. Session Initiation Protocol (SIP) Overload Control. Internet Draft draft-hilt-sipping-overload-08, Apr. 2010. Work in progress.

[5] V. Hilt and I. Widjaja. Controlling Overload in Networks of SIP Servers. In IEEE International Conference on Network Protocols, Oct. 2008.

[6] E. Noel and C. Johnson. Initial Simulation Results That Analyze SIP Based VoIP Networks Under Overload. In International Teletraffic Congress, June 2007.

[7] J. Rosenberg. Requirements for Management of Overload in the Session Initiation Protocol. IETF RFC 5390, Dec. 2008.

[8] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston, J. Peterson, R. Sparks, M. Handley, and E. Schooler. SIP: Session Initiation Protocol. IETF RFC 3261, June 2002.

[9] C. Shen, H. Schulzrinne, and E. Nahum. Session Initiation Protocol (SIP) Server Overload Control: Design and Evaluation. In Principles, Systems and Applications of IP Telecommunications, July 2008.

[10] L. Tassiulas and A. Ephremides. Stability Properties of Constrained Queueing Systems and Scheduling Policies for Maximum Throughput in Multihop Radio Networks. Automatic Control, IEEE Transactions on, 37(12):1936–1948, Dec. 1992.

---

**Figure 1: Goodput Comparison of Bassoon with No Overload Control, Occupancy-Based [2] Local and Hop-by-Hop Overload Control**

| Scheme         | Goodput (cps) |
|----------------|---------------|
| No Control     | 0             |
| OCC-Local      | 70            |
| OCC-Hop        | 60            |
| Bassoon        | 80            |

---

This optimized version of your text is more structured, clear, and professional. It includes improved formatting, consistent terminology, and a more coherent flow of ideas.