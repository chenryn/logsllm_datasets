MHz）。此值限定为至多是像素时钟的两倍[15]。然而，由于显示适配器所产生的信号近乎方块形（“黑色”和“白色”像素之间交替排列），因此信号生成的强谐波可被用于忽略这一限制，并可以在损失一些信号质量的情况下采用高于两倍像素时钟数值的方式进行传输[15]。
Fd 表示的是载波调制的数据频率（音调）。Pc 表示的是前面所述的像素时钟值， HpVp
分别表示的是水平和垂直分辨率参数，再加上前后的时钟脉冲边沿，这是一段没有显示像素数据发送的时间段。CRT显示器可以利用这段时间来将其光束缩回至一帧图像末尾的顶部和一行末尾的左侧。这些都是标准中为了兼容CRT显示技术而留下来的。
该调制过程以“Tempest for Eliza[14]”中的代码为基础，根据下面的算法 （算法
1）加以制定。为了提高所传输信号的质量，实践中采用的是修改过的变体调制过程。
直观地说，上述算法可以通过模拟载波频率的峰值决定对哪个像素加以染色。所产生的图像由交替的横向“条纹”组成，其中包括与载波频率相匹配的黑白像素图案或空的黑色条纹。内部循环可以计算出模拟载波频率
Fc的模式。条纹的宽度以及条纹的数量取决于 Fd的值，应通过外部循环计算得出。简单地说，条纹中的这种周期性变化调节的是音频信号 Fd。
在给定像素图的情况下，可以使用下面的近似计算公式来确定所生成的信号频率。  
算法 1：用于信号音 （Fd） 调制的像素图
Y0 和 Yx 是具有相同像素图案的两个连续像素行的垂直像素坐标。该公式通过使用显卡定时参数可以近似计算出数据信号的周期时间。
###  4.2 AirHopper 发射器——有关音频的数据调制
我们使用如下两种技术来对音频信号进行数字信息调制：音频频移键控（A-FSK） 和双音多频（DTMF） 。我们的评估显示，A-FSK
对干扰的敏感度较低，相比DTMF技术的传输距离更远。而另一方面，就带宽和二进制数据传输而言，DTMF的效率更高。  
在这两种技术中，数据通过音频频率加以调制。我们的实验结果表明，低于 600Hz的频率将会遭遇极大的干扰；而大量的接收测试表明，若信号频率大于 11
kHz，接收距离则开始大大减小。我们将在这两种方法中相应地限制传输范围。
####  4.2.1 A-FSK。
采用这种音频数据调制方法，每个字母或字符都会使用不同的音频频率进行调制。从技术上讲，这种方法实现的原理是：通过在整个屏幕区域上呈现一个单一而独特的信号频率，并且在短时间内保持图像静止。然后，由接收器负责从解调的音频信号中抽样，并对数据加以解码。通过使用少于40种不同的音频频率，我们就能够将简单的文本数据（英文字母和数字）译成电码。这种方法对于传输短文本信息而言非常有效，比如标识符、
key-stroking、keep-alive消息和通知。在我们进行的广泛测试过程中，这种方法被证明具备最强的抗干扰能力、最大的接收范围和最精确的数据恢复率。在得到这些有效结果之后，我们试图使用
256
种不同的音频音调对任意二进制数据进行调制，从而产生了每字符11000/256≈40Hz的频率间隔。我们的测试获得结果是在解码器端出现了更高的错误率和模棱两可的解调情形。其主要原因是FM
接收器中数字信号处理 （DSP）
组件为了提高听觉体验使用的是自适应噪声滤波、均衡以及其他技术。这些方法正在改变相邻的音频频率，以对其加以统一或将其作为噪声加以过滤。由上所述，我们采用DTMF调制完成了对二进制数据的编码。
####  4.2.2 DTMF（16×16）。
在双音多频模式中，两个音频信号的组合表示为一个字节的数据。这一点类似于使用两个十六进制数字。从一个16 x 16 频率对（包含 256
个不同组合）的表格中选择音调。表中的列处于 600Hz-5000Hz频率范围内，表中的行处于6000Hz-10400Hz
频率范围内。例如，包含数据值为134的一个字节由位于第8行 （⌊134/16⌋= 8）和第6列 （134 mod 16 =
6）的各一个音调同时呈现。两个调制音频信号的传输是通过在逻辑上将屏幕分成两半，并在每一半上传输一幅不同的图像实现的。虽然这导致传输范围和接收质量出现些许损失，但获得了更高的数据传输速率。
###  4.3 AirHopper接收器—音频信号中的数据解调
移动电话上的恶意代码的一个基本组成部分是FM音频录音、数据解码或录音转发至攻击者的能力。下面的章节中介绍了重要的实践应用细节。
####  4.3.1 android FM音频信号输出重定向
为了处理FM音频信号，应对其进行记录或保存。 在Android API升级至API18（Android 4.3, Jelly Bean MR2）之前，FM
收音机无法记录录音输出。从Android框架中反汇编MediaRecorder 类文件 （MediaRecorder$AudioSource.smali）
，我们发现了如何通过使用 AudioRecord 对象（audioSource=8 且sampleRateInHz =
44100）启用FM无线电录音的记录功能[16]。
####  4.3.2 音频采样
现代手机支持的最大音频捕获采样率为44.1KHz 。根据奈奎斯特-香农采样定理，如果采样频率大于被采样信号最高频率的两倍，则有可能实现信号的完美重建。因此，我们能够以20KHz的最大频率来完成采样过程。20KHz是人类在一般情况下可听见的最高频率，因而对于大多数的音频材料来说，44.1KHz只是一种逻辑意义上的选择。使用Android系统的录音
API可以将无线电信号记录并保存在内存缓冲区中，每个样本采用的是16 位的脉冲编码调制（PCM）格式。
####  4.3.3 信号处理
快速傅里叶变换（FFT）可以将缓冲器从时域转换至频域。由于每个数据块有1024个样本，我们生成一个可以描绘记录信号频谱的离散函数，其中每个指数的幅值表示44100/1024~43Hz的频率范围。根据所采用的调制方法（A-FSK或DTMF），频谱预计将包含一个或两个不同的振幅。在DTMF调制过程中，应有一个频率指数在每侧频谱范围内（600Hz-5000Hz和
6000Hz-10400 Hz）具备明显较高的振幅。然后将频率指数与DTMF频率表相对比，用以恢复所传送的字节。
####  4.3.4 不使用耳机情况下的要求
一些型号的手机需要用户在连接耳机的情况下才能够打开收音机。由于耳机线被用作FM接收器芯片的天线，因此耳机线必不可少。如果不使用天线，FM接收器的接收质量便会较差。虽然从技术上来说手机在没有天线的情况下仍然有可能可以收到信号，但使用耳机线能够确保获得良好的用户体验。我们发现这种限制是由供应商在软件层实现的，可以采用一定的方法将其绕过。我们使用baksmali反汇编程序对三星
Galaxy S3 框架文件 （/system/framework/framework2.odx）进行了反汇编[17]
。在服务文件（FMRadioService）中，mIsHeadsetPlugged 变量被初始化为“true”，耳机检查方法
（”access$302）被修改返回为“true”。无论现实是否有耳机相连，这种做法可以在应用程序层通过手机的耳机检查程序。
###  4.4 传输协议
AirHopper
采用两种传输模式：原始模式和结构化模式。在原始模式传输中，数据流取自于字节数组，并按顺序加以传输。如果信号出现损失或中断，接收器无法察觉到这一点。按顺序传输原始数据适用于文本信息（如按键记录和文本文件）或短信号和通知消息。即使缺失某些字符的情况下，这样的信息依然有价值。在二进制数据传输中，当重点是要确定传输错误并知晓实际收到了哪部分文件或数据时，应采用结构化协议。传输标题包括（1）一个初始同步脉冲（2）数据包序列号（3）数据包大小（4）数据本身以及（5）一个校验和。通过搜索同步脉冲，AirHopper
接收器可以很容易地检测出使用的是哪种协议（原始还是结构化）。