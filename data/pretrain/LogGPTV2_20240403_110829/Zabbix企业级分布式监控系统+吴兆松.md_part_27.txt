### 9.3.2 主动方式自动注册的配置

#### 1. 配置Agent
在Zabbix Agent端，需要启用主动模式并配置相应的参数。具体步骤如下：

```shell
# 编辑Zabbix Agent配置文件
vim /etc/zabbix/zabbix_agentd.conf

# 添加或修改以下参数
ServerActive=10.0.0.1
Hostname=webl.itnihao.com
```

- **ServerActive**：指定Zabbix Server的IP地址。
- **Hostname**：设置主机名。如果未设置，则默认使用系统主机名（通过`hostname`命令获取）。

#### 2. Web前端配置自动注册功能
以下是通过Web前端配置自动注册功能的主要步骤：

1. 在Web前端单击菜单项 `Configuration → Actions`。
2. 在 `event source` 中选择 `Auto registration`，然后单击 `Create action`。
3. 在 `Action` 选项中配置名称等信息。
4. 选择 `Conditions` 选项，在 `New condition` 下拉框中选择 `Proxy`，选择代理的主机，然后单击 `Add` 按钮。
5. 选择 `Operations` 选项，选择相关的条件操作，如 `Add host`、`Add to host groups`、`Link to templates` 等。

#### 3. 配置过程
详细配置过程如下：

1. 依次选择菜单栏 `Configuration → Actions → Create action → Auto registration`，如图9-10所示。
2. 在 `Action` 选项中输入 `Name` 的名称，如图9-11所示。
3. 在 `Conditions` 中选择条件为 `Proxy`，如图9-12所示。
4. 选择之前创建的代理，如图9-13所示。
5. 单击 `Add` 按钮添加，如图9-14所示。
6. 添加好的界面如图9-15所示。
7. 设置好动作和条件后，开始操作，如图9-16所示。
8. 在操作中选择添加主机、主机组和模板等，如图9-17所示。
9. 添加好的内容如图9-18所示（注意这里的模板是 `TemplateOSLinux-active`，因为自带的模板是被动方式，所以这里修改了模板，设置为主动模式。关于主动模式，请参考第8章）。
10. 单击 `Save` 按钮保存，大约5分钟后即可完成所有网段主机的自动发现。完成后查看主机发现，如图9-19所示。

### 9.3.3 使用Host Metadata
**Host Metadata** 是Zabbix 2.2新增的功能，允许在Zabbix Agent端自定义条件，并在自动注册时根据这些条件进行筛选。在Zabbix 2.2之前的版本中，自动注册选项中只有 `Host name` 和 `Proxy` 两个条件可供选择，这在实际生产环境中可能无法满足需求。

#### 1. 使用HostMetadataItem的配置参数
在Zabbix Agent端配置，语句如下：

```shell
# 编辑Zabbix Agent配置文件
vim /etc/zabbix/zabbix_agentd.conf

# 添加或修改以下参数
HostMetadataItem=system.uname
```

- 如果是Linux系统，自动注册时 `Host metadata` 数据中将包含 `Linux` 字符串。
- 如果是Windows系统，自动注册时 `Host metadata` 数据中将包含 `Windows` 字符串。

#### 2. 使用HostMetadata的配置参数
在Zabbix Agent端配置，语句如下：

```shell
# 编辑Zabbix Agent配置文件
vim /etc/zabbix/zabbix_agentd.conf

# 添加或修改以下参数
HostMetadata=Linux
```

- 在Windows下的客户端修改为：

```shell
# 编辑Zabbix Agent配置文件
vim /etc/zabbix/zabbix_agentd.conf

# 添加或修改以下参数
HostMetadata=Windows
```

### 9.3.4 关于自动注册的注意事项
自动发现功能非常强大，可以进一步减轻监控的工作量。若大批量机器需要添加监控项，利用自动发现功能可以实现。`zabbix_proxy.conf` 默认只是最基本的配置，因此要调整为生产环境适用的参数。关注以下参数：

- **ProxyLocalBuffer**
- **ProxyOfflineBuffer**
- **HeartbeatFrequency**
- **ConfigFrequency**
- **StartPollers**
- **StartIPMIPollers**
- **StartPollersUnreachable**
- **StartTrappers**
- **StartPingers**
- **StartDiscoverers**

### 9.4 Low Level Discovery功能
Low Level Discovery (LLD) 功能允许对类似的Items进行批量添加。LLD的Key可以对网卡、文件系统、SNMP OIDs等进行自动发现。使用过程分为两步：

1. 自动发现特定变量的名称。
2. 添加对变量的Items。

Zabbix中LLD的Key返回值是一个JSON格式的数据。自带的Key如表9-1所示。

| Key 名称               | 适用监控方式类型 | 返回数据格式                                                                                           |
|------------------------|------------------|--------------------------------------------------------------------------------------------------------|
| vfs.fs.discovery        | Zabbix Agent     | `{"data":[ {"{#FSNAME}":"", "{#FSTYPE}":""}, ... ]}`                                                   |
| net.if.discovery        | Zabbix Agent     | `{"data":[ {"{#IFNAME}":""}, ... ]}`                                                                   |
| snmp.discovery          | SNMP (v1, v2 or v3) agent | `{"data":[ {"{#SNMPINDEX}":"", "{#SNMPVALUE}":""}, ... ]}`                                             |
| custom.discovery        | 任何             | `{"data":[ {"{#CUSTOM1}":"", "{#CUSTOM2}":""}, ... ]}`                                                 |

用Zabbix-Get来查看Key获取到的数据，如图9-26所示。对于SNMP，不能通过Zabbix-Get来验证，只能在Web页面中进行配置使用，如图9-27所示。