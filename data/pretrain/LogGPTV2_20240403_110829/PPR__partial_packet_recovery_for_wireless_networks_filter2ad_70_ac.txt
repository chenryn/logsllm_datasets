Zigbee receiver. Each of the Zigbee receivers in the following
experiments is a computer connected to a software-deﬁned radio.
The hardware portion of the receiver is a Universal Software Radio
Peripheral (USRP) [13] with a 2.4 GHz daughterboard; the remain-
der of the receiver’s functionality (demodulation and block decod-
ing as described in Section 2.3) is implemented in software. The
DSSS despreading function was written in C++ in the GNURa-
dio [15] framework by the authors, with parts derived from code
written by Schmid [29]. We implemented preamble and postamble
frame synchronization in C++.
DQPSK transceiver. We have implemented a software-deﬁned
radio transmitter and receiver using a combination of the USRP
hardware with CppSim [26] and Matlab. The transmitter uses
differentially-coded QPSK with square-root raised cosine pulse
shaping, for an aggregate data rate of 1.33 MBps. Apart from the
differential coding, there is no channel coding layer in this radio.
PP-ARQ. We have implemented PP-ARQ both in trace-driven
simulation and in the GNURadio framework. The PP-ARQ re-
ceiver uses SoftPHY to compute the run-length representation of
the packet as deﬁned in Section 4, and runs the dynamic program-
ming algorithm described in Section 4.1 on the run-length rep-
resentation of the packet. It then sends a feedback packet to the
sender summarizing which runs need retransmitting. At the sender,
our PP-ARQ implementation parses the recevier’s feedback packet,
computes checksums of each run needing retransmission, packs the
runs into a fragmented CRC packet (with variable sized fragments),
and transmits the fragmented CRC packet to the receiver.
5. OTHER APPLICATIONS OF PPR
PPR has the potential to improve the performance of mesh net-
work protocols such as opportunistic routing [10] and network cod-
ing. Using PPR, nodes need only forward or combine the bits likely
to be correct in a packet that does not pass checksum, thus im-
proving network capacity. Rather than use PP-ARQ, the integrated
MAC/link layer that implements ExOR or network coding would
directly work with SoftPHY’s output. Alternatively, PP-ARQ could
7. EVALUATION
We now describe our experimental evaluation of the PPR system
and PP-ARQ. We begin in Section 7.1 with an evaluation of PPR
capacity improvements in a busy network where collisions cause
SINR to ﬂuctuate. In Section 7.2 we continue the experiments of
Section 2.5, taking a closer look at SoftPHY hints. In Section 7.3
5See http://tinyos.net.
6We use the notation of Section 2.3.
Experiment (Radio)
PPR in a busy network
SoftPHY hints in a busy net-
work (DSSS/MSK)
PP-ARQ in a busy network
(DSSS/MSK)
at marginal
SNR
implementation
PPR
(DQPSK)
PP-ARQ
(DSSS/MSK)
Section Conclusion
7.1
7.2
7.3
7.4
7.5
PPR (SoftPHY and postamble decoding) improve four-fold the amount of correct bits the
PHY delivers to higher layers.
The pattern of “misses” and “false alarms” under the SoftPHY hints we propose enable
partial packet recovery in a busy network.
PP-ARQ improves aggregate end-to-end throughput over the status quo by more than 4×
under high load and 2× under moderate load. SoftPHY improves capacity even more than
fragmented CRC, without needing performance tuning.
SoftPHY hints work best at low SNRs (BER less than 10−6) but well for BERs as high as
10−3. Coding further improves SoftPHY hint efﬁcacy.
PP-ARQ acheives signiﬁcant end-to-end savings in retransmission cost, a median factor of
50% reduction.
Table 1: A summary of the major experimental contributions of this paper.
Figure 9: The impact of carrier sense on aggregate link-
level throughput. Carrier sense improves throughput under
each scheme, but PPR techniques yield further improvements.
Postamble decoding is off in this experiment.
Figure 8: Experimental Zigbee testbed layout: there are 31
nodes in total, spread over 11 rooms in an indoor ofﬁce environ-
ment. Each unnumbered dot indicates a Zigbee node. Software
radio nodes are shown dark, labeled with numbers.
we evaluate PP-ARQ using trace-driven simulation. In Section 7.4
we evaluate PPR’s efﬁcacy in a quiet network on links close to the
SNR threshold. Finally, in Section 7.5, we present a preliminary
evaluation of a real PP-ARQ implementation. We summarize our
experimental ﬁndings in Table 1.
7.1 PPR in a busy network
Each sender in the following experiments is a moteiv tmote sky
wireless sensor node, equipped with an DSSS radio as described in
Section 6. We have deployed 25 sender nodes over eleven rooms in
an indoor ofﬁce environment, as shown in Figure 8. Each receiver
is a Zigbee software radio, also as described in Section 6. We also
deployed six receivers among the senders; in the absence of any
other trafﬁc, each receiver could hear between four and ten sender
nodes, with the best links having near perfect delivery rates.
We now present trace-driven channel capacity results evaluat-
ing how well the combination of SoftPHY (with the Hamming dis-
tance hint described in Section 2) and postamble decoding performs
against the fragmented CRC scheme described in Section 7.1.2. In
this experiment each node sends a stream of bits, which are formed
into traces and post-processed to simulate a range of packet sizes
realistic for a mesh network [30] (this technique is accurate in the
busy, collision-dominated network that we evaluate in this section).
In the underlying experiments, all senders transmit at the same
time, offering 6.9 Kbits/s/node unless otherwise noted. Data points
represent averages of 14 runs unless otherwise noted, and all error
bars indicate 95% conﬁdence intervals.
Summarizing each scheme:
1. Packet CRC computes a 32-bit CRC check over the received
packet payload and discards the packet if it does not pass.
2. Fragmented CRC, described in Section 7.1.2, breaks the
packet into fragments, appending to each a 32-bit CRC. Frag-
mented CRC delivers only those fragments with matching
checksums, discarding the remainder.
3. SoftPHY delivers the high-conﬁdence bits: exactly those bits
in the packet whose codewords had a Hamming distance less
than η = 2.
4. PP-ARQ is an implementation of the full PP-ARQ protocol
(as described in Section 4) using PPR (SoftPHY and postam-
ble decoding).
7.1.1 The impact of carrier sense
One potentially confunding factor in PPR’s evaluation is the use
and efﬁcacy of carrier sense in the senders’ CC2420 radios: carrier
sense can fail due to hidden terminals or backoff slots smaller than
the transmit-to-receive turnaround time [12]. To address this factor,
we examine aggregate throughput for each scheme, with and with-
out carrier sense. In Figure 9 we see that carrier sense improves
throughput by a statistically signiﬁcant amount over the status quo
(“Packet CRC” with postamble decoding off). Noting that carrier
sense yields additive improvements for each scheme, we narrow
the design space of our evaluation to only include carrier sense on
in the remaining experiments.
7.1.2 An alternative: per-fragment checksum
We will show next that the PPR improves performance signiﬁ-
cantly, but one might ask whether it is necessary to achieve similar
gains. One way to approximate SoftPHY is to adopt a technique
similar to that proposed by Ganti et al. [14], splitting the packet
into fragments, and sending multiple checksums per packet, one
per fragment, as shown in Figure 10. This scheme allows the re-
050100 feet5432160100200300400Aggregate link-level throughput (Kbits/s)Carrier sense onCarrier sense offPacket CRCFragmented CRCSoftPHYFigure 10: The per-fragment checksum approach: the packet
includes multiple checksums, with each checksum taken over a
different fragment of the packet.
Figure 11: The impact of fragment size on the performance of
the fragmented checksum scheme. Postamble decoding is off,
carrier sense on in this experiment.
ceiver to identify entire fragments that are correct. If bit errors are
concentrated in only a few bursts, then entire fragments will check-
sum correctly, and the receiver would then only have to recover the
erroneous fragments from the sender.
How big must a fragment, c, be? In an implementation, one
might place a checksum every c bits, where c varies in time. If the
current value leads to a large number of contiguous error-free frag-
ments, then c should be increased; otherwise, it should be reduced
(or remain the same). Alternatively, one might observe the symbol
error rate (or bit error rate), assume some model for how these er-
rors occur, and derive an analytically optimal fragment size (which
will change with time as the error rate changes). In either case, the
fragmented checksum needs tuning for the optimal fragment size.
To ﬁnd the optimal chunk size for the fragmented CRC scheme,
we conducted experiments comparing aggregate throughput as
fragment size varies. The results are shown in Figure 11. We see
that when chunk size is small, checksum overhead dominates;
while large chunk sizes lose throughput because collisions and in-
terference wipe out entire whole fragments. We therefore choose
a fragment size of 50 bytes (corresponding to 30 fragments per
packet) for the following experiments.
7.1.3 PPR raw throughput
To gain further insight about PP-ARQ’s performance gains, we
ﬁrst look one layer deeper, at the throughput achieved at the Soft-
PHY interface. Figure 12 compares the per-link distribution of
throughputs at medium offered load for each scheme. Since the
postamble and the preamble usually share fate in the packet-level
CRC scheme, performance with or without postamble decoding is
very close, and so for clarity, we omit the curve for packet-level
CRC with postamble decoding. Per-link, we see that fragmented
CRC yields a substantial throughput gain over the status quo, and
that SoftPHY yields a small gain over fragmented CRC without
the need for tuning the fragment size, as noted above. Furthermore,
postamble decoding yields another small and additive raw through-
put gain over each scheme.
The scatter plot in Figure 13 compares the end-to-end throughput
for fragmented CRC on the x-axis with either SoftPHY (top half)
Figure 12: Per-link throughput distribution achieved at the
SoftPHY interface. The offered load is 6.9 Kbits/s/node, close
to channel saturation.
Figure 13: Link-by-link comparison of throughput through the
SoftPHY interface. Each data point represents one link in one
experimental run. Upper half: SoftPHY vs. fragmented CRC.
Lower half: packet-level CRC vs. fragmented CRC.
or packet-level CRC (bottom half). The ﬁrst comparison we can
draw from this graph is the per-link throughput of SoftPHY com-
pared with fragmented CRC (top-half points). We see that SoftPHY
improves per-link performance over fragmented CRC by roughly a
constant factor. This factor is related to the fragment size, and may
be attributed to fragmented CRC’s need to discard the entire frag-
ment when another transmission corrupts part of it.
The bottom-half points in Figure 13 compare fragmented CRC
with packet-level CRC. We see that fragmented CRC far out-
0100200300400Aggregate link-level throughput (Kbits/s)1500 bytes15050155 0 0.2 0.4 0.6 0.8 1 0 2 4 6 8 10 12 14Cumulative distribution of linksLink-level throughput (Kbits/s)Packet CRCFragmented CRCSoftPHYFragmented CRC + postambleSoftPHY + postamble 0 5 10 15 0 5 10 15Other scheme per-link throughput (Kbits/s)Fragmented CRC per-link throughput (Kbits/s)Other Scheme = Packet CRCOther Scheme = SoftPHYFigure 14: Per-link equivalent frame delivery rate with carrier
sense enabled, at moderate offered load (3.5 Kbits/s/node).
performs packet CRC, because it only has to discard a small frag-
ment instead of the entire packet when that fragment is corrupted.
The fact that the circle points are dispersed on the y-axis and not on
the x-axis means that the spread in the link quality distribution de-
creases when moving to smaller fragment sizes or SoftPHY. This
is probably again because collisions do not occur over the entire
packet, but rather often over a small piece of it.
7.1.4 PPR equivalent frame delivery rate
We now examine the rate at which each scheme described above
delivers bits to higher-layers, once it has succesfully acquired a
packet (i.e., the PHY has detected either a preamble or a postam-
ble). We term this rate the equivalent frame delivery rate, because
it measures how efﬁcient each scheme is at delivering bits to higher
layers once the PHY layer successfully synchronizes.
Figure 14 shows the per-link distribution of equivalent frame de-
livery rate in our network when there is a moderate offered load
(3.5 Kbits/s/node). Even when carrier sense and postamble decod-
ing are enabled, we see a large proportion of extremely poor links in
the status quo network, but PPR techniques increase frame delivery
rate substantially. For both SoftPHY and fragmented CRC, postam-
ble decoding increases median frame delivery rate by the fraction
of bits that come from packets whose preamble was undetectable,
roughly 10%. Comparing packet-level CRC with fragmented CRC,
we see a large gain in frame delivery rates because fragmented CRC
does not throw away the entire packet when it detects an error. PPR
improves on frame delivery rates even more by identifying exactly
which portions of the frame are correct and passing exactly those
bits up.
7.2 SoftPHY hints in a busy network
In Section 2 we introduced the SoftPHY hints that we use in
our experimental evaluation; in Section 2.5 we saw that SoftPHY
hints were a good predictor of correct decoding during an exam-
ple packet reception and in a busy network. We now examine the
statistics of the Hamming distance hint in further detail.
Figure 15: The distribution of lengths of contiguous misses in
every received packet for various thresholds η.
Recall that we label a codeword “good” when its Hamming dis-
tance is less than or equal to η. Therefore the cumulative distribu-
tion function of incorrect codewords in Figure 5 is also the frac-
tion of incorrect codewords that we incorrectly label good, and for
which the CRC check on the resulting packet or partial packet fails.
We call this fraction the miss rate at threshold η, the rate at which
we “miss” labeling a codeword bad at Hamming distance thresold
η. We see from the ﬁgure that the miss rate is one in ten codewords
at η = 6, initially a cause for concern. The saving grace is that when
misses occur, it is highly likely that there are correctly-labeled in-
correct codewords around the miss, and so PP-ARQ will choose
to retransmit the missed codewords. Figure 15 veriﬁes this intu-
ition, showing the complementary CDF of contiguous miss lengths
at various thresholds η. We see that a signiﬁcant fraction of misses
are of length one, and that long runs of misses are extremely rare.
In Figure 5, we see the complementary cumulative distribution of
correct codewords’ Hamming distances. Since we label a codeword
“bad” when its distance exceeds η, this complementary CDF is also
the fraction of correct codewords that we incorrectly label “bad”
(and which PP-ARQ retransmits) at threshold η. Noting that the
overhead of this event is low—just one unnecessarily transmitted
codeword—we see that its occurence is also low.
7.3 PP-ARQ in a busy network
We now present results for an implementation of the PP-ARQ
protocol as described in Section 6. Our results in this section are
from trace-driven simulation of PP-ARQ, using traces from the
testbed of Figure 8. Using trace-driven simulation, we simulate a
range of different packet sizes realistic for a mesh network [30],
attaching a 24-byte preamble [2] to each packet.
Figure 16 shows the aggregate received thoughput across all
links in the testbed for packet-level CRC (the status quo), frag-
mented CRC, and PP-ARQ. We see that PP-ARQ achieves roughly
a 2× capacity improvement over the status quo, without needing
the fragment-size tuning described in Section 7.1.2.
One signiﬁcant cause of our performance improvements over the
status quo is the avoidance of retransmitting data that reached the
receiver, but was discarded due to a bad checksum. Figure 17 quan-
tiﬁes this intuition. In the status quo (“Packet CRC” in the ﬁgure),
retransmissions are always packet-sized in length, and so we see