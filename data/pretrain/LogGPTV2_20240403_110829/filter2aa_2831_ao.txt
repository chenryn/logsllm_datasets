might think.
You'll only have performance problems when multiple cli-
ents are accessing the exact same object. This is rare because
most clients will create their own instance of the object. Multiple
instances of the object run in separate apartments, and therefore
work independently of one another. Singleton objects are one
case where a single object is accessed by multiple threads - in
singleton objects apartment threading might be problematic. 
Another disadvantage is that apartment threaded objects
can't utilize multiple CPU's. Admittedly, this is very rarely a sig-
nificant performance concern. If you have a singleton class,
you're going to have to look carefully at performance issues. Sin-
gleton objects share many of the performance concerns of single
threaded objects.
Performance for single threaded servers can be a problem.
Even if a server has multiple objects, they all run from the same
message loop. That means all processing is going through the
same pipe, which will cause performance bottlenecks.
164    Chapter 10 •
COM Threading Models 
Free Threading Model
Free threading is not a panacea for performance problems. It has
a lot of disadvantages, and in many cases little benefit. However,
for some specific cases it can be very powerful.
Programming free threaded objects is complex. You have to
assume that your object is going to be accessed simultaneously
by random threads. That means that all member variables are
wide open to be changed at any time. Stack based local variables
are specific to the calling thread, and will be safe. There are two
ways to handle this problem: explicitly write code to serialize
access to data (using standard synchronization techniques such
as mutexes), or ensure that the object is stateless.
“Stateful” and “stateless” refers to how an object stores data.
An object is stateful if it retains information between method
calls. Using global, static or even member variables may make
your object stateful.  Stateful objects are a problem because mul-
tiple threads can change their data unexpectedly, causing erratic
and failure-prone behavior.
A stateless object doesn't retain information, and isn't prone
to being unexpectedly changed. Here's an example of a stateless
method call in a COM object.
STDMETHODIMP CBeepObj::Beep(LONG lDuration)
{
::Beep( 550, lDuration );
return S_OK;
}
The only data used by this method is a local stack variable
(lDuration).  There's not really much that could go wrong here.
This method would work safely in any threading environment.
If you write an object that needs to retain globally accessible
data, it will have to use the Win32 synchronization methods to
protect the data. If you've done much of this you'll realize what a
truly exacting task it can be. 
If you're willing to spend the design and programming time
to ensure thread safety, you can get some performance advan-
Testing the Different Models
165
Additonal Information and Updates: http://www.iftech.com/dcom
tages. Each free threaded method call executes as soon as it gets
CPU time. It doesn't have to wait for other objects to complete.
COM maintains (through RPC) a pool of threads that are ready to
service any incoming calls.
There is very little marshaling overhead on free threaded
objects. For in-process severs, there is no need for a proxy and
stub between the object and its client. (Out-of-process servers
will almost always require marshaling.) Data can be safely trans-
ferred between in-process free threads without any serialization
overhead. Because free threaded objects don't have a message
pump, there is no need for a busy message loop to rob CPU
cycles. Data doesn't need to be placed on, and removed from,
the message queue.
Perhaps the biggest gotcha about free threads is marshaling.
Even if you create a free threaded server object, it may incur sig-
nificant marshaling overhead. COM is very conservative about
how it marshals data. If the client is apartment threaded, and if
the server is free threaded, COM will marshal all access to the
object. This marshaling will impact the performance of the
object. 
Testing the Different Models
You can easily experiment with and understand the three thread-
ing models using the beep server presented at the beginning of
the book. Create three versions of the server with the Wizard,
one with single threads, one with apartment threads and one
with free threads. Modify the server so that it beeps for 10 or 15
seconds (or beeps and then sleeps for 10 seconds). Now run
multiple clients in separate windows and watch what happens. 
In the single threaded case, all of the beep requests from all
of the separate clients will be serialized. You will hear each beep
for the 10 second duration, followed by the next beep. In the
free threaded case you will find that beeps can occur simulta-
neously because they are being created by multiple threads. If
you multi-thread the client so it can simultaneously make multi-
166    Chapter 10 •
COM Threading Models 
ple calls to Beep, you will be able to see the difference between
apartment and single threaded objects. 
Summary
COM has four threading models: single, apartment, free, and
both. Single threads are a subset of apartment threads. Apart-
ment threads offer good performance for most applications
while eliminating most thread synchronization concerns. The
apartment model synchronizes access to the COM object, and
Marshals data to and from it. 
Free threaded objects don't have any synchronization mech-
anism - the programmer has to ensure thread safety. If you've
done much multi-threaded programming, you know how com-
plex and difficult to debug it can be. Writing thread-safe code
isn't an easy task. 
If you're working with the Single  or Apartment model, you
don't have to worry about thread safety, but your application
may take a performance hit. Free threaded servers are potentially
more efficient because they can take advantage of the multi-
threading and multi-CPU architecture of windows. 
E
L
E
V
E
N
11
The COM Registry   
This chapter describes how the registry is used to store informa-
tion about COM servers. 
One of the important features of COM is that it allows a cli-
ent program to use a component without locating, starting, and
manually connecting to a server. This greatly simplifies the client
program. However, this does mean the information required for
server activation must be stored somewhere. On Windows, this
type of configuration data is stored in the Registry.
The Registry is a single, well-organized location that stores
all system, application, and user configuration information. Nor-
mally the user does not manipulate the registry directly, although
that is possible using the Registry Editor. 
In one sense, COM applications aren’t really stand-alone
programs. In order to run a COM application, a complex interac-
tion between the operating system and the application takes
place. The Service Control Manager (SCM) does the work of
locating, starting, and shutting down COM servers. In one sense,
the server is just part of a complex interaction between the cli-
ent, Windows, and the COM components. For a COM server to
operate it must have registered itself and its capabilities with
Windows.
168    Chapter 11 •
The COM Registry 
COM stores three types of information in the registry:
• Human readable information about COM classes
• The mapping of CLSIDs to their servers
• Information about server capabilities
Another name for the registry is the “Class Store”. On Win-
dows 95 and NT 4.0, the Class Store is synonymous with the
Registry. In future versions, the Class Store will evolve into a
centralized storage location for COM information.
There are several ways in which COM information is written
to the Registry. Most commonly, COM servers have the ability to
store this registration information themselves - also known as
self-registration. This capability fits in very nicely with the com-
ponent model because it allows objects to be responsible for
their own configuration. The alternative would be to include an
external registration component for each object (such as an REG
script).
Self-registration can be implemented in both remote and In-
process servers. There are several ways to implement this capa-
bility. We’ll take a closer look at how ATL servers handle registra-
tion. We will also be taking a look at the registry structures that
hold COM information.
The COM Registry Structure
The registry is organized in a tree structure. The top level of the
tree consists of a number of “Hives” or HKEY’s. Exactly which
hives you have depends on the operating system. The two hives
that are of interest to COM are HKEY_LOCAL_MACHINE and
HKEY_CLASSES_ROOT.  You’ll find these two keys on both Win-
dows 95 and NT.
The key HKEY_CLASSES_ROOT is where all COM’s registry
information is kept. Actually, if you look carefully, you’ll find
that 
HKEY_CLASSES_ROOT 
is 
a 
subdirectory 
under
HKEY_LOCAL_MACHINE. The HKEY_CLASSES_ROOT key is
just a shortcut.
The COM Registry Structure
169
Additonal Information and Updates: http://www.iftech.com/dcom
There are numerous keys and branches under the
HKEY_CLASSES_ROOT branch, but only a few basic types.
These keys are mappings used to locate servers, classes, and
server information. Here’s the tree structure:
Figure 11–1
The registry is arranged in a series of “hives”. The two hives 
important to a COM programmer are 
HKEY_LOCAL_MACHINE and HKEY_CLASSES_ROOT
Figure 11–2
HKEY_CLASSES_ROOT is simply an alias for the Classes 
key found in HKEY_LOCAL_MACHINE/Software.
-
My
Computer
HKEY_LOCAL_MACHINE
+
+
+
HKEY_CLASSES_ROOT
other
keys...
-
HKEY_LOCAL_MACHINE
+
-
Classes
SOFTWARE
170    Chapter 11 •
The COM Registry 
Each of these keys stores a specific type of information.
The most significant of these types is the CLSID, which is a
COM class identifier. 
Figure 11–3
Standard keys in HKEY_CLASSES_ROOT
KEY 
Description 
 AppID 
Application ID. Each AppID represents a COM server, which 
supports a grouping of one or more COM classes.
 CLSID 
Class ID. The ID of a COM class. The CLSID key is used to 
map a class to its server. Each entry under this key will be a 
GUID describing a COM object and it’s server.
 Interfaces 
Information about the interface Proxy/Stub.
 ProgID 
Program ID. Used to map a readable class name to its CLSID. 
There are numerous ProgID’s under HKCR.
 Typelib 
Type library information.
Table 11.1
Standard keys in HKEY_CLASSES_ROOT
-
HKEY_CLASSES_ROOT
+
+
AppId
CLSID
+
Typelib
+
ProgID 0..n
+
Interfaces
Registration of CLSIDs
171
Additonal Information and Updates: http://www.iftech.com/dcom
Registration of CLSIDs
Class information is stored in the HKEY_CLASSES_ROOT/CLSID
key. This branch of the registry has a separate entry for the
GUID of each registered COM class in the system. A registry key
will be set up for each GUID - surrounded by curly braces. For
example, the BaseTypes class has a key of {FF23CF23-89D5-
11D1-8149-000000000000}.
When COM needs to connect to the server, it uses the GUID
of the Class ID to find server information. CLSID is the only
required key for a COM component. At a bare minimum, all
COM components should have a valid entry under this registry
key.
 The CLSID key may have several sub-keys and data entries
under it. The exact set of registry entries depends on the specif-
ics of the COM class. In the example above, BaseTypes has a
remote (EXE) COM server. This dictates that it has a key called
LocalServer32, which points to the name of the executable pro-
gram. 
Following is a table of common values found under the
CLSID branch:
Figure 11–4
The CLSID registry entry for a typical COM server
-
CLSI
D
+
{00000303-0000-0000-C000-000000000036} = FileMoniker
+
+
+
LocalServer32 = C:\MyDir\MyServer.exe
ProgID = BaseTypes.BaseTypes.1
Other CLSID keys...
+
{FF23CF23-89D5-11D1-8149-000000000000} = StringTypes Cla
{FF23CF20-89D5-11D1-8149-000000000000} = BaseTypes Clas
-
VersionIndependentProgID = BaseTypes.BaseTypes
AppID = {FF23CF13-89D5-11D1-8149-000000000000}
+
172    Chapter 11 •
The COM Registry 
This is by no means an exhaustive list of values. You will
often find other values under this key. Many of these are keys for
specific OLE components. 
Registration of ProgIDs
ProgID stands for programmatic identifier.  The ProgID is a
human readable name for the COM class. This is usually the
component name used with imported Type libraries (using smart
pointers), or when creating Visual Basic objects. Ultimately, the
CLSID is the unique identifier for each COM object. The CLSID is
always unique, ProgID’s are not. ProgID’s are just a convenience
for locating the CLSID.
Here’s the smart pointer example:
IBasicTypesPtr pI( _T(“BasicTypes.BasicTypes.1”) );
And the Visual Basic line:
Registry Entry 
Description
 AppID 
Associates the AppID with the CLSID. The AppID 
can be looked up under the \AppID key in the 
registry.
 InprocServer32 
The filename and path of a DLL that supports the 
CLSID.
 LocalServer32 
The filename and path of a server application that 
supports the CLSID. 
 ProgID 
The ProgID of the class with a version number.
 ThreadingModel 
Specifies the threading model for the CLSID if it is 
not specified. Values can be Apartment, Both, and 
Free. This key is used with InprocServer32 for in-
process servers.
 VersionIndependant-
ProgID 
The ProgID of the class, without a version num-
ber.
Table 11.2
Standard CLSID values in the registry.
Registration of ProgIDs
173
Additonal Information and Updates: http://www.iftech.com/dcom
Set Testobj = CreateObject(“BasicTypes.BasicTypes.1”)
The COM subsystem will take this name and look it up in
the Registry under ProgID. There are two main ProgID entries
under HKEY_CLASSES_ROOT. Here’s what they look like:
As you can see, COM can look up the ProgID either with or
without a version number. Once the ProgID is found, it is used
to determine the CLSID, which is required to create the object. 
Most 
of 
the 
entries 
you’ll 
find 
under 
the
HKEY_CLASSES_ROOT branch are ProgID’s. These typically
have the format of ... You’ll
quickly see that there is a huge variation on this standard. Typi-
cally the ATL wizard generates ProgID’s that don’t follow the
standard. ATL names have the format ... If you want to follow the standard you’ll have to modify
the code that the wizard generated files.
The ProgID shows up in several other places. You’ll often
find a copy of the ProgID under the key of a specific CLSID. 
Figure 11–5
The CLSID and ProgID stored in the registry
-
HKEY_CLASES_ROOT
-
BasicTypes.BasicTypes = BasicTypes Class
+
CurVer = BasicTypes.BasicTypes.1
-
BasicTypes.BasicTypes.1 = BasicTypes Class
+
CLSID = {543FB20E-6281-11D1-BD74-204C4F4F502
174    Chapter 11 •
The COM Registry 
Registration of AppIDs
AppID stands for Application Identifier. The AppID key is found
under HKEY_CLASSES_ROOT in the registry. You’ll also find an
AppID string under the CLSID registry key for a COM Class. 
AppIDs are used by DCOM to group information about the
COM applications. Many COM servers support more than one
COM object. The AppID may contain information about how to
run the server, if it runs on a remote computer, and access per-
missions.
Here are some common values found under the AppID key:
Self-Registration in ATL Servers
There are several ways the server can write entries into the regis-
try. The most direct method is to write a program that writes its
values directly into the registry using the Registry API calls. This
is conceptually simple, but can be very frustrating in practice.  
 Registry Entry 
Description 
RemoteServerName 
The name of a server on a remote computer. This 
is required if the client program doesn’t specify 
the server in the COSERVERINFO structure when 
calling CoCreateInstnaceEx(). 
LocalService 
Used to specify that a server runs as a Windows 
NT service. Used in conjunction with ServicePa-
rameters. 
ServiceParameters 
This is the command line passed to the server 
when it is started as a Windows NT service. Value 
= “-Service” 
RunAs 
Specifies that the server be run as a specific user. 
This is often used to give the server network priv-
ileges of a particular user.
Table 11.3
Common AppID values
The RGS File
175
Additonal Information and Updates: http://www.iftech.com/dcom
COM provides a standard interface (IRegister) for registra-
tion. In this section, we’ll look at how ATL and the ATL wizard
handles object registration. 
The RGS File 