架构系统的韧性风险分析方法.第 4 节以一个微服务架构系统 Sock-Shop 为例,对本文提出的方法进行案例研
究.第5节进一步分析案例研究的实验结果,总结本文的工作,并提出下一步的研究计划.
1 相关工作
在学术研究中,韧性最早由生态学家 Holling 于 1973 年所提出,用以表示一个生态系统响应外部干扰并恢
复由外部干扰所带来的损害的能力[16].随后,韧性这一概念逐渐被引入至社会-生态系统、经济学、组织管理、
城市规划等多个领域[17,18].在软件/计算机领域中,韧性的概念虽然在微服务架构诞生之前就已被提出,但计算
机领域有关韧性的研究相对于其他领域仍处于初步阶段.Laprie 于 1992 年在可靠性(dependability)相关定义的
综述中提出了韧性的概念,并将韧性定义为软件系统对故障的恢复能力[19];随后,于 2008 年提出将韧性作为可
靠性(reliability)的引申研究,重新将韧性定义为:在软件系统在面对系统环境、配置等因素变化时,系统维持服务
发布状态的能力[20].2012 年,由科因布拉大学和纽卡斯尔大学建立的 AMBER(assessing, measuring, and
benchmarking resilience)组织回顾了各文献对韧性的定义,并阐述了韧性在云计算中的必要性以及与软件韧性
的相关研究[21].一些针对软件/计算机韧性的研究[22−24]基本都通过应用其他领域的定义来说明韧性这一概念,
并尝试解释韧性与可靠性、容错性等软件质量特性的关系.
在微服务架构被提出的几年内,微服务架构韧性的重要性就已在一些应用书籍[10,25]以及学术研究[11]中被
1234 Journal of Software 软件学报 Vol.32, No.5, May 2021
提出.与软件/计算机整个领域的现有韧性研究相同,目前绝大部分提到微服务架构韧性的研究仅仅提到了韧性
的概念,并基本以现有韧性机制(如负载均衡、熔断机制等)的优化研究为主,包括微服务的健康管理[26]、负载均
衡[27]、故障恢复机制[28]、故障发现等[29].也有少数针对微服务韧性展开的相关理论研究.Heorhiadi等人提出了
一种微服务架构的韧性测试框架[30];Thomas和Andre提出了用于微服务架构性能和韧性基线分析的元模型[31],
Giedrimas根据现有的韧性机制总结了微服务架构韧性设计中需要考虑的几个方面[32],Andre和Aleti提出了一
种结合了工作负载和故障注入的微服务架构韧性基线验证框架[33],Michal和Marian比较了单体应用和微服务
架构之间在性能和韧性之间的差异[34].然而,现有微服务韧性的研究中并未有从软件风险角度讨论韧性的研究.
软件风险评估(software risk evaluation)是软件工程中的重要过程之一,其中,软件风险识别是软件风险评估
过程中的首要步骤[35].主流的软件风险评估方法有故障树分析法(fault tree analysis)[36]、错误用例法(misuse
case)[37]、威胁建模(threat modeling)[38]以及FMEA法[39].上述的评估方法在软件风险识别阶段均使用人为方法
识别软件风险,通过参考专家经验以及类似的历史项目或者头脑风暴来列出可能威胁软件本身以及软件开发
过程中潜在的风险.其中,威胁建模在风险识别阶段引入了 STRIDE 模型[38],通过枚举不同的风险类型启发风险
分析人员找到软件项目的潜在风险.近年来,对软件风险导出方法的研究也主要以针对不同领域软件的优化为
主,软件风险的识别仍然使用人为方法[40,41].
混沌工程[42]是由Netflix公司于2017年提出的一种用于验证微服务系统对故障应对能力的实验方法.通过
随机地对目标系统进行故障注入,观察系统服务是否被故障影响.Netflix 针对自身的应用的关键服务——视频
播放服务,以每秒视频的启动次数(video-stream start per second,简称 SPS)作为度量指标,通过观察故障注入后
视频播放服务的 SPS 值是否会低于指定阈值,判断注入的故障是否为潜在系统风险.目前,在计算机领域有关混
沌工程的学术研究极少,在 SCI、EI、DBLP 等数据库中对“Chaos Engineering”一词进行检索,仅能搜索到少量
与 Netflix 提出的混沌工程概念一致的相关文献.在提出混沌工程的概念后,Netflix 又针对混沌工程的商业价
值[43]、测试平台[44]及混沌实验的执行过程[45]进行了进一步阐述.Zhang 等人针对 Java 虚拟机提出了
ChaosMachine框架[46],该框架能够在混沌实验的过程中.通过添加Java注释的方式实现在Java代码中插入异常
(exception)抛出行为,以验证 Java 服务捕获并处理异常的能力.Jesper 等人针对容器环境提出了 ChaosOrca 框
架[47],实现了对部署微服务环境的容器的系统调用进行故障注入.Kennedy 等人利用混沌工程的方法随机地对
云服务进行安全性攻击,以发现云服务中的数据安全问题.目前,混沌工程已被业界认可为一种可实践的方法
论[48−50],并已有一些可用于实践的工具,如 Netflix 的 ChaosMonkey、阿里巴巴的 Chaosblade、混沌工程服务
Gremlin以及开源项目Chaos-toolkit等.这些工具目前的主要功能为实现特定的系统环境扰动,并提供对应混沌
实验文件模板或指令给测试人员,而有关混沌实验的具体设计过程并没有相关实现.本文的案例研究中,也将利
用上述工具实现的系统环境扰动发现目标系统潜在的韧性风险.
故障诊断是用于分析软件风险对软件系统影响的一种重要方法.现有针对分布式服务架构的软件系统的
故障诊断方法可以分为基于监督学习的方法和基于系统调用关系的方法.
• 基于监督学习的方法[51−54]需要在一个已标签过的数据集上进行机器学习模型的训练,训练后的模型
能够判断当前系统中是否存在某一种类型的异常.目前,基于监督学习的故障诊断方法需要大量收集
系统的历史数据,并且通常仅能判断目标系统是否存在某一特定类型的故障.
• 基于系统调用关系的方法将首先构建出系统服务和系统资源之间的依赖关系图,并根据依赖关系定
位系统故障的根因.其中,系统服务和资源的依赖关系通常参考已有的经验知识[55−58],或者通过在代码
中插桩获取服务或组件之间调用关系[59−62].这一过程需要人工识别服务和资源之间的依赖关系或者
在现有系统上开发特定的工具捕获依赖关系.
为了能够仅通过系统性能数据构建出微服务架构系统的依赖关系图,陈鹏飞等人先后提出了
CloudRanger[63]、Microscope[64]、CauseInfer[65]这3种根因诊断模型.上述3种模型均使用了因果搜索算法分析
目标微服务系统的系统资源和服务之间的因果关系并构建因果关系图,且通过实验证明了因果搜索算法在对
微服务系统的故障诊断上相对于现有故障诊断方法在准确率和效率上具有显著的优势,且无需对系统性能数
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1235
据标注标签.参考上述研究工作,本文在韧性风险的分析过程中同样使用了因果关系搜索算法来构建目标微服
务系统中性能指标之间的依赖关系.
本文作者在先前的研究工作[14]中提出了微服务韧性度量模型 MRMM,该模型使用了性能降级程度、降级
恢复时间和降级损失这 3 个度量维度度量了一次系统环境扰动产生的服务降级中系统性能的变化,以体现系
统环境扰动对微服务架构系统的影响程度,如图 2 所示.以 MRMM 为基础,该研究提出了一种韧性需求的表示
方法,通过目标导向的需求模型体现出微服务架构中韧性目标、韧性风险和韧性机制之间的关系.然而,如何识
别出一个微服务架构系统中的韧性风险并对其进行分析,并没有在该研究的讨论范围内.
Fig.2 Three resilience metrics in MRMM
图2 MRMM中的3个韧性度量指标
2 微服务架构系统韧性风险的识别方法
基于混沌工程的实践方法和微服务韧性度量模型 MRMM[14],本文提出了针对微服务架构系统的韧性风险
识别方法.相对于传统的软件风险评估模型中人为识别软件风险的方法,该方法将利用混沌工程工具中已实现
的系统扰动事件类型,以随机的方式自动构建出大量混沌实验,持续地对目标微服务架构系统进行混沌实验,并
以预先设立的韧性度量目标判断某种系统环境扰动是否为韧性风险,实现了一种针对韧性风险的发现策略,并
免去了人为穷尽并验证各服务中不同系统资源类型的各种环境扰动对目标系统影响的人工成本.具体的混沌
实验实例详见本文第4.2节的案例研究部分.
2.1 假设与前提
本文所提出的微服务系统韧性风险识别方法具有以下假设和前提.
(1) 目标微服务架构系统遵循DevOps的开发模式,系统拥有完整的自动化构建、部署体系.
(2) 目标微服务架构系统已完成了首次迭代,并有一个可部署执行的版本.
(3) 目标微服务架构系统中,所有系统服务的实时服务性能数据可以通过工具采集.
(4) 目标微服务架构系统由于本身的性能设计缺陷导致的服务性能下降不在本文的研究范围内.
(5) 本文将仅考虑单个系统环境扰动对微服务架构系统的影响,对于多种扰动对服务的组合影响,将在本
文的后续研究中进一步探讨.
2.2 韧性风险识别方法
本文提出的韧性风险识别方法将包含以下几个步骤.
(1) 确立服务性能基线
通过设立由MRMM的3项度量指标构成的服务韧性目标,可以描述出一个微服务架构系统预期达到的服
务韧性.当一个服务发生的某次服务降级所测量得到的服务韧性超出了其服务韧性目标的阈值范围,导致该次
服务降级的扰动将被识别为微服务架构的韧性风险.MRMM 中的各项韧性度量指标均通过计算服务实际性能
与服务性能基线的差异得到,因此在韧性风险识别过程的开始阶段,需要对目标微服务架构系统所提供的每个
系统服务建立服务性能基线,以判断服务是否处于服务降级状态.确立服务性能基线的过程中包含两个步骤.
a) 确定服务性能指标.
1236 Journal of Software 软件学报 Vol.32, No.5, May 2021
根据服务类型的不同,服务性能的关注重点也会不同.因此,每一个系统服务都需要确定其关键服务性能指
标.服务性能指标的选择可以参考现有IT系统性能标准(如SPEC[66]、TPC[67,68]、ETSI GS[69])、性能评估数据
集[70,71]以及其他服务度量指标选择相关研究[72]中常见的性能指标.考虑到微服务架构系统的最终目标是为互
联网公司获取盈利,一些特定的服务需要设立与商业需求有关的性能指标.例如,Netflix 将每秒用户视频的播放
数量作为一种需要检测的关键性能指标[43].
b) 根据服务性能指标确立服务性能基线.
在确定服务性能指标之后,对每一个服务的服务性能指标建立对应的服务性能基线.根据性能指标类型的
不同,性能基线既可能是一个定值(如服务响应时间的基线值通常为一个定值),也可能随事件变化动态取值(如
销售服务的每秒成功交易量的基线值会随着销售淡旺季变化而变动).定值的性能基线的设立方式有统计历史
运行数据(如服务处于正常状态时的性能数值)、领域专家给出经验值、参考相关标准(如上文提到的IT系统性
能标准)给出的建议值等,动态的性能基线则可以在历史服务性能数据上使用时间序列数据处理算法(如
EWMA、ARMIA、LSTM等)计算服务在某个时段中若正常运行其性能的预估值来得到.
(2) 设立服务韧性目标
服务韧性目标是用于判断系统环境扰动是否为韧性风险的基准,其体现了系统环境扰动发生后系统服务
的服务降级程度的可接受范围.服务韧性目标将按照MRMM中的3个韧性度量指标进行设立.各个系统服务的