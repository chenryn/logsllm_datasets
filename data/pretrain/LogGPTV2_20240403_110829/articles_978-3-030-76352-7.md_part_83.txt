connectedcalculusunits
KMeansModels
AI Service Providers
(ML Model Training)
AI Service Providers
(ML Model Training)
ImageDataSet
EdgeAI-IoTSegment CoreAIserviceSegment
Fig.1. General architecture for edge AI-IoT network
The general framework of our proposal is described in Fig.1. The framework is
composedoftwosegments:EdgeAI-IoTSegmentandCoreAIServiceSegment.
These two segments are connected to share data and models.
EdgeAI-IoTSegment: EdgeAI-IoTSegmentisthepartoftheIoTwherethe
plant detection Machine learning models are deployed in AI-IoT-Nodes. These
nodes are composed of at least a camera sensor and connected small compu-
tation unit like raspberry pi. Plant leaves images are taken and analyzed by
AI-IoTnodestodetectleafdiseaseatitsearlystage(Fig.1).Theresultofplant
leaf disease detection is sent to the core AI-Core segment where farmers and
agronomics can exploit the service.
Core AI Service Segment: This segment is in the cloud and hosts machine
learning tools and image datasets for training them to detect plant leaf disease.
NodesinthissegmentareresponsiblefortrainingmachinelearningKMeansKer-
nelmodelsusingkernelImagesanddeploythemtotheAI-IoTNodes.Operation
ofthisframeworkisasfollows:AI-ServiceSegmentselectkernelimagesthathave
corecharacteristicsofdiseasedleaf(Kernel-Images),useKMeansmachinelearn-
ingalgorithmtobuildclustersofKernel-Imagessothatdiseasedregionsareone
cluster. We call the resulting models KMeans Kernel-Model. These models are
deployed to the AI-IoT Nodes that use them to analyze the stream of pictures
that comes from the camera sensor (Fig.2).
554 Y. Gueye and M. Mbaye
Stream Images
Communication
Interface
-
Machine Learning
Kernel Model
+
Fig.2. Architecture of an AI-IoT node
4.2 Core AI-IoT Service Segment
The main functionalities of the framework are implemented in the Core AI-IoT
Service Segment. The process is composed of three tasks:
– Select Kernel-Images
– Build K-Means Kernel Models
– Deploy the service to the Edge AI-IoT Segment
All these functionalities are built on KMeans clustering because it has low com-
putation constraints and is efficient for feature extraction. K-Means Clustering
is used here to separate the image into four clusters among which one cluster
contains most of the disease region. Figure3 illustrates the output of KMeans
clustering in a diseased plant leaf. It shows well how we can detect regions of
interest. using square root distance of pixels RGB or HSV color spaces. Some-
thing also interesting is that this clustering can work with tone variation of
colors.
Fig.3. Example of K-means clustering output on a diseased plant leaf image. Cluster
2 contains the biggest diseased region
KMeans Kernel Learning Based AI-IoT Framework for PLDD 555
4.3 KMeans Kernel Learning
The principle of KMeans Kernel Learning consists in creating KMeans models
trained with selected images (Kernel Images). The clusters resulting from these
Kernel Images are called Kernel Clusters and are then labeled diseased zones or
healthy zones. Figure 4 shows how it works. The framework uses Kernel Image
Ik0 which is supposed to have representative features of a diseased plant leaf.
This Kernel Image is used to build a KMean Kernel Model ϕ k0 and Kernel
Clustersω i, k0;i∈[0,4].Eachclustercanbelabelledhealthy ordiseased.Inour
contextweorientKMeansalgorithmsotheclusterthatcontainsmostofdiseased
regionisalwaysnamedω 2, k0.KMeanKernelModelsarejustclassifiersbasedon
KMean that have been trained with data IR3 composed by Kernel Image pixels
components. We limited the number of clusters to 4 because we observed that
the number of empty clusters increases when K ≥4.
Kernel Model
KMeans
Training
Kernel Centroids
Fig.4. Principle of KMeans Kernel models
More formally, considering Ik0 a Kernel Image chosen we have the Eq.(1):
KMeans(I k0)= ϕ k0,Ω k0 (1)
Where ϕ k0 is the KMeans Kernel Model clustering model based on the Ik0
kernel image and Ω k0 is the set of cluster centroids and their labels as a healthy
or disease regions of the plant leaf. Ω k0 is defined by Eq.(2):
Ω k0 = (ω i,k0,label)/i∈[0−3],label∈ health,diseased (2)
Where ω i,k0 is the centroid of the cluster number i (related to I k0) and the
label indicates if the cluster formed from this centroid belongs to a diseased
556 Y. Gueye and M. Mbaye
region or healthy. We make the assumption that by taking the one cluster that
contains most significant disease region we can make decision about the health
of the plant leave. So only one cluster is labelled diseased and we always refer
to it by ω 2, k0. The Fig.5 illustrates a Kernel Image and clusters built based on
KMean Kernel Machine Learning. At this point KMeans Kernel Model is ready
to be used to detect Plant Leaf Disease from any other image. For instance,
considering Image I 1, the clustering based on {ϕ k0,Ω k0} is defined by Eq. (3):
Fig.5. Example Kernel Image and its Clusters based on ϕ k0
ϕ k0(I 1)= (C 0,1,h),(C 1,1,h),(C 2,1,d),(C 3,1,h) (3)
where C x,1 are the clusters produced by the model ϕ k0 applied to the data of
images I and their labels (h for healthy and d for diseased). If we consider n
1
ImagesI 1...I n theEq.(3)canbegeneralizedbyEq.(4)andillustratedbyFig.6.
⎡ ⎤
⎛⎡ ⎤⎞ (C 0,1,h 0,1) (C 1,1,h 1,1) ··· (C 3,1,h 3,1)
II ·1 =⎢ ⎢ ⎣(C 0,2, .h 0,2) (C 1,2, .h 1,2) · .· ..· (C 3,2, .h 3,2)⎥ ⎥
ϕ k0⎝⎣· ·⎦⎠ ⎢ . . . ⎥ (4)
. . . ⎦
n
(C 0,n,h 0,n)(C 1,n,h 1,n)···(C 3,n,h 3,n)
In this Fig. 6, the trained Kernel model is applied to n Images. The result is
clusters where cluster 2 (C 2,3) is the one that is more representative of diseased
regionoftheplantleaf.ItisakindofprojectionofKernelClusterstotheImages
I 1...I n. We also use a score to measure the quantity of clustering. It is a metric
of how big the disease is and is defined in Eq. (4):
  C 
Score ϕ k0(I) = I2 ∗100 (5)
Where C i is the number of points pixels classed in this cluster. If the plant
is healthy C 2 = 0. Figure 7 is an illustration of ϕ k0([I 1I 2]) where I and I
1 2
are respectively diseased leaf and a healthy leaf. So, the cluster 2 of I is empty
2
forthesecondplantbecausethisclusterissupposedtocontaindiseasedregions.
Thisresultshowsthatourplantdiseasedetectionalgorithmisworkingproperly.
KMeans Kernel Learning Based AI-IoT Framework for PLDD 557
…
Stream Image Stream Image Stream Image Stream Image
Kernel Model
…
Fig.6. Kernel Model application to a set of plant leaf images
Fig.7. Example of Kernel Clusters by the I k0 model. First is diseased leaf and the
second is healthy
4.4 Kernel Image Selection Process
OneparameterofourframeworkistheKernelImage.Itshouldberepresentative
enoughintermsofthefeaturesofdiseasedplants.Itisveryimportanttochoose
the kernel image or reference image because it has a big impact on efficiency of
the algorithm. That’s why we defined an algorithm to find the most accurate
Kernel Image. The algorithm is quite simple, it computes the accuracy of all
candidates images and picks most accurate (Algorithm 1). We executed the
algorithminthetomatobacterialspotdatasetofthePlantvillageDataset.The
expected result is to find out the best Kernel Images. Figure 8 illustrated what
the best kernel Image looks like. The highest accuracy Kernel Image was the
558 Y. Gueye and M. Mbaye
Algorithm 1: Kernel Image Selection
Input : I set of healthy H and diseased D plant leaves Images
Output: I k0 Best Kernel Image
foreach I ki in I do
{ϕ ki,ω 0i,....ω 3i} ← KMean s(I ki);
S[I ki] ← Accuracy(ϕ ki(I ki))H ;
D
end
return argmax I(S[I ki])
Fig.8. Top 6 Best Kernel Images Using Selection algorithm
rightmost image (Fig. 9) and its results on healthy plant leaf images. Knowing
this we have done larger performance evaluation.
Fig.9. Best Kernel image output by Algorithm on Plant Village Dataset Tomato
Figure10representstheresultsofrespectivelyϕ k0([I 1,I 2])representingclus-
teringofhealthyImagesandϕ k0([I 3,I 4])representingdiseasedones.Wecansee
that cluster 2 (C x,2) is almost empty for healthy leaves and capture diseased
region for diseased plant leaves.
KMeans Kernel Learning Based AI-IoT Framework for PLDD 559
Fig.10. Clustering of health and diseased images based on Best Kernel Image
4.5 Performance Evaluation
To evaluate the quality of our KMeans Kernel-Learning we used tomato images
from plant Village DataSet (www.plantvillage.org) and we set aside two classes:
healthytomatoleavesanddiseasedtomatoleaves.PlantVillageisadatabaseof
imagesaccessibletothepublic.Itiscomposedof54,306imagesofdiseasedplant
leaves and healthy plant leaves from 14 crop species. All images in the dataset
werecapturedundercontrolledconditionsagainstauniformbackground,resized
to a dimension of 256 × 256 pixels.
Main results we have are reported in the confusion matrix (Fig. 11).
– Horizontally, out of the 50 healthy images (i.e.: 48 + 2), 48 were correctly
classified by our KMeans KernelLearning classification system as suchand2
were estimated as diseased (i.e.: 2 false-negatives),
– Horizontally, out of the 30 diseased images (i.e.: 1 + 29), 1 was estimated by
the automatic Kernel KMeans classification system as healthy (i.e.: 1 false-
positive) and 29 were estimated as diseased;
– Vertically, out of the 49 sheets (i.e.: 48 + 1) estimated by the automatic
KMeans classification system as sound, 1 is in fact sound;
560 Y. Gueye and M. Mbaye
– Vertically, out of the 31 leaves (i.e.: 2 + 29) estimated by the automatic
KMeans classification system as diseased, 2 are in fact sound;
– Diagonally (from top left, to bottom right), out of the initial 80 sheets, 77
(48 + 29) were estimated correctly by the automatic k-means classification
system.
Predicted Class
(By the Kernel KMeansClassifier)
Healthyleaf Sick Diseased
Healthy 48 2
leaf (TruePositive) (False Negative)
Actual
class 1 29
Diseased
(False positive) (True Negative)
leaf
Fig.11. Confusion matrix of the proposed algorithm
– Accuracy: We can define the accuracy as being the number of really diseased
plantsleaffoundcomparedtothetotalnumberofpotentiallydiseasedplants,
based on our reference plants.
TP +TN
accuracy= =96,25%
TP +TN +FP +FN
– Precision: Precision is the ratio of correctly predicted positive observations
to the total predicted positive observations. The question this metric answer
is that of all the plants labeled as healthy, how many are really healthy? The
high precision is related to the low rate of false positives.
TP
precision= =97,96%
TP +FP
– TherecallTherecallisdefinedbythenumberofreallydiseasedplantsfound
with regard to the total number of diseased plants in the database.
TP
recall= =62,34%
TP +FN
– F1-score: The F1 score is the weighted average of the precision and recall.
Therefore, this score takes into account both false positives and false nega-
tives.
2∗(Recall∗Precision)
F1-Score= =76,19%
Recall+Precision
KMeans Kernel Learning Based AI-IoT Framework for PLDD 561
99
100 96,26 96,76 95
90
80
70 %
niycaruccA
60
50
40
30
20
10
0
Kernel KMeans KNN/SVM[6] SVM/GLCM [7] CNN[1]
DectectionTechniques
Fig.12. Accuracy: Kernel KMeans based detection vs other techniques
Detection Methods Sizeof trainingDataSet Accuracy (in %)
Kernel KMeans
80 96,26%
KNN/SVM[6] 200 96,76%
SVM/GLCM [7] 237 95%
CNN[1] 10000 99%
Fig.13.AccuracyandTrainingDatasetSize:KernelKMeansbaseddetectionvsother
techniques
We also compared our classification method with existing propositions for
plant leaf disease detection that are [1,5,6]. We compared our accuracy with
three other related works. These three other works respectively use the KNN
associated with SVM [5], SVM with GLCM [6] and Convolutional Neural Net-
work (CNN) [1].
Figure 12 shows the result of the comparison in term of accuracy and it
shows that the CNN hase the best result while the Kernel Kmeans has a result
which is comparable to other methods with 96% accuracy. The other element of
comparison is given in Fig. 13 where we compare the size of the dataset of each
method in comparison with the accuracy that is obtained. We can see that the
KNN/SVM method uses 120 more images for training than the Kernel KMeans
with an accuracy gain of only +0.5%. The SVM/GLCM uses 237 images for