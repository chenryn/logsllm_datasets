# 【缺陷周话】第60期：硬编码加密密钥
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 1、硬编码加密密钥
密码学借助加密技术对所要传送的信息进行处理，防止非法人员对数据的窃取篡改，加密的强度和选择的加密技术、密钥有很大的关系。常用的加密算法大都已公开，所以密钥的保密程度显得至关重要。如果密钥被泄露，对于对称密码算法，根据用到的密钥算法和加密后的密文，很容易得到加密前的明文；对于非对称密码算法或者签名算法，根据密钥和加密的明文，很容易计算出签名值，从而伪造签名。本文以JAVA语言源代码为例，分析“硬编码加密密钥”缺陷产生的原因以及修复方法。该缺陷的详细介绍请参见CWE
ID 321: Use of Hard-coded Cryptographic Key
(http://cwe.mitre.org/data/definitions/321.html)。
## 2、“硬编码加密密钥”的危害
在代码中使用硬编码加密密钥，根据密钥的用途不同，会导致了不同的安全风险，如加密数据被破解使得数据不再保密，与服务器通信签名被破解引发越权、重置密码等。
## 3、示例代码
### 3.1 缺陷代码
上述代码操作是使用硬编码密钥对原文进行加密的过程。首先第15行给定一个密钥字符串，16~17行根据给定的密钥字节数组和AES算法构造一个密钥对象，第18行同样使用AES算法实例化加密类。第19行使用加密模式对密钥对象进行初始化。第20行通过加密操作,返回加密后的字节数组。当程序中使用硬编码加密密钥时，所有项目开发人员都可以查看该密钥，甚至如果攻击者可以获取到程序class文件，可以通过反编译得到密钥，硬编码加密密钥会大大降低系统安全性。使用代码卫士对上述示例代码进行检测，可以检出“硬编码加密密钥”缺陷，显示等级为中。在代码行第15报出缺陷，如图1所示：
图1：“硬编码加密密钥”检测示例
### 3.2 修复代码
在上述修复代码中，在第18行构造密钥生成器，指定为AES算法,不区分大小写。第19行根据传入的字节数组生成一个128位的随机源，第20行产生原始对称密钥，第21行获得原始对称密钥的字节数组。KeyGenerator类作为密钥生成器可替代硬编码密钥。
使用代码卫士对修复后的代码进行检测，可以看到已不存在“硬编码加密密钥”缺陷。如图2所示：
图2：修复后检测结果
## 4、如何避免“硬编码加密密钥”
程序应采用不小于8个字节的随机生成的字符串作为密钥。