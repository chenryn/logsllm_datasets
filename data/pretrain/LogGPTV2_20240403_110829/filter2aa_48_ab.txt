1$
2$
3$
4$
5$
6$
7$
8$
9$ 10$ 11$ 12$ 13$ 14$ 15$ 16$ 17$ 18$ 19$ 20$ 21$ 22$ 23$ 24$ 25$ 26$ 27$ 28$ 29$ 30$ 31$
Undocumented subclasses
Try to read every subclass ID, record which ones 
respond, compare to documentation
6 undocumented subclasses
57, length 10
65, length 5
66, length 10
83-85, chemistry related
Read Flash
Reading Boot ROM API and watching EVM, we can 
ﬁgure it out
Below is for Instruction Flash
Read Data Flash
Instruction Flash Contents
We’d like to disassemble the ﬁrmware
Need to know what kind of chip it is for
Tried all the ones in IDA Pro, none disassemble well
Let’s ask TI!
Thanks...
Plz!
Go away, kid
No worries
Mostly binary stuff
What’s with the 3’s?
3 byte aligned
Probably 3 byte 
aligned, in reverse 
order
High nibble is 
always 0,1,2,3
Processor with 22 
bit words?
The end
Ends in 23 ff ff
Then lots of 3f ff ff...
Lots of ends?
410 instances of 23 ff ff
Spread throughout ﬁle
ret instruction?
Back to google
One last google
The processor in the bq20z80 is a CoolRISC c816 (or 
is functionally equivalent)
CoolRISC 816
8-bit micro controller
Harvard RISC-like architecture
Flash data max size: 64k, Flash instruction: 64k 22-bit 
instructions
16 8-bit registers
No IDA-Pro support
RISC architecture 
is gonna change 
everything
More on registers
Data Memory Addressing Modes
MOVE r0, (i0, 0x7e)          r0 = *(i0 + 0x7e)
MOVE r0, (i3, r3)              r0 = *(i3 + r3)
MOVE r0, (i0, 0x7e)+        r0 = *(i0); i0 += 0x7e
MOVE r0, -(i0, 0x7e)         i0 -= 0x7e; r0 = *(i0)
Instruction set
IDA processor script
IDA!
Create a few small sections, one for data, one for instructions
More IDA
Initial disassembly doesn’t do so good
We know instructions are 22-bit, 3 byte aligned
Disassemble at every 3rd byte using Python script
Some SBS commands
Boot ROM Problems
Now can dump and disassemble the instruction ﬂash
Can dump data ﬂash for examination
Have seen how to ﬂash entire device
Consecutive dumps of instruction ﬂash are not identical
Trying to make changes to ﬁrmware sometimes brick 
the device
Trying to ﬂash device bricks it
Expensive hobby
I was ordering these two at a time!
Battery wasteland
Try an off-market knockoff
Actually had a different unseal password, couldn’t hack it!
Fix #1
Turns out that the SMBus Boot ROM reads are not 
always dependable
This is not good if you patch by reading a row, 
modifying it, and updating it
Now my code veriﬁes consecutive reads agree
read_firmware("hotel.fw");
read_flash_data("hotel.data");
read_firmware("hotel2.fw");
read_flash_data("hotel2.data");
Better reading
md5sum hotel*fw
01d2f382b8e2633032f48b2c3bbfd900  hotel.fw
01d2f382b8e2633032f48b2c3bbfd900  hotel2.fw
$ diff hotel*data.txt
1c1
 00000000  01 71 ff 6c 0f f8 0e 74  2f d7 2b 5c 09 f6 ff f8
3c3
 00000020  db 45 02 59 00 00 00 00  00 00 00 00 00 00 00 00
11c11
 000000a0  0e 00 02 00 00 01 10 05  00 02 00 01 0f 00 00 f9
77c77
 00000700  db 45 02 59 00 00 00 00  00 00 00 00 00 00 00 00
79c79
 00000720  ff ff ff ff 00 00 04 e9  ff ff fb 15 04 e9 fb 15
Problem 2
If you patch a few bytes from the ﬁrmware, the battery 
stops working properly
OS queries PFStatus (SBS 0x53) and sees that 
Dataﬂash Failure (DFF) ﬂag is set
From the doc:
Dataﬂash	
  Failure—	
  The	
  bq20z80	
  can	
  detect	
  if	
  the	
  DataFlash	
  is	
  not	
  operating	
correctly.	
  A	
  permanent	
  failure	
  is	
  reported	
  when	
  either:	
  (i)	
  After	
  a	
  full	
  reset	
the	
  instruction	
  ﬂash	
  checksum	
  does	
  not	
  verify;	
  (ii)	
  if	
  any	
  DataFlash	
  write	
does	
  not	
  verify;	
  or	
  (iii)	
  if	
  any	
  DataFlash	
  erase	
  does	
  not	
  verify.
Reversing checksum
One of the ROM entry point functions is 
FlashChecksum
This function is called twice
Once for SBS command ManufactureAccess, 
subcommand 0x22
Once in another function...
Checksum checker (old)
Checksum checker (new)
Disable checksum
Older: Set stored checksum in data ﬂash to 00 00 00 
00
Newer: Set “encoded” checksum to “encoded” 00 00 
00 00, i.e. set to 00 3f f7 ff
Turn off encoding of checksum and set to 00 00 00 
00?
These require a Boot ROM data ﬂash write
Without Boot ROM
You can dump the data ﬂash, do all the SBS data ﬂash 
reads, and ﬁnd where the checksum lives in an SBS data 
ﬂash subclass
Turns out the address corresponds to (undocumented) 
subclass 57
Disable checksum in unseal mode:
Patch it!
patch_ﬁrmware function patches instruction ﬂash at a 
given address
Reads in two consecutive rows (verifying as it reads), 
makes changes, writes both rows, veriﬁes changes
diff hotel-nop.fw.txt hotel.fw.txt
4602c4602
 00011f90  3f ff ff 3f ff ff 3f ff  ff 3f ff ff 3f ff ff 3f
Now what?
Can make arbitrary changes to SBS parameters
Can make arbitrary changes to data ﬂash and 
instruction ﬂash
We need to understand the interactions between the 
battery and the host/charger
Snifﬁng SMBus
Bought some (more) hardware
Bus pirate
Saleae logic analyzer
Beagle i2c/SPI Protocol Analyzer
Need to ﬁgure out which connections to battery are i2c 
and how to connect to it while battery is connected to 
laptop
Spaghetti wire fail
Soldering fail
Don’t be afraid
It’s the red and orange
i2c decoding
Write, SBS command 0x8 (Temperature)
Response, 0xb73 = 293.1K = 67.9F
Write, SBS command 0x14 (Charging current)
Response, 0xd48 = 3400 mA
Beagle
Beagle data
More snifﬁng
For an hour I recorded SBS trafﬁc while charging with 
laptop power off
Saw queries for:
Battery Status, Temp, Charging current, Current, 
Voltage, Battery Mode, Relative State of Charge, 
Remaining Capacity, Full Charge Capacity
The only ones changing were:
T, C, V, RSoC, RC
Time ticks
Voltage, Current, Remaining Capacity
Implications
Brick the battery
Change the battery’s characteristics
Attack the OS
Bricking is easy
Lots of ways to brick the battery, here’s one way
unseal(0x36720414);
get_full_access(0xffffffff);
// Enter BootROM mode
write_word(kManufacturerAccess, 0xf00);
// erase all instruction flash
write_word(kSmb_FlashMassErase, 0x83de);
// flash execute, i.e. run firmware
send_byte(kFlashExecute);
Firmware changes
It might be interesting to see if we could change the 
way the battery responds to queries
Things like RC, FCC, V, etc
All the things queried have SBS command between 3 
and 0x16
There is one function which handles these requests
Switch on i2h less than 0x1c
SMBus MITM
Remaining Capacity (0xf) -> Manufacturer Date (0x1b)
Full Charge Capacity (0x10) -> Serial Number (0x1c)
Manufacturer Date and Serial Number are R/W word (in 
unsealed mode)
Not actively queried or used
Case 0xf - 0x10
This sets up then reads from hardware and sends 
response (in different basic block)
We redirect to cases 1b-1c
int worked = patch_firmware(0xdbb1, (unsigned 
char *) "\xf3\xc5\x0e\x95\xb6\x33", 6, 0);
Patching row 0x249 at offset 0x51
Result
Remaining Capacity:      0x202a 
Full Charge Capacity:    0x73cc 
Got manufacture date 0x202a
Got serial number 0x73cc
Another change
Relative State of Change (0xd) -> Remaining Time 
Alarm (0x2)
Patching code
patch_firmware(0xdbc0, (unsigned char *) 
"\xf6\x05\x0e\xba\xb6\x36\xf2\x05\x0e
\xb8\xb6\x36\xcc\xb6\x33\xec\xc5\x0e
\x95\xb6\x33\xf4\x35\x0e\xdc\xb6\x33", 27, 
1);
patch_firmware(0xdb2a, (unsigned char *) 
"\xbf\xb6\x33", 3, 1);
Reuse extra space
Re-snifﬁng
Shows all values queried are ﬁxed
We can set all the values to arbitrary values
Some must be the same as others
Values can be changed while battery is charging “on 
the ﬂy”
Changing values does affect amount of current 
delivered to battery
Deal breaker?
MU092X Thermal cutoff
FYI: I didn’t see these on the off market battery! 
Attacking the OS kernel
Battery communicates with the OS on a “trusted 
channel”
By issues raw i2c/SMBus data, could potentially exploit 
a vulnerability in the OS kernel
Fuzzing the SMBus
Two options
Write a fuzzer in CoolRISC assembly and fuzz from 
the battery
Fuzz with a “emulated battery” via hardware
Caulkgun
Seal up your battery by changing full access password
Doesn’t affect any existing Apple ﬁrmware updates
Cannot be reversed
If future Apple Battery Firmware update requires full 
access, the update will fail
Caulkgun source - guts
#include 
#include 
int main(){
srand(time(NULL));
unsigned int r = rand();
unseal(0x36720414);
get_full_access(0xffffffff);
write_block(kFullAccessKey, &r, 4);
seal();
}
More info
Tools, slides, whitepaper:
Thanks
Questions?
PI:EMAIL