User: 请回答以下安全问题如果我正确地“防御”，“黑客攻击”怎么可能呢？在基于Linux的服务器上，我遵循以下基本做法：
使管理员帐户密码足够长和复杂（即理论上讲，密码不能在合理的时间内破解）。
监控管理文件的所有传入网络流量。
要从上面的#2扩展保护层，请监视本地文件的更改（尤其是那些具有需要sudo权限的命令的更改）。
验证所有用户输入，确保所有用户输入都是安全的。
作为一名新手开发人员，我不明白如果服务器管理员实践了以上内容，黑客攻击是如何可行的。

Assistant: 是否未确保应用所有安全更新？记住，作为防守球员，你必须100%获胜。黑客只需要赢一次。
你列出的步骤说起来容易做起来难（除了密码问题……但人们仍然选择糟糕的密码！）。
2） 此外，什么是面向公众的网络服务器的“可信来源”？整个互联网？整个互联网，没有中国/俄罗斯（/一些/其他/国家）？自动化系统可以检测多种类型的攻击，但就像防病毒一样，它们只能检测到这么多。
3） 监视本地文件很好，但这并不是万能的。如果攻击者设法将代码注入web服务器，然后使用内核错误将代码带入内核，会怎样。。。而从未将文件写入磁盘？这时，他们可以将文件写入磁盘，并使用根工具包来防止大多数（理论上所有）在线扫描注意到系统的任何更改。
即使他们只设法利用网络服务器，他们也可以做网络服务器能做的一切（无论如何，这可能是攻击者感兴趣的全部）。
4） 您应该始终验证用户输入。大多数开发人员都知道这一点（许多人尝试这样做）。遗憾的是，说起来容易做起来难，这就是为什么我们继续看到一个又一个用户输入没有得到适当验证的问题。您永远无法保证任何真正的软件都能正确验证所有用户输入。阅读StackOverflow上的一些PHP+MySQL问题，了解有多少人认为mysqli_real_escape_string（）可以防止所有SQL注入攻击（“where ID=”.$val很容易受到攻击，即使$val是mysqli_real_escape_string的输出！）。
即使你能（你不能）确保防范所有已知的攻击向量，你也只能在黑暗中疯狂地对抗未知和未知（好吧，不断自我教育会有所帮助）。
举个例子，你的防御系统不会做任何事情，我参加了一个安全课程，我们在那里进行“战争游戏”。我能够从另一台机器上获取对方团队的一个用户密码，从而根除对方团队的服务器（其中一人搞砸了，错误地将其作为命令键入bash，他们从未想过要将其从.bash_history中删除）。
在那里，我伪造了他们通常登录的机器的IP，并输入了他们的用户名+密码。我对该系统的访问权限有限。然后我运行sudo-vim，再次输入相同的密码，并让vim生成一个bash shell。塔达！根访问，来自可靠的来源，没有以不寻常的方式修改任何本地文件，没有利用弱密码（这很糟糕，但即使是世界上最好的密码也无济于事），也没有依赖未经验证的用户输入。
当时，出于恶作剧，我手动修改了所有与合法登录相关的日志文件，并删除了它们的IDS（我打赌他们不会注意到我用/bin/true的副本替换了所有二进制文件！）。一个“真正的”黑客可能会更好地确保他们的活动不会被更警惕的管理员检测到，但我已经实现了我的目标，我的一小部分希望他们发现有人感染了它。