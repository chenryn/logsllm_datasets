commitment cij (i ∈ ind(P4), j /∈ ind(Pi4)) sent by Pi, the commitment is replaced with commitment of
dummy value.
– HYB2: Same as HYB1 except that P4 is added to Ck (k ∈ ind(P4)) if the opening forwarded by P4 to Pk
during InputCommiti corresponding to Pi’s committed share (i ∈ ind(P4k)) is anything other than what
was originally committed.
– HYB3: Same as HYB2, except that P1, P2 use uniform randomness rather than pseudo-randomness.
– HYB4: Same as HYB4, except that Y is computed via De(Y, d) = y in place of Y = Ev(C, X).
– HYB5: Same as HYB4 except that the TTP assigned by P4 sends y only if the view O4 sent by P4 comprises of
decommitments that opens to the input shares of the parties that were originally committed.
g4PC
HYB0
, we show that every two consecutive hybrids are computationally indistinguish-
Since HYB5 := IDEALFGOD,S4
able which concludes the proof.
c≈ HYB1: The difference between the hybrids is that when the execution does not result in P4 getting
access to the opening of commitment cij (i ∈ ind(P4), j /∈ ind(Pi4) sent by Pi, cij corresponds to the actual input
share xij in HYB0 while it corresponds to dummy value in HYB1. The indistinguishability follows from the hiding
property of sCom.
c≈ HYB2: The difference between the hybrids is that while in HYB1, P4 is added to Ck (k ∈ ind(P1)) if
the opening forwarded by P4 to Pk during InputCommiti (i ∈ ind(P4k)) corresponding to Pi’s committed share
results in ⊥; in HYB2, Ck is set to P4 if P4 sends opening anything other than what was originally committed. Since
the commitment scheme sCom is binding, in HYB2, P4 could have decommitted successfully to a different input
share of Pi other than what was originally committed, only with negligible probability. Therefore, the hybrids are
indistinguishable.
c≈ HYB3: The difference between the hybrids is that P1, P2 use uniform randomness in HYB1 rather than
c≈ HYB4: The difference between the hybrids is that in HYB3, Y is computed via Ev(C, X), while in
HYB4, Y is computed such that De(Y, d) = y. Due to the correctness of the garbling scheme, the equivalence of
Y computed via Ev(C, X) or such that De(Y, d) = y holds.
c≈ HYB5: The difference between the hybrids is that in HYB4, the TTP assigned by P4 would return y to
P4 if the view O4 sent by P4 comprises of decommitments that lead to non-⊥ (corresponding to the commitments
on shares output by the subroutine InputCommit); while in HYB5, the TTP assigned by P4 would return y to
P4 only if the view O4 sent by P4 contains decommitments that open to the input shares that were originally
committed. Since the commitment scheme sCom is binding even against an adversarially chosen pp; in HYB4,
P4 could have decommitted successfully to a different input share than what was originally committed, only with
negligible probability. Therefore, the hybrids are indistinguishable. This completes the proof.
pseudorandomness as in HYB1. The indistinguishability follows via reduction to the security of the PRG G.
HYB1
HYB2
HYB3
HYB4
E Security Proof for g4PC4
In this section, we provide a high-level overview of the proof of Theorem 5.6 that states the security of g4PC4
relative to its ideal functionality.
Proof. We describe the simulator Sg4PC4 for the cases of corrupt P1 and P3. The corruption of P2 and P4 is
analogous to the case of P1 and P3 respectively. We give only a sketch of the simulator below since the simulation
proceeds almost exactly as the simulation of g4PC described formally in Section D.
of InputCommitα, α ∈ P3, S 3
g4PC4 acts on behalf of honest P1, P2, P4 as follows: In round 1
g4PC4 chooses random values corresponding to the shares of honest parties accessible
For the case when P3 is corrupt, simulator S 3
42
to P3, namely xij (i ∈ P3, j ∈ Pi3) and acts according to the protocol. Commitments on the remaining shares
of honest parties are dummy. Correspondingly, on behalf of the honest parties, simulator receives commitments
corresponding to x3j(j ∈ P3) in round 1 of InputCommit3 and checks if there exists a majority commitment
corresponding to each of the shares. If not, P3 is added to Ci (i ∈ P3) and FGOD is invoked with default value
to retrieve y. Else, P3’s input is extracted using the shares corresponding to the majority commitment and its
opening. Consequently, FGOD is invoked using the committed input of P3 and y is obtained. The corrupt and
conﬂict sets of the honest parties are populated according to the protocol. For simulation of Round 2 on behalf of
garblers, we consider two cases depending on whether: (a) P3 gets access to the labels corresponding to any of its
non-committed input shares (b) P3 gets access to labels corresponding to its committed input shares. The case that
will follow can be determined at the end of Round 1 itself by simulator acting on behalf of the honest garblers since
P3’s committed input is known to simulator by then. Accordingly in Round 2, either the oblivious simulator of
the garbling scheme Sobv or the privacy simulator Sprv (can be invoked with output y obtained) is invoked for case
(a) and (b) respectively. In case (a) when GC returned by Sobv is used, the commitment on hash of the decoding
information is dummy and never has to be opened to P3 according to the protocol steps as for each garbler Pg
atleast one of Cg (cid:54)= ∅/Fg (cid:54)= ∅ holds. In the latter case when GC returned by Sprv is used, the commitment is done
on the value H(d), where d is returned by Sprv. This commitment is opened during Round 3 by simulator acting
on behalf of garbler Pg if Cg = Fg = ∅.
Next, if P3 sends a (TTP, β) message to a party in P3 and sends a valid O3 (with openings of committed
shares known to simulator) to Pβ in Round 3, (y, TTP) is sent to P3 on behalf of Pβ. Additionally, the conﬂict and
corrupt set of Pi, i ∈ P3 that are locally computed (during simulation of InputCommit3) are used by Pi to identify
TTP as per the protocol and (TTP, β) message is sent accordingly to P3 in Round 3. Subsequently, (y, TTP) is
sent to P3 on behalf of the Pβ.
g4PC4 acts on behalf of P2, P3, P4 as follows: Simulation of
InputCommitα, α ∈ [4] is the same as described for S 3
g4PC4 which would lead to extraction of P1’s committed
input and retrieval of y via FGOD. On behalf of the evaluator, say P3 if C3 = F3 = ∅ (populated during simulation
of executions of InputCommitα()), the simulator checks if P1 (a) sends GC consistent with randomness shared
with P2 (b) sends encoding of committed input shares. If either of the checks fails, the corrupt or conﬂict set
of P3 is populated accordingly (for (b), incase of shares known to P3, corrupt set is populated; else conﬂict is
populated with {P1, P2} corresponding to shares that are not held by P3 and held by both garblers) and the TTP
is assigned as per the protocol. The output y is sent to P1 on behalf of the TTP in Round 4. If the checks pass and
Ci = Fi = ∅, i ∈ {3, 4}, then Y is computed such that it decodes to output y and sent to P1 on behalf of Pi in
round 3. This completes the simulation sketch of g4PC4.
For the case when P1 is corrupt, simulator S 1
F Security Proof for protocol g3PC
In this section, we present the proof of Theorem 6.4 that states the security of god3PC relative to its ideal func-
tionality.
Proof. We describe the simulator Sg3PC for the case when P1, P3 is corrupt. The case of P2 being corrupt
is symmetric to that of P1. The description of the simulator is available in Figure 16 with R1/R2/R3/R4/R5
indicating simulation for round 1, 2, 3, 4 and 5 respectively.
Security against corrupt P ∗
views are shown to be indistinguishable via a series of intermediate hybrids.
3 We now argue that IDEALFGOD,S3
c≈ REALg3PC,A, when A corrupts P3. The
g3PC
– HYB0: Same as REALg3PC,A.
– HYB1: Same as HYB0, except that P1, P2 use uniform randomness rather than pseudo-randomness.
43
Figure 16: Description of Sg3PC
(a) S 3
g3PC (P ∗
3 is corrupt)
R1 Receive (pp, c31, c32) via broadcast and (x31, x32, o31, o32) privately from P ∗
R2 Broadcast (Conflict, P3) on behalf of Pi if Open(c3i, o3i) (cid:54)= x3i for i ∈ [2]. If for exactly one i the
check doesn’t pass, set TTP to P[2]\i and broadcast B as per protocol on behalf of P[2]\i . If check
doesn’t pass for both i ∈ [2], set TTP = P1.
3 on behalf of P1, P2.
R2 If TTP = ∅, extract x3 = x31 ⊕ x32 and invoke FGOD with (Input, x3) on behalf of P ∗
y. Use uniform randomness r on behalf of P1, P2 and run (C, X, d) ← Sprv(1κ, C, y).
3 to retrieve output
R2 If TTP = ∅, choose m1, m2 at random. Let {cmα
3(cid:96)+α}α∈[(cid:96)] be commitments to the
entries of X. Commit to dummy values corresponding to other input labels. Set B to include C
2(cid:96)+α}α∈[(cid:96)], m1),
and set of commitments. Broadcast B on behalf of both P1, P2. Send ({omα
({omα
3(cid:96)+α}α∈[(cid:96)], m2) on behalf of P1, P2 respectively.
(cid:96)+α, oxα
α , oxα
32
31
α , cmα
(cid:96)+α, cxα
2(cid:96)+α, cxα
31
1
2
1
2
32
R3 If received broadcast of (Conflict, Pi)(i ∈ [2]) from P3, set TTP = P[2]\i. Else if received Y (cid:54)= (C, X),
set TTP = P1.
R4 If TTP (cid:54)= ∅ and y = ⊥: Invoke FGOD with (Input, x3) to get output y where x3 is computed using
3 on behalf of TTP in
o31, o32 received in Round 1 on behalf of honest parties, else received from P ∗
Round 4 (take default value if not received or invalid).
R5 Send y to P ∗
3 on behalf of TTP if TTP (cid:54)= ∅.
(b) S 1
g3PC (P ∗
1 is corrupt)
R1 Choose x31, pp at random. Compute (c31, o31) ← Com(pp, x31). Broadcast {pp, c31, c32} where c32 is
commitment of dummy value. Send {x31, o31} to P ∗
1 on behalf of P3.
R2 Compute and broadcast B2 on behalf of P2, using s received from P ∗
R2 Set TTP = P3 if B1 (cid:54)= B2. Set TTP = P2 if P1 broadcasts (Conflict, P3)
R3 Suppose TTP = ∅: Check if any of the decommitments sent by P ∗
1 as per protocol.
1 to P3 in Round 2 opens to something
other than what was originally committed (known on behalf of P2). If so, broadcast (Conflict, P1) on
behalf of P3 and set TTP = P2.
R3 If TTP = ∅, extract P ∗
1 ’s input as x1 = m1 ⊕ p1, where p1, m1 is known on behalf of P2, P3 respectively.
Invoke FGOD with (Input, x1) to receive output y. Compute Y such that De(Y, d) = y (d known to P2)
and broadcast Y on behalf of P3.
R4 If TTP (cid:54)= ∅, receive x1 from P ∗
(Input, x1) to retrieve output y.
1 (take default value if not received) on behalf of TTP. Invoke FGOD with
R5 If TTP (cid:54)= ∅, send y to P ∗
1 on behalf of TTP.
44
– HYB2: Same as HYB1, except that some of the commitments of input wire labels sent by P1, P2, which will not
be opened are replaced with commitments of dummy values. Speciﬁcally, these are the commitments with
indices (cid:54)= m1, m2, x31, x32.
– HYB3 : Same as HYB2, except that when the execution results in P3 evaluating the garbled circuit (GC), the GC
is created as (C(cid:48), X, d(cid:48)) ← Sprv(1κ, C, y).
– HYB4 : Same as HYB3, except that P1 is set to TTP if P3 broadcasts Y (cid:54)= (C, X).
Since HYB4 := IDEALFGOD,S3
able which concludes the proof.
g3PC
, we show that every two consecutive hybrids are computationally indistinguish-
HYB1
HYB0
pseudorandomness as in HYB0. The indistinguishability follows via reduction to the security of the PRG G.
c≈ HYB1: The difference between the hybrids is that P1, P2 use uniform randomness in HYB1 rather than
c≈ HYB2: The difference between the hybrids is that some of commitments of the input wire labels in
HYB1 that will not be opened are replaced with commitments of dummy values in HYB2. The indistinguishability
follows via reduction to the hiding property of the commitment scheme Com that holds even though pp was chosen
by corrupt P3.
c≈ HYB3: The difference between the hybrids is in the way (C, X, d) is generated. In HYB2, (C, e, d) ←
Gb(1κ, C) is run, which gives (C, En(x, e), d). In HYB3, it is generated as (C(cid:48), X, d1) ← Sprv(1κ, C, y). The
indistinguishability follows via reduction to the privacy of the garbling scheme.
c≈ HYB4: The difference between the hybrids in that while in HYB3, P1 is set to TTP when P3 broadcasts
Y such that De(Y, d) = ⊥; in HYB4, P1 is set to TTP when P3 broadcasts Y (cid:54)= (C, X). It follows from the
authenticity property of garbling that P3 will be able to come up with Y such that Y (cid:54)= (C, X) but De(Y, d) (cid:54)= ⊥
only with negligible probability.
HYB2
HYB3
Security against corrupt P ∗
views are shown to be indistinguishable via a series of intermediate hybrids.
1 We now argue that IDEALFGOD,S1
g3PC
c≈ REALg3PC,A, when A corrupts P1. The
– HYB0: Same as REALg3PC,A
– HYB1: Same as HYB0, except that P3 raises a conﬂict with P1 if it accepts any decommitment that opens to a
value other than what was originally committed.
– HYB2: Same as HYB1, except that when the execution does not result in P1 getting access to the opening of
commitment c32 (corresponding to x32) broadcast by P3, the commitment is replaced with commitment of
dummy value.
– HYB3: Same as HYB2, except that Y is computed via De(Y, d) = y rather than Y = Ev(C, X)
g3PC
HYB0
, we show that every two consecutive hybrids are computationally indistinguish-
Since HYB3 := IDEALFGOD,S1
able which concludes the proof.
c≈ HYB1: The difference between the hybrids is that in HYB0, P3 raises a conﬂict with P1 if the decom-
mitments sent by P1 output ⊥ while in HYB1, P3 raises a conﬂict if the decommitments sent by P1 opens to any
value other than what was originally committed. Since the commitment scheme Com is binding and pp was chosen
uniformly at random by P3; in HYB1, P1 could have decommitted successfully to a different input label than what
was originally committed, only with negligible probability. Therefore, the hybrids are indistinguishable.
c≈ HYB2: The difference between the hybrids is that when the execution does not result in P1 getting
access to the opening of commitment c32 (corresponding to x32) broadcast by P3, c32 corresponds to the actual
input share x32 in HYB1 while it corresponds to dummy value in HYB2. The indistinguishability follows from the
hiding property of Com.
HYB1
45
HYB2
c≈ HYB3: The difference between the hybrids is that in HYB2, P3 computes Y via Ev(C, X), while in
HYB3, Y is computed such that De(Y, d) = y. Due to the correctness of the garbling scheme, the equivalence of
Y computed via Ev(C, X) or such that De(Y, d) = y holds.
46