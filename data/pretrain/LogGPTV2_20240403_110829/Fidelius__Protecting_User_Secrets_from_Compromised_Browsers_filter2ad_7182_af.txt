### 优化后的文本

Fidelius 提供了一种保护 Web 应用程序的方法，而无需将大量浏览器组件移入安全飞地。其应用范围远不止登录和支付场景，还能支持更复杂的在线应用，如税务申报或基于 Web 的即时通讯。此外，Fidelius 的可信 I/O 路径不仅适用于 Web 场景，还可以应用于需要与本地用户交互的桌面应用程序。由于硬件飞地在消费级台式机和笔记本电脑上最为普及，我们预计 Fidelius 的 I/O 方法将非常有用。

接下来，我们将讨论一些可能的扩展方向，以增强架构的适用性或考虑大规模部署时的重要因素：

1. **可信设备的可用性**：我们为 Fidelius 实现了一个用户和开发者界面，提供了必要的工具来正确解释与 Fidelius 的交互，并避免 UI 攻击。然而，我们的界面只是用户与核心 Fidelius 功能交互的一种设计。已有许多研究探讨了安全指示器（如我们的指示灯）的有效性 [24], [25]。其他可能的设计可以使用安全注意力序列或独立的可信按钮来启动与可信组件的通信。未来的工作可以探索这一领域，以确定哪种方法在实际应用中最有效。

2. **事件循环**：为了在 TCB 大小和功能之间取得平衡，Fidelius 将 JavaScript 事件循环置于飞地之外。如果能够更高效地将事件循环移入飞地，许多额外的应用将得以实现，特别是通过改进而非直接移植现有代码的方式。

3. **HTML 渲染**：为了渲染 HTML 表单，我们实现了一个自定义库，该库根据表单及其输入的描述生成位图。要支持更多 HTML 标签，我们需要将一个更通用的渲染引擎集成到 Web 飞地中。现有的库如 Nuklear [34] 为此提供了一个良好的起点。

4. **根证书存储**：当前的 Web 飞地实现仅使用了有限数量的公钥。为了支持任意网站，Web 飞地需要在其内部拥有一个根证书存储。

5. **移动设备**：尽管我们主要在桌面环境中描述了 Fidelius，但如今许多用户的 Web 交互发生在移动设备上。虽然 Fidelius 架构在支持飞地的移动环境中同样适用，但在手机和平板电脑上的可信路径系统将与 Fidelius 使用的键盘和显示器适配器有很大不同。Android 最近推出的受保护确认系统 [35] 是朝这个方向迈出的有希望的第一步。

### 相关工作

- **NGSCB**：2003 年，微软宣布了 Palladium 项目（后更名为 NGSCB [36]），该项目通过 TPM 芯片提供认证，并通过硬件内存屏蔽提供飞地隔离。然而，该项目在 2005 年被缩减，主要是因为难以使应用程序适应该架构。相比之下，网站只需向要保护的 Web 字段和表单添加一个 HTML 属性即可利用 Fidelius。

- **SGX 和 Web**：TrustJS [17] 探讨了在飞地中运行 JavaScript 的潜力，展示了客户端运行可信 JavaScript 可以加速表单输入验证。SecureWorker [18] 提供了一个类似于 Web Worker 的开发者抽象，同时在飞地中执行 Worker 的 JavaScript。我们的工作利用在飞地中运行 JavaScript 的能力作为构建块，以在 Web 应用中保护用户输入的隐私。JITGuard [37] 使用 SGX 来防止 Firefox JIT 编译器中的漏洞。

- **未修改的应用程序在 SGX 上的执行**：一些工作旨在允许未经修改的应用程序在 SGX 飞地中执行。Haven 在飞地中运行整个应用程序 [1]，而 SGXKernel [3]、Graphene [5] 和 Panoply [2] 提供了构建应用程序的底层原语。Scone [4] 通过在飞地中运行 Linux 容器来保护它们。Flicker [38] 和 TrustVisor [39] 利用较旧的硬件提供类似 SGX 的功能，但由于硬件限制，性能较弱。我们专注于直接解决隐藏不受信任浏览器中用户输入的问题，而不是使用通用解决方案，以最小化 TCB 并避免将单体浏览器移植到可信环境中的潜在问题。

- **SGX 攻击和防御**：已经证明了一些针对 SGX 的侧信道攻击，利用了内存访问模式 [40]-[42]、异步执行 [43]、分支预测 [44]、推测执行 [21], [22] 甚至 SGX 自身的安全保证 [45]。然而，存在许多防御措施可以避开这些侧信道，通常具有较低的开销 [30], [46]-[50]。更有前景的是，研究人员提出了一系列新的架构 [23], [51], [52]，这些架构在设计上抵御了 SGX 的弱点，因此对广泛的攻击免疫。由于我们的工作兼容通用防御措施，并且主要关注在飞地上构建的高层功能，因此在 Fidelius 的介绍中不考虑侧信道问题。

- **针对受损浏览器的保护**：许多基于软件的解决方案提供了安全性、性能和 TCB 大小之间的权衡。Shadowcrypt [53] 使用 Shadow DOM 允许 Web 应用程序进行加密输入/输出，但容易受到某些攻击 [54]。Terra [55] 使用 VM 允许具有不同安全要求的应用程序在同一硬件上运行。Tahoma [56]、IBOS [57] 和 Proxos [58] 将浏览器集成到操作系统级别，从而提供比通用操作系统更小的 TCB 和更强的隔离/安全保证。Cloud Terminal [59] 通过仅在本地运行轻量级安全终端并将大部分计算外包给远程服务器来规避本地恶意软件并保护用户免受攻击者侵害。

- **可信 I/O 路径**：许多工作研究了如何使用虚拟机管理程序来构建到用户的可信路径（例如 [60]-[64]），但在可信硬件设置下的工作较少。SGXIO [16] 提供了一种混合解决方案，结合 SGX 和虚拟机管理程序技术，允许使用未经修改的设备建立可信 I/O 路径。相比之下，我们的工作仅依赖于硬件假设，不需要虚拟机管理程序，但确实需要修改键盘和显示设备。Intel 提到了一种内部工具，用于从 SGX 提供可信显示 [65], [66]，但没有公开细节、源代码或应用程序。SGX-USB [29] 允许通用 I/O，但没有解决我们在键盘和显示器中混合可信和不可信内容的问题。ProximiTEE [67] 通过修改的认证过程和新的保障措施启动类似的通用可信 I/O 路径。

- **Bumpy [28] 及其前身 BitE [68]** 使用 Flicker [38] 提供的可信执行环境来提供类似我们的安全输入功能。除了在可信 I/O 特性之上构建更大的 Web 架构外，我们还通过 1) 通过可信显示器启用与可信输入的交互（Bumpy 不显示用户键入的字符）和 2) 关闭用户输入的计时侧信道（这也是我们相对于 SGX-USB 的改进）超越了这些工作。

### 结论

我们介绍了 Fidelius，这是一种新的架构，旨在保护用户秘密免受恶意操作系统的侵害，同时与 Web 应用程序进行交互。Fidelius 保护表单输入、JavaScript 执行、网络连接和本地存储免受完全受损浏览器中的恶意软件的影响。它还是第一个公开可用的系统，能够在不依赖虚拟机管理程序安全性的前提下，在用户和硬件飞地之间建立可信 I/O 路径。我们的开源 Fidelius 实现、示例代码和视频演示可在 https://github.com/SabaEskandarian/Fidelius 获取。

### 致谢

感谢 Amit Sahai 和 Keith Winstein 对这项工作的有益讨论。

### 参考文献

[略]

---

这样优化后的文本更加清晰、连贯和专业，结构也更为严谨。希望这对你有所帮助！