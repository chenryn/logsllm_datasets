and of protecting web applications without moving large
portions of a browser into an enclave – have applications well
beyond the login and payment examples described thus far.
Fidelius’s techniques and architecture can also support more
complex applications such as online tax ﬁling or even web-
based instant messaging. The trusted I/O path has applications
beyond the web as well and could be adapted to secure
logins or desktop applications that use enclaves for their core
functionality but require interaction with a local user on the
machine. We anticipate that Fidelius’s I/O approach will be
very useful, as hardware enclaves are most widely available
on consumer desktop and laptop computers.
We close with a discussion of possible extensions that could
broaden the applicability of our architecture or would be
important considerations in a widespread deployment.
1) Usability of Trusted Devices: We have implemented
Fidelius with a user and developer interface that provides users
with the necessary tools to interpret their interaction with
Fidelius properly and avoid UI-based attacks. However, our
interface represents only one possible design for interaction
between users and the core Fidelius functionality. A great deal
of work has studied the effectiveness of security indicators
such as our indicator lights [24], [25]. Other possible designs
may, for example, use secure attention sequences or separate
trusted buttons to initiate communication with trusted compo-
nents. Future work could explore this space to determine what
approach works best for this application in practice.
2) Event Loop: Fidelius leaves the JavaScript event loop
outside the enclave to optimize the tradeoff between TCB size
and functionality. A number of additional applications could be
enabled by moving the event loop into an enclave, especially
if there is a way to accomplish this more efﬁciently than with
a direct port that executes the loop as-is in trusted hardware.
3) HTML Rendering: In order to render HTML forms, we
implemented a custom library that, given a description of a
form and its inputs, produces a bitmap that represents the
form. In order to extend support to other HTML tags, we
need to integrate a more versatile rendering engine into our
web enclaves. Existing libraries such as Nuklear [34] provide
a solid ﬁrst step in this direction.
4) Root Certiﬁcate Store: Our current implementation of
the web enclave uses a limited number of public keys. To
scale to supporting any web site, the web enclave needs to
have a root certiﬁcate store inside the enclave.
5) Mobile Devices: We have described Fidelius in the
setting of a desktop device, but much of users’ interaction
with the web today takes place on mobile devices. While
much of the Fidelius architecture could apply equally well
in an enclave-enabled mobile setting, a trusted path system
for phones and tablets will necessarily look very different
from the keyboard and display dongles used by Fidelius.
(cid:19)(cid:24)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
Android’s recent protected conﬁrmation system [35] represents
a promising ﬁrst step in this direction.
XII. RELATED WORK
NGSCB. In 2003 Microsoft announces the Palladium effort,
later renamed NGSCB [36]. In that design, attestation is
provided by a TPM chip and enclave isolation is provided by
hardware memory curtaining. The project was scaled back in
2005 presumably due to the difﬁculty of adapting applications
to the architecture. In contrast, as we explained, web sites
can take advantage of Fidelius by simply adding an HTML
attribute to web ﬁelds and forms that it wants to protect.
SGX and the Web. TrustJS [17] explores the potential
for running JavaScript inside an enclave, demonstrating that
running trusted JavaScript on the client-side can expedite form
input validation. SecureWorker [18] provides the developer
abstraction of a web worker while executing the worker’s
JavaScript inside an enclave. Our work uses the ability to run
JavaScript in an enclave as a building block to enable privacy
for user inputs in web applications. JITGuard [37] uses SGX
to protect against vulnerabilities in Firefox’s JIT compiler.
Unmodiﬁed Applications on SGX. A handful of works aim
to allow execution of unmodiﬁed applications inside an SGX
enclave. Haven runs whole applications inside an enclave [1],
while SGXKernel [3], Graphene [5], and Panoply [2] provide
lower level primitives on which applications can be built.
Scone [4] secures linux containers by running them inside an
enclave. Flicker [38] and TrustVisor [39] use older hardware to
provide features similar to SGX on which general applications
can be built, albeit with weaker performance due to the older
and more limited hardware features on which they build. We
focus on directly solving the problem of hiding user inputs in
an untrusted browser without using generic solutions in order
to minimize TCB and avoid the potential pitfalls of porting a
monolithic browser into a trusted environment.
SGX Attacks and Defenses. A number of side channel
attacks on SGX have been shown to take advantage of, among
other things, memory access patterns [40]–[42], asynchronous
execution [43], branch prediction [44], speculative execu-
tion [21], [22], and even SGX’s own security guarantees [45]
to compromise data privacy. There do, however, exist many
defenses that have been shown to evade these side channels,
often generically, without a great deal of overhead [30], [46]–
[50]. Even more promising, researchers have proposed a series
of other architectures [23], [51], [52] which defend against
weaknesses in SGX by design and are therefore invulnerable
to broad classes of attacks. As our work is compatible with
generic defenses and concerns itself primarily with higher level
functionalities built over enclaves, we do not consider side
channels in the presentation of Fidelius.
Protection Against Compromised Browsers. A number of
software-based solutions for protection against compromised
browsers offer tradeoffs between security, performance, and
TCB size. Shadowcrypt [53] uses a Shadow DOM to allow
encrypted input/output for web applications, but is vulnerable
to some attacks [54]. Terra [55] uses VMs to allow applications
with differing security requirements to run together on the
same hardware. Tahoma [56], IBOS [57], and Proxos [58]
integrate support for browsers as OS-level features, allowing
smaller TCBs and stronger isolation/security guarantees than
in a general-purpose OS. Cloud terminal [59] evades the
problem of local malware and protects against attackers by
only running a lightweight secure thin terminal locally and
outsourcing the majority of computation to a remote server.
Trusted I/O Path. While many works study how to use a
hypervisor to build a trusted path to users (e.g. [60]–[64]),
little work has been done in the trusted hardware setting.
SGXIO [16] provides a hybrid solution that combines SGX
with hypervisor techniques to allow a trusted I/O path with un-
modiﬁed devices. In contrast, our work relies only on hardware
assumptions with no need for a hypervisor, but does require
modiﬁed keyboard and display devices. Intel has alluded to an
internal tool used to provide a trusted display from SGX [65],
[66], but no details, source code, or applications are available
for public use. SGX-USB [29] allows for generic I/O but does
not solve the problem of mixing trusted and untrusted content
in a user interface as we do in both our keyboard and display.
ProximiTEE [67] bootstraps a similar generic trusted I/O path
off of a modiﬁed attestation procedure with new safeguards
over standard SGX attestation.
Bumpy [28] (and its predecessor BitE [68]) use the trusted
execution environment provided by Flicker [38] to provide a
secure input functionality similar to ours. Aside from the larger
web architecture which we build over our trusted I/O features,
we go beyond these works by 1) enabling interactivity with the
trusted input via the trusted display (Bumpy does not display
characters the user types) and 2) closing timing side channels
on user input (an improvement we also offer over SGX-USB).
XIII. CONCLUSION
We have presented Fidelius, a new architecture for protect-
ing user secrets from malicious operating systems while in-
teracting with web applications. Fidelius protects form inputs,
JavaScript execution, network connections, and local storage
from malware in a fully compromised browser. It also features
the ﬁrst publicly available system for a trusted I/O path
between a user and a hardware enclave without assumptions
about hypervisor security. Our open source implementation of
Fidelius, accompanying sample code, and a video demo are
available at https://github.com/SabaEskandarian/Fidelius.
ACKNOWLEDGMENT
We thank Amit Sahai and Keith Winstein for helpful con-
versations about this work.
REFERENCES
[1] A. Baumann, M. Peinado, and G. C. Hunt, “Shielding applications
from an untrusted cloud with haven,” in 11th USENIX Symposium on
Operating Systems Design and Implementation, OSDI ’14, Broomﬁeld,
CO, USA, October 6-8, 2014., 2014, pp. 267–283.
[Online].
Available: https://www.usenix.org/conference/osdi14/technical-sessions/
presentation/baumann
(cid:19)(cid:24)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:26 UTC from IEEE Xplore.  Restrictions apply. 
[2] S.
S.
L.
Tien,
Tople,
Shinde, D.
linux
24th Annual Network
2017,
1,
“Panoply: Low-tcb
in
Symposium,
February
https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/
panoply-low-tcb-linux-applications-sgx-enclaves/
NDSS
- March
applications with
and Distributed
San
2017,
Diego,
2017.
Saxena,
SGX enclaves,”
System Security
USA,
[Online]. Available:
California,
and
26
P.
[3] H. Tian, Y. Zhang, C. Xing, and S. Yan, “Sgxkernel: A library
operating system optimized for intel SGX,” in Proceedings of
the
Computing Frontiers Conference, CF’17, Siena, Italy, May 15-17,
2017, 2017, pp. 35–44. [Online]. Available: http://doi.acm.org/10.1145/
3075564.3075572
[4] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe,
J. Lind, D. Muthukumaran, D. O’Keeffe, M. Stillwell, D. Goltzsche,
D. M. Eyers, R. Kapitza, P. R. Pietzuch, and C. Fetzer, “SCONE: secure
linux containers with intel SGX,” in 12th USENIX Symposium on
Operating Systems Design and Implementation, OSDI 2016, Savannah,
GA, USA, November 2-4, 2016., 2016, pp. 689–703.
[Online].
Available: https://www.usenix.org/conference/osdi16/technical-sessions/
presentation/arnautov
[5] C. Tsai, D. E. Porter, and M. Vij, “Graphene-sgx: A practical library
OS for unmodiﬁed applications on SGX,” in 2017 USENIX Annual
Technical Conference, USENIX ATC 2017, Santa Clara, CA, USA,
July 12-14, 2017., 2017, pp. 645–658. [Online]. Available: https:
//www.usenix.org/conference/atc17/technical-sessions/presentation/tsai
[6] A. Papadimitriou, R. Bhagwan, N. Chandran, R. Ramjee, A. Haeberlen,
H. Singh, A. Modi, and S. Badrinarayanan, “Big data analytics over
encrypted datasets with seabed,” in 12th USENIX Symposium on
Operating Systems Design and Implementation, OSDI 2016, Savannah,
GA, USA, November 2-4, 2016., 2016, pp. 587–602.
[Online].
Available: https://www.usenix.org/conference/osdi16/technical-sessions/
presentation/papadimitriou
[7] S. Brenner, C. Wulf, D. Goltzsche, N. Weichbrodt, M. Lorenz,
C. Fetzer, P. R. Pietzuch, and R. Kapitza, “Securekeeper: Conﬁdential
zookeeper using intel SGX,” in Proceedings of the 17th International
Middleware Conference, Trento, Italy, December 12 - 16, 2016, 2016,
p. 14. [Online]. Available: http://dl.acm.org/citation.cfm?id=2988350
[8] B. A. Fisch, D. Vinayagamurthy, D. Boneh, and S. Gorbunov, “Iron:
Functional encryption using intel sgx,” IACR Cryptology ePrint Archive,
2016. [Online]. Available: http://eprint.iacr.org/2016/1071
´U. Erlingsson, P. Maniatis, I. Mironov, A. Raghunathan,
J. Tinn´es, and B. Seefeld,
D. Lie, M. Rudominer, U. Kode,
“Prochlo: Strong privacy for analytics in the crowd,” in Proceedings
of the 26th Symposium on Operating Systems Principles, Shanghai,
China, October 28-31, 2017, 2017, pp. 441–459. [Online]. Available:
http://doi.acm.org/10.1145/3132747.3132769
[9] A. Bittau,
[10] C. Priebe, K. Vaswani, and M. Costa, “Enclavedb: A secure database
using sgx,” in 2018 IEEE Symposium on Security and Privacy, SP
(Oakland), 2018.
[11] S. Sasy, S. Gorbunov, and C. W. Fletcher, “Zerotrace : Oblivious memory
primitives from intel SGX,” IACR Cryptology ePrint Archive, vol.
2017, p. 549, 2017. [Online]. Available: http://eprint.iacr.org/2017/549
[12] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A
distributed sandbox for untrusted computation on secret data,” in 12th
USENIX Symposium on Operating Systems Design and Implementation,
OSDI 2016, Savannah, GA, USA, November 2-4, 2016., 2016,
pp. 533–549. [Online]. Available: https://www.usenix.org/conference/
osdi16/technical-sessions/presentation/hunt
[13] M.
Russinovich,
“Introducing
puting,”
introducing-azure-conﬁdential-computing/.
2017,
Azure
com-
https://azure.microsoft.com/en-us/blog/
conﬁdential
[14] W. Zheng, A. Dave, J. G. Beekman, R. A. Popa, J. E. Gonzalez, and
I. Stoica, “Opaque: An oblivious and encrypted distributed analytics
platform,” in 14th USENIX Symposium on Networked Systems Design
and Implementation, NSDI 2017, Boston, MA, USA, March 27-29,
2017, 2017, pp. 283–298. [Online]. Available: https://www.usenix.org/
conference/nsdi17/technical-sessions/presentation/zheng
[15] P. Mishra, R. Poddar, J. Chen, A. Chiesa, and R. A. Popa, “Oblix: An
efﬁcient oblivious search index,” in 2018 IEEE Symposium on Security
and Privacy, SP (Oakland), 2018.
[16] S. Weiser and M. Werner, “SGXIO: generic trusted I/O path for
intel SGX,” in Proceedings of
the Seventh ACM on Conference
on Data and Application Security and Privacy, CODASPY 2017,
Scottsdale, AZ, USA, March 22-24, 2017, G. Ahn, A. Pretschner,
and G. Ghinita, Eds. ACM, 2017, pp. 261–268. [Online]. Available:
http://doi.acm.org/10.1145/3029806.3029822
[17] D. Goltzsche, C. Wulf, D. Muthukumaran, K. Rieck, P. R. Pietzuch,
and R. Kapitza, “Trustjs: Trusted client-side execution of javascript,”
in Proceedings of the 10th European Workshop on Systems Security,
EUROSEC 2017, Belgrade, Serbia, April 23, 2017, C. Giuffrida and
A. Stavrou, Eds. ACM, 2017, pp. 7:1–7:6.
[Online]. Available:
http://doi.acm.org/10.1145/3065913.3065917
[18] mitar, wh0, and C. V. Wiemeersch, “Secureworker,” https://github.com/
luckychain/node-secureworker, 2018.
[19] V. Costan and S. Devadas, “Intel SGX explained,” IACR Cryptology
ePrint Archive, vol. 2016, p. 86, 2016. [Online]. Available: http:
//eprint.iacr.org/2016/086
[20] “Intel software guard extensions sdk for linux os, developer reference.”
[Online]. Available: https://download.01.org/intel-sgx/linux-1.8/docs/
Intel SGX SDK Developer Reference Linux 1.8 Open Source.pdf
[21] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H.
Lai, “Sgxpectre attacks: Leaking enclave secrets via speculative
execution,” CoRR, vol. abs/1802.09085, 2018.
[Online]. Available:
http://arxiv.org/abs/1802.09085