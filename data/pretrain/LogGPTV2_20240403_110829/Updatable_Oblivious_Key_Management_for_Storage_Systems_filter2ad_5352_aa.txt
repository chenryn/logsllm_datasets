title:Updatable Oblivious Key Management for Storage Systems
author:Stanislaw Jarecki and
Hugo Krawczyk and
Jason K. Resch
Updatable Oblivious Key Management for Storage Systems∗
Stanislaw Jarecki
University of California, Irvine
Hugo Krawczyk
Algorand Foundation
Jason Resch
Independent
November 3, 2019
Abstract
We introduce Oblivious Key Management Systems (KMS) as a more secure alternative to
traditional wrapping-based KMS that form the backbone of key management in large-scale
data storage deployments. The new system, that builds on Oblivious Pseudorandom Functions
(OPRF), hides keys and object identiﬁers from the KMS, oﬀers unconditional security for
key transport, provides key veriﬁability, reduces storage, and more. Further, we show how to
provide all these features in a distributed threshold implementation that enhances protection
against server compromise.
We extend this system with updatable encryption capability that supports key updates
(known as key rotation) so that upon the periodic change of OPRF keys by the KMS server, a
very eﬃcient update procedure allows a client of the KMS service to non-interactively update
all its encrypted data to be decryptable only by the new key. This enhances security with
forward and post-compromise security, namely, security against future and past compromises,
respectively, of the client’s OPRF keys held by the KMS. Additionally, and in contrast to tra-
ditional KMS, our solution supports public key encryption and dispenses with any interaction
with the KMS for data encryption (only decryption by the client requires such communication).
Our solutions build on recent work on updatable encryption but with signiﬁcant enhance-
ments applicable to the remote KMS setting. In addition to the critical security improvements,
our designs are highly eﬃcient and ready for use in practice. We report on experimental
implementation and performance.
1 Introduction
The ever expanding cloud storage infrastructure is one of the pillars of modern computing. Yet,
the key management systems (KMS) provisioning keys for the protection of the stored data have
not changed fundamentally in decades. This setting involves three separate parties: a client C, a
remote storage server StS (e.g., a cloud service) that stores client data in encrypted form, and a key
management server KmS that stores cryptographic keys for the client. The client uses the services
of KmS each time it needs to encrypt or decrypt the data. The idea is that KmS is better equipped
to keep keys secret and StS is better equipped to store large amounts of data reliably. Thus, KmS
is charged with protecting secrecy and StS with protecting availability.
The typical deployment of such systems in practice (including large cloud-based operations such
as AWS [2], Microsoft [40], IBM [27], Google [24]) uses the traditional wrap-unwrap approach for
managing data encryption keys (dek) as shown in Fig. 1. When client C needs to encrypt a data
object, it chooses a symmetric key dek with which it encrypts the object, then sends dek to key
∗This is a full version of
Communications Security (CCS’19).
https://eprint.iacr.org/2018/733.
[32] that appeared in the 2019 ACM SIGSAC Conference on Computer and
in this paper appeared in
A preliminary treatment of the material
1
Parties: key management server KmS, storage server StS, client C (= data owner).
Functions: Symmetric authenticated encryption scheme Enc;
wrapping functions Wrap, Unwrap (used to to encrypt/decrypt data encryption keys).
Keys: KmS stores a client-speciﬁc wrapping key kc for each client.
Encryption of object (ObjId, Obj) by client C:
1. C chooses random Enc key dek (data encryption key);
2. C sends (ObjId, dek) to KmS;
3. KmS returns (ObjId, wrap = Wrapkc (dek))
4. C sends (ObjId, wrap, Encdek(Obj)) to StS for storage.
(Note: KmS authenticates C before using kc);
Decryption of object ObjId by C:
1. C retrieves (ObjId, wrap, Encdek(Obj)) from StS;
2. C sends (ObjId, wrap) to KmS;
3. KmS returns (ObjId, dek = Unwrapkc (wrap))
4. C decrypts Encdek(Obj)) using dek.
Figure 1: Traditional Wrapping-based Key Management
management server KmS who wraps (i.e., encrypts) dek under a client-speciﬁc (master) key kc stored
at KmS and returns the result, called a wrap, to C. Finally, C stores wrap and the data encrypted
under dek at the storage server StS. When C needs to retrieve an object, it gets the corresponding
ciphertext from StS, sends the attached wrap to KmS who unwraps (i.e., decrypts) it using kc and
sends dek back to C, who uses it for decryption.
This key encapsulation mechanism, while eﬀective and widely deployed, presents signiﬁcant
potential vulnerabilities. First, encryption keys dek are exposed in the clear to KmS. Second, the
security of dek, hence the security of all encrypted data, relies on the channel between the client and
KmS. Such a channel, typically implemented by TLS, is vulnerable to a large class of attacks, from
implementation and conﬁguration errors to certiﬁcation and man-in-the-middle attacks. Third,
even in normal operation, the key dek is visible to any middlebox and endpoint where TLS traﬃc
is decrypted. Additionally, KmS can trace objects being encrypted/decrypted via the wrap values.
A further shortcoming is the cost of rotating a client key by KmS: Changing the value kc for a new
requires the client (or StS) sending each wrap to KmS for unwrapping under kc and re-wrapping
kc
under kc
. This is not only a performance issue but a security one too (due to long period of time
till all wraps are updated and till kc can be safely erased).
(cid:48)
(cid:48)
Oblivious KMS. Our ﬁrst contribution is a simple approach to key management based on Obliv-
ious Pseudorandom Functions (OPRF) [42, 22, 29], that addresses the above vulnerabilities and
oﬀers additional features absent in traditional systems. OPRFs are interactive schemes between
a server holding a key to a PRF and a client holding an input. At the end of the interaction the
client learns the output of the PRF on its input and the server learns nothing (neither the input
nor the output of the function). OPRFs have found numerous applications and there are very
eﬃcient OPRF implementations, e.g. based on the Diﬃe-Hellman (DH) problem in regular elliptic
curve groups [16, 48, 41, 26, 21] (see Fig. 3).
In our Oblivious Key Management System (OKMS) (see Fig. 2), a client C who requires a data
encryption key dek for encrypting a data object interacts with the OKMS server in an OPRF
protocol. C’s input is an identiﬁer for the data object while the server’s input is an OPRF key
2
(typically unique per client and denoted kc), and C uses the output from the OPRF as the dek1.
In this way, the OKMS server does not learn dek (or even the object identiﬁer). The system does
not rely on an external secure channel (e.g., TLS) to transport dek; instead dek is protected by the
security properties of the OPRF.2
This addresses two major vulnerabilities of traditional KMS systems: visibility of the dek to
the server and potential exposure of this key in transit between client and server. Moreover,
using the most eﬃcient DH-based implementations of OPRFs, the protection against these threats
is unconditional. Even a computationally unbounded server (that knows the OPRF key) or a
network eavesdropper cannot learn anything about the dek, or about the object identiﬁer input
into the OPRF. Note that in OKMS, the only way for an adversary to decrypt a ciphertext is by
impersonating the legitimate client or by learning the OPRF key kc and the corresponding ObjId
value. In contrast, in traditional systems, data encryption keys dek are potentially vulnerable even
if the KmS key is well protected (e.g., inside a hardware module) as the dek are transmitted outside
the protected zone.
The OPRF approach supports additional properties that enhance security even further and
beyond anything oﬀered by the traditional solutions. First, it provides veriﬁability, namely, the
ability of KmS to prove to C that the returned dek is indeed the value that results from computing
the OPRF on the client-provided object identiﬁer. This prevents data loss that occurs if the
returned dek is wrong (either due to computing error or to adversarial action); indeed, encrypting
data with an incorrect, or irrecoverable, key can lead to irreparable data loss. Second, the DH-
based OPRF, hence also the OKMS using it, is amenable to distribution as a multi-server threshold
scheme where the OPRF key is protected as long as less than a deﬁned threshold of the servers
is corrupted. Finally, the described system can be adapted to also support updatability, namely,
periodic key rotation of the client master key kc by KmS with a very eﬃcient (non-interactive)
procedure for updating ciphertexts to be decryptable by the new key and not by previous ones.
This procedure does not endangered the secrecy of the data and therefore can be performed by the
StS. The design of such system is the main technical contribution of our work and is discused next.
Updatable Oblivious KMS. Traditional wrapping-based key management systems as those de-
scribed above (and in Fig. 1) require client keys kc to be updated periodically by the server KmS.
Such update, known as key rotation, is needed to limit the exposure of data upon the exposure of kc.
For traditional wrapping systems, changing kc with a new kc
involves unwrapping and re-wrapping
all of a client’s ciphertexts as well as transmitting all these wrap values between the storage server
and KMS server. Moreover, an old key kc cannot be erased until all ciphertexts are updated to the
new key kc
, extending the exposure period of kc signiﬁcantly.
(cid:48)
(cid:48)
This need to update clients’ keys in storage systems (and other applications) has led to the notion
of updatable encryption [9] whose goal is to provide more eﬃcient and more secure solutions to this
key rotation problem. Many ﬂavors of updatable encryption have been suggested [9, 10, 20, 37]. In
this work we investigate this notion in the context of our oblivious KMS approach leading to the
design of an Updatable Oblivious KMS (UOKMS).
In UOKMS, upon the rotation of a client’s key kc, server KmS computes a short update token ∆
, and transmits ∆ to client C. Using ∆, C’s storage server
as a function of the old and new keys kc, kc
StS can transform all ciphertexts that were encrypted with keys derived from kc into ciphertexts
decryptable by the new kc
but not by the old kc. This operation preserves the security of the
data, it is performed locally at the storage server StS without any interaction with KmS, and it
only modiﬁes a short component of the ciphertext (independent of the length of the encrypted
data) making the whole operation highly eﬃcient. Security-wise it protects against future and past
(cid:48)
(cid:48)
1Alternatively, the output of the OPRF can be used as a key-encrypting key (kek) to locally encrypt dek.
2A TLS connection can be used to transport auxiliary information or client credentials but is not needed for
transporting data encryption keys.
3
compromises of the client’s key kc.
The above UOKMS scheme oﬀers another major performance advantage compared to traditional
KMS and our own OKMS scheme: Encryption of data requires no interaction with the KMS server,
and an interaction is only needed to decrypt data. More generally, our UOKMS supports public key
encryption, so everyone can encrypt data for client C, but only C can decrypt it, via an interaction
with the KMS server.
Threshold Updatable OKMS. Both OKMS and UOKMS solutions can be implemented via
distributed servers so that clients’ OPRF keys are secure for as long as no more than a threshold
number of servers are compromised. These systems inherit the high eﬃciency of Threshold OPRF
constructions [30] (also in the case of the OPRF variant used in the UOKMS solution). In the
UOKMS setting, the update token ∆ is computed distributively among the servers through an
eﬃcient multi-party computation. These solutions preserve the veriﬁability property of OPRFs
and they can be implemented in a client-transparent way, namely, the client’s operations and code
are identical regardless of the implementation as a single-server or multi-server. See Section 5.
Formal model and analysis. We formally analyze our UOKMS solution in an Updatable Obliv-
ious KMS security model that shares close similarities with recent models of updatable encryption
(or encryption with key rotation) [9, 10, 20, 37], but also has some signiﬁcant diﬀerences. One crucial
diﬀerence comes from the key management setting treated here where the client interacts with two
outsourced remote services KmS and StS. In particular, this raises potential security vulnerabilities
arising from the communication channel between client and KmS. This major concern is absent
from previous updatable encryption models that treat the client and KmS essentially as collocated
entities. The other aspect that is unique to our solution and formal treatment is the obliviousness
of computation on the side of KmS. Yet another diﬀerence is that while the typical storage setting
does not require public key encryption, we naturally include this setting in our updatable model.
Our updatability model allows attacks on both KmS and StS, including exposure of client keys
kc, update values ∆, and the attacker’s ability to see and write ciphertexts into StS. Security
is provided against future and past attacks, namely, forward and post-corruption security, with a
simulation-based security model. Obviously, the model disallows attack combinations that would
lead to trivial wins for the attacker (e.g., decrypting a challenge ciphertext in a period for which
it learns the KMS key kc). The model accommodates the oblivious setting where an attacker that
communicates with KmS (and is in possession of C’s credentials) can decrypt any q ciphertexts after
q interactions with KmS, but all other ciphertexts remain secure. This, together with the attacker’s
capability to access a ciphertext-update oracle and the use of authenticated encryption, achieves
CCA-like security for oblivious and updatable encryption. The security proof for our UOKMS
scheme, presented in Section 4, carries in the random oracle model under a strengthened variant
of the Gap One-More Diﬃe-Hellman assumption [5, 33] that we show to hold in the generic group
model.
Implementation and performance. In Section 6 we present performance information from our
implementation of both OKMS and UOKMS solutions showing the practicality of our techniques,