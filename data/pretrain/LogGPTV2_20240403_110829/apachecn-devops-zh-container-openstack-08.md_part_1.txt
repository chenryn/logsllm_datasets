# 八、Murano——OpenStack 上的容器化应用部署
本章将解释 OpenStack 项目 Murano，它是 OpenStack 的应用目录，使应用开发人员和云管理员能够在可浏览的分类目录中发布各种云就绪应用。Murano 只需点击一下鼠标，就可以大大简化 OpenStack 基础设施上的应用部署。在本章中，我们将讨论以下主题:
*   村野介绍
*   Murano 概念
*   主要特征
*   Murano 组件
*   走过
*   Murano DevStack 安装
*   部署容器化应用
# 村野介绍
Murano 是 OpenStack 应用目录服务，它提供了各种云就绪的应用，可以轻松地部署在 OpenStack 上，抽象出背后的所有复杂性。它简化了 OpenStack IaaS 之上各种应用的打包和部署。它是外部应用和 OpenStack 的集成点，支持应用的完整生命周期管理。Murano 应用可以在 Docker 容器或 Kubernetes Pod 中运行。
Murano 是面向终端用户的强大解决方案，他们希望在 OpenStack 之上进行应用部署，而不想担心部署的复杂性。
以下是 Murano 提供的功能列表:
*   提供生产就绪应用和动态用户界面
*   支持运行容器化应用
*   支持在 Windows 和 Linux 系统上配置应用
*   用巴比康保护数据
*   支持使用**热编排模板** ( **热**)运行应用包
*   部署多区域应用
*   允许在应用中将煤渣卷附加到虚拟机，并在眩光中存储包
*   将类似的包打包在一个包中，例如基于容器的应用
*   为计费目的提供与环境和应用相关的统计数据
# Murano 概念
在本节中，我们将讨论村野中使用的不同概念。
# 环境
Murano 的环境代表一组应用，由单个租户管理。在一个环境中，没有两个租户可以共享应用。同样，一个环境中的应用独立于其他环境。环境中逻辑相关的多个应用可以一起形成更复杂的应用。
# 包裹
Murano 中的包是一个 ZIP 存档，其中包含所有安装脚本、类定义、动态 UI 表单、映像列表和应用部署说明。该包由 Murano 导入，用于部署应用。各种包可以上传到 Murano，用于不同的应用。
# 会议
Murano 允许来自不同位置的多个用户修改环境。为了允许多个用户同时修改，Murano 使用存储所有用户的本地修改的会话。当任何应用添加到环境中时，会创建一个会话，并且在部署开始后，该会话将变得无效。一个会话不能在多个用户之间共享。
# 环境模板
一组应用可以形成一个复杂的应用。为了定义这样的应用，Murano 使用了**环境模板**的概念。模板中的每个应用都由一个租户管理。可以通过将其转换到环境中来部署该模板。
# 部署
部署用于表示安装应用的过程。它存储任何应用部署中的环境状态、事件和错误等信息。
# 捆
Murano 中的一个包代表了一组类似的应用。捆绑包中的应用不需要紧密相关。它们是根据用途分类的。
例如，创建一个由 MySQL 或 Oracle 应用组成的数据库应用包。可以在 Murano 中直接导入一个包，Murano 将依次导入包中的所有应用。
# 种类
应用可以根据其类型分为不同的类别，例如应用服务器、大数据和数据库。
# 主要特征
Murano 具有许多高级功能，使其成为 OpenStack 上应用管理的强大解决方案。在本节中，我们将讨论 Murano 中的一些高级功能。
# 生产就绪应用
Murano 有各种云就绪应用，可以在虚拟机或裸机上轻松配置。这不需要任何安装、基础设施管理等方面的知识，使得部署复杂的应用对 OpenStack 用户来说是一项简单的任务。用户可以选择在 Docker 主机或 Kubernetes Pod 上运行他们的应用。
# 应用目录界面
Murano 为最终用户提供了一个用户界面，方便他们浏览可用的应用。用户只需按一下按钮就可以部署任何复杂的应用。用户界面是动态的，在某种意义上说，它在提供应用时为用户输入提供表单。它还允许应用标记，提供每个应用的信息，显示最近的活动，等等。
# 分配工作负载
Murano 允许用户在提供任何应用时选择地区。这样，您的应用可以跨区域分布，以实现可伸缩性和高可用性，同时进行任何灾难恢复。
# 应用开发
**Murano 编程语言** ( **MuranoPL** )可用于定义应用。它使用 YAML 和 YAQL 作为应用定义。它还有一些核心库，定义了几个应用中使用的公共函数。MuranoPL 还支持垃圾收集，这意味着它会释放应用的所有资源。
# Murano 仓库
Murano 支持从不同的来源安装软件包，如文件、网址和存储库。Murano 可以从自定义存储库中导入应用包。它下载所有相关的包和映像(如果从应用部署的存储库中定义的话)。
Refer to [https://docs.openstack.org/murano/latest/admin/appdev-guide/muranopackages/repository.html](https://docs.openstack.org/murano/latest/admin/appdev-guide/muranopackages/repository.html) for setting up a custom repository.
# 煤渣体积
Murano 支持将煤渣卷附加到应用中的虚拟机，也支持从煤渣卷引导这些虚拟机。出于存储目的，一个应用可以连接多个卷。
Refer to [https://docs.openstack.org/murano/latest/admin/appdev-guide/cinder_volume_supporting.html](https://docs.openstack.org/murano/latest/admin/appdev-guide/cinder_volume_supporting.html) for the detailed step of using Cinder volumes with Murano.
# 巴比肯支持
Barbican 是支持密码和证书等敏感数据的 OpenStack 项目。Murano 通过将您的数据存储在巴比肯来确保数据安全。您需要安装巴比肯，并将 Murano 配置为使用巴比肯作为后端存储解决方案。
# 热包装
Murano 支持从 Heat 模板编写应用包。您可以向 Murano 添加任何 Heat 模板作为新的部署包。Murano 支持从 Heat 模板自动和手动编写应用包。
Refer to [https://docs.openstack.org/murano/latest/admin/appdev-guide/hot_packages.html](https://docs.openstack.org/murano/latest/admin/appdev-guide/hot_packages.html) for details on using Heat templates with Murano.
# Murano 组件
*Murano 仪表盘*部分的图说明了 Murano 的架构。Murano 的架构与其他 OpenStack 组件类似。它还以应用编程接口服务和引擎为主要组件。还有其他组件，如`murano-agent`、Murano 仪表盘和 python 客户端，即`murano-pythonclient`。让我们详细看看每个组件。
# Murano 原料药
Murano API ( `murano-api`)是一个 WSGI 服务器，服务于用户的 API 请求。Murano 应用编程接口对每种资源类型都有不同的控制器。每个控制器处理对特定资源的请求。他们验证权限请求，验证请求中提供的数据，并使用输入数据为资源创建数据库对象。该请求被转发到`murano-engine`服务。一旦收到来自`murano-engine`的响应，`murano-api`服务将响应返回给用户。
# Murano 发动机
Murano 引擎(`murano-engine`)是大部分编排发生的服务。它对 OpenStack 编排服务 Heat 进行一系列调用，以创建应用部署所需的基础设施资源，如虚拟机和卷。它还会在虚拟机内部启动一个名为`murano-agent`的代理来安装外部应用。
# Murano 特工
Murano 代理(`murano-agent`)是在部署的虚拟机内部运行的服务。它在虚拟机上进行软件配置和安装。虚拟机映像使用该代理构建。
# Murano 仪表盘
Murano 仪表盘为用户提供了网络用户界面，方便用户浏览 Murano 中的应用。它支持 It 用户基于角色的访问控制:
![](img/00024.jpeg)
# 走过
在这一节中，我们将详细介绍 Murano 是如何部署应用的。Murano 与多个 OpenStack 服务交互，获取应用部署所需的资源。
在 Murano 部署应用的请求流程如下:
1.  当从 KeyStone 收到身份验证令牌时，用户通过命令行界面或地平线向`murano-api`服务发送一个 REST API 调用，用于部署环境
2.  `murano-api`服务接收该请求，并将验证令牌和访问权限的请求发送给 KeyStone
3.  KeyStone 验证令牌，并发送带有角色和权限的更新的身份验证头
4.  `murano-api`服务检查会话是否有效。如果会话无效或已经部署，请求将失败，状态为`403` HTTP
5.  执行检查以检查该环境以前是否被删除。如果没有删除，将在任务表中创建一个条目来存储此操作的信息
6.  `murano-api`服务通过 RPC 异步调用向`murano-engine`服务发送请求，该调用带有包含类类型、应用细节和用户数据(如果有)的 JSON 对象
7.  `murano-engine`服务从消息队列中挑选请求
8.  它创建了一个 KeyStone 信任，将用于应用
9.  它下载所需的包，并验证所需的类是否可用和可访问
10.  `murano-engine`服务然后创建发送给它的模型中定义的所有类
11.  然后调用每个应用的部署方法。在此阶段，`murano-engine`与 Heat 交互，创建网络、虚拟机和应用运行所需的其他资源
12.  实例运行后，运行用户数据脚本在虚拟机上安装并运行`murano-agent`
13.  `murano-agent`服务执行软件配置和安装步骤