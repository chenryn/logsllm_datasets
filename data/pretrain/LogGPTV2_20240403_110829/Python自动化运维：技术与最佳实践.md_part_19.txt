---
## Page 161
file（yml)[参数］，如启用10个并行进程数执行playbook：
9.6.3执行playbook
会运行一次。触发是通过Handlers定义的name标签来识别的，比如下面 notify中的“restart
重启 nginx服务。Handlers 中定义的处理程序在没有通知触发时是不会执行的，触发后也只
节，最终生成的 nginx.conf配置如下：
134第二部分高级篇
执行playbook，可以通过 ansible-playbook命令实现，格式：ansible-playbook playbook
--syntax-check：检查 playbook 的语法；
口-uREMOTE_USER：手工指定远程执行playbook的系统用户；
其他常用参数说明：
notify:
当目标主机配置文件发生变化后，通知处理程序（Handlers）来触发后续的动作，比如
worker_rlimit_nofile65506;
worker_cpu_affinity 1000 0100 0010 0001;
worker_processes
user
Ansible会根据定义好的模板渲染成真实的配置文件，模板使用YAML语法，详细见9.1
worker_rlimit_nofile{{max_open_file));
（%endif%）
worker_cpu_affinity 1000 01000010 0001;
（%else%）
01000000 10000000;
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000
worker_cpu_affinity 0110;
[%if num_cpus == 2 %}
worker_processes
user
-name:restart nginx
restart nginx
service:name=nginx state=restarted
Linux公社 www.linuxidc.com
>=8}
nginx;
{{ worker_processes });
nginx;
---
## Page 162
引用单个wordpress.yml文件，可以这样写：
中，最后在需要的地方include进来即可，示例如下：
9.7.1
访问地址https://github.com/ansible/ansible-examples即可获相应的学习资料。
有在需要时才关注具体细节。Ansible官方在GitHub上提供了大量的示例供大家参考借鉴，
度进行“封装”，比如定义变量、任务、处理程序等。
写playbook时拆分成多个文件，通过包含（include）的形式进行引用，我们可以根据多种维
9.7
当多个playbook 涉及复用的任务列表时，可以将复用的内容剥离出，写到独立的文件当
角色建立在包含文件之上，抽象后更加清晰、可复用。运维人员可以更专注于整体，只
当我们写一个非常大的 playbook时，想要复用些功能显得有些吃力，还好Ansible支持
如在部署多个WordPress的情况下，可以根据不同用户单独部署WordPress的任务，
tasks:
当然，也可以将变量传递到包含文件当中，这称为“参数包含”。
然后就可以在使用的playbook中include进来，如：
【 tasks/foo.yml 】
playbook 角色与包含声明
更多参数说明运行ansible-playbook-help来获得。
--step：以单任务分步骤运行，方便做每一步的确认工作。
casks:
口-TTIMEOUT：定义playbook执行超时时间；
--list-hosts playbooks：匹配到的主机列表；
-include:wordpress.yml user=timmy
-include:tasks/foo.yml
command:/bin/bar
name:placeholder
command:/bin/foo
name:placeholder
possibly saved as
包含文件，鼓励复用
Linux公社 www.linuxidc.com
bar
foo
tasks/foo.yml
第9章
集中化管理平台Ansible详解
135
且
---
## Page 163
扩展、
规范，以不同级别目录层次及文件对角色、变量、任务、处理程序等进行拆分，为后续功能
象，让其复用性更强、功能更具模块化？答案就是角色。角色是Ansible定制好的一种标准
9.7.2
如下：
136第二部分高级篇
现在我们已经了解了变量、任务、处理程序的定义，有什么方法更好地进行组织或抽
需要时可以进行引用，像这样：
#this might be in a file like handlers/handlers.yml
【handlers/handlers.yml】
将处理程序（handlers）放到包含文件中是一个好的做法，比如重启Apache的任务，
roles/
webservers.yml
site.yml
、可维护性打下基础。
handlers:
使用这两种方法都进行变量传递，然后在包含文件中通过使用{{user}}进行变量引用。
two.txt']}
注意，1.4或更高版本可支持以 Python的字典、列表的传递参数形式，如：
name:restart apache
asks:
service:name=apache state=restarted
-include:wordpress.yml user=bob
webservers/
common/
角色
-include: handlers/handlers.yml
include:wordpress.yml user=alice
files/
vars/
handlers/
tasks/
templates/
files/
Linux公社 www.linuxidc.com
一个典型角色目录结构的示例如下：
---
## Page 164
yml、角色功能目录，playbook目录结构可参考图9-5。
是针对 ntp 服务的管理。
抽取出公共的部分，一般为系统的基础服务，比如ntp、iptables、selinux、sysctl等。本示例
（独立文件）修改成角色的形式，同时添加了一个公共类角色common，从角色全局作用域中
【 nginx/hosts 】
（2）定义主机组
【/home/test/ansible/playbooks/nginx 】
playbook 目录包括变量定义目录 group_vars、主机组定义文件 hosts、全局配置文件 site.
（1）playbook目录结构
以下定义了一个业务组webservers，成员为两台主机。
为了便于大家更好地理解和使用角色（role），对9.6节中的nginx软件包管理的 playbook
口任何模板任务可以引用文件中的roles/x/templates/无需写路径，默认相对或绝对
口任何脚本任务可以引用roles/x/files/无需写路径，默认相对或绝对引用；
口任何副本任务可以引用roles/x/fles/无需写路径，
口如roles/x/meta/main.yml文件存在，所列任何作用的依赖关系将被添加到角色的列表
口如roles/x/handlers/main.yml文件存在，其中所列的处理程序将被添加到执行队列；
口如roles/x/tasks/main.yml文件存在，其中列出的任务将被添加到执行队列；
角色定制以下规范，其中×为角色名。
【 site.yml 】
在 playbook 是这样引用的：
引用。
（1.3及更高版本）；
hosts:webservers
如roles/x/vars/main.yml文件存在，其中列出的变量将被添加到执行队列；
roles:
meta/
handlers/
webservers
tasks/
templates/
Linux公社 www.linuxidc.com
第9章
集中化管理平台Ansible详解
，默认相对或绝对引用：
137
---
## Page 165
持一致，组变量文件定义的变量作为域只受限于该组，all代表所有主机。
“-i fle”命令行参数调用，如 ansible-playbook -i hosts 来调用。
138第二部分高级篇
【nginx/group_vars/webservers】
【 nginx/group_vars/all 】
定义规则见9.3节所述，group_vars为定义组变量目录，目录当中的文件名要与组名保
（3）定义主机或组变量
非必选配置，默认将引引用/etc/ansible/hosts的参数，角色中自定义组与主机文件将通过
下面的全局配置文件引用了两个角色块，角色的应用范围及实现功能都不一样：
（4）全局配置文件 site.yml
root:/data
max_open_file:65536
num_cpus:4
worker_processes:4
ntpserver:ntp.sjtu.edu.cn
#Variableslisted here are applicable to allhost groups
192.168.1.22
192.168.1.21
[webservers]
Linux公社 www.linuxidc.com
图9-5playbook主目录结构
---
## Page 166
配置文件定义如下：
任务列表、模板、变量的配置文件main.yml，需要注意的是，vars/main.yml中定义的变量优
hosts参数来绑定角色对应的主机或组。
hadop 等，前提是我们先要进行定义，通常情况下一个角色对应着一个特定功能服务。通过
分别对应nginx/common、nginx/web目录。以此类推，可以引用更多的角色，如db、nosql、
- name: test to see if selinux is running
【 tasks/main.yml 】
角色 common 定义了handlers、tasks、templates、vars 4个功能类，分别存放处理程序、
（5）角色common的定义
全局配置文件 site.yml引用了两个角色，
-name: configure and deploy the webservers and application code
【 nginx/site.yml 】
changed_when:false
command:getenforce
service:name=ntpd state=started enabled=true
name:Start the ntp service
name:Configure ntp file
name:Install ntp
service:name=ntpd state=restarted
name: restart ntp
register: sestatus
notify:restart ntp
template:src=ntp.conf.j2 dest=/etc/ntp.conf
yum:name=ntpstate=present
roles:
hosts:
roles:
hosts: all
name:
-web
common
apply common configuration to all nodes
webservers
Linux公社www.linuxidc.com
一个为公共类的common，另一个为web类
第9章集中化管理平台Ansible详解
139
---
## Page 167
理playbook对应定义功能段打散后的内容。具体功能块配置文件定义如下：
查找。
140第二部分高级篇
【 templates/nginx2.conf 】
【handlers/main.yml 】
角色web定义了handlers、tasks、templates三个功能类，基本上是9.6节中的nginx管
（6）角色web的定义
此处{ntpserver}将引用vars/main.yml定义的ntpserver变量。
【 templates/ntp.conf.j2 】
其中template:src=ntp.conf.j2引用模板时无需写路径，默认在上级的templates目录中
(% if num_cpus == 2 %}
worker_processes
user
【tasks/main.yml】
ntpserver: 210.72.145.44
# Variables listed here are applicable to all host groups
【vars/main.yml 】
keys/etc/ntp/keys
includefile /etc/ntp/crypto/pw
server{Intpserver}}
restrict-6::1
restrict 127.0.0.1
driftfile/var/lib/ntp/drift
service:name=nginx state=restarted
name:restartnginx
service: name=nginx state=started
name:ensure nginx is running
-restart nginx
template: src=nginx2.conf dest=/etc/nginx/nginx.conf
name:write the nginx config file
yum:pkg=nginx state=latest
name: ensure nginx is at the latest version
notify:
Linux公社 www.linuxidc.com
{worker_processes 1};
nginx;
---
## Page 168
9.8
Facts是一个非常有用的组件，类似于Saltstack的Grains功能，
运行结果如图9-6与图9-7所示。
#cd/home/test/ansible/playbooks/nginx
（7）运行角色
具体web角色定义细节将不展开描述，可参考9.6节及common角色的说明。
[%endif%)
worker_cpu_affinity1000010000100001;
else}
0100000010000000;
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000
worker_cpu_affinity 1000 0100 0010 0001;
worker_cpu_affinity0110;
获取远程主机系统信息：Facts
Linux公社 www.linuxidc.com
102-1812
TASK:[ensure nginx is running]
ASK:[Start the ntp service]
192.168.1
192
unsta
图9-7nginx部署片段
图9-6ntp部署片段
第9章
集中化管理平台Ansible详解141
实现获取远程主机的
---
## Page 169
统之间的差异。
9.9
192.168.1.21的Facts信息需运行：ansible192.168.1.21-m setup，结果如下：
ServerName 参数的值。通过运行 ansible hostmname-m setup可获取Facts 信息，例如，获取
几乎相同，但略有不同的配置项可以引用变量。在Ansible中使用变量的目的是方便处理系
用本机CPU核数动态配置Nginx的worker_processes参数，可能有一组主机的应用配置文件
实现更加个性化、灵活的功能需求，比如在httpd.conf模板中引用Facts 的主机名信息作为
系统信息，包括主机名、IP地址、操作系统、分区信息、硬件信息等，可以配合playbook
142第二部分高级篇
变量名的命名规则由字母、数字和下划线组合而成，变量必须以字母开头，如“foo_
在实际应用场景中，我们希望一些任务、配置根据设备性能的不同而产生差异，比如使
{ ansible_hostname }}
在模板文件中这样引I用Facts信息
192.168.1.211success >>
变量
( ansible_devices.sda.model 1}
"ansible_facts":{
"ansible_bios_date":"07/02/2012",
"ansible_architecture":"x86_64",
"ansible_all_ipv4_addresses":[
"ansible_all_ipv6_addresses":
Linux公社 www.linuxidc.com
"KEYBOARDTYPE":
"fe80::250:56ff:fe28:632d"
"192.168.1.21"
"root":"UUID=b8d29324-57b2-4949-8402-7fd9ad64ac5a
"ro":true,
"rhgb":true,
"rd NOMD":true,
"rd NO LVM":true，
"rd NOLUKS":true
'rd_NO_DM":true
"quiet":true,
"LANG":"en_US.UTF-8",
"KEYTABLE":
"us"
"pc",
---
## Page 170
例如，在目标设备192.168.1.21定义三个变量，供以后playbook进行引用。
件的JSON输出，文件扩展名要求使用“.fact”，这些文件都可以作为Ansible的本地Facts，
通过本地Facts来实现。只需在目标设备/etc/ansible/facts.d目录定义JSON、INI或可执行文
求时，可以通过编写自定义的Facts 模块来实现。当然，还有一个更简单的实现方法，就是
9.9.2
向到/tmp/testshell文件中。
Ansible使用Jinja2强大的过滤器（Filters）功能。
擎，并扩展了其语法和一系列强大的功能，官网地址：http:/jinja.pocoo.org/。下面介绍一下
9.9.1Jinja2 过滤器
见9.6节，建议回顾一下，加深记忆。
都是非法的变量命名。在 Inventory中定义变量见9.3.2节和9.3.3节，在 playbook定义变量
port”是一个合法的变量，“foo5”也是可以的，“foo-port"、“foo port”、“foo.port”和“12”
【/etc/ansible/facts.d/preferences.fact】
我们可以通过Facts来获取目标主机的系统信息，当这些信息还不能满足我们的功能需
更多的过滤方法见 http://jinja.pocoo.org/docs/templates/#builtin-flters。
使用格式：{{变量名|过滤方法}}。
Jinja2是Python下一个广泛应用的模板引擎，它的设计思想类似于Django的模板引
[general]
下面为一个完整的示例，实现从“/etc/profile”中过滤出文件名“profile”，并输出重定
{path|dirname}}
获取文件所处的目录名：
(path|basename }}
下面是实现获取一个文件路径变量过滤出文件名的一个示例：
本地Facts
tasks:
vars:
hosts:
filename:/etc/profile
shell:echo {{ filename |basename }}>>/tmp/testshell
name:
192.168.1.21
Linux公社 www.linuxidc.com