of protocols, e.g. transmission and password generation.
TrustOTP [44] builds a TrustZone to protect against attacks
such as Denial-of-Service (DoS). It isolates OTP code and
data from the mobile OS to ensure that the generated OTPs
and seeds are secure even if the mobile OS is compromised.
Differently, Hamdare et al. [23] and Eldefrawy et al. [16]
focused on securing the authentication during OTP trans-
mission and OTP generation, respectively. Hamdare et al.
proposed a scheme to protect the OTP mechanism used for
e-commerce transactions from Man-In-The-Middle (MITM)
attacks. Instead of transmitting a simple OTP, they combined
the OTP with a secure key and created a new transaction
password by encrypting the combination using RSA. Elde-
frawy et al. focused on securing OTP generation by generat-
ing multiple OTPs for both service providers and consumers.
The low computation cost of their scheme makes it suitable
for mobile devices.
The focus of previous work is to enhance the security of
OTP authentication protocols. However, we focused on ana-
lyzing the correctness of OTP implementations and proposed
an approach to check server responses instead of directly
performing code analysis. Mulliner et al.. [37] proposed a
similar research that conducted a survey by introducing sev-
eral attacks and weaknesses of SMS OTPs such as SIM swap
attack, wireless interception. To protect SMS OTP attacks,
the possible defense techniques are generally provided. How-
ever, details to exploit vulnerabilities and protect SMS OTP
authentication are not given. Dmitrienko et al. [12] inves-
tigated the implementation of two-factor authentication of
well-known Internet service providers (e.g., Google, Drop-
box, Twitter, and Facebook). They applied cross-platform
(i.e., PC-mobile) infection to control both PC and mobile
devices involved in the authentication protocol and identi-
fied weaknesses that could be exploited in the SMS-based
transaction authentication schemes of four large banks and
Google. Their approach determines whether an authentica-
tion implementation is secure, but cannot provide detailed
information on the causes. AUTH-EYE, however, does identify
the causes of implementation flaws.
6.2 Dynamic Vulnerability Analysis of
Mobile Apps
Several approaches have been proposed for dynamic analy-
sis of mobile apps. The approach by Zuo et al. [53] detects
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Siqi et al.
vulnerabilities arising from SSL error handling in the mobile
platform. They statically identified customized error han-
dling processes rewritten by developers. For each process,
their system executes an event to trigger the error and checks
whether the error is processed correctly. This approach re-
quires access to the source code. In contrast, AUTH-EYE as-
sumes that the server source code is not available, and uses
only decompiled Android app code.
D’Orazio et al. [13] relied on an adversary model spec-
ifying secure and insecure states to detect vulnerabilities
that can expose users’ sensitive data in mobile devices. The
drawback of their approach is that complete code coverage
cannot be ensured through app execution. AUTH-EYE instead
achieves full code coverage because the entire login activities
in apps are examined; thus, all the authentication relevant
functionalities can all be triggered. Also relying on an at-
tack scenario, IntentDroid [24] identifies Inter-Application
Communication (IAC) vulnerabilities by executing attacks
on eight specified vulnerabilities. It analyzes activity com-
ponents of apps by implementing attacks based on effect
path coverage, with low overhead. Although IntentDroid only
uses a small set of tests to achieve high coverage analyses,
path analysis mechanisms cannot be accurately applied to
decompiled app code.
AUTH-EYE is similar to SmartGen [52], which performs in-
context analysis to expose harmful URLs through symbolic
execution in mobile apps. Since server URLs are invisible,
SmartGen triggers the appropriate execution through APIs
in app code. The main difference between SmartGen and
AUTH-EYE is, however, that AUTH-EYE does not rely on de-
pendency patterns to identify the target functions. It uses
only limited code information (i.e., class names and func-
tion names) that are extracted easily and completely. Smart-
Gen targets on detecting of hidden malicious URLs whereas
AUTH-EYE identifies violations of the OTP rules in implemen-
tations of OTP authentication protocols.
7 CONCLUSION
In this paper we defined six OTP rules based on the relevant
RFCs and proposed a novel automated system, AUTH-EYE,
to check for violations of those rules. We used AUTH-EYE to
perform an empirical study on a large number of Android
applications. Our approach treats each server as a black box
and infers the correctness of its OTP implementation code
by analyzing server responses generated after a sequence of
login requests. We assessed 3,303 Android apps and identi-
fied 544 apps implemented OTP authentication. Only eight
of these 544 apps correctly implemented the OTP authen-
tication protocols (i.e., satisfied all six OTP rules). Further
analysis revealed the surprising fact that the validation sys-
tems of apps in security-critical domains, such as Finance,
Shopping, and Social, are not as secure as one might expect.
The example cases discussed in Section 5.4 show that poor
implementations make users’ accounts vulnerable to attack
and may even expose private data directly. As future work,
we plan to extend AUTH-EYE to examine additional OTP rules
and perform a more extensive survey of real-world app OTP
security. A new dynamic analysis tool, CuriousDroid [10], is
introduced. It is a context-based technique and can achieve
higher accuracy than Monkey. We will refer to this technique
to improve AUTH-EYE. The interested readers could also ac-
cess our Github page8 to obtain source code of AUTH-EYE and
help improve the analysis.
ACKNOWLEDGEMENT
This work was mainly supported by CSIRO Research Of-
fice. It was also partially supported by the General Program
of National Natural Science Foundation of China (Grant
No.61872237), the Key Program of National Natural Science
Foundation of China (Grant No.U1636217), and the Major
Project of Ministry of Industry and Information Technology
of China ([2018] No.36).
REFERENCES
[1] Android [n. d.]. UI Automator. https://developer.android.com/training/
testing/ui-automator.
[2] Android. [n. d.]. UI/Application Exerciser Monkey Tool. https://
developer.android.com/studio/test/monkey.
[3] Paul Ashley, Heather Hinton, and Mark Vandenwauver. 2001. Wired
versus wireless security: The Internet, WAP and iMode for e-commerce.
In In Proceedings of the 17th Annual Computer Security Applications
Conference (ACSAC). IEEE, 296–306.
[4] Zhongjie Ba and Kui Ren. 2017. Addressing smartphone-based multi-
factor authentication via hardware-rooted technologies. In In Proceed-
ings of the 37th IEEE International Conference on Distributed Computing
Systems (ICDCS). IEEE, 1910–1914.
[5] CITI Bank. [n. d.]. CITI Bank Mobile Token. https://www.citibank.
com.au/aus/banking/citi-mobile-token.htm.
[6] Antonio Bianchi, Eric Gustafson, Yanick Fratantonio, Christopher
Kruegel, and Giovanni Vigna. 2017. Exploitation and mitigation of
authentication schemes based on device-public information. In In Pro-
ceedings of the 33rd Annual Computer Security Applications Conference
(ACSAC). ACM, 16–27.
[7] Joseph Bonneau, Cormac Herley, Paul C Van Oorschot, and Frank
Stajano. 2012. The quest to replace passwords: A framework for com-
parative evaluation of web authentication schemes. In In Proceedings
of the 33rd IEEE Symposium on Security and Privacy (S & P). IEEE,
553–567.
[8] Sven Bugiel, Stephen Heuser, and Ahmad-Reza Sadeghi. 2013. Flexible
and fine-grained mandatory access control on android for diverse
security and privacy policies. In In Proceedings of the 22nd Usenix
Security Symposium (USENIX). 131–146.
[9] Simon Butler, Michel Wermelinger, Yijun Yu, and Helen Sharp. 2011.
Mining java class naming conventions. In In the proceedings of the 27th
IEEE International Conference on Software Maintenance (ICSM). IEEE,
93–102.
8https://github.com/GoSSIP-SJTU/auth-eye
An Empirical Study of SMS OTP Authentication in Android Apps
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
[10] Patrick Carter, Collin Mulliner, Martina Lindorfer, William Robertson,
and Engin Kirda. 2016. CuriousDroid: automated user interface in-
teraction for android application analysis sandboxes. In International
Conference on Financial Cryptography and Data Security. Springer,
231–249.
[11] Joseph A Cazier and B Dawn Medlin. 2006. Password security: An
empirical investigation into e-commerce passwords and their crack
times. The Journal of Information Systems Security 15, 6 (2006), 45–55.
[12] Alexandra Dmitrienko, Christopher Liebchen, Christian Rossow, and
Ahmad-Reza Sadeghi. 2014. On the (in) security of mobile two-factor
authentication. In In Proceedings of the 18th International Conference
on Financial Cryptography and Data Security (FC). Springer, 365–383.
[13] Christian J D’Orazio, Rongxing Lu, Kim-Kwang Raymond Choo, and
Athanasios V Vasilakos. 2017. A Markov adversary model to detect
vulnerable iOS devices and vulnerabilities in iOS apps. The Journal of
Applied Mathematics and Computation 293 (2017), 523–544.
[14] D Eastlake 3rd, Steve Crocker, and Jeff Schiller. 1994. Randomness
recommendations for security. Technical Report.
[15] D Eastlake 3rd, J Schiller, and Steve Crocker. 2005. Randomness re-
quirements for security. Technical Report.
[16] Mohamed Hamdy Eldefrawy, Khaled Alghathbar, and Muham-
mad Khurram Khan. 2011. OTP-based two-factor authentication using
mobile phones. In In Proceedings of the 8th International Conference on
Information Technology: New Generations (ITNG). IEEE, 327–331.
[17] Ming Fan, Jun Liu, Xiapu Luo, Kai Chen, Zhenzhou Tian, Qinghua
Zheng, and Ting Liu. 2018. Android malware familial classification
and representative sample selection via frequent subgraph analysis.
The Journal of IEEE Transactions on Information Forensics and Security
(TIFS) 13, 8 (2018), 1890–1905.
[18] John Franks, Phillip Hallam-Baker, Jeffrey Hostetler, Scott Lawrence,
Paul Leach, Ari Luotonen, and Lawrence Stewart. 1999. HTTP authen-
tication: Basic and digest access authentication. Technical Report.
[19] Praveen Gauravaram. 2012. Security Analysis of salt|| password Hashes.
In In Proceedings of the 1st International Conference on Advanced Com-
puter Science Applications and Technologies (ACSAT). IEEE, 25–30.
[20] Google. [n. d.]. Google Authenticator. https://play.google.com/store/
apps/details?id=com.google.android.apps.authenticator2&hl=en_AU.
[21] Nancie Gunson, Diarmid Marshall, Hazel Morton, and Mervyn Jack.
2011. User perceptions of security and usability of single-factor and
two-factor authentication in automated telephone banking. The Inter-
national Journal of Computers & Security 30, 4 (2011), 208–220.
[22] Neil Haller, Craig Metz, Phil Nesser, and Mike Straw. 1998. A one-time
password system. Technical Report.
[23] Safa Hamdare, Varsha Nagpurkar, and Jayashri Mittal. 2014. Securing
SMS based one time password technique from Man in the middle
attack. arXiv preprint arXiv:1405.4828 (2014).
[24] Roee Hay, Omer Tripp, and Marco Pistoia. 2015. Dynamic detection
of inter-application communication vulnerabilities in Android. In In
Proceedings of the 24th International Symposium on Software Testing
and Analysis (ISSTA). ACM, 118–128.
[25] Kyle Ingols, Richard Lippmann, and Keith Piwowarski. 2006. Practical
attack graph generation for network defense. In In Proceedings of the
22nd IEEE Annual Computer Security Applications Conference (ACSAC).
IEEE, 121–130.
[26] Jongpil Jeong, Min Young Chung, and Hyunseung Choo. 2008. Inte-
grated OTP-based user authentication scheme using smart cards in
home networks. In In Proceedings of the 41st Annual Hawaii Interna-
tional Conference on System Sciences (HICSS 2008). IEEE, 294–294.
[27] Xing Jin, Xuchao Hu, Kailiang Ying, Wenliang Du, Heng Yin, and Gau-
tam Nagesh Peri. 2014. Code injection attacks on html5-based mobile
apps: Characterization, detection and mitigation. In In Proceedings of
the 21st ACM SIGSAC Conference on Computer and Communications
Security (CCS). ACM, 66–77.
[28] Pawel Laka and Wojciech Mazurczyk. 2018. User perspective and se-
curity of a new mobile authentication method. The Journal of Telecom-
munication Systems 69, 3 (2018), 365–379.
[29] Leslie Lamport. 1981. Password authentication with insecure com-
munication. The Journal of Communications of the ACM 24, 11 (1981),
770–772.
[30] Jaeho Lee, Ang Chen, and Dan S Wallach. 2019. Total Recall: Persis-
tence of Passwords in Android.. In In Proceedings of The Network and
Distributed System Security Symposium (NDSS).
[31] Siqi Ma, David Lo, Teng Li, and Robert H Deng. 2016. Cdrep: Au-
tomatic repair of cryptographic misuses in android applications. In
In Proceedings of the 11th ACM on Asia Conference on Computer and
Communications Security (ASIACCS). ACM, 711–722.
[32] Siqi Ma, Shaowei Wang, David Lo, Robert Huijie Deng, and Cong
Sun. 2015. Active semi-supervised approach for checking app behav-
ior against its description. In In Proceedings of the 39th IEEE Annual
Computer Software and Applications Conference (ICSAC), Vol. 2. IEEE,
179–184.
[33] Christopher D Manning, Christopher D Manning, and Hinrich Schütze.
1999. Foundations of statistical natural language processing. MIT press.
[34] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. 2013. Effi-
cient estimation of word representations in vector space. arXiv preprint
arXiv:1301.3781 (2013).
[35] David M’Raihi, Mihir Bellare, Frank Hoornaert, David Naccache, and
Ohad Ranen. 2005. Hotp: An hmac-based one-time password algorithm.
Technical Report.
[36] David M’Raihi, Salah Machani, Mingliang Pei, and Johan Rydell. 2011.
Totp: Time-based one-time password algorithm. Technical Report.
[37] Collin Mulliner, Ravishankar Borgaonkar, Patrick Stewin, and Jean-
Pierre Seifert. 2013. SMS-based one-time passwords: attacks and de-
fense. In In Proceedings of the 10th International Conference on Detec-
tion of Intrusions and Malware, and Vulnerability Assessment (DIMVA).
Springer, 150–159.
[38] PortSwigger. [n. d.]. Burp Suite. https://portswigger.net/burp.
[39] William K Pratt, Julius Kane, and Harry C Andrews. 1969. Hadamard
transform image coding. In Proceedings of the IEEE Journals and Mag-
azines 57, 1 (1969), 58–68.
[40] Blake Ross, Collin Jackson, Nick Miyake, Dan Boneh, and John C
Mitchell. 2005. Stronger Password Authentication Using Browser
Extensions.. In In Proceedings of the 14th Usenix Security Symposium
(USENIX). Baltimore, MD, USA, 17–32.
Porter Stemmer.
http://tartarus.org/martin/
[41] SnowBall. [n. d.].
PorterStemmer/java.txt.
[42] PNF Software. [n. d.]. JEB Decompiler. https://www.pnfsoftware.com/.
[43] Avinash Sudhodanan, Roberto Carbone, Luca Compagna, Nicolas Dol-
gin, Alessandro Armando, and Umberto Morelli. 2017. Large-scale
analysis & detection of authentication cross-site request forgeries. In
In Proceedings of the 2nd IEEE European Symposium on Security and
Privacy (EuroS&P). IEEE, 350–365.
[44] He Sun, Kun Sun, Yuewu Wang, and Jiwu Jing. 2015. TrustOTP: Trans-
forming smartphones into secure one-time password tokens. In In
Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security (CCS). ACM, 976–988.
[45] Mariano Luis T Uymatiao and William Emmanuel S Yu. 2014. Time-
based OTP authentication via secure tunnel (TOAST): A mobile TOTP
scheme using TLS seed exchange and encrypted offline keystore. In
In Proceedings of the 4th IEEE International Conference on Information
Science and Technology (ICIST). IEEE, 225–229.
[46] Ignacio Velásquez, Angélica Caro, and Alfonso Rodríguez. 2018. Au-
thentication schemes and methods: A systematic literature review. The
International Journal of Information and Software Technology 94 (2018),
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Siqi et al.
30–37.
[47] Dong Wang, Xiaosong Zhang, Jiang Ming, Ting Chen, Chao Wang, and
Weina Niu. 2018. Resetting Your Password Is Vulnerable: A Security
Study of Common SMS-Based Authentication in IoT Device. The
Journal of Wireless Communications and Mobile Computing 2018 (2018).
[48] Hui Wang, Yuanyuan Zhang, Juanru Li, Hui Liu, Wenbo Yang, Bodong
Li, and Dawu Gu. 2015. Vulnerability assessment of oauth implemen-
tations in android applications. In In Proceedings of the 31st Annual
Computer Security Applications Conference (ACSAC). ACM, 61–70.
[49] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. 2010. TaintScope:
A checksum-aware directed fuzzing tool for automatic software vul-
nerability detection. In In Proceedings of the 31st IEEE Symposium on
Security and Privacy (S & P). IEEE, 497–512.
[50] R Winsniewski. 2012. Android–apktool: A tool for reverse engineering
android apk files.
[51] Changsok Yoo, Byung-Tak Kang, and Huy Kang Kim. 2015. Case study
of the vulnerability of OTP implemented in internet banking systems
of South Korea. The Journal of Multimedia Tools and Applications 74,
10 (2015), 3289–3303.
[52] Chaoshun Zuo and Zhiqiang Lin. 2017. Smartgen: Exposing server urls
of mobile apps with selective symbolic execution. In In Proceedings of
the 26th International Conference on World Wide Web (WWW). Interna-
tional World Wide Web Conferences Steering Committee, 867–876.
[53] Chaoshun Zuo, Jianliang Wu, and Shanqing Guo. 2015. Automatically
detecting ssl error-handling vulnerabilities in hybrid mobile web apps.
In In Proceedings of the 10th ACM on Asia Conference on Computer and
Communications Security (ASIACCS). ACM, 591–596.