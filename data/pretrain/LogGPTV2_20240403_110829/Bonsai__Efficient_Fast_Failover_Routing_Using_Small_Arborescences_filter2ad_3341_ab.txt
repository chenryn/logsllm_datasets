parts of the network. Elhourani et al. [25] obtain a resilience of
k−1 by indexing the arborescences from 1 to k, with all packets
starting in arborescence 1, switching to the arborescence with
the next higher index after a failure.
Chiesa et al. [14], [15], [18], [22] propose to generalize
this concept by deﬁning a circular order on the arborescences.
As such, packets may start in any arborescence, and may
also be forwarded after hitting k failures, though without any
theoretical guarantees in the latter case.3 Chiesa et al. also
provided other failover strategies, some of them probabilistic.
Instead of deﬁning a ﬁxed circular order on the arborescences,
the next arborescence may be chosen uniformly at random,
hopefully breaking out of forwarding loops. As an extension,
motivated by bidirectional link failures, packets can bounce on
the failed link e with some ﬁxed probability, picking the other
arborescence that was also impacted by failing link e.
Arborescence quality. A deﬁning quality of routing on an
arborescence is its stretch, which we now deﬁne formally. Let
ℓopt(v, t) denote the minimum distance packets have to travel
from v to t without failures (shortest path routing) and let
ℓT (v, t) denote the route length along arborescence T . The
stretch of a node v in T is deﬁned as the difference between
routing optimally and on T , i.e., ℓT (v, t) − ℓopt(v, t), whereas
the stretch of an arborescence T is deﬁned as the maximum
stretch over all v ∈ V . Similarly, the stretch of an arborescence
packing T is deﬁned as the maximum stretch over all T ∈ T .
3We show how to extend the theoretical guarantees beyond k failures in
Section VI for failure distributions where the failures are clustered [31].
3
When it is clear from the context, we will just use the term
stretch, without specifying v, T , or T .
However, prior work does not provide theoretical guarantees
on the stretch when using arborescences, except on how often
one might switch the arborescences [14], [15], [18], or for some
specialized regular topologies [8]. In extreme cases, the stretch
might even be worst possible. For example, using arc-disjoint
arborescences generated from disjoint Hamiltonian cycles [15],
can induce a stretch of up to Ω(n), as indicated in Fig. 1. Still,
sometimes very low stretch arborescences are not possible, as
we investigate in the next section.
B. Lower Bounds on Arborescence Stretch
We start with the observation that once we have more than
one arborescence in T , its stretch is at least 1. Consider any
neighbor v of the destination t: its distance to t is 1, but the
corresponding arc may only be used in a single arborescence.
Matching bounds on complete graphs. Already this simple
lower bound allows the optimal stretch to be obtained for
complete graphs: we can directly decompose a complete graph
into n − 1 arc-disjoint arborescences of depth 2, where each
arborescence uses a different arc (v, t) to the destination t as
their ﬁrst link followed by all arcs from nodes in V \ {v, t} to
node v. Hence, each node has a stretch of at most 1 in every
arborescence.
Arc-disjoint paths and lower bounds. We can broaden our
initial idea to a more general setting. As all the arborescences
need to be arc-disjoint, not all can take the shortest path to the
root, but rather need to take k different paths, which gives ﬁrst
stretch bounds: some arborescences must take longer detours.
Observation 1: Let T be any packing of k arc-disjoint
arborescences rooted in t ∈ V . Consider the set of all k arc-
disjoint v − t-paths, denote ℓk(v, t) as the minimum length of
the kth-shortest (i.e., longest) path from this set. The stretch
of T is at least maxv∈V ℓk(v, t) − ℓopt(v, t).
Girth bounds. The network girth is the length of the graph’s
shortest undirected cycle. Again, we pick any neighbor u
of the root t, and note that the girth can be used to derive
a lower bound on maxv∈V ℓk(v, t) − ℓopt(v, t): if an alternate
arc-disjoint route is to be taken, instead of the direct link (u, v),
this alternate path has at least the length of the graph’s girth
minus 1 for (u, v). For example, in the case of complete graphs,
the girth is 3, hence the alternate path has at least a length of
2. As the stretch is computed by subtracting the shortest path,
we obtain a lower bound of girth minus 2.
Corollary 1: The network’s girth minus 2 is a lower bound
for the stretch of an arborescence packing T , for |T | > 1.
Optimality for regular topologies. For regular graphs, this
bound can sufﬁce for optimality, as seen above on complete
graphs. Further examples are e.g. torus graphs, grids, hyper-
cubes, and topologies that can be decomposed into trees of
connected complete bipartite graphs [8], all examples where the
girth based bound is tight. For general topologies, the situation
is more difﬁcult, as discussed in the next section.
v1
v2
v3
v4
e1
e2
u
v1
v2
r
v3
b
v4
V
e1
e2
E
H = (V, E)
G′ = (V ′, E′)
Fig. 2. G′ graph construction for a hypergraph H = (V =
{v1, v2, v3, v4}, E = {e1, e2}), e1 = {v1, v2, v3}, e2 = {v2, v3, v4},
using the ideas from [32]. The nodes r1, r2 and b1, b2 are merged, respectively,
to make the ﬁgure less cluttered. In this example, we provide two arborescences
of depth 2, in red (dotted) and blue (dashed), corresponding to a 2-coloring
of the hypergraph with v1, v3 in red and v2, v4 in blue.
C. Arborescence Decomposition Complexity
Even though computing a maximum amount of arc-disjoint
arborescences can be done efﬁciently, optimizing them regard-
ing stretch is intractable. Hence, due to the NP-completeness
result stated next, we will focus on heuristics in the following
Section IV and compare them to each other.
Theorem 1: Let G = (V, E) be a k-connected symmetric
digraph with a root r ∈ V . Computing k r-rooted arc-disjoint
spanning arborescences, s.t. the maximum stretch is minimized,
is NP-complete for all k ≥ 2, k ∈ N.
From depth to stretch. Alon, Bermond, and Fraigniaud [32]
showed that minimizing the maximum depth for more than
one disjoint arborescence is NP-hard, via reduction from
hypergraph4 colorability. However, their result does not sufﬁce
to show hardness for the stretch: in fact, in their construction
the optimal stretch is easy to compute. Notwithstanding, we
adapt their ideas to show NP-hardness for optimal stretch.
Proof of Theorem 1: As the stretch problem is clearly in
NP, it remains to show NP-hardness. To this end, we utilize
and extend [32, Theorem 2] and subsequent comments.
The authors in [32] perform a reduction from the NP-
complete problem of hypergraph colorability [33]: given a
hypergraph H = (V, E), can its node set be 2-colored (e.g.,
red and blue), s.t. every hyperedge e ∈ E is incident to nodes of
both colors? They construct the following graph G′ = (V ′, E′),
showing that ﬁnding two undirected link-disjoint u-spanning
arborescences of depth at most 2 is NP-hard: V ′ consists of
V , each hyperedge e ∈ E is represented as a node, and the
ﬁve nodes u, r1, r2 (red), and b1, b2 (blue). The undirected
link set is constructed in four steps: 1) the nodes v ∈ V are
connected to those representing e ∈ E if v is incident to e in
H, 2) all nodes in V are connected to all nodes u, r1, r2, b1, b2
and 3) u is connected to r1, r2, b1, b2. Lastly, 4) r1 and r2 are
connected to b1, b2 as well. We provide an example in Fig. 2.
We brieﬂy note at this point that their and our following
proof construction directly translate to bidirected graphs, by
replacing every undirected link with two directed opposite arcs:
4Hypergraphs are a generalization of graphs, where the edges are replaced
by hyperedges, which in turn can join any number of nodes, not just two.
4
essentially, using the “back”-direction of a link is not useful
at all. For ease of readability, we will use undirected links as
well, just denoting them as links in the remainder of the proof.
We analyze the depth and stretch properties of the nodes in
V ′, when they are contained in two arborescences of depth 2.
Herein, the depth of a node in an arborescence is denoted
w.r.t. the root u, and the stretch w.r.t. the shortest path to u:
• for nodes in E to have a depth of 2 in an arborescence,
the stretch must be 0, i.e., only two hops to u;
• subsequently, the nodes in V , connected to the nodes in
E, must have a depth of 1 and a stretch of 0;
• as the only option for nodes in V to have a depth of 1 is
to be connected (via the arborescence links) directly to
the root u, which only provides |V | of the 2|V | necessary
links, at least half the nodes in V have a depth of 2 and
stretch of 1 in some arborescence — no higher depth or
stretch is needed, as the detour via r1, r2, b1, b2 provides
ample connectivity;
• the remaining nodes r1, r2, b1, b2 can be connected to the
root with a depth of at most 2 and a stretch of at most 1.
If no arborescences with depth 2 are possible, then some
node has at least depth 3. Note that a depth of 3 is always
possible. To this end, we ﬁrst connect all nodes in V via r1
(red arborescence) and b1 (blue arborescence) resulting in a
depth of 2 and stretch of 1 so far. Next, we connect the nodes
in E to those nodes in V , resulting in a depth of 3 and stretch
of 1 for both arborescences. However, this construction, while
increasing the depth, maintains the stretch of 1: the maximum
stretch in V is still 1, but nodes in E have a stretch of at most
1 as well now. If we could enforce that some node were to
have a stretch of 2 with depth 3, then we would have shown
NP-hardness for the stretch of 2 arborescences. We will next
show how to achieve this feat.
i (distance to u: 3) and E′
We take the graph G′, clone it |E| times, and in each of those
|E| clones G′
i, 1 ≤ i ≤ |E|, we merge the node ei with ui,
denoting the (polynomially created) graph by G′′ = (V ′′, E′′).
We obtain new node sets V ′
i (distance
to u: 4). If the original graph G′ had two u-rooted link-disjoint
arborescences of depth 2, then the new graph G′′ has two such
arborescences of depth 4 as well. Firstly, the nodes in V ′
i (and
the four extra nodes r1,i, . . .) have a depth of 3, 4 and a stretch
of 0, 1. Secondly, the nodes in E′′
i have a depth of 4 and as
thus a stretch of 0. Observe that in this case of depth 4, all
nodes have a stretch of 0 or 1 in the two arborescences.
We now assume that the original graph G′ does not allow
for two arborescences of depth 2, i.e., following the previous
arguments, at least one node in E has a depth of 3 with stretch
of 1, w.l.o.g. ej ∈ E. However, then at least one node in E′
j
has a depth of 5 in some arborescence, with a stretch of 2.
Hence, minimizing the maximum stretch is NP-hard, as it is
NP-hard to decide if two rooted disjoint arborescences with
stretch 1 exist. The above NP-hardness construction can be
directly extended to any k ∈ N number of arborescences for
k-connected graphs, applying the ideas from [32, p.5].
IV. BONSAI: HOW TO BUILD BETTER ARBORESCENCES
FOR ARBITRARY NETWORKS
A crucial question studied in this paper is how to avoid the
black-box modeling of arborescences, which does not provide
any stretch properties. We therefore analyze the complexity of
general arborescence decompositions for arbitrary networks,
with the goal of obtaining minimum stretch.
Since the problem was shown to be NP-complete in
Section III-C, we now describe polynomial-time heuristics
to decompose arbitrary graphs into “Bonsai” arborescences
efﬁciently while striving to keep their stretch low. The simplest
way to decompose a k-connected graph into k arc-disjoint
arborescences constructs one arborescence after each other, as
in the two approaches described next.
Random decomposition. When building the ith arborescence
Ti, the following method ensures that the graph with all the
arcs belonging to the trees T1, . . . , Ti are removed is still k − i
connected. We start at the root and insert a random unused
arc (not belonging to any Tj, j  1.
Round-robin approach. Instead of building one arborescence
after the other, the round-robin approach constructs all of them
in parallel. After the jth edge has been added to the ﬁrst
arborescence, chosen from all the unused edges, the second
arborescence obtains its jth edge and so on. To make the
procedure simpler, we may omit the connectivity test described
5
v5
v6
v7
t
v1
v2
v3
v4
Fig. 3. Example: 3-connected graph. The Round-Robin approach performed
two rounds for the ﬁrst blue (dash-dotted) and second green (dashed)
arborescences, and one round for the third red (dotted) arborescence. Even
though the graph remains k − 1 = 2-connected when removing any single
arborescence, the red (dotted) arborescence cannot reach the nodes v1 to v4.
for the greedy approach5. By increasing the depth in each
of these decisions only if strictly necessary, this leads to a
much more balanced arborescence packing with respect to
the length of the detours they entail. Unfortunately, however,
this procedure does not always succeed for general graphs. In
some cases, there is no unused arc left that can be added to
arborescence Ti even though it is i’s turn, we reached a dead-
end. An example of such a situation for three arborescences is
provided in Fig. 3.
Reﬁned connectivity test. In some cases, such dead-ends
can be avoided by the following connectivity test. Before
adding an unused arc (u, v) to Ti, we count the number of arc-
disjoint paths from u to the root in the graph H = (V ′, E′),
which represents the unused arcs in case of i failures, i.e.,
V ′ = V and E′ = {(v, w)|(v, w) /∈ ∪j≤iTi}. This represents
the number of potentially usable arc-disjoint paths left for the
arborescences after i failures. If this number is not at least
k − i, the corresponding edge is not added to Ti.
Swapping arcs when growing arborescences. Even with this
reﬁned connectivity test, we might end up in a dead-end. To
get out of it, we can try if exchanging arcs already chosen
by an arborescence might mitigate the problem. For example
in Fig. 3, when we swap the blue arc (v1, t) to the unused
arc (v1, v2), the red arborescence may now take over (v1, t),
removing the current deadlock situation. In general, when we
cannot add an arc to Ti in the normal round-robin fashion,
we can check for candidate arc pairs e = (u, v), e′ = (u, v′)
leaving node u if we could perform a swapping operation.