rences of pairs for inference or mining. As a result, HERO
is capable of identifying function pairs that are composed of
custom leader and follower functions, and thus it can identify
a significantly larger number of pairs. To confirm that, we
identify custom pairs from the 89 true pairs in the aforemen-
tioned reported pair set. We find that 71 are defined and used
in specific modules, thus are custom. Therefore, the result
shows that 79.8% of them are custom.
7.2 Precision and Recall of Delta-Based Pair-
ing
Figure 8: Precision rate and recall rate of pairing results. TP = True
positives, FP = False positives; FN = False negatives.
Precision of the pairing. We first evaluate the precision
rate (i.e., TP / (FP + TP)) of the pairing and the ranking
mechanism. Manually confirming all the detected pairs is im-
practical, so we reuse the “reported pair set” which contains
150 unranked function pairs. In particular, we manually con-
firm the pairs through their names, semantics, functionalities,
and usage by reading the code and comments. We found that
functions names are very helpful in the confirmation because
they contain opposite keywords (e.g., alloc/dealloc) and fol-
low similar structures. Our confirmation shows that 89 are
true function pairs. Automatically pairing the functions in
large programs like Linux, where custom functions are preva-
lent, is very challenging. We believe the precision is already
promising. However, to further improve the precision, we also
provide a ranking mechanism, as shown in §6. The evaluation
results show that the ranking mechanism can help exclude
most of the false positives caused by irrelevant functions. As
we discussed in §6, besides the 537 error-handling functions
such as warn() , HERO treats all other functions as potential
leader/follower functions. Thus other irrelevant functions can
still incur noises. However, the false positives caused by these
irrelevant functions can be further filtered out by the “paired
rate,” which is based on the fact that the irrelevant functions
are often not paired to its leader or follower functions. For
example, the function __memcpy() is an irrelevant function
for functions pairs, but HERO still paired __memcpy() and
kfree() twice in the Linux kernel. Nevertheless, __memcpy()
is called more than 27K times, and kfree() is called more
than 30K times in the linux kernel. Thus, the paired rate for
function __memcpy() and kfree() is nearly 0, which means
that they are not really a function pair. Figure 8 shows the
precision evaluation for ranked pairs: For the top 30% of
ranked pairs, the precision is 100%, and even for the 75% of
the ranked pairs, the precision is about 70%.
We summarize three major causes of false positives. First,
irrelevant functions still exist in EH stacks, introducing noises
in the pairing. Second, function pairs may not appear in the
same function but across different functions. The current im-
plementation of HERO employs an intra-procedural analysis
which would miss such pairs. Third, the detection of error
paths, which is based on error codes, may misidentify nor-
mal paths and error paths of custom error codes are involved,
leading to false positives as well.
Recall of the pairing. We also evaluate the recall rate (i.e.,
TP / (TP + FN)) of the pairing and the ranking mechanism
using the aforementioned ground-truth pair set. The set con-
tains 86 true function pairs; we find that HERO can detect
61 of them, leading to a recall rate of 0.71. Furthermore,
Figure 8 shows the recall rate for the ranked pairs. Similar to
the causes of false positives, false negatives are also mainly
caused by (1) incorrect error-path identification and (2) noises
in delta analysis.
PF-Miner
PairMiner HERO HERO (30%)
Linux
Android
-
50.5
94.7
-
303.3
-
128.2
-
Table 3: Comparison with the closest pairing tools PF-Miner [23]
and PairMiner [24]: Number of function pairs per million lines of
source code. The top 30% of pairs identified by HERO are precise.
USENIX Association
30th USENIX Security Symposium    2051
0.00.10.20.30.40.50.60.70.80.9Percentage of ranked results0%10%20%30%40%50%60%70%80%90%100%Precision and recallPrecission = TP/(FP+TP)Recall = TP/(TP+FN)7.2.1 Comparison with Previous Pairing Analyses
We aim to compare HERO with related works on function
pairing. We identify the following most relevant and recent
works: PairMiner [24] and PF-Miner [23]. RID [28] also
pairs functions; however, it focuses only on refcount-related
ones and uses simple string matching (e.g., *_inc/*_dec),
so we exclude it from the comparison. PF-Miner [23] first
employs string matching (e.g., new/delete and alloc/free)
to collect functions. Then, equipped with a mining algorithm,
it statistically pairs the functions that often show up pairwise
in the normal and error paths. After analyzing the C source
code of the Android kernel, PF-Miner identifies 546 paired
functions. PairMiner [24] shares similar approaches because
it is built on top of PF-Miner. PairMiner identifies 1023 paired
functions in the Linux kernel.
We compare HERO with these tools in how many func-
tion pairs are identified. Unfortunately, we cannot compare
precision values because neither tool provided such numbers.
Note that PF-Miner and PairMiner both employ simple min-
ing (i.e., statistical counting) to collect pairs, we believe they
inherently suffer from precision issues and could not support
custom functions. Table 3 presents the details of the compari-
son. Specifically, HERO is agnostic to types of function pairs
and supports custom functions. HERO also identifies signifi-
cantly more pairs. Even if we select the top 30% of ranked
function pairs, the number is significantly higher compared
to either PF-Miner or PairMiner. We attribute HERO’s effec-
tiveness to its delta-based pairing analysis, which is precise
and can support custom functions.
Evaluation against dependency-based pairing. WYSI-
WIB [22] employs data dependencies to pair alloc/dealloc
function pairs. To compare HERO to such pairing, we extend
the dependency analysis to all functions in the normal and
error paths. As a result, such pairing reports about 200% more
function pairs; however, we found the majority of them are
false positives (wrong pairs), disqualifying it for the DiEH
detection. This result shows that delta-based analysis can sig-
nificantly reduce false function pairs and make results more
precise.
7.3 Bug Detection
Based on the precision and recall trade-off shown in Figure 8,
we choose the top 43.2% of function pairs for detecting DiEH
bugs because it achieves a high precision (92.5%) and a rea-
sonably good recall (60.4%). We then apply HERO to three
target programs, the Linux kernel, the FreeBSD kernel, and
the OpenSSL library, with corresponding 3276, 94, and 123
function pairs detected.
Based on these function pairs, HERO finally identifies 234,
2, and 3 DiEH bugs from the Linux kernel, FreeBSD, and
OpenSSL library. The details of the identified bugs are shown
in Appendix A. Among these detected DiEH bugs, 72% are
caused by inadequate follower functions, 25% are caused
by incorrect-order follower functions, and 3% are caused
by redundant follower functions. Further, we found that the
drivers of the Linux kernel are buggier than its core kernel.
In the Linux kernel, the driver code accounts for 62% of the
whole code-base; however, 87.6% of the found DiEH bugs
come from the driver code, which means the bug density of
the driver code vs. the core kernel is 4.3 : 1. We believe
this is due to the following reasons: (1) drivers contain more
custom functions, which are harder to be analyzed by previous
static-analysis approaches; (2) many functions in drivers are
used to support outdated devices and thus infrequently used
or tested, and (3) compared to the core kernel, the drivers are
less tested because existing dynamic-analysis tools require
hardware devices or their emulation [4]. In the rest part of
this section, we will present the causes of false positives and
some interesting findings. For simplicity, we focus on the
Linux kernel because it is the largest and the most complex.
7.3.1 False-Positive Analysis
HERO in total reports 454 potential DiEH cases in the Linux
kernel, with 170 for incorrect-order, 40 for redundant, and
244 for inadequate DiEH cases. We manually check all these
cases and regard a case as a true bug if it meets both of the
following conditions: (1) the case is an actual DiEH case, and
(2) the case would introduce at least one security issue. We
confirmed 234 (thus, the false-positive rate is 48%) of them as
true positives, with 58, 7, and 169 for incorrect-order, redun-
dant, and inadequate DiEH bugs, respectively. To manually
confirm these bugs, three researchers spent about a total of
16 man-hours. We believe the precision is reasonably good
for static analysis–based detection against complex programs,
and the manual effort for the confirmation is very manageable.
Further, we patched and reported 230 bugs to the maintainers.
The remaining 4 cases are removed in the latest version of the
kernel. As of the submission of this paper, 125 of them have
been accepted, and 105 have not received a response yet. We
further analyzed the major causes of false positives.
First, we find that 23% of false positives are caused by
complex path conditions that were missed by our under-
constrained path-feasibility testing. We can mitigate these
false positives by collecting more constraints from the com-
plex path conditions.
Second, although some DiEH cases indeed exist, their im-
pacts are prevented by some security operations such as en-
forcing a NULL check for a released pointer. Such cases
contribute about 7% of false positives, and removing such
false positives requires understanding the security operations.
Third, our pairing analysis still misses the follower functions
for some leader functions. This causes 18% of false positives.
The remaining false positives are caused by other issues such
as the aliasing problem in the static analysis, or incorrect
detection of error paths.
2052    30th USENIX Security Symposium
USENIX Association
7.3.2 Maintainer Feedback
For example,
During the bug confirmation and reporting, we found that
function pairs are often used incorrectly. First, 8.2% of
DiEH bugs are introduced by previous patches that in-
correctly fixed error-handling bugs.
the
patch (6e5da6f7d824 [2]) in the Linux kernel fixed a DiEH
bug caused by inadequate follower function. However,
when this patch calls function pm_runtime_get_sync(), it
still misses pm_runtime_put() when the call of function
pm_runtime_get_sync() fails, which results in the bug.
Second, even experienced Linux maintainers are not fa-
miliar with some follower functions, particularly custom
ones.
For example, few maintainers were aware that
releases pointers P and P->kobj.
kobject_put(P->kobj)
These results are consistent with our previous findings in
§2.2.3—cleanup operations are common, complex, and diffi-
cult to get right.
7.4 Security Impact Analysis
We not only confirm DiEH bugs but also empirically deter-
mine the impact of confirmed bugs. The impact is based on
the involved variables and the contexts of each bug. Our de-
termination is conservative—if a case is too complicated to
analyze, we exclude it from the bugs. We reported the rest of
the bugs to maintainers.
Type of bugs
Refcount leak
Memory leak
Causes
Prop
85.8% IFL (75.6%),
IOF (24.4%)
IFL (77.3%),
IFO (22.7%)
9.2%
UAF/DF
Double unlock
1.7%
1.3%
RFL
RFL
CWE-ID [8]
CWE-911
CWE-401
CWE-416,
CWE-415
CWE-765
Table 4: Most common security impacts of bugs found by HERO.
CWE = common weakness enumeration. IOF = incorrect order
of follower function, IFL = Inadequate follower functions, RFL =
redundant follower function.
We summarize the impacts of the confirmed bugs in Table 4.
98.0% of the bugs would cause at least one of the security
impacts mentioned in the table. Specifically, 3.0% of DiEH
bugs would lead to use-after-free, double-free, or double-
unlock, and all of them are caused by redundant follower
functions. As we discussed in §2.2.5, these DiEH bugs can
lead to critical security issues like memory corruption, DoS,
privilege escalation.
Further, 85.8% of DiEH bugs would lead to refcount leak,
with 75.6% of them caused by inadequate DiEH and 24.4%
caused by incorrect-order DiEH. People often regard refcount
leaks as general bugs but not security-critical ones. However,
we argue that refcount leaks can also cause memory corrup-
tion. When a refcount field, especially the one with only 16
or less bits, is repeatedly incremented, it will finally overflow
to zero, triggering a free and finally causing a use-after-free.
As we discuss in §2.2.5, CVE-2016-0728 [30] is such an
example. Moreover, there are many examples of exploiting
refcount leaks for privilege escalation (e.g., CVE-2016-0728,
CVE-2014-2851) and DoS (e.g., CVE-2019-9857). DoS, like
crashing in the kernel, is security-critical for long-running
servers.
Also, 9.2% of DiEH bugs would lead to memory leaks, with
77.2% of them caused by inadequate DiEH and 22.7% caused
by incorrect-order DiEH. Memory leaks in the kernel can also
be critical because they may result in DoS of the whole system.
Assigned CVEs of kernel memory leaks include CVE-2020-
15393 [40], CVE-2019-8980 [38], CVE-2019-5023 [36].
Type of entry points
System calls
ioctl handlers
IRQ handlers
Total
Number of reachable bugs
180 (76.9%)
190 (81.2%)
185 (79.1%)
199 (85.0%)
Table 5: The numbers of DiEH bugs that can be triggered from
system calls, ioctl handlers, and IRQ handlers.
Triggerability analysis for detected bugs. To further un-
derstand the security impacts of bugs identified by HERO,
we also tested the triggerability of them. Automatically con-
firming the triggerability of kernel bugs is still considered a
challenging research problem. Dynamic analysis tools like
OS fuzzers [7, 49, 51] have a low false-positive rate but suffer
from performance issues and many false negatives. Therefore,
similar to previous works such as SID [55], this evaluation fo-
cuses on identifying triggerable call stacks from the adversary-
reachable entry points (e.g., system calls, ioctl handlers, and
IRQs handlers) to the functions containing DiEH bugs. More
details about the entry points are shown in Section VI.D of
the SID paper [55]. Specifically, we analyze all the call in-
structions in the Linux kernel and leverage the state-of-the-art
technique MLTA [25, 27] to handle the indirect calls, and
finally build a complete call graph of the Linux kernel. Based
on this call graph, given a vulnerable function that includes a
DiEH bug, we traverse every entry-point function and extract
the shortest path from each of them to the vulnerable function.
If there is no path between a vulnerable function to all the
entry points, we will mark the bug as non-reachable.
Table 5 shows the results of our triggerability analysis.
85.0% of DiEH bugs identified by HERO can be reached
from at least one of the entry points, which means that it is
possible for adversaries to intentionally trigger these bugs by
constructing a specific input. Among these cases, 76.9% of
them can be triggered through system calls, which means that
they are relatively easier to be triggered by attackers and thus
have a higher impact. The last column in Table 7 shows the
specific triggerability information for each bug.
USENIX Association
30th USENIX Security Symposium    2053
8 Discussion
Flow-sensitive vs. Path-sensitive. HERO is flow-sensitive
and partially path-sensitive. Being path-sensitive can signifi-
cantly improve the precision in both pairing and bug detection.
However, full path-sensitive analysis cannot scale to large pro-
grams such as OS kernel yet. To eliminate the infeasible paths,
§5.1 showed that HERO employed the symbolic summary
to scalably identify conflicting path conditions, and further
remove infeasible paths.
Generality.
In the evaluation, we applied HERO to both
kernels and a userspace program. The evaluation shows that
applying HERO to a new program does not require extra
manual effort. However, the precision of pairing analysis
and DiEH detection slightly varies on different programs. In
general, the detection precision for the Linux kernel is better
than it for the FreeBSD and the OpenSSL library. We believe
this is due to the reason that the error codes in the Linux
kernel are well defined and used. Thus, HERO can better
identify error paths and build the EHG.
HERO can be potentially extended also to analyze pro-
grams written in other languages or using other error-handling
mechanisms. HERO detects DiEH bugs based on two fac-
tors (1) capturing errors and (2) analyzing the error-handling
code. The logic of developers performing cleanups in error
handling is mainly independent of the languages. However,
factor (1) is dependent on the languages. To extend HERO,
we need to instruct it to identify the errors and error-capturing
mechanisms dependent on languages. For example, C++ typi-
cally uses the “try-catch” blocks, so HERO needs to further
recognize the corresponding patterns in LLVM IR.
Exploitability of detected bugs. To further explore the se-
curity impacts of identified DiEH bugs, we need to determine
the exploitability of these bugs. However, in this paper, we
focus on detecting DiEH bugs instead of exploiting them. We
believe that bug exploitation is a separate research topic and
is out of our scope. To exploit DiEH bugs, the key is to trigger
the corresponding errors, so that the error paths can be exe-
cuted, which has been demonstrated by the previous works
such as fault injection [44] and memory exhaustion [60].
Memory leak and refcount leak bugs can already cause the
DoS problem if they can be steadily triggered through these
techniques. For other DiEH bugs, after being triggered, adver-
saries can reuse existing attack techniques such as memory
collision attacks [56] to generate the exploits.
Suggestions for avoiding DiEH. Based on our interactions
with the kernel maintainers, we suggest several ways to avoid
DiEH bugs. First, program developers should try to separate
the cleanup operations from normal executions and handle the
errors uniformly with a standardized error-handling structure.
As shown in Figure 1, all the cleanup functions are called after
the jump target unreg_video_dev.In contrast, in some cases,
only parts of follower functions are used with a standardized
error-handling approach, like this example, but other follower
functions are called directly after the errors. This inconsistent
error-handling often makes the code hard to maintain and can
further lead to DiEH bugs. Second, API developers should
follow the programming convention and provide clear instruc-
tions. For example, [6] shows the source code of function
kobject_init_and_add(). In the latest version of the kernel,
the comments clearly emphasize that “If this function returns
an error, kobject_put() must be called to properly clean up
the memory associated with the object,” which, however, is
missed before v5.2 and further incur lots of API misuse errors.
This information can guide API users to correctly use this
API. Third, API users should read instructions to understand