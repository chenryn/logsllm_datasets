1947
Firmware
ADC PDC
ADC SW DMA
ADC Timer DMA
I2C TxRx DMA
SPI DMAC Slave
SPI Full DMA
SPI Full EX. DMA
SPI Half DMA
USART TxRx DMA
USART Full DMA
P2IM [s]
89.0
5.3
5.3
2.8
17.3
28.2
13.6
18.1
5.4
20.7
DICE [s]
94.1
5.3
5.4
2.8
17.7
28.9
15.1
18.7
5.5
21.6
Diff[%]
5.7
0.0
1.9
0.0
2.3
2.5
11.0
3.3
1.9
4.3
TABLE VI: Time needed for ﬁrmware execution to reach a ﬁxed point when
running on original P2IM (Col. 2) and DICE integrated on top of P2IM (Col.
3). This shows the overhead that DICE adds to P2IM.
Table V, among all the ﬁrmware tested, the emulators observed
35 pointer-like values written to the MMIO region that do
not conﬁgure DMA. DICE did not consider any of them as
transfer pointers, thus achieving a 0% false positive rate. This
is because, for the heuristics to consider a value written to
MMIO as a transfer pointer,
the value not only needs to be
in the narrow RAM range (i.e., pointer-like) but also needs
to be accompanied by another transfer pointer written to the
adjacent MMIO location. As an example, the TIMER1 counter
register of the PIC32MZ2048EF MCU is initialized with the
value 255 via an MMIO write operation. This value on the
MIPS M-class architecture is a valid RAM address (a pointer),
which is allocated to a global variable. DICE observed this
value, recognized it as a pointer to RAM. However, since
no other pointer was observed to be written to the adjacent
MMIO, DICE never considered this MMIO write as part of a
DMA conﬁguration. Among the 35 pointer-like values written
to MMIO, 6 were dereferenced/accessed by ﬁrmware. Since
they were not transfer pointers, DICE did not intercept the
memory accesses or infer the buffer sizes.
Hypothetically, if ﬁrmware reads from a memory address
that was falsely identiﬁed as a DMA channel, DICE may pro-
vide the ﬁrmware with analyzer-provided input (e.g., fuzzer-
generated data). This may in turn corrupt ﬁrmware execution.
However, in our experiments, no false positive occurred thanks
to the simple yet accurate heuristics.
Runtime overhead: The runtime overhead of DICE is fairly
low. It adds only 3.4% on average to the execution time
of the sample ﬁrmware. The main source of overhead is
the instrumentation required to identify the DMA transfer
size. This instrumentation affects every LOAD instruction. A
secondary source of overhead is the instrumentation capturing
the stream conﬁgurations. It only affects write operations on
the peripheral MMIO area in memory. Therefore, the overhead
of DICE is determined by the number of LOAD instructions
executed,
the number of streams conﬁgured, and the size
(number of bytes) of the buffers. Table VI illustrates the
overhead on 10 ﬁrmware selected from the entire set. These
ﬁrmware were selected because they run smoothly on P2IM
and execute all the code paths related to DMA.
Fig. 6: Distributions of numbers of peripherals, MMIO registers and DMA
stream conﬁgurations used in sample ﬁrmware (outliers marked by ◦).
All ﬁrmware access multiple and different peripherals, which shows their
complexity and diversity.
True DMA stream conﬁgurations
- DMA input channels
- DMA output channels
Buffer accessed (size inferred)
False DMA stream conﬁgurations
Buffer accessed (size inferred)
Observed by emulator
(ground truth)
52
37
15
22
Observed by emulator
(ground truth)
35
6
TP
DICE
45 (87%)
33 (89%)
12 (80%)
21 (95%)
FP
DICE
0 (0%)
0 (0%)
TABLE V: Accuracy of DMA stream conﬁguration detection: true positives
(upper table) and false positives (lower table). False DMA stream conﬁgura-
tions are pointer-like values written to MMIO that do not conﬁgure DMA.
true positives and false negatives. As shown in the upper
half of Table V, DICE correctly detected 45 out of 52 DMA
stream conﬁgurations. Among those detected, 33 are DMA
input channels and 12 are DMA output channels (the latter is
irrelevant to ﬁrmware analysis and thus their buffer access/size
is omitted). DICE missed 7 DMA stream conﬁgurations (false
negatives, 4 input and 3 output DMA channels) due to the pat-
tern limitation discussed in §V-B. There were 22 DMA buffers
accessed by the ﬁrmware during our tests. DICE detected
21 of them and correctly inferred their sizes. The undetected
buffer corresponds to one of the seven conﬁgurations missed
by DICE.
It is worth noting that ﬁrmware execution on the emulators
never accessed the DMA buffers created by 12 DMA stream
conﬁgurations correctly identiﬁed by DICE. This is due to the
limitation of P2IM and the PIC32 emulator. These emulators
neither prioritize nor recognize DMA-related code paths in
ﬁrmware. Without DMA buffers being accessed, DICE cannot
identify DMA transfer sizes. We further veriﬁed that, in all
the cases where the emulators executed the corresponding
DMA access code path, DICE successfully identiﬁed the DMA
transfer size.
False positive analysis: We instrumented the emulators to ﬁnd
pointer-like values written to MMIO during ﬁrmware execu-
tion. We then used the MCU data-sheets to select those that are
unrelated to DMA conﬁgurations. We refer to them as “false
DMA stream conﬁgurations” and use them as the ground truth
for evaluating false positives. As shown in the lower half of
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1948
4681012141618Peripherals20406080100120MMIO Registers01234DMA StreamsB. Fuzz-testing Real Firmware
In this experiment, we demonstrate that DICE can ef-
fectively support dynamic analysis on real-world ﬁrmware
that uses DMA. To this end, we fuzz-tested 7 real-world
ﬁrmware using DICE integrated with P2IM. DICE accurately
identiﬁed DMA input channels on all 7 ﬁrmware and found 5
previously unknown bugs (none of them were found by P2IM
alone). DICE supported fuzzing sessions for all ﬁrmware,
whereas P2IM alone failed to bootstrap a fuzzing session for
1 ﬁrmware. DICE also achieved a much higher code coverage
than P2IM, echoing the importance of DMA emulation and
support during dynamic analysis.
Experiment Setup: We selected 7 real-world ﬁrmware from
different sectors, ranging from industrial IoT to consumer
devices. These ﬁrmware represent diverse use cases of DMA,
such as data signal acquisition without CPU intervention and
high throughput data exchange. All these ﬁrmware contain
OS/system libraries (including scheduler, driver, interrupt ser-
vice routine) and application logic. As shown in Table VII,
they are based on various MCU models and multiple OSes
(i.e., FreeRTOS, Mbed OS, bare-metal). We brieﬂy describe
below the ﬁrmware functionality and security consequences of
its bugs:
Modbus: Modbus is a master-slave communication proto-
col that is widely used in commercial PLC (Programmable
Logic Controller) devices. This ﬁrmware is a highly-optimized
implementation of Modbus slave that uses DMA to receive
commands from Modbus master. As PLC devices normally
control critical industrial processes, bugs in this type of system
can lead to Stuxnet-like [43] attacks and cause physical
damage.
Guitar Pedal: This ﬁrmware includes the digital signal
processing (DSP) routines for creating musical effects in an
electric guitar. It also includes a graphical user interface (GUI)
for conﬁguring the effects. This ﬁrmware is a typical example
of mixed-signal (digital and analog) application, which uses
DMA to continuously sample analog channels at a ﬁxed rate.
Vulnerabilities in this ﬁrmware can crash the ﬁrmware or
produce unexpected sound effects that are harmful to human
hearing.
Soldering Station: This is a customized ﬁrmware for the
KSGER mini soldering station. It includes a PID (Propor-
tional–Integral–Derivative) temperature control routine and a
graphical user interface for conﬁguring and operating the de-
vice. The ﬁrmware uses DMA to read multiple ADC channels
continuously in circular mode. Vulnerabilities in this ﬁrmware
can destroy the heating element and cause injuries to operators.
Stepper Motor: This is the ﬁrmware for the stepper motor
controller in a CNC (Computer Numerical Control) machine.
CNC machines are widely used in 3D printers, drills, lathes,
etc. The ﬁrmware implements a stepper motor control routine,
a command parser, and a proprietary communication protocol.
It uses DMA to achieve high communication throughput and
control speed. Vulnerabilities in these devices can be exploited
to modify the motor speed or bypass the safety checks in the
CNC machine.
GPS Receiver: This ﬁrmware implements the GPS re-
ceiver communication protocol deﬁned by the National Marine
Electronics Association (NMEA) [13]. This ﬁrmware uses
DMA for serial communication. We discuss this ﬁrmware
as an example in §II. Vulnerabilities in this ﬁrmware can
be exploited to manipulate navigation, and in turn, control
autonomous or human-operated vehicles.
MIDI Synthesizer: This ﬁrmware implements the MIDI
protocol and controls the synthesizer operation. It processes
stereo audio inputs through the WM8778 audio codec and
digital signal processing routines, and outputs audio to external
ampliﬁers. It uses DMA to receive and parse MIDI messages
with low latency and overhead. Vulnerabilities in this ﬁrmware
can crash the ﬁrmware and produce output signals that can
overcharge the ampliﬁers and damage the electronic circuit of
the instrument.
Oscilloscope: This is a minimal oscilloscope that includes
a touchscreen as the user interface and supports PC commu-
nication for data acquisition. This ﬁrmware uses DMA for
continuous and fast sampling of electrical signals through
ADC. Vulnerabilities in this ﬁrmware can crash the system,
corrupt the data acquired and present false information to the
user.
We use unmodiﬁed AFL [45] as our fuzzer (i.e., generating
DMA and other ﬁrmware input) and fuzz-tested all ﬁrmware
using DICE on P2IM. We launched the fuzzer with random
seed input and fuzz-tested each ﬁrmware for 48 hours. As
pointed out by [30], memory corruption errors are less likely
to crash the MCU ﬁrmware than computer programs, which
causes fuzzer to miss some bugs after triggering them. To
mitigate this problem, we used the same simple memory error
detector (or sanitizer) described in [10]. It grants read+execute
permission to Flash, read+write permission to RAM and the
peripheral MMIO region, and no permission to the rest of
memory space. This simple detector allows for detection
of access violations that cross region boundaries, but not
those within a memory region. Besides, we implemented a
more ﬁne-grained error detector for buffer over/under-ﬂow
detection. We inserted red-zones before and after buffers at
compile time. Accesses to red-zones will crash the ﬁrmware
execution. Although red-zones make bugs more visible, they
are not required to launch fuzzing. In other words, ﬁrmware
binary can be fuzz-tested “as is” without re-compilation. We
note that an advanced memory sanitizer may help detect more
bugs in our experiment, but designing such a sanitizer is out
of the scope of this paper.
Fuzzing Statistics: For all tested ﬁrmware, DICE was able
to automatically and completely identify DMA input channels
(transfer pointer + transfer size), and feed fuzzer-generated
input
to DMA buffers through RAM hooks. We did not
observe any falsely identiﬁed DMA input channels (i.e., no
false positives). On the other hand, P2IM alone was able to
fuzz test only 6 out of 7 ﬁrmware. It failed to fuzz test MIDI
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1949
Firmware
Modbus
Guitar Pedal
Soldering Station
Stepper Motor
GPS Receiver
MIDI Synthesizer
Oscilloscope
OS
MCU
STM32F303
FreeRTOS
STM32F303 Mbed OS
Baremetal
STM32F103
STM32F466
Baremetal
Baremetal
STM32F103
Baremetal
STM32F429
STM32F103
Arduino
Size
1.3MB
2.4MB
1.4MB
1.4MB
798KB
0.7MB
0.7MB
Source
https://github.com/DoHelloWorld/stm32f3 Modbus Slave UART-DMA-FreeRTOS
https://github.com/Guitarman9119/Nucleo Guitar Effects Pedal
https://github.com/PTDreamer/stm32 soldering iron controller
https://github.com/omuzychko/StepperHub
https://github.com/MaJerle/GPS NMEA parser,
https://github.com/MaJerle/STM32 USART DMA
https://github.com/mondaugen/stm32-codec-midi-mmdsp-test
https://github.com/pingumacpenguin/STM32-O-Scope
TABLE VII: Real-world Firmware fuzz-tested with P2IM and DICE
Synthesizer ﬁrmware because the ﬁrmware only consumes
inputs through DMA input channels that are not supported
by P2IM.
As shown in Table VIII, DICE outperforms P2IM on 5 out
of 7 ﬁrmware in terms of fuzzing coverage. DICE improves
the basic block coverage by up to 30.4%, and increase the
number of paths triggering new execution patterns by up to
79 times.
The improvement in path coverage is much more signiﬁcant
than basic block coverage, for two reasons. First, a larger
number of basic blocks in ﬁrmware are executed during the