## Page 153
本 hack 介绍了内核中常见的汇编指令ud2、sti、cli。
总结
允许中断。
cli指令通过 local_irq_disable()禁止中断，而 sti指令通过 Local_irq_ enable()
static inline void raw_local_irq_enable(void)
static inline void raw_local_irq_disable(void)
[include/asm-i386/irqflags.h] 
#define local_ira_disable()\
#define local_irq_enable()\
#endif
# define trace_hardirqs_off()
# define trace_hardirqs_on()
#else
#ifdef CONFIG_TRACE_IRQFLAGS
*#
[include/linux/irqflags.h] 
--asm_ _volatile_("sti" : : : “"memory"); -—
do { raw_local_irq disable(); trace_hardirqs_off(); } while (0)
do { trace_hardirqs_on(); raw_local_irqenable(); } while (0)
return ret;
preempt_enable();
local_irq_enable();
func(info);
local_irq disable();-
ret = smp_call_function(func, info, retry, wait);
preempt_disable();
www.TopSage.com
do{} while (0)
do {} while (0)
HACK#24 内核独有的汇编指令（之一）
-②
?
?
?
1135
---
## Page 154
141>
进程在内核中占据了一定的栈空间,而栈空间的开头就是 thread_info 结构。另外，
task_struct 结构和 thread_info 结构
在内核的崩溃转储中分析 bug，大多数情况下必须阅读汇编代码。由于 current
运行的进程的 task_struct 结构。所谓 task_struct 结构，就是内核内部管理进程
内核栈包含2页，大小为 8KB，从后往前使用。4KB 栈的话就只有1页。
task_struct 结构和 thread_info 结构互相拥有指向对方的指针。
内核 2.6 与内核 2.4 不同，管理进程的 task_struct 结构位于 SLAB 中。
被频繁使用，在对照内核源代码和汇编代码时，以 current为标志就很方便。
状态的数据结构。
码中，该处理被写成 current宏。内核代码上出现 current 时，就表示要获取正在
在内核处理中，经常出现获取现在运行进程的 task_struct 结构的处理。在内核代
什么是current
#25
MACIN
参考文献
136|第3章内核调试的准备
http://download.intel.com/jp/developer/jpdoc/IA32_Arh_Dev_Man_ Vol2B_i.pdf
卷B：命令·N-Z
IA中
http://download.intel.com/jp/developer/jpdoc/IA32_Arh_Dev_Man_Vol2A_i.pdf
卷A：命令A-M
1本 hack 从 x86 架构的汇编层面讲述内核中频繁出现的 current 宏。
内核2.4中不存在thread_info结构,内核栈的开头保存的是task_struct 结构。
内核独有的汇编指令 (之二)
www.TopSage.com
一大岩尚宏
---
## Page 155
此，寻找current时，只需查找对内核栈执行逻辑与操作（AND）的地方即可。
（AND）。清除栈指针的低13位，就能获取8KB的内核栈空间的开头地址。因
构的指针。这步处理的关键之处是将栈指针esp与Oxffffe00执行逻辑与操作
首先用当前栈指针esp获取thread_info结构的指针，
2.6.19以前的内核处理如下。
i386:32位
下的32位（i386）和64位（x86_64）版本。
不同架构、不同内核版本的current 获取处理也不相同，这里分别说明x86架构
下面介绍一下current获取处理的汇编代码的阅读方法。
current获取处理的详细内容
图3-6task_struct结构和thread_info结构
c010162f:
c010162d:
c0101628:
8ble
be00e0ffff
9
thread_info
thread_info
任务结构
内核栈
task
：
www.TopSage.com
mov
mov
(%esi),%ebx
Sesp,%esi
$0xffffe000,%esi
并从中获取task_struct结
SLAB
142
---
## Page 156
143
在 PDA 空间的开头，因此段选择器 gs 和偏移量 O 的访问，就是 current 的处理
参考文献
所在。
 利用段选择器 gs 和偏移量 来访问。由于当前进程的 task_struct 结构指针保存
个频繁使用的命令，追踪内核代码时非常有用。
本 hack讲述了Linux 内核中常见的 current在 x86 架构下的汇编代码。current 是
总结
因此利用 gs 段寄存器访问 PDA 即可获得 current。
x86_64:64位
percpu空间，因此寻找通过段选择器 fs 访问 percpu空间的处理即可找到。
利用段选择器 fs 和偏移量 0xc169f000 进行访问。2.6.20 之后 current 指针位于
访问 percpu空间。2.6.20之后的处理如下。
从 2.6.20 开始，percpu空间中保存了指向 current 的指针，因此利用段选择器 fs 
138|第3章内核调试的准备
ffffffff8010cfe6:
ffffffff8010cfdf:
c1002173:
http://www.intel.com/products/processor/manuals/index.htm
 Intel@ 64 and IA-32 Architectures Software Developer's Manuals
尽管段选择器不同，但与 2.6.20 之后的 i386 中的处理过程是很相似的。
ffffffff8100918d:
ffffffff81009186:
统一到percpu中。
开发版内核（预定合并到2.6.30）上，x86_64专用的PDA空间已被删除，准备
64 8b 35 00 f0 69 cl mov gfs:0xc169f000,%esi
65 48 8b 3c 25 00 00 mov gs:0x0,%rdi
www.TopSage.com
65 48 8b 04 25 00 b0 mov %gs:0xb000,%rax
—-岛本裕志
---
## Page 157
注1：
下面是个发生 segmentation fault 的例子。其中 eval("1+"*10000+"1")程序如图 4-1
问，(3）栈溢出导致访问超出了已分配的地址空间等。
发生的情况包括：(1)NULL指针访问，(2）指针被破坏等原因导致的非法地址访
应用程序执行了非法访问内存等操作后，就会发生 SIGSEGV异常而停止。SIGSEGV
#26
所示。
此处讲解由于栈溢出而导致SIGSEGV发生的情况下的调试方法。
HACK
等，本章将通过这些各种各样的案例来介绍调试方法。
watch point 检测非法内存访问、malloc()/free()引发的故障、应用程序停止响应
（SIGSEGV）、backtrace 无法正确显示、由于数组非法访问导致栈被破坏、利用
本章讲述在实践中如何调试用户应用程序。栈溢出而导致 segmentation fault 
( + 900091 * +L)1ena, a- 8'TAqn $
Segmentation fault
segmentation fault 通常被翻译成“段错误”，但这种译法的含义并不明确，再
由于栈溢出导致segmentationfault的调试。
发生SIGSEGV，应用程序异常停止
uLu n+Ln " n+Ln u+Lu u+Lu u+Ln
www.TopSage.com
应用程序调试实践
hack #26~#32
第4章
一译者注
Copyright (C) 2008 Free Software Foundation, Inc.
GNU gdb 6.8-debian
$ gdb ruby1.8 core
(no debugging symbols found)
中间省略
core
$ ls core
Segmentation fault (core dumped)
(m., + 00000t * +Lu)neAa, a- 8'tAqnu $
$ ulimit -c unlimited
New process 24488]
第4章应用程序调试实践
一起，然后再连接"1"这个字符串，最后将结果作为 Ruby 程序来计算（eval）。
eval("1+”*10000+"1)这个表达式的意思是，将100000个"1+"字符串连接在
"1+1+1+1+.1+1"
将上述字符串作为 Ruby 程序 eval（计算）
100008 个字符串连接
www.TopSage.com
---
## Page 159
用 info signal 命令可以查看 gdb 能够处理的信号列表。
SIGSEGV信号会使程序在相应位置自动停止。
可以看到应用程序引发了 SIGSEGV。使用 gdb 时，收到信号就会执行预定的动作，
然后用 gdb 启动。
接下来用 gdb跟踪一下源代码。首先，要用 gcc 的-g选项编译应用程序（ruby),
源代码层面的调试
疑，递归函数调用产生栈溢出，导致应用程序异常结束。
仔细观察栈顿信息就能发现，函数被 θxb7e22f3a这个地址调用多次。因此可以怀
命令格式为 bt。
明函数被递归调用了。其实，只需显示开头的几条即可，本例中显示开头10 条。
通过bt（backtrace）命令可以获得栈帧信息。若执行后显示大量的栈帧信息，这表
iseq_ compile_each (iseq=0x8efa9c0, ret=0xbf64b138, node-0x931dd74, poped=0) at compile.c:2883
Program received signal SIGSEGV, Segmentation fault.
Starting program: /home/hyoshiok/work/ruby_trunk/ruby/ruby -e 'eval("1+" * 10000 + "1")'
#9 0xb7e2f3a in ?? () from /usr/lib/librubyl.8.so.1.8
紫
[Switching to Thread 0xb7d3d6b0 (LWP 24646)]
[New Thread 0xb7f24b90 (LwP 24649)]
[New Thread 0xb7d3d6b0 (LWP 24646)]
[Thread debugging using libthread _db enabled] 
:(nL + 000001 * +)leAa, a- unu (qp6)
#
#0 0xb7e22cb7 in ?? () from /usr/lib/librubyl.8.so.1.8
(gdb) bt 10
Oxb7e22f3a in ?? () from /usr/lib/librubyl.8.so.1.8
0xb7e22f3a in
0xb7e22f3a in ?? () from /usr/lib/librubyl.8.so.1.8
0xb7e22f3a in ?? () from /usr/lib/librubyl.8.so.1.8
0xb7e22f3a in ?7 () from /usr/lib/librubyl.8.so.1.8
0xb7e22f3a in ?? () from /usr/lib/libruby1.8.so.1.8
0xb7e22f3a in ?? () from /usr/lib/librubyl.8.so.1.8
n ?? () from /usr/lib/libruby1.8.so.1.8
www.TopSage.com
HACK#26 发生 SIGSEGV, 应用程序异常停止 1 141
147
---
## Page 160
148
可以看出，函数被0x0811154d这个地址反复调用。通过up命令，将栈帧向上回溯
用bt命令获取栈帧信息。取5个就够了。
停止位置位于源代码下面显示的地方。用 emacs 启动 gdb的话就能自动显示出来，
十分方便。
142|第4章应用程序调试实践
(gdb)up
(More stack frames follow...)
poped=0)at compile.c:3954
#40x0811154din iseq_compile_each
poped=0)atcompile.c:3954
#20x0811154diniseq_compile_each（iseq=0x8efa9c0,ret=0xbf64b3b8,node=0x931dcfc
poped=0)atcompile.c:3954
#10x0811154d in iseq_compile_each （iseq=0x8efa9c0,ret=0xbf64b278,node=0x931dd38
compile.c:2883
#iseq_compile_each（iseq=0x8efa9c0,ret=0xbf64b138,node=0x931dd74,poped=0)at
（gdb）bt5
{/*在这里停止*/
iseq_compilachrb_iseqt*iseq,LINKANCHOR*ret,NODE*node，intpoped）
staticint
poped:This node will be poped
compile each node
/**
returnCOMPILE_OK;
if (!poped）{
node:Ruby compiled node
self:InstructionSequence
ADD_INSN(ret,iseq->compile_data->last_line, putnil);
if（node=0）{
enum node_type type;
debugs("node:
NODE_NIL（implicit)\n");
www.TopSage.com
h（iseq=0x8efa9c0,ret=0xbf64b638,node=0x931dc84
---
## Page 161
需要使用备用栈，相应的函数为 sigaltstack(2)。
信号处理程序所需的栈都无法保证，所以不能这样处理。因此，为捕获栈溢出，
导致 SIGSEGV 发生的情况下，栈空间已经溢出，已经出现了非法访问，就连启动
一般而言，捕获到信号后应当准备信号处理程序并执行某种操作。但是，栈溢出
栈溢出导致SIGSEGV的应对方法
通过分析源代码可以得知，本例中反复递归调用函数导致了栈溢出。
函数。
从源代码可以看出，cOMPILE的宏定义如下所示，递归调用了iseq_compile_each()
该地址的源代码为下述 COMPILE()的位置，
#define COMPILE(anchor, desc, node) \
/* compile node */
poped=0) at compile.c:3954
#1 0x0811154d in iseq_compile_each (iseq=0x8efa9c0, ret=oxbf64b278, node=0x931dd38,
(debug_compile("= “ desc "\n", \
if (nd_type(node) != NODE_ VCALL) {
if (type = NODE_CALL) {
/* reciever */
#endif
I* args */ 
else if (type == NODE_FCALL I1 type == NODE_VCALL) {
 argc = setup_args(iseg, args, node->nd args, &flag);
 ADD_CALL_RECEIVER(recV, nd_line(node));
COMPILE(recv，"recv"， node->nd_recv); /* 从这里调用 */
break;
else {
ADD_LABEL(ret, label);
iseq_ compile_each(iseq, anchor, node, 0)))
www.TopSage.com
HACK#26发生 SIGSEGV，应用程序异常停止丨143
150
149
---
## Page 162
15
man page 中的例子如下所示。
参考这段程序，可以写出以下的补丁。
144 1
@@ -410,6 +414,28 @d
@a -47,6 +47,10 @@