### Policy Languages and Privacy Languages

Policy languages, such as RT [28], are suitable for privacy languages. However, our current language faces a common limitation found in many policy languages. For example, consider California's SB 1386, which requires businesses to notify individuals if their personal information is inappropriately disclosed. This provision cannot be accurately expressed in our language because it only takes effect when an agent violates norms. In our model, agents never violate norms, and thus, notifications would never be required. However, such notifications are common in California. To address this, we plan to extend our model to account for agents who occasionally (perhaps unintentionally) violate norms. We anticipate that this will require modifications to the current logic.

### Acknowledgments

We thank A. Bradley, C. Sánchez, and M. Slanina for their valuable discussions on LTL. This work was partially supported by the NSF Cybertrust Program through the PORTIA project and the NSF Science and Technology Center TRUST.

### References

[1] M. S. Ackerman, L. F. Cranor, and J. Reagle. "Privacy in e-commerce: examining user scenarios and privacy preferences." In Proceedings of the 1st ACM Conference on Electronic Commerce, pages 1–8. ACM Press, 1999.

[2] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu. "An XPath-based preference language for P3P." In Proceedings of the Twelfth International Conference on World Wide Web, pages 629–639. ACM Press, 2003.

[3] R. Agrawal, R. Srikant, and D. Thomas. "Privacy preserving OLAP." In SIGMOD '05: Proceedings of the 2005 ACM SIGMOD international conference on Management of data, pages 251–262, New York, NY, USA, 2005. ACM Press.

[4] A. Anderson. "Key differences between XACML and EPAL." Ottawa new challenges for access control, 2005.

[5] A. Anderson, A. Nadalin, B. Parducci, D. Engovatov, E. Coyne, F. Siebenlist, H. Lockhart, M. McIntosh, M. Kudo, P. Humenn, R. Jacobson, S. Proctor, S. Godik, S. Anderson, and T. Moses. "Extensible Access Control Markup Language (XACML) version 2.0," 2004.

[6] M. Backes, M. Dürmuth, and R. Steinwandt. "An algebra for composing enterprise privacy policies." In European Symposium on Research in Computer Security (ESORICS), volume 3193 of LNCS. Springer–Verlag, 2004.

[7] M. Backes, G. Karjoth, W. Bagga, and M. Schunter. "Efficient comparison of enterprise privacy policies." In Proceedings of the 2004 ACM Symposium on Applied Computing, pages 375–382. ACM Press, 2004.

[8] M. Backes, B. Pfitzmann, and M. Schunter. "A toolkit for managing enterprise privacy policies." In European Symposium on Research in Computer Security (ESORICS), volume 2808 of LNCS, pages 101–119. Springer–Verlag, 2003.

[9] A. Barth and J. C. Mitchell. "Enterprise privacy promises and enforcement." In WITS '05: Proceedings of the 2005 Workshop on Issues in the Theory of Security, pages 58–66, New York, NY, USA, 2005. ACM Press.

[10] A. Barth, J. C. Mitchell, and J. Rosenstein. "Conflict and combination in privacy policy languages." In Proceedings of the 2004 Workshop on Privacy in the Electronic Society. ACM Press, 2004.

[11] M. Y. Becker and P. Sewell. "Cassandra: Flexible trust management, applied to electronic health records." In CSFW '04: Proceedings of the 17th IEEE Computer Security Foundations Workshop (CSFW'04), page 139, Washington, DC, USA, 2004. IEEE Computer Society.

[12] M. Bishop. "Computer Security: Art and Science." Addison Wesley Professional, 2003.

[13] S. Byers, L. F. Cranor, and D. Kormann. "Automated analysis of P3P-enabled web sites." In Proceedings of the 5th International Conference on Electronic Commerce, pages 326–338. ACM Press, 2003.

[14] J. Crampton. "On permissions, inheritance and role hierarchies." In Proceedings of the 10th ACM Conference on Computer and Communication Security, pages 85–92. ACM Press, 2003.

[15] L. F. Cranor. "Web Privacy with P3P." O’Reilly and Associates, Inc., 2002.

[16] L. F. Cranor, M. Langheinrich, M. Marchiori, M. Presler-Marshall, and J. Reagle. "The Platform for Privacy Preferences 1.0 (P3P1.0) Specification." http://www.w3.org/TR/P3P/, 2002.

[17] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. "The Ponder policy specification language." In POLICY '01: Proceedings of the International Workshop on Policies for Distributed Systems and Networks, pages 18–38, London, UK, 2001. Springer-Verlag.

[18] S. Demri and P. Schnoebelen. "The complexity of propositional linear temporal logics in simple cases." In Proceedings of the 15th Annual Symposium on Theoretical Aspects of Computer Science (STACS'98), volume 1373 of LNCS. Springer–Verlag, 1998.

[19] J. DeTreville. "Binder, a logic-based security language." In SP '02: Proceedings of the 2002 IEEE Symposium on Security and Privacy, page 105, Washington, DC, USA, 2002. IEEE Computer Society.

[20] C. Dwork and K. Nissim. "Privacy-preserving datamining on vertically partitioned databases." In CRYPTO 2004: 24th Annual International Cryptology Conference, volume 3152 of LNCS, pages 528–544. Springer–Verlag, 2004.

### Temporal Logic Syntax and Semantics

#### Syntax
Formulas free of temporal modalities refer to single states in the trace history of the agent world. Our sorts are \( P \), \( T \), \( M \), \( R \), and \( C \) (denoting agents, attributes, messages, roles, and contexts), with carriers \( P \), \( T \), \( M \), \( R \), and \( C \), respectively. Our relations are as follows:

- \( \text{send} : P \times P \times M \)
- \( \text{inrole} : P \times R \)
- \( \in : T \times T \)
- \( \text{contains} : M \times P \times T \)
- \( \text{incontext} : P \times C \)

Intuitively:
- \( \text{send}(p1, p2, m) \) holds if agent \( p1 \) just sent message \( m \) to agent \( p2 \).
- \( \text{contains}(m, q, t) \) holds if message \( m \) contains the value of attribute \( t \) of agent \( q \).
- \( \text{inrole}(p, r) \) holds if agent \( p \) is active in role \( r \).
- \( \text{incontext}(p, c) \) holds if agent \( p \) is active in a role of context \( c \).
- \( t \in t' \) holds if attribute \( t \) can be computed from (is a component of) attribute \( t' \).

To generate the syntax of the logic, we use a sort assignment \( \Gamma \) that records the sorts of variables bound by quantifiers. The recursive definition ensures that variables are used only as permitted by their sort. Formally, the set of terms \( \text{Terms}_\tau(\Gamma) \) of sort \( \tau \) under sort assignment \( \Gamma \) is generated as follows:

- \( p \in \text{Terms}_P(\Gamma) \)
- \( m \in \text{Terms}_M(\Gamma) \)
- \( c \in \text{Terms}_C(\Gamma) \)
- \( t \in \text{Terms}_T(\Gamma) \)
- \( r \in \text{Terms}_R(\Gamma) \)
- \( x \in \text{Terms}_\tau(\Gamma) \) for all \( p \in P \), \( t \in T \), \( m \in M \), \( r \in R \), \( c \in C \), and \( x : \tau \in \Gamma \).

Formulas for sort assignment \( \Gamma \) are generated using the following grammar:

\[ \phi_\Gamma ::= \text{send}(p1, p2, m) \mid \text{contains}(m, q, t) \mid \text{inrole}(p, r) \mid \text{incontext}(p, c) \mid t \in t' \mid \phi_\Gamma \land \phi_\Gamma \mid \neg \phi_\Gamma \mid \phi_\Gamma U \phi_\Gamma \mid \phi_\Gamma S \phi_\Gamma \mid \phi_\Gamma \mid \exists x : \tau. \phi_{\Gamma'} \]

where \( p1, p2, q \in \text{Terms}_P(\Gamma) \), \( m \in \text{Terms}_M(\Gamma) \), \( t, t' \in \text{Terms}_T(\Gamma) \), \( r \in \text{Terms}_R(\Gamma) \), \( c \in \text{Terms}_C(\Gamma) \), \( x \) is a variable, \( \tau \) is a sort, and \( \Gamma' \) is the sort assignment that agrees with \( \Gamma \) on all variables except \( x \), to which \( \Gamma' \) assigns sort \( \tau \). We also include equality, defined in the usual manner.

#### Notation
To simplify notation, we use the following standard symbols:

- \( \phi_1 \lor \phi_2 \equiv \neg (\neg \phi_1 \land \neg \phi_2) \)
- \( \phi_1 \rightarrow \phi_2 \equiv \neg \phi_1 \lor \phi_2 \)
- \( \phi \equiv \neg \neg \phi \)
- \( \phi \equiv \neg \neg \phi \)
- \( \phi \equiv \Diamond \phi \)
- \( \phi \equiv \Box \phi \)
- \( \phi_1 B \phi_2 \equiv \phi_1 S \phi_2 \lor \phi_1 \)
- \( \phi_1 W \phi_2 \equiv \phi_1 U \phi_2 \lor \phi_1 \)
- \( \forall x : \tau. \phi \equiv \neg \exists x : \tau. \neg \phi \)

The formula \( \Diamond \phi \) is read "eventually \( \phi \)," indicating that \( \phi \) will eventually hold. Its dual modality \( \Box \phi \) is read "henceforth." The modalities \( \Diamond \) and \( \Box \) are the past forms of \( U \) and \( S \). We often write \( \sigma \models \phi \) in place of \( \sigma, 0, \eta \models \phi \) when \( \phi \) has no free variables (and thus does not depend on \( \eta \)).

#### Semantics
An environment is a function \( \eta \) from variables to \( P \cup T \cup M \cup R \cup C \). We write \( \eta \models \Gamma \) if, for all \( x : \tau \in \Gamma \), \( \eta(x) \in A_\tau \), where \( A_\tau \) is the carrier for sort \( \tau \). If \( x \in \text{Terms}_\tau(\Gamma) \) and \( \eta \models \Gamma \),

\[ [[x]]_\eta = \begin{cases} 
\eta(x) & \text{if } x : \tau \in \Gamma \\
x & \text{otherwise}
\end{cases} \]

For all infinite traces \( \sigma = (\kappa_0, \rho_0, a_0), (\kappa_1, \rho_1, a_1), \ldots \) and all environments \( \eta \models \Gamma \) such that \( p1, p2, q \in \text{Terms}_P(\Gamma) \), \( t, t' \in \text{Terms}_T(\Gamma) \), \( m \in \text{Terms}_M(\Gamma) \), \( r \in \text{Terms}_R(\Gamma) \), and \( c \in \text{Terms}_C(\Gamma) \),

- \( \sigma, i, \eta \models \text{send}(p1, p2, m) \) if and only if \( a_i = ([[p1]]_\eta, [[p2]]_\eta, [[m]]_\eta) \)
- \( \sigma, i, \eta \models \text{contains}(m, q, t) \) if and only if \( ([[q]]_\eta, [[t]]_\eta) \in \text{content}([[m]]_\eta) \)
- \( \sigma, i, \eta \models \text{inrole}(p, r) \) if and only if \( ([[p]]_\eta, [[r]]_\eta) \in \rho_i \)
- \( \sigma, i, \eta \models \text{incontext}(p, c) \) if and only if there exists \( r \in [[c]]_\eta \) such that \( ([[p]]_\eta, r) \in \rho_i \)
- \( \sigma, i, \eta \models t \in t' \) if and only if \( (\{[[t']]_\eta\}, [[t]]_\eta) \) is a computation rule

We extend \( \models \) to formulas in the usual manner:

- \( \sigma, i, \eta \models \phi_1 \land \phi_2 \) if and only if \( \sigma, i, \eta \models \phi_1 \) and \( \sigma, i, \eta \models \phi_2 \)
- \( \sigma, i, \eta \models \neg \phi \) if and only if \( \sigma, i, \eta \not\models \phi \)
- \( \sigma, i, \eta \models \phi_1 U \phi_2 \) if and only if there exists \( k \ge i \) such that \( \sigma, k, \eta \models \phi_2 \) and for all \( j \) with \( i \le j < k \), \( \sigma, j, \eta \models \phi_1 \)
- \( \sigma, i, \eta \models \phi \) if and only if \( \sigma, i + 1, \eta \models \phi \)
- \( \sigma, i, \eta \models \exists x : \tau. \phi \) if and only if there exists \( a \in A_\tau \) such that \( \sigma, i, \eta[x \to a] \models \phi \)

Here, \( A_\tau \) is the carrier of sort \( \tau \), and \( \eta[x \to a] \) is the environment that agrees with \( \eta \) on all variables except \( x \), where \( \eta[x \to a] \) takes on value \( a \).