### Input Code
    function assert(holds, message) {
      if (!holds) {
        throw new Error(message || `Assertion does not hold`);
      }
    }
    class A {}
    class FromA extends A {
      constructor(...args) {
        super(...args)
        assert(this.constructor.name === `FromA`, `the constructor of FromA should be "FromA" and is ${this.constructor.name}`);
      }
    }
    class FromError extends Error {
      constructor(...args) {
        super(...args)
        assert(this.constructor.name === `FromError`, `the constructor of FromError should be "FromError" and is ${this.constructor.name}`);
      }
    }
    const a = new FromA();
    const e = new FromError();
REPL Link
### Babel Configuration (.babelrc, package.json, cli command)
    {
      "presets": [
        "es2015"
      ]
    }
### Expected Behavior
When extending from `Error`, the new class's `this.constructor.name` should be
the new class's name.
### Current Behavior
When extending from `Error`, the new class's `this.constructor.name` is
`Error`
### Context
I'm currently using https://github.com/ianwremmel/extend-error (which has its
own set of issues) to create subclassed Errors. Stringifying with the error
name is very helpful for a debug process (in particular, subclassing for each
http response code). In order to make that work, something like
    class Exception extends Error {
      constructor(...args) {
        super(...args)
        this.name = `Exception`
      }
    }
    console.log(new Exception(`blarg`));
will produce `[Exception: blarg]`. Ideally, I would be able to use `this.name
= this.constructor.name` instead of `this.name = \`Exception``.
### Your Environment
I've mostly been debugging this in the repl, but my local environment is:
software | version  
---|---  
Babel | 6.22.1  
node | 7.2.0  
npm | 3.10.9  
Operating System | macOs Sierra