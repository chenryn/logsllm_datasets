-   集群的异常值总和
-   异常的KPI数目
-   集群异常机器数量占据总数量的比例等
选取电力信息系统的关键业务指标进行分析，先选取3个月到3年的历史业务日志，通过平台提取出日志中的业务交易量的时间趋势，利用机器学习能力对指标趋势进行训练，通过训练后，自动选择最优算法进行实时监测，如果发现在历史同一周期的数值与当前数值变化趋势波动差别较大，则自动告警，以达到周期性指标异常自动发现的效果，提升业务趋势异常预警能力，尽可能在客户发现异常之前就观察到可能异常变化趋势，提前处理提升客户使用体验。
![](media/image31.png){width="8.466924759405074in"
height="4.3981157042869645in"}
图 11 训练分析效果图
## 4.4 日志异常模式识别方法
![](media/image32.jpeg){width="5.502777777777778in"
height="4.002083333333333in"}
业务日志往往比较复杂，普通的ERROR,WARN,Exception
关键字告警无法做到全面覆盖异常，靠人工查看代码是一个费时费力的工作，需要有一种更智能，快捷有效的方式，自动识别异常日志，实现异常日志模式，模式占比异常的自动识别和告警，提升故障治愈效率。
![IMG_256](media/image33.jpeg){width="0.3333333333333333in"
height="0.3333333333333333in"}日志异常模式识别示意图如下：
![](media/image34.png){width="6.008333333333334in"
height="3.0340277777777778in"}
图 12 日志异常模式识别流程图
4.4.1 日志模式的形成
一条日志是由两部分组成的：固定部分和参数部分。固定部分是不变的模式信息，参数部分是根据系统的运行状态实时记录的信息。![](media/image35.png){width="5.495138888888889in"
height="4.104166666666667in"}
图 13 日志模式识别工作流程图
### 4.4.2 日志的预处理
1.  实体识别
在最开始，我们拿到的日志数据是日志文档，它所能分割的最小单元是行，因为在没有先验知识的前提下，每一条日志就是一个普通的字符串。我们需要预定一些规则对日志进行拆分，使它映射为一个能表达日志内容的语义序列。这个过程我们称之为实体识别，或者简单称为分词。
最基本的分词规则就是以空格切分（这是基于大部分的日志是英文书写的前提之下，中文日志分词则可能需要更多的语言处理知识）。空格分词已经基本能涵盖大部分实体识别的情况，然而这是远远不够的。例如英文的标点符号是和每一句话的最后一个词的尾部紧密贴合的，空格分词导致标点符号不能单独分出来；但是简单添加标点符号单独拆分的规则又会导致IPv4地址作为一个整体被拆分成四个数字和三个英文句点，丧失了其作为一个基本语义单元的意义。所以要完成实体识别需要预先定义日志中常见的实体正则，比如上文提到的IP地址，比如时间戳、JSON、URL等等。实体识别是正确提炼日志模式的前提。
2.  实体过滤
完成实体识别后，日志被映射为一个实体向量。然而，其中的一些实体有可能对于学习日志模式是没有作用的。比如标点符号停顿词，实际上并没有携带太多日志内容的信息，如果通过仔细观察发现它们对日志的模式学习没有起到关键作用，我们可以选择过滤掉这些冗余信息。这样做有三个好处：第一，提高模式识别准确度；第二，减小模式的复杂程度；第三；提高日志模式识别的效率。
需要注意的是，过滤需要慎用，当实体过滤严重影响原始日志信息保存完整性的情况下，不建议使用。
### 4.4.3 日志的模式识别
模式识别的目的是把日志数据集里的日志根据相似度进行集合划分，每一个子集包含一个日志模版产生的所有日志，根据划分的结果提炼每一个子集里的日志模式。根据定义，这个过程可以抽象为两步：日志集合的划分和模式识别，其中日志集合划分用机器学习的术语说就是日志聚类。
### 4.4.4 日志聚类
在机器学习中，无论是聚类还是分类，一个重要的概念是样本的相似度。不同的数据结构有不同的相似度度量方式，比如欧式距离、角向量等等。对于日志数据，由于在预处理中已经映射为实体序列，我们可以使用一些适用于序列的相似度计算方法，比如最小编辑距离、smith-waterman算法等等。有了计算两条日志相似度的方法，我们便可以开始进行下一步------日志聚类。
常用的聚类算法都可以适用于日志的聚类，比如K-means、DB-SCAN、EM算法等等。
层次聚类
层次聚类除了像其他聚类方法可以完成聚类的基本目的之外，还有一个重要的特征，那就是它保留了日志模式的层次。在每一层聚类结果中，层次聚类都保留了不同距离阈值的类的集合，对应到日志聚类，就是保留了不同模糊程度的模式集合，越靠近层次聚类树的上层，日志模式越模糊。根据层次聚类结果树，用户可以灵活选择他们想要的日志模式结果。
理想状态下，也就是聚类精度很高的情况下，日志聚类完成之后，每个类中对应的是一个日志模版对应的所有日志样例。在模版未知的情况下，我们需要通过这些日志样例反推日志模版。根据日志模式的定义，我们要做的就是提炼所有样例相同的部分作为模式的固定部分，不同部分抽象为参数部分。其中所需要做的重要的一步是日志对齐，也就是尽量多地把相同的部分对齐在同一位置，这个过程可以用的方法和计算相似度的方法高度重合，比如smith-waterman算法。
需要特别提到的是参数部分识别。不同的参数位置取值分布可以对应到不同的参数类型。如果对应的都是数字，我们可以把该参数定义为数值类型；如果大量样例只能对应到少数几个取值，比如状态码，我们可以把该参数定义为枚举类型等等。
4.4.5 选用方案
根据调研，我们提出两种日志异常模式识别方式：
1.  根据词源的日志异常聚类
词源的日志异常聚类能自动识别三类异常模式并告警：
1）模式异常：一个系统中的日志输出语句是有限的，每一个输出语句对应一个日志模式，如果检测到一条日志不能匹配任何模式，我们就称这条日志是模式异常的。
2）参数异常：一条日志匹配到对应模式之后，参数位的值如果和已有经验不符合，我们就称这条日志是参数异常的。
3）占比异常：一个模式对应的日志数量在某一个时间区间内如果发生突变，我们就称这个模式是百分比异常的。
首先对所有日志进行分词，形成原始词元组合，可以看到每一条日志变成一个词元向量，对特殊的无意义词元进行模糊替换处理。
  ----------------- ----------------- ----------------- -----------------
                    词元1             词元2             词元3
  日志1             we                are               80
  日志2             we                are               100
  日志3             you               are               100
  模式              \*                are               \
  参数              enum{we, you}                       X\~N(93.3, 9.4²)
  ----------------- ----------------- ----------------- -----------------
对历史数据分词形成分词向量后，经过spark离线分析引擎进行训练，训练结果形成模式树和参数树，生成的模型对实时日志进行检测，并人工对模型进行修正，达到提升模型检测准确度的效果。
![](media/image36.png){width="4.475in" height="4.08125in"}
图 14 模式识别流程图
其中用到的机器学习算法是聚类算法。K-means算法是最普及的聚类算法，也是一个比较简单的聚类算法，算法接受一个未标记的数据集，然后将数据聚类成不同的组，同时，k-means算法也是一种无监督学习。
![截屏2020-06-03%20下午5.15.55.png](media/image37.png){width="2.5381944444444446in"
height="1.9229166666666666in"}![截屏2020-06-03%20下午5.20.26.png](media/image38.png){width="2.567361111111111in"
height="1.9395833333333334in"}
图 15 聚类效果示意图
根据聚类算法自动将左边无规则的数据集按照一定的聚合规则，自动聚合成右边的类别。从日志层面的直观展示就是如下图所示，会将日志按层次聚合形成不同的日志类，方便运维人员查看。
![](media/image39.png){width="5.763888888888889in"
height="2.3381944444444445in"}
图 16 日志聚类示意图
运维人员查看运维日志较为费力，也不容易找出日志异一般适用于电力信息系统中的主机日志、虚拟机日志、网络设备日志等，这类日常的规律，比较适合使用日志异常模式识别方法，将日志内在规律自动聚合到一起，10000条日志最终可能聚合的结果只有5-6个类别，如下图所示：
![截屏2020-06-03%20下午5.32.20.png](media/image40.png){width="5.763888888888889in"
height="1.7222222222222223in"}
图 17 聚类结果展示
2.  通过建立异常日志模式树方式识别异常模式
> 异常日志模式树的建立可从三个方面对数据中心设备或应用日志异常检测问题展开设计：日志解析，单条异常日志检测，异常日志序列检测。
>
> 首先，从历史日志消息中构建频繁项前缀树以学习消息模板，从而构建模板库。基于模板库，可以将历史日志消息映射到对应的模板上。然后，基于模板库将实时日志消息映射到对应的模板上。如果发现实时日志消息无法映射到任一模板上，则自动地、增量式地从该日志消息中学习模板，并扩充到模板库中。
>
> ![](media/image41.jpeg){width="2.4097222222222223in"
> height="1.9930555555555556in"}
图 18 异常日志模式树建立流程图
> 借鉴频繁模式树（frequent pattern tree,
> FP-tree)）的思想，可构建一种可动态添加分枝的频繁项前缀树结构来表示设备或应用日志消息模板。在设计分析了大量设备或应用日志后，得出结论：日志消息的子类型通常是频繁出现的单词的最长组合。因此，提取消息模板等价于从日志消息中识别出频繁出现单词的最长组合。系统为每一个消息类型的日志消息构建一棵基于日志消息中单词频率的前缀树，从而实现自动地获取消息模板。该前缀树的根节点为日志消息的消息类型。通过剪枝的方式，消息模板中需要被遮挡的部分被删除掉，而日志消息子类型被保留了下来。所以，获取消息模板的过程是完全自动的，并不依赖于专家知识。
>
> ![](media/image42.jpeg){width="5.821527777777778in"
> height="1.3416666666666666in"}
图 19 建立日志消息模版示意图
> 该方法由两个部分组成：离线学习部分和在线检测部分。在离线学习部分，采用日志解析方法，对历史日志进行解析，过滤掉日志消息中的参数。然后，基于单词的频率和位置对日志消息中的单词进行加权，并使用词袋模型构造特征向量。最后，训练一个基于PU
> learning的分类器。在线检测部分，则对实时日志进行解析并提取特征，然后使用在离线学习部分学习到的日志分类器判断日志是否异常。其中，基于单词频率和位置构建词袋模型特征向量以及基于PU
> learning训练分类器如下所示。
![](media/image43.png){width="5.2965277777777775in"
height="1.0534722222222221in"}
## 4.5 海量告警降噪收敛方法
![](media/image44.jpeg){width="5.243055555555555in"
height="3.7888888888888888in"}
在当前复杂的应用架构中，各个应用之间的交互频繁，互相依赖，通常一个小故障就会触发大规模告警风暴，每天运维人员会收到大量的告警信息，有大量无效的、无需处理的告警，告警信息过多导致运维人员无法从大量告警中找到有效信息，且长期产生大量重复告警，久而久之运维人员会放松警惕，不再对告警敏感导致错过关键告警信息。需要通过智能运维技术实现大量告警的智能归并、降噪，提升告警质量，甄别有效告警。
告警降噪收敛指对异常识别模块识别出的异常进行告警合并，将相似的异常、可能属于同一问题导致的异常等等进行合并，整合成更简洁、指向性更强的告警，避免当问题大量爆发时对运维人员的消息轰炸，也有助于快速找出问题所在。
1.  告警降噪收敛步骤
```{=html}