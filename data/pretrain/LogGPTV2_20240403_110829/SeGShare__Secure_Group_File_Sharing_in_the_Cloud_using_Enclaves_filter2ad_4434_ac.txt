/–
/
/–
/–
/
/
/
/
/
/–
/–
/–
/
/–
/–
/
/
/
/
/
/–
/–
/–
/
/–
/–
/
/
/
/
/
–
–
–
–
–
/
/
/
/
/
/
/
/
/–/
/
/
/
/
/
/
/
/
/–/
/
/
/–/–
/–/–
/–/–
/
/
/–/–
/–/–
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/–/–
/–/–/–
/–/–
/
/
/
/
/–/–
/–/
/
/
/–/–
/
/
/
/
/
/
/–/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/
/–
/
/
/
/
/
/
Only Pesos [27] does support multiple ﬁle owners and
(F7). Only
no system supports multiple group owners
NEXUS [26] and Pesos [27] separate authentication and
authorization (F8). Deduplication of encrypted ﬁles (F9) is
only supported by REED [22], and no system supports permis-
sion inheritance (F10). Almost all cryptographically protected
ﬁle sharing systems do not support group-based permission
deﬁnition (P2). Therefore, each objective related to groups is
not part of their design. Only the approach from Garrison
et al. [23] and Pesos [27] support that different groups can
access the same encrypted ﬁle (P5), which can signiﬁcantly
reduce the required storage for ﬁles shared with different
groups. Only NEXUS [26] protects the conﬁdentiality and
integrity of the ﬁle system (S1 and S2). Half of the systems
perform immediate revocation (S4), and all others propose
lazy-revocation, i.e., re-encryption is deferred until the next
ﬁle update. This opens a window of opportunity for security
breaches, as a revoked user can still access all ﬁles that are
not updated. No related work provides a rollback protection for
individual ﬁles and the whole ﬁle system, which is enforced
at every point in time (S5).
IV. SEGSHARE DESIGN
In this section, we discuss SeGShare’s design based on
the components illustrated in Fig. 1. This design fulﬁlls most
objectives presented in Table II. Any remaining objectives are
fulﬁlled by extensions discussed in the next section. We start
with the setup phase in which trust is established between
users and the cloud provider, followed by the runtime phase
in which user requests are processed.
The setup phase of SeGShare establishes bilateral
A. Setup: Establish Trust between Users and Enclave
trust
between each user u ∈ U and the enclave running at the cloud
provider. This phase is only executed once, and the established
trust is the basis for the end-to-end security of user ﬁles.
Establish user trust in enclave. The CA’s certiﬁcate service
component connects to the untrusted certiﬁcation component,
one external interface of SeGShare, to perform remote attes-
tation of the enclave (see Section II-A). The CA’s public key
is hard-coded into the enclave. Thus, if the CA receives the
expected measurement, it is assured to communicate with an
enclave that was built speciﬁcally for this CA. During remote
attestation, the CA establishes a secure channel that ends at the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
480
User
User
Application
File
Priv.
Key
Client
Cert.
CA
Certification
Service
Trusted
Untrusted
Cloud Provider
SeGShare Server
TLS
Interface
SeGShare Enclave
TLS
Interface
Request
Handler
File
Manager
Certification
Component
Certification
Component
Access
Control
Root
Key
File
Manager
Server
Cert.
Key
Pair
File
ACL
Memb.
List
Group
List
Fig. 1: SeGShare architecture.
trusted certiﬁcation component. This channel is used for the
following message exchanges: (1) the CA requests a certiﬁcate
signing request (CSR); (2) the enclave generates a temporary
key pair and provides the CA with a CSR containing the
public-key of the temporary key pair; and (3) the CA generates
and signs a server certiﬁcate and provides it to the enclave. The
enclave checks the certiﬁcate’s validity. On success, it persists
the server certiﬁcate in untrusted memory, seals the key pair
(see Section II-A), and triggers the trusted TLS interface to
update its server certiﬁcate. The CA can request a new CSR
and subsequently replace the server certiﬁcate at any time.
During runtime, the users receive the server certiﬁcate on
every connection. As the CA checks the validity of the enclave
and the users trust the CA, the users only have to verify the
server certiﬁcate with the CA’s public key to be sure that
they communicate with a trusted SeGShare enclave. Notably,
remote attestation is not necessary.
Establish enclave trust in users. For each user u ∈ U, the
CA validates u’s identity and provides a client certiﬁcate to u.
This certiﬁcate contains identity information, e.g., a user ID,
a mail address, and/or a full name. User u can check that the
certiﬁcate is signed by the trusted CA as u knows CA’s public
key. During the TLS handshake, u’s applications present u’s
client certiﬁcate to the enclave, which validates the certiﬁcate
using the CA’s public key. On success, the enclave can be sure
that it communicates with a valid user of the system.
B. Runtime: Requests and Responses
Each request starts and each response ends at a user appli-
cation. Therefore, we introduce this component of SeGShare
ﬁrst and then explain which parts of the processing are done
by the other components.
User Application. The user application links the users’ lo-
cal ﬁle systems to the remote ﬁle system at the cloud provider.
For this link, it establishes a connection to SeGShare’s second
external interface, the untrusted TLS interface. This interface
is used to establish a secure TLS connection directly to the
trusted TLS interface. Details about the two TLS interfaces
are discussed in the next section.
After a TLS handshake,
the user application can send
requests to the enclave. In the design section, we only
discuss the following requests in detail: create a directory;
create/update a ﬁle; get ﬁle content or directory listing; set
ﬁle/directory permission for a group; and add/remove a user
to/from a group. Remember that each user is part of its default
group, and thus, permission requests also applies for individual
users. A request used to deﬁne that a ﬁle should inherit its
permissions is described in Section V-B. We do not discuss
the following requests for brevity, but their implementation
is straightforward: remove ﬁle/directory; move ﬁle/directory;
update ownership of ﬁle/directory; update group ownership;
and delete group.
Notably, the user application does not require any special
hardware (F5), and it only needs to store a client certiﬁcate
and the corresponding private key, independent of cloud stored
ﬁles, permissions or group memberships (P1).
TLS Interface. The TLS interface is partitioned into an
untrusted and trusted part (inside the enclave). The untrusted
TLS interface terminates the network connection (e.g., TCP),
because the enclave cannot perform I/O. All TLS records are
forwarded to the trusted TLS interface, which ﬁrst performs
the TLS handshake using the most recent server certiﬁcate.
Next, it decrypts/encrypts all incoming/outgoing TLS records.
As such, the trusted TLS interface is the endpoint of a secure
channel from the user application to the enclave.
Request Handler. The request handler component parses
each incoming request, checks the syntax, uses the identity