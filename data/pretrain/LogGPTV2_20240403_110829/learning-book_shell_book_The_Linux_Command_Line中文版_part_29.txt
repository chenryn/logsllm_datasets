## Page 232
18.7
拓展阅读
·程序 locate，updatedb，find 和 xargs 都是 GNU 项目findutils 软件包的一部分。这个
GUN项目提供了大量的在线文档，这些文档相当出色，如果你在高安全性的环境中使用
这些程序，你应该读读这些文档。
http://www.gnu.org/software/findutils/
231
---
## Page 233
19[
归档和备份
计算机系统管理员的一个主要任务就是保护系统的数据安全，其中一种方法是通过时时备份系
统文件，来保护数据。即使你不是一名系统管理员，像做做拷贝或者在各个位置和设备之间移
动大量的文件，通常也是很有帮助的。在这一章中，我们将会看看几个经常用来管理文件集合
的程序。它们就是文件压缩程序：
·gzip一压缩或者展开文件
·bzip2一块排序文件压缩器
归档程序：
·tar一磁带打包工具
·zip一打包和压缩文件
还有文件同步程序：
·rsync一同步远端文件和目录
19.1压缩文件
纵观计算领域的发展历史，人们努力想把最多的数据存放到到最小的可用空间中，不管是内存，
存储设备还是网络带宽。今天我们把许多数据服务都看作是理所当然的事情，但是诸如便携式
音乐播放器，高清电视，或宽带网络之类的存在都应归功于高效的数据压缩技术。
数据压缩就是一个删除余数据的过程。让我们考虑一个假想的例子，比方说我们有一张
100*100像素的纯黑的图片文件。根据数据存储方案（假定每个像素占24位，或者3个字节），
那么这张图像将会占用30.000个字节的存储空间：
232
---
## Page 234
100 * 100 * 3 = 30,000
一张单色图像包含的数据全是多余的。我们要是聪明的话，可以用这种方法来编码这些数
据，我们只要简单地描述这个事实，我们有3万个黑色的像素数据块。所以，我们不存储包含
3万个0（通常在图像文件中，黑色由0来表示）的数据块，取而代之，我们把这些数据压缩
为数字30.000，后跟一个0，来表示我们的数据。这种数据压缩方案被称为游程编码，是一种
最基本的压缩技术。今天的技术更加先进和复杂，但是基本目标依然不变一一避免多余数据。
压缩算法（数学技巧被用来执行压缩任务）分为两大类，无损压缩和有损压缩。无损压缩保
留了原始文件的所有数据。这意味着，当还原一个压缩文件的时候，还原的文件与原文件一模
一样。而另一方面，有损压缩，执行压缩操作时会删除数据，允许更大的压缩。当一个有损文
件被还原的时候，它与原文件不相匹配：相反，它是一个近似值。有损压缩的例子有JPEG（图
像）文件和MP3（音频）文件。在我们的讨论中，我们将看看完全无损压缩，因为计算机中的
大多数数据是不能容忍丢失任何数据的。
19.1.1gzip
这个gzip程序被用来压缩一个或多个文件。当执行gzip命令时，则原始文件的压缩版会替代
原始文件。相对应的gumnzip程序被用来把压缩文件复原为没有被压缩的版本。这里有个例子：
[nedlinuxbox -]$ 1s -1 /etc > foo.txt
[ne@linuxbox -]$ ls -1] foo.*
rv-r--r-- 1 meme 15738 2008-10-14 07:15 foo.txt
[ne@linuxbox -]s gzip foo.tzt
[ne@linuxbox -]$ 1s -1 foo.*
[nedlinuxbox -]$ gunzip foo.txt.gz
[ne@linuxbox -]$ ls -1] foo.*
rv-r--r-- 1 me
me 15738 20081014 07:15 foo.txt
在这个例子里，我们创建了一个名为foo.txt的文本文件，其内容包含一个目录的列表清
单。接下来，我们运行gzip命令，它会把原始文件替换为一个叫做foo.txt.gz的压缩文件。在
foo.*文件列表中，我们看到原始文件已经被压缩文件替代了，并将这个压缩文件大约是原始文
件的五分之一。我们也能看到压缩文件与原始文件有着相同的权限和时间截。
233
---
## Page 235
接下来，我们运行gunzip程序来解压缩文件。随后，我们能见到压缩文件已经被原始文件
替代了，同样地保留了相同的权限和时间戳。
gzip命令有许多选项。这里列出了一些：
选项
说明
-C
把输出写入到标准输出，并且保留原始文件。也有可能
用--stdout 和--to-stdout 选项来指定。
-d
解压缩。正如 gunzip 命令一样。也可以用-decompress 或
者--uncompress 选项来指定.
J-
强制压缩，即使原始文件的压缩文件已经存在了，也要执
行。也可以用--force选项来指定。
显示用法信息。也可用-help选项来指定。
-1
列出每个被压缩文件的压缩数据。也可用--list选项。
若命令的一个或多个参数是目录，则递归地压缩目录中的文
件。也可用--recursive选项来指定。
-t
测试压缩文件的完整性。也可用--test选项来指定。
-V
显示压缩过程中的信息。也可用--verbose选项来指定。
-number
设置压缩指数。number是一个在1（最快，最小压缩）到
9（最慢，最大压缩）之间的整数。数值1和9也可以各自
用--fast和--best选项来表示。默认值是整数6。
表19-1:gzip选项
返回到我们之前的例子中：
[ne@linuxbox -]$ gzip foo.txt
[ne@linuxbox -]$ gzip -tv foo.txt.gz
foo.txt .gz: OK
[ne@linuxbox -]$ gzip -d foo.txt-gz
这里，我们用压缩文件来替代文件foo.txt，压缩文件名为foo.txt.gz。下一步，我们测试了
压缩文件的完整性，使用了-t和-v选项。
234
---
## Page 236
[ne@linuxbox -]$ ls -1 /etc 1 gzip > foo.txt.gz
这个命令创建了一个目录列表的压缩文件。
这个gunzip程序，会解压缩gzip文件，假定那些文件名的扩展名是.gz，所以没有必要指
定它，只要指定的名字与现有的未压缩文件不冲突就可以：
[ne@linuxbox -]$ gunzip foo.txt.gz
如果我们的目标只是为了浏览一下压缩文本文件的内容，我们可以这样做
[ne@linuxbox -]$ gunzip -c foo.txt.gz I less
另外，对应于gzip还有一个程序，叫做zcat，它等同于带有-c选项的gunzip命令。它可
以被用来如cat命令作用于gzip压缩文件：
[ne@linuxbox -]$ zcat foo.txt.gz I less
小贴士：还有一个zless程序。它与上面的管道线有相同的功能。
19.1.2bzip2
这个bzip2程序，由Julian Seward开发，与gzip 程序相似，但是使用了不同的压缩算法，舍
弃了压缩速度，而实现了更高的压缩级别·在大多数情况下，它的工作模式等同于gzip。由
bzip2压缩的文件，用扩展名.bz2来表示：
235
---
## Page 237
[ne@linuxbox -]$ 1s -1 /etc > foo.txt
[ne@linuxbox -]$ ls -1 foo.txt
rv-r--r-- 1 me
me
15738 2008-10-17 13:51 foo.txt
[ne@linuxbox -]$ bzip2 foo.txt
[ne@linuxbox -]$ 1s -1 foo.txt.bz2
rv-r--r-- 1 me
2792 2008-10-17 13:51 foo.txt.bz2
[ne@linuxbox -]$ bunzip2 foo.txt.bz2
正如我们所看到的，bzip2程序使用起来和gzip程序一样。我们之前讨论的gzip程序的所
有选项（除了-r），bzip2程序同样也支持。注意，然而，压缩级别选项（-number）对于bzip2
程序来说，有少许不同的含义。伴随着bzip2程序，有bunzip2和bzcat程序来解压缩文件。
bzip2文件也带有bzip2recover程序，其会试图恢复受损的.bz2文件。
不要强迫性压缩
我偶然见到人们试图用高效的压缩算法，来压缩一个已经被压缩过的文件，通过
这样做：
S gzip picture.jpg
不要这样。你可能只是在浪费时间和空间！如果你再次压缩已经压缩过的文件
实际上你会得到一个更大的文件。这是因为所有的压缩技术都会涉及一些开销，文
件中会被添加描述此次压缩过程的信息。如果你试图压缩一个已经不包含多余信息
的文件，那么再次压缩不会节省空间，以抵消额外的花费。
19.2归档文件
一个常见的，与文件压缩结合一块使用的文件管理任务是归档。归档就是收集许多文件，并把
它们捆绑成一个大文件的过程。归档经常作为系统备份的一部分来使用。当把旧数据从一个系
统移到某种类型的长期存储设备中时，也会用到归档程序。
19.2.1 tar
在类Unix的软件世界中，这个tar程序是用来归档文件的经典工具。它的名字，是tape
archive的简称，揭示了它的根源，它是一款制作薇带备份的工具。而它仍然被用来完成传统任
务，它也同样适用于其它的存储设备。我们经常看到扩展名为.tar或者.tgz的文件，它们各自
236
---
## Page 238
表示“普通”的tar包和被gzip程序压缩过的tar包。一个tar包可以由一组独立的文件，一
个或者多个目录，或者两者混合体组成。命令语法如下：
tar node [options] pathnane..
这里的mode是指以下操作模式（这里只展示了一部分，查看tar的手册来得到完整列表）
之一：
模式
说明
C
为文件和/或目录列表创建归档文件。
十
抽取归档文件。
追加具体的路径到归档文件的末尾。
t
列出归档文件的内容。
表19-2:tar 模式
tar命令使用了稍微有点奇怪的方式来表达它的选项，所以我们需要一些例子来展示它是怎
样工作的。首先，让我们重新创建之前我们用过的操练场：
[ne@linuxbox -]$ mikdir -p playground/dir-{(00{1. .9), 0{10. 99),100)
{2*V]z/00t{6601}0{6}00}xp/pumox8fed qomo$[xoqxnutou]
下一步，让我们创建整个操练场的tar包：
[neglinuxbox -]$ tar cf playground.tar playground
这个命令创建了一个名为playground.tar的tar包，其包含整个playground目录层次结
果。我们可以看到模式c和选项f.其被用来指定这个tar包的名字，模式和选项可以写在一
起，而且不需要开头的短横线。注意，然而，必须首先指定模式，然后才是其它的选项。
要想列出归档文件的内容，我们可以这样做：
237
---
## Page 239
[nedlinuxbox -]$ tar tf playground.tar
为了得到更详细的列表信息，我们可以添加选项v：
re4 pumoz3fe[d fa4 xea $[- xoqxnurtgou]
现在，抽取tar包playground到一个新位置。我们先创建一个名为foo的新目录，更改目
录，然后抽取tar包中的文件：
[ne@linuxbox -]$ midir foo
[ne@linuxbox -]$ cd foo
ze2.punox3fetd/-. gx rea s[- xoqxnustoou]
[ne@linuxbox -]$ 1s
playground
如果我们检查～/foo/playground目录中的内容，会看到这个归档文件已经被成功地安装了，
也即创建了一个精确的原始文件的副本。然而，这里有一个警告：除非你是超级用户，要不然
从归档文件中抽取的文件和目录的所有权由执行此复原操作的用户所拥有，而不属于原始所有
者。
tar命令另一个有趣的行为是它处理归档文件路径名的方式。默认情况下，路径名是相对的，
而不是绝对路径。当以相对路径创建归档文件的时候，tar命令会简单地删除路径名开头的斜
杠。为了说明问题，我们将会重新创建我们的归档文件，但是这次指定用绝对路径创建：
[ne@linuxbox foo]$ cd
pmox3fed/- xeszpunox8fe[d yo xea s[- xoqxnutgou]
记住，当按下回车键后，～/playground会展开成/home/me/playground，所以我们将会得
到一个绝对路径名。接下来，和之前一样我们会抽取归档文件。观察发生什么事情：
238
---
## Page 240
[ne@linuxbox -]$ cd foo
[ne@linuxbox foo]$ tar xf ../playground2.tar
[nedlinuxbox foo]$ 1s
hone
playground
[ne@linuxbox foo]$ 1s home
me
[ne@linuxbox foo]$ 1s home/ne
playground
这里我们看到当我们抽取第二个归档文件时，它重新创建了home/me/playground目录，相
对于我们当前的工作目录，～/foo.而不是相对于root目录，作为带有绝对路径名的案例。这
看起来似乎是一种奇怪的工作方式，但事实上这种方式很有用，因为这样就允许我们抽取文件
到任意位置，而不是强制地把抽取的文件放置到原始目录下。加上verbose（v）选项，重做这
个练习，将会展现更加详细的信息。
让我们考虑一个假设，tar命令的实际应用。假定我们想要复制家目录及其内容到另一个系
统中，并且有一个大容量的USB硬盘，可以把它作为传输工具。在现代Linux系统中，这个
为了制作tar包，我们可以这样做：
[nedlinuxbox -]$ sudo tar cf /media/BigDisk/hone.tar /hone
tar包制作完成之后，我们卸载硬盘，然后把它连接到第二个计算机上。再一次，此硬盘被
挂载到/media/BigDisk目录下。为了抽取归档文件，我们这样做：
[ne@linuxbox2 -]$ cd /
[ne@linuxbox2 /]$ sudo tar xf /αedia/BigDisk/home .tar
值得注意的一点是，因为归档文件中的所有路径名都是相对的，所以首先我们必须更改目录
到根目录下，这样抽取的文件路径就相对于根目录了。
当抽取一个归档文件时，有可能限制从归档文件中抽取什么内容。例如，如果我们想要抽取
单个文件，可以这样实现：
239
---
## Page 241
tar xf archive.tar pathnanc
通过给命令添加末尾的路径名，tar命令就只会恢复指定的文件。可以指定多个路径名。注
意路径名必须是完全的，精准的相对路径名，就如存储在归档文件中的一样。当指定路径名的
时候，通常不支持通配符：然而，GNU版本的tar命令（在Linux发行版中最常出现）通过
--wildcards选项来支持通配符。这个例子使用了之前playground.tar文件：
[ne@linuxbox -]$ cd foo
[ne@linuxbox foo]$ tar xf -./playground2.tar ==vildcards ‘hone/ne/playground/dir-\+/file-A*
这个命令将只会抽取匹配特定路径名的文件，路径名中包含了通配符dir-*。
tar命令经常结合find命令一起来制作归档文件。在这个例子里，我们将会使用find命令
来产生一个文件集合，然后这些文件被包含到归档文件中。
[neglinuxbox -]$ find playground =nane *file-A’ -exec tar rf playground.tar *{}’ '+*
这里我们使用find命令来匹配playground目录中所有名为file-A的文件，然后使用-exec
行为，来唤醒带有追加模式（r）的tar命令，把匹配的文件添加到归档文件playground.tar里
面。
使用tar和find命令，来创建逐渐增加的目录树或者整个系统的备份，是个不错的方法。
通过find命令匹配新于某个时间截的文件，我们就能够创建一个归档文件，其只包含新于上一
个tar包的文件，假定这个时间截文件恰好在每个归档文件创建之后被更新了。
tar命令也可以利用标准输出和输入。这里是一个完整的例子：
[ne@linuxbox foo]$cd
[nedlinuxbox -]$ find playground =nane *file-A' | tar cf - --files-fron=
1gzip > playground.tgz
在这个例子里面，我们使用find程序产生了一个匹配文件列表，然后把它们管道到tar命令
中。如果指定了文件名“-”，则其被看作是标准输入或输出，正是所需（顺使说一下，使用“-”
240
---
## Page 242