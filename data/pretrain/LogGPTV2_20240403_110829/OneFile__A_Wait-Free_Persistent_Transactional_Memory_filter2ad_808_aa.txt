title:OneFile: A Wait-Free Persistent Transactional Memory
author:Pedro Ramalhete and
Andreia Correia and
Pascal Felber and
Nachshon Cohen
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
OneFile: A Wait-free Persistent Transactional Memory
Pedro Ramalhete
Cisco Systems
Andreia Correia, Pascal Felber
University of Neuchâtel
Nachshon Cohen
EPFL
PI:EMAIL
PI:EMAIL, PI:EMAIL
nachshoncohen@epﬂ.ch
Abstract—A persistent transactional memory (PTM) library
provides an easy-to-use interface to programmers for using
byte-addressable non-volatile memory (NVM). Previously pro-
posed PTMs have, so far, been blocking. We present OneFile,
the ﬁrst wait-free PTM with integrated wait-free memory
reclamation. We have designed and implemented two variants
of the OneFile, one with lock-free progress and the other with
bounded wait-free progress. We additionally present software
transactional memory (STM) implementations of the lock-free
and wait-free algorithms targeting volatile memory. Each of
our PTMs and STMs is implemented as a single C++ ﬁle
with ∼1,000 lines of code, making them versatile to use.
Equipped with these PTMs and STMs, non-expert developers
can design and implement their own lock-free and wait-free
data structures on NVM, thus making lock-free programming
accessible to common software developers.
I. INTRODUCTION
Modern computer architectures are based on shared mem-
ory systems, where multiple threads or processes can si-
multaneously access the same data. Sharing data in such
a way leads to what is called the concurrency problem.
The simplest solution to this problem is to ensure mutual
exclusion using locks. As far back as 1963, Dijkstra was
the ﬁrst to show a mutual exclusion algorithm, originally
made by Dekker [1]. Locks are by their very nature blocking
and it
took more than 20 years for Treiber to publish,
in 1986, the ﬁrst non-blocking data structure, a lock-free
stack [2]. Since then, a multitude of non-blocking data
structures have emerged over the years. Several of these data
structures contained minor errors, a few had fatal design
ﬂaws, serving as a testament to the difﬁculty of designing
and implementing correct non-blocking data structures.
Researchers quickly realized that reasoning about lock-
free code was a difﬁcult task and started to propose al-
ternatives. In 1991, Herlihy designed the ﬁrst universal
construct (UC) with wait-free progress [3]. UCs with wait-
free progress can wrap sequential implementations of an
object or data structure, so as to provide wait-free progress
when accessing the methods and data of the underlying
object. Other UCs with lock-free and wait-free progress
have been proposed since then, though up until now their
performance has been too low to be of practical usage,
remaining mostly the subject of theoretical work.
By their very nature, UCs imply no change to the se-
quential implementation of the underlying object. This is
together with Moss,
an attractive property from a theoretical standpoint, but in
practice it can be reasonable to demand from the user some
sort of minor annotation on the sequential implementation.
Herlihy saw this opportunity in the design space and, two
years later,
they proposed another
approach for non-blocking data structures [4], coining the
term transactional memory (TM). The intent was for CPU
manufacturers to implement TM as a set of hardware in-
structions (HTM). This dream only came to fruition many
years later and, even now, HTMs still do not provide non-
blocking progress guarantees.
In 1997, Shavit and Touitou presented the ﬁrst software-
only TM capable of running on commodity hardware [5],
creating the ﬁrst functional software transactional memory
(STM). Their proposal went mostly unnoticed, likely be-
cause the research community was busy developing “hand-
made” custom non-blocking data structures. However, by the
turn of the century, STMs started receiving more attention,
peaking in the decade of 2000-2010. Since then, many
STMs have been proposed though rarely claiming lock-
free progress and none with lock-free memory reclamation.
Emerging out of this gold rush, lock-based STMs have been
the winners when it comes to performance.
Until
today,
the role of STMs has been delegated to
providing a user-friendly interface for working with lock-
based concurrency. Making life easier for software engineers
working with locks is an important undertaking, yet, it is far
below the goal of what Herlihy originally thought UCs and
TMs should be: a way of letting non-expert developers create
their own lock-free data structures, safely and correctly.
The introduction of byte-addressable non-volatile memory
(NVM) has added a new dimension to this old problem. Due
to its need for resilience to failures, application development
for NVM is particularly well suited to transactions, and
constructing an STM with efﬁcient and durable (ACID)
transactions has become an important problem to solve [6].
Several persistent software transactional memory (PTM)
exist in the literature with none claiming lock-free progress,
at the exception of RomulusLR [7] which provides wait-free
progress but solely for its read-only transactions.
In this paper we present OneFile, a novel PTM/STM
with wait-free progress. OneFile is speciﬁcally designed
to enable non-experts to conceive and implement their own
lock-free and wait-free data structures. OneFile comes with
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00028
151
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:27 UTC from IEEE Xplore.  Restrictions apply. 
integrated wait-free memory reclamation. With OneFile,
transforming a sequential implementation of a data structure
into a wait-free implementation is as easy as annotating the
types used internally in the data structure, replacing the allo-
cation and deallocation methods with the ones provided by
OneFile, and wrapping all methods in calls to updateTx
or readTx.
In short, with OneFile we make the following contribu-
tions. We introduce a novel transactional memory algorithm
that relies on a new multi-word CAS technique, with two
different PTMs, one with lock-free progress and the other
with bounded wait-free progress, which provide dynamic
transactions for NVM with durable linearizability, i.e., ACID
transactions. We present
two STMs based on the same
design. Each of these four implementations is a single C++
header with ∼1,000 lines of code, simplifying the task of
integrating with any sequential implementation of a data
structure. Our STMs and PTMs have efﬁcient
lock-free
and wait-free memory reclamation. OneFile’s performance
is capable of rivaling that of hand-made lock-free data
structures, and it provides linearizable consistency for any
method, something notoriously difﬁcult to achieve for hand-
made lock-free data structures.
The rest of the paper is organized as follows. We ﬁrst
discuss related work in §II. We then introduce the lock-
free version of the OneFile algorithm in §III, followed by
the wait-free algorithm. We present details on our solutions
for providing efﬁcient wait-free memory reclamation on
NVM and volatile memory in §IV. We provide an in-depth
evaluation of OneFile in §V and ﬁnally conclude in §VI.
II. RELATED WORK
Our goal is to provide a way for non-experts to design
durable linearizable [8] concurrent data structures that pre-
serve their state after a failure. As such, we focus our atten-
tion on PTMs whose transactions guarantee this property.
PTMs: Most of the existing PTM implementations
rely on one of two logging techniques: write-ahead logging
(WAL) with undo [9]–[11] or redo [6], [10] log. A persistent
log approach adds complexity to the implementation given
that the log used to revert to a consistent state must itself
be allocated in persistent memory and be reverted in case
of failure. Two notable algorithms based on undo log are
Atlas [12] and PMDK [13].
Atlas [12] requires an entry in the undo log for every
store to persistent memory. Each log entry has four words:
the destination address of the store, the original value at
the address, a pointer to the next node, and the size of
the store combined with the log type. This implies that a
persistent store in user code will cause a total of 5 stores to
NVM. To minimize cache line ﬂushes, Atlas uses a helper
thread to aggregate memory locations and to guarantee that
a consistent state is persisted to memory. As with any undo
log approach, the algorithm has to guarantee that the log
entry is made persistent before any in-place modiﬁcation.
Therefore, modiﬁcations are written-back to NVM using a
persistent write-back (pwb) instruction and a persistent fence
(pfence) [8] is used to stall until pwbs ﬁnish. Transactions
in Atlas are only buffered durable linearizable [8] since
some ﬁnished transactions may not be included in a post-
failure state.
PMDK [13] is a more recent undo log implementation that
reduces the number of persistent fences by aggregating all
modiﬁcations done on each object inside a transaction. The
persistent memory allocator is highly optimized to allow a
signiﬁcant reduction on the number of pwb instructions.
Mnemosyne [6] was the ﬁrst PTM. It uses a redo log and
is built on top of the lock-based TinySTM [14], [15].
log but
Romulus [7] is a recent development that does not rely
in a persistent
instead uses two replicas of the
data to guarantee consistent recovery from a non-corrupting
failure. The user code is executed directly in-place in the ﬁrst
replica and at the end of the transaction the modiﬁcations
propagate to the second replica. To improve performance on
the copy procedure, Romulus uses a volatile log to record the
memory locations that were modiﬁed. Two implementations
are publicly available, one with a scalable reader-writer
lock, named RomulusLog, and the other using a universal
construct supporting wait-free read-only transactions, named
RomulusLR. Both variants use ﬂat-combining [16] for their
update transactions. RomulusLR was the ﬁrst PTM to
provide concurrent read transactions with wait-free progress.
STMs: A single lock-free STM has been identiﬁed
in the literature, by [17], who proposed a modiﬁcation of
JVSTM [18] with lock-free operations. Their implementa-
tion is for the Java virtual machine (JVM) and, therefore,
uses the JVM’s garbage collector for memory reclamation,
which is itself not lock-free.
[19] present a detailed review of many STMs. Among
those, we speciﬁcally focus on TinySTM [14], [15] and
ESTM [20] in our comparative evaluation. TinySTM uses ea-
ger locking and it deploys an array of locks to access shared
memory. Similarly to TL2 [21], it relies on a shared counter
as a “clock” to protect memory regions from conﬂicting
accesses and order updates. TinySTM maintains a write-set
as well as a read-set that is validated after the locks of the
write-set are acquired, at commit time. ESTM [20] provides
a variant of elastic transactions that support efﬁcient imple-
mentations of search data structures. A key feature of ESTM
is that, during its execution, an elastic transaction can be cut
into multiple normal transactions, hence reducing the risk of
conﬂicts and improving performance.
Multi-Word CAS (MCAS) Algorithms: At
the core
of the OneFile lies a technique that provides multi-word
compare-and-set operations. MCAS is a programming ab-
straction that allows a thread to update a series of memory
addresses in a single step [22]. This update is successful only
when the values at these addresses did not change between
152
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:27 UTC from IEEE Xplore.  Restrictions apply. 
the reading of those values and the call to MCAS.
The ﬁrst practical lock-free MCAS was proposed in [23].
A CAS operation is used to replace the expected value at
an address with a pointer to a descriptor object. Two bits
of the word are reserved to distinguish between values and
pointers to descriptor objects. In order to prevent the “ABA”
synchronization problem, the authors designed a variant with
a double-compare single-swap.
Recently, Pavlovic et al. [24] have described an MCAS
technique for persistent memory. This technique is blocking,
requires HTM support, executes 4 persistence fences per
operation and steals one bit from each modiﬁed word.
Wang et al. [25] have shown an MCAS approach with
lock-free transactions and blocking memory reclamation,
which steals two bits from each word.
Other techniques have been proposed [23], [26]–[28] that
can work well for speciﬁc scenarios where MCAS are
typically deployed, however, to use it as a part of an STM,
a more versatile algorithm is needed, one that is ABA-free
and that uses no bit of the word. In §III we describe such
an algorithm and how to integrate it into an STM.
III. PERSISTENT TRANSACTIONAL MEMORY
We ﬁrst describe in this section the basic OneFile lock-
free algorithm. We will then introduce a variant of the basic
design that provides bounded wait-free progress.
A. Principle and Architecture
OneFile is a redo-log, word-based PTM, which does not
maintain a read-set. Each thread uses and exposes a write-
set to the other threads, so that they are able to help apply
the current ongoing transaction. All mutative transactions are
effectively serialized (ordered) on a single variable named
curTx which is composed of a monotonically increasing
sequence number and an index. The sequence number
#curTx is unique and it allows read operations to have
fast and consistent operations, using a technique similar to
TL2 [21] and TinySTM [14]. The index indicates to which
write-set (i.e., thread identiﬁer tid) the current transaction
pertains to. We name the 64 bit-wide combination of the
index and sequence the transaction identiﬁer.
Each thread has its own write-set, however, other threads
may read from this write-set during the applying phase when
helping another transaction. To prevent ABA issues during
the re-usage of the log and as an optimization to quickly
identify when a transaction has been applied, each write-set
contains a request variable. The write-set can be correctly
re-used because if a thread A attempts to help another thread
B to complete B’s transaction, it ﬁrst reads the request
of B, then makes a local copy of B’s write-set and after a
load-ordering fence, re-checks that B’s request has not
changed and matches the sequence of curTx. When the
value of request is the same as curTx, it indicates that
the write-set is to be applied, i.e., at least some of its entries
need to be executed with a double-word compare-and-set
(DCAS) instruction (CMPXCHG16B). If the request is
different from curTx, then the current transaction has been
applied and a new mutative transaction can now start. The
basic data type is denoted TMType. It is composed of two
64-bit adjacent words, the ﬁrst word containing the actual
value, val, and the second word containing a numerical
sequence, seq. A DCAS instruction acts simultaneously on
the two adjacent 64-bit words of TMType.
A mutative transaction in the OneFile algorithm consists
of three phases: transform, commit and apply.
During the transform phase, the user code for that update
transaction is invoked, without the stores to TMType objects
being executed. Instead, a redo log (write-set) is created with
one entry for every store on a unique memory location, indi-
cating the address of the TMType and its corresponding new
value. The user code can be passed to the STM’s updateTx
method as a function pointer, a std::function, or a
lambda expression (closure). This step effectively transforms
the function containing the user code into a write-set [4]. A
store on a memory location already present in the write-
set will replace the previous value in the write-set with the
new value. The write-set is implemented as an array with
an intrusive hash-set, where short-sized transactions (less
than 40 stores) do a linear lookup in the array, while larger
transactions do a lookup on the hash-set. Unlike other STMs,
there is no read-set on OneFile.
After
the user
function returns from its invocation,
the transaction enters the commit phase. The updateTx
method will attempt to change the shared variable curTx
with a CAS, from the current transaction identiﬁer to the
new transaction identiﬁer, where the sequence advances by
one and the index becomes the current thread’s identiﬁer. If
the CAS is successful, the transaction has effectively been
committed, otherwise this transaction has failed.
On the third phase, the currently committed transaction
is applied, by executing one DCAS for every entry in
the write-set of the last committed transaction, if it has
not already been applied. This write-set may belong to
the current thread, or to another thread which successfully
executed the CAS on curTx in its own commit phase.
Regardless of the case, one thread has made progress, thus
guaranteeing lock-free progress. To apply the write-set, we
execute a DCAS on each double-word location (TMType),
from the current value and sequence to the new value
with the current transaction’s sequence, as indicated in the
current transaction’s write-set. As explained in §III-C, this
MCAS technique guarantees there are no ABA issues even
if one thread lags behind on an older transaction’s write-set
during the apply phase. At the end of this phase, the write-
set’s request’s sequence is advanced to indicate to other
threads that the corresponding apply phase is complete and
that a new transaction can now start.
In OneFile, read-only transactions begin by reading the
153
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:13:27 UTC from IEEE Xplore.  Restrictions apply. 
// address of TMType to modify
// desired value to change to
TMType* addr;
uint64_t val;
uint64_t numStores {0};
void apply(uint64_t seq, const int tid) {
for (uint64_t i = 0; i val.load(memory_order_acquire);
uint64_t lseq = e.addr−>seq.load(memory_order_acquire);
if (lseq  struct TMType {
20
21
22
23
24
25
26
27
28
29
30
31 };
T lval = (T)val.load(memory_order_acquire);
uint64_t lseq = seq.load(memory_order_acquire);
if (lseq > seq(tl_oldTx)) throw AbortedTxException;
return (T)gOF.writeSets[tl_tid].lookup(this, lval);
std::atomic val;
std::atomic seq;
inline T load() {
gOF.writeSets[tl_tid].addOrReplace(this, newVal);
}
inline void store(T newVal) {
}
}
}
// store interposition
// load interposition
current value of curTx and helping in the apply phase if the
current transaction is not yet applied, so as to have a globally
consistent view. Then, the user function that was passed to
readTx will be invoked, with every load on a TMType
object allocated by the STM interposed, and a check done
of whether the sequence on each read word is no higher
than the one at the start of the function’s invocation. This
algorithm is similar to read-only transactions in TL2 [21].
If one of the loads fails the previous checks, the read-only
transaction is restarted via the exception mechanism, causing
the re-reading of the current value of curTx and restarting
of the user-provided read-only function.
B. Lock-Free PTM
We ﬁrst introduce the general operation of the lock-free
PTM. A persistent transaction executes the following steps:
1) Read curTx and store it locally in oldTx.
2) If there is an ongoing transaction, help apply it (see steps
8 to 10) and go to 1.
3) Execute user code, with loads and stores interposed.
4) Commit if write-set is empty (read-only transaction).