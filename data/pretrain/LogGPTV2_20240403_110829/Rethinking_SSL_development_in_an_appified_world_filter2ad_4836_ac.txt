for the Android platform, they can serve as a blueprint for
increasing SSL security on other platforms such as iOS, but
also OS X and Windows 8 which are moving towards the
app paradigm as well.
Based on our analysis described above, we believe that
simplifying SSL libraries or trying to educate developers in
the context of SSL security will not solve the problem. For
most developers, network security is not a primary concern
and they just want to “make it work”. An ideal solution
would enable developers to use SSL correctly without cod-
ing eﬀort and prevent them from breaking SSL validation
through customization. However, it is also important not
to restrict their capabilities to produce functional (and se-
cure) applications: If our solution does not oﬀer the needed
functionality, developers will be tempted to break it just like
they are breaking the built-in SSL code at the moment.
Before going into detail, we summarize the desired fea-
tures for SSL validation identiﬁed during analysis:
Self-Signed Certiﬁcates – Development. Developers
commonly wish to use self-signed certiﬁcates for test-
ing purposes and hence want to turn oﬀ certiﬁcate val-
idation during testing.
Self-Signed Certiﬁcates – Production. A few develop-
ers wanted to use self-signed certiﬁcates in their pro-
duction app for cost and eﬀort reasons.
Certiﬁcate Pinning / Trusted Roots. Developers liked
the idea of having an easy way to limit the number of
trusted certiﬁcates and/or certiﬁcate authorities.
Global Warning Message. Developers requested global
SSL warning messages since they described building
their own warning messages as too challenging.
Code Complexity. Developers described the code-level
customization features of SSL as too complex and re-
quiring too much eﬀort.
In addition to these developer requirements, we add a user
requirement to our list of desired changes on how SSL is
handled in apps. We base this goal on the related area of SSL
handling in browsers. While a website can choose not to oﬀer
SSL at all, it cannot prevent the browser from warning the
user about an unsafe connection. The website also cannot
turn oﬀ SSL validation for the user. In the world of apps,
developers currently have the power to deﬁne SSL policies
for an app without those being transparent for the user.
User Protection. The capabilities of a developer should
be limited in a way that prevents them from invisibly
putting user information at risk.
To achieve all these features, several changes to the way
SSL is used on appiﬁed platforms are necessary. First and
foremost, we propose the following paradigm-shift: instead
of letting all developers implement their own SSL code (and
potentially break SSL in the process, with no chance for
the user to notice), the main SSL usage patterns should be
provided by the OS as a service that can be added to apps
via conﬁguration instead of implementation. This is a fairly
radical shift in responsibility, however, we believe there now
is enough evidence to warrant this move. Furthermore, the
evaluation of our system presented in Section 6 shows that
it is both technically possible and acceptable from the devel-
oper’s standpoint. Conﬁguration instead of implementation
also lends itself well to oﬀer other requested features, such
as allowing developers to turn oﬀ SSL certiﬁcate validation
for their app on their device in the settings during devel-
opment. This would allow the use of self-signed certiﬁcates
during development, but would not aﬀect the installation of
an app on a user’s device. Surprisingly, none of the major
mobile or desktop operating systems provide this feature,
although we believe it would oﬀer signiﬁcant beneﬁts to all
parties.
The platform should oﬀer conﬁgurable options for the new
SSL service so that developers cannot and need not circum-
vent security features on the code level. The simple removal
of the need to tinker with SSL security aspects for testing
purposes will already reduce the amount of vulnerable apps
signiﬁcantly. It will also protect users from developers who
do not understand how SSL works and who therefore make
honest mistakes during implementation.
Table 1 gives an overview of our proposed modiﬁcations
compared to the traditional code-level approach.
5.1 Implementation on Android
Figure 1 gives a high-level overview of the modiﬁcations
we implemented to create the proposed SSL service on An-
droid. The white boxes contain classes we modiﬁed or cre-
ated for our solution. The dashed lines show Android com-
ponents that are now circumvented since they proved to be
insecure. The grey boxes are comments on what the diﬀer-
ent components do. The start arrow shows the entry point
where app code passes control over to the central SSL sys-
tem. The features oﬀered by our solution are presented in
the following sections.
5.2 Features
5.2.1 Mandatory SSL Validation
As stated above, we propose that the capability and need
to customize SSL certiﬁcate validation and hostname veriﬁ-
cation on source code-level is removed. Instead, SSL certiﬁ-
cate validation should be enforced for every SSL handshake
automatically, while taking into account the diﬀerent usage
scenarios such as development vs. production.
54s
e
i
g
e
t
a
r
t
S
n
o
i
t
a
d
i
l
a
V
Standard (cid:88) — — — — —
(cid:88) P
g
n
i
n
n
i
P
e
t
a
c
ﬁ
i
t
r
e
C
n
o
i
t
a
d
i
l
a
V
A
C
g
n
i
n
n
i
P
A
C
t
n
e
m
p
o
l
e
v
e
D
(cid:88)
Our approach (cid:88)
(cid:88)
(cid:88)
e
d
o
M
g
n
i
g
g
o
L
Table 1: A comparison between the status quo and
our approach concerning validation features.
(cid:88) = supported out of the box;
− = custom code required;
P = pluggable.
Our modiﬁcations
Existing architecture
Force hostname
veriﬁcation
org.apache.http.conn.ssl
SSLSocketFactory
start
Force certiﬁcate validation;
Conﬁgurable by the users
android.net.ssl
TrustManagerClient
(in app)
uses
removed
uses
replaced by
javax.net.ssl
TrustManager
android.net.ssl
TrustManagerService
(in system)
Pluggable Certiﬁcate
Validation:
(CA-based validation, CT,
AKI, TACK, etc.)
Turn on/oﬀ SSLPinning,
Accept all certiﬁcates
on developer devices
conﬁgures
User options
Developer options
decisions
w
a
r
n
i
f
S
S
L
v
a
l
i
d
a
t
i
o
n
f
a
i
l
s
Warn the user if con-
nection is insecure
Human Com-
puter Interface
Figure 1: This ﬁgure illustrates the process of creat-
ing an SSL protected network connection. The grey
boxes comment on our contributions.
To this end, we provide the TrustManagerClient and Trust-
ManagerService that replace the capabilities of Android’s
default TrustManager (cf. Figure 1). We only modify meth-
ods which are private and ﬁnal, thus binary compatibility is
given and we do not break modularity. More information on
the compatibility of our approach can be found in Section 6.2
and Appendix B. Both the client and service part of our SSL
validation implementation prevent Android apps from us-
ing broken certiﬁcate validation. Upon creation of a socket,
the newly developed TrustManagerClient automatically re-
quests SSL certiﬁcate validation from the service counter-
part. App developers cannot circumvent secure validation
anymore, since customized TrustManager implementations
are prevented by our modiﬁcation. The TrustManagerSer-
vice enforces SSL certiﬁcate validation against the trusted
root CAs and can drop the connection or present the user
with a warning message in case validation fails (more on this
in Section 5.2.4).
To mandate secure hostname veriﬁcation, we patched all
stock hostname veriﬁers to enforce browser compatible host-
name veriﬁcation. We also added hostname veriﬁcation to
the central SSLSocketFactory (cf. Figure 1). Hostname ver-
iﬁcation is conventionally delegated to the application layer:
With HTTPS for example, the hostname for veriﬁcation is
extracted from the requested URL. In contrast, Android’s
SSLSocketConnection implementation does not check the
hostname, even though it may have been provided in the
method call. Our patch improves this behavior by verifying
hostnames with the parameters provided during connection
establishment for any SSL connection.
This strict enforcement could cause developer issues in
some usage scenarios described by our study participants,
so several conﬁguration options are described in the follow-
ing in order to adapt our solution to diﬀerent situations.
Additionally, we discuss potential pathological cases in the
appendix (see App. B.1).
Self-Signed Certiﬁcates
5.2.2
To allow developers to use self-signed certiﬁcates for test-
ing purposes, we add a new option (cf. Figure 2) to the
Developer settings, allowing app developers to turn oﬀ SSL
certiﬁcate validation for speciﬁc apps installed on their de-
vice without needing to modify the code of their app. This
option is monitored by the TrustManagerService and skips
certiﬁcate validation for this app only. These settings only
aﬀect the speciﬁc app on the developer device, not the apps
deployed onto users’ devices or other apps on the developer’s
device. Thus, even if developers forget to turn on certiﬁcate
validation again, this has no eﬀect on apps on user devices.
This feature eﬀectively protects users from forgetful devel-
opers and solves many of the problems we discovered during