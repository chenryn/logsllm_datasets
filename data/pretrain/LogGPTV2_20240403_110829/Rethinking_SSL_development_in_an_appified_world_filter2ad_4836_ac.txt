For the Android platform, these guidelines can serve as a blueprint for enhancing SSL security on other platforms, such as iOS, macOS, and Windows 8, which are also moving towards an app-centric paradigm.

Based on our analysis, we conclude that simplifying SSL libraries or educating developers about SSL security will not sufficiently address the issue. Most developers prioritize functionality over network security and simply want to "make it work." An ideal solution would enable developers to use SSL correctly with minimal coding effort, while preventing them from compromising SSL validation through customization. However, it is crucial not to restrict their ability to create functional and secure applications; if our solution lacks necessary features, developers may be tempted to bypass it, just as they currently do with built-in SSL code.

### Summary of Desired Features for SSL Validation

1. **Self-Signed Certificates – Development:**
   - Developers often use self-signed certificates for testing and wish to disable certificate validation during this phase.

2. **Self-Signed Certificates – Production:**
   - Some developers prefer using self-signed certificates in production due to cost and effort considerations.

3. **Certificate Pinning / Trusted Roots:**
   - Developers appreciate having an easy way to limit the number of trusted certificates and/or certificate authorities.

4. **Global Warning Message:**
   - Developers request global SSL warning messages, as creating custom warnings is too challenging.

5. **Code Complexity:**
   - The code-level customization features of SSL are seen as overly complex and time-consuming.

In addition to these developer requirements, we include a user requirement for how SSL is handled in apps. Drawing from the related area of SSL handling in browsers, where websites cannot prevent the browser from warning users about unsafe connections, we propose that developers should not have the power to define SSL policies for an app without transparency for the user.

**User Protection:**
- Developer capabilities should be limited to prevent them from invisibly putting user information at risk.

### Proposed Changes to SSL Usage on App Platforms

To achieve these features, several changes to SSL usage on app platforms are necessary. We propose a paradigm shift: instead of allowing all developers to implement their own SSL code (which can lead to vulnerabilities), the main SSL usage patterns should be provided by the operating system as a service. This service can be added to apps via configuration rather than implementation. This shift in responsibility is radical but justified by the evidence. Our system evaluation (Section 6) shows that this approach is both technically feasible and acceptable to developers.

**Configuration Instead of Implementation:**
- This approach allows developers to disable SSL certificate validation for their app on their device during development, enabling the use of self-signed certificates. This change does not affect the installation of the app on a user's device. Surprisingly, none of the major mobile or desktop operating systems currently provide this feature, despite its potential benefits.

The platform should offer configurable options for the new SSL service, ensuring that developers cannot and need not circumvent security features at the code level. Removing the need to tinker with SSL security aspects for testing will significantly reduce the number of vulnerable apps and protect users from developers who may not fully understand SSL.

### Implementation on Android

Figure 1 provides a high-level overview of the modifications we implemented to create the proposed SSL service on Android. The white boxes represent classes we modified or created, while the dashed lines indicate Android components that were bypassed due to security concerns. The grey boxes contain comments on the functions of different components. The start arrow indicates the entry point where app code transfers control to the central SSL system.

#### Features

1. **Mandatory SSL Validation:**
   - We propose removing the capability and need to customize SSL certificate validation and hostname verification at the source code level. Instead, SSL certificate validation should be enforced automatically for every SSL handshake, considering different usage scenarios like development and production.

2. **Self-Signed Certificates:**
   - To allow developers to use self-signed certificates for testing, we add a new option in the Developer settings. This option, monitored by the TrustManagerService, disables certificate validation for specific apps on the developer's device. These settings only affect the specific app on the developer's device, ensuring that apps on user devices remain secure even if developers forget to re-enable validation.

This feature effectively protects users from forgetful developers and addresses many of the issues we identified in our study.