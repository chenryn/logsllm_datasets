**作者：Orange Tsai  
博客：**
在 Web Security 中，我喜欢伺服器端的漏洞更胜于客户端的漏洞!(当然可以直接拿 shell 的客户端洞不在此限XD)
因为可以直接控制别人的伺服器对我来说更有趣! 正因如此，我以往的文章对于 XSS 及 CSRF 等相关弱点也较少著墨(仔细翻一下也只有 2018 年
Google CTF 那篇XD)，刚好这次的漏洞小小有趣，秉持著教育及炫耀(?)的心态就来发个文了XD
最近需要自架共笔伺服器，调查了一些市面上支援 Markdown 的共笔平台，最后还是选择了国产的 [HackMD](https://hackmd.io/
"HackMD")! 当然，对于自己要使用的软体都会习惯性的检视一下安全性，否则怎么敢放心使用? 因此花了约半天对 HackMD
进行了一次原始码检测(Code Review)!
[HackMD](https://hackmd.io/ "HackMD") 是一款由台湾人自行研发的线上 Markdown
共笔系统，除了在台湾资讯圈流行外，也被许多台湾研讨会如 COSCUP, g0v 或 HITCON 等当成官方的共笔存放地点，甚至还是
[Ethereum](https://www.ethereum.org/ "Ethereum") 的协作平台!
除了云端使用及企业方案外，整份原始码也很佛心的开放出来在 [GitHub](https://github.com/hackmdio/codimd
"GitHub") 上(4500 多颗星! 最近也才知道原来 HackMD 在中国及欧洲也有许多死忠用户!)，算是很回馈台湾资讯社群的一个厂商!
平心而论，HackMD 整体程式码品质不低，所以并没有甚么太严重的弱点，不过你也知道 XSS 不是那种想防就防得了的问题，综观 HackMD
历年来关于[安全相关的问题](https://github.com/hackmdio/codimd/issues?utf8=%E2%9C%93&q=XSS
"安全相关的问题")，发现都是一些老手法如 `javascript:alert(1)` 或 `onclick`
,`onload`等，所以相较之下这个漏洞算是比较有趣的一个 XSS，视攻击方式甚至可以达到像是 [Samy
Worm](https://en.wikipedia.org/wiki/Samy_\(computer_worm\) "Samy Worm") 等 [XSS
蠕虫](https://en.wikipedia.org/wiki/XSS_worm "XSS 蠕虫")的感染效果!
P.S. 其实本来没有要找 XSS 的，但看到写法就觉得一定有问题，跳下去看后漏洞就自己跑出来了 ╮(╯_╰)╭
### 漏洞成因
(以下皆以 [CodiMD 版本 1.2.1](https://github.com/hackmdio/codimd/tree/1.2.1 "CodiMD
版本 1.2.1") 来进行解说)
最初是看到 HackMD 在前端渲染 Markdown 时的 XSS 防御所引起我的兴趣，由于 HackMD 允许嵌入客制化的网页标签，为了防止 XSS
的问题势必得对 HTML 进行过滤，这里 HackMD 使用了一个 XSS 防御函示库 [\- npm/xss](https://jsxss.com/ "-npm/xss") 来防御! 从相关的文档及 GitHub 上的 Issue 及星星数观察看起来是一个很成熟的 XSS 防御函示库，找到问题的话也是
0day 等级，不过只是随手看看而已没必要还帮帮第三方函示库找 0day 吧?
因此把焦点放到函示库的使用上，再安全的函示库碰到不安全的用法也会无用武之地，这也是为什么要找[专业骇客](http://devco.re/
"专业骇客")的缘故!(置入性行销XD) 整个 HackMD 使用到 npm/xss 的位置位于
[public/js/render.js](https://github.com/hackmdio/codimd/blob/1.2.1/public/js/render.js
"public/js/render.js") 的 `preventXSS` 中，第一眼看到这段程式码就直觉一定会有问题!
    var filterXSSOptions = {
      allowCommentTag: true,
      whiteList: whiteList,
      escapeHtml: function (html) {
        // allow html comment in multiple lines
        return html.replace(//g, '-->').replace(/>/g, '&gt;').replace(/-->/g, '-->')
      },
      onIgnoreTag: function (tag, html, options) {
        // allow comment tag
        if (tag === '!--') {
                // do not filter its attributes
          return html
        }
      },
      onTagAttr: function (tag, name, value, isWhiteAttr) {
        // allow href and src that match linkRegex
        if (isWhiteAttr && (name === 'href' || name === 'src') && linkRegex.test(value)) {
          return name + '="' + filterXSS.escapeAttrValue(value) + '"'
        }
        // allow data uri in img src
        if (isWhiteAttr && (tag === 'img' && name === 'src') && dataUriRegex.test(value)) {
          return name + '="' + filterXSS.escapeAttrValue(value) + '"'
        }
      },
      onIgnoreTagAttr: function (tag, name, value, isWhiteAttr) {
        // allow attr start with 'data-' or in the whiteListAttr
        if (name.substr(0, 5) === 'data-' || window.whiteListAttr.indexOf(name) !== -1) {
          // escape its value using built-in escapeAttrValue function
          return name + '="' + filterXSS.escapeAttrValue(value) + '"'
        }
      }
    }
    function preventXSS (html) {
      return filterXSS(html, filterXSSOptions)
    }
为了提供开发者可以自由的客制化过滤的处理，npm/xss 提供了多个不同的选项给开发者，而其中在 `onIgnoreTag` 这个 callback
中，开发者判断了如果是注解的标签便直接回传原始的 HTML 内容，在 JavaScript 上的注解也写得很直白!
> do not filter its attributes
可以想像开发者原本的用意应该是希望保留注解原本的内容! 既然它这么相信注解中的内容，那我们来看一下是否可以从注解标签中去污染 DOM 的渲染!
我们构造如下的 HTML 内容:
     Hi" -->
把 `bar--> ...` 当成一个属性的值，并在这个值中使用 `-->` 去闭合前方的注解标签，如此一来便轻松地绕过只允许信任的 HTML
标签及属性，去插入恶意的 HTML 代码!
### 绕过 CSP 政策
到这里，你可能以为已经结束了，闭合前方的 `
        {{constructor.constructor('alert(document.cookie)')()}}
    //sssss" -->
这里也展示了当与骇客同时编辑一份共笔时，对当前线上文件的所有人发动攻击:
P.S. 这个漏洞已经在最新版 CodiMD 中修复了，详情可以参考 [pull
request](https://github.com/hackmdio/codimd/pull/1112)
* * *