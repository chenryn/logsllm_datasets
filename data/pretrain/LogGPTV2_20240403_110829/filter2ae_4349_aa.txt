**Author：SungLin @ Knownsec 404 Team  
Date：2019/09/18  
Chinese Version: **
# 0x00 Channel Creation, Connection and Release
The channel's data packet is defined in the MCS Connect Inittial PDU with GCC
Conference Create Request. The RDP connection process is shown in the
following figure:
![
](https://images.seebug.org/content/images/2019/09/875ffe2f-8970-4a71-944a-8e57e66419c9.png-w331s)
The format of the packet is as follows:
![
](https://images.seebug.org/content/images/2019/09/67bfb853-923a-4713-b454-eedcedfe8690.png-w331s)
In MCS Connect Initial, which belongs to the Client Network Data data segment,
`MS_T120` will create a structure with a virtual channel id of 0x1f and size
0x18 by the function `termdd!_IcaRegisterVcBin` at the beginning of the
connection. Then it will call `termdd!IcaCreateChannel` to start creating a
channel structure with size in 0x8c, and it will be bound to the virtual
channel (id 0x1f).
![
](https://images.seebug.org/content/images/2019/09/3da4ddff-9147-425a-98cb-63fd18817561.png-w331s)
The definition field of the channel is mainly its name plus the configuration,
and the configuration includes the priority, etc.
![
](https://images.seebug.org/content/images/2019/09/4c684559-17fb-4ada-8783-119605ab21d6.png-w331s)
In the response packet sent by server to MCS Connect Inittial, the id of the
corresponding virtual channel will be given in turn:
![
](https://images.seebug.org/content/images/2019/09/8399d56d-a63c-4e5e-9379-ac1ed5f75f1b.png-w331s)
The values registered in the RDP kernel should be 0, 1, 2, and 3, and the
MS_T120 channel will be bound again by the value we’ve sent (its id is 3).
First, we found the registration just started by `termdd!_IcaFindVcBind`. The
virtual channel id is 0x1f as follows:
![
](https://images.seebug.org/content/images/2019/09/30c7c24c-e2f6-4a9e-834f-5ffcff061b0b.png-w331s)
But in `termdd!_IcaBindChannel`, we have our custom id value of 3 and the
channel structure body once again bound, this channel structure is MS_T120
![
](https://images.seebug.org/content/images/2019/09/37334a80-917c-42c6-bc32-7b32a95c471a.png-w331s)
At the same time, our own user id will overwrite 0x1f.
![
](https://images.seebug.org/content/images/2019/09/ef13896d-dd82-44a4-afd4-61baed01c3f1.png-w331s)
We send data to the channel MS_T120 to actively release its allocated
structure, and its incoming virtual channel id value is 3. The function
returns the corresponding channel structure in the channeltable by the
function `termdd!IcaFindChannel`:
![
](https://images.seebug.org/content/images/2019/09/37329360-87ff-41e8-be59-d1cdb08a3367.png-w331s)
The following figure shows the returned MS_T120 channel structure, where
0xf77b4300 is an array of function pointers that can be called for this
channel:
![
](https://images.seebug.org/content/images/2019/09/48865276-a416-4b76-b675-a827b0c52d05.png-w331s)
In this function pointer array, there are mainly three functions:
`termdd!IcaCloseChannel`, `termdd!IcaReadChannel`, `termdd!IcaWriteChannel`
![
](https://images.seebug.org/content/images/2019/09/1fbba492-81a0-4a02-87a3-f1e326df08fd.png-w331s)
The data we have released to release the MS_T120 channel is as follows, the
byte size is 0x12, and the main data corresponds to 0x02.
![
](https://images.seebug.org/content/images/2019/09/761329ec-0f71-429f-bb19-dbc3c654e38c.png-w331s)
After that, I will enter the `nt! IofCompleteRequest` function. After apc
injection, it will respond to the data request through `nt!
IopCompleteRequest` and `nt!IopAbortRequest`, and finally complete the request
for sending data in `termdd!IcaDispatch`. ``_BYTE v2` is the data we send, so
the data 0x02 we sent will eventually call the IcaClose function to enter the
IcaCloseChannel function, and finally release the `MS_T120` channel structure.
![
](https://images.seebug.org/content/images/2019/09/7f6414b9-4ee6-441f-85c6-c13c6b55472e.png-w331s)
![
](https://images.seebug.org/content/images/2019/09/f6022d24-1974-483c-812a-1df106db9f8c.png-w331s)
# 0x01 Data Occupancy Through the RDPDR Channel
Let's first get to know about the RDPDR channel. First, the RDPDR channel is
File System Virtual Channel Extension, which runs over a static virtual
channel with the name RDPDR. Its purpose is to redirect access from the server
to the client file system.
![
](https://images.seebug.org/content/images/2019/09/215c851b-d7fa-4a8b-aa41-71fa873ff775.png-w331s)
Here we just use the data of the Client Name Request to make the memory in the
pool.
![
](https://images.seebug.org/content/images/2019/09/e73ccc73-c729-4d99-9ac5-1a5600cf1643.png-w331s)
After the connection is fully established, the structure of the RDPDR channel
will be created.
![
](https://images.seebug.org/content/images/2019/09/722a1a88-0a55-47f2-86d9-4891684a6709.png-w331s)
In Windows 7, after receiving the RDPDR request from the server after the
establishment is completed, by sending the client name response data, it will
call the non-paged pool memory in the `termdd! IcaChannelInputInternal`, and
the length is we can control. Meet the needs of UAF utilization:
![
](https://images.seebug.org/content/images/2019/09/91286064-8fb6-4a7a-9ef8-e8f6f4fcf946.png-w331s)
However, in windowsxp, directly sending the client name request will cause the
memory allocation to fail. It will directly go into the `termdd!
_IcaCopyDataToUserBuffer`, Tao Yan and Jin Chen [1] also mentioned that by
sending the client name request after triggering certain conditions, we will
bypass the `termdd!_IcaCopyDataToUserBuffer` and enter ExAllocatePoolWithTag
to allocate the non-paged memory we want. Here is how to break this condition:
![
](https://images.seebug.org/content/images/2019/09/1770153a-ffc4-4ea6-b942-733b048f43cd.png-w331s)
Let's first look at the creation of the initial channel structure. We can see
that when the channel structure is created from the beginning, two flags will
appear, and the two flags are arranged in the order of addresses. And as long
as the address of channelstruct +0x108 is stored in the same address, the loop
will be broken.
![
](https://images.seebug.org/content/images/2019/09/572d112f-67e0-468c-9097-8616677a57b5.png-w331s)
We send a normal RDPDR name request packet with the header identifiers 0x7244
and 0x4e43
After `termdd!_IcaCopyDataToUserBuffer`, it will enter `nt!IofCompleteRequest`
and enter `rdpdr!DrSession::ReadCompletion` after responding to the request.
The function of this function is as follows. It will traverse a linked list