### Privacy-Preserving Protocol for Disease Susceptibility Testing

**Figure 1: Privacy-Preserving Protocol for Disease Susceptibility Test**

- **Distribution, Update, and Revocation of Cryptographic Keys:** These are managed by a trusted entity, similar to e-banking platforms.

#### Protocol Steps:

1. **Sample Collection:**
   - The patient (P) provides a biological sample (e.g., saliva) to the Certified Institution (CI) for sequencing.

2. **Whole Genome Sequencing and Encryption:**
   - The CI performs whole genome sequencing with the patient's consent.
   - The CI encrypts the states of the patient’s real and potential SNP positions (in {ΥP ∪ ΩP}) using P’s public key.
   - A modified Paillier cryptosystem is used to support homomorphic operations (addition and multiplication).
   - The patient’s complete DNA sequence is also encrypted as a single vector file and stored at the SPU for future SNP updates.

3. **Data Transfer to SPU:**
   - The CI sends the encrypted SNPs of P to the SPU, ensuring that the SPU cannot access P’s SNPs directly.

4. **Secret Key Sharing:**
   - The patient’s weak secret key x is divided into two shares: x(1) and x(2) (such that x = x(1) + x(2)).
   - x(1) is given to the SPU, and x(2) is given to the Medical Center (MC) in the next step.
   - Using the Paillier cryptosystem, an encrypted message can be partially decrypted by the SPU using x(1) and fully decrypted by the MC using x(2).

5. **Request for Susceptibility Test:**
   - The MC requests a susceptibility test for disease X, and P provides x(2) to the MC.

6. **Genetic Marker Contribution:**
   - The MC provides genetic variant markers and their contributions to the SPU.

7. **Disease Susceptibility Computation:**
   - Depending on the access rights and the nature of the test, the SPU either:
     - (i) Computes the probability Pr(X) that the patient will develop disease X by checking the patient’s encrypted SNPs via homomorphic operations, or
     - (ii) Provides the relevant SNPs to the MC for complex diseases that require more detailed analysis.
   - Access rights are defined jointly by the MC and the patient or by medical authorities.

8. **Partial Decryption by SPU:**
   - The SPU partially decrypts the end-result (or the relevant SNPs) using x(1) following the proxy re-encryption protocol.

9. **Data Transfer to MC:**
   - The SPU sends the partially decrypted end-result (or the relevant SNPs) to the MC.

10. **Final Decryption by MC:**
    - The MC decrypts the message received from the SPU using x(2) and recovers the end-result (or the relevant SNPs).

### Computing Disease Susceptibility at the SPU

To compute the predicted disease susceptibility at the SPU, we use homomorphic operations. Different functions can be used, such as counting unfavorable alleles or multiplying likelihood ratios of important SNPs. We use a weighted averaging function, which computes the predicted susceptibility by weighting the contributions of SNPs.

Assume the susceptibility to disease X is determined by the set of SNPs Ω = {SNPm, SNPn}. The contributions of different states of SNPPi (i ∈ {m, n}) to the susceptibility to disease X are known by the MC. The SPU uses P’s encrypted SNPs (E(SNPPm, gx) and E(SNPPn, gx)) and the MC provides the markers, probabilities, and contributions in plaintext.

The SPU encrypts j (j ∈ {0, 1}) using P’s public key to obtain E(0, gx) and E(1, gx) for homomorphic computations. The predicted susceptibility SX_P is computed as follows:

\[ S_{X_P} = \sum_{i \in \{m, n\}} C_{X_i} \left( p_{i0}(X) \times (0 - 1) \times (SNP_{Pi} - 1) + p_{i1}(X) \times (1 - 0) \times (SNP_{Pi} - 0) \right) \]

This computation can be performed using the encrypted SNPs and the homomorphic properties of the Paillier cryptosystem. The SPU partially decrypts the result using x(1) and sends it to the MC, which then decrypts it using x(2) to recover the final result.

### Implementation and Complexity Evaluation

We implemented the proposed solution and evaluated its performance on an Intel Core i7-2620M CPU with a 2.70 GHz processor. The security parameter (n in the Paillier cryptosystem) was set to 1024 bits. The implementation was done using Java and NetBeans IDE 7.1.1.

- **Paillier Encryption:** 30 ms per variant at the CI.
- **Proxy Re-Encryption:** 2 ms at the SPU.
- **Homomorphic Operations:** 10 sec at the SPU (using 10 variants).
- **Decryption of End-Result:** 26 ms at the MC.
- **Storage Requirement:** 5 GB per patient at the SPU.

These results demonstrate the practicality of our privacy-preserving algorithm.

### Conclusion

In this paper, we introduced a privacy-preserving scheme for utilizing genomic data in medical tests and personalized medicine. Our model involves a Storage and Processing Unit (SPU) between the patient and the medical unit. We showed that encrypted genomic data can be stored at the SPU and processed using homomorphic encryption and proxy re-encryption. The implementation demonstrated the efficiency and practicality of our scheme. We believe this approach will encourage the use of genomic data and accelerate its integration into clinical practice.

### References

[1] J. R. Troncoso-Pastoriza, S. Katzenbeisser, and M. Celik, “Privacy preserving error resilient DNA searching through oblivious automata,” CCS ’07: Proceedings of the 14th ACM Conference on Computer and Communications Security, pp. 519–528, 2007.

[2] M. Blanton and M. Aliasgari, “Secure outsourcing of DNA searching via finite automata,” DBSec’10: Proceedings of the 24th Annual IFIP WG 11.3 Working Conference on Data and Applications Security and Privacy, pp. 49–64, 2010.

[3] S. Jha, L. Kruger, and V. Shmatikov, “Towards practical privacy for genomic computation,” Proceedings of the 2008 IEEE Symposium on Security and Privacy, pp. 216–230, 2008.

[4] F. Bruekers, S. Katzenbeisser, K. Kursawe, and P. Tuyls, “Privacy-preserving matching of DNA profiles,” Tech. Rep., 2008.

[5] M. Kantarcioglu, W. Jiang, Y. Liu, and B. Malin, “A cryptographic approach to securely share and query genomic sequences,” IEEE Transactions on Information Technology in Biomedicine, vol. 12, no. 5, 2008.

[6] P. Baldi, R. Baronio, E. De Cristofaro, P. Gasti, and G. Tsudik, “Countering GATTACA: Efficient and secure testing of fully-sequenced human genomes,” CCS ’11: Proceedings of the 18th ACM Conference on Computer and Communications Security, pp. 691–702, 2011.

[7] M. Canim, M. Kantarcioglu, and B. Malin, “Secure management of biomedical data with cryptographic hardware,” IEEE Transactions on Information Technology in Biomedicine, vol. 16, no. 1, 2012.

[8] http://lca.epfl.ch/projects/genomic-privacy/

[9] S. Kathiresan, O. Melander, D. Anevski, C. Guiducci, and N. Burtt, “Polymorphisms associated with cholesterol and risk of cardiovascular events,” The New England Journal of Medicine, vol. 358.

[10] E. Ashley, A. Butte, M. Wheeler, R. Chen, and T. Klein, “Clinical assessment incorporating a personal genome,” The Lancet, vol. 375, no. 9725, pp. 1525–1535, 2010.

[11] http://www.ncbi.nlm.nih.gov/projects/SNP/, Visited on 29/Oct/2012.

[12] E. Bresson, D. Catalano, and D. Pointcheval, “A simple public-key cryptosystem with a double trapdoor decryption mechanism and its applications,” Proceedings of Asiacrypt 03, LNCS 2894, pp. 37–54, 2003.

[13] G. Ateniese, K. Fu, M. Green, and S. Hohenberger, “Improved proxy re-encryption schemes with applications to secure distributed storage,” ACM Transactions on Information and System Security, vol. 9, pp. 1–30, Feb. 2006.

[14] The 1000 Genomes Project Consortium, “A map of human genome variation from population-scale sequencing,” Nature, vol. 467, pp. 1061–1073, 2010.