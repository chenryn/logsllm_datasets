d
t
o
o
r
e
l
a
t
e
d
v
a
r
i
a
n
t
s
8
)
E
n
d
-
r
e
s
u
l
t
o
r
5) “Check my susceptibility to disease X”
and part of P‛s secret key, x(2)
Patient (P)
Medical Center
M di lC t
Malicious 3rd
(MC)
party
Fig. 1. Privacy-preserving protocol for disease-susceptibility test.
distribution, update and revocation of cryptographic keys are
handled by a trusted entity (similar to e-banking platforms).
• Step 1: The patient (P) provides his sample (e.g., his saliva)
to the Certiﬁed Institution (CI) for sequencing.
• Step 2: The whole genome sequencing is done by the CI
with the consent of the patient. Moreover, the CI encrypts
the states of the patient’s real and potential SNP positions (in
{ΥP ∪ ΩP }) by using P’s public key. We use a modiﬁcation of
the Paillier cryptosystem [12], [13] (for encryption) to support
the homomorphic operations (i.e., addition of two encrypted
messages and multiplication of an encrypted message with
a constant) at the SPU. The public key of the patient P is
represented as (n, g, h = gx), where the strong secret key is
the factorization of n = pq (p, q are safe primes), the weak
secret key is x ∈ [1, n2/2], and g of order (p − 1)(q − 1)/2.
We are aware that the number of discovered SNPs increases
with time. Thus, the patient’s complete DNA sequence is also
encrypted as a single vector ﬁle (via symmetric encryption
using the patient’s key) and stored at the SPU, thus when new
SNPs are discovered, these can be included in the pool of the
previously stored SNPs of the patient.
• Step 3: The CI sends the encrypted SNPs of P to the SPU
(so that the SPU cannot access to P’s SNPs).
• Step 4: The patient’s weak secret key x is randomly divided
into two shares: x(1) and x(2) (such that x = x(1) + x(2)).
x(1) is given to the SPU (at this step) and x(2) is given to
the MC (at the next step). Using the Paillier cryptosystem,
an encrypted message (under the patient’s public key) can
be partially decrypted by the SPU using x(1) (i.e., proxy re-
encryption), and then decrypted at the MC using x(2) to recover
the original message.
• Step 5: The MC wants to conduct a susceptibility test on P
to a particular disease X, and P provides the other part of his
secret key (x(2)) to the MC.
• Step 6: The MC provides genetic variant markers, along with
their contributions (to the disease susceptibility), to the SPU.
• Step 7: Depending on the access rights of the MC and
the virtue of the test, the SPU either (i) computes Pr(X),
the probability that the patient will develop the disease X
by checking the patient’s encrypted SNPs via homomorphic
operations (as discussed in Section II-B), or (ii) provides the
relevant SNPs to the MC (e.g., for complex diseases that cannot
be interpreted using homomorphic operations). These access
rights are deﬁned either jointly by the MC and the patient or
by the medical authorities.
• Step 7: The SPU partially decrypts the end-result (or the
relevant SNPs) using a part of P’s secret key (x(1)) following
the proxy re-encryption protocol.
• Step 8: The SPU sends the partially decrypted end-result (or
the relevant SNPs) to the MC.
• Step 9: The MC decrypts the message received from the
SPU using the other part of P’s secret key (x(2)) and recovers
the end-result (or the relevant SNPs).
B. Computing Disease Susceptibility at the SPU
In the following, we discuss how to compute the predicted
disease susceptibility at the SPU by using homomorphic opera-
tions. There are different functions for computing the predicted
susceptibility (e.g., counting the number of unfavorable alle-
les [9] or multiplying likelihood ratios of the most important
SNPs for a particular disease [10]). We use the weighted
averaging function (which is an advanced version of [9])
which computes the predicted susceptibility by weighting the
contributions of SNPs by their contributions. We note that the
function proposed in [10] can also be utilized similarly.
Assume that the susceptibility to disease X is determined by
the set of SNPs Ω = {SNPm,SNPn}, which occur at particular
positions of the DNA sequence. The contributions of different
states of SNPP
i for i ∈ {m, n} to the susceptibility to disease X
are computed via previous studies and they are already known
by the MC. That is, pi
1(X) !
Pr(X|SNPP
i = 1) (i ∈ {m, n}) are determined and known by
the MC. Further, the contribution of SNPi to the susceptibility
to disease X is denoted by CX
i .
0(X) ! Pr(X|SNPP
i = 0) and pi
The SPU uses P’s encrypted SNPs (E(SNPP
m, gx) and
E(SNPP
n , gx)) for the computation of predicted susceptibility
of P to disease X. Similarly, the MC provides the following to
the SPU in plaintext: (i) the markers for disease X (SNPm and
SNPn), (ii) corresponding probabilities (pi
j(X), i ∈ {m, n} and
j ∈ {0, 1}), and (iii) the contributions of each SNP (CX
i ). Next,
the SPU encrypts j (j ∈ {0, 1}) using P’s public key to obtain
E(0, gx) and E(1, gx) for the homomorphic computations. The
SPU computes the predicted susceptibility of the patient P to
disease X by using weighted averaging. This can be computed
in plaintext as below:
SX
P =
!i∈m,n
1
×
CX
m + CX
n
0(X)
i " pi
CX
(0 − 1) #SNPP
i − 1$ +
pi
1(X)
(1 − 0) #SNPP
i − 0$% .
(1)
The computation in (1) can easily be realized using the
encrypted SNPs of the patient (and utilizing the homomor-
phic properties of the Paillier cryptosystem) to compute the
encrypted disease susceptibility, E(SX
the SPU
P , gx) using its share (x(1))
partially decrypts the end-result E(SX
P , gx(2)
of P’s secret key (x) to obtain E(SX
) and sends it to
P , gx(2)
the MC. Finally, the MC decrypts E(SX
) using its share
(x(2)) of P’s secret key to recover the end-result SX
P .
P , gx). Then,
III. IMPLEMENTATION AND COMPLEXITY EVALUATION
We implemented the proposed solution, and assessed its
storage requirement and computational complexity on Intel
Core i7-2620M CPU with 2.70 GHz processor. We set the
size of the security parameter (n in Paillier cryptosystem)
to 1024 bits. We computed the disease susceptibility using
weighted averaging and real SNP proﬁles from [14]. We used
the Java programming language along with the open-source
Integrated Development Environment, NetBeans IDE 7.1.1.,
for the implementation of the Java code.
We observed that (i) Paillier encryption takes 30 ms. per
variant at the CI, (ii) proxy re-encryption takes 2 ms. at the
SPU, (iii) homomorphic operations takes 10 sec. at the SPU
(using 10 variants), and (iv) decryption of the end-result (or
relevant SNPs) takes 26 ms. at the MC. Moreover, storage
of the SNPs at the SPU needs 5 GB of storage per patient.
In summary, all these numbers show the practicality of our
privacy-preserving algorithm.
IV. CONCLUSION
In this paper, we have introduced a privacy-preserving
scheme for the utilization of genomic data in medical tests
and personalized medicine methods. We have proposed a new
model based on the existence of a Storage and Processing
Unit (SPU) between the patient and the medical unit. We have
shown that encrypted genomic data of the patients can be stored
at the SPU and processed (for medical tests and personalized
medicine methods) using homomorphic encryption and proxy
re-encryption. We also implemented the proposed scheme and
showed its efﬁciency and practicality. We are conﬁdent that our
proposed privacy-preserving scheme will encourage the use of
genomic data, by the individual and by the medical unit, and
accelerate the move of genomics into clinical practice.
REFERENCES
[1] J. R. Troncoso-Pastoriza, S. Katzenbeisser, and M. Celik, “Privacy
preserving error resilient DNA searching through oblivious automata,”
CCS ’07: Proceedings of the 14th ACM Conference on Computer and
Communications Security, pp. 519–528, 2007.
[2] M. Blanton and M. Aliasgari, “Secure outsourcing of DNA searching
via ﬁnite automata,” DBSec’10: Proceedings of the 24th Annual IFIP
WG 11.3 Working Conference on Data and Applications Security and
Privacy, pp. 49–64, 2010.
[3] S. Jha, L. Kruger, and V. Shmatikov, “Towards practical privacy for
genomic computation,” Proceedings of the 2008 IEEE Symposium on
Security and Privacy, pp. 216–230, 2008.
[4] F. Bruekers, S. Katzenbeisser, K. Kursawe, and P. Tuyls, “Privacy-
preserving matching of DNA proﬁles,” Tech. Rep., 2008.
[5] M. Kantarcioglu, W. Jiang, Y. Liu, and B. Malin, “A cryptographic
approach to securely share and query genomic sequences,” IEEE Trans-
actions on Information Technology in Biomedicine, vol. 12, no. 5, 2008.
[6] P. Baldi, R. Baronio, E. De Cristofaro, P. Gasti, and G. Tsudik,
“Countering GATTACA: Efﬁcient and secure testing of fully-sequenced
human genomes,” CCS ’11: Proceedings of the 18th ACM Conference
on Computer and Communications Security, pp. 691–702, 2011.
[7] M. Canim, M. Kantarcioglu, and B. Malin, “Secure management of
biomedical data with cryptographic hardware,” IEEE Transactions on
Information Technology in Biomedicine, vol. 16, no. 1, 2012.
[8] http://lca.epﬂ.ch/projects/genomic-privacy/.
[9] S. Kathiresan, O. Melander, D. Anevski, C. Guiducci, and N. Burtt,
“Polymorphisms associated with cholesterol and risk of cardiovascular
events,” The New England Journal of Medicine, vol. 358.
[10] E. Ashley, A. Butte, M. Wheeler, R.Chen, and T. Klein, “Clinical
assessment incorporating a personal genome,” The Lancet, vol. 375, no.
9725, pp. 1525–1535, 2010.
[11] http://www.ncbi.nlm.nih.gov/projects/SNP/, Visited on 29/Oct/2012.
[12] E. Bresson, D. Catalano, and D. Pointcheval, “A simple public-key
cryptosystem with a double trapdoor decryption mechanism and its
applications,” Proceedings of Asiacrypt 03, LNCS 2894, pp. 37–54, 2003.
[13] G. Ateniese, K. Fu, M. Green, and S. Hohenberger, “Improved proxy
re-encryption schemes with applications to secure distributed storage,”
ACM Transactions on Information and System Security, vol. 9, pp. 1–30,
Feb. 2006.
[14] The 1000 Genomes Project Consortium, “A map of human genome
variation from population-scale sequencing,” Nature, vol. 467, pp. 1061–
1073, 2010.