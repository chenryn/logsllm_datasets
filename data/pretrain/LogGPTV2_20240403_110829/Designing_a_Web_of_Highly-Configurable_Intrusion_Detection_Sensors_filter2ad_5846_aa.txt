# Designing a Web of Highly-Configurable Intrusion Detection Sensors

**Authors:**
- Giovanni Vigna
- Richard A. Kemmerer
- Per Blix

**Affiliation:**
Reliable Software Group, Department of Computer Science, University of California, Santa Barbara
- Email: {vigna, kemm, perbli}@cs.ucsb.edu

## Abstract
Intrusion detection systems (IDS) rely on a network of sensors deployed across the monitored infrastructure. These sensors provide information at varying abstraction levels and with different semantics, ranging from lightweight probes to complex software that performs sophisticated analysis. Managing such a heterogeneous sensor configuration can be very time-consuming, involving tasks like planning, deployment, initial configuration, and runtime modifications. This paper introduces a new approach that leverages the STAT model to support a highly configurable sensing infrastructure. The approach is based on a common sensor model, an explicit representation of sensor component characteristics and dependencies, and a shared communication and control infrastructure. This allows an IDS administrator to express high-level configuration requirements, which are automatically mapped to detailed deployment and/or reconfiguration plans. The proposed method supports automation of administrative tasks and ensures the effectiveness and consistency of the deployed sensing infrastructure.

**Keywords:** Security, Software Engineering, Intrusion Detection, STAT

## 1. Introduction
Monitoring and surveillance functionalities in intrusion detection systems (IDS) depend on the analysis performed by various sensors. The IDS community has developed numerous systems for specific domains (e.g., hosts or networks) and environments (e.g., Windows NT or Solaris). However, these tools have two main limitations: they are often developed ad hoc for certain types of domains and/or environments, and they are difficult to configure, extend, and control remotely.

For signature-based IDS [1,2,3,4], sensors are equipped with signatures matched against incoming events. Most systems (e.g., [1]) are initialized with a set of signatures at startup. Updating the signature set requires stopping the sensor, updating the signatures, and then restarting it. Some tools allow enabling or disabling signatures, but few support dynamic inclusion of new signatures during execution. Additionally, existing tools do not allow dynamic reconfiguration of running sensors to use new event streams for security analysis.

Another limitation is the static nature of response configurations. Typically, only a subset of possible responses can be chosen, and no system allows associating a response with intermediate steps of an attack. This is particularly problematic for distributed attacks over long periods.

Finally, the configuration of existing tools is mainly manual and at a low level, making it error-prone, especially in heterogeneous environments. Determining the validity and meaningfulness of current configurations is a significant challenge.

This paper describes a novel approach to distributed intrusion detection using a "web of sensors" composed of distributed components integrated via a local communication and control infrastructure. The web of sensors provides fine-grained surveillance within the protected network, complementing traditional single-point monitoring. Alerts from the sensors are collected by "meta-sensor" components, which store, route, and control the managed sensors.

Control is a critical and often overlooked aspect of distributed surveillance. Existing approaches aggregate sensor outputs and focus on presenting alerts to the network security officer, which is insufficient. Fine-grained control over deployed sensors, including scenarios to detect, tailoring to the protected network, and dynamic response types, is essential. This requires highly configurable and dynamically reconfigurable sensors.

We have designed a suite of highly configurable sensors and a command and control meta-sensor, allowing the network security officer to exert fine-grained control over the surveillance infrastructure. Meta-sensors can be organized hierarchically for scalability and replicated for fault tolerance. This web of sensors is built around the State Transition Analysis Technique (STAT) framework developed by the Reliable Software Group at UCSB. The STAT framework provides a platform for developing highly configurable probes in different domains and environments.

The approach enables runtime reconfiguration of input event streams, detection scenarios, and response types. It models dependencies among sensor modules, allowing automatic identification of necessary reconfiguration steps. Retrieving current configurations from remote sensors helps determine the validity and meaningfulness of reconfigurations.

The remainder of the paper is structured as follows: Section 2 presents the fundamental elements of the STAT approach. Section 3 describes the structure of STAT-based sensors. Section 4 discusses module dependencies and valid/meaningful configurations. Section 5 explains how dependencies are used during reconfiguration. Section 6 concludes and outlines future work.

## 2. The STAT Framework
The STAT framework evolved from the original STAT technique and its application to UNIX systems [5,6,7] into a general framework for developing STAT-based IDS sensors [8].

### 2.1 The STAT Technique
STAT represents high-level descriptions of computer attacks. Attack scenarios are abstracted into states, which describe the security status of a system, and transitions, which model the evolution between states. By abstracting from specific exploits and modeling key events, STAT can represent entire classes of attacks, overcoming some limitations of signature-based misuse detection systems [9].

### 2.2 The STATL Language
STATL is an extensible language [10] used to represent STAT attack scenarios. It defines domain-independent features of the STAT technique. STATL can be extended to express characteristics of a particular domain and environment. For example, to extend STATL for Apache logs, one would define events with fields like host, ident, authuser, date, request, status, and bytes, and predicates like isCGIrequest().

Event and predicate definitions are grouped in a language extension, which can be included in a STATL scenario description using the STATL use keyword. Extensions for TCP/IP networks, Sun BSM audit records [12], and Windows NT event logs have been developed.

STATL scenarios are compiled into scenario plugins (shared libraries) and matched against event streams by the STAT core. Each language extension must also be compiled into an extension module (shared library).

### 2.3 The STAT Core
The STAT core is the runtime of the STATL language, implementing domain-independent features like state, transition, timer, and event matching. At runtime, the STAT core matches incoming event streams against scenario plugins, dynamically extending the core to build a STAT-based sensor.

### 2.4 The CommSTAT Communication Infrastructure
CommSTAT connects STAT-based sensors, allowing secure exchange of alert messages and control directives. Messages follow the IDMEF format [13], extended to include STAT-related control messages (e.g., x-stat-scenario-activate). A CommSTAT proxy preprocesses messages and integrates third-party tools.

### 2.5 The MetaSTAT Control Infrastructure
MetaSTAT uses CommSTAT to control a set of sensors. It collects and stores alerts in a MySQL database, routes alerts to sensors and other MetaSTAT instances, maintains a module database of available and dependent modules, and manages a sensor database of current sensor configurations.

## 3. STAT Sensors
STAT sensors perform localized security analysis of event streams (e.g., OS audit records, network traffic, application logs, system calls). The architecture is centered around the STAT core, which is extended with modules determining the sensor's capabilities and behavior. Configuration can be changed at runtime through MetaSTAT control directives.

An incremental configuration process illustrates the role of each sensor module and the high configurability and dependencies. A bare sensor contains only the STAT core. Adding an event provider allows the sensor to receive and queue events. Including a scenario plugin enables the sensor to match events against predefined scenarios. Response functions can be added to execute actions based on detected scenarios.

Figure 2 shows the evolution of a STAT-based sensor, from a bare sensor to a fully configured one with event providers, scenario plugins, and response functions.

[Figure 2: Evolution of a STAT-based sensor]

## 4. Module Dependencies and Valid Configurations
Module dependencies are explicitly modeled to ensure that reconfigurations are valid and meaningful. Dependencies include both inter-module and environmental dependencies. The MetaSTAT component uses these dependencies to plan and validate reconfigurations.

## 5. Reconfiguration Process
During reconfiguration, MetaSTAT sends control directives to update the sensor's configuration. Dependencies are used to determine the necessary steps and ensure the new configuration is valid. For example, adding a new scenario plugin may require loading additional language extensions or event providers.

## 6. Conclusions and Future Work
This paper introduced a novel approach to distributed intrusion detection using a web of highly configurable sensors. The STAT framework provides the foundation for this approach, enabling fine-grained control and dynamic reconfiguration. Future work will focus on further enhancing the scalability, fault tolerance, and integration with other security tools.

**References:**
[1] - [13] (Citations for the referenced works)

---

This optimized version of the text is more structured, clear, and professional, with improved readability and coherence.