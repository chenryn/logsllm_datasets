title:Designing a Web of Highly-Configurable Intrusion Detection Sensors
author:Giovanni Vigna and
Richard A. Kemmerer and
Per Blix
Designing a Web of Highly-Conﬁgurable
Intrusion Detection Sensors
Giovanni Vigna, Richard A. Kemmerer, and Per Blix
Reliable Software Group
Department of Computer Science
University of California Santa Barbara
{vigna,kemm,perbli}@cs.ucsb.edu
Abstract. Intrusion detection relies on the information provided by
a number of sensors deployed throughout the monitored network
infrastructure. Sensors provide information at diﬀerent abstraction
levels and with diﬀerent semantics. In addition, sensors range from
lightweight probes and simple log parsers to complex software artifacts
that perform sophisticated analysis. Managing a conﬁguration of
heterogeneous sensors can be a very time-consuming task. Management
tasks include planning, deployment, initial conﬁguration, and run-time
modiﬁcations. This paper describes a new approach that leverages oﬀ
the STAT model to support a highly conﬁgurable sensing infrastructure.
The approach relies on a common sensor model, an explicit represen-
tation of sensor component characteristics and dependencies, and a
shared communication and control infrastructure. The model allows an
Intrusion Detection Administrator to express high-level conﬁguration
requirements that are mapped automatically to a detailed deployment
and/or reconﬁguration plan. This approach supports automation of
the administrator tasks and better assurance of the eﬀectiveness and
consistency of the deployed sensing infrastructure.
Keywords: Security, Software Engineering, Intrusion Detection, STAT.
1 Introduction
Any monitoring and surveillance functionality builds on the analysis performed
by surveillance sensors. The intrusion detection community has developed a
number of diﬀerent systems that perform intrusion detection in particular do-
mains (e.g., hosts or networks) and in speciﬁc environments (e.g., Windows NT
or Solaris).
These tools suﬀer from two main limitations: they are developed ad hoc for
certain types of domains and/or environments, and they are diﬃcult to conﬁgure,
extend, and control remotely. In the speciﬁc case of signature-based intrusion
detection systems [1,2,3,4] the sensors are equipped with a number of signatures
that are matched against a stream of incoming events. Most systems (e.g., [1])
are initialized with a set of signatures at startup time. Updating the signature
W. Lee, L. M´e, and A. Wespi (Eds.): RAID 2001, LNCS 2212, pp. 69–84, 2001.
c(cid:1) Springer-Verlag Berlin Heidelberg 2001
70
G. Vigna, R.A. Kemmerer, and P. Blix
set requires stopping the sensor, updating the signature set, and then restarting
execution. Some of these tools provide a way to enable/disable some of the
available signatures, but few systems allow for the dynamic inclusion of new
signatures at execution time. In addition, the ad hoc nature of existing tools
does not allow one to dynamically conﬁgure a running sensor so that a new
event stream can be used as input for the security analysis.
Another limit of existing tools is the relatively static conﬁguration of re-
sponses. First of all, as for signatures, normally it is possible to choose only from
a speciﬁc subset of possible responses. In addition, to our knowledge, no system
allows for associating a response with intermediate steps of an attack. This is a
severe limitation, especially in the case of distributed attacks carried out over a
long time span.
Finally, the conﬁguration of existing tools is mainly performed manually and
at a very low level. This task is particularly error-prone, especially if the intrusion
detection sensors are deployed across a very heterogeneous environment and
with very diﬀerent conﬁgurations. The challenge is to determine if the current
conﬁguration of one or more sensors is valid or if a reconﬁguration is meaningful.
In this paper, we describe a novel approach to distributed intrusion detection.
The idea is that a protected network is instrumented with a “web of sensors”
composed of distributed components integrated by means of a local communi-
cation and control infrastructure. The task of the web of sensors is to provide
ﬁne-grained surveillance inside the protected network. The web of sensors im-
plements local surveillance against both outside attacks and local misuse by
insiders in a way that is complementary to the mainstream approach where a
single point of access (e.g., a gateway) is monitored for possible malicious activ-
ity. The outputs of the sensors, in the form of alerts, are collected by a number of
“meta-sensor” components. Each meta-sensor is responsible for a subset of the
deployed sensors, and may coordinate its activities with other meta-sensors. The
meta-sensors are responsible for storing the alerts, for routing alerts to other sen-
sors and meta-sensors (e.g., to perform correlation to identify composite attack
scenarios), and for exerting control over the managed sensors.
Control is the most challenging (and most overlooked) functionality of dis-
tributed surveillance. Most existing approaches simply aggregate the outputs of
distributed sensors and focus mainly on the intuitive presentation of alerts to the
network security oﬃcer. This is just not enough. There is a need for ﬁne-grained
control of the deployed sensors in terms of scenarios to be detected, tailoring
of the sensors with respect to the protected network, and dynamic control over
the types of response. These are requirements that can be satisﬁed only if the
surveillance sensors are highly conﬁgurable and conﬁguration can be performed
dynamically, without stopping and restarting sensors when a reconﬁguration is
needed.
We have designed a suite of highly conﬁgurable surveillance sensors and a
command and control meta-sensor that allows the network security oﬃcer to
exert a very ﬁne-grained control over the deployed surveillance infrastructure.
Meta-sensors can be organized hierarchically to achieve scalability and can be
Designing a Web of Highly-Conﬁgurable Intrusion Detection Sensors
71
replicated to support fault-tolerance. This web of sensors is built around the
State Transition Analysis Technique (STAT) framework developed by the Re-
liable Software Group at UCSB. The STAT framework provides a platform for
the development of highly conﬁgurable probes in diﬀerent domains and envi-
ronments. The STAT approach is centered around ﬁve key concepts: the STAT
technique, the STATL language, the STAT Core, the CommSTAT communica-
tion infrastructure, and the MetaSTAT control system.
The approach provides the basic mechanisms to reconﬁgure, at run-time,
which input event streams are analyzed by each sensor, which scenarios have
to be used for the analysis, and what types of responses must be carried out
for each stage of the detection process. In addition, the approach models ex-
plicitly the dependencies among the modules composing a sensor so that it is
possible to identify automatically the steps that are necessary to perform a re-
conﬁguration of the deployed sensing infrastructure. In addition, the possibility
of retrieving current conﬁgurations from remote sensors allows one to determine
if a reconﬁguration is valid or meaningful.
The remainder of the paper is structured as follows. Section 2 presents the
fundamental elements of the STAT approach. Section 3 describes the structure
of STAT-based sensors. Section 4 discusses the dependencies between modules
and the concept of a valid and meaningful conﬁguration. Section 5 describes how
dependencies are used during the reconﬁguration process. Section 6 draws some
conclusions and outlines future work.
2 The STAT Framework
The STAT framework is the result of the evolution of the original STAT tech-
nique and its application to UNIX systems [5,6,7] into a general framework for
the development of STAT-based intrusion detection sensors [8].
The STAT Technique. STAT is a technique for representing high-level descrip-
tions of computer attacks. Attack scenarios are abstracted into states, which
describe the security status of a system, and transitions, which model the evo-
lution between states. By abstracting from the details of particular exploits and
by modeling only the key events involved in an attack scenario STAT is able to
model entire classes of attacks with a single scenario, overcoming some of the
limitations of plain signature-based misuse detection systems [9].
The STATL Language. STATL is an extendible language [10] that is used to
represent STAT attack scenarios. The language deﬁnes the domain-independent
features of the STAT technique. The STATL language can be extended to ex-
press the characteristics of a particular domain and environment. The extension
process includes the deﬁnition of the set of events that are speciﬁc to the partic-
ular domain or environment being addressed and the deﬁnition of new predicates
on those events. For example, to extend STATL to deal with events produced
by the Apache Web browser one would deﬁne one or more events that represent
72
G. Vigna, R.A. Kemmerer, and P. Blix
entries in the application logs. In this case an event would have the ﬁelds host,
ident, authuser, date, request, status, and bytes as deﬁned by Apache’s
Common Log Format (CLF) [11]. After having deﬁned new events it may be
necessary to specify speciﬁc predicates on those events. For example, the predi-
cate isCGIrequest() would return true if an event is a request for a CGI script.
Event and predicate deﬁnitions are grouped in a language extension. Once the
event set and associated predicates for a language extension are deﬁned, it is
possible to use them in a STATL scenario description by including them with
the STATL use keyword. A number of extensions for TCP/IP networks, Sun
BSM audit records [12], and Windows NT event logs have been developed.
STATL scenarios are matched against a stream of events by the STAT core
(described below). In order to have a scenario processed by the STAT core it is
necessary to compile it into a scenario plugin, which is a shared library (e.g.,
a “.so” library in UNIX or a DLL library in Windows). In addition, each lan-
guage extension used by the scenario must be compiled into an extension module,
which is a shared library too. Both STATL scenarios and language extension are
translated into C++ code and compiled into libraries by the STAT development
tools.
The STAT Core. The STAT core represents the runtime of the STATL language.
The STAT core implements the domain-independent characteristics of STATL,
such as the concepts of state, transition, timer, matching of events, etc. At run-
time the STAT core performs the actual intrusion detection analysis process by
matching an incoming stream of events against a number of scenario plugins. A
running instance of the STAT core is dynamically extended to build a STAT-
based sensor, as described in Section 3.
The CommSTAT communication infrastructure. STAT-based sensors are con-
nected by a communication infrastructure that allows the sensors to exchange
alert messages and control directives in a secure way. CommSTAT messages fol-
low the standard Intrusion Detection Message Exchange Format (IDMEF) [13].
The original IDMEF deﬁnition includes the two events Heartbeat and Alert.
This original set of events has been extended to include STAT-related control
messages that are used to control and update the conﬁguration of STAT-sensors.
For example, messages to ship a scenario plugin to a remote sensor and have it
loaded into the core have been added (x-stat-scenario-activate), as well as
messages to manage language extensions and other modules (the message names
are all preﬁxed with x-stat-, following the extension guidelines of the IDMEF
format). Participation in the CommSTAT communication infrastructure is me-
diated by a CommSTAT proxy that performs preprocessing of messages and
control directives and that supports the integration of third-party tools that are
not based on the STAT framework.
The MetaSTAT control infrastructure. The CommSTAT communication infras-
tructure is used by the MetaSTAT component to exert control over a set of
sensors. The MetaSTAT component is responsible for the following tasks:
Designing a Web of Highly-Conﬁgurable Intrusion Detection Sensors
73
STAT sensor
Host
CommSTAT Proxy
STAT sensor
Host
CommSTAT Proxy
STAT sensor
Host
CommSTAT Proxy
MetaSTAT
Module Database
Sensor Database
Alert  Database
Fig. 1. Architecture of a web of sensors.
– Collect and store the alerts produced by the managed sensors.
IDMEF alerts are stored in a MySQL relational database. A schema to
eﬃciently store and retrieve IDMEF alerts has been developed, and a GUI
for the querying and display of stored alerts has been implemented.
– Route alerts to STAT sensors and other MetaSTAT instances.
MetaSTAT components and STAT-based sensors can subscribe for speciﬁc
alerts. Alerts matching a subscription are routed through the appropriate
CommSTAT communication channels.
– Maintain a database of available modules and relative dependen-
cies. Each MetaSTAT component is associated with a Module Database of
compiled scenario plugins, language extension modules, and other modules
that will be discussed later. For each module, the database stores the depen-
dencies with respect to both other modules and the operational environment
where the module may need to be deployed. These dependencies are a novel
aspect of the STAT approach and are described in more detail in Section 4.
– Maintain a database of current sensor conﬁgurations. MetaSTAT
manages a Sensor Database containing the current components that are ac-
tive or installed at each STAT-based sensor. This “privileged” view of the
deployed web of sensors is the basis for controlling the sensors and plan-
ning reconﬁgurations of the surveillance infrastructure. The structure of the
database is described in detail in Section 4.
The high-level view of the architecture of the STAT-based web of sensor is
given in Figure 1. The following sections discuss the structure of a single STAT-
based sensor and how its reconﬁguration is performed through a MetaSTAT
component.
74
G. Vigna, R.A. Kemmerer, and P. Blix
3 STAT Sensors
STAT sensors are intrusion detection systems that perform localized security
analysis of one or more event streams (operating system audit records, network
traﬃc, application logs, system calls, etc.).
CommSTAT
Proxy
Sensor
Core
Event queue
Host
CommSTAT
Proxy
Sensor
Core
Event queue
Event Provider
Language Extension
library
Event Provider library
  


  
(a) Bare Sensor
(b) Sensor with Event Provider
CommSTAT
Proxy
Scenario
Prototype
Sensor
Core
CommSTAT
Proxy
Scenario
Prototype
Sensor
Core
Event queue
Instances
Event queue
Event Provider
Scenario Plugin library
  

  

  

  

Event Provider
Response library
Response Functions
  

  

  

  

(c) Sensor with Scenario Plugin
(d) Scenario Plugin with Responses
Fig. 2. Evolution of a STAT-based sensor.
The architecture of a STAT-based sensor is centered around the STAT core
(see Figure 2). The STAT core is extended with a number of modules that,
together, determine the sensor’s intrusion detection capabilities and behavior.
The conﬁguration of a STAT sensor can be changed at run-time through control
directives sent by the MetaSTAT component responsible for the sensor. A set of
initial modules can be (and usually is) deﬁned at startup time to determine the
initial conﬁguration of a sensor. In the following, an incremental conﬁguration of
a STAT-based sensor will be described to better illustrate the role of each sensor
module, provide a hint of the high conﬁgurability of sensors, and describe the
dependencies between the diﬀerent modules.
When a sensor is started with no modules, it contains only an instance of