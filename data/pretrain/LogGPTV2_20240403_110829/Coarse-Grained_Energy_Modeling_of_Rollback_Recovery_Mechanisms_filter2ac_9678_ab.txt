and
Lab
(LAMMPS)
[13],
Checkpoint/Restart
[15]. LAMMPS is a
key DOE simulation workload and is representative
of many other molecular dynamics code. We used
the embedded atom method (EAM) metallic solid
input script, which is used by the Sequoia benchmark
suite. BLCR is a popular, open-source, system-level
checkpoint/restart library.
Fig. 2: Model predicted energy costs are very accurate
and within 94-99% of the average measured costs.
Our validation approach was as follows: we ran
LAMMPS for a period sufﬁciently long enough that
allowed us to take many checkpoints. In our measure-
ment phase, we collected coarse-grained power mea-
surements obtained from execution period up to and
including the ﬁrst checkpoint. Then we input
these
measurements into our model
the energy
footprint of the entire rest of the application’s execution.
(Of course, we continue the measurement collection
throughout the application’s execution to compare our
model’s predicted values to those actually observed.)
We repeat this process three times, and the results we
present are the average over these three runs. Each
LAMMPS run included taking 50 checkpoints at a ﬁxed
10-second interval.
to predict
During the measurement phase, we sampled power
to obtain ¯Papp,
the average power while executing
application code, and ¯Pckpt, average power for taking
a checkpoint. For the entire application’s execution, we
also measure Tapp, the total time spent executing the
B. Checkpoint compression energy performance
Using our validated model, we predict the energy
performance for LAMMPS and three mini apps from
the Mantevo Project [16], namely HPCCG, pHPCCG
and MiniFE. As previously described, we obtained the
checkpoint sizes and compression/decompression per-
formance statistics for these applications from a previ-
ous project [3]. We also used our application efﬁciency
model from that project to calculate the time spent
for (1) checkpointing, (2) restarting from failures and
(3) executing rework after restarts. Our efﬁciency model
used Daly’s optimal checkpoint interval calculation [6],
which assumes node failures are independent and expo-
nentially distributed. Daly’s model inputs system mean
time between failures (MTBF), the checkpoint com-
mit time, the checkpoint restart time, the number of
application nodes application and the application wall
clock time in a failure free environment. In Table II we
list our emperically measured average power costs of
(2)checkpoint operation
(1) unit time application run,
711
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:22:31 UTC from IEEE Xplore.  Restrictions apply. 
¯Papp(W)
70.66
79.88
60.51
59.81
¯Pckpt(W)
58.79
53.63
54.74
23.80
¯Prst(W)
40.87
91.15
53.43
50.03
HPCCG
LAMMPS
pHPCCG
MiniFE
TABLE II: Measured average power costs of
application run, checkpoint and restart for different
applications
and (3)restart operation that we input to our model. We
also empirically measure the average power consump-
tion of checkpoint compression and decompression and
incorporate those metrics into the model to account
for the energy costs of the checkpoint compression
optimization.
Figure 3 shows the overall energy savings using CR
with checkpoint compression versus regular CR. We
make two observations:
1)
2)
the CR compression optimization always
provides a reduction in overall application
energy consumption; and
the energy savings yielded by the CR com-
pression optimization increases with appli-
cation scale. In our study, the energy savings
increases from 10% at a socket count of 10,000
to almost 90% at a socket count of 90,000.
The reduction in number of checkpoints taken offsets
the extra per checkpoint energy consumed due to check-
point compression. This reduction is seen in Figure 4,
which compares the total number of checkpoints taken
for uncompressed and compressed cases for the same
workload. Due to the increased application efﬁciency for
checkpoint compression, even though checkpoint fre-
quency increases , the decreased application execution
time leads to fewer overall checkpoints being taken.
The energy savings increase with scale because as
an application’s scale increases,
the application be-
comes increasingly inefﬁcient using normal CR be-
comes (falling below 10% [3]) and the impact of CR
optimizations like compression becomes greater. Again
shown by Figure 4, as scale increases the difference
in the number of checkpoints taken with and without
checkpoint compression increases.
Finally, Figure 5 isolates the energy savings just
for CR operations yielded by compression. This ﬁgure
shows an energy savings from 45% to 96%. Referring
again to Figure 4, compression does not reduce the
number of checkpoints taken by LAMMPS as much as
it does for the other applications. This results in lower
Fig. 3: Total energy savings compared to regular
checkpoint/restart for different applications
uncompressed
compressed with pbzip
i
s
t
n
o
p
k
c
e
h
c
f
o
r
e
b
m
u
N
 900
 800
 700
 600
 500
 400
 300
 200
 100
 0
1
0
3
0
5
0
7
0
9
0
0
0
0
0
0
0
0
0
0
0
1
0
3
0
5
0
7
0
9
0
0
0
0
0
0
0
0
0
0
0
1
0
3
0
5
0
7
0
9
0
0
0
0
0
0
0
0
0
0
0
1
0
3
0
5
0
7
0
9
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
HPCCG
LAMMPS
miniFE
pHPCCG
Socket counts
Fig. 4: Comparison of the number of checkpoints
taken with or without checkpoint compression
energy savings for LAMMPS both overall, Figure 3,
and when considering only CR operation,Figure 5.
VI. CONCLUSIONS AND FUTURE WORK
In this work, we presented and validated a simple yet
accurate coarse-grained model for predicting the energy
consumption of an application using CR-based fault
tolerance mechanisms. Additionally, we used this model
to show that while checkpoint compression results in
higher optimal checkpoint frequencies and increased
per checkpoint energy consumption, the optimization
leads to an overall reduction in application energy con-
sumption due to signiﬁcantly reduced execution times.
Furthermore, we show that this overall energy savings
712
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:22:31 UTC from IEEE Xplore.  Restrictions apply. 
[8] E. Meneses, O. Sarood, and L. V. Kale, “Assessing energy
tolerance protocols for hpc systems,”
efﬁciency of
fault
in Proceedings of
the 2012 IEEE 24th International
Symposium on Computer Architecture and High Performance
Computing, ser. SBAC-PAD ’12. Washington, DC, USA:
IEEE Computer Society, 2012, pp. 35–42. [Online]. Available:
http://dx.doi.org/10.1109/SBAC-PAD.2012.12
[9] M. El Mehdi Diouri, O. Gluck, L. Lefevre, and F. Cappello,
“Energy considerations in checkpointing and fault tolerance
protocols,” in Dependable Systems and Networks Workshops
(DSN-W), 2012 IEEE/IFIP 42nd International Conference on,
June 2012, pp. 1–6.
[11]
[10] B. Mills, T. Znati, R. Melhem, R. E. Grant, and K. B. Ferreira,
“Energy consumption of resilience mechanisms in large scale
systems,” in Parallel, Distributed and Network-Based Process-
ing (PDP), 22st Euromicro International Conference, 2014.
J. H. Laros, D. DeBonis, and P. Pokorny, PowerInsight -
A Commodity Power Measurement Capability., Apr 2013.
[Online]. Available: http://www.osti.gov/scitech/servlets/purl/
1078977
J. G. Elytra, “Parallel Data Compression With Bzip2.”
[12]
[13] S. J. Plimpton, “Fast Parallel Algorithms for Short-Range
Molecular Dynamics,” Journal Computation Physics, vol. 117,
pp. 1–19, 1995.
[14] Sandia National Laboratories. (2010, April) The LAMMPS
[Online]. Available: http:
Molecular Dynamics Simulator.
//lammps.sandia.gov
[15] P. H. Hargrove and J. C. Duell, “Berkeley Lab Check-
point/restart (BLCR) for Linux Clusters,” Journal of Physics:
Conference Series, vol. 46, no. 1, 2006.
[16] M. A. Heroux, D. W. Doerﬂer, P. S. Crozier, J. M. Willenbring,
H. C. Edwards, A. Williams, M. Rajan, E. R. Keiter, H. K.
Thornquist, and R. W. Numrich, “Improving Performance via
Mini-applications,” Sandia National Laboratory, Tech. Rep.
SAND2009-5574, 2009.
Fig. 5: Energy savings for checkpoint/restart
operations only.
increases with application scale.
While our coarse-grained modeling approach shows
promising accuracy, several areas of future work remain.
This includes model validation for restart and rework
phases for application runs with failure occurrences. An
additional open question is whether we can use CPU
throttling during compression/decompression to further
improve an application’s efﬁciency or its s energy
footprint.
REFERENCES
[1] S. Ashby, P. Beckman, J. Chen, P. Colella, B. Collins, D. Craw-
ford, J. Dongarra, D. Kothe, R. Lusk, P. Messina et al., “The
opportunities and challenges of exascale computing,” Summary
Report of the Advanced Scientiﬁc Computing Advisory Com-
mittee (ASCAC) Subcommittee (November 2010), 2010.
[2] K. Bergman et al., “ExaScale Computing Study: Technology
Challenges in Achieving Exascale Systems,” Defense Advanced
Research Projects Agency Information Processing Techniques
Ofﬁce (DARPA IPTO), Tech. Rep., September 2008.
[3] D. Ibtesham, D. Arnold, P. G. Bridges, K. B. Ferreira, and
R. Brightwell, “On the viability of compression for reducing
the overheads of checkpoint/restart-based fault tolerance,” 2012
41st International Conference on Parallel Processing, vol. 0,
pp. 148–157, 2012.
[4] T. Z. Islam, K. Mohror, S. Bagchi, A. Moody, B. De Supinski,
and R. Eigenmann, “MCRENGINE: A Scalable Checkpointing
System Using Data-Aware Aggregation and Compression,”
in High Performance Computing, Networking, Storage and
Analysis (SC), 2012 International Conference for, 2012.
[5] B. Mills, R. E. Grant, K. B. Ferreira, and R. Riesen, “Evaluating
energy savings for checkpoint/restart,” in Proceedings of the 1st
International Workshop on Energy Efﬁcient Supercomputing.
ACM, 2013, p. 6.
J. T. Daly, “A higher order estimate of the optimum check-
point interval for restart dumps,” Future Gener. Comput. Syst.,
vol. 22, no. 3, pp. 303–312, 2006.
[6]
[7] S. Levy, B. Topp, K. B. Ferreira, D. Arnold, T. Hoeﬂer, and
P. Widener, “Using simulation to evaluate the performance of
resilience strategies at scale,” in High Performance Computing,
Networking, Storage and Analysis (SCC), 2013 SC Compan-
ion:.
IEEE, 2013.
713
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:22:31 UTC from IEEE Xplore.  Restrictions apply.