### Table 1: BGPv(N-1) and BGPvN Routing Entries

| Domain | BGPv(N-1) Path to Z | BGPvN Path to Z |
|--------|---------------------|-----------------|
| M      | Z                   | -               |
| A      | M:B:N:Z             | C:Z             |
| B      | N:Z                 | B:C:Z           |
| C      | -                   | A:B:C:Z         |

**Table 1:** BGPv(N-1) and BGPvN routing entries corresponding to Figure 4. Advertising by proxy leads A and B to route to Z through the IPvN domain C, with routers adding this information in their IPvN route advertisements.

---

The above approach is an improvement but does not ensure that all possible IPvN paths to the destination have been considered. For example, consider the scenario in Figure 4. For simplicity, we assume that the BGPvN protocol uses a path-vector protocol similar to the current BGP. Here, Z is the non-IPvN destination domain, while A, B, and C are IPvN domains, and M and O are non-IPvN domains.

Each domain's BGPv(N-1) entries to Z and their BGPvN entries are shown in Table 1. With the routing developed so far, domain A is unaware of the path from C to Z (because C does not lie on A’s BGPv(N-1) path to Z) and hence will not route through C to Z. To address this, we propose the following "advertise-by-proxy" BGPvN rule: an IPvN border router should advertise an IPv(N-1) destination prefix if it is the only IPvN domain along the BGPv(N-1) path from itself to the destination domain. This can be achieved by having an IPvN router include a list of "on-behalf-of" IPv(N-1) domains in its IPvN inter-domain route advertisements.

This is a minor change to the previous proposal. In addition to its own IPv(N-1) domain, an IPvN router adds a list of additional IPv(N-1) domains for which it serves as a proxy. In making routing decisions, an IPvN router can now combine this IPv(N-1) level information with its IPvN information. In our example, one could simply add the number of (domain-level) hops. Thus, both B and C would inject route advertisements for Z with distances of 2 and 1, respectively, and regular BGPvN inter-domain routing can then compute routes to Z as normal.

Effectively, the routing "distance" in this case is the sum of:
1. The BGPvN routing distance on the vN-Bone.
2. The domain-level hops between the IPvN egress and the destination on the IPv(N-1) topology, with ties broken (as in our example) to favor IPvN paths.

While this metric is open to adjustment, it achieves a good tradeoff between maximizing routing through IPvN domains and avoiding excessively long routes. Our example here was straightforward because the notion of routing distance at the BGPvN and BGPv(N-1) levels were easily compatible. In general, the appropriate manner in which the two routing metrics might be combined would need to be determined based on the specific BGPvN and BGPv(N-1) protocols.

### Summary

For a destination in an IPvN domain, routing is effected using its IPvN address and IPvN routing information. For an IPvN destination in an IPv(N-1) domain, routing is based on the destination’s IPv(N-1) address using a combination of IPvN and IPv(N-1) routing information. Thus, the requirements for IPvN to allow smooth transitioning are:
1. Hosts must be able to create temporary and unique IPvN addresses.
2. A temporary address should reveal the host’s IPv(N-1) address or the IPvN header should allow that information to be carried.
3. IPvN routers should be able to annotate their route advertisements with IPv(N-1) topology information.

Note that, unlike in typical overlays, our routing does not guarantee a unique egress point to a destination. For example, routes from domain C to Z should exit the vN-Bone at C, while those in B should exit at N. This can lead to route asymmetry because routes from C will always select the same ingress point (due to the anycast mechanism selecting the closest IPvN router independent of the destination). While asymmetry is not unusual today, our proposal may exacerbate asymmetric routing in the early stages of deployment.

### 3.4 Forwarding

We now briefly review the end-to-end data path taken by a packet. Assume IPv(N-1) is the current ubiquitously deployed version of IP, IPvN is the next generation IP, and all IPvN routers form a virtual vN-Bone. We use \( A_{n-1} \) to denote the IPv(N-1) anycast address assigned to the deployment of IPvN. Then, end-to-end forwarding of an IPvN packet works as follows:

1. **Source S Encapsulation**: The source S encapsulates the IPvN packet in an IPv(N-1) header with destination \( A_{n-1} \).
2. **Anycast Forwarding**: Using anycast, the packet is forwarded over the legacy IPv(N-1) network to the closest IPvN router, R1.
3. **R1 Processing**: R1 strips off the IPv(N-1) header, processes the packet as needed, looks up the next hop (R2) to the destination using the vN-Bone forwarding tables, and forwards the packet to R2, once again encapsulating the packet in an IPv(N-1) header if required.
4. **Repetition**: This process is repeated until the packet reaches the egress IPvN router, which tunnels the packet through to the destination.

In addition, the source, either through configuration or an ARP-like protocol, discovers whether its first-hop router supports IPvN and, if so, does not encapsulate the packet. Similarly, every intermediate router will only invoke encapsulation if its next-hop IPvN router is not an immediate (i.e., physical layer) neighbor. As deployment spreads, the use of IPv(N-1) is gradually phased out.

### 3.5 Discussion

This section described a series of mechanisms that, taken together, provide a framework for transitioning between successive generations of IP. Supporting these mechanisms places additional demands on future generations of routers. Specifically, an IPvN router must:
1. Participate in the IPv(N-1) unicast and anycast routing algorithms.
2. Perform IPv(N-1) forwarding.
3. Participate in the construction of the virtual vN-Bone network.
4. Participate in IPvN unicast and anycast routing.
5. Perform IPvN forwarding.

Participation in IPv(N-1) and IPvN routing and forwarding seems unavoidable for any transition path. The specific additions here involve support for anycast routing and the construction of the virtual IPvN network, which, as described, do not seem unduly complex.

We stress two crucial features of our framework:
1. Not all routers need to support the above mechanisms; only IPvN routers need to support the entire suite of mechanisms. This means that our framework for evolvability is not gated by issues of non-cooperation from ISPs with no interest in deploying IPvN.
2. Our framework adheres to the general design style of the existing Internet, with no per-client state within the network, no significant complexity on the packet forwarding path, and decentralized control.

Unfortunately, our approach does not assist in the deployment of architectures that, by definition, require support from every router along the path. This includes certain QoS proposals, though recent work on supporting such features in overlays might assist in this regard [19]. Additionally, the potential routing inefficiencies due to anycast (at least in the early stages of deployment) might diminish the usefulness of certain IPvN architectures, particularly those aimed at improving performance properties like path loss or delay. However, this is likely to be less of an issue for proposals that seek to add IP-level support for security, mobility, addressing, robustness, and other features [2, 3, 7, 12, 13, 16, 17, 35–37].

Our discussion in this paper addresses how IPvN packets are delivered between two IPvN endhosts across networks with limited support for IPvN. A related open question is whether general guidelines exist for how an IPvN endhost may inter-operate with an IPv(N-1) endhost over IPvN. This requires support from the endpoints and, depending on the specifics of an IPvN, may range in complexity from simple header translation to more complex translations of even higher-layer protocols. Depending on their complexity, such translations might be effected by simple NAT-like functionality in IPvN routers, client-side proxies, or special IPvN transition boxes. A detailed discussion on endhost interoperability is beyond the scope of this paper; for a relevant discussion, we refer the interested reader to the work on OCALA [27], a proxy-based solution for supporting legacy applications over overlay networks.

Finally, it is worth pondering what, in the larger network architecture, must remain "invariant" in the sense of functionality that must be retained through successive architectural generations to ensure continued evolvability. Examination of our mechanisms suggests just two: support for global unicast and anycast routing.

### 4. Deploying Source-Specific Multicast

The previous section presented an overall framework for evolvability based on the use of IP Anycast. In this section, we take IP Multicast as an example of a new IP service and work through its deployment under this framework. We do not attempt to innovate on the details of the multicast protocols themselves; instead, we take existing standards and describe how our framework might support their deployment.

We focus our discussion on the deployment of source-specific multicast (SSM). A detailed description of deploying any-source multicast, which uses a somewhat larger suite of protocols (IGMP, MSDP, MBGP, PIM-SM, and PIM-DM), is beyond the scope of this paper.

**Source-Specific Multicast (SSM)**: SSM, a restricted form of the more general IP Multicast service [38], provides one-to-many packet delivery between a designated source node and zero or more receivers [39]. As defined by RFC 3569 [40] and Holbrook [29, 41], SSM is implemented through the combined use of the Internet Gateway Multicast Protocol (IGMP) [42] and a reduced form of Sparse Mode PIM (Protocol Independent Multicast), denoted PIM-SSM. Through IGMP, a Designated Router (DR) on a local network tracks group membership on each of its network interfaces and participates in the wide-area multicast routing on behalf of the endhosts on its network. PIM-SSM is then used to construct a tree rooted at the source DR to all receivers' DRs. For simplicity, we use endhosts to mean their DRs and focus only on the mechanics of the wide-area routing.

In SSM, a multicast group, called a channel, is defined by the combination (S, G) of a multicast group address (G) and the source address (S).

**Forwarding Mechanism**:
- When a multicast packet \( P_3 \) is sent from a source S, the Designated Router (DR) for the source, say \( R_n \), unicasts the packet to the next-hop router, \( R_1 \), on the distribution tree for (S, G).
- If \( R_1 \) is already on the distribution tree for (S, G), it forwards the packet to the next-hop router, \( R_2 \), and so on, until the packet reaches the egress router, which tunnels the packet to the destination.
- If \( R_1 \) is not on the distribution tree for (S, G), it sends a PIM Join/Prune message to the closest IPvN router, say \( R_1 \), to join the (S, G) tree.
- If \( R_1 \) and \( R_2 \) are immediate neighbors, encapsulation is bypassed. Otherwise, \( R_1 \) encapsulates the packet in an IPv(N-1) header and forwards it to \( R_2 \).

This process is repeated until the packet reaches the egress IPvN router, which tunnels the packet to the destination. If the source and the next-hop router are immediate neighbors, encapsulation is bypassed.

**Designated Router (DR) Operation**:
- When a source C sends a PIM Join/Prune message to join the (S, G) tree, the Designated Router (DR) for C, rather than C itself, sends this PIM Join/Prune message to the closest IPvN router, \( R_1 \).
- Anycast routing ensures that the closest IPvN router is selected, and the packet is forwarded accordingly.

In summary, our framework for deploying source-specific multicast leverages the existing multicast protocols and the anycast mechanism to ensure efficient and scalable deployment of multicast services in the IPvN environment.