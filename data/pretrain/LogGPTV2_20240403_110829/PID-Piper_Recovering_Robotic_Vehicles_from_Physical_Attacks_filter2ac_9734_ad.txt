4: procedure RECOVERYMONITOR
ut ← autonomousLogic()
5:
xt ← AHRS()
6:
yP ID ← AttitudeControl()
7:
yM L ← P ID P iper(ut, xt)
8:
S(t) = 0
9:
b(t) > 0
10:
while !mission end do
11:
δ ← |yM L − yP ID|
12:
S(t + 1) = S(t) +δ − b(t)
13:
recovery mode ← f alse
14:
if S(t + 1) > τ then
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
end while
30:
31: end procedure
y ← yM L
error ← |yM L − yP ID| − b(t)
if error → 0 then
recovery mode ← f alse
y ← yP ID
recovery mode ← true
S = 0
end if
if recovery mode then
end if
thrustHeading(y)
else
end if
y ← yP ID
(cid:2) monitoring using CUSUM
(cid:2) recovery mode activated
(cid:2) ML model output
(cid:2) switching control to ML
(cid:2) recovery mode deactivated
avoid detection. PID-Piper limits the impact of stealthy attacks
due to 2 reasons. First, the ML model used by PID-Piper
predicts the RV’s behaviour with high accuracy (Section VI),
and hence PID-Piper can employ a lower detection threshold
than prior work [14]. Second, because we keep track of the
historic δ using CUSUM, and compare it with τ, the attacker
cannot persistently inject the false data, as it will result in
higher ﬂuctuation, and hence be detected.
VI. RESULTS AND EVALUATION
We ﬁrst present the experimental setup for evaluating PID-
Piper (Section VI-A). Then, we evaluate the accuracy of PID-
Piper in emulating the PID controller, and its false-positive
rate. We also measure its effectiveness in handling both overt
and stealthy attacks, and ﬁnally, its performance overhead.
(a) Pixhawk Drone
(b) Aion R1 Rover
(c) Sky-viper Drone
Fig. 5: Real RV Systems used for Experiments.
A. Experimental Setup
To evaluate PID-Piper, we use 6 RV systems, 3 of which
are real RVs. They are (1) Pixhawk based drone [28] (Pixhawk
drone), (2) an Aion R1 ground rover [29] (Aion rover), and
(3) Sky Viper Journey drone [30] (Sky-viper drone). These are
32
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
all commodity RV systems, each costing less than $2000. The
other 3 systems are simulated RVs, (4) Ardupilot’s quadcopter
(ArduCopter), (5) Ardupilot’s ground rover [19] (ArduRover),
(6) PX4 software in the loop (PX4) [31]. We use the APM
SITL [32], and Gazebo [33] platforms for vehicle simulations.
RV Hardware The Pixhawk drone and Aion rover are based
on the Pixhawk platform [28]. Pixhawk is an ARM Cortex
based platform, consisting of a ﬂight management unit (FMU)
controller, I/O, sensors and memory. The Sky-viper drone is
based on an STM32 processor, and uses an IMU with 3-axis
accelerometer, gyroscope, and barometer.
TABLE I: Mission Proﬁles, and the empirically derived thresh-
olds (roll, pitch, yaw) for each subject RVs. SL: Straight Line,
MW: Multiple Waypoints, CP: Circular Paths, HE: Hover at
ﬁxed Elevation, PP: Polygonal Path. ’-’ means no threshold
RV Systems
ArduCopter
PX4 Solo
ArduRover
Pixhawk
Sky-viper
Aion R1
Number of Missions
SL MW CP HE
7
7
8
8
8
15
10
10
12
8
8
5
3
3
-
2
2
3
3
3
3
PP
7
7
10
9
9
10
Thresholds
18, 18.09, 18.6
18.4, 18.4, 18.9
− , − , 20
18.5, 18.62, 19.1
23, 23.6, 24.05
− , − , 21.25
Dataset As there is no standard dataset to test models for
RVs, we use a diverse set of missions for each RV with
varying mission durations, mission distances, environmental
conditions (e.g., noisy sensor data), and covering a variety
of mission paths i.e., straight line, circular paths, ﬂights in
polygonal paths, and ﬂights with multiple destinations (or
waypoints). These emulate real-world RV missions: (1) a
last mile delivery drone [34] (straight line path), (2) those
used for surveillance or agriculture [35] (circular or polygonal
path), and (3) rovers deployed in warehouse management [5]
(polygonal paths). Because RVs transition through a known set
of operational modes (e.g., takeoff, waypoint/loiter/circle/RTL,
and land [19]), the LSTM model has to learn a relatively small
set of patterns in input vectors (Section IV-C), and keep track
of dependencies between current sensor inputs and past sensor
inputs to cover the typical RV missions.
We collect a total of 30 mission proﬁles for each subject
RV, and randomly select 24 (80%) for training, and 6 (20%)
for testing. Note that these mission proﬁles do not include
any attacks. We derive the thresholds for attack detection
and recovery (Algorithm 1) based on the training set, and
validate them using the testing set. Table I summarizes the
missions used for the different RVs, and the empirically
derived thresholds. We derive only the yaw angle threshold for
rovers, because rovers can only control the Z-axis rotation.
Due to physical space restrictions in our environment, our
real RV missions were limited to short distances (of 50m).
Therefore, we used simulations for long distance RV missions.
Implementation2 The LSTM model is implemented using
Tensorﬂow 1.10 [36] and Keras 2.2 library. Through ofﬂine
2PID-Piper code and dataset used in this work is available at https://github.
com/DependableSystemsLab/pid-piper
33
training, we learn the LSTM model, and implement the PID-
Piper’s online inferencing module in C++, which is then
plugged in to the RV’s autopilot software. The autopilot soft-
ware includes modules for control operations, sensor fusion,
and other autonomy related functionalities. We modiﬁed fewer
than 100 lines of code in each RV’s autopilot software, which
typically consist of thousands of lines of code. Most of these
changes consisted of routing the sensor measurements to PID-
Piper’s ML model. The ML model runs in tandem with the
PID controller for each input/output cycle.
PID-Piper’s implementation consists of less than 600 lines,
which results in an 1.5% increase in the ﬁrmware image size.
Comparison We quantitatively compare our results with
SRR [14], which is a recovery framework for RVs based on an
FBC design. CI [10] and Savior [13] are also FBC based ap-
proaches for detecting attacks against RVs. However, they do
not incorporate any recovery. Therefore, for a fair comparison,
we extended CI and Savior to provide recovery when an attack
is detected, by switching the control to the models used for
attack detection (similar to PID-Piper’s recovery approach).
Because SRR is not publicly available, we implemented it
using Matlab’s system identiﬁcation (SI) tool [38] with our
best effort. We derived the system model (containing sets of
matrices) using our training data, and we validated the system
model’s accuracy with our test data. For CI and Savior, we
used the publicly available code released by their authors.
Prior work uses different hardware platforms, e.g, Savior
used Intel Aero, while SRR and CI used 3DR Iris - both
of these are currently discontinued. Because we use different
RV hardware, for a fair comparison, we adopt the original
simulation platforms used in the respective prior work i.e., Ar-
duCopter for SRR and CI, and PX4 for Savior.
Attacks As we did not have access to special equipment for
mounting physical attacks (e.g., noise emitters), we emulated
the attacks through targeted software modiﬁcations, similar to
what previous work has done [10], [13], [14], [18]. We launch
three kinds of overt attacks, similar to prior work, namely (i)
Attack-1: manipulates gyroscope readings gyro+f, f resulting
in > 20 degrees error. (ii) Attack 2: manipulates GPS readings
GP S + f, f resulting in > 20m position error, (iii) Attack 3:
manipulates gyroscope readings during vulnerable states of the
RV (e.g., landing in drones), often resulting in crashes [18].
To mount stealthy attacks, we used the attack code used in
prior work [18]. We inject false data based on the selected
thresholds for SRR, CI, Savior and PID-Piper. To maximize
the impact of stealthy attacks, we set the false-data to the
maximum value that can escape detection by each technique.
Performance Overheads Similar to SRR [14] and Savior [13],
we measure the CPU time incurred by the autopilot modules,
with and without PID-Piper, at periodic intervals, and report
the average overhead. We also measure the overall mission
time with and without PID-Piper, averaged across 5 missions.
Success Metric We consider a mission to be successful, if
after the mission is complete, the total deviation from the
original destination is less than 10m. Most GPS sensors used
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
in commodity RVs have an offset of 5 meters [39], and we
consider 2X of the GPS offset as our threshold (5m offset
from its position, and 5m offset from the destination), as this
deviation is indistinguishable from the standard GPS error in
RVs. We consider the mission to be unsuccessful, if the RV
crashes, stalls, or if the deviation from the destination is greater
than 10m. Crash means the RV could potentially be physically
damaged (e.g., drone falls to the ground), and stall means the
RV freezes and stops making progress towards the destination.
B. Prediction Accuracy
In these experiments, we evaluate the prediction accuracy of
PID-Piper with respect to the PID controller. We conducted 5
missions in each of the real RVs. No attacks were considered.
We use Mean Absolute Error (MAE) as the metric to
measure accuracy (Section IV). For each mission, we sample
the PID and ML outputs at 400 Hz (RV’s control logic operates
at this frequency), and the MAE is calculated as before.
Fig. 6: Comparison of MAE
in normal operation.
Fig. 7: CDF of deviations
from target during recovery.
(cid:2)n
We also compare PID-Piper’s accuracy with CI, Savior
and SRR. We record the real RVs’ mission data (online) and
run the proﬁled mission data through the models (ofﬂine).
Recall that all the above techniques used an FBC design,
while PID-Piper uses an FFC design. Hence, we test their
models’ effectiveness in predicting the RV’s current state.
RVs use Extended Kalman Filter (EKF) to translate sensor
measurements into the current state (e.g., linear and angular
position). Hence, the MAE for the above models is calculated
as M AE = 1
n
t=1 |yEKF − yM|.
Figure 6, shows the average MAE for 5 missions for the
3 real RVs. As can be seen in the ﬁgure, PID-Piper achieves
the lowest MAE among all the techniques, ranging between
0.88 - 1.11 degrees. This is because the LSTM effectively
learns temporal sequences in a time series, even in complex
missions. Both CI and SRR use a linear model to emulate
non-linear RVs, which does not model the RV’s behaviour.
Though Savior uses a non-linear model, it does not model the
RV’s transitions (e.g., steady state → LAND), and hence its
MAE is higher than PID-Piper, but lower than CI and SRR.
To test the robustness of PID-Piper, we also measured
its MAE against noisy sensor inputs due to environmental
conditions such as wind. We found that the MAE for ML
model’s estimations did not change much under environmental
disturbances. For example, under variable wind speed (15
km/h to 35 km/h), the MAE ranged from 0.96 to 1.38, which
is in the same ballpark as the MAE in normal conditions.
C. False Positives
We deﬁne the false positive rate (FPR) as the percentage of
times the mission fails in the absence of attacks. For measuring
the FPR, we run 30 different missions for each technique
without any attacks, and record an FP if a recovery is activated,
and the mission fails as a result. Even without attacks, it is
possible for a gratuitous recovery to get activated when the
model estimates deviate from the observed state. However,
we record a false positive only if the mission fails as a result.
On average each mission lasts approximately 3 minutes, and