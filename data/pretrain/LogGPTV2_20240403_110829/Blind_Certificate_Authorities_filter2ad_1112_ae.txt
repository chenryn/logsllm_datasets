ciphertexts bind the identity of the client in the sequel.
Note that [50] demonstrates an attack that breaks the
binding security of AES-GCM, which, however, cannot
be directly applied to blind CA because the attacker
cannot construct arbitrary messages in our setting —
all messages must be semantically meaningful to the
SMTP server. Whether AES-GCM can be used as a secure
commitment in blind CA remains an open question.
Our SMTP client
is instructed to only use the
minimum number of commands (AUTH, MAIL, RCPT,
and DATA)
to send an email. Each command and
the email content will be sent
in one message (i.e.,
TLS fragment). Thus the ﬁrst message sent, which
is the TLS encryption of the message AUTH PLAIN
[sep]alice[sep]password, will
the
client’s email account, and the ﬁfth message will be the
email body into which a challenge will be injected. 5
The procedures are shown in Figure 5. The ﬁrst message
will be taken as the commitment C. The client stores the
opening of the commitment (the associated CBC-HMAC
keys Khmac and Kaes) for late use, The challenge to be
injected is a random string M∗
, and the proxy adds C to
a table under the index M∗
contain
.
Some
While running the anonymous PAO (with binding iden-
tity), the proxy expects to see exactly ﬁve messages (four
commands plus an email) sent from the client, and each
message is followed by exactly one response from the
server (not counting TLS handshake messages and the
cleartext EHLO at the very beginning). It is important that
the proxy aborts after seeing ﬁve responses. If it allows
more, an attack that abuses the ﬂexibility in number of
messages arises; see §V-E.
servers might
the EHLO after
STARTTLS. The proxy can check this when examining
if the server satisﬁes the requirements. In this case, the
proxy simply needs to let the client use six messages (with
six responses) to ﬁnish the session, and grabs the second
message seen as the commitment.
Certiﬁcate generation. The client uses a X.509 certiﬁ-
cate template prepared by the CA to generate a legitimate
X.509 certiﬁcate cert, with the subject ﬁeld being set
to the client’s email account alice and the public key
ﬁeld being set to the client’s public key pkey. The
require
5[sep] is a special character deﬁned in [37]. The account and
password are base64 encoded.
. It sends M∗
other ﬁelds (expiration duration, organization, etc.) in the
template are public, and their values will be shared with
the client and be validated by the CA during certiﬁcate
generation. The client generates a hash h = H(cert) of its
certiﬁcate, and produces a zero-knowledge proof, named
CA proof, that demonstrates (1) her knowledge of the
necessary information (the email account and the public
key) to form a certiﬁcate (the hash of which is h); (2) the
knowledge of the underlying message and the opening of
the commitment C, namely the secret keys used during
the PAO session, and the email account and password in
C (which is used to send the challenge M∗
); and (3) the
account in the subject ﬁeld of cert is the same as the
account in C. The private witness of the proof consists
of the email account, the password, pkey, Khmac, and
Kaes. Note that the proxy will not verify the client’s
ownership of the public key in the certiﬁcate; this can be
done by the party to whom the certiﬁcate is presented.
Assuming the anonymous PAO is successful, the client
can retrieve M∗
, h, as well as the CA proof
to the proxy. The proxy retrieves the commitment C based
on M∗
, and veriﬁes the correctness of the proof. Assum-
ing the zero-knowledge proof is accepted by the proxy,
the proxy can be certain that the same email account was
used in the anonymous PAO and the certiﬁcate over which
h is computed. Then, the proxy can sign the hash value h
and send the result back to the client.
Anonymous registration. In an anonymous credential
system [6,12,18,32,48], a user can prove to a veriﬁer her
ownership of a credential from a CA without revealing
the credential. Such systems aim at providing anonymity
and unlinkability, i.e., the veriﬁer cannot learn the identity
of the user and multiple uses of the same credential
cannot be linked. However, during registration to obtain a
credential, existing anonymous credential systems all rely
on a trusted third party (the CA) to verify the identity of
the user, for example by performing a conventional PAO.
In settings in which users do not want to reveal that they
have obtained a credential, we can replace the registration
with our blind CA protocol. This allows the user to obtain
a credential attesting to ownership of an email address,
without revealing to any party that a particular user has
obtained the credential.
E. Security Analysis
In this section, we discuss several potential application-
speciﬁc attacks.
Client protocol violation. We start by investigating po-
tential security issues arising from abuse of SMTP seman-
tics. A corrupted client may violate the agreed protocol
via extra requests, fragmented commands, or multiple
commands per request, potentially violating injection se-
crecy. For example, the client might send AUTH PLAIN
bob in the ﬁrst message, followed by AUTH PLAIN
(cid:18)(cid:17)(cid:19)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 
alice, to get a certiﬁcate for an account bob when
really only alice is owned; or she might split the AUTH
command into two pieces, and send the second piece and
the MAIL command in one message. But all will require
either more client commands than the number expected
or change the request/response sequence. When the target
server satisﬁes the requirement NoPipeline or RFCCom-
pliant, the actual number of client commands sent is
visible to the proxy via counting the server’s responses.
Thus if the proxy detects that the client deviates from
the agreed protocol (sending one message but receiving
multiple responses, out-of-order requests/responses, etc.),
the proxy will immediately terminate the session before
the challenge injection.
Proxy injection attacks. The proxy might attempt to vi-
olate transcript privacy and client anonymity by injecting
a message that contains meaningful SMTP commands. A
concrete example is that the proxy can inject a message
like “CRLF.CRLF RCPT:... DATA:...” to initiate a new
message that will be sent to a proxy-controlled email and
learn the email address of the client. This attack can be
ruled out if it sufﬁces to restrict the challenge length to
at most 19 bytes (152 bits): the mandatory ﬁxed bytes
needed (such as CRLFs, command keywords, spaces and
newlines) in the commands would be more than 19 bytes.
Since the client enforces message length (it computes
the hash tag that covers the length), the proxy can’t insert
anything but the agreed upon amount of bytes. Hence, the
attacker will not be able to initiate a new email under this
length restriction. Actually, if the target server satisﬁes the
requirement NoPipeline, the attack will not work since a
message containing multiple commands will be rejected
by the server.
Impersonation and man-in-the-middle attacks. A ma-
licious proxy might announce itself as a veriﬁer proxy
and attempt a man-in-the-middle attack: forward back and
forth messages between the client and the real veriﬁer’s
proxy. In this case, the client can still ﬁnish a PAO. Trans-
action privacy guarantees that the malicious proxy cannot
learn any messages between the client and the real proxy,
but the client may erroneously trust the malicious proxy
as if it were the real proxy and later send her (retrieved)
challenge to it. A malicious proxy might also perform
active man-in-the-middle (MITM) attacks to learn the
plaintext messages sent by the client. These attacks are
easily prevented by having every proxy set up by the
veriﬁer be assigned a certiﬁcate, and the client properly
veriﬁes the proxy’s certiﬁcate and the server’s certiﬁcate
before sending her challenge.
VI. IMPLEMENTATION AND EVALUATION
To demonstrate the feasibility of our SMTP-based PAO
and blind CA, we focus on AES-CBC with HMAC as
a case study. We implemented prototypes of the applica-
tions using open-source libraries.
A. Implementation
PAO prototype implementation. We use tlslite [57]
as the TLS library and modify it to add interfaces for
extracting the key materials being used in a TLS session,
as well as the internal states used in CBC encryption and
SHA-256. We use a Python SMTP library smtplib to
send emails [51]. The client works similarly to a regular
SMTP client and follows the SMTP speciﬁcation. But
we do modify the client greeting message to hide client
host information.
Malicious secure 2PC. We implement 2-party secure
evaluation of AES that is secure against malicious adver-
saries based on the protocol from Rindal and Rosulek [53]
who optimize their implementation in the ofﬂine/online
model. We choose statistical security parameters that offer
2−40 security. Two command-line programs are executed
by the client and the proxy to compute AES blocks.
As in Appendix C, security is not reduced if the proxy
learns the intermediate evaluations of the AES function
in the CBC computation. Thus, we implement our overall
computation by separately computing each AES block in
sequence instead of creating a garbled circuit for the entire
computation. The overall computation circuit for one AES
block contains less than 32,000 boolean gates, 6,800 of
which are AND gates which each require communication
between the parties.
Blind CA implementation. We use the ZKBoo
framework [27] to create multiple non-interactive zero-
knowledge proofs (i.e., ZKBoo proof ) to construct the
CA proof. A CA proof consists of 136 ZKBoo proofs
to achieve a soundness error of roughly 2−80 as in [27].
Although this framework creates a relatively large CA
proof, the operations required to compute the ZKBoo
proofs involve only symmetric primitives (unlike other
techniques for efﬁcient zero-knowledge which require
oblivious transfer). The certiﬁcate signature algorithm
is SHA-256. We implement ZKBoo versions of SHA-
256/HMAC-SHA-256 that support inputs of any length
based on the examples provided in [55], and a ZKBoo
version of AES-CBC based on the code in [20]. AES
S-Boxes are implemented based on [8].
B. Evaluation of SMTP-based anonymous PAO
We treat anonymous PAO as a standalone application
and measure the latency of the SCI portion across dif-
ferent settings. We hosted the proxy on an m3.xlarge
instance in the US-East region of Amazon EC2. The
client was running on an Ubuntu 14.04 (64-bit) virtual
machine built by VirtualBox 4.3.26, and was conﬁgured
with 8 GB RAM and 4 vCPUs. We used a tool called
(cid:18)(cid:17)(cid:19)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:08 UTC from IEEE Xplore.  Restrictions apply. 
0.01 (0.006)
7.24 (1.65)
0.20 (0.06)
0.76 (0.10)
0.31 (0.14)
Loc1 (No Tor) Loc2 (No Tor) With Tor
2P-HMC
0.03 (0.01) 0.31 (0.15)
Ofﬂine
8.55 (1.64) 8.10 (3.10)
2P-CBC
Online
0.35 (0.18) 0.36 (0.16)
Total (without ofﬂine)
1.68 (0.11) 4.31 (0.86)
Baseline (SMTP-TLS)
0.77 (0.45) 3.33 (1.79)
TABLE 6: The median time and standard derivation (in
parentheses) in seconds to complete the 2P-HMAC and
2P-CBC steps, as well as the total PAO and normal
SMTP-TLS session durations across 50 executions in each
location. “With Tor” show the best-performing setting
with Tor being used.
line_profiler [52] to measure the execution time for
each line of code. The sizes of the challenge and message
template are ﬁxed as 152 bits and 512 bytes, respectively.
Latency of SCI. We set up our own SMTP server
(using Postﬁx 2.9.6, with pipelining disabled) on the same
EC2 instance as our proxy to reduce the network latency
between the proxy and server, in order to maximize the
relative impact of performing SCI. The client ran from
two public wireless networks at different locations (la-
beled as Loc1 and Loc2). And in the best-performing
location, we conﬁgured the client to use Tor, either with
the top 3 high-performance routers or randomly selected
routers, to communicate with the proxy. We ran the SMTP
anonymous PAO for 50 rounds under each of the settings.
We report on overhead introduced by SCI in Table 6.
Tor incurs high overheads as one would expect, so we
only report on the best performance. Using public wireless
networks achieves better performance in general. The
most time-consuming part is ofﬂine computation in 2P-
CBC; however, it does not rely on inputs and can be
even done before establishing the TLS connection. As
a baseline, it took the client approximately 0.3 s and
3 to send the same email using conventional SMTP-
TLS without and with Tor respectively. Thus the latency
overhead of SCI is relatively small.
Tests with real services. We tested our anonymous
PAO implementation for SMTP against real services using
Loc1 without Tor. The services we chose were Gmail and
two SMTP servers at two universities (call them server1
and server2). For each service, we measured 50 times
the durations of PAO sessions against normal SMTP-TLS
sessions (i.e., the total time spent on issuing a connection,
sending an email, and closing the connection). As a base-
line, the median duration of normal sessions for Gmail,
server1 and server2 were 0.44, 0.93, and 0.79 seconds,
while median duration of PAO sessions (without ofﬂine
stage) were 1.01, 1.64, and 1.53 seconds.
Server obliviousness and session duration. An ad-
versary might attempt to detect SCI by inspecting the
SMTP session duration: longer sessions would seemingly
be indicative of using SCI. But actually this alone would
not be a very good detector. We extracted and analyzed
the durations of 8,018 SMTP-STARTTLS sessions from a
dataset of terabytes of packet-level trafﬁc traces collected
from campus networks.6 The distribution of the SMTP
durations is long-tailed, and about 15% of the SMTP
sessions analyzed requiring more than 10 s to complete.
This indicates that attempting to detect SCI in such a
coarse way will have a high false-positive rate. Of course,
there could be more reﬁned detection strategies that take
advantage of, for example, inter-packet timing. We leave
examining other possible trafﬁc analysis techniques to
future work.