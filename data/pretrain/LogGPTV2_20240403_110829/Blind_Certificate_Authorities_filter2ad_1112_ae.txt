### Ciphertexts and Identity Binding in Blind Certificate Authorities

Ciphertexts are used to bind the identity of the client in subsequent interactions. It is important to note that [50] demonstrates an attack that compromises the binding security of AES-GCM. However, this attack cannot be directly applied to blind Certificate Authorities (CAs) because the attacker cannot construct arbitrary messages in our setting; all messages must be semantically meaningful to the SMTP server. The question of whether AES-GCM can be used as a secure commitment in blind CAs remains open.

### SMTP Client Configuration

Our SMTP client is configured to use the minimum number of commands (AUTH, MAIL, RCPT, and DATA) to send an email. Each command and the email content are sent in a single message (i.e., a TLS fragment). The first message, which is the TLS-encrypted AUTH PLAIN [sep]alice[sep]password, will authenticate the client’s email account. The fifth message will contain the email body, into which a challenge will be injected. The procedures are illustrated in Figure 5. The first message serves as the commitment \( C \). The client stores the opening of the commitment (the associated CBC-HMAC keys \( K_{\text{hmac}} \) and \( K_{\text{aes}} \)) for later use. The challenge to be injected is a random string \( M^* \), and the proxy adds \( C \) to a table under the index \( M^* \).

### Proxy and Server Interaction

During the anonymous Proof of Ownership (PAO) with bound identity, the proxy expects to see exactly five messages (four commands plus an email) from the client, each followed by one response from the server (excluding TLS handshake messages and the initial cleartext EHLO). It is crucial that the proxy aborts after receiving five responses. Allowing more messages could lead to attacks exploiting the flexibility in the number of messages; see §V-E for details.

Some servers may require an EHLO after STARTTLS. The proxy can check if the server meets these requirements. If it does, the proxy allows the client to use six messages (with six responses) to complete the session, and the second message is taken as the commitment.

### Certificate Generation

The client uses an X.509 certificate template provided by the CA to generate a legitimate X.509 certificate, with the subject field set to the client’s email account (e.g., alice) and the public key field set to the client’s public key (pkey). Other fields (such as expiration duration and organization) are public and will be validated by the CA during certificate generation. The client generates a hash \( h = H(\text{cert}) \) of the certificate and produces a zero-knowledge proof, called the CA proof, demonstrating:

1. Knowledge of the necessary information (email account and public key) to form the certificate (hash \( h \)).
2. Knowledge of the underlying message and the opening of the commitment \( C \), including the secret keys used during the PAO session and the email account and password in \( C \).
3. The account in the subject field of the certificate is the same as the account in \( C \).

The private witness of the proof includes the email account, password, pkey, \( K_{\text{hmac}} \), and \( K_{\text{aes}} \). The proxy does not verify the client’s ownership of the public key; this is done by the party to whom the certificate is presented.

If the anonymous PAO is successful, the client retrieves \( M^* \), \( h \), and the CA proof, and sends them to the proxy. The proxy retrieves the commitment \( C \) based on \( M^* \) and verifies the proof. If the proof is accepted, the proxy signs the hash value \( h \) and sends the result back to the client.

### Anonymous Registration

In an anonymous credential system, a user can prove ownership of a credential from a CA without revealing the credential. Such systems aim to provide anonymity and unlinkability. During registration, existing systems rely on a trusted third party (the CA) to verify the user's identity, often through a conventional PAO. In settings where users do not want to reveal that they have obtained a credential, our blind CA protocol can replace the registration process. This allows the user to obtain a credential attesting to the ownership of an email address without revealing this to any party.

### Security Analysis

#### Potential Attacks

1. **Client Protocol Violation**: A corrupted client might violate the agreed protocol via extra requests, fragmented commands, or multiple commands per request, potentially violating injection secrecy. For example, the client might send `AUTH PLAIN bob` followed by `AUTH PLAIN alice` to get a certificate for an account `bob` when only `alice` is owned. The proxy can detect such violations by counting the server’s responses and terminating the session if deviations are detected.

2. **Proxy Injection Attacks**: The proxy might attempt to inject meaningful SMTP commands to learn the client's email address. This can be prevented by restricting the challenge length to at most 19 bytes (152 bits), as the mandatory fixed bytes needed in the commands would exceed this limit. The client enforces message length, ensuring the proxy cannot insert anything but the agreed amount of bytes.

3. **Impersonation and Man-in-the-Middle (MITM) Attacks**: A malicious proxy might impersonate a verifier and perform MITM attacks. Transaction privacy ensures that the malicious proxy cannot learn any messages between the client and the real proxy, but the client might trust the malicious proxy. Assigning certificates to proxies and verifying these certificates before sending challenges can prevent such attacks.

### Implementation and Evaluation

#### Implementation

- **PAO Prototype**: We used `tlslite` as the TLS library, modifying it to extract key materials and internal states. The client follows the SMTP specification but modifies the greeting message to hide host information.
- **Malicious Secure 2PC**: We implemented 2-party secure evaluation of AES using the protocol from Rindal and Rosulek [53], offering 2−40 security.
- **Blind CA**: We used the ZKBoo framework to create non-interactive zero-knowledge proofs. The CA proof consists of 136 ZKBoo proofs, achieving a soundness error of roughly 2−80.

#### Evaluation

- **Latency of SCI**: We measured the latency of the SCI portion across different settings, hosting the proxy on an m3.xlarge instance and the client on an Ubuntu 14.04 virtual machine. Using public wireless networks generally achieved better performance, with the most time-consuming part being offline computation in 2P-CBC.
- **Tests with Real Services**: We tested the anonymous PAO implementation against Gmail and two university SMTP servers, measuring the durations of PAO sessions against normal SMTP-TLS sessions. The median duration of PAO sessions was slightly longer, indicating a small latency overhead.
- **Server Obliviousness and Session Duration**: An adversary might try to detect SCI by inspecting SMTP session durations, but this method has a high false-positive rate due to the long-tailed distribution of session durations.

This comprehensive approach ensures the security and efficiency of the blind CA and anonymous PAO processes.