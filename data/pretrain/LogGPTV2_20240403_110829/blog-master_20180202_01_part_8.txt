      return;    
    end if;    
    -- 否则继续，降低阈值    
    -- 当阈值小于0.3时，不再降阈值搜索，认为没有相似。    
    if lim < $3 then    
      return;    
    else    
      lim := lim - $4;    
    end if;    
  end loop;    
end;    
$$ language plpgsql strict;    
```    
```    
select * from get_res('输入搜索文本', 输入限制条数, 输入阈值, 输入步长) as t(sml float4, id int, info text);    
```    
使用这个UDF搜索，既快又准。      
```  
postgres=# select * from get_res('四𫗪麾𫑘赁青乖涢鳋揃擝垭岮操彴凄鋺约鞯夗缝特鏋邜鯩垭䌸墙靰礼徛亦猰庴酽恎噡𫓨翱勜嘹雍岈', 10, 0.4, 0.05) as t(sml float4, id int, info text);  
   sml    | id |                                                               info                                                                 
----------+----+----------------------------------------------------------------------------------------------------------------------------------  
 0.602941 |  1 | 佛睰掇贼展跃𫘽唂四𫗪麾𫑘赁青乖涢鳋揃擝垭岮操彴凄鋺约鞯夗缝特鏋邜鯩垭䌸墙靰礼徛亦猰庴酽恎噡𫓨翱勜嘹雍岈擦宠淽蒸佊鴁糜𫝫籹侰亇浰鶙  
(1 row)  
Time: 75.957 ms  
```  
6、如果要设置PG实例、数据库、用户级的阈值，可以通过这两个参数来指定    
```    
pg_trgm.similarity_threshold    
pg_trgm.word_similarity_threshold     
```    
他们分别作用于以下操作符和函数(详见  https://www.postgresql.org/docs/devel/static/pgtrgm.html  )。    
```    
text % text    
similarity(text, text)    
与    
text <% text    
word_similarity(text, text)    
```    
设置举例    
```    
postgres=# alter system set pg_trgm.similarity_threshold =0.9;    
ALTER SYSTEM    
postgres=# select pg_reload_conf();    
 pg_reload_conf     
----------------    
 t    
(1 row)    
-- 永久生效    
postgres=# show pg_trgm.similarity_threshold;    
 pg_trgm.similarity_threshold     
------------------------------    
 0.9    
(1 row)    
```    
## smlar 数组相似UDF分段例子  
准备插件  
```  
git clone https://github.com/jirutka/smlar  
cd smlar/  
USE_PGXS=1 make  
USE_PGXS=1 make install  
psql  
create extension smlar;  
```  
1、测试表  
```  
create unlogged table t (id serial primary key, arr int[]);  
```  
2、生成随机数组函数  
```  
create or replace function gen_rand_arr(int) returns int[] as $$  
  select array(select (random()*$1*5)::int from generate_series(1,$1));  
$$ language sql strict;  
```  
3、写入测试数据  
```  
vi test.sql  
\set i random(50,100)  
insert into t(arr) values (gen_rand_arr(:i));  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 120  
vacuum analyze t;  
postgres=# select count(*) from t;  
  count     
----------  
 19237926  
(1 row)  
```  
4、创建数组相似查询索引  