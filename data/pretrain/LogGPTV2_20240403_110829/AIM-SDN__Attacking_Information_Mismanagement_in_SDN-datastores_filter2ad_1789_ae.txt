every configuration in the datastore has a time variable associated
with it along with other model defined headers. This way when
the configuration expires (system clock vs timeout value), it can
Accepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
be pruned from the datastore by an automatic garbage collector.
This also provides the information of the remaining time for the
configuration, which is important in the case of resetting the last
known configuration to avoid the reset of timers to zero.
6.3 Mitigating misconfigurations
Largely, there are two ways an incorrect configuration can be in-
troduced into the network. First, when an application’s configu-
ration is poisoned by another application or service. This is not
a datastore-specific issue and can be handled by the application
logic by implementing a better threat model and strengthening the
control over the information.
Second, when the two primary datastores inside the SDN con-
troller are not in sync and therefore the configuration datastore
is misconfigured. A reconciliation in the network should be done
using the last known information of the node being reconciled.
When the configuration datastore is picked for reconciliation, the
state that will be reconfigured cannot be trusted as it might have
partial life remaining or it might be expired altogether.
The application which installed the configuration in the config-
uration datastore should implement listeners to the updates in the
operational datastore. Upon events, a snapshot of the operational
datastore (last known state) should be updated in the configuration
datastore.
As mentioned in earlier mitigation, implementing a probing (or
syncing) mechanism is not a good approach as it introduces a lot
of overhead. This also can be prevented using a system clock tied
with the configuration. When the configuration is pulled from the
datastore, the clock can be verified with the timeout values. This
way a flow reconciliation manager inside of SDN controller can
understand that a flow is already expired and should not be pushed
to the network.
During an event of removing the data tree for the nodes re-
moved from the network, before updating the network state in
the operational datastore, a snapshot of the most-recent running
configuration should be updated in the configuration datastore.
Upon reconciliation, the data which will be reconciled from the
configuration datastore will not be the initial configuration of the
node but the most recent configuration itself. Such a preventive
measure does not break the programming model either (two or
more applications modifying the same data).
The OpenFlow plugin, which installs the configuration for an
application into the network, breaks the programming model only
when it modifies the configuration (two or more entities not sharing
application context). With the configurational clock, the plugin can
simply ignore the data. This leaves the responsibility of deletion of
the information with the application or the rightful owner.
6.4 Tracking ownership
We propose to introduce metadata with the configuration to miti-
gate the issue of conflicting ownership of the configuration stored
in the datastore. The metadata can be included as a configurational
element provided to the subscribers of the service. An application
configuring the network, when implementing a configuration, owns
the data and the ownership in the configuration is automatically
11
assigned. Similarly, when the information is moved within the con-
troller without any external world’s interaction, the metadata will
be updated with the producer of the configuration. This also solves
the problem when no participating entity is willing to take the
ownership of the data.
This is the closest to a design-level change, and the drawback
of this mitigation is that it will require modifications to any SDN
component that produces data. Thus, the implementation of this
mitigation represents a significant undertaking.
7 DISCUSSION
SDN suffers from vulnerabilities that are specific to the new de-
sign and architecture of network management systems. The attacks
(what we discussed in this paper) violate key security principles
of cloud-based systems (eg., SDN) and do not necessarily have a
similar impact on a traditional network systems. On the contrary,
well studied network attacks (e.g., IP/MAC spoofing, DoS) can be
crafted differently in SDN, making present defense measures ob-
solete. Therefore, an evolving architecture like SDN demands a
security reanalysis of its components and the adopted design.
Being a hot topic of Internet and datacenters, SDN is actively
researched by academia and industry. Although security in SDN
is not an ignored subject anymore, the architectural weaknesses
are still unexplored which subside the merits of the SDN power-
house. Prior work have found vulnerabilities in implementations
of the SDN services [13, 38] and underlying threats in channels
connecting to the controller [37]. A ground zero analysis of the
existing issues would have exposed the platform-agnostic design-
level problems discussed in this paper. However, researchers have
focused on finding more such issues in the implementations which
limits the scope of the work to the specifically studied systems
(SDN controllers).
As SDN is changing the world, a robust and reliable backbone
(design) becomes a principal requirement. However, there exists
minimal or no security analysis of management, transfer, and use
of the information stored inside SDN controllers. The datastore
standard defined in RFC-8342 [31], acknowledges the disparity of
information across datastores but lacks security analysis. It fails to
identify the information disparity as a security problem: as part of
security considerations, it mentions that the design has “no security
impact” on the network. In this work, we identify weaknesses in
the design which lead to serious security impact on the network.
The vendors which implement the NMDA design trust the stan-
dard for what it mentions about the inherent security. Therefore,
organizations tend to focus only on improving the scalable and mod-
ular attributes of SDN. Security considerations are ignored during
the modeling and development of these controllers and are worked
upon only when researchers highlight serious security problems.
This became increasingly apparent in our research and involve-
ment with these organizations. Many enterprise SDN controllers
are based on open-sourced systems and also contribute to their
development. Therefore, the security issues discussed in this work
spread to a breadth of cloud-based platforms as shown in Table 5.
To continue to harness the benefits of SDN, it is important to
ensure that the identified security risks are attended. Merely ac-
knowledging the security problems and delaying to address them
Accepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
may not be a fruitful approach in the long run. Likewise, providing
workarounds to contain a specific threat is a costly approach as it
does not guarantee a solution or a threat-free SDN controller. To
this extent, a re-design of the datastore management system might
be costly at the moment but can be deemed necessary, profitable
and a more secured approach for safeguarding the future.
8 RELATED WORK
In this section, we analyze the security research done in network
management systems and discuss the relevant attack classes of
SDN.
Security Research in Network Management. Network man-
agement system has been continuously studied and improved since
the inception of the Internet. SNMPv1 [4] suffered many perfor-
mance and security issues which were only partially addressed by
SNMPv2 [9] (with community-based security) and fully addressed
with SNMPv3 [8] which encrypted the traffic and detected mal-
formed packets. However, based on Management Information Base
(MIB), SNMP appears as a costly alternative to manage advancing
networks.
The modern protocols such as NETCONF [6] and OpenFlow [22]
receive research attention from the security community. RFC-5539
[11] and RFC-4742 [10] propose to use Transport Layer Security
(TLS) and Secure Shell (SSH) channel to secure exchanges used
in the protocol. Similarly, OpenFlow is actively researched for im-
provements against spoofing, packet tampering, denial of service,
and side channel attacks as surveyed in [18, 30]. However, much of
the research focus has been in securing the channel of communi-
cation and, consequently, secured mechanisms to manage critical
information within the controller have not been addressed.
Kim and Feamster [17] have attempted to realize the criticality
of robust network management. However, the work is limited to
leveraging the merits of SDN (abstraction and centralized control)
to improve the conventional management techniques and handle
a deluge of network events. Kim and Feamster did not investigate
the security impact of a poorly designed management system over
the entire network and other services.
SDN Attacks and Defense Frameworks. SDN is hot topic of
network security research with noteworthy work done to address
the weaknesses in protecting the availability and integrity of the
network. Various frameworks exist to attack and identify threats
in SDN and its abstracted planes. Most recently, DELTA [19] re-
instantiated and combined the attacking mechanisms defined in
earlier work in a platform agnostic tool (opensourced) and added
protocol-aware fuzzing mechanism to discover vulnerabilities. Al-
though DELTA succeeded in discovering 27 security threats in
diverse SDN environments, its black-box fuzzer could only target
the communication channels with the controller (northbound and
southbound). To discover the vulnerabilities within the controller,
the fuzzer cannot identify a datastore from the behavior of the
service being fuzzed. Therefore, DELTA cannot detect the security
issues that surface from the NMDA design (incorporated by most
of the controllers that it is tested against). We were motivated by
the design of DELTA’s fuzzer to create the randomization in the
12
flow entries to fuzz the target service after identifying its datastore
as mentioned in Section 4.2.
Flow Wars [38] presents a consolidated report on the the current
attack surfaces and threats in SDN and showcases common design
and implementation pitfalls that allow the abuse of SDN networks.
However, since no earlier work has attempted to attack the SDN
datastores, potential issues in the NMDA design (a critical aspect
of the most SDN controllers) are missed as part of its findings.
Other attacks target specific network functions in SDN: Dhawan
et al. [5] detect policy violations in the forwarding plane but does
not take into account the impact on controller and its services, Lee
et al. [20] elaborate on attacks induced from seemingly benign ap-
plications against implementation flaws in other SDN applications.
Xu et al. [35] target the novel TOCTOU attacks against SDN.
Similar to our work, the authors propose a framework in which
forced or natural race conditions in the event-driven system cre-
ate chaos in the network and ultimately lead to breach of trust
boundaries. The framework, however, is not agnostic: an attacker
requires implementation knowledge and expertise to carefully craft
an attack inducing race condition.
Potential defense mechanisms against threats in SDN are pro-
posed in NOSArmor [15] and Avant-guard [32]. As mentioned
in Section 5.4, these systems provide defenses only against the
known attacks in SDN. The attacks mentioned in this paper will
go undetected as they endure a covert execution pattern and do
not necessarily depend on the abuse of communication channels
with controller. Upon integrating these unknown attack classes
with subverting mechanisms such as SDN Rootkits [29], an adver-
sary, outside of the controller can successfully evade detection and
launch an advanced persistent threat to manipulate the network.
Denial of Service and Poisoning Attacks in SDN. Various
works study the impact of availability and integrity of SDN network
through denial of service and poisoning attacks. DoS attacks com-
monly originate from the SDN data plane and target either the for-
warding element (switch) by flooding the local flow tables [34, 36]
or impacting the availability of controller by flooding the south
bound channel between the controller and network [37].
However, the threat model incorporated by the frameworks to
detect the DoS attacks primarily concentrate on detecting the ab-
normal surge in the traffic being handled by the controller. That
is, the focus is placed on identifying the saturation of communica-
tion channels. Design problems that lead to resource consumption
within SDN datastores, as we discuss in this paper, are not explored
yet.
To impact the integrity of the information stored within the con-
troller, TopoGuard [13] aims to detect poisoning attacks. TopoGuard
takes advantage of poor implementation and coordination of ser-
vices (host tracking, topology) within enterprise SDN controllers
to spoof the controller’s view of the infrastructure and impacting
the decision of other dependent services. The paper highlights the
impact that vulnerabilities in one service can have over the entire
network. However, the root cause analysis of the detected issue is
not discussed in the work. Therefore, in this work, we focus on the
root cause for various controller-level violation of trust boundaries.
Accepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
9 CONCLUSION
In this work, we perform a first-of-its-kind security analysis of
the NMDA-defined datastores as implemented by carrier-grade
SDN controllers. We identify new vulnerabilities that stem from a
semantic gap problem between different abstractions as part of the
network and the datastore design. We present new attacks on SDN
that leverage the semantic gap and compromise the controller’s
performance, force misconfigurations in the network, cause races in
the control flow of core services in the controller, and finally disrupt
the critical functionalities of SDN ultimately leading to the crash
of the SDN controller. We demonstrate the proof and impact of
these vulnerabilities by attacking enterprise SDN controllers (ODL
and ONOS) and later working with the concerned organizations to
formulate defensive measures.
REFERENCES
[1] YANG Data Models
(March
http://www.claise.be/2018/03/yang-data-models-in-the-industry-
in the Industry: Current State of Affairs
2018).
current-stte-of-affairs-march-2018/"
[2] Pankaj Berde, Matteo Gerola, Jonathan Hart, Yuta Higuchi, Masayoshi Kobayashi,
Toshio Koide, Bob Lantz, Brian O’Connor, Pavlin Radoslavov, William Snow, and
Guru Parulkar. 2014. ONOS: Towards an Open, Distributed SDN OS. In Proceed-
ings of the Third Workshop on Hot Topics in Software Defined Networking (HotSDN
’14). ACM, New York, NY, USA, 1–6. https://doi.org/10.1145/2620728.2620744
[3] Andy Bierman, Martin Bjorklund, and Kent Watsen. 2017. RESTCONF protocol.
(2017).
[4] Jeffrey D Case, Mark Fedor, Martin L Schoffstall, and James Davin. 1990. Simple
network management protocol, SNMPv1: RFC-1067. (1990).
[5] Mohan Dhawan, Rishabh Poddar, Kshiteej Mahajan, and Vijay Mann. 2015.
SPHINX: Detecting Security Attacks in Software-Defined Networks.. In Pro-
ceedings of the Network and Distributed System Security Symposium 2015.
[6] Rob Enns. 2006. Network configuration protocol (NETCONF). (2006).
[7] Internet Research Task Force. Software-Defined Networking (SDN): Layers and
Architecture Terminology: RFC-7426.
[8] Network Working Group. Simple network management protocol, SNMPv3: RFC-
[9] Network Working Group. 1993. Simple network management protocol, SNMPv2:
3418.
RFC-1452. (April 1993).
[10] Network Working Group. 2006. Using the NETCONF Configuration Protocol
over Secure SHell (SSH): RFC-4742. (2006).
[11] Network Working Group. 2009. NETCONF over Transport Layer Security (TLS):
RFC-5539. (2009).
[12] Jennia Hizver. 2015. Taxonomic modeling of security threats in software defined
networking. In BlackHat Conference. 1–16.
[13] Sungmin Hong, Lei Xu, Haopei Wang, and Guofei Gu. 2015. Poisoning Network
Visibility in Software-Defined Networks: New Attacks and Countermeasures. In
Proceedings of the Network and Distributed System Security Symposium 2015.
[14] Sushant Jain, Alok Kumar, Subhasree Mandal, Joon Ong, Leon Poutievski, Arjun
Singh, Subbaiah Venkata, Jim Wanderer, Junlan Zhou, Min Zhu, et al. 2013. B4:
Experience with a globally-deployed software defined WAN. In ACM SIGCOMM
Computer Communication Review, Vol. 43. ACM, 3–14.
[15] Hyeonseong Jo, Jaehyun Nam, and Seungwon Shin. 2018. NOSArmor: Building a
Secure Network Operating System. Security and Communication Networks 2018.
[16] Min Suk Kang, Virgil D Gligor, and Vyas Sekar. 2016. SPIFFY: Inducing Cost-
Detectability Tradeoffs for Persistent Link-Flooding Attacks.. In Proceedings of
the Network and Distributed System Security Symposium 2016.
[17] Hyojoon Kim and Nick Feamster. 2013. Improving network management with
software defined networking. IEEE Communications Magazine 51, 2, 114–119.
[18] R. Klöti, V. Kotronis, and P. Smith. 2013. OpenFlow: A security analysis. In 2013
21st IEEE International Conference on Network Protocols (ICNP). 1–6.
[19] Seungsoo Lee, Changhoon Yoon, Chanhee Lee, Seungwon Shin, Vinod Yeg-
neswaran, and Phillip Porras. 2017. DELTA: A Security Assessment Framework
for Software-Defined Networks. In Proceedings of the Network and Distributed
System Security Symposium 2017.
[20] Seungsoo Lee, Changhoon Yoon, and Seungwon Shin. 2016. The smaller, the
shrewder: A simple malicious application can kill an entire sdn environment.
In Proceedings of the 2016 ACM International Workshop on Security in Software
Defined Networks & Network Function Virtualization. ACM, 23–28.
[21] Aanchal Malhotra, Isaac E Cohen, Erik Brakke, and Sharon Goldberg. 2016. At-
tacking the Network Time Protocol.. In Proceedings of the Network and Distributed
System Security Symposium 2016.
[22] Nick McKeown, Tom Anderson, Hari Balakrishnan, Guru Parulkar, Larry Pe-
terson, Jennifer Rexford, Scott Shenker, and Jonathan Turner. 2008. OpenFlow:
enabling innovation in campus networks. ACM SIGCOMM Computer Communi-
cation Review 38, 2 (2008), 69–74.
[23] J. Medved, R. Varga, A. Tkacik, and K. Gray. 2014. OpenDaylight: Towards a
Model-Driven SDN Controller architecture. In Proceeding of IEEE International
Symposium on a World of Wireless, Mobile and Multimedia Networks 2014. 1–6.
https://doi.org/10.1109/WoWMoM.2014.6918985
[24] Thomas D Nadeau and Ken Gray. 2013. SDN: Software Defined Networks: An
Authoritative Review of Network Programmability Technologies. " O’Reilly Media,
Inc.".
[25] SDN Open Network Operating Sysyem. Open Networking Foundation Project.
[26] OpenContrail. OpenContrail Silicon Valley Meetup.
[27] SDN OpenDaylight. Linux Foundation Collaborative Project, 2013.
[28] The Linux Foundation Projects. User Stories - OpenDayLight.
[29] Christian Röpke and Thorsten Holz. 2015. SDN Rootkits: Subverting Network
Operating Systems of Software-Defined Networks. In Research in Attacks, In-
trusions, and Defenses, Herbert Bos, Fabian Monrose, and Gregory Blanc (Eds.).
Springer International Publishing, Cham, 339–356.
[30] Sandra Scott-Hayward, Gemma O’Callaghan, and Sakir Sezer. 2013. SDN security:
A survey. In Future Networks and Services (SDN4FNS), 2013 IEEE SDN For. IEEE,
1–7.
[31] Philip Shafer, Martin Bjorklund, Robert Wilton, Jürgen Schönwälder, and Kent
Watsen. 2018. Network Management Datastore Architecture: RFC-8342. Network
(2018).
[32] Seungwon Shin, Vinod Yegneswaran, Phillip Porras, and Guofei Gu. 2013. Avant-
guard: Scalable and vigilant switch flow management in software-defined net-
works. In Proceedings of the 2013 ACM SIGSAC conference on Computer & commu-
nications security. ACM, 413–424.
[33] Mininet Team. 2014. Mininet. http://mininet.org
[34] Haopei Wang, Lei Xu, and Guofei Gu. 2015. Floodguard: A dos attack prevention
extension in software-defined networks. In Dependable Systems and Networks
(DSN), 2015 45th Annual IEEE/IFIP International Conference on. IEEE, 239–250.
[35] Lei Xu, Jeff Huang, Sungmin Hong, Jialong Zhang, and Guofei Gu. 2017. Attacking
the Brain: Races in the SDN Control Plane. In 26th {USENIX} Security Symposium
({USENIX} Security 17). {USENIX} Association, 451–468.
[36] T. Xu, D. Gao, P. Dong, C. H. Foh, and H. Zhang. 2017. Mitigating the
Table-Overflow Attack in Software-Defined Networking.
IEEE Transactions
on Network and Service Management 14, 4, 1086–1097. https://doi.org/10.1109/
TNSM.2017.2758796
[37] Q. Yan, F. R. Yu, Q. Gong, and J. Li. 2016. Software-Defined Networking (SDN) and
Distributed Denial of Service (DDoS) Attacks in Cloud Computing Environments:
A Survey, Some Research Issues, and Challenges. IEEE Communications Surveys
Tutorials 18, 1, 602–622.
[38] C. Yoon, S. Lee, H. Kang, T. Park, S. Shin, V. Yegneswaran, P. Porras, and G. Gu.
2017. Flow Wars: Systemizing the Attack Surface and Defenses in Software-
Defined Networks.
IEEE/ACM Transactions on Networking 25, 6, 3514–3530.
https://doi.org/10.1109/TNET.2017.2748159
13