### 6.3 Mitigating Misconfigurations

There are two primary ways in which incorrect configurations can be introduced into the network:

1. **Application Poisoning**: An application's configuration can be compromised by another application or service. This is not specific to the datastore and can be mitigated by implementing a more robust threat model and enhancing control over the information within the application logic.

2. **Datastore Synchronization Issues**: When the two primary datastores within the SDN controller are out of sync, the configuration datastore may become misconfigured. In such cases, reconciliation should be performed using the last known state of the node being reconciled. If the configuration datastore is chosen for reconciliation, the reconfigured state cannot be fully trusted, as it may have partial life remaining or may have already expired.

To address this, the application that installed the configuration in the configuration datastore should implement listeners for updates in the operational datastore. Upon detecting events, a snapshot of the operational datastore (the last known state) should be updated in the configuration datastore.

As mentioned earlier, a probing or syncing mechanism is not ideal due to the overhead it introduces. Instead, a system clock tied to the configuration can be used. When a configuration is retrieved from the datastore, the system clock can be verified against the timeout values. This allows the flow reconciliation manager within the SDN controller to determine if a flow has expired and should not be pushed to the network.

When removing the data tree for nodes that have been removed from the network, a snapshot of the most recent running configuration should be updated in the configuration datastore before updating the network state in the operational datastore. This ensures that the data reconciled from the configuration datastore will be the most recent configuration, rather than the initial one. This preventive measure does not break the programming model, even when multiple applications modify the same data.

The OpenFlow plugin, which installs the configuration for an application into the network, only breaks the programming model when it modifies the configuration without sharing the application context. With the configurational clock, the plugin can simply ignore outdated data, leaving the responsibility of deletion with the application or the rightful owner.

### 6.4 Tracking Ownership

We propose introducing metadata with the configuration to mitigate the issue of conflicting ownership of the configuration stored in the datastore. The metadata can be included as a configurational element provided to the subscribers of the service. When an application configures the network, it automatically owns the data, and the ownership is assigned accordingly. Similarly, when the information is moved within the controller without external interaction, the metadata will be updated with the producer of the configuration. This also addresses the problem when no participating entity is willing to take ownership of the data.

This approach requires design-level changes and the drawback is that it will necessitate modifications to any SDN component that produces data. Thus, the implementation of this mitigation represents a significant undertaking.

### 7. Discussion

SDN is vulnerable to specific security issues due to its new design and architecture. The attacks discussed in this paper violate key security principles of cloud-based systems and do not necessarily have a similar impact on traditional network systems. Conversely, well-studied network attacks (e.g., IP/MAC spoofing, DoS) can be crafted differently in SDN, rendering current defense measures obsolete. Therefore, an evolving architecture like SDN demands a reanalysis of its components and design.

SDN is a hot topic in academia and industry, and while security in SDN is no longer ignored, architectural weaknesses remain unexplored, undermining the benefits of SDN. Prior work has identified vulnerabilities in SDN service implementations and underlying threats in channels connecting to the controller. A comprehensive analysis would have exposed platform-agnostic design-level problems, but researchers have focused on finding issues in specific implementations, limiting the scope of their work.

As SDN transforms the world, a robust and reliable backbone (design) becomes essential. However, there is minimal or no security analysis of the management, transfer, and use of information stored inside SDN controllers. The datastore standard defined in RFC-8342 acknowledges the disparity of information across datastores but lacks security analysis, failing to identify it as a security problem. Vendors implementing the NMDA design trust the standard, leading organizations to focus only on improving the scalable and modular attributes of SDN, often ignoring security considerations until serious issues are highlighted by researchers.

Many enterprise SDN controllers are based on open-sourced systems, contributing to the spread of security issues across cloud-based platforms. To continue harnessing the benefits of SDN, it is crucial to address the identified security risks. Merely acknowledging the problems and delaying action is not a fruitful long-term approach. Providing workarounds for specific threats is costly and does not guarantee a secure SDN controller. A redesign of the datastore management system, although costly, is necessary, profitable, and a more secure approach for safeguarding the future.

### 8. Related Work

#### Security Research in Network Management

Network management systems have been continuously studied and improved since the inception of the Internet. SNMPv1 suffered from performance and security issues, partially addressed by SNMPv2 and fully by SNMPv3. However, SNMP, based on MIB, is a costly alternative for managing advancing networks.

Modern protocols like NETCONF and OpenFlow receive research attention. RFC-5539 and RFC-4742 propose using TLS and SSH to secure exchanges in these protocols. OpenFlow is actively researched for improvements against spoofing, packet tampering, DoS, and side-channel attacks. However, much of the research focuses on securing communication channels, neglecting mechanisms to manage critical information within the controller.

Kim and Feamster [17] leveraged SDN's merits (abstraction and centralized control) to improve conventional management techniques and handle a deluge of network events. However, they did not investigate the security impact of a poorly designed management system on the entire network and other services.

#### SDN Attacks and Defense Frameworks

SDN is a hot topic in network security research, with notable work addressing weaknesses in protecting the availability and integrity of the network. Various frameworks exist to attack and identify threats in SDN and its abstracted planes. DELTA [19] combined attacking mechanisms in a platform-agnostic tool and added protocol-aware fuzzing to discover vulnerabilities. Although DELTA discovered 27 security threats in diverse SDN environments, its black-box fuzzer could only target communication channels, missing vulnerabilities within the controller. We were motivated by DELTAâ€™s fuzzer to create randomization in flow entries to fuzz the target service after identifying its datastore.

Flow Wars [38] presents a consolidated report on current attack surfaces and threats in SDN, showcasing common design and implementation pitfalls. However, since no earlier work has attacked SDN datastores, potential issues in the NMDA design are missed. Other attacks target specific network functions in SDN, but do not consider the impact on the controller and its services.

Potential defense mechanisms against threats in SDN are proposed in NOSArmor [15] and Avant-guard [32]. These systems provide defenses only against known attacks in SDN. The attacks mentioned in this paper, enduring a covert execution pattern, will go undetected, as they do not necessarily depend on the abuse of communication channels with the controller. Integrating these unknown attack classes with subverting mechanisms like SDN Rootkits [29], an adversary outside the controller can evade detection and launch advanced persistent threats to manipulate the network.

#### Denial of Service and Poisoning Attacks in SDN

Various works study the impact of availability and integrity of SDN networks through DoS and poisoning attacks. DoS attacks commonly originate from the SDN data plane, targeting either the forwarding element (switch) by flooding local flow tables or impacting the controller's availability by flooding the southbound channel.

However, threat models incorporated by frameworks to detect DoS attacks primarily focus on identifying abnormal traffic surges, placing emphasis on communication channel saturation. Design problems leading to resource consumption within SDN datastores, as discussed in this paper, are not explored.

TopoGuard [13] aims to detect poisoning attacks by taking advantage of poor implementation and coordination of services within enterprise SDN controllers. TopoGuard highlights the impact that vulnerabilities in one service can have on the entire network. However, the root cause analysis of detected issues is not discussed. In this work, we focus on the root causes of various controller-level violations of trust boundaries.

### 9. Conclusion

In this work, we perform a first-of-its-kind security analysis of the NMDA-defined datastores as implemented by carrier-grade SDN controllers. We identify new vulnerabilities stemming from a semantic gap between different abstractions in the network and datastore design. We present new attacks on SDN that leverage this semantic gap, compromising the controller's performance, forcing misconfigurations, causing races in core services, and ultimately disrupting critical functionalities, leading to the crash of the SDN controller. We demonstrate the proof and impact of these vulnerabilities by attacking enterprise SDN controllers (ODL and ONOS) and working with the concerned organizations to formulate defensive measures.