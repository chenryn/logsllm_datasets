**Describe the bug**  
If we create a datetime at year 0, month 1, day 1 with a timezone such that
the utc equivalent  
would refer to a UTC time that is in a BC year a and save it to a database,  
then we can't deserialize it back to a datetime - as when we write the utc
**Expected behavior**
We shouldn't be able to insert datetime values that can't be deserialized back
into a datetime.
**To Reproduce**
    from uuid import uuid4, UUID
    from datetime import datetime, timezone, timedelta
    from sqlalchemy import (
        Column,
        DateTime,
    )
    from sqlalchemy.ext.declarative import declarative_base
    Base = declarative_base()
    class Example(Base):
        __tablename__ = "example"
        example_id = Column(UUID(as_uuid=True), primary_key=True)
        date = Column(DateTime(timezone=True), nullable=True)
    bc_datetime = datetime(year=1, month=1, day=1, tzinfo=timezone(timedelta(hours=1)))
    db_session.add(
        Example(
            example_id=uuid4(),
            date=bc_datetime.
        )
    )
    db.commit()
    # This works
    # but this won't, as date can't be serialized into a datetime:
    example = db.query(Example).first()
    example.date
**Versions.**
  * OS: Ubuntu 20.04.2 LTS
  * Python: 3.8.5
  * SQLAlchemy:
  * Database: PostgreSQL 11.9
  * DBAPI: