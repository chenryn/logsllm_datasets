executed, but you just don’t know when. Consequently, you should never
write code that depends on destructors running in a particular sequence or at a
specific point in your application.
How does the garbage collector work?
The garbage collector runs in its own thread and can execute only at certain
times—typically when your application reaches the end of a method. While it
runs, other threads running in your application will temporarily halt because
the garbage collector might need to move objects around and update object
Download from finelybook PI:EMAIL
486
references, and it cannot do this while objects are in use.
Note A thread is a separate path of execution in an application.
Windows uses threads to enable an application to perform multiple
operations concurrently.
The garbage collector is a complex piece of software that is self-tuning
and implements some optimizations to try to balance the need to keep
memory available with the requirement to maintain the performance of the
application. The details of the internal algorithms and structures that the
garbage collector uses are beyond the scope of this book (and Microsoft
continually refines the way in which the garbage collector performs its work),
but at a high level, the steps that the garbage collector takes are as follows:
1. It builds a map of all reachable objects. It does this by repeatedly
following reference fields inside objects. The garbage collector builds
this map very carefully and ensures that circular references do not cause
infinite recursion. Any object not in this map is deemed to be
unreachable.
2. It checks whether any of the unreachable objects has a destructor that
needs to be run (a process called finalization). Any unreachable object
that requires finalization is placed in a special queue called the
freachable queue (pronounced “F-reachable”).
3. It deallocates the remaining unreachable objects (those that don’t require
finalization) by moving the reachable objects down the heap, thus
defragmenting the heap and freeing memory at its top. When the
garbage collector moves a reachable object, it also updates any
references to the object.
4. At this point, it allows other threads to resume.
5. It finalizes the unreachable objects that require finalization (now in the
freachable queue) by running the Finalize methods on its own thread.
Download from finelybook PI:EMAIL
487
Recommendations
Writing classes that contain destructors adds complexity to your code and the
garbage collection process and makes your program run more slowly. If your
program does not contain any destructors, the garbage collector does not need
to place unreachable objects in the freachable queue and finalize them.
Clearly, not doing something is faster than doing it. Therefore, try to avoid
using destructors except when you really need them—use them only to
reclaim unmanaged resources. (You can consider a using statement instead,
as will be described later in this chapter.)
You need to be very careful when you write a destructor. In particular, be
aware that if your destructor calls other objects, those other objects might
have already had their destructor called by the garbage collector. Remember
that the order of finalization is not guaranteed. Therefore, ensure that
destructors do not depend on one another or overlap one another—don’t have
two destructors that try to release the same resource, for example.
Resource management
Sometimes it’s inadvisable to release a resource in a destructor; some
resources are just too valuable to lie around waiting for an arbitrary length of
time until the garbage collector actually releases them. Scarce resources such
as memory, database connections, or file handles need to be released, and
they need to be released as soon as possible. In these situations, your only
option is to release the resource yourself. You can achieve this by creating a
disposal method—a method that explicitly disposes of a resource. If a class
has a disposal method, you can call it and control when the resource is
released.
Note The term disposal method refers to the purpose of the method
rather than its name. A disposal method can be named using any valid
C# identifier.
Download from finelybook PI:EMAIL
488
Disposal methods
An example of a class that implements a disposal method is the TextReader
class from the System.IO namespace. This class provides a mechanism to
read characters from a sequential stream of input. The TextReader class
contains a virtual method named Close, which closes the stream. The
StreamReader class (which reads characters from a stream, such as an open
file) and the StringReader class (which reads characters from a string) both
derive from TextReader, and both override the Close method. Here’s an
example that reads lines of text from a file by using the StreamReader class
and then displays them on the screen:
Click here to view code image
TextReader reader = new StreamReader(filename);
string line;
while ((line = reader.ReadLine()) != null)
{
    Console.WriteLine(line);
}
reader.Close();
The ReadLine method reads the next line of text from the stream into a
string. The ReadLine method returns null if there is nothing left in the stream.
It’s important to call Close when you have finished with reader to release the
file handle and associated resources. However, there is a problem with this
example: it’s not safe from exceptions. If the call to ReadLine or WriteLine
throws an exception, the call to Close will not happen; it will be bypassed. If
this happens often enough, you will run out of file handles and be unable to
open any more files.
Exception-safe disposal
One way to ensure that a disposal method (such as Close) is always called,
regardless of whether there is an exception, is to call the disposal method
within a finally block. Here’s the preceding example coded by using this
technique:
Click here to view code image
TextReader reader = new StreamReader(filename);
try
{
Download from finelybook PI:EMAIL
489
    string line;
    while ((line = reader.ReadLine()) != null)
    {
        Console.WriteLine(line);
    }
}
finally
{
      reader.Close();
}
Using a finally block like this works, but it has several drawbacks that
make it a less-than-ideal solution:
It quickly becomes unwieldy if you have to dispose of more than one
resource. (You end up with nested try and finally blocks.)
In some cases, you might need to modify the code to make it fit this
idiom. (For example, you might need to reorder the declaration of the
resource reference, remember to initialize the reference to null, and
remember to check that the reference isn’t null in the finally block.)
It fails to create an abstraction of the solution. This means that the
solution is hard to understand and you must repeat the code everywhere
you need this functionality.
The reference to the resource remains in scope after the finally block.
This means that you can accidentally try to use the resource after it has
been released.
The using statement is designed to solve all these problems.
The using statement and the IDisposable interface
The using statement provides a clean mechanism for controlling the lifetimes
of resources. You can create an object, and this object will be destroyed when
the using statement block finishes.
Important Do not confuse the using statement shown in this section
with the using directive that brings a namespace into scope. It is
unfortunate that the same keyword has two different meanings.
Download from finelybook PI:EMAIL
490
The syntax for a using statement is as follows:
Click here to view code image
using ( type variable = initialization )
{
    StatementBlock
}
Here is the best way to ensure that your code always calls Close on a
TextReader:
Click here to view code image
using (TextReader reader = new StreamReader(filename))
{
    string line;
    while ((line = reader.ReadLine()) != null)
    {
        Console.WriteLine(line);
    }
}
This using statement is equivalent to the following transformation:
Click here to view code image
{
    TextReader reader = new StreamReader(filename);
    try
    {
      string line;
      while ((line = reader.ReadLine()) != null)
      {
          Console.WriteLine(line);
      }
    }
    finally
    {
        if (reader != null)
        {
            ((IDisposable)reader).Dispose();
        }
    }
}
Download from finelybook PI:EMAIL
491
Note The using statement introduces its own block for scoping
purposes. This arrangement means that the variable you declare in a
using statement automatically goes out of scope at the end of the
embedded statement and you cannot accidentally attempt to access a
disposed resource.
The variable you declare in a using statement must be of a type that
implements the IDisposable interface. The IDisposable interface lives in the
System namespace and contains just one method, named Dispose:
Click here to view code image
namespace System
{
    interface IDisposable
    {
        void Dispose();
    }
}
The purpose of the Dispose method is to free any resources used by an
object. It just so happens that the StreamReader class implements the
IDisposable interface, and its Dispose method calls Close to close the stream.
You can employ a using statement as a clean, exception-safe, and robust way
to ensure that a resource is always released. This approach solves all the
problems that existed in the manual try/finally solution. You now have a
solution that does the following:
Scales well if you need to dispose of multiple resources.
Doesn’t distort the logic of the program code.
Abstracts away the problem and avoids repetition.
Is robust. You can’t accidentally reference the variable declared within
the using statement (in this case, reader) after the using statement has
ended because it’s not in scope anymore—you’ll get a compile-time
error.
Download from finelybook PI:EMAIL
492
Calling the Dispose method from a destructor
When writing your own classes, should you write a destructor or implement
the IDisposable interface so that instances of your class can be managed by a
using statement? A call to a destructor will happen, but you just don’t know
when. On the other hand, you know exactly when a call to the Dispose
method happens, but you just can’t be sure that it will actually happen
because it relies on the programmer who is using your classes to remember to
write a using statement. However, it is possible to ensure that the Dispose
method always runs by calling it from the destructor. This acts as a useful
backup. You might forget to call the Dispose method, but at least you can be
sure that it will be called, even if it’s only when the program shuts down. You
will investigate this feature in detail in the exercises at the end of the chapter,
but here’s an example of how you might implement the IDisposable
interface:
Click here to view code image
class Example : IDisposable
{
    private Resource scarce;       // scarce resource to manage and
dispose
    private bool disposed = false; // flag to indicate whether the
resource
                                   // has already been disposed
    ...
    ~Example()
    {
        this.Dispose(false);
    }
    public virtual void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }
    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            if (disposing)
            {
                // release large, managed resource here
                ...
            }
Download from finelybook PI:EMAIL
493
            // release unmanaged resources here
            ...
            this.disposed = true;
        }
    }
    public void SomeBehavior() // example method
    {
        checkIfDisposed();
        ...
    }
    ...
    private void checkIfDisposed()
    {
        if (this.disposed)
        {
            throw new ObjectDisposedException("Example: object has
been disposed");
        }
    }
}
Notice the following features of the Example class:
The class implements the IDisposable interface.
The public Dispose method can be called at any time by your
application code.
The public Dispose method calls the protected and overloaded version
of the Dispose method that takes a Boolean parameter, passing the
value true as the argument. This method actually performs the resource
disposal.
The destructor calls the protected and overloaded version of the
Dispose method that takes a Boolean parameter, passing the value false
as the argument. The destructor is called only by the garbage collector
when your object is being finalized.
You can call the protected Dispose method safely multiple times. The
variable disposed indicates whether the method has already been run
and is a safety feature to prevent the method from attempting to
dispose of the resources multiple times if it is called concurrently.
(Your application might call Dispose, but before the method completes,
your object might be subject to garbage collection and the Dispose
Download from finelybook PI:EMAIL
494
method run again by the CLR from the destructor.) The resources are
released only the first time the method runs.
The protected Dispose method supports disposal of managed resources
(such as a large array) and unmanaged resources (such as a file handle).
If the disposing parameter is true, this method must have been called
from the public Dispose method. In this case, the managed resources
and unmanaged resources are all released. If the disposing parameter is
false, this method must have been called from the destructor, and the
garbage collector is finalizing the object. In this case, it is not
necessary (or exception-safe) to release the managed resources because
they will be, or might already have been, handled by the garbage
collector, so only the unmanaged resources are released.
The public Dispose method calls the static GC.SuppressFinalize
method. This method stops the garbage collector from calling the
destructor on this object because the object has already been finalized.
All the regular methods of the class (such as SomeBehavior) check to
see whether the object has already been discarded. If it has, they throw
an exception.
Implementing exception-safe disposal
In the following set of exercises, you will examine how the using statement
helps to ensure that resources used by objects in your applications can be
released promptly, even if an exception occurs in your application code.
Initially, you will implement a simple class that implements a destructor and
examine when this destructor is invoked by the garbage collector.
Note The Calculator class created in these exercises is intended only to
illustrate the essential principles of garbage collection. The class does
not actually consume any significant managed or unmanaged resources.
You would not normally create a destructor or implement the
IDisposable interface for such a simple class as this.
Download from finelybook PI:EMAIL
495
Create a simple class that uses a destructor
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. On the File menu, point to New, and then click Project.
The New Project dialog box opens.
3. In the New Project dialog box, in the left pane, click Visual C#. In the
middle pane, select the Console App (.NET Framework) template. In the
Name box near the bottom of the dialog box, type
GarbageCollectionDemo. In the Location field, specify the folder
Microsoft Press\VCSBS\Chapter 14 in your Documents folder, and then
click OK.
Tip You can use the Browse button adjacent to the Location field
to navigate to the Microsoft Press\VCSBS\Chapter 14 folder
instead of typing the path manually.
Visual Studio creates a new console application and displays the
Program.cs file in the Code and Text Editor window.
4. On the Project menu, click Add Class.
The Add New Item – GarbageCollectionDemo dialog box opens.
5. In the Add New Item – GarbageCollectionDemo dialog box, ensure that
the Class template is selected. In the Name box, type Calculator.cs, and
then click Add.
The Calculator class is created and displayed in the Code and Text
Editor window.
6. Add the following public Divide method (shown in bold) to the
Calculator class:
Click here to view code image
Download from finelybook PI:EMAIL
496
class Calculator
{
    public int Divide(int first, int second)
    {
        return first / second;
    }
}
This is a very straightforward method that divides the first parameter by
the second and returns the result. It is provided just to add a bit of
functionality that can be called by an application.
7. Above the Divide method, add the public constructor shown in bold in
the code that follows:
Click here to view code image
class Calculator
{
    public Calculator()
    {
        Console.WriteLine("Calculator being created");
    }
    ...
}
The purpose of this constructor is to enable you to verify that a
Calculator object has been successfully created.
8. Add the destructor shown in bold in the following code, after the
constructor:
Click here to view code image
class Calculator
{
    ...
    ~Calculator()
    {
        Console.WriteLine("Calculator being finalized");
    }
    ...
}
This destructor simply displays a message so that you can see when the
garbage collector runs and finalizes instances of this class. When writing
classes for real-world applications, you would not normally output text
in a destructor.
Download from finelybook PI:EMAIL
497
9. Display the Program.cs file in the Code and Text Editor window.
10. In the Program class, add the following statements shown in bold to the
Main method:
Click here to view code image
static void Main(string[] args)
{
    Calculator calculator = new Calculator();
    Console.WriteLine($"120 / 15 = {calculator.Divide(120,
15)}");
    Console.WriteLine("Program finishing");
}
This code creates a Calculator object, calls the Divide method of this
object (and displays the result), and then outputs a message as the
program finishes.
11. On the Debug menu, click Start Without Debugging. Verify that the
program displays the following series of messages:
Click here to view code image
Calculator being created
120 / 15 = 8
Program finishing
Calculator being finalized
Notice that the finalizer for the Calculator object runs only when the
application is about to finish, after the Main method has completed.
12. In the console window, press the Enter key and return to Visual Studio
2017.
The CLR guarantees that all objects created by your applications will be
subject to garbage collection, but you cannot always be sure when this will
happen. In the exercise, the program was very short-lived, and the Calculator
object was finalized when the CLR tidied up as the program finished.
However, you might also find that this is the case in more substantial
applications with classes that consume scarce resources, and unless you take
the necessary steps to provide a means of disposal, the objects that your
applications create might retain their resources until the application finishes.