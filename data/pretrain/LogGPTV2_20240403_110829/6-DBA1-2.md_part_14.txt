19:avahi:x:70:70:Avahi mDNS/DNS-SD
Stack:/var/run/avahi-daemon:/sbin/nologin
24:rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin
25:rpcuser:x:29:29:RPC Service User:/var/lib/nfs:/sbin/nologin
28:radvd:x:75:75:radvd user:/:/sbin/nologin
29:ntp:x:38:38::/etc/ntp:/sbin/nologin
33:gdm:x:42:42::/var/lib/gdm:/sbin/nologin
35:postfix:x:89:89::/var/spool/postfix:/sbin/nologin
36:sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
37:tcpdump:x:72:72::/:/sbin/nologin
39:mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false
## 3 **操作表记录**
3.1 问题
练习表记录的操作
表记录的插入
表记录的更新
表记录的查询
表记录的删除
3.2 步骤
实现此案例需要按照如下步骤进行。
### 步骤一：创建stu_info表，并确保stu_info表记录为空。
在userdb库中创建stu_info表：
\[root@dbsvr1 \~\]# mysql -uroot -p
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \\g.
Your MySQL connection id is 19
Server version: 5.7.17 MySQL Community Server (GPL)
Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights
reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current
input statement.
mysql\> use userdb;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
mysql\> CREATE TABLE stu_info(
-\> name varchar(12) NOT NULL,
-\> gender enum(\'boy\',\'girl\') DEFAULT \'boy\',
-\> age int(3) NOT NULL
-\> );
Query OK, 0 rows affected (0.23 sec)
删除stu_info表的所有记录：
mysql\> DELETE FROM stu_info;
Query OK, 0 rows affected (0.00 sec) //stu_info表刚建立 删除零条记录
确认删除结果：
mysql\> SELECT \* FROM stu_info;
Empty set (0.00 sec)
### 步骤二：练习表记录的操作
1）插入记录时，指定记录的每一个字段的值
这种情况下，不需要明确指出字段，但每条记录的值的顺序、类型都必须与表格结构向一致，否则可能无法正确插入记录。
比如，以下操作将向stu_info表插入3条表记录：
mysql\> INSERT stu_info VALUES
-\> (\'Jim\',\'girl\',24),
-\> (\'Tom\',\'boy\',21),
-\> (\'Lily\',\'girl\',20);
Query OK, 3 rows affected (0.15 sec)
Records: 3 Duplicates: 0 Warnings: 0
完成插入后确认表记录：
mysql\> SELECT \* FROM stu_info;
+\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| name \| gender \| age \|
+\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| Jim \| girl \| 24 \|
\| Tom \| boy \| 21 \|
\| Lily \| girl \| 20 \|
+\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
3 rows in set (0.00 sec)
2）插入记录时，只指定记录的部分字段的值
这种情况下，必须指出各项值所对应的字段；而且，未赋值的字段应设置有默认值或者有自增填充属性或者允许为空，否则插入操作将会失败。
比如，向stu_info表插入Jerry的年龄信息，性别为默认的"boy"，自动编号，相关操作如下：
mysql\> INSERT INTO stu_info(name,age)
-\> VALUES(\'Jerry\',27);
Query OK, 1 row affected (0.04 sec)
类似的，再插入用户Mike的年龄信息：
mysql\> INSERT INTO stu_info(name,age)
-\> VALUES(\'Mike\',21);
Query OK, 1 row affected (0.05 sec)
确认目前stu_info表的所有记录：
mysql\> SELECT \* FROM stu_info;
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| name \| gender \| age \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| Jim \| girl \| 24 \|
\| Tom \| boy \| 21 \|
\| Lily \| girl \| 20 \|
\| Jerry \| boy \| 27 \|
\| Mike \| boy \| 21 \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
5 rows in set (0.00 sec)
3）更新表记录时，若未限制条件，则适用于所有记录
将stu_info表中所有记录的age设置为10：
mysql\> UPDATE stu_info SET age=10;
Query OK, 5 rows affected (0.04 sec)
Rows matched: 5 Changed: 5 Warnings: 0
确认更新结果：
mysql\> SELECT \* FROM stu_info;
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| name \| gender \| age \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| Jim \| girl \| 10 \|
\| Tom \| boy \| 10 \|
\| Lily \| girl \| 10 \|
\| Jerry \| boy \| 10 \|
\| Mike \| boy \| 10 \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
5 rows in set (0.00 sec)
4）更新表记录时，可以限制条件，只对符合条件的记录有效
将stu_info表中所有性别为"boy"的记录的age设置为20：
mysql\> UPDATE stu_info SET age=20
-\> WHERE gender=\'boy\';
Query OK, 3 rows affected (0.04 sec)
Rows matched: 3 Changed: 3 Warnings: 0
确认更新结果：
mysql\> SELECT \* FROM stu_info;
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| name \| gender \| age \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| Jim \| girl \| 10 \|
\| Tom \| boy \| 20 \|
\| Lily \| girl \| 10 \|
\| Jerry \| boy \| 20 \|
\| Mike \| boy \| 20 \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
5 rows in set (0.00 sec)
5）删除表记录时，可以限制条件，只删除符合条件的记录
删除stu_info表中年龄小于18的记录：
mysql\> DELETE FROM stu_info WHERE age \ SELECT \* FROM stu_info;
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| name \| gender \| age \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| Tom \| boy \| 20 \|
\| Jerry \| boy \| 20 \|
\| Mike \| boy \| 20 \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
3 rows in set (0.00 sec)
6）删除表记录时，如果未限制条件，则会删除所有的表记录
删除stu_info表的所有记录：
mysql\> DELETE FROM stu_info;
Query OK, 3 rows affected (0.00 sec)
确认删除结果：
mysql\> SELECT \* FROM stu_info;
Empty set (0.00 sec)
## 4 **查询及匹配条件**
4.1 问题
练习常见的SQL查询及条件设置
创建stu_info表，并插入数据
练习常见SQL查询及条件设置
4.2 步骤
实现此案例需要按照如下步骤进行。
### 步骤一：根据任务要求建立员工档案表stu_info（如上个实验已创建，可将上个实验stu_info表中记录清除后继续使用）
1）在userdb库中创建stu_info表
以root用户登入MySQL服务器：
\[root@dbsvr1 \~\]# mysql -u root -p
Enter password:
Welcome to the MySQL monitor. Commands end with ; or \\g.
Your MySQL connection id is 5
Server version: 5.6.15 MySQL Community Server (GPL)
Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights
reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current
input statement.
mysql\>
打开test库：
mysql\> USE userdb;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
创建stu_info表，包括name、gender、age三个字段：
mysql\> CREATE TABLE stu_info(
-\> name varchar(12) NOT NULL,
-\> gender enum(\'boy\',\'girl\') DEFAULT \'boy\',
-\> age int(3) NOT NULL
-\> );
Query OK, 0 rows affected (0.03 sec)
确认表结构：
mysql\> DESC stu_info;
+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Field \| Type \| Null \| Key \| Default \| Extra \|
+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| name \| varchar(12) \| NO \| \| NULL \| \|
\| gender \| enum(\'boy\',\'girl\') \| YES \| \| boy \| \|
\| age \| int(3) \| NO \| \| NULL \| \|
+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
3 rows in set (0.01 sec)
2）准备测试表格
向建立的stu_info表插入几条测试记录
mysql\> INSERT INTO stu_info VALUES
-\> (\'Jim\',\'girl\',24),
-\> (\'Tom\',\'boy\',21),
-\> (\'Lily\',\'girl\',20),
-\> (\'Jerry\',\'boy\',27),
-\> (\'Mike\',\'boy\',21)
-\> ;
Query OK, 5 rows affected (0.06 sec)
Records: 5 Duplicates: 0 Warnings: 0
确认stu_info表的所有记录内容：
mysql\> SELECT \* FROM stu_info;
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| name \| gender \| age \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| Jim \| girl \| 24 \|
\| Tom \| boy \| 21 \|
\| Lily \| girl \| 20 \|
\| Jerry \| boy \| 27 \|
\| Mike \| boy \| 21 \|
+\-\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
5 rows in set (0.00 sec)
### 步骤二：练习常见SQL查询及条件设置
1）常用的表记录统计函数
查询stu_info表一共有多少条记录（本例中为5条）：
mysql\> SELECT count(\*) FROM stu_info;
+\-\-\-\-\-\-\-\-\--+
\| count(\*) \|
+\-\-\-\-\-\-\-\-\--+
\| 5 \|
+\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
计算stu_info表中各学员的平均年龄、最大年龄、最小年龄：
mysql\> SELECT avg(age),max(age),min(age) FROM stu_info;
+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| avg(age) \| max(age) \| min(age) \|
+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| 22.6000 \| 27 \| 20 \|
+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
计算stu_info表中男学员的个数：
mysql\> SELECT count(gender) FROM stu_info WHERE gender=\'boy\';
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| count(gender) \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| 3 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
2）字段值的数值比较
列出stu_info表中年龄为21岁的学员记录：
mysql\> SELECT \* FROM stu_info WHERE age=21;
+\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| name \| gender \| age \|
+\-\-\-\-\--+\-\-\-\-\-\-\--+\-\-\-\--+
\| Tom \| boy \| 21 \|
\| Mike \| boy \| 21 \|