sponds to the committed inputs.
Proof. In case of conflict in god, a 3PC instance with at most
one corruption is formed (Lemma 6.1). To ensure the input consis-
tency in the 3PC, every agreed upon RSS share xij in inputGOD,
is made available in 3PC to at least two parties or when held by
one party, it is XOR shared between the remaining two. With this
arrangement of input shares, the robust 3PC of [24] is guaranteed
to preserve input consistency. This ensures that computation in
3PC is performed on the inputs committed in inputGOD.
(cid:3)
Theorem 6.3. The protocol god is correct.
Proof. We argue that the output y computed corresponds to
the unique inputs committed by each Pi , i ∈ [5] in inputGODi.
A corrupt party either commits to an input or a default value is
assumed as per inputGOD. The honest parties are established to
have committed to their inputs by the end of round 1 in inputGOD.
An honest Pα obtains the output either by decoding the output
super-key Y or via the output of god3PC (as a participant in god3PC
or recipient from the 3PC committee). In the latter case, correctness
follows from Lemma 6.2 and correctness of god3PC. We argue for
the former case. Let an honest Pα obtains output from Y broadcast
by P5. This implies that the adversary behaved honestly in the entire
execution and input keys opened by a corrupt garbler correspond
to committed inputs only. Otherwise, a conflict would be raised to
elect a 3PC, which contradicts our assumption that the output was
obtained on decoding Y. Thus, the output always corresponds to
the committed inputs in inputGOD. The correctness of evaluation
follows from the correctness of the garbling scheme.
(cid:3)
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1585Inputs and Output: Party Pi ∈ P has xi . Each party outputs y = C(x1, x2, x3, x4, x5).
Common Inputs: The circuit C(⊕j∈[6]x 1j , ⊕j∈[6]x 2j , ⊕j∈[6]x 3j , ⊕j∈[6]x 4j , ⊕j∈[6]x 5j) that takes the RSS shares as inputs and computes f (x1, x2, x3,
x4, x5), each input, their shares are from {0, 1} (instead of {0, 1}ℓ for simplicity) and output is from {0, 1}ℓ.
Notation: Si denotes the indices of the parties who hold si as well as the indices of the seeds held by Pi . Xi j denotes the set of parties that holds the
jth share of Pi ’s input x i j . P3 is the identified 3PC committee.
Primitives: A NICOM (Com, Open), inputGODi (Fig. 12), seedGODд (Fig. 13), Garble (Fig. 4), Eval (Fig. 5) and Π4AOTGOD (Fig. 7).
Input and Seed Distribution Phase. Run inputGODi and seedGODд for every Pi ∈ P and Pд , д ∈ [4] respectively in parallel.
Garbling Phase. Garble(C) is run where ΠAOTGOD (Fig 7) is used instead of F4AOT. Each Pд , д ∈ [4] broadcasts {GC j }j∈Sд
. Each party runs god3PC
with P3 when any instance of Π4AOTGOD returns P3 or with P3 = P \ {Pα , Pβ } when (Pα , Pβ) with α , β ∈ Sд for some д ∈ [4] broadcasts
different GCд (in the optimized version, we broadcast only a hash of GC).
Masked input bit and Key Transfer Phase.
– In parallel to the R1 of Garbling phase,
w to compute λw = ⊕l∈[4]λl
w .
w , j ∈ Sд. Every party runs god3PC with P3 = P \ {Pα , Pβ }, if parties Pα , Pβ holding seed
◦ For each output wire w, Pд , д ∈ [4] broadcasts λj
sд i.e. {α , β } ∈ Sд broadcast different copies of λд
w for some output wire w and д. (Tie break deterministically if multiple pairs are in conflict.)
Otherwise, every party reconstructs λw = ⊕д∈[4]λд
w for every output wire w.
w , l ∈
◦ For every input wire w corresponding to input xw = x i j held by three garblers, for each Pд ∈ Xi j : each garbler Ph , h (cid:44) д, broadcasts λl
Sh \ Sд. (If Xi j includes evaluator, then each garbler Ph , h ∈ [4] broadcasts λl
w , l ∈ Sh). Every party runs god3PC with P3 = P \ {Pα , Pβ },
if there are parties Pα , Pβ with {α , β } ∈ Sl broadcasting different copies λl
w for some wire w. Otherwise, Pд, the owner of the input wire w
uses λl
– In parallel to R2 of Garbling phase, for circuit input wire w corresponding to input xw = x i j held by three garblers, each Pα ∈ Xi j computes
bw = xw ⊕ λw and broadcasts bw . Every party runs god3PC with P3 = P \ {Pα , Pβ }, if there are parties Pα , Pβ with {α , β } ∈ Xi j broadcasting
different copies of bw . Otherwise, P5 uses bw(= xw ⊕ λw) for evaluation. For circuit input wire w corresponding to input xw = x i j held by two
garblers and P5, P5 already knows bw as λw was computed by P5 in the previous step.
w ,1}д∈[4] denote the super-key derived from seeds {sд }д∈[4]. Each Pд , д ∈ [4] computes commitments as: for
– For every input wire w, let {kд
b ∈ {0, 1}, j ∈ Sд, (c j
to P5 if it also holds bw . Every
w ,b , o j
party runs god3PC with P3 with P3 = P \ {Pα , Pβ } if (Pα , Pβ) with α , β ∈ Si for some i and input wire w broadcast different commitments.
Otherwise, P5 tries to recover the super-key for bw , namely, {kд
}д∈[4] using the openings received. If no valid openings received for some key,
P5 broadcasts a conflict with a garbler who sent invalid opening and subsequently every party runs god3PC with the remaining three parties as
P3. Otherwise, let X to be the set of super-keys obtained.
w ,0, kд
w ,b) ← Com(ppj , k j
w ,b }. Pд sends the opening o j
w ,b) and broadcasts {ppj , c j
w ,bw
w ,bw
λw) ⊕д∈[4] λд
Evaluation and Output Phase.
– P5 runs Eval to evaluate C using X and obtains Y and (yw ⊕ λw) for all output wires w. For each output wire w, P5 computes yw = (yw ⊕
w and thus y. Finally, P5 outputs y. P5 broadcasts Y.
– Every party Pд runs god3PC with P3 with P3 = P \ {P1, P5} if k j
of Y for some output wire w and index j ∈ Sд does not match with either
, j ∈ Sд in Y do not map to the same bw . Otherwise, each garbler Pд obtains (yw ⊕ λw) by comparing each
w ,bw
w ,1) or the three keys k j
(k j
w ,0, k j
key in Y with the two key labels for each w and computes yw = (yw ⊕ λw) ⊕д∈[4] λд
Figure 15: Protocol god
w ,bw
w . Finally, Pд outputs y.
Theorem 6.4. Assuming one-way permutations, protocol god se-
curely realizes the functionality Fgod (Fig. 18) in the standard model
against an active adversary that corrupts at most two parties.
The proof of the theorem appears in the full version [23]. Since
the inputs are defined prior to Garble in all our protocols, we do
not require the adaptive notion of the proof.
7 EMPIRICAL RESULTS
In this section, we elaborate the empirical results of our protocols.
We use the circuits of AES-128 and SHA-256 as benchmarks. We
begin with the details of the setup environment, both hardware and
software and then give a detailed comparison of efficiency.
Hardware Details We provide experimental results both in LAN
and WAN (high latency) settings. For the purpose of LAN, our sys-
tem specifications include a 32GB RAM; an Intel Core i7−7700−4690
octa-core CPU with 3.6 GHz processing speed with AES-NI sup-
port from the hardware. For WAN, we have employed Microsoft
Azure D4s_v3 cloud machines with instances located in West US,
South India, East Australia, South UK and East Japan. The average
bandwidth measured using the iperf testing tool corresponds to
169Mbps. The slowest link has a round trip time of 277 ms between
East Australia and South UK. RTT denotes the time required to
send a packet from source to destination and subsequently an ac-
knowledgment back from destination to source. But the transfer of
a packet involves only one way communication from source to des-
tination. So the delay we consider is half of RTT which is 138.5 ms
for our slowest link (between garblers P3, P4). The maximum delays
for each garbler for one way communication are: P1: 102 ms, P2:
101 ms, P3: 138 ms, P4: 138.5 ms. For the evaluator, the maximum
delay is close to 112 ms. The tables indicate the average delay for
the role of garbler which turns out to be between 114 − 120 ms.
Software Details. For efficiency, the technique of free-XOR is
enabled and the implementation is carried out using libgarble library
licensed under GNU GPL license. This library leverages the use
of AES-NI instructions provided by the underlying hardware.We
additionally use openSSL 1.02g library for SHA to instantiate our
commitments. The operating system used is Ubuntu 16.04 (64-bit).
Our code follows the standards of C++11 and multi-threading is
enabled on all cores for improved results. Communication is done
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1586Table 1: The total computation time (Total CT), maximum latency in LAN run-time (LAN) and WAN run-time (WAN) and total communication
(Total CC) of all parties for [25] and our protocols using Garble. The figures in brackets indicate the increase for the worst case run of god.
Total CT( ms)
Total CC( MB)
[25]
Circuit
god
AES-128 96.81
29.72 (+ 0.32)
SHA-256 1078.99 1080.31 1086.18 1090.47 (+ 33.02) 290.38 293.25 301.33 295.3 (+ 14.5) 4.78 4.79 4.81 5.6 (+ 1.51) 389.12 389.2 389.24 389.19 (+ 6.15)
god
28.95 (+ 2.39) 2.54 2.74 2.82 3.7 (+ 1.1)
god
101.06 (+ 3.15)
ua
fair
29.71 29.75
WAN( s)
fair god
ua
100.53
ua
25.66
fair
26.06
[25]
25.01
[25]
29.55
[25] ua
LAN( ms)
fair
100.9
using sockets whose maximum size is set to 1 MB and a connection
is established between every pair of parties to emulate a network
consisting of pair-wise private channels.
Table 2: Computation time (CT), LAN run-time (LAN), WAN run-
time (WAN) and Communication (CC) for [25], ua and fair for д ∈ [4].
Protocol
8 [25] (with Garble)
2
1
-
S
E
A
5
2
-
A
H
S
[25] (with [13])
ua
fair
[25](with [13])
ua
fair
6 [25] (with Garble)
CT( ms)
P5
13.45
14.17
13.65
13.74
88.23
103.54
88.75
88.78
Pд
20.84
24.4
21.72
21.79
247.69
259.99
247.89
249.35
LAN( ms)
P5
21.45
22.17
21.85
22.3
236.53
254.21
241.51
242.66
Pд
25.01
28.56
25.66
26.06
290.38
302.6
293.25
301.33
WAN( s)
P5
Pд
0.99
2.54
2.58
1.0
0.99
2.74
1.10
2.82
4.78
3.44
4.8
3.58
4.79
3.69
3.78
4.81
CC( MB)
P5
0.031
0.03
0.039
0.039
0.062
0.06
0.078
0.078
Pд
7.38
7.38
7.42
7.43
97.26
97.26
97.28
97.29
Table 3: Computation time (CT), LAN run-time (LAN) and Commu-
nication (CC) and Broadcast (BC) for protocol god for д ∈ [4]. Pд′ is