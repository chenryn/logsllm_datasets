download event in the table, and sort them in ascending time
order. Conceptually, each download event corresponds to an
edge in the galaxy graph, linking a node represented by dlr
with a node represented by dom.
Given a moving time window of size ∆t, we query the
events that occurred within this time range. We utilize these
series of download events to identify star patterns. We can
create stars in two ways, by starting from a downloader and
aggregating the adjacent domains, or by starting from a domain
and aggregating the adjacent downloaders. We assign unique
identiﬁers to each new star, and record the associated events
in the stars table. After generating all the stars within ∆t,
we slide the time window by δt and repeat the star detection
process, until the end of the time window reaches the last
event.
C. Galaxy Graph
Beewolf maintains the galaxy graph, which has two kinds
of nodes: nodes that correspond to downloader programs
and nodes that correspond to domains hosting payloads. We
represent a node in the galaxy graph as nodegg. We explicitly
maintain only 1 edge between a downloader and a domain.
However, there can arise situations where a downloader ac-
cesses a domain at different times; we discuss how we deal
with this situation later in this section.
We update the galaxy graph incrementally, using the star
patterns detected in the previous step. As explained earlier,
there are 2 types of stars. We consider only one type of star
and ignore the other while detecting and updating the stars
to the galaxy graph; galaxy graph at any point contains only
one type of stars. For simpler explanation, we discuss only
11https://arxiv.org/abs/1611.02787
5
Fig. 2: System architecture.
the star type corresponding to multiple downloaders accessing
the same domain; the same explanation can be extended when
dealing with the other star type. Further, we present results
corresponding to both star types, when dealt separately in
Section V.
When we detect a star, we add the central node (domain)
and its adjacent nodes (downloaders accessing it) to the bipar-
tite graph, and we create the corresponding edges. For each
newly detected star, while adding the central node (domain) we
also specify the star id (e.g. (2) domB), in order to separate
it from the nodes corresponding to domB from different stars.
When the new star is a superset of some existing star in the
galaxy graph, we replace the existing star with it. If it is a
subset of some existing star, Beewolf discards it from further
processing.
D. FP tree
We traverse the galaxy graph, constructed in the previous
step, to build a data structure called a Frequent Pattern (FP)
tree. The FP tree was used successfully in other domains,
for example to design scalable algorithms for frequent pattern
mining [18]. We employ the FP tree algorithm from [30].
Let us represent a node in the FP tree as nodef p. Given the
galaxy graph G = (U, V, E), the algorithm starts by sorting
the adjacency list of V . The adjacency list is a representation
of the galaxy graph and consists of the collection of neighbor
lists for each nodegg ∈ V . The sorting is done in two rounds.
In the ﬁrst round, we sort each nodegg v ∈ V by their degree
(the number of v’s neighbors in U), in descending order. In
the second round we sort each list of neighbors. Speciﬁcally,
we sort the neighbors u of v by their degree (the number of
u’s neighbors in V ), also in descending order.
Once the sorting is done, we start building the FP tree by
creating a root nodef p in the tree. For each neighbor u of v,
we traverse the FP tree starting from the root and check if u is
the child of the current nodef p. If this is the case, we set the
current nodef p as u and append v to its visited list. Otherwise,
we ﬁrst add u as the child of the current nodef p and repeat the
same process. We continue this process until we have checked
all nodegg v(cid:48)s and their corresponding neighbors. Figure 3
illustrates the FP tree construction procedure given the galaxy
graph as input.
Once the FP tree is constructed, we can traverse it to detect
all the complete bicliques of the galaxy graph. However, FP
tree has some limitations : (a) FP tree does not return near-
bicliques. (b) FP tree misses part of complete bicliques when
overlap exists at the left hand nodes between a larger biclique
Fig. 3: Example of FP tree construction: (a) Galaxy graph, (b)
Sorted adjacency list, (c) FP tree.
and a smaller biclique. This results in the overlapped region
being missed against the smaller biclique. We address how we
handle these limitations in the next section.
E. Lockstep Detection
After constructing the FP tree, we move to the lockstep
detection phase. Each path downwards from the root to a
nodef p A in the FP tree indicates a lockstep. The set of
nodes along the path corresponds to the downloaders, and the
visited list of A corresponds to the domains in the lockstep.
For example, in Figure 3, dlrC → dlrB → dlrA, the resulting
lockstep will be [(domB, domA), (dlrC, dlrB, dlrA)]. When
identifying a lockstep, we remove the star id from the domain
nodes; however, we store the star ids along with the lockstep,
so that we do not lose the download events that resulted from
the lockstep behavior. We can observe in Figure 3 that some
bicliques are not interesting; for example, when A is a child of
the root (e.g. dlrC), we get a star centered on A, and when A is
a leaf (e.g. dlrE), we get a star centered on the single domain
from the visited list of A (e.g. domA). To avoid generating
locksteps that are too small or that are a subset of a larger
lockstep, we ﬁlter out the locksteps that satisfy the following
conditions: (1) the number of downloaders or the domains are
either below 3; or (2) A has a child with same visited list.
Partially missing locksteps. The FP tree captures most of
the locksteps, however it misses the small
locksteps that
share part of the left hand elements with the larger lockstep.
In Figure 3, we see that path dlrC → dlrD should have
produced the lockstep of [(domB, domC), (dlrC, dlrD)].
However, because dlrC and dlrD are the part of the longer
path dlrC → dlrB → dlrA → dlrD, (2)domB fails to visit the
corresponding path. We observe that this phenomenon occurs
at the nodes that appear in multiple paths, such as dlrD and
dlrE in our example. We can recover the missing locksteps
by maintaining different node versions, for each path where
6
Download	Events	Batch Data Star Detection Galaxy Graph FP tree Lockstep  Detection download_events stars locksteps Database & Analysis 4 Core Components of Beewolf  Sensors Data Collection White-lis2ng	rootdlrCdlrBdlrDdlrAdlrEdlrEdlrD(2)domB,(3)domA,(1)domA,(4)domC(2)domB,(3)domA,(1)domA(2)domB,(1)domA(2)domB(3)domA(4)domC(4)domC(2)domBdlrC dlrB dlrA dlrD(3)domAdlrC dlrB dlrE(1)domAdlrC dlrB dlrA(4)domCdlrC dlrD dlrEdlrA(1)domA(2)domB(3)domA(4)domCdlrBdlrCdlrDdlrELockstep: [dlrC,dlrB,dlrA] [(2)domB,(1)domA]Lockstep: [dlrC,dlrB] [(2)domB,(3)domA,(1)domA]the node appears, and by constructing a separate FP tree only
on the stars that contain the node with multiple versions. To
cover all the locksteps, we could do this recursively until there
is no node with multiple versions in the FP tree. However,
considering the overhead due to the recursive computation and
the chance that the near-biclique algorithm would help recover
some of the partially missing locksteps as explained in the next
paragraph, we only apply the FP tree construction once on each
nodes with multiple versions without recursion.
Near-bicliques. We aim to detect locksteps even in cases
where some edges are missing from the galaxy graph, e.g. the
corresponding download events may have not been recorded
for some reason. These missing edges could prevent some
potential nodes to be added to the lockstep. Therefore we relax
the lockstep deﬁnition, and search for subgraphs that include
a fraction α ≥ αmin of the edges that would form a biclique.
We set αmin to 0.8 to accommodate for at most 1 missing
edge in the smallest lockstep.
There could be many possible missing edges. We reduce
the search space by exploiting the fact that the adjacent nodes
in the FP tree have higher connectivity than the other nodes,
which implies that by introducing it into the lockstep will have
fewer missing edges.
We point to the end node A of the path, which we want to
extract the lockstep. We start by traversing the FP tree upwards,
toward the root, until we reach a node B that has a larger
visited list. We also count the number of hops (missingv)
required to reach B. We deﬁne the relative complement list
as the difference between the visited list of B and that of A.
The relative complement list will be added to the candidate list
with missingv as an attribute. Next, we look at the children
A. Each child will be added to the candidate list with the size
of difference between its visited list and A(cid:48)s visited list as the
attribute missingu.
Once we get the candidate list, we sort it by the attribute in
ascending order. Starting from the ﬁrst node in the list, we add
the node into the lockstep and calculate α which corresponds
to the edge density within a lockstep. We stop when α drops
below αmin. We observed that, in practice, this heuristic is
good enough, as the adjacent nodes in the FP tree are more
likely to be connected to the lockstep than the other nodes.
F. Streaming Set-up
When using Beewolf in a streaming setting, we ingest the
download event data in real time. Instead of triggering our
system for each single data stream, we run the system by
processing incoming data as a batch within a ﬁxed period
∆t. Except for the difference in how the data comes in the
system, the rest of the process is identical to that of the non-
streaming setup. The star detection will search for new stars
from the batch data; the new stars will be added to the galaxy
graph; the FP tree will be built from the galaxy graph; and the
lockstep detecion will ﬁnd new locksteps.
V. SILENT DISTRIBUTION CAMPAIGNS
We present a large scale empirical study of silent delivery
campaigns. As discussed in Sections IV-B and IV-C, we
can track two types of stars in the galaxy graph: multiple
downloaders accessing a domain (typedlr:dom) and multiple
domains accessing a downloader (typedom:dlr). These two
star types result in different bicliques, and capture different
download activities. The difference derives from the fact that
the central nodes in the stars may be duplicated in the galaxy
graph, when we add new stars that emerge in later time
windows. The resulting locksteps reﬂect different distribution
strategies. typedlr:dom account for downloaders that are more
stable than the domains. Conversely, typedom:dlr identify dis-
tribution networks where domains are more stable.
For our empirical analysis, we set a narrow time window,
to detect download events that are remotely triggered and do
not experience delays. More generally, we should choose a
shorter time window than the typical reaction time of domain
blacklists during the observation period. In consequence, we
set the time window ∆t to 3 days, and we use a sliding window
δt of 3 days.12
We identify 67,094 locksteps of type typedlr:dom and
60,401 locksteps of type typedom:dlr in our data. Figure 4
illustrates the distributions for three properties of these lock-
steps: size, life span, and ﬁrst detection time. The size of a
lockstep corresponds to the number of nodes, considering both
downloaders and domains in the lockstep. We deduplicate the
central star nodes by removing the star IDs. Therefore, the
number is counted on unique set of nodes in the lockstep.
For both types of locksteps, we observe that the number of
nodes within each lockstep follows a long tail distribution
i.e., there are many small locksteps and fewer large locksteps.
In Figure 4(b), we report the life span for each lockstep.
There are long lived locksteps, enduring close to a year. As
our observation period spans only one year, there could be
locksteps that live longer. To evaluate the opportunity for early
discovery of malware delivery campaigns, for each lockstep
we compute the delay until its ﬁrst subset lockstep is formed,
which is the time difference between the addition of the second
and the ﬁrst star to the lockstep (Figure 4(c)). We observe
that, while the second star does not usually appear in the next
time window, the locksteps nevertheless emerge quickly: both
typedlr:dom and typedom:dlr take a median of 3 windows to
form a lockstep. However, we also observe some locksteps that
emerge after a long delay.
Lockstep attribution. In general, it is challenging to identify
precisely which organizations were controlling the download
activities reﬂected in the locksteps we detect, as the domains
may no longer be registered and the downloaders may no
longer be active. However, we aim to make a coarse grained
distinction among the distribution campaigns for malware,
PUP and benign software, to compare their properties and to
assess their overlaps. To do so, we observe that 38.2% (3479
out of 9103) of the downloaders involved in locksteps are
digitally signed, with valid X.509 certiﬁcates. We ﬁrst analyze
these signatures to determine the most frequent publisher in
a lockstep. We consider that a publisher is the representative
publisher (rep-pub) of the lockstep, if it accounts for more
than 50% of the signed downloaders in the lockstep. If we
cannot identify a representative publisher, we set the lockstep’s
rep-pub to mixed. In this manner, we identify 335 rep-pubs.
12During our observation period, domains delivering malware were black-
listed within 17 days on average [25].
7
Fig. 4: Distribution of lockstep properties: (a) Number of nodes, (b) Life span, (c) Lockstep emergence.
TABLE II: Lockstep group statistics.
TABLE III: Lockstep label statistics
typedlr:dom
(MDL/PDL/BDL/UDL)
27,522
(26,764/501/109/148)
2,639
(2,137/498/4/0)
3,939
(1,749/888/597/705)
9,203
(8,041/1,053/58/51)
20,766
(14,085/4,069/2,255/357)
86
(86/0/0/0)
typedom:dlr
(MDL/PDL/BDL/UDL)
13,117
(11,902/1,202/6/7)
1,496
(1,164/332/0/0)
2,021
(1,152/840/7/22)
5,092
(3,479/1,580/8/25)
36,594
(32,576/2,479/1,449/90)
835
(808/27/0/0)
PUP
PPI
BN
Other
Mixed
UK
We investigate the top 50 rep-pubs from each lockstep type
and we manually categorize them into 6 different groups:
potentially unwanted programs (PUP) [23], pay-per-install
(PPI) [8], benign (BN), other, mixed, and unknown (UK). The
ﬁrst 4 groups inherit the label of the rep-pub, determined as
discussed in Section III-B. We place the mixed rep-pubs in