(cid:96)|G|
3(cid:96)|G|
2(cid:96)|G|
(cid:96)U |G|
|sk|
(d + 1)(cid:96)|G|
(|Γ| + 2)|G|
(|Γ| + 1)|G|
(2|Γ| + 2)|G|
(|Γ| + 2)|G|
|ct|
|Γ| · |G| + |GT |
(2|Γ| + 1)|G| + |GT |
2|Γ| · |G| + |GT |
2|G| + |GT |
2|G| + |GT |
|ct|
(2(cid:96) + 1)|G| + |GT |
((cid:96) + 1)|G| + |GT |
(3(cid:96) + 1)|G| + |GT |
3(cid:96)|G| + |GT |
TDec
|Γ| · P + (cid:96)E
(2|Γ| + 1)P + 3(cid:96)E
2|Γ| · P + 2(cid:96)E
2P + |Γ| · (cid:96)E
2P + |Γ| · (cid:96)E
TDec
(|Γ| + 2)P + 2(cid:96)E
(|Γ| + 1)P + (cid:96)E
(2|Γ| + 2)P + 3(cid:96)E
(|Γ| + 2)P + 3(cid:96)E
(assumption,sec)
(DBDH,sel.)
(GGM,ad.)
(Q-type,sel.)
(GGM,ad.)
(Q-type,sel.)
(GGM,ad.)
(assumption,sec)
(Q-type,sel.)
(GGM,ad.)
(Q-type,sel.)
(GGM,ad.)
Figure 4: Comparison of the most e(cid:129)cient existing KP-ABE and CP-ABE schemes for (monotone) boolean span programs,
based on prime-order bilinear groups. We denote by |Γ| the attribute set size, d the maximum size for Γ (if bounded), U the size
of the attribute universe (if bounded small-universe), (cid:96) is the size of the access structure. For CT, we omit the additive overhead
of O(|Γ|) bits in order to transmit the attribute vector (for KP-ABE), or O((cid:96)) bits in order to transmit the access structure. We
use TDec to denote the decryption time, |G| the size of the source groups, |GT | the size of the target group, E exponentiation
in the source groups, and P to denote a pairing. Decryption algorithms have been optimized taking into account that P > E.
Gray boxes indicate new results.
IPE 1 [46]
• n = d + 1, (cid:174)B := (U , (cid:174)V); w1 = 0, (cid:174)S := S; m1 = 1, (cid:174)R := R; w2 = m2 =
2.
• sE((cid:174)x) →(cid:0)S, S(U (cid:174)x + (cid:174)V)(cid:1)
• rE((cid:174)y) →(cid:0)R, A + R(U z + (cid:174)V (cid:62)(cid:174)y)(cid:1)
(cid:19)
(cid:18) 0
• Pair(x, y) →
1
0
−(cid:174)y
IPE 1 is a prime-order version [46], which, via our framework
described in Figure 2, gives an IPE that is twice shorter than the
already existing prime-order version of [46], namely [56]. (cid:145)is is
expected, since we use a stronger assumption, GGM, while the cited
works use standard assumptions.
IPE 2
• n = d; w1 = 0, (cid:174)S := S; m1 = 0; w2 = m2 = 1.
• sE((cid:174)x) → S((cid:174)x + (cid:174)B)
• rE((cid:174)y) → A/(z + (cid:174)B(cid:62)(cid:174)y)
• Pair((cid:174)x, (cid:174)y) → (cid:174)y
IPE 2 is a new and shorter IPE that relies on inversions in the
exponent, which were not captured by previous framework.
5.3 ABE for boolean span programs.
We de(cid:128)ne (monotone) access structures using the language of
(monotone) span programs [45]. (cid:145)ey capture boolean formulas,
thereby generalizing IBE and IPE, by allowing to embed more com-
plex access policies in ciphertexts (such ABE are called Ciphertext
Policy ABE, or CP-ABE ) or in keys (such ABE are called Key Policy
ABE, or KP-ABE).
De(cid:128)nition 5.1 (access structure [25, 45]). A (monotone) access struc-
and
ture for a(cid:139)ribute universe U is a pair (M, ρ) where M ∈ Z(cid:96)×(cid:96)(cid:48)
ρ : [(cid:96)] → U. Given Γ ⊆ U, we say that
p
Γ satis(cid:128)es (M, ρ) i(cid:130) (cid:174)1(cid:62) ∈ spanrow(MΓ),
Here, (cid:174)1 := (1, 0, . . . , 0) ∈ Z(cid:96)(cid:48) is a row vector; MS denotes the
collection of vectors {Mj
: ρ(j) ∈ Γ} where Mi denotes the i’th
row of M; and spanrow refers to linear span of collection of (row)
vectors over Zp.
(cid:145)at is, Γ satis(cid:128)es (M, ρ) i(cid:130) there exists constants ω1, . . . , ω(cid:96) ∈
Zp such that
ωj Mj = (cid:174)1(cid:62)
(1)

ρ(j)∈S
Observe that the constants {ωi} can be computed in time polyno-
mial in the size of the matrix M via Gaussian elimination.
Large universe, Unbounded ABE. When U is of polynomial size,
we write U := [d], and we describe sets Γ ⊆ [d] by their charac-
teristic vectors (cid:174)x ∈ {0, 1}n, where for all i ∈ [d], xi = 1 if i ∈ Γ,
and 0 otherwise. If an ABE supports universes U of exponential
size, we call it large universe. If additionally, it does not introduce a
bound on the number of a(cid:139)ributes per ciphertext, we use the term
unbounded ABE. For practical purposes, unbounded ABE [49] are
preferable, since the setup does not put a bound on the number of
a(cid:139)ributes per ciphertext, and they allow for more versatility since
any bit string (once hashed into Zp) can be used as an a(cid:139)ribute.
Using GGM, we prove the adaptive security of the KP-ABE from
[41], arguably one of the most e(cid:129)cient KP-ABE, while [41] proved
its selective security based on DBDH.
p
• rE(M, ρ) →(cid:0)M(cid:62)
KP-ABE [41]
Here, U := [d], X := {0, 1}d, Y := Z(cid:96)×(cid:96)(cid:48)
× ([(cid:96)] → [d]).
• n = d, (cid:174)B := (B1, . . . , Bd); w1 = 0, (cid:174)S := S; m1 := (cid:96)(cid:48) − 1.
• sE((cid:174)x) → (x1SB1, . . . , xd SBd)
• Pair((cid:174)x,(M, ρ)) → E ∈ Zd×(cid:96)
ωj if ρ(j) = i, 0 otherwise.
We now give a new compact KP-ABE, where the ciphertexts
contain 2 group elements, regardless of the number of a(cid:139)ribute.
, where for all i ∈ [d], j ∈ [(cid:96)], Ei, j =
(A, (cid:174)R)/Bρ((cid:96))(cid:1)
1 (A, (cid:174)R)/Bρ(1), . . . , M(cid:62)
p
(cid:96)
Session C4:  From Verification to ABECCS’17, October 30-November 3, 2017, Dallas, TX, USA654(cid:145)is is more e(cid:129)cient that state of the art [14] for which ciphertexts
contain 3 group element (although the la(cid:139)er is for large universe,
and ours small).
p
(cid:1), where kj
Compact KP-ABE
Here, U := [d], X := {0, 1}d, Y := Z(cid:96)×(cid:96)(cid:48)
× ([(cid:96)] → [d]).
• n = d, (cid:174)B := (B1, . . . , Bd); w1 = 0, (cid:174)S := S; m1 := (cid:96)(cid:48) − 1.
i =1 xi Bi, and c2 := S
• sE((cid:174)x) → (c1, c2), where c1 := Sd
• rE(M, ρ) → (cid:0)(kj)j∈[(cid:96)],(ki, j)i∈[d], j∈[(cid:96)], ρ(j)(cid:44)i
j (A, (cid:174)R)/Bρ(j), ki, j := M(cid:62)
j (A, (cid:174)R)Bi/Bρ(j)
M(cid:62)
(c1, c2)(cid:62)E(cid:0)(kj)j∈[(cid:96)],(ki, j)i∈[d], j∈[(cid:96)], ρ(j)(cid:44)i
(cid:1)
• Pair((cid:174)x,(M, ρ))
→
rf
rf
E
j∈[(cid:96)] ωjkj +rf c2 ·rf
(cid:145)en, we give an unbounded KP-ABE that improves upon [57]
(which is proved selectively secure under Q-type assumption), and
thereby gives the most e(cid:129)cient unbounded KP-ABE to our knowl-
edge (see the table Figure 4 for a precise comparison).
j∈[(cid:96)],i∈[d],i(cid:44)ρ(j) xi ωjki, j.
Z2×(cid:96)·d
p
=
that
·rf
such
:=
c1
∈
p
i∈Γ
Unbounded KP-ABE
Here, U := Zp, X := {Γ ⊆ Zp}, Y := Z(cid:96)×(cid:96)(cid:48)
× ([(cid:96)] → Zp).
• n = 2, (cid:174)B := (B1, B2); w1 = |Γ|, (cid:174)S := (S, Si)i∈Γ; m1 := (cid:96)(cid:48) − 1.
• sE(Γ) →(cid:16)(cid:0)Si(B1 + iB2)(cid:1)
i∈Γ,(cid:0)S − Si
(cid:1)
• rE(M, ρ) →(cid:16)(cid:0)M(cid:62)
j (A, (cid:174)R)/(B1 + ρ(j)B2)(cid:1)
(cid:19)
(cid:18)E
(cid:17)
j∈[(cid:96)],(cid:0)M(cid:62)
j (A, (cid:174)R)(cid:1)
, where for all i ∈ Γ and all
and
• Pair((cid:174)x,(M, ρ)) →
j ∈ [(cid:96)] the element of the row associated to i in E ∈ Z|Γ|×(cid:96)
column j equals ωj if i = ρ(j) and 0 otherwise.
We also give a new adaptively secure CP-ABE where ciphertexts
are half the size of [62], while the la(cid:139)er prove selective security
based on Q-type assumptions.
2|Γ|×2(cid:96)
∈ Z
p
j∈[(cid:96)]
(cid:17)
0
E
0
p
(cid:17)
i∈[(cid:96)], S
CP-ABE
Here, U := [d], X := Z(cid:96)×(cid:96)(cid:48)
• n = d, (cid:174)B := (B1, . . . , Bd); w1 = (cid:96)(cid:48) − 1, (cid:174)S := (S, (cid:174)U); m1 := 1, (cid:174)R := R.
× ([(cid:96)] → [d]), Y := {0, 1}d.
p
• sE(M, ρ) →(cid:16)(cid:0)M(cid:62)
i (S, (cid:174)U)Bρ(i)(cid:1)
• rE((cid:174)x) →(cid:0)(xj R/Bj)j∈[d], A − R(cid:1)
(cid:18) E
(cid:19)
p
(cid:174)0(cid:62)
, where for all i ∈ [(cid:96)],
∈ Z((cid:96)+1)×(d +1)
• Pair((M, ρ), (cid:174)x) →
j ∈ [d], Ei, j = ωi if ρ(i) = j, 0 otherwise.
Finally, we give an new, adaptively secure, unbounded CP-ABE
where secret key size and decryption time are roughly half that
state of the art [57], whose selective security is based on Q-type
assumptions.
(cid:174)0
1
Unbounded CP-ABE
Here, U := Zp, X := Z(cid:96)×(cid:96)(cid:48)
• n = 4, (cid:174)B := (B1, B2, V ,W ); w1 = ((cid:96)(cid:48) − 1) + |Γ|, (cid:174)S := (S, (cid:174)U , Si)i∈Γ;
m1 := 1, (cid:174)R := R.
× ([(cid:96)] → Zp), Y := {Γ ⊆ Zp}.
p
ρ(i)B2),−V Si
+
→
i (S, (cid:174)U), M(cid:62)
• sE(M, ρ)
W M(cid:62)
i (S, (cid:174)U)(cid:17)
• rE(Γ) →(cid:16)(cid:0)RV/(B1 + jB2)(cid:1)
• Pair((M, ρ), Γ) →(cid:169)(cid:173)(cid:173)(cid:171)E (cid:174)0
(cid:174)0
(cid:174)0
i∈[(cid:96)]
+
(cid:17)
Si(B1
(cid:16)
(cid:17)
(cid:170)(cid:174)(cid:174)(cid:172) ∈ Z
j∈Γ, R, A − W R
(cid:174)0
3(cid:96)×(|Γ|+2)
(cid:174)0
p
(cid:174)e
, where for all i ∈ [(cid:96)],
(cid:174)e
(cid:174)0
j ∈ [d], Ei, j = ωi if ρ(i) = j, 0 otherwise. For all i ∈ [(cid:96)], ei = ωi
if ρ(i) ∈ Γ, 0 otherwise.
6 AUTOMATED PROOFS
Our main result entails that symbolic security implies security in
the GGM for every RFI ABE. Conversely, an a(cid:139)ack against sym-
bolic security usually represents a generic a(cid:139)ack.6 In this section,
we present a constraint-solving method for (dis)proving symbolic
security of RFI ABE. Our method proceeds in two steps: we encode
symbolic security as a constraint (wri(cid:139)en in a fragment of (cid:128)rst-
order logic); then we use proof rules for proving its (non-)validity.
In this section, we present the syntax of constraints and give some
proof rules. (cid:145)en, we show how our method can be used to obtain
a proof of symbolic security of the IBE1 example, and to (cid:128)nd a