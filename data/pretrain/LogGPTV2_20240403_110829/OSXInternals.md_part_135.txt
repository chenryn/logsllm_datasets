### Loading and Unloading Kernel Extensions (Kexts)

To manually load a kernel extension (kext), you can use the `kextload` command. For example:

```bash
$ sudo kextload -v /tmp/DummySysctl.kext
```

If the kext is valid, you will see output similar to the following:

```
kextload: extension /tmp/DummySysctl.kext appears to be valid
kextload: loading extension /tmp/DummySysctl.kext
kextload: sending 1 personality to the kernel
kextload: /tmp/DummySysctl.kext loaded successfully
```

If the kext fails to load, you can use the `-t` (test) option of `kextload` to identify potential issues. For instance, if the kext specifies an unavailable version of a dependency, such as version 7.9.9 for `com.apple.kpi.libkern`, the `-t` option will help diagnose the problem:

```bash
$ sudo kextload -v -t /tmp/DummySysctl.kext
kextload: extension /tmp/DummySysctl.kext appears to be valid
kextload: loading extension /tmp/DummySysctl.kext
kextload: cannot resolve dependencies for kernel extension /tmp/DummySysctl.kext
```

The output from the `-t` option might look like this:

```
kernel extension /tmp/DummySysctl.kext has problems:
...
Missing dependencies
{
"com.apple.kpi.libkern" = "A valid compatible version of this dependency cannot be found"
}
```

When the `-t` option is used, `kextload` performs a series of tests on the kext, including validation, authentication, and dependency resolution, without actually loading the kext or sending its personality to the kernel.

### Common Reasons for Kext Load Failures

- **Dependency Resolution Failures**: The kext may depend on a specific version of another kext that is not available.
- **Incorrect File Permissions**: The kext files may have incorrect permissions.
- **Flawed Bundle Structure**: The kext bundle structure may be incorrect.
- **Missing CFBundleIdentifier Property**: The `Info.plist` file may be missing the `CFBundleIdentifier` property.
- **Invalid Info.plist File**: The `Info.plist` file may be missing or syntactically invalid.

### Checking Loaded Kexts

To check whether a kext is currently loaded in the kernel, use the `kextstat` command:

```bash
$ kextstat
```

The output will list all loaded kexts, including their indices, references, addresses, and memory usage. For example:

```
Index Refs Address Size Wired Name (Version)
1 1 0x0 0x0 0x0 com.apple.kernel (8.6.0)
2 11 0x0 0x0 0x0 com.apple.kpi.bsd (8.6.0)
3 12 0x0 0x0 0x0 com.apple.kpi.iokit (8.6.0)
4 12 0x0 0x0 0x0 com.apple.kpi.libkern (8.6.0)
...
133 0 0x5cbca000 0x2000 0x1000 com.osxbook.kext.DummySysctl (1.0.0d1)
```

- **Index**: The index at which the kext is loaded.
- **Refs**: The number of references to the kext.
- **Address**: The kext's load address in the kernel's virtual address space.
- **Size and Wired**: The amounts of kernel memory and wired kernel memory used by the kext.
- **Name (Version)**: The name and version of the kext.

### Unloading a Kext

To manually unload a kext, use the `kextunload` command:

```bash
$ sudo kextunload -v /tmp/DummySysctl.kext
kextunload: unload kext /tmp/DummySysctl.kext succeeded
```

In a typical deployment scenario, kexts are loaded automatically when needed and unloaded when no longer in use.

### Logging Kext Activity

Output from `printf()` statements in the kext can be found in the system log:

```bash
$ grep DummySysctl_ /var/log/system.log
Mar 14 17:32:48 g5x4 kernel[0]: DummySysctl_start
Mar 14 17:34:48 g5x4 kernel[0]: DummySysctl_stop
```

### Implementing Sysctl Variables Using a Generic Kext

To extend a generic kext to implement a sysctl node with two variables (an integer and a string), follow these steps:

1. **Create a Subcategory**:
   - The new node, `osxbook`, will be a subcategory of the existing top-level sysctl node `debug`.
   - The MIB-style name will be `debug.osxbook`.

2. **Define the Variables**:
   - **uint32**: A 32-bit unsigned integer, readable and writable by any user.
   - **string**: A string up to 16 characters in length, readable by anyone but writable only by the root user.

3. **Use SYSCTL_PROC() Macro**:
   - Use the `SYSCTL_PROC()` macro to define the sysctl variables with custom handler functions.

### Example Code

Here is an example of how to define the sysctl variables in `DummySysctl.c`:

```c
#include <sys/param.h>
#include <sys/sysctl.h>
#include <sys/kernel.h>

static u_int32_t k_uint32 = 0; // The contents of debug.osxbook.uint32
static u_int8_t k_string[16] = { 0 }; // The contents of debug.osxbook.string

// Construct a node (debug.osxbook) from which other sysctl objects can hang.
SYSCTL_NODE(_debug, OID_AUTO, osxbook, CTLFLAG_RW, 0, "demo sysctl hierarchy");

// Prototypes for read/write handling functions for our sysctl nodes.
static int sysctl_osxbook_uint32(SYSCTL_HANDLER_ARGS);
static int sysctl_osxbook_string(SYSCTL_HANDLER_ARGS);

// Define the uint32 variable.
SYSCTL_PROC(_debug_osxbook, OID_AUTO, uint32, CTLTYPE_INT | CTLFLAG_RW | CTLFLAG_ANYBODY, &k_uint32, 0, sysctl_osxbook_uint32, "IU", "32-bit unsigned integer");

// Define the string variable.
SYSCTL_PROC(_debug_osxbook, OID_AUTO, string, CTLTYPE_STRING | CTLFLAG_RW, &k_string, 16, sysctl_osxbook_string, "A", "16-byte string");

static int sysctl_osxbook_uint32(SYSCTL_HANDLER_ARGS) {
    return sysctl_handle_int(oidp, oidp->oid_arg1, oidp->oid_arg2, req);
}

static int sysctl_osxbook_string(SYSCTL_HANDLER_ARGS) {
    return sysctl_handle_string(oidp, oidp->oid_arg1, oidp->oid_arg2, req);
}

kern_return_t DummySysctl_start(kmod_info_t *ki, void *d) {
    sysctl_register_oid(&sysctl__debug_osxbook);
    sysctl_register_oid(&sysctl__debug_osxbook_uint32);
    sysctl_register_oid(&sysctl__debug_osxbook_string);
    return KERN_SUCCESS;
}

kern_return_t DummySysctl_stop(kmod_info_t *ki, void *d) {
    sysctl_unregister_oid(&sysctl__debug_osxbook_string);
    sysctl_unregister_oid(&sysctl__debug_osxbook_uint32);
    sysctl_unregister_oid(&sysctl__debug_osxbook);
    return KERN_SUCCESS;
}
```

### Testing the Kext

After compiling and loading the kext, you can use the `sysctl` command to get and set the values of the sysctl variables:

```bash
$ sysctl debug
...
debug.osxbook.uint32: 0
debug.osxbook.string:
$ sysctl -w debug.osxbook.uint32=64
debug.osxbook.uint32: 0 -> 64
$ sysctl debug.osxbook.uint32
debug.osxbook.uint32: 64
$ sysctl -w debug.osxbook.string=kernel
sysctl: debug.osxbook.string: Operation not permitted
$ sudo sysctl -w debug.osxbook.string=kernel
debug.osxbook.string: -> kernel
$ sysctl debug.osxbook.string
debug.osxbook.string: kernel
```

### I/O Kit Device Driver Kext

An I/O Kit driver is a kext that uses C++ and runs in the kernel's C++ runtime environment. The `Info.plist` file of an I/O Kit driver contains one or more driver personality dictionaries. Unlike a generic kext, the driver implementor does not provide start/stop routines, but there are several entry points that can be optional or mandatory. These include:

- **init()**: Called during active matching, it initializes the driver instance.
- **free()**: Called when the driver is unloaded, it frees any resources allocated by `init()`.
- **probe()**: Probes the hardware to determine if the driver is suitable.
- **start()**: The starting point of the driver's lifecycle, where it advertises its services.
- **stop()**: The end point of the driver's lifecycle, where it stops providing services.
- **attach()**: Attaches the driver to a provider through registration in the I/O Registry.
- **detach()**: Detaches the driver from a nub.

### Example: Implementing an I/O Kit Driver

To create an I/O Kit driver, start with the IOKit Driver Xcode template. The generated files include `DummyDriver.h`, `DummyDriver.cpp`, and `Info.plist`. The `Info.plist` file should contain the necessary properties for matching and loading the driver.

### Key Contents of the Driver's Property List File

```xml
<key>IOKitPersonalities</key>
<dict>
    <key>DummyPersonality_0</key>
    <dict>
        <key>CFBundleIdentifier</key>
        <string>com.osxbook.driver.DummyDriver</string>
        <key>IOClass</key>
        <string>com_osxbook_driver_DummyDriver</string>
        <key>IOKitDebug</key>
        <integer>65535</integer>
        <key>IOMatchCategory</key>
        <string>DummyDriver</string>
        <key>IOProviderClass</key>
        <string>IOResources</string>
    </dict>
</dict>
<key>OSBundleLibraries</key>
<dict>
    <key>com.apple.kpi.iokit</key>
    <string>8.0.0</string>
    <key>com.apple.kpi.libkern</key>
    <string>8.0.0</string>
</dict>
```

- **CFBundleIdentifier**: Identifies the driver using a reverse-DNS-style name.
- **IOClass**: Specifies the name of the driver's primary class.
- **IOProviderClass**: Specifies the provider class, such as `IOResources` for a non-hardware driver.

### Example: BootCache Kext

The `BootCache` kext is an example of a driver that matches against `IOResources` and operates within the Mach and BSD portions of the kernel. Its `Info.plist` file includes:

```xml
<key>IOKitPersonalities</key>
<dict>
    <key>BootCache</key>
    <dict>
        <key>CFBundleIdentifier</key>
        <string>com.apple.BootCache</string>
        <key>IOClass</key>
        <string>com_apple_BootCache</string>
        <key>IOMatchCategory</key>
        <string>BootCache</string>
        <key>IOProviderClass</key>
        <string>IOResources</string>
    </dict>
</dict>
```

### Example: iPod Driver

The `iPodDriver` kext is an example of a driver with multiple personalities. An excerpt from its `Info.plist` file:

```xml
<key>IOKitPersonalities</key>
<dict>
    <key>iPodDriver</key>
    ...
</dict>
```

This setup allows the iPod driver to match different types of iPod devices.