# Hare Hunting in the Wild Android: A Study on the Threat of Hanging Attribute References

## Authors
Yousra Aafer<sup>∗,1</sup>, Nan Zhang<sup>∗,2</sup>, Zhongwen Zhang<sup>3</sup>, Xiao Zhang<sup>1</sup>, Kai Chen<sup>2,3</sup>, XiaoFeng Wang<sup>2</sup>, Xiaoyong Zhou<sup>4</sup>, Wenliang Du<sup>1</sup>, Michael Grace<sup>4</sup>

### Affiliations
1. Syracuse University
2. Indiana University, Bloomington
3. SKLOIS, Institute of Information Engineering, Chinese Academy of Sciences
4. Samsung Research America

### Contact
- {yaafer, xzhang35, wedu}@syr.edu
- {nz3, xw7}@indiana.edu
- {zhangzhongwen, chenkai}@iie.ac.cn
- {x.zhou01, m1.grace}@samsung.com

---

## Abstract
Android is characterized by the complex interrelations among its components and applications, where one party interacts with another (e.g., starting an activity) by referencing attributes such as package, activity, service, action names, authorities, and permissions. These relations can be easily compromised during customization, such as when an app is removed to fit an Android version to a new device model, while references to the app remain within the OS. This conflict between the decentralized, unregulated Android customization process and the interdependency among different Android components and apps leads to the prevalence of hanging attribute references (Hares), a type of vulnerability not previously investigated. In our research, we show that popular Android devices are riddled with such flaws, which often have serious security implications. When an attribute (e.g., a package/authority/action name) is used on a device but the defining party has been removed, a malicious app can fill the gap to acquire critical system capabilities by simply disguising as the owner of the attribute.

Specifically, we discovered that on various Android devices, malware can exploit Hares to steal users' voice notes, control the screen unlock process, replace Google Email's account settings activity, and collect or even modify the user's contacts without proper permissions. We further designed and implemented Harehunter, a tool for automatically detecting Hares by comparing defined and used attributes, and analyzing references to undefined attributes to determine if they are protected (e.g., by signature checking). On factory images for 97 popular Android devices, Harehunter discovered 21,557 likely Hare flaws, demonstrating the significant impact of the problem. To mitigate these hazards, we developed an app, HareGuard, to detect attempts to exploit Hares on different devices and provide guidance for avoiding this pitfall in future systems.

*The two lead authors are ordered alphabetically.

---

## 1. Introduction
No operating system (OS) has ever been as popular and diverse as Android. Over one billion mobile devices run the OS, whose official versions (Android Open Source Project or AOSP) have been aggressively customized into thousands of system images by hardware manufacturers, device manufacturers, carriers, and others. This practice has led to a highly fragmented ecosystem, creating challenges for Android applications (apps) to operate across different devices. To address this, Google launched the Android Compatibility Program to guide the customization process. However, this effort fails to address a serious concern: security hazards can arise when proper precautions are not taken during the customization of the OS and apps for different devices.

### Hares in the Wild Wild Android
For example, a manufacturer may customize a smartphone OS for a tablet without 3G capability by removing some components, including messaging and telephony provider apps. If the tablet still has apps capable of receiving SMS/MMS messages, malware could impersonate the missing telephony providers (using their SMS/MMS authorities) to communicate with those apps and their users, leading to security breaches. The root cause is the intrinsic interdependent relations between different Android components, which connect one party to another through references to attributes such as package, activities, services, authorities of content providers, and permissions. Customizations, if not well thought out, can break these relations, resulting in references to non-existent attributes, which we call "hanging attribute references" or Hares.

As a side effect of Android fragmentation, Hares can also be introduced by third-party developers who design apps to run on various Android versions, with or without certain service components. Compared to customization flaws discovered in previous research, which focused on Linux-layer device drivers, Hares are framework-layer issues and potentially more pervasive, given the focus on system apps in customizations.

### Our Findings
This new type of vulnerability was first discovered in our research, showing that they are both security-critical and extensive. For instance, a Hare on Note 8.0 can be exploited to steal the user's voice note, and another flaw on Tab S 8.4 allows a malicious app to impersonate the Facelock guard to gain control over the user's login authentication. The popular Tango app contains an unprotected reference to the missing SMS, which can be leveraged to steal the user's messages. Additionally, by hijacking various packages, activities, or missing content providers, an adversary can replace Google Email’s internal account settings interface, inject activities into LG FileManager and LG CloudHub to steal the user's password, and trick S-Voice into launching a malicious program whenever the user needs to use the pre-installed voice recorder. On Note 3 (phone) and Note 8.0 (tablet), a Hare related to an absent permission can be exploited to steal all contact information and even tamper with it.

To understand the scope and magnitude of the security hazards introduced by Hares, we ran Harehunter on over 97 OS images for Google, Samsung, LG, HTC, and Motorola devices. This study shows that unprotected Hares exist on every single device tested and are open to exploitation. Although such flaws can be caused by carriers and other parties, they are primarily introduced by manufacturers when customizing the same OS for different device models. The problems persist even on the latest OS versions and phone models, indicating that this security risk has not yet come to their attention. We reported high-profile Hares to Google, Samsung, and other organizations, who acknowledged the importance of our findings. Video demos of some attacks are available on a private website [6].

### Detection and Protection
Our measurement study was made possible by Harehunter, a tool for automatically detecting Hare vulnerabilities within system apps. Harehunter performs a differential analysis, comparing attributes defined by system apps with those referred to by them. Any discrepancy reveals a Hare risk, which is further evaluated to determine if it is protected (e.g., by signature checking). Running Harehunter on 97 popular device images, we discovered 21,557 likely Hares within 3,450 vulnerable system apps, documented in a database. This database is utilized by HareGuard, an app we developed to inspect newly installed apps, identifying suspicious ones that attempt to exploit Hares, thereby securing the device even before the manufacturer can fix the problems. Our study further evaluated the efficacy and performance of Harehunter and HareGuard, both of which were shown to be highly effective.

### Contributions
- **New Findings:** We discovered Hares, a new category of Android vulnerabilities. These are not isolated, random bugs but are caused by the fundamental conflict between the under-regulated Android customization process and the complex interdependencies among apps and components. Our research highlights the significant impacts of these flaws, which could lead to privilege escalation or information leaks on almost every popular Android device inspected.
- **New Techniques:** We developed techniques for automatically detecting Hares within different Android versions and protecting against their exploitation. These tools can be used by device manufacturers and other parties to improve the security quality of their custom OSes. Users can get immediate protection by installing our user-land app, HareGuard, before the manufacturers fix the problems.
- **Implementation and Evaluation:** We implemented Harehunter and HareGuard and evaluated them on a large number of customized Android versions.

### Roadmap
- **Section 2:** Background of our study.
- **Section 3:** Different Hare flaws and their security implications through high-profile examples.
- **Section 4:** Description of our detection and protection techniques, and our large-scale measurement study using the tool.
- **Section 5:** Lessons learned from our study.
- **Section 6:** Comparison with related prior research.
- **Section 7:** Conclusion.

---

## 2. Background
### Android Fragmentation
The AOSP baselines have been intensively customized by different parties. Hardware manufacturers like Qualcomm first change the OS to support their products, and then device manufacturers like Samsung, LG, and HTC modify the version to enrich functionalities and tailor it to different devices. This customization continues when the devices reach carriers, which revise services or add new apps to distinguish their phones or tablets. Rapid updates outpace the distribution of hardware platforms capable of supporting the new systems, leading to a large number of custom Android systems co-existing in the market.

Prior research shows that the most heavily-customized components are a device’s pre-installed apps. A study found that only 18% of pre-installed apps on major smartphones were from their corresponding AOSP baselines, 65% from the manufacturers, and 17% added by other parties. While some of these apps contain known vulnerabilities, little has been done to understand whether new, customization-specific security flaws have been introduced, which our study aims to address.

### Attribute Reference and Android Security Model
Different Android components (apps, activities, services, content providers, receivers) are connected through Inter-Component Communication (ICC), such as Intent messaging. An Intent is a message that describes operations to be performed by the recipient. For example, `startActivity` triggers an activity associated with an app. The app’s package name and activity name can be specified through the Intent using methods like `setPackage`, `setClassName`, `setComponent`, etc. When these attributes are not set, the Intent is implicit and needs to be resolved by the OS to locate the recipient. The sender provides an action (e.g., `android.intent.action.Edit`) and other parameters, and the recipient must declare an Intent filter that matches these parameters to receive the Intent.

Another important component is the content provider, which manages access to an app’s databases. To operate on another app’s content provider, one must get a URI (`content://authorityname/path`), allowing read and write access to the database table under the consent of its owner. In ICC communication, if the target of a reference (e.g., package name, activity name, action name, authority name) is not present, the reference becomes hanging, leading to serious security implications.

Android protects its information assets through an application-sandbox and permission model, where each app runs in its own compartment (enforced through Linux user protection) and can only access sensitive global resources and other app components with proper permissions. Apps can specify permissions for each component, and only messages or service requests from parties with the permission are processed. Permission protection is mostly set statically in the app’s manifest file but can also be specified programmatically using APIs like `checkPermission`. When the party defining a permission does not exist in a custom version, the permission protection becomes hanging, allowing anyone defining the permission to gain access to protected app components.

### Adversary Model
We consider a scenario where a malicious app is installed on the target device but does not need any suspicious permissions. In the case of hanging permission protection, the app can define the missing permission to launch attacks. To deliver stolen information, the app can request network permission or use other channels like a browser to send data out.

---

## 3. Exploiting Hares
A hanging attribute reference could be an ICC call to a non-existent package, activity, service, or authority of a content provider, or the use of a missing permission to protect an app component. In the presence of such a reference, a malicious app claiming the target attribute can gain access to exposed information assets or guarded permissions. Specifically, if the reference is not protected along the execution path involving the Hare (i.e., no validation of the existence and legitimacy of the attribute before using it), the malware that acquires the attribute (e.g., package/authority/permission name) automatically obtains the associated privilege and can get sensitive messages, utilize components, etc.

Not every hanging reference is exploitable. It can be protected by verifying the existence of the package that should define it and then verifying its signature (extracted through `getPackageInfo` with the `GET_SIGNATURES` flag), or its application info `FLAG_SYSTEM`, or by checking the current device’s model, country code, or other properties (e.g., `getProperty`). The presence of such protection was identified in our study.