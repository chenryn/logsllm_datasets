title:When Good Randomness Goes Bad: Virtual Machine Reset Vulnerabilities
and Hedging Deployed Cryptography
author:Thomas Ristenpart and
Scott Yilek
When Good Randomness Goes Bad: Virtual Machine
Reset Vulnerabilities and Hedging Deployed Cryptography
Thomas Ristenpart
Scott Yilek
Dept. of Computer Science and Engineering
University of California, San Diego, USA
{tristenp,syilek}@cs.ucsd.edu
Abstract
Random number generators (RNGs) are consistently a
weak link in the secure use of cryptography. Routine cryp-
tographic operations such as encryption and signing can
fail spectacularly given predictable or repeated random-
ness, even when using good long-lived key material. This
has proved problematic in prior settings when RNG imple-
mentation bugs, poor design, or low-entropy sources have
resulted in predictable randomness. We investigate a new
way in which RNGs fail due to reuse of virtual machine
(VM) snapshots. We exhibit such VM reset vulnerabilities
in widely-used TLS clients and servers: the attacker takes
advantage of (or forces) snapshot replay to compromise
sessions or even expose a server’s DSA signing key. Our
next contribution is a backwards-compatible framework for
hedging routine cryptographic operations against bad ran-
domness, thereby mitigating the damage due to randomness
failures. We apply our framework to the OpenSSL library
and experimentally conﬁrm that it has little overhead.
1. Introduction
The security of routine cryptographic operations such as
encryption, key exchange, and randomized signing rely on
access to good (unpredictable, fresh) randomness. Unfortu-
nately, the random number generators (RNGs) used in prac-
tice frequently fail. Examples stem from poorly designed
RNGs [28, 32, 35], implementation bugs [13, 51], untimely
exposure of randomness [17], and even the inability to ﬁnd
sufﬁcient entropy in a system’s environment [36]. Since
deployed cryptographic routines provide no security given
bad randomness (even when using good long-lived keys),
the attacks that result from RNG failure are spectacular
[13, 16, 32, 35, 53].
In this work, we ﬁrst show a new way in which deployed
RNGs fail, due to virtual machine (VM) resets. Beyond
their relevance to RNG failures, the vulnerabilities are also
interesting because they introduce a potentially-widespread
class of practical problems due to virtualization technolo-
gies. Our second contribution is a general and backwards-
compatible framework to hedge against the threat of ran-
domness failures in deployed cryptographic algorithms. We
discuss each contribution more in turn.
VM reset vulnerabilities. Virtualization technologies en-
able signiﬁcant ﬂexibility in handling the state of guest sys-
tems (an operating system, user applications, and data). In
particular, virtual machine (VM) snapshots, i.e. copies of
the state of the guest, can be used to replicate, backup, trans-
fer (to another physical system), or reset (to a prior state)
the guest. Snapshots are one reason virtualization is trans-
forming numerous areas of computing. However, Garﬁnkel
and Rosenblum [31] suggest that, in theory, snapshots might
lead to security problems due to reuse of security-critical
state. Namely, reusing a VM snapshot might lead to (what
we call) VM reset vulnerabilities. But no insecurities have
been reported for real systems, leaving open the question of
whether reset vulnerabilities are a practical problem.
We answer this question by revealing exploitable VM
reset vulnerabilities within popular software. Our attacks
are against TLS [8] implementations used for secure web
browsing and work when a victim VM runs twice from the
same snapshot. We investigate both TLS clients and servers,
presenting session-compromise attacks against clients in the
Firefox and Chrome web browsers and secret-key recov-
ery attacks against the Apache HTTPS server. The latter is
particularly damaging — an attacker can remotely extract
a server’s DSA secret key. With this key, the attacker can
impersonate the server. We exhibit exploits when the victim
is run within either VMWare [12] or VirtualBox [10], two
popular VM managers.
The attacks work because the VM resets lead to crypto-
graphic operations (here, key exchange and signing) using
the same randomness more than once. These cryptographic
operations, in turn, fail to provide any security given re-
peat randomness. One conceptually simple solution, then,
is to ensure that applications sample sufﬁciently fresh ran-
domness immediately before use. Unfortunately, there are
lurking complexities to overcome. Besides the difﬁculty of
ensuring every RNG-using application is updated, there is
the more subtle problem of where to ﬁnd good randomness
after VM resets. For example, the state of traditional RNGs
(e.g., Linux’s /dev/random) is also reset with the rest of the
guest. We provide more discussion of systems solutions in
the body, but leave the bulk of this task to future work.
Finally, we suspect that the VM reset vulnerabilities we
show are indicative of further issues. An important open
question is whether other practical insecurities arise due to
VM resets.
Hedging deployed cryptography. The attacks above are
symptomatic of the widespread fragility of cryptographic
operations to repeated or predictable randomness. Because
many cryptographic operations fundamentally rely on good
randomness to achieve the desired security level, repairing
RNGs is the only full solution. However, the complexity of
RNG design, the frequency with which RNG failures occur,
and the signiﬁcant damage that results all suggest that cryp-
tography should be designed so that bad randomness has as
little ill effect as possible.
One potential approach is to implement some form of
hedged cryptography, considered in various ways in [19, 37,
46, 48]. The general idea is that routine cryptographic oper-
ations should be designed so that, given good randomness,
they provably meet traditional security goals and, given
bad randomness, they nevertheless provably achieve some
meaningful security level. While not everywhere eliminat-
ing the need for good randomness, hedging against bad ran-
domness can signiﬁcantly mitigate the threat of RNG fail-
ure. Unfortunately, existing approaches only treat speciﬁc
primitives such as public-key encryption [19, 52] or sym-
metric encryption [37, 46, 48] and only treat speciﬁc, dis-
parate kinds of RNG failures. In this work we seek an ap-
proach that is fast, conserves existing security when ran-
domness is good, works with arbitrary deployed algorithms,
and can boost security in the face of arbitrary types of RNG
failures.
We give a framework for hedging cryptographic opera-
tions that achieves these goals. Our starting point is tech-
niques from [19, 52], which we show can be straightfor-
wardly combined to be applicable to arbitrary cryptographic
primitives. Brieﬂy, an operation is replaced by a hedged
version with equivalent functionality. The hedged ver-
sion preprocesses RNG-derived randomness together with
other inputs (messages, keys, etc.) with HMAC to provide
(pseudo)randomness for the cryptographic operation. The
modiﬁcations are simple. Even so, by changing the cryptog-
raphy we can prove that important schemes are more secure
in the face of various kinds of randomness failure.
We apply our framework to the latest OpenSSL code
base, which doubles as a cryptographic library used by
many applications and as a widely used implementation of
the TLS protocol. Benchmarking the hedged version of the
library indicates that overhead is very low. Because hedg-
ing does not impact functionality, our library interoperates
transparently with existing TLS implementations. We are
currently in the process of preparing our implementation
for public release, which will allow immediate deployment
with the corresponding security beneﬁts.
2. Random Number Generation and Threat
Models
There are many methods for generating cryptographi-
cally strong random numbers. We do not go into signiﬁcant
detail regarding particular implementations. See [36, 43]
for details regarding some platform-speciﬁc random num-
ber generators. Instead we give an abstract model of random
number generation which already sufﬁces for discussing
threats and attacks. We will ﬁll in further details when nec-
essary.
The task of a cryptographic random number generator
(RNG) is to provide uniform, private bits to applications.
We ﬁnd it convenient to view an RNG as a stack. The
ﬁrst layer is the entropy layer where entropy is generated.
Here sources of (hopefully) unpredictable events occur in
a manner that can be sampled. Examples include tempera-
ture variations, clock drift, interrupt timings, mouse move-
ments or keyboard clicks, and network packet arrivals. We
view the entropy layer not as an actual software or hardware
system, but rather as an encapsulation of the physical pro-
cesses from which entropy is harvested. The second layer
is the sampling layer which samples from the entropy layer
to measure events and generate digital descriptions of them.
This layer also attempts to extract uniform random bits from
the unpredictable data and maintains a pool of such bits.
The uniform bits are then provided to applications requir-
ing randomness in the consuming layer.
We note that, crucially, the consuming layer may it-
self consist of further sequences of RNG-related systems.
For example, in typical operating systems the kernel imple-
ments the sampling layer, a cryptography library consumes
kernel-supplied randomness and also provides it to further
applications. Note that every layer above the ﬁrst poten-
tially stores randomness internally in state. Looking ahead,
this aspect of RNG stacks will be important in the context
of reset attacks, which abuse reused state. Security requires
that each layer ensures distinct requests (even ones made in
parallel) are answered with fresh randomness.
Threat models. There exist numerous ways in which an
RNG stack might fail or be tampered with by a dedicated
attacker. For the purposes of threat modeling, however, we
can loosely categorize randomness failures by the resultant
quality of randomness as seen from the point of view of an
application.
Abeni et al. [16] and Yilek et al. [53] show how to abuse
the predictable randomness to perform session compromise
attacks.
(1) Fresh randomness: An application is always provided
3. VM Reset Vulnerabilities Affecting TLS
new, private, uniform bits.
(2) Reused randomness: An application is provided private,
uniform bits, but these bits might have been provided to
the application before.
(3) Exposed randomness: An application is provided uni-
form bits but attackers later learn these bits.
(4) Predictable randomness: An application is provided
random bits that are predictable by an adversary.
(5) Chosen randomness: An application is provided
adversarially-chosen random bits.
For simplicity we will sometimes refer to fresh randomness
as good and any of the four other kinds of randomness as
bad. Our threat model is potentially malicious failure (at
any level) of the RNG stack when performing routine ran-
domized cryptographic operations, for example encrypting
a message, signing a message, or performing key exchange.
Randomness vulnerabilities lead to applications using one
of the four kinds of bad randomness.
Previous failures. We classify previous randomness vul-
nerabilities into these threat models. We are unaware of
any reports on vulnerabilities leading to reused randomness
that didn’t also lead to predictable randomness. Becherer
et al. recently describe a possible vulnerability on Amazon
EC2 [17] that leads to exposed randomness. Due to the ar-
chitecture of EC2, an attacker might learn the initial state
of a victim virtual machine’s RNG. They conjecture (but
provide only anecdotal evidence) that one might use this in-
formation to recreate cryptographic keys generated by the
victim.
Examples of vulnerabilities leading to predictable ran-
domness abound. Wagner and Goldberg exhibit session
compromise attacks against SSLv2 because clients used
predictable randomness for session keys [32]. Gutterman
et al. point out that some systems may not have access to a
sufﬁciently rich entropy layer, for example network routers
without disks [36]. Gutterman and Malkhi discuss pre-
dictable randomness vulnerabilities in Java session identi-
ﬁers [35]. Dorrendor et al. [28] point out that the Window’s
kernel RNG stored randomness in a way that is accessible
to unprivileged programs. Woolely et al. uncovered a bug
in the FreeBSD RNG that led to no entropy for several min-
utes after a reboot [51]. Perhaps the most spectacular exam-
ple thus far is the Debian OpenSSL vulnerability, originally
discovered by Bello [13]. Here a bug was introduced in the
OpenSSL crypto library that tragically rendered impotent
the RNG. Mueller [42] shows how to abuse the ensuing pre-
dictable randomness to recover long-lived TLS secret keys.
In this section we explore virtual machine (VM) reset
vulnerabilities. These arise when applications’ security-
critical state is captured by a VM snapshot and starting the
VM repeatedly from the snapshot leads to security prob-
lems. The VM reset vulnerabilities we consider are due
to cryptographic randomness being cached by applications
and caught in a snapshot. Running multiple times from the
snapshot results in cryptographic operations consuming re-
peated randomness, and in turn, failing to provide security.
Virtualization and snapshots. Modern virtual machine
monitors (VMMs) allow physical multiplexing of hardware
resources between numerous guest operating systems, each
run within a virtual machine (VM). Virtualization technolo-
gies have become almost ubiquitous. Consumers use VMs
for home PC security, for example to contain malware infec-
tions. Businesses use virtualization to more efﬁciently man-
age computing infrastructure. The (so-called) cloud com-
puting paradigm is powered by virtualization.
An important feature of almost all modern VMMs is the
ability to take VM snapshots. A snapshot is a copy of the
entire state of a VM, including active memory. This al-
lows restarting the VM exactly in the state at which the
snapshot was taken. VMWare [12], VirtualBox [10], and
Virtual PC [11] all include snapshot mechanisms and ad-
vertise them as a core feature. Some VMMs offer a more
limited volume snapshot, which is a copy of the persistent
state (volumes) of a VM (but not active memory). Restart-
ing from a volume snapshot requires booting the guest OS
from the persistent state. Modern third-party cloud comput-
ing services such as Amazon EC2 [3], Microsoft Azure [7],
Mosso Rackspace [1] all rely on volume snapshots to allow
users of the service to save convenient server conﬁgurations
for later use.
The attacks we describe below work against TLS [9]
clients and servers when run multiple times from full snap-
shots. We did not investigate vulnerabilities due to volume
snapshots; the particular vulnerabilities we found would not
seem to carry over.
3.1. TLS Client Vulnerabilities
Recall that TLS is used to secure HTTP connections over
the Internet. Thus, TLS protects the security of online bank-
ing, shopping, and other sensitive trafﬁc. Every popular
web browser therefore includes a TLS client, which is used
to negotiate a shared secret, called a session key, between it
and the remote HTTP server. The most prevalent [53] mode
for establishing a session key is RSA key transport. Here
the client chooses a secret value, called the premaster secret
(PMS), encrypts it under the server’s public RSA key, and
then sends the resulting ciphertext to the server. The sym-
metric session keys used to secure the rest of the session are
then derived from the PMS and two other values that are
sent in the clear.
In abstract, a VM reset vulnerability could arise if the
PMS, or the randomness used to create it, is generated be-
fore a snapshot and consumed upon resumption after the
snapshot. This vulnerability would lead to an immediate
compromise of sessions if the same PMS is sent to multiple
different servers.
Before assessing whether this can occur in practice, we
ﬁrst ask: Why might a user run their browser in a virtual
machine? Security experts recommend users do their web
browsing within a VM to increase security. The idea is that
if the browser has a vulnerability and a malicious site ex-
ploits it, the damage is contained to the VM. A user can
revert to a previous snapshot taken before the browser and
VM were compromised to undo the effects of any malware.
We performed experiments on a variety of browsers on
both Linux and Windows to determine if there is a real prob-
lem. There is. Our results are summarized in Figure 1. We
explain the results in detail below.
Experimental setup. We used two Apache web servers
(call them server1 and server2) running on two separate
physical machines. The servers used an instrumented ver-
sion of OpenSSL that, upon receipt of the client’s key ex-
change message in a TLS session using RSA key transport,
would decrypt the premaster secret and write it to a ﬁle.
Each server was given an RSA certiﬁcate signed by our
own certiﬁcate authority (CA). We ran the various browsers
(listed in Figure 1) within the indicated operating systems
as guests inside a VM running in either VMWare 1.0.10
or VirtualBox 3.0.12. The physical host ran Ubuntu 8.04
Desktop. The client browsers, excepting Safari in Windows,
were conﬁgured to accept our CA. This ensured that, upon
visiting one of our servers, a browser in the guest OS would
not complain about a certiﬁcate signed by an untrusted CA.
(For Safari, we ended up just clicking “continue” when pre-
sented with a warning about an untrusted certiﬁcate.)
Experiments. We start with the following test sequence.
(1) Reboot the OS.
(2) Load the browser.