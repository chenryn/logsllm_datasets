-> e, es, ss
 e, s
 se
Figure 1: Three Noise handshakes (colors match those of Figure 2,
to help the reader, but are not part of the syntax)
Example 1 (Handshake syntax and semantics). Consider NN
(shown in Figures 1 and 2a), a Noise handshake loosely corre-
sponding to an unauthenticated Difﬁe-Hellman key exchange.
There are no pre-messages, so the ellipsis is omitted. In the
ﬁrst message, the initiator (on the left) sends his ephemeral
public key ge, indicated by the key token e in the ﬁrst message
pattern. Each message sent ends with a payload, protected
using AEAD under the best available key (this step is not ma-
terialized as a token in the Noise syntax, but comes implicitly
at the end of all message patterns). Here, p1 is sent in the
clear. In the second message, the recipient (on the right) sends
his own ephemeral key ge(cid:48)
, indicated by the key token e in
the second message pattern. The token ee means that when
processing the second message, both parties derive a Difﬁe-
Hellman term from their respective ephemeral keys. Speciﬁ-
cally, after the second message, the initiator knows his private
key e and the recipient’s public key ge(cid:48)
. He can thus compute
gee(cid:48)
)e. The recipient’s situation is symmetrical: he
knows ge and e(cid:48) and can thus compute gee(cid:48)
. Colloqui-
ally speaking, the DH term obtained by mixing the initiator’s
and recipient’s ephemeral keys is gee(cid:48)
. They will use this value
to seed a secret symmetric key, which is the initial current key,
and is used to protect payloads, here p2, with AEAD and the
hash of all previous computation steps as additional data.
= (ge)e(cid:48)
= (ge(cid:48)
One can also mix different keys as DH terms. When several
such terms are present, they can be mixed together using a
key derivation function to obtain a new current key.1 This is
illustrated by KK, a Noise handshake loosely corresponding
to an authenticated Difﬁe-Hellman key exchange shown in
Figures 1 and 2b. Both pre-messages contain the same unique
key token s, meaning both parties should already know their
peer’s public static key before starting the handshake. Namely,
the initiator (respectively recipient) knows his private static
key s (respectively s(cid:48)) and his partner’s public static key
gs(cid:48)
(respectively gs). Then in the ﬁrst message the initiator
(i) sends ge (key token e) in clear text because the current
symmetric key is initially empty (i.e., not yet determined), (ii)
computes the DH term ges(cid:48)
(DH token es) and mixes it with
the current symmetric key that is then no longer empty (i.e.,
can now be used), (iii) computes the DH term gss(cid:48)
(DH token
ss) and mixes it with the current symmetric key (the resulting
value is denoted as k1 in Figure 2b), and ﬁnally (iv) sends the
1We use mix in an overloaded manner, to both denote DH-computation
with two half-keys, and KDF-application with two secrets.
Bob(e(cid:48))
Alice(e)
−−−−−−−−−−−−−−−−−−→
ge(cid:48)
←−−−−−−−−−−−−−−−−−−
))
, aead(p2, kdf(gee(cid:48)
ge, p1
(a) NN handshake
)
Alice(e,s,gs(cid:48)
Bob(e(cid:48),s(cid:48),gs)
k1 := kdf(ges(cid:48)
,gss(cid:48)
ge, aead(p1,k1)
k2 := kdf(k1,gee(cid:48)
−−−−−−−−−−−−−−−−−−−−−−−→
,gse(cid:48)
, aead(p2,k2)
←−−−−−−−−−−−−−−−−−−−−−−−
ge(cid:48)
)
)
Alice(e,s,gs(cid:48)
−−−−−−−−−−−−−−−−−−−−−−−→
)
(b) KK handshake
Bob(e(cid:48),s(cid:48))
ge,gs, p1
,ge(cid:48)s)
k1 := kdf(gee(cid:48)
ge(cid:48)
, aead(p2,k1)
k2 := kdf(k1,gse(cid:48)
aead(p3,k2)
)
←−−−−−−−−−−−−−−−−−−−−−−−
−−−−−−−−−−−−−−−−−−−−−−−→
(c) I1K1 handshake
Figure 2: Alice & Bob notation for the handshakes of Figure 1.
e,e(cid:48) (respectively s,s(cid:48)) are ephemeral (respectively static) private
keys and the pi are payloads exchanged during the handshake. In
transport mode, payloads are encrypted with the last key material
used in the handshake. For legibility, we omitted the associated data
of AEAD encryptions, which roughly corresponds to the hash of all
preceding sent messages along with the public keys in pre-messages.
ﬁrst payload protected using AEAD under the current sym-
metric key k1 with the transcript of all messages exchanged
so far as additional data. When receiving the corresponding
message (i.e., the pair (cid:104)ge,c(cid:105), where c is the encrypted
payload), the recipient performs the same computations and
obtains the symmetric key k1 and can therefore decrypt c.
For the second message, the recipient sends ge(cid:48)
(key token
e), computes two DH terms corresponding to ee and se,
and obtains the symmetric key k2 accordingly. Similarly, the
message ends with the second payload protected by AEAD
with the key k2 and the hash of all previous computation steps
as additional data.
Finally, the transport mode can start where all payloads
are protected with AEAD under a derivative of the ﬁnal
symmetric key k2 and empty additional data.
2.1.2 Security levels
The speciﬁcation deﬁnes 3 source levels (degree of authenti-
cation of the sender provided to the recipient), 6 destination
levels (degree of conﬁdentiality provided to the sender), and
10 identity-hiding levels (protection of the sender’s or the
recipient’s public key), where higher numbers indicate bet-
ter security. The descriptions of these security properties are
informal and non-trivial to interpret.
Example 2. Destination Property 4, quoted from [24]: ‘En-
cryption to a known recipient, weak forward secrecy if
the sender’s private key has been compromised. This pay-
load is encrypted based on an ephemeral-ephemeral DH, and
also based on an ephemeral-static DH involving the recipi-
1860    29th USENIX Security Symposium
USENIX Association
ent’s static key pair. However, the binding between the re-
cipient’s alleged ephemeral public and the recipient’s static
public key has only been veriﬁed based on DHs involving
both those public keys and the sender’s static private key.
Thus, if the sender’s static private key was previously compro-
mised, the recipient’s alleged ephemeral public key may have
been forged by an active attacker. In this case, the attacker
could later compromise the intended recipient’s static private
key to decrypt the payload (this is a variant of a "KCI" attack
enabling a "weak forward secrecy" attack).’
This informal description discusses how the encryption
key has been derived and describes a possible attack that an
attacker could use. However, it does not explore any other
circumstances in which the encryption key might be compro-
mised or how this property relates to more traditional notions
of message conﬁdentiality and authentication.
Example 3. Source Property 2, quoted from [24]: ‘Sender
authentication resistant to key-compromise imperson-
ation (KCI). The sender authentication is based on an
ephemeral-static DH ("es" or "se") between the sender’s static
key pair and the recipient’s ephemeral key pair. Assuming
the corresponding private keys are secure, this authentication
cannot be forged.’
The above deﬁnition is clearer than Example 2 insofar as
it explicitly refers to a well known and established deﬁnition.
However there is still considerable ambiguity. For example,
is this authentication injective [22] (preventing replays)?
2.2 The Tamarin Prover
The Tamarin prover [25] (Tamarin for short) is a protocol
veriﬁcation tool for the symbolic model. Tamarin supports
stateful protocols, a high level of automation, and equivalence
properties [5], which are necessary to model privacy proper-
ties such as anonymity. Tamarin has previously been applied
to numerous, substantial, real-world protocols with complex
state machines, numerous messages, and complex security
properties. Examples include TLS 1.3 [6,10], mobile commu-
nication protocols [4, 9], and instant messaging protocols [8].
In the symbolic model, messages are described by terms.
For example, enc(m,k) represents the message m encrypted
using the key k. The algebraic properties of cryptographic
functions are speciﬁed by equations over terms. For example,
dec(enc(m,k),k) = m speciﬁes the expected semantics for
symmetric encryption: decryption using the encryption
key yields the plaintext. As is common in the symbolic
model, cryptographic messages only satisfy those properties
explicitly speciﬁed algebraically. This yields the so-called
black-box cryptography assumption: one cannot exploit
potential weaknesses in cryptographic primitives beyond
those explicitly speciﬁed. Still, a wide range of attacks,
including logical attacks and attacks based on an explicit
algebraic model, are covered.
The protocol itself is described using multi-set rewrite
rules. These rules manipulate multisets of facts, which model
the current system state with terms as arguments. These
rules yield a labeled transition system describing the possible
protocol executions (see [3, 25] for details on syntax and
semantics). Tamarin combines the protocol semantics with
a Dolev-Yao [12] style adversary. This adversary controls
the entire network and can thereby intercept, delete, modify,
delay, inject, and build new messages.
In Tamarin, security properties are speciﬁed in two ways.
First, trace properties, such as secrecy or variants of authen-
tication, are speciﬁed using formulas in a ﬁrst-order logic
with timepoints. For each speciﬁed property, Tamarin checks
that the property holds for all possible protocol executions,
and all possible adversary behaviors. To achieve this, Tamarin
(symbolically) explores all possible executions in a backward
manner, starting from attack states, which are counterexam-
ples to the security properties, and trying to reach legitimate
starting states. The formulas constituting the speciﬁcation are
called lemmas and represent claims to be analyzed.
Equivalence properties, such as anonymity, are expressed
by requiring that two instances of the protocol cannot be
distinguished by the adversary. Such properties are speciﬁed
using diff -terms (which take two arguments), essentially deﬁn-
ing two different instances of the protocol that only differ in
some terms. Tamarin then checks observational equivalence
(see [5]). That is, it compares the two resulting systems and
checks that the adversary cannot distinguish them for any
protocol execution and any adversarial behavior.
In fully automatic mode, Tamarin either returns a proof
that the property holds, or a counterexample, representing an
attack, if the property is violated, or it may fail to terminate
as the underlying problem is undecidable. Tamarin can also
be used in interactive mode, where users can guide the proof
search. Moreover users can supply heuristics called oracles
to guide the proof search in a sound way. Given the number
of handshakes and properties to check, we require fully
automatic analyses. We thus rely on handshake-independent
oracles in our analyses as they allow us to tame the protocol’s
complexity, as explained in Section 4.1.3.
We also describe the properties of the underlying crypto-
graphic primitives used in Noise and how they are composed.
As mentioned previously, Noise uses four distinct crypto-
graphic primitives, which we model in Tamarin:
• Difﬁe-Hellman (DH) Group: We model both the case
of a prime order group and Curve25519, a primitive rec-
ommended by the speciﬁcation which is of non-prime
order and contains a small subgroup, following [11]. Our
Tamarin model also faithfully captures the symbolic be-
havior of the exponentiation operator, including the exis-
tence of multiplicative inverses, associativity, commuta-
tivity, and identity.
• AEAD: We model this as a distinguished function sym-
bol that can either be decrypted (with the correct key
USENIX Association
29th USENIX Security Symposium    1861
and nonce) or veriﬁed (ensuring the authenticity of the
associated data).
• Hash and KDF functions: We model both as distinct func-
tion symbols that each behave as a random oracle.
2.3 Related Work
Our methodology builds on ideas presented in “Know your
enemy” [2], which investigates the systematic integration of
adversary capabilities in symbolic models. In this work, we
improve and extend its approach, for example by leveraging
both static and dynamic analysis and enlarging the set of
adversary capabilities. Further, we apply this methodology on
a much larger scale than in the original paper in terms of the
number of protocols and properties compared.
Previous research [14, 15, 21] has examined the security
of a single Noise protocol handshake (IKpsk2) in the context
of the WireGuard VPN protocol. However, only two previous
works have set out to formally analyze the Noise framework
as a whole. In this section we discuss these works in detail
and summarize the differences in Table 2.
2.3.1 Noise Explorer [20]
Noise Explorer is a tool that automatically generates formal
models for Noise handshakes. The formal models encode the
protocols as well as the secrecy and authentication claims
drawn from the Noise speciﬁcation and can be automatically
veriﬁed using the ProVerif [7] protocol analysis tool.
Noise Explorer presents its analysis results in a human-
readable way by translating the formal security claims that
were (dis)proved to textual descriptions. Further, it can also
be used to automatically generate a reference implementation
for a particular handshake, which is, however, not formally
related to the veriﬁed model, i.e., these implementations are
not proven correct or secure.
Methodology: Noise Explorer’s approach differs substan-
tially from our own. Their analysis begins with informal
security claims in the Noise protocol speciﬁcation which
they manually translate to formal statements. This mapping
between natural language in protocol speciﬁcations and
logical formulas in formal models is subjective and risks
human error. Later, in Section 5.2, we will show how our
methodology avoids these issues by systematically construct-
ing a granular family of threat models from which we can
objectively and automatically recover the correspondence to
the Noise protocol speciﬁcation.
This methodological difference has a practical consequence
as both the Noise protocol speciﬁcation and Noise Explorer
associate each security claim with a level, a natural number,
and interpret it in a monotonic order. However, we show later
in Example 9 that the claims ordering, given by logical impli-
cation on the associated formulas, is in fact non-monotonic
with respect to the levels and consequently, in certain hand-
shakes, an apparently ‘stronger’ security claim can in fact be
weaker than a ‘weaker’ claim.
Participants and Sessions: Noise Explorer only considers
a ﬁxed scenario where an honest initiator interacts with an
honest recipient in the presence of a single malicious party.
In particular, this excludes an honest agent acting as both an
initiator and a recipient, which is common in many real world
deployments of Noise (e.g., P2P settings such as Lightning).
Additionally, Noise Explorer does not support any additional
identities or participants. Hence it does not consider attacks
on authentication which require more than two honest par-
ticipants to perform. In contrast we consider an unbounded
number of participants engaging in an unbounded number of
sessions, including scenarios in which honest participants act
as both an initiator and recipient.
This ﬁxed two party scenario has consequences for models
involving a passive adversary. A passive adversary cannot
emulate dishonest agents, so the models only consider two
ﬁxed, honest agents. As a result, one obtains incorrect results.
For example, Bob, who can only act as a recipient, can obtain
aliveness of Alice, who can only act as an initiator, upon
reception of e from the ﬁrst message of NN. However, in
practice, the property is actually violated as this ephemeral
key could have been sent by any other honest agent.
Security Claims: In the Noise protocol speciﬁcation the
PSK family of handshakes are presented without associated
claims. We consider Perfect Forward Secrecy (PFS) in the
context of the subsequent compromise of (i) a participants’
static keys, (ii) pre-shared keys, or (iii) both static and pre-
shared keys. Noise Explorer only evaluates the third scenario.