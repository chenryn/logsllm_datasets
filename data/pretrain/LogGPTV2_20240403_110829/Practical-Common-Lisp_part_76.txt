的MP3客户端。?playlist-id的实现如下所示：
不同的播放列表，因此这一选择在应用上施加的实际约束是每个客户端IP地址上只能有一个连接
客户端还是一个Web浏览器。尽管如此，你将在Web接口中提供一种方式来从浏览器中选择一个
址作为标识符。通过这种方式，可以为一个请求找出正确的播放列表，而不论请求是来自MP3
客户端，并且浏览Web接口的用户就来自运行着MP3客户端的那台机器：你将使用客户机的IP地
你决定怎样识别一个客户端，都需要一些方式来让Web接口的用户与正确的播放列表关联在一起。
多选项，每个分别对应于不同的用户接口实现。你可以从请求对象中取得任何想要的信息，但无论
为了创建可被Shoutcast服务器用作歌曲源的播放列表，需要在current-song、still-
360
① 这种方法也假设了每个客户机都有独立的IP地址。这个假设在所有用户都在同一个LAN下是成立的，但如果用户
目前你可以采用一个“勉强可用”的方法，这要求每台连接到服务器的机器上只有一个MP3
剩下的难点是确保current-song槽在正确的时间得到更新。当前的歌曲有几种改变的方
(defmethod still-current-p (song (playlist playlist))
实现still-current-p也很简单，假设你确保只有在当前的歌曲实际发生了改变时
((astieid qstiAeid)) punoie: buos-quarano pouaaugap)
函数request-socket是AllegroServe的一部分，而remote-host和ipaddr-to-dotted都
(defun playlist-id (request)
接下来的难点是如何实现playlist-id，即一个从请求对象中解出标识符的函数。你有很
最好对网络有足够的理解从而找出最适合自己的方法。
是来自一个做网络地址转换的防火墙之后的话就不成立了，如果你想要将这个应用部署在更广的因特网上的话，
(with-playlist-locked (playlist)
(with-playlist-locked
(ipaddr-to-dotted (remote-host (request-socket request))))
(eql song (current-song playlist))))
playlist))
第 29章
(when user-agent (setf (user-agent playlist) user-agent))))
实践：MP3 浏览器
(playlist)
www.TopSage.com
(call-next-method)})
---
## Page 378
参数。否则，它会将current-song设置成代表当前行的一个song对象。
个以*silence-mp3*所命名的文件作为文件并带有适当标题的歌曲：
其文件为MP3静音"的特殊歌曲上，并且其标题要能够解释为何没有歌曲在播放。下面的一些代码
为空或是当repeat设置成:none时最后一首歌已经播完了，你需要将current-song设定在一个
你不希望current-song被设置成NIL。相反，当一个播放列表没有歌曲可播时，即当songs-table
是update-current-if-necessary和它的助手函数:
同步的播放列表操作之后再调用该函数，你就可以确保current-song总是被正确设置了。下面
槽对应的当前应播放文件时，它会更新current-song。然后，如果进行了可能导致这两个槽不
数update-current-if-necessary，在current-song中的song对象不再匹配current-idx
①不幸的是，由于MP3格式的授权问题，我不太清楚在没有向Fraunhofer IIS付费的情况下提供一个这样的MP3文件
reset-current-song会在current-idx没有指向songs-table的任何一行时使用这些
(defparameter *end-of-playlist-song* (make-silent-song "At end of playlist."))
(defparameter *silence-mp3* ...)
函数reset-current-song引l人了又一个亮点：由于想要播放列表对客户端提供无穷的MP3流，
你不需要为这些函数加锁，因为它们将只在那些预先加锁过播放列表的函数中调用。
(defun update-current-if-necessary (playlist)
(defun make-silent-song (title &optional (file *silence-mp3*))
(defun file-for-current-idx (playlist)
与其试图编写特定于上述每种情形的代码来检测是否更新current-song，不如定义一个函
还可以查找JohnCage的一个长度为4'33"的MP3文件。
个Squeezebox，即Slimp3的新的无线版本，然后作为随机软件的一部分，你将得到silentpacket.mp3。或者你
是否合法。我的这个MP3来自SlimDevices的Slimp3的配套软件的-一部分。你可以通过访间http://svn.slimdevices.
(defun at-end-p (playlist)
com/*checkout*/trunk/server/HTML/EN/html/silentpacket.mp37rev=2。从他们的Subversion库中获得它。或者购买一
(>= (current-idx playlist) (table-size (songs-table playlist))))
(if (at-end-p playlist)
(make-instance
(unless (equal 
:id3-size (if (id3-p file) (size (read-id3 file)) 0)))
:title title
:file file
song
(column-value (nth-row (current-idx playlist) (songs-table playlist)) :file)))
nil
(reset-current-song playlist)))
(file-for-current-idx playlist))
www.TopSage.com
29.2作为歌曲源的播放列表
 361
---
## Page 379
况，当你已经播放完一个播放列表中的所有歌曲且current-song为*end-of-playlist-song
曲，那么这个零索引将在范围内，因此你应该将current-song改变成新添加的歌曲。同样的情
是零，而current-song将是*empty-playlist-song*。如果你向空的播放列表里添加一首歌
current-song和current-idx同步。例如，无论何时播放列表为空，它的current-idx都将
因为你将要看到，锁将被调用它们的Web接口函数获取。
和乱序以及设置重复模式。和上一节的那些助手函数一样，你不需要在这些函数中担心锁定问题,
29.3
由Shoutcast服务器代码调用的，而后者并没有做任何锁定。
它就可以指向你添加到播放列表的下一首歌。这个函数必须在操作播放列表前锁定它，因为它是
idx已在播放列表的结尾时，你不需要改变current-idx，因为你希望它保持在当前值上，这样
-ss----x-
播放列表代码的其余部分被Web接口用来操作playlist对象，包括添加和删除歌曲、排序
362
 添加和删除基本上是一个songs-table的管理问题。你唯一需要做的额外工作是保持
(defmethod maybe-move-to-next-song (song (playlist playlist))
现在，你可以实现maybe-move-next-song上的方法了，基于播放列表的重复模式将
(defun empty-p (playlist)
(defun row->song (song-db-entry)
(defun reset-current-song (playlist)
(zerop (table-size (songs-table playlist))))
操作播放列表
(with-playlist-locked (playlist)
(with-column-values (file song artist album id3-size) song-db-entry
(setf
(cond
(current-song playlist)
(when (still
(make-instance
:id3-size id3-size))}
:file file
song
(((((((ased aqe-sbuos) (asteId xpt-aua1no) mo1-uau) buos<-mo1) 2)
(sbuos-as1<ea-dua* (aste[d d-dua) )
第29章实践：MP3浏览器
(at-end-p playlist)
(ecase (repeat playlist)
(:al1
(:none
(:song) ; nothing changes
(format nil "~a by ^a from ^a" song artist album)
(setf
(incf (current-idx
(current-idx playlist)
www.TopSage.com
*end-of-playlist-song*)
(table-size
st)
(current-idx playlist))
playlist)))
(songs-table playlist)/))/))
---
## Page 380
首歌，那么current-song将保持不变。
if-necessary将会处理current-song的更新。而如果current-idx改变了却仍然指向了同一
子时，你可以将current-idx重设到零。在更新了current-idx之后，调用update-current-
需要查看含有当前歌曲的行并重设current-idx。如果当前歌曲本身被删除了，在没有其他法
歌曲被删除，在删除以后它将处在表中的一个不同的位置上。因此在delete-rows调用之后，
非刚刚删除的歌曲之一，那么你希望它仍旧是当前歌曲。但如果在songs-table中在它之前的
于matching的：where子句。
delete-song函数，接受一些键值对，用来构造一个你可以传给delete-rows数据库函数的基
特定歌曲还是一个特定风格、特定艺术家或来自特定专辑的所有歌曲。因此，你可以编写一个
它和歌曲数据库上的in查询一起使用。因此，add-songs看起来像下面这样：
所有歌曲。这样，为了添加正确的歌曲，你需要首先构造一个含有你想要的值的表对象，然后将
是给你一个列的名字和一个值的列表，然后让你从主数据库中添加给定列具有值列表中某个值的
里讨论的一些原因，Web接口代码无法只是给你一些简单的判定规则来从数据库中选择歌曲，而
时，添加一首歌会导致current-song被重置。所有这些实际上意味着，你需要在适当时机调用
当你删除歌曲时会出现的另一个复杂之处是current-idx可能需要改变。假设当前歌曲并
Web接口沟通所需添加歌曲的方式，使播放列表添加歌曲的过程有点儿复杂。我由于下一节
你还可以编写函数来完全清空播放列表，它使用delete-all-rows并且不再需要查找当前歌
(defun position-of-current (playlist)
(defun delete-songs (playlist &rest names-and-values)
删除歌曲会简单一些。你只需从songs-table中删除匹配特定条件的歌曲—
(let*((table(songs-tableplaylist))
(update-current-if-necessary playlist))
(delete-rows
(update-current-if-necessary playlist))
(let（(table（make-instance
:from(songs-table playlist)
(do-rows（rowtable)
(do-rows (row(select:from *mp3s*:where（incolumn-name table)))
(dolist (vvalues)（insert-row （list column-name v)table))
(incfpos))))
(when (funcallmatcher row)
(insert-row row (songs-tableplaylist))))
(return-from position-of-current pos))
((osod）
(matcher (matching table :file (file (current-song playlist))))
:schema （extract-schema （list column-name)(schema *mp3s*)))))
'table
(or
www.TopSage.com
O
—无论是一个
---
## Page 381
songs-table上调用shuffle-table。按专辑乱序稍微复杂一些，但也没什么大不了的。
playlist时，播放列表将根据最近一次的排序状态进行排序。按歌曲乱序比较简单一—只需在
式工作，只是它不需要改变ordering的值。这样，当使用:none的shuffle来调用shuffle-
的值传递一个列的列表来进行排序。
necessary，因为你知道当前歌曲仍然在表中。
来重设current-idx到当前歌曲的新位置。不过，这时你不需要调用update-current-if-
而将shuffle设置成:none。和delete-songs里的情况一样，你需要使用position-of-current
数，就需要在调用实际完成排序工作的order-playlist之前，将ordering设置成你想要的顺序,
以音轨的顺序列出。这样当用户选择一个新的顺序时，Web接口代码调用的sort-playlist函
整顺序。而当它被设置成:album时，专辑的列表将被随机调整顺序，但每个专辑中的歌曲仍然
那么播放列表将按照ordering槽的值来排序。当shuffle是：song时，播放列表将被随机地调
shuffle槽表明播放列表是否应当被乱序，以及如果是的话该怎样做。如果它被设置为:none,
song设置到empty-playlist-song上。
曲，因为当前歌曲明显也要被删除。对update-current-if-necessary的调用将使得current-
364
当用户选择一个新的乱序模式时，Web接口代码调用的函数shuffle-playlist以类似的方
 在order-playlist中,你可以使用数据库函数sort-rows来实际进行排序,基于ordering
排序和乱序播放列表是彼此相关的操作，因为播放列表总是要么排序的要么乱序的。
(defun order-playlist (playlist)
(defun sort-playlist (playlist ordering)
(defun clear-playlist (playlist)
(defun shuffle-by-song (playlist)
(defun shuffle-playlist (playlist shuffle)
(setf (current-idx playlist) (position-of-current playlist)))
(setf (current-idx playlist) (position-of-current playlist)))
(update-current-if-necessary playlist))
(setf (current-idx playlist)
(delete-all-rows (songs-table playlist))
(case shuffle
order-playlist playlist)
(case (ordering playlist)
:album
:none
第29章实践：MP3浏览器
song
(:song
(:album
(order-playlist playlist))
‘(:song)))))
'(:album :track))
:genre
:album :track))
www.TopSage.com
:none)
0}
---