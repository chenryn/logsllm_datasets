### 使用AFL Fuzz进行模糊测试

#### 1. 基本用法
要启动AFL Fuzz，可以使用以下命令：
```sh
$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program [params]
```
或者使用`@@`替换输入文件，Fuzzer会将其替换为实际执行的文件：
```sh
$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@
```
如果一切正常，Fuzzer将开始工作。首先，它会对输入队列中的文件进行预处理；然后，显示关于所使用的语料库的警告信息（例如，较大的文件或过多的输入文件）；最后，进入Fuzz主循环，并显示状态窗口。

#### 2. 使用SCREEN
由于一次Fuzzing过程通常会持续很长时间，为了防止终端意外关闭导致Fuzzing中断，建议在`screen session`中启动每个实例。这样可以方便地连接和断开。

- 启动一个新的screen会话并命名：
  ```sh
  $ screen -S fuzzer1
  ```
- 在screen会话中运行afl-fuzz：
  ```sh
  $ afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@ [params]
  ```
- 断开会话：
  ```sh
  [detached from 6999.fuzzer1]
  ```
- 重新连接会话：
  ```sh
  $ screen -r fuzzer1
  ```

#### 3. 黑盒测试
黑盒测试是指对没有源代码的程序进行测试。在这种情况下，需要使用AFL的QEMU模式。启用方式如下：

1. 安装依赖项：
   ```sh
   $ apt-get install libini-config-dev libtool-bin automake bison libglib2.0-dev -y
   ```
2. 编译QEMU支持：
   ```sh
   $ cd qemu_mode
   $ build_qemu_support.sh
   $ cd .. && make install
   ```
3. 运行AFL Fuzz时添加`-Q`选项：
   ```sh
   $ afl-fuzz -Q -i testcase_dir -o findings_dir /path/to/program @@ [params]
   ```

#### 4. 并行测试
##### (1) 单系统并行测试
如果你有一台多核心的机器，可以通过将一个`afl-fuzz`实例绑定到一个对应的核心上来提升执行速度。查看核心数的方法：
```sh
$ cat /proc/cpuinfo | grep "cpu cores" | uniq
```
通过`-M`参数指定一个主Fuzzer（Master Fuzzer），通过`-S`参数指定多个从Fuzzer（Slave Fuzzer）：
```sh
$ screen afl-fuzz -i testcases/ -o sync_dir/ -M fuzzer1 -- ./program
$ screen afl-fuzz -i testcases/ -o sync_dir/ -S fuzzer2 -- ./program
$ screen afl-fuzz -i testcases/ -o sync_dir/ -S fuzzer3 -- ./program
```
主Fuzzer进行确定性测试，而从Fuzzer进行完全随机的变异。所有Fuzzer将相互协作，在找到新的代码路径时，相互传递新的测试用例。

##### (2) 多系统并行测试
多系统并行的基本工作原理类似于单系统并行。你需要一个简单的脚本来完成数据同步。假设现在有两台机器，基本信息如下：

| 主机名    | IP地址       | 实例数 |
|-----------|--------------|--------|
| fuzzer1   | 172.21.5.101 | 2      |
| fuzzerr2  | 172.21.5.102 | 4      |

使用`authorized_keys`方式进行身份验证，并编写同步脚本：
```sh
#!/bin/sh
FUZZ_HOSTS='172.21.5.101 172.21.5.102'
FUZZ_USER=root
SYNC_DIR='/root/syncdir'
SYNC_INTERVAL=$((30 * 60))

if [ "$AFL_ALLOW_TMP" = "" ]; then
  if [ "$PWD" = "/tmp" -o "$PWD" = "/var/tmp" ]; then
    echo "[-] Error: do not use shared /tmp or /var/tmp directories with this script." 1>&2
    exit 1
  fi
fi

rm -rf .sync_tmp 2>/dev/null
mkdir .sync_tmp || exit 1

while :; do
  for host in $FUZZ_HOSTS; do
    echo "[*] Retrieving data from ${host}..."
    ssh -o 'passwordauthentication no' ${FUZZ_USER}@${host} \
      "cd '$SYNC_DIR' && tar -czf - SESSION*" >".sync_tmp/${host}.tgz"
  done

  for dst_host in $FUZZ_HOSTS; do
    echo "[*] Distributing data to ${dst_host}..."
    for src_host in $FUZZ_HOSTS; do
      test "$src_host" = "$dst_host" && continue
      echo "    Sending fuzzer data from ${src_host}..."
      ssh -o 'passwordauthentication no' ${FUZZ_USER}@$dst_host \
        "cd '$SYNC_DIR' && tar -xkzf - &>/dev/null" <".sync_tmp/${src_host}.tgz"
    done
  done

  echo "[+] Done. Sleeping for $SYNC_INTERVAL seconds (Ctrl-C to quit)."
  sleep $SYNC_INTERVAL
done
```

### 认识AFL状态窗口
AFL的状态窗口提供了Fuzzer运行时的各种信息，包括：
1. **Process timing**：Fuzzer运行时长及最近发现的路径、崩溃和挂起的时间。
2. **Overall results**：Fuzzer当前状态的概述。
3. **Cycle progress**：输入队列的进度。
4. **Map coverage**：目标二进制文件中的插桩代码覆盖范围。
5. **Stage progress**：当前执行的文件变异策略、执行次数和速度。
6. **Findings in depth**：找到的执行路径、异常和挂起数量的信息。
7. **Fuzzing strategy yields**：突变策略产生的最新行为和结果。
8. **Path geometry**：找到的执行路径的信息。
9. **CPU load**：CPU利用率。

### 总结
本文介绍了如何开始一次Fuzzing，但这只是基础。AFL的Fuzzing过程是一个死循环，需要人为停止。掌握基本概念如代码覆盖率、元组、覆盖引导等对于深入理解非常重要。后续文章将继续探讨这些内容。

### 参考资料
1. [American Fuzzy Lop](http://lcamtuf.coredump.cx/afl/)
2. [Yet another memory leak in ImageMagick](https://medium.com/@ilja.bv/yet-another-memory-leak-in-imagemagick-or-how-to-exploit-cve-2018-16323-a60f048a1e12)
3. [Vulnerability Discovery Against Apple Safari](https://blog.ret2.io/2018/06/13/pwn2own-2018-vulnerability-discovery/)
4. [Pulling JPEGs out of thin air](https://lcamtuf.blogspot.com/2014/11/pulling-jpegs-out-of-thin-air.html)
5. [parallel_fuzzing.txt](https://github.com/mirrorer/afl/blob/master/docs/parallel_fuzzing.txt)
6. [Fuzzing workflows; a fuzz job from start to finish](https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/)
7. _Open Source Fuzzing Tools_ – ‘Chapter 10 Code Coverage and Fuzzing’
8. _Fuzzing for Software Security Testing and Quality Assurance_ – ’7.2 Using Code Coverage Information’

希望这些信息对你有所帮助！