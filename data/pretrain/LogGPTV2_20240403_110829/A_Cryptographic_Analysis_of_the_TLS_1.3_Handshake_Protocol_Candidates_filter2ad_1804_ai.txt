GKEi;Π into an adversary B1 against Match security. Observe that B1 can simply relay all oracle queries A
16The notion of ﬁnal keys can be formalized in our model through the sequence of special Send(·, continue) queries (without
further message output) at the end of a session run. A similar query can be used to enable the adversary to trigger the ﬁnal
key computation after the last protocol message has been sent (in TLS 1.3: after the client sent ClientFinished).
17In principle, our composition result can cover not only ﬁnal, but any unused stage-i key. We refrain from capturing this
more complex notion of non-usage of keys here.
33
makes for the KE subgame to its own oracles (note that A is not given access to a Test query in GKEi;Π).
Furthermore, B1 simulates the Π subgame on its own according to the GKEi;Π deﬁnition. Providing a
correct simulation for A, algorithm B1 always wins if A makes two partnered sessions output diﬀerent keys
in stage i; hence, we can from this point on assume that partnered sessions agree on their derived keys.
On a high level, we now ﬁrst replace the derived session keys, one at a time, by a randomly chosen
key from D and show that an adversary able to distinguish each of these replacements can be turned
into an eﬃcient Multi-Stage adversary against KE. After all keys have been replaced by random ones, the
subgame GΠ is then independent of the key exchange protocol (as the now randomly chosen ﬁnal stage-i
keys are not used within the key exchange) and hence, breaking the composed game immediately translates
to breaking the symmetric-key protocol game.
The ﬁrst part of the proof is a hybrid argument. Let GλKEi;Π denote a game that behaves like GKEi;Π
(with partnered sessions agreeing on the derived key), except that for the ﬁrst λ accepting sessions in
stage i where the key is registered in the symmetric-key protocol subgame (i.e., where the communication
partner is either authenticated or an honest partnered session exists), instead of the real session key Ki a
randomly chosen K0
KEi;Π = GKEi;Π while GnsKEi;Π denotes the game
where all keys used in the Π subgame are chosen at random from D. Applying Lemma 7.3 below, we have
that both games are indistinguishable due to the Multi-Stage security of KE and it holds that
i ←$ D is registered in GΠ. Obviously, G0
AdvG0
KEi;Π
KEi;Π,A ≤ AdvGnsKEi;Π
KEi;Π,A + ns · AdvMulti-Stage,D
KE,B2
.
The main diﬀerence to the previous multi-stage composition [FG14] is that not only mutually authenticated
session keys derived in the key exchange are registered in the symmetric-key protocol, but any session key
for which both communication partners are either authenticated or honestly contributing. As we will see
in the proof of Lemma 7.3, these cases match exactly the conditions for Test queries to be permitted in
the Multi-Stage game which hence still allows us to replace all keys used in the symmetric-key protocol
with random ones in the hybrid.
As for the previous results, in GnsKEi;Π only randomly chosen keys, independent of KE, are used in the
symmetric-key protocol subgame GΠ which allows us to bound the advantage of A in GnsKEi;Π by the ad-
vantage of an adversary B3 directly breaking the protocol security game GΠ. We restate the corresponding
Lemma 7.4 below without proof, as it is identically given in [FG14].
Finally, the initial assumption that Π is secure w.r.t. GΠ then allows us to conclude that KE; Π is secure
w.r.t. GKEi;Π.
We ﬁrst establish the hybrid argument, closely following the respective proof by Fischlin and Gün-
ther [FG14].
Lemma 7.3. Let KE be a key-independent stage-j-forward-secret Multi-Stage-secure key exchange protocol
with concurrent authentication properties AUTH and key distribution D that allows for an eﬃcient multi-
stage session matching and where partnered sessions in stage i always agree on the derived session key. Let
Π be a secure symmetric-key protocol w.r.t. some game GΠ with a key generation algorithm that outputs
keys with distribution D. Then for i ≥ j, all λ = 1, . . . , ns and any eﬃcient adversary A there exists an
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) ≤ AdvMulti-Stage,D
KE,B
,
eﬃcient algorithm B such that(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)AdvGλ−1
KEi;Π
KEi;Π,A − AdvGλKEi;Π
KEi;Π,A
where ns is the maximum number of sessions in the key exchange game.
We provide B with λ as auxiliary input for simplicity but note that letting B pick λ at random in [1, ns]
suﬃces to prove the hybrid argument.
34
Proof of Lemma 7.3. The task is to construct an algorithm B given λ and using the adversary A against
GKEi;Π such that, if A is able to distinguish (by a a non-negligible advantage diﬀerence) between Gλ−1
KEi;Π
and GλKEi;Π, then B has non-negligible advantage in G
In order to simulate GKEi;Π for A, algorithm B basically forwards all KE-related queries to its Multi-Stage
game as described below while answering queries to the GΠ subgame on its own (using the established
stage-i keys from the key exchange). For administrative purposes, B keeps two mappings. The ﬁrst one,
SDATA: LABELS → {initiator, responder} × {unauth, unilateral, mutual} × [D]i−1, stores the role, the i-th
stage’s authentication level, and the session keys for all stages j  λ, then issue a Reveal(label, i) query and store the resulting value in SKEY(label).
Note that B ﬁrst checking for partnered sessions in stage i ensures that it, if at all, only tests the ﬁrst
session accepting a key (avoiding the according ‘lost’-ﬂag penalty in the Test query) and never both
tests and reveals a key in two partnered sessions (satisfying the ﬁnalize condition of the Multi-Stage
35
deﬁnition). Moreover, as the compositional game as well as B only register session keys for which each of
the communication partners in the key exchange is either authenticated or contributed honestly, we never
test a session with an unauthenticated peer and no honest contributive partnered (satisfying the according
Multi-Stage,D
conditions in the Test query). Therefore, B will never cause the ‘lost’ ﬂag to be set in its G
KE,B
game.
When A terminates, B stops as well and outputs 1 if A has won in the composed game (i.e., in the GΠ
subgame that B simulates on its own) and 0 otherwise. That way, if the Test query made by B returns
the real session key, B perfectly simulates Gλ−1
KEi;Π for A, whereas, if a random key is returned, B perfectly
simulates GλKEi;Π. Since B never causes lost = 1 in its game we have that if btest = 0 in G
, then
B thus outputs the wrong bit with probability AdvGλKEi;Π
KEi;Π,A while, if btest = 1, B outputs the right bit with
probability AdvGλ−1
Multi-Stage,D
KE,B
is
KEi;Π,A. We can hence conclude that the advantage of B in winning the game G
Multi-Stage,D
KE,B
KEi;Π
AdvMulti-Stage,D
KE,B
≥
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)AdvGλ−1
KEi;Π
KEi;Π,A − AdvGλKEi;Π
KEi;Π,A
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) .
We complete the composition proof by restating the lemma from [FG14] that the adversary’s success
probability in the hybrid game GnsKEi;Π, where all session keys in the GΠ subgame are chosen at random
and independent of the key exchange (as the according stage i is ﬁnal), can be bound by the security of
the symmetric-key protocol.
Lemma 7.4. Let KE be a multi-stage key exchange protocol with stage i being ﬁnal. Let Π be a secure
symmetric-key protocol w.r.t. some game GΠ with a key generation algorithm that outputs keys with dis-
tribution D. Let ns be the maximum number of sessions in GKEi;Π. Then for any eﬃcient adversary A
there exists an eﬃcient algorithm C such that
AdvGnsKEi;Π
KEi;Π,A ≤ AdvGΠ
Π,C.
8 Multi-Stage Preshared-Secret Key Exchange Model
In this section we modify the multi-stage key exchange (MSKE) framework from Section 4 to model multi-
stage preshared-secret key exchange (MS-PSKE) security for the purpose of analyzing TLS 1.3 session
resumption, obtaining a model for multi-stage key exchange protocols that use preshared keys as long-
term secrets. TLS 1.3 drafts draft-05 and draft-dh do not conclusively specify preshared key (PSK)
ciphersuites yet, but we expect this model to be readily applicable to those as well.
In MS-PSKE, each protocol participant is identiﬁed by some U ∈ U and holds a set of pairwise pre-
shared secrets pssU,V,k = pssV,U,k (U, V, k indicating the k-th preshared secret between parties U and V )
from a ﬁxed keyspace, associated with a unique (public) preshared-secret identiﬁer psidU,V,k = psidV,U,k
and a ﬂag CorruptedU,V,k. (For example, in TLS session resumption, the preshared-secret identiﬁer is the
session_id value established by the server in a ﬁeld in the ServerHello message in the original hand-
shake, which the client subsequently sends in its ClientHello message during the resumption handshake.)
Compared to our MSKE model, each entry in the session list ListS now contains an additional entry:
• k ∈ N : the index of the preshared secret used in the protocol run between the parties U and V .
8.1 Adversary Model
Like in the MSKE model of Section 4, we consider an adversary that controls the network communication,
allowing delivery, injection, modiﬁcation and dropping of messages. We deﬁne a ﬂag lost (initialized to
36
false) that will be set to true when the adversary makes queries that would trivially break the security
experiment. In the preshared secret case the common key with index k between U and V plays the role of
the long-term keys and can be used to derive sessions keys in multiple (concurrent) executions, capturing
many parallel session resumption steps in TLS. Corruption reveals these keys for (U, V, k) and renders all
derived keys as insecure in the non-forward setting we discuss here.
The adversary interacts with the protocol via the Send, Reveal, and Test queries deﬁned in Section 4.4,
inheriting the key (in-)dependence treatment but only treating the non–forward-secret setting; our model
can easily be extended to the forward-secret setting. The NewSession and Corrupt queries are modiﬁed
slightly. The new query NewSecret allows the adversary to establish (new) preshared secrets between two
parties.
• NewSecret(U, V ): Creates a preshared secret sampled uniformly at random from the preshared secret
space and stores it as pssU,V,k = pssV,U,k where k is the next unused index for U and V . Also
creates a unique new preshared secret identiﬁer psidU,V,k = psidV,U,k and returns psidU,V,k. Initializes
CorruptedU,V,k and CorruptedV,U,k as fresh.
• NewSession(U, V, k, role, auth): Creates a new session for party U with role role and authentica-
tion auth having V as intended partner and key index k (both V and k being potentially unspeciﬁed).
A party may learn and set unspeciﬁed values during execution.
The challenger generates a (unique) new label label and adds the entry (label, U, V, k, role, auth) to
ListS.
• Corrupt(U, V, k): If there exists a session label with parties (U, V ) or (V, U) and key identiﬁer k and
some stage i such that label.testedi = true, then return ⊥. Otherwise, provide the adversary with
pssU,V,k and set CorruptedU,V,k and CorruptedV,U,k to revealed; in this case no further queries are
allowed to sessions using pssU,V,k = pssV,U,k.
8.2 Security of Preshared Key Exchange Protocols
We adapt the notions for matching and multi-stage key secrecy to the preshared secret setting, essentially
replacing long-term secret compromise with preshared secret compromise.
8.2.1 Match Security
As previously, Match security for preshared-secret key exchange protocols ensures that session identiﬁers
eﬀectively match the partnered sessions which must share the same view on their interaction. Note that
the following conditions for Match security are identical to Match security conditions for MSKE models
with the exception of condition 4:
1. sessions with the same session identiﬁer for some stage hold the same key at that stage,
2. sessions with the same session identiﬁer for some stage agree on that stage’s authentication level,
3. sessions with the same session identiﬁer for some stage share the same contributive identiﬁer at that
4. sessions are partnered with the intended (authenticated) participant, and for mutual authentication
stage,