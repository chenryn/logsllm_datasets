### Discovering and Interacting with RPC Servers

#### Querying the RPC Endpoint Mapper
One effective method to discover interesting RPC servers is by querying the RPC Endpoint Mapper, which can be done locally or on a remote system. Microsoft provides a test utility called `PortQry` for this purpose, available both as a command-line tool and a GUI version. To use `PortQry`, you can execute the following command:

```sh
C:\PortQryV2\PortQry.exe -n <target_ip> -e 135
```

This tool will provide information about remote RPC interfaces known to the Endpoint Mapper. Note that well-known endpoints do not need to inform the Endpoint Mapper about their interfaces.

#### Directly Querying the Endpoint Manager
Another approach is to query the Endpoint Manager directly using the `RpcMgmtEpEltInqBegin` and `RpcMgmtEpEltInqNext` functions. A sample implementation of this method, named `RPCDump`, was included in Chris McNab’s book "Network Security Assessment" (O’Reilly). The original C code, credited to Todd Sabin, is available [here](https://github.com/csandker/RPCDump).

I have ported this tool to VC++ and made some usability improvements. My fork is available at [https://github.com/csandker/RPCDump](https://github.com/csandker/RPCDump). This tool lists the interfaces of the discovered RPC endpoints along with additional information. For more details, refer to the Windows API documentation, particularly the `RpcMgmtInqStats` function, which retrieves the statistics referenced in the Remarks section.

Remember, only the RPC interfaces registered with the target's Endpoint Mapper are listed.

#### Finding RPC Clients
Discovering clients that connect to local or remote RPC servers can also be valuable. There is no central authority that tracks currently running RPC clients, so you have two main options:

1. **Finding Executables/Processes Using Client RPC APIs:**
   You can identify local executables that import client RPC APIs. One useful API to look for is `RpcStringBindingCompose`. Here is a PowerShell script to find such executables:

   ```powershell
   Get-ChildItem -Path "C:\Windows\System32\" -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue | % {
       $out = $(C:\"Program Files (x86)"\"Microsoft Visual Studio 14.0"\VC\bin\dumpbin.exe /IMPORTS:rpcrt4.dll $_.VersionInfo.FileName)
       If ($out -like "*RpcStringBindingCompose*") {
           Write-Host "[+] Exe creates RPC Binding (potential RPC Client) : $($_.VersionInfo.FileName)"
           Write-Output "[+] $($_.VersionInfo.FileName)`n`n $($out|%{"$_`n"})" | Out-File -FilePath EXEs_RpcClients.txt -Append
       }
   }
   ```

2. **Capturing Clients in Action:**
   You can also spot RPC clients by inspecting network traffic. Wireshark, for example, has a 'DCERPC' filter that can help identify connections. A bind request is one of the key indicators to look for. In the captured packets, you might see a client attempting to bind to a server interface with a specific UUID, such as `d6b1ad2b-b550-4729-b6c2-1651f58480c3`.

#### Unauthorized Access
Once you have identified an RPC server with interesting functionality, check if you can access it without authorization. You can either implement your own client based on my sample implementation or refer to the Access Matrix to see if your client can connect to the server.

If the server sets authentication information using `RpcServerRegisterAuthInfo` with its SPN and a specified Service Provider, note that an authenticated server binding does not enforce the client to use an authenticated binding. In other words, just because the server sets authentication information does not mean the client needs to connect through an authenticated binding. Additionally, client calls with invalid credentials will not be dispatched by the runtime library (rpcrt4.dll), but calls with no credentials will be dispatched.

#### What to Do Next
Once connected to a server, you can call interface functions. However, you need to identify the function names and parameters, which may require reverse engineering the target server. If you are dealing with a COM server (which uses RPC under the hood), the server might come with a Type Library (.tlb) that you can use to look up interface functions.

For a practical start, I recommend using my sample RPC client and server code. Compile it and begin your reverse engineering journey with code you know. For instance, my sample interface includes an “Output” function defined in the IDL file, which starts with the print statement `printf("[~] Client Message: %s\n", pszOutput);`. You can search for the substring `[~] Client Message` to locate this particular interface function.

#### Client Impersonation
Client impersonation offers an interesting attack surface. The steps for impersonating a client are as follows:

1. **You need a RPC client connecting to your server.**
2. **The client must use an authenticated binding.**
3. **The client must not set the Impersonation Level below SecurityImpersonation.**

The process of impersonation involves:

1. Calling `RpcImpersonateClient` from within your server interface function.
2. If the call succeeds, the server’s thread context changes to the client’s security context. You can then call `GetCurrentThread` and `OpenThreadToken` to receive the client’s Impersonation token.
3. Use `DuplicateTokenEx` to turn the Impersonation token into a primary token.
4. Call `RpcRevertToSelfEx` to return to the original server thread context.
5. Finally, call `CreateProcessWithTokenW` to create a new process with the client’s token.

If the client does not authenticate its binding, the call to `RpcImpersonateClient` will result in Error 1764 (RPC_S_BINDING_HAS_NO_AUTH). Finding a suitable client that connects to your server can be challenging and depends on the protocol sequence used by the client.

#### Server Non-Impersonation
A common oversight is when a server does not check the return status of `RpcImpersonateClient` before executing further actions. This can lead to privilege escalation attacks if the impersonation fails. The steps for this attack scenario are:

1. **Find a server that impersonates its clients and does not carefully check the return status of `RpcImpersonateClient`.**
2. **Ensure the action taken by the server after an impersonation attempt is exploitable from your client’s perspective.**
3. **Force the impersonation attempt to fail.**

You can force a failed impersonation attempt by connecting from an unauthenticated binding or by setting the Impersonation Level of the QOS structure to `SecurityAnonymous`.

#### Network-Based Attacks
RPC can be used for remote networking communication, making it a target for network-based attacks. If you are using RPC over the wire and want your binding to be authenticated, you need a network protocol that supports authentication. The `RpcServerRegisterAuthInfo` function allows you to specify the authentication service, such as Kerberos (`RPC_C_AUTHN_GSS_KERBEROS`) or NTLM (`RPC_C_AUTHN_WINNT`).

If you intercept an NTLM connection, you can:

1. **Grab the NTLM(v2) challenge response hash off the wire and brute-force the user’s password.**
2. **Intercept and relay the NTLM connection to gain access to another system.**

For more details on these topics, refer to the resources provided in the references section.

#### Conclusion
This post covers various aspects of interacting with RPC servers, including discovering them, finding clients, unauthorized access, and impersonation. For further reading, refer to the following resources:

- **Microsoft’s Documentation of RPC:** [https://docs.microsoft.com/en-us/windows/win32/rpc/overviews](https://docs.microsoft.com/en-us/windows/win32/rpc/overviews)
- **Jonathan Johnson’s Review of RPC:** [https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html](https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html)
- **Adam Chester’s Review of RPC:** [https://blog.xpnsec.com/analysing-rpc-with-ghidra-neo4j/](https://blog.xpnsec.com/analysing-rpc-with-ghidra-neo4j/)
- **A Code Project on How to Start Programming with RPC:** [https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17](https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17)

Other related posts:
- **Debugging and Reversing ALPC:** [https://example.com/debugging-and-reversing-alpc](https://example.com/debugging-and-reversing-alpc)
- **Offensive Windows IPC Internals 3: ALPC:** [https://example.com/offensive-windows-ipc-internals-3-alpc](https://example.com/offensive-windows-ipc-internals-3-alpc)
- **Offensive Windows IPC Internals 1: Named Pipes:** [https://example.com/offensive-windows-ipc-internals-1-named-pipes](https://example.com/offensive-windows-ipc-internals-1-named-pipes)