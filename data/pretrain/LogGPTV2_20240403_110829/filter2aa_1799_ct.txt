1.
Hives can be loaded only underneath HKLM or HKU, so open Regedit, select HKLM, 
and choose Load Hive from the Regedit File menu.
2.
Navigate to the %SystemRoot%\System32\Config\RegBack directory in the Load Hive
dialog box, select System, and open it. Some newer systems may not have any file in 
the RegBack folder. In that case, you can try the same experiment by opening the ELAM 
hive located in the Config folder. When prompted, type Test as the name of the key 
under which it will load.
3.
Open the newly created HKLM\Test key and explore the contents of the hive.
4.
Open HKLM\SYSTEM\CurrentControlSet\Control\Hivelist and locate the entry 
\Registry\Machine\Test, which demonstrates how the configuration manager lists 
loaded hives in the Hivelist key.
Hivelist key.
Hivelist
5.
Select HKLM\Test and then choose Unload Hive from the Regedit File menu to unload 
the hive.
CHAPTER 10 Management, diagnostics, and tracing
409
memory is backed by the page file and requires the system Commit charge to be increased, reducing 
the total amount of virtual memory available for other purposes.
To overcome this problem, Windows 10 April 2018 Update (RS4) introduced support for the section-
backed registry. At phase 1 of the NT kernel initialization, the Configuration manager startup routine 
initializes multiple components of the Registry: cache, worker threads, transactions, callbacks support, 
and so on. It then creates the Key object type, and, before loading the needed hives, it creates the 
Registry process. The Registry process is a fully-protected (same protection as the SYSTEM process: 
WinSystem level), minimal process, which the configuration manager uses for performing most of the 
I/Os on opened registry hives. At initialization time, the configuration manager maps the preloaded 
hives in the Registry process. The preloaded hives (SYSTEM and ELAM) continue to reside in nonpaged 
memory, though (which is mapped using kernel addresses). Later in the boot process, the Session 
Manager loads the Software hive by invoking the NtInitializeRegistry system call.
A section object backed by the “SOFTWARE” hive file is created: the configuration manager divides 
the file in 2-MB chunks and creates a reserved mapping in the Registry process’s user-mode address 
space for each of them (using the NtMapViewOfSection native API. Reserved mappings are tracked by 
valid VADs, but no actual pages are allocated. See Chapter 5 in Part 1 for further details). Each 2-MB 
view is read-only protected. When the configuration manager wants to read some data from the hive, 
it accesses the view’s pages and produces an access fault, which causes the shared pages to be brought 
into memory by the memory manager. At that time, the system working set charge is increased, but 
not the commit charge (the pages are backed by the hive file itself, and not by the page file).
At initialization time, the configuration manager sets the hard-working set limit to the Registry pro-
cess at 64 MB. This means that in high memory pressure scenarios, it is guaranteed that no more than 
64 MB of working set is consumed by the registry. Every time an application or the system uses the 
APIs to access the registry, the configuration manager attaches to the Registry process address space, 
performs the needed work, and returns the results. The configuration manager doesn’t always need to 
switch address spaces: when the application wants to access a registry key that is already in the cache 
(a Key control block already exists), the configuration manager skips the process attach and returns the 
cached data. The registry process is primarily used for doing I/O on the low-level hive file.
When the system writes or modifies registry keys and values stored in a hive, it performs a copy-
on-write operation (by first changing the memory protection of the 2 MB view to PAGE_WRITECOPY). 
Writing to memory marked as copy-on-write creates new private pages and increases the system 
commit charge. When a registry update is requested, the system immediately writes new entries in 
the hive’s log, but the writing of the actual pages belonging to the primary hive file is deferred. Dirty 
hive’s pages, as for every normal memory page, can be paged out to disk. Those pages are written to 
the primary hive file when the hive is being unloaded or by the Reconciler: one of the configuration 
manager’s lazy writer threads that runs by default once every hour (the time period is configurable 
by setting the HKLM\SYSTEM\ CurrentControlSet\Control\Session Manager\Configuration Manager\
RegistryLazyReconcileInterval registry value).
The Reconciler and the Incremental logging are discussed in the “Incremental logging” section later 
in this chapter.
410 
CHAPTER 10 Management, diagnostics, and tracing
Registry symbolic links
A special type of key known as a registry symbolic link makes it possible for the configuration manager 
to link keys to organize the registry. A symbolic link is a key that redirects the configuration manager to 
another key. Thus, the key HKLM\SAM is a symbolic link to the key at the root of the SAM hive. Symbolic 
links are created by specifying the REG_CREATE_LINK parameter to RegCreateKey or RegCreateKeyEx. 
Internally, the configuration manager will create a REG_LINK value called SymbolicLinkValue, which con-
tains the path to the target key. Because this value is a REG_LINK instead of a REG_SZ, it will not be visible 
with Regedit—it is, however, part of the on-disk registry hive.
EXPERIMENT: Looking at hive handles
The configuration manager opens hives by using the kernel handle table (described in Chapter 8) 
so that it can access hives from any process context. Using the kernel handle table is an efficient 
alternative to approaches that involve using drivers or executive components to access from the 
System process only handles that must be protected from user processes. You can start Process 
Explorer as Administrator to see the hive handles, which will be displayed as being opened in 
the System process. Select the System process, and then select Handles from the Lower Pane 
View menu entry on the View menu. Sort by handle type, and scroll until you see the hive files, 
as shown in the following screen.
EXPERIMENT: Looking at hive handles
The configuration manager opens hives by using the kernel handle table (described in Chapter 8) 
so that it can access hives from any process context. Using the kernel handle table is an efficient 
alternative to approaches that involve using drivers or executive components to access from the 
System process only handles that must be protected from user processes. You can start Process 
Explorer as Administrator to see the hive handles, which will be displayed as being opened in 
the System process. Select the System process, and then select Handles from the Lower Pane 
View menu entry on the View menu. Sort by handle type, and scroll until you see the hive files, 
as shown in the following screen.
CHAPTER 10 Management, diagnostics, and tracing
411
Hive structure
The configuration manager logically divides a hive into allocation units called blocks in much the same 
way that a file system divides a disk into clusters. By definition, the registry block size is 4096 bytes 
(4 KB). When new data expands a hive, the hive always expands in block-granular increments. The first 
block of a hive is the base block.
The base block includes global information about the hive, including a signature—regf—that iden-
tifies the file as a hive, two updated sequence numbers, a time stamp that shows the last time a write 
operation was initiated on the hive, information on registry repair or recovery performed by Winload, 
the hive format version number, a checksum, and the hive file’s internal file name (for example, 
\Device\HarddiskVolume1\WINDOWS\SYSTEM32\CONFIG\SAM). We’ll clarify the significance of the 
two updated sequence numbers and time stamp when we describe how data is written to a hive file.
The hive format version number specifies the data format within the hive. The configuration man-
ager uses hive format version 1.5, which supports large values (values larger than 1 MB are supported) 
and improved searching (instead of caching the first four characters of a name, a hash of the entire 
name is used to reduce collisions). Furthermore, the configuration manager supports differencing hives 
introduced for container support. Differencing hives uses hive format 1.6.
Windows organizes the registry data that a hive stores in containers called cells. A cell can hold a 
key, a value, a security descriptor, a list of subkeys, or a list of key values. A four-byte character tag at 
the beginning of a cell’s data describes the data’s type as a signature. Table 10-6 describes each cell 
data type in detail. A cell’s header is a field that specifies the cell’s size as the 1’s complement (not pres-
ent in the CM_ structures). When a cell joins a hive and the hive must expand to contain the cell, the 
system creates an allocation unit called a bin.
A bin is the size of the new cell rounded up to the next block or page boundary, whichever is higher. 
The system considers any space between the end of the cell and the end of the bin to be free space 
that it can allocate to other cells. Bins also have headers that contain a signature, hbin, and a field that 
records the offset into the hive file of the bin and the bin’s size.
TABLE 10-6 Cell data types
Data Type
Structure Type
Description
Key cell
CM_KEY_NODE
A cell that contains a registry key, also called a key node. A key cell con-
tains a signature (kn for a key, kl for a link node), the time stamp of the 
most recent update to the key, the cell index of the key’s parent key cell, 
the cell index of the subkey-list cell that identifies the key’s subkeys, a cell 
index for the key’s security descriptor cell, a cell index for a string key that 
specifies the class name of the key, and the name of the key (for example, 
CurrentControlSet). It also saves cached information such as the number 
of subkeys under the key, as well as the size of the largest key, value name, 
value data, and class name of the subkeys under this key.
Value cell
CM_KEY_VALUE
A cell that contains information about a key’s value. This cell includes 
a signature (kv), the value’s type (for example, REG_ DWORD or 
REG_BINARY), and the value’s name (for example, Boot-Execute). 
A value cell also contains the cell index of the cell that contains the 
value’s data.
412 
CHAPTER 10 Management, diagnostics, and tracing
Data Type
Structure Type
Description
Big Value cell
CM_BIG_DATA
A cell that represents a registry value bigger than 16 kB. For this kind of 
cell type, the cell content is an array of cell indexes each pointing to a 
16-kB cell, which contains a chunk of the registry value.
Subkey-list cell
CM_KEY_INDEX
A cell composed of a list of cell indexes for key cells that are all subkeys 
of a common parent key.
Value-list cell
CM_KEY_INDEX
A cell composed of a list of cell indexes for value cells that are all values 
of a common parent key.
Security-descriptor cell
CM_KEY_SECURITY
A cell that contains a security descriptor. Security-descriptor cells in-
clude a signature (ks) at the head of the cell and a reference count that 
records the number of key nodes that share the security descriptor. 
Multiple key cells can share security-descriptor cells.
By using bins instead of cells, to track active parts of the registry, Windows minimizes some man-
agement chores. For example, the system usually allocates and deallocates bins less frequently than it 
does cells, which lets the configuration manager manage memory more efficiently. When the configu-
ration manager reads a registry hive into memory, it reads the whole hive, including empty bins, but it 
can choose to discard them later. When the system adds and deletes cells in a hive, the hive can contain 
empty bins interspersed with active bins. This situation is similar to disk fragmentation, which occurs 
when the system creates and deletes files on the disk. When a bin becomes empty, the configuration 
manager joins to the empty bin any adjacent empty bins to form as large a contiguous empty bin as 
possible. The configuration manager also joins adjacent deleted cells to form larger free cells. (The con-
figuration manager shrinks a hive only when bins at the end of the hive become free. You can compact 
the registry by backing it up and restoring it using the Windows RegSaveKey and RegReplaceKey func-
tions, which are used by the Windows Backup utility. Furthermore, the system compacts the bins at hive 
initialization time using the Reorganization algorithm, as described later.)
The links that create the structure of a hive are called cell indexes. A cell index is the offset of a cell 
into the hive file minus the size of the base block. Thus, a cell index is like a pointer from one cell to an-
other cell that the configuration manager interprets relative to the start of a hive. For example, as you 
saw in Table 10-6, a cell that describes a key contains a field specifying the cell index of its parent key; a 
cell index for a subkey specifies the cell that describes the subkeys that are subordinate to the specified 
subkey. A subkey-list cell contains a list of cell indexes that refer to the subkey’s key cells. Therefore, if 
you want to locate, for example, the key cell of subkey A whose parent is key B, you must first locate the 
cell containing key B’s subkey list using the subkey-list cell index in key B’s cell. Then you locate each of 
key B’s subkey cells by using the list of cell indexes in the subkey-list cell. For each subkey cell, you check 
to see whether the subkey’s name, which a key cell stores, matches the one you want to locate—in this 
case, subkey A.
The distinction between cells, bins, and blocks can be confusing, so let’s look at an example of a 
simple registry hive layout to help clarify the differences. The sample registry hive file in Figure 10-3 
contains a base block and two bins. The first bin is empty, and the second bin contains several cells. 
Logically, the hive has only two keys: the root key Root and a subkey of Root, Sub Key. Root has two val-
ues, Val 1 and Val 2. A subkey-list cell locates the root key’s subkey, and a value-list cell locates the root 
key’s values. The free spaces in the second bin are empty cells. Figure 10-3 doesn’t show the security 
cells for the two keys, which would be present in a hive.
CHAPTER 10 Management, diagnostics, and tracing
413
Key cell (key node)
Value cell
Value-list cell
Base block
Empty bin
Root
Vol 1
Sub Vol 2
Key
Subkey-list cell
Free space
Bin 2
Block boundaries
Bin 1
FIGURE 10-3 Internal structure of a registry hive.
To optimize searches for both values and subkeys, the configuration manager sorts subkey-list cells 
alphabetically. The configuration manager can then perform a binary search when it looks for a subkey 
within a list of subkeys. The configuration manager examines the subkey in the middle of the list, and 
if the name of the subkey the configuration manager is looking for alphabetically precedes the name 
of the middle subkey, the configuration manager knows that the subkey is in the first half of the subkey 
list; otherwise, the subkey is in the second half of the subkey list. This splitting process continues until 
the configuration manager locates the subkey or finds no match. Value-list cells aren’t sorted, however, 
so new values are always added to the end of the list.
Cell maps
If hives never grew, the configuration manager could perform all its registry management on the in-
memory version of a hive as if the hive were a file. Given a cell index, the configuration manager could 
calculate the location in memory of a cell simply by adding the cell index, which is a hive file offset, to 
the base of the in-memory hive image. Early in the system boot, this process is exactly what Winload 
does with the SYSTEM hive: Winload reads the entire SYSTEM hive into memory as a read-only hive and 
adds the cell indexes to the base of the in-memory hive image to locate cells. Unfortunately, hives grow 
as they take on new keys and values, which means the system must allocate new reserved views and 
extend the hive file to store the new bins that contain added keys and values. The reserved views that 
keep the registry data in memory aren’t necessarily contiguous.
To deal with noncontiguous memory addresses referencing hive data in memory, the configura-
tion manager adopts a strategy similar to what the Windows memory manager uses to map virtual 
memory addresses to physical memory addresses. While a cell index is only an offset in the hive file, the 
configuration manager employs a two-level scheme, which Figure 10-4 illustrates, when it represents 
the hive using the mapped views in the registry process. The scheme takes as input a cell index (that is, 
a hive file offset) and returns as output both the address in memory of the block the cell index resides 
in and the address in memory of the block the cell resides in. Remember that a bin can contain one or 
more blocks and that hives grow in bins, so Windows always represents a bin with a contiguous region 
of memory. Therefore, all blocks within a bin occur within the same 2-MB hive’s mapped view.
414 
CHAPTER 10 Management, diagnostics, and tracing
Directory index
Table index
Byte offset
Cell index
Target block
Hive’s cell map
directory
Cell map table
32
0
0
1023
Hive cell map directory pointer
0
511
Cell
FIGURE 10-4 Structure of a cell index.
To implement the mapping, the configuration manager divides a cell index logically into fields, in 
the same way that the memory manager divides a virtual address into fields. Windows interprets a 
cell index’s first field as an index into a hive’s cell map directory. The cell map directory contains 1024 
entries, each of which refers to a cell map table that contains 512 map entries. An entry in this cell map 
table is specified by the second field in the cell index. That entry locates the bin and block memory ad-
dresses of the cell. 
In the final step of the translation process, the configuration manager interprets the last field of the 
cell index as an offset into the identified block to precisely locate a cell in memory. When a hive initial-
izes, the configuration manager dynamically creates the mapping tables, designating a map entry for 
each block in the hive, and it adds and deletes tables from the cell directory as the changing size of the 
hive requires.
Hive reorganization
As for real file systems, registry hives suffer fragmentation problems: when cells in the bin are freed 
and it is not possible to coalescence them in a contiguous manner, fragmented little chunks of free 
space are created into various bins. If there is not enough available contiguous space for new cells, new 
bins are appended at the end of the hive file, while the fragmented ones will be rarely repurposed. To 
overcome this problem, starting from Windows 8.1, every time the configuration manager mounts a 
hive file, it checks whether a hive’s reorganization needs to be performed. The configuration manager 
records the time of the last reorganization in the hive’s basic block. If the hive has valid log files, is not 
volatile, and if the time passed after the previous reorganization is greater than seven days, the reor-
ganization operation is started. The reorganization is an operation that has two main goals: shrink the 
hive file and optimize it. It starts by creating a new empty hive that is identical to the original one but 
does not contains any cells in it. The created clone is used to copy the root key of the original hive, with 
all its values (but no subkeys). A complex algorithm analyzes all the child keys: indeed, during its normal 
CHAPTER 10 Management, diagnostics, and tracing
415
activity, the configuration manager records whether a particular key is accessed, and, if so, stores an 
index representing the current runtime phase of the operating system (Boot or normal) in its key cell. 
The reorganization algorithm first copies the keys accessed during the normal execution of the OS, 
then the ones accessed during the boot phase, and finally the keys that have not been accessed at all 
(since the last reorganization). This operation groups all the different keys in contiguous bins of the hive 
file. The copy operation, by definition, produces a nonfragmented hive file (each cell is stored sequentially 
in the bin, and new bin are always appended at the end of the file). Furthermore, the new hive has the 
characteristic to contain hot and cold classes of keys stored in big contiguous chunks. This result renders 
the boot and runtime phase of the operating system much quicker when reading data from the registry. 
The reorganization algorithm resets the access state of all the new copied cells. In this way, the 
system can track the hive’s keys usage by restarting from a neutral state. The new usage statistics will 
be consumed by the next reorganization, which will start after seven days. The configuration manager 
stores the results of a reorganization cycle in the HKLM\SYSTEM\CurrentControlSet\Control\Session 