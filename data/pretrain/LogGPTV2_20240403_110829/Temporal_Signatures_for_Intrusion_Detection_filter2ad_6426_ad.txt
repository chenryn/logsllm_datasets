Sequence
length
6
10
6
10
za
2.33
2.33
2.58
2.58
r
r
r
r
r
r
r
r
Pv
95.4%
82.8%
93.1%
85.2%
Pv
93.9%
85.1%
92.5%
84.6%
Results in Table 9 and Table 10 illustrate  results  that
are similar to those for the synthetic normal databases. All
the  Pv’s  in  Table  9  and  Table  10  show  a  good  quality
database. We can also see that in both normal databases,
using sequence length 6 is better than sequence length 10.
There is an argument in favor of using longer sequence
lengths.    Assume  that  we  measure  r,  the  duration  of
application  code  execution  between  system  calls.
Consider  two  application  code  sequences,  A  and  B,  that
invoke the same sequence of three system calls, C1, C2,
and  C3  followed  in  one  case  by  C4  and  in  the  other  by
C5.  Assume that in Figure 3 the length of the horizontal
line between calls indicates the measured execution time
interval between calls.
A: C1---------C2---------------C3------C4
B: C1---------C2---------------------------------C3--
---------------------C5
Figure 3.
If the sequence length is 4, then the titles for A and B
are different and they are in different clusters.   However,
if the sequence length is 3, then A and B have the same
title: C1-C2-C3.   The time interval between C2 and C3 is
differs  greatly  for  A  and  B.    Therefore,  the  shorter
sequence length results in combining cases that may lead
to higher standard deviation.   And that may cause cases
to  be  excluded  because  of  high  variance.    That  in  turn
lowers Pv.  Hence, this argues in favor of longer sequence
lengths.
In  contrast  there  is  an  argument  in  favor  of  using
shorter sequence lengths with fewer system calls.  There
is less probability that one interval measure will result in a
case being removed for high variance.   This argues that
shorter sequence lengths should yield higher Pv values.
Actual experimental evidence leads us to conclude that
short  sequences  are  better.  So  we  used  only  a  sequence
length  of  6  for  experiment  in  the  intrusion  detection
experiments that are described next.
5.2 Intrusion detection
To determine how effective our  method is in actually
detecting intrusion, we build a prototype IDS of the form
described  in  section  4.  The  monitor  generated  cases  for
the application and compared each case to relevant cluster
summaries.  We  used  the  same  criteria  for  high  variance
cases  to  decide  whether  a  case  matched  or  mismatched
the  cluster  summary  in  the  normal  database.  We  define
Pm  to  be  the  percentage  of  matched  cases.  We  define
anomaly to be detected when Pm << Pv.
We  detected  intrusions  for  the  applications  wu-ftpd,
popper, and delegate and compared the results of the first
two  applications  with  the  University  of  New  Mexico’s
system  call  results.  We  also  performed  an  intrusion
detection  experiment  to  show  that  our  method  is  not
applicable to some applications.
in 
5.2.1  Detecting  intrusion  into  wu-ftpd.    Because  of
improper bounds checking, it is possible for an intruder to
overwrite  static  memory  in  certain  configurations  of  the
wu-ftpd  daemon.  The  overflow  occurs 
the
MAPPING_CHDIR  portion  of  the  source  code  and  is
caused  by  creating  directories  with  carefully  chosen
names  [14].  We  exploited  the  flaw  in  order  to  time
intruding codes which will try to decrypt the password in
the /etc/shadow file.
We performed the comparison between the signatures
of  the  intrusion  behavior  and  those  in  the  real  normal
database  of  wu-ftpd.  That  real  normal  database  was
generated  using  the  following  parameters:  sequence
length: 6; time interval class: r;  Cs = 2.0;  and Tv = 85%.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:42 UTC from IEEE Xplore.  Restrictions apply. 
8
Table 11. Intrusion detection using two real normal
databases for wu-ftpd
Sequence
length
6
6
za
2.33
2.58
Time interval
class
r
r
Database
Pv
93.4%
95.1%
Pm
82.7%
79.2%
Table 11 shows the Pm value for the intrusion behavior
compared to Pv value determined when the database was
constructed.  The  Pm  values  in  Table  11  are  much  lower
than the corresponding database Pv’s. This indicates  that
intrusion is detected
5.2.2 Detecting intrusion into popper.  There is a buffer
overflow  flaw  in  the  popper  [16].  We  performed  a
intrusion  similar  to  the  above  and  constructed  two  real
normal databases for popper using the same parameters as
for wu-ftpd database construction.
Table 12. Intrusion detection using two real normal
databases for popper
Sequence
length
6
6
Time
interval
class
r
r
za
2.33
2.58
Database
Pv
Pm
93.9% 84.7%
92.5% 81.2%
Table 12 shows two Pm values are significantly lower
than  corresponding  Pv  values.  This  indicates  intrusion.
We  also  performed  the  same  intrusion  and  used  the
system call method [12].
Table 13. Intrusion detection fails for
the system call method
Application
Normal
Buffer overflow
popper
0.8%
1.1%
wu-ftpd
1.3%
1.0%
The sequence length used in the experiment is 6. The
percentages  are  the  ratio  of  the  number  of  mismatched
sequences to the total sequences in the normal database of
system  call  sequences.  In  Table  13,  the  percentages  for
normal  behavior  of  the  applications  and  the  behavior
under buffer overflow attack exhibit little difference. We
can  see  that  in  this  case  the  system  call  method  cannot
detect  the  intrusion  effectively.  This  is  because  that  the
intrusion  did  not  launch  any  abnormal  system  calls;  it
generated  mostly  cases 
the  cluster
summaries in the normal databases.
that  matched 
5.2.3  Detecting  intrusion  into  delegate.    delegate  is  a
versatile application-level proxy, including the http proxy.
For our delegate experiment, we built the normal database
by monitoring two days of regular use of the proxy server,
including  the  http  and  ftp,  in  the  Computer  Science
department at the University of Virginia. We employed a
buffer  overflow  attack 
into
delegate. We caused an input buffer of delegate’s strcpy
to  overflow.  Again,  we  inserted  code  that  performed
simple intensive calculation.
to  successfully 
intrude 
Table 14. Intrusion detection using two normal
databases for delegate
Time interval
Database
Sequence
length
6
6
za
2.33
2.58
class
r
r
Pv
91.5%
95.4%
Pm
71.7%
73.3%
Table 14 shows the Pm value for the intrusion behavior
compared to Pv value determined when the database was
constructed.  The  Pm  values  in  Table  14  are  much  lower
than the corresponding database Pv’s. Therefore, intrusion
is  detected.    This  demonstrates  an  example  intrusion  in
which the system calls alone are an insufficient signature
to detect the intrusion, but the temporal signature can be
used to detect intrusion.
5.2.4    Detecting  intrusion  into  htdig.    There  are  also
some  intrusions  our  method  cannot  detect.  When  an
intrusion does not incur any time intensive  computation,
the temporal signature when the intrusion occurs will not
be different – from the point of view of timing –  from the
normal  database.  An  intrusion  on  htdig,  a  small  html
search engine, provides such an example.
The  program  htdig  was  set  up  to  allow  for  file
inclusion from configuration files. Any string surrounded
by the opening single quote character ( ` ) is interpreted as
a  path  to  a  file  for  inclusion.  Htdig  will  also  allow
included files to be specified via the form input method in
the http protocol. Therefore, any file can be specified for
inclusion into a variable by any web user and that file will
thus be shown on the web page. As a result, the client can
read  any  file  on  the  server,  which  can  be  read  by  the
invoker of Apache [15].
Table 15. Comparison without intrusion.
Sequence
length
6
6
za
2.33
2.58
Time interval
Database
class
r
r
Pv
95.0%
90.1%
Pm
93.5%
91.3%
9
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:42 UTC from IEEE Xplore.  Restrictions apply. 
IEEE 
[5]  P.  Helman  and  J.  Bhangoo.  A  statistically  based
system for prioritizing information exploration under
uncertainty. IEEE Transactions on Systems, Man and
Cybernetics, Part A: Systems and Humans, 27(4), pp
449-466, July 1997.
[6]  H.  S.  Javitz  and  A.  Valdes.  The  NIDES  statistical
component:  description  and  justification.  Technical
report,  Computer 
SRI
International, Menlo Park, CA, March 1993.
Science  Laboratory, 
[7]  G.  G.  Helmer,  J.  S.  K.  Wong,  V.  Honavar,  and  L.
Miller.  Intelligent  agents  for  intrusion  detection.  In
Proceedings, 
Technology
Conference,  pp  121-134,  Syracuse,  NY,  September
1998.
Information 
[8]  W.  Lee,  S.  J.  Stolfo,  and  P.  K.  Chan.  Learning
patterns  from  UNIX  process  execution  traces  for
intrusion  detection.  In  AAAI  Workshop  on  AI
Approaches 
and  Risk
Management, pp 50-56. AAAI Press, July 1997.
to  Fraud  Detection 
[9]  C.  Warrender,  S.  Forrest,  and  B.  Pearlmutter.
Detecting Intrusions Using System Calls: Alternative
Data  Models.  In  The  1999  IEEE  Symposium  on
Security and Privacy, May 1999.
[10]  D.  Dasgupta  and  S.  Forrest.  Novelty  detection  in
time series data using ideas from immunology. In The
fifth International Conference on Intelligent Systems,
Reno, Nevada, June 1996.
[11]  S.  Forrest,  A.  S.  Perelson,  L.  Allen,  and  R.
Cherukuri. Self-nonself discrimination in a computer.
In  Proceedings  of  IEEE  Symposium  on  Research  in
Security and Privacy, pp 202-212, Oakland, CA, 16-
18 May 1994.
[12] W. Lee and S. J. Stolfo. Data mining approaches for
intrusion detection. In Proceedings of the 7th USENIX
Security Symposium, 1998.
[13]  John  A.  Rice  Mathematical  statistics  and  data
analysis, Wadsworth & Brooks, 1988.
[14] http://www.cert.org/advisories/CA-1999-13.html
[15]
http://www.securityfocus.com/vdb/bottom.html?vid=1026
[16] 
http://sabre.unix-
security.net/pub/exploits/SendMail/qpush.c%7B-
bufroverflwscript
[17] Y. Lin, A. K. Jones. Application Intrusion Detection
using  Language  Library  Calls. 
  Annual  Computer
Security Applications Conference, December 2001.
Table 16. Comparison with intrusion into the
arbitrary file inclusion vulnerability.
Sequence
length
6
6
za
2.33
2.58
Time interval
Databas
class
r
r
Pm
e Pv
94.8% 92.7%
91.3% 94.3%
The  intrusion  does  not  issue  any  abnormal  system
calls,  so  the  intrusion  cannot  be  detected.  Therefore,  Pm
does not substantially differ from Pv.
6.  Summary and conclusion
We  presented  a  method  for  anomaly 
intrusion
detection  using  the  timing  information  of  the  monitored
application,  a  temporal  signature.  The  idea  comes  from
the observation that after removing various effects of the
environment, most of the time intervals between or within
system calls are uniformly distributed. We can reasonably
assume  the  normal  distribution  of  the  time  intervals,
remove high variance data based on this assumption, and
build a qualified normal database. Then, we can compare
the timing behavior of an application with that database.
Our method is empirical, using adjustable parameters.
There  are  many  factors  affecting  the  timing  behavior  of
an application. The distribution of the time intervals is not
strictly  a  normal  distribution.  In  practice,  adjusting  the
parameters individually  for different applications  will  be
more effective than using fixed parameters.
Our  method  builds  on  the  system  call  method  of
Forrest [12]. Moreover, our method expanded the system
call method so that it  will  work  well  when the observed
application has the same system sequences as those in the
normal  database,  as  shown  experimentally.  We  believe
that our temporal signature method provides an effective
approach to the detecting anomalistic behaviors.
8. References
[1]   S.A. Hofmeyr, S. Forrest, and A.Somayaji. Intrusion
detection using sequences of system calls. Journal of
Computer Security, 6, pp 151-180, 1998.
[2]  A. Somayaji, S. Hofmeyr, and S. Forrest.  Principles
of  a  computer  immune  system.  1997  New  Security
Paradigms Workshop, pp 75-82, ACM, 1998.
[3]  A. Sundaram. An introduction to intrusion Detection.
Magazine,
ACM 
http://www.acm.org/crossroads/xrds2-4/intrus.html.
Crossroads 
[4]  S.  Forrest,  S.  A.  Hofmeyr,  A.  Somayaji,  and  T.  A.
Longstaff.  A  sense  of  self  for  UNIX  processes.  In
Proceedings  of 
the  1996  IEEE  Symposium  on
Security and Privacy, pp 120-128, Los Alamitos, CA,
1996. IEEE Computer Society Press.
Student 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:06:42 UTC from IEEE Xplore.  Restrictions apply. 
10