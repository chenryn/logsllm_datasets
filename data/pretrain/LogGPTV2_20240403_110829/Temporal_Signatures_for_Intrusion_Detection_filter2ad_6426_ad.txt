### Sequence Length and Quality Assessment

| Sequence Length | 6   | 10  | 6   | 10  |
|-----------------|-----|-----|-----|-----|
| za              | 2.33| 2.33| 2.58| 2.58|
| r               | r   | r   | r   | r   |
| Pv              | 95.4%| 82.8%| 93.1%| 85.2%|
| Pv              | 93.9%| 85.1%| 92.5%| 84.6%|

The results in Table 9 and Table 10 are similar to those for the synthetic normal databases. All the Pv values in both tables indicate a high-quality database. Additionally, it is evident that using a sequence length of 6 yields better results than a sequence length of 10 for both normal databases.

### Arguments for Sequence Length

There is a debate about the optimal sequence length. Consider the duration \( r \) of application code execution between system calls. For two sequences, A and B, invoking the same system calls C1, C2, and C3, but followed by different calls (C4 and C5, respectively):

- **Sequence A**: C1---------C2---------------C3------C4
- **Sequence B**: C1---------C2---------------------------------C3-----------------------C5

If the sequence length is 4, A and B will be in different clusters due to their differing final calls. However, if the sequence length is 3, both sequences will have the same title: C1-C2-C3. The time interval between C2 and C3 differs significantly for A and B. Shorter sequence lengths can lead to higher standard deviation, potentially excluding cases due to high variance, thus lowering Pv. This argues for longer sequence lengths.

Conversely, shorter sequence lengths reduce the likelihood of high variance, which may yield higher Pv values. Experimental evidence, however, indicates that short sequences are more effective. Therefore, we used a sequence length of 6 for our intrusion detection experiments.

### Intrusion Detection

#### 5.2 Intrusion Detection

To evaluate the effectiveness of our method in detecting intrusions, we built a prototype IDS as described in Section 4. The monitor generated cases for the application and compared each case to relevant cluster summaries. We used the same criteria for high variance cases to determine whether a case matched or mismatched the cluster summary in the normal database. We define \( Pm \) as the percentage of matched cases. An anomaly is detected when \( Pm \) is significantly lower than \( Pv \).

We detected intrusions for the applications wu-ftpd, popper, and delegate, and compared the results of the first two with the University of New Mexico’s system call results. We also performed an experiment to show that our method is not applicable to some applications.

##### 5.2.1 Detecting Intrusion into wu-ftpd

Due to improper bounds checking, an intruder can overwrite static memory in certain configurations of the wu-ftpd daemon. This overflow occurs in the MAPPING_CHDIR portion of the source code and is caused by creating directories with carefully chosen names [14]. We exploited this flaw to time intruding codes attempting to decrypt the password in the /etc/shadow file.

We compared the signatures of the intrusion behavior with those in the real normal database of wu-ftpd, generated using the following parameters: sequence length: 6; time interval class: r; \( Cs = 2.0 \); and \( Tv = 85\% \).

| Sequence Length | 6   | 6   |
|-----------------|-----|-----|
| za              | 2.33| 2.58|
| Time Interval Class | r   | r   |
| Database Pv     | 93.4%| 95.1%|
| Pm              | 82.7%| 79.2%|

Table 11 shows that the \( Pm \) values are much lower than the corresponding \( Pv \) values, indicating the detection of an intrusion.

##### 5.2.2 Detecting Intrusion into popper

There is a buffer overflow flaw in the popper [16]. We performed a similar intrusion and constructed two real normal databases for popper using the same parameters as for wu-ftpd.

| Sequence Length | 6   | 6   |
|-----------------|-----|-----|
| Time Interval Class | r   | r   |
| za              | 2.33| 2.58|
| Database Pv     | 93.9%| 92.5%|
| Pm              | 84.7%| 81.2%|

Table 12 shows that the \( Pm \) values are significantly lower than the corresponding \( Pv \) values, indicating the detection of an intrusion. We also performed the same intrusion using the system call method [12].

| Application | Normal | Buffer Overflow |
|-------------|--------|-----------------|
| popper      | 0.8%   | 1.1%            |
| wu-ftpd     | 1.3%   | 1.0%            |

Table 13 shows little difference in the percentages for normal behavior and buffer overflow attack, indicating that the system call method cannot effectively detect the intrusion. This is because the intrusion did not launch any abnormal system calls, generating mostly cases that matched the cluster summaries in the normal databases.

##### 5.2.3 Detecting Intrusion into delegate

Delegate is a versatile application-level proxy, including the HTTP proxy. We built the normal database by monitoring two days of regular use of the proxy server at the University of Virginia. We employed a buffer overflow attack on delegate, causing an input buffer of delegate’s strcpy to overflow and inserting code that performed simple intensive calculations.

| Time Interval Class | r   | r   |
|---------------------|-----|-----|
| Database            |     |     |
| Sequence Length     | 6   | 6   |
| za                  | 2.33| 2.58|
| Pv                  | 91.5%| 95.4%|
| Pm                  | 71.7%| 73.3%|

Table 14 shows that the \( Pm \) values are much lower than the corresponding \( Pv \) values, indicating the detection of an intrusion. This demonstrates that while system calls alone may be insufficient, the temporal signature can effectively detect the intrusion.

##### 5.2.4 Detecting Intrusion into htdig

Some intrusions cannot be detected by our method. When an intrusion does not involve time-intensive computation, the temporal signature during the intrusion will not differ from the normal database. An example is the intrusion on htdig, a small HTML search engine.

Htdig was set up to allow file inclusion from configuration files. Any string surrounded by single quotes is interpreted as a path to a file for inclusion. Htdig also allows included files to be specified via the form input method in the HTTP protocol, allowing any web user to read any file on the server.

| Sequence Length | 6   | 6   |
|-----------------|-----|-----|
| za              | 2.33| 2.58|
| Time Interval Class | r   | r   |
| Database Pv     | 95.0%| 90.1%|
| Pm              | 93.5%| 91.3%|

Table 15 shows that without intrusion, the \( Pm \) values do not substantially differ from the \( Pv \) values.

| Sequence Length | 6   | 6   |
|-----------------|-----|-----|
| za              | 2.33| 2.58|
| Time Interval Class | r   | r   |
| Database Pv     | 94.8%| 91.3%|
| Pm              | 92.7%| 94.3%|

Table 16 shows that the intrusion does not issue any abnormal system calls, so it cannot be detected. Therefore, \( Pm \) does not substantially differ from \( Pv \).

### Summary and Conclusion

We presented a method for anomaly-based intrusion detection using the timing information of monitored applications, a temporal signature. After removing various environmental effects, most time intervals between or within system calls are uniformly distributed. We assume a normal distribution of these intervals, remove high variance data, and build a qualified normal database. Our method is empirical and uses adjustable parameters, making it more effective when tailored to specific applications.

Our method builds on the system call method of Forrest [12] and expands it to work well even when the observed application has the same system sequences as those in the normal database. We believe our temporal signature method provides an effective approach to detecting anomalous behaviors.

### References

[1] S.A. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion detection using sequences of system calls. Journal of Computer Security, 6, pp 151-180, 1998.

[2] A. Somayaji, S. Hofmeyr, and S. Forrest. Principles of a computer immune system. 1997 New Security Paradigms Workshop, pp 75-82, ACM, 1998.

[3] A. Sundaram. An introduction to intrusion detection. Magazine, ACM Crossroads, http://www.acm.org/crossroads/xrds2-4/intrus.html.

[4] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for UNIX processes. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pp 120-128, Los Alamitos, CA, 1996. IEEE Computer Society Press.

[5] P. Helman and J. Bhangoo. A statistically based system for prioritizing information exploration under uncertainty. IEEE Transactions on Systems, Man and Cybernetics, Part A: Systems and Humans, 27(4), pp 449-466, July 1997.

[6] H. S. Javitz and A. Valdes. The NIDES statistical component: description and justification. Technical report, Computer Science Laboratory, SRI International, Menlo Park, CA, March 1993.

[7] G. G. Helmer, J. S. K. Wong, V. Honavar, and L. Miller. Intelligent agents for intrusion detection. In Proceedings, Information Technology Conference, pp 121-134, Syracuse, NY, September 1998.

[8] W. Lee, S. J. Stolfo, and P. K. Chan. Learning patterns from UNIX process execution traces for intrusion detection. In AAAI Workshop on AI Approaches to Fraud Detection and Risk Management, pp 50-56. AAAI Press, July 1997.

[9] C. Warrender, S. Forrest, and B. Pearlmutter. Detecting intrusions using system calls: alternative data models. In The 1999 IEEE Symposium on Security and Privacy, May 1999.

[10] D. Dasgupta and S. Forrest. Novelty detection in time series data using ideas from immunology. In The fifth International Conference on Intelligent Systems, Reno, Nevada, June 1996.

[11] S. Forrest, A. S. Perelson, L. Allen, and R. Cherukuri. Self-nonself discrimination in a computer. In Proceedings of IEEE Symposium on Research in Security and Privacy, pp 202-212, Oakland, CA, 16-18 May 1994.

[12] W. Lee and S. J. Stolfo. Data mining approaches for intrusion detection. In Proceedings of the 7th USENIX Security Symposium, 1998.

[13] John A. Rice. Mathematical statistics and data analysis, Wadsworth & Brooks, 1988.

[14] http://www.cert.org/advisories/CA-1999-13.html

[15] http://www.securityfocus.com/vdb/bottom.html?vid=1026

[16] http://sabre.unix-security.net/pub/exploits/SendMail/qpush.c%7B-bufroverflwscript

[17] Y. Lin, A. K. Jones. Application Intrusion Detection using Language Library Calls. Annual Computer Security Applications Conference, December 2001.