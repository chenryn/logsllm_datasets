User: I'm interested in writing a python binding or wrapper for an existing command line utility that I use on Linux, so that I can access its features in my python programs.  Is there a standard approach to doing this that someone could point me to?
At the moment, I have wrapped the command line executable in a subprocess.Popen call, which works but feels quite brittle, and I'd like to make the integration between the two sides much more stable so that it works in places other than my own computer!
Assistant: One way would be to 

re-factor your command line utility so that command line handling is separated and the actual functionality is exposed as shared archive.
Then you could expose those function using cython.
Write your complete command line utility in python that exploits those functions.

This makes distribution hard though. 
What you are doing is still the best way.