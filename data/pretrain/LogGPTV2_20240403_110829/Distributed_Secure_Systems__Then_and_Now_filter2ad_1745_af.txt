that  order, 
it  may 
in 
then 
encode  the  information  received  into  a  file  that  could 
subsequently  and 
legitimately  be  retrieved  by  a 
Secret-level host. 
Although we cannot prevent Top Secret information 
from  getting  into  the  Secret-level  file  store,  we  can 
prevent  it  from  getting  back  out  again.  Once  we 
recognize this, the solution to the above problem is at 
hand. 
in  response 
The only objects that leave file storage machines are 
files  retrieved 
to  external  requests. 
Consequently,  any  clandestine  information  that  is  to 
reach  the  outside  world  must  be  encoded  into  those 
files.  Since  all  movement  of  files  into  and  out  of  the 
file storage machines is mediated by the SFM, security 
will be maintained if the SFM prevents the file storage 
machines 
(i.e., 
modifying)  outgoing  files.  In  other  words,  security 
depends  on  the  SFM  being  able  to  guarantee  the 
integrity  of  files  retrieved  from  the  file  storage 
machines. 
from  encoding 
information 
into 
Figure 5. Conceptual structure of the secure 
file store. 
This can be achieved if a checksum is added to each 
file  by  the  SFM  before  it  is  stored  in  one  of  the 
untrusted file storage machines. Any attempt by a file 
storage machine to modify a file will be detected on its 
subsequent retrieval by the SFM when the recomputed 
checksum fails to match the one stored with the file. Of 
course,  this  only  works  so  long  as  the  file  storage 
machines are unable to forge the checksums. This can 
be  ensured  in  two  ways  (other  than  by  keeping  the 
checksums  in  the  SFM).  The  first  is  to  use  a 
conventional  checksum  (i.e.,  one  computed  by  an 
algorithm  that  may  be  known  to  the  file  storage 
machines)  but  to  protect  it  by  encrypting  the  file  and 
the checksum as a single unit. The second technique is 
to use a crypto-checksum that depends on a secret key 
for its computation. An example of a crypto-checksum 
is  the  final  block  of  ciphertext  produced  during 
CBC-mode  encryption,  an  alternative  is  to  simply 
encrypt  a  conventional  checksum.  The  advantage  of 
crypto-check  sums  is  that  they  cannot  be  forged  by 
those who do not possess the key; they can therefore be 
used with information stored in the clear.  
Either  technique  can  be  used  to  guarantee  the 
integrity  of  files  retrieved  from  the  untrusted  file 
189189
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
storage  machines.  We  prefer  the  crypto-checksum 
approach  because  it  requires  only  a  single  operation. 
Intermediate  checksums  can  be  included  at  intervals 
within  the  file  if  the  SFM  has  insufficient  space  to 
buffer an entire file. If part of  a file has  already been 
delivered to a host when modification to a later part is 
detected  by 
then  some  clandestine 
information  may  have  been  conveyed  to  the  host 
through  the  position  at  which  the  modification  began 
and file transfer was aborted by the SFM. This channel 
has  very  limited  bandwidth,  and  as  long  as  all 
checksum failures raise a security alarm and are logged 
by the SFM, it is not considered a serious security risk. 
the  SFM, 
Figure 6. Actual structure of the secure file 
store. 
the  untrusted 
Checksums  prevent 
file  storage 
machines from modifying  the files  consigned to  them 
and  from  manufacturing  forgeries,  but  they  do  not 
prevent  them  from  signaling  to  a  collaborator  by 
choosing which legitimate files they return in response 
to  requests.  For  example,  a  Secret  host  could  send  a 
steady  stream  of  requests  for  file  X,  but  the  files 
actually  returned  by  the  Secret  file  storage  machine 
could  be  quite  different.  In  particular,  they  could  be 
files  selected  on  the  basis  of  length,  say,  to  convey 
information 
the  E-N-I-G-M-A 
example given earlier, To close this channel, the SFM 
must be able to verify that the correct file is returned in 
response  to  each  request.  This  is  easily  accomplished 
by  including  the  name  of  each  file  in  the  checksum 
calculation. 
in  the  manner  of 
A variation on this method of covert communication 
is  not  so  easily  countered,  however.  A  file  storage 
machine can keep several old copies of a legitimate file 
and  signal  to  an  outside  collaborator  by  choosing 
which version of the file to return in response to each 
request.  This  type  of  attack  can  be  countered  by 
recording  a  time  stamp  with  each  file  and  keeping  a 
separate  record  of  the  time  stamp  that  identifies  the 
current version of the file. The problem here is to find 
a  safe  place  to  keep  the  record  of  each  file’s  current 
time  stamp.  It  cannot  be  entrusted  to  the  file  storage 
machines  without 
for 
additional  mechanisms 
the 
safeguarding  its  own  integrity,  and  keeping  it  in  the 
SFNI will impose a substantial storage requirement on 
a machine that is intended to have no disks of its own. 
To keep the  trusted mechanism of the SFM simple, 
we  prefer  to  reduce  the  bandwidth  of  this  channel 
rather  than  attempt  to  close  it  completely.  The  SFM 
embeds  a  time  stamp  into  each file before calculating 
its  checksum  and  consigning  it  to  an  untrusted  file 
storage machine. In addition, the SFM maintains. in its 
own  private  storage,  a  cache  of  the  names  and  time 
stamps of all files read from or written to an untrusted 
file storage machine during, say, the last five minutes. 
Any  attempt  to  return  different  versions  of  the  same 
file within a shorter period will be detected by the SFM 
and  will  raise  a  security  alarm.  Attacks  that  operate 
over  a  longer  period  will  go  undetected,  but  their 
bandwidth  will  then  be  so  low  that  they  can  be 
discounted as serious threats. 
the  SFM  constitute 
Once  clandestine  information  has  been  prevented 
from leaving a file storage machine, there is no longer 
any need to provide separate file storage machines for 
each security partition; the integrity checks performed 
by 
required  separation 
mechanism. Accordingly, the file storage machines can 
all  be  replaced  by  a  single  Unix  system  called  the 
isolated file store, or IFS. Rather than connect the IFS 
directly to the SFM, we prefer to connect it to the LAN 
via  a  TNIU  in  the  standard  way.  For  it  to  be  truly 
isolated  from  the  rest  of  the  system,  however,  the 
TNIU  of  the  IFS  must  be  loaded  with  a  special 
encryption key that is shared only with the TNIU of the 
SFM (see Figure 6). 
The  revised  SFM  is  required  to  perform  two 
security-critical  tasks  and  is  therefore  split  into  two 
logically separate components: the file access reference 
monitor, or FARM, and the file integrity guarantor, or 
FIG.  The  task  of  the  FARM  is  to  ensure  that  all  file 
access  requests  comply  with  the  security  policy.  the 
FIG  is  responsible  for  computing  and  checking  the 
checksums and time stamps on files sent to or received 
from the IFS. 
The  FIG  achieves 
its  purpose  by  employing 
checksum  techniques  very  similar  to  those  used  for 
LAN  messages  by  the  TNIUs.  We  therefore  suggest 
constructing  the  FIG  by  making  minor  modifications 
and  extensions  to  an  ordinary  TNIU.  The  FARM 
function of the SFM  is also straightforward, requiring 
only  the  imposition  of  simple  access  control  rules 
determined by a security policy. This function  can be 
performed  inside  a  separate  virtual  machine  provided 
by  the  separation  kernel  of  the  machine  that  supports 
the TNIU/SFM functions.  
We  therefore  conclude  that  all  the  functions  of  a 
complete SFM can be easily integrated into the TNIU 
that  connects  it  to  the  LAN.  The  development  and 
190190
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:38:24 UTC from IEEE Xplore.  Restrictions apply. 
verification  costs  of  an  integrated  TNIU/SFM  should 
be  little  more  than  those  for  a  TNIU  alone,  and 
production  costs  should  be  about 
the  same  – 
approximately a thousand dollars. 
The  FIG  checksum  mechanism  allows  files  to  be 
read or written only  in their  entirety.  This  is different 
from  the  standard  Unix  file  system  interface,  which 
permits  incremental  reading  and  writing,  and  the 
repositioning of the file pointer. For this reason, secure 
files cannot be accessed through the normal Unix file 
system  interface  but  must  use  a  special  extension  to 
that  interface  provided  by  the  Newcastle  Connection. 
This  extension  adds  new  system  calls  to  publish, 
acquire, and delete secure files, and to list the names of 
the secure files belonging to a given security partition, 
(The list operation must be implemented very carefully 
so  as  not  to  provide  the  IFS  with  a  clandestine 
information channel.) The minor inconvenience caused 
for  users  by  this  nonstandard  interface  is  certainly  no 
worse than  that  imposed by the file  transfer programs 
used in conventional network architectures and is more 
than  outweighed  by  the  simplicity  of  the  trusted 
mechanisms needed to implement it. Extensions to this 
scheme  that  do  provide  the  full,  standard  Unix  file 
system interface are described in a technical report[10], 
but the difficulties of providing secure access to Unix 
i-node 
to 
compromise  the  attractive  simplicity  of  the  basic 
scheme.  Completely  different  mechanisms  are  known 
and are probably preferable in this case. 
information  and 
to  directories 
tend 
The  accessing  and  allocation  of  security 
partitions 
A  system  in  which  terminals  are  attached  to 
machines  of  fixed  security  level  can  be  somewhat 
inconvenient to use. A Secret-level user can send mail 
to a Top Secret user via the secure file system, but the 
recipient  can  only  reply  by  leaving  his  Top  Secret 
machine  and  logging  in  to  one  at  the  Secret  level,  or 
lower.  We  can  avoid  this  inconvenience  and  make 
additional services possible by connecting terminals to 
trustworthy  terminal  interface  units,  or  TTIUs,  rather 
than  to hosts directly.  Moreover, we can then  include 
provisions  for  dynamically  changing  the  allocation  of 
machines to security partitions. 
Accessing  different  security  partitions.  What  we 
term a trustworthy terminal interface unit is basically a 
TNIU  enhanced  with 
trusted 
functions,  including  a  terminal  driver,  some  very 
limited  Newcastle  Connection  software,  and  an 
authentication  mechanism.  Each  of  these  logically 
separate  mechanisms  runs  in  an  individual  virtual 
some  additional 
machine provided by the separation kernel supporting 
the TTIU. 
A  TTIU  in  the  “idle”  state  simply  ignores  all 
characters  reaching  it  from  the  LAN  or  from  its 
terminal until a  special  character sequence is typed at 
the keyboard. This will cause the TTIU to connect the 
terminal  to  its  authentication  mechanism,  which  will 
then  interrogate  the  user  to  determine  his  identity. 
Once the user has been authenticated, he can be asked 
for  the  security  partition  to  which  he  wishes  to  be 
connected.  If  the  requested  partition  is  within  his 
clearance  and  all  other  requirements  of  the  security 
policy are satisfied (for example, a terminal located in 
a public place is not permitted a Top Secret connection 
even  if  its  user  is  authorized  to  that  level),  then  the 
TTIU  will  load  the  encryption  key  of  the  partition 
concerned 
its  DES  chip.  The  Newcastle 
Connection software in  the TTIU will then be able  to 
contact its counterpart in a host machine belonging to 
the  appropriate  security  partition,  and  the  user  will 
thereafter interact with that remote machine exactly as 
if he were connected to it directly. 
The  Newcastle  Connection  component  in  the  TTIU 
must  be  able  to  respond  to  remote  procedure  calls 
directed  to  it  by  the  Newcastle  Connection  of  the 
remote machine. The only calls that require a nonerror 
response  are  those  appropriate  to  terminals,  namely 
“read from the keyboard”, “write to the screen,” and a 
couple  of  others  concerned  with  status  information. 
Thus, only a fraction of the full Newcastle Connection 
software  is  required  for  a  TTIU,  and  just  like  the 
similar software in a conventional host, it need not be 
trusted. 
into 
A system in which terminals are attached to 
machines of fixed security level can be somewhat 
inconvenient to use. 
None of the additional trusted mechanisms required 
to upgrade a TNIU to a TTIU should present an undue 
challenge  in  either  construction  or  verification,  Nor 
should  the  presence  of  these  additional  mechanisms 
affect  the  construction  or  verification  of  the  TNIU 
components  themselves,  since  TNIUs  are  constructed 
on top of a separation kernel. In fact, the presence of a 
separation kernel makes it perfectly feasible to support 
multiple  terminals,  each  with  a  separate  set  of  TTIU 
and TNIU components, on a single processor. 
Changing security partitions dynamically. TTIUs 
enable  users  to  connect  to  machines  in  different 
security  partitions,  thereby  allowing  them  to  perform 
each  of  their  activities  at  the  most  appropriate  level 
within their clearance. If a security policy with a large 