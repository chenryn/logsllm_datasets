# Robust Protection against Fault-Injection Attacks on Smart Cards Implementing the Advanced Encryption Standard

**Authors:**
- Mark G. Karpovsky, Fellow, IEEE
- Konrad J. Kulikowski
- Alexander Taubin, Senior Member, IEEE

**Affiliation:**
Reliable Computing Laboratory  
Department of Electrical and Computer Engineering  
Boston University  
8 Saint Maryâ€™s Street, Boston, MA 02215  
{markkar, konkul, taubin}@bu.edu

**Abstract:**
This paper presents a method for protecting a hardware implementation of the Advanced Encryption Standard (AES) against Differential Fault Analysis (DFA) attacks. The proposed method utilizes systematic nonlinear (cubic) robust error-detecting codes. Unlike linear codes, the error-detecting capabilities of these codes depend not only on the error patterns but also on the data at the output of the device, which is unknown to the attacker due to its dependence on the secret key. Additionally, the proposed nonlinear (n,k)-codes reduce the fraction of undetectable errors from \(2^r\) to \(\frac{2^r}{2^{k-r}}\) compared to the corresponding (n,k) linear code (where \(n-k=r\) and \(k \geq r\)). We also present results from an FPGA implementation of the proposed protection scheme for AES and simulation results demonstrating the efficiency of the robust codes.

**1. Introduction**

In today's information security landscape, engineers face the challenge of building trustworthy systems from potentially untrustworthy components. Security experts assert that the most viable solutions require a minimal number of trustworthy components. These components are essential for ensuring overall system security by providing services such as authentication, encryption/decryption, and cryptographic tokens [1].

Security is typically provided at the software level through cryptographic algorithms. Traditional cryptographic protocol designs assume that input and output messages are accessible to attackers, but other information about the keys remains hidden. However, in recent years, a new class of attacks against cryptographic devices has emerged [2]. These side-channel attacks exploit easily accessible information like power consumption, running time, and input-output behavior under malfunctions. They can be executed with low-cost equipment and often use statistical methods to amplify and evaluate leaked information, making them more powerful than classical cryptanalysis [3]. Side-channel attacks result from the electrical behavior of transistors and circuits, shifting the priority in cryptography from algorithm improvement to attack prevention [4, 5, 6].

In this paper, we focus on Differential Fault Analysis (DFA) attacks, first proposed in 1997 by E. Biham and A. Shamir [7] as an attack on DES. DFA attacks have since been applied to AES by others [8, 9, 10, 11]. DFA attacks derive information about the secret key by examining differences between ciphers resulting from correct and faulty operations.

Several research groups suggest concurrent error detection procedures as a hardware countermeasure against fault injection. For example, Karri et al. [12] propose adding circuitry to perform decryption in parallel with encryption, comparing the results to ensure no errors. However, these solutions have significant detection time latencies and hardware costs, and they assume that both encryption and decryption modules are not simultaneously under attack, which is unrealistic for smart card applications.

The fault-detecting scheme for AES in [13] uses one-dimensional parity codes, associating one redundant parity bit with each byte of the state matrix. This detects errors involving an odd number of bits in a byte. However, even-numbered errors in a byte can still be injected successfully by the attacker.

In our design, after detecting a DFA attack, the device implementing AES disables itself. We assume that the number of natural faults over the device's lifespan is much less than the number of faulty ciphertexts needed for a realistic DFA attack. The disabling circuitry can be a simple counter that counts detected errors. When a predetermined threshold is reached, the device clears the secret key from memory, preventing further attacks. This threshold can be adjusted based on the operating environment and expected lifespan of the device.

We present a new class of systematic nonlinear robust codes in Section 3 and propose a robust protection scheme against such attacks. The proposed nonlinear robust codes extend the error coverage of linear codes without increasing their redundancy, reducing hardware overhead. We will use stuck-at fault and bit flip error models to justify the use of these codes.

Optimal nonsystematic robust codes have been proposed in [14, 15], but they require complex encoding and decoding procedures, making them unsuitable for DFA attack detection. For the proposed robust codes, the probability of error detection depends on both the error pattern and the data itself. If all data vectors and error patterns are equiprobable, the probability of injecting an undetectable error when the device is protected by our robust codes is \(\frac{2^r}{2^{k-r}}\), compared to \(2^r\) for any linear code with the same \(r\).

For brevity, we omit a detailed discussion of AES; readers can consult [16] for specifications. In Section 2, we describe the fault model used. Section 3 introduces the systematic nonlinear robust codes with simple encoding and decoding procedures. Section 4 describes a general architecture for protecting AES with these codes. Section 5 details the FPGA implementation of a robust-protected AES core. Section 6 summarizes the size and overhead statistics of our FPGA implementation. Section 7 presents simulation results on the probabilities of detecting a DFA attack, supporting our initial calculations. Finally, in Section 8, we discuss the advantages of using the systematic nonlinear robust codes for AES protection compared to other countermeasures.

**2. Fault Model**

A fault is a physical malfunction in a part of a circuit, such as a wire being stuck-at zero or an output of a gate being stuck-at one. Faults are directly created by an attacker and can be induced by subjecting a device to abnormal conditions, including voltage spikes, clock glitches, extreme temperatures, radiation, eddy currents, and light. However, except for light, there is no control over the location and type of fault induced, leading to probabilistic attacks.

An error is the manifestation of a fault at the device's output, defined as the difference (componentwise XOR) between the correct and distorted outputs. In this paper, we consider protection against probabilistic attacks, where the attacker has little or no control over the fault's location or type. This type of attack does not require chip depackaging or specialized equipment, making it highly accessible. Detecting a fault attack is equivalent to detecting the corresponding error in the device's output, particularly between AES rounds. We assume that errors resulting from an attack are uniformly distributed and remain constant for several different text inputs.

**3. Systematic Nonlinear Robust Codes**

Let \(V\) be a binary linear \((n, k)\)-code with \(2^k \leq n\) and a check matrix \(H = [P | I]\), where \(I\) is an \((r \times r)\) identity matrix and \(P\) is an \(((n-k) \times k)\) matrix of rank \(n-k = r\) over \(GF(2)\). For any message, an error \(e\) is not detected if \(e \in V\). This linear \((n, k)\)-code \(V\) can be modified into a nonlinear robust systematic \((n, k)\)-code \(VC\) such that the set \(E\) of undetected errors for \(VC\) is a \((k-r)\)-dimensional subspace of \(V\).

**Theorem I:**
Let \(VC = \{(x, w) | x \in GF(2^k), w = P x + x^3\}\). Then the set \(E = \{e \in V | e y = 0 \text{ for all } y \in V\}\) of non-detected errors for \(VC\) is a \((k-r)\)-dimensional subspace of \(V\). From the remaining \(2^{n-1} - 2^{k-r}\) errors, \(2^{k-1}\) errors are detected with probability 1, and the remaining \(2^{n-1} - 2^{k-1} - 2^{k-r}\) errors are detected with probability \(\frac{1}{2}\).

**Proof:**
An error \((e_x, e_w)\) (where \(e_x \in GF(2^k)\) and \(e_w \in GF(2^r)\)) is not detected for \(VC\) if:
\[ P e_x + e_x^3 = e_w \]
or
\[ P e_x + e_x^3 + e_w = 0 \]

It follows that \(e\) is not detected for any \(x\) if \(P e_x + e_x^3 + e_w = 0\), and \(\{e \in V | P e_x + e_x^3 + e_w = 0\}\) is a \((k-r)\)-dimensional subspace in \(V\).

If \(P e_x + e_x^3 + e_w = 0\), then \(e\) is not detected for any \(x\). There are \(2^{k-r}\) such errors. The remaining \(2^{n-1} - 2^{k-r}\) errors are detected with probability 1 or \(\frac{1}{2}\).

**Table 1: Comparison of the Proposed Robust Codes and Corresponding Linear Codes**

| **Code Type** | **Number of Undetectable Errors** | **Number of Errors Detected with Probability 1** | **Number of Errors Detected with Probability \(\frac{1}{2}\)** |
|---------------|----------------------------------|-------------------------------------------------|--------------------------------------------------------------|
| **Robust Nonlinear** | \(2^{k-r}\) | \(2^{k-1}\) | \(2^{n-1} - 2^{k-1} - 2^{k-r}\) |
| **Linear (Not Robust)** | \(2^r\) | \(2^{k-1}\) | \(0\) |

The transition from a linear code \(V\) to the corresponding robust code \(VC\) requires the addition of two cubic networks. Each cubic network increases the complexity of encoding and decoding by \(O(2r)\). Replacing a linear \((n, k)\)-code with a cubic robust code with the same parameters reduces the space of undetected errors from \(2^r\) to \(2^{k-r}\).

In summary, the properties of the proposed robust codes versus linear codes are summarized in Table 1. Other nonlinear functions, such as multiplicative inverses or higher powers, are possible but result in larger hardware overhead or reduced error coverage. The cubic function is preferred due to its lower complexity and higher error coverage.