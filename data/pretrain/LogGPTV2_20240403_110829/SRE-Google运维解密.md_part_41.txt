是最优化的情况，其他的某种部署计划是更合适的。
而且我们从中获得了更多的选择自由度：也许以N+2运行并不是足够的，或者并不
这是相对更抽象的一个需求，当容量得不到满足时的后果也更清楚了：可靠性会下降。
源，究竟会造成什么后果。
背后的原因，为什么我们需要这么多资源，以及为什么需要三个集群？
个集群中？
第18章SRE部门中的软件工程实践
---
## Page 223
程度的妥协，但是在之前的过程中，优先级划分经常是随意的，对服务负责人不够透明。
基于意图的规划过程强迫这些计划变得更为透明、开放和一致。资源限制仍然需要一定
线没有Baz服务的N+O需求重要（意思是必须保证Baz服务有足够容量）。
可能Foo服务的N+2余度要比Bar服务的N+1余度更重要。或者某个功能X的上
每个资源的请求都会面临无法逃避的问题，在资源不够的情况下，哪些资源的请求可以
优先级
我们常常需要进行负载测试和资源用量监控来获得相应的性能指标信息。
性能指标是依赖关系中的黏合剂。它们将一种或多种高阶资源类型转换成低阶资源类型。
多少Mb/s的数据以服务N个Foo服务的用户请求？
的资源用量。Foo服务需要多少计算资源以服务N个用户请求？我们需要Bar服务提供
解可以帮助我们规划出大致的需求压缩计划，但是我们仍然需要更多的信息以决定预期
某个服务的需求最后可以分解为对一个或更多其他服务的容量需求。对整个依赖链的理
性能指标
产品意图不同。
Bar、Baz、Qux来决定在哪里放置Foo。有的时候不同系统可能依赖同一个系统，但是
Baz,
更为重要的是，服务依赖是嵌套的，继续上面的例子来说。假设服务Bar要依赖服务
限制纳入考虑范围。
这项要求对决定Foo和Bar的位置选择极为重要，基于意图的资源规划过程必须将这条
依赖某个基础设施存储服务Bar，Foo要求Bar服务必须处于30ms的网络延迟范围之内。
极大影响某个服务的位置选择。举例来说，假设我们有一个最终用户可用的服务Fo0，
Google的服务在运行时需要依赖很多其他基础设施和服务，这些依赖服务的可用信息会
依赖关系
完整表达某个服务的意图需要哪些信息？我们需要依赖关系、性能指标和优先级信息。
被牺牲掉？
表达产品意图的先导条件
需要向第四步努力。
可以将需求得不到满足的后果用高阶的、易理解的方式表达。某些特别复杂的项目可能
一个底层的分布式存储系统，和Qux，某个应用程序管理系统。我们需要考虑
基于意图的容量规划
181
<211
---
## Page 224
212
每个服务的需求预测数据（Per-ServiceDemand Forecast Data）描述了针对服务的需求预
分配资源。这些资源需求一也就是产品意图一
些用户的意图通过一系列对服务的要求来表达，例如：“我的服务必须在每个大陆有N+2
部门的关键性容量规划组件之一。
Auxon目前正在被用来规划百万美元级的计算资源分配，它已经成为Google几个重要
Auxon是Google开发的一个基于意图进行容量规划的工具。同时，它也是SRE设计和
Auxon简介
基于意图的规划过程使得这些优先级可以划分得更为细致。
182
某些服务是通过压力测试得到的，某些是从过去的性能数据中得出的。
需要多少单元的依赖服务Z资源？这些数据可以根据服务的成熟程度用不同的方法获得，
数据信息（PerformanceData）描述了某个服务的规模化能力。针对集群Y中的需求X，
图18-1:Auxon的主要组件
图18-1列出了Auxon的主要组件。
源分配计划。
式。Auxon通过对该表达式求解，并且利用一系列组合的最优压缩算法最终形成一个资
使用的限制条件。这些需求条件可以指定优先级，这样在资源不够的情况下可以更好地
用户配置信息或者编程API收集起来，同时将这些人工指定的产品意图转化成机器可以
从产品角度上来说，Auxon为收集基于意图的服务资源要求和依赖信息提供了工具。这
下耗时两年时间写就的。Auxon是SRE内部软件工程的一个完美案例。
第18章SRE部门中的软件工程实践
Budget priorities
Intent Config
econstraints
Performance Data
Per-ServiceDemand
Forecast Data
Language Engine
Configuration
Auxon
一最后会形成一个巨大的线性规划表达
→
Resource Pricing
Resource Supply
Auxon
---
## Page 225
在Auxon的开发过程中，负责开发的SRE团队始终与生产环境的变化密切接触。该开
率低下部分和自动化改善机会非常了解。
目中的容量规划任务。经历过基于电子表格的手工容量规划之后，他们都对过程中的效
Auxon这个想法起源于一个SRE和一个技术项目经理的共同努力。他俩分别负责对应项
需求和实现：成功和不足
或者资源选择条件太过严格而导致无法满足。
同时包括了哪些资源需求无法得到满足一
资源应该分配给哪个服务。这个计划就是基于意图的资源规划的实现细节。该分配计划
资源分配计划（AllocationPlan）是Auxon求解器的最后产物。它描述了在何处的何种
决策树相关的程序。
整型线性规划的求解程序之外，Auxon求解器还包括任务的分发、工作池的维护，以及
以同时运行在Google集群内的几百台甚至几千台机器上进行并行求解。除了针对混合
得的优化请求建立起一个庞大的混合整型线性规划程序。这个工具的扩展性非常好，可
Auxon 求解器（Auxon Solver）是整个工具的大脑。它根据从Auxon配置语言引擎中获
置信息与机器可用的格式之间进行转换。
同时，这个组件会进行一些简单的正确性检查。这个组件的作用就是在人类可维护的配
取到的信息，将信息转化为机器格式，也就是Auxon求解器所需要的Protocolbuffer格式。
将其他的组件结合起来。这个部分目前被设计为人类可读和可配置的格式。
了每个服务，以及服务之间的依赖关系。这个配置文件最终会成为其他组件的黏合剂，
意图配置信息（Intent Config）是向Auxon输入基于意图的信息的关键渠道。这里定义
表了总体资源的成本，也是我们要最优化的“目标”。
本可能根据所在数据中心的位置和电源成本差别很大。在线性规划术语中，这些价格代
资源价格（ResourcePricing）提供了基础资源的成本信息。举例来说，物理服务器的成
使用。
务的增长和放置选择。我们的终极目标是，在服务意图配置的框架内最优化资源供应的
用的物理服务器的总量。以线性规划术语来说，资源供给是上限upper bound，限制了服
资源供给（Resource Supply）提供了基础资源的可用性，举例来说，未来某个时间点可
仅来源于依赖它们的服务。
信息。不是所有的服务都能这样预测需求（例如存储服务Colossus），某些服务的需求仅
测信息。某些服务根据它们需求的预测信息推断资源使用量一
一例如，某个需求由于资源短缺无法得到满足，
基于意图的容量规划
一分大陆区域预测的QPS
183
214
213
---
## Page 226
215
器平台的性能数据（如CPU）是很少的，但是我们的用户需要以某种方式来对不同的机
同时我们还利用模块化设计来处理建立机器性能模型时的需求模糊问题。未来物理服务
的流程更容易，因为它并不强迫用户换用某一种自动化工具、某一种预测工具，或者某
使得各种自动化系统自行将其整合进来。这种实现无关的方式，使得Auxon接入新用户
具对接，而是采用了一种自己的设计，将“资源分配计划”变得更为抽象和实用，从而
未稳定，
配资源、
Google内部的其他自动化工具结合，从而使资源分配方案可以直接在生产环境上执行（分
件在设计和实现上变得更为通用和模块化。举例来说，Auxon项目的其中一个目标是和
人很沮丧，但是这些不确定性并不意味着项目无法推进。借助这种模糊性可以促使软
Auxon的产品需求也有很多不确定的地方。构建这样一个需求模糊的软件项目经常让
聪明的求解器替换傻瓜求解器。
他的Auxon组件。最终，随着对线性规划模型有了更多了解，我们可以一次性用这个更
接口和Auxon之间是抽象分离的，这样求解器的具体实现可以随后改变，而不会影响其
该手段进行改进，甚至重新引人新的近似手段。在开发傻瓜求解器的时候，整个求解器
当在开发过程中采用模拟近似手段加快开发的时候，我们还要注意保证团队在未来能对
对该产品的远景体验有更切实的感觉。
理用户的资源请求。虽然这个傻瓜求解器并不会真正返回一个最优解，但是却能让团队
化版的Auxon求解器（称之为傻瓜求解器），该求解器使用一些简单的启发性逻辑来处
能，也并没有完全理解。为了解决团队对这个问题的困惑，我们一开始选择构建一个简
为团队成员对线性规划问题完全没有经验。而对线性规划的限制，是整个产品的核心功
案不确定，要么是问题的解决方式不确定。Auxon 在项目初期就遇到了这样的困难，因
任何一个足够复杂的软件工程项目都会遇到一定程度的不确定性，要么是组件的设计方
应该更快地发布和选代。
不要过于关注完美和解决方案的纯粹性，尤其是当待解决问题的边界不够清晰时。我们
近似
该团队具有极强的主人翁意识，并且使得该产品在SRE内部有极强的可信度和可靠性。
利用他们的第一手经验决定工具的功能优先级。对问题的第一手经验和了解不仅仅使得
既是这些工具的消费者也是开发者。当工具出现问题时，该团队会直接受到影响。团队
层的设计讨论。通过这些持续不断的交流，整个团队可以保持与生产环境的联系：他们
发团队仍负责参与多个Google服务的on-call轮值，同时经常参与这些服务的技术管理
184
一种性能监控工具。
，各种各样的接口都在使用中。Auxon没有发明一个特殊的模型与各种自动化工
、上线、下线、调整服务大小等）。但是，在设计时，这个自动化执行系统还尚
第18章SRE部门中的软件工程实践
---
## Page 227
在Auxon案例中，我们通过平衡长期计划和短期修复来提高迭代速度。我们向用户承诺：
的人来试用。通过递进式的、稳定的、小型发布可以提升用户对项目的信心。
可信度。同时，如果一个项目无法产生出足够有吸引力的结果，可能没有办法找到足够
（MVP）是很重要的。一个工程项目如果承诺了太多、太快，而无法做到，很容易丧失
美的最终产物的幻想中去。但是，给产品设计一个最小成功条件，或者是最小可行产品
当一个在问题领域已经有多年经验的工程师设计一个产品时，我们非常容易陷入到对完
设立期望值
如果你的解决方案使用起来太困难，或者太令人迷惑，SRE通常会选择自己开发了。
够容忍界面上的不足之处，适当地提供文档还是有必要的。SRE平时的工作已经很忙了
能没有时间和精力去通过源代码学习如何使用一个工具。虽然内部用户相对来说比较能
在开发过程中，时刻从用户角度出发来设计对提高可用性很重要。使用工具的工程师可
演示是不够的。向大型团队推广内部软件工具需要以下儿点：
不要低估提高人们对该产品了解程度的难度—通常发一封公告邮件或者做一个简单的
的人来使用，是一个项目成功的关键。
的降低等确实可见的优势来赢取用户的采用。如何在组织中推广该工具，同时吸引更多
项目需要靠用途、性能和对Google生产环境可靠性的提高，或者对SRE用户工作压力
正如其他产品一样，SRE研发的软件系统也需要针对目标用户和需求来设计。SRE软件
提升了解程度，
提供的通用解决方案一直有一个真实的使用案例，以确保设计可以满足真实的需求。
程或者策略有大的变动时，不需要花费很大精力就可重新实现。但是同时，也要保证所
继续前进。当我们遇到不确定因素时，应该力求将软件设计得更为灵活，以便当未来流
条建议适用于很多SRE软件工程项目。不要等待完美的设计，而是应该按照既定的规划
如果一定要从Auxon案例中抽取一个共同点，那就是说了很多次的“发布与选代”，这
个模块，提供了一个简单的通用性能数据模型类库。
来的机器性能数据替换进来。后来，随着对需求进行更加清楚的定义，我们还延伸了这