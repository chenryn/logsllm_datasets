### Systematic Evaluation of Deobfuscation Methods Using Tigress

**Protections:**
We primarily focus on path-oriented protections that are tractable and select both a new SVP (Software Verification and Protection) scheme (For) and an existing non-SVP scheme (Split). These protections are inserted in a robust-by-design manner, and we vary the number of forking points per path (parameter \( k \)).

Additionally, we consider standard protections such as Virtualization (up to 3 levels), arithmetic encoding, and flattening. Previous research [5] has shown that nested virtualization is the only standard protection effective against Dynamic Symbolic Execution (DSE). Our results confirm this, so we report only on virtualization (other results are provided in the Appendix).

### Datasets

**Dataset #1:**
This synthetic dataset, derived from Banescu et al. [5], offers a diverse set of functions and has been used to assess resilience against DSE. It includes 48 C programs, each ranging from 11 to 24 lines of code, with control-flow statements, integer arithmetic, and system calls to `printf`. We exclude 2 programs due to their significantly longer time to reach full coverage, which skews the overall results. Some programs have a 1-byte input space, making them too easy to brute force. We convert these into equivalent 8-byte input programs with the same number of paths. The maximum time to achieve full coverage using KLEE on the remaining 46 programs is 33 seconds, with a mean time of 2.34 seconds (details in Appendix B).

**Dataset #2:**
The second dataset consists of 7 larger, realistic programs, representative of real-life protection scenarios: 4 hash functions (City, Fast, Spooky, md5), 2 cryptographic encoding functions (AES, DES), and a snippet from the GRUB bootloader. Unobfuscated programs range from 101 to 934 lines of code. KLEE needs at most 33.31 seconds to explore all paths, with a mean time of 8 seconds (details in Appendix B).

### Impact on Dynamic Symbolic Execution

**Protocol:**
To evaluate the impact of protections against DSE, we measure the induced slowdown (time) of symbolic execution on obfuscated programs compared to their original versions. For clarity, we report whether DSE achieves its goal or times out.

- **Path Exploration (Goal 1):** We use programs from Datasets #1 and #2, apply the protections, and run KLEE until it reports full coverage or times out. Timeouts are set to 3 hours for Dataset #1 (average 5,400× slowdown) and 24 hours for Dataset #2 (average 10,000× slowdown).
- **Secret Finding (Goal 2):** We modify the programs from both datasets to include "secret finding" code (e.g., win/lose) and configure KLEE to stop execution once the secret is found. We use the entire Dataset #2 and restrict Dataset #1 to the 15 programs with 16-byte input space. Timeouts are set to 1 hour for Dataset #1 and 3, 8 hours for Dataset #2, as the time to find the secret on the original programs is much lower (0.3 seconds average).

**Results & Observations:**
Table 3 shows the number of timeouts during symbolic execution for each obfuscation and goal. For example, KLEE always covers all paths on Dataset #1 with simple Virtualization (0/46 TO), but fails on approximately 40% of the programs with Split (k = 17) and never succeeds with For (k = 5).

As expected, higher levels of protection (more virtualization layers or more forking points) provide better protection. However, increasing forking points is cost-effective, while increasing levels of virtualization becomes prohibitive quickly.

Virtualization is weak for both goals, with only 3 levels providing some protection. For performs very well for both goals: with k = 3 and Dataset #1, For induces a timeout for more than half the programs, which is significantly better than Virt×3. With k = 5, all programs time out. Split is efficient for Goal 1 (though requiring higher k values than For) but not for Goal 2. For instance, on Dataset #1 with k = 17, 39% of programs time out for Goal 1 (18/46), but only 13% (2/15) for Goal 2.

**Other Results:**
Standard protections from Tigress, such as Flattening and EncodeArithmetic, are ineffective against DSE, slowing path exploration by a maximum factor of 10, which is not critical. Search heuristics do not make a significant difference for Path Exploration (Goal 1), but DFS slightly outperforms BFS and NURS for Secret Finding (Goal 2).

Experiments with three binary-level DSE engines (Binsec [26] with Boolector[14], Triton [38], and Angr [43] with Z3[27]) align with our findings. Most state-of-the-art tools (KLEE, Binsec, Triton) do not support self-modification, and Angr's specific option does not handle the Write pattern symbolically, leading to missed paths and failed secret recovery.

**Conclusion:**
Standard protections like nested virtualization are largely ineffective against DSE attacks. Path-oriented protections offer stronger protection, but care must be taken. Non-SVP path protections like Split improve over nested virtualization (Split with k = 13 is roughly equivalent to Virt ×3, and with k = 17, it is clearly superior), but they provide only weak-to-mild protection for Secret Finding or large timeouts. SVP protections (represented by For) can discard all DSE attacks on our benchmarks for both Path Exploration and Secret Finding with k = 5, demonstrating superior protection against DSE compared to standard and non-SVP path protections.

Path-oriented protections are indeed a tool of choice against DSE attacks (RQ1), much stronger than standard ones (RQ4). SVP allows predicting the strength of these protections (RQ4) for Coverage or Secret Finding.

### Impact on Runtime Performance

**Protocol:**
We evaluate the runtime overhead (RO) and code size increase (CI) of obfuscated programs compared to their original versions. We also consider Write and two variants of For—its recursive encoding REC (Section 7.1) and the more robust P2 encoding (Section 8.5), as well as the untractable word-level For scheme (Section 5), coined WORD.

**Results & Observations:**
Table 4 shows the average values over all programs in the datasets. Nested virtualization introduces a significant and prohibitive runtime overhead (three layers: ×1.6·10^3 for Dataset #1 and ×362 for Dataset #2), with each new layer coming at a high price. Code size increases are manageable but still substantial (at least ×3 for three layers). Split, For, and Write introduce only low runtime overhead (at most ×1.3 on Dataset #1 and ×1.1 on Dataset #2), with no significant code size increase even for k = 50. Variants of For, P2, show no additional overhead, while REC comes at a higher price. As predicted, WORD is intractable.

**Conclusion:**
Tractable path-oriented protections yield only a slight overhead in terms of time and code size (RQ2), and improving the level of protection (k) is relatively cheap. Nested virtualization, however, comes at a high price (RQ4). Combined with the results from Section 8.3, path-oriented protections offer better anti-DSE protection at a much lower runtime cost. The code size increase due to path-oriented protections is compatible with strict memory requirements (e.g., embedded systems), unlike nested virtualization.

### Robustness to Taint and Slice Attacks

**Protocol:**
We use clang & GCC compilers, the industrial-strength Frama-C static code analyzer (with Taint and Slice plugins and precise interprocedural range analysis), Triton (featuring tainting), and KLEE. We focus on the 8 programs from Dataset #1 with 16-byte input space and all programs from Dataset #2. Programs with 1-byte input space from Dataset #1 are excluded because the added fake inputs would not resist analysis. This issue is addressed in the following section.