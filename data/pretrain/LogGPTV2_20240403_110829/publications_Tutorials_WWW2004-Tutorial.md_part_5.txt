Syntactic, QoS, and Semantic
(Functional & Data) Similarity
Web Service
Discovery
Similarity ?
Syntactic
Syntactic
N Na am me e, , A X N Na am me e, , S Si im mi il la ar ri it ty y
Description, B Description,
Description, Y Description,
… ….
… C …. SynSimilarty(ST,SO)=ω 1SynNS(ST.sn,SO.sn)+ω 2SynDS(ST.sd,SO.sd) ∈[0..1],
ω+ω
1 2
and ω,ω∈[0..1]
Web Service Web Service 1 2
Similarity ?
QoS QoS
QoS
QoS
Similarity A
Similarity X
OpSimilarity(ST,SO)= B Bu uy y B Y P Pu urc rch ha as se e
3 QoSdimD(ST,SO,time)*QoSdimD(ST,SO,cost)*QoSdimD(ST,SO,reliability) C
Web Service Web Service
Functional Data
Functional& Data
&
Similarity ? Similarity
Similarity
Calendar-Date
Event
A A1 1 … A A2 2
… Coordinate{sx, y}
… Information Function
Area {name}
143
Web Service Web Service Forrest
Get Information Get Date
144
The Match Function
Semantic Similarity
Purely syntactical methods that treat terms in
isolation from their contexts.
It is insufficient since they deal with syntactic but not with
semantic correspondences
Users may express the same concept in different ways.
Therefore, we rely on semantic information to
evaluate the similarity of concepts that define ST
and SO interfaces.
This evaluation will be used to calculate their
degree of integration.
144
145
The Match Function
Semantic Similarity
When comparing concepts two main cases
can occur:
 The concepts are defined with the same Ontology
(Ω(O) = Ω(I))
 The concepts are defined in different Ontologies
(Ω(O) ≠ Ω(I))
145
146
The Match Function
Semantic Similarity (Ω(O) = Ω(I))
When comparing concepts defined with the
same ontology four distinct scenarios need
to be considered:
a) the concepts are the same (O=I)
b) the concept I subsumes concept O (O>I)
c) the concept O subsumes concept I (O I
SemS'(O,I)= | p(O)|
, O I
SemS'(O,I)= | p(O)|
, O 67% Temporal-Entity
4/6=0,67=> 67%
2
Time Time
Time-Point Time-Point
Domain Domain
{absolute_time} {absolute_time}
1 1
{year, month, day} Date Time {year, month, day} Date Time
{hour, minute, second} {hour, minute, second}
2 3 4
Calendar-Date Event Calendar-Date Event
{ dayOftheWeek, monthOftheYea}r dayOftheWeek, monthOftheYea}r
Scientific-Event Scientific-Event
{millisecond} {millisecond}
 1, O = I
1, O > I
SemS'(O,I)= | p(O)|
, O 50%
4/9*4/7=0.504 => 50%
Temporal-Entity Temporal-Entity
2
Time Time
Time-Point Time-Point
Domain Domain
{absolute_time} {absolute_time}
1 1
{year, month, day} Date Time {year, month, day} Date Time
{hour, minute, second} {hour, minute, second}
2 3 4
Calendar-Date Event Calendar-Date Event
{ dayOftheWeek, monthOftheYea}r dayOftheWeek, monthOftheYea}r
Scientific-Event Scientific-Event
{millisecond} {millisecond}
 1, O = I
1, O > I
SemS'(O,I)= | p(O)|
, O Ω(I))
New
TheDate
Date
A?
A1 … Similarity ? A?
A1 …
…
Web Service Web Service
2.58
DateTime Temporal-Entity
{TheDate, TheTime}
5
Time Time
Time-Point {absolute_time}
TheTime TheDate
Interval Domain
{gHour, gMinute, gSecond} {gYear, gMonth, gDay} 1
{year, month, day} Date Time {hour, minute, second}
2 3
Calendar-Date Event
{dayOftheWeek, monthOftheYear}
4
Scientific-Event {millisecond}
S(o,i) =
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i)), o and i are primitive types
 SemDS(o,i), o and i are concept classes
153
f (o,i), otherwise
154
The Match Function
Semantic Similarity (Ω(O) <> Ω(I))
New
TheDate
Calendar-Date
A?
A1 … Similarity ? A?
A1 …
…
Web Service Web Service
2.25
DateTime Temporal-Entity
{TheDate, TheTime}
5
Time Time
Time-Point {absolute_time}
TheTime TheDate
Interval Domain
{gHour, gMinute, gSecond} {gYear, gMonth, gDay} 1
{year, month, day} Date Time {hour, minute, second}
2 3
Calendar-Date Event
{dayOftheWeek, monthOftheYear}
4
Scientific-Event {millisecond}
S(o,i) =
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i)), o and i are primitive types
 SemDS(o,i), o and i are concept classes
154
f (o,i), otherwise
155
The Match Function
Semantic Similarity (Ω(O) <> Ω(I))
New
TheDate
Event
A?
A1 … Similarity ? A?
A1 …
…
Web Service Web Service
2.14
DateTime Temporal-Entity
{TheDate, TheTime}
5
Time Time
Time-Point {absolute_time}
TheTime TheDate
Interval Domain
{gHour, gMinute, gSecond} {gYear, gMonth, gDay} 1
{year, month, day} Date Time {hour, minute, second}
2 3
Calendar-Date Event
{dayOftheWeek, monthOftheYear}
4
Scientific-Event {millisecond}
S(o,i) =
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i)), o and i are primitive types
 SemDS(o,i), o and i are concept classes
155
f (o,i), otherwise
156
The Match Function
Semantic Similarity (Ω(O) <> Ω(I))
New
TheDate
Scientific-Event
A?
A1 … Similarity ? A?
A1 …
…
Web Service Web Service
2.05
DateTime Temporal-Entity
{TheDate, TheTime}
5
Time Time
Time-Point {absolute_time}
TheTime TheDate
Interval Domain
{gHour, gMinute, gSecond} {gYear, gMonth, gDay} 1
{year, month, day} Date Time {hour, minute, second}
2 3
Calendar-Date Event
{dayOftheWeek, monthOftheYear}
4
Scientific-Event {millisecond}
S(o,i) =
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i)), o and i are primitive types
 SemDS(o,i), o and i are concept classes
156
f (o,i), otherwise
157
The Match Function
Semantic Similarity (Ω(O) <> Ω(I))
New
TheDate
Time Point
A?
A1 … Similarity ? A?
A1 …
…
Web Service Web Service
0.00
DateTime Temporal-Entity
{TheDate, TheTime}
5
Time Time
Time-Point {absolute_time}
TheTime TheDate
Interval Domain
{gHour, gMinute, gSecond} {gYear, gMonth, gDay} 1
{year, month, day} Date Time {hour, minute, second}
2 3
Calendar-Date Event
{dayOftheWeek, monthOftheYear}
4
Scientific-Event {millisecond}
S(o,i) =
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i)), o and i are primitive types
 SemDS(o,i), o and i are concept classes
157
f (o,i), otherwise
158
The Match Function
Semantic Similarity (Ω(O) <> Ω(I))
New
TheDate
Event
A?
A1 … Similarity ? A?
A1 …
…
Web Service Web Service
2.58
2.58
DateTime Temporal-Entity
2.25
2.25
{TheDate, TheTime}
5
Time Time
TheTime TheDate 2.14 Time-Point {absolute_time}
2.14Interval Domain
{gHour, gMinute, gSecond} {gYear, gMonth, gDay} 1
{year, month, day} Date Time {hour, minute, second}
2.05
2.05
2 3
Calendar-Date Event
{
0.00{dayOftheWeek, monthOftheYear}
0.00
4
Scientific-Event {millisecond}
S(o,i) =
3 SemDS(d(o),d(i))*SynS(n(o),n(i))*SemRS(r(o),r(i)), o and i are primitive types
 SemDS(o,i), o and i are concept classes
158
f (o,i), otherwise
159
Web Services
Integration
The degree of integration of a Web service is evaluated using
semantic information.
For each interface to integrate we construct a bipartite graph
with a bipartition b(O, I).
Each edge has a weight (semantic similarity).
We then compute the optimal matching*.
B B
R
b(O, I) b(O, I) A
M S
A X Y Z F A X B Y P Z F
N T
C
U
C D C D
*Bondy and Murty 1976 159
160
Discovery
Example of a Query
DAML
160
161
Discovery and Integration
Query Results
161
Semantic Process
Composition
163
Semantic Process Composition
Web Process
Composition
Composition is the task of combining and linking
existing Web Services and other components to
create new processes.
Types of Composition
Static Composition - services to be composed are
decided at design time
Dynamic Composition - services to be composed are
decided at run-time
163
SCET, Semantic Web Process Composition
164
Composition of Web Processes
Web Process
Web Process
Composition Composition
Web Service Discovery Web Service Integration
Once the desired Web
This is because the
Services have been
heterogeneous Web
found (Discovery),
services found in the
mechanisms are
first step need to
needed to facilitate the
interoperate with
resolution of structural
other components
and semantic
present in a process
differences
(integration) host
164
Integration 165
New Requirements
Web Process
Composition
When Web services are put together
Their interfaces need to interoperate.
Structural and semantic heterogeneity need to be resolved*.
Structural heterogeneity exists because Web services
use different data structures and class hierarchies to
define the parameters of their interfaces.
Semantic heterogeneity considers the intended
meaning of the terms employed in labeling interface
parameters. The data that is interchanged among Web
services has to be understood.
165
* Kashyap and Sheth 1996
Integration 166
New Requirements
Web Process
Composition
How to establish data connections between Web Services interfaces?
Receipt
Employee
Receipt
Client
Address Itinerary
Local Travel Info
Conference Tourism
Web Service Web Service Web Service
How to establish data connections between the different data
structures and class hierarchies of the interface parameters?
How to understand the intended meaning of the terms used in
labeling interface parameters?
166
167
Web Services
Interfaces
Web Process
Composition
To enhance the integration, Web services need to have
their inputs and outputs associated with ontological
concepts (annotation).
This will facilitate the resolution of structural and
semantic heterogeneities
Compute the optimal matching (Bondy and Murty, 1976)
using semantic information (Cardoso and Sheth, 2002)
B B
R
b(O, I) b(O, I) A
M S
A X Y Z F A X B Y P Z F
N T
C
U
C D C D
167
Bipartite graph. Each edge has a weight (semantic similarity).
Web Service QoS
169
Semantic QoS
Web Processes Quality of
Service
Organizations operating in modern markets,
such as e-commerce activities, require QoS
management.
QoS management is indispensable for
organizations striving to achieve a
higher degree of competitiveness.
169
Discovery 170
New Requirements
The autonomy of Web services does not allow for
designer to identify their operational metrics at
design time.
Nevertheless, when composing a process it is
indispensable to inquire the Web services
operational metrics.
Operational metrics characterize the Quality of
Service (QoS) that Web services exhibit when
invoked.
170
171
QoS
New Requirements
Quality of Service
Before Now
Time: 17 Hours
Cost?
Time?
Reliability?
Cost?
Fidelity?
Reliability?
N1 E N2
Fidelity?
1
Z1
B
2
N1 E N2
A N1 E N2 F
1 5 4 2 C
C D
1 3
Z1 Z2
A N1 E N2 F N1 E N2
C D C D
F
171
172
QoS Semantics
QoS