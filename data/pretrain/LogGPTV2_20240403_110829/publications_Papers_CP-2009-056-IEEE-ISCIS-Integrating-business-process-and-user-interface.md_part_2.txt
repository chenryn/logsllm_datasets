### IV. Integration of UI-Oriented Methodology

In this section, we discuss the integration of a user interface (UI)-oriented methodology with the business process, aiming to avoid non-deterministic behavior. We extend two well-accepted existing languages, BPMN and DIAMODL, to ensure that both have equivalent, well-defined semantics in terms of modeling events. Furthermore, we demonstrate the synchronization between these models using model transformation algorithms.

#### A. Event-Based Coordination

The business process must ensure that any event occurring during its execution is properly handled by the corresponding UI elements, especially when human involvement is required. Therefore, we consider an event-based coordination to achieve synchronization between the two models. However, such synchronization (achieved through model transformations as detailed in the next section) requires both models to be semantically equivalent in terms of modeling events.

Given the current state of DIAMODL and BPMN specifications, we identify three important points that need to be addressed:

1. **Events in DIAMODL**:
   - DIAMODL implicitly treats events as parts of other components such as computation objects or interactors.
   - Computations support communication and synchronization with internal and external entities.
   - Even though computations explicitly state the participants of the dialogue, they do not define which events and event types are caught or thrown, nor the event conditions and rules holding in the dialogue.
   - To utilize their consumption and production with business process events, events triggered within computations need to be explicitly defined as part of the model.

2. **Events in BPMN**:
   - BPMN comes with a rich set of event types but lacks the capability to express different levels of events, i.e., specifying events only to be consumed by the UI.
   - This is necessary because a business process can interact not only with the UI but also with other business processes in a BPMN model.

3. **Two-Way Synchronization**:
   - According to the ISE methodology, both models are designed separately as part of different service aspects.
   - This confronts the requirement for synchronization, as both models need to be aligned and integrated.

#### B. Extension for the DIAMODL Notation

To meet the requirements described in Section III, we propose three refinements of the computation component:

1. **Internal and External Computations**:
   - We differentiate between internal and external computation components.
   - Internal computations are value-based mapping functions holding among UI components.
   - External computations are value-based mapping functions holding between UI components and an interactive system (e.g., network services).
   - External computations must include the description of endpoints and their messages, regardless of the message formats or network protocols used to communicate.
   - When more than one external computation holds a dialogue with a service where inputs and outputs are dependent on each other, the external computation should define the message sequence flow, e.g., which message should be processed first (start-message), which are the intermediate ones (intermediate-message), and the last one (end-message) before closing the communication channel.

2. **Event Triggers**:
   - Computation components include event triggers, and we define three types of event messages: response, notification, and error.
   - Based on these message types, we categorize event triggers into catching and throwing events.
   - Throwing events' interaction types are:
     - One-way: An operation that only sends an input.
     - Request-response: An operation sends a request, then waits for a response or an error.
     - Request-notification: An operation sends a request, then waits for a message notification or an error.
   - Catching events are responsible for the reception of messages and are similarly categorized into one-way, request-response, and request-notification interaction types.

3. **Event-Condition-Action (ECA) Rules**:
   - Computations are extended with ECA rules, which automatically perform actions in response to events provided that stated conditions hold.
   - ECA rules introduce reactive functionality to computations, allowing them to determine the direction of the dialogue flow based on a single rule.
   - Example 4.1 shows an ECA rule for a notify-response-like message exchange, where the direction of the dialogue flow is specified based on the type of event message (notification or error).

**Example 4.1: ECA Rule for Notify-Response-Like Message Exchanges**

```plaintext
ON input-event
IF input-event.type == NOTIFICATION
DO goAssociation.sourceNode = compEx
```

#### C. Synchronization Between Models

Finally, a QVT-based model transformation is used to synchronize the models during service design. Figure 5 shows a fragment of the transformation using the QVT syntax. The transformation is defined based on the corresponding meta-models defined according to the Eclipse Modeling Framework (EMF) specification. The actual mapping between computations and events is handled by the top-level `Comp2Activity` relation, specified on the domains of types `Computation` (c) and `Activity` (a). A pattern is applied on `Computation` to check whether it is external or internal, and only external ones are mapped. Additionally, we correlate the matching elements by their names, assuming that elements are uniquely labeled in both models.

In the BPMN meta-model, all elements belong to a generic activity class, which is further specialized by their `activityType` attributes. This is achieved using three additional sub-relations called in the `where` clause based on the `interactionType` of the `Computation`. Due to space limitations, we only show the `transResponse` relation that maps a request-response type `Computation` to an event conjunction pattern. It is introduced as a new activity type (i.e., `EventConj`) in the BPMN meta-model, which involves one or more sub-events.

**Figure 5: A Fragment of Transformation Between DIAMODL and BPMN in QVT Syntax**

```plaintext
transformation Diamodl2Bpmn(dia:diamodl, bpmn:bpmn)
{
    ...
    top relation Comp2Activity {
        domain dia c:Computation{ name=nm, type = 'external' }
        domain bpmn a:Activity{ name=nm }
        where{
            if (c.interactionTyp='O') transOneway(c,a)
            elif (c.interactionTyp='N') transNotification(c,a)
            elif (c.interactionTyp='R') transResponse(c,a)
            endif;
        }
    }
    ...
    relation transResponse(c,a){
        domain dia c:Computation{}
        domain bpmn a:Activity{
            activityType='EventConj',
            subEvent sa1:Activity{},
            subEvent sa2:Activity{}
        }
        where
        {
            setSubEvents(c, a);
        }
    }
    ...
    helper setSubEvents(c:Computation,a:Activity)
    { ... }
}
```

### V. Related Work

The need for modeling human user interaction within process modeling reflects the increase in recent work in this area. In [11] and [12], the authors use the standard process modeling language BPMN for both modeling processes and task modeling, and DIAMODL for modeling the UI structure and behavior. They propose a refactoring process of the original BPMN model as an intermediary step to synchronize with the DIAMODL model. This refactoring aims to make explicit what each user does and how it interacts with its environment. However, they do not specify how the exchange of message-event and data is conducted.

In [13] and [14], the authors use a less formal UI model and couple it with BPMN when the business process is used as a starting point for the UI design. UI models and business process models are aligned with business requirements. However, it is not clear how the business requirements are collected or how the alignment of the models is carried out. In our approach, we propose the alignment of the models following business requirements, which, in turn, are defined in perspectives/dimensions following a formal methodology. We maintain the independence among models, ensuring that one business process model can be coupled with different UI behavior models, which focus on the interaction regardless of the environment considered.

In [15], the authors apply a model-driven approach that derives UIs from business processes to keep the traceability of the business process and the UI. They use task models to bridge business process and UI design. In [16], the authors describe the design of a user interface for a Web service based on the WSDL (Web Service Description Language) description. For the UI design, they developed a new UI specification language and the associated authoring environment, which can be used for the abstract and concrete UI definition. Operations and data types defined in WSDL are bound to the UI model.

### VI. Conclusion

Service engineering converges into a complex task of modeling business services involving various aspects to specify both the execution and usage of services. Typically, the modeling process of business services results in several correlated models. On the one hand, there is a need to keep these models apart to attain the levels of abstraction to model different aspects of a service. This is mostly due to the fact that incorporating different models for different aspects of the service enables the separation of concerns during the design while attaining a staged development to evolve the service idea into an executable artifact. On the other hand, it is important to maintain the consistency and integrity of business process models.

The ISE methodology for engineering services supports the modeling of business services based on perspectives and dimensions. This methodology directly meets the requirements of the independence of models, which, however, should be aligned and integrated. In this paper, we demonstrate the feasibility of our approach using only two models that take part in the traditional design of the user interface and business process of a service. To make the relationship between business process and UI models explicit, we extend two well-accepted existing languages: the business process modeling language BPMN and the user interface dialogue language DIAMODL, and implement model-driven transformation rules to provide support for business processes integrated with user interface design. The extension of both models was necessary to focus on aspects of communication and synchronization.

Our future work aims to complete the transformation rules of the ISE matrix and, thus, study in more detail the relationship between all models. Additionally, we plan to evaluate the ISE workbench for guiding independent improvements on the modeling languages at each perspective and dimension.

### Acknowledgment

This research was funded by means of the German Federal Ministry of Economy and Technology under the promotional reference 01MQ07012. The authors take responsibility for the contents.

### References

[1] J. Cardoso, K. Voigt, and M. Winkler, “Service engineering for the internet of services,” in Enterprise Information Systems X, 2008, pp. 17–25.

[2] S. White, “Introduction to BPMN,” IBM Cooperation, pp. 2008–029, 2004.

[3] H. Traetteberg, “A hybrid tool for user interface modelling and prototyping,” in CADUI’06. Bucharest, Romania: Springer, 2007.

[4] J. A. Zachman, “A framework for information systems architecture,” vol. 26, no. 3. NJ, USA: IBM Corp., 1987, pp. 276–292.

[5] T. Stahl and M. Voelter, Model-Driven Software Development: Technology, Engineering, Management, 1st ed. Wiley & Sons, 2006.

[6] D. L. Parnas, “On the criteria to be used in decomposing systems into modules.” NY, USA: Springer, 2002, pp. 411–427.

[7] B. Baxley, “Universal model of a user interface,” in DUX ’03. NY, USA: ACM, 2003, pp. 1–14.

[8] J. J. Garrett, The Elements of User Experience: User-Centered Design for the Web. CA, USA: New Riders Publishing, 2002.

[9] L. Constantine and L. Lockwood, Software for use: a practical guide to the models and methods of usage-centered design. NY, USA: ACM, 1999.

[10] A. P. Barros, G. Decker, and A. Grosskopf, “Complex events in business processes,” in BIS, ser. LNCS, vol. 4439. Springer, 2007, pp. 29–40.

[11] H. Traetteberg, “UIDesign without a Task Modeling Language–Using BPMN and Diamodl for Task Modeling and Dialog Design,” in HCSE-TAMODIA’08. Berlin: Springer, 2008, pp. 110–117.

[12] H. Trætteberg and J. Krogstie, “Enhancing the usability of BPM-solutions by combining process and user-interface modelling,” in PoEM, 2008, pp. 86–97.

[13] N. Sukaviriya, V. Sinha, T. Ramachandra, and S. Mani, “Model-driven approach for managing human interface design lifecycle,” in MoDELS, 2007, pp. 226–240.

[14] N. Sukaviriya, V. Sinha, T. Ramachandra, S. Mani, and M. Stolze, “User-centered design and business process modeling: Cross road in rapid prototyping tools,” in INTERACT(1), 2007, pp. 165–178.

[15] K. S. Sousa, H. M. Filho, and J. Vanderdonckt, “Addressing the impact of business process changes on software user interfaces,” in BDIM, 2008, pp. 11–20.

[16] F. Paternò, C. Santoro, and L. D. Spano, “Designing usable applications based on web services,” in I-USED, ser. CEUR Workshop Proceedings. CEUR-WS.org, 2008.