# BHUSA @BlackHatEvents
## ELF Section Docking: Revisiting Stageless Payload Delivery
### Presenter: Dimitry Snezhkov, X-Force, IBM Corporation
#### Information Classification: General

### Overview
- **Research Focus**: Offense and Defense
- **Support Areas**: Tooling

### Goals
- Provide an overview of static payload bundling mechanisms in Linux.
- Discuss the evolution of static payload embedding.
- Explore methods to improve the viability of static payloads in delivery.
- Examine binary compatibility of ELF sections as a unit of payload.
- Introduce ELF section docking: A payload attachment factory at adversarial sites.
- Analyze detection, evasion successes, and pitfalls of the docking approach.
- Demonstrate the ELFPack PoC.

### Payload Delivery
#### Dynamic
- **Generated at Runtime**
- **Fetched at Runtime from External Source**
  - **Pros**:
    - Lighter loader
    - Lower chance of detection due to the absence of embedded payload
    - More flexibility
  - **Cons**:
    - Higher chance of detection with use
    - More exposed loading mechanism
    - More moving parts
    - More detonation dependencies (environment)
    - Long-haul activation/dormancy issues

#### Static
- **Bundled with Delivery Mechanisms**
- **Time-released**
  - **Pros**:
    - Lower chance of detection due to close-coupled variance
    - Fewer detonation dependencies (environment)
    - Fewer moving parts
    - Better activation/dormancy once deployed
  - **Cons**:
    - Heavier close-coupled loader, greater size
    - Higher chance of detection due to embedded payload
    - Less flexibility (runtime awareness and variance)

### Empirical Observations
- **Dynamic Payloads**:
  1. Deploy stager
  2. Fetch payload
  3. Load payload (possibly on itself)
  4. Optionally delete stager
- **Static Payloads**:
  1. Deploy the bundle (possibly on itself)
  - Less widespread in long-haul implants

### Improving Static Delivery
- **Dynamic Delivery** is well understood.
- Can we improve the traits of static delivery?

### Payload Delivery Tradeoffs
- **Desired Dynamic Traits**:
  - Lower chance of detection due to the absence of embedded payload
  - More flexibility
- **Undesired Static Traits**:
  - Heavier close-coupled loader, greater size
  - Higher chance of detection due to embedded payload
  - Less flexibility (runtime awareness and variance)

### How We Embed
#### Hex-binary Inclusion Compilation and Linking
- **Default .data Section**:
  - Directly via compiler
  - Tools: `bin2c` or `xxd -i payload.bin > payload.h`
  - Easily traced at runtime debugging or static binary inspection

- **Separate ELF Section**:
  - Place payload data or certain variables in additional sections.
  - Achieved with compiler-dependent mechanisms (e.g., `__attribute__` in GCC).
  - Can be traced at runtime debugging or static binary inspection.

#### Linker-binary Inclusion
- **Assembler and Linker Specific Directives**:
  - Assembler dependent `.incbin`-like directive can create a section and embed a payload.
  - Tools: `gcc -c payload.s` or `ld -r -b payload.bin -o payload.o`
  - Note: Fully functional payload file. Path to create "fat" binaries for packing.
  - Retrieval in code can be done as follows.

- **More Ergonomic Tools**:
  - `INCBIN` from @graphitemaster
  - In-code solution to construct multi-sectional ELF payload:
    - Important: `PROGBITS` directive

### How We (Better) Embed
- **Compiler/Linker-based Payloads** are not ideal.
- **Challenges**:
  - Tightly coupled to the creation of the payload loader.
  - Data carrying sections have `PROGBITS` flags set by default, leading to automatic loading by the OS loader.
  - This increases the risk of detection.

- **Tradeoffs**:
  - Type of section and flags determine whether the OS loader loads it into memory upon executable launch.
  - Some sections are loaded automatically by default, others are not.
  - Offense can take advantage of this.

### Avoiding Default OS Loader Actions
- **Strategies**:
  - Avoid setting flags on sections that assume default loading in memory.
  - Use a different type of section that does not load in memory (e.g., `SHT_NOTE`).

- **Example: SHT_NOTE**:
  - Widely used in Linux system binaries.
  - Avoids default OS loader actions.

### ELF Section Docking
- **Decoupling Payloads**:
  - Create a dormant section in the ELF image (in code).
  - Avoid loading it in memory by the OS loader.
  - Break the address offset relationship of the loader code with the section.
  - Teach the loader how to find and load its foreign data section, effectively "docking" a standalone payload to a loader in a loosely coupled manner.

- **Binary Compatibility at Section Level**:
  - Injector/bundler introduces a payload section to the loader without operating at the code level, only binary compatibility.
  - Loader is aware of how to load a payload section but not what the payload is.

### Possible Wins
- **Static ELF Loader**:
  - Shipped on its own
  - Devoid of payloads
  - Only mechanisms to load a section on demand and bootstrap the payload from it.

- **Sectional Payload**:
  - Created separately
  - Bundled with the loader at any time as a static stage
  - Better dormancy control with an injector
  - Better packing
  - No overhead on detection for conventional packer processing and code
  - In-memory, not tmpfs for unpacks
  - Fat binaries possible (multiple sections)
  - Can be a full ELF executable if needed

- **Injector**:
  - Can broker attachment of sections from several binaries (dormant stages) to construct a section and inject into the loader.

### ELFPack
- **Sectional ELF Injector/Packer**:
  - Streamlined payload generation pipeline
  - In-field payload to loader attachment without a compiler

- **Sectional ELF Loader**:
  - Loads full ELFs or shellcode from reading and parsing its own binary.
  - Tracing does not see `mprotect()` calls on mapping into memory and loading.
  - Airgapped separation between where the payload is and how it’s loaded.
  - Ability to accept and forward arguments to sectional payloads.

- **Binary Payload in Section**:
  - Can be a fully functional ELF binary with fewer constraints.
  - Can be uniquely obfuscated.
  - Can be memory-resident or extracted to FS or run as part of a table of contents (fat payload loader).
  - Does not need to be relocated when preparing for execution.
  - Cross-attachment binary evasion chain: Loader A can read Loader B’s payload.

### ELFPack – Loader
- **Option A: SYS_Memfd_create()**:
  - Done with libreflect or Zombieant pre-loader.
  - More detectable at levels:
    - Anonymous file in `/proc/self/fd/`
    - Uses `sys_memfd_create` (syscall #319)
    - Does fork/exec, BPF tracing for `execve()` will record.

- **Option B: Userland Exec**:
  - Done with libreflect.
  - Hollows out the loader and overlays with the payload.
  - No `sys_enter_exec`/`sys_exit_exec` calls. BPF tracing for `execve()` not catching.
  - Downside: Cannot daemonize via loader (loader memory is gone on exec image overlay), but the payload can daemonize itself when launched.

### ELFPack: Detection
- **Binwalk**:
  - Raw Payload (mettle)
  - Sectioned Payload (mettle)
- **Entropy Analysis**:
  - Raw Payload (mettle)
  - Sectioned Payload (mettle)
- **BPF + YARA**:
  - Tracepoints -> syscalls:
    - `Sys_enter_memfd_open`
    - `Sys_exit_memfd_open`
    - `Sys_enter_exec*`
  - YARA static scan ELF
  - More detection and evasion
  - BPF filter based

### ELFPack Demo

### Summary
- **Section Docking** presents desired features for payload delivery.
- **Static vs. Dynamic Payload Loading** is a dial, not an either-or.
- Overcome limitations of packers for in-memory unwrap and detection.
- Detect ELF packing at runtime and statically.
- Overcome detections with packing and encryption.

### Q&A?
- **Code**: [https://github.com/xforcered/elfpack](https://github.com/xforcered/elfpack)

Thank you!