are assumed to behave honestly and how many are assumed to
be “corrupted” in some way. The protocols in MP-SPDZ all as-
sume threshold corruption, that is a constant number of parties are
thought to be corrupted. There is a considerable difference between
an honest majority and a dishonest majority, that is, whether this
threshold is strictly below half the number of parties or not. The
protocols for a dishonest majority are generally more intricate and
more expensive.
The second question is how corrupted parties behave. The two
main categories here are whether they still follow the protocol but
collude on extracting information (called semi-honest or passive
corruption) or whether they also deviate from the protocol in or-
der to gain information or distort the result of the computation
(called malicious or active corruption). The latter setting raises fur-
ther questions as to whether the computation can still continue in
case of deviation (guaranteed output) and whether the corrupted
parties can learn the result without honest parties doing so (fair-
ness). All protocols in MP-SPDZ with malicious security work in
the malicious-with-abort model, which means that deviation is
detected but the protocol cannot recover after that. The reason
is that fairness is relatively expensive, and guaranteed output is
outright impossible with dishonest majority. Consider the case of
a two-party protocol: One party cannot continue when the other
stops communicating.
Marcel Keller
Table 2: Time in seconds to compute an inner product of two 100,000-element vectors of 64-bit integers in a WAN setting.
Protocols skipping input sharing are denoted by ‘∗’.
ABY
ABY3
EMP-toolkit
MPyC
Obliv-C
ObliVM
PICCO
SCALE-MAMBA
MP-SPDZ
SH 2-party (OT)
27
⊥
⊥
⊥
⊥
⊥
⊥
⊥
29
SH replicated 3-party
⊥
1.5
⊥
⊥
⊥
⊥
⊥
⊥
0.9
Shamir Malicious Shamir
⊥
⊥
⊥
⊥
⊥
⊥
⊥
115
14
⊥
⊥
⊥
9.2
⊥
⊥
0.2∗
⊥
0.2∗/1.8
SPDZ (HighGear) Yao’s GC (32-bit)
⊥
⊥
314
⊥
343
1,712
⊥
⊥
319
⊥
⊥
⊥
⊥
⊥
⊥
⊥
570
170
Table 3: Total communication in MB to compute an inner product of two 100,000-element vectors of 64-bit integers. Protocols
skipping input sharing are denoted by ‘∗’.
ABY
ABY3
EMP-toolkit
MPyC
Obliv-C
ObliVM
PICCO
SCALE-MAMBA
MP-SPDZ
SH 2-party (OT)
312
⊥
⊥
⊥
⊥
⊥
⊥
⊥
312
SH replicated 3-party
⊥
4.8
⊥
⊥
⊥
⊥
⊥
⊥
1.6
Shamir Malicious Shamir
⊥
⊥
⊥
⊥
⊥
⊥
⊥
157
83
⊥
⊥
⊥
8.0
⊥
⊥
0.006∗
⊥
6.4
SPDZ (HighGear) Yao’s GC (32-bit)
⊥
⊥
3,395
⊥
3,523
6,312
⊥
⊥
3,616
⊥
⊥
⊥
⊥
⊥
⊥
⊥
4,547
592
Computation domains. There is a variety of mathematical struc-
tures used in multi-party computation. Often this takes the form of
integers modulo some number M. If M = 2 the computation reduces
to binary circuits because addition then corresponds to XOR and
multiplication corresponds to AND. For larger M, the literature has
established the term arithmetic circuits because the basic operations
provided remain addition and multiplication. If M is a prime, the
domain satisfies the definition of a field, that is, all numbers except
zero have a multiplicative inverse. This is required for a number
of schemes including Shamir’s secret sharing [Sha79] and SPDZ
[DPSZ12]. For the latter, these requirements were later adapted for
computation modulo a power 2k, resulting in the SPDZ2k protocol.
However, integer computation modulo a prime is not the only ex-
ample of a finite field. MP-SPDZ also implements computation in
F2k . The latter domain particularly has applications for symmetric
cryptosystems such as AES, which is based on arithmetic in F28.
Secret sharing. This concept of distributing information is at the
core of many multi-party computation protocols. Information is
distributed in a way that allows some sets (called qualified) of parties
to reconstruct it while some smaller sets (called unqualified) cannot
deduce anything from the shares they are given. The exact definition
of which subsets can and cannot recover is called an access structure.
Clearly, a superset of a qualified set has to be qualified as well, and
a subset of an unqualified set has be to unqualified for the access
structure to make sense. Furthermore, the common definition of
random number xi ∈ [0, M − 1] to Pi such that
secret sharing requires that all subsets of parties are either qualified
or unqualified.
As an example consider additive secret sharing. A number x in
a range [0, M − 1] is shared among parties P1, . . . , Pn by sending a
i xi = x mod M.
It is easily seen that the all parties together can reconstruct x while
the view of any strict subset is indistinguishable to a random set of
numbers. This secret sharing scheme is used in all protocols with
dishonest majority except schemes based on garbling.
Other secret sharing schemes used in MP-SPDZ include repli-
cated secret sharing [BL90] where one starts with additive secret
sharing but sends more than one share to every party and Shamir’s
secret sharing [Sha79] where shares are determined using a ran-
dom polynomial of fixed degree equal to the maximum number of
corrupted parties.
All of these secret sharing schemes are linear, that is, any (affine)
linear combination of secret-shared values can be computed locally
because the reconstruction is linear as well.
Beaver’s multiplication. This technique [Bea92] reduces multipli-
cation of secret numbers to multiplication of secret random num-
bers, which is useful both in terms of security and practicality. First,
it allows executing the multiplication of secret random numbers
optimistically before checking whether the parties followed the
protocol. If the check fails the protocol can abort without conse-
quences because the secret randomness is independent of the actual
MP-SPDZ: A Versatile Framework for Multi-Party Computation
secret data. Second, Beaver’s multiplication enables batch-wise pre-
processing even if the actual computation is sequential, which is a
particular advantage when using lattice-based cryptosystems that
(only) allow to encrypt many values at once efficiently.
The multiplication works as follows: Let [x] denote a secret
sharing of x, and assume that a triple ([a],[b],[ab]) for independent
random a and b is available. The multiplication of [x] and [y] can
then be computed after revealing x + a and y + b. Revealing these
does not reveal x or y because a and b are secret and randomly
chosen. After revealing the sums, the parties compute
[xy] = [(x + a − a) · (y + b − b)]
= (x + a) · (y + b) − (x + a) · [b] − (y + b) · [a] + [ab].
Note that this computation is affine linear with respect to the secret
values and thus it is possible to compute it with any linear secret
sharing scheme.
Oblivious transfer. This is a basic two-party cryptographic pro-
tocol that was the first to be used for dishonest-majority computa-
tion. Essentially, one party (called sender) inputs two strings s0, s1,
and the other party (called receiver) inputs a bit b and learns sb.
Crucially, the sender does not learn b, and the receiver does not
learn s1−b. It is relatively straightforward to construct a protocol
from oblivious transfer that allows two parties to compute a secret
sharing of the product of private numbers known to each without
revealing the inputs. The construction is leveraged by protocols
such as MASCOT [KOS16]. Oblivious transfer is only known to
be constructed from public-key cryptography. However, OT exten-
sion [IKNP03] can be used keep the use of such more expensive
schemes at a low constant while using more symmetric cryptogra-
phy instead.
Homomorphic encryption. This refers to encryption schemes that
enable operating on ciphertexts efficiently in a way that implies
some operation without revealing the cleartext. While encryption
schemes with limited homomorphism have been known for a while
(textbook RSA is homomorphic in some sense), only the emergence
of lattice-based cryptography led to scheme that are homomorphic
with respect to two operations. MP-SPDZ uses the leveled encryp-
tion scheme by Brakerski et al. [BGV12], which requires that a
vector of numbers are encrypted at once. The minimum length de-
pends on the plaintext modulus but generally ranges from several
thousand to several ten thousand. The concrete implementation is
based on the one by Gentry et al. [GHS12], which is defined by the
use of Montgomery representation [Mon85] and fast Fourier trans-
form. The first facilitates multiplication modulo a prime without
expensive modular reduction, and the second is an efficient method
for converting a list of numbers to a polynomial in the plaintext
space such that the multiplication of two such polynomials corre-
sponds to an element-wise product of the numbers. This approach
imposes a restriction on the prime modulus that can be used, but
many applications requiring only general integer-like computation
are indifferent to the actual prime.
3 THE PROTOCOLS
Table 4 shows which protocol variants in each combination of
security model and computation domain are implemented in MP-
SPDZ. In the following sections we will briefly describe them.
3.1 Dishonest Majority
All protocols for dishonest majority use techniques related to public-
key cryptography, either oblivious transfer of homomorphic en-
cryption. Research on practical protocols in this line was started by
Nielsen et al. [NNOB12] and Damgård et al. [DPSZ12]. The former
proposed a two-party protocol computing binary circuits based on
oblivious transfer (later dubbed TinyOT), and the latter proposed
a multi-party protocol for computation in fields (modulo a prime
or F2k ) using homomorphic encryption (named SPDZ after the
authors). Both use Beaver’s technique of dividing the computation
in a data-independent and a data-dependent phase [Bea92]. The
former (sometimes called “offline”) outputs correlated information
that is used by latter together with the actual private data.
MASCOT. This protocol denotes a way of computing Beaver
triples used in SPDZ using oblivious transfer (OT) with malicious
security [KOS16], which was the first offline phase released in
SPDZ-2. A core technology here is the use of so-called OT extension
with malicious security [KOS15], which considerably increases the
throughput because public-key cryptography is only used briefly
at the beginning of the computation.
SPDZ2k . MASCOT has been adapted to computation modulo a
power of two [CDE+18, DEF+19]. The main challenge here is that
not every element in Z2k has an inverse, which is a crucial tool in
proving the security of MASCOT (and SPDZ). SPDZ2k mitigates
this by moving to Z2k′ for a larger k′ in order to counter the effect
of zero divisors. MP-SPDZ fully implements SPDZ2k using its own
implementation of Z2k optimized with compile-time k.
SPDZ and Overdrive. LowGear and HighGear [KPR18] are the
names of two protocols computing Beaver triples for SPDZ using
semi-homomorphic and somewhat homomorphic encryption, re-
spectively. They were part of SPDZ-2. Semi-homomorphic means
that it is possible to add ciphertexts and multiply ciphertexts with
cleartexts in order to obtain an encryption of the sum and the
product, respectively. By somewhat homomorphic we mean that in
addition it is also possible to multiply two ciphertexts but the result
cannot be further multiplied by a ciphertext. All known homomor-
phic cryptosystems incur a considerable performance penalty for
every additional level of ciphertext multiplication. The core idea of
SPDZ, LowGear, and HighGear is to minimize the number of such
multiplication levels using multi-party computation techniques.
LowGear and HighGear represent a trade-off in that LowGear runs
a sub-protocol between all pairs of parties (similar to Bendlin et
al. [BDOZ11]) and therefore does not scale as well with the number
of parties as HighGear.
Since MP-SPDZ does not implement the key generation needed
for LowGear and HighGear with malicious security, variants of
them using covertly secure key generation account for the two
Table 4: Protocols implemented in MP-SPDZ. ‘-’ indicates removing parts needed only for malicious security, ‘∗’ denotes other
modifications, and numbers in brackets stand for the number of protocol variants. All protocols in the first column support
both types of fields.
Marcel Keller
Security model
Malicious, dishonest majority
Covert, dishonest majority
Semi-honest, dishonest majority
Malicious, honest majority
Malicious, honest supermajority