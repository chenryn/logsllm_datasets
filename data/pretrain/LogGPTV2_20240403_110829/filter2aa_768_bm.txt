### 入口函数

在 Windows 程序中，入口函数的地址记录在可执行文件头结构中的 `IMAGE_OPTIONAL_HEADER` 结构的 `AddressOfEntryPoint` 字段。内核文件的入口函数也是如此。通过以下步骤，可以使用 WinDBG 观察内核文件的入口函数：

1. 启动 WinDBG 并开始一个本地内核调试会话。
2. 使用 `lm nt` 命令列出内核文件的基本信息：
   ```plaintext
   lkd> lm a nt
   start    end      module name
   804d7000 806cdc80 nt (pdb symbols) d:\symbols\ntkrnlpa.pdb\C…\ntkrnlpa.pdb
   ```
   其中 `804d7000` 是内核模块在内存中的起始地址。

3. 检查 DOS 头：
   ```plaintext
   lkd> dt nt!_IMAGE_DOS_HEADER 804d7000
       +0x000 e_magic          : 0x5a4d
   ...
       +0x03c e_lfanew         : 232
   ```
   `e_lfanew` 字段的值表示新的 NT 类型可执行文件头结构的起始偏移地址。

4. 查看 `IMAGE_NT_HEADERS` 结构：
   ```plaintext
   lkd> dt nt!_IMAGE_NT_HEADERS 804d7000+0n232
       +0x000 Signature        : 0x4550
       +0x004 FileHeader       : _IMAGE_FILE_HEADER
       +0x018 OptionalHeader   : _IMAGE_OPTIONAL_HEADER
   ```

5. 显示 `AddressOfEntryPoint` 字段的值：
   ```plaintext
   lkd> dt _IMAGE_OPTIONAL_HEADER -y Add* 804d7000+0n232+18
   nt!_IMAGE_OPTIONAL_HEADER
       +0x010 AddressOfEntryPoint : 0x1b6f5c
   ```

6. 使用 `ln` 命令查找该地址对应的符号：
   ```plaintext
   lkd> ln 0x1b6f5c+804d7000
   (8068df5c)   nt!KiSystemStartup   |  (8068e244)   nt!KiSetCR0Bits
   Exact matches:
       nt!KiSystemStartup =
   ```

这表明入口地址处的函数名为 `KiSystemStartup`，这是 Windows 操作系统内核文件的入口函数。

当然，也可以使用扩展命令 `!dh` 一次性显示以上信息：
```plaintext
lkd> !dh 804d7000 -f
File Type: EXECUTABLE IMAGE
...
  1B6F5C address of entry point
```

当 OS Loader（如 NTLDR 或 WinLoad）调用 `KiSystemStartup` 时，它会将启动选项以 `LOADER_PARAMETER_BLOCK` 数据结构的形式传递给 `KiSystemStartup` 函数。Windows Vista 的内核符号文件包含了这个结构的符号，因此在对 Windows Vista 进行内核调试时可以观察到其详细定义。

### 内核初始化

`KiSystemStartup` 函数开始执行后，首先会完善基本的执行环境，包括建立和初始化处理器控制结构（PCR）、任务状态段（TSS）以及设置用户调用内核服务的 MSR 寄存器等。接下来的过程可以分为两部分：左侧是初始的 Idle 进程中的过程，右侧是系统进程（System）中的执行体阶段 1 初始化过程。

#### `KiSystemStartup` 函数的主要工作：

1. 调用 `HalInitializeProcessor()` 初始化 CPU。
2. 调用 `KdInitSystem` 初始化内核调试引擎。
3. 调用 `KiInitializeKernel` 开始内核初始化，该函数会调用 `KiInitSystem` 来初始化系统的全局数据结构，调用 `KeInitializeProcess` 创建并初始化 Idle 进程，调用 `KeInitializeThread` 初始化 Idle 线程。

对于多 CPU 系统，每个 CPU 都会执行 `KiInitializeKernel` 函数，但只有第一个 CPU 会执行所有初始化工作，其他 CPU 只执行与 CPU 相关的部分。全局变量 `KeNumberProcessors` 标志着系统中的 CPU 个数，其初始值为 0。因此，当 0 号 CPU 执行 `KiSystemStartup` 函数时，`KeNumberProcessors` 的值刚好是当前的 CPU 号。当第二个 CPU 开始运行时，这个全局变量会被递增 1，依此类推，直到所有 CPU 都开始运行。

### 执行体的阶段 0 初始化

在 `KiInitializeKernel` 函数结束基本的内核初始化后，它会调用 `ExpInitializeExecutive()` 开始初始化执行体。典型的执行体部件包括进程管理器、对象管理器、内存管理器和 IO 管理器等。考虑到各个执行体之间可能有相互依赖关系，每个执行体会有两次初始化的机会：第一次通常是做基本的初始化，第二次做可能依赖其他执行体的动作。前者称为阶段 0 初始化，后者称为阶段 1 初始化。

`ExpInitializeExecutive` 的主要任务是依次调用各个执行体的阶段 0 初始化函数，包括：

- 调用 `MmInitSystem` 构建页表和内存管理器的基本数据结构。
- 调用 `ObInitSystem` 建立名称空间。
- 调用 `SeInitSystem` 初始化 token 对象。
- 调用 `PsInitSystem` 对进程管理器做阶段 0 初始化。
- 调用 `PpInitSystem` 让即插即用管理器初始化设备链表。

#### 进程管理器的阶段 0 初始化：

1. 定义进程和线程对象类型。
2. 建立记录系统中所有进程的链表结构，并使用 `PsActiveProcessHead` 全局变量指向这个链表。
3. 为初始的进程创建一个进程对象（`PsIdleProcess`），并命名为 Idle。
4. 创建系统进程和线程，并将 `Phase1Initialization` 函数作为线程的起始地址。

注意最后一步，因为它衔接着系统启动的下一个阶段，即执行体的阶段 1 初始化。但是这里并没有直接调用阶段 1 的初始化函数，而是将其作为新创建系统线程的入口函数。此时由于当前的 IRQL 很高，所以这个线程还不能得到执行。在 `KiInitializeKernel` 函数返回后，`KiSystemStartup` 函数将当前 CPU 的中断请求级别（IRQL）降低到 `DISPATCH_LEVEL`，然后跳转到 `KiIdleLoop()`，退化为 Idle 进程中的第一个 Idle 线程。当再有时钟中断发生时，内核调度线程时，便会调度执行刚刚创建的系统线程，于是阶段 1 初始化便可以继续了。

### 执行体的阶段 1 初始化

阶段 1 初始化占据了系统启动的大部分时间，其主要任务是调用执行体各机构的阶段 1 初始化函数。有些执行体部件使用同一个函数作为阶段 0 和阶段 1 初始化函数，使用参数来区分。这一阶段调用的主要函数包括：

- 调用 `KeStartAllProcessors()` 初始化所有 CPU。
- 再次调用 `KdInitSystem` 函数，并调用 `KdDebuggerInitialize1` 来初始化内核调试通信扩展 DLL（如 KDCOM.DLL）。
- 调用 IO 管理器的阶段 1 初始化函数 `IoInitSystem` 进行设备枚举和驱动加载工作，需要很长时间。

在这一阶段结束前，会创建第一个使用映像文件创建的进程，即会话管理器进程（SMSS.EXE）。会话管理器进程会初始化 Windows 子系统，创建 Windows 子系统进程和登录进程（WinLogon.EXE）。

### 0x7B 蓝屏

上述过程不总是一帆风顺的。如果遇到意外，系统通常会以蓝屏形式报告错误。例如，0x7B 蓝屏发生在内核和执行体初始化期间。

#### 如何寻找 0x7B 蓝屏的故障原因？

1. 根据蓝屏的停止代码 0x7B 查阅 WinDBG 的帮助文件或 MSDN 了解其含义。0x7B 表示 INACCESSIBLE_BOOT_DEVICE 错误，意味着系统在读写引导设备时出错。
2. 访问系统分区出现问题的原因可能是访问方式不同。操作系统加载程序使用简单的方式访问磁盘，而内核开始运行后，改用更强大的驱动程序访问磁盘。对于典型的 IDE 硬盘，需要使用 ATAPI.SYS 驱动程序进行访问。
3. 检查注册表中 ATAPI 驱动程序的键值，确保其 `Start` 键值为 0（引导类型）。
4. 使用内核调试进一步分析。如果没有启用内核调试，可以在引导初期按 F8 调出高级引导菜单，选择 Debug，然后使用串行口 2（COM2）以波特率 19200 启用内核调试引擎。
5. 成功建立调试会话后，在出现蓝屏前，调试器会收到通知：
   ```plaintext
   *** Fatal System Error: 0x0000007b
                       (0xFC8D3528,0xC0000034,0x00000000,0x00000000)
   ```
6. 观察栈回溯，可以看到发生蓝屏的过程：
   ```plaintext
   kd> kn
   # ChildEBP RetAddr   
   00 fc8d3090 805378e7 nt!RtlpBreakWithStatusInstruction 
   01 fc8d30dc 805383be nt!KiBugCheckDebugBreak+0x19 
   02 fc8d34bc 805389ae nt!KeBugCheck2+0x574 
   03 fc8d34dc 806bdc94 nt!KeBugCheckEx+0x1b 
   04 fc8d3644 806ae093 nt!IopMarkBootPartition+0x113 
   05 fc8d3694 806a4714 nt!IopInitializeBootDrivers+0x4ba 
   06 fc8d383c 806a5ab0 nt!IoInitSystem+0x712 
   07 fc8d3dac 80582fed nt!Phase1Initialization+0x9b5 
   08 fc8d3ddc 804ff477 nt!PspSystemThreadStartup+0x34 
   09 00000000 00000000 nt!KiThreadStartup+0x16 
   ```
   这个栈回溯表明系统线程正在执行执行体的阶段 1 初始化。目前在执行的是 IO 管理器的 `IoInitSystem` 函数。后者又调用 `IopInitializeBootDrivers` 来初始化第一批加载的驱动程序。`IopInitializeBootDrivers` 又调用 `IopMarkBootPartition` 来标识引导设备。在标记前，`IopMarkBootPartition` 需要打开引导设备，获得其对象指针。如果打开失败，`IopMarkBootPartition` 会调用 `KeBugCheckEx` 发起蓝屏，报告错误。

7. 使用 `dS` 命令显示引导设备路径：
   ```plaintext
   kd> dS fc8d3528
   e13fa810  "\ArcName\multi(0)disk(0)rdisk(0)" 
   e13fa850  "partition(1)" 
   ```
8. 使用 `!error` 命令显示错误码的含义：
   ```plaintext
   kd> !error 0xC0000034
   Error code: (NTSTATUS) 0xc0000034 (3221225524) - Object Name not found.
   ```
   这意味着没有这样的设备对象存在，无法打开，因为没有加载 ATAPI 驱动。

9. 观察系统中的进程列表，可以看到系统中目前只有 System 进程和 IDLE 进程：
   ```plaintext
   kd> !process 0 0
   **** NT ACTIVE PROCESS DUMP **** 
   PROCESS 812917f8  SessionId: none  Cid: 0004    Peb: 00000000  ParentCid: 0000 
       DirBase: 00039000  ObjectTable: e1000b98  HandleCount:  34. 
       Image: System
   ```

10. 使用 `lm` 命令观察模块列表，可以看到与图 4 中一致的结果。也就是说，目前系统中还没有加载普通的驱动程序，必须等到引导类型的驱动程序初始化结束后，才可能加载其他驱动程序。

对于上述分析的例子，原因是由于注册表异常而没有加载必要的 ATAPI.SYS。知道了原因后，对于 Windows Vista 可以使用安装光盘引导到恢复控制台，然后将注册表中的 `Start` 键值改回到 0，系统便恢复正常。对于 Windows XP，可以借助 ERD Commander 等工具来引导和修复。

感谢天津的黄小非先生提供了全面的分析，归纳了导致问题的可能原因，包括病毒破坏、驱动程序故障和硬件故障三种情况，并提到了使用转储文件（DUMP）的方法。默认的小型转储文件包含的信息有限，因此我们重点介绍了利用双机内核调试来跟踪和分析活动的目标。

### 下一期的问题

一台装有 Windows 的系统输入用户名和密码后桌面一闪便自动 Log Off 了，再尝试登录，现象一样，始终无法进入到正常的桌面状态。哪些原因会导致这样的问题？该如何解决？