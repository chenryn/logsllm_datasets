      /** 重写对Sink的定义，sink.asExpr为sink的表达式需要满足于ArgumentToExec的谓词定义 **/
      override predicate isSink(DataFlow::Node sink) { sink.asExpr() instanceof ArgumentToExec }
      /** 重写对Sanitizer的定义，节点的数据类型满足PrimitiveType，BoxedType 或者是安全的命令调用方式，便认为是经过了净化**/ 
      override predicate isSanitizer(DataFlow::Node node) {
        node.getType() instanceof PrimitiveType
        or
        node.getType() instanceof BoxedType
        or
        isSafeCommandArgument(node.asExpr())
      }
    }
    /**
     * Implementation of `ExecTainted.ql`. It is extracted to a QLL
     * so that it can be excluded from `ExecUnescaped.ql` to avoid
     * reporting overlapping results.
     */
    /** 定义谓词 execTainted满足于RemoteUserInputToArgumentToExecFlowConfig条件，并且存在Source到Sink点的数据流 **/
    predicate execTainted(DataFlow::PathNode source, DataFlow::PathNode sink, ArgumentToExec execArg) {
      exists(RemoteUserInputToArgumentToExecFlowConfig conf |
        conf.hasFlowPath(source, sink) and sink.getNode() = DataFlow::exprNode(execArg)
      )
    }
我们可以看到CodeQL
使用结构化的查询，通过分别定义三元组，对满足其定义的所有AST元数据进行交集，并判断source到sink之间是否存在可达路径，如果存在可达路径即判断存在相关漏洞
# 在实际应用场景里的QL使用案例
## 如何通过QL获取Spring项目的 Web Path
### 规则分析
新建规则路径：java/ql/src/Security/CUSTOM/query/spring/SpringPath.ql
    /**
     * @name Spring controller bind path 
     * @description list all Spring controller path in method bind and class bind.
     * @kind path-list
     * @problem.severity information
     * @precision Null
     * @id java/Spring-path
     * @tags Information-path
     */
    import java
    import semmle.code.java.frameworks.spring.SpringCustomController
    import semmle.code.java.dataflow.FlowSources
    from SpringWebApiBindMethod m
    select 
    m as controllerMethod, m.getLocation() as location,
    m.getBindPath() as methodBindPath,
    m.getControllerClassBindPath() as classBindPath, "Spring bindPath"
扫描结果，classBindPath + methodBindPath为Spring的Web path
Spring Web Path的模块
：java/ql/src/semmle/code/java/frameworks/spring/SpringCustomController.qll
    import java
    import semmle.code.java.Maps
    import SpringController
    /**
     * Sping框架web请求绑定方法
     */
    class SpringWebApiBindMethod extends SpringMvcControllerMethod {
        SpringWebApiBindMethod() {
            getAnAnnotation() instanceof SpringRequsetMappingCustomAnnotation
            or 
            getAnAnnotation() instanceof SpringRestMappingCustomAnnotation
        }
        /**
         * 获取方法绑定的路径RequsteMapping
         */
        Expr getBindPath(){
            result = getAnAnnotation().(SpringRequsetMappingCustomAnnotation).getValue("value")
            or 
            result = getAnAnnotation().(SpringRestMappingCustomAnnotation).getValue("value")
        }
        /**
         * 获取mvc控制器类绑定的路径，不存在返回空字符串
         */
        string getControllerClassBindPath(){
            if this.isSpringMvcControllerBindPath() then 
            result = this.getDeclaringType().getAnAnnotation().(SpringRequsetMappingCustomAnnotation).getValue("value").toString()
            else result = ""
        }
        /**
         * 该方法的mvc控制器是否绑定了路径前缀
         */
        predicate isSpringMvcControllerBindPath() {
            exists(SpringRequsetMappingCustomAnnotation a| this.getDeclaringType().getAnAnnotation() = a 
            and this.getDeclaringType().getAnAnnotation().(SpringRequsetMappingCustomAnnotation).getValue("value").toString().length()>0  )
        }
    }
        /**
         * 该方法的声明类型的直接类型或者间接类型满足Spring Controller的谓词定义
         */
    class SpringMvcControllerMethod extends Method {
        SpringMvcControllerMethod() {
            getDeclaringType().getAnAncestor() instanceof SpringController
        }
    }
        /** 
         * 该方法的声明类型名称包含Spring Request Mapping的注解
        */
    class SpringRequsetMappingCustomAnnotation extends Annotation {
        SpringRequsetMappingCustomAnnotation() {
            getType().getAnAncestor().hasQualifiedName("org.springframework.web.bind.annotation", "RequestMapping")
            or
            getType().getAnAncestor().hasQualifiedName("org.springframework.web.bind.annotation", "RestController")
        }
    }
        /** 
         * 该方法的声明类型名称包含Spring Rest Mapping的注解
        */
    class SpringRestMappingCustomAnnotation extends Annotation {
        SpringRestMappingCustomAnnotation() {
            getType().getAnAncestor().hasQualifiedName("org.springframework.web.bind.annotation", "GetMapping")
            or
            getType().getAnAncestor().hasQualifiedName("org.springframework.web.bind.annotation", "PostMapping")
            or
            getType().getAnAncestor().hasQualifiedName("org.springframework.web.bind.annotation", "PutMapping")
            or
            getType().getAnAncestor().hasQualifiedName("org.springframework.web.bind.annotation", "DeleteMapping")
            or
            getType().getAnAncestor().hasQualifiedName("org.springframework.web.bind.annotation", "PatchMapping")
        }
    }
通过对Spring框架对Web
Controller的使用方法及注解的使用方法，定义了SpringWebApiBindMethod类，并通过getControllerClassBindPath()、getBindPath()
获取方法绑定的路径RequsteMapping及该方法的mvc控制器是否绑定了路径前缀
再新建一个FlowSourceCustom.qll
    /**
     * 输入源和数据流定义
     */
    import java
    import semmle.code.java.dataflow.FlowSources
    import semmle.code.java.frameworks.spring.SpringComponentScan
    import semmle.code.java.frameworks.spring.SpringCustomController
    /**
     * Spring框架Servlet Input参数输入源
     */
    class SpringCustomServletInputParameterSource extends RemoteFlowSource {
        SpringCustomServletInputParameterSource() {
          this.asParameter() = any(SpringRequestMappingParameter srmp | srmp.isTaintedInput())
        }
        override string getSourceType() { result = "Spring servlet input parameter" }
      }
    /**
     * Spring框架Multipart FileS参数输入源
     */
    class SpringCustomMultipartFileSource extends RemoteFlowSource {
        SpringCustomMultipartFileSource() {
          exists(MethodAccess ma, Method m |
            ma = this.asExpr() and
            m = ma.getMethod() and
            m.getDeclaringType()
                .getASourceSupertype*()
                .hasQualifiedName("org.springframework.web.multipart", "MultipartFile") and
            m.getName().matches("get%")
          )
        }
        override string getSourceType() { result = "Spring MultipartFile getter" }
      }
      /**
     * Spring框架Multipart request参数输入源
     */
    class SpringCustomMultipartRequestSource extends RemoteFlowSource {
        SpringCustomMultipartRequestSource() {
          exists(MethodAccess ma, Method m |