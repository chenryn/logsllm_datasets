### Adminer Server-Side Request Forgery (SSRF) Vulnerability

**Authors:**
- Adam Crosser
- Brian Sizemore

**Description:**
We have identified a method to exploit the Adminer application to send arbitrary GET requests and retrieve JSON responses from internal servers. This vulnerability was specifically demonstrated by extracting AWS access keys from the AWS metadata service.

**Impact:**
The severity of this vulnerability depends on the sensitivity of the resources available on the internal network. An attacker could potentially automate this vulnerability to perform scanning activities, enumerate the internal environment, and gain unauthorized access to sensitive data. In the context of an AWS server, the impact would be related to the permissions granted to the server. An attacker could use the compromised AWS keys to escalate privileges or move laterally within the AWS environment.

**Attack Explanation and Demonstration:**

The following steps were used to demonstrate the attack:

1. **Setup a Redirect Server:**
   - A Python server was started to listen for incoming connections and respond with a 301 redirect to a chosen host. For this demonstration, the redirect was set to the AWS metadata service:
     ```
     http://169.254.169.254/latest/meta-data/instance-id
     ```

2. **Exploit the Elasticsearch Login Module:**
   - The Elasticsearch login module in Adminer was used to "login" to the server running the Python code. This resulted in Adminer printing the JSON response from the metadata server, which contained the serverâ€™s AWS instance ID.
   - The screenshots below illustrate the successful extraction of the instance ID.

3. **Extracting AWS Access Keys:**
   - To further demonstrate the potential impact, the redirect was used to list the available IAM roles for the server at:
     ```
     http://169.254.169.254/latest/meta-data/iam/security-credentials/
     ```
   - By navigating to one of the available roles, the AWS access keys were extracted.
   - The screenshot below shows the result of navigating to one of the available roles.

**Python Script:**
A copy of the Python script used to redirect the request can be found [here](https://gist.github.com/bpsizemore/227141941c5075d96a34e375c63ae3bd).

**Screenshots:**
- [Screenshot 1: Extracting Instance ID](#)
- [Screenshot 2: Listing Available IAM Roles](#)
- [Screenshot 3: Extracting AWS Access Keys](#)

This demonstration highlights the critical nature of the SSRF vulnerability in Adminer and the potential for significant security breaches if left unaddressed.