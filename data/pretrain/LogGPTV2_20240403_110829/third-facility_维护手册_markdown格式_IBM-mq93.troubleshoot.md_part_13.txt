appropriate, an error message is returned. Errors might occur when:
• A duplicate channel name is chosen when creating a channel
• Unacceptable data is entered in the channel parameter fields
• The channel to be altered is in doubt, or does not exist
Problem diagnosis begins with the interpretation of the error messages and taking corrective action.
Processing problems during normal channel operation
Problems that are found during normal operation of the channels are notified to the system console or
the system log. On Windows, they are reported to the channel log. Problem diagnosis begins with the
collection of all relevant information from the log, and continues with analysis to identify the problem.
Confirmation and error messages are returned to the terminal that initiated the commands, when
possible.
Problem diagnosis might be difficult in a network where a problem might arise at an intermediate system
that is staging some of your messages. An error situation, such as transmission queue full, followed by the
dead-letter queue filling up, would result in your channel to that site closing down. In this example, the
error message that you receive in your error log will indicate a problem originating from the remote site,
but might not be able to tell you any details about the error at that site. You must therefore contact your
counterpart at the remote site to obtain details of the problem, and to receive notification of that channel
becoming available again.
Channel startup negotiation errors
During channel startup, the starting end has to state its position and agree channel running parameters
with the corresponding channel. It might happen that the two ends cannot agree on the parameters, in
which case the channel closes down with error messages being issued to the appropriate error logs.
User exit problems
The interaction between the channel programs and the user-exit programs has some error-checking
routines, but this facility can only work successfully when the user exits obey certain rules. These rules
are described in Channel-exit programs for messaging channels. When errors occur, the most likely
outcome is that the channel stops and the channel program issues an error message, together with
any return codes from the user exit. Any errors detected on the user exit side of the interface can be
determined by scanning the messages created by the user exit itself.
You might need to use a trace facility of your host system to identify the problem.
IBM MQ troubleshooting and support 77
Client application problems
A client application might receive an unexpected error return code, for example:
• Queue manager not available
• Queue manager name error
• Connection broken
Look in the client error log for a message explaining the cause of the failure. There might also be errors
logged at the server, depending on the nature of the failure.
Note: Even though a client application has terminated, it is still possible for its surrogate process to be
holding its queues open. Normally this will only be for a short time until the communications layer notifies
that the partner has gone.
Diagnostic messages and reason codes
For messages and codes to help with the primary diagnosis of the problem, see Messages and reason
codes.
Accounting and statistical data
IBM MQ produces accounting and statistical data, which you can use to identify trends in utilization and
performance:
• On Multiplatforms, this information is produced as PCF records, see Structure data types.
• On z/OS, this information is produced as SMF records, see Monitoring performance and
resource usage.
Data structures
Data structures are needed for reference when checking logs and trace entries during problem diagnosis.
For more information, see Channel-exit calls and data structures and Developing applications reference.
Related concepts
Channel control function
Dead-letter queue considerations
In some IBM MQ implementations the dead-letter queue is referred to as an undelivered-message queue.
If a channel ceases to run for any reason, applications will probably continue to place messages on
transmission queues, creating a potential overflow situation. Applications can monitor transmission
queues to find the number of messages waiting to be sent, but this would not be a normal function
for them to carry out.
When this occurs in a message-originating node, and the local transmission queue is full, the application's
PUT fails.
When this occurs in a staging or destination node, there are four ways that the message channel agent
(MCA) copes with the situation:
1.By calling the message-retry exit, if one is defined.
2.By directing all overflow messages to a dead-letter queue (DLQ), returning an exception report to
applications that requested these reports.
Note: In distributed-queuing management, if the message is too big for the DLQ, the DLQ is full, or the
DLQ is not available, the channel stops and the message remains on the transmission queue. Ensure
your DLQ is defined, available, and sized for the largest messages you handle.
3.By closing down the channel, if neither of the previous options succeeded.
78 Troubleshooting and Support for IBM MQ
4.By returning the undelivered messages back to the sending end and returning a full report to the
reply-to queue (MQRC_EXCEPTION_WITH_FULL_DATA and MQRO_DISCARD_MSG).
If an MCA is unable to put a message on the DLQ:
• The channel stops
• Appropriate error messages are issued at the system consoles at both ends of the message channel
• The unit of work is backed out, and the messages reappear on the transmission queue at the sending
channel end of the channel
• Triggering is disabled for the transmission queue
Monitoring messages with dspmqrte
If a message does not reach its intended destination, you can use the IBM MQ display route application,
available through the control command dspmqrte, to determine the route a message takes through the
queue manager network and its final location.
You can use the IBM MQ display route application (dspmqrte) command to work with trace-route
messages and activity information related to a trace-route message, using a command-line interface.
The IBM MQ display route application (dspmqrte) command can be run on all platforms except z/OS.
You can run the IBM MQ display route application as a client to an IBM MQ for z/OS queue manager by
specifying the -c parameter when issuing the dspmqrte command.
For more information, see IBM MQ display route application and dspmqrte (display route information).
Using Ping to test communications
Ping is useful in determining whether the communication link and the two message channel agents that
make up a message channel are functioning across all interfaces.
About this task
Ping makes no use of transmission queues, but it does invoke some user exit programs. If any error
conditions are encountered, error messages are issued.
Procedure
• Use the MQSC command PING CHANNEL to test a channel by sending data as a special message to the
remote queue manager, and checking that the data is returned.
The data is generated by the local queue manager.
On z/OS and IBM i, you can also use the panel interface to select this
option.
•
On Multiplatforms, use the MQSC command PING QMGR to test whether the queue manager is
responsive to commands.
Related concepts
Checking links using Ping
IBM MQ troubleshooting and support 79
Using SUBSTATE to troubleshoot channels
If your channel is running slowly or appears to have no messages to send, use the SUBSTATE field to help
resolve the problem.
Environment
Diagnosing the problem
Sender channel status
CHSTATUS(MQ23.TO.MQ24) XMITQ(TO.MQ24) CONNAME(127.0.0.1)
CURRENT CHLTYPE(SDR) STATUS(RUNNING) SUBSTATE(MQGET)
RQMNAME(MQ24)
Receiver channel status
CHSTATUS(MQ23.TO.MQ24) CONNAME(127.0.0.1) CURRENT
CHLTYPE(RCVR) STATUS(RUNNING) SUBSTATE(RECEIVE)
RQMNAME(MQ23)
If you see the channel in this state, the channel behaves as it has no messages to send. As an aside,
this can be a useful check to make at the same time as checking for uncommitted messages on the
transmission queue, when you suggest that the channel is not moving the messages just put.
It is worth noting at this point that the resting state of a server-connection channel is similar to a receiver
channel as it spends its time sitting in a network receive waiting for the client to send it an API call to
issue.
Slow channels
The sub status of channels is also useful, when other evidence suggests that your channel is running
really slowly. Having described the resting state of channels in the previous section, if you see the sender,
rather than the receiver channel, is sitting in a network receive, this can indicate that the line turn around
on the network is slow.
This is because the sender channel is waiting on the receiver to process all the messages that have been
sent in the batch and then respond to the End of Batch (EoB in the following diagram) notification to say
the batch has been successfully completed.
This state happens at the end of every batch, but it is usually so fleeting, that you are unlikely to see it. If
you see it for a prolonged period of time it can be indicative of major network issues, such as:
• Router problems
• Retransmission of dropped packets
• Other issues that cause the network to run slow
• Something else that causes the receiving end to slow down, such as message retry, or issues in a exit
At this point looking at how the receiver channel is doing is the next step.
80 Troubleshooting and Support for IBM MQ
Hung channels
When a channel is hung, either stuck in BINDING state for a long time, or even hung in RUNNING state
where fields such as Number of Bytes Sent (NUMBYTES) is not increasing, then sub status can help.
When a channel, whether a queue manager channel or a server-connection channel, is starting up there
are a number of different operations that it has to do before it can be considered to be RUNNING. All
these different operations happen while the channel is in BINDING state.
To help break that down into a more granular view of what the channel is doing, there are sub status
values for all these major operations. Some of the more common ones you see are listed below:
Connecting to the network
When there are problems reaching the host, perhaps because the IP address is not longer in service,
this can take a very noticeable number of seconds to timeout and return an error. Until it does, the
channel shows SUBSTATE(NETCONNECT).
Making a Domain Name Server (DNS) request
If the local DNS doesn't know how to resolve your CONNAME, it may be able to ask other related DNS
(if your system is configured this way). This can all take considerable time. While this is happening, the
channel shows SUBSTATE(NAMESERVER).
SSL/TLS Handshake
When using SSL or TLS, by specifying a cipher spec on a channel definition in the SSLCIPH field, this
means that the channel must complete an SSL handshake before any other data can flow across the
channel. While this is happening, the channel shows SUBSTATE(SSLHANDSHAKE).
In an exit
There are various different exits than can be used on a channel. While the exit is processing, the
channel will show a sub state reflecting which exit it is in, for example, SUBSTATE(SENDEXIT). If the
exit is taking a long time then you may see this for more than a fleeting moment.
Resolving the problem
See DISPLAY CHSTATUS for a summary of all the sub states and when they can be seen.
Troubleshooting a problem where a channel refuses to run
If a channel refuses to run, there are a number of potential reasons such as the DMQ and channels not
being set up correctly, or the channel being in-doubt.
About this task
If the channel has never run, a likely cause of the problem is that DQM and the channels might not have
been set up correctly.
If the automatic synchronization on startup has failed for some reason, the channel might be in-doubt.
In-doubt channel problems are typically resolved automatically but in some cases you might need to
resynchronize the channel manually.
Another reason for the channel refusing to run could be that neither end is able to carry out necessary
conversion of message descriptor data between ASCII and EBCDIC, and integer formats. In this instance,
communication is not possible.
Procedure
1.Check that DQM and the channels have been set up correctly.
This is a likely source of the problem if the channel has never run. Reasons could be:
• A mismatch of names between sending and receiving channels (remember that uppercase and
lowercase letters are significant).
• Incorrect channel types specified.
IBM MQ troubleshooting and support 81
• The sequence number queue (if applicable) is not available, or is damaged.
• The dead-letter queue is not available.
• The sequence number wrap value is different on the two channel definitions.
• A queue manager or communication link is not available.
• A receiver channel might be in STOPPED state.
• The connection might not be defined correctly.
• There might be a problem with the communications software (for example, is TCP running?).
For more information about setting up channels, see Configuring distributed queueing.
2.Check whether the channel is in-doubt.
It is possible that an in-doubt situation exists if the automatic synchronization on startup has failed
for some reason. This is indicated by messages on the system console, and the status panel might be
used to show channels that are in doubt. If a channel is in doubt, it is usually resolved automatically on
restart, so you do not need to resolve a channel manually in normal circumstances. However, you can,
when necessary, resynchronize the channel manually. For more information, see Handling in-doubt
channels.
The possible responses to a situation where you need to resynchronize the channel manually are:
• Issue a RESOLVE CHANNEL command to either back out or commit the in-doubt messages.
To determine whether a backout or commit is needed, check with your remote link supervisor to
establish the number of the last-committed unit of work ID (LUWID) committed then check this
number against the last number at your end of the link. If the remote end has committed a number,
and that number is not yet committed at your end of the link, use the RESOLVE CHANNEL command
to commit the messages. In all other cases, use the RESOLVE CHANNEL command to back out the
messages. For more information, see Handling in-doubt channels.
The effect of these commands is that backed out messages reappear on the transmission queue and
are sent again, while committed messages are discarded.
If in doubt yourself, perhaps backing out with the probability of duplicating a sent message might be
the safer decision.
• Issue a RESET CHANNEL command.
This command is for use when sequential numbering is in effect, and should be used with care.
Its purpose is to reset the sequence number of messages and you must use it only after using the
RESOLVE CHANNEL command to resolve any in-doubt situations.
When sequential numbering is being used, and a sender channel starts up after being reset, the sender
channel takes two actions:
• It tells the receiver channel that it has been reset.
• It specifies the next message sequence number that is to be used by both the sender and receiver
channels.
3.If the status of a receiver end of the channel is STOPPED, reset it by starting the receiver end.
Note: This does not start the channel, it merely resets the status. The channel must still be started
from the sender end.
Related reference
RESOLVE CHANNEL (ask a channel to resolve in-doubt messages)
RESET CHANNEL (reset message sequence number for a channel)
82 Troubleshooting and Support for IBM MQ
Troubleshooting triggered channels
If a triggered channel refuses to run, it might be in-doubt. Another possibility is that the channel has set
the trigger control parameter on the transmission queue to NOTRIGGER.
About this task
An example of a situation where a triggered channel fails to start is as follows:
1.A transmission queue is defined with a trigger type of FIRST.
2.A message arrives on the transmission queue, and a trigger message is produced.
3.The channel is started, but stops immediately because the communications to the remote system are
not available.
4.The remote system is made available.
5.Another message arrives on the transmission queue.
6.The second message does not increase the queue depth from zero to one, so no trigger message is
produced (unless the channel is in RETRY state). If this happens, restart the channel manually.
On z/OS, if the queue manager is stopped using MODE(FORCE) during channel initiator
shutdown, it might be necessary to manually restart some channels after channel initiator restart.
Procedure
1.Check whether the channel is in-doubt.
If a triggered channel refuses to run, investigate the possibility of in-doubt messages as described in
Step “2” on page 82 of “Troubleshooting a problem where a channel refuses to run” on page 81.
2.Check whether the trigger control parameter on the transmission queue has been set to NOTRIGGER
by the channel.
This happens when:
• There is a channel error.
• The channel was stopped because of a request from the receiver.
• The channel was stopped because of a problem on the sender that requires manual intervention.
3.After diagnosing and fixing the problem, start the channel manually.
Troubleshooting network problems
There are a number of things to check if you are experiencing network problems.
Procedure
• When using LU 6.2, make sure that your definitions are consistent throughout the network.
For example, if you have increased the RU sizes in your CICS Transaction Server for z/OS or
Communications Manager definitions, but you have a controller with a small MAXDATA value in its
definition, the session might fail if you attempt to send large messages across the network. A symptom
of this problem might be that channel negotiation takes place successfully, but the link fails when
message transfer occurs.
• When using TCP, if your channels are unreliable and your connections break, try setting a KEEPALIVE
value for your system or channels.
You do this using the SO_KEEPALIVE option to set a system-wide value.
On z/OS, you also have the following options:
– Use the Keepalive Interval channel attribute (KAINT) to set channel-specific keepalive values.
– Use the RCVTIME and RCVTMIN channel initiator parameters.
IBM MQ troubleshooting and support 83
For more information, see Checking that the other end of the channel is still available, and Keepalive
Interval (KAINT).
Note: When a group TCP/IP listener is started, it registers with DDNS. But there can be a delay until
the address is available to the network. A channel that is started in this period, and which targets
the newly registered generic name, fails with an error in communications configuration
message. The channel then goes into retry until the name becomes available to the network. The
length of the delay is dependent on the name server configuration used.
• If the receiver channel has been left in a 'communications receive' state after the channel lost contact,
check whether user intervention is needed to address the problem.
If a channel loses contact, the receiver channel can be left in a 'communications receive' state. When
communications are re-established the sender channel attempts to reconnect. If the remote queue
manager finds that the receiver channel is already running it does not allow another version of the
same receiver channel to start. This problem requires user intervention to rectify the problem or the
use of system keepalive.
The Adopt MCA function solves the problem automatically. It enables IBM MQ to cancel a receiver
channel and to start a new one in its place.