title:Did you mix me? Formally Verifying Verifiable Mix Nets in Electronic
Voting
author:Thomas Haines and
Rajeev Gor&apos;e and
Bhavesh Sharma
2021 IEEE Symposium on Security and Privacy (SP)
Did you mix me? Formally Verifying Veriﬁable
Mix Nets in Electronic Voting
Thomas Haines∗, Rajeev Gor´e†, and Bhavesh Sharma†
∗Dept of Mathematical Sciences, Norwegian University of Science and Technology
†Research School of Computer Science, The Australian National University
3
3
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—Veriﬁable mix nets, and speciﬁcally proofs of (cor-
rect) shufﬂe, are a fundamental building block in numerous
applications: these zero-knowledge proofs allow the prover to
produce a public transcript which can be perused by the veriﬁer
to conﬁrm the purported shufﬂe. They are particularly vital to
veriﬁable electronic voting, where they underpin almost all voting
schemes with non-trivial tallying methods. These complicated
pieces of cryptography are a prime location for critical errors
which might allow undetected modiﬁcation of the outcome.
The best solution to preventing these errors is to machine-
check the cryptographic properties of the design and implemen-
tation of the mix net. Particularly crucial for the integrity of the
outcome is the soundness of the design and implementation of
the veriﬁer (software). Unfortunately, several different encryption
schemes are used in many different slight variations which makes
it infeasible to machine-check every single case individually.
However, a particular optimised variant of the Terelius-Wikstr¨om
mix net is, and has been, widely deployed in elections including
national elections in Norway, Estonia and Switzerland, albeit with
many slight variations and several different encryption schemes.
In this work, we develop the logical theory and formal methods
tools to machine-check the design and implementation of all
these variants of Terelius-Wikstr¨om mix nets, for all the different
encryption schemes used; resulting in provably correct mix nets
for all these different variations. We do this carefully to ensure
that we can extract a formally veriﬁed implementation of the
veriﬁer (software) which is compatible with existing deployed
implementations of the Terelius-Wikstr¨om mix net. This gives us
provably correct implementations of the veriﬁers for more than
half of the national elections which have used veriﬁable mix nets.
Our implementation of a proof of correct shufﬂe is the ﬁrst to
be machine-checked to be cryptographically correct and able to
verify proof transcripts from national elections. We demonstrate
the practicality of our implementation by verifying transcripts
produced by the Veriﬁcatum mix net system and the CHVote
e-voting system from Switzerland.
I. INTRODUCTION
Secure electronic voting is a difﬁcult security problem with
numerous competing constraints. The key approach to securing
electronic elections is so-called “end-to-end veriﬁable elec-
tronic voting”: that is, each component must produce public
evidence to allow its results to be veriﬁed. The techniques
involved in producing and verifying this evidence are largely
cryptographic. Rivest famously called this property of public
veriﬁability “software independence” [35]; however, while
these technique do make the correctness of the announced
outcome independent of the software used to produce the
evidence, it does not make it independent of the software used
to check the evidence. Thus modern end-to-end veriﬁable elec-
tronic voting requires the ability to produce correct software
for verifying the aforementioned public evidence.
End-to-end veriﬁability is usually broken down into three
sub-properties: namely, cast-as-intended, collected-as-cast and
counted-as-collected. Cast-as-intended captures the idea that
the encrypted ballot the voter casts contain the vote they
intended. Collected-as-cast captures the idea that the cast vote
was collected without tampering. Counted-as-collected cap-
tures the idea that the collected ballots are properly counted.
Our work focuses on this last aspect so we ignore mechanisms
which check cast-as-intended and collected-as-cast, along with
other properties such as voter eligibility.
because it
The cryptographic techniques for producing and verifying
the public evidence of modern e-voting schemes invariable
use zero-knowledge proofs (ZKPs) [1] in which a prover
and a veriﬁer follow a speciﬁc protocol to produce a public
proof (evidence) of a particular statement. The proof produced
by the prover is “zero knowledge”
leaks no
information other than the truth of the statement. Of course,
the statement itself may leak information: for example, a proof
of correct decryption leaks no information, but the decryption
itself obviously leaks the message of the ciphertext. ZKPs
enable cryptographic, rather than formal, veriﬁcation of the
election result (statement) without revealing information which
adversely affects the privacy of the election. In the context
of ZKPs, we say that a party, and its output, is honest if it
follows the protocol and say that a protocol run, also called a
transcript, is valid if the veriﬁer accepts (the transcript). Some
of these cryptographic proofs are of a particularly simple and
efﬁcient form known as a sigma protocol; a class ﬁrst deﬁned
and analysed by Cramer in his PhD Thesis [2]. The other main
type of ZKPs used in electronic voting are veriﬁable mix nets.
Mix nets were ﬁrst introduced by Chaum [3] as a solution
to the trafﬁc analysis problem in which an adversary is able
to extract useful information from patterns of communication,
even when that communication is encrypted. The trafﬁc anal-
ysis problem can be thought of, more generally, as the set of
problems that arise by the ability to link the messages between
sets of senders and receivers. Mix nets therefore consist of a
ﬁnite sequence of authorities (mixers), each of which permutes
(shufﬂes) and hides the relationship between its inputs and
its outputs. Informally, a mix net has privacy if it hides the
relationship between the initial input and the ﬁnal output,
provided one of the mixers is honest.
For example, in electronic voting, the input to a mix net is
© 2021, Thomas Haines. Under license to IEEE.
DOI 10.1109/SP40001.2021.00033
1748
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
usually a sequence of encrypted ballots, ordered according to
a separate list of voter-ids. Thus the ﬁrst encrypted ballot is
the ballot of the voter with id 1, and so on. The intention is
that the encrypted ballots will be decrypted before counting.
But naively decrypting the input sequence, as is, allows the
election authority to learn exactly how each voter voted since
we can link the i-th encrypted ballot to the i-th voter, thus
breaking the privacy of the voters. By ﬁrst using a mix net,
as an irreversible black box, to permute the initial sequence
of encrypted ballots, we can ensure that the i-th encrypted
ballot in the permuted output sequence is no longer linked to
the i-th voter. Decrypting the output sequence now preserves
the privacy of the voters. Clearly, the mix net must maintain
integrity in that it must not delete, add or change the contents
of any of the encrypted ballots. Informally, we say that an
output sequence of encrypted messages is a correct shufﬂe of
the input sequence if the integrity is maintained.
Unfortunately, vanilla mix nets allow the mixers to change
the content without detection. Indeed, a mix net which pro-
vides no integrity cannot even provide privacy since a dishon-
est mixer can substitute all but one of the honest inputs with
inputs known to the adversary: the adversary then breaks the
privacy of the targeted honest input by looking at the output
and seeing which value differs from the substituted ones.
Neff [4] and Furukawa and Sako [5] independently sug-
gested veriﬁable mix nets which allow the mixer to prove the
correctness (integrity) of its shufﬂe using complicated zero-
knowledge proofs (of shufﬂe). These schemes are used to
modify the vanilla mix net by requiring each mixer to produce
a zero-knowledge-proof that it shufﬂed correctly in addition
to performing the shufﬂe. Subsequently, many veriﬁable mix
nets [4]–[22] have been proposed and many of the designs
have been shown to be ﬂawed [23]–[27].
Beyond the issue of uncaught design ﬂaws is the further
issue of implementing the design correctly. In electronic
voting, mix nets are by far the most complicated pieces of
cryptography implemented and overwhelmingly see utterly
inadequate scrutiny,1 even compared to the poor base level for
deployed e-voting schemes, more generally. Given the long list
of veriﬁable mix nets shown to be ﬂawed, we clearly need a
trusted methodology for checking the veriﬁability of veriﬁable
mix nets—both in the design and implementation.
Here, we give such a trusted methodology based upon
the interactive proof-assistant Coq. We ﬁrst give an informal
description and then follow with a more detailed description.
Informally, we formally verify (machine-check) the follow-
ing properties of the (zero-knowledge) proof of shufﬂe:
• Completeness: An honestly generated proof will be
accepted by an honest veriﬁer.
• Soundness: A dishonest party will only be able to con-
struct a valid proof for a false statement with negligible
probability. Formally, we prove special soundness which
is known to imply soundness.
1This assertion is based on personal correspondence with many of the
leading experts who regularly examine e-voting schemes.
• Honest veriﬁer zero-knowledge: If the challenges are
sampled independently and uniformly then the distribu-
tion of the honest transcripts can be simulated without
knowing the witness. We prove this in a way which avoids
directly reasoning about probabilities.
Our primary focus is on mix nets used in national elections,
such as Terelius-Wikstr¨om [16] and Bayer-Groth [18].2 We
chose Terelius-Wikstr¨om as it is more commonly used.
A. Contributions
We now describe our speciﬁc contributions in their logical
order. The ﬁrst three contributions are necessary for the main
contributions but are less signiﬁcant.
1) We extend the work of Haines et al. [49] to allow
an unbounded number of ciphertexts in the Terelius-
Wikstr¨om mix net.
2) We formalise a generic class of encryption schemes
(Deﬁnition 3) which captures most/all of the encryption
schemes commonly used in e-voting. Deﬁning this class
required some care beyond distilling the salient proper-
ties because we wanted the resulting proof of shufﬂe to
be consistent with existing implementations.
3) We provide a pen and paper proof that the optimised
Terelius-Wikstr¨om mix net is a proof of correct shufﬂe
for all encryption schemes in the generic class and hence
most encryption schemes commonly used in e-voting:
see [46]. This result was widely believed to be true but
no precise characterisation has ever been published.
4) We encode the above class of encryption schemes into
Coq and machine-check the proofs of security for the
optimised Terelius-Wikstr¨om mix net in Coq. Thus, we
have machine-checked both the design and implemen-