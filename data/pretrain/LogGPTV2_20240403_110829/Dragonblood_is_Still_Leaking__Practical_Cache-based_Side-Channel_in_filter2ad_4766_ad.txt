a memory address corresponding to the loop calling this hash func-
tion. Thanks to the complex nature of this operation, we were able
to detect access to this call every time. Moreover, this particular
memory address is not accessed during the rest of the protocol,
thereby avoiding any potential noise in our traces.
Monitoring access to the code executed on success is less straight-
forward: the address range to be accessed inside sae_compute_pwe
is too small and too close to the rest of the loop to be reliably
monitored. The best choice is to monitor instruction in one of the
7https://git.kernel.org/pub/scm/libs/ell/ell.git/
ACSAC2020,December7–11,2020,Austin,USADanielDeAlmeidaBraga,Pierre-AlainFouque,andMohamedSabt1boolsae_compute_pwe(structl_ecc_curve∗curve,char∗pwd,2constuint8_t∗a,constuint8_t∗b){3uint8_tseed[32],save[32],random[32],∗base=pwd;4l_ecc_scalar∗qr=sae_new_residue(curve,true);5l_ecc_scalar∗qnr=sae_new_residue(curve,false);6for(intcounter=1;counter<=20;counter++){7/∗pwd−seed=H(max(a,b)||min(a,b),base||counter)8∗pwd−value=KDF(seed,"SAEHuntingandPecking",p)9∗/10sae_pwd_seed(a,b,base,base_len,counter,seed);11pwd_value=sae_pwd_value(curve,seed);12if(!pwd_value)13continue;1415if(sae_is_quadradic_residue(curve,pwd_value,qr,qnr)){16if(found==false){17l_ecc_scalar_get_data(pwd_value,x,sizeof(x));18memcpy(save,seed,32);19l_getrandom(random,32);20base=random;21base_len=32;22found=true;23}24}25l_ecc_scalar_free(pwd_value);26}27/∗...∗/28}Listing2:HuntingandPeckingonECPgroupasimplementediniwd.Variablenameshavebeenadaptedforabetterfit.curvesP256andP384.ThecorrespondingHuntingandPeckingisimplementedinthefunctionsae_compute_pwe,asillustratedinListing2.Eachtypeorfunctionstartingbyl_*referstoafunctionintheEmbeddedLinuxLibrary7(ell),aminimalistcryptographiclibrarydevelopedbyIntel.Bydefault,thislibraryisstaticallylinkedtothebinaryatcompilationtime.Userscandecidetouseadynamiclinkingbyspecifyingthecorrectoptionbeforecompiling.Westressthatthelinkingstrategydoesnotimpacttheresultofourattack;onlysomedetailsintheaddressestomonitorareconcerned(seeSection3.3).Itiseasytonoticethatexplicitbranchingatlines15and16makesthecontrolflowinput-dependent.Anattackerwhoisabletotellatwhatiterationthecodebetweenline17and22isexecutedcanguesshowmanyroundsareneededbeforesuccessfullyreturningfromthisfunction.3.3Cache-AttackDetailsInordertoefficientlydetermineatwhatiterationapasswordissuccessfullyconverted,theattackers’needsaretwofold.First,theyneedtobeabletodistinguisheachiteration.Second,theyshallguesswhenthesuccess-specificcode(lines17-22)isexecuted.Toachievethefirstgoal,wecreateasynchronizationclockbymonitoringsomememorylineaccessedatthebeginningofeachloop.Thecalltokdf_sha256,afunctionoflibellcalledinsidesae_pwd_value,isagoodcandidate.Morespecifically,wemonitoramemoryaddresscorrespondingtotheloopcallingthishashfunc-tion.Thankstothecomplexnatureofthisoperation,wewereable7https://git.kernel.org/pub/scm/libs/ell/ell.git/todetectaccesstothiscalleverytime.Moreover,thisparticularmemoryaddressisnotaccessedduringtherestoftheprotocol,therebyavoidinganypotentialnoiseinourtraces.Monitoringaccesstothecodeexecutedonsuccessislessstraight-forward:theaddressrangetobeaccessedinsidesae_compute_pweistoosmallandtooclosetotherestofthelooptobereliablymonitored.Thebestchoiceistomonitorinstructioninoneofthefunctionscalledatlines17to19.Testshaveshownthatmonitor-inginsidel_getrandomyieldsthebestresults:otherfunctionsarecalledtoooften,atvariousplaces,bringingnoisetoourtraces.However,randomnumbergenerationisalsopartofthequadraticresidueverification(sae_is_quadratic_residue,line15)inordertoblindthecomputation.Fortunately,theseaccessescanbedistin-guishedgiventhenumberofcycleselapsedsincethebeginningoftheiteration.DuetocomplexCPUoptimizationtechniques(seeSection2.3.2)andsomesystemnoise,themeasurementsarenoisyandsometracesmayyieldincorrectresults.Moreover,acalltol_getrandomisusuallyperformedinafewcycles,implyingthatwecanmissthiscallduetothetemporalresolutionofFlush+Reload.Inordertosignificantlyimprovethereliabilityofourresults,wecombinedtheFlush+ReloadattackwiththePerformanceDegra-dationattack(PDA),aspresentedin[4].Sincethefirstcalltol_getrandomoccursbeforetheproperquadraticresiduecheck,weevictamemorylineinsidethecodeinchargeoftheLegendresymbolcomputation.Hence,wesignificantlyincreasethedelaybetweenoursynchronizationclockandthesuccess-specificcode,whilekeepingalowdelaytoreachthefirstcalltol_getrandom.Tosumup,bysimplymonitoringtwoaddresseswithaclassicFlush+Reloadtechnique,andrepeatedlyevictingasinglememoryaddress,wewereabletocollecttracesthatyieldmorerelevantresultswithonlyafewsamples.3.4MiscellaneousLeakAsspecifiedintheDragonflyRFC[16]andintheSAEstandard[1],thenumberofiterationstoperformduringthepasswordconver-sionisnotfixed.Itcanbedefinedasanynon-negativeinteger,providingiteffectivelyguaranteesasuccessfulconversionwithhighprobability.RFC7664advisestoset𝑘toatleast40inordertogetroughlyonepasswordoveronetrillionthatneedsmoreiterations.Asforiwd,theimplementationsets𝑘=20,makingthisprob-abilitysignificantlylower,withaboutoneover2·106passwordsrequiringmorethan𝑘iterations.Inpractice,usingonlypassworddrawnfromexistingdictionaries[25,31],wewereabletofindaconsistentlistofpasswordneedingmorethan20iterations(seeAppendixAforasample).Usingthesepasswordrelateddictio-naries,withrandomMACaddresses,wefoundanaverageof33.6passwords(9.5·10−5%ofthedictionaries).Inthisscenario,aclientwouldbeunabletoauthenticatetotheAPuntilthepasswordortheMACaddressofonepartyischanged.Fromanattackerperspective,findingsuchatupleprovidesalotofinformationonthepassword,withouttheaforementionedcache-attack.Indeed,theycanassumethatthepasswordneedsatleast20iterations,andperformanofflinedictionaryattackasdescribedinDragonblood is Still Leaking:
Practical Cache-based Side-Channel in the Wild
ACSAC 2020, December 7–11, 2020, Austin, USA
yield the same result when derived with the corresponding MAC
addresses. The remaining passwords, giving the same results, are
potential candidates that now constitute the new dictionary.
3.5.1 Theoretical success rate. Let each leak be represented by a
tuple (𝐴, 𝐵, 𝑘) with 𝐴, 𝐵 the MAC addresses and 𝑘 ∈ [1, 20] the
number of iterations. When converting a password into a group
element, the success of each iteration is bounded to the success of
the quadratic residue test. Let be 𝑝 the order of the underlying field
and 𝑞 the order of the generator? Since Dragonfly only support
elliptic curves of cofactor ℎ = 1, 𝑞 also denotes the total number of
points on the curve. Then, a random integer 𝑥 ∈ [0, 𝑝) is a quadratic
residue with probability:
𝑝𝑠 =
𝑞
2𝑝
≈ 0.5 ≈ 1 − 𝑝𝑠 .
(1)
The input of the quadratic residue is considered random (being
the output of a KDF). Hence, each iteration is independent of the
others if we model the KDF as a random oracle. Let 𝑋 denote the
random variable representing the number of iterations of a trace,
and 𝑘 ∈ [1, 20]:
Pr[𝑋 = 𝑘] = 𝑝𝑘
𝑠 .
(2)
The probability for a trace to eliminate any tested password
depends on the number of iterations 𝑘. Let 𝑌1 be the random variable
representing the success (1) or the failure (0) of a password to pass
each test in a single trace. We got 𝑌1 = 1 only if the password
succeeds all tests, i.e. with probability Pr[𝑋 = 𝑘], hence:
Pr[𝑌1 = 0 | 𝑋 = 𝑘] = 1 − Pr[𝑋 = 𝑘] = 1 − 𝑝𝑘
𝑠 .
(3)
More generally, the probability for a password to be eliminated by
a random trace is:
Pr[𝑌1 = 0] =
Pr[𝑋 = 𝑖] · Pr[𝑌1 = 0|𝑋 = 𝑖].
(4)
Hence, the probability for a password to be pruned by at most 𝑛
traces is the sum of probabilities for it be pruned either at the first
trace or to pass the first and be pruned at the second, and so forth:
𝑝𝑦𝑛 = Pr[𝑌𝑛 = 0] =
Pr[𝑌1 = 0] · (1 − Pr[𝑌1 = 0])𝑖 .
(5)
20
𝑖=1
𝑛−1
𝑖=0
Let 𝐿 be the size of our dictionary, and 𝑑 be the number of
passwords we want to eliminate. Let 𝑍𝑛 be the number of passwords
we remove using 𝑛 traces. Since tests behave as independent trials,
𝑍𝑛 follows a binomial law, hence:
Pr[𝑍𝑛 ≥ 𝑑] =
𝑦𝑛 · (1 − 𝑝𝑦𝑛)𝐿−𝑖 .
· 𝑝𝑖
(6)
(cid:18)𝐿
(cid:19)
𝐿
𝑖
𝑖=𝑑
Table 1 gives an overview of the number of traces required to
eliminate all wrong passwords from different dictionaries, with a
probability greater than 0.95. We outline the benefit of our attack
compared to the original Dragonblood’s, reducing the average num-
ber of required traces by roughly 43%. In practice, we do not need to
remove all passwords from the dictionary, we only need to reduce
it enough, so that remaining passwords can be tested in an active
attack. Keeping more passwords in the dictionary would reduce
the number of required traces.
Rockyou
CrackStation
HaveIBeenPwned
8 characters
Dict. size Avg traces Avg traces
1.4 · 107
3.5 · 107
5.5 · 108
4.6 · 1014
in [35]
29
30
34
53
16
17
20
32
Table 1: A Comparison of the Number of the Required
Traces to Prune all Wrong Passwords Between Our attack
and Dragonblood.
3.5.2 Complexity of the offline search. Each test we perform is
bounded by the complexity of a quadratic residue test (which is
basically a modular exponentiation). The theoretical cost of such
an operation has already been discussed in [35], and can be applied
the same way in our context. Authors estimated, given their bench-
mark of the PowMod function [27] on an NVIDIA V100 GPU, that
approximately 7.87 · 109 passwords per second can be tested. Since
each test is independent, the amount of parallelization is up to the
attacker capacity, and can be higher. Namely, one can choose to split
the dictionary into 𝑘 pieces and run 𝑘 instances of the dictionary
reducer.
4 EXPERIMENTAL RESULTS
In this section, we describe our setup and give details about the
experimental results we obtained during our evaluation. All the
scripts and programs we used are made open-source8.
4.1 Experimental Setup
Our experiments were performed on a Dell XPS13 7390 running on
Fedora 31, kernel 5.6.15, with an Intel(R) Core(TM) i7-10510U and
16 GB of RAM. Binaries were compiled with gcc version 9.3.1 build
20200408 using the default configuration (optimization included).
Namely, the Embedded Linux Library version 0.31 was statically
linked to iwd during compilation.
During our experiment, we deployed hostapd (version 2.9) as an
Access Point, and iwd (version 1.7) as a client. Both were installed
and launched on the same physical device, using emulated network
interfaces, as described in [26].
We kept the default configuration on both ends, meaning the key
exchange is always performed using IKE group 19, corresponding
to P256. Similar results would have been observed using group 20
(curve P384) by tweaking the threshold of our spy process.
Our spy process has been implemented by following classical
Flush+Reload methods. Moreover, we used Mastik v0.02 imple-
mentation of the PDA [36].
4.2 Trace Collection
Once both client and AP were setup to use a password that was
randomly drawn from a dictionary, we launched the spy process to
monitor well-chosen memory lines (see Section 3.3). After each con-
nection, we disconnected the client and reconnected it a few times
to acquire multiple samples. This step emulates a de-authentication
attack aiming at collecting multiple samples with the same MAC
8https://gitlab.inria.fr/ddealmei/poc-iwd-acsac2020/-/tree/master/
ACSAC 2020, December 7–11, 2020, Austin, USA
Daniel De Almeida Braga, Pierre-Alain Fouque, and Mohamed Sabt
addresses. For each password we went through this process using
10 different MAC addresses, allowing us to acquire up to 10 inde-
pendent traces for the same password. For each MAC address, we
collect 15 samples. Our observations were consistently obtained
through testing 80 passwords in order to evaluate the effectiveness
and the reliability of our trace collection techniques.
We call sample the result of monitoring one Dragonfly key ex-
change, with a fixed password and MAC addresses. It is represented
by succession of lines, corresponding to either a call to the syn-
chronization clock (kdf_sha256) or to l_getrandom. The value
following each label is an indicator of the delay since the last call
to the synchronization clock. An example can be found in Appen-
dix B, corresponding to a trace yielding four iterations. A trace is a
collection of samples, all corresponding to the same password and
the same MAC address.
4.3 Trace Interpretation
We also designed a script that automatically interprets our traces
and outputs the most probable iteration in which the process of
password conversion first succeeds.
The trace parser process is described in Listing 3. The core idea
is to first reduce the noise by eliminating all poorly formed samples
(which could not be interpreted anyway, often because of system
noise). Then, each sample is processed independently, contributing
to the creation of a global trace score. To do so, each line of a sample
is read, and depending on the corresponding label, it is processed
as follow: (i) if the label is the synchronization clock, we increase
the iteration counter by one; (ii) otherwise, the score of the current
iteration is increased by the delay associated to that line. In the latter
case, if the delay is long enough (the threshold may be architecture
specific), we can stop the parsing of that sample and process the
next one. Once every sample of a trace has been processed, the
score of each iteration comes at as indicator of the most probable
successful iteration.
Since false positives have severe consequences, we chose to
eliminate any trace that does not yield a clear result. In such a
case, the script raises a warning to the attacker for future manual
interpretation.
Figure 2: Reliability of our experiment given a different
number of samples to interpret for each MAC address. Ac-
curacy represents the closeness of our prediction to the real
value. Usable traces represent the percentage of traces we
were able to automatically exploit, without high risk of miss-
prediction.
4.4 Results
We summed-up the results of our experimentations, with different
number of samples for each MAC address, in Figure 2. With only
one measurement per address, approximately 70.5% of the traces
can be automatically interpreted (others have a high risk of miss-
prediction). However, the accuracy of our prediction is only 66%.
We need to collect 5 samples to achieve an accuracy greater than
90% (with 77% of usable traces). We achieve 99% accuracy with only
10 measurements, with a trace usability of 88%.
We stress that trace usability only represents the ability for the
parser to automatically interpret the trace. For most warnings, a
manual reading of the samples (about 1-2 minutes) allows attackers
to successfully predict the round (some measurements do not yield
a clear result, and should be ignored). We also note that even if our