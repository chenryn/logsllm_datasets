Consider `jsonify()`cation of a dictionary contained in a list:
    print flask.__version__
    print repr(flask.jsonify([{"a": 1, "b": 2}]).data)
With the following output:
    0.10.1
    '{\n  "a": "b"\n}'
`jsonify()` has -- without complaining -- mangled the data into something
really not useful: The original dictionary values are gone, and the `"b"` key
suddenly is a value.
I appreciate that top-level array elements are not allowed to be created in
Flask's `jsonify()` implementation
(http://flask.pocoo.org/docs/0.10/security/#json-security). Also, there are
for sure straight-forward strategies for solving this in application code, for
example by wrapping the list in a dictionary: `jsonify({"items":
collection})`.
However, in the Python world we do not find it very often that an entity
accepts invalid input and produces garbled output without complaining. Also,
it looks like `jsonify()` once raised an exception when provided a list (at
least in 2011 it did raise a `TypeError`: #170).
Should we raise an exception again or is the current behavior carefully
designed with a focus on performance? I mean, it is unlikely that this data
mangling ends up in a production environment (a developer really should
realize that `jsonify()` produces garbage in this case , like I did).