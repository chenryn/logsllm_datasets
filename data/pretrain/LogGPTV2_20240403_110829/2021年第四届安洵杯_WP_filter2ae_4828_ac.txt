        else
            v1[32 * (j % 3) + i] = table[i];
        ++i;
        ++j;
    }
    char result[32] = { 0 };
    int v7 = 0;
    for (i = 0; i  然后把提取表，逆置换，再逆异或即可拿到`flag`
    char ConverTable[32] = { 0x1,0x07,0x0d,0x13,0x19,0x1f,0x02,0x06,0x08,0x0c,0x0e,0x12,0x14,0x18,0x1a,0x1e,0x20,0x03,0x05,0x09,0x0b,0x0f,0x11,0x15,0x17,0x1b,0x1d,0x04,0x0a,0x10,0x16,0x1c };
    for(int i = 0;i=0;i--){
        // printf("%d", i);
        sb[i] ^= sb[(i + 1) % 32];
    }
    printf("%s", sb);
    Th4_1mp0rtant_th2n9_is_t0_le@rn!
###  virus
> 解题`exp`如下
    #include 
    #include 
    void __cdecl sub_401790(char* a1, char* a2)
    {
        DWORD v2[56]; // [esp+4Ch] [ebp-FCh] BYREF
        int v3; // [esp+12Ch] [ebp-1Ch]
        int v4; // [esp+130h] [ebp-18h]
        int v5; // [esp+134h] [ebp-14h]
        int j; // [esp+138h] [ebp-10h]
        int v7; // [esp+13Ch] [ebp-Ch]
        int v8; // [esp+140h] [ebp-8h]
        int i; // [esp+144h] [ebp-4h]
        for (i = 0; i = 0; --j)
            {
                v2[7 * i + 28 + j] = v8 % 2;
                v8 /= 2;
                v2[7 * i + j] = v2[7 * i + 28 + j];
            }
        }
        v5 = 0;
        v4 = 0;
        for (i = 0; i = 0; i--) {
            Temp[i] = GetRemoteCallValue(hProcess, Temp[i + 1] ^ Temp[i + 2] ^ Temp[i + 3] ^ key[i + 4]) ^ Temp[i + 4];
        }
        for (int i = 0; i  迷宫题型，先算出`dWWwwdddWWaawwddsssSaw`的解法
    import base64
    import string
    str1 = "QCAmN2sYNGUfR3EvOUMuNWYkW3k1JR=="
    string1 = "BADCFEHGJILKNMPORQTSVUXWZYbadcfehgjilknmporqtsvuxwzy1032547698+/"
    string2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    print (base64.b64decode(str1.translate(str.maketrans(string1,string2))))
> 接着根据调试解出交叉引用的`byte_42024C`
    from z3 import *