  * ODRx，x代表第几个引脚，一般用来读取引脚输出的值
  * IDRx，x代表第几个引脚，一般用来读取引脚输入的值
我们可以通过修改ODR、IDR来直接操作引脚的数据，但是我们一般不这样干，我们会选择BSRR和BRR来操作，BSRR是bit set
reset的意思，即设置位、复位，而BRR是bit reset的意思，即复位，主要是下面两个：
  * BRx，将第x引脚置为0
  * BSy，将第x引脚置为1
有了这些知识，我们就可以初始化我们的引脚了，我写了一个非常简单的初始化程序，标好了注释供大家参考
    void setGPIOConfig(void){
        //使能IOA
        //使能IOB
        //使能IOC
        RCC->APB2ENR.IOPAEN = 1;
        RCC->APB2ENR.IOPBEN = 1;
        RCC->APB2ENR.IOPCEN = 1;
        /*
        配置IOA为输出模式且为最大速率
        推挽输出模式
        PA0 -> LED1
        PA1 -> LED K3
        PA2 -> LED K1
        PA9 -> LED G
        PA15 -> LED K2
        */
        GPIOA->CRL.MODE0 = 3;
        GPIOA->CRL.MODE1 = 3;
        GPIOA->CRL.MODE2 = 3;
        GPIOA->CRH.MODE9 = 3;
        GPIOA->CRH.MODE15 = 3;
        /*
        配置IOA为输入
        上拉/下拉输入模式
        PA10-> L KEY0
        PA11-> R KEY1
        PA12-> R KEY2
        */
        GPIOA->CRH.MODE10 = 0;
        GPIOA->CRH.MODE11 = 0;
        GPIOA->CRH.MODE12 = 0;
        GPIOA->CRH.CNF10 = 2;
        GPIOA->CRH.CNF11 = 2;
        GPIOA->CRH.CNF12 = 2;
        /*
        配置IOB为输出模式且为最大速率
        推挽输出模式
        PB3 -> LED C
        PB4 -> LED K4
        PB7 -> LED E
        PB8 -> LED0
        PB9 -> LED P
        PB12 -> LED B
        PB13 -> LED A
        PB14 -> LED F
        */
        GPIOB->CRL.MODE3 = 3;
        GPIOB->CRL.MODE4 = 3;
        GPIOB->CRL.MODE7 = 3;
        GPIOB->CRH.MODE8 = 3;
        GPIOB->CRH.MODE9 = 3;
        GPIOB->CRH.MODE12 = 3;
        GPIOB->CRH.MODE13 = 3;
        GPIOB->CRH.MODE14 = 3;
        /*
        配置IOC为输出模式且为最大速率
        推挽输出模式
        PC13 -> LED D
        */
        GPIOC->CRH.MODE13 = 3;
        /*
        设置LED0和LED1为高电平
        PB8 -> LED0
        PA0 -> LED1
        */
        GPIOB->BSRR.BR8 = 1;
        GPIOA->BSRR.BR0 = 1;
        /*
        其余为低电平
        */
        GPIOA->BRR.BR1 = 1;
        GPIOA->BRR.BR2 = 1;
        GPIOA->BRR.BR9 = 1;
        GPIOA->BRR.BR15 = 1;
        GPIOB->BRR.BR3 =1 ;
        GPIOB->BRR.BR4 =1 ;
        GPIOB->BRR.BR7 =1 ;
        GPIOB->BRR.BR8 =1 ;
        GPIOB->BRR.BR9 =1 ;
        GPIOB->BRR.BR12 =1 ;
        GPIOB->BRR.BR13 =1 ;
        GPIOB->BRR.BR14 =1 ;
        GPIOC->BRR.BR13 = 1;
    }
到此我们就已经聊完了GPIO方面的设置，我们可以用setGPIOConfig函数来代替之前stm32cube为我们自动生成的MX_GPIO_Init函数了。并且，我们也可以直接通过结构体赋值的形式来实现很多功能，比如下面的灯泡交替闪烁
    void Delay()
    {
        uint32_t i,j;
        for(i=0;iBSRR.BS8 = 1;
            Delay();
            GPIOA->BRR.BR8 = 1;
        }
        return 0;
    }
## 中断让按钮生效
题目是要依次按下某些按钮才会触发usart传输数据，对于中断来讲，我们同样可以采取stm32cube生成或者自己编写寄存器结构体的形式，由于寄存器结构体的形式篇幅过长，这里就不展开了，有机会再和大家聊，这里只说cube自动生成的形式
还是在引脚界面，选好引脚，选择GPIO_EXTI1，注意还需要在右侧的nvic界面启动中断，之后就会生成响应的代码了
    void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    {
        switch(GPIO_Pin)
        {
            case GPIO_PIN_4:
                            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
                break;
            case GPIO_PIN_7:
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
                break;
            default:
                break;
        }
    }
采用回调函数，里面是一个switch结构，我们只需在对应的case下面编写我们的代码即可，我上面是实现了按一个按钮，对应的led就改变一次状态，稍微改一下就变成题目的形式啦。
## 小总结
篇幅限制我们还没有解决usart的问题，另外我们距离完全替代cube生成代码还有很大距离，在之后的文章中将会继续给大家分享相关知识。
关于自己编写初始化代码的问题，单单是跑起来让一个引脚的led灯亮所写的代码我就写了700多行，是一项庞大的工程，但是收获也很多，相信我，自己写一遍后，在ida
pro里去看真的会亲切很多！如果大家对这部分感兴趣，可以给我留言或与我联系，我也会在后面陆续把我写的初始化相关的代码放出来。