Intuitively, Theorem 1 says that the probability that an ad-
versary succeeds in the Member Impersonation Game is
less than the probability that he is traceable plus the prob-
ability that he can be used to solve the Bilinear Difﬁe-
Hellman problem.
The hardness of the BDH problem then implies the follow-
ing:
Corollary 2 (PBH Impersonator Tracing)
Suppose A is a probabilistic, polynomial time adversary.
If the BDH problem is hard, then
(cid:1)(cid:1)Pr[PBH.TraceUser(T ) ∈ U
(cid:11) ∩ G
∗]− AdvMIGA
(cid:1)(cid:1)
is negligible.
In other words, the Pairing-Based Handshake satisﬁes the
deﬁnition of Impersonator Tracing outlined in the previous
section.
Note that if U
(cid:11) ∩ G
U
∗] = 0. This immediately yields the following:
∗ = /0, then Pr[ PBH.TraceUser(T ) ∈
(cid:11) ∩ G
Corollary 3 (PBH Impersonation Resistance)
(cid:11)∩G
Suppose A is a probabilistic, polynomial time adversary.
is negli-
If the BDH problem is hard, then AdvMIGU
A
gible.
∗=/0
In other words, the Pairing-Based Handshake satisﬁes the
deﬁnition of Impersonation Resistance outlined in the pre-
vious section.
We now turn our attention to the Member Detection Game.
Using the notation from Section 4, we claim the following.
Theorem 4 Suppose A is a probabilistic, polynomial time
adversary. There is an PPT algorithm B such that
AdvMDGA ≤ Pr[ PBH.TraceUser(T ) ∈ U
∗) ]
(cid:11) ∩ G(U
· AdvBDHB + ε,
+ e QH1QH2
where ε is negligible in the security parameter.
Intuitively, Theorem 4 says that the probability that an ad-
versary succeeds in the Member Detection Game is less
than the probability that he is traceable plus the probabil-
ity that he can be used to solve the Bilinear Difﬁe-Hellman
problem.
The hardness of the BDH problem then implies the follow-
ing:
Corollary 5 (PBH Detector Tracing)
Suppose A is a probabilistic, polynomial time adversary.
If the BDH problem is hard, then
(cid:1)(cid:1)Pr[PBH.TraceUser(T ) ∈ U
(cid:11) ∩ G(U
∗)]− AdvMDGA
(cid:1)(cid:1)
is negligible.
In other words, the Pairing-Based Handshake satisﬁes the
deﬁnition of Detector Tracing outlined in the previous sec-
tion.
Note that if U
(cid:11) ∩ G(U
U
∗) = /0, then Pr[PBH.TraceUser(T ) ∈
∗)] = 0. This immediately yields the following:
(cid:11) ∩ G(U
Corollary 6 (PBH Detection Resistance)
Suppose A is a probabilistic, polynomial time adversary.
is
If the BDH problem is hard, then AdvMDGU
A
negligible.
(cid:11)∩G(U
∗)=/0
In other words, the Pairing-Based Handshake satisﬁes the
deﬁnition of Detection Resistance outlined in the previous
section.
5.3. Additional Security Notions
In this section we consider several additional security no-
tions that may be desirable in a secret handshake scheme:
forward repudiability,
indistinguishability to eavesdrop-
pers, collusion resistance, and unlinkability. Forward re-
pudiability is a desirable property that may optionally be
satisﬁed by a secret handshake scheme, and is in fact satis-
ﬁed by our scheme. Indistinguishability to eavesdroppers,
collusion resistance, and unlinkability follow the security
deﬁnitions given in Section 5.1, and are discussed only for
completeness.
Forward Repudiability:
Suppose honest users U1 and
U2 interact, and they both learn they are members of the
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
same group G. It should not be possible for U2 to prove to
a third party that U1 is a member of the group G – even if
U2 reveals its own secrets. For example, if U2’s secrets are
later compromised, the transcript of U1 and U2’s interaction
together with U2’s secrets should not constitute a proof of
U1’s membership in G.
Note that U2 and U1 may not be able to conceal the
fact that they communicated (this might require the use of
steganographic techniques, and is outside the scope of this
paper). However, any evidence (transcripts, U2’s secrets,
etc) should not provide a non-repudiable proof that U1 is a
member of G. We refer to this as forward repudiability.
Forward repudiability is not achieved by schemes that
rely on credentials that support non-repudiation for the un-
derlying authentication. For example, consider a scheme
that gave every member of a group G a public-key certiﬁ-
cate attesting to their group membership, and a shared group
secret key under which they could encrypt those certiﬁcates
to limit their exchange to only other group members. Such a
certiﬁcate, together with a transcript showing a demonstra-
tion of group membership using that public key would be
sufﬁcient to publicly implicate the sender of the certiﬁcate
as a group member.
Forward repudiability follows
immediately in our
scheme: notice that U2 always has enough information to
generate the entire transcript between U1 and U2. So this
transcript could have been completely faked by U2, and can-
not be used to convince a third party of U1’s membership in
G.
(cid:11)
(cid:11)
(cid:17)∈ U
∗
∗
1 , U
2
Indistinguishability to Eavesdroppers: Consider an ad-
versary A who corrupts some set U
of users, interacts with
others, and observes a transcript of SHS.Handshake be-
(possibly of A’s choice). The
tween users U
adversary A should be unable to learn anything from this
handshake that it did not already know, including whether
∗
∗
1 and U
2 belong to the same group or to different groups.
U
We model this by giving A either a transcript of the real
∗
2 , or giving it a transcript of
handshake between U
a handshake between random simulations, and asking it to
tell the difference.
∗
1 and U
We deﬁne A’s distinguishing advantage as follows. Let
), and let
∗
TReal be the transcript of SHS.Handshake(U
1
TRand be a transcript of SHS.Handshake(R, R). Deﬁne
AdvDSTA := |Pr[A(TReal) = 1]− Pr[A(TRand) = 1]| .
∗
,U
2
The secret-handshake scheme SHS is said to provide indis-
tinguishability to eavesdroppers when AdvDSTA is negligi-
ble for all adversaries A.
Our secret handshake scheme satisﬁes this additional se-
curity property; in fact, this follows from detection resis-
tance. A proof is outlined in the appendix.
Note that communication outside the protocol (e.g., the
presence of continued communication after the handshake)
may reveal the success or failure of the protocol. Protecting
against such trafﬁc analysis is outside the scope of our pa-
per; approaches such as steganographic techniques may be
appropriate in this context.
Collusion Resistance and Traitor Tracing: The system
must remain secure even if collections of users pool their se-
crets in an attempt to undermine the system (collusion resis-
tance); if a coalition of users manages to detect or imperson-
ate group members, it should be possible to detect at least
one member of the coalition (traitor tracing). Collusion re-
sistance and traitor tracing follow immediately from the def-
initions given in Section 5.1: a pool of colluding users can
be modeled as a virtual adversary that “corrupts” the set of
colluding users and uses their secrets. Nevertheless, this
security notion is worth restating because is the main rea-
son why variations of the traditional Difﬁe-Hellman based
key exchange protocol fail to produce a secret handshake,
helping to explain the motivation for using pairing-based
cryptography.
To see how collusion resistance breaks down in a Difﬁe-
Hellman-based analogue of this scheme, consider a scenario
in which Difﬁe-Hellman key agreement is used in a group
Z/NZ where N = pq is a product of two large primes. Al-
ice, a member of group GA, would have a private key xA
and a public key (gGA
)xA derived from her private key and
the secret group base gGA. By the hardness assumption of
the RSA problem, Alice is unable to compute the group se-
cret gGA as it would require computing the xAth root of her
public key.
Bob would have analogous quantities; an attempted se-
cret handshake would then be a standard Difﬁe-Hellman
key exchange between Alice and Bob and a veriﬁcation
of its success. They would obtain a shared secret key
gxAxB
if and only if their secret group bases were equal, i.e.
GA
= gGB.
gGA
While it is tempting to use Difﬁe-Hellman based key
agreement to implement secret handshakes, this scheme is
trivially not collusion-resistant. If a set of members of GA
collude whose secrets xi satisfy gcd(x1, . . . ,xt) = 1, they
may compute α1, . . ., αt ∈ Z such that ∑αixi = 1. They
)αi = gGA, giving them the un-
may then compute ∏i(gxi
GA
traceable group secret for GA. This gives them the ability to
detect and impersonate arbitrary group members untrace-
ably.
Unlinkability: The schemes presented in Section 4 spec-
ify that a user obtains a list of pseudonyms for one-time use.
This allows handshakes to be unlinkable: If an eavesdrop-
per sees two different handshakes performed by Alice, the
content of the handshakes alone are unlinkable
It may be desirable instead to have a system in which a
user reuses a single pseudonym together with a single secret
point in all handshakes. This prevents a user from running
out of pseudonyms, and dramatically decreases the size of
revocation lists that may be required for users.
This modiﬁcation does not undermine the security of our
system. Indeed, all the security proofs go through with one
minor change. We must introduce the notion of a modi-
ﬁed random simulation R(B) of a user B. The modiﬁed
random simulation of B randomizes all messages outgoing
from B except idB, the sole pseudonym used by B. Under
this slightly weaker notion of random simulation and result-
ing security deﬁnitions, the Pairing-Based Handshake with
pseudonym reuse is provably secure with slightly weaker
security bounds.
In our implementations discussed below, we are using
the more efﬁcient, but linkable, version of the protocols.
6. Implementation
6.1. Secret Handshakes in TLS
Section 4.2 presented our basic PBH scheme. In prac-
tice, it would be preferable to incorporate such a secret-
handshake authentication scheme into widely used secure
communication protocols. We present here a method to
securely use a PBH protocol to authenticate the standard
SSL/TLS handshake [16], requiring only small modiﬁca-
tions of two of the TLS handshake messages. To maintain
our proofs of security, we require only that the veriﬁcation
values (H0 and H1 in the notation of section 4.2) each par-
ticipating party sends to the other to prove their ability to
compute the shared secret, are a keyed pseudorandom func-
tion (PRF) of: the shared secret, both parties’ identities, in-
dependent randomness contributed by each party, and some
factor that makes each party’s veriﬁcation value different
from the other’s (thus forcing each to independently prove
possession of the shared secret).
Following the notation in section 4.2, we modify the
standard TLS handshake as follows: TLS begins with the
client (in our case, the initiating party) sending the server
(the responding party) a ClientHello message. This mes-
sage contains both a random nonce and a timestamp, which
together will correspond to nA in our PBH protocol. The
server responds with a ServerHello message, which con-
tains an independent nonce and timestamp generated by the
server, corresponding to nB. These messages provide the
exchanges of randomness needed by the PBH protocol.
The server then sends a ServerKeyExchange message,
which is typically used to exchange additional keying in-
formation necessary for anonymous or ephemeral key ex-
change methods. It contains an indication of the algorithm
being used (e.g., Difﬁe-Hellman), and a set of parameters
necessary for that algorithm (e.g., a Difﬁe-Hellman pub-
lic value and parameters). We modify that message for our
PBH scheme; the new message contains an indication that
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
PBH is the algorithm being used and the server’s identity,
idB. The server then completes its portion of the exchange
by sending ServerHelloDone. The client then continues the
exchange by sending a ClientKeyExchange message, again
modiﬁed to contain an indication that a PBH scheme is
being used and the client’s identity, idA. Each participant
now has sufﬁcient information to calculate the shared se-
cret, ˆe0 = ˆe(H(idA), privB) = ˆe(privA, H(idB)). We take ˆe0
to be the TLS pre-master secret, used to generate all further
encryption and authentication keys.
The remainder of the exchange is unchanged from the
standard TLS handshake. The parties exchange ChangeCi-
pherSpec messages, which indicate that they should begin
to use the keys and algorithms they have just negotiated.
They then exchange Finished messages, which contain the
veriﬁcation values necessary to allow each of them to con-
ﬁrm that the other has correctly computed the pre-master
secret, ˆe0, and hence in our case, that the other is a member
of the desired group.
These veriﬁcation values, which correspond to our H0
and H1, are computed as follows: ﬁrst the pre-master secret
(pms) is used to compute a master secret (ms), using:
ms = PRFT LS(pms, “master secret”, randomc(cid:10)randoms)
where PRFT LS is the TLS keyed pseudo-random func-
tion PRFT LS(secret, label, seed),4 (cid:10) is concatenation, and
randomc and randoms are the random nonce and timestamp
structures exchanged in the ClientHello and ServerHello
messages, respectively. Each party then uses this master
secret to compute their own veriﬁcation value (vvi), as:
vvi = PRFT LS(ms, labeli, MD5(hm)(cid:10)SHA1(hm))
where labelclient is “client ﬁnished” and labelserver is “server
ﬁnished”, and hm, or handshake messages is the concatena-
tion of all the previous messages sent by both parties during
the handshake.
The resulting protocol meets the security requirements
outlined above. The veriﬁcation values are a keyed pseu-
dorandom function of the shared secret, ˆe0, the independent
randomness contributed by both parties, and the identities of
both parties. Each party’s veriﬁcation value is different, be-
cause of the the requirement that each use a different labeli.
This combined protocol can be implemented very sim-