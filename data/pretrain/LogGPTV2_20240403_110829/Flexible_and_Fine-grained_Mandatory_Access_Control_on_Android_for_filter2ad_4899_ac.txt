criteria matched, a default type is assigned to apps
(line 1) and Intents (line 2), respectively.
Context deﬁnitions and awareness. We extend
the policy language with an option to declare con-
texts to enable context-aware policies. Each declared
context can be either activated or deactivated by a
dedicated Context Provider (cf. Section 4.2).
To actually enable context-aware policies, we in-
troduce in our policy language switchBoolean state-
ments which map contexts to booleans, which in
turn provide dynamic policies. Listing 2 presents
the deﬁnition of booleans and switchBoolean state-
ments. For instance, the switchBoolean statement in
lines 4-9 deﬁnes that as soon as the context phone-
Booth_con is active, the boolean phoneBooth_b has
to be set to true. As soon as the phoneBooth_con
context is deactivated, the phoneBooth_b boolean
should be reset to its initial value (line 6). To map
contexts to the kernel-level, we introduce kbool deﬁ-
nitions (line 2), which point to a boolean at kernel
level instead of adding a new boolean at middleware
level. Changes to such kernel-mapped boolean values
by switchBoolean statements trigger a call to the
SELinux kernel module to update the corresponding
We opted for a consensus approach, in which the
system policy check is mandatory and must always
consent for an operation to succeed.
138  22nd USENIX Security Symposium 
USENIX Association
4.3.2 Support for Multiple Stakeholders
A particular requirement for the design of FlaskDroid
is the protection of interests of diﬀerent stakeholders.
This requires that policy decisions consider the poli-
cies of all involved stakeholders. These policies can
be pre-installed (i.e., system policy), delivered with
apps (i.e., app developer policies), or conﬁgured by
the user (e.g., User Policy App in Figure 1).
In FlaskDroid, 3rd party app developers may op-
tionally ship app-speciﬁc policies with their applica-
tion packages and additionally choose to instrument
their app components as Userspace Object Managers
for their own data objects. FlaskDroid provides the
necessary interfaces to query the Userspace Security
Server for policy decisions as part of the SDK. These
decisions are based on the app-speciﬁc 3rd party
policy, which deﬁnes custom appType statements to
label subjects (e.g., other apps) and declares app-
speciﬁc object types. To register app-speciﬁc policies,
the PackageManagerService is instrumented such that
it extracts policy ﬁles during app installation and
injects them into the USSS.
A particular challenge when supporting multiple
stakeholders is the reconciliation of the various stake-
holders’ policies. Diﬀerent strategies for reconcili-
ation are possible [43, 35] and generally supported
by our architecture, based on namespaces and glob-
al/local type deﬁnitions. For instance, as discussed
in [43], all-allow (i.e., all stakeholder policies must
allow access), any-allow (i.e., only one stakeholder
policy must allow access), priority (i.e., higher ranked
stakeholder policies override lower ranked ones), or
consensus (i.e., at least one stakeholder policy allows
and none denies or vice versa). However, choosing
the right strategy strongly depends on the use-case.
For example, on a pure business smartphone without
a user-private domain, the system (i.e., company) pol-
icy always has the highest priority, while on a private
device a consensus strategy may be preferable.
5 Use-cases / Instantiations
In the following we will show how FlaskDroid can
instantiate certain privacy and security protecting
use-cases. More use-cases and concrete examples are
provided in our technical report [11].
5.1 Privacy Enhanced System Ser-
vices and Content Providers
System Services and ContentProviders are an integral
part of the Android application framework. Promi-
nent Services are, for instance, the LocationManager
or the Audio Services and prominent ContentProviders
are the contacts app and SMS/MMS app. By default,
Android enforces permission checks on access to the
interfaces of these Services and Providers.
Problem description: The default permissions are
non-revocable and too coarse-grained and protect
access only to the entire Service/Provider but not to
speciﬁc functions or data. Thus, the user cannot
control in a ﬁne-grained fashion which sensitive data
can be accessed how, when and by whom. Apps such
as Facebook and WhatsApp have access to the entire
contacts database although only a subset of the data
(i.e., email addresses, phone numbers and names)
is required for their correct functioning. On the
other hand, recent attacks demonstrated how even
presumably privacy-unrelated and thus unprotected
data (e.g. accelerometer readings) can be misused
against user’s security and privacy [53, 12].
Solution: Our modiﬁed AIDL tool automatically
generates policy checks for each Service interface and
function in the system. We tagged selected query
functions of the system AudioService, LocationMana-
ger, and SensorManager with speciﬁc security contexts
(e.g., ﬁneGrainedLocation_t as object_type, location-
Service_c as object_class, and getLastKnownLocation
as operation) to achieve ﬁne-grained access control
on this information. Our policy states that calling
functions of this object type is prohibited while the
phone is in a security sensitive state. Thus, retrieving
accelerometer information or recording audio is not
possible when, e.g., the virtual keyboard/PIN pad is
in the foreground or a phone call is in progress.
In Section 4.2.3 we explained how ContentProvi-
ders (e.g.
the ContactsProvider) can act as User-
space Object Managers. As an example, users can
reﬁne the system policy to further restrict access to
their contacts’ data. A user can, for instance, grant
the Facebook app read access to their “friends” and
“family” contacts’ email addresses and names, while
prohibiting it from reading their postal addresses and
any data of other groups such as “work”.
5.2 App Developer Policies (Saint)
Ongtang et al. present in [39] an access control frame-
work, called Saint, that allows app developers to ship
their apps with policies that regulate access to their
apps’ components.
Problem description: The concrete example used
to illustrate this mechanism consists of a shopping
app whose developer wants to restrict the interaction
with other 3rd party apps to only speciﬁc payment,
password vault, or service apps. For instance, the
developer speciﬁes that that the password vault app
must be at least version 1.2 or that a personal ledger
app must not hold the Internet permission.
The policy rules for the runtime enforcement of
Saint on Inter-Component communication (ICC) are
deﬁned as the tuple (Source, Destination, Conditions,
State). Source deﬁnes the source app component
of the ICC and optional parameters for an Intent
object (e.g., action string). Destination describes
similarly the destination app component of the ICC.
Conditions are optional conjunctional conditions (e.g.,
permissions or signature key of the destination app)
and State describes the system state (e.g., geolocation
or bluetooth adapter state).
Solution: Instantiating Saint’s runtime access con-
trol on FlaskDroid is achieved by mapping Saint’s
parameters to the type enforcement implemented by
FlaskDroid. Thus, Source, Destination, and Condi-
tions are combined into security types for the subject
(i.e., source app) and object (i.e., destination app
or Intent object). For instance, a speciﬁc type is
assigned to an app with a particular signature and
permission. If this app is source in the Saint policy,
it is used as subject type in FlaskDroid policy rules;
and if it is used as destination, it is used as object
type. The object class and operation are directly de-
rived from the destination app. The system state can
be directly expressed by booleans and switchBoolean
statements in the policy and an according Context
Provider. Appendix A provides a concrete policy
example for the instantiation of the above shopping
app example.
6 Evaluation and Discussion
In this section we evaluate and discuss our archi-
tecture in terms of policy design, eﬀectiveness, and
performance overhead.
6.1 Policy
To evaluate our FlaskDroid architecture, we derived
a basic policy that covers the pre-installed system
USENIX Association  
22nd USENIX Security Symposium  139
USOMs that we introduced in Section 4.2.3.
Policy Assessment. For FlaskDroid we are for now
foremost interested in generating a basic policy to es-
timate the access control complexity that is inherent
to our design, i.e., the number of new types, classes,
and rules required for the system Userspace Object
Managers. This basic policy is intended to lay the
foundation for the development of a good policy, i.e.,
a policy that covers safety, completeness, and eﬀec-
tiveness properties. However, the development of a
security policy that fulﬁlls these properties is a highly
complex process. For instance, on SELinux enabled
systems the policies were incrementally developed
and improved after the SELinux module had been
introduced, even inducing research on veriﬁcation of
these properties [24]. A similar development can be
currently observed for the SE Android policies which
are written from scratch [48] and we envision induc-
ing a similar research on development and veriﬁcation
of FlaskDroid policies.
Basic Policy Generation. To generate our basic
policy, we opted for an approach that follows the
concepts of TOMOYO Linux’ learning phase4 and
other semi-automatic methods [42]. The underlying
idea is to derive policy rules directly from observed
application behavior. To generate a log of system
application behavior, we leveraged FlaskDroid’s au-
dit mode, where policy checks are logged but not
enforced. Under the assumption, that the system
contained in this auditing phase only trusted apps,
this trace can be used to derive policy rules.
To achieve a high coverage of app functionality
and thus log all required access rights, we opted for
testing with human user trials for the following rea-
sons: First, automated testing has been shown to
exhibit a potentially very low code coverage [24] and,
second, Android’s extremely event-driven and concur-
rent execution model complicates static analysis of
the Android system [56, 24]. However, in the future,
static analysis based (or aided) generation of access
control rules is more preferable in order to cover also
corner-cases of applications’ control-ﬂows.
The users’ task was to thoroughly use the pre-
installed system apps by performing various every-
day tasks (e.g., maintaining contacts, writing SMS,
browsing the Internet, or using location-based ser-
vices). To analyze interaction between apps, a par-
ticular focus of the user tasks was to leverage inter-
app functionality like sharing data (e.g., copying
notes from a website into an SMS). For testing, the
users were handed out Galaxy Nexus devices running
FlaskDroid with a No-allow-rule policy. This is a
4http://tomoyo.sourceforge.jp/2.2/learning.html.en
manually crafted policy containing only the required
subject/object types, classes and operations for the
USOMs in our architecture, but no allow rules. The
devices were also pre-conﬁgured with test accounts
(e.g., EMail) and test data (e.g., fake contacts).
Using the logged access control checks from these
trials, we derived 109 access control rules required
for the correct operation of the system components
(as observed during testing), which we learned to be
partially operationally dependent on each other. Our
pre-installed middleware policy contained 111 types
and 18 classes for a ﬁne-granular access control to
the major system Services and ContentProviders (e.g.,
ContactsProvider, LocationManager, PackageManager-
Service, or SensorManager). These rules (together
with the above stated type and object deﬁnitions)
constitute our basic policy. Although SELinux poli-
cies cannot be directly compared to our policy, since
they target desktop operating systems, the diﬀerence
in policy complexity (which is in the order of several
magnitudes [11]) underlines that the design of mobile
operating systems facilitates a clearer mandatory ac-
cess control architecture (e.g., separation of duties).
This proﬁts an easier policy design (as supported by
the experiences from [54, 36]).
3rd Party Policies. The derived basic policy can
act as the basis on top of which additional user, 3rd
party, and use-case speciﬁc policies can be deployed
(cf. Section 5). In particular, we are currently work-
ing on extending the basic policy with types, classes
and allow rules for popular apps, such as Whats-
App or Facebook, which we further evaluated w.r.t.
user’s privacy protection (cf. Section 6.2). A par-
ticular challenge is to derive policies which on the
one hand protect the user’s privacy but on the other
hand preserve the intended functionality of the apps.
Since the user privacy protection strongly depends
on the subjective security objectives of the user, this
approach requires further investigation on how the
user can be involved in the policy conﬁguration [58].
However, as discussed in Sections 3 and 4.2.2, mul-
tiple policies by diﬀerent stakeholders with poten-
tially conﬂicting security objectives require a recon-
ciliation strategy. Devising a general strategy appli-
cable to all use-cases and satisfying all stakeholders
is very diﬃcult, but use-case speciﬁc strategies are
feasible [44, 29]. In our implementation, we opted for
a consensus approach, which we successfully applied
during implementation of our use-cases (cf. Section 5).
We explained further strategies in Section 4.3.2.
140  22nd USENIX Security Symposium 
USENIX Association
Attack
Root Exploit
App executed by root
Over-privileged and
Information-Stealing
Apps
Sensory Malware
Confused Deputy
Collusion Attack
Test
mempodroid Exploit
Synthetic Test App
Known malware
Synthetic Test App
WhatsApp v2.8.4313
Facebook v1.9.1
Synthetic Test App [53, 12, 46]
Synthetic Test App
Synthetic Test Apps [46]
Table 1: List of attacks considered in our testbed
6.2 Eﬀectiveness
We decided to evaluate the eﬀectiveness of FlaskDroid
based on empirical testing using the security models
presented in Section 5 as well as a testbed of known
malware retrieved from [55, 3] and synthetic attacks
(cf. Table 1). Alternative approaches like static
analysis [18] would beneﬁt our evaluation but are
out of scope of this paper and will be addressed
separately in future work.
Root exploits. SE Android successfully mitigates
the eﬀect of the mempodroid attack. While the ex-
ploit still succeeds in elevating its process to root
privileges, the process is still constrained by the un-
derlying SE Android policy to the limited privileges
granted to the root user [48].
Malicious apps executed by root. While SE An-
droid constrains the ﬁle-system privileges of an app
process executed with root UID, this process still
inherits all Permissions at middleware level.
In
FlaskDroid, the privileges of apps running with this
omnipotent UID are restricted to the ones granted
by the system policy to root (cf. aid_root_t in Sec-
tion 4.2.3). During our user tests, we had to deﬁne
only one allow rule for the aid_root_t type on the
middleware layer, which is not surprising, since usu-
ally Android system or third-party apps are not exe-
cuted by the root user. Thus, a malicious app gaining
root privileges despite SE Android, e.g., using the
mempodroid exploit [48], is in FlaskDroid restricted
at both kernel and middleware level.
Over-privileged and information stealing
apps. We veriﬁed the eﬀectiveness of FlaskDroid
against over-privileged apps using a) a synthetic test