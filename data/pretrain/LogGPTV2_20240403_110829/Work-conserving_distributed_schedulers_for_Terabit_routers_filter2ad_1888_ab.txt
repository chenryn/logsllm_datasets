((
T
((
−
)1
)1
r
)
slack
c
)(
−
−
r
Hence, slack(c) ≥ −T at the end of the arrival phase in all cases 
and this remains true at the end of each subsequent arrival phase, 
so long as c remains at the input. (cid:132) 
Lemma 2 leads directly to the following theorem. 
Theorem 1. For S ≥2, any BCCF scheduler is work-conserving. 
2.2 Batch LOOFA 
Our second scheduling method is based on ideas first developed 
in the Least Occupied Output First method of [7], so we refer to it 
as the Batch Least Occupied Output First (BLOOFA) method. In 
BLOOFA,  VOQs  are  ordered  according  to  the  number  of  cells  in 
their output-side queues. VOQs going to outputs with fewer cells 
precede  VOQs  going  to  outputs  with  more  cells.  Outputs  with 
equal numbers of cells are ordered by the numbering of the out-
puts.  We  define  BLOOFA  as  the  combination  of  this  ordering 
method  with  any  maximal,  ordered  scheduler.  We  show  that 
slack(c) ≥ T at the start of each departure phase, using the same 
overall strategy used for BCCF. As before, we need two lemmas. 
The arguments are similar, but are complicated by the fact that the 
relative ordering of VOQs can change during a transfer phase. 
Lemma 3. For any BLOOFA scheduler, during a transfer phase, the 
minimum slack at any input that does not transfer all of its cells 
during the transfer phase, increases by at least ST. 
proof. Let c be any ij-cell at input i. Let minSlack be the smallest 
value of the slack among the cells at input i just before the transfer 
phase, and let slack(c) = minSlack + σ. We will show that slack(c) 
increases by at least ST − σ during the transfer phase. The lemma 
then follows directly. (Note that it is not sufficient to prove that 
the  slack  of  a  cell  c  that  has  minimum  slack  at  the  start  of  the 
transfer phase increases by ST, since c may not be a cell of mini-
mum slack at the end of the transfer phase.) 
 We say that a cell b at input i passes c, if before the transfer 
phase, c precedes b and after the transfer phase b precedes c. If no 
cells  pass  c  during  the  transfer  phase,  then  by  the  definition  of 
maximal,  ordered schedulers, either q(c) increases by ST or p(c) 
decreases by ST. Either way, slack(c) increases by at least ST − σ. 
Assume then, that there are r >0 cells that pass c and let b be 
the cell in the set of cells that pass c that comes latest in the cell 
ordering  (before  the  transfer  phase).  For  clarity,  let q0(x) denote 
the value of q(x) before the transfer phase and let qF(x) denote the 
value of q(x) after the transfer phase. Similarly for p and slack.   
Let m be the number of cells received by output j during the 
transfer and let k be the number of cells that precede b before the 
transfer, but do not precede c. Then, 
≥
≥
=
+
cqmcq
)(
0
)(
bq
)(
F
bq
)(
0
F
and p0(b) = p0(c) + k. Now, 
=
≤
≤
cq
)(
0
cp
)(
0
−
σ
+
minSlack
−
+
σ
bq
bp
)(
)(
0
0
+
−
mcq
cp
(
)
)(
)(
(
0
0
σ
+
+
k
)
So  (m− k)  ≥  − σ.  Since  b  passes  c,  its  output  must  receive fewer 
than m cells during the transfer phase, so ST cells that precede it at 
the start of the transfer phase must be forwarded. Of these at least 
ST− (k−r) must also precede c at the start of the phase. So, 
+
−+
≤
−
≤
−
−
ST
k
r
(
ST
(
k
r
))
pF
c
)(
cp
)(
0
cp
)(
0
Combining this, with qF(c) = q0(c) + m gives, 
slack
F
c
)(
=
≥
≥
≥
−
cq
cp
)(
)(
F
F
−
+
mcq
(
)
(
)(
0
+
slack
ST
c
)(
+
c
ST
slack
)(
0
0
+
k
)
ST
)
−
cp
)(
0
+
−
km
(
σ−
That is, slack(c) increases by at least ST − σ. (cid:132) 
Note that each arrival phase causes slack(c) to decrease by at 
most  T.  However,  it  is  not  so  easy  to  bound  the  decrease  in 
slack(c) during a departure phase. The complicating factor is that 
cells at c’s input can pass it during a departure phase, making it 
hard to bound the overall change in slack(c). However, if slack(c) 
is at least T before the departure phase begins, then q(c) must also 
be at least T. This means that T cells will depart from c’s output, 
making it impossible for other cells at c’s input to pass c. Thus, if 
slack(c) is at least T before the departure phase, then slack(c) is at 
least 0 after the departure phase. It turns out that this is sufficient 
to establish that BLOOFA is work-conserving when S  ≥ 2. 
Lemma 4. For any BLOOFA scheduler with S  ≥ 2, if c is a cell at 
an input before the start of a departure phase, then slack(c) ≥ T. 
proof. We show that for any cell c present at the end of the arrival 
phase, slack(c) ≥ −T. The result then follows from Lemma 3 and 
the fact that S ≥2. The proof is by induction on the time step.  
For any cell c that arrives during the first time step, p(c) ≤ T at 
the end of the arrival phase, so slack(c) ≥ −T at the end of the arri-
val  phase.  Since  S  ≥2,  Lemma  3  implies  that  slack(c) ≥ T at the 
end of the transfer phase, if it is still present at the input. By the 
discussion just before the statement of Lemma 4, this means that 
slack(c)  ≥  0  following  the  departure  phase, which in turn means 
that slack(c) ≥ −T at the end of the next arrival phase. This remains 
true at the end of every subsequent arrival phase until c is trans-
ferred to the output. 
Suppose then, that c arrives during step t. If, at the end of the 
arrival phase, the only cells that precede c also arrived during step 
t, then slack(c) ≥ −T at the end of the arrival phase. By the argu-
ment at the end of the last paragraph, this remains true at the end 
of every subsequent arrival phase until c is transferred. 
If at the end of the arrival phase in step t, there are cells that 
precede c that were present at the start of the arrival phase, then 
let b be the cell in this set of cells that does not precede any of the 
others in the set. Because b arrived before step t, slack(b) ≥ −T at 
the end of the previous arrival phase, by the induction hypothesis. 
This  implies  that  slack(b)  ≥  0  at  the  start of the arrival phase in 
step t. Let k be the number of cells that arrive during the arrival 
phase of step t that precede b at the end of the arrival phase. Let m 
be  the  number  of  cells  that  arrive  during  the  arrival  phase  that 
precede c but not b at the end of the arrival phase. Since k + m ≤ T 
and slack(b) ≥ −k, 
c
slack
)(
)
=
=
−
≥
cq
cp
)(
)(
−
slack
mb
)(
bq
)(
−≥
(
−
(
+
km
+
mbp
)(
−≥
T
)
This remains true at the end of each subsequent arrival phase, so 
long as c remains at the input. (cid:132) 
Lemma 4 leads directly to the following theorem. 
Theorem 2. For S ≥2, any BLOOFA scheduler is work-conserving. 
2.3 Implementation issues 
We have shown that the combination of two different VOQ order-
ing  strategies  with  a  maximal,  ordered  scheduler  ensures  work-
conserving operation when the speedup is at least 2. We now need 
to  show  how  to  realize  a  maximal,  ordered  scheduler.  We  start 
with  a  centralized  algorithm  and  then  show  how  it  can  be  con-
verted into an iterative, distributed algorithm. While the overhead 
of such iterative algorithms makes them impractical, they provide 
the basis for non-iterative algorithms that are practical. 
The key observation is that the scheduling problem can be re-
duced to finding a blocking flow in an acyclic flow network [13]. 
A  flow  network  is  a  directed  graph  with  a  distinguished  source 
vertex s, a distinguished sink vertex t and a non-negative capacity 
for each edge. A flow, in such a network, is a non-negative func-
tion defined on the edges. The flow on an edge must not exceed 
its capacity and for every vertex but s and t, the sum of the flows 
on  the  incoming  edges  must  equal  the  sum  of  the  flows  on  the 
outgoing edges. An edge in the network is called saturated, if its 
flow  is  equal  to  its  capacity.  A  blocking  flow  is  one  for  which 
every path from s to t contains at least one saturated edge. (Note 
that a blocking flow is not necessarily a maximum flow.) 
To convert the scheduling problem to the problem of finding a 
blocking  flow,  we  first  need  to  construct  a  flow  network.  Our 
network  has  a  source  s,  a sink t, n vertices referred to as inputs 
and another n vertices referred to as outputs. There is an edge with 
capacity ST from s to each input. Similarly, there is an edge with 
capacity  ST  from  each  output  to  t.  For  each  non-empty  VOQ  at 
input i of the router with cells for output j, there is an edge in the 
flow network from input i to output j with capacity equal to the 
number of cells in the VOQ. (An example of a flow network con-
structed to solve a particular scheduling problem together with the 
corresponding solution is shown in Fig. 1.)  
Scheduling Problem 
Scheduling Problem 
Blocking Flow Problem with Solution 
Blocking Flow Problem with Solution 
Scheduling Solution 
Scheduling Solution 
uts
uts
uts
p
p
p
in
in
in
VOQ 
VOQ 
VOQ 
levels
levels
levels
0
0
0
1
1
1
2
2
2
3
3
3
output
output
output
queue
queue
queue
levels
levels
levels
outputs
outputs