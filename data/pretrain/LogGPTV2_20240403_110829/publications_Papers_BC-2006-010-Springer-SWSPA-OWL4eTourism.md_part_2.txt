arbitrary ways with RDF and RDF Schema. One major problem is that
OWL Full is so expressive that it is undecidable.
10 Semantic Web Processes and Their Applications
Figure 4-4. OWL sublanguages
According to Figure 4-4, every OWL Lite ontology or
conclusion is a legal OWL DL ontology or conclusion, but not
the inverse, and so on for OWL DL and OWL Full.
5. OWL ONTOLOGY DEVELOPMENT
Tourism is a data rich domain. Data is stored in many hundreds of
data sources and many of these sources need to be used in concert
during the development of tourism information systems. Our e-
tourism ontology provides a way of viewing the world of tourism. It
organizes tourism related information and concepts. The e-tourism
ontology provides a way to achieve integration and interoperability
through the use of a shared vocabulary and meanings for terms with
respect to other terms.
Figure 4-5. What, Where, and When
The e-tourism ontology was built to answer three main questions
(Figure 4-5) that can be asked when developing tourism applications:
What, Where, and When.
• What. What can a tourist see, visit and what can he do while
staying at a tourism destination?
• Where. Where are the interesting places to see and visit located?
Where can a tourist carry out a specific activity, such as playing
golf or tennis.
Developing an OWL Ontology for e-Tourism 11
• When. When can the tourist visit a particular place? This includes
not only the day of the week and the hours of the day, but also the
atmospheric conditions of the weather. Some activities cannot be
undertaken if it is raining for example.
Constructing an ontology is a time-consuming task since it is
necessary to find out information about real tourism activities and
infrastructures and feed them into the knowledge base.
Figure 4-6. Creating the e-tourism ontology using Protégé editor
In the next section, we will be construction an OWL ontology for
e-tourism. Since RDFS and OWL are compatible, the ontology
developed will contain RDFS elements within the OWL syntax. For
those who dislike writing ontologies by hand, a few ontology editors
are available. We recommend using one of the most well-know
ontology editors, Protégé, which is illustrated in Figure 4-6, to
develop the ontology presented in the next section.
5.1 Header
An OWL ontology starts with a set of XML namespace
declarations enclosed in an opening rdf:RDF tag. XML namespaces
allow a means to unambiguously interpret identifiers and make the
rest of the ontology presentation much more readable. A namespace is
declared using three elements: the reserved XML attribute xmlns, a
12 Semantic Web Processes and Their Applications
short prefix to identify the namespace, and the value which must be a
URI (Uniform Resource Identifier) reference. An example of a
namespace for our e-tourism ontology is:
Our initial set of XML namespace declarations which is enclosed
in an opening rdf:RDF tag is the following:
xmlns =" http://dme.uma.pt/jcardoso/owl/e-tourism#"
xml:base="http://dme.uma.pt/jcardoso/owl/e-
tourism#">
xmlns:weather="http://dme.uma.pt/owl/weather#"
The first four namespace declarations are conventional
declarations. They are used to introduce the OWL (xmlns:owl), RDF
(xmlns:rdf), and RDFS (xmlns:rdfs) vocabularies, and XML Schema
(xmlns:xsd) datatypes.
The following three declarations identify the namespace associated
with our ontology. The first makes it the default namespace, stating
that unprefixed qualified names refer to the current ontology. The
second identifies the base URI for our ontology. The third declaration
identifies the namespace of the supporting weather ontology with the
prefix weather. The URI for an identifier is the concatenation of the
xml:base value (or the document URL if there is no xml:base) with
"#" and the identifier. Thus, the complete URI for an OWL class
named ABC is http://dme.uma.pt/owl/e-tourism#ABC.
Once the namespaces are specified, an OWL ontology specifies a
set of assertions grouped under the owl:Ontology element. The
assertions include the version information which assumes that
different versions of the ontology may possibly be developed. The
main assertions that can be made about the versioning are:
Developing an OWL Ontology for e-Tourism 13
• owl:versionInfo – a statement which generally contains a string
giving information about the version of the ontology.
• owl:priorVersion – a statement that makes reference to another
ontology indicating earlier versions of the current ontology. This
statement can be used by ontology management tools and
applications.
• owl:backwardCompatibleWith – contains a reference to another
ontology and indicates that all identifiers from the previous version
have the same intended interpretations in the new version.
• owl:incompatibleWith – a statement contains a reference to
another ontology indicating that the ontology is a newest version
of the referenced ontology but is not backward compatible with it.
• owl:imports – provides support for integrating definitions specified
in another OWL ontology published on the Web and identified by
a URI. The meaning of the imported ontology is considered to be
part of the meaning of the importing ontology.
For example:
E-Tourism OWL Ontology
 v.1 2005-10-25 
E-Tourism Ontology
...
...
Between the header and the closing rdf:RDF tag is the definition of
the ontology itself.
14 Semantic Web Processes and Their Applications
5.2 Classes
The main components of the tourism ontology are concepts,
relations, instances, and axioms. A concept represents a set or class of
entities within the tourism domain.
Each class defined by an ontology describes common
characteristics of individuals. OWL classes permit much greater
expressiveness than RDF Schema classes. Consequently, OWL has
created their own classes, owl:Class. owl:Thing is a predefined OWL
class. All instances are members of owl:Thing. The owl:Nothing is
also a predefined class and represents the empty class. Each defined
class is of type owl:Class. What, Where, and When are examples of
classes used in our e-tourism ontology. These concepts are represented
in OWL in the following way:
 Describes a tourist 
The class What refers to activities that tourists can carry out, such
as golf, sightseeing, shopping, or visiting a theatre. The class Where
refers to the places where a tourist can stay (such as a Hotel) and
places where he can carry out an activity. Examples of infrastructures
that provide the means for exerting an activity include restaurants,
cinemas, or museums. The class When refers to the time when a
tourist can carry out an activity at a certain place.
The ontology also includes relations which describe the
interactions between classes or properties. A class hierarchy may be
defined by stating that a class is a subclass (owl:subClassOf) of
another class. For example, in the tourism domain, the class Squash,
Paintball, and Golf are subclasses of the class What. These three
classes and their relationship are defined using the OWL vocabulary:
...
 Squash is an activity a tourist
can carry out
Developing an OWL Ontology for e-Tourism 15
...
The first statement states that in order to be an instance of the class
Squash, an individual must also be an instance of the class What.
However, there may be instances of the class What that are not
instances of Squash. Thus being a What is a necessary condition for
Squash, but is not sufficient.
In our example, we have defined the three subclasses using two
different notations. The semantics of the two notations are the same.
Nevertheless, we prefer the second one, since it is easier to read.
Two classes can be made equivalent using the assertion
owl:equivalentClass. This property, when applied to two classes, A
and B, is to be interpreted as “classes A and B contain exactly the
same set of individuals.” This property is especially useful to be able
to indicate that a particular class in an ontology is equivalent to a class
defined in a second ontology. For example, the class What can be
defined equivalent to the class Activity:
 Describes an activity a tourist
can carry out
It is also possible to state that two classes are disjoint using the
owl:disjointWith statement. This statement guarantees that an
individual that is a member of one class cannot simultaneously be an
instance of another class. For example, we can express that the
activity Golf is disjoint with the activities Squash and Paintball.
 Golf is an activity a tourist
can carry out
16 Semantic Web Processes and Their Applications
This example expresses that instances belonging to one subclass,
e.g. Golf, cannot belong to another subclass, e.g. Squash or Paintball.
A reasoning engine could identify an inconsistency when an
individual of the class Golf is stated to be an instance of the class
Squash. The reasoning engine could also deduce that if G is an
instance of Golf, then G is not an instance of Squash or Paintball.
5.3 Complex Classes
The OWL language provides a set of statements for building
complex class descriptions from simpler ones by allowing the
specification of the Boolean combination of classes. Boolean
connectives (owl:complementOf, owl:intersectionOf, and
owl:unionOf) combine class descriptions using logical connectives.
For example, two classes, A and B, can be intersected yielding a new
class C. Additional set operators include the union and the
complement. With OWL Lite only the intersection of classes is
allowed.
The owl:complementOf element is applied to a single class and
describes the set of all individuals which are known not to be
instances of the class. For example, we can state that tourists from the
European Union are not tourists from the non-European Union
countries.
In this example, the class NonEUTourist refers to a very large set
of individuals. The class has as its members all individuals that do not
belong to the EUTourist class. This means that an individual of any
class, such as Locals, Countries, and SiteSeeingPackage, other than
the class EUTourist, belongs to the class NonEUTourist.
Developing an OWL Ontology for e-Tourism 17
As the name suggests, the owl:intersectionOf, can be used to
intersect two classes, A and B. The new class includes the individuals
that were both in class A and in class B.
This element is often used with the owl:Restriction element. For
example, taking the intersection of the class of tourist with the
anonymous class of people that are senior citizens describes the class
of senior tourists.
The individuals who are members of the seniorTourists class are
precisely those individuals who are members of both the class
#Tourist and the anonymous class created by the restriction on the
property #category. While not shown in this example, the category of
a tourist is divided into Junior, Young, and Senior. Restrictions will be
discussed later.
The element owl:unionOf when applied to two classes, A and B,
works in a similar way to the owl:intersectionOf element, but creates a
new class which has as its members all individuals that are in class A
or in class B. The new class is equal to the union of the two initial
classes. For example, the individuals of the class OutdoorSport are the
union of all the individuals that belong to the class Golf or to the class
Paintball.
In other words, the individuals who are members of the class
OutdoorSport are those individuals who are either members of the
class Golf or the class Paintball.
18 Semantic Web Processes and Their Applications
5.4 Enumeration
An OWL class can be described by enumeration of the individuals
that belong to the class. The members of the class are exactly the set
of enumerated individuals. This is achieve using the element
owl:oneOf and enables a class to be described by exhaustively
enumerating its individuals. This element is not allowed with OWL
Lite. For example, the class of HotelRoomView can be described by
enumerating it individuals: Sea, Mountain, and City.
5.5 Properties
5.5.1 Simple Properties
OWL can define the properties of classes. The OWL property is