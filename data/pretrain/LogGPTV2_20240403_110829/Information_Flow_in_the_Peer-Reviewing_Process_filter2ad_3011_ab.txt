### Introduction

In this section, we present the lower bound \( N \) on the size \( A(n, 2w - 2e + 2) \) of codes suitable for transmitting data in the presence of errors. Let \( e \) be the number of recognized errors that should be sufficient to decode. This condition is met if any two codewords \( c_1 \) and \( c_2 \) share at most \( e - 1 \) bits that are set. This holds if and only if at least \( w - e + 1 \) bits are set only in \( c_1 \), and \( w - e + 1 \) bits are only set in \( c_2 \). This is equivalent to the fact that \( c_1 \) and \( c_2 \) have a Hamming distance of \( 2w - 2e + 2 \).

Let \( A(n, d, w) \) denote the size of the largest constant-weight code with codeword length \( n \), minimal Hamming distance \( d \), and weight \( w \). Then there is a code satisfying the above conditions if and only if \( A(n, 2w - 2e + 2, w) > N \). Constant-weight codes are well-studied, and references [5] and [18] provide (constructive) lower bounds for \( A(n, d, w) \) for many parameters.

For example, if we have \( n = 24 \) possible errors, the lower bounds given in Figure 2 can be derived from [5] and [18]. Assume we want to encode the first two letters of the referee's name and add a special index to denote failure. Then \( N = 26 \times 26 + 1 \). Some possible choices for \( w \) and \( e \) are (4, 4), (5, 4), (6, 5), (7, 5), and (8, 5). For our online demonstration, we have chosen \( (w, e) = (8, 5) \), meaning that if the referee detects 5 out of 8 errors, we can decode the two letters. Note that even if the referee finds only 4 errors, the set of possible decodings is still quite small. We chose this as a compromise between the number of errors (eight) and the percentage of mistakes the referee may overlook (36.5%). Eight errors is quite a lot for a single page of text, but this can be remedied by either distributing the errors over a longer text or by increasing \( n \). We might prepare a text where almost each word contains a potential error, resulting in \( n \) being in the order of several hundreds.

### Technical Realization

In this section, we discuss the technical aspects of the implementation and the interpreters and platforms to which our methods can be applied. The results are summarized in Figure 3.

#### PostScript Interpreters and Capabilities

- **GhostScript**:
  - **Windows**: Can read environment variables and list directories.
  - **Unix/Linux**: Can list directories but has limited file access.

- **Adobe Distiller**:
  - Allows full file system access, which poses a significant security threat. We have informed Adobe of this issue, and they will address it as soon as possible [13].

- **PS Printer**:
  - Behavior is printer-dependent. The complete file system can be read and written, which imposes a great security threat.

Figure 3 compares the capabilities of some PostScript interpreters. In our context, this unlimited access allows us to retrieve any information from the referee’s computer, not limited to the username.

#### Introducing Dynamic Errors

The data accessible to the document varies for different PostScript interpreters. When the PostScript document is interpreted on a printer, the username often is not available. However, under Windows, the PostScript code is usually interpreted by the computer, making the username available. Under Unix, the behavior depends on the printer driver and the capabilities of the printer.

#### Identifying the User

The first step for the PostScript document is to determine the username. Different methods exist depending on the PostScript interpreter:

- **GhostScript**:
  - Uses the `getenv` command to read environment variables such as `USERNAME` (Windows) and `USER` or `LOGNAME` (Linux).
  - Commonly used by university employees through front-ends like GhostView, GSview, KGhostView, etc.

- **Directory Structure**:
  - While file access is restricted in some interpreters, directories can be listed using the `filenameforall` command. This allows detecting home directories and extracting the user name.

- **Adobe Distiller**:
  - Allows full file system access but has no command to access environment variables.
  - As of version 7.0.9, Adobe Distiller imposes no limitation to file access, which is a significant security risk.

#### Implementing Dynamically Changing Content

Since PostScript is Turing-complete, any dynamic changes are possible. However, in practice, we use existing engines like TeX to typeset the content. TeX allows including PostScript fragments, which can be used to dynamically show or hide parts of the document. For each error, we typeset both the correct and incorrect spellings at the same place and use PostScript code to hide one of these spellings. This approach requires that the correct and incorrect spellings take up approximately the same space.

### Outlook

We have shown that the programming capabilities of PostScript can undermine the confidentiality of personal data on the recipient’s computer. As an example, we demonstrated how to exploit this weakness to circumvent the anonymity of the reviewer in the peer-reviewing process. Our result gives rise to several related attacks when using PostScript:

1. **Information Transmission**: Malicious PostScript code might have access to passwords stored on the hard disk.
2. **Adaptive Document Modification**: After identifying the referee, the document could adaptively modify itself to include references to the referee’s work or comments likely to please that particular referee, increasing the probability of acceptance.
3. **Arbitrary Code Installation**: In PostScript implementations with unlimited write access (e.g., Adobe Distiller), arbitrary code can be installed on the referee’s machine.
4. **Legal Implications**: A contract that changes after being electronically signed might have serious legal implications.

To make PostScript resistant to these attacks, the interpreter should provide the same environment to each document it processes, regardless of the computer or platform. Disabling file access, directory listing, and environment access would be sufficient. Since GhostScript already has a mechanism to restrict file access, this mechanism could be extended and serve as an example for other interpreters.

Finally, we emphasize that PostScript is not the only document format that allows dynamic documents. The Portable Document Format (PDF) also allows embedded JavaScript code to change the document. However, we focused on PostScript due to its wide range of methods to identify the user and the ease of presenting the underlying mechanisms.

### References

[1] K. Ahsan and D. Kundur. Practical data hiding in TCP/IP. In Proceedings of ACM Workshop on Multimedia Security, 2002.

[2] R. J. Anderson and F. A. P. Petitcolas. On the limits of steganography. IEEE Journal of Selected Areas in Communications, 16(4):474–481, 1998.

[3] O. Berkman, M. Parnas, and J. Sgall. Efficient dynamic traitor tracing. In SODA ’00: Proceedings of the eleventh annual ACM-SIAM symposium on Discrete algorithms, pages 586–595. Society for Industrial and Applied Mathematics, 2000.

[4] D. Boneh and M. Franklin. An efficient public key traitor tracing scheme. In Proceedings Crypto ’99, volume 1666 of LNCS, pages 338–353. Springer, 1999.

[5] A. E. Brouwer, J. B. Shearer, N. J. A. Sloane, and W. D. Smith. A new table of constant weight codes. IEEE Trans. Info. Theory, 36:1334–1380, 1990.

[6] T. Burton. HTML PostScript. Online renderer available at http://www.terryburton.co.uk/htmlrenderer/.

[7] S. Cabuk, C. Brodley, and C. Shields. IP covert timing channels: Design and detection. In Proceedings of 11th ACM Conference on Computer and Communication Security, pages 178–187, 2004.

[8] B. Chor, A. Fiat, and M. Naor. Tracing traitors. In CRYPTO ’94: Proceedings of the 14th Annual International Cryptology Conference on Advances in Cryptology, pages 257–270. Springer-Verlag, 1994.

[9] I. Cox, J. Kilian, T. Leighton, and T. Shamoon. A secure, robust watermark for multimedia. In Proceedings of Information Hiding, pages 185–206, 1996.

[10] Ghostscript. Homepage. Available at http://www.cs.wisc.edu/~ghost.

[11] F. Hartung and M. Kutter. Multimedia watermarking techniques. Proceedings of the IEEE, 87(7):1079–1107, 1999.

[12] A. S. Incorporated. PostScript Language Reference. Adobe Systems Incorporated, 1999.

[13] A. S. Incorporated. Personal communication, Nov. 2006.

[14] A. Karlsson. PS-HTTPD. Available at http://www.godisch.de/debian/pshttpd/.

[15] B. W. Lampson. A note on the confinement problem. Communication of the ACM, 16(10):613–615, 1973.

[16] K. A. McMillan. A platform independent computer virus. Master’s thesis, University of Wisconsin-Milwaukee, 1994.

[17] I. Moskowitz and A. R. Miller. Simple timing channels. In Proceedings of 1994 IEEE Symposium on Security and Privacy, pages 56–64, 1994.

[18] E. M. Rains and N. J. A. Sloane. Table of constant weight binary codes. Online available at http://www.research.att.com/~njas/codes/Andw/.