3
24
24
4
4
4
N
498
10626
n
24
24
n
24
24
w e
4
6
6
5
w e
8
4
5
8
N
532
7078
N
38
759
Figure 2. Lower bound N on the size A(n, 2w−
2e + 2) of codes suitable for transmitting data
in errors.
e be the number of recognized errors that should be sufﬁ-
cient to decode. This is fulﬁlled if for any two codewords
c1, c2, they share at most e − 1 bits that are set. This holds
if and only if at least w − e + 1 bits are set only in c1, and
w − e + 1 bits are only set in c2. And this is equivalent to
the fact that c1 and c2 have Hamming distance 2w − 2e + 2.
Let A(n, d, w) denote the size of the largest constant-weight
code with codeword length n, minimal Hamming distance d
and weight w. Then there is a code satisfying the above con-
ditions if and only if A(n, 2w − 2e + 2, w) > N . Constant-
weight codes are well-studied, e.g., [5, 18] give (construc-
tive) lower bounds for A(n, d, w) for many parameters.
Assume for example, that we have n = 24 possible er-
rors. By [5, 18] we get the lower bounds given in Figure 2.
Assume that we want to encode the ﬁrst two letters of the
referee name and to add a special index to denote failure.
Then N = 26 · 26 + 1. Some possible choices for w and e
are then (4, 4), (5, 4), (6, 5), (7, 5), and (8, 5). For our on-
line demonstration we have chosen (w, e) = (8, 5), i.e., if
the referee detects 5 out of 8 errors, we can decode the two
letters. (Note that we have graceful degradation. Even if
the referee ﬁnds only 4 errors, the set of possible decodings
is still quite small.) We have chosen this as a compromise
between the number of errors (eight) and the percentage of
mistakes the referee may overlook (36.5 %). Admittedly,
eight errors is quite a lot for a single page of text. This can
be remedied by either distributing the errors on a longer text
or by increasing n. We might prepare a text where almost
each word may contain a potential error, resulting in n being
in the order of several hundreds.
3. Technical Realization
We now give the technical aspects of the implementation
and discuss which interpreters and platforms our methods
can be applied to. The results are summarized in Figure 3.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:53:55 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007GhostScript
– Windows
– Unix/Linux
Adobe Distiller
PS Printer
Environment
Variables
Directory
Listing
File
Access
X
X
−
(X)1
X
X
−
−
X
Printer dependent.
the complete ﬁlesystem can be read and written. Since we
believe that this imposes a great security threat going far
beyond the issue presented in this paper, we have informed
Adobe of this problem. They will ﬁx this issue as soon as
possible [13]. In our context, this unlimited access of course
allows us to retrieve any information from the referee’s com-
puter, not limited to the username.
Figure 3. Comparison of the capabilities of
some PostScript interpreters
3.2. Introducing dynamic errors
We note that the data accessible to the document varies
for different PostScript interpreters. In particular, when the
PostScript document is interpreted on a printer, the user-
name often is not available at all. However, at least under
Windows the PostScript code is usually interpreted by the
computer even when printing, so in this case the username
is available. Under Unix, the behavior depends strongly on
the printer driver and the capabilities of the printer.
3.1. Identifying the user
The ﬁrst step for the PostScript document is to determine
the username. Depending on the PostScript interpreter on
the referee’s computer, different methods for reading out
the username exist (see also Table 3). GhostScript imple-
ments a slightly extended set of operations which includes
a command getenv that allows to read out environment
variables. The user name is usually contained in the envi-
ronment variable USERNAME under Windows and USER or
LOGNAME under Linux. GhostScript is by far the most com-
monly used PostScript interpreter of university employees
(note that front-ends like GhostView, GSview, KGhostView,
etc. internally invoke GhostScript). Therefore this approach
already gives us a fair chance of success.
Another source for acquiring the user name is the direc-
tory structure of the computer. Note that, while ﬁle access
is restricted with some interpreters such as GhostScript, di-
rectories can be listed on all implementations we are aware
of using the command filenameforall. This allows to
try and detect, e.g., the home directories available on the
computer. In case of a single user machine, the user name
can be extracted from the name of the home directory. We
use this approach in the case of Adobe Distiller, which al-
lows ﬁlesystem access but has no command to access envi-
ronment variables.
At this point it should be noted that Adobe Distiller im-
poses no limitation to ﬁle access (as of version 7.0.9). So
1There is an inconsistent behavior of GhostScript under Windows: the
command filenameforall only lists those directories which have
some attribute set (i.e., which are hidden, read-only or system ﬁles). The
GhostScript source code reveals this to be a bug.
The second challenge is to implement dynamically
changing content in PostScript. Since PostScript is Turing-
complete, any dynamic changes are possible. However, in
practice we do not want to implement a complete typeset-
ting engine in PostScript, but use existing engines like TEX
for this purpose. Fortunately, this is possible since TEX
allows to include PostScript fragments which are simply
passed through into the ﬁnal document. This PostScript
code can then be used to dynamically show or hide parts
of the document. So all we have to do is for each error
to typeset both the correct and the incorrect spelling at the
same place, and to use the PostScript code to hide one of
these spellings. Of course, this approach requires that the
correct and the incorrect spelling take up approximately the
same space.
4. Outlook
We have shown that the fact that PostScript is a pro-
gramming language can undermine the conﬁdentiality of
personal data on the recipient’s computer. As an example,
we showed how to exploit this weakness to circumvent the
anonymity of the reviewer in the peer-reviewing process.
Our result gives rise to several related attacks when us-
ing PostScript; we brieﬂy sketch some of them for com-
pleteness: (I) Information transmitted back to the originator
of the document is not limited to the username. In some
cases, malicious PostScript code might, e.g., have access to
passwords stored on the hard disk. (II) There is an inter-
esting variant of our attack on the peer-reviewing process
that does not even need a back-channel. After identifying
the referee, the document could adaptively modify itself to
include, e.g., references to the referee’s work or comments
that are likely to please that particular referee and thus in-
crease the probability of acceptance. (III) In PostScript im-
plementations with unlimited write access (e.g., Adobe Dis-
tiller), much more damage can be done since arbitrary code
can be installed on the referee’s machine. (IV) A contract
that changes after having been electronically signed might
even have serious legal implications.
Making PostScript resistant to the attack described in
this paper, as well as the attacks listed above, is relatively
straightforward: If a document cannot gain any information
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:53:55 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007[12] A. S. Incorporated. PostScript Language Reference. Adobe
Systems Incorporated, 1999.
[13] A. S. Incorporated. Personal communication, Nov. 2006.
[14] A. Karlsson.
Available
http://www.godisch.de/debian/pshttpd/.
PS-HTTPD.
at
[15] B. W. Lampson. A note on the conﬁnement problem. Com-
munication of the ACM, 16(10):613–615, 1973.
[16] K. A. McMillan. A platform independent computer virus.
Master’s thesis, University of Wisconsin-Milwaukee, 1994.
[17] I. Moskowitz and A. R. Miller. Simple timing channels. In
Proceedings of 1994 IEEE Symposium on Security and Pri-
vacy, pages 56–64, 1994.
[18] E. M. Rains and N. J. A. Sloane.
Table of con-
at
available
stant weight binary codes.
http://www.research.att.com/˜njas/codes/Andw/.
Online
from the computer it is interpreted on, then the attack does
not work anymore. This means that the interpreter should
provide exactly the same environment to each document it
processes, on every computer and on any platform. To the
best of our knowledge it is sufﬁcient to disable ﬁle access,
directorylisting, and environment access. Note that one can-
not completely disable these commands, as often parts of
the PostScript interpreter are written in PostScript as well.
However, since GhostScript already has a mechanism to
restrict ﬁle access when interpreting user documents, this
mechanism could simply be extended. This mechanism
could also serve as an example for other interpreters.
Finally, we want to emphasise that PostScript is not
the only document format that allows dynamic documents.
The Portable Document Format (PDF) allows embedded
JavaScript code to change the document. However, we con-
centrated on PostScript in this document, as it seem to offer
the widest range of methods to identify the user, and it al-
lows an easy presentation of the underlying mechanisms.
References
[1] K. Ahsan and D. Kundur. Practical data hiding in TCP/IP.
In Proceedings of ACM Workshop on Multimedia Security,
2002.
[2] R. J. Anderson and F. A. P. Petitcolas. On the limits of
steganography. IEEE Journal of Selected Areas in Commu-
nications, 16(4):474–481, 1998.
[3] O. Berkman, M. Parnas, and J. Sgall. Efﬁcient dynamic
traitor tracing. In SODA ’00: Proceedings of the eleventh an-
nual ACM-SIAM symposium on Discrete algorithms, pages
586–595. Society for Industrial and Applied Mathematics,
2000.
[4] D. Boneh and M. Franklin. An efﬁcient public key traitor
tracing scheme. In Proceedings Crypto ’99, volume 1666 of
LNCS, pages 338–353. Springer, 1999.
[5] A. E. Brouwer, J. B. Shearer, N. J. A. Sloane, and W. D.
Smith. A new table of constant weight codes. IEEE Trans.
Info. Theory, 36:1334–1380, 1990.
[6] T.
Burton.
HTML
PostScript.
pure
http://www.terryburton.co.uk/htmlrenderer/.
Online
renderer
available
in
at
[7] S. Cabuk, C. Brodley, and C. Shields.
IP covert timing
channels: Design and detection.
In Proceedings of 11th
ACM Conference on Computer and Communication Secu-
rity, pages 178–187, 2004.
[8] B. Chor, A. Fiat, and M. Naor. Tracing traitors. In CRYPTO
’94: Proceedings of the 14th Annual International Cryptol-
ogy Conference on Advances in Cryptology, pages 257–270.
Springer-Verlag, 1994.
[9] I. Cox, J. Kilian, T. Leighton, and T. Shamoon. A secure,
robust watermark for multimedia. In Proceedings of Infor-
mation Hiding, pages 185–206, 1996.
[10] Ghostscript
Available
http://www.cs.wisc.edu/˜ghost.
homepage.
[11] F. Hartung and M. Kutter. Multimedia watermarking tech-
online
at
niques. Proceedings of the IEEE, 87(7):1079–1107, 1999.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:53:55 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007