# Web Generic
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
## 大纲
* **[文件包含](#文件包含)**
    * [日志中毒攻击](#日志中毒攻击)
* **[文件解析](#文件解析)**
    * [IIS](#iis)
    * [Nginx](#nginx)
    * [Apache](#apache)
    * [其他](#其他)
* **[文件上传](#文件上传)**
* **[信息泄露](#信息泄露)**
    * [目录遍历](#目录遍历)
    * [Fileread](#fileread)
    * [源码泄露](#源码泄露)
        * [GIT](#git)
        * [SVN](#svn)
        * [bzr](#bzr)
    * [DS_Store文件泄漏](#ds_store文件泄漏)
    * [SWP文件泄露](#swp文件泄露)
    * [网站备份压缩文件](#网站备份压缩文件)
    * [WEB-INF/web.xml信息泄露](#web-infwebxml信息泄露)
    * [idea文件夹泄露](#idea文件夹泄露)
    * [JS敏感信息泄露](#js敏感信息泄露)
    * [Swagger_REST_API信息泄露](#Swagger_REST_API信息泄露)
    * [各类APIkey泄露](#各类apikey泄露)
    * [SOAP泄露](#SOAP泄露)
* **[不安全的输入](#不安全的输入)**
    * [http参数污染](#http参数污染)
    * [CRLF_Injection](#crlf_injection)
    * [host_Injection](#host_Injection)
    * [SQL_inje](#sql_inje)
    * [XSS](#xss)
    * [XXE](#xxe)
    * [SSRF](#ssrf)
    * [SSTI](#ssti)
* **[配置不当](#配置不当)**
    * [代理配置不当](#代理配置不当)
    * [CORS](#cors)
    * [CSRF](#csrf)
    * [jsonp劫持](#jsonp劫持)
* **[钓鱼欺骗](#钓鱼欺骗)**
    * [URL跳转漏洞](#url跳转漏洞)
    * [二维码劫持](#二维码劫持)
    * [点击劫持](#点击劫持)
---
**相关文章**
- [聊聊安全测试中如何快速搞定 Webshell](https://www.freebuf.com/articles/web/201421.html)
- [Web Service 渗透测试从入门到精通](https://www.anquanke.com/post/id/85910)
- [我的Web应用安全模糊测试之路](https://web.archive.org/web/20180814113607/https://gh0st.cn/archives/2018-07-25/1)
- [聊聊近期公开的几个GitLab高额奖金漏洞](https://mp.weixin.qq.com/s/m8AZuqXgGGitcwsP4l-sVQ)
---
## 文件包含
文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。 比如 在 PHP 中，提供了：`include()`,`include_once()`,`require()`,`require_once()` 这些文件包含函数，这些函数在代码设计中被经常使用到。
大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。 但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。 攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。 根据不同的配置环境，文件包含漏洞分为如下两种情况：
1. 本地文件包含漏洞：仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。
2. 远程文件包含漏洞：能够通过 url 地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩
因此，在 web 应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。
**相关文章**
- [LFI、RFI、PHP 封装协议安全问题学习 - 骑着蜗牛逛世界](https://www.cnblogs.com/LittleHann/p/3665062.html#3831621)
- [php 文件包含漏洞 | Chybeta](https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/)
- [文件包含漏洞](https://blog.csdn.net/le0nis/article/details/52043732)
- [文件包含漏洞(绕过姿势)](https://xz.aliyun.com/t/1189)
- [文件包含漏洞原理分析](https://zhuanlan.zhihu.com/p/25069779)
- [文件包含漏洞总结 | 瓦都克](http://byd.dropsec.xyz/2016/07/19/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/)
- [本地文件包含漏洞利用技巧](https://www.secpulse.com/archives/55769.html)
- [Directory Traversal, File Inclusion, and The Proc File System](https://blog.netspi.com/directory-traversal-file-inclusion-proc-file-system/)
- [Exploiting PHP File Inclusion - Overview | Reiners' Weblog](https://websec.wordpress.com/2010/02/22/exploiting-php-file-inclusion-overview/)
- [Local File Inclusion with Magic_quotes_gpc enabled - NotSoSecure](https://notsosecure.com/local-file-inclusion-magicquotesgpc-enabled)
- [Positive Technologies - learn and secure : Another alternative for NULL byte](https://web.archive.org/web/20210514190401/https://blog.ptsecurity.com/2010/08/another-alternative-for-null-byte.html)
- [远程包含和本地包含漏洞的原理 - Kevins 的天空](https://blog.csdn.net/iiprogram/article/details/2349322)
- [聊聊安全测试中如何快速搞定Webshell](https://www.freebuf.com/articles/web/201421.html)
**相关案例**
- [IKEA官网本地文件包含(LFI)漏洞分析](https://blog.51cto.com/u_15127538/2714257)
**rfi payload**
- https://github.com/infosec-au/fuzzdb/blob/master/attack-payloads/rfi/
**lfi payload**
- https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI
- https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion/Intruders
- https://github.com/infosec-au/fuzzdb/blob/master/attack-payloads/rfi/rfi.txt
**几种利用方法**
- 常规利用
    `Payload: http://www.test.com/test.php?file=upload/hourse.jpg&x=phpinfo()`
- 文件协议读取
    其前提是得知道网站应用的绝对路径(物理路径):
    `Payload: http://www.test.com/test.php?file=file://D:/Server/htdocs/test/upload/hourse.jpg&x=phpinfo()`
    结果和上面一样,只是地址栏链接不一样.
- 压缩包文件读取
    依然需要知道压缩包文件的绝对路径
    `Payload: http://www.test.com/test.php?file=zip://D:/Server/htdocs/test/upload/shell.zip%23shell.php&x=phpinfo())`
- phar:// 相对路径运行 PHP 文件
    当我们想要运行自己的 PHP 文件,该咋做呐？通过文件包含(include,require 这类函数),首先构造一个这样的文件,将 webshell.php 添加到压缩文件 .zip,然后将压缩包后缀名改为 .jpg 反正合法的文件后缀即可(一般的操作是这样的,当只能上传图片的时候),最后使用 phar:// 按照相对路径读取并执行文件.
    `Payload:http://www.test.php?file=phar://upload/shell.jpg/shell.php?x=phpinfo()`
- 读取源码
    当我们没法儿上传文件,但是又想读取文件的源码来寻找别的漏洞从而进一步利用该怎么做呐？同样的利用 php://filter/ 协议可以实现,要注意的是,因为编码问题,一般我们会将读取的文件先 Base64 编码一下输出:
    `Payload:http://www.test.com/test.php?file=php://filter/read=convert.base64-encode/resource=upload/shell.php`
### 日志中毒攻击
`log poisoning`
**相关文章**
- [RCE with LFI and SSH Log Poisoning](https://www.hackingarticles.in/rce-with-lfi-and-ssh-log-poisoning/)
- [Apache Log Poisoning through LFI](https://www.hackingarticles.in/apache-log-poisoning-through-lfi/)
- [From Local File Inclusion to Remote Code Execution - Part 1 | Outpost 24 blog](https://outpost24.com/blog/from-local-file-inclusion-to-remote-code-execution-part-1)
- [SMTP Log Poisioning through LFI to Remote Code Execution](https://www.hackingarticles.in/smtp-log-poisioning-through-lfi-to-remote-code-exceution/)
---
## 文件解析
**相关文章**
- [解析漏洞总结 - erevus](http://www.vuln.cn/7070)
### IIS
**5.x/6.0 解析漏洞**
IIS 6.0 解析利用方法有两种
1. 目录解析
    `/xx.asp/xx.jpg`
2. 文件解析
    `wooyun.asp;.jpg `
第一种,在网站下建立文件夹的名字为 .asp、.asa 的文件夹,其目录内的任何扩展名的文件都被 IIS 当作 asp 文件来解析并执行.
例如创建目录 wooyun.asp,那么 `/wooyun.asp/1.jpg` 将被当作 asp 文件来执行.假设黑阔可以控制上传文件夹路径,就可以不管你上传后你的图片改不改名都能拿 shell 了.
第二种,在 IIS6.0 下,分号后面的不被解析,也就是说 `wooyun.asp;.jpg` 会被服务器看成是wooyun.asp
还有 IIS6.0 默认的可执行文件除了 asp 还包含这三种
```
/wooyun.asa
/wooyun.cer
/wooyun.cdx
```
- **相关案例**
    - [网站安全狗IIS6.0解析webshell访问限制bypass](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0128432)
    - [网站安全狗免杀神技+IIS6.0解析WebShell访问限制Bypass](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0104444)
    - [网站安全狗IIS6.0解析webshell访问拦截bypass](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-071861)
    - [桃源网络硬盘&IIS6.0解析漏洞](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2011-02632)
---
### Nginx
**IIS 7.0/IIS 7.5/Nginx ');?>`
然后访问 wooyun.jpg/.php,在这个目录下就会生成一句话木马 shell.php
- **相关案例**
    - [用友软件某分站SQL注入漏洞+nginx解析漏洞](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-032250)
    - [新浪网分站多处安全漏洞(nginx解析+SQL注射等)小礼包 ](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-021064)
    - [kingsoft.com某x级域名nginx解析漏洞+爆路径 ](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-019253)
**Nginx  SetHandler application/x-httpd-php ` 然后再上传 shell.jpg 的木马, 这样 shell.jpg 就可解析为 php 文件.
**CVE-2017-15715 Apache HTTPD 换行解析漏洞**
其 2.4.0~2.4.29 版本中存在一个解析漏洞,在解析 PHP 时,1.php\x0A 将被按照 PHP 后缀进行解析,导致绕过一些服务器的安全策略.
原理:在解析 PHP 时,1.php\x0A 将被按照 PHP 后缀进行解析.
用 hex 功能在 1.php 后面添加一个 \x0A
访问 http://10.10.10.131:8080/1.php%0A ,成功解析
---
### 其他
在 windows 环境下,`xx.jpg[空格]` 或 `xx.jpg.` 这两类文件都是不允许存在的,若这样命名,windows 会默认除去空格或点,黑客可以通过抓包,在文件名后加一个空格或者点绕过黑名单.若上传成功,空格和点都会被 windows 自动消除,这样也可以 getshell.
**CGI 解析漏洞**