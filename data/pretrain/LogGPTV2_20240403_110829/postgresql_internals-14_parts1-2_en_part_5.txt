notcommitthesechangesyet. Itwillseeitsownchangesthough,asitisalways
allowed:
=> UPDATE accounts SET amount = amount - 200 WHERE id = 1;
=> SELECT * FROM accounts WHERE client = 'alice';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
1 | alice | 800.00
(1 row)
Inthesecondsession,westartanothertransactionthatwillalsorunattheRead
Committedlevel:
=> BEGIN;
=> SELECT * FROM accounts WHERE client = 'alice';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−
1 | alice | 1000.00
(1 row)
Predictably,thesecondtransactiondoesnotseeanyuncommittedchanges—dirty
readsareforbidden.
45
Chapter2. Isolation
Non-repeatablereads. Nowletthefirsttransactioncommitthechanges.Thenthe
secondtransactionwillrepeatthesamequery:
=> COMMIT;
=> SELECT * FROM accounts WHERE client = 'alice';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
1 | alice | 800.00
(1 row)
=> COMMIT;
Thequeryreceivesanupdatedversionofthedata—anditisexactlywhatisunder-
stoodbythenon-repeatablereadanomaly,whichisallowedattheReadCommitted
level.
Apracticalinsight: inatransaction,youmustnottakeanydecisionsbasedonthe
datareadbythepreviousoperator,aseverythingcanchangeinbetween. Hereis
anexamplewhosevariationsappearintheapplicationcodesooftenthatitcanbe
consideredaclassicanti-pattern:
IF (SELECT amount FROM accounts WHERE id = 1) >= 1000 THEN
UPDATE accounts SET amount = amount - 1000 WHERE id = 1;
END IF;
Duringthetimethatpassesbetweenthecheckandtheupdate,othertransactions
canfreelychangethestateoftheaccount,sosucha“check”isabsolutelyuseless.
Forbetterunderstanding,youcanimaginethatrandomoperatorsofothertransac-
tionsare“wedged”betweentheoperatorsofthecurrenttransaction.Forexample,
likethis:
IF (SELECT amount FROM accounts WHERE id = 1) >= 1000 THEN
UPDATE accounts SET amount = amount - 200 WHERE id = 1;
COMMIT;
UPDATE accounts SET amount = amount - 1000 WHERE id = 1;
END IF;
46
2.3. IsolationLevelsinPostgreSQL
If everything goes wrong as soon as the operators are rearranged,then the code
isincorrect. Donotdeludeyourselfthatyouwillnevergetintothistrouble: any-
thingthatcangowrongwillgowrong.Sucherrorsareveryhardtoreproduce,and
consequently,fixingthemisarealchallenge.
Howcanyoucorrectthiscode? Thereareseveraloptions:
• Replaceproceduralcodewithdeclarativeone.
For example, in this particular case it is easy to turn an  statement into a
constraint:
ALTER TABLE accounts
ADD CHECK amount >= 0;
Nowyoudonotneedanychecksinthecode: itisenoughtosimplyrunthe
command and handle the exception that will be raised if an integrity con-
straintviolationisattempted.
• Useasingleoperator.
Dataconsistencycanbecompromisedifatransactiongetscommittedwithin
the time gap between operators of another transaction, thus changing data
visibility.Ifthereisonlyoneoperator,therearenosuchgaps.
Postgrehasenoughcapabilitiestosolvecomplextaskswithasingle
statement. In particular, it offers common table expressions () that can
containoperatorslike,,,aswellasthe
operator that implements the following logic: insert the row if it does not
exist,otherwiseperformanupdate.
• Applyexplicitlocks.
The last resort is to manually set an exclusive lock on all the required rows
(  ) or even on the whole table ( ). This approach
always works, but it nullifies all the advantages of : some operations
thatcouldbeexecutedconcurrentlywillrunsequentially.
47
Chapter2. Isolation
Read skew. However, it is not all that simple. The Postgre implementation
allowsother,lessknownanomalies,whicharenotregulatedbythestandard.
SupposethefirsttransactionhasstartedamoneytransferbetweenBob’saccounts:
=> BEGIN;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 2;
Meanwhile,theothertransactionstartsloopingthroughallBob’saccountstocal-
culatetheirtotalbalance.Itbeginswiththefirstaccount(seeingitspreviousstate,
ofcourse):
=> BEGIN;
=> SELECT amount FROM accounts WHERE id = 2;
amount
−−−−−−−−
100.00
(1 row)
Atthismoment,thefirsttransactioncompletessuccessfully:
=> UPDATE accounts SET amount = amount + 100 WHERE id = 3;
=> COMMIT;
Thesecondtransactionreadsthestateofthesecondaccount(andseesthealready
updatedvalue):
=> SELECT amount FROM accounts WHERE id = 3;
amount
−−−−−−−−−
1000.00
(1 row)
=> COMMIT;
Asaresult,thesecondtransactiongets$,becauseithasreadincorrectdata.
Suchananomalyiscalledreadskew.
HowcanyouavoidthisanomalyattheReadCommittedlevel? Theanswerisobvi-
ous: useasingleoperator.Forexample,likethis:
SELECT sum(amount) FROM accounts WHERE client = 'bob';
48
2.3. IsolationLevelsinPostgreSQL
Ihavebeenstatingsofarthatdatavisibilitycanchangeonlybetweenoperators,
butisitreallyso? Whatifthequeryisrunningforalongtime? Canitseedifferent
partsofdataindifferentstatesinthiscase?
Let’s check it out. A convenient way to do it is to add a delay to an operator by
callingthepg_sleepfunction.Thenthefirstrowwillbereadatonce,butthesecond
rowwillhavetowaitfortwoseconds:
=> SELECT amount, pg_sleep(2) -- two seconds
FROM accounts WHERE client = 'bob';
Whilethisstatementisbeingexecuted,let’sstartanothertransactiontotransfer
themoneyback:
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100 WHERE id = 2;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 3;
=> COMMIT;
The result shows that the operator has seen all the data in the state that corre-
spondstothebeginningofitsexecution,whichiscertainlycorrect:
amount | pg_sleep
−−−−−−−−−+−−−−−−−−−−
0.00 |
1000.00 |
(2 rows)
But it is not all that simple either. If the query contains a function that is de-
clared , and this function executes another query, then the data seen by
thisnestedquerywillnotbeconsistentwiththeresultofthemainquery.
Let’scheckthebalanceinBob’saccountsusingthefollowingfunction:
=> CREATE FUNCTION get_amount(id integer) RETURNS numeric
AS $$
SELECT amount FROM accounts a WHERE a.id = get_amount.id;
$$ VOLATILE LANGUAGE sql;
=> SELECT get_amount(id), pg_sleep(2)
FROM accounts WHERE client = 'bob';
We will transfer the money between the accounts once again while our delayed
queryisbeingexecuted:
49
Chapter2. Isolation
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100 WHERE id = 2;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 3;
=> COMMIT;
Inthiscase,wearegoingtogetinconsistentdata—$hasbeenlost:
get_amount | pg_sleep
−−−−−−−−−−−−+−−−−−−−−−−
100.00 |
800.00 |
(2 rows)
I would like to emphasize that this effect is possible only at the Read Committed
isolationlevel,andonlyifthefunctionis. ThetroubleisthatPostgre
usesexactlythisisolationlevelandthisvolatilitycategorybydefault. Sowehave
toadmitthatthetrapissetinaverycunningway.
Readskewinsteadoflostupdates. Thereadskewanomalycanalsooccurwithina
singleoperatorduringanupdate—eventhoughinasomewhatunexpectedway.
Let’s see what happens if two transactions try to modify one and the same row.
Bobcurrentlyhasatotalof$,intwoaccounts:
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
2 | bob | 200.00
3 | bob | 800.00
(2 rows)
StartatransactionthatwillreduceBob’sbalance:
=> BEGIN;
=> UPDATE accounts SET amount = amount - 100 WHERE id = 3;
Atthesametime,theothertransactionwillbecalculatingtheinterestforallcus-
tomeraccountswiththetotalbalanceof$,ormore:
50
2.3. IsolationLevelsinPostgreSQL
=> UPDATE accounts SET amount = amount * 1.01
WHERE client IN (
SELECT client
FROM accounts
GROUP BY client
HAVING sum(amount) >= 1000
);
Theoperatorexecutionvirtuallyconsistsoftwostages.First,therowstobe
updatedareselectedbasedontheprovidedcondition. Sincethefirsttransaction
isnotcommittedyet,thesecondtransactioncannotseeitsresult,sotheselection
ofrowspickedforinterestaccrualisnotaffected.Thus,Bob’saccountssatisfythe
condition, and his balance must be increased by $ once the  operation
completes.
Atthesecondstage,theselectedrowsareupdatedonebyone. Thesecondtrans-
actionhastowaitbecausetherowwithid=3islocked: itisbeingupdatedbythe
firsttransaction.
Meanwhile,thefirsttransactioncommitsitschanges:
=> COMMIT;
=> SELECT * FROM accounts WHERE client = 'bob';
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−−
2 | bob | 202.0000
3 | bob | 707.0000
(2 rows)
Ontheonehand,thecommandmustnotseeanychangesmadebythefirst
transaction.Butontheotherhand,itmustnotloseanycommittedchanges.
Oncethelockisreleased,theoperatorre-readstherowtobeupdated(but
onlythisrow!).Asaresult,Bobgets$ofinterest,basedonthetotalof$.But
ifhehad$,hisaccountsshouldnothavebeenincludedintothequeryresults
inthefirstplace.
Thus,ourtransactionhasreturnedincorrectdata: differentrowshavebeenread
from different snapshots. Instead of a lost update, we observe the read skew
anomalyagain.
51
Chapter2. Isolation
Lostupdates. However,thetrickofre-readingthelockedrowwillnothelpagainst
lostupdatesifthedataismodifiedbydifferentoperators.
p. Hereisanexamplethatwehavealreadyseen. Theapplicationreadsandregisters
(outsideofthedatabase)thecurrentbalanceofAlice’saccount:
=> BEGIN;
=> SELECT amount FROM accounts WHERE id = 1;
amount
−−−−−−−−
800.00
(1 row)
Meanwhile,theothertransactiondoesthesame:
=> BEGIN;
=> SELECT amount FROM accounts WHERE id = 1;
amount
−−−−−−−−
800.00
(1 row)
Thefirsttransactionincreasesthepreviouslyregisteredvalueby$andcommits
thischange:
=> UPDATE accounts SET amount = 800.00 + 100 WHERE id = 1
RETURNING amount;
amount
−−−−−−−−
900.00
(1 row)
UPDATE 1
=> COMMIT;
Thesecondtransactiondoesthesame:
=> UPDATE accounts SET amount = 800.00 + 100 WHERE id = 1
RETURNING amount;
amount
−−−−−−−−
900.00
(1 row)
UPDATE 1
52
2.3. IsolationLevelsinPostgreSQL
=> COMMIT;
Unfortunately,Alice has lost $. The database system does not know that the
registeredvalueof$issomehowrelatedtoaccounts.amount,soitcannotpre-
ventthelostupdateanomaly. AttheRead Committedisolationlevel,thiscodeis
incorrect.
Repeatable Read
Nonon-repeatableandphantomreads. Asitsnamesuggests,theRepeatableRead1
isolation level must guarantee repeatable reading. Let’s check it and make sure
thatphantomreadscannotoccureither. Forthispurpose,wearegoingtostarta
transactionthatwillrevertBob’saccountstotheirpreviousstateandcreateanew
accountforCharlie:
=> BEGIN;
=> UPDATE accounts SET amount = 200.00 WHERE id = 2;
=> UPDATE accounts SET amount = 800.00 WHERE id = 3;
=> INSERT INTO accounts VALUES
(4, 'charlie', 100.00);
=> SELECT * FROM accounts ORDER BY id;
id | client | amount
−−−−+−−−−−−−−−+−−−−−−−−
1 | alice | 900.00
2 | bob | 200.00
3 | bob | 800.00
4 | charlie | 100.00
(4 rows)
Inthesecondsession,let’sstartanothertransaction,withtheRepeatableReadlevel
explicitlyspecifiedinthecommand(thelevelofthefirsttransactionisnot
important):
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT * FROM accounts ORDER BY id;
1 postgresql.org/docs/14/transaction-iso.html#XACT-REPEATABLE-READ
53
Chapter2. Isolation
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−−
1 | alice | 900.00
2 | bob | 202.0000
3 | bob | 707.0000
(3 rows)
Nowthefirsttransactioncommitsitschanges,andthesecondtransactionrepeats
thesamequery:
=> COMMIT;
=> SELECT * FROM accounts ORDER BY id;
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−−−