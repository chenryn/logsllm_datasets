# Fail-Secure Access Control
**Authors:**
- Petar Tsankov, Institute of Information Security, ETH Zurich
- Srdjan Marinovic, Institute of Information Security, ETH Zurich
- Mohammad Torabi Dashti, Institute of Information Security, ETH Zurich
- David A. Basin, Institute of Information Security, ETH Zurich

## Abstract
Decentralized and distributed access control systems are vulnerable to communication and component failures, which can lead to unexpected and insecure access decisions. Current analysis frameworks often overlook the impact of failure handling on decision-making, making it difficult to derive security guarantees for systems that may fail. To address this, we present (1) a model where the attacker can explicitly induce failures, (2) failure-handling idioms, and (3) a method and tool for verifying fail-secure requirements, which describe how access control systems should handle failures. We illustrate these contributions by analyzing the XACML 3 standard and other domains, revealing security flaws.

## Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]: Security and Protection; D.4.6 [Operating Systems]: Security and Protection—access controls

## General Terms
Security, Verification

## Keywords
Access Control, Failure Handling, Formal Analysis

## 1. Introduction
Modern access control systems are often decentralized and distributed, making them susceptible to communication and component failures. When such failures affect the availability of information needed for security decisions, access control systems must handle these failures, either implicitly or explicitly. This concern is pervasive across all access control domains. For example, firewalls must operate even when their log engines crash [26] or rule updates fail [28], web applications must service requests even if authentication services are unresponsive [27], delegation systems must evaluate requests even when they cannot update their revocation lists, and perimeter security systems must control access even when wireless channels to their central database are jammed.

In such settings, the access decisions of a Policy Decision Point (PDP) cannot be understood without considering the PDP’s failure handlers. The access control community has not rigorously studied the effects of failure handlers on access decisions. One reason for this is the common practice of interpreting failures as denies, which appears to conservatively approximate the PDP’s desired behavior. However, this simplistic approach can lead to surprising and unintended access decisions, resulting in insecure systems. For instance, the XACML 3 standard initially adopted this conservative approach but later dropped it due to its insecurity.

Given that failure handling influences the PDP’s access decisions, formal analysis frameworks for access control should account for the PDP’s failure handlers. Only then can security guarantees be derived for the PDP’s access decisions, both in the presence and absence of failures. Existing formal analysis frameworks are inadequate for this task because they lack (1) a system and attacker model tailored for failure scenarios, (2) idioms for specifying failure handlers, and (3) methods for verifying fail-secure requirements. In this paper, we use the BelLog analysis framework [32] to realize these three artifacts.

### Contributions
This is the first paper to systematically analyze the role of failure handling in access control systems. We investigate three types of security flaws: failure-oblivious policy composition, overly eager failure handling, and preemptive masking of failures. Examples of systems exhibiting these flaws are provided in subsequent sections, with a common thread being their apparent conformance to security common sense.

We also demonstrate how the PDP, including its failure handlers, can be modeled and analyzed using the BelLog policy analysis framework. Specifically:
1. We examine seven real-world access control systems to extract a system and an attacker model tailored for analyzing the effect of failures on the PDP’s decisions.
2. We derive common failure-handling idioms from these systems, which can be readily encoded in BelLog.
3. We show how to express fail-secure requirements and provide a tool to automatically verify them for a given PDP with respect to our attacker model. We argue that our verification method is effective by demonstrating how the three types of security flaws mentioned above can be discovered.

BelLog is chosen for technical convenience, as it is a four-valued extension of Datalog (the core of most decentralized access control languages), where one of the truth values, borrowed from Belnap’s logic, can denote failures. Our contributions are independent of the BelLog formalism, and any sufficiently expressive logic, such as first-order logic, can replace BelLog for our purpose.

### Related Work
Although fail-secure requirements have been discussed in the security literature [7, 33], there has been no rigorous, systematic treatment of fail-secure access control. Existing access control specification languages, such as [3,9,13,16,18,25], do not explicitly deal with failure handlers in their analysis. While failures are considered in [12], failure-handling mechanisms are not addressed. Static and dynamic policy analysis frameworks, such as [2,10,14,15,17,23], can potentially be adapted to reason about PDPs with failure handling, similar to BelLog. PBel’s analysis framework [10] supports policies with many-valued policy decisions and can, if delegations are excluded, express our failure-handling idioms. Dynamic analysis frameworks, such as [2, 14, 17], consider history-based access decisions, which fall outside the scope of our paper.

### Organization
- **Section 2:** Motivation and examples of PDP failure handlers and fail-secure requirements for access control systems.
- **Section 3:** Definition of our system and attacker model.
- **Section 4:** Summary of the BelLog specification language and its use to specify the examples from Section 2.
- **Section 5:** Analysis of the examples with respect to their fail-secure requirements.
- **Section 6:** Future research directions.

## 2. Motivation
To motivate our work, we use the XACML 3 standard to show that approximating failures with denials, although seemingly conservative, can lead to insecure systems. Through additional examples from the web application and grid computing domains, we illustrate the common PDP implementation pattern that treats failure handlers as a separate add-on to the normal policy engine, making it difficult to understand and analyze PDPs, leading to systems open to attacks.

### XACML 3
XACML 3 is an OASIS standard for specifying access control policies [36]. Policies are issued by principals and evaluated by a PDP. Policies issued by the PDP’s administrator are trusted; otherwise, they are non-trusted. The administrator specifies whether a non-trusted policy is authorized to decide a given request. Policies are grouped into policy sets, and their decisions are combined using composition operators, such as permit-overrides, which grants access if at least one policy grants access.

The PDP obtains all necessary information for policy evaluations from Policy Information Points (PIPs). Up to Revision 16, the XACML standard stated that the PDP should refrain from using policies that could not be evaluated or authorized due to communication and PIP failures. This decision follows the intuitive idea that all suspicious policies should be excluded from the PDP’s decision. Figure 1 shows a PDP, including its failure handler, in pseudo-code. Although this failure handler is inflexible, the committee did not anticipate other consequences on the PDP’s decisions apart from making them more conservative (less permissive).

However, when the proposed failure-handling behavior was considered with the deny-overrides composition operator, an attack was discovered [37]. If the PDP successfully evaluates a trusted policy that grants a request and fails to evaluate an authorized non-trusted policy that denies the request, the PDP will grant the request, even though it does not have all the necessary information. An attacker can launch denial-of-service attacks against PIPs to obtain a grant decision. In Section 5, we show how this attack can be found through automated analysis.

This example illustrates that a PDP’s failure handlers, regardless of their simplicity, can affect access decisions in surprising ways. The failure-oblivious composition of sub-policies is the root of the security flaw. To remedy this, the XACML 3 standard now overloads a designated policy decision (the indeterminate IN) for every policy that cannot be evaluated due to failures, making failure handling a concern of the policy writer.

### Authorizations in Web Apps
Web applications use access control frameworks to specify and manage user permissions. Examples include the Java Authentication and Authorization Service (JAAS), Apache Shiro, and Spring Security. Basic policies can be specified using declarative policy languages. A PDP module loads policy specifications and evaluates them within its authorization method. A recurring problem is that the PDP module fails to load a declarative specification due to syntactic errors or missing files. Administrators often maintain a default specification as a fallback option, typically conditioned on whether logging is enabled. This fallback approach imposes additional complexity and can introduce security flaws.

```java
isAuthorized(User u, Object o, List aclIDs) {
    try {
        for (id in aclIDs) {
            if (readAcl(id).grants(u, o)) return true;
        }
    } catch (ReadAclException e) {
        return def.grants(u, o) && logger.on();
    }
    return false;
}
```

Figure 2 shows a PDP module for a web application example. The figure illustrates which subjects in the depicted scenario have access according to FR2. Ann has access because her delegation is issued by the owner. Bob and Dave have access because they have non-revoked chains. Fred and Carol are denied access because they do not have non-revoked chains and are not the owner’s direct delegates.

This example highlights the importance of carefully designing and analyzing failure handlers to ensure the security of access control systems.