ExpressRoute [6], and Google Dedicated Interconnect [31]. (cid:140)e o(cid:130)-
site middlebox, while being secured, should also be able to process
packet at line rate to bene(cid:128)t from such dedicated links.
2.2 SGX Background
SGX introduces a trusted execution environment called enclave to
shield code and data with on-chip security engines. It stands out
for the capability to run generic code at processor speed, with prac-
tically strong protection. Despite the bene(cid:128)ts, it has several limita-
tions. First, common system services cannot be directly used inside
the enclave. Access to them requires expensive context switching
to exit the enclave, typically via a secure API called OCALL. Second,
memory access in the enclave incurs performance overhead. (cid:140)e
protected memory region used by the enclave is called Enclave Page
2.4 Adversary Model
In line with SGX’s security guarantee, we consider a powerful ad-
versary. We assume that the adversary can gain full control over
all user programs, OS and hypervisor, as well as all hardware com-
ponents in the machine, with the exception of processor package
and memory bus. It can obtain a complete memory trace for any
process, except those running in the enclave. It is also capable of
observing network communications, modifying and dropping pack-
ets at will. In particular, the adversary can log all network tra(cid:129)c
and conduct sophisticated inference to mine useful information.
Our goal here is to thwart practical tra(cid:129)c analysis a(cid:138)acks targeting
Untrusted HostEnclaveState managementetapGatewayetap-cliTrafficPacket I/OStatefulprocessingMiddleboxLightBoxmoduleLookup tableFlow stateNetwork packetsEncrypteddata streamFigure 3: Illustration of secure tunneling options.
the original packets that are intended for processing at the o(cid:130)-site
middleboxes.
Like many SGX applications [2, 37, 59, 63, 72], we consider side-
channel a(cid:138)acks [32, 60, 79, 94, 98] out of scope. (cid:140)ey can be orthogo-
nally handled by corresponding countermeasures [13, 17, 34, 74, 79].
(cid:140)at said, we fully recognize the security bene(cid:128)ts and limitations
of SGX, and understand that they are still under rapid iteration [93].
It is yet by far, arguably, the most practical solution for a wide class
of complicated tasks including secure middleboxes.
We do not deal with denial-of-service a(cid:138)acks. (cid:140)e middlebox
code is assumed to be correct. Also, we assume that the enterprise
gateway is always trusted and it does not have to be SGX-enabled.
3 THE ETAP DEVICE
(cid:140)e ultimate goal of etap is to enable in-enclave access to the
packets intended for middlebox processing, as if they were locally
accessed from the trusted enterprise networks. Towards this goal, we
set forth the following design requirements.
• Full-stack protection: when the packets are transmi(cid:138)ed in
the untrusted networks, and when they traverse through
the untrusted platform of the service provider, none of
their metadata as de(cid:128)ned in Section 1 is directly leaked.
• Line-rate packet I/O: etaps should deliver packets at a rate
that can catch up with a physical network interface card
(NIC), without capping the middlebox performance. A
pragmatic performance target to shoot is 10Gbps.
• High usability: to use etap, we need to impose as few
changes as possible to the secured middlebox. (cid:140)is implies
that if certain network frameworks are used by the middle-
box, they should be seamlessly usable inside the enclave
too.
3.1 Overview
To achieve full-stack protection, an intuitive idea would be to se-
curely tunnel the packets between the gateway and the enclave: the
original packets are encapsulated and encrypted as the payloads of
new packets, which contain non-sensitive header information (i.e.,
the IP addresses of the gateway and the middlebox server).
(cid:140)e naive way of encapsulating and encrypting packets individ-
ually, as used in L2 tunneling solution like IPSec, does not su(cid:129)ce
for our purpose — it does not protect information pertaining to
individual packets, including size, timestamp, and as a result, packet
count. Padding each packet to the maximum size may hide exact
packet size, but it incurs unnecessary bandwidth in(cid:131)ation, and still
cannot hide the count and timestamps.
Figure 4: (cid:135)e architecture of etap.
We thus consider encoding the packets as a continuous stream,
which is treated as application payloads and transmi(cid:138)ed via a se-
cure channel (e.g., TLS). Such streaming design obfuscates packet
boundaries, thus hiding the metadata we want to protect, as illus-
trated in Fig. 3. From a system perspective, the key to this approach
1 that can be used as an ordinary NIC to access
is the VIF tun/tap
the tunneled packets, as widely adopted by popular products like
OpenVPN. While there are many userspace TLS suites and some of
them even have handy SGX ports [97, 100? ], the tun/tap device
itself is canonically driven by the untrusted OS kernel. (cid:140)at is,
even if we can terminate the secure channel inside the enclave, the
packets are still exposed when accessed via the untrusted tun/tap
interface.
(cid:140)is inspires us to develop etap (the “enclave tap”), which man-
ages packets inside the enclave and enables direct access to them
without exiting. (cid:140)e naming comes from the convention that tap is
for L2 packets (more precisely, frames) while tun is for L3 packets,
and we aim to protect the L2 header as well. From the middlebox’s
point of view, accessing packets in the enclave via etap is identical
to accessing them via a real NIC in the local enterprise networks.
3.2 Architecture
(cid:140)e major components of etap are depicted in Fig. 4. Every etap
is peered with an etap-cli run by the gateway. (cid:140)e two share the
same processing logic and since etap-cli operates as a normal
program in the trusted gateway, we ignore a detailed description
for it. A persistent connection will be established between the two
for secure tra(cid:129)c tunneling. (cid:140)e etap peers will maintain a minimal
tra(cid:129)c rate by injecting heartbeat packets to the tunnel.
At the heart of etap are two rings for queuing packet data: one
for transmi(cid:138)ing (TX) and the other for receiving (RX). A packet is
described by a pkt info structure, which stores in order the packet
size, timestamp, and a bu(cid:130)er for raw packet data. Two additional
data structures are used in preparing and parsing packets: a record
bu(cid:130)er holds decrypted data and some auxiliary (cid:128)elds inside the
enclave; a batch bu(cid:130)er stores multiple records outside the enclave.
(cid:140)e etap device is powered by two drivers. (cid:140)e core driver
coordinates networking, encoding and cryptographic operations;
it also maintains a trusted clock to overcome the lack of high-
resolution timing inside the enclave. (cid:140)e poll driver is used by
middleboxes to access packets. (cid:140)e two drivers source and sink the
two rings accordingly. We discuss the support of multiple RX rings
for multi-threaded middleboxes in Appendix A.
1h(cid:138)ps://www.kernel.org/doc/Documentation/networking/tuntap.txt
on the fly75642999997   5    6    4   2 9Tunneling headersOriginal headersnPacket with size nEncrypted dataLegendNo protectionL2 per-packetencryptionwith padding Our stream-basedtunneling design99EnclaveCore	driverPoll	driverRX	ringTX	ringrecord	bufferrecord	bufferbatch bufferbatch bufferetap-clientOCALLetapclockAlgorithm 1: etap core driver’s RX ring loop
1 ocall fill rx bat buf();
2 check memory safety(rx bat buf);
3 foreach enc rec in rx bat buf do
rec buf = decrypt(enc rec);
4
finish pending partial pkt(rec buf);
5
while has full pkt(rec buf) do
6
7
8
9
pkt info = parse next(rec buf);
push to rx etap ring(pkt info);
refresh pending partial pkt(rec buf)
Remark. (cid:140)e design of etap is agnostic to how the real net-
working outside the enclave is performed. For example, it can use
standard kernel networking stack (this is currently used by us).
For be(cid:138)er e(cid:129)ciency, it can also use faster userspace networking
frameworks based on DPDK [42] or netmap [69], as shown in Fig.6.
3.3 Drivers
Core driver. Upon initialization, the core driver takes care of nec-
essary handshakes (via OCALL) for establishing the secure channel
and stores the session keys inside the enclave. (cid:140)e packets intended
for processing are pushed into the established secure connection in
a back-to-back manner, forming a data stream at the application
layer. At the transportation layer they are e(cid:130)ectively organized
into contiguous records (e.g., TLS records) of (cid:128)xed size (e.g., 16KB
for TLS), which then at the network layer are broken down into
packets of maximum size. Each original packet is transmi(cid:138)ed in the
exact format of pkt info, so the receiver will be able to recover
from the continuous stream the original packet by (cid:128)rst extracting
its length, the timestamp, and then the raw packet data. (cid:140)e core
driver is run by its own thread. (cid:140)e pseudo code in Alg. 1 outlines
the the main RX loop. (cid:140)e TX side is similar and omi(cid:138)ed here.
Trusted timing with etap clock. Middleboxes o(cid:137)en demand
reliable timing for packet timestamping, event scheduling, and
performance monitoring. (cid:140)e timer should at least cope with the
packet processing rate, i.e., at tens of microseconds. (cid:140)e SGX plat-
form provides trusted relative time source [12], but its resolution is
too low (at seconds) for our use case. Alternative approaches resort
to system time provided by OS [66] and on-NIC PTP clock [86].
Yet, they both access time from untrusted sources, thus subject
to adversarial manipulation. Another system [101] fetches time
from a remote trusted website, and its resolution (at hundreds of
milliseconds) is still unsatisfactory for middlebox systems.
We design a reliable clock by taking etap’s architectural advan-
tage. In particular, we treat etap-cli as a trusted time source to
a(cid:138)ach timestamps to the forwarded packets. (cid:140)e core driver can
then maintain a clock (with proper o(cid:130)set) by updating it with the
timetamp of each received packet. (cid:140)e resolution of the clock is
determined by the packet rate, which in turn bounds the packet
processing rate of the middlebox itself. (cid:140)erefore, the clock should
be su(cid:129)cient for most timing tasks found in middleboxes. Further-
more, we collate the clock periodically with the round-trip delay
estimated by the moderately low-frequency heartbeat packets sent
from etap-cli, in a way similar to the NTP protocol [58]. We
Figure 5: Performance of etap by applying three di(cid:130)erent
synchronization mechanisms, without other optimizations
suggested in Section 3.5.
stress that it is still an open problem to provide trusted and high-
resolution time for SGX applications [12, 13]. (cid:140)e proposed etap
clock (cid:128)ts well for middlebox processing in our targeted high-speed
networks.
Poll driver. (cid:140)e poll driver provides access to etap for upper
layers. It supplies two basic operations, read pkt to pop packets
from RX ring, and write pkt to push packets to TX ring. Unlike
the core driver, the poll driver is run by the middlebox thread. It
has two operation modes. In the default blocking mode, a packet is
guaranteed to be read from or write to etap: in case the RX (resp.
TX) ring is empty (resp. full), the poll driver will spin until the ring
is ready. In the non-blocking mode, the driver returns immediately
if the rings are not ready. (cid:140)is will allow the middlebox more CPU
time for other tasks, e.g., processing cached events.
3.4 Security Analysis
(cid:140)e protection of application payloads in the tra(cid:129)c is obvious.
We focus on the analysis of metadata. Also we discuss passive
adversary only, because the active ones who a(cid:138)empt to modify any
data will be detected by the employed authenticated encryption.
Metadata protection. Imagine an adversary located at the ingress
point of the service provider’s network, or one that has gained full
privilege in the middlebox server. She can sni(cid:130) the entire tunnel-
ing tra(cid:129)c trace between the etap peers. As illustrated in Fig. 3,
however, the adversary is not able to infer the packet boundaries
from the encrypted stream embodied as the encrypted payloads
of observable packets, which have the maximum size most of the
time. (cid:140)erefore, she cannot learn the low-level headers, size and
timestamps of the encapsulated individual packets in transmission.
(cid:140)is also implies her inability to obtain the exact packet count,
though this number is always bounded in a given period of time
by the maximum and minimum possible packet size. Besides, the
timestamp a(cid:138)ached to the packets delivered by etap comes from
the trusted clock, so it is invisible to the adversary.
As a result, a wide range of tra(cid:129)c analyses [16, 19, 68, 91, 96]
that directly leverage the metadata will be thwarted, as no such
information is available to the adversary.
Beyond metadata. Despite the aforementioned protection over
metadata, we do not claim that our design defeats all possible infer-
ence a(cid:138)acks. For example, from the bursts in tra(cid:129)c the adversary
may potentially learn the launching and termination of certain
applications. It is also shown that some delicate analysis can glean
meaningful information by looking at the total tra(cid:129)c volume and
0.080.150.340.651.184.55.77.27.88.40246810641282565121024Throughput	(Gbps)Packet	size	(Byte)locktrylocklock-freebursts [23]. A generic countermeasure would be to obfuscate ex-
ploitable tra(cid:129)c pa(cid:138)erns by injecting calibrated noise [92]. We note
that in-depth tra(cid:129)c analysis and mitigation is still a highly active
research area [15, 38, 80]. In the context of middlebox outsourcing
where an adversary may gain more visibility into the aggregated
network tra(cid:129)c, our design can signi(cid:128)cantly raise the bar for realistic
tra(cid:129)c analysis a(cid:138)acks.
3.5 Performance Boosting
While ensuring strong protection, etap is hardly useful if it cannot
deliver packets at a practical rate. We therefore synergize several
techniques to boost its performance.
Lock-free ring. (cid:140)e packet rings need to be synchronized be-
tween the two drivers of etap. We compare the performance of
three approaches: a basic mutex (sgx thread mutex lock), a spin-
lock without context switching (sgx thread mutex trylock), and
a classic single-producer-single-consumer lockless algorithm [50].
Our evaluation shows that the trusted synchronization primitives
of SGX are too expensive for the use of etap (see Fig. 5), so we base
further optimizations on the lock-free design.
Cache-friendly ring access.
In the lock-free design, frequent
updates on control variables will trigger a high cache miss rate, the
penalty of which is ampli(cid:128)ed in the enclave. We adapt the cache-
line protection technique [52] to our design to relieve this issue. It
works by adding a set of new control variables local to the threads
to reduce the contention on shared variables. Our evaluations show
that this optimization results in a performance gain up to 31%.
Disciplined record batching. Recall that the core driver uses
bat buf to bu(cid:130)er the records. (cid:140)e bu(cid:130)er size has to be properly set
for best performance. If too small, the overhead of OCALL cannot
be well amortized. If too large, the core driver needs longer time
to perform I/O: this would waste CPU time not only for the core
driver that waits for I/O outside the enclave, but also for a fast
poll driver that can easily drain or (cid:128)ll the ring. (cid:140)rough extensive
experiments, we (cid:128)nd a batch size around 10 to be a sweet spot that
can deliver practically the best performance for di(cid:130)erent packet
sizes in our se(cid:138)ings (see Fig. 10).
3.6 Usability
A main thrust of etap is to provide convenient networking func-
tions to in-enclave middleboxes, preferably without changing their
legacy interfaces. On top of etap, we can port existing frameworks
and build new ones. Here, we report our porting e(cid:130)orts of three of
them, which greatly improve the usability of etap.