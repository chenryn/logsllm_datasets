    cp Kunlun_M/settings.py.bak Kunlun_M/settings.py
    # 初始化数据库
    python kunlun.py init initialize
#### 2.2.3 扫描测试
使用console模式，相关命令如下：
    # 进入console模式
    python kunlun.py console
    ## 如何扫描源代码
    scan   #进入扫描模式
    set target /tmp/source_code/DVWA-master/ #设置目标
    run
    ## 如何查看扫描结果
    showt  #查看扫描任务列表
    load 1 #加载扫描任务id
    show vuls #查看漏洞结果
扫描完成结果如下图所示：
#### 2.2.4 扫描结果分析
汇总结果如下（ **误报率及漏报率仅根据官方最新版本默认配置，实际测试结果进行主观大致预估** ）：
#### 2.2.5 调研结果
本次对KunLun-M的调研结果如下：
**调研参数** | **调研结果** | **总结**  
---|---|---  
漏洞检测/扫描的原理 | 正则匹配+深度优化的AST(语义分析，仅PHP) | **优点：** 1\. 该项目开源并持续维护中；2.
比Cobra更优的AST语义分析；3. 代码逻辑及思路较清晰，便于理解及后续拓展。  
是否支持持续集成 | 未提供web接口，但命令行模式也便于持续集成 | **缺点：** 1\.
支持语言较少，目前主要是PHP和Javascript，不支持Java；2. 误报率/漏报率较高。  
扫描速度 | 速度一般 |  
数据输入方式 | 命令行模式通过`-t`指定代码工程；console模式通过`set target`指定代码工程； |  
部署方式 | python脚本直接运行 |  
支持语言 | 目前主要支持 **php、javascript** 的语义分析，以及 **chrome ext, solidity** 的基础扫描 |  
漏洞覆盖 | 支持十多种漏洞类型（SQL注入、XSS、命令注入、代码注入、反序列化等等） |  
#### 2.2.6 参考资料
  * [Kunlun-M 官方Github](https://github.com/LoRexxar/Kunlun-M)；
  * [构造一个CodeDB来探索全新的白盒静态扫描方案](https://lorexxar.cn/2020/10/30/whitebox-2/)；
  * [从0开始聊聊自动化静态代码审计工具](https://lorexxar.cn/2020/09/21/whiteboxaudit/#%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1)；
### 2.3 Hades
#### 2.3.1 介绍
以下内容引用[Hades的官方Github](https://github.com/zsdlove/Hades)：
Hades静态代码脆弱性检测系统是默安开源的针对Java源码的白盒审计系统，该系统使用 **smali字节码的虚拟解释执行引擎** 对Java源码进行分析。
Hades系统整体的执行流程示意图如下：
**smali字节码** ：程序的编译一般经过六个流程，即词法分析、语法分析、语义分析、中间代码生成、代码优化、目标代码生成。
  * 词法分析：主要是对输入的源码文件中的字符从左到右逐个进行分析，输出与源代码等价的token流；
  * 语法分析：主要是基于输入的token流，根据语言的语法规则，做一些上下文无关的语法检查，语法分析结束之后，生成AST语法树；
  * 语义分析：主要是将AST语法树作为输入，并基于AST语法树做一些上下文相关的类型检查；
  * 生成中间代码：语义分析结束后，生成中间代码，而此时的中间代码，是一种易于转为目标代码的一种中间表示形式；
  * 代码优化：针对中间代码进行进一步的优化处理，合并其中的一些冗余代码，生成等价的新的中间表示形式，最后生成目标代码。
相较java字节码来说，smali字节码更加的简单，因为smali字节码是一种基于寄存器的指令系统，它的指令是二地址和三地址混合的，指令中指明了操作数的地址。而JVM是基于栈的虚拟机，JVM将本地变量放到一个本地变量列表中，在进行指令解释的时候，将变量push到操作数栈中，由操作码对应的解释函数来进行解释执行。所以，java字节码操作无疑会比smali字节码更复杂一些，复杂主要体现在后续的堆栈设计以及代码解释执行。
想更深入的原理及实现思路可参考官方Github，作者编写了很详细的文档介绍。
#### 2.3.2 安装部署
    docker build -t hades .
    docker run -p 8088:8088 hades
    # 访问
    http://127.0.0.1:8088/geekscanner
#### 2.3.3 扫描测试
目前项目bug较多，本地搭建报错，暂未进行详细分析。
#### 2.3.4 扫描结果分析
目前项目bug较多，本地搭建报错，暂未进行详细分析。
根据官方文档的测试结果，对Java的白盒分析效果还可以。
#### 2.3.5 调研结果
本次对Hades的调研结果如下：
**调研参数** | **调研结果** | **总结**  
---|---|---  
漏洞检测/扫描的原理 | 基于smail字节码的虚拟解释执行引擎 | **优点：** 1\. 该项目思路及方案很好，值得深入研究。  
是否支持持续集成 | 有web页面，便于持续集成 | **缺点：** 1\. 项目部署报错，无法本地搭建测试；2. 目前仅支持Java语言；  
扫描速度 | 速度一般 |  
数据输入方式 | 页面手动上传，支持上传.zip, .jar, .apk |  
部署方式 | docker |  
支持语言 | 目前支持Java，Android部分未公开 |  
漏洞覆盖 | 支持多种漏洞类型 |  
#### 2.3.6 参考资料
  * [Hades官方GitHub](https://github.com/zsdlove/Hades)；
  * [PPT：基于虚拟执行技术的静态代码审计系统内幕揭秘](https://github.com/zsdlove/Hades/blob/master/%E5%9F%BA%E4%BA%8E%E8%99%9A%E6%8B%9F%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF%E7%9A%84%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%B3%BB%E7%BB%9F%E5%86%85%E5%B9%95%E6%8F%AD%E7%A7%98.pdf)；
  * [DevSecOps建设之白盒篇](https://www.freebuf.com/articles/es/259762.html);
### 2.4 Fortify
#### 2.4.1 介绍
Fortify是一款商业级的静态应用程序安全性测试 (SAST) （源码扫描）工具。其工作示意图如下所示：
其大致扫描原理是：扫描分析分为两个阶段：Translation和Analysis。
  * Translation: 源码词法分析/语义分析，把各种扫描语言源码转为一种统一的中间语言代码（中间表现形式）。
  * Analysis: 再对中间表现形式进行安全性分析。
#### 2.4.2 安装部署
**安装** ：.exe安装程序双击运行，安装过程中选择license ，安装完成后，最后一个关于软件更新的选项不进行勾选。安装完成后将`fortify-common-20.1.1.0007.jar`包复制到Fortify安装目录的`\Core\lib`目录下进行破解，然后需要把 `rules`
目录的规则文件拷贝到安装目录下的 `Core\config\rules` 的路径下（该路径下保存的是Fortify的默认规则库）。
**运行** ：点击安装目录`\bin`目录下的`auditworkbench.cmd`运行Fortify。运行页面如下所示：
#### 2.4.3 扫描测试
点击Advanced Scan -> 选择待扫描的项目 -> 做些简单配置（参见下图） -> 点击“scan”开始扫描：
扫描完成截图如下所示：
#### 2.4.4 扫描结果分析
汇总结果如下（ **误报率及漏报率仅根据官方最新版本默认配置，实际测试结果进行主观大致预估** ）：
Benchmark计分器自动分析Fortify结果如下图所示：
**上图表中的关键字** ：
  * TP: 真实漏洞中，代码分析工具正确扫描出来的真实漏洞数量；
  * FN: 真实漏洞中，代码分析工具误报的漏洞数量；
  * TN: 假的漏洞中，代码分析工具正确未扫描出来的漏洞数量；
  * FP: 假的漏洞中，代码分析工具误报成真漏洞的数量；
  * TPR = TP / ( TP + FN ): 代码分析工具正确检出真实漏洞的检出率；
  * FPR = FP / ( FP + TN ): 代码分析工具将假漏洞报告为真实漏洞的误报率；
  * Score = TPR - FPR: 随机猜测与标准线的差距；
#### 2.4.5 调研结果
本次对Fortify的调研结果如下：
**调研参数** | **调研结果** | **总结**  
---|---|---  
漏洞检测/扫描的原理 | 词法分析/语义分析，把各种扫描语言源码转为一种统一的中间表现形式，再对该中间表现形式进行安全性分析 | **优点** ：1.
误报率/漏报率表现良好，检出漏洞类型丰富；  
是否支持持续集成 | windows版本不好持续集成，Linux版本可以 | **缺点** ：1. 不支持第三方不安全组件引用的检测；2.
持续集成需要定制开发；  
扫描速度 | 速度良好 |  
数据输入方式 | windows版本新建任务时选择源码目录；Linux通过命令行指定源码目录； |  
部署方式 | windows/Linux |  
支持语言 | 支持27+种开发语言（参见： |  
漏洞覆盖 | 支持多种漏洞类型（SQL注入、XSS、命令注入、代码注入、反序列化等等）  
#### 2.4.6 参考资料
  * [C/C++源码扫描系列- Fortify 篇](https://xz.aliyun.com/t/9276)；
  * [代码安全审计（二）Fortify介绍及使用教程](https://www.jianshu.com/p/af331efb84a9)；
### 2.5 CheckMarx
#### 2.5.1 介绍
以下内容引用自Checkmarx官方文档：
Checkmarx是以色列的一家科技软件公司开发的产品。Checkmarx
CxSAST是其独特的源码分析解决方案，它提供了用于识别、跟踪和修复源代码中的技术和逻辑缺陷（例如安全漏洞，合规性问题和业务逻辑问题）的工具。无需构建或编译源码，CxSAST可以构建代码元素和流程的逻辑图，随后CxSAST可以查询这个内部代码的示意图。CxSAST带有一个广泛的列表，其中包含数百个针对每种编程语言的已知安全漏洞的预配置查询。使用
CxSAST Auditor 工具，也可以为安全、合规、业务逻辑问题等写规则配置附加查询。
CxSAST可以集成到软件开发周期的多个流程中。例如，使用软件构建自动化工具（Apache Ant和Maven），
软件开发版本控制系统（GIT），问题跟踪和项目管理软件（JIRA），存储库托管服务（GitHub），应用程序漏洞管理平台（ThreadFix），持续集成平台（Bamboo和Jenkins），持续代码质量检查平台（SonarQube）和源代码管理工具（TFS）等。
CxSAST部署在服务器上，可以通过web页面或IDE插件进行访问（Eclipse，Visual
Studio和IntelliJ）。CxSAST系统架构支持集中式架构（所有服务器组件都安全在同一台主机上）、分布式架构（服务器组件都安装在不同的专用主机上）、高可用架构（多个管理器可用于控制系统管理，确保在一个管理器发生故障时，系统将继续全面运行）。
CxSAST 包含组件如下：
**CxSAST** **服务器组件** ：
  * **CxEngine** ：执行代码扫描；
  * **数据库** ：保存扫描结果和系统设置；
  * **CxManager** ：管理系统，执行所有系统功能和集成系统组件；
  * **CxSAST Web客户端** ：控制 CxManager 操作的主界面（例如开始扫描、查看结果和生成报告）。
#### 2.5.2 安装部署
之前在win10系统进行安装部署，安装过程花了很长时间，安装完成后，一直无法登录成功，后面抓包看了下，登录会返回500错误。后面了解了下，可能是因为操作系统版本问题（但是官方文档说是支持win10系统安装的），随后装了个Windows
Server 2012的虚拟机，安装过程一遍成功，且可正常使用。