### Performance Analysis

#### Elapsed Time, System Time, and Wait Time
- **Ext2Ver(all)**: We observed a 108% increase in wait time compared to Ext2. The elapsed and system times were similar, making it difficult to quantify the exact cause of the increased wait time.
- **Ext2Ver(md)**: There was a 7% increase in elapsed time and a 41% increase in system time over Ext2. The additional system time overhead is attributed to the extra hash table lookups by SVL for remapping read and write requests. This configuration required an additional 496KB of disk space to store versions.
- **Ext2Ver(all)**: Similarly, we recorded a 7% increase in elapsed time and a 39% increase in system time over Ext2. The additional space consumed for versioning all data was 15MB, resulting in a 95% overhead. This benchmark indicates that versioning all data inside the disk is not very useful, especially for program installers.

### Kernel Compilation Benchmark

To simulate a CPU-intensive user workload, we compiled the Linux kernel source code using a vanilla Linux 2.6.15 kernel. We analyzed the overheads of Ext2TSD on TSD and Ext2TSD on SVSDS with versioning of all blocks and selective versioning of metadata blocks, compared to regular Ext2. The untar, make oldconfig, and make operations were combined, and a 30-second versioning interval was used, resulting in 78 versions being created during the benchmark. The results are summarized in Figure 8.

**Figure 8: Kernel Compile Results for SVSDS**

| File System | Elapsed Time (s) | System Time (s) | Wait Time (s) | Space Overhead (MB) |
|-------------|------------------|-----------------|---------------|---------------------|
| Ext2        | 2467.2           | 162             | 72.1          | 0                   |
| Ext2TSD     | 2460.8           | 167             | 54.7          | 0                   |
| Ext2Ver(md) | 2470.6           | 169             | 68.0          | 51                  |
| Ext2Ver(all)| 2486.3           | 177             | 71.6          | 181                 |

**Performance Overhead over Ext2:**
- **Ext2TSD**: Elapsed time was the same, system time overhead was 4% lower, and wait time was 24% lower than Ext2. The reduction in wait time is due to Ext2TSD not considering future file growth while allocating new blocks.
- **Ext2Ver(md)**: Elapsed time was the same, system time overhead was 5%, and wait time was 6% lower than Ext2. The increase in wait time compared to Ext2TSD is due to versioning metadata blocks, which affects the locality of stored files. The space overhead for versioning metadata blocks was 51 MB.
- **Ext2Ver(all)**: Elapsed time was indistinguishable, but system time overhead was 10% higher than Ext2. The increase in system time is due to additional hash table lookups required for storing mapping information in the V-TABLE. The space overhead for versioning all blocks was 181 MB.

### Related Work

SVSDS builds upon ideas from previous works:
- **File Versioning**: Several file systems [6, 10, 12, 15, 19] have explored versioning at the granularity of files to help users recover from mistakes. SVSDS's main advantage is its decoupling from the client operating system, providing protection even in the event of an intrusion or OS compromise.
- **Disk Address Space Virtualization**: Systems like Logical Disk [3] have implemented virtualization of disk address space, separating file-system implementation from disk characteristics. SVSDS's Storage Virtualization Layer is analogous to this approach.
- **Operation-Based Constraints**: SVSDS uses a scaled-down version of access control mechanisms to enforce constraints.

**Comparison with Other Disk-Level Data Protection Systems:**
- **S4 [20]**: S4 is an object-based disk that audits all requests and combines log-structuring with journal-based metadata versioning. It protects data by preventing tampering or deletion. SVSDS, a block-based disk, transparently versions blocks inside the disk. S4 does not provide flexibility for users to select files for versioning, whereas SVSDS allows this. S4 also lacks mechanisms to prevent modifications during intrusions, relying solely on versioned data for recovery.
- **TRAP [23]**: TRAP is a disk array architecture providing data recovery in three modes: periodic snapshots (TRAP-1), timely recovery to any point-in-time (TRAP-3), and parity logging (TRAP-4). TRAP cannot provide file-level data protection (TRAP-2) as it lacks semantic information about stored data. SVSDS implements file-level versioning and can set the time between creating versions to zero, but it cannot implement TRAP-4 due to running on a local disk.
- **Peabody [7]**: Peabody is a network block storage device that virtualizes disk space and reduces space utilization by coalescing blocks. It versions data using write and transaction logs. However, it cannot selectively version blocks inside the disk.

### Conclusions

Protecting data against attackers with OS root privileges is a challenging problem. While many security mechanisms exist, few are effective when the OS is compromised. Given the difficulty of eliminating all vulnerabilities, it is essential to explore recovery mechanisms. SVSDS provides a disk-level recovery mechanism with flexible policies and simple constraints to protect key executables and log files. Our prototype implementation shows negligible performance overheads for normal user workloads.

**Future Work:**
- Support for reverting specific files or directories to older versions.
- Development of a storage-based intrusion detection system within SVSDS.
- Exploration of more operation-based constraints at the disk level.

### Acknowledgments

We thank the anonymous reviewers, Sean Callanan, Avishay Traeger, Radu Sion, Rob Johnson, Radu Grosu, Alexander Mohr, and members of our research group (File Systems and Storage Lab at Stony Brook) for their valuable feedback and suggestions. This work was partially supported by NSF CAREER EIA-0133589 and NSF CCR-0310493 awards.

### References

[References listed as in the original text]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.