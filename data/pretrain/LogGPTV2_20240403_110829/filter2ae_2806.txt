# 对利用CVE-2017-8750漏洞的恶意RTF文档分析

## 译文声明
本文为翻译文章，原文链接如下。译文仅供参考，具体内容及含义请以原文为准。

## 引言
2018年4月下旬，NCC集团的研究人员发现了一些利用CVE-2017-8750漏洞进行传播的恶意文档。这些文档旨在受害者的计算机上安装远程访问木马（RAT）。本文将深入解析这些文档及其负载。

### 恶意文档和恶意软件安装流程
下图展示了恶意文档和恶意软件安装的工作流程。

## CVE-2017-8750 RTF 文件
如前所述，RAT 的感染载体是通过利用 CVE-2017-8750 漏洞的 RTF 文件（见图2）。
该 SCT 文件包含一段经过混淆的 JavaScript 代码，其中包括一个非常大的加密数据块以及随后的一个解密例程。图4中显示了去掉大字符数组后的 JavaScript 代码。

## WLL 文件详解
JavaScript 代码的目的是解密并将 `wordHelpAss.wll` 文件写入 Word 的启动目录。实际上，WLL 文件只是一个普通的 DLL 文件。虽然这项技术并不新颖，但并不常见。值得注意的是，负载不会立即执行，而是在下次打开 Word 时才运行。这种延迟执行方式可以绕过自动分析系统，因为通常在分析过程中不会重新启动 Word。最终，当 WLL 文件被执行时，它会安装 RAT 负载。

## Sisfader RAT
由于 WLL 文件安装的负载不是普通的 RAT，其他行业合作伙伴已将其命名为 Sisfader RAT。我们沿用此名称以保持一致性。Sisfader 维护自身作为系统服务的持久性，并具有多个组件，具体如下表所示。

## Dropper 分析
Dropper 是一个 x86 PE 文件，负责在受害者计算机上安装恶意软件。恶意软件组件位于 dropper 的资源部分，如图所示。

## 执行流程
Dropper 从反模拟开始，通过反复调用 `PostMessageA()` 函数，参数为 `0x5ACE8D0A`。主线程则调用 `GetMessageA()` 并等待响应。如果消息参数不是 `0x5ACE8D0A`，程序将退出且不会安装恶意软件。

下一步是解密配置信息，这是位于 `.data` 部分的 354 字节字符数组。所使用的解密算法是使用 16 字节滚动密钥的简单 XOR 循环。之后，恶意软件检查其权限。若权限不足，它将尝试提升权限（后文将详细介绍该方法）。安装前的最后一步是生成用于 C2 服务器识别主机的唯一 ID（UUID）。

确定系统架构后，恶意软件将两个组件写入注册表。写入的键值取决于是否成功提升了权限。若以管理员身份运行，它将写入 `HKCR`；否则，将写入 `HKCUSystemCurrentControlSetControl`。

接下来是编写加载程序 DLL，使恶意软件保持持久性。AUTO 资源被加载并复制到分配的内存 `GlobalAlloc` 中。然后调用查找标记 `0xFE19C04F` 的函数。找到标记后，写入先前生成的主机 UUID。

下一步是将自动 DLL 写入磁盘。根据检查结果，可能会选择以下三个位置之一：
1. `C:\Windows\System32\iscsiexe.dll` - 该文件实际被覆盖。有效负载中有代码控制文件，防止系统尝试写回原始文件。
2. `C:\Windows\System32\appmgmts.dll` - 仅限 XP。有效负载将尝试从 dllcache 中删除原始内容，以防恶意软件被替换。
3. `%LOCALAPPDATA%\AppUIHelper.dll`

然后，恶意软件被安装为一个服务，使用以下名称之一：
- AppMgmt
- MSiSCSI

## 权限提升与 UAC 绕过
如前所述，如果进程尚未以管理员身份运行，它将尝试提升权限。具体步骤如下：
1. 使用 `DEBUG_PROCESS` 标志创建一个新的进程 (`explorer.exe /select`)。
2. 调用 `WaitForDebugEvent` 查找 `CREATE_PROCESS_DEBUG_EVENT` 事件。
3. 将一些代码和数据注入到资源管理器进程中。这段代码执行 CMSTPLUA UAC 绕过，并以提升的权限重新启动恶意软件负载。在资源管理器进程的入口点注入代码，地址从 `WaitForDebugEvent` 返回的 `_DEBUG_EVENT` 结构中获取。
4. 调用 `ContinueDebugEvent` 恢复注入的资源管理器进程的执行。

尽管这种技术不常见，但并非全新。至少自 2013 年以来，已在 Win32/Napolar 等恶意软件中出现过。

## 自动加载程序
恶意软件的主要代码实际上在 DllMain 中，而不是 ServiceMain 函数。服务本身并没有实际做任何事情。自动 DLL 的目的是从注册表中提取代理 DLL 和配置，反射加载代理 DLL 并调用导出的 Initialize 函数。Initialize 函数返回主要的恶意软件函数到缓冲区，然后代理调用它并传递配置。

## 代理
代理与服务器执行一次握手，然后监听命令。它通过 TCP 进行通信，通讯端口位于配置中（本例为 9000）。所有通信都以 DWORD 作为前缀：`0xFFDDEEAA`，初始化一个包含操作数据的结构。这种结构将被传递给网络通信功能。

## 网络通信
它有自己的通信协议。报头长度为 0x24 字节，后面跟随任何附加数据。头结构如下：
命令数据使用从配置中的数据计算的 0x10 字节滚动密钥进行 XOR 加密。大多数情况下，为了确认 C2 已收到命令，它将发回相同的命令代码，但没有数据。

## 命令代码
> IOCs  
> 文件路径  
> `%LOCALAPPDATA%\AppUIHelper.dll`  
> `C:\Windows\System32\appmgmts.dll` (仅限 XP)  
> `C:\Windows\System32\iscsiexe.dll` (被覆盖)

> 注册表键  
> `HKCR\b`  
> `HKCR\c`  
> `HKCU\System\CurrentControlSet\Control\b`  
> `HKCU\System\CurrentControlSet\Control\c`

> 服务  
> `AppMgmt`  
> `MSiSCSI`

> URL  
> `cv3sa.gicp[dot]net`  
> `kmbk8.hicp[dot]net`

> IP 地址  
> `103.255.45.200:9000`

> 分析的文件  
> `cdcafe42a688ee042dc023128b7da9e591a01f1a163f9644db774acfe1d6d044`  
> `f1d99e124bf644cc20c7ac93701563ed19978bcf32337e3700b2fbc8a9023b82`

审核人：yiwang 编辑：边边