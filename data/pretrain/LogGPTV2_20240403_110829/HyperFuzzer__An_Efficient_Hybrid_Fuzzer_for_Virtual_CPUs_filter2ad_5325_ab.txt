In order to catch tricky CPU virtualization bugs like the one
described above, we argue that HyperFuzzer must satisfy the fol-
lowing two requirements.
First, HyperFuzzer must mutate a VM’s entire state rather than
just the instructions it executes. When we construct the initial set
of fuzzing inputs for HyperFuzzer, we do not have any input that
is in the 16-bit protected mode. This mode is controlled by two
bits in the Global Descriptor Table (GDT) (CS.L = 0 and CS.D = 0).
Without mutating the entire VM state that includes the GDT, it is
impossible to trigger the bug described above.
Second, HyperFuzzer must enable precise input generation based
on dynamic symbolic execution. To generate a new VM state in
the 16-bit protected mode, HyperFuzzer needs to negate the two
bits in the guest GDT. This requires it to precisely track the path
constraints for the hypervisor’s check on the guest VM mode.
3 OVERVIEW
HyperFuzzer is an efficient hybrid fuzzer for CPU virtualization
in hypervisors. We focus on CPU virtualization because it is im-
plemented in the most privileged CPU mode (e.g., root mode, ring
0 on x86), and its bugs have serious security implications for the
HyperFuzzer VMTesting VMFuzzing InputsRunNimble Symbolic ExecutionCoverage-guided Mutation (AFL)Hypervisorrax…rsp…rip…cr0…00 00 00 … 00……0f 01 c1 // vmcallcs…msr………VM state(restored by HyperFuzzer) Trace BuﬀerTrace Buﬀermappedcontrol ﬂowIntel PTSession 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea368(a)
(b)
Figure 2: (a) shows a generic scenario where the VM starts
execution from a specified state and constantly traps to the
hypervisor for emulation. HyperFuzzer realizes hypervisor-
only symbolic execution by forcing no execution inside the
VM and only analyzing the virtual CPU execution of the first
VM trap in the hypervisor as shown in (b).
CPU, and traps into the hypervisor only when the guest operation
needs to be intercepted for emulation, such as executing a special
instruction or accessing memory-mapped I/O regions. Therefore,
when the testing VM is resumed from a specified VM state, its
execution will alternate between the guest VM and the hypervisor,
and can potentially run indefinitely as shown in Figure 2a.
This is not ideal for dynamic symbolic execution because Hyper-
Fuzzer would have to analyze not only the hypervisor’s execution
but also the guest VM’s execution as both executions can update the
symbolic VM state. MultiNyx [24] presents a multi-level analysis
to enable symbolic execution across the VM and the hypervisor,
but their analysis adds complexity and performance overhead for
maintaining state across two CPU modes in symbolic execution.
HyperFuzzer uses a different fuzzing setup to enable a hypervisor-
only symbolic execution. As shown in Figure 2b, the VM state is
set up in such a way that the VM is immediately trapped into
the hypervisor to trigger its virtual CPU execution without any
execution in the VM. Furthermore, HyperFuzzer only traces the
virtual CPU execution of the first trap in the hypervisor, and halts
the VM after it.
This fuzzing setup has two advantages. First, by forcing no exe-
cution in the guest VM, it avoids performing symbolic execution
to track state changes in the VM. Second, it allows HyperFuzzer
to perform symbolic execution on a short virtual CPU execution
history, which helps make its analysis efficient and precise.
One concern here is whether analyzing the virtual CPU execution
over a single VM trap fundamentally limits HyperFuzzer’s code
reachability in the hypervisor. We argue that the majority of virtual
CPU implementation can be tested in this fashion. Since a virtual
CPU’s execution is determined by the VM state, a subsequent VM
trap can be potentially explored by a different VM state. For example,
to test the second VM trap in Figure 2a, we can conceptually capture
1
2
3
4
5
6
7
8
9
10
; load vCPU pointer
; VMEXIT entrypoint
push rcx
mov rcx, gs:[0x10]
mov vcpu.rax[rcx], rax ; save guest GPRs
mov vcpu.rbx[rcx], rbx ;
...
; VMEXIT event emulation
mov rbx, vcpu.rbx[rdi] ; read guest RBX
cmp rbx, 5
je
some_branch
Figure 3: An example of data propagation.
the VM state right before that trap, and use it as another fuzzing
input in Figure 2b.
The remaining question is how to ensure every VM state im-
mediately traps to the hypervisor when resumed. While we can
ensure the initial fuzzing inputs satisfy the requirement via careful
construction, it cannot be guaranteed after a VM state is randomly
mutated. HyperFuzzer detects such cases by running the testing
VM in the single-step mode to force a VM trap after the first instruc-
tion is executed in the VM. When such a single-step trap happens,
HyperFuzzer knows the VM state did not trigger an immediate VM
trap when resumed, and simply removes the fuzzing input from
further symbolic execution and/or mutations.
4.2 Nimble Symbolic Execution
HyperFuzzer performs dynamic symbolic execution based on the
fuzzing input and the control flow of the virtual CPU execution
recorded in our fuzzing setup (§4.1). Since it is different from the
traditional symbolic execution that requires a full execution trace,
we call it Nimble Symbolic Execution (NSE) to emphasize its effi-
ciency. What the control flow provides is a sequence of machine
instructions without any register or memory values. At a high level,
NSE introduces symbolic inputs and their concrete values when
the hypervisor accesses the VM state, emulates every instruction
in the sequence to update the concrete and symbolic stores, and
solves the negated path constraints at input-dependent branches
to generate new fuzzing inputs.
NSE faces two unique challenges. First, the recorded virtual CPU
execution may involve the hypervisor’s internal state. Since we
do not have a full execution trace, the concrete values of some
internal state may be unknown. Some unknown virtual CPU state
may affect NSE’s analysis if the unknown values are involved with
symbolic inputs. Second, the physical CPU can perform checks on
the VM state before trapping to the hypervisor, and NSE has to
account for these hidden checks when solving constraints. Next,
we describe how NSE tackles these two challenges.
4.2.1 Unknown Virtual CPU State. Some unknown virtual CPU
state may affect NSE’s analysis in two ways. First, if an unknown
value is used to decide the memory location to store a symbolic
input, NSE will lose track of the symbolic input since the memory
location is unknown. Second, if an unknown value is used in the
path constraint for an input-dependent conditional branch, NSE
will not be able to negate the path constraint to flip the branch. The
good news is that the second case is rare—our evaluation shows
VMHypervisorTimeVM stateVMEXITVMENTERVMEXITVMHypervisorTimeVM stateVMEXITDoneSession 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea369that over 98% of the input-dependent conditional branches do not
depend on any unknown virtual CPU state (§6.3.1). This matches
our observation that the VM state determines the virtual CPU
execution. NSE simply ignores those input-dependent branches
that involve unknown virtual CPU state. In the rest of the section,
we focus on how NSE solves the first case.
We show an example in Figure 3. When a guest triggers a VM
trap, the hypervisor first saves all its general-purpose registers in
an internal data structure representing the current virtual CPU
(Line 2-6). When the hypervisor handles the trapping event for the
guest, it may fetch the guest’s register state from its virtual CPU
data structure, and emulates the operation accordingly (Line 8-10).
The main issue here is that the virtual CPU pointer is an internal
state of the hypervisor, so it cannot be derived from the fuzzing
input. Without knowing the pointer value, NSE will lose track of
the concrete value and symbolic expression for rbx at Line 8. Our
insight is that we do not need to know the actual pointer value. We
can just give it some concrete value v so that NSE can propagate
the symbolic expression and the concrete value of rbx through the
memory location specified by vcpu.rbx[v].
In general, for any missing memory address that is only used
for data propagation but not involved in path constraints, NSE can
assign an arbitrary value to it to keep the concrete value and the
symbolic expression propagated. However, these arbitrary values
for memory addresses must meet the underlying aliasing require-
ment (i.e., rcx at Line 3 and rdi at Line 8 are aliased addresses and
must have the same value). In the context of CPU virtualization, we
find that the aliasing relationship between the virtual CPU’s inter-
nal data structures does not depend on the guest VM state. Based
on this observation, we mitigate the problem of missing memory
addresses in the following way. We first take a memory dump of
the virtual CPU right before it starts processing a guest VM trap.
We only need to take the memory dump once. The intuition is that
this memory dump captures the aliasing relationship of the virtual
CPU’s internal data structures. When NSE emulates an instruction
that accesses some virtual CPU’s internal state, it takes the con-
crete value from the memory dump. To ensure the values from the
memory dump are not used in path constraints but only used for
input data propagation, NSE tracks if a concrete value or a symbolic
expression is derived from the memory dump.
4.2.2 Hidden Constraints. The hardware performs a series of checks
on the VM state before the execution is trapped into the hypervisor.
Since these checks are done inside the hardware, they are invisible
to NSE and thus cannot be captured in the path constraint gener-
ated by symbolic execution. Therefore, when NSE solves a path
constraint to find a new fuzzing input, this new input might violate
some (hidden) hardware check and be rejected by the hardware
without triggering any virtual CPU execution in the hypervisor.
Existing fuzzing solutions for user-mode code do not have this
problem because all constraints are (visible) software constraints.
Ideally, NSE should emulate and derive path constraints from
these implicit hardware checks described in the software developer
manual. However, it requires non-trivial engineering efforts because
these checks are complex and vary across CPU generations. Instead,
we find that NSE can apply the following two techniques to reduce
1
2
3
4
5
6
7
8
9
10
11
12
void emulate_taskswitch()
{
// To reach here, the processor has already
// verified (guest_eflags & 0x0001) != 0.
// Now, the hypervisor is checking another bit
// in guest_eflags.
if (guest_eflags & 0x4000) {
...;
} else {
...;
}
}
Figure 4: An example of the challenge caused by hardware
checks on the VM state.
1
2
3
4
5
6
7
8
9
10
void some_hyp_func()
{
if (a > 5) {
if (b == 8) { //  5)∧(b != 8). However, the input a is unrelated to the
branch constraint (b != 8). If we use the full path constraint, the
constraint solver may find an arbitrary value for the input a as
long as its new value is greater than 5. This could be a problem if
the hardware has a hidden check to require it to be less than some
constant value. Therefore, we eliminate branch constraints that do
not share symbolic variables with the negated branch in a transitive
manner to avoid unnecessary changes. In this example, the path
constraint would become (b != 8), which avoids changing the
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea370SLoC
Component
6K
Fuzzing Control (§5.1)
4K
Hypervisor Tracing (§5.2)
38K
Nimble Symbolic Execution (§5.3) C++
Table 2: Implementation of HyperFuzzer (SLoC)
Lang
C/C++
C
input a. While prior systems [30, 50] leverage this technique for
performance optimization, it is essential to NSE in accounting for
hidden hardware checks and reducing hardware rejections.
5 IMPLEMENTATION
In this section, we describe the implementation of HyperFuzzer.
We implement a prototype of HyperFuzzer on the Intel VMX plat-
form [32, Chap. 23] for Microsoft Hyper-V [41]. The prototype has
three major components: fuzzing control, hypervisor tracing, and
Nimble Symbolic Execution (as shown in Table 2). Next, we describe
these components in detail.
5.1 Fuzzing Control
The fuzzing control component runs inside the host’s manage-
ment VM. It is responsible for initializing the testing VM, loading
a fuzzing input to set up the testing VM, configuring the hypervi-
sor for tracing, and passing the control flow trace to graybox and
whitebox fuzzing.
Each fuzzing input is a binary file specifying a VM state that
contains register and memory values. We construct these initial
fuzzing inputs manually based on expert knowledge. This allows
us to craft fuzzing inputs arbitrarily without following modern op-
erating system conventions. We make the size of the initial fuzzing
inputs as small as possible to make random mutation more effective
in coverage-guided fuzzing. We do so by eliminating data structures
that are unnecessary for the virtual CPU function being fuzzed. For
instance, paging is not required for the 32-bit protected mode, so
we can eliminate the guest page tables and make the fuzzing input
as small as a few hundred bytes when constructing the state for a
32-bit VM. For virtual CPU features only reachable from a 64-bit
VM, we allocate 2 page table pages to setup 512GB identity mapping
using 1GB huge pages in the guest VM. This helps minimize the
number of memory pages required for guest page tables.