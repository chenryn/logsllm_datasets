N S
A
KAB
df b
f b
df a
3(input (6))
encr (8, key(2), tuple2(key (7), const(0)))
key(7)
encr (5, key(7), secret)
input (6)
π3
3(input (6))
key(7)
tuple2(key(7), const(0))
encr (8, key(2), tuple2(key (7), const(0)))
tuple4(π3
3(input(6)), const (1), key(7),
encr (8, key(2), tuple2(key(7), const(0))))
f a
m3
dm3
K B
AB
m4
bM
encr (9, key(1), const(0))
input (10)
decr (key(2), input (10))
π2
1(decr (key(2), input(10)))
input (11)
decr (π2
1(decr (key (2), input(10))), input (11))
Figure 10: Interpretation of protocol in Fig. 9
28
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)
the program for A
the program for S
the program for B
A := random(3)
2 = f a)
N A
send (A, B, N A
A )
2 := receive(4)
mA
wait(s1)
check(mA
dmA
2 := df a
check(N A
send π4
K A
aM := encr KA
send aM
AB := π4
4(dmA
2 )
A = π4
AB
1 (dmA
2 ))
3(dmA
2 )
(M )(5)
3(m1)
A := π3
m1 := receive(6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (df b)(8)
df a := (N S
f a := encr KAS (Z)(9)
signal (s1)
send f a
A , B, KAB, f b)
m3 := receive(10)
dm3 := case m3 of
f b → df b
1(m3)
AB := π2
K B
m4 := receive(11)
bM := decr KB
(m4)
AB
Figure 11: Example protocol, second iteration, introducing case-statements
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)
the program for A
the program for S
the program for B
A := random(3)
2 = f a)
N A
send (A, B, N A
A )
2 := receive(4)
mA
wait(s1)
check(mA
dmA
2 := df a
check(N A
send π4
K A
aM := encr KA
send aM
AB := π4
4(dmA
2 )
A = π4
AB
1 (dmA
2 ))
3(dmA
2 )
(M )(5)
3(m1)
A := π3
m1 := receive(6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (Z)(8)
df a := (N S
f a := encr KAS (Z)(9)
signal (s1)
send f a
A , B, KAB, f b)
m3 := receive(10)
dm3 := case m3 of
f b → df b
1(m3)
AB := π2
K B
m4 := receive(11)
bM := decr KB
(m4)
AB
Figure 12: Example protocol, second iteration, replacing encryptions
29
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)
the program for A
the program for S
the program for B
A := random(3)
2 = f a)
N A
send (A, B, N A
A )
2 := receive(4)
mA
wait(s1)
check(mA
dmA
2 := df a
check(N A
send π4
K A
aM := encr KA
send aM
AB := π4
4(dmA
2 )
A = π4
3(dmA
2 )
(M )(5)
AB
1 (dmA
2 ))
3(m1)
A := π3
m1 := receive(6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (Z)(8)
signal (s2)
df a := (N S
f a := encr KAS (Z)(9)
signal (s1)
send f a
A , B, KAB, f b)
m3 := receive(10)
wait(s2)
check(m3 = f b)
dm3 := df b
AB := π2
K B
m4 := receive(11)
bM := decr KB
1(m3)
(m4)
AB
Figure 13: Example protocol, second iteration, removing case-statements
x ∈ Var
M
KAS
KBS
A
B
N A
A
mA
2
dmA
2
I(x)
secret
key(1)
key(2)
const(0)
const(1)
random(3)
input(4)
tuple4(π3
3(input (6)), const (1), key(7),
encr (8, key(2), const(0)))
π4
2 ) π3
1(dmA
π4
4(dmA
2 )
K A
AB
aM
m1
N S
A
KAB
df b
f b
df a
3(input (6))
encr (8, key(2), const(0))
key(7)
encr (5, key(7), secret)
input(6)
π3
3(input (6))
key(7)
tuple2(key (7), const(0))
encr (8, key(2), const(0))
tuple4(π3
3(input (6)), const (1), key(7),
encr (8, key(2), const(0)))
f a
m3
dm3
K B
AB
m4
bM
encr (9, key(1), const(0))
input(10)
tuple2(key (7), const(0))
key(7)
input(11)
decr (key (7), input(11))
Figure 14: Interpretation of protocol in Fig. 13
30
Protocol prelude
KAS := gen key(1)
KBS := gen key(2)
A := constant(0)
B := constant(1)
Z := constant(0)
the program for S
the program for A
A := random(3)
2 = f a)
N A
send (A, B, N A
A )
2 := receive(4)
mA
wait(s1)
check(mA
dmA
2 := df a
check(N A
send π4
K A
aM := encr KA
send aM
AB := π4
4 (dmA
2 )
A = π4
1(dmA
2 ))
3 (dmA
2 )
(M )(5)
AB
3(m1)
A := π3
m1 := receive(6)
N S
KAB := gen key(7)
df b := (KAB, A)
f b := encr KBS (Z)(8)
signal (s2)
df a := (N S
f a := encr KAS (Z)(9)
signal (s1)
send f a