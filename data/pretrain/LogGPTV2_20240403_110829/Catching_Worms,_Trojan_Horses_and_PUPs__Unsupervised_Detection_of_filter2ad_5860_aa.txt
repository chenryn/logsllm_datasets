title:Catching Worms, Trojan Horses and PUPs: Unsupervised Detection of
Silent Delivery Campaigns
author:Bum Jun Kwon and
Virinchi Srinivas and
Amol Deshpande and
Tudor Dumitras
Catching Worms, Trojan Horses and PUPs:
Unsupervised Detection of Silent Delivery
Campaigns
Bum Jun Kwon
University of Maryland
PI:EMAIL
Virinchi Srinivas
University of Maryland
PI:EMAIL
Amol Deshpande
University of Maryland
PI:EMAIL
Tudor Dumitras,
University of Maryland
PI:EMAIL
Abstract—The growing commoditization of the underground
economy has given rise to malware delivery networks, which
charge fees for quickly delivering malware or unwanted software
to a large number of hosts. A key method to provide this service
is through the orchestration of silent delivery campaigns. These
campaigns involve a group of downloaders that receive remote
commands and then deliver their payloads without any user
interaction. These campaigns can evade detection by relying on
inconspicuous downloaders on the client side and on disposable
domain names on the server side.
We describe Beewolf, a system for detecting silent delivery
campaigns from Internet-wide records of download events. The
key observation behind our system is that the downloaders
involved in these campaigns frequently retrieve payloads in
lockstep. Beewolf identiﬁes such locksteps in an unsupervised
and deterministic manner, and can operate on streaming data.
We utilize Beewolf to study silent delivery campaigns at scale, on a
data set of 33.3 million download events. This investigation yields
novel ﬁndings, e.g. malware distributed through compromised
software update channels, a substantial overlap between the
delivery ecosystems for malware and unwanted software, and
several types of business relationships within these ecosystems.
Beewolf achieves over 92% true positives and fewer than 5% false
positives. Moreover, Beewolf can detect suspicious downloaders
a median of 165 days ahead of existing anti-virus products and
payload-hosting domains a median of 196 days ahead of existing
blacklists.
I.
INTRODUCTION
The growing commoditization of the underground economy
has given rise to malware delivery networks [8], [28]. These
networks orchestrate campaigns to quickly deliver malware
to a large number of hosts. Understanding these campaigns
can provide new insights into the malware landscape. For
example, the ability to measure the duration of such campaigns
would reveal which malware families remain active and which
are likely to stop propagating. Additionally, by tracking the
downloaders and the domain names associated with each
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page.  Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23220
malware delivery campaign, and the malware payloads dis-
seminated, we could infer the business relationships from
the underground economy. Furthermore, establishing precise
time bounds for the campaigns would also enable correlation
with other concurrent events, such as additional activities and
downloads performed by the malware samples delivered within
each campaign. This new understanding has the potential to
expose fragile dependencies in the underground economy,
leading to effective intervention strategies for disrupting the
malware delivery process [39].
Prior work has generally focused on identifying the mali-
cious domains [1], [3], [5], [28], [29], [33], [36], [42], the
malware families disseminated [13], [19], [23], [26], [40]
and, to a lesser extent, the downloaders utilized on the client
side [26]. Comparatively less attention has been given to the
task of precisely characterizing the relationships among these
entities; for example, a comprehensive ground truth about past
malware delivery campaigns is currently unavailable. As a
step toward understanding campaigns, we focus on a particular
subset called silent delivery campaigns, which involve a group
of downloaders that receive remote commands and then down-
load their payloads with no user interaction. These campaigns
are particularly attractive to the organizations that disseminate
malware or potentially unwanted programs (PUPs), as they
can evade detection by utilizing inconspicuous downloaders, to
retrieve the payloads, and disposable domain names, to host
and serve it temporarily. We propose unsupervised and de-
terministic techniques for detecting silent delivery campaigns.
We also describe the design of a system, called Beewolf,1
which implements these techniques and can operate either on
the entire data set of download events (ofﬂine mode) or on a
stream of data (streaming mode). Using Beewolf, we conduct
the ﬁrst systematic study of silent delivery campaigns.
When downloaders across the Internet are instructed to
conduct a campaign, they will access a common set of DNS
domains to retrieve the payloads. This access typically happens
in a short time window, and forms the key observation behind
Beewolf. After a period of inactivity, the same downloaders
will request additional payloads from a set of fresh domains.
This lockstep behavior exposes the fact that the downloaders
are controlled remotely and reveals the domains involved in
subsequent campaigns. We expect that we can parametrize
1Beewolves are a species of wasp that hunts bees, which are known to
exhibit group behaviors.
lockstep detection to distinguish benign software updates that
are initiated remotely and malicious campaigns. In particular,
software updaters repeatedly access the same server-side in-
frastructure, while malicious campaigns exhibit a high domain
churn as they try to evade blacklists. Additionally, we can
whitelist
the known benign updaters to further reduce the
false positive rate. Our approach is complementary to the
machine learning techniques proposed for detecting malicious
domains [13], [19], [40], [42]. However, in contrast to these
techniques, recognizing a lockstep pattern in a stream of
Internet-wide download events yields an intuitive explanation
of the underlying activity, without
interpreting clusters of
events deﬁned by multiple features.
We ﬁrst formulate lockstep detection as a graph mining
problem. We construct a bipartite graph, where a node corre-
sponds to either a downloader or a payload hosting domain,
and an edge indicates that a downloader contacted a domain
to retrieve a payload. A lockstep is a near biclique2 in this
graph—a graph component that is almost fully connected,
except for a few missing edges—with the added constraint
that the edges are created within a short time window ∆t.
Existing algorithms for lockstep detection [4], [9], [20] are
not well suited for ﬁnding silent delivery campaigns be-
cause they require seed nodes to bootstrap the algorithm
and because they are not designed to operate on streaming
data. In contrast, downloaders typically remain undetected for
several months [26], making it difﬁcult to identify seeds in a
timely manner, and malicious domains can be discarded within
days [25], [38], at which point the information from lockstep
detection is no longer actionable.
Based on this formulation, we propose a novel lockstep
detection technique, which can operate on streams of download
events. We perform the computationally intensive operations
(e.g., updating the bipartite graph and the adjacency lists)
incrementally, as new events are received, and then we detect
locksteps with an efﬁcient linear algorithm. We use this tech-
nique in both of Beewolf’s modes of operation. In ofﬂine mode,
Beewolf analyzes all
to characterize
lockstep behaviors empirically. In streaming mode, Beewolf
receives data incrementally and prunes the locksteps detected
to focus on suspicious downloaders and domains.
the download events,
Ultimately, we utilize Beewolf to conduct a large empirical
study of silent delivery campaigns conducted over one year.
We analyze a data set of 33.3 million download events,
observed on 1.9 million hosts, and we detect over 130,000
locksteps. These locksteps comprise 1.4 million campaigns.
Building on the observation that many downloaders involved
in lockstep behavior have valid digital signatures, we identify
representative publishers for each lockstep and we analyze
the relationships among publishers. This investigation yields
insights into two types of relationships. We identify both direct
download relationships between publisher pairs, which may
also be observed by milking downloaders from pay-per-install
(PPI) providers [22], [38], and indirect relationships, among
publishers caught in lockstep together. The second relation-
ship type can overcome evasive strategies such as certiﬁcate
polymorphism or utilizing unsigned downloaders for malicious
payloads. In consequence, we ﬁnd a larger overlap between
2We allow a few edges to be missing to account for download events that
are occasionally not recorded by our data collection infrastructure.
the malware and PUP delivery ecosystems than reported in
recent studies [22], [38]. We also show that Beewolf achieves
over 92% true positives and fewer than 5% false positives,
and that it can detect suspicious downloaders a median of 165
days ahead of existing anti-virus products and payload-hosting
domains a median of 196 days ahead of existing blacklists.
In summary, we make the following contributions:
1) We conduct a systematic study of malware delivery
campaigns and we report several new ﬁndings about
the malware and PUP delivery ecosystems.
2) We propose techniques for discovering silent delivery
campaigns by detecting lockstep behavior in large
collections of download events. These techniques are
unsupervised and deterministic, as they do not require
seed nodes and are not based on machine learning.
3) We present a system, Beewolf, which implements
these techniques, along with evidence-based opti-
mizations that allow it to detect silent delivery cam-
paigns in a streaming fashion.
We release the inter-publisher relationships detected with
Beewolf at http://www.beewolf.org/.
This paper is organized as follows: In section II, we
characterize the threat of silent delivery campaigns and we
state our goals. We describe our data set and the methods we
use for distinguishing between malware and PUPs in Section
III. We discuss the key components of Beewolf in Section IV.
In Section V, we characterize silent delivery campaigns. In the
following sections, we evaluate the performance of Beewolf.
Section VI presents the detection performance and in Section
VII we evaluate the performance of Beewolf’s streaming mode.
We review related work in section VIII.
II. THREAT MODEL
Downloader trojans (also known as droppers) are at the
heart of malware distribution techniques [26]. A downloader
is an executable program that connects to an Internet domain
and downloads other executables (called payloads), usually
in response to remote commands. We focus on the domains
hosting the payloads, which are often distinct from other
components of the malware delivery networks, e.g. exploit
servers, command & control servers, payment servers [41], and
we take only the second level domain (SLD) under a public
sufﬁx3 (e.g., site1.com, site2.co.uk).
Silent delivery campaigns. Malware delivery networks use a
variety of methods to install their downloaders, e.g. drive-by-
download exploits, social engineering, afﬁliate programs [8].
When they receive new payloads from their clients,
the
malware delivery networks command their downloaders to
retrieve these payloads on the victim hosts. This results in
coordinated waves of payload delivery, which often do not
require any user intervention to avoid attracting attention.
We term these waves silent delivery campaigns, by analogy
with the silent updating mechanisms increasingly adopted
by benign software publishers [14], [32]. A key difference
between the silent delivery campaigns conducted on behalf
of malicious and benign payloads is that benign campaigns
3We use Mozilla’s public sufﬁx list from https://publicsufﬁx.org/.
2
repeatedly access the same server-side infrastructure, while
malicious campaigns exhibit a high domain churn as they try to
evade blacklists. Depending on the payloads, these campaigns
may be malware delivery campaigns, which drop executables
with unambiguously malicious functionality such as trojan
horses, bots, keystroke loggers, or PUP delivery campaigns,
which drop PUPs such as adware, spyware and even additional
droppers.
The detection of domains involved in malware and PUP
distribution has been widely explored using machine learning
techniques [13], [19], [40], [42]. These techniques typically
output clusters of events, deﬁned by multiple features, which
can be difﬁcult to interpret. We investigate a complementary
approach: deterministic techniques, based on the intuition that
temporal patterns in the downloader-domain interactions can
expose remotely controlled downloaders.
Lockstep behavior. The coordinated downloads from silent
in lockstep behavior. Intuitively,
delivery campaigns result
lockstep behavior corresponds to repeated observations of
synchronized activity among a group of downloaders (or do-
mains), which access (are accessed by) the same set of domains
(downloaders) to retrieve payloads, within a bounded time
period. In other words, locksteps capture coordinated down-
loads that do not experience random delays, e.g. from manual
user intervention. This points to silent delivery campaigns. As
lockstep detection requires several repeated observations of
coordinated downloads, a lockstep may correspond to one or
several delivery campaigns that use the same infrastructure.
Formally, consider a bipartite graph G = (U, V, E) where
U and V are disjoint set of nodes corresponding to left hand
nodes and right hand nodes, respectively, and an edge e ∈ E
may link two nodes belonging to different sets but not nodes
from the same set. Let ti,j represent the time at which an edge
is formed between node i ∈ U and node j ∈ V . Further, let
U(cid:48) ⊆ U and V (cid:48) ⊆ V . We deﬁne a star [U(cid:48), j, ∆t, δt] on U(cid:48)
and some central node j ∈ V (cid:48) as follows:
| U(cid:48) |≥ 2
(max
i
ti,j − min
i