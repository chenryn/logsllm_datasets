Torrent, it is not possible to evaluate both solutions on the
same torrents. However, based on the theoretical network
coding results, we discuss the respective merits of rarest ﬁrst
and network coding in section 4.1.4.
For the computation of the ratios on Fig. 1, we did not
consider peers that spent less than 10 seconds in the peer
set. Our motivation was to evaluate the entropy of pieces in
a torrent. However, due to several misbehaving clients, there
is a permanent noise created by peers that join and leave the
peer set frequently. Such peers stay typically less than a few
seconds in the peer set, and they do not take part in any
active upload or download. Therefore, these misbehaving
peers adversely bias our entropy characterization. Filtering
all peers that stay less than 10 seconds remove the bias.
In summary, we have seen that the rarest ﬁrst algorithm
enforces a close to ideal entropy for the presented torrents.
We have identiﬁed torrents with low entropy and shown that
the rarest ﬁrst algorithm is not responsible for this low en-
tropy. We have also identiﬁed rare cases where the rarest
ﬁrst algorithm does not perform optimally, but we have ex-
plained that these cases do not justify a replacement with
a more complex solution. In the following, we evaluate how
the rarest ﬁrst piece selection strategy achieves high entropy.
4.1.2 Rarest First Algorithm Dynamics
We classify a torrent in two states: the transient state and
the steady state5. In transient state, there is only one seed
in the torrent. In particular, there are some pieces that are
rare, i.e., present only at the seed. This state corresponds to
the beginning of the torrent, when the initial seed has not yet
uploaded all the pieces of the content. All torrents with low
entropy (Fig. 1, top graph) are in transient state. A good
piece replication algorithm should minimize the time spent
in the transient state because low entropy may adversely
impact the service capacity of a torrent by biasing the peer
selection strategy. In steady state, there is no rare piece, and
the piece replication strategy should prevent the torrent to
enter again a transient state. All torrents with high entropy
are in steady state.
In the following, we evaluate how the rarest ﬁrst algorithm
performs in transient and steady state. We show that the
low entropy of torrents experienced in transient state is due
to the limited upload capacity of the initial seed, and that
the rarest ﬁrst algorithm minimizes the time spent in this
state. We also show that the rarest ﬁrst algorithm is eﬃcient
at keeping a torrent in steady state, thus guaranteeing a high
entropy.
4.1.2.1 Transient State.
In order to understand the dynamics of the rarest ﬁrst
algorithm in transient state, we focus on torrent 8. This
torrent consisted of 1 seed and 861 leechers at the beginning
of the experiment. The ﬁle distributed in this torrent is split
in 863 pieces. We run this experiment during 58991 seconds,
but in the following we only discuss the results for the ﬁrst
29959 seconds when the local peer is in leecher state.
Torrent 8 is in transient state for most of the experiment.
As we don’t have global knowledge of the torrent, we do not
have a direct observation of the transient state. However,
there are several evidences of this state. Indeed, Fig. 2 shows
that there are missing pieces during the experiment in the
local peer set, as the minimum curve (dashed line) is at
zero. Moreover, we probed the tracker to get statistics on
the number of seeds and leechers during this experiment. We
found that this torrent had only one seed for the duration
of the experiment.
We see in Fig. 1, top graph, that torrent 8 has low entropy.
This low entropy is due to the limited upload capacity of
the initial seed. Indeed, when a torrent is in transient state,
5Our deﬁnition of transient and steady state diﬀers from the
one given by Yang et al. [26].
Replication of Pieces in the Peer Set, LS
80
60
40
20
i
s
e
p
o
C
f
o
r
e
b
m
u
N
Max
Mean
Min
0
0
0.5
1
1.5
Time (s)
2
2.5
3
x 104
Figure 2: Evolution of the number of copies of pieces in the
peer set with time for torrent 8 in leecher state. Legend:
The dotted line represents the number of copies of the most
replicated piece in the peer set at each instant. The solid
line represents the mean number of copies over all the pieces
in the peer set at each instant. The dashed line represents
the number of copies of the least replicated piece in the peer
set at each instant.
Number of Rarest Pieces, LS
300
250
200
150
100
50
t
s
e
r
a
r
.
m
u
N
0
0
0.5
1
1.5
Time (s)
2
2.5
3
x 104
Figure 3: Evolution of the number of rarest pieces in the
peer set for torrent 8 in leecher state. The rarest pieces set
is formed by the pieces that are equally the rarest, i.e., the
pieces that have the least number of copies in the peer set.
available pieces are replicated with an exponential capacity
of service [26], but rare pieces are served by the initial seed
at a constant rate. This is conﬁrmed by Fig. 3 that shows
the number of rarest pieces, i.e., the set size of the pieces
that are equally rarest. We see that the number of rarest
pieces decreases linearly with time. As the size of each piece
in this torrent is 4 MB, a rapid calculation shows that the
rarest pieces are duplicated in the peer set at a constant rate
close to 36 kB/s. We do not have a direct proof that this
rate is the one of the initial seed, because we do not have
global knowledge of the torrent. However, the torrent is in
its startup phase and most of the pieces are only available on
the initial seed. Indeed, Fig. 2 shows that there are missing
pieces in the peer set, thus the rarest pieces presented in
Fig. 3 are missing pieces in the peer set. Therefore, only
the initial seed can serve the missing pieces shown in Fig. 3.
In conclusion, the upload capacity of the initial seed is the
bottleneck for the replication of the rare pieces, and the time
spent in transient state only depends on the upload capacity
of the initial seed.
The rarest ﬁrst algorithm attempts to minimize the time
spent in transient state and replicates fast available pieces.
Indeed, leechers download ﬁrst the rare pieces. As the rare
pieces are only present on the initial seed, the upload ca-
pacity of the initial seed will be fully utilized and no or few
duplicate rare pieces will be served by the initial seed. Once
served by the initial seed, a rare piece becomes available and
is served in the torrent with an increasing capacity of ser-
vice. As rare pieces are served at a constant rate, most of
the capacity of service of the torrent is used to replicate the
available pieces on leechers. Indeed, Fig. 2 shows that once
a piece is served by the initial seed, the rarest ﬁrst algorithm
will start to replicate it fast as shown by the continuous in-
crease in the mean number of copies over all the peers, and
by the number of copies of the most replicated piece (dotted
line) that is always close to the maximum peer set size of
80.
In summary, the low entropy observed for some torrents is
due to the transient phase. The duration of this phase can-
not be shorter than the time for the initial seed to send one
copy of each piece, which is constrained by the upload ca-
pacity of the initial seed. Thus, the time spent in this phase
cannot be shorten further by the piece replication strategy.
The rarest ﬁrst algorithm minimizes the time spent in tran-
sient state. Once a piece is served by the initial seed, the
rarest ﬁrst algorithm replicates it fast. Therefore, a replace-
ment of the rarest ﬁrst algorithm by another algorithm can-
not be justiﬁed based on the real torrents we have monitored
in transient state.
4.1.2.2 Steady State.
In order to understand the dynamics of the rarest ﬁrst
algorithm in steady state, we focus on torrent 7. This torrent
consisted of 1 seed and 713 leechers at the beginning of the
experiment. We have seen on Fig. 1 that torrent 7 has a
high entropy. Fig. 4 shows that the least replicated piece
(min curve) has always more than 1 copy in the peer set.
Thus, torrent 7 is in steady state.
In the following, we present the dynamics of the rarest ﬁrst
algorithm in steady state, and explain how this algorithm
prevents the torrent to return in transient state. Fig. 4 shows
that the mean number of copies remains well bounded over
time by the number of copies of the most and least replicated
pieces. The variation observed in the number of copies are
explained by the variation of the peer set size, see Fig. 5.
The decrease in the number of copies 9051 seconds after the
beginning of the experiment corresponds to the local peer
switching to seed state. Indeed, when a leecher becomes a
seed, it closes its connections to all the seeds.
The rarest ﬁrst algorithm does a very good job at increas-
ing the number of copies of the rarest pieces. Fig. 4 shows
that the number of copies of the least replicated piece (min
curve) closely follows the mean, but does not signiﬁcantly
get closer. However, we see in Fig. 6 that the number of
rarest pieces, i.e., the set size of the pieces that are equally
rarest, follow a sawtooth behavior. Each peer joining or
leaving the peer set can alter the set of rarest pieces. But,
as soon as a new set of pieces becomes rarest, the rarest ﬁrst
algorithm quickly duplicates them as shown by a consistent
drop in the number of rarest pieces in Fig.6. Finally, we
never observed in any of our torrents a steady state followed
by a transient state.
Replication of Pieces in the Peer Set
Max
Mean
Min
80
60
40
20
i
s
e
p
o
C
f
o
r
e
b
m
u
N
0
0
0.5
1
1.5
Time (s)
2
2.5
3
x 104
Figure 4: Evolution of the number of copies of pieces in the
peer set with time for torrent 7. Legend: The dotted line
represents the number of copies of the most replicated piece
in the peer set at each instant. The solid line represents the
mean number of copies over all the pieces in the peer set
at each instant. The dashed line represents the number of
copies of the least replicated piece in the peer set at each
instant.
Size of the Peer Set
80
70
60
50
40
30
20
10
e
z
s
t
i
e
s
r
e
e
P
0
0
0.5
1
1.5
Time (s)
2
2.5
3
x 104
Figure 5: Evolution of the peer set size for torrent 7.
In summary, the rarest ﬁrst algorithm in steady state en-
sures a good replication of the pieces in real torrents.
It
also replicates fast the rarest pieces in order to prevent the
reappearance of a transient state. We conclude that on real
torrents in steady state, the rarest ﬁrst algorithm is enough
to guarantee a high entropy.
4.1.3 Last Pieces Problem
We say that there is a last pieces6 problem when the down-
load speed suﬀers a signiﬁcant slow down for the last pieces.
This problem is due to some pieces replicated on few over-
loaded peers, i.e., peers that receive more requests than they
can serve. This problem is detected by a peer only at the
end of the content download. Indeed, a peer always seeks for
fast peers to download from. Thus, it is likely that if some
pieces are available on only few overloaded peers, these peers
6This problem is usually referenced as the last piece (singu-
lar) problem. However, there is no reason why this problem
aﬀects only a single piece.
t
s
e
r
a
r
.
m
u
N
40
35
30
25
20
15
10
5
0
0
Number of Rarest Pieces
0.5
1
1.5
Time (s)
2
2.5
3
x 104
Figure 6: Evolution of the number of rarest pieces in the
peer set for torrent 7. The rarest pieces set is formed by the