title:Scamper: a scalable and extensible packet prober for active measurement
of the internet
author:Matthew J. Luckie
Scamper: a Scalable and Extensible Packet Prober for
Active Measurement of the Internet
Matthew Luckie
Department of Computer Science
University of Waikato
Hamilton, New Zealand
PI:EMAIL
ABSTRACT
Large scale active measurement of the Internet requires ap-
propriate software support. The better tools that we have
for executing consistent and systematic measurements, the
more conﬁdence we can have in the results. This paper
presents scamper, a powerful open-source packet-prober for
active measurement of the Internet designed to stand alone
from coordination mechanisms. We built scamper and pop-
ulated it with speciﬁc measurement techniques, making de-
sign decisions aimed at allowing Internet researchers to focus
on scientiﬁc experiments rather than building accurate in-
strumentation.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement techniques
General Terms
Measurement
Keywords
Active measurement, Software, Tools
1.
INTRODUCTION
Packet probing experiments capture relatively simple mea-
surements – typically delay, loss, reordering, and topology
– that yield surprising insights into the structure and be-
haviour of the Internet. An early measurement experiment
investigating the eﬀect of packet size on delay suggested that
TCP implementers should reﬁne the algorithm used to com-
pute the TCP RTO value [1]. The massive scale and contin-
uing growth of the Internet has increased the complexity of
measuring it, both technically and methodologically. In the
past decade, researchers have built and operated many large-
scale active Internet measurement platforms [2, 3, 4, 5, 6, 7,
8, 9] where each typically reproduces a tremendous amount
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’10, November 1–3, 2010, Melbourne, Australia.
Copyright 2010 ACM 978-1-4503-0057-5/10/11 ...$10.00.
of supporting software development. Faced with continu-
ing funding constraints, members of the Internet measure-
ment community organised a workshop in 2005 to strategise
a way to collaborate on creating and operating a community-
oriented network measurement infrastructure; the workshop
report [10] presents many goals and desires, including the
need for better ways to organise large-scale measurements.
This paper focuses on a small part of this problem; build-
ing a packet-prober that makes it easy to conduct large-scale
measurements and archive collected data in a well-deﬁned
format. A packet-prober should abstract away problems
of coordinating individual measurements on a host, pro-
vide APIs that deal with operating system diﬀerences, pro-
vide APIs for obtaining accurate timing information, and
produce output that is more detailed and easier to process
than that produced by existing system tools. By building
a packet-prober with these goals in mind we can help the
experimental researcher avoid the system programming and
administration problems of coordinating individual measure-
ments on a single host. Rather than suﬀering the overhead
associated with parallelisation of a single instance of a given
measurement process, a researcher can rapidly implement a
new measurement technique and focus on the analysis and
validation of results.
Such community software infrastructure will also improve
the capability of researchers to leverage measurements from
volunteers across the global Internet. At present researchers
need to be careful when soliciting volunteers to do a mea-
surement that uses the system’s included traceroute as the
implementation included in each operating system diﬀers
remarkably in operation and utility, even though most are
based on Van Jacobson’s implementation [11]. For instance,
none support Paris traceroute [12], FreeBSD’s implementa-
tion supports TCP probing but does not process TCP re-
sponses, and Ubuntu’s implementation can trigger rate lim-
iting because it sends bursts of probes.
This paper presents scamper, a powerful packet-prober
designed to support large-scale Internet measurement. In-
cluded in the contribution to the measurement community
are feature-rich implementations of traceroute, ping, MDA
traceroute, four alias resolution techniques, Sting, and parts
of TBIT. We begin in section 2 by ﬁrst establishing a set of
design objectives. Sections 3, 4, 5, and 6 present a technical
overview of scamper, detailing its implementation, features,
performance, and use. Section 7 shows how scamper has
been useful in conducting research, including both our ex-
periences and those of others. Finally, section 8 outlines
related work and section 9 concludes.
2392. DESIGN OBJECTIVES
Precise: promote good science by ensuring details found
in a response packet are easily available to measurement
techniques, easily stored, and then easily read by analy-
sis routines. A researcher should be able to annotate both
individual measurements and a collection of measurements
describing the purpose and speciﬁcs of the data collection.
Packet timestamps should be recorded from the best avail-
able source – whether it be from user-space or the network
interface. Decoding a chain of packet headers can be tedious
and error prone; therefore, the packet-prober should present
decoded packet headers to a measurement technique so that
the implementer can easily use them. Finally, the details
found in a packet header should be preserved in a data ﬁle
even if the need to do so has not yet been established.
To motivate this last point, consider macroscopic Internet
topology mapping using traceroute; traditionally, the data
recorded per-hop is an IP address, the RTT measured, and
the TTL used in the probe packet. However, Augustin et al.
recently brought to the community’s attention the problem
of routers that forward traceroute probes with a TTL of zero,
which results in a subsequent router appearing twice in a
path and therefore a false link inference [12]. Unfortunately,
few topology mapping projects record the TTL found in the
ICMP quotation, preventing the correction of link inferences
made using topology data archived years earlier.
Parallelised: eﬃciently manage the several hundred con-
current measurements that are a reality of macroscopic In-
ternet measurement. For Internet-scale experiments to com-
plete in a reasonable length of time requires concurrent mea-
surements. Active measurements can spend a lot of time
waiting, for example, for a reply to a TTL-limited probe
in traceroute, or for a reply to a TCP SYN probe. The
period of time where productive work is done is when send-
ing a probe and receiving a reply, so measurement is most
productive when we are able to probe at a constant rate.
However, an architecture that allocates a thread per mea-
surement does not scale as well as an event-based system.
A packet-prober should provide APIs that allow resources
such as sockets to be shared amongst measurements. Do-
ing so improves performance by reducing the number of ﬁle
descriptors that the operating system has to service when
multiplexing synchronous I/O.
Portable:
support a wide range of operating systems
and computer architectures. The requirements of some ac-
tive measurement techniques are not well catered for by the
Berkeley sockets API, which is designed for general-purpose
Internet software. The methods available to bypass the sock-
ets API diﬀer amongst operating systems, so a signiﬁcant
volume of code has to be implemented for any one technique
to be portable across systems. The experimental researcher
would beneﬁt from an API that is operating system agnostic
and reduces the code required to create and send a packet
and then receive and decode a response.
Flexible: each experiment has diﬀerent motivations and
requirements; a packet-prober should be ﬂexible enough to
support them. While some experiments can be speciﬁed
as a one-shot measurement where the order in which a mea-
surement is conducted is not important, some measurements
are conducted in reaction to a previous measurement [13],
or require some amount of coordination and control. These
requirements call for the packet-prober to be ﬂexible in the
ways it allows a researcher to specify measurements.
Volunteer friendly: some measurements are made by
volunteers that run experiments on behalf of researchers. A
packet-prober should therefore be easily compiled on sys-
tems for which a pre-compiled binary is unavailable; easily
operated by a volunteer; lightweight enough to run in a re-
source constrained environment such as an embedded sys-
tem; and self-contained so that a potential volunteer will not
need to install a suite of dependencies.
Modular: support multiple measurement techniques, and
be easily extended to include techniques that have not yet
been devised.
3. SCAMPER
Guided by the design objectives listed in section 2 we im-
plemented scamper, a parallelised packet-prober capable of
large-scale Internet measurement using many diﬀerent mea-
surement techniques. Figure 1 illustrates the overall archi-
tecture of scamper. Brieﬂy, scamper obtains a sequence of
measurement tasks from the input sources and probes each
in parallel as needed to meet a packets-per-second rate speci-
ﬁed on the command line. Tasks currently being probed are
held centrally by scamper in a set of queues – the probe
queue if the task is ready to probe, the wait queue if it is
waiting for time to elapse, and the done queue if the task
has completed and is ready to be written out to disk. Each
measurement technique is implemented in a separate mod-
ule that includes the logic for conducting the measurement
as well as the input/output routines for reading and writing
measurement results, allowing measurement techniques to
be implemented independently of each other. When a new
measurement task is instantiated, the task attaches a set of
callback routines to itself that scamper then uses to direct
the measurement as events occur, such as when it is time
to probe, when a response is received, or when a time-out
elapses. Sockets required as part of a measurement are held
centrally by scamper in order to share them amongst tasks
where possible so that resource requirements are reduced.
Finally, scamper centrally maintains a collection of output
ﬁles where completed measurements are written.
Output: scamper provides two output ﬁle formats; an
ASCII text option, and a binary ﬁle format known as warts.
The text option produces low-ﬁdelity output similar to the
ping and traceroute utilities and is suitable for interactive
use. The binary option is an extensible format designed for
use by researchers because of its ability to record detail and
provide archival features. Scamper includes a library that
allows its binary output ﬁles to be easily read, and CAIDA
have created a Ruby library [14] which allows researchers
to develop analysis programs in Ruby. Scamper supplies an
API to assist a researcher implementing a new measurement
technique to create a record which can then be stored in the
binary ﬁle format. To promote precision and discourage
researchers from recording results in the text option, the
library provides no ability to read results from a text ﬁle.
Portability layer: scamper provides a portability layer
that shields a researcher implementing a measurement tech-
nique from the diﬀerences in the APIs of each operating sys-
tem. An author of a measurement technique uses scamper’s
portability layer to deﬁne the details of a probe packet and
to transmit it, and has the corresponding responses decoded
and passed to the task by its speciﬁed callback routines. The
portability layer hides, for example, the details of which byte
order the system expects packet headers to be supplied in,
240Input sources
Prio
3
Prio
1
New
Queues
Probe
Waiting
Done
s
o
c
k
e
t
c
o
n
t
r
o
l
f
i
l
e
i
n
p
u
t
Queue
Current tasks
Output files
tbit
traceroute
ping
probe
timeout
write
reply
probe
timeout
write
reply
probe
timeout
write
reply
Completed
File
1
File
2
File
3
Probe command
Replies
File descriptors
Internet sockets
Datalink sockets
Private sockets
f
i
l
e
t
e
x
t
f
i
l
e
w
a
r
t
s
s
o
c
k
e
t
c
o
n
t
r