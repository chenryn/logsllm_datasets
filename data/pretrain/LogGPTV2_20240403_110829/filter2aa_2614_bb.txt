Paseto标准协议。目前，Paseto标准协议有两个版本v1和v2。
■ 目标用途：此字段是枚举值，分别为local和public，其含义分别
表示对有效载荷部分采用对称加密算法还是非对称数字签名算法。
■ 
有效载荷：与JWT类似，也是JSON数据结构，只不过这部分数
据是加密或签名后再进行Base64编码的JSON数据。原始的JSON数据结
构可以与JWT类似，也可以用户自定义放入自己业务所需要的字段。
■ 页脚：用于存储未加密的其他元数据，此部分在整个Paseto结构
中为可选部分。将上述4个部分放在一起，Paseto的格式如下：
典型的Paseto结构样例如下（不包含页脚部分）：
3.Paseto创建和使用
Paseto目前有两个版本，推荐使用v2版本。这里，以v2版本为例，
讲解其创建和使用过程。在Paseto的组成结构中，目标用途分为local和
public两种类型，其分别对应于对称加密和非对称数字签名两种场景，
local类型的使用过程主要有加密和解密两个，而public的使用过程主要
有签名和验签两个。下面将为读者分别讲述这4个过程。
在Paseto官网上，提供了不同开发语言的Paseto辅助类库的实现，
在这里使用paseto4j类库，来说明local和public两种类型的使用过程。
（1）加密过程
使用加密和解密的过程，对应于local类型。这种场景下，使用封装
后的paseto4j类库实现起来非常简单，关键代码片段如下：
在Paseto类的encrypt方法中，其创建过程如图9-10所示。
●图9-10 Paseto创建过程
1）首先定义Paseto头部，通常情况下该值默认为v2.local。
2）基于操作系统运行环境，结合payload值和传入的密钥随机数
secretKey生成一次性随机数nonce。
3）基于一次性随机数nonce和密钥随机数secretKey生成加密密钥
EK和验证密钥AK，并将协议版本、目标用途、页脚（如果有的话）一
起打包，生成preAuth值。
4）调用AES算法的实现，对明文消息payload进行加密，其算法伪
码如下所示：
5）将验证密钥AK与preAuth值，通过HMAC算法，生成中间值
temp。
6）使用算法v2.local.Base64(一次性随机数+密文
+temp).Base64url(页脚)生成Paseto格式的数据。
（2）解密过程
解密是加密过程的逆向操作，当接收端获取到Paseto格式的数据
后，对数据进行解析、解码、解密等操作，验证数据的正确性。其步骤
如下。
1）检验是否存在页脚，如果存在，则通过用户自定义的方式来验
证页脚数据。
2）按照v2.local的定义，验证接收的数据是否符合Paseto格式。
3）按照Paseto格式进行Base64解码，获取各个组成部分。
4）重复加密过程的33）～5）三个步骤，将解密过程生成的temp值
与客户端传入的temp值进行比对，如果比对成功，则调用AES算法进行
解密。
5）如果解密失败，提示异常。
通过paseto4j类库的使用分析可以看出，Paseto的加密和解密过程中
对加密算法的使用仅占其中很小的一部分，更重要的33）～5）三个步
骤的重复操作，在加密和解密两个过程均存在，能有效地防止数据传输
过程被篡改，通过数据验证的方式保障数据的一致性。
看完了加密和解密之后，接着来看看签名和验签的过程。下面的代
码片段为使用paseto4j类库的样例：
（3）签名过程
签名过程是Paseto的v2.public所具有的，在paseto4j类库其实现步骤
如下。
1）首先使用RSA算法，创建公钥和私钥对。
2）接着将头部值v2.public、payload、footer一起打包，生成
preAuth。
3）调用signRsaPssSha384方法，用私钥将preAuth值生成签名字符
串。其算法伪码如下：
4）最后，使用算法v2.public.Base64(payload+签名字符
串).Base64url(页脚)生成Paseto格式的数据。
（4）验签过程
验签是签名的逆向操作，其步骤如下。
1）首先获得签名字符串和公钥，判断页脚是否存在，如果存在页
脚，则先验证页脚。
2）接着验证数据格式是否为v2.public开头的Paseto格式。
3）如果格式正确，则Base64解码有效载荷，分别获取payload和签
名字符串。
4）验签时，先将头部值v2.public、payload、footer一起打包，生成
preAuth。
5）重复签名过程的第3）步，将生成的签名字符串与获得签名字符
串进行比对。
6）如果比对数据一致则验签通过，使用原始消息。否则，消息异
常处理。
4.Paseto技术应用与安全性
从上文Paseto令牌的4个使用过程的介绍可以看出，Paseto两种不同
的类型在使用时是面向不同需求的安全场景。
在传送一些敏感数据的场景下，可以使用Paseto的local类型。此
时，通信双方以共享密钥的形式传递数据。这种场景下，密钥的安全性
将更为重要。而在使用Paseto的public类型的场景下，更需要关注的是数
据传输过程是否被篡改、被破坏，更适用授权、认证类的场景，比如ID
令牌、访问令牌Access 
Token，通过Paseto所携带的信息作为整个流程
的一部分。通过JWT和Paseto的使用介绍，想必读者也能看出，Paseto在
使用方式上相比JWT要简单，与此同时，Paseto数据格式对于头部的定
义、加密算法、签名算法的选择有诸多限制，用户的可选择性较小，这
也是Paseto设计的初衷，通过回避因JOSE规范灵活性带来的不安全问题
而提高自身的安全性，尤其是在加密算法、密钥生成、头部声明等方面
做的精简性设计。
当开发者在使用这两种技术时，需要根据自己业务场景的复杂性来
评估选用哪种技术。通常来说，如果Paseto能满足要求，建议使用
Paseto技术；如果Paseto无法满足，建议使用JWT技术，但需要对JWT技
术进行裁剪或约定，禁止使用一些不安全的加密算法，规避当前协议流
程中的缺陷。
9.2.3 XML及其他格式消息保护
JWT和Paseto技术主要适用于JSON数据格式，除JSON数据格式
外，以XML作为数据格式的消息在应用程序接口中也比较常见。在
XML的消息保护方面，以SOAP协议中的WS-*协议栈影响最为广泛，但
因技术相对比较陈旧，使用者正逐步减少，在这里仅为读者做简要的介
绍。
1.WS-＊协议栈简介
在SOAP协议中，有关的一系列安全标准规范通常以WS-开头，又
被称为WS-*协议栈，它包含的标准规范如下。
■ WS-RM：即Web服务可靠消息传递（WS-ReliableMessaging）规
范，定义两个系统之间SOAP消息通信的可靠性和健壮性。
■ WS-Security：是消息级的安全标准，通过对SOAP的拓展，采用
XML数字签名、XML加密以及通过安全性令牌等安全模型和加密技
术，保障SOAP消息的完整性和机密性。
■ WS-SecureConversation：描述在SOAP通信中，如何建立会话密
钥、派生密钥和消息令牌（per-message）密钥等，保证认证请求者消
息、认证服务以及认证上下文的安全性。
■ 
WS-Trust：为WS-Security的拓展，描述与令牌有关的创建、发
布、验证，确保通信各方处于一个安全可信的数据交换环境。
■ WS-Federation：定义了统一认证和授权相关的约束和规范。
■ WS-SecurityPolicy：定义了应用服务在实现具体的安全策略时遵
循的约束和规范。
这一系列的标准规范，以WS-Security为基础并进行拓展，将XML
签名、XML加密与认证、授权相关的安全技术（比如Kerberos令牌、
X.509证书、SAML断言）进行整合，绑定到SOAP协议中，以保证
SOAP消息的安全性。
2.WS-Security消息保护机制
一个完整的使用消息保护机制的SOAP消息格式包含安全令牌、
XML加密、XML签名三个部分，如下结构所示：
从这个消息格式可以看到，与安全有关的安全令牌、XML加密、
XML签名三个部分都在消息头中定义的，而消息体中仅定义
了需要加密和签名的数据内容。在中定义的信息表示接
收端在处理时需要接收与安全有关的信息，而在中定义了需要
被签名的信息，节点中定义了签名的相关信息，比如签名
使用的算法、签名引用的对象、签名值等。关于WS-Security加密与签名
更完整的样例，请参考其官方规范中的定义描述，链接地址为
http://docs.oasis-open.org/wss/v1.1/wss-v1.1-spec-errata-
SOAPMessageSecurity.htm。
在使用WS-Security加密和签名时，需要注意的是，因加密和签名的
先后顺序不同，上述消息的结构会发生变化。如果是先签名后加密，则
的消息结构中加密块在前；反之，如果是先加密，再签
名，则结构改变为签名块在前，如图9-11所示。
●图9-11 WS-Security加密和签名先后顺序对消息结构的影响
在互联网应用软件开发中，要实现WS-Security安全机制对开发者来
说已经比较简单，很多Web Service开发组件也集成了此安全功能，开发
者只需要通过一系列的配置即可完成安全功能的使用，比如Apache
CXF集成了对WS-Security的支持、Spring框架集成了对WS-Security的支
持以及完成功能封装的组件如Apache 
WSS4J等，感兴趣的读者可以自
己去深入研究。
另外，在API网关或企业服务总线类产品中，通常也会集成多种消
息加密与签名的功能，可用于保护消息的安全。其原理如图9-12所示。
●图9-12 消息加密和签名原理示意图
9.3 常见的消息保护漏洞
上一节介绍了消息保护的相关技术，接下来将结合一些案例，为读
者讲解针对消息保护方面的攻击方式或漏洞。
9.3.1 JWT校验机制绕过漏洞
JWT作为API技术中消息传递的重要形式，使用范围尤其广泛，而
各个API服务提供方在OAuth协议的具体实现中，常常因为实现不规范
或格式校验不足导致针对JWT格式的攻击。CVE-2019-18848漏洞就是关
于JWE格式校验问题的漏洞。
在前文中已经提及，JWE格式由标头、密钥、初始向量、加密后
的数据、认证标签5个部分组成，按照格式要求，标头中会定义加密密
钥的生成算法和数据加密的算法，当加密时，会按照标头定义对明文进
行加密。如果通信过程中，使用JWE的任何一方，对JWE的格式校验存
在问题，则会存在JWE格式校验绕过，认为非JWE的数据是JWE格式，
导致敏感信息泄露的风险。
正常情况下，生成JWE的算法为点号（.）连接的字符串：
base64url(utf8(标头)).base64url(加密密钥).base64url(初始向
量).base64url(密文).base64url(认证标记)，如果格式校验出了问题，则
会导致标头的定义或约束无效，出现base64url(utf8(标头)).base64url(加