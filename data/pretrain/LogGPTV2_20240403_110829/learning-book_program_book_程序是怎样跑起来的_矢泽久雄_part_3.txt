5.内存中保存命令和数据的场所，通过地址来标记和指定。地址
由整数值表示。
6.计算机的构成元件中，根据程序的指令来进行数据运算，并控
制整个计算机的设备称作CPU。大家熟知的奔腾（Pentium）就
是CPU的一种。
---
## Page 17
1.1CPU的内部结构解折
本章
重点
首先让我们来看一下解释和运行程序的CPU。
CPU是英文Central Processing Unit（中央处理器）的
缩写，相当于计算机的大脑，它的内部由数百万至数亿个晶体管构成，
这些都是大家所熟知的。不过，对CPU的了解如果只限于此的话，对
编程是没有任何帮助的。程序员还需要理解CPU是如何运行的，特别
是要弄清楚负责保存指令和数据的寄存器的机制。了解了寄存器，也
就自然而然地理解了程序的运行机制。可能有很多读者会认为CPU的
运行机制比较难，其实它非常简单。所以，不妨放松心情，跟随笔者
一起往下阅读吧。
1.1
CPU的内部结构解析
图1-1展示了程序运行的一般流程。可以说了解程序的运行流程是
掌握程序运行机制的基础和前提。详细内容会在接下来的章节中逐渐
展开，这里主要是希望大家先有个大致印象。在这一流程中，CPU所
负责的就是解释和运行最终转换成机器语言的程序内容。
CPU和内存是由许多品体管组成的电子部件，通常称为IC
（IntegratedCircuit，集成电路）。从功能方面来看，如图1-2所示，CPU
的内部由寄存器、控制器、运算器和时钟四个部分构成，各部分之间
由电流信号相互连通。寄存器可用来暂存指令、数据等处理对象，可
①CPU是用来表示计算机内部元件功能的术语。另一方面，奔腾等半导体芯
片，通常称为微处理器。不过，由于大部分计算机通常只有一个微处理器
来承担CPU的功能，所以本章不对此进行区分，统一使用CPU这一称呼。
CPU由具有ON/OFF开关功能的晶体管构成。另外，有的CPU在一个集
成电路中集成了两个CPU芯片，我们称之为双核（dualcore）CPU。
---
## Page 18
第1章对程序员来说CPU是什么）
以将其看作是内存的一种。根据种类的不同，一个CPU内部会有
20~100个寄存器。控制器负责把内存上的指令、数据等读人寄存器，
并根据指令的执行结果来控制整个计算机。运算器负责运算从内存读
入寄存器的数据。时钟负责发出CPU开始计时的时钟信号。不过，也
有些计算机的时钟位于CPU的外部。
①程序员用C语言等高级语言编写程序
int a;
a =1+2:
printf(*%d”, a);
②将程序编译后转换成机器语言的EXE文件
0100101000010111
0011010010100010
0010100100001100
③程序运行时，在内存中生成EXE文件的副本
内存
↑
④CPU解释并执行程序内容
CPU
EEEEEEE
图1-1程序运行流程示例
①时钟信号英文叫作clock puzzle。Pentium2GHz表示时钟信号的频率为
2GHz（1GHz=10亿次/秒）。也就是说，时钟信号的频率越高，CPU的
运行速度越快。
---
## Page 19
1.1CPU的内都结构解析
接下来简单地解释一下内存。通常所说的内存指的是计算机的主
存储器（mainmemory），简称主存。主存通过控制芯片等与CPU相连，
主要负责存储指令和数据。主存由可读写的元素构成，每个字节（1字
节=8位）都带有一个地址编号。CPU可以通过该地址读取主存中的
指令和数据，当然也可以写入数据。但有一点需要注意，主存中存储
的指令和数据会随着计算机的关机面自动清除。
CPU
控制器
寄存器1
运算器
寄存据2
时钟
寄存器n
图1-2CPU的四个构成部分
了解了CPU的构造后，大家对程序的运行机制的理解是不是也加
深了一些？程序启动后，根据时钟信号，控制器会从内存中读取指令
和数据。通过对这些指令加以解释和运行，运算器就会对数据进行运
①主存位于计算机机体内部，是负责存储程序、数据等的装置。主存通常使
用DRAM（Dynamic RandomAccess Memory，动态随机存取存储器）芯片。
DRAM可以对任何地垃进行数据的读写操作，但需要保持稳定的电源供给
并时常刷新（确保是最新数据），关机后内容将自动清除。关于内存IC，第
4章有详细介绍。
更多资料请关注裁的新浪薄客http：//blog
---
## Page 20
第1章对程序员来说CPU是什么
算，控制器根据该运算结果来控制计算机。看到“控制”一词时，大家
可能会将事情想象得过于复杂，其实所谓的控制就是指数据运算以外
的处理（主要是数据输入输出的时机控制）。比如内存和磁盘等媒介的
输人输出、键盘和鼠标的输入、显示器和打印机的输出等，这些都是
控制的内容。
1.2CPU是寄存器的集合体
CPU的四个构成部分中，程序员只需要了解寄存器即可，其余三
个都不用太过关注。那么，为什么必须要了解寄存器呢？这是因为程
序是把寄存器作为对象来描述的。
首先我们来看一下代码清单1-1。这是用汇编语言（assembly）编
写的程序的一部分。汇编语言采用助记符（memonic）来编写程序，每
助记符通常为指令功能的英语单词的简写。例如，mov和add分别是
数据的存储（move）和相加（addition）的简写。汇编语言和机器语言
基本上是一一对应的。这一点和C语言、Java语言等高级编程语言有
很大不同，这也是我们使用汇编语言来说明CPU运行的原因。通常我
们将汇编语言编写的程序转化成机器语言的过程称为汇编；反之，机器
①把汇编语言转化成机器语言的程序称为汇编器（assembler）有时汇编语言
也称为汇编。详情可参阅第10章。
②机器语言是指CPU能直接解释和执行的语言。
③高级编程语言是指能够使用类似于人类语言（主要是英语）的语法来记述
的编程语言的总称。BASIC、C、C++、Java、Pascal、FORTRAN、COBOL
等语言都是高级端程语言。使用高组编程语言编写的程序，经过编译转换
成机器语言后才能适行。与高级编程语言相对。机器语言和汇编语言称为
低级编程语言
---
## Page 21
1.2CPU是寄存器的集合体
语言程序转化成汇编语言程序的过程则称为反汇编。
代码清单1-1汇编语言编写的程序示例
movesx, dvord ptr [ehp-8]
把数值从内存复制到eax
ppe
e3x, dword ptr [ebp-0ch]
a的数值和内存的数值检加
dvord ptr [ebg-4],
xa的最值[上一步的相加结果）存倍在内存
通过阅读汇编语言编写的代码，能够了解转化成机器语言的程序
的运行情况。从代码清单1-1的汇编语言程序示例中也可以看出，机器
语言级别的程序是通过寄存器来处理的。也就是说，在程序员看来
“CPU是寄存器的集合体”。至于控制器、运算器和时钟，程序员只需
要知道CPU中还有这几部分就足够了。
代码清单1-1中，eax和ebp表示的都是寄存器。通过阅读刚才的
示例代码，想必大家对程序使用寄存器来实现数据的存储和加法运算
这一情况应该有所了解了。汇编语言是80386以上的CPU所使用的语
言。cax和ebp是CPU内部的寄存器的名称。内存的存储场所通过地
址编号来区分，面寄存器的种类则通过名字来区分。
上文可能有些难以理解，不过不用担心，因为我们并不要求大家
必须掌握CPU的所有寄存器种类和汇编语言，大家只需对CPU是怎么
处理程序的有一个大致印象即可。也就是说，使用高级语言编写的程
序会在编译后转化成机器语言，然后再通过CPU内部的寄存器来处
理。例如，a=1+2这样的高级语言的代码程序在转化成机器语言后，
就是利用寄存器来进行相加运算和存储处理的。
①80386是美国英特尔公司开发的微处理器的产品名。“80386以上”是措
80386、80486、奔腾等微处理器。
②编译是指特使用高级编程语言编写的程序转换为机器语言的过程，其中，
用于转换的程序被称为编译器（compiler）。
更多资料请关注我的新浪博客http：//blog
---
## Page 22
第1章对程序员来说CPU是什么
不同类型的CPU，其内部寄存器的数量、种类以及寄存器存储的
数值范围都是不同的。不过，根据功能的不同，我们可以将寄存器大
致划分为八类，如表1-1所示。可以看出，寄存器中存储的内容既可以
是指令也可以是数据。其中，数据分为“用于运算的数值”和“表示内
存地址的数值”两种。数据种类不同，存储该数值的寄存器也不同。
CPU中每个寄存器的功能都是不同的。用于运算的数值放在累加寄存
器中存储，表示内存地址的数值则放在基址寄存器和变址寄存器中
存储。代码清单1-1的程序中用到的eax和ebp分别是累加寄存器
和基址寄存器。
表1-1寄存器的主要种类和功能
种类
功能
累加寄存器（accumulatorregister）
存储执行运算的数据和运算后的数据
标志寄存器（flag register）
存储运算处理后的CPU的状态
程序计数器（programcounter]
存储下一条指令所在内存的地址
基址寄存器（baseregister）
存储数据内存的起始地址
变址寄存器（indexregister]
存储基址寄存器的相对地址
存储任意数据
指令寄存器（instructionregister）
存储指令。CPU内邮使用，程序员无法通
过程序对该寄存器进行读写操作
栈寄存器（stackregister）
存储栈区城的起始地址
对程序员来说，CPU是什么呢？如图1-3所示，CPU是具有各种
功能的寄存器的集合体。其中，程序计数器、累加寄存器、标志寄存
器、指令寄存器和栈寄存器都只有一个，其他的寄存器一般有多个。
程序计数器和标志寄存器比较特殊，这一点在后面的章节中会详细说
明。另外，存储指令的指令寄存器等寄存器，由于不需要程序员做多
关注，因此图1-3中没有提到。
---
## Page 23
1.3决定程序流程的程序计数器
程序计数器
标志寄存器
累加寄存器
基址寄存路
安址寄存器
通用寄存器
基址寄存器、变址寄存器、通用寄存器都不止一个
图1-3程序员眼中的CPU（CPU是寄存器的集合体）
1.3决定程序流程的程序计数器
只有1行的有用程序是很少见的，机器语言的程序也是如此。在
对CPU有了一个大体印象后，接下来我们看一下程序是如何按照流程
来运行的。
图14是程序起动时内存内容的模型。用户发出启动程序的指示
后，Windows等操作系统会把硬盘中保存的程序复制到内存中。示例
中的程序实现的是将123和456两个数值相加，并将结果输出到显示
器上。正如前文所介绍的那样，存储指令和数据的内存，是通过地址
来划分的。由于使用机器语言难以清晰地表明各地址存储的内容，因
此这里我们对各地址的存储内容添加了注释。实际上，一个命令和数
据通常被存储在多个地址上，但为了便于说明，图1-4中把指令、数据
分配到了一个地址中。
地址0100是程序运行的开始位置。Windows等操作系统把程序从
硬盘复制到内存后，会将程序计数器（CPU寄存器的一种）设定为
①操作系统（operating sysmem）是指管理和控制计算机硬件与软件资源的计算
机程序。关于操作系统的功能，第9章有详细说明。
更多资料请关注裁的新浪薄客http：//blog
---
## Page 24
第1章对程序员来说CPU是什么
0100，然后程序便开始运行。CPU每执行一个指令，程序计数器的值
就会自动加1。例如，CPU执行0100地址的指令后，程序计数器的值
就变成了0101（当执行的指令占据多个内存地址时，增加与指令长度
相应的数值）。然后，CPU的控制器就会参照程序计数器的数值，从内
存中读取命令并执行。也就是说，程序计数器决定着程序的流程。
数值的变化
程序计数器
地址
内存中的内容
0100
0100指令：将0105地址的数值保存在累加寄存器中
0101
0101指令：0106地址的数值保存在通用寄存器中
0102
0102指令：特累加客存器的值和通用寄存器的值相加
0103
0103指令：将累加寄存器的值显示在显示器上
0104
0104指令：结束程序（返回操作系统）
0105数据：123
0106数据：456
图1-4内存中配置的程序示例（显示相加的结果）
1.4
条件分支和循环机制
程序的流程分为顺序执行、条件分支和循环三种。顺序执行是指
按照地址内容的顺序执行指令。条件分支是指根据条件执行任意地址
的指令。循环是指重复执行同一地址的指令。顺序执行的情况比较简
单，每执行一个指令程序计数器的值就自动加1。但若程序中存在条件
分支和循环，机器语言的指令就可以将程序计数器的值设定为任意地
址（不是+1）。这样一来，程序便可以返回到上一个地址来重复执行同
一个指令，或者跳转到任意地址。接下来，我们就以条件分支为例，
来具体说明循环时程序计数器的数值设定机制也是一样的。