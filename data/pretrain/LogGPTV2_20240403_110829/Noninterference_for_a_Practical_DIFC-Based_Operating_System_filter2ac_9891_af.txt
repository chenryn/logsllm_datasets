### VII. 相关工作

信息流控制（IFC）在操作系统层面的应用可以追溯到20世纪70年代和80年代的集中式军事系统 [30, 15, 31]。90年代，IX [11] 和 SELinux [32] 等系统将信息流理念与类Unix操作系统进行了整合。Denning 首次指出动态调整的安全标签可能会泄露数据 [12]，并建议使用静态检查，这后来发展成为类型分析 [33]。去中心化的解密和认可机制证明是一种关键的放松策略，使IFC在基于语言的系统中变得实用 [4]，并在Asbestos [1]、HiStar [2] 和 Flume [3] 系统中重新激发了这一概念在操作系统和Web服务环境中的应用。HiStar 引入了“自我污染”的概念，解决了第三节中描述的广泛隐蔽通道问题。Flume 后来采用了类似的策略，但采用了一种简化的标签系统。

污点跟踪是另一种用于追踪通过任意语言编写的遗留软件中的信息流的技术 [34, 35]。这些系统以重写后的二进制形式运行目标应用程序，无需应用程序的合作或识别，因此必须推断标签的变化。因此，污点跟踪系统容易受到第三节中描述的隐蔽通道攻击，并且无法保证非干扰性。

Goguen 和 Meseguer 引入了安全协议中的非干扰性概念 [17]，而 Volpano 等人首次展示了类型系统可以证明地保持这种非干扰性 [36]。最近，Zheng 和 Myers [37] 以及 Tse 和 Zdancewic [38] 证明了具有运行时原则的静态类型系统仍然可以遵守非干扰性。相对于 Flume，信息流在更细粒度上进行监控。另一方面，Flume 模型为各种用户进程 Ui 的行为提供了更大的灵活性：它限制这些进程只能访问一个通信通道，但在其他方面它们可以任意行动，无需类型检查。

本文提供的证明是手动完成的。在未来的工作中，我们希望研究将用于证明的 Flume 模型塑造成适合自动化分析的形式。Lowe 首次使用自动化检查器打破了之前被认为安全的协议 [39]。Ryan 和 Schneider 也描述了如何使用 FDR 自动化检查器验证标准安全协议 [40]。

### VIII. 结论

本文提出了第一个基于DIFC的操作系统的正式安全论证。它使用CSP形式化方法对Flume进行了建模，并证明该模型满足非干扰性——这是一种端到端的属性，即使面对微妙的隐蔽通道攻击也能保护机密性和完整性。模型和证明并没有因细化悖论而显著削弱，因为证明对模型的许多细化都有效。未来的工作需要进一步研究基于时间的隐蔽和侧信道，并实现证明技术及其实施的自动化。

### 致谢

Maxwell Krohn 在MIT CSAIL得到了NSF CyberTrust/DARPA资助 CNS-0430425、Nokia 以及 NSF 研究生奖学金的支持。本研究部分得到了卡内基梅隆大学CyLab的支持，资助来自陆军研究办公室的DAAD19-02-1-0389项目。Eran Tromer 得到了 NSF CyberTrust 资助 CNS-0808907 和 AFRL 资助 FA8750-08-1-0088 的支持。本文的观点和结论仅代表作者个人意见，不代表ARO、CMU、AFRL 或美国政府及其任何机构的官方政策或背书。本文的大部分内容出现在 Maxwell Krohn 的博士论文中，指导教师为 Frans Kaashoek、Robert Morris 和 Eddie Kohler，审阅人为 Butler Lampson。感谢他们所有人的建议、仔细阅读和评论。感谢 Greg Morrisett、Andrew Myers、Nickolai Zeldovich、Alex Yip、Micah Brodsky、Adrian Perrig 和 Anupam Datta 的想法和指导。感谢匿名评审者的详细评论和建议。

### 参考文献

[此处省略具体参考文献列表]

### 附录 A: CSP 简介

通讯顺序过程（CSP）是一种过程代数，适用于将系统指定为一组有时同步事件的并行状态机。我们在这里简要回顾一下CSP，主要参考Hoare的著作 [16]。

1. **CSP 进程**：最基本的CSP示例之一是Hoare的自动售货机：
   ```
   VMS = in25 → choc → VMS
   ```
   该自动售货机等待事件 `in25`，表示向机器投入一枚硬币。然后，它接受事件 `choc`，表示巧克力从机器中掉出。之后，它返回初始状态，通过递归调用自身。这里使用的基本操作符是前缀操作符。如果 `x` 是一个事件，`P` 是一个进程，则 `(x → P)` 表示一个进程首先执行事件 `x`，然后表现得像进程 `P`。对于进程 `P`，记号 `αP` 描述了 `P` 的“字母表”，即 `P` 愿意参与的所有事件的集合。例如，`αVMS = {in25, choc}`。

   对于任何CSP进程 `P`，我们可以讨论 `P` 可能接受的一系列事件。对于VMS示例，各种可能的事件序列包括：
   ```
   ()
   (in25)
   (in25, choc)
   (in25, choc, in25, choc, in25)
   ```

   对于两个事件序列 `tr` 和 `tr'`，定义 `tr (cid:4) tr'` 为其连接。下一个重要的操作符是“选择”，记为“|”。如果 `x` 和 `y` 是不同的事件，则：
   ```
   (x → P | y → Q)
   ```
   表示一个进程可以接受 `x` 并表现得像 `P`，或者接受 `y` 并表现得像 `Q`。例如，一个新的自动售货机可以接受一枚硬币并输出一块巧克力，或者接受一张纸币并输出一个冰淇淋甜筒：
   ```
   VMS2 = (bill → cone → VMS2 | in25 → choc → VMS2)
   ```
   CSP 提供了一个更通用的选择函数（用于简洁地选择多个输入），但Flume模型只需要简单选择。

   与此相关的操作符是内部（非确定性）选择，记为“`(cid:15)`”。在简单选择中，机器对其用户的事件做出精确反应。在非确定性选择中，从用户的角度来看，机器的行为是不可预测的，可能是由于机器的描述不完整，或者是因为机器从随机数生成器中选择。例如，找零机可能会以任意顺序返回硬币，具体取决于机器上次是如何维护的：
   ```
   CHNG = (in25 → (out10 → out10 → out5 → CHNG (cid:15) out10 → out5 → out10 → CHNG))
   ```
   即，机器接受一枚硬币，然后以两种顺序之一返回两枚一角硬币和一枚五分硬币。另一个标准操作符，“外部选择”记为“`(cid:5)`”，有不同的语义，但不在Flume模型中出现。

   CSP 提供了一些有用的预定义进程，如 `STOP`（不接受任何事件的进程）和 `SKIP`（表示成功终止后表现得像 `STOP` 的进程）。其他进程如 `DIV`、`RUN` 和 `CHAOS` 在文献中是标准的，但在此处不需要。

   下一类操作符与并行性有关。记号：
   ```
   P (cid:7) Q
   A
   ```
   表示 `P` 和 `Q` 并行运行，在 `A` 中的事件上同步。这意味着传入的事件流可以任意分配给 `P` 或 `Q`，假设这些事件不在 `A` 中。然而，对于 `A` 中的事件，`P` 和 `Q` 必须同步接受它们。例如，考虑自动售货机和找零机并行运行，在 `in25` 事件上同步：
   ```
   FREELUNCH = VMS (cid:7) CHNG {in25}
   ```
   这个新进程的可能事件序列是两个组件机的各种交错事件序列，这些序列在 `in25` 事件上一致。例如：
   ```
   (in25, choc, out10, out10, out5, ...)
   (in25, out10, choc, out10, out5, ...)
   (in25, out10, out10, choc, out5, ...)
   (in25, choc, out10, out5, out10, ...)
   (in25, out10, out5, out10, choc, ...)
   ```
   是 `FREELUNCH` 的可能执行路径。

   并行组合的另一种变体是任意交错，记为 `P (cid:3) Q`。在交错中，`P` 和 `Q` 永不同步，彼此独立运行。`P (cid:3) Q` 因此等同于 `P (cid:7){} Q`，意味着 `P` 和 `Q` 并行运行并在空集上同步。

   并行运行的进程可以通过通道相互通信。一个典型的通道 `c` 可以携带各种值 `v`，记为 `c.v`。这表示发送进程接受事件 `c!v`，而接收进程接受事件 `c?x`（其中 `x` 尚未绑定）并将 `x` 设置为 `v`。只有当发送和接收进程同时处于适当状态时，才能在通道上进行通信。如果一个进程处于适当状态而另一个不是，就绪的进程会等待其伙伴准备好。稍微偏离 Hoare 的语义，这里的通道是双向的：消息可以在通道上独立地双向传输。Flume 模型大量使用通道。

   CSP 的下一个重要特性是隐藏或遮蔽。对于进程 `P` 和符号集 `C`，进程 `P \ C` 是 `P` 中隐藏或遮蔽了 `C` 中的符号。`C` 中的事件变为内部事件。

   并行性在 Hoare 最初的CSP公式和更现代的版本之间有所不同。