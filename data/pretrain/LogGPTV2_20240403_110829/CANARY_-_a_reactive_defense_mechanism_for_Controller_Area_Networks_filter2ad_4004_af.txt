real-world in-vehicle trace that was ported to our laboratory
setup which proves the feasibility of practical use inside ve-
hicles. While there are many works that focus on detecting
intrusions on the CAN bus, there is still much work to be
done in designing systems that can effectively prevent such
intrusions. We hope that our work paves the way towards
developing such systems.
Acknowledgments
We are grateful to the anonymous referees for their com-
ments which helped us to improve our work. This work was
supported by a grant of Ministry of Research and Inovation,
CNCS-UEFISCDI, project number PN-III-P1-1.1-TE-2016-
1317, within PNCDI III (2018-2020). http://www.aut.upt.
ro/~bgroza/projects/presence/.
USENIX Association
30th USENIX Security Symposium    4273
References
[1] Emad Aliwa, Omer Rana, Charith Perera, and Peter Bur-
nap. Cyberattacks and countermeasures for in-vehicle
networks. arXiv preprint arXiv:2004.10781, 2020.
[2] AUTOSAR. Speciﬁcation of Secure Onboard Commu-
nication, 4.3.1 edition, 2017.
[3] Burton H Bloom. Space/time trade-offs in hash coding
with allowable errors. Communications of the ACM,
13(7):422–426, 1970.
[4] Mehmet Bozdal, Mohammad Samie, Sohaib Aslam, and
Ian Jennions. Evaluation of can bus security challenges.
Sensors, 20(8):2364, 2020.
[5] Stephen Checkoway, Damon McCoy, Brian Kantor,
Danny Anderson, Hovav Shacham, Stefan Savage, Karl
Koscher, Alexei Czeskis, Franziska Roesner, Tadayoshi
Kohno, et al. Comprehensive experimental analyses of
automotive attack surfaces. In USENIX Security Sympo-
sium. San Francisco, 2011.
[6] Kyong-Tak Cho and Kang G Shin. Error handling of in-
vehicle networks makes them vulnerable. In Proc. ACM
SIGSAC Conference on Computer and Communications
Security, pages 1044–1055. ACM, 2016.
[7] Kyong-Tak Cho and Kang G Shin. Fingerprinting elec-
tronic control units for vehicle intrusion detection. In
25th USENIX Security Symposium, 2016.
[8] Wonsuk Choi, Kyungho Joo, Hyo Jin Jo, Moon Chan
Park, and Dong Hoon Lee. Voltageids: Low-level com-
munication characteristics for automotive intrusion de-
IEEE Transactions on Information
tection system.
Forensics and Security, 2018.
[9] Tsvika Dagan and Avishai Wool. Parrot, a software-only
anti-spooﬁng defense system for the can bus. ESCAR
EUROPE, page 34, 2016.
[10] Stabili Dario, Marchetti Mirco, and Colajanni Michele.
Detecting attacks to internal vehicle networks through
hamming distance. In IEEE Intl. Annual Conference-
Infrastructures for Energy and ICT (AEIT), 2017.
[11] H. Giannopoulos, A. M. Wyglinski, and J. Chapman. Se-
curing vehicular controller area networks: An approach
to active bus-level countermeasures. IEEE Vehicular
Technology Magazine, 12(4):60–68, Dec 2017.
[13] Ulrike Hoff and Dan Scott. Challenges for wiring har-
ness development. CAN Newsletter, pages 14–19, 2020.
[14] Tobias Hoppe, Stefan Kiltz, and Jana Dittmann. Security
threats to automotive can networks–practical examples
and selected short-term countermeasures. In Interna-
tional Conference on Computer Safety, Reliability, and
Security, pages 235–248. Springer, 2008.
[15] Abdulmalik Humayed and Bo Luo. Using id-hopping
In 1st Inter-
to defend against targeted dos on can.
national Workshop on Safe Control of Connected and
Autonomous Vehicles, page 19–26. ACM, 2017.
[16] R. Kurachi, Y. Matsubara, H. Takada, N. Adachi,
Y. Miyashita, and S. Horihata. CaCAN - centralized
authentication system in CAN (controller area network).
In 14th Intl. Conf. on Embedded Security in Cars (ES-
CAR), 2014.
[17] Hyunsung Lee, Seong Hoon Jeong, and Huy Kang Kim.
Otids: A novel intrusion detection system for in-vehicle
network by using remote frame. In Procedings of PST
(Privacy, Security and Trust), 2017.
[18] Mirco Marchetti, Dario Stabili, Alessandro Guido, and
Michele Colajanni. Evaluation of anomaly detection for
in-vehicle networks through information-theoretic algo-
rithms. In Research and Technologies for Society and
Industry Leveraging a better tomorrow (RTSI), pages
1–6. IEEE, 2016.
[19] Tsutomu Matsumoto, Masato Hata, Masato Tanabe, Kat-
sunari Yoshioka, and Kazuomi Oishi. A method of
preventing unauthorized data transmission in controller
area network. In Vehicular Technology Conference (VTC
Spring), 2012 IEEE 75th, pages 1–5. IEEE, 2012.
[20] Charlie Miller and Chris Valasek. A survey of remote
automotive attack surfaces. Black Hat USA, 2014.
[21] Pal-Stefan Murvay and Bogdan Groza. Dos attacks on
controller area networks by fault injections from the soft-
ware layer. In Proceedings of the 12th International Con-
ference on Availability, Reliability and Security, ARES
’17, pages 71:1–71:10. ACM, 2017.
[22] Michael Müter and Naim Asaj. Entropy-based anomaly
detection for in-vehicle networks. In Intelligent Vehicles
Symposium (IV), pages 1110–1115. IEEE, 2011.
[12] B. Groza and P. Murvay. Efﬁcient intrusion detection
with bloom ﬁltering in controller area networks. IEEE
Transactions on Information Forensics and Security,
14(4):1037–1051, April 2019.
[23] R. Obermaisser and R. Kammerer. A router for im-
proved fault isolation, scalability and diagnosis in can.
In 2010 8th IEEE International Conference on Indus-
trial Informatics, pages 123–129, July 2010.
4274    30th USENIX Security Symposium
USENIX Association
[24] Andrea Palanca, Eric Evenchick, Federico Maggi, and
Stefano Zanero. A stealth, selective, link-layer denial-
of-service attack against automotive networks. In De-
tection of Intrusions and Malware, and Vulnerability
Assessment, pages 185–206. Springer, 2017.
[25] H. Sivencrona, T. Olsson, R. Johansson, and J. Torin.
Redcan/sup tm/: simulations of two fault recovery algo-
rithms for can. In 10th IEEE Paciﬁc Rim Intl. Sympo-
sium on Dependable Computing, pages 302–311, 2004.
[26] Daisuke Souma, Akira Mori, Hideki Yamamoto, and
Yoichi Hata. Counter attacks for bus-off attacks. In In-
ternational Conference on Computer Safety, Reliability,
and Security, pages 319–330. Springer, 2018.
[27] Sasu Tarkoma, Christian Esteve Rothenberg, and Eemil
Lagerspetz. Theory and practice of bloom ﬁlters for
distributed systems. IEEE Communications Surveys &
Tutorials, 14(1):131–155, 2011.
[28] Adrian Taylor, Nathalie Japkowicz, and Sylvain Leblanc.
Frequency-based anomaly detection for the automotive
can bus. In World Congress on Industrial Control Sys-
tems Security (WCICSS), pages 45–49. IEEE, 2015.
[29] Haohuang Wen, Qi Alfred Chen, and Zhiqiang Lin.
Plug-N-Pwned: Comprehensive vulnerability analysis
of OBD-II dongles as a new over-the-air attack surface
in automotive IoT. 2020.
[30] Marko Wolf, André Weimerskirch, and Christof Paar.
Security in automotive bus systems. In Workshop on
Embedded Security in Cars. Bochum, 2004.
[31] W. Wu, R. Kurachi, G. Zeng, Y. Matsubara, H. Takada,
R. Li, and K. Li. IDH-CAN: A Hardware-Based ID
Hopping CAN Mechanism With Enhanced Security
for Automotive Real-Time Applications. IEEE Access,
6:54607–54623, 2018.
[32] Leiming Zhang, Yong Lei, and Qing Chang. Intermit-
tent connection fault diagnosis for can using data link
IEEE Transactions on Industrial
layer information.
Electronics, 64(3):2286–2295, 2016.
[33] Leiming Zhang, Fan Yang, and Yong Lei. Tree-based in-
termittent connection fault diagnosis for controller area
network. IEEE Transactions on Vehicular Technology,
68(9):9151–9161, 2019.
Figure 21: Oscilloscope plot of incoming frames during relay
action
Appendix A - Testing relay impact on legitimate
bus trafﬁc
To get a baseline on performance, we ﬁrst consider testing the
relays and ﬁltering mechanism in the absence of the adversary,
i.e., in case of an adversary-free bus. Table 3 provides a sum-
mary of the frame loss due the action of relays with or without
ﬁltering in terms of: left transmitted count (LTC), left failed
count (LFC), right transmission count (RTC) and right failed
count (RFC). There is a slight increase of 1%-2% on the frame
loss from the right side which can be explainable by possible
differences in the relay blocks and slight asymmetries in the
network trafﬁc. Frame loss is not due to the relay actions
but because of the buffering, i.e., the Bus Guardian does not
manage to send frames as quickly as they arrive from one
side to another. We solve this by proper buffering of incoming
frames. Surprisingly, a 1 frame buffer reduces the frame loss
to under 1%. For the case of a DoS attack at 1ms, as show in
our experiments, a 32 frame buffer is needed. A buffer of this
size is also sufﬁcient for the adversary free bus as it reduces
the number of lost frames to 0. The frame loss when using
the Bloom ﬁlters is almost identical to the case in which no
ﬁltering is used, proving that ﬁlters don’t affect performance.
Triggering the relays will cause a brief disturbance on the
bus and frames transmitted during this short period will be
affected. Figure 21 depicts the effect of switching the relays
on the bus. According to the data-sheet, the relays that we
use have an operation time of 5ms, but as the plots show the
actual time during which the bus is unavailable is much less,
i.e., around 1.5ms. Conveniently, frames that are destroyed
during relay switching are automatically retransmitted thanks
to the clever design of CAN. Concretely, the sender node will
get a transmission error and then automatically re-attempt to
send the frame on the bus until it succeeds. The error counters
are kept within acceptable margins as discussed next.
Impact on REC and TEC counters. Figure 22 shows the
evolution of REC and TEC counters during 100ms and 1s
relay triggering rate on one of the channels (the other chan-
nel looks identical). In both cases, the counters increase to
at most 50 which keeps them in the Error Active state, i.e.,
the normal state of CAN nodes. There is still much room
ahead until the Error Passive state (in which the nodes are
still able to communicate but will not signal errors) and the
counters are very far from the Bus off state. Nonetheless, the
USENIX Association
30th USENIX Security Symposium    4275
Buffering
None
1 frame
32 frames
Retransmission
Filter size
Table 3: Frame loss at various relay trigger rates and buffer sizes without adversarial activity
RFC
8522
246
0
RTC
106356
114291
114559
LTC
113673
120333
120687
Adversary
Relay Rate (s)
None
Single side
Single side
LFC
6856
344
0
None
1024
1024
none
none
none
0.1
0.1
0.1
LF% RF%
8.0%
6.0%
0.22%
0.28%
0.0%
0.0%
counters quickly decrease on the next successful transmis-
sions/receptions so disturbances are short-lived and have little
effects on the ECUs. We have also tried to trigger the relays
at 10ms and the nodes still remained in the Error Active state
while counters rarely increased up to 80.
(i) 100ms
(ii) 1s
Figure 23: An existing in-vehicle CAN demonstration from
CANoe
to a real-world demonstration, this at least proves that the
attacks can be efﬁciently mitigated by CANARY within the
simulation.
Figure 22: Evolution of REC and TEC counters with relays
triggered at 100ms (i) and 1s (ii)
Appendix B - Further validations with a CANoe
car simulation
The ﬁrst attacks on the vehicular CAN buses were demon-
strated by Hoppe et al. [14] as early as 2008 by using a CANoe
simulation linked to a few car components on a bench. As
an additional validation for the proposed solution, we use an
existing car simulation from CANoe and show that (unsur-
prisingly) a DoS attack will completely halt all car functions
while CANARY is able to fully alleviate the attack.
Figure 23 shows the default CAN demo from CANoe. Five
IDs are broadcast related to car ignition, engine, ABS and
gearbox having cycles of 20ms (for the ignition) and 50ms
for the rest. Figure 24 (i) shows the plots with the recorded
signals from the car in case of normal trafﬁc. Then we mount
a full DoS on the bus and in Figure 24 (ii) we show the
effects: the entire bus is locked and incoming signals halt,
i.e., the current value remains the last of the received values
(which is incorrect). Then in Figure 24 (iii) with 50ms load-
balancing the signals are almost identical to the adversary free
bus. While there is still a long road ahead from this simulator
(i) normal trafﬁc
(ii) full DoS
(iii) load balancing 50ms
Figure 24: CAN bus signals as interpreted by the CANoe car
simulator in case of: (i) normal trafﬁc, (ii) full DoS and (iii)
load-balancing at 50ms
4276    30th USENIX Security Symposium
USENIX Association