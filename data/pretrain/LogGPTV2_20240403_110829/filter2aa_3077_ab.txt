### Attacker's Search for Repositories and Files

An attacker may seek repositories associated with a specific application or system. For instance, searching for the term "locat" can reveal repositories containing this keyword in their name.

#### Searching for Repositories via Web Interface
Another method for an attacker to search for repositories is by using the Search REST API. Here is an example of a `curl` command to perform such a search:

```bash
curl -i -s -k -X GET -H 'Content-Type: application/json' -H 'Authorization: Token apiKey' 'https://gheHost/api/v3/search/repositories?q=searchTerm'
```

For more information, refer to the [GitHub documentation on searching repositories](https://docs.github.com/en/enterprise-server@3.3/rest/reference/search#search-repositories).

#### File Reconnaissance
Attackers may also be interested in files based on their names. For example, a file named "decrypt" might be of interest. In this case, we are searching for Jenkins CI configuration files with the search term "jenkinsfile in:file".

##### Searching for Files via Web Interface
Another option for an attacker to search for files is through the Search REST API. Here is an example `curl` command:

```bash
curl -i -s -k -X GET -H 'Content-Type: application/json' -H 'Authorization: Token apiToken' 'https://gheHost/api/v3/search/commits?q=searchTerm'
```

For more information, refer to the [GitHub documentation on searching commits](https://docs.github.com/en/enterprise-server@3.3/rest/reference/search#search-commits).

### Code Reconnaissance
A primary area of interest for attackers is searching for secrets within code, such as passwords or API keys. This can be done via the web interface or the Search REST API.

#### Searching Code via Web Interface
Code can be searched for a given term via the web interface.

#### Searching Code via Search REST API
Here is an example `curl` command to search for a term within code:

```bash
curl -i -s -k -X GET -H 'Content-Type: application/json' -H 'Authorization: Token apiToken' 'https://gheHost/api/v3/search/code?q=searchTerm'
```

For more information, refer to the [GitHub documentation on searching code](https://docs.github.com/en/enterprise-server@3.3/rest/reference/search#search-code).

### Logging of Reconnaissance
Search requests for files, repositories, and code within GitHub Enterprise are logged in the `haproxy.log` file (`/var/log/haproxy.log`). These logs should be forwarded to a Security Information and Event Management (SIEM) system for monitoring and alerting on anomalous activity.

Example command to view relevant log entries:

```bash
cat /var/log/haproxy.log | grep -i '/search\|/api/v3/search' | cut -d ' ' -f6,7,20-22 | grep -i http
```

### Repository Takeover
Using site admin access, an attacker can grant themselves write access to any repository within GitHub Enterprise. For example, if a compromised site admin user (e.g., `adumbledore`) does not have access to a repository, they can unlock it.

#### Unlocking a Repository
1. **Viewing Locked Repository**: Attempt to view a repository that the compromised site admin user does not have access to.
2. **Unlocking the Repository**: Use the "Unlock" button to unlock the repository for two hours by default.
3. **Adding Reason**: Provide a reason for unlocking the repository, which is logged along with the request.
4. **Accessing the Repository**: Once unlocked, the repository can be accessed and modified.

Audit log entries for these actions can be found under the `repo.staff_unlock` action.

### User Impersonation
If an attacker has administrative access to GitHub Enterprise, they can impersonate another user either via the web interface or by creating an impersonation token.

#### Impersonate User Login
1. **View User Information**: Access the user's information via the site admin console.
2. **Begin Impersonation**: Click the "Sign in to GitHub as @user" button and provide a reason.
3. **Logged In as Impersonated User**: The attacker will be logged in as the impersonated user.

Audit log entries for these actions can be found under the `staff.fake_login` action.

#### Impersonation Token
Another stealthier option is to create an impersonation token via the Enterprise Administration REST API. Here is an example `curl` command:

```bash
curl -i -s -k -X POST -H 'Content-Type: application/json' -H 'Authorization: Token apiToken' --data-binary '{"scopes":["repo","admin:org","admin:public_key","admin:org_hook","admin:gpg_key","admin:enterprise"]}' 'https://gheHost/api/v3/admin/users/userToImpersonate/authorizations'
```

For more information, refer to the [GitHub documentation on creating an impersonation OAuth token](https://docs.github.com/en/enterprise-server@3.3/rest/reference/enterprise-admin#create-an-impersonation-oauth-token).

### Promoting User to Site Admin
An attacker with site admin credentials can promote a regular user to the site admin role via the web interface or the Enterprise Administration REST API.

#### Promoting via Web Interface
1. **Add Owner**: Press the "Add owner" button.
2. **Confirm Promotion**: The user (e.g., `hpotter`) is now added as a site admin.

#### Promoting via REST API
Here is an example `curl` command to promote a user to site admin:

```bash
curl -i -s -k -X PUT -H 'Content-Type: application/json' -H 'Authorization: Token apiToken' 'https://gheHost/api/v3/users/userToPromote/site_admin'
```

For more information, refer to the [GitHub documentation on promoting a user to site admin](https://docs.github.com/en/enterprise-server@3.3/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator).

### Maintaining Persistent Access
An attacker can maintain persistent access to GitHub Enterprise by creating a personal access token, impersonation token, or adding a public SSH key.

#### Personal Access Token
1. **Create Token**: Go to the userâ€™s "Developer Settings" and press "Generate new token".
2. **Specify Details**: Enter the token name, expiration, and scopes.
3. **Copy Token**: Copy the token value displayed after creation.

Audit log entries for these actions can be found under the `oauth_access.create` and `oauth_authorization.create` actions.

#### Impersonation Token
If an attacker has site admin privileges, they can create an impersonation token for any user, as detailed in the "User Impersonation" section.

#### SSH Key
1. **Add SSH Key**: View and add SSH keys in the user's account settings.
2. **Create SSH Key via REST API**: Here is an example `curl` command to add a public SSH key:

```bash
curl -i -s -k -X POST -H 'Content-Type: application/json' -H 'Authorization: Token apiToken' --data-binary '{"key":"pubSSHKey"}' 'https://gheHost/api/v3/user/keys'
```

For more information, refer to the [GitHub documentation on creating a public SSH key](https://docs.github.com/en/enterprise-server@3.3/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user).

### Management Console Access
In addition to the site admin console, there is a management console accessible via a shared password at `https://gheHost/setup`.

#### Adding SSH Key to Management Console
1. **Add Public SSH Key**: Add the public SSH key to the management console.
2. **SSH Access**: Use the default username "admin" and port 122 to SSH into the management console.
3. **View Configuration**: Use the `ghe-config -l` command to view the GitHub Enterprise configuration.

Audit log entries for these actions can be found in the `unicorn.log` file (`/var/log/enterprise-manage/unicorn.log`).

### GitLab Enterprise
GitLab Enterprise is another popular Source Code Management (SCM) system. This section provides an overview of common terminology, the access model, and API capabilities, along with attack scenarios and detection methods.

#### Terminology
- **Projects**: Host code, track issues, and contain CI/CD pipelines.

#### Access Model
- **Roles**: Guest, Reporter, Developer, Maintainer, Owner.
- **Group Member Permissions**: Detailed tables available in the [GitLab documentation](https://docs.gitlab.com/ee/user/permissions.html#group-members-permissions).
- **CI/CD Pipeline and Job Permissions**: Available in the [GitLab documentation](https://docs.gitlab.com/ee/user/permissions.html#gitlab-cicd-permissions).

#### Access Token Scopes
- **Scopes**: `api`, `read_user`, `read_api`, `read_repository`, `write_repository`, `read_registry`, `write_registry`, `sudo`.

For more information, refer to the [GitLab documentation on personal access token scopes](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#personal-access-token-scopes).

#### API Capabilities
- **API Endpoints**: Comprehensive details available in the [GitLab API documentation](https://docs.gitlab.com/ee/api/).