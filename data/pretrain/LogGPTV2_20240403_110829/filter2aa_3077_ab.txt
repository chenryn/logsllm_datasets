An attacker may be looking for repositories that deal with a particular application or 
system. In this case, we are searching for “locat” to look for repositories with that 
search term in the name. 
X-Force Red | 3/2/2022 
23 
Searching for repositories via web interface 
Another option available to an attacker to search for a repository is via the Search REST 
API24 as shown with the below example curl command. 
curl -i -s -k -X $'GET' -H $'Content-Type: application/json' -H 
$'Authorization: Token apiKey' 
$'https://gheHost/api/v3/search/repositories?q=searchTerm' 
Search result for search repositories API 
File Reconnaissance 
24 https://docs.github.com/en/enterprise-server@3.3/rest/reference/search#search-repositories 
X-Force Red | 3/2/2022 
24 
There may also be certain files of interest to an attacker based on file name. For 
example, maybe a file with “decrypt” in the file name. In this example, we are searching 
for Jenkins CI configuration files with the search term “jenkinsfile in:file”. 
Searching for file via web interface 
Another option available to an attacker to search for a file is via the Search REST API25  
as shown with the below example curl command. 
curl -i -s -k -X $'GET' -H $'Content-Type: application/json' -H 
$'Authorization: Token apiToken' 
$'https://gheHost/api/v3/search/commits?q=searchTerm' 
Searching result for search commits API 
Code Reconnaissance 
A primary area of interest for an attacker is searching for secrets within code, such as 
passwords or API keys. Code can be searched for a given search term via the web 
interface as shown below. 
25 https://docs.github.com/en/enterprise-server@3.3/rest/reference/search#search-commits 
X-Force Red | 3/2/2022 
25 
Searching code via web interface 
Searching for secrets within code can also be accomplished via the Search REST API26  
as shown with the below example curl command. 
curl -i -s -k -X $'GET' -H $'Content-Type: application/json' -H 
$'Authorization: Token apiToken' 
$'https://gheHost/api/v3/search/code?q=searchTerm' 
Searching result for code search API 
26 https://docs.github.com/en/enterprise-server@3.3/rest/reference/search#search-code 
X-Force Red | 3/2/2022 
26 
Logging of Reconnaissance 
Search requests for files, repositories and code within GitHub Enterprise are logged in 
the haproxy log file (/var/log/haproxy.log) as shown below. These logs should be 
forwarded to a Security Information and Event Management (SIEM) system, where they 
can be ingested, and alerts built from them for anomalous activity. 
cat /var/log/haproxy.log | grep -i '/search\|/api/v3/search' | cut -d 
' ' -f6,7,20-22 | grep -i http 
Viewing reconnaissance results in haproxy log 
Repository Takeover 
Using site admin access, an attacker can give themselves write access to any repository 
within GitHub Enterprise. In the below example, we are attempting to view a repository 
that our compromised site admin user (adumbledore) does not have access to. 
Viewing locked repository 
X-Force Red | 3/2/2022 
27 
Using site admin access, you can choose to unlock the repository via the “Unlock” 
button shown below. This will unlock the repository for the user for two hours by 
default. 
Viewing screen to unlock repository 
You must provide a reason to unlock the repository, and this reason is logged along with 
the request. 
Adding reason to unlocking repository 
Now you can see we have successfully unlocked the repository, and it is unlocked for 
two hours for the adumbledore user account. 
X-Force Red | 3/2/2022 
28 
Showing repository has been unlocked 
Then the repository can be accessed, and code can be modified within that repository 
as shown below. 
Accessing repository after unlock 
There is an entry in the audit log for this, and it categorizes it as a “repo.staff_unlock” 
action. This can be searched via the query “action:repo.staff_unlock”. This can also be 
queried for in the audit logs on the GitHub Enterprise server in /var/log/github-
audit.log. 
X-Force Red | 3/2/2022 
29 
Showing audit log entry for unlocking repository 
User Impersonation 
There are a couple options an attacker has if they have administrative access to GitHub 
Enterprise and would like to impersonate another user. The first option is to 
impersonate a user login via the web interface, and the second option is to create an 
impersonation token.  
Impersonate User Login 
When viewing a user via the site admin console, there is an impersonation section at 
the bottom. You will click the “Sign in to GitHub as @user” button. 
X-Force Red | 3/2/2022 
30 
Viewing user information for hpotter 
Next, you need to provide a reason why you are wanting to perform an impersonation 
login as another user. The user who is being impersonated will receive an email 
notification as stated. 
X-Force Red | 3/2/2022 
31 
Beginning impersonation 
You will then be logged in as the user you are impersonating. In this case, we used the 
adumbledore user to impersonate the hpotter user. 
Showing impersonation 
There is an entry in the audit log for this impersonation activity, as it categorizes it as a 
“staff.fake_login” action. This can be searched via the query “action:staff.fake_login”. 
This can also be queried for in the audit logs on the GitHub Enterprise server in 
/var/log/github-audit.log. 
X-Force Red | 3/2/2022 
32 
Showing audit log entry for user impersonation 
Impersonation Token 
Another stealthier option for an attacker to impersonate a user is by creating an 
impersonation token. This can be performed via the Enterprise Administration REST 
API27 as shown with the below example curl command. 
curl -i -s -k -X $'POST' -H $'Content-Type: application/json' -H 
$'Authorization: Token apiToken' --data-binary 
$'{\"scopes\":[\"repo\",\"admin:org\",\"admin:public_key\",\"admin:org
27 https://docs.github.com/en/enterprise-server@3.3/rest/reference/enterprise-admin#create-an-impersonation-
oauth-token 
X-Force Red | 3/2/2022 
33 
_hook\",\"admin:gpg_key\",\"admin:enterprise\"]}' 
$'https://gheHost/api/v3/admin/users/userToImpersonate/authorizations' 
This will output the impersonation token to the console as shown below. 
Creating user impersonation token 
We can see the impersonation token listed via the site admin console. The user being 
impersonated will not be able to see this impersonation token. Only site admins will be 
able to see this impersonation token. 
X-Force Red | 3/2/2022 
34 
Listing hpotter impersonation token 
There is an entry in the audit log for this, as it categorizes it as a “oauth_access.create” 
action followed by a subsequent “oauth_authorization.create” action. This can be 
searched 
via 
the 
query 
“action:oauth_access.create 
OR 
action:oauth_authorization.create”. This can also be queried for in the audit logs on the 
GitHub Enterprise server in /var/log/github-audit.log. 
X-Force Red | 3/2/2022 
35 
Showing audit log entry for impersonation token creation: 
Promoting User to Site Admin 
An attacker who has site admin credentials (username/password or API key) can 
promote another regular user to the site admin role. One option to perform this is via 
the GitHub Enterprise web interface. Press the “Add owner” button as shown below. 
X-Force Red | 3/2/2022 
36 
Viewing administrators in Hogwarts organization 
The user who was added as a site admin in this case is the hpotter user as shown 
below. 
Showing hpotter user added to site admins 
Another option for an attacker to promote a user to site admin is via the Enterprise 
Administration REST API28 as shown with the below example curl command. If 
successful, you should receive an HTTP 204 status code. 
curl -i -s -k -X $'PUT' -H $'Content-Type: application/json' -H 
$'Authorization: Token apiToken' 
$'https://gheHost/api/v3/users/userToPromote/site_admin' 
There is an entry in the audit log for this, as it categorizes it as a 
“action:business.add_admin” action followed by a subsequent “action:user.promote” 
action. 
This 
can 
be 
searched 
via 
the 
query 
“action:user.promote 
OR 
28 https://docs.github.com/en/enterprise-server@3.3/rest/reference/enterprise-admin#promote-a-user-to-be-a-
site-administrator 
X-Force Red | 3/2/2022 
37 
action:business.add_admin”. You can see in the audit log that it clarifies whether the 
action was performed via the API. This can also be queried for in the audit logs on the 
GitHub Enterprise server in /var/log/github-audit.log. 
Audit log entry for user promotion 
Maintain Persistent Access 
An attacker has a few primary options in terms of maintaining persistent access to 
GitHub Enterprise. This can be performed either by creating a personal access token, 
impersonation token, or adding a public SSH key. 
Personal Access Token 
The first option is creating a personal access token. This can only be performed via the 
web interface and is not supported via the GitHub Enterprise REST API. This can be 
performed by first going to a user’s “Developer Settings” menu and pressing the 
“Generate new token” button.  
X-Force Red | 3/2/2022 
38 
Viewing developer settings of user 
The next page will allow you to specify the name of the token, expiration and scopes. 
Access tokens with no expiration date should be questioned. 
Creating personal access token 
X-Force Red | 3/2/2022 
39 
After the token has been created, it will display the value one time to the user to be 
copied. This will be the actual authentication token value used. 
Viewing created personal access token value 
We can now see our “persistence-token” listed in the user’s personal access token 
settings. 
Viewing all personal access tokens for hpotter user 
There is an entry in the audit log for this, as it categorizes it as a “oauth_access.create” 
action followed by a subsequent “oauth_authorization.create” action. This can be 
searched 
via 
the 
query 
“action:oauth_access.create 
OR 
action:oauth_authorization.create”. This can also be queried for in the audit logs on the 
GitHub Enterprise server in /var/log/github-audit.log. 
X-Force Red | 3/2/2022 
40 
Viewing audit log for personal access token creation 
Impersonation Token 
If an attacker has site admin privileges in GitHub Enterprise, they can create an 
impersonation token for any user they would like. This is a much stealthier option in 
terms of maintaining access to GitHub Enterprise. This process and details were 
previously covered in the “User Impersonation” section. 
SSH Key 
X-Force Red | 3/2/2022 
41 
Another option that an attacker has for maintaining persistent access to GitHub 
Enterprise is via an SSH key. You can view the available SSH keys and add SSH keys for 
a user in their account settings. 
Viewing SSH keys for hpotter 
You will need to add a title and the value of the public SSH key as shown below. 
Adding public ssh key for hpotter 
X-Force Red | 3/2/2022 
42 
As you can see, our public SSH key has been created for the hpotter user account. 
Viewing public SSH key added for hpotter 
An attacker can also create a public SSH key via the Users REST API29 as shown with 
the below example curl command. If successful, you should get an HTTP 201 status 
code. When performing this request via a personal access token, it requires the 
“write:public_key” permission in the scope of the personal access token. Additionally, 
this SSH key cannot exist for any other user. Users cannot share the same public SSH 
key. 
curl -i -s -k -X $'POST' -H $'Content-Type: application/json' -H 
$'Authorization: Token apiToken' --data-binary $'{"key":"pubSSHKey"}' 
$'https://gheHost/api/v3/user/keys' 
29 https://docs.github.com/en/enterprise-server@3.3/rest/reference/users#create-a-public-ssh-key-for-the-
authenticated-user 
X-Force Red | 3/2/2022 
43 
Retrieving details of SSH key added via REST API 
You can see the SSH key was added via the REST API for the hgranger user account as 
shown below. 
Viewing created public SSH key for hgranger 
The private SSH key associated with the public SSH key added can now be used to clone 
repositories within GitHub Enterprise. 
X-Force Red | 3/2/2022 
44 
Cloning repository via SSH key 
There is an entry in the audit log for this, as it categorizes it as a “public_key.create” 
action followed by a subsequent “public_key.verify” action. This can be searched via 
the query “action:public_key.create OR action:public_key.verify”. This can also be 
queried for in the audit logs on the GitHub Enterprise server in /var/log/github-
audit.log. 
Viewing audit log entries for public SSH keys created 
X-Force Red | 3/2/2022 
45 
Management Console Access 
In addition to the site admin console, there is also a management console within GitHub 
Enterprise. This console can be accessed via a single, shared password, and can be 
accessed via https://gheHost/setup. An example of the login page is shown below. 
Management console 
One aspect that could be of interest to an attacker is adding their SSH key, so that they 
can SSH to the management console. This can be performed as shown below. 
X-Force Red | 3/2/2022 
46 
Adding public SSH key 
For SSH access to the management console, the default username is “admin” and 
default SSH port is 122. Once an SSH key has been added to the management console, 
you can SSH to it as shown below. 
X-Force Red | 3/2/2022 
47 
Authenticating to management console via SSH 
Using SSH access to the management console, you can view the GitHub Enterprise 
config via the “ghe-config -l” command. An example command that can be used to list 
credentials is shown below. In this example, the GitHub Enterprise instance is setup to 
sync with Active Directory. Other credentials such as SMTP for example may be listed 
in this configuration file. For a full listing of commands available in the management 
console via SSH, see this resource30. 
ghe-config -l | grep -i 'password\|ldap\|user' 
30 https://docs.github.com/en/enterprise-server@3.0/admin/configuration/configuring-your-
enterprise/command-line-utilities 
X-Force Red | 3/2/2022 
48 
Searching configuration file for credentials 
The addition of the SSH key in the management console is not documented in the audit 
log. However, it is logged in the below management log file (/var/log/enterprise-
manage/unicorn.log). 
cat /var/log/enterprise-manage/unicorn.log | grep -i authorized-keys | 
grep -i post 
Searching for adding SSH keys via management console 
Another file of interest via SSH access to the GitHub Enterprise server is the secrets 
configuration file (/data/user/common/secrets.conf) as it will also contain multiple 
different types of credentials including private SSH keys and API keys for example. 
X-Force Red | 3/2/2022 
49 
GitLab Enterprise 
GitLab Enterprise is another popular SCM system used by organizations. In this section, 
there will be an overview of common terminology, the access model and API 
capabilities of GitLab Enterprise. Additionally, attack scenarios against GitLab 
Enterprise will be shown, along with how these attacks can be detected in system logs. 
BACKGROUND 
Terminology 
One of the key terms that is used frequently within GitLab Enterprise is “projects”. 
Projects can host code, track issues and can contain CI/CD pipelines. A full listing of 
key terms related to GitLab Enterprise can be found at this resource31.  
Access Model 
Access Levels 
There are five roles that are available for a user in terms of project permissions listed 
below. A detailed table that includes every action that each project permission role 
allows is available at this resource32.  
• Guest 
• Reporter 
• Developer 
• Maintainer 
• Owner 
For each of the five roles, there are several group member permissions available. A 
detailed table that includes group member actions that each role allows is available at 
this resource33. One thing to note is that by default, users can change their usernames 
and can create groups.  
31 https://docs.gitlab.com/ee/user/index.html 
32 https://docs.gitlab.com/ee/user/permissions.html#project-members-permissions 
33 https://docs.gitlab.com/ee/user/permissions.html#group-members-permissions 
X-Force Red | 3/2/2022 
50 
Each role also has several CI/CD pipeline permissions34 available and CI/CD job 
permissions35. 
Access Token Scopes 
There are a total of eight personal access token scopes that are available in GitLab 
Enterprise. A listing of the different scopes and descriptions are below from this 
resource36. 
Scope 
Description 
api 
Read-write for the complete API, including all groups and projects, 
the Container Registry, and the Package Registry. 
read_user 
Read-only for endpoints under /users. Essentially, access to any of 
the GET requests in the Users API. 
read_api 
Read-only for the complete API, including all groups and projects, 
the Container Registry, and the Package Registry. 
read_repository 
Read-only (pull) for the repository through git clone. 
write_repository Read-write (pull, push) for the repository through git clone. 
Required for accessing Git repositories over HTTP when 2FA is 
enabled. 
read_registry 
Read-only (pull) for Container Registry images if a project is private 
and authorization is required. 
write_registry 
Read-write (push) for Container Registry images if a project is 
private and authorization is required. (Introduced in GitLab 12.10.) 
sudo 
API actions as any user in the system (if the authenticated user is 
an administrator). 
Table of access token scopes 
34 https://docs.gitlab.com/ee/user/permissions.html#gitlab-cicd-permissions 
35 https://docs.gitlab.com/ee/user/permissions.html#job-permissions 
36 https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#personal-access-token-scopes 
X-Force Red | 3/2/2022 
51 
API Capabilities 