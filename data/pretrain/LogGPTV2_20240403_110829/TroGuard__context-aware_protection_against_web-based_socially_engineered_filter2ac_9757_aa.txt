title:TroGuard: context-aware protection against web-based socially engineered
trojans
author:Rui Han and
Alejandro Mesa and
Mihai Christodorescu and
Saman A. Zonouz
TROGUARD: Context-Aware Protection
Against Web-Based Socially Engineered Trojans
Rui Han∗, Alejandro Mesa∗, Mihai Christodorescu†, Saman Zonouz‡
∗†Electrical and Computer Engineering
∗University of Miami, †QualComm Research, ‡Rutgers University
{r.han, a.mesa11}@umiami.edu, PI:EMAIL, PI:EMAIL
ABSTRACT
Despite the increasing number of social engineering attacks through
web browser applications, detection of socially engineered trojan
downloads by enticed victim users remains a challenging endeavor.
In this paper, we present TROGUARD, a semi-automated web-based
trojan detection solution, that notiﬁes the user if the application she
downloaded behaves differently than what she expected at down-
load time. TROGUARD builds on the hypothesis that in spite of mil-
lions of currently downloadable executables on the Internet, almost
all of them provide functionalities from a limited set. Addition-
ally, because each functionality, e.g., text editor, requires particular
system resources, it exhibits a unique system-level activity pattern.
During an ofﬂine process, TROGUARD creates a proﬁle dictionary
of various functionalities. This proﬁle dictionary is then used to
warn the user if she downloads an executable whose observed ac-
tivity does not match its advertised functionality (extracted through
automated analysis of the download website). Our experimental
results prove the above mentioned premise empirically and show
that TROGUARD can identify real-world socially engineered trojan
download attacks effectively.
1
Introduction
Social engineering attacks rely on the user being a point of weak-
ness in any secure system and create one of the most challeng-
ing security problems, where users themselves perform or facil-
itate attack steps. For example, in the case of “fake anti-virus”
malware, the user is convinced to download the legitimate-looking
executable to her computer and then willingly execute a piece of
software that is core to the attack. Protecting a computer system
and its users against such socially engineered download attacks ap-
pears to be impossible, as any such protection could interfere with
the user’s freedom to install software on their own computer. We
describe in this paper our efforts to alleviate this threat without im-
pinging on the user’s freedom, by providing a system that automat-
ically compares the stated goal of a software program (as perceived
by the user) with its actual goal (as inferred from the program’s
execution).
Web-based socially engineered download attacks that result in
a trojan software installation on the victim’s computer are becom-
ing more widespread. This is mainly due to new security measures
(e.g., memory-page protection and address randomization to pre-
vent buffer overﬂows) that signiﬁcantly reduce the success rate of
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ACSAC’14, December 08 - 12 2014, New Orleans, LA, USA.
ACM 978-1-4503-3005-3/14/12...$15.00
http://dx.doi.org/10.1145/2664243.2664270.
other popular, automated attack vectors. Trojan downloads range
from rogue security software (also known as “scareware” or fake
anti-virus), to fake games, fake video codecs, and to fully func-
tional pirated softwares that are infected with malware. As a case
in point, TrojanClicker.VB.395 (detected by TrojanHunter [1])
purports to be an Adobe Flash updater; however, once downloaded
and installed by unsuspecting users, the trojan launches a spyware
that monitored and uploaded all Google searches to a remote server
www.msjupdat e.com. To make the users aware of such attacks,
Adobe announced that malicious hackers were starting to use fake
Flash Player downloads as social engineering lures for malware and
issued a call-to-arms for users to validate installers before down-
loading software updates. The company’s notice came on the heels
of malware attacks on Facebook, MySpace and Twitter that at-
tempted to trick Windows users into installing a Flash Player up-
date [23]. Furthermore in the last few years the threats of trojan
downloads have expanded quickly from desktop to mobile plat-
forms, e.g., the Opfake browser [11], where the app-store concept
seems to drive the user-made download decisions away from prove-
nance and towards functionality.
There are unfortunately few techniques to help users protect them-
selves against trojan downloads. One technique is based on dy-
namically updated blacklists, where web browsers check against
an online blacklist service (e.g., Google SafeBrowsing [14]) that
the current web page does not contain malicious software. Simi-
larly, anti-virus software (e.g., McAfee [21]) also uses a blacklist to
determine whether the downloaded program is malicious. Both of
these security techniques rely on precise and timely maintenance of
the blacklists—a time-consuming challenging endeavor in practice.
Protection techniques that monitor for “drive-by downloads” (e.g.,
Blade [18]) are inapplicable here because trojan downloads are per-
formed through user interaction, not via an exploit. User education
to protect against trojans is ineffective at best since the vast major-
ity of users lack the necessarily complex technical skills and tools
to determine whether a downloaded program is malicious. Conse-
quently, almost all of the existing techniques fall short in providing
an effective protection mechanism against trojan download attacks
that could ideally manage the whole download-install-execute pro-
cess for the user and provide security in that context.
Our approach bridges the gap between what the user perceives
regarding the functionality of the downloaded software and the
functionality observed during its actual execution. We observe that,
throughout the download–install–execute process, the user main-
tains a consistent expectation about the functionality of the down-
loaded program. Following the Principle of Least Surprise [9] in
user-interface design, i.e., “design should match the user’s experi-
ence, expectations, and mental models” [27], we wish to build on
the user’s expectations of a downloaded application and her expe-
rience with past applications with similar functionalities. To this
end, our solution detects trojan downloads by comparing the user’s
expectation of functionality (as primed by the software download
web page) with the actual functionality exhibited at runtime, and
imposes constraints on the downloaded application’s local execu-
tion using the contextual information on the download web page.
(cid:25)(cid:25)
(cid:25)(cid:26)
proﬁle feature vector and are stored for the online detection phase.
It is noteworthy that the ofﬂine phase is a one-time effort and the
functionality proﬁles, once created, can be reused across multiple
systems.
The second phase in TROGUARD is that of on-demand website
and application analysis, leading to the automated real-time mal-
ware detection. When the user intends to download a legitimate-
looking (potentially malicious trojan) program, e.g., a game, from a
website, TROGUARD monitors the download and installation pro-
cess on the local system closely using its browser extension and
plugin components, respectively. Once the browser extension com-
ponent in TROGUARD notices a download initiated by the user, it
starts the website analysis process to determine the type of applica-
tion (functionality) being downloaded, by parsing the text from the
web site and from its images (which are ﬁrst processed using OCR).
TROGUARD then calculates an list of most-likely functionalities
and presents them to the user before the download starts. The user
conﬁrms or corrects the expected functionality for TROGUARD to
use during its dynamic program analysis. Once the program is
downloaded, installed, and executed in a sandboxed environment
(all steps automatically monitored), TROGUARD’s runtime tracing
component starts behavioral monitoring, data collection, and real-
time classiﬁcation of its behavior to verify that the application does
not violate the corresponding functionality proﬁle obtained from
the ofﬂine phase.
Revisiting our example of TrojanClicker.VB.395 from the in-
troduction, TROGUARD would infer that the program to be down-
loaded claims to be a software updater and would retrieve the ap-
propriate functionality proﬁle from its database. When the trojan
starts executing, TROGUARD would monitor its activity, looking
for updater-like behaviors (e.g., many ﬁlesystem and registry oper-
ations for existing entries, little-to-no network trafﬁc). As the trojan
installs itself into the system (into a new location and as an exten-
sion to any web browsers present) and as it communicates over the
network (sending collected logs of Google searches), TROGUARD
observes the discrepancy and notiﬁes the user consequently.
3 Threat Model
TROGUARD protects the users against a speciﬁc class of trojan
download attacks where, through a web-based social engineering
step, the user is lured into downloading and installing a malicious
legitimate-looking executable on her system. The goal of the web-
based trojan exploit is to take effective control of the client machine
in order to complete subsequent malicious activities such as bot de-
ployment.
The attacker wishes to trick the user into downloading the trojan
program, and can use any social engineering technique for this pur-
pose. Additionally, the attacker has full control over the web page
that proposes the download to the user and can use any web tech-
nology on that page, with the exception of exploits. In other words,
we place the user’s web browser and underlying operating system
into the trusted computing base (TCB) and assume that they have
no vulnerabilities. Protecting the TCB from attacks is orthogonal to
our work and has been widely researched by others, with a variety
of solutions available.
We assume that the attack does not involve the use of exploits
or other automated techniques, but only the willing cooperation of
the user to install and launch the trojan software. It is important
to highlight that our threat model is subtly different from drive-by
downloads (e.g., as addressed by Blade [18]), where the adversary
performs a surreptitious download via the user’s browser through a
shell-code injection step, with no social engineering needed. Fur-
thermore, unlike in our threat model, the user does not notice the
download and installation of the malware. This type of drive-by
download attack requires a vulnerable browser to be feasible and is
outside the scope of the present work.
4 Design and Implementation
TROGUARD analyses the source website of an application, while
that application is being downloaded, to determine the appropriate
functionality proﬁle for that application. It then compares the exe-
cution of the downloaded application against this proﬁle and alerts
the user if it discovers any discrepancies. In this section, we discuss
what a functionality proﬁle is and how we build a representative
database of them.
4.1 Ofﬂine Construction of Proﬁle DB
4.1.1 Functionality Classes
Functionality class is a key concept in our system, as it represents
both the user’s understanding of a software category and the sys-
tem’s observation of a software’s execution behavior. Deﬁning an
ideal structure to capture the concept of functionality class is close
to impossible, as an unlimited number of structures of varying de-
grees of abstraction could serve the purpose.
In TROGUARD we use a highly summarized view of the program
execution to deﬁne a functionality class. In particular, the proﬁle
associated with a functionality class is a vector of key behavior
features, as explained in the following subsections. Each behav-
ior feature is high-level enough to be describable to the user (e.g.,
“Program X was classiﬁed as a game because in normal use it gen-
erates a lot of user interaction”, where level of user interaction is
one feature in the proﬁle vector). Further more, each behavior fea-
ture should be efﬁciently computable in real time from the program
execution observations.
The remaining challenge is how to select the most representa-
tive functionality classes. By “most representative” we mean both
classes that are meaningful to users and with member programs
that share behaviors. As an example of a poor choice of function-
ality class, “System Utilities” fails our criteria because its meaning
is too generic to a user and its member programs have many, dis-
tinct behaviors with no common functionality. We turned to ten
software-download websites such as Softpedia, Tucows, and File-
Guru, and surveyed their top-level software categories. As these
website are popular Internet destinations for software downloads,
their categories likely reﬂect users’ understanding and serve as a
good starting point for TROGUARD. We summarized the categories
and combined them into a more concise set, as shown in Figure 2.
It is noteworthy that the correct selection of functionality classes
results in effective detection of behavioral mimicry attacks, where
the carefully crafted malware attempts to accomplish a malicious
objective while pretending a legitimate functionality delivery.
4.1.2 Bridging the Semantic Gap
The goal of our system is to distinguish an application’s genuine
type from its advertised type based on functional proﬁling of the ap-
plication against a trained application functionality class database.
The system should ﬁrst be trained using a supervised training algo-
rithm with a large set of sample applications. To generate discrimi-
native features, comprehensive functional proﬁles are required. Un-
like previous work on behavior based malware clustering [4] and
[7], besides system call traces, application behavioral in our work
is expanded to include user space properties: CPU and memory us-
age, network protocols, port numbers, the number of IP addresses
(or domain names) the application connects to, and the user ma-
chine interactivity, such as keyboard strokes and mouse clicks. The
presence or absence of those attributes in each application’s pro-
ﬁle not only represent the core functionalities of that application,
but can also be used to separate a particular type of application
from the rest. Practically, such behavioral proﬁles are generated by
collecting and analyzing the system wide activities both in kernel
space and user space. In this section we will discuss the feature list
generation and it properties.
Intermediate-Level Application Behaviors
4.1.3
The main challenge in designing such functionality-based detection
solutions is the large semantic gap that exists between the high-
level user-perceivable functionality classes (subsubsection 4.1.1)
(cid:25)(cid:27)
(cid:25)(cid:28)
(cid:26)(cid:19)
(cid:26)(cid:20)
the main functionalities of each application according to its func-
tional category. Each application’s data log was divided into six
time periods (10 seconds each), to be used later for testing phase.
Consequently, our collected database composed of 600 labeled data
points.
We evaluated the performance of application type learning and
classiﬁcation component in TROGUARD using 10-fold cross vali-
dation [3]. We considered two statistical measures, namely 1) re-
call, the fraction of relevant instances that are retrieved during the
classiﬁcation; and 2) precision, the fraction of retrieved instances
(i.e., marked as a particular functionality class by TROGUARD) that
are correct (i.e., actually of the marked class).
Figure 6 shows the recall values for each functionality class as a
result of classiﬁcation using different subsets of attributes. The em-
ployed attributes fall into four categories, ﬁle system-related (File),
network-related (Network), system resource-related (CPU–Mem),
and user interactivity-related (Interaction). We also present results
of the classiﬁcation using all of the attributes. The results for each
subset of attributes are a clustered set of bars, each representing
the recall value for an individual functionality class. As the re-
sults show, the browser functionality class gives the highest recall
percentage except when the classiﬁcation is performed using the
Interaction attributes only. This is because various web pages re-
quire different kind of user interactions. As a case in point, the way
users interact with an online game website, i.e., intense keyboard
and mouse interaction, is extremely different from that of a text or
video news channel, i.e., minimal interaction while the video is be-
ing played. Therefore, many browser samples have been wrongly
marked as other functionality classes such as graphic editor that
require similar mouse activity. Another interesting functionality
class is the game class whose most distinguishing characteristic
are its CPU–Mem attributes because games usually require high
CPU and memory resources in comparison to other functionality