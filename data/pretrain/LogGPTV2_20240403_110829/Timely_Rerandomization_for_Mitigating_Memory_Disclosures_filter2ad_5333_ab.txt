an attacker has to obtain such information.
2.4 Previous Rerandomization Efforts
Memory rerandomization has been proposed [17] or men-
tioned in the literature [9, 13, 6]. To the best of our knowl-
edge, the work by Giuﬀrida et al. [17] is the only one that
provides an actual implementation, applying live rerandom-
ization in the Minix 3 microkernel. This technique employs
a wall clock timing-based rerandomization model. There
are two drawbacks to such a timing-based approach. First,
it imposes unnecessary overhead when the system is cur-
rently performing operations which permit no opportunity
for attack. Second, and more importantly, even very fre-
quent rerandomization may not provide suﬃcient security.
For example, the technique proposed by Giuﬀrida et al. can
rerandomize as fast as once a second, but we note that one
second is suﬃcient to execute an attack even for remote
attackers that require multiple network round trips: the at-
tacker can leak memory content and send the control ﬂow
hijacking payload, all within the interval between two ran-
domizations. Other discussions of possible rerandomization
in the literature also focus on timing-based rerandomization.
For example, Davi et al.
[13] note that “However, the ad-
versary could exploit the (small) time frame between the
subsequent randomization to launch the attack”, and Backes
et al. [6] note that “an attacker can potentially abuse this
long time window to perform a JIT-ROP attack”. The nov-
elty in TASR is tying rerandomization to output in order
to synchronize it with potential observation points for an
attacker, achieving eﬃciency while providing the desired se-
curity guarantees.
270GCC 
TASR 
Modifications 
C Source 
Code 
Annotated 
Binary 
Rerandomizer 
Module 
Main 
Program 
Library 
Library 
a whole, and then proceed into the three major individual
components.
TASR 
Rerandomizer 
TASR 
Kernel 
Support 
User 
Space 
Kernel 
Space 
Figure 1: TASR Architecture
3. THREAT MODEL
In our threat model, an attacker has remote or console ac-
cess to the application and can interact with it via standard
system interfaces but is not explicitly authorized to directly
access the memory of the application (e.g., via shared mem-
ory). However, the application is assumed to contain one or
more memory corruption vulnerabilities that unintention-
ally allow the attacker to corrupt and read memory. Since
memory corruption vulnerabilities are known to be strong
for modifying or leaking memory content [38], we assume
that the attacker exploits these vulnerabilities to read or
write arbitrary memory pages. Thus, the attacker can take
advantage of memory disclosure vulnerabilities that allow
the layout of memory to be leaked in its entirety, in addi-
tion to vulnerabilities that enable the corruption of point-
ers, for the purposes of hijacking control ﬂow. The attacker
cannot, however, inject or modify code. This can be, for ex-
ample, because W⊕X or Data Execution Prevention (DEP)
has been enabled on the system. As a result, the attacker
must resort to code reuse attacks. We further assume that
the operating system, dynamic linker, and hardware devices
are trusted. Our threat model is consistent with related lit-
erature on memory corruption [44] and code reuse attacks
[9].
We also note that the TASR prototype is designed to pro-
tect precompiled application binaries. Applications making
use of interpreted code, such as in script execution engines,
are capable of leaking memory content to uninstrumented
code in the same process address space without traversing
a system call boundary. As such, attacks such as JIT-ROP
[42] are out of scope for this work.
4. DESIGN AND IMPLEMENTATION
Many code reuse attacks begin with the exploitation of a
memory disclosure vulnerability that reveals the location of
an existing piece of executable code. TASR is designed to
thwart these attacks. It repeatedly rerandomizes the loca-
tion of all executable code at runtime, and does so at every
opportunity an attacker has for observing the system.
This core functionality requirement is augmented by the
practical considerations of ensuring low performance over-
head, and avoiding the imposition of overly burdensome
practices upon software developers. A recent survey suggests
that security techniques must impose low overhead in order
to be practical [44], and similarly, requiring manual code
annotations or limiting existing standard coding practices
(e.g., unions) is unscalable and unlikely to gain widespread
adoption.
TASR’s development was guided accordingly, and is de-
scribed in the remainder of this section. We begin with
the high-level direction and core architecture of TASR as
4.1 High-Level Design and Core Architecture
We chose to implement TASR as a prototype for the x86 64
architecture running Linux, applied to programs written in
the C language. The security and functionality requirements
discussed above may be applied to a variety of diﬀerent im-
plementations, but this particular combination was chosen
due to its general suitability for both experimental research
projects and production systems, its robust and open-source
toolchain and ecosystem, and its familiarity to developers.
Additionally, C programs are particularly notorious for en-
abling memory corruption attacks, and are a common target
for the type of code reuse attack that we aim to prevent.
We identiﬁed three high-level tasks for achieving eﬀec-
tive rerandomization of a given program. First, we need to
gather enough information on the code to be able to reran-
domize it without breaking it. Second, it is necessary to
select appropriate rerandomization points that deny an at-
tacker any opportunity for a successful attack. Third, we
require the rerandomization component itself.
Ideally, TASR could be applied to any arbitrary precom-
piled binary. Unfortunately, as is often the case, the opacity
of compiled code renders it extraordinarily diﬃcult to col-
lect suﬃcient information about the program structure to
apply the technique, using only static oﬄine analysis. Dy-
namic analysis at runtime oﬀers greater opportunities, but
also imposes higher overhead. At the opposite end of the
spectrum, a requirement for developers to write their code
according to predeﬁned and strict standards would render
analysis trivial, but would also violate our requirement of
minimal manual source code changes on the part of the de-
veloper.
TASR works between the two extremes: during compila-
tion without manual modiﬁcations, so it is a source com-
patible technique in the taxonomy developed by Szekeres
et al.
[44]. Two opportunities are aﬀorded to us during
the compilation process. First, we can analyze the source
code and extract necessary pointer information, carrying it
along through the multi-stage compilation process as debug-
ging information. Second, we can minimize the amount of
debugging information for performance reasons. The reran-
domization stage itself must be triggered during runtime,
but it need not be integrated into the program as native
code, and is not in the case of TASR.
We chose rerandomization points by reasoning about the
threat model and following it to its natural conclusion. Our
threat model assumes that an unknown attacker has knowl-
edge of, and access to, both an arbitrary memory disclosure
vulnerability and a control ﬂow redirection vulnerability, in
the targeted program. We assume that we cannot detect the
use of either vulnerability, and are likely entirely unaware of
their presence. Therefore, we must assume that knowledge
of the program’s memory layout may be undetectably leaked
in any output from the program, and that control ﬂow may
be redirected at any point where the program acts upon ex-
ternal input.
Although we cannot identify the exact points at which
the attacker actually exercises either vulnerability, we can
identify every opportunity at which it is possible to do so.
Speciﬁcally, an attacker can redirect control ﬂow on the ﬁrst
input made to the program following the data leakage from
271an output. Put more simply, the minimum interval to carry
out an attack is the time between the most recent output
and the following input. If rerandomization occurs at each
such interval, there is never an opportunity to use knowledge
of the previous memory state.
TASR uses a kernel component to invoke rerandomization
at these points. Because the kernel handles all external I/O
calls, it is in the best position to track I/O events across the
entire process, including events in multiple threads. It would
also have been possible to invoke rerandomization via code
injected during the compilation process, but that approach
would have required extra logic to handle the tracking of
I/O ordering.
Finally, the actual memory rerandomization step has com-
ponents that reside in both kernelspace and userspace. Al-
though we initially considered both kernel-only and userspace-
only approaches to rerandomization, we determined that a
hybrid approach oﬀered the best tradeoﬀ between security,
performance, and ease of implementation. The kernel selects
the new random locations to which the code segments will be
moved, carries out the actual movement, and injects a tem-
porary userspace component into the memory space of the
process being rerandomized. This userspace component is
logically separate from the target process, but is considered
to be the process for the duration of its existence, and it has
full memory access thereby. All rerandomization tasks aside
from the code movement are carried out by this userspace
component, which the kernel then removes before returning
control to the original program control ﬂow.
The overall architecture of TASR is depicted in Figure 1.
A compiler component, implemented as a customized ver-
sion of GCC, compiles programs in a form suitable for reran-
domization through TASR. The kernel component controls
the timing of rerandomization and handles certain other
bookkeeping tasks. An injected userspace component per-
forms the bulk of the rerandomization in a way that is trans-
parent to the original program. Detail on each component
follows in the subsequent sections.
4.2 Compilation
The ﬁrst two required steps in code rerandomization are
to produce code that is capable of being easily rerandomized,
and then to have suﬃcient information about that code to
carry out the actual rerandomization step. Fortunately, the
ﬁrst step is not only a solved problem, but has been regu-
larly applied to production code for many years in the form
of PIE/PIC compiler options (Position Independent Exe-
cutable/Code) for UNIX-like systems, and the equivalents
in other major operating system environments. These com-
piler options are used to enable ASLR, and any program
that supports ASLR is randomizable at least once and thus
well-poised for future rerandomization. The second step,
having suﬃcient information about that code to enable re-
randomization, is more complicated.
At the time of rerandomization, all references to the code
(i.e.
function pointers and return addresses) must be up-
dated to point at the new location of that code. To be
updated, those references must be fully tracked throughout
the lifetime of the program such that they can be identiﬁed
and updated at any time. Such tracking must be precise and
sound. Missed references will result in segmentation viola-
tions and thus program crashes, whereas falsely-identiﬁed
references will result in corrupted data.
1 int main() {
2
3
4
5
6
7
8
9
10
11
12 }
return(0);
int x = 20, y;
uintptr_t x_loc, y_loc;
int *x_ptr;
x_loc = (uintptr_t)&x;
y_loc = (uintptr_t)&y;
x_ptr = (int *)x_loc;
printf("x and y are %" PRIuPTR
" bytes apart, and x = %d.\n",
(x_loc - y_loc), *x_ptr);
Figure 2: Code with valid (ab)use of data pointers.
Code references come in two ﬂavors. The ﬁrst type is gen-
erated implicitly, and is comprised of inter-code references,
intra-code references, and return addresses on the stack.
None are explicitly declared in the C language, and are
only accessible by taking advantage of architecture-speciﬁc
knowledge of code and data layout. The second type is de-
clared explicitly as a function pointer, as in this example:
int (*fptr)(int, char *);. These references may be ma-
nipulated, set, and explicitly invoked at will by the program-
mer. So long as both reference types can be tracked and
updated when needed, rerandomization should be possible.
TASR is intended to protect against code reuse attacks,
and thus our focus is on code location rerandomization. The
question naturally arises:
should program code alone be
moved, or should program data (possibly including dynami-
cally allocated data segments) also be moved? We elected to
move code only for two primary reasons: performance, and
the diﬃculties in precisely tracking data reference locations.
We discuss the security implications of this design choice in
Section 5.
For performance, we noted that the incidence of references
to code was extremely low compared to the incidence of ref-
erences to data. Code references typically number in the
hundreds, whereas it is common for a large program to have
many thousands of data pointers, and millions are not un-
usual. Since each reference must be updated at each reran-
domization point, this can impose signiﬁcant performance
overhead.
According to the C standard, one cannot cast into a func-
tion pointer from any other data type. This is of particular
importance to us, because it ensures that a user-deﬁned code
reference cannot exist outside of a function pointer vari-
able. Unfortunately, no corresponding restraint is placed
upon data references, which makes ambiguous data refer-
ences possible.
Consider the example in Figure 2. The integer variable
x_loc is ﬁrst used to set an integer pointer to point at a
speciﬁc integer, and then used to calculate a byte oﬀset. If
rerandomization is invoked at line 6, we have the choice of
treating x_loc as a data pointer (because we note that it
was assigned from a data pointer), or as an integer (which
is its native type).
If x_loc is treated as a data pointer,
the printf statement’s calculation of x_loc - y_loc yields
an incorrect result according to the original programmer in-
tent. If x_loc is treated as an integer, line 7 yields an in-
correct result because x_loc now points to an outdated lo-
cation. There is no solution to this issue, short of requiring
explicit code annotations or forbidding the use of a valid and
common C construction. Neither solution is acceptable ac-
cording to our initial requirements. Movement of code only
avoids the need for either of these two undesirable options.
272References to code can be divided into three major cate-
gories:
1. References to code residing within the same compila-
tion unit.
2. References to code residing in other compilation units.
3. References to code that are assigned at runtime, of
which there are three subtypes: (a) global variables,
(b) local variables and return addresses residing on the
stack, and (c) dynamic allocations.
Code references from category 1 require no special action
beyond compilation as PIE/PIC, using standard compiler
and linker ﬂags. Position-independent code uses relative
oﬀsets to access code within the same unit, rather than ab-
solute references. Because each code segment moves as a
block, relative oﬀsets do not change and there are no refer-
ences that require updating.
Category 2 references similarly require no special action
beyond standard compilation and linking options. Refer-
ences to code in other compilation units are not resolvable
at the time of compilation, and thus are not assigned ab-
solute addresses.
Instead, references are made by relative
oﬀset into the Global Oﬀset Table (GOT), a data structure
present in each compilation unit. Thereafter, only one well-