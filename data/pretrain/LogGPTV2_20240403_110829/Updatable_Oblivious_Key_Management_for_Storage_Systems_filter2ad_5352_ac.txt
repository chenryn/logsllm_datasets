scheme supports public key encryption, meaning that anyone can produce ciphertexts but only
C can decrypt them, thus expanding the use cases for such KMS solution. Note that decryption
requires interaction with KmS which we assume has the means to authenticate decryption requests
from C. Third, the UOKMS scheme from Fig. 4 is presented in terms of a speciﬁc instantiation
rather than using generic tools like the OPRF in OKMS. Indeed, the malleability properties re-
quired for the update operations are not possible with a generic OPRF (but see below about Weak
OPRFs). Finally, veriﬁability of correct encryption by KmS is not needed in UOKMS where en-
cryption is non-interactive, and veriﬁcation of correct decryption can be done via the (symmetric)
authenticated decryption operation Dec. This saves the need to verify the correct exponentiation
by KmS, further improving the performance of UOKMS.
Correctness of the UOKMS scheme is easy to validate. For encryption, one sets w = gr for
random r, then derives the encryption key dek from yr
c , encrypts the data and stores w. For
decryption, C computes wkc obliviously in interaction with KmS and derives dek from this value.
This recovers the original data as yr
c = (gkc )r = (gr)kc = wkc. Regarding the update operation, if
we denote by wt and kt the values of w and kc, respectively, after t updates (here w0 denotes the
original value of w computed at the time of deriving dek, and k0 denotes the client’s key kc as it
existed at that time), then one can see inductively that if wkt
(the latter is the value from
t = wk0
0
8
which dek is derived), then this is also true for t + 1, namely, (wt+1)kt+1 = (w0)k0 . Indeed, we have
that wt+1 = w∆t+1
, thus (wt+1)kt+1 = (wkt/kt+1
= wkt/kt+1
)kt+1 = wkt
t = wk0
0 .
t
t
t
Security of the UOKMS scheme from Fig. 4 is proven in Section 4 based on the security model
presented in Section 3.
In Section 5 we show how to distribute the KmS functionality of UOKMS through a threshold
scheme which includes the distributed generation of the value ∆ so only StS can learn it.
On Weak Oblivious PRF. The UOKMS scheme from Fig. 4 derives symmetric encryption keys
from a function Fk(w) = H(wk) deﬁned over elements in a group G of prime order q (where the
key k is chosen at random in the set Zq). The function F has strong similarities with the OPRF
dh-opk(x) = H(x, (H(cid:48)(x))k) from Fig. 3 that we use as the basis of the OKMS scheme from Fig. 2,
as well as some fundamental diﬀerences. First, the input to F is a group element (rather than an
arbitrary string mapped into the group by the hash function H(cid:48) in dh-op). But more importantly,
knowing wk for any value w allows to compute the function on wt for known t. At the same
time, computing F on a independently random group element is hard under CDH hence F can be
modeled as a Weak PRF (as noted in [41]). In our application for UOKMS we also use the fact
that F can be computed obliviously and use its homomorphic properties to support updatability.
We leave as a future work item the formalization of such “oblivious Weak OPRF” function in the
UC model, similarly to the treatment of OPRFs in [29]. For the purpose of our use of F in the
context of UOKMS, we carry the analysis directly in a specialized UOKMS security model that we
present in Section 3.
3 Security Model for Updatable Oblivious KMS
We introduce the security model for Updatable Oblivious KMS which combines the elements and
advantages of oblivious computation and updatable encryption in a single model. As in updatable
encryption, e.g. [9, 10, 20, 37, 35], we consider keys that evolve over epochs, where at the beginning
of a new epoch the encryption/decryption key is replaced with a fresh key. In our case, this applies
to client keys kc held by the Key Management server KmS. The goal is to capture the security
of key rotation both in the sense of forward security and post-compromise security. That is, the
compromise of a client key kc from a given epoch should not help in exposing data encrypted either
at a later epoch or in a previous epoch.
In the latter case, however, one needs to qualify this
requirement. Suppose that a ciphertext e is generated using the key kc from epoch t and later
for epoch t(cid:48) > t is exposed; should the data d encrypted under ciphertext e still be
the key kc
secure? Clearly, if the attacker A sees e(cid:48), the updated version of ciphertext e in epoch t(cid:48), then A
can decrypt e(cid:48) and obtain d. However, if A possesses kc
and e but does not have the updated e(cid:48)
then the security of d needs to be fully preserved.
(cid:48)
(cid:48)
The above illustrates the intricacies of updatable encryption models, which require careful book-
keeping of information available to the attacker: What ciphertexts it sees and when, for what epochs
it obtains the secret key kc, and for which it receives update information, etc. The goal is to pre-
vent the attacker from learning anything that is not trivially (and unavoidably) derivable from the
information it requests. In this section, we set these rules and goals through a formal model of
UOKMS security, and use it in Section 4 to prove the security of our UOKMS design from Fig. 4.
3.1 Formal UOKMS Scheme
Formally, an Updatable Oblivious KMS (UOKMS) scheme is a tuple of algorithms KGen, Enc,
UGen, UEnc, and a protocol Dec, intended for a KMS server KmS, a storage server StS, and a client
C, s.t.:
9
• KGen is a key generation algorithm, run by KmS, which on input a security parameter (cid:96)
generates a public key pair (sk, pk).
• Enc is an encryption algorithm, run by any party, which on input key pk and plaintext m
generates ciphertext c.
• Dec = (Dec.KmS, Dec.C) is an interactive decryption protocol between a client running
Dec.C(pk, c) and KmS running Dec.KmS(sk, pk), where Dec.C outputs m or ⊥.
• UGen is an update generation algorithm, run by KmS, which on input (sk, pk) generates a
new key pair (sk
) together with an update token ∆.
(cid:48)
(cid:48)
, pk
• UEnc is a ciphertext update algorithm, run by StS, which on input (c, pk, ∆) outputs an
updated ciphertext c(cid:48).
An UOKMS scheme must satisfy the following correctness property. First, the interactive de-
cryption must recover the encrypted plaintext, i.e. for any m, if (sk, pk) ← KGen((cid:96)) and c ←
Enc(pk, c) then Dec.C(pk, c) outputs m after an interaction with Dec.KmS(sk, pk). Furthermore, the
same correctness property applies to keys and ciphertexts produced and updated in later periods.
That is, for every m, if (sk, pk) ← KGen((cid:96)), c ← Enc(pk, m), (sk
, ∆) ← UGen(sk, pk), and
c(cid:48) ← UEnc(c, pk, ∆), then Dec.C(pk
(cid:48)
, c(cid:48)) outputs m after an interaction with Dec.KmS(sk
(cid:48)
, pk
).
(cid:48)
(cid:48)
, pk
(cid:48)
On public and private values. We model UOKMS as a public key encryption scheme where
any party in possession of the public key pk can encrypt ﬁles for the client whose corresponding
decryption key sk is held by KmS. It is assumed that KmS has the means to authenticate the client
before engaging in a decryption operation using key sk but a secret channel between client and
KmS is not needed. The update token ∆ is assumed to be transmitted from KmS to StS over a
secure channel. No other party needs or should know this value. In particular, the model does not
guarantee secrecy of skt+1 given skt and ∆t+1 or secrecy of skt given skt+1 and ∆t+1. For example,
in our UOKMS scheme of Figure 4 receiving ∆t+1 allows one to derive both skt+1 from skt, and skt
from skt+1. In this case, if ∆t+1 was leaked then a KmS corrupted in epoch t would be eﬀectively
also corrupted in epoch t+1, and vice versa.4
3.2 UOKMS obliviousness and security
The deﬁnition below formalizes the notion of KMS obliviousness.
Deﬁnition 1 We say that a UOKMS scheme is oblivious if for all eﬃcient algorithms A the
interaction of A with Dec.C(pk, c0) is indistinguishable from interaction with Dec.C(pk, c1), for any
(pk, c0, c1) output by A s.t. c0, c1 are valid ciphertexts of the same length and pk is a valid public
key.5
As noted above, deﬁning security of UOKMS, and of updatable encryption in general, requires
establishing the rules of what information the adversary is entitled to receive and when, and what
constitutes a win relative to that information. In our model, time is divided into epochs at the
beginning of which a new key pair (sk, pk) and an update token ∆ are generated. For each epoch
the adversary A receives the new public key pk, and can request to see either the new secret key
4This is not a necessary feature of a UOKMS scheme, i.e. one could imagine that ∆t+1 allows for updating
ciphertexts (and the public key), but not for updating the corresponding secret key. However, all existing ciphertext-
independent updatable encryption schemes, ours included, allow for updating sk given ∆.
5The public key pk, normally chosen by KmS, can be chosen by A in this deﬁnition, modeling a malicious KmS,
but C can check some properties of the public key and the ciphertext, e.g. that they contain expected group elements,
before running Dec.
10
sk or the update token ∆, which corresponds to A compromising in that epoch, respectively either
server KmS or server StS. Algorithm A is also given oracle access to the ciphertext-update function
UEnc but it is not allowed to use it for trivial wins, e.g., updating challenge ciphertexts to an epoch
for which it knows the secret key. Note that A learns the secret key skt of epoch t if A asks for it,
but also if A asks for skt−1 in epoch t− 1 and asks for ∆t in epoch t. This shows that what A can
learn in one epoch may depend on what it knew in the previous epoch, and the UOKMS security
game rules must reﬂect that.
We formalize these rules and the attacker goals via the real-ideal experiments shown in Fig. 5.
In each epoch t, the attacker receives pkt and chooses to either corrupt KmS, hence obtaining skt,
or to corrupt StS, hence obtaining the update token ∆t, except if KmS was corrupted in epoch
t − 1 (otherwise the attacker could calculate skt from skt−1 and ∆t, making this case equivalent to
corrupting both KmS and StS in epoch t). In addition, A obtains access to oracles Enc, Dec, UEnc,
depending on the compromised party. An aspect of the deﬁnition that is speciﬁc to our oblivious
setting is that the attacker with access to the oblivious decryption oracle can decrypt any ciphertext
of its choice in a decryption call, but each call can result in decryption of at most a single challenge
ciphertext. More generally, with q calls to the decryption oracle, A can decrypt q messages but
nothing more. Finally, we note that the ability of the attacker to access a decryption oracle provides
CCA security to our public key scheme in the oblivious setting.
uokms(A, (cid:96))
Expreal
Set t ← 0 and corr0 ← sts. Generate (sk0, pk0) ← KGen((cid:96)) and give pk0 to A.
The experiment output is the output of A after interaction with the following oracles:
Enc: On A’s input m, if corrt = sts output Enc(pkt, m);
Dec: Let A interact with Dec.S(skt);
UEnc: On A’s input (t(cid:48), c), if corrt = sts and 0 ≤ t(cid:48) < t then
set ct(cid:48) := c; for j = t(cid:48)+1 to t set cj := UEnc(cj−1, pkj, ∆j); output ct;
Corr: On A’s input corrt+1, set (skt+1, pkt+1, ∆t+1) ← UGen(skt, pkt);
If (corrt, corrt+1) = (kms, kms) output (pkt+1, skt+1, ∆t+1);
If (corrt, corrt+1) = (kms, sts) output pkt+1;
If (corrt, corrt+1) = (sts, kms) output (pkt+1, skt+1);
If (corrt, corrt+1) = (sts, sts) output (pkt+1, ∆t+1);
Increment epoch counter t := t + 1.
uokms(A, SIM, (cid:96))
Expideal
Set t ← 0 and corr0 ← sts. Initialize an empty challenge plaintext list L.
Let a stateful algorithm SIM generate pk0 on input (cid:96) and give pk0 to A.
Experiment output is the output of A after interaction with the following oracles:
Enc: On A’s input m, if corrt = sts add m to L and output SIM(enc,|m|);
Dec: Let A interact with SIM(dec) while letting SIM learn one chosen item in L;
UEnc: On A’s input (t(cid:48), c), if corrt = sts and 0 ≤ t(cid:48) < t then output SIM(upd, t(cid:48), c);
Corr: On A’s input corrt+1 output SIM(corrt+1) and increment epoch counter t := t + 1.
Figure 5: Security Experiments for Updatable Oblivious KMS
11
Figure 5 shows two experiments: Experiment Expreal
uokms(A, (cid:96)) which models an interaction of the
uokms(A, SIM, (cid:96)) which
real-world adversary A with the real UOKMS scheme, and experiment Expideal
models an interaction of a simulator SIM with an “ideal” UOKMS scheme. We call a UOKMS
scheme secure if the two interactions, real and ideal, are indistinguishable. Formally:
uokms(A, (cid:96)) be the probability that experiment Expreal
uokms(A, (cid:96)) outputs 1, and
Deﬁnition 2 Let Advreal
let
uokms(A, SIM, (cid:96)) outputs 1. We say that
Advideal
UOKMS scheme is secure if for all eﬃcient algorithms A there exist an eﬃcient algorithm SIM s.t.
|Advreal
uokms(A, SIM, (cid:96)) be the probability that experiment Expideal