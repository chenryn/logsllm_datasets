### Cult [10] and Binder

Binder does not attempt to address the issues raised by cult [10]. Instead, it achieves a similar effect using explicit rules in its language, as demonstrated by the "trust" statements in Programs 1 and 2.

### Delegation in SPKI

In SPKI, delegation is handled awkwardly. For example, if the local Department of Motor Vehicles (DMV) is to be authorized to license drivers, the DMV itself must be a licensed driver. Binder's explicit handling of delegation avoids such problems.

### Group Principals in SDSI/SPKI

While SDSI/SPKI allows for the specification of k-out-of-n principals from a single group, it does not support principals from different groups. In contrast, Binder can easily express such conditions. For instance, the following Binder rule:

```prolog
can(read, P, resource_r) :-
  vouched-for(P, D),
  vouched-for(P, R),
  senator(D, democrat),
  senator(R, republican).
```

This rule specifies that access is vouched for by any one Democrat and any one Republican from the U.S. Senate.

### PolicyMaker and KeyNote

#### Expressing Access Conditions

PolicyMaker [4] and KeyNote [5] express conditions for granting access, which can be thought of as defining an abstract `can` predicate. These languages allow various conditions on the `can` predicate but do not support additional lemma predicates, thus violating properties 2 and 3. For example, the boss example in Section 2 is difficult to encode in PolicyMaker or KeyNote, whereas Binder can express the boss relation separately from the `can` predicate.

#### Proof Chains

PolicyMaker and KeyNote construct a proof chain for each request, starting from the local policy. Each link in the chain can assert a filter (condition) on the request’s parameters. However, this chain must be linear, while a Binder proof can be a directed acyclic graph (DAG). Additionally, PolicyMaker and KeyNote are limited to rules that state conditions on the request itself and cannot state conditions on other relations that may be lemmas to the request. Binder, in contrast, allows lemma predicates to be stated and composed.

#### Language Flexibility

PolicyMaker allows any programming language to be used to state policies, which violates property 5. This makes it difficult to reason about PolicyMaker programs.

### SD3 and Other Logic-Based Security Languages

#### SD3

Like Binder, SD3 is based on datalog [13]. However, SD3 certificates can only contain facts, not rules, thus violating property 3.

#### D1LP

D1LP [14] is also based on predicate calculus and has a built-in treatment of "speaks-for" for delegation. It allows the definition of other predicates that can be used in lemmas. However, D1LP does not support the explicit construction of rules defining variants of delegation or passing these rules in certificates, thus violating properties 2 and 3.

#### Higher-Order Logic

Appel and Felten have defined a security language based on higher-order logic, which is more powerful than Binder. However, it lacks a decision procedure, violating property 4. Although undecidability is not a problem if proofs come from clients, it would be impractical to require each request site to contain significant custom code to generate proofs.

### DRM Languages

Digital Rights Management (DRM) languages, such as XrML and ODRL, model consumers' access rights for digital media. A DRM rule might grant permission to play a movie two times after paying $5. DRM rules can discuss actions (e.g., paying $5) and state (e.g., the number of plays remaining), which Binder cannot. Actions and state are challenging to handle in a logic-based language, but we are currently investigating ways to extend Binder to include these features.

### Multiple Proofs and Side Effects

If multiple proofs are possible for an access request with different side effects (e.g., drawing on different accounts), only the client may know which proof is preferable.

### Experience with Binder

Most experience with Binder has involved writing small programs to compare it with other security languages or to express and compare sample security policies. Binder has been used as a target for translating proposed security languages to understand what statements Binder can express that other languages cannot, and vice versa. This work includes prototyping automated translators and hand-translating many examples.

Some initially considered features were omitted because they were not needed in our experience, resulting in a relatively simple yet expressive language. Further experience is needed to determine whether Binder’s current mechanisms for composing rules are adequate or need extension.

### Future Work

#### Binder's Strength

Is Binder strong enough? It may be too weak to model some real authorization problems or to write certain security programs well. The explicit expression of all trust relations might complicate large security programs. Alternatively, Binder’s inability to talk about actions and state might become a problem. Further experience with large Binder programs will help us understand these issues. Strengthening Binder might involve adding additional modal proof rules, such as direct support for predicates like "speaks-for."

#### Simplicity vs. Power

It is also possible that Binder is already too strong. Although Binder provides powerful constructs, it may be too easy to misuse them and build complex, incorrect security policies. A simpler language might be easier to use and still be expressive enough in practice. Further experience will help us decide.

### Acknowledgements

The author thanks Martín Abadi for his helpful comments and insights on earlier drafts of this paper. The author also thanks Tony Hoare and the anonymous referees of the 2002 IEEE Symposium on Security and Privacy for their advice on improving the paper’s presentation.

### References

[1] M. Abadi and R. Needham. 1996. “Prudent engineering practices for cryptographic protocols,” IEEE Transactions on Software Engineering, January 1996, pp. 6–15.
[2] M. Abadi, “On SDSI’s linked local name spaces,” Proceedings of the 10th IEEE Computer Security Foundations Workshop, Rockport, Mass., June 1997, pp. 98–108.
[3] A. Appel and E. Felten. “Proof-carrying authentication,” Proceedings of the 6th ACM Conference on Computer and Communications Security, Singapore, November 1999, pp. 52–62.
[4] M. Blaze, J. Feigenbaum, and J. Lacy. “Decentralized trust management,” Proceedings of the 17th IEEE Symposium on Security and Privacy, Oakland, Calif., May 1996, pp. 164–173.
[5] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. Keromyrtis. “The KeyNote Trust Management System Version 2,” IETF RFC 2704, September 1999.
[6] Clocksin, W., and C. Mellish. Programming in Prolog (3rd ed.), Springer-Verlag, 1987.
[7] ContentGuard, Inc., eXtensible Rights Markup Language (XrML) 2.0 Specification, available at http://www.xrml.org.
[8] C. Ellison, B. Frantz, B. Lampson, R. Rivest, B. Thomas, and T. Ylonen, “SPKI certificate theory,” IETF Network Working Group RFC 1693, September 1999.
[9] P. Gutmann, “X.509 style guide,” available at http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt, October 2000.
[10] J. Halpern, and R. van der Meyden, “A logic for SDSI’s linked local name spaces,” Proceedings of the 12th IEEE Computer Security Foundations Workshop, 1999, pp. 111–122.

### Appendix A: EBNF Grammar for Binder

```ebnf
<program> ::= <statement>*
<statement> ::= <rule> | <fact>
<rule> ::= <head> ":-" <body> "."
<fact> ::= <atom> "."
<head> ::= <atom>
<body> ::= <literal> ("," <literal>)*
<literal> ::= <atom> | "not" <atom>
<atom> ::= <predicate> "(" <term> ("," <term>)* ")"
<predicate> ::= <uppercase_letter> (<letter> | <digit>)*
<term> ::= <variable> | <constant>
<variable> ::= <lowercase_letter> (<letter> | <digit>)*
<constant> ::= <string> | <number>
<string> ::= "\"" <char>* "\""
<number> ::= <digit>+
<uppercase_letter> ::= "A" | "B" | ... | "Z"
<lowercase_letter> ::= "a" | "b" | ... | "z"
<letter> ::= <uppercase_letter> | <lowercase_letter>
<digit> ::= "0" | "1" | ... | "9"
<char> ::= any character
```

The Binder grammar differs from a datalog grammar only in the optional quoting of atoms via `says`. Quoting can appear only to depth 1; a quoted atom cannot be quoted again. Terms cannot be quoted at all. These restrictions are designed to interoperate with the rules for importing Binder statements, discussed below.

### Appendix B: Semantics of Binder

The semantics of Binder are based on the semantics of datalog. A Binder program can be transliterated into datalog by moving the `says` quoting into an extra argument in every atom. For example, `C says pred(args)` becomes `pred(C, args)`, while `pred(args)` becomes `pred(null, args)`, where `null` is a new term that appears nowhere else in the program. After such a rewriting, we can adopt datalog’s proof rules directly for Binder.

#### Proof Rule 1

A certificate signed by context `C` and containing a derivable atom that is not quoted with `says` (i.e., an atom of the form `pred(args)`) can be imported into any context, quoted with `C`. For example, the atom-bearing certificate:

```prolog
member(john_smith, bcl).
(signed: C)
```

Can be imported as:

```prolog
C says member(john_smith, bcl).
```

An atom that is already quoted cannot be imported.

#### Proof Rule 2

A rule can be imported if the atom in its head is not quoted. A fact is equivalent to a rule with an empty body. When a rule in a certificate from context `C` is imported, its head will be quoted with `C`, and all unquoted atoms in its body will be quoted with `C`. For example, the rule-bearing certificate:

```prolog
member(X, bigco) :- member(X, bcl).
(signed: C)
```

Can be imported as:

```prolog
C says member(X, bigco) :- C says member(X, bcl).
```

While the certificate:

```prolog
member(X, bigco) :- C′ says member(X, bigco).
(signed: C)
```

Can be imported as:

```prolog
C says member(X, bigco) :- C′ says member(X, bigco).
```

Since an imported rule will have quoting in its head, an imported rule cannot be exported and imported again. Instead, the original certificate must be reused.

### Appendix C: Time Complexity of Binder

At any point in the execution of a Binder program in some context, the current rules and derivable atoms can be translated into datalog as described in Appendix B. Since datalog is decidable in polynomial time, there is a local polynomial-time decision procedure for Binder that ignores future communication.

While the restrictions on statement import in Binder may seem onerous, we suspect they may not be very significant in practice. We can imagine removing these restrictions, while at the same time generalizing Binder so that each atom can be quoted by zero or more terms, constant or variable, and terms can themselves be quoted by contexts to provide namespaces—as a generalization of SDSI—but such a generalized language would soon no longer be decidable. We suspect that there are lesser generalizations to Binder that retain a polynomial-time decision procedure, and we are currently exploring possible alternatives.