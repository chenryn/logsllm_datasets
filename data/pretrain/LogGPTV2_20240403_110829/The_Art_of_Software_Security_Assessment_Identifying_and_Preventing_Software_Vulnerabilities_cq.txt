argument switches being supplied that weren't intended. 
David Sacerdote of Secure Networks Inc. (SNI) discovered a way to abuse additional 
command-line arguments in the vacation program (archived at 
http://insecure.org/sploits/vacation_program_hole.html), which can be used to 
automatically respond to incoming e-mails with a form letter saying the person is on 
vacation. The following code is responsible for sending the response message: 
/* 
 * sendmessage -- 
 *      exec sendmail to send the vacation file to sender 
 */ 
void 
sendmessage(myname) 
        char *myname; 
{ 
        FILE *mfp, *sfp; 
        int i; 
        int pvect[2]; 
        char buf[MAXLINE]; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
585 
        mfp = fopen(VMSG, "r"); 
        if (mfp == NULL) { 
                syslog(LOG_NOTICE, "vacation: no ~%s/%s " 
                       "file.\n", myname, VMSG); 
                exit(1); 
       } 
       if (pipe(pvect) < 0) { 
               syslog(LOG_ERR, "vacation: pipe: %s", 
                   strerror(errno)); 
               exit(1); 
       } 
       i = vfork(); 
       if (i < 0) { 
               syslog(LOG_ERR, "vacation: fork: %s", 
                   strerror(errno)); 
               exit(1); 
       } 
       if (i == 0) { 
               dup2(pvect[0], 0); 
               close(pvect[0]); 
               close(pvect[1]); 
               fclose(mfp); 
               execl(_PATH_SENDMAIL, "sendmail", "-f", 
                   myname, from, NULL); 
               syslog(LOG_ERR, "vacation: can't exec %s: %s", 
                       _PATH_SENDMAIL, strerror(errno)); 
               _exit(1); 
       } 
       close(pvect[0]); 
       sfp = fdopen(pvect[1], "w"); 
       fprintf(sfp, "To: %s\n", from); 
       while (fgets(buf, sizeof buf, mfp)) 
               fputs(buf, sfp); 
       fclose(mfp); 
       fclose(sfp); 
} 
The vulnerability is that myname is taken verbatim from the originating e-mail address 
of the incoming message and used as a command-line argument when sendmail is 
run with the execl() function. If someone sends an e-mail to a person on vacation 
from the address -C/some/file/here, sendmail sees a command-line argument 
starting with -C. This argument typically specifies an alternative configuration file, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
586 
and Sacerdote was able to leverage this to get sendmail to run arbitrary commands 
on behalf of the vacationing user. 
Typically, when looking for vulnerabilities of this nature, you must examine what 
invoked applications do with command-line arguments. Most of the time, they parse 
option arguments by using the getopt() function. In this case, you need to be aware 
of these points: 
If an option takes an argument, it can be specified in the same string or in 
separate strings. For example, if the argument -C takes a file parameter, the 
argv array can contain one entry with just the string -C followed by another 
entry containing the filename, or it can contain just one entry in the form 
-C/filename. 
If an argument with just two dashes is specified (--), any switches provided 
after that argument are ignored and treated as regular command-line 
arguments. For example, the command line ./program f file -- -C file results 
in the -f switch being processed normally and the -C switch being ignored by 
getopt(). 
The first point gives attackers more of a chance to exploit a potential vulnerability. It 
might be useful when user input hasn't been filtered adequately, but users can specify 
only a single argument. A bug of this nature existed in old versions of the Linux kernel 
when it invoked the modprobe application to automatically load kernel modules on a 
user's behalf. The vulnerable code is shown in Listing 10-1. 
Listing 10-1. Kernel Probe Vulnerability in Linux 2.2 
static int exec_modprobe(void * module_name) 
{ 
    static char * envp[] = { "HOME=/", "TERM=linux", 
        "PATH=/sbin:/usr/sbin:/bin:/usr/bin", NULL }; 
    char *argv[] = { modprobe_path, "-s", "-k", 
        (char*)module_name, NULL }; 
    int i; 
    use_init_file_context(); 
    ... 
    /* Allow execve args to be in kernel space. */ 
    set_fs(KERNEL_DS); 
    /* Go, go, go... */ 
    if (execve(modprobe_path, argv, envp) < 0) { 
        printk(KERN_ERR 
              "kmod: failed to exec %s -s -k %s, errno =" 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
587 
              " %d\n", 
              modprobe_path, (char*) module_name, errno); 
        return -errno; 
    } 
    return 0; 
} 
The Linux kernel would run modprobe in certain circumstances to locate a module for 
handling a user-specified device. Using the ping utility (a setuid program was 
required to trigger the vulnerable code path), users could specify a utility with a 
leading dash, which resulted in modprobe interpreting the value as an argument 
switch rather than a normal argument. Using the -C switch, local users could exploit 
this vulnerability to gain root privileges. 
The second point listed previously gives developers an easy-to-use mechanism for 
avoiding security problems when building argument lists. The Linux kernel example in 
Listing 10-1 was fixed by inserting a -- argument (among other things) to prevent 
future attacks of this nature. When auditing code where a program builds an 
argument list and calls another program, keep in mind that getopt() interprets only 
the arguments preceding --. 
Indirect Invocation 
Many libraries and language features allow developers to run a program or command 
by using a command subshell. Generally, these approaches aren't as safe as a 
straightforward execve(), because command shells are general-purpose applications 
that offer a lot of flexibility and potentially dangerous extraneous functionality. The 
issues outlined in this section apply to programs that use a command shell for various 
purposes and they also apply to shell scripts. 
The library functions popen() and system() are the most popular C mechanisms for 
making use of a command subshell. Perl provides similar functionality through its 
flexible open() function as well as the system() function and backtick operators. Other 
languages also provide similar functionality; Python has a myriad of os modules, and 
even Java has the Runtime.getRuntime().exec() method. 
Metacharacters 
A shell command line can have a formidable amount of metacharacters. Stripping 
them all out is difficult unless you use a white-list approach. Metacharacters can be 
useful to attackers in a number of ways, listed in Table 10-1. 
Table 10-1. Metacharacter Uses 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
588 
Metacharacter 
Type 
Explanation 
Command 
separators 
Command separators might be used to specify more commands in 
a shell invocation than the developer intended. 
File redirection 
Redirection operators might be used to trick a program into 
reading or writing files (or sockets, pipes, and so on) from the 
system. This might allow users to see contents of files that they 
shouldn't be able to or even create new files. 
Evaluation 
operators 
Most shells provide evaluation operators that perform some 
statement or expression and return a result. If users can specify 
them, they might be able to run arbitrary commands on the 
system. 
Variable 
definitions 
By specifying new environment variables or being able to include 
previously defined ones, users might be able to adversely affect 
the way the shell performs certain function. A good example is 
redefining the IFS environment variable (discussed later in 
"Common Environment Variables(? [????.])"). 
The subject of dealing with shell metacharacters (and associated data filters) was 
covered in depth in Chapter 8(? [????.]), "Strings and Metacharacters." 
Globbing 
In addition to the standard metacharacters a typical shell processes, it also supports 
the use of special characters for file system access. These characters, called 
globbing characters, are wildcards that can be used to create a pattern template 
for locating files based on the specified criteria. Most people use simple globbing 
patterns on a daily basis, when performing commands such as this one: 
ls *.c 
The characters that glob() interprets are ., ?, *, [, ], {, and }. Globbing functionality 
is inherent in shell interpreters as well as a number of other places, such as FTP 
daemons. If programs aren't careful to filter out these characters, they might render 
themselves susceptible to files being accessed that weren't intended. 
Globbing Security Problems 
In many circumstances, users can take advantage of globbing, and it doesn't 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
589 
represent a security threat, as in FTP. However, because of implementation 
problems within the glob() function in a number of libc implementations, 
users have been able to supply malformed pathnames that result in memory 
corruption vulnerabilitiesboth buffer overflows and double-frees. Anthony 
Osborne and John McDonald (one of this book's authors) published an 
advisory for Network Associates (NAI)'s Covert Labs that outlined multiple 
buffer overflows in several glob() implementations used in FTP daemons. 
The advisory is archived at www.securityfocus.com/advisories/3202. 
Environment Issues 
In addition to the problems with metacharacter and globbing character filters, an 
application is also at risk because of the shell's inherent interaction with its 
environment. Environment trust issues are covered in "Environment Arrays(? 
[????.])" later in this chapter, but they are mentioned here because shells tend to 
alter their behavior significantly based on certain environment variable settings. 
Depending on the shell, certain environmental variables can be supplied that cause 
the shell to read arbitrary files on the file system and, in some cases, execute them. 
Most modern libc's filter out potentially dangerous environment variables when a 
setuid root process invokes a shell (such as PATH, all the LD_* variables, and so on). 
However, this filtering is very basic and might not be sufficient in some cases. In fact, 
shell behavior can change dramatically in response to a wide variety of environment 
variables. For example, the sudo application was vulnerable to attack when running 
shell scripts at one point because of a feature in bash; certain versions of bash search 
for environment variables beginning with () and then create a function inside the 
running shell script with the contents of any matching environment variable. (The 
vulnerability is documented at 
www.courtesan.com/sudo/alerts/bash_functions.html.) Although this behavior 
might seem quirky, the point remains that shells frequently expand their functionality 
in response to certain environment variables. This rapid expansion combined with 
each shell using slightly different environment variables to achieve similar goals can 
make it hard for applications to protect themselves adequately. Most applications that 
deal with environment variable filtering perform a black-list approach rather than a 
white-list approach to known problem-prone environment variables, so you often find 
that unanticipated feature enhancements in shell implementations introduce the 
capability to exploit a script running with elevated privileges. 
Setuid Shell Scripts 
Running shell scripts with elevated privileges is always a bad idea. What makes it so 
dangerous is that the shell's flexibility can sometimes be used to trick the script into 
doing something it shouldn't. Using metacharacters and globbing, it might be possible 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
590 
to cause the script to run arbitrary commands with whatever privileges the shell script 
is running with. 
An additional problem with running shell scripts is that they aren't directly invoked. 
The shell program is invoked with the shell script as an argument, in much the same 
way execvp() and execlp() work when ENOEXEC is returned. Because of this indirection, 
symlink attacks might also be possible. 
7.6.4 Process Attributes 
Numerous data structures associated with each process are typically maintained in 
the system kernel and exposed to end users with varying degrees of transparency. 
This section isolates the process attributes and behaviors that are most important 
when evaluating an application's security. 
The attack surface available to malicious local users invoking a privileged application 
is largely defined by those process attributes that they are able to directly control. In 
particular, attributes that are inherited from the invoking application must be handled 
with exceptional care by the privileged application, as they are essentially in an 
undefined state. As such, process attribute retention is the initial focus of this section. 
You will see what kind of attributes a process inherits from its invoker and what kind 
of a risk that each attribute class represents. 
The next step is to consider the security impact of process resource limits. This 
section will show you how resource limits affect the running of a process, and how 
careful manipulation of these limits can have interesting security consequences. The 
semantics of file sharing across multiple processes and program executions is also 
considered, to give you an idea of how implicit file descriptor passing can result in 
dangerous exposures of sensitive data. 
You finish up with a study of the process environment array, which contains a series 
of key/value pairs that are intended to express user and system preferences for the 
application to utilize at its discretion. Finally, you examine groups of processes used 
by UNIX systems to implement job control and an interactive terminal user interface. 
Process Attribute Retention 
The execve() system call is responsible for loading a new program into process 
memory and running it. Typically, it involves getting rid of memory mappings and 
other resources associated with the current program, and then creating a fresh 
environment in which to run the new program file. From a security standpoint, you 
need to be aware that the new process inherits certain attributes of the old one, which 
are as follows: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
591 
File descriptors File descriptors usually get passed on from the old process to 
the new process. Potential problem areas are discussed shortly in the "File 
Descriptors" section. 
Signal masks (qualified) The new process loses all signal handlers that were 
installed in by the previous process but retains the same signal mask. Signals 
are explained in Chapter 13(? [????.]), "Synchronization and State." 
Effective user ID If the program is setuid, the effective user ID becomes the 
user ID of the program file owner. Otherwise, it stays the same across the 
execution. 
Effective group ID If the program is setgid, the effective group ID becomes the 
group ID of the program file group. Otherwise, it stays the same across the 
execution. 
Saved set-user-ID This attribute is set to the value of the effective user ID 
after any setuid processing has been completed. 
Saved set-group-ID This attribute is set to the value of the effective group ID 
after any setgid processing has been completed. 
Real user ID This attribute is preserved across the execution. 
Real group ID This attribute is preserved across the execution. 
Process ID, parent process ID, and process group ID These attributes don't 
change across an execve() call. 
Supplemental groups Any supplemental group privileges the process is 
running with are retained across a call to execve(). 
Working directory The working directory of the new process is the same as 
that of the old process. 
Root directory The root directory of the new process is the same as that of the 
old process. This is particularly relevant for processes running in an 
environment restricted by chroot-style mechanisms. 
Controlling terminal The new process inherits the controlling terminal of the 
old process. 
Resource limits Resource limits enforce maximum limits for accessing system 
resources such as files, stack and data sizes, and number of pending core file 
sizes. They are discussed in the next section. 
Umask This attribute is used to derive a set of default permissions applied to 
new files the process creates. Security issues related to umask settings are 
described in Chapter 9(? [????.]). 
Many attributes listed here can be the source of potential vulnerabilities when the old 
and new processes run with different privilegesthat is, when a privileged process is 
called or when a privileged process drops its permissions and calls an unprivileged 
application. Bear in mind that the following discussion focuses on the most common 
scenarios a program might encounter when traversing an execve(). There might be 
other situations in which privileged applications honor specific attributes in such a 
way that they're exploitable. 
Resource Limits 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
592 
Resource limits (abbreviated as "rlimits") are a process-specific set of attributes that 
enforce restrictions on the system resources that a process may use. The geTRlimit() 
and setrlimit() functions allow a process to examine and modify (to a certain extent) 
its own resource limits. There are multiple resources for which each process has 
defined limits. For each defined system resource a process has two associated 
resource values: a soft limit and a hard limit. The soft limit value is more of a warning 
threshold than a limit, in that the process may not exceed it but it is free to change the 