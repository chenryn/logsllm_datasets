#trace
TIME
COMM
FUNC
tracecustomevents
05:18:23
4490
dd
sys_read
read 1048576bytes
05:18:23
4490
dd
sys_read
read 1048576 bytes
05:18:23
4490
dd
sys_read
read1048576bytes
~C
trace
-h
trace
-Kblk_account_io_start
trace-h
Trace this kernel function, and print info with a kernel stack trace
listsexample
trace
'do_sys_open "s"，arg2"
Trace the open syscallandprint the filename being opened
one-liners
trace
'sys_read （arg3> 20000)
"read &d bytes"，arg3'
trace r::do_sys_return
Trace the return from the open syscall
trace
'c:open（arg2==42）"s&d"，argl，arg2'
Trace the open() cali from'libc onlyif the flags（arg2)argument is42
trace
Trace the block_rq_complete kernel tracepoint and print
#of tx sectors
[...]
bySasha Goldshtein
---
## Page 45
argdist
#argdist -H
'p::tcp_cleanup_rbuf(struct sock *sk,int copied):int:copied'
[15:34:45]
copied
：count
distribution
0->1
：15088
2->3
：0
4->7
：0
8->15
：0
16 -> 31
：0
32->63
：0
64->127
：4786
128 -> 255
：1
256->511
:1
512-> 1023
:4
1024->2047
:11
2048->4095
：5
function
4096->8191
：27
argument
8192 -> 16383
：105
distributions
16384->32767
：0
bySashaGoldshtein
---
## Page 46
ComingtoaGUlnearyou
BCC/BPF VISUALIZATIONS
---
## Page 47
Latency Heatmaps
root@bgregg-test-i-23e01ede:/mnt/src/linux-4.0.0+/samples/bpf#./tracex3
heatmapofI0latency
manyeventswiththislatency
一
fewevents
1us
[10us
[100us
1ms
10ms
[100ms
1s
[10s
latency
#0
#3187
passage
#2393
of time
#2266
#1556
high-latency
#1909
outliers
#1496
#1533
#1414
#1551
low-latency
#1491
mode
#1456
#1511
#1573
bulkofI/O
#1652
---
## Page 48
CPU + Off-CPU Flame Graphs
Can now be
Kernel CPU Flame Graph: Linux build
BPFoptimized
Kernel Off-CPU Time Flame Graph: Linux build
http://www.brendangregg.com/flamegraphs.html
---
## Page 49
Conguer Performance
User
preemptionor
timequantumexpired
running
mode
(on-CPU)
switch
swapout
schedule
Kernel
Runnable
Swapping
swap in
resourceI/O
wakeup
Wait
On-CPU+off-CPU
acquirelock
acquired
Block
off-CPU
meanswecan
measureeverything
sleep
Sleep
wakeup
Exceptsometimes
wait
work
one off-CPU stack
forwork
arrives
isn'tenough...
Idle
---
## Page 50
swapp..
bio_endio
Off-Wake Flame
Waker task
end_bi..
end_bu..
end..
Graphs
swapper/0
unlock..
blk_mq_complete_request
wake_...
blk_mq_end_request
wak..
blk_update_request
wak..
bio_endio
Showsblockingstackwith
wak..
mpage_end_io
Wakerstack
wake_b...
unlock_page
waker stack
wake_up_bit
schedule
wake_up
-Betterunderstandwhyblocked
schedu..
wake_up_common
sche..
wake_bit_function
-Mergedin-kernelusingBPF
bit_wai..
wokeup
Includemultiplewakerstacks==
wait..
schedule
out_of
schedule_timeout
chaingraphs
wait.
sched_text_start
ext4_b..
bit_wait_io
· We couldn't do this before
ext4..
wait_on_bit_lock
htree_d.
lock_page_killable
Off-CPU stack
ext4_ht..
generic_file_read_iter
ext4_r..
vfs_read
iterate_..
vfs_read
sys_ge..
sys_read
Blocked task
entry_SYSCALL_64_fastpath
tar
---
## Page 51
Overviewfortooldevelopers
HOW TO PROGRAM BCC/BPF
---
## Page 52
bccTutorials
1.https://github.com/iovisor/bcc/blob/master/lNsTAlL.md
2.../docs/tutorial.md
3.../docs/tutorialbccpython_developer.md
4..../docs/reference_guide.md
5.../CONTRIBUTING-SCRIPTS.md
---
## Page 53
bitehist.py Output
./bitehist.py
Tracing... Hit Ctrl-C to end.
^C
kbytes
:count
distribution
0->1
：3
2->3
：0
4 -> 7
:211
8->15
：0
16 -> 31
：0
32->63
：0
64->127
:1
128->255
：800
---
## Page 54
bitehist.py Code
#load BPF program
#header
b= BPF(text="""
print("Tracing...Hit Ctrl-C to end.")
#include
#include
# trace until Ctrl-C
BPF_HISTOGRAM(dist);
try:
intkprobeblk_account_io_completion(struct pt_regs *ctx,
sleep(99999999)
struct request *req)
exceptKeyboardInterrupt:
dist.increment(bpf_log2l(req->_data_len/1024));
print
return 0;
#output
b["dist"].print_log2_hist("kbytes")
bccexamples/tracing/bitehist.py
---
## Page 55
bytehist.py Annotated
#load BPF program
#header
b=BPF(text=""
print（"Tracing...HitCtrl-C to end
#include
#include
Map
CBPFProgram
# trace until Ctrl-
PythonProgram
BPF_HISTOGRAM(dist);
try:
intkprobeblk_account_io_completion(struct pt_regs
tx
sleep(99999999)
structrequest *req)
Event
exceptKeyboardInterrupt:
dist.incr@ment(bpf_log2l(req->_data_len/1024));
print
return0;
Statistics
'kprobe_"is a shortcut for BPF.attach_kprobe()
#output
b["dist"].print_log2_hist("kbytes"）
bccexamples/tracing/bitehist.py
---
## Page 56
struct sock *skp= NULL;
Current Complications
bpf_probe_read(&skp,sizeof（skp),&sk);
//pull in details
u16family=0,1port=0，dport=0;
Initialize allvariables
char state =0;
bpf_probe_read(&family,sizeof(family),&skp->_sk_common
Extra bpf_probe_read()s
bpf_probe_read(&lport,sizeof(lport),&skp->_sk_common.s
bpf_probe_read(&dport, sizeof(dport),&skp->_sk_common.S
BPF_PERF_OUTPUT()
bpf_probe_read(&state，sizeof(state)，(void *)&skp->_sk
Verifiererrors
if （family == AF_INET){
struct ipv4_data_t data4 ={.pid =pid，.ip = 4,.typ
bpf_probe_read(&data4.saddr,sizeof(u32),
&skp->_sk_common.skc_rcv_saddr);
bpf_probe_read(&data4.daddr,sizeof(u32),
&skp->_sk_common.skc_daddr);
//lportishost order
data4.lport = 1port;
data4.dport=ntohs（dport);
data4.state = state;
ipv4_events.perf_submit(ctx,&data4,sizeof(data4));
---
## Page 57
Bonus Round
PLY
---
## Page 58
File opens
#ply -c'kprobe:do_sys_open { printf("opened: %s\n", mem(arg(1),"128s"));}
1 probe active
opened:/sys/kernel/debug/tracing/events/enable
opened:/etc/ld.so.cache
opened:/lib/x86_64-1inux-gnu/1ibselinux.so.1
opened:/1ib/x86_64-1inux-gnu/1ibc.so.6
opened:/lib/x86_64-1inux-gnu/1ibpcre.so.3
opened:/1ib/x86_64-1inux-gnu/1ibdl.so.2
opened:/1ib/x86_64-1inux-gnu/1ibpthread.so.0
opened:/proc/filesystems
opened:/usr/lib/locale/locale-archive
opened:
[...]
---
## Page 59
Countvfs calls
#ply-c'kprobe:vfs_*{@[func（）].count（）;}
WRN kprobe_attach_pattern:'vfs_caches_init_early'will not be probed
WRN kprobe_attach_pattern:'vfs_caches_init'will not be probed
49probesactive
^cde-activatingprobes
@：
vfs_fstat
33
vfs_getattr
34
vfs_getattr_nosec
35
vfs_open
49
vfs_read
66
vfs_write
68
[...]
---
## Page 60
Readreturnsize
#ply-c
'kretprobe:SyS_read { @ret.quantize(retval());}'
1probeactive
^cde-activatingprobes
@ret:
0
7
1
24
=
2,
3]
5
4,
7]
0
8,
15]
1
=
16,
31]
1
1
32,
63]
3
64,
127]
3
128,
255]
2
256,
511]
1
512,
1k)
11
---
## Page 61
Read return size (AsCll)
#ply-A -c'kretprobe:SyS_read { @ret.quantize(retval());}'
1 probe active
^cde-activatingprobes
@ret:
0
###########
1
12
################################
=
2,
3]
#################
4,
7]
。l
8,
15]
1|###
=
16,
31]
2#####
1
32,
63]
7#################
64,
127]
3########
128,
255]
2|####＃
256，
511]
1|###
512,
1k)
11############################
---
## Page 62
Read latency
#ply-A-C
'kprobe:SyS_read{@start[tid()]=nsecs(）;}
kretprobe:SyS_read /@start[tid()]/ { @ns.quantize(nsecs() -@start[tid()]);
@start[tid（)]=nil;}
2probesactive
^cde-activatingprobes
[...]
@ns:
[512,
1k)
3########
1k,
2k)
7
###################
2k,
4k)
12【##############################
4k,
8k)
########
8k,
16k)
#####
16k,
32k)
0
[32k,
64k)
[64k,
128k)
########
[128k,256k)
1|###
[256k,
512k)
1|###
[512k,
1M)
#####
---
## Page 63
Counting Off-CPU stacks
#ply-c
'kprobe:schedule{@[stack(）].count()}'
1 probe active
^cde-activatingprobes
@：
schedule+0x1
sys_exit+0x17
do_sysca11_64+0x5e
return_from_SYSCALL 64
schedule+0x1
fuse_dev_read+0x63
new_sync_read+0xd2
vfs_read+0x26
vfs_read+0x96
sys_read+0x55
do_sysca11_64+0x5e
return_from_SySCALL_64
1707
schedule+0x1
do_sysca11_64+0xa2
return_from_SYSCALL_64
4647
---
## Page 64
ply One-Liners
#Tracefileopens:
ply -c 'kprobe:do_sys_open { printf("opened: %s\n", mem(arg(1), "128s")); }'
#Counting vfs functions by process name:
ply-c'kprobe:vfs_*{@[comm(),func()].count();}'
#Counting off-CPU stacks:
ply-c'kprobe:schedule{@[stack()].count()}'
#Syscall read return size as a histogram:
ply-c'kretprobe:SyS_read{@ret.quantize(retval());}'
#Syscall readlatencyas ahistogram:
ply-A -c'kprobe:SyS_read { @start[tid()] = nsecs();}
@start[tid()] = nil;}'
[...]
alsoseeply/oneliners.md
---
## Page 65
A new BPF-based dynamic tracer for Linux
CreatedbyTobiasWaldekranz
https://github.com/iovisor/plyhttps://wkz.github.io/ply/
ply
High-level language
-Simple one-liners
-Short scripts
In development
/*a dynamic tracer for Linux */
kprobesandtracepointsonly,uprobes/perf_eventsnotyet
Successfulsofarasaproofofconcept
Notproductiontestedyet(bccis)
---
## Page 66
Futurework
CHALLENGES
---
## Page 67
Challenges
Marketing
Documentation
Training
Community
Without these,we mayhave another ftrace:a built in"secret"of Linux.Notgood for adoption!
https://www.iovisor.org project helps, but tracing (observability) is only one part.
---
## Page 68
Take aways
1.Understanding the value of Linux tracing superpowers
2.Upgrade to Linux 4.4+ (4.9 is better)
3. Ask for eBPF support in your perf analysis/monitoring tools
Pleasecontribute:
BPFTracinginLinux
tsletops
-https://github.com/
3.19: sockets
3.19: maps
iovisor/bcc
4.1: kprobes
https://github.com/
4.3:uprobes
iovisor/ply
4.4:BPF output
4.6: stacks
4.7:tracepoints
4.9: profiling
DRAM
zfediat zfsslot
4.9:PMCs
profile
---
## Page 69
Links & References
iovisorbcc:
https://github.com/iovisor/bcchttps://github.com/iovisor/bcc/tree/master/docs
http://www.brendangregg.com/blog/(searchfor"bcc")
http://www.brendangregg.com/ebpf.html#bcc
http://blogs.microsoft.co.il/sasha/2016/02/14/two-new-ebpf-tools-memleak-and-argdist/
I'llchangeyourviewofLinuxtracing:https://www.youtube.com/watch?v=GsMs3n8CB6g
Ondesigningtracingtools:https://www.youtube.com/watch?v=uibLwoVKjec
BPF:
https://www.kernel.org/doc/Documentation/networking/filter.txt
https://github.com/iovisor/bpf-docs
https://suchakra.wordpress.com/tag/bpf/
Flame Graphs:
http://www.brendangregg.com/flamegraphs.html
http://www.brendangregg.com/blog/2016-01-20/ebpf-offcpu-flame-graph.html
http://www.brendangregg.com/blog/2016-02-01/linux-wakeup-offwake-profling.html
DynamicInstrumentation:
http://ftp.cs.wisc.edu/par-distr-sys/papers/Hollingsworth94Dynamic.pdf
https://en.wikipedia.org/wiki/DTrace
DTrace:DynamicTracing in Oracle Solaris,Mac OSX and FreeBSD,Brendan Gregg,Jim Mauro;Prentice Hall 2011
NetflixTech Blog onVector:
http://techblog.netflix.com/2015/04/introducing-vector-netflixs-on-host.html
LinuxPerformance:http://www.brendangregg.com/linuxperf.html
---
## Page 70
ScaLE
15x
Thanks
The Fifteenth Annual
SouthernCaliforniaLinuxExpo
- Questions?
-iovisorbcc:https://github.com/iovisor/bcc
b*
-http://www.brendangregg.com
-http://slideshare.net/brendangregg
- PI:EMAIL
- @brendangregg
DTrace
Systems
Performance
ThankstoAlexeiStarovoitov(Facebook),BrendenBlanco(PLUMgrid/
VMware),Sasha Goldshtein(Sela),Daniel Borkmann(Cisco),Wang
Nan(Huawei),andotherBPFandbcccontributors!
---