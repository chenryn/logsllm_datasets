or two orders of magnitude.
ciphertext-size that is secure.
For BGW 2005 [BGW05], we compared with the C implementation on the ACSC website by
Matt Steiner and Ben Lynn.
Indeed, our translations that minimize the public parameters or
ciphertext size are the same, and the same as their manual translation. We conﬁrm security and
PP/ciphertext-size optimality.
For BB HIBE [BB04a], Charm has a full HIBE implementation. We tested it for a minimum of
2 levels, but their implementation matches ours for ciphertext minimization, except that they add
a precomputed pairing (element in GT ) to the public key so that it does not have to be done per
18
BB04 HIBE [BB04a, §4] (l = 2)
Asymmetric [Min. PK]
Asymmetric [Min. SK]
Asymmetric [Min. CT]
Asymmetric [Min. Assump]
BB04 HIBE [BB04a, §4] (l = 6)
Asymmetric [Min. PK]
Asymmetric [Min. SK]
Asymmetric [Min. CT]
Asymmetric [Min. Assump]
BB04 HIBE [BB04a, §4] (l = 7)
Asymmetric [Min. PK]
Asymmetric [Min. SK]
Asymmetric [Min. CT]
Asymmetric [Min. Assump]
BB04 HIBE [BB04a, §4] (l = 8)
Asymmetric [Min. PK]
Asymmetric [Min. SK]
Asymmetric [Min. CT]
Asymmetric [Min. Assump]
BB04 HIBE [BB04a, §4] (l = 9)
Asymmetric [Min. PK]
Asymmetric [Min. SK]
Asymmetric [Min. CT]
Asymmetric [Min. Assump]
Conversion
Num.
Time
Solutions
-
592 ms
641 ms
626 ms
582 ms
-
2361 ms
2019 ms
2023 ms
2375 ms
-
4555 ms
3644 ms
3662 ms
4519 ms
-
9344 ms
7148 ms
7194 ms
9299 ms
-
20629 ms
15714 ms
15690 ms
20904 ms
-
16
16
16
16
-
256
256
256
256
-
512
512
512
512
-
1024
1024
1024
1024
-
2048
2048
2048
2048
Figure 10: A summary of the conversion times of AutoGroup+ for various levels/degrees of com-
plexity of BB04 HIBE [BB04a, §4] and a variety of optimization options.
encryption. This impacts only eﬃciency. We conﬁrm security and ciphertext-size optimality.
For CL [CL04], we can conﬁrm that the Charm implementation is secure and public-key-size
optimal. However, in the more likely event that one wants to minimize signature size, AutoGroup+
found a translation with a shorter signature.
For BLS [BLS04], our translations also match. This is a simple case with only two translation
options.
Charm [AGM+13] also includes variants of the Waters encryption and signature schemes [Wat05]
from 2005, but we translated the original schemes (as did [AGH13, AGOT14]), so our translations
are not directly comparable to these Charm variants.
5.2 Comparison with Abe et al.
Abe et al. [AGOT14] tested their method on two encryption schemes: Waters 2005 [Wat05] and
Waters 2009 (Dual System Encryption) [Wat09]. They looked at minimizing the size of the public
key and the Type-III assumption. We conjecture that practitioners would be more interested in
minimizing ciphertext or private key size, so our summary also includes those optimizations.
For Waters 2005, AutoGroup+ found the same construction as their semi-automated method.
As remarked in Section 3.1.1, their dependency graph for this scheme included some unnecessary
dependencies. Waters [Wat05] clearly states to choose g2, u(cid:48), ui as fresh random generators, but Abe
et al. explicitly “assume” that they are generated from a common generator g. From a functionality
and security standpoint of the Type-I scheme, this distinction certainly does not matter. However,
19
it does change the intermediate dependency graphs, which could in some cases aﬀect the output
(though it does not in this situation). Both their partial automation and our full automation of
Waters 2005 took under one second.
For Waters 2009, AutoGroup+ ﬁrst appeared to ﬁnd a PK-optimized construction with one less
group element than the PK-optimized construction of Abe et al. [AGOT14]. However, subsequent
discussions [AGOT15] determined that this was merely the product of a diﬀerent counting method;
the numbers reported in this work are the correct ones for both AutoGroup+and the Abe et al.
method.
In the original work [AGOT14], no schemes with interactive assumptions were reported on. In
subsequent communcations [AGOT15], Abe et al. demonstrated a translation for the Camenisch-
Lysyanskaya (CL) signatures [CL04] based on the interactive LSRW assumption. We derived the
SDL ﬁles for the scheme, assumption and proof and ran it through AutoGroup+. The results
matched. (See Appendix C for the CL graph split).
Drawing and merging the dependency graphs by hand is tedious and becomes infeasible for
a complex scheme like [ACD+12]. In addition, the Abe et al. graph splitting program took 1.75
hours for Waters09, whereas our tool handled everything in 6.5 seconds. Thus, we ﬁnd that it is
considerably easier and faster to transcribe the SDL and use AutoGroup+.
5.3 Comparison with AutoGroup
The AutoGroup tool [AGH13] was used as the starting point for our implementation, hence the
name of AutoGroup+. Our 48 translation experiments overlap with AutoGroup in 14 points (seven
schemes in common and they do fewer optimizations). For these 14, the tools found the same
constructions. However, a major diﬀerence is that with AutoGroup+, we have security guarantees.
This required us to write new SDL descriptions for all the assumptions and proofs involved.
Indeed, one crucial question was how the security logic would increase translation times. We
focused our eﬀort on leveraging an SMT Solver to help handle this security logic, which kept the
running times of AutoGroup+ within a few seconds of AutoGroup.
In addition to the security logic we added, we also found that the public key optimization ﬂag
for encryption was not implemented. Because we wanted to compare our results with [AGOT14],
we implemented it.
AutoGroup was tested on one signature scheme omitted here. Boneh-Boyen [BB04c] has a nested
proof structure that falls outside of the black box reductions considered in this work.
5.4 Comparison with manual translations
The Dual System Encryption scheme of Waters [Wat09] has a few manual translations with a secu-
rity analysis. Ramanna, Chatterjee and Sarkar [RCS12] provide a variety of translations, one with
the smallest public parameter/key size, at the cost of introducing some mild complexity assump-
tions. Similarly, Chen, Lim, Ling, Wang and Wee [CLL+13] presented a translation introducing
the SXDH assumption, which achieved the shortest ciphertext size. These results are superior to
those derived by AutoGroup+ and [AGH13, AGOT14], but it is not yet clear how to generalize and
systematize the human creativity used.
20
6 Conclusions
Automation is the future for many cryptographic design tasks. This work successfully demonstrates
automating a complex translation of a scheme from one algebraic setting to another. There was a
demonstrated need for such a compiler both for pairing designers and implementors. Its realization
combined and improved on contributions from the systems [AGH13] and theory [AGOT14] com-
munities. The result is a practical tool, AutoGroup+, that enables secure pairing translations for
everyone.
7 Acknowledgments
The authors thank Masayuki Abe, Jens Groth, Miyako Ohkubo, Takeya Tango for very helpful
discussions regarding this work and their prior CRYPTO 2014 work.
References
[ACD+12] Masayuki Abe, Melissa Chase, Bernardo David, Markulf Kohlweiss, Ryo Nishimaki, and Miyako Ohkubo.
Constant-size structure-preserving signatures: Generic constructions and simple assumptions. Cryptology
ePrint Archive, Report 2012/285, 2012. http://eprint.iacr.org/.
[AG]
[AGH13]
D. F. Aranha and C. P. L. Gouvˆea. RELIC is an Eﬃcient Library for Cryptography. http://code.
google.com/p/relic-toolkit/.
Joseph A. Akinyele, Matthew Green, and Susan Hohenberger. Using SMT solvers to automate design
tasks for encryption and signature schemes.
In ACM Conference on Computer and Communications
Security, CCS’13, pages 399–410, 2013.
[AGHP12] Joseph A. Akinyele, Matthew Green, Susan Hohenberger, and Matthew W. Pagano. Machine-generated
algorithms, proofs and software for the batch veriﬁcation of digital signature schemes. In ACM CCS,
pages 474–487, 2012.
[AGM+13] Joseph A. Akinyele, Christina Garman, Ian Miers, Matthew W. Pagano, Michael Rushanan, Matthew
Green, and Aviel D. Rubin. Charm: a framework for rapidly prototyping cryptosystems. Journal of
Cryptographic Engineering, 3(2):111–128, 2013. http://www.charm-crypto.com/Main.html.
[AGOT14] Masayuki Abe, Jens Groth, Miyako Ohkubo, and Takeya Tango. Converting cryptographic schemes from
symmetric to asymmetric bilinear groups. In CRYPTO, pages 241–260, 2014.
[AGOT15] Masayuki Abe, Jens Groth, Miyako Ohkubo, and Takeya Tango, 2015. Private communications.
[BB04a]
[BB04b]
[BB04c]
[BF01]
Dan Boneh and Xavier Boyen. Eﬃcient selective-id secure identity-based encryption without random
oracles. In Advances in Cryptology - EUROCRYPT 2004, volume 3027, pages 223–238. 2004.
Dan Boneh and Xavier Boyen. Eﬃcient selective-id secure identity based encryption without random
oracles. Cryptology ePrint Archive, Report 2004/172, 2004. http://eprint.iacr.org/.
Dan Boneh and Xavier Boyen. Short signatures without random oracles. In EUROCRYPT, volume 3027,
pages 382–400, 2004.
Dan Boneh and Matthew K. Franklin. Identity-based encryption from the Weil pairing. In CRYPTO,
pages 213–229, 2001.
[BFF+14] Gilles Barthe, Edvard Fagerholm, Dario Fiore, John C. Mitchell, Andre Scedrov, and Benedikt Schmidt.
Automated analysis of cryptographic assumptions in generic group models. In CRYPTO 2014, pages
95–112, 2014.
[BGW05] Dan Boneh, Craig Gentry, and Brent Waters. Collusion resistant broadcast encryption with short cipher-
texts and private keys. In CRYPTO’05, pages 258–275, 2005.
[BLS04]
Dan Boneh, Ben Lynn, and Hovav Shacham. Short signatures from the Weil pairing. Journal of Cryp-
tology, 17(4):297–319, 2004.
21
[BN06]
[CL04]
[CLL+13]
[CLL+14]
Paulo S. L. M. Barreto and Michael Naehrig. Pairing-friendly elliptic curves of prime order. In SAC,
volume 3897, pages 319–331, 2006. http://cryptojedi.org/papers/#pfcpo.
Jan Camenisch and Anna Lysyanskaya. Signature schemes and anonymous credentials from bilinear
maps. In CRYPTO, volume 3152, pages 56–72, 2004.
Jie Chen, Hoon Wei Lim, San Ling, Huaxiong Wang, and Hoeteck Wee. Shorter IBE and signatures via
asymmetric pairings. In Pairing-Based Cryptography–Pairing 2012, pages 122–140. Springer, 2013.
Jie Chen, Hoon Wei Lim, San Ling, Huaxiong Wang, and Hoeteck Wee. Shorter identity-based encryption
via asymmetric pairings. Des. Codes Cryptography, 73(3):911–947, 2014.
[Con]
ACSC Contributors. Advanced crypto software collection. http://hms.isi.jhu.edu/acsc/.
[DMB08]
Leonardo De Moura and Nikolaj Bjørner. Z3: an eﬃcient SMT solver. In Proceedings of the Theory and
practice of Software, TACAS’08/ETAPS’08, pages 337–340, 2008.
[Gal01]
Steven D. Galbraith. Supersingular curves in cryptography. In ASIACRYPT, pages 495–513, 2001.
[Gen06]
[GPS06]
[Gt12]
[Kri15]
[PSV06]
[RCS12]
[Tea]
[Wat05]
[Wat09]
Craig Gentry. Practical identity-based encryption without random oracles.
445–464, 2006.
In EUROCRYPT, pages
Steven D. Galbraith, Kenneth G. Paterson, and Nigel P. Smart. Pairings for cryptographers, 2006.
Cryptology ePrint Archive: Report 2006/165.
Torbjorn Granlund and the GMP development team. GNU MP: The GNU Multiple Precision Arithmetic
Library, 5.0.5 edition, 2012. http://gmplib.org/.
Sathvik Krishnamurthy. HP to Acquire Voltage Security to Expand Data Encryption Security Solutions
for Cloud and Big Data. http://www.voltage.com/blog/releases, February 9, 2015.
Dan Page, Nigel Smart, and Fre Vercauteren. A comparison of MNT curves and supersingular curves.
Applicable Algebra in Eng,Com and Comp, 17(5):379–392, 2006.
Somindu C. Ramanna, Sanjit Chatterjee, and Palash Sarkar. Variants of Waters’ dual system primitives
using asymmetric pairings - (extended abstract). In PKC ’12, pages 298–315, 2012.
EasyCrypt Project Team. Easycrypt: Computer-aided cryptographic proofs. https://www.easycrypt.
info/trac/.
Brent Waters. Eﬃcient identity-based encryption without random oracles. In EUROCRYPT ’05, volume
3494 of LNCS, pages 320–329. Springer, 2005.
Brent Waters. Dual system encryption: Realizing fully secure ibe and hibe under simple assumptions. In
CRYPTO, pages 619–636, 2009.
A Current Eﬃciency Numbers for Type-I and Type-III Pairings
Sym. vs. Asym. Setting
SS1536 (or Type-I)
BN256 (or Type-III)
G1
1536
256
Size (in bits)
G2
1536
1024
GT
3072
3072
Exp. Time (in milliseconds)
G1
5.3 ms
0.2 ms
G2
5.3 ms
1.2 ms
GT
1.0 ms
2.1 ms
Pairing Time
14.9 ms
2.2 ms
Table 1: Comparing Size and Eﬃciency of Pairing-based Curves.
We include current eﬃciency numbers for Type-I and Type-III groups as implemented in the
highly eﬃcient RELIC cryptographic toolkit version 0.4 [AG] (using the GMP library [Gt12] for big
number operations and the default conﬁguration options for prime ﬁeld arithmetic) measured on a
standard workstation.11 In Table 1, we show the diﬀerences between Type-I and Type-III pairings
112.4 GHz Intel Core i5 processor and 8GB of RAM (1067 MHz DDR3) running Mac OS X Lion version 10.7.5
22
at the same security level in terms of group representation and eﬃciency. 12 A typical candidate
for Type-I are supersingular elliptic curves (or SS) [Gal01, PSV06] in which the embedding degree
is typically small (i.e., k ≤ 6). One such example is a supersingular curve at the 128-bit security
level where the prime order of the group is large, |p| = 1536-bits, and the embedding degree is
k = 2. Conversely, one common Type-III candidate at the same security level are Barreto-Naehrig
(BN) [BN06] curves in which the embedding degree is much larger (e.g., k = 12) and the prime
order can be as small as |p| = 256-bits. As reﬂected in Table 1, group operations and pairing times
in the Type-III setting can be drastically more eﬃcient and have shorter representations than the
Type-I setting.
We remark on hashing into Type-I and Type-III pairing groups. In the Type-I setting, it is
feasible to hash arbitrary strings into G, e.g., for the SS curve, hashing arbitrary strings to G takes
on average 36.8 ms. In the Type-III setting (e.g., over ordinary elliptic curves), it is feasible to hash
arbitrary strings into both G1 and G2 independently with diﬀerent costs, e.g., for the BN curve,
hashing to G1 takes 0.04 ms and to G2 takes 0.37 ms on average (a ratio of roughly 9 to 1 from G2
to G1). See [GPS06] for more details.
B SDL Descriptions for Section 4
We now provide examples of the input and output Scheme Description Language (SDL) for Auto-
Group+.
B.1 SDL as Input
First we will show our SDL transcription of the DBDH assumption:
name := DBDH
setting := symmetric
BEGIN :: types
a := ZR
b := ZR