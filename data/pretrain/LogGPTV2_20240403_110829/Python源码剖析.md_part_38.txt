232
答案就在PyErame_New中（见代码清单11-6）。
运行时栈。那么参数所占用的内存空间和运行时栈所占用的内存空间的关系是怎样的呢？
就已经知道，这个E_localsplus所指向的内存块中也包含着Pyhon虚拟机所使用的那个
新建的PyFrameCbject对象的_localsplus中。在分析Python虚拟机的框架时，我们
PyFrameObject对象：随后，在代码清单11-5的[2]处，Python虚拟机将参数逐个拷贝到
数对应的PyFunctionobject对象中保存的PyCodeobject对象被传递给了新创建的
PyFrame_New(PyThreadstate*Estate,PyCodeobject *code,Pyobject *globals,
代码清单11-6
PyFrameobject
[frameobject.c]
第11章Python虚拟机中的函数机制
代码清单11-5的[1]处创建了函数主对应的PyFrameobject对象，在这个过程中，函
Eor （±=0;1f_localsplus[i]
retval=PyEval_DvalFrameEx(f,0);
for（i
fastlocals
Pyobject
PyThreadState
PyFrameobject
/[2]:
[1]：创建与函数对应的PyErameObject对象
一深度探索动态语言核心技术
fastlocals[i]=
code->co_stacksize + code->co_nloeals + ncells + nfrees;
PyTuple_GET_STzE(code->co_cellvars);
PyTuple_GET
拷贝函数参数：
locals)
0：
t*fastlocals,
(GO_OPTIMIZEDGO_NEWLOCALSCO_NOFREE))（
SIZE
从运行时栈到PyFrameObject.f_localpluB
NULb;
+mcells
*stack++;
(code
**gtack;
PyThreadState_GET(）;
"CO
+nfwees;
freevars):
剩余的内存数
NULL）;
---
## Page 263
11.4.3
中f_localsplus如图11-13所示：
但是函数的参数已经乖乖地就位于f_localsplus中了。这时新建PyFrameobject对象
然这两个空间在连续内存之内，但它们界限分明，井水不犯河水。
用于存储函数参数的空间和运行时栈的空间逻辑上是分离的，并不是共享同一片内存，虽
说法，函数的参数存放在运行时栈之前的那片内存中。
清单11-6的[2]处计算出的extras的那段内存中，一定有供函数参数使用的内存。换一种
数的个数，因为函数参数也是局部符号的一种。所以从_localsplus开始，长度为代码
是通过这两条指令完成的。
FAST，又是一对LOAD和SAVE指令，函数在被调用的过程中，对函数参数的读写动作正
def f (name,
[fune_1.py]
的调用动作：
从pyFrame_New创建ryFrameObject对象的过程中可以看到，在f_localsplus中，
当参数拷贝的动作完成后，
在处理完参数后，还没有进入pyEval_EvalFrameEx，所以这时运行时栈还是空的。
前面提到，
劈头盖脸第一条指令就是我们未曾见过的LOAD_FAST，而且后面还有一条STORE_
returnf;
f->f_valuestack=f->f_1ocalsplus+extras;
print
age
位置参数的访问
图11-13进入PyEval_EvalFrameEx之前新建PyFrameObject对象的内存布局
SF
STORE_FAST
LOAD_CONST
INPLACE_ADD
LOAD_FAST
age):
（5y
fstacktop
valuestack
(age)
(age)
就会进入新的 PyEval_EvalPrameEx,
"Rober"
flocalsplus
Python源码剖析
age=5
11.4函数参数的实现
深度探索动态语言核心技术
extras
PyFrameObject
stack
开始真正的函数
233
---
## Page 264
Python源码剖析
234
中辗转腾挪。
而是直接通过一个索引（偏移位置）来访问f_1ocalsplus中存储的符号对应的值对象。
拟机将函数调用时传入的参数，从左至右地依次存放在新建ryFrameobject对象的
f_localsplus中。
的与函数对应的PyFrameobject 对象的f_localsplus中。最终的效果就是，Python虚
数值从左至右压入到运行时栈中，在fast_function中，又将这些参数依次拷贝到新建
在函数执行过程中又是如何被访问，都已经真相大白了。在调用函数时，Pyhon将函数
以后在print中访问参数age时，得到的结果已经是10了。
又通过STORE_FAST将结果放入到f_1ocalplus[1]中，这样就实现了对变量age的更新
而从图11-13中我们已经看到，f_localpius[1]中存放的正是age在完成了加法操作后，
[STORE_FAST]
#aefine SETLocAL(1,
[LOAD_FAST]
#aefine GEmLOcAL(i)(fastlocals[1l)
PyObject*PyEval_EvalFrameEx(PyFrameObjeet *t,
[ceval.c]
第11章Python虚拟机中的函数机制
图11-14中详细地展示了函数在调用及执行的过程中，
在访问函数参数时，Python虚拟机没有按照通常访问符号的做法，去查什么名字空间，
现在，关于Pyhon中的函数的位置参数，我们对它在函数调用过程中是如何传递
原来，LOAD_FAST和STORE_FAST这一对指令是以_localplus这片内存为操作目标
register Pyobjeet **fastlocals
一深度探索动态语言核心技术
goto fast_next_opcode:
SEMLOCAL(oparg,
X= GETLOCAL(oparg）
POP(O:
goto fast_next_opcode)
PUSH(X);
INCREF(X)
三1
Py_XDECREF（Cmp）:）while（O）
GETDOCAL(1)
value)
=
=value:
，参数如何在PyFrameobject
int throwflag)
---
## Page 265
11.4.4
过func_2.py来深入考察Python中函数的默认值机制：
置参数，其实现的机制与一般的位置参数有何不同呢？这就是本节要考察的内容。我们通
如果没有传递value值，那么调用时value的值为默认值1。那么带有默认参数值的位
们调用函数时，
如同C++一样，
deff（a=l
[func2.py]
85
现在我们已经知道位置参数在函数调用的过程中是如何传递和访问的。在Python中，
prlnta+b
D
8
9
STORE_NAME
MAKE FUNOTION
LOAD_CONST
LOAD_CONSM
位置参数的默认值
①fcun_.py对应之PyFrameObject
12
#g=5
"robert"
POP_TOP
CALL_FUNGTION
LOAD_NAME
RETURN_VALUE
PRINT_NEWIINE
PRINT ITEM
BINARY
LOADPAST
LOADMFASTI
D=2）:
如果传递了value参数，那么调用时value的值为我们传递的参数值；
允许函数的参数有默认值。假如函数的参数value的默认值是1，在我
函数调用
ADD
0(a)
(codeobjedt)
图11-14
(None)
age
tobert
函数调用过程中参数的变化序列
--fstacktop
ge
flocalsplus
fvaluestack
Python源码剖析
LOADFAST
函数执行
11.4函数参数的实现
localsplus中的运行时栈部分
PyFrameObect其他部分
age=5
"robert"
flocasplus中的extra部分
?
一深度探索动态语言核心技术
STOREFAST
函数执行
age=10
"robert"
235
---
## Page 266
Python源码剖析
236
令确实将参数的默认值压入了运行时栈，那么接下来，在MAKE_RUNCTION中，会发生什
和符号表。
证我们的想法，来看一看图11-15所示的func_2.py对应的PyCodeObject对象中的常量表
多出了两条LOAD_CONST指令，看上去，这两条语句应该与参数的默认值有关系。为了验
仅将pyFunctionobject对象压入运行时栈，而带参函数还需将参数也压入运行时栈。
编译后的结果都是一样的，其差别是在进行函数调用的时候产生的，无参函数在调用前仅
代码清单11-7
数都是0，
么动作呢，
(=）3
[MAKE FUNCTION]
第11章Python虚拟机中的函数机制
然而在func_2.py的编译结果中，我们发现det语句编译的结果就显出了很大的不同，
回过头看一下func_O.py和func_1.py，我们发现，无论函数是否有参数，其deE语句
再参照函数主的def语句编译后的指令序列，可以看到，开始的两条LOAD_CONST指
RETURNLVALUE
POPTOP
CALL_FUNCTION
LOAD CONST
LOAD NAME
无论函数是否为带参函数。玄机在这里出现了（见代码清单11-7）。
注意，这时MAKE_FUNCTION的参数为2，而以前所见的MAKB_FUNCTION的参
一深度探索动态语言核心技术
//[1]:获得PyCodeobject 对象，并创建PyFuncEionobjeat
CONST
1f（xI=NULL&&oparg >O)
7/[2]：处理带默认值的函数参数
PY_DECRER（V）
err =PyFunction_SetDefaults(x,v）
while
PyEunction_New(v,f->f_globals):
5(None)
PyTuple_SBT_ITEM(y,Oparg,w);
PyTupleNew(oparg);
O（）
图11-15func_2.py对应的常量表和符号表
256
POP(）
S/names>
---
## Page 267
11.4.4.1
代码清单11-8
认值信息提取了出来，并作为参数，传递给了PyEval_EvalCodeEx
EvalCodeEx，在进入PyEval_EvalCodeEx之前，将pyFunctionObject对象中的参数默
所以在代码清单11-8的[2]处，判断将失败，于是Pyton虚拟机将会进入PyEval
将函数的默认参数值设置为函数对应ryFunctionobject对象的func_defaults域了，
0.py，func_1.py就不再相同了。由于在执行MAKE_FUNcTION指令时，Python虚拟机已经
fast_Eunction(Pyobject *func, Pyobject ***pp_stack,Int n,int na,int nk)
名字空间一样，又被塞进了PyFunctionobject这个大包状。
函数和其参数的默认值最终被Python虚拟机捆绑在了一起，它和ryCodeobject、global
defaults的值。如此一来，函数参数的默认值也成了PyFunctlonobject对象的一部分
的默认值从运行时中弹出，全塞到一个PyTupleObject对象中。最后，通过调用
func_2.py中，这个值是2。MAKE_FUNCTION的指令代码会将指令参数指定的所有函数参数
MAKE_FUNCTION的指令参数表示当前在运行时栈中一共有多少个函数参数的默认值，在
建PyFunctionObject对象之后，MAKE_FUNCTION的指令代码会处理函数参数的默认值
int PyFunction_SetDefaulfs(RyObject 本op, PyObject *defaults)
[funcobject.c]
Pyobject
PyCodeObject *co=(PyCodeObject *) PyFunction_GET_CoDE(func)）);
((PyFunctionobjeet*）op)=>funcdefaults=defaults;
代码清单11-7的[1]处创建PyFunctionobject对象的过程我们已经很熟悉了。在创
1/[2]:
int nd
return0;
函数f的第一次调用
Pyobiect
判断是否进入快速通道，argdeEs！=NUILL导致判断失败
PUSH(X);
0：
argdefs
PY_DECREF(V）F
NULL
TCO_OPTIMIZEDTCO_NEWLOCALS
PyFunction_GET GLoBALS(func):
Python源码剖析
11.4函数参数的实现
一深度探索动态语言核心技术
CO_NOFREE)
237