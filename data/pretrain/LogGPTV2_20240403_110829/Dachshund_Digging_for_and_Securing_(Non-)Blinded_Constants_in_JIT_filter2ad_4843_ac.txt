would be to modify the JavaScript engines in the browsers to
incorporate constant blinding in all missing cases (e.g., inlining
integer constants in Chrome’s optimizing compiler or preload-
ing registers in Edge). This would remove the problem of
arbitrary four-byte gadget generation, presumably without too
much overhead. However, to also get rid of two-byte gadgets,
constant blinding schemes in the browsers must be extended
to cover integer constants of all sizes, signiﬁcantly degrading
the performance [2]. In addition, changing the JIT compiler is
not always possible, especially in closed-source browsers; at
the very least, it requires compiler-speciﬁc engineering effort
to cover all browsers.
Alternatively, we propose to randomize the JavaScript code
before the code is delivered to the browser. As DACHSHUND
identiﬁed, the main source of gadgets in JIT-compiled code
is inlined or cached integer constants. Consequently, the main
idea of our defense is to remove these constants by rewriting
the JavaScript code. We prototype our technique as part of
a Web proxy that mediates Web trafﬁc between clients and
servers. Once implemented, our solution protects any client
behind the Web proxy. One could also implement the same
approach as a browser extension to target speciﬁc browsers
separately. Browser-aware implementation can be optimized
to only rewrite the parts of the JavaScript that are attacker-
controllable in the speciﬁc browser, thus reducing the per-
formance overhead caused by the rewriting. However, as our
main goal was to prove the efﬁcacy (and not efﬁciency) of a
solution based on JavaScript rewriting, we opted for a proxy-
based rewriting that is agnostic to the speciﬁc browsers.
The possible downside of a proxy-based solution is that
we rely on all clients in a network to use a Web proxy for
browsing. This also means that the proxy has to intermediate
HTTPS trafﬁc and thus provides custom certiﬁcates for HTTPS
communication between the browser and the proxy. While
this might sound cumbersome, most corporate proxy vendors
offer such capability. HTTPS trafﬁc inspection is de facto
standard in many organizations that leverage next-generation
ﬁrewalls, such as Baracuda Networks [4], Forcepoint [21],
Palo Alto Networks [42], MS Forefront [22], Blue Coat [7],
Fortigate [23], Zscaler [57]. We will discuss this in more detail
in Section VI. Note, however, that the design choice of where
to deploy JavaScript-based rewriting can be changed depending
on the needs.
A. Basic Idea
The core of our idea is to rewrite JavaScript code into
semantically equivalent code that does not contain any integer
constants. There are several alternatives for how integer con-
stants can be replaced. A simple example of such replacement
would be to split an integer constant into parts (similar to
constant blinding), changing the constant X into Y◦Z, where
◦ is any JavaScript operation such that Y◦Z=X. However,
as we modify the JavaScript code, this operation would be
easily folded by the compiler and X would still be emitted.
Another solution is to generate a new Number object every
time a constant is used, e.g., via parseInt, which takes a
string representation of a number as an input and outputs
its corresponding Number object. This replacement would
transform a constant X into a statement: parseInt(’X’).
A drawback of this method is that it executes a parseInt
function call every time an integer constant is used, thus greatly
decreasing performance. In the following, we show how this
can be optimized.
In our prototype, we hide integer constants by replacing
them with global objects. For example, a JavaScript statement
var i=1234 will be replaced by the following pair of state-
ments:
window.__c1234=parseInt(’1’);
window.__c1234=parseInt(’1234’);
These statements will be prepended at the beginning of the
script. During the initialization of these global variables, we
use parseInt such that the assignment does not emit the
constant. In the case of a call to parseInt, the argument is
a string and therefore only the reference to that string (and
not its value) will be emitted to the executable compiled code.
Additionally, as it is seen in the example, we initialize the
same object twice: ﬁrst with some random number, and second
with the original value. This is necessary to trick the optimizer
into thinking that the value of the global object is changing,
otherwise the global integer will be inlined into the compiled
code. This modiﬁcation shows the intuition behind our defense:
First, by replacing integer constants with global objects, we
get rid of integer literals from JavaScript code, which is the
main reason of gadget-emission in Edge; And second, we mark
these global objects as volatile (i.e., they can be modiﬁed by
other parties at any point) by setting their values multiple
times. This will force the optimizer to resolve their values
at runtime instead of inlining them into the code, successfully
7
removing the sources of gadgets in Chrome. We have manually
veriﬁed that compilers replace neither window.__c1234 nor
parseInt(’1234’) with the integer 1234 in none of the
browsers.
However, removing constants from JavaScript code is a
little more complex than that. Because JavaScript has implicit
conversion between types, which can also be inlined, e.g., by
the optimizing compiler of Chrome. Therefore, we have to
additionally protect against possible implicit type conversions.
For example, a JavaScript statement var i=’1234’ & 5678
will also emit 1234 as an integer constant. We handle these
cases by ﬁnding all strings that can be implicitly converted
to integers and call the toString method on them (var
i=(’1234’).toString() & 5678). This returns a new string
object every time it is called and therefore is not optimized.
Other string methods (such as substr) can also be used as
an alternative. There are other possibilities in JavaScript of
implicit type conversions to integers, e.g., from Boolean to
integer (true→1, false→0), from Array to integer ([]→0). To
trigger the conversion, these objects must be used as a part of
arithmetic operations, which will then try to convert them to
the most reasonable integers. We will discuss these cases in
Section VI.
To eradicate all integer constants, we rewrite all possible
places where JavaScript code can be written. We distinguish
between the following ﬁve cases:
(C1) An external JavaScript ﬁle referenced using a src at-
tribute of an HTML script tag, such as:
(C2) JavaScript inside an HTML script tag, such as:
(C3) Inline event handlers, deﬁned inside HTML tags, e.g.:
(C4) Dynamically created JavaScript code, e.g., by using one
of the following methods:
eval("/*JS code*/")
Function("/*JS code*/")
setTimeout("/*JS code*/", 0)
setInterval("/*JS code*/", 0)
(C5) Dynamically created HTML nodes, which an attacker
might use to inject new JavaScript code, such as:
head.appendChild(/*DOM node*/)
el.innerHTML=""
In the following, we will describe the implementation
details of how we actually handled these cases.
B. Implementation Details
We implemented our prototype in Node.js [39], using the
http-mitm-proxy package [30] as a basis for an HTTP proxy. To
identify all constants in JavaScript code, we use Esprima [19],
a JavaScript parser with full support for ECMAScript 6. We
leverage the abstract syntax tree (AST) to identify integer
constants or string constants representing numbers. We lever-
age Estraverse [20] to traverse the AST and replace AST
nodes (e.g., replacing number literals with global objects).
Finally, we use Escodegen [18] to generate JavaScript code
that corresponds to the updated AST.
The general workﬂow of the rewriter can be summarized
in the following steps:
(RW1) The rewriter takes JavaScript code as input and derives
its AST.
(RW2) The rewriter traverses the generated AST. For each
literal node (i.e., integer or string immediate values), the
rewriter distinguishes the following cases:
• Integer
(e.g.,
constants
node
a
corresponding
window.__c123).
initialization
code
with
(e.g.,
adds
init+=’window.__c’+
123+’=parseInt("’+123+’");’)
123)
to
Then,
for
are
the
the
replaced
statement
rewriter
(e.g.,
this
node
• String constants representing numbers (e.g., ’1234’)
are replaced with an AST node of the statement:
(’1234’).toString() to avoid implicit casts to
(possibly constant) numbers.
(RW3) Finally, the rewriter generates JavaScript code that
corresponds to the updated AST, notably including the
global variables’ initialization scripts.
The JavaScript rewriter becomes an integral part of the
Web proxy. That
is, we modify responses from server to
client (i.e., browser). If the response is a JavaScript ﬁle (C1),
we directly return the rewritten result to the client. In case
of an HTML ﬁle, we extract and rewrite inline JavaScript
between script tags (C2) and inline event handlers (C3). For
dynamic code (C4), we inject new JavaScript code as the
ﬁrst element of the head tag, which hooks the dynamic code
generator functions (e.g., eval, Function, setTimeout,
setInterval) and dynamically rewrites the code (i.e., the
ﬁrst argument of these functions) before calling the original
function. For dynamic HTML elements (C5), we attach a
mutation observer to the document object. This allows us to
react to DOM tree modiﬁcations by the attacker. For each node
that is modiﬁed in the DOM tree, we check if it is a script tag
or if it contains a script tag in its child nodes, and if so, we
extract and rewrite its JavaScript content.
for
in order
Note that
to rewrite dynamically generated
code (e.g.,
(C4) and (C5)), we use synchronous
XMLHttpRequest requests from our hooked JavaScript func-
tions and mutation observer to the proxy. The JavaScript code
that needs to be modiﬁed is added to the request. The response
from the proxy contains the rewritten JavaScript code.
C. Evaluation
In the following, we evaluate our implemented defense
technique. First and foremost, we test
the efﬁcacy of the
solution and apply DACHSHUND to reveal if there are re-
maining attacker-controlled constants in the JIT-emitted code.
Second, we evaluate the performance overhead of the proposed
solution. As we rewrite the JavaScript code that is executed in a
browser, we consider two sources of overhead: (i) the overhead
caused by rewriting JavaScript code, and (ii) the performance
overhead of the rewritten JavaScript code, running inside a
browser. We evaluate the latter in Google Chrome 50 and
Microsoft Edge 25. The underlying system is Windows 10
running on an Intel Core i7-2670QM machine with 2.20GHz
frequency and 6GB RAM.
8
m = i ? __c12345678 :
__c23456789
switch(j){
case __c23232323: m++;
}
__c34343434[j]
m = j ˆ __c45454545
globvar = __c56565656
globarr[i] = __c67676767
return __c12121212
0 test rax,rax
1 je 5
2 mov rbx,&__c12345678
3 mov ebx,[rbx+13h]
4 jmp 7
5 mov rbx,&__c23456789
6 mov ebx,[rbx+13h]
0 mov rbx,&__c23232323
1 mov ebx,[rbx+13h]
2 cmp edx,ebx
3 jne XXX
0 mov rax,&__c34343434
1 mov eax,[rax+13h]
2 ;set other parameters
3 call GetProperty
0 mov rbx,&__c45454545
1 mov ebx,[rbx+13h]
2 mov rdx,[rbp+20h]
3 xor ebx,edx
0 mov rax,&__c56565656
1 mov edx,[rax+13h]
2 mov rax,&globvar
3 mov [rax+0Fh],rdx
0 mov rax,&__c67676767
1 mov eax,[rax+13h]
2 mov [rbx+XXX],eax
0 mov rax,&__c12121212
1 mov eax,[rax+13h]
Fig. 3. Gadget emitting JavaScript statements in Chrome and their corre-
sponding disassembly after rewriting. &__cXXXXXXXX denotes the address of
the corresponding JavaScript global variable.
1) Rewriting Efﬁcacy: First, we evaluate the correctness of
the rewriter to see if all integer constants are indeed eradicated
from the JIT-compiled code. Therefore, we tested the rewriter
against all JavaScript functions found by DACHSHUND. Ini-
tially, we veriﬁed that all these functions actually emitted
integer constants, i.e., we did not get any false positives from
DACHSHUND. We found that all 22 different functions in
Chrome and 21 in Edge did emit integer constants into the
code. We then modiﬁed these functions with our JavaScript
rewriter and ran the experiment again. After rewriting, none
of the JavaScript functions emitted any integer constants in
the JIT code, neither for Chrome nor Edge, proving the
completeness of the rewriter. Figure 2 shows the disassembly
of the native code of the gadget-emitting statements in Chrome,
whereas Figure 3 shows the same statements and their disas-
sembly after applying our rewriter.
The code examples, found by DACHSHUND, cover only di-
rectly used JavaScript integer constants. While this is sufﬁcient
for Edge, where the source for emitted gadgets are integer
caching, optimizing compiler of Chrome can still inline the
values after implicit conversion. To test the rewriting efﬁcacy
of implicit constants (i.e., from string objects to integers in
our case), we did manual veriﬁcation. More speciﬁcally, we
created JavaScript functions containing string literals that are
implicitly converted to integer types. After rewriting, all these
string literals were converted to string objects (via invoking
toString on them), and thus did not emit any integer values.
However, strings are not the only JavaScript objects that are
m+=0x12000000|
0x00340000|
0x00005600|
0x00000078;
m+=__c12000000|
__c00340000|
__c00005600|
__c00000078;
0 mov ebx, [rbx+13h]
1 add ebx,12345678h
0 mov rax,&__c12000000
1 mov eax,[rax+13h]
2 mov rbx,&__c00340000
3 mov ebx,[rbx+13h]
4 or ebx,eax
5 mov rax,&__c00005600
6 mov eax,[rax+13h]
7 or eax,ebx
8 mov rbx,&__c00000078
9 mov ebx,[rbx+13h]
10 or ebx,eax
Fig. 4. Constant splitting in JavaScript (Chrome) before and after rewriting.
implicitly converted to integers. For example, Hieroglyphy [32]
uses conversion between arrays ([...]) and objects ({...})
to integers. Using these conversions inside the function does
not emit attacker-controlled values. However, they can be used
by the attacker to initialize a global variable and then use
the global variable inside the function to inject the required
value. Because the global variable will be initialized once, by
the attacker, it will be inlined into the code (by Chrome),
emitting the gadgets. This problem can be solved using a
similar technique that we used before. That is, we can replace
global variable initializations in the code by initializing the
global variable with a random number ﬁrst, and then setting it
to the original value. This way, optimizer will have to resolve
the value of the global variable at runtime and will not be able
to inline it into the code. Although we manually veriﬁed that
this modiﬁcation indeed removes the attacker-controlled values
from the code, it is not included in the current implementation
of our defense scheme.
try to split
Other obfuscation techniques of JavaScript code also con-
tain integer splitting to hide their values. For example, in-
stead of having a single constant var i=0x12345678, the
attacker might
into separate bytes):
var i=0x12000000|0x340000|0x5600|0x78. After opti-
mization,
these constants will be folded by the compiler
into a single integer and will be emitted into the JIT-code.
However, our rewriter will turn each of these constants into
global objects, forbidding both constant folding and inlining
(Figure 4).
it
(e.g.,
2) Rewriting Overhead: To evaluate the overhead of the
JavaScript rewriter, we chose to measure the rewriting over-