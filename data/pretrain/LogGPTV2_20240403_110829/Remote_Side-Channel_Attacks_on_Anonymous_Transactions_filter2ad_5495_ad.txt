tack was performed in an “idealized” setting that ignores the
time taken by the network and transaction veriﬁcation, which
would add signiﬁcant noise and further increase the sample
complexity of a full remote attack. Our proof-of-concept of
course also conﬁrms the Zcash team’s suspicion that a co-
located adversary could exploit timing side-channels to re-
cover a user’s secret keys.
USENIX Association
29th USENIX Security Symposium    2747
104105106107Time [s]050010001500200025003000Number of Points4.3 Remediation
Fixing the REJECT attack is simple: treat a plaintext parsing
failure as a decryption failure and ignore the offending cipher-
text. This ﬁx was added in release 2.0.7-3 of Zcash [17, 20].
The PING attack exploits a lack of isolation between a
Zcash node’s P2P and wallet components. Release 2.0.7-3
addresses this issue by refactoring the wallet into a separate
thread, that periodically pulls the list of recent transactions
and calls TrialDecrypt. The timing of the TrialDecrypt call
thus no longer affects the timing of other P2P functionalities.
Yet, release 2.0.7-3 only ﬁxes the PING attack on unconﬁrmed
transactions. Refactoring the node’s processing of new blocks
was more complex, and ultimately ﬁxed in release 2.1.1 [22].
A simple defense against the type of attacks we present is
to run two Zcash nodes, a “ﬁrewall” node that connects to the
P2P network and a local node holding the user’s keys that
only connects to the ﬁrewall. This setup requires storing and
validating the entire blockchain twice, yet prevents all our
attacks — except for the DoS attack in Section 4.2.3.
We note that running a Zcash node over Tor [19] does
not prevent our attacks. A P2P adversary with an active Tor
connection to a victim’s P2P node could still link transactions
that pay the victim, or link the victim’s diversiﬁed addresses.
Finally, we believe that Zcash should produce a side-
channel resistant implementation of their core cryptographic
primitives. Side-channel resistance may have seemed like a
secondary concern, given that the Zcash protocol is primarily
non-interactive. As our attacks have shown, a single bug in
the in-band secret distribution routine inadvertently allowed
for a two-way interaction between an attacker and victim,
thereby opening up a potential remote timing side-channel on
the Zcash non-interactive key-exchange mechanism.
5 Attacks on Unlinkability and Anonymity in
Monero
We now describe side-channel attacks on unlinkability and
user anonymity in Monero. These attacks differ conceptually
from those we found in Zcash, as the Monero client separates
the wallet and P2P components into different processes.
While such a design is safer in principle, we found that
wallet actions still leak to a remote adversary through network
trafﬁc and timing side-channels. First, we describe attacks that
infer receipt of a transaction by passively analyzing the trafﬁc
between a wallet and remote node (Strategy 1 in Section 3.2).
Second, we show that even if a user’s wallet and node are co-
located, the local wallet-to-node interactions affect the node’s
P2P behavior, which leaks to a remote adversary via a timing
side-channel. This latter attack combines aspects from both
of the attack strategies described in Section 3.2.
5.1 Unlinkability in Monero
We ﬁrst provide a high-level overview of Monero’s use of
stealth-addresses, a technique for deriving a re-randomized
public key for every transaction sent to the same recipient, so
as to guarantee unlinkability.
A Monero user, Alice, has a public key of the form
(A,B) = (aG,bG) ,
where G is a base point in an elliptic curve group. The pair
of scalars (a,b) ∈ Z2
q is Alice’s secret key. To receive funds
from another user, Bob, Alice shares her public key (A,B)
with Bob.
When Bob sends a transaction to Alice, he produces a ran-
domized public key via a Difﬁe-Hellman key exchange with
the ﬁrst half of Alice’ key (A), which is further mixed with the
second key half of the key (B). The goal is to produce a point
P such that only Alice can compute the discrete logarithm of
P with respect to G.
Concretely, Bob picks an ephemeral secret key r R←− Zq and
computes
P = H (rA)· G + B ,
where H : {0,1}∗ → Zq is a hash function. The public keys P
and R = rG are included in the transaction. Note that P hides
Alice’s public key (A,B).
To later spend the received UTXO, Alice needs to prove
knowledge of a scalar x such that P = xG. Given (P,R), she
can compute this secret as
(cid:123)(cid:122)
(cid:125)
P = H (rA)· G + B = (H (aR) + b
(cid:124)
)· G .
x
In-band secret distribution. As with Zcash’s in-band se-
cret distribution described in Section 4.1, the sender transmits
some secret information to the receiver as part of the trans-
action. In Monero, the only information the receiver needs
is the amount of transacted funds (which is hidden inside a
commitment). For this, the sender derives a symmetric key k
from the shared secret P and encrypts the transaction amount
under k. The ciphertext C is appended to the transaction.
Blockchain scanning. Upon seeing a transaction with keys
(P,R) and ciphertext C, a user with private key (a,b) and
public key (A,B) ﬁrst computes
x = H (aR) + b
P(cid:48) = xG ,
and checks whether P(cid:48) = P. If the points match, the user is
the transaction’s payee. The user further decrypts C using a
symmetric key k derived from P. This extra decryption, and
some bookkeeping for received funds, is the basis for the
timing side-channel attacks described in Section 5.3.2.
2748    29th USENIX Security Symposium
USENIX Association
5.2 Monero Deployments
Before introducing our attacks, we discuss typical deploy-
ments of the ofﬁcial Monero client. While all common setups
are subject to some form of our attacks, some are more vul-
nerable than others.
Remote nodes. Due to memory and computation re-
quirements of P2P nodes, many users connect their wal-
let to a remote node, possibly hosted by a third-party (e.g.,
moneroworld.com). By default, Monero wallets connect to a
third-party node upon creation, until a local node downloads
the blockchain (a process that can take several days).
Since a P2P node cannot access the wallet’s keys, using a
third-party node is safe in principle. Yet, some privacy risks
are known (e.g., the node’s host learns the wallet’s IP address
and can launch an easily detectable attack to trace the wallet’s
transactions [36]). However, there are no known attacks that
allow a third-party node to link transactions, nor any known
attacks on wallets that connect to a remote owned node or to
a local node. We show examples of such attacks.
Wallet types. The Monero client has three wallet imple-
mentations, whose distinct refresh policies impact our attacks.
The main RPC interface — and the GUI wallet built on top
of it — refresh at ﬁxed intervals (every 20 or 10 seconds)
to fetch new blocks and unconﬁrmed transactions from the
P2P node. The command-line interface (CLI) wallet refreshes
every second, but only fetches new blocks of conﬁrmed trans-
actions. While all wallet types are vulnerable, the CLI wallet
is susceptible to different attacks. We focus here on the RPC
and GUI wallets, and discuss the CLI wallet in Appendix A.
5.3 Our Attacks
Our attacks exploit differences in the interactions between
a wallet and node, when the wallet is the payee of a new
unconﬁrmed or mined transaction.
If the wallet connects to a remote node, a network adversary
(or a malicious remote node) can infer receipt of a payment by
passively monitoring the encrypted trafﬁc between the wallet
and remote node (see Section 5.3.1 and Section 5.3.2).
Moreover, even if a user’s P2P node and wallet are co-
located, we show that a P2P adversary can still exploit side-
channels to infer when the wallet receives a payment. We
show an active attack that sends requests to a victim’s P2P
node and times the responses, in order to reveal lock con-
tention over the victim P2P node’s resources that indicates
the receipt of a payment (see Section 5.3.3).
As in Zcash, these attacks further enable linking a known
public key to the IP address of the owner’s P2P node or wallet,
as well as linking of a user’s diversiﬁed addresses.
Figure 6: Side-channels in the communication between a
Monero wallet and P2P node. Left: a trafﬁc analysis side-
channel (Section 5.3.1). The wallet polls its node for new
transaction hashes, and requests transactions Tx1 and Tx2.
During its next refresh, the wallet re-requests Tx1, which re-
veals that it is the payee. Right: a timing side-channel (Sec-
tion 5.3.2). Because the wallet is the payee of Tx1, the process-
ing time for this transaction is increased. The delay before the
wallet’s next request reveals that it is the payee of Tx1.
Experimental Setup. Our experimental setup is similar to
the one we used for Zcash. We evaluate all our attacks on
release v0.14.1.0 of Monero, before the vulnerabilities were
ﬁxed in response to our disclosure. For experiments in a WAN
setting, the victim runs on a machine in Zürich (quad-core
Intel i7-7700 PI:EMAIL with 8GB of RAM running
Ubuntu 18.04.2) and the remote attacker runs on a Google
cloud instance in London (N1 standard instance). We measure
an average round-trip latency of 21 ms, with sub-millisecond
standard-deviation.
5.3.1 Trafﬁc Analysis Attacks for Remote Nodes
We ﬁrst describe attacks that exploit the communication pat-
terns between a wallet and remote node. Upon an automatic
refresh, the wallet ﬁrst requests the list of unconﬁrmed trans-
actions from the node, and receives a list of hashes. It then
requests the bodies for two types of transactions: (1) those
that the wallet has not processed before; and (2) previously
seen transactions of which the wallet is the payee.
A malicious remote node thus trivially learns which trans-
actions pay the wallet, by reading the wallet’s requests. Even
if the remote node is trusted, a passive network adversary can
detect the wallet’s transaction request (the communication
between wallet and node is easy to ﬁngerprint, as the wallet
refreshes at ﬁxed intervals). The mere presence of this request
can leak that the wallet was the payee of a transaction. With
Monero’s trafﬁc in May 2020 (10,000 transactions per day,
or one every 9 seconds on average) it is common that no new
transaction enters the mempool between two wallet refreshes.
If the wallet issues a transaction request even though the mem-
pool has not changed, the request must be for a previously
seen unconﬁrmed transaction that pays the wallet.
USENIX Association
29th USENIX Security Symposium    2749
get_hashesH1, H2get_tx{H1, H2}Tx1, Tx2...get_hashesTx1...Process Tx1Sleepget_hashesH1, H2get_hashesTx2...Process Tx2Sleepget_hashesget_tx{H1}The attack extends to blocks with N > 1 transactions. The
adversary ﬁrst estimates the time taken to process N trans-
actions that do not pay a wallet, and compares this estimate
to the observed delay. Even though the time to process non-
paying transactions varies slightly from one transaction to
another, this variation is negligible compared to the multi-
millisecond delay incurred when processing a payment.
5.3.3 Timing Attacks for Local Nodes
The attacks from Section 5.3.1 and Section 5.3.2 require
that the victim’s wallet connects to a remote node. We now
describe a more complex attack that applies even to a co-
located wallet and node.
In this case, a remote adversary cannot observe communi-
cation patterns between the victim’s node and wallet. Yet, we
develop an attack that lets a P2P adversary infer these commu-
nication patterns. Speciﬁcally, we show that an attacker can
detect when a remote wallet issues a transaction request to its
node. As we described in Sections 5.3.1 and 5.3.2, the pres-
ence of this request (or the time between two requests) leaks
that the wallet is the payee of an unconﬁrmed transaction.
Our attack exploits overly-coarse locking in Monero’s P2P
nodes. When processing a transaction request — sent either
by a wallet or by a peer via a get_objects message — the
P2P node acquires a global lock on its mempool. Thus, if a
P2P adversary sends a get_objects message right after a
request from the victim wallet, lock contention in the P2P
node will delay the response to the attacker. The chances of
lock contention are high as the P2P node validates requested
transactions before releasing the lock, which results in the
lock being held for tens of milliseconds upon a wallet request.
To reduce the risk of the attacker’s request locking out the wal-
let’s request, the attacker only sends requests for non-existing
transactions so that the lock duration is small. Observing the
size of the response delay indicates to the attacker whether
the wallet has issued a transaction request to its node, or not.
In turn this tells the attacker if a particular transaction is a
payment to the target wallet or not.
Evaluation. The timing difference induced by the lock con-
tention depends on the current size of the node’s memory pool.
With 20 transactions in the mempool, the lock is acquired for
about 15-20 ms upon a request from the wallet.
We ran the attack in a WAN, with the victim’s wallet and
node co-located in Zürich, and an attacker in London. The
memory pool contains 20 transactions one of which pays the
wallet.6 Every 10 seconds, the wallet refreshes and sends a
transaction request (as there is a payment for the wallet in the
6According to https://moneroblocks.info, during May 2020, Mon-
ero’s blocks contained over 18 transactions on average, with about 35% of
blocks containing at least 20 transactions. Thus, the memory pool contained
at least 20 transactions when those blocks were mined. Note that an adversary
can artiﬁcially increase the mempool size by sending dummy transactions
with the minimum transaction fee.
Figure 7: Timing of block requests in Monero. Plots the
delay between block requests from a wallet to a remote node,
when the ﬁrst block has one transaction for the wallet (left), or
for another user (right). The experiment is repeated 20 times.
We validated the attack in a local Monero network, but note
that the attack succeeds with 100% accuracy regardless of
the network type, because it relies only on the presence or
absence of transaction messages and not timing signals.
5.3.2 Timing Attacks for Remote Nodes
In addition to the number of network requests exchanged
between a wallet and node, we now show that the time elapsed
between requests also leaks whether a wallet was paid.
For each new transaction, the wallet checks if it is the trans-
action’s payee. If so, it further decrypts the obtained value
(see Section 5.1 for more details). As a result, processing a
transaction takes more time if the wallet is the payee of that
transaction (the delay on a desktop machine is about 2-3 ms).
This difference in processing time leads to two timing
attacks. The ﬁrst targets the processing of new blocks. Upon
a refresh, the wallet serially downloads a new block from
the node and processes its transactions. The time between
two block requests thus leaks the processing time of the ﬁrst
block’s transactions. The second attack targets unconﬁrmed
transactions. Recall that the wallet refreshes at ﬁxed intervals