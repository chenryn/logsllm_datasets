tionships, and information on possible return values for the
parameters and functions. For some services, no entry was
found in the msdn database. For these, only a search in the
system header ﬁles found the speciﬁcation of those services.
Unfortunately the header ﬁle does not include information
on return values etc. except for the C-type used. The header
ﬁles are included as part of the SDK for the target and ac-
cessing them does not violate our black-box approach.
The estimated Service Error Permeabilities (cid:1)P DS
i
x.y and
i
(cid:1)P OS
x.z are the ratios of detected errors, at the OS-service
level to the number of injected errors for each location. The
estimated values of OS Service Error Exposure ((cid:2)Ej) and
Driver Error Diffusion ((cid:2)Dj) can be calculated using the es-
timated Service Error Permeabilities using Eqs. 3 and 4.
6. Error Propagation Results
Driver
Serial
Ethernet
# Services
Imported
Exported
50
42
10
12
Test
cases
411
414
Activated
cases
43%
55%
Table 3. Overview of the target drivers.
Table 3 overviews the target drivers used in this study.
The two drivers have similar number of services in their in-
terfaces to the OS (60 and 54) which translates into a similar
number of test cases. The number of test cases depends on
the number of services, the number of parameters targeted
and the test cases deﬁned for each type. The selection of er-
rors for each type is discussed in Sec. 3.1 and Table 1 & 2.
The drivers differ in the number of activated test cases, i.e.,
when an injected error is in fact executed, where the net-
work driver has a higher activation rate (55% against 43%).
The activation rate is simply a measure of how many ex-
periments actually execute the error. The time to execute
the experiment depends on the number of experiments per-
formed. Currently, using four separate boards in parallel,
the full experiment time is ﬁve to six hours including set-
OS Service
Tests
CreateThread
CreateEventW
InterruptInitialize
memcpy
Sleep
LeaveCriticalSection
LocalAlloc
EnterCriticalSection
InitializeCriticalSection
memset
Cumulative
13
6
14
11
5
1
9
1
1
15
76
Fail. Class
2
3
2
1
1
1
1
0
0
0
0
9
1
4
0
10
3
0
0
5
1
1
1
25
NF
6
4
3
7
4
0
4
0
0
14
42
3
0
0
0
0
0
0
0
0
0
0
0
Table 4. Serial driver service errors for
cerfio serial.Dll.
OS Service
Tests
FreeLibrary
LoadLibraryW
NdisAllocateMemory
VirtualCopy
KernelIoControl
VirtualAlloc
memset
NdisMSetAttributesEx
NdisMSetAttributesEx
NdisMRegisterInterrupt
RegOpenKeyExW
NdisOpenConﬁguration
memcpy
CreateMutexW
NKDbgPrintfW
GetProcAddressW
Cumulative
3
3
20
16
18
18
15
16
16
17
17
3
11
5
3
6
187
Fail. Class
2
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
0
0
0
14
13
11
9
6
6
6
5
3
3
2
1
1
80
NF
1
2
19
2
5
7
6
10
10
11
12
0
8
3
2
5
103
3
2
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3
Table 5. Ethernet driver service errors for
91C111.Dll.
Following the error model of Sec. 3.1, Table 4 shows
the results of the experiments for the serial port driver
cerfio serial.Dll with respect to the OS services
used by the driver. We have selected only those services
which resulted in failures and indicated the number of er-
ror propagation observations, not their location. Table 5
shows the corresponding results for the Ethernet driver
91C111.Dll which has more services leading to errors
compared to cerfio serial.Dll. The rows in the ta-
bles are ordered according to the severity of the failures. For
cerfio serial.Dll we see that no service leads to a
crash of the system. For 91C111.Dll on the other hand,
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
FreeLibrary and LoadLibrary are both vulnerable services
(Table 5). 91C111.Dll does not have as many cumula-
tive Class 2 failures as cerfio serial.Dll (only one
compared to nine) which indicates that using a few wrap-
pers would remove all severe error propagation paths (Class
2 and Class 3 failures).
Looking from the OS service point of view, Tables 6 and
7 show the OS services tested, together with the results of
the experiments, i.e., the OS Service Error Exposure calcu-
lated using Equation 3. Alongside, the number of failures
for Class 1, we also include the number of No Failure obser-
vations (NF). The Class 2 (failure and speciﬁcation viola-
tion) and Class 3 (crash/hung) affect each OS service listed
the same way. This effect is speciﬁc to the experiments con-
ducted and does not translate into a general statement of the
OS behavior. For Class 2 failures only the driver speciﬁc
test application was affected. Thus the OS Service Error
Exposures are calculated using only Class 1 failures. From
these tables, one can ﬁnd the services that are more (on a
relative scale) exposed to errors propagating in the system.
For some services the number of propagated errors is zero,
indicating that the function was not affected by any of the
errors injected (from Class 1). On top of the OS services
tested (Table 6) we have also included the correctness as-
sertions, which detect whether the correct information was
received from the host computer. In this case Correctness 1
failed 27 times, which indicates that the ﬁrst round of testing
done in the application failed, where as the second round
(Correctness 2) did not. This is not surprising given that
each error is injected once.
As can be seen in both tables, the results are grouped
in two categories. This shows how the results of the ex-
periments “cluster”, i.e., an error in one service implies
an error in another. This indicates dependencies across
services, as well as non-dependencies (or at least indica-
tion of weaker dependency). Some of these dependen-
cies are expected, for instance that CreateFile affects Read-
File and WriteFile (Table 6). Some (non-)dependencies are
more unexpected, for instance that SetCommState is not
affected by CreateFile. For both drivers, only one cluster
appears, with 27 cases for 7 services for the serial driver
cerfio serial.Dll and 85 cases for three services for
the Ethernet driver 91C111.Dll.
For the experiments in this case study, no OS service (si)
experienced failure as a result from more than one driver,
i.e., the OS Service Error Exposure is equal to the sum of
the Service Error Permeabilities for each driver for this ex-
periment. This suggests that there is little correlation be-
tween failures in the OS services tested for both drivers.
Table 8 shows the Driver Error Diffusion values for the
target drivers. The values for the different failure classes are
presented separately as they have different failure impacts.
A Class 3 failure naturally has higher impact than a Class
OS Service
Correctness 1
CreateFile
GetCommState
GetCommTimeouts
SetCommTimeouts
ReadFile
WriteFile
CloseHandle
Correctness 2
SetCommState
strlen
Failure Class
NF
384
384
384
384
384
384
384
411
411
411
411
1
27
27
27
27
27
27
27
0
0
0
0
2
9
9
9
9
9
9