9
10
11
12
13
14
15
16
17
18
19
20
21
if ∃M ∈ W k(j) such that |M ∩ J| > τ then
else
anomaly← Massive;
anomaly← Unresolved;
return anomaly;
(cid:2)∈L Dk((cid:3));
23 S ←(cid:2)
Algorithm 4: j.fullcharacterize()
24 S ← S \ {j};
25 C ← {};
26 R ← L;
27 while R (cid:5)= ∅ and ¬ j.check(C) do
28
29
30
Take any (cid:3) ∈ R;
R ← R \ {(cid:3)};
C ←j.isolate(S,L \ {(cid:3)},C,(cid:3));
31 if j.check(C) then
anomaly← Unresolved;
32
33 else
anomaly← Massive;
34
the set of points that are covered by both sliding-windows
Wk and Wk−1 are appended to Mk(j). Note that if this
new set B includes an existing one B(cid:2) in Mk(j) then B
replaces B(cid:2) (lines 17–19). Sliding-window Wk continues to
move along the ﬁrst dimension until either the ﬁrst coordinate
of the pivot is equal to p1,k(j) or the intersection between Wk
and Wk−1 is empty. At this point, Wk is moved to its next
position along the second dimension and the same process is
reiterated until Wk has been moved along the d dimensions.
If Nk(j) ∩ Nk−1(j) (cid:10)∈ Mk(j) then sliding-window Wk−1 is
moved to its next pivot (which is computed as for Wk) and
Wk is re-positioned to its initial pivot pk(0). This is achieved
in a recursive way.
Algorithm 3 presents the pseudo-code run by any device
j ∈ Ak to determine whether it has been impacted by an
767676
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:05:15 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 5: j.isolate(S,L,C,(cid:3))
Data: S : set of devices that belong to a dense motion
Output
containing a device of Lk(j)
: A collection C that satisﬁes Relation 8 of Corollary 8
s ← |M ∩ S \(cid:2)
for M ∈ W k((cid:3)) do
for B ∈ {B ⊆ M ∩ S | |B| = s and j /∈ B}
do
Bi∈C Bi|;
while s > τ do
1 begin
2
3
4
5
C ← C ∪ {B};
S ← S \ B;
Take any m ∈ L;
if L \ {m} (cid:5)= ∅ then
if j.check(C) then
C ←j.isolate(S,L \ {m},C, m);
return C;
6
7
8
9
10
11
12
13
14
s ← s − 1;
return C;
isolated anomaly (lines 4–5, direct application of Theorem 5),
by a massive one (lines 6–21, direct application of Theorem 6)
or whether it is in an unresolved conﬁguration (line 23). In
the latter case, if j wants to know whether it has impacted by
a massive anomaly then it runs the necessary and sufﬁcient
condition presented in Theorem 7. This consists in replacing
line 20 of Algorithm 3 by the pseudo code presented in Algo-
rithm 4. This algorithm iterates over all the devices in Lk(j)
and looks for a collection of dense motions containing devices
in Lk(j) (procedure isolate()) until one satisﬁes Relation 8 of
Corollary 8 which is achieved by procedure check(C).
VII. PERFORMANCE EVALUATION
A. Simulation settings
This section is devoted to the performance study of our
algorithms. Four main aspects have been analysed. The com-
plexity in time has been evaluated by measuring the aver-
age number of operations executed per device to be able
to take a decision (i.e., Isolated/Massive/Unresolved). Then
the effectiveness of Theorem 6 with respect to Theorem 7
has been analysed by measuring the percentage of massive
anomalies that Theorem 6 misses to detect. The adaptivity
of our algorithms to various sampling frequencies has been
studied. Finally, the pertinence of our model with respect to
a ground truth has been evaluated by measuring the number
of isolated errors that are considered as massive ones due
to restriction R3 of the model. All these results have been
obtained by running extensive simulations. We have tested
around 10, 000 different settings of the following parameters:
n,
the number of devices in the system, τ the threshold
that distinguishes massive from isolated anomalies, and r the
consistency impact radius. The number of services d accessed
by each devices has been set to 2, leading to a 2-dimensional
QoS space E. The initial distribution of the devices in E
follows a uniform distribution, denoted by S0. Then for each
discrete time k ≥ 1, conﬁguration Sk is generated as follows.
A number A of points with A ∈ [[1, 80]] are randomly chosen
in Sk−1. Then, for each chosen point j, with probability G
less than τ points are randomly chosen in a ball of radius
r centred at j, and with probability 1 − G, t points are
randomly chosen in a ball of radius r centred at j, with t
varying from τ to the number of points in this ball. This allows
to respectively simulate isolated and network errors. In both
cases, all these chosen points (cid:2) are moved to another location
uniformly chosen in E, and ak((cid:2)) is set to True.
We now precise how both parameters r and τ are selected.
As previously said in Section III-C, if strictly less than τ + 1
devices have an abnormal trajectory due to the same error then
none of these devices can belong to a τ-dense motion. In other
words, we need to tune parameters r and τ in such a way that
the probability of having more than τ errors impacting devices,
which are at no more than 2r from each other, is negligible.
We denote by Nr(j) the random variable representing the
number of devices in the vicinity of device j and by Fr(j)
the random variable equal to the number of devices impacted
(cid:5)
by an isolated error in the vicinity of device j. We have
P{Nr(j) = i} =
j(1−qj)n−1−i with qj the probability
qi
that a device (cid:2) is in the vicinity of device j. Given the position
p(j) of device j, the vicinity V ⊂ E of device j is deﬁned
by V = {x ∈ E | (cid:3)x − p(j)(cid:3) ≤ 2r}. We are interesting in
computing P{Fr(j) > τ}. We have
P{Fr(j) > τ} = 1 − τ(cid:3)
= 1 − n−1(cid:3)
P{Fr(j) = (cid:3) | Nr(j) = m}P{Nr(j) = m}
(cid:5)
(cid:4)
= 1 − n−1(cid:3)
τ∧m(cid:3)
τ∧m(cid:3)
P{Fr(j) = (cid:3)}
P{Nr(j) = m}.
b(cid:2)(1 − b)m−(cid:2)
n−1
m=0
(cid:2)=0
(cid:2)=0
(cid:4)
i
m
(cid:3)
m=0
(cid:2)=0
where b is the probability that an isolated error impacts a
device in the time interval [k − 1, k] and the minimum of x
and y is denoted by x ∧ y. This leads to
P{Fr(j) > τ}
= 1 − n−1(cid:3)
τ∧m(cid:3)
j (1 − qj)n−1−m.
qm
b(cid:2)(1 − b)m−(cid:2)
(cid:4)
(cid:5)
(cid:4)
(cid:5)
n − 1
m
m
(cid:3)
m=0
(cid:2)=0
Now, given a small constant ε, r and τ are tuned so that
the probability of having more than τ independent errors
that impact close devices is negligible, that is P{Fr(j) ≤
τ} < 1 − ε. Figure 6(a) plots the curve of the cumulative
distribution function of Nr(j) as a function of the size m of j
neighbourhood and for different values of r. This curve clearly
illustrates the impact of r on the size m of j neighbourhood.
An interesting value for a total population of n = 1000 devices
is r = 0.03 which guarantees that for a value of m logarithmic
in the size of the population of the system, the probability
of having more than τ independent errors that impact close
devices is negligible. Figure 6(b) plots Fr(j) as a function
of the system size n when r is set to 0.03. In the following
r = 0.03 and τ = 3.
B. What brings Theorem 7 with respect to Theorem 6
We have derived in Theorem 7 a necessary and sufﬁcient
condition for any device j ∈ Ak to decide with certainty that it
777777
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:05:15 UTC from IEEE Xplore.  Restrictions apply. 


















 
 
 
 
 






















 
 
 
 




	  
	  
 		 




	
 
 

(a) P{Nr(j) ≤ m} as a function of m and different values of r.
Settings n = 1000.
(b) P{Fr(j) ≤ τ} as a function of the system size n and different
values of τ. Settings r = 0.03 and b = 0.005
Fig. 6. Dimensioning parameters r and τ.
AVERAGE REPARTITION OF POINTS OF Ak IN EACH SET Ik,Mk AND Uk.
SETTINGS A = 20, n = 1000, r = 0.03 , τ = 3 AND |Ak| = 95.7.
TABLE II
Algorithm 4 (Theorem 7)
Algorithm 3 (Theorem 6)
2.54% 88.74% 8.72%