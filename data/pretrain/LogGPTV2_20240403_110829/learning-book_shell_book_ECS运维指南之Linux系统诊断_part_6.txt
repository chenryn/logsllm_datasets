CPU占用不高但网络性能很差的一个原因
41
15Z
4522
4911
PCI -MSI -edge
virtio1-reg.0
26:
0
0
PCI -MSI-edge
virtio2-config
27 :
1913
0
PCI -MSI-edge
virtio2-input.0
28:
834
0
PCI -MSI -edge
virtio2-output. 0
29 :
2
0
1557
virtio2-input .1
PCI -MSI-edge
30 :
2
187
PCI-MSI-edge
virtio2-output.1
virtio0-config
31:
0
PCI-MSI-edge
32 :
1960
0
PCI -MSI-edge
virtio2-input.2
33 :
2
798
0
PCI -MSI -edge
t'andsno-goraatA
virtio0-virtqueues
34 :
0E
0
0
PCI -MSI-edge
35:
272
PCI-MSI-edge
virtio2-input.3
36 :
2
106
PCI -MSI-edge
input0说明是cpuo（第 1 个 cPu）处理的网络中断
E'andsno-gotqatA
阿里云ecs网络中断，如果是多个中断的话，还有input.1input.2input.3这种形式
PIX:
D
0
0
Posted-interrupt vakeup
event
如果ecs的cpu核心非常多，那这个文件看起来就会比较费劲了，可使用下面
的命令查看处理中断的核心。
使用下面这个命令，即可将阿里云ecs处理中断的cpu找出来了1下面这个演示是Bc4个队列]
sut.xd} 。 。 a- CPU占用不高但网络性能很差的一个原因
Linux 3 10. 0957.5 .1.e17.x86_64(i2vz98aymkjcxvt.ra0f3758)
05/26/2020
x86_64_
(4 CPO)
05:10:06 FM
CPU
tuser
tnice
taysten
tiowait
steal
tidle
05:10:07 PM
a.11
5 .63
0.00
3.58
1.02
0.00
LL'6B
05 :10 :07 PM
0
6 .12
0.00
3.06
1.02
0.00
89.80
05:10:07 FM
5 .10
0.00
5.10
0.00
0.00
89.80
05:10:07 PM
2
5 .10
0.00
3.06
2.04
0.00
08′6B
05:10:07 PM
5 .10
0.00
4 .08
1.02
0.00
08′6B
05 :10 :07 PM
tuser
tnice
taystem.
tiowait
steal
tidle
05:10:08 FM
a11
8.78
0.00
15.01
0.69
0.00
25'5L
05:10:08 PM
0
10 .00
0.00
16.36
0.91
0.00
05:10:08 PM
1
4 .B1
0.00
13 . 46
1.92
0.00
79.81
05:10:08 FM
10.91
0.00
15.45
T6'0
0.00
05:10 :08 PM
9 . 09
0 . 00
14 .55
0.00
0.00
Bar 小技巧
76.36
打即主dle小于10的核心
Bar -P 1,3,5,7 1|tai] -n+3|axk *$NPaNs 。 xxe| c+0- [Te2| T 77v d- 30a
再贴—个 4c8g 规格的配置（ecs -c6.xlarge1,
可以看到4c也给了四个队列，但是默认设置的是在cpu0和2上处理中断
# grep -i *input* /proc/interrupt8
27:
1932
PCI -MSI -edge
virtio2-input.0
29 :
0
1627
PCI -MSI-edge
virtio2-input.1
32 :
1974
0
PCI-MSI-edge
virtio2-input.2
35 :
3
0
284
PCI -MSI -edge
virtio2-input.3
# for i in $(egrep *\-input.*
sut.xd] 。 a=。 a- xxe|srdn.1xaaut/ooad/
$1] * / / do cat /proc/irg/$i/emp_affinity_list done
1
J
1
原因是cpu是超线程的，·每个vCPU绑定到一个物理CPU超线程·，所以即使是4个队列默认也在 2
---
## Page 43
CPU占用不高但网络性能很差的一个原因CPU占用不高但网络性能很差的一个原因
改这两个任意一个文件，另一个文件会同步更改。
为了方使理解，咱们直接看十进制的文件 smp_affinity_list 即可。
如果这一步没看明白，注意前面的/proc/interrupts的输出
# for i in $(egrep *\-input.*/proc/interrupts |avk -F *:"*{print $1]′1
do cat /proe/irg/$i/smp_affinity_list ;done
1
手动设置处理中断的CPO号码可以直接echo 修改，下面就是将序号27的中断放到cpu0上处理，一
E
般建议可以把cpu0空出来
# echo 0 >> /proc/irg/27/emp_affinity_1iat 
# cat /proc/irg/27/emp_affinity_liat
美于bitnask
f是十六进制的值对应的二进制是"1111*(可以理解为4c的配置设置为f 的话，所有的cpu 参
二进制中的每个位代表了服务器上的每个cPO，一个管单的deno
与处理中断)
CPU序号二进制十六进制
CPU 1  0010
CPU 2
0100
Z
CPU 3 1000
4
5.2需要对每块网卡每个队列分别进行设置。如对eth0的0号队列设置：
echo ff >/eye/claee/net/etho/queues/zx-0/rpe_cpus
这里的设置方式和中断亲和力设置的方法是类似的。采用的是掩码的方式，
但是这里通常要将所有的CPU设置进入，如：
4core, f
8core,ff
16core, fff
32core, fffff
默认在0 号 cpu 上
---
## Page 45
CPU占用不高但网络性能很差的一个原因>/eys/class/net/eth0/queues/rx-0/zps_cpu8
# cat /ay8/class/net/eth0/queues/x-0/rp8_cpus
6.设置RFS的方式。
需要设置两个地方：
6.1全局表：rps_sock_flow_table的条目数量。通过一个内核参数控制：
# sysctl -a |grep net.core.rps_sock_flov_entries
net core xps_sock_flow_entries = 0
# sysct1 -v net.core.rps_8ock_flow_entries=1024
net core xps_sock_flow_ent:ries = 1024
6.2每个网卡队列hash表的条目数：
cat /eys/class/net/etho/queues/x-0/rpe_flow_cnt
# echo 256 >> /ays/class/net/etho/queues/rx-0/rps_flov_cnt
#cat /eye/cLaes/net/eth0/queues/zx-0/rps_flow_cnt
95E
需要启动RFS，两者都需要设置。
建议机器上所有的网卡队列设置的rps_flow_cnt相加应该小于或者等于
rps_sock_flow_entries。因为是4个队列，因此每个队列设置 256，可
以根据实际情况增大。
---
## Page 46
46
一次IO异常捕获过程
一次10异常捕获过程
简介：遇到一个IO异常升的问题，IO起飞后系统响应异常缓慢，看不到现场一直
无法定位问题，检查对应时间点应用日志也没有发现异常的访问，这种问题怎么
办呢？
采集系统10，确认I0异常发生在系统盘，还是数据盘，
便
用系统自带的iostat即可采集
#1ostat -d 3-k -x -t 30
06/12/2018 09:52:33 AX
avgqu-s2
Devlce :
rrqn/α
vrqm/s
x/α
v/α
rkB/α
zs-bxfae s/A
avait
svctn
TTan
xvda
0.00
0.39
0.08
0.70
1. 97
5.41
0.03
18 .81
44 .14
1.08
0.08
xvdb
0.00
0. 00
0 .00
0.00
0. 00
0.00
8.59
0 .00
1.14
1.09
0.00
06/12/2018 09:52:36 A
Devlce:
rrqn/s
vrqn/a
2/α
v/8
rkB/α
vKB/s avgzq-2
avgqu-82
avait
svctn
TTan
xvda
1.00