### 一个导致CPU占用不高但网络性能很差的原因

当CPU占用率不高但网络性能仍然很差时，可能的原因之一是网络中断处理不当。以下是一些关键点和解决方法：

#### 1. 网络中断处理
- **中断类型**：通常情况下，网络中断由PCI-MSI（Message Signaled Interrupts）触发。
- **中断分配**：在阿里云ECS实例中，多个中断可能会被分配到不同的CPU核心上。例如，`virtio2-input.0`、`virtio2-input.1`等。

#### 2. 检查中断分配
- 使用以下命令查看处理中断的CPU核心：
  ```sh
  grep -i *input* /proc/interrupts
  ```
  示例输出：
  ```sh
  27: 1932 PCI-MSI-edge virtio2-input.0
  29: 0 1627 PCI-MSI-edge virtio2-input.1
  32: 1974 0 PCI-MSI-edge virtio2-input.2
  35: 3 0 284 PCI-MSI-edge virtio2-input.3
  ```

- 查看每个中断对应的CPU亲和性：
  ```sh
  for i in $(egrep *\-input.* /proc/interrupts | awk -F *:"* '{print $1}'); do cat /proc/irq/$i/smp_affinity_list; done
  ```
  示例输出：
  ```sh
  1
  1
  1
  1
  ```

#### 3. 手动设置中断处理核心
- 可以手动设置处理中断的CPU核心。例如，将中断27分配给CPU0：
  ```sh
  echo 0 > /proc/irq/27/smp_affinity_list
  ```

- 二进制和十六进制表示：
  - CPU 0: `0001` (十六进制: `1`)
  - CPU 1: `0010` (十六进制: `2`)
  - CPU 2: `0100` (十六进制: `4`)
  - CPU 3: `1000` (十六进制: `8`)

- 对于4核系统，可以使用掩码`f`（十六进制: `1111`）来表示所有CPU。

#### 4. 设置RFS（Receive Flow Steering）
- **全局表**：设置`rps_sock_flow_table`的条目数量。
  ```sh
  sysctl -a | grep net.core.rps_sock_flow_entries
  sysctl -w net.core.rps_sock_flow_entries=1024
  ```

- **每个网卡队列的哈希表条目数**：
  ```sh
  cat /sys/class/net/eth0/queues/rx-0/rps_flow_cnt
  echo 256 > /sys/class/net/eth0/queues/rx-0/rps_flow_cnt
  ```

- 建议所有网卡队列的`rps_flow_cnt`总和不超过`rps_sock_flow_entries`。

#### 5. 采集系统IO信息
- 使用`iostat`工具采集系统IO信息，确认异常发生在哪个磁盘。
  ```sh
  iostat -d 3 -k -x -t 30
  ```

- 示例输出：
  ```sh
  Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util
  xvda    0.00   0.39   0.08  0.70  1.97  5.41  0.03  18.81  44.14  1.08  0.08
  xvdb    0.00   0.00   0.00  0.00  0.00  0.00  8.59  0.00  1.14  1.09  0.00
  ```

通过以上步骤，可以更好地管理和优化网络中断处理，从而提升网络性能。