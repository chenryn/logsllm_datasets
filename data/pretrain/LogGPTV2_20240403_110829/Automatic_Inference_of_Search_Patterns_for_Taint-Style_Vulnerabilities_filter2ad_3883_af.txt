They present an approach to automatically tailor user-supplied
rule templates to speciﬁc systems and demonstrate its ability
to identify defects in system code. Closely related to this
work, Kremenek et al. [28] go one step further by showing
that an approach based on factor graphs allows different
sources of evidence to be combined automatically to generate
speciﬁcations for violation detectors.
More closely related to vulnerability discovery, Livshits
et al. [34] present Merlin, a method based on factor graphs that
infers information ﬂow speciﬁcations from Web applications
for the Microsoft .NET framework. An important limitation
of Merlin is that
it only models the ﬂow of information
between functions, and hence, sources, sanitizers and sinks
are always assumed to be calls to functions. While for typical
Web application vulnerabilities, this assumption holds in many
cases, missing bounds checks for vulnerabilities such as buffer
overﬂows or null pointer checks cannot be detected in this way.
In contrast, our method is well suited to encode these checks
as sanitizers are derived from arbitrary statements, allowing
patterns in declarations and conditions to be modeled (see
Section V). Similarly, Yamaguchi et al. [62] present Chucky,
an approach to the detection of missing checks that is also
capable of dealing with sanitizers given by arbitrary condi-
809809
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
tions. Unfortunately, the approach is opaque to the practitioner
and thus a control or reﬁnement of the detection process is
impossible. In contrast to both Merlin and Chucky, sources,
sanitizers, and sinks are expressed as regular expressions as
part of traversals, making it easy for the analyst to adapt them
to further improve the speciﬁcation. Finally, several authors
employ similarity measures to determine vulnerabilities simi-
lar to a known vulnerability [17, 24, 42, 61].
c) Methods based on dynamic analysis: A considerable
body of research has focused on exploring dynamic code
analysis for vulnerability discovery. Most notably are black-
box fuzzing [e.g., 43, 53] and white-box fuzzing techniques
[e.g., 18, 20, 59]. These approaches are orthogonal to our
work, as they explore the data ﬂow in source-sink systems at
run-time. Although not speciﬁcally designed to assist a human
analyst, white-box fuzzing might complement our method and
help to explore which parts of the code are reachable by
attackers to further narrow in on vulnerabilities.
VIII. CONCLUSION
The discovery of unknown vulnerabilities in software is a
challenging problem, which usually requires a considerable
amount of manual auditing and analysis work. While our
method cannot generally eliminate this effort, the automatic
inference of search patterns signiﬁcantly accelerates the anal-
ysis of large code bases. With the help of these patterns, a
practitioner can focus her analysis to relevant code regions and
identify taint-style vulnerabilities more easily. Our evaluation
shows that the amount of code to audit reduces by 94.9%
on average and even further in the case of the “Heartbleed”
vulnerability, showing that automatically generated search
patterns can precisely model taint-style vulnerabilities.
Our work also demonstrates that
the interplay of exact
methods, such as static program analysis, with rather fuzzy
approaches, such as machine learning techniques, provides
fruitful ground for vulnerability discovery. While exact ap-
proaches offer a rich view on the characteristics of software,
the sheer complexity of this view is hardly graspable by a
human analyst. Fuzzy methods can help to ﬁlter this view—in
our setting by search patterns—and thus guide a practitioner
when auditing code for vulnerabilities
REPORTING OF VULNERABILITIES
We have worked with the vendor to ﬁx all vulnerabilities
identiﬁed as part of our research. Upcoming versions should
no longer contain these ﬂaws.
ACKNOWLEDGMENTS
We acknowledge funding from DFG under the project
DEVIL (RI 2469/1-1). We would also like to thank Google,
and in particular our sponsor Tim Kornau, for supporting our
work via a Google Faculty Research Award. Finally, we thank
our shepherd Andrei Sabelfeld and the anonymous reviewers
for their valuable feedback.
REFERENCES
[1] The Heartbleed Bug, http://heartbleed.com/, 2014.
[2] The Shellshock Vulnerability. http://shellshockvuln.com/,
2014.
[3] A. Aho, R. Sethi, and J. Ullman. Compilers Principles,
Techniques, and Tools. Addison-Wesley, 1985.
[4] M. Anderberg. Cluster Analysis for Applications. Aca-
demic Press, Inc., New York, NY, USA, 1973.
[5] C. Anley, J. Heasman, F. Lindner, and G. Richarte.
The Shellcoder’s Handbook: Discovering and exploiting
security holes. John Wiley & Sons, 2011.
[6] M. Backes, B. Kopf, and A. Rybalchenko. Automatic
discovery and quantiﬁcation of information leaks.
In
Proc. of IEEE Symposium on Security and Privacy, 2009.
[7] R.-Y. Chang, A. Podgurski, and J. Yang. Discovering
neglected conditions in software by mining dependence
graphs. IEEE Transactions on Software Engineering, 34
(5):579–596, 2008.
[8] K. D. Cooper, T. J. Harvey, and K. Kennedy. A
simple, fast dominance algorithm. Software Practice &
Experience, 4:1–10, 2001.
[9] M. Cova, V. Felmetsger, G. Banks, and G. Vigna. Static
detection of vulnerabilities in x86 executables. In Proc.
of Annual Computer Security Applications Conference
(ACSAC), 2006.
[10] J. Dahse and T. Holz. Simulation of built-in PHP features
for precise static code analysis. In Proc. of Network and
Distributed System Security Symposium (NDSS), 2014.
[11] M. Dowd, J. McDonald, and J. Schuh. The art of software
security assessment: Identifying and preventing software
vulnerabilities. Pearson Education, 2006.
[12] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. Chelf.
Bugs as deviant behavior: A general approach to inferring
errors in systems code. In Proc. of the ACM Symposium
on Operating Systems Principles (SOSP), 2001.
[13] D. Evans and D. Larochelle.
Improving security using
extensible lightweight static analysis. IEEE Software, 19
(1):42–51, 2002.
[14] J. Ferrante, K. J. Ottenstein, and J. D. Warren. The pro-
gram dependence graph and its use in optimization. ACM
Transactions on Programming Languages and Systems,
9:319–349, 1987.
[15] C. Flanagan, K. R. M. Leino, M. Lillibridge, G. Nelson,
J. B. Saxe, and R. Stata. Extended static checking for
java. In ACM Sigplan Notices, volume 37, pages 234–
245, 2002.
[16] H. Gascon, F. Yamaguchi, D. Arp, and K. Rieck. Struc-
tural detection of Android malware using embedded call
graphs.
In Proc. of the ACM workshop on Artiﬁcial
intelligence and security, 2013.
[17] F. Gauthier, T. Lavoie, and E. Merlo. Uncovering access
control weaknesses and ﬂaws with security-discordant
software clones. In Proc. of Annual Computer Security
Applications Conference (ACSAC), 2013.
[18] P. Godefroid, M. Y. Levin, and D. Molnar.
SAGE:
810810
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
Whitebox fuzzing for security testing. Communications
of the ACM, 55(3):40–44, 2012.
[19] N. Gruska, A. Wasylkowski, and A. Zeller. Learning
from 6,000 projects: Lightweight cross-project anomaly
detection.
In Proc. of the International Symposium on
Software Testing and Analysis (ISSTA), 2010.
[20] I. Haller, A. Slowinska, M. Neugschwandtner, and
H. Bos. Dowsing for overﬂows: A guided fuzzer to
ﬁnd buffer boundary violations. In Proc. of the USENIX
Security Symposium, 2013.
[21] N. Heintze and J. G. Riecke.
The slam calculus:
Programming with secrecy and integrity.
In Proc. of
the ACM Symposium on Principles of programming
languages (POPL), 1998.
[22] S. Hido and H. Kashima. A linear-time graph kernel.
In Proc. of the IEEE International Conference on Data
Mining (ICDM), 2009.
[23] S. Horwitz, T. Reps, and D. Binkley.
Interprocedural
slicing using dependence graphs. In Proc. of the ACM
International Conference on Programming Language De-
sign and Implementation (PLDI), pages 35–46, 1988.
[24] J. Jang, A. Agrawal, and D. Brumley. ReDeBug: Finding
unpatched code clones in entire OS distributions. In Proc.
of IEEE Symposium on Security and Privacy, 2012.
[25] M. A. Jaro. Advances in record linkage methodology as
applied to the 1985 census of Tampa Florida. Journal of
the American Statistical Association, 84(406):414–420,
1989.
[26] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static
analysis tool for detecting web application vulnerabil-
ities.
In Proc. of IEEE Symposium on Security and
Privacy, 2006.
[27] D. A. Kinloch and M. Munro. Understanding C programs
using the combined C graph representation. In Proc. of
the International Conference on Software Maintenance
(ICSM), 1994.
[28] T. Kremenek, P. Twohey, G. Back, A. Ng, and D. Engler.
From uncertainty to belief: Inferring the speciﬁcation
within. In Proc. of the Symposium on Operating Systems
Design and Implementation, 2006.
[29] J. Krinke and G. Snelting. Validation of measurement
software as an application of slicing and constraint
solving. Information and Software Technology, 40(11):
661–675, 1998.
[30] M. S. Lam, J. Whaley, V. B. Livshits, M. C. Martin,
D. Avots, M. Carbin, and C. Unkel. Context-sensitive
program analysis as database queries. In Proc. of Sym-
posium on Principles of Database Systems, 2005.
[31] S. Lekies, B. Stock, and M. Johns. 25 million ﬂows later:
Large-scale detection of DOM-based XSS. In Proc. of
the ACM Conference on Computer and Communications
Security (CCS), 2013.
[32] Z. Li and Y. Zhou. PR-Miner: Automatically extracting
implicit programming rules and detecting violations in
large software code.
In Proc. of European Software
Engineering Conference (ESEC), pages 306–315, 2005.
[33] B. Livshits and T. Zimmermann. DynaMine: Finding
common error patterns by mining software revision
histories.
In Proc. of European Software Engineering
Conference (ESEC), pages 296–305, 2005.
[34] B. Livshits, A. V. Nori, S. K. Rajamani, and A. Banerjee.
Merlin: Speciﬁcation inference for explicit information
ﬂow problems.
the ACM International
Conference on Programming Language Design and Im-
plementation (PLDI), 2009.
In Proc. of
[35] M. Martin, B. Livshits, and M. S. Lam. Finding ap-
plication errors and security ﬂaws using PQL: Program
Query Language.
In Proc. of ACM Conference on
Object-Oriented Programming, Systems, Languages &
Applications (OOPSLA), 2005.
[36] I. Mastroeni and A. Banerjee. Modelling declassiﬁcation
policies using abstract domain completeness. Mathemat-
ical Structures in Computer Science, 21(06):1253–1299,
2011.
[37] D. Muellner. Fastcluster: Fast hierarchical, agglomera-
tive clustering routines for R and Python. Journal of
Statistical Software, 53(9):1–18, 2013.
[38] A. C. Myers. Jﬂow: Practical mostly-static information
the ACM Symposium on
ﬂow control.
Principles of programming languages (POPL), 1999.
In Proc. of
[39] A. C. Myers, L. Zheng, S. Zdancewic, S. Chong, and
N. Nystrom. Jif: Java information ﬂow. Software release.
Located at http://www. cs. cornell. edu/jif, 2001.
[40] J. Newsome, B. Karp, and D. Song. Polygraph: Auto-
matically generating signatures for polymorphic worms.
In Proc. of IEEE Symposium on Security and Privacy,
2005.
[41] H. A. Nguyen, R. Dyer, T. N. Nguyen, and H. Rajan.
Mining preconditions of APIs in large-scale code cor-
pus. In Proc. of the ACM International Symposium on
Foundations of Software Engineering (FSE), 2014.
[42] J. Pewny, F. Schuster, C. Rossow, L. Bernhard, and
T. Holz. Leveraging semantic signatures for bug search in
binary programs. In Proc. of Annual Computer Security
Applications Conference (ACSAC), 2014.
[43] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren,
G. Grieco, and D. Brumley. Optimizing seed selection
for fuzzing. In Proc. of the USENIX Security Symposium,
2014.
[44] T. Reps. Program analysis via graph reachability. Infor-
mation and Software Technology, 1998.
[45] K. Rieck, C. Wressnegger, and A. Bikadorov. Sally: A
tool for embedding strings in vector spaces.
Journal
of Machine Learning Research (JMLR), 13(Nov):3247–
3251, Nov. 2012.
[46] M. A. Rodriguez and P. Neubauer. The graph traversal
pattern. Graph Data Management: Techniques and
Applications, 2011.
[47] A. Sabelfeld and A. C. Myers.
information-ﬂow security.
Areas in Communications, 21(1):5–19, 2003.
Language-based
IEEE Journal on Selected
[48] P. Saxena, S. Hanna, P. Poosankam, and D. Song. FLAX:
811811
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply. 
Systematic discovery of client-side validation vulnerabil-
ities in rich web applications. In Proc. of Network and
Distributed System Security Symposium (NDSS), 2010.
[49] E. Schwartz, T. Avgerinos, and D. Brumley. All you
ever wanted to know about dynamic taint analysis and
forward symbolic execution (but might have been afraid
to ask).
In Proc. of IEEE Symposium on Security and
Privacy, 2010.
[50] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. De-
tecting format string vulnerabilities with type qualiﬁers.
In Proc. of the USENIX Security Symposium, 2001.
[51] S. Son, K. S. McKinley, and V. Shmatikov. Role-
Cast: Finding missing security checks when you do not
know what checks are.
In Proc. of ACM International
Conference on Object Oriented Programming Systems
Languages and Applications (OOPSLA), 2011.
[52] V. Srivastava, M. D. Bond, K. S. Mckinley, and
V. Shmatikov. A security policy oracle: Detecting secu-
rity holes using multiple API implementations. In Proc.
of the ACM International Conference on Programming
Language Design and Implementation (PLDI), 2011.
[53] M. Sutton, A. Greene, and P. Amini. Fuzzing: Brute
Force Vulnerability Discovery. Addison-Wesley Profes-
sional, 2007.
[54] L. Tan, X. Zhang, X. Ma, W. Xiong, and Y. Zhou. Au-
toISES: Automatically inferring security speciﬁcations
and detecting violations. In Proc. of the USENIX Security
Symposium, 2008.
[55] S. Thummalapenta and T. Xie. Alattin: Mining alterna-
tive patterns for detecting neglected conditions. In Proc.
of the International Conference on Automated Software
Engineering (ASE), pages 283–294, 2009.
[56] J. Vanegue, L. Bloomberg, and S. K. Lahiri. Towards
practical reactive security audit using extended static
checkers. In Proc. of IEEE Symposium on Security and
Privacy, 2013.
[57] J. A. Vaughan and S. Chong.
declassiﬁcation policies.
on Security and Privacy, 2011.
Inference of expressive
In Proc. of IEEE Symposium
[58] H. Vijayakumar, X. Ge, M. Payer, and T. Jaeger. JIG-
SAW: Protecting resource access by inferring program-
mer expectations.
the USENIX Security
Symposium, 2014.
In Proc. of
[59] T. Wang, T. Wei, Z. Lin, and W. Zou. IntScope: Auto-
matically detecting integer overﬂow vulnerability in x86
binary using symbolic execution. In Proc. of Network and
Distributed System Security Symposium (NDSS), 2009.
In Proc. of International
[60] M. Weiser. Program slicing.
Conference on Software Engineering, 1981.
[61] F. Yamaguchi, M. Lottmann, and K. Rieck. Generalized
vulnerability extrapolation using abstract syntax trees.
In Proc. of the Annual Computer Security Applications
Conference (ACSAC), 2012.
[62] F. Yamaguchi, C. Wressnegger, H. Gascon, and K. Rieck.
Chucky: Exposing missing checks in source code for
vulnerability discovery. In Proc. of the ACM Conference
on Computer and Communications Security (CCS), 2013.
[63] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck. Mod-
eling and discovering vulnerabilities with code property
graphs.
In Proc. of IEEE Symposium on Security and
Privacy, 2014.
812812
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:25 UTC from IEEE Xplore.  Restrictions apply.