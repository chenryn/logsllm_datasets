• We make no use of decoding, thus our code does not need to be eﬃciently decodable.
• We require only that for all possibilities r, r(cid:48), the value C(r) ⊕ C(r(cid:48)) has Hamming weight at least
equal to the computational security parameter κ. In fact, it is suﬃcient even if the Hamming distance
guarantee is only probabilistic — i.e., it holds with overwhelming probability over choice of C (we
discuss subtleties below).
For ease of exposition, imagine letting C be a random oracle with suitably long output. (Later we will
show that C can be instantiated from a pseudorandom function in a straight-forward way.) Intuitively, when
C is suﬃciently long, it should be hard to ﬁnd a “near-collision.” That is, it should be hard to ﬁnd values
r and r(cid:48) such that C(r) ⊕ C(r(cid:48)) has low (less than a computational security parameter κ) Hamming weight.
Later in Table 2 we compute the parameters more precisely, but for now we simply point out that a random
function with output length k = 4κ suﬃces to make near-collisions negligible in our applications.
We refer to such a function C (or family of functions, in our standard-model instantiation) as a pseu-
dorandom code (PRC), since its coding-theoretic properties — namely, minimum distance — hold in a
cryptographic sense.
By relaxing the requirement on C from an error-correcting code to a pseudorandom code, we remove the
a-priori bound on the size of the receiver’s choice string! In essence, the receiver can use any string as its
choice string; the sender can associate a secret value H(qj ⊕ [C(r(cid:48))· s]) for any string r(cid:48). As discussed above,
the receiver is only able to compute H(tj) = H(qj ⊕ [C(r) · s]) — the secret corresponding to its choice
string r. The property of the PRC is that, with overwhelming probability, all other values of qj ⊕ [C(˜r) · s]
(that a polytime player may ever ask) diﬀer from tj in a way that would require the receiver to guess at
least κ bits of s.
Interpretation as an oblivious PRF variant. As discussed in Section 1, we can view the functionality
achieved by this protocol as a kind of oblivious PRF. Intuitively, r (cid:55)→ H(q ⊕ [C(r)· s]) is a function that the
sender can evaluate on any input, whose outputs are pseudorandom, and which the receiver can evaluate
only on its chosen input r.
In Section 3 we give a formal deﬁnition of the functionality that we achieve. The main subtleties of the
deﬁnition are:
1. the fact that the receiver learns slightly more than the output of this “PRF” — in particular, the
receiver learns t = q ⊕ [C(r) · s] rather than H(t);
5
2. the fact that the protocol realizes many instances of this “PRF” but with related keys — s and C are
shared among all instances.
We prove our construction secure assuming C is a pseudorandom code and that H satisﬁes a natural gener-
alization of the “correlation robust” assumption from [IKNP03].
Summary & cost. With our new variant of the IKNP protocol, we can obtain m OPRF instances eﬃ-
ciently, using only k base OTs plus symmetric-key operations. Compared to IKNP-paradigm OT extension
for 1-out-of-2 OTs, the main diﬀerences in cost are:
• Cost associated with the increased width of the OT extension matrices. In our case, the matrix has
width k rather than κ — concretely 3κ < k < 4κ in our applications. Note that the parameter k
controls the number of base OTs required.1
• Computational costs associated with the pseudorandom code C. While in IKNP C is a repetition
code, and in [KK13] C is a short Walsh-Hadamard code, in our protocol C is cryptographic. However,
we are able to instantiate C using a PRF. In practice, we use AES as the PRF, and the associated
hardware acceleration for AES in modern processors makes the cost of computing C minimal.
Application to private set intersection. Private set intersection (PSI) refers to a computation in which
Alice has a set A of items, Bob has a set B of items, and the two learn only A ∩ B and nothing more.
We show how BaRK-OPRF can be used to signiﬁcantly reduce the cost of semi-honest-secure PSI. The
current fastest protocol for the task is that of Pinkas et al. [PSSZ15]. The protocol relies heavily on eﬃcient
OT extension (for standard 1-out-of-2 OTs).
Looking closely at the PSI protocol of [PSSZ15], we see that they use a number of OTs that is proportional
to N (cid:96), where N is the number of items in the parties’ sets and (cid:96) is the length (in bits) of those items. We
can replace their use of 1-out-of-2 OTs with a suitable use of BaRK-OPRF and remove the dependence on (cid:96).
Our protocol uses a number of BaRK-OPRF instances that is proportional only to N .
We implemented our BaRK-OPRF-based PSI protocol and compared its performance to that of [PSSZ15].
For PSI on strings of length (cid:96) ∈ {64, 128} and suﬃciently large sets, our protocol is 2.3–3.6 times faster.
This is a signiﬁcant achievement in the already very polished PSI state of the art!
3 Technical Preliminaries
We write (cid:107)x(cid:107)H to denote the hamming weight of a binary string x. Our computational security parameter
is κ and statistical security parameter is σ.
3.1 Correlation Robustness
The OT extension protocol of IKNP [IKNP03] is proven secure under a so-called correlation robustness
assumption on the underlying hash function. Our protocol makes use of the following generalization of this
notion:
Deﬁnition 1. Let H be a hash function with input length n. Then H is d-Hamming correlation ro-
bust if, for any strings z1, . . . , zm ∈ {0, 1}∗, a1, . . . , am, b1, . . . , bm ∈ {0, 1}n with (cid:107)bi(cid:107)H ≥ d, the following
distribution, induced by random sampling of s ← {0, 1}n, is pseudorandom:
H(z1(cid:107)a1 ⊕ [b1 · s]), . . . , H(zm(cid:107)am ⊕ [bm · s])
As in the overview, “·” denotes bitwise-AND.
The deﬁnition generalizes previous ones in the following way:
1In our instantiation, we actually use IKNP to extend κ base OTs to k OTs, and then use those k OTs as base OTs for
BaRK-OPRF instances. Hence, the number of public-key OT operations is unchanged. Still, the total communication cost
remains proportional to km in our protocol rather than κm.
6
• If d = n, then the only legal choice of bi is 1n, and H(zi(cid:107)ai ⊕ [bi · s]) simpliﬁes to H(zi(cid:107)ai ⊕ s).
Restricting the deﬁnition in this way, and taking zi = i corresponds to the IKNP notion of correlation
robustness.
• If the bi values are required to be elements of a linear error correcting code C, then the resulting
deﬁnition is one under which the construction of [KK13] is secure (for simplicity they prove security
in the random oracle model).
3.2 Pseudorandom Codes
We now formalize the notion of a pseudorandom code, motivated in Section 2.
Deﬁnition 2. Let C be a family of functions. We say that C is a (d, ) pseudorandom code (PRC) if
for all strings x (cid:54)= x(cid:48),
(cid:104)(cid:107)C(x) ⊕ C(x(cid:48))(cid:107)H < d
(cid:105) ≤ 2−
Pr
C←C
That is, a (d, )-PRC guarantees that the hamming distance of two codewords is less or equal to d with
probability at most 2−.
The reader may ﬁnd it convenient to think of C as a random oracle. However, it suﬃces for C to be a
pseudorandom function instantiated with random seed:
Lemma 3. Suppose F : {0, 1}κ × {0, 1}∗ → {0, 1}n is a pseudorandom function. Deﬁne C = {F (s,·) | s ∈
{0, 1}κ}. Then C is a (d, )-pseudorandom-code where:
(cid:18)n
(cid:19)
d−1(cid:88)
2− = 2−n
+ ν(κ).
i
i=0
(cid:0)n
(cid:1).
outputs 1 with probability 2−n(cid:80)d−1
and ν is a negligible function.
Proof. Consider the following game. An adversary has strings x and x(cid:48) hard-coded. It queries its oracle O
on x and x(cid:48) and outputs 1 if O(x) and O(x(cid:48)) are within Hamming distance d.
When O is instantiated as a random function, a simple counting argument shows that the adversary
When O is instantiated as a PRF F with random seed, the probability must be within ν(κ) of the above
probability, where ν is negligible. The adversary’s output probability in this instantiation is exactly the
probability speciﬁed in the PRC security deﬁnition, so the lemma follows.
Note that in our typical usage of PRCs, the choice of C (in this case, the seed to the PRF) is a public
value. But in both the security deﬁnition for PRC and in this analysis, the values x and x(cid:48) are ﬁxed before
the PRF key is chosen. Whether or not F (s, x) and F (s, x(cid:48)) are within Hamming distance d is not aﬀected
by making the PRF seed public.
i=0
i
3.3 Our Oblivious PRF Variant
As outlined in Section 2, our main construction is a variant of OT-extension which associates a pseudorandom
output R(x) for every possible input r ∈ {0, 1}∗. The sender can compute R(r) for any r, while the
receiver learns R(x) for only a single value r. This functionality is reminiscent of an oblivious PRF
(OPRF) [FIPR05]. In this section we describe how our construction can be interpreted as a variant OPRF
functionality.
In an OPRF functionality for a PRF F , the receiver provides an input2 r; the functionality chooses a
random seed s, gives s to the sender and F (s, r) to the receiver.
In our protocol, the sender knows qj and s. We can consider these values as keys to a PRF:
F ((qj, s), r) = H(j(cid:107)qj ⊕ [C(r) · s])
Intuitively, the sender can evaluate this PRF at any point, while the receiver can evaluate it on only one.
However, we point out some subtleties:
2More general OPRF variants allow the receiver to learn the PRF output on many inputs — here it suﬃces to limit the
receiver to one input.
7
• In our protocol, the receiver learns tj = qj⊕[C(r∗)·s] for his chosen input r∗, which is more information
than the “PRF output” H(j(cid:107)tj). However, even knowing tj, the other outputs of the “PRF” still look
random. This common feature of an OPRF protocol leaking slightly more than the PRF output is
called relaxed OPRF in [FIPR05].
• In our protocol, we realize many “OPRF” instances with related keys. In particular, all instances have
the same component s (and C).
We encapsulate these properties in the following deﬁnitions.
3.3.1 Our PRF variant
We refer to F as a relaxed PRF if there is another function (cid:101)F , such that F (k, r) can be eﬃciently computed
given just (cid:101)F (k, r). We then deﬁne the relevant notion of security with respect to an adversary who can query
the relaxed function (cid:101)F rather than just F .
Deﬁnition 4. Let F be a relaxed PRF with output length v, for which we can write the seed as a pair (k∗, k).
Then F has m-related-key-PRF (m-RK-PRF) security if the advantage of any PPT adversary in the
following game is negligible:
1. The adversary chooses strings x1, . . . , xn and m pairs (j1, y1), . . . , (jm, ym), where yi (cid:54)= xji.
2. Challenger chooses random values appropriate for PRF seeds k∗, k1, . . . , kn and tosses a coin b ← {0, 1}.
(a) If b = 0, the challenger outputs {(cid:101)F ((k∗, kj), xj)}j and {F ((k∗, kji), yi)}i.
(b) If b = 1 the challenger chooses z1, . . . , zm ← {0, 1}v and outputs {(cid:101)F ((k∗, kj), xj)}j and {zi}i,
3. The adversary outputs a bit b(cid:48). The advantage of the adversary is Pr[b = b(cid:48)] − 1/2.
♦
Intuitively, the PRF is instantiated with n related keys (sharing the same k∗ value). The adversary
learns the relaxed output of the PRF on one chosen input for each key. Then any m additional PRF outputs
(corresponding to any seed) are indistinguishable from random by the adversary.
Lemma 5. Let C be a (d,  + log2 m)-PRC, where 1/2 is a negligible function, Let H be a d-Hamming
correlation robust hash function. Deﬁne the following relaxed PRF, for C ∈ C:
(cid:16)
(cid:16)
(cid:17)
(cid:17)
F
(cid:101)F
Then F has m-RK-PRF security.
((C, s), (q, j)), r
((C, s), (q, j)), r
= H(j(cid:107)q ⊕ [C(r) · s])
= (j, C, q ⊕ [C(r) · s])
Proof. In the m-RK-PRF game with this PRF, we can rewrite the adversary’s view as in Section 2 as:
(C,{tj}j,{H(ji(cid:107)tji ⊕ [(C(xji) ⊕ C(yi)) · s])}i)
There are m terms of the form C(xji) ⊕ C(yi) for xji (cid:54)= yi. Each of these terms has Hamming weight at
least d with probability at least 1 − 2−−log2 m over the choice of C. By a union bound, all m terms have
Hamming weight at least d with probability 1− 2−. Conditioning on this (overwhelmingly likely) event, we
can apply the d-Hamming correlation robust property of H to see that the H-outputs are indistinguishable
from random.
3.3.2 Our BaRK-OPRF functionality
In Figure 1 we formally describe the variant OPRF functionality we achieve. It generates m instances of the
PRF with related keys, and allows the receiver to learn the (relaxed) output on one input per key.
8
The functionality is parameterized by a relaxed PRF F , a number m of instances, and two parties: a
sender and receiver.
On input (r1, . . . , rm) from the receiver,
• Choose random components for seeds to the PRF: k∗, k1, . . . , km and give these to the sender.
• Give (cid:101)F ((k∗, k1), r1), . . . ,(cid:101)F ((k∗, km), rm) to the receiver.
Figure 1: Batched, related-key OPRF (BaRK-OPRF) ideal functionality.
4 Main construction
We present our main construction, which is a semi-honest secure protocol for the functionality in Figure 1,
instantiated with the relaxed PRF deﬁned in Lemma 5.
4.1 Notation
We use the notation OTk
m to denote k instances of 1-out-of-2 string-OT where the strings are m bits long.
m, the sender’s input is {(xj,0, xj,1)}j∈[k], i.e.,
Let S denote the sender, and let R denote the receiver. In OTk
m pairs of strings, each of length m, and the receiver holds input {rj}j∈[k], where each rj is a choice bit.
m, then R
Note that if S provides input {(xj,0, xj,1)}j∈[k] to OTk
receives back {xj,rj}j∈[k], while S receives nothing.
Following the convention in IKNP, we denote vectors in bold, and matrices in capitals. For a matrix A,
we let aj denote the j-th row of A, and ai denote the i-th column of A. If a = a1(cid:107)···(cid:107)ap and b = b1(cid:107)···(cid:107)bp
are two vectors, then we deﬁne ⊕ and · operations as follows. We use the notation a ⊕ b to denote the
vector (a1 ⊕ b1)(cid:107)···(cid:107)(ap ⊕ bp). Similarly, the notation a· b denotes the vector (a1 · b1)(cid:107)···(cid:107)(ap · bp). Finally,
suppose c ∈ {0, 1}, then c · a denotes the vector (c · a1)(cid:107)···(cid:107)(c · ap).
m, and if R provides input {rj}j∈[k] to OTk
We note that to simplify notation via indexing, in the following we will refer to the OT matrices as T0
and T1, rather than as T and U , as we did when presenting high-level overview of our work.
4.2 The BaRK-OPRF construction
Our BaRK-OPRF protocol is presented in Figure 2. It closely follows the high-level overview. Recall that
we are considering a PRF whose seed is of the form ((C, s), (j, qj)) and whose relaxed output is of the form
t0,j = qj ⊕ (C(rj) · s).
Theorem 6. The BaRK-OPRF protocol in Figure 2 securely realizes the functionality of Figure 1, instanti-
ated with the relaxed PRF deﬁned in Lemma 5, in the presence of semi-honest adversaries, where κ is the
computational security parameter.
Proof. When using the abstraction of our OPRF functionality, the proof is elementary.
Simulating S. The simulator receives output from the OPRF ideal functionality consisting of related PRF
seeds: a common (C, s) and a qj for each j ∈ [m]. Let Q be a matrix whose rows are the qj. Let qi denote
the ith column of Q.
The simulator simulates an execution of the protocol in which S chooses C in step 0, chooses s in step
1, and receives output {qi}i∈[k] as OT output in step 3.
Simulating R. The simulator has input (r1, . . . , rm) and receives output from the OPRF ideal functionality
consisting of a relaxed PRF output (j, C, tj) for each j ∈ [m].
The simulator simulates an execution of the protocol in which R receives C in step 0 and samples t0,j = tj
in step 2.
In both cases it is straightforward to check that the simulation is perfect.
9
Input of R: m selection strings r = (r1, . . . , rm), ri ∈ {0, 1}∗.
Parameters:
• A (κ, )-PRC family C with output length k = k(κ).
• A κ-Hamming correlation-robust H : [m] × {0, 1}k → {0, 1}v.
• An ideal OTk
m primitive.
Protocol:
0. S chooses a random C ← C and sends it to R.