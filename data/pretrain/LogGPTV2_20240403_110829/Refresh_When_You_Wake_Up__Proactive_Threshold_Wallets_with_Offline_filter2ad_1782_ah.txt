ρ-sign in REAL be
(cid:48). By Lemma A.2, the output of Forge is a valid signature
pk
(cid:48) with overwhelming probability.
on m under pk
Hybrid H2 . This hybrid experiment is the same as the last,
except that Step 1 is implemented using IDEALF n,t
Sign ,SSign,Z∗
instead. As REALπ(t,n)
Sign ,SSign,Z∗, the output
of Forge is distributed indistinguishably to the last experiment
(i.e. a valid signature under pk
Hybrid H3 . This hybrid experiment is the same as the last,
with the caveat that F n,t
Sign is programmed to output pk as the
public key when init is queried by SSign, instead of pk
(cid:48) that
F n,t
(cid:48) are both sampled by
Sign sampled internally. As pk and pk
running KeyGen with uniform randomness (by the challenger
and F n,t
(cid:48)} which has
the following implication:
ρ-sign ,A,Z∗ ≈ IDEALF n,t
Sign respectively) it holds that {pk} ≡ {pk
(cid:20)
(sk, pk) ← KeyGen(1κ)
σ ← H3(m, pk)
(sk, pk) ← KeyGen(1κ)
σ(cid:48) ← H2(m, pk)
, σ(cid:48), m) = 1 :
(cid:48)
Vrfy(pk
= Pr
= 1 − negl(κ)
The ﬁnal hybrid H3 is exactly the code of Forge, and outputs
a valid signature on m under pk supplied by the challenger,
which proves the lemma.
(cid:48) chosen by F n,t
Sign).
Vrfy(pk, σ, m) = 1 :
(cid:21)
(cid:20)
(cid:21)
Pr
The existence of an overwhelmingly successful forger for
Sig given the existence of a protocol realizing F n,t
Sign with
ofﬂine refresh, where n > tρ ≥ t > 2, in the presence of
a mobile adversary where t > (cid:98)tρ/2(cid:99) + 1, is guaranteed by
Lemma A.3. The theorem is hence proven.
APPENDIX B
PROOF OF (2, n) REFRESH PROTOCOL
Setup, πR
Theorem B.1. If (πDKG
Sign) is a threshold signature
Sign, πσ
scheme for signing equation Sign, and the discrete logarithm
ρ-update) UC-realizes F n,2
problem is hard in G, then (πDKG
Sign
in the (GLedger,F RDL
Com-ZK)-hybrid model in the presence of a
mobile adversary corrupting one party, with ofﬂine refresh.
Setup, π(2,n)
Proof. (Sketch) The protocol πDKG
Setup can be simulated the
standard way, with the corrupt party Pi’s key share ski re-
membered as output. We now describe the simulator S (2,n)
ρ-signfor
protocol π(2,n)
ρ-sign. This simulator is given ski as input, and
(cid:48)
outputs (R, sk
i).
624
Simulator 1: S (2,n)
ρ-sign
Parameters: Elliptic Curve Group (G, G, q)
Ideal Oracles Controlled: F RDL
Ideal Oracles Not Controlled: GLedger
Inputs:
Com-ZK, random oracle RO
• Common: Message to be signed m ∈ {0, 1}∗, public
key pk ∈ G, each party’s share in the exponent F (b) =
f (b) · G, epoch index epoch ∈ Z+
• Private: Pb’s key share skb = f (b) ∈ Zq
1) Tag R from Threshold Signature:
i. Simulate the ﬁrst half of the threshold signing protocol
(R, stateb) ← S R
Sign (skb, 1 − b, m)
(get-instance-key, idsig)
S R
between
relaying
(instance-key, idsig, R)
F n,2
Sign when required.
Sign
and
and
2) Sample New Polynomial: (identical to π(2,2)
ρ-sign)
i. Send (idcoin, δ ← Zq) to Pb on behalf of FCoin
ii. Deﬁne degree-1 polynomial fδ such that fδ(0) = 0
and fδ(1) = δ
iii. Compute sk(cid:48)
b = skb + fδ(b)
3) Store Tagged Refresh:
i. Simulate a signature R, δ, epoch under pk1−b:
a. Sample z1−b ← Zq and e ← Zq uniformly
b. Compute K = z · G − e · pk1−b
c. Program RO(R||K||δ||epoch) = e
ii. Establish common nonce K ∈ G:
a. Send (committed, 1−b, idcom-zk
1−b ) to P ∗
b on behalf
Com-ZK
of F RDL
of F RDL
b. Receive (com-proof, idcom-zk
c. Set K1−b = K − Kb
d. Send (decommitted, 1 − b, idcom-zk
1−b
Com-ZK
b
, kb, Kb) on behalf
, K1−b ∈ G)
Com-ZK
to P ∗
b on behalf of F RDL
sending z1−b in response
e. Wait for (open, idcom-zk) from Pb, upon receipt
iii. Wait for zb, upon receipt verifying that zb = e·skb +kb
4) Simulate the rest of the threshold signature protocol
by running S σ
Sign(stateb) relaying (proceed, idsig) and
(signature, idsig, σ) between P ∗
b asks F n,2
5) If P ∗
R, σ) and send (Submit, sid, tx) to GLedger
6) Output (R, sk(cid:48)
b)
Sign to release σ to P1−b, then set tx = (m,
b and F n,2
Sign
Simulating π(2,n)
ρ-updateis simple: every time the adversary Z
sends a (sign, m, i, j) command to a pair of honest parties,
Sign, samples δ ←
the simulator obtains a signature R, σ from F n,2
Zq, and simulates a local signature z under pk to authenticate
R, δ, epoch just as in Step i. of Simulator S (2,n)
ρ-signabove. It sets
msg = (R, epoch, δ, K, z) and makes msg available to the
corrupt party.
We now sketch an argument that the distribution of the real
protocol is computationally indistinguishable from the ideal
one.
ρ-signrun
We can progressively substitute each instance of π(2,n)
with honest parties belonging to an epoch with S (2,n)
ρ-signrun
with F n,2
Sign. The distinguishing advantage of Z at each step is
bounded by the advantage of a PPT adversary distinguishing
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
Sign,S σ
Setup,S R
Sign,πσ
Sign as produced by simulators (S DKG
(πDKG
Setup,πR
Sign) from the corresponding ideal executions
with F n,2
Sign),
which is assumed to be negligible. In order to extend this
strategy to a mobile adversary, it sufﬁces to argue that the
polynomials f, f(cid:48) used to share sk appear independently
distributed before and after a refresh. This follows immediately
from the fact that an adversary who jumps from party Pi to
Pj is given f (i) and f(cid:48)(j) but does not see the difference fδ
between f, f(cid:48), just as discussed in the (2,2) case in Section VI.
It remains to be argued that the protocol is not degenerate.
The non-degeneracy property is achieved by fulﬁlling two
important requirements:
i, epoch) ∈ rpooli but (cid:64)(R, sk
(cid:48)
ρ-signbetween a corrupt party P ∗
a) System Epoch Increments: When the parties executing
the system epoch will always increment
ρ-signare honest,
π(2,n)
ρ-signis run by honest
upon the next refresh command, i.e. if π(2,n)
parties with counter epoch, then every subsequent execution
of π(2,n)
ρ-updateby any party in the system will result in a local
epoch counter of at least epoch + 1. This is easy to see for
this protocol, as honest parties executing π(2,n)
ρ-signwill always
produce a signature σ which will subsequently appear on the
blockchain (after delay T as per GLedger). Simultaneously every
party will ﬁnd a corresponding update to rpool sent to it, which
will be applied by π(2,n)
ρ-updatewhen σ appears on the blockchain.
b) Consistency: Every honest party outputs the same
epoch counter upon executing π(2,n)
ρ-updatesimultaneously. As
alluded to earlier in Section VII proving this amounts to
showing that the state of rpool maintained by each honest
party differs inconsequentially. In particular, let Pi and Pj be
honest parties maintaining rpooli and rpoolj respectively such
that ∃(R, sk
j, epoch) ∈ rpoolj.
(cid:48)
(cid:48)
First we claim that (R, sk
i, epoch) can be traced to a unique
b and honest
execution of π(2,n)
party P1−b. There are only two alternative events: (1) that there
is a collision in R values generated by two protocol instances
(occurs with probability | (cid:126)m|2/2q where | (cid:126)m| is the number
of messages signed), or (2) Pi received z authenticating this
entry without any honest party’s help in its creation; the exact
same technique to prove (threshold) Schnorr signatures secure
can be employed here to construct a reduction to the Discrete
Logarithm problem in curve G (if this event occurs with
probability  then there is a reduction to DLog successful with
probability /| (cid:126)m|). Given that (R, sk
(cid:48)
i, epoch) can be traced to
a unique execution of π(2,n)
b and P1−b it must be
the case that P ∗
b aborted the comptation at Step iv., i.e. P ∗
b
received z to authenticate this entry but withheld this value
from P1−b (or else Pj would have received this entry when
ofﬂine as well due to P1−b). Observe that this inconsistency
in rpooli, rpoolj is consequential only if (σ, R) appears on
GLedger, despite the fact that P1−b will not execute πσ
Signto
produce this value. We show that if this event happens with
probability  then there is an adversary for the DLog problem
successful with probability /| (cid:126)m|. This is because R is chosen
Sign as it realizes F n,2
uniformly in π(2,n)
Sign)
and the task of Z is to produce σ that veriﬁes under uniformly
chosen nonce R and public key pk. We can use such a Z to
solve the DLog problem in G as follows:
ρ-sign(ie. internally by πR
ρ-signbetween P ∗
1) Receive X ∈ G from the DLog challenger.
2) Choose sk ← Zq, set pk = sk · G
3) Run S DKG
Setup for Z with pk programmed as public key.
4) For each message m ∈ (cid:126)m except one, run S (2,n)
ρ-sign, use S R
required while also acting on behalf of F n,2
5) For one randomly chosen instance of π(2,n)
Sign
ρ-sign as
Sign to
program X as the signing nonce R.
ρ-signis chosen, P ∗
6) If the correct instance of π(2,n)
b will abort
this protocol before the corresponding σ has to be re-
leased, and yet σ still appears on GLedger
7) If σ is obtained from GLedger, solve for x such that x·G =
X as a function of σ, sk as per the signing equation Sign.
This is dependent on the equation Sign itself, but it is
straightforward how to retrieve the instance key x given
the secret key sk and signature σ for ECDSA/Schnorr.
The above reduction succeeds when Z induces this event
(probability ) and the correct instance of π(2,n)
ρ-signis chosen
(probability 1/| (cid:126)m|) bringing the total success probability to
/| (cid:126)m|.
As the simulated distribution is indistinguishable from
the execution of the real protocol and the protocol is non-
degenerate, this proves the theorem.
APPENDIX C
REQUIRED FUNCTIONALITIES
Functionality 1: F RDL
Com-ZK
The functionality is parameterized by the group G of order q
generated by G, and runs with a group of parties (cid:126)P.
a) Commit Proof: On receiving (commit-proof, id, x,
Xi) from Pi, where x ∈ Zq and Xi ∈ G, store (id, x, Xi) and
send (committed, i) to all parties.
b) Decommit Proof: On receiving (decom-proof, id)
from Pi, if X = x · G, send (decommitted, id, i) to each
Pj ∈ (cid:126)P. Else send (fail, id, i) to each Pj ∈ (cid:126)P.
Functionality 2: FCoin
This functionality is run with two parties P0, P1.
On receiving (sample-element, id, q) from both P0, P1,
sample x ← Zq uniformly and send (id, x) to both parties as
adversarially delayed output.
Functionality 3: FMUL
This functionality is run with two parties P0, P1.
On receiving (input, id, x0) from P0 and (input, id, x1)
from P1 such that x0, x1 ∈ Zq, sample a uniform (t0, t1) ←
q conditioned on t0 + t1 = x0 · x1 and send t0 to P0 and t1
Z2
to P1 as adversarially delayed output.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:17:03 UTC from IEEE Xplore.  Restrictions apply. 
625