        md = MDA(seed)
        return md.grouping(info)
    def hash_verify(hash_info, info):
        return hash_encode(info) == hash_info
    def session_encode(info):
        return '%s.%s' % (encode(info), hash_encode(info))
    def session_decode(info):
        info_list = str.split(info, '.')
        if len(info_list) != 2:
            raise Exception('error info')
        info_ = decode(info_list[0])
        if not hash_verify(info_list[1], info_):
            raise Exception('hash wrong')
        return info_
hash.py
    # uncompyle6 version 3.2.4
    # Python bytecode 3.7 (3394)
    # Decompiled from: Python 3.7.0 (default, Oct  2 2018, 09:19:48)
    # [Clang 9.0.0 (clang-900.0.39.2)]
    # Embedded file name: hash.py
    # Size of source mod 2**32: 4512 bytes
    __metaclass__ = type
    import random, struct
    def _bytelist2long(list):
        imax = len(list) // 4
        hl = [0] * imax
        j = 0
        i = 0
        while i > 32 - n
    def F(x, y, z):
        return x & y | ~x & z
    def G(x, y, z):
        return x & z | y & ~z
    def H(x, y, z):
        return x ^ y ^ z
    def I(x, y, z):
        return y ^ (x | ~z)
    def XX(func, a, b, c, d, x, s, ac):
        res = 0
        res = res + a + func(b, c, d)
        res = res + x
        res = res + ac
        res = res & 65535
        res = _rotateLeft(res, s)
        res = res & 65535
        res = res + b
        return res & 65535
    class MDA:
        def __init__(self, seed='lctf2018'):
            self.seed = seed
            self.init()
        def init(self):
            self.length = 0
            self.count = [0, 0]
            self.input = []
            random.seed(self.seed)
            self.A = random.randint(3326, 27529)
            self.B = random.randint(3326, 27529)
            self.C = random.randint(3326, 27529)
            self.D = random.randint(3326, 27529)
        def _transform(self, inp):
            a, b, c, d = A, B, C, D = (
             self.A, self.B, self.C, self.D)
            S11, S12, S13, S14 = (7, 12, 17, 22)
            a = XX(F, a, b, c, d, inp[0], S11, 42104)
            d = XX(F, d, a, b, c, inp[1], S12, 46934)
            c = XX(F, c, d, a, b, inp[2], S13, 28891)
            b = XX(F, b, c, d, a, inp[3], S14, 52974)
            S21, S22, S23, S24 = (5, 9, 14, 20)
            a = XX(G, a, b, c, d, inp[1], S21, 9570)
            b = XX(G, b, c, d, a, inp[0], S24, 51114)
            c = XX(G, c, d, a, b, inp[3], S23, 3463)
            d = XX(G, d, a, b, c, inp[2], S22, 41976)
            S31, S32, S33, S34 = (4, 11, 16, 23)
            a = XX(H, a, b, c, d, inp[1], S31, 59972)
            d = XX(H, d, a, b, c, inp[0], S32, 10234)
            c = XX(H, c, d, a, b, inp[3], S33, 12421)
            b = XX(H, b, c, d, a, inp[2], S34, 22117)
            S41, S42, S43, S44 = (6, 10, 15, 21)
            a = XX(I, a, b, c, d, inp[0], S41, 8772)
            d = XX(I, d, a, b, c, inp[3], S42, 52370)
            b = XX(I, b, c, d, a, inp[1], S44, 24017)
            c = XX(I, c, d, a, b, inp[2], S43, 53947)
            A = A + a & 32767
            B = B + b & 32767
            C = C + c & 32767
            D = D + d & 32767
            self.A, self.B, self.C, self.D = (
             A, B, C, D)
        def update(self, inBuf):
            leninBuf = len(inBuf)
            index = self.count[0] >> 3 & 15
            self.count[0] = self.count[0] + (leninBuf > 29)
            partLen = 16 - index
            if leninBuf >= partLen:
                self.input[index:] = list(inBuf[:partLen])
                self._transform(_bytelist2long(self.input))
                i = partLen
                while i + 15 > 3 & 15
            if index 
grouping 完全就是单字节映射。。。
    def grouping(self, inBufGroup):
            hexdigest_group = ''
            for inBuf in inBufGroup:
                self.insert(inBuf)
                hexdigest_group += self.hexdigest()
    import requests
    import base64
    import time
    lists = ['a','d','m','i','n']
    h = ''
    for x in lists:
        while 1:
            print 'try'
            headers = headers = {'User-Agent':'chrome'}
            r=requests.get('http://212.64.7.239/',headers)
            cookie = r.headers['Set-Cookie']
            cookie = cookie.split('=')[1]
            info_list = cookie.split('.')
            info = info_list[0]
            info2 = info_list[1]
            username = base64.b32decode(info)
            print username
            if x in username:
                idx = username.index(x)
                h += info2[idx*16:(idx+1)*16]
                print h
                break
    print 'cookie: ' + base64.b32encode('admin') + '.' + h
# RE
## 拿去签到吧朋友
首先在start函数内藏了一段smc 在sub_402870内调用了sub_40143f继续调用了sub_401451
将sub_408000修改了。这一段代码我是在跟'idaq.exe'这些反调的字符串时跟到的，对于最后解那段smc有帮助。
主函数还是经典的crackme，输入36个字符做判断。输入的字符构建了一个字典树，最后的检测分为两段，第一段做了一个先序遍历，将先序遍历的结果做一个DES加密(密钥为'fa1conn\x00')后再将加密后的的前36个字节做一个矩阵乘法，最后做一个先序遍历的字符对应在原输入串的位置的判断。所以只要解一个矩阵乘法，将DES解密就能拿到所有的字符，且知道前半段的顺序，脚本如下:
    from Crypto.Cipher import DES
    from z3 import *
    solver = Solver()
    flag = [Int('flag%d'%i) for i in range(36)]
    a = [i for i in flag]
    b = [23, 65, 24, 78, 43, 56, 59, 67, 21, 43, 45, 76, 23, 54, 76, 12, 65, 43, 89, 40, 32, 67, 73, 57, 23, 45, 31, 54, 31, 52, 13, 24, 54, 65, 34, 24]
    c = [0 for i in range(36)]
    d = [43666, 49158, 43029, 51488, 53397, 51921, 28676, 39740, 26785, 41665, 35675, 40629, 32311, 31394, 20373, 41796, 33452, 35840, 17195, 29175, 29485, 28278, 28833, 28468, 46181, 58369, 44855, 56018, 57225, 60666, 25981, 26680, 24526, 38780, 29172, 30110]
    for i in range(6):
        for j in range(6):
            for k in range(6):
                c[i+6*j] = c[i+6*j] + a[6*j+k]*b[6*k+i] 
            solver.add(simplify(c[i+6*j]) == d[i+6*j])
    if solver.check() == sat:
        m = solver.model()
        s = []
        for i in range(36):
            s.append(m[flag[i]].as_long())
        print(s)
    else:
        print('error')
    s += [0x73,0x3c,0xf5,0x7c]
    obj = DES.new('fa1conn\x00',DES.MODE_ECB)