mapped in every trustlet.
■    Vertdll.dll The VSM enclave runtime DLL is the DLL that manages
the lifetime of a VBS enclave. Only limited services are provided by
software executing in a secure enclave. This library implements all
the enclave services exposed to the software enclave and is normally
not loaded for standard VTL 1 processes.
With this knowledge in mind, let’s look at what is involved in the trustlet
creation process, starting from the CreateProcess API in VTL 0, for which
its execution flow has already been described in detail in Chapter 3.
Trustlets creation
As discussed multiple times in the previous sections, the Secure Kernel
depends on the NT kernel for performing various operations. Creating a
trustlet follows the same rule: It is an operation that is managed by both the
Secure Kernel and NT kernel. In Chapter 3 of Part 1, we presented the trustlet
structure and its signing requirement, and we described its important policy
metadata. Furthermore, we described the detailed flow of the CreateProcess
API, which is still the starting point for the trustlet creation.
To properly create a trustlet, an application should specify the
CREATE_SECURE_PROCESS creation flag when calling the CreateProcess
API. Internally, the flag is converted to the PS_CP_SECURE_ PROCESS NT
attribute and passed to the NtCreateUserProcess native API. After the
NtCreateUserProcess has successfully opened the image to be executed, it
creates the section object of the image by specifying a special flag, which
instructs the memory manager to use the Secure HVCI to validate its content.
This allows the Secure Kernel to create the SECURE_IMAGE data structure
used to describe the PE image verified through Secure HVCI.
The NT kernel creates the required process’s data structures and initial
VTL 0 address space (page directories, hyperspace, and working set) as for
normal processes, and if the new process is a trustlet, it emits a
CREATE_PROCESS secure call. The Secure Kernel manages the latter by
creating the secure process object and relative data structure (named
SEPROCESS). The Secure Kernel links the normal process object
(EPROCESS) with the new secure one and creates the initial secure address
space by allocating the secure page table and duplicating the root entries that
describe the kernel portion of the secure address space in the upper half of it.
The NT kernel concludes the setup of the empty process address space and
maps the Ntdll library into it (see Stage 3D of Chapter 3 of Part 1 for more
details). When doing so for secure processes, the NT kernel invokes the
INITIALIZE_PROCESS secure call to finish the setup in VTL 1. The Secure
Kernel copies the trustlet identity and trustlet attributes specified at process
creation time into the new secure process, creates the secure handle table, and
maps the secure shared page into the address space.
The last step needed for the secure process is the creation of the secure
thread. The initial thread object is created as for normal processes in the NT
kernel: When the NtCreateUserProcess calls PspInsertThread, it has already
allocated the thread kernel stack and inserted the necessary data to start from
the KiStartUserThread kernel function (see Stage 4 in Chapter 3 of Part 1 for
further details). If the process is a trustlet, the NT kernel emits a
CREATE_THREAD secure call for performing the final secure thread
creation. The Secure Kernel attaches to the new secure process’s address
space and allocates and initializes a secure thread data structure, a thread’s
secure TEB, and kernel stack. The Secure Kernel fills the thread’s kernel
stack by inserting the thread-first initial kernel routine: SkpUserThreadStart.
It then initializes the machine-dependent hardware context for the secure
thread, which specifies the actual image start address and the address of the
first user mode routine. Finally, it associates the normal thread object with
the new created secure one, inserts the thread into the secure threads list, and
marks the thread as runnable.
When the normal thread object is selected to run by the NT kernel
scheduler, the execution still starts in the KiStartUserThread function in VTL
0. The latter lowers the thread’s IRQL and calls the system initial thread
routine (PspUserThreadStartup). The execution proceeds as for normal
threads, until the NT kernel sets up the initial thunk context. Instead of doing
that, it starts the Secure Kernel dispatch loop by calling the
VslpEnterIumSecureMode routine and specifying the RESUMETHREAD
secure call. The loop will exit only when the thread is terminated. The initial
secure call is processed by the normal call dispatcher loop in VTL 1, which
identifies the “resume thread” entry reason to VTL 1, attaches to the new
process’s address space, and switches to the new secure thread stack. The
Secure Kernel in this case does not call the IumInvokeSecureService
dispatcher function because it knows that the initial thread function is on the
stack, so it simply returns to the address located in the stack, which points to
the VTL 1 secure initial routine, SkpUserThreadStart.
SkpUserThreadStart, similarly to standard VTL 0 threads, sets up the
initial thunk context to run the image loader initialization routine
(LdrInitializeThunk in Ntdll.dll), as well as the system-wide thread startup
stub (RtlUserThreadStart in Ntdll.dll). These steps are done by editing the
context of the thread in place and then issuing an exit from system service
operation, which loads the specially crafted user context and returns to user
mode. The newborn secure thread initialization proceeds as for normal VTL
0 threads; the LdrInitializeThunk routine initializes the loader and its needed
data structures. Once the function returns, NtContinue restores the new user
context. Thread execution now truly starts: RtlUserThreadStart uses the
address of the actual image entry point and the start parameter and calls the
application’s entry point.
 Note
A careful reader may have noticed that the Secure Kernel doesn’t do
anything to protect the new trustlet’s binary image. This is because the
shared memory that describes the trustlet’s base binary image is still
accessible to VTL 0 by design.
Let’s assume that a trustlet wants to write private data located in the
image’s global data. The PTEs that map the writable data section of the
image global data are marked as copy-on-write. So, an access fault will be
generated by the processor. The fault belongs to a user mode address
range (remember that no NAR are used to track shared pages). The Secure
Kernel page fault handler transfers the execution to the NT kernel
(through a normal call), which will allocate a new page, copy the content
of the old one in it, and protect it through the SLAT (using a protected
copy operation; see the section “The Secure Kernel memory manager”
earlier in this chapter for further details).
EXPERIMENT: Debugging a trustlet
Debugging a trustlet with a user mode debugger is possible only if
the trustlet explicitly allows it through its policy metadata (stored in
the .tPolicy section). In this experiment, we try to debug a trustlet
through the kernel debugger. You need a kernel debugger attached
to a test system (a local kernel debugger works, too), which must
have VBS enabled. HVCI is not strictly needed, though.
First, find the LsaIso.exe trustlet:
Click here to view code image
lkd> !process 0 0 lsaiso.exe
PROCESS ffff8904dfdaa080
    SessionId: 0  Cid: 02e8    Peb: 8074164000  ParentCid: 
0250
    DirBase: 3e590002  ObjectTable: ffffb00d0f4dab00  
HandleCount:  42.
    Image: LsaIso.exe
Analyzing the process’s PEB reveals that some information is
set to 0 or nonreadable:
Click here to view code image
lkd> .process /P ffff8904dfdaa080
lkd> !peb 8074164000
PEB at 0000008074164000
    InheritedAddressSpace:    No
    ReadImageFileExecOptions: No
    BeingDebugged:            No
    ImageBaseAddress:         00007ff708750000
    NtGlobalFlag:             0
    NtGlobalFlag2:            0
    Ldr                       0000000000000000
    *** unable to read Ldr table at 0000000000000000
    SubSystemData:     0000000000000000
    ProcessHeap:       0000000000000000
    ProcessParameters: 0000026b55a10000
    CurrentDirectory:  'C:\Windows\system32\'
    WindowTitle:  ''
    ImageFile:    '\??\C:\Windows\system32\lsaiso.exe'
    CommandLine:  '\??\C:\Windows\system32\lsaiso.exe'
    DllPath:      ''lkd
Reading from the process image base address may succeed, but
it depends on whether the LsaIso image mapped in the VTL 0
address space has been already accessed. This is usually the case
just for the first page (remember that the shared memory of the
main image is accessible in VTL 0). In our system, the first page is
mapped and valid, whereas the third one is invalid:
Click here to view code image
lkd> db 0x7ff708750000 l20
00007ff7`08750000  4d 5a 90 00 03 00 00 00-04 00 00 00 ff 00 
00  MZ..............
00007ff7`08750010  b8 00 00 00 00 00 00 00-40 00 00 00 00 00 
00 00  ........@.......
lkd> db (0x7ff708750000 + 2000) l20
00007ff7`08752000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? 
?? ??  ????????????????
00007ff7`08752010  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? 
?? ??  ????????????????
lkd> !pte (0x7ff708750000 + 2000)
1: kd>  !pte (0x7ff708750000 + 2000)
                                           VA 
00007ff708752000
PXE at FFFFD5EAF57AB7F8    PPE at FFFFD5EAF56FFEE0    PDE at 
FFFFD5EADFFDC218
contains 0A0000003E58D867  contains 0A0000003E58E867  
contains 0A0000003E58F867
pfn 3e58d     ---DA--UWEV  pfn 3e58e     ---DA--UWEV  pfn 
3e58f     ---DA--UWEV
PTE at FFFFD5BFFB843A90
contains 00000000000000
not valid
Dumping the process’s threads reveals important information
that confirms what we have discussed in the previous sections:
Click here to view code image
!process ffff8904dfdaa080  2
PROCESS ffff8904dfdaa080
    SessionId: 0  Cid: 02e8    Peb: 8074164000  ParentCid: 
0250
    DirBase: 3e590002  ObjectTable: ffffb00d0f4dab00  
HandleCount:  42.
    Image: LsaIso.exe
        THREAD ffff8904dfdd9080  Cid 02e8.02f8  Teb: 
0000008074165000
        Win32Thread: 0000000000000000 WAIT: (UserRequest) 
UserMode Non-Alertable
            ffff8904dfdc5ca0  NotificationEvent
        THREAD ffff8904e12ac040  Cid 02e8.0b84  Teb: 
0000008074167000
        Win32Thread: 0000000000000000 WAIT: (WrQueue) 
UserMode Alertable
            ffff8904dfdd7440  QueueObject
lkd> .thread /p ffff8904e12ac040
Implicit thread is now ffff8904`e12ac040
Implicit process is now ffff8904`dfdaa080
.cache forcedecodeuser done
lkd> k
  *** Stack trace for last set context - .thread/.cxr resets 
it
 # Child-SP          RetAddr           Call Site
00 ffffe009`1216c140 fffff801`27564e17 nt!KiSwapContext+0x76
01 ffffe009`1216c280 fffff801`27564989 nt!KiSwapThread+0x297
02 ffffe009`1216c340 fffff801`275681f9 
nt!KiCommitThreadWait+0x549
03 ffffe009`1216c3e0 fffff801`27567369 
nt!KeRemoveQueueEx+0xb59
04 ffffe009`1216c480 fffff801`27568e2a 
nt!IoRemoveIoCompletion+0x99
05 ffffe009`1216c5b0 fffff801`2764d504 
nt!NtWaitForWorkViaWorkerFactory+0x99a
06 ffffe009`1216c7e0 fffff801`276db75f 
nt!VslpDispatchIumSyscall+0x34
07 ffffe009`1216c860 fffff801`27bab7e4 
nt!VslpEnterIumSecureMode+0x12098b
08 ffffe009`1216c8d0 fffff801`276586cc 
nt!PspUserThreadStartup+0x178704
09 ffffe009`1216c9c0 fffff801`27658640 
nt!KiStartUserThread+0x1c
0a ffffe009`1216cb00 00007fff`d06f7ab0 
nt!KiStartUserThreadReturn
0b 00000080`7427fe18 00000000`00000000 
ntdll!RtlUserThreadStart
The stack clearly shows that the execution begins in VTL 0 at
the KiStartUserThread routine. PspUserThreadStartup has
invoked the secure call dispatch loop, which never ended and has
been interrupted by a wait operation. There is no way for the kernel
debugger to show any Secure Kernel’s data structures or trustlet’s
private data.
Secure devices
VBS provides the ability for drivers to run part of their code in the secure
environment. The Secure Kernel itself can’t be extended to support kernel
drivers; its attack surface would become too large. Furthermore, Microsoft
wouldn’t allow external companies to introduce possible bugs in a
component used primarily for security purposes.
The User-Mode Driver Framework (UMDF) solves the problem by
introducing the concept of driver companions, which can run both in user
mode VTL 0 or VTL 1. In this case, they take the name of secure
companions. A secure companion takes the subset of the driver’s code that
needs to run in a different mode (in this case IUM) and loads it as an
extension, or companion, of the main KMDF driver. Standard WDM drivers
are also supported, though. The main driver, which still runs in VTL 0 kernel
mode, continues to manage the device’s PnP and power state, but it needs the
ability to reach out to its companion to perform tasks that must be performed
in IUM.
Although the Secure Driver Framework (SDF) mentioned in Chapter 3 is
deprecated, Figure 9-39 shows the architecture of the new UMDF secure
companion model, which is still built on top of the same UMDF core
framework (Wudfx02000.dll) used in VTL 0 user mode. The latter leverages
services provided by the UMDF secure companion host
(WUDFCompanionHost.exe) for loading and managing the driver
companion, which is distributed through a DLL. The UMDF secure
companion host manages the lifetime of the secure companion and
encapsulates many UMDF functions that deal specifically with the IUM
environment.
Figure 9-39 The WDF driver’s secure companion architecture.
A secure companion usually comes associated with the main driver that
runs in the VTL 0 kernel. It must be properly signed (including the IUM
EKU in the signature, as for every trustlet) and must declare its capabilities in
its metadata section. A secure companion has the full ownership of its
managed device (this explains why the device is often called secure device).
A secure device controller by a secure companion supports the following
features:
■    Secure DMA The driver can instruct the device to perform DMA
transfer directly in protected VTL 1 memory, which is not accessible
to VTL 0. The secure companion can process the data sent or received
through the DMA interface and can then transfer part of the data to
the VTL 0 driver through the standard KMDF communication
interface (ALPC). The IumGetDmaEnabler and IumDmaMapMemory
secure system calls, exposed through Iumbase.dll, allow the secure
companion to map physical DMA memory ranges directly in VTL 1
user mode.
■    Memory mapped IO (MMIO) The secure companion can request
the device to map its accessible MMIO range in VTL 1 (user mode).
It can then access the memory-mapped device’s registers directly in
IUM. MapSecureIo and the ProtectSecureIo APIs expose this feature.
■    Secure sections The companion can create (through the
CreateSecureSection API) and map secure sections, which represent
memory that can be shared between trustlets and the main driver
running in VTL 0. Furthermore, the secure companion can specify a
different type of SLAT protection in case the memory is accessed
through the secure device (via DMA or MMIO).
A secure companion can’t directly respond to device interrupts, which
need to be mapped and managed by the associated kernel mode driver in
VTL 0. In the same way, the kernel mode driver still needs to act as the high-
level interface for the system and user mode applications by managing all the
received IOCTLs. The main driver communicates with its secure companion
by sending WDF tasks using the UMDF Task Queue object, which internally
uses the ALPC facilities exposed by the WDF framework.
A typical KMDF driver registers its companion via INF directives. WDF
automatically starts the driver’s companion in the context of the driver’s call
to WdfDeviceCreate—which, for plug and play drivers usually happens in
the AddDevice callback— by sending an ALPC message to the UMDF
driver manager service, which spawns a new WUDFCompanionHost.exe
trustlet by calling the NtCreateUserProcess native API. The UMDF secure
companion host then loads the secure companion DLL in its address space.
Another ALPC message is sent from the UMDF driver manager to the
WUDFCompanionHost, with the goal to actually start the secure companion.
The DriverEntry routine of the companion performs the driver’s secure
initialization and creates the WDFDRIVER object through the classic
WdfDriverCreate API.
The framework then calls the AddDevice callback routine of the
companion in VTL 1, which usually creates the companion’s device through
the new WdfDeviceCompanionCreate UMDF API. The latter transfers the
execution to the Secure Kernel (through the IumCreateSecureDevice secure
system call), which creates the new secure device. From this point on, the
secure companion has full ownership of its managed device. Usually, the first
thing that the companion does after the creation of the secure device is to
create the task queue object (WDFTASKQUEUE) used to process any
incoming tasks delivered by its associated VTL 0 driver. The execution
control returns to the kernel mode driver, which can now send new tasks to
its secure companion.
This model is also supported by WDM drivers. WDM drivers can use the
KMDF’s miniport mode to interact with a special filter driver,
WdmCompanionFilter.sys, which is attached in a lower-level position of the
device’s stack. The Wdm Companion filter allows WDM drivers to use the
task queue object for sending tasks to the secure companion.
VBS-based enclaves
In Chapter 5 of Part 1, we discuss the Software Guard Extension (SGX), a
hardware technology that allows the creation of protected memory enclaves,
which are secure zones in a process address space where code and data are
protected (encrypted) by the hardware from code running outside the enclave.
The technology, which was first introduced in the sixth generation Intel Core
processors (Skylake), has suffered from some problems that prevented its
broad adoption. (Furthermore, AMD released another technology called
Secure Encrypted Virtualization, which is not compatible with SGX.)
To overcome these issues, Microsoft released VBS-based enclaves, which
are secure enclaves whose isolation guarantees are provided using the VSM
infrastructure. Code and data inside of a VBS-based enclave is visible only to
the enclave itself (and the VSM Secure Kernel) and is inaccessible to the NT
kernel, VTL 0 processes, and secure trustlets running in the system.
A secure VBS-based enclave is created by establishing a single virtual
address range within a normal process. Code and data are then loaded into
the enclave, after which the enclave is entered for the first time by
transferring control to its entry point via the Secure Kernel. The Secure
Kernel first verifies that all code and data are authentic and are authorized to
run inside the enclave by using image signature verification on the enclave
image. If the signature checks pass, then the execution control is transferred
to the enclave entry point, which has access to all of the enclave’s code and
data. By default, the system only supports the execution of enclaves that are
properly signed. This precludes the possibility that unsigned malware can
execute on a system outside the view of anti-malware software, which is
incapable of inspecting the contents of any enclave.
During execution, control can transfer back and forth between the enclave
and its containing process. Code executing inside of an enclave has access to
all data within the virtual address range of the enclave. Furthermore, it has
read and write access of the containing unsecure process address space. All
memory within the enclave’s virtual address range will be inaccessible to the
containing process. If multiple enclaves exist within a single host process,
each enclave will be able to access only its own memory and the memory
that is accessible to the host process.
As for hardware enclaves, when code is running in an enclave, it can
obtain a sealed enclave report, which can be used by a third-party entity to
validate that the code is running with the isolation guarantees of a VBS
enclave, and which can further be used to validate the specific version of
code running. This report includes information about the host system, the
enclave itself, and all DLLs that may have been loaded into the enclave, as
well as information indicating whether the enclave is executing with
debugging capabilities enabled.
A VBS-based enclave is distributed as a DLL, which has certain specific
characteristics:
■    It is signed with an authenticode signature, and the leaf certificate
includes a valid EKU that permits the image to be run as an enclave.
The root authority that has emitted the digital certificate should be
Microsoft, or a third-party signing authority covered by a certificate
manifest that’s countersigned by Microsoft. This implies that third-
party companies could sign and run their own enclaves. Valid digital