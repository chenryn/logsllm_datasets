c′′ = c∗ In this case, condition 2 is satisfied since s′′
c′′ :: S′′′ ++ S and S′ = s′′
(cid:219)c = c∗ In this case, condition 3 is satisfied since Γ
⊨
sc∗ :: S →n−1 HALT(σ , gas, d, η)(cid:219)c :: s′′
c′ :: S′ ++ S, Γ ⊨
c′ :: S′ ++ S and
HALT(σ , gas, d, η)(cid:219)c :: s′′
c′ :: S′ ++ S → s′
as s′.σ = σ, also s′.σ(c∗.addr).stor = σ(c∗.addr).stor.
(cid:219)c (cid:44) c∗ In this case again the inductive hypothesis can be ap-
plied for n − 1, and since s′.σ = σ, the claim trivially
carries over to the case of n steps.
Exc (return from exceptional halting) Then S′′ = EXC(cid:219)c ::
s′′
c′ :: S′ ++ S and s′.σ = s′′.σ (as the global state is rolled
back). By Lemma B.8, we know that there exists some
m  1
∧ ˆx = s[size − 1] ∧ ˆy = s[size − 2]
=⇒ MStatepc+1((size − 1, s[size − 2 → ˆx(cid:98)+ ˆy]), m, stor, cℓ)
We prove the monotonicity using Lemma B.23. Assume that
there is some variable assignment satisfying the rule con-
straints, meaning that there are values (size, s), m, stor, cℓ, ˆx, ˆy
satisfying size > 1, ˆx = s[size − 1] and ˆy = s[size − 2]. We show
for any values (size′, s′) ≥N×(N→ ˆD) (size, s), m′ ≥N→ ˆD m,
stor′ ≥N→ ˆD
stor, cℓ′ ≥B cℓ that there are ˆx′, ˆy′ such that
1, s[size − 2 → ˆx(cid:98)+ ˆy]) ≤N×(N→ ˆD) (size′ − 1, s′[size′ − 2 →
size′ > 1, ˆx′ = s′[size′ − 1] and ˆy′ = s′[size′ − 2], and (size −
ˆx′(cid:98)+ ˆy′]). First we observe that size = size′ and (since
(size, s) ≤N×(N→ ˆD) (size′, s′)). We pick ˆx′ = s′[size − 1] and
ˆy′ = s′[size−2] and from(size, s) ≤N×(N→ ˆD) (size′, s′) we know
s′[size − 2],
that s[size − 1] ≤ ˆD
show that (size − 1, s[size − 2 → ˆx(cid:98)+ ˆy]) ≤N×(N→ ˆD) (size′ −
ˆy′. So we are left to
so consequently also ˆx ≤ ˆD
1, s′[size − 2 → ˆx′(cid:98)+ ˆy′]). Since (size, s) ≤N×(N→ ˆD) (size′, s′),
we only need to show that ˆx(cid:98)+ ˆy ≤ ˆD
ˆx′(cid:98)+ ˆy′ which immediately
s′[size − 1] and s[size − 2] ≤ ˆD
ˆx′ and ˆy ≤ ˆD
follows from Lemma B.23.
Accepted for ACM CCS, 2020
MLOAD Recall the definition of the rule for addition:
MStatepc((size, s), m, stor, cℓ) ∧ size > 1
∧ ˆo = s[size − 1] ∧ ˆv = (ˆo ∈ N) ? getWord(m, ˆo) : ⊤
=⇒ MStatepc+1((size, s[size − 1 → ˆv]), m, stor, cℓ)
We prove the monotonicity using Lemma B.23. Assume
that there is some variable assignment satisfying the rule
constraints, meaning that there are values (size, s), m, stor,
cℓ, ˆo, ˆv satisfying size > 0, ˆo = s[size − 1], and ˆv =
(ˆo ∈ N) ? getWord(m, ˆo)
: ⊤. We show for any values
(size′, s′) ≥N×(N→ ˆD) (size, s), m′ ≥N→ ˆD m, stor′ ≥N→ ˆD
stor,
cℓ′ ≥B cℓ that there are ˆo′, ˆv′ such that size′ > 1, ˆo′ =
s′[size′ − 1] and ˆv′ = ( ˆo′ ∈ N) ? getWord(m, ˆo′)
: ⊤, and
s[size − 1 → ˆv] ≤N×(N→ ˆD) s′[size′ − 1 → ˆv′]. First we ob-
serve size = size′ and cℓ = cℓ′. We pick ˆo′ = s′[size′ − 1]
and ˆv′ = ( ˆo′ ∈ N) ? getWord(m′, ˆo′)
: ⊤. We know that
s′[size′ − 1] since (size′, s′) ≥N×(N→ ˆD) (size, s)
s[size − 1] ≤ ˆD
ˆo′. For showing that (size, s[size − 1 →
and hence also ˆo ≤ ˆD
ˆv]) ≤N×(N→ ˆD) (size, s′[size′ − 1 → ˆv′]) it is sufficient to show
that ˆv ≤ ˆD
ˆo′ we know that
ˆo ∈ N In this case ˆv = getWord(m, ˆo). Since ˆo ≤ ˆD
∈ N and hence ˆv′ =
getWord(m′, ˆo′). Since m ≤N→ ˆD m′, we know from
getWord(m′, ˆo′)
Lemma B.25 that getWord(m, ˆo) ≤ ˆD
and hence ˆv ≤ ˆD
ˆo′ = ⊤ In this case ˆv′ = ⊤. Since ⊤ is the top element of ˆD
ˆv′.
(Lemma B.4), trivially ˆv ≤ ˆD
ˆo′ also ˆo′ = ⊤ and hence
ˆo = ⊤ In this case ˆv = ⊤ and since ˆo ≤ ˆD
ˆv′.
ˆv′ = ⊤ and consequently ˆv ≤ ˆD
ˆv′. We make a case distinction on ˆo ∈ N
ˆo′ = ˆo In this case clearly ˆo′
either ˆo′ = ˆo or ˆo′ = ⊤.
ˆv′.
□
Soundness of abstract operations. In addition to their mono-
tonicity, we are also interested in the soundness of abstract oper-
ations. Intuitively, an abstract operation is sound, if its result is
at least as abstract than the result of the concrete operation We
formally state soundness for binary operations and comparison
operations.
Lemma B.26 (Soundness of abstract binary operations). Let
x, y ∈ N. Then
opbin(x, y) ≤ ˆD opbin (x, y)
Lemma B.27 (Soundness of abstract comparison operations).
Let x, y ∈ N. Then
opcomp(x, y) = 1 =⇒ opcomp (x, y) = 1
That the memory access is sound, is captured by the following
lemma:
Lemma B.28 (Soundness of memory access). Let m ∈ N → N
and p ∈ N.
m(p) ≤ ˆD
getWord(toWordMem(m), p)
23
Accepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
Main Proof. We slightly refine Theorem 3.1 to consider collision-
free executions of c∗, a detail that we omitted in the original for-
mulation for the sake of presentation.
Theorem (Soundness). Let c∗ be a contract whose code does
not contain DELEGATECALL or CALLCODE. Let Γ be a transaction
environment and let S and S′ be annotated callstacks such that |S′| >
0. Then for all execution states s that are strongly consistent with c∗
such that Γ ⊨ sc∗ :: S →∗ S′ ++ S is a collision-free execution, it holds
that
∗) ⊢ ∆ ∧ αc∗(S
∀∆I . αc∗([sc∗]) ≤ ∆I =⇒ ∃∆. ∆I , δ(c
We will give a proof sketch for the most interesting cases of the
soundness proof, providing formal arguments for the soundness
of local operations as well as transaction-initiating instructions. In