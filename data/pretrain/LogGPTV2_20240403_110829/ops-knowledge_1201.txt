Question: "A Java class 'BankAccount' has methods 'deposit' and 'withdraw' which are not synchronized. Multiple threads are accessing these methods concurrently. Which of the following options best ensures that race conditions are prevented when modifying the account balance?"
 "A": "Declare the 'accountBalance' variable as volatile to ensure visibility of its updates."
 "B": "Use a synchronized block within the 'deposit' and 'withdraw' methods to lock the 'accountBalance' object."
 "C": "Apply the synchronized modifier to the method signatures of 'deposit' and 'withdraw'."
 "D": "Introduce a ReentrantLock and use it to wrap the code that modifies the 'accountBalance' in the 'deposit' and 'withdraw' methods."
Answer: CD