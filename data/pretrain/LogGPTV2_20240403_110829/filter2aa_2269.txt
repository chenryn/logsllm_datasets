# Gaining Access to Android User Data

## Introduction
This presentation, delivered at DEF CON 20, aims to provide valuable insights into both defending and gaining access to Android user data. The scenarios covered include device seizure, loss, border crossing, stop and search, and espionage. 

### About the Company
- **viaForensics**: Specializes in mobile security and digital forensics.
- **R&D Team**: Strong and dedicated to serving government agencies and corporations.

### About the Speaker
- **Thomas Cannon**: Director of Breaking Things at viaForensics.

## Challenges
- **ADB Off by Default**: ADB (Android Debug Bridge) is not enabled by default on most devices.
- **Screen Lock**: Devices are often protected by a screen lock.
- **Code Signing for Updates and Boot Images**: Code signing requirements can prevent unauthorized updates.
- **Encryption**: Data encryption adds another layer of security.
- **Variety of Device Hardware, Software, and Configuration**: Diverse hardware and software configurations complicate the process.

## Bootloader Essentials
- **Usage**: Understanding how the bootloader is used.
- **Accessing Bootloader Mode**: Methods to enter bootloader mode.
- **Bootloader Protocols**: Communication protocols with the bootloader.
- **Bootloader Protection**: Security measures implemented in the bootloader.

## Defeating the Bootloader
- **S-ON vs S-OFF**: S-ON (Security On) and S-OFF (Security Off) states.
- **@secuflag Controlled in Radio Firmware**: Security flags managed in radio firmware.
- **Gold Card**: A specially formatted MicroSD card that can bypass carrier ID checks when flashing ROMs.
- **White Card**: A special SIM card used as an authentication token to control access to diagnostic mode.

### HTC Example
- **Emulate White Card with Hardware**: Combine with Gold Card to enter diagnostics and clear S-ON.
- **CDMA Phones**: White Card not needed for CDMA phones.
- **Custom Boot Image**: Once S-OFF, a custom boot image can be RAM-loaded.
- **Device Wipe**: This technique wipes most devices but not all.
- **HTC Desire**: Successfully used this technique to gain access to some locked stock HTC devices.
- **XTC Clip**: Tool for trying this technique yourself.

## Forensic Boot Image
- **Early Boot Chain**: Start early in the boot chain before the system loads.
- **ADB Root Shell**: Provide an ADB root shell over USB to image the device.
- **Prevent Writes**: Do not mount anything, including cache, to prevent any writes to partitions.
- **Raw NAND Flash**: Devices with raw NAND flash and wear leveling (YAFFS2) can prevent overwriting deleted data.

### Build Boot Image
```sh
$ abootimg -x stock-recovery.img
$ abootimg-unpack-initrd
$ cd ramdisk
(edit ramdisk contents)
$ cd ..
$ abootimg-pack-initrd -f
$ abootimg -u stock-recovery.img -r initrd.img
```

### RAM Disk Contents
- `/dev`
- `/proc`
- `/sbin`
  - `adbd`
  - `busybox` (and symlinks)
  - `nanddump` (to dump partitions)
- `/sys`
- `init`
- `default.prop` (enable root shell, `ro.secure=0`)
- `init.rc` (do not mount partitions, just start `adbd`)
- `ueventd.rc`

### Flash and RAM Load
- **Samsung**
  - Dump partitions with ODIN <= 1.52 or Heimdall.
  - Flashing with ODIN or Heimdall:
    ```sh
    heimdall flash --recovery recovery.bin (Epic 4G)
    heimdall flash --kernel zImage (Galaxy S)
    ```
- **HTC**
  - `fastboot boot recovery.img` (RAM Loading)
  - `fastboot flash recovery recovery.img` (flash partition)
- **Motorola**
  - `sbf_flash image name.sbf` (ensure it only contains recovery)

## JTAG Primer
- **How It Works**: Explanation of JTAG.
- **Tools**: Flasher Box, ORT, RiffBox, Medusa Box.

### Serial Debug Cable
- **Debug Access**: Some devices have debug access via serial cables.
- **Samsung Galaxy SII / Galaxy Note**: Activated by grounding the ID pin of USB with a 523K ohm resistor.
- **TTL Serial Access**: Provided on D+ and D- pins of USB connector.
- **Connection**: Use a Bus Pirate and MicroUSB breakout board.

## Cracking PIN or Password
- **Salt**: Stored in `/data/data/com.android.providers.settings/databases/settings.db`.
- **PIN/Password**: Stored in `/data/system/password.key` (salted SHA1 of password concatenated with salted MD5).

### Example
```sh
$ python -c "print '%x' % 720624377925219614"
a002c0dbeb8351e
5D8EC41CB1812AC0BD9CB6C4F2CD0122:a002c0dbeb8351e
```
- **Crack with Software**: Tools like oclHashcat-lite.

### HID Brute Force
- **AVR ATMEGA32U4**: Emulates a USB keyboard typing PINs.
- **USB OTG Cable**: For USB host.
- **Rate Limiting**: Devices usually rate limit attempts and wipe after too many incorrect passcodes.

## Android Encryption
- **Supported Since Android 3.0**: Based on dm-crypt.
- **AES 128 CBC**: Key management may vary (e.g., Samsung has its own module).
- **PBKDF2**: 2000 iterations.
- **Master Key**: 128 bits, IV (ESSIV:SHA256), encrypted userdata partition.

### Cracking Encryption
- **Encrypted Master Key + Salt**: Stored in footer.
- **Footer Location**: End of partition, footer file on another partition, or as a partition itself.
- **Image Device**: Locate footer and encrypted userdata partition.
- **Parse Footer**: Locate Salt and Encrypted Master Key.
- **Password Guess**: Run through PBKDF2, use resulting key and IV to decrypt master key, and then decrypt the first sector of the encrypted image.
- **PIN Cracking**: Takes seconds. Passwords are usually short or follow patterns due to being the same as the lock screen password.

### Evil Maid Attack
- **Load App**: Onto system partition, wait for user to boot phone, get remote access to decrypted user data.
- **Rootkits**: Easy to compile for Android.
- **Evil USB Charger**: Can also be used.

### Reverse Shell
- **App with No Permissions**: Can create a reverse shell, giving remote access to the attacker.

### Desperate Techniques
- **Hard Reset**: Some devices prior to 3.0 did not wipe data properly. Wipe, boot, root, and recover.
- **Chip-off**: De-solder NAND chips.
- **Screen Smudges**: Analyze for patterns.

### More Techniques
- **Custom update.zip**: Can you get one signed?
- **Race Condition on Updates via SD Cards**: Fixed.
- **Own a CA**: MITM connection, push app, update, or exploit.
- **Google Play Entry**: If credentials are cached on desktop.

## Santoku Linux
- **Free and Open Bootable Linux Distribution**: Full of tools.
- **Collaboration**: With other mobile security professionals.
- **Mobile Forensics, App Security Testing, Malware Analysis**.
- **Alpha Release**: Available at [santoku-linux.com](https://santoku-linux.com).
- **Latest Presentations**: Visit [viaforensics.com/resources/presentations](https://viaforensics.com/resources/presentations).

## Contact
- **Thomas Cannon**: @thomas_cannon
- **GitHub**: [github.com/thomascannon](https://github.com/thomascannon)

Thank you!