in
the
middle
attac
k
In
case
the
b
o
otloader
uses
the
passw
ord
to
decrypt
the
disks,
a
simple
patc
hing
of
the
passw
ord
routine
will
not
suce
:
the
attac
k
er
really
needs
to
ha
v
e
the
b
o
otloader
decrypt
the
system
partition
20
.
If
the
b
o
otloader
do
esn't
v
erify
that
the
BIOS
k
eyb
oard
buer
is
empt
y
b
efore
asking
for
a
passw
ord,
it
could
b
e
lled
b
y
an
attac
k
er
so
that
when
the
b
o
otloader
actually
calls
in
terruption
0x16
to
retriev
e
k
eys,
the
BIOS
acts
lik
e
the
attac
k
er
w
as
sim
ultaneously
t
yping
a
passw
ord
20
One
could
also,
quite
inelegan
tly
,
try
to
retriev
e
the
decryption
algorithm
b
y
rev
erse
engineering
the
b
o
otloader
and
attempt
to
reimplemen
t
a
decryption
routine
it
in
his
o
wn
custom
b
o
otloader...
from
the
console.
T
o
ll
the
k
eyb
oard
buer
b
efore
the
b
o
otloader
itself
tries
to
call
in-
terruption
0x16,
w
e
will
need
to
insert
our
o
wn
rogue
b
o
otloader
b
efore
the
pre-b
o
ot
authen
tication
one,
ll
the
buer
in
some
w
a
y
,
and
then
transfer
execution
bac
k
to
the
original
b
o
otloader.
Initializing
the
k
eyb
oard
buer
could
b
e
done
b
y
writing
directly
to
this
buer
lo
cated
at
0x40:0x1e
and
then
up
date
the
p
oin
ters
to
the
next
and
latest
c
haracters
at
lo
cations
0x40:1c
and
0x40:1a.
But
instead
of
writing
directly
to
the
BIOS
Data
Area,
there
is
a
more
elegan
t
w
a
y
to
handle
this
problem
:
micro
con
trollers
(PIC)
programming...
W
e
ha
v
e
men
tioned
previously
that
the
k
eyb
oard
and
the
motherb
oard
b
oth
con
tain
Programmable
In
terrupt
Con
trollers
(PICs),
that
can
b
e
con
trolled
21
directly
via
I/O
p
orts
0x60
and
0x64.
By
articially
forcing
the
8042[22℄
micro
con
troller
to
send
scanco
des
to
the
8259[23℄
micro
con-
troller,
w
e
can
em
ulate
the
act
of
pressing
and
releasing
a
k
ey
on
the
k
eyb
oard
:
cf
:
gur
e
16.
Fig.
16.
Keystrok
e
em
ulation
via
8042
and
8259
micro
con
trollers
programming.
21
W
e
will
not
detail
the
tec
hnicalit
y
in
v
olv
ed
in
this
tric
k
in
this
pap
er,
but
the
in
ter-
ested
reader
can
note
that
The
Art
of
Assem
bly
[24℄,
in
particular
c
hapter
20
is
a
m
ust
read
reference
on
that
topic.
The
attac
k
roadmap
to
install
the
rogue
b
o
otloader
can
therefore
b
e
di-
vided
in
to
the
follo
wing
steps
:
cf:
gur
e
17.
Fig.
17.
Roadmap
to
install
a
rogue
b
o
otloader
on
the
disk.
Once
installed
in
place
of
the
original
b
o
otloader,
the
rogue
b
o
otloader
needs
to
ll
in
the
BIOS
k
eyb
oard
buer
b
efore
restoring
the
old
MBR
and
sim
ulate
22
an
in
terruption
0x19
to
restart
the
b
o
otstraping
pro
cess.
Fig.
18.
Roadmap
for
the
rogue
In
visible
Man
b
o
otloader
during
the
b
o
otloader
in
the
middle
attac
k.
The
OS
indep
endan
t
co
de
of
our
rogue
b
o
otloader,
called
In
visible
Man
23
,
implemen
ting
this
b
o
otloader
in
the
middle
attac
k
can
b
e
found
on
A
nnexe
F.
W
e
also
pro
vide
an
example
of
ho
w
to
install
this
b
o
otloader
under
a
GNU/Lin
ux
en
vironmen
t
in
A
nnexe
G.
T
o
illustrate
the
attac
k,
let's
consider
the
follo
wing
scenario
:
an
attac
k
er
has
obtained
ro
ot
access
to
a
GNU/Lin
ux
computer
running
Ubun
tu.
This
computer
has
a
second
Op
erating
System,
Windo
ws
XP
Profes-
22
W
e
could
attempt
to
issue
an
actual
in
t
0x19,
but
Ralf
Bro
wn
rep
orted
that
some
non
standard-complian
t
BIOSes
mo
dify
the
RAM
when
this
in
terrupt
is
called.
Plus
w
e
w
an
t
our
exploit
to
w
ork
against
virtual
mac
hines,
whose
b
eha
vior
during
0x19
is
not
kno
wn.
23
This
attac
ks
in
v
olv
es
k
eystrok
es
em
ulation
b
y
programming
the
8042
PIC
em
b
edded
inside
the
k
eyb
oard.
Hence,
remo
ving
the
k
eyb
oard
will
mak
e
the
exploit
fail...
this
is
wh
y
w
e
called
it
In
visible
Man
and
not
In
visible
k
eyb
oard
for
instance
;)
sional
SP2,
installed
on
its
o
wn
driv
e,
fully
encrypted
using
DiskCryp-
tor
v
ersion
0.2.6
(latest).
Both
the
GNU/Lin
ux
and
the
Windo
ws
Op-
erating
Systems
are
loaded
via
a
common
Grub
(v
ersion
0.97)
b
o
ot-
loader,
protected
with
an
MD5
passw
ord
hash.
The
attac
k
er
cannot
sim-
ply
moun
t
the
Windo
ws
partition
from
the
compromised
GNU/Lin
ux,
b
ecause
of
the
AES
encryption
la
y
er
added
b
y
DiskCryptor.
But
since
he
has
kno
wledge
of
b
oth
passw
ords
24
,
resp
ectiv
ely
toto
and
titi,
the
at-
tac
k
er
is
nonetheless
decided
to
b
ypass
b
oth
the
Grub
and
the
DiskCryp-
tor
pre-b
o
ot
authen
tication
routines
to
get
the
Windo
ws
OS
b
o
oted.
Since
there
are
really
t
w
o
passw
ords
to
en
ter
in
a
ro
w,
the
attac
k
er
will
need
to
use
the
passw
ord
c
haining
tec
hnique
in
tro
duced
earlier.
Let's
detail
a
bit
the
sequence
of
k
eystrok
es
to
b
e
en
tered
up
on
reb
o
ot
:
Because
Grub
is
congured
to
b
o
ot
silen
tly
without
displa
ying
the
men
u
to
the
user
in
rst
place,
the
attac
k
er
rst
needs
to
sim
ulate
an
esc
ap
e
k
eystrok
e
to
get
access
to
the
Grub
men
u.
He
will
then
select
the
desired
OS
b
y
em
ulating
the
up
key
or
down
key
and
then
the
enter
k
ey
.
A
t
this
time,
Grub
will
prompt
for
its
passw
ord
:
the
attac
k
er
needs
to
sim
ulate
the
fact
of
en
tering
the
Grub
passw
ord,
toto,
and
then
press
the
enter
k
ey
.
Finally
,
DiskCryptor's
authen
tication
will
request
its
passw
ord,
titi,
follo
w
ed
b
y
a
nal
enter
k
eystrok
e.
Assuming
Windo
ws
is
the
rst
Op
erating
system
in
the
Grub
men
u,
the
whole
k
eystrok
e
sequence
to
b
e
sim
ulated
b
y
the
rogue
b
o
otloader
at
b
o
ottime
is
therefore
:
[escap
e℄[en
ter℄[t℄[o℄[t℄[o℄[en
ter℄[t℄[i℄[t℄[i℄[en
ter℄.
In
visible
Man
is
able
to
initialize
the
BIOS
k
eyb
oard
buer
to
sim
ulate
this
complex
k
eyb
oard
sequence
b
efore
transfering
con
trol
to
Grub.
The
installation
of
In
visible
Man
with
the
new
passw
ord
sequence
is
illus-
trated
in
gur
e
19.
Before
the
Windo
ws
splash
screen
nally
app
ears,
an
observ
ator
lo
oking
at
the
screen
of
the
computer
w
ould
see
something
lik
e
gur
e
20
where
the
rst
passw
ord
en
tered
b
elo
w
the
grub
men
u
is
the
Grub
one,
while
the
follo
wing
one
is
the
one
of
Disk
cryptor.
The
main
limitation
of
this
mec
hanism
is
the
size
of
the
BIOS
k
eyb
oard
buer,
whic
h
is
only
32
b
ytes
long.
Since
most
k
eys
-apart
from
sev-
eral
con
trol
c
haracters
lik
e
the
enter
k
ey
,
co
ded
on
only
one
b
yte-
are
co
ded
o
v
er
t
w
o
b
ytes,
an
attac
k
er
can
con
truct
a
sequence
of
ab
out
16
24
P
ossibly
thanks
to
the
BIOS
k
eyb
oard
buer
h
ystheresis
attac
k
describ
ed
in
the
rst
part
of
this
pap
er...
Fig.
19.
Conguring
In
visible
Man
to
ll
the
BIOS
k
eyb
oard
buer
with
a
complex
passw
ord
sequence
up
on
reb
o
ot.
Fig.
20.
The
In
visible
Man
b
ypassing
b
oth
Grub
and
DiskCryptor
authen
tications
b
y
sim
ulating
a
complex
k
eyb
oard
sequence
via
passw
ord
c
haining.
k
eystrok
es
only
.
In
practice,
this
means
that
if
the
DiskCryptor's
pass-
w
ord
is
longer
than
16
c
haracters,
then
the
attac
k
will
fail.
Finally
,
if
a
pre-b
o
ot
authen
tication
soft
w
are
do
esn't
initialize
the
BIOS
k
eyb
oard
buer
b
efore
usage,
it
can
b
e
tric
k
ed
in
to
reading
arbitrary
input,
apparen
tly
coming
from
the
console,
but
in
realit
y
crafted
b
y
a
b
o
otloader
in
the
middle
lik
e
our
In
visible
Man,
installed
b
y
an
attac
k
er
with
enough
privileges
to
mo
dify
the
MBR,
but
without
console
access.
5
Mitigating
the
vulnerabilities
In
a
n
utshell,
w
e
ha
v
e
sho
w
ed
ho
w
not
initializing
the
BIOS
k
eyb
oard
buer
b
efore
usage,
or
not
clearing
it
after
usage
lead
to
p
oten
tial
BIOS
k
eyb
oard
buer
manipulations.
There
are
really
t
w
o
p
oten
tial
vulnera-
bilities
w
e
need
to
address
:
initialize
the
BIOS
k
eyb
oard
buer
memory
b
efore
the
b
o
otloader
uses
it,
and
clean
the
BIOS
Data
Area
in
three
lo
cations
:
the
BIOS
k
eyb
oard
buer
itself
(32
b
ytes
long,
at
address
0x40:0x1e),
and
the
t
w
o
asso
ciated
p
oin
ters
at
addresses
0x40:1a
and
0x40:0x1c
(to
a
v
oid
an
y
information
leak
regarding
the
passw
ord
length)
after
usage.
W
e
can
think
of
t
w
o
w