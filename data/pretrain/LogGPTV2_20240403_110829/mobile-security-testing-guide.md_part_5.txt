Mobile App Authentication Architectures
http://www.site.com/page.asp?authenticated=no
The client can arbitrarily change the GET parameters sent with the request. Nothing prevents the client from simply
changing the value of the authenticated parameter to "yes", effectively bypassing authentication.
Although this is a simplistic example that you probably won't find in the wild, programmers sometimes rely on "hidden"
client-side parameters, such as cookies, to maintain authentication state. They assume that these parameters can't be
tampered with. Consider, for example, the following classic vulnerability in Nortel Contact Center Manager. The
administrative web application of Nortel's appliance relied on the cookie "isAdmin" to determine whether the logged-in
user should be granted administrative privileges. Consequently, it was possible to get admin access by simply setting
the cookie value as follows:
isAdmin=True
Security experts used to recommend using session-based authentication and maintaining session data on the server
only. This prevents any form of client-side tampering with the session state. However, the whole point of using
stateless authentication instead of session-based authentication is to not have session state on the server. Instead,
state is stored in client-side tokens and transmitted with every request. In this case, seeing client-side parameters
such as isAdmin is perfectly normal.
To prevent tampering cryptographic signatures are added to client-side tokens. Of course, things may go wrong, and
popular implementations of stateless authentication have been vulnerable to attacks. For example, the signature
verification of some JSON Web Token (JWT) implementations could be deactivated by setting the signature type to
"None". We'll discuss this attack in more detail in the "Testing JSON Web Tokens" chapter.
Testing Best Practices for Passwords (MSTG-AUTH-5 and MSTG-AUTH-6)
Password strength is a key concern when passwords are used for authentication. The password policy defines
requirements to which end users should adhere. A password policy typically specifies password length, password
complexity, and password topologies. A "strong" password policy makes manual or automated password cracking
difficult or impossible. The following sections describe key areas for strong passwords, for further information please
consult the OWASP Authentication Cheat Sheet
Static Analysis
Confirm the existence of a password policy and verify the implemented password complexity requirements according
to the OWASP Authentication Cheat Sheet. Identify all password-related functions in the source code and make sure
that a verification check is performed in each of them. Review the password verification function and make sure that it
rejects passwords that violate the password policy.
Password Length:
Minimum password length (10 characters) should be enforced.
Maximum password length should not be too short because it will prevent users from creating passphrases.
The typical maximum length is 128 characters.
Password Complexity - The password must meet at least three out of the following four complexity rules:
at least one uppercase character (A-Z)
at least one lowercase character (a-z)
at least one digit (0-9)
at least one special character
37
Mobile App Authentication Architectures
zxcvbn
zxcvbn is a common library that can be used for estimating password strength, inspired by password crackers. It is
available in JavaScript but also for many other programming languages on the server side. There are different
methods of installation, please check the Github repo for your preferred method. Once installed, zxcvbn can be used
to calculate the complexity and the amount of guesses to crack the password.
After adding the zxcvbn JavaScript library to the HTML page, you can execute the command zxcvbn in the browser
console, to get back detailed information about how likely it is to crack the password including a score.
The score is defined as follows and can be used for a password strength bar for example:
0 # too guessable: risky password. (guesses = 10^10)
Regular Expressions are also often used to enforce password rules. For example, the JavaScript implementation by
NowSecure uses regular expressions to test the password for various characteristics, such as length and character
type. The following is an excerpt of the code:
function(password) {
if (password.length < owasp.configs.minLength) {
return 'The password must be at least ' + owasp.configs.minLength + ' characters long.';
}
},
// forbid repeating characters
function(password) {
if (/(.)\1{2,}/.test(password)) {
return 'The password may not contain sequences of three or more repeated characters.';
}
},
function(password) {
if (!/[a-z]/.test(password)) {
return 'The password must contain at least one lowercase letter.';
}
},
// require at least one uppercase letter
function(password) {
38
Mobile App Authentication Architectures
if (!/[A-Z]/.test(password)) {
return 'The password must contain at least one uppercase letter.';
}
},
// require at least one number
function(password) {
if (!/[0-9]/.test(password)) {
return 'The password must contain at least one number.';
}
},
// require at least one special character
function(password) {
if (!/[^A-Za-z0-9]/.test(password)) {
return 'The password must contain at least one special character.';
}
},
Login Throttling
Check the source code for a throttling procedure: a counter for logins attempted in a short period of time with a given
user name and a method to prevent login attempts after the maximum number of attempts has been reached. After an
authorized login attempt, the error counter should be reset.
Observe the following best practices when implementing anti-brute-force controls:
After a few unsuccessful login attempts, targeted accounts should be locked (temporarily or permanently), and
additional login attempts should be rejected.
A five-minute account lock is commonly used for temporary account locking.
The controls must be implemented on the server because client-side controls are easily bypassed.
Unauthorized login attempts must tallied with respect to the targeted account, not a particular session.
Additional brute force mitigation techniques are described on the OWASP page Blocking Brute Force Attacks.
Dynamic Testing (MSTG-AUTH-6)
Automated password guessing attacks can be performed using a number of tools. For HTTP(S) services, using an
interception proxy is a viable option. For example, you can use Burp Suite Intruder to perform both wordlist-based and
brute-force attacks.
Please keep in mind that when using Burp Suite Community Edition, a throttling mechanism will be activated
after several requests that will slow down your attacks with Burp Intruder dramatically. Also no built-in password
lists are available in this version. If you want to execute a real brute force attack use either Burp Suite
Professional or OWASP ZAP.
Execute the following steps for a wordlist based brute force attack with Burp Intruder:
Start Burp Suite Professional.
Create a new project (or open an existing one).
Set up your mobile device to use Burp as the HTTP/HTTPS proxy. Log into the mobile app and intercept the
authentication request sent to the backend service.
Right-click this request on the 'Proxy/HTTP History' tab and select 'Send to Intruder' in the context menu.
Select the 'Intruder' tab in Burp Suite. For further information on how to use Burp Intruder read the official
documentation on Portswigger.
Make sure all parameters in the 'Target', 'Positions', and 'Options' tabs are appropriately set and select the
'Payload' tab.
Load or paste the list of passwords you want to try. There are several resources available that offer password
lists, like FuzzDB, the built-in lists in Burp Intruder or the files available in /usr/share/wordlists on Kali Linux.
39
Mobile App Authentication Architectures
Once everything is configured and you have a word-list selected, you're ready to start the attack!
Click the 'Start attack' button to attack the authentication.
A new window will open. Site requests are sent sequentially, each request corresponding to a password from the list.
Information about the response (length, status code etc.) is provided for each request, allowing you to distinguish
successful and unsuccessful attempts:
In this example, you can identify the successful attempt according to the different length and the HTTP status code,
which reveals the password 12345.
To test if your own test accounts are prone to brute forcing, append the correct password of your test account to the
end of the password list. The list shouldn't have more than 25 passwords. If you can complete the attack without
permanently or temporarily locking the account or solving a CAPTCHA after a certain amount of requests with wrong
passwords, that means the account isn't protected against brute force attacks.
Tip: Perform these kinds of tests only at the very end of your penetration test. You don't want to lock out your
account on the first day of testing and potentially having to wait for it to be unlocked. For some projects
unlocking accounts might be more difficult than you think.
Testing Stateful Session Management (MSTG-AUTH-2)
Stateful (or "session-based") authentication is characterized by authentication records on both the client and server.
The authentication flow is as follows:
1. The app sends a request with the user's credentials to the backend server.
40
Mobile App Authentication Architectures
2. The server verifies the credentials If the credentials are valid, the server creates a new session along with a
random session ID.
3. The server sends to the client a response that includes the session ID.
4. The client sends the session ID with all subsequent requests. The server validates the session ID and retrieves
the associated session record.
5. After the user logs out, the server-side session record is destroyed and the client discards the session ID.
When sessions are improperly managed, they are vulnerable to a variety of attacks that may compromise the session
of a legitimate user, allowing the attacker to impersonate the user. This may result in lost data, compromised
confidentiality, and illegitimate actions.
Session Management Best Practices
Locate any server-side endpoints that provide sensitive information or functions and verify the consistent enforcement
of authorization. The backend service must verify the user's session ID or token and make sure that the user has
sufficient privileges to access the resource. If the session ID or token is missing or invalid, the request must be
rejected.
Make sure that:
Session IDs are randomly generated on the server side.
The IDs can't be guessed easily (use proper length and entropy).
Session IDs are always exchanged over secure connections (e.g. HTTPS).
The mobile app doesn't save session IDs in permanent storage.
The server verifies the session whenever a user tries to access privileged application elements, (a session ID
must be valid and must correspond to the proper authorization level).
The session is terminated on the server side and session information deleted within the mobile app after it times
out or the user logs out.
Authentication shouldn't be implemented from scratch but built on top of proven frameworks. Many popular
frameworks provide ready-made authentication and session management functionality. If the app uses framework
APIs for authentication, check the framework security documentation for best practices. Security guides for common
frameworks are available at the following links:
Spring (Java)
Struts (Java)
Laravel (PHP)
Ruby on Rails
A great resource for testing server-side authentication is the OWASP Web Testing Guide, specifically the Testing
Authentication and Testing Session Management chapters.
Testing Session Timeout (MSTG-AUTH-7)
Minimizing the lifetime of session identifiers and tokens decreases the likelihood of successful account hijacking.
Static Analysis
In most popular frameworks, you can set the session timeout via configuration options. This parameter should be set
according to the best practices specified in the framework documentation. The recommended timeout may be
between 10 minutes and two hours, depending on the app's sensitivity. Refer to the framework documentation for
examples of session timeout configuration:
Spring (Java)
Ruby on Rails
41
Mobile App Authentication Architectures
PHP
ASP.Net
Dynamic Analysis
To verify if a session timeout is implemented, proxy your requests through an interception proxy and perform the
following steps:
1. Log in to the application.
2. Access a resource that requires authentication, typically a request for private information belonging to your
account.
3. Try to access the data after an increasing number of 5-minute delays has passed (5, 10, 15, ...).
4. Once the resource is no longer available, you will know the session timeout.
After you have identified the session timeout, verify whether it has an appropriate length for the application. If the
timeout is too long, or if the timeout does not exist, this test case fails.
When using Burp Proxy, you can use the Session Timeout Test extension to automate this test.
Testing User Logout (MSTG-AUTH-4)
The purpose of this test case is verifying logout functionality and determining whether it effectively terminates the
session on both client and server and invalidates a stateless token.
Failing to destroy the server-side session is one of the most common logout functionality implementation errors. This
error keeps the session or token alive, even after the user logs out of the application. An attacker who gets valid
authentication information can continue to use it and hijack a user's account.
Many mobile apps don't automatically log users out because it is inconvenient for customers by implementing
stateless authentication. The application should still have a logout function, and it should be implemented according to
best practices, destroying the access and refresh token on the client and server. Otherwise, authentication can be
bypassed when the refresh token is not invalidated.
Static Analysis
If server code is available, make sure logout functionality terminates the session correctly. This verification will depend
on the technology. Here are different examples of session termination for proper server-side logout:
Spring (Java)
Ruby on Rails
PHP
If access and refresh tokens are used with stateless authentication, they should be deleted from the mobile device.
The refresh token should be invalidated on the server.
Dynamic Analysis
Use an interception proxy for dynamic application analysis and execute the following steps to check whether the
logout is implemented properly:
1. Log in to the application.
2. Access a resource that requires authentication, typically a request for private information belonging to your
account.
3. Log out of the application.
4. Try to access the data again by resending the request from step 2.
42
Mobile App Authentication Architectures
If the logout is correctly implemented on the server, an error message or redirect to the login page will be sent back to
the client. On the other hand, if you receive the same response you got in step 2, the token or session ID is still valid
and hasn't been correctly terminated on the server. The OWASP Web Testing Guide (OTG-SESS-006) includes a
detailed explanation and more test cases.
Testing Two-Factor Authentication and Step-up Authentication (MSTG-AUTH-
9 and MSTG-AUTH-10)
Two-factor authentication (2FA) is standard for apps that allow users to access sensitive functions and data. Common
implementations use a password for the first factor and any of the following as the second factor:
One-time password via SMS (SMS-OTP)
One-time code via phone call
Hardware or software token
Push notifications in combination with PKI and local authentication
The secondary authentication can be performed at login or later in the user's session. For example, after logging in to
a banking app with a username and PIN, the user is authorized to perform non-sensitive tasks. Once the user
attempts to execute a bank transfer, the second factor ("step-up authentication") must be presented.
Dangers of SMS-OTP
Although one-time passwords (OTP) sent via SMS are a common second factor for two-factor authentication, this
method has its shortcomings. In 2016, NIST suggested: "Due to the risk that SMS messages may be intercepted or
redirected, implementers of new systems SHOULD carefully consider alternative authenticators.". Below you will find
a list of some related threats and suggestions to avoid successful attacks on SMS-OTP.
Threats:
Wireless Interception: The adversary can intercept SMS messages by abusing femtocells and other known
vulnerabilities in the telecommunications network.
Trojans: Installed malicious applications with access to text messages may forward the OTP to another number
or backend.
SIM SWAP Attack: In this attack, the adversary calls the phone company, or works for them, and has the victim's
number moved to a SIM card owned by the adversary. If successful, the adversary can see the SMS messages
which are sent to the victim's phone number. This includes the messages used in the two-factor authentication.
Verification Code Forwarding Attack: This social engineering attack relies on the trust the users have in the
company providing the OTP. In this attack, the user receives a code and is later asked to relay that code using
the same means in which it received the information.
Voicemail: Some two-factor authentication schemes allow the OTP to be sent through a phone call when SMS is
no longer preferred or available. Many of these calls, if not answered, send the information to voicemail. If an
attacker was able to gain access to the voicemail, they could also use the OTP to gain access to a user's
account.
You can find below several suggestions to reduce the likelihood of exploitation when using SMS for OTP:
Messaging: When sending an OTP via SMS, be sure to include a message that lets the user know 1) what to do if
they did not request the code 2) your company will never call or text them requesting that they relay their
password or code.
Dedicated Channel: Send OTPs to a dedicated application that is only used to receive OTPs and that other
applications can't access.
Entropy: Use authenticators with high entropy to make OTPs harder to crack or guess.
Avoid Voicemail: If a user prefers to receive a phone call, do not leave the OTP information as a voicemail.
43
Mobile App Authentication Architectures
Transaction Signing with Push Notifications and PKI
Another alternative and strong mechanisms to implement a second factor is transaction signing.
Transaction signing requires authentication of the user's approval of critical transactions. Asymmetric cryptography is
the best way to implement transaction signing. The app will generate a public/private key pair when the user signs up,
then registers the public key on the back end. The private key is securely stored in the KeyStore (Android) or
KeyChain (iOS). To authorize a transaction, the back end sends the mobile app a push notification containing the
transaction data. The user is then asked to confirm or deny the transaction. After confirmation, the user is prompted to
unlock the Keychain (by entering the PIN or fingerprint), and the data is signed with user's private key. The signed
transaction is then sent to the server, which verifies the signature with the user's public key.