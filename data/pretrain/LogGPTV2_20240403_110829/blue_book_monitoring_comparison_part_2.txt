Foundation](https://www.cncf.io/), [which
is](https://en.wikipedia.org/wiki/Cloud_Native_Computing_Foundation) a Linux
Foundation project that was founded in 2015 to help advance container technology
and align the tech industry around its evolution.
Prometheus has native support to be run in and to monitor Kubernetes clusters.
Although Nagios [can
monitor](https://exchange.nagios.org/directory/Plugins/Containers/kubernetes-2Dnagios/details)
Kubernetes, it's not meant to be run inside it.
## Documentation
I haven't used much the [Nagios
documentation](https://www.nagios.org/documentation/), but I can tell you that
even though it's improving
[Prometheus](https://prometheus.io/docs/introduction/overview/)' is not very
complete, and you find yourself often looking at issues and stackoverflow.
## Integrations
Official Prometheus’ integrations are [practically
boundless](https://prometheus.io/docs/instrumenting/exporters/). The long list
of existing exporters combined with the user’s ability to write new exporters
allows integration with any tool, and PromQL allows users to query Prometheus
data from any visualization tool that supports it.
Nagios has a [very limited list of official
integrations](https://www.nagios.com/integrations/). Most of them are operating
systems which use the agents to monitor other network components. Others include
MongoDB, Oracle, Selenium, and VMware. Once again, the community comes to rescue
us with [their contributions](https://exchange.nagios.org/), keep in mind that
you'll need to dive into the exchange for special monitoring needs.
## Alerts
Prometheus offers Alertmanager, a simple service that allows users to set
thresholds and push alerts when breaches occur.
Nagios uses a variety of media channels for alerts, including email, SMS, and
audio alerts. Because its integration with the operating system is swift, Nagios
even knows to generate a WinPopup message with the alert details.
On a side note, there is an alert Nagios plugin that alerts for Prometheus query
results.
As Nagios doesn't support labels for the metrics, so there is [no grouping,
routing or
deduplication](https://prometheus.io/docs/introduction/comparison/#scope-2) of
alerts as Prometheus do. Also the silence of alerts is done individually on
each alert, while in Prometheus it's done using labels, which is more powerful.
## Advanced monitorization
Nagios alerting is based on the return codes of scripts, Prometheus on the other
hand alerts based on metrics, this fact together with the easy and powerful
query language PromQL allows the user to make much more rich alerts that better
represent the state of the system to monitor.
In Nagios there is no concept of making queries to the gathered data.
## Data storage
Nagios has no storage per-se, beyond the current check state. There are plugins
which can store data such as for [visualisation](https://docs.pnp4nagios.org/).
Prometheus has a defined amount of data that's available (for example 30 days),
to be able to store more you need to use Thanos, the prometheus long term
storage solution.
## High availability
Nagios servers are standalone, they are not meant to collaborate with other
instances, so to achieve high availability you need to do it the old way, with
multiple independent instances with a loadbalancer upfront.
Prometheus can have different servers running collaboratively, monitoring
between themselves. So you get high availability for free without any special
configuration.
## Dynamic infrastructure
In the past, infrastructure had a low rate of change, it was strange that you
needed to add something to the monitorization system. Nowadays, with cloud
infrastructures and kubernetes, instances are spawned and killed continuously.
In Nagios, you need to manually configure each new service following the push
architecture. In prometheus, thanks to the pull architecture and service
discovery, new services are added and dead one removed automatically.
## Custom script execution
Nagios alerting is based on the return codes of scripts, therefore it's
straightforward to create an alert based on a custom script.
If you need to monitor something in Prometheus, and nobody has done it before,
the development costs of an ad-hoc solutions are incredibly high, compared to
Nagios. You'd need either to:
* Use the [script_exporter](https://github.com/adhocteam/script_exporter) with
    your script.  I've seen their repo, and the last commit is from March, and
    they [don't have a helm chart to install
    it](https://github.com/adhocteam/script_exporter/issues/42). I've searched
    other alternative exporters, but this one seems to be the best for this
    approach.
    The advantages of this approach is that you don't need to create and
    maintain a new prometheus exporter.
    The disadvantages though are that you'd have to:
    * Manually install the required exporter resources in the cluster until a helm chart
        exists.
    * Create the helm charts yourself if they don't develop it.
    * Integrate your tool inside the script_exporter docker through one of these
        ways:
        * Changing the exporter Docker image to add it. Which would mean a Docker image
            to maintain.
        * Mounting the binary through a volume inside kubernetes. Which would mean
            defining a way on how to upload it and assume the high availability penalty
            that a stateful kubernetes service entail with the cluster configuration right
            now.
    * If it's not already in your stack, it would mean adding a new exporter to
        maintain and a new development team to depend on.
    Alternatively you can use the script exporter binary in a baremetal or
    virtualized server instead of using a docker, that way you wouldn't need to
    maintain the different dockers for the different solutions, but you'd need
    a "dedicated" server for this purpose.
* Create your own exporter. You'd need to create a docker that exposes the
command line functionality through a `metrics` endpoint. You wouldn't depend on
a third party development team and would be able to use your script. On the
other side it has the following disadvantages:
    * We would need to create and maintain a new prometheus exporter. That would mean
        creating and maintaining the Docker with the command line tool and a simple http
        server that exposes the `/metrics` endpoint, that will run the command whenever the
        Prometheus server accesses this endpoint.
    * We add a new exporter to maintain but we develop it ourselves, so we don't depend on
        third party developers.
* Use other exporters to do the check. For example, if you can deduce the
    critical API call that will decide if the script fails or succeeds, you
    could use the blackbox exporter to monitor it instead. The advantages of
    this solution are:
    * We don't add new infrastructure to develop or maintain.
    * We don't depend on third party development teams.
    And the disadvantage is that if the logic changes, we would need to update
    how we do the check.
## Network monitorization
[Both](https://prometheus.io/docs/introduction/faq/#can-i-monitor-network-devices)
can use the Simple Network Management Protocol (SNMP) to communicate with
network switches or other components by using SNMP protocol to query their
status.
Not being an expert on the topic, knowing it's been one of the core focus of
Nagios in the past years and as I've not been able to find good comparison
between both, I'm going to suppose that even though both support network
monitoring, Nagios does a better job.
## Summary
| Metric                                              | Nagios | Prometheus |
| ---                                                 | ---    | ---        |
| [Open Source](#open-source)                         | ✓*     | ✓✓         |
| [Community](#community)                             | ✓      | ✓✓         |
| [Configuration and usage](#configuration-and-usage) | ✓      | x          |
| [Visualizations](#visualizations)                   | ✓      | ✓✓         |
| [Ansible Role](#installation)                       | ✓      | ✓✓         |
| [Helm chart](#installation)                         | x      | ✓          |
| [Kubernetes](#kubernetes)                           | x      | ✓          |
| [Documentation](#documentation)                     | ✓      | x          |
| [Integrations](#integrations)                       | ✓      | ✓✓         |
| [Alerts](#alerts)                                   | ✓      | ✓✓         |
| [Advanced monitoring](#advanced-monitoring)         | x      | ✓          |
| [Custom script execution](#custom-script-execution) | ✓✓     | ✓          |
| [Data storage](#data-storage)                       | x      | ✓          |
| [Dynamic infrastructure](#dynamic-infrastructure)   | x      | ✓          |
| [High availability](#high-availability)             | ✓      | ✓✓         |
| [Network Monitoring](#network-monitoring)           | ✓      | ✓          |
\* Only Nagios Core and the community contributions are open sourced.
Where each symbol means:
* x: Doesn't meet the criteria.
* ✓: Meets the criteria.
* ✓✓: Meets the criteria and it's better than the other solution.
* ?: I'm not sure.
Nagios is the reference of the old-school monitoring solutions, suitable for
basic monitoring of small, static and/or old-school systems where blackbox
probing is sufficient.
Prometheus is the reference of the new-wave monitoring solutions, suitable for
more advanced monitoring of dynamic, new-wave systems (web applications, cloud,
containers or Kubernetes) where whitebox monitoring is desired.
# References
* [Logz io post on Prometheus vs Nagios](https://logz.io/blog/prometheus-vs-nagios-metrics/)