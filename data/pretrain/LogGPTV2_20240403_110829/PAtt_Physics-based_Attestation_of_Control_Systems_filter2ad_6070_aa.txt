title:PAtt: Physics-based Attestation of Control Systems
author:Hamid Reza Ghaeini and
Matthew Chan and
Raad Bahmani and
Ferdinand Brasser and
Luis Garcia and
Jianying Zhou and
Ahmad-Reza Sadeghi and
Nils Ole Tippenhauer and
Saman A. Zonouz
PAtt: Physics-based Attestation of Control Systems
Hamid Reza Ghaeini1, Matthew Chan2, Raad Bahmani3, Ferdinand Brasser3, Luis Garcia4, Jianying Zhou1,
Ahmad-Reza Sadeghi3, Nils Ole Tippenhauer5, and Saman Zonouz2
1Singapore University of Technology and Design, PI:EMAIL, PI:EMAIL
2Rutgers University, {matthew.chan, saman.zonouz}@rutgers.edu
3TU Darmstadt, {raad.bahmani, ferdinand.brasser, ahmad.sadeghi}@trust.tu-darmstadt.de
4University of California, Los Angeles, PI:EMAIL
5CISPA Helmholtz Center for Information Security, tippenhauer@cispa.saarland
Abstract
Ensuring the integrity of embedded programmable logic con-
trollers (PLCs) is critical for the safe operation of industrial
control systems. In particular, a cyber-attack could manipu-
late control logic running on the PLCs to bring the process
of safety-critical application into unsafe states. Unfortunately,
PLCs are typically not equipped with hardware support that
allows the use of techniques such as remote attestation to ver-
ify the integrity of the logic code. In addition, so far remote
attestation is not able to verify the integrity of the physical
process controlled by the PLC.
In this work, we present PAtt, a system that combines re-
mote software attestation with control process validation. PAtt
leverages operation permutations—subtle changes in the op-
eration sequences based on integrity measurements—which
do not affect the physical process but yield unique traces of
sensor readings during execution. By encoding integrity mea-
surements of the PLC’s memory state (software and data) into
its control operation, our system allows us to remotely verify
the integrity of the control logic based on the resulting sensor
traces. We implement the proposed system on a real PLC,
controlling a robot arm, and demonstrate its feasibility. Our
implementation enables the detection of attackers that ma-
nipulate the PLC logic to change process state and/or report
spoofed sensor readings (with an accuracy of 97% against
tested attacks).
1 Introduction
Industrial control systems (ICS) are a class of cyber-physical
systems (CPS) that typically consist of industrial controllers
sensing and actuating safety-critical applications, e.g., the
power grid, water treatment plants, and factory automa-
tion [58]. In particular, ICS typically consist of programmable
logic controllers (PLCs), which are embedded systems that
act as a reliable and re-programmable cyber-physical interface
between a monitoring entity, i.e., the Supervisory Control and
Data Acquisition (SCADA) center, and ﬁeld-level devices,
i.e., sensors and actuators that interface directly with the phys-
ical environment. As such, the security of these controllers is
critical for ensuring the safe operation of the ICS [40].
Because of the safety-critical nature of PLCs, they have
been typically targeted by nation-state malware, such as the in-
famous Stuxnet worm [18] against uranium enrichment facili-
ties in Iran and the BlackEnergy crimeware [17] that targeted
Ukrainian electric power and train railway systems [14, 47].
These attacks typically target the application-layer software,
so-called control logic, due to the lack of security features
in legacy industrial protocols. Although it has been shown
that attackers can implement ﬁrmware-level attacks [6, 20],
these attacks have been shown to be much more challenging
to implement as they require a much more concerted effort
for stealthiness.
Although these attacks are understood, they are challenging
to defend against as security solutions need to be employed
for legacy systems with ﬁxed hardware. Currently, PLCs do
not have hardware support to provide a hardware root-of-trust.
Physical Unclonable Functions (PUFs) have been proposed in
the past to enable software attestation for resource-constrained
devices, but such modules are also not yet available for indus-
trial devices. Existing integrity checks in industrial devices
are limited to checksums that are preloaded onto the device
when the program is initially loaded. In prior works, several
solutions have been presented to either test the code that is
being loaded onto the device [41] or verify the cyber and
physical behavior of the overall CPS [2, 21, 22, 60]. However,
these solutions treat the PLCs as black boxes and are not able
to monitor the internal states at run-time. We conclude that
a comprehensive solution to enable remote attestation of the
logic running on a PLC is missing.
In this paper, we present PAtt, a remote attestation tech-
nique that combines software remote attestation with a physi-
cal PUF to attest the control-logic code is running on PLCs
without trusted hardware. PAtt allows a veriﬁer to challenge
a PLC to generate an attestation report in the form of sensor
values which are affected by a series of actuation commands
(based on the challenge and checksums over the PLC logic).
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 165The veriﬁer can then attest the logic code integrity based on
the measurement of the PLC memory, as well as the authen-
ticity of the reply through the sensor values (similar to a PUF).
In particular, we also show that PAtt can detect attempts of the
attacker to replay the sensor readings with an accuracy of 97%.
PAtt detects those manipulations based on an anomaly detec-
tor that is trained with data resulting from normal operation
and does not need to be trained with prior attack examples.
Contributions. We summarize our contributions as follows.
• We present PAtt, a novel remote attestation technique
for PLCs that combines software remote attestation with
a PUF-like use of the physical process to attest the soft-
ware and process state of the PLC.
• We theoretically investigate the performance of the pro-
posed system and show that it is resilient against replay
attacks which provide the sensor reading from a sensor
record table. PAtt does not need to have prior knowl-
edge of possible attacks, and it only requires the normal
operational data during the training phase of the detector.
• We then implement and practically evaluate PAtt on a
real ICS—a robotic arm in the context of a safety-critical
process—and show that PAtt can detect the tested attacks
with an accuracy of 97%.
The rest of the paper is structured as follows. First, we
provide a background on previous techniques in remote attes-
tation for CPS in Section 2. We describe the system model and
design of PAtt in Section 3. Details on our implementation
are provided in Section 4. We present our evaluation results
in Section 5. We discuss the applicability of PAtt in Section 6
and we summarize related work in Section 7. Finally, we
conclude in Section 8.
2 Background
In this section, we ﬁrst provide an introduction to pro-
grammable logic controllers (PLCs) in the context of cyber-
physical industrial control systems (ICS) as well as their se-
curity limitations. We then provide background on previous
works in attestation of cyber-physical systems.
Industrial Control Systems. Modern industrial control sys-
tems consist of three major levels [29]:
• Supervisory Control And Data Acquisition (SCADA):
this level of the ICS is mainly used for the control and
monitoring of industrial process that may consist of large-
scale geographical distributed computers. Five major
components of the SCADA are the human-machine in-
terface (HMI), data acquisition server, historian, engineer
workstations, and remote workstation.
• Programmable Logic Controllers (PLC): The local con-
trol component that is mostly designed for managing a
single process in ICS. PLCs are industrial computers
that are developed for handling the process level devices
like sensors and actuators.
• Fieldbus: The physical elements like sensors and actua-
tors are connected to the PLC at this level. Most of the
recent Fieldbus implementations use the Device Level
Ring (DLR) with two redundant PLCs and a ring topol-
ogy between those PLCs and physical elements.
In cyber-physical systems, the term Programmable Logic
Controller refers to computing devices, which control the
industrial appliances. Each PLC consists of (1) computing
modules, which are designed to perform industrial processes
reliably, (2) input modules translating analog physical inputs
to digital values, and (3) outputs modules, which map the
PLC’s digital outputs to analog physical outputs.
In a PLC, the next system state is computed based on the
current state measured by the input and output modules. The
main part of the logic executed on a PLC (control logic) is
programmed in special-purpose industrial languages, e.g., lad-
der logic, designed to guarantee a reliable transfer between
system states [9]. Control logic is compiled at a SCADA
server and downloaded to the PLC. The PLC runs this pro-
gram to perform a control task by processing a set of inputs,
received from physical sensors, and generating outputs to
be interpreted by actuators. Control logic runs on top of a
privileged software layer, e.g., a real-time operating system
(RTOS), which provides the required services. The control
logic consists of function blocks, data blocks, and organiza-
tion blocks. Function blocks contain reusable functions and
data blocks include data structures holding global or local
variables used in the control logic. Organization blocks serve
as the entry point of a PLC program and execute in a ﬁxed
time interval, known as scan cycles.
Remote Attestation. Remote attestation is a technique,
which provides an external veriﬁer with proofs on the in-
tegrity of a system’s software state. It is termed software-
based attestation when the proof of integrity is generated
with no hardware aid. This form of attestation is based on
strong assumptions regarding the time and the authenticity
of the communication channel between the system and the
external veriﬁer [3, 49]. The limitations of software-based
attestation can be overcome by using trusted hardware. A
software, protected by trusted hardware, could measure the
systems software stack and authenticate the measurement us-
ing a secret key which is likewise protected by the trusted
hardware. Attestation techniques can be used together with
other security solutions like Transport Layer Security (TLS)
to prevent eavesdropping and Man-in-the-Middle scenarios.
Physically Unclonable Functions. Physically Unclonable
Functions (PUFs) are like a physical ﬁngerprint used in semi-
conductors to generate key information with a level of ran-
domness from a complex physical system [27]. PUFs leverage
166          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association(cid:15)(cid:6)(cid:5)(cid:7)(cid:5)
(cid:3)(cid:2)(cid:1)(cid:10)(cid:22)(cid:21)(cid:14)(cid:15)
(cid:16)(cid:20)(cid:29)(cid:24)(cid:21)(cid:24)(cid:20)(cid:29)
(cid:6)(cid:2)(cid:1)(cid:12)(cid:15)(cid:24)(cid:19)(cid:16)(cid:19)(cid:14)(cid:13)(cid:26)(cid:19)(cid:22)(cid:21)
(cid:14)(cid:11)(cid:6)
(cid:6)(cid:28)(cid:27)(cid:31)(cid:29)(cid:28)(cid:25)(cid:1)
(cid:5)(cid:25)(cid:22)(cid:28)(cid:29)(cid:24)(cid:31)(cid:23)(cid:26)
(cid:6)(cid:28)(cid:27)(cid:31)(cid:29)(cid:28)(cid:25)(cid:1)
(cid:14)(cid:17)(cid:29)(cid:17)(cid:26)(cid:20)(cid:31)(cid:20)(cid:29)(cid:30)
(cid:4)(cid:2)(cid:1)(cid:9)(cid:13)(cid:25)(cid:18)(cid:1)(cid:8)(cid:22)(cid:20)(cid:23)(cid:27)(cid:26)(cid:13)(cid:26)(cid:19)(cid:22)(cid:21)
(cid:14)(cid:29)(cid:28)(cid:18)(cid:20)(cid:30)(cid:30)
(cid:6)(cid:28)(cid:27)(cid:31)(cid:29)(cid:28)(cid:25)
(cid:11)(cid:28)(cid:22)(cid:24)(cid:18)(cid:1)(cid:2)(cid:6)(cid:11)(cid:3)(cid:1)
(cid:8)(cid:24)(cid:29)(cid:26)(cid:33)(cid:17)(cid:29)(cid:20)
(cid:9)(cid:17)(cid:29)(cid:19)(cid:33)(cid:17)(cid:29)(cid:20)
(cid:2)(cid:3)(cid:1)(cid:10)(cid:1)(cid:3)(cid:5)(cid:7)(cid:9)(cid:6)(cid:4)(cid:5)(cid:8)
(cid:10)(cid:4)(cid:13)(cid:1)(cid:12)(cid:28)(cid:19)(cid:32)(cid:25)(cid:20)
(cid:5)(cid:2)(cid:1)(cid:7)(cid:14)(cid:26)(cid:27)(cid:13)(cid:26)(cid:19)(cid:22)(cid:21)(cid:1)(cid:11)(cid:26)(cid:24)(cid:13)(cid:26)(cid:15)(cid:17)(cid:28)
Figure 1: Overview of steps in PAtt framework.
unpredictable physical variations that occur naturally during
semiconductor manufacturing. PUFs are used together with
hash functions in many cryptographic applications [32, 50].
The latest versions of PUFs are equipped in integrated cir-
cuits and used in different security applications like software
licensing. Recent industrial control systems do not include
PUF-based integrated circuits inside the PLCs. However, there
are some proposals to use the physical process as a PUF [62].
3 PAtt: Physics-based Attestation
PAtt is designed to allow remote attestation of logic code
running on a PLC without a traditional trust anchor (such as a
TPM or PUF). The devices that we target—PLCs in existing
and legacy systems—are not usually equipped with trusted
computing hardware to enable a hardware-based remote attes-
tation process. While recent versions of PLC ﬁrmware (e.g.,
in the Siemens S7 series) include APIs that can be used for
checksum generation over data blocks of control logic, the
challenge is to authenticate such measurements.
This motivates the novel concept of PAtt: sensor readings
from the physical process are used to authenticate the attes-
tation response. The software attestation result is tied to the
physical process readings through a derivation of an actuation
path from the cryptographic hash of the control logic. We now
introduce the system and attacker model and then provide an
overview of the proposed system.
3.1 System and Attacker Model
The industrial control system considered in this work consists
of a PLC that is controlling a dynamic local physical process
such as a robotic arm, a laser, or extruder. The control logic
of the PLC is responsible for real-time sensing and actuation
of the dynamic process, e.g., periodic transport of a manufac-
turing component from one position to another position. The
PLC does not provide onboard support for trusted execution
or cryptographic signatures. Instead, the PLC does provide
the capability to compute cryptographic hash functions over
one or more data blocks used by the control logic (e.g., as
possible on the Siemens S7 series PLCs). A remote attestation
server (the "veriﬁer") is connected to the PLC over the local
network and is attempting to verify the correct state of the
system. Attacks that compromise the attestation server are
out of the scope of this work. The veriﬁer has a model of the
physical processes that are trained during normal operation
in the absence of the attacker.
We consider an adversary that has compromised the PLC.
The attacker’s goal is to change the way the physical process
is actuated while hiding this compromise from the attestation
server. The attacker is limited to executing code on the com-
promised PLC, which has limited computational power and
memory. In particular, the attacker does not have additional
computation devices inside the industrial network. As the
attacker has compromised the PLC, attacks that would ma-
nipulate the PLC ﬁrmware is subsumed in our attacker model
(as the data could also be manipulated by the PLC ﬁrmware
when sent or received). We considered two types of attackers:
1. Hash approximation: This attack is designed for evalu-
ating decoding precision. In this attack, a number hash
bits will be ﬂipped at a random offset of the hash.
2. Replay attack: In this attack, the attacker will replay a
stored sensor reading inside the PLC that corresponds to
a subset of the actual hash.
3.2 PAtt Framework
We now propose the Physics-based attestation (PAtt) frame-
work, which allows the attestation server (AS) to perform
remote attestation of the PLC’s currently loaded control logic.
Overview. The main steps of PAtt are summarized in Fig-
ure 1: 1) the AS initiates the attestation process by sending a
fresh challenge nonce over the network using industrial proto-
cols; 2) the PLC stores this nonce as data block in the memory
accessible to the logic code, and the PLC then computes a
cryptographic hash over the PLC logic code blocks including
the nonce; 3) the resulting hash is interpreted as an actuation
strategy for the robotic arm (details on this are provided later)
and the movement path is executed by the actuator; 4) the
resulting sensor readings during this movement are collected
(sent to the AS together with the hash), and the AS veriﬁes
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 167that the hash was derived from correct PLC logic and the
nonce, and that the sensor measurements ﬁt the speciﬁc phys-
ical process and hash. If the last step is successful, the AS
has attested the integrity of the logic on the PLC. In practice,
only a limited number of actuation can be executed within a
scan cycle of a PLC (e.g., 10ms), which might require us to
run multiple iterations (or rounds) of the protocol. We defer
discussion of that implementation detail to Section 4. We now
provide additional details on each step.
1) Attestation Request. The AS initiates the attestation re-
quest by sending the PLC a nonce (a randomly generated
bit vector) using the standard industrial protocols. The PLC
ﬁrmware receives the nonce and makes it available to the
PLC control logic as normal data tag. Figure 2 shows a more
detailed view of the interactions between the veriﬁer, PLC,
and the physical process during the attestation process.
2) Nonce Storage and Hash Computation. The PLC then
computes a cryptographic hash function over a group of con-
trol logic objects (standard blocks, safety blocks, text lists,