106
103
7
0
197
78
119
#Origins
76
41
2
33
72
69
7
0
173
60
114
#Domains
63
35
2
26
58
55
7
0
95
54
42
Table 3: Top 3rd-party script origins injecting huge anchors.
Script
http://gynax.com
https://securepubads.g.doubleclick.net
https://yastatic.net
http://bgrndi.com
http://js883.guangzizai.com
#Websites
47
7
7
6
5
#Elements
47
7
7
6
5
was found on 18 websites. Adf.ly is a short URL service that
helps websites monetize their links. As its name suggests, this
script converts every first-party hyperlinks to a third-party
hyperlink. If a user clicks any converted hyperlink, the user
would be taken to an intermediary page of adf.ly hosted on
http://clearload.bid/. This page displayed an advertisement as
shown in Figure 2. The user can click the SKIP AD button
on the right top corner to continue to visit the original first-
party hyperlink. Many other top scripts in Table 4, e.g., https:
//linkshrink.net/fp.js, https://api.getsurl.com/js/get_auto.js and https:
//adshort.co/js/full-page-script.js, worked in a very similar way.
This is definitely very distracting to users. However, as we will
demonstrate next in §5.4, the first-party websites explicitly
included these click interception scripts to monetize their
websites.
Event Handlers and Visual Deceptions. We find 103
unique third-party scripts which listened for clicks on first-
party elements to intercept user clicks. We also discover 78
and 119 unique third-party scripts that injected mimic and
transparent overlay contents, respectively, into the embedding
websites. We discuss next that how these click interception
third-party scripts were included in those “victim” websites.
5.3.2 Click Interception Script Inclusion
While we discover that third-party scripts deliberately inter-
cepted clicks via several tricks, it is not clear if they were
intentionally included by the first-party websites. To this end,
we analyze the script dependency data to figure out the inclu-
sion relationship between third-party scripts and first-party
websites. In particular, we aim to determine if a click inter-
ception third-party script was directly included by the website
Script
https://cdn.adf.ly
https://cdn.shopify.com
https://static.v2.paysites.czechcash.com
https://www.sc.pages02.net
https://linkshrink.net
https://api.getsurl.com
https://static-js.sixshop.co.kr
http://cdn.adf.ly
http://shinkme.com
https://adshort.co
#Websites
18
11
9
7
7
5
4
2
2
2
#Elements
583
245
640
82
190
384
59
190
38
28
Figure 2: A drive-by download page visited via click interception.
itself, or indirectly included by another third-party script.
We categorize how a remote third-party script can be in-
cluded into three classes. First, a third-party script is stati-
cally included by the first-party website, if the corresponding
 tag is statically defined in the original web page
HTML source. Next, a third-party script is dynamically in-
cluded by the first-party website, if it is loaded through a
 tag that is dynamically created by a first-party script,
including those first-party scripts hosted on a different do-
main. Finally, a third-party script is dynamically included by
another third-party script, if it is loaded through a 
tag that is dynamically created by another third-party script.
We summarize the results in Table 5.
Static Inclusion. We find that the majority of these third-
party scripts, i.e., 280 unique scripts (64.07%) out of 437 third-
party click interception scripts, were statically included by
397 websites. This indicates that these websites deliberately
included the click interception scripts, even though they may
not intercept user clicks by themselves. In particular, the short
URL monetization script https://cdn.adf.ly/js/link-converter.js
was found to be statically included by those 18 websites.
The script https://wchat.freshchat.com/js/widget.js was statically
included by 17 websites. These websites explicitly allowed
such scripts to intercept their users’ clicks in exchange for
payments.
Dynamic Inclusion. We discover that 103 unique third-party
scripts (23.57%) were dynamically included by first-party
952    28th USENIX Security Symposium
USENIX Association
Table 5: How third-party click interception scripts are included.
Table 6: Advertising click interception navigation URLs.
Inclusion Type
Statically included by 1st-party website
Dynamically included by 1st-party website
Included by another 3rd-party script
#Websites
397
112
104
#Scripts
280
103
63
Technique
Hyperlinks
Event Handlers
Visual Deceptions
#URLs
2,695
186
380
#Ad URLs %Ad URLs
40.37
11.29
19.47
1,088
21
74
websites. For instance, the scripts script=http://gynax.com/j/
w.php and http://bgrndi.com/js/NTQw.js were dynamically in-
cluded by 5 and 4 first-party websites, respectively. In other
words, these websites used JavaScript to dynamically create
 tags to include those scripts. Such websites would
be responsible for the privilege abuses by those click inter-
ception scripts even if they do not intercept user clicks. They
either did not scrutinize the scripts before including them, or
deliberately allowed them to intercept user clicks.
Indirect Inclusion. On the other hand, we discover that only
63 third-party click interception scripts (14.42%) were in-
directly included by other third-party scripts. One such a
top script is https://tags.bkrtx.com/js/bk-coretag.js, which was
included by other third-party scripts on 6 websites. For
example, it was included by the script https://s.accesstrade.
net/js/atd/bluekai/atd_bluekai.js?id=... on the website https://
haken-mikata.com. The latter script was also indirectly in-
cluded by another script https://s.accesstrade.net/js/atd/satd.js?
pt=824F2E4C4077D97ECC014C7A3DE07136725853, which was
statically included by the first-party website. In such cases,
we cannot blame the first-party websites for indulging those
suspicious scripts. Click interception caused by these scripts
could be prevented if the websites configure a proper Content
Security Policy (CSP) [33] that disallows the browser to load
scripts from unknown sources. However, in practice it is diffi-
cult and even infeasible to use CSP because many websites
need to allow dynamic inclusion of advertising scripts that
may be loaded from arbitrary sources due to ad syndication.
Therefore, a finer-grained security policy that limits the privi-
lege of included scripts would be more desirable in preventing
such privilege abuses.
Summary. We discover that 437 third-party scripts at-
tempted to intercept user clicks on a total of 613 websites.
Several top third-party scripts deliberately intercepted user
clicks on all their embedding websites. Surprisingly, many
of them were included directly by the first-party websites,
to monetize the hyperlinks, or more accurately, the user
clicks, of those websites.
5.4 Click Interception Reasons and Conse-
quences
We have demonstrated that some third-party scripts inter-
cepted user clicks through various tricks. In this section, we
seek to understand the motivations and consequences of such
undesired activities.
5.4.1 Monetization
As we have demonstrated in §5.3.1, many third-party scripts
offer monetization services by converting first-party hyper-
links into third-party ad links. They force a user to view an
advertisement before navigating to the original destination
page when the user clicks any hijacked link. As a result, both
the third-party click interception script and the first-party
website can earn some commission from those participating
advertisers. Similarly, we find many other cases where a click
was intercepted by a third-party script to visit an advertiser’s
landing page.
Identifying Advertising URLs. To understand if moneti-
zation via advertising is really a common reason for click
interception, we compare the navigation URLs in the click
interception cases with all the other navigation URLs in our
dataset. Specifically, we leveraged the Ghostery extension to
determine if one navigation URL is advertising-related by
testing if it matches the URL pattern of any known advertis-
ing company. A navigation URL is marked as an advertising
URL, if a positive match is found for any of its intermedi-
ate redirect URLs (if any) and the landing URL. We also
manually labeled the URLs generated by those short URL
monetization scripts as ad URLs because they are not known
to the extension.
Surprisingly, we find that 1,183 (36.39%) out of the 3,251
unique click interception navigation URLs are advertising
URLs (Table 6), which is a 18.7 times higher rate than that
of normal third-party navigation URLs8. In total, only 40,278
(1.95%) out of the 2,065,977 third-party navigation URLs are
identified as advertising URLs.
Potential Click Fraud. These click interception websites
and scripts have a “good” reason to trick users into click-
ing those advertising URLs. In online display advertising,
the publishers and the ad networks are paid by an advertiser
when a user clicks the advertiser’s ad under the pay-per-click
billing mode. Although they can also earn some commission
for an ad impression in the pay-per-view billing mode, the
money is much less than what they can get paid when the
ad is clicked. However, the ad click-through rate is usually
very low—around 2% (in a business-to-consumer banner ad
case [18]). To boost ad revenue, the straightforward and effec-
tive approach is to leverage real user clicks, as modern ad net-
works can accurately detect bot-based click frauds [2, 6, 9, 38].
On the other hand, the third-party scripts also have the incen-
8We exclude all first-party navigation URLs in our analysis.
USENIX Association
28th USENIX Security Symposium    953
tive to cheat advertisers for higher income because many of
them are also ad networks. This well explains why the short
URL monetization scripts, which also operate as ad networks,
have been helping websites intercept user clicks.
In our research, we observe that third-party scripts have
leveraged various click interception techniques to monetize
user clicks. Further, our results demonstrate that click inter-
ception has become an emerging way for generating realistic
click traffic to commit ad click fraud.
5.4.2 Distributing Malicious Content
Besides monetization, we find that click interception can lead
a user to visit malicious contents. In particular, we were di-
rected to some fake anti-virus (AV) software and drive-by
download pages when we manually examined some of the
click interception URLs.
For instance, we were forced to visit an ad click URL by
the script https://pndelfast.com/riYfAyTH5nYD/4869 on the web-
site https://torrentcounter.to/. Since the navigation URL is an
ad click URL, the landing URL is random each time we visit.
Nonetheless, one landing URL we visited is a fake AV web-
site, as shown in Figure 3(a). This website showed some fake
warnings about virus infection with alarm to fool the user
into clicking the Scan Now button. After that, it displayed
some scanning animation and finally generated a fake scan
report to trick the user into installing the fake AV software, as
shown in Figure 3(b). The Google search results of the domain
1bcde.com also suggest it is a malicious redirect website.
We also find that the script http://cdn.adf.ly/js/link-converter.js
converted one link of the website http://magazinweb.net/ into
http://ay.gy/2155800/..., which is an advertising link. It once
took our browser to a drive-by download page, as shown in
Figure 2. When we visited the page, our browser automati-
cally started downloading the MacKeeper installer, which is
considered as scamware [20]. The page even shows detailed
instruction to trick the user into installing this scamware.
These are just two of many malicious examples we have
encountered in our manual investigation. We think that there
were much more malicious cases that we have yet to discover.
Unfortunately, manually verifying all the 2 million URLs in
our dataset is infeasible. We plan to leverage automated URL
scanning techniques to automatically detect the malicious
URLs associated with click interception in the future.
Summary. We identify that many third-party scripts in-
tercept user clicks to monetize user clicks. In particular,
they intercept real user clicks to fabricate ad clicks as a
new form of committing ad click fraud. Further, the land-
ing URLs that they trick the users into visiting can be
malicious.
(a)
(b)