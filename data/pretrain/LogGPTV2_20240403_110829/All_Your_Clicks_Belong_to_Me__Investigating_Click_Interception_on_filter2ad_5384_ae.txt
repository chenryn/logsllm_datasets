### Table 3: Top Third-Party Script Origins Injecting Large Anchors

| Script Origin | Websites | Elements |
|---------------|----------|----------|
| http://gynax.com | 47 | 47 |
| https://securepubads.g.doubleclick.net | 7 | 7 |
| https://yastatic.net | 7 | 7 |
| http://bgrndi.com | 6 | 6 |
| http://js883.guangzizai.com | 5 | 5 |

**Adf.ly Usage and Functionality:**
Adf.ly is a short URL service that helps websites monetize their links. This script converts first-party hyperlinks to third-party hyperlinks. When a user clicks on a converted hyperlink, they are redirected to an intermediary page hosted on `http://clearload.bid/`, which displays an advertisement. The user can click the "SKIP AD" button in the top-right corner to proceed to the original destination. Other similar scripts, such as `https://linkshrink.net/fp.js`, `https://api.getsurl.com/js/get_auto.js`, and `https://adshort.co/js/full-page-script.js`, operate in a similar manner.

### Event Handlers and Visual Deceptions
We identified 103 unique third-party scripts that listened for clicks on first-party elements to intercept user clicks. Additionally, 78 and 119 unique third-party scripts injected mimic and transparent overlay contents, respectively, into the embedding websites. We will now discuss how these click interception scripts were included in the "victim" websites.

### 5.3.2 Click Interception Script Inclusion
To determine if the third-party scripts were intentionally included by the first-party websites, we analyzed the script dependency data. We categorized the inclusion of remote third-party scripts into three classes:

1. **Static Inclusion:** A third-party script is statically included if the `<script>` tag is defined in the original web page HTML source.
2. **Dynamic Inclusion by First-Party Website:** A third-party script is dynamically included if it is loaded through a `<script>` tag created by a first-party script.
3. **Dynamic Inclusion by Another Third-Party Script:** A third-party script is dynamically included if it is loaded through a `<script>` tag created by another third-party script.

**Summary of Inclusion Types:**

| Inclusion Type | Websites | Scripts |
|----------------|----------|---------|
| Statically Included by 1st-Party Website | 397 | 280 |
| Dynamically Included by 1st-Party Website | 112 | 103 |
| Included by Another 3rd-Party Script | 104 | 63 |

**Static Inclusion:**
The majority (64.07%) of the third-party scripts, 280 out of 437, were statically included by 397 websites. For example, the script `https://cdn.adf.ly/js/link-converter.js` was statically included by 18 websites, and `https://wchat.freshchat.com/js/widget.js` was included by 17 websites. These websites explicitly allowed these scripts to intercept user clicks in exchange for payments.

**Dynamic Inclusion:**
103 unique third-party scripts (23.57%) were dynamically included by first-party websites. For instance, the scripts `http://gynax.com/j/w.php` and `http://bgrndi.com/js/NTQw.js` were dynamically included by 5 and 4 first-party websites, respectively. These websites used JavaScript to create `<script>` tags dynamically, making them responsible for any privilege abuses by these scripts.

**Indirect Inclusion:**
Only 63 third-party click interception scripts (14.42%) were indirectly included by other third-party scripts. For example, `https://tags.bkrtx.com/js/bk-coretag.js` was included by other third-party scripts on 6 websites. Such indirect inclusions make it difficult to blame the first-party websites, and proper Content Security Policies (CSP) could help prevent these issues. However, many websites need to allow dynamic inclusion of advertising scripts, making CSP implementation challenging.

### Summary
We discovered that 437 third-party scripts attempted to intercept user clicks on 613 websites. Many of these scripts were directly included by the first-party websites to monetize user clicks.

### 5.4 Click Interception Reasons and Consequences
#### 5.4.1 Monetization
Many third-party scripts convert first-party hyperlinks into third-party ad links, forcing users to view advertisements before reaching the original destination. Both the script and the website earn commission from advertisers. To understand the prevalence of this practice, we compared navigation URLs in click interception cases with all other navigation URLs in our dataset using the Ghostery extension. Surprisingly, 1,183 (36.39%) out of 3,251 unique click interception navigation URLs were advertising URLs, 18.7 times higher than the rate for normal third-party navigation URLs.

**Potential Click Fraud:**
These scripts have a strong incentive to trick users into clicking advertising URLs, as modern ad networks can detect bot-based click frauds. By leveraging real user clicks, these scripts can boost ad revenue. Our results show that click interception has become a new way to generate realistic click traffic for ad click fraud.

#### 5.4.2 Distributing Malicious Content
Click interception can also lead users to visit malicious content. During manual examination, we encountered fake antivirus software and drive-by download pages. For example, the script `https://pndelfast.com/riYfAyTH5nYD/4869` on `https://torrentcounter.to/` redirected to a fake AV website, which tricked users into installing fake AV software. Another script, `http://cdn.adf.ly/js/link-converter.js`, redirected to a drive-by download page that automatically downloaded the MacKeeper installer, considered as scamware.

**Summary:**
Many third-party scripts intercept user clicks to monetize user clicks, often leading to ad click fraud. The landing URLs can also be malicious, posing a significant risk to users.