title:Towards a scalable resource-driven approach for detecting repackaged
Android applications
author:Yuru Shao and
Xiapu Luo and
Chenxiong Qian and
Pengfei Zhu and
Lei Zhang
Towards a Scalable Resource-driven Approach for
Detecting Repackaged Android Applications
Yuru Shao†, Xiapu Luo†‡∗, Chenxiong Qian†, Pengfei Zhu†, and Lei Zhang†
Department of Computing, The Hong Kong Polytechnic University†
The Hong Kong Polytechnic University Shenzhen Research Institute‡
PI:EMAIL, {csxluo, cscqian, cspzhu,cslzhang}@comp.polyu.edu.hk
ABSTRACT
Repackaged Android applications (or simply apps) are one
of the major sources of mobile malware and also an impor-
tant cause of severe revenue loss to app developers. Al-
though a number of solutions have been proposed to detect
repackaged apps, the majority of them heavily rely on code
analysis, thus suﬀering from two limitations: (1) poor scal-
ability due to the billion opcode problem; (2) unreliability
to code obfuscation/app hardening techniques. In this pa-
per, we explore an alternative approach that exploits core
resources, which have close relationships with codes, to de-
tect repackaged apps. More precisely, we deﬁne new features
for characterizing apps, investigate two kinds of algorithms
for searching similar apps, and propose a two-stage method-
ology to speed up the detection. We realize our approach
in a system named ResDroid and conduct large scale eval-
uation on it. The results show that ResDroid can identify
repackaged apps eﬃciently and eﬀectively even if they are
protected by obfuscation or hardening systems.
1.
INTRODUCTION
Repackaged apps have been one of the major sources of
mobile malware on Android for many years [16,18]. A recen-
t study showed that 86% malware samples were repackaged
version of legitimate apps [48]. BitDefender even found that
1.2% of apps on Google Play have been repackaged to deliver
ads and collect information [2]. Apps repackaging has also
become a major threat to app economy [9]. By modifying
the embedded ad’s client ID or replacing it with new ad li-
braries, an attacker can make proﬁts through apps developed
by others [24]. As another example, repackaging paid app-
s and uploading the modiﬁed versions to third-party mar-
kets will result in revenue losses to developers. Moreover,
repackaged ﬁnancial apps not only cause ﬁnancial loss to
customers [31], but also compromise companies’ reputation
and users’ experiences [9].
∗The corresponding author
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’14, December 08 - 12 2014, New Orleans, LA, USA
Copyright 2014 ACM 978-1-4503-3005-3/14/12 ...$15.00.
http://dx.doi.org/10.1145/2664243.2664275
Although a number of systems have been proposed to i-
dentify repackaged apps, how to eﬀectively and eﬃciently
detect them remains a challenging problem. One possible
reason is that the majority of existing systems heavily rely
on codes’ features to quantify the similarity between app-
s, such as diverse hash values [1, 27, 47], abstract syntax
trees (AST) [37], control ﬂow graph (CFG) and its vari-
ants [13, 22, 43], program dependency graph (PDG) [19, 20],
etc., thus suﬀering from two limitations:
Poor scalability due to the billion opcode problem.
Hanna et al. estimated that the total amount of opcodes in
all apps is around 1.45 billion [27] not to mention the rapid
increase in the number of new apps. Therefore, processing
millions of apps in many Android markets demands scalable
and eﬃcient solutions.
Unreliability to code obfuscation/app hardening tech-
niques. Since most of existing solutions borrowed methods
from the area of code clone detection that has been stud-
ied for 20 years [11, 39, 41], evasion solutions are available to
dedicated attackers, let alone new obfuscation and harden-
ing techniques [17, 29, 43, 44].
We explore an alternative scheme, a novel resource-driven
approach, to detect repackaged apps. Our approach is mo-
tivated by two observations. First, Android apps usual-
ly contain various resources, such as layout and style re-
sources for graphical user interface (GUI). Although these
resources are separated from the executable .dex ﬁle, there
are close relationships between resources and codes. Second,
attackers seldom modify original resources in order to let
the repackaged apps work properly and have the same look-
and-feel. Moreover, existing obfuscation/hardening systems
rarely handle resources. Although not all resources are crit-
ical to an app, some core resources cannot be easily mod-
iﬁed by attackers without aﬀecting the app’s functionality
or quality-of-experience (QoE). Therefore, we exploit core
resources and the related codes to quantify apps’ similarity.
To scale up this approach, we propose a two-stage method-
ology for grouping similar apps. More precisely, statistical
features are used in the ﬁrst stage to quickly divide apps
into groups and then at the second stage structural features
are employed to further cluster apps in each group. Note
that the second stage can be performed in parallel. Since
the methodology is general, we investigate the performance
of two kinds of algorithms to search for similar apps: near-
est neighbor search (NNS) [8] and clustering [7]. The former
may quickly locate apps that are very similar to a target app
but may miss other similar apps. The latter can partition
apps into diﬀerent clusters from a global view but has higher
computational complexity.
We have realized our approach in a system named Res-
Droid and conducted extensive evaluation on it. The exper-
imental results not only validate its eﬀectiveness and eﬃ-
ciency but also reveal interesting observations. In summary,
this paper makes the following contributions:
1. We propose a novel resource-driven approach to de-
tect repackaged apps. To our best knowledge, it is the
ﬁrst systematic examination on leveraging resources
for repackaged apps detection.
2. We propose a two-stage methodology to scale up the
approach and investigate the performance of two kinds
of algorithms for searching similar apps: nearest neigh-
bor searching and clustering.
3. We realize our approach in a system named ResDroid
with 2770 lines of Python code, 1157 lines of Java code,
and 309 lines of C code. Although a simultaneous re-
search, ViewDroid [45], also adopts GUI-related fea-
tures, there are signiﬁcant diﬀerences between it and
ResDroid in terms of feature selection, comparison al-
gorithms, and scalability, as detailed in Section 7.
4. We conduct the ﬁrst study on the eﬀect of commercial
app hardening systems on detecting repackaged apps.
We also develop DexDumper for dynamically dumping
hardened apps from memory for detection.
5. We conduct extensive evaluation on ResDroid with
169,352 apps crawled from 10 markets and 200 real
repackaged apps. The results show that ResDroid can
detect repackaged apps eﬀectively and eﬃciently.
The rest of this paper is organized as follows. Section 2
introduces the problem and background knowledge. Section
3 and Section 4 detail our methodology and the implemen-
tation of ResDroid, respectively. The experimental results
are reported in Section 5. Section 6 discusses ResDroid’s
limitations and future work. After introducing the related
work in Section 7, we conclude the paper in Section 8.
2. BACKGROUND
2.1 Problem Statement
The majority of existing approaches heavily depend on
code-level features, thus suﬀering from two limitations: (1)
poor scalability to process billions of opcodes; (2) unrelia-
bility to code obfuscation/app hardening techniques. The
goal of this paper is to explore an alternative scheme, a
resource-driven approach, to detect repackaged apps. Mo-
tivated by the observation that existing attacks and code ob-
fuscation/app hardening techniques seldom handle resources,
we investigate how to employ resources to detect repackaged
apps from four aspects, including, feature selection, feature
extraction, scalable approaches for searching similar apps,
and limitations. Note that the new approach complements
the existing code-level systems instead of replacing them.
2.2 Application Resources
Android developers are recommended to externalize re-
sources from the codes so that they can be maintained in-
dependently [6]. Figure 1 shows an example of app codes
and resources. MainActivity.java deﬁnes an activity that
29
36
37
38
39
40
41
30
31 
32
33 text_fragment.xml:
34 
35
42
43 
44
45 my_editor.xml:
46 
48
provides users a GUI for interaction. When an activity is
launched, the Android runtime creates an activity object
and invokes the onCreate method deﬁned at lines 3-7.
1 MainActivity.java:
2 public class MainActivity extends Activity {
3
protected void onCreate(Bundle savedInstanceState) {
4
5
6
super.onCreate(savedInstanceState);
setContentView(R.layout.main_act_layout);
...
}
7
8 }
9
10 TextFragment.java:
11 public class TextFragment extends Fragment {
12
public View onCreateView(LayoutInflater inflater,
13
14
15
16
17
ViewGroup container, Bundle ...) {
View view = inflater.inflate(
R.layout.text_fragment, container, false);
return view;
}
18
19 }
20
21 MyEditText.java:
22 public class MyEditText extends EditText {
23
24 }
25
26 main_act_layout.xml:
27 
28
Figure 1: Example of the interaction between app code
and resources
An activity may contain other GUI components, which
can be added to its View dynamically or deﬁned by a layout
ﬁle (in XML format). Lines 27-31 deﬁne the layout used by
MainActivity. Line 5 indicates that MainActivity loads its
view from main act layout.xml.
Fragment is a special component that represents a behav-
ior or a portion of user interface within an activity1. It can
be considered as a modular section of an activity, which has
its own layout. main act layout.xml deﬁnes a fragment as-
sociated with the class com.example.TextFramgment, whose
content is shown in lines 10-19. When MainActivity is s-
tarted, its layout ﬁle main act layout.xml will be loaded and
1https://developer.android.com/guide/components/fragments.html
the activity will present users the fragment, whose layout is
deﬁned in text fragment.xml and loaded in line 14 via the
inflate method.
In this example, the ﬁnal GUI present-
ed to users is actually the view of the fragment deﬁned in
text fragment.xml.
The GUI component text fragment (lines 40-42) is a cus-
tomized component com.example.MyEditText. It is deﬁned
in my editor.xml (lines 46-48), and the corresponding codes
are in com.example.MyEditText.java, as speciﬁed in line 47.
When interacting with an app, users can navigate between
(i.e., transition between) diﬀerent activities [10]. We deﬁne
the transition among activities as activity transition graph
(ATG), where each vertex represents an activity and an edge
indicates the existence of transitions through Android meth-
ods startActivity() or startActivityForResult().
App resources are referenced through IDs. For example,
after main act layout.xml is parsed, an ID will be signed
to it. The auto-generated ﬁle R.java records all resources
and their IDs. App codes access the resources through their
IDs. For example, MainActivity sets its view deﬁned in
main act layout.xml by referencing R.layout.main_act_layout.
Moreover, developers can use the scheme @type/name to ref-
erence other resources. For instance, line 38 references a
string resource named “tv text” using @string/tv_text.
2.3 Event Handlers
There are two kinds of event handlers in Android apps.
GUI event handlers. GUI objects can be associated with
event handlers. For example, given a button, the execu-
tion will reach its onClick function, deﬁned in the interface
android.view.View.OnClickListener, after a user clicks it.
Lifecycle event handers. An activity instance may tran-
sition among diﬀerent states in its lifecycle [5]. Develop-
ers can deﬁne how an activity behaves when it transitions
from one state to another in callback methods. For exam-
ple, when an activity is started, its onCreate and onStart
callback methods will be invoked successively.
For apps without GUI/activities, we consider callbacks in
their Services and Broadcast Receivers as event handlers.
3. METHODOLOGY
3.1 Overview
Figure. 2 depicts our resource-driven solution for detect-
ing repackaged apps, which is realized in ResDroid and the
implementation is detailed in Section 4.
The feature extraction module ﬁrst identiﬁes an app’s ma-
jor packages according to their importance measured by the
PageRank algorithm [34] (Section 3.3). Then, core resources
along with their statistical features and structural features
will be determined according to major packages and the ap-
p’s manifest ﬁle. The statistical features (Section 3.4) are
lightweight in terms of computation and comparison but
may not provide precise information about an app. In con-
trast, structural features (Section 3.5) can better character-
ize an app at the cost of the complexity of computation and