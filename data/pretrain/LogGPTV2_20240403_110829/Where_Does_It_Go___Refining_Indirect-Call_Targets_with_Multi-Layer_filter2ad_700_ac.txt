final target set for the icall. For each layer, TypeDive recursively
resolves the targets based on the maintained type confinements and
Algorithm 1: Iteratively resolve targets for an indirect call.
Input
: iCall: The given indirect call requires target resolving,
type-function: The type-function confinement map,
type-propagation: The type-propagation map,
escaped-type: The set of escaped types
Output: TargetSet: The set of possible targets for the indirect call icall
1 Procedure ResolveTargets(iCall, type-function, type-propagation, escaped-type)
2
3
TargetSet ← all address-taken functions;
CurValue ← getCalledValue(iCall);
// get next-layer value with a composite type
while CurValue ← getNextLayerValue(CurValue) do
// index is also obtained along with the base type
CurType ← getBaseType(CurValue);
if isNotSupported(CurType) then break ;
// ensure CurType has not escaped
if CurType ∈ escaped-type then break ;
LayerTargetSet ← type-function[CurType];
// merge targets of all types propagating to CurType
for each PropType in type-propagation[CurType] do
// recursively find targets of PropType
if PropTargetSet ← recurGetTargets(PropType, ...) then
LayerTargetSet ← LayerTargetSet(cid:83) PropTargetSet;
else
end
return TargetSet;
end
// intersect with targets of the current layer
TargetSet ← LayerTargetSet ∩ TargetSet;
end
return TargetSet;
19 Procedure recurGetTargets(PropType, type-function, type-propagation, escaped-type)
20
21
PropTargetSet ← type-function[PropType];
for each RecurPropType in type-propagation[PropType] do
// ensure CurType has not escaped
if CurType ∈ escaped-type then return NULL;
// recursively find targets for PropType
if RecurPropTargetSet ← recurGetTargets(RecurPropType) then
PropTargetSet ← PropTargetSet(cid:83) RecurPropTargetSet;
else
end
return NULL;
end
return PropTargetSet;
type propagations. In this section, we present TypeDive’s target-
resolving algorithm and the design of key components.
4.2.1 The Target-Resolving Algorithm. As shown in Algorithm 1,
TypeDive uses function ResolveTargets() to iteratively resolve
targets for an icall layer by layer. For simplicity, indices in types
are omitted in the algorithm. The target set of the icall is initial-
ized to contain all address-taken functions (line 2). Given an icall,
TypeDive first gets the called value and obtains its type (line 3-5).
The type must be either a function type or a composite type; it
is the type of the object containing the value (line 6). Once the
type is obtained, TypeDive ensures that it is not escaped by query-
ing the escaped-type set (line 7). After that, TypeDive queries
the type-function map to find the function targets confined by
the type with the index (line 8). As explained in §4.1.2, the field
with the index into the object of this type may be stored to or
cast from other types’ objects. TypeDive therefore also queries the
type-propagation map to find all types propagating to the type
(line 9), and employs the recursive function, recurGetTargets(), to
conservatively collect all their function targets (line 10). All these
targets are then “unioned” as the target set, LayerTargetSet, for
the current layer (line 11), which is further “intersected” with the
existing target set, TargetSet (line 16).
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1872At this point, TypeDive finishes one iteration—resolving the
targets for the given layer. Next, TypeDive tries to find the next-
layer value and its base type, and starts another iteration (line
4). TypeDive stops the iterations when (1) it cannot get the next-
layer base type, (2) the base type has escaped (line 7), or (3) the
recursive function (recurGetTargets()) returns NULL (line 13).
TypeDive’s analysis is conservative: if any step cannot continue
or fails, TypeDive immediately stops the resolving and returns
the current target set. The returned target set by the algorithm
represents the final icall targets.
4.2.2 Resolving Targets for a Layer. As shown in line 10 of Al-
gorithm 1, TypeDive conservatively collects all targets of types
that may propagate to the current type. Given a propagating type
(PropType), recurGetTargets() first initializes the propagating tar-
get set (PropTargetSet) with the targets it confines by querying the
type-function map (line 20). Next, TypeDive finds types that prop-
agate to PropType by querying the type-propagation map (line 21).
For each of them, TypeDive recursively finds the target set and
unions all of them (line 23-24). If any type is escaped, TypeDive
will return NULL (line 26) and terminate the target-resolving process
in ResolveTargets().
Resolving targets for function types (layer one). The first-
layer type is the function type, including the types of parameters.
In FLTA, parameter types are consolidated as a single type and
matched. Such an approach will cause false negatives in MLTA
because parameters may also have composite-types that have been
propagated or escaped. To address this problem, in TypeDive, we
treat the parameters of composite types as “fields” of the function
type and apply the propagation and escaping policies to parameter
types as well to resolve the targets of the function type.
4.3 Supporting C++
TypeDive’s approach is general and can support both C and C++
programs in principle. As long as type propagation and escaping are
captured, TypeDive can safely resolve icall targets without causing
false negatives. To be conservative, TypeDive terminates the targets
resolving whenever a type has escaped. As described in §4.1.3, a
type that is cast to an unsupported type (e.g., primitive type) will be
identified as escaping. This introduces a problem for C++ programs
because virtual-function table (VTable) pointers will always be cast
to an unsupported-type pointer, specifically, a pointer referring to
function pointers. This problem would make TypeDive meaningless
because virtual-function pointers will be loaded through VTables.
Therefore, we develop a technique to overcome this problem.
In C++ programs, each polymorphic class has a VTable, and
each entry of the VTable contains the address of a virtual function.
VTables are essentially global arrays with static initializers. In the
constructor of a class, the VTable pointer is cast to a pointer of
function pointers and stored to the first field of the constructed
object. Before virtual functions are called, the VTable pointer is
loaded from the object and looked up to load the correct virtual-
function pointer.
Based on how VTable pointers are stored and loaded, we choose
to “skip” the VTable pointers (unsupported types in TypeDive)
and directly map the virtual functions to their class. Specifically,
we analyze the constructor of a class to identify VTables and the
contained virtual functions, and use the type-function map to map
the virtual functions to the class. Correspondingly, given an icall for
virtual functions, we ignore the layer for loading VTable pointers
and directly resolve the targets for the next layer that loads the
object pointer by querying the type-function map. This approach
also supports multiple inheritances; virtual functions of a second
base class will be mapped to the second field of the object, and so
forth. This way, we avoid the type-escaping issues in C++ programs,
and TypeDive can effectively support them as for C programs.
5 Implementation
We have implemented TypeDive based on LLVM of version 8.0.0 as
an easy-to-use LLVM pass. The inputs are a list of unlinked LLVM
bitcode files. TypeDive’s first phase analyzes all bitcode files and
generates the data structures for type information. Its second phase
analyzes all the bitcode files again to resolve targets for each icall.
The resulting icall targets are maintained in a map. The key of the
map is a call instruction (either direct or indirect), and the value is a
set of functions that can be targets of the call instruction. With the
map, the results of TypeDive can be easily queried. In this section,
we present important implementation details.
5.1 Generating Bitcode Files
Generating LLVM bitcode files for some system programs can be
challenging if they use GCC-specific features such as ASM goto. Our
strategy is to discard incompatible files because such cases are rare.
We thus use the “-i” option (ignoring error) for compilation. To
dump bitcode files, we implement an LLVM module pass that uses
WriteBitcodeToFile() provided by LLVM to save the LLVM IR.
5.2 Analyzing and Storing Types
Supported types. We currently support function type (i.e., signa-
ture), struct, array, and vector for confining icall targets. Other
types are conservatively excluded as unsupported types.
Storing types and indexes. LLVM has its own type system. Each
type has an object in each module. That is, the same type will
have different type objects and thus different type pointers, which
makes type comparison challenging. In TypeDive, we thus choose
to compare types through their strings; LLVM provides functions
to easily get the string for a type. If the strings of two types match,
we will say these types are the same. The string-based matching
incurs a significant storage overhead because TypeDive maintains
multiple maps for a large number of types. To address the problem,
we choose the store the hashing value of types. In the current
implementation, we used the default hash function in the C++
standard library. Integer indexes are first converted into strings and
hashed together with type strings.
Virtual-function types. When virtual functions are compiled, a
this pointer is automatically inserted as the first argument. When
a virtual function is invoked through an icall, the this argument
always has the type of the invoking object. For example, if an object
pointer of type base* is cast from type derived*, and the object
pointer is used to invoke a virtual function (the one in the derived
class), the first argument will be base* instead of derived*, which
will fail the matching of function types. To address this problem, we
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1873confinement
a = &f
M[t (a)] ∪= {f }
a = &f
M[mlt (a)] ∪= {f }
A
T
L
F
A
T
L
M
propagation
y = cast  x
M[t (y )] ∪= M[t (x )]
y = x
∀α ∈comp (mlt (y )),
∀β ∈comp (mlt (x )),
M[mlt (y )] ∪= M[β]
M[α] ∪= M[β]
resolving
(∗p )()
M[t (p )]
(∗p )()
(cid:83) M[γ ]
∀γ ∈comp (mlt (p ))
Table 1: Formal representation of FLTA and MLTA. The confinement
rule collects address-taken functions and initializes the map M. The prop-
agation rule propagates functions between cast types; The resolving rule
decides the icall targets. t (x ) gets the type of x; mlt (x ) gets the multi-layer
type of x; comp (α ) gets the compatible multi-layer type of α from M.
exclude the this pointer from the argument list when computing
the hash value for the virtual-function type. Instead, TypeDive will
correctly resolve the possible class types for the virtual-function
call by maintaining the casting history.
5.3 Identifying Next-Layer Values and Types
TypeDive iteratively identifies the next layer for type matching.
Identifying the next-layer value is required by both maintaining
the type-function map and resolving icall targets. The next-layer
value comes in two ways: (1) an outer layer and (2) a lower layer.
The outer-layer value is the host object holding the value of the
current layer object. In the example shown in Figure 1, b is the
out-layer object of a. By contrast, the lower-layer value is the host
object holding the pointer of the current layer object. Therefore if
the field of b is &a instead of a, then b is a lower-type value of a.
With the definition of the outer layer and the lower layer, getting
the next-layer value is easily implemented by recursively parsing
the GetElementPtrInst (or GEPOperator) and the LoadInst instruc-
tions directly against the current-layer object. That is, the pointer
operands in these instructions are identified as the next-layer value.
To be conservative, TypeDive does not consider instructions tar-
geting aliases of the current-layer object. The conservative analysis
ensures to avoid potential false negatives.
Once the next-layer value is identified, TypeDive obtains its base
type. Since the next-layer is always a pointer, its base type is the
type of its element, obtained through getPointerElementType().
We also identify the indexes at this step. Specifically, if the next-
layer value is obtained from a LoadInst, the index is always zero;
however, if the next-layer value is either GetElementPtrInst or
GEPOperator, the index is the accumulated constant indices. In case
some indices are non-constant, TypeDive conservatively flags the
type as escaping, which is rare.
6 Formal Analysis
To prove that (1) MLTA is effective in refining icall targets and (2)
MLTA does not introduce more false negatives than FLTA does, we
provide a formal analysis of MLTA and the state-of-the-art FLTA.
Assumption. The formal analysis focuses on operations related
to FLTA or MLTA, like icalls and address-taking, and ignore others
as they will not affect the type-analysis results. To simplify the
description and proof, we make the following assumptions.
• Changing types is always through explicit type casting, e.g.,
cast x casts variable x to type Y.
• Type information is available for each variable, and all code
is in the analysis scope.
The first assumption holds for most well-written programs. In case
implicit type casting exists, previous work [35] demonstrates that
it is not challenging to modify a program to eliminate all violations.
For the second assumption, LLVM generates IR that has an explicit
type for each variable as long as source code is available.
Table 1 shows the formal representation of FLTA and MLTA.
Each rule in the table contains a code statement and the corre-
sponding action to take. For example, for the confinement rule
of FLTA, a=&f is the code, and M[t (a)] ∪= { f } is the action. M is
the type-confinement map. Its key is a type, and its value is the
confined function set. t (x ) returns the first-layer type of variable x,
while mlt (x ) returns the multi-layer type of x. For example, for the
variable c.a.handler in Figure 1, t () returns fptr_t while mlt ()
returns C.A.fptr_t. comp(α ) returns the set of all multi-layer types
in M that is compatible with type α. We define multi-layer type α is
compatible with another type β if α and β have overlapping types,
and one of them is an instance of another. For example, “_:A:B:ptr”
represents a multi-layer type in which (1) the function pointer has
type ptr; (2) the function pointer is stored in an object of type B; (3)
the object of B is stored in an object of type A; (4) the object of A
escapes from the current function, and we represent its next layer
as the wild-card “_”. “_:B:ptr” is compatible with “_:A:B:ptr” as they
share the same type B and the latter is an instance of the former.
But “A:B:ptr” is not compatible with “_:A:B:ptr” as it cannot be an
instance of the latter. “_:C:_” is not compatible with “_:A:B:ptr” due
to lack of common types.
FLTA only cares about three types of operations: address-taking,
casting involving function pointers, and icall. The confinement rule
inspects each address-taking instruction that stores the address
of f to the function pointer a. It adds function f to the function
set in M corresponding to the type of a, i.e., M[t (a)]. Storing a
function address to memory has the same effect. The propagation
rule handles the type casting from t (x ) to t (y), where one of them
is a function pointer type. With this cast, any function pointer with
type t (x ) could be used as type t (y). Therefore, all functions in
M[t (x )] should be added to M[t (y)]. FLTA resolves the targets of
each icall (∗p)() using the resolving rule. Specifically, any function
inside M[t (p)] is considered a valid target.
MLTA instead considers the multi-layer type for each rule. For in-
struction a=&f, the confinement rule adds function f to the function
set, M[mlt (a)], where mlt (a) is the multi-layer type for a. mlt (a)
is obtained through a conservative backward analysis: if we cannot
find an outer-layer type, we set it to _ and finish the analysis. The
propagation rule in MLTA handles casts, loads, and stores. If one
variable x is assigned to another variable y, then all function tar-
gets reachable from mlt (x ) should propagate to M[mlt (y)]. Note
that all reachable functions from mlt (x ) are not M[mlt (x )], but a
union of all M[α], where α is in M and compatible with mlt (x ).
Further, any multi-layer type β in M that is compatible with mlt (y)
should receive the same update: if β is an instance of mlt (y), the
assignment could ultimately reach β; if mlt (y) is an instance of β,
M[β] should cover targets from all its instances: MLTA resolves
the icall targets with the new resolving rule. the reachable targets
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1874typedef void (*fptr_t1)(int);
struct B { ftpr_t1 handler; };
void func_B(int);