l
a
C
4
3 EEXIT
5 EENTRY
(for ORET)
Trusted enclave
tRTS
2 Save state
to OCALL
frame
L
L
A
C
O
1
6 ORET
Restore state
from OCALL
frame
Untrusted
function
Trusted
code
returns, the uRTS issues an ERESUME for the faulting
thread, which will resume at the second-phase handler.
This traverses the registered exception handlers, which
can then observe the exception information to determine
whether they can handle the exception. To handle the
exception, a handler can modify the CPU state contained
in the exception information. If a handler succeeds, the
tRTS uses a function named continue execution to
restore the CPU register context from the exception infor-
mation, thus resuming enclave execution. If the exception
cannot be handled, a default handler switches the enclave
to a crashed state, which prevents further operations on it.
5 Threat Model and Assumptions
Previous work on SGX [19, 26] has considered a very
the attacker has full control
strong adversarial model:
through a malicious kernel.
over the machine, e.g.,
In this work, we consider a weaker attacker that has
compromised the application that hosts the enclave, e.g.,
by exploiting a vulnerability. In some cases, as discussed
below, an attacker might even be able to perform the
attack without any control over the host process.
Offensive capabilities. Our attacker has the following
capabilities:
• Memory corruption vulnerability. The attacker
has knowledge of a vulnerability in the enclave that
allows her to either corrupt stack memory (e.g.,
a stack overﬂow) or corrupt a function pointer on
the stack, heap, or other memory areas (e.g., heap
overﬂow, use-after-free or type confusion).
Untrusted
mode
Kernel
interrupt
handler
l
a
n
g
S
i
3
uRTS
2 AEX
Trusted enclave
Trusted
code
1 Exc.
4 EENTRY
6 EEXIT
7 ERESUME
9 Continue
execution
tRTS
5 Setup
2nd-phase
resume
8 Find and
call handler
Exception
handler
Figure 2: OCALL mechanism from the SGX SDK.
Figure 3: Exception handling mechanism from the SGX
SDK.
1216    27th USENIX Security Symposium
USENIX Association
• Ability to create fake structures. The attacker can
place arbitrary data at some memory location acces-
sible by the enclave. A malicious host process can
easily do this given the unrestricted access over its
own address space. An attacker could also possibly
achieve this via normal functionality, for example by
steering the application or the enclave into allocating
attacker-controlled data at predictable addresses.
• Knowledge of coarse-grained memory layout.
The attacker knows the victim enclave’s external
memory layout, i.e., its virtual address range. This
is known to the process hosting the enclave, as the
enclave virtual memory resides in its address space.
Alternatively,
information leakage vulnerabilities
inside the enclave could provide this knowledge to
an attacker who is not in control of the process.
• Knowledge of the enclave’s binary. The attacker
has access to the victim enclave’s binary allowing
her to run static analysis on the binary.
capabilities. We make
Defensive
assumptions about the victim enclave:
the
following
• SDK usage. The victim enclave is developed by
means of the ofﬁcial SGX SDK from Intel. The
SDK is used by almost all real-world enclaves, as it
is the development environment endorsed by Intel.
Furthermore, it has been used in various academic
works [26, 30].
• Randomized SGX memory. We also assume that
enclave code is additionally hardened by sophis-
ticated mitigation technologies such as address
space layout randomization (ASLR). That is, we
assume that
the victim enclave is protected by
means of SGX-Shield [26], which is currently the
only available ASLR solution for SGX. Recall that
existing memory corruption attacks against SGX,
e.g., Dark-ROP [19], are mitigated by SGX-Shield.
6 The Guard’s Dilemma
We now present in detail our novel code-reuse attacks
against SGX. The techniques we propose are applicable
to a wide range of vulnerabilities, including stack over-
ﬂows and corruption of function pointers. In particular,
the latter is common in modern object-oriented code.
Our ultimate attack goal is to execute a sequence (chain)
of gadgets, i.e., existing functions or short instruction
sequences, to perform a malicious activity of the at-
tacker’s choosing, without crashing the victim enclave.
This is along the lines of any other common code-reuse
attack such as return-oriented programming. However,
the advantage of our attack is to allow the attacker to
set all general-purpose CPU registers before executing
each gadget. Controlling registers is essential in any
code-reuse attack. For instance, they can prepare data for
subsequent gadgets or set arguments for function calls. In
contrast, existing code-reuse attacks on x86 require the
attacker to use speciﬁc register-setting gadgets (e.g., pop
gadgets) to set registers.
Not requiring those gadgets has two major beneﬁts.
First, it reduces the amount of application code needed
for a successful code-reuse attack, which is helpful in
constrained environments, as we demonstrate in Sec-
tion 7 with an exploit against SGX-Shield [26]. Second,
it simpliﬁes payload development since the attacker does
not need to ﬁnd pop gadgets for all relevant registers. In
fact, our attacks allow the attacker to use whole functions
as building blocks instead of small gadgets, allowing her
to work on a higher level and making it easier to port the
exploit between different versions of a binary.
Our attacks abuse functionality in tRTS, a fundamental
library of the Intel SGX SDK, which most enclaves use
(Section 5). Hence, our attacks threaten a large amount of
existing enclave code. Here lies the dilemma: the SDK is
an important part in creating secure enclaves, but in this
case it is actually exposing them to attacks.
We devise two new exploitation primitives to launch
memory corruption attacks against SGX:
• The ORET primitive. Our ﬁrst attack technique
allows the attacker to gain access to a critical set
of CPU registers by exploiting a stack overﬂow
vulnerability (cf. Section 5).
• The CONT primitive. Our second attack technique
is even more powerful as it allows the attacker to
gain access to all general-purpose registers. It only
requires control of a register (on x86 64, rdi).
In addition, this attack can be combined with the
ORET primitive to also apply it to controlled stack
situations.
6.1 Overview and Attack Workﬂow
In this section, we present a high-level description of
the exploitation primitives and the attack workﬂow.
6.1.1 Exploitation Primitives
In the following, we explain our exploitation primitives
and their preconditions.
ORET primitive. This primitive is based on abusing
the function asm oret from the tRTS library in the Intel
SGX SDK. Normally, this function is used to restore the
CPU context after an OCALL. The prerequisites for this
primitive are control of the instruction pointer (to hijack
execution to asm oret) and control of stack contents. For
instance, any common stack overﬂow vulnerability such
USENIX Association
27th USENIX Security Symposium    1217
as a buffer overﬂow or format string is sufﬁcient to use
the ORET primitive. The ORET primitive gives control
of a subset of CPU registers, including the register that
holds the ﬁrst function argument (rdi) and the instruction
pointer.
CONT primitive. This primitive abuses the function
continue execution from the tRTS, which is meant to
restore the CPU context after an exception. This primitive
requires the ability to call that function with a controlled
rdi, which is achievable by exploiting a memory cor-
ruption vulnerability affecting a function pointer (not
necessarily located on the stack). This primitive yields
full control over all general-purpose CPU registers.
ORET+CONT loop. The basic idea behind our attack
is to use the CONT primitive repeatedly to invoke the
various gadgets with the correct register values. Thus, the
chain needs to have multiple CONT invocations. Recall
that CONT requires a speciﬁc value for rdi, which the
other gadgets might modify. An easy way to satisfy this
constraint is to use ORET invocations to set rdi and
invoke CONT, building an ORET+CONT loop. Each
iteration of this loop executes one gadget and is structured
as follows:
1. A CONT primitive manipulates the stack pointer
to hijack it into attacker-controlled memory and
executes a gadget.
2. Once the gadget completes,
the previous stack
manipulation causes the execution of an ORET
primitive.
3. The ORET primitive triggers the CONT primitive
for the next gadget, continuing the cycle from the
ﬁrst step.
6.1.2 Workﬂow
This section describes the workﬂow of our attack based
on Figure 4.
Step 1: Payload preparation.
In preparation for
the exploit, the attacker performs static analysis on the
enclave binary to determine the gadgets she wants to
reuse. Our attack supports classic ROP gadgets, i.e.,
code sequences ending with a return instruction, and any
subroutine for function-reuse attacks. Note that, even if
the main enclave code is randomized, it is very difﬁcult to
randomize all the enclave code (Section 8) and the non-
randomized code contains enough gadgets to successfully
mount an attack (Section 7). Next, the attacker constructs
a gadget chain consisting of a sequence of gadgets which
will perform the desired malicious activity, and deﬁnes
the register state that should be set before executing each
gadget. For instance, if the gadget is an entire function,
registers will hold the function arguments. According to
the threat model deﬁned in Section 5, the attacker knows
the external memory layout of the enclave, including its
base address. Therefore, the attacker just needs to know
the static offset of a gadget in the enclave binary to ﬁnd
its run-time address. In addition to the payload gadgets,
the attacker has to determine the offsets of asm oret and
continue execution (both in the tRTS) to apply our
attack.
Step 2: Fake structures preparation. Our primitives
work by abusing functions intended to restore CPU con-
texts by tricking them into restoring fake contexts, thus
gaining control of the registers. In contrast to a standard
ROP exploit, which is usually self-contained, our attacks
require a number of auxiliary memory structures to hold
these fake contexts and execute our primitives. Since
enclaves can access user memory outside the enclave, the
structures do not have to be within the trusted enclave
memory. They can be in any memory shared with the
enclave (e.g., in the host’s memory) as long as its position
is known. Speciﬁcally, our attack requires two kinds of
fake structures:
• Multiple fake exception information structures,
which contain register contexts for the CONT prim-
itives. One fake exception information structure is
required for each gadget, in order to set the registers
to the correct values and execute the gadget.
• A fake stack, which is a supporting structure for
the ORET+CONT loop that serves two purposes.
On the one hand, it is used to bring control back
to an ORET primitive after a gadget executes. On
the other hand, it contains fake contexts for the
transition from the ORET primitive to the CONT
primitive to continue the loop.
Step 3: Attack execution. Thanks to the way the fake
structures are set up, triggering the ﬁrst CONT primitive
will start the ORET+CONT loop. Every cycle will
execute a gadget and advance the chain, thus running
the attacker’s payload. The only remaining aspect to
analyze is how the ﬁrst CONT is triggered. The easiest
case is when the vulnerability already satisﬁes the CONT
preconditions (e.g., exploitation of an indirect function
call). In that case, the attacker can execute the ﬁrst CONT
directly. Exploiting a stack overﬂow is also possible with
little additional effort. This kind of vulnerability allows
to run an ORET primitive. Since it can be used to set
the ﬁrst function argument register and the instruction
pointer, the attacker now has the controlled function call
needed for CONT and can trigger the loop.
1218    27th USENIX Security Symposium
USENIX Association
1 Payload prep.
• Find gadgets
• Design gadget chain
2 Fake structures prep.
• n fake exception infos
• 1 fake stack
3 Attack execution
• Launch ﬁrst CONT
Fake stack
···
···
···
···
···
···
···
···
Attack Runtime
ORET+CONT loop
Gadget
ORET
CONT
Fake exc.
info 1
Fake exc.
info 2
Fake exc.
info 3
...
Gadget 1
Gadget 2
Gadget 3
...
Figure 4: Overview of the workﬂow of our attack.
6.2 Details
In this section, we describe the technical details
and interaction of our exploitation primitives to craft a
memory corruption attack against SGX.
6.2.1 ORET Primitive
Our ORET primitive abuses the asm oret function,
used in the OCALL/ORET mechanism to restore the
CPU context from the OCALL frame saved on the stack.
This function allows controlling parts of the CPU context,
and can be a stepping stone to the CONT primitive.
The prototype of
the function is sgx status t
asm oret(uintptr t sp, void *ms). The ﬁrst argu-
ment (sp) points to the OCALL frame, which contains the
partial CPU context to be restored, including saved values
for rbp, rdi, rsi, rbx and r12 to r15. Listing 1 shows