Data](https://cwe.mitre.org/data/definitions/311.html)  
[OWASP: Secure Flag](https://www.owasp.org/index.php/SecureFlag)  
[Rapid7: Missing Secure Flag From SSL
Cookie](https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag)
# 没有用HttpOnly标志的cookie
漏洞特征：HTTPONLY_COOKIE  
一个新的cookie的创建应该设置Secure标志。Secure标志命令浏览器确保cookie不会被恶意脚本读取。当用户是“跨站脚本攻击”的目标的时候，攻击者会获得用户的session
id，从而能够接管用户的账户。  
有漏洞的代码：
    Cookie cookie = new Cookie("email",userName);
    response.addCookie(cookie);
解决方案（特殊的设置):
    Cookie cookie = new Cookie("email",userName);
    cookie.setSecure(true);
    cookie.setHttpOnly(true); //HttpOnly flag
解决方案（Servlet 3.0 配置）
    [...]
      true
      true
引用：  
[Coding Horror blog: Protecting Your Cookies:
HttpOnly](http://blog.codinghorror.com/protecting-your-cookies-httponly/)  
[OWASP: HttpOnly](https://www.owasp.org/index.php/HttpOnly)  
[Rapid7: Missing HttpOnly Flag From
Cookie](https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag)
# 使用反序列化对象
漏洞特征：OBJECT_DESERIALIZATION  
反序列化不受信任的数据可能会导致远程命令执行，如果有可用的执行链，那么就会触发恶意操作。库的开发者在逐渐提高防御策略，以避免潜在的恶意利用。但是还是有一些已知的类可以触发dos攻击。  
反序列化是一个敏感的操作，因为历史上曾经有很多比较有名的漏洞都是出自它。web应用是很脆弱的，因为很快java虚拟机里面将会爆发出一波新的漏洞。  
有漏洞的代码：
    public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
            return (UserData) in.readObject();
        }
    }
解决方案：  
避免反序列从远程用户输入的数据  
引用：  
[CWE-502: Deserialization of Untrusted
Data](https://cwe.mitre.org/data/definitions/502.html)  
[Deserialization of untrusted
data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data)  
[Serialization and
Deserialization](http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8)  
[A tool for generating payloads that exploit unsafe Java object
deserialization](https://github.com/frohoff/ysoserial)  
[1] [Example of Denial of Service using the class
java.util.HashSet](https://gist.github.com/coekie/a27cc406fc9f3dc7a70d)  
[2] [OpenJDK: Deserialization issue in ObjectInputStream.readSerialData()
(CVE-2015-2590)](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590)  
[3] [Rapid7: Sun Java Calendar Deserialization Privilege Escalation
(CVE-2008-5353)](https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize)
# 不安全的Jackson发序列化配置
漏洞特征：JACKSON_UNSAFE_DESERIALIZATION  
如果Jackson databind库被用来反序列不受信任的数据的话，就会导致远程命令执行。如果有可用的执行链，那么就会触发恶意操作。  
解决方案：  
当通过JsonTypeInfo.Id.NAME使用多态性时，应该明确定义想要的类型和子类型。并且不要调用ObjectMapper.enableDefaultTyping（readValue包含Object
或 Serializable 或 Comparable 或 已知的反序列化类型）  
有漏洞的代码：
    public class Example {
        static class ABean {
            public int id;
            public Object obj;
        }
        static class AnotherBean {
            @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS) // or JsonTypeInfo.Id.MINIMAL_CLASS
            public Object obj;
        }
        public void example(String json) throws JsonMappingException {
             ObjectMapper mapper = new ObjectMapper();
             mapper.enableDefaultTyping();
             mapper.readValue(json, ABean.class);
        }
        public void exampleTwo(String json) throws JsonMappingException {
             ObjectMapper mapper = new ObjectMapper();
             mapper.readValue(json, AnotherBean.class);
        }
    }
引用：  
[Jackson Deserializer security
vulnerability](https://github.com/FasterXML/jackson-databind/issues/1599)  
[Java Unmarshaller Security - Turning your data into code
execution](https://github.com/mbechler/marshalsec)
# 在反序列化漏洞中被利用的类
漏洞特征：DESERIALIZATION_GADGET  
反序列化利用链是一些可以被攻击者利用的类，这些类通常存在于远程api中。这些类也会被添自定义行为，目的是用readObject方法去反序列化
(Serializable)或者调用来自序列化对象中的方法(InvocationHandler).  
这个检查工具主要用于研究人员。真实的场景是反序列化会被用于远程操作。为了减少恶意代码的利用，必须要强制移除利用链中所使用的类。  
引用：  
[CWE-502: Deserialization of Untrusted
Data](https://cwe.mitre.org/data/definitions/502.html)  
[Deserialization of untrusted
data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data)  
[Serialization and
Deserialization](http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8)  
[A tool for generating payloads that exploit unsafe Java object
deserialization](https://github.com/frohoff/ysoserial)  
[1] [Example of Denial of Service using the class
java.util.HashSet](https://gist.github.com/coekie/a27cc406fc9f3dc7a70d)  
[2] [OpenJDK: Deserialization issue in ObjectInputStream.readSerialData()
(CVE-2015-2590)](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590)  
[3] [Rapid7: Sun Java Calendar Deserialization Privilege Escalation
(CVE-2008-5353)](https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize)
# 违反信任边界
漏洞特征：TRUST_BOUNDARY_VIOLATION  
信任边界被认为是通过程序画的一根线。在线的一边，数据是不可信的。在线的另一边，数据是被可信任的。身份效验的目的是为了数据能够安全的通过信任边界-从不信任的一遍到信任的一边。当程序模糊了信任数据和不信任数据的边界时就会导致违反信任边界的事情发生。把信任数据和不信任数据组合成相同的数据结构时，就会让程序员更容易在边界上的犯错。  
有漏洞的代码：
    public void doSomething(HttpServletRequest req, String activateProperty) {
        //..
        req.getSession().setAttribute(activateProperty,"true");
    }
    public void loginEvent(HttpServletRequest req, String userSubmitted) {
        //..
        req.getSession().setAttribute("user",userSubmitted);
    }
解决方案：  
解决方案是在设置新的session属性前要添加验证。如果有可能，最好数据是来自安全的地方而不是用户提供的输入数据  
引用：  
[1] [CWE-501: Trust Boundary
Violation](https://cwe.mitre.org/data/definitions/501.html)  
[OWASP : Trust Boundary
Violation](https://www.owasp.org/index.php/Trust_Boundary_Violation)
# 恶意的XSLT
漏洞特征：JSP_XSLT  
XSLT(可扩展样式表转换语言)是一种用于将XML 文档转换为其他XML 文档的语言。  
xslt的样式表中可能会携带恶意的行为。所以，如果一个攻击者控制了源样式表的内容，那么它可能会触发远程代码执行  
有漏洞的代码：
解决方案：  
解决方案确保源样式表来自安全的源，并且保证不会有类似于路径穿透的漏洞。  
引用  
[1] [Wikipedia: XSLT (Extensible Stylesheet Language
Transformations)](https://en.wikipedia.org/wiki/XSLT)  
[Offensive XSLT](https://prezi.com/y_fuybfudgnd/offensive-xslt/) by Nicolas
Gregoire  
[2] [From XSLT code execution to Meterpreter
shells](http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html)
by Nicolas Gregoire  
[XSLT Hacking Encyclopedia](http://xhe.myxwiki.org/xwiki/bin/view/Main/) by
Nicolas Gregoire  
[Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL
injection](http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/)  
[w3.org XSL Transformations (XSLT) Version 1.0](https://www.w3.org/TR/xslt) :
w3c specification  
[3] [WASC: Path
Traversal](http://projects.webappsec.org/w/page/13246952/Path%20Traversal)  
[4] [OWASP: Path Traversal](https://www.owasp.org/index.php/Path_Traversal)
# 恶意的XSLT
漏洞特征：MALICIOUS_XSLT  
XSLT(可扩展样式表转换语言)是一种用于将XML 文档转换为其他XML 文档的语言。  
xslt的样式表中可能会携带恶意的行为。所以，如果一个攻击者控制了源样式表的内容，那么它可能会触发远程代码执行  
有漏洞的代码：
    Source xslt = new StreamSource(new FileInputStream(inputUserFile)); //Dangerous source to validate
    Transformer transformer = TransformerFactory.newInstance().newTransformer(xslt);
    Source text = new StreamSource(new FileInputStream("/data_2_process.xml"));
    transformer.transform(text, new StreamResult(...));
解决方案：  
解决方案确保源样式表来自安全的源，并且保证不会有类似于路径穿透的漏洞。  
引用  
[1] [Wikipedia: XSLT (Extensible Stylesheet Language
Transformations)](https://en.wikipedia.org/wiki/XSLT)  
[Offensive XSLT](https://prezi.com/y_fuybfudgnd/offensive-xslt/) by Nicolas
Gregoire  
[2] [From XSLT code execution to Meterpreter
shells](http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html)
by Nicolas Gregoire  
[XSLT Hacking Encyclopedia](http://xhe.myxwiki.org/xwiki/bin/view/Main/) by
Nicolas Gregoire  
[Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL
injection](http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/)  
[w3.org XSL Transformations (XSLT) Version 1.0](https://www.w3.org/TR/xslt) :
w3c specification  
[3] [WASC: Path
Traversal](http://projects.webappsec.org/w/page/13246952/Path%20Traversal)  
[4] [OWASP: Path Traversal](https://www.owasp.org/index.php/Path_Traversal)
# 潜藏在Scala Play中的信息泄露
漏洞特征：SCALA_SENSITIVE_DATA_EXPOSURE  
应用总是无意识的泄露一些配置信息，比如内部结构或者通过各种应用问题侵犯隐私。  
基于各种有效的输入数据页面会返回不同的返回数据，尤其当机密数据被当成结果被web应用展示出来的时候，就会导致信息的泄露。  
敏感数据包括（不仅仅是列出来的这些）：api密钥，密码，产品版本，环境配置。  
有漏洞的代码：
    def doGet(value:String) = Action {
      val configElement = configuration.underlying.getString(value)
      Ok("Hello "+ configElement +" !")