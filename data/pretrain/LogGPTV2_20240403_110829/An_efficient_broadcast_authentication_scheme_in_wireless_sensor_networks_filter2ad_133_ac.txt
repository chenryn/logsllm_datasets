private ball (r1, r2,…, rt). Next, the receiver checks the identities 
of the balls by uniqueness of authentication path as discussed at 
the end of section 3.1.1. Finally, the receiver verifies each private 
ball  by  computing  the  treehash  of  the  private  ball  with  its 
authentication  path  and  checking  whether  this  treehash  is 
equivalent  to  the  public  key.  A  complete  match  assures  the 
receiver that the private ball belongs to the authenticated sender. 
The verification algorithm is shown as Figure 3-6. 
SIGNATURE_VERIFICATION
Input: message m, signature (cid:305), and Kpub
Output: {true, false} 
1.
2.
Check if m is in current sequence period 
Compute the hash h = H(m)
Split h into k piece pieces (h1,h2,…,hk) of length ln t bits 
each
Interpret each hj as an integer ij, with 1 (cid:148) j (cid:148) k
Compute TNj = ij/(t/d)
Check ij with pairs (i, TN, H(AP))
If index ij already exists, 
Else check that each H(APj) (cid:143) H(AP) (cid:143)TNj
Use Merkle tree to verify balls 
If (TreeHash(rj, APj) = PTNj
Else output false; 
check if H(APj) = H(AP)
then output true; 
Figure 3-6. Signature verification algorithm 
3. 
3.2 Re-keying Mechanism 
Because  a  single  key  pair  can  only  sign  r  messages,  a  sender 
should  use  a  new  key  pair  when  signing  more  than  r messages. 
Therefore, we offer a re-keying scheme as a solution. 
If  one  key  pair  can  sign  r  messages,  we  set  the  duration  of  a 
sequence  period  to  r.  The  sequence  numbers  of  the  first  public 
key  ranges  from  0  to  r-1,  the  sequence  numbers  of  the  second 
public key ranges from r to 2r-2, and so on, as depicted in Figure 
3-7.  Each  key  pair  can  only  be  used  for  the  duration  of  its 
sequence  numbers.  A  receiver  must  first  check  which  sequence 
period a received message belongs to. 
Figure 3-7. Sequence period of a public key 
Since a base station shares a pair-wise secret key with each sensor 
node, the base station unicasts the first public key to each sensor 
node through the authenticated channel. For efficiency, the base 
station  may  distribute  the  next  public  key  by  authenticated 
broadcast using the old private key. 

4. DISCUSSION
4.1 Security and Performance Analysis 
In  this  section,  we  discuss  the  system  parameters  that  influence 
security strength and performance of our scheme. We define these 
parameters in Table 4-1. Higher security strength typically results 
in lower performance and vice versa; therefore, we aim to provide 
just  enough  security  strength.  Thus,  we  suggest  values  of  t  = 
1024, k =16, and r = 4, which affords 64 bits of security against a 
chosen message attack. For brute force attacks, we follow HORS 
recommendation of l = 80.
h
l
t
k
h1
fl
d
r
Table 4-1. System parameters 
cost of computing a hash function 
size of a private ball 
number of private balls 
number of balls in the signature 
size of private ball’s identity 
size of a public ball 
number of public balls (or trees) 
number of messages one key pair can sign 
Theorem 1 describes the security strength of our scheme against 
brute force and chosen message attacks. Given a fixed amount of 
leaves, we can construct several trees instead of just one tree. A 
deeper  tree  produces  a  smaller  public  key  size;  however,  the 
sender  must  transmit  more  public  balls  per  signature.  Since  the 
receiver concurrently stores the public key and the signature, we 
wish  to  find  an  optimal  balance  between  them.  Theorem  2 
determines  the  number  of  trees  that  will  generate  the  smallest 
storage size. Although we may decrease the depth by increasing 
the  degree  of  a  Merkle  tree,  theorem  3  will  show  that  a  two 
degree Merkle tree is optimal. 
Theorem 1: The parameter l decides the security strength against 
a brute-force attack, while the parameters k, t, and r determine the 
security strength against a chosen message attack by providing 
k
(log
log
log
(cid:16)
r
)
t
(cid:16)
k
bits of security. 
Proof:  Let  f  be  a  one-way  function  operating  on  an  l-bit  input 
string. Then the output of the one-way function has length fl.  To 
perform a brute force attack against f, attackers derive the private 
ball ri from the Merkle tree’s leaves using 
leaf (cid:32)
.
rf
)( i
i
Because the sender discloses the private balls with the signatures, 
attackers may execute a chosen message attack by collecting the 
private balls to forge a signature. We assume that the attacker can 
obtain signatures on r messages of its choice (independent of the 
hash H). The attacker then tries to forge a signature on any new 
message m of its choice. We are interested in the probability that 
the  adversary  is  able  to  do  so  without  inverting  the  one-way 
function f. It is trivial to see that, for each invocation of H, this 
probability is at most 
rk
(
kt
)/
.
Lemma 1: The computation cost, communication overhead, and 
storage requirement are defined below. 
Computation cost (of receiver): 
hk (cid:13)
Communication overhead: 
hk
d
(cid:13)(cid:13)
lk
(cid:14)(cid:13)
(cid:13)(cid:14)
(cid:13)
r
)
(
f
f
l
l
Storage requirement (of receiver): 
d
hkrhk
(cid:13)(cid:13)(cid:14)(cid:13)(cid:13)
l
(cid:14)(cid:13)(cid:14)
lk
(cid:13)
f
f
l
l
Proof: To verify a signature, the receiver must compute the root 
using the leaf and its authentication path, thus, k hash calculations 
are needed. The communication overhead requires the public key 
size, which consists of  d roots, and r signature size, which each 
consists of k private balls and k authentication paths. The storage 
requirement includes the public key size, the signature size, and 
the private ball’s identity size. 
Lemma 2: The tree height is related to public key size by 
TreeHeight
ln (cid:16)
ln
(cid:32)
d
t
.
Proof: The height of the tree depends on the number of private 
balls and the number of public tree roots. The number of leaves of 
a tree is t/d. The height of the binary tree with t/d leaves is 
ln(
dt
/
ln
ln
(cid:16)
(cid:32)
d
)
t
.
Theorem 2: For a given security strength, we select a value for 
the number of trees d that will minimize the equation 
d
min(
(cid:14)(cid:13)(cid:14)
k
(cid:13)(cid:13)
lk
(ln
ln
(cid:16)
d
(cid:13)
)
t
f
f
.
l
l
Proof: The lowest storage requirement determines the number of 
trees  we  must  construct.  Combining  lemma  1  and  lemma  2,  we 
can find the optimal number of trees to construct. 
Theorem  3:  A  two  degree  Merkle  tree  has  the  lowest  upper 
bound of additional nodes needed to be sent. 
Proof:  The  upper  bound  of  additional  nodes  we  transmit  in  a 
signature is 
d
(
)1
(cid:32)(cid:13)(cid:16)
)1
(cid:13)(cid:16)
log
h
d
(
t
d
The WSN possesses the following characteristics. With a data rate 
of 10 Kbps, roughly 20 packets of 64 bytes each are sent every 
second. The packet drop rate is at most 5 percent, and the average 
length of burst drops is 5 packets. The verification latency should 
be less than 10 seconds. 
According  to  theorem  1,  a  system  with  parameters  of  l=80,
t=1024, k=16, r=4,
flt=160  yields  64-bit  security.  Thus,  an 
attacker  needs  to  perform  264  hash  computations  during  a  key 
pair’s  lifetime  to  forge  a  signature.  BiBa  [2]  provides  58-bit 
security  for  a  real-time  stock  quotes  application;  therefore,  we 
consider  64-bit  security  as  sufficient  for  our  application.  Using 
theorem 2, we calculate an optimal public key size of 640 bytes, 
which corresponds to 32 tree roots. Figure 4-1depicts the optimal 
public key size. 
4
x 10
2.5
overhead 
(byte)
2
1.5
1
0.5
0
10
0
1
10
public key
signature 
storage   
3
10
4
10
2
10
tree number
Figure 4-1. Optimal public key size
After deciding upon the optimal number of trees, we generate the 
key pair using the key generation algorithm of Figure 3-2. Figure 
4-2 illustrates the tree construction for this example. 
Private Key: 1024 80-bit random numbers 
Public Key: 32 160-bit hash values 
Number of trees: 32 
Number of leaves: 32 per tree 
Tree height: 5 
For a fixed number of leaves t, we find that the equation 
d
min((
)1
(cid:13)(cid:16)
log
)
t
d
is at a minimum when the degree is two. 
4.2 Case Study 
A municipality wishes to collect traffic information from sensors 
distributed  in  the  streets.  The  sensors  need  to  authenticate 
commands from the base station and return sensed data through a 
secure channel. 
Figure 4-2. Key pair configuration

4.3 Comparison
We  compare  our  proposed  scheme  with  µTESLA  [18],  an 
efficient broadcast authentication protocol for WSNs. Our scheme 