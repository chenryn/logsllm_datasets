**作者：天融信阿尔法实验室  
公众号：**
## WebSphere简介
WebSphere 是 IBM 的软件平台。它包含了编写、运行和监视全天候的工业强度的随需应变 Web
应用程序和跨平台、跨产品解决方案所需要的整个中间件基础设施，如服务器、服务和工具。WebSphere 提供了可靠、灵活和健壮的软件。
WebSphere Application Server 是该设施的基础，其他所有产品都在它之上运行。WebSphere Process Server 基于
WebSphere Application Server 和 WebSphere Enterprise Service
Bus，它为面向服务的[体系结构](https://baike.baidu.com/item/体系结构) (SOA)
的模块化应用程序提供了基础，并支持应用业务规则，以驱动支持业务流程的应用程序。高性能环境还使用 WebSphere Extended Deployment
作为其基础设施的一部分。其他 WebSphere 产品提供了广泛的其他服务。
WebSphere 是一个模块化的平台，基于业界支持的开放标准。可以通过受信任和持久的接口，将现有资产插入
WebSphere，可以继续扩展环境。WebSphere 可以在许多平台上运行，包括 Intel、Linux 和 z/OS。
WebSphere
是随需应变的电子商务时代的最主要的软件平台，可用于企业开发、部署和整合新一代的电子商务应用，如[B2B](https://baike.baidu.com/item/B2B)，并支持从简单的网页内容发布到企业级事务处理的商业应用。WebSphere
可以创建电子商务站点， 把应用扩展到联合的移动设备， 整合已有的应用并提供自动业务流程。
## WSDL简介
WSDL是一个用于精确描述Web服务的文档，WSDL文档是一个遵循WSDL-XML模式的XML文档。WSDL
文档将Web服务定义为服务访问点或端口的集合。在 WSDL
中，由于服务访问点和消息的抽象定义已从具体的服务部署或数据格式绑定中分离出来，因此可以对抽象定义进行再次使用。消息，指对交换数据的抽象描述；而端口类型，指操作的抽象集合。用于特定端口类型的具体协议和数据格式规范构成了可以再次使用的绑定。将Web访问地址与可再次使用的绑定相关联，可以定义一个端口，而端口的集合则定义为服务。
一个WSDL文档通常包含8个重要的元素，即definitions、types、import、message、portType、operation、binding、service元素。这些元素嵌套在definitions元素中，definitions是WSDL文档的根元素。
## 漏洞原理深度分析
网上最早披露的漏洞相关详情信息是在此篇博文中进行讲解的。
根据文中的部分描述，此漏洞是由IIOP协议上的反序列化造成，所以我们本地需要起一个IIOP客户端来向WebSphere发送请求从而触发漏洞。
代码如下所示
    Hashtable env = new Hashtable();
    env.put(Context.INITIAL_CONTEXT_FACTORY, "com.ibm.websphere.naming.WsnInitialContextFactory");
    env.put(Context.PROVIDER_URL, "iiop://172.16.45.148:2809");
    InitialContext initialContext = new InitialContext(env);
    initialContext.list("");
根据文章中的描述我们来到TxServerInterceptor这个拦截器的receive_request方法中，根据博主的描述在到达反序列化点之前的执行路径如下所示
我们先从TxServerInterceptor的receive_request方法开始调试。
我们运行IIOP客户端，向WebSphere发送请求，但是很快就发现执行链中的第二个断点并没有被执行，我们来看下源码
从源码中看出，想要执行到调用TxInterceptorHelper的demarshalContext()方法处要满足两个判断，即`validOtsContext=true`
和`TxProperties.SINGLE_PROCESS=ture`
首先先看validOtsContext是在哪里进行的赋值
可以看到validOtsContext的值为ture 或者false 取决于serviceContext的值是否为空。
经过调试发现不出所料serviceContext的值为空，那么现在就面临第一个问题就是要让程序执行到指定位置，所以我们要想办法为serviceContext赋一个值。
所以我们跟入`serviceContext =
((ExtendedServerRequestInfo)sri).getRequestServiceContext(0)`这行代码，深度挖掘这个`((ExtendedServerRequestInfo)sri).getRequestServiceContext(0)`这个方法的返回值我们可不可控，判断一下这个serviceContext的值是否获取自IIOP客户端发送的数据。
下面列出分析serviceContext值来源的调用链
最终来到ServiceContextList的getServiceContext方法，一下是该方法的具体实现
    public ServiceContext getServiceContext(int var1) {
        ServiceContext var2 = null;
        synchronized(this) {
            for(int var4 = 0; var4 此篇博文中的介绍，该方法中有一个switch我们需要走到如下图所示的代码位置
但是目前的参数经过选择是走不到此处的，所以就又需要我们来查看此处的参数是否是前端传入并且是否可控了，如果可控那就需要我们继续在前端对数据进行构造。
我们先观察这里传递进来的第一个参数也就是var0 一个InputStream类型的参数
代码调回到PropagationContext类的demarshalContext方法，看到出发漏洞的代码如下图所示，其实结合客户端的代码不难知道这是在反序列化我们传递的PropagationContext对象里封装的一个AnyImpl对象那个
其实结合客户端的代码不难知道这是在反序列化我们传递的PropagationContext对象里封装的一个AnyImpl对象那个
    //就是这个AnyImpl
    Any any = orb.create_any();
    PropagationContext propagationContext = new PropagationContext(
            0,
            new TransIdentity(null,null,new otid_t(0,0,new byte[0])),
            new TransIdentity[0],
            any
    );
根据博文中的描述IBM Java
SDK中Classloader中禁掉了一些gadget用到的类，TemplatesImpl类不再是可序列化的，而此类又常用于很多公共gadget链中，根据IBM
Java SDK中TemplatesImpl类和oracle JDK中TemplatesImpl类的继承关系可以确认这一点。
Oracle JDK中的TemplatesImpl类的继承关系
IBM Java SDK中的TemplatesImpl类的继承关系，可以看到没有实现Serializable接口
IBM SDK不使用Oracle
JDK的Java命名和目录接口(JNDI)实现。因此，它不会受到通过RMI/LDAP加载远程类的攻击，以上的种种限制都增加了RCE的难度，我们需要重新在IBM
WebSphere中找到一条新的利用链。
大佬们给出了相应的思路，IBM
WebSphere中有这么一个类WSIFPort_EJB可以作为入口，此次反序列化RCE利用了WSIFPort_EJB在反序列化时会从前端传入的数据中反序列化初一个Handle对象，并且会调用该对象的getEJBObject()方法。
我们需要将WSIFPort_EJB封装入PropagationContext类的implementation_specific_data属性中，也就是AnyImpl对像中，这样在执行`propContext.implementation_specific_data
= inputStream.read_any()`
将AnyImpl对象从inputStream中反序列化出来的时候，就会自然而然的去反序列化我们封装进去的WSIFPort_EJB方法从而执行其readObject方法
代码如下
            WSIFPort_EJB wsifPort_ejb = new WSIFPort_EJB(null,null,null);
                    Any any = orb.create_any();
            any.insert_Value(wsifPort_ejb);
修改完后再次运行，发现可以执行到此次反序列化漏洞的入口点，WSIFPort_EJB类的readObject方法了