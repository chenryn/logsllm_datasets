Verifiable Oblivious RAM Machine (PVORM) is proposed [16] to
achieve a similar goal as in PoL, i.e., allowing an database manager
to verifiably update the publicly visible but encrypted dataset for
users without leaking users’ update patterns. Adopting PVORM
in PoL, users don’t even need to verify inclusion proofs after each
update but only the update proofs of PVORM, which we discuss
further in section 4.3.3.
D DAPOL+ PSEUDOCODE
We present the pseudocode of the DAPOL+ protocol in fig. 8 to
help demonstrate how it works.
E ProtDAPOL+ SECURITY
We prove theorem 4.1 that ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) satisfies correct-
ness and soundness.
Proof. It is straightforward that ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) satisfies
correctness.
Now we prove ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) satisfies soundness. Assume
for contradiction that soundness is broken, which means there
exists a (𝑁 , 𝑀𝑎𝑥𝐿)-valid data set 𝐷𝐵, a p.p.t. adversarial prover
A∗ corrupting some users in U, and a subset 𝑉 of non-corrupted
users such that with non-negligible probability, the adversary can
cheat users in 𝑉 without being detected. First, because users’ IDs
are distinct in a valid 𝐷𝐵, by collision resistance of H(·), each
user must be mapped to a unique leaf node. Combining Merkle
proofs for all users in 𝑉 , again by collision resistance of H(·),
the intersection nodes of different Merkle paths together with the
leaf nodes of 𝑉 are consistent. Hence a unique sparse Merkle tree
𝑆𝑀𝑇 can be derived from the Merkle paths and the leaf nodes for
users in 𝑉 . By the computationally binding property of Pedersen
commitments, each leaf node mapped to 𝑢 ∈ 𝑉 commits to the
prover’s liabilities to 𝑢. By the additively homomorphic property of
Pedersen commitments, the root node should commit to the sum
of values in all leaf nodes and padding nodes in 𝑆𝑀𝑇 if there is no
overflow. For each 𝑢 ∈ 𝑉 , by the soundness of Bulletproofs, each
sibling node in 𝑢’s Merkle path commits to a value within range
[0, 𝑁 · 𝑀𝑎𝑥𝐿). Since 𝑙𝑢 ∈ [0, 𝑀𝑎𝑥𝐿) as 𝐷𝐵 is valid, the internal
node at height 𝑖 on the path from 𝑢’s leaf node to the root commits
to a value within [0, ((𝐻 − 𝑖) · 𝑁 + 1) · 𝑀𝑎𝑥𝐿), so the root within
[0, (𝐻 · 𝑁 +1)· 𝑀𝑎𝑥𝐿). Given that 𝑞 ≥ (𝐻 · 𝑁 +1)· 𝑀𝑎𝑥𝐿, there isn’t
an overflow in the additions. Therefore, 𝐿 =𝑢∈𝑉 𝑙𝑢 +𝑖∈𝑊 𝑣𝑖,
𝐿 < 𝑢∈𝑉 𝑙𝑢 indicates that there exists some node 𝑖 ∈ 𝑊 such
where 𝑊 is the set of padding nodes in 𝑆𝑀𝑇 not mapped to any
user in 𝑉 and 𝑣𝑖 is the value each node in 𝑊 is committed to. Thus
that 𝑣𝑖 < 0. This violates the security of Bulletproofs proving the
range of 𝑣𝑖. Therefore, ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) satisfies soundness
and thus is secure.
□
We now show that ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) is Φuser-private where
Φuser = ∅ as defined in theorem 4.2.
Proof. The real game returns 𝑃𝐷, 𝐷𝐵[𝑉] and {𝜋𝑢}𝑢∈𝑉 . We
construct as follows the simulator S taking 1𝜅 and 𝐷𝐵[𝑉] as inputs:
ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿)
Public parameters :
𝑁 , 𝑀𝑎𝑥𝐿, 𝐻, 𝐺, 𝑔1, 𝑔2, 𝑠𝑎𝑙𝑡_𝑏, 𝑠𝑎𝑙𝑡_𝑠
On init, P executes Setup(1𝜅, 𝐷𝐵) :
Let 𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡
Randomly map 𝑢 ∈ U to a bottom-layer leaf node in an empty SMT;
For 𝑖 in 𝐻 ..1 :
$← {0, 1}𝜅;
Add padding nodes for non-existing siblings of existing nodes at height 𝑖;
Add parent nodes at height 𝑖 − 1 for existing nodes at height 𝑖;
For 𝑗 in 𝐻 ..0 :
For 𝑖 is an existing node at height 𝑗 in SMT :
· 𝑔𝑏𝑢
2
If 𝑖 is a leaf node of user 𝑢 :
Let 𝑤𝑢 = 𝐾𝐷𝐹 (𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡, 𝑖𝑑𝑢);
Let 𝑏𝑢 = 𝐾𝐷𝐹 (𝑤𝑢, 𝑠𝑎𝑙𝑡_𝑏), 𝑠𝑢 = 𝐾𝐷𝐹 (𝑤𝑢, 𝑠𝑎𝑙𝑡_𝑠);
Let 𝑐𝑢 = 𝐶𝑜𝑚(𝑙𝑢, 𝑏𝑢) = 𝑔𝑙𝑢
1
If 𝑖 is a padding node :
Let 𝑤𝑖 = 𝐾𝐷𝐹 (𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡, 𝑖𝑑𝑥𝑖);
Let 𝑏𝑖 = 𝐾𝐷𝐹 (𝑤𝑖, 𝑠𝑎𝑙𝑡_𝑏), 𝑠𝑖 = 𝐾𝐷𝐹 (𝑤𝑖, 𝑠𝑎𝑙𝑡_𝑠);
Let 𝑐𝑖 = 𝐶𝑜𝑚(0, 𝑏𝑖) = 𝑔0
2 , ℎ𝑖 = H(“𝑝𝑎𝑑”||𝑖𝑑𝑥𝑖 ||𝑠𝑖);
If 𝑖 is an internal node :
Let 𝑐𝑖 = 𝑐𝑙𝑐ℎ𝑖 · 𝑐𝑟𝑐ℎ𝑖 , ℎ𝑖 = H(𝑐𝑙𝑐ℎ𝑖 ||𝑐𝑟𝑐ℎ𝑖 ||ℎ𝑙𝑐ℎ𝑖 ||ℎ𝑟𝑐ℎ𝑖 );
1 · 𝑔𝑏𝑖
, ℎ𝑢 = H(“𝑙𝑒𝑎𝑓 ”||𝑖𝑑𝑢 ||𝑠𝑢);
Let 𝑆𝐷 = (𝑚𝑎𝑠𝑡𝑒𝑟_𝑠𝑒𝑐𝑟𝑒𝑡, the mapping);
Publish 𝑃𝐷 = (𝑐𝑟𝑜𝑜𝑡 , ℎ𝑟𝑜𝑜𝑡);
Let 𝐿 =𝑢∈U 𝑙𝑢, Π =𝑢∈U 𝑏𝑢 +padding node 𝑖 𝑏𝑖;
Send the requester (“VerifyTot”, 𝐿, Π);
On receive “ProveTot” from a requester, P executes ProveTot(𝐷𝐵, 𝑆𝐷) :
On receive (“VerifyTot”, 𝐿, Π) from P, execute VerifyTot(𝑃𝐷, 𝐿, Π) :
If 𝑃𝐷 = (𝑐𝑟𝑜𝑜𝑡 , ℎ𝑟𝑜𝑜𝑡) and 𝑐𝑟𝑜𝑜𝑡 = 𝑔𝐿
return 1;
1 · 𝑔Π
2 :
Else :
return 0;
exit;
On receive (“Prove”, 𝑖𝑑) from a request, P executes Prove(𝐷𝐵, 𝑆𝐷, 𝑖𝑑) :
If the requester fails to authenticate identity with respect to 𝑖𝑑 :
Retrieve 𝑏 and 𝑠 of the user with 𝑖𝑑;
Retrieve the Merkle path {(𝑐𝑖, ℎ𝑖)}𝑖∈[1,𝐻 ] authenticating the user’s leaf node;
Generate 𝜋𝑟𝑎𝑛𝑔𝑒 proving {𝑐𝑖 }𝑖∈[1,𝐻 ] commits to values within [0, 𝑁 · 𝑀𝑎𝑥𝐿);
Send the requester (“Verify”, 𝜋 = (𝑏, 𝑠, {(𝑐𝑖, ℎ𝑖)}𝑖∈[1,𝐻 ], 𝜋𝑟𝑎𝑛𝑔𝑒));
On receive (“Verify”, 𝜋) from P, execute Verify(𝑃𝐷, 𝑖𝑑, 𝑙, 𝜋) :
𝐻 = Com(𝑙, 𝑏), ℎ′
Let 𝑐′
For 𝑖 in 𝐻 − 1..0 :
Let 𝑐′
If (𝑐′
0, ℎ′
return 1;
𝐻 = H(“𝑙𝑒𝑎𝑓 ”||𝑖𝑑 ||𝑠);
𝑖+1 · 𝑐𝑖+1 and similarly compute ℎ′
𝑖;
𝑖 = 𝑐′
0) = 𝑃𝐷 and 𝜋𝑟𝑎𝑛𝑔𝑒 is valid :
Else :
return 0;
Figure 8: The DAPOL+ protocol.
If 𝑉 = ∅, randomly sample 𝑠
(𝑐 = Com(0, 𝑏), ℎ = H(𝑠)), ∅ and ∅.
Otherwise, when 𝑉 ≠ ∅,
$← {0, 1}𝜅 and 𝑏
$← Z𝑞, and return
(1) Randomly map each user in 𝑉 to a bottom layer node in an
empty SMT of height 𝐻. For each node mapped to a user
𝑢 ∈ 𝑉 , let 𝑐𝑢 = Com(𝑙𝑢, 𝑏𝑢) and ℎ𝑢 = H(“leaf”||𝑖𝑑𝑢||𝑠𝑢),
$← Z𝑞. Note that H(·) and
where 𝑠𝑢
𝐾𝐷𝐹(·) are calls to a random oracle.
(2) Construct a sparse Merkle tree 𝑆𝑀𝑇 initiated with the bot-
tom layer nodes mapped to users in 𝑉 . For each padding
$← {0, 1}𝜅 and 𝑏𝑢
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3483consists of one sender and one receiver for simplicity, each transac-
tion involves users either within a single VASP, i.e., the sender and
the receiver belong to the same VASP, or across two VASPs. Here
we empirically analyze all possible scenarios of dispute resolution
for the single-VASP case and the cross-VASP case separately.
F.1 Transaction within a single VASP
$← {0, 1}𝜅 and 𝑏𝑖
$← Z𝑞. Let 𝑐𝑖 =
node 𝑖, randomly sample 𝑠𝑖
Com(0, 𝑏𝑖) and ℎ𝑖 = H(“𝑝𝑎𝑑”||𝑖𝑑𝑥𝑖||𝑠𝑖). Then for each inter-
nal node 𝑖 with child nodes 𝑙𝑐ℎ𝑖 and 𝑟𝑐ℎ𝑖, let 𝑐𝑖 = 𝑐𝑙𝑐ℎ𝑖 · 𝑐𝑟𝑐ℎ𝑖
and ℎ𝑖 = H(𝑐𝑙𝑐ℎ𝑖 ||𝑐𝑟𝑐ℎ𝑖 ||ℎ𝑙𝑐ℎ𝑖 ||ℎ𝑟𝑐ℎ𝑖).
(3) Return (𝑐𝑟𝑜𝑜𝑡 , ℎ𝑟𝑜𝑜𝑡), 𝐷𝐵[𝑉] and inclusion proofs for each
user in 𝑉 generated from 𝑆𝑀𝑇 .
Now we have defined the simulator, and the proof is straightforward.
We introduce a hybrid game in which each user in 𝑉 is mapped to
a bottom layer node in an empty SMT of height 𝐻, and the SMT
for 𝑉 only is generated as in the real game. This hybrid game is
indistinguishable from the real game. Then by perfect hiding of
Pedersen commitments and zero-knowledge of Bulletproofs, the
hybrid game is indistinguishable from the simulated game.
□
We now show that ProtDAPOL+(𝑁 , 𝑀𝑎𝑥𝐿) is Φauditor-private
where Φauditor = ∅ as defined in theorem 4.3.
Proof. The real game returns 𝑃𝐷, 𝐿, Π, 𝐷𝐵[𝑉] and {𝜋𝑢}𝑢∈𝑉 .
We construct as follows the simulator S taking 1𝜅, 𝐿 and 𝐷𝐵[𝑉]
as inputs:
If 𝑉 = ∅, randomly sample 𝑠
(𝑐 = Com(𝐿, 𝑏), ℎ = H(𝑠)), 𝐿, 𝑏, ∅ and ∅.
Otherwise, when 𝑉 ≠ ∅,
$← Z𝑞, and return
$← {0, 1}𝜅 and 𝑏
$← Z𝑞.
(1) Randomly map each user in 𝑉 to a bottom layer node in
an empty SMT of height 𝐻, and compute the commitment
and hash for each user by 𝑐𝑢 = Com(𝑙𝑢, 𝑏𝑢) and ℎ𝑢 =
H(“leaf”||𝑖𝑑𝑢||𝑠𝑢), where 𝑠𝑢
$← {0, 1}𝜅 and 𝑏𝑢
$← {0, 1}𝜅 and 𝑏𝑖
(2) Construct a sparse Merkle tree 𝑆𝑀𝑇 initiated with the bot-
tom layer nodes mapped to users in 𝑉 . For each padding
$← Z𝑞. Let
node 𝑖, randomly sample 𝑠𝑖
𝑐𝑖 = Com(0, 𝑏𝑖) and ℎ𝑖 = H(“𝑝𝑎𝑑”||𝑖𝑑𝑥𝑖||𝑠𝑖) except that for
Note that when there isn’t a padding node in 𝑆𝑀𝑇 , the tree is
full and the adversary corrupts all users. Next for each inter-
nal node 𝑖 with child nodes 𝑙𝑐ℎ𝑖 and 𝑟𝑐ℎ𝑖, let 𝑐𝑖 = 𝑐𝑙𝑐ℎ𝑖 · 𝑐𝑟𝑐ℎ𝑖
and ℎ𝑖 = H(𝑐𝑙𝑐ℎ𝑖 ||𝑐𝑟𝑐ℎ𝑖 ||ℎ𝑙𝑐ℎ𝑖 ||ℎ𝑟𝑐ℎ𝑖).
𝐷𝐵[𝑉] and inclusion proofs for each user in 𝑉 generated
from 𝑆𝑀𝑇 .
one padding node 𝑗, let 𝑐 𝑗 = Com(𝐿−𝑢∈𝑉 𝑙𝑢, 𝑏 𝑗) if 𝑗 exists.
(3) Return (𝑐𝑟𝑜𝑜𝑡 , ℎ𝑟𝑜𝑜𝑡), 𝐿, 𝑏𝑟𝑜𝑜𝑡 =𝑢∈𝑉 𝑏𝑢+padding node 𝑖 𝑏𝑖,
Now we have defined the simulator, and the proof is similar to that
of theorem 4.2. Consider a hybrid game in which each user in 𝑉 is
mapped to a bottom layer node in an empty SMT of height 𝐻 first,
and users in U − 𝑉 are mapped next, and then the game proceeds
as in the real game. This hybrid game is indistinguishable from the
real game. By perfect hiding of Pedersen commitments and zero-
knowledge of Bulletproofs, the hybrid game is indistinguishable
from the simulated game.
□
F DISPUTE RESOLUTION
In this section, we take the solvency case as an example and dis-
cuss dispute resolution in PoL. Each virtual asset service provider
(VASP) [27] plays the role of a prover and clients depositing virtual
assets to it need to verify the inclusion of their balances in the
VASP’s total liabilities. A user may send money to another a trans-
action via the VASP he/she belongs to. Assuming every transaction
Figure 9: Transaction within a single VASP.
We depict in fig. 9 the protocol for a user to send a transaction
with only necessary interactions. Note that the green and red dotted
arrows are for the same purpose of guaranteeing that the receiver
has the receipt of the transaction, and are complementary to each
other, which we soon explain in detail. We classify all possible
scenarios of disputes by the set of maliciously colluding entities
and summarize them in table 5. We denote by S the sender, R the
receiver, V the VASP, and H an entity being honest and M being
malicious.
Table 5: Transaction within a single VASP.
S
M
V
H
R
H
H
M
H
H
M
M
H
H
M
H
M
M
H
M
M
Potential attack
deny a tx