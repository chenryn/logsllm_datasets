obtain permanent access to the server
An attacker steals user account information from /etc/passwd ﬁle, compresses it using gzip and transfers
the data to a remote machine using ssh service
Malicious source code is downloaded, compiled and executed
A downloaded txt ﬁle exploits the code executable vulnerability in vim to collect machine conﬁguration
for future compromise preparation
An administrator reads encrypted user password from /etc/shadow ﬁle, decodes it with John, and uses
the plaintext to log in on other applications
Reference
PRIOTRACKER [53]
Taser [30]
Taser [30]
Protracer [57]
Xu et al. [82]
Xu et al. [82]
CVE-2019-12735 [2]
Passwd Reuse [10]
benign dataset, there are 55,296,982 audit events, which make
up 4,200 benign sessions.
In the malicious dataset, following the procedure found in
previous works [2], [10], [30], [53], [57], [82], we simulate3
eight attacks from real-world scenarios as shown in Table II.
Each attack is carefully performed ten times by two security
engineers on the enterprise servers. In order to incorporate the
impact of typical noisy enterprise environments
[53], [57],
we continuously execute extensive ordinary user behaviors and
underlying system activities in parallel to the attacks. For our
malicious dataset, there are 37,229,686 audit events, which
make up 80 malicious sessions.
In the background dataset, we record behaviors of devel-
opers and administrators on the servers for two weeks. To
ensure the correctness of evaluation, we manually analyze
these sessions and only incorporate sessions without behaviors
in Table I and Table II into the dataset. For our background
dataset, there are 183,336,624 audit events, which make up
1,000 background sessions.
The DARPA TRACE dataset [13] is a publicly available
APT attack dataset released by the TRACE team in the DARPA
Transparent Computing (TC) program [4]. The dataset was
derived from a network of hosts during a two-week-long red-
team vs. blue-team adversarial Engagement 3 in April 2018.
In the engagement, an enterprise is simulated with different
security-critical services such as a web server, an SSH server,
an email server, and an SMB server [63]. The red team carries
out a series of nation-state and common attacks on the target
hosts while simultaneously performing benign behaviors, such
as ssh login, web browsing, and email checking. For the
3For Illegal Storage and Content Destruction attacks, we leverage different
vulnerabilities (CVE-2019-13272 [3] and CVE-2019-12181 [1]) to implement
privilege escalation because the prior exploits are out-of-date.
DARPA TRACE dataset, there are 726,072,596 audit events,
which make up 211 graphs. Note that we analyze only events
that match our rules for triple translation in Section IV.
We test WATSON’s explicability and accuracy on our ﬁrst
three datasets as we need the precise ground truth of the event
semantics and high-level (both benign and malicious) behav-
iors for veriﬁcation. We further explore WATSON’s efﬁcacy in
attack investigation against our malicious dataset and DARPA
TRACE dataset because the ground truth of malicious behaviors
related to attack cases is available to us.
In general, our experimental behaviors for abstraction are
comprehensive as compared to behaviors in real-world sys-
tems. Particularly, the benign behaviors are designed based
upon basic system activities [84] claimed to have drawn
attention in cybersecurity study; the malicious behaviors are
either selected from typical attack scenarios in previous work
or generated by a red team with expertise in instrumenting and
collecting data for attack investigation.
B. Explicability of Event Semantics Inference
We measure what semantics WATSON learns for audit
events both visually and quantitatively: Visually, we use t-
SNE to project the embedding space into a 2D-plane giving us
an intuition of the embedding distribution; quantitatively, for
each triple, we compare the training loss in the TransE model
against our knowledge of event semantics and their similarities.
Embedding of system entities. Each element’s semantics
in events is represented as a 64-dimensional vector, where
the spatial distance between vectors encodes their semantic
similarity. To visualize the distance, we apply t-SNE to project
high-dimensional embedding space into a two-dimensional
(2D) space while largely preserving structural
information
9
(a)
(b)
(c)
Fig. 5: t-SNE visualization: (a) shows the embedding space of 20 sampled sessions. Each dot denotes a system entity or relation.
The red (left) and green (right) boxes are where (b) and (c) locate; (b) and (c) point out 53 process entities and 25 data entities.
TABLE III: The semantic distance ("surprise" factor) in six
audit events (KG-based triples). B and M indicate whether an
event is benign or malicious.
/usr/include/stdio.h
Head
bash
wget
vim
bash
.ssh/id_rsa
Relation
execve
read
send
read
execve
send
Tail
vim
cc1
ssh
bash
172.26.X.X
172.26.X.X
Distance |h + r − t|
0.4152
0.4273
1.6401
0.8078
6.2447
4.2952
B/M
B
B
B
B
M
M
among vectors. To manage the complexity, we randomly sam-
pled 20 sessions from the ﬁrst three datasets for visualization,
obtaining a scatter plot of 2,142 points. Figure 5a shows the
2D visualization of the embedding space. Points in the space
are distributed in clusters, suggesting that events are indeed
grouped based on some metric of similarity.
We further select eight programs (git, scp, gcc, ssh,
scp, vim, vi, and wget) to investigate process element
embeddings. Figure 5b shows a zoom in view of Figure 5a
containing 53 elements corresponding to the eight programs.
For clarity, the elements are labeled with process names and
partial arguments. Note that
identity information is erased
during one-hot encoding and thus does not contribute to
semantics inference. While most elements of the same pro-
gram are clustered together, there are a few interesting cases
supporting the hypothesis that the embeddings are actually
semantic-based. For example, git has a few subcommands
(push, add, commit). Git push is mapped closer to
scp and wget instead of git commit and git add.
This agrees with the high-level behaviors where git push
uploads a local ﬁle to a remote repository while git add and
git commit manipulate ﬁles locally. Another interesting
example involves ssh where two different clusters can be
identiﬁed, but both represent ssh connection to a remote host.
Upon closer inspection, we notice that these two clusters, in
effect, correspond to the usage of ssh with and without X-
forwarding, reﬂecting the difference in semantics.
Similarly, Figure 5c shows the t-SNE plot of 25 data object
elements. As expected, socket connections are separated from
ﬁles and clustered through different network ports. Note that
the relatively large distance between socket elements of port
22 is an artifact of the projection by t-SNE. They are actu-
10
ally close in the pre-projected embedding space as measured
using cosine similarity. Moreover, WATSON groups id_rsa,
id_rsa.pub, and known_hosts together, suggesting that
they share similar functions as identity authentication. How-
ever, id_rsa and id_rsa.pub have different semantics
as they represent private and public key, respectively. TransE
does not
identify their differences because both are only
accessed by ssh during SSH Login. One potential approach to
distinguishing them is to involve additional information such
as ﬁle permissions for event semantics inference.
Event Semantics. We calculate the translational distance in
KG-based triples to quantify the event semantics learned by
WATSON. This distance can be intuitively thought of as a
measure of how “surprising” one event is, with a lower value
being commonly seen and a higher value being rarely seen.
Some existing approaches [36], [77] leveraged the rareness of
events to measure their anomaly scores. To explore whether
our event semantics is consistent with such heuristics, we
also consider whether events are benign or malicious while
analyzing semantic distances. We classify one event as ma-
licious if it plays a critical role in an attack campaign. This
experiment is performed on 1,000 random events in our mali-
cious dataset. The statistical result shows that the distances in
malicious events are always larger than those in benign events.
This matches our domain knowledge as malicious events
should be considered “surprising” for analysts. Due to space
limitations, we present six events as examples in Table III.
Speciﬁcally, (vim, execve, bash) and (bash, send,
172.26.X.X) in the Conﬁguration Leakage behavior result
in much higher distance than other benign events.
In summary, WATSON learns semantics that consistently
mirrors our intuitive understanding of event contexts.
C. Accuracy of Behavior Abstraction
To evaluate WATSON’s accuracy in behavior abstraction,
we use behavior signatures that WATSON learns to predict
ssh sessions in our ﬁrst three datasets with similar behaviors.
To this end, we select 25 behaviors,
including 17 benign
routines in Table I and eight malicious attacks in Table II,
as the abstraction candidates. Due to considerable background
noise, audit events regarding these behavior candidates only
constitute 0.2% of the entire log volume. For each behavior
git initgit commitgit addssh_1gccgit pushssh_2vim and viscpwget(cid:3528)(cid:3676)96.169.XX.XX:22/ tmp/ tmp.XXX/ etc/ passwd/ etc/ group74.125.XX.XX:8096.169.XX.XX:22id_rsaid_rsa.pubknown_hostsBehavior
Precision
F1
Program Submission-U1
Program Submission-U2
Program Submission-U3
Program Submission-U4
Code Reference-U1
Code Reference-U2
Code Reference-U3
Code Reference-U4
Dataset Download-U1
Dataset Download-U2
Dataset Download-U3
TABLE IV: Evaluation results for behavior abstraction in
sessions. Columns 2 reports the number of events in raw
audit logs (AL), KG (after noise reduction), and behavior
signatures (BS). Column 3-5 elaborate the abstraction accuracy
of WATSON on 25 different behaviors in 5,280 sessions. -U#
in column 1 denotes speciﬁc users in Table I.
Recall
92.7%
94.0%
88.0%
89.3%
96.7%
82.7%
93.3%
92.0%
98.7%
95.3%
92.7%
96.7%
96.0%
100%
100%
95.3%
90.6%
100%
100%
100%
90.0%
100%
90.0%
80.0%
100%
94.2%
AL
3256
3178
3854
3208
3336
4274
2915
3141
3361
3471
3635
3229
3962
3126
3086
55610
19595
409949
203994
550281
310783
280451
357449
1144963
465098
153968
KG
101
98
117
97
131
141
92
105
111
121
116
137
210
97
101
1243
312
9013
6906
17524
40417
5906
15928
101225
31834
9283
64.7%
65.5%
91.0%
92.4%
94.2%
83.5%
94.2%
92.5%
99.0%
95.9%
94.9%
97.6%
94.6%
100%
100%
96.6%