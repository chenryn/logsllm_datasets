# 【技术分享】NSA武器库：DOUBLEPULSAR用户模式分析实现通用反射DLL Loader
|
##### 译文声明
本文是翻译文章，文章来源：countercept.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[ **myswsun**](http://bobao.360.cn/member/contribute?uid=2775084127)
**稿费：200RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**0x00 前言**
我们之前分析发布了一篇文章“[DOUBLEPULSAR
payload的内核payload的分析](http://bobao.360.cn/learning/detail/3881.html)”，其细节是关于内核模式shellcode如何使用异步APC注入DLL。然而，实际上内核payload不能做到加载DLL，但是可以设置包含用户模式shellcode的APC调用来实现加载DLL。
我们感兴趣的是这个payload能适用任意DLL，但是没有使用LoadLibrary。避免使用LoadLibrary可以更隐蔽的加载，因为它避免了需要写入文件到磁盘，还能避免LoadLibrary被监控，同时也能避免在PEB（通常包含所有加载的DLL的列表）中留有痕迹。虽然这种方式现在遍地可见，但是目前为止，我们还没注意到任何公开的代码可以用这种方式加载任意DLL的（现有代码需要的自定义构建支持加载的DLL）。DOUBLEPULSAR是不同的，它的实现非常完美，几乎能加载任何DLL。另外，几乎支持任何版本的Windows。
本文的技术细节使用用户模式的DOUBLEPULSAR，且提供了一个测试工具，其充分利用了独立的shellcode，因此很容易看到行为和检测。该工具不使用内核代码，只有用户层的loader来注入任意DLL。尽管这个shellcode有32位的版本，但是目前我们只分析了64位的版本。
**0x01 细节**
下面是shellcode的步骤的详细描述。
1\. call-pop被用来自定位，因此shellcode能使用静态偏移
2\. 通过匹配哈希模块名定位需要的API函数，通过哈希函数名匹配导出函数
3\. 解析DLL头得到关键元数据
4\. 如果可能，在优选的基址上分配合适大小的内存。任何以该基址的偏移都被保存，以供后用。
5\. DLL的每个节被拷贝到内存中合适的位置
6\. 处理导入函数，加载依赖库（使用LoadLibrary），填充IAT
7\. 重定位，修复偏移
8\. 使用RtlAddFunctionTable设置异常处理（SEH）
9\. 基于DLL头，设置每个节的内存保护属性为合适的值
10\. 使用DLL_PROCESS_ATTACH为参数调用DLL入口点
11\. 解析需要的序号函数并调用
12\. 得到需要的函数后，使用DLL_PROCESS_DETACH为参数调用DLL入口点
13\. 使用RtlDeleteFunction移除异常处理
14\. 将整个DLL内存设为可写，并清零
15\. 释放DLL内存
16\. shellcode清0自己，除了函数末端，其保证APC优雅的返回
在shellcode开头能看到call-pop组合，下个指令被调用，返回地址立即被移出到寄存器中。这使得代码能找到它自己的地址，并使用该地址的静态偏移来找到它自己的缓冲区。
当进入到一个循环，得到shellcode中偏移0xF0C的值，通过rdx和rcx传入到一个函数中。这个函数将调用find_func，定位shellcode需要的Windows
API函数。得到一个模块名的哈希值（在RDX中）和一个函数名的哈希（rcx中）。因为这些只是名字，他们可以被硬编码，且在不同版本的Windows中不会改变。
从TEB的PebLdr字段中定位到加载的模块，循环搜索模块哈希值。注意模块名哈希通过rdx压入栈，作为一个正常函数的序言，shellcode能从栈中访问它。
当匹配到后，转到函数搜索循环中，和上述方式相同，但是使用的是模块导出表的导出函数名。通过解析内存中的模块头，找到包含各种映像目录入口的RVA的IMAGE_DIRECTORY_ENTRY_ARRAY，其中包含存有导出函数的IMAGE_DIRECTORY_ENTRY_EXPORT。通过加上模块基址，RVA能够转化为真实的地址。PE头的解析在shellcode非常常见。
IMAGE_DIRECTORY_ENTRY_EXPORT结构包含了各种数组的RVA。AddressOfFunctions是导出函数的RVA数组。AddressOfNames这些函数的ASCII名字的平行数组。AddressOfNameOrdinals是另一个包含函数序号信息的平行数组。迭代这些数组能得到需要的函数地址，保存这些函数地址。
函数地址保存在栈中结构中。这个结构用来保存各种东西，如shellcode执行需要的函数指针。通常使用rsi访问它。结构的格式如下，也显示了循环解析的函数（其他值稍后会初始化）。
函数指针在每次调用find_func后被写入这个结构：
你也能通过rbp看见另一个引用结构，在shellcode缓冲区的一个空白内存块中，初始值为0。这个结构显示如下，在shellcode的偏移0x368处。