**场景：指定请求参数对接口进行扫描**
当通过设置代理的方式收集到请求信息后， 需要根据请求中的参数来扫描，请求分为 GET 和 POST
**POST**
Arachni 提供了 vector feed plugin，比如在 DVWA 中，Command Injection 的请求方法是 POST
    POST  http://192.168.1.129/dvwa/vulnerabilities/exec/
    ip=123&Submit=Submit
**配置如下:**
    {
      "url": "http://192.168.1.129/dvwa/vulnerabilities/exec/",
      "checks": [
        "os_cmd_injection*"
      ],
      "audit": {
        "forms": true,
        "headers": false,
        "cookies": false,
        "jsons": true,
        "ui_forms": true,
        "links": true,
        "xmls": true,
        "ui_inputs": true
      },
      "http": {
        "cookie_string": "security=low; path=/, PHPSESSID=nrd253e2fkqlq8celpkfj9vmn4; path=/"
      },
      "scope": {
        "page_limit": 0
      },
      "plugins": {
        "vector_feed": {
          "yaml_string": "type: formnmethod: postnaction: http://192.168.1.129/dvwa/vulnerabilities/exec/ninputs:n    ip: 123n    Submit: Submitn"
        }
      }
    }
**扫描说明：**
checks：仅扫描 os_cmd_injection
audit：扫描 form 表单，但不扫描 cookie 和 header
http: 设置请求的 cookie_string
scope：这里 page_limit 需要设置为 0，如果设置为 1 ，则不会进行扫描
plugins ：使用 vector_feed 插件，参数为 yaml_string ，即符合 YAML 语法的字符串。这里解释一下如何生成这个值
首先把字符串在 python 命令中打印出来
    >>> print "type: formnmethod: postnaction: http://192.168.1.129/dvwa/vulnerabilities/exec/ninputs:n    ip: 123n    Submit: Submitn"
    type: form
    method: post
    action: http://192.168.1.129/dvwa/vulnerabilities/exec/
    inputs:
        ip: 123
        Submit: Submit
**对应字段如下:**
action: 请求的url
method: 请求方法为 post
type: 请求body的类型，这里为表单所以为 form，如果body是 json 的话，这里需要设置为 json
inputs: 请求的参数，这里有两个参数 ip 和 Submit
在 YAML 缩进是很重要的，对于 type 为 json 时，因为 值可能会为一个object，比如
    {
      "key1": "value1",
      "key2": {
        "key3": "value3"
      }
    }
那么生成的 YAML 就为：
    key1: value1
    key2: 
     key3: value3
可以看到 key3 前面有空格。
这个转换过程可以使用 YAML 库来进行转换，比如在 python 中可以使用 pyyaml 库的 yaml.safe_dump 方法，将 dict 转为
yaml string:
    post_body['plugins'] = {
        "vector_feed": {
            # http://pyyaml.org/wiki/PyYAMLDocumentation
            "yaml_string": yaml.safe_dump(yaml_json, default_flow_style=False)
        }
    }
**GET**
对于 GET 的请求，请求参数是在 url 的 query string 中的，可以直接设置 url 属性，此时 page_limit 需要设置成 1。
因为 page_limit 的值在使用和不适用插件时的含义有所不同，这里为了避免这个问题，对于 GET 也推荐使用 vector_feed 来配置
这里以 DVWA 的 sql注入为例
**配置如下:**
    {
      "url": "http://192.168.1.129/dvwa/vulnerabilities/sqli/?id=111&Submit=Submit#",
      "checks": [
        "sql_injection"
      ],
     "audit": {
        "headers": false,
        "cookies": false,
        "links": true
      },
      "http": {
        "cookie_string": "security=low; path=/, PHPSESSID=nrd253e2fkqlq8celpkfj9vmn4; path=/"
      },
      "scope": {
        "page_limit": 0
      },
      "plugins": {
        "vector_feed": {
          "yaml_string": "action: http://192.168.1.129/dvwa/vulnerabilities/sqli/ninputs:n    id: 1n    Submit: Submitn"
        }
      }
    }
**扫描说明：**
checks：仅扫描 sql_injection
audit：因为是 GET ，所以这里设置扫描 links ，但不扫描 cookie 和 header
http: 设置请求的 cookie
scope：这里 page_limit 需要设置为 0，如果设置为 1 ，则不会进行扫描
plugins ：使用 vector_feed 插件，参数为 yaml_string ，即符合 YAML 语法的字符串。GET 的情况需要的参数少一些
    >>> print "action: http://192.168.1.129/dvwa/vulnerabilities/sqli/ninputs:n    id: 111n    Submit: Submitn"
    action: http://192.168.1.129/dvwa/vulnerabilities/sqli/
    inputs:
        id: 111
        Submit: Submit
只需要设置 action 和 inputs 即可
**扫描报告**
对于查看扫描进度，暂停，删除扫描的 API 都比较简单，这里就不详细介绍了。
扫描完成后，可以通过如下 API 来获取指定格式的报告，支持多种格式
    GET /scans/:id/report
    GET /scans/:id/report.json
    GET /scans/:id/report.xml
    GET /scans/:id/report.yaml
    GET /scans/:id/report.html.zip
扫出的问题在响应的 issues 部分
**0x04 二次开发 & 打包**
如果在使用过程中遇到bug和误报，想进行调试或修改，可以自己搭建开发环境进行调试和修改
**开发环境设置**
参考 wiki 的 [Installation#Source
based](https://github.com/Arachni/arachni/wiki/Installation#nix)
需要装以下依赖
Ruby 2.2.0 up to 2.3.3.
libcurl with OpenSSL support.
C/C++ compilers and GNU make in order to build the necessary extensions.
[PhantomJS 2.1.1](https://bitbucket.org/ariya/phantomjs/downloads/)
然后执行
    git clone git://github.com/Arachni/arachni.git
    cd arachni
    # 替换成国内源
    gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
    gem install bundler # Use sudo if you get permission errors.
    bundle install --without prof      # To resolve possible dev dependencies.
启动
    ./bin/Arachni_rest_server  --address 0.0.0.0 --port 8888
直接修改代码，然后创建扫描任务就可以进行测试，日志在 logs 目录下
**打包**
参考 [Development-environment][10] ，这里说下我的步骤
把以下三个依赖的项目拉到公司的 gitlab
[arachni](https://github.com/Arachni/arachni)
[arachni-ui-web](https://github.com/Arachni/arachni-ui-web)
[build-scripts](https://github.com/Arachni/build-scripts)
需要修改的地方有以下几个地方
修改 arachni-ui-web 的Gemfile，将以下部分
    gem 'arachni' , '~> 1.5'
替换成 gitlab 的地址，推荐用 ssh
    gem 'arachni', :git => 'ssh://xxxxxxxx/arachni.git', :branch => 'master'
修改 build-scripts 的 lib/setenv.sh ，将以下部分
    export ARACHNI_BUILD_BRANCH="experimental"
    export ARACHNI_TARBALL_URL="https://github.com/Arachni/arachni-ui-web/archive/$ARACHNI_BUILD_BRANCH.tar.gz"
修改成 gitlab arachni-ui-web 的仓库分支 和 代码下载地址
    # gitlab 仓库分支
    export ARACHNI_BUILD_BRANCH="master"
    # gitlab arachni-ui-web 的代码下载地址，需要为 tar.gz
    export ARACHNI_TARBALL_URL="http://xxxxxxxx/arachni-ui-web/repository/archive.tar.gz?ref=master"
运行打包命令
    bash build_and_package.sh
如果下载依赖过程中，遇到网速问题，可以配合 proxychains 。这里说一下，脚本执行过程中中断，再次运行会从上次中断的地方开始，因为打包过程需要从内网
gitlab 拉代码，所以记得下载依赖包后，停止，去掉 proxychains，然后再运行
**0x05 总结**
因为 [Arachni](https://github.com/Arachni/Arachni)
提供的参数较多，文中只针对常见和比较重要的部分进行了分析和介绍，希望能在构建自动化黑盒扫描平台时，给大家提供一些参考。
另外，如果哪里有写的不对或者不准确的地方，也欢迎大家指出。
**0x06 参考**
[Arachni Scanner](http://www.arachni-scanner.com/)
[Arachni Github](https://github.com/Arachni/Arachni)