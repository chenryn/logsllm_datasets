title:Whitewash: outsourcing garbled circuit generation for mobile devices
author:Henry Carter and
Charles Lever and
Patrick Traynor
Whitewash: Outsourcing Garbled Circuit Generation for Mobile
Devices
Henry Carter
Charles Lever
Georgia Institute of Technology
Georgia Institute of Technology
PI:EMAIL
PI:EMAIL
Patrick Traynor
Georgia Institute of Technology
PI:EMAIL
Abstract
Garbled circuits offer a powerful primitive for computation on a user’s personal data while keeping that data
private. Despite recent improvements, constructing and evaluating circuits of any useful size remains expensive on
the limited hardware resources of a smartphone, the primary computational device available to most users around
the world. In this work, we develop a new technique for securely outsourcing the generation of garbled circuits to a
Cloud provider. By outsourcing the circuit generation, we are able to eliminate the most costly operations from the
mobile device, including oblivious transfers. After proving the security of our techniques in the malicious model, we
experimentally demonstrate that our new protocol, built on this role reversal, decreases execution time by 98% and
reduces network costs by as much as 92% compared to previous outsourcing protocols. In so doing, we demonstrate
that the use of garbled circuits on mobile devices can be made nearly as practical as it is becoming for server-class
machines.
1 Introduction
Mobile devices have become one of the dominant computing platforms, with approximately 57% market penetration
in the United States alone [7]. These devices are capable of gathering and storing all of a user’s personal data, from
current location and social contacts to banking and electronic payment information. Because of the personal nature
of these devices, it is critical that a user’s information be protected at all times. Unfortunately, many smartphone
applications that require users to send data to application servers make preserving the privacy of this data difﬁcult.
To resolve this issue, a variety of secure multiparty computation techniques exist that could be leveraged to perform
computation over encrypted inputs [26, 10, 9, 5]. Currently, the most practically efﬁcient two-party technique is the
Yao Garbled Circuit [39]. Despite recent improvements in the efﬁciency of garbled circuits [25, 37], this technique still
requires signiﬁcant computation and communication resources, rendering it impractical for most smartphones. One
possible solution to this imbalance of resources is to blindly outsource the heavy computation to the Cloud. However,
because of the untrusted nature of Cloud providers [38], such a solution fails to provide measurable guarantees for
applications requiring high assurance.
In this work, we develop a new protocol for securely outsourcing garbled circuit generation to an untrusted Cloud.
We construct a protocol that ofﬂoads the role of generating the garbled circuit from the mobile device to the Cloud
without exposing any private inputs or outputs. By choosing to outsource this portion of the protocol, we eliminate a
signiﬁcant number of expensive public-key cryptography operations and rounds of communication used in oblivious
transfer. The result is a more computationally and bandwidth efﬁcient outsourcing protocol with improved security
guarantees against malicious players [6, 21].
In this paper, we make the following contributions:
• Develop a new outsourcing protocol: We develop the Whitewash1 outsourcing protocol, which allows a mobile
device participating in a two-party secure function evaluation to outsource the generation of the garbled circuit.
1A reference to Tom Sawyer, who “outsourced” his chores to his friends without ever revealing the true nature of the work.
1
By reversing the roles of the two players in prior work [6, 21], we fully eliminate the requirement for any
oblivious transfers, outsourced or otherwise, to or from the mobile device. This “simple” role reversal requires
fundamentally redesigning the outsourcing techniques used in previous work, as well as new security proof
formulations.
• Formal veriﬁcation and analysis: We formally prove the security of our outsourcing techniques in the mali-
cious model deﬁned by Kamara et al. [21]. Unlike previous work [6, 21], our protocol provides security when
the mobile device is colluding with its Cloud provider against the application server. We then provide an anal-
ysis of the reduction in operations between our work and the outsourced oblivious transfer of Carter et al. [6],
as well as the Salus framework by Kamara et al. [21]. Speciﬁcally, our protocol requires more executions of a
pseudorandom number generator in exchange for fewer algebraic group operations and zero-knowledge proofs.
Moreover, we signiﬁcantly reduce the number of rounds of communication required to the mobile device.
• Implement and evaluate the performance of our protocol: In our performance evaluation, we demonstrate a
maximum improvement of 98% in execution time and 92% improvement in bandwidth overhead compared to
Carter et al. [6]. For a different test application, when compared to performing computation directly on the mo-
bile device [26], we demonstrated a 96% and 90% improvement in execution time and bandwidth, respectively.
These improvements allow for the largest circuits evaluated on any platform to be computed from a mobile
device efﬁciently and with equivalent security parameters to non-mobile protocols.
The rest of this work is organized as follows: Section 2 provides detail on related research; Section 3 describes our
threat model and security deﬁnition; Section 4 provides a description of the Whitewash protocol; Section 5 compares
the operations required in our protocol to the protocols by Carter et al. and Kamara et al.; Section 6 describes our
empirical performance analysis; and Section 7 provides concluding remarks.
2 Related Work
Fairplay [33] provided the ﬁrst practically efﬁcient implementation of Yao’s garbled circuit protocol [39], requiring
only simple hash and symmetric key operations to securely evaluate an arbitrary function. Since then, a variety of
garbled circuit-based secure function evaluation (SFE) protocols have been developed in the semi-honest adversarial
model [4, 27, 18, 14, 19, 29, 32]. The latest of these, developed by Huang et al. [14], allows garbled circuits to
be evaluated in stages, which makes it the most efﬁcient semi-honest garbled circuit evaluation technique, both in
computation and memory requirements. In recent work, several garbled circuit SFE protocols have been developed in
the malicious security model, which require signiﬁcantly more computational resources than semi-honest protocols,
but are secure against arbitrary polynomial-time adversaries [31, 36, 35, 24, 26, 16, 28]. The protocol by shelat and
Shen [37] provides a two-party garbled circuit protocol which uses only symmetric-key constructions outside of the
oblivious transfer. When combined with Huang’s pipelining approach and the PCF compiler by Kreuter et al. [25],
their protocol is among the most efﬁcient maliciously-secure garbled circuit protocols implemented to date. Some
efforts have been made to improve the efﬁciency of these protocols by slightly reducing the adversary model. Many
schemes have been developed in the covert adversary model, which allows for some efﬁciency gains at the cost of
security [34, 8, 13, 2]. Huang et al. [15] developed a protocol that leaks only one bit of input to a malicious adversary
through dual execution, which was later implemented on GPUs by Hustead et al. [17]. In order to further improve the
efﬁciency of garbled circuit protocols, Gordon et al. [11] developed a protocol that combined Oblivious RAM with
garbled circuits, allowing sub-linear amortized complexity. However, this protocol only allows this performance gain
for functions that can be computed efﬁciently on a random-access machine.
To further improve the speed of cryptographic protocols on devices with minimal computational resources, the idea
of outsourcing cryptographic operations has been explored for many years in the ﬁeld of Server-assisted cryptogra-
phy [3]. More recently, Green et al. [12] developed a technique for outsourcing the costly decryption of attribute-based
encryption schemes to the cloud without revealing the contents of the ciphertext. Atallah and Frikken [1] developed
a set of special-purpose protocols for securely outsourcing Linear Algebra computations to a single cloud server. For
data mining applications, Kerschbaum recently developed an outsourced set intersection protocol using homomor-
phic encryption techniques [22]. While all of these applications provide signiﬁcant performance gains for speciﬁc
cryptographic applications, none of them address outsourcing of general secure computation.
In their Salus protocol, Kamara et al. [20, 21] developed two protocols for securely outsourcing the computation
of arbitrary functions to the cloud. Following Salus, Carter et al. [6] developed an outsourcing protocol based on
2
the maliciously secure garbled circuit protocol by Kreuter et al. [26]. Carter’s protocol outsources the evaluation of
garbled circuits by adding in an Outsourced Oblivious Transfer primitive. Their participant conﬁguration is the same
conﬁguration found in Kamara’s maliciously secure protocol, where the cloud is made responsible for evaluating
the garbled circuit. In this work, we choose to build on shelat and Shen’s latest protocol [37] since the symmetric
execution environment of Huang et al. [16] does not lend itself to outsourcing, and the bootstrapping technique used
by Lindell [28] has not been implemented or evaluated in practice. Unlike previous work, we choose to fundamentally
rearrange the roles of the participants, outsourcing the generation of the garbled circuits as in Kamara’s covertly secure
protocol. Constructing a new protocol with this role conﬁguration and the security guarantees of shelat and Shen’s
protocol allows us to develop a more efﬁcient outsourcing protocol with stronger security guarantees than any previous
outsourcing techniques.
3 Overview and Security Deﬁnitions
3.1 Protocol Goals and Summary
The primary reason for developing an outsourcing protocol for secure function evaluation is to allow two parties of
asymmetrical computing ability to securely compute some result. Current two-party computation protocols assume
both parties are equipped with equivalent computing resources and so require both parties to perform comparable
operations. However, when a mobile device is taking part in computation with an application server, some technique
is necessary to reduce the complexity of the operation on the mobile device. Ideally, we can make the mobile device
perform some small number of operations that is independent of the size of the circuit being evaluated.
In constructing such a protocol, there are three guarantees that we would like to provide. The ﬁrst of these guar-
antees is correctness. It is necessary that an outsourcing protocol must produce correct output even in the face of
malicious players attempting to corrupt the computation. The second desirable guarantee is security. SFE protocols
frequently use a simulation-based approach to deﬁning and proving security, which we outline in detail below. Essen-
tially, the goal is to show that each party can learn the output of the computed function and nothing else. Finally, an
ideal protocol would provide some guarantee of fair release. This guarantee ensures that either both parties receive
their outputs from the computation, or neither party receives their output. Our protocol achieves this in all but one
corruption scenario by treating the cloud as an arbiter, who will simultaneously and fairly release the outputs of the
protocol using one-time pads. In the scenario where the mobile device and Cloud are colluding, it is possible for
the Cloud to terminate the protocol after the mobile device receives output but before the application server receives
output. However, this is inherently possible in most two-party garbled circuit protocols.
To achieve these guarantees, we ﬁrst select the most efﬁcient two-party garbled circuit computation protocol to
date that provides guarantees of correctness and security in the malicious model. We assign the mobile device the role
of circuit generator in this protocol, and the application server is assigned the role of circuit evaluator. To outsource
the circuit generation operations from the mobile device, we allow the device to generate short random seeds and pass
these values to a Cloud computation provider, which then generates the garbled circuits using these seeds to generate
randomness. Thus, the mobile device’s work is essentially reduced to (1) generating random strings on the order of
a statistical security parameter, and (2) garbling and sending its input values to the evaluating party. In this way, we
develop a secure computation protocol where the mobile device performs work that is independent of the size of the
function being evaluated. We provide a formal proof of security for our protocol in Appendix A.
3.2 Non-collusion
To maintain security, previous outsourcing protocols assume that neither party colludes with the cloud [21, 6]. The
theoretical intuition for this constraint, outlined by Kamara et al. [21], is that the existence of an outsourcing protocol
where parties can arbitrarily collude would imply a two-party secure multiparty computation protocol where one party
performs sub linear work with respect to the size of the circuit. While this has been shown to be possible in some
cases [11], it is not clear that these techniques can be efﬁciently applied to an outsourcing scheme. Because of this,
previous work has left the more complex security model for future study. However, while previous protocols restrict
collusion between the cloud and any party, the sub-linear work implication only applies to cases when the cloud is
generating circuits and colludes with the evaluating party, or vice versa. In the Whitewash protocol, we prove security
when the mobile device colludes with the cloud against the evaluating web application. While this collusion scenario
removes the fair release guarantee of our protocol, it in no way compromises the security guarantees of conﬁdentiality
3
of participant’s inputs and outputs. Essentially, it reduces to the two-party computation scenario that the underlying
protocol is proven to be secure in. Since the mobile device is paying the Cloud for computation services, we believe
it is a more realistic assumption to assume that a cloud provider could collude maliciously with the paying customer,
and note that our protocol is the ﬁrst outsourcing protocol to provide any security guarantees in the face of collusion
with the Cloud.
3.3 Security Constructions
In the two-party computation protocol underlying our work, shelat and Shen implement a number of new and efﬁcient
cryptographic checks to ensure that none of the parties participating in the computation behave maliciously. We
provide an overview of these security checks in the following section. We refer the reader to shelat and Shen’s work
for more formal deﬁnitions and proofs [37].
3.3.1 k-probe-resistant input encoding
When working with garbled circuit protocols in the malicious model, the generator has the ability to learn information
about the evaluator’s input by corrupting the wire labels sent during the oblivious transfer. This attack, known as
selective failure, was ﬁrst proposed by Mohassel and Franklin [35] as well as Kiraz and Schoenmakers [23]. To prevent
this attack, shelat and Shen [37] implement an improved version of the k-probe-resistant input encoding mechanism
originally proposed by Lindell and Pinkas [30]. In their protocol, the evaluator Alice does not input her real input y to
the computation, but chooses her input y such that M · y = y for a k-probe resistant matrix M. Intuitively, the idea
is that the generator would have to probe Alice’s input approximately 2k times before learning anything about her real
input y.
3.3.2
2-Universal Hash Function
A second concern with garbled circuits in the malicious model is that the generator may send different input values for
each of the evaluated circuits from the cut-&-choose. To ensure that the generator’s inputs are consistent across evalu-
ation circuits, shelat and Shen implement an efﬁcient witness-indistinguishable proof, which computes a randomized,
2-universal hash of the input value using only arithmetic operations on matrices. Because of the regularity guarantees
of a 2-universal hash, the outputs of these hash operations can be seen by the evaluator without revealing any informa-
tion about the generator’s inputs. However, if any of the hashed input values is inconsistent across evaluation circuits,
the evaluator can infer that the generator provided inconsistent inputs, and can terminate the protocol.
3.3.3 Output proof of consistency
When a function being evaluated using garbled circuits has separate, private outputs for the generating and evaluating
parties, it is necessary to ensure that the evaluating party does not tamper with the generating party’s output. Since
the output must be decoded from the garbled output wires for the majority check at the end of the protocol, if the
output is only blinded with a one-time pad, this allows the evaluator the opportunity to change bits of the generator’s
output. Several techniques for preventing this kind of tampering have been proposed, but shelat and Shen’s latest
protocol [37] implements a witness-indistinguishable proof that uses only symmetric key cryptographic operations.
After the evaluator sends the output of computation to the generator, the proof guarantees to the generator that the
output value he received was actually generated by one of the garbled circuits he generated. However, it keeps the
index of the circuit that produced the output hidden, as this could leak information to the generator.
3.4 Security Model and Deﬁnition
Our deﬁnition of security is based on the deﬁnition proposed by Kamara et al. [21], which we specify for the two-party
setting as in Carter et al. [6]. We provide a brief description of the real/ideal world model here and direct readers to
the previous work in this space for a more formal deﬁnition.
In the real world, each party participating in the computation provides an input to the computation and an auxiliary
input of random coins, while the single party designated as the outsourcing party provides only random auxiliary
input. The evaluating party in this computation is assumed to be non-colluding with the outsourcing party, as deﬁned
by Kamara et al. Some subset of these parties A = (A1, ..., Am), m ≤ 3 are corrupted and can deviate arbitrarily from
4
Figure 1: The complete whitewash protocol. Note that the mobile device (Bob) performs very little work compared to
the web server (Alice) and the Cloud (Cloud).
the protocol. For the ith honest party, let OU Ti be its output, and for the ith corrupted party, let OU Ti be its view of
the protocol execution. Then the ith partial output of a real protocol execution with input x is deﬁned as:
REAL(i)(k, x; r) = {OU Tj : j ∈ H} ∪ OU Ti
Where H is the set of honest parties, r is all random coins of all participants, and k is the security parameter.
In the ideal world, each party provides the same inputs as in the real world, however, they are sent to a trusted
oracle which performs the secure computation. Once the trusted oracle completes the computation, it returns the
output to the participating parties and no output to the outsourcing party. If any party aborts early or sends no input
to the oracle, the oracle aborts and does not send the output to any party. For the ith honest party, let OU Ti be its
output to the oracle, and for the ith corrupted party, let OU Ti be an arbitrary output value produced by the party.
Then the ith partial output of an ideal protocol execution in the presence of m ≤ 3 independent malicious simulators
S = (S1, S2, S3) is deﬁned as:
IDEAL(i)(k, x; r) = {OU Tj : j ∈ H} ∪ OU Ti
Where H, r, and k are deﬁned as before. Given this model, security is formally deﬁned as:
Deﬁnition 1. An outsourcing protocol securely computes the function f if there exists a set of probabilistic polynomial-
time (PPT) simulators {Simi}i∈[3] such that for all PPT adversaries (A1, A2, A3), inputs x, auxiliary inputs z, and
for all i ∈ [3]:
{REAL(i)(k, x; r)}k∈N
c≈ {IDEAL(i)(k, x; r)}k∈N
Where S = (S1, S2, S3), Si = Simi(Ai), and r is uniformly random.
4 Protocol
4.1 Participants
Given a mobile device and a web- or application- server who wish to jointly compute a function, there are three
participating parties in the Whitewash protocol:
5
2:  Random seeds & input decommitments2: Commit input3: Circuit preparation2: Commit input4: Oblivious transfers1: Prepare input6:  Prove output correctness5: Circuit evaluation6: Release outputs6: Release outputs1: Prepare input1: Prepare input• Alice: We refer to the application server participating in the joint computation as “Alice.” She is assumed to
have large computational resources and is responsible for evaluating the garbled circuits.
• Bob: We refer to the mobile device participating in the joint computation as “Bob.” He is assumed to have
limited processing power, memory, and communication bandwidth.
• Cloud: We refer to the outsourcing party as “Cloud.” Cloud is responsible for relieving Bob of the major-
ity of his computational load, but is not trusted with knowing either party’s input to or output from the joint
computation.
4.2 Protocol
Common Inputs: Security parameters k (key length) and σ (the number of circuits generated for the cut-&-choose);
a commitment scheme com(x; c) with committed value x and commitment key c; and a function f (x, y).
Private Inputs: Bob inputs x and Alice inputs y.
Outputs: Two outputs fa, fb for Alice and Bob, respectively.
Phase 1: Pre-computation
1. Preparing inputs: Bob randomly generates r ∈ {0, 1}2k+log(k) as his input to the 2-universal circuit. He also
generates e ∈ {0, 1}|fb| as a one-time pad for his output. Alice computes her k-probe-resistant matrix M and y
such that M · y = y. Bob’s input to the circuit will be x = x(cid:107)e(cid:107)r and Alice’s input will be y. We denote the set