access to the full databases. Moreover, the lockscreen process
also leaves the PIN passwords in memory. Since the PIN
password is used for full-disk encryption and decryption as
well as unlocking the phone, Android spends an extraordinary
amount of effort to protect the PIN—e.g., the Gatekeeper
service veriﬁes hashes of user passwords in TrustZone to
protect them. Therefore, in the presence of memory disclosure
attacks, the retention of PIN passwords in memory completely
defeats the purpose of the added security measures.3
Observation #2: All tested Android versions are vulnerable.
Although Table I only presents the results from Android 8, we
have found that Android 6 and 7 both retain passwords, and
the only difference is the number of password copies. This
implies that password retention is not speciﬁc to a particular
Android version. For the rest of this paper, we only present
our ﬁndings on Android 8.4
Observation #3: Some developers have paid attention to
the password retention problem. We can see evidence that
some apps (e.g., Chase Bank, Dashlane, and Keepass2Android)
seem to be actively clearing out the passwords. For these
three apps, the passwords disappear once we have put the
app into the background. This suggests that the problem of
password retention seems to have gained attention from at
least some Android developers, and at least can be solved. We
would prefer the Android system to provide all app developers
assistance in solving these problems.
Observation #4: Password strings are easily recogniz-
able. For many applications, we have found password strings
together with other easily recognizable string patterns. For
instance,
string pat-
terns like ...&pass=1839172..., and the Tumblr app has
p.a.s.s.w.o.r.d.=.1.8.3.9.7.2. i.e., a UTF16 encod-
ing. In addition to the full password matches presented in
Table I, we have also found fragments of passwords (i.e., a
preﬁx or a sufﬁx of the password remains in memory rather
than the full password). This appears to result from the use of
SpannableStringBuilder, which we will describe in more
detail in Section IV.
Summary. Overall, the above ﬁndings are worrying evidence
that the password retention problem is widespread in Android.
Previous studies [3], [57] raised similar issues several years
ago for Android. Unfortunately, our ﬁnding shows that the
problem seems to have worsened today; Of note, Tang et
al. [57] looked at the Facebook and Gmail apps in 2012,
concluding that they had no problems, but both apps have
problems today.
the Facebook app contains ASCII
What causes password retention? Is password exposure
inevitable? We consider these questions next.
IN-DEPTH ANALYSIS: ANDROID FRAMEWORK
IV.
In order to achieve a thorough understanding of the root
causes of the password retention, we have performed an in-
depth analysis of the Android framework and several apps. In
3We observed that PIN passwords disappear after about an hour. One
previous study considers a piece of data to be exposed if it persists in memory
for more than ten minutes [57].
4Android 9 was recently ﬁnalized. We would expect similar results, but
have not yet analyzed it.
Application
Description
Gmail
Chrome
Chase Bank
Facebook
Tumblr
Yelp
1Password
Dashlane
PasswdSafe†
Keepass2Android†
Unlocking phone†
email
browser
ﬁnance
social
social
social
password
password
password
password
system
Installs
1,000 M
1,000 M
10 M
1,000 M
100 M
10 M
1 M
1 M
1 M
0.1 M
Built-in
Login
6
4
5
6
4
3
4
2
1
12
7
BG
6
3
0
5
1
2
1
0
0
2
2
YouTube
Lock
6
3
0
2
1
1
1
0
0
1
2
6
3
0
2
1
1
1
0
0
1
1
TABLE I: Password exposure in popular apps. The count
indicates the number of copies of the password found in
memory. The columns indicate increasing opportunities and
pressure for the system to reuse memory. (†) indicates apps
for which source code is available.
this section, we focus on the Android framework, describing
our methodology for its analysis and our ﬁndings.
A. Methodology
In order to identify where password retention occurs, we
have used two key techniques: runtime logging, and password
mutation.
Runtime logging: We annotate core modules in Android, using
the standard logging facility, giving us a timeline of the use
of function calls related to password processing.
Password mutation: In order to precisely pinpoint the location
of password retention, we also apply password mutations as
the passwords pass through different Android components.
When a component Ci receives a password pi, it will index
a pre-deﬁned permutation dictionary using pi, and obtain a
mutated password pi+1 before passing it to the next component
Ci+1. Therefore, when we take the memory dump, we know
that instances of pi are hoarded by component Ci, whereas
instances of pi+1 are hoarded by Ci+1. Our algorithm also
ensures that these password mutants have the same length and
unique contents, so we can easily locate a password fragment
within the component that’s using it.
An obvious question might be why we did not use an
automated analysis tool, whether based on static analysis [4],
[6], [12] or dynamic analysis [15], [20], [62], [63]. Ultimately,
a static analysis tool can only ﬁnd a code pattern that we know
in advance. Similarly, dynamic approach such as taint analysis
can track all uses of sensitive data, which would certainly help
us follow passwords and their derivatives. However, suitable
tooling that we might adopt for our experiments appears to
be experimental, either targeting outdated Android versions
(e.g., NDroid [62] for Android 5.0) or requiring very speciﬁc
hardware (e.g., DroidScope [63] only supports an Acer 4830T).
Of course, once we understand the root coding patterns that
lead to password retention, we could then imagine creating
automatic tools to highlight these patterns, efﬁciently, across
millions of apps, perhaps even built directly into Android
Studio and other development tools that Android developers
use. While our manual approach lacks scalability, it allows
us to trace the ﬂow of passwords through Android’s various
subsystems, pinpointing a variety of relevant problems. Future
automated approaches can then be built based on our ﬁndings.
4
completes. We argue that this responsibility should be handled
within the TextView rather than by the app developer.
Problem #2: Insecure SpannableStringBuilder. The buffer in
a TextView class is actually a SpannableStringBuilder,
whose implementation leads to two problems. First, when-
ever a user
types a new character of her password,
SpannableStringBuilder will allocate a new array, copy
the previous password preﬁx to this array, and discard the
previous array without clearing it. This is the root cause of
why we see fragmented passwords in memory. We also note
that the SpannableStringBuilder class provides a clear
method, but it simply sets the internal data to null rather than
zeroizing the data. If an app developer mistakenly believes this
method to imply secure deletion, the password will still remain
in memory.
Problem #3: Lack of secure getPassword API. Developers
typically obtain the contents of a TextView object by invoking
its getText() method, which returns a CharSequence inter-
face instead of a SpannableStringBuilder object. Since
CharSequence is also the interface of the String class,
developers often treat it as a kind of String, and invoke the
getText().toString() method to turn the password into a
String object. Strings, however, are known to cause security
problems: The ofﬁcial JCA library [45] speciﬁcally suggests
that “Objects of type String are immutable, so there is no
way to overwrite the contents of a String after usage”; it
further suggests that developers should not store passwords in
String objects.
On a related note,
in the Java Swing UI library,
the
equivalent password widget is called JPasswordField, which
also has a getText() method that returns a password in a
String object. However, this feature was deprecated as part
of the Java 1.2 release in 1998, with the suggested replacement
of getPassword(), which returns a character array instead.
Unfortunately, Android lacks such a getPassword API in
its library, so developers might mistakenly use the String
type to store passwords. We will discuss this issue further in
Problem #5.
C. Keyboard (IME) Applications
Next, we analyzed the input channel between TextView
and keyboard apps. We found that the input channel is tightly
coupled with the buffer of TextView; fortunately, it does not
perform additional buffering.
But, what about the keyboard app? Android has a de-
fault keyboard, and it also provides extensions that allow
any developers to build their own keyboards. This feature
is very useful, and has led to a rich ecosystem of third-
party Android keyboard apps, variously innovating in how they
predict words, how they handle gestures, and how they handle
accent characters, non-Latin alphabets, and emoji. Of course,
a keyboard app is also central to the entry of passwords, so
any interaction of the keyboard’s internal features, like saving
prior words for future predictions, must be careful not to save
passwords.
We selected popular keyboards apps, as well as ones that
support special features, such as voice inputs or different
languages. Also, we tested the LatinIME keyboard, which
5
Fig. 2: The dataﬂow of a user password input on Android.
B. The Android Framework
Figure 2 shows the ﬂow of data in Android when a user
types their password. The signals from the touchscreen are
transmitted to a software keyboard app, otherwise known as
an input method editor (IME) app, via the kernel driver.
Then, the keyboard/IME app will send the password to the UI
widget (e.g., TextView) in the application (e.g., Facebook)
via a dedicated input channel. The UI widget also stores
the password internally, so that it can pass the data to the
application upon request. Additionally, the widget sends the
data to a graphics module, so that the input strokes are echoed
back and displayed on the screen as stars (*) by the display
device driver. Any unintended buffering or mistake in any of
the stages would cause password retention. Interestingly, only
5 is managed by developers, whereas all other stages are built
into the Android framework.
After testing all these stages, we were able to narrow down
the culprit to the UI widget and keyboard apps, because all the
password mutants and fragments we captured corresponded
to the versions between 3 and 4 . Subsequently, we further
analyzed the source code of the UI widget, and found that
Android does not implement a dedicated class for password
widgets, but rather simply reuses the TextView class. This
class contains about 12,000 lines of code (LoC); as it is not
designed exclusively with passwords in mind, the TextView
codebase contains many instances of insecure password han-
dling.
For example, there is a ﬂag in the TextView class that
indicates whether it is a regular text ﬁeld or a password ﬁeld,
but this ﬂag only affects whether a character is echoed back as
a * or not, and whether the text can be copied or selected by
a user. All other management of the input uses the same logic
for regular text and sensitive passwords. Since passwords are
not given any particularly special handling, we shouldn’t be
surprised if there are problems. We now describe three issues
in detail.
Problem #1: Lack of secure zeroization. First, the TextView
class does not zeroize or otherwise erase the buffer when an
app is “paused”, “stopped”, or even “destroyed”. Therefore,
when one of these lifecycle activities takes place, the memory
object that holds the text remains intact. This puts the respon-
sibility for secure zeroization solely with the app developers,
who would need to deal both with the application lifecycle
as well as with zeroizing the TextView buffer after login
APPFRAMEWORKHWTouch ScreenScreenKERNELInput Device driverDisplay Device DriverInputManagerServiceSurfaceFlingerServiceKeyboard AppAuthentication AppTextView①②③④⑤⑥⑦Description
Default in AOSP
Default in Android 8
V.
IN-DEPTH ANALYSIS: ANDROID APPS
Next, we analyze several third-party Android apps.
Application
LatinIME
Gboard
SwiftKey
Go
Kika
TouchPal
Cheetah
FaceMoji
Company
Google
Google
SwiftKey
GOMO Apps
Kika AI Team
TouchPal
Cheetah
FaceMoji
New Keyboard
2018 Keyboard
Simeji
Simpliﬁed Chinese
Baidu Voice
TS Korean
Baidu
Linpus
Baidu
Team Space