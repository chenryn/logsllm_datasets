behavior of that code unit), and train ML classiﬁers for
identifying undesirable code.
Blocking approaches that rely solely on JavaScript behavior
or structure are vulnerable to several easy to deploy counter-
measures. Most trivially, these approaches do not consider the
interaction between code units. An attacker can easily avoid
detection by spreading the malicious behavior across multiple
code units, having each code unit execute a small enough
amount of suspicious behavior to avoid being classiﬁed as
malicious, and then using a ﬁnal code unit to combine the
quasi-identiﬁers into a single exﬁltrated value. Examples of
such work includes the approaches given by Wu et al. [64]
and Kaiser et al. [49], both of whom propose ML classiﬁers
that take as input the DOM properties accessed by JavaScript
(among other things) to determined whether a code unit is
tracking related.
Other approaches attempt
to identify tracking-related
JavaScript based on the static features of the code, such
as names of cookie values, or similar sub-sections in the
code. Such approaches are vulnerable to many obfuscation
techniques, including using JavaScript’s dynamic nature to
break identifying strings and labels up across a code base,
using dynamic interpretation facilities in the language (e.g.
eval, new Function) to confuse static detection, or sim-
ply using different parameters for popular JavaScript post-
processing tools (e.g. JSMin [22], Browserify [5], Webpack
[32], RequireJS [27]). Ikram et al. [46] proposed one such
vulnerable technique, by training a ML classiﬁer to identify
static features in JavaScript code labeled by existing ﬁlters
lists as being tracking related, and using the resulting model
to predict whether future JavaScript code is malicious.
Evaluation Issues. Much related work lacks a compre-
hensive and realistic evaluation. Examples include ambigu-
ous or unstated sources of ground truth comparison (e.g.
[36]), unrealistic metrics for what constitutes tracking or non-
tracking JavaScript code (e.g. [46] makes the odd assumption
that JavaScript code that tracks mouse or keyboard behavior
is automatically benign, despite the most popular tracking
libraries including the ability to track such functionality [16]),
or the decision to (implicitly or explicitly) whitelist all ﬁrst-
party resources (e.g. [36], [65], [64], [49], [45]).
More signiﬁcantly, much related work proposes resource
blocking strategies, but without an evaluation of how their
blocking strategy would affect the usability of the web. To
name some examples, [36], [64], [58], [49], [46], [45], and
[37], all propose strategies for automatically blocking web
resources in pages, without determining whether that blocking
would harm or break the user-serving goals of websites ( [65]
is an laudable exception, presenting an indirect measure of
site breakage by way of how often users disabled their tool
when browsing). Work that presents how much bad website
behavior an approach avoids, without also presenting how
much beneﬁcial behavior the approach breaks, is ignoring one
half of the ledger, making it difﬁcult to evaluate each work as
a practical, deployable solution.
C. JavaScript Attribution
We next present existing work on a related problem of
attributing DOM modiﬁcations to responsible JavaScript code
units. JavaScript attribution is a necessary part of the broader
problem of blocking ads and trackers, as its necessary to
trace DOM modiﬁcations and network requests back to their
originating JavaScript code units. Without attribution, it is
difﬁcult-to-impossible to understand which party (or element)
is responsible for which undesired activity.
While there have been several efforts to build systems to
attribute DOM modiﬁcations to JavaScript code units, both in
peer-reviewed literature and in deployed software, all existing
approaches suffer from completeness and correctness issues.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
765
Below we present existing JavaScript attribution approaches
and discuss why they are lacking.
JavaScript Stack Walking. The most common JavaScript
attribution technique is to interpose on the prototype chain of
the methods being observed, throw an exception, and walk
the resulting stack object to determine what code unit called
the modiﬁed (i.e. interposed on) method. This technique is
used, for example, by Privacy Badger [25]. The technique has
the beneﬁt of not requiring any browser modiﬁcations, and of
being able to run “online” (e.g. the attribution information
is available during execution, allowing for runtime policy
decisions).
Unfortunately, stack walking suffers from correctness and
completeness issues. First, there are many cases where calling
code can mask its identity from the stack, making attribution
impossible. Examples include eval’ed code and functions the
JavaScript runtime decides to inline for performance purposes.
Malicious code can be structured to take advantage of these
shortcomings to evade detection [40].
Second, stack walking requires that code be able to modify
the prototype objects in the environment, which further re-
quires that the attributing (stack walking) code run before any
other code on the page. If untrusted code can gain references
to unmodiﬁed data structures (e.g. those not interposed on
by the attributing code), then the untrusted code can again
avoid detection. Browsers do not currently provide any fool-
proof way of allowing trusted code to restrict untrusted code
from accessing unmodiﬁed DOM structures. For example,
untrusted code can gain access to unmodiﬁed DOM structures
by injecting subdocuments and extracting references to from
the subdocument, before the attributing code can run in the
subdocument.
AdTracker.
Recent versions of Chromium include a
JavaScript attribution system called AdTracker [17], which
attributes DOM modiﬁcations made in the Blink rendering
system to JavaScript code execution in V8, the browser’s
JavaScript engine. AdTracker is used by Chromium to detect
when third party code modiﬁes the DOM in a way that
violates Google’s ad policy [57], such as when JavaScript
code creates large overlay elements across the page. The code
allows the browser to determine which code unit on the page
is responsible for the violating changes, instead of holding the
hosting page responsible.
AdTracker achieves correctness but lacks completeness. In
other words,
the cases where AdTracker can correctly do
attribution are well deﬁned, but there are certain scenarios
where AdTracker is not able to maintain attribution. At a high
level, AdTracker can do attribution in macrotasks, but not in
microtasks. Macrotasks are a subset of cases where V8 is
invoked by Blink or when one function invokes another within
V8. Microtasks can be thought of as an inlining optimization
used by V8 to save stack frames, and is used in cases like
callback functions in native JavaScript APIs (e.g. callback
functions to Promises). Effectively, AdTracker trades com-
pleteness for performance,2 which means that a trivial code
transformation can circumvent AdTracker.
JSGraph.
JSGraph [53] is designed for ofﬂine JavaScript
attribution. At a high level, JSGraph instruments locations
where control is exchanged between Blink and V8, noting
which script unit contains the function being called, and
treating all subsequent JavaScript functionality as resulting
from that script unit. At the next point of transfer from Blink
to V8, a new script unit is identiﬁed, and following changes
are attributed to the new script.
JSGraph writes to a log ﬁle, which makes it potentially
useful for certain types of ofﬂine forensic analysis, but not
useful for online content blocking. More signiﬁcantly, JSGraph
suffers from correctness and completeness issues. First, like
AdTracker, JSGraph does not provide attribution for function-
ality optimized into microtasks. Second, JSGraph’s attribution
provides incorrect results (e.g. unable to link eval’ed created
script in a callback to its parent script) in the face of other V8
optimizations, such as deferred parsing, where V8 compiles
different sections of a single script unit at different times.
Third, JSGraph mixes all frames and subframes loaded in a
page together, causing confusion as to which script is making
which changes (the script unit identiﬁer used by JSGraph is
re-used between frames, so different scripts in different frames
can have the same identiﬁer in the same log ﬁle).
III. ADGRAPH DESIGN
In this section we present the design and implementation
of ADGRAPH, an in-browser ML-based approach to block ad
and tracking related content on the web. We ﬁrst describe
a novel graph representation of the execution of a website
that
tracks changes in the HTML structure, behavior and
interaction between JavaScript code, and network requests
of the page over time. This graph representation allows for
tracing the provenance of any DOM change to the responsible
party (e.g. JavaScript code, the parser, a network request).
Second, we discuss the Chromium instrumentation needed
to construct our graph representation. Third, we describe the
features ADGRAPH extracts from our graph representation to
distinguish between ad/tracker and benign resources. Finally,
we explain the supervised ML classiﬁer and how ADGRAPH
enforces its classiﬁcation decisions at runtime. Figure 1 gives
an architectural overview of ADGRAPH.
A. Graph Representation
Webpages are parsed and represented as DOM trees in
modern browsers. The DOM tree captures relationships among
HTML elements (e.g. parent-child, sibling-sibling). In AD-
GRAPH, we enrich this existing tree-representation with ad-
ditional information about the execution and communication
of the page, such as edges to capture JavaScript’s interactions
with HTML elements, or which code unit triggered a given
network request. These edge additions transform the DOM
2These shortcomings are known to the Chromium developers, and are an
intentional tradeoff to maximize performance.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
766
(cid:37)(cid:79)(cid:76)(cid:81)(cid:78)
(cid:57)(cid:27)
(cid:72)
(cid:85)
(cid:88)
(cid:87)
(cid:70)
(cid:88)
(cid:85)
(cid:87)
(cid:54)
(cid:3)
(cid:68)
(cid:87)
(cid:68)
(cid:39)
(cid:3)
(cid:75)
(cid:83)
(cid:68)
(cid:85)
(cid:42)
(cid:43)(cid:55)(cid:48)(cid:47)
(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)
(cid:54)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)
(cid:14)
(cid:50)(cid:83)(cid:72)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:68)(cid:3)(cid:90)(cid:72)(cid:69)(cid:86)(cid:76)(cid:87)(cid:72)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)
(cid:44)(cid:81)(cid:86)(cid:87)(cid:85)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)(cid:72)(cid:71)(cid:3)(cid:38)(cid:75)(cid:85)(cid:82)(cid:80)(cid:76)(cid:88)(cid:80)
(cid:40)(cid:91)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:81)(cid:74)(cid:3)(cid:43)(cid:55)(cid:48)(cid:47)(cid:15)(cid:3)(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:15)(cid:3)
(cid:68)(cid:81)(cid:71)(cid:3)(cid:45)(cid:68)(cid:89)(cid:68)(cid:54)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:3)(cid:79)(cid:68)(cid:92)(cid:72)(cid:85)(cid:86)
(cid:37)(cid:88)(cid:76)(cid:79)(cid:71)(cid:76)(cid:81)(cid:74)(cid:3)(cid:68)(cid:3)(cid:74)(cid:85)(cid:68)(cid:83)(cid:75)(cid:3)(cid:68)(cid:80)(cid:82)(cid:81)(cid:74)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)
(cid:68)(cid:70)(cid:85)(cid:82)(cid:86)(cid:86)(cid:3)(cid:43)(cid:55)(cid:48)(cid:47)(cid:15)(cid:3)(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:15)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)
(cid:45)(cid:68)(cid:89)(cid:68)(cid:54)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:3)(cid:79)(cid:68)(cid:92)(cid:72)(cid:85)(cid:86)(cid:3)
(cid:41)(cid:72)(cid:68)(cid:87)(cid:88)(cid:85)(cid:72)(cid:3)(cid:72)(cid:91)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:73)(cid:85)(cid:82)(cid:80)(cid:3)(cid:74)(cid:85)(cid:68)(cid:83)(cid:75)(cid:3)(cid:14)(cid:3)(cid:79)(cid:68)(cid:69)(cid:72)(cid:79)(cid:76)(cid:81)(cid:74)(cid:3)
(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:73)(cid:76)(cid:79)(cid:87)(cid:72)(cid:85)(cid:3)(cid:79)(cid:76)(cid:86)(cid:87)(cid:86)
(cid:36)(cid:39)
(cid:49)(cid:50)(cid:49)(cid:16)(cid:36)(cid:39)
(cid:38)(cid:79)(cid:68)(cid:86)(cid:86)(cid:76)(cid:73)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)
(cid:87)(cid:85)(cid:68)(cid:76)(cid:81)(cid:72)(cid:71)(cid:3)(cid:80)(cid:82)(cid:71)(cid:72)(cid:79)
Fig. 1: ADGRAPH: Our proposed approach for ad and tracking blocking. We instrument Chromium to extract information from HTML
structure, network, and JavaScript behavior of a webpage execution as a graph representation. We then extract distinguishing structural and
content features from the graph and train a ML model to detect ads and trackers.
tree to a graph. ADGRAPH uses this graph representation to
capture the execution of a webpage.
ADGRAPH’S graph representation of page execution tracks
changes in the website’s HTML structure, network requests,
and JavaScript behavior. The unique graph structure brings
several beneﬁts. First, because the graph contains information
about the cause and content of every network request and
DOM modiﬁcation during the page’s life cycle, the graph
allows for tracing the provenance of any change or behavior
back to either the responsible JavaScript code unit, or, in
the case of initial HTML text, the browser’s HTML parser.
Second,
the graph representation allows for extraction of
context-rich features, which are used by ADGRAPH to iden-
tify advertising and tracking related network requests. For
example, the graph allows for quick determinations of the
source script sending an AJAX request, the position, depth, and
location of an image request, and whether a subdocument was
injected in a page from JavaScript code, among many others.
The contextual
information captured by these features in
ADGRAPH far exceeds what is available to existing blocking
tools, as discussed in Section II.
Next, we explain how ADGRAPH represents information
during a page load as nodes and edges in a graph.
Nodes. ADGRAPH depicts all elements in a website as one
of four types of node: parser, HTML, network, or script.
The parser node is a single, special case node that AD-
GRAPH uses to attribute document changes and network
requests to the HTML parser, instead of script execution. Each
graph contains exactly one parser node.
HTML nodes represent HTML elements in the page, and
map directly onto the kinds of tags and markup that exist
in websites. Examples of HTML nodes include image tags,
anchor tags, and paragraph tags. HTML nodes are annotated
to store information about the tag type and the tags HTML
attributes (e.g. src for image tags, class and id for all tags,
and value for input tags). HTML text nodes are represented
as a special case HTML node, one without a tag type.
Network nodes represent remote resources, and are anno-
tated with the type of resource being requested. Requests for
sub-documents (i.e. iframes), images, XMLHTTPRequest
fetches, and others are captured by network nodes.
Script nodes represent each compiled and executed body of
JavaScript code in the document. In most cases, these can be
thought of as a special type of HTML node, since most scripts
in the page are tied to script tags (whether inline or remotely
fetched). ADGRAPH represents script as its own node type
though to also capture the other sources of script execution in
a page (e.g. javascript: URIs).
Edges. ADGRAPH uses edges to represent the relationship
between any two nodes in the graph. All edges in ADGRAPH
are directed. Depending on the execution of pages, the graph
may contain cycles. All edges in ADGRAPH are of one of
three types, structural, modiﬁcation, and network.
Structural edges describe the relationship between two
HTML elements on a page (e.g. two HTML nodes). Mirroring
the DOM API, edges are inserted to describe parent-child node
relationships, and the order of sibling nodes.
Modiﬁcation edges depict the creation, insertion, removal,
deletion, and attribute modiﬁcation of each HTML node. Each
modiﬁcation edge notes the type of event (e.g. node creation,
node modiﬁcation, etc) and any additional information about
the event (e.g. the attributes that were modiﬁed, their new
values, etc). Each modiﬁcation edge leaves a script or parser
node, and points to the HTML element being modiﬁed.
Network edges depict the browser making a request for a
remote resource (captured in the graph as a network node).
Network edges leave the script or HTML node responsible
for the request being made, and point to the network node
being requested. Network edges are annotated with the URL
being requested.
Composition Examples. These four node types and three
edge types together depict changes to DOM state in a website.
For example, ADGRAPH represents an HTML tag  as an HTML node depicting the
img tag, a network node depicting the image, and a network
edge, leaving the former and pointing to the latter, annotated
with the “/example.png” URL. As another example, a
script modifying the value of a form element would be
represented as a script node depicting the relevant JavaScript
code, an HTML node describing the form element being
modiﬁed, and a modiﬁcation edge describing a modiﬁcation
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
767
event, and the new value for the “value” attribute.
B. Graph Construction
ADGRAPH’s graph representation of page execution re-
quires low level modiﬁcations to the browser’s fetching, pars-
ing, and JavaScript layers. We implement ADGRAPH as a
modiﬁcation to the Chromium web browser.3 The Chromium
browser consists of many sub-projects, or modules. The
Blink [6] module is responsible for performing network re-
quests, parsing HTML, responding to most kinds of user
events, and rendering pages. The V8 [7] module is responsible
for parsing and executing JavaScript. Next, we provide a high
level overview of the types and scope of our modiﬁcations in
Chromium for constructing ADGRAPH’s graph representation.
Blink Instrumentation. We instrument Blink to capture
anytime a network request is about to be sent, anytime a new
HTML node is being created, deleted or otherwise modiﬁed
(and noting whether the change was due to the parser or
JavaScript execution), and anytime control was about to be
passed to V8. We further modify each page’s execution envi-