jor browsers adopt our proposal. Nevertheless, web sites
that want to use ﬁner-grained isolation but are not yet
able to do so (e.g., https://www.facebook.com/user1 and
https://www.facebook.com/user2 may want to be treated
as diﬀerent principals) may happily embrace the new head-
ers and be safer on ServiceOS-capable systems.
5. ENFORCING PRINCIPAL
DEFINITIONS
Central to enforcing our content-based principal deﬁni-
tions is how remote content is fetched from the network and
to which principal instance (and isolation container) the re-
turned content should be dispatched. Note that this enforce-
ment mechanism is needed in addition to having a robust
isolation container. In this section, we describe this fetch-
ing and dispatching logic and how it ensures that principal
deﬁnitions are obeyed.
The dispatch decision is trivial when a Principal Instance
(PI) of a requester principal fetches a remote resource of
the same principal. We simply dispatch the returned re-
source to the requester PI. Determining whether a remote
resource belongs to the same principal as the requester is
done through the IsSamePrincipal check in Algorithm 1 if
the resource’s principal deﬁnition is based on a trust list,
through public key stack comparision if an owner-ID-based
principal deﬁnition is used, or through origin stack com-
parison if neither trust lists nor owner-based deﬁnitions are
provided (Section 4).
More care is needed for cross-principal content fetch,
namely, when the requester fetches content from the server
of a diﬀerent principal. Such a request can happen for two
reasons: (1) Data communication: the requester wants some
data from the responder server and the returned data should
be dispatched to the requester principal instance; or (2)
Spawning a new principal: the requester wants to spawn a
new instance of the responder principal, for example if a user
clicked on a hyperlink to open a new document, or a docu-
ment of the requester principal embeds a resource from the
responder principal; in this case, the returned data should be
dispatched to the responder principal instance rather than
that of the requester.
Because the requester can be malicious, we must ensure
that our content fetch and dispatch logic can properly pro-
tect and isolate the responder principal from an attacking
requester even in the face of arbitrary system API (ab)use.
The key idea in our design is to use a dispatch bit in either
the request or the response to diﬀerentiate the two cross-
principal content fetching scenarios.
There are two design choices of specifying this bit, illus-
trated in Figure 5. First, ServiceOS can specify the bit in the
outgoing request to the responder server to convey whether
the returned data will be dispatched to the requester PI or a
(new) responder PI. Then, the server makes an access con-
trol decision for the request, and ServiceOS forwards the
response to the requester PI. Second, the responder server
(with knowledge of requester’s label) can specify the bit in its
response to ServiceOS to indicate whether the data is autho-
rized to be dispatched to the requester PI or to a responder
PI. Then, ServiceOS enforces the bit and either dispatches
or discards the returned data. In both design choices, the
request needs to contain the principal label of the requester,
which we include using the HTTP Origin header [4].
Both designs can support legacy servers as follows. If the
bit lives in the response, its absence tells ServiceOS that this
is a legacy server. If the bit lives in the request, then the
response needs to declare that the bit was understood; the
absence of that declaration tells ServiceOS this is a legacy
server. For legacy servers, ServiceOS will deliver the data
to the responder PI to be compatible with browsers’ same-
origin policy.
The advantage of putting the bit in the request is that
it lets the server optimize away a response that is destined
to be dropped and return an error instead. The advan-
alice.com/tax.doc Fetch  bank.com/tax.macro bank.com         HTTP request for bank.com/tax.macro:   Origin: alice.com/tax.doc   Dispatch-bit: data-communication yes no HTTP Response with tax.macro data   Dispatch-bit-understood: true    HTTP Error Requester PI ServiceOS Responder server HTTP Response with tax.macro data   Dispatch-bit: data-communication    HTTP Response with tax.macro data   Dispatch-bit: spawn-new-principal    Error  (destination is alice.com and not bank.com) tax.macro data Error (a) Requester specifies dispatch bit alice.com/tax.doc Fetch  bank.com/tax.macro bank.com         HTTP request for bank.com/tax.macro:   Origin: alice.com/tax.doc yes Requester PI ServiceOS Responder server tax.macro data Check if destination PI is bank.com Can alice.com spawn a new bank.com PI with tax.macro? no yes no HTTP Error Error (b) Responder specifies dispatch bit Can alice.com access tax.macro? Can alice.com access tax.macro? 1172ServiceOS API
CreatePI(URL, postData)
Fetch(URL, postData)
Embed(URL, windowSpec, postData)
Examples of desktop application
functions (e.g., for Word)
Open remote Word ﬁle
Retrieve required resources for a doc-
ument, such as templates, macros, or
images
Embed remote images, spreadsheets,
or videos
Examples of browser functions
Enter URL into address bar, navigate to a link
Same-origin , , , orig-
inal XMLHTTPRequest
Cross-origin , , ,
Table 1: Core ServiceOS APIs
tage of putting the bit in the response is that it can be
statically conﬁgured for each URL, rather than having the
server perform access control checks for each request. There-
fore, we advocate supporting the bit in both requests and
responses to allow responder servers to get both advantages
if desired: a diligent server can perform access control on
each request and reduce network overhead (and indicate the
server’s knowledge of the dispatch bit in the request), and a
lazy server can just statically conﬁgure its URLs when pos-
sible. When the dispatch bit from the response diﬀers from
that of request, the response’s dispatch bit takes precedence.
Because HTTP has become the narrow waist of all com-
munications [37], ServiceOS exposes system APIs for HTTP-
based content fetch, and we indicate the dispatch bit with
HTTP headers (Section 6). For application-level protocols
other than HTTP, it is impossible (and undesirable) for Ser-
viceOS to know their semantics and parse out their respec-
tive dispatch bits (even if they implement them). So, in the
absence of dispatch bits, our system resorts to the default
of returning the data to a responder PI only. With this
default, applications that use peer-to-peer communication
require modiﬁcations to run on ServiceOS. They must rely
on explicit client-side cross-principal IPC to achieve peer-
to-peer data transfer. For example, if a requester wants
to retrieve data from the server of a responder principal
with a non-HTTP P2P protocol, then the requester can
ﬁrst launch the responder’s client-side PI through our system
API CreatePI(responderClientCodeURL); the new respon-
der PI then retrieves the data and then passes it on to the
requester PI.
Backward compatibility with existing web sites.
To maintain web compatibility, ServiceOS supports MIME-
type-based content dispatch as in Gazelle [49], translating
MIME types in responses into dispatch bits in responses.
We also support cookies and cross-site client-server commu-
nication primitives XMLHttpRequest Level 2 [52] and XDo-
mainRequest [28], along with the associated CORS consent
protocol [46]. Despite the availability of cookies, we strongly
advocate native applications not to use the cookie mecha-
nism, but to explicitly include their state (such as user pref-
erences and authentication state) in their data requests to
reduce the chance of cross-site request forgery (CSRF) at-
tacks [5].
6.
IMPLEMENTATION
We have implemented a prototype of ServiceOS on Win-
dows 7 as a reference monitor between the OS and appli-
cations. Our implementation is in C# using .NET 3.5 and
has two major components: the ServiceOS monitor and the
system shell.
The monitor consists of 9.4k lines of code. It communi-
cates with principal instances using ServiceOS system calls
and upcalls, which are implemented as asynchronous XML-
based messages sent over named pipes. The monitor creates
a unique named pipe for each principal instance to issue
system calls and receive upcalls.
The system shell consists of 3.6k lines of code. It provides
a tab-based UI for users to enter URLs to visit web sites,
view content rendered by native applications, or open stan-
dalone applications. The UI passes a newly typed URL to
the monitor, which fetches the content, picks a content pro-
cessor, and admits this content processing stack into the
right isolation container, following the semantics of Sec-
tions 4 and 5.
Isolation mechanisms. We adopted Drawbridge [38]
as our main sandboxing mechanism. Drawbridge can run
unmodiﬁed Windows applications in a highly isolated mode
by refactoring Windows into a library OS and virtualizing
all high-level OS components, such as windowing libraries,
ﬁles, or registry. Drawbridge exposes a very narrow base
API for allocating virtual memory, threading, synchroniza-
tion, and generic stream-based I/O (e.g., to access ﬁles that
are part of an application). To protect our security policy,
ServiceOS instructs Drawbridge to restrict I/O calls to only
allow access to ﬁles that are part of the current principal’s
private storage, and to disallow pipe access other than to
communicate with the ServiceOS monitor.
With Drawbridge, we are theoretically able to support
all user-space-only Windows applications on our system,
though in practice, Drawbridge is not yet mature enough
to support certain application features (such as DLLs nec-
essary to run macros in Oﬃce documents).
Note that our system design is independent of speciﬁc iso-
lation mechanisms like Drawbridge. As proof, we added sup-
port for another sandboxing mechanism, which associates
each principal with a separate, restricted user account, and
runs applications in processes using these restricted UIDs.
This allows greater application compatibility than is cur-
rently possible with Drawbridge, but it is not as secure: it
has a much wider API surface, and UIDs alone do not form
a security boundary in Windows (e.g., one could execute
shatter attacks [43] based on window messages across UID
boundaries).
To complete the system, our monitor augments APIs ex-
posed by our isolation containers with a few higher-level
APIs, which we discuss next.
Core ServiceOS system calls. There are three core
system calls that we support: Fetch, CreatePI, and Embed.
Table 1 shows examples of how applications may utilize these
APIs. Fetch is used for data communications, and we imple-
mented both synchronous and asynchronous versions. The
other two calls are for creating new principal instances: Cre-
atePI(newUrl) launches a new PI with a standalone UI (in a
new tab), and Embed(newUrl, ) launches a
new PI and embeds its UI window into the caller’s UI. For all
three calls, ServiceOS makes HTTP requests using .NET’s
1173built-in WebRequest classes. ServiceOS uses custom imple-
mentations of a cookie database and authentication man-
ager. We implemented support for both Owner and Trust
headers (Section 4), as well as Algorithm 1 for admitting
resources to isolation containers.
For principal deﬁnition enforcement, we have imple-
mented the design choice of having the dispatch bit in the
HTTP response since this is the case where ServiceOS has
to do additional enforcement work. We added a new di-
rective name “dispatch-to” in the existing CSP [11] HTTP
header with two possible values, ’requester’ or ’responder’.
If a server wants the returned data to be dispatched to a re-
sponder PI, then it speciﬁes in its response header: Content-
Security-Policy: dispatch-to ’responder’. The Ser-
viceOS monitor checks for the directive in the HTTP re-
sponse for each HTTP response and performs dispatching
accordingly.
Display management. Our monitor controls window
positioning, dimensions, transparency, and overlaying poli-
cies but is independent to the UI primitives available on the
host OS. It communicates display policies to the UI, which
implements application windows using .NET Forms. Sand-
boxed Drawbridge applications run an internal RDP [31]
server to expose visual output and forward user input. Our
UI implements ActiveX RDP clients, which the ServiceOS
monitor connects to the corresponding applications’ RDP
servers. When running with no isolation or with UID-based
isolation, ServiceOS relies on the Windows SetParent API
call to attach applications’ UI into our shell UI and to im-
plement Embed().
Packaging content processors. Content processors
and standalone applications are packaged and delivered as
an archive ﬁle with extension .app, which our monitor de-
compresses and executes as a new isolated process. These
packages carry a manifest ﬁle containing information like
the content processor’s unique ID, main executable to run,
or handled content types. Web servers may allow content
processors to be cached using standard HTTP headers; we
rely on this as a rudimentary update mechanism and leave
more elaborate, ﬁner-grained schemes (such as [9]) as future
work.
6.1 Adapting native applications
To run on ServiceOS, an application must connect to the
ServiceOS monitor, register its display output with Ser-
viceOS’s UI, and use ServiceOS calls for fetching and dis-
patching content.
Some of these requirements can be handled transparently
to applications. In particular, we provide a wrapper program
to connect a given application to the ServiceOS monitor over
a named pipe and to register its main window’s visual out-
put. As well, we observe that many Windows applications
use the WinInet [32] library for HTTP communication. To
ease porting for such applications, we used public WinInet
API documentation [32] to implement an alternate version
of wininet.dll, which remaps its HTTP calls to invoke Ser-
viceOS’s Fetch() call. We then force our applications to use
this DLL. We similarly remap the Windows socket library,
ws2_32.dll, onto a raw socket API provided by ServiceOS
to support non-HTTP transport. Applications that do not
use these libraries for communication will require porting to
use our APIs, but we expect this to be rare: we examined
50 popular Windows applications, and found that all except
Firefox used WinInet for HTTP communication.
This wrapping is enough to run applications that do not
fetch remote content or fetch remote content that does not
need protection. As examples, we have packaged Calcu-
lator and Solitaire to run on ServiceOS. These applica-
tions can be executed simply by browsing to a URL like
http://games.com/solitaire.app in ServiceOS’s UI.
Unlike display setup and content fetch, we cannot auto-
matically infer when to use the CreatePI() and Embed()
calls to render remote content. This functionality is closely
tied to application semantics and requires applications to be
modiﬁed to use them. To facilitate this eﬀort, we created
a library called LibServiceOS which, similarly to libc, han-
dles all communication details between an application and
ServiceOS. It exposes ServiceOS system calls and provides
an upcall interface for applications to implement. We im-
plemented both a C++ version of LibServiceOS for native
applications and a type-safe, C# version for .NET appli-
cations. In Section 7.1, we evaluate the ease of ServiceOS
adaptation for several large real-world applications.
7. EVALUATION
To evaluate ServiceOS, this section answers and discusses
four main questions: (1) how easy is it to adapt native ap-
plications to run on ServiceOS, (2) by how much does min-
imizing impact of malicious content improve security of the
system, (3) can ServiceOS stop real exploits, and (4) is our
prototype’s performance acceptable?
7.1 Ease of adapting native applications
Recall from Section 6.1 that we need to manually adapt
only applications that need to spawn a new principal with
CreatePI() (e.g., to support users clicking on a URL) or
Embed() (e.g., to support embedding a video clip belonging
to a diﬀerent principal).
In this section, we describe our
adapation experience for several large, real-world Windows
applications. Overall, we ﬁnd the adaptation eﬀort to be
moderate.
7.1.1 Microsoft Word and Excel 2010
Microsoft Word is increasingly used to obtain, read, and
edit remote documents. We had two goals in adapting Word:
(1) isolate documents according to their content owners, and