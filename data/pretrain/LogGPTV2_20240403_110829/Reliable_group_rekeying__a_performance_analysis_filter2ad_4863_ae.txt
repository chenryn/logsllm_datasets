partition users into several groups to reduce group size.
In the remainder of this section, we ﬁrst discuss a simple mem-
bership model. Then we discuss system performance metrics and
the tradeoffs between bandwidth requirements and rekey interval
T . Finally, we discuss several system constraints and an algorithm
to determine rekey interval T as well as the number of users N that
a single key server can support.
4.1 Membership dynamics
To quantify the numbers of joins and leaves arriving in a rekey
interval T , we need to specify the arrival rates of joins and leaves.
These arrival rates, which we call membership dynamics, depend
on application and user behaviors. The only investigation about
membership dynamics that we are aware of was by Almeroth and
Ammar [1]. They showed that user join and leave behaviors in an
audio multicast session follow exponential distributions.
rekey interval T
r joins the group
r leaves the group
rekey
t
excess life
δ
t
rekey
t + T
Figure 21: Illustration of excess life δt
To model the number of leave requests in a rekey interval T for
a group with N users, we specify the distribution of the time each
user spends in the group. Let F (y) denote the cumulative distribu-
tion function of the time a user stays in the group. Let δt denote
the remaining time a user will stay in the group, given that it is in
the group at time t, which is the start time of a rekey interval. We
call δt the excess life of a user at time t. Figure 21 illustrates the
concept of excess life. Let m denote the mean value of the time
that a user stays in the group. When the system is in steady state,
from renewal theory, we have
pL(T ) = P r{δt ≤ T} =
1
m Z T
0
(1 − F (y))dy
where pL(T ) is the probability that a user will leave the group be-
fore the end of the rekey interval. Therefore, for a group with N
users, the expected number of leave requests L(N, T ) in a time pe-
riod T will be L(T, N ) = N · pL(T ). Here, we write L(T, N ) to
indicate that the number of leaves will be a function of both T and
N. In particular, we assume the amount of time that each receiver
spends in a group is exponentially distributed with mean value of
m. Denoting λL = 1/m, we have L(T, N ) = N (1 − e−λLT ).
To model the number of join requests in a rekey interval T , we
can assume user’s arrivals are Poisson with a rate of λJ. Therefore,
our overall membership dynamics can be modeled as an M/G/∞
system. For evaluation purpose, we assume that the group is in
steady state, that is, J = L.
4.2 System metrics and tradeoffs
The two types of entities that participate in a group key manage-
ment system are the key server and receivers. Accordingly, the four
potential bottleneck resources are the CPU processing demand on
the key server or a receiver and the bandwidth requirement of the
key server or a receiver. Since CPU power keeps increasing, and
our evaluations show that in most cases CPU demands are not the
limiting factors, we concentrate our efforts on the bandwidth re-
quirements. To determine the rekey interval, another performance
metric we consider is rekey transport latency since it gives a lower
bound on the rekey interval.
We formally specify the following performance metrics:
• Key server outgoing bandwidth Bks(N, T ). Let Sks(N, T )
denote the total bytes that a key server multicasts to the N
users in order to reliably transmit a rekey message. Since J
and L are functions of N and T , we rewrite Enc(N, J, L)
as Enc(N, T ). Let Bp, BF EC, and Bu denote the packet
size of an original rekey packet, an FEC packet, and a re-
synchronization packet, respectively. Let M denote the num-
ber of encrypted keys per packet, and let OD denote packet
duplication overhead of a key assignment algorithm (i.e. the
number of packets generated by a key assignment algorithm
divided by the number of packets generated by a key assign-
ment algorithm without duplicate assignment). Let E[Ob]
denote the mean value of multicast bandwidth overhead as
we deﬁned in Section 3.3. Let E[U ] denote the mean num-
ber of re-synchronization packets that the key server needs to
transmit. We have
Sks(N, T ) + Bu · E[U ]
Bks(N, T ) =
where
T
M
Sks(N, T ) = OD · (cid:10) Enc(N, T )
(cid:11)
·(Bp + (E[Ob] − 1)BF EC)
• Receiver incoming bandwidth Br(N, T ). Let Sr(N, T ) de-
note the total bytes that a receiver receives from multicast.
Let pr denote the packet loss rate of receiver r. We know
that Sr(N, T ) = Sks(N, T )(1 − pr). Assuming the prob-
ability that a receiver needs re-synchronization is small, we
have
Sr(N, T )
T
Br(N, T ) =
(5)
• Rekey transport delay D(N, T ). Let R(N, T ) denote the
number of rounds for the key server to transmit a rekey mes-
sage to the N users. Let DR denote the largest round trip
time from the key server to receivers. We have
D(N, T ) = R(N, T ) · DR
(6)
Our ﬁrst observation is that Bks(N, T ), Br(N, T ), and D(N, T )
are all increasing functions of N, that is, bandwidth requirements
and rekey latency increase as we increase group size. We also ob-
serve that pr is generally not very high; therefore, Bks(N, T ) and
Br(N, T ) are close to each other. Since a key server is likely to
have much larger bandwidth than receivers, we plot overall band-
width requirement for Br(N, T ) only.
Figure 22 plots Br(N, T ) as functions of N and T . The upper
ﬁgure assumes that each receiver stays in the group for 3 minutes,
and the lower ﬁgure assumes that each receiver stays in the group
for 1 hour. We observe from both ﬁgures that Br(N, T ) is a de-
creasing function of T . We also observe clearly from these curves
the tradeoffs between bandwidth requirements and access control
effectiveness. To determine a suitable rekey interval, a balance be-
tween performance requirements and access control effectiveness
has to be achieved.
100
)
s
p
b
k
(
h
t
d
w
d
n
a
b
i
10
1
0.1
0
100
)
s
p
b
k
(
h
t
d
w
d
n
a
b
i
10
1
0.1
0
mean_time=180 sec, packet_size=25*20+57, #enc/packet=25, J=L
N=512
N=1024
N=2048
N=4096
20
40
60
80
100
120
140
160
180
rekey interval (seconds)
mean_time=3600 sec, packet_size=25*20+57, #enc/packet=25, J=L
N=512
N=1024
N=2048
N=4096
20
40
60
80
100
120
140
160
180
rekey interval (seconds)
Figure 22: Bandwidth requirement vs. rekey interval
(4)
4.3 System constraints and algorithm
To decide the rekey interval and the maximum number of users
a key server can support, we identify the following four potential
system constraints.
1. Bks(N, T ) ≤ Bmax
ks
. Here Bmax
is a system speciﬁed
bandwidth limit for the key server. For example, Bmax
can
be 10% of the key server’s outgoing bandwidth. This con-
straint speciﬁes a lower bound on T .
ks
ks
2. Br(N, T ) ≤ Bmax
r
. Similar to Bmax
ks
, Bmax
r
is a receiver
bandwidth limit. This constraint speciﬁes another lower bound
on T .
3. D(N, T ) ≤ T . This is to ensure that a rekey transport can
ﬁnish before the start of the next rekey interval. We notice
that with this constraint, the number of receivers sending re-
synchronization requests can be greatly reduced. Therefore,
this constraint speciﬁes the third lower bound on T .
4. T ≤ Tmax. Tmax is a constant determined either by busi-
ness model or by application security requirements, and it
speciﬁes an upper bound on T . For example, one possible
speciﬁcation can be that the number of departed users that
still have the group key is less than 5% of the total users. For
our membership model, it means that 1 − e−λLT ≤ 0.05;
therefore, we can set Tmax to be −ln(0.95)/λL to satisfy
this constraint.
Given the above constraints, we choose T = Tmax to minimize
bandwidth requirement, if the three lower bounds are smaller than
Tmax. However, it is possible that no rekey interval can satisfy all
four constraints. In that case, we need to determine the maximum
group size that one key server can support, and partition users into
smaller groups. An algorithm to determine the maximum group
size one key server can support is shown in Figure 23. For how to
partition users into smaller groups according to their behaviors and
two architectures to extend a centralized key server to distributed
key servers, one of which is based on Kronos [17], please see [25].
N1 = max{n | Bks(n, Tmax) ≤ Bmax
}
}
N2 = max{n | Br(n, Tmax) ≤ Bmax
N3 = max{n | D(n, Tmax) ≤ Tmax}
N = min{N1, N2, N3}
ks
ks
Figure 23: Algorithm to determine N
5. CONCLUSION
In this paper, we have investigated the scalability issues of reli-
able group rekeying, and provided a performance analysis of keygem.
Instead of rekeying after each join or leave, we use periodic batch
rekeying to improve scalability and alleviate out-of-sync problems.
Our analyses show that batch rekeying can achieve large perfor-
mance gains. As for rekey transport, our investigations show that
rekey transport has an eventual reliability and a soft real-time re-
quirement, and that the rekey workload has the sparseness property.
We then present a reliable rekey transport protocol based upon the
use of proactive FEC. We show that reliable rekey transport in our
design can be analyzed by converting it to conventional reliable
multicast. We have also showed the tradeoffs between bandwidth
requirements and rekey interval. Considering four system con-
straints, we provide some guidelines for choosing an appropriate
rekey interval and determining the maximum number of users a key
server can support. Our future work includes investigations of dy-
namic partitioning of group users, more detailed trace based exper-
imental evaluations, and investigations of FEC encoding schemes
that work better for a workload with the sparseness property. The
investigation of FEC encoding schemes for sparseness workload is
especially interesting because it can also apply to other applications
such as stock quote delivery.
6. ACKNOWLEDGMENTS
We thank Ellen Zegura for her constructive comments in shep-
herding the ﬁnal revision of this paper. We also thank Min S. Kim,
Dong-Young Lee, Yanbin Liu, and Peiyu Wang for their assistance.
7. REFERENCES
[1] K. Almeroth and M. Ammar. Collection and modeling of the
join/leave behavior of multicast group members in the
mbone. In Proceedings of High Performance Distributed
Computing Focus Workshop (HPDC ’96), Syracuse, New
York, USA, August 1996. link:
http://imj.ucsb.edu/publications.html.
[2] D. Balenson, D. McGrew, and A. Sherman. Key Management
for Large Dynamic Groups: One-way Function Trees and
Amortized Initialization, INTERNET-DRAFT, 1999.
[3] J. W. Byers, M. Luby, M. Mitzenmacher, , and A. Rege. A
digital fountain approach to reliable distribution of bulk data.
In Proceedings of ACM SIGCOMM ’98, Vancouver, B.C.,
Sept. 1998.
[4] I. Chang, R. Engel, D. Kandlur, D. Pendarakis, and D. Saha.
Key management for secure Internet multicast using boolean
function minimization techniques. In Proceedings of IEEE
INFOCOM ’99, volume 2, Mar. 1999.
[5] H. Harney and E. Harder. Logical Key Hierarchy Protocol,
INTERNET-DRAFT, Mar. 1999.
[6] I. R. T. F. (IRTF). Reliable Multicast Research Group.
http://www.nard.net/ tmont/rm-links.html.
[7] I. R. T. F. (IRTF). The secure multicast research group
(SMuG). http://www.ipmulticast.com/community/smug/.
[8] S. K. Kasera, J. Kurose, and D. Towsley. A comparison of
server-based and receiver-based local recovery approaches
for scalable reliable multicast. In Proceedings of IEEE
INFOCOM ’98, San Francisco, CA, Mar. 1998.
[9] R. Kermode. Scoped hybrid automatic repeat request with
forward error correction (SHARQFEC). In Proceedings of
ACM SIGCOMM ’98, Sept. 1998.
[10] B. Levine and J. Garcia-Luna-Aceves. A comparison of
known classes of reliable multicast protocols. In Proceedings
of IEEE ICNP ’96, Columbus, OH, Oct. 1996.
[11] X. S. Li, Y. R. Yang, M. G. Gouda, and S. S. Lam. Batch
rekeying for secure group communications. In Proceedings
of Tenth International World Wide Web Conference
(WWW10), Hong Kong, China, May 2001.
[12] M. J. Moyer, J. R. Rao, and P. Rohatgi. Maintaining
Balanced Key Trees for Secure Multicast,
INTERNET-DRAFT, June 1999.
[13] J. Nonnenmacher, E. Biersack, and D. Towsley. Parity-based
loss recovery for reliable multicast transmission. In
Proceedings of ACM SIGCOMM ’97, Sept. 1997.
[14] J. Nonnenmacher, M. Lacher, M. Jung, E. Biersack, and
G. Carle. How bad is reliable multicast without local
recovery? In Proceedings of IEEE INFOCOM ’98, San
Francisco, CA, Mar. 1998.
[15] L. Rizzo. Effective erasure codes for reliable computer
communication protocols. Computer Communication
Review, Apr. 1997.
[16] D. Rubenstein, J. Kurose, and D. Towsley. Real-time reliable
multicast using proactive forward error correction. In
Proceedings of NOSSDAV ’98, July 1998.
[17] S. Setia, S. Koussih, S. Jajodia, and E. Harder. Kronos: A
scalable group re-keying approach for secure multicast. In
Proceedings of IEEE Symposium on Security and Privacy,
Berkeley, CA, May 2000.
[18] J. Snoeyink, S. Suri, and G. Varghese. A lower bound for
multicast key distribution. In Proceedings of IEEE
INFOCOM 2001, Anchorage, Alaska, Apr. 2001.
[19] D. Towsley, J. Kurose, and S. Pingali. A comparison of
sender-initiated reliable multicast and receiver-initiated
reliable multicast protocols. IEEE Journal on Selected Areas
in Communications, 15(3):398–406, 1997.
[20] D. Wallner, E. Harder, and R. Agee. Key Management for
Multicast: Issues and Architectures, INTERNET-DRAFT,
Sept. 1998.
[21] C. K. Wong, M. G. Gouda, and S. S. Lam. Secure group
communications using key graphs. In Proceedings of ACM
SIGCOMM ’98, Sept. 1998.
[22] C. K. Wong and S. S. Lam. Digital signatures for ﬂows and
multicasts. IEEE/ACM Transactions on Networking, Aug.
1999.
[23] C. K. Wong and S. S. Lam. Keystone: a group key
management system. In Proceedings of ICT 2000, Acapulco,
Mexico, May 2000.
[24] Y. R. Yang. A secure group key management communication
lower bound. Technical Report TR–00–24, The University of
Texas at Austin, July, Revised September 2000.
[25] Y. R. Yang, X. S. Li, X. B. Zhang, and S. S. Lam. Reliable
group rekeying: A performance analysis. Technical Report
TR–01–21, The University of Texas at Austin, June 2001.
[26] X. B. Zhang, S. S. Lam, D.-Y. Lee, and Y. R. Yang. Protocol
design for scalable and reliable group rekeying. In
Proceedings of SPIE Conference on Scalability and Trafﬁc
Control in IP Networks, Denver, CO, Aug. 2001.