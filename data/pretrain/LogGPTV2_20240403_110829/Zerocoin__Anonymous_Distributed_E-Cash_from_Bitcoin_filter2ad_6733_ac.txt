A proof of Theorem 4.1 is included in Appendix A.
Brieﬂy, this proof relies on the binding properties of the coin
commitment, as well as the soundness and unforgeability
of the ZKSoK and collision-resistance of the accumulator.
We show that an adversary who wins the Balance game
with non-negligible advantage can be used to either ﬁnd a
collision in the commitment scheme (allowing us to solve
the Discrete Logarithm problem) or ﬁnd a collision in the
accumulator (which leads to a solution for Strong RSA).
V. INTEGRATING WITH BITCOIN
While the construction of the previous section gives an
overview of our approach, we have yet to describe how our
techniques integrate with Bitcoin. In this section we address
the speciﬁc challenges that come up when we combine a
decentralized e-cash scheme with the Bitcoin protocol.
The general overview of our approach is straightfor-
ward. To mint a zerocoin c of denomination d, Alice runs
Mint(params) → (c, skc) and stores skc securely.13 She
then embeds c in the output of a Bitcoin transaction that
spends d + fees classical bitcoins. Once a mint transaction
has been accepted into the block chain, c is included in the
13In our implementation all bitcoins have a single ﬁxed value. However,
we can support multiple values by running distinct Zerocoin instantiations
simultaneously, all sharing the same set of public parameters.
402
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
global accumulator A, and the currency cannot be accessed
except through a Zerocoin spend, i.e., it is essentially placed
into escrow.
To spend c with Bob, Alice ﬁrst constructs a partial
transaction ptx that references an unclaimed mint transaction
as input and includes Bob’s public key as output. She
then traverses all valid mint
transactions in the block
chain, assembles the set of minted coins C, and runs
Spend(params, c, skc, hash(ptx), C) → (π, S). Finally,
she completes the transaction by embedding (π, S) in the
scriptSig of the input of ptx. The output of this transaction
could also be a further Zerocoin mint transaction — a
feature that may be useful to transfer value between multiple
Zerocoin instances (i.e., of different denomination) running
in the same block chain.
When this transaction appears on the network, nodes check
that Verify(params, π, S, hash(ptx), C) = 1 and check that
S does not appear in any previous transaction. If these
condition hold and the referenced mint transaction is not
claimed as an input into a different transaction, the network
accepts the spend as valid and allows Alice to redeem d
bitcoins.
Computing the accumulator. A naive implementation of
the construction in Section IV requires that the veriﬁer re-
compute the accumulator A with each call to Verify(. . .). In
practice, the cost can be substantially reduced.
First, recall that the accumulator in our construction can
be computed incrementally, hence nodes can add new coins
to the accumulation when they arrive. To exploit this, we
require any node mining a new block to add the zerocoins in
that block to the previous block’s accumulator and store the
resulting new accumulator value in the coinbase transaction
at the start of the new block.14 We call this an accumulator
checkpoint. Peer nodes validate this computation before
accepting the new block into the blockchain. Provided that
this veriﬁcation occurs routinely when blocks are added to
the chain, some clients may choose to trust the accumulator
in older (conﬁrmed) blocks rather than re-compute it from
scratch.
With this optimization, Alice need no longer compute the
accumulator A and the full witness w for c. Instead she can
merely reference the current block’s accumulator checkpoint
and compute the witness starting from the checkpoint
preceding her mint (instead of starting at T0), since computing
the witness is equivalent to accumulating C \ {c}.
New transaction types. Bitcoin transactions use a ﬂexible
scripting language to determine the validity of each transac-
tion. Unfortunately, Bitcoin script is (by design) not Turing-
complete. Moreover, large segments of the already-limited
script functionality have been disabled in the Bitcoin produc-
tion network due to security concerns. Hence, the existing
script language cannot be used for sophisticated calculations
such as verifying zero-knowledge proofs. Fortunately for
our purposes, the Bitcoin designers chose to reserve several
script operations for future expansion.
We extend Bitcoin by adding a new instruction: ZERO-
COIN MINT. Minting a zerocoin constructs a transaction
with an output whose scriptPubKey contains this instruction
and a coin c. Nodes who receive this transaction should
validate that c is a well-formed coin. To spend a zerocoin,
Alice constructs a new transaction that claims as input
some Zerocoin mint transaction and has a scriptSig ﬁeld
containing (π, S) and a reference to the block containing the
accumulator used in π. A veriﬁer extracts the accumulator
from the referenced block and, using it, validates the spend
as described earlier.
Finally, we note that transactions must be signed to prevent
an attacker from simply changing who the transaction is
payed to. Normal Bitcoin transactions include an ECDSA
signature by the key speciﬁed in the scriptPubKey of the
referenced input. However, for a spend transaction on an
arbitrary zerocoin, there is no ECDSA public key. Instead, we
use the ZKSoK π to sign the transaction hash that normally
would be signed using ECDSA.15
Statekeeping and side effects. Validating a zerocoin changes
Bitcoin’s semantics: currently, Bitcoin’s persistent state
is deﬁned solely in terms of transactions and blocks of
transactions. Furthermore, access to this state is done via
explicit reference by hash. Zerocoin, on the other hand,
because of its strong anonymity requirement, deals with
existentials: the coin is in the set of thus-far-minted coins
and its serial number is not yet in the set of spent serial
numbers. To enable these type of qualiﬁers, we introduce
side effects into Bitcoin transaction handling. Processing a
mint transaction causes a coin to be accumulated as a side
effect. Processing a spend transaction causes the coin serial
number to be added to a list of spent serial numbers held by
the client.
For coin serial numbers, we have little choice but to keep
a full list of them per client and incur the (small) overhead
of storing that list and the larger engineering overhead of
handling all possible ways a transaction can enter a client.
The accumulator state is maintained within the accumulator
checkpoints, which the client veriﬁes for each received block.
Proof optimizations. For reasonable parameter sizes, the
proofs produced by Spend(. . .) exceed Bitcoin’s 10KB
transaction size limits. Although we can simply increase this
limit, doing so has two drawbacks: (1) it drastically increases
the storage requirements for Bitcoin since current transactions
14The coinbase transaction format already allows for the inclusion of
arbitrary data, so this requires no fundamental changes to the Bitcoin
protocol.
15In practice, this modiﬁcation simply requires us to include the transaction
digest in the hash computation of the challenge for the Fiat-Shamir proofs.
See Appendix A for details.
403
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
are between 1 and 2 KB and (2) it may increase memory
pressure on clients that store transactions in memory.16
In our prototype implementation we store our proofs in
a separate, well-known location (a simple server). A full
implementation could use a Distributed Hash Table or non
block-chain backed storage in Bitcoin. While we recommend
storing proofs in the block chain, these alternatives do not
increase the storage required for the block chain.17
A. Suggestions for Optimizing Proof Veriﬁcation
The complexity of the proofs will also lead to longer
veriﬁcation times than expected with a standard Bitcoin
transaction. This is magniﬁed by the fact that a Bitcoin
transaction is veriﬁed once when it is included by a block
and again by every node when that block is accepted into
the block chain. Although the former cost can be accounted
for by charging transaction fees, it would obviously be ideal
for these costs to be as low as possible.
One approach is to distribute the cost of veriﬁcation over
the entire network and not make each node verify the entire
proof. Because the ZKSoK we use utilizes cut-and-choose
techniques, it essentially consists of n repeated iterations
of the same proof (reducing the probability of forgery to
−n). We can simply have nodes randomly select
roughly 2
which iterations of the proofs they verify. By distributing this
process across the network, we should achieve approximately
the same security with less duplication of effort.
This optimization involves a time-space tradeoff, since
the existing proof is veriﬁed by computing a series of (at a
minimum) 1024 bit values T1, . . . , Tn and hashing the result.
A naive implementation would require us to send T1, . . . , Tn
fully computed — greatly increasing the size of the proof –
since the client will only compute some of them but needs
all of them to verify the hash. We can avoid this issue by
replacing the standard hash with a Merkel tree where the
leaves are the hashed Ti values and the root is the challenge
hash used in the proof. We can then send the 160 bit or
256 bit intermediate nodes instead of the 1024 bit Ti values,
allowing the veriﬁer to compute only a subset of the Ti
values and yet still validate the proof against the challenge
without drastically increasing the proof size.
B. Limited Anonymity and Forward Security
A serious concern in the Bitcoin community is the loss
of wallets due to poor endpoint security. In traditional
Bitcoin, this results in the theft of coins [4]. However, in
the Zerocoin setting it may also allow an attacker to de-
anonymize Zerocoin transactions using the stored skc. The
16The reference bitcoind client stores transactions as STL Vectors,
which require contiguous segments of memory. As such, storing Zerocoin
proofs in the transaction might cause memory issues far faster than expected.
17Furthermore, this solution allows for the intriguing possibility that
proofs be allowed to vanish after they have been sufﬁciently veriﬁed by the
network and entombed in the block chain. However, it is not clear how this
interacts with Bitcoin in theory or practice.
404
obvious solution is to securely delete skc immediately after
a coin is spent. Unfortunately, this provides no protection if
skc is stolen at some earlier point.
One solution is to generate the spend transaction imme-
diately (or shortly after) the coin is minted, possibly using
an earlier checkpoint for calculating C. This greatly reduces
the user’s anonymity by decreasing the number of coins in
C and leaking some information about when the coin was
minted. However, no attacker who compromises the wallet
can link any zerocoins in it to their mint transactions.
C. Code Changes
For our implementation, we chose to modify bitcoind,
the original open-source Bitcoin C++ client. This required
several modiﬁcations. First, we added instructions to the
Bitcoin script for minting and spending zerocoins. Next,
we added transaction types and code for handling these
new instructions, as well as maintaining the list of spent
serial numbers and the accumulator. We used the Charm
cryptographic framework [27] to implement the cryptographic
constructions in Python, and we used Boost’s Python utilities
to call that code from within bitcoind. This introduces
some performance overhead, but it allowed us to rapidly pro-
totype and leave room for implementing future constructions
as well.
D. Incremental Deployment
As described above, Zerocoin requires changes to the
Bitcoin protocol that must happen globally: while transactions
containing the new instructions will be validated by updated
servers, they will fail validation on older nodes, potentially
causing the network to split when a block is produced that
validates for some, but not all, nodes. Although this is not
the ﬁrst time Bitcoin has faced this problem, and there is
precedent for a ﬂag day type upgrade strategy [28], it is
not clear how willing the Bitcoin community is to repeat
it. As such, we consider the possibility of an incremental
deployment.
One way to accomplish this is to embed the above protocol
as comments in standard Bitcoin scripts. For non Zerocoin
aware nodes, this data is effectively inert, and we can use
Bitcoin’s n of k signature support to specify that such
comment embedded zerocoins are valid only if signed by
some subset of the Zerocoin processing nodes. Such Zerocoin
aware nodes can parse the comments and charge transaction
fees for validation according to the proofs embedded in the
comments, thus providing an incentive for more nodes to
provide such services. Since this only changes the validation
mechanism for Zerocoin, the Anonymity property holds as
does the Balance property if no more than n − 1 Zerocoin
nodes are malicious.
Some care must be taken when electing these nodes to
prevent a Sybil attack. Thankfully, if we require that such a
node also produce blocks in the Bitcoin block chain, we have
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:32 UTC from IEEE Xplore.  Restrictions apply. 
a decent deterrent. Furthermore, because any malfeasance
of these nodes is readily detectable (since they signed an
invalid Zerocoin transaction), third parties can audit these
nodes and potentially hold funds in escrow to deter fraud.
VI. REAL WORLD SECURITY AND PARAMETER CHOICE
A. Anonymity of Zerocoin
Deﬁnition 3.2 states that given two Zerocoin mints and one
spend, one cannot do much better than guess which minted
coin was spent. Put differently, an attacker learns no more
from our scheme than they would from observing the mints
and spends of some ideal scheme. However, even an ideal
scheme imposes limitations. For example, consider a case
where N coins are minted, then all N coins are subsequently
spent. If another coin is minted after this point, the size of
the anonymity set for the next spend is k = 1, not k = 11,
since it is clear to all observers that the previous coins have
been used. We also stress that — as in many anonymity
systems — privacy may be compromised by an attacker who
mints a large fraction of the active coins. Hence, a lower
bound on the anonymity provided is the number of coins
minted by honest parties between a coin’s mint and its spend.
An upper bound is the total set of minted coins.
We also note that Zerocoin reveals the number of minted
and spent coins to all users of the system, which provides
a potential source of information to attackers. This is in
contrast to many previous e-cash schemes which reveal this
information primarily to merchants and the bank. However,
we believe this may be an advantage rather than a loss,
since the bank is generally considered an adversarial party in
most e-cash security models. The public model of Zerocoin
actually removes an information asymmetry by allowing users
to determine when such conditions might pose a problem.
Lastly, Zerocoin does not hide the denominations used in
a transaction. In practice, this problem can be avoided by
simply ﬁxing one or a small set of coin denominations and
exchanging coins until one has those denominations, or by
simply using Zerocoin to anonymize bitcoins.
B. Parameters
Generally, cryptographers specify security in terms of a
single, adjustable security parameter λ. Indeed, we have
used this notation throughout the previous sections. In reality,
however, there are three distinct security choices for Zerocoin
which affect either the system’s anonymity, its resilience to
counterfeiting, or both. These are:
1) The size of the Schnorr group used in the coin
commitments.
2) The size of the RSA modulus used in the accumulator.
3) λzkp, the security of the zero-knowledge proofs.
Commitments. Because Pedersen commitments are informa-
tion theoretically hiding for any Schnorr group whose order
is large enough to ﬁt the committed values, the size of
405
the group used does not affect the long term anonymity
of Zerocoin. The security of the commitment scheme does,
however, affect counterfeiting: an attacker who can break
the binding property of the commitment scheme can mint a
zerocoin that opens to at least two different serial numbers,
resulting in a double spend. As a result, the Schnorr group
must be large enough that such an attack cannot be feasibly
mounted in the lifetime of a coin. On the other hand, the
size of the signature of knowledge π used in coin spends
increases linearly with the size of the Schnorr group.
One solution is to minimize the group size by announcing
fresh parameters for the commitment scheme periodically
and forcing old zerocoins to expire unless exchanged for
new zerocoins minted under the fresh parameters.18 Since
all coins being spent on the network at time t are spent
with the current parameters and all previous coins can be
converted to fresh ones, this does not decrease the anonymity
of the system. It does, however, require users to convert old