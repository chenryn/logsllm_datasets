title:Mixminion: Design of a Type III Anonymous Remailer Protocol
author:George Danezis and
Roger Dingledine and
Nick Mathewson
Mixminion: Design of a Type III Anonymous Remailer Protocol
George Danezis
Roger Dingledine and Nick Mathewson
University of Cambridge
PI:EMAIL
The Free Haven Project
farma,PI:EMAIL
Abstract
We present Mixminion, a message-based anonymous re-
mailer protocol with secure single-use reply blocks. Mix
nodes cannot distinguish Mixminion forward messages from
reply messages, so forward and reply messages share the
same anonymity set. We add directory servers that allow
users to learn public keys and performance statistics of par-
ticipating remailers, and we describe nymservers that pro-
vide long-term pseudonyms using single-use reply blocks
as a primitive. Our design integrates link encryption be-
tween remailers to provide forward anonymity. Mixminion
works in a real-world Internet environment, requires little
synchronization or coordination between nodes, and pro-
tects against known anonymity-breaking attacks as well as
or better than other systems with similar design parameters.
1. Overview
Chaum ﬁrst introduced anonymous remailers over 20
years ago [7]. The research community has since intro-
duced many new designs and proofs [1, 14, 16, 19, 28, 29],
and discovered a variety of new attacks [3, 5, 6, 9, 23, 35].
But because many of the newer designs require considerable
coordination, synchronization, bandwidth, or processing re-
sources, deployed remailers still use Cottrell’s Mixmaster
design from 1994 [8, 26]. Here we describe Mixminion, a
protocol for asynchronous, loosely federated remailers that
maintains Mixmaster’s ﬂexibility while addressing the fol-
lowing ﬂaws:
(cid:15) Replies: Mixmaster does not support replies or anony-
mous recipients — people who want these functions
must use the older and less secure Cypherpunk Type
I remailer design [31], which is vulnerable to replay
attacks. We introduce a new primitive called a single-
use reply block (SURB), which makes replies as se-
cure as forward messages. Furthermore in Mixminion
the remailers themselves cannot distinguish reply mes-
sages from forward messages. We also describe how
to use these SURBs to securely build higher-level sys-
tems such as nymservers. By integrating reply capa-
bilities into Mixminion, we can ﬁnally retire the Type
I remailer network.
(cid:15) Forward anonymity: Mixmaster uses SMTP (normal
mail) for transport. We use TLS over TCP for link
encryption between remailers and use ephemeral keys
to ensure forward anonymity for each message. Link
encryption also blocks many active and passive attacks
on the communication links.
(cid:15) Replay prevention and key rotation: If an adversary
records the input and output batches of a mix and then
replays a message, that message’s decryption will re-
main the same. Thus an attacker can completely break
the security of the mix-net [7]. Mixmaster 2.0 offered
replay prevention by keeping a list of recent message
IDs — but because it expired old entries to keep the
list short, the adversary simply has to wait until the
mix has forgotten a message and replay it. Newer ver-
sions of Mixmaster keep a replay cache and also dis-
card messages more than a certain number of days old.
To block timestamp attacks, clients randomly add or
subtract a few days from the timestamp. But this ap-
proach may still be open to statistical attacks; see Sec-
tion 5.4. Mixminion instead counters replays by intro-
ducing key rotation: a message is addressed to a given
key, and after the key changes no messages to the old
key will be accepted, so the mix can forget about all
the messages addressed to old keys. The number of
IDs a node needs to remember between key rotations
is not too great a burden.
(cid:15) Exit policies: Exit abuse is a serious barrier to wide-
scale remailer deployment: most Internet Service
Providers (ISPs) do not tolerate systems that poten-
tially deliver hate mail, etc. Mixminion provides a
consistent mechanism for each node to specify and ad-
vertise an exit policy. We further describe a protocol
which allows recipients to opt out of receiving mail
from remailers, but at the same time makes it difﬁcult
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
for an adversary to deny service to interested recipi-
ents.
(cid:15) Integrated directory servers: Mixmaster uses sev-
eral ad hoc approaches to distribute information about
remailer availability, performance, and keys. But the
fact that users and remailers operate with different in-
formation introduces partitioning attacks. Mixminion
uses a small group of synchronized redundant direc-
tory servers to provide uniform information about the
network.
(cid:15) Dummy trafﬁc: Cottrell brieﬂy mentions dummy
messages in [8], but they are not part of the speciﬁca-
tion [26]. Mixminion uses a simple dummy policy for
now, but because we use our own transport, we support
many link padding and dummy trafﬁc schemes.
We review mixes and mix-nets in Section 2, describe our
goals and assumptions in Section 3, and then address the
above list of improvements in Sections 4-7. We then sum-
marize how our design stands up to known attacks, and con-
clude with a list of open problems.
2. Background
Chaum introduced the concept of using relay servers, or
mixes, for anonymous communications [7]. Each mix has
a public key which senders use to encrypt messages to it.
The mix accumulates a batch of these encrypted messages,
decrypts them, and delivers them. Because a decrypted out-
put message looks nothing like the original encrypted input
message, and because the mix collects a batch of messages
and then sends out the decrypted messages in a rearranged
order, an observer cannot learn which incoming message
corresponds to which outgoing message. Chaum showed
the security of a mix against a passive adversary who eaves-
drops on all communications but is unable to observe the
reordering inside the mix. Pﬁtzmann ﬁxed a weakness in
Chaum’s original scheme based on the properties of raw
RSA encryption [32].
However, trusting a single mix is dangerous: the mix it-
self could be controlled by an adversary. Therefore users
send their messages through a series of mixes:
if some
of the mixes are honest (not run by the adversary), some
anonymity is preserved.
In some schemes, such as Mix-
master [26] and Babel [14], the sender chooses the mixes
that make up her message’s path. Speciﬁcally, when Al-
ice wants to send an anonymous message to Bob through
mixes 1, 2, and 3, she encrypts her message succes-
sively with the public keys of the mixes in reverse order.
She includes routing information at each hop, so that each
mix i receives the address of i1 along with the mes-
sage intended for i1 (all encrypted under i’s public
key).
A mix network where Alice chooses her route freely
from all mixes is called a free-route network. Another ap-
proach is a cascade network, where senders choose from a
set of ﬁxed paths through the mix-net. Cascades can provide
greater anonymity against an adversary who owns many
mixes [6], but they are also more vulnerable to blending
attacks such as trickle or ﬂooding attacks [36]. Further, cas-
cade networks arguably have lower maximum anonymity
because the number of people Alice can hide among (her
anonymity set) is limited to the number of messages the
weakest node in her cascade can handle. In a free-route net-
work, larger anonymity sets are possible because no single
mix acts as a bottleneck: many mixes handle trafﬁc in paral-
lel as messages traverse the network. Mix cascade research
includes real-time mixes [18] and web mixes [4].
More complex designs use zero-knowledge proofs and
stronger assumptions to guarantee delivery or to detect
and exclude misbehaving participants. These include ﬂash
mixes [16], hybrid mixes [17, 29], and provable shufﬂes
[13, 28]. The properties of these designs are appealing, but
they are often impractical since they assume fairly strong
coordination and synchronization between the mixes and
impose a heavy computational and communication over-
head.
Some mix-net designs allow recipients to construct reply
blocks that allow others to send messages to them without
knowing their identities. A reply block contains only the
routing portion of a message; the actual contents are ap-
pended by the user who eventually sends a message to the
recipient. In this case the contents are effectively encrypted
at each step in the path rather than decrypted. The recipient
knows all the keys used in the reply block and can peel off
all the layers of encryption when the message arrives. Such
a design was ﬁrst introduced by Chaum [7] and later ex-
tended in Babel [14]. However, Babel’s replies are indistin-
guishable from forward messages only by passive observers
— the mix nodes can still tell them apart. Babel’s reply ad-
dresses are also multiple-use, making them less secure than
forward messages due to replay vulnerabilities.
The ﬁrst widespread public implementations of mixes
were produced by contributors to the Cypherpunks mail-
ing list. These “Type I” anonymous remailers were inspired
both by the problems surrounding the anon.penet.fi
service [15], and by theoretical work on mixes. Hughes
wrote the ﬁrst Cypherpunk anonymous remailer [31];
Finney followed closely with a collection of scripts that
used Phil Zimmermann’s PGP to encrypt and decrypt re-
mailed messages. Later, Cottrell implemented the Mixmas-
ter system [8, 26], or “Type II” remailers, which added mes-
sage padding, message pools, and other mix features lack-
ing in the Cypherpunk remailers.
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
2.1. Known attacks against mix-nets
Attacks against mix-nets aim to reduce the anonymity
of users by linking anonymous senders with the messages
they send, by linking anonymous recipients with the mes-
sages they receive, or by linking anonymous messages with
one another [35]. Attackers may trace messages through the
network by observing network trafﬁc, compromising mixes,
compromising keys, delaying messages so they stand out
from other trafﬁc, or altering messages in transit. They may
learn a given message’s destination by ﬂooding the network
with messages, replaying multiple copies of a message, or
shaping trafﬁc to isolate the target message from other un-
known trafﬁc. Attackers may discourage users from using
honest mixes by making them unreliable. They may analyze
intercepted message text to look for commonalities between
otherwise unlinked senders. Finally, even if all other attacks
are foiled, a passive adversary can mount a long-term inter-
section attack to correlate the times at which senders and
receivers are active [6].
We discuss each of these attacks in more detail below,
along with the aspects of the Mixminion design that pro-
vide defense. We provide a summary of the attacks and our
defenses against them in Section 9.
3. Design goals and assumptions
Mixminion brings together the current best practical ap-
proaches for providing anonymity in a batching message-
based free-route mix environment. We do not aim to pro-
vide a low-latency connection-oriented service like Free-
dom [37] or Onion Routing [39]: while those designs are
more convenient for common activities like anonymous
web browsing, their low latency necessarily implies smaller
anonymity sets than with slower, message-based services.
Indeed, we intentionally restrict the set of options for users:
we provide only one cipher suite and we avoid extensions
that would help an adversary partition the anonymity set.
These assumptions lead to the following design goals:
First of all, the system must be simple to deploy. Past
systems have never found it easy to get a reliable group of
mix operators to run long-lived servers. Mixminion must
add as few technical barriers as possible. Thus our protocol
uses clock synchronization only to notice when a mix’s key
has expired, achieves acceptable performance on commod-
ity hardware, requires little coordination between servers,
and can automatically handle servers joining and leaving
the system.
Furthermore, the system must be simple for clients. Be-
cause software adoption has also been a barrier to past sys-
tems, we attempt to make the requirements for senders and
receivers as low as possible. Thus, only users who receive
anonymity from the system must run special software – that
is, users should be able to receive messages from anony-
mous senders and send messages to anonymous recipients
with a standard email client. (Non-anonymous recipients
receive messages via e-mail; non-anonymous senders us-
ing reply blocks send messages via e-mail gateways.) Users
must also be able to send and receive anonymous messages
using only commodity hardware. Finally, although users
with persistent network connections are necessarily more
resistant to intersection attacks than users with intermittent
connections, the system must offer the latter users as much
anonymity as possible.
We choose to drop packet-level compatibility with Mix-
master and the Cypherpunk remailer systems in order to
provide a simple extensible design. We can retain minimal
backwards compatibility by “remixing” Type II (Mixmas-
ter) messages inside Type III (Mixminion) messages, thus
increasing anonymity sets in the Type III network. (A Type
II message traveling between backward-compatible Type III
remailers is encrypted to the next remailer in the chain using
its Type III key, and sent as a Type III encrypted message.
The recipient decrypts it to reveal the Type II message.)
For our threat model, we assume a well-funded adver-
sary who can observe all trafﬁc on the network; who can
generate, modify, delete, or delay trafﬁc on the network;
who can operate mixes of its own; and who can compromise
some fraction of the mixes on the network. Our adversary
tries to link senders and receivers, to identify the sender or
receiver of a given message, or trace a sender forward (or a
receiver backward) to its messages.
The Mixminion design tries to make it as hard as possi-
ble for an adversary observing the network to gain any ad-
ditional information about communicating partners beyond
its a priori belief. It does this by providing very little in-
formation to outside observers, and intermediate nodes, to
avoid intersection attacks. In particular, even intermediary
nodes are not aware of the actual route length (which can
be as long as 32 hops) or their position in the network. Fur-
thermore, the processing for replies is exactly the same as
for normal messages, and it is therefore difﬁcult to partition
the anonymity sets by distinguishing between them.
4. The Mixminion Mix-net Design
Mixminion uses a free-route mix-net just like Mixmaster
[26] and Babel [14]. Mixminion’s principal difference from
earlier mix-net designs is the mechanism it uses to support
reply messages with the same processing machinery as for-
ward messages, while at the same time resisting the attacks
described above.
Mixminion does not implement reusable reply blocks,
such as those in the Cypherpunk remailer and in Babel.
They are convenient, but they pose a security risk – by their