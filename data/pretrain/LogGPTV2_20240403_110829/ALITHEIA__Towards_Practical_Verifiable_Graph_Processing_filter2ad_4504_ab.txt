vector commitment scheme [27], yields an improvement of 29× in
the prover time for graphs with 10,000 nodes (compared to the ap-
proach described before), and allows us to produce shortest-path
proofs on graphs with up to 200,000 nodes.
Other related work. We have already discussed generic VC pro-
tocols above, so here we only brieﬂy mention the few prior VC
protocols we are aware of that are speciﬁcally tailored to graph
computations. Yiu et al. [37] presented a veriﬁable protocol for
shortest-path queries. However, although their proof-computation
time is shorter than ours, their protocols have worst-case proof size
linear in the number of the edges of the graph. Goodrich et al. [20]
presented authenticated data structures for various graph queries
such as graph connectivity/biconnectivity but their work does not
cover advanced graph computations such as shortest-path queries.
Using certifying algorithms for fast cryptographic veriﬁcation
has been proposed for NP-complete problems on graphs [7], where
it is clear that, assuming P(cid:54)=NP, verifying is cheaper than comput-
ing. This is known to be the case for only a few problems in P.
Efﬁcient and simple certifying algorithms have been used for ver-
ifying set queries [29] and data-structure queries [35], but to the
best of our knowledge they have not been used for graph queries.
2. PRELIMINARIES
We now present deﬁnitions for the cryptographic primitives that
we use: (1) veriﬁable computation for graphs, (2) vector commit-
ments [13], and (3) succinct non-interactive argument of knowledge
(SNARKs) [19].
Veriﬁable computation for graphs. In our setting, there are three
parties: A trusted data owner, an untrusted server, and a client
(who may also correspond to the data owner). The data owner out-
sources storage of a graph G to the untrusted server, who answers
queries posed by the client.
DEFINITION 1
(VC FOR GRAPHS). A VC scheme V consists
of 3 PPT algorithms: (1) {ekG, vkG} ← genkey(1k, G): Given a
graph G, it outputs evaluation key ekG and veriﬁcation key vkG;
(2) {πq, α} ← compute(q, ekG): On input a graph query q, it out-
puts a proof πq and an answer α; (3) {0, 1} ← verify(πq, q, α, vkG):
On input πq, q, and α, it outputs 0 or 1.
The above algorithms are used as follows. First, the data owner
executes genkey and sends the evaluation key ekG and the graph
G to the server. The veriﬁcation key vkG can be published (in the
setting of public veriﬁability) or held privately by the data owner
(in the setting of private veriﬁability). The client, who is assumed
to know vkG, can then send a query q to the server (e.g., q might
ask for the shortest path from s to t). The server computes the
answer α (e.g., the shortest path p) and proof πq using compute.
The client then veriﬁes the validity of the response α by executing
verify. Deﬁnitions of correctness and security for VC for graphs
can be found in the Appendix (see Deﬁnition 3).
Vector commitments. A vector commitment scheme (VCS) en-
ables a prover to commit to a vector S via a small digest d(S) (usu-
ally of constant size). The prover can later open speciﬁc entries
of S. A concrete example is given by a Merkle hash tree [23], if the
entries of the vector are placed at the leaves of the tree. Deﬁnitions
of a VCS and it security requirements are given in the Appendix
(see Deﬁnition 4); we stress that for our applications we care about
binding but not privacy.
In our protocol for planar graphs (see Section 4), we use a VCS
that is additively-homomorphic, i.e., having the property that for
any two vectors S1 and S2, it holds that d(S1) + d(S1) = d(S1 +
S2). We implement an additively-homomorphic VCS (see Fig-
ure 10 in the Appendix) using the streaming authenticated data
structure of Papamanthou et al. [27], which is based on a cryp-
tographic assumption related to lattices.
SNARKs. A SNARK enables an untrusted prover to prove that
some statement x is indeed in some NP language L. Speciﬁcally,
what is proved is that there exists a valid NP witness w for x. The
proof for such a statement is succinct (i.e., constant size), even if
the witness w is large. In the following deﬁnition, we let a two-
input circuit C deﬁne the language L where x ∈ L iff there exists
a w such that C(x, w) = 1.
DEFINITION 2
(SNARK [30]). A SNARK scheme G consists
of three PPT algorithms: (1) {ekL, vkL} ← genkey(1k, C): On
input the security parameter and a circuit C, output evaluation key
ekL and veriﬁcation key vkL; (2) πx ← compute(x, ekL): On
input x ∈ L, output proof πx; (3) {0, 1} ← verify(πx, x, vkL):
On input πx and x, output either 0 or 1.
Deﬁnitions of correctness and security for SNARKs can be found
in the Appendix (see Deﬁnition 5). As in the case of VC, a SNARK
can be publicly or privately veriﬁable. As with VC, a SNARK is
secure if no polynomially-bounded adversary can compute a proof
π and a statement x /∈ L such that 1 ← verify(π, x, vkL), except
with negligible probability. One important property of SNARKs,
not shared with VC, is that they support extractability; namely,
there is an extractor that can use a valid proof πx for x to extract
the corresponding NP witness w for x.
As we discuss in Section 5, we use the recent SNARK imple-
mentation by Parno et al. [30] in our schemes. In their SNARK,
the complexity of genkey is O(|C|), the complexity of compute
is O(|C| log |C|), and the complexity of verify is O(|x|) (i.e., the
length of the ﬁrst input to C). Also, the size of the proof πx is
O(1) (288 bytes), the size of the evaluation key is O(|C|), and the
size of the veriﬁcation key is O(|x|). We note here that the extra
multiplicative logarithmic overhead of a SNARK is removed by the
bootstrapping approach of [10], implemented in [8]. However, this
does not change the bottom line of our work since both the generic
and tailored solution beneﬁt.
3. VC FOR GENERAL GRAPHS
Let G = (V, E) be an (un)directed graph with positive weights
cuv on its edges. Set |V | = n and |E| = m. Let p = v1v2 . . . vk
i=1 cvivi+1. In this section
we show how to construct VC schemes and protocols for general
(un)directed graphs. Sections 3.1, 3.2, 3.3, 3.4 refer to shortest
paths while Section 3.5 refers to longest paths and maximum ﬂow.
3.1 Strawman Solution
denote a path in G of length |p| = (cid:80)k−1
We can construct a VC scheme for shortest paths in a graph G as
follows. In the genkey algorithm of the VC scheme, we compute
and then cryptographically sign the shortest paths (u, v, puv) for
all (u, v) ∈ V × V . Then we output all the signatures as the evalu-
ation key and the public key of the signature as the veriﬁcation key.
Depending on the user query, the compute algorithm just returns
the respective signature along with the path itself. The verify al-
gorithm veriﬁes the signature and decides whether the correct path
was returned. This solution however is very expensive: It requires
O(n3) cost for setup and produces an evaluation key of O(n2) size
(all the signatures).
3.2 Using General-Purpose Systems
To reduce the asymptotic complexity of the strawman approach
above, one can use a general-purpose system for VC/SNARKs [30]
to veriﬁably execute BFS—which we did in Section 5 (assume unit-
weight graphs for the purpose of this section). However, most ex-
isting systems implementing VC require the computation (in our
case, the BFS algorithm) to be expressed as a circuit. This leads
to a blow-up in complexity since the size of a circuit implement-
ing BFS is O(mn) (see Figure 3), which is not linear. As we
show in the evaluation section, this signiﬁcantly affects practical
performance—apart from the quadratic complexity itself, large con-
stants are also involved.
To avoid expressing the computation as a circuit, one can use
recently proposed methods [12, 7] for verifying RAM programs.
Roughly speaking, for a RAM program executing in time T (n)
using memory of size n, such an approach requires using a VC
scheme on a circuit of size O(T (n) log n). Also, there is the extra
multiplicative logarithmic overhead of a SNARK, thus the prover
runs in O(T (n) log T (n) log n) time. E.g., to veriﬁably execute
BFS, the prover cost is O(m log2 m). Unfortunately, as we show
in the evaluation section, such approaches do not scale in practice.
3.3 Our Method: Using Certifying Algorithms
Let s be the source and t be the destination of our shortest path
query, and let S[v] denote the distance to node v from node s for
v ∈ V (we view S as a vector of n entries).
Our approach is based on the observation that in order to verify
that path p is the shortest path from s to t in G, there is no need to
verify every step of Dijksrta’s algorithm that computes p. Instead
one can verify a few constraints that need to hold on the claimed
distance vector S and on the path p. (The distance vector S can be
computed independently with any algorithm we wish.) Speciﬁcally,
consider the following NP language
 (s, t, p) : ∃ S such that :
(1) S[s] = 0 ∧ S[t] = |p| ;
(2) ∀(u, v) ∈ E : S[v] ≤ S[u] + cuv .
 .
(1)
FG =
One can easily see that if (s, t, p) ∈ FG then |p| ≤ dst, where dst
is the actual shortest path length from s to t in G (a straightforward
proof for that claim can be found in [31]). Therefore we can write
p is a shortest path from s to t in G ⇔
(s, t, p) ∈ FG ∧ p is an s-to-t path in G ,
(2)
since, if p is an s-to-t path in G, there is no way it can be shorter
than the shortest path from s to t and therefore it has to be the case
that |p| = dst. As we see in the following, our VC scheme is based
on exactly verifying the above relation.
VC construction. We build the VC scheme for shortest paths as
follows. First, in the genkey algorithm, we instantiate a SNARK
for FG and also sign all the edges (u, v, cuv) of the graph G.
Given query (s, t), the compute algorithm just returns the signa-
tures on the edges (and weights) comprising the shortest path p and
a proof π that (s, t, p) ∈ FG. Computing the SNARK proof takes
time O(m log m) [30]. Moreover, it scales in practice because FG
has a very efﬁcient circuit representation (see below).
The verify algorithm outputs 1 only if it all the signatures on
the edges of p are valid and the SNARK proof π is correct. The
security of the scheme follows directly from the security of the used
SNARK for FG and the security of the signature scheme.
An efﬁcient circuit for FG. The constraints in Relation 1 can be
represented with an efﬁcient circuit that takes as input (s, t, p) and
some distance vector S and outputs 1 if and only of the constraints
are satisﬁed. The size of this circuit is O(m) since only two ran-
dom accesses are required: One for accessing S[s] and one for ac-
cessing S[t] (this is because s and t can change depending on user
input). These two accesses can be “unrolled” into an O(n)-sized
circuit and therefore the circuit’s asymptotic size is not affected.
The second constraint is easily “hardcoded” into the circuit since
the graph G is ﬁxed. The resulting circuit is dramatically simpler
than the circuit representing BFS or Dijkstra’s algorithm.
3.4 Support for Dynamic Graphs
As we showed before, the circuit for FG hardcodes the con-
straints on the edges of the graph. Therefore whenever G changes,
one must re-execute the genkey(1k,FG) algorithm (see Deﬁni-
tion 2) to output the new evaluation and veriﬁcation keys of the
SNARK. This results in an O(m) cost for updates. We now de-
scribe a VC scheme without this problem, with efﬁciently updat-
able veriﬁcation and evaluation keys. For clarity of presentation,
we consider the case where the number of the edges of the graph
remains the same (equal to m) and the updates we are supporting
are replacement of an edge e with another edge e(cid:48).
First, instead of signing every edge (u, v) of G (as we did in
the previous construction), we represent G with a matrix E of n2
entries such that (i, j) ∈ E if and only if E[i, j] = 1—otherwise
E[i, j] = 0 (sometimes we abuse notation and write (i, j) ∈ E).
Then we use a vector commitment scheme VE to produce a graph
digest dE = VE.digest(E) (we view the matrix as a vector in the
obvious way). Digest dE comprises part of the veriﬁcation key
which can be efﬁciently updated using algorithm update from our
additively-homomorphic VCS in Figure 10 in the Appendix.
Now, instead of hardcoding the edge constraints in FG’s circuit,
we can write
FG =
(dE, s, t, p) : ∃ E and S such that :
(1) VE.digest(E) = dE ;
(2) S[s] = 0 ∧ S[t] = |p| ;
(3) ∀(u, v) ∈ E : S[v] ≤ S[u] + 1 .
 .
(3)
Although the above representation allows for efﬁcient edge updates
(one can just update dE), it has Ω(n2) size since it must iterate
through all the entries of E in constraints (1) and (3).
To avoid this limitation we can rewrite this language by extend-
ing its inputs such that: (i) the edges (i, j) such that E[i, j] = 1 are
given as explicit input; (ii) the distances di and dj corresponding to
the endpoints of these edges (i, j) are also given as input. All these
are captured by the version of FG in Figure 9 in the Appendix. It is
easy to see that the size of the circuit implementing FG in Figure 9
is proportional to O(m · poly(log n)), where the polylogarithmic
factor depends on the type of VCS that we use.
3.5 Longest Paths, Maximum Flows
Finding longest paths in directed acyclic graphs (DAGs) from a
source s to a sink t can be used in scheduling (e.g., ﬁnding the crit-
ical path) or in graph drawing (e.g., computing a layered drawing
of a graph). It is straightforward to verify longest paths on DAGs
by slightly changing Relation 1. Speciﬁcally, for longest paths, one
has to check that ∀(u, v) ∈ E it is S[v] ≥ S[u] + cuv instead of
S[v] ≤ S[u] + cuv. Note that the edge set E is now directed.
Additionally, ALITHEIA can handle maximum-ﬂow queries. We
use the maxﬂow-mincut theorem [15] stating that given a directed
graph G with source s, sink t, and capacities cuv on the edges
(u, v) ∈ E, a maximum ﬂow F always equals the minimum cut. To
verify a maximum ﬂow based on this theorem we build a SNARK
that takes as input the source s and destination t, the ﬂow assigne-
ment on every edge f, a disjoint partition of the node set (S, T ),
and the maximum ﬂow F. Besides, the capacity of every edge is
hardcoded in the SNARK. The following relation is checked:
THEOREM 1. Let G be a graph with n nodes and m edges.
Our VC scheme for shortest paths in G has (i) O(m) preprocessing
time; (ii) O(m log m) prover time (iii) O(|p|) proof size and (iv)
O(|p|) veriﬁcation time, where p is the output shortest path.
MG =
(s, t, F): ∃ f and disjoint S and T such that :
(1) s ∈ S ∧ t ∈ T ;
e∈out(s) fe = F ;
(3) ∀e ∈ E : fe ≤ ce ;
(2)(cid:80)