### 6.1 Security in Branchless Banking

Branchless banking systems form the backbone of modern e-commerce, and their security has been extensively studied. The initial analysis began with Anderson's seminal paper, which first raised questions about the security of banking systems [13]. Since then, numerous studies have focused on enhancing password-based authentication in mobile banking [33, 39]. Additionally, SMS-based mobile banking applications, despite their widespread use, are vulnerable to message-based attacks [27], leading to extensive research aimed at improving these mechanisms [16, 17, 26]. Despite significant efforts to secure mobile banking systems, recent studies continue to highlight security concerns in existing systems [12, 22, 31, 32]. A comprehensive study of branchless banking applications across different countries [35, 36] revealed critical vulnerabilities that could compromise transaction integrity in six out of seven applications. While these studies are relevant, our work focuses on a new paradigm that integrates online banking with third-party management systems, presenting unique security challenges.

### 6.2 Security in Online Payment Systems

The existing literature on online and mobile payment systems, particularly those involving third-party platforms, can be categorized into two main areas: web-based and in-app payment systems.

#### 6.2.1 Web-based Payment System Analysis

For web-based payment systems, security analyses have primarily concentrated on merchant websites that integrate third-party payment platforms. Wang et al. [48] identified vulnerabilities in several popular online stores using third-party payments like PayPal and Amazon Pay. Dynamic protection strategies for automatically securing third-party web services were proposed in [52]. Static detection methods based on symbolic execution frameworks were introduced in [46] to detect vulnerabilities in merchant websites. Generalized black-box detection techniques for multiple web applications, based on network traces or user behaviors, were also developed [18, 34]. Pattern-based attack methods for generating test cases to check the security of multi-party web applications were proposed in [45].

#### 6.2.2 In-app Based Payment System Analysis

Research on in-app payment systems has focused on identifying and exploiting vulnerabilities. For instance, it was found that attackers can bypass server-side validation in Google-developed in-App Billing to make free purchases [37]. Building on this, a tool called VirtualSwindle was later proposed to automatically target in-app billing services for free shopping in Android applications [25]. Closely related to our work is a systematic security analysis of third-party in-app payment services in the Chinese market [53, 54]. This study outlined seven secure design patterns for constructing a secure transaction process and discussed the potential impact of not adhering to them.

#### 6.2.3 Other Payment Methods Analysis

Chen et al. [15] explored syndication payment services by analyzing user documentation using NLP-based techniques to detect logic vulnerabilities. Credit, debit, and gift card usage in online payments are also susceptible to counterfeiting. Attackers can steal card data using keyloggers and cameras and forge copies [23]. By monitoring network transmissions, counterfeit cards can be created for real-world transactions [47]. To enhance gift card security, a method to detect counterfeit gift cards without scanning the original was proposed in [38]. However, none of these studies focus on Personal Payment Systems (PPS), a newly emerged payment service with distinct system mechanisms and customer bases. To the best of our knowledge, we are the first to provide a systematic study of PPS security issues.

### 6.3 MD5 Collision Techniques

The payment system relies heavily on a secure signature mechanism to prevent packet transmission tampering. Given that PPS systems generally use MD5 as the token generation hash function, we reviewed works on MD5 collision attacks to examine payment security. The first MD5 collision was noted by Den Boer and Bosselaers [19], demonstrating that two different vectors can produce an identical digest. Xiaoyun Wang’s group generated a full MD5 collision [49], indicating that MD5 has become increasingly insecure. A practical collision case involving two X.509 certificates with different public keys but the same MD5 hash value was provided in [24]. Subsequent works improved MD5 collision approaches, from identical prefix collisions to chosen-prefix collisions, while reducing computation time [14, 41–44], further highlighting MD5's weaknesses. In this paper, we leverage open resources to conduct MD5 collision experiments and design attack schemes targeting vulnerabilities in the PPS payment process.

### 7 Conclusion

Personal Payment Systems (PPS) represent an emerging paradigm where small business owners use an independent management platform in conjunction with a personal financial account on a third-party payment system to conduct e-commerce. The added complexity of integrating two independent services for payment transactions and order management significantly increases the risk of security vulnerabilities. In this paper, we analyzed the 35 most widely used PPSs, supporting over 20 million users, and presented an abstracted model capturing common design elements. Our security analysis identified seven vulnerable patterns. By chaining these vulnerabilities, we demonstrated five proof-of-concept exploits. We also conducted four real-world attacks to enable an attacker to purchase items at a lower price without detection. All experiments were conducted on our own accounts to minimize the impact on real customers. Following responsible disclosure practices, we reported and worked with vendors to fix some of the vulnerabilities. Finally, we propose a set of recommendations for future PPS deployments.

### Acknowledgements

This work was supported in part by the Louisiana Board of Regents under Contract Numbers LEQSF(2018-21)-RD-A-24 and in part by the US National Science Foundation under grants CNS-1837519, CNS-1916926, and CNS-1948374.

### References

[References listed here as in the original text]