Requested Lock Mode VS current FOR KEY FOR FOR NO KEY UPDATE FOR UPDATE
SHARE SHARE
FOR KEY SHARE X
FOR SHARE X X
FOR NO KEY UPDATE X X X
FOR UPDATE X X X X
3. Page-level Locks: Shared/Exclusive locks used to control read or write access to table pages in the
shared buffer pool. They are released immediately after a row is fetched or updated.
4. Deadlocks: Occur when two or more transactions are waiting for one another to release each lock.
Transaction-level locking:
PostgreSQL does not support session isolation levels, although it can be controlled via transactions:
•
SET TRANSACTION ISOLATION LEVEL
•
LOCK TABLE
•
SELECT … FOR UPDATE
PostgreSQL Synopsis
LOCK TABLE
LOCK [ TABLE ] [ ONLY ] name [ * ] [, ...] [ IN lockmode MODE ] [ NOWAIT ]
where lockmode is one of:
ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE
| SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE
165
Notes:
• If and [ ] are specified, the command aborts with an error.
ONLY *
• There is no command. Locks are always released at the end of a transaction
UNLOCK TABLE
( ).
COMMIT / ROLLBACK
• The command can be used inside a transaction and should appear after the
LOCKTABLE START
statement.
TRANSACTION
166
Examples
1. Obtain an explicit lock on a table using the command:
LOCK TABLE
-- Session 1
psql=> START TRANSACTION;
psql=> LOCK TABLE EMPLOYEES IN EXCLUSIVE MODE;
-- Session 2
psql=> UPDATE EMPLOYEES
SET SALARY=SALARY+1000
WHERE EMPLOYEE_ID=114;
-- Session 2 waits for session 1 to COMMIT or ROLLBACK
2. Explicit lock via the command. PostgreSQL obtains exclusive row-level locks
SELECT… FOR UPDATE
on rows referenced by the statement. Must be executed inside a transaction.
SELECT FOR UPDATE
-- Session 1
psql=> START TRANSACTION;
psql=> SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID=114 FOR UPDATE;
-- Session 2
psql=> UPDATE EMPLOYEES
SET SALARY=SALARY+1000
WHERE EMPLOYEE_ID=114;
-- Session 2 waits for session 1 to COMMIT or ROLLBACK
PostgreSQL Deadlocks
Deadlocks occur when two or more transactions acquired locks on each other’s process resources (table or
row). PostgreSQL can detect Deadlocks automatically and resolve the event by aborting one of the
transactions, allowing the other transaction to complete.
Example
Simulating a Deadlock:
Session 1 Session 2
Step1: Step2:
UPDATE accounts SET balance = UPDATE accounts SET balance =
balance + 100.00 WHERE acctnum balance + 100.00 WHERE
= 11111; acctnum = 22222;
Step4: Step3:
UPDATE accounts SET balance = UPDATE accounts SET balance =
balance - 100.00 WHERE acctnum balance - 100.00 WHERE
= 22222; acctnum = 11111;
Session 1 is waiting for Session 2 and Session 2 is waiting for Session 1 = deadlock.
167
Real-time Monitoring of Locks using Catalog Tables
•
pg_locks
•
pg_stat_activity
Examples
1. Monitor locks using a SQL query:
psql=> SELECT
block.pid AS block_pid,
block_stm.usename AS blocker_user,
block.mode AS block_mode,
block.locktype AS block_locktype,
block.relation::regclass AS block_table,
block_stm.query AS block_query,
block.GRANTED AS block_granted,
waiting.locktype AS waiting_locktype,
waiting_stm.usename AS waiting_user,
waiting.relation::regclass AS waiting_table,
waiting_stm.query AS waiting_query,
waiting.mode AS waiting_mode,
waiting.pid AS waiting_pid
from pg_catalog.pg_locks AS waiting JOIN
pg_catalog.pg_stat_activity AS waiting_stm
ON (waiting_stm.pid = waiting.pid)
join pg_catalog.pg_locks AS block
ON ((waiting."database" = block."database"
AND waiting.relation = block.relation)
OR waiting.transactionid = block.transactionid)
join pg_catalog.pg_stat_activity AS block_stm
ON (block_stm.pid = block.pid)
where NOT waiting.GRANTED
and waiting.pid <> block.pid;
2. Generate an explicit lock using the statement:
SELECT… FOR UPDATE
-- Session 1
psql=> START TRANSACTION;
psql=> SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID=114 FOR UPDATE;
-- Session 2
psql=> UPDATE EMPLOYEES
SET SALARY=SALARY+1000
WHERE EMPLOYEE_ID=114;
-- Session 2 waits for session 1 to COMMIT or ROLLBACK
168
3. Run the SQL query from step #1 monitoring locks while distinguishing between the “blocking” and
“waiting” session:
-[ RECORD 1 ]----+-------------------------------------------------------
block_pid | 31743
blocker_user | aurora_admin
block_mode | ExclusiveLock
block_locktype | transactionid
block_table |
block_query | SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID=114 FOR UPDATE;
block_granted | t
waiting_locktype | transactionid
waiting_user | aurora_admin
waiting_table |
waiting_query | UPDATE EMPLOYEES
| SET SALARY=SALARY+1000
| WHERE EMPLOYEE_ID=114;
waiting_mode | ShareLock
waiting_pid | 31996
Comparing “Locks”, Oracle vs. PostgreSQL
Description Oracle PostgreSQL
“Dictionary” tables to obtain v$lock; pg_locks
information about locks v$locked_object; pg_stat_activity
v$session_blockers;
Lock a table BEGIN; LOCK TABLE employees IN
LOCK TABLE employees IN SHARE ROW EXCLUSIVE MODE
SHARE ROW EXCLUSIVE MODE;
Explicit Locking SELECT * FROM employees BEGIN;
WHERE employee_id=102 FOR SELECT * FROM employees WHERE
UPDATE; employee_id=102 FOR UPDATE;
Explicit Locking , options SELECT…FOR UPDATE SELECT … FOR…
KEY SHRE
SHARE
NO KEY UPDATE
UPDATE
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-lock.html
https://www.postgresql.org/docs/9.6/static/explicit-locking.html
169
Migrating from: Oracle Character Sets
[Back to TOC]
Overview
Oracle supports most national and international encoded character set standards including extensive support
for Unicode character sets.
Oracle provides two scalar string-specific data types:
1. : stores variable-length character strings with a string length between 1 and 4000 bytes.
VARCHAR2
The Oracle database can be configured to use the data type to store either Unicode or
VARCHAR2
Non-Unicode characters.
2. : scalar data type used to store Unicode data. Supports or , specified
NVARCHAR2 AL16UTF16 UTF8
during database creation.
Character sets in the Oracle database are defined at Instance (Oracle 11g) or Pluggable Database level (Oracle
12c R2) level. In Pre-12cR2 Oracle databases, the character set for the root Container and all Pluggable
Databases were required to be identical.
UTF8 Unicode
Oracle's implementation is done using the AL32UTF8 Character Set and offers encoding of ASCII characters as
single-byte for Latin characters, two-bytes for some European and Middle-Eastern languages, and three-bytes
for certain South and East-Asian characters. Therefore, Unicode storage requirements are usually higher when
compared non-Unicode character sets.
Character Set Migration
Two options exist for modifying existing Instance-level or database-level character sets:
1. Export/Import from the source Instance/PDB to a new Instance/PDB with a modified CS.
2. Database Migration Assistant for Unicode (DMU) which simplifies the migration process to the Unicode
CS.
As of 2012, using the utility for CS migrations is deprecated.
CSALTER
Notes:
1. Oracle Database 12c Release 1 (12.1.0.1) complies with version 6.1 of the Unicode Standard.
2. Oracle Database 12c Release 2 (12.1.0.2) extends the compliance to version 6.2 of the Unicode
standard.
3. UTF-8 is supported through the AL32UTF8 CS and is valid as both the client and database character
sets.
4. UTF-16BE is supported through AL16UTF16 and is valid as the national (NCHAR) character set.
170
For additional details:
https://docs.oracle.com/database/121/SQLRF/ap_standard_sql015.htm#SQLRF55539
https://docs.oracle.com/database/121/NLSPG/applocaledata.htm#NLSPG584
https://docs.oracle.com/database/121/NLSPG/ch11charsetmig.htm
171
Migration to: PostgreSQL Encoding
[Back to TOC]
Overview
PostgreSQL supports a variety of different character sets, also known as encoding, including support for both
single-byte and multi-byte languages. The default character set is specified when initializing your
PostgreSQL database cluster with Each individual database created on the PostgreSQL cluster
initdb.
supports individual character sets defined as part of database creation.
Notes:
1. All supported character sets can be used by clients. However, some client-side only characters are not
supported for use within the server.
2. Unlike Oracle, PostgreSQL does not natively support an data type and does not offer
NVARHCHAR
support for UTF-16.
Type Function Implementation Level
Encoding Defines the basic rules on how alphanumeric characters Database
are represented in binary format, for example – Unicode
Encoding.
Locale Superset which include and Table-Column
LC_COLLATE LC_CTYPE,
among others.
For example, defines how strings are
LC_COLLATE
sorted and needs to be a subset supported by the database
Encoding.
Example
1. Create a database named which uses the Korean Encoding the and the
test01 EUC_KR ko_KR
locale.
CREATE DATABASE test01 WITH ENCODING 'EUC_KR' LC_COLLATE='ko_KR.euckr'
LC_CTYPE='ko_KR.euckr' TEMPLATE=template0;
2. View the character sets configured for each database by querying the System Catalog:
select datname, datcollate, datctype from pg_database;
172
Changing Character Sets / Encoding
In-place modification of the database encoding is not recommended nor supported. You must export all data,
create a new database with the new encoding, and import the data.
Example
1. Export the data using the utility:
pg_dump
pg_dump mydb1 > mydb1_export.sql
2. Rename (or delete) your current database:
ALTER DATABASE mydb1 TO mydb1_backup;
3. Create a new database using the modified encoding:
CREATE DATABASE mydb1_new_encoding WITH ENCODING 'UNICODE'
TEMPLATE=template0;
4. Im port the data using the file previously created. Verify that you set your client encoding to
pg_dump
the encoding of your “old” database.
PGCLIENTENCODING=OLD_DB_ENCODING psql -f mydb1_export.sql
mydb1_new_encoding
Note: Using the parameter overrides the use of .
client_encoding PGCLIENTENCODING
Client/Server Character Set Conversions
PostgreSQL supports conversion of character sets between server and client for specific character set
combinations as described in the system catalog.
pg_conversion
PostgreSQL includes predefined conversions, for a complete list:
https://www.postgresql.org/docs/current/static/multibyte.html#MULTIBYTE-TRANSLATION-TABLE
You can create a new conversion using the SQL command By using
CREATE CONVERSION. CREATE
.
CONVERSION
Examples
1. Create a conversion from UTF8 to LATIN1 using a custom-made function:
myfunc1
CREATE CONVERSION myconv FOR 'UTF8' TO 'LATIN1' FROM myfunc1;
2. Co nfigure the PostgreSQL client character set:
Method 1
===== ===
psql \encoding SJIS
Method 2
======== 173
SET CLIENT_ENCODING TO 'value';
3. View the client character set and reset it back to the default value.
SHOW client_encoding;
RESET client_encoding;
Table Level Collation
PostgreSQL supports specifying the sort order and character classification behavior on a per-column level.
Example
Specify specific collations for individual table columns:
CREATE TABLE test1 (
col1 text COLLATE "de_DE",
col2 text COLLATE "es_ES");
Oracle vs. PostgreSQL Character Sets
Oracle PostgreSQL
View database character set SELECT * FROM select datname,
NLS_DATABASE_PARAMETER pg_encoding_to_char(encoding
S; ), datcollate, datctype from
pg_database;
Modify the database character 1. Full Export/Import. • Export the database.
set 2. When converting to • Drop or rename the database.
Unicode, use the Oracle • Re-create the database with the
DMU utility. desired new character set.
• Import database data from the
exported file into the new
database.
Character set granularity Instance (11g + 12cR1) Database
Database (Oracle 12cR2)
UTF8 Supported via and Supported via datatype
VARCHAR2 VARCHAR
data types
NVARCHAR
UTF16 Supported via Not Supported
NVARCHAR2
datatype
NCHAR/NVARCHAR data types Supported Not supported
For additional details:
https://www.postgresql.org/docs/9.6/static/multibyte.html
174
Migrating from: Oracle Transaction Model
[Back to TOC]
Overview
Database transactions are a logical, atomic units of processing that contains one or more SQL statements and
may run concurrently alongside other transactions. The primary purpose of a transaction is to ensure the
ACID model is enforced, including:
• Atomicity
Every statement in a transaction is processed as one logical unit or none are processed. If a single part
of a transaction fails, the entire transaction is aborted and no changes are persisted (“all or nothing”).
• Consistency
All data integrity constraints are checked and all triggers are processed before a transaction is
processed. If any of the constraint are violated, the entire transaction fails.
• Isolation
One transaction is not affected by the behavior of other concurrently-running transactions. The effect
of a transaction is not visible to other transactions until the transaction is committed.
• Durability
Once a transaction commits, its results will not be lost, regardless of subsequent failures.
After a transaction completes, changes made by committed transactions are permanent. The database
ensures that committed transactions cannot be lost.
Database Transaction Isolation Levels
Four levels of isolation are defined by the ANSI/ISO SQL standard (SQL92). Each level offers a different
approach to handle the concurrent execution of database transactions. Transaction isolation levels are meant
to manage the visibility of the changed data, as seen by other running transactions. In addition, when
accessing the same data with several concurrent transactions, the selected level of transaction isolation
affects the way different transactions interact with each other.
175
Example
If a bank account is shared by two individuals, what will happen if both parties attempt to perform a
transaction on the shared account at the same time? One checks the account balance while the other
withdraws money.
• Read Uncommitted Isolation Level
A currently processed transaction can see uncommitted data made by the other transaction. If a
rollback is performed, all data is restored to its previous state.
• Read Committed Isolation Level
A currently processed transaction only sees data changes that were committed; “dirty reads”
(uncommitted changes) are not possible.
• Repeatable Read Isolation Level
A currently processed transaction can view changes made by the other transaction only after both
transactions issue a Commit or both are rolled-back.
• Serializable Isolation Level
The strictest isolation level. Any concurrent execution of a set of serializable transactions is guaranteed
to produce the same effect as running them, one at a time, in the same order.
Using different isolation levels will affect the following in terms of database behavior:
• Dirty Reads
A transaction can read data that was written by another transaction, but is not yet committed.
• Non-Repeatable (fuzzy) Reads
When reading the same data several times, a transaction can find that the data has been modified by
another transaction that has just committed. The same query executed twice can return different
values for the same rows.
• Phantom Reads
Similar to a non-repeatable read, but it is related to new data created by another transaction. The
same query executed twice can return a different numbers of records.
176
Isolation level Dirty read Non-repeatable Phantom read
read
Read Uncommitted Permitted Permitted Permitted
Read Committed Not permitted Permitted Permitted
Repeatable Read Not permitted Not permitted Permitted
Serializable Not permitted Not permitted Not permitted
Isolation Levels Supported by the Oracle Database
Oracle supports the Read Committed and Serializable isolation levels. Oracle also provides a Read-Only
isolation level which is not a part of the ANSI/ISO SQL standard (SQL92). Read Committed is the default
isolation level in the Oracle Database.
• Read Committed
Default transaction isolation level in the Oracle database. Each query, executed inside a transaction,
only sees data that was committed before the query itself. The Oracle database will never allow
reading “dirty pages” and uncommitted data.
• Serializable
Serializable transactions do not experience non-repeatable reads or phantom reads because they are
only able to “see” changes that were committed at the time the transaction began, in addition to the
changes made by the transaction itself performing DML operations.
• Read-Only
As implemented, the read-only isolation level does not allow any DML operations during the
transaction and only sees data committed at the time the transaction began.
Oracle Multiversion Concurrency Control (MVCC)
Oracle uses the MVCC mechanism to provide automatic read consistency across the entire database and all
sessions. Using MVCC, database sessions “see” data based on a single point in time, ensuring that only
committed changes is viewable. Oracle relies on using the SCN (System Change Number) of the current
transaction to obtain a consistent view of the database. Therefore, every database query only returns data
which was committed with respect to the SCN that is taken at the time of query execution.
177
Setting Isolation Levels in Oracle
Oracle database isolation levels can be altered. The isolation level can be changed at the transaction-level and
at the session-level.
Example
Altering the isolation-level at the transaction-level:
SQL> SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
SQL> SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SQL> SET TRANSACTION READ ONLY;
Altering the isolation-level at a session-level:
SQL> ALTER SESSION SET ISOLATION_LEVEL = SERIALIZABLE;
SQL> ALTER SESSION SET ISOLATION_LEVEL = READ COMMITTED;
For additional details:
http://docs.oracle.com/cd/E25054_01/server.1111/e25789/transact.htm
https://docs.oracle.com/database/121/CNCPT/transact.htm#CNCPT041
178
Migration to: PostgreSQL Transaction Model
[Back to TOC]
Overview
The same ANSI/ISO SQL (SQL92) isolation levels apply to PostgreSQL, with several similarities and some
differences:
Isolation Level Dirty Reads Non-Repeatable Phantom Reads
Reads
Read Uncommitted Permitted but Permitted Permitted