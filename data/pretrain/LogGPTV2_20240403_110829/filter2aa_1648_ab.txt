* Translated and simplified the code flow
Global Write With Constraint
0xXXXXXXXX
SmartPointer
00 00 00 01
00 00 00 00
00 00 00 00
12 34 56 78
0xXXXXXXXX
+4
+8
+C
00 00 00 01
MA CA 00 00
AD DR ES SS
12 34 ?? ??
+4
+8
+C
+0
Bit 0
Write
MAC
Step 1 Overwrite SmartPointer
Step 2 Global Write (Using SmartPointer)
Global Write With Constraint
How to write 4 bytes?
MACA 00 00
AD DR ES SS
12 34 ?? ??
+4
+8
+C
+0
Bit 0
MAC
0xXXXXXXXX
SmartPointer
Step 1 Overwrite SmartPointer
Write Low 2 Bytes
00 01 00 01
00 00 00 00
MA CA DD RE
??  ??  SS  SS
+4
+8
+C
+0
Bit 16
MAC
Write High 2 Bytes
00 01 00 01
Step 4 Global Write (Using SmartPointer)
0xXXXXXXXX+2
SmartPointer
Step 3 Overflow SmartPointer
Step 2 Global Write (Using SmartPointer)
Global Write With Constraint
The Bit0 != 1?
MACA 00 00
AD DR ES SS
12 34 ?? ??
Bit0 != 1
MAC
00 00 00 00
Target
00 00 00 00
00 00 00 01
Bit0 == 1？
MAC
00 00 00 01
+4
+8
+C
+0
-8
-4
-C
Control PC & R0
Address
Value
00
0x00010000
+04
0x00010001
+08
0x00000000
+0C
0x00000001
+10
0x00000000
+14
0x00000000
+18
0x00000000
+1C
0x00000000
+20
0x00000000
+24
0x12345678(PC)
+28
0x87654321(R0)
Address
Value
+00
0x00010000
+04
0x00010001
+08
0x00000000
+0C
0x00010001
+10
0x00010001
+14
0x00000000
+18
0x00010001
+1C
0x00010001
+20
0x00000000
+24
TARGET PC
+28
TARGET R0
SmartPointer
Transform To Arbitrary Write
TARGET PC
TARGET R0
Item1
Payload1
Item2
Payload2
…
FOP Gadget
Run Useful FOP Gadget
Function Pointer(PC)
Data Pointer (R0)
Step 1 Arbitrary Write Overwrite function pointer 
Step 2 Arbitrary Write Overwrite data pointer 
Item1
Payload1
Item2
Payload2
…
Step 3 Send payload packet and trigger the PC 
Virtual Address             
Memory Mapping RWX
CreateMapping(args, …)
R0 = 0x42420000
Virtual Address
R1 = 0x936a0000 
Physical Address
R2 = 0x1000
Size
R3 = 4
Unknown
R4 = 7
Permission RWX 
Physical DRAM             
936a0000
42420000
b0000000
RWX
R-X
Memory Mapping RWX
TARGET PC
TARGET R0
CreateMapping(args, …)
R0 = 0x42420000
Virtual Address
R1 = 0x936a0000 
Physical Address
R2 = 0x1000
Size
R3 = 4
Unknown
R4 = 7
Permission RWX 
FOP Gadget
Item1
Payload1
Item2
Payload2
…
Copy Shellcode to 0x42420000
memcpy(PC)
0x42420000(R0)
0x42420000
Shellcode
…
Step 1 Arbitrary Write Overwrite function pointer 
Step 2 Arbitrary Write Overwrite data pointer 
Step 3 Trigger
OTA Packet(R1)
Packet Len(R2)
Trigger Shellcode
0xB0000020(PC)
Any Value(R0)
0xB0000020
Shellcode
…
Step 1 Arbitrary Write Overwrite function pointer 
Step 2 Trigger
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
The Roadmap
Modem
WLAN
Linux 
Kernel
From WLAN to Modem
WLAN
Kernel
Modem
* TLB is a Hexagon Instruction to modify the Memory Page Attribute
** Complex Function uses the resource of Modem, or calls System Call
*** Simple Code Snippet mean code has only register operation
QURT OS
Actions From WLAN
Eligible?
TLB Set*
N
Write Modem Data
N
Call Modem Complex Function**
N
Call Modem Simple Code Snippet***
Y
Map Modem Memory
Y
Userspace
Map Modem Memory into WLAN
Modem
WLAN
Modem
RWX
R-X
WLAN
Virtual Address
Physical Address
Modem
WLAN Process Virtual Address
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
The Roadmap
Modem
WLAN
Linux 
Kernel
The Attack Surfaces
Linux Kernel
Modem
Userspace APP
TrustZone
AT Command
Glink
DIAG
QMI
WMI
APR
Share Memory
• We’ve found 
An arbitrary memory read/write vulnerability
Could bypass all the mitigations of Linux Kernel
From Modem into Linux Kernel
• In these attack surfaces
• But we are unable to disclose the detail now
Agenda
• Introduction and Related Work
• The Debugger
• Reverse Engineering and Attack Surface
• Vulnerability and Exploitation
• Escaping into Modem
• Escaping into Kernel
• Stability of Exploitation
• Conclusions
Deliver the Payload Over-The-Air
Pixel 2XL
Packet Losing Rate 90%+!
Deliver the Payloads Using Pixel2
Pixel 2
Pixel 2XL
The Roadmap
Modem
WLAN
Linux 
Kernel
Pixel 2XL
Pixel 2
Demo
Future Works
• There are still lots of mystery in the WLAN. 
• We were only reversed a small part of the code
• Lots of functions are unknown
• How to fuzz the WLAN Firmware?
• Reverse engineering is quite…
• How to fuzz closed source target and Hexagon architecture effectively?
• Translate Hexagon Instruction to C?
• IDA/Ghidra F5 plugin?
Timeline
• 2019-2-14 Find the Modem debug vulnerability on MSM8998
• 2019-3-24 Find the WLAN issue and report to Google
• 2019-3-28 Google forwards the issue to Qualcomm
• 2019-4-24 Google confirms the WLAN issue as Critical
• 2019-5-08 Report the WLAN into Linux Kernel issue to Google
• 2019-5-24 Google confirms the WLAN into Linux Kernel issue 
• 2019-5-28 Submit the full exploit chain to Google
• 2019-6-04 Google reply unable to reproduce the full exploit chain
• 2019-6-17 Improve the stability and submit to Google
• 2019-7-19 CVE Assigned by Google
• 2019-7-20 Qualcomm confirms issues will be fixed before October
• 2019-8-0? Google release the fix for Google Pixel2/Pixel3
THANK YOU
https://blade.tencent.com