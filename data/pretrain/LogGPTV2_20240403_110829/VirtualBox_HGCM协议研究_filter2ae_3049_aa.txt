# VirtualBox HGCM协议研究
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
最近开始研究VirtualBox虚拟机逃逸漏洞，针对于VirtualBox的虚拟机逃逸，我们重点关注它的`HGCM（host-guest
communication mechanism）协议`，本文将结合源码分析和动态调试来分析此协议，最后我们还将实现一个HGCM协议的调用库。
## 0x01 VirtualBox 通信协议
###  引言
VirtualBox中一个名为`HGCM`的协议相当于一个`RPC`，其作用是可以让Guest里的程序通过接口调用`Host`中的服务程序中的函数。该协议的接口封装在`vboxguest`驱动程序中。
在Guest系统中，通过`VBoxGuestAdditions.iso`安装了一个名为`vboxguest`的驱动程序，该驱动程序主要就是提供接口给`Guset`系统里的程序，用于与`Host`主机进行通信。
除了`vboxguest`驱动，Guset还安装有`vboxsf`驱动和`vboxvideo`，其中`vboxsf`仍然使用的是`vboxguest`的接口，而`vboxvideo`则是`VirtualBox`虚拟出来的显示设备的驱动程序，独立于前面两个驱动。由此可见，Guest与Host之前的通信关键在于`vboxguest`驱动，因此，我们的研究将从该驱动出发。
该驱动源码位于`src\VBox\Additions\common\VBoxGuest`目录，以Linux系统为例，其源文件为`VBoxGuest-linux.c`，首先从`file_operations`结构体可以看到有哪些操作
    static struct file_operations   g_FileOpsUser =
    {
        owner:          THIS_MODULE,
        open:           vgdrvLinuxOpen,
        release:        vgdrvLinuxRelease,
    #ifdef HAVE_UNLOCKED_IOCTL
        unlocked_ioctl: vgdrvLinuxIOCtl,
    #else
        ioctl:          vgdrvLinuxIOCtl,
    #endif
    };
###  GUEST IOCTL
可以看到定义了`vgdrvLinuxIOCtl`用于进行接口的访问，跟踪该函数，可以发现其调用了`vgdrvLinuxIOCtlSlow`函数，
    static int vgdrvLinuxIOCtlSlow(struct file *pFilp, unsigned int uCmd, unsigned long ulArg, PVBOXGUESTSESSION pSession)
    {
        int                 rc;
        VBGLREQHDR          Hdr;
        PVBGLREQHDR         pHdr;
        uint32_t            cbBuf;
        Log6(("vgdrvLinuxIOCtlSlow: pFilp=%p uCmd=%#x ulArg=%p pid=%d/%d\n", pFilp, uCmd, (void *)ulArg, RTProcSelf(), current->pid));
        /*
         * Read the header.
         */
        if (RT_FAILURE(RTR0MemUserCopyFrom(&Hdr, ulArg, sizeof(Hdr))))
        {
            Log(("vgdrvLinuxIOCtlSlow: copy_from_user(,%#lx,) failed; uCmd=%#x\n", ulArg, uCmd));
            return -EFAULT;
        }
        if (RT_UNLIKELY(Hdr.uVersion != VBGLREQHDR_VERSION))
        {
            Log(("vgdrvLinuxIOCtlSlow: bad header version %#x; uCmd=%#x\n", Hdr.uVersion, uCmd));
            return -EINVAL;
        }
        /*
         * Buffer the request.
         * Note! The header is revalidated by the common code.
         */
        cbBuf = RT_MAX(Hdr.cbIn, Hdr.cbOut);
        if (RT_UNLIKELY(cbBuf > _1M*16))
        {
            Log(("vgdrvLinuxIOCtlSlow: too big cbBuf=%#x; uCmd=%#x\n", cbBuf, uCmd));
            return -E2BIG;
        }
        if (RT_UNLIKELY(   Hdr.cbIn uType == VBGLREQHDR_TYPE_DEFAULT))
        {
            if (iFunctionStripped == VBGL_IOCTL_CODE_STRIPPED(VBGL_IOCTL_LOG(0)))
            {
                ........
            }
    #ifdef VBOX_WITH_HGCM
            else if (iFunction == VBGL_IOCTL_IDC_HGCM_FAST_CALL) /* (is variable size, but we don't bother encoding it) */
            {
                .........
            }
            else if (   iFunctionStripped == VBGL_IOCTL_CODE_STRIPPED(VBGL_IOCTL_HGCM_CALL(0))
    # if ARCH_BITS == 64
                     || iFunctionStripped == VBGL_IOCTL_CODE_STRIPPED(VBGL_IOCTL_HGCM_CALL_32(0))
    # endif
                    )
            {
                ...........
            }
            else if (iFunctionStripped == VBGL_IOCTL_CODE_STRIPPED(VBGL_IOCTL_HGCM_CALL_WITH_USER_DATA(0)))
            {
                ..........
            }
    #endif /* VBOX_WITH_HGCM */
            else
            {
                switch (iFunction)
                {
由于我们想要进入HGCM相关的处理分支里，因此，想要满足`pReqHdr->uType == VBGLREQHDR_TYPE_DEFAULT`
                switch (iFunction)
                {
    ............................................
    #ifdef VBOX_WITH_HGCM
                    case VBGL_IOCTL_HGCM_CONNECT:
                        REQ_CHECK_SIZES(VBGL_IOCTL_HGCM_CONNECT);
                        pReqHdr->rc = vgdrvIoCtl_HGCMConnect(pDevExt, pSession, (PVBGLIOCHGCMCONNECT)pReqHdr);
                        break;
                    case VBGL_IOCTL_HGCM_DISCONNECT:
                        REQ_CHECK_SIZES(VBGL_IOCTL_HGCM_DISCONNECT);
                        pReqHdr->rc = vgdrvIoCtl_HGCMDisconnect(pDevExt, pSession, (PVBGLIOCHGCMDISCONNECT)pReqHdr);
                        break;
    #endif
这里的`iFunction`值就是我们在ioctl中传入的cmd，当cmd为`VBGL_IOCTL_HGCM_CONNECT`或者`VBGL_IOCTL_HGCM_DISCONNECT`时，可以建立或者断开一个`HGCM`服务。在一般情况下，使用HGCM调用Host中的服务时，要经过三个步骤`VBGL_IOCTL_HGCM_CONNECT`->`VBGL_IOCTL_HGCM_CALL`->`VBGL_IOCTL_HGCM_DISCONNECT`，即打开服务->调用函数->关闭服务。可以在`src\VBox\HostServices`目录下看到这些服务以及它们的源码
    src\VBox\HostServices
        DragAndDrop
        GuestControl
        GuestProperties
        HostChannel
        SharedClipboard
        SharedFolders
        SharedOpenGL
从这些服务名大致能知道它们的作用，其中`SharedClipboard`用于在Host和Guest之间共享`粘贴板`，`SharedFolders`用于共享`文件夹`，而`SharedOpenGL`用于`3D图形加速`。  
继续分析HGCM服务的调用
    pReqHdr->rc = vgdrvIoCtl_HGCMConnect(pDevExt, pSession, (PVBGLIOCHGCMCONNECT)pReqHdr);
可以知道此时将`pReqHdr`这个`VBGLREQHDR`结构体指针强制转换为`VBGLIOCHGCMCONNECT`结构体指针，该结构体定义如下
    typedef struct VBGLIOCHGCMCONNECT
    {
        /** The header. */
        VBGLREQHDR                  Hdr;
        union
        {
            struct
            {
                HGCMServiceLocation Loc;
            } In;
            struct
            {
                uint32_t            idClient;
            } Out;
        } u;
    } VBGLIOCHGCMCONNECT, RT_FAR *PVBGLIOCHGCMCONNECT;
    /**
     * HGCM service location.
     * @ingroup grp_vmmdev_req
     */
    typedef struct HGCMSERVICELOCATION
    {
        /** Type of the location. */
        HGCMServiceLocationType type;
        union
        {
            HGCMServiceLocationHost host;
        } u;
    } HGCMServiceLocation;
    typedef enum
    {
        VMMDevHGCMLoc_Invalid    = 0,
        VMMDevHGCMLoc_LocalHost  = 1,
        VMMDevHGCMLoc_LocalHost_Existing = 2,
        VMMDevHGCMLoc_SizeHack   = 0x7fffffff
    } HGCMServiceLocationType;
    /**
     * HGCM host service location.
     * @ingroup grp_vmmdev_req
     */
    typedef struct
    {
        char achName[128]; /**u.In.Loc.type == VMMDevHGCMLoc_LocalHost || pInfo->u.In.Loc.type == VMMDevHGCMLoc_LocalHost_Existing
             ? pInfo->u.In.Loc.u.host.achName : ""));
        rc = VbglR0HGCMInternalConnect(&pInfo->u.In.Loc, pSession->fRequestor, &idClient,
                                       vgdrvHgcmAsyncWaitCallback, pDevExt, RT_INDEFINITE_WAIT);
        Log(("VBOXGUEST_IOCTL_HGCM_CONNECT: idClient=%RX32 (rc=%Rrc)\n", idClient, rc));
        if (RT_SUCCESS(rc))
        {
            /*
             * Append the client id to the client id table.
             * If the table has somehow become filled up, we'll disconnect the session.
             */
            unsigned i;
            RTSpinlockAcquire(pDevExt->SessionSpinlock);
            for (i = 0; i aHGCMClientIds); i++)
                if (!pSession->aHGCMClientIds[i])
                {
                    pSession->aHGCMClientIds[i] = idClient;
                    break;
                }
            RTSpinlockRelease(pDevExt->SessionSpinlock);
            if (i >= RT_ELEMENTS(pSession->aHGCMClientIds))
            {
                LogRelMax(32, ("VBOXGUEST_IOCTL_HGCM_CONNECT: too many HGCMConnect calls for one session!\n"));
                VbglR0HGCMInternalDisconnect(idClient, pSession->fRequestor, vgdrvHgcmAsyncWaitCallback, pDevExt, RT_INDEFINITE_WAIT);
                pInfo->u.Out.idClient = 0;
                return VERR_TOO_MANY_OPEN_FILES;
            }
        }
        pInfo->u.Out.idClient = idClient;
        return rc;
    }
从该函数可以看出，它将调用`VbglR0HGCMInternalConnect`函数，然后返回一个`idClient`即客户端号，并将该号码缓存到`pSession->aHGCMClientIds`数组中，同时将其返回给Guest中的请求程序。我们继续跟进`VbglR0HGCMInternalConnect`函数
    DECLR0VBGL(int) VbglR0HGCMInternalConnect(HGCMServiceLocation const *pLoc, uint32_t fRequestor, HGCMCLIENTID *pidClient,
                                              PFNVBGLHGCMCALLBACK pfnAsyncCallback, void *pvAsyncData, uint32_t u32AsyncData)
    {
        int rc;
        if (   RT_VALID_PTR(pLoc)