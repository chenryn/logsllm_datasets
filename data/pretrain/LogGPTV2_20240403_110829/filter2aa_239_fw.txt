            HorizontalAlignment="Left" VerticalAlignment="Center" />
新的用户控件通过给MainWindow.xaml添加一个Hyperlink来启动。它使用Command
属性来指定ShowBooks命令。该命令绑定必须也指定为调用OnShowBooksList事件处理程
序（代码文件BooksDemoRibbon/MainWindow.xaml）：
        Show Book
          Show Books List
事件处理程序的实现代码给TabControl添加一个新的TabItem控件，把Content指定为
用户控件BooksUC，将TabControl的选择设置为新建的TabItem（代码文件
BooksDemoRibbon/MainWindow. xaml.cs）：
    private void OnShowBooksList(object sender, ExecutedRoutedEventArgs e)
    {
      var booksUI = new BooksUC();
      this.tabControl1.SelectedIndex =
        this.tabControl1.Items.Add(
        new TabItem { Header="Books List", Content=booksUI});
    }
因为DockPanel将Book数组赋予DataContext，列表框放在DockPanel中，所以列表框会
用默认模板显示所有图书，如图34-20所示。
图34-20
为了使列表框有更灵活的布局，必须定义一个模板，就像第33章为列表框定义样式那
样。列表框的ItemTemplate定义了一个带标签元素的DataTemplate。标签的内容绑定到
Title上。列表项模板重复应用于列表中的每一项，当然也可以把列表项模板添加到资源内
部的样式中。
34.7.7 主从绑定
除了显示列表中的所有元素之外，还应能显示选中项的详细信息。这不需要做太多的
工作。标签和文本框控件已经定义好了，当前它们只显示列表中的第一个元素。
这里必须对列表框进行一个重要的修改。在默认情况下，把标签绑定到列表的第一个
元素上。设置列表框的属性IsSynchronizedWithCurrentItem =“True”，就会把列表框的选项
设置为当前项（代码文件BooksDemoLib/Controls/BooksUC.xaml）。
34.7.8 多绑定
Binding是可用于数据绑定的类之一。BindingBase是所有绑定的抽象基类，有不同的
具体实现方式。除了Binding之外，还有MultiBinding和PriorityBinding。MultiBinding允许
把一个WPF元素绑定到多个源上。例如，Person类有LastName和FirstName属性，把这两
个属性绑定到一个WPF元素上会比较有趣（代码文件MultiBindingSample/Person.cs）：
    public class Person
    {
      public string FirstName { get; set; }
      public string LastName { get; set; }
    }
对于MultiBinding，标记扩展不可用——因此必须用XAML元素语法来指定绑定。
MultiBinding的子元素是指定绑定到各种属性上的Binding元素。这里使用了LastName和
FirstName属性。数据上下文用Grid元素设置，以便引用person1资源。
为了把属性连接在一起，MultiBinding使用一个Converter把多个值转换为一个。这个
转换器使用一个参数，并可以根据参数进行不同的转换（代码文件
MultiBindingSample/MainWindow.xaml）：
              FirstLast
多值转换器实现IMuitlValueConverter接口。这个接口定义了两个方法：Convert和
ConvertBack（）。Convert（）方法通过第一个参数从数据源中接收多个值，并把一个值
返回给目标。在实现代码中，根据参数的值是FirstName还是LastName，生成不同的结果
（代码文件MultiBindingSample/PersonNameConverter.cs）：
      using System;
      using System.Globalization;
      using System.Windows.Data;
      namespace MultiBindingSample
      {
        public class PersonNameConverter : IMultiValueConverter
        {
          public object Convert(object[] values, Type targetType, object paramete
r,
                            CultureInfo culture)
          {
          switch (parameter as string)
          {
            case "FirstLast":
              return values[0] + " " + values[1];
            case "LastFirst":
              return values[1] + ", " + values[0];
            default:
              throw new ArgumentException($"invalid argument {parameter}");
          }
          }
          public object[] ConvertBack(object value, Type[] targetTypes,
                                object parameter, CultureInfo culture)
          {
          throw new NotSupportedException();
          }
        }
      }
在这个简单的情形中，只把一些字符串与MultiBinding合并起来，并不需要实现
IMultiValue-Converter，定义一个格式字符串就足够了，如下面的XAML代码段所示。用
MultiBinding定义的格式字符串首先需要一个{}前缀。在XAML中，花括号通常定义一个
标记表达式。把{}用作前缀会转义这个符号，不定义标记表达式，而是表示它后面的是一
个通常的字符串。该示例指定，两个Binding元素用一个逗号和一个空白分隔开（代码文
件MultiBindingSample/MainWindow.xaml）：
34.7.9 优先绑定
PriorityBinding非常便于绑定还不可用的数据。如果通过PriorityBinding需要一定的时
间才能得到结果，就可以通知用户目前的进度，让用户知道需要等待。
为了说明优先绑定，使用PriorityBindingDemo项目来创建Data类。调用
Thread.Sleep（）方法，来模拟访问ProcessSomeData属性需要一些时间（代码文件
PriorityBindingSample/Data.cs）：
    public class Data
    {
      public string ProcessSomeData
      {
        get
        {
        Task.Delay(8000).Wait(); // blocking call
        return "the final result is here";
        }
      }
    }
Information类给用户提供信息。从Info2属性返回信息5秒后，立刻返回Info1属性的信
息。在实际的实现代码中，这个类可以与处理数据的类关联起来，从而给用户提供估计的
时间范围（代码文件PriorityBindingSample/Information.cs）：
    public class Information
    {
      public string Info1 => "please wait...";
      public string Info2
      {
        get
        {
        Task.Delay(5000).Wait(); // blocking call
        return "please wait a little more";
        }
      }
    }
在MainWindow.xaml文件中，在Window的资源内部引用并初始化Data类和Information
类（代码文件PriorityBindingDemo/MainWindow.xaml）：
PriorityBinding在Label的Content属性中替代了正常的绑定。PriorityBinding包含多个
Binding元素，其中除了最后一个元素之外，其他元素都把IsAsyncs属性设置为True。因
此，如果第一个绑定表达式的结果不能立即使用，绑定进程就选择下一个绑定。第一个绑
定引用Data类的ProcessSomedata属性，这需要一些时间。所以，选择下一个绑定，并引用
Information类的Info2属性。Info2属性没有立刻返回结果，而且因为设置了IsAsyncs属性，
所以绑定进程不等待，而是继续处理下一个绑定。最后一个绑定使用Info1属性。如果它
没有立刻返回结果，就要等待，因为它的IsAsyncs属性设置为默认值False。
启动应用程序，会在用户界面中看到消息“please wait…”。几秒后从Info2属性返回结
果“please wait a little more”。它替换了Info1的输出。最后，ProcessSomeData的结果再次替
代了Info2的结果。
34.7.10 值的转换
返回到BooksDemo应用程序中。图书的作者还没有显示在用户界面中。如果将
Authors属性绑定到标签元素上，就要调用Array类的ToString（）方法，它只返回类型的
名称。一种解决方法是将Authors属性绑定到一个列表框上。对于该列表框，可以定义一
个模板，以显示特定的视图。另一种解决方法是将Authors属性返回的字符串数组转换为
一个字符串，再将该字符串用于绑定。
StringArrayConverter类可以将字符串数组转换为字符串。WPF转换器类必须实现
System. Windows.Data名称空间中的IValueConverter接口。这个接口定义了Convert（）和
ConvertBack（）方法。在StringArrayConverter类中，Convert（）方法会通过
String.Join（）方法把value变量中的字符串数组转换为字符串。从Convert（）方法接收的
parameter变量中提取Join（）方法的分隔符参数（代码文件
BooksDemoLib/Utilities/StringArrayConverter.cs）。
  注意： String类的方法的更多信息参见第10章。
    using System;
    using System.Diagnostics.Contracts;
    using System.Globalization;
    using System.Windows.Data;
    namespace Wrox.ProCSharp.WPF.Utilities
    {
      [ValueConversion(typeof(string[]), typeof(string))]
      class StringArrayConverter : IValueConverter
      {
        public object Convert(object value, Type targetType, object parameter,
                          CultureInfo culture)
        {
        if (value == null) return null;
        string[] stringCollection = (string[])value;
        string separator = parameter == null;
        return String.Join(separator, stringCollection);
        }
        public object ConvertBack(object value, Type targetType, object parameter
,
                            CultureInfo culture)
        {
        throw new NotImplementedException();
        }
      }
    }
在XAML代码中，StringArrayConverter类可以声明为一个资源，以便从Binding标记扩
展中引用它（代码文件BooksDemoLib/Controls/BooksUC.xaml）：
为了输出多行结果，声明一个TextBlock元素，将其TextWrapping属性设置为Wrap，
以便可以显示多个作者。在Binding标记扩展中，将Path设置为Authors，它定义为一个返
回字符串数组的属性。Converter属性指定字符串数组从stringArrayConverter资源中转换。
转换器实现的Convert（）方法接收ConverterParameter=', ’作为输入来分隔多个作者。
图34-21显示了图书的详细信息，包括作者。
图34-21
34.7.11 动态添加列表项
如果列表项要动态添加，就必须通知WPF元素：要在列表中添加元素。
在WPF应用程序的XAML代码中，要给StackPanel添加一个按钮元素。给Click事件指
定OnAddBook（）方法（代码文件BooksDemo/Controls/BooksUC.xaml）：
在OnAddBook（）方法中，将一个新的Book对象添加到列表中。如果用BookFactory
测试应用程序（因为它已实现），就不会通知WPF元素：已在列表中添加了一个新对象
（代码文件BooksDemoLib/Controls/BooksUC.xaml.cs）。