title:ERIC: An Efficient and Practical Software Obfuscation Framework
author:Alperen Bolat and
Seyyid Hikmet Çelik and
Ataberk Olgun and
Oguz Ergin and
Marco Ottavi
3
5
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
ERIC: An Efﬁcient and Practical Software
Obfuscation Framework
Alperen Bolata, Seyyid Hikmet C¸ elika, Ataberk Olguna, O˘guz Ergina, Marco Ottavib
aTOBB University of Economics and Technology, Turkey,
bUniversity of Twente, The Netherlands and University of Rome Tor Vergata, Italy
a{alperenbolat, seyyidhikmetcelik, aolgun, oergin}@etu.edu.tr, PI:EMAIL
Abstract—Modern cloud computing systems distribute soft-
ware executables over a network to keep the software sources,
which are typically compiled in a security-critical cluster, se-
cret. However, these executables are still vulnerable to reverse
engineering techniques that can extract secret information from
programs (e.g., an algorithm, cryptographic keys), violating the
IP rights and potentially exposing the trade secrets of the
software developer. Malicious parties can (i) statically analyze the
disassembly of the executable (static analysis) or (ii) dynamically
analyze the software by executing it on a controlled device and
observe performance counter values or exploit side-channels to
reverse engineer software (dynamic analysis).
We develop ERIC, a new, efﬁcient, and general software
obfuscation framework. ERIC protects software against (i) static
analysis, by making only an encrypted version of software
executables available to the human eye, no matter how the
software is distributed, and (ii) dynamic analysis, by guaranteeing
that an encrypted executable can only be correctly decrypted and
executed by a single authenticated device. ERIC comprises key
hardware and software components to provide efﬁcient software
obfuscation support: (i) a hardware decryption engine (HDE)
enables efﬁcient decryption of encrypted hardware in the target
device, (ii) the compiler can seamlessly encrypt software exe-
cutables given only a unique device identiﬁer. Both the hardware
and software components are ISA-independent, making ERIC
general. The key idea of ERIC is to use physical unclonable
functions (PUFs), unique device identiﬁers, as secret keys in
encrypting software executables. Malicious parties that cannot
access the PUF in the target device cannot perform static or
dynamic analyses on the encrypted binary.
We develop ERIC’s prototype on an FPGA to evaluate it end-
to-end. Our prototype extends RISC-V Rocket Chip with the
hardware decryption engine (HDE) to minimize the overheads
of software decryption. We augment the custom LLVM-based
compiler to enable partial/full encryption of RISC-V executables.
The HDE incurs minor FPGA resource overheads, it requires
2.63% more LUTs and 3.83% more ﬂip-ﬂops compared to
the Rocket Chip baseline. LLVM-based software encryption
increases compile time by 15.22% and the executable size by
1.59%. ERIC is publicly available and can be downloaded from
https://github.com/kasirgalabs/ERIC.
Index Terms—Software Obfuscation, Trusted Execution, Hard-
ware Authentication
I. INTRODUCTION
the Internet of Things
With the rising trend in the use of electronic devices
in the context of
(IoT), more
and more devices communicate with each other over net-
works [33], [20], [22], [1]. Maintaining secure and reliable
communication channels between multiple devices over a net-
work is important to provide security and reliability guarantees
for a wide variety of applications [3], [53].
Embedded systems typically consist of processors or pro-
cessing units that execute a program. These systems often
serve a speciﬁc purpose and are not as capable as general-
purpose systems in terms of performance, power budget, and
computational capability [35], [18]. Programs that are executed
by embedded systems are often compiled in more capable
computing systems (e.g., personal computers, cloud systems)
and their compiled binaries are delivered to the embedded
systems over physical interfaces (e.g., serial connection) or
over a network [21], [6], [26], [21]. Typically, these binaries
implicitly encapsulate critical information (e.g., architectural
details of the target hardware and sophisticated, trade secret
algorithm implementations) [38], [50]. It is important that this
information is not exposed to malicious parties.
We identify two types of attacks that threaten the secrecy of
critical information embedded in binaries. First, a binary can
be converted into a human-readable form by using standard
compiler tools (e.g., disassembler) and can be analyzed to
identify critical information [15], [27], [45], [5], [51]. We refer
to these types of attacks as static-analysis attacks. Second, a
binary can be executed on a computer that is controlled by
malicious parties and the computer’s state (e.g., performance
counters, register values) can be monitored to reverse engineer
the source code from the binary. We refer to these types of
attacks as dynamic-analysis attacks [44], [46], [42], [4], [10].
Our goal is to design a new framework that can prevent both
static and dynamic-analysis attacks.
We propose ERIC, a new framework that keeps program
information secret regardless of how the program is trans-
ferred from its source to the destination hardware platform.
To do so, ERIC uses cryptographic keys that are generated
from an identiﬁer unique to a target hardware device (e.g.,
physical unclonable functions) to encrypt program binaries.
The encrypted program can only be decrypted by the target
hardware device, preventing malicious parties from performing
static and dynamic analyses.
ERIC is composed of two components: First, a new com-
piler supports partial and complete encryption of software
executables (i.e., program binary). Second, a hardware decryp-
tion engine enables efﬁcient decryption of encrypted binaries.
ERIC uses physical unclonable functions (PUFs) to generate
cryptographic keys that are used in symmetric encryption and
decryption of program binaries. In this way, ERIC guarantees
that an encrypted binary can only be decrypted and executed
by the target hardware.
We develop ERIC’s FPGA-based prototype and integrate
it
into a real RISC-V system to evaluate ERIC end-to-
end. We implement ERIC’s compiler by augmenting LLVM
to perform encryption on RISC-V binaries. Our prototype
builds on open source projects and itself is open sourced on
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00053
466
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
https://github.com/kasirgalabs/ERIC. We hope that our open
source prototype will be of use to industry and researchers
going forward.
We evaluate ERIC end-to-end using multiple workloads
to understand how its hardware and software components