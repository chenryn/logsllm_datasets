### 清除路径“CleanPath”伪代码解析

`CleanPath` 函数旨在处理和简化文件路径，具体来说，它会忽略某些特定的目录遍历序列和驱动器号。例如，如果在路径开头找到 `..` 序列，则该序列将被省略；同样地，任何以 `C:\` 或 `C:` 开头的路径也将被删除，甚至包括类似 `C:\C:` 的未知情况。

值得注意的是，此函数对第一个字符并不敏感，因此以下格式也将被排除：`_:\`, `_:` 以及 `_:\\_:`（其中下划线代表任意值）。

### 利用漏洞创建攻击向量

为了利用WinRAR中的目录遍历漏洞，从而实现将归档文件解压至任意位置（如启动文件夹），必须绕过两个过滤机制。通常情况下，`final_file_path` 是通过连接目标文件夹与相对路径来生成的。然而，若要触发漏洞，可使用空字符串代替目标文件夹，导致最终路径变为相对路径本身。

`GetDevicePathLen` 函数在此过程中扮演重要角色，其返回值取决于相对路径的内容。对于如下两种情况：
- 选项1: `C:\some_folder\some_file.ext`
- 选项2: `some_folder\some_file.ext`

`GetDevicePathLen` 将为选项1返回大于零的值，但对于选项2则不会。不过，由于存在一个名为 `CleanPath` 的过滤函数，它会在调用 `GetDevicePathLen` 前移除路径中的 `C:` 部分，这使得我们可以通过添加额外的 `C:` 来规避限制，比如使用 `C:\C:\some_folder\some_file.ext`，最终会被转换成 `C:\some_folder\some_file.ext`。

此外，还有一种针对SMB协议的攻击方式，允许连接到任意IP地址并在指定路径上创建文件或文件夹，例如:
```
C:\\\10.10.10.10\smb_folder_name\some_folder\some_file.ext
```
会被转换为：
```
\\10.10.10.10\smb_folder_name\some_folder\some_file.ext
```

### 构造实际的漏洞利用案例

尽管更改存档扩展名并精心设计文件名字段看似简单，但实际上需要克服多个障碍才能成功将恶意软件放置于启动文件夹内。例如，不同用户的启动文件夹路径可能不同，且访问某些路径需要较高的权限级别。一种方法是创建大量具有不同用户名变体的压缩文件，希望通过这种方式至少有一个能够匹配目标系统配置。

### 最强攻击向量

发现了另一种更有效的攻击手段，即通过构造特殊形式的文件名字段（如 `C:\C:C:../AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\some_file.exe`），可以绕过所有现有防护措施直接达到目的。这种方法依赖于 `CleanPath` 和 `GetDevicePathLen` 函数之间的交互作用，使得即使没有明确知道用户名也能够执行代码。

### 补充说明

研究过程中发现了一个Linux版本的unacev2.dll替代品——unace-nonfree，并且找到了源码中存在但未包含在当前发行版中的其他安全问题。相关CVE编号为CVE-2018-20250, CVE-2018-20251, CVE-2018-20252, CVE-2018-20253。作为回应，WinRAR已决定移除UNACEV2.dll支持，并感谢Check Point Software Technologies对此问题的报告。

---

希望上述优化后的描述能更好地帮助理解相关技术细节及潜在风险。