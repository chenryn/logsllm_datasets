exipration time.)
2.3 MICROPAY3: Using an “Invisible” VTS
MICROPAY2 requires the intervention of T in every win-
ning transaction. We now present an optimistic solution
MICROPAY3 where the VTS T is only invoked when either
user or merchant deviates from their prescribed instructions.
In this sense, the trusted third party T is invisible in the op-
timistic (honest) case. (MICROPAY3, however, no longer
implements faster validation time than Bitcoin.)
MICROPAY3 proceeds similarly to MICROPAY2, with
the key diﬀerence being that we now use 2 escrow addresses.
Roughly speaking, the idea is that U should release the
money to M whenever M receives a winning ticket. The
problem with naively implementing this approach is that
whenever U learns that M received a winning ticket, it may
try to spend the escrow back to itself before M can claim
the escrow.
To prevent this attack, we use two escrow addresses. Money
from the ﬁrst escrow address gets released if U agrees to a
(micro)-transaction to M . Money from the second escrow
address can only be released to either a) M if either U or T
agree, or b) U if T agrees. Speciﬁcally, whenever M has a
winning ticket, it spends the money from escrow 1 to escrow
2. It then asks U ’s help to spend from escrow 2 to its own
address. Note that by condition a) U can only release from
escrow 2 to M , so there is no way for U to (on its own)
“revoke” the escrow when it learns that M won. If U is not
willing to release escrow 2, M can contact T to spend escrow
2. Condition b), on the other hand, is used to prevent M
from “orphaning” escrow 1 to escrow 2 even when it does
not have a winning ticket. Note that M can always transfer
the money from escrow 1 to escrow 2 as long as U agrees to
a micropayment (even if M didn’t win the lottery). When
this happens, U can request that T spends the escrow back
to U . We can implement this idea using multi-signatures.
2112
(σ2, aesc
2
1 , aesc
1 , aesc
1 (σ1, aesc
2 ) w.r.t pkesc
Let (cid:101)Πesc
Deﬁne (cid:101)ΠaU ,aM
condition (cid:101)ΠaU ,aM
a2 = aM and σ2 is a signature of the transaction (aesc
w.r.t pkesc
the transaction (aesc
2 ) = 1 if and only if σ1 is a signa-
ture of the transaction (aesc
1 . This condi-
tion can be implemented with a standard release condition.
2 , a2) to be 1 if and only if either (a)
2 , aM )
2 or pkT , or (b) a2 = aU and σ2 is a signature of
2 , aU ) w.r.t pkT . Formally, the release
can be encoded by taking the OR of two
multi-signature requires: either there is a 2-out-of-3 multi-
signature by parties U , M , and T , or there is a 2-out-of-2
multi-signature by U and T . In the optimistic case, parties
U and M provide signatures on a transaction to aM and sat-
isfy the ﬁrst clause of the OR condition; if U refuses, then
parties M and T can provide signatures on a transaction
to aM , and if M orphans an escrow, then parties U and T
can provide signatures on transaction to aU and satisfy the
second clause of the OR-condition.
• Escrow Set-up: To initialize a “lottery-ticket”, a user
U with an address a = (pk, Πstd) containing X bit-
coins generates a new key-pair (pkesc
1 ) and trans-
fers the X bitcoins to the ﬁrst “escrow” account aesc
1 =
(pkesc
1 ) (by signing (a, aesc) using its key corre-
sponding to pk).
1 ,(cid:101)Πesc
1 , skesc
• Payment Request: This step is the same as in MI-
CROPAY1; M sends the pair (c, aM ) to the payer U .
• Payment Issuance: If the user U wants to agree to
send a probabilistic payment pay X/100, it picks a ran-
dom string r2, generates a new address aU , generates a
2 , ˜ΠaU ,aM
new key-pair (pkesc
).
It then creates 1) a signature σ1 on the transaction
2 ), and 2) a signature σ on c, r2, aM (w.r.t. to
1 , aesc
(aesc
1 ), and sends aU , aesc
pkesc
2 , σ1, σ to the merchant. The
merchant checks that aesc
is well formed (i.e, that the
2
˜ΠaU , aM ) and that signatures are
release condition is
valid.
2 ) and lets aesc
2 = (pkesc
2 , skesc
• Claim Prize: If M has received a winning lottery
1 , aesc
ticket, then M ﬁrst publishes the transaction (aesc
2 )
to the ledger using the signature σ1 to satisfy the re-
lease condition.
1 , aesc
Once this transaction has been conﬁrmed on the blockchain,
M convinces U that it has a winning lottery ticket, and
then asks U for a signature that allows it to spend aesc
2
to aM . Speciﬁcally, M sends U a tuple (x, aesc
2 , aM )
such that x = (c, r1, s, r2, σ), c = Com(r1; s), σ is a
valid signature on (c, r2, aM ) w.r.t. pkesc
1 , and the last
2 digits of r1 ⊕ r2 are 00. After verifying all of those
2 , aM )
conditions, U computes a signature σ2 on (aesc
w.r.t. pkesc
2 and sends the signature to M .
2 , aU ) to the
Finally, M publishes the transaction (aesc
ledger using σ2 (and a signature it computes on its own
w.r.t. pkM ) as the release condition. If U does not send
M a valid signature σ2 within a certain timeout, then
M invokes the Resolve Aborted Prize method.
1 , aesc
• Resolve Aborted Prize: When T receives a tu-
2 , aM ) such that x = (c, r1, s, r2, σ), c =
ple (x, aesc
Com(r1; s), σ is a valid signature on (c, r2, aM ) w.r.t.
1 , and if the last 2 digits of r1 ⊕ r2 are 00, T signs
pkesc
2 , aM ) w.r.t. pkT .
(aesc
• Resolve Orphaned Transaction: When T receives
a request (aesc, aU ) from U to resolve an “orphaned”
transaction ending up in escrow aesc
2 , it waits an ap-
propriate amount of time (say 10 minutes), to ensure
that any merchant that has a prize to claim has time
to do it. If nobody claimed the prize for escrow aesc
2 ,
T signs (aesc
2 , aU ) w.r.t. pkT .
Security Analysis.
It follows using standard cryptographic techniques that
the same security claims that held w.r.t. MICROPAY2 also
hold for MICROPAY3. Additionally, note that if U and M
are both executing the protocol honestly, T is never invoked.
2.4 Making Our Schemes Non-interactive
In all of our MICROPAY schemes, the merchant must
send the ﬁrst message to the payer, which is followed by the
payer “conﬁrming” the transaction. In some situation it may
be desirable for the merchant to be able to post a single, ﬁxed
ﬁrst message, that can be resued for an any number of users
(payers) and any number of transactions (and the payer still
just sends a single message conﬁrming the transaction).
We generalize ideas from Micali and Rivest [15]1 to modify
our scheme to be non-interactive in this respect. We present
this technique concretely for the MICROPAY1 scheme, but
note that the technique applies to all of our schemes. This
technique requires each transaction to be uniquely identiﬁed
by both Payer and Merchant; e.g. the rough time-of-day and
IP-address of the payer and merchant, which we denote as
t, can be used to identify the transaction.
Merchant Set-up: The merchant samples a veriﬁable un-
predictable function (VUF) [14] fm and a bitcoin ad-
dress aM and publishes fM , aM .
Escrow Set-up: The payer follows the same instructions
to setup an escrow; the release condition for the escrow
requires a witness (σ, y, π, t, aM ) such that
1. σ is a signature on (t, aM , fM ) w.r.t. to pkesc
2. π certiﬁes that fM (σ) = y (recall that each VUF
is associated with a proof systems which enables
certifying the output of the VUF on a particular
input).
3. H(y) begins with 00, where H is a hashfunction
(modeled as a random oracle).
Payment Issuance: To send a probabilistic payment of
X/100 for transaction t, the payer retrieves the func-
tion fM for the merchant, computes a signature σ on
t, aM , fM (w.r.t. to pkesc) and sends σ to the merchant.
The merchant veriﬁes that the signature is valid.
Claim prize: The merchant’s ticket is said to win the lot-
tery if H(fm(σ)) begins with 00.
1The central diﬀerence is that we rely on a veriﬁable un-
predictable function (VUF), whereas [15] rely on a verﬁable
random function (VRF); see [14] for deﬁnitions of these no-
tions. Relying on a VUF enables greater eﬃciency.
212Efﬁcient instantiations of VUFs.
Practical VUFs in the Random Oracle Model can be based
on either the RSA assumption (as in [15]), or the Compu-
tational Diﬃe-Hellman assumption, as we now show. This
new VUF (which leads to greater eﬃciency than the RSA
based one used in [15]) is the same as a construction from [9]
but for our purposes we only need to rely on the CDH as-
sumption (whereas [9] needs the DDH assumption). Let
G be a prime order group in which the CDH problem is
hard and g is a generator. The VUF is indexed by a secret
seed r ∈ Zq, and the public description of the function is
G, g, gr. On input y, the VRF evaluates to H(y)r, where
H is a random oracle, and produces a proof π which is a
non-interactive zero-knowledge proof in the random oracle
model that the pair (g, gr, H(y), H(y)r) form a DDH triple.
We further develop this scheme in the full version.
3.
IMPLEMENTATION IN BITCOIN
In this section, we describe how our schemes can be imple-
mented in Bitcoin. We begin with a more formal description
of the Bitcoin protocol.
3.1 Formal description of the Bitcoin protocol
A ledger consists of an (ordered) sequence of blocks, each
block consists of a sequence of transactions. Blocks and
transactions are uniquely identiﬁed by a hash of their con-
tents. Each transaction consists of a sequence of inputs and
a sequence of outputs. An input consists of a triple (tin, i, ω)
where tin is the identiﬁer (hash) of a previous transaction,
i is an index of an output in transaction tin, and ω is the
input script or the “cryptographic witness to spend the ith
output of transaction tin.” The ith output of a transaction t
consists of a triple (a, x, Πt,i) where a is an address, x is an
amount of Bitcoin, and Πt,i is a “release condition”, i.e. a
predicate that returns either true or false. A “cryptographic
witness” to spend an output (tin, i) is a string ω such that
Πtin,i(ω) = 1.
1,4) where h(cid:48)
An address a is formed from the public key of an ECDSA
key pair as follows: generate an ECDSA key pair (ask, apk),
then compute the hash h ← 00||ripemd-160(sha256(apk)),
compute a checksum h(cid:48) ← sha256(sha256(h)), and ﬁnally
compute the address a ← base58(h||h(cid:48)
1,4 are the
ﬁrst four bytes of h(cid:48) and base58 is a binary-to-text encoding
scheme2. Thus, given a public key pk, one can verify that it
corresponds to a particular address apk.
Suppose the i-th output of transaction tin is (a(cid:48), Π(cid:48), x(cid:48)).
An input (tin, i, ω) is valid if the following holds: (a) ω and
Π(cid:48) can be interpreted as a bitcoin script, and (b) after ex-
ecuting ω and then executing Π(cid:48) on a stack machine, the
machine has an empty stack and its last instruction returns
true. A transaction is considered valid if each of its inputs
are valid, and the sum of the amounts of the inputs is larger
than the sum of the amounts of the outputs.
A standard release condition Πstd mentioned earlier in this
paper simply requires a signature of the current transaction
using a key speciﬁed in Πstd. This condition is speciﬁed in
the Bitcoin scripting language as follows:
dup hash160 [h(pk)] eq verify checksig
An input script that satisﬁes this condition is ω = [σ] [pk].
To illustrate, we brieﬂy describe the steps to check the
release condition Πstd with script ω. First, ω = [σ] [pk]
is interpreted, which pushes the string σ and the string pk
onto the stack. Next, Πstd is interpreted. It ﬁrst duplicates
the argument on the top of the stack (pk), then hashes the
duplicated argument, pushes the hash of a particular public
key pk onto the stack, veriﬁes the equality of the ﬁrst two
arguments on the stack (which should be the string h(pk)
that was just pushed onto the stack and the hash of the
public key given by the input script ω), and if equal, then
checks the signature on the current transaction3 using the
next two arguments on the stack which are pk and σ.
Another common release condition is called a script hash.
In this case, the release condition only speciﬁes a hash of
the actual release condition script. This condition is usually
coded in the scripting language as
hash160 [h] eq verify
which is interpreted as a script that ﬁrst hashes the top ar-
gument on the stack, pushes the string h onto the stack, and