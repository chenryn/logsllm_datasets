Comparison to ideal analysis: We show that Iodine‚Äôs
optimization mechanism is so efÔ¨Åcient it approaches optimal
by comparing Iodine‚Äôs some-to-all results with a dynamically
gathered optimal analysis. Our optimal analysis only monitors
instructions that are dynamically found to propagate taint, the
very minimum set of instructions a some-to-all analysis could
gather. We measure the average dynamic overhead of this ideal
some-to-all taint analysis to be 13%. This shows that at 24%
overhead, Iodine is 86% closer to optimal than traditional
hybrid‚Äôs 92%, and beginning to truly approach the realm of
optimal dynamic taint analysis.
Fig. 8: Improved static analysis precision by assuming different
invariants for some-to-some analysis. Conservative analysis uses
a context-insensitive pointer-analysis, while the predicated analysis
can scalably apply a context-sensitive pointer analysis.
D. Memory Overheads
Iodine maintains the exact metadata state as a conservative
analysis. Therefore, the memory space overhead of metadata
tracking remains unchanged. Iodine does increase code-size by
generating two versions of the code: the fast-path and slow-
path. However, as only one version of the code is executed
at a time, this has little impact on the caching behavior or
performance of the program. On average, the code footprint
of a program instrumented by Iodine increases by 2.1√ó,
compared to 1.4√ó with conservative hybrid taint analysis, and
1.8√ó with pure dynamic taint analysis.
E. Iodine‚Äôs Framework Overheads
Invariant Check Cost: Figure 6 also isolates the invariant
checking costs. Invariant checks are only required in Iodine‚Äôs
optimistic analysis framework and are absent from the full
(cid:21)(cid:26)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: Static analysis time breakups for some-to-some taint analysis
Conservative Static Analysis
Predicated Static Analysis
Benchmark
qmqp-sink
qmqp-source
smtp-sink
smtp-source
sendmail
nginx
thttpd
redis
vim
gzip
Points-to
8s
7s
9s
11s
15s
19s
18s
1m 18s
32s
8s
Taint
4m 28s
14m 18s
6m 12s
11m 44s
16m 53s
20m 04s
17m 54s
19m 43s
61m 22s
8m 49s
Total
4m 36s
14m 25s
6m 21s
11m 55s
17m 08s
20m 24s
18m 12s
21m 01s
61m 54s
8m 58s
ProÔ¨Åling
1m 19s
1m 45s
2m 00s
2m 19s
2m 02s
1m 12s
59s
2m 01s
5m 12s
7m 03s
Points-to‚Ä†
12s
5s
16s
9s
13s
12s
16s
10s
88s
17s
Taint
36s
1m 12s
44s
1m 08s
1m 37s
1m 30s
1m 14s
1m 25s
2m 54s
1m 22s
Total
2m 07s
3m 02s
3m 39s
3m 35s
4m 32s
2m 54s
2m 29s
3m 35s
9m 35s
8m 42s
‚Ä†
Our optimistic framework enables us to scalably apply more accurate context-sensitive points-to analysis during the predicated static analysis
dynamic and conservative hybrid analysis. Overall we observe
that invariant checks have nearly no effect on end runtime,
incurring only 2% of overall execution time.
Checking likely-unreachable-code incurs almost no over-
head. Checking likely-callee-sets requires small set inclusion
checks upon function pointer updates, which are fairly rare.
Likely-unused-call-contexts involve checking if current call-
context is among those assumed during static-analysis, and we
optimize it by hashing the call-stack to lookup a Bloom-Ô¨Ålter
thereby avoiding majority of expensive checks [18].
Invariant Violations and Switching Overhead: Overall
Iodine observes largely inconsequential rates of invariant vi-
olations, with only sendmail, redis and vim violating
an invariant during some-to-all analysis in 3, 2, and 5 (out
of 100) executions respectively. This indicates that our proÔ¨Ål-
ing methodology captures the common-case dynamic execu-
tion behavior effectively, signÔ¨Åicantly optimizing the dynamic
analysis. The amortized overhead of the slow path analysis
resulting from these violations is less than 0.5%. Note that the
slow-path overhead can be no worse than that of conservative
hybrid analysis.
We also Ô¨Ånd that the runtime overhead of the switching
mechanism at function call return sites, discussed in ¬ßV-E, is
negligible.
F. Precise and Scalable Static Analysis
Figure 8 shows how assuming different types of invariants
successively reduces the number of required static monitors
for a some-to-some taint analysis. While the conservative
static analysis requires instrumenting 63% instructions on
average, our predicated static taint analysis nearly halves
this value at 37%, providing the foundation for Iodine‚Äôs
impressive performance results. This translates to eliding
54%(nginx)‚àí86%(vim) of the dynamic taint checks from
a conservatively optimized analysis.
Table I summarizes the breakdown of static analysis times
for both the conservative static and our predicated static
versions. Applying the invariant assumptions to constrain the
static analysis search space enables us to scalably apply a
context-sensitive pointer analysis. This further improves the
precision of our predicated static analysis. We see that a
reasonable effort spent in proÔ¨Åling signiÔ¨Åcantly reduces the
the total static
overall static taint analysis time. In fact,
analysis time including the proÔ¨Åling time is lower than that
of conservative static analysis for all our test programs. This
makes Iodine suitable for deployment in production where
the applications are constantly evolving thereby requiring re-
analyzing them statically for hybrid analysis.
G. ProÔ¨Åling During Regression Testing Is Effective
An important concern with proÔ¨Åle-based optimizations is
the time and effort spent in proÔ¨Åling as well as the system‚Äôs
sensitivity to the proÔ¨Åle set. Unlike proÔ¨Åle-based optimizations
that try to capture frequently executed program states, we
propose a conservative but effective methodology that attempts
to capture all feasible program states. We observe that software
regression tests seek to maximize code and path coverage, and
are therefore good candidates for conservative proÔ¨Åling.
We evaluate this approach by proÔ¨Åling three programs-
nginx, redis on their packaged regression test suites, and
vim on open-source test suites [44], [45]. The results in Fig-
ure 9 show that proÔ¨Åling on regression test suites alone is very
effective. It reduces the runtime overhead to 31% compared to
55% with conservative hybrid analysis. We however observe
invariants being violated dynamically after this proÔ¨Åling, and
so recommend further proÔ¨Åling on beta tests. We use our
original set of 400 proÔ¨Åle inputs (in ¬ßVI-A) as a proxy for beta
testing. ProÔ¨Åling on the beta tests (shaded right halves) reduces
the invariant violation rate signiÔ¨Åcantly and brings down the
analysis overhead to 23%.
Thus, we leverage the existing software testing suites to
perform Iodine‚Äôs initial proÔ¨Åling, and recommend reasonable
beta testing for learning invariants to optimize Iodine. Mature
software systems have well designed regression test suites
that attain high code coverage. As a result, we Ô¨Ånd that
our likely unreachable code invariants were learnt accurately
after proÔ¨Åling regression tests. Most invariant violations after
proÔ¨Åling on regression test suites were due to likely callee
sets and likely unrealized call contexts, mainly because test
suites often invoke many functions only in some mock context.
ProÔ¨Åling on a few actual executions during beta tests easily
overcomes this. Alternatively, improving test suites that attain
high coverage for calling contexts [46] can be effective, as can
learning invariants during production runs.
(cid:22)(cid:17)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:28 UTC from IEEE Xplore.  Restrictions apply. 
2926
21 18
14 11 11 11 11 11
7
7
6
6
5
5
5
5
Regression Tests
Beta Tests
s
t
n
a
i
r
a
v
n
i
d
e
l
i
f
o
r
p
f
o
r
e
b
m
u
n
d
e
z
i
l
a
m
r
o
N
2.0
1.8
1.6
1.4
1.2
1.0
400
300
500
Profiling time (s)
(c) vim
2000
2500
0
100
200
600
700
800
2.0
1.8
1.6
1.4
e
m
i
t
s
i
s
y
l
a
n
a
c
i
m
a
n
y
d
d
e
z
i
l
a
m
r
o
N
1.2
1.0
2.0
1.8
1.6
1.4
1.2
1.0
16
16 13
9
6
4
4
4
4 4
0
0
0
0
0
0
0
0
Regression Tests
Beta Tests
0
20
40
120
140
160
60
80
100
Profiling time (s)
(a) nginx
18
18
17
15
12
9
8
8
8
5
8 5
22
2
3332
32
Beta
Tests
0
500
Regression Tests
1000
1500
Profiling time (s)
(b) redis
Fig. 9: ProÔ¨Åling invariants while software testing: ProÔ¨Åling is done in two phases- Ô¨Årst on regression test suites (left unshaded), and then
on beta tests (right shaded). The solid marked lines plot analysis overheads with Iodine using invariants gathered at different stages of proÔ¨Åling.
The numbers labeled on the plot indicate the number of dynamic invariant violations. The horizontal solid lines representing conservative
hybrid analysis are an upper bound to Iodine‚Äôs runtime overheads. The dashed lines against the secondary (right) y-axis plot the number of
invariants used normalized to that after proÔ¨Åling a single execution.
	





	










	





 
 




	






	






























Fig. 10: Iodine‚Äôs performance beneÔ¨Åts reduce with larger
fractions of the program‚Äôs data space being tainted. Fraction
of taints observed for realistic taint policies (¬ßVI-B) are
annotated.
Moreover, Iodine is resilient to weak proÔ¨Åling. Our analysis
needs no guarantees that all states are proÔ¨Åled; and even if the
invariants fail dynamically, the constructed optimized analysis
is still sound. Failing invariants can be learned over time
and the optimized analysis can be adaptively re-constructed to
exclude those without requiring analysis rollbacks (¬ßVII). Un-
like a carefully crafted ‚Äòbootstrapping‚Äô process that ultimately
determines its effectiveness, Iodine requires test suites with
reasonable coverage for proÔ¨Åling, and is moreover resilient to
proÔ¨Åling inaccuracies.
H. Sensitivity to Fraction of Tainted Data
Hybrid analyses (both traditional and Iodine) elide in-
strumentation that cannot propagate taint. As a growing set
of inputs carry taints, the taints spread faster to nearly the
program‚Äôs entire data space. If nearly all data is tainted, there