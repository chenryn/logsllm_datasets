**作者：DEADF1SH_CAT@知道创宇404实验室  
时间：2020年8月3日**
## 前言
Oracle七月发布的安全更新中，包含了一个Weblogic的反序列化RCE漏洞，编号CVE-2020-14645，CVS评分9.8。
该漏洞是针对于CVE-2020-2883的补丁绕过，CVE-2020-2883补丁将`MvelExtractor`和`ReflectionExtractor`列入黑名单，因此需要另外寻找一个存在`extract`且方法内存在恶意操作的类，这里用到的类为`com.tangosol.util.extractor.UniversalExtractor`,存在于Coherence组件。
## CVE-2020-2883
先来回顾一下CVE-2020-2883的两个poc调用链
    //poc1
     javax.management.BadAttributeValueExpException.readObject()
       com.tangosol.internal.sleepycat.persist.evolve.Mutations.toString()
         java.util.concurrent.ConcurrentSkipListMap$SubMap.size()
         java.util.concurrent.ConcurrentSkipListMap$SubMap.isBeforeEnd()
           java.util.concurrent.ConcurrentSkipListMap.cpr()
             com.tangosol.util.comparator.ExtractorComparator.compare()
               com.tangosol.util.extractor.ChainedExtractor.extract()
               com.tangosol.util.extractor.ReflectionExtractor().extract()
                 Method.invoke()
                 //...
               com.tangosol.util.extractor.ReflectionExtractor().extract()
                 Method.invoke()
                   Runtime.exec()
    //poc2
    java.util.PriorityQueue.readObject()
      java.util.PriorityQueue.heapify()
      java.util.PriorityQueue.siftDown()
      java.util.PriorityQueue.siftDownUsingComparator()
      com.tangosol.util.extractor.AbstractExtractor.compare()
        com.tangosol.util.extractor.MultiExtractor.extract()
          com.tangosol.util.extractor.ChainedExtractor.extract()
            //...
            Method.invoke()
                //...
              Runtime.exec()
其本质上，都是通过`ReflectionExtractor`调用任意方法，从而实现调用Runtime对象的exec方法执行任意命令，但补丁现在已经将`ReflectionExtractor`列入黑名单，那么只能使用`UniversalExtractor`重新构造一条利用链，这里使用poc2的入口即CommonsCollections4链的入口进行构造。
## CVE-2020-14645
为了方便一些纯萌新看懂，此处将会从0开始分析反序列化链（啰嗦模式警告），并且穿插一些poc构造时需要注意的点，先来看看调用栈。
从头开始跟进分析整个利用链，先来看看`PriorityQueue.readObject()`方法。
第792会执行for循环，将`s.readObject()`方法赋给`queue`对象数组,跟进`heapify()`方法。
这里会取一半的queue数组分别执行`siftDown(i, (E)
queue[i]);`，实质上`PriorityQueue`是一个最小堆，这里通过`siftDown()`方法进行排序实现堆化，那么跟进`siftDown()`方法。
这里有个对于`comparator`的判定，我们暂时不考虑`comparator`的值是什么，接下来会使用到，我们先跟进`siftDownUsingComparator()`方法。
重点关注`comparator.compare()`方法，那么我们先来看看`comparator`是怎么来的。
是在`PriorityQueue`的构造函数中被赋值的，并且这里可以看到，`queue`对象数组也是在这里被初始化的。那么结合上述所分析的点，我们需要构造一个长度为2的`queue`对象数组，才能触发排序，进入`siftDown()`方法。同时还要选择一个`comparator`，这里选用`ExtractorComparator`。继续跟进`ExtractorComparator.compare()`方法。
这里将会调用`this.m_extractor.extract()`方法，让我们看看`this.m_extractor`是怎么来的。
可以看到，`this.m_extractor`的值是与传入的`extractor`有关的。这里需要构造`this.m_extractor`为`ChainedExtractor`，才可以调用`ChainedExtractor`的`extract()`方法实现串接`extract()`调用。因此，首先需要构造这样一个`PriorityQueue`对象：
    PriorityQueue queue = new PriorityQueue(2, new ExtractorComparator(chainedExtractor));
    //这里chainedExtractor为ChainedExtractor对象，后续会说明chainedExtractor对象的具体构造
继续跟进`ChainedExtractor.extract()`方法，可以发现会遍历`aExtractor`数组，并调用其`extract()`方法。
此处`aExtractor`数组是通过`ChainedExtractor`的父类`AbstractCompositeExtractor`的`getExtractors()`方法获取到父类的`m_aExtractor`属性值。
所以，poc中需要这样构造`m_aExtractor`：
    Class clazz = ChainedExtractor.class.getSuperclass();
    Field m_aExtractor = clazz.getDeclaredField("m_aExtractor");
    m_aExtractor.setAccessible(true);
`m_aExtractor`具体的值需要怎么构造，需要我们继续往下分析。先回到我们所要利用到的`UniversalExtractor`，跟进其`extract()`方法。
此处由于`m_cacheTarget`使用了`transient`修饰，无法被反序列化，因此只能执行else部分，跟进`extractComplex()`方法。
这里看到最后有`method.invoke()`方法，`oTarget`和`aoParam`都是我们可控的，因此我们需要看看`method`的处理，跟进`findMethod`方法。
可以看到第477行可以获取任意方法，但是要进入if语句，得先使`fExactMatch`为`true`，`fStatic`为`false`。可以看到`fStatic`是我们可控的，而`fExactMatch`默认为`true`，只要没进入for循环即可保持`true`不变，使`cParams`为空即`aclzParam`为空的Class数组即可，此处`aclzParam`从`getClassArray()`方法获取。
显而易见，传入一个空的`Object[]`即可。回到`extractComplex()`方法，此时我们只要我们进入第192行的else语句中，即可调用任意类的任意方法。但此时还需要`fProperty`的值为`false`，跟进`isPropertyExtractor()`方法。
可惜`m_fMethod`依旧是使用`transient`修饰，溯源`m_fMethod`的赋值过程。
可以看到，由于this对象的原因，`getValueExtractorCanonicalName()`方法始终返回的是null，那么跟进`computeValuExtractorCanonicalName()`方法。
此处不难理解，如果`aoParam`不为`null`且数组长度大于0就会返回`null`，因此我们调用的方法必须是无参的（因为`aoParam`必须为`null`）。接着如果方法名`sName`不以
() 结尾，则会直接返回方法名。否则会判断方法名是否以