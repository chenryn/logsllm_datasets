    ExecStart=/usr/sbin/hostapd_cli -i %i -a /usr/local/bin/802-1x-tr-mgmt
    ExecStopPost=-/usr/sbin/tc qdisc del dev %i clsact
    [Install]
    WantedBy=multi-user.target
    ```
3.  重新载入 systemd：
    ``` literallayout
    # systemctl daemon-reload
    ```
4.  启用并启动带有接口名称 `hostapd`{.literal} 正在侦听的
    `802-1x-tr-mgmt`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now 802-1x-tr-mgmt@br0.service
    ```
:::
::: itemizedlist
**验证**
-   通过客户端到网络进行身份验证。请参阅：
    ::: itemizedlist
    -   [针对 FreeRADIUS 服务器或验证器测试 EAP-TTLS
        身份验证](#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html#proc_testing-eap-ttls-authentication-against-a-freeradius-server-or-authenticator_assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend "针对 FreeRADIUS 服务器或验证器测试 EAP-TTLS 身份验证"){.link}
    -   [针对 FreeRADIUS 服务器或验证器测试 EAP-TLS
        身份验证](#assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend_configuring-and-managing-networking.html#proc_testing-eap-tls-authentication-against-a-freeradius-server-or-authenticator_assembly_setting-up-an-802-1x-network-authentication-service-for-lan-clients-using-hostapd-with-freeradius-backend "针对 FreeRADIUS 服务器或验证器测试 EAP-TLS 身份验证"){.link}
    :::
:::
::: itemizedlist
**其他资源**
-   `systemd.service(5)`{.literal} man page
:::
:::
:::
[]{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system_configuring-and-managing-networking.html#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system_configuring-and-managing-networking}第 19 章 使用存储在文件系统中的证书使用 802.1X 标准向网络验证 RHEL 客户端 {.title}
:::
管理员通常使用基于 IEEE 802.1X
标准的基于端口的网络访问控制（NAC）来保护网络不受未授权 LAN 和 Wi-Fi
客户端的影响。本节中的步骤描述了配置网络身份验证的不同选项。
::: section
::: titlepage
# []{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system_configuring-and-managing-networking.html#configuring-802-1x-network-authentication-on-an-existing-ethernet-connection-using-nmcli_authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system}使用 nmcli 在现有以太网连接中配置 802.1X 网络身份验证 {.title}
:::
使用 `nmcli`{.literal}
实用程序，您可以将客户端配置为向网络进行身份验证。这个步骤描述了如何在名为
`enp1s0`{.literal} 的现有 NetworkManager 以太网连接配置集中配置 TLS
身份验证，以向网络进行身份验证。
::: itemizedlist
**先决条件**
-   网络支持 802.1X 网络身份验证。
-   以太网连接配置集存在于 NetworkManager 中，且具有有效的 IP 配置。
-   客户端上存在 TLS 身份验证所需的以下文件：
    ::: itemizedlist
    -   客户端密钥存储于
        `/etc/pki/tls/private/client.key 文件`{.literal}中，该文件的所有者为
        `root`{.literal} 用户且只能由 root 用户读取。
    -   客户端证书存储在 `/etc/pki/tls/certs/client.crt`{.literal}
        文件中。
    -   证书颁发机构(CA)证书存储在 `/etc/pki/tls/certs/ca.crt`{.literal}
        文件中。
    :::
-   已安装 `wpa_supplicant`{.literal} 软件包。
:::
::: orderedlist
**步骤**
1.  将扩展验证协议(EAP)设置为
    `tls`{.literal}，并将路径设置为客户端证书和密钥文件：
    ``` literallayout
    # nmcli connection modify enp1s0 802-1x.eap tls 802-1x.client-cert /etc/pki/tls/certs/client.crt 802-1x.private-key /etc/pki/tls/certs/certs/client.key
    ```
    请注意，您必须在单个命令中设置
    `802-1x.eap`{.literal}、`802-1x.client-cert`{.literal} 和
    `802-1x.private-key`{.literal} 参数。
2.  设置 CA 证书的路径：
    ``` literallayout
    # nmcli connection modify enp1s0 802-1x.ca-cert /etc/pki/tls/certs/ca.crt
    ```
3.  设置证书中使用的用户身份：
    ``` literallayout
    # nmcli connection modify enp1s0 802-1x.identity PI:EMAIL
    ```
4.  另外，还可将该密码存储在配置中：
    ``` literallayout
    # nmcli connection modify enp1s0 802-1x.private-key-password password
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    默认情况下，NetworkManager 在
    `/etc/sysconfig/network-scripts/keys-connection_name`{.literal}
    文件中以明文形式保存密码，该文件只可由 `root`{.literal}
    用户读取。但是，在配置文件中清除文本密码会有安全隐患。
    要提高安全性，请将 `802-1x.password-flags`{.literal} 参数设置为
    `0x1`{.literal}。使用这个设置时，在运行 GNOME 桌面环境或
    `nm-applet`{.literal} 的服务器上，NetworkManager
    从这些服务中检索密码。在其他情况下，NetworkManager 会提示输入密码。
    :::
5.  激活连接配置集：
    ``` literallayout
    # nmcli connection up enp1s0
    ```
:::
::: itemizedlist
**验证步骤**
-   访问需要网络身份验证的网络上的资源。
:::
::: itemizedlist
**其他资源**
-   [配置以太网连接](#configuring-an-ethernet-connection_configuring-and-managing-networking.html "第 6 章 配置以太网连接"){.link}
-   `nm- settings(5)`{.literal} man page 中的 802-1x``{=html}
    设置部分
-   `nmcli(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system_configuring-and-managing-networking.html#proc_configuring-a-static-ethernet-connection-with-802-1x-network-authentication-using-nmstatectl_authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system}使用 nmstatectl 使用 802.1X 网络身份验证配置静态以太网连接 {.title}
:::
使用 `nmstate`{.literal} 工具，您可以创建一个使用 802.1X
标准验证客户端的以太网连接。这个步骤描述了如何使用以下设置为
`enp1s0`{.literal} 接口添加以太网连接：
::: itemizedlist
-   静态 IPv4 地址 - `192.0.2.1`{.literal} 和 `/24`{.literal} 子网掩码
-   静态 IPv6 地址 - `2001:db8:1::1`{.literal} 和 `/64`{.literal}
    子网掩码
-   IPv4 默认网关 - `192.0.2.254`{.literal}
-   IPv6 默认网关 - `2001:db8:1::fffe`{.literal}
-   IPv4 DNS 服务器 - `192.0.2.200`{.literal}
-   IPv6 DNS 服务器 - `2001:db8:1::ffbb`{.literal}
-   DNS 搜索域 - `example.com`{.literal}
-   使用 `TLS`{.literal} 可扩展身份验证协议(EAP)进行 802.1X
    网络身份验证.
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`nmstate`{.literal} 库只支持 `TLS`{.literal} EAP 方法。
:::
::: itemizedlist
**先决条件**
-   网络支持 802.1X 网络身份验证。
-   受管节点使用 NetworkManager。
-   客户端上存在 TLS 身份验证所需的以下文件：
    ::: itemizedlist
    -   存储的客户端密钥位于 `/etc/pki/tls/private/client.key`{.literal}
        文件中，该文件归 `root`{.literal} 用户所有且只可读。
    -   客户端证书存储在 `/etc/pki/tls/certs/client.crt`{.literal}
        文件中。
    -   证书颁发机构(CA)证书存储在 `/etc/pki/tls/certs/ca.crt`{.literal}
        文件中。
    :::
:::
::: orderedlist
**步骤**
1.  创建包含以下内容的 YAML 文件，如
    `~/create-ethernet-profile.yml`{.literal} ：
    ``` literallayout
    ---
    interfaces:
    - name: enp1s0
      type: ethernet
      state: up
      ipv4:
        enabled: true
        address:
        - ip: 192.0.2.1
          prefix-length: 24
        dhcp: false
      ipv6:
        enabled: true
        address:
        - ip: 2001:db8:1::1
          prefix-length: 64
        autoconf: false
        dhcp: false
      802.1x:
        ca-cert: /etc/pki/tls/certs/ca.crt
        client-cert: /etc/pki/tls/certs/client.crt
        eap-methods:
          - tls
        identity: client.example.org
        private-key: /etc/pki/tls/private/client.key
        private-key-password: password
    routes:
      config:
      - destination: 0.0.0.0/0
        next-hop-address: 192.0.2.254
        next-hop-interface: enp1s0
      - destination: ::/0
        next-hop-address: 2001:db8:1::fffe
        next-hop-interface: enp1s0
    dns-resolver:
      config:
        search:
        - example.com
        server:
        - 192.0.2.200
        - 2001:db8:1::ffbb
    ```
2.  将设置应用到系统：
    ``` literallayout
    # nmstatectl apply ~/create-ethernet-profile.yml
    ```
:::
::: itemizedlist
**验证**
-   访问需要网络身份验证的网络上的资源。
:::
:::
::: section
::: titlepage
# []{#authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system_configuring-and-managing-networking.html#configuring-a-static-ethernet-connection-with-802-1x-network-authentication-using-rhel-system-roles_authenticating-a-rhel-client-to-the-network-using-the-802-1x-standard-with-a-certificate-stored-on-the-file-system}使用 RHEL 系统角色通过 802.1X 网络身份验证配置静态以太网连接 {.title}
:::
使用网络 RHEL 系统角色，您可以自动创建使用 802.1X
标准验证客户端的以太网连接。此流程描述了如何通过运行 Ansible playbook
为具有以下设置的 `enp1s0`{.literal} 接口远程添加以太网连接：
::: itemizedlist
-   静态 IPv4 地址 - `192.0.2.1`{.literal} 和 `/24`{.literal} 子网掩码
-   静态 IPv6 地址 - `2001:db8:1::1`{.literal} 和 `/64`{.literal}
    子网掩码
-   IPv4 默认网关 - `192.0.2.254`{.literal}
-   IPv6 默认网关 - `2001:db8:1::fffe`{.literal}
-   IPv4 DNS 服务器 - `192.0.2.200`{.literal}
-   IPv6 DNS 服务器 - `2001:db8:1::ffbb`{.literal}
-   DNS 搜索域 - `example.com`{.literal}
-   使用 `TLS`{.literal} 可扩展身份验证协议(EAP)进行 802.1X
    网络身份验证.
:::
在 Ansible 控制节点上运行此步骤。
::: itemizedlist
**先决条件**
-   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
    软件包在控制节点上安装。
-   如果您在运行 playbook 时使用了与 `root`{.literal}
    不同的远程用户，则您必须在受管节点上具有合适的 `sudo`{.literal}
    权限。
-   网络支持 802.1X 网络身份验证。
-   受管节点使用 NetworkManager。
-   control 节点上存在 TLS 身份验证所需的以下文件：
    ::: itemizedlist
    -   客户端密钥存储在 `/srv/data/client.key`{.literal} 文件中。
    -   客户端证书存储在 `/srv/data/client.crt`{.literal} 文件中。
    -   证书颁发机构(CA)证书存储在 `/srv/data/ca.crt`{.literal} 文件中。
    :::
:::
::: orderedlist
**步骤**
1.  如果您要在其上执行 playbook
    中指令的主机还没有被列入清单，请将此主机的 IP 或名称添加到
    `/etc/ansible/hosts`{.literal} Ansible 清单文件中：
    ``` literallayout
    node.example.com
    ```
2.  使用以下内容创建 `~/enable-802.1x.yml`{.literal} playbook：
    ``` literallayout
    ---
    - name: Configure an Ethernet connection with 802.1X authentication
      hosts: node.example.com
      become: true
      tasks:
        - name: Copy client key for 802.1X authentication
          copy:
            src: "/srv/data/client.key"
            dest: "/etc/pki/tls/private/client.key"
            mode: 0600
        - name: Copy client certificate for 802.1X authentication
          copy:
            src: "/srv/data/client.crt"
            dest: "/etc/pki/tls/certs/client.crt"
        - name: Copy CA certificate for 802.1X authentication
          copy:
            src: "/srv/data/ca.crt"
            dest: "/etc/pki/ca-trust/source/anchors/ca.crt"
        - include_role:
            name: rhel-system-roles.network
          vars:
            network_connections:
              - name: enp1s0
                type: ethernet
                autoconnect: yes
                ip:
                  address:
                    - 192.0.2.1/24
                    - 2001:db8:1::1/64
                  gateway4: 192.0.2.254
                  gateway6: 2001:db8:1::fffe
                  dns:
                    - 192.0.2.200
                    - 2001:db8:1::ffbb
                  dns_search:
                    - example.com
                ieee802_1x:
                  identity: user_name
                  eap: tls
                  private_key: "/etc/pki/tls/private/client.key"
                  private_key_password: "password"
                  client_cert: "/etc/pki/tls/certs/client.crt"