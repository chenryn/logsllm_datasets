the Flash Shared Object does not exist or indicates that a
redirect has not occurred recently, then the ActionScript code
continues execution.
The
Flash
then
executes
advertisement
the
ActionScript shown in Figure 7. An HTTP request
to
http://hitoptimist.com/c/index.php?id=NTNjeGpWm7NkiZT-
hxQVd1TktKa0EzSmxoPTEyNDA4NTUwNjAmcG56Y252d-
GE9dXm7NkiZym7NkiZW5lcHVvbAYNkiDgNmYNkiDgNm
using the LoadVars.load method is made, and the
server sends back an HTTP response containing two
spaces, “
”. The malicious redirect will be disabled if
the response does not begin with a space or is less than
two characters in length. The hitoptimist.com domain is
controlled by the malware author, and this request could
be used by her to track the malicious redirects that occur.
In addition, this could also allow the malware author to
directly control the execution of the malicious redirect by
conﬁguring hitoptimist.com to return a response code of
404 “not found” or content such as “”, which will disable
any malicious behavior.
At
the execution,
the malicious Flash
this point of
the MovieClip.getUrl method
advertisement uses
to force the user’s web browser
to the
URL http://welovesandi.com/?cmpname=hierarchby&url=-
23851y93838. Upon loading this URL, the web browser
is again redirected to yet another web site. These multiple
redirections make it difﬁcult to track down the source of the
malicious campaign. The user ends up at a web site that
to redirect
LV.onData = function(QWER) {
if(QWER.substr(0,1) == " " && (QWER.length()-1)) {
_level0.getURL("http://welovesandi.com/?cmpname"
+ "=hierarchby&url=23851y93838","_parent");
}
}
LV.load("http://hitoptimist.com/c/index.php?id=NTNjeGpW"
+ "m7NkiZThxQVd1TktKa0EzSmxoPTEyNDA4NTUwNjAmcG56Y25"
+ "2dGE9dXm7NkiZym7NkiZW5lcHVvbAYNkiDgNmYNkiDgNm");
Figure 7: The ActionScript code to ﬁnally redirect the user’s
browser to a malicious web site.
displays a fake anti-virus site. A scan is shown to the user
indicating she is infected with malware and is supposed to
download anti-virus software. Of course, the user was never
infected with malware, and the anti-virus software itself is
a malicious binary.
Redirects are not the only way in which Flash is ma-
liciously used. Malware authors have also used Flash to
deliver drive-by download attacks by using the CVE-2007-
0071 vulnerability [7], which was discovered by Mark
Dowd in 2008 [8]. The vulnerability is contained within the
DeﬁneSceneAndFrameLabelData tag parsing routine in the
Adobe Flash Player. The routine reads an unsigned 32bit
integer, the SceneCount ﬁeld, that is then validated using
a signed comparison operator. This integer overﬂow can be
utilized to execute arbitrary code.
B. Evasion
Some of the behavior outlined in Section II-A exists to
prevent detection of malicious code through dynamic means.
For instance, the Flash advertisement does not perform a ma-
licious redirect when the advertisement network ﬁrst reviews
the submitted advertisement. Malicious advertisements also
use obfuscation techniques to thwart static analysis. Two of
these techniques, namely obfuscation and malformed Flash
ﬁles, are described in the following sections.
1) Obfuscation: Obfuscation is commonly used to hide
malicious behavior in Flash ﬁles. Virtually any piece of
data that could indicate maliciousness is obfuscated. This
includes data, such as URLs and blacklists, as well as vari-
able and method names. While the obfuscation of application
data such as URLs is straightforward, hiding the names of
variables and methods is more complex. However, the stack-
based design of ActionScript makes the obfuscation of built-
in variable and method names possible. In fact, the string
identiﬁer of built-in ActionScript variables or methods can
be stored in obfuscated form, and then simply deobfuscated
at runtime when that variable or method must be used.
function deobfuscate(input)
{
var const1 : Number = 5284534502365238570000752845 \
345023652385700007;
var const2 : Number = 2271923429472947976291178728 \
19359091750076416;
var const3 : Number = 7872819359091750076416;
var reg : Number = 0;
var result : String = "";
for(var i=0; i> 8) & 0xFF);
result += string.fromCharCode(b);
reg = (reg*const1+const2)%const3;
}
return result;
}
// Example usage:
deobfuscate("63A03FEFE828") = "cookie"
deobfuscate("67AA24D1D301") = "getURL"
Figure 8: Example ActionScript 2.0 deobfuscation method
found in a malicious advertisement.
var d : deobfuscate("44AE24E1") =
new deobfuscate("44AE24E1")();
var t
= -d.deobfuscate("67AA24D0E82081337B3A6C"
+ "0F4319804F43")() / deobfuscate(
"70AE22F7E4048A3D")("60");
if( t==deobfuscate("70AE22F7E4048A3D")(deobfuscate("32"))
||t==deobfuscate("70AE22F7E4048A3D")(deobfuscate("33"))
||t==deobfuscate("70AE22F7E4048A3D")(deobfuscate("34"))
||t==deobfuscate("70AE22F7E4048A3D")(deobfuscate("35"))
||t==deobfuscate("70AE22F7E4048A3D")(deobfuscate("36"))
||t==deobfuscate("70AE22F7E4048A3D")(deobfuscate("37"))
)
{
}
//halt execution
Figure 9: The obfuscated version of the time zone check
method found in Figure 4.
This makes it difﬁcult to statically examine a Flash ﬁle to
determine, for instance, if it uses the MovieClip.getURL
method.
Common obfuscation routines involve applying bit-wise
operations to clear-text strings and then storing the resulting
strings in hexadecimal form in the Flash ﬁle. For example,
the deobfuscation algorithm that the malicious advertisement
described in Section II-A uses is shown in Figure 8.
The deobfuscation algorithm relies on string manipulation
methods such as slice, fromCharCode, and parse-
Int. As such, these methods cannot be obfuscated using the
same algorithm they contribute to implement. Instead, the
malicious advertisement stores the method names in parts
and combines them together at runtime. For instance, pa,
rse, I, and nt are stored in the Flash ﬁle separately, and
then simply concatenated together at runtime to create the
method name parseInt.
Figure 9 shows how the various obfuscation techniques
discussed above are used to obfuscate the time zone check
method in Figure 4.
Another obfuscation technique uses the ActionScript 3.0
method Loader.loadBytes. This method allows devel-
opers to dynamically load new Flash ﬁles into an existing
Flash application. The ability to dynamically load complete
Flash ﬁles provides an effective means to obfuscate mali-
cious behavior. For instance, malware authors can create a
malicious Flash ﬁle, encrypt it, and then store it somewhere
in a “host” Flash application. This “host” Flash application
will then dynamically decrypt the embedded malicious Flash
ﬁle and execute it.
A common technique that has been observed in the wild is
obfuscating a Flash 8 CVE-2007-0071 exploit by embedding
it within multiple layers of Flash 9 ﬁles. Each Flash 9
layer utilizes Loader.loadBytes to dynamically decrypt
and subsequently execute the next embedded Flash ﬁle.
Examining the outer “host” Flash ﬁle will not easily expose
the contained hidden CVE-2007-0071 exploit.
2) Malformed Flash Files: Another evasion technique
commonly used takes advantage of the lack of validation
in certain resources contained within the Flash ﬁle, most
notably the ActionScript 2.0 actions. Speciﬁcally, the jump
actions are not correctly validated, which allows Action-
Script code execution to jump to non-code locations in the
Flash ﬁle. Typically, ActionScript code is stored in tags
such as DoAction or DoInitAction, and the associ-
ated execution ﬂow is contained within the tag. However,
the instruction pointer is simply a byte offset from the
start of the Flash ﬁle, and the ActionScript jump action
(operation) simply adds or subtracts from this byte offset.
The Flash Player does not verify that a jump instruction
reaches a location within the existing tag, so this effectively
allows malware code to jump outside of the correct tag to
execute ActionScript elsewhere in the ﬁle. This technique
can be used to hide ActionScript code, because common
ActionScript disassemblers and decompilers only look at
tags that are documented as containing ActionScript actions,
and they do not attempt to follow jumps outside of the tag
during parsing. As a result, malicious code can be stored in
non-code tags, and, thus, it can be effectively hidden from
Flash disassemblers and decompilers such as flasm [9] and
flare [10].
The problems with ﬁle validation can be generalized to
the tags themselves. More precisely, tags can be created and
arbitrary data inserted into them without the Adobe Flash
player throwing any errors. There are a ﬁnite set of tag
types; however, invalid tag types can be created and the data
contained within the tag can be populated with ActionScript
code, used for the obfuscation technique described above,
or to store arbitrary code used in a CVE-2007-0071 exploit.
When the Adobe Flash player is parsing the Flash ﬁle, these
invalid tags will be silently ignored.
III. DESIGN AND IMPLEMENTATION
In this section, we discuss the details of our system, called
OdoSwiff, to detect malicious Flash ﬁles. After analyzing
malicious Flash applications on the Internet, we identiﬁed
certain characteristics that help deﬁne what constitutes ma-
licious behavior. These characteristics include the forceful
web browser redirections described in Section II-A, CVE-
2007-0071 exploits, and ActionScript 3.0 obfuscation tech-
niques.
Our system consists of two analysis components: a static
analysis module and a dynamic analysis module. Both of
these components will now be described in more detail.
A. Static Analysis
The ﬁrst task of the static analysis module is to parse the
tags of the Flash ﬁle being analyzed in an attempt to detect
known malicious techniques. For instance, one common
technique that malicious Flash applications use is hiding
malicious code, such as shellcode or ActionScript code, in
tags designed to contain JPEG, PNG, or GIF image data.
The static analysis module will parse the image data using
Java’s javax.imageio.ImageIO library to determine
if the image data is valid. If the data is invalid, the Flash
application could be hiding malicious code.
Another common malware technique that can be detected
using static analysis are out-of-bounds ActionScript 2.0
jumps. The tags that contain ActionScript code are self-
contained, and, as such, should not have operations that jump
outside of the tag boundaries. Detection is accomplished
by parsing the ActionScript actions inside tags that contain
executable code. Jump offsets are then checked against the
tag boundaries to see if the resulting jump is out of bounds.
These checks are also done dynamically (as described in
Section III-B), for ActionScript code that has been hidden
outside of the usual DoAction and DoInitAction tags.
We also added two speciﬁc checks to identify code
patterns that might expose well-know Flash malware ex-
ploitation techniques. First, we check the ﬁle to see if it
attempts to exploit the CVE-2007-0071 vulnerability. To this
end, if the DeﬁneSceneAndFrameLabelData tag is found,
the containing SceneCount ﬁeld is examined for anomalous
values. More precisely, the attack can be detected if the
SceneCount value is greater than 231. Regardless whether or
not a CVE-2007-0071 exploit is found, shellcode detection is
then performed by using the sctest tool from the libemu
project. This library attempts to execute x86 instructions and
uses a number of heuristics to detect shellcode. It is effective
at detecting shellcode hardened by encryption methods.
Shellcode that is detected is extracted and disassembled by
ndisasm for display in the analysis report.
[11] and references
The second check looks for malware that uses the
Loader.loadBytes method discussed in Section II-B1
to hide embedded malicious Flash ﬁles. ActionScript
3.0 is disassembled using the abcdump utility from
the Mozilla Tamarin project
to
Loader.loadBytes are detected. In addition to this
check, an attempt to identify hidden Flash ﬁles to be ex-
ecuted by loadBytes is also performed. Two obfuscation
techniques have been observed in the wild to hide Flash
ﬁles and the static analysis engine will try to identify both
of them. The ﬁrst technique hides Flash ﬁles inside hex-
encoded strings: ﬁles hidden with this technique are detected
by searching for hex-encoded strings longer than 512 charac-
ters. The 512 characters threshold was chosen by analyzing
the hex-encoded string lengths of hidden malicious Flash
ﬁles. The second technique uses ActionScript 3.0 push
instructions to push binary data onto the stack. This data
is then used to create a ByteArray object, which can then
be passed to and executed by loadBytes. This technique
is detected by counting the instructions in the disassembled
ActionScript 3.0 code to see if there is an unusually high
number of push instructions. After analyzing malicious
samples that use this technique, a threshold of 60% was
chosen. If 60% of the instructions consist of pushs, then
the Flash application is marked as containing hidden Flash
ﬁles.
B. Dynamic Analysis
Once the information from the static analysis engine is
obtained, our system invokes the dynamic analysis mod-
ule. The dynamic analysis step consists of executing the
Flash application and creating an execution trace. This trace
contains all the executed ActionScript actions, the invoked
method calls, and the stack contents after each executed
instruction.
To create the execution trace, we use the open-source
project Gnash [12]. Gnash currently only supports up to
ActionScript 2.0, which is found in Flash version 8 and
below. As a result, dynamic analysis is only supported for
these Flash versions.
Once our execution trace is created, it is then analyzed
for anomalous behavior. The following data in the trace is
collected: actions and methods, network activity, referenced
URLs, and access to the environment.
Action and Method Summaries. Creating a list of what
actions and methods are executed along with how many
times they are used is important to obtain an overview of
what the Flash application is doing. For instance, excessive
use of string manipulation methods such as charCodeAt,
fromCharCode, parseInt, and slice can be an in-
dication of obfuscated code (which often deals exclusively