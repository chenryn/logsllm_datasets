It is based on the ob-
servation that a normal receiver can wait until a message is fully
received to decode its content, while a jammer, to be effective in
jamming, has to determine the jamming code when the message is
being transmitted.
We propose content-based code subset selection for spreading
and despreading the seed. The basic idea is to use the content of
the seed to give some advantage to normal receivers. Speciﬁcally,
the sender spreads the seed bit-by-bit from the end to the begin-
ning. For each bit (except for the last one), the sender uses both
the value and the spreading code of the later bit to determine its
candidate spreading codes, which are a small subset of all possi-
ble codes. Note that when a receiver starts decoding a message, it
already has the entire message buffered. Thus, a receiver can fol-
low the same procedure as the sender to recover the small subset
of candidate codes for each bit of the seed. However, without the
complete message, a jammer has to consider many more spreading
codes. Any code not in the right subset will be ignored by normal
receivers. Moreover, even if some codes chosen by jammers are
accepted by chance, the receivers do not need to consider the com-
binations of all accepted codes in different bit positions in the seed,
avoiding the most serious DoS attack.
The basic DSD-DSSS scheme employs two public code sets Cp
and Ce, where only Ce is used to spread the seed.
In the new
approach, we enhance the protection of the seed by using both code
sets. The codes in Ce are only used to spread the last bit of the seed,
marking the end of the seed. We generate multiple subsets of Cp.
Each earlier bit of the seed is spread with one of these subsets,
selected based on the value and spreading code of the later bit.
A reactive jammer may attempt to infer the code used to spread
the next bit based on her current observation (i.e., the code used
for the current bit). It is critical not to give the jammer such an
opportunity. Thus, we require that each code appear in multiple
subsets of Cp. As a result, knowing the code for the current and
past bits does not give any jammer enough information to make
inference for future bits.
5.1 Generation of Subsets of Cp
To meet the requirement for the subsets of Cp, as a convenient
starting point, we choose ﬁnite projective plane, which is a symmet-
ric Balanced Incomplete Block Design (BIBD) [8], to organize the
spreading codes in Cp. It is certainly possible to use other combi-
natorial design methods to get better properties. We consider these
as possible future work, but do not investigate them in this paper.
A ﬁnite projective plane has n2 + n + 1 points, where n is an
integer called the order of the projective plane [8]. It has n2 +n+1
lines, with n + 1 points on every line, n + 1 lines passing through
every point, and every two points appearing together on exactly 1
line. It is shown in [8] that when n is a power of a prime number,
there always exists a ﬁnite projective plane of order n.
In this paper, we consider the points on a ﬁnite projective plane
as spreading codes in Cp and lines as subsets of Cp. For a ﬁnite pro-
jective plane with order n, we associate each point with a spread-
ing code and each line with a subset. We construct Cp by selecting
n2 + n + 1 spreading codes with good auto-correlation and low
cross-correlation properties (e.g., PN codes [6]). As a result, we
also have n2 + n + 1 subsets, where each subset has n + 1 codes,
each code appears in n + 1 subsets, and every two codes co-exist in
exactly 1 subsets. We give a unique index to each subset of Cp to
facilitate the selection of subsets during spreading and despreading.
5.2 Spreading the Seed
Figure 4(a) shows how the sender spreads the seed. We represent
id1
F
sidls-1
idls-1
F
random index 
sidls in [1,|Ce|]
b1
subset( id1, Cp)
bls-1
subset( idls-1, Cp)
bls
randomly draw
randomly draw
S
B1
Cp[sid1]
S
Cp[sidls-1]
S
Ce[sidls]
Bls-1
Bls
(a) Spreading the seed
id1
sidls-1
F
idls-1
F
sidls
b1
subset( id1, Cp)
bls-1
subset( idls-1, Cp)
bls
Each code 
in subset
D
B1
D
Bls-1
Each code 
in subset
D
Bls
Try all 
codes in Ce
to despread
(b) Despreading the seed
Figure 4: Content-based code subset selection
each bit of the seed as bi, where 1 ≤ i ≤ ls and ls is the number of
bits in the seed. As mentioned earlier, the sender spreads the seed
from the end to the beginning.
For bit bls, the sender randomly chooses a code from Ce and
spreads bls with this code to get a sequence of chips Bls. Assume
the index of the chosen code is sidls, where 1 ≤ sidls ≤ |Ce|.
We use a function F to determine which subset of Cp is used
for the next (earlier) bit. Function F has two inputs: the index of
a code in Cp or Ce, and a bit value (1 or 0). The output of F is
the index of a subset of Cp. F can be any function that reaches the
indexes of the subsets of Cp evenly with evenly distributed inputs.
To guarantee that any subset of Cp be used for bls−1, we must have
|Ce| ≥ l |Cp|
2 m. Specif-
ically, for bit bi, where 1 ≤ i ≤ ls − 1, the sender uses sidi+1
and bi+1 as the input of F to get idi, the index of subset for bit bi.
The sender then randomly draws a code from the subset of Cp with
index idi to spread bit bi and get the sequence of chips Bi. Assume
that the code’s index is sidi. The sender continues this process to
spread the earlier bits.
2 m. For simplicity, we set |Ce| = l |Cp|
5.3 Despreading the Seed
Figure 4(b) shows how a receiver despreads the seed. The re-
ceiver continuously tries to ﬁnd the end of a message in the buffer
using a sliding window method as discussed in Section 4.
In the sliding window, the receiver sequentially tries every code
in Ce to despread the last l chips in the window.
If no code in
Ce can successfully despread the last l chips, the sliding window
shifts 1 chip to the right in the buffer. If the code with index sidls
can successfully despread the last l chips to get a bit value bls, the
sliding window potentially covers a seed.
The receiver despreads the seed bit-by-bit from the end to the
beginning. After getting bls, the receiver uses sidls and bls as the
input to function F to get idls−1, the index of the subset of Cp used
for bit bls−1. The receiver then sequentially tries each code in this
subset to despread the l chips for bit bls−1, until it ﬁnds the correct
code. Assume the index of this code is sidls−1 and the decoded
bit value is bls−1. The sender then repeats this process to decode
the earlier bits bls−2, ..., b1, and eventually reconstructs the seed
b1||b2||...||bls .
During this process, if any despreading failure occurs, the re-
ceiver gives up the current decoding process and shifts the sliding
Cp
despread
B1
B1
jam
B2
Cp
despread B1
B1
B2
jam
B3
(a) Real-time jammer
(b) One-bit-delay jammer
Cp
despread B1
B1
B2
B3
jam
B4
(c) Two-or-more-bit-delay jammer
Cp
jam
B1
Cp
jam
B2
Cp
jam
Bls
(d) Non-despreading jammer
Figure 5: Reactive jamming with different capabilities
window by 1 chip to the right to look for the next seed candidate.
Once the receiver gets the seed b1||b2||...||bls , it uses this seed to
generate the spreading code sequence for the message body and
despreads the message body as discussed in Section 4.
5.4 Analysis
The objective of our analysis is to understand (1) the effective-
ness of content-based code subset selection in enhancing DSD-
DSSS’s anti-jamming capability, and (2) the capability of this mech-
anism against DoS attacks discussed in Section 4.4.
5.4.1 Effectiveness against Jamming Attacks
We analyze the probability of an attacker jamming the seed to
show the effectiveness of content-based code subset selection. More-
over, this scheme also increases the difﬁculty for a jammer to iden-
tify the right spreading code compared with a normal receiver. We
thus analyze the search space (i.e., the set of candidate spreading
codes) for both a receiver and a jammer to demonstrate the advan-
tage of a normal receiver over a jammer.
We consider jammers with four levels of computation capabili-
ties: (1) real-time, (2) one-bit-delay, (3) two-or-more-bit-delay, and
(4) non-despreading jammers. All jammers are reactive jammers
that can synchronize with the sender. The ﬁrst three types of jam-
mers perform despreading and online analysis to assist jamming,
which improves the jamming probability by reducing the number of
candidate spreading codes (i.e., possible codes used by the sender).
As illustrated in Figure 5(a), a real-time jammer has intensive
computation power to ﬁnish the analysis and identify the spread-
ing code used for bit 1 (represented by chips B1), and can use
this information to jam the immediately following bit (represented
by chips B2). As shown in Figures 5(b) and 5(c), a one-bit-delay
jammer and a two-or-more-bit-delay jammer need additional time,
equivalent to the time for transmitting 1 bit and 2 or more bits, re-
spectively, to ﬁnish online analysis before applying the result for
jamming purposes. Thus, after learning the spreading code for bit
1, a one-bit-delay jammer and a two-or-more-bit-delay jammer can
only jam bit 3 (represented by chips B3) and bit 4 (represented by
chips B4) or later, respectively. These jammers may certainly per-
form the same analysis of every bit they receive and use the analysis
result to jam future bits. A non-despreading jammer simply skips
the despreading step and use Ce to jam the last bit of the seed and
use Cp to jam the remaining part of the seed, as Figure 5(d) shows.
In the following, we prove Lemma 1 to assist the analysis.
LEMMA 1. Given k distinct subsets, the number of codes that
can be used to derive these subsets by applying function F is in the
range of [k, min{2k, n2 + n + 1}].
PROOF. Since the output of function F is evenly distributed
Code for Bi
Subsets for Bi Code for Bi+1
Subsets for Bi+1
Code for Bi+2
Subsets for Bi+2
a subset
x
a code
x
contains
F
x
x
x
x
x
contains
F
contains
x
x
x
x
x
1
n+1
[n+1, 2(n+1)]
2
[(n
+3n+2)/2, n
2
+n+1]
[(n
2
+3n+2)/2, n
2
+n+1] ((n
2
+3n+2)/2, n
2
+n+1]
Figure 6: Jammers’ view of spreading codes and subsets (As-
sume the jammer just derived code x for bit bi (chips Bi))
real time
1 bit delay
q bits delay (q ≥ 2)
Table 2: Search spaces
n2 + (ls − 1)n + (ls − 1)
2(n2 + n + 1) + (ls − 4) (n+1)(n+2)
(q + 1)(n2 + n + 1) + (ls − 2(q + 1)) (n+1)(n+2)
2
2
when the inputs are evenly distributed, for each subset, there are
two possible codes as inputs. For each code, there are two possible
subsets as outputs. Thus, the lower bound is k and the upper bound
is min{2k, n2 + n + 1}.
Real-time Jammers: If a jammer can despread each bit in real-
time (e.g., by using parallel computing devices), the jammer can
know the code for despreading Bi once the transmission of Bi is
complete. As Figure 6 shows, the jammer can then identify all n+1
subsets that contain this code. By using the inverse of function F ,
the jammer can also identify all possible codes in Cp that were used
to determine these subsets, which were also used to spread bi+1
into Bi+1. The number of possible codes for Bi+1 is in the range
of [n + 1, 2(n + 1)], according to Lemma 1. Thus, the jammer can
jam the transmission of Bi+1 by randomly selecting a code from
these codes (rather than from Cp). Since the last bit of the seed is
spread using codes in Ce, the number of all possible codes for the
jammer is thus in the range of [n + 1, min{2(n + 1),|Ce|}].
In the worst case, a real-time jammer can despread all bits of the
seed except for Bls and jams all bits. The jamming probability of
the ﬁrst bit is at most
|Cp| , the jamming probability of the last bit
is at most Pe0 = 1
n+1 , and the jamming probability of Bi (2 ≤
i ≤ ls − 1) is at most Pp0 = Pe0 = 1
n+1 . Thus, the jamming
probability of the seed is at most
1
Preal-time = 1 − (cid:16)1 − 1
|Cp|(cid:17) (1 − Pp0)ls−1.
By including an ECC that can tolerate 1 bit error, we can reduce
the maximum jamming probability to
Preal-time = 1−(1−Pp0)ls−1−(ls−1)(cid:16)1 − 1
|Cp|(cid:17) Pp0(1−Pp0)ls−2.
It is easy to see that the total search space for a real-time jammer
throughout all bits of the seed is at least
SSreal-time = |Cp| + (ls − 2)(n + 1) = n2 + (ls − 1)n + (ls − 1).
Non-real-time Jammers: The results for one-bit-delay, two-or-
more-bit-delay, and non-despreading jammers can be derived sim-
ilarly. Due to the space limit, we do not show the details but list
the ﬁnal results for the jamming probabilities and search spaces in