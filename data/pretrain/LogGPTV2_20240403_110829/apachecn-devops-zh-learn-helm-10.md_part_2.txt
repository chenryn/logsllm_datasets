1.  `helm create`命令可用于构建新的 Helm 图表。
2.  声明 Redis 依赖关系使您无需在 Helm 图表中创建 Redis 模板。它允许您部署 Redis，而不需要知道所需的正确的 Kubernetes 资源配置。
3.  `helm.sh/hook-weight`注释可用于设置执行顺序。挂钩按重量升序执行。
4.  `fail`功能用于立即使渲染失败，并可用于根据一组有效设置限制用户输入。`required`函数用于声明一个必需的值，如果不提供该值，图表模板将失败。
5.  要将 Helm 图表发布到 GitHub Pages 图表存储库中，您必须首先使用`helm package`命令以 TGZ 格式打包您的 Helm 图表。接下来，您应该使用`helm repo index`命令生成存储库的`index.yaml`文件。最后，存储库内容应该被推送到 GitHub。
6.  `index.yaml`文件包含图表库中每个图表的元数据。
# 第 6 章:测试舵轮图
以下是本章所提问题的一些答案:
1.  `helm template`命令用于在本地生成你的 Helm 模板。`helm lint`命令用于查找图表结构和图表定义文件中的错误。它还会尝试查找会导致安装失败的错误。
2.  要在安装前验证您的图表模板，您可以运行`helm template`命令在本地生成您的 YAML 资源，以确保它们正确生成。您也可以使用`--verify`标志与应用编程接口服务器一起检查您的 YAML 模式是否正确，而无需安装资源。`helm install --dry-run`命令也可以在安装前对应用编程接口服务器进行检查。
3.  一个可以用来梳理你的 YAML 资源风格的工具是`yamllint`工具。它可以和`helm template`一起使用来清理你生成的资源(例如，`helm template my-test test-chart | yamllint -`)。
4.  图表测试通过创建添加了`helm.sh/hook: test`注释的图表模板来创建。图表测试通常是执行脚本或简短命令的 Pods。它们可以通过运行`helm test`命令来执行。
5.  图表测试( **ct** )工具允许 Helm 图表维护者在 git monorepo 中更容易地测试 Helm 图表。它执行彻底的测试，并确保修改后的图表版本增加。
6.  `ci/`文件夹用于测试 Helm 值的多种不同组合。
7.  添加`--upgrade`标志将有助于确保没有增加主要版本的图表不会出现回归。它将首先安装旧版本的图表，然后升级到新版本。然后，它将删除该版本，安装新版本，并尝试针对自身进行升级。测试将在每次安装/升级之间进行。
# 第 7 章:使用 CI/CD 和 GitOps 自动化掌舵流程
以下是本章所提问题的一些答案:
1.  CI 是一个自动化的软件开发过程，当软件发生变化时可以重复进行。光盘是一组定义好的步骤，通过发布过程(通常称为管道)来编写软件。
2.  而 CI/CD 描述的是软件开发和发布过程，GitOps 描述的是用 Git 存储配置的行为。这方面的一个例子是在 Git 中存储一个值文件，该文件可用于将应用部署到 Kubernetes。
3.  用于创建和发布 Helm 图表的 CI 管道可以清理、安装和测试 Helm 图表。图表测试工具可以帮助您更轻松地执行这些步骤，尤其是在维护图表单一报告时。管道还应该打包每个 Helm 图表，并将图表部署到图表存储库中。对于 GitHub Pages 图表存储库，必须生成`index.yaml`文件，并将内容推送到存储库。
4.  CI 允许图表被轻松快速地测试和发布。随着新特性的增加，它也有助于防止回归。
5.  光盘管道会将 Helm 图表部署到每个所需的环境中，每个环境都是不同的管道阶段。每次部署后可以使用`helm test`命令进行烟雾测试。
6.  光盘管道允许用户轻松部署他们的应用，而无需手动调用 Helm CLI 命令。这有助于防止在使用 Helm 部署应用时出现人为错误的可能性。
7.  要维护多个环境的配置，可以使用单独的文件夹按环境分隔值文件。为了减少样板文件，可以保存一个包含每个环境中使用的公共值的文件，并将其应用于每个 Helm 部署。
# 第 8 章:在操作框架中使用 Helm
以下是本章所提问题的一些答案:
1.  操作员通过利用定制控制器和定制资源来工作。当创建新的定制资源时，操作员将执行定制控制器实现的逻辑。对自定义资源的更改也会触发控制器逻辑。操作员通常被实现来安装和管理应用的生命周期。
2.  When using the Helm CLI, you must execute the `install`, `upgrade`, `rollback`, and `uninstall` commands from the command line. However, when using a Helm-based operator, these commands are performed automatically when you `create`, `modify`, or `delete` a custom resource. When using a Helm-based operator, you don’t have to run any Helm CLI commands locally.
    关于应用生命周期，Helm 命令行界面允许用户回滚到以前的版本，而 Helm 操作员不允许这样做，因为它不保存版本历史。
3.  您可以首先使用`operator-sdk new`命令构建一个新的 Helm 操作符，将该命令指向带有`--helm-chart`标志的现有 Helm 图表。接下来，您可以使用`operator-sdk build`命令构建操作员。最后，您可以将操作符映像推送到容器注册表中。
4.  通过创建新的自定义资源来执行安装。通过修改自定义资源来执行升级。如果升级失败，回滚将自动执行，但不能显式执行。通过删除自定义资源来执行卸载。
5.  在创建`templates/`中的内容之前，`crds/`文件夹允许创建**自定义资源定义(CRDs)** 。它提供了一种部署依赖于 CRDs 的操作员的简单方法。
6.  答案会有所不同，但这些图表的示例已在[https://github . com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-答案](https://github.com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-answer)中提供。该示例创建了一个名为**留言簿-操作员**的图表，用于部署操作员资源(包括 CRD)，而另一个名为**留言簿-cr** 的图表用于部署自定义资源。
# 第 9 章:舵手安全考虑
以下是本章中提出的一些问题的示例答案:
1.  数据起源是关于确定数据的来源。数据完整性决定了您收到的数据是否是您期望的数据。
2.  用户需要下载附带的`.asc`文件，其中包含数字签名。
3.  `helm verify`命令可用于验证本地下载的图表，而`helm install --verify`命令可用于对照存储在上游图表库中的图表。
4.  您可以合并定期漏洞扫描。您还可以尝试避免部署需要作为根或根功能子集运行的映像。最后，您可以使用`sha256`值而不是标签来引用映像，以确保始终部署预期的映像。
5.  资源限制有助于防止应用耗尽底层节点资源。还可以利用`LimitRanges`设置每个 Pod 或 PVC 的最大资源量，还可以利用`ResourceQuotas`设置每个命名空间的最大资源量。
6.  最低权限是指用户或应用仅被授予正常运行所需的最低权限集。要实现最低权限访问，可以使用 Kubernetes `Roles`和`RoleBindings`创建最低权限角色，并将这些角色绑定到用户或组。
7.  `helm repo add`命令提供用于基本认证的`--username`和`--password`标志，以及用于基于证书的认证的`--ca-file`、`--cert-file`和`--key-file`标志。`--ca-file`标志也用于验证图表存储库的证书授权。