by the prover and not by the veriﬁer. The veriﬁer then
veriﬁes that the set elements of the output (i.e., the roots
of the characteristic polynomials) match the polynomial
(expressed in coefﬁcients) returned by the server. This can
be efﬁciently done through a randomized check—see al-
gorithm certify() from [22]. We specify that this slightly
increases the communication bandwidth (the server effec-
tively sends the output set twice, in two different encod-
ings) but we consider this an acceptable overhead (This
can be avoided by having the client perform the interpola-
tion himself, increasing the veriﬁcation time). It can also
be noted that the input polynomial coefﬁcients computa-
774  23rd USENIX Security Symposium 
USENIX Association
tion can be outsourced similarly to the server side, if the
client does not have them computed already.
5.2 Experiments Setup
We now provide a comparison between TRUESET’s ap-
proach and Pinocchio’s approach based for set operations.
For a fair comparison, we considered two different ways
to construct the arithmetic circuits used by Pinocchio to
verify the set operations:
• Pairwise comparison-based, which is the naive ap-
proach for performing set operations. This requires
O(n2) equality comparisons.
• Sorting network-based, in which the input sets are
merged and sorted ﬁrst using and odd-even merge-
sort network [19]. Then a check for duplicate con-
secutive elements is applied to include/remove re-
peated elements, according to the query being exe-
cuted. This requires O(n log2 n) comparator gates,
and O(n) equality gates.
Although the second approach is asymptotically more
efﬁcient, when translated to Pinocchio’s circuits it results
in numerous multiplication gates. This is due to the k-bits
split gates needed to perform comparison operations, re-
sulting into great overhead in the key generation and proof
computation stages. For a k-bit possible input value, this
split gate needs k multiplication constraints to constrain
each bit wire to be either 0 or 1. (It should be noted that
these gates translate a wire into its bit-level representation
and they should not be confused with the split gates we
introduce in this paper, which output the elements of a set
as separate arithmetical values). On the other hand, the
pairwise approach uses zero-equality gates to check for
equality of elements. Each equality gate translates into
only two multiplication gates, requiring only two roots.
For fairness purposes, different Pinocchio circuits were
produced for each different input set cardinality we exper-
iment with, as each wire in Pinocchio’s circuits represents
a single element. On the other hand, TRUESET can use
the same circuit for different input cardinalities.
We consider two Pinocchio circuit implementations:
• MS Pinocchio: This is the executable built using
efﬁcient Microsoft internal libraries.
• NTL-ZM Pinocchio: This is a Pinocchio version
built using exactly the same free libraries we used
for our TRUESET implementation. This will help
ensure having a fair comparison.
The experiments were conducted on a Lenovo IdeaPad
Y580 Laptop. The executable used a single core of a
2.3 GHz Intel Core i7 with 8 GB of RAM. For the input
sets, disjoint sets containing elements in F were assumed.
For running time statistics, ten runs were collected for
each data point, and the 95% conﬁdence interval was
calculated. Due to the scale of the ﬁgures, the conﬁdence
interval of the execution times (i.e., error bars) was too
low to be visualized.
5.3 Single-Gate Circuit
In this subsection, we compare TRUESET and Pinocchio’s
protocols based on the veriﬁcation of a single union op-
eration that accepts two input sets of equal cardinalities.
We study both the time overhead and the key sizes with
respect to different input set cardinalities. Note that, ex-
periments for higher input cardinalities in Pinocchio’s
case incur great memory overhead due to the large circuit
size, therefore we were unable to even perform Pinoc-
chio’s for large input sizes.
Figure 5 shows the comparison between TRUESET’s
approach and Pinocchio’s pairwise and sorting network
approaches, versus the cardinality of each input set. The
results show clearly that TRUESET outperforms both ap-
proaches in the key generation and proof computation
stages by orders of magnitude, while maintaining the
same veriﬁcation time. Speciﬁcally, TRUESET outper-
forms Pinocchio in the prover’s running time by 150x
when the input set cardinality is 28. This saving hap-
pens in both polynomial computations and exponentia-
tion operations, as shown in Figure 5 (c). We also note
that Pinocchio’s pairwise comparison approach outper-
forms the sorting network approach due to the expensive
split gates needed for comparisons in the sorting-network
circuits, as discussed above, which results into a large
constant affecting the performance at small cardinalities.
Considering evaluation and veriﬁcation key sizes, Fig-
ure 5 also shows a comparison between TRUESET and
Pinocchio under both the pairwise and sorting networks
approaches. The ﬁgures demonstrate that TRUESET
yields much smaller evaluation keys due to the more com-
pact wire representation it employs (a single wire for a
set as opposed to a wire per element), e.g., at an input set
cardinality of 28, the saving is about 98%. It can also be
noticed that the keys generated in Pinocchio using sort-
ing networks are much larger than the ones generated in
pairwise circuits, due to the use of the split gates. On the
other hand, TRUESET and Pinocchio almost maintain the
same veriﬁcation key sizes, as the veriﬁcation key mainly
depends on the number of input elements in addition to
the number of output elements in the worst case. (The
veriﬁcation key in TRUESET is negligibly more than the
veriﬁcation key of Pinocchio, due to an additional value
that is needed to be veriﬁed per each input or output set.
This is because an n-element set is represented by an
n-degree polynomial which requires n + 1 coefﬁcients.)
USENIX Association  
23rd USENIX Security Symposium  775
i
)
c
e
s
(
e
m
T
n
o
i
t
a
r
e
n
e
G
y
e
K
60
50
40
30
20
10
0
TrueSet
NTL-ZM Pinocchio (pairwise)
NTL-ZM Pinocchio (sorting network)
MS Pinocchio (pairwise)
MS Pinocchio (sorting network)
1.5
1
0.5
0
2² 2³ 2⁴ 2⁵ 2⁶ 2⁷ 2⁸ 2⁹ 2¹⁰ 2¹¹ 2¹² 2¹³
Input Set Cardinality
2²
2³
2⁴
2⁵
)
c
e
s
(
e
m
T
f
o
o
r
P
i
200
150
100
50
0
TrueSet
NTL-ZM Pinocchio (pairwise)
NTL-ZM Pinocchio (sorting network)
MS Pinocchio (pairwise)
MS Pinocchio (sorting network)
3
2
1
0
2² 2³ 2⁴ 2⁵ 2⁶ 2⁷ 2⁸ 2⁹ 2¹⁰ 2¹¹ 2¹² 2¹³
Input Set Cardinality
2²
2³
2⁴
2⁵
(a) Key Generation
(b) Proof Computation
)
c
e
s
(
e
m
T
i
120
100
80
60
40
20
0
Poly. Operations - Trueset
Exponentiation - Trueset
Poly. Operations - Pinocchio
Exponentiation - Pinocchio
0.4
0.2
0
2² 2³ 2⁴ 2⁵ 2⁶ 2⁷ 2⁸ 2⁹ 2¹⁰ 2¹¹ 2¹² 2¹³
2²
2³
2⁴
2⁵
Input Set Cardinality
(c) Proof Computation (Detailed)
i
)
c
e
s
(
e
m
T
n
o
i
t
a
c
i
f
i
r
e
V
3
2
1
0
TrueSet
NTL-ZM Pinocchio (pairwise)
NTL-ZM Pinocchio (sorting network)
MS Pinocchio (pairwise)
MS Pinocchio (sorting network)
0.15
0.1
0.05
0
2² 2³ 2⁴ 2⁵ 2⁶ 2⁷ 2⁸ 2⁹ 2¹⁰ 2¹¹ 2¹² 2¹³
Input Set Cardinality
(d) Veriﬁcation
2²
2³
2⁴
2⁵
2⁶
2⁷
2⁸
)
B
M
(
e
z
i
S
y
e
K
n
o
i
t
a
u
a
v
E
l
200
150
100
50
0
2² 2³ 2⁴ 2⁵ 2⁶ 2⁷ 2⁸ 2⁹ 2¹⁰ 2¹¹ 2¹² 2¹³
3
2
1
0
Input Set Cardinality
(e) Evaluation Key Size
TrueSet
Pinocchio (pairwise)
Pinocchio (sorting network)
0.02
0.01
0
2²
2³
2⁴
2⁵
TrueSet
Pinocchio (pairwise)
Pinocchio (sorting network)
)
B
M
(
e
z
i
S
y
e
K
n
o
i
t
a
c
i
f
i
r
e
V
3
2
1
0
2²
2³
2⁴
2⁵
2² 2³ 2⁴ 2⁵ 2⁶ 2⁷ 2⁸ 2⁹ 2¹⁰ 2¹¹ 2¹² 2¹³
Input Set Cardinality
(f) Veriﬁcation Key Size
Figure 5: Comparison between TRUESET and Pinocchio for the case of a single union gate. In the horizontal axis, we show the
cardinality of each input set in logarithmic scale. (Note: Each time data point is the average of ten runs. The error bars were too
small to be visualized). Subﬁgures (a), (b) and (d) show the comparison in terms of the key generation, proof computation and
veriﬁcation times, while (c) shows TRUESET’s prover’s time in more detail compared to Pinocchio’s prover in the case of pairwise
comparison. Subﬁgures (e) and (f) show the compressed evaluation and veriﬁcation key sizes (The cryptographic proof for all
instances is 288 bytes).
A
B
C
D
E
F
G H
5.4 Multiple-Gate Circuit
U
U
U
U
-
∩
U
Out = ((A U B) - (C U D)) U ((E U F)∩(G U H)) 