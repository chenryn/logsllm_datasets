# PHP框架反序列化入门系列（一）

##### 译文声明
本文为翻译文章，具体内容和含义以原文为准。

## 0x0 前言
本系列文章面向具备一定PHP基础的初学者。我们将从反序列化的简要原理开始，逐步深入到ThinkPHP 5.0.x版本的经典漏洞分析，并探讨CTF解题技巧。后续内容将侧重于不同PHP框架中如何有效挖掘反序列化漏洞及快速构造POC的技术探讨。

## 0x1 PHP反序列化原理
序列化技术主要用于解决复杂数据结构的存储问题，而反序列化则是将这些序列化后的数据恢复成原始对象的过程。例如，对于具有层级结构的对象，直接存储并不现实，因此我们需要将其转换为可存储的字符串形式，然后再通过反序列化复原。

以下是一个简单的例子：
```php
class A {
    public $t1 = 't1';
    protected $At2 = 't2';
    private $t3 = 't3';
}

$obj = new A();
var_dump($obj);
echo serialize($obj);
```
输出结果如下：
```
O:1:"A":3:{s:2:"t1";s:2:"t1";s:5:"*At2";s:2:"t2";s:7:"A*t3";s:2:"t3";}
```
在这个序列化字符串中：
- 公共属性直接显示其名称。
- 受保护属性前增加`0x00*0x00`，长度增加3。
- 私有属性前增加`0x00classname0x00`，长度增加类名长度+2。

反序列化时，根据这些规则可以逆向复原对象。

## 0x2 PHP反序列化攻击
尽管反序列化本身是一个常规功能，但在某些情况下它可能成为安全漏洞。这是因为反序列化过程中会创建新的对象并设置其属性值。如果攻击者能够控制反序列化的数据，他们就有可能创建任意对象，并利用自动触发的方法（如魔术方法）进行攻击。

### 魔术方法
在PHP中，一些特殊的方法被称为“魔术方法”，它们会在特定条件下被自动调用。以下是常见的魔术方法及其触发条件：

- `__construct()`：类的构造函数。
- `__destruct()`：类的析构函数。
- `__call()`：在对象中调用一个不可访问方法时调用。
- `__callStatic()`：以静态方式调用一个不可访问方法时调用。
- `__get()`：获取类的成员变量时调用。
- `__set()`：设置类的成员变量时调用。
- `__isset()`：对不可访问属性调用`isset()`或`empty()`时调用。
- `__unset()`：对不可访问属性调用`unset()`时调用。
- `__sleep()`：执行`serialize()`时先调用。
- `__wakeup()`：执行`unserialize()`时先调用。
- `__toString()`：当类被当作字符串使用时调用。
- `__invoke()`：以调用函数的方式调用一个对象时调用。
- `__set_state()`：调用`var_export()`导出类时调用。
- `__clone()`：对象复制完成时调用。
- `__autoload()`：尝试加载未定义的类。
- `__debugInfo()`：打印调试信息时调用。

在反序列化过程中，特别需要注意的是`__wakeup()`和`__destruct()`方法，因为它们会被自动触发。

### 安全反序列化
为了防止反序列化攻击，应确保反序列化的内容不受用户控制（例如通过加密处理）。由于组件依赖关系复杂，黑名单机制难以实施。此外，PHP的文件处理函数对`phar`协议的处理可能会自动触发反序列化，从而增加攻击面。因此，开发者需要严格控制用户的操作，特别是与文件相关的操作。

一种简单粗暴的方法是禁用`__destruct`和`__wakeup`方法，但这并不是最佳实践。

### POP链原理简化
POP链是一种利用多个类和方法的组合来实现攻击的技术。例如：

```php
class A {
    public $obj;
}

class B {
    public $obj;

    function __toString() {
        var_dump("I am __toString of B!");
        $this->obj->getAttr("test", "t2");
        return "ok";
    }
}

class C {
    function __call($t1, $t2) {
        var_dump($t1);
        var_dump($t2);
        var_dump("I am __call of C");
    }
}

$objC = new C();
$objB = new B();
$objA = new A();

$objB->obj = $objC;
$objA->obj = $objB;
```

在这个例子中，`$objB`对象的`__toString`方法被调用，进而触发`$objC`对象的`__call`方法。这种类组合的应用使得利用链可以转移到其他类中，实现自动POP到具有RCE功能的类中。

## 0x3 ThinkPHP5.0.x反序列化漏洞
该漏洞最早由小刀师傅发现，与其他经典TP链有所不同。以下是我对该漏洞的复现过程。

### 0x3.1 安装ThinkPHP5.0.24
```bash
composer create-project --prefer-dist topthink/think=5.0.24 tp5024
```

### 0x3.2 TP框架知识点入门
修改`thinkphp/tp5024/application/index/controller/Index.php`中的内容，以便手动构造一个反序列化的点，方便调试。

#### 命名空间
命名空间用于解决命名冲突和提高代码的可读性。以下是几个命名空间的例子：

1. **非限定名称**：不包含前缀的类名称，例如 `$a = new foo();` 或 `foo::staticmethod();`。
2. **限定名称**：包含前缀的名称，例如 `$a = new subnamespace\foo();` 或 `subnamespace\foo::staticmethod();`。
3. **完全限定名称**：包含全局前缀操作符的名称，例如 `$a = new \currentnamespace\foo();` 或 `\currentnamespace\foo::staticmethod();`。

#### 别名/导入
使用`use`操作符可以为类名称或命名空间名称创建别名。例如：

```php
namespace foo;
use MyFullClassname as Another;
use MyFullNSname;
use ArrayObject;

$obj = new namespace\Another; // 实例化 foo\Another 对象
$obj = new Another; // 实例化 MyFullClassname 对象
NSname\subnsfunc(); // 调用函数 MyFullNSname\subnsfunc
$a = new ArrayObject(array(1)); // 实例化 ArrayObject 对象
```

#### TP中的根命名空间
| 名称 | 描述 | 类库目录 |
| --- | --- | --- |
| think | 系统核心类库 | thinkphp/library/think |
| traits | 系统Trait类库 | thinkphp/library/traits |
| app | 应用类库 | application |

通过以上介绍，希望读者能对PHP反序列化及其潜在的安全风险有一个基本的理解。