Password manager
Short URL expander
Typography
Sends RSS feed links to Google Reader
Rewrites =EJ  links
Sends selected text to @AE?EKI?
sends selected text to online dictionary
edits selected text
stores and retrieves passwords per page
sends URLs to CKHFA=IA?
modiﬁes values on EFKJ elements
Fig. 3: Some over-privileged Chrome extensions that require access
to “your data on all websites”
Chrome’s model, access to tabs implies that the extension has
access to the user’s browsing history. This is unfortunate—
this extension does not need access to all of a user’s browsing
history to function properly, but Chrome’s model makes it
impossible to restrict its privilege any further.
Over-privileged extensions: Twitter Extender’s access to
browsing history is not an isolated example of an over-
privileged extension. Chrome’s model also allows extensions
to request rights over other resources, including, the privilege
to access “your data on all websites”. Unfortunately, many
simple, seemingly benign operations require extensions to
request access to this very coarse privilege—Figure 3 lists
several of these. In all these cases, manifests are uninformative
and the extensions require manual code review.
Extension study: We conducted a simple analysis of the
manifests for over 1,139 popular Chrome extensions,
to
determine how many require the capability to read and write
to all websites. Our results are shown in Figure 4. Over 10%
of all extensions require access to all DJJFI   sites, and
event more need access to DJJF   sites. About half of all
extensions use wildcards such as DJJF   ࢩ B=?A>?
to
access.
specify
want
to
the
sites
they
Since new sub-domains can
and do appear under a do-
main such as B=?A>?,
policies that use wildcards
can be overly permissive.
Only a small percentage of
extensions restrict
their ac-
cess to only several URLs
(about 17%).
Resource
all DJJFI
all DJJF
wildcard
1 URL
2 URLs
3 URLs
4 URLs
5 URLs
86 URLs
history (J=>I)
Count
143
12%
199
17%
536
47%
149
13%
30
2%
15
1%
6 1%
1 1%
1 1%
60%
5%
1%
694
66
15
>=HI
JEBE?=JEI
What is perhaps most trou-
bling about the Chrome ac-
cess control model
is that
about 60% of all extensions
have access to a combination
of browser tabs and local storage. Using these two facilities, an
extension can monitor which sites the user goes to, collecting
browser history.
Fig. 4: Chrome extensions per-
missions statistics.
III. AN OVERVIEW OF IBEX
Internet Explorer’s BHOs and Firefox’s JavaScript exten-
sions are very hard to secure reliably. Chrome’s extension sys-
tem, while being the most advanced browser extension model
in everyday use, still admits a large number of over-privileged
extensions. Our work aims to redress these difﬁculties using
a number of mutually complementary measures. This section
describes our solution using FacePalm, an extension we wrote,
as a running example.
A. A running example: FacePalm
FacePalm is an extension that allows a user to manage an
address book built from contact information that their friends
make accessible on Facebook, a social networking site. When
a user visits a friend’s Facebook page in a browser extended
the extension crawls the page to identify
with FacePalm,
any updated contact information and,
if it ﬁnds anything,
automatically sends the information to an online address book
for the user maintained on a third-party bookmarking service,
say, @AE?EKI?.
While useful, FacePalm raises several potential security
concerns. For one, it violates the browser’s same-origin re-
strictions by sending data from the B=?A>? domain
to @AE?EKI?—however, this is part of the intended
behavior of the extension. More signiﬁcantly, a user may be
concerned that FacePalm manipulates her Facebook data in
other, less desirable ways. For example, FacePalm may auto-
matically send, accept, or reject friend requests on the user’s
behalf, it might send more than just contact information to
Delicious (e.g., a user’s photographs), update status messages
etc. We would like to be able to specify a security policy for
FacePalm that limits its behavior to its advertised functionality,
thus increasing a user’s conﬁdence in the extension. Existing
approaches are inadequate for this purpose. For example, in
the language of Chrome’s security manifests, all that can be
said about FacePalm is that it may manipulate all data on both
B=?A>? and @AE?EKI?.
118
B. Programming type-safe extensions against a browser API
In contrast to Internet Explorer’s native binaries, or Firefox
extensions that make heavy use of dynamic programming
techniques (e.g., “monkey-patching”), in IBEX, we advocate
extensions to be programmed in high-level languages that
are amenable to formal analysis. In this paper, we focus on
extensions authored in an ML dialect for .NET called Fine.
Our approach also applies naturally to other statically typed
languages such as those provided by the .NET platform. In the
future, we anticipate extending our work to handle extensions
authored in statically analyzable subsets of dynamic languages
like JavaScript.
As in Chrome, we provide APIs that allow extensions to
access to browser resources like the DOM, as well as features
like browsing history and the local ﬁle system not usually
available to scripts on web pages. We show a fragment of
this API below as a typed ML interface (we reﬁne this API
shortly).
(ࢩ Simple DOM API ࢩ)
val tagName: elt ࢐ string
val ﬁrstChild: elt ࢐ elt
val getAttr: elt ࢐ string ࢐ string
val textContent: elt࢐ string
(ࢩ Extension speciﬁc functionality ࢩ)
val readFile: ﬁlename ࢐ string
val sendRequest: url ࢐ string ࢐ string
val historyOnSite: string ࢐ list url
Two points about the design of this API are worth noting.
First, we aim to provide extensions with functionality that
is a strict super-set of the functionality available to web
pages. However, we also aim for our interface to be browser-
agnostic (to the extent that it is possible) to enable cross-
browser deployment. Second, we provide access to features
like browser history; however, our API is designed to allow
restricting access to these resources at a ﬁne granularity. For
example, rather than providing an extension with access to all
or none of a user’s browsing history, functions like historyOnSite
provide access to browsing history on a per-site basis. Further
reﬁnements of this interface to, say, browsing history restricted
to a particular time interval are also possible.
We show a fragment of the code of FacePalm below. The
getWebsite function inspects the tag and attributes of an element
e, and returns the contents of e if it is a div node tagged with
a website CSS class attribute. The rest of FacePalm traverses the
DOM of a Facebook page, calls this function at various points,
and, if appropriate, sends its result to @AE?EKI?,
(ࢩ Extension code ࢩ)
let getWebsite e =
if tagName e = "div" && getAttr e "class" = "website"
then textContent (ﬁrstChild e) else ""
C. Policies and tool-support ﬁne-grained speciﬁcations
Rather than provide all extensions with unfettered access
to the entire extension API, we provide a policy language to
provide speciﬁc privileges to extensions. We base the design
of our policy language on the insight that the structure of web
content can be exploited to specify precise security policies.
For example, the tree structure of the DOM can be used to
grant extensions access to certain fragments of a page; the
structure in various URL schemes can be used to control cross-
domain data ﬂows, etc.
Our policy language takes the form of an ontology for
Datalog, where the predicates in our ontology are chosen with
the structure of web content in mind. As a ﬁrst example, we
show below a simpliﬁed version of the policy for FacePalm:
(ࢩ Extension policy ࢩ)
࢘e, p. (EltParent e p && EltTagName p ”div” && EltAttr p ”class” ”website”)
 CanRead e
Our aim is for the policies to capture the security-relevant be-
havior of extensions, allowing reviewers to audit extensions for
security without necessarily having to conduct detailed code
reviews. The policy statement above summarizes the behavior
of getWebsite, the part of FacePalm that reads sensitive data out
of a Facebook page, while hiding other details of FacePalm’s
implementation. Informally, this policy allows an extension
to read text contained within @EL ?=IIMA>IEJA elements.
(The complete policy for FacePalm also describes the cross-
domain ﬂow from Facebook to @AE?EKI?.)
Of course, the structure of real Facebook web pages are con-
siderably more complicated than this ﬁrst example suggests,
leading to policies that are also more complicated. Rather than
requiring reviewers to examine and understand Datalog, we
provide a visualization tool that interprets policies on speciﬁc
web pages, highlighting the content on a page to which an
extension has been granted access.
D. Static veriﬁcation of policy compliance
While our visualization tool helps provide an informal
understanding of policies, it can also be imprecise. We provide
a formal semantics of policies and deﬁne a property, ࡀ-
safety, on program executions that policies are intended to
induce. The main technical development of this paper shows
how, despite the richness of our policy language, we can
statically verify extensions for compliance with a policy.
Our veriﬁcation methodology involves annotating the API
exposed to extensions with reﬁnement
types that capture
security-related pre- and post-conditions. For example, the
fragment of the DOM API shown earlier is annotated as shown
below. This API makes use of dependent reﬁnement types
as provided by the Fine programming language—Section VI
includes a detailed review of Fine, but we give a taste of our
approach here.
(ࢩ Reﬁned DOM API ࢩ)
val tagName: e:elt ࢐ t:stringEltTagName e t
val ﬁrstChild: p:elt ࢐ e:eltEltParent e p
val getAttr: e:elt ࢐ a:string ࢐ v:stringEltAttr e a v
val textContent: e:eltCanRead e ࢐ string
The code above declares types for four common functions in
our API that allows extensions to manipulate the DOM. The
type of tagName says that it is a function that takes a DOM
element e (given the abstract type elt) as an argument, and
returns a string t as a result. Additionally, the type of tagName
is annotated with a post-condition asserting that the returned
string t is related to the argument e according to EltTagName e t,
a proposition used in our authorization policies. The types
of ﬁrstChild and getAttr are similar. In contrast, the type of
textContent shows it to be a function from DOM elements
e to strings, where the returned string could be security-
sensitive data on a page, e.g., it could represent the contents
of a password ﬁeld. To ensure that extensions cannot access
such sensitive content without appropriate privileges, the type
of textContent is annotated with a pre-condition that requires
the caller to have the CanRead e privilege on the argument e.
Extension code (like getWebsite) can be statically veriﬁed
against this API for policy compliance using reﬁnement type
checking. Extensions that pass the type checker are guaranteed
to be ࡀ-safe.
Static veriﬁcation has a number of beneﬁts. (1) Extension
code is untrusted and never has to be manually inspected for
potential vulnerabilities or malice. Curators (and interested
end-users) need only look at their policies. (2) Veriﬁcation
also rules out potential runtime failures that can compromise
the reliability of the browser platform. (3) By requiring access
privileges to be determined statically, we avoid the pitfalls of
dynamic discovery of access privileges identiﬁed by Koved
et al. [21] in the context of Java access rights, namely that
it is either error-prone or leads to over privilege. (4) We
also observe that certain policies are not easily or efﬁciently
enforced dynamically, including those based on ࡀ-safety,
since this requires maintaining additional state at runtime, and
also requires adding taint tags to arbitrary data values. Despite
recent advances, dynamic taint tracking can be prohibitively
expensive [8]. (5) Finally, we note that IBEX’s deployment
model makes the centralized extension hosting service a nat-
ural place for enforcement based on static analysis; such a
facility is absent in decentralized software distribution.