separated by large distances have a weak signal and hence, to ensure
detection, the noise ﬂoor should be set to a low value. On the other
hand, pairing devices that are closer have a stronger signal, and hence
the noise ﬂoor can be set to a higher value. We pick -90dB because it is
the default noise ﬂoor value in typical WiFi implementations. Manufac-
turers, however, can pick a higher default value, as long as the pairing
devices are placed closer to each other.
The receiver must be careful to ensure that a 20 µs sens-
ing window allows accurate detection of slot occupancy.
But, because the sender and receiver are not synchronized,
sensing windows may not be aligned with slots, and in
the worst case, will be off by half a sensing window, i.e.,
10 µs. However, having a sensing window that is half
the length of a slot ensures that at least one of every two
sensing windows is completely within a slot (i.e., does not
cross a slot boundary). Thus, to measure slot occupancy,
the receiver compares the variance of odd-numbered sens-
ing window measurements and even-numbered sensing
window measurements, and uses the one with the highest
variance. Because the slots are bit-balanced, the correct
sequence will have an equal number of ones and zeros,
having the higher variance.
This technique for measuring slot occupancy is secure
in the presence of an adversary. As we will prove in
Proposition 7.1, an adversary can introduce energy, but
cannot cancel energy in an occupied slot. Thus, the adver-
sary can only increase – but cannot reduce– the computed
occupancy ratios in either the odd or the even windows.
As a result, the adversary cannot create a different bit
sequence in either the odd or even windows which still
has an equal number of ones and zeros. Thus, sampling
at twice the slot rate maintains TEA’s security guarantees.
6.3 Sending A Synchronization Packet
To transmit a long synchronization packet, TEA trans-
mits the maximum-sized packet allowed by our hardware
(2400 bytes) at the lowest bit rate (1 Mbps), resulting in a
19 ms synchronization packet. While many receivers drop
such long packets (the maximum packet size permissible
by the higher layers is 1500 bytes), this does not affect a
TEA receiver, since it does not need to decode the packet;
it only needs to detect a long burst of energy.
6.4 Checking for TEA While Transmitting
While executing the TEP protocol (which lasts for 120
seconds), a node must detect TEA messages transmitted
by other nodes even if they overlap with its own trans-
missions. We distinguish two cases: First, when the node
transmits a standard 802.11 packet, it conservatively as-
sumes that the channel has been occupied by part of a
synchronization packet for the duration of its transmis-
sion. The node samples the medium before and after its
transmission, checking for continuous occupancy by a
synchronization packet. As our evaluation shows (§7.3),
the longest packets in operational WiFi networks are about
4 ms (a collision of two packets sent at the lowest 802.11g
rate of 6 Mb/s), making synchronization packet false pos-
itives unlikely even with the conservative assumption that
the entire 4 ms transmission overlapped with part of a
9
synchronization packet (19 ms).4
Second, a node that is transmitting a TEA request must
not miss a concurrently transmitted TEA reply, and simi-
larly a node that is transmitting a reply must not miss a
concurrent request. To detect partially-overlapping TEA
messages, a node samples the medium before and after
every synchronization packet, and after the slots of every
TEA message, and if it detects energy, it assumes that it
may have missed an overlapping TEA message (and thus,
TEA RECV GET will return OVERLAP, unless it observes
other possibly-missed messages, in which case it will re-
turn RETRY.) Since the total length of the ON-OFF slots
is shorter than the length of the synchronization packet,
sampling the medium after the end of a synchronization
packet (i.e., before the start of the payload and slots) and
after the end of the slots sufﬁces to detect an overlapping
synchronization packet. Finally, in the case when two
TEA messages are perfectly synchronized, the node uses
the direction bits to detect a collision. Since the direction
ﬂag for a request is “10” and a reply “01”, the node checks
for this scenario by checking the energy level during the
OFF slot in the direction ﬁeld in its own transmission. If
the OFF slot shows a high energy level, TEA RECV GET
will return OVERLAP (or RETRY, if there are other missed
messages).
7 EVALUATION
We evaluate TEP along three axes: security, accuracy, and
performance. Our ﬁndings are as follows:
• TEP is provably secure to MITM attacks.
• TEP can be accurately realized using existing OS and
802.11 hardware. Speciﬁcally, our prototype sender can
schedule ON-OFF slots at a resolution of 40µs, and
its 95th percentile scheduling error is as low as 1.65µs.
Our prototype receiver can sense the medium’s occu-
pancy over periods as small as 20µs and can distinguish
ON slots from OFF slots with a zero error rate.
• Results from two operational networks—our campus
network and SIGCOMM 2010—show that TEP never
confuses cross trafﬁc for an attack. Further, even in
the presence of Bluetooth devices which do not obey
CTS-to-SELF and may transmit during TEP’s OFF
slots, TEP can perform key exchange in 1.4 attempts,
on average.
7.1 Evaluating TEP’s Security
We analyze TEP’s security using the threat model in §4.1.
To do so, we formally state our deﬁnitions, then prove
that a TEA is tamper resistant and that wireless pairing
using TEP is secure to MITM attacks.
4Note that even if some networks have normal packets that are much
larger than 4 ms, this may create false positives but does not affect the
security of the protocol.
Deﬁnition Tamper evident: A message is said to be tam-
per evident if an adversary can neither change the mes-
sage’s content without being detected nor hide the fact
that the message has been transmitted.
Before we proceed to prove that a TEA is tamper ev-
ident we ﬁrst prove the following proposition about the
capability of an adversary.
Proposition 7.1 Let s(t) be the transmitted signal, and
h(t) be the channel impulse function. Assuming the trans-
mitted signal is unpredictable, and the receiver is within
radio range of the sender, an adversary cannot cancel the
signal energy at the receiver even if he knows the channel
function between the sender and receiver, h(t).
Proof The received signal is a convolution of the trans-
mitted signal and the channel impulse function, plus the
adversary’s signal a(t), plus white Gaussian noise n(t),
i.e., r(t) = h(t) ∗ s(t) + a(t) + n(t). To cancel the received
energy, the adversary needs to produce a signal a(t) so
that r(t) ≈ n(t), or equivalently, h(t) ∗ s(t) + a(t) ≪ n(t).
Since the receiver is within radio range of the sender,
we know h(t) ∗ s(t) ≫ n(t), and, since n(t) is physically
unpredictable, that a(t) ≈ −h(t) ∗ s(t). But an adversary
that can compute such an a(t) directly contradicts our as-
sumption that s(t) is unpredictable, and thus an adversary
cannot compute such an a(t). (cid:3)
Since the synchronization packet and ON slots have
random contents, Prop. 7.1 implies that an adversary can-
not hide the channel energy during the transmission of the
synchronization packet or the ON slots from a receiver.
Based on this result we proceed to prove the following:
Proposition 7.2 Given the transmitter and receiver are
within range, and the receiver is sensing the medium, a
TEA, described in 5.1, is tamper evident.
Proof We prove Prop. 7.2 by contradiction. Assume that
one party, Alice, sends a TEA to a second party, Bob. Sup-
pose that Alice’s TEA to Bob fails to be tamper-evident.
This can happen because the adversary succeeds either in
hiding from Bob that Alice sent a TEA, or in changing
the TEA content without being detected by Bob. To hide
Alice’s TEA, the adversary must convince Bob that no
synchronization packet was transmitted. This requires
the adversary to cancel the energy of the synchronization
packet at Bob, which contradicts Prop. 7.1. Thus, the
adversary must have changed the announcement content.
Suppose the adversary changed the data encoded in the
slots. Prop. 7.1 says that the adversary cannot cancel the
energy in an ON slot, and hence cannot change an ON
slot to an OFF slot. Since the number of ON and OFF
slots is balanced, the adversary cannot change the slots
10
without increasing the number of ON slots, and thus being
detected. Thus, the only alternative is that the adversary
must have changed the message packet. Since the ON-
OFF slots include a cryptographic hash of the message,
this means that the adversary constructed a different mes-
sage packet with the same hash as the original message
packet. This contradicts our assumption that the hash is
collision-resistant. Thus, the adversary cannot alter the
announcement content, and TEA is tamper-evident. (cid:3)
Although Prop. 7.2 guarantees that a TEA message is
tamper-evident if the receiver is sensing the medium, the
receiver may be transmitting its own message at the same
time. We now prove that a TEA is tamper-evident even if
the receiver transmits its own messages.
Proposition 7.3 Given a receiver (Bob) that can send
its own messages, a TEA sent by a transmitter (Alice) in
range of the receiver is tamper-evident, if the receiver
follows the concurrent-transmission protocol of §6.4, and
the receiver and transmitter send TEA messages with
different directions (request or reply).
Proof If Bob detects the synchronization packet (SP)
of Alice’s TEA, the TEA is tamper-evident: either Bob
will refrain from sending during that TEA, in which case
Prop. 7.2 applies, or Bob will transmit concurrently, and
TEA RECV GET will return RETRY or OVERLAP .
If Bob fails to detect Alice’s SP, it must have hap-
pened while Bob was sending his own message (other-
wise, Prop. 7.2 applies). Since regular 802.11 packets
are shorter than a SP, and §6.4 conservatively assumes
the medium was occupied for the entire duration of the
transmitted packet, Bob could not have missed a SP while
sending a regular packet. Thus, the only remaining option
is that Alice’s SP overlapped with a TEA sent by Bob.
Consider four cases for when Alice’s SP was sent in re-
lation to the SP of Bob’s TEA. First, if Alice’s SP started
before Bob’s SP, Bob would detect energy before starting
to transmit his SP and return OVERLAP or RETRY (§6.4),
making the TEA tamper-evident. Second, if Alice’s SP
started exactly at the same time as Bob’s SP, Bob would
detect energy during the direction bits and return OVER-
LAP or RETRY (§6.4), making the TEA tamper-evident.
Third, if Alice’s SP started during Bob’s SP, Bob would
detect energy after his SP and return OVERLAP or RETRY
(§6.4), making the TEA tamper-evident. Fourth, if Al-
ice’s SP started after Bob’s SP ended, Bob would detect
energy from Alice’s SP after the end of his TEA slots
and return OVERLAP or RETRY (§6.4), making the TEA
tamper-evident. Thus, in all cases, the TEA is tamper-
evident. (cid:3)
We now prove TEP is secure against a MITM attack.
Proposition 7.4 Suppose an enrollee and a registrar are
within range, both are following the TEP protocol as
described in §5.2 and the user does the stipulated actions
required by PBC. Under the threat model deﬁned in §4.1,
an adversary cannot convince either the enrollee or the
registrar to accept any public key that is not the legitimate
public key of the other device.
Proof We prove Prop. 7.4 by contradiction, considering
ﬁrst the registrar, and then the enrollee.
First, suppose an adversary convinces the registrar to
accept a public key other than that of the enrollee. By
§5.2, this means the registrar received exactly one public
key (and, thus, did not receive the enrollee’s key), and
TEA RECV GET never returned OVERLAP or RETRY. By
assumption, the enrollee and registrar entered PBC mode
within 120 seconds of each other, which means they were
concurrently running their respective pseudo-code for
at least #channels × (tx tmo + 2 × tea duration) seconds,
and therefore the enrollee must have transmitted at least
one TEA message on the registrar’s channel while the reg-
istrar was listening. Prop. 7.3 guarantees that the registrar
must have either received that one message, or detected
tampering (and returned OVERLAP or RETRY), which con-
tradicts our assumption that the registrar never received
the enrollee’s message and never returned OVERLAP or
RETRY. Thus, an adversary cannot convince the registrar
to accept a public key other than that of the enrollee.
Second, suppose an adversary convinces the enrollee to
accept a public key other than that of the registrar. By §5.2,
this means that the enrollee received exactly one public
key response to its requests (and, thus, did not receive
the registrar’s key), and TEA RECV GET never returned
OVERLAP or RETRY. As above, there must have been a
time when the registrar was listening, and the enrollee
transmitted its request message on the registrar’s channel.
Prop. 7.3 guarantees that the registrar must have either
received the enrollee’s message, or detected tampering
(and returned OVERLAP or RETRY).
In both of those
cases, §5.2 requires the registrar to send a reply. Prop 7.3
similarly guarantees that the enrollee must have either
received the registrar’s reply, or detected tampering (and
returned OVERLAP or RETRY), which directly contradicts
our supposition. Thus, an adversary cannot convince the
enrollee to accept a public key other than the registrar’s,
and TEP is secure. (cid:3)
7.2 Evaluating TEP’s Accuracy
We check whether TEP can be accurately realized us-
ing existing operating systems and off-the-shelf 802.11
hardware. Our experiments use our Ath5K prototype de-
scribed in §6 and run over our campus network. Figure 5
shows the locations of the TEP nodes, which span an area
11
6
4
3
7
8
5
2
1
12
11
10
9
170 feet
Figure 5: Locations of nodes (indicated by blue circles) in our ex-
perimental testbed, which operates as part of our campus network.
F
D
C
1
0.8
0.6
0.4
0.2
0
0
F
D
C
1
0.8
0.6
0.4
0.2
0
0
 OFF slots
   ON slots
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8