Roundcube
✓
✓
✓
A1, A2
A3, A4, A8
A12
1 The subscript identiﬁes the speciﬁc attack (e.g., A8 identiﬁes the encoding based attack discussed in 4.2).
2 The abbreviation SIC stands for the receiver’s sender inconsistency checks, an email notiﬁcation custom deployed by providers,
described in the background 2.2.2.
3 The cases with ✓ mean that the domain name deploys with the relevant email security protocol or perform the sender
inconsistency checks.
a spooﬁng email whose Auth username(PI:EMAIL) and
Mail From (PI:EMAIL) are inconsistent during email
sending authentication. SMTP protocol does not provide any
built-in security features to guarantee the consistency of auth
usernameand Mail Fromheader. Therefore, this type of pro-
tection depends only on the software implementation of the
email developer.
In our spooﬁng experiments, most email services have no-
ticed such problems and prohibited users from sending emails
inconsistent with their original identity. However, this type
of problem still appears in some well-known corporate email
software (i.e., Zimbra, EwoMail). These two email services
are vulnerable under default security conﬁguration. Email
administrators need to upgrade their security conﬁgurations
to prevent such problems manually.
The Inconsistency between Mail From and From head-
ers (A2). An attacker can send a spooﬁng email with different
Mail From and From headers. Figure 5(b) shows this type of
attack. Although some users are allowed to use email aliases
to send emails with a different Fromheader, no user should be
allowed to freely modify the From header to any value (e.g.,
PI:EMAIL) to prevent attacks. The From header should
only be allowed to be set within limited legal values. Many
prevalent email services (e.g., Outlook, Sina, QQ Mail) and
most third-party email clients (e.g., Foxmail, Apple Mail) only
display the Fromheader, not the Mail Fromheader. For these
emails which have different Mail From and From headers,
the victim cannot even see any security alerts on the MUA.
Similar inconsistency also exists between the RCPT Toand
To headers. In the real world, there are some scenes that
Table 2: Sender spooﬁng experiment results on 23 target email
clients.
OS
Clients
SIC
Weaknesses
Windows
Foxmail
✓
A6, A7, A13, A14
Outlook
✓
A6, A13
eM Client
✓
A6, A12
Thunderbird
A6, A13, A14
Windows Mail
A6, A7, A13, A14
MacOS
Foxmail
A6, A13
Outlook
✓
A6, A13
eM Client
✓
A6, A7, A12, A13, A14
Thunderbird
A6, A13, A14
Apple Mail
A6, A13, A14
Linux
Thunderbird
A6, A13
Mailspring
A6, A13, A14
Claws Mail
A6, A14
Evolution
A6, A13, A14
Sylpheed
A6, A13, A14
Android
Gmail
A6, A13
QQ Mail
✓
A6, A13, A14
NetEase Mail
A6, A12, A13
Outlook
✓
A6, A13
iOS
Mail.app
A6, A7, A13, A14
QQ Mail
✓
A6, A13
NetEase Mail
A6, A12, A13
Outlook
✓
A6, A13
1 The subscript identiﬁes the speciﬁc attack.
2 The SIC stands for the sender inconsistency checks.
3 The cases with ✓ mean that the email client performs
the sender inconsistency checks.
4 Since email clients do not involve veriﬁcation of the
mail protocol, we only tested attacks (i.e., A6, A7, A12,
A13, A14) related to email UI rendering.
cause the inconsistency, such as email forwarding and Bcc.
However, this kind of ﬂexibility increases attack surfaces and
introduces new security risks. For example, an attacker can
send an email to a victim, even if the email’s To header is
not the address of the victim. In this case, an attacker can
further use this method to obtain a spooﬁng email with a
DKIM signature that normally could not be obtained, which
is helpful for further attacks. This technique might not be
effective when used alone, but it can often achieve excellent
spooﬁng results when combined with other attack techniques.
14 email services are vulnerable to this type of attack in our
experiments. In addition, we also found that some email ser-
vices (e.g., Outlook, Zoho, AOL, Yahoo) have realized these
risks and have implemented corresponding security restric-
tions. They refused to send emails with inconsistent Mail
From and From headers during SMTP sending process. How-
ever, these defenses can still be bypassed by two types of
attacks (i.e., A4, A5). For example, we can send a spooﬁng
(a) Attack with different auth username and Mail From header
(b) Attack with different Mail From and From headers
Figure 5: Two attacks of bypassing sending service’s veriﬁca-
tion.
email with the Mail Fromheader as and the
From header as  in Yahoo
which introduces another source of ambiguity and eventu-
ally bypasses email protocol veriﬁcation. Therefore, it is still
possible to send such spooﬁng emails, even if the sender has
deployed relevant security measures.
4.2
Attacks in Email Receiving Veriﬁcation
SPF, DKIM and DMARC are the prevalent mechanisms used
to counter email spooﬁng attacks. If an attacker can bypass
these protocols, it can also pose a serious security threat to
email security ecosystem. There are three attack models to
launch this type of attack: shared MTA attack, direct MTA
attack, and forward MTA attack. An attack is successful while
the receiver’s MTA incorrectly gets a ’none/pass’ veriﬁcation
result.
Empty Mail From Attack (A3). RFC 5321 [25] explicitly
describes that an empty Mail From is allowed, which is
mainly used to prevent bounce loop-back and allow some
special message. However, this feature can also be abused
to launch email spooﬁng attacks. As shown in Figure 6,
an attacker can send an email with an empty Mail From
header, and the From header fabricates Alice’s identity (Al-
PI:EMAIL).
The SPF protocol [23] stipulates that the receiver’s MTA
must complete the SPF veriﬁcation based on the Helo ﬁeld
if the Mail From header is empty. However, the abuse of
the Helo ﬁeld in real life make some email services disobey
the standard and take a more loose approach of veriﬁcation.
Thus, when the recipient deals with those emails, they can
not complete SPF veriﬁcation based on the Helo ﬁeld, but
directly return "none". This type of error allows an attacker to
bypass the SPF protection. As a result, an attacker can change
the SPF result of this attack from "fail" to "none".
13 email services (e.g., Yahoo, Yeah, 126, Aol) are vul-
nerable to this type of attacks. Fortunately, there are already
17 email services that have ﬁxed such security issues, 5 of
Figure 6: Empty Mail From attack bypassing the SPF veriﬁ-
cation.
(a) Ordinary multiple From attack.
(b) Multiple From attack with spaces.
(c) Multiple From attack with case
variation.
(d) Multiple From attack with invisible
characters.
Figure 7: Multiple From attacks to make DMARC verify
PI:EMAIL while the MUA displays Alice@a.com.
which (e.g., Zoho.com, iCloud.com, exmail.qq.com) drops
such emails into spam.
Multiple From Headers (A4). Inspired by the work of
Chen et al. [6], we also utilize multiple headers techniques in
email spooﬁng attacks. Compared with Chen’s work, we have
more distortions from the From header, such as adding spaces
before and after the From, case conversion, and inserting non-
printable characters. As shown in Figure 7, an attacker can
construct multiple From headers to bypass security policies.
RFC 5322 [40] indicates that emails with multiple Fromﬁelds
are typically rejected. However, there are still some email
services that fail to follow the protocol and accept emails
with multiple From headers. It can introduce inconsistencies
in the email receiving veriﬁcation stage, which could lead
to additional security risks. Figure 7(c) shows an example
that the displayed sender address is PI:EMAIL, while the
receiver’s MTA may use PI:EMAIL for the DMARC
veriﬁcation .
Only 4 mail services (i.e., Gmail, Yahoo, Tom, Aol) reject
emails with multiple Fromheaders, and 19 mail services are af-
fected by this type of attacks. Most tested email services tend
to display the ﬁrst From header on the webmail, while 6 ser-
vices (e.g., iCloud, Yandex, Alibaba Cloud) choose to display
the last From header. Besides, 7 vendors have made speciﬁc
security regulations against such attacks, such as showing
two From addresses on the webmail simultaneously (e.g., QQ
Mail, Coremail) or dropping such emails into the spam folder
(e.g., Outlook, rambler.ru).
Multiple Email Addresses (A5). Using multiple email ad-
(a) Ordinary multiple address attack. (b) Multiple address attack with null
address.
(c) Multiple address attack with seman-
tic characters.
(d) Multiple address attack with com-
ments.
Figure 8: Multiple email addresses attacks to make DMARC
verify PI:EMAIL while MUA displays Alice@a.com.
dresses is also an effective technique to bypass protocol ver-
iﬁcation. Usage of multiple addresses was ﬁrst proposed
in RFC2822 [39] and is still explicitly allowed in RFC
5322 [40]. It is suitable for such scenarios: an email with
multiple authors is supposed to list all of them in the From
header. Then, the Sender ﬁeld is added to mark the ac-
tual sender. As shown in Figure 8(a), an attacker can by-
pass DMARC veriﬁcation with multiple email addresses
(, ). In addition, we
can also make some rule-based mutations to these addresses,
such as [PI:EMAIL], .
15 mail services (e.g., QQ mail, 21cn.com and onet.pl)
would still accept such emails. Only 4 services (e.g., Gmail
and Mail.ru) directly reject those emails, and 5 other services
(e.g., zoho.com, tom.com, outlook.com) put them into spam.
The rest 6 services (e.g., 139.com, cock.li and Roundcube)
display all of these addresses, making spooﬁng emails more
difﬁcult to deceive the victim.
Parsing Inconsistencies Attacks (A6). Mail From and
From headers are in rich text with a very complicated gram-
matical format. As a result, it is challenging to parse display
names and real addresses correctly. These inconsistencies can
allow attackers to bypass authentication and spoof their target
email clients.
A mailbox address is one of the essential components of
these two headers. First, mailbox addresses were allowed
to have a route portion [39] in front of the real sender ad-
dress when enclosed in "". Therefore, the mailbox
() is still a legal address.
Among them, @a.com, @b.com is the route portion, and "ad-
PI:EMAIL" is the real sender’s address. Second, it is allowed
to use mailbox-list and address-list [39], and they can have
"null" members, such as , ,. Third,
comment [40] is a string enclosed in parentheses. They were
allowed between the period-separated elements of local-part
and domain, such as . Finally, there is an optional display-name [40] in
the From header. It indicates the sender’s name, which is dis-
played for receivers. Figure 9 shows three types of attacks
(a) Parsing inconsistency with route portion.
(b) Parsing inconsistency with "null" mailbox-list.
(c) Parsing inconsistency with comment.
(d) NUL character truncates string parsing.
(e) Invisible unicode characters truncate string pars-
ing.
(f) Semantic characters truncate string parsing.
Figure 9: Six spooﬁng examples of bypassing receiving service’s veriﬁcation.
(a) Encoding based attack bypassing DMARC veriﬁcation.
(b) Combined encoding and truncated attack.
Figure 10: Two spooﬁng examples with encoding based at-
tacks.
based on parsing inconsistencies.
Truncated characters are a series of characters that ter-
minate string parsing. When parsing and extracting the tar-
get domain name from the email headers, truncated char-
acters will end the parsing process. Figure 9(d) shows
that the program gets an incomplete domain name (a.com)
when parsing the target domain name from the string
"PI:EMAIL\PI:EMAIL". Attackers can use these
techniques to bypass the veriﬁcation of email security proto-
cols. Overall, this work ﬁnds three types of truncated char-
acters in the email string parsing process. First, NUL (\x00)
character can terminate string in the C programming language.
It has the same effect in the email ﬁeld. Second, some invis-
ible Unicode characters (e.g., \uff00-\uffff,\x81-\xff)
can also terminate the string parsing process. Third, certain
semantic characters, such as "[,],{,},\t,\r,\n,;", can be used
to indicate a tokenization point in lexical analysis. Meanwhile,
these characters also inﬂuence the string parsing process.
We found that 13 email services have problems in the UI
rendering stage under such attacks. For Gmail and Yandex,
we can use these attack techniques to bypass DMARC.
Encoding Based Attack (A7). RFC 2045(MIME) [15] de-
scribes a mechanism denoting textual body parts, which are
coded in various character sets. The ABNF grammar of these
parts is as follows:=?charset?encoding?encoded-text?=.
The "charset" ﬁeld speciﬁes the character set associated with
the not encoded text; "encoding" ﬁeld speciﬁes the encod-
ing algorithm, where "b" represents base64 encoding, and
"q" represents quoted-printable encoding; "encode-text" ﬁeld
speciﬁes the encoded text. Attackers can use these encoded
addresses to evade email security protocol veriﬁcation. Fig-
ure 10(a) shows the details such attacks. For an encoded
address, such as From: =?utf-8?b?QWxpY2VAYS5jb20=?=,
most email services do not decode the address before verify-
ing the DMARC protocol, thus fail to extract the accurate do-
main and get a "None" in the following DMARC veriﬁcation.
However, some email services display the decoded sender
address (PI:EMAIL) on the MUA. Furthermore, this tech-
nique can be combined with truncated strings. As shown in
the Figure 10(b), an attacker can construct the From header as
"b64(PI:EMAIL>b64(\uffff)@attack.com". Email client
programs could get incomplete username(i.e., PI:EMAIL),
but it would still use the attacker’s domain (attack.com) for
DMARC veriﬁcation.
7 email services are affected by the vulnerability, including
some popular services (e.g., Outlook, Ofﬁce 365, Yahoo) with
more than one billion users.
The Subdomain Attack (A8). An attacker can send spooﬁng
emails from a non-existent subdomain (no MX record) of
well-known email services (e.g., PI:EMAIL).
Thus, there are no corresponding SPF records. The spooﬁng
email only gets a "None" veriﬁcation result, and the receiver’s
MTA does not directly reject it. Although the parent domain
(e.g., google.com) deploys strict email policies, attackers can
still attack in this way. Unfortunately, many companies use
sub-domains to send business subscription emails, such as
Paypal, Gmail, and Apple. As a result, ordinary users tend to
trust such emails.
Unfortunately, RFC 7208 [24] states that the use of wild-
card records for publishing SPF records is discouraged. And
few email administrators conﬁgure wildcard SPF records in
the real world. Besides, the receiver’s MTA can usually re-
ject emails from domains without an MX record. But RFC
Figure 11: Exploiting forwarding services to bypass SPF and
DMARC.
2821 [26] mentions that, when a domain has no MX records,
SMTP assumes an A record will sufﬁce, which means any