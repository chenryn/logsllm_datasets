title:Understanding Mobile App Usage Patterns Using In-App Advertisements
author:Alok Tongaonkar and
Shuaifu Dai and
Antonio Nucci and
Dawn Song
Understanding Mobile App Usage Patterns
Using In-App Advertisements
Alok Tongaonkar1, Shuaifu Dai2,3, Antonio Nucci1, and Dawn Song3
1 Narus Inc, USA
2 Peking University, China
{alok,anucci}@narus.com, PI:EMAIL, PI:EMAIL
3 University of California, Berkeley, USA
Abstract. Recent years have seen an explosive growth in the number
of mobile devices such as smart phones and tablets. This has resulted
in a growing need of the operators to understand the usage patterns of
the mobile apps used on these devices. Previous studies in this area have
relied on volunteers using instrumented devices or using ﬁelds in the
HTTP traﬃc such as User-Agent to identify the apps in network traces.
However, the results of the former approach are diﬃcult to be extrapo-
lated to real-world scenario while the latter approach is not applicable
to platforms like Android where developers generally use generic strings,
that can not be used to identify the apps, in the User-Agent ﬁeld. In this
paper, we present a novel way of identifying Android apps in network
traces using mobile in-app advertisements. Our preliminary experiments
with real world traces show that this technique is promising for large
scale mobile app usage pattern studies. We also present an analysis of
the oﬃcial Android market place from an advertising perspective.
1
Introduction
In recent years, there have been dramatic changes to the way users behave,
interact and utilize the network. More and more users are accessing the internet
via mobile devices like smart phones and tablets. According to recent statistics by
Canalys [1], 488 million smart phones have been sold in the year 2011, compared
to 415 million personal computers. Users of these devices typically download
applications (commonly called mobile apps) that provide speciﬁc functionality.
A majority of these apps access the internet. For example, 84% of the 55K
Android apps in the oﬃcial Android app market [2] that we randomly picked,
required permission for Internet access. This has led to a burgeoning interest
amongst network operators in understanding the mobile app usage patterns in
their networks.
Recent years have seen an increasing number of research works that analyze
network traﬃc to understand usage behaviors of mobile apps ([3,4]). However,
these papers rely on techniques for app identiﬁcation which are not applicable for
Android apps or rely on having access to the Android devices and monitoring the
speciﬁc devices. For example, Xu et al [3] and Maier et al [5] use User-Agent
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 63–72, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
64
A. Tongaonkar et al.
ﬁeld in the HTTP header to identify the app. Apple has a guideline for iOS
which requires that this ﬁeld contain app identiﬁer. However, this guideline is
not strictly enforced. For Android apps the situation is even worse since devel-
opers generally put some generic string (not unique to the app but identifying
the Android version and such) in this ﬁeld. On the other hand the approach
taken of making some users use apps on speciﬁc devices to collect network trace
and proﬁle app usage does not give real-world data ([4,6]). Moreover, manual
execution of apps suﬀers from the problems of scalability. The approach of using
Host ﬁeld in the HTTP header for identifying the apps does not work all the
time because the same host may serve multiple apps. This is typically true when
the same app developer such as Zynga publishes multiple apps. Also many plat-
forms, such as Facebook mobile app development platform support apps from
diﬀerent developers. The apps which are developed on these platforms typically
use the servers from the platform provider to provide their service. For instance,
m.facebook.com hosts diverse apps such as Pirates Mobile, a gaming app, and
Squats, a personal training app.
In this paper, we present a new technique of identifying app usage patterns
based on the advertising traﬃc originating from the apps. This technique is
based on the observation that mobile apps may communicate with many diﬀer-
ent servers for diﬀerent purposes. A typical Android app may contact the web site
of the app provider to obtain the API information, connect to a cloud service like
Amazon EC2 for downloading some ﬁles, contact sites such as doubleclick.com
and mobclix.com to retrieve ads, and provide usage stats to sites such as
googleanalytics.com. We can classify network traﬃc from an app into three
main categories similar to the classiﬁcation used by Wei et al [6] as follows:
(i) Origin: traﬃc that comes from the servers owned by the app provider (e.g.
pandora.com for Pandora). (ii) Content Distribution Network (CDN)+Cloud:
traﬃc that comes from servers of CDNs ( e.g., Akamai) and cloud providers (e.g.
Amazon AWS). (iii) Third-party: traﬃc from various advertising services (e.g.,
AdMob) and analytical services (e.g., Omniture).
Previous studies of mobile app usage have focused on either origin traﬃc ([3])
or CDN+cloud traﬃc ([7]). We present a diﬀerent approach by studying usage
behavior of mobile apps based on advertising traﬃc. Advertising is a critical
component of the mobile app ecosystems from a ﬁnancial perspective. We believe
that usage patterns studies based on advertisements will be very valuable in
future. Many mobile apps use one or more advertising services as a source of
revenue. To use these services, developers must register their apps with the
advertising service provider. Developers bundle third-party, binary-only libraries
(called ad libraries) from the advertising service providers into their apps. The
information about the ad libraries being used by an app is usually present in
the meta-data provided in the installable package of the apps. We can use this
information to understand the distribution of advertisements in the apps.
Another interesting observation is that typically an advertising service provider
identiﬁes the app using the app name provided by the developer or unique
app identiﬁer generated by the service provider at the time of the registration.
Understanding Mobile App Usage Patterns Using In-App Advertisements
65
These app names or identiﬁers are present in network ﬂows to the advertising
service providers. We can use these identiﬁers to study the patterns of mobile
app usage from real world network traces.
The main contributions of this work are as below.
Mobile in-app ad libraries have been studied before in the context of security
and privacy [8,9,10] and energy consumption [11]. This is the ﬁrst work to present
a systematic study of usage patterns of mobile apps using ad ﬂows. We believe
that considering the critical role of advertisements on mobile app ecosystems,
our research paves the way for new studies which can be very useful for a variety
of players like network operators, advertising service providers, advertisers, and
mobile app developers. We focus on understanding the app usage patterns on
the Android platform in this work. However, the ideas and techniques presented
here are equally applicable to iOS and Windows Mobile platforms.
• We present a systematic study of advertising libraries on the Android platform.
• We present results of analyzing more than 50K Android apps from an adver-
tising perspective.
• We present results from evaluating the network traces from a Tier 2 cellular
service provider.
The rest of the paper is organized as follows. In Section 2 we present our analysis
of advertisements in apps in the oﬃcial Android market. In Section 3 we present
mobile app usage behavior patterns from real world network traces. We discuss
the limitations and future work in Section 4. Finally we present the conclusions
in Section 5.
2 App Market Analysis
In this section we present an analysis of the oﬃcial Android app market, Google
Play Store, with respect to the diﬀerent categories of apps. Note that our goal
is not to do a comprehensive study of all apps in the store but give a ﬂavor of
the kinds of analysis possible with the advertising information.
2.1 Background
Google Play Store is the most popular Android app market with over 500K apps
which includes both free and paid apps. Developers of many of the free apps rely
on advertisements (ads) for generating revenue so we focus only on free apps
in this paper. Android apps are distributed as special ﬁles, called Application
Package File (APK), with .apk ﬁle extension. Along with the application bina-
ries and resources, each APK ﬁle contains an AndroidManifest.xml ﬁle. The
manifest ﬁle is an XML ﬁle that contains meta-data about the app such as the
name of the app, permissions required, resources used, libraries used, etc.
Developers of free apps typically use third-party advertising service providers
such Google Ads or Smaato to display ads in the app. Ad service providers
may diﬀer in the way that ads are provided to the app but they have some
common characteristics. Most ad networks provide libraries for user-interface
66
A. Tongaonkar et al.
Ad Library
App Identifier for Ad Library
Fig. 1. Sample of Zedge Manifest File
code (to present their ads) and network code (to request ads from the ad networks
servers). The libraries are designed to be tightly bundled with host apps to
make it more diﬃcult to disable the ad functionality or defraud the ad network.
When a developer registers an app with an ad service provider, she may receive
a developer identiﬁer or app identiﬁer. The SDK for the ad library contains
instructions, on how to embed the ad library in the app, such as the permissions
required by the ad library and the mechanism used by the ad service provider
to identify the app or the developer. The ad service provider may use either app
name or an identiﬁer generated at registration time to identify the app or the
developer.
To understand how ad libraries are used, consider Zedge, which is a very pop-
ular app (more than 1M downloads) that is used for downloading wallpapers and
ringtones. We use a tool for reverse engineering third-party, closed, binary Android
apps, called apktool [12], to extract the manifest ﬁle in the .apk ﬁle into a human
readable form. Figure 1 shows the manifest ﬁle for Zedge. We can see that the man-
ifest ﬁle lists three ad libraries that are embedded in Zedge - (i) Google Ads, (ii)
InMobi, and (iii) MoPub. Many (but not all) of the ad service providers require the
identiﬁer to be mentioned explicitly in the manifest ﬁle. For instance, in Figure 1,
the identiﬁer of Zedge for Google Ads (a14d2b448c73a08) is provided in the meta-
data ﬁeld for AdMob (owned by Google). An interesting point to note is that even
though AdWhirl is not explicitly mentioned in the activity list there is an identi-
ﬁer of Zedge (523e4ae0705248b0b2b770a91d33d1c6) for AdWhirl. The package
name for Zedge is net.zedge.android. Users can search for an app in the Google
Play Store using its package name. Google Play Store provides a lot of informa-
tion regarding the app such as the developer name, the number of downloads, and
the category of the app. We can make use of this information to perform in-depth
analysis of the app market from an advertising point of view.
2.2 Dissecting Google Play Store
We downloaded 55K free apps from Google Play Store. These apps were chosen
randomly to avoid any bias towards the most popular apps or any particular
category of apps. 46K of the apps asked for the android.permission.INTERNET
Understanding Mobile App Usage Patterns Using In-App Advertisements
67
s
p
p
A
(cid:3)
f
o
(cid:3)
r
e
b
m
u
N
6000
5000
4000
3000
2000
1000
0
s
p
p
A
(cid:3)
f
o
(cid:3)
r
e
b
m
u
N
3500
3000
2500
2000
1500
1000
500
0
(a) All Apps
(b) Apps Containing Ads Library
Fig. 2. Top 10 Categories for Apps
which is needed by any app that needs to access the network. We obtained
the category of each app by querying the Play Store. We identiﬁed 30 diﬀerent
categories to which the apps belonged. Our analysis showed that the top 10
categories accounted for ≈60% of the apps. Figure 2a shows the distribution of
the apps in these top 10 categories.
We picked 30 popular ad libraries on Android platform [8] and generated rules
for identifying these libraries from the manifest ﬁles. For 19K of these 46K apps
we were able to identify the ad libraries that were being used. Figure 3a shows
the number of ad libraries used by each app. We can see that a majority of the
apps (≈15K) use only 1 ad library and less than 0.3% of the apps use more than
5 ad libraries. Figure 3b shows the most popular ad libraries in these apps. We
can see that Google Ads is the most popular ad library as it is embedded in close
to 12K apps, followed by Millennial Media (1.7K apps) and Mobclix (1.3K apps).
The long tailed nature of the distribution suggests that, in practice, studying
any data with respect to the top 50-100 ad libraries would result in high coverage
in terms of apps.
We categorized the 19K apps which contained identiﬁable ad libraries. Fig-
ure 2b shows the distribution of the apps in the top 10 categories that we identi-
ﬁed above. We see that of the 5.5K apps in the Tools category only 2K contained
ads. On the other hand the percentage of Entertainment apps containing ads is
much higher (2.6K out of 5.2K). Brain apps (related to puzzles and such) have
the highest proportion of apps containing ads (3.2K out of 3.9K). The proportion
of apps containing ads in other categories which have similar number of apps in
our dataset such as Business, Books and Reference, Travel and Local, News and
Magazines, Education, and Casual, shows a large variance. Such information is
very useful for new developers looking to pick a category to develop apps in or for
ad providers to target development community in any particular category. We
can further drill down into the distribution of categories per ad library or pop-
ularity of diﬀerent ads library in a given category. Figure 4a and Figure 5 show
the distribution of apps in three of the most popular ad networks in our data
set: Google Ads, Mobclix, and Millennial Media. We can see that Google Ads is
quite evenly spread amongst various app categories while Millennial Media and
68
A. Tongaonkar et al.
s
p
p
A
(cid:3)
f
o
(cid:3)
r
e
b
m
u
N
16000
14000
12000
10000
8000
6000
4000
2000
0
1
3
2
5
Number(cid:3)of(cid:3)Ads(cid:3)Library
4
others,(cid:3)
1954
tapjoy,(cid:3)169
youmi,(cid:3)205
greystripe,(cid:3)318
mobfox,(cid:3)363
airpush,(cid:3)418
pontiflex,(cid:3)491
mobclix,(cid:3)1328
millennialmedia,(cid:3)
1742
google.ads,
11780
5+
(a) Distribution of Ad Libraries in Apps
(b) Number of Apps Per Ad Library
Fig. 3. Ads Library Info
Mobclix ad libraries are very unevenly distributed amongst the categories. The
top 2 categories for Mobclix are Entertainment and Casual, while for Millenial
Media they are Brain and News and Magazines.
The popularity of an app is commonly measured in terms of the number of down-
loads of the app. Having the information about the ad libraries in an app allows
us to obtain many diﬀerent perspectives from the downloads data. For instance,
for each ad network, we can determine the number of downloads for each app.
Figure 4b shows the downloads data for apps containing Google Ads. We can see
that the maximum download numbers are for 10K-50K downloads (3K of the 12K
apps). We can plot similar graphs for other ad networks or even include app cate-
gory dimension in these graphs. This information is useful to various entities such
as network providers or developers looking to select an ad library.
3 Network Trace Analysis
In this section we present the analysis of real-world network traces from a Tier 2
cellular service provider. We collected the HTTP headers for all users in the net-
work for a week (June 18-25, 2011). Here we present our analysis of the traces from
two days in the week - one a weekday (June 21) and the other a weekend (Jun 24).
We note that due to company non-disclosure agreements we can not release our
dataset/tools. However, this paper contains suﬃcient details to perform similar
analysis on any publicly available trace containing mobile data.
3.1 Methodology
We have developed a system for analyzing Android apps that installs and runs
each Android app in a separate emulator running in a virtual machine [13]. Here we
describe the parts of the system relevant for collecting ad ﬂows. We can identify an
ad ﬂow from the Host ﬁeld in the HTTP header ﬁeld. We created a database of the
host names used by diﬀerent ad networks as follows. For each ad library we picked
a few apps using the library. We used tcpdump to collect all the network traﬃc
from the virtual machine. We ported the strace utility to Android to log each
networking system call performed by the app. We identiﬁed all the threads started
Understanding Mobile App Usage Patterns Using In-App Advertisements
69
s
p
p
A
(cid:3)
f
o
(cid:3)
r
e
b
m
u
N
1400
1200
1000