title:Triple Handshakes and Cookie Cutters: Breaking and Fixing Authentication
over TLS
author:Karthikeyan Bhargavan and
Antoine Delignat-Lavaud and
C&apos;edric Fournet and
Alfredo Pironti and
Pierre-Yves Strub
2014 IEEE Symposium on Security and Privacy
Triple Handshakes and Cookie Cutters:
Breaking and Fixing Authentication over TLS
Karthikeyan Bhargavan∗, Antoine Delignat-Lavaud∗, C´edric Fournet†, Alfredo Pironti∗ and Pierre-Yves Strub‡
∗INRIA Paris-Rocquencourt
†Microsoft Research ‡IMDEA Software Institute
Abstract—TLS was designed as a transparent channel abstrac-
tion to allow developers with no cryptographic expertise to protect
their application against attackers that may control some clients,
some servers, and may have the capability to tamper with network
connections. However, the security guarantees of TLS fall short
of those of a secure channel, leading to a variety of attacks.
We show how some widespread false beliefs about these guar-
antees can be exploited to attack popular applications and defeat
several standard authentication methods that rely too naively on
TLS. We present new client impersonation attacks against TLS
renegotiations, wireless networks, challenge-response protocols,
and channel-bound cookies. Our attacks exploit combinations of
RSA and Difﬁe-Hellman key exchange, session resumption, and
renegotiation to bypass many recent countermeasures. We also
demonstrate new ways to exploit known weaknesses of HTTP
over TLS. We investigate the root causes for these attacks and
propose new countermeasures. At the protocol level, we design
and implement two new TLS extensions that strengthen the
authentication guarantees of the handshake. At the application
level, we develop an exemplary HTTPS client
library that
implements several mitigations, on top of a previously veriﬁed
TLS implementation, and verify that their composition provides
strong, simple application security.
I. TRANSPARENT TRANSPORT LAYER SECURITY?
TLS is the main Internet Standard for secure communica-
tions and still, after 20 years of practice, the security it provides
to applications remains problematic.
I-A APPLICATIONS VS PROTOCOLS. By design, TLS intends
to provide a drop-in replacement of the basic networking
functions, such as connect, accept, read and write,
that can effortlessly protect any application against a net-
work attacker without the need to understand the protocol or
its underlying cryptography. Pragmatically, TLS offers much
ﬂexibility, so the security properties provided by the protocol
[43, 35, 32, 29] and its implementations [20, 14, 15] depend
on how TLS is used. For instance, if the application enables an
unsuitable ciphersuite [4], uses compression [25], or ignores
state changes [45], it opens itself to attacks. Furthermore,
applications-level security mechanisms increasingly seek to
beneﬁt from the underlying TLS connection by reusing its
authenticated peer identities, key materials [48], and unique
identiﬁers [6].
As a consequence, TLS libraries provide low-level APIs
that expose many details of the cryptographic mechanisms
and certiﬁcates negotiated during successive handshakes. Some
application-level libraries, such as CURL, seek to recover the
simplicity of a secure channel by implementing an abstraction
layer that smooths over the details of TLS by managing
sessions, validating certiﬁcates, etc. Meanwhile, TLS appli-
cations continue to rely on URLs, passwords, and cookies;
they mix secure and insecure transports; and they often ignore
lower-level signals such as handshake completion, session
resumption, and truncated connections.
Many persistent problems can be blamed on a mismatch
between the authentication guarantees expected by the appli-
cation and those actually provided by TLS. To illustrate our
point, we list below a few myths about those guarantees, which
we debunk in this paper. Once a connection is established:
1)
2)
3)
4)
the principal at the other end cannot change;
the master secret is shared only between the two peers,
so it can be used to derive fresh application-level keys;
the tls-unique channel binding [6] uniquely identi-
ﬁes the connection;
the connection authenticates the whole data stream, so it
is safe to start processing application data as it arrives.
The ﬁrst is widely believed to be ensured by the TLS renego-
tiation extension [49]. The second and third are used for man-
in-the-middle protections in tunneled protocols like PEAP and
some authentication modes in SASL and GSS-API. The fourth
forms the basis of HTTPS sessions on the web.
These assumptions are false, and this enables various at-
tacks, even against applications using the latest, fully-patched
TLS 1.2 implementations. Whether these attacks should be
blamed on the protocol or its usage, we argue that the transport
and application protocols must be analyzed together to achieve
reliable, meaningful, application-level security.
On the other hand, our paper does not challenge the cryp-
tographic security of the core constructions of TLS—most
of our attacks apply even under the (theoretical) assumption
that clients and servers only use cryptographically strong
ciphersuites, as formalized, for example, in [15, 35, 29, 16].
I-B NEW ATTACKS OVER TLS. We report new practical at-
tacks against applications that rely on TLS for their security.
The ﬁrst family of attacks uses a combination of successive
TLS handshakes over multiple connections to disrupt client
authentication. The second family of attacks targets HTTPS
message integrity but may apply to other application protocols.
Triple Handshakes Considered Harmful (§V, §VI) We
ﬁrst point out unknown key-share [17] vulnerabilities in RSA,
DHE, and abbreviated handshakes, and we compose them
to implement a malicious TLS proxy that can synchronize
the keys on separate connections with honest peers. These
vulnerabilities do not in themselves constitute attacks on the
integrity and conﬁdentiality guarantees of TLS. However, we
show that
they enable new man-in-the-middle attacks that
© 2014, Karthikeyan Bhargavan. Under license to IEEE.
DOI 10.1109/SP.2014.14
98
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
break a variety of authentication mechanisms built over TLS,
including (a) client-authenticated TLS renegotiation—for ex-
ample if a client presents her certiﬁcate to two TLS servers,
one can impersonate the client at the other; (b) compound
authentication in tunneled protocols; (c) channel bindings for
application-level challenge-response protocols; and (d) channel
bindings for bearer tokens. We report concrete attacks against
published speciﬁcations and popular applications in all these
categories, including mainstream browsers and HTTP client
libraries, VPN applications, wireless applications, and mail and
chat servers.
Truncating Headers & Forcing Cookies (§III)
Indepen-
dently, we show that web browsers and servers often ignore
TLS disconnections and tolerate ill-formed messages, thereby
enabling message truncations. Although this vulnerability is
generally known [13, 52], we show how to apply truncation
to HTTP headers and HTML forms, opening new exploits. In
particular, our attacks completely defeat cookie-based authen-
tication. We also show new exploits based on known attack
vectors like cookie-forcing and its use for login CSRF [12, 18].
In particular, we show that building new application-level
protocols such as single sign-on and synchronization protocols
using cookies is foolhardy; they amplify login CSRF attacks
and enable network attackers to steal users’ private ﬁles.
I-C TOWARDS VERIFIED APPLICATION SECURITY. In light
of the two families of attacks outlined above, how to ensure
that a TLS application properly handles its interactions with
the TLS API? How to reliably lift TLS security to application
security? Broadly, we can either build countermeasures into
TLS; or carefully implement and verify simpler security APIs
over TLS; or, less robustly, promote prudent practices for
writing secure applications over TLS.
(§VII) One approach is to
Proposed TLS Extensions
strengthen the protocol to provide more robust security. To
this end, we propose two new TLS extensions that prevent the
attacks of §VI without the need to change applications. These
extensions have a negligible impact on performance and code
complexity, and can be deployed while preserving backward
compatibility. They apply to all protocol versions from SSL3
to TLS 1.2, as well as DTLS. To validate them experimentally,
we implemented and tested patches for two existing TLS
implementations: OpenSSL and miTLS. As future work, we
plan to formally model their security beneﬁts by extending
the veriﬁed cryptographic model of miTLS [15, 16].
Simple Veriﬁed HTTPS over TLS (§VIII)
In principle,
carefully-written applications can defend against these attacks,
without the need to change TLS. To validate our main recom-
mendations, and show that “transparent” application security
can indeed be achieved over TLS, we program miHTTPS:
a simple HTTPS library in F#, similar to CURL, on top
of miTLS. We specify its intended security properties and
we verify them using F7, a type-based veriﬁcation tool.
Thus, we formally relate the precise,
low-level TLS API
provided by miTLS to a simpler, more abstract HTTPS API.
In combination, we obtain the ﬁrst cryptographically-veriﬁed
implementation for HTTPS. In its current state, miHTTPS is
a proof-of-concept: it does not nearly provide the ﬂexibility
required by modern browsers and web services. However, it
automatically handles all the details of the underlying TLS
connections, including multiple handshakes, resumption and
negotiation, and truncations.
I-D MAIN CONTRIBUTIONS. We describe a new class of
man-in-the-middle attacks against authentication over TLS,
targeting the resumption and renegotiation features of the
handshake. We also present new exploits on HTTPS sessions
based on cookie-forcing and truncation. We apply these attacks
to break the expected authentication guarantees of several
state-of-the-art protocols, libraries, applications, and web ser-
vices. We have contacted many vendors, proposing immediate
mitigations and countermeasures, as well as more long-term
ﬁxes to the corresponding protocol speciﬁcations. Our TLS-
level proposals are consolidated in patches for OpenSSL and
miTLS. We have also built and veriﬁed a basic high-level
HTTPS API on top of miTLS, to validate our main application-
level recommendations in a simpliﬁed setting.
Contents §II reviews the dangers of application security over
TLS. §III illustrates these dangers by presenting new attacks
caused by truncating HTTPS trafﬁc and forcing cookies. §IV
recalls the relevant protocol aspects of TLS. §V describes a ma-
licious TLS proxy that synchronizes connections between TLS
clients and servers. §VI presents new proxy-based attacks on
applications that use client authentication. §VII discusses TLS
countermeasures, implemented in OpenSSL and miTLS. §VIII
illustrates application-level countermeasures, demonstrating a
simple, provably secure HTTPS API on top of miTLS. §IX
discusses impact, limitations and responsible disclosure of the
attacks presented in this paper.
Online Materials An extended version of this paper, the
two patches implementing our proposed countermeasures for
OpenSSL and for miTLS, our veriﬁed implementation of
miHTTPS and further experimental data are available online
at https://secure-resumption.com.
II. TLS INTERFACES AND THEIR SAFE USAGE
Modern clients and servers interact with TLS in ways far
beyond the original
intended interface. We discuss typical
usages of the protocol, relevant to the attacks of §III and §VI.
II-A SESSION AND CERTIFICATE MANAGEMENT. HTTP is
by far the most widely used application protocol over TLS.
Even the most basic HTTP operation, getting a ﬁle from
a given URL, may require multiple connections to different
servers due to redirections, authentication requests, temporary
errors, and many other factors. Thus, any HTTPS client
must manage and isolate multiple TLS sessions with different
principals: if a client ever uses a cached session with the wrong
server, the security guarantees of TLS collapse.
Similarly, any TLS application must implement a server
certiﬁcate validation procedure, which can combine subject
name and certiﬁcate purpose validation, pinning of certiﬁcation
authorities, trust on ﬁrst use (TOFU), among others [22, 28].
Once again, any error in this process may completely void the
security guarantees of TLS.
99
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
they are implemented at
While session and certiﬁcate management are critical to
the security of the protocol,
the
application level in contradiction to the network abstraction of
TLS. Even when TLS libraries provide default functionality for
these operations, they are not necessarily secure; for instance,
OpenSSL shares the client-side session cache between all
connections, even if they are to different hosts, unless it is
explicitly partitioned by the application.
II-B EXPOSURE TO TLS EVENTS. Another recurrent prob-
lem with TLS APIs is the way they should expose transport-
level events to the application. In this paper, we focus on two
events that can lead to attacks if ignored by the application:
renegotiation, and TCP connection closure.
Once a TLS connection is established, most applications
typically only use read, write and close. How can a
TLS library notify the application when renegotiation occurs?
What if the cipher or the peer certiﬁcate changes? At best,
the read primitive can return a non-fatal error code (like in
GnuTLS) which the application can either ignore or use to
enforce further checks on the new parameters. At worst, the
change is only visible if the application keeps polling speciﬁc
session parameters. To protect applications that ignore such
events from man-in-the-middle attacks [45], most TLS libraries
implement a protocol extension [49]. §VI-A shows how these
applications can still be attacked despite this countermeasure.
Since SSL3, the closure of a connection must be notiﬁed
to the other party with an authenticated protocol alert called
close_notify. Without this graceful closure, a man-in-the-
middle may have closed the TCP connection in the middle
of a TLS connection. To make this distinction, TLS libraries
should return a special error code when truncation is detected,
signaling to the application not to process any partial data
that may be buffered. However, in several implementations, the
read primitive returns the number of bytes read, while error
checking requires manual veriﬁcation of a different parameter.
Many applications do not distinguish between normal and
unexpected closure, sometimes deliberately for compatibility.
Another class of problems appears when TLS is an optional
feature of the application protocol, or if state is shared between
encrypted and plaintext connections. §III illustrates how to
exploit these issues against HTTP.
II-C CLIENT AUTHENTICATION. Applications can use vari-
ous mechanisms for client authentication: client certiﬁcates
(e.g. in browsers, for virtual private networks, and for wireless
access points), bearer tokens (e.g. HTTP sessions cookies and
OAuth access tokens), or challenge-responses protocols (e.g.
HTTP digest authentication, and several SASL mechanisms
used by mail and chat servers).
TLS client authentication is generally considered the safest,
but is seldom used. Weaker mechanisms that rely on bearer
tokens are more common, but they allow complete long-term
impersonation of the user when a token is compromised.
Challenge-response authentication within TLS tunnels offers
better protection, but is still vulnerable to man-in-the-middle
attacks [8, 41]: if the user is willing to authenticate on a server
controlled by the attacker, the attacker can forward a challenge
from a different server to impersonate the user at that server.
To address the shortcomings of authentication at the applica-
tion level, new solutions have been recently proposed to expose
values taken from the TLS handshake to applications in order
to bind their bearer tokens and challenge-response protocols
to the underlying TLS channel. Hence, tunneled wireless pro-
tocols like PEAP [42] use compound authentication schemes
[44] to protect against rogue access points. SASL mechanisms
like SCRAM [39] use TLS channel bindings [6], in partic-
ular the tls-unique binding, to prevent man-in-the-middle
attacks even on anonymous TLS connections. Channel ID [10],
a follow up to Origin-Bound Certiﬁcates [24], proposes that the
client generate a long-lived pair of keys associated with each
top-level domain it connects to. The public key is treated as a
client identiﬁer and, by binding bearer tokens such as cookies
to this public key, the server can ensure they can only be used
by the client they have been issued for, thus mitigating token
compromise. §VI studies the assumptions such mechanisms
make about TLS and presents attacks on a number of them.
III. TRANSPORT-LAYER ATTACKS ON HTTPS
As a case study of the API problems of §II, we consider
the use of HTTP over TLS [47]. In HTTP, messages consist
of two parts: the headers and an optional body, separated by
an empty line. Headers consist of colon-separated name-value
pairs, each terminated by a line break. The ﬁrst header line
is special: in requests, it contains the method (either GET or
POST), path, and protocol version; in responses, it contains
the protocol version, status code, and status message. The
HTTP body is formatted according to the headers: by default,
its length is speciﬁed in the Content-Length header;
if the Content-Transfer-Encoding header is set to
chunked, the body is a sequence of fragments, each preﬁxed
by the fragment length, terminated by an empty fragment.
Due to the variety of (not necessarily correct) HTTP im-
plementations, most clients are very permissive when parsing
HTTP. For instance, they often accept message bodies whose
length does not match the one indicated in the headers, or