# Vanity, Cracks, and Malware: Insights into the Anti-Copy Protection Ecosystem

**Authors:**  
Markus Kammerstetter, Christian Platzer, and Gilbert Wondracek  
Vienna University of Technology, Vienna, Austria  
{mk, cplatzer, gilbert}@iseclab.org

## Abstract
Today, a significant number of software products incorporate mechanisms to counter software piracy. However, these protection measures are often easily circumvented through the use of software patches (cracks) or license key generators (keygens), with seemingly no financial incentives for the creators. Our research reveals that the distribution of cracks and keygens not only allows miscreants to generate revenue (e.g., through advertising or malware infections) but also poses high risks to end-users of pirated software. We collected over 43,900 download links and analyzed more than 23,100 (3,551 unique) real-world cracks, demonstrating that these tools are frequently used by criminals to spread malware. Our results indicate that even state-of-the-art virus scanners cannot fully protect users from these threats. Additionally, we conducted a manual analysis to evaluate the effectiveness and effort required to acquire these tools. We have made our dataset publicly available to the research community.

**Categories and Subject Descriptors:**
- K.6.5 [Management of Computing and Information Systems]: Security and Protection—Invasive Software
- C.2.0 [Computer-Communication Networks]: General—Security and Protection
- D.4.6 [Operating Systems]: Security and Protection—Invasive Software

**General Terms:**
- Economics, Measurement, Security

**Keywords:**
- Piracy, Malware, Internet Measurements, Underground Economy

**Permission to Copy:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.

**CCS'12, October 16–18, 2012, Raleigh, North Carolina, USA.**
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.

## 1. Introduction
Software copyright infringement, or software piracy, is a serious threat to commercial software developers worldwide. While it is challenging to derive exact numbers, it is commonly estimated that the economic damage from software piracy is in the tens of billions of dollars [15, 22].

As a result, software manufacturers regularly integrate technical protection mechanisms to prevent unauthorized copying and redistribution. Examples include serial number or license key checks during installation. Some manufacturers even require special hardware, such as "dongles," to run the software. Despite these measures, a recent study covering 116 countries [15] claims that about 42% of globally installed software products are pirated. This indicates the relative ineffectiveness of these measures and supports the claim that software piracy is a common phenomenon.

On a technical level, hackers and criminals typically try to circumvent anti-piracy measures by creating and distributing specific software patches or reverse-engineered serial number generators, known as cracks and keygens. Users seeking cracked software can access the unmodified original software through file-sharing systems like BitTorrent, One-Click Hosters (OCH), or Usenet downloads, or they can download bundles of the original software and cracks or keygens. Some types of cracks target legitimate evaluation copies of software, aiming to unlock restricted features and upgrade them to full versions.

Interestingly, there has been relatively little academic research on this topic. Anecdotal evidence suggests that criminals use cracks and keygens as an attack vector to distribute malicious software such as trojans or viruses.

In this work, we first describe how we collected a large test set of real-world cracks and keygens and then performed several experiments to evaluate their maliciousness. We demonstrate that, in addition to the direct economic damage caused by software piracy, there are significant risks for many end-users who use pirated software. We conclude that there is a rewarding opportunity for malware researchers and anti-virus companies to collect novel malware samples from sources related to software piracy. Furthermore, we show that the circumvention of copy protections is embedded in an active ecosystem, describing its actors and interdependencies. The main contributions of this work are:

- **Data Collection and Analysis:** We collected over 43,900 download links and performed automated and manual analysis on more than 23,100 (3,551 unique) real-world crack downloads, providing deep insights into how cracks and keygens are used to spread malware.
- **Ecosystem Understanding:** We describe the motivations and possible revenue sources of the participants in the ecosystem surrounding cracks and keygens.
- **Malware Analysis:** We conducted a dynamic behavior analysis of infected binary samples to determine the extent of their maliciousness.
- **Dataset Availability:** We made our dataset publicly available to the research community to drive future research in this direction.

### 1.1 Motivation
Recent studies [24, 27, 26, 25] have shown that websites and binaries related to software piracy are more likely to be infected with malware. This is supported by findings on the thriving underground economy and its links to software piracy, which has grown into a profitable, global business [17, 18, 19]. Gullible users who download anti-copy protection tools such as cracks and key generators are among the typical targets of shady business practices and cybercrime. Criminals covertly infect their systems with malware and transform them into malicious bots that are controlled to commit or support attacks or send spam.

Given the large scale of software piracy, we decided to further investigate the risks that users face when using these tools, the possible monetary gains for criminals, and the supporting roles and actors in the piracy ecosystem.

## 2. Related Work
In 2008, Iklinci, Holz, and Freiling introduced the honey-client system Monkey-Spider [24] to detect malicious websites. Their results show that web content related to piracy or games is more likely to be malicious than benign content, and domains related to anti-copy protection tools are among the most malicious. However, they do not specifically target anti-copy protection tools such as cracks and key generators.

Moshchuk, Bragin et al. conducted a Crawler-based Study of Spyware on the Web [27]. Similar to our approach, they employ a virtual machine-based analysis platform to scrutinize collected executables. Their study proves a strong correlation between software piracy and spyware infections, but unlike our work, it does not focus on cracks and keygens.

In a sociological study [26], Limayem et al. show that there are many factors motivating software piracy and that the typical software pirate is not a computer expert. Their work indicates that software piracy is a common problem and suggests that due to limited computer literacy, systems of software pirates may not be well-protected against malware found in cracks and keygens.

Gantz et al. [25] investigate the security risks involved with using cracks and key generators, showing that a vast amount of these tools is infected with malware. Although they use an approach similar to our manual analysis, their analysis concentrates on a relatively small set of samples. In contrast, our work covers the underground economy aspects and employs both manual and automated collection and analysis approaches on a large set of samples.

## 3. The Software Piracy Ecosystem
While cracks and key generators are specific tools to circumvent copy protections, they represent only a small fraction of the software piracy ecosystem. Below, we provide an overview of the involved actors and groups, as well as their incentives and interdependencies.

### 3.1 Warez Groups
Underground warez groups focus on the distribution of protected or copyrighted media, such as movies, music, or software ("warez"). Individual members of these groups are often the authors of cracks and keygens [23]. Unlike typical cybercriminals, such as botnet operators, the primary motivation of these groups is not monetary gain. Instead, it appears to be a form of "vanity contest" based on competition among different warez groups, with the aim of being the first—and thus, most respected—group to release a crack or keygen for a specific software product [23, 21, 29].

To write cracks and keygens, access to the original software products is necessary. Warez groups share original media among themselves, usually via private sites and servers. This is significantly different from public end-users, who must resort to public file-sharing networks like One-Click Hosters (OCHs), peer-to-peer networks, or binary Usenet groups [23, 20]. As we will see later, the intermediate distribution steps between warez groups and the end-users of pirated media allow other miscreants to spread malware and gain monetary profits.

### 3.2 Hosting Providers
To distribute cracks and keygens to end-users, third-party hosting providers are used by warez groups. There are several types of such hosting providers, typically allowing revenue to be made through subsequent downloads. Pay-Per-Download (PPD) hosters such as Sharecash [12] or Honeycontent [7] allow publishers to earn money by sharing files or links to content. If users want to access the content on a PPD hoster, they usually need to complete manual tasks, like filling out surveys, to unlock the download. The advertisement fees for these surveys are then distributed among the PPD hoster and the content publisher.

One-Click Hosters (OCHs) follow a similar scheme: Content publishers can upload files, but downloading users either have to pay for premium accounts or face slow download speeds, long waiting times, or other limitations supported by advertising. Dedicated Crack Hosters like Crackstorage.net specialize in hosting cracks and keygens. Typically, they do not allow visitors to search for stored files, which can be considered a counter-measure against crawling or enumeration of their content. Instead, downloads are available via direct, deep links, often obtained through a third-party search engine like Astalavista.box.sk [2] or forums. Through advertising and by partnering with indexing sites, they can generate revenue from crack and keygen downloads.

Malware hosters typically set up sites for hosting malware, often disguised as cracks or keygens. Unsuspecting users then download and execute the malware, generating revenue for the malware hoster. Other hosting types, like Usenet newsgroups or P2P networking, do not directly generate revenue through cracks and keygens. However, through combinations with other hosting types like PPD hosting, the uploader can still make money. Recent studies show that contributions to P2P networks can be profit-driven, for instance, by seeding content that includes advertisements for websites or private BitTorrent portals [18].

### 3.3 Malware Distributors
The distribution of malware has grown into a booming underground economy. A recent study [17] states that due to market forces in the underground economy, a significant amount of malware no longer incorporates spreading mechanisms on its own. Instead, a service culture has evolved, leading to providers offering a wide range of specialized services, from malware or packaging toolkits for anti-virus evasion to infection services (Pay-Per-Install). Out of the world’s top 20 most prevalent families of malware, 12 employ PPI services to buy infections [17]. Generally, a PPI provider receives malware executables from clients and charges money for a requested number of malware installs. The actual installs are mostly done through financially compensated affiliates focusing on different infection vectors. Our results indicate that uploading infected cracks and keygens is at least one of these vectors.

Since the malware comes from clients, it can be virtually anything, ranging from botnet bots to ad- and spyware distribution or click fraud. However, in general, the income generated through the malware will outweigh the costs for the PPI service.

## 4. Analysis
Here, we describe how we retrieved and analyzed pirated programs and key generators. To provide a realistic set of samples, we utilized several different facilities to gather them, following roughly the same procedures a real user would perform to download the desired crack.

### 4.1 Manual Data Acquisition
We followed two approaches to acquire software cracks and key generators. First, we placed ourselves in the role of a user manually searching for a specific crack and key generator. This allowed us to conduct experiments related to the user experience (e.g., the effort required to successfully circumvent a copy protection mechanism) and the risks involved with executing anti-copy protection tools.

Given the thousands of different software products and anti-protection tools available, we restricted our search to the most prominent products in the categories of games and applications. We combined commercial rankings (i.e., Amazon.com [1] and Download.cnet.com [6]) with download numbers from Thepiratebay.org [3], one of the top providers for pirated software. A listing of the top five applications and games can be found in Table 1.

| **Application** | **Game** |
|-----------------|----------|
| Adobe Photoshop CS5.1 | Brink |
| Ahead Nero 10 | Microsoft Office 2010 |
| Norton 360 | WinRAR 3.93 |
| Crysis 2 | Fable III |
| Portal 2 | The Sims 3 |

**Table 1: Top 5 Applications and Games**

Just as any user would, we first used the Google search engine to issue a query. We also used Astalavista.box.sk [2], a well-known search engine for anti-copy protection tools. From the search results, we followed links that were most likely to lead directly to a crack or key generator for a specific product. We assumed that this was especially the case when the links included the precise version information for the product we were looking for (e.g., "Adobe CS5.1 All products Crack By tEAM RED HOT").

Accompanying our manual analysis (see Section 4.3.1), we manually collected 363 direct download links over a period of three months. This led to 242 executable cracks or key generators, of which 141 were unique and 101 were duplicates. We considered an executable a duplicate if there was another executable with the same MD5 sum within our downloads. The overall download results are visible in Table 8 in the Appendix.

Our approach led to a wide range of different sites with downloads from regular web hosters, dedicated crack hosters like Crackstorage.net, One-Click Hosters (OCHs), and the BitTorrent P2P network. We observed how many links we had to follow (i.e., the link depth) from the search engine result to the actual download. The result is visible in Figure 1. Our observations indicate that to reach 80% of the downloads, a user needs to follow at least four links from the actual search result. If up to three links are followed, only about 43% of the downloads can be reached.

**Figure 1: Crack/Keygen Download (CDF)**

Throughout our observations, we had to follow up to eight links to finally reach the real download site. The websites between the search result and the actual download site are frequently either advertising or link collection sites, allowing the site operators to generate additional revenue, presumably with the generated traffic. In general, search engine-powered downloading of cracks and keygens is a cumbersome task.

### 4.2 Automated Data Acquisition
Following the manual approach, we automatically retrieved a high number of cracks and key generators for a wide range of different products. The goal was to gain insight into a broader area of the anti-copy protection landscape by analyzing how many of our downloads contained malicious code and whether there is a difference in the infection ratio between games and applications based on their initial source.

To this end, we constructed an automated acquisition system, as shown in Figure 2. The system uses three data sources: Usenet, One-Click Hosters (OCHs), and the BitTorrent network. We chose these data sources due to the potentially high amount of cracks and key generators available on these networks, the accessibility of indexing services, the possibility to automate the collection process, and their general pervasiveness. For each of these data sources, we wrote custom crawlers that leverage existing indexing services. Specifically, we wrote crawlers for the Usenet indexing service Nzbindex.nl [11], the OCH search engine Filestube.com [5], and the BitTorrent search engine Isohunt.com [8].

#### 4.2.1 Applications vs. Games
To distinguish between anti-copy protection tools for games and for software applications, we created a list of the most popular products. Since an automated approach is not subject to the same restrictions as a manual one, we compiled a new, more comprehensive list. The final list comprises a total of 292 non-free software products (151 computer games and 141 applications).

For every product, our crawlers collected download links for the search terms "[PRODUCT] crack" and "[PRODUCT] keygen," where [PRODUCT] refers to the name of the current software product from our list. Since cracks and key generators are small programs, we limited our search to downloads of 10MB or less. Additionally, due to the distributed nature of P2P networks, we only collected BitTorrent download links that had at least five seeders. Table 2 shows the crawl results with and without the manually collected download links. In total, we collected 43,972 download links (43,609 crawled links and 363 manually collected links).

In comparison to the Usenet and OCH download links, the number of crawled BitTorrent links was lower because many downloads had no seeders and thus were not collected by our crawler in the first place.

For each network, we forwarded the collected download links to a corresponding download client.

#### 4.2.2 Usenet Downloads
For Usenet downloads, we used the NZBGet [10] client. In addition to its easy integrability into our system architecture, it automatically processes the downloads.

**Crawler:**

[Continue with the rest of the document, ensuring consistency and clarity.]