To improve the detection of add operations in the scalar
multiplications, we applied the ﬁltering technique Singular
Spectrum Analysis (SSA) [44].
The SSA ﬁlter performs an eigen-spectra decomposition
of the original signal using a trajectory matrix into different
components which are then analyzed and selected accordingly
for reconstructing a ﬁltered signal. The ﬁrst step embedding
converts the single dimension signal {mk}N
k=1 of length N
into a multidimensional trajectory matrix M which contains
I column vectors each of size w where I = N − w + 1. The
window size 1 < w ≤ N/2 dictates the quality and perfor-
mance of the reconstruction phase. The second step singular
value decomposition (SVD) decomposes the trajectory matrix
M into non-zero eigenvalues λk of M M(cid:2)
sorted in decreasing
ranks of their magnitudes along with their corresponding
eigenvectors uk. With vk = M(cid:2)uk
λk and Yk = ukvk the
projection matrices, SVD can be shown as:
(cid:7)
d(cid:6)
√
M =
λkY (cid:2)
k
k=1
To obtain the reconstructed components {yi}N
i=1, next perform
a diagonal averaging also known as Hankelization by comput-
ing the average over the skewed diagonal of the projection
matrices Yk [63]. The original signal can thus be reproduced
by summing all the reconstructed components:
d(cid:6)
{mi}N
i=1 =
{yk
i }N
i=1
k=1
For source separation, only the useful components can be
chosen, leaving out the noisy ones from all the d possible
choices.
APPENDIX B
ECC IN OPENSSL
As stated in Section V-A, OpenSSL features several im-
plementations for ECC operations: each elliptic curve has an
associated method structure containing function pointers to
common ECC operations, and for this work we speciﬁcally
focus on the scalar multiplication operation.
The actual method structure associated with a particular
ECC cryptosystem depends on a variety of factors, including
the OpenSSL version, the particular curve instantiated, build-
time options, and capabilities of the targeted architecture. The
intent of this section is to discuss PORTSMASH applications to
OpenSSL ECC outside of P-384 and across different OpenSSL
versions and build-time options.
A. OpenSSL versions
The OpenSSL project currently actively supports three re-
leases of the library:
1.0.2 is the old long-term support (LTS) release, supported
until the end of 2019;
1.1.0 is the previous non-LTS release, currently in its ﬁnal
year of support, thus updated only with security ﬁxes;
1.1.1 the latest LTS release.
Letter releases (e.g., 1.0.2a) are periodically issued and ex-
clusively contain bug and security ﬁxes and no new features;
minor releases (i.e., where only the last number is changed)
contain new features, but in a way that does not break binary
compatibility, so that existing applications do not need to be
recompiled; ﬁnally, major releases (e.g., from 1.0.2 to 1.1.0)
can contain major changes precluding both binary and API
compatibility, thus requiring applications to be recompiled
against the new version of the library, and, potentially, sig-
niﬁcant changes in the application source code to adapt to
API changes.
It should be noted that the OpenSSL library is often installed
as an OS system library or bundled with binary application
packages, and as a result in most cases users depend on third
party vendors, such as OS distribution maintainers, for the
version of the library used by their applications and for its
build-time options.
This is particularly relevant in terms of support for bugs
and security ﬁxes, as often the release strategies of third party
vendors are not compatible with that of the OpenSSL project
(see [64] for a discussion), resulting in major delays between
upstream releases and versions installed in the majority of
systems. For example, currently the latest Ubuntu Linux
(cid:25)(cid:25)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:40 UTC from IEEE Xplore.  Restrictions apply. 
LTS release (18.04)—used in many online servers—features
OpenSSL version 1.1.0g that is more than one year older
than the latest upstream letter release (1.1.0j) for that release
branch.
B. Scalar multiplication implementations
Excluding curve25519 and curve448, which are de-
ﬁned separately, scalar multiplications for prime curves in
the OpenSSL library are handled by one of the following
implementations:
• EC_GFp_nistp256_method, based on [35], offering
a timing-resistant portable C implementation for 64-bit
architectures supporting 128-bit integer types, optimized
for the NIST P-256 curve (with variants for NIST P-
224/P-521). Support for these three methods is condi-
tional to the aforementioned architecture and compiler
support and must be explicitly enabled at compilation
time;
• EC_GFp_nistz256_method, based on [37], offers
a faster timing-resistant method for NIST P-256, using
Intel AVX2 SIMD assembly instructions to increase the
performance of ﬁnite ﬁeld operations. This method is
automatically enabled at compilation time if the target
architecture supports the Intel AVX2 SIMD instructions,
unless assembly optimized implementations are explicitly
disabled at build time;
• non constant-time multiplication, based on [39, Sec. 3.2]
using a modiﬁed windowed Non-Adjacent Form (wNAF)
for scalar representation. It was the default generic im-
plementation in OpenSSL 1.1.0h and earlier (and up to
the later 1.0.2p version in the 1.0.2 branch). This is the
code path used in the end-to-end attack presented in this
work;
• (only in 1.1.1+, 1.1.0i+, 1.0.2q+) timing-resistant generic
implementation based on a Montgomery ladder, featuring
a ﬁxed sequence of operations without scalar-dependent
branches;
it was introduced during the development
of version 1.1.1 (and backported to the older release
branches starting with releases version 1.1.1i and 1.0.2q)
as a result of work by Tuveri et al. [42], further discussed
in Appendix B-C.
RFC 7091[66] or when using explicit arbitrary parameters
in TLS versions 1.2 and earlier—a feature that has been
recently deprecated (RFC 8422[67]) but is still supported
for compatibility with legacy products.
Moreover, the specialized implementations for the three NIST
curves are not enabled if any of the mentioned requirements
is not met, so depending on architecture and compilation
options, even these curves could fall back to the default
generic implementation targeted in the end-to-end attack we
demonstrated. This is particularly relevant, considering that
often users rely on third party vendors for a binary distribution
of the library, and said vendors could prioritize portability
over performance and disable architecture-dependent features
at build time.
C. Relevant mitigations in OpenSSL
The default wNAF scalar multiplication implementation has
been the target of several side-channel attacks [36, 40–43].
Independently from this current work, this implementation was
ﬁnally replaced during the development cycle of OpenSSL
1.1.1 with a timing-resistant one, as a consequence of [42].
The set of changes described there fulﬁlls the port-independent
code requirement we propose to mitigate the PORTSMASH
technique.
This changeset was backported to the 1.1.0 branch and
released starting with version 1.1.0i. But at the time, back-
porting to the LTS 1.0.2 branch was deemed unnecessary, due
to additional complexity in the backport process (caused by
major design differences), and a lower coverage for automated
detection of regressions and new defects. It was only as a result
of this work and the disclosure of CVE-2018-5407 that the
additional effort and risks were considered acceptable7, thus
we backported8 the changes to the 1.0.2 branch. For the old
LTS branch, our mitigation has been released since version
1.0.2q.
Of the 39 standard deﬁned prime curves supported by
OpenSSL 1.0.2 and 1.1.0 releases, only the aforementioned
NIST P-224, P-256 and P-521 have specialized timing-
resistant implementations. Every other prime curve will use
the generic default implementation, which will be one of the
last two implementations in the above list, depending on the
OpenSSL library version. Among these curves, it is worth
mentioning:
• “Brainpool” (RFC 5639[38]) curves;
• most prime curves standardized by SECG [65], including
the secp256k1 curve (adopted for Bitcoin operations);
• any generic prime curve deﬁned over custom parame-
ters, e.g., when using the gost6 engine to implement
6https://github.com/gost-engine/engine
(cid:25)(cid:25)(cid:23)
7https://www.openssl.org/news/secadv/20181112.txt
8https://github.com/openssl/openssl/pull/7593
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:40 UTC from IEEE Xplore.  Restrictions apply. 
oo
 250
 200
 150
 100
 50
 0
s
n
o
i
t
a
r
e
t
I
 1200
 1000
 800
 600
 400
 200
 0
0x1 success prob.
0x1 instances
0x3 success prob.
0x3 instances
0x1
0x3
 100
 150
 200
 250
 300
 350
 400
 450
 500
 550
 600
 100
 150
 200
 250
 300
 350
 400
 450
 500
 550
 600
Signature count
Signature count
Fig. 9.
Probability (percentage) of success of the lattice algorithm against
the two sets of modeled perfect traces. The dashed lines track the number of
instances running with different signature counts.
Fig. 11. Number of BKZ iterations for successful instances of the lattice
algorithm against the two sets of modeled perfect traces, varying the count
of signatures used to model the lattice.
s
t
i
b
e
c
n
o
n
n
w
o
n
K
 1800
 1600
 1400
 1200
 1000
 800
 600
 400
 200
)
s
d
n
o
c
e
s
(
e
m
T
i
 16000
 14000
 12000
 10000
 8000
 6000
 4000
 2000
 0
0x1
0x3
0x1
0x3
 100
 200
 300
Signature count
 400
 500
 600
 100
 150
 200
 250
 300
 350
 400
 450
 500
 550
 600
Signature count
Fig. 10. Cumulative known nonce bits for the lattice algorithm against the
two sets of modeled perfect traces, varying the count of signatures used to
model the lattice.
Fig. 12. Execution time of successful instances of the lattice algorithm against
the two sets of modeled perfect traces, varying the count of signatures used
to model the lattice.
(cid:25)(cid:25)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:40 UTC from IEEE Xplore.  Restrictions apply.