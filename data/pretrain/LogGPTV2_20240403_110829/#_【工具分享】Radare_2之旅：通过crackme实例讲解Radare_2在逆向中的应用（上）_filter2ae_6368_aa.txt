# 【工具分享】Radare 2之旅：通过crackme实例讲解Radare 2在逆向中的应用（上）
|
##### 译文声明
本文是翻译文章，文章来源：megabeets.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
译者：[ **Kp_sover**](http://bobao.360.cn/member/contribute?uid=2899451914)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**序言**
在过去的一年里我研究了 radare2 很久，无论是参加CTF、逆向工程或是漏洞挖掘，我发现 radare2都能很好的提升我的工作效率，
有时候它也是我用来分析恶意软件（如溯源）的工具,不幸的是很少有人听过它，可能是因为大多数人习惯了使用 IDA Pro，OllyDBG,
gdb,不管怎样，我都觉得 radare2 应该成为你工具箱中的一部分.
因为我真的特别喜欢这个项目，因此为了让大家能更好的了解并使用它，我决定专门创建一个有关 r2
系列的文章来介绍它的特点和功能，希望能让大家更好的利用它去解决工作中的问题.
欢迎来到 IDA 10.0
**radare2**
radare2是一个开源的逆向工程和二进制分析框架，它的强大超出你的想象，包括反汇编、分析数据、打补丁、比较数据、搜索、替换、虚拟化等等，同事具备超强的脚本加载能力，它可以运行在几乎所有主流的平台（GNU/Linux,
.Windows *BSD, iOS, OSX,
Solaris…）并且支持很多的cpu架构以及文件格式，我认为所有它的这些特征恰好能表达出一个意思–那就是给予你的使用以极大的自由.
radare2工程是由一系列的组件构成，这些组件可以在 radare2 界面或者单独被使用–比如我们将要了解的rahash2, rabin2,
ragg2三个组件，所有这些组件赋予了 radare2 强大的静态或动态分析、十六进制编辑以及溢出漏洞挖掘的能力.
在这之前，我们有必要知道学习使用 radare2
是一个比较艰难的过程，尽管它有直观的GUI界面，但坦白的说，它确实没有IDA用起来方便，它的学习曲线我认为大致是这样的
当然我们不用因为它很复杂就退怯，我会竭尽所能让每个知识点都更清晰易懂!
在开始前，你可以在[这儿](http://rada.re/r/cmp.html "here")去了解我们当前正面对并试图解决的问题.
这里是有关 radare2 最新的介绍文章  
Check it out @
[https://t.co/MybNPqq2CH](https://t.co/MybNPqq2CH)[@radareorg](https://twitter.com/radareorg)[#radare2](https://twitter.com/hashtag/radare2?src=hash)
— Itay Cohen (@Megabeets_Blog) [March 27,
2017](https://twitter.com/Megabeets_Blog/status/846314627059400704)
**获得radare2**
**安装**
因为 我们每天都在更新Radare2的开发，因此建议你使用最新的github版本，不要使用 stable版，因为有时候 stable版可能还没有 最新的
github 版稳定.
    $ git clone https://github.com/radare/radare2.git
    $ cd radare2
    $ ./sys/install.sh
如果你不想使用github版，或者想要每个平台相对应的二进制文件，那就点击这里去下载吧！[download page at the radare2
website.](http://radare.org/r/down.html)
**更新**
正如我之前所说，我极力推荐你使用github上的最新版，如果你需要更新，那就太简单了，只需要下面这条命令,我每天习惯在早上更新一下 radare2
，在这期间，你可以去喝杯咖啡..
    $ ./sys/install.sh
**卸载**
oh…说实话我实在想不到任何理由，你会在看这篇文章的时候需要去卸载 radare2 ，哈哈，不过如果你随时需要，那就这样吧
    $ make uninstall
    $ make purge
下面正式进入正题，let's go…
这里是crackme的下载地址[here](https://github.com/ITAYC0HEN/A-journey-into-Radare2/blob/master/Part%201%20-%20Simple%20crackme/megabeets_0x1)
好的，现在假设你们已经安装好 radare2 ，crackme 文件也已经下载到机器上，我现在开始介绍 radare2 的基本用法，我将在
[Remnux](https://remnux.org/) 系统上进行操作，但是大多数命令和说明在 windows或者其他系统上都一样的.
**命令行参数**
正如大多数软件的使用一样，最好的了解它的方式就是在它后面加一个 -h 参数
    $ r2 -h
在这里我不会展示它所有的用法，我只会展示平常我使用的比较多并且很重要的参数:
    Usage: r2 [-ACdfLMnNqStuvwz] [-P patch] [-p prj] [-a arch] [-b bits] [-i file]
              [-s addr] [-B baddr] [-M maddr] [-c cmd] [-e k=v] file|pid|-|--|=
    -d: Debug the executable 'file' or running process 'pid'
    -A: Analyze executable at load time (xrefs, etc)
    -q: Quiet mode, exit after processing commands
    -w: Write mode enabled
    -L: List of supported IO plugins
    -i [file]: Interprets a r2 script
    -n: Bare load. Do not load executable info as the entrypoint
    -c 'command; command; ...': Run r2 and execute commands (eg: r2 's main; px 60')
    -p [prj]: Creates a project for the file being analyzed
    -: Opens r2 with the malloc plugin that gives a 512 bytes memory area to play with
**二进制信息**  
当我拿到一个二进制文件，首先就会去获取它的基本信息，这里将会用到 r2 框架里最强的一个工具 ：rabin2.
rabin2 可以获取包括ELF, PE, Mach-O, Java
CLASS文件的区段、头信息、导入导出表、字符串相关、入口点等等，并且支持几种格式的输出文件.  
使用下面的命令获取更多的用法
    man rabin2
我们可以通过 -I 参数 来让 rabin2 打印出二进制文件的系统属性、语言、字节序、框架、以及使用了哪些 加固技术（canary, pic, nx）.
    $ rabin2 -I megabeets_0x1
    havecode true
    pic      false
    canary   false
    nx       false
    crypto   false
    va       true
    intrp    /lib/ld-linux.so.2
    bintype  elf
    class    ELF32
    lang     c
    arch     x86
    bits     32
    machine  Intel 80386
    os       linux
    minopsz  1
    maxopsz  16
    pcalign  0
    subsys   linux
    endian   little
    stripped false
    static   false
    linenum  true
    lsyms    true
    relocs   true
    rpath    NONE
    binsz    6220
这里你可以清晰地看到这是一个32位的 elf 文件，没有剥离符号表并且是动态链接的，它没有使用溢出隔离技术-这对于下一篇我们利用 radare2
去溢出它是很有利的信息，现在我们来运行它看看这个程序到底做了啥。
注意：尽管我让你们直接运行，但建议任何时候对一个不清楚的二进制文件都不要直接运行，最好放在一个隔离的环境，比如虚拟机下运行！
    $ ./megabeets_0x1
      .:: Megabeets ::.
    Think you can make it?
    Nop, Wrong argument.
    $ ./megabeets_0x1 abcdef
      .:: Megabeets ::.
    Think you can make it?
    Nop, Wrong argument.
开始来我们需要给它一些参数，这里输入 "abcdef"，然后还是错了，很明显，我们需要给它密码，这就是这次crackme要做的事.
下面我们用 radare2来测试这个程序：
    $ r2 ./megabeets_0x1
     — Thank you for using radare2. Have a nice night!
    [0x08048370]>
当我们运行它的时候，它会给我们一个欢迎界面，同时给我们一个shell操作符，在这里有很多有趣和有用的命令，现在 r2