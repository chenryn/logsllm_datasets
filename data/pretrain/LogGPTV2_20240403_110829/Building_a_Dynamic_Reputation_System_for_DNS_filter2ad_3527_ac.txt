domains. This training can be repeated periodically, in an off-
line fashion, using historical information collected in Notos’
knowledge base (see Section 4). Once the engine has been
trained, it can be used in on-line mode to assign a reputation
score to each new domain name d.
In this section, we ﬁrst explain how the reputation engine
is trained, and then we explain how a trained engine is used to
assign reputation scores.
3.3.1 Off-Line Training Mode
During off-line training (Figure 3),
the reputation engine
builds three different modules. We brieﬂy introduce each
module and then elaborate on the details.
• Network Proﬁles Model: a model of how well known
networks behave. For example, we model the network
characteristics of popular content delivery networks (e.g.,
Akamai, Amazon CloudFront), and large popular web-
sites (e.g., google.com, yahoo.com). During the on-line
mode, we compare each new domain name d to these
models of well-known network proﬁles, and use this in-
formation to compute the ﬁnal reputation score, as ex-
plained below.
• Domain Name Clusters: we group domain names into
clusters sharing similar characteristics. We create these
clusters of domains to identify groups of domains that
contain mostly malicious domains, and groups that con-
tain mostly legitimate domains.
In the on-line mode,
given a new domain d, if d (more precisely, d’s projec-
tion into a statistical feature space) falls within (or close
to) a cluster of domains containing mostly malicious do-
mains, for example, this gives us a hint that d should be
assigned a low reputation score.
• Reputation Function: for each domain name di, i = 1..n,
in Notos’ knowledge base, we test it against the trained
network proﬁles model and domain name clusters. Let
N M(di) and DC(di) be the output of the Network Pro-
ﬁles (NP) module and the Domain Clusters (DC) mod-
ule, respectively. The reputation function takes in input
N M(di), DC(di), and information about whether di and
its resolved IPs A(di) are known to be legitimate, suspi-
cious, or malicious (i.e., if they appeared in a domain
name or IP blacklist), and builds a model that can assign
a reputation score between zero and one to d. A repu-
tation score close to zero signiﬁes that d is a malicious
domain name while a score close to one signiﬁes that d
is benign.
We now describe each module in detail.
3.3.2 Modeling Network Proﬁles
During the off-line training mode, the reputation engine builds
a model of well-known network behaviors. An overview of the
network proﬁle modeling module can be seen in Figure 4(a).
In practice we select ﬁve sets of domain names that share simi-
lar characteristics, and learn their network proﬁles. For exam-
ple, we identify a set of domain names related to very popular
websites (e.g., google.com, yahoo.com, amazon.com) and for
each of the related domain names we extract their network fea-
tures, as explained in Section 3.2.1. We then use the extracted
feature vectors to train a statistical classiﬁer that will be able
to recognize whether a new domain name d has network char-
acteristics similar to the popular websites we modeled.
In our current implementation of Notos we model the fol-
lowing classes of domain names:
• Popular Domains.
This class consists of a large
set of domain names under
the following DNS
zones: google.com, yahoo.com, amazon.com, ebay.com,
msn.com, live.com, myspace.com, and facebook.com.
• Common Domains. This class of domains includes do-
main names under the top one hundred zones, accord-
ing to alexa.com. We exclude from this group all the
domain names already included in the Popular Domains
class (which we model separately).
• Akamai Domains. Akamai is a large content deliv-
ery network (CDN), and the domain names related to
this CDN have very peculiar network characteristics. To
model the network proﬁle of Akamai’s domain names,
we collect a set of domains under the following zones:
akafms.net, akamai.net, akamaiedge.net, akamai.com,
akadns.net, and akamai.com.
• CDN Domains.
In this class we include domain
names related to CDNs other than Akamai. For ex-
ample, we collect domain names under the follow-
ing zones: panthercdn.com, llnwd.net, cloudfront.net,
nyud.net, nyucd.net and redcondor.net. We chose not
to aggregate these CDN domains and Akamai’s domains
in one class, since we observed that Akamai’s domains
have a very unique network proﬁle, as we discuss in Sec-
tion 4. Therefore, learning two separate models for the
classes of Akamai Domains and CDN Domains allows
use to achieve better classiﬁcation accuracy during the
on-line mode, compared to learning only one model for
both classes (see Section 3.3.5).
• Dynamic DNS Domains. This class includes a large set
of domain names registered under two of the largest dy-
namic DNS providers, namely No-IP (no-ip.com) and
DynDNS (dyndns.com).
For each class of domains, we train a statistical classiﬁer
to distinguish between one of the classes and all the others.
Therefore, we train ﬁve different classiﬁers. For example,
we train a classiﬁer that can distinguish between the class of
Popular Domains and all other classes of domains. That is,
given a new domain name d, this classiﬁer is able to recog-
nize whether d’s network proﬁle looks like the proﬁle of a
well-known popular domain or not. Following the same logic
we, can recognize network proﬁles for the other classes of do-
mains.
3.3.3 Building Domain Name Clusters
In this phase, the reputation engine takes the domain names
collected in our pDNS database during a training period, and
builds clusters of domains that share similar network and zone
based features. The overview of this module can be seen
in Figure 4(b). We perform clustering in two steps.
In the
ﬁrst step we only use the network-based features to create
coarse-grained clusters. Then, in the second step, we split
each coarse-grained cluster into ﬁner clusters using only the
zone-based features, as shown in Figure 5.
Network-based Clustering The objective of network-based
clustering is to group domains that share similar levels of
agility. This creates separate clusters of domains with “sta-
ble” network characteristics and “non-stable” networks (like
CDNs and malicious ﬂux networks).
Zone-based Clustering After clustering the domain names
according to their network-based features, we further split the
network-based clusters of domain names into ﬁner groups.
In this step, we group domain names that are in the same
Figure 5. Network & zone based clustering pro-
cess in Notos, in the case of a Akamai [A] and a
malicious [B] domain name.
Figure 6. The output from the network proﬁling
module, the domain clustering module and the ev-
idence vector will assist the reputation function to
assign the reputation score to the domain d.
network-based cluster and also share similar zone-based
features. To better understand how the zone-based clustering
works, consider the following examples of zone-based clus-
ters:
Cluster 1:
..., 72.247.176.81 e55.g.akamaiedge.net, 72.247.176.94 e68.g.akamaiedge.net, 72.247.176.146
e120.g.akamaiedge.net, 72.247.176.65 e39.na.akamaiedge.net, 72.247.176.242
e216.g.akamaiedge.net, 72.247.176.33 e7.g.akamaiedge.net, 72.247.176.156
e130.g.akamaiedge.net, 72.247.176.208 e182.g.akamaiedge.net, 72.247.176.198
e172.g.akamaiedge.net, 72.247.176.217 e191.g.akamaiedge.net, 72.247.176.200
e174.g.akamaiedge.net, 72.247.176.99 e73.g.akamaiedge.net, 72.247.176.103
e77.g.akamaiedge.net, 72.247.176.59 e33.c.akamaiedge.net, 72.247.176.68
e42.gb.akamaiedge.net, 72.247.176.237 e211.g.akamaiedge.net, 72.247.176.71
e45.g.akamaiedge.net, 72.247.176.239 e213.na.akamaiedge.net, 72.247.176.120
e94.g.akamaiedge.net, ...
Cluster 2:
..., 90.156.145.198 spzr.in, 90.156.145.198 vwui.in, 90.156.145.198 x9e.ru, 90.156.145.50
v2802.vps.masterhost.ru, 90.156.145.167 www.inshaker.ru, 90.156.145.198 x7l.ru,
90.156.145.198 c3q.at, 90.156.145.198 ltkq.in, 90.156.145.198 x7d.ru,
90.156.145.198 zdlz.in, 90.156.145.159 www.designcollector.ru, 90.156.145.198
x7o.ru, 90.156.145.198 q5c.ru, 90.156.145.159 designtwitters.com, 90.156.145.198
u5d.ru, 90.156.145.198 x9d.ru, 90.156.145.198 xb8.ru, 90.156.145.198 xg8.ru,
90.156.145.198 x8m.ru, 90.156.145.198 shopfilmworld.cn, 90.156.145.198
bigappletopworld.cn, 90.156.145.198 uppd.in, ...
Each element of the cluster is a domain name - IP ad-
dress pair. These two groups of domains belonged to the
same network cluster, but were separated into two different
clusters by the zone-based clustering phase. Cluster 1 con-
tains domain names belonging to Akamai’s CDN, while the
domains in Cluster 2 are all related to malicious websites that
distribute malicious software. The two clusters of domains
share similar network characteristics, but have signiﬁcantly
different zone-based features. For example, consider domain
names d1=“e55.g.akamaiedge.net” from the ﬁrst cluster, and
d2=“spzr.in” from the second cluster. The reason why d1 and
d2 were clustered in the same network-based cluster is because
the set of RHIPs (see Section 3.1) for d1 and d2 have similar
characteristics. In particular, the network agility properties of
d2 make it look like if it was part of a large CDN. However,
when we consider the set of RHDNs for d1 and d2, we can
notice that the zone-based features of d1 are much more “sta-
ble” than the zone-based features of d2. In other words, while
the RHDNs of d1 share strong domain name similarities (e.g.,
they all share the substring “akamai”) and have low variance of
the string features (see Section 3.2.2), the strong zone agility
properties of d2 affect the zone-based features measured on
d2’s RHDNs and make d2 look very different from d1.
One of the main advantages of Notos is the reliable as-
signment of low reputation scores to domain names partici-
pating in “agile” malicious campaigns. Less agile malicious
campaigns, e.g., Fake AVs campaigns may use domain names
structured to resemble CDN related domains. Such strate-
gies would not be beneﬁcial for the FakeAV campaign, since
domains like virus-scan1.com, virus-scan2.com,
etc., can be trivially blocked by using simple regular expres-
sions [16].
In other words, the attackers need to introduce
more “agility” at both the network and domain name level in
order to avoid simple domain name blacklisting. Notos would
only require a few labeled domain names belonging to the ma-
licious campaign for training purposes, and the reputation en-
gine would then generalize to assign a low reputation score to
the remaining (previously unknown) domain names that be-
long to the same malicious campaign.
3.3.4 Building the Reputation Function
Once we build a model of well-known network proﬁles (see
Section 3.3.2) and the domain clusters (see Section 3.3.3), we
can build the reputation function. The reputation function will
assign a reputation score in the interval [0, 1] to domain names,
with 0 meaning low reputation (i.e., likely malicious) and 1
meaning high reputation (i.e., likely legitimate). We imple-
ment our reputation function as a statistical classiﬁer. In order
to train the reputation function, we consider all the domain
Evidence FeaturesZone  FeaturesNetwork  FeaturesDomain Name (d)Network Proﬁling ModuleDomain ClusteringModuleu(d)EV(d)DC(d)NM(d)F1...F6F1...F5F1...F5Reputation EngineF1...F16Reputation Function f(d)Snames di, i = 1, .., n in Notos’ knowledge base, and we feed
each domain di to the network proﬁles module and to the do-
main clusters module to compute two output vectors N M(di)
and DC(di), respectively. We explain the details of how
N M(di) and DC(di) are computed later in Section 3.3.5. For
now it sufﬁcient to consider N M(di) and DC(di) as two fea-
ture vectors. For each di we also compute an evidence fea-
tures vector EV (di), as described in Section 3.2.3. Let v(di)
be a feature vector that combines the N M(di), DC(di), and
EV (di) feature vectors. We train the reputation function us-
ing the labeled dataset L = {(v(di), yi)}i=1..n, where yi = 0
if di is a known malicious domain name, otherwise yi = 1.
3.3.5 On-Line Mode
After training is complete; the reputation engine can be used
in on-line mode (Figure 3) to assign a reputation score to new
domain names. For example, given an input domain name
d, the reputation engine computes a score S ∈ [0, 1]. Val-
ues of S close to zero mean that d appears to be related to
malicious activities and therefore has a low reputation. On
the other hand, values of S close to one signify that d ap-
pears to be associated with benign Internet services, and there-
fore has a high reputation. The reputation score is computed
as follows. First, d is fed into the network proﬁles module,
which consists of ﬁve statistical classiﬁers, as discussed in
Section 3.3.2. The output of the network proﬁles module is
a vector N M(d) = {c1, c2, ..., c5}, where c1 is the output of
the ﬁrst classiﬁer, and can be viewed as the probability that
d belongs to the class of Popular Domains, c2 is the proba-
bility that d belongs to the class of Common Domains, etc.
At the same time, d is fed into the domain clusters module,
which computes a vector DC(d) = {l1, l2, ..., l5}. The ele-
ments li of this vector are computed as follows. Given d, we
ﬁrst extract its network-based features and identify the closest
network-based cluster to d, among the network-based clusters
computed by the domain clusters module during the off-line
mode (see Section 3.3.3). Then, we extract the zone-based
statistical features and identify the zone-based cluster closest
to d. Let this closest domain cluster be Cd. At this point, we
consider all the zone-based feature vectors vj ∈ Cd, and we
select the subset of vectors Vd ⊆ Cd for which the two fol-
lowing conditions are veriﬁed: i) dist(zd, vj) < R, where zd
is the zone-based feature vector for d, and R is a predeﬁned
radius; ii) vj ∈ KN N(zd), where KN N(zd) is the set of k
nearest-neighbors of zd.
The feature vectors in Vd are related to domain names ex-
tracted from Notos’ knowledge base. Therefore, we can assign