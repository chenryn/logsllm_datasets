examines these attacks and others. It looks at how vulnerabilities within a web
application can lead to compromise of key parts of the wider infrastructure that
supports the application.
Questions
Answers can be found at http://mdsec.net/wahh.
1. You are trying to exploit a SQL injection fl aw by performing a UNION attack
to retrieve data. You do not know how many columns the original query
returns. How can you fi nd this out?
cc0099..iinndddd 335544 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 355
Chapter 9 n Attacking Data Stores 355
2. You have located a SQL injection vulnerability in a string parameter. You
believe the database is either MS-SQL or Oracle, but you can’t retrieve
any data or an error message to confi rm which database is running. How
can you fi nd this out?
3. You have submitted a single quotation mark at numerous locations through-
out the application. From the resulting error messages you have diagnosed
several potential SQL injection fl aws. Which one of the following would
be the safest location to test whether more crafted input has an effect on
the application’s processing?
(a) Registering a new user
(b) Updating your personal details
(c) Unsubscribing from the service
4. You have found a SQL injection vulnerability in a login function, and
you try to use the input ‘ or 1=1-- to bypass the login. Your attack fails,
and the resulting error message indicates that the -- characters are being
stripped by the application’s input fi lters. How could you circumvent this
problem?
5. You have found a SQL injection vulnerability but have been unable to
carry out any useful attacks, because the application rejects any input
containing whitespace. How can you work around this restriction?
6. The application is doubling up all single quotation marks within user
input before these are incorporated into SQL queries. You have found a
SQL injection vulnerability in a numeric fi eld, but you need to use a string
value in one of your attack payloads. How can you place a string in your
query without using any quotation marks?
7. In some rare situations, applications construct dynamic SQL queries from
user-supplied input in a way that cannot be made safe using parameter-
ized queries. When does this occur?
8. You have escalated privileges within an application such that you now
have full administrative access. You discover a SQL injection vulnerability
within a user administration function. How can you leverage this vulner-
ability to further advance your attack?
9. You are attacking an application that holds no sensitive data and contains
no authentication or access control mechanisms. In this situation, how
should you rank the signifi cance of the following vulnerabilities?
(a) SQL injection
(b) XPath injection
(c) OS command injection
cc0099..iinndddd 335555 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 356
356 Chapter 9 n Attacking Data Stores
10. You are probing an application function that enables you to search person-
nel details. You suspect that the function is accessing either a database or
an Active Directory back end. How could you try to determine which of
these is the case?
cc0099..iinndddd 335566 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 357
CHAPTER
10
Attacking Back-End
Components
Web applications are increasingly complex offerings. They frequently function
as the Internet-facing interface to a variety of business-critical resources on the
back end, including networked resources such as web services, back-end web
servers, mail servers, and local resources such as fi lesystems and interfaces to the
operating system. Frequently, the application server also acts as a discretionary
access control layer for these back-end components. Any successful attack that
could perform arbitrary interaction with a back-end component could potentially
violate the entire access control model applied by the web application, allowing
unauthorized access to sensitive data and functionality.
When data is passed from one component to another, it is interpreted by
different sets of APIs and interfaces. Data that is considered “safe” by the core
application may be extremely unsafe within the onward component, which
may support different encodings, escape characters, fi eld delimiters, or string
terminators. Additionally, the onward component may possess considerably
more functionality than what the application normally invokes. An attacker
exploiting an injection vulnerability can often go beyond merely breaking the
application’s access control. She can exploit the additional functionality sup-
ported by the back-end component to compromise key parts of the organiza-
tion’s infrastructure.
357
cc1100..iinndddd 335577 88//1199//22001111 1122::1100::4455 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 358
358 Chapter 10 n Attacking Back-End Components
Injecting OS Commands
Most web server platforms have evolved to the point where built-in APIs exist
to perform practically any required interaction with the server’s operating
system. Properly used, these APIs can enable developers to access the fi lesys-
tem, interface with other processes, and carry out network communications in
a safe manner. Nevertheless, there are many situations in which developers
elect to use the more heavyweight technique of issuing operating system com-
mands directly to the server. This option can be attractive because of its power
and simplicity and often provides an immediate and functional solution to
a particular problem. However, if the application passes user-supplied input
to operating system commands, it may be vulnerable to command injection,
enabling an attacker to submit crafted input that modifi es the commands that
the developers intended to perform.
The functions commonly used to issue operating system commands, such
as exec in PHP and wscript.shell in ASP, do not impose any restrictions on
the scope of commands that may be performed. Even if a developer intends
to use an API to perform a relatively benign task such as listing a directory’s
contents, an attacker may be able to subvert it to write arbitrary fi les or launch
other programs. Any injected commands usually run in the security context
of the web server process, which often is suffi ciently powerful for an attacker
to compromise the entire server.
Command injection fl aws of this kind have arisen in numerous off-the-shelf
and custom-built web applications. They have been particularly prevalent within
applications that provide an administrative interface to an enterprise server or
to devices such as fi rewalls, printers, and routers. These applications often have
particular requirements for operating system interaction that lead developers
to use direct commands that incorporate user-supplied data.
Example 1: Injecting Via Perl
Consider the following Perl CGI code, which is part of a web application for
server administration. This function allows administrators to specify a direc-
tory on the server and view a summary of its disk usage:
#!/usr/bin/perl
use strict;
use CGI qw(:standard escapeHTML);
print header, start_html(“”);
print “”;
my $command = “du -h --exclude php* /var/www/html”;
$command= $command.param(“dir”);
$command=`$command`;
cc1100..iinndddd 335588 88//1199//22001111 1122::1100::4455 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 359
Chapter 10 n Attacking Back-End Components 359
print “$command\n”;
print end_html;
When used as intended, this script simply appends the value of the user-
supplied dir parameter to the end of a preset command, executes the command,
and displays the results, as shown in Figure 10-1.
Figure 10-1: A simple application function for listing a directory’s contents
This functionality can be exploited in various ways by supplying crafted input
containing shell metacharacters. These characters have a special meaning to
the interpreter that processes the command and can be used to interfere with
the command that the developer intended to execute. For example, the pipe
character (|) is used to redirect the output from one process into the input of
another, enabling multiple commands to be chained together. An attacker can
leverage this behavior to inject a second command and retrieve its output, as
shown in Figure 10-2.
Here, the output from the original du command has been redirected as the
input to the command cat/etc/passwd. This command simply ignores the
input and performs its sole task of outputting the contents of the passwd fi le.
An attack as simple as this may appear improbable; however, exactly this type
of command injection has been found in numerous commercial products. For
example, HP OpenView was found to be vulnerable to a command injection
fl aw within the following URL:
https://target:3443/OvCgi/connectedNodes.ovpl?node=a| [your command] |
cc1100..iinndddd 335599 88//1199//22001111 1122::1100::4455 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 360
360 Chapter 10 n Attacking Back-End Components
Figure 10-2: A successful command injection attack
Example 2: Injecting Via ASP
Consider the following C# code, which is part of a web application for admin-
istering a web server. The function allows administrators to view the contents
of a requested directory:
string dirName = “C:\\filestore\\” + Directory.Text;
ProcessStartInfo psInfo = new ProcessStartInfo(“cmd”, “/c dir “ +
dirName);
...
Process proc = Process.Start(psInfo);
When used as intended, this script inserts the value of the user-supplied
Directory parameter into a preset command, executes the command, and
displays the results, as shown in Figure 10-3.
As with the vulnerable Perl script, an attacker can use shell metacharacters to
interfere with the preset command intended by the developer and inject his own
command. The ampersand character (&) is used to batch multiple commands.
Supplying a fi lename containing the ampersand character and a second com-
mand causes this command to be executed and its results displayed, as shown
in Figure 10-4.
cc1100..iinndddd 336600 88//1199//22001111 1122::1100::4466 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 361
Chapter 10 n Attacking Back-End Components 361
Figure 10-3: A function to list the contents of a directory
Figure 10-4: A successful command injection attack
cc1100..iinndddd 336611 88//1199//22001111 1122::1100::4466 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 362
362 Chapter 10 n Attacking Back-End Components
TRY IT!
http://mdsec.net/admin/5/
http://mdsec.net/admin/9/
http://mdsec.net/admin/14/
Injecting Through Dynamic Execution
Many web scripting languages support the dynamic execution of code that is
generated at runtime. This feature enables developers to create applications that
dynamically modify their own code in response to various data and conditions.
If user input is incorporated into code that is dynamically executed, an attacker
may be able to supply crafted input that breaks out of the intended data context
and specifi es commands that are executed on the server in the same way as if
they had been written by the original developer. The fi rst target of an attacker
at this point typically is to inject an API that runs OS commands.
The PHP function eval is used to dynamically execute code that is passed to
the function at runtime. Consider a search function that enables users to create
stored searches that are then dynamically generated as links within their user
interface. When users access the search function, they use a URL like the following:
/search.php?storedsearch=\$mysearch%3dwahh
The server-side application implements this functionality by dynamically
generating variables containing the name/value pairs specifi ed in the stored-
search parameter, in this case creating a mysearch variable with the value wahh:
$storedsearch = $_GET[‘storedsearch’];
eval(“$storedsearch;”);
In this situation, you can submit crafted input that is dynamically executed
by the eval function, resulting in injection of arbitrary PHP commands into
the server-side application. The semicolon character can be used to batch com-
mands in a single parameter. For example, to retrieve the contents of the fi le
/etc/password, you could use either the file_get_contents or system command:
/search.php?storedsearch=\$mysearch%3dwahh;%20echo%20file_get
_contents(‘/etc/passwd’)
/search.php?storedsearch=\$mysearch%3dwahh;%20system(‘cat%20/etc/
passwd’)
NOTE The Perl language also contains an eval function that can be
exploited in the same way. Note that the semicolon character may need to
be URL-encoded (as %3b) because some CGI script parsers interpret this as a
parameter delimiter. In classic ASP, Execute() performs a similar role.
cc1100..iinndddd 336622 88//1199//22001111 1122::1100::4466 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 363
Chapter 10 n Attacking Back-End Components 363
Finding OS Command Injection Flaws
In your application mapping exercises (see Chapter 4), you should have identi-
fi ed any instances where the web application appears to be interacting with
the underlying operating system by calling external processes or accessing the
fi lesystem. You should probe all these functions, looking for command injection
fl aws. In fact, however, the application may issue operating system commands
containing absolutely any item of user-supplied data, including every URL and
body parameter and every cookie. To perform a thorough test of the application,
you therefore need to target all these items within every application function.
Different command interpreters handle shell metacharacters in different ways.
In principle, any type of application development platform or web server may
call out to any kind of shell interpreter, running either on its own operating sys-
tem or that of any other host. Therefore, you should not make any assumptions
about the application’s handling of metacharacters based on any knowledge of
the web server’s operating system.
Two broad types of metacharacters may be used to inject a separate command
into an existing preset command:
n The characters ;|& and newline may be used to batch multiple commands,
one after the other. In some cases, these characters may be doubled with
different effects. For example, in the Windows command interpreter,
using&& causes the second command to run only if the fi rst is successful.
Using || causes the second command to always run, regardless of the
success of the fi rst.
n The backtick character (`) can be used to encapsulate a separate command
within a data item being processed by the original command. Placing an
injected command within backticks causes the shell interpreter to execute
the command and replace the encapsulated text with the results of this
command before continuing to execute the resulting command string.
In the previous examples, it was straightforward to verify that command injec-
tion was possible and to retrieve the results of the injected command, because
those results were returned immediately within the application’s response.
In many cases, however, this may not be possible. You may be injecting into a
command that returns no results and which does not affect the application’s
subsequent processing in any identifi able way. Or the method you have used
to inject your chosen command may be such that its results are lost as multiple
commands are batched together.
In general, the most reliable way to detect whether command injection is
possible is to use time-delay inference in a similar way as was described for
exploiting blind SQL injection. If a potential vulnerability appears to exist, you
can then use other methods to confi rm this and to retrieve the results of your
injected commands.
cc1100..iinndddd 336633 88//1199//22001111 1122::1100::4466 PPMM
Stuttard c10.indd V2 - 07/05/2011 Page 364
364 Chapter 10 n Attacking Back-End Components
HACK STEPS
1. You can normally use the ping command as a means of triggering a time
delay by causing the server to ping its loopback interface for a specific
period. There are minor differences between how Windows and UNIX-
based platforms handle command separators and the ping command.
However, the following all-purpose test string should induce a 30-second
time delay on either platform if no filtering is in place:
|| ping -i 30 127.0.0.1 ; x || ping -n 30 127.0.0.1 &
To maximize your chances of detecting a command injection flaw if the
application is filtering certain command separators, you should also sub-
mit each of the following test strings to each targeted parameter in turn
and monitor the time taken for the application to respond:
| ping –i 30 127.0.0.1 |
| ping –n 30 127.0.0.1 |
& ping –i 30 127.0.0.1 &
& ping –n 30 127.0.0.1 &
; ping 127.0.0.1 ;
%0a ping –i 30 127.0.0.1 %0a
` ping 127.0.0.1 `
2. If a time delay occurs, the application may be vulnerable to command
injection. Repeat the test case several times to confirm that the delay was
not the result of network latency or other anomalies. You can try changing
the value of the -n or -i parameters and confirming that the delay expe-
rienced varies systematically with the value supplied.
3. Using whichever of the injection strings was found to be successful, try
injecting a more interesting command (such as ls or dir). Determine
whether you can retrieve the results of the command to your browser.
4. If you are unable to retrieve results directly, you have other options:
n You can attempt to open an out-of-band channel back to your computer.
Try using TFTP to copy tools up to the server, using telnet or netcat to
create a reverse shell back to your computer, and using the mail com-
mand to send command output via SMTP.
n You can redirect the results of your commands to a fi le within the web