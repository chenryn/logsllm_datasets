overwriting of an existing ﬁle of the same size runs at about
40MB/s. To have a rough comparison with regular ﬁle transfer
performance, we also list the corresponding speed in Windows
aside (a 10-time average of reads and writes). The overhead
percentage is calculated with the lowest speed of Inuksuk
divided by the corresponding Windows value.
To demonstrate Inuksuk’s performance in a realistic usage
scenario, we invoke the trusted updater to copy 50 random
photos (JPG ﬁles, size ranging from 1009KB to 2416KB,
totaling 85.6MB) from the original partition to the protected
partition. We measured the duration for 10 times, and the
performance seems reasonable (mean: 23.3853 seconds), and
relatively stable (standard deviation: 0.58989). This is a combi-
nation of read, write, ﬁle opening/closing, accumulating space
fragments, etc. We also evaluated only the transition time
between the OS and trusted updater. It varies between 2–4
seconds, including screen mode switching.
If we take into account any extra processing during ﬁle
transfer, the time needed may also be affected. The basic
versioning Inuksuk uses is not incremental, i.e., the whole of
the source ﬁle on the original partition is copied over to the
protected partition as a new version. We may consider some
open-source version control systems like SVN/Git (or even
the simple diff command) for incremental versions to save
disk space. However, in that case, each time new ﬁles/updates
are committed,
the updater must scan the whole of both
ﬁles for differences and then perform the transfer. Moreover,
deletion is supposed to be very quick with non-incremental
versioning (just ﬂagging the ﬁle); with diff-like versioning,
for each ﬁle the updater has to reassemble from all previous
versions to form the latest one to be kept. The overhead could
be signiﬁcant in our setting (considering batch-deletion of
versions). Also, for common ﬁle types such as images, videos,
and rich documents (e.g., PDF, Word), incremental versioning
may not save much disk space.
VI. SECURITY ANALYSIS
In this section, we list various potential attack vectors, and
discuss how they are addressed, or why they do not pose a
threat (see Section III for our assumptions).
Since we shift the defense from detection/recovery to data
loss prevention, we avoid common attacks such as whether
new malware/ransomware can evade detection, whether it
does privilege escalation, and how the encryption keys are
generated. There are two basic questions in evaluating Inuk-
suk’s effectiveness: 1) Outside the trusted environment, can
malware/ransomware update ﬁles on the protected partition?
No, without the high-entropy key sealed in TPM, software on
Fig. 3: A screenshot of the mini ﬁle browser inside the trusted
updater. Selected ﬁles are designated with “»”; group selection
can be speciﬁed by the ﬁrst and last ﬁles.
code is running in parallel, exposing DMA regions outside the
MLE does not pose a threat (more in Section VI, item (e)).
In this way, we implement our custom DMA support for
both the USB keyboard and ATA DMA controller for data
transfer. We also support PS/2 keyboard. Usually, DMA relies
on interrupts, i.e., when the transfer is done, the interrupt
handler will be notiﬁed to proceed to the next
request
(e.g.,
to maximize CPU time utilization in a multitasking
environment). In our case, Flicker is not supposed to work
with an interrupt-enabled workload (technically possible
with some complex adaptation), and we merely need the
performance boost through DMA, i.e., no multi-tasking and
thus, requiring no interrupt support. Therefore, our custom
DMA support works with polling. With DMA enabled, ﬁle
transfer in the Inuksuk updater is 50–100 times faster than
using just PIO (see Section V-E).
E. Measuring disruptions
Inuksuk does not introduce run-time performance overhead
for user applications. However, when updates are being com-
mitted to the protected partition (ﬁle copying), the computer
will be unavailable for regular tasks, due to TXT/SVM’s
exclusiveness. Such disruption is determined by both the ﬁle
I/O performance and various factors, e.g., the ﬁle count/size.
It mainly comes from data transfer for new versions, i.e.,
created/modiﬁed ﬁles. Deletion involves only ﬂagging the ﬁles
as deleted in the ﬁle system, and thus is quick. We have devel-
oped a light-weight ﬁle browser inside the trusted updater that
allows the user to choose multiple ﬁles for deletion; see Fig. 3.
With more engineering effort, graphical interface can also be
created. There is no technical limitation for creating custom
UI within TXT/SVM. Also recall that by conﬁguring Inuksuk
in the network-based mode, such disruption can be mitigated.
The discussion here only focuses on the stand-alone mode.
File I/O evaluation. The ﬁle transfer speed determines the
duration of disruptions, and affects user experience. However,
we argue that the way we implemented DMA and our choice of
the FAT32 library (as well as our adaptation to it) are conﬁned
by the engineering effort and time. Therefore, the numbers we
show here should be just the lower bounds.
As micro-benchmarking, we executed 10 measurements on
the ﬁles we selected with ﬁxed sizes; see Table I. They are
all one-way access, write-new/write-existing/read respectively.
10
the host system cannot break the write protection enforced
by SED. 2) Inside the trusted environment (updater), can the
malware/ransomware trick the user or the updater to write
arbitrary content? The updater does not synchronize any ﬁle
deletion from the original partition but only adds ﬁles from it.
With the updater’s integrity ensured by TXT/SVM, user I/O
cannot be inﬂuenced by any external software.
(a) Forged user interface. Due to human users’ inability to
authenticate machines (cf. Stark [48]), rootkit malware may
mimic the appearance of the intended application, where the
user may leak secrets. However, the adversary will not beneﬁt
from it, as there is no UI in Inuksuk for prompting for the
SED unlock secret (in fact, the unlock secret is unknown to
users). Also, for manual deletion, there is no way to specify
which ﬁles to delete from outside the trusted updater (ﬁles are
selected in TXT/SVM right before they are deleted). In the
end, without the genuine updater in TXT/SVM, the adversary
cannot manipulate any ﬁle on the protected partition.
In addition to leaking secrets, forged UI can also help
malware hide termination (skipping execution of Inuksuk),
making the user believe the update has occurred (actually it
was a fake one). To discern, the user can conﬁgure a per-
deployment secret such as an avatar or short phrase to be
shown in the trusted updater (mini ﬁle browser). Because of the
exclusiveness and I/O isolation of TXT/SVM, rootkit malware
will not learn this secret and thus is unable to forge a genuine-
looking UI with the correct secret.
(b) Malicious termination, modiﬁcation or removal of
Inuksuk. A simple but effective attack against Inuksuk is
terminating its kernel driver in the OS, or even completely
removing it. Similar to rootkit malware’s termination of host-
based anti-malware defenses, rootkit ransomware can easily
launch this attack against Inuksuk.7 The pre-existing ﬁles on
the protected partition remain immune to this attack; however,
newly created or updated ﬁles thereafter are not protected. As
with the forged UI attack mitigation, the user-deﬁned avatar
or short phrase can indicate the correct execution of Inuksuk
in TXT/SVM, regardless of other tampering outside. Minimal
user diligence is needed to just make sure the Inuksuk UI
is regularly (automatically or manually) seen with this avatar
or phrase. Note that modifying the Inuksuk updater’s binary,
which may reside on the unprotected partition, does not help
the attacker; the SED unlock secret can only be accessed by
the genuine Inuksuk updater (TPM unsealing).
(c) Known attacks against SEDs. Müller et al. [47] show that
SEDs are also vulnerable to known attacks against software
FDEs (e.g., cold boot, warm boot, DMA, and evil-maid). They
also found a simple attack called hot plug, enabled by the fact
that SEDs are always in a binary state of locked or unlocked.
Once it becomes unlocked in a legitimate manner (e.g., user-
supplied unlock passwords), the adversary can connect the
disk to another attacker-controlled machine without cutting
power, and can get access to protected data. In addition to
these attacks, an adversary may also capture the cleartext SED
secret/password from the SATA interface, e.g., by tapping the
connection pins with a logic analyzers. Since all such attacks
require physical access, i.e., desoldering a microchip, manip-
ulating the connector or evil maid attacks, they are not viable
7Malicious termination can be made difﬁcult by registering Inuksuk as a
Windows Early Launch Antimalware (ELAM) driver.
11
for a scalable ransomware attack. More recently, different from
the design limitations above, certain implementation ﬂaws have
been identiﬁed by Meijer and van Gastel [43], which severely
affects SED security. To our understanding, the current SED-
speciﬁc ﬂaws, e.g., user password and DEK not
linked,
mostly concern data conﬁdentiality (with physical access),
whereas Inuksuk’s goal is data integrity (i.e., write protection).
However, there exist undocumented vendor-speciﬁc commands
(VSCs)8 on certain storage devices that allow ﬂashing unsigned
ﬁrmware (directly or indirectly), which completely breaks
TEEDisk. Among SED disks, Crucial (Micron) MX100 and
MX200 are vulnerable with such VSCs as reported by Meijer
and van Gastel. We may have to choose those SED drives
without such VSCs (e.g., after static analysis of ﬁrmware
extracted via JTAG). Caution is always necessary when taking
devices with ﬁrmware as part of the TCB (cf. the threat model
of FlashGuard [24]). Last but not least, usually major SED
manufacturers apply certain form of authentication/veriﬁcation
of the ﬁrmware before being updated to the drive, e.g., Secure
Downloads and Diagnostics.9
(d) Attacks on TXT/TPM. Although TPMs offer some phys-
ical tamper-resistance, TPMs and similar security chips have
been successfully attacked in the past (e.g., [28], [63], [58],
[34], [73]); see also Nemec et al. [49]. However, with physical
access excluded, we do not need to consider these attacks;
also note that tapping TPM pins and DMA attacks require a
malicious device to be connected. Regarding known software-
only attacks against TXT, most such attacks are ad-hoc (e.g.,
the SINIT module ﬂaw [76]), or version-speciﬁc; Intel has
purportedly patched them in the subsequent versions, or at least
the user is motivated to choose one that has no known ﬂaws.
There are also attacks against TXT (e.g., [75]) that exploit
the System Management Mode (SMM), an intrinsic part of the
Intel x86 architecture, referred to as Ring -2. If the SMI (SMM
interrupt) handler is compromised and SMI is left enabled,
it can preempt
trusted
operations. Although no OS, hypervisor or bootloader runs in
parallel with Inuksuk to trigger SMI (e.g., by writing to port
0xB2), certain micro-architectural behavior may facilitate such
attacks, e.g., the CPU temperature sensor. Nevertheless, certain
Intel CPUs leave SMI disabled after SINIT in TXT [26];
we can also explicitly disable SMI generation with the
Southbridge (model-speciﬁc) upon entry to our code, as SMI
is not needed in Inuksuk. This at least signiﬁcantly reduces
the attack time window to just the number of CPU cycles
needed to disable it. Especially, for AMD CPUs [9], external
SMI interrupts that assert after the start of SKINIT execution
will be held pending (to ensure atomicity of SKINIT) until
software subsequently sets GIF to 1 (internal SMIs are lost).
We do not set GIF back to 1, and rely on polling instead
(we do not gain extra performance with interrupts in our
single-threaded environment). Another possible (powerful)
attack avenue similar to SMM is vulnerable Intel Management
Engine ﬁrmware [16]. Unless there is a pressing need for
ME, we suggest to disable it in a rigorous manner (for efforts
and difﬁculties, see [54], as there is no architecture support
for disabling ME and SMI elegantly).
the TXT execution and intercept
8These VSCs are like regular commands sent through the SATA or NVMe
interface, which can be done by any privileged code.
9Seagate (our SED) prevents counterfeit ﬁrmware: https://www.seagate.
com/ca/en/solutions/security/
(e) Compromise-then-DMA attacks. Although very unlikely
to occur, we still consider a special situation where a DMA
attack can be mounted but argue that it does not pose any
threat. The remote adversary or malware can compromise
a programmable peripheral (e.g., a functionality-rich gaming
keyboard) and use it as the attack device. Then Inuksuk’s
exposed DMA buffer (not covered by Intel VT-d or AMD
DEV protections) might be manipulated by that compromised
peripheral (malware/ransomware). Those buffers only contain
content to be written, while LBA location/sector count is still
sent via regular I/O (WRITE-DMA-EXT), i.e., the adversary
cannot point to the location of existing protected ﬁles. There-
fore, encrypting the DMA buffers buys the adversary no more
than doing the same outside Inuksuk, i.e., contaminating ﬁles
on the unprotected partition. We can also reconﬁgure (every
time inside TXT/SVM) DMA remapping in a way that the con-
cerned range is only accessible to a speciﬁc PCI device (SED).
(f) Delayed attacks after deletion. Persistent ransomware
can stay hidden for a long period (ranging from weeks to
months), during which it just transparently decrypts encrypted
data when accessed [22]. This can trick the user to believe
that her data is intact (when viewed from within the OS). At
some point, if she removes older versions to save space or
auto-deletion is triggered, then the ransom can be demanded
(i.e., no more showing the decrypted version).
The root cause of this problem is that OS-based ﬁle viewers
(e.g., Microsoft Word), run outside the trusted environment and
can be manipulated by rootkit ransomware arbitrarily, such
as performing decryption before displaying a ﬁle to the user,
or simply feeding a cached, unencrypted copy of the ﬁle.
A straightforward countermeasure is to perform veriﬁcation
inside the updater before removing previous versions, e.g.,
by porting advanced ﬁle viewing tools in TXT/SVM, which
can require signiﬁcant effort. Such delayed attacks can be
classiﬁed into two cases: 1) Ransomware-triggered ﬁle updates
to exhaust version limits/space. 2) Updates piggybacking on le-
gitimate user edits. Regular user ﬁles are either less frequently
edited, or conﬁgured with a proper schedule to consolidate
frequent edits. Therefore, the latter would take a long time
for enough number of versions or age. We thus argue that the
former would be more effective for the adversary. Nevertheless,
Inuksuk can show an update log (with the list of ﬁles com-
mitted) to the user in the trusted updater on each run. It will
raise an alert if the user notices ﬁles being committed that she
has not touched. According to our ﬁle selection principles (see
Section IV-B), the number of ﬁles being committed each time
should account for a very small portion of all the protected ﬁles