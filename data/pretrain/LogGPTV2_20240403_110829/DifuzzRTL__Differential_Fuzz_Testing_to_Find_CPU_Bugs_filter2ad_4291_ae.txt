0.23
0.15
Fig. 14: Runtime overheads of register-coverage and
mux-coverage for real-world CPU RTLs.
C. Fuzzing Real-World Designs (Software Simulation)
Static Instrumentation Overhead. Secondly, we evaluated
the efficiency of register-coverage on real world designs. The
statistics of designs and overhead of mux-coverage and register-
coverage instrumentations are shown in Figure 13. As in the
second column, the total number of registers ranges from
two hundreds to five thousands depending on the complexity
of a design. However, DIFUZZRTL classified a few hundred
of registers into control registers regardless of the design.
Approximately, 10% of registers were classified as control
registers, and the total bit width has decreased about 97%.
When it comes to the line of Verilog, register-coverage
instrumentation showed the minimal increase, which is about
17% as in the last column. Even with Boom core which has
almost 200, 000 Verilog code lines, the overhead was moderate
(14.8%) due to the efficient instrumentation. On the other hand,
mux-coverage instrumentation on Rocket core increased the
number of line almost twice because of the wiring cost of
monitoring per each mux. Moreover, RFuzz [14] was not able
to instrument Boom core due to the resource constraint.
Regarding the instrumentation detail, DIFUZZRTL allocates
more space for each variables (i..e, regstate, covmap and
covsum) as the number of control registers increases in a
module. While the maximum size of variables is a configurable
parameter, we set the maximum size of regstate to be 20-bits
for this evaluation, which covers up to 220 bits (i.e. 1 Mb). In the
case of Boom core, five out of 151 modules were instrumented
using the maximum size variables, and LSU was the module
which had the most control registers with 156 total bit width.
The regstate in such a large module can have hash collisions,
which is also an important factor for fuzzing, but we leave the
detailed result of hash collision in §XI due to the space limit.
Runtime Instrumentation Overhead. The run time over-
heads of the coverage instrumentations are shown in Figure 14.
As expected,
the simulation speed has decreased as the
design complexity increases. Mor1kx is slow because it can
only be simulated using slow Icarus Verilog simulator [48].
The decreased simulation speed due to the register-coverage
instrumentation was about 7% thanks to the simple operation
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1296
(a) Mux and register-coverage
increments per fuzzing iterations
Fig. 15: Efficiency of register-coverage for real world RTL
designs
(b) register-coverage increment
in one iteration
Fig. 17: Frequency of registers bit values in Rocket core when
new coverage is explored
Project
FPGA emulation (Hz)
Fuzzing speed* (Hz)
(a) Mor1kx cappuccino
Fig. 16: RTL simulation results on register-coverage guided
fuzzing and no-coverage guided fuzzing
(b) Rocket core
(c) Boom core
of regstate hashing and covmap checking. However, instru-
menting mux-coverage extremely decreased the simulation
speed because it connects the select signals of all muxes to
the top level module and monitors the signal every cycle.
In
§XI, we summarize further explanation on the fundamental
difference of register-coverage and mux-coverage. Overall,
register-coverage instrumented design runs almost 40 times
faster then mux-coverage instrumented design.
Efficiency of Register Coverage-Guided Fuzzing. To com-
pare the efficiencies of the coverage, we measure the register-
coverage and mux-coverage while running same inputs on the
instrumented designs. The inputs were collected while running
the fuzzer with only mux-coverage for 52 hours. The coverage
results are shown in Figure 15-(a) using the iteration number
as the x-axis to eliminate the effect of runtime overhead. Mux-
coverage quickly saturated as the iteration proceeds, but the
fuzzer using register-coverage continuously found new seeds
and increased the coverage. This is because register-coverage
captures fine-grained behaviors of the design by capturing the
state every cycle as illustrated in Figure 15-(b).
Fuzzing Performance. To evaluate the performance of fuzzer,
we compared random testing without coverage guiding (no-cov)
and DIFUZZRTL (reg-cov), where the random testing only
generates formatted instructions without guidance. The results
are illustrated in Figure 16. Looking at the results, DIFUZZRTL
reached higher coverage as the design complexity increases.
Especially in Boom core, the fuzzer achieves remarkable gain
over random testing.
Effectiveness of Interrupt Mutation. One of the reason
DIFUZZRTL has chosen to fuzz CPU directly is that large
input space leads to an extensive exploration. We wonder
how DIFUZZRTL can leverage such opportunity by generating
mux-cov
reg-cov
5.73 M (90 M)
✗
Rocket
Boom
*Fuzzing speed is defined as the number of fuzzing iterations per second.
✗ RFuzz failed to instrument Boom core due to the out-of-resource issue.
5.74 M (90 M)
5.73 M (90 M)
mux-cov
4.13
✗
reg-cov
4.13
4.13
Fig. 18: Runtime overheads of register-coverage and
mux-coverage for FPGA emulation. The numbers in the
brackets are timing constraints for the FPGA bitstream.
input stimuli which includes both memory values and interrupt
signals. Thus we designed an experiment to answer the question:
does raising interrupt signals lead to the exploration of an
unknown state.
To discriminate the impact of interrupt assertion, we repeated
running Rocket core with two SimInput which are only different
in that the latter one contains non-zero interrupt values. Thus
the latter SimInput explores the new states introduced by the
interrupt assertions. For each run, we collected the values
of control registers as a bit vector whenever a new state is
explored, which represents a control state of the module.
Then, we summarized the bit vectors as a histogram which is
shown in Figure 17, thereby each bar represents the frequency
of the bit when a new state is explored. Among the bars,
we found that only the bit in index three shows increased
frequency when the interrupt is used. After manually auditing
the source code, we confirm that the bit in index three was
belonging to the wb reg xcpt register in Rocket core, which
is used for exception handling. Therefore, we conclude that
raising interrupts enables DIFUZZRTL to explore unknown
states, which is otherwise not possible to be reached.
D. Fuzzing Real-World Designs (FPGA Emulation)
Since the performance of fuzzing is highly depending on
the speed of running each iteration, FPGA emulation can
significantly improve the performance of fuzzing—FPGA runs
on a synthesized hardware circuit. In this sense, we attempted
to evaluate DIFUZZRTL and RFuzz with the FPGA emulation,
particularly focusing on following two aspects: the runtime
instrumentation overheads and the fuzzing performance.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1297
0200040006000Iteration number0300600900120015001800Register coveragereg-cov: 0.48 hoursmux-covreg-cov02004006008001000Mux coveragemux-cov: 52.50 hours310330350370Cycle162166170174178Register coverageSimInput 0SimInput 1SimInput 2SimInput 3012345678Time(h)05k10k15k20k25kRegister Coverageno-covreg-cov01428425670Time(h)044k88k132k176kRegister Coverageno-covreg-cov01428425670Time(h)0205k410k615k820kRegister Coverageno-covreg-cov0102030Bit index0100200300400500Frequency as a new coverageupdates w/o intrupdates w/ intrsome of those are already being patched. More importantly,
five of those were assigned with CVE numbers, signifying its
strong impacts to the security community. These discovered
bugs can be classified into four categories: atomic operation
related bugs, instruction decoding bugs, memory related bugs,
and performance bugs, demonstrating the wide coverage of
DIFUZZRTL with respect to bug types in CPU RTLs.
First, incorrect behaviors in atomic memory operations (load-
reserve store-conditional instructions) were frequently found.
According to the OpenRISC ISA [43], reservation set by load-
reserve instruction should be unset when the snooping hit
occurs. However, Mor1kx cappuccino did not follow the ISA,
causing memory consistency problems when the bug occurs
(CVE-2020-13455).
Similar to OpenRISC, RISC-V does not allow a load-reserve
instruction on a misaligned address to set the reservation. How-
ever, Boom core did not follow the specification, causing the
following store-conditional instruction to succeed. Especially
the bug was only triggered when the related address is cached
in the core, since the reservation signal reaches the cache line
before the exception signal abort the reservation (CVE-2020-
29561).
Bugs related to instruction decoding were found as
DIFUZZRTL randomly provides illegal opcode to RTLs. Espe-
cially in Boom core, floating point instructions with unallowed
rounding bits successfully updated the floating point registers.
This bug may incur an incorrect results of floating point
instructions, which is critical in a scientific computing, as
we have observed from the notorious Pentium FDIV bug [2]
(Issue #458). Mor1kx cappuccino also has a decoding bug
related to bit processing instructions (Issue #114).
DIFUZZRTL was also able to discover bugs related to
memory bus. Boom core was incorrectly setting the source field
in ProbeAckData which is used for cache coherence memory
protocol (CVE-2020-13251). However, the bug was not found
even with several verification including running large programs
on the chip. We assume the SoC used for Boom core test is
tolerant to the bug, but the results will be critical if the Boom
core is used with other intolerant (correctly designed) SoC.
Other bugs related to the performance were also found, such
as setting FS bits in mstatus register (Boom core), which is
used to decide whether save or not the floating point registers
during the context switching.
F. Case Study with Real-World Bugs
to clearly showcase
the
In order
effectiveness of
DIFUZZRTL’s coverage guiding, we performed a case study
with two bugs which we discovered with DIFUZZRTL (i.e.,
Issue #492 and CVE-2020-29561 in Figure 20, both of
which were found on Boom core). In particular, we compare
the results of DIFUZZRTL with following two approaches:
1) riscv-torture [37], which randomly generates instructions
using a pool of handcrafted instruction sequences without any
coverage guided feature. This riscv-torture is widely used
to verify various RISC-V cores by the development commu-
nity; and 2) mux-coverage guided fuzzer, which generates
(a) Rocket
(b) Boom
Fig. 19: FPGA emulation results of register-coverage guided
fuzzing and no-coverage guided fuzzing
To shortly summarize the results, DIFUZZRTL successfully
instrumented both Rocket core and Boom core, and showed
improved runtime instrumentation overheads and fuzzing
performance as expected. In the case of RFuzz, it was able to
instrument Rocket core and showed the improved performance
as expected. However, it was not able to instrument Boom
core, because mux-coverage of RFuzz requires more resources
than available, leading to the instrumentation failure.
Runtime Instrumentation Overhead. As shown in Figure 18,
DIFUZZRTL instrumented and compiled both Rocket core and
Boom core at 90 MHz clock frequency using Vivado 2018.3.
In each iteration, the synthesized core runs at 5.73 MHz.
This clock slowdown is as expected because DIFUZZRTL
should perform following fuzzing operations: 1) monitoring
and scheduling the running instance; and 2) fuzzing manage-
ment. Also, operations outside FPGA (i.e., fuzzing corpus
management and SimInput mutation) becomes a bottleneck
since DIFUZZRTL alternatively runs the mutation and FPGA
emulation. This clock slowdown can be mitigated by employing
general optimization techniques, such as running the mutation
and FPGA emulation in parallel, but we leave those as future
work.
RFuzz was also able to run mux-coverage instrumented
Rocket core at 5.73 MHz with 90 MHz clock frequency.
However, RFuzz failed to build Boom core, so we were not
able to perform the evaluation for RFuzz’s case on Boom core.
Fuzzing Performance. The register-coverage guided fuzzer
using FPGA emulation showed much better performance
compared to the random testing without coverage guiding
as shown in Figure 19. Specifically, register-coverage guided
fuzzing reached the two times more number of register-coverage
than without coverage guiding after fuzzing 9 hours. It is worth
noting that, as we have shown before, the difference was only
about 20 % given the same 9 hours fuzzing time in software
simulation. This clear improvement compared to the software
simulation (i.e., from 20 % to 2 X for the given 9 hours) is
thanks to the fact that the FPGA emulation runs almost 30
times faster than the simulation.
E. Newly Discovered Bugs in Real-World RTL Designs
During the evaluation, DIFUZZRTL found 16 new bugs
in total (listed in Figure 20), all of which were confirmed
by the respective development communities or vendors and
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1298
0510152025Time(h)044k88k132k176k220kRegister Coverageno-covreg-cov0510152025Time(h)0395k790k1.19M1.58MRegister Coverageno-covreg-covProject
Mork1x
ISA
OpenRISC
Rocket chip
Boom
RISCV
RISCV
Spike
RISCV
Confirmed
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
Fixed
pending
pending
pending
✓
✓
pending
✓
✓
pending
✓
✓
✓
✓
✓
✓
✓
Description
Reservation is not cancelled when there is snooping hit between lwa and swa
Jump to link register does not assert illegal instruction exception
Bug ID
CVE-2020-13455
CVE-2020-13454
CVE-2020-13453 Misaligned swa raise exception when reservation is not set
Issue #114
Issue #99
Issue #2345
CVE-2020-13251
Issue #458
Issue #454
Issue #492
Issue #493
Issue #503
CVE-2020-29561 Misaligned lr instruction on a cached line set the reservation
CVE-2020-13456 Misaligned lr.d should not set load reservation
Issue #2390
Issue #426
l.fl1, l.ff1 instruction decoding bug
eear register not saving instruction virtual address when illegal instruction exception
Instruction retired count not increased when ebreak
Source field in ProbeAckData does not match the sink field of ProbeRequest
Floating point instruction which has invalid rm field does not raise exception
FS bits in mstatus register is set after fle.d instruction
When frm is set DYN, floating point instruction with DYN rm field should raise exception
Rounding mode in fsqrt instruction does not work
invalid operation flag is not set after invalid fdiv instruction
Reading dpc register should raise exception in machine mode
Faulting virtual address should not be written to mtval when ebreak
Fig. 20: A list of newly discovered bugs by DIFUZZRTL. DIFUZZRTL identified 16 bugs in total, all of those were confirmed
by respective vendors. Five of those were assigned with CVE numbers.
Bug ID