---
author: Sylvain Leroux
category: 技术
comments_data:
- date: '2019-02-01 17:01:39'
  message: 好
  postip: 121.12.147.251
  username: 来自广东东莞的 Chrome 71.0|Windows 7 用户
- date: '2019-04-16 16:13:14'
  message: 6的一批
  postip: 103.216.43.99
  username: myjack8879 [Chrome 73.0|Windows 10]
- date: '2020-02-08 13:40:34'
  message: 我只想说，原文作者对地址范围的解读没有问题
  postip: 60.176.244.61
  username: 来自浙江杭州的 Safari 12.1|Mac 10.14 用户
count:
  commentnum: 3
  favtimes: 7
  likes: 0
  sharetimes: 1
  viewnum: 20981
date: '2018-11-14 19:06:00'
editorchoice: true
excerpt: 这将是你全面了解 Sed 命令的一个机会，深入挖掘它的运行细节和精妙之处。
fromurl: https://linuxhandbook.com/sed-reference-guide/
id: 10232
islctt: true
largepic: /data/attachment/album/201811/14/191948l9y6vzqu18yz18v4.jpg
permalink: /article-10232-1.html
pic: /data/attachment/album/201811/14/191948l9y6vzqu18yz18v4.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这将是你全面了解 Sed 命令的一个机会，深入挖掘它的运行细节和精妙之处。
tags:
- sed
thumb: false
title: Sed 命令完全指南
titlepic: true
translator: qhwdw
updated: '2018-11-14 19:06:00'
---
在前面的文章中，我展示了 [Sed 命令的基本用法](https://linuxhandbook.com/sed-command-basics/)， Sed 是一个实用的流编辑器。今天，我们准备去了解关于 Sed 更多的知识，深入了解 Sed 的运行模式。这将是你全面了解 Sed 命令的一个机会，深入挖掘它的运行细节和精妙之处。因此，如果你已经做好了准备，那就打开终端吧，[下载测试文件](https://gist.github.com/s-leroux/5cb36435bac46c10cfced26e4bf5588c) 然后坐在电脑前：开始我们的探索之旅吧！
![](/data/attachment/album/201811/14/191948l9y6vzqu18yz18v4.jpg)
### 关于 Sed 的一点点理论知识
#### 首先我们看一下 sed 的运行模式
要准确理解 Sed 命令，你必须先了解工具的运行模式。
当处理数据时，Sed 从输入源一次读入一行，并将它保存到所谓的 模式空间   pattern space 中。所有 Sed 的变换都发生在模式空间。变换都是由命令行上或外部 Sed 脚本文件提供的单字母命令来描述的。大多数 Sed 命令都可以由一个地址或一个地址范围作为前导来限制它们的作用范围。
默认情况下，Sed 在结束每个处理循环后输出模式空间中的内容，也就是说，输出发生在输入的下一个行覆盖模式空间之前。我们可以将这种运行模式总结如下：
1. 尝试将下一个行读入到模式空间中
2. 如果读取成功：
	1. 按脚本中的顺序将所有命令应用到与那个地址匹配的当前输入行上
	2. 如果 sed 没有以静默模式（`-n`）运行，那么将输出模式空间中的所有内容（可能会是修改过的）。
	3. 重新回到 1。
因此，在每个行被处理完毕之后，模式空间中的内容将被丢弃，它并不适合长时间保存内容。基于这种目的，Sed 有第二个缓冲区： 保持空间   hold space 。除非你显式地要求它将数据置入到保持空间、或从保持空间中取得数据，否则 Sed 从不清除保持空间的内容。在我们后面学习到 `exchange`、`get`、`hold` 命令时将深入研究它。
#### Sed 的抽象机制
你将在许多的 Sed 教程中都会看到上面解释的模式。的确，这是充分正确理解大多数基本 Sed 程序所必需的。但是当你深入研究更多的高级命令时，你将会发现，仅这些知识还是不够的。因此，我们现在尝试去了解更深入的一些知识。
的确，Sed 可以被视为是[抽象机制](http://mathworld.wolfram.com/AbstractMachine.html)的实现，它的[状态](https://en.wikipedia.org/wiki/State_(computer_science))由三个[缓冲区](https://en.wikipedia.org/wiki/Data_buffer) 、两个[寄存器](https://en.wikipedia.org/wiki/Processor_register#Categories_of_registers)和两个[标志](https://www.computerhope.com/jargon/f/flag.htm)来定义的：
* **三个缓冲区**用于去保存任意长度的文本。是的，是三个！在前面的基本运行模式中我们谈到了两个：模式空间和保持空间，但是 Sed 还有第三个缓冲区： 追加队列   append queue 。从 Sed 脚本的角度来看，它是一个只写缓冲区，Sed 将在它运行时的预定义阶段来自动刷新它（一般是在从输入源读入一个新行之前，或仅在它退出运行之前）。
* Sed 也维护**两个寄存器**： 行计数器   line counter （LC）用于保存从输入源读取的行数，而 程序计数器   program counter （PC）总是用来保存下一个将要运行的命令的索引（就是脚本中的位置），Sed 将它作为它的主循环的一部分来自动增加 PC。但在使用特定的命令时，脚本也可以直接修改 PC 去跳过或重复执行程序的一部分。这就像使用 Sed 实现的一个循环或条件语句。更多内容将在下面的专用分支一节中描述。
* 最后，**两个标志**可以修改某些 Sed 命令的行为： 自动输出   auto-print （AP）标志和 
> 如果指定了多个文件，将按指定的文件命名顺序进行读取并被串联编辑。
> 
> 
> 
但是，一些 Sed 的实现提供了命令行选项去改变这种行为，比如， GNU Sed 的 `-s` 标志（在使用 GNU Sed `-i` 标志时，它也被隐式地应用）：
```
sed -sn -e '1p' inputfile1 inputfile2 inputfile3
```
如果你的 Sed 实现支持这种非标准选项，那么关于它的具体细节请查看 `man` 手册页。
#### 正则表达式
我前面说过，Sed 地址既可以是行号也可以是正则表达式。那幺正则表达式是什么呢？
正如它的名字，一个[正则表达式](https://www.regular-expressions.info/)是描述一个字符串集合的方法。如果一个指定的字符串符合一个正则表达式所描述的集合，那么我们就认为这个字符串与正则表达式匹配。
正则表达式可以包含必须完全匹配的文本字符。例如，所有的字母和数字，以及大部分可以打印的字符。但是，一些符号有特定意义：
* 它们相当于锚，像 `^` 和 `$` 它们分别表示一个行的开始和结束；
* 能够做为整个字符集的占位符的其它符号（比如圆点 `.` 可以匹配任意单个字符，或者方括号 `[]` 用于定义一个自定义的字符集）；
* 另外的是表示重复出现的数量（像 [克莱尼星号（`*`）](https://chortle.ccsu.edu/FiniteAutomata/Section07/sect07_16.html) 表示前面的模式出现 0、1 或多次）；
这篇文章的目的不是给大家讲正则表达式。因此，我只粘几个示例。但是，你可以在网络上随便找到很多关于正则表达式的教程，正则表达式的功能非常强大，它可用于许多标准的 Unix 命令和编程语言中，并且是每个 Unix 用户应该掌握的技能。
下面是使用 Sed 地址的几个示例：
```
sed -n -e '/systemd/p' inputfile # 仅输出包含字符串“systemd”的行
sed -n -e '/nologin$/p' inputfile # 仅输出以“nologin”结尾的行
sed -n -e '/^bin/p' inputfile # 仅输出以“bin”开头的行
sed -n -e '/^$/p' inputfile # 仅输出空行（即：开始和结束之间什么都没有的行）
sed -n -e '/./p' inputfile # 仅输出包含字符的行（即：非空行）
sed -n -e '/^.$/p' inputfile # 仅输出只包含一个字符的行
sed -n -e '/admin.*false/p' inputfile # 仅输出包含字符串“admin”后面有字符串“false”的行（在它们之间有任意数量的任意字符）
sed -n -e '/1[0,3]/p' inputfile # 仅输出包含一个“1”并且后面是一个“0”或“3”的行
sed -n -e '/1[0-2]/p' inputfile # 仅输出包含一个“1”并且后面是一个“0”、“1”、“2”或“3”的行
sed -n -e '/1.*2/p' inputfile # 仅输出包含字符“1”后面是一个“2”（在它们之间有任意数量的字符）的行
sed -n -e '/1[0-9]*2/p' inputfile # 仅输出包含字符“1”后面跟着“0”、“1”、或更多数字，最后面是一个“2”的行
```
如果你想在正则表达式（包括正则表达式分隔符）中去除字符的特殊意义，你可以在它前面使用一个反斜杠：
```
# 输出所有包含字符串“/usr/sbin/nologin”的行
sed -ne '/\/usr\/sbin\/nologin/p' inputfile
```
并不限制你只能使用斜杠作为地址中正则表达式的分隔符。你可以通过在第一个分隔符前面加上反斜杠（`\`）的方式，来使用任何你认为适合你需要和偏好的其它字符作为正则表达式的分隔符。当你用地址与带文件路径的字符一起来匹配的时，是非常有用的：
```
# 以下两个命令是完全相同的
sed -ne '/\/usr\/sbin\/nologin/p' inputfile
sed -ne '\=/usr/sbin/nologin=p' inputfile
```
#### 扩展的正则表达式
默认情况下，Sed 的正则表达式引擎仅理解 [POSIX 基本正则表达式](https://www.regular-expressions.info/posix.html#bre) 的语法。如果你需要用到 [扩展正则表达式](https://www.regular-expressions.info/posix.html#ere)，你必须在 Sed 命令上添加 `-E` 标志。扩展正则表达式在基本正则表达式基础上增加了一组额外的特性，并且很多都是很重要的，它们所要求的反斜杠要少很多。我们来比较一下：
```
sed -n -e '/\(www\)\|\(mail\)/p' inputfile
sed -En -e '/(www)|(mail)/p' inputfile
```