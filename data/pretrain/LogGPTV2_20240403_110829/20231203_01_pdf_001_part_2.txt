# DuckDB - Pipelines and Execution Model

## Operator Interface
```cpp
void GetData();
void Sink();
OperatorResultType Execute(
    DataChunk &chunk,
    GlobalSinkState &gstate,
    DataChunk &input,
    GlobalSourceState &gstate,
    LocalSinkState &lstate,
    LocalSourceState &lstate);
DataChunk &chunk;
DataChunk &input;
OperatorState &state;
void Combine(GlobalSinkState &gstate, LocalSinkState &lstate);
void Finalize(GlobalSinkState &gstate);
```

## Example Pipeline
### GROUP BY cid
- **Aggregation**: `FIRST(name), SUM(rev+tax)`
- **Hash Join**: `cust.cid = sale.cid`

#### Pipeline 2 (HT Probe + Aggregate)
- **Scan**: `cust`
- **Scan**: `sale`
- **Sink**: `GROUP BY cid, FIRST(name), SUM(rev+tax)`

#### Pipeline 1 (HT Build)
- **Operator**: `HASH JOIN cust.cid = sale.cid`
- **Source**: `Scan cust`
- **Source**: `Scan sale`

## Push-Based vs. Pull-Based Execution
### Pull-Based (Volcano)
- **Control Flow**: Inside the operator
- **Flexibility**: High
- **State Management**: Call stack holds all state
- **Example**:
  ```cpp
  void Projection::GetChunk(DataChunk &result) {
      child->GetChunk(child_chunk);
      if (child_chunk.size() == 0) {
          return;
      }
      executor.Execute(child_chunk, result);
  }
  ```

### Push-Based
- **Control Flow**: Central location
- **Advantages**: Optimizations, backpressure handling, async I/O
- **Example**:
  ```cpp
  void Projection::Execute(DataChunk &input, DataChunk &result) {
      executor.Execute(input, result);
  }
  ```

## Pipeline State
```cpp
class PipelineState {
public:
    vector<DataChunk> intermediate_chunks; // Intermediate chunks for the operators
};
```

## Optimizations
### Vector Cache Scan Sharing
- **Cache Results**: Push results of one scan into multiple sinks
- **Example**:
  - **GROUP BY item**
  - **Aggregation**: `SUM(rev+tax)`
  - **Filter**: `rev >= 90%`

### Backpressure and Async I/O
- **Pause Pipeline**: When buffer is full or HTTP request is in progress
- **Resume Pipeline**: When buffer is empty or data is available
- **Example**:
  - **Buffer Size**: 10MB
  - **HTTP Scan**: Read data over HTTP
  - **Hash Join**: `cust.cid = sale.cid`

## Table Storage
### Block-Based Storage
- **Block Size**: 256KB
- **WAL**: Separate file
- **ACID Support**: Using headers

### Row Groups
- **Partitioning**: Tables into row groups
- **Row Group Size**: ~120K rows
- **Parallelism and Checkpoint Unit**

### Compression
- **General-Purpose**: gzip, zstd, snappy, lz4
  - **Pros**: Space saving
  - **Cons**: Slower (de)compression, no random seeks
- **Lightweight**: RLE, bitpacking, dictionary, FOR, delta
  - **Pros**: Fast, patterns can be exploited during execution
  - **Cons**: No effect if patterns are not present

### Compression Phases
- **Analyze**: Determine the best compression method
- **Compress**: Apply the best method to compress the column

## Buffer Manager
- **Custom Lock-Free Buffer Manager**
- **Inspiration**: Lean-store
- **Granularity**: 256KB blocks
- **Functionality**:
  - Set memory limit
  - Pin and unpin blocks

## Out-Of-Core Execution
- **Supports Larger-Than-Memory Execution**
- **Streaming Engine**: Special join, sort, and window algorithms
- **Goal**: Graceful performance degradation

## Transactions
- **ACID Support**: Based on HyPer MVCC model
- **Optimized for Vectorized Processing**
- **Snapshot Isolation**: Optimistic concurrency control

## External Formats
- **Supported Formats**: Parquet, CSV, JSON, Arrow, Pandas, SQLite, Postgres
- **Example Query**:
  ```sql
  SELECT * FROM lineitem.parquet;
  ```

## Pluggable Catalog
- **Multiple Databases**: Attach and query
- **Pluggable File System**: HTTP/S3/object store reads
- **Example**:
  ```sql
  ATTACH 'sqlite.db' (TYPE sqlite);
  USE sqlite;
  CREATE TABLE lineitem AS SELECT * FROM 'lineitem.parquet';
  CREATE VIEW lineitem_subset AS SELECT l_orderkey, l_partkey, l_suppkey, l_comment FROM lineitem;
  ```

## Extensions
- **Support for Extensions**: Distributed via INSTALL and LOAD commands
- **Examples**:
  - Full-Text Search
  - HTTP(S) File System
  - Time Zones and Collations
  - JSON Operations
  - Parquet Support
  - TPC-H and TPC-DS Support

## WebAssembly (WASM)
- **Browser Support**: Fast and efficient

## Conclusion
- **Free and Open Source**
- **Contributions Welcome**
- **Website**: [duckdb.org](https://duckdb.org/)
- **Source Code**: [github.com/duckdb/duckdb](https://github.com/duckdb/duckdb)

Thank you for having me! Any questions?

[@duckdb](https://duckdb.org/) | [discord.gg/tcvwpjfnZx](https://discord.gg/tcvwpjfnZx)