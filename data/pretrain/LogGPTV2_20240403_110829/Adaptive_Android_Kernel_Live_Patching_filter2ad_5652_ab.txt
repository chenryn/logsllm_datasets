sons, a patch can only be placed at the designated levels.
Speciﬁcally, level 1 is the entry or return points of a vul-
nerable function; level 2 is before or after call instruc-
tions to a callee of the vulnerable function. Note that
we do not patch the callee itself but rather hook call in-
structions in order to avoid affecting other callers of this
callee. A typical example of callees hooked by KARMA
is copy_from_user, a function dedicated to copy un-
trusted user data into the kernel. copy_from_user is
a perfect checkpoint for malicious inputs because the
kernel calls it whenever the kernel needs to read the
user data; Level 3 is similar to the existing binary-based
patches [22,23,27]. Level-3 patches are more ﬂexible but
potentially dangerous because they are (currently) uncon-
strained.
If a vulnerability is difﬁcult to patch at level
1 and level 2, we fall back to level 3. Level-3 patches
have to be manually scrutinized to prevent them from be-
ing misused. Our experiment with 76 critical kernel vul-
nerabilities shows that level 1 can patch 49 (64%) vul-
nerabilities, level 2 can patch 22 (29%) vulnerabilities,
and we have to fall back to level 3 in only 5 cases (7%).
This multi-level design allows KARMA to patch most, if
not all, Android kernel vulnerabilities. In the following,
we focus on the level-1 and level-2 patches since level-
3 patches (i.e., binary patching) have been studied by a
number of the previous research [22, 23, 27].
A patch can indirectly affect the kernel’s control ﬂow
by returning an error code when a malicious input is
intercepted. This immediately terminates the execution
of the vulnerable function and passes the error code to
the caller. We require a patched function to return er-
ror codes on fault in order to leverage the existing error
handling code of the kernel to gracefully fail on mali-
cious inputs. Allowing a patch to return arbitrary values
(i.e., other than error codes) may have unintended con-
sequences. Fortunately, many kernel functions return er-
ror codes on fault, following the guidelines of the ofﬁcial
coding style. Similarly, we allow functions that return
void to be patched.
Rule II, a patch can read any valid kernel data struc-
tures, but it is prohibited from writing to the kernel.
Even though KARMA’s patches are vetted before de-
ployment, they may still contain weakness that can be ex-
ploited by attackers. To control their side effects, patches
are only allowed to read necessary, valid kernel data
structures (e.g., registers, stacks, the heap, code, etc.), but
they are prohibited from writing to the kernel. Allowing
a patch to change the kernel’s memory, even one bit, is
dangerous. For example, it could be exploited to clear the
U-bit (the user/kernel bit) of a page table entry to grant
the user code the kernel privilege. Without the write per-
mission, patches are also prevented from leaking kernel
information to a local or remote adversary. This rule is
enforced by providing a set of restricted APIs as the only
interface for the patches to access the kernel data.
By combining these two rules with a careful vetting
process and the memory-safety of the patches, we can
strictly conﬁne the run-time behaviors of patches to pre-
vent them from potential misuse.
1256    26th USENIX Security Symposium
USENIX Association
0260005200078000104000130000024681002600052000780001040001300000%20%40%60%80%100%1 function kpatcher ( patchID , sp , cpsr , r , r1 ,
r2 , r3 , r4 , r5 , r6 , r7 , r8 , r9 , r1 , r11 ,
r12 , r14 )
if patchID ==  xca5269db5f4 then
uaddr1 = r
uaddr2 = r2
if uaddr1 == uaddr2 then
2
3
4
5
6
7
8
9
10
11 end
12 kpatch.hook ( xca5269db5f4 , " futex_requeue " )
else
end
return -22
return 
Figure 3: Workﬂow of KARMA
end
2.3 Architecture and Workﬂow
Figure 4: A simpliﬁed patch in Lua for CVE-2014-3153
KARMA works in two phases as shown in Figure 3.
The ofﬂine phase adapts a reference patch (Pr) to all
the devices supported by KARMA. The reference patch
often comes from an upstream source, such as Google
and chipset manufacturers.
It targets a speciﬁc device
and kernel (named as the reference kernel, Kr) and is
not directly applicable to other devices. To address that,
KARMA employs an automated system to customize Pr
for each target kernel (Kt). Speciﬁcally, KARMA ﬁrst
roughly identiﬁes potentially vulnerable functions in ker-
nel Kt, and applies symbolic execution to compare the
semantics of each candidate function (Ft) against refer-
ence function Fr. If these two functions are semantically
equivalent, KARMA further adjusts the reference patch
for kernel Kt, signs it, and deposits it to the cloud. To
prevent malicious patches from being installed by user
devices, reference patches are carefully vetted and all
the patches are signed. User devices only install signed
patches. Matching semantics with symbolic execution
can abstract syntactic differences in function binaries
(e.g., register allocation). Semantic matching decides
whether candidate function Ft is semantically equivalent,
or very similar to, reference function Fr, and whether Ft
has been patched or not. In other words, it is responsi-
ble for locating a function in the target kernel that can be
patched but has not been patched yet. Semantic matching
also provides a scheme to customize reference patch Pr
for target kernels.
In the second phase, the KARMA client in the user
device downloads and veriﬁes the patches for its device
and applies them to the running kernel. Speciﬁcally, the
client veriﬁes that each downloaded patch is authentic by
checking its signature and that it is applicable to this de-
vice by comparing the device model and the kernel ver-
sion. If a patch passes the veriﬁcation, it is cached in a
secure store provided by Android. The client then applies
the patch to the running kernel. An applied patch imme-
diately protects the kernel from exploits without reboot-
ing the device or user interactions. In the unlikely event
that a patch causes the device to malfunction, the user
can reboot the device and skip the problematic patches
by holding a hardware key. Currently, KARMA’s patches
are written in the Lua language. We choose Lua for its
simplicity, memory-safety, and easiness to embed and ex-
tend (in security, simplicity is a virtue). Lua provides suf-
ﬁcient expressive power for KARMA to ﬁx most kernel
vulnerabilities. Other kernel scripting languages, such as
BPF [8], can also satisfy our requirements. To execute
these patches, we embed a restricted Lua engine in the
kernel. The engine strictly enforces the security rules of
KARMA (Section 2.2).
In the rest of this section, we ﬁrst illustrate KARMA’s
patches and then present these two phases in detail.
2.4 KARMA Patches
Patches in KARMA are written in the Lua programming
language. Lua is a simple, extensible, embedded lan-
guage.
It has only eight primitive types, such as nil,
boolean, number, string, and table. Tables are the
only built-in composite data type. Most user data struc-
tures are built on top of tables. Lua is a dynamically
typed language, and all the data accesses are checked
at the run-time. This reduces common memory-related
ﬂaws like buffer overﬂows. Lastly, Lua creates an iso-
lated environment to execute patches. This prevents
patches from directly accessing the kernel memory. In-
stead, the kernel data can only be accessed through re-
strictive APIs provided by KARMA.
Figure 4 shows a simpliﬁed patch for CVE-2014-3153,
exploited by the infamous Towelroot. CVE-2014-3153
is a ﬂaw in function futex_requeue. It fails to check
that two arguments are different, allowing a local user
to gain the root privilege via a crafted FUTEX_REQUEUE
command [14]. To ﬁx it, we just check whether these two
arguments (in register r and r1, respectively) are differ-
ent and return an error code (-22 or -EINVAL) if they are
the same. As shown in Fig. 4, each hooking point has a
unique ID. The patch can check this ID to ensure that it
is called by the correct hooking points. When invoked,
the patch receives the current values of the registers as
arguments. They allow the patch to access function argu-
USENIX Association
26th USENIX Security Symposium    1257
Vulnerable Function IdentificationSemantic MatchingDownload &Verify PatchOnline Live Patching by KARMA ClientApplyPatchReferencePatchVulnerableFunctionTarget KernelTarget KernelTarget KernelsSigned Patch For Target KernelSigned Patch For Target KernelSigned Patches For Target KernelsTHE CLOUDOffline Patch Generationand Verification1 s t a t i c
i n t sock_diag_rcv_msg ( s t r u c t sk_buff *
skb , s t r u c t nlmsghdr * nlh )
1 s t a t i c
l o n g msm_ioctl_server ( s t r u c t file *
file , v o i d * fh , bool valid_prio , i n t cmd ,
2 {
3
4
5
6
7
8
9 }
11 {
12
13
14
15
16
17 +
18 +
19
20
21 }
...
s w i t c h ( nlh - > nlmsg_type ) {
...
c a s e SOCK_DIAG_BY_FAMILY :
r e t u r n __sock_diag_rcv_msg ( skb ,
nlh ) ;
...
10 s t a t i c
i n t __sock_diag_rcv_msg ( s t r u c t sk_buff
* skb , s t r u c t nlmsghdr * nlh )
i n t err ;
s t r u c t sock_diag_req * req = NLMSG_DATA (
nlh ) ;
s t r u c t sock_diag_handler * hndl ;
i f ( nlmsg_len ( nlh )  sdiag_family >= AF_MAX )
return - EINVAL ;
hndl = soc k_ di ag_ lo ck _h and le r ( req - >
sdiag_family ) ;
...
v o i d * arg )
...
i f ( copy_from_user (& u_isp_event ,
( v o i d __user *) ioctl_ptr - > ioctl_ptr ,
s i z e o f ( s t r u c t msm_isp_event_ctrl ) ) ) {
...
}
...
if ( u_isp_event . isp_data . ctrl . queue_idx =
MAX_NUM_ACTIVE_CAMERA ) {
pr_err ("% s: Invalid index %d\n",
__func__ , u_isp_event . isp_data .
ctrl . queue_idx );
rc = - EINVAL ;
return rc ;
}
...
2 {
3
4
5
6
7
8
9
10 +
11 +
12 +
13 +
14 +
15 +
16 +
17 +
18
19 }
Figure 6: Source-code patch for CVE-2013-6123
Broadcom WiFi driver, caused by the missing check
the packet data length is less than the packet
that
length.
This vulnerability represents an interesting
challenge to KARMA: the source-code is patched in
several functions, and a new argument
is added to
function dhd_wl_host_event and dngl_host_event.
The error condition is ﬁnally checked in function
dngl_host_event. Apparently, this type of ﬁx (i.e.,
adding new arguments to functions) cannot be translated
directly in KARMA because patches are not allowed to
write the kernel memory. To address that, we need to
hook both dhd_rx_frame and dngl_host_event func-
tions. The ﬁrst hook saves the packet length, and the sec-
ond hook compares the packet length to the data length.
If the data length is larger than the packet length, the
patch returns the error code of BCME_ERROR. This is
an example of KARMA’s multi-invocation patches (also
called stateful patches). Both patches bear the same patch
ID. The variables at the ﬁrst hook are made accessible
to the second hook by KARMA’s Lua engine. An alter-
native ﬁx is to hook only dhd_rx_frame and manually
extract the data length from the packet. However, this
ﬁx is less favorable because the patch has to parse the
packet structure by itself and it is placed differently from
where the source-code patch modiﬁes the control ﬂow,
i.e., where the error handling is guaranteed to work.
2.5 Ofﬂine Patch Adaptation
KARMA’s ofﬂine component adapts a reference patch
for all supported devices. It ﬁrst identiﬁes the vulnerable
function in a target kernel through structural and seman-
tic matching; then it uses the information from semantic
matching to customize the patch for the target kernel. In
the following, we describe these two steps in detail.
Figure 5: Source-code patch for CVE-2013-1763
ments and other necessary data by using the APIs pro-
vided by KARMA. The last line of the patch installs
itself at the futex_request function with a patch ID
of xca5269db5f4. Next, we use a few examples to
demonstrate how to convert a regular source-code based
patch to a reference patch for KARMA.
CVE-2013-1763: Figure 5 shows the original source
code patch for CVE-2013-1763. Each “+” sign marks
a new line added by the patch. The added lines val-
idate that the protocol family of the received message
(req->sdiag_family) is less than AF_MAX and returns
-EINVAL otherwise. This patch can be easily con-
verted to a reference patch for KARMA. However, since
__sock_diag_rcv_msg does not appear in the kernel’s
symbol table (because it is a static function), KARMA
instead hooks the entry point of its parent function and
screens the arguments there.
CVE-2013-6123:
this is a vulnerability in func-
tion msm_ioctl_server, which reads an untrusted
data structure (u_isp_event) from the user space with
copy_from_user. However, it fails to check that the
queue_index ﬁeld of the input is valid. This vulnera-
bility is ﬁxed by line 10-17 in Fig. 6. To patch this vul-
nerability in KARMA, we cannot hook the entry point
of msm_ioctl_server because the malicious input data
is not available yet. Instead, we should hook the return
point of copy_from_user and ﬁlter the received data.
copy_from_user returns status codes; therefore it can
be hooked by KARMA. If the patch detects a malicious
input, it returns the error code of -EINVAL. This termi-
nates the execution gracefully.
CVE-2016-0802:
this is a buffer overﬂow in the
1258    26th USENIX Security Symposium
USENIX Association
...
dhd_wl_host_event ( dhd , & ifidx ,
1 v o i d dhd_rx_frame (...)
2 {
3
4
5
6
7 +
8
9
10 }
...
skb_mac_header ( skb ) ,
skb - > mac . raw ,
len - 2,
& event , & data ) ;
11 s t a t i c
12 {
13
14 -
15 +
16
17 }
i n t dhd_wl_host_event (...)
...
if ( dngl_host_event ( dhd_pub , pktdata ) ==
BCME_OK ) {
if ( dngl_host_event ( dhd_pub , pktdata ,
pktlen ) == BCME_OK ) {
...
18 i n t dngl_host_event (...)
19 {
20
21 +
22 +
23
24 }
...
if ( datalen > pktlen )
...
return ( BCME_ERROR );
Figure 7: Source-code patch for CVE-2016-0802
2.5.1 Syntactic Matching
Given a target kernel Kt, we ﬁrst identify candidate func-
tions (Ft) in Kt that may contain the same vulnerability
as reference function Fr. However, this task is not as