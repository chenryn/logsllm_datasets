November 3, 2006, A. Juels, R. N. Wright, and S. De Capitani di Vimercati
(Eds.). ACM, 79–88. https://doi.org/10.1145/1180405.1180417
[9] Ivan Damgård and Mads Jurik. 2001. A Generalisation, a Simplification
and Some Applications of Paillier’s Probabilistic Public-Key System. In
Public Key Cryptography, 4th Intl. Workshop on Practice and Theory in
Public Key Cryptography, PKC 2001, Cheju Island, Korea, February 13-15,
2001, Proc. (Lecture Notes in Computer Science), Kwangjo Kim (Ed.),
Vol. 1992. Springer, 119–136. https://doi.org/10.1007/3-540-44586-2_9
[10] Sebastian Faust, Carmit Hazay, and Daniele Venturi. 2018. Outsourced
pattern matching. Int. J. Inf. Sec. 17, 3 (2018), 327–346. https://doi.org/
10.1007/s10207-017-0374-0
[11] Paolo Ferragina and Giovanni Manzini. 2005. Indexing compressed text.
J. ACM 52, 4 (2005), 552–581. https://doi.org/10.1145/1082036.1082039
[12] Paul Flicek et. al. 2000. Ensembl Genome Browser. www.ensembl.org/.
[13] Craig Gentry. 2009. Fully homomorphic encryption using ideal lattices.
In Proc. of the 41st Annual ACM Symposium on Theory of Computing,
STOC 2009, Bethesda, MD, USA, May 31 - June 2, 2009, Michael Mitzen-
macher (Ed.). ACM, 169–178. https://doi.org/10.1145/1536414.1536440
[14] Torbjörn Granlund and the GMP development team. 2012. GNU MP:
The GNU Multiple Precision Arithmetic Library. http://gmplib.org/.
[15] Florian Hahn, Nicolas Loza, and Florian Kerschbaum. 2018. Practical
and Secure Substring Search. In Proc. of the 2018 Intl. Conf. on Manage-
ment of Data, SIGMOD Conf. 2018, Houston, TX, USA, June 10-15, 2018,
Gautam Das, Christopher M. Jermaine, and Philip A. Bernstein (Eds.).
ACM, 163–176. https://doi.org/10.1145/3183713.3183754
[16] Yu Ishimaki, Hiroki Imabayashi, and Hayato Yamana. 2017. Private
Substring Search on Homomorphically Encrypted Data. In 2017 IEEE
Intl. Conf. on Smart Computing, SMARTCOMP 2017, Hong Kong, China,
May 29-31, 2017. IEEE Computer Society, 1–6. https://doi.org/10.1109/
SMARTCOMP.2017.7947038
[17] Ben Kaduk et. al. 2015. OpenSSL – Cryptography and SSL/TLS Toolkit.
https://www.openssl.org.
[18] Iraklis Leontiadis and Ming Li. 2018. Storage Efficient Substring Search-
able Symmetric Encryption. In Proc. of the 6th Intl. Workshop on Security
in Cloud Computing, SCC@AsiaCCS 2018, Incheon, Republic of Korea,
June 04-08, 2018, Aziz Mohaisen and Qian Wang (Eds.). ACM, 3–13.
https://doi.org/10.1145/3201595.3201598
[19] Helger Lipmaa. 2005. An Oblivious Transfer Protocol with Log-
Squared Communication. In Information Security, 8th Intl. Conf., ISC
2005, Singapore, September 20-23, 2005, Proc. (Lecture Notes in Computer
Science), J. Zhou, J. López, R. H. Deng, and F. Bao (Eds.), Vol. 3650.
Springer, 314–328. https://doi.org/10.1007/11556992_23
[20] Nicholas Mainardi. 2019. Privacy Preserving Substring Search Protocol
with Polylogarithmic Communication Cost – Software implentation.
https://dx.doi.org/10.5281/zenodo.3384814.
[21] Carlos Aguilar Melchor, Joris Barrier, Laurent Fousse, and Marc-Olivier
Killijian. 2016. XPIR: Private Information Retrieval for Everyone.
PoPETs 2016, 2 (2016). https://doi.org/10.1515/popets-2016-0010
[22] Tarik Moataz and Erik-Oliver Blass. 2015. Oblivious Substring Search
with Updates. IACR Cryptology ePrint Archive 2015 (2015), 722. http:
//eprint.iacr.org/2015/722
[23] Pascal Paillier. 1999. Public-Key Cryptosystems Based on Composite
Degree Residuosity Classes. In Advances in Cryptology - EUROCRYPT
’99, Intl. Conf. on the Theory and Application of Cryptographic Tech-
niques, Prague, Czech Republic, May 2-6, 1999, Proceeding (Lecture Notes
in Computer Science), Jacques Stern (Ed.), Vol. 1592. Springer, 223–238.
https://doi.org/10.1007/3-540-48910-X_16
[24] Cédric Van Rompay, Refik Molva, and Melek Önen. 2017. A Leakage-
Abuse Attack Against Multi-User Searchable Encryption. PoPETs 2017,
3 (2017), 168. https://doi.org/10.1515/popets-2017-0034
[25] Kana Shimizu, Koji Nuida, and Gunnar Rätsch. 2016. Efficient privacy-
preserving string search and an application in genomics. Bioinformatics
32, 11 (2016). https://doi.org/10.1093/bioinformatics/btw050
[26] Dawn Xiaodong Song, David A. Wagner, and Adrian Perrig. 2000.
Practical Techniques for Searches on Encrypted Data. In 2000 IEEE
Symposium on Security and Privacy, Berkeley, California, USA, May
14-17, 2000. IEEE Computer Society, 44–55. https://doi.org/10.1109/
SECPRI.2000.848445
[27] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher W. Fletcher,
Ling Ren, Xiangyao Yu, and Srinivas Devadas. 2013. Path ORAM: an
extremely simple oblivious RAM protocol. In 2013 ACM SIGSAC Conf.
on Computer and Communications Security, CCS’13, Berlin, Germany,
November 4-8, 2013, Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti
Yung (Eds.). ACM, 299–310. https://doi.org/10.1145/2508859.2516660
[28] Mikhail Strizhov, Zachary Osman, and Indrajit Ray. 2016. Substring
Position Search over Encrypted Cloud Data Supporting Efficient Multi-
User Setup. Future Internet 8, 3 (2016).
https://doi.org/10.3390/
fi8030028
[29] Marc Tiehuis. 2015. libhcs: A partially Homomorphic C library. https:
//github.com/tiehuis/libhcs/tree/master/include/libhcs.
[30] Bing Wang, Wei Song, Wenjing Lou, and Y. Thomas Hou. 2017. Privacy-
preserving pattern matching over encrypted genetic data in cloud
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
computing. In 2017 IEEE Conf. on Computer Communications, INFOCOM
2017, Atlanta, GA, USA, May 1-4, 2017. IEEE, 1–9. https://doi.org/10.
1109/INFOCOM.2017.8057178
A SECURITY PROOF
Theorem 5.3 is proven by showing the existence of a sim-
ulator S which interacts with any semi-honest adversary
A, according to the IdealA,S experiment of Definition 5.2,
to produce transcript for this experiment which is computa-
tionally indistinguishable from the transcript of the RealP,A
experiment, where A interacts with a client through our
PPSS protocol. As the simulator S knows only the leakage
L as defined in Theorem 5.3, the transcript of the IdealA,S
experiment necessarily depends only on the leakage; thus, if
this transcript is computationally indistinguishable from the
one of the RealP,A experiment, then it necessarily means
that no other information than L can be inferred from the
latter transcript, as otherwise this additional information
could be exploited by the adversary to distinguish between
the two experiments. Since the transcript of the RealP,A
experiment corresponds to the information observed and
derived by the adversary in our PPSS protocol, then no other
information than L can be inferred from the adversary in
our PPSS protocol, in turn proving that the protocol leaks
no more information than L to the adversary. For the sake
of clarity, in the following we denote all the variables in-
volved in the IdealA,S experiment with a superscript Id
(e.g., [[D]]Id is the privacy-preserving representation [[D]]
computed by the simulator SD).
Simulator Construction. We now show how to con-
struct the simulator S. Specifically, for a document collection
D of z documents D1, . . . , Dz and a string q, S is realized by
constructing two simulators SD and Sq. The former employs
the leakage LD to build a privacy-preserving representation
[[D]]Id which is computationally indistinguishable from the
privacy-preserving representation [[D]] computed by the
client in our PPSS protocol. The latter simulator employs
both the leakage LD and Lq to build a trapdoor [[q]]Id
,
j
j = 1, . . . , w for each of the w rounds of the Query procedure
for the string q; all these trapdoors must be computation-
ally indistinguishable from the trapdoors constructed by the
client in the w rounds of our PPSS protocol.
i =1(len(Di) + 1), ω),
i =1(len(Di) + 1) is denoted in
the following as n, the simulator constructs two arrays
SAId and CId with, respectively, n + 1 and (n + 1) ·
(|Σ| + 1) elements (we assume that the alphabet Σ for
the documents in D is publicly known); each entry
of these arrays contains a randomly generated string
of ω bits. Lastly, the simulator outputs the privacy-
preserving representation [[D]]Id = (CId, SAId)
• SD. Given the leakage LD = (z
where the first termz
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
b(n + 1)⌉ and tSA = ⌈log
• Sq. Given the leakages LD, Lq = (len(q), b, |OD,q|)
and the public modulus N for the FLAHE Paillier scheme
employed by the client in the RealP,A experiment,
the simulator simulator computes the values tC =
⌈log
b((n + 1) · (|Σ| + 1))⌉.
Then, the simulator constructs m = len(q) trapdoors
[[q]]Id1 , . . . ,[[q]]Id
m as follows. Each trapdoor is an ar-
ray with b · tC elements, where the first b entries are
integers randomly sampled in Z∗
N 2, then the subse-
quent b entries are integers randomly sampled in Z∗
N 3:
in general, the j-th entry contains an integer randomly
sampled in Z∗
. Subsequently, the simulator gen-
N
erates oq = |OD,q| trapdoors [[q]]Id
,
m+oq
where each trapdoor is an array with b · tSA elements
constructed in the same manner as the previous m trap-
doors (i.e., the j-th entry contains an integer randomly
sampled in Z∗
N
m+1, . . . ,[[q]]Id
⌈ j
b
⌈ j
b
⌉+1
⌉+1
).
We now prove that, for any probabilistic polynomial time
adversary A, the output of the RealP,A experiment is com-
putationally indistinguishable from the output of the IdealA,S
experiment when the simulator S we have just constructed is
employed. Specifically, we analyze each step of the two exper-
iments and we show that the adversary cannot distinguish
the simulator from a legitimate client of our PPSS protocol.
In both the experiments, the adversary initially chooses a
document collection D of z documents over a publicly known
alphabet Σ. In the RealP,A experiment, D is sent to the client,
which constructs a privacy-preserving representation [[D]]
by running the Setup procedure of our PPSS protocol; specif-
ically, [[D]] is composed by two cell-wise encrypted arrays
⟨C⟩ and ⟨SA⟩ with, respectively, (n + 1) · (|Σ| + 1) and n + 1
elements. Conversely, in the IdealA,S experiment, the simu-
lator SD obtains the leakage LD and constructs the privacy-
preserving representation [[D]]Id as two arrays CId, SAId
whose size is the same as ⟨C⟩, ⟨SA⟩, respectively. The seman-
tic security of the scheme E employed to encrypt ⟨C⟩ and
⟨SA⟩ in our PPSS protocol guarantees that a ciphertext of ω
bits computed by E.Enc is computationally indistinguishable
from a random bit string of size ω, which implies that the
two privacy-preserving representations [[D]] and [[D]]Id are
computationally indistinguishable too.
After receiving the privacy-preserving representations
[[D]] and [[D]]Id, the adversary chooses a string q1. In the
RealP,A experiment, the string q1 is sent to the client, which
employs the Query procedure of our PPSS protocol to find
all the positions of the occurrences of q1 in D. In each of
the w rounds of the Query procedure, the client employs
the Trapdoor procedure to generate a trapdoor [[q1]]j, j =
1, . . . , w, which corresponds to a trapdoor in the Lipmaa’s
PIR protocol. In the IdealA,S experiment, the simulator Sq1
j
j
j
N l
, obtaining a new random integer in Z∗
N l
receives the leakage Lq1, which is employed to build a trap-
door [[q1]]Id
, j = 1, . . . , w for each of the w rounds. The
semantic security of the FLAHE Paillier scheme guarantees
that a ciphertext computed by the encryption procedure with
length l (i.e., FLAHE.El
) is computationally indistinguishable
pk
from a random integer in Z∗
N l +1, which means that the set
of trapdoors [[q1]]j are computationally indistinguishable
from the set of trapdoors [[q1]]Id
.
Subsequently, in the RealP,A (resp. IdealA,S) experiment,
the trapdoor [[q1]]j (resp. [[q1]]Id
) generated by the client
(resp. Sq1) in each of the w rounds is received by the adver-
sary which employs the Search procedure of Lipmaa’s PIR
protocol to compute a ciphertext [[resj]] (resp. [[resj]]Id).
The semantic security of the FLAHE Paillier scheme guar-
antees that all the intermediate values computed by each
homomorphic operation of the Search procedure in the
RealP,A experiment are computationally indistinguishable
from the corresponding intermediate values in the IdealA,S
experiment. Indeed, in the former experiment, given two
ciphertext c1 and c2 in Z∗
for the FLAHE Paillier scheme,
N l
each homomorphic addition computes cadd = c1 · c2 mod N l,
with cadd being a ciphertext in Z∗
; in the latter experiment,
the homomorphic addition multiplies two random integers
in Z∗
which is
N l
computationally indistinguishable from cadd. Similarly, in
the RealP,A experiment, given a ciphertext c1 ∈ Z∗
and
a ciphertext c2 ∈ Z∗
N l +1, each hybrid homomorphic multipli-
cation computes chmul = cc1
2 mod N l +1, with chmul being a
ciphertext in Z∗
N l +1; In the IdealA,S experiment, each hybrid
homomorphic multiplication computes the exponentiation
between a random integer in Z∗
N l +1 and a random integer in
Z∗
N l +1 which is com-
N l
putationally indistinguishable from chmul. Therefore, as the
Search procedure of Lipmaa’s PIR performs only homomor-
phic operations, we conclude that all values (including the
outcomes [[resj]] and [[resj]]Id) observed by the adversary
throughout this computation in the RealP,A and IdealA,S
experiments are computationally indistinguishable. In con-
clusion, the adversary cannot distinguish an interaction with
a legitimate client in our PPSS protocol from an interaction
with the simulator Sq1 for the first query q1.
We note that the same reasoning allows to prove that all
the trapdoors and the intermediate values observed by the
adversary in the subsequent d − 1 queries in the two ex-
periments are computationally indistinguishable. Indeed, in
each query, the simulator simply needs to construct trap-
doors which looks like generic FLAHE Paillier ciphertexts
as computed by the legitimate client in our PPSS protocol
independently from their corresponding plaintext value, as
the semantic security of the scheme hides any information
about the encrypted information stored in these trapdoors.
, obtaining a new random integer in Z∗
N l