sion (WRITE_EXTERNAL_STORAGE) has been granted, the other
dangerous permissions will be granted without user permit-
ting because they belong to the same permission group, that
is, android.permission-group.UNDEFINED.
Discussion. Obviously, a hard-coded  mapping table is more secure. However, Android
allows app developers to put custom permissions into system
groups, which forces the system to manage dynamic group
information in the mix of different types of permissions.
According to the commit logs [17], [8] in the source code of
Android OS, the UNDEFINED group was introduced as a dummy
group to prevent apps querying the grouping information
(through PackageManager). The OS developers commented,
"the grouping was never meant to be authoritative, but this
was not documented."
Impact. DS#2 and its exploit have been conﬁrmed by Google
with rating High severity (AndroidID-153879813), and a
CVE ID has been assigned: CVE-2020-0418.
C. DS#3: Custom Permission Elevating
As illustrated in Figure 6, during the Android OS ini-
tialization (device booting), PackageManagerService (PMS
for short) will be constructed, which is used for man-
aging all package-related operations, such as installation
and uninstallation. Then, PMS reads packages.xml and
runtime-permissions.xml to get the stored permission dec-
laration information and grant states.
After that, PMS scans APKs located in system folders and
then adds the parsed permissions to an internal structure. Note
that, if the current owner of a permission is not the system,
this permission will be overridden. However, we ﬁnd that:
DS#3: When Android OS overrides a custom permission
(changing the owner), the granting status of this permission
is not revoked, further resulting in permission elevating.
That is to say, if an app has been granted with a custom
permission with the same name as a system permission,
this granted custom permission will be elevated to system
permission after permission overriding.
Attack Case. In general, an app cannot deﬁne a custom
permission with the same name as an existing permission.
However, if we consider the OS upgrading operation, this
scenario becomes possible. For instance, on an Android 9
device, the adversary creates an app app-ds3, which deﬁnes
Fig. 6: Custom permission elevating.
and requests a custom permission ACTIVITY_RECOGNITION, as
follows.
1 
4
5 
Listing 6: Deﬁne and request ACTIVITY_RECOGNITION.
Note that, the ACTIVITY_RECOGNITION permission is a new
dangerous system permission introduced in Android 10. How-
ever, on devices running Android 9, ACTIVITY_RECOGNITION
is only treated as a normal custom permission.
After the user installs app-ds3, she carries out OTA OS
update, and later the device reboots with running Android 10.
After ﬁnishing OS initialization, app-ds3 has been granted
with the ACTIVITY_RECOGNITION permission (dangerous sys-
tem permission) automatically, say privilege escalation.
Discussion. Our further investigation shows that DS#3 was
introduced when Google ﬁxed the Pileup ﬂaw discovered
by Xing et al. [45]. An exploit scenario of Pileup is that,
on Android 2.3, a third-party app deﬁnes a normal custom
permission with the same name as a signature system per-
mission, which was added in Android 4.0. After OS upgrading,
this app becomes the owner of this new system permission,
and the protection provided by this permission also becomes
ineffective.
Google’s ﬁx to the Pileup ﬂaw was that, during the OS
initialization, the OS will override all permissions declared by
81
Fig. 7: Inconsistent permission deﬁnition.
the system, say taking the ownership [4]. However, in this
process, the OS still keeps the previous granting status, which
results in DS#3.
Impact. DS#3 and its exploit have been conﬁrmed by Google
with rating High severity (AndroidID-154505240), and a
CVE ID has been assigned: CVE-2021-0306.
D. DS#4: Inconsistent Permission Deﬁnition
An app installation operation may also update an existing
custom permission deﬁned by itself. During this process, if
the protection level is changed from normal or signature to
dangerous, the system will keep its old protection level. Such
a design is to block the permission upgrade attack (see upper
Figure 1). However, we ﬁnd that:
DS#4: At this moment, the permission deﬁnition held by the
system is different from the permission deﬁnition provided
by the owner app, say inconsistent permission deﬁnition.
If there is any logic of refreshing the permission granting
status based on the source package in the system, a privilege
escalation issue may occur. As illustrated in Figure 7, during
the OS initialization, PMS also needs to scan APKs located in
app folders. Later, the existing custom permissions’ protection
levels will be updated according to the package information
extracted from the scanned APKs. That is, the permission
deﬁnition recorded by the system will be updated. After the
OS refreshes all permission granting status, the corresponding
apps will be granted with the updated custom permissions.
Note that, different from DS#3, since the exploit of DS#4
does not need a new permission introduced in Android 10,
an operation leading OS initialization is enough (e.g., device
reboot), and the OS upgrading operation is not necessary.
ConstructPackageManagerServicepackages.xmlScan APKs located in system foldersPermission definitionsPermission grant statesAdd parsed permissions to the internal structurePermission owner is system?Permission owner is system?Change permission owner to system  No  Yes OS Initializationruntime-permissions.xmlUpdate all permissionsConstructPackageManagerServicepackages.xmlScan APKs located in app foldersPermission definitionsPermission grant statesAdd parsed permissions to the internal structureOS Initializationruntime-permissions.xmlUpdate all permissionsChange protection level based on scanned APKsAttack Case. The adversary creates an app app-ds4 that de-
ﬁnes and requests a normal custom permission com.test.cp.
There is also an updated version of app-ds4 which changes
the protection level of com.test.cp to dangerous and puts
com.test.cp into the PHONE group. It also requests the
CALL_PHONE permission. The user installs app-ds4 and then
updates it. After that, she reboots her phone. When the re-
boot is complete, app-ds4 obtains com.test.cp (dangerous
custom permission) automatically. Then it can obtain the
CALL_PHONE permission without user consent because both
com.test.cp and CALL_PHONE belong to the PHONE group.
Discussion. Our further investigation shows that DS#4 was
introduced when Google ﬁxed the vulnerability discovered
by Tuncay et al. [41]. Google’s ﬁx only considered how to
break the attack ﬂow with the minimum code modiﬁcations
but ignored the consistency issue [5].
Impact. DS#4 and its exploit have been conﬁrmed by Google
with rating High severity (AndroidID-168319670), and a
CVE ID has been assigned: CVE-2021-0317.
VII. SECURE CUSTOM PERMISSIONS
This section proposes some improvements to mitigate the
current security risks and discusses general guidelines for cus-
tom permissions. Also, due to the consideration of backward
compatibility, we will not introduce heavy changes to the
current permission framework.
A. Mitigation
To each design shortcoming, we propose a minimum modi-
ﬁcation (Google preferred ﬁx), which can immediately prevent
the corresponding attacks.
To DS#1, the adversary re-deﬁnes a dangling custom per-
mission and changes the original permission attributes. The
direct ﬁx is that, when the system removes a custom permis-
sion, its grants for apps should be revoked.
To DS#2, the adversary exploits the inconsistent permission-
group mapping information in AndroidManifest.xml and
PLATFORM_PERMISSIONS. Therefore, the direct ﬁx is to remove
the current inconsistent mapping data (the UNDEFINED group).
To DS#3, the adversary can elevate a custom permission to
a system permission. The direct ﬁx is that, when the system
takes the ownership of a custom permission, its grants for apps
should be revoked.
To DS#4, the adversary exploits the inconsistent permission
deﬁnitions in the system and the owner app. The direct ﬁx is
that, during the permission update, its grants for apps should
be revoked.
B. General Security Guidelines
Though the above solutions can ﬁx the discovered design
shortcomings, it is difﬁcult to avoid that custom permission
related ﬂaws will be introduced again in the future versions of
Android OS. Here we discuss some general design guidelines
to secure custom permissions.
82
they are against
The previous research proposed to isolate system permis-
sions from custom permissions, including (1) introducing dis-
tinct representations and not allowing custom permissions to
share groups with system permissions, and (2) introducing an
internal naming convention to prevent naming collisions [41].
Such solutions surely could avoid many security risks. How-
ever,
the design philosophy of Android
permission management (i.e., do not distinguish system and
custom permissions, see Section II-B). Also, these solutions
will
introduce heavy logic and code changes to the OS.
Most importantly, they do not essentially ﬁx the defects, like
eliminating inconsistencies mentioned in DS#2 and DS#4.
Instead, we propose the following two guidelines without
differentiating permission types and avoiding logical errors.
Guideline#1: If the deﬁnition of a permission is changed,
the corresponding grants for apps should be revoked.
The changes contain permission owner, grouping, and pro-
tection level. This guideline prevents the risk of TOCTTOU
(time-of-check to time-of-use) issues. That is, the user only
conﬁrms the grant of the original permission, not the updated
permission. To both DS#1 and DS#3, the permission owner is
changed without revoking grants. This guideline also can cover
DS#4 and the two attack cases (changed protection level and
permission owner) discovered by Tuncay et al. [41].
Guideline#2: The deﬁnition of a permission held by the
system should be consistent with the permission owner’s
declaration.
The system obtains the permission deﬁnition through pars-
ing the owner app’s manifest ﬁle. The subsequent permission
management should always rely on the deﬁnition obtained at
this stage. Any inconsistent permission deﬁnition (changing
protection level or group) may trigger permission upgrading.
The permission-group mapping is inconsistent in DS#2, and
the protection level is inconsistent in DS#4.
VIII. DISCUSSION
In this work, we proposed CUPERFUZZER to detect the vul-
nerabilities in Android custom permissions and elaborated the
ﬁndings of our experiments. Here we discuss some limitations
of our work.
Attacks in Practice. Some attacks described in Section VI
need user interactions more than once. For instance, if an
adversary wants to exploit DS#1, she needs to prepare two
malicious apps and induce a victim user to re-install an app
after uninstalling it. Such an attack workﬂow may be difﬁcult
to execute in practice. It is likely that, after the user uninstalls
a buggy app, she may not install it again. Therefore, it would
be better to conduct a user study to demonstrate the feasibility
of the proposed attacks relying on user interactions.
Test Case Generation. CUPERFUZZER needs to generate
massive test cases for fuzzing. In our design, CUPERFUZZER
constructs a test case randomly, including random seed se-
lection and operation sequence construction. To improve the
effectiveness of vulnerability discovery, we could deploy some
feedback mechanism to generate more interesting test cases.
That is, the current case execution result will affect how to
generate the next test case. However, a feedback mechanism
may result in generating too many similar test cases which
are duplicate from the view of critical paths. Thus, it needs to
trade off the diversity against the effectiveness of test cases.
IX. RELATED WORK
The Android permission mechanism has been studied by
plenty of previous work. However, most research focused
on system permissions, and rare work noticed the security
implications of custom permissions. In this section, we review
the related work on Android permissions.
Custom Permissions. The ﬁrst custom permission related ﬂaw
was described in a blog [39]. It noticed the installation order
issue of custom permissions, say "ﬁrst one in wins" strategy.
Nevertheless, Google did not accept this issue and mentioned
"this is the way permissions work" [14].
Xing et al. [45] discovered the Pileup ﬂaw, which achieves
privilege escalation through OS upgrading. One case is to
exploit a custom permission to hijack a system permission.
Nevertheless, their research focused on the Android OS updat-
ing mechanism rather than the custom permissions. Tuncay et
al. [41] identiﬁed two classes of vulnerabilities in custom per-
missions that result from mixing system and custom permis-
sions. In order to address these shortcomings, they proposed
a new modular design called Cusper. According to our study,
such a design is against the design philosophy of Android
permission management. More recently, Gamba et al. [37]
extracted and analyzed the custom permissions, both declared
and requested, by pre-installed apps on Android devices.
However, they focused on the aspect of service integration
and commercial partnerships, not the security implications.
Unlike the above research, in this paper, we systematically
study the security implications of Android custom permissions,
not just individual bugs. Also, all previous ﬂaws related to
custom permissions were discovered manually. Considering
the lack of an automatic tool to detect the design ﬂaws lying
in the Android permission framework, we developed CUPER-
FUZZER and utilized it to discover several new vulnerabilities
successfully. We also propose feasible ﬁx solutions and design
guidelines.
Permission Models. Various previous work studied the design
of the permission-based security model. Barrera et al. [27]
proposed a self-organizing map-based methodology to ana-
lyze the permission model of the early version of Android
OS. Wei et al. [43] studied the evolution of the Android
ecosystem (platform and apps) to understand the security
implications of the permission model. Fragkaki et al. [36]
developed a framework for formally analyzing Android-style
permission systems. Backes et al. [25] studied the internals of
the Android application framework and provided a high-level
classiﬁcation of its protected resources. Based on Android 6.0,
Zhauniarovich et al. [49] analyzed the design of the permission
system, especially the introduction of runtime permissions.
More recently, Tuncay et al. [42] identiﬁed false transparency
attacks in the runtime permission model, which achieves the
phishing-based privilege escalation on runtime permissions.
To improve the current permission model, Dawoud et
al. [31] proposed DroidCap to achieve per-process permission
management, which removes Android’s UID-based ambient
authority. Raval et al. [40] proposed Dalf, a framework for
extensible permissions plugins that provides both ﬂexibility
and isolation. The possibilities of ﬂexible and ﬁne-grained
permission management also were studied by ipShield [29],
SemaDroid [47], SweetDroid [30], and Dr. Android [38].
Permission Usage. From the aspect of app developers, some
researchers focused on studying whether permissions were
used correctly in Android apps. Felt et al. [33] developed a
tool – Stowaway to detect over-privilege in apps, and they
found about one-third are over-privileged. Au et al. [24]
built PScout to extract the permission speciﬁcation from the
Android OS source code using static analysis, which provided
meta-data supports for the permission usage analysis. Xu et
al. [46] designed and implemented Permlyzer, a framework
for automatically analyzing the use of permissions in Android
apps. Fang et al. [32] analyzed the potential side effects of
permission revocation in Android apps.
Usable Security. From the view of user interaction, previous
work has shown that most users do not pay attention to
permissions during app installation [34]. Bonné et al. [28]
focused on the usability of runtime permissions, and their
study suggests the context provided via runtime permissions
appears to be helping users make decisions. The study of
Wijesekera et al. [44] shows the visibility of the requesting app
and the frequency at which requests occur are two signiﬁcant
factors in designing a runtime consent platform.
X. CONCLUSION
In this paper, we systematically study the security im-
plications of Android custom permissions. Speciﬁcally, we
designed CUPERFUZZER, a black-box fuzzer, to detect custom
permission related privilege escalation issues automatically.
During the real-world experiments, it discovered 2,384 attack