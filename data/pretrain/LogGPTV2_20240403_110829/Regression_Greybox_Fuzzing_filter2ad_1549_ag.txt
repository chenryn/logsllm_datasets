●
Figure 7: Intersecting Sets (UpsetR). Number of bugs found
jointly by different sets of fuzzers. Not showing empty inter-
sections. The two bugs in second position are the additional
UaF and double-free bugs in LibXML2.
Between theAFLChurn variants NoChurn and NoAge, there is
no clear winner. However, there are certain cases where we
observed a substantial performance difference from either one
of them. This also motivates the combination of both heuristics.
Figure 7 summarizes the bug finding results for the deduplicated
bugs as a matrix of intersecting sets. 15 regression bugs are found
by each and every fuzzer. AFLChurn is the only fuzzer finding the
regression in systemd. NoAge and NoChurn together, but neither
AFL nor AFLChurn find one bug in Grok. Only AFLChurn and
NoChurn find the additional double-free and use-after-free bugs in
libxml2.
5.2 RQ3. Churn and Age of Crash Locations
Another way of evaluating our main hypothesis is by asking: Are
crash locations changed more recently or more often? In order to
answer this question, we generated the stack traces for all the bugs
in the OSSFuzz bug reports for our subjects. A stack trace is a chain
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2178Crash Location (CL0)
Stack above CL0 (CL1)
Stack above CL1 (CL2)
CL3
CL4
aspell
file
grok
htslib
libgit2
1
1
10
100
1
10
1
10
100
1
10
100
libhtp
libxml2
openssl
openvswitch
picotls
1
10
100
1
10
100
1
10
100
1
10
100
1
10
100
systemd
unbound
usrsctp
yara
zstd
1
10
100
1
100
10
10
How often a BB was changed (#changes)
100
10
1
1
100
1
10
100
s
e
m
i
t
X
n
a
h
t
e
r
o
m
d
e
g
n
a
h
c
s
B
B
f
o
n
o
i
t
r
o
p
o
r
P
60%
40%
20%
0%
60%
40%
20%
0%
60%
40%
20%
0%
harfbuzz
htslib
1
10
100
1
10
100
muparser
ndpi−1
1
10
1
10
100
ndpi−2
unicorn
1
10
100
1
10
aspell
file
grok
htslib
libgit2
harfbuzz
htslib
0
0
1 0 0 0
2 0 0 0
3 0 0 0
0
3 0 0 0
6 0 0 0
9 0 0 0
libhtp
libxml2
1 0 0 0
2 0 0 0
3 0 0 0
0
2 0 0 0
4 0 0 0
6 0 0 0
0
0
5 0 0
1 0 0 0
1 5 0 0
openssl
2 0 0 0
4 0 0 0
6 0 0 0
0
0
1 0 0 0
2 0 0 0
0
1 0 0 0
2 0 0 0
3 0 0 0
openvswitch
picotls
1 0 0 0
2 0 0 0
3 0 0 0
4 0 0 0
0
4 0 0
8 0 0
1 2 0 0
systemd
unbound
usrsctp
yara
zstd
100%
75%
50%
25%
0%
o
g
a
,
s
y
a
d
X
n
a
h
t
s
s
e
l
d
e
g
n
a
h
c
s
B
B
f
o
n
o
i
t
r
o
p
o
r
P
100%
75%
50%
25%
0%
100%
75%
50%
25%
0%
0
1 0 0 0
2 0 0 0
3 0 0 0
4 0 0 0
5 0 0 0
0
1 0 0 0
2 0 0 0
muparser
ndpi−1
0
2 5 0
5 0 0
7 5 0
1 0 0 0
0
5 0 0
1 0 0 0
1 5 0 0
ndpi−2
unicorn
0
1 0 0 0
2 0 0 0
3 0 0 0
4 0 0 0
0
1 0 0 0
4 0 0 0
3 0 0 0
2 0 0 0
2 0 0 0
How recently a BB was changed (#days)
1 0 0 0
2 0 0 0
3 0 0 0
1 0 0 0
0
0
3 0 0 0
4 0 0 0
0
5 0 0
1 0 0 0
1 5 0 0
0
5 0 0
1 0 0 0
1 5 0 0
0
5 0 0
1 0 0 0
1 5 0 0
60%
40%
20%
0%
s
e
m
i
t
X
n
a
h
t
e
r
o
m
d
e
g
n
a
h
c
s
B
B
f
o
n
o
i
t
r
o
p
o
r
P
o
g
a
,
s
y
a
d
X
n
a
h
t
s
s
e
l
d
e
g
n
a
h
c
s
B
B
f
o
n
o
i
t
r
o
p
o
r
P
60%
40%
20%
0%
60%
40%
20%
0%
100%
75%
50%
25%
0%
100%
75%
50%
25%
0%
100%
75%
50%
25%
0%
(a) Regression Bugs
(b) Non-regressions Bugs
Figure 8: Cumulative distribution of age and churn values across the basic blocks of each program corresponding to a selected
regression or non-regression bug. For instance, 50% of BBs in libgit2 have been changed at least once and less than 4.6 years
(1700 days), ago. We also show the age and churn values of the crash location of the corresponding (non-) regression. Apart
from the crash location (CL0), the top five locations in the stack trace (CL1-4) appear in code that is less than a week old.
of function calls that starts with the main entry point (e.g., main)
and ends with the exact statement where the program crashes.
In addition to the regression bugs in Table 1, we generated the
stack traces for six more bugs in OSSFuzz that are not regressions.
This allows us to determine if there is a different answer for (preex-
isting) bugs that were not introduced by changes (non-regressions).
We used our AFLChurn LLVM compiler pass to compute age
and churn values for all basic blocks in a subject. We used OSSFuzz
to download the crashing input from the corresponding bug report
and FuzzBench to reproduce the bug. We implemented a simple
script to compute age and churn values for the resulting stack trace
(which is made available).
Figure 8 shows the distribution of age and churn values across
the basic blocks of each subject. On the top, we can see the propor-
tion of basic blocks that have been changed more than X times,
where X increases with the x-axis (log-scale).
Our first observation is that the majority of basic blocks is never
changed. On the other hand, for almost all subjects there is a very
small proportion of code that has been changed one hundred times
Session 7B: Fuzzing CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2179or more. This motivated our technique to amplify the signal of the
few basic blocks that have a high churn value (Section 3.1).
of the number of changes as amplifier functions. In the following,
we present a simple evaluation of various amplifier functions.
Many elements in the stack trace live in source code that has
changed more often than most other code. In many cases, one
or two elements in the stack trace live in code that has never
changed. However, while statistically speaking more unlikely,
apart from three subjects (aspell, systemd, unbound) for all
subjects at least one member of the stack trace lives in code
that has been changed at least once; in five cases more than ten
times. There is no obvious difference between (a) regressions
and (b) non-regressions.
On the bottom, we can see the proportion of basic blocks that
have been changed less than X days ago, where X increases with
the x-axis. Our first observation is that many projects are very old,
between eight and sixteen years. The distribution of age values is
quite irregular with identifiable productivity bursts. For instance,
for LibHTP about half of the basic blocks have been changed or
added six years prior, but have not been changed since.
The top elements in the stack trace live in source code that has
changed more recently than most other code.
We find that particularly the crash location (where the program
execution aborts) lives in code that has changed less than a week
ago. There are only a few exceptions, like aspell, unbound, and
unicorn, where all members of the stack trace live in old code that
has changed many years back. There is no obvious difference in
the results for (a) regressions and (b) non-regressions.
5.3 AFLGo versus AFLChurn
As we explain in Section 4.3, for technical results we could get
experimental results for AFLGo only for three subjects. While these
results do not facilitate an empirical evaluation, the produce the
results here as a case study. We run experiment locally and repeat
24 hour fuzzing campaign ten (10) times.
Figure 9 and Figure 10 show the results in terms of bug finding
efficiency. AFLChurn finds the three bugs in libgit2 faster than
AFLGo. For libhtp, only AFLChurn finds the bug in all ten trials.
On average, AFLChurn finds the libhtp bug one hour faster than
AFLGo.
Mean TTE
#Crashing Trials
Subject AFLGo AFLChurn Factor AFLGo AFLChurn Factor
1.0
1.1
-
0.67
2h 21m 0.72
-
15s
3h 12m
-
libgit2
libhtp
htslib
10
10
-
10
9
-
10s
-
libgit2_11007
●
●
●
●
●
●
●
●
●
●
●
●
●
libgit2_11382*
●
●
●
●
●●
●
●
●
● ●●
●
●
●
●
●
● ●
●
●
●●
libgit2_11194
●
●
●
●
●
●
●
●
●
●
●
●
libhtp_17198*
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
● ●
●
●
●
●
●
●
●
●●
●