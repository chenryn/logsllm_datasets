Print Activity
Task 1
Task 2
Figure 1: Shared state in memory: Instances of WPS Of-
ﬁce performing different tasks in the same process.
by default. Further, a default activity can be instantiated
multiple times in one or more concurrent tasks [3].
Figure 1 shows two tasks. In Task 1, the user opens
a secret PDF (e.g., a contract) with WPS Ofﬁce, which
loads it in its PDF Activity, and shares it with the Ever-
note app. In Task 2, the user opens a non-conﬁdential
PDF (e.g., a published paper) in another instance of
WPS Ofﬁce’s PDF Activity. Further, in Task 2, the user
chooses to print the PDF, which is then sent to WPS Of-
ﬁce’s internal Print Activity. As seen in Figure 1, multi-
ple activities of the WPS Ofﬁce app as well as multiple in-
stances of the PDF Activity run in the same process, and
may share data in memory (e.g., via global variables).
As the two instances of the PDF Activity are instan-
tiated with data of different secrecy requirements (i.e.,
secret.pdf and public.pdf), they run in different secrecy
contexts. Enforcing the DIFC policy on the process due
to the sensitive nature of Task 1 would also unjustiﬁ-
ably restrict the non-sensitive Task 2. A naive solution
of forcing every component to start in a separate process
may break components; e.g., Print Activity may try to
access a global variable initialized by the PDF Activity,
and may crash if the PDF Activity is not in the same pro-
cess. To summarize, component instances in various se-
crecy contexts often share state in process memory, mak-
ing process-level enforcement challenging.
2. Background components: As described in Sec-
tion 2.4, service and content provider components have
only one active instance, which is shared among all of an
application’s instances, and may also communicate with
other applications. As a result, various secrecy contexts
may mix in a single background component instance.
If ﬂoating labels (described in Section 2.3) are applied,
then the background component may accumulate the la-
bels of all the secrecy contexts it communicates with,
and then propagate its new label back to the components
connected to it. This results in a label explosion, where
the entire system acquires a large, restrictive label that
cannot be declassiﬁed by any single security principal.
Note that background components may run in the shared
application process by default. Therefore, restarting a
background component’s process for each new call is in-
feasible, as it would crash the other components (e.g., a
foreground activity) running in that process.
3.
Internal and External Application storage: An-
droid provides each application with its own internal
(i.e., private) storage shared amongst all of its runtime
instances, irrespective of the secrecy context. For ex-
ample, both the sensitive and non-sensitive instances of
WPS Ofﬁce may access the same user settings in the
application’s private directory. For availability from all
secrecy contexts, storage access enforcement uses ﬂoat-
ing labels. The propagation of sensitive secrecy labels
through shared application ﬁles (i.e., shared state on stor-
age) may cause label explosion. The risk and impact of
label explosion is higher on the external storage (i.e., the
SD card) shared by all applications.
4. Internet-driven environment: Android applications
are often connected to the Internet. In such an environ-
ment with frequent network export, explicit declassiﬁ-
cation by the data owner is inefﬁcient. Delegation of
the declassiﬁcation privilege to allow export without the
owner’s intervention would bloat the application’s TCB.
Additionally, existing declassiﬁcation mechanisms de-
scribed in Section 2.3 make the policy decision based
on the identity of the security principal performing the
export. On Android, such mechanisms would limit the
user to using a small subset of applications for data ex-
port (i.e., out of the 2 million applications on Google
Play [39]), which would be detrimental to adoption of
DIFC on Android.
3.1 Prior DIFC Proposals for Android
We discuss three prior DIFC proposals for Android,
namely Aquifer [28], Jia et al. [19] and Maxoid [46], all
of which are OS-level DIFC systems. Our objective is
to understand the design choices made by these systems,
with respect to the challenges described previously.
1. Aquifer: Our prior work, Aquifer [28], provides pro-
tection against accidental data disclosure, by tracking the
ﬂow of data through applications, and enforcing the de-
classiﬁcation policy for network export.
For seamless data sharing between applications,
Aquifer uses the ﬂoating labels described in Section 2.3.
To limit label explosion, Aquifer does not label back-
ground components, and hence can only prevent acci-
dental data disclosure. On the other hand, Aquifer la-
bels storage, but does not claim to mitigate label explo-
sion on storage. Further, to prevent different secrecy re-
quirements for data in the memory of a single process,
Aquifer disables Android’s multi-tasking and restarts the
process of the existing instance when the application is
called from another secrecy context. Finally, Aquifer’s
declassiﬁcation policy allows the data owner to explic-
itly specify the security principal that may export data,
1122  25th USENIX Security Symposium 
USENIX Association
or a condition on the call chain for implicit export.
2. Jia et al.: The DIFC system by Jia et al. [19] also
uses ﬂoating labels to support general-purpose applica-
tions, but supports strict secrecy policies (i.e., relative to
Aquifer) that may restrict data sharing among applica-
tions if needed.
Contrary to Aquifer, the system propagates labels to
background components, providing stronger protection
against malicious data exﬁltration. At the same time, the
system makes no claims of controlling label explosion
via background components or storage. The system uses
Flume’s capabilities [21] for declassiﬁcation. This work
also acknowledges the challenge of multi-tasking along
with DIFC enforcement, and disallows multi-tasking by
blocking new calls to an application until all of its com-
ponents voluntarily exit. Since Android components do
not exit by themselves like conventional OS programs,
such blocking could potentially lead to deadlocks.
3. Maxoid: Xu and Witchel [46] provide an alternate ap-
proach to ﬁle system labeling to prevent label explosion
in Maxoid, by using ﬁle system polyinstantiation [22] to
separate differently labeled data on disk.
Maxiod addresses new calls to existing labeled in-
stances in a manner similar to Aquifer’s; i.e., by restart-
ing the instance. Additionally, Maxoid prevents access to
background components from labeled instances, thereby
preventing label explosion, although at the cost of back-
wards compatibility. On the other hand, Maxoid consid-
ers overt data ﬂows through Binder IPC as declassiﬁca-
tion, unlike the system by Jia et al.
that mediates such
communication. Finally, Maxoid modiﬁes system con-
tent providers (e.g., Contacts) to use a SQL proxy, in
order to extend its label separation into system content
providers. As a result, Maxoid’s storage separation is
unavailable for use by content providers in unmodiﬁed
third party applications.
Takeaways: Prior approaches demonstrate the possibil-
ity of DIFC on Android, and make convincing arguments
in favor of using ﬂoating labels, mainly for backwards
compatibility with Android’s unpredictable data ﬂows.
At the same time, we observe that in prior systems it
becomes necessary to relax either security or backwards
compatibility in order to use ﬂoating labels on Android
(e.g., with background components). Additionally, prior
approaches recognize the need to separate different se-
crecy contexts in process memory, but the proposed so-
lutions disable Android’s default multi-tasking.2 Finally,
in systems that aim to address label explosion on storage,
only separating the shared state on storage without ad-
dressing the shared state in memory may be insufﬁcient
to support unmodiﬁed applications.
2Killing existing processes or blocking can result in the killing of
unrelated components sharing the process, or deadlocks, respectively.
3.2 Design Goals
Our objective is to design DIFC enforcement that pro-
vides security, and is backwards compatible with unmod-
iﬁed applications. Our design goals are as follows:
G1 Separation of shared state in memory. DIFC en-
forcement must ensure that data from different
secrecy contexts is always separated in memory,
preferably in the memory of different processes.
Process-level enforcement can then be used to me-
diate ﬂows between differently labeled data.
G2 Separation of shared state on storage. DIFC en-
forcement must ensure that data from different se-
crecy contexts is separate on persistent storage. For
mediation by the OS, the separation must be at the
level of OS objects (e.g., ﬁles, blocks).
G3 Transparency. A naive implementation of goals G1
and G2 would affect the availability of components
and storage. Our system must be transparent, i.e.,
applications that do not use the DIFC system must
be able to operate oblivious to the enforcement.
G4 Secure and practical declassiﬁcation for network
export. A DIFC system on Android should provide
a declassiﬁcation primitive that is both feasible (i.e.,
does not hinder the use of applications) and secure.
4 Weir
In this paper, we propose Weir, a practical and secure
DIFC system for Android. Weir’s design is guided by the
security and backwards compatibility goals described in
Section 3.2. We now brieﬂy describe the speciﬁc proper-
ties expected from our design, followed by an overview
of Weir and design details.
Design Properties: Taking a lesson from prior work in
Section 3.1, our system must allow seamless data shar-
ing between applications for backwards compatibility
with Android’s application model. Data ﬂows must be
tracked using implicit label propagation (i.e., ﬂoating la-
bels), while mitigating the risk of label explosion. More
speciﬁcally, our system must not deny data access, unless
an application explicitly changes its label and fails a la-
bel check. Since our goal is to prevent unauthorized data
export, network access may be denied if an application
tries to export sensitive data to the network in violation
of the declassiﬁcation requirements of the data owner.
Finally, our system must mediate all overt data ﬂows, but
covert channels existing in Android are not the targets of
our system (discussed further in Section 9).
4.1 Overview
In Weir, applications deﬁne the policy for their data by
creating their own security classes. Weir labels ﬁles (as
USENIX Association  
25th USENIX Security Symposium  1123
P
{LP}
P
{LP}
P
{LP}
X
Q
{LQ}
Q
{LQ} --> {LPLQ}
Q
{LQ}
Q1
{} --> {LP}
World A
Explicit labels
World B
Floating labels
World C
Floating labels with
Polyinstantiation
Figure 2: Overview of ﬂoating labels w/ polyinstantia-
tion relative to explicit and ﬂoating labels.
objects) and processes (as subjects), granting the ker-
nel complete mediation over all data ﬂows among sub-
jects and objects. As Weir’s contributions are in its
policy-agnostic mechanism, we use the generic terminol-
ogy from Section 2.3 in policy-related discussions. Sec-
tion 5.1 describes our implementation’s policy model.
Weir uses ﬂoating labels (described in Section 2.3),
as explicit labels are hard to assign a priori in An-
droid, where data ﬂows are often user-directed and un-
predictable. However, naive (i.e., context-insensitive)
ﬂoating label propagation can cause certain components
to acquire more labels due to involvement in multiple
secrecy contexts, and eventually become unusable. We
propose polyinstantiation to make ﬂoating labels con-
text sensitive, and hence separate the shared state from
different secrecy contexts in memory (G1) and on stor-
age (G2). Our approach is in principal similar to context
sensitive inter-procedural analysis that adds precision by
considering the calling context when analyzing the tar-
get of a function call (e.g., summary functions and call
strings [36], k-CFA [37], and CFL-reachability [31]). To
our knowledge, context sensitivity has not been explored
in the scenario investigated in this paper. Further, the ap-
proach of secure multi-execution [11] also uses multiple
executions of the program, but is fundamentally different
in many aspects, as we describe in Section 10.
We describe polyinstantiation relative to explicit and
ﬂoating labels with the example scenario in Figure 2,
where an instance of component P with label {LP} tries
to send a message to an instance of component Q with a
label {LQ}, and where {LP} 6= {LQ}. In World A where
only explicit labels are allowed, the message would be
denied as Q would not be able to explicitly change its la-
bel to {LP} without a priori knowledge of P0s intention
to send a message. In World B with ﬂoating labels, the
ﬂow would be automatically allowed, with Q0s new label
implicitly set to a join of the two labels. While World B
allows seamless communication, it does not prevent the
two secrecy contexts (i.e., {LP} and {LQ}) from mixing,
leading to the challenges we explored in Section 3. In
World C, we use polyinstantiation along with ﬂoating la-
bels, and a new instance of Q denoted as Q1 is created
in the caller’s context (i.e. with the caller’s label {LP}),
separate from the original instance of Q with label {LQ}.
Thus, our approach allows the call to take place, without
the mixing of secrecy contexts. The “lazy” aspect of our
approach (not represented in the ﬁgure) is that we would
reuse a previously created instance of Q, denoted Qpast,
if its label matched the caller’s label (i.e., {LP}). Addi-
tionally, while the new instance has an empty label (i.e.,
{}) as the base (compile-time) label in our prototype, our
model can be adapted to support a different base label.
Weir uses lazy polyinstantiation for all indirect inter-
component calls (e.g., starting an activity, querying
a content provider) (described in Section 2.4). Weir
polyinstantiates processes, Android components and the
ﬁle system, creating new instances of each for different
secrecy contexts. Floating labels allow legacy apps to
integrate into Weir without modiﬁcation for making or
receiving calls, while polyinstantiation adds context sen-
sitivity. Weir’s use of ﬂoating labels supports process-
level labeling along with application multi-tasking (G3),
a more practical solution than the alternatives of killing
existing instances [28, 46] or indeﬁnite blocking [19].
We now describe Weir’s polyinstantiation of memory,
followed by storage. We then discuss how Weir supports
explicit label changes. Finally, we describe how Weir’s
domain declassiﬁcation satisﬁes goal G4.
4.2 Polyinstantiation of Memory
To satisfy goal G1, Weir must ensure that no two com-
ponent instances with mismatching labels execute in the
same process. At the same time, Weir must make com-
ponents available if the underlying Android enforcement
(i.e., permission framework) allows. Therefore, our ap-
proach polyinstantiates both components and processes
to make them available in multiple secrecy contexts.
For backwards compatibility, our approach refrains
from affecting developer conﬁgurations (e.g., by forc-
ing the “multi-process” manifest attribute).
Instead,
Weir polyinstantiates components within the applica-
tion’s own context. Speciﬁcally, Weir upholds the pro-
cess assignments made for components by the developer,
through the “android:process” manifest attribute (i.e., the