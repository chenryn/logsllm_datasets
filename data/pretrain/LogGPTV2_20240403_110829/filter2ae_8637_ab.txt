     retval = prepare_binprm(bprm);
     if (retval module))
       continue;
      read_unlock(&binfmt_lock);
      retval = fmt->load_binary(bprm);  // 检查二进制文件
      read_lock(&binfmt_lock);
      put_binfmt(fmt);
      if (bprm->point_of_no_return || (retval != -ENOEXEC)) {
       read_unlock(&binfmt_lock);
       return retval;
      }
     }
     read_unlock(&binfmt_lock);
     if (need_retry) {
      if (printable(bprm->buf[0]) && printable(bprm->buf[1]) &&
          printable(bprm->buf[2]) && printable(bprm->buf[3]))  // 检查是否是打印字符
       return retval;
      if (request_module("binfmt-%04x", *(ushort *)(bprm->buf + 2)) next指向的msg_msgseg数据部分写入我们自定义程序的字符串路径，即完成任意写。
篡改前：modprobe_path指向"/sbin/modprobe"
篡改后：modprobe_path指向"/tmp/w"
**提权流程：**
1.堆风水，先耗尽kmalloc-4096的空闲块，然后布局8 PAGE的内存，也是通过ringbuf申请大量的8 PAGE大小的内存块；
2.第一次堆喷，释放掉偶数位下标的8 PAGE的ringbuf，然后用大量的pg_vec去堆喷kmalloc-4096大小的slab；
3.第二次堆喷，触发first free释放掉2个kmalloc-4096的pg_vec，然后先创建一个线程A，用2个大于PAGE_SIZE小于2
PAGE_SIZE的msg_msgA去堆喷占位刚释放的两个kmalloc-4096空闲块，此时load_msg()在kmalloc完成后，会因为在copy_from_user的时候，触发fuse文件系统的读函数，通过读pipe数据而使线程A阻塞。
4.第三次堆喷，然后再创建第二线程B，继续释放刚才被first free的2个kmalloc-4096的pg_vec内存，触发double
free，再用1个大于PAGE_SIZE小于2
PAGE_SIZE的msg_msgB去堆喷这两块刚被回收的2个kmalloc-4096内存块，用msg_msgsegB去篡改第二次堆喷中msg_msgA->next指针为modprobe-8，并通过pipe发送信号给第三步中阻塞的线程A，fuse
read接受到信号后完成对msg_msgsegA内容的篡改，并返回，这样线程A完成对modprobe_path指向字符串内容的篡改为我们自定义的"/tmp/w"。
5.最后执行一个非法的二进制文件，便能触发我们自定义"/tmp/w"的执行，从而完成提权。
### 2.3.利用方式二：USMA(用户态映射攻击)
> **USMA简介** ：USMA（User-Space-Mmaping-Attack）又称作是 **用户态映射攻击**
> ，是360漏洞研究院的安全研究员提出的利用手法。
>
> **提权思路** ：利用packet漏洞模块的packet_mmap函数能将漏洞对象pg_vec映射到用户空间的这个特性，再利用double
> free的漏洞原理，将漏洞对象pg_vec篡改为内核代码 **__sys_setresuid** 内核函数的地址，这样就能把
> **__sys_setresuid**
> 内核函数的代码映射到用户空间，通过硬编码改变代码逻辑，即可让普通用户进程调用setresuid函数绕过权限检查，修改cred提升权限。
    /kernel/sys.c
    /*
     * This function implements a generic ability to update ruid, euid,
     * and suid.  This allows you to implement the 4.4 compatible seteuid().
     */
    long __sys_setresuid(uid_t ruid, uid_t euid, uid_t suid)
    {
     struct user_namespace *ns = current_user_ns();
     const struct cred *old;
     struct cred *new;
     int retval;
     kuid_t kruid, keuid, ksuid;
     kruid = make_kuid(ns, ruid);
     keuid = make_kuid(ns, euid);
     ksuid = make_kuid(ns, suid);
     if ((ruid != (uid_t) -1) && !uid_valid(kruid))
      return -EINVAL;
     if ((euid != (uid_t) -1) && !uid_valid(keuid))
      return -EINVAL;
     if ((suid != (uid_t) -1) && !uid_valid(ksuid))
      return -EINVAL;
     new = prepare_creds();
     if (!new)
      return -ENOMEM;
     old = current_cred();
     retval = -EPERM;
     //通过硬编码修改，让普通用户调用setresuid()函数不会进入if判断，从而修改cred提权
     if (!ns_capable_setid(old->user_ns, CAP_SETUID)) {
      if (ruid != (uid_t) -1        && !uid_eq(kruid, old->uid) &&
          !uid_eq(kruid, old->euid) && !uid_eq(kruid, old->suid))
       goto error;
      if (euid != (uid_t) -1        && !uid_eq(keuid, old->uid) &&
          !uid_eq(keuid, old->euid) && !uid_eq(keuid, old->suid))
       goto error;
      if (suid != (uid_t) -1        && !uid_eq(ksuid, old->uid) &&
          !uid_eq(ksuid, old->euid) && !uid_eq(ksuid, old->suid))
       goto error;
     }
     if (ruid != (uid_t) -1) {
      new->uid = kruid;
      if (!uid_eq(kruid, old->uid)) {
       retval = set_user(new);
       if (retval euid = keuid;
     if (suid != (uid_t) -1)
      new->suid = ksuid;
     new->fsuid = new->euid;
     retval = security_task_fix_setuid(new, old, LSM_SETID_RES);
     if (retval sk;
     struct packet_sock *po = pkt_sk(sk);
     unsigned long size, expected_size;
     struct packet_ring_buffer *rb;
     unsigned long start;
     int err = -EINVAL;
     int i;
     if (vma->vm_pgoff)
      return -EINVAL;
     mutex_lock(&po->pg_vec_lock);
     expected_size = 0;
     for (rb = &po->rx_ring; rb tx_ring; rb++) {
      if (rb->pg_vec) {
     // 计算当前套接字对应ringbuf所有大小的和，间接等于ring buf的block_nr * block_size。
       expected_size += rb->pg_vec_len  // 等于block_nr
          * rb->pg_vec_pages  // 等于block_size/PAGE_SIZE
          * PAGE_SIZE;
      }
     }
     if (expected_size == 0)
      goto out;
     size = vma->vm_end - vma->vm_start;  // 用户层映射内存大小
     if (size != expected_size)
      goto out;
     start = vma->vm_start;    // 用户层映射内存起始地址
     for (rb = &po->rx_ring; rb tx_ring; rb++) { //目前就一个ring buf
      if (rb->pg_vec == NULL)
       continue;
      for (i = 0; i pg_vec_len; i++) { // 循环block_nr次
       struct page *page;
       void *kaddr = rb->pg_vec[i].buffer; // kaddr地址基本都是页对齐的
       int pg_num;
       // 循环block_size/PAGE_SIZE次
       for (pg_num = 0; pg_num pg_vec_pages; pg_num++) {
        page = pgv_to_page(kaddr);
        // 映射的主要函数，通过该函数将pg_vec数组里buffer映射到用户层
        err = vm_insert_page(vma, start, page); 
        if (unlikely(err))
         goto out;
        start += PAGE_SIZE;
        kaddr += PAGE_SIZE;
       }
      }
     }
     atomic_inc(&po->mapped);
     vma->vm_ops = &packet_mmap_ops;
     err = 0;
    out:
     mutex_unlock(&po->pg_vec_lock);
     return err;
    }
正如[360的USMA](https://vul.360.net/archives/391)的描述，在vm_insert_page()函数里调用了validate_page_before_insert()函数做页检查，validate_page_before_insert()函数对映射的pg_vec数组里的buffer所属page的类型进行了判断，过滤了匿名页、属于slab对象的页、属于buddy系统的页、属于交换内存的页、属于分页管理中页表的页、属于内存屏障的页，以上页类型都不能映射，恰好我们要映射的是内核代码段，是可以映射到用户态的。
    /mm/memory.c
    static int validate_page_before_insert(struct page *page)
    {
     if (PageAnon(page) || PageSlab(page) || page_has_type(page))
      return -EINVAL;
     flush_dcache_page(page);
     return 0;
    }
**硬编码篡改** ： __sys_setresuid函数被映射到用户态后，读取一个PAGE_SIZE大小的内核内存
考虑到需要篡改call ns_capable_setid调用之后的判断，对test al,al jnz short
loc_FFFFFFFF810BE1C4的汇编作一番篡改，最简单的方法就是将jnz/jne改为jz/je，由机器码，0x75改为0x74，由于映射的内存范围很大，所以我将0x84
0xC0 0x75 0x59作为特征进行搜索定位。
这段机器码由0x84 0xC0 0x75 0x59变为0x84 0xC0 0x74 0x59，jne变为je。
篡改前：
篡改后：
**提权**
：经过上述对内核函数__sys_setresuid的篡改，再通过调用setresuid(0,0,0);即可将普通用户进程提权至root用户权限。
## 3.总结
上述两种提权方式，经过实现与调试，篡改modprobe_path提权和USMA(用户态映射攻击)两者都是通过任意写完成的提权，不用一堆gadget，相比ROP的提权方式而言，适配效率更高，限制更小，让任意写提权相对显得更加"高大上"。篡改modprobe_path提权相比于USMA利用，前者相较而言更加通用。
* * *