dictionary attacks,” US Patent Application, vol. 60, no. 283,996, 2001.
[28] H. Krawczyk, M. Bellare, and R. Canetti, “HMAC:Keyed-Hashing for
Message Authentication,” RFC, vol. 2104, pp. 1–11, 1997.
[29] B. A. LaMacchia, K. E. Lauter, and A. Mityagin, “Stronger Security of
Authenticated Key Exchange,” in Provable Security, First International
Conference, ProvSec 2007, Proceedings, 2007, pp. 1–16.
[30] S. Laur and K. Nyberg, “Efﬁcient mutual data authentication using man-
ually authenticated strings,” in International Conference on Cryptology
and Network Security. Springer, 2006, pp. 90–107.
[31] A. Y. Lindell, “Attacks on the Pairing Protocol of Bluetooth v2.1,”
2008.
[32] Y. Lindell, “Comparison-Based Key Exchange and the Security of the
Numeric Comparison Mode in Bluetooth v2.1,” IACR Cryptology ePrint
Archive, p. 13, 2009.
[33] S. Maruyama, S. Wakabayashi, and T. Mori, “Tap ’n Ghost: A Compi-
lation of Novel Attack Techniques against Smartphone Touchscreens,”
2019 IEEE Symposium on Security and Privacy (SP), pp. 620–637,
2019.
[34] N.
I. of Standards and Technology, “Digital signature standard
(shs),” Available at https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.
180-4.pdf (2020/06/01), NIST, Tech. Rep., JulyS 2013.
[35] ——, “Secure hash standard (shs),” Available at https://nvlpubs.nist.gov/
nistpubs/FIPS/NIST.FIPS.180-4.pdf (2020/06/01), NIST, Tech. Rep.,
August 2015.
[36]
J. Padgette et al., “Guide to Bluetooth Security,” Available at https://
doi.org/10.6028/NIST.SP.800-121r2 (2019/08/22), National Institute of
Standards and Technology, Tech. Rep., May 2017.
[37] T. Peyrin and S. Vaudenay, “The pairing problem with user interaction,”
in IFIP International Information Security Conference. Springer, 2005,
pp. 251–265.
[38] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version
1.3,” RFC, vol. 8446, pp. 1–160, 2018.
[39] Y. Shaked and A. Wool, “Cracking the bluetooth pin,” in Proceedings of
the 3rd international conference on Mobile systems, applications, and
services, 2005, pp. 39–50.
[40] D.-Z. Sun, Y. Mu, and W. Susilo, “Man-in-the-middle attacks on Secure
Simple Pairing in Bluetooth standard V5.0 and its countermeasure,”
Personal and Ubiquitous Computing, vol. 22, no. 1, pp. 55–67, 2018.
[41] D. Sun and L. Sun, “On Secure Simple Pairing in Bluetooth Standard
v5.0-Part I: Authenticated Link Key Security and Its Home Automation
and Entertainment Applications,” Sensors, vol. 19, no. 5, p. 1158, 2019.
[42] S. Vaudenay, “Secure communications over insecure channels based
on short authenticated strings,” in Annual International Cryptology
Conference. Springer, 2005, pp. 309–326.
APPENDIX A
SECURITY ASSUMPTIONS
We present relevant security properties of hash functions
and hash-based message authentication codes that will prove
consequential to our analysis of Passkey Entry. We also intro-
duce relevant Difﬁe-Hellman (DH) problems to our analysis.
Second-Preimage Resistance:
Deﬁnition A.1. Let H be a hash function and A a PPT
adversary. We deﬁne the Second-Preimage Resistance (sec-pre)
of H as such: given msg ∈ {0, 1}∗ and hash value such that
H(msg) = hash, A cannot ﬁnd a second-preimage, msg(cid:48) ∈
{0, 1}∗, such that msg(cid:48)
(cid:54)= msg and H(msg(cid:48)) = hash with
more than negligible probability. We denote A’s advantage in
breaking sec-pre of H as Advsec-pre
H,A .
SUF-CMA of a MAC: In Figure 6 we display the security
game for strong unforgeability under chosen message attack
(SUF-CMA) in algorithmic notation. This experiment models
an attacker’s ability to break the unforgeability of a MAC by
forging a new message or a new tag of a known message-tag
pair that veriﬁes correctly.
EXPSUF-CMA
MAC,A (λ):
1: K $← Kgn(1λ)
2: win ← 0, S ← ∅
3: AMAC(·),MAC.Vfy(·)()
4: return win
MAC(msg):
1: tag ← MAC(K, msg)
2: S ← S ∪ {(msg, tag)}
3: return tag
Fig. 6. Security experiment for strong unforgeability under chosen message
attack (SUF-CMA) of a message authentication code algorithm MAC =
(Kgn, MAC, Vfy) and adversary A.
MAC.Vfy(msg, tag):
1: v ← Vfy(K, msg, tag)
2: if (v = 1)∧((msg, tag) /∈ S) then
3:
4:
5: end if
6: return v
win ← 1
return win from exp.
adversary A against a message authentication code MAC to
be:
AdvSUF-CMA
MAC,A (λ) := Pr[EXPSUF-CMA
MAC,A (λ) = 1] .
Deﬁnition A.3. We say that some message authentication
code MAC is SUF-CMA-secure if the advantage for any
PPT adversary A interacting according to the experiment
EXPSUF-CMA
MAC,A (λ) is upper bounded by some negligible function
negl(λ):
AdvSUF-CMA
MAC,A (λ) ≤ negl(λ) .
EC-DDH Assumption:
Deﬁnition A.4. Let E be an elliptic curve over the ﬁeld Fq with
generator point P of order n. Let A be a PPT adversary. We
state the Elliptic Curve Decisional DH (EC-DDH) assumption
as such: given access to E, P , and knowledge of aP and bP
for a, b $← Fq and a, b < n, A cannot distinguish abP from cP ,
for c $← Fq and c < n, with more than negligible probability.
to write A’s advantage in breaking the
We use AdvEC-DDH
EC-DDH assumption.
A
EC-sym-ssPRF-ODH Assumption: The PRF-ODH was
originally introduced in [26], and later modiﬁed [17], [19].
Other PRF-ODH assumption variants were analyzed in [11],
with the sym-ssPRF-ODH assumption of [19] being a variant
thereof. We present to the sym-ssPRF-ODH assumption of [19]
below, but for Elliptic Curve (EC) Difﬁe–Hellman vs. standard
Difﬁe–Hellman.
Deﬁnition A.5. Let E be an elliptic curve over the ﬁeld Fq
with generator point P of order n. Let PRFλ : E ×{0, 1}∗ →
{0, 1}λ be a psuedorandom function with keys in E, input
strings in {0, 1}∗, and output strings in {0, 1}λ. Let A be a
PPT adversary. Elliptic Curve symmetric generic single-single
PRF Oracle DH assumption (EC-sym-ssPRF-ODH) is deﬁned
as follows:
1) The challenger samples a, b $← Fq uniformly at random
with a, b < n, computes aP and bP , and provides
(E, P, aP, bP ) to A.
2) Eventually, A issues the challenge query x∗ ← {0, 1}∗.
3) The challenger samples b $← {0, 1} uniformly at random
and sets y0 ← PRFλ(abP, x) if b = 0, and y1 ← {0, 1}λ
otherwise. The challenger returns yb to A.
4) A may issue a single query to the oracles, EC-ODHa and
EC-ODHb, handled as follows:
• EC-ODHa(S, x): Challenger returns ⊥ if S /∈ E
or if (S, x) = (bP, x∗), otherwise it returns y ←
PRFλ(aS, x).
• EC-ODHb(T, x): Challenger returns ⊥ if T /∈ E
or if (T, x) = (aP, x∗), otherwise it returns y ←
PRFλ(bT, x).
5) Eventually, A outputs the bit guess b, and wins the
experiment if b = b.
deﬁne
We
adversarial
EC-sym-ssPRF-ODH experiment as
the
advantage
in
the
Deﬁnition A.2. We deﬁne the adversarial advantage against
the SUF-CMA experiment described in Figure 6 for a PPT
AdvEC-sym-ssPRF-ODH
PRFλ,A
(λ) := Pr[b = b] − 1
2
,
15
and we say that the EC-sym-ssPRF-ODH assumption holds if
AdvEC-sym-ssPRF-ODH
PRFλ,A
(λ) ≤ negl(λ) .
ASSOCIATION BETWEEN USER COMPROMISE TYPES
APPENDIX B
We begin by presenting Theorem B.2, which will prove
useful as a framework in future proofs within the compromised
user setting.
Lemma B.1. Let X and Y be non-empty subsets of
{iu, ru, ui, ur} such that X ⊆ Y with labels x and y
respectively. If a session oracle πU
is CompUser[x]-fresh, then
j
it is also CompUser[y]-fresh.
Proof: Let Π be a cyborg key exchange protocol, and
let A be a PPT adversary against the CYBORG-CompUser[x]
j , is CompUser[x]-
security of Π. If some user session oracle, πU
fresh then we must have that A never issued a single query that
broke CompUser[xi]-freshness simultaneously for all xi ∈ X
over the course of the CYBORG-CompUser[x] security exper-
iment by Deﬁnition III.12. This means that for every query is-
sued by A, πU
j must have met the deﬁnition for CompUser[xi]-
fresh for some xi ∈ X. Since X ⊆ Y , then we also have
j must have met the deﬁnition for CompUser[yi]-fresh
that πU
for some yi ∈ Y for every query issued by A. Thus, A
never issued a single query that broke CompUser[yi]-freshness
simultaneously for all yi ∈ Y and we have that πU
is also
CompUser[y]-fresh.
Theorem B.2. Let X and Y be non-empty subsets of
{iu, ru, ui, ur} such that X ⊆ Y with labels x and y
respectively, and let Π be a cyborg key exchange protocol.
If Π is not CYBORG-CompUser[x]-secure,
is not
CYBORG-CompUser[y]-secure.
then it
j
Proof: Let Π be a cyborg key exchange protocol, and let
A be a PPT adversary that breaks the CYBORG-CompUser[x]
security of Π. We then construct a second adversary, B,
against the CYBORG-CompUser[y] security experiment. The
challenger starts the experiment and forwards the protocol
ﬂows of Π to A and uses A’s responses. By the success of
A, Lemma B.1, and Deﬁnition III.12, we have CompUser[y]
freshness and the success of B. Therefore we have that
CYBORG-CompUser[y]
Adv
Π,B,ηp,ηs
CYBORG-CompUser[x]
Π,A,ηp,ηs
(λ) ≤ Adv
(λ) .
APPENDIX C
SHM PASSKEY ENTRY PROOFS
We restate Theorem VI.1 and provide a proof. The proofs
of Theorem VI.2–Theorem VI.3 follow similarly; due to space
constraints these are left to the full version.
Using Theorem B.2, we advance analysis incrementally
introducing more allowable combinations of user compromise
until we reach an environment where the protocol breaks. At
such a point, all subsequent deﬁnitions of the compromised
user setting where the break persists can then be addressed as
a corollary.
A. SHM Initiator-Generated Passkey Proofs
Theorem (VI.1). SHM Initiator-Generated Passkey Entry is
CYBORG-UncUser-secure under the EC-sym-ssPRF-ODH
and EC-DDH assumptions,
the sec-pre of H, and the
SUF-CMA security of HMAC.
Proof: The proof of this theorem involves a series of
game hops between an adversarial PPT algorithm A and the
challenger. We denote the adversarial advantage of a speciﬁc
game as Advi, for the i-th game hop.
Game 0: This game is equivalent to the original secu-
rity experiment:
Adv0 = AdvCYBORG-UncUser
PE-IG,A,ηp,ηs
(λ) ,
where λ is the security parameter, ηp is a bound on the number
of participants, and ηs is a bound on the number of sessions
a participant can run.
Game 1: This game is equivalent to the previous except
we raise the event abort, end the experiment, and output zero
if there ever exists two session oracles that generate the same
ephemeral key, SK, in Phase 1. If session keys ever repeat,
then A could execute a StateReveal query on the second
session to recover SK and compute DHKey. We have that:
Adv1 ≥ Adv0 − (ηpηs)2
2µ
.
where µ is the length of SK.
Game 2: This game is equivalent to the previous except
we raise the event abort, end the experiment, and output zero
if there ever exists a nonce collision in the experiment. This
prevents trivial guesses of passkey bits and lets us assume all
nonces are generated fresh. There are 20 nonces generated in
each session, therefore, we have that:
Adv2 ≥ Adv1 − 400(ηpηs)2
2λ
.
Game 3: This game is equivalent
to the previous
security experiment except we raise the event abort, end
the experiment, and output zero if a passkey is ever reused.
Since the passkey is inherently revealed during the completion
of the Passkey Entry protocol, re-use of this value would allow
A to break auth or key-ind with probability 1. Since only one
passkey is generated each session we have that:
Adv3 ≥ Adv2 − (ηpηs)2
2|r|
where |r| is the length of the passkey r.
,
Game 4: This game is equivalent to the previous secu-
rity experiment except we guess the session oracles executing
the protocol, the test session πA
t , and abort
if A does not try to win against this guessed pair. Thus,
s and its partner πB
Adv4 ≥
1
(ηpηs)2 · Adv3 .
We then continue by case dependency on if A attempts to
win by breaking correct, auth, or key-ind.
Adv4 = Advcorrect
4
16
+ Advauth
4 + Advkey-ind
4
.
a) Advantage against correct: Since session oracles
with matching session identiﬁers are guaranteed to accept by
the correctness of Passkey Entry, we have that:
Advcorrect
4
= 0 .
4
b) Advantage against auth:
Game 5: We continue with Advauth
that πA
s
remains fresh, we will abort
j , are no longer UncUser-fresh. If πU
j
. Since we have
the requirement
the
experiment if A issues a StateReveal, KeyReveal, ShowUser,
s or the partnered user
or ControlUser queries such that πA
session, πU
is also
t , we abort if A issues a StateReveal(πB
partnered with πB
t )
s (cid:54)= accept. We raise the event abort, end the
query while πA
experiment, and output zero if A succeeds in replacing P Kb.
s to accept
maliciously, A must guess all |r| bits of the passkey r, allowing