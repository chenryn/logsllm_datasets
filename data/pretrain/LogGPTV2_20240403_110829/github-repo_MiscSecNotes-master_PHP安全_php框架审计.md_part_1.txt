原文 by xiaoL-PKAV
认识一些主流的开发框架与现在程序设计理念，包含了一些WEB设计上的趋势与概念。另外以我自己的角度去说明一下怎么去看一个PHP程序，方法适合于以上开源框架和一些公司内部开发的框架（只要能看到源码）。  
## 框架的选择
ThinkPHP V3.2  
CodeIgniter V2.2.2  
Laravel V5.1  
选择以上三个框架也是以为这三个框架算是比较有代表性的  
ThinkPHP（TP）在国内很受欢迎，特别是小公司。  
CodeIgniter（CI）是传统且很流行的框架，并且也是很成熟的框架，据我说知sina的大多数地方站都是这个框架写的。  
Laravel是一个充满设计感的框架，应用了目前PHP上的所有新技术，并且借鉴了大量java与python的框架设计结构，也是目前调查的最流行的的Laravel框架（国内外）  
## 认识框架
依次排开：Laravel-> CodeIgniter(CI)->ThinkPHP(TP)  
![frame](../pictures/frame1.png)  
中间的CI并未包含composer.json这个文件，这是PHP的包管理配置文件，在CI的3.0+版本中同样加入了PHP的包管理，真的是方便了大多数程序员。  
这样的目录结构很明显，一眼就能看出来。  
## 框架的基本设计模式
基本的设计模式就是MVC设计模式。  
![frame](../pictures/frame2.png)  
注意：多层级的分层模式为HMVC模式。HMVC就是把客户端应用程序分解为有层次的父子关系的MVC。  
![frame](../pictures/frame3.png) 
## MVC对应的文件位置
看一个cms程序首先就是找控制器代码在哪个位置，之后就是模型文件的位置，视图文件最后，不过我真的在使用框架开发的程序中发现了模型控制代码而找到漏洞  
控制器  
Laravel-> CodeIgniter(CI)->ThinkPHP(TP)  
![frame](../pictures/frame4.png)  
模型  
Laravel-> CodeIgniter(CI)->ThinkPHP(TP)  
![frame](../pictures/frame5.png)  
数据库连接文件  
TP：（通用2.0|3.0）  
(Application)\(Home)\Conf\config.php  
//(Application) 默认为Application，保不齐修改，可以直接查看index.php  
![frame](../pictures/frame6.png)  
//(home) 项目目录，因项目而异！  
```
'DB_TYPE' => 'mysql', // 数据库类型
'DB_HOST' => 'localhost', // 服务器地址
'DB_NAME' => 'chopperproxyl', // 数据库名
'DB_USER' => 'root', // 用户名
'DB_PWD' => 'root', // 密码
'DB_PORT' => 3306, // 端口
'DB_PREFIX' => 'xl_', // 数据库表前缀
```
CI:（通用2.0|3.0） 
(application)\config\database.php    
//一般是固定形式application，保不齐修改一样可以到index.php里面查看项目命名。    
![frame](../pictures/frame7.png)    
Laravel：（5.0|4.0的目录少一个app）    
这个特殊一些，在代码目录下有一个.env文件，里面存在项目的一些配置，可以在这里设置数据库连接信息。（当然可以不）    
![frame](../pictures/frame8.png)    
另外可以直接写在文件中：   
config\database.php文件    
![frame](../pictures/frame9.png)    
//定义默认的数据库类型    
![frame](../pictures/frame10.png)    
备注：具体的配置可能是这样两种类型，使用env中定义，或者写入文件。    
如果配置文件中同时存在上图中的两套配置，说明系统可能使用了多数据库。    
这是几个框架最基本的东西了，下面把其中的关于安全的部分以及自己的一部分见解写出来，会挺有意思的。    
## SQL操作模型
在PHP开发过程中，一般都会使用两种技术。   
一：  
Active  
Record（ORM）  
ORM技术：Object-Relational  
Mapping，把关系数据库的表结构映射到对象上。  
例如  
ThinkPHP中：  
![frame](../pictures/frame11.png)   
CI中的：  
![frame](../pictures/frame12.png)   
二：查询构造器方式  
定义一个抽象数据库类，包含常用的各种方式。  
例如：在laravel中的  
![frame](../pictures/frame13.png)   
注意：这两种方式的区别简单说就是需不需要自己去顶一个model文件。    
## 可能存在的SQL注入问题：  
1、 由于业务的复杂性导致SQL语句有时候很变态，几乎每种框架都支持使用原生SQL语句。  
CI：  
![frame](../pictures/frame14.png)  
TP：  
![frame](../pictures/frame15.png)  
Laravel：  
![frame](../pictures/frame16.png)  
注意：凡是这些方式中带入的参数未经过过滤，底层的解析都是不会进行注入处理的，都有可能造成注入。  
2、 错误的安全函数用法（预编译）  
TP官方方法：  
如果使用3.1以上版本的话，使用字符串条件的时候，建议配合预处理机制，确保更加安全，例如：  
```
$Model-&gt;where("id=%d and
username='%s' and xx='%f'",array($id,$username,$xx))-&gt;select();
```
或者使用：  
```
$Model-&gt;where("id=%d and
username='%s' and xx='%f'",$id,$username,$xx)-&gt;select()
```
底层实现原理：获取函数输入参数，所有参数经过一次addslashes，然后使用vsprintf格式化字符串。  
问题：如果在数字字段带入%s，且没有引号，一样能注入。  
3、 where子查询中key字段可控  
CI：  
控制器代码  
![frame](../pictures/frame17.png)  
模型代码：  
![frame](../pictures/frame18.png)  
针对查询数组中的value字段是会做处理的，但是针对key字段并不会。  
访问查看：  
![frame](../pictures/frame19.png)  
Laravel：  
同样的Laravel这个框架也存在这个问题。  
![frame](../pictures/frame20.png)  
其中$type可控一样可以造成注入。  
![frame](../pictures/frame21.png)  
备注：Thinkphp这种框架就没有，它自己写了解析where字句的方式，虽然在这点上很安全，可是历史上出事最多的就是它了。  
## URL路由
一般看一个CMS就是要去找URL对应的代码是哪些，这样才有办法进行审计。  
WEB开发过程中有一个概念是URL语义化。  
传统的URL  
![frame](../pictures/frame22.png)  
https://g.wen.lu/search?newwindow=1&site=&source=hp&q=URL+%E8%AF%AD%E4%B9%89%E5%8C%96&btnG=Google+%E6%90%9C%E7%B4%A2&gws_rd=cr&ei=Jli4VeX_Bciy0gSNjZvgDA  