那么在前期抽出2-4周做安全设计也可以接受，但在互联网交付节奏下，可能一周到一
个月就要发布版本，你可能没有足够的时间去思考安全这件事。对于SDL会拖慢整个发布
节奏这个问题上，安全团队去推动也会直面公司管理层和研发线的挑战。不过当你有经验
丰富的安全人员和自动化工具支持时，SDL在时间上是可以大大缩短的。
2.历史问题
99%的甲方安全团队的工作都是以教火方式开始，SDL从来都不是安全建设第一个会
想到的事情，而且业内心照不宣的一个原因是，“事前用不上力，偏事后风格的安全建设”
---
## Page 50
38理论篇
贯穿于大多数安全团队的主线。之所以如此，原因是第一有火必救，有的团队救火上瘾，
有的则能抽身转向系统性建设；第二想在事前用力，需要自己足够强大，能摆平研发，不
够强大就会变成庸人自扰，自讨没趣，还不如回避
3.业务模式
大多数平台级互联网公司的开发以Web为主，超大型互联网公司才会进入底层架构造
轮子的阶段，面对于以Web产品为主的安全建设，第一是事后修补的成本比较低，屡试不
爽；第二是部分产品的生命周期不长，这两点一定程度上会让很多后加人安全行业的新同
学认为“教火”=“安全建设”。但是在甲方待久了的人一定会发现，哪怕是Web，只要系
统比较大，层层嵌套和不同子系统间的接口调用，会使得某些安全问题的修补成为疑难病
症，可能就是设计之初没有考虑安全，致使问题不能得到根治。时间一久，技术债越积越
多，大家最后一致默认这个间题没法解决。
4.SDL的门槛
其实SDL是有门槛的，而且还不低。最重要有两点：第一点是安全专家少，很多安全
工作者懂攻防但未必懂开发，懂漏洞但未必懂设计，所以现实往往是很多安全团队能指导
研发部门修复漏洞，但可能没意识到其实缺少指导安全设计的积累，因为安全设计是一件
比漏洞修复门槛更高的事。看业内很多技术不错的安全研究者，写的文章，往往前半篇漏
洞分析很给力，但到了安全建议环节好像就觉得少了点什么。第二点是工具支持少，静态
代码扫描、动态Fuzz等，工欲善其事必先利其器，Facebook宣称其最好的程序员是投人
到工具开发的，面对于国内很多安全团队而言，最好的人都不会用在工具开发上，而是奋
斗在攻防第一线做教火队长。稍微好一点的情况是这帮人投入在做安全机制建设上，面业
务部门也不会来帮助安全团队开发安全工具。这还跟公司整体上是否重视自动化测试有关，
如果公司在测试领域的实践没有做到很前沿，那么安全的黑白盒测试也不会注重工具化建
设，代码覆盖率和路径深度等更加不会有人去关注了。实际上不一定要在这个场景下自己
去造轮子，用商业工具是不错的选择
3.7.3因地制宜的SDL实践
1.重度的场景
对于公司内研发的偏底层的大型软件，选代周期较长，对架构设计要求比较全面，后
---
## Page 51
第3章申方安全建设方法论39
期改动成本大，如果安全团队人手够的话，这种场景应该尽量在事前切入，在立项设计阶
段就应该进行安全设计和威胁建模等工作。相比在事后贴狗皮膏药，这种事前的时间投人
是值得的，门楼主要还是人
对于较大软件的“大版本”，包括每个产品初始版本，还比如标杆产品的1.0到2.0类
似这种里程碑式的版本发布，修改和增加了很多功能点，甚至修改了底层的通信协议，这
种也需要较完整的SDL，当然这种版本跳跃有时候只是对外的一种营销手段，不一定是技
术上的大修改，这个就要看实际情况了。
2.轻度的场景
对于架构简单、开发周期短、交付时间要求比较紧的情况，显然完整的SDL就太重度
了，这个时候，攻防驱动修改就足以解决问题。
其他的诸如小版本发布，技术上没有大的修改，也没必要去跑全量SDL，否则就太教
条和僵化了。
3.7.4SDL在互联网企业的发展
目前SDL在大部分不太差钱的互联网企业属于形式上都有，但落地的部分会比较租
糙。通常只有一两个环节。最主要的瓶领还是人和工具的缺失。以前互联网企业只生产
Web，攻防驱动修改得以应付，但是现在大型的互联网企业不再只生产Web，而是会自己
生产诸如分布式数据库、浏览器、手机操作系统这样的大型软件，单纯的攻防驱动修改已
经日渐乏力，没有足够的安全设计能力将无法应对未来的威胁。因此推测以后的安全行业
中，设计方面的人才会严重缺失，大部分甲方安全团队仍然游离在设计的大门之外，只有
一些大型厂商正在借研究之名来做一些改进安全设计的工作，期待这些大型厂商们能带一
带团队，给这个行业培养一些生力军。
SDL除了最早基于传统瀑布模型的版本，以及为DevOps优化的版本，实际上在实践
阶段还可以优化成极速发布的版本，或者干脆不追求SDL面从其他的维度来弥补SDL不健
全的问题，其实现的本质是原来的SDL对研发流程的修改有点像“阻塞式IO模型”，面现
在可以通过工具和技术手段使其变成“异步1O模型”，从更高维度补贴SDL的思路在这里
不再展开，后续会在笔者博客上专题分享。
---
## Page 52
40理论篇
参考资料
微软 SDL 白 皮 书 :https://www.microsoft.com/zh-cn/download/details.aspx?id=12379
3.8
STRIDE威胁建模
STRIDE是微软开发的用于威胁建模的工具，或者是说一套方法论吧，它把外部威胁分
成6个维度来考察系统设计时存在的风险点，这6个维度首字母的缩写就是STRIDE，分别
为：Spoofing（假冒）、Tampering（纂改）、Repudiation（否认）、Information Disclosure（信
息泄漏）DenialofService（拒绝服务）和Elevationof Privilege（权限提升），如表3-1所示。
表3-1STRIDE威胁建模
属性
威助
定文
例子
认证
Spoofing (般W)
冒充某人或某物
假肾 billg、 micosof.com或, md.
dII
完整性
Tampering (郭改)
修改数据和代码
修改一个DLL，或一个局城网
的封包
Repudiation (否认)
宣称未做过某个行为
“我没有发送email”“我没有
不可抵赖性
修改文件”“我肯定没有访问那个
网站”
机密性
Information Disclosure ( f信
暴露信息给未经授权的
允许某人阅读Windows源代
息泄露）
访问者
码：将客户列表发布在网站上
Denial of Service（拒绝服务）
使对服务对用户拒绝访
发送数据包使目标系统CPU
可用性
问或降级
满负荷或发送恶意代码使目标服
务前溃
Elevation of Privlege (权 限
未经授权获取权限
远程用户执行任意代码，普通
授权
提升）
用户可以执行管理员私有的系统
指令
STIRDE如何使用？先画出数据流关系图（DFD）用图形方式表示系统，DFD使用一组
标准符号，其中包含四个元素：数据流、数据存储、进程和交互方、对于威胁建模，另外
增加了一个元素，即信任边界。数据流表示通过网络连接、命名管道、消息队列、RPC通
道等移动的数据。数据存储表示文本、文件、关系型数据库、非结构化数据等。进程指的
是计算机运行的计算或程序。然后对每一个节点元素和过程进行分析判断是否存在上述6
种威胁，并制定对应的风险缓解措施。例如图3-3所示的情况。
---
## Page 53
第3章甲方安全建设方法论41
销售团队
系统列表
②
售001
分析过程
报告生成过程
销售NNW
管理器
客户
信任边界
服务器
①销售001→收集和分析过程
③销售团队系统列表一收集和分析过程
③收集和分析过程一分析过程
图3-3STRIDE示例
图中，①、②、③其实都存在假冒、算改、拒绝服务的风险，所以在这些环节都需要
考虑认证、鉴权、加密、输入验证等安全措施。但根据风险的不同，过程③在内网的服务
器被拒绝服务的风险较小，而在Intemet上传输的过程①所受到的监听和纂改的风险更大，
所以在每个环节上采取的风险削减措施的力度会不一样，这实际上也是什么安全措施一定
要落地、什么安全措施可以适当妥协的一个参考视角。很多安全从业者所接受的安全认知
往往是进人一家企业后，拿到一份名为应用开发安全标准的文档，里面描述了访问控制、
输入验证、编码过滤、认证鉴权、加密、日志等各种要求，久面久之就变成了一种惯性思
维，实际上之所以要这么做是因为在系统设计的某个环节存在STRIDE中的一种或儿种风
险，所以在那个设计关注点上要加入对应的安全措施，并不是在所有的地方都要套用全部
的或干篇一律的安全措施。否则就会变成另外一种结果：“过度的安全设计”。威胁建模的
成果跟工作者自身的知识也有很大的关系，有攻防经验的人比较容易判断威胁的来源和利
用场景，如果缺少这方面的认知，可能会发现到处是风险，有些风险的利用场景很少或利
用条件非常苛刻，如果一味地强调风险削减措施也会变成有点纸上谈兵的味道，虽然从安
全的角度没有错，但从产品交付的整体视角看，安全还是做过头了。
总体上看，STRIDE是一个不错的参考视角，即便有丰富攻防经验的人也不能保证自己
在面对复杂系统的安全设计时考虑是全面的，而STRIDE则有助于风险识别的覆盖面。
以上的例子是high level的威胁建模，lowlevel的威胁建模需要画了时序图后根据具体
的协议和数据交互进行更进一步的分析，细节可以参考威胁建模相关的方法论，但不管是
---
## Page 54
42理论篇
highlevel还是lowlevel都比较依赖于分析者自身的攻防技能。
参考资科
威胁建模：使用STRIDE方法发现安全设计缺陷（http://msdn.microsoft.com/zh-cn
magazine/cc163519.aspx )。
STRIDE 图  (http://blogs.microsoft.com/cybertrust/2007/09/11/stride-chart/)
3.9关于ISO27001
1.重建对安全标准的认知
虽然标题用了ISO27001，但实际上这里可以指代所有的安全标准和安全理论。本桶理
论安全界的人都知道，但用到实际工作中，没太大用，说到底就是给外行解释安全这件事
的一个通俗比喻面已。业内有些声音认为安全标准堵不住漏洞，所以安全标准都是没用的
“废物”，这种论据显然是有问题的，首先安全标准的制定就不是为了堵漏洞，所以安全标
准跟漏洞没关系，完全两个层面的东西，不能拿来说事，堵漏洞有具体的技术手段，但安
全建设并不只有堵漏润这种微观对抗。
那安全标准到底有什么用，我用最通俗的语言解释一遍，安全标准归根结底是为了给
你一个参考和指引，当你把基础的技术防护手段实施之后，过了上任之初的教火阶段之后，
就需要停下来思考一下整个企业安全范畴中，哪些事情是短板，哪些领域尚且空白，需要
在哪些点上继续深挖才能覆盖公可整体的安全建设，而安全标准的价值就是告诉你，在安
全建设的领域里可能有那么100件事情是需要做的，但具体选择只做80件还是99件还是
100件全做是你自已的事情，它只告诉你100件事情是什么，但是这100件事情怎么实现，
对应的技术方案或流程是什么它不会告诉你，实现和落地是需要自己去想的，它本质上是
用于开拓视野，跟堵不堵漏洞完全没冲突，换句话说它是一本书的目录，但对于每个章节
怎么写则取决于你自己，你可以买WAF也可以加固容器，也可以像偏执狂一样地做代码审
计，至于堵漏洞那只是每个章节里的一段文字而已。
2.最实用的参考
对互联网公司而言，我认为有几个非常刚需的参考：
---
## Page 55
第3章甲方安全建设方法论43
口ITIL(BS15000/ISO20000)—绝大多数互联网公司的运维流程都是以ITIL为骨架建
立的，甚至连内部的运维管理平台，监控系统上都能一眼看出ITIL的特征。而偏运
维侧的安全，基础架构与网络安全，这部分的安全建设是以运维活动为主干，在运
维活动上添加安全环节来实现安全管理的。所以想在运维侧建立安全流程必须熟悉
ITIL，把安全环节衔接到所有的发布、变更、配置、问题和事件管理之上，而不是
打破原来既有的运维流程，再去独创一个什么安全流程。
SDL—研发侧的安全管理，绝大多数公司都借鉴了微软的 SDL，即便是再有想法
的甲方安全团队也离不开它，所以无论如何必须掌握SDL。
口ISO27001—企业安全管理领域的基础性安全标准，所谓基础就是不能比这个更加
精简了，你可以不碰那些高大上的，但是ISO27001则相当于人门水准，就好像高
等数学线性代数你可以不会，但是如果你连9×9乘法表都背不出来，那只能永远呆
在家里不出门了，因为你连买10个苹果找你多少钱都算不来。ISO27001总体上提
供了一个框架性的认知。