item is 1, then it should be subtracted from the other IBLT;
if the count is -1, then it should be added to the other IBLT.
8
050100150200250300400500600700800900020040060080010001200050100150200250300350j items recoveredSize (cells)Decodefailure rate1/241/2401/2400statick=4,tau=1.5Graphene: Set Reconciliation Applied to Blockchain Propagation
UM-CS, 2019-001
• In simulation, the decode success rates of Graphene Proto-
cols 1 and 2 are above targeted values.
n
(cid:1)
(cid:0)m
5.1 Comparison to Bloom Filter Alone
The information-theoretic bound on the number of bits re-
quired to describe any unordered subset of n elements, cho-
sen from a set of m elements is ⌈log2
⌉ ≈ n log2(m/n)
bits [14]. Carter et al. also showed that an approximate so-
lution to the problem has a more efficient lower bound of
−n log2(f ) bits by allowing for a false positive rate f [16].
Because our goal is to address a restricted version of this
problem, Graphene Protocol 1 is more efficient than Carter’s
bound for even an optimal Bloom filter alone. This is because
Graphene Protocol 1 assumes all n elements (transactions)
are stored at the receiver, and makes use of that information
whereas a Bloom filter would not.
THEOREM 4: Relaying a block with n transactions to
a receiver with a mempool (a superset of the block) of m
transactions is more efficient with Graphene Protocol 1
than using an optimally small Bloom filter alone, when
the IBLT uses k ≥ 3 hash functions. The efficiency gains
of Graphene Protocol 1 are Ω(n log2 n).
A full proof appears in Appendix B. Graphene cannot replace
all uses of Bloom filters, only those where the elements are
stored at the receiver, e.g., set reconciliation.
As m − n approaches zero, Protocol 1 shrinks its Bloom
filter and approaches an IBLT-only solution. If we check the
special case of Graphene having an FPR of 1 (equivalent to
not sending a Bloom filter at all) then Graphene is as small
as any IBLT-only solution, as expected; As m − n increases,
Graphene is much smaller than sticking with an IBLT-only
solution, which would have τ(m − n) cells.
Graphene is not always smaller than deterministic solu-
tions. As we show in our evaluations below, for small val-
ues of n (about 50–100 or fewer depending on constants),
deterministic solutions perform better. For larger values,
Graphene’s savings are significant and increase with n.
We leave analytic claims regarding Protocol 2 for future
work; however, below we empirically demonstrate its advan-
tage over related work.
5.2 Implementations
Bitcoin Cash Implementation. We coded Graphene (Pro-
tocol 1) for Bitcoin Unlimited’s Bitcoin Cash client at their
request. It appeared first in edition 1.4.0.0 (Aug 17, 2018), as
an experimental feature and since 1.5.0.1 (Nov 5, 2018) has
been the default. Currently, 686 nodes (operated by persons
unknown to us) are running Graphene on the Bitcoin Cash
mainnet. An updated count of nodes can be found at [1].
Figure 8: Decode rate of a single IBLT (parameterized for a
1/240 failure rate) versus the improved ping-pong decode rate
from using a second, smaller IBLT with the same items.
The IBLTs should use different seeds in their hash functions
for independence.
Fig. 8 shows an experiment where we compared the de-
code rate of a single IBLT parameterized to be optimally
small and recover j ∈ [10, 20, 50, 100] items with decode fail-
ure rate of 1 − p = 1/240. We then inserted the same items
into a second IBLT parameterized to hold 0  n; we
evaluate m = n as a special case.
Size by message type. Fig. 13 shows the cost of Graphene
Extended, broken down into message type, as the fraction of
the block owned by the receiver increases. The dashed line
on the plot shows the costs for Compact Blocks, where the
receiver requests missing transactions by identifying each
as a 1- or 3-byte index (depending on block size) in the origi-
nal ordered list of transactions in the block encodings [17].
(We exclude the cost of sending the missing transactions
themselves for both protocols.)
Overall, Graphene Extended is significantly smaller than
Compact Blocks, and the gains increase as the block size
increases. For blocks smaller than 200, eventually Compact
Blocks would be smaller in some scenarios.
Decode rate. Fig. 17 in Appendix C shows the decode rate
of Graphene blocks; not only does it far exceed the desired
rate, but approaches close to 100% with ping-pong decoding.
Not shown are our simulations of the Difference Digest
by Eppstein et al. [23], which is several times more expen-
sive than Graphene. The Difference Digest is an IBLT-only
solution that is an alternative to our Protocol 2. In that work,
the sender begins by telling the receiver the value n. The
receiver creates a Flajolet-Martin estimate [25] of m − n, us-
ing ⌈log2(m − n)⌉ IBLTs, each with 80 cells where roughly m
elements are inserted. The sender replies with a single IBLT
of twice the number of cells as the estimate (to account for
an under-estimate).
m ≈ nm ≈ nm ≈ n and mempool synchronization. As described in
Section 3.2.1, Graphene can be used for mempool synchro-
nization, setting n to the size of the sender’s mempool. In
these cases, if peers are mostly synchronized, then m ≈ n,
11
llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll2002000100000.00.51.01.52.02.53.03.54.04.55.00.51.01.5051015020406080Txns in mempool not in blk  as a multiple of blk sizeAvg encoding size (KB)lCompact Blocks l Graphene lllllllllllllllllllllllllllllllll2002000100000123450.0000.0020.0040.0000.0020.0040.0000.0020.004Txns in mempool not in blk  as a multiple of blk sizeDecode failure probability2002000100000.00.20.40.60.81.00.00.51.01.501020050100Fraction of blk in mempoolAvg encoding size by parts (KB)getdataBF SIBLT IBF RIBLT JUM-CS, 2019-001
A. Pinar Ozisik, Brian Levine, George Bissias, Gavin Andresen, Darren Tapp, and Sunny Katkuri
at least 8 bytes. In the worst case, the block contains t1, the
sender has never seen t2, and the receiver possesses t2 but has
never seen t1. In this case, XThin and Compact Blocks will
always fail; however, Graphene fails with low probability,
fS · fR. For the attack to succeed, first, t2 must pass through
Bloom filter S as a full 32-byte ID, which occurs only with
probability fS. If it does pass, the IBLT will decode but the
Merkle root will fail. At this point, the receiver will initiate
Protocol 2, sending Bloom filter R. Second, with probability
fR, t1 will be a false positive in R as a full 32-byte ID and
will not be sent to the receiver.
6.2 Transaction Ordering Costs
Bloom filters and IBLTs operate on unordered sets, but Merkle
trees require a specific ordering. In our evaluations, we did
not include the sender’s cost of specifying a transaction or-
dering, which is n log2 n bits. As n grows, this cost is larger
than Graphene itself. Fortunately, the cost is easily elimi-
nated by introducing a known ordering of transactions in
blocks. In fact, Bitcoin Cash clients deployed a Canonical
Transaction Ordering (CTOR) ordering in Fall 2018.
6.3 Reducing Processing Time
Profiling our implementation code revealed that processing
costs are dominated heavily by passing the receiver’s mem-
pool against Bloom filter S in Protocol 1. Fortunately, this
cost is easily reduced. A standard Bloom filter implemen-
tation will hash each transaction ID k times — but each ID
is already the result of applying a cryptographic hash and
there is no need to hash k more times; see Suisani et al. [46].
Instead, we break the 32-byte transaction ID into k pieces.
Applying this solution reduced average receiver processing
in our Ethereum implementation from 17.8ms to 9.5ms. Al-
ternative techniques [20, 21, 29] are also effective and not
limited to small values of k.