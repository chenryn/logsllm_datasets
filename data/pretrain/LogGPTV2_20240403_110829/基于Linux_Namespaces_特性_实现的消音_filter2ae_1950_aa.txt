# 基于Linux Namespaces 特性 实现的消音
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## TL;DR
  * 这不是什么新技术，仅仅只是一些利用。
  * 这是一个减少攻击噪音的工具，但同时也会产生其他噪音，但收益大于支出，属于OPSEC一类。
  * 使用Linux Namespaces 一部分特性，遇到了一些坑但有相应的解决方案。
  * 主要的功能包括隐藏进程、隐藏文件、隐藏网络、清理痕迹，提供合理的SSH手法。
  * 目前这还是个玩具
review by Explorer
## Linux Namespaces 简介
在早些时候通过[Exp](https://github.com/zh-explorer)的文章学习到过一点 Docker 底层运行的一些相关特性和机制
[Docker安全性与攻击面分析](https://mp.weixin.qq.com/s/BaeIGrBimww8SUtePDQ0jA)
那么文中有提到：
> Docker 使用了多种安全机制以及隔离措施，包括 Namespace，Cgroup ，Capability 限制，内核强访问控制等等。
其中得知
Linux Control Group （Cgroup）
  * 更多偏向系统资源的约束
内核 Capabilities
  * 更多偏向容器权限的约束
在看完文章后和Exp也讨论了（Exp yyds 强的可怕 ）同时产生了一个想法，如果我们可以将部分隔离技术带到 Redteam
operation当中，应该可以实现不错的效果。Docker本身就有这让“我们”看不见容器内部发生的事情的特性，那么我们也可以反过来让宿(guan)主(li)机(yuan)
也看不到我们的操作。
所以我们需要了解哪些技术方便我们实现需求，每一种机制都是Docker的组成要素，但我觉得 Namespaces 看起来是个另类的存在。
Linux Namespace 包含了大多数现代容器背后的一些基本技术。比如 PID Namespace
允许隔离进程之间的全局系统资源，这意味着在同一个主机上，运行的两个进程可以出现具有相同PID的情况，但你其实并不能在一个命名空间中通过PS看到这种情况，而是出现在不同PID
命名空间中。
以Docker 为例，当容器启动时会有一系列NS（Namespace 后续简称NS）随之创建。
而这里面就涉及到了 多种 NS 的使用，Linux kernel 为用户态提供了7种 NS 的内核接口使用。
从描述信息来看，的确是一组很有趣的接口，有一些上层工具实现了部分系统namespace管理接口，比如 unshare,
nsenter,ip等，从中我选择了两种 NS 来实现本文要叙述的隐匿实现。
Mount NS/ Net NS, 这两种 NS 最大程度可以帮助我们解决几个问题：
  1. 对文件的隐藏
  2. 对网络的隐藏
当然，有些师傅会觉得PID NS 为什么不是选择的部分了，关于这个问题，我们后面会知道答案。
举个例子
我们用unshare创建一个 /bin/bash 并让它进入一个新的Net
NS,这个时候我们再看自己的网卡发现除了loopback什么也没有了，因为此刻这个bash和它的一系列子进程都在一个崭新的网络栈当中，已经和其他网络互相隔离。
你可以在这里发现更多和Namespace相关的细节。
[namespaces(7) – Linux manual page](https://man7.org/linux/man-pages/man7/namespaces.7.html)
那么我们先来看一下最终实现的效果是如何的。
## Silencer Demo
[Silencer](https://asciinema.org/a/Sho4y0wmF1hrq5o71vPJwDRgR)
我们可以看到，Adapter代替了 SSH Client 命令帮助我们进行 SSH，并且我们会得到一个
完整的交互式Shell，在这个空间中，我们执行的操作会有隐匿的效果。当然你看到的这些，都是发生在拥有root权限下的。
其实 Adapter 是帮助我们把主程序 Silencer scp 到目标主机上并运行，我们通过流程图来看看发生了什么。
你会看到，当Silencer被传输到目标主机后，会发生一系列调用。
  * Adapter 会去调用Silencer 并执行相关功能。  
我们进一步看看到底做了什么，这边不会将太多源码的实现，主要以实现思路为主，因为首先代码能力不好，其次实现方式也有很多。
在这之前我们简单看看在Golang中如何去使用NS，你可以在Google上搜索到大量资料。Golang 为我们提供了操作NS的一部分实现接口。
需要使用系统调用（syscall）去完成，简单来讲就是程序直接像内核发起请求接口的过程，比如访问硬件资源，文件系统，创建进程等。
> 
这个包，就是Golang官方便编写的标准库 – syscall,已经为我们封装好很多实用接口，比如
syscall.Unshare、syscall.Mount、syscall.Readlink等。 在前面提到的 unshare -n
/bin/bash命令中，unshare 实际是使用 Clone()系统调用，
并传递CLONE_NEWNET来完成NetNS的创建,当然可以接受多个CLONE属性。Clone 可以帮助我们创建一个带有隔离属性的进程。
unshare(CLONE_NEWNET)
在Golang中我们可以使用 syscall.SysProcAttr struct 来为我们创建的程序带有相关属性。
在结构体中，我们看到了 Cloneflags并且说明 Flags for clone calls (Linux only)。
那么我们在创建进程的时候就可以使用它来帮助我们附加各种NS属性。
举个例子
如果你想设置多个NS flags 可以这样写。
最后达到的效果就是：
当进入 New UTS Shell 之后我们修改hostname是不会影响到外界。
通过readlink，我们也可以发现 UTS 的确不一样了。
这是使用 CLONE_NEWUTS带来的效果，有了这些基础就会使用其他NS，后续的代码就和搭积木差不多了，就是调用各种系统调用和处理相关逻辑即可。
## init (初始化环境)
这里列举一下，在实现init一共做了哪些事情,以及为什么。这仅仅是我这里的做法。
## 建立隐藏挂载据点
首先我们建立一个隐藏挂载点，我们不需要将整个文件系统隔离，你可以选择任何一个存在的文件夹来做这个操作。目的是为了在此文件夹上设立一个隐藏空间，和宿主机进行相互隔离。从而你可以在此放你任何想放的文件和工具以及运行日志。
我们将一个 tmpfs 内存文件系统挂载在/tmp/rootfs 上。在执行这一步前，我们已经进入了新的Mnt
NS。所以所有的挂载操作都不对外界产生影响。对于外界进程来说，/tmp/rootfs文件夹没有任何变化。
## 配置 resolv.conf 和 .bashrc
我们需要配置隔离空间内的一些基础环境，比如修改.bashrc 加入你想要的一些环境变量，修改resolv.conf是为了规避这种情况。
感觉好像没啥，其实问题很大。
当你在隔离空间内，由于是新的网络环境，这个时候是访问不到本地 systemd-resolve或其他本地DNS服务。产生的问题就是你无法进行域名解析，所以我们也需要对 resolv.conf 进行调整。
我们可以使用 Bind Mount 来帮助我们实现这一点.
> Creating a bind mount
>
> If mountflags includes MS_BIND (available since Linux 2.4), then perform a
> bind mount. A bind mount makes a file or a directory subtree visible at
> another point within the single directory hierarchy. Bind mounts may cross
> filesystem boundaries and span chroot(2) jails.
通过man手册我们可以看到 bind mount 不光可以作用于文件夹，还可以作用于文件，利用 bind mount
将这两个文件复制到一个暂存点，然后再mount 到原有位置即可。这样对原文件的访问会实际访问我们的暂存文件。并且由于Mnt
NS的隔离。Namespace外仍然为访问原来的文件。
以 resolv.conf 为例：
需要设置的flag位就是 syscall.MS_BIND. 我们进行追加的目的是为了不影响原有配置，在部分场景下，这里原有配置里面可能配置了含有内网DNS
Nameserver的情况。如果是这种情况，其实我们不操作resolv.conf也不会有太大问题。
## 建立netns网桥
正如你上面看到的，在你调用 CLONE_NEWNET 之后。你会得到一个新的网络空间，此时除了loopback interface
外你一张网卡也没有，更别谈进行网络通信了。所以我们接下去要看看网络问题如何解决。
原图：
根据现有资料我们可以知道，想要让容器内的进程和外界通信需要使用 bridge 网桥、以及虚拟网卡来实现通信。
  * 在外界网络空间中创建网桥接口并分配IP
  * 然后创建veth接口对（默认情况你使用ip命令创建的虚拟网卡也是成对出现的，一个被删除，另一个也会自动消失）
  * veth的特点就是它类似一个队列，当流量从一端进入，就必定会从另外一端出去，根据这个特点，我们就可以将一端依附在全局命名空间brg接口上，另外一段依附在隔离空间的新Net NS上。
  * 配置好路由以及转发
这些做完，就可以实现隔离空间像外界发起请求，产生通信的能力，好在以及有人实现了这部分代码。
这是封装好的方法体，我们直接拿来用即可，需要注意的是，我们需要传入隔离进程的PID给接口。
然后你就会发现 外部多了两张网卡，内部多了一张虚拟网卡，和流程图中的逻辑是一样的。
## 配置 iptables
在配置好NetNS网络后，还不完全够，我们还需要配置iptables
转发，因为在这个情况下，你还不能实现从隔离空间的通信到达宿主机之外的网络，因为缺少源地址转换这一层处理。
iptables -t nat -A POSTROUTING -s 10.10.10.0/24-j MASQUERADE
所以我们需要对nat表的POSTROUTING 链加一条转换地址伪装规则。
另外考虑到部分Centos派系的系统和实战情况下，有可能会出现
Forward链默认规则为DROP的情况，或者默认为ACCEPT情况，但是链第一条规则就DROP ANY的问题，我们还可以再添加一条Forward链的规则。
iptables -I FORWARD -j ACCEPT
让这条Any to Any 的规则插入到最顶部。
关于iptables部分目前用的是 exec
实现，你也可以考虑使用cgo去写，因为golang暂时没有发现一个对netfilter封装的像iptables那么好的库。考虑到向下兼容的问题，所以也不会去使用nftables。
## 配置 net.ipv4.ip_forward 转发
在做好iptables之后不要忘记对 net.ipv4.ip_forward内核选项进行修改 ，否则一样是无法达到转发的目的的。
你可以选择 自己写，也可以用一些现成的库，比如：[github.com/lorenzosaino/go-sysctl](http://github.com/lorenzosaino/go-sysctl)
## Persistent Namespaces
持久化的目的是为了方便我们在退出整个隔离环境后下次还能继续进入，在构思持久化 NS
的时候并没有想到很好的方法，就去网上看看并请教Exp，因为自己对整个NS体系的特性掌握的也不熟。
回过头来再看看unshare 的 man手册. 通过搜索关键字发现了相关方法。
这篇文章很早也有提到。
通过阅读我们发现最关键的一个步骤就是
❯ unshare —uts=/root/ns-uts
所以我们来看看到底是如何实现的。通过最简单的 strace 我们就可以知道底层是如何调用的。