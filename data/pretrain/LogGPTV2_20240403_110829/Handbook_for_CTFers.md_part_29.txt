3.4 Logic Flaws
267
E. Request with toker
Res
A. Reqaest for gran
F. resource is returned
User
B. Granted with access
Client
D. Retum a valid Token
C. Access Granted
Authorization
Fig, 3.73 The OAuth 2.0 authentication process
business systems, incur high deployment costs, and appear less frequently in CTF
competitions.
In 2018, X-NUCA included a web challenge called blog", which implemented a
small OAuth 2.0 authentication system in which the contestant had to find a loopbole
in order to log into the administrator account and get a flag on the backend page after
logging in.
-a Sunss! son [ooood uoezone puepuejs-nsnpu ue s 0’7 nvo
sensitive tokens to third-party applications so that they can access relevant resources
through the token. A common scenario is that a user does not have an account on a
website, but the website is connected to QQ, WeChat, etc. The user uses OAuth 2.0
when logging in.
The OAuth 2.0 authentication process is shown in Fig. 3.73, which is as follows:
the client page requests authorization from the user the-client page obtains
authorization from the user -the·client page requests Token from the authorization
server (such as WeChat) ·the-authorization server confirms that the authorization
osu a sisn sted po aed  a o uo snsst pe pea st
server with the Token  ·the resource server After the server verifies that the token is
valid, the resource is returmed.
The following features exist in this topic: the ability to register and log in for
regular users; the ability to register and log in for users of the OAuth website; the
ability to bind regular users to their accounts on the OAuth website; the ability to
---
## Page 283
268
3 Advanced Web Challenges
send a link to an administrator, who will have automatic access, and the link must
start with the topic URL; an arbitrary address redirection vulnerability,
When binding an ordinary user to an OAuth account, a Token is retumed first, 
and then the page carries the Token for jumping to complete the binding of the
OAuth account to the ordinary user. The link to carry the Token for account binding
the link, the OAuth account will be automatically bound to a regular account.
The key is that ordinary users can complete the binding of ordinary account and
OAuth account by accessing the link with Token. Similarly, the administrator can
access the link to complete the account binding. The arbitrary address skipping
vulnerability can be used to deploy an address skipping page on the remote server.
The skipping address is the link bound with Token. When the administrator accesses
the submitted link, it is first redirected to the remote server and then redirected to the
binding page to complete the binding between the OAuth account and the adminis-
trator account. At this point, use the OAuth account to quickly log in to the
administrator account.
3.4.3Summary of Logical Flaws
In contrast to the various Web vulnerabilities mentioned earlier, there is no fixed
format for presenting logical vulnerabilities. To exploit logic holes, participants need
to have a good understanding of business processes. Logical vulnerability mining in
the real environment also needs to consider a variety of authentication methods and
different business lines, which are not discussed here, readers can find the fun in their
daily work and life.
3.5 Summary
In general, Web challenges were the easiest to get started in all directions in the CTF
competition. The book divides the main vulnerabilities involved in Web topics into
three levels: “getting started", *"advanced" and “expanded", each with one chapter,
allowing readers to step by step. However, because the classification of Web
vulnerabilities is very complex and complicated, and technology updates are faster
than other types of topics, readers are expected to supplement relevant knowledge
while reading this book, so that they can leam from one another and improve their
own ability.
For the relevant content of this book, readers can find corresponding supporting
examples to practice on the N1BOOK (https://book-en.null.com/) platform, so as to
better understand the content of this book.
---
## Page 284
Chapter 4
APK
In CTFs, the number of Android challenges is generally small, and they usually fall
into Misc and Reverse categories. The former usually tries to conceal data based on
the characteristics of the system to test the participant’s understanding of Android.
The latter mainly examines the player's ability to reverse Java or C/C++ codes.
debugging, and other techniques to increase the dificulty of reversing the applica-
Challenge designers will often apply obfuscation (ollvm, etc.), reinforcement, anti-
tion. These challenges often require participants to be familiar with common
debugging and reversing tools, and to know common anti-debugging and shelling
methods.
This chapter will introduce some basic knowledge of Android development, the
necessary skills required for solving CTF challenges on Android systems, tips for
using tools, and some practical skillsuch as bypassing anti-debugging techniques
and unshelling. Finally, we try to let readers get started with CTF APK challenges
faster and better through analyzing several examples.
4.1Fundamentals of Android Development
4.1.1The FourAndroid Components
An Android application consists of the folwing four core components.
Activity: A user-oriented application component or visual interface for user opera-
tion, based on the Activity base class and managed by the ActivityManager,
which is also responsible for handling Intent messages sent within or between
applications.
Broadcast Receiver: The component that accepts and filters broadcast messages, the
application needs to register a receiver in the Manifest file to filter certain types of
broadcast messages using an Intent filter, so that it can receive broadcast
C The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2022
NulL Team, Handbook for CTFers.
269
htps:/doi.crg/10.1007/978-981-19-0336-6_4
---
## Page 285
270
4APK
Fig, 4.1 Dymamically registered
Fig, 4.2 Service registered
messages explicitly, see Fig. 4.1. registerReceiver can also be dynamically
registered at runtime.
Service: Usually used to handle background time-consuming logics. The user does
not interact directly with the application process corresponding to Service. Like
other Android application components, Service can also receive and send Intent
via the IPC mechanism.
To use a Service, it must be registered in the Manifest manifest file, see
Content Provider: Component for data sharing between applications. For example,
Fig. 4.2.
ContactsProvider manages contact information in a centralized way, which can
o suogeoddy (uogssuad Sugsanbau sage) suoeogdde soo q passaose aq
create their own Content Provider and expose their data to other applications.
4.1.2APKFileStructure
APK (Android application Package) files usually contain the following files and
directories.
1. meta-inf directory
The meta-inf directory includes the following files.
manifest.mf: Manifest file.
* cert.rsa: Application signature file.
• cert.sf: List of resources and their corresponding SHA-1 signatures.
2. lib direetory
The lib directory contains platform-related library files, which may include the
following files.
•armeabi: All files related to ARM processors.
•armeabi-v7a: Files related to ARMv7 and above.
---
## Page 286
4.1 Fundamentals of Android Development
271
*arm64-v8a: arm64-related files for all ARMv8 processors.
x86: All files related to x86 processors,
x86_64: All files related to the x86_64 processor.
• mips: Files related to the MIPS processor.
3. res
res stores other resources that are not compiled into resources.arsc.
4. assets
The assets file is a resource file that can be accessed through AssetManager.
5. AndroidManifest.xml
AndroidManifest.xml is an Android component manifest file, containing appli-
cation name, version, permissions and other information, which is stored in APK file
in binary XML file format and can be converted to plaintext XML file format by
tools such as apktool, AXMLPrinter2 and so on.
6. classes.dex
classes.dex is the Android runtime executable file.
7. resources.arsc
resources.arsc contains a compiled portion of the resources.
4.1.3DEX File Format
DEX is short for Dalvik Executable File, which is the Android Dalvik executable,
and the DEX file contains all the Java layer code of the executable. When DEX is
compressed and optimized, it not only reduces the size of the program, but also
speeds up the efficiency of finding classes and methods. The structure of the DEX
file is shown in Fig. 4.3.
The header section of the DEX file contains data such as file size, checksum
values, offsets and sizes of each data type table. The type table has the following
types.
*string table: Each table entry points to a string data offset. String data consists of
two parts, starting with the variable length of the string encoded by uleb128,
followed by the specific string data, and ending with °0'.
• type table: Stores the index of each type in the string table.
proto table: Each item contains three elements, namely, function prototype
abbreviation, returm type index, and parameter offset. The first element of param-
eter offset is of type uint, indicating the number of parameters.
---
## Page 287
272
4 APK
DEX
ClassDeftem
Typeldltem
Stringlditem
Header
Classldx
Descriptoridx
StringDataOff
Stringlds
AccessFlags
ClassDateltem
EncodedMethod
Typelds
SuperclassOff
StaticFieldsSize
MethodidxDiff
Protolds
InterfacesOff
nstanoefieicSize
AccessFlags
Fieldlds
SourceFileldx
DirectMethodSize
CodeOff
Methodlds
Annotationss
VirtualMethodSize
ClassDefs
ClassDateOff
StaticFieids
Methodlditem
Data
StaticValuesOff
InstanceFieids
Classldx
MapsUist
Protoldx
VirtualMethods
Nameldx
Fig, 4.3 The structure of the DEX file
▪field table: Each table entry describes a variable with three elements, which are
the class the variable belongs to, the type the variable belongs to, and the name of
the variable.
•method table: Each table entry describes a function with three elements, which are
the class to which the function belongs, the function prototype, and the name of
the function.
•class table: Each table entry describes a class with eight elements, namely class
name, access ffag, parent class offset, interface offset, source file index, class
comment, class data offset, and static variable offset.
•maps table: Saves the size and starting offset of each of the above tables, and the
system can quickly locate each table from this table.
4.1.4AndroidAPI
As of May 2019, the latest API level of Android is 28, and the corresponding version
is Pie. Each major version of the API has major changes. In the AndroidManifest.
xml file, we can see the minimum supported API version for the application and the
API version used for compilation. The official Android API list is shown in Fig. 4.4.
---
## Page 288
4.1 Fundamentals of Android Development
273
Codename
Version
API level/NDK release
Android11
11
AP1 level 30
Android10
10
API level 29
piR
9
API level 28
Oreo
8.1.0
API level 27
Oreo
8.0.0
API level 26
Nougat
7.1
AP1 level 25
Nougat
7.0
API level 24
Marshmallow
6.0
API level 23
Lollpop
5.1
API level 22
Lollpop
5.0
API level 21
KitKat
4.4 - 4.4.4
API level 19
Fig, 4.4 The offcial Android API list
4.1.5Android Sample Code
The programming language for Android is Java, but as of the Google IO conference
in May 2017, the official Android language was changed to Kotlin (a JVM-based
programming language), which makes up for Java’s missing moderm language
features and simplifies the code so that developers can write as little code as possible.
This chapter still takes the original Java code as an example to show the basic code
structure of an Android application.
The entry point for Android applications is the onCreate function.
public class MainActivity extends ActionBarActivity {
/** Called vhen the activity is first created. */
public void onCreate (Bundle savedInstanceState) [
3Override
super onCreate (savedInstanceState) ;
setContentViev (R. layout activity_main) ;
Log. i ("crF", *He1lo wor1d Android!") ;
The AndoridManifest.xml file contains the application’s entry, permissions, and
acceptable parameters.
---
## Page 289
274
4APK
package=*con.ctf.test">
cuses-permission android:name=*android.permission.
HRITE_EXTERNAL_STORAGE"/ >
cuses-permission android:name=*android.permission.
READ_EXTERNAL_STORAGE"/>
4.2 APK Reverse Tool
This section introduces some of the main reverse tools and modules used in APK
reverse. Good tools can greatly speed up the reversing process. There are a lot of
reverse tools for Android platform, such as Apktool, JEB, IDA, AndroidKiller,
Dex2Jar, JD-GUL, smali, baksmali, jadx, etc. This section mainly talks about JEB,
IDA, Xposed and Frida.
4.2.1JEB
There are many decompilers for the Android platform, and JEB is the most powerful
of them all. JEB has evolved from an early Android APK decompiler to now,
supporting not only Android APK file decompilation, but also MIPS, ARM,
ARM64, x86, x86-64, WebAssembly, EVM, etc. Its UI and open interfaces are
easy to use and greatly reduce the difficulty of reverse engineering, see Fig. 4.5.
JEB 2.0 supports dynamic debugging, which is easy to use, easy to get started,
and can debug any APK with debugging mode on.
When trying to attach, if the process is marked as D, it means that the process can
be debugged. Otherwise, it means the debugging flag is set to off, and the process
cannot be debugged, see Fig. 4.6.
---
## Page 290
4.2 APK Reverse Tool
275
Fig, 4.5 JEB decompile APK
 Attach the debugger
Machines / Devices
Filter type “Enter* to validate
Index Name
Location FlagsInformation
0
0452913e828e0950
Online Nexus 5
Processes
comxyz.appcheck
Index ID
Name
Flags
18416912 comxyzappcheck
D
Options
Suspend all threads
Use Native Debugger
Attach
Close
Refresh
Fig, 4.6 JEB debug APK
---
## Page 291
276
4APK
When debugging, on the OSX system, we can set breakpoints on the smali level
through Command+B. We can inspect the values of each register at the current
location in the right VM/Locals window. Double clicking can modify the value of
any register, see Fig. 4.7.
When dealing with an application with debugging tumed off, or dealing with a
non-Eng rooted Android device, we might be unable to debug the application. We
can try to force the debugging mode on by hooking the system interface. The
following code is used to dynamically modify the debug state of a non-Eng phone,
with the help of Xposed Hook.
Class pns=Sharedob]ect .masterClassLoader . loadClass (*com. android.
Server.pm.PackageManagerService*1 ;
XposedBridge .hookA11Methods (pms, "getPackageInfo* , nevXC_MethodHook () (
protected void afterHookedNethod (MethodHookParan param) throvs
Throvable (
Object v2 = param.getResult () ;
int x = 32768 ;
if (v2 1= null) {
ApplicationInfo applicationInfo = ( (PackageInfo) v2) applicationInfo;
int flag = applicationInfo.flags;