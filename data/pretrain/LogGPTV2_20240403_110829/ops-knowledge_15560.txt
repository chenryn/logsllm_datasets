When deploying web applications, I typically use `virtualenv` and `pip`. However, with Google App Engine, this approach doesn't work because all import statements are relative to the application's directory.

The most common solution I've seen is to manually copy the required packages from the `site-packages` directory into the application's directory. This method, however, is cumbersome and error-prone.

Another approach is to modify the `install_lib` and `install_scripts` settings in `~/.pydistutils.cfg`. Unfortunately, this does not allow me to use `pip` in my home directory simultaneously.

Do you have any suggestions for a more efficient and reliable method?

**Suggestion:**

One alternative is to use `easy_install` instead of `pip`. With `easy_install`, you can specify a non-default installation directory using the `--install-dir` argument. For example:

```sh
easy_install --install-dir <your_app_directory>/lib <package_name>
```

This allows you to install the necessary packages directly into your application's directory without manual copying. However, it's important to note that `easy_install` is considered less secure and less feature-rich compared to `pip`.

Another modern and recommended approach is to use `pip` with a `requirements.txt` file and a custom `setup.py` script to manage dependencies. You can create a `lib` directory within your application and install the packages there. Hereâ€™s how you can do it:

1. **Create a `requirements.txt` file** listing all your dependencies.
2. **Create a `setup.py` script** to install the dependencies into the `lib` directory. For example:

```python
from setuptools import setup

setup(
    name='YourApp',
    version='1.0',
    packages=['your_package'],
    install_requires=[
        'dependency1',
        'dependency2',
    ],
    package_dir={'': 'lib'},
)
```

3. **Install the dependencies** using `pip` with the `--target` option:

```sh
pip install -r requirements.txt --target <your_app_directory>/lib
```

This method ensures that all dependencies are installed in the specified directory, making your deployment process more streamlined and reliable.