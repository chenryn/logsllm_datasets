### 优化后的文本

#### 1. 定义和初始化
- 设 \( u_1, \ldots, u_q \) 和 \( w_1, w_2, w_3 \in \mathbb{Z}_q \)。
- 验证者 \( V \) 选择 \( u = (u_1, \ldots, u_N) \in \mathbb{Z}_N \)。
- 证明者 \( P \) 定义 \( u' = (u_1', \ldots, u_N') \in \mathbb{Z}_N \)。
- 证明者 \( P \) 定义 \( \hat{r} = (\hat{r}_1, \ldots, \hat{r}_N) \)，\( \hat{w} = (\hat{w}_1, \ldots, \hat{w}_N) \)，\( w' = (w_1', \ldots, w_4') \in \mathbb{R} \)。
- 证明者 \( P \) 定义 \( \bar{r} = (\bar{r}_1, r') \)，\( \tilde{r} = (r, u') \)。

#### 2. 生成值并传递给验证者
- 证明者 \( P \) 将以下值 \( (\hat{c}, t_1, t_2, t_3, t_4, \hat{t}_i) \) 传递给验证者 \( V \)，其中 \( \hat{c}_0 = h \) 且 \( i \in [1, N] \)：
  - \( t_1 = g^{w_1} \prod_{i=1}^N \hat{r}_i \)
  - \( \hat{c}_i = g^{\hat{r}_i} \hat{c}_{i-1} \)
  - \( t_2 = g^{w_2} \prod_{i=1}^N r_i \)
  - \( t_3 = g^{w_3} \prod_{i=1}^N r_i \)
  - \( t_4 = \Sigma.\text{Enc}_{PK}(0, w_4) \)

#### 3. 挑战阶段
- 验证者 \( V \) 随机选择一个挑战 \( \xi \in \mathbb{Z}_q \) 并将其发送给证明者 \( P \)。
- 证明者 \( P \) 回应：
  - \( s_1 = w_1 + \xi \cdot \bar{r} \)
  - \( \hat{s}_i = \hat{w}_i + \xi \cdot \hat{r}_i \)
  - \( s_2 = w_2 + \xi \cdot \hat{r} \)
  - \( s_3 = w_3 + \xi \cdot \tilde{r} \)
  - \( s_4 = w_4 - \xi \cdot r \)

#### 4. 验证阶段
- 验证者 \( V \) 接受当且仅当，对于 \( i \in [1, N] \)：
  - \( t_1 = \left( \prod_{i=1}^N h_i \right)^{-\xi} g^{s_1} \)
  - \( t_2 = \left( \frac{\hat{c}_N}{h} \right)^{-\xi} \prod_{i=1}^N g^{\hat{s}_i} \hat{c}_{i-1} \)
  - \( t_3 = \left( \prod_{i=1}^N h_i \right)^{-\xi} g^{s_3} \)
  - \( t_4 = \left( \prod_{i=1}^N e_i^{u_i} \right)^{-\xi} \Sigma.\text{Enc}_{PK}(0, s_4) \)

### Terelius-Wikström 混合网络
Terelius-Wikström 混合网络结合了 Wikström 的工作 [13] 和 Terelius-Wikström 的工作 [16]。在早期的工作中，Wikström 展示了如何将洗牌证明的构造分为离线和在线两个阶段。为了简化表述，我们在本文中将这两个阶段合并在一起。在离线阶段，证明者首先承诺于一个置换矩阵，然后证明其确实如此；在在线阶段，证明者对密文进行洗牌，并证明其与离线阶段承诺的矩阵一致。

在后一项工作中，作者表明，如果一个 \( q \) 上的方阵 \( M = (m_{i,j}) \) 是一个置换矩阵，当且仅当对于独立变量向量 \( \bar{x} = (x_1, \ldots, x_N) \) 有：
\[ \sum_{i=1}^N (M \bar{x})_i = \sum_{i=1}^N x_i \quad \text{且} \quad M \bar{1} = \bar{1} \]

这个结果很重要，因为如果矩阵按列在扩展 Pedersen 承诺中提交，则可以容易地公开计算内积向量的承诺。第一个必要且充分条件可以通过从右侧减去左侧并使用 Schwarz-Zippel 引理来高效测试。引理表明，如果 \( f(x_1, \ldots, x_N) \) 是一个非零多项式，且我们从 \( \mathbb{Z}_q^N \) 中随机选取一个点 \( \bar{e} \)，则 \( f(\bar{e}) = 0 \) 的概率最多为 \( d/q \)。

这些见解的结果是，只需检查某些离散对数关系即可建立正确性证明。然后可以相对简单地构造一个 Sigma 协议来证明这些离散对数关系成立。

### 形式化定义
我们将形式化定义所证明的关系，从定义子关系开始。

- 我们定义 \( R_{\text{com}} \) 为包含以下形式的元组对的关系：第一个元组是形式为承诺密钥 \( CK \) 和承诺 \( c \) 的元组；第二个元组是形式为两个不同的消息向量 \( m \) 和 \( m' \) 及其关联的随机值 \( r \) 和 \( r' \) 的元组。如果对手能找到该关系的见证，则他们破坏了承诺方案的绑定属性，这在这种情况下也意味着他们破坏了离散对数问题。

- 我们定义 \( R_{\pi} \) 为包含以下形式的元组对的关系：第一个元组是形式为承诺密钥 \( CK \)、承诺向量 \( c \)、消息 \( M \) 及其关联的随机向量 \( r \) 的元组；第二个元组是形式为 \( M \) 是置换矩阵且 \( c_i = \Pi.\text{Com}_{CK}(M_i, r_i) \) 的元组。

- 我们定义 \( R_{\Sigma PK} \) 为包含以下形式的元组对的关系：第一个元组是形式为公钥 \( PK \)、两个密文向量 \( CT = (ct_1, \ldots, ct_n) \) 和 \( CT' = (ct_1', \ldots, ct_n') \) 以及置换 \( \pi \) 和随机向量 \( r = (r_1, \ldots, r_n) \) 的元组；第二个元组是形式为 \( ct_i' = ct_{\pi(i)} \Sigma.\text{Enc}_{PK}(1, r_{\pi(i)}) \) 对所有 \( i \in [1, N] \) 成立的元组。

我们现在能够定义混合网络所证明的关系。该关系是 \( R_{\text{com}} \vee (R_{\pi} \wedge R_{\Sigma PK}) \)，表示要么密文被正确混合，要么对手破坏了承诺方案。

### Coq 定义
```coq
Definition WikRel (pk: enc.PK) (e e': vector G1.G (1+N)) (h: G) (hs: VG (1+N)) (c: VG (1+N)) :=
  (exists (r: MoC_M.VF (1+N)) (r': VF (1+N)) (m: MF (1+N)),
    (relReEnc pk e e' m r /\ relPi h hs c m r'))
  \/ ((exists (c: G) (m1 m2: VF (1+N)) (r1 r2: F),
    relComEPC h hs c m1 m2 r1 r2).
```

### 证明协议
证明者和验证者遵循的洗牌证明协议如算法 1 所示；通常，通过 Fiat-Shamir 变换使证明非交互。因此，在实践中，我们假设 Fiat-Shamir 变换已正确实现。为了方便表述，我们展示了适用于基本 ElGamal 的情况，其中随机性和挑战空间为 \( \mathbb{Z}_q \)。该算法描述了一个四轮零知识证明过程，断言证明者知道满足公共输入的私有输入。在第一轮中，验证者向证明者发出挑战；在第二轮中，证明者响应多个承诺；在第三轮中，验证者再次向证明者发出挑战；在第四轮中，证明者响应。在算法的第五步中，验证者检查证明者在第四轮中提供的响应是否满足与陈述和承诺的某些关系。

标准论文证明采用了一种特殊健全性形式来证明健全性。有关此证明的知识错误，请参见 Wikström 的最新工作 [63]。

### Coq 定理
我们的 Coq 定理用于证明混合网络的安全性（特殊健全性）如下。它基本上对所有可能的陈述和证明记录进行了全称量化，然后说如果足够多的证明记录接受具有不同挑战的记录，则我们可以提取到关系的见证。要求挑战矩阵有逆矩阵的要求可以通过稍微修改证明来去除，但这会使结果与实际部署的实现不兼容。

```coq
Theorem TheMixnetIsSecure
  (* For statements *)
  (forall (pk: enc.PK) (e e': all keys and ciphertexts*)
  (forall (hs: VG (1+N))
  (forall (U: MF (1+N)),
  (let Sig := WikstromSigma in
   let V := fun t => Sigma.V1F Sig (t.1.1.1, t.1.1.2, t.1.2.1, t.2.1) = true
                 /\ Sigma.V1F Sig (t.1.1.1, t.1.1.2, t.1.2.2, t.2.2) = true in
   (forall (com: vector (Sigma.CF Sig) (1+N))
     (forall (chal: vector (F*F) (1+N)),
       (Vmap2 (fun x y => (x, y)) (Vmap2 (fun x y => (x, y)) (WikstromStatment pk h hs c cHat col e e')) com chal))))
```

希望这些优化使文本更加清晰、连贯和专业。如果有进一步的需求或更具体的调整，请告诉我。