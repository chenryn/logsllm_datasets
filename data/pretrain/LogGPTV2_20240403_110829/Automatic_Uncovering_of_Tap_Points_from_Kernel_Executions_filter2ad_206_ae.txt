1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
3
3
1
1
1
0
0
0
0
0
0
0
0
1
1
1
0
0
0
0
0
1
1
0
1
1
1
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
64
J. Zeng et al.
After we apply the resolved semantic type to each syntactic type and re-
execute our tap points uncovering, many of the context-sensitive tap points become
context-insensitive. For instance, for task struct, as illustrated in the ﬁrst row
of Table 4, these 6 syntactic types get actually merged into one, and we then can
directly use the PC for object creation and deletion without inspecting their call-
stack. Due to space reason, we report the tap points uncovering statistics for some
of the resolved semantic types in Table 4. In total, there are over 90 resolved seman-
tics, and we only report 56 of them that are visible in the slab allocators.
Performance Result. Regarding the performance of AutoTap, for each tested
kernel, our online analysis took around 12 h on average to ﬁnish the testing bench-
mark, and our oﬄine analysis took just a few minutes to process the log ﬁles and
produce the ﬁnal tap points. The dumped log ﬁle size is around 500 MB (thanks to
our encoding). The reason why our online analysis took so long is because we have
one thousand test cases to execute and also we have to perform dynamic binary
instrumentation to track object and ﬁeld propagations in our instrumented VMM.
5 Security Application
In this section, we demonstrate how to use our tap points for a particular type
of introspection application—hidden process detection. Typically when a system
is compromised, it is often very common for attackers to hide the presence of
their attack and also leave certain invisible services for future privileged access.
To achieve this, one simple way is to keep running of a privileged process, and
hide it from the system administrators through rootkit attacks.
At a high level, there are three diﬀerent categories of rootkits for process
hiding [18,25]. The ﬁrst category directly modiﬁes program binaries such as ps,
pslist, etc. The second category hooks into the call path between a user appli-
cation and the kernel by modifying system libraries (e.g., glibc), dynamic linker
structures (plt/got table), system call tables, or corresponding operating system
functions that report system status [28]. The third category manipulates kernel
data structures using the so-called direct kernel object manipulation (DKOM) [12]
attack, such as removing the process descriptor (e.g., task struct) from the
accounting list shown by ps.
Our Approach. Since AutoTap has extracted the tap points related to the
task struct, especially the creation/deletion and traversal tap points, it would
enable the monitoring and detection of the hidden processes. One intuitive app-
roach is to use the tap point that traverses all the elements in the accounting
task list. However, we did not ﬁnd such a tap point that iterates all the element
of the task list. In fact, utility command such as ps will not traverse the account-
ing list to show all the running process, and instead it extracts the process list
from the /proc ﬁle system [13].
While there are many traversal tap points for the task struct, as shown
in Table 3, there must be some traversal tap points executed by the schedule
function. Note that schedule function is very easy to identify as it is always
Automatic Uncovering of Tap Points from Kernel Executions
65
executed in the top half of the timer interrupt handler (though it can be called
in various other places), and meanwhile there must be a stack exchange (a kernel
esp write operation). Therefore, if we can identify the task struct accessed by
the schedule function, and if we can know to which task struct instance the
CPU switches, then we can identify the task struct that is to-be-executed by
the CPU.
However, we have to solve another challenge—how to identify the to-be-
executed task struct instance given that schedule function may access a
number of other task struct instances to pick up the next to-be-executed one
(deﬁned by the policy) for the execution. Fortunately, as we have noted, when
performing a context switch, there must be a stack pointer exchange, and the
new stack pointer must come from the to-be-executed process. Typically, this
stack pointer is stored in task struct. Therefore, by monitoring where the stack
pointer comes from, we identify the to-be-executed task struct instance. Recall
that we have tracked all ﬁeld (and its propagation) read, and we just need to
identify this particular ﬁeld.
More speciﬁcally, we found 123 Object Traversal tap points for task struct
in the context of schedule function. In particular, there are 76 recursive and 26
non-recursive traversal tap points. All of them are context insensitive. Part of
the reason we believe is schedule function is very unique and other functions
will not call it for other purposes other than scheduling. Among these 123 tap
points, we know one of them must be of our interest since we aim to capture
the task struct traversal. Also, we found 121 task struct Field Read, all of
which are also context insensitive. By looking at these ﬁeld read tap points,
we found there is a particular ﬁeld read tap point that uses the stack pointer
(i.e., 0xc125e3b1:mov 0x254(%edi),%esp). Interestingly, the base register edi
here actually holds the address of the to-be-executed task struct. Therefore,
we actually do not need the traversal tap points and we just need to hook this
tap point, because we can directly identify the to-be-executed process from edi.
From the above analysis, we can notice that with AutoTap, we have sig-
niﬁcantly reduced the search space of the instruction of our interest from tens
of thousands (4,422 instructions in the context of schedule function in which
a manual analysis has to analyze) to only a few hundred (123 object traversal,
and 121 ﬁeld read). With insight of how context switch is performed, we fur-
ther reduce the search space to only a few instructions (it is 0xc125e3b1:mov
0x254(%edi),%esp in our case). This is just one case we demonstrated for
task struct. Regarding many other kernel data structures, our system also
applies even though we may have to consider certain data structure speciﬁc
insight. For instance, if we want to detect hidden socket, we can use the
insight that socket must be accessed at system call send/sendto/write or
recv/recvfrom/read context.
66
J. Zeng et al.
from task list
Rootkits
Process hiding mechanism
Fake ps binary with process hiding function
Table 5. Process hiding rootkits
ps hide
libprocesshider Override libc’s readdir to hide process
LinuxFu
The Detection Algo-
rithm. We use a cross-
view comparison approach
that compares the CPU
time execution from inside
and outside to detect the
hidden processes. Note
that CPU time metric is
the most reliable source (tamper-proof) for rootkit detection. In particular, to
detect rootkit, we ﬁrst get an inside view by running ps command, and an out-
side view by counting the CPU TIME for the running process. In particular, the
inside view will show the running process PID, TTY, TIME, and CMD. Among them,
TIME is very critical and it is very challenging (nearly impossible) for attacker
to forge a value that will be equivalent to the one counted at the hypervisor
introspection layer.
Hide the process by deleting its task struct
To count the executed time for a particular process, we hook the tap points of
task struct creation at 0xc102c8be and deletion at 0xc102c7cc by replacing
them with an “int 3” instruction to trap to the hypervisor layer. Then we hook
the tap point “0xc125e3b1:mov 0x254(%edi),%esp” to get the task struct
of the to-be-executed process from edi and then we count its CPU execution
time from this moment to the next context-switch point. We keep a hash table
to store the accumulated CPU time for each process, and meanwhile we store
their PID ﬁeld. Then right after user running ps to get the inside view, we also
print the list of the live process with the PID and their CPU TIME. If there is a
discrepancy, it indicates there is a hidden process. We can notice while attacker
can change/forge all the PID ﬁeld, it is impossible for them to forge the correct
CPU TIME to mislead the outside view. That is why we call TIME is a tamper-
proof attribute for a particular process.
Experimental Result. We have implemented the above detection algorithm
in KVM-2.6.37 and tested with a guest Linux kernel 2.6.32.8. We only need to
hook 3 tap points: creation, deletion and ﬁeld propagation read. We used three
rootkits to test our detection capability. As show in Table 5, these rootkits cover
all the three basic tricks to hide a particular process. Through our cross view
comparison, we have successfully detected all of these hidden processes.
Regarding the performance impact of our rootkit detector, we used a set of
benchmarks including SPEC2006, Apache, and 7zip to evaluate the performance
overhead introduced by our detection at KVM hypervisor layer, and we com-
pared the results on the Native-KVM and our Tapping-KVM. As expected, there
is not noticeable performance overhead for these benchmarks due to our light-
weight instrumentation at the hypervisor layer. We measured that the average
overhead for them is about 2.7 %.
Automatic Uncovering of Tap Points from Kernel Executions
67
6 Limitations and Future Work
First and foremost, AutoTap uses dynamic analysis to uncover the tap points
and its eﬀectiveness relies on the coverage of the dynamic analysis. Therefore, any
kernel path coverage techniques (e.g., guided-fuzzing) would improve AutoTap.
On the other hand, we can also notice that sometimes an incomplete coverage
can still lead to a complete uncovering of the tap points. For instance, as shown
for the task struct creation/deletion tap points, while we may not be able to
exercise all the kernel path and ﬁnd out all (context-sensitive) tap points, we
can notice that these tap points all eventually become context-insensitive and
we can just use the PC that creates and deletes the task struct instance as the
tap point.
Second, currently AutoTap only reveals the object creation and deletion,
ﬁeld read, and object traversal tap points and demonstrates their use cases.
We believe in addition to these tap points, there will be also other useful ones.
Another future eﬀort is to uncover more tap points and investigate new applica-
tions. A possible immediate future work is to identify the hot (or cold) read/write
ﬁeld tap points, namely, frequently read/write ﬁeld, which might be useful to
identify the likely-invariants (e.g., a ﬁeld never gets changed) of object ﬁeld. The
other possible use case is to detect the hidden socket by using our tap points.
Third, when kernel has address space layout randomization (ASLR) enabled
(note that since kernel version 3.14, Linux began to randomize kernel address
space), the tap points we discovered from dynamic execution might not work in
other executions. An immediate ﬁx for this problem is to integrate our recent ker-
nel ASLR derandomization eﬀort [16], which exploited using various signatures
from kernel code and data to derandomize the kernel address space.
Finally, while we have demonstrated our techniques working for Linux kernel,
we would like to validate the generality of our system with other kernels. We plan
to extend our analysis to FreeBSD, since it is also open source and we can validate
our results easily. Eventually, we also would like to test our system with the closed
source OS kernel such as Microsoft Windows. These are other future works.
7 Related Work
Tap Points Uncovering. Recently, Dolan-Gavitt et al. [10] presented TZB, the
ﬁrst system that can mine (memgrep) the memory access points for user level
applications, to identify the places for active monitoring. While TZB and Auto-
Tap share similar goal (TZB directly inspires AutoTap), we focus on diﬀerent
applications and use diﬀerent techniques. Speciﬁcally, TZB focused on the user
level applications such as web browser, whereas AutoTap exclusively focused
on OS kernel. TZB starts from visible strings (memgrep type of approach can
apply here), whereas AutoTap faces diversiﬁed, many non-string data struc-
tures in OS kernel and it starts from syntactic type of kernel object and then
semantic type and then execution context to eventually derive the tap points for
introspection.
68
J. Zeng et al.
Data Structure Reverse Engineering. Over the past decade, there are signif-
icant eﬀorts on data structure reverse engineering, or more broadly type inference
with executables [7]. Earlier attempts include aggregate structure identiﬁcation
(ASI) [23], value set analysis (VSA) [3,24]. Recently, Laika [9], REWARDS [22],
TIE [20], Howard [26], Argos [30], and PointerScope [31] all aim to infer the (cer-
tain) data structure types from binary code. To infer the semantic type of data
structures, while AutoTap uses the basic approach proposed in REWARDS, it
extends it to OS kernels. Also, it combines other knowledge such as the data
structure deﬁnitions for kernel driver development to resolve more semantic
types, because of the large amount of point-to related kernel data structures.
However, REWARDS only uses the type of arguments and return values from
standard libraries for the inference.
Virtual Machine Introspection. VMI [15] is a security analysis technique that
pushes the traditional in-box analysis into the outside hypervisor layer. It has been
proposed as an eﬀective means for kernel rootkit detection (e.g., [8,11,12,17] and
malware analysis (e.g.,. [19,25]). While there are a number of eﬀorts of using VMI
or memory analysis technique (e.g., [5,8,21]) for hidden process detection (e.g., [11,
17,18]), in this work we enrich these knowledge with a tamper-proof approach by
applying the tap points related to process descriptor and build a robust hidden
process detection tool.
8 Conclusion
We have presented AutoTap, the ﬁrst system that can automatically uncover
the tap points of kernel objects of introspection interest from kernel executions.
Speciﬁcally, starting from the interface of system call, the exported kernel APIs,
and the data structure deﬁnitions for kernel driver developers, AutoTap auto-
matically tracks kernel objects, resolves their kernel execution context, and asso-
ciates the accessed context with the objects, from which to derive the tap points
based on how an object is accessed. The experimental results with a number
of Linux kernel binaries show that AutoTap is able to automatically uncover
all the possible observed tap points for a particular type of object, which would
be very challenging to achieve with manual analysis. We have applied the tap
points uncovered by AutoTap to build a novel hidden process detection tool
that can capture all the existing attacks including the DKOM based with only
2.7 % overhead on our tested benchmarks.
Acknowledgement. We thank the anonymous reviewers for their invaluable feed-
back. This research was partially supported by AFOSR under grant FA9550-14-1-0119
and FA9550-14-1-0173, and NSF CAREER award 1453011. Any opinions, ﬁndings, con-
clusions, or recommendations expressed are those of the authors and not necessarily of
the AFOSR and NSF.
Automatic Uncovering of Tap Points from Kernel Executions
69
References
1. Linux test project. https://github.com/linux-test-project
2. QEMU: an open source processor emulator. http://www.qemu.org/
3. Balakrishnan, G., Reps, T. Analyzing memory accesses in ×86 executables. In:
CC, March 2004
4. Bauman, E., Ayoade, G., Lin, Z.: A survey on hypervisor based monitoring:
approaches, applications, and evolutions. ACM Comput. Surv. 48(1), 10:1–10:33
(2015)
5. Bianchi, A., Shoshitaishvili, Y., Kruegel, C., Vigna, G.: Blacksheep: detecting com-
promised hosts in homogeneous crowds. In: Proceedings of the 2012 ACM Con-
ference on Computer and Communications Security (CCS 2012), Raleigh, North
Carolina, USA, pp. 341–352 (2012)
6. Bovet, D., Cesati, M.: Understanding The Linux Kernel. Oreilly & Associates Inc.,
Sebastopol (2005)
7. Caballero, J., Lin, Z.: Type inference on executables. ACM Comput. Surv. 48(4),
65:1–65:35 (2016)
8. Carbone, M., Cui, W., Lu, L., Lee, W., Peinado, M., Jiang, X.: Mapping kernel
objects to enable systematic integrity checking. In: The 16th ACM Conference
on Computer and Communications Security (CCS 2009), Chicago, IL, USA, pp.
555–565 (2009)
9. Cozzie, A., Stratton, F., Xue, H., King, S.T.: Digging for data structures. In:
Proceeding of 8th Symposium on Operating System Design and Implementation
(OSDI 2008), San Diego, CA, pp. 231–244, December 2008
10. Dolan-Gavitt, B., Leek, T., Hodosh, J., Lee, W.: Tappan zee (north) bridge: mining
memory accesses for introspection. In: Proceedings of the ACM Conference on
Computer and Communications Security (CCS) (2013)
11. Dolan-Gavitt, B., Leek, T., Zhivich, M., Giﬃn, J., Lee, W.: Virtuoso: narrowing the
semantic gap in virtual machine introspection. In: Proceedings of the 32nd IEEE
Symposium on Security and Privacy, Oakland, CA, USA, pp. 297–312 (2011)
12. Dolan-Gavitt, B., Srivastava, A., Traynor, P., Giﬃn, J.: Robust signatures for
kernel data structures. In: Proceedings of the 16th ACM Conference on Computer
and Communications Security (CCS 2009), Chicago, Illinois, USA, pp. 566–577.
ACM (2009)
13. Fu, Y., Lin, Z.: Space traveling across VM: automatically bridging the semantic gap
in virtual machine introspection via online kernel data redirection. In: Proceedings
of 33rd IEEE Symposium on Security and Privacy, May 2012
14. Fu, Y., Lin, Z., Brumley, D.: Automatically deriving pointer reference expressions
from executions for memory dump analysis. In: Proceedings of the 2015 ACM
SIGSOFT International Symposium on Foundations of Software Engineering (FSE
2015), Bergamo, Italy, September 2015
15. Garﬁnkel, T., Rosenblum, M.: A virtual machine introspection based architecture
for intrusion detection. In: Proceedings Network and Distributed Systems Security
Symposium (NDSS 2003), February 2003
16. Gu, Y., Lin, Z.: Derandomizing kernel address space layout for introspection and
forensics. In: Proceedings of the 6th ACM Conference on Data and Application
Security and Privacy. ACM, New Orelans (2016)
17. Jiang, X., Wang, X., Xu, D.: Stealthy malware detection through VMM-based
out-of-the-box semantic view reconstruction. In: Proceedings of the 14th ACM
Conference on Computer and Communications Security (CCS 2007), Alexandria,
Virginia, USA, pp. 128–138. ACM (2007)
70
J. Zeng et al.
18. Jones, S.T., Arpaci-Dusseau, A.C., Arpaci-Dusseau, R.H.: VMM-based hidden
process detection and identiﬁcation using lycosid. In: Proceedings of the Fourth
ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environ-
ments (VEE 2008), Seattle, WA, USA, pp. 91–100. ACM (2008)
19. Lanzi, A., Sharif, M.I., Lee, W.: K-tracer: a system for extracting kernel malware
behavior. In: Proceedings of the 2009 Network and Distributed System Security
Symposium, San Diego, California, USA (2009)
20. Lee, J., Avgerinos, T., Brumley, D., TIE: principled reverse engineering of types
in binary programs. In: NDSS, February 2011
21. Lin, Z., Rhee, J., Zhang, X., Xu, D., Jiang, X. SigGraph: Brute force scanning
of kernel data structure instances using graph-based signatures. In: Proceedings
of the 18th Annual Network and Distributed System Security Symposium (NDSS
2011), San Diego, CA, February 2011
22. Lin, Z., Zhang, X., Xu, D.: Automatic reverse engineering of data structures from
binary execution. In: Proceedings of the 17th Annual Network and Distributed
System Security Symposium (NDSS 2010), San Diego, CA, February 2010
23. Ramalingam, G., Field, J., Tip, F.: Aggregate structure identiﬁcation and its appli-
24. Reps, T., Balakrishnan, G.: Improved memory-access analysis for ×86 executables.
cation to program analysis. In: POPL, January 1999
In: CC, March 2008
25. Riley, R., Jiang, X., Xu, D.: Multi-aspect proﬁling of kernel rootkit behavior. In:
Proceedings of the 4th ACM European conference on Computer systems (EuroSys
2009), Nuremberg, Germany, pp. 47–60 (2009)
26. Slowinska, A., Stancescu, T., Bos, H.: Howard: a dynamic excavator for reverse
engineering data structures. In: Proceedings of the 18th Annual Network and Dis-
tributed System Security Symposium (NDSS 2011), San Diego, CA, February 2011
27. Sumner, W.N., Zheng, Y., Weeratunge, D., Zhang, X.: Precise calling context
encoding. In: Proceedings of the 32nd ACM/IEEE International Conference on
Software Engineering, (ICSE 2010), Cape Town, South Africa, vol. 1, pp. 525–534.
ACM (2010)
28. Wang, Z., Jiang, X., Cui, W., Ning, P.: Countering kernel rootkits with lightweight
hook protection. In: Proceedings of the 16th ACM Conference on Computer and
Communications Security (CCS 2009), Chicago, Illinois, USA, pp. 545–554 (2009)
29. Zeng, J., Fu, Y., Lin, Z. Pemu: a pin highly compatible out-of-VM dynamic binary
instrumentation framework. In: The 11th ACM SIGPLAN/SIGOPS International
Conference on Virtual Execution Environment (VEE 2015), Istanbul, Turkey,
March 2015
30. Zeng, J., Lin, Z.: Towards automatic inference of kernel object semantics from
binarycode. In: Proceedings of the 18th International Symposium on Research in
Attacks, Intrusions and Defenses (RAID 2015), Kyoto, Japan, November 2015
31. Zhang, M., Prakash, A., Li, X., Liang, Z., Yin, H.: Identifying and analysing pointer
misuses for sophisticated memory-corruption exploit diagnosis. In: NDSS, February
2012