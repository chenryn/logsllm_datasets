     /var/www/html/output.txt
    , a file located on the web root of the target web server:
    在这种情况下，当数据库运行不安全的SQL查询时，您需要将信息存储在某个地方。在MySQL中，SELECT...INTO语句告诉数据库将查询结果存储在本地计算机上的输出文件中。例如，下面的查询将导致数据库将管理员密码写入到位于目标Web服务器的Web根目录下的/var/www/html/output.txt文件中：
SELECT Password FROM Users WHERE Username='admin'
INTO OUTFILE '/var/www/html/output.txt'
    We upload to the
     /var/www/html
    directory because it’s the default web directory for many Linux web servers. Then you can simply access
    the information by navigating to the
     /output.txt
    page on the target:
     https://example.com/output.txt
    . This technique is also a good way to detect second-order SQL injections, since in second-order SQL injections, there is often a time delay between the malicious input and the SQL query being executed.
    我们上传到/var/www/html目录，因为它是许多Linux Web服务器的默认Web目录。然后，您可以通过导航到目标上的/output.txt页面（https://example.com/output.txt）简单地访问信息。这种技术还是检测二阶SQL注入的好方法，因为在二阶SQL注入中，恶意输入和执行SQL查询之间经常存在时间延迟。
    Let’s put this information in context. Say that when you browse
     example.com
    , the application adds you to a database table to keep track of currently active users. Accessing a page with a cookie, like this
    让我们将这个信息放入背景中。假设当您浏览example.com时，该应用程序会将您添加到数据库表中以跟踪当前活跃用户。访问一个带有 cookie 的页面，就像这样。
GET /
Host: example.com
Cookie: user_id=2, username=vickie
    will cause the application to add you to a table of active users. In this example, the ActiveUsers table contains only two columns: one for the user ID and one for the username of the logged-in user. The application uses an
     INSERT
    statement to add you to the ActiveUsers table.
     INSERT
    statements add a row into the specified table with the specified values:
    将会使应用程序将您添加到活跃用户表中。在此示例中，ActiveUsers表仅包含两列：一个用于用户ID，一个用于已登录用户的用户名。应用程序使用INSERT语句将您添加到ActiveUsers表中。INSERT语句将指定的值添加到指定表中的一行：
INSERT INTO ActiveUsers
VALUES ('2', 'vickie');
    In this case, an attacker can craft a malicious cookie to inject into the
     INSERT
    statement:
    在这种情况下，攻击者可以制作恶意的 cookie，并注入到 INSERT 语句中。
GET /
Host: example.com
Cookie: 1user_id="2', (SELECT Password FROM Users
WHERE Username='admin'
INTO OUTFILE '/var/www/html/output.txt'));-- ", username=vickie
    This cookie
     1
    will, in turn, cause the
     INSERT
    statement to save the admin’s password into the
     output.txt
    file on the victim server:
    这个Cookie 1会触发INSERT语句将管理员密码保存在受害服务器的output.txt文件中。
INSERT INTO ActiveUsers
VALUES ('2', (SELECT Password FROM Users
WHERE Username='admin'
INTO OUTFILE '/var/www/html/output.txt'));-- ', 'vickie');
    Finally, you will find the password of the admin account stored into the
     output.txt
    file on the target server.
    最后，你会在目标服务器的output.txt文件中找到管理员账户的密码。
    Step 4: Look for NoSQL Injections
    Databases don’t always use SQL.
     NoSQL
    , or
     Not Only SQL
    , databases are those that don’t use the SQL language. Unlike SQL databases, which store data in tables, NoSQL databases store data in other structures, such as key-value pairs and graphs. NoSQL query syntax is database-specific, and queries are often written in the programming language of the application. Modern NoSQL databases, such as MongoDB, Apache CouchDB, and Apache Cassandra, are also vulnerable to injection attacks. These vulnerabilities are becoming more common as NoSQL rises in popularity.
    数据库并不一定使用SQL语言。NoSQL（非关系型数据库）是指不使用SQL语言的数据库。和SQL数据库不同的是，NoSQL数据库把数据存储在其他结构中，例如键值对和图形数据。NoSQL查询语法是特定于数据库的，并且查询通常是在应用程序的编程语言中编写的。现代NoSQL数据库（如MongoDB，Apache CouchDB和Apache Cassandra）也容易受到注入攻击的影响。随着NoSQL日益流行，这些漏洞变得越来越普遍。
    Take MongoDB, for example. In MongoDB syntax,
     Users.find()
    returns users that meet a certain criteria. For example, the following query returns users with the username
     vickie
    and the password
     password123
    :
    以 MongoDB 为例。在 MongoDB 语法中，Users.find() 返回满足某个条件的用户。例如，以下查询返回用户名为 vickie，密码为 password123 的用户：
Users.find({username: 'vickie', password: 'password123'});
    If the application uses this functionality to log in users and populates the database query directly with user input, like this:
    如果应用程序使用此功能来登录用户并直接使用用户输入填充数据库查询语句，例如：
Users.find({username: $username, password: $password});
    attackers can submit the password
     {$ne: ""}
    to log in as anyone. For example, let’s say that the attacker submits a username of
     admin
    and a password of
     {$ne: ""}
    . The database query would become as follows:
    攻击者可以提交密码{$ne: ""}以登录任何人。例如，假设攻击者提交admin用户名和密码{$ne: ""}。数据库查询将变为以下形式：
Users.find({username: 'admin', password: {$ne: ""}});
    In MongoDB,
     $ne
    selects objects whose value is not equal to the specified value. Here, the query would return users whose username is
     admin
    and password isn’t equal to an empty string, which is true unless the admin has a blank password! The attacker can thus bypass authentication and gain access to the admin account.
    在MongoDB中，$ne选择值不等于指定值的对象。因此，查询将返回用户名为admin且密码不等于空字符串的用户，这是正确的，除非管理员有空白密码！攻击者因此可以绕过身份验证并访问管理员帐户。
    Injecting into MongoDB queries can also allow attackers to execute arbitrary JavaScript code on the server. In MongoDB, the
     $where
    ,
     mapReduce
    ,
     $accumulator
    , and
     $function
    operations allow developers to run arbitrary JavaScript. For example, you can define a function within the
     $where
    operator to find users named
     vickie
    :
    注入到 MongoDB 查询中也可以允许攻击者在服务器上执行任意 JavaScript 代码。在 MongoDB 中，$where、mapReduce、$accumulator 和 $function 操作允许开发者运行任意 JavaScript。例如，您可以在 $where 运算符中定义一个函数来查找名为 vickie 的用户。
Users.find( { $where: function() {
   return (this.username == 'vickie') } } );
    Say the developer allows unvalidated user input in this function and uses that to fetch account data, like this:
    假设开发人员在此函数中允许未验证的用户输入，并使用该输入来获取账户数据，就像这样：
Users.find( { $where: function() {
   return (this.username == $user_input) } } );
    In that case, an attacker can execute arbitrary JavaScript code by injecting it into the
     $where
    operation. For example, the following piece of malicious code will launch a denial-of-service (DoS) attack by triggering a never-ending
     while
    loop:
    在这种情况下，攻击者可以通过将恶意代码注入到$where操作中来执行任意的JavaScript代码。例如，下面这段恶意代码将触发一个无限循环，从而发起拒绝服务（DoS）攻击：
Users.find( { $where: function() {
   return (this.username == 'vickie'; while(true){};) } } );
    The process of looking for NoSQL injections is similar to detecting SQL injections. You can insert special characters such as quotes (
     ' "
    ), semicolons (
     ;
    ), and backslashes (
     \
    ), as well as parentheses (
     ()
    ), brackets(
     []
    ), and braces (
     {}
    ) into user-input fields and look for errors or other anomalies. You can also automate the hunting process by using the tool NoSQLMap (
     https://github.com/codingo/NoSQLMap/
    ).
    寻找NoSQL注入的过程类似于检测SQL注入。您可以在用户输入字段中插入特殊字符，例如引号（'“），分号（;）和反斜杠（\），以及括号（（）），方括号（[]）和大括号（{}），并查找错误或其他异常。您还可以使用NoSQLMap工具（https://github.com/codingo/NoSQLMap/）自动化搜索过程。
    Developers can prevent NoSQL injection attacks by validating user input and avoiding dangerous database functionalities. In MongoDB, you can disable the running of server-side JavaScript by using the
     --noscripting
    option in the command line or setting the
     security.javascriptEnabled
    flag in the configuration file to
     false
    . Find more information at
     https://docs.mongodb.com/manual/faq/fundamentals/index.html
    .
    开发人员可以通过验证用户输入和避免使用危险的数据库功能来防止NoSQL注入攻击。在MongoDB中，您可以通过在命令行中使用--noscripting选项或将配置文件中的security.javascriptEnabled标志设置为false来禁用服务器端JavaScript的运行。更多信息请访问https://docs.mongodb.com/manual/faq/fundamentals/index.html。
    Additionally, you should follow the
     principle of least privilege
    when assigning rights to applications. This means that applications should run with only the privileges they require to operate. For example, when an application requires only read access to a file, it should not be granted any write or execute permissions. This will lower your risk of complete system compromise during an attack.
    此外，在分配应用程序权限时，应遵循最小特权原则。这意味着应用程序应仅以其操作所需的权限运行。例如，当应用程序仅需要读取文件的访问权限时，不应授予任何写入或执行权限。这将降低您在攻击期间受到完全系统妥协的风险。
    Escalating the Attack
    Attackers most often use SQL injections to extract information from the database. Successfully collecting data from a SQL injection is a technical task that can sometimes be complicated. Here are some tips you can use to gain information about a target for exploitation.
    攻击者最常使用SQL注入从数据库中提取信息。成功从SQL注入收集数据是一项技术任务，有时可能会很复杂。以下是一些提示，可用于获取有关目标的信息以进行利用。
    Learn About the Database
    First, it’s useful to gain information about the structure of the database. Notice that many of the payloads that I’ve used in this chapter require some knowledge of the database, such as table names and field names.
    首先，获取有关数据库结构的信息非常有用。请注意，我在本章中使用的许多有效载荷都需要一些了解数据库的知识，例如表名和字段名。
    To start with, you need to determine the database software and its structure. Attempt some trial-and-error SQL queries to determine the database version. Each type of database will have different functions for returning their version numbers, but the query should look something like this:
    首先，您需要确定数据库软件及其结构。尝试一些试错的 SQL 查询，以确定数据库版本。每种类型的数据库都有不同的返回版本号的功能，但查询应该看起来像这样：
SELECT Title, Body FROM Emails
WHERE Username='vickie'
UNION SELECT 1, @@version;--
    Some common commands for querying the version type are
     @@version
    for Microsoft SQL Server and MySQL,
     version()
    for PostgreSQL, and
     v$version
    for Oracle. The
     1
    in the
     UNION SELECT 1,
     DATABASE_VERSION_QUERY
     ;--
    line is necessary, because for a
     UNION
    statement to work, the two
     SELECT
    statements it connects need to have the same number of columns. The first
     1
    is essentially a dummy column name that you can use to match column numbers.
    查询版本类型的一些常见命令包括用于 Microsoft SQL Server 和 MySQL 的@@version，用于 PostgreSQL 的version()以及用于 Oracle 的v$version。UNION SELECT 1, DATABASE_VERSION_QUERY;--行中的1是必需的，因为要使 UNION 语句起作用，它连接的两个 SELECT 语句需要具有相同数量的列。第一个1实际上是一个虚拟列名，您可以使用它来匹配列号。
    Once you know the kind of database you’re working with, you could start to scope it out further to see what it contains. This query in MySQL will show you the table names of user-defined tables:
    一旦你知道你正在处理的数据库类型，你可以进一步确认它包含了什么内容。在MySQL中，以下查询可以展示用户自定义表的表名：
SELECT Title, Body FROM Emails
WHERE Username='vickie'
UNION SELECT 1, table_name FROM information_schema.tables
    And this one will show you the column names of the specified table. In this case, the query will list the columns in the Users table:
    这个将会显示指定表格的列名。在这个案例中，查询会列出 Users 表格中的列：
SELECT Title, Body FROM Emails
WHERE Username='vickie'
UNION SELECT 1, column_name FROM information_schema.columns
WHERE table_name = 'Users'
    All of these techniques are possible during classic and blind attacks. You just need to find a different way to fit those commands into your constructed queries. For instance, you can determine a database’s version with a time-based technique like so:
    所有这些技术都可以在经典攻击和盲目攻击期间使用。您只需要找到将这些命令嵌入您构建的查询中的不同方法。例如，您可以使用基于时间的技术确定数据库的版本，如下所示:
SELECT * FROM PremiumUsers WHERE Id='2'
UNION SELECT IF(SUBSTR(@@version, 1, 1) = '1', SLEEP(10), 0); --
    After you’ve learned about the database’s structure, start targeting certain tables to exfiltrate data that interests you.