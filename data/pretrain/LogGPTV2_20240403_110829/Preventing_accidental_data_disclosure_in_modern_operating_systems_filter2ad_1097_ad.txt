dard way. Let the workﬂow have label LW and the ﬁle have
label LF . If the UI screen writes to a ﬁle, the ﬁle’s label is
updated to LW t LF . If the UI screen reads from a ﬁle, the
UI workﬂow label becomes LW t LF .
To accomplish these updates, Aquifer relies on a kernel
module and the userspace Aquifer Service. When a ﬁle is
read or written, a kernel hook extracts LF from the ﬁle
(e.g., from its xattr) and notiﬁes the Aquifer Service via
an upcall, sending LF and the access mode. The Aquifer
Service updates LW (if necessary) and returns a new LF (if
necessary). The kernel module then stores the new LF with
the ﬁle (e.g., in its xattr) if necessary.
Finally, propagating labels to persistent storage using ﬁle
granularity means that Aquifer cannot handle sub-ﬁle data
items such as database records. This limitation is currently
in place for implementation and performance reasons.
6.
IMPLEMENTATION
We implemented Aquifer for Android v4.0.3 (ICS) and the
Linux Kernel v3.0.8 (omap). Aquifer adds approximately
2,200 lines of code in the Android Framework, and approxi-
mately 1,000 lines in the kernel. The source code is available
at http://research.csc.ncsu.edu/security/aquifer.
The core userspace implementation is the Aquifer Service,
a new system service responsible for maintaining the work-
ﬂow abstraction and policy language calculus. The Aquifer
Service is invoked by hooks placed in Android’s Activity-
Manager service. These hooks inform Aquifer when system
state changes a↵ect the UI workﬂow state. The hooks are
also used to ﬁlter intent resolution before presenting results
to the user. The Aquifer Service also exposes an API to
applications to safely add and modify their owner policies.
Aquifer uses a Linux security module (LSM) to mediate
ﬁle access and a ﬁle descriptor transfer between processes.
We use the file_permission LSM hook to only propagate
the label if the data is read or written. The ﬁle policy is
stored in extended attributes (xattrs), and the Aquifer LSM
forwards ﬁle events and ﬁle policy to the Aquifer Service via
a netlink socket. We also ensure that the SDcard is also
formatted to support xattrs.
The ﬁnal component of our implementation is the Aquifer
device driver, which provides a channel for the userspace
Aquifer Service to communicate with the Aquifer LSM. The
Aquifer Service uses this interface to manipulate the network
access privilege of a process. The Aquifer Service also sets
up the netlink socket with the LSM via this interface to
receive events about ﬁle accesses.
7. EVALUATION
We now evaluate Aquifer by accessing the need and appro-
priateness of its protection, proving the safety of label joins,
and measuring the performance overhead. We also provide
three case studies to demonstrate Aquifer in practice.
7.1 Application Survey
To understand the need for Aquifer and addressing the
data intermediary problem, we performed a manual survey
of Android applications.
Survey Setup: We selected the top 50 free Android ap-
plications from 10 categories in the Google Play Store (500
1035Table 1: Application Survey Results
Characteristic
Data sources
Data intermediaries
Value from Export Policy
Value from Regulate Policy
Number of Apps
85 (17%)
140 (28%)
70 (14%)
78 (15.6%)
apps total). We chose categories based on use of privacy-
sensitive application-speciﬁc data or the ability to use such
data. For example, we omitted game-related categories,
news and magazines, etc. We selected the following cate-
gories: Business, Communication, Media and Video, Mu-
sic and Audio, Photography, Personalization, Productivity,
Shopping, Social, and Tools.
Our application survey began by reading the market de-
scription of the application. For example, we identiﬁed if it
creates or acquires data from the cloud. If we could iden-
tify a potential need for Aquifer, we studied the applica-
tion manifest and manually ran the application as needed.
Speciﬁcally, we looked at the types of interaction an applica-
tion uses, e.g., complete isolation, data sharing in workﬂows,
storing data in shared storage, as well as the type of data
that was shared, i.e., we ignored data with no security or
privacy value. Finally, we created a list of workﬂows that
each app can be a part of to gain insight into how Aquifer’s
policies could enhance application security.
Results: Table 1 provides the statistics from our study. We
found a number of data sources that produced and shared
data. Apps that did not produce any data, but processed
data from other apps, were classiﬁed as intermediaries. We
identiﬁed a larger number of intermediaries, which suggests
more applications provide data services than produce data.
This motivates the need to address the data intermediary
problem. We also categorized applications based on the use-
fulness of Aquifer’s export and required restriction policies.
These results motivate the appropriateness of Aquifer policy.
The application study also identiﬁed many interesting use
cases. For example, some applications facilitate business
meetings by sharing of ﬁles during meetings. Aquifer can be
used to help protect conﬁdential business ﬁles against inad-
vertent exposure. We also identiﬁed many free applications
that provide value-add capabilities, e.g., image transforma-
tion. There are reasons why users may wish to edit pho-
tographs on the phone. The user may wish to ensure the
intermediary does not export copies, particularly if the user
is a professional photographer.
7.2 Security Evaluation
Aquifer speciﬁcally seeks to protect application-speciﬁc
data that cannot be enforced by system security policy. The
security and privacy sensitivity of application-speciﬁc data
is often only known to the developer and the user. We seek
to reduce the onus on the user by having developers specify
security policy. We note that app developers already partic-
ipate in policy by specifying which permissions an app uses,
and assigning permissions to restrict app interfaces.
Aquifer allows app developers to specify host export re-
strictions on data used by a UI workﬂow. The policy for a UI
workﬂow is maintained in a workﬂow label L (Deﬁnition 4).
When information from one UI workﬂow is propagated to
another UI workﬂow via ﬁles, Aquifer merges the two work-
ﬂow labels using the join (t) operator (Deﬁnition 8). Sec-
Table 2: Microbenchmark Results
Android
Benchmark
App load
App ﬁlter
Net access
Policy change
File Read (1MB)
File Write (1MB)
Aquifer
Overhead
188.49±5.36 ms 192.07±6.30 ms
194.12±7.91 ms 195.22±7.52 ms
108.60±6.48 ms 109.64±6.31 ms
1.98±1.27 ms
5.23±0.22 ms
25.44±0.86 ms
4.76±0.09 ms
23.89±0.45 ms
-
1.9%
0.55%
0.53%
-
9.87%
6.49%
tion 4 claimed the join operation ensures the resulting label
is at least as restrictive as both the original labels.
We formally prove the safety of the join operation and
hence of the Aquifer policy language. We do this in two
parts. First, we deﬁne an e↵ective restriction relation that
ensures the evaluated policy is more restrictive. Then, we
deﬁne an owner restriction relation that ensures that all of
an owner’s restrictions are maintained. This is important,
because while L2 may be e↵ectively more restrictive than
L1, an owner’s restrictions may be changed at a later time
by another owner such that L2 is no longer more restrictive
than L1. With these two deﬁnitions, we can deﬁne an over-
all restriction relation that is needed to prove the safety of
Aquifer. The formal proof is provided in Appendix A.
7.3 Performance Evaluation
To understand the performance overhead of Aquifer, we
performed several microbenchmarks. The experiments were
performed on a Samsung Galaxy Nexus (maguro) running
Android v4.0.3 and Aquifer built on the same version. We
performed each experiment at least 50 times. Average re-
sults with 95% conﬁdence intervals are shown in Table 2.
App load time: Aquifer initializes its UI workﬂow struc-
tures when the ﬁrst application is loaded. This consists of
creating a new label and data structures for WV and WR to
maintain the workﬂow state. We compared the time to start
the ﬁrst application of a UI workﬂow in Aquifer to a baseline
application load time in Android. The average overhead is
3.58 ms, which is negligible.
App ﬁltering: Aquifer ﬁlters the potential target appli-
cations when Android uses an implicit intent to start an
activity component. We measured the time between send-
ing an intent message and the resolution of the ﬁnal list of
applications presented to the user. Aquifer only causes a
negligible delay of 1.1 ms.
Network access check: Aquifer places a hook in the ker-
nel that is called every time a process attempts to access
the network. For this experiment, we created an applica-
tion with an activity component that attempts to access
the network repeatedly. Since Android already performs a
similar check to enforce its INTERNET permission, Aquifer’s
additional checks have negligible impact.
Workﬂow policy change: An application with an active
activity can modify the UI workﬂow policy label, which re-
quires recalculation of the e↵ective policy and reassignment
of network privileges to all workﬂow participants. This pol-
icy re-evaluation only takes 1.98 ms.
Label propagation on read and write: Each ﬁle read
operation requires Aquifer to retrieve the ﬁle’s label from
its xattr and join it to the workﬂow’s label. Each ﬁle write
operation requires Aquifer to retrieve the ﬁle’s label, mod-
ify it, and store the new label. For this experiment, we
measured the overhead of reading and writing a 1MB ﬁle
1036)
s
d
n
o
c
e
s
i
l
l
i
m
(
e
m
T
i
)
s
d
n
o
c
e
s
i
l
l
i
m
(
e
m
T
i
 10
 8
 6
 4
 2
 0
 50
 40
 30
 20
 10
 0
Aquifer Read
Android Read
148 200 300 400 500 600 700 800 9001000
No 
 Policy
Policy Size (bytes)
(a) File Read
Aquifer Write
Android Write
No 
 Policy
148 200 300 400 500 600 700 800 9001000
Policy Size (bytes)
(b) File Write
Figure 4: Aquifer File Label Propagation Time. Er-
ror bars indicate 95% conﬁdence intervals
with a small workﬂow policy. We performed each read and
write 50 times, ﬂushing after each write, and sleeping 500
ms between consecutive measurements. Table 2 shows an
overhead of 6.49% for writes and 9.87% for reads. Note that
while Aquifer writes are more complex than reads, the read
overhead is greater, because the read time is signiﬁcantly
less than the write time. Furthermore, a production version
of Aquifer could cache policies in memory to avoid unneces-
sary xattr operations.
To further investigate the read and write overhead, we
performed a more detailed study of the time required. We