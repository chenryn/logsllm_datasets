### Workflow and File Labeling

Let the workflow have a label \( LW \) and the file have a label \( LF \). When the UI screen writes to a file, the file’s label is updated to \( LW \sqcup LF \). Conversely, if the UI screen reads from a file, the UI workflow label becomes \( LW \sqcup LF \).

### Kernel and Userspace Components

To facilitate these updates, Aquifer relies on a kernel module and the userspace Aquifer Service. When a file is read or written, a kernel hook extracts \( LF \) from the file (e.g., from its extended attributes, xattr) and notifies the Aquifer Service via an upcall, sending \( LF \) and the access mode. The Aquifer Service then updates \( LW \) (if necessary) and returns a new \( LF \) (if necessary). The kernel module subsequently stores the new \( LF \) with the file (e.g., in its xattr) if required.

### Limitations

Propagating labels to persistent storage at the file granularity means that Aquifer cannot handle sub-file data items such as database records. This limitation is currently in place due to implementation and performance considerations.

### Implementation

We implemented Aquifer for Android v4.0.3 (ICS) and the Linux Kernel v3.0.8 (omap). The implementation adds approximately 2,200 lines of code in the Android Framework and approximately 1,000 lines in the kernel. The source code is available at [http://research.csc.ncsu.edu/security/aquifer](http://research.csc.ncsu.edu/security/aquifer).

#### Core Userspace Implementation

The core userspace component is the Aquifer Service, a new system service responsible for maintaining the workflow abstraction and policy language calculus. The Aquifer Service is invoked by hooks placed in Android’s ActivityManager service, which inform Aquifer when system state changes affect the UI workflow state. These hooks also filter intent resolution before presenting results to the user. Additionally, the Aquifer Service exposes an API to applications, allowing them to safely add and modify their owner policies.

#### Linux Security Module (LSM)

Aquifer uses a Linux security module (LSM) to mediate file access and file descriptor transfers between processes. The `file_permission` LSM hook is used to propagate the label only if the data is read or written. The file policy is stored in extended attributes (xattrs), and the Aquifer LSM forwards file events and file policy to the Aquifer Service via a netlink socket. We ensure that the SD card is formatted to support xattrs.

#### Aquifer Device Driver

The final component is the Aquifer device driver, which provides a communication channel between the userspace Aquifer Service and the Aquifer LSM. The Aquifer Service uses this interface to manipulate the network access privileges of a process and to set up the netlink socket with the LSM to receive events about file accesses.

### Evaluation

We evaluate Aquifer by assessing the need and appropriateness of its protection, proving the safety of label joins, and measuring the performance overhead. We also provide three case studies to demonstrate Aquifer in practice.

#### Application Survey

To understand the need for Aquifer and address the data intermediary problem, we conducted a manual survey of Android applications.

**Survey Setup:**
- We selected the top 50 free Android applications from 10 categories in the Google Play Store (500 apps total).
- Categories were chosen based on the use of privacy-sensitive application-specific data or the ability to use such data.
- Selected categories: Business, Communication, Media and Video, Music and Audio, Photography, Personalization, Productivity, Shopping, Social, and Tools.

**Methodology:**
- We began by reading the market description of each application to identify potential data sources and intermediaries.
- For applications with a potential need for Aquifer, we studied the application manifest and manually ran the application as needed.
- We focused on interaction types, such as complete isolation, data sharing in workflows, and storing data in shared storage.
- We created a list of workflows for each app to gain insight into how Aquifer’s policies could enhance application security.

**Results:**
- Table 1 summarizes the statistics from our study.
- We found a number of data sources that produced and shared data.
- A larger number of intermediaries suggests more applications provide data services than produce data, motivating the need to address the data intermediary problem.
- Applications were categorized based on the usefulness of Aquifer’s export and required restriction policies.
- Interesting use cases include business meeting facilitation and image transformation, where Aquifer can help protect confidential files and ensure intermediaries do not export copies.

#### Security Evaluation

Aquifer aims to protect application-specific data that cannot be enforced by system security policy. The security and privacy sensitivity of such data is often known only to the developer and the user. By having developers specify security policies, we reduce the burden on the user.

**Key Features:**
- Aquifer allows app developers to specify host export restrictions on data used by a UI workflow.
- The policy for a UI workflow is maintained in a workflow label \( L \).
- When information from one UI workflow is propagated to another via files, Aquifer merges the two workflow labels using the join operator \( \sqcup \).
- Section 4 claims the join operation ensures the resulting label is at least as restrictive as both original labels.

**Formal Proof:**
- We formally prove the safety of the join operation and the Aquifer policy language in two parts:
  - **Effective Restriction Relation:** Ensures the evaluated policy is more restrictive.
  - **Owner Restriction Relation:** Ensures all of an owner’s restrictions are maintained.
- The formal proof is provided in Appendix A.

#### Performance Evaluation

To assess the performance overhead of Aquifer, we conducted several microbenchmarks on a Samsung Galaxy Nexus (maguro) running Android v4.0.3 and Aquifer built on the same version. Each experiment was performed at least 50 times, and average results with 95% confidence intervals are shown in Table 2.

**App Load Time:**
- Aquifer initializes its UI workflow structures when the first application is loaded.
- The average overhead is 3.58 ms, which is negligible.

**App Filtering:**
- Aquifer filters potential target applications when Android uses an implicit intent.
- The average delay is 1.1 ms, which is negligible.

**Network Access Check:**
- Aquifer places a hook in the kernel to check network access.
- The additional checks have a negligible impact.

**Workflow Policy Change:**
- An application can modify the UI workflow policy label, requiring re-evaluation of the effective policy and reassignment of network privileges.
- This re-evaluation takes 1.98 ms.

**Label Propagation on Read and Write:**
- Each file read operation requires Aquifer to retrieve and join the file’s label to the workflow’s label.
- Each file write operation requires Aquifer to retrieve, modify, and store the new label.
- The overhead for writing a 1MB file is 6.49%, and for reading it is 9.87%.
- A production version of Aquifer could cache policies in memory to avoid unnecessary xattr operations.

**Detailed Study:**
- We further investigated the read and write overhead, performing a detailed study of the time required. The results are shown in Figure 4, with error bars indicating 95% confidence intervals.