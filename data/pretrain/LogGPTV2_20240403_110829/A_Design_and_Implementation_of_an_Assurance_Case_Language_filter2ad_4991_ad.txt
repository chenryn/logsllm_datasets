• The module system has not been evaluated for real
systems (and also for examples in previous work, since
previous work such as [20] mostly shows the inter-
module notation of a module system in ﬁgures, but
not the detail inside modules). A module system is
crucial for the scalability. Interesting issues include the
appropriate size of a GSN term inside a module, and
how the actual size of the network of the module system
for a real system would grow.
• The veriﬁcation functions are limited that only sim-
ple type check for parameters and syntax checks for
GSN terms and patterns are available. Next steps for
veriﬁcations includes introducing more types such as
f unctions and systems and structured documents
inside GSN nodes. For the latter, structured docu-
ment speciﬁcations such as OMG SBVR (Semantics of
Business Vocabulary and Business Rules) [29] would
worthwhile to study.
A motivation of our work is to facilitate the study of
assurance cases. We list a few interesting research issues.
• There are other formats for assurance cases: unstruc-
tured natural language and tabular form representations.
It would be worthwhile to consider in which cases
unstructured natural language, tabular form, or GSN
(CAE) representation is better. This would require the
results of cognitive science studies [4]. Deﬁning a
translation function among these three representations
using our framework would be interesting.
• The most frequent question we have gotten from indus-
try is how to determine the structure of an assurance
case, where multiple structures such as “argument over
lifecycle,” “argument over system structure,” . . . , can
be considered. It is difﬁcult to determine one structure
from such “aspects.” Allowing multiple aspects would
be better than determining only one aspect. Deﬁning
representation in our framework for such multiple as-
pects of assurance cases is worth studying.
• The argumentation framework introduced by Dung [32]
provides a formal framework for argumentative reason-
ing, and it has recently been widely used for model-
ing various aspects of artiﬁcial intelligence. It would
be interesting to combine Dung’s framework and our
framework, as current assurance cases studies do not
formally incorporate rebuttal [41] and other important
notions in argumentation.
• Consistency between an assurance case and the mod-
eled system is important. Using our formalism for the
consistency and proving statements about the assurance
of the modeled system is a promising future work.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
V. RELATED WORK
we have combined them into an assurance case language.
The most closely related work is Denney and Pai’s study
[7]. We follow some parts of this paper such as the semantics
of choice and multiplicity. Their paper deﬁnes GSN as a
control ﬂow graph, and introduces pattern constructs on
the graph. However, a few subtle issues arise due to the
un-structuredness of the control ﬂow graph. For example,
patterns are required to satisfy a condition on the back-edges.
Their instantiation algorithm is sophisticated but contains a
few ad-hoc parts, and the notion of scope of parameters
has not been considered. In the programming languages
ﬁeld, structured representation of a program is preferred
to un-structured representation due to the difﬁculties in
the treatment of un-structured objects. Our formalization
is structured: GSN terms are represented by tree structure,
GSN patterns are deﬁned on the tree structure, and only
natural loop [2] construct can be deﬁned. These enable
us to exploit basic functional programming techniques and
to make the followings possible: we have deﬁned both
GSN pattern and module extensions, and shown 22 GSN
pattern examples [26] whereas their paper [7] only deﬁnes
GSN pattern extensions and shows only 1 pattern example;
we have implemented the extensions and released them
in an open source GSN editor ([25], [24]), whereas their
implementation has been publicly unavailable.
Takeyama has implemented D-Case/Agda [37], which is
an interactive GSN editing and verifying tool. Agda [38]
is a dependently typed functional programming language
and also a proof assistant. D-Case/Agda lets users to write
GSN in Agda. This enables more formal GSN to be written
and veriﬁed. However, because D-Case/Agda uses Agda
directly, it is difﬁcult for ordinary users to write GSN in
D-Case/Agda. If a user wants to write more formal GSN,
however, then D-Case/Agda will be a good alternative. How
much formalism should assurance case language have is
an often discussed question in the community. Also, There
have been studies for veriﬁcation of assurance cases such
as [35]. However, such studies use their own deﬁnition of
assurance cases representation. Deﬁning an assurance case
language will be a base for veriﬁcation work, as various type
systems for static analysis have been developed on functional
programming languages [33].
Our work is based on Matsuno and Taguchi’s work [27]
and Matsuno and Yamamoto’s work [28]. Matsuno and
Taguchi [27] deﬁned the basic GSN syntax (Deﬁnition 1),
deﬁned a type system and scope for parameters, and did an
experimental implementation of global parameters. In [28],
Matsuno and Yamamoto did an experimental implementation
of modules and local parameter without any formal deﬁni-
tion. In this paper, we have formally deﬁned the full syntax
of patterns (Deﬁnition 2) (parameter, choice, multiplicity,
and loop constructs), pattern instantiation relation and the
algorithm; the module system and inter-module notation; and
VI. CONCLUDING REMARKS
In this paper we have reported our design and im-
plementation of GSN and its extensions as an assurance
case language, using a functional programming framework.
Assurance cases are becoming important as a framework
for dependability assurance. Therefore, an assurance case
language should be designed and implemented.
The design of our assurance case language is simple
and general as it only uses basic functional programming
techniques, and it has been implemented easily. The current
design and implementation of the language has several lim-
itations such that testing the module and pattern extensions
for real systems has not been done. We would like to report
the progress on resolving such limitations in the near future.
ACKNOWLEDGMENT
This work had been supported by the JST CREST “De-
pendable Operating System for Embedded Systems Aiming
at Practical Application” project.
We thank the anonymous reviewers for many helpful
comments.
REFERENCES
[1] Robert Alexander, Tim Kelly, Zeshan Kurd, and John McDer-
mid. Safety cases for advanced control software: Safety case
patterns. Technical report, Department of Computer Science,
University of York, 2007.
[2] Andrew W. Appel. Modern Compiler Implementation in ML.
Cambridge University Press, 1998.
[3] Peter Bishop and Robin Bloomﬁeld. A methodology for
safety case development. In Safety-Critical Systems Sympo-
sium (SSS 98), 1998.
[4] Alan Blackwell. Ten years of cognitive dimensions in visual
languages and computing. Journal of Visual Languages and
Computing, 17(4):285–287, 2006.
[5] Robin Bloomﬁeld and Peter Bishop. Safety and assurance
cases: Past, present and possible future - an Adelard perspec-
tive. In Proceedings of the Eighteenth Safety-Critical Systems
Symposium, Bristol, UK, 2010.
[6] Charles Haddon-Cave QC. The Nimrod Review. London: The
Stationary Ofﬁce, 2009.
[7] Ewen Denney and Ganesh Pai. A formal basis for safety case
patterns. In SAFECOMP, pages 21–32, 2013.
[8] Eclipse Foundation. Eclipse Graphical Modeling Project
Webpage. http://www.eclipse.org/modeling/gmp/.
[9] Eclipse Foundation. Eclipse Project Webpage. http://www.
eclipse.org.
[10] Philippe Esnard and Anthony Hunter. Elements of Argumen-
tation. The MIT Press, 2008.
640
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
[11] European Organisation for the Safety of Air Navigation.
Safety case development manual, 2006. European Air Trafﬁc
Management.
[12] Jane Fenn, Richard Hawkins, Phil Williams, and Tim Kelly.
Safety case composition using contracts -reﬁnements based
on feedback from an industrial case study. In Proceedings of
15th Safety Critical Systems Symposium (SSS’07). Springer,
2007.
[13] Hajime Fujita, Yutaka Matsuno, Toshihiro Hanawa, Mitsuhisa
Sato, Shinpei Kato, and Yutaka Ishikawa. DS-Bench toolset:
Tools for dependability benchmarking with simulation and
assurance. In IEEE DSN, 2012. 8 pages.
[14] GSN contributors. GSN community standard version 1.0,
2011. http://www.goalstructuringnotation.info.
[15] Richard Hawkins and Tim Kelly. A systematic approach for
developing software safety arguments. In In Proceedings of
the 27th International System Safety Conference, Huntsville,
AL, 2009.
[16] Richard Hawkins and Tim Kelly. A software safety argu-
ment pattern catalogue. Technical report, The University
of York, 2013. Available on http://www-users.cs.york.ac.uk/
∼rhawkins/pubs.html.
[17] Charles C. Howell, Soﬁa Guerra, Shari Lawrence Pﬂeeger,
and Victoria Stavridou-Coleman, editors. Workshop on As-
surance Cases: Best Practices,Possible Obstacles, and Future
Opportunities, DSN 2004, 2004.
[18] International Organization for Standardization (ISO).
ISO
26262 road vehicle - functional safety -, part 1 to part 10,
2011.
[19] Jonathan Riddell Bamber,
safety cases in industry and healthcare.
Foundation, 2012.
using-safety-cases-in-industry-and-healthcare/.
Evidence: Using
The Health
http://www.health.org.uk/publications/
editor.
[20] Tim Kelly. Modular certiﬁcation to support open systems
dependability. In The 2nd International Workshop on Open
Systems Dependability (WOSD2012), 2012.
http://www.
ubicg.ynu.ac.jp/wosd/wosd2012/.
[21] Tim Kelly and John McDermid. Safety case construction and
reuse using patterns. In SAFECOMP, pages 55–69, 1997.
[22] Tim Kelly and Rob Weaver. The Goal Structuring Notation
- a safety argument notation.
In Proc. of the Dependable
Systems and Networks 2004, Workshop on Assurance Cases,
2004.
[23] Nancy Leveson. The use of safety cases in certiﬁcation and
regulation. In ESD Working Paper Series, Boston: MIT, 2011.
[24] Yutaka Matsuno. D-Case Editor GitHub Repository. https:
//github.com/d-case/d-case editor.
[25] Yutaka Matsuno. D-Case Editor Homepage. http://www.
dcase.jp/editor en.html.
[26] Yutaka Matsuno. GSN pattern library. http://www.dcase.jp/
pdf/patternLibrary.pdf.
641
[27] Yutaka Matsuno and Kenji Taguchi. Parameterised argument
structure for GSN patterns. In Proc. IEEE 11th International
Conference on Quality Software (QSIC 2011), pages 96–101,
2011.
[28] Yutaka Matsuno and Shuichiro Yamamoto. An implementa-
tion of GSN community standard.
In Proc. of 1st Interna-
tional Workshop on Assurance Cases for Software-intensive
Systems (ASSURE 2013), pages 24–28, 2013.
[29] Object Management Group
and
of
http://www.omg.org/spec/SBVR/1.0/.
vocablary
business
(OMG).
business
Semantics
(SBVR).
rules
[30] Object Management Group (OMG). Structured assurance
case metamodel (SACM), 2012. http://www.omg.org/spec/
SACM/.
[31] OPENCOSS Project. Opencoss project web page, accessed
on Dec.2013. http://www.opencoss-project.eu.
[32] Phan Minh Dung. On the acceptability of arguments and its
fundamental role in nonmonotonic reasoning, logic program-
ming and n-person games. Artiﬁcial Intelligence, 77:321–357,
1995.
[33] Benjamin C. Pierce. Types and Programming Languages.
MIT Press, 2002.
[34] Railtrack. Yellow book 3, 2000. Engineering Safety Man-
agement Issue3, Vol. 1, Vol. 2.
[35] John Rushby. Formalism in safety cases. In Proc. 18th Safety-
Critical Systems Symposium, Bristol, UK, pages 3–17, 2010.
[36] SAFE Project. Safe project web page, accessed on Dec.2013.
http://www.safe-project.eu.
[37] Makoto Takeyama. A brief introduction to D-Case/Agda
*(draft ver. 0.2). http://wiki.portal.chalmers.se/agda/uploads/
D-Case-Agda.D-Case-Agda/D-Case-Agda-HomePage-Data.
html.
[38] Agda team. Agda wiki page. http://wiki.portal.chalmers.se/
agda/pmwiki.php.
[39] The Hon. Lord Cullen. The Public Inquiry into the Piper
Alpha Disaster, Vols. 1 and 2 (Report to Parliament by the
Secretary of State for Energy by Command of Her Majesty),
1990.
[40] Mario Tokoro, editor. Open Systems Dependability: Depend-
ability Engineering for Ever-Changing Systems. CRC Press,
2012.
[41] Stephen Toulmin. The Use of Argument. Cambridge Univer-
sity Press, 1958.
[42] Robert Andrew Weaver. The Safety of Software - Constructing
and Assuring Arguments. PhD thesis, Department of Com-
puter Science, University of York, 2003.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply.