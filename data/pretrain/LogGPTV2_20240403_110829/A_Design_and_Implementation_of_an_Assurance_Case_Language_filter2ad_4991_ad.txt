### Module System Evaluation and Scalability
The module system has not been thoroughly evaluated for real-world systems. Previous work, such as [20], primarily illustrates the inter-module notation of a module system in figures but lacks detailed internal module structures. A robust module system is essential for scalability. Key issues to address include determining the appropriate size of a GSN term within a module and understanding how the network of the module system would scale in real-world applications.

### Verification Functions and Enhancements
Current verification functions are limited to simple type checks for parameters and syntax checks for GSN terms and patterns. Future enhancements should introduce more sophisticated types, such as functions and systems, and incorporate structured documents within GSN nodes. For the latter, it would be beneficial to study structured document specifications like OMG SBVR (Semantics of Business Vocabulary and Business Rules) [29].

### Motivation and Research Issues
Our work aims to facilitate the study of assurance cases by addressing several research issues:
- **Representation Formats**: Assurance cases can be represented in unstructured natural language, tabular forms, or GSN (CAE). It is worthwhile to investigate which format is most suitable for different contexts. This requires insights from cognitive science studies [4]. Developing translation functions among these representations using our framework would be an interesting endeavor.
- **Assurance Case Structure**: Determining the structure of an assurance case is a common challenge, with multiple possible structures such as "argument over lifecycle" and "argument over system structure." Allowing for multiple aspects rather than a single aspect would be more flexible. Defining a representation in our framework for these multiple aspects is a valuable research direction.
- **Argumentation Framework Integration**: Dung's argumentation framework [32] provides a formal basis for argumentative reasoning and has been widely used in artificial intelligence. Integrating Dung’s framework with ours could enhance current assurance case studies, which do not formally incorporate rebuttal [41] and other important concepts in argumentation.
- **Consistency and Formalism**: Ensuring consistency between an assurance case and the modeled system is crucial. Using our formalism to prove statements about the assurance of the modeled system is a promising area for future work.

### Related Work
We have integrated various elements into an assurance case language. The most closely related work is Denney and Pai’s study [7], which we follow in some respects, such as the semantics of choice and multiplicity. Their approach defines GSN as a control flow graph and introduces pattern constructs on this graph. However, their unstructured control flow graph leads to subtle issues, such as the need for back-edge conditions in patterns. Their instantiation algorithm, while sophisticated, contains ad-hoc parts and does not consider parameter scope. In contrast, our formalization is structured: GSN terms are represented by tree structures, and GSN patterns are defined on these trees, allowing only natural loop constructs. This structured approach enables us to leverage basic functional programming techniques, define both GSN pattern and module extensions, and provide 22 GSN pattern examples [26], compared to their single example. We have also implemented and released these extensions in an open-source GSN editor [25, 24].

Takeyama’s D-Case/Agda [37] is an interactive GSN editing and verifying tool built on Agda [38], a dependently typed functional programming language and proof assistant. While D-Case/Agda allows for more formal GSN writing and verification, it is challenging for ordinary users due to its direct use of Agda. The level of formalism in assurance case languages is a frequent topic of discussion in the community. Studies like [35] have explored the verification of assurance cases using their own definitions, but defining a standardized assurance case language is a necessary foundation for such work.

Our work builds on Matsuno and Taguchi’s [27] and Matsuno and Yamamoto’s [28] contributions. Matsuno and Taguchi defined the basic GSN syntax, a type system, and scope for parameters, and experimentally implemented global parameters. Matsuno and Yamamoto experimented with modules and local parameters without formal definitions. In this paper, we formally define the full syntax of patterns, including parameter, choice, multiplicity, and loop constructs, as well as the pattern instantiation relation and algorithm, the module system, and inter-module notation.

### Concluding Remarks
In this paper, we have presented our design and implementation of GSN and its extensions as an assurance case language using a functional programming framework. Assurance cases are becoming increasingly important for dependability assurance, making the design and implementation of a robust assurance case language essential. Our design is simple and general, leveraging basic functional programming techniques, and has been easily implemented. However, the current design and implementation have limitations, such as the lack of testing for module and pattern extensions in real systems. We aim to report progress on resolving these limitations in the near future.

### Acknowledgment
This work was supported by the JST CREST “Dependable Operating System for Embedded Systems Aiming at Practical Application” project. We thank the anonymous reviewers for their valuable comments.

### References
[References listed here as per the original text]

---

This version is more coherent, professional, and clearly structured, making it easier to read and understand.