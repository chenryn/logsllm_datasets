vate and public keys, respectively. For symmetric keys,
we drop the superscript. Notation hxiK indicates data x
encrypted with key K, and {y}K indicates data y signed
with key K. We represent nonces as n. Session keys and
nonces are randomly generated. Notation D, P , E, and
Figure 2: Example certiﬁcate tree. The certiﬁcates in light
colored boxes form the manifest that validates the monitor’s
authenticity and integrity.
M denote data, policy, envelope, and manifest; these
terms are clariﬁed in Section 6.2.
6.1 Certiﬁcate Speciﬁcation
Excalibur uses certiﬁcates to validate mappings between
attributes speciﬁc to a trusted cloud service and identi-
ties, i.e., ﬁngerprints of cloud nodes. Certiﬁcates are
used both by the monitor, to check the conﬁguration
of cloud nodes and attest new monitor clones, and by
the customer-side client, to attest the monitor. Our cer-
tiﬁcate speciﬁcation supports multiple certiﬁers since a
single certiﬁer may not have the expertise to assess all
the attributes of the cloud service, or simply to increase
customer trust. Therefore, certiﬁcates form a hierarchi-
cal tree. Figure 2 shows how a provider P can use the
certiﬁcates that correspond to the internal nodes in the
tree to delegate the certiﬁcation of different attributes to
two certiﬁers, A and B. Additionally, each leaf in the
certiﬁcate tree vouches for a mapping between the at-
tributes that appear in node conﬁgurations and low-level
measurements, namely software ﬁngerprints (PCRs) or
hardware identities (AIK keys).
Due to space limitations, we defer a discussion of the
details regarding the certiﬁcation procedure, certiﬁcate
expiration, certiﬁcate revocation, and certiﬁcate man-
agement to a separate technical report [46].
6.2 System Interfaces
Excalibur’s interface has two parts: a service interface,
which supports the implementation of cloud services,
and a management interface, which lets cloud admin-
istrators maintain the system.
The service interface exported by the client library
supports three operations, summarized in Table 4. Be-
fore the data can be sealed on the customer-side, attest-
monitor must be invoked to check the monitor’s authen-
ticity and integrity.
It returns the encryption key K E
7
attest-monitor(mon-addr) → (K E, M ) or FAIL
seal(K E, P, D)
unseal(K E, K D, E)
→ E = hP, DiK, hKiK E
→ (D, P ) or FAIL
Table 4: Excalibur service interface.
needed for sealing and a manifest M , which contains
the certiﬁcates needed to validate the monitor’s identity
and ﬁngerprint (see Figure 2). The manifest is passed
to the customer, who learns from it which attributes can
be used in policies and identiﬁes the provider and cer-
tiﬁer identities needed to decide whether the service is
trustworthy. Since the client saves the manifest and en-
cryption key for sealing, this operation needs to be per-
formed only when the cloud service is ﬁrst used.
The core primitives are seal and unseal. Seal can be
invoked by both cloud nodes and customers; it takes as
arguments the encryption key K E, a policy P , and the
data D and produces an envelope E. This envelope is
passed to unseal, which returns the decrypted data D or
fails if its caller does not satisfy the policy. In addition to
the decryption key K D, unseal receives as an argument
the encryption key K E, which is required by CPABE
decryption; the cloud node that invokes unseal must ob-
tain this key from the monitor. Unseal also returns the
original policy P so that a cloud node can re-seal the
data with the customer’s policy. The CPABE policy lan-
guage is used to express policies.
The management interface lets the cloud administra-
tor remotely maintain the monitor using a console. Its
main operations permit the administrator to initialize the
system, manage certiﬁcates, and spawn monitor clones.
6.3 System Initialization
Before the system can be used, the monitor must be ini-
tialized by binding a unique CPABE key pair to the ser-
vice. To do this, the cloud administrator loads the cer-
tiﬁcates that validate the service attributes into the mon-
itor and instructs the monitor to generate the key pair.
If these certiﬁcates form a consistent certiﬁcate tree, the
monitor creates unique encryption and master keys and
binds them to the tree’s root certiﬁcate (see Figure 2).
To permit for system maintenance, the administrator can
remove or add certiﬁcates as long as they form a valid
certiﬁcate tree.
The monitor maintains its persistent state in a cer-
tiﬁcate store and a key store. Both stores keep their
contents in XML ﬁles on a local disk. The certiﬁcate
store contains the certiﬁcates loaded into the monitor.
The key store contains all the CPABE keys. To secure
the key material, the key store is sealed using the TPM
seal primitive, which ensures that the key store can be
accessed only under a trusted monitor conﬁguration in
case the monitor reboots.
Monitor
Node
1. AIKP
node
2. n
3. {n, PCRnode, K P
session}AIKnode
4a. OK, hK E, K DiK P
session 4b. FAIL
Figure 3: Node attestation protocol.
6.4 Node Attestation Protocol
Once the setup is complete, the monitor delivers to each
cloud node a credential that reﬂects the boot time conﬁg-
uration of that node, which will allow the node to unseal
and re-seal data. The goal of the node attestation proto-
col is to deliver these credentials securely. Recall that,
under our assumptions, when a cloud node reboots, the
credentials kept by the node in volatile memory are lost.
Therefore, this protocol must be executed each time a
cloud node reboots so it can obtain a fresh credential.
The monitor ﬁrst obtains a quote from the node that is
signed by the node’s AIK and contains the current PCRs.
Then, the monitor looks in the certiﬁcate database for
certiﬁcates that match the node’s PCRs and AIK. If any
are found, the monitor obtains the node conﬁguration
by combining all the attributes of the matching certiﬁ-
cates into a list like that shown in Table 2. Next, the
monitor sends the credentials to the node; these include
the encryption and decryption keys embedding these at-
tributes. Since generating a new decryption key is ex-
pensive, the monitor caches these keys in the key store
so they can be resent to nodes with the same conﬁgura-
tion.
Figure 3 shows the precise messages exchanged be-
tween the monitor and the customer-side client. The
protocol is based on a standard remote attestation in
which a nonce n is sent to the node (message 2), and
the node replies with a quote (message 3); the nonce is
used to check the freshness of the attestation request.
session that is used in
Message 3 includes a session key K P
message 4 to securely send credentials K E and K D to
the node. Since the session key is ephemeral, an adver-
sary could not perform a TOCTOU attack by rebooting
the machine after ﬁnishing attestation (message 3) but
before receiving the decryption key (message 4).
Note that the node does not need to authenticate the
monitor to preserve the security of policy-sealed data. In
the worst case, a node may receive a compromised de-
cryption key from an attacker. However, given that cus-
tomers seal their data with the encryption key obtained
from the legitimate monitor, unseal would fail in such a
scenario, and this attack would fail to compromise cus-
tomer data.
8
and the encryption key K S is authentic. The customer
can then seal data securely.
6.6 Seal and Unseal Protocols
The use of CPABE lets seal and unseal execute without
contacting the monitor.
In implementing these primi-
tives, we take into account two aspects of CPABE re-
lated to performance and functionality. First, since
CPABE is signiﬁcantly more inefﬁcient than symmetric
encryption, seal encrypts the data with a randomly gen-
erated symmetric key and uses CPABE to encrypt the
symmetric key. Second, given that CPABE decryption
does not return the original policy (which unseal must
return to let cloud nodes re-seal the data), we include in
the envelope the original policy and a digest for integrity
protection (see Table 4).
6.7 Clone Attestation Protocol
To scale the monitor elastically, the cloud administrator
can create multiple monitor clones. To do so, an existing
monitor instance must share the CPABE master key with
the new clone so the latter can generate and distribute
decryption keys to the cloud nodes. However, this can
be done only if the new clone can be trusted to secure the
key and to comply with the speciﬁcation of Excalibur
protocols.
To enforce this condition, the existing monitor in-
stance and the clone candidate run a clone attestation
protocol analogous to that shown in Figure 3, but with
two differences. First, after message 3, the monitor
assesses if the candidate is trustworthy by checking
whether its AIK and PCR values map to the “moni-
tor” attribute contained in the manifest; if not, cloning
is aborted. Second, if the test passes, the monitor autho-
rizes cloning and sends the master key, the encryption
key, and a digest to the candidate. The digest identiﬁes
the head of the certiﬁcate tree associated with the keys.
The new clone refrains from using the keys until the ad-
ministrator uploads the corresponding certiﬁcates to it.
7 Implementation
We implemented Excalibur in about 22,000 lines of C.
This included the monitor, a client-side library provid-
ing the service interface, a client-side daemon for se-
curing the CPABE decryption key on the cloud nodes, a
management console, and a certiﬁcate toolkit for issuing
certiﬁcates. The console communicates with the moni-
tor over SSL, and all other protocols used UDP mes-
sages. We used the OpenSSL crypto library [37] and
the CPABE toolkit [8] for all cryptographic operations,
and we used the Trousers software stack and its related
tools [51] to interact with TPMs.
We extended a cloud service so it could use Excalibur
to help us understand the effort needed to adapt services
Figure 4: Batch attestation example. The tree is built from
4 nonces. A summary for nonce n10 comprises its tag and the
hashes in the path to the root.
Monitor
Customer-side
1. n
2. s(n), AIKP
mon, {h(n), M, K E, PCRmon}AIKmon
Figure 5: Monitor attestation protocol.
6.5 Monitor Attestation Protocol
The monitor attestation protocol is triggered by the
attest-monitor operation, which lets customers detect if
the monitor is legitimate by checking its authenticity and
integrity. In addition, this protocol obtains: 1) the en-
cryption key, which is used for sealing data, and 2) the
set of certiﬁcates that form the manifest, which let the
customer check the identity of certiﬁers and learn the
attributes that are available. The monitor is legitimate if
its identity and ﬁngerprint are validated by the manifest.
The main challenge in designing this protocol is scal-
ability. If every customer-side client were to run a stan-
dard remote attestation, then the throughput of the mon-
itor would be extremely low due to TPM inefﬁciency.
To overcome this scalability problem, we batch mul-
tiple attestation requests into a single quote operation
using a Merkle tree, as shown in Figure 4. The Merkle
tree lets the monitor quote a batch of N nonces ni ex-
pressed as an aggregate hash h(nN
i=0) and send an evi-
dence – summary s(ni) – to each customer-side client
that its nonce ni is included in the aggregate hash in a
network-efﬁcient manner (i.e., instead of sending all N
nonces, it sends just a summary of size O(log(N ))).
The detailed monitor attestation protocol is shown in
Figure 5. In the ﬁrst message, the customer-side client
sends nonce n for freshness and then uses the informa-
tion returned in message 2 to validate the monitor in two
steps. First, it checks in the manifest M for the certiﬁ-
cates with attribute “monitor”; it uses them to authen-
ticate the monitor key AIKP
mon and to validate the ﬁn-
gerprint of the monitor’s software platform PCRmon (see
Figure 2). Second, to validate the freshness of the re-
ceived messages, it compares nonce n and the summary
s(n) against the aggregate hash h(n) produced by batch
attestation. If all tests pass, the monitor is trustworthy,
9
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
sock.send(” r e c e i v e \n”)
sock.recv(80)
pipe = subprocess.Popen(” / xen −/ b i n / s e a l ”,
stdin=subprocess.PIPE,
stdout=sock.fileno())
fd_pipe = pipe.stdin.fileno()
XendCheckpoint.save(fd_pipe, dominfo, True,
live, dst)
os.close(fd_pipe)
sock.close()
Figure 6: Hook to intercept migration (from ﬁle XendDo-
main.py.) We redirect the state of the VM through a pro-
cess that seals the data before it proceeds to the destination
on socket sock (lines 1327-1330).
for Excalibur and to estimate the performance impact of
Excalibur on cloud services.
The example cloud service we adapted is an elastic
VM service where customer VMs can be deployed in
compute clusters in multiple locations, similar to Ama-
zon’s EC2 service. Our extension used Excalibur to bet-
ter assure customers that their VMs would not be acci-
dentally or intentionally moved outside of a cluster in a
certain area (e.g., the EU).
Our base platform was Eucalyptus [36], an open
source system that provides an elastic VM service with
an EC2-compatible interface. Eucalyptus supports vari-
ous VMMs; we used Xen [9] because it is open source.
Our implementation modiﬁed Xen to invoke seal and
unseal when the customer’s VM was created on a new
node, migrated from one node to another, or suspended
on one node and resumed on another. An attempt to
migrate the VM to a node outside the speciﬁed locations
would fail because the node would lack the credentials
to unseal the policy-sealed VM.
Implementing these changes was straightforward. In-
tegration with Excalibur required modiﬁcations to Xen,
in particular to a Xen daemon called xend, which man-
ages guest VMs on the machine and communicates with
the hypervisor through the OS kernel of Domain 0. In
particular, the VM operations create, save, restore, and
migrate sealed or unsealed the VM memory footprint
whenever the VM was unloaded from or loaded to phys-
ical memory, respectively. To streamline this imple-
mentation, we took advantage of the fact that xend al-
ways transfers VM state between memory and the disk
or the network in a uniform manner using ﬁle descrip-
tors. Therefore, we located the relevant ﬁle descriptors
and redirected their operations through an OS process
that sealed or unsealed according to the transfer direc-
tion. Figure 6 shows a snippet of xend that illustrates
this technique applied to migration. Overall, our code
changes were minimal: we added/modiﬁed 52 lines of
Python code to xend.
The other two changes we made included: (1) hard-
ening the software interfaces to prevent the system ad-
ministrator from invoking any VM operations other than
the four noted above, and (2) using a TPM-aware boot-
loader [5] to measure software integrity and to extend a
TPM register with the Xen conﬁguration ﬁngerprint.
8 Evaluation
This section evaluates the correctness of Excalibur pro-
tocols using an automated tool. We also assess the per-
formance of Excalibur and our example service.
8.1 Protocol Veriﬁcation
We veriﬁed the correctness of our protocols using an au-
tomated theorem prover. We used a state-of-the-art tool,
ProVerif [12], which supports the speciﬁcation of secu-
rity protocols for distributed systems in concurrent pro-
cess calculus (pi-calculus).
To use the tool, we speciﬁed all protocols used by our
system, which included all cryptographic operations (in-
cluding CPABE operations), a simpliﬁed model of the
TPM identity and ﬁngerprint, the format of all certiﬁcate
types in the system, the monitor protocols, and seal and
unseal operations. In total, the speciﬁcation contained
approximately 250 lines of code in pi-calculus.
ProVerif proved the semantics of policy-sealed data
in the presence of an attacker with unrestricted network
access. The attacker could listen to messages, shufﬂe
them, decompose them, and inject new messages into
the network; this model covers, for example, eavesdrop-
ping, replay, and man-in-the-middle attacks. ProVerif