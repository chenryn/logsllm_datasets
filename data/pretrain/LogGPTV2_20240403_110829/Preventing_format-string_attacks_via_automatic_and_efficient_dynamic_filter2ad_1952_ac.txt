### Figure 4: The Third Performance Microbenchmark
In this test, the format string contains two `%n` format specifiers.

```c
int main(int argc, char **argv) {
    int i, j, k;
    char buf[50];
    for (i = 0; i < 10000000; i++) {
        sprintf(buf, "butter%d%d", j, k);
    }
}
```

### Figure 3: The Second Performance Microbenchmark
In this test, the format string contains two format specifiers.

Our automated process would produce the above code, but the following is more efficient:

```c
int total = 0, x = 0, i = 0;
__register_word(&x);
for (; i < arr_len; ++i) {
    printf(arr[i], i, &x);
    total += x;
}
__unregister();
```

Notice that we have moved the registration and unregistration out of the loop, so the program executes them only once. While an optimizing compiler might detect this optimization opportunity, there will always be cases where the programmer has more context and can place registrations more effectively. Although formatted output is rarely performance-critical, this feature of white-lists may be more important for other applications. Thus, our tool allows programmers to turn off automatic registration and insert their own calls. If a programmer forgets to register an argument, the program may abort, but it will not compromise security.

## 4. Results
In this section, we present performance results for our white-listing format-string tool. Section 4.1 discusses our effectiveness at preventing format-string vulnerabilities, and Section 4.2 presents our run-time performance overhead. In both sections, we compare our results with FormatGuard [6]. FormatGuard is similar to our approach in that it combines compile-time source transformations with runtime checks (see Section 5.1 for more details). It has proven effective at preventing many format-string vulnerabilities.

### 4.1 Vulnerability Prevention
We tested our approach on four programs with known format string vulnerabilities:

- **Tcpflow**: This program is frequently run as root and can be attacked by inserting format specifiers into specific command-line arguments [34]. An ordinary user can obtain a root shell via this exploit.
- **Splitvt**: This program is also typically run as root and can be attacked by inserting format specifiers into one of its command-line arguments [17]. Splitvt is another potential source of unauthorized root shells.
- **Rwhoisd 1.5** [28]: The server is vulnerable to format specifiers embedded in strings that follow the `-soa` directive. Attackers can use this vulnerability to gain a remote shell on the machine running rwhoisd.
- **Pfinger client**: This client is vulnerable to format specifiers in remote `.plan` files [24].

Our white-listing approach fixes all these vulnerabilities. The FormatGuard approach, on the other hand, fixes only the splitvt and pfinger vulnerabilities.

The key difference between our approach and the FormatGuard approach is that we are able to prevent attacks on `vprintf` format-strings, such as the attacks on tcpflow and rwhoisd mentioned above. We feel this additional expressiveness is vital because several well-known format-string attacks specifically involve `vprintf`-style functions. These include the famous wu-ftpd vulnerability [35] (the first well-known format-string vulnerability), and the vulnerabilities in isc dhcpd 3.0 [30], zkfingerd 0.9.1 [25], unreal ircd 3.1.1 [19], and the nn news reader [39]. Additionally, a system where `vprintf` is insecure discourages the use of wrapper functions for logging and I/O, which is generally considered good software engineering practice.

### 4.2 Performance Overhead
To determine our overhead per `printf` call, we ran a series of simple microbenchmarks consisting of a single loop containing a single `sprintf` call. We also downloaded a copy of FormatGuard and compared our overhead with its overhead. The tests were run on a 2.26 GHz Pentium 4 with 500 MB of RAM, and compiled with gcc version 3.3.3 using no compile flags. The tests were all run with the constant string optimization disabled (otherwise, the white-listing overhead would have been 0%, because our microbenchmarks use only constant strings). We chose to wrap calls to `printf`-style functions with whitelist-checking functions rather than reimplement the `printf` functions. Reimplementing `printf` would likely lead to better results, but it would also lead to an unfair comparison with FormatGuard, which also chose to wrap functions rather than reimplement them.

Our performance varied with the number and types of the specifiers in the format string. This was expected: the overhead of white-list checking is proportional to the number of specifiers. With no specifiers (Figure 2), white-listing added an overhead of 10.2%, and FormatGuard added an overhead of 7.5%. With two non-`%n` specifiers (Figure 3), our approach added an overhead of 28.6%, and FormatGuard added 20.9%. With two `%n` specifiers (Figure 4), our overhead was 60.0%, and FormatGuard’s was 38.1%.

We also tested `vsprintf` by moving the printing loop inside a wrapper function. We observed an overhead of 26.4% with no specifiers, 39.8% with two non-`%n` specifiers, and 74.7% with two `%n` specifiers. FormatGuard does not protect against `vsprintf` vulnerabilities and thus does not transform these benchmarks. Note that the `vsprintf` overhead percentages are exaggerated relative to the `sprintf` overheads because `vsprintf` executes faster than `sprintf`. The results for all our microbenchmarks are summarized in Figure 5.

These overheads may seem high, but we stress that these are microbenchmarks and not realistic programs. Additionally, we had to turn off our constant-string optimization. As we show below, this optimization can often significantly reduce the overhead.

We also searched for a real, `printf`-intensive application to test our performance. We had some difficulty finding an application where `printf` was performance-critical, as most I/O-intensive programs implement their own I/O procedures. We eventually settled on `man2html`, the same program used by the FormatGuard authors to test their performance. As the name suggests, the `man2html` program converts man pages to HTML web pages. We used the same machine and compiler that we used for the microbenchmarks. With the constant format string optimization turned off, our approach added an overhead of 14.1%. With the optimization enabled, our approach added only 0.7%. The FormatGuard approach added an overhead of 9.0%. As we see, our optimization allowed us to execute this `printf`-heavy application with insignificant overhead. Our performance with the optimization enabled was also noticeably better than FormatGuard, even though they catch a smaller class of vulnerabilities.

There are two likely reasons why we experienced a higher overhead than FormatGuard on the microbenchmarks and in the `man2html` test without optimizations. Both tools use the `parse_printf_format` function to parse the format strings, but our approach must do more with the result of the parse. FormatGuard only needs a count of the number of format specifiers (returned by `parse_printf_format`), whereas we need to actually look at each specifier to determine if it is a `%n`. Additionally, we must pay the extra cost of registering (and unregistering) pointer arguments.

However, as we saw when we turned on the constant-string optimization, our overhead on “real-world” applications is insignificant. This is further borne out by performance tests we ran on the applications we mentioned in Section 4.1 (once again, with the same machine and compiler). We ran `rwhoisd` in local mode (to avoid network delays) and observed an average overhead of 1.3% to start-up and respond to a query (1.6% without optimization). We ran `tcpflow` over a 273MB `tcpdump` output file and observed an overhead of 0.3% (0.9% without optimization). We also attempted to test the `pfinger` client, but found that the variability due to network delays drowned out any difference between the white-listed and normal versions. We did not test the overhead of `splitvt`, as we could not think of a sensible test. In general, these results confirm our belief that many vulnerable C applications do not benefit from the performance gained by using insecure library facilities. Figure 5 summarizes these results.

We also measured the compile-time overhead of our approach (with the same machine and compiler as above). These results are summarized in Figure 6. We see that using CIL added a significant overhead to each compile, but our analysis and transformation added only a small additional overhead—between 0 and 4.7%. We implemented our prototype using CIL because it was much simpler to extend, but these results suggest that an implementation could gain significant compile time savings by instead integrating directly into the compiler. The overhead when we use CIL is primarily caused by parsing and typechecking the program twice (once by CIL, and then again by gcc when it compiles the transformed program produced by CIL). If we instead integrated our approach directly into the compiler, we would need to parse and typecheck the program only once.

## 5. Related Work
Our approach to preventing format-string attacks nicely complements other approaches:

- **It prevents more attacks than FormatGuard (Section 5.1)**.
- **It rejects fewer safe programs than approaches preventing format arguments from “tainted” sources (Section 5.2)**.
- **It is more efficient than approaches that check all writes in an application (Section 5.3)**.
- **It is more efficient and less intrusive than approaches that change the variable-argument calling convention (Section 5.4)**.

### Figure 5: Performance Results
| Benchmark | White-listing | Optimized White-listing | FormatGuard |
| --- | --- | --- | --- |
| `sprintf` microbenchmark, no specifiers | 10.2% | 0% | 7.5% |
| `sprintf` microbenchmark, 2 `%d` specifiers | 28.6% | 0% | 20.9% |
| `sprintf` microbenchmark, 2 `%n` specifiers | 60.0% | 0% | 38.1% |
| `vsprintf` microbenchmark, no specifiers | 26.4% | 0% | No protection |
| `vsprintf` microbenchmark, 2 `%d` specifiers | 39.8% | 0% | No protection |
| `vsprintf` microbenchmark, 2 `%n` specifiers | 74.7% | 0% | No protection |
| `man2html` | 14.1% | 0.7% | 9.0% |
| `rwhoisd` | 1.3% | 1.6% | No protection |
| `tcpflow` | 0.3% | 0.9% | No protection |

### Figure 6: Compile-Time Overhead
| Benchmark | Source Lines | gcc 3.3.3 | gcc + CIL | gcc + CIL + White-listing | Overhead |
| --- | --- | --- | --- | --- | --- |
| `splitvt` | 5288 lines | 1.85 sec. | 2.94 sec. | 2.91 sec. | 1.0% |
| `pfinger` | 331 lines | 0.15 sec. | 0.36 sec. | 0.36 sec. | 0% |
| `man2html` | 3630 lines | 0.60 sec. | 1.15 sec. | 1.14 sec. | 0.9% |
| `rwhoisd` | 29702 lines | 7.95 sec. | 20.09 sec. | 19.18 sec. | 4.7% |
| `tcpflow` | 1695 lines | 0.67 sec. | 1.16 sec. | 1.14 sec. | 1.8% |

### 5.1 FormatGuard
FormatGuard is a similar approach that combines compile-time source transformations with runtime checks. It has proven effective at preventing many format-string vulnerabilities.