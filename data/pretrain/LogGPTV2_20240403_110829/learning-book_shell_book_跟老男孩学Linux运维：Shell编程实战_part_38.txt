retrun 1
else
Spath/$ (1) .sh
return SRETVAR
fi
function main() (
PS3=*echo pls input the num you want:*
x. .. o
do
case“SREPLY*in#<==使用获取select循环对应的数字序列的环境变量。
1)
InstallService lamp
==如果匹配1，则执行下面指令，到双分号继束。
RETVAR=$?
11
2 )
Instal1Service 1nmp
<==如果匹配2，则执行下面指令，到双分号结束。
RETVAR=$?
3)
echo bye.
<如果匹配3，则执行下面指令，到双分号维束。
return 3
*)
it） q   .o
echo*Input ERROR*
done
esac
exit $ RETVAR
main
执行结果如下：
[root@oldgir1 scripts]# sh 11_15_5.sh
1)Instal1 1amp
  （
3）exit
pls input the num you want:1
start installing lamp.
install lamp
pl8 input the num you want12
---
## Page 266
勤
跟老男孩学Linux运维：Shell编程实战
start installing lnmp.
install 1nmp
pls input the num you want:3
bye.
特别说明：可访问如下地址或手机扫二维码查看第11章的核心脚本代码
http://oldboy.blog.51cto.com/2561410/1855427
---
## Page 267
nux
循环控制及状态返回值的应用实践
本章将带领大家学习以下儿个特殊的命令：break（循环控制）、continue（循环控制）、
exit（退出脚本）、returm（退出函数）。
12.1break、continue、exit、return的区别和对比
在上述命令中，break、continue在条件语句及循环语句（for、while、if等）中用于
控制程序的走向；而exit则用于终止所有语句并退出当前脚本，除此之外，exit还可以
返回上一次程序或命令的执行状态值给当前Shell：return类似于exit，只不过return仅
用于在函数内部返回函数执行的状态值。关于这几个命令的基本说明如表12-1所示。
表12-1条件与循环控制及程序返回值命令知识表
命
如果省略n，则表示跳出整个环，n表示跳出循环的层数
说明
break n
continue n
如果省略n，则表示跳过本次循环，忽略本次循环的剩余代码，进人循环的下一次循环。
n表示退到第n层继续循环
exit n
退出当前Shell程序，n为上一次程序执行的状态返回值。n也可以省略，在下一个Shell
里可通过“S?”接收exit n的n值
retum n
用于在函数里作为函数的返回值，以判断函数执行是否正确。在下一个She里可通过
“$？” 接收 exit n 的 n 值
12.2
break、continue、exit功能执行流程图
为了让读者更清晰地了解上述命令的区别，下面特别画了逻辑图，方便大家理解。
---
## Page 268
250跟老男孩学Linux运维：Shell编程实战
这里以while循环和for循环为例来说明。
在循环中brcak功能的执行流程逻辑图如图12-1所示。
while猫环开始
for循环开始
hile循环条件表达式
for循环条件表达式
真
真
持续
do
持续
循环
循环
do
直到
条件
直到
命令集1
条件
表达
跳出拍环
表达
命令集1
式不
式不
跳出环
满足
命令集2
满足
命令集2
，
done
done
环结束
环结束
图12-1while 循环和 for循环中 break 的功能执行流程逻辑
在循环中continue功能的执行流程逻辑图如图12-2所示。
循环开始
for循环开始
ile循环条件表达式
假
r循环条件表达式
持续
真
特续
简环
循环
真
直到
直到
条件
do
条件
表达
表达
do
式不
式不
满足
命令集1
满足
命令集1
终止本次
continue
终止本次猫
continue
环，继续下
命令集2
环，继续下
命令集2
一次循环
，
一次循环
done
done
循环结束
循环结束
图12-2while循环和 for循环中 continue 的功能执行流程逻辑
---
## Page 269
第12章循环控制及状态返回值的应用实践25
在循环中exit功能的执行流程逻辑图如图12-3所示。
whe细环开始
for循环开始
ile循环条件表达式
假
for循环条件表达式
真
真
持续
do
持续
循环
循环
do
直到
，
直到
条件
条件
表达
命令集1
退出脚本
表达
命令集1
式不
exit
式不
exit
退出本
满足
命令集2
满足
命令集2
done
done
循环结束
循环结束
退出脚本
退出牌本
图12-3while循环和for循环中exit 的功能执行流程逻辑
12.3
break、continue、exit、return命令的基础示例
下面是与break、continue、exit、returm 相关的示例。
范例12-1：通过brcak命令跳出整个循环，执行循环下面的其他程序。
[root@oldboy scripts] cat 12_1_1.sh
#1/bin/bash
if[s#-ne 1 ]:then
<=如果传参个数不为1，则打印下面的使用提示给用户。
echo S*usage:S0 (breaklcontinuelexitIreturn)*
<==分别传入4个命令作为参数
exit 1
<…=出脚本。
f1
test(）（
<==定义测试函数。
for（（i=0:i<=5;i++）)
do
ifIsi
-eq3]:then
$*:
<=这个地方的“S*”就是接收函数外的参数，将来就是
（breaklcontinuelexit|return）中的-个。
fi
done
---
## Page 270
252跟老男孩学Linux运维：Shel编程实战
echo *I am in func.*
<==循环外的输出提示。
<==这里的“s*”为函数的传参。
s=ax"oung
<==如果传参有return
<==楼收并测试函数返因值。
[b-、-xx dx|o、]
then
echo *return's exit status:$func_ret*
<==则提示return退出状态
fi
echo'ok*
#<==函数外的输出提示。
说明：本着在“使用中记忆”的原则，本例采用了复杂的测试（breaklcontinuelexi]
return}的脚本方法。
传人brcak命令的执行结果为：
[root@oldboy scripts]# sh 12_1_1.sh
usage:12_1_1.sh (break1continuelexit1return)
[root@oldboy scripts]# sh 12_1_1.sh break
1
0
Ianinfunc.<=环外的输出提示。
2
ok
<=函数外的输出提示。
根据结果可以看到，i等于3及以后的循环没有被执行，但循环外的echo执行了，
执行到break时跳出了if及外层的for循环语句，然后执行for循环外部done后面的打
印ok的语句。
传入continue命令的执行结果为：
[root@oldboy scripts]#sh 12_1_1.sh continue
0
1
2
<==没有3
4
5
I am in func.
<循环外的验出提示。
ok
<函数外的输出提示。
可以看到，只有i等于3这层循环没有被执行，其他循环全部执行了，循环外的
echo也执行了，说明执行到continue时，终止了本次循环，面继续下一次的循环，直到
福环正常结束，接着继续执行了循环外面的所有语句。
传人exit 119命令的执行结果为：
[root8oldboy scripts]sh 12_1_1.sh*exit 119*
0
---
## Page 271
第12章循环控制及状态返回值的应用实践258
2<=只打印了0,1.2
[rooteoldboy scripts]#echo $?
119<==返图了119，即传入的值。
根据执行结果可以看到，当进人循环里的if语句后遇到”exit119"时，立刻退
出程序，不但循环体3后面的数字没有输出，而且for循环体done外的echo和函数
外的ok也没有输出，就直接退出了程序。另外，因为程序退出时指定了119，所以
执行脚本后获取“$？"的返回值时就返回了“exit119"后面的119这个数字到当前的
Shell.
传入“return119"命令的执行结果为：
[root9oldboy scripts]sh 12_1_1.sh *return 119*
1
2
return's exit status:119
<==确实将119返因到了函数的外部脚本
[rootθoldboy scripts]#echoS？<=执行脚本后的返国值还是0。
根据执行结果可以看到，当进入循环里的if语句后遇到returmn119，就没有打印3
以下的数字，说明return跳出了循环体，程序也没有执行for循环体done外的echo命
令，面是直接执行了函数test外的if语句及打印ok的命令，可见return的作用是退出
当前函数。同时，returmn将数字119作为函数的执行状态值返还给函数体外，执行脚本
后打印返回值是0，因为程序的最后一行是打印ok的命令，执行是成功的。
12.4循环控制及状态返回值的企业级案例
范例12-2：开发Shell脚本实现为服务器临时配置多个IP，并且可以随时撤销配置
的所有IP。IP的地址范围为：10.0.2.1~10.0.2.16，其中10.0.2.10不能配置。
本题主要用于考察continue、retum、exit的综合应用，请读者细细品味。
首先，给网卡配置额外的IP。以下介绍两种配置IP的命令（ifconfig/ip）。
使用ifconfig配置别名IP的方法：
ifconfigeth0:010.0.2.10/24down<=删除IP。
使用IP配置辅助IP的方法：
ipaddr add 10.0.2.11/24 dev eth0 1abel eth0:0<==添加 IP。