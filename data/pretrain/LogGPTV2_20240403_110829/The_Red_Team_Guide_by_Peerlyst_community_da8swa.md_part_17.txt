administrator privileges using the built-in access token manipulation
command runas.
For more details: 
## AppInit DLLs
Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs
value in the Registry keys
HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows
NT\\CurrentVersion\\Windows or
HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows
NT\\CurrentVersion\\Windows are loaded by user32.dll into every process
that loads user32.dll. In practice this is nearly every program, since
user32.dll is a very common library.
Similar to [Process
Injection](https://attack.mitre.org/techniques/T1055), these values can
be abused to obtain persistence and privilege escalation by causing a
malicious DLL to be loaded and run in the context of separate processes
on the computer.
For more details: 
## Bypass User Account Control
Windows User Account Control (UAC) allows a program to elevate its
privileges to perform a task under administrator-level permissions by
prompting the user for confirmation. The impact to the user ranges from
denying the operation under high enforcement to allowing the user to
perform the action if they are in the local administrators group and
click through the prompt or allowing them to enter an administrator
password to complete the action.
For more details: 
## Trusted Service Paths
This vulnerability deals with how Windows interprets spaces in a file
path for a service binary. Given that these services often run as
SYSTEM, there is an opportunity to escalate our privileges if we can
exploit this behavior. For example, consider the following file path:
> *C:\\Program Files\\Some Folder\\Service.exe*
For each space in the above file path, Windows will attempt to look for
and execute programs with a name that matches the word in front of
space. The operating system will try all possibilities throughout the
entire length of the file path until it finds a match. Using the example
above, Windows would try to locate and execute programs in the following
order:
> *C:\\Program.exe*
>
> *C:\\Program Files\\Some.exe*
>
> *C:\\Program Files\\Some Folder\\Service.exe* **Metasploit Module:
> exploit/windows/local/trusted_service_path** More details:
> 
## AlwaysInstallElevated
AlwaysInstallElevated is a setting that allows non-privileged users the
ability to run Microsoft Windows Installer Package Files (MSI) with
elevated (SYSTEM) permissions. However, granting users this ability is a
security concern because it is too easy to abuse this privilege. For
this to occur, there are two registry entries that have to be set to the
value of "1" on the machine:
> *\[HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Insta
> ller\]*
>
> *"AlwaysInstallElevated"=dword:00000001*
>
> *\[HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Inst
> aller\]*
>
> *"AlwaysInstallElevated"=dword:00000001*
>
> ![](media/image181.jpeg)
Source:
### Metasploit Module: exploit/windows/local/always_install_elevated
More Details check :
## Tools For Privilege Escalation
In order to automate the process of searching the weak points we can use
further tools:
**LinEnum :** LinEnum will automate many of the checks that I've
documented in the [Local Linux](http://www.rebootuser.com/?p=1623)
[Enumeration & Privilege Escalation
Cheatsheet](http://www.rebootuser.com/?p=1623). It's a very basic shell
script that performs over
65 checks, getting anything from kernel information to locating possible
escalation points such as potentially useful SUID/GUID files and
Sudo/rhost mis-configurations and more.
> ![](media/image182.jpeg)
Source:
 For
more details: 
**LinuxPrivChecker :** This script is intended to be executed locally on
a Linux box to enumerate basic system info and search for common
privilege escalation vectors such as world writable files,
misconfigurations, clear-text passwords and applicable exploits.
For more details: 
> **Unix-PrivEsc-Check:** Shell script to check for simple privilege
> escalation vectors on Unix systems
Unix-privesc-checker is a script that runs on Unix systems (tested on
Solaris 9, HPUX 11, Various Linuxes, FreeBSD 6.2). It tries to find
misconfigurations that could allow local unprivileged users to escalate
privileges to other users or to access local apps (e.g. databases).
> ![](media/image183.jpeg)
Source: 
For more details:
**BeRoot: Windows Privilege Escalation Tool:** BeRoot: Windows Privilege
Escalation Tool was written by AlessandroZ. It is a part of Pupy Project
(https://github.com/n1nj4sec/pupy/) which is cross-platform (Windows,
Linux, OSX, Android) remote administration and post-exploitation tool
mainly written in python developed by n1nj4sec PI:EMAIL).
According to the official Documentation is does not perform exploitation
actually but it helps you get needed information to do that
> ![](media/image184.jpeg)
Source:
 You
can find it here: 
### pypykatz Mimikatz implementation in pure Python :
PypyKatz is a python implementation of Mimikatz (python\>=3.6). It helps
you dump LIVE system LSA secrets
> ![](media/image185.jpeg)
Source:
 You
can find it here: 
### Yodo: Local Privilege Escalation
Yodo: Local Privilege Escalation tool simply uses dirty COW or
Pa(th)zuzu to [exploit](https://www.peerlyst.com/tags/exploit) the
target.
> ![](media/image186.jpeg)
>
> Source:
>  You
> can find it here:
> [*https://github.com/b3rito/yodo.git*](https://github.com/b3rito/yodo.git)
### JAWS --- Just Another Windows (Enum) Script
JAWS is PowerShell script designed to help penetration testers (and
CTFers) quickly identify potential privilege escalation vectors on
Windows systems. It is written using PowerShell 2.0 so 'should' run on
every Windows version since Windows 7.
For more Details: 
### windows-privesc-check
Windows-privesc-check is standalone executable that runs on Windows
systems. It tries to find misconfigurations that could allow local
unprivileged users to escalate privileges to other users or to access
local apps (e.g. databases).
For more details:
### Sherlock
PowerShell script to quickly find missing software patches for local
privilege escalation vulnerabilities.
For more details: 
## References and Further Reading
-   Local Linux Enumeration & Privilege Escalation Cheatsheet:
-   Basic Linux Privilege Escalation:
-   Windows Privilege Escalation Guide:
> 
-   The Privilege escalation wiki:
> 
-   Windows Privilege Escalation Scripts & Techniques:
    [https://medium.com/@rahmatnurfauzi/windows-privilege-escalation-scripts-techniques-3](https://medium.com/%40rahmatnurfauzi/windows-privilege-escalation-scripts-techniques-30fa37bd194)
    [0fa37bd194](https://medium.com/%40rahmatnurfauzi/windows-privilege-escalation-scripts-techniques-30fa37bd194)
-   Privilege escalation in windows:
-   Windows Privilege Escalation Commands:
    [http://pwnwiki.io/#!privesc/windows/index.md](http://pwnwiki.io/%23!privesc/windows/index.md)
-   
-   [https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md)
> [%20Resources/Windows%20-%20Privilege%20Escalation.md](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md)
-   
-   [https://backdoorshell.gitbooks.io/oscp-useful-links/content/windows-privileg-escalation.h](https://backdoorshell.gitbooks.io/oscp-useful-links/content/windows-privileg-escalation.html)
    [tml](https://backdoorshell.gitbooks.io/oscp-useful-links/content/windows-privileg-escalation.html)
-   
-   
-   
-   
-   [https://payatu.com/guide-linux-privilege-escalation/?fbclid=IwAR1I6lHieXZBpQgx5s5z](https://payatu.com/guide-linux-privilege-escalation/?fbclid=IwAR1I6lHieXZBpQgx5s5zacRvLmKqV5wp2ZCBxm466fc3Ia3IjUbKQdHra88)
    [acRvLmKqV5wp2ZCBxm466fc3Ia3IjUbKQdHra88](https://payatu.com/guide-linux-privilege-escalation/?fbclid=IwAR1I6lHieXZBpQgx5s5zacRvLmKqV5wp2ZCBxm466fc3Ia3IjUbKQdHra88)
-   
-   
> Chapter 16
>
> **Virtualization Attacks**
>
> Contributor: Karim Hassan
>
> **Introduction**
Operating system virtualization is a technique of running multiple
operating systems on a single computer at the same time as if they were
running on separate computers. The virtualized environment is otherwise
known as the virtual machine (VM). To be able to deploy these virtual
machines, you must install virtualization software called Hypervisor.
Operating system virtualization has several advantages:
-   Use another operating system without restarting the computer to use
    programs that are not running natively in the host system.
-   Test operating systems under development without compromising a
    stable environment;
-   Test software in controlled and isolated environments;
-   Migrate the operating systems from one computer to another, a
    virtual ma-
-   chine running on any computer with a compatible hypervisor;
-   Isolation of different simultaneous users of the same machine;
-   Dynamic allocation of resources according to the needs of each
    application at a given moment;
## Hypervisor
The hypervisor is the component that acts as a mediator between virtual
machines and the underlying physical devices. It mediates all hardware
requests by the virtual machines down to the physical hardware, sharing
physical devices as resources. It implements the virtual machine monitor
providing virtualized hardware (hardware abstraction) to virtual
machines. It can be of two types, bare-metal (Type-1) or hosted
(Type-2).
### Type-1 Hypervisor
A Type-1 or native hypervisor is software that runs directly on a
hardware platform; this platform is then considered as an operating
system control tool. A secondary operating system can, therefore, be
executed over the hardware. Type 1 hypervisor is an optimized host
kernel. On
processors with hardware virtualization instructions (AMD-V and Intel
VT) the hypervisor does not emulate the hardware, so operation is
accelerated.
> ![](media/image187.jpeg)
Type-1 Hypervisor
### Type-2 Hypervisor
A Type-2 hypervisor is software that runs inside another operating
system. A guest operating system will run at the third level above the
hardware. Guest operating systems are not aware of being virtualized, so
they do not need to be adapted.
> ![](media/image188.jpeg)
>
> Figure 22.2: Type-2 Hypervisor
## Risks related to virtualization
The risks associated with system virtualization have been added to the
"classic" risks of an information system. The risks that already exist
for a "without virtualization" solution are: risks related to operating
system vulnerabilities, the risks of hardware- based attacks, or the
risks of unsafe remote administration.
In the case of architecture grouping several systems on the same
machine, we must consider:
-   The risks that may affect a system;
-   Those dealing with the abstraction layer;
-   The risks induced by the combination of both the system and the
    abstraction layer.
In addition, grouping multiple services on the same hardware increases
the risks for the host system and the guest system. It is therefore
important to know all the risks to control the impact in terms of
confidentiality, integrity and availability of data and applications.
## Compromising Systems
Compromise is the takeover by a malicious actor of a guest operating
system from another guest operating system or by the abstraction layer
from a guest operating system. The resulting risk is information leakage
or system disruption that can lead to the unavailability of a service.
Note that a compromise of the host system may eventually lead to a
compromise of all systems running on the machine. If an instance is
compromised, how do you decide if other instances running on the host
machine should be considered compromised? When implementing migration
techniques, how can one precisely determine the propagation domain of
the compromised instances?
Solutions to prevent compromise are often difficult to implement. This
will be to minimize the attack. In particular, each brick (hardware,
host operating system, guest operating systems, etc.) must be up-to-date
with all security patches. In particular, the use of a virtualization
solution requiring guest systems to operate in obsolescent
configurations is not acceptable.
In particular, the use of a virtualization solution does not allow the
use of guest systems to operate in obsolescent configurations.
Finally, it is usually easy to deploy a failed guest system on another
physical machine from a healthy image. Nevertheless, only the
implementation of the defense-in-depth mechanism makes
it possible to precisely locate the origin of the compromise (guest
system, host system, hardware, data, etc.).
## Increased risk of unavailability
As mentioned above, a compromise can lead to the unavailability of a
service. How- ever, this risk can occur even in the absence of
compromise due to the failure of a shared resource can cause the
unavailability of multiple systems. this failure can be caused by the
more intensive use of computing resources in virtualized environments.
Similarly, an attack on the availability of services on a system
(usually on a common resource) will potentially impact all services
hosted on the same machine.
## Information Leakage
In virtualized environments, the instances (the operating system, the
applications and the data storage system) share the same resource. As a
result, it becomes difficult to control the different internal exchanges
on the physical machine and thus to ensure that shared low-level
resources do not introduce any possibility of leakage of information.
![](media/image189.jpeg)Take the example with access to the network of a
machine: In an architecture without virtualization, machines communicate
over physical networks using a specific network adapter. The data flows