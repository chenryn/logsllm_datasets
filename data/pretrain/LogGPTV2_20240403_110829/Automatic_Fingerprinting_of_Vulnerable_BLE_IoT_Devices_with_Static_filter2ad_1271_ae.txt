Amazon.com Services, Inc.
Google Inc.
Anhui Huami Information Technology Co., Ltd.
Tencent Holdings Limited.
August Home Inc
Zebra Technologies
CSR
Apple, Inc.
UTC Fire and Security
Molekule, Inc.
Microsoft Corporation
Polar Electro Oy
GN ReSound A/S
B&O Play A/S
GoPro, Inc.
Dialog Semiconductor GmbH
RF Digital Corp
Clover Network, Inc
Facebook, Inc.
Gimbal, Inc.
Dexcom Inc
Snapchat Inc
Microsoft
Aterica Health Inc.
# Devices
2,595
441
131
114
74
32
30
15
10
8
8
7
5
5
5
3
3
3
2
2
2
2
1
1
1
1
1
1
1
1
1
Table 9: Company names that can be found from Bluetooth
SIG and corresponding devices in our field test.
7 COUNTERMEASURE
In this work, we have discovered two kinds of BLE vulnerabilities,
which are rooted from the system level (BLE UUID fingerprinting
from mobile apps) and the application level (no or weak authen-
tication) implementations with the BLE devices and mobile apps.
In the following, we discuss how to eliminate or mitigate these
vulnerabilities.
Mitigating app-level vulnerability. The app-level vulnerabili-
ties include absent cryptographic usage and flawed authentication,
which are caused by the careless developers who do not imple-
ment encryption and hardcode the credentials in the app. To get
rid of such vulnerabilities, the app should implement secure cryp-
tographic function to encrypt the data to be sent. A secure cryp-
tographic function also means that all the factors involved in the
encryption should not be hardcoded. Besides, to eliminate flawed
authentication, developers should hide the authentication creden-
tials in the cloud or let users enter them in the app.
Anti-UUID fingerprinting. The root cause of our UUID finger-
printing is that BLE devices need to broadcast advertised packets
to inform nearby apps. The UUID can be sniffed either from the
advertisement packets or by browsing for services after connec-
tion is established. In addition, UUIDs are fixed values and do not
change over time. Therefore, to anti-UUID fingerprinting, we can
prevent them from being sniffed in the air or reverse-engineered
Figure 5: Part of the geolocation of the scanned BLE devices
in our field study.
Item
# Unique Bluetooth Device
# Unique BLE Device
18.9
94.6
7.4
6.7
6.2
Table 8: Experimental result of our field test.
# Fingerprintable BLE Device
# Vulnerable Device
# Sniffable Device
# Unauthorized Accessible Device
%
Value
30,862
5,822
5,509
431
369
342
manually investigated apps that are mapped to the same UUID, and
confirmed the reasons of UUID collision discussed in §6.2. For the
two apps developed by HP company (row 8), they actually manage
the same IoT device (a printer). In row 9 and row 10, though the
UUIDs are both mapped to two apps respectively, these apps from
various vendors control the same category of devices (fitness de-
vices at row 9, and electric meters at row 10). For the UUID collision
in row 4, it is possibly due to accidental reuse. Since we can only use
the advertised service UUID for coarse-grained fingerprinting, the
precision can be improved if we are able to connect to the device
to obtain the complete UUID hierarchy.
Vulnerable device identification. Among the 5, 509 fingerprint-
able device, we have identified 431 (7.4%) of them that are vulnerable
to either sniffing or unauthorized access. Among them, there are
369 (6.7%) snifferable devices and 342 (6.2%) unauthorized accessi-
ble devices, and 280 devices are vulnerable to both of the attacks.
Moreover, we also count the top 10 vulnerable devices and their
descriptions (found in the fingerprinted companion app) in Table 11.
The most popular vulnerable devices include digital thermometer,
car dongle, key finder, smart lamp, etc.
Device distribution across location. In the field test, we also
recorded the GPS location where a device is scanned by us at the
first time, such location can be used to infer the proximate location
of a device. The field test was conducted at a roughly 1.28 square
miles area. To illustrate the popularity and the usage intensity
of the IoT devices, we draw a heat map showing the identified
BLE IoT devices in a part of the area we tested in Figure 5. The
areas with green color indicate the presence of IoT devices. The red
color indicates where the BLE IoT devices are more intense, e.g.,
intersections because of the open area and the residential area.
5/15/2019Google Maps - pygmapsﬁle:///Users/mac/Dropbox/BLE_HeatMap2_downtown_new.html1/1Map data ©2019 GoogleReport a map errorSession 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1479UUID
0000fe9f-0000-1000-8000-00805f9b34fb
0000feed-0000-1000-8000-00805f9b34fb
0000b13d-0000-1000-8000-00805f9b34fb
adabfb00-6e7d-4601-bda2-bffaa68956ba
0000fe61-0000-1000-8000-00805f9b34fb
0000feaf-0000-1000-8000-00805f9b34fb
0000fea0-0000-1000-8000-00805f9b34fb
0000fe78-0000-1000-8000-00805f9b34fb Hewlett-Packard Company
fb694b90-f49e-4597-8306-171bba78f846
Company Name
Google
Tile, Inc.
-
-
Logitech International SA
Nest Labs Inc.
Google
730a0ce2-9042-4ef1-870d-debe79a601f3
d2d3f8ef-9c99-4d9c-a2b3-91c85d44326c
-
-
-
# Devices APP Package Names
com.google.android.gms
com.thetileapp.tile
co.bird.android
com.fitbit.FitbitMobile, de.afischer.aftrack.plugin.sensbox
com.logitech.vc.parsec, com.logi.brownie
com.nest.android
com.google.android.apps.chromecast.app
hp.enterprise.print, com.hp.printercontrol
com.lf.lfvtandroid, com.paofit.RideSocial,
com.paofit.runsocial
com.powerley.aepohio, com.dteenergy.insight
com.nest.android
2,436
441
243
208
131
114
92
74
46
44
44
# Installed
5,000,000,000
1,000,000
1,000,000
10,000,000
5,000
1,000,000
100,000,000
10,000,000
500,000
100,000
1,000,000
Table 10: Top 10 devices found in the field test.
UUID
# Device Device Description
Digital Thermometer
00001910-0000-1000-8000-00805f9b34fb
Car Dongle
00001814-0000-1000-8000-00805f9b34fb
Key Finder
00001804-0000-1000-8000-00805f9b34fb
Smart Lamp
0000fef1-0000-1000-8000-00805f9b34fb
Key Finder
0000f000-0000-1000-8000-00805f9b34fb
Smart Toy
00001820-0000-1000-8000-00805f9b34fb
Smart VFD
bc2f4cc6-aaef-4351-9034-d66268e328f0
Air Condition Sensor
0000ffd0-0000-1000-8000-00805f9b34fb
Smart Toy
000018f0-0000-1000-8000-00805f9b34fb
Accessibility Device
0000ec00-0000-1000-8000-00805f9b34fb
Table 11: Top 10 vulnerable devices found in the field test.
7
6
6
5
5
4
4
4
4
4
in the app. In particular, we notice there could be solutions from
three dimensions: (1) App-level (§7.1), (2) Channel-level (§7.2), and
(3) Protocol-level (using dynamic UUIDs) (§7.3). In the rest of this
section, we describe in detail how these defenses could be designed
and implemented.
7.1 App-Level Protection
Since our fingerprinting attack relies on mobile app analysis to
reveal the UUIDs and their hierarchies, accordingly any attempts
to defeat or slow down the reverse engineering of mobile apps will
be helpful. In general, it requires app developers to make effort
to prevent the UUIDs and their hierarchies from being reverse
engineered, in order to disable attackers for binding UUIDs to
specific apps to fingerprint BLE IoT devices.
There are multiple ways to implement this type of protection. To
begin with, as one of the reasons that UUIDs and their hierarchies
can be obtained from the app is that they are hardcoded in plaintext,
intuitively app developers can obfuscate the app to encode the
UUIDs or use encryption to hide the UUIDs. Similar strategy had
been implemented in [35]. Also, app developers can preserve the
UUIDs in a cloud server, which is not accessible to the attackers.
In this way, whenever a mobile app tries to connect to a nearby
desired BLE device, it will dynamically retrieve the UUID from the
cloud, so that attackers cannot obtain the UUIDs from statically
reverse engineering of the mobile apps.
Although the protection methods in the app-level are seemingly
plausible, these methods cannot fundamentally prevent the UUIDs
from being reverse engineered from the mobile apps. This is because
the obfuscation and encryption can only increase the difficulty for
attackers to retrieve the UUIDs due to the fact that the plaintexted
UUID should be interpreted in somewhere of the app. While stor-
ing UUIDs outside the mobile apps can prevent the UUIDs from
being statically reverse engineered, the attackers can still obtain
the plaintexted UUIDs at run-time, because the UUIDs are static
and somewhat public in this scheme.
7.2 Channel-Level Protection
The second reason of why our BLE IoT devices fingerprinting can
succeed is the recognizable UUIDs from the broadcasting packages
of these devices. Therefore, any attempts at network channels to
prevent an adversary from receiving complete signals of UUIDs
would work.
The mitigation in the channel-level to disallow attacks to receive
sufficient signals and packages for information recognition can be
implemented with methods that disrupt signals broadcast from BLE
IoT devices. In this way, attackers can only sniff either disrupted
or interrupted instead of continuous signals, which is supposed
to avoid the complete recognition of UUIDs. This type of mitiga-
tion has been implemented in BLE-Guardian [20] that depends on
an additional hardware to broadcast disrupting signals to prevent
packages sniffing. While this is an promising approach, it requires
additional hardware support.
7.3 Protocol-Level Protection
Since the static UUID that can be extracted from the companion
mobile apps is the root cause of our fingerprinting attack, a funda-
mental countermeasure would be to construct a one-time dynamic
UUIDs for broadcast and communication. It may appear to modify
the device hardware, but it turns out this countermeasure only
require software update. That is, by only updating both the apps
and the device firmware, we can achieve a dynamic UUID scheme.
In the following, we present how a one-time dynamic UUID can
be generated and synchronized between the device and app. Since
one device can be used by multiple users, we also put cloud in the
scheme to help synchronize the UUIDs among users. At a high
level, after an app is successfully connected with an IoT device for
the first time, it negotiates a dynamic UUID for future broadcast
and communication. As illustrated in Figure 6, this scheme can be
broken down into three steps: (1) Dynamic UUID generation, (2)
App-Device synchronization, and (3) Cloud synchronization, which
are detailed as follows.
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1480(1) Dynamic UUID generation. When the app connects with the
device for the first time, it uses the default UUIDs to recognize the
target device as usual. The default UUIDs are needed since they are
necessary for broadcast and communication before negotiation of
dynamic UUIDs. Though these default UUIDs enable an attacker to