rithm in the signature mechanism. The remaining two PPSs
do not require the packet signature for order inquiry. Table 2
summaries the token generation mechanisms of 35 PPSs.
3282    30th USENIX Security Symposium
USENIX Association
Table 3: Price ﬁeld position in string concatenation strategies
Separated Field Direct connection
Near optional ﬁeld
Near Notify URL
Near Required Fields
3
4
13
0
12
1
4.2.2 Vulnerable String Concatenation
To discover this vulnerability, our analysis is based on two
criteria: 1) whether the values among different ﬁelds are sepa-
rated with delimiters or the ﬁeld names, and 2) whether the
price ﬁeld is nearby some optional ﬁeld. Table 3 shows the
concatenation methods of all 32 PPSs that adopt signature
mechanisms. 13 PPSs have string concatenation without de-
limiters or the ﬁeld name among neighboring ﬁelds, among
which 12 PPSs have the optional ﬁeld of Return URL near
the price ﬁeld. Here, the Return URL is the website address
MC jumps to after the payment behavior. When the value in
Return URL is modiﬁed, MC stagnates at the payment inter-
face page, but the transaction is still successfully placed at the
MS. As a result, these 12 PPSs are vulnerable to our proposed
string shift attack (Section 3.3.2). The remaining 20 PPSs
require the merchants to add a delimiter (i.e., &) between
any two ﬁelds or include the corresponding ﬁeld name before
the values (e.g., “price=xxx”) in the concatenated string. Our
string shift attack does not work on these PPSs.
4.2.3 Vulnerable Key Changing API
We found that 31 out of 35 PPSs do not adopt signature mech-
anisms in the request packet and may be vulnerable to the
malicious key changing attack described in Section 3.1.2.
Additionally, among these 31 PPSs, 14 send new KEYs as
cleartext, allowing an attacker to intercept the packet and
obtain this new KEY.
4.2.4 Vulnerable Order Inquiry
All PPSs employed a cryptographic checksum, such as MD5,
in the inquiry request packet to prevent malicious order in-
quiry. In the response packet, we found that all 35 PPSs attach
the payment status, i.e., pending, error, and success, in the
response packet, represented by a status code, while only 3
PPSs include both the expected amount and actual value paid.
Without the expected and actual payment values, it becomes
impossible for the merchant to perform audits afterward, sig-
niﬁcantly impacting ﬁnancial operations should there be an
attack.
4.2.5 Vulnerable Payment Interface
As discussed previously, the payment interface can be crucial
in assisting the buyer to identify a payment swapping attack
in which an attacker swaps in his order to mislead the victim
Figure 10: A representative payment interface shown at the
MC in the PPS.
buyer into paying for the attacker’s order. We found that the
payment interfaces of all 35 PPSs display the order ID, the
expected amount, and the pay-to account (i.e., QR code), but
not buyer-oriented information, such as shipping address and
merchandise recipient. One representative interface is shown
in Figure 10. The order ID is the only information designed
for identifying the attribution of this payment account, but
according to our analysis it actually does not help buyers rec-
ognize the order attribution. Generally, when the displayed
price in the interface of these 24 vulnerable PPSs matches a
buyer’s expectation, he is prone to pay for it without checking
the order details. As a result, the attacker can easily perform
the payment substitution attack. There are 9 PPSs that pro-
vide additional order details such as product names. Such
additional information does help the user to recognize the
order substitution, which limits the attacker’s swap.
4.2.6 Missing Security Guideline in User Documents
One of the key questions we aim to answer is whether there
is clear and concise guidance on the best security practices
for developers. Since the majority of deployment vulnera-
bilities we found are related to local key storage, and the
historical order inquiry is the important step for identifying
tampered orders, we are focusing on the provided guidance
around these issues. Our analysis shows that more than half of
PPSs do not provide important security guidelines for either
KEY storage or order veriﬁcation. According to our analysis
on 35 PPSs’ documents, we found only 15 of them give the
tip that the KEY must be kept in the MS. The lack of this
guideline has contributed to many developers using the re-
maining 20 PPSs mistakenly placing the KEY at MC. For
historical order inquiry, we only found 3 PPSs that suggest
merchants adding additional veriﬁcation steps to record the
order payment history.
USENIX Association
30th USENIX Security Symposium    3283
4.2.7 Insecure Network Transmission
Additionally, network transmission security is a common re-
quirement to prevent man-in-the-middle attacks. Insecure
network communication is one of the key enablers of theft
of important parameters transmitted between MS and PMP.
Although we do not mention this trivial attack in the security
analysis since it has a strict requirement to sniff the channel
between MS and PMP, we still provide related statistics here.
We ﬁnd that among 35 PPS platforms, 17 PPSs use the HTTP
protocol to deliver the packet for the KEY changing response.
These 17 PPSs all place the new KEY in cleartext form in
the response packet. As a result, merchants adopting their
payment services are theoretically at risk of KEY snifﬁng
attacks.
4.3 Cases for Real-world Attacks
To validate the vulnerable patterns we analyzed, we conduct
several real-world attacks on our own merchant account to
understand the feasibility and limitations of these attacks.
The video recordings and related MD5 attack materials for
all attack experiments are provided in [9]. Note that all the
attacks demonstrated in our paper are launched against our
own merchant and user accounts, even though they apply
generally.
4.3.1 String Shift Attack
We choose the Paysapi website and perform the string shift
attack, aiming to recharge a certain amount to our registered
account but pay less than the amount. From our analysis, we
know that Paysapi has a vulnerable token generation method
which simply concatenates all the ﬁelds together before hash-
ing, i.e., it is vulnerable to the string shift attack discussed in
Section 3.3.2. We use the Fiddler 4 tool to intercept, counter-
feit, and re-send the transmission packet between our personal
computer and the Paysapi server.
We type 30 Chinese Yuan in the input ﬁeld of Paysapi user
interface and send this order request to the merchant. After
the merchant sends the order packet back to the user interface,
we use the Fiddler 4 tool [5] to intercept the packet while
preventing the user from delivering it to the Paysapi server.
We manually shift the character “0” from the price ﬁeld of the
order packet to the beginning of the return_url ﬁeld and then
forward the new packet to the Paysapi server. The payment
interface will display only requiring 3 Chinese Yuan. After
the user pays 3 Chinese Yuan, the payment interface displays
the payment successfully; however, the website fails to show
the notiﬁcation page. We check the balance in our account
and ﬁnd it is 30 Chinese Yuan, but we only pay 3 Chinese
Yuan. This indicates the success of our attack without being
noticed by the Paysapi server. We left the balance as it and
notiﬁed merchant of this test without using it to purchase any
commodity for ethical consideration. The video recording of
our attack is shown in the ﬁle named “string_shift_attack.mp4”
in [9].
4.3.2 Key Changing Attack
We perform two real merchant-oriented attacks where the ﬁrst
one targets disabling the merchant’s service and the second
one targets stealing KEY. Merchant accounts are registered
on two different PPSs, the Paysapi and the Xunhupay, Paysapi
includes the new key in the reply, while Xunhupay doesn’t.
Our goal is to demonstrate the vulnerabilities in the KEY
changing interface.
the
the
that
For the test on Xunhupay, we log in through the
current KEY is
merchant portal and see
“r7Ep7kymuyQQE6taVQNF”. We operate
regis-
tered account and click the key changing button. Meanwhile,
we use the Fiddler 4 tool to monitor the request packet for
the key changing transmission to the PPS. PPS changes
the KEY to “hiTcAvcYicv24XjdcwRY”. However, PPS
does not send a response packet carrying the KEY. Instead,
the registered account needs to refresh his proﬁle page to
see this new KEY. We extract the merchant ID information
from the monitored packet, forge a new request packet,
and send it to the PPS. PPS proceeds to change KEY to
“Tk7pK5BneK2373NuU76E”. As there is no response packet
sent from PPS to the registered account for KEY change, the
merchant’s service will be disabled until he refreshes his
proﬁle page to notice the key is changed.
For the test on Paysapi, we log into the system and fol-
low the same steps as in the experiment above. However,
since Paysapi includes KEY in the response. It is possible
to steal the new key just by examining the key change re-
sponse. The video recordings of these two attacks are shown
in [9], with the ﬁles named as “disabled_attack.mp4” and
“key_stealing_attack.mp4”.
4.3.3 Payment Substitution Attack
The goal of this attack is to verify the ability of an attacker
to swap out the content of an order such that the victim pays
for the order of the attacker. Two user accounts are registered,
one for the victim and the other for the attacker. The victim
user and the attacker are placed in the same local area network
under the same router.
First, the victim opens his interface and clicks to recharge
the account with 10 Chinese Yuan. When the attacker moni-
tors that the victim is recharging the account with 10 Chinese
Yuan, he intercepts the packet sent from the merchant service
to the victim and blocks its transmission to the PMP. Mean-
while, the attacker clicks the recharging function in his ac-
count. We intercept the packet transported from the merchant
server to him without forwarding it to the PMP. We record the
important order parameters in this packet and replace them
with those in the intercepted packet from the victim. The new
3284    30th USENIX Security Symposium
USENIX Association
substituted packet is then sent to the victim’s PMP. The pay-
ment interface is successfully shown on the victim’s website,
which does not show any order identity information. The vic-
tim makes the payment for the attacker’s order. We found
the balance in the attacker’s account is shown as 10 Chinese
Yuan now, but the balance in the victim’s account remains
unchanged. This indicates the success of our payment substi-
tution attack. The video recording of this attack is exhibited
in [9] with the ﬁle name of “substitution_attack.mp4”
4.3.4 MD5 Collision Attack
The goal of performing this attack is to verify that the MD5
collision attack is practical in real-world PPS systems. We
carefully choose the donation payment on a blog website as
the attack target since donating a lower amount will not cause
serious effects. We notiﬁed the owner of the blog for this ex-
periment. This blog employs the payment services provided
by Paysapi, whose Token generation mechanism arranges
the price directly in front of an optional ﬁeld “ReturnURL”.
The donation price is set to be 0.02 Yuan, and the ReturnURL
can be obtained by capturing a normal order packet using the
Fiddler 4 tool so that the parameters for performing the MD5
collision attack can be collected. We use an open resource
on github [40] to calculate the chosen preﬁx MD5 collision
blocks, where the two preﬁxes differ in the price values, “0.01”
and “0.02”. The calculation was processed on a computer with
CPU: Intel i7-8700k, GPU: NVIDIA GeForce GTX1080 Ti,
and RAM: 64G, where the CUDA was employed. It takes 7
days to ﬁnd a collision with the two preﬁxes where the colli-
sion block is free from JSON keywords and the MD5 value is
the same, “9f1ec604dce1bc1c0b1dd368dda3dd44”. We start
to make the payment (i.e., donation) on the blog and block the
network packet sent from MC to the MS. Since the price and
ReturnURL are generated in the website client, we modiﬁed
the price and ReturnURL ﬁelds with the collision block of 0.02
Yuan. After the order packet is signed at MS and sent back
to the MC, we again block and capture its transmission from
MC to the PMP server. The MD5 collision results are stored
in two “.bin” ﬁles; therefore, we use a hex editor to open the
blocked order packet and replace the price and the noti f yURL
with the collision block of “0.01” Yuan. This order passes the
PPS certiﬁcation, and the payment interface is successfully
sent back to the website, then we pay for it at a lower price.
The two collision ﬁles in this attack are exhibited in [9] with
the ﬁle names of “preﬁx1.txt.coll” and “preﬁx2.txt.coll”.
4.4 Ethical Consideration and Responsible
Disclosure
4.4.1 Ethical Consideration on Real-world Attacks
We carefully designed and conducted our case study to avoid
impact on real-world entities. We have conducted the attack
on credit recharging transactions such that no real product
would be shipped as a result of the attack. In all experiments,
we made use of our test accounts created solely for demon-
strating the attacks. We also did not receive any services and
goods using the hijacked payment systems. At the end of our
experiments, we always let the authority know the detailed
procedures and results so that they can correct at the back
end.
4.4.2 Responsible Disclosure
We ﬁrst reported all our ﬁndings to the PPS providers in Jan-
uary 2020. Unfortunately, no formal email responses were
received in the ﬁrst round before March 2020, while 9 PPSs
providers, Bufpay, Xunhupay, 020zf, Paycats, Heimipay, Qian-
mapay, paysapi, Greenyep, and Xddpay, gave us feedback
through other online chat tools. During the second PPS in-
spection on August 2020, we found that 5 PPSs had updated
the payment protocols with safer string concatenation mecha-
nisms. The list of these PPSs is shown in Fig. 9. 12 of 35 PPSs
which possess multiple vulnerabilities stopped providing pay-
ment services after our report, including Yktapi, Caiwumao,
Weimifu, ARYA, L Pays, Xinyipay, 188pc, PersonalP, Yijinka,
7cPay, Yuandian, and Dunpay. We have also reported the vul-
nerabilities to the CVE on August 8th, 2020, and received
their vulnerability conﬁrmation on August 10th, 2020. How-
ever, our reported issues do not match the requirements for
applying for a CVE ID.
As we will discuss in Section 5.1, some critical vulnera-
bilities are design ﬂaws in the PPS protocols. Therefore, all
existing merchants supported by PPS are at risk. Since all
the PPSs adopt the personal money transfer service from the
Alipay and WeChat Pay third-party payment platforms, on
August 14th, 2020, we reported the vulnerable PPS list and
the security issues to the Security Response Center of Ten-
cent (WeChat Pay) and the Alibaba Security Response Center
(AliPay), which are responsible for the security of their pay-
ment ecosystem. The Alibaba Security Response Center has
conﬁrmed our reported PPS issues on September 20, 2020,
and will continue to monitor technical reports in this area to
improve payment security in PPS.
5 PPS Vulnerability Summary
Through the lens of our study, PPS, an emerging payment
platform that aims to bring together the personal payment
account on third-party platforms and an independent order
management platform, still faces challenges in security and
usability despite its popularity. In this section, different at-
tacks are grouped and analyzed from different perspectives,
with the goal of shedding light on this new system’s security
in the future.
USENIX Association
30th USENIX Security Symposium    3285
5.1 Flaws Classiﬁcation
The vulnerable patterns described in Section 3 fall into issues
in either protocol or implementation.
• PPS Protocol Vulnerability - Protocol vulnerabilities are
due to insecure design in the payment protocol, and it
is very hard for the merchants to correct them by them-
selves. Among seven vulnerabilities, unprotected Key
changing API, simple String Concatenation in Token
Generation, MD5-based Token Generation, Lacking Or-
der Examining Mechanisms, and No Paid Value in Order
Inquiry fall into this category.
• Implementation Vulnerability - The vulnerabilities in
this category are often business and implementation spe-
ciﬁc, i.e., caused by a lack of understanding of either
the PPS API or secure design. Local Order Generation
and Local KEY Storage are the two majority vulnerabili-
ties in this category. Correcting these problems is easier,
requiring changes only at the client side.
5.2 Attack Classiﬁcation
Based on the attack motivation, ﬁve attacks proposed in Sec-
tion 3 can be grouped into three categories as follows:
• Malicious User Attack. In this category, an attacker ma-
nipulates his own client in an attempt to beneﬁt himself,
such as by reducing the price of the item under purchase.
The attacks of Order Tampering with KEY, String Shift
in Order Packet, and MD5 Signature Collision fall into
this category.
• Victim-oriented Attack. In this attack, the adversary can
intercept the communication packets between other users
(victim MC) and MS. His goal is to achieve ﬁnancial gain
by manipulating network packets. Payment Substitution
attack belongs to this category.
• Merchant-oriented Attack. An attacker in this category
primarily aims to attack the merchant or other user from
the Internet, without access to the victim’s trafﬁc or de-
vices. Malicious KEY Changing belongs to this type.
From the perspective of merchants, the following changes
might be beneﬁcial: 6) KEY should never be stored at the
client side; 7) The order parameters should be generated and
signed at the server, and then transmitted to the user client;
8) Check the actual paid value for each order when receiving
the payment notiﬁcation.
Finally, users need to carefully check order information: 9)
Always check the payment attribution information, such as or-
der ID, before making payment; 10) Avoid making payments
over insecure links.
6 Related Work