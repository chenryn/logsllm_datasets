algorithm separetely.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:23 UTC from IEEE Xplore.  Restrictions apply. 
DFA model generation evaluation. Intuitevely, the GOFA
algorithm is efﬁcient in recovering a model for the target ﬁlter
if the algorithm is in possesion of the necessary information
in order to recover the ﬁlter in the input CFG and is able to do
so. Therefore, in order to evaluate experimentally the accuracy
of our algorithm in producing a correct model for the target
ﬁlter independently of the choice of the grammar we used as
input grammar the target ﬁlter itself. This choice is justiﬁed
as setting as input grammar the target ﬁlter itself we have
that a grammar that, intuitively, is a maximal set without any
vulnerability.
In table II we present the numerical results of our exper-
iments over the same set of ﬁlters used in the experiments
of Section VII-C. The learning percentage of both DFA and
SFA with simulated equivalence oracle via GOFA is quite high
(close to 90% for both cases). The performance beneﬁt from
our SFA learning is even more dramatic in this case reaching
an average of ≈ 35 times faster than DFA. The speedup is
also pictorially presented in Figure 7. We also point out the
even though the DFA algorithm checks all transitions of the
automaton explicitily (which is the main source of overhead),
the loss in accuracy between the L∗ algorithm and our SFA
algorithm is only 2%, for a speedup gain of approximately
x35.
Vulnerability detection evaluation. In evaluating the vul-
nerability detection capabilities of our GOFA algorithm we ran
into the same problem as with the model generation evaluation;
namely, the efﬁciency of the algorithm depends largely on
the input grammar given by the user. If the grammar is more
expressive than the targeted ﬁlter then a bypass can be trivially
found. On the other hand if it is too restrictive maybe no bypass
will exist at all.
For our evaluation we targetted SQL Injection vulnerabil-
ities. In our ﬁrst experiment we utilized ﬁve well known web
application ﬁrewalls and used as an input grammar an SQL
grammar from the yaxx project [29]. In this experiment the
input ﬁlter was running on live ﬁrewall installations rather
than on the extracted rules. We checked whether there were
valid SQL statements that one could pass through the web
application ﬁrewalls.
The results of this experiment can be found in table IV. We
found that in all cases a user can craft a valid SQL statement
that will bypass the rules of all ﬁve ﬁrewalls. For the ﬁrst
4 products where more complex rules are used the simple
statement “open a” is not ﬂagged as malicious. This statement
allows the execution of statements saved in the database system
before using a “DECLARE CURSOR” statement. Thus, these
attacks could be part of an attack which reexecutes a statement
already in the database in a return oriented programming
manner.
The open statement was ﬂagged malicious by urlscan, in
which case GOFA succesfully detected that and found an
alternative vector, “replace”. We also notice, that using GOFA
with the SFA learning algorithm makes a minimum number
of queries since our SFA algorithm adds new edges to the
automaton only lazily to update the previous models, thus
making GOFA a compelling option to use in practice.
against the composition of two rules targetting SQL Injection
attacks from PHPIDS. In order to achieve that we started with
a small grammar which contains the combination of some
attack vectors and, whenever a vector is identiﬁed bypassing
the ﬁlter, we remove the vector from the grammar and rerun
it with a smaller grammar until no attack is possible. Here
we would like to ﬁnd out whether the GOFA algorithm can
operate under restricted grammars that require many updates
on the hypothesis automaton. The succssive vectors we used
as input grammar can be found in full version of the paper.
The results of the experiment can be found in table IV. To
check whether a vulnerability exists in the ﬁlter we computed
the symmetric difference between the input grammar and the
targetted ﬁlters. We note that this step is the reason we did not
perform the same experiment on live WAF installations, since
we do not have the full speciﬁcation as a regular expression
and thus cannot check if a bypass exists in an attack grammar.
We notice that in this case as well, GOFA was succesfull
in updating the attack vectors in order to generate new attacks
bypassing the ﬁlter. However, in this case the GOFA algorithm
generated as many as 61 states of the ﬁlter in the DFA case
and 31 states in the SFA case until a succesfull attack vector
was detected. Against we notice that the speedup of using the
SFA algorithm is huge.
To conclude with the evaluation of the GOFA algorithm,
although as we already discussed in section VI, the GOFA
algorithm is necessarily either incomplete or inefﬁcient
in
the worst case, it performs well in practice detecting both
vulnerabilities when they exist and inferring a large part of
the targetted ﬁlter when it is not able to detect a vulnerability.
E. Cross Checking HTML Encoder implementations
To demonstrate the wide applicability of our sanitizer
inference algorithms we reconsider the experiment performed
in the original BEK paper [8]. The authors, payed a number of
freelancer developers to develop HTML encoders. Then they
took these HTML encoders, along with some other existing im-
plementations and manually converted them to BEK programs.
Then, using BEK the authors were able to ﬁnd differences in
the sanitizers and check properties such as idempotence.
Using our learning algorithms we are able to perform a
similar experiment but this time completely automated and in
fact, without any access to source code of the implementation.
For our experiments we used 3 different encoders from the
PHP language, the HTML encoder from the .net AntiXSS
library [30] and then, we also inferred models for the HTML
encoders used by Twitter, Facebook and Microsoft Outlook
email service.
We used our transducer learning algorithms in order to infer
models for each of the sanitizers which we then converted to
BEK programs and checked for equivalence and idempotence
using the BEK infrastrucure. A function f is idempotent if ∀x,
f (x) = f (f (x)) or in other words, reapplying the sanitizer to a
string which was already sanitized won’t change the resulting
string. This is a nice property for sanitizers because it means
that we easily reapply sanitization without worrying about
breaking the correct semantics of the input string.
In the second experiment we performed we tested what
will happen if we have a much more constrained grammar
In our algorithm, we used a simple form of symbolic
transducer learning, as sketched in section V-C, where we gen-
103103
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:23 UTC from IEEE Xplore.  Restrictions apply. 
GRAMMAR
DFA LEARNING
SFA LEARNING
VULNERABILITY
ID
STATES
ARCS
FOUND STATES MEMBERSHIP
EQUIVALENCE
FOUND STATES MEMBERSHIP
EQUIVALENCE
SPEEDUP
EXISTS
FOUND
1
2
3
4
128
111
92
43
175
146
120
54
61
61
61
61
155765
155765
155765
155764
3
3
3
3
31
31
31
31
1856
1811
1793
1770
8
7
6
7
AVG=
83.56
85.68
86.58
87.65
85.87
TRUE
TRUE
TRUE
FALSE
union select
load_file(’0\0\0’)
union select 0 into outfile
’0\0\0’
union select case when
(select user_name()) then 0
else 1 end
None
TABLE III.
BYPASSES DETECTED BY SUCCESIVELY REDUCING THE ATTACK GRAMMAR SIZE FOR RE RULES PHPIDS 76 & 52 COMPOSED
WAF
Target
DFA LEARNING
SFA LEARNING
VULNERABILITY
FOUND STATES MEMBERSHIP
EQUIVALENCE
FOUND STATES MEMBERSHIP
EQUIVALENCE
SPEEDUP
EXISTS
FOUND
PHPIDS 0.7
MODSECURITY 2.2.9
WEBCASTELLUM 1.8.3
WEBKNIGHT 4.2
URLSCAN Common Rules
2
1
1
1
4
186
186
94
94
1835
1
1
1
1
2
0
0
0
0
5
3
3
3
3
40
1
1
1
1
2
AVG=
46.75
46.75
23.75
23.75
43.73
36.94
TRUE
TRUE
TRUE
TRUE
TRUE
open a
open a
open a
open a
rollback work
TABLE IV.
RUNNING THE GOFA ALGORITHM WITH AN SQL GRAMMAR ON COMMON WEB APPLICATIONS FIREWALLS
eralized the most commonly seen output term to all alphabet
members not explicitily checked.
As an alphabet, we used a subset of characters including
standard characters that should be encoded under the HTML
stnadard and moreover, a set of other characters, including
unicode characters, to provide completeness against different
implementations. For the simulation of the equivalence oracle
we produced random strings from a predeﬁned grammar
including all the characters of the alphabet and in addition
many encoded HTML character sequences. The last part is
important for detecting if the encoder is idempotent.
Figure 8 shows the results of our experiment. We found
that most sanitizers are different and only one sanitizer is
idempotent. All the entries of the ﬁgure represent the character
or string that the two sanitizers are different or a tick if they are
equal. One exception is the entries labelled with u8249 which
denotes the unicode character with decimal representation
&#8249;. We included the decimal representation in the table
to avoid confusion with the “<” symbol. The idempotent
sanitizer is a version of htmlspecialcharacters func-
tion with a special ﬂag disabled, that instructs the function
not to rencode already encoded html entities. We would like
to point out that although in general html encoders can be
represented by single state transducers, making the encoder
idempotent requires a large amount of lookahead symbols
to detect whether the current character is part of an already
encoded HTML entity.
Another suprising result is that the .net HTML encode
function did not match the one in the MS Outlook email
service. The encoder in the outlook email seems to match an
older encoder of the AntiXSS library which was encoding all
HTML entities in their decimal representations. For example,
this encoder is the only one encoding the semicolon symbol.
On the other hand the .net AntiXSS implementation will
encode unicode characters in their decimal representations but
will skip encoding the semicolon, as did every other sanitizer
that we tested.
At this point, we would like to stress that our results are not
PHP2
PHP3
u8249 &amp;
u8249


PHP1

PHP1
PHP2
PHP3
.NET
TW
FB
MS
FB

TW

.NET
u8429
u8294
u8429
&amp; &amp; &amp;
u8429
u8429

u8429



MS
;
;
;
;
;
;

Idempotent
