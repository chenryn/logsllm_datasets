Next, to compute the set of addresses which a return instruction can target, the
address set determined by each address located after each legitimate callsite is
computed. This information is obtained by using the previously determined call-
site forward-edge mapping to derive a function return backward map that uses
return instructions as keys and return targets as values. This way, τ CFI has a
set of addresses for each function to which the function return site is allowed to
transfer control. Finally, range or compare checks are inserted before each func-
tion return site. These checks are used during runtime to check if the address,
where the function return wants to jump to, is contained in the legitimate set for
each particular return site. This is represented in Fig. 2 by green highlighted dots
(addresses e.g., ctr2 ) that are allowed to call only legitimate blue highlighted
dots (addresses e.g., csn1 ). Finally, the result is a hardened program binary (see
right-hand side in Fig. 2).
Fig. 2. Main steps performed by τ CFI when hardening a program binary.
4.2 Parameter Count and Type Policy
Parameters can be passed through registers or the stack. In the Itanium C++
ABI, the ﬁrst six parameters are passed through registers (i.e., rdi, rsi, rdx,
rcx, r8, and r9). Even when a 64-bit register is used to pass a parameter, the
430
P. Muntean et al.
actual number of bits used in the register might be smaller. Therefore, we treat
the used widths of parameter-storing registers as the types of the parameters.
There are four types of reading and writing access on registers. Therefore, our
set of possible types for parameters is {64, 32, 16, 8, 0}, where zero models the
absence of a parameter. For the Itanium ABI, our analysis tracks the 6 registers
used in parameter passing and classiﬁes callsites and calltargets according to
how these registers are used.
Our analysis overapproximates at callsites and underapproximates at call-
targets the parameter count and types, which is due to the general diﬃculty
of statically determining the exact number of arguments provided by a callsite
and the number of parameters required by a calltarget and w.r.t. the widths of
registers used in parameter passing. Speciﬁcally, at a callsite, the analysis calcu-
lates an upper bound for the number of arguments and for the widths of those
registers that store arguments. For instance, for a function call that passes one
argument with a width of 32-bit, the analysis may estimate that there are two
arguments passed and the ﬁrst one’s width is 64-bit. Furthermore, the analysis
on a calltarget (a callee function) calculates a lower bound for the number of
needed parameters and for the widths of those registers that store parameters.
Because of the approximations in our analysis, our policy for matching call-
sites and calltargets allows a callsite to transfer to a calltarget if (1) the number
of estimated arguments at a callsite is greater than the number of estimated
parameters at a calltarget; and (2) for each argument at the callsite and its cor-
responding parameter in the calltarget, the estimated width of the argument is
greater than the estimated width of the parameter. Part (1) is about the parame-
ter count and is the same as the parameter-count policy in TypeArmor [25]; part
(2) is about the parameter types and enables τ CFI to provide a ﬁner-grained
policy than just considering the parameter count.
Instruction Read-Write Eﬀect
4.3
We ﬁrst introduce some deﬁnitions and notation. The set I describes the set of
possible instructions; in our case, this is based on the instruction set for x86-
64 processors. An instruction i ∈ I can perform two kinds of operations on
registers: (1) Read n-bit from a register with n ∈ {64, 32, 16, 8} and (2) Write
n-bit to a register with n ∈ {64, 32, 16, 8}. Note that there are instructions that
can directly access the higher 8 bits of the lower 16 bits of 64-bit registers. For
our purpose, we treat this access as a 16-bit access.
Next, the possible eﬀect of an instruction on one register is described as
δ ∈ Δ with Δ = {w64, w32, w16, w8, 0} × {r64, r32, r16, r8, 0}. Note that 0
represents the absence of either a write or read access and (0, 0) represents
the absence of both. Meanwhile, wn with n ∈ {64, 32, 16, 8} implies all wm
with m ∈ {64, 32, 16, 8} and m < n (e.g., w64 implies w32); the same property
holds for rn. The Itanium C++ ABI speciﬁes 16 general purpose integer registers.
Therefore, the read-write eﬀect of an instruction on the set of registers can be
described as δp ∈ Δ16. Our analysis performs calculations based on the eﬀect
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
431
of each instruction i ∈ I via the function regEﬀect : I (cid:3)→ Δ16. Note that this
function can be purely deﬁned based on the semantics of instructions.
4.4 Calltarget Analysis
Our calltarget static analysis classiﬁes calltargets according to the parameters
they expect by taking into account the parameters’ count and types. Given a
set of address-taken functions4, the static analysis performs an interprocedural
analysis to determine the register states for the 6 argument registers.
Next, we present τ CFI’s analysis, followed by a discussion of optimizations
and interprocedural analysis. The basic analysis determines, for each register
and at a particular program location, that it is in one of the following states:
– rn, where n ∈ {64, 32, 16, 8} represents that the lower n bits of the register
are read before written along all control ﬂow paths starting from the location.
– ∗ represents that, along some control ﬂow path, the register is either written
before read or there are no reads/writes on the register.
The basic analysis described above can be implemented as a classic backward-
liveness analysis, except that it needs to track widths in read operations. For
instance, for an instruction i, if the regEﬀect function shows that i reads the
lower 16-bits of rax, then the state of rax immediately before the instruction
is r16. For an instruction with multiple successors, the register states after the
instruction are calculated based on the states at the beginnings of the successors.
For instance, if an instruction has two successors, and the state of rax is r64
before the ﬁrst successor and the state of rax is r32 before the second, then
the state of rax after the instruction is r32, essentially indicating that all paths
starting from the end of the instruction have a r32 read before write for rax.
Recall that the calltarget analysis performs an underapproximation; so using r32
is safe even though one of the paths performs a r64 read.
The backward-liveness analysis, however, is ineﬃcient. Our implementation
actually follows TypeArmor [25] to perform a forward interprocedural analysis
(with some modiﬁcation to consider widths of read operations). We refer readers
to the TypeArmor paper for details and give only a brief overview here.
First, note that τ CFI’s analysis operates at the basic block level instead of
the instruction level. Second, the analysis further reﬁnes the ∗ state to be either
w or c, where w (write before read) refers to a register being written to before
read from along some control ﬂow path and c (clear/untouched) represents that
the register is untouched along some control ﬂow path. The reason for such a
reﬁnement is that during forward analysis, if the states of all argument registers
before a basic block b are either rn or w (e.g., when b reads or writes all argument
registers), then there is no need to keep analyzing the successor basic blocks
since their operations would not change the state before b; this enables an early
4 Since an indirect call can target a function only if the function’s address is taken,
there is no need to analyze functions whose addresses are not taken; this is similar
to TypeArmor.
432
P. Muntean et al.
termination of the forward analysis and is thus more eﬃcient. On the other hand,
if the state of one of the argument registers is c, then the forward analysis has to
continue. This is because c indicates the register is untouched so far, but it can
be read or written in a future basic block. Further, the analysis is interprocedural
and maintains a stack to match direct function calls and returns during analysis.
Finally, for indirect calls, however, it does not follow to the targets, but performs
an underapproximation instead.
Parameter Count and Types. Once the analysis ﬁnishes, we can calculate a
function’s parameter count and parameter types based on the state before the
entry basic block of the function. The argument count is determined using the
highest argument register that is marked rn. The type of an argument register
is directly given by the rn state of the register.
4.5 Callsite Analysis
Our callsite analysis classiﬁes callsites according to the arguments they provide
by considering the argument count and their types. For callsite analysis, overesti-
mations are allowed: the callsite analysis overestimates the number of arguments
and the widths of arguments. As such a callsite is allowed to target a calltar-
get that requires a smaller or equal number of parameters and that requires a
smaller or equal width for each parameter.
For callsite analysis, we employ a customized reaching-deﬁnition analysis.
The analysis determines the states of registers. At a particular program location,
it determines whether or not a register is in one of the following states:
– sn, where n ∈ {8, 16, 32, 64}: this represents a state in which the register’s
lower n bit is set in a control-ﬂow path ending at the program location.
– t (trashed): this represents a state in which the register is not set on all control
ﬂow paths ending at the program location.
τ CFI’s reaching-deﬁnition analysis is implemented as an interprocedural
backward analysis similar to TypeArmor [25], the diﬀerence being that τ CFI
also tracks the widths in write operations to infer sn states. Once the analysis
is ﬁnished, it uses the register state just before an indirect callsite to determine
its argument count and types: If an argument register is in state sn, then it is
considered an argument that uses n bits; the argument count is determined by
the highest argument register whose state is sn.
4.6 Return Values
Knowing more information about return values of functions increases CFI preci-
sion. For instance, an indirect callsite that expects a return value should not call
a function that does not return a value; similarly, an indirect callsite that expects
a 64-bit return value should not call a function that returns only a 32-bit value.
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
433
For calltarget analysis, τ CFI traverses backwards from the return instruction of
a function and searches for uses of the RAX register to determine if a function has
a void or a non-void return type. In case there is a write operation on the RAX
register, τ CFI infers that the function’s return type is non-void; furthermore, it
tracks the widths of write operations to infer the width of the return type. For
calltarget return-value type estimation, overapproximations are allowed.
At a callsite, τ CFI traverses forward from the callsite to search for reads
before writes on the RAX register to determine if a callsite expects a return
value or not. In case there is such a read on the RAX register, τ CFI infers that
the callsite expects a return value; furthermore, it tracks the widths of read
operations to infer the width of the expected return value. For callsite return-
value type estimation, underapproximation is allowed.
4.7 Backward-Edge Analysis
In order to protect backward edges, we have designed an analysis that can deter-
mine possible legitimate return target addresses for each callee function. Our
algorithm used for computing the legitimate set of addresses for each callee
works as follows. First, a map is obtained after running the callsite and calltar-
get analysis (see Sects. 4.4 and 4.5 for more details); it maps a callsite to the set
of legal calltargets where forward-edge indirect control-ﬂow transfer is allowed
to jump. This map is then reversed to build a second map that maps from the
return instruction of a function (callee) to a set of addresses where the return
can transfer to.
The return target address set for a function return is determined by getting
the next address after each callsite address that is allowed to make the forward-
edge control ﬂow transfer. The map is obtained by visiting a return instruction
address in a function and assigning to it the addresses next to callsites that
can call the function. At the end of the analysis, all callsites and all function
returns have been visited and a set of backward-edge addresses for each function
return address is obtained. Note that the function boundary address (i.e., ret)
is detected by a linear basic block search from the beginning of the function
(calltarget) until the ﬁrst return instruction is encountered. We are aware that
other promising approaches for recovering function boundaries (e.g., [39]) exist,
and plan to experiment with them in future work.
4.8 Binary Instrumentation
Forward-Edge Policy Enforcement. The result of the callsite and calltarget
analysis is a mapping that maps a callsite to its allowed calltargets. In order to
enforce this mapping during runtime, callsites and calltargets are instrumented
inside the binary program with two labels. Additionally, each callsite is instru-
mented with CFI checks. At a callsite, the number of provided arguments is
encoded as a series of six bits. At a calltarget, the label contains six bits encod-
ing how many parameters the calltarget expects. Additionally, at a callsite 12
bits encode the register-width types of the provided arguments (two bits for
434
P. Muntean et al.
each parameter), while at the calltarget another 12 bits are used to encode the
types of the parameters expected. Further, at a callsite, several bits are used to
encode if the function is expecting a void return type or not, and the width
of the return type if it is nonvoid (similarly for a calltarget). All this informa-
tion is written in labels before callsites and calltargets. During runtime before a
callsite, these labels are compared by performing an XOR operation. In case the
XOR operation returns false (a zero value), the transfer is allowed; otherwise, the
program execution is terminated.
Backward-Edge Policy Enforcement. Based on the previously determined
reverse map, before each function return a randomly generated label value is
inserted. We decided to use these kinds of values as our main requirement is to
map a return to a potentially large number of return sites. The same label is
inserted before each legitimate target address (the next address after a legitimate
callsite). In this way, a function return is allowed to jump only to the instruction
that follows next to the address of a callsite.
For callsites that target a calltarget that is also allowed by another callsite,
τ CFI performs a search in order to detect if the callsite already has a label
attached to the address after the callsite. If so, a new label is generated and
multiple labels are stored for the address following the callsite. In this way,
calltarget return labels are grouped together based on the reverse map. This
design allows the same number of function return sites as the forward-edge pol-
icy enforces for each callsite. Finally, in case the comparison returns true, the
execution continues; otherwise, it is terminated.
Implementation
4.9
We have implemented τ CFI using the DynInst [30] (v.9.2.0) instrumentation
framework with a total of 5,501 lines of C++ code. We currently restricted our
analysis and instrumentation to x86-64 executables in the ELF format using
the Itanium C++ ABI calling convention. τ CFI can deal with the level of exe-
cutable obfuscation with which DynInst can deal. As such, we fully delegate this
responsibility to the used instrumentation framework underneath. We focused on
the Itanium C++ ABI convention as most C/C++ compilers on Linux implement
this ABI. However, the implementation separated the ABI-dependent code, so
we expect it to be possible to support other ABIs as well. We developed the
main part of our binary analysis pass in an instruction analyzer, which relies
on the DynamoRIO [40] library (v.6.6.1) to decode single instructions and pro-
vide access to its information. The analyzer is then used to implement our ver-
sion of the reaching-deﬁnition and liveness analysis. Further, we implemented a
Clang/LLVM (v.4.0.0, trunk 283889) backend (machine instruction) pass (416
LOC) used for collecting ground truth data in order to evaluate the eﬀectiveness
and performance of our tool. The ground truth data is then used to verify the
output of our tool for several test targets. This is accomplished with the help of
our Python-based evaluation and test environment implemented in 3,239 lines
of Python code.
τ CFI: Type-Assisted Control Flow Integrity for x86-64 Binaries
435
5 Evaluation
We have evaluated τ CFI by instrumenting various open source applications and
conducting a thorough analysis in order to show its eﬀectiveness and usefulness.
Our test applications include the following real-world programs: FTP servers
Vsftpd (v.1.1.0, C code), Pure-ftpd (v.1.0.36, C code) and Proftpd (v.1.3.3, C
code); Lighttpd web server (v.1.4.28, C code); two database server applications
Postgresql (v.9.0.10, C code) and Mysql (v.5.1.65, C++ code); the memory cache
application Memcached (v.1.4.20, C code); and the Node.js application server
(v.0.12.5, C++ code). We selected these applications to allow for a fair com-
parison with other similar tools. In our evaluation, we addressed the following
research questions (RQs): RQ1: How eﬀective is τ CFI? (Sect. 5.1); RQ2: What
security protection is oﬀered by τ CFI? (Sect. 5.2); RQ3: Which attacks
are mitigated by τ CFI? (Sect. 5.3) RQ4: Are other forward-edge tools better
than τ CFI? (Sect. 5.4)? RQ5: Is τ CFI eﬀective against COOP? (Sect. 5.5)
RQ6: How does τ CFI compare with Clang’s Shadow Stack? (Sect. 5.6) RQ7:
What runtime overhead does τ CFI impose? (Sect. 5.7) Our setup is based
on Kubuntu 16.04 LTS (k.v.4.4.0) using 3 GB RAM and four hardware threads
running on an i7-4170HQ CPU at 2.50 GHz.
5.1 Eﬀectiveness
Table 1 depicts the average number of calltargets per callsite, the standard devi-
ation σ, and the median. In Table 1, the abbreviation CS refers to the callsites,
while CT means calltargets. Note that the restriction to address-taken functions
(see column AT) is present. The label count∗ denotes the best possible reduc-
tion using the parameter count policy based on the ground truth collected by
our Clang/LLVM pass, while count denotes the results of our implementation
of the parameter count policy derived from binaries. The same applies to type∗
and type regarding the parameter type policy. A lower number of calltargets per
callsite indicates better results. Note that our parameter type policy is superior
to the parameter count policy, as it allows for a stronger reduction of allowed
calltargets. We consider this an important result, which further improves the
state-of-the-art. Finally, we provide the median and the pair of mean and stan-
dard deviation to allow for a better comparison with other state-of-the-art tools.
Table 1. Allowed callsites per calltarget for τ CFI’s count and type policies.