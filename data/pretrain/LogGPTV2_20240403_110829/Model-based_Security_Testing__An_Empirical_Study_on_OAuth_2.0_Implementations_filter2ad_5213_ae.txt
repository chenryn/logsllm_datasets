ﬁner-grained web security mechanisms. By blackbox fuzzing and
whitebox program analysis, AuthScan [4] extracted the protocol
from real implementations and evaluated the protocol via off-the-
shelf model checking tools. Inspired by these works, Fett proposed
an expressive infrastructure model to facilitate a comprehensive
checking in [16]. For more general studies, researchers [3, 29, 38]
FacebookSinaRenrenTencentAverage020406080100Identity ProviderPercnetage of Apps(%)  App ImpersonationCovert RedirectTable 3: Comparison between OAuthTester and Other Existing Model-based Inference/Veriﬁcation Tools
speciﬁcation
Required Input
network
trace
executable or
source code
Yes
Methodology
active
testing
iterative
reﬁnement
Output
dependency
data
(cid:88)
(cid:88)
state
machine
Selected Tools
Prospex [11]
ScriptGen [25]
Doupé [13]
Pellegrino [34]
Bansal [5]
AuthScan [4]
SMACK [7]
Antunes [2]
Our work
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Partial
Yes
passive
analyses
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Purpose
spec extraction
honeypot script
fuzzing
logic ﬂaws
model checking
model checking
TLS testing
spec complement
OAuth testing
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Therefore, hybrid-input methods have been proposed. Auth-
Scan [4] manages to infer the system model from the client-side
JavaScript code and the network trace. Due to the limited informa-
tion in the JavaScript code, the built model is not expressive enough
and thus can only discover general Web attacks (e.g., replay attack,
token leakage, etc) without any speciﬁcation-dependent vulnera-
bilities. Meanwhile, SMACK [7] relies on the source code of SSL
library to analyze the deviation of the real behavior from the stan-
dard model built from the TLS speciﬁcation. However, the source
code is often not available for OAuth applications.
As a result, the combination of speciﬁcation and the network
trace has attracted increasing attention. For instance, Antunes [2]
builds an initial model based on the speciﬁcation and then com-
plement it with the network trace. However, this model is not it-
eratively reﬁned by active testing and its major concern is to dis-
cover the commands or message formats that are not published/
documented. Unlike these previous works, OAuthTester combines
the speciﬁcation and the network trace information to iteratively/
adaptively build a more comprehensive system model for security
testing.
9. CONCLUSION
We proposed an adaptive model-based testing tool, OAuthTester,
to systematically evaluate the implementations of OAuth. With
OAuthTester, we have examined the implementations of 4 major
IdPs as well as 500 top-ranked US and Chinese websites which use
the Single-Sign-On service provided by these four IdPs. Apart from
existing loopholes, we have discovered 3 previously unknown vul-
nerabilities, all of which can result in serious consequences includ-
ing large-scale resource theft and application account hijacking.
Our ﬁndings demonstrate the efﬁcacy of OAuthTester in perform-
ing systematic, large-scale security analyses for real-world OAuth
implementations and deployments. Our testing results also provide
a reality-check on the quality of the current OAuth implementations
across the industry. These ﬁndings, hopefully, would facilitate the
design and deployment of more secure OAuth systems in the future.
10. ACKNOWLEDGMENTS
We informed all the impacted identity providers of their corre-
sponding vulnerabilities and provided them a compiled list of vul-
nerable applications on their platforms. Facebook and Sina had
subsequently conﬁrmed our ﬁndings and helped to notify the af-
fected applications. For the other IdPs which did not respond to
our disclosure, we had re-informed them with an updated list of
vulnerable applications.
We thank anonymous reviewers for their insightful comments.
This work is supported in part by a CUHK-Hong Kong RGC Direct
Grant (Project No. 4055031), a CUHK Technology and Business
development Fund (Project No. TBF15ENG003), NSFC (Grant
No. 61572415), and the General Research Funds (Project No. CUHK
4055047 and 24207815) established under the University Grant
Committee of the Hong Kong SAR, China.
11. REFERENCES
[1] R. Abela. HTTP Fuzzer. acunitex.
[2] J. Antunes and N. Neves. Automatically complementing
protocol speciﬁcations from network traces. In Proceedings
of the 13th European Workshop on Dependable Computing.
ACM, 2011.
[3] A. Armando, R. Carbone, L. Compagna, J. Cuellar, and
L. Tobarra. Formal analysis of SAML 2.0 web browser
single sign-on: breaking the SAML-based single sign-on for
Google apps. In Proceedings of ACM workshop on Formal
methods in security engineering, 2008.
[4] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena,
J. Sun, Y. Liu, and J. S. Dong. AuthScan: Automatic
extraction of web authentication protocols from
implementations. In NDSS, 2013.
[5] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering
concrete attacks on website authorization by formal analysis.
In CSF, 2012.
[6] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for
cross-site request forgery. In CCS. ACM, 2008.
[7] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud,
C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K.
Zinzindohoue. A messy state of the union: Taming the
composite state machines of TLS. In S&P, 2015.
[8] S. Chari, C. S. Jutla, and A. Roy. Universally composable
security analysis of OAuth v2.0. IACR Cryptology ePrint
Archive, 2011.
[9] E. Y. Chen, S. Chen, S. Qadeer, and R. Wang. Securing
multiparty online services via certiﬁcation of symbolic
transactions. 2015.
[10] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and
P. Tague. OAuth demystiﬁed for mobile application
developers. In CCS. ACM, 2014.
[11] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda.
Prospex: Protocol speciﬁcation extraction. In S&P. IEEE,
2009.
[12] A. C. Dias Neto, R. Subramanyan, M. Vieira, and G. H.
Travassos. A survey on model-based testing approaches: a
systematic review. In Proceedings of ACM international
workshop on Empirical assessment of software engineering
languages and technologies, 2007.
[13] A. Doupé, L. Cavedon, C. Kruegel, and G. Vigna. Enemy of
the state: A state-aware black-box web vulnerability scanner.
In USENIX Security, 2012.
[14] J. Ernits, R. Roo, J. Jacky, and M. Veanes. Model-based
testing of web applications using NModel. Springer, 2009.
[15] J. Ernits, M. Veanes, and J. Helander. Model-based testing of
robots with NModel. Proc. Microsoft Research, 2008.
[16] D. Fett, R. Kusters, and G. Schmitz. An expressive model for
the web infrastructure: Deﬁnition and application to the
Browser ID SSO system. In S&P. IEEE, 2014.
[17] K. Gibbons, J. O. Raw, and K. Curran. Security evaluation of
the OAuth 2.0 framework. Information Management and
Computer Security, 22(3), 2014.
[18] D. Hardt. RFC6749: The OAuth 2.0 authorization
framework. 2012.
[19] E. Homakov. The Achilles Heel of OAuth or Why Facebook
Adds Special Fragment.
[20] E. Homakov. The most common OAuth2 vulnerability.
http://homakov.blogspot.hk/2012/07/
saferweb-most-common-oauth2.html.
[21] P. Hu, R. Yang, Y. Li, and W. C. Lau. Application
impersonation: problems of OAuth and API design in online
social networks. In Proceedings of the ACM conference on
Online social networks, 2014.
[22] J. Jacky. Pymodel: Model-based testing in Python. In
Proceedings of the Python for Scientiﬁc Computing
Conference, 2011.
[23] J. Jacky, M. Veanes, C. Campbell, and W. Schulte.
Model-based software testing and analysis with C#.
Cambridge University Press, 2007.
[24] W. Jing. Covert redirect attack.
http://tetraph.com/covert_redirect.
[25] C. Leita, K. Mermoud, and M. Dacier. ScriptGen: an
automated script generation tool for honeyd. In Computer
Security Applications Conference, 21st Annual. IEEE, 2005.
[26] T. Lodderstedt, M. McGloin, and P. Hunt. RFC6819: OAuth
2.0 threat model and security considerations. 2013.
[27] G. Maatoug, F. Dadeau, and M. Rusinowitch. Model-based
vulnerability testing of payment protocol implementations.
In HotSpot’14-2nd Workshop on Hot Issues in Security
Principles and Trust, 2014.
[28] B. Marczak, N. Weaver, J. Dalek, R. Ensaﬁ, D. Fiﬁeld,
S. McKune, A. Rey, J. Scott-Railton, R. Deibert, and
V. Paxson. China’s great cannon. Citizen Lab, 2015.
[29] M. Miculan and C. Urban. Formal analysis of Facebook
Connect Single Sign-On authentication protocol. In
SOFSEM, 2011.
[30] B. Muthukadan. Selinum with Python.
[31] OAuth.io. CasperJs Automated Testing for The OAuth Flow.
[32] OWASP. Fuzzing with WebScarab.
[33] S. Pai, Y. Sharma, S. Kumar, R. M. Pai, and S. Singh. Formal
veriﬁcation of OAuth 2.0 using Alloy framework. In
Communication Systems and Network Technologies (CSNT)
IEEE, 2011, 2011.
[34] G. Pellegrino and D. Balzarotti. Toward black-box detection
of logic ﬂaws in web applications. In NDSS, 2014.
[35] C. Schulze, D. Ganesan, M. Lindvall, R. Cleaveland, and
D. Goldman. Assessing model-based testing: an empirical
study conducted in industry. In Companion Proceedings of
the International Conference on Software Engineering.
ACM, 2014.
[36] E. Shernan, H. Carter, D. Tian, P. Traynor, and K. Butler.
More guidelines than rules: CSRF vulnerabilities from
noncompliant OAuth 2.0 implementations. In Detection of
Intrusions and Malware, and Vulnerability Assessment. 2015.
[37] S.-T. Sun and K. Beznosov. The devil is in the
(implementation) details: an empirical analysis of OAuth
SSO systems. In CCS, 2012.
[38] S.-T. Sun, K. Hawkey, and K. Beznosov. Systematically
breaking and ﬁxing OpenID security: Formal analysis,
semi-automated empirical evaluation, and practical
countermeasures. Computers & Security, 2012.
[39] R. Wang, S. Chen, and X. Wang. Signing me onto your
accounts through Facebook and Google: a trafﬁc-guided
security study of commercially deployed single-sign-on web
services. In S&P, 2012.
[40] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and
Y. Gurevich. Explicating SDKs: Uncovering assumptions
underlying secure authentication and authorization. In
USENIX Security, 2013.
[41] L. Xing, Y. Chen, X. Wang, and S. Chen. Integuard: Toward
automatic protection of third-party web service integrations.
In NDSS, 2013.
[42] Y. Zhou and D. Evans. SSOScan: Automated testing of web
applications for Single Sign-On vulnerabilities. USENIX
Security, 2014.
APPENDIX
A. ATTACK PROCEDURE FOR MISUSED
STATE PARAMETER
An attacker can behave as a normal user to log into App with
IdP in Step 1-3; Afterwards, the attacker can 4) intercept the URI
which contains the STATE parameter and the authorization code (or
access token); 5) exploiting the misuse problem, the attacker then
constructs a malicious URI which contains the attacker’s code and
a ‘valid’ STATE parameter; 6) launch CSRF attack (e.g., via mali-
cious website) to send the crafted URI to the vulnerable application
via the victim’s browser; 7) For the forged request, the vulnerable
application cannot correctly check the STATE parameter and mis-
takenly assumes the operation is from the victim.
The above attack assumes the attacker can obtain a valid STATE
parameter of the victim somehow. This stringent requirement, how-
ever, can be bypassed by the different types of misuses of the STATE
parameter.
Figure 8: The Work Flow of CSRF When the STATE Parameter Is
Misused
To enable the account hijacking, it requires the application to
support the Identity Federation as described in Section 2.3.1 and
the victim being logged into the application when the attack is
launched. With these two prerequisites, this attack can bind the
victim’s application account to the attacker’s IdP account. As a
result, the attacker can stealthily log into the application as the vic-
tim later on with his own IdP account and manipulate/ operate the
victim’s account accordingly.
AppUser (Victim)    IdPAttacker1). Attacker visits App2) redirect_uri+STATE3) authentication& authorization 4) code +STATE7)https://xxx?code=attacker’s code &state=victim’s STATE&...5). User visits a malicious website6).  sends malicious page   <img src=https://xxx? code=attacker’s code&state=victim’s STATE&...e.g