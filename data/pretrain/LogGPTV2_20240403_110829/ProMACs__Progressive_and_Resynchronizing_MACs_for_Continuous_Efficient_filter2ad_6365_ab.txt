the packet’s immediate authentication upon receipt, the goodput is
reduced by the size of the tag, which violates requirement II.
2.2.2 Truncated MACs. In settings that require low latency, and
have constraints on packet size or energy consumption, regular
MACs incur excessive overhead. To remedy the situation, it may
be sufficient to protect packets from modification for a short time.
Assuming that an adversary could neither predict nor forge a packet,
and would have to find a packet along with a corresponding valid
tag within a short period of time, some techniques offer lower
security guarantees commensurate with reduced overhead.
This idea has been suggested for several specific cases. To achieve
real-time communication on the CAN bus, [50] propose to add
short MACs to CAN frames, evaluating performance for tags of
various lengths. IEEE 802.15.4 (the foundation of ZigBee) also de-
scribes MAC truncation to as lowe as 32 bits [24], mainly to con-
serve transmission power and time. IPSec and DTLS are network-
and session-layer protocols, respectively, that support truncated
MACs of 96 [21, 51] and 80 [38] bits. Even the main signature and
MAC standards, such as HMAC [35–37, 43], DSS [42], ISO/IEC
9797 [53, 54], SHA3-based cSHAKE, KMAC, TupleHash, and Paral-
lelHash [31] support truncated MACs. However, using truncated
MACs results in an exponential security loss in the number of
truncated bits, hence violating our requirement III.
2.2.3 Aggregating Packets. A straightforward approach to satisfy
requirements II and III (and, to some extent, IV) is to aggregate
packets before generating a MAC, i.e., compute a tag over multiple
packets. This way, instead of each packet carrying a MAC, only one
out of every number of packets carries it. On prominent aggregation
technique in [23] shows how each packet is transmitted with a
hash of the subsequent packet, thus providing a means to detect
modifications of future packets. The signature of the first packet
includes the hash of the second packet and this signature is sent
at the beginning of the stream. This approach requires advance
knowledge of the entire packet stream. Another technique in [23]
is based on online stream authentication, where trust is chained by
sending the public key for verification of each subsequent packet.
EMSS [44] and its several adaptations [14, 15] reverse the above
idea by sending a full-length hash of previous packets to allow for
modification detection without source authentication, and a full
signature for authentication at the end of the stream. However, this
easily allows an adversary to forge packets until a tag is actually
required, which conflicts with requirement I.
2.2.4 Aggregated MACs. The idea behind aggregated MACs is that
tags are computed individually for each packet and are then com-
bined into a single tag. One example is XOR MAC [6] which does
not provide a security level above truncated MACs, hence contra-
dicting requirement III. Moreover, resynchronization is not directly
possible (requirement IV). The concept of aggregated signatures
was extended to MACs in [29] and was later generalized in [33]
(see also [18]). While higher security levels are possible, no current
scheme allows for direct resynchronization. To reduce MAC band-
width overhead, Mini-MAC [49] adapts the resulting tag length
according to the available space within its use-case. It respects
stream characteristics by including a history of previous packets as
MAC input. Besides the fact that including a packet history signifi-
cantly raises the computation overhead, resynchronization is not
supported.
Stateful MACs. Similar to our motivation, stateful MAC
2.2.5
schemes focus on authenticity of data streams. A stateful MAC
is similar to a classical MAC combined with an additional state at
sender or receiver side. In this context, various security definitions
and stream properties have been defined, e.g., [12, 13, 20, 28, 32, 46].
Current sponge-based constructions (e.g., Keccak [9], Blinker
[47], Strobe [26] and Xoodoo [17]) can be used as stateful MACs
to take advantage of the specific proprerties of packet streams. By
operating in MAC-and-continue mode [47], internal state forward-
ing can be realized. Furthermore, the duplex operation mode [8] of
sponge constructions can be used to output shorter tags to achieve
statefulness and efficient transmission. The major distinction is
that these constructions are fixed in their chaining approaches, i.e.,
using the whole preceding packet stream as a chain. This inherently
prevents resynchronization of internal states in case of a disruption,
thus violating requirement IV.
3 PRELIMINARIES
3.1 Message Authentication Codes
We use the standard definition of Message Authentication Codes
(MAC) from [30].
Definition 3.1 (Message Authentication Codes (MACs)). A MAC
scheme includes several sets and probabilistic algorithms. The sets
are:
• M - the message space
• K - the key space
• T - the tag space
Furthermore, the following algorithms are involved:
(1) The key-generation algorithm Gen samples a secret key 𝑘 ∈ K
(2) The tag-generation algorithm Sig takes as input a key 𝑘 and a
message 𝑚 and outputs a MAC tag 𝑡.
(3) The verification algorithm Vrfy takes as inputs a key 𝑘, a message
𝑚, and a tag 𝑡 and outputs a decision 𝛿 ∈ {true, false}. true
indicates that the tag is valid, while false means that the tag is
invalid.
3.2 Pseudorandom Functions
Our construction will be based on a pseudorandom function (PRF),
as defined below.
Definition 3.2 (Pseudorandom Function).
A function
𝐹 : {0, 1}ℓ ×{0, 1}𝑛 → {0, 1}𝑚 is called (𝑞, 𝑡, 𝜀)-pseudorandom if the
following holds. Consider an algorithm D, called the distinguisher.
D gets black-box access to either 𝐹𝑘 for a uniformly sampled 𝑘 ∈
{0, 1}ℓ (with 𝐹𝑘(·) = 𝐹(𝑘, ·)), denoted by D𝐹𝑘 , or black-box access
to a uniformly sampled function 𝑓 : {0, 1}𝑛 → {0, 1}𝑚, denoted
by D 𝑓 . Eventually, D outputs a bit 𝑏 ∈ {0, 1}, denoted by 𝑏 ← D.
Then, if D runs in time at most 𝑡 and makes at most 𝑞 queries to
the black box, it holds that
(cid:12)(cid:12)(cid:12)𝑃𝑟(cid:104)1 ← D𝐹𝑘(cid:105) − 𝑃𝑟(cid:104)1 ← D 𝑓(cid:105)(cid:12)(cid:12)(cid:12) < 𝜀.
(1)
4 PROGRESSIVE MACS
We start by overviewing our constructions, before formally defining
ProMACs and their security properties.
4.1 Overview
Progressive MACs combine the concepts of aggregated packets
and stateful MACs, mentioned in Section 2. At the beginning, both
sender and receiver agree on the same internal, secret state, based
on a shared secret key. For each packet, a tag is computed and sent
together with the packet. The value of the tag depends on both
the packet and the internal state. Moreover, the state is updated
according to the current packet.
On the one hand, this allows immediate verification of packets
(Requirement I). On the other hand, each tag now depends on
both the current and previous packets. This yields progressive
authentication, whereby future tags implicitly increase confidence
of the integrity of earlier packets. Note that this allows us to use
smaller tags (Requirement II) while a high level of security, with
respect to tag integrity, is gradually achieved (Requirement III).
To support resynchronization, internal state update can be con-
figured such that it depends only on a limited number of previous
packets, denoted as Area of Dependency. Thus, even if a transmis-
sion error occurs, it is guaranteed that after correctly receiving
a sufficient number of packets, the sender and receiver states are
automatically synchronous again (Requirement IV). We want to
point out that if fast resynchronization is necessary, one can choose
an Area of Dependency of a rather short length. Even if the state
depends only on the current and the previous packets, i.e., a length
of two, it allows us to halve the length of tags and significantly
reduce bandwidth overhead.
Fig. 2 depicts the generic ProMACs workflow.
𝑚𝑖
𝑡𝑖
𝑆𝑖𝑔𝑘
𝑚𝑖+1
𝑡𝑖+1
𝑆𝑖𝑔𝑘
𝑈 𝑝𝑑𝑘
𝑖
𝑠
e
t
a
t
S
𝑈 𝑝𝑑𝑘
𝑖
𝑠
e
t
a
t
S
Figure 2: Generic workflow of a progressive MAC scheme.
The tag generation 𝑆𝑖𝑔𝑘 might produce short tags.
Security of ProMACs is intuitively determined by several param-
eters: Forging a single packet is as difficult as guessing a single
truncated tag (either guessing the secret key, or the tag directly),
yet only if no subsequent packets with their corresponding tags
are received. Hence, an adversary has to prevent delivery of any
tag subsequent to the forged packet, or actively guess all subse-
quent tags successfully, since the recipient would detect forgery
otherwise.
Consequently, in theory, ProMACs security against existential
forgery is the same as that of classical MACs: an attacker who aims
to manipulate only the last packet of a ProMACs-protected packet
stream must put in the same effort as in the case of a classical
(truncated) MAC.
In practice, however, using ProMACs that incorporates informa-
tion about previous packets in its internal state makes selective
forgery more difficult in the following sense: the more packets are
following in the stream after tampering, the more adversarial effort
it takes, since the subsequent tags need to be forged as well. Note
that if these tags are not forged accordingly, the attack is detected.
That is, only in the case that an attacker aims to forge the last
packet1, security of a ProMACs falls back to the security of classical
(possibly truncated MACs). In all other cases, ProMACs provides a
higher level of security. Moreover, ProMACs can easily be extended
to use varying-length tags. By using a higher tag length for the last
packets, security of these would be at least as high as using a MAC
with a standard security level, e.g., 128 bits.
1Note that it may not always be clear when the end of a packet stream is reached.
4.2 Formal Definition
We first provide a formal definition of ProMACs. This definition
extends the notion of classical MACs [30]. While the extension
is rather intuitive, defining the corresponding security properties
is more subtle. The challenge is to correctly capture the kind of
information an attacker may collect before attempting forgery. We
provide a concise definition in Section 4.3. Note that our definition
of ProMACs covers classical MACs as a special case. We discuss
this in detail at the end of this section.
scheme includes several sets and algorithms. The sets are:
Definition 4.1 (Progressive MACs). A progressive MAC (ProMAC)
• M - the packet space
• K - the key space
• S - the state space
• T - the tag space
Also, the following algorithms are included: (Gen, Init, Upd, Sig, Vrfy).
We assume that the party that uses a ProMAC maintains an inter-
nal state from S. The working principles of the algorithms are as
follows:
(1) The probabilistic key-generation algorithm Gen samples a secret
key 𝑘 ∈ K
(2) The probabilistic initialization algorithm Init samples an initial
state 𝑠0 ∈ S
(3) The deterministic update algorithm Upd : K × S × M → S
takes as input a key 𝑘 ∈ K, a state 𝑠 ∈ S, and a packet 𝑚 ∈ M
and outputs a new state 𝑠′. We write this as 𝑠′ := Upd𝑘(𝑠, 𝑚)
(4) The deterministic tag-generation algorithm Sig takes as input a
key 𝑘, a state 𝑠, and a packet 𝑚 and outputs a tag 𝑡. We write
this as 𝑡 := Sig𝑘(𝑠, 𝑚).
(5) The deterministic verification algorithm Vrfy takes as inputs a
key 𝑘, a state 𝑠, a packet 𝑚, and a tag 𝑡 and outputs a decision
𝛿 ∈ {true, false}. The output true indicates that the tag has
been accepted while it has been rejected in the case of false. We
write this as 𝛿 := Vrfy𝑘(𝑠, 𝑚, 𝑡).
We chose our algorithms Sig and Upd to be deterministic, since
in the case of probabilistic algorithms we would have to transmit
additional information, which conflicts with our primary objective,
to achieve efficient communication.
While classical MACs operate independently on single packets,
ProMACs are meant to be used for integrity of packet streams. To
this end, the workflow is as follows (see Fig. 2): Initially, a secret
key is generated by executing Gen. Then, for each packet stream
a random initial state 𝑠0 is picked by Init. The random initial state
is communicated in the clear to other parties. Given this, for each
packet 𝑚𝑖 in the packet stream, the state is updated using Upd and
the next tag is produced via Sig from this state. This results into
a stream of the form 𝑠0, 𝑚1, 𝑡1, 𝑚2, 𝑡2, . . .. Verifiers use 𝑠0 as initial
state and then subsequently update the state using Upd and the
incoming packets and finally validate the corresponding tags using
Vrfy.
4.3 Correctness and Soundness
4.3.1 Correctness. Correctness means that, for every key 𝑘 output
by Gen, for every initial value 𝑠0 ∈ S, for every 𝑗 ≥ 1, and for
every sequence of packets (𝑚1, . . . , 𝑚 𝑗) ∈ M 𝑗, it holds that if the
corresponding tags (𝑡1, . . . , 𝑡 𝑗) are honestly computed as outlined,
the verification algorithm Vrfy accepts all of these.
Defining the notion of security is less straightforward for the
the following two reasons. First, the common security model for
MACs allows an attacker to make sign queries to an oracle to learn
the tags for selected packets, i.e., the input to the Sig algorithm.
However, our situation is different since the tag is computed from
an internal state unknown to an attacker.
Second, for practical reasons we want to support easy resynchro-
nization, i.e., even if some packets in a stream are lost, it should be
possible to validate the remaining packets. Technically, this means
that both sender and receiver should eventually reach the same
state again, even if some packets are lost. To this end, we introduce
an additional notion, Area of Dependency, with respect to the up-
date function that reflects how many successive packets determine
the next state.
4.3.2 Area of Dependency. Before we define Area of Dependency,
𝑘(𝑠0, 𝑚1, . . . , 𝑚𝑖) = 𝑠𝑖
we need to extend our notation. We write Upd𝑖
to reflect that applying 𝑖-times the update function on initial state
𝑠0 with key 𝑘 on packets 𝑚1, . . . , 𝑚𝑖 results into state 𝑠𝑖. That is, we
have:
𝑘(𝑠0, 𝑚1) = Upd𝑘(𝑠0, 𝑚1)
1
Upd
𝑘(𝑠0, 𝑚1, 𝑚2) = Upd𝑘(Upd𝑘(𝑠1, 𝑚1), 𝑚2)
2
Upd