the previously returned IP addresses works, the EID resolution
layer re-resolves the EID in case the corresponding destination IP
addresses have changed.
Where do these identiﬁers go?
Packets are logically des-
tined for endpoints, which are identiﬁed by EIDs. Hence, we
imagine that EIDs would be carried in packets to identify the
packet’s logical endpoint. In Section 3.2, we say why the sender
must put the destination EID in the packet. See [60] for a more
complete description of one instantiation of this architecture at the
EID level.
The case of SIDs is conceptually identical. SIDs name services
or data, and so the SID must often be carried in band, like the EID.
However, the SID is not required to be in every packet but rather
in each logical piece of data being communicated between sender
and recipient. The actual location of SIDs in data streams would
vary by application and by what the SID is being used for. For
example, the SID corresponding to a given SMTP server might be
carried in an e-mail header. Similarly, the SID corresponding to an
HTTP Web proxy might be in the HTTP header. If an SID named
a Web page, the SID might again be somewhere in the HTTP
header. We will use the term application data unit [10] to mean
“a coherent unit of data transmitted between applications.”
In
the examples above, the e-mail and HTTP requests were the ADUs.
Beneﬁts: As explained in Sections 2.1 and 2.2, naming data
and services with SIDs overcomes the problems of using DNS-
based URLs for that purpose. Naming endpoints with EIDs
provides natural solutions to mobility and multi-homing:
if an
endpoint identiﬁed by EID e changes its IP address,
then the
EID resolution layer on a peer of the endpoint will re-resolve e
to ﬁnd the new IP address.8 As explained in [32, 33, 35], this
rebinding enables continuous operation in the presence of mobile
or renumbered hosts and provides smooth failover for multi-homed
hosts; we direct the reader to these references for more details.
7We envision, as in HIP, using explicit end-to-end signaling for ex-
pected address changes and using EID resolution layer keepalives
to detect unexpected address changes or other failures.
8This re-resolution could conceivably occur on each packet but
more likely will be invoked only when the EID layer on the peer
detects failure.
3.2 Delegated Bindings and Intermediaries
The other major aspect of our architecture, delegation,
is
dictated by principle #3. In this section we explain the mechanics
of delegation, and then describe how delegation provides support
for intermediaries.
Delegation: At the EID layer, a host with EID e can insert
the IP address or EID of a different host in the resolution infras-
tructure. As a result, when a third host establishes a transport
connection to e, its packets actually go to the delegated host. The
host identiﬁed by e must establish state at the delegated host—
through some protocol outside the scope of our discussion—so that
when packets arrive at the delegated host they can be forwarded.
The intermediary uses the destination EID, which is carried in
every packet, to determine the intended ultimate recipient of the
packet. This type of intermediary is network-level, in that it is a
delegate for an endpoint, not a service.
At the SID layer, the mechanism is similar: a service s, running
on a host h, rather than listing the EID of h in the resolution in-
frastructure, instead lists the EID of some other endpoint, o.
(s
could also list an SID instead of an EID, and this SID would map
to an EID.) s would have to establish state at o so that o would
know how to handle ADUs destined for s. o could be, for example,
an application-level gateway: hosts trying to contact s would have
their connections terminated at endpoint o, and the gateway would
inspect the ADUs, and then make a decision about whether to for-
ward them. The reason that s’s SID must be in the data stream near
or in the ADU is to let o know which service is the logical desti-
nation of the ADU: o might be a gateway for other services s(cid:1)
, s(cid:1)(cid:1)
,
etc. We will call endpoints such as o application-level intermedi-
aries and give examples of such intermediaries below.
In accordance with Principle #4, at the SID (resp., EID) level, re-
ceiving entities could express the fact that more than one intermedi-
ary should be involved: services (resp., endpoints) could list in the
resolution infrastructure a sequence of SIDs (resp., EIDs). Each of
these identiﬁers represents an intermediary that the receiver wants
the ADU (resp., packet) to visit on the way to the ﬁnal destination.
However, Principle #4 also applies to the source, so our architec-
ture allows sources to specify a sequence of EIDs or SIDs to be tra-
versed, via the well-known mechanism of stacked identiﬁers (used
by i3 [53] and others). One can think of these waypoints as source-
controlled (as opposed to receiver-controlled) intermediaries; the
source can express that it wants one or more intermediaries to send
on its behalf, just as the destination can express through the resolu-
tion of its EID that it wants one or more intermediaries to receive on
its behalf. An intermediary, which is assumed to be a chosen dele-
gate of either sender or receiver, can also make decisions on behalf
of the delegator (which might include pushing additional identiﬁers
onto the destination stack). These two mechanisms, sender- and
receiver-controlled indirection, are not exclusive: when both enti-
ties specify intermediaries, the source creates the actual sequence
of intermediaries by concatenating its desired sequence to the se-
quence speciﬁed by the receiver (which is returned in the resolution
step).
When the receiver and sender switch roles, the original receiver
may need to resolve the original sender’s EID to determine the
path back to the sender. The same thing could occur at the SID
level, which might require introducing the notion of a source SID.
the EID level,
Example use: At
the delegation mechanism
described above—in which an endpoint inserts into the resolution
infrastructure a map from its EID to the IP address of a delegate—
can support standard network-level intermediaries (NATs/NAPTs,
VPNs [19], and ﬁrewalls) cleanly and coherently. Depending on
the scenario and the security assumptions, the intermediary may
be conﬁgured for no access control if it is only doing NAT, for
some access control if it acts as a ﬁrewall that allows only certain
ports, or for much more stringent access control if it acts as a VPN
box, logically interposed between a private network and the global
Internet and only accepting packets from pre-speciﬁed EIDs.
To expand slightly on the ﬁrewall example, all hosts belonging
to an institution could logically reside behind its network-level ﬁre-
wall; each such host would list the ﬁrewall’s EID in the resolu-
tion infrastructure, and then would send to the ﬁrewall their own
EID (and possibly IP address and security information allowing
the ﬁrewall and the endpoint to authenticate each other), so that the
ﬁrewall would know where to forward packets. This approach is
detailed in [60].
One could also use EID-level delegation to provide some protec-
tion against denial-of-service (DoS) attacks. A server could shield
itself from attackers by placing a forwarding intermediary between
itself and untrusted clients and by installing trafﬁc ﬁlters at the for-
warding intermediary. This approach is identical in spirit to the
overlay DoS protection schemes proposed in SOS [25] and May-
day [1]; our point here is merely to illustrate how their basic tech-
niques can be implemented within our architecture. Of course, an
attacker could launch a DoS attack by sending packets directly to a
server’s IP address, which our architecture cannot prevent since it
leaves alone current routers. However, having all incoming packets
directed through the same intermediary would simplify router-level
packet ﬁltering.
At the SID level, the delegation mechanism allows the owners
of services and data items to invoke application-level proxies. For
example, say that a given e-mail user, user@domain, wants to re-
ceive e-mail from an SMTP mail server after having it ﬁrst scanned
for spam and viruses at a third-party site specializing in this task.
To achieve this functionality today, the administrator of “domain”
makes the MX record of “domain” resolve to the third-party site.
This approach is limited, however: ﬁrst, an e-mail address cannot
map to more than one intermediary, and, second, different e-mail
addresses in the same domain are forced to resolve to the same mail
server (though this limitation could be overcome by deploying the
MB resource record [30], which works at the granularity of e-mail
addresses).
SIDs can address these limitations. Before continuing, we em-
phasize that the following details give one possibility; better ap-
proaches, also based on SIDs, likely exist. Using SIDs, the owner
of the address could insert into an auxiliary mapping service (one
such service being DNS with a record type mapping e-mail ad-
dresses to SIDs) the mapping from user@domain (which functions
here as a user-level descriptor) to a single SID, s, which identi-
ﬁes the e-mail account. The owner of the address would also have
inserted into the SID resolution infrastructure a map from s to a se-
quence of destinations, [s1, s2], where s1 identiﬁes the third-party
virus ﬁltering service and s2 identiﬁes the user’s SMTP server. Ob-
serve at this point that the services can change administrative do-
mains or be mobile or multi-homed, and as long as the mapping
from the si to the corresponding EIDs is correct, the owner of the
address need not get involved.
To send e-mail to user@domain, a mail agent would ﬁrst resolve
the user-level descriptor to get s, then resolve s to get [s1, s2], and
then send the e-mail to the endpoint represented by s1 (which re-
quires resolving s1 to get an EID). Once the e-mail arrived at the
third-party service, the third-party service would resolve s2 to an
endpoint and then send the e-mail message. The pseudo-code in
Figure 3 gives more detail. Of course, for this approach to work,
// M is the message to be sent
// s1 is SID of virus filter
// s2 is SID of mail server
send_message()
{
SID s <-- lookup(user@domain);
SID_Sequence [s1 s2] <--- sid_resolve(s);
send_email(s2|M, s1); // send "s2|M" to s1
}
send_email(s2|M, s1)
{
EID e1 <-- sid_resolve(s1);
tcp_connect(e1); // note: TCP sees EIDs
tcp_send(s2|M, eid1);
}
// s1 now sends cleaned message M’ to s2
forward_cleaned_email(M’, s2) {
EID e2 <-- sid_resolve(s2);
tcp_connect(e2); // note: TCP sees EIDs
tcp_send(M’, e2);
}
Figure 3: Pseudo-code showing SID-level delegation in e-mail
example.
e-mail agents would have to be “SID-aware”. In general, taking
advantage of SIDs requires changes to application software, as dis-
cussed in Section 1.
Other examples of application-level intermediaries include those
for the Web. Owners of Web servers or particular Web objects
could direct the resolution of the appropriate SID to a cache or
to a sequence of transcoders with the result that Web clients re-
questing the given objects would be directed to this sequence of
intermediaries. Senders could also invoke proxies by using SIDs.
Both sender- and receiver-invoked intermediaries here would re-
quire changes to HTTP.
Although much of the functionality provided by our inter-
mediaries can be achieved with today’s middleboxes, we think
intermediaries are a better approach, for several reasons. First,
the intermediaries do not violate layering principles or protocol
semantics; they only inspect packets or ADUs explicitly addressed
to them. Second, they are explicitly invoked by endpoints (at the
network level) or services (at the application level); no endpoint is
forced to send its trafﬁc through intermediaries. Of course, people
may still deploy architecturally suspect middleboxes that impose
their will on endpoints. Our point here is that these middleboxes
are no longer necessary to achieve much of the same functionality.
Third, because intermediaries are explicitly requested and globally
addressed, they need not lie on the IP routing path between logical
source and logical destination.
The purpose of
this section was to illustrate,
in general
terms, how one might build an architecture around the principles
of Section 2. We leave many ﬁne points unresolved, such as the
signaling protocols required to set up state at intermediaries, the
software and API to interpret and create stacks of identiﬁers, and
the detailed implications of this layered naming for host software.
Also, we have not discussed security. For now, we make only
the following brief comments. Broadly speaking, the security is-
sues of our proposal exist at the network and the application levels;
at both levels, we believe our proposal makes things worse and bet-
ter. At the network level, decoupling location and identity means
that using IP routing to send a packet to a given location (via IP)
no longer means that the packet is going to the host with the in-
tended identity (EID). On the other hand, because EIDs are ﬂat,
they can hold cryptographic meaning; e.g., the identiﬁers could be
derived by hashing a public key. As a result, two communicating
parties, given each other’s identiﬁers, can authenticate each other in
a way that they could not if hosts were identiﬁed only by IP address.
HIP [32, 33, 35] and UIP [14] are premised on these facts—HIP
is exactly designed to address security issues—and we can inherit