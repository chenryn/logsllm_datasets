[ ]
c
Fig. 5. A simple example for update request.
and sends [v1]s to SDM and v ⊕ [v1]c to CSP. Then, SDM
]s = [v]s ⊕ [v1]s, and
updates its share [v]s by computing [v
]c = [v]c⊕v⊕[v1]c.
∗
CSP updates its share [v]c by computing [v
]c = v1, namely, v is successfully
It is obvious that [v
updated to be v1. This ensures the independent update of v
shared between SDM and CSP.
]s ⊕ [v
∗
∗
∗
Each PU can prepare its update request in exactly the same
way as the above example. Speciﬁcally, if PU k wants to
update its SAI {ij
}n×n shared between SDM and CSP to
get {ij
k∗}n×n, it can prepare a share of update request
k
[Ck]s = {[Cij
k ]s}n×n = {[ij
for SDM and the other share
[Ck]c = {[Cij
k ]c}n×n = {ij
k
k∗]s}n×n
⊕ [ij
k∗]c}n×n
for CSP.
Having all update requests prepared as above, the update
algorithm is straightforward, as shown in Alg. 3. This algo-
rithm does not apply any cryptographical tools, but updates
spectrum database directly in the secret sharing form. It is run
by both SDM and CSP independently, without any interaction.
Thus, the algorithm incurs very slight performance overhead
compared to the underlying algorithm without any security
guarantees.
The complexity of the update algorithm is O(KN ) where
N = n2 is the number of squares, which is the same as that
of the underlying unsecure algorithm.
289
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
Protocol 2 Secure Database-driven Spectrum Sharing Protocol
Input: A boolean circuit Q computing query operations; the
secretly shared spectrum database M = {mij}n×n, with
one share {[mij]s}n×n held by SDM and the other share
{[mij]c}n×n held by CSP; update requests from PUs and
query requests from SUs.
Output: The updated matrix M∗ secretly shared by SDM and
CSP; the query result for each SU.
Phase 1: Secret Sharing and Submission
1: Each PU k: splits its update request (k,Ck) into two
shares (k, [Ck]s) and (k, [Ck]c), and sends the former to
SDM and the latter to CSP.
2: Each SU u: splits its query request lu into two shares [lu]s
and [lu]c, and sends the former to SDM and the latter to
CSP.
Phase 2: Update Processing
3: SDM: takes as input {[mij]s}n×n and {(k, [Ck]s)}K
k=1,
and gets its updated share of M, {[m
ij]s}n×n, indepen-
∗
dently.
k=1, and
gets its updated share of M, {[m
ij]c}n×n, independently.
∗
4: CSP: takes as input {[mij]c}n×n and {(k, [Ck]c)}K
ij]c)}n×n and {G([lu]c)}Ns
∗
{[lu]c}Ns
bled values {G([m
coding information {du}Ns
garbled values to CSP.
Phase 3: Query Processing
5: CSP: takes as input the query circuit, {[m
ij]c}n×n and
∗
u=1, generates a garbled query circuit G(Q), gar-
u=1, and de-
u=1, and sends G(Q) and the
6: SDM: upon receiving the garbled circuit and values
input {[m
ij]s}n×n, {[lu]s}Ns
∗
from CSP,
u=1,
{G([m
ij]c)}n×n and {G([lu]c)}Ns
∗
u=1 to compute the gar-
bled input to query, {G(m
ij)}n×n and {G(lu)}Ns
∗
u=1. With
the garbled input and garbled circuit, CSP computes the
garbled query results {G(m
iuju )}Ns
∗
u=1.
∗
7: SDM: sends each SU u the garbled query result G(m
iuju ).
8: CSP: sends each SU u the decoding information du.
∗
∗
9: Each SU u: decodes G(m
iuju.
iuju ) with du to get m
takes as
“x” can be “s” or “c”.
Algorithm 3 Update Processing
Input: Matrix M = {[mij]x}n×n, {(k, [Ck]x)}K
Output: Updated matrix M∗
1: for i = 1 . . . n do
2:
[tij]x = ||K
3:
4:
5:
6: end for
ij]x = [mij]x ⊕ [tij]x;
∗
[m
end for
for j = 1 . . . n do
k=1[Cij
= {[m
ij]x}n×n
∗
k=1, where
k ]x;
N entries given its location (i.e. indexes). We can do this
in time O(1) using random access memory. However, when
considering a secure version of this task in which the location
of entry should be protected, we need at least Ω(N ) time. The
reason is that every entry should be touched, otherwise some
information about the location can be inferred by analyzing
which entries are accessed.
Along this line of thinking, we can design a naive circuit
querying an entry of the matrix as follows. The circuit com-
pares the location of the entry queried with the location of each
entry in the matrix, and then the query operation is performed
based on the comparison results. For multiple queries, the same
circuit can be applied repeatedly using different locations as
required. Using this circuit, the secure matrix query can be
achieved by running the corresponding garbled circuit protocol
between non-colluding SDM and CSP.
However, as the number of queries from SUs increases, this
design will become very inefﬁcient. Given the number of SUs’
query requests Ns, the time complexity of this naive circuit is
O(N ·Ns). In practice, it is probable that Ns ∼ Ω(N ), and the
complexity becomes Ω(N 2). Even when N is normally large
(e.g. N = 100 × 100 = 10000), the complexity Ω(N 2) is quit
prohibitive for secure computations.
The inefﬁciency of the naive design arises from its inability
to batch multiple matrix accesses and to amortize the cost for
every single access, which motivates our design of a more
efﬁcient query circuit.
D. Query Circuit: Our Efﬁcient Design
Inspired by the applications of sorting networks in [15],
[16], we design our efﬁcient batch matrix query using a sorting
network. Different from [15], which used sorting networks to
leverage sparsity in the data, we make use of sorting networks
to take advantage of the parallelism in multiple oblivious
random accesses to a database.
Speciﬁcally, we write the SAI matrix M = {mij}n×n as
an array Ma = {ai}N
i=1, where N = n× n and a(i−1)×n+j =
mij. The query circuit is described in Algorithm 4. Our main
idea is to store SUs’ queries together with the SAI matrix M
in an array. Through appropriate sorting operations, the query
tuples can be placed immediately after the SAI matrix entry
with which they share an index; a linear pass through the data
allows the computation of query.
Algorithm 4 Query Circuit
Input: Tuples {(i, ai)}N
1: Initialize tuple array S
2: Sort S with respect to rows 2 and 3
3: Query Computing (left-to-right pass):
i=1, {(si, ji, vi)}Ns
i=1
s4,k = s4,k · (1 − s3,k) ⊕ s4,k−1 · s3,k
(1)
C. Query Circuit: A Naive Design
We now design the query circuit. We ﬁrst present a naive
design which, in spite of its naivety, allows us to get more
insights on the problem, based on which we present our
efﬁcient design.
Consider the task of querying an entry in a matrix with
for k = 2 . . . N + Ns
4: Sort S with respect to rows 3 and 1
5: Output item s4,k, k = 1 . . . Ns
In the following we ﬁrst describe the algorithm in detail
and then discuss its implementation as a circuit.
290
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
Initialization. The algorithm takes as input the array Ma
and SUs’ queries {(si, ji)}Ns
i=1. These input data constitute
an (N + Ns) array of tuples S. The ﬁrst N tuples of S
store the entries of Ma, while the remaining Ns tuples store
SUs’ queries. More speciﬁcally, for each entry ai in Ma, the
algorithm constructs a matrix tuple (0, i, 0, ai), where ai is
a K-element vector indicating if each channel is used. For
each query request i, the algorithm constructs a query tuple
(si, ji, 1, vi), where si is the ID of the SU, ji is the index
of the square the SU wishes to query, and vi is a K-element
vector storing the query result. The resulting initial tuple array
S is as follows:
0
1
0
⎛
⎜⎝
⎞
⎟⎠
0
0
1 :
2
2 :
3 :
0
4 : a1 a2
0
. . .
s1
. . . N j1
. . .
1
. . . aN v1
s2
j2
1
v2
. . .
. . .
. . .
. . .
sNs
jNs
1
vNs
We denote by sl,k the l-th entry of the k-th tuple. These
entries serve the following roles:
s1,k:
s2,k:
s3,k: a binary ﬂag indicating if the tuple is a query tuple.
s4,k: SAI vector values.
the IDs of SUs.
the indexes of squares concerned.
Query. The query operations consist of the following three
steps:
1
1
1
j
N
(cid:8)
0
1
0
a1
1 :
2 :
3 :
4 :
. . .
. . .
. . .
. . .
su1
1
1
1
vu1
1. First Sorting. Sort S in the increasing order in terms of
indexes (i.e. s2,k), and then binary ﬂags (i.e. s3,k), as shown
in Line 2 of Alg. 4. This ensures that each matrix tuple
is followed by the query tuples with the same index. The
resulting S is as follows:
⎛
⎞
su1
⎜⎝
⎟⎠
n1
1
1
vu1
n1
suN
nN
N
1
vuN
nN
suN
. . .
. . .
0
N . . .
. . . N
. . .
0
. . .
1
aN vuN
. . .
. . .
}ni
j=1 share the same index
i=1 ni = Ns with ni ≥ 0 for any
j = ai for
where query tuples from SUs {ui
as matrix tuple i, and
1 ≤ i ≤ N. After querying, it is expected that vui
any 1 ≤ i ≤ N and 1 ≤ j ≤ ni.
2. Query Computing. Perform query computing through a
left-to-right traversing of the array, as shown in Line 3. By
appropriate use of ﬂags, this operation affects query tuples,
leaving matrix tuples unchanged. After this operation, the
entry s4,k (SAI value) of each matrix tuple is copied to the
entries s4,k’s of the corresponding query tuples following
the matrix tuple with the same index.
3. Second Sorting. The tuple array S is ﬁrst sorted descend-
ingly w.r.t. binary ﬂags (i.e. s3,k), and then ascendingly
w.r.t. IDs (i.e. s1,k). This brings all query tuples in the ﬁrst
Ns positions in the array, in the order in term of their IDs.
Output. The query tuples are extracted by cutting the ﬁrst
Ns tuples of S.
We now show that the above algorithm is readily imple-
mentable as a circuit that takes as input Ma and {(si, ji)}Ns
i=1,
and outputs {(si, vi)}Ns
i=1. First, Step 1 can be implemented as
a circuit inputting Ma and {(si, ji)}Ns
i=1 and outputting the
initial array S, with Θ(K(N + Ns)) gates. Second, the sorting
operations can be performed using a sorting network inputting
the initial array and outputting the sorted array, requiring
Θ(K(N + Ns) log(N + Ns)) gates. Finally, the left-to-right
pass can be implemented as a circuit performing eq. (1) on
each tuple, also with Θ(K(N + Ns)) gates. Thus, the overall
complexity of the algorithm is Θ(K(N + Ns) log(N + Ns)).
When Ns ∼ Θ(N ), the complexity becomes Θ(KN log N ),
within a logarithmic factor of the implementation in the RAM
model without security guarantees.
E. Atomic Building-block Circuits
In order to implement our efﬁcient query circuit, and thus
the Batchers sorting network, we need to design the following
basic building-block circuits: integer comparison, swap and
multiplexing. We call them atomic building-block circuits, or
atomic circuits more concisely. In our circuit design, we can
make use of the “XOR-free” property of garbled circuits and
aim to use as few as possible AND gates for each atomic circuit
to minimize both computation and communication overhead.
In the following, we denote two K-bit non-negative integers
by x = (xKxK−1...x2x1) and y = (yKyK−1...y2y1). The
atomic circuits can be designed and optimized as follows.
• Integer comparison. We apply directly the comparison
circuit proposed in [17] for integer comparison, which is
optimized by “XOR-free” property. To compare integers
x and y, the circuit can be described as follows:
ci+1 = xi ⊕ (xi ⊕ ci) ∧ (yi ⊕ ci)
subject to 1 ≤ i ≤ K
where for c1 = 0, the comparison result cK+1 = [x > y];
for c1 = 1, cK+1 = [x ≥ y]. Comparison circuits for
[x < y] and [x ≤ y] can be obtained by interchanging
x and y. As we can see, the K-bit integer comparison
circuit only contains K AND gates.
• Swap. To swap x and y with a swap indicator denoted
by b (If b = 1, swap x and y; else, remain untouched),
we can use the following circuit [15].
i = [b ∧ (xi ⊕ yi)] ⊕ xi, and y
(cid:2)
x
subject to 1 ≤ i ≤ K
⊕ (xi ⊕ yi)
(cid:2)
i = x
(cid:2)
i
Where
(cid:2)
(cid:2)
2x
= (y
= (x
(cid:2)
Ky
(cid:2)
Kx
K−1 ··· x
(cid:2)