in steps of 10 Kbps. In addition, to congest the intermediate
links in the network, there are three rogue CBR ﬂows each
between n0 and n4, s1 and r2, and s2 and r3. Each of these
ﬂows transmits at 100 Kbps each. For the purposes of the
simulation, we measure the average and worst-case delays
of a single control ﬂow between n0 and n4, whose reserved
rate is varied from 5 Kbps to 100 Kbps in steps of 5 Kbps.
All delays are measured end-to-end.
Stratiﬁed Round Robin is compared against two other
well-known schedulers: Deﬁcit Round Robin and Weighted
Fair Queuing. DRR is chosen because it is a round-robin
scheduler with comparable implementation complexity as
Stratiﬁed Round Robin. WFQ is chosen because it is an ex-
ample of a time-stamp scheduler with provably good delay
properties. Essentially, the purpose of the simulation is to
demonstrate that Stratiﬁed Round Robin makes it possible
to get WFQ-like delay properties with DRR-like implemen-
tation complexity.
Figure 6 shows the average and worst-case delay prop-
erties of the three schedulers respectively, as a function of
reserved bandwidth. As expected, both average and worst-
case delays of DRR are relatively insensitive to the reserved
bandwidth of the ﬂow. This is because once a ﬂow is ser-
Figure 6: Average and worst-case delays of DRR,
WFQ and Stratiﬁed Round Robin.
viced, under DRR, it must wait until all other ﬂows are
serviced before it is serviced again. In the case of WFQ, the
delays are inversely proportional to the reserved rate of the
ﬂow, i.e., the higher the reserved rate, the lower the average
and worst-case delays. This is the case with Stratiﬁed Round
Robin as well. It can be seen from Figure 6 that both aver-
age and worst-case delays of Stratiﬁed Round Robin closely
mirror that of WFQ. This is despite the fact that the im-
plementation complexity of Stratiﬁed Round Robin is only
slightly more than that of DRR, as shown in Section 4.
7. CONCLUSIONS
In this paper, we proposed a new fair queuing scheme
called Stratiﬁed Round Robin. The key idea is to group
ﬂows of roughly similar bandwidth requirements into a sin-
gle ﬂow class. Within a ﬂow class, a weighted round robin
scheme with deﬁcit is employed. Since all ﬂows within the
class have approximately the same weight, unfairness can
be bounded. The ﬂow classes are deﬁned by partitioning
the total bandwidth into exponentially increasing intervals.
This permits deadline-based scheduling to be eﬃciently im-
plemented over ﬂow classes, as the number of ﬂow classes
grows only logarithmically, and for practical scenarios, is a
small constant.
We describe a simple hardware implementation of Strat-
iﬁed Round Robin that can be realized with nothing more
sophisticated than a priority encoder. We emphasize ease
of implementation as one of the key merits of our scheme.
Stratiﬁed Round Robin requires only a few bit operations
more than a simple scheme like DRR, but provides much
stronger fairness and delay guarantees.
Finally, we show that Stratiﬁed Round Robin has good
fairness and delay properties. Although its worst-case fair-
ness is proportional to N , for the special case of a single
packet, Stratiﬁed Round Robin achieves a delay bound that
is strictly rate-proportional and independent of the number
of ﬂows. This property appears to be unique to Stratiﬁed
Round Robin among all schedulers of comparable complex-
ity. Through simulations, we demonstrate that it has good
average-case behavior as well, and provides an accurate ap-
proximation of Weighted Fair Queuing.
To conclude, Stratiﬁed Round Robin is a low complexity
scheduler with bandwidth fairness and certain delay bounds.
In addition, it admits a simple and eﬃcient hardware imple-
mentation. Consequently, we believe that Stratiﬁed Round
Robin is a good candidate for practical deployment in high-
speed routers.
8. ACKNOWLEDGMENTS
We gratefully acknowledge the support of AT&T Labs-
Research. We also wish to thank the anonymous reviewers,
our shepherd Prof. Hui Zhang, and Prof. George Varghese,
whose constructive comments led to a much improved paper.
9. REFERENCES
[1] Bennet, J., and Zhang, H. Hierarchical packet fair
queueing algorithms. In ACM SIGCOMM ’96 (1996).
[2] Bennet, J., and Zhang, H. WF2Q : Worst case fair
weighted fair queuing. In IEEE INFOCOM ’96 (1996).
[3] Blake,S. et al. An architecture for diﬀrentiated
services. RFC 2475 (1998).
[4] Chan, W., and Nieh, J. Group ratio round-robin:
An O(1) proportional share scheduler. Tech. Rep.
CUCS-012-03, Department of Computer Science,
Columbia University, April 2003.
[5] Cheung, S., and Pencea, C. BSFQ: Bin sort fair
queuing. In IEEE INFOCOM’02 (2002).
[6] Chuanxiong, G. SRR, an O(1) time complexity
packet scheduler for ﬂows in multi-service packet
networks. In ACM SIGCOMM ’01 (2001).
[7] Clark, D. The design philosophy of darpa internet
protocols. In ACM SIGCOMM ’88 (1998).
[8] Clark, D., and Fang, W. Explicit allocation of
best-eﬀort packet delivery service. IEEE/ACM
Transactions on Networking 6 (August 1998).
[9] Clark, D., Shenker, S., and Zhang, L. Supporting
real-time applications in an integrated services packet
network: Architecture and mechanism. In ACM
SIGCOMM ’92 (1992).
[10] Demers, A., Keshav, S., and Shenker, S. Analysis
and simulation of a fair queuing algorithm. In ACM
SIGCOMM ’ 89 (1989).
[11] Figueira, N., and Pasquale, J. Leave-in-time: A
new service discipline for real-time communications in
a packet-switching network. In ACM SIGCOMM ’95
(1995).
[12] Figueira, N., and Pasquale, J. An upper bound on
the delay for the virtual clock service discipline.
IEEE/ACM Transactions on Networking 3 (August
1995).
[13] Figueira, N., and Pasquale, J. A schedulability
condition for deadline-based service disciplines.
IEEE/ACM Transactions on Networking 5 (April
1997).
[14] Floyd, S., and Fall, K. Promoting the use of
end-to-end congestion control in the internet.
IEEE/ACM Transactions on Networking 7 (August
1999).
[15] Floyd, S., and Jacobson, V. Random early
detection gateways for congestion avoidance.
IEEE/ACM Transactions on Networking 1 (August
1993).
[16] Floyd, S., and Jacobson, V. Link-share and
resource management models for packet networks.
IEEE/ACM Transactions on Networking 3 (August
1995).
[17] Golestani, S. A self-clocked fair queueing scheme for
broadband applications. In IEEE INFOCOM’94
(1994).
[18] Goyal, P., and Vin, H. Generalized guaranteed rate
scheduling algorithms: A framework. IEEE/ACM
Transactions on Networking 5 (August 1997).
[19] Lenzini, L., Mingozzi, E., and Stea, G. Aliquem:
a novel DRR implementation to achieve better latency
and fairness at O(1) complexity. In IWQoS’02 (2002).
[20] McKenney, P. Stochastic fair queueing.
Internetworking: Research and Experience 2 (January
1991).
[21] Parekh, A., and Gallager, R. A generalized
processor sharing approach to ﬂow control in
integrated services networks: The single node case.
IEEE/ACM Transactions on Networking 1 (1993).
[22] Rexford, J., Greenberg, A., and Bonomi, F.
Hardware-eﬃcient fair queueing architectures for
high-speed networks. In IEEE INFOCOM ’96 (1996).
[23] Saha, D., Mukherjee, S., and Tripathi, S.
Carry-over round robin: A simple cell scheduling
mechanism for ATM networks. IEEE/ACM
Transactions on Networking 6 (1998).
[24] Shreedhar, M., and Varghese, G. Eﬃcient fair
queuing using deﬁcit round robin. In ACM
SIGCOMM ’95 (1995).
[25] Stephens, D., Bennet, J., and Zhang, H.
Implementing scheduling algorithms in high speed
networks. IEEE Journal on Selected Areas in
Communications: Special Issue on Next-generation IP
Switches and Routers 17 (June 1999).
[26] Stiliadis, D., and Varma, A. Eﬃcient fair queueing
algorithms for packet switched networks. IEEE/ACM
Transactions on Networking 6 (April 1998).
[27] Stiliadis, D., and Varma, A. Rate proportional
servers: A design methodology for fair queueing
algorithms. IEEE/ACM Transactions on Networking 6
(April 1998).
[28] Suri, S., Varghese, G., and Chandranmenon, G.
Leap forward virtual clock: An O(loglogN) queuing
scheme with guaranteed delays and throughput
fairness. In IEEE INFOCOM ’97 (1997).
[29] Waldspurger, C. Lottery and Stride Scheduling:
Flexible Proportional-Share Resource Management.
PhD thesis, Massachusetts Institute of Technology,
1995.
[30] www.cisco.com. Cisco GSR.
[31] Xu, J., and Lipton, R. On fundamental tradeoﬀs
between delay bounds and computational complexity
in packet scheduling algorithms. In ACM SIGCOMM
’02 (2002).
[32] Zhang, L. A New Architecture for Packet Switching
Network Protocols. PhD thesis, Massachusetts
Therefore,
Si(t1, t2) ≥ xici − LM
> (2
x − 2)ci − LM
−k
xci − 2ci − LM
−k
−k
k
x 2
= 2
> 2
= x wiLM − 5LM
wiLM − 4LM − LM
Similarly, fi can carry over a deﬁcit of at most LM from the
preceding slot. Therefore
Si(t1, t2) ≤ xici + LM
−k
−k
−k
 (xi − 2)2k,
−kx + 2. Similarly, xi + 2 is a strict
which implies xi  2
−kx − 2. ✷
Corollary 1. Let fi ∈ Fk be a backlogged ﬂow. The
amount of service Si(t1, t2) received by fi in any time period
(t1, t2) is given by
x wiLM − 5LM < Si(t1, t2) < x wiLM + 5LM
where x is the minimum number of contiguous slots that
completely contain (t1, t2).
Proof. Flow fi is given a credit of ci for each of the
xi slots assigned to it during the time period (t1, t2).
It
can carry over a deﬁcit of at most LM to the next slot.