This construction (which we call BH) involves a random-
ness extraction function Extract : {0, 1}p −→ {0, 1}n and a
standard deterministic PRG G : {0, 1}n −→ {0, 1}n+(cid:96). As
we explain below, the modeling of [1] did not have an ex-
plicit setup algorithm, and the refresh and next algorithms
are given below:
• refresh(S, I) = G(cid:48)(S ⊕ Extract(I))
• next(S) = G(S)
Above G(cid:48) denotes the truncation of G to the ﬁrst n output
bits. However, as we explain later, we will also consider the
“simpliﬁed BH” construction, where G(cid:48) is simply the identity
function (i.e., refresh(S, I) = S ⊕ Extract(I)).
Entropy Accumulation. Barak and Halevi proved the ro-
bustness of this construction in a model very similar to ours
(indeed, their model was the inspiration for this work), but
with several important diﬀerences. The most crucial such
diﬀerence involves the modeling of the inputs Ij which are
fed to the refresh procedure. Unlike our modeling, where the
choice of such inputs and their “fresh entropies” γj is com-
pletely left to the distribution sampler D (via the D-refresh
procedure), the BH modeling only considered the following
two extremes of our model. The attacker could either call
the good-refresh procedure, which must produce an input I
of fresh entropy γ higher than the entropy threshold γ∗, or
call the bad-refresh procedure with an arbitrary, maliciously
speciﬁed input I∗. Informally, the call to bad-refresh should
not compromise the PRNG security whenever the compro-
mised ﬂag corrupt = false, while the call to good-refresh
should result in an immediate “recovery”, and always resets
corrupt = true.
Hence, our key conceptual strengthening of the work of
[1] will require security even if the entropy is accumulated
slowly (and maliciously!), as opposed to in “one shot” (or
“delayed” by calls to bad-refresh). Namely, we insist that
a good PRNG with input should be able to recover from
compromise as long as the total amount of fresh entropy
accumulated over some potentially long period time crosses
the threshold γ∗, instead of insisting that there must be
one very high-entropy sample to aid the recovery. We in-
formally term this new required property of PRNGs with
input (which is very closely related to our formal notion of
backward security) entropy accumulation, and notice that
practical PRNGs, such a the Linux PRNG, seem to place a
lot of (heuristic) eﬀort in trying to achieve this property.
Unfortunately, we will show that the BH construction is
not entropy accumulating, in general. Hence, their construc-
tion does not necessarily meet our stronger notion of robust-
ness (or even backward security). Before presenting our at-
tack on the BH construction, though, we discuss some other
less critical diﬀerences between our models, since they will
also help to simplify our presentation of the attack.
Entropy Estimates. Related to the above, [1] did not re-
quire D to explicitly output the entropy estimate γ. As we
mentioned, though, this was replaced by the implicit require-
ment that the call to good-refresh must produce an input I
with fresh entropy γ ≥ γ∗. In contrast, our explicit mod-
eling (justiﬁed in detail in Section 3.1) allows us to mean-
ingfully formalize the notion of “entropy accumulation”, by
keeping a well deﬁned fresh entropy counter c, and resetting
corrupt = false when c ≥ γ∗.
Importance of setup. As we mentioned, the modeling of
[1] did not have an explicit setup algorithm to initialize pub-
lic parameters seed. Instead, they assumed that the required
randomness extractor Extract in their construction is good
enough to extract nearly ideal randomness from any high-
entropy distribution I output by the good-refresh procedure.
Ideally, we would like to make no other assumptions about
I except its min-entropy. Unfortunately, it is well known
that no deterministic extractor is capable to simultaneously
extract good randomness from all eﬃciently samplable high-
entropy distributions (e.g., consider nearly full entropy dis-
tribution I which is random, except the ﬁrst bit of Extract(I)
is 0). This leaves us with two options. The ﬁrst option,
which seemed to be the preferred choice by [1], is to restrict
the family of permitted high-entropy distributions I. While
following this option is theoretically possible in our model as
well, we ﬁnd it to be somewhat restrictive and cumbersome
to deﬁne, since we would like to allow our distribution sam-
651pler to output “variable-length” high-entropy distributions,
where entropy might be accumulated very slowly over time.
Instead, we chose to follow the second option, which is
much more universally accepted in the randomness extrac-
tor literature [17]: to assume the existence of the setup pro-
cedure which will output some public parameters seed which
could be used by the procedures next and refresh. Applied
to the construction of [1], for example, this will allow one to
consider a seeded extractor Extract inside their next proce-
dure, which can now extract entropy from all high-entropy
distributions (see the resulting deﬁnition of seeded (k, ε)-
extractors in Section 2). As a warning, this nice extra gen-
erality comes at a price that the public parameter seed is not
passed to the distribution sampler D, since otherwise D can
still produce high-entropy (but adversarial) samples I such
that next(refresh(0n, I)) always starts with a 0 bit. Although
slightly restrictive, this elegantly side-steps the impossibil-
ity result above, while accurately modeling many real-life
situations, where it is unreasonable to assume that the “na-
ture” D would somehow bias its samples I depending on
some random parameter seed chosen inside the initialization
procedure.
State Pseudorandomness. Barak and Halevi [1] also in-
sisted that the state S is indistinguishable from random once
corrupt = false. While true in their speciﬁc construction (an-
alyzed in their weaker model), we think that demanding this
property is simultaneously too restrictive and also not very
well motivated. For example, imagine a PRNG where the
state S includes a (never random) Boolean ﬂag which keeps
track if the last PRNG call was made to the next procedure.
We see a potential eﬃciency beneﬁt gained by keeping such
a ﬂag (e.g., to speed up the subsequent next procedure when
the ﬂag is true), but see no reason why storing such a harm-
less ﬂag makes such this PRNG design “insecure”. In fact,
our main construction in Section 4 also will not satisfy this
property the very moment corrupt = false, but will only
make S pseudorandom when the ﬁrst call to next is made
(which is the only thing that matters at the end).
In particular, looking at the analysis of [1], the (truncated)
PRG G(cid:48) inside the refresh procedure is only needed to en-
sure the state pseudorandomness of their construction. In
other words, if one drops (only the) state pseudorandom-
ness from the BH model, the “simpliﬁed BH” construction
is already robust in their model. Motivated by this, we ﬁrst
give a very strong attack on the simpliﬁed BH construction
in our stronger model, for any extractor Extract and PRG
G. This already illustrates the main diﬀerence between our
models in terms of entropy accumulation. Then we show a
more artiﬁcial (but still valid) attack on the “full BH” con-
struction.
Attack on Simpliﬁed BH. Consider the following very
simply simple distribution sampler D. At any time period,
it simply sets I = αp for a fresh and random bit α, and also
sets entropy estimate γ = 1 and leakage z = ∅. Clearly, D is
legitimate. Hence, for any entropy threshold γ∗, the simpli-
ﬁed BH construction must regain security after γ∗ calls to
the D-refresh procedure following a state compromise. Now
consider the following simple attacker A attacking the back-
ward security (and, thus, robustness) of the simpliﬁed BH
construction. It calls set-state(0n), and then makes γ∗ calls
to D-refresh followed by many calls to next-ror. Let us de-
note the value of the state S after j calls to D-refresh by
Sj, and let Y (0) = Extract(0p), Y (1) = Extract(1p). Then,
recalling that refresh(S, I) = S ⊕ Extract(I) and S0 = 0n,
we see that Sj = Y (α1) ⊕ . . . Y (αj), where α1 . . . αj are
random and independent bits. In particular, at any point
of time there are only two possible values for Sj:
if j is
even, then Sj ∈ {0n, Y (0) ⊕ Y (1)}, and, if j is odd, then
Sj ∈ {Y (0), Y (1)}.
In other words, despite receiving γ∗
random and independent bits from D, the refresh procedure
failed to accumulate more than 1 bit of entropy in the ﬁnal
state S∗ = Sγ∗ . In particular, after γ∗ calls to D-refresh,
A can simply try both possibilities for S∗ and easily distin-
guish real from random outputs with advantage arbitrarily
close to 1 (by making enough calls to next-ror).
This shows that the simpliﬁed BH construction is never
backward secure, despite being robust (modulo state pseu-
dorandomness) in the model of [1].
Attack on “Full” BH. The above attack does not immedi-
ately extend to the full BH construction, due to the presence
of the truncated PRG G(cid:48). Instead, we show a less general at-
tack for some (rather than any) extractor Extract and PRG
G. For Extract, we simply take any good extractor (possi-
bly seeded) where Extract(0p) = Extract(1p) = 0n. Such an
extractor exists, since we can take any other initial extrac-
tor Extract(cid:48), and simply modify it on inputs 0p and 1p, as
above, without much aﬀecting its extraction properties on
high-entropy distributions I. By the same argument, we can
take any good PRG G where G(0n) = 0n+(cid:96), which means
that G(cid:48)(0n) = 0n.
With these (valid but artiﬁcial) choices of Extract and G,
we can keep the same distribution sampler D and the at-
tacker A as in the simpliﬁed BH example. Now, however,
we observe that the state S always remains equal to 0n, ir-
respective of whether is it updated with I = 0p or I = 1p,
since the new state S(cid:48) = G(cid:48)(S⊕Extract(I)) = G(cid:48)(0n⊕0n) =
0n = S. In other words, we have not gained even a single bit
of entropy into S, which clearly breaks backward security in
this case as well!
One may wonder if we can have a less obvious attack for
any Extract and G, much like in the simpliﬁed BH case.
This turns out to be an interesting and rather non-trivial
question. Indeed, the value of the state Sj after j calls to
D-refresh with inputs I1 . . . Ij is equal to the “CBC-MAC”
computation, with input (cid:126)Y = (Y1 . . . Yj) and the initial value
S0, where Yj = Extract(Ij):
Sj = G
(cid:48)
(Yj ⊕ G
(cid:48)
(Yj−1 . . . ⊕ G
(cid:48)
(Y1 ⊕ S0) . . .))
Moreover, we only care about the case when H∞((cid:126)I) ≥ γ∗,
which, under appropriate assumptions on Extract, would
translate to a high-entropy guarantee on (cid:126)Y .
In this case,
it is tempting to use the work of [6], who showed that the
CBC-MAC is a good randomness extractor on high-entropy
inputs (cid:126)Y , provided that the truncated PRG G(cid:48) is modeled
as a random permutation. This result gives us hope that the
full BH construction might be secure in our model, possibly
under strong enough assumptions on the PRG G and/or the
extractor Extract. Unfortunately, aside from assuming that
G(cid:48) is (close to) a random permutation, we cannot directly
use the results of [6], since the initial state S0 could be set
by A in a way correlated with the inputs Yj, as well as the
“block cipher” G(cid:48) (which invalidates the analysis of [6]).
Instead of following this interesting, but rather speculative
direction, below we give an almost equally simple construc-
tion which is provably robust in the standard model, without
any idealized assumptions.
6523.4 Simpler Notions of PRNG Security
We deﬁne two properties of a PRNG with input which
are intuitively simpler to analyze than the full robustness
security. We show that these two properties, taken together,
imply robustness.
Recovering Security. We deﬁne a notion of recovering se-
curity. It considers an attacker that compromises the state
to some arbitrary value S0. Following that, suﬃciently many
D-refresh calls with suﬃcient entropy are made so as to set
the corrupt ﬂag to false and resulting in some updated state
S. Then the output (S∗, R) ← next(S) looks indistinguish-
able from uniform. The formal deﬁnition is slightly more
complicated since the attacker also gets to adaptively choose
when to start using D-refresh calls to update the state. For-
mally, we consider the following security game with an at-
tacker A, a sampler D, and bounds qD, γ∗.
• The challenge chooses a seed seed $← setup, and a bit
b $← {0, 1} uniformly at random. It sets σ0 := 0. For
k = 1, . . . , qD, the challenger computes
(σk, Ik, γk, zk) ← D(σk−1).
• The attacker A gets seed and γ1, . . . , γqD , z1, . . . zqD .
It gets access to an oracle get-refresh() which initially
sets k := 0 on each invocation increments k := k + 1
and outputs Ik. At some point the attacker A outputs
a value S0 ∈ {0, 1}n and an integer d such that k + d ≤
qD and(cid:80)k+d
j=k+1 γj ≥ γ∗.
• For j = 1, . . . , d, the challenger computes
Sj := refresh(Sj−1, Ik+j, seed).
If b = 0 it sets (S∗, R) ← next(Sd) and if b = 1 is
sets (S∗, R) ← {0, 1}n+(cid:96) uniformly at random. The
challenger gives Ik+d+1, . . . , IqD , and (S∗, R) to A.
• The attacker A outputs a bit b∗.
We deﬁne the advantage of the attacker A and sampler D
in the above game as |2 Pr[b∗ = b] − 1|.
Definition (Recovering Security ) A PRNG with input
has (t, qD, γ∗, ε)-recovering security if for any attacker A and
legitimate sampler D, both running in time t, the advantage
of the above game with parameters qD, γ∗ is at most ε.
Preserving Security. We deﬁne a simple notion of pre-
serving security.
Intuitively, it says that if the state S0
starts uniformly random and uncompromised, and then is
refreshed with arbitrary (adversarial) samples I1, . . . , Id re-
sulting in some ﬁnal state Sd, then the output (S∗, R) ←
next(Sd) looks indistinguishable from uniform.
attacker A.
Formally, we consider the following security game with an
• The challenger chooses an initial state S0 ← {0, 1}n, a
seed seed ← setup, and a bit b ← {0, 1} uniformly at
random.
• A gets seed and speciﬁes arbitrarily long sequence of
values I1, . . . , Id with Ij ∈ {0, 1}n for all j ∈ [d].
• The challenger sequentially computes
Sj = refresh(Sj−1, Ij, seed)