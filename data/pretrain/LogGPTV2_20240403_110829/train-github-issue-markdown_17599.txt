I don't see what useful purpose is served by having this distinction in the
type system, introduced by #987 (and see also the discussion in #5810).
According to the description in the manual:
> The AbstractArray type includes anything vaguely array-like, and
> implementations of it might be quite different from conventional arrays. For
> example, elements might be computed on request rather than stored. Or, it
> might not be possible to assign or access every array location.
>
> StoredArray is an abstract subtype of AbstractArray intended to include all
> arrays that behave like memories: all elements are independent, can be
> accessed, and (for mutable arrays) all elements can be assigned.
the main difference between a `StoredArray` and an `AbstractArray` is that in
the latter, the elements are computed or requested on the fly whereas in the
former they are "stored". But this seems like an implementation detail.... why
do we want to have this distinction in the type system? Under what
circumstances would you dispatch on the difference between computed and stored
values?
The other difference is that, in an `AbstractArray`, not all elements may be
accessible. (But in this case, shouldn't it be an `Associative` type?) If you
can't even access all elements, what non-trivial array-like methods could
possibly operate on an `AbstractArray`? And if you can't write a non-trivial
method for it, why even have the type at all?
My suggestion would be to just drop this distinction, and make `StoredArray
=== AbstractArray`. And suggest that every concrete `AbstractArray` type
should, at minimum, provide `size` and `getindex` (and `setindex!` if it is
mutable), including a single-index variant.