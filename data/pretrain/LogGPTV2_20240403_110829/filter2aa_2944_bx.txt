client secrets, a signed JWT is still a bearer credential that can be used by any-
one that captures it until it expires. A malicious or compromised API server
could take the JWT and replay it to other APIs to impersonate the client. Use
expiry, audience, and other standard JWT claims (chapter 6) to reduce the
impact if a JWT is compromised.
11.2
The OAuth2 client credentials grant
Although JWT bearer authentication is appealing due to its apparent simplicity, you
still need to develop the portal for generating JWTs, and you’ll need to consider how
to revoke tokens when a service is retired or a business partnership is terminated. The
need to handle service-to-service API clients was anticipated by the authors of the
386
CHAPTER 11
Securing service-to-service APIs
OAuth2 specifications, and a dedicated grant type was added to support this case: the
client credentials grant. This grant type allows an OAuth2 client to obtain an access
token using its own credentials without a user being involved at all. The access token
issued by the authorization server (AS) can be used just like any other access token,
allowing an existing OAuth2 deployment to be reused for service-to-service API calls.
This allows the AS to be used as the developer portal and all the features of OAuth2,
such as discoverable token revocation and introspection endpoints discussed in chap-
ter 7, to be used for service calls.
WARNING
If an API accepts calls from both end users and service clients, it’s
important to make sure that the API can tell which is which. Otherwise, users
may be able to impersonate service clients or vice versa. The OAuth2 stan-
dards don’t define a single way to distinguish these two cases, so you should
consult the documentation for your AS vendor.
To obtain an access token using the client credentials grant, the client makes a direct
HTTPS request to the token endpoint of the AS, specifying the client_credentials
grant type and the scopes that it requires. The client authenticates itself using its own
credentials. OAuth2 supports a range of different client authentication mechanisms,
and you’ll learn about several of them in this chapter. The simplest authentication
method is known as client_secret_basic, in which the client presents its client ID
and a secret value using HTTP Basic authentication.1 For example, the following curl
command shows how to use the client credentials grant to obtain an access token for a
client with the ID test and secret value password:
$ curl -u test:password \         
  -d 'grant_type=client_credentials&scope=a+b+c' \       
  https://as.example.com/access_token
Assuming the credentials are correct, and the client is authorized to obtain access
tokens using this grant and the requested scopes, the response will be like the following:
{
  "access_token": "q4TNVUHUe9A9MilKIxZOCIs6fI0",
  "scope": "a b c",
  "token_type": "Bearer",
  "expires_in": 3599
}
NOTE
OAuth2 client secrets are not passwords intended to be remembered
by users. They are usually long random strings of high entropy that are gener-
ated automatically during client registration.
1 OAuth2 Basic authentication requires additional URL-encoding if the client ID or secret contain non-ASCII
characters. See https://tools.ietf.org/html/rfc6749#section-2.3.1 for details.
Send the client ID and secret 
using Basic authentication.
Specify the client_
credentials grant.
387
The OAuth2 client credentials grant
The access token can then be used to access APIs just like any other OAuth2 access
token discussed in chapter 7. The API validates the access token in the same way that
it would validate any other access token, either by calling a token introspection end-
point or directly validating the token if it is a JWT or other self-contained format.
TIP
The OAuth2 spec advises AS implementations not to issue a refresh
token when using the client credentials grant. This is because there is little
point in the client using a refresh token when it can obtain a new access token
by using the client credentials grant again.
11.2.1 Service accounts
As discussed in chapter 8, user accounts are often held in a LDAP directory or other
central database, allowing APIs to look up users and determine their roles and permis-
sions. This is usually not the case for OAuth2 clients, which are often stored in an
AS-specific database as in figure 11.2. A consequence of this is that the API can vali-
date the access token but then has no further information about who the client is to
make access control decisions.
 One solution to this problem is for the API to make access control decisions purely
based on the scope or other information related to the access token itself. In this case,
access tokens act more like the capability tokens discussed in chapter 9, where the
api.example.com
as.example.com
Clients
User accounts
OAuth2 clients details
are private to the AS
and not shared.
User and service accounts
are in a shared repository,
allowing APIs to query role
and group memberships.
Figure 11.2
An authorization server (AS) 
typically stores client details in a private 
database, so these details are not accessible to 
APIs. A service account lives in the shared user 
repository, allowing APIs to look up identity 
details such as role or group membership.
388
CHAPTER 11
Securing service-to-service APIs
token grants access to resources on its own and the identity of the client is ignored.
Fine-grained scopes can be used to limit the amount of access granted.
 Alternatively, the client can avoid the client credentials grant and instead obtain an
access token for a service account. A service account acts like a regular user account and
is created in a central directory and assigned permissions and roles just like any other
account. This allows APIs to treat an access token issued for a service account the
same as an access token issued for any other user, simplifying access control. It also
allows administrators to use the same tools to manage service accounts that they use to
manage user accounts. Unlike a user account, the password or other credentials for a
service account should be randomly generated and of high entropy, because they
don’t need to be remembered by a human.
DEFINITION
A service account is an account that identifies a service rather
than a real user. Service accounts can simplify access control and account
management because they can be managed with the same tools you use to
manage users.
In a normal OAuth2 flow, such as the authorization code grant, the user’s web browser
is redirected to a page on the AS to login and consent to the authorization request.
For a service account, the client instead uses a non-interactive grant type that allows it
to submit the service account credentials directly to the token endpoint. The client
must have access to the service account credentials, so there is usually a service account
dedicated to each client. The simplest grant type to use is the Resource Owner Pass-
word Credentials (ROPC) grant type, in which the service account username and
password are sent to the token endpoint as form fields:
$ curl -u test:password \                   
  -d 'grant_type=password&scope=a+b+c' \
  -d 'username=serviceA&password=password' \    
  https://as.example.com/access_token
This will result in an access token being issued to the test client with the service
account serviceA as the resource owner.
WARNING
Although the ROPC grant type is more secure for service accounts
than for end users, there are better authentication methods available for ser-
vice clients discussed in sections 11.3 and 11.4. The ROPC grant type may be
deprecated or removed in future versions of OAuth.
The main downside of service accounts is the requirement for the client to manage
two sets of credentials, one as an OAuth2 client and one for the service account.
This can be eliminated by arranging for the same credentials to be used for both.
Alternatively, if the client doesn’t need to use features of the AS that require client
credentials, it can be a public client and use only the service account credentials
for access.
Send the client ID and 
secret using Basic auth.
Pass the service account 
password in the form data.
389
The JWT bearer grant for OAuth2
11.3
The JWT bearer grant for OAuth2
NOTE
To run the examples in this section, you’ll need a running OAuth2
authorization server. Follow the instructions in appendix A to configure the
AS and a test client before continuing with this section.
Authentication with a client secret or service account password is very simple, but suf-
fers from several drawbacks:
 Some features of OAuth2 and OIDC require the AS to be able to access the raw
bytes of the client secret, preventing the use of hashing. This increases the risk
if the client database is ever compromised as an attacker may be able to recover
all the client secrets.
 If communications to the AS are compromised, then an attacker can steal client
secrets as they are transmitted. In section 11.4.6, you’ll see how to harden access
tokens against this possibility, but client secrets are inherently vulnerable to
being stolen.
 It can be difficult to change a client secret or service account password, espe-
cially if it is shared by many servers.
For these reasons, it’s beneficial to use an alternative authentication mechanism. One
alternative supported by many authorization servers is the JWT Bearer grant type for
OAuth2, defined in RFC 7523 (https://tools.ietf.org/html/rfc7523). This specifica-
tion allows a client to obtain an access token by presenting a JWT signed by a trusted
party, either to authenticate itself for the client credentials grant, or to exchange a
Pop quiz
1
Which of the following are differences between an API key and a user authentica-
tion token?
a
API keys are more secure than user tokens.
b
API keys can only be used during normal business hours.
c
A user token is typically more privileged than an API key.
d
An API key identifies a service or business rather than a user.
e
An API key typically has a longer expiry time than a user token.
2
Which one of the following grant types is most easily used for authenticating a
service account?
a
PKCE
b
Hugh Grant
c
Implicit grant
d
Authorization code grant
e
Resource owner password credentials grant
The answers are at the end of the chapter.
390
CHAPTER 11
Securing service-to-service APIs
JWT representing authorization from a user or service account. In the first case,
the JWT is signed by the client itself using a key that it controls. In the second case, the
JWT is signed by some authority that is trusted by the AS, such as an external OIDC
provider. This can be useful if the AS wants to delegate user authentication and con-
sent to a third-party service. For service account authentication, the client is often
directly trusted with the keys to sign JWTs on behalf of that service account because
there is a dedicated service account for each client. In section 11.5.3, you’ll see how
separating the duties of the client from the service account authentication can add an
extra layer of security.
 By using a public key signature algorithm, the client needs to supply only the pub-
lic key to the AS, reducing the risk if the AS is ever compromised because the public
key can only be used to verify signatures and not create them. Adding a short expiry
time also reduces the risks when authenticating over an insecure channel, and some
servers support remembering previously used JWT IDs to prevent replay.
 Another advantage of JWT bearer authentication is that many authorization serv-
ers support fetching the client’s public keys in JWK format from a HTTPS endpoint.
The AS will periodically fetch the latest keys from the endpoint, allowing the client to
change their keys regularly. This effectively bootstraps trust in the client’s public keys
using the web PKI: the AS trusts the keys because they were loaded from a URI that
the client specified during registration and the connection was authenticated using
TLS, preventing an attacker from injecting fake keys. The JWK Set format allows the
client to supply more than one key, allowing it to keep using the old signature key
until it is sure that the AS has picked up the new one (figure 11.3).
client.example.com
AS
/jwks
The client publishes its public key
as a JWK on its own server.
The JWKSet URI is associated with the
client when it registers with the AS.
When the client authenticates to the AS, the AS fetches
its public key from the registered JWKSet URI.
Figure 11.3
The client publishes its public key to a URI it controls and registers this 
URI with the AS. When the client authenticates, the AS will retrieve its public key over 
HTTPS from the registered URI. The client can publish a new public key whenever it 
wants to change the key.
391
The JWT bearer grant for OAuth2
11.3.1 Client authentication
To obtain an access token under its own authority, a client can use JWT bearer client
authentication with the client credentials grant. The client performs the same request
as you did in section 11.2, but rather than supplying a client secret using Basic authen-
tication, you instead supply a JWT signed with the client’s private key. When used for
authentication, the JWT is also known as a client assertion. 
DEFINITION
An assertion is a signed set of identity claims used for authentica-
tion or authorization.
To generate the public and private key pair to use to sign the JWT, you can use key-
tool from the command line, as follows. Keytool will generate a certificate for TLS
when generating a public key pair, so use the -dname option to specify the subject
name. This is required even though you won’t use the certificate. You’ll be prompted
for the keystore password.
keytool -genkeypair \
  -keystore keystore.p12 \       
  -keyalg EC -keysize 256 -alias es256-key \       
  -dname cn=test     
TIP
Keytool picks an appropriate elliptic curve based on the key size, and in
this case happens to pick the correct P-256 curve required for the ES256 algo-
rithm. There are other 256-bit elliptic curves that are incompatible. In Java
12 and later you can use the -groupname secp256r1 argument to explicitly
specify the correct curve. For ES384 the group name is secp384r1 and for
ES512 it is secp521r1 (note: 521 not 512). Keytool can’t generate EdDSA
keys at this time.
You can then load the private key from the keystore in the same way that you did in
chapters 5 and 6 for the HMAC and AES keys. The JWT library requires that the key is
cast to the specific ECPrivateKey type, so do that when you load it. Listing 11.1 shows
the start of a JwtBearerClient class that you’ll write to implement JWT bearer authenti-
cation. Navigate to src/main/java/com/manning/apisecurityinaction and create a
new file named JwtBearerClient.java. Type in the contents of the listing and save the
file. It doesn’t do much yet, but you’ll expand it next. The listing contains all the import
statements you’ll need to complete the class.
package com.manning.apisecurityinaction;
import java.io.FileInputStream;
import java.net.URI;
import java.net.http.*;
import java.security.KeyStore;
Listing 11.1
Loading the private key
Specify the 
keystore.
Use the EC algorithm 
and 256-bit key size.
Specify a distinguished 
name for the certificate.
392
CHAPTER 11
Securing service-to-service APIs
import java.security.interfaces.ECPrivateKey;
import java.util.*;
import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.ECDSASigner;
import com.nimbusds.jose.jwk.*;
import com.nimbusds.jwt.*;
import static java.time.Instant.now;
import static java.time.temporal.ChronoUnit.SECONDS;
import static spark.Spark.*;
public class JwtBearerClient {
    public static void main(String... args) throws Exception {
        var password = "changeit".toCharArray();
        var keyStore = KeyStore.getInstance("PKCS12");
        keyStore.load(new FileInputStream("keystore.p12"),
                password);
        var privateKey = (ECPrivateKey)                   
                keyStore.getKey("es256-key", password);   
    }
}
For the AS to be able to validate the signed JWT you send, it needs to know where to
find the public key for your client. As discussed in the introduction to section 11.3, a
flexible way to do this is to publish your public key as a JWK Set because this allows you
to change your key regularly by simply publishing a new key to the JWK Set. The Nim-
bus JOSE+JWT library that you used in chapter 5 supports generating a JWK Set from
a keystore using the JWKSet.load method, as shown in listing 11.2. After loading the
JWK Set, use the toPublicJWKSet method to ensure that it only contains public key
details and not the private keys. You can then use Spark to publish the JWK Set at a
HTTPS URI using the standard application/jwk-set+json content type. Make sure
that you turn on TLS support using the secure method so that the keys can’t be tam-
pered with in transit, as discussed in chapter 3. Open the JwtBearerClient.java file
again and add the code from the listing to the main method, after the existing code.
WARNING
Make sure you don’t forget the .toPublicJWKSet() method call.
Otherwise you’ll publish your private keys to the internet!
var jwkSet = JWKSet.load(keyStore, alias -> password)     
       .toPublicJWKSet();                               
secure("localhost.p12", "changeit", null, null);    
get("/jwks", (request, response) -> {               
    response.type("application/jwk-set+json");      
    return jwkSet.toString();                       
});                                                 
Listing 11.2
Publishing a JWK Set
Cast the private key 
to the required type.
Load the JWK Set from the keystore.
Ensure it contains 
only public keys.
Publish the JWK Set 
to a HTTPS endpoint 
using Spark.
393
The JWT bearer grant for OAuth2
The Nimbus JOSE library requires the Bouncy Castle cryptographic library to be
loaded to enable JWK Set support, so add the following dependency to the Maven
pom.xml file in the root of the Natter API project:
      org.bouncycastle
      bcpkix-jdk15on
      1.66
You can now start the client by running the following command in the root folder of
the Natter API project:
mvn clean compile exec:java \
  -Dexec.mainClass=com.manning.apisecurityinaction.JwtBearerClient
In a separate terminal, you can then test that the public keys are being published by
running:
curl https://localhost:4567/jwks > jwks.txt
The result will be a JSON object containing a single keys field, which is an array of
JSON Web Keys.
 By default, the AS server running in Docker won’t be able to access the URI that
you’ve published the keys to, so for this example you can copy the JWK Set directly
into the client settings. If you’re using the ForgeRock Access Management software
from appendix A, then log in to the admin console as amadmin as described in the
appendix and carry out the following steps:
1
Navigate to the Top Level Realm and click on Applications in the left-hand
menu and then OAuth2.0. 
2
Click on the test client you registered when installing the AS. 
3
Select the Signing and Encryption tab, and then copy and paste the contents of
the jwks.txt file you just saved into the Json Web Key field.
4
Find the Token Endpoint Authentication Signing Algorithm field just above the
JWK field and change it to ES256.
5
Change the Public Key Selector field to “JWKs” to ensure the keys you just con-
figured are used.
6
Finally, scroll down and click Save Changes at the lower right of the screen.
11.3.2 Generating the JWT
A JWT used for client authentication must contain the following claims:
 The sub claim is the ID of the client.
 An iss claim that indicates who signed the JWT. For client authentication this is
also usually the client ID.
394
CHAPTER 11
Securing service-to-service APIs