There is a symbol conflict between `scipy` and `libsndfile` due to the overlapping definition of the `sf_error` function. 

In `scipy`, the `sf_error` function is defined as follows (see [here](https://github.com/scipy/scipy/blob/master/scipy/special/sf_error.h)):
```c
void sf_error(const char *func_name, sf_error_t code, const char *fmt, ...);
```
On the other hand, `libsndfile` defines the `sf_error` function as (see [here](https://github.com/erikd/libsndfile/blob/master/src/sndfile.c)):
```c
int sf_error(SNDFILE *sndfile);
```

### Purpose of `sf_error` in `scipy`
The `sf_error` function in `scipy` is used for error handling within the special functions module. It appears that `scipy` is attempting to override the `sf_error` function from `libsndfile`, which can lead to crashes when both libraries are used in the same application.

### Reproducing the Issue
To reproduce the issue, you can create an application linked with `libsndfile` and then import `scipy` and run its unit tests:
```python
import scipy
scipy.test()
```

### Error Message
The following crash occurs:
```
Python version 3.5.2 |Enthought, Inc. (x86_64)| (default, Mar  3 2017, 18:53:01) [GCC 4.4.7 20120313 (Red Hat 4.4.7-17)]
nose version 1.3.7
too many axes: 2 (effrank=2), expected rank=1
too many axes: 2 (effrank=2), expected rank=1
.....K...............F.......................................................................................................................................................................................................................................Segmentation fault (core dumped)
#0  0x000000385ec06f5f in sf_error () from /usr/lib64/libsndfile.so.1
#1  0x00007f3d1c05e6c1 in beta_negint (a=, b=) at scipy/special/cephes/beta.c:242
#2  0x00007f3d1c05e62f in cephes_beta (a=, b=) at scipy/special/cephes/beta.c:69
#3  0x00007f3d1bfec36d in __pyx_f_5scipy_7special_15orthogonal_eval_binom (__pyx_v_n=, __pyx_v_k=)
    at scipy/special/_ufuncs.c:31455
#4  0x00007f3d1bfea4d3 in __pyx_f_5scipy_7special_7_ufuncs_loop_d_dd__As_dd_d (__pyx_v_args=, __pyx_v_dims=, __pyx_v_steps=
    0x3960520, __pyx_v_data=) at scipy/special/_ufuncs.c:9174
#5  0x00007f3d23f06aeb in iterator_loop (ufunc=, op=, dtype=, order=, 
    buffersize=, arr_prep=0x2, arr_prep_args=0x0, innerloop=0x7f3d1bfea470 , innerloopdata=
    0x7f3d1c37b070) at numpy/core/src/umath/ufunc_object.c:1504
#6  0x00007f3d23f0a696 in execute_legacy_ufunc_loop (ufunc=, args=0x7f3c00000001, kwds=0x2000, op=0x7ffe6653bba0)
    at numpy/core/src/umath/ufunc_object.c:1659
#7  PyUFunc_GenericFunction (ufunc=, args=0x7f3c00000001, kwds=0x2000, op=0x7ffe6653bba0) at numpy/core/src/umath/ufunc_object.c:2625
#8  0x00007f3d23f0aebf in ufunc_generic_call (ufunc=0x2dee040, args=0x7f3cf9d35288, kwds=0x0) at numpy/core/src/umath/ufunc_object.c:4250
#9  0x00007f3d460328b6 in PyObject_Call (func=0x2dee040, arg=, kw=) at Objects/abstract.c:2165
#10 0x00007f3d460f3a27 in do_call (f=, throwflag=) at Python/ceval.c:4936
#11 call_function (f=, throwflag=) at Python/ceval.c:4732
#12 PyEval_EvalFrameEx (f=, throwflag=) at Python/ceval.c:3236
#13 0x00007f3d460f5f8e in _PyEval_EvalCodeWithName (_co=, globals=, locals=, 
    args=, argcount=1, kws=, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7f3cf9fbc9f0, qualname=
    0x7f3cf9faef90) at Python/ceval.c:4018
#14 0x00007f3d460f4b9b in fast_function (f=, throwflag=) at Python/ceval.c:4813
#15 call_function (f=, throwflag=) at Python/ceval.c:4730
```

### Version Information
- **SciPy version**: 0.19.0
- **Python version**: 3.5.2

### Conclusion
The symbol conflict between `scipy` and `libsndfile` causes a segmentation fault. To resolve this, consider using different versions of the libraries or renaming the conflicting symbols if possible.