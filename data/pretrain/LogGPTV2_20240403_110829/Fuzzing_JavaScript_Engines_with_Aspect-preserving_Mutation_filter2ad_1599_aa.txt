title:Fuzzing JavaScript Engines with Aspect-preserving Mutation
author:Soyeon Park and
Wen Xu and
Insu Yun and
Daehee Jang and
Taesoo Kim
Fuzzing JavaScript Engines with
Aspect-preserving Mutation
Soyeon Park Wen Xu Insu Yun Daehee Jang Taesoo Kim
Georgia Institute of Technology
{spark720, wen.xu, insu, daehee87, taesoo} @ gatech.edu
Abstract—Fuzzing is a practical, widely-deployed technique
to ﬁnd bugs in complex, real-world programs like JavaScript
engines. We observed, however, that existing fuzzing approaches,
either generative or mutational, fall short in fully harvesting high-
quality input corpora such as known proof of concept (PoC)
exploits or unit tests. Existing fuzzers tend to destruct subtle
semantics or conditions encoded in the input corpus in order to
generate new test cases because this approach helps in discovering
new code paths of the program. Nevertheless, for JavaScript-like
complex programs, such a conventional design leads to test cases
that tackle only shallow parts of the complex codebase and fails
to reach deep bugs effectively due to the huge input space.
In this paper, we advocate a new technique, called an aspect-
preserving mutation, that stochastically preserves the desirable
properties, called aspects, that we prefer to be maintained across
mutation. We demonstrate the aspect preservation with two
mutation strategies, namely, structure and type preservation, in
our fully-ﬂedged JavaScript fuzzer, called DIE. Our evaluation
shows that DIE’s aspect-preserving mutation is more effective in
discovering new bugs (5.7× more unique crashes) and producing
valid test cases (2.4× fewer runtime errors) than the state-of-
the-art JavaScript fuzzers. DIE newly discovered 48 high-impact
bugs in ChakraCore, JavaScriptCore, and V8 (38 ﬁxed with 12
CVEs assigned as of today). The source code of DIE is publicly
available as an open-source project.1
I. INTRODUCTION
Fuzzing is, arguably,
the most preferable approach to
test complex, real-world programs like JavaScript engines.
While conventional unit
testing is effective in validating
the expected functional correctness of the implementation,
automated fuzzing is exceptional at discovering unintended
security bugs. According to Google, fuzzers have uncovered
an order of magnitude more bugs than handwritten unit tests
developed over a decade [4, 21, 33, 40]. For example, fuzzers
have discovered over 5000 new bugs in the heavily-tested
Chromium ecosystem [37].
Two classes of fuzzers have been developed to test JavaScript
engines, namely, generative and mutational fuzzers. Generative
approaches build a new test case from the ground up following
pre-deﬁned rules like a context-free grammar of the JavaScript
programming language [17, 39] or reassembling synthesizable
code bricks dissected from the input corpus [19]; mutational
approaches [2, 44] synthesize a test case from existing seed
inputs.
However, we observed that both generative and mutational
approaches are not enough to take advantage of high-quality
1https://github.com/sslab-gatech/DIE
Aspect. In this paper, aspect is used to describe a key feature that guides to
discover new bugs from the PoC of existing bugs. This term is a different
concept from the one in the aspect oriented programming (AOP). Aspect
in AOP represents a speciﬁc feature that cross-cuts program’s main logic,
yet it should be parted from the main logic. However, aspect in this paper
describes an embedded feature in the PoC of existing bugs, which is
not explicitly annotated so that we implicitly exploit them by preserving
structure and type. Table VIII gives examples of aspects for bugs found by
DIE.
input corpora such as known proof of concept (PoC) exploits
or existing unit tests. These input corpora are deliberately
designed to deal with particular properties of the program
under testing, yet such properties are not retained during the
fuzzing process. Existing fuzzers [19, 20, 39, 44] are designed
to generate naive test cases based on simple generative rules
without leveraging input corpora or fail to maintain subtle
semantics or conditions encoded in these input corpora when
generating new test cases, as destructing them indeed helps in
discovering more diverse code paths of the program. Such a
design works well for small programs where the input space
is tractable for automatic exploration. When testing JavaScript-
like complex programs, however, such a conventional design
tends to produce test cases that stress shallow parts of the
complex codebase, e.g., a parser or an interpreter but not JIT
optimization algorithms.
In this paper, we advocate a new technique, called aspect-
preserving mutation, that stochastically preserves beneﬁcial
properties and conditions of the original seed input in generat-
ing a new test case. We use the term, aspect to describe such
preferred properties of input corpora that we want to retain
across mutation. We claim that the aspect-preserving mutation is
a stochastic process because aspects are not explicitly annotated
as a part of the input corpus, but are implicitly inferred
and maintained by our lightweight mutation strategies. For
example, in a PoC exploit, control-ﬂow structures like loops
are deliberately chosen to trigger JIT compilation, and certain
types are carefully chosen to abuse a vulnerable optimization
logic. Under aspect-preserving mutation, we ideally want to
maintain with a high chance such aspects in new test cases
while introducing enough variations so that we can discover
similar or new bugs.
To demonstrate the aspect preservation, we incorporate
two new mutation strategies—namely, structure and type
preservation—to our fully-ﬂedged JavaScript fuzzer, called DIE,
that implements all modern features like coverage mapping
and distributed infrastructure. The foundational technique that
enables both mutation strategies is the typed abstract syntax
tree, or typed-AST, which provides a structural view of an input
corpus with the annotated type information of each node. We
develop a lightweight type analysis that statically propagates
the observed type information extracted from dynamic analysis
(§IV-A). Each mutation strategy embodies its own aspect-
persevering elements by utilizing the shared typed-AST, e.g.,
structure-preserving mutation respects structural aspects like
loops or breaches, and type-preserving mutation maintains
types of each syntactic elements across mutation.
We evaluate DIE with three popular JavaScript engines:
ChakraCore in Microsoft Edge, JavaScriptCore in Apple Safari,
and V8 in Google Chrome. Our evaluation shows that DIE’s
aspect-preserving mutation is more effective in discovering new
bugs (5.7× more unique crashes) and producing high-quality
test cases (2.4× fewer runtime errors) than the state-of-the-art
JavaScript fuzzers (see §VI). DIE has newly discovered 48
high-impact security bugs in ChakraCore, JavaScriptCore, and
V8;38 of the bugs have been ﬁxed with 12 CVEs assigned as
of today ($27K as bug bounty prize).
In summary, this paper makes three contributions:
• We advocate a new aspect-preserving mutation approach
that aims to preserve desirable properties and precondi-
tions of a seed input across mutation.
• We develop a fully-ﬂedged JavaScript fuzzer, DIE, that
implements two new mutation strategies—namely, struc-
ture and type preservation—by using a lightweight static
and dynamic type analysis.
• We have reported 48 new bugs and 38 are ﬁxed during
the responsible disclosure process: 28 in ChakraCore, 16
in JavascriptCore, and four in V8.
DIE will be open-sourced upon publication.
II. BACKGROUND
In this section, we summarize the common design of
JavaScript engines, classify existing fuzzing approaches against
them, and analyze a trend of recent JavaScript-related bugs.
A. JavaScript Engines
JavaScript engines are one of the complex components of
modern browsers. Although the design and implementation
of each JavaScript engine are very different, all share two
common properties: 1) serving as a standardized runtime for
JavaScript and 2) providing JIT compilation for performance.
JavaScript. This is a dynamically typed language, meaning
that a variable can have an arbitrary type at any point during
execution. Also, the program can terminate with a syntactic or
semantic error at runtime (e.g., invalid references, unexpected
types in use). The JavaScript engines process it in multiple
phases: a parser ﬁrst creates an AST, and an interpreter
converts the AST into a ﬁrst-level intermediate representation
(IR) and then executes it with the help of the JavaScript runtime.
Note that the parser and interpreter of JavaScript engines have
rather simple logics, so no security bugs have been recently
reported in either component [13, 14].
JIT compilation. At runtime, the engine proﬁles execution
(e.g., types, # of invocations) to ﬁnd potential hot spots
I
C
S
D
CVE
JS Fuzzer
jsfunfuzz [39]
LangFuzz [20]
Skyﬁre [43]
Fuzzilli [17]
CodeAlchemist [19]
Superion [44]
Nautilus [2]
DIE
I: Input corpus, T: Type (G: generative, M: mutational), C: Coverage feedback,
Year
2007
2012 
2017 
2018
2019 
2019 
2019 
2019  G/M   
T
G
M
M
G
G
M
M
  






OS










S: Semantic-aware, D: Distributed fuzzing, OS: Open source
TABLE I: Classiﬁcation of existing JavaScript engine fuzzers.
for optimization. The engine then translates the ﬁrst-level
IR (i.e., bytecode) into a sequence of lower-level IR (e.g.,
B3 IR in JavaScriptCore) and ultimately to native machine
instructions for faster execution. Modern JavaScript engines
apply advanced optimization techniques, such as function
inlining and redundancy elimination (see Figure 4), during
the compilation process. As part of the machine code, the
JIT compiler inserts various checks (e.g., types) to validate
assumptions made during the optimization, and falls back to
the unoptimized code if the optimized code failed at validation,
called bailing out. Although user-facing interfaces like the
parser and the interpreter are the straight implementation of
the ECMA262 standard, JIT implementation is speciﬁc to each
JavaScript engine, e.g., low-level IRs, optimization techniques,
etc. In other words, it is a desirable place for security auditing,
thanks to the diversity of implementation and the complexity
of the optimization logic.
B. Fuzzing JavaScript Engines
There are two popular types of JavaScript engine fuzzer,
namely, generative and mutational (Table I). Generative fuzzers
build new test cases from scratch based on pre-deﬁned grammar
like jsfunfuzz [39] and Fuzzilli [17] or by constructing them
from synthesizable code bricks disassembled from a large
corpus [19]. Mutational fuzzers generate new test cases on the
seed inputs for testing. For example, LangFuzz [20] breaks
programs in a large corpus into small code fragments, re-
combines them with a seed input, and generates new test
cases; Skyﬁre [43], Nautilus [2] and Superion [44] mutate
each program individually with the segments learned from
other programs in the corpus or with their mutation rule.
Modern fuzzers [2, 17, 19, 43, 44] all leverage code coverage to
accelerate their exploration. However, most advanced generative
or mutational fuzzers fail to effectively explore a JavaScript
engine for deep bugs on the trend (see §II-A) for two reasons:
1) Enormous search space. One major advantage of gener-
ative fuzzers is that they fully control the generation process
of every statement in a testing program. Therefore, building
error-free inputs is straightforward. However, generative fuzzers
build completely new programs by starting from code units.
Meanwhile, a JIT-related bug requires a complicated input with
speciﬁc properties to trigger (see §II-A). Hence, the search
space is too large for a generative fuzzer to build such test
cases in a reasonable time.
s
g
u
B
f
o
#
25
20
15
10
5
0
JIT-OOB
JIT-Type confusion
JIT-Memory corruption
Parser/Interpreter
2016
2017
2018
2019
Year
Fig. 1: The trend of the security bugs in ChakraCore from 2016
to 2019. In each column, the right bar shows the number of bugs
in ChakraCore’s parser, interpreter and its JavaScript runtime. The
left bar indicates the number of bugs residing in the JIT compilation
phases. We further classify the JIT compiler bugs by their types and
out-of-bounds (OOB) access and type confusion caused by incorrect
JIT behavior dominate.
2) Insufﬁcient utilization of existing programs. Recent
JavaScript fuzzers select unit test suites and PoCs of known
bugs as their seed inputs. Basically, such a JavaScript program
is carefully designed to have certain properties that particularly
stress one or more working phases in a JavaScript engine.
Therefore, starting with these inputs enables a fuzzer to
quickly approach and explore the deep portion of the engine.
Unfortunately, existing fuzzers fail
to fully leverage this
prominent beneﬁt from such programs. For example, the PoC
of a JIT-related bug has its unique control ﬂow and data
dependencies among used variables, which explore the speciﬁc
code paths of an optimizer. However, once the PoC is broken
into small normalized segments and mixed with the segments
of other programs in a large corpus, the generative fuzzers like
CodeAlchemist [19] rarely hit the code paths in a reasonable
amount of time. Also, semantic aspects are not respected
when the PoC is mutated by grammar-rule-based mutational
fuzzers like Superion [44] and Nautilus [2]. Different from the
aforementioned fuzzers, DIE creates new JavaScript programs
in a hybrid manner, synthesizing a seed corpus with a unit
generated by generative methods. More importantly, DIE fully
respects the properties of unit-test programs and PoCs. In
particular, DIE mutates an individual program by replacing the
code segments that are unrelated to the properties with new
ones or simply inserting new statements. Meanwhile, the new
segments used for mutation are generated from scratch based
on the context.
C. Trend of Recent Vulnerabilities
We summarize the vulnerabilities (i.e., exploitable bugs with
CVEs assigned) found in ChakraCore from 2016 to 2019 in
Figure 1, which demonstrates the trend of vulnerabilities in
JavaScript engines. We collect the vulnerability information
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
(cid:3)
(order)
function opt(arr, obj) {
  arr[0] = 1.1;
  typeof(arr[obj]);
  arr[0] = 2.3023e-320;
}
function main() {
  let arr = [1.1, 2.2, 3.3];
  for (let i = 0; i  {