### Nested Table Example

The following PL/SQL block demonstrates the use of a nested table. The nested table is populated from the `dept` table, and the elements are then displayed.

```plsql
DECLARE
  -- Define a nested table type
  TYPE dept_tbl_typ IS TABLE OF dept_obj_typ;
  -- Declare a nested table variable
  dept_tbl dept_tbl_typ;
  -- Define a cursor to fetch department names and locations
  CURSOR dept_cur IS 
    SELECT dname, loc 
    FROM dept 
    ORDER BY dname;
  -- Initialize an index
  i INTEGER := 0;
BEGIN
  -- Initialize the nested table with four null elements
  dept_tbl := dept_tbl_typ(
    dept_obj_typ(NULL, NULL),
    dept_obj_typ(NULL, NULL),
    dept_obj_typ(NULL, NULL),
    dept_obj_typ(NULL, NULL)
  );

  -- Loop through the cursor and populate the nested table
  FOR r_dept IN dept_cur LOOP
    i := i + 1;
    dept_tbl(i).dname := r_dept.dname;
    dept_tbl(i).loc := r_dept.loc;
  END LOOP;

  -- Display the header
  DBMS_OUTPUT.PUT_LINE('DNAME LOC');
  DBMS_OUTPUT.PUT_LINE('---------- ----------');

  -- Loop through the nested table and display the elements
  FOR j IN 1..i LOOP
    DBMS_OUTPUT.PUT_LINE(RPAD(dept_tbl(j).dname, 14) || ' ' || dept_tbl(j).loc);
  END LOOP;
END;
```

**Output:**
```
DNAME LOC
---------- ----------
ACCOUNTING NEW YORK
OPERATIONS BOSTON
RESEARCH DALLAS
SALES CHICAGO
```

**Note:** The parameters in the nested table's constructor, `dept_tbl_typ`, are calls to the object type's constructor, `dept_obj_typ`.

### Varrays

A varray (variable-size array) is a type of collection that associates a positive integer with a value. In many respects, it is similar to a nested table but has some key differences.

#### Characteristics of Varrays:
- **Maximum Size Limit:** A varray type must be defined with a maximum size limit. After defining the varray type, varray variables can be declared. The number of elements in the varray cannot exceed this limit.
- **Initialization:** When a varray variable is declared, it initially does not exist (it is a null collection). It must be initialized using a constructor or an assignment statement.
- **Key Type:** The key is a positive integer.
- **Constructor:** The constructor establishes the number of elements in the varray, which must not exceed the maximum size limit. The `EXTEND` method can add additional elements up to the maximum size limit.
- **No Sparsity:** Unlike nested tables, varrays cannot be sparse; there are no gaps in the assignment of values to keys.
- **Exceptions:**
  - Attempting to reference a varray element beyond its initialized or extended size, but within the maximum size limit, will result in a `SUBSCRIPT_BEYOND_COUNT` exception.
  - Attempting to reference a varray element beyond the maximum size limit or extending a varray beyond the maximum size limit will result in a `SUBSCRIPT_OUTSIDE_LIMIT` exception.

#### Defining a Varray Type
The `TYPE IS VARRAY` statement is used to define a varray type within the declaration section of an SPL program.

```plsql
TYPE varraytype IS VARRAY(maxsize) OF datatype | objtype;
```

- `varraytype` is an identifier assigned to the varray type.
- `datatype` is a scalar data type such as `VARCHAR2` or `NUMBER`.
- `maxsize` is the maximum number of elements permitted in varrays of that type.
- `objtype` is a previously defined object type.

**Note:** The `CREATE TYPE` command can be used to define a varray type that is available to all SPL programs in the database.

#### Declaring a Varray Variable
To use the varray, a variable must be declared of that varray type.

```plsql
varray varraytype;
```

- `varray` is an identifier assigned to the varray.
- `varraytype` is the identifier of a previously defined varray type.

#### Initializing a Varray
A varray is initialized using the varray type’s constructor.

```plsql
varraytype([expr1, expr2, ...])
```

- `varraytype` is the identifier of the varray type’s constructor.
- `expr1, expr2, ...` are expressions that are type-compatible with the element type of the varray. If `NULL` is specified, the corresponding element is set to null.

**Example:**

```plsql
DECLARE
  TYPE varray_typ IS VARRAY(2) OF CHAR(1);
  v_varray varray_typ := varray_typ('A', 'B');
BEGIN
  -- Use the varray
  NULL;
END;
```

#### Referencing Varray Elements
An element of the varray is referenced using the following syntax:

```plsql
varray(n)[.element]
```

- `varray` is the identifier of a previously declared varray.
- `n` is a positive integer.
- If the varray type is defined from an object type, `.element` must reference an attribute within the object type. Alternatively, the entire object can be referenced by omitting `.element`.

**Example:**

```plsql
DECLARE
  TYPE dname_varray_typ IS VARRAY(4) OF VARCHAR2(14);
  dname_varray dname_varray_typ;
  CURSOR dept_cur IS 
    SELECT dname 
    FROM dept 
    ORDER BY dname;
  i INTEGER := 0;
BEGIN
  dname_varray := dname_varray_typ(NULL, NULL, NULL, NULL);

  FOR r_dept IN dept_cur LOOP
    i := i + 1;
    dname_varray(i) := r_dept.dname;
  END LOOP;

  DBMS_OUTPUT.PUT_LINE('DNAME');
  DBMS_OUTPUT.PUT_LINE('----------');

  FOR j IN 1..i LOOP
    DBMS_OUTPUT.PUT_LINE(dname_varray(j));
  END LOOP;
END;
```

**Output:**
```
DNAME
----------
ACCOUNTING
OPERATIONS
RESEARCH
SALES
```

### Collection Methods

Collection methods are functions and procedures that provide useful information about a collection, aiding in the processing of data. The following sections discuss the collection methods supported by Advanced Server.

#### COUNT
- **Description:** Returns the number of elements in a collection.
- **Syntax:**
  ```plsql
  collection.COUNT
  ```
- **Example:**

  ```plsql
  DECLARE
    TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    sparse_arr sparse_arr_typ;
  BEGIN
    sparse_arr(-100) := -100;
    sparse_arr(-10) := -10;
    sparse_arr(0) := 0;
    sparse_arr(10) := 10;
    sparse_arr(100) := 100;
    DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
  END;
  ```

  **Output:**
  ```
  COUNT: 5
  ```

#### DELETE
- **Description:** Deletes entries from a collection.
- **Syntax:**
  ```plsql
  collection.DELETE
  collection.DELETE(subscript)
  collection.DELETE(first_subscript, last_subscript)
  ```
- **Example:**

  ```plsql
  DECLARE
    TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    sparse_arr sparse_arr_typ;
    v_results VARCHAR2(50);
    v_sub NUMBER;
  BEGIN
    sparse_arr(-100) := -100;
    sparse_arr(-10) := -10;
    sparse_arr(0) := 0;
    sparse_arr(10) := 10;
    sparse_arr(100) := 100;
    DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
    sparse_arr.DELETE(0);
    DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
    v_sub := sparse_arr.FIRST;
    WHILE v_sub IS NOT NULL LOOP
      IF sparse_arr(v_sub) IS NULL THEN
        v_results := v_results || 'NULL ';
      ELSE
        v_results := v_results || sparse_arr(v_sub) || ' ';
      END IF;
      v_sub := sparse_arr.NEXT(v_sub);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
  END;
  ```

  **Output:**
  ```
  COUNT: 5
  COUNT: 4
  Results: -100 -10 10 100
  ```

#### EXISTS
- **Description:** Verifies that a subscript exists within a collection.
- **Syntax:**
  ```plsql
  collection.EXISTS(subscript)
  ```
- **Example:**

  ```plsql
  DECLARE
    TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    sparse_arr sparse_arr_typ;
  BEGIN
    sparse_arr(-100) := -100;
    sparse_arr(-10) := -10;
    sparse_arr(0) := 0;
    sparse_arr(10) := 10;
    sparse_arr(100) := 100;
    DBMS_OUTPUT.PUT_LINE('The index exists: ' ||
      CASE WHEN sparse_arr.exists(10) = TRUE THEN 'true' ELSE 'false' END);
  END;
  ```

  **Output:**
  ```
  The index exists: true
  ```

#### EXTEND
- **Description:** Increases the size of a collection.
- **Syntax:**
  ```plsql
  collection.EXTEND
  collection.EXTEND(count)
  collection.EXTEND(count, index_number)
  ```
- **Example:**

  ```plsql
  DECLARE
    TYPE sparse_arr_typ IS TABLE OF NUMBER;
    sparse_arr sparse_arr_typ := sparse_arr_typ(-100, -10, 0, 10, 100);
    v_results VARCHAR2(50);
  BEGIN
    DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
    sparse_arr.EXTEND(3, 2);
    DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
    FOR i IN sparse_arr.FIRST .. sparse_arr.LAST LOOP
      IF sparse_arr(i) IS NULL THEN
        v_results := v_results || 'NULL ';
      ELSE
        v_results := v_results || sparse_arr(i) || ' ';
      END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
  END;
  ```

  **Output:**
  ```
  COUNT: 5
  COUNT: 8
  Results: -100 -10 0 10 100 -10 -10 -10
  ```

#### FIRST
- **Description:** Returns the subscript of the first element in a collection.
- **Syntax:**
  ```plsql
  collection.FIRST
  ```
- **Example:**

  ```plsql
  DECLARE
    TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    sparse_arr sparse_arr_typ;
  BEGIN
    sparse_arr(-100) := -100;
    sparse_arr(-10) := -10;
    DBMS_OUTPUT.PUT_LINE('First element: ' || sparse_arr.FIRST);
  END;
  ```

  **Output:**
  ```
  First element: -100
  ```

This comprehensive guide covers the usage of nested tables and varrays, along with various collection methods, providing clear examples and explanations for each.