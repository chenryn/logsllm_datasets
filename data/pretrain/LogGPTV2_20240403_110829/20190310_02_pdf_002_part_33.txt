populated from the dept table. Finally, the elements from the nested table are displayed.
DECLARE
TYPE dept_tbl_typ IS TABLE OF dept_obj_typ;
dept_tbl dept_tbl_typ;
CURSOR dept_cur IS SELECT dname, loc FROM dept ORDER BY dname;
i INTEGER := 0;
BEGIN
dept_tbl := dept_tbl_typ(
dept_obj_typ(NULL,NULL),
dept_obj_typ(NULL,NULL),
dept_obj_typ(NULL,NULL),
dept_obj_typ(NULL,NULL)
);
FOR r_dept IN dept_cur LOOP
i := i + 1;
dept_tbl(i).dname := r_dept.dname;
dept_tbl(i).loc := r_dept.loc;
END LOOP;
DBMS_OUTPUT.PUT_LINE('DNAME LOC');
DBMS_OUTPUT.PUT_LINE('---------- ----------');
FOR j IN 1..i LOOP
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 281
Database Compatibility for Oracle® Developers Guide
DBMS_OUTPUT.PUT_LINE(RPAD(dept_tbl(j).dname,14) || ' ' ||
dept_tbl(j).loc);
END LOOP;
END;
Note: The parameters comprising the nested table’s constructor, dept_tbl_typ, are
calls to the object type’s constructor dept_obj_typ.
The following is the output from the anonymous block.
DNAME LOC
---------- ----------
ACCOUNTING NEW YORK
OPERATIONS BOSTON
RESEARCH DALLAS
SALES CHICAGO
3.10.3 Varrays
A varray or variable-size array is a type of collection that associates a positive integer
with a value. In many respects, it is similar to a nested table.
A varray has the following characteristics:
 A varray type must be defined along with a maximum size limit. After the varray
type is defined, varray variables can be declared of that varray type. Data
manipulation occurs using the varray variable, or simply, “varray” for short. The
number of elements in the varray cannot exceed the maximum size limit
established in the varray type definition.
 When a varray variable is declared, the varray initially does not exist (it is a null
collection). The null varray must be initialized with a constructor. You can also
initialize the varray by using an assignment statement where the right-hand side of
the assignment is an initialized varray of the same type.
 The key is a positive integer.
 The constructor establishes the number of elements in the varray, which must not
exceed the maximum size limit. The EXTEND method can add additional elements
to the varray up to the maximum size limit. See Section 3.11 for information on
collection methods.
 Unlike a nested table, a varray cannot be sparse - there are no gaps in the
assignment of values to keys.
 An attempt to reference a varray element beyond its initialized or extended size,
but within the maximum size limit will result in a SUBSCRIPT_BEYOND_COUNT
exception.
 An attempt to reference a varray element beyond the maximum size limit or
extend a varray beyond the maximum size limit will result in a
SUBSCRIPT_OUTSIDE_LIMIT exception.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 282
Database Compatibility for Oracle® Developers Guide
The TYPE IS VARRAY statement is used to define a varray type within the declaration
section of an SPL program.
TYPE varraytype IS { VARRAY | VARYING ARRAY }(maxsize)
OF { datatype | objtype };
varraytype is an identifier assigned to the varray type. datatype is a scalar data type
such as VARCHAR2 or NUMBER. maxsize is the maximum number of elements permitted
in varrays of that type. objtype is a previously defined object type.
Note: The CREATE TYPE command can be used to define a varray type that is available
to all SPL programs in the database. In order to make use of the varray, a variable must
be declared of that varray type. The following is the syntax for declaring a varray
variable.
varray varraytype
varray is an identifier assigned to the varray. varraytype is the identifier of a
previously defined varray type.
A varray is initialized using the varray type’s constructor.
varraytype ([ { expr1 | NULL } [, { expr2 | NULL } ]
[, ...] ])
varraytype is the identifier of the varray type’s constructor, which has the same name
as the varray type. expr1, expr2, … are expressions that are type-compatible with the
element type of the varray. If NULL is specified, the corresponding element is set to null.
If the parameter list is empty, then an empty varray is returned, which means there are no
elements in the varray. If the varray is defined from an object type, then exprn must
return an object of that object type. The object can be the return value of a function or the
return value of the object type’s constructor. The object can also be an element of another
varray of the same varray type.
If a collection method other than EXISTS is applied to an uninitialized varray, a
COLLECTION_IS_NULL exception is thrown. See Section 3.11 for information on
collection methods.
The following is an example of a constructor for a varray:
DECLARE
TYPE varray_typ IS VARRAY(2) OF CHAR(1);
v_varray varray_typ := varray_typ('A','B');
An element of the varray is referenced using the following syntax.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 283
Database Compatibility for Oracle® Developers Guide
varray(n)[.element ]
varray is the identifier of a previously declared varray. n is a positive integer. If the
varray type of varray is defined from an object type, then [.element ] must
reference an attribute within the object type from which the varray type is defined.
Alternatively, the entire object can be referenced by omitting [.element ].
The following is an example of a varray where it is known that there will be four
elements.
DECLARE
TYPE dname_varray_typ IS VARRAY(4) OF VARCHAR2(14);
dname_varray dname_varray_typ;
CURSOR dept_cur IS SELECT dname FROM dept ORDER BY dname;
i INTEGER := 0;
BEGIN
dname_varray := dname_varray_typ(NULL, NULL, NULL, NULL);
FOR r_dept IN dept_cur LOOP
i := i + 1;
dname_varray(i) := r_dept.dname;
END LOOP;
DBMS_OUTPUT.PUT_LINE('DNAME');
DBMS_OUTPUT.PUT_LINE('----------');
FOR j IN 1..i LOOP
DBMS_OUTPUT.PUT_LINE(dname_varray(j));
END LOOP;
END;
The above example produces the following output:
DNAME
----------
ACCOUNTING
OPERATIONS
RESEARCH
SALES
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 284
Database Compatibility for Oracle® Developers Guide
3.11 Collection Methods
Collection methods are functions and procedures that provide useful information about a
collection that can aid in the processing of data in the collection. The following sections
discuss the collection methods supported by Advanced Server.
3.11.1 COUNT
COUNT is a method that returns the number of elements in a collection. The syntax for
using COUNT is as follows:
collection.COUNT
collection is the name of a collection.
For a varray, COUNT always equals LAST.
The following example shows that an associative array can be sparsely populated (i.e.,
there are “gaps” in the sequence of assigned elements). COUNT includes only the
elements that have been assigned a value.
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
sparse_arr sparse_arr_typ;
BEGIN
sparse_arr(-100) := -100;
sparse_arr(-10) := -10;
sparse_arr(0) := 0;
sparse_arr(10) := 10;
sparse_arr(100) := 100;
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
END;
The following output shows that there are five populated elements included in COUNT.
COUNT: 5
3.11.2 DELETE
The DELETE method deletes entries from a collection. You can call the DELETE method
in three different ways.
Use the first form of the DELETE method to remove all entries from a collection:
collection.DELETE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 285
Database Compatibility for Oracle® Developers Guide
Use the second form of the DELETE method to remove the specified entry from a
collection:
collection.DELETE(subscript)
Use the third form of the DELETE method to remove the entries that are within the range
specified by first_subscript and last_subscript (including the entries for the
first_subscript and the last_subscript) from a collection.
collection.DELETE(first_subscript, last_subscript)
If first_subscript and last_subscript refer to non-existent elements, elements
that are in the range between the specified subscripts are deleted. If first_subscript
is greater than last_subscript, or if you specify a value of NULL for one of the
arguments, DELETE has no effect.
Note that when you delete an entry, the subscript remains in the collection; you can re-
use the subscript with an alternate entry. If you specify a subscript that does not exist in
the call to the DELETE method, DELETE does not raise an exception.
The following example demonstrates using the DELETE method to remove the element
with subscript 0 from the collection:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
sparse_arr sparse_arr_typ;
v_results VARCHAR2(50);
v_sub NUMBER;
BEGIN
sparse_arr(-100) := -100;
sparse_arr(-10) := -10;
sparse_arr(0) := 0;
sparse_arr(10) := 10;
sparse_arr(100) := 100;
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
sparse_arr.DELETE(0);
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
v_sub := sparse_arr.FIRST;
WHILE v_sub IS NOT NULL LOOP
IF sparse_arr(v_sub) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || sparse_arr(v_sub) || ' ';
END IF;
v_sub := sparse_arr.NEXT(v_sub);
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
END;
COUNT: 5
COUNT: 4
Results: -100 -10 10 100
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 286
Database Compatibility for Oracle® Developers Guide
COUNT indicates that before the DELETE method, there were 5 elements in the collection;
after the DELETE method was invoked, the collection contains 4 elements.
3.11.3 EXISTS
The EXISTS method verifies that a subscript exists within a collection. EXISTS returns
TRUE if the subscript exists; if the subscript does not exist, EXISTS returns FALSE. The
method takes a single argument; the subscript that you are testing for. The syntax is:
collection.EXISTS(subscript)
collection is the name of the collection.
subscript is the value that you are testing for. If you specify a value of NULL, EXISTS
returns false.
The following example verifies that subscript number 10 exists within the associative
array:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
sparse_arr sparse_arr_typ;
BEGIN
sparse_arr(-100) := -100;
sparse_arr(-10) := -10;
sparse_arr(0) := 0;
sparse_arr(10) := 10;
sparse_arr(100) := 100;
DBMS_OUTPUT.PUT_LINE('The index exists: ' ||
CASE WHEN sparse_arr.exists(10) = TRUE THEN 'true' ELSE 'false' END);
END;
The index exists: true
Some collection methods raise an exception if you call them with a subscript that does
not exist within the specified collection. Rather than raising an error, the EXISTS
method returns a value of FALSE.
3.11.4 EXTEND
The EXTEND method increases the size of a collection. There are three variations of the
EXTEND method. The first variation appends a single NULL element to a collection; the
syntax for the first variation is:
collection.EXTEND
collection is the name of a collection.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 287
Database Compatibility for Oracle® Developers Guide
The following example demonstrates using the EXTEND method to append a single, null
element to a collection:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER;
sparse_arr sparse_arr_typ := sparse_arr_typ(-100,-10,0,10,100);
v_results VARCHAR2(50);
BEGIN
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
sparse_arr.EXTEND;
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
FOR i IN sparse_arr.FIRST .. sparse_arr.LAST LOOP
IF sparse_arr(i) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || sparse_arr(i) || ' ';
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
END;
COUNT: 5
COUNT: 6
Results: -100 -10 0 10 100 NULL
COUNT indicates that before the EXTEND method, there were 5 elements in the collection;
after the EXTEND method was invoked, the collection contains 6 elements.
The second variation of the EXTEND method appends a specified number of elements to
the end of a collection.
collection.EXTEND(count)
collection is the name of a collection.
count is the number of null elements added to the end of the collection.
The following example demonstrates using the EXTEND method to append multiple null
elements to a collection:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER;
sparse_arr sparse_arr_typ := sparse_arr_typ(-100,-10,0,10,100);
v_results VARCHAR2(50);
BEGIN
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
sparse_arr.EXTEND(3);
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
FOR i IN sparse_arr.FIRST .. sparse_arr.LAST LOOP
IF sparse_arr(i) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || sparse_arr(i) || ' ';
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 288
Database Compatibility for Oracle® Developers Guide
END;
COUNT: 5
COUNT: 8
Results: -100 -10 0 10 100 NULL NULL NULL
COUNT indicates that before the EXTEND method, there were 5 elements in the collection;
after the EXTEND method was invoked, the collection contains 8 elements.
The third variation of the EXTEND method appends a specified number of copies of a
particular element to the end of a collection.
collection.EXTEND(count, index_number)
collection is the name of a collection.
count is the number of elements added to the end of the collection.
index_number is the subscript of the element that is being copied to the collection.
The following example demonstrates using the EXTEND method to append multiple
copies of the second element to the collection:
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER;
sparse_arr sparse_arr_typ := sparse_arr_typ(-100,-10,0,10,100);
v_results VARCHAR2(50);
BEGIN
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
sparse_arr.EXTEND(3, 2);
DBMS_OUTPUT.PUT_LINE('COUNT: ' || sparse_arr.COUNT);
FOR i IN sparse_arr.FIRST .. sparse_arr.LAST LOOP
IF sparse_arr(i) IS NULL THEN
v_results := v_results || 'NULL ';
ELSE
v_results := v_results || sparse_arr(i) || ' ';
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Results: ' || v_results);
END;
COUNT: 5
COUNT: 8
Results: -100 -10 0 10 100 -10 -10 -10
COUNT indicates that before the EXTEND method, there were 5 elements in the collection;
after the EXTEND method was invoked, the collection contains 8 elements.
Note: The EXTEND method cannot be used on a null or empty collection.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 289
Database Compatibility for Oracle® Developers Guide
3.11.5 FIRST
FIRST is a method that returns the subscript of the first element in a collection. The
syntax for using FIRST is as follows:
collection.FIRST
collection is the name of a collection.
The following example displays the first element of the associative array.
DECLARE
TYPE sparse_arr_typ IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
sparse_arr sparse_arr_typ;
BEGIN
sparse_arr(-100) := -100;
sparse_arr(-10) := -10;