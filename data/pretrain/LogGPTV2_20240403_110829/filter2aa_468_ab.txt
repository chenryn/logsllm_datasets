• 通往破解点的道路 – Strings 与 API 
• Lab 2 
• 软体破解实战Demo – 010 Editor 
Lab 1 
• 目标：修改我们的程式age.exe，让它无论
输入年纪多少都显示: “Let's have a crazy 
party !! :D” 
C:\Documents and Settings\Administrator\桌面\Hitcon_girls\Lab 1>noage.exe 
Please enter your age: 10 
Let's have a crazy party !! :D 
C:\Documents and Settings\Administrator\桌面\Hitcon_girls\Lab 1>noage.exe 
Please enter your age: 99 
Let's have a crazy party !! :D 
Lab 1 
• 两个必须熟知的组合语言指令: 
– nop: No Operation, 不作任何事 
– jmp xxxx: 将程式流程强制跳至位址xxxx去执行 
Lab 1 
• 用debugger开启我们的 age.exe: 
• [File]  [Open], 选择age.exe 
Lab 1 
• 在code视窗(左上角)，作上下卷动，直到找
到0x401000 – 我们的main function 所在为
止(或按Ctrl+G，输入0x401000直接到该位
址) 
Lab 1 
• To jmp or to nop, that’s the question: 
–  在红色箭头所在处，程式有一个分歧点： 
• 继续往下一个指令执行(不jmp) 
• 亦或跳到0x401037执行 
比较式，0x12=18 
Lab 1 
• 假设你希望把分歧点消除，让程式永远只
作某件事： 
– 把jnb指令改成nop永远作action 1 
– 把jnb指令改成jmp永远作action 2 
Action 1 
Action 2 
nop 
JMP SHORT age.00401037 
Lab 1 
• 动手时间 – 10 mins – 怎么修改指令？ 
• 我们的目标是希望程式永远执行action 2，
因此要将jnb所在的指令改为jmp 
– 将滑鼠移至该指令上方选取它 
– 按右键 
– 选”Assemble” 
– 将原本的 
• ”JNB SHORT 00401037”，改成 
• “Jmp SHORT 00401037” 
– 按F9执行程式，看结果 
课程内容 
• 逆向工程与软体破解概念简介 
• Lab 0 
• 软体破解前你必须知道的二三事 
• Lab 1 
• 通往破解点的道路 – Strings 与 API 
• Lab 2 
• 软体破解实战Demo – 010 Editor 
通往破解点的道路 
通往破解点的道路 – 字串引用 
• 范例程式：简单的序号验证程式。 
• 程式操作示范 
• 假想程式流程： 
– 读进reg name 和 reg key 
– 将reg name, reg key当作参数，传入自己的演
算法，验证是否正确 
– 验证失败，跳出视窗显示错误 
猜测：程式引用到”Registration fail”处的程式码， 
可能很接近作验证的程式码(我们要修改的点) 
通往破解点的道路 – 字串引用 
• 程式实际流程图： 
目标: 程式码跳转点 
程式调用字串 
通往破解点的道路 - Windows API  
• 视窗作业系统应用程
式介面（Windows 
API） 
– Windows提供的函式 
– 用来让使用者作底层的
系统资源存取 
– 分门别类存放于不同的
函式库(DLL)中 
系统资源 
Windows 
api 
• 掌握适当Windows API, 可以帮助我们快速
找到关键程式码(破解点)。 
程式呼叫MessageBox  API函
式 
目标: 程式跳转点 
观察关键点附近
会叫用的系统资
源 
利用相关的API
下中断点追踪 
往前或往后找寻
可能程式码 
Try & Error 
通往破解点的道路 - Windows API  
课程内容 
• 逆向工程与软体破解概念简介 
• Lab 0 
• 软体破解前你必须知道的二三事 
• Lab 1 
• 通往破解点的道路 – Strings 与 API 
• Lab 2 
• 软体破解实战Demo – 010 Editor 
Lab 2 
• 目标：用Debugger来追踪ncrackme.exe，
找出程式作序号检查的程式点 
• 用Debugger开启ncrackme.exe: 
    [File]  [Open] 
Lab 2 
• 方法一 – 利用字串引用来寻找： 
• 按右键 
• “Search for” 
• “All referenced 
     text strings” 
Lab 2 
• 程式中会引用到的字串列表： 
• 在想追踪的string上按右键”Follow in 
dissembler” 
Lab 2 
• 即可找到关键程式码区块： 
Lab 2 
• 方法二— 利用API MessageBoxA来设置中
断点找寻： 
• 按“Ctrl + N”，debugger会列出所有引用
到的函式 
Lab 2 
• 按”F9”让程式执行，跳出视窗后在”Reg 
name”, “Reg key”栏位任意输入东西，按
”Register” 
Lab 2 
• 在API函式上按右键，选择”Find reference 
to import” 
• 除错器会列出程式中所有引用此API的位址
，在想追踪的位址上按”enter” 
Lab 2 
• 即可找到呼叫”MessageBoxA”的程式码： 
注册成功的情况 
注册失败的情况 
程式跳转点 
现在，试著修改程式，让我们不管输入什么序号，永远都会显示注册成功   
Lab 2 
• 动手时间 – 10 mins 
• 将位址0x401072的指令由原本的 
– JNZ SHORT 0040108F，改为 
– NOP 
• 按F9执行，观察结果 
课程内容 
• 逆向工程与软体破解概念简介 
• Lab 0 
• 软体破解前你必须知道的二三事 
• Lab 1 
• 通往破解点的道路 – Strings 与 API 
• Lab 2 
• 软体破解实战Demo – 010 Editor 
demo 
• 010序号验证机制破解 (仅供教学目的) 
如何储存修改过的档案 
• 之前的Lab都在记忆体中作修改，下次重新
启动效果就消失。 
• 要直接把修改过程式码写到档案中： 
– 按右键 
– “Copy to executable” 
– “All modifications” 
– “Copy all” 
如何储存修改过的档案 
• 按右键 “Backup”  “Save data to file” 
• 另存新档即可 
• 现在执行看新存的档案吧 
QUESTION? 
PI:EMAIL