For a web application with approximately 150 fields, where any change in a field value needs to be saved, you need an efficient and scalable solution for storing these values. Hereâ€™s a structured approach to handling this in Google App Engine (GAE):

### Datastore vs. Memcache

1. **Datastore**:
   - **Primary Storage**: The datastore is the primary and persistent storage solution in GAE. It is designed to handle large volumes of data and provides strong consistency.
   - **Use Case**: For your application, you should use the datastore to store the final, updated values of the fields. This ensures that your data is durable and can be retrieved even after the application restarts.

2. **Memcache**:
   - **Temporary Cache**: Memcache is an in-memory key-value store that is used to cache frequently accessed data. It reduces the load on the datastore by temporarily storing data in memory.
   - **Use Case**: You can use memcache to store the current state of the fields while the user is interacting with the application. This can help improve performance by reducing the number of read and write operations to the datastore.

### Recommended Approach

1. **Initial Load**:
   - When the user loads the form, fetch the current values from the datastore and store them in memcache.
   - Use memcache to keep track of the initial state of the fields.

2. **Field Value Changes**:
   - Whenever a field value is changed, update the corresponding entry in memcache.
   - Track which fields have been modified since the last save operation.

3. **Saving Changes**:
   - Periodically or upon a specific event (e.g., form submission, timeout), compare the current state in memcache with the initial state.
   - Save only the modified fields to the datastore to minimize the number of write operations.

4. **Handling Concurrency**:
   - Ensure that the system handles concurrent updates gracefully. You can use transactions or optimistic concurrency control to manage simultaneous changes.

### Implementation Considerations

- **Programming Language**: Depending on your chosen language (Java, Python, Go), there are libraries and frameworks available to facilitate interaction with the datastore and memcache. For example, in Python, you can use the `google-cloud-ndb` library for the datastore and the `google-cloud-memcache` library for memcache.
- **Performance Tuning**: Monitor the performance of your application and adjust the use of memcache and datastore as needed. For instance, if you find that the datastore is becoming a bottleneck, you may need to optimize your queries or increase the use of memcache.

### Example Workflow

1. **Load Data**:
   ```python
   from google.cloud import ndb
   from google.appengine.api import memcache

   def load_form_data(user_id):
       # Fetch data from datastore
       form_data = ndb.get_by_id(user_id)
       # Store in memcache
       memcache.set(f'form_data_{user_id}', form_data)
   ```

2. **Update Field**:
   ```python
   def update_field(user_id, field_name, new_value):
       # Get current form data from memcache
       form_data = memcache.get(f'form_data_{user_id}')
       if form_data:
           form_data[field_name] = new_value
           # Update memcache
           memcache.set(f'form_data_{user_id}', form_data)
   ```

3. **Save Changes**:
   ```python
   def save_changes(user_id):
       # Get current form data from memcache
       form_data = memcache.get(f'form_data_{user_id}')
       if form_data:
           # Save to datastore
           ndb.put(form_data)
           # Clear memcache
           memcache.delete(f'form_data_{user_id}')
   ```

By following this approach, you can ensure that your application efficiently handles frequent updates to a large number of fields while maintaining data integrity and performance.