at least 𝑡 + 1 nodes of Q1 are honest. These honest nodes receive 𝑀
from the broadcaster and send ⟨ECHO, ℎ⟩ to all nodes.
□
Lemma 4.3. If any honest node executes ADD(𝑀), then at least
𝑡 + 1 honest nodes execute ADD(𝑀) and the rest of the honest nodes
execute ADD(⊥).
Proof. Let node 𝑖 execute ADD(𝑀). By Lemma 4.2, there exits
2𝑡 +1 nodes who sent ⟨ECHO, ℎ⟩ messages where ℎ = hash(𝑀). Let us
first show that no honest executes ADD(𝑀′) for some 𝑀′ ̸= 𝑀 and
𝑀′ ̸=⊥. For the sake of contradiction, assume that an honest node 𝑗
executes ADD(𝑀′) for such an 𝑀′. By Lemma 4.2, there exist 2𝑡 + 1
nodes that sent ⟨ECHO, ℎ′⟩ where ℎ′ = hash(𝑀′). This is impossible
because by quorum intersection, 2(2𝑡 + 1) − 𝑛 = 𝑡 + 1 nodes echoed
both messages but there are at most 𝑡 malicious nodes.
Since at least 𝑡 + 1 honest nodes send ⟨READY, ℎ⟩, these messages
eventually reach all honest nodes, and according to the protocol all
honest nodes will send ⟨READY, ℎ⟩ to all nodes. Hence, eventually
all honest nodes receive at least 2𝑡 + 1 ⟨READY, ℎ⟩ messages and
execute ADD(·). Since they cannot execute ADD(·) with any other
message, they execute either ADD(𝑀) or ADD(⊥). By Lemma 4.2, at
least 𝑡 + 1 honest nodes receive 𝑀 from the broadcaster. According
to the protocol, these nodes will execute ADD(𝑀).
□
Now, we can prove that the properties of RBC are satisfied.
Lemma 4.4 (Agreement and Totality). If an honest node outputs
𝑀, then no honest node will output 𝑀′ ̸= 𝑀, and every honest node
will eventually output 𝑀.
Proof. If an honest node outputs 𝑀, we show some honest node
must execute ADD(𝑀). If any honest node execute ADD(𝑀′) where
𝑀′ ̸= 𝑀, 𝑀′ ̸=⊥, then by Lemma 4.3 the initial condition of ADD
for 𝑀′ is met, and all honest nodes output 𝑀′, contradiction. If
no honest node execute ADD(𝑀), i.e., honest nodes either execute
ADD(⊥) or nothing, then in ADD, there are at most 𝑡 DISPERSE
messages (from malicious nodes), and no honest node can output,
contradiction. Hence, some honest node must execute ADD(𝑀).
By Lemma 4.3, all honest nodes will execute ADD(𝑀) or ADD(⊥),
among which at least 𝑡 + 1 honest nodes execute ADD(𝑀). Hence,
the initial condition for ADD holds, and by Lemma 3.3, every honest
node will output 𝑀.
□
Lemma 4.5 (Validity). If the broadcaster is honest and has an
input 𝑀, then every honest will eventually output 𝑀.
Proof. When the broadcaster is honest, it will send ⟨PROPOSE, 𝑀⟩
to all nodes. As a result, all 2𝑡 + 1 honest nodes will send ⟨ECHO, ℎ⟩
for ℎ = hash(𝑀) to all nodes. Then, all 2𝑡 +1 honest nodes will even-
tually send ⟨READY, ℎ⟩, and no honest node will send ⟨READY, ℎ′⟩ for
ℎ′ ̸= ℎ since there are at most 𝑡 malicious nodes. Thus, all honest
nodes eventually start ADD after receiving 2𝑡 + 1 READY messages,
with inputs either 𝑀 or ⊥. When an honest node starts ADD, there
are at least 𝑡 + 1 honest nodes that hold 𝑀, since the first honest
node that sends READY for ℎ receives 2𝑡 + 1 ECHO messages for ℎ.
Those 𝑡 +1 honest nodes eventually invoke ADD(𝑀), thus the initial
condition of ADD is met, and ADD guarantees that every honest
node will eventually output 𝑀.
□
Next, we analyze the communication complexity of the protocol.
Lemma 4.6. Assuming existence of collision resistant hash func-
tions, Algorithm 3 solves RBC with communication complexity of
𝑂(𝑛|𝑀|+𝜅𝑛2) where 𝜅 is the output length of the hash function.
Proof. The proposal step for 𝑀 has a communication cost of
𝑂(𝑛|𝑀|). ECHO and READY messages consume a communication cost
of 𝑂(𝑛2𝜅). From Lemma 3.4, the communication cost of ADD is
𝑂(𝑛|𝑀|+𝑛2). Combining all these costs, we get that the total com-
munication of Algorithm 2 is 𝑂(𝑛|𝑀|+𝜅𝑛2).
□
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2710Combining the above lemmas, we get the following theorem.
Theorem 4.7. In an asynchronous network of 𝑛 nodes where
𝑡  𝑡 is that, the
protocol can ensure secrecy of the secret even when the adversary
corrupts more than 𝑡 and up to ℓ nodes in the system. However, to
ensure termination, ℓ < 𝑛 − 𝑡 is needed.
5.2 Asynchronous Verifiable Secret Sharing
Our construction of AVSS has a total communication cost of 𝑂(𝜅𝑛2)
and does not require any trusted setup. Briefly, our AVSS protocol
is inspired by the VSS scheme of Pedersen [44]: the dealer uses our
RBC protocol to broadcast Pedersen’s polynomial commitment and
at least a large fraction of honest nodes receive valid shares. The
AVSS algorithm is given in Algorithm 5.
We describe the interface of Pedersen’s polynomial commitment
below and give more details in Appendix D. Let 𝑝𝑝 be the public
parameters.
• PedPolyCommit(𝑝𝑝, 𝑝(·), 𝑡, 𝑛) → 𝒗, 𝒔, 𝒓 : The PedPolyCommit(·)
algorithm takes as input a degree-𝑡 polynomial 𝑝(·) and outputs
three vectors each consisting of 𝑛 elements. The vector 𝒗 is the
commitment to the polynomial and vectors 𝒔 and 𝒓 consist of
shares for the 𝑛 nodes.
• PedEvalVerify(𝑝𝑝, 𝒗, 𝑖, 𝑠𝑖, 𝑟𝑖) → 0/1 : The PedEvalVerify(·) algo-
rithm takes as input a commitment 𝒗 to a polynomial 𝑝(·) and a
tuple (𝑖, 𝑠𝑖, 𝑟𝑖), and it outputs 1 if 𝑝(𝑖) = 𝑠𝑖 and 0 otherwise.
At any given node 𝑖, the predicate 𝑃(·) in Algorithm 5 returns true
if the dealer’s RBC proposal contains a valid Pedersen’s polynomial