         1          4         10      661.73  
         1          4                5414.05  
         1          5          1       813.1  
         1          5          2      634.41  
         1          5          3      301.85  
         1          5          4      618.07  
         1          5          5      629.55  
         1          5          6      377.24  
         1          5          7      219.54  
         1          5          8      724.27  
         1          5          9      216.57  
         1          5         10      429.87  
         1          5                4964.47  
         1                     1     2644.09  
         1                     2     2783.28  
         1                     3     1994.73  
         1                     4     2449.38  
         1                     5     2586.49  
         1                     6     2866.24  
         1                     7     1912.24  
         1                     8     2484.46  
         1                     9      2159.2  
         1                    10      2609.2  
         1                          24489.31  
         2          1          1      252.79  
         2          1          2      669.02  
         2          1          3      773.11  
         2          1          4      393.42  
         2          1          5      693.87  
         2          1          6      734.42  
         2          1          7      904.45  
         2          1          8      448.28  
         2          1          9      629.31  
         2          1         10      195.91  
         2          1                5694.58  
         2          2          1       569.6  
         2          2          2      434.58  
         2          2          3      571.17  
         2          2          4      434.79  
         2          2          5      145.03  
         2          2          6      570.25  
         2          2          7       593.2  
         2          2          8      936.59  
         2          2          9      569.44  
         2          2         10      311.33  
         2          2                5135.98  
         2          3          1      686.04  
         2          3          2      331.67  
         2          3          3      659.12  
         2          3          4      593.77  
         2          3          5      588.32  
         2          3          6      559.81  
         2          3          7      588.53  
         2          3          8      375.92  
         2          3          9      677.74  
         2          3         10      395.91  
         2          3                5456.83  
         2          4          1       399.2  
         2          4          2      882.01  
         2          4          3       59.21  
         2          4          4       349.9  
         2          4          5      598.39  
         2          4          6      431.06  
         2          4          7      340.95  
         2          4          8      420.85  
         2          4          9       493.9  
         2          4         10      517.31  
         2          4                4492.78  
         2          5          1      184.45  
         2          5          2      481.18  
         2          5          3      382.22  
         2          5          4      849.66  
         2          5          5      343.34  
         2          5          6      460.22  
         2          5          7      770.76  
         2          5          8      297.37  
         2          5          9      441.46  
         2          5         10      339.33  
         2          5                4549.99  
         2                     1     2092.08  
         2                     2     2798.46  
         2                     3     2444.83  
         2                     4     2621.54  
         2                     5     2368.95  
         2                     6     2755.76  
         2                     7     3197.89  
         2                     8     2479.01  
         2                     9     2811.85  
         2                    10     1759.79  
         2                          25330.16  
132 rows selected.  
```  
GROUPING 测试  
```  
It can be quite easy to visually identify subtotals generated by rollups and cubes,   
but to do it programatically you really need something more accurate than the presence of null values in the grouping columns.   
This is where the GROUPING function comes in.   
It accepts a single column as a parameter and returns "1" if the column contains a null value generated as part of a subtotal by a ROLLUP or CUBE operation or "0" for any other value, including stored null values.  
SELECT fact_1_id,  
       fact_2_id,  
       SUM(sales_value) AS sales_value,  
       GROUPING(fact_1_id) AS f1g,   
       GROUPING(fact_2_id) AS f2g  
FROM   dimension_tab  
GROUP BY CUBE (fact_1_id, fact_2_id)  
HAVING GROUPING(fact_1_id) = 1 OR GROUPING(fact_2_id) = 1  
ORDER BY GROUPING(fact_1_id), GROUPING(fact_2_id);  
 FACT_1_ID  FACT_2_ID SALES_VALUE        F1G        F2G  
---------- ---------- ----------- ---------- ----------  
         1               24489.31          0          1  
         2               25330.16          0          1  
                    5     9514.46          1          0  
                    3    11572.56          1          0  
                    2     9231.51          1          0  
                    1     9594.11          1          0  
                    4     9906.83          1          0  
                         49819.47          1          1  
8 rows selected.  
```  
解释一下GROUPING的作用 :   
F1G=0表示这条输出的记录GROUPING(fact_1_id) AS f1g=0 也就是fact_1_id 非空.  
F2G=1表示这条输出的记录GROUPING(fact_2_id) AS f2g=1 也就是fact_2_id 是空值. (包括子分组中不包含fact_2_id列是的置空以及本身记录的空).  
GROUPING_ID 测试 :   
```  
The GROUPING_ID function provides an alternate and more compact way to identify subtotal rows. Passing the dimension columns as arguments, it returns a number indicating the GROUP BY level.  
SELECT fact_1_id,  
       fact_2_id,  
       SUM(sales_value) AS sales_value,  
       GROUPING_ID(fact_1_id, fact_2_id) AS grouping_id  
FROM   dimension_tab  
GROUP BY CUBE (fact_1_id, fact_2_id)  
ORDER BY fact_1_id, fact_2_id;  
 FACT_1_ID  FACT_2_ID SALES_VALUE GROUPING_ID  
---------- ---------- ----------- -----------  
         1          1     3899.53           0  
         1          2     4095.53           0  
         1          3     6115.73           0  
         1          4     5414.05           0  
         1          5     4964.47           0  
         1               24489.31           1  
         2          1     5694.58           0  
         2          2     5135.98           0  
         2          3     5456.83           0  
         2          4     4492.78           0  
         2          5     4549.99           0  
         2               25330.16           1  
                    1     9594.11           2  
                    2     9231.51           2  
                    3    11572.56           2  
                    4     9906.83           2  
                    5     9514.46           2  
                         49819.47           3  
18 rows selected.  
```  
解释一下GROUPING_ID :   
GROUPING_ID(fact_1_id, fact_2_id) AS grouping_id 和 CUBE (fact_1_id, fact_2_id) 对应, 指CUBE (fact_1_id, fact_2_id)中的subgroup id.   
本文开始的时候已经列出了CUBE的subgroup多少的计算方法. 这里总共两列放在CUBE中, 所以组就是2^2=4个. 因此我们看到grouping_id是0,1,2,3.   
更通俗的看下面 :   
```  
  (fact_1_id, fact_2_id) : grouping_id=0  
  (fact_1_id) : grouping_id=1  
  (fact_2_id) : grouping_id=2  
  () : grouping_id=3  
```  
GROUP_ID 测试 :   
```  
It's possible to write queries that return the duplicate subtotals, which can be a little confusing.   
The GROUP_ID function assigns the value "0" to the first set, and all subsequent sets get assigned a higher number.   
The following query forces duplicates to show the GROUP_ID function in action.  
SELECT fact_1_id,  
       fact_2_id,  
       SUM(sales_value) AS sales_value,  
       GROUPING_ID(fact_1_id, fact_2_id) AS grouping_id,  
       GROUP_ID() AS group_id  
FROM   dimension_tab  
GROUP BY GROUPING SETS(fact_1_id, CUBE (fact_1_id, fact_2_id))  
ORDER BY fact_1_id, fact_2_id;  
 FACT_1_ID  FACT_2_ID SALES_VALUE GROUPING_ID   GROUP_ID  
---------- ---------- ----------- ----------- ----------  
         1          1     3899.53           0          0  
         1          2     4095.53           0          0  
         1          3     6115.73           0          0  
         1          4     5414.05           0          0  
         1          5     4964.47           0          0  
         1               24489.31           1          0  
         1               24489.31           1          1  
         2          1     5694.58           0          0  
         2          2     5135.98           0          0  
         2          3     5456.83           0          0  
         2          4     4492.78           0          0  
         2          5     4549.99           0          0  
         2               25330.16           1          1  
         2               25330.16           1          0  
                    1     9594.11           2          0  
                    2     9231.51           2          0  
                    3    11572.56           2          0  
                    4     9906.83           2          0  
                    5     9514.46           2          0  
                         49819.47           3          0  
20 rows selected.  
```  
GROUP_ID 解释 :   
group_id是用来去重的, 什么重复呢, subgroup重复, 例如本例的  
```  
GROUP BY GROUPING SETS(fact_1_id, CUBE (fact_1_id, fact_2_id))  
```  
分解后如下 :   
```  
  1. (fact_1_id) :   
  2. CUBE (fact_1_id, fact_2_id) 再分解 :   
  (fact_1_id, fact_2_id)  
  (fact_1_id)  
  (fact_2_id)  
  ()  
```  
  所以(fact_1_id)重复了. 这个用group_id来区分.  
要去除subgroup的重复可以使用条件 : HAVING GROUP_ID() = 0  
```  
SELECT fact_1_id,  
       fact_2_id,  
       SUM(sales_value) AS sales_value,  
       GROUPING_ID(fact_1_id, fact_2_id) AS grouping_id,  
       GROUP_ID() AS group_id  
FROM   dimension_tab  
GROUP BY GROUPING SETS(fact_1_id, CUBE (fact_1_id, fact_2_id))  
HAVING GROUP_ID() = 0  
ORDER BY fact_1_id, fact_2_id;  
 FACT_1_ID  FACT_2_ID SALES_VALUE GROUPING_ID   GROUP_ID  
---------- ---------- ----------- ----------- ----------  
         1          1     3899.53           0          0  
         1          2     4095.53           0          0  
         1          3     6115.73           0          0  
         1          4     5414.05           0          0  
         1          5     4964.47           0          0  
         1               24489.31           1          0  
         2          1     5694.58           0          0  
         2          2     5135.98           0          0  
         2          3     5456.83           0          0  
         2          4     4492.78           0          0  
         2          5     4549.99           0          0  
         2               25330.16           1          0  
                    1     9594.11           2          0  
                    2     9231.51           2          0  
                    3    11572.56           2          0  
                    4     9906.83           2          0  
                    5     9514.46           2          0  
                         49819.47           3          0  
18 rows selected.  
```  
GROUPING SETS 测试 :   
```  
Calculating all possible subtotals in a cube, especially those with many dimensions, can be quite an intensive process.   
If you don't need all the subtotals, this can represent a considerable amount of wasted effort.   
The following cube with three dimensions gives 8 levels of subtotals (GROUPING_ID: 0-7)  