solution as initial state for the side search. At each iteration, ILS also
saves the best solution found. Unlike most other S-metaheuristics
(Hill Climbing, Random Walk, Metropolis Hasting and Simulated
Annealing, etc.), if the search follows a misleading path, ILS can
restore the best seen solution so far to restart from an healthy state.
5.2 Xyntia internals
Xyntia is built upon 3 components: the optimization problem we
aim to solve, the oracle which extracts the sampling information
from the protected code under analysis and the search heuristics.
Oracle. The oracle is defined by the sampling strategy which depicts
how the protected program must be sampled and how many sam-
ples are considered. As default, we consider that our oracle samples
100 inputs over the range [−50; 49]. Five are not randomly gen-
erated but equal interesting constant vectors ((cid:174)0, (cid:174)1, (cid:174)−1,
(cid:174)𝑚𝑎𝑥𝑠).
These choices arise from a systematic study of the different settings
to find the best design (see Section 5.4).
Optimization problem. The optimization problem is defined as
follow. The search space is the set of expressions expressible using
the Expr set of operators (see Table 2), and considers a unique
constant value 1. This grammar enables Xyntia to reach optimal
results while being as expressive as Syntia [7]. Besides, we consider
the objective function:
(cid:174)𝑚𝑖𝑛𝑠,

𝑖
𝑓(cid:174)𝑜 ∗((cid:174)𝑜 ) =
𝑙𝑜𝑔2(1 + |𝑜𝑖 − 𝑜∗
𝑖 |)
It computes the Log-arithmetic distance between synthesized ex-
pressions outputs ((cid:174)𝑜 ) and sampled ones ((cid:174)𝑜 ∗). The choice of the
grammar and of the objective function are respectively discussed
in Sections 5.3 and 5.4.
Search. Xyntia leverages Iterated Local Search (ILS) to minimize
our objective function and so to synthesize target expressions. We
present now how ILS is adapted to our context. ILS applies two
steps starting from a random terminal (constant value or variable):
• ILS reuses the best expression found so far to perturb it by
randomly selecting a node of the AST and replacing it by a
random terminal node. The resulting AST is kept even if the
distance increases and passed to the next step.
• Iterative Random Mutations: the side search (in our case Hill
Climbing) iteratively mutates the input expression until it
cannot improve anymore. We estimate that no more im-
provement can be done after 100 inconclusive mutations. A
mutation consists in replacing a randomly chosen node of
the abstract syntax tree (AST) by a leaf or an AST of depth
one (only one operator) – e.g. 1 + (−𝑎) ; (−𝑏) + (−𝑎). At
each mutation, it keeps the version of the AST minimizing
the distance function. During mutations, the best solution so
far is updated to be restored in the perturbation step. If a so-
lution nullifies the objective function, it is directly returned.
These two operations are iteratively performed until time is
out (by default 60s) or an expression mapping all I/O samples is
found. Furthermore, as Syntia applies Z3 simplifier to "clean up"
recovered expressions, we add a custom post-process expression
simplifier, applying simple rewrite rules until a fixpoint is reached.
It significantly improves the quality of the expressions while adding
no significant overhead (+2.6ms on average). Xyntia is implemented
in OCaml [23], within the BINSEC framework for binary-level
program analysis [15]. It comprises ≈9k lines of code.
5.3 Xyntia evaluation
We now evaluate Xyntia in depth and compare it to Syntia. As with
Syntia we answer the following questions:
RQ4 Are results stable across different runs?
RQ5 Is Xyntia robust, fast and does it infer simple and correct results?
RQ6 How is synthesis impacted by the set of operators size?
Configuration. For all our experiments, we default to locally opti-
mal Xyntia (XyntiaOpt) presented in Section 5.2. It learns expres-
sions over Expr, samples 100 inputs (95 randomly and 5 constant
vectors) and uses the Log-arithmetic distance as objective function.
Interestingly, all results reported here also hold (to a lesser extend
regarding efficiency) for other Xyntia configurations (Section 5.4),
especially these versions consistently beat Syntia.
RQ4. Over 15 runs Xyntia always finds all 500 expressions in B1
and between 1051 and 1061 in B2. Thus, Xyntia is very stable across
executions.
RQ5. Unlike Syntia, Xyntia performs very well on both B1 and B2
with a timeout of 60 s/expr. Fig. 4 reveals that it is still successful
for a timeout of 1 s/expr. (78% proven equivalence rate), where it
finds 2× more expressions than Syntia with a timeout of 600 s/expr.
We also observe such tendency over B1 and BP1 (see Section 8.2)
and for 12h timeout. On B1, Syntia reaches 41%, 74%, 88.2% and
97.6% success rate for respectively 1s, 60s, 600s and 12h timeout,
against 100% success rate for Xyntia in 1s. For BP1, Syntia finds
only 1/15 expressions with a 12h timeout against 12/15 for Xyntia
in 60s. From evaluation on B1 and B2, it appears that Syntia success
rate increases logarithmically over time. Thus, time budget needed
for Syntia to catch Xyntia is expected to be unrealistic.
In addition, Xyntia handles well expressions using up to 5 argu-
ments and all expression types (Table 4). Its mean quality is around
0.93, which is very good (objective is 1), and it rarely returns not
equivalent expressions – only between 1.3% and 4.9%. Thus, Xyntia
reaches high success and equivalence rate. It is fast, synthesizing most
expressions in ≤ 1𝑠, and it returns simple and correct results.
Xyntia Proven
Xyntia Optimistic
Syntia Proven
Syntia Optimistic
)
%
(
e
t
a
R
e
c
n
e
l
a
v
i
u
q
E
100
90
80
70
60
50
40
30
20
10
0
1
10
60
600
Timeout (s / expression)
Figure 4: Equivalence range of Syntia and Xyntia (XyntiaOpt)
depending on timeout (B2)
Session 10A: Crypto, Symbols and Obfuscation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2519Syntia
Xyntia
Succ. Rate
Equiv. Range
Mean Qual.
Succ. Rate
Equiv. Range
Mean Qual.
MBA
21.1%
Arith.
28.6%
Bool.
53.8%
53.0% 27.8 - 28.1% 20.3 - 20.8%
0.53
98.4%
97.8% 88.9 - 94.9% 85.1 - 90.0%
0.73
0.71
91.6%
0.61
96.5%
1.05
1.0
Table 4: Syntia & Xyntia (XyntiaOpt): results according to ex-
pression type (B2, timeout = 60 s)
RQ6. Xyntia by default synthesizes expressions over Expr while
Syntia infers expressions over Full. To compare their sensitivity to
search space and show that previous results are not due to search
space inconsistency, we run both tools over Full, Expr and Mba.
Experiments show that Xyntia reaches high equivalence rates for all
operators sets while Syntia results stay low. Still, Xyntia seems more
sensitive to the size of the set of operators than Syntia. Its proven
equivalence rate decreases from 90% (Expr) to 71% (Full) while
Syntia decreases only from 38.7% (Expr) to 33.7% (Full). Conversely,
as for Syntia, restricting to Mba benefits to Xyntia (proven equiv.
rate: 91%). Thus, like Syntia, Xyntia is sensitive to the size of the
operators set. Yet, Xyntia reaches high equivalence rates even on Full
while Syntia remains inefficient even on Mba.
Conclusion. Xyntia is a lot faster and more robust than Syntia. It
is also stable and returns simple expressions. Thus, Xyntia, unlike
Syntia, meets the requirements given in Section 3.3.
5.4 Optimal Xyntia and other S-Metaheuristics
Previous experiments consider the XyntiaOpt configuration of Xyn-
tia. It comes from a systematic evaluation of the design space. To
do so, we considered (1) different S-metaheuristics: Hill Climbing
(HC), Random Walk (RW), Simulated Annealing (SA), Metropolis
Hasting (MH) and Iterated Local Search (ILS); (2) different sampling
strategies; (3) different objective functions. This evaluation con-
firms that XyntiaOpt is locally optimal and that ILS, being able to
restore best expression seen after a number of unsuccessful muta-
tions, outperforms other S-metaheuristics (Table 5). Moreover, all
S-metaheuristics – except Hill Climbing – outperforms Syntia.
Table 5: Synthesis Equivalence Rate for different S-
metaheuristics (B2, XyntiaOpt, timeout = 60 s)
SA
MH
RW
HC
ILS
Equiv.
Range
62.3 - 63.4% 31.9 - 33.1% 90.6 - 94.2% 64.8 - 65.8% 57.7 - 58.5%
Conclusion. Principled and systematic evaluation of Xyntia design
space leads to the locally optimal XyntiaOpt configuration. It notably
shows that ILS outperforms other tested S-metaheuristics. Moreover,
all these S-metaheuristics – except Hill Climbing – outperform MCTS,
confirming that manipulating only terminal expressions is beneficial.
5.5 On the effectiveness of ILS over MCTS
We present in Fig. 5 the typical distance evolution along the search
process when using Xyntia. We can see that the distance follows
a step-wise progression, which is drastically different from the
case of Syntia and enumerative MCTS (Fig. 3). Hence, unlike them,
Xyntia is indeed guided by the distance function. Moreover, note
that Xyntia globally follows a positive trend i.e., it does not unlearn
previous work. Indeed, before each perturbation, the best expression
found from now is restored. Thus, if iterative mutations follows
a misleading path, the resulting solution is not kept and the best
solution is reused to be perturbed. Keeping the current best solution
is of first relevance as the search space is highly unstable and enables
Xyntia to be more reliable and less dependant of randomness.
e
c
n
a
t
s
i
d
c
i
m
h
t
i
r
a
g
o
L
1600
1400
1200
1000
800
600
400
200
0
Xyntia
0
500
1000
1500
2000
2500
3000
# Perturbations
Figure 5: Xyntia (XyntiaOpt) distance evolution (expression
successfully synthesized)
Conclusion. Unlike MCTS, which is almost enumerative in code
deobfuscation, ILS is well guided by the objective function and distance
evolution follows a positive trend. This is true as well for other S-
metaheuristics.
5.6 Limitations
Blackbox approaches must consider limited languages to be efficient.
This restricts their use to local contexts – e.g., analyzing sets of
code blocks rather than full modules.
Moreover, synthesis relies on two main steps, sampling and
learning, which both show weaknesses. Indeed, Xyntia and Syntia
randomly sample inputs to approximate the semantics of an ex-
pression. It then assumes that samples depict all behaviors of the
code under analysis. If this assumption is invalid then the learning
phase will miss some behaviors, returning partial results. As such,
blackbox deobfuscation is unsuitable to handle point functions.
Learning can itself be impacted by other factors. For instance,
semantically complex expressions are hard to infer. While they are
rare in local code, we show in Section 8 how to take advantage of
them to protect against blackbox attacks. A related problem are
expressions with unexpected constant values. They are hard to
handle as the grammar of Xyntia and Syntia only considers the
constant value 1. Thus, finding expressions with constant values
absent from the grammar requires to create them (e.g., encoding 3
as 1 + 1 + 1), which may be unlikely. A naive solution is to add to
the grammar additional constant values but it significantly impacts
efficiency.
Indeed, for 100 values ([0; 99]), the equivalence rate
is divided by 2 (resp., by 4 for 200 values). Still, Section 7 shows
that Xyntia can synthesize usual interesting constant values (unlike
Syntia).
5.7 Conclusion
Because of the high instability of the search space, Iterated Local
Search is much more appropriate than MCTS (and, to a lesser ex-
tent, than other S-metaheuristics) for blackbox code deobfuscation,
as it manipulates terminal expressions only and is able to restore
Session 10A: Crypto, Symbols and Obfuscation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2520d
e
c
n
a
h
n
E
#
500
450
400
350
300
250
200
150
100
50
0
Xyntia-MBA
Syntia-MBA
QSynth
CVC4-MBA
STOKE-synth
STOKE-opti