analysis to inspect if a security-checked critical variable is modified
(see §3.5), i.e., updated with other values or overwritten through
memory-related functions such as memcpy() and copy_from_user().
If a modification is found, LRSan also inspects if the security check
is re-enforced after the modification to the critical variable. LRSan
identifies cases without a recheck as LRC cases. LRSan’s bug re-
porting module filters out common false positives, and reports LRC
cases in a pretty format for manual confirmation. Next, we describe
the design of each component in detail.
3.2 Automated Security Check Identification
Given LLVM IR, the first step of LRSan is to identify security checks.
As defined in §2.2, a security check is a conditional statement (e.g.,
if statement) followed by two branches that satisfy two conditions:
(1) one branch always returns an error code in the end; (2) the other
branch must have a possibility of not returning any error code. At a
high level, LRSan identifies security checks as follows. LRSan first
collects all conditional statements (e.g., if statements). Then, LRSan
collects all error codes and constructs an error-code CFG (ECFG)
whose nodes are augmented with information on how they operate
on variables to be returned, e.g., assigning an error code to such
a variable. ECFG helps LRSan quickly figure out if an execution
path will return an error code. With the collected information and
ECFG, LRSan checks if a conditional statement is a security check
by analyzing whether it satisfies the two conditions required to
form a security check or not. A formal description of the work flow
Figure 7: A simplified example of constructing ECFG.
is shown in Algorithm 1. We now elaborate our design for security
check identification.
Constructing error-code CFG (ECFG). LRSan identifies security
checks by analyzing if a conditional statement satisfies the two
security check forming conditions. To facilitate such an analysis,
LRSan first constructs an ECFG. The motivation of building an
ECFG is that the analysis procedure requires frequent query on
whether an execution path (in the case that the return value is a
variable rather than a constant) will return an error code or not,
which requires an expensive data-flow analysis. LRSan thus first
summarizes return value–related operations for each node in the
CFG. The summary includes information such as if the node assigns
an error code to a to-be-returned variable. With such a summary,
the following analysis becomes efficient because the expensive
data-flow analysis can be avoided.
Specifically, LRSan employs a standard backward data-flow anal-
ysis starting from a return instruction to find nodes in the CFG that
operate return values. That is, LRSan identifies all nodes that assign
a value to a to-be-returned variable. Further, for each to-be-returned
variable in a node, LRSan marks the node as “Yes” if it assigns an
error code to the variable; otherwise, it marks the node as “No.”
After the construction, each node in ECFG contains a list of pairs
with the form .
Figure 7 shows an example of a function returning an error code
as a variable and how to construct the corresponding ECFG. In this
example, the to-be-returned variable is assigned with an error code
in nodes 2 and 5 . Thus, the corresponding nodes are marked as
“Yes.” By contrast, the to-be-returned value is assigned with 0 in
node 6 , so it is marked as “No.” All other nodes in the ECFG are
not marked because they do not decide any return value. Note that,
although uncommon, it is possible that a node modifies multiple
return values, and thus has multiple “Yes” or “No” marks.
Identifying security checks. With the ECFG, LRSan continues
the analysis to identify security checks. To achieve this, LRSan
needs to first collect possible execution paths starting from the
conditional statement to a return instruction. Based on the ECFG,
LRSan can quickly determine whether an execution path ends up re-
turning an error code or not. Collecting execution paths is straight-
forward by traversing the ECFG if the target program does not have
loops. For programs with loops, unrolling is necessary. To simplify
Kernel IRLRSanLacking-recheck casesSecurity-check identificationPre-processingCritical-variableidentificationCheck-use chain constructionModificationinferenceBug reporting  1: int func() {  2:     int val = 0;  3:  4:     if (cond1)  5:         val = ENO1;  6:     else if (cond2) {  7:         if (cond3)  8:             val = ENO2;  9:     }10:11:     return val;12: }cond1cond2return valcond3(a) An example(b) Marked ECFG of the code in (a)val = ENO1val = ENO2val = 0①②③④⑤⑥⑦PSet ← Collect_Paths_Starting_From_Edge (edдe, ECFG);
p_errno ← true;
for path ∈ PSet do
cond1 ← f alse; // Always return an ERRNO
cond2 ← f alse; // Possible to not return any ERRNO
for edдe ∈ Get_Outgoing_Edges (node) do
Algorithm 1: Identifying Security Checks
Input: The marked error-code CFG ECFG = (N , E)
Output: The set of identified security checks SCSet
1 SCSet ← ∅;
2 MSet ← Collect_Nodes_Assigning_Return_Value (ECFG);
3 N Set ← Collect_Nodes_With_Multiple_Outgoing_Edges (ECFG);
4 for node ∈ N Set do
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22 end
end
if p_errno then cond1 ← true ;
else cond2 ← true ;
end
if cond1 and cond2 then
SCSet ← SCSet{check };
check ← Extract_Check (node);
if not Path_Return_ERRNO (path, MSet) then
p_errno ← f alse; break;
end
end
the design, LRSan chooses to unroll loops only once because the
number of unrolling times typically does not affect return value.
For loops with multiple paths inside the loop body, LRSan unrolls
the loop multiple times to cover each of the paths with all possible
orders.
Algorithm 1 shows the details of how LRSan identifies security
checks. For each node that has multiple outgoing edges in ECFG,
LRSan iterates all outgoing edges to check whether the two condi-
tions of a security check are satisfied. To reason about whether an
error code is returned on a specific execution path starting from
an outgoing edge, LRSan only needs to check the last node that is
marked for the variable to be returned on this execution path. If
there is no such marked node in this path, it implies that no error
code will be returned.
Now, let us apply the above algorithm to the example shown in
Figure 7. Three nodes in the ECFG have two outgoing edges: 1 , 3 ,
and 4 , which respectively corresponds to the if statements at line
4, 6, and 7. For 1 , the path starting from the left branch always
returns an error code: 1 → 2 → 7 , as 2 is marked as “Yes.” For
the other branch, one path will not return any error code: 1 → 3
→ 6 → 7 , as 6 is marked as “No.” Therefore, cond1 is identified
as a security check. cond3 can also be identified as a security check
in the same way. By contrast, cond2 is not a security check because
both branches may not return an error code: 3 → 4 → 6 → 7
and 3 → 6 → 7 .
3.3 Recursive Critical Variable Inference
With the identified security check set (SCSet), LRSan then infers
critical variables associated with each security check SC ∈ SCSet.
return -EFAULT;
(hdr.size_out && hdr.size_out , where Iu is the first use of CV after SC, and
PSet is a set of execution paths that start from SC and end with
Iu. By constructing check-use chains, LRSan can delimit the actual
analysis scopes in detecting LRC bugs. This allows LRSan to use
a precise and expensive static analysis to detect LRC cases. To
construct such a check-use chain, LRSan firstly leverages a taint-
tracking analysis to find Iu and then traverses the CFG to collect
the set of execution paths that start from SC and end with Iu. The
set of execution paths is denoted by PSet.
The check-use chain construction shares the same static analysis
engine as the one used for security check identification (§3.2) and
critical variable identification (§3.3). Besides, LRSan employs alias
analysis in LLVM to catch implicit uses that use critical variables
through their aliases.
3.5 Modification Analysis
With a constructed check-use chain , the last
task of LRSan is to identify potential modifications to CV along
this check-use chain. If a modification is found and no recheck is
enforced, an LRC case is detected by LRSan.
Identifying modifications. Typically, there are two common
types of modifications to CV :
• The memory location of CV is rewritten with a new value
• The memory location of CV is modified by a memory-related
by a regular store instruction;
function such as memcpy() and copy_from_user().
To identify these modifications, LRSan leverages forward inter-
procedural data-flow analysis. LRSan traverses the CFG starting
from the SC specified in the check-use chain to find potential mod-
ifications. For each store instruction encountered during the CFG
traversal, LRSan checks whether the memory location used in the
store instruction is aliased to the memory location of CV or not. If
yes, this store is treated as a modification to CV . Similarly, for a
reachable memory-related function call, LRSan checks the alias re-
sults between the destination memory location of the function call
and the memory location of CV . If they are aliased, the memory-
related function call is also considered as a modification to CV .
Note that LRSan conservatively assumes modifications to external,
global, and heap objects, even if there is no explicit modification.
Missing a recheck. When a modification is found, LRSan fur-
ther analyzes the code to see whether a recheck is enforced. It is
necessary to do such an analysis because it is a false positive if a
recheck is enforced. We do find multiple cases in which a recheck is
enforced after modification. Existing double-fetch detection [41, 46]
does not consider recheck, leading to false positives. Specifically,
LRSan continues to traverse the CFG from the modification using
a breadth-first search to reason if the modified value is rechecked
by SC. Cases without such recheck are detected as LRC.
4 IMPLEMENTATION
We have implemented LRSan based on the LLVM compiler frame-
work (version 6.0.0). The implementation consists of two separated
LLVM passes (total about 3K lines of code). The first pass collects
and prepares the information required by the static analyses in
LRSan. It includes possible target functions of an indirect call, global
CFG, and alias analysis results in LLVM. The second pass, with the
information provided by the first pass, performs the static analyses
to detect LRC cases. Due to space limitation, the rest of this section
covers only important engineering issues we encountered and our
solutions.
Compiling OS kernels to LLVM IR. The Linux kernel is not fully
compilable under LLVM. We instead compile the Linux source code
module by module. A module is skipped if it cannot be compiled
successfully. The Linux source code is compiled with the “-g -O2”
options. The “-g” option is used to generate debugging information,
which is used to extract the source code location to facilitate the
manual investigation. The “-O2” option is the default optimization
level to compile the Linux kernel. We compiled the Linux kernel
with “allyesconfig”, which includes 16,599 modules. We successfully
generate LLVM IR for 16,593 modules. That is, only 6 modules were
not complied successfully.
Constructing a global call graph. LRSan relies on the CFG con-
structed on LLVM IR to perform the proposed static analyses. Given
that LRSan’s analyses are inter-procedural, a global call graph is
thus required. In our implementation, we do not statically link all IR
files. Instead, we adopt the iterative pass in KINT [43] to dynamic
build a global call graph. For indirect calls, we use a type-based
analysis [24, 38] to identify all potential targets of an indirect call.
Alias analysis. Our implementation queries the alias analysis re-
sults through the “AliasAnalysis” class in LLVM. This class provides
an interface between the clients of alias analysis information and
the implementations providing it. In LLVM, there are four possible
results for each alias query: “NoAlias”, “MayAlias”, “PartialAlias”,
and “MustAlias”, which are quite easy to understand literally. In
our initial implementation, we conservatively treated two mem-
ory locations as “not aliased” only if the query result is “NoAlias”.
However, the preliminary results show that massive false positives
can be produced due to the inaccuracy and the conservative pol-
icy adopted by the alias analysis in LLVM. We thus consider two
memory locations as aliased only if the query result is “PartialAlias”
or “MustAlias”. Otherwise, the two locations are considered as not
aliased. This significantly cuts down the number of false positives
and makes manual investigation more feasible.