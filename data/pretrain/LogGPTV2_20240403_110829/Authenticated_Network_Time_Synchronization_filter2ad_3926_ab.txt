type
—
Security
—
sym. key
no proof
pub. key
ﬂaws
(§. 2.3)
relies
on TLS
ProVerif
proof [32]
proof
tlsdate [3]
pub. key
NTS [31]
pub. key
ANTP
(Fig. 3)
pub. key
(Sec. 6)
Server
operations
Round
trips
—
1 hash
2
n pub. key,
1
n + 1 sym. key
2
n pub. key†
5
n + 7 sym. key†
3
n pub. key,
2
n + 2 sym. key
1
n pub. key,
6
n + 2 sym. key
1
1
4
4
stateful
4
3
Table 2: Comparison of time synchronization proto-
cols. Server operations per time synchronization in-
cludes public key decryptions, symmetric key encryp-
a
n + b de-
tions/decryptions, and hashes/KDFs/MACs.
notes a operations that can be amortized over n time
synchronizations plus b operations per time sync.
† tlsdate operation counts vary based on ciphersuite.
Details of our implementation and testing methodology,
as well as more results, appear in Section 4.
ANTP compares well with other authentication meth-
ods for NTP, as seen in Table 2. ANTP uses fewer amor-
tized public key operations compared to NTPv4 Autokey
and NTS and has fewer rounds. NTPv3 using symmet-
ric key operations is more lightweight, but is highly re-
stricted in that it only supports symmetric authentication
via pre-established symmetric keys, making it unsuitable
for deployment with billions of devices.
Because ANTP is designed-for-purpose, it is also more
USENIX Association  
25th USENIX Security Symposium  825
efﬁcient than applying general purpose security protocols
to NTP. For example, one might consider simply applying
TLS or DTLS to NTP packets to obtain authentication.
Unfortunately, TLS and DTLS do not achieve full state-
lessness as is desirable for high throughput applications
that need to resist denial of service attacks. TLS and
DTLS both require that the server maintain state during
the initial handshake (which requires 3 round trips) and
during session resumption handshakes (which requires 2
round trips). While the server can ofﬂoad state between
the initial handshake and the session resumption using
session tickets, there is no standardized mechanism to
do so during the handshakes. DTLS servers also must
maintain mappings between clients and sessions, as UDP
does not provide this functionality. ANTP avoids these
problems by having the server ofﬂoad state at every step.
ANTP is also much more efﬁcient in terms of communi-
cation size, as TLS/DTLS have a variety of extensions
that consume substantial bandwidth.
ANTP security. ANTP’s design is supported by a thor-
ough analysis of its cryptographic security using the prov-
able security paradigm. To do so, we extend existing
frameworks for key exchange and secure channels [5, 11]
to develop a novel framework that handles protocols
where time plays a central role. The adversary in our
security analysis is a network attacker capable of delet-
ing, reordering, editing, and creating messages between
parties. Since our model is about time synchronization,
parties in our model have local clocks, and the adver-
sary is given complete control over the initialization of
all clocks, as well as the ability to increment the time
of parties not involved in a protocol run. This allows
us to model the ability of an adversary to delay packet
transmission: this is particularly important in the case of
NTP, where delaying packets asymmetrically can cause
the client to synchronize to an inaccurate time. This dif-
fers from previous security frameworks that model time,
such as ones introduced by Schwenk [27] (which uses a
global time counter to model timestamps) and Basin et
al. [4] (where the adversary cannot inﬂuence the offset or
rate-of-change of the party clocks.)
We then show that ANTP achieves secure time syn-
chronization as deﬁned by our model, under standard as-
sumptions on the security of the cryptographic primitives
(key encapsulation mechanism, hash function, authenti-
cated encryption, message authentication code, and key
derivation function) used to construct the protocol.
2 Network Time Protocols
Here we review the two most commonly deployed time
synchronization protocols, NTP and SNTP, as well as a
recent proposal called Network Time Security [31].
2.1 The Network Time Protocol
The Network Time Protocol (NTP) was developed by
Mills in 1985 [15], and revised in 1988, 1989, 1992 and
2010 (NTPv1 [9], NTPv2 [16], NTPv3 [17] and NTPv4
[18] respectively). NTP is designed to synchronize the
clocks of machines directly connected to hardware clocks
(known as primary servers) to machines without hard-
ware clocks (known as secondary servers). NTP protects
against Byzantine traitors by querying multiple servers,
selecting a majority clique and updating the local clock
with the majority offset. This assumes the attacker can
only inﬂuence some minority of the queried servers.
2.2 The Simple Network Time Protocol
The Simple Network time Protocol (SNTP) is a variant
of NTP that uses an identical message format [17] but
only queries a single server when requesting time syn-
chronization. Windows and OS X by default synchro-
nize using a single time source (time.windows.com and
time.apple.com respectively). Our construction lends
itself well to SNTP, as it authenticates time samples from
a single server. Security analysis is also easier as we can
avoid the more complex sorting and ﬁltering algorithms of
NTP, and client and server behaviours are simpler. Note
that SNTP and NTP client request messages are the same.
SNTP has three distinct stages: (1) the creation and
transmission of req by the client; (2) the processing of
req by the server, and transmission of resp; and (3) the
processing of resp and clock update by the client. An
abstraction of the protocol behaviour can be found in
Figure 1, including the client’s clock update procedure.
Though the format of NTP packets is identical for both
client and server NTP messages, we use req to indicate a
NTP packet in client mode, and resp to indicate a NTP
packet in server mode, omitting packet content details.
1. The client creates an SNTP req packet, sets
transmit timestamp (t1) to Now() and sends the
message.1
2. The
server
creates
signalling Server mode.
originate timestamp
an SNTP resp packet
to the received req,
with all ﬁelds identical
server
The
but
to
the
value
sets
transmit timestamp from req.
The server
also sets receive timestamp (t2)
to Now()
immediately after
receipt of req,
and sets
transmit timestamp (t3) to Now() immediately
before sending the message to the client.
3. Upon receiving resp,
the client notes the cur-
t4.
rent
If resp.originate timestamp is not equal to
time from Now() and saves
it as
1Now() denotes a party reading its local clock’s current time.
826  25th USENIX Security Symposium 
USENIX Association
Server
req
resp
−→ t2 ← Now()
...
t3 ← Now()
←− resp ← t2(cid:28)t3
Client
t1 ← Now()
req ← t1
t4 ← Now()
RTT ← (t4 −t1)− (t3 −t2)
˜θ3 ← RTT/2
offset ← 1
2 (t2 +t3 −t1 −t4)
time ← Now() + offset
Figure 1: Simple Network Time Protocol (SNTP). Now()
denotes the procedure that outputs the local machine’s
current time. RTT denotes the total round-trip delay the
client observes and ˜θ3 denotes the approximation of the
propagation time from server to client. The time of the
server receiving req is denoted t2 and sending resp is t3.
Note that offset = t3 + ˜θ3 − t4, which we will use in our
correctness analysis of ANTP.
req.transmit timestamp, the client aborts the
protocol run. The client calculates the total round-
trip time RTT and the local clock offset offset as in
Figure 1.
(The rest of the ﬁelds in the NTP packets are irrele-
vant for calculating the local clock offset and correcting
the local clock for a single-source time synchronization
protocol. These extra ﬁelds in the NTP packet are used
primarily for ranking multiple distinct time sources.)
From this, we can compute a bound of the amount of
error that is introduced to the clock update procedure via
asymmetric packet delay when the packets are unmod-
iﬁed. Asymmetric packet delay is the scenario where
the propagation time from client to server is not equal
to the propagation time from server to client. Let θ1 be
the propagation time from client to server, θ2 the server
processing time and θ3 the propagation time from server
to client. θ3 is approximated in SNTP by ˜θ3 = RTT
2 , where
RTT = (t4 −t1)− (t3 −t2) =θ 1 + θ3.
The actual offset is offsetactual = t3 + θ3 − t4. The ap-
proximated offset is computed as offset = 1
2 (t2 + t3 −
t1 − t4). When θ1 = θ3, then offset = t3 + ˜θ3 − t4 and
offset = offsetactual. In the worst possible case, packet
delivery is instantaneous, and the entire roundtrip time
is asymmetric delay. The client approximates the off-
set as above, and thus the error introduced this way is
1
2|(θ1 − θ3)| ≤ RTT.
The error that a passive adversary with the ability to
delay packets can introduce does not exceed the RTT:
clients can abort the protocol run when RTT grows too
large, giving them some control over the worst-case error.
2.3 NTP Security and Other Related Work
In terms of security, early versions of NTP (NTP to
NTPv2) had no standardized authentication method.
NTPv3 symmetric key authentication. NTPv3 pre-
sented a method for authenticating time synchronization –
using pre-shared key symmetric cryptography. NTPv3’s
added additional extension ﬁelds to the NTP packet, con-
sisting of a 32-bit key identiﬁer, and a 64-bit crypto-
graphic checksum. The speciﬁcation of NTPv3 describes
the checksum as the encryption of the NTP packet with
DES, but notes that other algorithms could be negotiated.
The distribution of keys and negotiation of algorithms
was considered outside the scope of NTP.
NTPv4 Autokey public key authentication. NTPv4 in-
troduced a method for using public key cryptography for
authentication, known as the Autokey protocol. Autokey
is designed to prevent inaccurate time synchronization by
authenticating the server to the client, and verifying no
modiﬁcation of the packet has occurred in transit. Au-
tokey is designed to work over the top of authenticated
NTPv3. Autokey uses MD5 and a variety of Schnorr-
like [26] identiﬁcation schemes to prevent malicious at-
tacks, but as an analysis of Autokey by R¨ottger shows
[23], there are multiple weaknesses inherent in the Au-
tokey protocol, including use of small seed values (32 bits)
and allowing insecure identiﬁcation schemes to be negoti-
ated. The size of the seed allows a MITM adversary with
sufﬁcient computational power to generate all possible
seed values and use the cookie to authenticate adversarial-
chosen NTP packets. This weakness alone allows an
attacker in control of the network to break authentication
of time synchronization, thus NTP with the Autokey pro-
tocol is not a secure time synchronization protocol [30].
Mills describes his experiments on demonstrating reliabil-
ity and accuracy of network time synchronization using
NTPv2 implementations [19], but does not offer a formal
security analysis of NTP. Mills does show that honest
deployment of NTP in networks can offer time synchro-
nization accuracy to within a few tens of milliseconds
after only a few synchronizations. ANTP was originally
intended as a means to addressing the vulnerabilities in
the Autokey protocol, but with many changes to mini-
mize public key and symmetric key operations, message
bandwidth. While inspiration for ANTP is the Autokey
protocol, the design diverged signiﬁcantly enough to con-
sider it a separate protocol design.
Network Time Security draft-12. The Network Time
Security protocol (NTS) [31] is an IETF Internet-Draft
that uses public key infrastructure in order to secure time
synchronization protocols such as NTP and the Precision
Time Protocol (PTP) [1]. However, NTS is costly in
terms of server-side public key operations, is a four round-
trip protocol, requires clients to manage public/private
USENIX Association  
25th USENIX Security Symposium  827
key pairs and digital certiﬁcates, and does not have an