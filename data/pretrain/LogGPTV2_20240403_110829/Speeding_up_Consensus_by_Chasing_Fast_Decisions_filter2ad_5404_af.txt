(cid:14)
(cid:24)
(cid:16)
(cid:28)
(cid:12)
(cid:5)
(cid:40)(cid:35)(cid:35)
(cid:39)(cid:35)(cid:35)
(cid:38)(cid:35)(cid:35)
(cid:37)(cid:35)(cid:35)
(cid:36)(cid:35)(cid:35)
(cid:35)
(cid:6)(cid:29)(cid:22)(cid:28)(cid:20)(cid:32)(cid:9)(cid:12)(cid:30)(cid:25)(cid:27)(cid:32)(cid:4)(cid:10)
(cid:6)(cid:16)(cid:24)(cid:14)(cid:20)(cid:29)(cid:27)
(cid:6)(cid:29)(cid:22)(cid:28)(cid:20)(cid:32)(cid:9)(cid:12)(cid:30)(cid:25)(cid:27)(cid:32)(cid:4)(cid:7)
(cid:2)(cid:12)(cid:16)(cid:27)(cid:12)(cid:26)
(cid:11)(cid:20)(cid:26)(cid:18)(cid:20)(cid:24)(cid:20)(cid:12) (cid:8)(cid:19)(cid:20)(cid:25) (cid:3)(cid:26)(cid:12)(cid:24)(cid:21)(cid:17)(cid:29)(cid:26)(cid:28) (cid:4)(cid:26)(cid:16)(cid:22)(cid:12)(cid:24)(cid:15) (cid:6)(cid:29)(cid:23)(cid:13)(cid:12)(cid:20)
Fig. 7. Average latency for ordering commands of Multi-Paxos (with a close
and faraway leader), Mencius, and CAESAR. Batching is disabled.
The latency provided by the node in India is higher than
other nodes. Here CAESAR is 50% slower than EPaxos only
when conﬂicts are low, because CAESAR has to contact one
more faraway node (e.g., Virginia) to deliver fast.
Performances of Multi-Paxos and Mencius are reported
in Figure 7 because these competitors are oblivious to the
percentage of conﬂicting commands injected in the system.
CAESAR 0% has also been included for reference. Mencius’s
performance is similar across the nodes because it needs to col-
lect feedbacks from all consensus participants, and therefore
it performs as the slowest node and on average 60% slower
than CAESAR. The version of Multi-Paxos with the leader in
Mumbai (Multi-Paxos-IN) is not able to provide low latency
due to the delay that commands experience while waiting for
a response from the leader. On the other hand, if the leader is
placed in Ireland (Multi-Paxos-IR) the quorum can be reached
faster than the case of Multi-Paxos-IN, thus command latency
is signiﬁcantly lower. Compared with results in Figure 6,
Multi-Paxos-IR and Multi-Paxos-IN are, on average, 5% and
58
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:16 UTC from IEEE Xplore.  Restrictions apply. 
(cid:33)(cid:29)(cid:29)
(cid:32)(cid:29)(cid:29)
(cid:31)(cid:29)(cid:29)
(cid:30)(cid:29)(cid:29)
(cid:29)
(cid:28)
(cid:23)
(cid:19)
(cid:27)
(cid:1)
(cid:26)
(cid:10)
(cid:20)
(cid:12)
(cid:24)
(cid:8)
(cid:4)
(cid:34)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:29)
(cid:30)
(cid:29)
(cid:29)
(cid:34)
(cid:30)
(cid:29)
(cid:29)
(cid:29)
(cid:31)
(cid:7)(cid:16)(cid:22)(cid:14)(cid:16)(cid:20)(cid:16)(cid:8)
(cid:1)(cid:5)(cid:6)(cid:9)(cid:5)(cid:8)
(cid:2)(cid:4)(cid:5)(cid:10)(cid:7)(cid:9) (cid:3)(cid:11)(cid:4)(cid:5)(cid:10)(cid:7)(cid:9)
(cid:34)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:29)
(cid:30)
(cid:29)
(cid:29)
(cid:34)
(cid:30)
(cid:29)
(cid:29)
(cid:29)
(cid:31)
(cid:6)(cid:15)(cid:16)(cid:21)
(cid:34)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:34)
(cid:34)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:29)
(cid:30)
(cid:29)
(cid:29)
(cid:34)
(cid:30)
(cid:29)
(cid:29)
(cid:29)
(cid:31)
(cid:2)(cid:22)(cid:8)(cid:20)(cid:17)(cid:13)(cid:25)(cid:22)(cid:24)
(cid:29)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:29)
(cid:30)
(cid:29)
(cid:29)
(cid:34)
(cid:30)
(cid:29)
(cid:29)
(cid:29)
(cid:31)
(cid:3)(cid:22)(cid:12)(cid:18)(cid:8)(cid:20)(cid:11)
(cid:34)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:34)
(cid:29)
(cid:29)
(cid:29)
(cid:30)
(cid:29)
(cid:29)
(cid:34)
(cid:30)
(cid:29)
(cid:29)
(cid:29)
(cid:31)
(cid:5)(cid:25)(cid:19)(cid:9)(cid:8)(cid:16)
Fig. 8. Latency per node while varying the number of connected clients (5
– 2000). Network messages are not batched.
40% slower than CAESAR 100%, respectively.
Scalability of competitors is measured by loading the system
with more clients. Figure 8 shows the latency of CAESAR,
EPaxos, and M 2Paxos for each site using a workload with
10% conﬂicting commands. The x-axis indicates the total
number of connected clients. The complex delivery phase of
EPaxos, where it has to analyze the dependency graph before
executing every command, slows down its performance as the
load increases while CAESAR provides a steady latency and
reaches its saturation only when more than 1500 total clients
are connected. M 2Paxos stops scaling after 1000 connected
clients due to the impact of the forwarding mechanism.
(cid:2)(cid:6)(cid:8)(cid:19)(cid:14)(cid:16)
(cid:4)(cid:21)(cid:6)(cid:8)(cid:19)(cid:14)(cid:16)
(cid:4)(cid:18)(cid:12)(cid:17)(cid:11)(cid:20)(cid:6)(cid:8)(cid:19)(cid:14)(cid:16)(cid:20)(cid:3)(cid:5) (cid:4)(cid:10)(cid:13)(cid:9)(cid:11)(cid:18)(cid:16)
(cid:1)(cid:8)(cid:10)(cid:16)(cid:8)(cid:15)
(cid:4)(cid:18)(cid:12)(cid:17)(cid:11)(cid:20)(cid:6)(cid:8)(cid:19)(cid:14)(cid:16)(cid:20)(cid:3)(cid:7)
(cid:3)(cid:2)(cid:1)
(cid:5)(cid:2)(cid:1)
(cid:4)(cid:3)(cid:2)(cid:1)
(cid:6)(cid:3)(cid:2)(cid:1)
(cid:7)(cid:3)(cid:2)(cid:1)
(cid:4)(cid:3)(cid:3)(cid:2)(cid:1)
(cid:19)(cid:14)
(cid:18)(cid:14)
(cid:17)(cid:14)
(cid:16)(cid:14)
(cid:15)(cid:14)
(cid:14)
(cid:14)
(cid:15)(cid:14)(cid:14)
(cid:16)(cid:14)(cid:14)
(cid:17)(cid:14)(cid:14)
(cid:13)
(cid:8)
(cid:6)
(cid:9)
(cid:1)
(cid:1)
(cid:11)
(cid:14)
(cid:14)
(cid:14)
(cid:15)
(cid:12)
(cid:1)
(cid:9)
(cid:10)
(cid:6)
(cid:4)
(cid:3)
(cid:10)
(cid:5)
(cid:7)
(cid:4)
(cid:2)
(cid:13)
(cid:8)
(cid:6)
(cid:9)
(cid:1)
(cid:1)
(cid:11)
(cid:14)
(cid:14)
(cid:14)
(cid:15)
(cid:12)
(cid:1)
(cid:9)
(cid:10)
(cid:6)
(cid:4)
(cid:3)
(cid:10)
(cid:5)
(cid:7)
(cid:4)
(cid:18)(cid:14)(cid:14)(cid:2)
Fig. 9. Throughput by varying the percentage of conﬂicting commands. In
the top part of the plot batching is disabled, in the lower part it is enabled.
Figure 9 shows the total
throughput obtained by each
competitor. Performance of Multi-Paxos and Mencius is placed
under the 0% case. The upper part of the plot has network
batching disabled. Here the performance of CAESAR degrades
by only 17% when moving from no conﬂict
to 10% of
conﬂicting commands. EPaxos and M 2Paxos have already
lost 24% and 45% of their performance with respect
to
the no-conﬂict conﬁguration. The cases of 30% and 50%
still show improvement for CAESAR, but now the impact
of the wait condition to deliver fast is more evident, which
explains the gap in throughput from the case of 10% conﬂicts.
M 2Paxos is the system that behaves best when commands
are 100% conﬂicting. Here the impact of the forwarding
technique deployed when commands access an object owned
by a different node prevails over the ordering procedure of
EPaxos and CAESAR, which involves the exchange of a long
59
list of dependent commands over the network. Interestingly,
Multi-Paxos-IR performs as EPaxos 0%. That is because in
this setting and for both competitors, nodes in EU and US
can reach a quorum with a low latency, and both of them
suffer from the low performance of the Mumbai’s node. Also,
although they rely on different techniques to decide ordered
commands, in this setting the CPU cycles needed to handle
incoming messages are comparable.
In the bottom part of Figure 9, batching has been enabled.
Mencius’s implementation does not support batching thus
we omitted it. The trend is similar to the one observed
with batching disabled. The noticeable difference regards the
performance of EPaxos when the percentage of conﬂicts
increases. At 50% and 100% of conﬂicting commands, EPaxos
behaves better than other competitors because, although the
time needed for analyzing the conﬂict graph increases, it does
not deploy a wait condition that contributes to slow down
the ordering process if conﬂicts are excessive. In terms of
improvements, CAESAR sustains its high throughput up to
10% of conﬂicting commands by providing more than 320k
ordered commands per second, which is almost 3 times faster
than EPaxos. Multi-Paxos shows an expected behavior:
it
performs well under its optimal deployment, where the leader
can reach consensus fast, but
it degrades its performance
substantially if the leader moves to a faraway node.
(cid:4)(cid:3)(cid:3)(cid:2)(cid:1)
(cid:10)(cid:3)(cid:2)(cid:1)
(cid:9)(cid:3)(cid:2)(cid:1)
(cid:7)(cid:3)(cid:2)(cid:1)
(cid:5)(cid:3)(cid:2)(cid:1)
(cid:3)(cid:2)(cid:1)
(cid:1)