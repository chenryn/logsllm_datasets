Finally, 
Table 1 shows the measured 
execution 
times of 
and cloud scenarios. 
executed 
both in the cluster 
on a machine with 2 Intel Xeon 
and 4 GB RAM. As shown, the exe­
and 
the Opt controller 
The controller 
3.00GHz processors 
cution time depends on the target 
workload, 
ing scenarios. 
the LQN model solver and thus, using simpler 
techniques 
prediction 
time significantly. 
the results 
system configuration 
even for cloud comput­
time is consumed by 
could reduce the controller 
but is still reasonable 
Most of the execution 
Overall, 
indicate 
execution 
performance 
80 
0' 70 
 60 
8. 50 
'"; 40 
 30 
 20 
" 
g 10 
C 
0  '§ :r: 
0 
:r:  :r: 
V> 
of VMs. Due to 
small, and thus, 
is very small 
can still deal 
without 
intensity 
The workload 
after a failure 
reallocations 
is relatively 
tively. 
the gap between Static and LL approaches 
because a new configuration 
with the workload 
even outperforms 
this fact, the Static approach 
proach in some cases. Figure 5 illustrates 
(%) between the response 
(and reconfiguration) 
RUBIS-I. The workloads 
vary between 23 and 56 requests/sec 
ent points are not directly 
comparable. 
sults show that our approach 
degradation 
However, 
provides 
even when whole racks fail. 
for one set of emulation 
consistently 
at the different 
the LL ap­
points for 
emulation 
points 
the difference 
times before and after failure 
and thus, the differ­
the re­
graceful 
-'"  :::::  
" 
co 
8  '"  0.  <", 
oc  0.  0. 
0. 
1;; 
0  '§ 
S S 
:r: 
is 
:r:  :r: 
is 1;; 0 
:r:  :r: 
Failure 
Figure 
failure 
Resource 
5. Response 
and reconfiguration 
time change (%) after 
7 Related 
Work 
Figure 4 shows these scaled 
Web server system 
rates that our ex­
generated 
are replicated 
using workloads 
with two replicas 
are placed on machines 
setup can handle. 
for the two RUBiS applications 
get applications 
based on the 
Web traces from the 1998 World Cup site [2] and the traf­
fic traces of an HP customer's 
Internet 
[12] and scaled to the range of request 
perimental 
from 15:00 to 
workloads 
22:30. RUBiS-I uses the scaled World Cup workload 
pro­
profile. 
file and RUBiS-2 uses the scaled HP workload 
The 
two applications 
for each 
in the differ­
tier, and the replicas 
ent racks. Thus, a total of 12 VMs were deployed 
on the 
10 machines. 
the VMs host­
ing the Tomcat and MySQL replicas 
of the CPU capacity 
were allocated 
VMs hosting 
the same physical 
the Static strategy, 
tion of the VMs remains the same throughout 
ment, while the Opt and LL strategies 
and capacity 
allocation 
at the time of the failure. 
machine in the initial 
the placement 
40% of the CPU capacity. 
the Apache replicas 
and the VMs hosting 
configuration, 
and the capacity 
In the initial 
Thus, only the 
on 
For 
were allocated 
80% 
alloca­
the experi­
of the VMs based on the workload 
could be co-located 
adjust the location 
Apache replicas 
We emulate 
the failures 
on individual 
machines 
in a rack due to a 
or racks 
failure 
of all machines 
a correlated 
we pick a random location 
failure. 
(i.e., 
common cause such as power source or switch/router). 
each experiment, 
for the emulated 
time for a period of 5 minutes before the emulated 
and 5 minutes after the emulated 
tion. The same failure 
for each strategy, 
workload 
in the timeline 
We measure the mean response 
failure 
and reconfigura­
in the timeline 
is subject 
is emulated 
to the same 
that is, each strategy 
location 
failure 
For 
at the time of the failure. 
failure 
Across all the emulated 
these two applications, 
tion for our approach 
approaches 
the degradations 
the average 
scenarios 
performance 
and LL 
and across 
degrada­
was 9.5%, while for the Static 
were 46% and 47%, respec-
creates 
Dynamic creation 
of of new replicas 
For example, 
to account 
[23] uses regener­
for fail­
copies is 
in redun­
tools such as 
to account 
for reduction 
when the number of available 
Even commercial 
(HA) [26] allow a virtual 
ures has been used before. 
ation of new data objects 
dancy and the Google File System [14] similarly 
new file "chunks" 
reduced below a threshold. 
VMWare High Availability 
ma­
on a new ma­
chine on a failed host to be reinstantiated 
chine. However, 
becomes espe­
cially challenging 
tier application. 
of multitier 
performance 
tier applications, 
to combine performance 
with availability requirements 
failed 
when they are components 
Recent work on performance 
[25, 4, 9, 17]) address 
the 
on such multi­
our work is the first 
applications 
(e.g., 
impact of resource 
but to our knowledge 
components. 
the placement 
of multitier 
allocation 
of replicas 
modeling 
in a multi­
and dynamic regeneration 
of 
optimization 
applications 
between availability 
in dependability 
and performance 
is 
typically 
since increasing 
increases 
[10] and [24], both of which consider 
time. Examples of work that explicitly 
research 
(by using more redundancy) 
always present 
availability 
response 
this issue include 
the problem of when to invoke a (human) repair process 
defined 
of cost and availability 
to optimize 
policies" 
on the system. In both cases, the "optimal 
that 
(as a function 
specify 
system state) 
through solution 
Markov Decision 
when the repair was to be invoked 
models of the system. 
were computed 
process 
off-line 
address 
metrics 
various 
of 
of 
Finally, 
the combination 
of fault tolerance 
and timeli­
[20, 18]. Fault-tolerant 
research 
in systems 
has been tradition­
systems such as Mars [18] use static 
ness (hard or soft real-time) properties 
ally considered 
real-time 
of processing 
tem. The real-time 
scheduling 
tory of adding fault tolerance 
by either scheduling 
reserving 
community 
to real-time 
sys­
has a long his­
task execution 
tasks to ensure reliability 
slots in the schedule 
a task on multiple 
in the real-time 
processors 
or by 
in 
for repeated 
execution 
replication 
configuration. 
The tradeoff 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
505 
DSN 2010: lung et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:14:00 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
in the middle­
the often conflict­
and timeliness 
[16, 22]. However, 
the combination 
of 
such as CORBA 
[20, 1, 21]. Researchers 
have also addressed 
in platforms 
balancing 
case of a failure 
ware community 
fault tolerance 
and Java RMI, which requires 
ing requirements 
associated 
tributes 
admission 
based scheduling) 
grained 
mance goal of meeting the mean response 
for a collection 
different 
deadlines 
of applications 
from meeting the absolute 
for one application. 
thread and request 
used are very different 
VM provisioning 
with implementing 
the specific techniques 
priorities, 
from the course­
used in our work and the perfor­
(e.g., 
deadline 
(hard or soft) request 
a resource 
control, 
sharing 
the two at­
pool is 
time thresholds 
virtual 
machine replicati
on. In Proc. NSDI, pages 
chronous 
161-174,2008. 
[9]  I. 
Cunha, J. Almeida, V. Almeida, and M .  Santos. Self­
capacity 
adaptive 
vironments. In Proc. 1M, pages 129-138,2007. 
management 
for multi-tier 
en­
virtualized 
[10]  H. de Meer and K. S. Trivedi. 
Guarded  repair 
of dependable 
sys. Theoretical 
Compo Sci., 128:179-210, 1994. 
[11] J. Dean. Software engineering 
advice from building large­
scale  distributed 
ture. http://http://research
295-talk.pdf,
systems. Stanford 
CS295 class  lec­
.google.com/people/jeff/stanford-
2007. 
[12]  J. Dilley. 
Web server 
Rep. HPL-96-I60, 1996. 
workload 
charateri
zation. In HP Tech. 
[13] G. Franks, S .  Majumdar, 
J. Neilson, 
D. Petriu, 
J. Rolia, 
and 
Performance 
M. Woodside. 
systems. In Proc. Inti. Conf Software Quality, 
26,1996. 
analysis of distributed 
pages 15-
server 
[14] S .  Ghemawat, 
H. Gobioff, and S .-T. Leung. The Google file 
8 Conclusions 
system.  In 
Proc. SOSP, 2003. 
to 
while maximizing 
how virtual 
enhanced 
machine 
solutions 
high avail­
In this paper, we have examined 
can be used to provide 
dependability 
problem of ensuring 
performance 
technology 
the classic 
ability 
resources. 
machine failures, 
ponent redundancy 
smart component 
minimize 
ulation 
better availability 
approaches. 
machine cloning 
on a fixed amount of 
single 
We use component redundancy 
to tolerate 
to restore 
com­
machine failures 
occur, and 
based on queuing models to 
Our sim­
degradation. 
provides 
whenever 
placement 
showed that our proposed 
performance 
and maximum throughput 
the resulting 
approach 
virtual 
results 
than classical 
[15] J. R. Hamilton. 
An architecture 
Data Sys. Research, 
[16] J. He, M .  Hiltunen, M. Raj agopalan, 
Proc. Innovative 
pages 306-31 3 ,  2007. 
and R.  Schlichting. 
for modular data centers. 
In 
QoS customizati
Practice and Experience, 
(33) :295-320, 
2003. 
on in distributed 
object systems. Software­
[17] G. Jung, K. Joshi, M. Hiltunen, 
Generating 
consolida
23-32,2008. 
adaptation 
policies 
environmen
ted  server 
R. Schlichting, and C. Pu. 
for multi-tier 
applicati
ons in 
ts,. In Proc. ICAC, pages 
[18] H. Kopetz and W. Merker. The architecture 
of Mars. In 
Proc. FTCS, pages 274-279 ,1985. 
[19] P. L'Ecuyer, 
L. Meliani, 
and J. Vaucher. 
SSJ: a framework 
for stochastic 
Conf , pages 234-242, 2002. 
simulation in Java. In Proc. Winter Simul. 
References 
[20] A. Liestman 
and R. Campbell. A fault-tolerant 
scheduling 
problem. IEEE Trans. SE, SE-12(1 1) :1089-1095, 1986. 
[1] K. Ahn, J. Kim, and  S. Hong. Fault-tolerant 
real-time 
scheduling using passive replicas. In Proc. PRFTS, page 98, 
1997. 
[2] M .  Arlitt 
and T. Jin. Workload 
world cup web site. HP Tech. Rep. HPL-99-35, 
charaterization 
of the 1998 
1999. 
[3] P. Barham, B .  Dragovic, K. Fraser, 
S .  Hand, T. Harris, 
A.  Ho, R. Neugebauer, 
the art of virtuali
2003. 
I. Pratt, 
and A. Wareld. Xen  and 
zation. In Proc. SOSP, pages 164-177, 
[4] M .  Bennani and D. Manesce. 
Resource 
allocation 
for auto­
s. In 
performance model
nomic data centers 
Proc. ICAC, pages 217-228 ,  2005. 
using analytic 
[5] E. Cecchet, 
A. Chanda, S .  Elnikety, 
J. Marguerite, 
and 
Performance 
W. Zwaenepoel. 
architectures for 
Middleware
, 2003. 
generating 
dynamic web content. 
In Proc. 
[6]  S. 
Chen, K. Joshi, M. Hiltunen,  R. Schlicht
Models of 
ing, and 
Multitier 
Predictive 
W. Sanders. Gradient-based 
Systems. In Proc. PMCCS, 2009 
[7] C. Clark, K. Fraser, 
S.  Hand, 
C. Limpach, 
virtual 
machines. In Proc. NSDI, 2005. 
J.  G. Hansen, E. Jul, 
of 
[8] B .  Cully, G. Lefebvre, 
D. Meyer, M .  Feeley, 
N. Hutchin­
son, and A. Warfield. Remus: High availability 
via asyn-
[21] D. Mosse, R. Melhem, and S .  Ghosh. A nonpreemptive 
scheduler 
real-time 
its implementati
2003. 
with recovery 
from transient faults 
and 
on. IEEE Trans. SE, SE-29(8):752-767, 
[22] P. Narasimhan, T. Dumitras, A. Paulos, S .  Pertet, 
C. Re­
verte, J. Slember, 
real-time 
tion: Practice and Experience, 
and  D. Srivastava. 
corba. Concurrenc
fault-tolerant 
y and Computa­
17(12) :  1527-1545,2005. 
Regeneration 
and its Eden implementati
Noe, and A. Proudfoot. 
Mead: Support for 
of replicated 
on. In Proc. 
[23] C.  Pu,  J. 
objects:  A technique 
Int. Conf. 
on Data Engineering, 
pages 175-187, 1986. 
[24] K. G. Shin, C. M. Krishna, and Y.-H. Lee. Optimal 
dynamic 
of resources 
control 
SE, 15(10) :1188-1198, Oct 1989. 
in a distributed 
system. IEEE Trans. 
A. Tantawi .  An analytical 
vices and its applicati
291-302,2005. 
model for multi-tier internet 
ons. In Proc. SIGMETRICS, pages 
[26] VMWare.  Vmware  high 
availability 
(ha),  restart  your 
tual machine.  Accessed 
http://www. vmware
May 2009.  World 
.com/products/vi/vc/
ha.html. 
vir­
Wide Web. 
and 
ser­
comparison of middleware 
[25] B .  Urgaonkar, 
G. Pacifici, P. Shenoy, M. Spreitzer, 
I.  Pratt, 
and A. Warfield. Live migration 
[27]  C.  M. 
Woodside, 
E. Neron, E.  D.  S. 
Ho, and B .  Mondoux. 
server" 
An "active 
programs 
ware, pages 125-1 3 1 ,  
written 
1986. 
model for the performance 
of parallel 
using rendezvouz. 
1. Systems and Soft­
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
506 
DSN 2010: Jung et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:14:00 UTC from IEEE Xplore.  Restrictions apply.