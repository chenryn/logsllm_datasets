Specify the UUID base
Setup the address type
Register BLE GATT service
Reply peripheral pairing features
Reply central pairing features
Reply with an authentication key
Add a BLE GATT characteristic
Setup pairing parameters
Register BLE GATT service
Reply with a DH key
Setup pairing parameters
Table 1: Targeted SDK functions in our detection policies
(Note: functions w/ * are for TI, and otherwise for Nordic).
โข Memory to Register (or vice versa) dependence. This is when
the register value depends on certain memory location. For in-
stance, in ldr r2 [0x260c8], r2 loads the value by dereferenc-
ing memory location 0x260c8. Therefore, if r2 is in D, FirmXRay
records this instruction to s, and also adds 0x260c8 to D.
Finally, when a fixed point is reached where the slicer state re-
mains unchanged (e.g., D becomes empty), the algorithm adds s to S
and returns. Otherwise, the algorithm continues to jump to previous
blocks by first setting up a new context (i.e., creating new copies of
D and s) for each path, and then recursively invoking itself in each of
the previous block b in G. Ultimately, the algorithm produces S con-
taining a set of configuration value generation paths that eventually
generate the target values. Note that to prevent branch explosion,
we have limited the length of the configuration path of our static
analysis with a threshold approach as in other works (e.g., [55] [42]).
Step-II. Configuration value generation. Based on the extracted
configuration value generation paths, FirmXRay then statically ex-
ecutes each instruction in a forward order to generate the concrete
values of our targets. Specifically, FirmXRay first creates an exe-
cution context for each path, including the registers (e.g., r1-r12,
sp) and memory (e.g., RAM and stack). Next, it forward executes
each instruction in order and modifies the context accordingly (e.g.,
updating values in registers and memory) based on the instruction
semantics defined in the official documentation [9]. However, the
execution of a configuration path may have dependencies on other
paths (e.g., initialization of global variables), which indicates that
we must execute them in a correct order. As a result, FirmXRay
maintains a queue for all the configuration paths, and each executed
path will be removed from the queue. When FirmXRay encounters
a path that should be executed after others, it removes the path
from the head of the queue and pushes it to the end. If the queue
becomes empty, which means all the paths have been statically
executed, FirmXRay retrieves the concrete values of our targets
from the corresponding execution context and outputs the results.
Step-III. Vulnerability detection. When the configuration val-
ues are resolved, the final step is to identify the vulnerabilities
from them. Since the configurations are identified through SDK
function parameters, FirmXRay requires SDK-specific knowledge
to recognize the configuration semantics. In particular, for each
vendor, FirmXRay focuses on the SDK functions listed in the sec-
ond column of Table 1, and their descriptions and parameters of
our interest are also described in the table. Based on these SDK
functions, we further define three detection policies to detect the
vulnerabilities that lead to the attacks mentioned in ยง3.1.
(i) Identity tracking vulnerability detection. At a high level,
there are two types of identity that can be tracked: static MAC ad-
dress [27] and static UUIDs [63] [20]. Therefore, we have two cor-
responding policies. The first is through static MAC address iden-
tification by checking the MAC address types through APIs such
as SD_BLE_GAP_ADDR_SET for Nordic and GAP_ConfigDeviceAd
dr for TI. According to the BLE specification [16], the MAC ad-
dress can be configured as three types: (1) public address that
never changes, (2) random static address that may change only
when reboot, and (3) private address that change periodically
(e.g., every 15 minutes). Although a random static address may al-
ter after a device power cycle, it is still not resilient to tracking be-
cause (i) BLE devices seldom power off since they are supposed to
run for a long time due to the low energy cost (e.g., sensors), (ii) as
revealed in previous research [27], many random static addresses
remain unchanged even after reboot on some devices such as
fitness trackers. As a result, if the firmware uses public address
or random static address, it is vulnerable to identity tracking.
The second policy to detect identity tracking is to check
whether there are static UUIDs specified in the firmware. Simi-
larly, we target corresponding APIs that take static UUIDs as pa-
rameters to identify them, such as SD_BLE_GATTS_SERVICE_ADD
for Nordic and GATTServApp_RegisterService for TI.
(ii) Active MITM vulnerability detection. As mentioned in ยง3.1,
the insecure pairing method such as Just Works can lead to
active MITM attacks. Fundamentally, the pairing method is
negotiated when two devices exchange the pairing features.
Therefore, we focus on APIs that specify the pairing feature,
such as SD_BLE_GAP_SEC_PARAMS_REPLY and GAPBondMgr_Set
Parameter. If no MITM protection or no I/O capability is speci-
fied, the device has to use Just Works pairing. In addition, the cor-
rect implementation of the secure pairing method (e.g., passkey
entry and OOB) may require the invocation of other procedures,
such as exchanging an authentication key with the SD_BLE_GAP_
AUTH_KEY_REPLY API for Nordic. If the corresponding APIs are
not invoked, the pairing will be downgraded to Just Works.
The MITM vulnerability can also be revealed in the secu-
rity permissions of characteristics, which is the second layer
of protection against active MITM attacks. Note that for each
characteristic, there are three levels of security permissions:
no protection, encrypted read/write, and authenticated read-
/write [49]. For instance, a developer may specify authenticated
read and write to ensure that the characteristic can be read
and written only when the authentication is in place. Our de-
tection focuses on APIs that specify these permissions, such
as SD_BLE_GATTS_CHARACTERISTIC_ADD for Nordic and GATT
ServApp_RegisterService for TI.
(iii) Passive MITM vulnerability detection. Recall in ยง3.1, failed
to enforce the LESC pairing can lead to passive MITM attacks.
To detect this vulnerability, we check if the LESC configura-
tion is enabled using API GAPBondMgr_SetParameter for TI, or
whether the ECDH key exchange is invoked during pairing using
API SD_BLE_GAP_LESC_DHKEY_REPLY for Nordic.
Category
Wearable
Others
Sensor
Tag (Tracker)
Robot
Medical Devices
Bike Accessory
Car Accessory
Smart Light
Switch
Smart Home
Smart Eyeglasses
Thermometer
Smart Lock
Beacon
Firearm Accessory
Agricultural Equip.
Battery
Game Accessory
Keyboard
Mouse
Printer
Surf Board
Sports Accessory
Smart Toy
Smart Clothes
Sailing Accessory
Diving Accessory
Network Device
Camera
Alarm
Headphone
Sensor
Smart Lock
Smart Toy
Medical Devices
Others
Total
# F
204
76
67
58
41
41
41
25
21
20
20
19
16
15
13
11
10
9
9
7
6
6
6
4
4
3
3
3
3
3
2
2
19
2
2
1
1
793
138
22
51
41
21
21
35
21
19
11
18
7
13
9
12
5
10
9
9
5
6
2
6
4
4
2
2
1
3
3
2
1
19
2
2
1
1
538
Total
Statistics
Vulnerabilities
# D Avg. Size Median
Time (m)
(KB)
IT
AM
PM
# F
# D # F
# D # F
# D
Nordic-based Firmware
98.2
223.5
80.9
84.2
117.7
138.6
92.3
75.6
81.2
72.8
63.0
58.1
54.2
67.0
61.4
87.7
142.8
34.3
67.4
63.4
58.2
24.1
71.9
88.9
58.0
57.6
73.5
19.6
74.2
143.0
41.7
122.7
42.8
48.8
9.5
164.3
37.2
82.3
21.1
250.3
179.1
111.8
10.3
56.4
27.9
1.6
0.9
150.1
29.6
1.9
12.5
21.6
20.9
3.5
655.9
136.7
1.8
7.6
256.1
2.2
261.3
0.1
23.7
40.1
TI-based Firmware
0.2
0.1
0.1
0.1
0.2
21.9
132.9
46.3
47.8
70.2
76.7
102.7
204
76
67
58
41
41
41
21
20
20
20
19
16
15
13
11
5
9
9
7
6
6
6