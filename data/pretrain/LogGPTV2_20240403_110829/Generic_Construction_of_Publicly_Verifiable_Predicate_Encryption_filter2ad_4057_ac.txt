Hence,
ADVAP E ≥ |Pr(b
∗
= b) − 1
2
δ ≤ 2ADVAP E + ρ
| ≥ 1
2
(δ − ρ)
Hence, if APVPE has advantage δ to cheat successfully, then
APE can break attribute-hiding property for PE with non-
negligible probability. Thus since the PE is attribute-hiding,
we conclude that APVPE cannot succeed with non-negligible
probability.
4.
IMPROVED PUBLICLY VERIFIABLE PRED-
ICATE ENCRYPTION
In PVPE, the cloud has to send each pair of the decrypted
results di0 and di1 , and users have to check whether it is the
892satisﬁed record locally. It needs huge amount of communi-
cation and unnecessary calculation for users. To reduce the
communication overload and user’s calculation workload, we
improve the PVPE scheme using bloom ﬁlter in this section.
4.1 Deﬁnition
Deﬁnition 5. (An improved Publicly Veriﬁable Predicate
Encryption) A improved Publicly Veriﬁable Predicate En-
cryption (iPVPE) scheme comprises the following ﬁve prob-
abilistic polynomial time (P P T ) algorithms:
• (M SK, P K, H1, ..., Hk) ← Setup(1λ, n) : It takes as
input a security parameter (1λ) and total number of
predicates n, output the public parameter P K, a mas-
ter secret key M SK and k hash functions H1, ..., Hk.
• (CT, V K, BFt, BFf ) ← Enc(I, P K): It takes as input
an attribute set I, output the ciphertext set C, veriﬁ-
cation key V K and two bloom ﬁlters BFt, BFf .
• SKf ← KeyGen(f, M SK): It takes as input a predi-
cate f and M SK, output the secret key SKf .
• (rult, D) ← Dec(C, SKf , BFt, BFf ): It takes as input
ciphertexts set C, SKf and two bloom ﬁlters BFt, BFf ,
output the result set rult and D .
• {0, 1}/⊥ ← Verify(rult, d, BFt, BFf ): It takes as in-
put rult, D and two bloom ﬁlters BFt, BFf , output
{0, 1}/⊥.
4.2 Generic Construction
We describe an improved Publicly Veriﬁable Predicate En-
cryption (iPVPE) scheme, which uses PVPE = (PVPE.Setup,
PVPE.KeyGen, PVPE.Enc, PVPE.Dec, PVPE.Verify) deﬁned in
Section 3.2 and two bloom ﬁlters. The description of our
scheme in detail shows below.
• (M SK, P K, H1, ..., Hk) ← Setup(1λ, n) : Given the
total number of all possible predicates n, choose ran-
dom m ≥ nlg(1/E)lge and compute k = (ln2)(m/n).
Chooses k universal hash functions H1, ..., Hk, which
are used to construct a m-bit bloom ﬁlter. Given the
security parameter λ, this algorithm executes
(PVPE.mpk, PVPE.msk) ← PVPE.Setup(1λ).
It returns the public parameters as P K = (PVPE.mpk, H1,
..., Hk) and SK = PVPE.msk.
• (CT, V K, BFt, BFf ) ← Enc(I, pk):
1) Let the set of all possible predicates be I = {I1, I2, ..., In}.
For each Ii ∈ I, run
(ci, vki) ← PVPE.Enc(Ii, PVPE.pk)
3)Finally the algorithm outputs the ciphertext set CT =
{(ci0 , ci1 )|1 (cid:54) i (cid:54) n}, the verify key set V K = {(g(mi0 ),
g(mi1 ))|1 (cid:54) i (cid:54) n} for private and two bloom ﬁlters
BFt and BFf for public (Here we must keep V K pri-
vately and publish two bloom ﬁlter for veriﬁcation in-
stead).
• SKf ← KeyGen(f, M SK): Takes as input the masker
key M SK and a predicate f ∈ F. This algorithm
generates the secret key
PVPE.skf ← PVPE.KeyGen(f, sk).
Then output SKf =PVPE.skf .
• rult ← Dec(C, SKf , BFt, BFf ): Let rult be the result
set which is empty. For each ci ∈ C, compute
PVPE.σouti ← PVPE.Dec(ci, skf )
Parse σouti = (di0 , di1 ), let u = BFVerify({H1, ..., Hk},
BFT , di0 ) and v = BFVerify({H1, ..., Hk}, BFF , di1 ).
 0,
1,
⊥,
y =
u = 0 and v = 1,
u = 1 and v = 0,
otherwise.
If y = 1, add the number i into the result set rult. The
algorithm outputs the result rult and the computed
value set D = {(di0 , di1 )|1 (cid:54) i (cid:54) n}.
• {0, 1}/⊥ ← Verify(rult, d, BFt, BFf ): Take the result
rult, the computed value set D and two bloom ﬁlters
BFf and BFt. For each (di0 , di1 ∈ D) and deﬁne three
sets for verify rult: a is the set for satisﬁed predicate
(that is f (I) = 1); b is the set for cheating elements.
The algorithm computes the following:
v1 ← BFVerify({H1, ..., Hk}, BFf , di0 ).
v2 ← BFVerify({H1, ..., Hk}, BFf , di1 ).
Here, v1, v2 ∈ {0, 1} is the output of two bloom ﬁlters.
If v1 = 1 and v2 = 0, add the number i into the result
set a; if v1 and v2 is same, add the number i into the
result set b.
• Correctness: if b (cid:54)= null, means that there are a
cheating with high probability.
• Integrity: if rul (cid:54)= null and rul = b, means that
the rul is only a portion of truly result with high
probability.
• Creditability: if rul = null and b = null, means
that there are no satisﬁed predicate in cloud with
high probability.
4.3 Analysis
2) Generate two bloom ﬁlters. Parse each vki = (g(mi0 ),
g(mi1 ))(1 (cid:54) i (cid:54) n). Set V T = {g(mi0 )|1 (cid:54) i (cid:54) n},
and generate a bloom ﬁlter for V T :
BFt ← BFGen({H1, H2, ..., Hk}, V T ).
Also, set V F = {g(mi1|1 (cid:54) i (cid:54) n}, generate a bloom
Filter for V F :
BFf ← BFGen({H1, H2, ..., Hk}, V F ).
Theorem 2. If the false positive rates of the bloom ﬁlters
BFt and BFf are both p, the probability that successfully
veriﬁes the cheating is 1 + p2 − p.
Theorem 3. If the number of ciphertexts is n, the max
false positive rate is , each m-bit bloom ﬁlter needs at least
(cid:100)n log2 e · log2(1/)(cid:101) bits.
The proofs of Theorem 2 and 3 will be shown in the full
version.
8935. CONCLUSIONS
In this paper, we propose a generic construction of pub-
licly veriﬁable predicate encryption called PVPE which is se-
cure under selective-attribute security model. To reduce the
communication and computation overhead, we further pro-
pose an improved publicly veriﬁable predicate encryption
called iPVPE which can successfully detect cloud server’s
cheating with high probability. To evaluate the performance
of our scheme, we shall implement it in cloud environment
in the future.
6. ACKNOWLEDGMENTS
This work is supported by National High Technology Re-
search and Development Program of China (No. 2015AA016008),
National Natural Science Foundation of China (No. 61402136,
61401176, 61472091), Natural Science Foundation of Guang-
dong Province, China (No. 2014A030313697, 2014A030310205),
and International Exchange and Cooperation Foundation
of Shenzhen(No. GJHZ20140422173959303),Public Service
Platform of Mobile Internet Application Security Industry of
Shenzhen Development and Reform Commission (No. [2012]900),
Guangdong Provincial Key Laboratory of High Performance
Computing (No.
[2013]82)), Distinguished Young Schol-
ars Fund of Department of Education, Guangdong Province
(No. Yq2013126), Natural Science Foundation of Guang-
dong Province for Distinguished Young Scholars (No. 2014A-
030306020), NSFC/RGC Joint Research Scheme (N HKU
729/13).
7. REFERENCES
[1] M. Abdalla, M. Bellare, and D. Catalano. Searchable
encryption revisited: Consistency properties, relation
to anonymous ibe, and extensions. Advances in
Cryptology-CRYPTO 2005, 3621:205–222, 2005.
[2] R. Agrawal, J. Kiernan, R. Srikant, and Y. Xu.
Order-preserving encryption for numeric data. In
Proceedings of the 2004 ACM SIGMOD international
conference on Management of data, pages 563–574,
2004.
[3] M. R. B. Parno and V. Vaikuntanathan. How to
delegate and verify in public: Veriﬁable computation
from attribute-based encryption. Theory of
Cryptography, 7194.
[4] S. Benabbas, R. Gennaro, and Y. Vahlis. Veriﬁable
delegation of computation over large datasets.
Advances in Cryptology (CRYPTO’11), 6841.
[10] C. Curino, E. P. C. Jones, R. A. Popa, N. Malviya,
E. Wu, S. Madden, H. Balakrishnan, and N. Z.
Relational. cloud: A database-as-a-service for the
cloud. 2011.
[11] D. Fiore, R. Gennaro, and V. Pastro. Eﬃciently
veriﬁable computation on encrypted data. 2014 ACM
SIGSAC Conference on Computer and
Communications Security (CCS’14 ), pages 784–855,
2014.
[12] R. Gennaro, C. Gentry, and B. Parno. Non-interactive
veriﬁable computing: Outsourcing computation to
untrusted workers. Advances in
Cryptology(CRYPTO’10), 6223.
[13] S. Gorbunov, V. Vaikuntanathan, and H. Wee.
Predicate encryption for circuits from lwe. Theory of
cryptography, page 29, 2015.
[14] V. Goyal, O. Pandey, and A. Sahai. Attribute-based
encryption for ﬁne-grained access control of encrypted
data. the 13th ACM conference on Computer and
communications security (CCS’06), pages 89–98, 2006.
[15] H. Hacigumus, B. R. Iyer, C. Li, and S. Mehrotra.
Executing sql over encrypted data in the database
service-provider model. In Proceedings of the 2002
ACM SIGMOD international conference on
Management of data, pages 216–227, 2002.
[16] S. Kamara and K. Lauter. Cryptographic cloud
storage. Financial Cryptography and Data Security,
pages 136–149, 2010.
[17] J. Katz, A. Sahai, and B. Waters. Predicate
encryption supporting disjunctions, polynomial
equations, and inner products. Advances in
Cryptology-EUROCRYPT 2008, 4965.
[18] J. Kilian. Improved eﬃcient arguments. Advances in
Cryptology (CRyPTO’95), 963.
[19] P. Li, H. Xu, and S. Guo. Public veriﬁcation of
outsourced computation of polynomial functions.
Trust, Security and Privacy in Computing and
Communications (TrustCom), pages 776–780, 2013.
[20] B. Parno, J. Howell, and C. G. Pinocchio. Nearly
practical veriﬁable computation. 2013 IEEE
Symposium on Security and Privacy(SP), pages
238–252, 2013.
[21] E. Shi, J. Bethencourt, and T. Chan.
Multi-dimensional range query over encrypted data.
IEEE Symposium on Security and Privacy (SP’07),
pages 350–364, 2007.
[5] J. Bethencourt, A. Sahai, and B. Waters.
[22] D. Song, D. Wagner, and A. Perrig. Practical
Ciphertext-policy attribute-based encryption. IEEE
Symposium on Security and Privacy (SP’07), pages
312–334, 2007.
[6] A. Boldyreva, N. Chenette, Y. Lee, and A. O’Neill.
Order-preserving symmetric encryption. Advances in
Cryptology-EUROCRYPT 2009, pages 224–241, 2009.
[7] D. Boneh, G. D. Crescenzo, and R. Ostrovsky. Public
key encryption with keyword search. Advances in
Cryptology-Eurocrypt 2004, 3017.
[8] D. Boneh and M. Franklin. Identity-based encryption
from the weil pairing. Advances in
Cryptology(CRYPTO’01), 2139.
[9] D. Boneh and B. Waters. Conjunctive, subset, and
range queries on encrypted data. Theory of
cryptography, 4392.
techniques for searches on encrypted data. Proceedings
of the 2000 IEEE symposium on Security and Privacy,
2000.
[23] B. Zhu, K. Ren, and Peksrand. Providing predicate
privacy in public-key encryption with keyword search.
2011 IEEE International Conference on
Communications (ICC), pages 1–6, 2011.
894