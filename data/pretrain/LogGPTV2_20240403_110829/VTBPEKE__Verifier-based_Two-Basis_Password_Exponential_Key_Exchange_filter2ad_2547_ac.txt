e(X, R(cid:48)) = e(f x, Y (cid:48) 1
e(Y, S(cid:48)) = e(gy, Y (cid:48) 1
a ) = e(f
b ) = e(g
1
1
a , Y (cid:48)x) = e(h, Y (cid:48)x) = e(hx, Y (cid:48))
b , Y (cid:48)y) = e(h, Y (cid:48)y) = e(hy, Y (cid:48)).
Then, we have e(X, R(cid:48)) √ó e(Y, S(cid:48)) = e(hx+y, Y (cid:48)), which is thus e(Z, Y (cid:48)) if and only if the DLin
instance is a linear one. Then the algorithm outputs b(cid:48) = 1 in the positive case, and b(cid:48) = 0 in
the negative case. Then, Pr[b(cid:48) = b] is equal to
Pr[b(cid:48) = b|test] √ó Pr[test] + Pr[b(cid:48) = b|¬¨test] √ó Pr[¬¨test]
= Pr[test] +
√ó (1 ‚àí Pr[test]) =
2
and Pr[test] = Succsdh(A), while Advdlin(t) ‚â• 2 √ó Pr[b(cid:48) = b] ‚àí 1.
1
2
Pr[test]
1
2
+
(cid:117)(cid:116)
As a consequence, the SDH assumption is reasonable in pairing-friendly settings, and we now
analyze it in the generic group model, which validates it on classical elliptic curves.
Intractability of the SDH Assumption in the Generic Model. We can also directly
study the SDH assumption in the generic group model [49], where the adversary is given the
representation of X, that is a generator, g = X a and h = X b. Only group operations are possible,
which lead to elements of the form X P (a,b), where P ‚àà Zp[A, B] is a polynomial of total degree
1, in the two variables A and B. We identify X with the constant polynomial P0 = 1, g with
the polynomial P1 = A, and h with the polynomial P2 = B. For a group operation (the product
between two elements), we simply generate the new polynomial (the sum of the polynomials
to which the two elements were identiÔ¨Åed). If the polynomial is a new one, a new random
representation is given as a result to the group operation. Otherwise, the same representation
as before is sent.
This simulation of group operations is perfectly indistinguishable from the real execution
unless two polynomials are distinct while their evaluations in (a, b) are the same: at most q + 3
polynomials are involved, where q is the number of group operations, and thus at most (q +
3)(q + 4)/2 diÔ¨Äerences, for which the probability to evaluate to 0 on a random pair (a, b) is 1/p.
Hence, the simulation is perfect but with probability at most (q + 3)(q + 4)/2p.
Except in the bad above cases, let us evaluate the probability the adversary outputs a valid
tuple (Y, R, S), where Y is identiÔ¨Åed to the polynomial Œ± + Œ≤A + Œ≥B, R to the polynomial
Œ±1 + Œ≤1A + Œ≥1B, and S to the polynomial Œ±2 + Œ≤2A + Œ≥2B. This tuple is valid Y = Ra = Sb,
which traduces to Œ± + Œ≤A + Œ≥B = Œ±1A + Œ≤1A2 + Œ≥1AB = Œ±2B + Œ≤2AB + Œ≥2B2. This implies
Œ± = Œ≤ = Œ≥ = Œ±1 = Œ≤1 = Œ≥1 = Œ±2 = Œ≤2 = Œ≥2 = 0, and thus Y = 1, which is not allowed. So the
probability to break the SDH assumption with a generic attack is bounded by (q + 3)(q + 4)/2p
after q group operations. This can be upper-bounded by q2/2p + 10/p.
Note that using the same kind of argument, the probability to break the CDH assumption
with a generic attack is bounded by (q + 2)(q + 3)/2p after q group operations. This can be
upper-bounded by q2/2p + 6/p.
Gap Problems. In the security analysis of the forward-secrecy, the simulator will need a DDH
oracle. The two above problems will then become gap problems, where the algorithm has to Ô¨Ånd
the same outputs but with the additional access to the DDH oracle, hence the GDH and the
GSDH problems. We will denote Succq‚àígdh(t) and Succq‚àígsdh(t) the best success probabilities an
adversary can get against the CDH and the SDH problems, respectively, within time t and with
at most q DDH-oracle queries. In the generic model, the complexities of the attacks remain the
same since decisional oracles do not help to solve computational problems.
9
4.2 Security Results for TBPEKE
In Sections 6.2 and 6.3, we provide the security result and the full proof of the veriÔ¨Åer-based
protocol, in the Real-or-Random security model, which is even stronger than what is actually
required for the TBPEKE since we allow the adversary to choose the salt s. We thus postpone
the security analysis to the veriÔ¨Åer-based protocol.
5 VTBPEKE: VeriÔ¨Åer-based TBPEKE Protocol
5.1 Password Hashing Scheme
In [14], Benhamouda and Pointcheval proposed a methodology with a password hashing scheme,
which deÔ¨Ånes a pre-hash value P (from the secret password pw ) and a hash value V (the veriÔ¨Åer,
from both the secret password pw and the public salt s) which can be veriÔ¨Åed from the pre-hash
value, the salt, and an additional trapdoor. This is a complex mechanism which is motivated by
a one-round protocol, and thus when the client does not need to know the salt when he sends
his (Ô¨Årst) Ô¨Çow. Kiefer and Manulis [39] later extended this deÔ¨Ånition requiring the salt from the
beginning for the client, which implies a pre-Ô¨Çow from the server, in order to send the salt to
the user, or a deterministic salt that can be known by the client. This will not be a problem in
our case if the client can initiate the proof of knowledge of the password without knowing the
salt. We thus use this variant.
We Ô¨Årst recall the naive password hashing scheme from [14], just to explain the idea. With
a hash function H onto {0, 1}2k and a salt s ‚àà {0, 1}2k, the veriÔ¨Åer is V = H(s, pw ) while the
pre-hash value is P = pw . It has been proven, when the password is not too large, which means
pw ‚àà D ‚äÜ {0, 1}n and n < k, where k is the security parameter, that the following properties
hold.
‚Äì Second pre-image resistance, which says that only one password should match a given veriÔ¨Åer
V and a salt s: For any password pw ‚àà {0, 1}n and any salt s, the probability there exists
another password pw(cid:48) ‚àà {0, 1}n such that H(s, pw ) = H(s, pw(cid:48)) is less than 2n/22k ‚â§ 1/2k,
since H has values in {0, 1}2k, so the second pre-image resistance statistically holds.
‚Äì Entropy preservation, which says that for any s, the distribution of V has the same min-
entropy Œ≤ as pw : If the adversary makes qH queries to the hash function, the probability of a
collision is less than q2
H /22k, in the random oracle model. Let us now suppose that there are
no collisions. We denote by s the salt and by H the hash value returned by the adversary,
as its guess for H(s, pw ), while pw R‚Üê D. Two situations appear:
‚Ä¢ either H is not an answer to any pair (s, x) asked by the adversary to H. Then, either
(s, pw ) has been asked by the adversary to the random oracle, in which case H(s, pw ) (cid:54)=
H, or (s, pw ) has never been asked to the random oracle, and so H(s, pw ) is a random
string in {0, 1}2k and is equal to H with probability 1/22k;
‚Ä¢ or H is the answer to H(s, x). Then, the probability that pw = x, is at most 2‚àíŒ≤, and
if pw (cid:54)= x, the probability H(s, pw ) = H is at most 1/22k, as above.
Therefore, one can guess V with probability bounded by 2‚àíŒ≤ + (q2
‚Äì Tight one-wayness, which is the most important notion, since it says that extracting just
one password P = pw from a huge list of pairs (s,V) needs a computational time linear in
2Œ≤, where Œ≤ is the min-entropy of the distribution D of the passwords: First, the probability
that two salts are equal is less than n2
s/22k (where ns is the number of salts)1. When there
is no collision, each query to H enables to check at most one password for only one salt. So
s √ó 2‚àí2k, since each
the probability to extract pw from V and s is bounded by qH √ó 2‚àíŒ≤ + n2
password appears with probability at most 2‚àíŒ≤.
H + 1) √ó 2‚àí2k.
Unfortunately, with this password hashing scheme, one cannot (eÔ¨Éciently) prove the knowledge
of P that leads to V from s.
1 if the salt is the pair server-user identities, this probability is 0, whatever the length of the salt is.
B s,V where P ‚Üê Hp(s, pw ) and V ‚Üê V P
Global parameters: G of prime order p, U, V R‚Üê G, Hp a hash function onto Zp, and H onto {0, 1}k
A pw
10
Œ± R‚Üê Z‚àó
accept ‚Üê false
p, R ‚Üê V Œ±, R(cid:48) ‚Üê H(11(cid:107)R)
P ‚Üê Hp(s, pw ),V ‚Üê V P
p, X ‚Üê gx, Z ‚Üê Y x
œÅ ‚Üê Œ± + Œµ ¬∑ P mod p, œÉ ‚Üê Eek (œÅ)
accept ‚Üê true
g ‚Üê U ¬∑ V, x R‚Üê Z‚àó
(cid:48)
A(cid:107)R
s, Œµ, Y

accept ‚Üê false
- g ‚Üê U ¬∑ V, y R‚Üê Z‚àó
p, Y ‚Üê gy
Œµ R‚Üê {0, 1}k
X, œÉ - Z ‚Üê X y, œÅ ‚Üê Dek (œÉ)
R ‚Üê V œÅV‚àíŒµ, R(cid:48) ?= H(11(cid:107)R)
accept ‚Üê true
ek ‚Üê H(01(cid:107)A(cid:107)B(cid:107)g(cid:107)X(cid:107)Y (cid:107)Z(cid:107)R(cid:48)(cid:107)s(cid:107)Œµ)
sk ‚Üê H(00(cid:107)A(cid:107)B(cid:107)g(cid:107)X(cid:107)Y (cid:107)Z(cid:107)R(cid:48)(cid:107)s(cid:107)Œµ(cid:107)œÉ)
Figure 4. VeriÔ¨Åer-based Two-Basis Password Exponential Key Exchange
5.2 Our Password Hashing Scheme
We thus deÔ¨Åne another password hashing scheme, with a hash function Hp onto Zp and a salt
s ‚àà {0, 1}2k, the pre-hash is P = Hp(s, pw ), while the veriÔ¨Åer is V = hP , where h is a random
generator in G:
‚Äì Second pre-image resistance: as above, since the exponent is an injection, a collision on V
‚Äì Entropy preservation: again, because of the injectivity of the exponentiation, one can guess
is a collision on P = Hp(s, pw ) which happens with probability less than 2n/p ‚â§ 1/2k.
V with probability bounded by 2‚àíŒ≤ + (q2
P from a huge list of pairs (s,V) is bounded by qH √ó 2‚àíŒ≤ + n2
‚Äì Tight one-wayness: unless one can solve faster the DL problem, the probability to get one
H + 1)/p.
In addition, one can eÔ¨Éciently prove the knowledge of P that leads to V, using a Schnorr-like
proof of knowledge [44].
s/p.
5.3 Description of VTBPEKE
The idea of the veriÔ¨Åer-based version our TBPEKE is to start from a secret password pw known
to the client only, and a public and common salt s, but not assumed to be remembered by the
client. Hence, once s is known by the client, he can compute the veriÔ¨Åer V = V Hp(s,pw ) that has
been stored by the server: this is the common secret used by the client and the server to run our
previous TBPEKE, with an additional proof of knowledge of P = Hp(s, pw ) by the client, using a
Schnorr-like proof of knowledge [44], with the Ô¨Ånal answer encrypted under an ephemeral secret
key derived from the TBPEKE Ô¨Ånal key. The resulting protocol is described on Figure 4.
We stress that pw is the only value known by the client (as well as the global parameters
of the system, as G, U, V , and Hp,H which are hard-coded in the software). The client-server
speciÔ¨Åc salt s is not required to be known in advance by the client, but just sent to him by the
server. Indeed, the server stores, for each client, the salt s and the veriÔ¨Åer V. Once the client
knows s, he can also compute V, and they can both run the TBPEKE on this common value.
Note that an adversary can send a wrong salt, but this does not alter the security of the
protocol, as shown below.
6 Security Analysis of VTBPEKE
6.1 Discussions
The intuition behind this protocol is
11
‚Äì Ô¨Årst, the basic TBPEKE with V as common password does not leak any information about
V against a passive adversary;
‚Äì an additional proof of knowledge of P, to prevent an attacker, after compromised the server,
from cheating the server by impersonating the client via using V without knowing P and
so the password pw . This is a Schnorr-like proof which consists of a random hash R(cid:48) and a
random challenge Œµ together with a ciphertext œÉ under the indistinguishable key ek . This
way, it does not leak any information about V either;
‚Äì an adversary trying to impersonate the server will have to guess V to have a chance to learn
something, while an adversary trying to impersonate the client will have to guess pw or P,
because of the proof of knowledge.
About the additional encryption œÉ ‚Üê Eek (œÅ), one might wonder if this is required or not. Let us
assume we let the client send œÅ in clear, then this value would satisfy R(cid:48) = H(11(cid:107)V œÅV ‚àíPŒµ), which
would lead to an oÔ¨Ä-line dictionary attack for a passive adversary. However, we additionally have
to prove this encryption is enough for the security.
6.2 Forward-Secrecy & VeriÔ¨Åer-Based
Theorem 2. Under the GDH and GSDH assumptions, the VTBPEKE (see Figure 4) is a forward-
secure VPAKE: the best advantage an adversary can get in the Real-or-Random security game is
bounded by
+ q2P √ó Succ2qH‚àígsdh(t) + Succ2qH‚àígdh(t)
Adv(A) ‚â§ qs
N
q2P + q2
S
+
+ qS ¬∑ AdvindE (t),
p
where qS = qs + qe is the global number of sessions (qe for the passive sessions and qs for the
active sessions), qH is the number of queries to H and qP is the number of queries to Hp.
Since both the problems GDH and GSDH are hard in the generic group model, with the best
attacks leading to a success probability bounded by q2/2p + 10/p and q2/2p + 6/p respectively,
where q is the number of group operations in G (either the number of additions of points, in an
elliptic curve, or the number of multiplications, in a multiplicative subgroup of a Ô¨Ånite Ô¨Åeld), we
can additionally state:
Adv(A) ‚â§ qs
N
+ qS ¬∑ AdvindE (t) +
q2P √ó (q2 + 20) + q2
S
p
,
Thanks to the secure password hashing scheme, in case of corruption of the server, the adversary
will not be able to extract the passwords too quickly.
6.3 Security Proof
We do the proof with a series of games, starting from the real game G0, which makes use of a
random oracle H and a symmetric encryption scheme (E,D).
We say that two users (a client C and a server S) are compatible if they use the same salt-
veriÔ¨Åer pair (s,V). They are initially all set as the same for each client and the server, but a
corruption of the server with a new salt or a new veriÔ¨Åer can replace them by diÔ¨Äerent values:
C and S are then said incompatible. Note that as in [35,?], the compatibility is deÔ¨Åned at the
beginning of the execution of the protocol (by uploading passwords in the local memory), which
means that even in case of password change in the database during the protocol, this does not
aÔ¨Äect the passwords used during this execution.
12
Game G1:
In this game, one simulates the random oracle H on new queries (0, 1, C, S, g, X, Y, Z, R(cid:48), s, Œµ),