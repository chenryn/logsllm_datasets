### Introduction
Vey [119] provides a comprehensive overview of the area's beginnings. Our work builds most directly on xJsnark’s [79] multiprecision arithmetic and on the RAM primitives first described by Ben-Sasson et al. [12] and further refined by Ben-Sasson et al. [13, 16], in Buffet [116], and in xJsnark. Both Buffet and xJsnark extend lines of work focused on efficiently compiling high-level programs into constraints, including Pepper [107], Ginger [108], Pinocchio [96], and Pantry [32].

### Related Work
Several other works in this area deal with persistent state. Pantry [32] was the first to use Merkle trees for stateful computations, and its persistent RAM primitive inspired ours (§5.2). vSQL [123] builds a verifiable subset of SQL, building on these concepts.

All of these approaches proceed in a "guess-and-check" fashion, which is inefficient when implemented in constraints (see §4.1). Most closely, Maurer [87, 88] and Shawe-Taylor [109] describe prime generation methods based on Pocklington certificates; Clavier et al. [46] optimize for embedded devices. To our knowledge, no prior work has addressed this problem in our context.

### Discussion and Conclusion
We have demonstrated that in verifiable state applications with moderate to large state, accessed thousands of times, RSA accumulators are less costly than Merkle trees. However, there are two caveats:

1. **Trusted Setup**: RSA accumulators require a trusted setup. In practice, most SNARKs [15, 64, 70, 96] also require a trusted setup, so this is not a significant burden. Moreover, it is possible to mitigate trust requirements by generating an RSA modulus using a multiparty computation [25, 60]. A conjectured alternative that avoids a trusted setup is a class group of imaginary quadratic order [24, 35]; exploring efficient constraint implementations is future work.

2. **Large Sets**: For very large sets (say, > \(2^{25}\)), the cost (in time) for advice generation by the prover (P) is high (§4.4). For small batch sizes, this cost can overwhelm the time saved due to reduced constraint count. However, there will be some batch size at which RSA breaks even, as the per-swap cost is smaller than Merkle for \(\approx 2^{10}\) elements. Reducing the number of constraints also reduces P’s RAM requirements, while P’s advice generation task requires little memory. This means that even if an RSA accumulator requires greater total proving time than a Merkle tree, its use may still be justified because it reduces the amount of RAM P needs to generate a proof. Since RAM is a major bottleneck [116, 121] (§1), such a time-space tradeoff may have significant practical benefits. Exploring this tradeoff is future work.

### Acknowledgments
This work was supported in part by the NSF, the ONR, the Simons Foundation, the Stanford Center for Blockchain Research, and the Ripple Foundation. The authors thank Justin Drake, Srinath Setty, and Justin Thaler for their helpful comments.

### References
[References listed as provided]

---

This revised version aims to improve clarity, coherence, and professionalism. It reorganizes the content for better flow and ensures that the key points are clearly articulated.