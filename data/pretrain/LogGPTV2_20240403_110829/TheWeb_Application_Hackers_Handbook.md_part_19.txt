cepts every request issued to the application, and every response received back,
for both HTTP and HTTPS. It can trap any intercepted message for inspection
or modifi cation by the user. If you haven’t used an intercepting proxy before,
you can read more about how they function, and how to get them confi gured
and working, in Chapter 20.
Once an intercepting proxy has been installed and suitably confi gured, you
can trap the request that submits the form and modify the price fi eld to any
value, as shown in Figure 5-2.
Figure 5-2: Modifying the values of hidden form fields using an intercepting proxy
If the application processes the transaction based on the price submitted, you
can purchase the product for the price of your choice.
TIP If you fi nd an application that is vulnerable in this way, see whether you
can submit a negative amount as the price. In some cases, applications have
actually accepted transactions using negative prices. The attacker receives a
refund to his credit card and also the item he ordered — a win-win situation, if
ever there was one.
cc0055..iinndddd 112200 88//1199//22001111 1122::0055::4400 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 121
Chapter 5 n Bypassing Client-Side Controls 121
HTTP Cookies
Another common mechanism for transmitting data via the client is HTTP cook-
ies. As with hidden form fi elds, normally these are not displayed on-screen, and
the user cannot modify them directly. They can, of course, be modifi ed using
an intercepting proxy, by changing either the server response that sets them or
subsequent client requests that issue them.
Consider the following variation on the previous example. After the customer
has logged in to the application, she receives the following response:
HTTP/1.1 200 OK
Set-Cookie: DiscountAgreed=25
Content-Length: 1530
...
This DiscountAgreed cookie points to a classic case of relying on client-side
controls (the fact that cookies normally can’t be modifi ed) to protect data trans-
mitted via the client. If the application trusts the value of the DiscountAgreed
cookie when it is submitted back to the server, customers can obtain arbitrary
discounts by modifying its value. For example:
POST /shop/92/Shop.aspx?prod=3 HTTP/1.1
Host: mdsec.net
Cookie: DiscountAgreed=25
Content-Length: 10
quantity=1
TRY IT!
http://mdsec.net/shop/92/
URL Parameters
Applications frequently transmit data via the client using preset URL param-
eters. For example, when a user browses the product catalog, the application
may provide him with hyperlinks to URLs like the following:
http://mdsec.net/shop/?prod=3&pricecode=32
When a URL containing parameters is displayed in the browser’s location bar,
any parameters can be modifi ed easily by any user without the use of tools.
However, in many instances an application may expect that ordinary users
cannot view or modify URL parameters:
n Where embedded images are loaded using URLs containing parameters
n Where URLs containing parameters are used to load a frame’s contents
cc0055..iinndddd 112211 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 122
122 Chapter 5 n Bypassing Client-Side Controls
n Where a form uses the POST method and its target URL contains preset
parameters
n Where an application uses pop-up windows or other techniques to conceal
the browser location bar
Of course, in any such case the values of any URL parameters can be modifi ed
as previously discussed using an intercepting proxy.
The Referer Header
Browsers include the Referer header within most HTTP requests. It is used to
indicate the URL of the page from which the current request originated — either
because the user clicked a hyperlink or submitted a form, or because the page
referenced other resources such as images. Hence, it can be leveraged as a
mechanism for transmitting data via the client. Because the URLs processed by
the application are within its control, developers may assume that the Referer
header can be used to reliably determine which URL generated a particular
request.
For example, consider a mechanism that enables users to reset their password
if they have forgotten it. The application requires users to proceed through
several steps in a defi ned sequence before they actually reset their password’s
value with the following request:
GET /auth/472/CreateUser.ashx HTTP/1.1
Host: mdsec.net
Referer: https://mdsec.net/auth/472/Admin.ashx
The application may use the Referer header to verify that this request origi-
nated from the correct stage (Admin.ashx). If it did, the user can access the
requested functionality.
However, because the user controls every aspect of every request, including
the HTTP headers, this control can be easily circumvented by proceeding directly
to CreateUser.ashx and using an intercepting proxy to change the value of the
Referer header to the value that the application requires.
The Referer header is strictly optional according to w3.org standards. Hence,
although most browsers implement it, using it to control application functional-
ity should be regarded as a hack.
TRY IT!
http://mdsec.net/auth/472/
cc0055..iinndddd 112222 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 123
Chapter 5 n Bypassing Client-Side Controls 123
COMMON MYTH
It is often assumed that HTTP headers are somehow more “tamper-proof”
than other parts of the request, such as the URL. This may lead developers to
implement functionality that trusts the values submitted in headers such as
Cookie and Referer while performing proper validation of other data such
as URL parameters. However, this perception is false. Given the multitude of
intercepting proxy tools that are freely available, any amateur hacker who
targets an application can change all request data with ease. It is rather like
supposing that when the teacher comes to search your desk, it is safer to hide
your water pistol in the bottom drawer, because she will need to bend down
farther to discover it.
HACK STEPS
1. Locate all instances within the application where hidden form fields,
cookies, and URL parameters are apparently being used to transmit data
via the client.
2. Attempt to determine or guess the role that the item plays in the applica-
tion’s logic, based on the context in which it appears and on clues such as
the parameter’s name.
3. Modify the item’s value in ways that are relevant to its purpose in the
application. Ascertain whether the application processes arbitrary values
submitted in the parameter, and whether this exposes the application to
any vulnerabilities.
Opaque Data
Sometimes, data transmitted via the client is not transparently intelligible
because it has been encrypted or obfuscated in some way. For example, instead
of seeing a product’s price stored in a hidden fi eld, you may see a cryptic value
being transmitted:
Product: Nokia Infinity 
Price: 699 
Quantity:  (Maximum quantity is 50)
cc0055..iinndddd 112233 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 124
124 Chapter 5 n Bypassing Client-Side Controls
When this is observed, you may reasonably infer that when the form is sub-
mitted, the server-side application checks the integrity of the opaque string, or
even decrypts or deobfuscates it to perform some processing on its plaintext
value. This further processing may be vulnerable to any kind of bug. However, to
probe for and exploit this, fi rst you need to wrap up your payload appropriately.
TRY IT!
http://mdsec.net/shop/48/
NOTE Opaque data items transmitted via the client are often part of the
application’s session-handling mechanism. Session tokens sent in HTTP cook-
ies, anti-CSRF tokens transmitted in hidden fi elds, and one-time URL tokens
for accessing application resources, are all potential targets for client-side
tampering. Numerous considerations are specifi c to these kinds of tokens, as
discussed in depth in Chapter 7.
HACK STEPS
Faced with opaque data being transmitted via the client, several avenues of
attack are possible:
1. If you know the value of the plaintext behind the opaque string, you can
attempt to decipher the obfuscation algorithm being employed.
2. As described in Chapter 4, the application may contain functions else-
where that you can leverage to return the opaque string resulting from a
piece of plaintext you control. In this situation, you may be able to directly
obtain the required string to deliver an arbitrary payload to the function
you are targeting.
3. Even if the opaque string is impenetrable, it may be possible to replay
its value in other contexts to achieve a malicious effect. For example, the
pricing_token parameter in the previously shown form may contain
an encrypted version of the product’s price. Although it is not possible to
produce the encrypted equivalent for an arbitrary price of your choosing,
you may be able to copy the encrypted price from a different, cheaper
product and submit this in its place.
4. If all else fails, you can attempt to attack the server-side logic that will
decrypt or deobfuscate the opaque string by submitting malformed varia-
tions of it — for example, containing overlong values, different character
sets, and the like.
The ASP.NET ViewState
One commonly encountered mechanism for transmitting opaque data via the
client is the ASP.NET ViewState. This is a hidden fi eld that is created by default
in all ASP.NET web applications. It contains serialized information about the
cc0055..iinndddd 112244 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 125
Chapter 5 n Bypassing Client-Side Controls 125
state of the current page. The ASP.NET platform employs the ViewState to
enhance server performance. It enables the server to preserve elements within
the user interface across successive requests without needing to maintain all
the relevant state information on the server side. For example, the server may
populate a drop-down list on the basis of parameters submitted by the user.
When the user makes subsequent requests, the browser does not submit the
contents of the list back to the server. However, the browser does submit the
hidden ViewState fi eld, which contains a serialized form of the list. The server
deserializes the ViewState and recreates the same list that is presented to the
user again.
In addition to this core purpose of the ViewState, developers can use it to
store arbitrary information across successive requests. For example, instead of
saving the product’s price in a hidden form fi eld, an application may save it in
the ViewState as follows:
string price = getPrice(prodno);
ViewState.Add(“price”, price);
The form returned to the user now looks something like this:
Product: HTC Avalanche 
Price: 399 
Quantity:  (Maximum quantity is 50)
When the user submits the form, her browser sends the following:
POST /shop/76/Shop.aspx?prod=3 HTTP/1.1
Host: mdsec.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 77
__VIEWSTATE=%2FwEPDwULLTE1ODcxNjkwNjIPFgIeBXByaWNlBQMzOTlkZA%3D%3D&
quantity=1
The request apparently does not contain the product price — only the quan-
tity ordered and the opaque ViewState parameter. Changing that parameter at
random results in an error message, and the purchase is not processed.
The ViewState parameter is actually a Base64-encoded string that can be
easily decoded to see the price parameter that has been placed there:
3D FF 01 0F 0F 05 0B 2D 31 35 38 37 31 36 39 30 ; =ÿ.....-15871690
36 32 0F 16 02 1E 05 70 72 69 63 65 05 03 33 39 ; 62.....price..39
39 64 64 ; 9dd
cc0055..iinndddd 112255 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 126
126 Chapter 5 n Bypassing Client-Side Controls
TIP When you attempt to decode what appears to be a Base64-encoded
string, a common mistake is to begin decoding at the wrong position within the
string. Because of how Base64 encoding works, if you start at the wrong posi-
tion, the decoded string will contain gibberish. Base64 is a block-based format
in which every 4 bytes of encoded data translates into 3 bytes of decoded data.
Hence, if your attempts to decode a Base64 string do not uncover anything
meaningful, try starting from four adjacent offsets into the encoded string.
By default, the ASP.NET platform protects the ViewState from tampering by
adding a keyed hash to it (known as MAC protection). However, some applications
disable this default protection, meaning that you can modify the ViewState’s value
to determine whether it has an effect on the application’s server-side processing.
Burp Suite includes a ViewState parser that indicates whether the ViewState
is MAC protected, as shown in Figure 5-3. If it is not protected, you can edit the
contents of the ViewState within Burp using the hex editor below the ViewState
tree. When you send the message to the server or client, Burp sends your updated
ViewState, and, in the present example, enables you to change the price of the
item being purchased.
Figure 5-3: Burp Proxy can decode and render the ViewState, allowing you to
review its contents and edit these if the EnableViewStateMac option is not set
cc0055..iinndddd 112266 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 127
Chapter 5 n Bypassing Client-Side Controls 127
TRY IT!
http://mdsec.net/shop/76/
HACK STEPS
1. If you are attacking an ASP.NET application, verify whether MAC protec-
tion is enabled for the ViewState. This is indicated by the presence of a
20-byte hash at the end of the ViewState structure, and you can use the
ViewState parser in Burp Suite to confirm whether this is present.
2. Even if the ViewState is protected, use Burp to decode the ViewState
on various application pages to discover whether the application is using
theViewState to transmit any sensitive data via the client.
3. Try to modify the value of a specific parameter within the ViewState
without interfering with its structure, and see whether an error message
results.
4. If you can modify the ViewState without causing errors, you should
review the function of each parameter within the ViewState and
see whether the application uses it to store any custom data. Try to
submit crafted values as each parameter to probe for common vulner-
abilities, as you would for any other item of data being transmitted
via the client.
5. Note that MAC protection may be enabled or disabled on a per-page
basis, so it may be necessary to test each significant page of the applica-
tion for ViewState hacking vulnerabilities. If you are using Burp Scanner
with passive scanning enabled, Burp automatically reports any pages that
use the ViewState without MAC protection enabled.
Capturing User Data: HTML Forms
The other principal way in which applications use client-side controls to restrict
data submitted by clients occurs with data that was not originally specifi ed by
the server but that was gathered on the client computer itself.
HTML forms are the simplest and most common way to capture input from
the user and submit it to the server. With the most basic uses of this method,
users type data into named text fi elds, which are submitted to the server as
name/value pairs. However, forms can be used in other ways; they can impose
restrictions or perform validation checks on the user-supplied data. When an
cc0055..iinndddd 112277 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 128
128 Chapter 5 n Bypassing Client-Side Controls
application employs these client-side controls as a security mechanism to defend
itself against malicious input, the controls can usually be easily circumvented,
leaving the application potentially vulnerable to attack.
Length Limits
Consider the following variation on the original HTML form, which imposes
a maximum length of 1 on the quantity fi eld:
Product: iPhone 5 
Price: 449 
Quantity:  
Here, the browser prevents the user from entering more than one character
into the input fi eld, so the server-side application may assume that the quantity
parameter it receives will be less than 10. However, this restriction can easily be
circumvented either by intercepting the request containing the form submission
to enter an arbitrary value, or by intercepting the response containing the form
to remove the maxlength attribute.
INTERCEPTING RESPONSES