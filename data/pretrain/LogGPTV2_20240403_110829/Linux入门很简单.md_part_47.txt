![alt](images/00353.jpeg){.calibre3}
图6.15 Steve Bourne
【标准Shell之争】
等到了20世纪70年代晚期，每种Shell在Bell实验室都有不少人用，于是形成了两个派别。说来这两个Shell应该都是很不错的，用熟悉了都很顺手，但是这两个Shell是互不兼容的，就如同修习了少林的内功后再去学武当的心法，多半不是很习惯。
但是作为一个成熟的商业化的系统，总该有个默认的、标准的Shell才方便用户学习使用。于是在Bell实验室里，分别支持Thompson
Shell和Bourne
Shell的两大帮派，进行了激烈的辩论，经过3次连续的UNIX用户组集会上两大帮派的斗争之后，终于确立了Bourne
Shell成为UNIX的标准Shell。
【Bash诞生】
等到1978年，Bourne Shell随着Version7
UNIX一同发布，终于告别了实验室，和广大用户见面了。9年后，1987年，一个叫做Brian
Fox的家伙非常喜欢Bourne
Shell，并且觉得它还可以更加完善，于是开始在Bourne
Shell的基础上进行创造，几年后它成为一个更加完整而且好用的Shell。出于对Bourne
Shell的缅怀和崇拜，他将这个Shell命名为Bourne Again
Shell------简称bash。现在，bash是绝大多数Linux系统及Mac OS X
v10.4系统的默认Shell。甚至还被移植到了Windows系统上，什么？你没见过？那你听说过Cygwin吧，那里面就是bash。
[6.6 本章小结]{.kai}
这个懒蜗牛同学对于Linux系统，可说是越用越有感觉了。在图形界面下玩腻了就跑到字符界面下感受了一番。他记住了一些简单的命令，还学会了编写简单的Shell脚本和使用正则表达式。但这不是主要的，更重要的是了解了命令行的很多基本的概念，也可以感受到Linux系统的一些优秀的设计思想。有了命令行的使用基础以后，懒蜗牛接下来会去学点什么呢？咱们下回再说。
[]{#part0011.html}
第7章 改造这个世界
懒蜗牛同学熟悉了命令行的操作，了解了各种命令之后，越来越能体会到我们Ubuntu系统的自由和开放。但他没有就此结束探索，他还要更深入地学习，学习编程，学习如何改造这个Linux世界。
[7.1 C/C++语言开发环境的搭建]{.kai}
编程语言有很多种，懒蜗牛也不知道哪个适合自己。所幸他上学的时候学过Turbo
C，而且听说C语言在Linux里用得很广泛，那就从C语言开始吧。
7.1.1 安装开发套件
C语言是当年创造UNIX系统的主要参与者之一------Dennis M.
Ritchie设计并实现的。（就是图7.1里所示的这位）当年这位牛人在写UNIX系统的时候，觉得没啥顺手的编程语言，于是就基于B语言进行改造，设计出了C语言。
![alt](images/00354.jpeg){.calibre3}
图7.1 Dennis M. Ritchie
牛人设计出的东西总是很经典的，C语言就是一个经典中的经典，经典到至今仍然被广泛应用于各种编程的场合。C语言是一种编译型语言，所以要使用C语言开发程序，就需要安装编译器。
![alt](images/00011.jpeg){.tpzz}**提示：**[B语言是由BCPL语言发展而来的，设计者是美国贝尔实验室的Ken
Thompson。将它取名为B语言的意思是将BCPL语言进行压缩，提炼出它的精华。]{.kai1}
【编译型语言】
有人问，什么叫编译型语言呢？
编程语言大致分成两种，编译型和解释型。编译型语言，就是像C语言这样的，写完了需要用编译器编译的语言。
C语言的程序源码，对我们系统来说就是一个普通的写满字符的文本文件而已。就比如你看书懒得自己翻页（这得多么懒啊），于是要设计一个自动翻页的机器，那么肯定要先有机器的大致的设计图纸。C语言的源代码就相当于是设计图纸，而最终要得到的那个可以运行起来的程序就相当于最终的翻页机。要想让图纸变成机器，需要一个制造的过程，这个过程就相当于编译过程。造机器的过程中肯定需要各种工具，什么扳手、钳子、螺丝刀之类的。软件的编译也需要工具，就是编译工具。
通过编译工具的编译，原本一个或者几个源码文件（多数情况下是很多源码文件），就变成了活生生的、欢蹦乱跳的、能够像狐狸妹妹（以下"狐狸妹妹"或"狐狸"特指Firefox）一样跑进内存运行的程序。
除了编译型语言外，还有一种解释型语言，咱们以后再解说它。这里先说C语言的编译工具。
【GCC的来历】
我们Linux系统中最常用的C语言编译器就是GCC了，图7.2所示是它的Logo。
![alt](images/00355.jpeg){.calibre3}
图7.2 GCC的Logo
GCC这个项目是GNU计划的发起者------Richard
Stallman于1984年开始实施的。到1987年，首次发行了最初的GCC版本。他最初取名GCC是想表示GNU
C Compiler，也就是GNU系统中的C语言编译器。GCC起初是在早期的Sun和DEC
VAX系统上运行的，由于它是开源的编译器（Richard
Stallman创造的东西，怎么可能不开源，除非太阳从西边出来），因此热心的爱好者们可以随意修改并且完善它。这其中最主要的工作，就是提供对各种处理器架构Arm、MIPS、x86等的支持。很快，GCC就能够支持大多数流行的（甚至罕见的）处理器架构了。表7.1列出了目前GCC支持的CPU架构。
**表7.1 GCC支持的处理器结构**
![alt](images/00356.jpeg){.calibre3}
由此可见，GCC支持的处理器还是非常广泛的。不仅如此，随着开源贡献者的不断完善，GCC的功能还得到充分的扩充，不仅可以编译C语言，什么Ada、Fortran、C++、Object-C，它都可以支持。它不再仅仅是一个C
Compiler，于是它的首字母缩写的意思就变成了GNU Compiler
Collection，也就是GNU系统编译器套装。
![alt](images/00011.jpeg){.tpzz}**提示：**[Object-C是扩充C的面向对象编程语言。它主要使用于Mac
OS X和GNUstep这两个使用OpenStep标准的系统。]{.kai1}
除了GCC外，Intel公司还开发了一个专门针对他们公司的处理器进行优化的编译器------ICC，大约就是Intel
C
Compiler的意思吧。如果你用的是Intel公司的CPU，那么这个编译器编译出来的东西，理论上效率会高一些。不过这个编译器目前还不大靠谱，用来试验还可以。
【需要安装的软件包】
好，咱还回来说GCC。说了这么多，这个GCC编译器怎么安装呢？是不是叫超级牛力来装就好了呢？告诉您，超级牛力都不用，装系统的时候就装上了。那么既然已经有了编译器，懒蜗牛同学是不是可以马上开始用GCC编译C语言的程序了呢？也不是，只有GCC是不够的，还需要一些必要的头文件和库文件。
前面说过，GCC就相当于一个用来加工代码的工具，就像木匠造凳子需要的凿子、斧子、锯子这些工具一样。但光有工具不行，还得有材料。要创造东西总是要把某种东西经过加工才变成成品的，总不可能凭空创造出东西吧。你看木匠要造凳子得需要木头、钉子或者胶水这些材料。根据爱因斯坦的物质守恒学说......哦，有点扯远了，总之，要创造程序，需要工具和材料。
用户要创造一个程序，他需要的工具，就是GCC。而需要的材料，就是各种头文件、库文件这样的文件。创造程序之前，需要准备好这些东西才可以开始。我们的懒蜗牛同学似乎已经进行了充分的学习，对这些理解得比较透彻，所以他就直接叫超级牛力来帮忙准备好这些工具和材料。
为了方便用户安装开发环境，超级牛力已经把创造程序需要的工具都打好了包，包名就叫做build-essential。所以懒蜗牛运行了：
![alt](images/00357.jpeg){.calibre3}
就去把这些东西从网络上拖回来并且安装好了。作为仅仅是初学C语言的懒蜗牛同学来说，装好这个包就够了。
![alt](images/00011.jpeg){.tpzz}**提示：**[如果编写较为复杂的程序，则需要根据程序所涉及的功能安装相应的库。例如，编写需要调用OpenGL绘图的程序，则需安装OpenGL库；编写gtk图形界面程序，则需安装gtk库等。]{.kai1}
7.1.2 在哪编写程序
装好了编译工具，懒蜗牛还是有些不知从何下手。他在图形界面找了半天也没找到GCC到底装哪里了。嗯！看来是个命令行程序，于是懒蜗牛又在命令行下运行GCC，结果提示说：no
input files，这到底是什么意思呢？连个界面都没有，往哪里写程序啊？
【散装的工具和成套的套件】
看来懒蜗牛同学已经习惯了Windows下的开发工具了，以为GCC跟Turbo
C或者Visual C++一样呢。其实人家Windows下的Visual
C++是一个集成开发环境，那可是个巨无霸型的软件。他拥有编译程序、编辑文本、项目管理、程序调试、帮助文档等各种各样的功能。这符合微软公司总是把软件做得大而全的一贯作风。装了这么一个软件，您就用去吧，啥都有了。
而在我们崇尚简洁的Linux系统中，这些功能分别由不同的软件去实现。例如帮助文档由man来负责；项目管理靠用户写Makefile来实现；文本的编辑则由任何一个用户用着顺手的文本编辑器完成；编译程序，才是GCC的工作。还是那句话：只做一件事，但要做到最好！
所以，写程序这件事其实可以用任何一种文本编辑器完成，只要是能编写文本文件的，都可以写C语言的程序。
【gedit】
您别听着"文本编辑器"这个名词觉得很高深，其实您早就认识并且使用过了，像我们这里的gedit小弟，或者Windows
7那里的记事本，都是文本编辑器。别看gedit小弟个头不大，论本事可比Windows
7那个记事本厉害多了。至少人家能够认识一些基本语言格式，什么C语言，脚本语言之类的。用gedit打开一个C源码文件，他会将程序中的一些关键词、常量、变量之类的用不同的颜色显示出来并加以区分，这样看起来就比较清楚，如图7.3所示，是挺好看的。
![alt](images/00358.jpeg){.calibre3}
图7.3 gedit显示C语言代码
【kate】