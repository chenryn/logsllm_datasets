### Penalty Maintenance
The penalty (distance) between clusters C1 and C2 is recalculated whenever the size of either cluster changes. In such cases, all entries in the heap `h` that contain a cluster with a changed size must be updated or invalidated.

We use version control to track the latest and deprecated versions of clusters in `h`. The version of a cluster `C` is recorded as its current size (an integer). This version is stored in `v[O]`, where `O` is the event co-occurrence matrix of `C`. `v` is a hashtable that assigns 0 to an entry when it is accessed for the first time. Each heap entry contains two clusters, their versions, and the distance between them when pushed to `h` (lines 9 and 24). An entry is discarded if any of its two clusters are found to be deprecated at the moment the entry is popped from `h` (line 17).

### Borderline Behavior Treatment
False positives can occur under the following conditions:
1. `dist(b, C1) = dist(b, C2)`
2. `b` is trained only in `C1` during Intra-cluster Modeling.
3. A similar behavior instance `b'` is tested against `C2` during Operation Occurrence Frequency Analysis (intra-cluster detection).

To handle such borderline behaviors correctly, our clustering algorithm duplicates `b` in every cluster it may belong to (lines 30-44). This operation also increases the cluster sizes, ensuring sufficient training in Intra-cluster Modeling.

### Co-occurrence Analysis (Detection)
This operation performs inter-cluster detection to identify montage anomalies. A behavior instance `b` is tested against all normal clusters `C` to check if the co-occurred events in `b` are consistent with those found in a single cluster. An alarm is raised if no such cluster is found. Otherwise, `b` and its most closely fitted clusters `Cb = {C1, ..., Ck}` are passed to Occurrence Frequency Analysis for intra-cluster detection.

A behavior instance `b` fits into a cluster `C` if `Ob OR OC = OC`, where `OC` and `Ob` are the event co-occurrence matrices of `C` and `b`, respectively. The detection process searches for all clusters in which `b` fits. If this set is not empty, distances between `b` and each cluster in the set are calculated using equation (3). The clusters with the nearest distance (there could be more than one) are selected as `Cb`.

### Intra-cluster Modeling (Training)
Within a cluster `C`, our approach analyzes behavior instances through their transition frequency matrices `{Fb | b ∈ C}`. These matrices are vectorized into data points in a high-dimensional detection space, where each dimension records the occurrence frequency of a specific event across profiles. Two analysis methods are used to reveal relations among frequencies.

#### Probabilistic Method
We employ a one-class SVM, specifically ν-SVM [38], to find a frontier `F` that envelops all behavior instances `{b | b ∈ C}`.

- **Preprocessing**: Each frequency value is transformed using a logarithmic function `f(x) = log2(x + 1)` to reduce variance between extreme values (empirically necessary).
- **Dimensionality Reduction**: A subset of dimensions is selected through frequency variance analysis (FVA) or principal component analysis (PCA) before the data points are processed by ν-SVM. This step addresses the curse of dimensionality.
- **Kernel Function**: We pair the ν-SVM with a radial basis function (RBF) kernel to find a non-linear frontier `F` that tightly envelops `{b | b ∈ C}`. The kernel function transforms a non-linearly separable problem into a linearly separable one in a high-dimensional space.

#### Deterministic Method
We use variable range analysis to measure the frequencies of events with zero or near-zero variances across all program behaviors `{b | b ∈ C}`. Frequencies are discrete integers. If all frequencies of an event in different behavior instances are the same, PCA drops the corresponding dimension. In some clusters, all behavior instances (across all dimensions) in `C` are the same or nearly the same. Duplicated data points are treated as a single point, providing insufficient information to train probabilistic models like one-class SVM.

Therefore, we extract deterministic rules for events with zero or near-zero variances. This model identifies the frequency range `[fmin, fmax]` for each such event, where `fmin` can equal `fmax`.

### Occurrence Frequency Analysis (Detection)
This operation performs intra-cluster detection to identify frequency anomalies, including:
- Deviant relations among multiple event occurrence frequencies.
- Aberrant occurrence frequencies.

Given a program behavior instance `b` and its closely fitted clusters `Cb = {C1, ..., Ck}` discovered in Co-occurrence Analysis, this operation tests `b` in every `Ci` (0 ≤ i ≤ k) and aggregates the results using equation (5).

\[
\exists C \in C \text{ Nclt}(b, C) \Rightarrow b \text{ is normal}
\]

The detection inside `C` is performed with three rules, and the result is aggregated into `Nclt(b, C)`:

\[
\text{Nclt}(b, C) =
\begin{cases} 
\text{True} & \text{if } b \text{ is normal by all 3 rules} \\
\text{False} & \text{if } b \text{ is anomalous by any rule}
\end{cases}
\]

- **Rule 1**: Normal if `b` passes the probabilistic model detection. The frequency transition matrix `F` of `b` is vectorized into a high-dimensional data point and tested against the one-class SVM model built in Intra-cluster Modeling. The distance `d` between `b` and the frontier `F` established in the ν-SVM is computed. If `b` is within the frontier or on the same side as normal behavior instances, then `d > 0`. Otherwise, `d < 0`.

### Discovering Real-World Attacks
We reproduce three known aberrant path attacks to test the detection capability of our approach. Our detection approach detects all attack attempts with a false positive rate of less than 0.0001. The overview of the attacks and detection results are presented in Table 2.

#### Flag Variable Overwritten Attack
This is a non-control data attack where an attacker tampers with decision-making variables. The exploit takes effect when the manipulated data affects the control flow at some later point of execution.

We reproduce the flag variable overwritten attack against `sshd` introduced by Chen et al. [5]. The attack is described in Section 2.1, bullet (a), and in Figure 1. We simplify the attack procedure by placing an inline virtual exploit in `sshd` right after the vulnerable routine `packet_read()`:

```c
if (user[0] == 'e' && user[1] == 'v' && user[2] == 'e') authenticated = 1;
```

This inline virtual exploit produces the immediate consequence of a real exploit—overwriting `authenticated`. It does not interfere with our tracing/detection because no call instruction is employed. For each attack attempt, 128 random commands are executed after a successful login.

Our approach (configured at FPRu 0.0001) successfully detects all attack attempts in inter-cluster detection (Co-occurrence Analysis). We present normal and attack traces inside the execution window (selected routine `do_authentication()`) in Figure 5 to illustrate the detection.

**Note**: The distance can be positive or negative. More details are specified in Rule 1 (Section 4.4).

**Table 2: Overview of Reproduced Attacks and Detection Results**
| Attack Name | Description | Detection Result |
|-------------|-------------|------------------|
| ...         | ...         | ...              |

---

This optimized text provides a clearer, more coherent, and professional description of the processes and methods involved in the system.