# 服务网格化：微服务的牧人？
作者：Matt Klein, Lyft

在过去的五到十年中，微服务已成为分布式系统设计和运营中的热门话题。曾经只有大型互联网公司才会讨论的技术词汇，如“不可变容器供应与调度”、“持续集成与部署”、“分散控制”以及“多语言实现”，如今已变得广为人知。的确，微服务架构允许大规模开发团队以更灵活的方式运作。然而，人们往往忽视了这样一个事实：大型互联网公司在开发和运维上投入了大量人力物力，才使得分布式架构能够顺利运行。可靠性工程师常常面临一系列操作难题，例如服务如何相互发现并通信、如何观察和调试分布式服务、如何打包和部署服务，以及可能出现哪些复杂的故障场景。

随着实践者们逐渐意识到，迁移到分布式架构时遇到的大多数问题都集中在两个关键领域：网络管理和可观察性。与单一应用程序相比，管理一组交织在一起的分布式服务所带来的挑战要大得多。这给可靠性工程师带来了巨大的困扰——难以确保系统的稳定性和可靠性。

近年来，“服务网格”这一概念应运而生。尽管计算领域的许多理念都不是全新的（服务网格的概念可以追溯至企业服务总线ESB时代），但它为构建和维护微服务架构提供了一个强大的工具。通过创建一个通用的应用通信基底，服务网格让开发者无需深入了解底层网络实现即可编写跨语言的应用程序，并保证其可靠运行。本章将探讨引入服务网格背后的原因及其对微服务开发者及可靠性工程师带来的架构优势。最后，我们将通过Lyft基于Envoy的服务网格部署案例来进一步说明这一点。

## 准备好摆脱单体架构了吗？

通常，在考虑采用微服务之前，企业拥有的是一个功能集中的单体应用，如图所示：

- 互联网负载均衡器（例如AWS的弹性负载均衡ELB）
- 无状态应用堆栈（例如PHP或Node.js）
- 数据库（例如MongoDB或MySQL）

![单体架构](media/rId23.png)

很多知名的互联网应用（如Twitter、Salesforce、Snapchat等）在处理高流量负载方面表现出色，部分原因在于单体架构相对简单且易于理解和管理。关于为何从单体架构转向微服务架构已有众多论述，其中马丁·福勒的文章可能是最著名的参考资料之一。但从网络和可观察性的角度出发，即使是这种基础架构也存在一些显著的操作难题。以下是一些示例：

### 缺乏网络可见度
在单体架构下，客户端需要与负载均衡器通信，后者再与后端应用交互，最终到达数据库。因此，即使是最简单的单体架构实际上也涉及到了相当程度的网络复杂性和可观察性挑战。当问题发生时，工程师们不得不依赖有限的日志记录、跟踪信息和其他统计资料来进行故障排查，而这往往十分困难。

### 应用层连接处理效率低下
许多单体Web应用所使用的编程语言虽然便于快速开发，但并不总是具备最佳性能，尤其是在异步处理能力方面表现欠佳。随着请求量的增长，这些平台很容易因网络延迟而陷入困境。解决此问题的一种常见方法是部署高性能代理服务器（如HAProxy）。这种模式其实已经预示了后来全面服务网格解决方案的发展方向。

即便是在如此“简化”的架构下，从业者依然面临着由网络问题和可观察性不足引起的操作难题。当决定向分布式微服务架构转型时，这些问题只会变得更加严峻。事实上，由于无法妥善处理网络可靠性问题，不少微服务项目甚至被迫暂停实施。缺乏适当指导的情况下，开发人员往往会对网络失去信心，并倾向于继续使用单体架构来添加新特性，仅保留少数“非核心”微服务运行。这是一个恶性循环。由此可见，确保网络的可靠性、透明度以及易用性对于成功部署分布式架构至关重要。

## 微服务网络现状概览

当前业界中微服务网络主要由以下几个方面构成：

- **语言与框架**：现代应用通常是多语言的。组织内部很难限制只使用一两种编程语言。相反，我们更多看到的是单体应用可能用Ruby、PHP或Node.js编写，而微服务则可能采用Python、Go、Java或C++等多种语言。每种语言都有其独特的性能特点及相应的一系列开发框架。
- **协议**：分布式应用依赖于多种协议进行实时远程过程调用（如REST、gRPC）、消息传递（如Kafka）、缓存（如Redis）以及数据库访问（如MySQL）。
- **基础设施**：如今，我们可以看到微服务被部署在各种云平台上，包括IaaS（如AWS EC2、Google GCE）、CaaS（如AWS ECS、GKE）以及FaaS（如AWS Lambda）。
- **负载均衡器**：从传统硬件设备（如F5、Juniper Networks）到虚拟化方案（如AWS ELB、GCP ILB），负载均衡技术的选择非常广泛。
- **服务发现机制**：DNS解析到Consul等一致性解决方案构成了服务间互相查找的基础。
- **最佳实践**：理论上，微服务应该遵循诸如二进制指数退避算法、断路器模式等一系列最佳实践，但在实际应用中却经常出现差异或者缺失。
- **身份验证与授权**：虽然多数互联网架构都会利用TLS加密传输层安全，并辅以某种形式的身份认证，但对于服务间的互信验证则呈现出极大的多样性，从完全不设防到复杂的双向TLS认证加RBAC权限控制均有涉及。
- **网络库**：不同语言提供的进程内网络库负责整合上述各项功能。它们从基本的HTTP请求/响应处理（如Python Requests、PHP cURL）到支持多种语言的gRPC库，再到专为JVM设计的高度功能性库（如Finagle）不等。共同点在于，更新这些库往往意味着必须重新部署整个服务，这对于大型系统来说是一项艰巨的任务。
- **可观察性**：为了监控整个系统的健康状况，日志记录、指标收集以及分布式追踪成为必备手段。然而，各组件输出的数据格式千差万别，给统一分析带来了极大难度。

对于大多数从业者而言，上述种种挑战导致的结果往往是混乱不堪的局面。更重要的是，所有这些因素中最关键的一环无疑是可观察性。正如我常说的那样：“可观察性、可观察性、还是可观察性！” 如果没有一种简便且一致的方式来审视系统状态，那么解决问题几乎是不可能完成的任务。这也直接导致了人们普遍认为分布式网络对应用开发来说不够可靠的观点。因此，要成功推广微服务架构，确保所有已部署服务都能提供一致的功能特性和良好的可观察性绝对至关重要。作为行业参与者，我们必须寻找更好的解决方案。

## 服务网格：解救之道

面对如此错综复杂的网络环境，开发者和SRE工程师该如何恢复秩序并有效管理微服务应用呢？他们有两个主要选项：

### 选项1
限制组织内使用的编程语言种类，并引入高度复杂的库来封装所需的所有功能。虽然这种方法成本高昂，但像谷歌、Facebook和Twitter这样的顶级互联网公司已经证明它是可行的（当然，这背后需要投入数百甚至数千人年的工作量）。

### 选项2