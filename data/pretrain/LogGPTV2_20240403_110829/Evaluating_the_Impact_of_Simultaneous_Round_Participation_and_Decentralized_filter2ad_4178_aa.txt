# Evaluating the Impact of Simultaneous Round Participation and Decentralized Decision on the Performance of Consensus

**Authors:**
- Lívia M. R. Sampaio
- Michel Hurfin
- Francisco Vilar Brasileiro
- Fabíola Greve

**Affiliations:**
- **Lívia Sampaio, Francisco Brasileiro, Fabíola Greve:** Universidade Federal de Campina Grande, PB, Brasil, Departamento de Sistemas e Computação
- **Michel Hurfin:** INRIA Rennes - IRISA, France
- **Fabíola Greve:** Universidade Federal da Bahia, BA, Brasil, Departamento de Ciência da Computação

**Contact Information:**
- [Email addresses redacted for privacy]

## Abstract

Consensus services are fundamental building blocks for fault-tolerant distributed systems. While numerous protocols have been proposed to implement such services, there has been limited effort in evaluating their performance. Specifically, in the context of round-based consensus protocols for asynchronous systems augmented with failure detectors, studies have primarily focused on how the quality of service (QoS) of the failure detector impacts protocol performance and the trade-off between faster decentralized decision-making and increased network load. However, these studies often do not account for protocols that can handle poor QoS from the failure detector or have flexible decision patterns.

This paper presents a comprehensive evaluation of a consensus protocol with two unique features: 
1. It mitigates the effects of poor QoS from the failure detector by allowing processes to participate in multiple rounds simultaneously.
2. It allows for configurable decision patterns, enabling different numbers of processes to make autonomous decisions.

We measure the decision latency of the protocol to conduct our performance analysis. The results, obtained through simulation, highlight the advantages and limitations of these mechanisms and provide insights into how the protocol's parameters should be set to achieve optimal performance based on application requirements.

## 1. Introduction

Agreement problems are central to fault-tolerant distributed systems, and many protocols have been developed to solve them in asynchronous environments subject to process crashes. These protocols are typically defined by their safety and liveness properties. In asynchronous systems, liveness properties are eventual, meaning they only specify what must eventually be satisfied without making assumptions about the actual time of satisfaction. While these properties are useful for defining protocol specifications, they offer little insight into expected performance. Therefore, understanding and optimizing the performance of such protocols is crucial for practical fault-tolerant system design.

The consensus problem is a key agreement problem. In an asynchronous system prone to process crashes, consensus has no deterministic solution. Failure detectors, as proposed by Chandra and Toueg, provide the necessary extra synchrony to overcome this impossibility result. They offer distributed information about process failures. This paper focuses on asynchronous systems equipped with unreliable 3S failure detectors, the weakest class of failure detectors that allow consensus to be solved. 3S failure detectors can make arbitrary mistakes but will never compromise the safety properties of the consensus protocol, making it indulgent and tolerant of arbitrary periods of asynchrony.

Given the importance of the consensus problem, it is essential to evaluate the performance of consensus protocols. Despite this, most performance evaluations use non-temporal metrics, such as the number of communication steps required to reach a decision. These metrics, while useful at a macro level, hide important information needed for precise performance analysis. For instance, the pattern and number of messages exchanged significantly affect the duration of a distributed computation. Recent efforts have begun to use temporal metrics for performance analysis, providing more practical insights.

In this paper, we conduct an extensive performance evaluation of the HMMR-consensus protocol proposed by Hurfin et al. We use a realistic simulation model that accounts for asynchrony and resource contention. Our results, obtained through simulation, provide a more accurate perspective on the effectiveness and limitations of the unique mechanisms incorporated in the protocol. We highlight the positive effects of simultaneous participation in multiple rounds and the benefits of switching from a centralized to a decentralized decision pattern, especially when combined with simultaneous round participation and when the application requires quick decisions from multiple processes.

## 2. Description of the Consensus Protocol

### 2.1 The Problem and 3S-based Solutions

In the consensus problem, each process in a group of \( n \) processes proposes a value, and the correct processes must decide on the same value, chosen from the initially proposed values, despite up to \( f < n/2 \) processes crashing. 

#### 2.1.1 Simultaneous Round Participation

To mitigate the effects of poor QoS from the failure detector, the protocol allows processes to participate in multiple rounds simultaneously. This mechanism provides robustness against variability in the failure detector's QoS.

#### 2.1.2 Configurable Decentralized Decision Pattern

In any given round, processes can be divided into two sets:
- **Set X:** Processes that can manage the decision and decide autonomously. These processes test a decision predicate and receive necessary messages for this analysis.
- **Set Y:** Processes that wait for the decision, which is sent to them by processes in Set X.

In the classical Chandra-Toueg (CT) consensus, Set X is composed uniquely of the coordinator of the round, characterizing a centralized decision pattern. The HMMR-consensus allows for a configurable number of processes in Set X, enabling a flexible decision pattern.

## 3. Simulation Model

[Details of the simulation model, including the environment setup, parameters, and methods used for the performance evaluation.]

## 4. Results and Analysis

[Results of the experiments, including decision latency, impact of simultaneous round participation, and the benefits of a decentralized decision pattern. Analysis of the data and discussion of the findings.]

## 5. Related Work

[Comparison with related efforts in the field, highlighting the contributions and differences of the HMMR-consensus protocol.]

## 6. Conclusion

[Final remarks, summarizing the key findings and implications of the study, and potential directions for future research.]

---

This revised version aims to improve clarity, coherence, and professionalism by reorganizing the content, refining the language, and ensuring a logical flow of ideas.