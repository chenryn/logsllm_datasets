title:Evaluating the Impact of Simultaneous Round Participation and Decentralized
Decision on the Performance of Consensus
author:L&apos;ıvia M. R. Sampaio and
Michel Hurfin and
Francisco Vilar Brasileiro and
Fab&apos;ıola Greve
Evaluating the Impact of Simultaneous Round Participation and Decentralized
Decision on the Performance of Consensus
L´ıvia Sampaio
†
Michel Hurﬁn
‡
Francisco Brasileiro
†
Fab´ıola Greve(cid:1)
PI:EMAIL, hurﬁPI:EMAIL, PI:EMAIL, PI:EMAIL
†
Universidade Federal de Campina Grande, PB, Brasil
Departamento de Sistemas e Computac¸˜ao
‡
INRIA Rennes - IRISA, France
(cid:1) Universidade Federal da Bahia, BA, Brasil
Departamento de Ciˆencia da Computac¸˜ao
Abstract
performance is achieved depending on the application’s re-
quirements.
Consensus services have been recognized as fundamen-
tal building blocks for fault-tolerant distributed systems.
Many different protocols to implement such a service have
been proposed, however, not a lot of effort has been placed
in evaluating their performance. In particular, in the con-
text of round-based consensus protocols for asynchronous
systems augmented with failure detectors, there has been
some work on evaluating how the QoS of the failure detector
impacts the performance of the protocols, as well as on the
trade-off between having faster decentralized decision at
the expenses of generating more network load. These stud-
ies, however, focus on protocols that have no mechanism to
deal with an eventual bad QoS provided by the failure de-
tector, and have a decision pattern that is either completely
centralized - only one process being able to autonomously
decide - or completely decentralized - all processes being
able to autonomously decide. This paper reports a thor-
ough evaluation of the performance of a consensus proto-
col that has two unique features. Firstly, it mitigates the
problems due to bad QoS delivered by the failure detector
by allowing processes to simultaneously participate in mul-
tiple rounds. Secondly, it allows its decision pattern to be
conﬁgured to have different numbers of processors allowed
to autonomously decide. We have measured the decision la-
tency of the protocol to conduct the performance analysis.
The results, obtained by means of simulation, highlight the
advantages and limitations of the two mechanisms and al-
low one to understand in a comprehensive framework how
the protocol’s parameters should be set, such that the best
1 Introduction
Agreement problems [4] are at the heart of fault-tolerant
distributed systems and many protocols have been sug-
gested in order to solve them in asynchronous environments
subject to process crashes. The behaviors of these protocols
are commonly deﬁned by their safety and liveness prop-
erties. Moreover, given the asynchrony of the system, the
liveness properties are eventual properties, in the sense that
they only state what must be eventually satisﬁed, and make
no assumptions on the actual time when the properties have
to be satisﬁed. Therefore, although these properties are use-
ful to precisely deﬁne the speciﬁcation of the protocol, they
give little help in predicting the protocol’s expected per-
formance. Nonetheless, the performance of such protocols
should be a ﬁrst order requirement when designing practi-
cal fault-tolerant systems. Particularly, it is of great interest
to investigate characteristics of agreement protocols in or-
der to enhance their overall performance in realistic scenar-
ios, which must account for asynchrony and resource con-
tention.
The consensus problem is the great common denomina-
tor among the agreement problems.
In an asynchronous
system prone to process crashes, consensus has no deter-
ministic solution [7]. Failure detector oracles are an ele-
gant abstraction proposed by Chandra and Toueg which en-
capsulates the extra synchrony necessary to circumvent this
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007impossibility result [2]. They offer distributed information
about failures of processes in the system. In this paper, we
are interested in asynchronous systems equipped with un-
reliable failure detectors of the class 3S. The choice is
justiﬁed by the fact that this is the weakest class of failure
detectors allowing to solve consensus [3]. 3S failure detec-
tors can make an arbitrary number of mistakes, but, in spite
of their inaccuracy, they will never compromise the safety
properties of the consensus protocol that uses them. Such a
protocol is said to be indulgent and tolerates arbitrary peri-
ods of asynchrony.
Due to the essential role played by the consensus prob-
lem, it is of utmost importance to evaluate the performance
of algorithms proposed to solve it.
In spite of this im-
portance, quantitative performance evaluation of consensus
protocols is normally conducted using only non-temporal
metrics, such as the number of communication steps1 re-
quired to reach a decision in particular runs of the proto-
col. Analysis using non-temporal metrics, although useful
at a macro level, hide important information required for a
more precise performance analysis. For instance, it is well
known that the pattern and number of messages exchanged
by the processes have a considerable effect on the duration
(latency) of a distributed computation [1]. Since the com-
munication pattern and the number of messages exchanged
in each communication step of different consensus proto-
cols vary widely, accounting the number of communication
steps gives very little insight on how long a protocol will
take to reach a decision. Moreover, these metrics are nor-
mally accounted only for restricted runs (normally named
“favorable runs”); for instance, runs in which the failure de-
tector makes no mistake.
It is only recently that efforts are being attempted to-
wards the use of temporal metrics when analyzing the per-
formance of consensus protocols [14, 17, 12]. While the
interest in comparing the performance of these protocols
using more practical metrics grows, researchers have also
started to worry about designing consensus protocols that
can effectively deal with the issues that impact the decision
latency of these protocols [8, 12]. In particular, Hurﬁn et
al. [8] have proposed an extension of the Chandra-Toueg
consensus protocol which incorporates a mechanism that
allows processes to simultaneously participate in several
rounds, providing robustness against variability on the qual-
ity of service delivered by the failure detector, as well as a
mechanism that allows ﬂexible control on the decision pat-
tern of the protocol. However, similar to most other works,
the performance analysis conducted in [8] uses only non-
temporal metrics and, therefore, is insufﬁcient to properly
1To converge towards a single decision value, a consensus protocol
makes the processes engaged in the execution of the protocol exchange
messages with proposed values. The number of communication steps re-
quired to converge to a decision is equal to the length of the longest com-
munication path observed during the computation.
evaluate the effectiveness of the proposed mechanisms.
In this paper we ﬁll in this gap by conducting an exten-
sive performance evaluation of the protocol proposed by
Hurﬁn et al (denoted herein the HMMR-consensus). We
pursued a quantitative approach based on a temporal met-
ric that gauges the latency of the protocol to reach a deci-
sion. We use a realistic simulation model, which accounts
for asynchrony (denoted by wrong suspicions that are a di-
rect consequence of the lack of timing assumptions) and re-
source contention (CPU and network). The results, obtained
by means of simulation, give a more accurate perspective
on the usefulness and limitations of the unique mechanisms
incorporated within the protocol and allow one to under-
stand in a comprehensive framework how the protocol’s pa-
rameters should be set, such that the best performance is
achieved depending on the application’s requirements. In
particular we highlight the positive effects of the simultane-
ous participation to several consecutive rounds. The win-
dow mechanism, which has been ignored in all previous
evaluations of consensus protocols, allows to mask entirely
the impact of a bad QoS of the failure detector. We also
show that switching from a centralized to a decentralized
decision pattern has only an interest provided that (1) si-
multaneous round participation is implemented and (2) the
application requires that at least k > 1 processes decide
quickly.
The remainder of this paper is structure in the following
way. In Section 2 we give a brief description of the rationale
behind the protocol we will study. Then, in Section 3 we
present our simulation model. Section 4 brings the results
of the experiments together with our analysis. We compare
our work with related efforts in Section 5. Finally, Section 6
concludes the paper with our ﬁnal remarks.
2 Description of the Consensus Protocol
2.1 The Problem and 3S-based Solutions
In the consensus problem, each process in a group of n
processes Π = {p1, p2, ..., pn} proposes a value and the
correct processes must decide for the same value, chosen
among the values initially proposed, despite the fact that up
to f , f  w only if it ter-
minates round r − w. Thus when round r starts, pi can no
more decide during round r − w.
Conﬁgurable Decentralized Decision Pattern.
In any
given round r, we can distinguish processes that can man-
age the decision and decide autonomously from those that
cannot. Processes in the ﬁrst set can test a decision predicate
and must receive the necessary messages for this analysis;
let us call this set X and its cardinality x. The second set is
composed by processes that just wait for the decision, that
is sent to them by processes belonging to X. In the classical
CT-consensus, X is composed uniquely by the coordinator
of round r, characterizing a centralized decision pattern [2].