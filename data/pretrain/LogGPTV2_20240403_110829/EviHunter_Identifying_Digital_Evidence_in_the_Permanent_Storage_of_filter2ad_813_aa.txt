# EviHunter: Identifying Digital Evidence in the Permanent Storage of Android Devices via Static Analysis

**Authors:**  
Chris Chao-Chun Cheng, Chen Shi, Neil Zhenqiang Gong, and Yong Guan  
Department of Electrical and Computer Engineering  
NIST Center of Excellence in Forensic Science - CSAFE  
Iowa State University  
{cccheng, cshi, neilgong, guan}@iastate.edu

## Abstract
Smartphones are increasingly involved in both physical and cyber crimes due to their ubiquity. Consequently, digital evidence on smartphones is becoming more critical for crime investigations. This evidence can be found in both the memory and permanent storage of a smartphone. While significant progress has been made in memory forensics, identifying evidence in the permanent storage remains an underdeveloped research area. Most existing studies rely on manual analysis or keyword-based scanning, which are either costly or often miss relevant data.

In this work, we introduce EviHunter, a tool that automatically identifies evidentiary data in the permanent storage of Android devices. EviHunter pre-computes an App Evidence Database (AED) through static analysis of a large number of apps. The AED includes the types of evidentiary data and the files where they are stored. EviHunter then matches the files on a smartphone's permanent storage against the A.E.D. to identify potential evidence. We evaluated EviHunter on benchmark and 8,690 real-world apps, demonstrating its ability to accurately identify both the types of evidentiary data and the files that store them.

**CCS Concepts:**  
- Applied computing → System forensics

**Keywords:**  
Digital Forensics, Mobile Device Forensics, Static Analysis

### Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

### Conference Information
CCS '18, October 15–19, 2018, Toronto, ON, Canada  
© 2018 Association for Computing Machinery.  
ACM ISBN 978-1-4503-5693-0/18/10...$15.00  
https://doi.org/10.1145/3243734.3243808

### ACM Reference Format
Chris Chao-Chun Cheng, Chen Shi, Neil Zhenqiang Gong, and Yong Guan. 2018. EviHunter: Identifying Digital Evidence in the Permanent Storage of Android Devices via Static Analysis. In 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3243734.3243808

## 1 Introduction
Smartphones play an increasingly important role in investigating both cyber and physical crimes, as they are pervasive and capture both online and offline activities of their owners. For example, even several years ago when smartphones were less common, the number of crimes involving mobile phone evidence increased by 10% per year on average from 2006 to 2011 [33]. In 2017, a visiting scholar at the University of Illinois Urbana-Champaign was kidnapped. Through forensic examination of the suspect's smartphone, FBI agents found that the owner had visited websites about "perfect abduction fantasy" and "planning a kidnapping," which served as crucial digital evidence [42]. Similarly, in one of the largest poaching cases in Washington [14], suspects took pictures and videos of illegal animal killings. GPS locations from these images and videos led to dozens of kill sites where physical evidence (e.g., bullets) was found, and texts from the suspects' smartphones were used as digital evidence to corroborate charges.

Digital evidence on a smartphone can reside in the memory or permanent storage, such as flash storage or SD cards. Recently, tools like [37–40] have advanced memory forensics. However, identifying digital evidence in the permanent storage remains an underdeveloped research area. While memory forensics can reconstruct a smartphone's context over a short period, permanent-storage forensics can uncover historical activities over a long period, as some criminal cases may span a wide range of dates and locations. In this work, we focus on permanent-storage forensics. Specifically, we address the problem of identifying which files, among the thousands on a suspect's smartphone, could store relevant evidentiary data (e.g., GPS locations, visited URLs, and texts). We call this the evidence identification problem. After identifying such files, forensic investigators can retrieve, decode, or reconstruct the evidentiary data from them.

### Existing Approaches and Their Limitations
Existing studies on the evidence identification problem mainly rely on manual analysis [9–11, 46] or keyword-based scanning [2, 3, 7, 17]. For instance, in keyword-based scanning, a file whose name or content includes keywords like "GPS," "latitude," or "longitude" is labeled as a potential source of GPS locations. Manual analysis is time-consuming and error-prone, while keyword-based scanning misses files that do not include the specified keywords. Studies [23] have shown that keyword-based scanning can only identify a small fraction of files that could store evidentiary data.

### Our Work
In this work, we develop EviHunter, a tool that automatically identifies files on an Android device that could store evidentiary data. Our intuition is that the files and data on a smartphone are produced by apps, and an app's code contains rich information about the types of data it writes to the file system and the files where this data is stored.

EviHunter takes an offline-online approach. In the offline phase, EviHunter builds an App Evidence Database (AED) for a large number of apps using static data flow analysis. For each app, the AED includes the files that could store evidentiary data and the types of data (e.g., location, visited URL, text input, and time) in each file, represented by their complete file paths on Android. We use static analysis instead of dynamic analysis to achieve high coverage and reduce the likelihood of missing files that could contain evidentiary data. In the online phase, given a smartphone, EviHunter matches the file paths on the smartphone's file system against those in the AED to identify potential evidence.

### Building the AED
Building the AED is a key challenge for EviHunter. Many static analysis tools, such as CHEX [30], FlowDroid [12], AmanDroid [45], DroidSafe [21], R-Droid [13], IccTA [28], and HornDroid [15], have been developed to detect sensitive data flows between sources and sinks in Android apps. These tools were designed to detect data flowing from certain sources to sinks, but they do not consider the files where the data are written. For example, these tools can detect that an app will collect GPS locations and save them to the file system, but they do not report the specific files where the GPS locations are written. This is because these tools were primarily designed for security and privacy purposes, where the specific files are less relevant.

To address this challenge, EviHunter extends existing static data flow analysis techniques for Android in several ways:
1. **Tagging**: In some existing tools, a tag is associated with a variable to represent the types of sensitive data. We extend this tag to include both the types of sensitive/evidentiary data and the file path associated with the variable.
2. **Propagation Rules**: We extend the propagation rules to spread both the types of evidentiary data and file paths as we analyze the statements in an app.
3. **Multi-threading and Reflection**: We leverage techniques developed by HornDroid [15] to partially address multi-threading and reflection.
4. **API Semantics**: For complexity considerations, we manually summarize the semantics for commonly used system APIs, as previous tools have done [12, 30, 45]. Additionally, we summarize the semantics of system APIs for file path construction, which were not considered by previous tools.
5. **Source Methods**: We extend the sources by uncovering the source methods for file path construction and new sources for sensitive/evidentiary data, including location, visited URL, and time.

### Implementation and Evaluation
In implementing EviHunter, we use Soot to transform an Android app into Jimple code (a three-address intermediate representation), IC3 [16] to build inter-connected component communication models, and FlowDroid [12] to build call graphs and entry points. EviHunter then performs forward analysis of the Jimple code.

We evaluate EviHunter using:
1. Benchmark apps in DroidBench [1] that have file-system sinks.
2. New benchmark apps designed to test scenarios not covered by DroidBench.
3. 8,690 real-world apps.

Our results show that EviHunter can precisely and accurately find the files that could store evidentiary data for benchmark apps. We also performed a best-effort manual verification of the results for 60 randomly sampled real-world apps, achieving a precision of 90% and a recall of 89% in identifying files that could contain evidentiary data. Although our work does not focus on privacy leakage, our results have interesting privacy implications. For example, we found that some apps save GPS locations, visited URLs, and text inputs on the external storage of an Android device. An app with the `READ_EXTERNAL_STORAGE` permission can access this data to track and profile the user. Finally, we use a case study to demonstrate how a forensic investigator can use EviHunter to find evidentiary data on a smartphone.

### Summary of Contributions
- **EviHunter Tool**: We develop EviHunter to automatically identify files on an Android device that could contain evidentiary data.
- **Static Analysis Extension**: We extend existing static analysis tools for Android to detect both the types of evidentiary data an app could write to the file system and the files where the data are written.
- **Evaluation**: We evaluate EviHunter using both benchmark and real-world apps, demonstrating high precision and recall.

## 2 Background and Problem Formulation
### 2.1 Android File System
#### Directory Structure
The Android file system pre-defines several top-level directories, such as `/data/` and `/sdcard/`. The `/data/` directory is on the internal storage, while `/sdcard/` is linked to the external storage. Each app has a default directory `/data/data/<package_name>/`, where `<package_name>` is the app's identifier. For example, the Facebook app's package name is `com.facebook.katana`, and an Android device will create a directory `/data/data/com.facebook.katana/` after the app is installed. This directory stores various data for the app.

Android also pre-defines several APIs for getting file paths, as shown in Table 1.

| API | Description |
| --- | --- |
| `getDataDirectory()` | Returns a `File` object with the path `/data/` |
| `getCacheDir()` | Returns a `File` object with the path `/data/data/<package_name>/cache/` |
| `getFilesDir()` | Returns a `File` object with the path `/data/data/<package_name>/files/` |
| `getFileStreamPath(String arg0)` | Returns a `File` object with the path `/data/data/<package_name>/files/` |
| `openFileOutput(String arg0, int arg1)` | Returns a `FileOutputStream` object with the path `/data/data/<package_name>/files/` |
| `getDataDir()` | Returns a `File` object with the path `/data/data/<package_name>/databases/` |
| `openOrCreateDatabase(String arg0, ... )` | Returns a `SQLiteDatabase` object with the path `/data/data/<package_name>/databases/` |
| `openDatabase(String arg0, ... )` | Returns a `SQLiteDatabase` object with the path `/data/data/<package_name>/databases/` |
| `getSharedPreferences(String arg0, int arg1)` | Returns a `SharedPreferences` object with the path `/data/data/<package_name>/shared_prefs/.xml` |
| `getDefaultSharedPreferences(Context arg0)` | Returns a `SharedPreferences` object with the path `/data/data/<package_name>/shared_prefs/_preferences.xml` |
| `getPreferences(int arg0)` | Returns a `SharedPreferences` object with the path `/data/data/<package_name>/shared_prefs/1.xml` |
| `getDir(String arg0, int arg1)` | Returns a `File` object with the path `/data/data/<package_name>/app_/` |
| `openOrCreateDatabase(File arg0, ... )` | Returns a `SQLiteDatabase` object with the path `""` |
| `getExternalStorageDirectory()` | Returns a `File` object with the path `/sdcard/` |
| `getExternalStoragePublicDirectory(String arg0)` | Returns a `File` object with the path `/sdcard/`, if `arg0` is empty. Otherwise, returns `/sdcard/arg0/` |
| `getObbDir()` | Returns a `File` object with the path `/sdcard/Android/obb/<package_name>/` |
| `getExternalCacheDir()` | Returns a `File` object with the path `/sdcard/Android/data/<package_name>/cache/` |
| `getExternalFilesDir(String arg0)` | Returns a `File` object with the path `/sdcard/Android/data/<package_name>/files/`, if `arg0` is empty. Otherwise, returns `/sdcard/Android/data/<package_name>/files/arg0/` |

### 2.2 Problem Formulation
Given the structure of the Android file system, the problem of identifying digital evidence in the permanent storage can be formulated as follows: Given a set of files on an Android device, determine which files could potentially store evidentiary data. This involves understanding the types of data that each app might write to the file system and the specific files where this data is stored.