### Rendezvous Point (RP) Controlled by the Attacker

The attacker controls a rendezvous point (RP) with the aim that some circuits pass through a second node (the middle node), also controlled by the attacker. The RP generates traffic with a special signature that can be identified by the attacker's middle node. The steps of the attack are the same as those described in Section VI.

Asymptotically, the probability that the attacker’s middle node is chosen for the rendezvous circuit approaches 1. When the rendezvous point receives a `RELAY_COMMAND_RENDEZVOUS1` cell with the same cookie as the one sent in the `RELAY_COMMAND_INTRODUCTION1` cell, it logs the reception and the IP address of the immediate transmitter of the cell. Simultaneously, the attacker’s middle node monitors the circuits passing through it. Whenever it receives a `DESTROY` cell over a circuit, it checks the following conditions:

1. Whether the `DESTROY` cell was received immediately after the rendezvous point received the `RELAY_COMMAND_RENDEZVOUS1` cell.
2. Whether the next node of the circuit at the middle node matches the previous node of the circuit at the rendezvous point.
3. Whether the number of forwarded cells is exactly 2 cells up the circuit and 52 cells down the circuit.

If all these conditions are met, the attacker concludes that her middle node was chosen for the hidden service’s rendezvous circuit and marks the previous node in the circuit as a potential guard node of the hidden service.

### Implementation and Results

We implemented the attack and tested it against two hidden services operated by us. In both cases, the guard nodes were correctly identified without any false positives. In the first case, the rendezvous point received approximately 36,000 `RELAY_COMMAND_RENDEZVOUS1` cells in 1 hour and 20 minutes, and the correct guard nodes were identified 8, 6, and 5 times, respectively. In the second case, the rendezvous point received 16,000 `RELAY_COMMAND_RENDEZVOUS1` cells in 40 minutes, and the correct guard nodes were identified 5, 2, and 1 times, respectively.

We also used this approach to identify the guard nodes of a botnet hidden service. Note that in this attack, an attacker can use just one middle node and send the traffic signature as a client. However, this requires building rendezvous circuits, which prolongs the attack. The same applies to the attack presented in Section VI.

### Discussion and Potential Countermeasures

We propose two countermeasures to enhance the robustness of distributed storage of hidden service descriptors:

1. **Prevent Directory Authorities from Learning Hidden Service Descriptors:**
   This prevents hidden services from harvesting descriptors to learn more onion addresses. Our proposed change makes the position of the responsible hidden service directories in the directory fingerprint ring unpredictable, removing the opportunity for targeted attacks. Attackers can no longer precompute identity keys to target hidden services for popularity measurements or to deny service by selectively running relays with those keys.

2. **Mandatory Descriptor-Cookie Authentication:**
   Harvesting can be prevented by making descriptor-cookie authentication mandatory for all hidden services and base32 encoding the value as part of the URL along with the permanent ID. The downside is reduced usability, as users would have to deal with 42-character onion addresses instead of 16-character ones.

To prevent adversaries from efficiently targeting hidden service directories, we propose the following changes:
- For each hour, an unpredictable value is derived by the directory authorities from a shared secret. Three of these values are included in the consensus, one for each hour the consensus is valid.
- The unpredictable value valid for the hour of the request is included in the calculation of the descriptor ID, determining the storage location on the ring. This makes it impossible for an attacker to precompute identity keys for time periods more than three hours ahead.

Additionally, directory authorities should base the decision on whether a relay is assigned an HSDir flag on the number of past consecutive consensus documents the relay has been listed in, rather than on the uptime of the relay. This prevents the shadowing attack described earlier.

To further protect guard nodes, an additional layer of guard middle nodes can be used. This countermeasure, though not yet implemented in Tor, has been proposed in [19]. Note that this measure will not protect against an attacker exploiting degree anomalies of the guard nodes, as described in Section B.

Unfortunately, we do not see a way to completely eliminate the risk of guard nodes being able to deanonymize a hidden service. Recent work by Tariq et al. [9] suggests that the guard compromise rate can be decreased by (1) extending the guard rotation interval and (2) considering how long nodes have been part of the network when assigning Guard flags. However, this approach, if not carefully implemented, has downsides such as reduced end-user quality of experience and the potential for malicious nodes to accumulate Tor users.

### Conclusion

We have analyzed the security properties of Tor hidden services and demonstrated that large-scale deanonymization attacks are practically possible with only moderate resources. We showed that collecting the descriptors of all Tor hidden services is possible in approximately two days with less than USD 100 in Amazon EC2 resources. Running one or more guard nodes allows an attacker to correlate hidden services to IP addresses using a simple traffic analysis attack. Furthermore, attackers can impact the availability and sample the popularity of arbitrary hidden services not under their control by selectively becoming their hidden service directories.

To address these vulnerabilities, we have proposed countermeasures that prevent hidden service directories from learning the content of any descriptors unless they also know the corresponding onion address and significantly increase the resources required to selectively become a hidden service directory for a targeted hidden service. However, these suggestions are stop-gap measures, and we believe that the problems we have shown warrant a careful redesign of Tor’s hidden services.