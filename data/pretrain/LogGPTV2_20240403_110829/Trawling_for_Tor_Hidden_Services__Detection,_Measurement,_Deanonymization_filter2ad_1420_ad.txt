rendezvous point (RP) controlled by the attacker in hope
that some circuits pass through the second node (the middle
node) controlled by the attacker. The RP generates trafﬁc
with a special signature which can be identiﬁed by the
attacker’s middle node. The steps of the attack are the same
as in section VI.
Asymptotically, the probability that the attacker’s mid-
dle node is chosen for
the rendezvous circuit, ap-
proaches 1. Whenever the rendezvous point receives a
RELAY_COMMAND_RENDEZVOUS1 with the same cookie as
the attacker sent in the RELAY_COMMAND_INTRODUCTION1
cell it logs the reception and the IP address of the immediate
transmitter of the cell. At the same time, the attacker’s mid-
dle node monitors the circuits passing through it. Whenever
it receives a DESTROY cell over a circuit it checks:
1) whether the cell was received just after the rendezvous
point received the RELAY_COMMAND_RENDEZVOUS1
cell;
2) if the next node of the circuit at the middle node
coincides with the previous node of the circuit at the
rendezvous point;
3) whether the number of forwarded cells is exactly 2
cells up the circuit and 52 cells down the circuit.
If all the conditions are satisﬁed, the attacker decides
that her middle node was chosen for the hidden service’s
rendezvous circuit and marks the previous node in the circuit
as a potential guard node of the hidden service.
We implemented the attack and ran it against two hidden
services operated by us. In both cases the guard nodes
were identiﬁed correctly, without any false positives. In the
ﬁrst case, the rendezvous point received around 36 000
RELAY_COMMAND_RENDEZVOUS1 cells in 1 hour 20 minutes
and the correct guard nodes were identiﬁed 8, 6, and 5 times
correspondingly. In the seconds case, the rendezvous point
received 16 000 RELAY_COMMAND_RENDEZVOUS1 cells in
40 minutes and the correct guard nodes were identiﬁed 5,
2, and 1 times respectively.
We also used this approach to identify the guard nodes of
the botnet hidden service. Note that in the attack described
in this section an attacker can use just one middle node and
send the trafﬁc signature as a client. However it requires
building rendezvous circuits which makes the attack longer.
The same applies to the attack presented in section VI.
VIII. DISCUSSION AND POTENTIAL COUNTERMEASURES
We propose two countermeasures to make distributed
storage of the hidden service descriptors more robust. The
89
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
ﬁrst of these prevents the directory authorities from learning
the contents of hidden services descriptors they are serving.
This prevents hidden services from harvesting descriptors to
learn more onion addresses. Our second proposed change
makes the position of the responsible hidden service di-
rectories in the directory ﬁngerprint ring unpredictable for
any hidden service. This removes the opportunity of target-
ing hidden service directories. Henceforth attackers can no
longer precompute identity keys to target hidden services
for popularity measurements and to deny service to them by
selectively running relays with those keys.
Harvesting can be easily prevented by making the
descriptor-cookie authentication [15] mandatory for all
hidden services and base32 encoding the value as part of
the URL together with the permanent-id. The downside
of this change is a signiﬁcantly reduced usability: instead of
16 character onion addresses the user now has to deal with
onion-addresses that are 42 characters long.
In order to prevent adversaries from efﬁciently targeting
hidden service directories we propose the following changes:
For each hour, an unpredictable value is derived by the
directory authorities from a shared secret. Three of these
values are included in the consensus – one for each of the
hours the consensus is valid.
The unpredictable value valid for the hour of the request
is then included in the calculation of the descriptor ID
and henceforth determines the place on the ring where the
descriptor is stored. This makes it impossible for an attacker
to precompute identity keys for time periods further ahead
than 3 hours in the future.
Additionally, directory authorities base the decision on
whether a relay is assigned an HSDir ﬂag on the number
of past consecutive consensus documents the relay has been
listed in and not on the uptime of the relay. This prevents
the shadowing attack we have described.
To prevent the guard nodes being revealed, one can use
an additional layer of guard nodes – guard middle nodes.
This countermeasure has already been proposed in [19] but
is not implemented in Tor. Note that this measure will not
protect against an attacker exploiting degree anomalies of
the guard nodes as described in Section B.
Unfortunately, we do not see how the risk of guard nodes
being able to deanonymize a hidden service having chosen
them can be eliminated completely. Recent work by Tariq
et al. [9] suggests that the guards compromise rate can be
decreased by (1) making the guard rotation interval longer
and (2) by taking into account how long nodes have been
part of the network when assigning Guard ﬂags to them.
Note that this approach if not carefully implemented has
a number of downsides like reduced end-user quality of
experience and malicious nodes accumulating Tor users.
In regard to revealing the introduction circuits, if the
attacker will not be able to collect the full list of hidden
service descriptors, she will not be able to distinguish be-
tween introduction circuit of hidden services with encrypted
introduction points and non-encrypted.
IX. CONCLUSION
We have analyzed the security properties of Tor hidden
services and shown that attacks to deanonymize hidden
services at a large scale are practically possible with only
a moderate amount of resources. We have demonstrated
that collecting the descriptors of all Tor hidden services is
possible in approximately 2 days by spending less than USD
100 in Amazon EC2 resources. Running one or more guard
nodes then allows an attacker to correlate hidden services
to IP addresses using a primitive trafﬁc analysis attack.
Furthermore, we have shown that attackers can impact the
availability and sample the popularity of arbitrary hidden
services not under their control by selectively becoming their
hidden service directories.
To address these vulnerabilities we have proposed coun-
termeasures. These prevent hidden service directories from
learning the content of any the descriptors unless they also
know their corresponding onion address and signiﬁcantly
increase the resources required to selectively become a
hidden service directory for a targeted hidden service.
However, note that the above suggestions are nothing
more than stop-gap measures. We believe that the problems
we have shown are grave enough to warrant a careful
redesign of Tor’s hidden services.
REFERENCES
[1] ANONYMOUS. IAmA a malware coder and botnet operator,
http://www.reddit.com/r/IAmA/comments/sq7cy/
April
AMA.
iama a malware coder and botnet operator ama/,
2012.
[2] BAUER, K. S., MCCOY, D., GRUNWALD, D., KOHNO, T.,
AND SICKER, D. C. Low-resource routing attacks against
Tor. In WPES (2007), P. Ning and T. Yu, Eds., ACM, pp. 11–
20.
[3] BIRYUKOV, A., PUSTOGAROV, I., AND WEINMANN, R.-
P. TorScan: Tracing long-lived connections and differential
scanning attacks.
In ESORICS 2012, S. Foresti, M. Yung,
and F. Martinelli, Eds., vol. 7459 of LNCS. Springer, 2012,
pp. 469–486.
[4] BROWN, D. Resilient botnet command and control with Tor.
DefCon 18, https://www.defcon.org/images/defcon-18/dc-
18-presentations/D.Brown/DEFCON-18-Brown-TorCnC.pdf,
July 2010.
[5] CHRISTIN, N.
Traveling the silk road: A measurement
analysis of a large anonymous online marketplace. CoRR
abs/1207.7139 (2012).
[6] DARROCH, J. N., AND SENETA, E. On quasi-stationary dis-
tributions in absorbing continuous-time ﬁnite Markov chains.
Journal of Applied Probability 4, 1 (1967), pp. 192–196.
90
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
[7] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. F.
Tor: The second-generation onion router. In USENIX Security
Symposium (2004), USENIX, pp. 303–320.
[21] POLLETT, P. K. Analytical and computational methods for
modelling the long-term behaviour of evanescent random
processes, June 1993.
[8] DOUCEUR, J. R. The Sybil attack.
In IPTPS 2002 –
Peer-to-Peer Systems, First International Worksho (2002),
P. Druschel, M. F. Kaashoek, and A. I. T. Rowstron, Eds.,
vol. 2429 of Lecture Notes in Computer Science, Springer,
pp. 251–260.
[9] ELAHI, T., BAUER, K., ALSABAH, M., DINGLEDINE, R.,
AND GOLDBERG, I. Changing of the guards: A framework
for understanding and improving entry guard selection in Tor.
In Proceedings of the Workshop on Privacy in the Electronic
Society (WPES 2012) (2012), ACM, pp. 43–54.
[10] ELICES, J., PEREZ-GONZALEZ, F., AND TRONCOSO, C.
Fingerprinting Tor’s Hidden Service Log Files Using a Tim-
ing Channel. In WIFS 2011 – 3rd IEEE International Work-
shop on Information Forensics and Security (2011), IEEE.
[11] G DATA SECURITY.
Botnet command server hidden
http://blog.gdatasoftware.com/blog/article/botnet-
in Tor.
command-server-hidden-in-tor.html, September 2012.
[12] GUARNIERI, C. Skynet, a Tor-powered botnet straight from
https://community.rapid7.com/community/infosec/
Reddit.
blog/2012/12/06/skynet-a-tor-powered-botnet-straight-from-
reddit, December 2012.
[13] JANSEN, R., AND HOPPER, N. Shadow: Running Tor in a
In NDSS
Box for Accurate and Efﬁcient Experimentation.
2012 – Proceedings of the Network and Distributed System
Security Symposium (2012), Internet Society.
[14] LIPMAN, D. H.
Mailing
vwfws4obovm2cydl.onion ?”.
pipermail/tor-talk/2012-June/024565.html, June 2012.
list
post:
”[tor-talk]
https://lists.torproject.org/
[15] LOESING, K. Privacy-enhancing Technologies for Private
Services. PhD thesis, University of Bamberg, May 2009.
[16] MANDL, P. Sur le comportement asymptotique des prob-
abilites dans les ensembles de etats dune chaine de Markov
homogeene (Russian). Casopis Pest. Mat. 84 (1959), pp. 140–
149.
[17] MICAH, M. W., WRIGHT, M., ADLER, M., AND LEVINE,
B. N. Defending anonymous communications against passive
logging attacks. In Proceedings of the 2003 IEEE Symposium
on Security and Privacy (2003), pp. 28–41.
[22] SCHUMER, C. E., AND MANCHIN,
Press
release: Manchin
to
shut
drugs.
http://manchin.senate.gov/public/index.cfm/2011/6/manchin-
urges-federal-law-enforcement-to-shut-down-online-black-
market-for-illegal-drugs, Jun 2011.
law enforcement
black market
online
urges
federal
for
illegal
down
J.
[23] SENETA, E. Quasi-stationary behaviour in the random walk
with continuous time. Australian Journal of Statistics 8, 2
(1966), 92–98.
[24] SHEBARO, B., PEREZ-GONZALEZ, F., AND CRANDALL,
J. R. Leaving timing-channel ﬁngerprints in hidden service
log ﬁles. Digital Investigation 7 (2010), pp. 104–113.
[25] THE TOR PROJECT.
Tor Rendezvous Speciﬁcation.
https://gitweb.torproject.org/torspec.git?a=blob plain;hb=
HEAD;f=rend-spec.txt, accessed on November 13th, 2012.
[26] ZANDER, S., AND MURDOCH, S. J. An improved clock-
skew measurement technique for revealing hidden services.
In USENIX Security Symposium (2008), pp. 211–226.
APPENDIX
A. The Inﬂuence of Shadow Relays on the Flag Assignment
During the second harvesting experiment we accidentally
revealed an important artifact of the ﬂag assignment in Tor
which is not obvious from the Tor speciﬁcations. Near the
end of the experiment we were notiﬁed by the Tor developers
that the Sybil attack had caused a spike in the number of
relays assigned Fast ﬂags and Guard ﬂags (see Fig. 6)


	
	 
! 	





















[18] MURDOCH, S. J. Hot or not: Revealing hidden services by
their clock skew. In 13th ACM Conference on Computer and
Communications Security (2006), ACM Press, pp. 27–36.

	
	
	







[19] ØVERLIER, L., AND SYVERSON, P. Locating hidden servers.
In Proceedings of the 2006 IEEE Symposium on Security and
Privacy (2006), IEEE Computer Society, pp. 100–114.
[20] ØVERLIER, L., AND SYVERSON, P. F. Valet services:
Improving hidden servers with a personal touch.
In PET
2006 – Privacy Enhancing Technologies (2006), G. Danezis
and P. Golle, Eds., vol. 4258 of Lecture Notes in Computer
Science, Springer, pp. 223–244.
Figure 6.
Increase in the number of Guard nodes.
This happened because the shadow relays were taken
into account for calculating medians of the bandwidth and
the uptime. From these values, thresholds are derived that
determine the ﬂag assignment of all relays. According to the
Tor speciﬁcation:
91
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:23 UTC from IEEE Xplore.  Restrictions apply. 
... A router is a possible Guard if its Weighted
Fractional Uptime is at least the median for famil-
iar active routers, and if its bandwidth is at least
median or at least 250KB/s.
To calculate weighted fractional uptime, com-
pute the fraction of time that the router is up in
any given day, weighting so that downtime and
uptime in the past counts less.
A node is familiar if 1/8 of all active nodes
have appeared more recently than it...
In our second experiment, we caused the authorities
to take into account 1392 shadow relays of bandwidth 0
Bytes/sec and 1 Bytes/sec. This signiﬁcantly changed the
medians for both bandwidth and uptime, which allowed
many already running relays to get the Guard ﬂag. During
the harvesting experiment, this caused the number of Guard
nodes to suddenly increase by 500.
The artifact has been patched in tor v0.2.4.10-alpha by
ignoring Sybil relays when assigning ﬂags. However, it is
important to note that a more expensive version of the same
Sybil attack is still possible. For example, an attacker could
rent a large number of EC2 instances, running 2 Tor relays
on each. This would enable attackers’ Tor relays to decrease
the value of the median for the Weighted Fractional Uptime
as well as the bandwidth median, allowing to obtain the
Guard ﬂag for her relays much faster. For example, in order
to inject 1200 Tor relays, an attacker would need to run 600
EC2 instances, spending only 288 USD per 24 hours.
B. Anomalies in the Tor Network Topology
If the list of introduction points of a hidden services is
encrypted, it is not possible to make the hidden service
establish rendezvous circuits (as was described in Section
VII). In order to reveal the guard nodes of a popular hidden
service in this case, an attacker can use another attack. The
condition for this attack is that the hidden service has many
clients which establish long-lived (approx. 1-2 hours or
longer) connections. This is the case of the botnet described
in previous sections; connections to its IRC hidden service
are long-lived.
Our measurements show that currently only a small frac-
tion of all hidden services use encrypted descriptors. How-
ever we believe that this is an important case to study since
encrypted descriptors offer signiﬁcant additional protection
and in the original draft of the Tor hidden services protocol
all descriptors were supposed to be hidden.
Popularity of a hidden service, i.e. a large number of
clients connecting to it, creates additional load on its guards
nodes. This changes the topological properties of the guard
nodes in terms of their degree 12 and in terms of the decay
rate of persistent connections (in comparison to the case
12The degree of a Tor relay denotes the number of TLS connections
established between a given relay and other relays.
when the guard nodes are not used by a popular hidden
service). In particular:
• the degree of the guard nodes of such a service will
depend on the number of clients. The deviation of a
node’s degree from the expected value can serve as an
indication of a popular hidden service;
• if clients make persistent connections to the hidden ser-
vice (which is the case with botnet where IRC channel
is used) the decay rate of the persistent connections of
the HS’s guard nodes will look substantially different
from that of other guard nodes with similar bandwidth.
We expect that the decay curve is much steeper in the
case of normal guard nodes.
In order to identify the guard nodes of a popular hidden
service we implement the following steps. We provide two
analytical models for (1) the expected degree and (2) the
expected persistent connections decay rate of a “normal”
guard node. We then use the scanning technique from [3]
to determine the real degrees of the guard nodes and their
persistent connections decay rates. Finally, we compare the
predicted values with those received from the measurements
and single out nodes with too high degrees and too slow
decay rates. The nodes we get are the candidates for the
guard nodes of the hidden service.
By persistent connections decay rate of a Tor relay we
mean the following: Assume that at time t0 the relay has
N TLS connections with other Tor relays. The decay rate
of these connections is a function of time which shows how
many of them remain connected at time t.