### Code Sample
```python
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv(file)

# Convert the 'Year', 'Month', 'Day', and 'Hour' columns to a datetime index
df.index = pd.to_datetime(df[['Year', 'Month', 'Day', 'Hour']])

# Identify and display the duplicated datetime indices
duplicates = df[df.index.duplicated()].index
print(duplicates)
```

### Output
```
DatetimeIndex(['2009-01-01 00:00:00', '2009-01-01 00:30:00',  
               '2009-01-01 01:00:00', '2009-01-01 01:30:00',  
               '2009-01-01 02:00:00', '2009-01-01 02:30:00',  
               '2009-01-01 03:00:00', '2009-01-01 03:30:00',  
               '2009-01-01 04:00:00', '2009-01-01 04:30:00',  
               ...  
               '2013-12-31 19:00:00', '2013-12-31 19:30:00',  
               '2013-12-31 20:00:00', '2013-12-31 20:30:00',  
               '2013-12-31 21:00:00', '2013-12-31 21:30:00',  
               '2013-12-31 22:00:00', '2013-12-31 22:30:00',  
               '2013-12-31 23:00:00', '2013-12-31 23:30:00'],  
              dtype='datetime64[ns]', length=175296, freq=None)
```

### Problem Description
The `duplicated()` function is returning indices that appear to be duplicated, even though the `datetime` values are unique at their native temporal resolution. I would expect this function to identify only true duplicates, where the exact `datetime` value appears more than once in the index.

### Expected Behavior
The `duplicated()` function should return `True` only for those `datetime` values that are exact duplicates, i.e., where the same `datetime` value appears more than once in the index.