### Main Reason for Contacting Charlie

The primary reason for contacting Charlie was to obtain an independent comparison of various fuzzer technologies. Both Jared and I had strong, often conflicting, opinions on the subject. For example, I have always been a proponent of syntax testing-based negative testing (also known as model-based fuzzing), which does not incorporate any random elements. In contrast, Jared was focused on evolutionary fuzzers. Initially, Charlie agreed to write a chapter, but he eventually became more deeply involved in the project, contributing almost one-third of the book. Interestingly, Charlie claims he wrote most of his contributions while traveling, specifically during airplane flights.

### Goals and Audience

Our goal was to create a resource that could serve as a course book at universities and a practical reference for both quality assurance (QA) engineers and security specialists. We believe we achieved this quite well. The issue with other available books is that they tend to target either security professionals, QA experts, or, very rarely, management. However, fuzzing is not solely about security; it is also used in closed environments where there are no security threats. Fuzzing is a convergence of security practices into QA practices, and vice versa. This is evident in our 100+ global customers from various industries, where fuzzing is a collaborative effort between security and QA teams.

### Ongoing Developments and Future Editions

Many topics were left out of this edition, but we hope this will motivate readers to support future editions. This book will never be complete, as new techniques and tools are constantly being developed. For instance, in 2007 and early 2008, several new fuzzing techniques were introduced, such as the PROTOS Genome. Additionally, commercial companies like Wurldtech and Codenomicon continue to evolve their offerings. Academic and security experts are also releasing new frameworks and tools, such as the FuzzGuru available through OWASP.

We promise to track these developments and update both this book and our dedicated fuzzing website (www.fuzz-test.com). We encourage you to provide feedback, whether positive or negative, so that together we can make this a valuable resource for advancing software development towards greater reliability and dependability.

### Acknowledgments

#### From Ari Takanen

I want to express my gratitude to my family for their unwavering support, even when the project required long hours away from home. Combining multiple book projects, running a security company, and traveling extensively for conferences and customer meetings has been challenging, and I am grateful for their understanding.

I am forever indebted to Marko Laakso and Prof. Juha Röning from the University of Oulu for showing me the vulnerabilities in communication technologies and the lack of a one-size-fits-all solution. My time as a researcher at the OUSPG was invaluable for learning about communications security.

A huge thank you to my colleagues at Codenomicon for taking the OUSPG work further and making it possible for me to write this book. Special thanks to Heikki and Rauli. I also appreciate all the users of Codenomicon robustness testing tools and PROTOS test-suites, especially those who shared their experiences and insights. Special thanks to Sven Weizenegger for his valuable input on real-life penetration testing.

I extend my gratitude to everyone at Artech House and all those who helped with editing and reviewing, and to Dr. Boris Beizer and Michael Howard for their insightful comments.

Finally, thank you, Jared and Charlie, for joining me in this project. Despite the challenges, it was a rewarding and enjoyable experience.

#### From Jared DeMott

I would like to thank God and all the people who have shaped my life. Special thanks to Ari, Charlie, and Artech for keeping the book project on track. I am grateful to my wife and two energetic boys for their support, and to our parents for providing much-needed breaks and support.

Our aim is to provide readers with a comprehensive view of computing, security, software development, and an in-depth understanding of fuzzing, a dynamic branch of software testing.

#### From Charlie Miller

I would like to thank my family for their love and support, and JRN, RS, JT, OB, and EC for teaching me about fuzzing. Finally, thanks to Michael Howard for his insightful comments during the editing process.

### Chapter 1: Introduction

Welcome to the world of fuzzing! Fuzzing is a highly automated testing technique that sends anomalous data to a system to reveal reliability issues. It is widely used by both security and QA experts, although some misconceptions still exist regarding its capabilities, effectiveness, and practical implementation.

Fuzzing can be defined as:

"A highly automated testing technique that covers numerous boundary cases using invalid data (from files, network protocols, API calls, and other targets) as application input to better ensure the absence of exploitable vulnerabilities. The name comes from modem applications’ tendency to fail due to random input caused by line noise on 'fuzzy' telephone lines."

Before delving deeper into fuzzing, it's important to understand your motivation. If you are reading this, you likely want to find bugs in software, particularly those with security implications. There are generally three purposes for seeking these defects:

1. **Quality Assurance (QA):** Testing and securing internally developed software.
2. **System Administration (SA):** Testing and securing software in your usage environment.
3. **Vulnerability Assessment (VA):** Testing and attempting to break into someone else’s software or system.

This book aims to provide a comprehensive view of fuzzing from all these perspectives. No matter your purpose, this book is designed to be a valuable resource. We will explore fuzzing from the perspective of developers, enterprise end-users, and third-party assessment teams, including both white-hat and black-hat hackers.

### Why Fuzzing?

Fuzzing is a powerful tool for discovering security-critical problems in software. While code auditing tools may find more flaws, many of these are false positives. Fuzzing, on the other hand, produces no false positives. A crash is a crash, and a bug is a bug. Most bugs found through fuzzing are exploitable, at least resulting in a denial of service. Fuzzing is especially useful for analyzing closed-source, off-the-shelf software and proprietary systems, as it does not require access to source code.

In this chapter, we will provide an overview of fuzzing and related technologies, explore why security mistakes happen, and how current security measures fail to protect against them. We will discuss how fuzzing can help by introducing proactive tools that anyone can use to find and eliminate security holes. We will also look at where fuzzing is currently used and why, and review the history of fuzzing to understand the evolution of various techniques.

### 1.1 Software Security

Fuzzing is an excellent technique for rapidly and cost-effectively finding security-critical flaws in software. Unfortunately, it is not always used where it should be, leading to many insecure systems. One fact is clear: software will always have security problems. Almost all software can be hacked easily. However, by becoming familiar with software security and related techniques, you can make a difference in the number of security flaws that remain in software.

### 1.1.1 Security Incidents

The main motivation for software security is to avoid security incidents, which include active attacks and accidental events. Active compromises are the primary concern for fuzzing. Accidental incidents, such as software misconfiguration or bit flips due to alpha particles or cosmic rays, are rare and typically only affect large-scale data handlers like telecommunication providers.

### 1.1.2 Disclosure Processes

There are hundreds of software flaws waiting to be found. The disclosure of these vulnerabilities can follow three models:

1. **No Disclosure:** No details of the vulnerability are disclosed publicly. This is common for internally found vulnerabilities.
2. **Partial Disclosure:** The nature of the correction and possibly a workaround are disclosed. Hackers can often reverse-engineer the corrections.
3. **Full Disclosure:** All details, including exploitation techniques, are disclosed publicly. Users can then prioritize and address the vulnerabilities accordingly.

### 1.1.3 Attack Surfaces and Attack Vectors

Understanding how software vulnerabilities affect us and how they are exploited is crucial. By exploring attack surfaces and vectors, we can better defend against potential threats and ensure the security and reliability of our software.