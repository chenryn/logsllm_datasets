### Table 2: Downloads and Distinct MD5s from PPI Services (August 1, 2010 to February 1, 2011)

| PPI Service | Number of Downloads | Number of Distinct MD5s |
|-------------|---------------------|-------------------------|
| [Service A] | [Number of Downloads] | [Number of Distinct MD5s] |
| [Service B] | [Number of Downloads] | [Number of Distinct MD5s] |
| ...         | ...                 | ...                     |

### Clustering and Tagging Methodology

Existing clustering systems for domain names [26], HTTP requests [25], and similar communication patterns [11] are not sufficient for our needs. Our system must accommodate any type of Command and Control (C&C) communication, including custom binary protocols. Therefore, we use a simple, manual-based clustering method, with the intention of integrating more advanced approaches as needed.

#### Clustering Process
1. **Initial Clustering**: We group all executables with identical features into a single cluster, using the list of features as the initial cluster signature.
2. **Manual Merging**: We manually merge similar clusters, assigning the new cluster a signature that is the disjunction of the signatures of each merged cluster.
3. **Cluster Identification**: Using this process on the August 2010 data, we identified 57 clusters. The cluster signatures range from domain lists (which have limited value due to frequent updates) to binary and HTTP signatures that are more useful in the long term.

#### Tagging Process
1. **Prioritization**: We prioritize clusters by the total number of times they were milked.
2. **Tag Assignment**: For each cluster, we manually check if there is labeled traffic that matches the cluster signature in public repositories and malware analysis reports. If a match is found, we change the cluster tag to the publicly available name.
3. **Challenges**: This process is challenging due to the inconsistency in naming conventions used within the community. We were able to tag 35 out of the 57 clusters.

### Insights into the PPI Business

We present results from our infiltration by analyzing the executables collected. We began our milking operations on August 1, 2010, and by February 1, 2011, we had downloaded 1,060,895 client executables, yielding 9,153 distinct binaries over approximately 6 months. The modest proportion (0.8%) of unique executables is due to our frequent milking and the fact that our geo-diverse milking often retrieves the same executable from multiple locations.

### Top 20 Malware Families (August 2010)

| Family          | Total Executables | Distinct Executables | Days Seen | General Class   | PPI Services   |
|-----------------|-------------------|----------------------|-----------|-----------------|----------------|
| Rustock         | 61,017            | 11,758               | 31        | Spam            | LoaderAdv, GoldInstall |
| LoaderAdv-ack   | 60,770            | 10,045               | 31        | Clickfraud      | LoaderAdv, GoldInstall |
| Hiloti          | 10,045            | 8,194                | 31        | ?               | LoaderAdv, GoldInstall |
| Gleishug        | 7,620             | 5,802                | 31        | Clickfraud      | LoaderAdv, GoldInstall |
| Nuseek          | 5,802             | 16,101               | 30        | Botnet          | LoaderAdv, GoldInstall |
| Palevo2         | 16,101            | 15,403               | 29        | Infosteal       | LoaderAdv, GoldInstall |
| Securitysuite   | 15,403            | 3,684                | 29        | Fake AV         | LoaderAdv, GoldInstall |
| Zbot            | 3,684             | 5,723                | 29        | Infosteal       | LoaderAdv, GoldInstall |
| SmartAdsSol.    | 18,317            | 4,522                | 28        | Adware          | LoaderAdv, GoldInstall |
| Spyeye          | 4,522             | 4,732                | 26        | Infosteal       | LoaderAdv, GoldInstall |
| Securitysuite-avm | 4,732           | 2,974                | 25        | DDoS            | LoaderAdv, GoldInstall |
| Grum            | 2,974             | 4,893                | 20        | Botnet          | LoaderAdv, GoldInstall |
| Tdss            | 4,893             | 677                  | 20        | Botnet          | LoaderAdv, GoldInstall |
| Otlard          | 677               | 1,135                | 19        | ?               | LoaderAdv, GoldInstall |
| Blackenergy1    | 1,135             | 2,594                | 16        | Botnet          | LoaderAdv, GoldInstall |
| Palevo          | 2,594             | 1,617                | 15        | Botnet          | LoaderAdv, GoldInstall |
| Harebot         | 1,617             | 1,617                | 14        | Botnet          | LoaderAdv, GoldInstall |

### Family Classification

We developed a set of classification signatures based on extensive manual analysis of 313,791 executables milked during August 2010. These signatures classify 92% of the total August downloads. When applied to September and October 2010, the classification rate diminishes to 86% and 77%, respectively. This indicates that the power of such milk-derived signatures decays relatively slowly over time.

For the 8% of August downloads unmatched by our signatures, we assigned a general label reflecting the absence of any generated traffic. Manual evaluation of 243 executables in this group confirmed that these executables appear corrupted and do not execute. We also ran most of them on bare hardware to confirm that their failure to execute was not due to anti-virtualization checks.

While our signatures work effectively for classifying the bulk of downloads, the picture changes when considering distinct binaries (only 0.6% of the overall volume). For these, we classify only 36%. However, this figure may not be significant, as a single unclassified malware specimen can account for many distinct binary failures if it is frequently repacked.

### Repacking Rate

The rate at which malware distributors repack their products reflects their concern about content-driven antivirus (AV) signatures. In the August 2010 milk, a malware family is repacked on average at least once every 11 days. Table 4 summarizes the individual repacking rates for the top 10 families (excluding crimeware kits) milked in August 2010. The top 10 families are repacked on average every 6.5 days, indicating that the most prevalent malware families are repacked more frequently than the average.

### Table 4: Repacking Rates for Top 10 Most-Milked Families (August 2010)

| Family          | Distinct Binaries | Mean Time to Repack (Days) | Min Time to Repack (Days) | Max Time to Repack (Days) |
|-----------------|-------------------|----------------------------|---------------------------|---------------------------|
| Rustock         | 15                | 2.12                       | 0.00                      | 2.21                      |
| LoaderAdv-ack   | 62                | 8.51                       | 0.00                      | 7.14                      |
| CLUSTER: A      | 8                 | 7.46                       | 0.00                      | 2.63                      |
| Hiloti          | 43                | 12.34                      | 0.76                      | 0.00                      |
| CLUSTER: B      | 9                 | 2.58                       | 0.00                      | 4.42                      |
| Gleishug        | 15                | 0.34                       | 0.00                      | 23.62                     |
| Nuseek          | 2                 | 3.57                       | 0.00                      | 8.60                      |
| Palevo2         | 21                | 14.08                      | 5.04                      | 23.13                     |
| Securitysuite   | 100               | 1.77                       | 0.00                      | 10.15                     |
| CLUSTER: D      | 1                 | 0.37                       | 0.00                      | 1.17                      |

This table shows the number of distinct binaries and the mean, minimum, and maximum time to repack for each family. A minimum time of zero indicates that one of the distinct executables appeared in only a single milking instance.