title:Attack Grammar: A New Approach to Modeling and Analyzing Network
Attack Sequences
author:Yinqian Zhang and
Xun Fan and
Yijun Wang and
Zhi Xue
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Attack Grammar: A New Approach to Modeling and Analyzing Network 
Attack Sequences  
Yinqian Zhang, Xun Fan, Yijun Wang, Zhi Xue 
School of Information Security Engineering, Shanghai Jiao Tong University  
Email: {jeffreyzhang, fancystar, ericwyj, zxue}@sjtu.edu.cn 
Abstract 
Attack  graphs  have  been  used  to  show  multiple 
attack  paths  in  large  scale  networks.  They  have  been 
proved to be useful utilities for network hardening and 
penetration  testing.  However,  the  basic  concept  of 
using graphs to represent attack paths has limitations. 
In this paper, we propose a new approach, the attack 
grammar, 
to  model  and  analyze  network  attack 
sequences.  Attack  grammars  are  superior  in  the 
following  areas:  First,  attack  grammars  express  the 
interdependency  of  vulnerabilities  better  than  attack 
graphs. They are especially suitable for the IDS alerts 
correlation. Second, the attack grammar can serve as a 
compact  representation  of  attack  graphs  and  can  be 
converted  to  the  latter  easily.  Third,  the  attack 
grammar 
logical 
formality  makes  it  better  comprehended  and  more 
easily analyzed. Finally, the algorithmic complexity of 
our  attack  grammar  approach  is  quartic  with  respect 
to the number of host clusters, and analyses based on 
the  attack  grammar  have  a  run  time  linear  to  the 
length  of  the  grammar,  which  is  quadratic  to  the 
number of host clusters.  
1. Introduction 
is  a  context-free  grammar.  Its 
Attack  graphs  are  useful  tools  to  visualize  multi-
step network attacks in graphs. They can be applied in 
both  offensive  applications  (penetration  testing)  and 
defensive scenarios (network hardening) [18]. Though 
ramifications  exist  in  attack  graph  representations, 
generations  and  analyses,  the  core  idea  remains  the 
same: “an attack graph shows the way an attacker can 
compromise a network or host [1].”  
Though  improved  gradually  over  the  years,  the 
studies  of  attack  graphs  still  have  a  number  of 
disadvantages that limit their usage. One  fundamental 
disadvantage  of  attack  graphs  is  the  complexity  in 
visualization  [18].  As  the  number  of  hosts  and 
vulnerabilities  increases,  the  complexity  of  attack 
graphs  boosts  rapidly,  preventing  the  administrator 
from understanding the graph and extracting remedies 
manually.  Moreover,  attack  graphs  contain  useless 
information  as  well.  For  example,  full  graphs  that 
in  which  attackers  can 
“illustrate  every  order 
compromise 
the  hosts 
in 
the  network”  [1]  are 
redundant by nature. Predictive graphs [3] and scenario 
graphs [14] also contain redundancies which make the 
analysis  of  attack  graphs  harder.  The  multiple-
prerequisite graph (MP graph) proposed in [1] is quite 
succinct.  But  it  is  only  a  middle-level  attack  graph 
which  means  that  in  order  to  obtain  every  potential 
attack  path  in  the  network  from  the  MP  graph,  one 
need  to  explore  the  graph  first.  Another  disadvantage 
of attack graphs lies in their limited application of IDS 
alerts correlation.  Attack graphs are constructed based 
on the interdependency of vulnerabilities, but  when it 
comes to IDS alerts correlation, which needs analyzing 
the  interdependency  of  vulnerabilities,  one  has  to 
extract information from attack graphs and reconstruct 
the interdependency relationships.  
In  this  paper  we  propose  a  new  technique  to 
complement  or  replace  attack  graphs,  the  attack 
grammar. The attack grammar is superior to the attack 
graph in many ways. First of all, it is more suitable in 
applications  like  IDS  alerts  correlation  than  attack 
graphs. IDS alerts or the corresponding vulnerabilities, 
can be regarded as letters in the attack grammar of the 
underlying  network.  To  correlate  alerts,  one  simply 
needs to run syntax checking algorithms on the attack 
grammar.  False  positives  and  false  negatives  can  be 
filtered out by syntax checking as  well. However, the 
attack  graph 
in  such  fields. 
Secondly, the attack grammar avoids the visualization 
problem  of  the  attack  graph.  It  can  be  deemed  as  a 
compact representation of the attack graph, because it 
can  be  converted  to  various  types  of  attack  graphs 
easily.  In  this  paper,  the  conversion  from  attack 
grammars 
to  both  middle-level  attack  graphs 
(expressing  attack  paths  implicitly)  and  low-level 
attack  graphs  (expressing  attack  paths  explicitly)  are 
less  competitive 
is 
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.34
DOI 10.1109/ACSAC.2008.34
205
215
discussed. Thirdly, the attack grammar is essentially a 
context-free  grammar.  It  is  a  formal  approach  and 
therefore  is  easier  to  understand,  analyze  and  extend. 
Furthermore,  the  approach  proposed  in  this  paper  is 
scalable with respect to the number of host clusters in 
the  network.  Algorithmic  complexity  in  the  attack 
grammar generation is proved to be quartic. And once 
the  grammar  is  fixed,  various  analyses  based  on  the 
attack grammar can be finished in time O(N2), where N 
is the number of host clusters. 
The remainder of this paper is organized as follows: 
In  section  2,  we  mainly  deal  with  definition  and 
construction  of  the  network  attack  model.  Section  3 
presents algorithms for construction and simplification 
of  attack  grammars.  Network  attack  sequences 
analyses  based  on  attack  grammars  are  presented  in 
section  4.  A  prototype  tool  is  described  in  section  5 
together  with  a  simple  example.  Scalability  of  the 
algorithm  and  results  of  a  simulation  test  are  also 
discussed  in  section  5.  Section  6  sums  up  previous 
works  related  to  this  paper.  Finally  in  section  7  we 
summarize our work and discuss future research areas. 
2. Network attack model 
2.1 Model Components 
2.1.1.  Hosts:  In  our  model,  a  host  can  be  any 
vulnerable entity in a network. Following Ingols et al 
[1],  each  host  has  multiple  interfaces,  and  each 
interface links to a logical subnet. We also assume that 
each  interface  has  multiple  open  ports  and  each  port 
has  zero  or  multiple  vulnerabilities,  which  belong  to 
local or remote accessible services and software. 
2.1.2. Reachability: The term “reachability” relates to 
the network connectivity between computers and ports. 
Following  Ritchey  and  Ammann  [11],  reachability  is 
calculated from a specific host to a specific open port 
on another host in the network, and the reachability is 
invariable in the model thereafter.  
2.1.3. Vulnerabilities: We use the term “vulnerability” 
to  refer  to  both  vulnerabilities  and  exposures  [2]. 
Therefore,  effects  of  vulnerabilities  in  this  paper  are 
not limited to obtaining system access but also include 
obtaining  system  information.  In  our  model,  we  use 
objects  to  model  the  preconditions  and  effects  of 
vulnerabilities. An object uses multi-dimension vectors 
to  describe  network  situations  in  order  to  quantify 
network conditions. 
Definition 2.1: An object is a data structure storing 
attackers’  capability  and  privilege.  An  object  is  a 
combination of multi-dimension vectors denoted as obj 
206216
(d1, d2, d3,…, di,…), where di  is the ith most significant 
dimension of the object.  
Definition 2.2: Comparison of objects is defined as 
follows:  If  d1k  >  d2k  holds  for  certain  k  and  d1i  =  d2i 
holds  for  each  i<k,  obj1  (d11,  d12,…,  d1i,…)  is  greater 
than obj2(d21, d22,…, d2i,…), or obj1 contains obj2. 
An example of an object is demonstrated in figure 1. 
In  this  example,  the  “other”  option  in  the  system 
privilege  dimension  means  the  attacker  only  has 
privileges in the context of certain application but not 
in the entire system.  
Definition  2.3: A vulnerability v is defined as a 4-
tuple  (id,  obj_p,  obj_e,  locality),  where  id  is  the 
identification  of  the  underlying  vulnerability,  obj_p 
and obj_e are the precondition object and effect object 
of  the  vulnerability,  and  locality  indicates  where  the 
vulnerability can be exploited. 
Object = {Dim1;Dim2;Dim3} 
Dim1: System privilege = {root, user, other} 
Dim2: Database privilege = {sa, dbowner, user, none} 
Dim3: Web privilege = {admin, write, read, none} 
Figure 1. An example of an object 
2.1.4.  Host  Clusters:  The  number  of  hosts  in  the 
network is a major factor of algorithm complexity. In 
order to reduce the run time of our program, we define 
that a host cluster is an aggregation of hosts that share 
the  same  reachability  property  and  have  similar 
vulnerabilities.  
2.1.5.  The  Attacker  Status:  The  attacker  status 
describes  attackers’  privilege  and  capability  on  his 
current  focusing  host.  Privilege  and  capability  is  not 
limited to possessing certain privilege level on the host 
such  as  root  or  user.  It  also  includes  the  knowledge 
that the attacker has acquired to fulfill a future attack. 
For example, knowledge of a port scan result  may be 
an  attacker  status  on  that  host.  The  attacker  status  is 
modeled by the object defined in definition 2.1. 
2.1.6.  Intrusion  Starting  Point  and  Targets:  The 
starting point of the intrusion can be anywhere. But at 
first we assume that the starting point is a host outside 
the protected network. In our model, we allow multiple 
targets. The targets of an intrusion may be root or other 
privileges on one or more target hosts.  
2.2 Pushdown Automata Model 
In  this  paper  we  model  network  attacks  with 
pushdown automata (PDA) [26].  
Definition 2.4: An attack PDA M is a 7-tuple (S, ∑, 
Γ,  δ,  q0,  Z0,  F),  and  the  meanings  of  the  seven 
components  are  as  follows.  S  is  a  finite  set  of  states, 
representing  host  clusters 
the  network  attack 
scenario.  ∑  is  a  finite  set  of  input  symbols,  which 
in 
represents exploits or the corresponding vulnerabilities. 
Γ  is  a  finite  set  of  stack  alphabets.  δ  is  the  set  of 
transition  functions  (∑×S×Γ)→  (S×Γ).  q0  is  the 
starting state, which stands for attackers’ starting point. 
Z0  is  the  initial  symbol  in  the  stack,  which  is  only 
useful in defining language “accepted by empty stack”. 
F is a subset of S which represents final states. 
states.  A  non-final 
There  are  two  types  of  states  in  our  model:  final 
states  and  non-final 
state 
corresponds to a host cluster  defined in  section 2.1.4. 
The  initial  state  is  a  non-final  state,  which  stands  for 
the host that the attacker starts his intrusion. We define 
a  sole  final  state  in  the  PDA  model.  Only  those  non-
final  states  representing  a  target  host  cluster  are 
connected to the final state with a ε-transition.  
Exploitations  of  vulnerabilities  can  be  modeled  as 
input  symbols  in  our  PDA  model.  A  string  of  input 
symbols  can  be  considered  as  a  sequence  of  attacks 
(exploitations) used by the attacker in temporal order. 
Note that we use one input symbol to represent exactly 
one type of vulnerabilities. When we examine whether 
a  string  can  be  accepted  by  the  PDA,  we  can  tell 
whether the corresponding series of vulnerabilities can 
lead the attacker to his final target. 
The attacker status on a host, which is discussed in 
section  2.1.5,  is  modeled  with  stack  alphabets.  In  our 
model, we use objects as the stack alphabets and every 
possible  status  on  each  host  is  assigned  a  stack 
alphabet.  
A  transition  function  describes  the  process  of 
executing an exploit to obtain certain privileges on the 
target  host.  It  also  indicates  that  the  attacker  is 
“moving”  his  intention  of  intrusion  from  the  current 
host  to  the  next.  The  original  stack  alphabet  denotes 
the privilege and capability an attacker must possess in 
order  to  exploit  the  vulnerability  and  the  new  stack 
alphabet represents the attacker status on the new host. 
Comparison of objects is needed to determine whether 
the precondition is met. Moreover, transition functions 
can, graphically, link one state to another, which stands 
for  a  remote  attack,  and  they  can  also  link  one  state 
back  to  itself,  which  represents  a  local  privilege 
escalation. Reachability property of network hosts can 
be  implicitly  included  in  PDA  model  because  only 
reachable hosts can be linked by transition functions. 
It  is  important  to  note  that  our  PDA  model  is 
defined as accepting strings by final state. However, it 
can be easily converted to a PDA accepting strings by 
empty stack [26].  
the  model  components  needed  for  PDA 
construction  can  be  obtained  using  approaches 
proposed  in  previous  researches  such  as  [1].  The 
algorithm  for  adding  transition  functions  to  the  PDA 
model is listed in figure 2. 
All 
207217
Algorithm  
for each state p, p ∈ S -F 
for each vulnerability v on p 
for each state q, q ∈ S -F 
if q can reach v.port on p 
for each stack alphabet X   
if X contains v.obj_p 
Define Xe = v.obj_e 
Add (q, v, X)→(p, XeX) to δ 
if q is the start state q0 
Add (q0, v, Z0)→(p, XeZ0) to δ 
if p contains host in attack targets (host, obj)  
for each X contains obj and X∈Γ 
Add (p, ε, X)→(qF, X) to δ 
for each X∈Γ 
Add (qF, ε, X)→ (qF, ε) to δ 
Figure 2. Algorithm for adding transition 
functions  
3. Attack grammar 
3.1 Grammar Construction 
The attack grammar in this paper is proposed in the 
form  of  a  context-free  grammar.  It  can  be  converted 