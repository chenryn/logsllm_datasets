also available at [17, Appendix B, pages 78–95]. We discuss
these results in Section 5.
4.1.3 Proof Search Heuristic in Tamarin
5 Analysis Results and Practical Implications
We also introduce a new proof heuristic (also called an oracle)
to improve Tamarin’s performance and to prevent looping.
Tamarin uses heuristics to prioritize which constraints should
be satisﬁed whilst constructing a proof or counterexample.
By construction, poor heuristics cannot render Tamarin
unsound, but they can slow it down. Previously, Tamarin’s
heuristics used only limited information about the current set
We describe our analysis results and their implications for
the Noise protocol community. First, in Section 5.1, we use
Vacarme to infer the strongest security properties for all two-
way handshakes mentioned in the speciﬁcation, which allows
us to construct a protocol hierarchy. This enables one to op-
timally choose a handshake given, e.g., the PKI context of
a given application. This includes a discussion on deferred
1868    29th USENIX Security Symposium
USENIX Association
patterns, for which we show that few of them offer useful
trade-offs. Their improvement is for privacy only, and gener-
ally only one deferred pattern is relevant for each fundamental
or PSK-based pattern. Second, in Section 5.2, we revisit the
security levels claimed in the Noise speciﬁcation and derive a
formal interpretation of them from ﬁrst principles. Along the
way, we uncover some surprising properties about the security
levels claimed by the speciﬁcation. In Section 5.3, we revisit
some of the subtleties surrounding protocols with a PSK and
how they relate to non-PSK modes. Furthermore we make spe-
ciﬁc security claims for the various PSK handshakes, which
are missing from the Noise protocol speciﬁcation. Finally,
we present anonymity results in Section 5.4: e.g., session
identiﬁers put privacy at risk, and some identity-hiding levels
are ﬂawed. We conclude by summarizing our most important
recommendations for the Noise speciﬁcation in Section 5.5.
General Properties: Our systematic approach also enables
us to discover some general properties that all analyzed
handshakes satisfy. First, for injective agreement we observe
one of two cases: (i) the STM for it is either exactly the same
threat model as for non-injective agreement, or (ii) injective
agreement fails under all (even the weakest) threat models.
In other words, messages can either be trivially replayed,
or never. Second, in handshakes where public keys are
distributed by a PKI, an agent only needs to trust that its own
channel to the PKI is secure (and not necessarily the channel
between the PKI and the peer). Finally, we observe that the
guarantees offered by successive handshake messages are
monotonic: subsequent messages enjoy, at worst, the same
properties as previous messages.
5.1 Selecting patterns using hierarchies
Our results can be used to choose a suitable Noise pattern for a
given context, such as a given key infrastructure. To do so, we
must ﬁrst deﬁne our system parameters, which allow us to par-
tition the set of patterns into classes that correspond to distinct
real-world use cases. Second, we introduce an order on a hand-
shake’s security properties. Together, these enable us to sys-
tematically infer the optimal handshake for a given scenario.
System Parameters: System parameters describe which par-
ties are capable of storing static keys or shared symmetric
keys and whether they are available in advance to remote
parties. For example, in settings like web browsing, initiators
may not require any authentication, but servers require au-
thenticating against a pre-shared static public key. Thus, we
identify the following system parameters:
1. Which roles have their own individual static key. This
can be either none, initiator, recipient, or both.
2. If there are static keys, whether these are transferred be-
fore or during the handshake.
3. Whether a PSK is available.
For example, if a designer has access to a pre-shared static key
for the recipient, a non-pre-shared static key for the initiator,
and no PSK, then the Noise speciﬁcation offers 4 possible pat-
terns: KX, K1X, KX1, and K1X1. The last three are deferred
patterns, which were designed to improve identity hiding
properties at the expense of latency. As we will see later, our
results show that these deferred patterns in fact provide no
better security properties than KX. To establish such results,
we shall formally compare handshakes, as explained next.
Order on handshakes: We say that a handshake A offers
better security properties than B if for all claims C and threat
models t, if B satisﬁes C in t, then A also satisﬁes C in t.
Intuitively, this means that the handshake A provides better
security than B for every claim, i.e., it is secure against
stronger adversaries. This relation is easily computable from
the STMs we obtained for each claim.
Hierarchy: We apply the previous methodology to the 46
handshakes2 where we could compute a STM for anonymity
in under about 100 CPU-hours per proof obligation. For all
these handshakes, we could also compute the STMs for se-
crecy and agreement claims. A selection of these results is
shown in Figure 4. Overall we see that (i) in most cases adding
a PSK improves properties, and the earlier the PSK is used
the better; (ii) few deferred handshakes are actually useful. In
the remainder of this section, we expand upon and justify the
latter claim.
Redundant patterns: Overall secrecy and agreement can be
optimized together by avoiding deferred patterns: the earlier
payloads are encrypted, the better (Figure 4a). In contrast, se-
crecy/agreement and anonymity are antagonistic: for example,
KK1 provides better anonymity but worse secrecy/agreement
than KK. They require the same system parameters (no PSK,
pre-shared static keys for both agents) and represent thus two
incomparable trade-offs. This can be seen on Figure 4b as KK
and KK1 are two maximal, incomparable elements among
blue, oval nodes. Nevertheless we show that each class of iden-
tical system parameters admits at most two maximal elements.
Practitioners need only consider these handshakes, as other
ones, which we call redundant, offer inferior security proper-
ties. Overall, only 2 deferred patterns are not redundant (NK1
and KK1).3 For example, KK and KK1 make K1K and K1K1
redundant, and KX makes K1X, KX1, and K1X1 redundant.
In particular, although the Noise speciﬁcation introduced de-
ferred patterns for their better anonymity properties, we found
out that KX has strictly stronger anonymity guarantees than
KX1. Table 3 summarizes these remarks for all non-PSK
system parameters.
24 patterns timed out: IKpsk1, X1X, X1X1, XXpsk3; NN and its deriva-
tives do not involve static keys.
3NK offers stronger secrecy and agreement than NK1, as shown in Fig-
ure 4a, but NK1 offers better anonymity properties, which are not considered
in Figure 4a.
USENIX Association
29th USENIX Security Symposium    1869
(a) Hierarchy of secrecy and agreement guarantees for protocols that do not
require both the initiator and recipient having a static key. In this ﬁgure, we
do not include anonymity properties to highlight the structure with only two
maximal elements.
Figure 4: Excerpts of our Noise protocol hierarchy . An arrow from K1K to KK means that for every threat model t, if a security property holds
for K1K in t, then it also holds for KK in t. In other words, KK offers stronger properties than K1K. Rectangles indicate variants that assume a
PSK, and ovals variants without a PSK. Protocols with identical system parameters have the same color.
(b) Hierarchy of secrecy, agreement, and anonymity guarantees for protocols
that assume both the initiator and recipient have a static key.
Role
Initiator
recipient
Always better properties Always worse properties
Better secrecy/agreement Better or worse privacy
Early use
Deferred use
Security
Level
Table 3: When to defer using a static key with the es or se tokens.
The only non-redundant deferred patterns among those we analyzed
are patterns where the ﬁrst use of the recipient’s static key (with
es) is delayed by one round-trip.
5.2 Security Levels in the Noise Standard
The Noise protocol speciﬁcation lists informal payload se-
curity properties called levels for each payload message of
a handshake (e.g., Examples 2 and 3). Correctly mapping a
formal security model to informal prose is generally challeng-
ing. In this section, we explain how we automatically derive
a formal deﬁnition of the Source and Destination Levels.
Relating Threat Models and Security levels: As we have
seen, our ﬁne-grained analysis allows us to associate each
handshake payload with the STM under which secrecy for
the sender and non-injective agreement between sender and
recipient holds. Considering every handshake payload, we
discover 74 unique STMs. That is, the security of any message
payload is represented by one of those 74 STMs. These 74 dis-
tinct security classes can be related to the 9 levels discussed
in the Noise speciﬁcation by considering fewer atomic capa-
bilities: instead of considering the STM among all possible
threat models constructed from the set A of atomic adversar-
ial capabilities as in Theorem 2, we consider the strongest of
those threat models where no ephemeral key is revealed and
the PKI is attacker-controlled, which we call the simpliﬁed
STMs. Then the equivalence classes yielded by the relation
relating handshakes with the same simpliﬁed STM ﬁt exactly
the Source and Destination Levels of the Noise speciﬁcation,
except for Source Level 0, as shown in Tables 4 and 5. In
Destination
Source
0
1
2
3
4
5
1
2
Simpliﬁed Strongest Threat Model
(cid:62)
active∧ Dre
Rrs ∨ (Drs ∧ active)
active∧ Dre ∧ (Drs ∨ Rrs)
rs ∨ (R<
active∧ Dre ∧ (Drs ∨ R<
active∧ Dre ∧ (Drs ∨ R<
rs)
active∧ (R<
s ∨ (Dre ∧ (R<
rs ∨ Drs)))
active∧ Dre ∧ (R<
rs ∨ Drs))
s ∧ Rrs))
Table 4: Interpretation of the source and destination levels of the
Noise speciﬁcation in terms of simpliﬁed STMs. The simpliﬁcation
consists of ignoring ephemeral key reveals and assuming the PKI is
dishonest.
other words, our method is able to automatically derive a
classiﬁcation of payloads by their security properties that not
only ﬁts the Noise speciﬁcation but additionally reﬁnes it by
considering more adversarial capabilities.
Using Figure 3 and Tables 4 and 5, we can now straightfor-
wardly translate back the formal deﬁnitions of the levels we
uncovered into intuitive, yet unambiguous statements. These
threat models can be translated back into prose as well:
Example 7. We can now properly deﬁne Destination Level
4 (described in Example 2) as: Secrecy of the payload holds
unless the adversary is active, the recipient’s ephemeral key
was generated by the adversary and
• the recipient’s static key was generated by the adversary,
• the recipient’s static key is revealed before the message
• the recipient’s static key is revealed at any time and the
sender’s static key is revealed before the message is sent.
is sent, or
or
Reﬁning Source Level 0 (agreement): Although Source
Level 0 is divided into four further levels, these levels are
1870    29th USENIX Security Symposium
USENIX Association
INpsk1KNpsk0INpsk2KNpsk2NKpsk0NKpsk2NNpsk0NNpsk2NXpsk2XNpsk3I1NINNX1NXNK1NKNNX1NXNK1NKNIKpsk2KKpsk2IXpsk2KXpsk2KKpsk0XKpsk3I1K1I1KIK1K1K1K1KIKKK1KKK1X1K1XKX1KXX1K1X1KXK1XKI1X1I1XIX1IXXX1XXSub-levels of Source Level 0
Simpliﬁed STM
Source Level 0.0 (cid:62)
Source Level 0.1
Source Level 0.2
Source Level 0.3
active
active∧ (Dre ∨ R<
s )
active∧ Dre
Pattern Message Destination STM (secrecy for the sender)
Level
IX
X1X
2
3
3
5
(Rre ∧ (Rrs ∨ Re)) ∨ (Re ∧ Rs) ∨ (active ∧
(Dre ∧ (R<
(active ∧ ((Drs ∧ R<
rs ∨
Drs)))∨ Re ∨ (Rre ∧ Rrs)
re))
re) ∨ (Dre ∨ (R<
rs ∨ R<
e ∨ Drs))∨ (Drs ∧ R<
Table 5: We found that Source Level 0 can be sub-divided into 4
sub-levels. As in Table 4, we assume here a dishonest PKI and the
absence of ephemeral key reveals and higher number means stronger.
Table 6: Strongest threat models (STM) for secrecy of some mes-
sages from the point of view of the sender, to illustrate Example 9.
very weak. They range between ‘The property never holds
((cid:62))’ and ‘The adversary must be active and transmit a value.’
The Noise speciﬁcation refers to all such messages as being
at the same level. The relevance of the additional security
offered by the subdivision depends on the threat model.
For example, in threat models where being active is very
costly or impossible for the adversary, e.g., as in some mass
surveillance scenarios, these subdivisions are meaningful.
Reﬁning Destination Levels (secrecy): Unlike the Noise
speciﬁcation, we consider secrecy not only from the sender’s
point of view, but also from the recipient’s point of view.
We uncovered two new levels with corresponding simpliﬁed
STMs: Rs ∨ Dre and Rs ∨ (Rre ∧ (R<
rs ∨ Drs)), which we will
call 0(cid:48) and 0(cid:48)(cid:48) respectively, as they are incomparably strong.
Notably, Level 0(cid:48) is much weaker than Destination Level 1,
but is found on messages that are Destination Level 2 for the
sender’s point of view. The following example illustrates why
this could come as a surprise to some readers of the Noise
speciﬁcation.
Example 8 (Asymmetry of secrecy for the sender and recipi-
ent). We consider a threat model where no key is revealed and
the agents have a way to ensure the authenticity of preshared
static keys. We also consider the ﬁrst message of X1K, which is
Destination Level 2 for the initiator (sender). In such a threat
model, when the initiator sends a payload, he has a guarantee
that the attacker cannot learn the sent payload. In contrast,
this message is Level 0(cid:48) for the recipient of this message.
When a recipient receives this message, it could be that the
attacker knows the decrypted payload (for example, because
the attacker impersonated the alleged sender). Depending on
the application layer and the purpose of such a message, the
recipient may need message conﬁdentiality to be guaranteed.
Uncovering Missing Assumptions in the Speciﬁcation: The
fact that when we consider threat models without ephemeral
key reveals we obtain roughly the classiﬁcation of the Noise
speciﬁcation suggests that the Noise speciﬁcation actually
assumes that ephemeral keys cannot be revealed. Currently,
this assumption is only explicit for Destination Level 5 and
Identity-hiding levels, which seems to (wrongly) imply it
is not assumed for the others. In practice, weak ephemeral
keys are possible with the many mobile phones, routers, and
IoT devices suffering from poor quality RNGs. It is therefore
prudent to systematically investigate this aspect of the threat
model. Using our results and non-simpliﬁed threat models,
it is possible to check whether a particular message would
be revealed to an adversary in the event that one, or even
both, of the involved parties had a faulty RNG. This allows
a protocol designer to select a Noise handshake to mitigate
this issue, when it is a real-world concern.
Uncovering Non-monotonicity of Levels: A perhaps sur-
prising consequence of considering such threat models is that
the security levels given in the speciﬁcation are not mono-
tonic, while users and readers will most likely understand
from the speciﬁcation and their association with (linearly or-
dered) numbers that they are monotonic. Worryingly, a user
may upgrade from one handshake to another with a higher
Destination Level and, yet, lose security.
Example 9 (Non-monotonic secrecy upgrade). Consider
the choice of a protocol with the goal of transmitting one
payload from Alice to Bob. For the designer, only the secrecy
of this payload, from Alice’s point of view, matters. In the
initial setup, both parties have a static key (but do not know
their peer’s static key in advance) and no PSK is available.
We consider a scenario where Alice’s ephemeral key
can be revealed (i.e. Alice’s device has a weak or faulty
RNG) and the attacker is passive. Obviously no security is
possible in the scenario where one party is fully compromised
so we exclude it and we get the following threat model:
t = (Re ∧ Rs)∨ Rre ∨ active.
With Alice as the recipient, we see in Table 6 that the second
message of pattern IX (labeled Destination Level 3) fulﬁlls our
requirements. Upgrading our guarantee from Level 3 to Level