(κ) + 6qAdvprf
Advake-e2e
PRF(κ).
(E,D)
AWRT
2κ + 4Succwuf-cma
MAC
Proof. (Sketch) In the following we construct a sequence of games Gi, i = 0, . . . , 7 and denote by Winake-t
the event that A breaks the tunnel AKE-security of AWRT in game Gi, i.e., wins in the corresponding
interaction as described in Deﬁnition 6 (for the case α = ake-t).
AWRT(κ) played between a simulator ∆ and a PPT
adversary A. ∆ simulates the actions of the participating M, F, and H according to the protocol spec-
iﬁcation and answers all queries of A. Recall, that the TestTunnelKey query is asked by A to a t-fresh
instance of either M, F, or H which has previously accepted. Note in particular, that the notion of
Game G0. [Real protocol] This is the real Gameake-t
i
16
M. Manulis, D. Leroy, F. Koeune, O. Bonaventure, and J.-J. Quisquater
t-freshness excludes any corruptions of M, F, and H. In order to prevent A from active participation on
behalf of either of these parties we ﬁrst exclude possible impersonation attacks.
Game G1. [Collisions for nonces rF, rM, and rH] The simulation in this game aborts (and the
output bit of the interaction is set at random) if the same random nonce rF, rM, or rH is chosen by ∆
on behalf of F, M, or H, respectively, in two diﬀerent protocol sessions. Thus,
| Pr[Winake-t
1
] − Pr[Winake-t
0
]| ≤ 3q2
2κ .
(12)
Game G2. [MAC forgeries for µH and µM] The simulation in this game aborts (and the output bit
of the interaction is set at random) if A asks as part of its Send query to M (or to H) a valid MAC value
µH (or µM) which was not previously output by an instance of H (or M). Obviously,
| Pr[Winake-t
2
] − Pr[Winake-t
1
]| ≤ 2Succwuf-cma
MAC
(κ).
(13)
Having eliminated possible forgeries and replay attacks with respect to µH and µM we observe that any
t-fresh instance of M (or H) which accepts has a partnered instance of H (or M) which is also t-fresh.
Game G3. [Signature forgeries for σH and σM] The simulation in this game aborts (and the output
bit of the interaction is set at random) if A asks as part of its Send query to F (or to H) a valid signature
σH (or σF) which was not previously output by an instance of H (or F), so that
| Pr[Winake-t
3
] − Pr[Winake-t
2
]| ≤ 2Succeuf-cma
(Sig,V er)(κ).
(14)
Having eliminated possible forgeries and replay attacks with respect to σH and σF we observe that any
t-fresh instance of F (or H) which accepts has a partnered instance of H (or F) which is also t-fresh. In
particular, the combination of this and the previous game ensures that if at least one t-fresh instance of
some protocol party accepts then there exist partnered instances of the other two parties, which are also
t-fresh.
Game G4. [Pseudo-randomness of KM,H] This game is identical to Game G3 except that ∆ in each
session on behalf of any partnered instances of M and H chooses the end-to-end key KM,H as a random
value and not as an output of PRF, s.t.
| Pr[Winake-t
] − Pr[Winake-t
]| ≤ qAdvprf
4
(15)
This game ensures independence between the pre-tunnel key kt and KM,H which may be revealed by A
without compromising the t-freshness of the instance.
Game G5. [Pseudo-randomness of kt] This game is identical to Game G4 except that ∆ in each
session on behalf of the partnered instances of M and H chooses the pre-tunnel key kt as a random value
and not as an output of PRF, s.t.
PRF(κ).
3
| Pr[Winake-t
5
] − Pr[Winake-t
4
]| ≤ qAdvprf
PRF(κ).
(16)
Note that in this game ∆ computes χ as an encryption of this random value.
Game G6. [Security of χ] In order to exclude any information leakage about kt upon its transmission
to F we consider the following game, in which ∆ in each session computes χ as an encryption EekF (β)
where β is some randomly chosen value, independent of kt. Note that ∆ derives Kt on behalf of the
partnered instances of F, M, and H still using kt. It is possible to construct a distinguisher with given
access to the real-or-random encryption oracle (and the decryption oracle) that is able to use A in this
and the previous game to break the IND-CCA2 security of (E,D), s.t.
]| ≤ qAdvind-cca2
] − Pr[Winake-t
| Pr[Winake-t
(17)
(κ).
(E,D)
6
5
Game G7. [Pseudo-randomness of kt] In this ﬁnal game ∆ proceeds as before except that in each
session on behalf of the partnered instances of M, F, and H it chooses the tunnel key Kt as a random
value and not as an output of PRF. Obviously,
| Pr[Winake-t
7
] − Pr[Winake-t
6
]| ≤ qAdvprf
PRF(κ).
(18)
Authenticated Wireless Roaming via Tunnels: Making Mobile Feel at Home
17
As a result of this game the answer given to A in response to its TestTunnelKey query to some t-fresh
instance of M, F, or H is a completely random value, regardless of the chosen bit b. Obviously, the
probability of A to win in this game is given by the probability of a random guess, i.e.
1
2 .
The combination of the above equations concludes the proof.
Pr[Winake-e2e
] =
7
(19)
(cid:117)(cid:116)
5.5 Remarks on Eﬃciency
In case of roaming protocols the most signiﬁcant impact on the communication complexity has the number
of communication rounds on the path with the highest round trip time, i.e. the link between F and H.
Therefore, several solutions for the non-tunnel-based roaming mentioned in Section 3 aim to minimize
this number. However, in a WRT session each request of M would imply one full communication round
between the networks. Nevertheless, it is still desirable to minimize this communication before the tunnel
is created in order to reduce the impact of possible network faults and DoS attacks. With this in mind we
observe that our AWRT protocol requires one full communication round between the networks prior to the
creation of the tunnel by F. The additional half a round needed to deliver the authentication information
to H can be easily interleaved with the ﬁrst service request of M. In this sense our AWRT protocol is
comparable to the authentication protocols from [45, 53].
Further, the speciﬁcation given in Figure 1 separates messages according to the two simultaneous mu-
tual authentication processes that take place between M and H, and between F and H. This signiﬁcantly
simpliﬁes the proof. However, some communication bandwidth can be saved by removing the MAC value
µM from the last message of F to H, still allowing H to verify µM indirectly, via the veriﬁcation of σF.
This optimization relies on the assumption that F could not have created valid σF without knowing the
required µM, thus, implying the necessary communication between F and M due to the unforgeability
of MAC and the secrecy of αM.
Finally, we observe that in AWRT the mobile device M does not need to perform any costly public-
key operations, unlike the non-tunnel-based protocols in [9, 33, 40, 42, 44] and the WRT approach in [54].
Hence, AWRT can also be used with performance-constraint mobile devices such as PDAs and smart phones
provided they have a wireless IP interface. Note that AWRT uses public-key operations for the transport
of kt and for the mutual authentication between F and H.
Remark 4. If desired, the modularity of AWRT allows to completely remove public-key operations (and
the corresponding long-lived keys) resulting in a more eﬃcient protocol that would nevertheless still
ensure end-to-end security between M and H in the presence of F (yet more eﬃcient than [54]) without
providing the tunnel key and the mutual authentication between the networks.
5.6 Ideas on Practical Realization and Tunnel Establishment
The description of AWRT in Figure 1 is kept general. Therefore, in the following we highlight some practical
ideas on the realization of the protocol across the Internet based on the available standards.
The foreign network F will typically participate in AWRT using its own access point to which M
connects on the data-link layer (layer 2) prior to the execution of AWRT. Since the communication between
M and F takes part on layer 2 there is no need for F to assign an IP address to M. Moreover, on the
link between M and F the protocol can be implemented as a new EAP method within IEEE 802.1X.
The home network H can participate in AWRT as a gateway or a protocol-speciﬁc server with some known
DNS name or IP address, i.e. protocol messages exchanged between F and H can be transmitted over
Internet through a classical UDP connection.
Once AWRT is successfully executed, F can continue acting as a layer 2 bridge to H for the whole
roaming session. In this way M can be seen as “local” from the perspective of H, i.e. H can allocate own
IP address for M either as a parameter within AWRT or via DHCP. Messages between M and H can be
tunneled using a simple IP-over-IP or upper layer protocol (such as L2TP [59]). The end-to-end traﬃc
18
M. Manulis, D. Leroy, F. Koeune, O. Bonaventure, and J.-J. Quisquater
between M and H can be protected using the Authentication Header (AH) or Encapsulating Security
Payload (ESP) mechanisms in the tunnel mode, as deﬁned within IPsec [36], whereby deriving the session
key from KM,H, i.e., without executing IKE [20], the native key exchange protocol of IPsec.
Further, in order to avoid session hijacking attacks (incl. traﬃc injection), the tunnel path between F
and H can also be secured using AH or ESP mechanisms, this time in the transport mode, whereby the
corresponding session key should be derived from Kt.
6 Optional Protocol Extensions
AWRT can be extended in a modular way to deal with the issues of forward secrecy, resistance to certain
types of DoS attacks, anonymity and unlinkability of roaming sessions, and accounting in commercial
scenarios with the reimbursement of F upon the provided roaming service.
6.1 Forward Secrecy
Roughly speaking the requirement of forward secrecy for some session key means that an adversary should
not be able to break the AKE-security of the protocol even if it gains access to the long-lived keys of
participants after their instances have accepted in the test session. The common way to achieve forward
secrecy is to derive the key from some independent ephemeral secret information which is valid only for
one particular session.
Forward Secrecy of End-to-End Keys In order to achieve forward secrecy for KM,H we can modify
the basic version of AWRT using the classical Diﬃe-Hellman technique [25] and assuming that the necessary
computations are performed in some cyclic group G of prime order q (polynomial in κ) generated by g.
The idea is to derive KM,H from an ephemeral secret gxMxH (with xM, xH ∈ Zq) as an output of
PRFf (gxM xH )(l3|sid) where f is a randomness extractor (cf. [27]) and sid the corresponding session id.
For this, M must choose its own secret exponent xM and include gxM into its ﬁrst protocol message, thus
sending B|gxM|H to F which then forwards C|T|gxM to H. In turn, H chooses own secret exponent xH
and includes gxH into its protocol message D|gxH|σH while computing µH over 0|sidH|gxM|gxH allowing
M to check the integrity of delivered gxM and sent gxH. For the same reason, M must compute own µM
over 1|sidM|gxM|gxH. Note that the AKE-security of such KM,H would further rely on the hardness of
the Decisional Diﬃe-Hellman Problem [16].
Forward Secrecy of Tunnel Keys In order to achieve forward secrecy for Kt we can apply a Gen-
eralized Diﬃe-Hellman technique, used e.g. in [19] for the purpose of group key exchange. Let G be a
cyclic group and g its generator as described in the previous paragraph. The goal is to derive Kt from an
ephemeral secret gxMxF xH (with xM, xF , xH ∈ Zq) as an output of PRFf (gxM xF xH )(l2|sid). In this case all
computations involving the pre-tunnel key kt become obsolete. Therefore, the modiﬁed protocol does not
require to keep the decryption/encryption key pair (dkF , ekF) as part of the foreign network’s long-lived
key. The protocol proceeds as follows. M includes gxM into its ﬁrst protocol message B|gxM|H to F which
in turn chooses own exponent xF and sends C|T|gxM|gxF|gxMxF over to H. Then, H chooses own xH and
replies with D(cid:48)|σH where D(cid:48) := rH|gxMxH|gxF xH|µH with µH computed over 0|sidH|gxM|gxF xH (allowing
M to check the integrity of delivered gxM and sent gxF xH), and σH computed over D(cid:48)|gxM|gxF|gxMxF
(allowing F also to check the integrity of gxM, gxF , and gxMxF , delivered to H in the previous message of
F). F includes gxF xH into its message E|gxF xH to M. Finally, M computes µM over 1|sidM|gxM|gxF xH,
and F computes σF over sidF|µM|gxMxH. It is easy to check that at the end of the successful protocol
execution all parties are able to compute identical
gxMxF xH = (gxMxF )xH = (gxMxH)xF = (gxF xH)xM
and derive the same Kt. Note that in this case the AKE-security of such Kt would further rely on the
hardness of the Group Decisional Diﬃe-Hellman Problem [18].
Authenticated Wireless Roaming via Tunnels: Making Mobile Feel at Home
19
We stress that if forward secrecy should be simultaneously achieved for KM,H and Kt then M and H
must use diﬀerent independently chosen exponents for the computation of each of these keys; otherwise
KM,H can be easily recovered using message D(cid:48). Note that achieving forward secrecy increases the