learned have been consistent through all of those environments, strongly suggest-
ing that the results are extensible to other data sets. For example, since we have
observed through all of the environments that RIDES is blind to a low saturation
of anomalies, we believe that it is highly unlikely that RIDES would be able to
detect a single foreign symbol in any other environment.
We also showed that there are challenges remaining to be faced in the area of
intrusion-detector performance modeling. Interaction among the detector param-
eters can lead to multiple local optima, making it diﬃcult to ﬁnd a satisfactory
tuning in some cases. More work is needed in this area to identify additional
criteria upon which tuning decisions can be made.
Acknowledgements
The authors are grateful for helpful comments from F. Arshad, K. Killourhy,
P. Loring, and R. Roberts. The authors are also thankful to several anonymous
referees whose thoughtful remarks inspired improvements in the paper. This work
was supported by National Science Foundation grant number CNS-0430474.
Anomaly Detector Performance Evaluation
125
References
1. Anderson, Debra; Lunt, Teresa F.; Javitz, Harold; Tamaru, Ann and Valdes, Al-
fonso. “Detecting Unusual Program Behavior Using the Statistical Component of
the Next-Generation Intrusion Detection Expert System (NIDES),” Technical Re-
port SRI-CSL-95-06, Computer Science Laboratory, SRI International, May 1995.
2. Anderson, Debra; Lunt, Teresa F.; Javitz, Harold; Tamaru, Ann and Valdes, Al-
fonso. “Safeguard Final Report: Detecting Unusual Program Behavior Using the
NIDES Statistical Component,” Technical Report, Computer Science Laboratory,
SRI International, Menlo Park, California, 02 December 1993.
3. Arbel, Gil. Anomaly Detection Falls Short http://www.techworld.com/
networking/features/index.cfm?featureID=2331, TechWorld, 13 March 2006.
4. Denning, Dorothy E. An Intrusion-Detection Model, IEEE Transactions on Soft-
ware Engineering, Vol. SE-13, No. 2, pp. 222-232, February 1987.
5. Forrest, Stephanie. “Computer Immune Systems.” Data sets for sequence-based
intrusion detection: http://www.cs.unm.edu/∼immsec/systemcalls.htm. Com-
puter Science Department, University of New Mexico, Albuquerque, New Mexico.
2006.
6. Forrest, Stephanie; Hofmeyr, Steven A.; Somayaji, Anil and Longstaﬀ, Thomas A.
“A Sense of Self for Unix Processes,” In IEEE Symposium on Security and Privacy,
pp. 120-128, 06-08 May 1996, Oakland, California. IEEE Computer Society Press,
Los Alamitos, California.
7. Ghosh, Anup K.; Schwartzbart, Aaron and Schatz, Michael. “Learning Program
Behavior Proﬁles for Intrusion Detection ,” In 1st USENIX Workshop on Intrusion
Detection and Network Monitoring, pp. 51-62, Santa Clara, CA, 09-12 April 1999.
8. Ghosh, Anup K.; Wanken, James and Charron, Frank. “Detecting Anomalous and
Unknown Intrusions Against Programs,” In 14th Annual Computer Security Appli-
cations Conference, pp. 259-267, Phoenix, AZ, 07-11 December 1998. Los Alamitos,
CA, IEEE Computer Society Press, 1998.
9. Javitz, Harold S. and Valdes, Alfonso. The NIDES Statistical Component: Descrip-
tion and Justiﬁcation. Annual Report A010, 07 March 1994, SRI International,
Menlo Park, California.
10. Javitz, Harold S. and Valdes, Alfonso. “The SRI IDES Statistical Anomaly De-
tector,” In IEEE Symposium on Research in Security and Privacy, pp. 316-326,
Oakland, California, 20-22 May 1991. IEEE Computer Security Press, Los Alami-
tos, California.
11. Jha, Somesh; Tan, Kymie M. C. and Maxion, Roy A. “Markov Chains, Classiﬁers,
and Intrusion Detection,” In 14th IEEE Computer Security Foundations Workshop,
pp. 206-219, Cape Breton, Nova Scotia, Canada, 11-13 June 2001.
12. Swets, John A. and Pickett, Ronald M. Evaluation of Diagnostic Systems: Methods
from Signal Detection Theory. Academic Press, New York, 1982.
13. Tan, Kymie M. C. and Maxion, Roy A. “Determining the Operational Limits
of an Anomaly-Based Intrusion Detector.” IEEE Journal on Selected Areas in
Communications, Special Issue on Design and Analysis Techniques for Security
Assurance, Vol. 21, No. 1, pp. 96-110, January 2003.
14. Tan, Kymie M. C. and Maxion, Roy A. “The Eﬀects of Algorithmic Diversity
on Anomaly Detector Performance,” In International Conference on Dependable
Systems & Networks (DSN-05), pages 216-225, Yokohama, Japan, 28 June - 01
July 2005. IEEE Computer Society Press, Los Alamitos, California, 2005.
126
J.P. Hansen, K.M.C. Tan, and R.A. Maxion
15. Valdes, Alfonso and Anderson, Debra. Statistical Methods for Computer Usage
Anomaly Detection Using NIDES (Next-Generation Intrusion Detection Expert
System), Third International Workshop on Rough Sets and Soft Computing (RSSC-
94), 10-12 November 1994, San Jose, California. Published by the Society for Com-
puter Simulation, San Diego, 1995, pp. 104-111.
16. Warrender, Christina; Forrest, Stephanie and Pearlmutter, Barak. “Detecting In-
trusions Using System Calls: Alternative Data Models,” In IEEE Symposium on
Security and Privacy, pp. 133-145, Oakland, California, 09-12 May 1999. IEEE
Computer Security Press, Los Alamitos, California.
17. Zissman, Marc.
“1998/99 DARPA Intrusion Detection Evaluation data
sets,” MIT Lincoln Laboratory, http://www.ll.mit.edu/IST/ideval/data/
data index.html.
Ranking Attack Graphs(cid:2)
Vaibhav Mehta, Constantinos Bartzis, Haifeng Zhu,
Edmund Clarke, and Jeannette Wing
Carnegie Mellon University, Pittsburgh, USA
{vaibhav, cbartzis, haifengz, emc, wing}@cs.cmu.edu
Abstract. A majority of attacks on computer systems result from a
combination of vulnerabilities exploited by an intruder to break into the
system. An Attack Graph is a general formalism used to model security
vulnerabilities of a system and all possible sequences of exploits which
an intruder can use to achieve a speciﬁc goal. Attack Graphs can be con-
structed automatically using oﬀ-the-shelf model-checking tools. However,
for real systems, the size and complexity of Attack Graphs greatly ex-
ceeds human ability to visualize, understand and analyze. Therefore, it is
useful to identify relevant portions of an Attack Graph. To achieve this,
we propose a ranking scheme for the states of an Attack Graph. Rank of
a state shows its importance based on factors like the probability of an
intruder reaching that state. Given a Ranked Attack Graph, the system
administrator can concentrate on relevant subgraphs to ﬁgure out how
to start deploying security measures. We also deﬁne a metric of security
of the system based on ranks which the system administrator can use to
compare Attack Graphs and determine the eﬀectiveness of various de-
fense measures. We present two algorithms to rank states of an Attack
Graph based on the probability of an attacker reaching those states. The
ﬁrst algorithm is similar to the PageRank algorithm used by Google to
measure importance of web pages on the World Wide Web. It is ﬂexible
enough to model a variety of situations, eﬃciently computable for large
sized graphs and oﬀers the possibility of approximations using graph
partitioning. The second algorithm ranks individual states based on the
reachability probability of an attacker in a random simulation. Finally,
we give examples of an application of ranking techniques to multi-stage
cyber attacks.
Keywords: Google PageRank, Attack Model, Attack Graph, Model
Checking, security metric.
(cid:2) This research was sponsored by the Oﬃce of Naval Research under grant no. N00014-
01-1-0796, the Army Research Oﬃce under grant no. DAAD19-01-1-0485, and the
National Science Foundation under grant nos. CNS-0411152, CCF-0429120, and
0433540. The views and conclusions contained in this document are those of the
author and should not be interpreted as representing the oﬃcial policies, either ex-
pressed or implied, of any sponsoring institution, the U.S. government or any other
entity.
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 127–144, 2006.
c(cid:1) Springer-Verlag Berlin Heidelberg 2006
128
V. Mehta et al.
1 Introduction
A large computer system builds upon multiple platforms, runs diverse software
packages and supports several modes of connectivity. Despite the best eﬀorts
of software architects and coders, such systems inevitably contain a number of
residual faults and security vulnerabilities. Hence, it is not feasible for a system
administrator to try and remove each and every vulnerability present in these
systems. Therefore, the recent focus in security of such systems is on analyz-
ing the system globally, ﬁnding attacks which are more likely and severe, and
directing resources eﬃciently to increase conﬁdence in the system.
To evaluate security of such a system, a security analyst needs to take into
account the eﬀects of interactions of local vulnerabilities and ﬁnd global vul-
nerabilities introduced by interactions. This requires an appropriate modeling
of the system. Important information such as the connectivity of elements in
the system and security related attributes of each element need to be modeled
so that analysis can be performed. Analysis of security vulnerabilities, the most
likely attack path, probability of attack at various elements in the system, an
overall security metric etc. is useful in improving the overall security and robust-
ness of the system. Various aspects which need to be considered while deciding
on an appropriate model for representation and analysis are: ease of modeling,
scalability of computation, and utility of the performed analysis.
There has been much work on modeling speciﬁc systems for vulnerability
analysis. Zhu [24] models computer virus infections using an Infection Graph,
where nodes represent hosts and an arc represents the probability of transfer of
a virus from source to target host independent of the rest of the system. Infec-
tion Graphs are used to ﬁnd the most vulnerable path for virus infection on a
particular host. Ortalo et al. [19] describe a methodology for modeling known
Unix security vulnerabilities as a Privilege Graph, where a node represents the
set of privileges owned by a user and an arc represents grant of an access priv-
ilege. Dawkins and Hale [5] present a multi-stage Network Attack Model which
contains a DAG (Directed Acyclic Graph) similar to the Infection Graph in [24].
However, their model is generalized for diﬀerent kinds of attacks and an XML
description is proposed. Sheyner et al. [21,9,22] present a data structure called
an Attack Graph to model the security vulnerabilities of a system and their ex-
ploitation by the attacker. An Attack Graph is a succinct representation of all
paths through a system that end in a state where an intruder has successfully
achieved his/her goal. An attack is viewed as a violation of a safety property of
the system, and oﬀ-the-shelf model checking [3] techniques are used to produce
Attack Graphs automatically.
Various techniques for quantitative security analysis are presented in
[4,10,20,17]. Dacier et al. [4] use Privilege Graphs to model the system, therefore
restricting the analysis to a speciﬁc family of attacks. Empirical and statistical
information is used to estimate the time and eﬀort required for each type of
attack. MTTF (mean time to failure) is computed as a metric of the security
level of a system. The framework proposed in [20] requires attacker proﬁles and
attack templates with associated probabilities as part of the input. An ad hoc
Ranking Attack Graphs
129
algorithm is used to generate Attack Graphs. Using a modiﬁed shortest path
algorithm, the most likely attack sequences are computed. Madan et al. [17] give
a theoretical description of various methods which can be used to quantify se-
curity based attributes of an intrusion tolerant system. Security intrusion and
response of an intrusion tolerant system are modeled using a Semi-Markov Pro-
cess (SMP). Security quantiﬁcation analysis is carried out to compute measures
like steady state availability, mean time to failure and probabilities of security
failure due to violations of diﬀerent security attributes. However, the analysis is
based on the availability of values for various model parameters and is feasible
for small Markov Chains only. Another related approach is the one described in
[8], where Alternating Probabilistic Attack Graphs are used for analysis. How-
ever, the system designer has to provide a priori probabilities for most events in
the system.
We propose a ranking scheme for the states of an Attack Graph. Rank of
a state shows its importance based on factors such as the probability of an
intruder reaching the state. The framework we propose is summarized in Figure
1. First we obtain a formal description of the system to be analyzed, an Attack
Model, that captures all possible behaviors of the system as it interacts with
possibly malicious peers. Given a security property, we then model check the
Attack Model, thus obtaining a compact description of all executions that violate
the security property, an Attack Graph. At the same time, we apply a ranking
algorithm to the state transition graph of the Attack Model to compute the
ranks of its states. We present two ranking algorithms to rank states based
on the probability of an intruder reaching those states. The ﬁrst algorithm is
similar to the PageRank algorithm [2,1,15] used by Google. The second algorithm
ranks states based on the reachability probability of an intruder in a random
simulation. As there is a direct correspondence between the states of an Attack
Model and an Attack Graph, we also get the ranks of states of the Attack Graph.
The Ranked Attack Graphs are valuable for a system administrator as they allow
him to estimate the security level of the system and provide a guide for choosing
appropriate corrective or preventive measures.
The main advantages of our approach are:
– Ease and ﬂexibility of modeling : Finding ranks using our technique
does not necessarily require a priori probabilities for all events. If the prob-
abilities are available, then we can use them for more accurate modeling.
Even if the exact probabilities are not available, modeling the attacks ran-
domly is expected to perform as good as PageRank performs on the World
Wide Web graph. In realistic situations, an attacker very rarely has complete
information about the network and the attack mostly proceeds using a re-
peated scan-probe approach. This is similar to a websurfer navigating across
webpages on the World Wide Web by following hyperlinks. Likewise, in the
case of automated attacks by computer viruses and worms, the attacks are
random in nature [25,23].
The ranking technique we use is also very ﬂexible, since we can model dif-
ferent knowledge levels of the attacker and his intentions by simply adding
130
V. Mehta et al.
Security
Property
Model
Checking
Attack Graph
Security metric
Attack Model
+
Ranked
Attack Graph
Analysis
Ranking
Algorithms
Ranked
Attack Model
Bias
Measures
Fig. 1. Ranking to analyze security of Attack Models
a bias in the rank computation. This is similar to personalization [7,1,15] of
PageRank. Moreover, we can combine the ranks obtained using this algo-
rithm with other criteria for ranking states such as the severity of diﬀerent
failures in the system.
– Scalability : There exist eﬃcient algorithms to compute PageRank over
graphs containing billions of webpages. Techniques based on sparse matri-
ces [6], extrapolation methods [13], adaptive methods [11], hierarchical block
rank computation [12], aggregation methods [16] are used to accelerate the
computation of PageRank. Since one of our algorithms is similar to PageR-
ank, we can also handle state transition graphs of comparable sizes.
– Applicability to a variety of situations : Attack Graphs and Attack
models are a very general formalism which can be used to model a variety
of situations and attacks. The system under attack could be anything: a
computer network under attack by hackers, a city under siege during war,
an electric grid targeted by terrorists. Moreover, Attack Graphs can be au-
tomatically generated using oﬀ-the-shelf model checking techniques. Hence,
a variety of situations can potentially be modeled and analyzed.
– Useful Analysis : A number of useful analyses can be carried out over
the Ranked Attack Graphs, which help a system administrator determine
the security level of the system and decide amongst various possible defense
measures. Ranks provide a detailed security metric which can be subse-
quently used by the system architect / administrator. Ranks of states can
be used to determine the probability and severity of security failures at var-
ious elements in the system. For realistic examples, the size and complexity
of Attack Graphs greatly exceeds the human ability to understand and an-
alyze. Ranks provide a way to determine the relevant parts of the Attack
Graph to ﬁgure out how to best deploy security measures.
In the next section, we give formal deﬁnitions of an Attack Model and an
Attack Graph. In Section 3, we explain the algorithms used to rank states of an
Ranking Attack Graphs
131
Attack Graph. In Section 4, we describe various analyses that can be performed
on the Ranked Attack Graphs. In Section 5, we give examples of applying our
ranking techniques to real-life systems and applications.
2 Attack Models and Attack Graphs
Sheyner et al. [21] introduced the concept of Attack Models and Attack Graphs
to model the security vulnerabilities of a system and their exploitation by an
attacker.
An Attack Model
is a formal representation of security related attributes
of the attacker, the defender and the underlying system. Formally,
Deﬁnition 1. Let AP be a set of atomic propositions. An Attack Model is a
ﬁnite automaton M = (S, τ, s0, l), where S is a set of states, τ ⊆ S × S is the
transition relation, s0 ∈ S is the initial state, and l : S → 2AP is a labeling of
states with the set of propositions true in that state.
A state in the model is a valuation of variables describing the attacker, the
defender and the system. The transitions in the system correspond to actions
taken by an attacker which lead to a change in the overall state of the system.
The starting state of the model denotes the state of the system where no damage
has occurred and the attacker has just entered the system using an entry point.
As an example, if we consider the case of a computer network Attack Model,
a state represents the state of the intruder, the system administrator and the
network of computers. The transitions correspond to actions of the attacker such
as running a network scan, probing a computer for vulnerabilities and exploiting
vulnerabilities to get more privileges on that computer.
An Attack Graph is a subgraph of an Attack Model, which consists of all
the paths in an Attack Model where the attacker ﬁnally succeeds in achieving
his goal. Formally,
Deﬁnition 2. Let AP be a set of atomic propositions. An Attack Graph or AG
is a ﬁnite automaton G = (S, τ, s0, E, l), where S is a set of states, τ ⊆ S × S
is the transition relation, s0 ∈ S is the initial state, E ⊆ S is the set of error