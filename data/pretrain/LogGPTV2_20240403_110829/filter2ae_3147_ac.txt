                    # 更新type和del_time之后插入一条新历史记录
                    mongo.NA_HISTORY.insert(history_info)
进行socket连接的时候，例如一些ssh之类的服务，会返回一些banner信息
#### 服务识别
    def server_discern(self):
        # 先尝试进行利用配置中的`Discern_server`进行快速匹配识别
        for mark_info in self.config_ini['Discern_server']: 
            try:
                name, default_port, mode, reg = mark_info
                if mode == 'default':
                    # default表示用特定端口，匹配特定服务
                    if int(default_port) == self.port:
                        self.server = name
                elif mode == 'banner':
                    # 利用banner信息进行正则匹配检测
                    matchObj = re.search(reg, self.banner, re.I | re.M)
                    if matchObj:
                        self.server = name
                if self.server:break
            except:
                continue
        # 对于未检测出服务并且端口不为80、443、8080的端口进行检测
        if not self.server and self.port not in [80,443,8080]:
            for mark_info in self.config_ini['Discern_server']:  # 发包识别
                try:
                    name, default_port, mode, reg = mark_info
                    if mode not in ['default','banner']:
                        # 进行发送特定的socket包获取banner信息，进行再次匹配
                        dis_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        dis_sock.connect((self.ip, self.port))
                        mode = mode.decode('string_escape')
                        reg = reg.decode('string_escape')
                        dis_sock.send(mode)
                        time.sleep(0.3)
                        dis_recv = dis_sock.recv(1024)
                        dis_sock.close()
                        matchObj = re.search(reg, dis_recv, re.I | re.M)
                        if matchObj:
                            self.server = name
                            break
                except:
                    pass
        if self.server:
            # 对于检测到的服务，进行log和info的记录
            log.write("server", self.ip, self.port, self.server)
            mongo.NA_INFO.update({"ip": self.ip, "port": self.port}, {"$set": {"server": self.server}})
`config_ini['Discern_server']`中的值
`config_ini['Discern_server']`中的特定socket数据包
#### web访问
    def try_web(self):
        title_str, html = '', ''
        try:# 进行http/https请求，获取响应报文
            if self.port == 443:
                # 对于443端口的使用https协议
                info = urllib2.urlopen("https://%s:%s" % (self.ip, self.port), timeout=self.timeout)
            else:
                info = urllib2.urlopen("http://%s:%s" % (self.ip, self.port), timeout=self.timeout)
            html = info.read()
            header = info.headers
        except urllib2.HTTPError, e:
            html = e.read()
            header = e.headers
        except:
            return
        if not header: return
        # 对于gzip格式的响应，进行解压gzip
        if 'Content-Encoding' in header and 'gzip' in header['Content-Encoding']: 
            html_data = StringIO.StringIO(html)
            gz = gzip.GzipFile(fileobj=html_data)
            html = gz.read()
        try:
            # 格式转码
            html_code = self.get_code(header, html).strip()
            if html_code and len(html_code) (.*?)', html, flags=re.I | re.M)
            if title: title_str = title.group(1)
        except: pass
        try:
            # 将响应的http报文设置成banner信息
            web_banner = str(header) + "\r\n\r\n" + html
            self.banner = web_banner
            # 添加记录
            history_info = mongo.NA_INFO.find_one({"ip": self.ip, "port": self.port})
            if 'server' not in history_info:
                tag = self.get_tag()
                web_info = {'title': title_str, 'tag': tag}
                return web_info
            else:
                if abs(len(history_info['banner'].encode('utf-8')) - len(web_banner)) > len(web_banner) / 60:
                    del history_info['_id']
                    history_info['del_time'] = datetime.datetime.now()
                    mongo.NA_HISTORY.insert(history_info)
                    tag = self.get_tag()
                    web_info = {'title': title_str, 'tag': tag}
                    date_ = datetime.datetime.now().strftime('%Y-%m-%d')
                    self.statistics[date_]['update'] += 1
                    log.write('info', None, 0, '%s:%s update web info'%(self.ip, self.port))
                    return web_info
        except:
            return
`get_tag`()
    def get_tag(self):
        try:
            url = self.ip + ':' + str(self.port)
            # 对web服务进行cms、组件容器、动态语言的识别
            tag = map(self.discern, ['Discern_cms', 'Discern_con', 'Discern_lang'], [url, url, url])
            # 过滤掉未识别出的服务
            return filter(None, tag)
        except Exception, e:
            return
`discern()`
    def discern(self, dis_type, domain):
        file_tmp = {}
        if int(domain.split(":")[1]) == 443: # http/https处理
            protocol = "https://"
        else:
            protocol = "http://"
        try:
            # http请求
            req = urllib2.urlopen(protocol + domain, timeout=self.timeout)
            header = req.headers
            html = req.read()
        except urllib2.HTTPError, e:
            html = e.read()
            header = e.headers
        except Exception, e:
            return
        # 对于'Discern_cms', 'Discern_con', 'Discern_lang'在数据库中都有自己的识别判断方式
        for mark_info in self.config_ini[dis_type]:
            if mark_info[1] == 'header':
                try:
                    if not header: return
                    # 通过header方式则对对应的http头中的值进行匹配
                    # 如存在PHPSSIONID之类的值判定为php
                    if re.search(mark_info[3], header[mark_info[2]], re.I):
                        return mark_info[0]
                except Exception, e:
                    continue
            elif mark_info[1] == 'file':
                if mark_info[2] == 'index':
                    try:
                        if not html: return
                        # 对于file index方式利用文件后缀，如1.php这样判断为php语言
                        if re.search(mark_info[3], html, re.I):
                            return mark_info[0]
                    except Exception, e:
                        continue
                else:
                    # 防止重复检测
                    if mark_info[2] in file_tmp:
                        re_html = file_tmp[mark_info[2]]
                    else:
                        # 访问指定的robots.txt之类的文件
                        try:
                            re_html = urllib2.urlopen(protocol + domain + "/" + mark_info[2],
                                                      timeout=self.timeout).read()
                        except urllib2.HTTPError, e:
                            re_html = e.read()
                        except Exception, e:
                            return
                        file_tmp[mark_info[2]] = re_html
                    try:
                        # 检测指定文件中是否存在特定关键字
                        # 如robots.txt中存在'php168'则为php168cms
                        if re.search(mark_info[3], re_html, re.I):
                            return mark_info[0]
                    except Exception, e:
                        print mark_info[3]
`config_ini[Discern_lang]`中的值
`config_ini[Discern_cms]`中的值
* * *
最后回到`run()`中
    web_info = self.try_web()  # 尝试web访问
    if web_info:
        # 检测完web特征之后，就是进行简单的log记录，和更新数据库中info的值
        log.write('web', self.ip, self.port, web_info)
        time_ = datetime.datetime.now()
        mongo.NA_INFO.update({'ip': self.ip, 'port': self.port},
                             {"$set": {'banner': self.banner, 'server': 'web', 'webinfo': web_info,
                                       'time': time_}})
到这里，scan的扫描也就结束了，回到`start`类的`run()`中，剩下的就是不使用masscan的扫描
    if self.mode == 0: # 不使用masscan扫描
        # 如果设置了icmp检测，会对ip列表进行存活检测，只扫描存活ip
        if self.icmp: all_ip_list = self.get_ac_ip(all_ip_list)
        for ip_str in all_ip_list: self.queue.put(ip_str)  # 加入队列
        self.scan_start()  # TCP探测模式开始扫描
这里的扫描过程中将ip列表改成了`all_ip_list`，其余的扫描过程也是通过`scan_start()`来调用`scan`类进行扫描。
到这里，整个`NAScan`资产扫描过程也就完成了，每次扫描完会sleep60秒，然后再次循环这个过程。
# vulscan
用于对扫出的资产进行漏洞扫描，具体的扫描过程依赖于`vuldb`中的插件形式进行扫描，做到可插拔的模式
json格式的插件
转换成json形式后就是
    {
        "name" : "Axis2信息泄露",
        "info" : "HappyAxis.jsp 页面存在系统敏感信息。",
        "level" : "低危",
        "type" : "信息泄露",
        "author" : "wolf@YSRC",
        "url": "",
        "keyword" : "tag:axis2",
        "source" : 1,
        "plugin" : {
            "url" : "/axis2/axis2-web/HappyAxis.jsp",
            "tag" : "敏感信息泄露",
            "analyzing" : "keyword",
            "analyzingdata" : "Axis2 Happiness Page",
            "data" : "",
            "method" : "GET"
        }
    }
python脚本格式的插件
    # coding:utf-8
    import ftplib
    def get_plugin_info():  # 插件描述信息
        plugin_info = {
            "name": "FTP弱口令",
            "info": "导致敏感信息泄露，严重情况可导致服务器被入侵控制。",
            "level": "高危",
            "type": "弱口令",
            "author": "wolf@YSRC",
            "url": "",
            "keyword": "server:ftp",  # 推荐搜索关键字
        }
        return plugin_info
    def check(ip, port, timeout): # 漏洞检测代码
        user_list = ['ftp', 'www', 'admin', 'root', 'db', 'wwwroot', 'data', 'web']
        for user in user_list:
            for pass_ in PASSWORD_DIC:  # 密码字典无需定义，程序会自动为其赋值。
                pass_ = str(pass_.replace('{user}', user))
                try:
                    ftp = ftplib.FTP()
                    ftp.timeout = timeout
                    ftp.connect(ip, port)
                    ftp.login(user, pass_)
                    if pass_ == '': pass_ = 'null'
                    if user == 'ftp' and pass_ == 'ftp': return u"可匿名登录"
                    return u"存在弱口令，账号：%s，密码：%s" % (user, pass_)  # 成功返回结果，内容显示在扫描结果页面。
                except:
                    pass
扫描过程较资产扫描偏简单些，一个280行左右的单文件
一开始定义了一些全局变量
    # 添加系统路径
    sys.path.append(sys.path[0] + '/vuldb')
    sys.path.append(sys.path[0] + "/../")
    # 获取mongodb账号配置
    from Config import ProductionConfig
    # 进行mongodb认证连接
    db_conn = pymongo.MongoClient(ProductionConfig.DB, ProductionConfig.PORT)
    na_db = getattr(db_conn, ProductionConfig.DBNAME)
    na_db.authenticate(ProductionConfig.DBUSERNAME, ProductionConfig.DBPASSWORD)
    # 做了几个集合的简化操作
    na_task = na_db.Task
    na_result = na_db.Result
    na_plugin = na_db.Plugin
    na_config = na_db.Config
    na_heart = na_db.Heartbeat
    # 线程锁
    lock = thread.allocate()
    # 一些全局变量
    PASSWORD_DIC = []
    THREAD_COUNT = 50
    TIMEOUT = 10
    PLUGIN_DB = {}
    TASK_DATE_DIC = {}
    WHITE_LIST = []
然后开始运行流程
    if __name__ == '__main__':
        init() # 进行init初始化操作
        PASSWORD_DIC, THREAD_COUNT, TIMEOUT, WHITE_LIST = get_config() # 获取配置
        thread.start_new_thread(monitor, ()) # 启动监控线程
        while True:
            task_id, task_plan, task_target, task_plugin = queue_get() # 任务信息获取
            if task_id == '':