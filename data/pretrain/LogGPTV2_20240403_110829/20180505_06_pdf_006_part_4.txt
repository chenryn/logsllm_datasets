CONSTRAINT json_docs_json_chk CHECK (data IS JSON
46
You can query a JSON document directly from a SQL query without the use of special functions. Querying
without functions is called Dot Notation.
SELECT a.data.FName,
a.data.LName,
a.data.Address.Pcode AS Postcode
FROM json_docs a;
FNAME LNAME POSTCODE
--------------- --------------- ----------
John Doe 90210
1 row selected.
In addition, Oracle provides multiple SQL functions that integrate with the SQL language and enable querying
JSON documents (such as IS JSON, JSON_VAUE, JSON_EXISTS , JSON_QUERY , and JSON_TABLE ).
For additional details:
http://docs.oracle.com/database/121/ADXDB/json.htm#ADXDB6246
47
Migration to: PostgreSQL JSON Support
[Back to TOC]
Overview
PostgreSQL provides native JSON Document support using the JSON data types and .
JSON JSONB
: Stores an exact copy of the input text, which processing functions must reparse on each execution. It
JSON
also preserves semantically-insignificant white space between tokens and the order of keys within JSON
objects.
: Stores data in a decomposed binary format causing slightly slower input performance due to added
JSONB
conversion to binary overhead. But, it is significantly faster to process since no reparsing is needed on reads.
● Does not preserve white space.
● Does not preserve the order of object keys.
● Does not keep duplicate object keys. If duplicate keys are specified in the input, only the last value is
retained.
Most applications store JSON data as unless there are specialized needs.
JSONB
For additional information about the differences between JSON and JSOB datatypes:
https://www.postgresql.org/docs/9.6/static/datatype-json.html
In order to adhere to the full JSON specification, database encoding must be set to UTF8. If the database
codepage is set to non-UTF8, characters that can be represented in the database encoding, but not in UTF8,
are allowed. This condition is not desirable.
Creating JSON Tables in PostgreSQL and Inserting Data:
1. Create a PostgreSQL table named with a single JSON column:
json_docs
CREATE TABLE json_docs (data jsonb);
2. Create a PostgreSQL table named with two scalar datatype columns and a single JSON column:
employees
CREATE TABLE employees (emp_id int, emp_name varchar(100), emp_data jsonb);
3. Insert JSON data into the table:
INSERT INTO employees VALUES (1, 'First Employee',
'{ "address": "1234 First Street, Capital City", "phone numbers": { "home":
"123456789", "mobile": "98765431" } }');
Oracle uses data types to store JSON data, but PostgreSQL uses the special
VARCHAR/BLOB/CLOB JSON
and data types. Validations of proper JSON formats are performed during insert. You cannot store
JSONB
invalid in a data type.
JSON JSON/JSONB
48
Query JSON/JSONB data with operators
Querying JSON data in PostgreSQL uses different query syntax from Oracle – you must change application
queries. Examples of PostgreSQL-native JSON query syntax are provided below:
1. Return the JSON document stored in the column associated with :
emp_data emp_id=1
SELECT emp_data FROM employees WHERE emp_id = 1;
2. Return all JSON documents stored in the column having a key named :
emp_data address
SELECT emp_data FROM employees WHERE emp_data ? 'address';
3. Return all JSON items that have an key or a key:
address hobbies
SELECT * FROM employees WHERE emp_data ?| array['address', 'hobbies'];
4. Return all JSON items that have both an key and a key:
address hobbies
SELECT * FROM employees WHERE emp_data ?& array['a', 'b'];
5. Return the value of key in the array:
home phone numbers
SELECT emp_data ->'phone numbers'->>'home' FROM employees;
6. Return all JSON documents where the key is equal to a specified value and return all JSON
address
documents where key contains a specific string (using ):
address like
SELECT * FROM employees WHERE emp_data->>'address' = '1234 First Street,
Capital City';
SELECT * FROM employees WHERE emp data->>'address' like '%Capital City%';
For additional details:
https://www.postgresql.org/docs/9.6/static/functions-json.html
49
Oracle vs. PostgreSQL JSON Support
Feature Oracle (Dot-Notation) PostgreSQL
Return the full JSON is a column that stores is a column that stores
emp_data emp_data
document / all JSON json documents: JSON documents:
documents
SELECT emp_data FROM SELECT emp_data FROM
employees; employees;
Return a specific Return only the address property: Return only the address property, for
element from a JSON emp_id 1 from the emp_data JSON
document SELECT e.emp_data.address column in the employees table:
FROM employees e;
select emp_data->>'address'
from employees
where emp_id = 1;
Return JSON Return the JSON based on a search Either use jsonb_pretty to flatten the
documents matching a of on all JSON properties. Could be JSON and search or, preferably, convert
pattern in any field returned even if element is equal to it to text and make like search on value
the pattern
select *
SELECT e.emp_data FROM from
employees e (select
WHERE e.emp_data like jsonb_pretty(emp_data) as
'%patten%'; raw_data
from employees) raw_jason
where raw_data like
'%1234%';
SELECT key, value FROM
card, lateral
jsonb_each_text(data)
WHERE value LIKE
'%pattern%';
Return JSON SELECT e.emp_data.name Only return results where the
documents matching a FROM employees e “finished” property in the JSON
pattern in specific WHERE e.data.active = document is true:
fields (root level) 'true';
SELECT * FROM employees
WHERE emp_data->>'active' =
'true';
Define a column in a 1. Create a table with a 1. Create a table with a column defined
CLOB
table that supports column. as JSON:
JSONB documents 2. Define an “IS JSON” constraint on
the column.
CREATE TABLE json_docs (
CREATE TABLE json_docs id integer NOT NULL,
(id RAW(16) NOT NULL, data jsonb
data CLOB, );
CONSTRAINT json_docs_pk
PRIMARY KEY (id),
CONSTRAINT
json_docs_json_chk CHECK
(data IS JSON)
);
50
Indexing and Constraints with JSONB Columns
You can use the statement to enforce constraints on values inside JSON
CREATE UNIQUE INDEX
documents stored in PostgreSQL. For example, you can create a unique index that forces values of the
key to be unique.
address
CREATE UNIQUE INDEX employee_address_uq ON employees( (emp_data->>'address') ) ;
This index allows the first SQL insert statement to work and causes the second to fail:
INSERT INTO employees VALUES (2, 'Second Employee',
1234 Second Street, Capital City
'{ "address": " "}');
INSERT INTO employees VALUES (3, 'Third Employee',
1234 Second Street, Capital City
'{ "address": " "}');
ERROR: duplicate key value violates unique constraint "employee_address_uq" SQL
state: 23505 Detail: Key ((emp_data ->> 'address'::text))=(1234 Second Street,
Capital City) already exists.
For JSON data, PostgreSQL Supports B-Tree, HASH, and GIN indexes (Generalized Inverted Index). A GIN index
is a special inverted index structure that is useful when an index must map many values to a row (such as
indexing JSON documents).
When using GIN indexes, you can efficiently and quickly query data using only the following JSON operators:
@>, ?, ?&, ?|
Without indexes, PostgreSQL is forced to perform a full table scan when filtering data. This condition applies
to JSON data and will most likely have a negative impact on performance since Postgres has to step into each
JSON document.
1. Create an index on the address key of :
emp_data
CREATE idx1_employees ON employees ((emp_data->>'address'));
2. Create a GIN index on a specific key or the entire column:
emp_data
CREATE INDEX idx2_employees ON cards USING gin ((emp_data->'tags'));
CREATE INDEX idx3 employees ON employees USING gin (emp data);
For addit ional details:
https://www.postgresql.org/docs/9.6/static/datatype-json.html
https://www.postgresql.org/docs/9.6/static/functions-json.html
51
Migrating from: Oracle OLAP Functions
[Back to TOC]
Overview
Oracle OLAP functions extend the functionality of standard SQL analytic functions by providing capabilities to
compute aggregate values based on a group of rows. You can apply the OLAP functions to logically
“partitioned” sets of results within the scope of a single query expression. OLAP functions are usually used in
combination with Business Intelligence reports and analytics. They can help boost query performance – an
alternative to achieving the same result using more complex non-OLAP SQL code.
Common Oracle OLAP Functions:
Function Type Related Functions
Aggregate average_rank, avg, count, dense_rank, max, min, rank ,sum
Analytic average_rank, avg, count, dense_rank, lag, lag_variance,
lead_variance_percent, max, min, rank, row_number, sum,
percent_rank, cume_dist, ntile, first_value, last_value
Hierarchical hier_ancestor, hier_child_count,, hier_depth, hier_level,
hier_order, hier_parent, hier_top
Lag lag, lag_variance, lag_variance_percent, lead, lead_variance,
lead_variance_percent
OLAP DML olap_dml_expression
Rank average_rank ,dense_rank, rank, row_number
For additional details:
https://docs.oracle.com/cd/E11882_01/olap.112/e23381/olap_functions.htm#OLAXS169
https://docs.oracle.com/database/121/OLAXS/olap_functions.htm#OLAXS174
52
Migration to: PostgreSQL Window Functions
[Back to TOC]
Overview
PostgreSQL refers to ANSI SQL analytical functions as “Window Functions”. They provide the same core
functionality as SQL Analytical Functions and Oracle extended OLAP functions. Window functions in
PostgreSQL operate on a logical “partition” or "window" of the result set and return a value for rows in that
“window”.
From a database migration perspective, you should examine PostgreSQL Window Functions by type and
compare them with the equivalent Oracle’s OLAP functions to verify compatibility of syntax and output.
Note: Even if a PostgreSQL window function provides the same functionality of a specific Oracle OLAP
function, the returned data type may be different and require application changes.
PostgreSQL provides support for two main types of Window Functions:
• Aggregation functions.
• Ranking functions.
PostgreSQL Window Functions by Type:
Function Type Related Functions
Aggregate avg, count, max, min, sum, string_agg
Ranking row_number, rank, dense_rank, percent_rank, cume_dist, ntile, lag,
lead, first_value, last_value, nth_value
Oracle’s OLAP Functions vs. PostgreSQL Window Functions:
Oracle Returned PostgreSQL Window Returned Compatible
OLAP Function Data Type Function Data Type Syntax
count number count bigint Yes
max number max numeric, string, date/time, Yes
network or enum type
min number min numeric, string, date/time, Yes
network or enum type
avg number avg numeric, double, otherwise Yes
same datatype as the
argument
sum number sum bigint, otherwise same Yes
datatype as the argument
rank() number rank() bigint Yes
row_number() number row_number() bigint Yes
dense_rank() number dense_rank() bigint Yes
percent_rank() number percent_rank() double Yes
cume_dist() number cume_dist() double Yes
ntile() number ntile() integer Yes
lag() same lag() same type as value Yes
type as
value
53
Oracle Returned PostgreSQL Window Returned Compatible
OLAP Function Data Type Function Data Type Syntax
lead() same lead() same type as value Yes
type as
value
first_value() same first_value() same type as value Yes
type as
value
last_value() same last_value() same type as value Yes
type as
value
54
Example
The Oracle function & PostgreSQL function providing the same results
rank() rank()
Oracle:
SQL> SELECT department_id, last_name, salary, commission_pct,
RANK() OVER (PARTITION BY department_id
ORDER BY salary DESC, commission_pct) "Rank"
FROM employees WHERE department_id = 80;
DEPARTMENT_ID LAST_NAME SALARY COMMISSION_PCT Rank
------------- ------------------------- ---------- -------------- ----------
80 Russell 14000 .4 1
80 Partners 13500 .3 2
80 Errazuriz 12000 .3 3
…
PostgreSQL:
hr=# SELECT department_id, last_name, salary, commission_pct,
RANK() OVER (PARTITION BY department_id
ORDER BY salary DESC, commission_pct) "Rank"
FROM employees WHERE department_id = 80;
DEPARTMENT_ID LAST_NAME SALARY COMMISSION_PCT Rank
------------- ------------------------- ---------- -------------- ----------
80 Russell 14000.00 0.40 1
80 Partners 13500.00 0.30 2
80 Errazuriz 12000.00 0.30 3…
Note: The returned formatting for certain numeric data types is different.
Oracle CONNECT BY Equivalent in PostgreSQL:
PostgreSQL provides two workarounds as alternatives to Oracle’s hierarchical statements such as the
function:
CONNECT BY
• Use PostgreSQL function.
generate_series
• Use PostgreSQL recursive views.
For more information:
https://www.postgresql.org/docs/9.6/static/sql-createview.html
55
Example
PostgreSQL function:
generate_series
demo=> SELECT "DATE"
FROM generate_series(timestamp '2010-01-01',
timestamp '2017-01-01',
interval '1 day') s("DATE");
DATE
---------------------
2010-01-01 00:00:00
2010-01-02 00:00:00
2010-01-03 00:00:00
2010-01-04 00:00:00
2010-01-05 00:00:00
…
For additional details:
https://www.postgresql.org/docs/9.6/static/functions-window.html
https://www.postgresql.org/docs/9.6/static/functions-aggregate.html
Extended Support for Analytic Queries and OLAP
For advanced analytic purposes and use cases, consider using Amazon Redshift as a purpose-built data
warehouse cloud solution. You can run complex analytic queries against petabytes of structured data using
sophisticated query optimization, columnar storage on high-performance local disks, and massive parallel
query execution. Most results are returned in seconds.
Amazon Redshift is specifically designed for online analytic processing (OLAP) and business intelligence (BI)
applications, which require complex queries against large datasets. Because it addresses very different
requirements, the specialized data storage schema and query execution engine that Amazon Redshift uses is
completely different from the PostgreSQL implementation. For example, Amazon Redshift stores data in
columns, also known as a columnar-store database.
56
Amazon Redshift Window functions by type:
Function Type Related Functions
Aggregate AVG
COUNT
CUME_DIST
FIRST_VALUE
LAG
LAST_VALUE
LEAD
MAX
MEDIAN
MIN
NTH_VALUE
PERCENTILE_CONT
PERCENTILE_DISC
RATIO_TO_REPORT
STDDEV_POP
STDDEV_SAMP (synonym for STDDEV)
SUM
VAR_POP
VAR_SAMP (synonym for VARIANCE)
Ranking DENSE_RANK
NTILE
PERCENT_RANK
RANK
ROW_NUMBER
For additional details:
http://docs.aws.amazon.com/redshift/latest/dg/c_Window_functions.html
http://docs.aws.amazon.com/redshift/latest/dg/r_Window_function_examples.html
57
Migrating from: Oracle PL/SQL Cursors
[Back to TOC]
Overview
PL/SQL cursors are pointers to data sets on which application logic can iterate. A PL/SQL cursor holds the rows
returned by a SQL statement. Using cursors, PL/SQL code can iterate over the rows and execute business logic
one row at a time. You can refer to the active data set in named cursors from inside a program.
There are two types of cursors in PL/SQL:
1. Implicit Cursors – Session cursors constructed and managed by PL/SQL automatically without being
created or defined by the user. PL/SQL opens an implicit cursor each time you run a SELECT or DML
statement. Implicit cursors are also called “SQL Cursors”.
2. Explicit Cursors – Session cursors created, constructed, and managed by a user. You declare and define an
explicit cursor giving it a name and associating it with a query. Unlike an implicit cursor, you can reference
an explicit cursor using its name. An explicit cursor or cursor variable is called a “named cursor”.
When migrating Oracle PL/SQL Cursors to PostgreSQL, most of the focus is on application-controlled (or
programmatically-controlled) cursors, which are Explicit Cursors.
Examples
1. Define an explicit PL/SQL cursor named .
c1
2. The cursor executes an SQL statement to return rows from the database.
3. The PL/SQL Loop reads data from the cursor, row by row, and stores the values into two variables:
- v_lastname
- v_jobid
4. The loop terminates when the last row is read from the database using the attribute.
%NOTFOUND
DECLARE
CURSOR c1 IS
SELECT last_name, job_id FROM employees
WHERE REGEXP_LIKE (job_id, 'S[HT]_CLERK')
ORDER BY last_name;
v_lastname employees.last_name%TYPE; -- variable to store last_name
v_jobid employees.job_id%TYPE; -- variable to store job_id
BEGIN
O PEN c1;
L OOP -- Fetches 2 columns into variables
FETCH c1 INTO v_lastname, v_jobid;
EXIT WHEN c1%NOTFOUND;
END LOOP;
CLOSE c1;
END;
58
1. Define an implicit PL/SQL Cursor using a Loop.
FOR
2. The cursor executes a query and stores values returned into a record.
3. A loop iterates over the Cursor data set and prints the result.
BEGIN
FOR item IN (
SELECT last_name, job_id
FROM employees
WHERE job_id LIKE '%MANAGER%'
AND manager_id > 400
ORDER BY last_name
)
LOOP
DBMS_OUTPUT.PUT_LINE
('Name = ' || item.last_name || ', Job = ' || item.job_id);
END LOOP;
END;
/
For additional details:
https://docs.oracle.com/database/121/LNPLS/explicit_cursor.htm#LNPLS01313
https://docs.oracle.com/database/121/LNPLS/static.htm#GUID-596C1961-5A94-40ED-9920-668BB05632C5
59
Migration to: PostgreSQL PL/pgSQL Cursors
[Back to TOC]