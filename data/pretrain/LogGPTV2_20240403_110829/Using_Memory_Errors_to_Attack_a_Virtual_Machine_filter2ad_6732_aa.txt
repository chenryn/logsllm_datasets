title:Using Memory Errors to Attack a Virtual Machine
author:Sudhakar Govindavajhala and
Andrew W. Appel
Using Memory Errors to Attack a Virtual Machine
Sudhakar Govindavajhala 
Andrew W. Appel
Princeton University
fsudhakar,PI:EMAIL
Abstract
We present an experimental study showing that soft
memory errors can lead to serious security vulnerabilities
in Java and .NET virtual machines, or in any system that
relies on type-checking of untrusted programs as a protec-
tion mechanism. Our attack works by sending to the JVM
a Java program that is designed so that almost any mem-
ory error in its address space will allow it to take control
of the JVM. All conventional Java and .NET virtual ma-
chines are vulnerable to this attack. The technique of the
attack is broadly applicable against other language-based
security schemes such as proof-carrying code.
We measured the attack on two commercial Java Vir-
tual Machines: Sun’s and IBM’s. We show that a single-
bit error in the Java program’s data space can be ex-
ploited to execute arbitrary code with a probability of
about 70%, and multiple-bit errors with a lower proba-
bility.
Our attack is particularly relevant against smart cards
or tamper-resistant computers, where the user has phys-
ical access (to the outside of the computer) and can use
various means to induce faults; we have successfully used
heat. Fortunately, there are some straightforward de-
fenses against this attack.
1 Introduction
Almost any secure computer system needs basic pro-
tection mechanisms that isolate trusted components (such
as the implementation and enforcement of security poli-
cies) from the less trusted components.
In many sys-
tems, the basic protection mechanism is hardware virtual
memory managed by operating system software. In the
This research was supported in part by DARPA award F30602-99-
1-0519.
Java Virtual Machine (and in the similar Microsoft .NET
virtual machine), the basic protection mechanism is type
checking, done by a bytecode veriﬁer when an untrusted
program is imported into the system.
Assuming the type system is sound (like Java, but un-
like C or C++), type-checking as a protection mechanism
allows closer coupling between trusted and untrusted pro-
grams: object-oriented shared-memory interfaces can be
used, instead of message-passing and remote procedure
call across address spaces. Thus, language-based mecha-
nisms are very attractive—if they work.
Because the untrusted programs run in the same ad-
dress space as trusted parts of the virtual machine, type
checking must provide strong protection. The Java Vir-
tual Machine Language type system has been proved
sound [8, 9], and subsets of it have even been proved
sound with machine-checked proofs [19]. Provided that
there are no bugs in the implementation of the veriﬁer and
the just-in-time compiler, or provided that one can type-
check the output of the just-in-time compiler using an
approach such as proof-carrying code [5], type-checking
should be able to guarantee—as well as virtual memory
can—that untrusted programs cannot read or write the pri-
vate data of trusted programs.
Java can be compiled to efﬁcient machine code, and
supports data abstraction well, because it uses link-time
type-checking instead of run-time checking. However,
this leaves Java vulnerable to a time-of-check-to-time-of-
use attack. All the proofs of soundness are premised on
the axiom that the computer faithfully executes its spec-
iﬁed instruction set. In the presence of hardware faults,
this premise is false. If a cosmic ray comes through the
memory and ﬂips a bit, then the program will read back a
different word than the one it wrote.
A previous study of the impact of memory errors on
security measured the likelihood that a random single-
bit error would compromise the security of an existing
program [20]. This study found (for example) that a
text-segment memory error would compromise ssh with
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
about 0.1% probability. Boneh et al. used random hard-
ware faults to recover secrets in cryptographic protocols
[3]. Anderson and Kuhn studied various physical attack
techniques on smartcards and other security processors
by inducing errors at speciﬁc locations at speciﬁc instants
[1, 2]. Unlike them, we use arbitrary errors to take over a
virtual machine.
We show that when the attacker is allowed to provide
the program to be executed, he can design a program such
that a single-bit error in the process address space gives
him a 70% probability of completely taking over the JVM
to execute arbitrary code.
An attacker could use this program in two ways. To
attack a computer to which he has no physical access, he
can convince it to run the program and then wait for a
cosmic ray (or other natural source) to induce a memory
error. To attack a tamper-resistant processor to which he
has physical access only to the outside of the box (such as
a Java card), he can induce it to run the program and then
induce an error using radiation or other means; we will
describe measurements of the effects of infrared radiation.
think that parity checking or error-
correcting codes would prevent this attack. But in the
low-proﬁt-margin PC market, parity or ECC bits are usu-
ally not provided.
One might
This paper highlights the importance of hardware reli-
ability in assuring the security of a program.
2 The attack program
Our attack is against a JVM that permits untrusted code
to execute after it has used its bytecode veriﬁer to check
that the code is type-safe, and therefore respects its inter-
faces.
The goal of our attack applet1 is to obtain two pointers
of incompatible types that point to the same location. This
permits circumvention of the Java type system. Once the
type system is circumvented, it is straightforward to write
a function that reads and writes arbitrary memory loca-
tions in the program address space, and hence executes
arbitrary code [10, pp. 74–76].
The attack works by sending the Java Virtual Machine
a program (which the JVM will type-check using the byte-
code veriﬁer) and waiting for a memory error. The pro-
gram type-checks; when it runs, it arranges the memory
so that memory errors allow it to defeat the type system.
Our attack applet is quite simple. First, it ﬁlls the heap
with many objects of class B and one object of class A.
1An applet is a program that runs with few privileges: no access to
the ﬁle system and limited access to the network.
All the ﬁelds of all the B objects are initialized to point
to the unique A object, which sits at address x. Classes
A and B are deﬁned so that, including the object header,
their size is a power of two:
class A {
class B {
A a1;
A a2;
B b;
A a4;
A a5;
int i;
A a7;
};
A a1;
A a2;
A a3;
A a4;
A a5;
A a6;
A a7;
};
Now the applet waits patiently for a memory error.
Suppose a cosmic ray ﬂips the ith bit of some word in
a B object:
Cosmic ray
B
i
A
B
i
2
If 2i is larger than the object size, then x  2i is likely
to point to the base of a B object ( is the exclusive-or
operator):
A
B
i
2
B
Thus, there’s a ﬁeld whose static type is A but which
actually points to a B object; this can be exploited, as we
will explain. On the other hand, suppose 2i is smaller than
the object size; then the mutated ﬁeld points within the A
object:
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
A
i
2
B
Suppose there is a pointer variable p of class A, con-
taining address x. When the program dereferences the b
ﬁeld of p into a pointer s of type B, as follows:
B s;
A p;
s = p.b;
it is really fetching from address x  offset, where offset is
the distance from the base of the object to the beginning
of the b ﬁeld:
x
i
2
x’
x+offset
x’+offset
But if the ith bit of p has ﬂipped, then the fetch is from
address x  2i  offset, as shown in the diagram. The
applet dereferences p.b; it thinks it’s fetching a ﬁeld of
type B, but it’s really fetching a ﬁeld of type A.
Now that we explained the principle of how our attack
applet works, we will explain some details of the algo-
rithm. Figure 1 summarizes the layout of objects in mem-
ory created by the attack applet. There is one object of
class A; let us suppose it is at address x. The applet sets
all the A ﬁelds of all the objects to point to x, and it sets
the ﬁeld x.b to point to some object of class B.
After creating the data structure, it repeatedly reads all
the A ﬁelds of all the objects and checks (via Java pointer
equality) whether they still contain x.
Now suppose that in one of the many B objects, one of
the bits in one of the ﬁelds has been traversed by a cosmic
ray, and ﬂips — for example, bit 5 of ﬁeld a6 of record
b384. We fetch this ﬁeld into a pointer variable r of type
A:
B b384; B q;
A r;
r = b384.a6;
q = r.b;
The ﬁeld b384.a6 originally contained a copy of p,
as did all the A ﬁelds of all the objects. If the ith bit of
b384.a6 has been ﬂipped, then when the program deref-
erences r:b it is fetching from address x 2i offset into
q. Most of the program memory is ﬁlled with ﬁelds of
x⊕26     
t
e
s
f
f
o
+
object of
class B
object of
class B
x⊕22     
x
t
e
s
f
f
o
+
x
t
e
s
f
f
o
+
object of
class A
x⊕25     
t
e
s
f
f
o
+
object of
class B
B header
B header
A
A
A
A
A
A
A
A
A
A
A
A
A
A
A header
A
A
B
A
A
int
A
B header
A
A
A