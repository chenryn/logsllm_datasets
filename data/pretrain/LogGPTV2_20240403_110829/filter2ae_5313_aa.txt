**作者：360漏洞研究院 许仕杰 宋建阳 李林双  
原文链接：**
## 概述
近两年通用日志文件系统模块 (clfs) 成为了 Windows 平台安全研究的热点，本文首先会介绍一些关于 clfs
的背景知识，然后会介绍我们是如何对这个目标进行 fuzz ，最后将分享几个漏洞案例以及我们是如何使用一种新方法实现本地提权。
## 背景知识
根据微软官方文档可以知道，通用日志文件系统 (clfs) 是 Windows Vista
引入的一种新的日志记录机制，它负责提供一个高性能、通用的日志文件子系统，供专用客户端应用程序使用，多个客户端可以共享以优化日志访问。
我们可以使用 `CreateLogFile` 函数创建或打开一个日志文件 (.blf)。日志名决定这个日志为单路日志还是多路日志，日志名格式为 `(log
:[::])` ，日志可以通过 `CloseHandle` 函数关闭。
    CLFSUSER_API HANDLE CreateLogFile(
      [in]           LPCWSTR               pszLogFileName,
      [in]           ACCESS_MASK           fDesiredAccess,
      [in]           DWORD                 dwShareMode,
      [in, optional] LPSECURITY_ATTRIBUTES psaLogFile,
      [in]           ULONG                 fCreateDisposition,
      [in]           ULONG                 fFlagsAndAttributes
    );
我们可以通过查询微软官方文档或者逆向clfs.sys驱动获取一些日志相关操作函数。
## Fuzz CLFS
我们首先查阅了一些前辈的研究资料(链接会放在文末)，可以发现攻击面主要分为两类
  * clfs.sys 中日志文件解析相关漏洞
  * clfs.sys 中 IoCode 处理相关漏洞
我们决定先研究 blf 日志文件格式，然后对该日志文件格式进行fuzz，最后我们总结出 blf 格式如下图
知道日志文件格式和日志处理函数之后，我们的 fuzz 设计就很简单，大致思路如下
  * 创建日志文件(单路、多路、是否设置 Container 容器)
  * 根据文件格式随机数据
  * 调用函数使 clfs.sys 对日志文件进行解析
需要注意的是在每次随机文件内容的时候，需要绕过一个 CRC 检查，伪代码如下
    __int64 __fastcall CCrc32::ComputeCrc32(BYTE* Ptr, int Size)
    {
      unsigned int Crc;
      for ( int i = 0; i > 8) ^ CCrc32::m_rgCrcTable[(unsigned __int8)Crc ^ data];
      }
      return ~Crc;
    }
在逆向过程中，我们观察到一些以 Get 和 Acquire 开头的函数会直接从 blf 文件中读取数据，所以我们在随机数据的时候重点关注这些函数即可。
## 漏洞分析
经过一段时间的 fuzz，我们得到了一些崩溃，这里分享其中两个
**CVE-2022-21916**
第一个漏洞出现在 `CClfsBaseFilePersisted::ShiftMetadataBlockDescriptor` 函数，其伪代码如下所示
    CClfsBaseFilePersisted::ShiftMetadataBlockDescriptor(this,UINT iFlushBlock,UINT iExtendBlock)
    {
      // ...
      NewTotalSize = -1;
      TotalSize = iExtendBlock * this->SectorSize;
      if ( TotalSize > 0xFFFFFFFF )
        return STATUS_INTEGER_OVERFLOW;
      TotalSectorSize = this->BaseMetaBlock[iFlushBlock].TotalSectorSize; // OOB read
      if ( TotalSectorSize + TotalSize >= TotalSectorSize )
        NewTotalSize = TotalSectorSize + TotalSize;
      Status = TotalSectorSize + TotalSize BaseMetaBlock[iFlushBlock].TotalSectorSize = NewTotalSize;
      return Status;
    }
该函数在解析 `CLFS_CONTROL_RECORD` 结构的时候出现了问题，该结构可以在 blf 文件偏移 0x70 的位置找到，其中
iFlushBlock 存在于 blf 文件的 0x8A 处，iExtendBlock 存在于文件的 0x88
处，此函数未正确对这两个参数进行检查导致了越界漏洞的产生。到达此函数还需要将 eExtendState 字段设置为 2，此字段存在于 blf 文件 0x84
的位置，如下所示：
**Vulnerability for TianfuCup**
第二个漏洞出现在 `CClfsLogFcbPhysical::OverflowReferral` 函数，与 CVE-2022-21916
类似，该漏洞也是在解析 blf 文件格式时出现问题，该函数主要与 ownerpage 操作相关。伪代码如下
    CClfsLogFcbPhysical::OverflowReferral(CClfsLogFcbPhysical *this, struct _CLFS_LOG_BLOCK_HEADER * LogBlockHeader)
    {
      // NewOwnerPage is a Paged Pool of size 0x1000
      NewOwnerPage = &LogBlockHeader->MajorVersion + LogBlockHeader->RecordOffsets[2]; 
      OldOwnerPage = &this->OwnerPage->MajorVersion + this->OwnerPage->RecordOffsets[2];
      ClientId = CClfsBaseFile::HighWaterMarkClientId(this->CClfsBaseFilePersisted); // BaseLogRecord->cNextClient - 1
      i = 0;
      do
      {
        i = i++;
        i *= 2i64;
        *(CLFS_LSN *)&NewOwnerPage[8 * i] = CLFS_LSN_INVALID; // OOB Write
        *(_QWORD *)&NewOwnerPage[8 * i + 8] = *(_QWORD *)&OldOwnerPage[8 * i + 8];
      }
      while ( i  dt nt!_ALPC_HANDLE_TABLE
       +0x000 Handles          : Ptr64 _ALPC_HANDLE_ENTRY
       +0x008 TotalHandles     : Uint4B
       +0x00c Flags            : Uint4B
       +0x010 Lock             : _EX_PUSH_LOCK