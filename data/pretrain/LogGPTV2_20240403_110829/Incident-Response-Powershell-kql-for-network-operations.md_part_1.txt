::: {#mask}
:::
::: wrapper
::: {#header-desktop .desktop}
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: menu
::: menu-inner
[Posts](/posts/){.menu-item} [Categories](/categories/){.menu-item}
[whoami](/whoami){.menu-item} [Projects](/projects){.menu-item} [KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"} []{.menu-item .delimiter}[
[](javascript:void(0); "Search"){#search-toggle-desktop .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-desktop
.search-button .search-clear} []{#search-loading-desktop .search-button
.search-loading} ]{#search-desktop .menu-item
.search}[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
:::
::: {#header-mobile .mobile}
::: header-container
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: {#menu-toggle-mobile .menu-toggle}
:::
:::
::: {#menu-mobile .menu}
::: search-wrapper
::: {#search-mobile .search .mobile}
[](javascript:void(0); "Search"){#search-toggle-mobile .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-mobile
.search-button .search-clear} []{#search-loading-mobile .search-button
.search-loading}
:::
[Cancel](javascript:void(0);){#search-cancel-mobile .search-cancel}
:::
[Posts](/posts/){.menu-item}[Categories](/categories/){.menu-item}[whoami](/whoami){.menu-item}[Projects](/projects){.menu-item}[KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"}
[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
::: {.search-dropdown .desktop}
::: {#search-dropdown-desktop}
:::
:::
::: {.search-dropdown .mobile}
::: {#search-dropdown-mobile}
:::
:::
::: {.main role="main"}
::: container
# KQL Functions For Network Operations {#kql-functions-for-network-operations .single-title .animate__animated .animate__flipInX}
::: post-meta
::: post-meta-line
[[Bert-Jan Pals](/ "Author"){.author
rel="author"}]{.post-author} [included in
[KQL](/categories/kql/) [Detection
Engineering](/categories/detection-engineering/) [SOC](/categories/soc/) [Networking](/categories/networking/) [Azure
Data Explorer](/categories/azure-data-explorer/)]{.post-category}
:::
::: post-meta-line
 2023-11-06  1425 words   7 minutes 
:::
:::
::: {#content .content}
If you query data that contains IP addresses this blog is something for
you! It does not matter if you are a SOC Analyst, Detection Engineer,
Network Engineer or a Developer all the logs that you use on a daily
basis will contain IP addresses. This can be in Sentinel, Defender For
Endpoint, Application Insights, Azure Firewall and many other sources.
This blog will discuss some basic network related operations, before
diving into useful network related KQL functions. The blog is divided
into the following sections:
-   [Troubleshooting Network
    Data](#troubleshooting-network-data){rel=""}
    -   [Filter specific IP](#filter-specific-ip){rel=""}
    -   [List all unique IPs](#list-all-unique-ips){rel=""}
    -   [Count all IPs](#count-all-ips){rel=""}
-   [ipv4_is_private](#ipv4_is_private){rel=""}
-   [ipv4_range_to_cidr_list](#ipv4_range_to_cidr_list){rel=""}
-   [ipv4_is_in_range](#ipv4_is_in_range){rel=""}
-   [ipv4_is_in_any_range](#ipv4_is_in_any_range){rel=""}
-   [IP Regex](#ip-regex){rel=""}
![/images/KQL-For-Network-Operations/cat.jpeg](/svg/loading.min.svg "Alt text"){.lazyload
data-src="/images/KQL-For-Network-Operations/cat.jpeg"
data-srcset="/images/KQL-For-Network-Operations/cat.jpeg, /images/KQL-For-Network-Operations/cat.jpeg 1.5x, /images/KQL-For-Network-Operations/cat.jpeg 2x"
data-sizes="auto"}
# Troubleshooting Network Data
Before we dive into the specific network related functions, first some
general KQL queries that can help you gather the logs that you need.
Those are particularly useful when troubleshooting incidents. Based on
those basic queries you can filter the exact events that you need.
## Filter specific IP
If you want to filter on one specific IP address the *where equals*
clause can be used, as seen below. In the case of this datatable, one
row will be returned that matches ip_address equals 10.0.0.1.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
datatable(ip_address:string)
[
    "192.168.1.1",       // Private
    "10.0.0.1",          // Private
    "172.16.0.1",        // Private
]    
| where ip_address == "10.0.0.1"
```
:::
> **Executing Example Queries** You can execute the example queries in
> Azure Data Explorer, Sentinel, Log Analytics or Advanced Hunting.
## List all unique IPs
To list all unique values of a column, the distinct operator is used.
The input is 5 rows, and the
[distinct](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/distinctoperator){target="_blank"
rel="noopener noreffer"} operator returns 3 rows containing the unique
IPs that are found.
![Return unique IP addresses](/svg/loading.min.svg){.lazyload
data-src="/images/KQL-For-Network-Operations/distinct.png"
data-srcset="/images/KQL-For-Network-Operations/distinct.png, /images/KQL-For-Network-Operations/distinct.png 1.5x, /images/KQL-For-Network-Operations/distinct.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
datatable(ip_address:string)
[
    "192.168.1.1",       // Private
    "10.0.0.1",          // Private
    "172.16.0.1",        // Private
    "172.16.0.1",        // Private
    "172.16.0.1",        // Private
]    
| distinct ip_address
```
:::
## Count all IPs
If you want to get insight into how often certain IP addresses have been
used in your dataset the
[summarize](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/summarizeoperator){target="_blank"
rel="noopener noreffer"} operator can be leveraged.
![Return count IP addresses](/svg/loading.min.svg){.lazyload
data-src="/images/KQL-For-Network-Operations/count.png"
data-srcset="/images/KQL-For-Network-Operations/count.png, /images/KQL-For-Network-Operations/count.png 1.5x, /images/KQL-For-Network-Operations/count.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
datatable(ip_address:string)
[
    "192.168.1.1",       // Private
    "10.0.0.1",          // Private
    "10.0.0.1",          // Private
    "10.0.0.1",          // Private
    "10.0.0.1",          // Private
    "10.0.0.1",          // Private
    "10.0.5.1",          // Private                    
    "172.16.0.1",        // Private
    "172.16.0.1",        // Private
    "172.16.0.1",        // Private
]    
| summarize Total = count() by ip_address
| sort by Total
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
What about IPv6?
:::
::: details-content
::: admonition-content
The functions mentioned in this blog focus on IPv4 addresses, IPv6 has
at the moment not the same amount of supported functions. I have chosen
to use IPv4 in this blog because it is more familiar to everyone, there
are no differences between the IPv4 and IPv6 functions that are
supported for both versions.
-   [ipv6_is_in_range()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ipv6-is-in-range-function){target="_blank"
    rel="noopener noreffer"}
-   [ipv6_is_in_any_range()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ipv6-is-in-any-range-function){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
# ipv4_is_private()
Scoping KQL queries to only public or private addresses can be very
useful. The function
*[ipv4_is_private()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/ipv4-is-privatefunction){target="_blank"
rel="noopener noreffer"}* is specifically designed to take any IPv4
address as input and return whether the IP is private (return true) or
public (return false). The input can be a single IP string, but also a
column that contains IP addresses to directly return the results for
your whole dataset. This function can be leveraged by extending the
current KQL query to include a boolean field that contains the return
value of the function, or it can be used in a condition clause.
In the example below an additional column *isprivate* is created, which
is filled based on the *ipv4_is_private()* function. You can also
directly filter on only public or private IPs by using:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
// Return only public IPs
| where not(ipv4_is_private(ip_address))
// Return only private IPs
| where ipv4_is_private(ip_address)
```
:::
![ipv4_is_private example](/svg/loading.min.svg){.lazyload
data-src="/images/KQL-For-Network-Operations/ipv4_is_private.png"
data-srcset="/images/KQL-For-Network-Operations/ipv4_is_private.png, /images/KQL-For-Network-Operations/ipv4_is_private.png 1.5x, /images/KQL-For-Network-Operations/ipv4_is_private.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
datatable(ip_address:string)
[
    "192.168.1.1",       // Private
    "10.0.0.1",          // Private
    "172.16.0.1",        // Private
    "192.168.0.1",       // Private
    "203.0.113.1",       // Public
    "104.16.249.249",    // Public
    "8.8.8.8",           // Public
    "151.101.129.69",    // Public
    "216.58.194.142",     // Public
]    
| extend isprivate = ipv4_is_private(ip_address)
```
:::
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Uuhh datatable?
:::
::: details-content
::: admonition-content
For all of the examples queries a datatable is used, but how do I use
the network related functions om my data? An example below is shown
using the DeviceNetworkEvents tables. In essence, the datatable can be
replaced with the table name of your liking.
::: highlight