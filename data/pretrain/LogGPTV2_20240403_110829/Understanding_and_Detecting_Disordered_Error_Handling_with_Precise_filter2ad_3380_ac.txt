stacks. Edges are added to connect the EH stacks based on
the control-flow dependencies of the error checks associated
with the EH stacks.
Specifically, given a function, to build the EHG, HERO
first constructs the nodes by identifying all the basic blocks
that include an error check. Then from a selected basic block
and its error check, HERO collects all the EH stacks associ-
ated with this error, and further records these EH stacks into
the nodes of EHG. After that, HERO traverses the CFG and
connects these nodes in the EHG based on their control-flow
relationship. Figure 5 shows an example of creating the EHG
based on the control-flow graph (CFG) of the function in Fig-
ure 1. Four shadow nodes, which mark lines 4-5, 7-8, 13-14,
and 17-18 in the CFG, indicate the code blocks containing
error checks.
4.2 Delta-Based Pairing Analysis
In §4.1, we extract EH stacks and build the EHG. In this
section, we present how we perform the delta-based pair-
ing analysis, which computes EH deltas by comparing two
adjacent EH stacks to precisely identify function pairs.
Computing EH deltas. As already described in §3.2, we
leverage EH deltas to precisely identify function pairs because
EH deltas often precisely capture an extra leader function and
the extra follower function. To compute the EH deltas, we
pick each two adjacent EH stacks from the EHG and compare
them to generate the delta. In less than 5% of cases, an EH
delta contains more than one leader or follower functions; in
this case, we still try to pair them but in reverse order with the
help of data-dependency analysis. That is, for the last follower
function, it will be paired to the first leader function if they
have data dependencies; otherwise, we would try to pair it
with the second leader function. Following this order, and if
finally, this follower cannot be paired with any leader function,
we would further calibrate the EH stack (shown in the next
paragraph) and try to pair it with the error-generating function.
HERO would drop the leader or follower functions if they
eventually cannot be paired, which is uncommon. Note that
HERO may pair one leader to multiple follower functions,
and vice versa, which means that the pairing output is “many-
to-many” mapping between leader and follower functions.
Figure 6: Calibrating EH stack. EHS = EH stack.
Calibrating EH stacks. Before we present the pairing algo-
rithm, we first describe the challenge. We divide function
pairs into two categories – conditional pair and unconditional
pair. In most cases, function pairs are conditional. That is,
a follower function is necessary only when the leader func-
tion succeeds. For example, if kmalloc() fails, kfree() is
unnecessary. However, there are also some unconditional
pairs. That is, despite the failure of the leader function, the
corresponding follower function is still required. For example,
as mentioned in [6], when kobject_init_and_add() fails, its
follower function kobject_put() is still required to clean up
the related objects. To correctly construct EH stacks, we
must distinguish conditional and unconditional function pairs;
otherwise, the pairing results would be unreliable.
We propose to calibrate the EH stacks, which identifies
unconditional pairs and adjusts EH stacks. The idea is based
on an observation that an unconditional pair will result in an
extra follower function in the EH delta of two adjacent EH
stacks. Therefore, we detect unconditional pairs based on
such extra follower functions. Once unconditional pairs are
detected, we adjust EH stacks by extending their normal paths
to contain the error-generating functions. We use Figure 6 to
illustrate the calibration. EHS1 and EHS2 are adjacent in the
EHG. By comparing them, we find that the leader function
2 , and two follower functions 6 and 7 show up on the EH
delta, in which an extra follower exists. After checking the
data dependencies between 3 and 6 , we deem that 3 is
an unconditional leader function, and functions 3 and 6
constitute an unconditional pair. We thus calibrate EHS2 by
including 3 in its normal path. This way, HERO effectively
eliminates noises introduced by unconditional pairs.
The pairing algorithm. Putting the steps together, HERO
first traverses the EHG to get each EH stack and its successor
in the EHG; these are two adjacent EH stacks. Specifically,
HERO analyzes every path and differentiates error paths
from normal ones to collect adjacent EH stacks. As such,
HERO handles conditionals—if there is a conditional state-
ment, HERO will simply collect two paths. Then, HERO
calculates their EH delta. If the EH delta indicates an uncon-
ditional pair, HERO calibrates the EH stack and re-calculates
the EH delta. Using the EH deltas, HERO collects the func-
tion pairs. The output of this algorithm is a list of potential
function pairs. Note that this algorithm also includes a rank-
ing mechanism that will be presented in §6.
5 Detection of Disordered Error Handling
With the identified function pairs and constructed EHG,
HERO automatically detects DiEH bugs. The detection
works with two phases: detecting DiEH cases, and reporting
DiEH bugs by removing infeasible and harmless cases.
Detecting DiEH cases. HERO employs an intra-procedural,
flow-sensitive static analysis to check each path and its cor-
2048    30th USENIX Security Symposium
USENIX Association
123678218EHS#12EHS after calibrating123678C3responding EH stack in functions. At a high level, each EH
stack contains a list of leader functions [LD] as well as a list
of follower functions [FL]; after that, HERO computes the
expected list of follower functions [FL]′ and compares it with
[FL]. HERO reports cases in which [FL] ̸= [FL]′ as DiEH
cases. HERO also categorizes the DiEH into incorrect-order,
redundant, and inadequate cases based on the classification
rules presented in §2.2.3.
5.1 From DiEH Cases to DiEH Bugs
A DiEH case can be infeasible or harmless. In this section,
we present our techniques for eliminating such cases to con-
firm DiEH bugs. We also provide a ranking mechanism to
prioritize DiEH cases.
Eliminating infeasible paths by detecting conflicts.
HERO statically finds normal and error paths to detect DiEH.
If a path is infeasible (i.e., containing conflicting path con-
straints), the detected DiEH would be a false positive. To
remove such false positives, we aim to eliminate infeasible
paths. An intuitive strategy is to employ traditional symbolic
execution, which is not scalable and can easily lead to path
explosion, not to mention that our target programs are com-
plex. To address this problem, we propose a scalable symbolic
summary for each function, which intra-procedurally captures
conflicting constraints among the variables such as, condi-
tional variables and return values. When a path contains such
conflicting constraints, we deem it infeasible.
Specifically, the symbolic summary consists of two steps:
(1) collecting constraints from the path under analysis,
(2) checking the existence of conflicting constraints.
In
the first step, HERO analyzes the current path and col-
lects constraints from every conditional statement, such
as if (flag == True). Further, HERO extracts changes
against the variables of collected constraints that we are cer-
tain about, such as constant assignment like flag = false. If
a change is uncertain, e.g., assigned with an unknown variable,
we regard the case as an uncertain constraint. In the second
step, HERO checks collected constraints, and treats the path
as infeasible if it has conflicting constraints. (e.g., the first
constraint is flag == false and then the second constraint
is flag == True.) The symbolic summary conservatively re-
gards all the uncertain constraints as solvable, ensuring the
precision of the removal of infeasible paths. This simple
approach can quickly and reliably (i.e., the infeasibility is
determined) remove infeasible paths without handling com-
plicated uncertain constraints, which is a lightweight version
of under-constrained symbolic execution.
Figure 7 shows an example of conflicting constraints
causing a false positive in detecting DiEH.
For this
case, without the symbolic summary, HERO would de-
tect a missing-follower DiEH case—the release function,
kfree(max3421_hcd->rx), is missing in path 3 – 4 – 7 –
11 – 12 – 13 – 15 – 16 – 19 . This is however a false positive
because constraints if(!hcd) (line 4) and if(hcd) (line 16)
are conflicting in the path. With the symbolic summary, when
analyzing this path, HERO will first collect the constraint
hcd != NULL from line 4 and the constraint hcd == NULL
from line 16. Then, HERO determines that the constraints
are conflicting, and thus the path is infeasible. In addition
to checking conflicting constraints from a called function,
our technique will check the ones from the current function
and use them to eliminate infeasible paths. To collect more
conflicting constraints, we also employ alias analysis, which
is based on the LLVM alias analysis infrastructure [43] to
map the variables involved in the constraints.
goto error;
goto error;
hcd = usb_create_hcd( ... );
if (!hcd)
...
max3421_hcd->rx = kmalloc( ... );
if (!max3421_hcd->rx)
1 /* drivers/usb/host/max3421-hcd.c */
2 static int max3421_probe(struct spi_device *spi) {
3
4
5
6
7
8
9
10
11
12
13
14
15 error:
16
17
18
19
20 }
max3421_hcd->spi_thread = kthread_run(...);
if (max3421_hcd->spi_thread == ERR_PTR(-ENOMEM))
kfree(max3421_hcd->rx);
goto error;
...
if (hcd)
...
return retval;
Figure 7: Example of the conflicting constraints.
Our evaluation shows that our solution is effective, and it
reduces about half of the false positives cases without intro-
ducing additional false negatives, which makes the results
manageable for manual analysis. Nevertheless, our symbolic
summary is based on intraprocedural analysis and only con-
sidering the most intuitive conflict constraints, and thus it
still cannot handle the false positives caused by complicated
conditions. The evaluation results in §7.3.1 show that, finally,
for bug detection, 23% of false positives are caused by com-
plex conditions, which cannot be handled by the symbolic
summary. However, our intra-procedural symbolic summary
and feasibility testing are highly scalable, with no noticeable
slowdown in the analysis.
In general, we can compare the symbolic summary with
the symbolic execution from the following aspects: (1) both
do not have false-positive in theory, (2) the symbolic sum-
mary has false-negatives due to the intraprocedural analysis
and also missing handling complex constraints, and (3) the
symbolic summary performance is much better than symbolic
execution because the front one would not suffer from com-
plex constraint solving or copying state for the forked process,
which only simply compares the must conflict constraints in
a given path.
Eliminating harmless cases via dependency reasoning.
HERO reports any incorrect-order follower functions as po-
USENIX Association
30th USENIX Security Symposium    2049
tential DiEH. However, we observe that if two follower func-
tions are independent, it is typically harmless to call them in
staggered order. Therefore, we eliminate such independent
cases. Specifically, we employ dependency reasoning to find
independent follower functions. To be precise, we employ
MustAlias analysis [43] and field-sensitive analysis. We ap-
ply the data-dependency analysis to the parameters and return
values of the follower functions. If data dependency is found,
we keep the DiEH cases. This technique can effectively re-
move the harmless incorrect-order DiEH cases.
Ranking reported bugs through cross-validation. To alle-
viate the manual effort in confirming DiEH bugs, HERO fur-
ther ranks reported cases by employing cross-validation [14]
across the cases. HERO calculates the percentage of error
paths that encounter this problem. A lower percentage indi-
cates that the DiEH case is an outlier and is more likely a
bug. HERO then ranks the bugs based on the percentage in
ascending order, for each category.
6 Implementation of HERO
We implement HERO based on LLVM-10 as multiple passes
that identify error-handling structures, construct the EHG,
perform delta-based pairing analysis, and detect DiEH bugs.
We also implement multiple Python scripts for pairing and
bug ranking. HERO is implemented with 5.5K lines of code
in C++ and 800 lines of code in Python. In this section, we
present some interesting implementation details.
Removing irrelevant functions in error paths. Compared
to normal paths, error paths are often simple. Typically, ir-
relevant functions can be either (1) error-logging functions
(e.g., dev_err), which log error messages, or (2) exit func-
tions (panic), which terminate the execution. We employ two
methods to eliminate such functions. First, we find that error-
logging functions have clear patterns, e.g., having variadic
and format parameters. We identify such functions by using
pattern-matching. Second, to collect terminating functions,
we identify wrapper functions that internally call primitive
ones like panic(), abort(), and exit(). In total, we collect
537 irrelevant functions that are excluded from the pairing.
Ranking function pairs. The pairing analysis is precise for
most cases but still has some false positives (see Figure 8)
due to limitations with static analysis. We thus also provide a
ranking mechanism against the pairs. The key insight is that
for a true function pair, the occurrences of the leader func-
tion should close to the occurrences of the follower function.
Given a function pair, we count the total occurrences of a
leader function as LT and the total occurrences of its follower
function as FT. Then, we count the frequency of function pair
occurrence in the program as PT. Finally, we define the paired
rate (PR) as PR = PT 2
FT∗LT and use it to rank the pairs in de-
scending order. If PR approaches one the leader function and
follower function are always used together; on the other hand,
if PR approaches zero, the leader and the follower are rarely
paired. Our evaluation (see §7.2) shows that such ranking can
effectively squeeze most of the false positives into the bottom
of the list, which can be eliminated easily.
7 Evaluation
We conduct our experiments on an Intel Xeon CPU server
that has 48-cores and 256GB RAM, and runs Ubuntu-18.04
OS. All experiments use -O2 optimization to generate bit-
code (LLVM IR) files. We evaluate HERO on both sys-
tem and application software, including Linux (commit #:
4d856f72c10) and FreeBSD (commit #: c54c07625bd) ker-
nels, and OpenSSL library (commit #: 7821585206).
Analysis time and program complexity. Table 1 shows the
analysis time for each component across different systems.
Even for the Linux kernel, which has 17.7 million lines of
code, the pairing finishes within one hour, and the detection
finishes in about 10 hours. The results confirm that HERO is
efficient and can scale to large programs. Note that HERO is
currently single-threaded; multithreading can further improve
its efficiency.
Target program
Linux kernel v5.3
FreeBSD v12.1
OpenSSL
Lines of
Code
17.7M
4.8M
450K
IR
files
18,071
1,483
1,902
Time for
pairing
48 min
10 min
53 sec
Detection
time
10 h 16 min
2 h 28 min
11min
Table 1: Analysis time of HERO and the complexity of programs.
Preparing pair sets. To evaluate our delta-based pairing, we
prepare two sets of function pairs. The first set is the reported
pair set, which includes 150 randomly selected unranked
functions pairs identified by HERO. As will be detailed in
§7.2, 89 of them are true pairs, while 61 are false pairs. The
second set is the ground-truth pair set, which includes 86
function pairs of various types. We collected this set from 15
random source files across different subsystems of the Linux
kernel; these files contain 26K lines of source code.
7.1 Characteristics of Identified Pairs
HERO detects more than 7.5K, 416, and 323 potential func-
tion pairs in the Linux kernel, OpenSSL, and FreeBSD, re-
spectively. To further characterize these pairs, we pick the
Linux kernel because it is the most complex. We first use
script code to statistically select common keywords in the
names of paired functions, and use the keywords to empiri-
cally classify pairs. The common keywords and the classifica-
tion are summarized in Table 2. Interestingly, the keywords
of a pair usually have the opposite meaning, indicating the
paired operations, e.g., alloc/dealloc and increase/decrease.
2050    30th USENIX Security Symposium
USENIX Association
Classes (Proportion) LF Operations
FF Operations
alloc, new, request, free, release, erase,
Resource
acquisition (50.2%)
create
init
Lock (4.4%)
lock, down
Refcount (12.5%)
get, inc
Device related (18.2%) register
Bit operation (0.7%)
destroy, remove
fini, finish, deinit, uninit
unlock, up
put, dec
unregister, deregister
charge, on, enable uncharge, off, disable
set
apply, pin, assert
join, add, map
reserve
begin, start, open
setup
clear
revert, unpin, deassert
leave, remove, unmap
delete, del
end, finish, stop, exit, close
clean, cleanup
Others (33%)
Table 2: Common classes of function pairs in the Linux kernel. LF
and FF are leader and follower functions, respectively.
Custom function pairs. A strength of our delta-based pair-
ing analysis is that it does not require a large number of occur-