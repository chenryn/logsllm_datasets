The following code:

```javascript
import {Dispatcher as BaseDispatcher} from 'flux';
class Dispatcher extends BaseDispatcher {
}
```

Results in the following error:

```
/Users/andreypopp/Workspace/gang/node_modules/6to5/bin/6to5/util.js:35
          throw e;
                ^
TypeError: ./test.js: Line 1: Duplicate declaration "Dispatcher"
> 1  | import {Dispatcher as BaseDispatcher} from 'flux';
     |         ^
  2  | 
  3  | class Dispatcher extends BaseDispatcher {
  4  | 
    at File.errorWithNode (~/6to5/lib/6to5/transformation/file.js:333:13)
    at Scope.checkBlockScopedCollisions (~/6to5/lib/6to5/traversal/scope.js:145:21)
    at Scope.registerBinding (~/6to5/lib/6to5/traversal/scope.js:299:10)
    at Scope.registerDeclaration (~/6to5/lib/6to5/traversal/scope.js:277:10)
    at TraversalPath.functionVariableVisitor.enter (~/6to5/lib/6to5/traversal/scope.js:341:44)
    at TraversalPath.call (~/6to5/lib/6to5/traversal/path.js:115:24)
    at TraversalPath.visit (~/6to5/lib/6to5/traversal/path.js:136:8)
    at TraversalContext.visitNode (~/6to5/lib/6to5/traversal/context.js:24:20)
    at TraversalContext.visit (~/6to5/lib/6to5/traversal/context.js:41:26)
    at Function.traverse.node (~/6to5/lib/6to5/traversal/index.js:38:17)
```

### Explanation

The error occurs because the `Dispatcher` class is being declared with the same name as the imported `BaseDispatcher` (renamed from `Dispatcher`). This results in a duplicate declaration, which is not allowed.

### Solution

To resolve this issue, you should rename either the imported `Dispatcher` or the custom `Dispatcher` class to avoid the naming conflict. Here is an example of how to do it:

```javascript
import {Dispatcher as FluxDispatcher} from 'flux';

class CustomDispatcher extends FluxDispatcher {
  // Your custom implementation here
}
```

In this updated code, the imported `Dispatcher` is renamed to `FluxDispatcher`, and the custom class is named `CustomDispatcher`. This avoids the duplicate declaration and resolves the error.