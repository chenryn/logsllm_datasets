以下是经过优化后的文本，使其更加清晰、连贯和专业：

---

### 0x02 WMI 如何调用 AMSI

在讨论 WMI 调用 AMSI 时，我们了解到 C:\Windows\System32\wbem\fastprox.dll 在其中起到关键作用。通过逆向分析 fastprox.dll，我们可以理解 WMI 对 AMSI 的调用机制。

WMI 对 AMSI 的调用与 PowerShell 和 .NET 稍有不同，但与 JScript 和 VBScript 相同。因此，了解 WMI 的调用方式也就意味着掌握了 JScript 和 VBScript 的调用方式。

#### 初始化过程

程序启动时，会调用 `JAmsi::JAmsi(void)` 进行对象初始化。这个过程中主要包含一个注册表判断：

```cpp
JAmsi *__fastcall JAmsi::JAmsi(JAmsi *this)
{
    g_Amsi = JAmsi::JAmsiIsEnabledByRegistry(this); // 注册表判断
    qword_1800FDEB8 = 0i64;
    word_1800FDEB1 = 0;
    dword_1800FDF10 = 0;
    xmmword_1800FDEC0 = 0i64;
    InitializeCriticalSection(&CriticalSection);
    return (JAmsi *)&g_Amsi;
}
```

接着是 `JAmsi::JAmsiInitialize` 的初始化，这里会进一步判断当前进程是否为 \wbem\wmiprvse.exe。

#### 扫描过程

如果上述条件都满足，接下来会调用 `JAmsi::JAmsiProcessor` 函数，该函数会调用 `JAmsi::JAmsiRunScanner` 进行实际的扫描检测。但在调用之前，还会进行一次 `JAmsi::JAmsiIsScannerNeeded` 判断，以确定是否需要进行扫描。

`JAmsi::JAmsiIsScannerNeeded` 函数中会对一些关键词进行 CRC32 校验。如果命中了这些关键词，就会返回 `true` 并触发扫描；否则不会进行扫描。具体的关键词可以通过以下链接获取：

- [VBA 关键词](https://github.com/synacktiv/AMSI-Bypass/blob/master/vba_com.csv)
- [VBA Win32 关键词](https://github.com/synacktiv/AMSI-Bypass/blob/master/vba_win32.csv)

其他相关资料包括：

- [Twitter 链接](https://twitter.com/mattifestation/status/1083190652169408512)
- [GitHub 项目](https://github.com/tyranid/oleviewdotnet)
- [YouTube 视频](https://www.youtube.com/watch?v=wvOlHbTU0Ew&t=971s)
- [SlideShare 演讲](https://www.slideshare.net/MSbluehat/bhv18-badly-behaving-scripts-meet-amsi-script-beha)
- [SpecterOps 博客文章](https://posts.specterops.io/antimalware-scan-interface-detection-optics-analysis-methodolo)

### 0x03 总结

杀软对恶意脚本的检测不仅依赖于 AMSI，还有其他自身的检测方式。AMSI 只是一种补充手段。通过本文的介绍，基本涵盖了绕过 AMSI 的原理，后续可以在实战中根据具体问题进行针对性解决。

---

希望这些改进能使文本更加清晰和专业。如果有任何进一步的修改需求，请告诉我。