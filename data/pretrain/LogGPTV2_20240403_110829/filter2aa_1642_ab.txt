        hr = _AmsiInitialize(L"DotNet", &ctx);
        if(hr == S_OK) {
          // update global variable
          g_amsiContext = ctx;
        }
      }
    }
    if(g_amsiContext != NULL) {
      // scan buffer
      hr = _AmsiScanBuffer(
        g_amsiContext,
        buffer,
        length,
        0,
        0,        
        &amsiResult);
      if(hr == S_OK) {
        // if malware was detected or it's blocked by admin
        if(AmsiResultIsMalware(amsiResult) ||
           AmsiResultIsBlockedByAdmin(amsiResult))
        {
          // "Operation did not complete successfully because "
          // "the file contains a virus or potentially unwanted" 
          // software.
          GetHRMsg(ERROR_VIRUS_INFECTED, &error_string, 0);
          ThrowHR(COR_E_BADIMAGEFORMAT, &error_string);          
        }           
      }
    }
}
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 3 / 9 - Welcome to www.red-team.cn
0x02 WMI如何调用AMSI
说到WMI调用amsi，在第一篇中我们知道是 C:\Windows\System32\wbem\fastprox.dll 在起作用，
我们逆向fastprox.dll。
wmi对amsi的调用和powershll域.net有些区别。但是和jscript、vbscript是一样的。因此这儿你明白了
WMI的调用方式，也就知道了js、vb的调用方式。整体的逻辑是，程序启动的时候调用
JAmsi::JAmsi(void)进行对象初始化，这里面主要是有一个注册表判断：
然后就到了JAmsi::JAmsiInitialize初始化，这又有一个判断，判断当前进程是不是\wbem\wmiprvse.exe
JAmsi *__fastcall JAmsi::JAmsi(JAmsi *this)
{
  g_Amsi = JAmsi::JAmsiIsEnabledByRegistry(this); //注册表判断
  qword_1800FDEB8 = 0i64;
  word_1800FDEB1 = 0;
  dword_1800FDF10 = 0;
  xmmword_1800FDEC0 = 0i64;
  InitializeCriticalSection(&CriticalSection);
  return (JAmsi *)&g_Amsi;
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 4 / 9 - Welcome to www.red-team.cn
以上的注册表判断和进程判断都可以阻止amsi.dll后续的调用，其中判断进程是不是wmiprvse.exe比较
有意思，在使用wmi进行横向移动的时候，远程主机上启动的经常就是wmiprvse.exe，非常有针对性
啊。再然后就是JAmsi::JAmsiProcessor函数的调用了，这个函数会调用JAmsi::JAmsiRunScanner，进行
真正的扫描侦测，但是在调用之前还有一次判断JAmsi::JAmsiIsScannerNeeded，是否需要被扫描
也就是我们让JAmsi::JAmsiIsScannerNeeded返回值为false就行了。这个函数里面是一些关键词的crc32
校验：
假如命中了，就直接返回true了，我们的攻击代码就会被扫描，如果没有命中则不会被扫描。具体有哪
些关键词呢？在我想用程序跑的时候，google了一波，只能说"fuck"，洋大人都搞完了。但是我没有找
到wmi的相关对应原始字符，后来一想跑不跑意义不大，我们搞定amsi.dll里面的侦测就行了，这儿我也
列以下：
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 5 / 9 - Welcome to www.red-team.cn
有兴趣的小伙伴可以用powershell爆破以下：
如下是Jacript/vbscript的：
只有一个没有被搞出来，0990B883这个的原始字符串是_01000001，这么一搜，翻出好过相关文章和
代码。
VBA的如下：
https://github.com/synacktiv/AMSI-Bypass/blob/master/vba_com.csv
https://github.com/synacktiv/AMSI-Bypass/blob/master/vba_win32.csv
一起其他资料中的一些关键字：
  if ( v16 == 0x788C9917
    || v16 == 0x96B23E8A
    || v16 == 0xB8DA804E
    || v16 == 0xC0B29B3D
    || v16 == 0xD16F4088
    || v16 == 0xD61D2EA7
    || (v17 = 0, v16 == 0xEF726924) )
   if ( v26 == 0x46B9D093 || v26 == 0xF837EFC3 )
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 6 / 9 - Welcome to www.red-team.cn
这儿啊，我忽然想到一个问题，就是你在研究一个项目之前，搜到不到的资料，在你研究过程中，会蹦
出来很多，这是为什么呢？因为，在你研究前，你使用的关键字很有限，比如bypass amsi、amsi等
等，但是其实很多细节研究并没有在关键位置出现这些关键字，当你研究过程中，对这个方向有了一定
认知过后，你能用一些比较精确的关键字搜索了，例如我就用了这个CRC32的校验码，一搜就很精确找
到了一些别人的研究。
下面我列关于这个crc32校验的资料，有兴趣小伙伴自查：
https://twitter.com/mattifestation/status/1083190652169408512
https://github.com/tyranid/oleviewdotnet
https://www.youtube.com/watch?v=wvOlHbTU0Ew&t=971s
https://www.slideshare.net/MSbluehat/bhv18-badly-behaving-scripts-meet-amsi-script-beha
vior-instrumentation-and-machine-learning
https://posts.specterops.io/antimalware-scan-interface-detection-optics-analysis-methodolo
gy-858c37c38383
回归正题，我们知道了，WMI的流程中的各种判断。因此除了我们上一篇文章中的对抗方式，以上点都
是可以对抗的。接下来就是amsi.dll当中的调用了，这里和上一篇中.net有一点不同的是，扫描结果判断
的逻辑和上文中的有所不同：
我们看其中对一处的调用判断，如果返回结果小于0就中断了执行，我们再看JAmsiProcessor中的代
码：
v4默认是0，如果JAmsiRunScanner返回结果大于或等于0x4000，v4就成了
0x80004005(-2147467259)，因此JAmsiRunScanner的返回值必须小于0x4000(16384)，来看下
JAmsiRunScanner的代码：
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 7 / 9 - Welcome to www.red-team.cn
图中我鼠标所在的那个函数调用其实就是AmsiScanBuffer调用。
所以我们只要让v2大于0就行了，v5就为1了。原理大概如此。最后我还是尝试调试了以下wmic，执行
了一个常用的wmic命令都没有触发crc32的关键字，导致没有JAmsiRunScanner函数，也就没有被amsi
扫描。最后只能断在JAmsiIsScannerNeeded，观察了下。
0x03 总结
当然杀软对恶意脚本的侦测，不只是有amsi的通道，还有它自己的侦测方式，amsi只是一种补足而已。
bypass amsi系列到此结束了，基本的原理应该都覆盖到了，后面只需要在实战中遇到了相关问题再针
对性解决。对抗永不结束。
typedef HRESULT (WINAPI *AmsiScanBuffer_t)(
  HAMSICONTEXT amsiContext,
  PVOID        buffer,
  ULONG        length,
  LPCWSTR      contentName,
  HAMSISESSION amsiSession,
  AMSI_RESULT  *result);
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 8 / 9 - Welcome to www.red-team.cn
Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-20
No. 9 / 9 - Welcome to www.red-team.cn