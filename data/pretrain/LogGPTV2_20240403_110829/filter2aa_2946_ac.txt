### 线程上下文

线程上下文是指某一时间点CPU寄存器和程序计数器的内容。若要设置或获取线程上下文，需要先将线程挂起。

#### 10.3.1 GetThreadContext函数

`GetThreadContext` 函数用于获取线程上下文。其语法格式如下：

```c
BOOL GetThreadContext(
  HANDLE hThread,       // 线程句柄
  LPCONTEXT lpContext   // 上下文结构体
);
```

- `hThread`：线程句柄。
- `lpContext`：指向 `CONTEXT` 结构体的指针，该结构体包含指定线程的上下文信息。

`CONTEXT` 结构体中的 `ContextFlags` 成员指定了要获取的线程上下文的部分。例如，如果将 `ContextFlags` 设置为 `CONTEXT_INTEGER`，则可以获取 `edi`、`esi`、`ebx`、`edx`、`ecx` 和 `eax` 这些寄存器的值。

示例代码：
```c
HANDLE hThread;
hThread = CreateThread(NULL, NULL, ThreadProc, NULL, 0, NULL);

SuspendThread(hThread);

CONTEXT c;
c.ContextFlags = CONTEXT_INTEGER;
GetThreadContext(hThread, &c);

printf("%x %x \n", c.Eax, c.Ecx);
```

#### 10.3.2 SetThreadContext函数

`SetThreadContext` 函数用于设置线程上下文。其语法格式如下：

```c
BOOL SetThreadContext(
  HANDLE hThread,            // 线程句柄
  CONST CONTEXT *lpContext   // 上下文结构体
);
```

- `hThread`：线程句柄。
- `lpContext`：指向 `CONTEXT` 结构体的指针，该结构体包含要设置的线程上下文信息。

示例代码：
```c
HANDLE hThread;
hThread = CreateThread(NULL, NULL, ThreadProc, NULL, 0, NULL);

SuspendThread(hThread);

CONTEXT c;
c.ContextFlags = CONTEXT_INTEGER;
c.Eax = 0x123;
SetThreadContext(hThread, &c);

CONTEXT c1;
c1.ContextFlags = CONTEXT_INTEGER;
GetThreadContext(hThread, &c1);

printf("%x \n", c1.Eax);
```

### 临界区

#### 11.1 线程安全问题

每个线程都有自己的栈，局部变量存储在栈中。如果线程仅使用自己的局部变量，则不存在线程安全问题。然而，当多个线程共用一个全局变量并对其进行修改时，就会出现线程安全问题。

示例代码：
```c
#include <windows.h>
#include <stdio.h>

int countNumber = 10;

DWORD WINAPI ThreadProc(LPVOID lpParameter) {
    while (countNumber > 0) {
        printf("Sell num: %d\n", countNumber);
        countNumber--;
        printf("Count: %d\n", countNumber);
    }
    return 0;
}

int main(int argc, char* argv[]) {
    HANDLE hThread = CreateThread(NULL, NULL, ThreadProc, NULL, 0, NULL);
    HANDLE hThread1 = CreateThread(NULL, NULL, ThreadProc, NULL, 0, NULL);

    CloseHandle(hThread);
    getchar();
    return 0;
}
```

运行上述代码可能会导致重复售卖，并且总数可能变为负数。这是因为多线程在执行时是并发进行的，而不是按顺序执行。

#### 11.1.1 解决问题

解决线程安全问题需要引入“临界资源”的概念。临界资源表示在同一时间内只能被一个线程访问。访问临界资源的那一段程序称为临界区。

实现临界区的方法有两种：
1. 自己编写代码实现（有一定门槛）。
2. 使用Windows提供的API实现。

#### 11.2 实现临界区

使用Windows API实现临界区的步骤如下：
1. 创建全局变量：`CRITICAL_SECTION cs;`
2. 初始化全局变量：`InitializeCriticalSection(&cs);`
3. 实现临界区：进入 → `EnterCriticalSection(&cs);` 离开 → `LeaveCriticalSection(&cs);`

改写后的示例代码：
```c
#include <windows.h>
#include <stdio.h>

CRITICAL_SECTION cs; // 创建全局变量
int countNumber = 10;

DWORD WINAPI ThreadProc(LPVOID lpParameter) {
    while (1) {
        EnterCriticalSection(&cs); // 构建临界区，获取令牌
        if (countNumber > 0) {
            printf("Thread: %d\n", *((int*)lpParameter));
            printf("Sell num: %d\n", countNumber);
            countNumber--;
            printf("Count: %d\n", countNumber);
        } else {
            LeaveCriticalSection(&cs); // 离开临界区，归还令牌
            break;  
        }
        LeaveCriticalSection(&cs); // 离开临界区，归还令牌
    }
    return 0;
}

int main(int argc, char* argv[]) {
    InitializeCriticalSection(&cs); // 使用之前进行初始化

    int a = 1;
    HANDLE hThread = CreateThread(NULL, NULL, ThreadProc, (LPVOID)&a, 0, NULL);

    int b = 2;
    HANDLE hThread1 = CreateThread(NULL, NULL, ThreadProc, (LPVOID)&b, 0, NULL);

    CloseHandle(hThread);
    getchar();
    return 0;
}
```

### 互斥体

#### 12.1 内核级临界资源

使用线程锁可以解决同进程内多个线程共用全局变量的线程安全问题。但对于不同进程之间的线程共享内核级资源（如文件、进程等），需要使用互斥体来控制访问。

#### 12.1.1 互斥体的使用

创建互斥体的函数为 `CreateMutex`，其语法格式如下：

```c
HANDLE CreateMutex(
  LPSECURITY_ATTRIBUTES lpMutexAttributes,  // 安全属性
  BOOL bInitialOwner,                       // 是否希望互斥体创建出来就有信号
  LPCTSTR lpName                            // 互斥体的名字
);
```

示例代码：
```c
#include <windows.h>
#include <stdio.h>

int main(int argc, char* argv[]) {
    HANDLE cm = CreateMutex(NULL, FALSE, "XYZ");

    WaitForSingleObject(cm, INFINITE);

    for (int i = 0; i < 5; i++) {
        printf("Process: A Thread: B -- %d \n", i);
        Sleep(1000);
    }

    ReleaseMutex(cm);
    return 0;
}
```

### 事件

#### 13.1 通知类型

事件是一种内核对象，用于控制线程。创建事件使用 `CreateEvent` 函数，其语法格式如下：

```c
HANDLE CreateEvent(
  LPSECURITY_ATTRIBUTES lpEventAttributes, // 安全属性
  BOOL bManualReset,                       // 是否手动重置
  BOOL bInitialState,                      // 初始状态
  LPCTSTR lpName                           // 事件名字
);
```

示例代码：
```c
#include <windows.h>
#include <stdio.h>

int main(int argc, char* argv[]) {
    HANDLE event = CreateEvent(NULL, TRUE, FALSE, "MyEvent");

    if (event != NULL) {
        WaitForSingleObject(event, INFINITE);

        for (int i = 0; i < 5; i++) {
            printf("Process: A Thread: B -- %d \n", i);
            Sleep(1000);
        }

        SetEvent(event);
        CloseHandle(event);
    } else {
        printf("CreateEvent 创建失败! 错误代码: %d\n", GetLastError());
    }

    return 0;
}
```

通过这些优化，文本变得更加清晰、连贯和专业。