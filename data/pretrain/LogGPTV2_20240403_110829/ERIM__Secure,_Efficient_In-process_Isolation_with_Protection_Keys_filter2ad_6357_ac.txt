sive, note that it is required only when a program maps pages
as executable, which is normally an infrequent operation.
If programs map executable pages frequently, a more ef-
ﬁcient interception can be implemented with a simple Linux
Security Module (LSM) [50], which allows mmap, mpro-
tect and pkey_mprotect system calls only from T. (Whether
such a call is made by U or T is easily determined by ex-
amining the PKRU register value at the time of the syscall.)
Our prototype uses this implementation of interception. An-
other approach is to implement a small (8 LoC) change to
seccomp-bpf in the Linux kernel, which allows a bpf ﬁlter to
inspect the value of the PKRU register. With this change in
place, we can install a bpf ﬁlter that allows certain syscalls
only from T, similar to the LSM module.
With either interception approach in place, U must go
through T to map executable pages. T maps the pages only
after they have passed the inspection function. Regardless
of the interception method, pages can be inspected upfront
when T attempts to map them as executable, or on demand
when they are executed for the ﬁrst time.
On-demand inspection is preferable when a program maps
a large executable segment but eventually executes only a
small number of pages. With on-demand inspection, when
the process maps a region as executable, T instead maps the
region read-only but records that the pages are pending in-
spection. When control transfers to such a page, a fault oc-
curs. The fault traps to a dedicated signal handler, which
1226    28th USENIX Security Symposium
USENIX Association
ERIM installs when it initializes (the LSM or the tracer pre-
vents U from overriding this signal handler). This signal
handler calls a T function that checks whether the faulting
page is pending inspection and, if so, inspects the page. If
the inspection passes, then the handler remaps the page with
the execute permission and resumes execution of the faulting
instruction, which will now succeed. If not, the program is
terminated.
The interception and binary inspection has very low over-
head in practice because it scans an executable page at most
once. It is also fully transparent to U’s code if all WRPKRUs
and XRSTORs in the binary are already safe.
Security We brieﬂy summarize how ERIM attains secu-
rity. The binary inspection mechanism prevents U from
mapping any executable page with an unsafe WRPKRU or
XRSTOR. T does not contain any executable unsafe WRP-
KRU or XRSTOR by assumption. Consequently, only safe
WRPKRUs and XRSTORs are executable in the entire ad-
dress space at any point. Safe WRPKRUs and XRSTORs
preserve ERIM’s two security invariants (1) and (2) by de-
sign. Thus MT is accessible only while T executes starting
from legitimate T entry points.
3.5 Lifecycle of an ERIM process
As part of a process’s initialization, before control is trans-
ferred to main(), ERIM creates a second MPK memory do-
main for MT in addition to the process’s default MPK do-
main, which is used for MU. ERIM maps a memory pool
for a dynamic memory allocator to be used in MT and hooks
dynamic memory allocation functions so that invocations are
transparently redirected to the appropriate pool based on the
value of the PKRU register. This redirection provides pro-
grammer convenience but is not required for security.
If
U were to call T’s allocator, it would be unable to access
MT’s memory pool and generate a page fault. Next, ERIM
scans MU’s executable memory for unsafe WRPKRUs and
XRSTORs, and installs one of the interception mechanisms
described in Section 3.4. Finally, depending on whether
main() is in U or T, ERIM initializes the PKRU register ap-
propriately and transfers control to main(). After main() has
control, the program executes as usual. It can map, unmap
and access data memory in MU freely. However, to access
MT, it must invoke a call gate.
3.6 Developing ERIM applications
We describe here three methods of developing applications
or modifying existing applications to use ERIM.
The binary-only approach requires that either U or T con-
sist of a set of functions in a dynamic link library. In this
case, the library and the remaining program can be used
in unmodiﬁed binary form. An additional ERIM dynamic
wrapper library is added using LD_PRELOAD, which wraps
the entry points with stub functions that implement the call
gates and have names that indicate to the ERIM runtime the
typedef struct secret {
int number; } secret;
secret* initSecret() {
ERIM_SWITCH_T;
secret * s = malloc(sizeof(secret));
s->number = random();
ERIM_SWITCH_U;
return s;
}
int compute(secret* s, int m) {
int ret = 0;
ERIM_SWITCH_T;
ret = f(s->number, m);
ERIM_SWITCH_U;
return ret;
}
Listing 2: C component isolated with ERIM
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
valid entry points. We have used this approach to isolate
SQLite within the Node.js runtime (Section 5).
The source approach requires that either U or T consist of
a set of functions that are not necessarily in a separate compi-
lation unit or library. In this case, the source code is modiﬁed
to wrap these functions with stubs that implement the call
gates, and choose names that indicate valid entry points. We
used this approach to isolate the crypto functions and session
keys in OpenSSL (Section 5).
The compiler approach requires modiﬁcations to the com-
piler to insert call gates at appropriate points in the exe-
cutable and generate appropriate symbols that indicate valid
entry points. This approach is the most ﬂexible because it
allows arbitrary inlining of U and T code. We used this ap-
proach to isolate the metadata in CPI (Section 5).
Next, we give a simple example describing the process
of developing a new C application using the source ap-
proach. ERIM provides a C library and header ﬁles to in-
sert call gates, initialize ERIM, and support dynamic mem-
ory allocation. Listing 2 demonstrates an example C pro-
gram that isolates a data structure called secret (lines
1–2). The structure contains an integer value. Two func-
tions, initSecret and compute, access secrets and
bracket their respective accesses with call gates using the
macros ERIM_SWITCH_T and ERIM_SWITCH_U. ERIM
isolates secret such that only code that appears between
ERIM_SWITCH_T and ERIM_SWITCH_U, i.e., code in T,
may access secret. initSecret allocates an instance
of secret while executing inside T by ﬁrst allocating mem-
ory in MT and then initializing the secret value. compute
computes a function f of the secret inside T.
3.7 Extensions
Next, we discuss extensions to ERIM’s basic design.
USENIX Association
28th USENIX Security Symposium    1227
Multi-threaded processes ERIM’s basic design works as-
is with multi-threaded applications. Threads are created as
usual, e.g. using libpthread. The PKRU register is saved and
restored by the kernel during context switches. However,
multi-threading imposes an additional requirement on T (not
on ERIM): In a multi-threaded application, it is essential that
T allocate a private stack in MT (not MU) for each thread
and execute its code on these stacks. This is easy to imple-
ment by switching stacks at T’s entry points. Not doing so
and executing T on standard stacks in MU runs the risk that,
while a thread is executing in T, another thread executing in
U may corrupt or read the ﬁrst thread’s stack frames. This
can potentially destroy T’s integrity, leak its secrets and hi-
jack control while access to MT is enabled. By executing T’s
code on stacks in MT, such attacks are prevented.
More than two components per process Our description
of ERIM so far has been limited to two components (T and
U) per process. However, ERIM generalizes easily to sup-
port as many components as the number of domains Linux’s
MPK support can provide (this could be less than 16 because
the kernel may reserve a few domains for speciﬁc purposes).
Components can have arbitrary pairwise trust relations with
each other, as long as the trust relations are transitive. A sim-
ple setting could have a default domain that trusts all other
domains (analogous to U) and any number of additional do-
mains that do not trust any others. ERIM’s initialization code
creates a private heap for each component, and ERIM’s cus-
tom allocator allocates from the heap of the currently execut-
ing component. Each component can also (in its own code)
allocate a per-thread stack, to protect stack-allocated sensi-
tive data when calling into other untrusted domains. Stacks
can be mandatorily switched by ERIM’s call gates.
ERIM for integrity only Some applications care only
about the integrity of protected data, but not its conﬁdential-
ity. Examples include CPI, which needs to protect only the
integrity of code pointers. In such applications, efﬁciency
can be improved by allowing U to read MT directly, thus
avoiding the need to invoke a call gate for reading MT. The
ERIM design we have described so far can be easily modi-
ﬁed to support this case. Only the deﬁnition of the constant
PKRU_DISALLOW_TRUSTED in Listing 1 has to change
to also allow read-only access to MT. With this change, read
access to MT is always enabled.
Just-in-time (jit) compilers with ERIM ERIM works
with jit compilers that follow standard DEP and do not allow
code pages that are writable and executable at the same time.
Such jit compilers write new executable code into newly al-
located, non-executable pages and change these pages’ per-
missions to non-writable and executable once the compila-
tion ﬁnishes. ERIM’s mprotect interception defers enabling
execute permissions until after a binary inspection, as de-
scribed in Section 3.4. When a newly compiled page is
executed for the ﬁrst time, ERIM handles the page exe-
cute permission fault, scans the new page for unsafe WRP-
KRUs/XRSTORs and enables the execute permission if no
unsafe occurrences exist. This mechanism is safe, but may
lead to program crashes if the jit compiler accidentally emits
an unsafe WRPKRU or XRSTOR. ERIM-aware jit compil-
ers can emit WRPKRU- and XRSTOR-free binary code by
relying on the rewrite strategy described in Section 4, and
inserting call gates when necessary.
OS privilege separation The design described so far pro-
vides memory isolation. Some applications, however, re-
quire privilege separation between T and U with respect to
OS resources. For instance, an application might need to re-
strict the ﬁlesystem name space accessible to U or restrict the
system calls available to U.
ERIM can be easily extended to support privilege sepa-
ration with respect to OS resources, using one of the tech-
niques described in Section 3.4 for intercepting systems calls
that map executable pages.
In fact, intercepting and dis-
allowing these system calls when invoked from U is just
a special case of privilege separation. During process ini-
tialization, ERIM can instruct the kernel to restrict U’s ac-
cess rights. After this, the kernel refuses to grant access
to restricted resources whenever the value of the PKRU is
not PKRU_ALLOW_TRUSTED, indicating that the syscall
does not originate from T. To access restricted resources, U
must invoke T, which can ﬁlter syscalls.
4 Rewriting program binaries
The binary inspection described in Section 3.4 guarantees
that executable pages do not contain unsafe instances of the
WRPKRU and XRSTOR instructions. This is sufﬁcient for
ERIM’s safety. In this section, we show how to generate or
modify program binaries to not contain unsafe WRPKRUs
and XRSTORs, so that they pass the binary inspection.
Intentional occurrences of WRPKRU that are not imme-
diately followed by a transfer to T and all occurrences of
XRSTOR, whether they are generated by a compiler or writ-
ten manually in assembly, can be made safe by inserting
the checks described in Section 3.4 after the instances. In-
advertent occurrences—those that arise unintentionally as
part of a longer x86 instruction and operand, or spanning
two consecutive x86 instructions/operands—are more inter-
esting. We describe a rewrite strategy to eliminate such oc-
currences and how the strategy can be applied by a compiler
or a binary rewriting tool. The strategy can rewrite any se-
quence of x86 instructions and operands containing an inad-
vertent WRPKRU or XRSTOR to a functionally equivalent
sequence without either. In the following we describe the
strategy, brieﬂy argue why it is complete, and summarize an
empirical evaluation of its effectiveness.
Rewrite strategy WRPKRU is a 3 byte instruction,
0x0F01EF. XRSTOR is also always a 3-byte instruction, but
it has more variants, fully described by the regular expres-
1228    28th USENIX Security Symposium
USENIX Association
Rewrite strategy
Insert safety check after instruction
ID Example
1
Overlap with
Opcode
Mod R/M
Cases
Opcode =
WRPKRU/
XRSTOR
Mod R/M =
0x0F
Displacement
Immediate
Full/Partial
sequence
Jump-like
instruction
Full/Partial
sequence
Change to unused register + move command
Push/Pop used register + move command
Change mode to use register
Move code segment to alter constant used in
address
Change mode to use register
2
3
4
5
6
7
add ecx, [ebx + 0x01EF0000] → mov eax,
ebx; add ecx, [eax + 0x01EF0000];
add ecx, [ebx + 0x01EF0000] → push eax;
mov eax, ebx; add ecx, [eax + 0x01EF0000];
pop eax;
add eax, 0x0F01EF00 → (push ebx;) mov ebx,
0x0F010000; add ebx, 0x0000EA00; add eax,
ebx; (pop ebx;)
call
0x0FA0EEFF]
add eax, 0x0F01EF → (push ebx;) mov ebx,
0x0F01EE00; add ebx, 0x00000100; add eax,
ebx; (pop ebx;)
add
0x0E01EF00; add ebx, 0x01000000
[rip + 0x0F01EF00] → call
[rip +
ebx,
0x0F01EF00 → add
ebx,
Associative
opcode
Apply instruction twice with different imme-
diates to get equivalent effect
Table 1: Rewrite strategy for intra-instruction occurrences of WRPKRU and XRSTOR
sion 0x0FAE[2|6|A][8-F]. There are two cases to consider.
First, a WRPKRU or XRSTOR sequence can span two or
more x86 instructions. Such sequences can be “broken” by
inserting a 1-byte nop like 0x90 between the two consecutive
instructions. 0x90 does not coincide with any individual byte
of WRPKRU or XRSTOR, so this insertion cannot generate
a new occurrence.
Second, a WRPKRU or XRSTOR may appear entirely
within a longer instruction including any immediate operand.