M’
conf ’
A
Figure 3. Sketch of the deﬁnition of reactive
message secrecy. The view of H should be
indistinguishable in both conﬁgurations.
We further deﬁne that RS ,f,g,L accepts L(k) inputs at each
port in S ∪ S (cid:3)
with k being the security parameter and that
it reads the ﬁrst L(k) bits of each input.
3
It is easily provable that RS ,f,g,L is polynomial-time if L
is polynomially bounded since only a polynomial number
of inputs of polynomial length are processed, hence only a
polynomial number of entries is created in T and the selec-
tion of payloads ni is therefore easy to achieve in polyno-
mial time. Moreover, it is clear by deﬁnition that for every
n there exists at most one m such that (m, n) ∈ T , and vice
versa.
Reactive payload secrecy for an arbitrary system is now
captured by requiring that no user can distinguish whether it
is interacting with an arbitrary adversary, the system and a
replacement machine, or with the same adversary, the sys-
tem and a machine F that simply forwards messages be-
tween the user and the system without modifying them.
This is illustrated in Figure 3. We ﬁrst formally introduce
the forwarding machine and then give the deﬁnition of pay-
load secrecy formally.
Deﬁnition 3.3 (Forwarding Machine) Let a port set S and
a function L: N → N∪{∞} be given. The forwarding ma-
chine FS ,L for S and L is deﬁned as follows: It has the port
set S and a renamed version S (cid:3)
of S C. On input a message
l at a port in S or S (cid:3)
, it forwards l to the corresponding port
in S (cid:3)
or S , respectively. FS ,L accepts L(k) inputs at each
port in S ∪ S (cid:3)
with k being the security parameter and reads
the ﬁrst L(k) bits of each input.
3
Deﬁnition 3.4 (Reactive Payload Secrecy) Let a system
Sys, a structure ( ˆM , S ) ∈ Sys, and payload selection func-
tions f and g be given. Let ( ˆM (cid:3)
, S (cid:3)) be the structure where
the port names of ports in S are consistently replaced on the
machines ˆM as for the port set S (cid:3)
in RS,f,g,L, see Figure 3.
Then we say that the payload messages selected by f and g
are
•
in ( ˆM , S ), written( ˆM , S ) =
perfectly secret
[f, g]( ˆM , S ), iff for all functions L: N → N ∪ {∞}
and for all conﬁgurations conf = ( ˆM (cid:3)∪{RS ,f,g,L}, S ,
(cid:3) = ( ˆM (cid:3) ∪ {FS ,L}, S , H, A) (i.e.,
H, A) and conf
with the same user H and adversary A), we have
view conf (H) = view conf (cid:1)(H).
• computationally secret in ( ˆM , S ), written ( ˆM , S ) ≈
[f, g]( ˆM , S ), iff the above holds for all polynomi-
ally bounded functions L, polynomial-time users H,
polynomial-time adversaries A, and with equality of
views replaced by indistinguishability of views.
• perfectly respectively computationally secret in Sys,
written Sys = [f, g]Sys respectively Sys ≈ [f, g]Sys,
iff ( ˆM , S ) = [f, g]( ˆM , S ) respectively ( ˆM , S ) ≈
[f, g]( ˆM , S ) holds for all ( ˆM , S ) ∈ Sys.
3
Clearly, perfect secrecy of payloads implies computational
secrecy.
3.2 Payload Secrecy Preservation under Simu-
latability
We now show that if a system Sys 1 is as secure as a
system Sys 2 in the sense of universal simulatability, then
secrecy of payloads selected by payload selection functions
f and g in Sys 2 implies the secrecy of the same payloads in
Sys 1. This is a basis for proving payload secrecy for ideal
systems and deriving it automatically for corresponding real
systems.
Theorem 3.1 (General Preservation Theorem for Payload
Secrecy) Let systems Sys 1, Sys 2 and payload selection
functions f and g be given, and let Sys 1 ≥univ
sec Sys 2. Then
Sys 2 ≈ [f, g]Sys 2 implies Sys 1 ≈ [f, g]Sys 1.
2
The proof can be found in the long version of this paper.
The preservation theorem constitutes a powerful tool for
rigorously showing the secrecy of speciﬁc payloads in ar-
bitrary reactive systems based on simple, usually even de-
terministic abstractions. Speciﬁcally for protocols over the
ideal Dolev-Yao-style cryptographic library we can go even
further and link the cryptographic secrecy notion to the orig-
inal idea of symbolic secrecy.
3.3 Symbolic Message Secrecy and its Crypto-
graphic Implications
For Dolev-Yao models, the original notion of the sym-
bolic secrecy of a payload message is that the adversary
does not get this payload into its knowledge set, i.e., in the
current setting, that it does not get a handle to this payload.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
with (m, n) ∈ T for some m only takes place by prop-
agation of n itself.
• If ˆMH passes such a value n (i.e., one that arose from
cryH , then
information ﬂow as in the previous item) to TH
only as the argument of a command store.
• If ˆMH passes such a value n to RSH,f,g,L, then only
as a message part selected by g, and vice versa, i.e., g
only selects such values n for replacement.
• A term D[i] resulting from such a command store(n)
never gets an adversary handle, i.e., D[i].hnd a = ↓.
Then we say that the payloads selected by f and g are sym-
bolically secret in Sys comb,id .
3
The condition that ˆMH has no free ports except those con-
nected to its user or the cryptographic library means that the
protocol does not communicate with the adversary except
via the send commands within the cryptographic library,
i.e., by the Dolev-Yao-style model.
Theorem 3.2 (Symbolic and Computational Payload Se-
crecy in Protocols) Let systems Sys and Sys comb,id and
payload selection functions f and g be given as in Deﬁ-
nition 3.5. If the payloads selected by f and g are symboli-
cally secret in Sys comb,id, they are computationally secret in
Sys comb,id.
2
The proof can be found in the long version of the paper.
The complexity of the symbolic information-ﬂow analysis
underlying symbolic payload secrecy depends on the pro-
tocol language. Some simple high-level protocol expres-
sions do not allow any information ﬂow on payload mes-
sages except by direct assignments x := y, in particular the
classical arrow notation without branching. Then the ﬁrst
condition is fulﬁlled for all protocols expressed in this lan-
guage, and typically so is the second condition because of
typing. Other languages may allow branches and thus indi-
rect information ﬂow, but still no direct operators on pay-
load messages. Combining such an information-ﬂow anal-
ysis with an analysis of the knowledge sets of a Dolev-Yao
model (here represented by the possible adversary handles)
that can arise by executing the protocol, is a standard prob-
lem addressed by symbolic proof tools for cryptographic
protocols. The analysis might be made even more symbolic
by replacing RSH,f,g,L by a symbolic machine that chooses
new names instead of random values, but that makes further
conditions on the language used at the protocol interface to
the user which we did not want to impose here for consis-
tency with the cryptographic deﬁnitions.
Combining the results of Theorem 3.2, Theorem 3.1, and
the fact that the real cryptographic library is as secure as the
ideal one [11, 12, 9] yields the following corollary, which
H
m
RS,f,g,L
n
MH
cry
THH
A
Information flow
analysis for n
Knowledge (handle)
analysis for n
Sys
Syscomb,id
Syscry,id
Figure 4. Symbolic payload secrecy in a pro-
tocol Sys
This is captured by the following deﬁnition, which consid-
ers a protocol that runs on top of the cryptographic library,
corresponding to the usual scenario for symbolic secrecy
analysis. The protocol is represented by a system Sys; typ-
ically such a system allows many interleaved executions of
one or more protocols in the narrow sense. Even for sym-
bolic secrecy we need the replacement machines in the gen-
eral reactive setting with arbitrary protocol users H because
we have to factor out the case that H hands the same payload
directly to the adversary A, or sends it via other protocol ex-
ecutions. The situation is illustrated in Figure 4.
Deﬁnition 3.5 (Symbolic Payload Secrecy in Protocols)
Let a polynomial-time system Sys = {( ˆMH, SH ∪
S cryH C ) | H ⊆ {1, . . . , n}} be given, i.e., a system that can
use the cryptographic library Sys cry,id, and where the free
ports of ˆMH, i.e., the ports that are connected to other ma-
chines, are SH ∪ S cryH C for all H. We assume further that
the states of the machines in Sys are given by individual
variables and their state transitions by programs over these
variables, so that we can speak of a static information-ﬂow
analysis. Moreover, let payload selection functions f and g
be given.
cryH }, SH) | H ⊆
{1, . . . , n}} denote the composition of Sys and Sys cry,id,
and for every H let ( ˆM (cid:3)
H) denote the struc-
ture where the port names of ports in SH are consistently
replaced on the machines in ˆMH as for the port set S (cid:3)
H in
RSH,f,g,L.
Assume that for all functions L: N → N ∪ {∞} and
cryH , RSH,f,g,L}, SH, H, A) the
all conﬁgurations ( ˆM (cid:3)
following holds throughout all runs, where D denotes the
cryptographic term database and T the replacement table in
RSH,f,g,L:
:= {( ˆMH ∪ {TH
cryH }, S (cid:3)
Let Sys comb,id
H ∪ {TH
H ∪{TH
• Within ˆMH, static information ﬂow from any input n
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
links symbolic secrecy to the cryptographic secrecy of the
same protocol with a real cryptographic implementation.
Corollary 3.1 With the notation of Deﬁnition 3.5, let the
payload messages selected by f and g be symbolically se-
cret in Sys comb,id. Then the payloads selected by f and
g are computationally secret in the system Sys comb,real :=
{( ˆMH ∪ ˆM cryH , SH) | H ⊆ {1, . . . , n}} where ˆM cryH denotes
the set of machines of the real cryptographic library for a
set H.
2
4 Key Secrecy
In this section, we investigate the relationship of the
secrecy of symmetric keys in the symbolic and the cryp-
tographic approach. We deﬁne symbolic key secrecy for
the ideal Dolev-Yao-style cryptographic library and crypto-
graphic key secrecy for the real library, and we show that
symbolic key secrecy implies cryptographic secrecy of the
corresponding keys.
The symbolic secrecy deﬁnition is based on the typ-
ical notion that a term is not an element of the adver-
sary’s knowledge set. Recall that in the given Dolev-Yao-
style library, the adversary’s knowledge set is the set of all
database entries (representing terms) to which the adversary
has a handle. However, as explained in the introduction, we
cannot hope to show the strong notion of cryptographic key
secrecy, i.e., that the real cryptographic adversary cannot
distinguish a real key from a fresh random key, for all keys
without an adversary handle, but only for keys that are also
unused, i.e., no corresponding encryption or authenticator
has an adversary handle.
Furthermore, we have to be careful with the notion of
correspondence between ideal and real keys for the secrecy
preservation theorem. Originally, runs of either the ideal
system or the real system are deﬁned separately, and a per-
key correspondence exists only in the simulatability proof.
We start by using this correspondence. Then we deﬁne a
more abstract correspondence notion without reference to
the proof by characterizing the keys to be secret as a func-
tion of the user view, which exists in each system and should
be indistinguishable between them.
4.1 Symbolic and Cryptographic Key Secrecy
As a ﬁrst step towards deﬁning symbolic key secrecy, we
consider one state of the ideal Dolev-Yao-style library and
deﬁne that a handle points to a symmetric key, that the key
is symbolically unknown to the adversary, and that it has
not been used for encryption or authentication. These are
the symbolic conditions under which we can hope to prove
that the corresponding real key is indistinguishable from a
fresh random key for the adversary. Note that such a key
may have been treated in the ways usual in key exchange
protocols, e.g., an honest user may have put it into a list,
encrypted the list, and sent it to another honest user.
For the third condition in the following deﬁnition, note
that the arguments of a symmetric authenticator and a sym-
metric encryption with a key of an honest user are of the
form (l, pk) where l is the plaintext index and pk the index
of the public tag of the secret key, with pk = sk − 1 for the
secret key index.
Deﬁnition 4.1 (Symbolically Secret Keys) Let H ⊆
{1, . . . , n}, a database state D of TH
cryH , and a pair
(u, lhnd) ∈ H×HNDS of a user and a handle be given. Let
i := D[hnd u = lhnd].ind be the corresponding database in-
dex. We say that the term under (u, lhnd)
• is a symmetric key iff D[i].type ∈ {ska, skse}.
• is symbolically unknown to the adversary, or short
symbolically unknown, iff D[i].hnd a = ↓.
• has not been used for encryption/authentication, or
short is unused, iff for all indices j ∈ N we have
D[j].type ∈ {aut, symenc} ⇒ D[j].arg[2] (cid:14)= i − 1.
• is a symbolically secret key iff it has the three previous
properties.
3
Essentially we want to show that symbolically secret keys
are also cryptographically secret. However, the only direct
correspondence between one particular symbolic key and
one particular real key exists in a so-called combined sys-
tem within the proof of the cryptographic library. Hence
we will show both a close per-key relation for the combined
system (Lemma 4.1) and a more abstract theorem that con-
siders each of the real and ideal systems as a whole (The-
orem 4.1). For the latter, we introduce a function seckeys
based on the user view that indicates the keys that the users
consider secret. We show that if this consideration is always
correct in the ideal system in the symbolic sense, then it is
also always correct in the real system in the cryptographic
sense. In practical situations, such a function seckeys might
denote “the second key that was exchanged between users
u and v”, or “all keys that were the results of a successful
key-exchange protocol KX”. In particular, the latter type of
function seckeys is the symbolical formulation of secrecy
goals on key exchange protocols. Formally, the function
seckeys maps the user view to a set of triples (u, lhnd, t) of a
user, a handle, and a type, pointing to the supposedly secret
keys.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Dis
seckeys
keysreal
va
keysfresh
H
for H be given. Let genA and genSE denote the key genera-
tion algorithms of A and SE, respectively. We say that this
conﬁguration keeps the keys in seckeys cryptographically
secret iff for all probabilistic-polynomial time algorithms
Dis (the distinguisher), we have
|Pr[Dis(1k, va, keysreal) = 1]
−Pr[Dis(1k, va, keysfresh) = 1]| ∈ NEGL
i
(as a function of the security parameter k), where the used
random variables are deﬁned as follows: For r ∈ run conf ,
let va := view conf (A)(r) be the view of the adversary,
, ti)i=1,...,n := seckeys(view conf (H)(r)) be the
let (ui, lhnd
user-handle-type triples of presumably secret keys, and
:=
let the keys be keysreal
].type = ti
Dui[hnd ui = lhnd
and ski :=  otherwise, and keysfresh := (sk(cid:3)
i )i=1,...,n with
i ← genA(1k) if ti = ska,